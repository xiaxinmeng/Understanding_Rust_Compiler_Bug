{"sha": "3e5400f4acc56a3e6a25ebeb5f7bfcf9d7d3646a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2U1NDAwZjRhY2M1NmEzZTZhMjVlYmViNWY3YmZjZjlkN2QzNjQ2YQ==", "commit": {"author": {"name": "Pierre-Marie de Rodat", "email": "pmderodat@gcc.gnu.org", "date": "2017-11-08T16:04:35Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "pmderodat@gcc.gnu.org", "date": "2017-11-08T16:04:35Z"}, "message": "[multiple changes]\n\n2017-11-08  Piotr Trojanek  <trojanek@adacore.com>\n\n\t* spark_xrefs.ads (SPARK_Xref_Record): Referenced object is now\n\trepresented by Entity_Id.\n\t(SPARK_Scope_Record): Referenced scope (e.g. subprogram) is now\n\trepresented by Entity_Id; this information is not repeated as\n\tScope_Entity.\n\t(Heap): Moved from lib-xref-spark_specific.adb, to reside next to\n\tName_Of_Heap_Variable.\n\t* spark_xrefs.adb (dspark): Adapt debug routine to above changes in\n\tdata types.\n\t* lib-xref-spark_specific.adb: Adapt routines for populating SPARK\n\tscope and xrefs tables to above changes in data types.\n\n2017-11-08  Justin Squirek  <squirek@adacore.com>\n\n\t* sem_ch8.adb (Mark_Use_Clauses): Add condition to always mark the\n\tprimitives of generic actuals.\n\t(Mark_Use_Type): Add recursive call to properly mark class-wide type's\n\tbase type clauses as per ARM 8.4 (8.2/3).\n\n2017-11-08  Ed Schonberg  <schonberg@adacore.com>\n\n\t* sem_ch6.adb (Analyze_Generic_Subprobram_Body): Validate\n\tcategorization dependency of the body, as is done for non-generic\n\tunits.\n\t(New_Overloaded_Entity, Visible_Part_Type): Remove linear search\n\tthrough declarations (Simple optimization, no behavior change).\n\nFrom-SVN: r254539", "tree": {"sha": "989def40a76a3d4d1f669135a44fea83700b0cda", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/989def40a76a3d4d1f669135a44fea83700b0cda"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3e5400f4acc56a3e6a25ebeb5f7bfcf9d7d3646a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3e5400f4acc56a3e6a25ebeb5f7bfcf9d7d3646a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3e5400f4acc56a3e6a25ebeb5f7bfcf9d7d3646a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3e5400f4acc56a3e6a25ebeb5f7bfcf9d7d3646a/comments", "author": null, "committer": null, "parents": [{"sha": "013e9958f80bbba91f14dba7f1fa83ac9809ad7d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/013e9958f80bbba91f14dba7f1fa83ac9809ad7d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/013e9958f80bbba91f14dba7f1fa83ac9809ad7d"}], "stats": {"total": 143, "additions": 80, "deletions": 63}, "files": [{"sha": "6b1d7cab580a552896fe2a9bd11992839e7d4c1c", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3e5400f4acc56a3e6a25ebeb5f7bfcf9d7d3646a/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3e5400f4acc56a3e6a25ebeb5f7bfcf9d7d3646a/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=3e5400f4acc56a3e6a25ebeb5f7bfcf9d7d3646a", "patch": "@@ -1,3 +1,32 @@\n+2017-11-08  Piotr Trojanek  <trojanek@adacore.com>\n+\n+\t* spark_xrefs.ads (SPARK_Xref_Record): Referenced object is now\n+\trepresented by Entity_Id.\n+\t(SPARK_Scope_Record): Referenced scope (e.g. subprogram) is now\n+\trepresented by Entity_Id; this information is not repeated as\n+\tScope_Entity.\n+\t(Heap): Moved from lib-xref-spark_specific.adb, to reside next to\n+\tName_Of_Heap_Variable.\n+\t* spark_xrefs.adb (dspark): Adapt debug routine to above changes in\n+\tdata types.\n+\t* lib-xref-spark_specific.adb: Adapt routines for populating SPARK\n+\tscope and xrefs tables to above changes in data types.\n+\n+2017-11-08  Justin Squirek  <squirek@adacore.com>\n+\n+\t* sem_ch8.adb (Mark_Use_Clauses): Add condition to always mark the\n+\tprimitives of generic actuals.\n+\t(Mark_Use_Type): Add recursive call to properly mark class-wide type's\n+\tbase type clauses as per ARM 8.4 (8.2/3).\n+\n+2017-11-08  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* sem_ch6.adb (Analyze_Generic_Subprobram_Body): Validate\n+\tcategorization dependency of the body, as is done for non-generic\n+\tunits.\n+\t(New_Overloaded_Entity, Visible_Part_Type): Remove linear search\n+\tthrough declarations (Simple optimization, no behavior change).\n+\n 2017-11-08  Piotr Trojanek  <trojanek@adacore.com>\n \n \t* spark_xrefs.ads (SPARK_Xref_Record): Remove inessential components."}, {"sha": "1b31c6acd1114faebc3e6345123af5060e86d19d", "filename": "gcc/ada/lib-xref-spark_specific.adb", "status": "modified", "additions": 13, "deletions": 17, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3e5400f4acc56a3e6a25ebeb5f7bfcf9d7d3646a/gcc%2Fada%2Flib-xref-spark_specific.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3e5400f4acc56a3e6a25ebeb5f7bfcf9d7d3646a/gcc%2Fada%2Flib-xref-spark_specific.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flib-xref-spark_specific.adb?ref=3e5400f4acc56a3e6a25ebeb5f7bfcf9d7d3646a", "patch": "@@ -66,9 +66,6 @@ package body SPARK_Specific is\n    -- Local Variables --\n    ---------------------\n \n-   Heap : Entity_Id := Empty;\n-   --  A special entity which denotes the heap object\n-\n    package Drefs is new Table.Table (\n      Table_Component_Type => Xref_Entry,\n      Table_Index_Type     => Xref_Entry_Number,\n@@ -164,14 +161,13 @@ package body SPARK_Specific is\n          --  range.\n \n          SPARK_Scope_Table.Append\n-           ((Scope_Name     => new String'(Unique_Name (E)),\n+           ((Scope_Id       => E,\n              File_Num       => Dspec,\n              Scope_Num      => Scope_Id,\n              Spec_File_Num  => 0,\n              Spec_Scope_Num => 0,\n              From_Xref      => 1,\n-             To_Xref        => 0,\n-             Scope_Entity   => E));\n+             To_Xref        => 0));\n \n          Scope_Id := Scope_Id + 1;\n       end Add_SPARK_Scope;\n@@ -351,7 +347,7 @@ package body SPARK_Specific is\n \n       function Entity_Of_Scope (S : Scope_Index) return Entity_Id is\n       begin\n-         return SPARK_Scope_Table.Table (S).Scope_Entity;\n+         return SPARK_Scope_Table.Table (S).Scope_Id;\n       end Entity_Of_Scope;\n \n       -------------------\n@@ -423,7 +419,7 @@ package body SPARK_Specific is\n          function Is_Past_Scope_Entity return Boolean is\n          begin\n             for Index in SPARK_Scope_Table.First .. S - 1 loop\n-               if SPARK_Scope_Table.Table (Index).Scope_Entity = E then\n+               if SPARK_Scope_Table.Table (Index).Scope_Id = E then\n                   return True;\n                end if;\n             end loop;\n@@ -435,7 +431,7 @@ package body SPARK_Specific is\n \n       begin\n          for Index in S .. SPARK_Scope_Table.Last loop\n-            if SPARK_Scope_Table.Table (Index).Scope_Entity = E then\n+            if SPARK_Scope_Table.Table (Index).Scope_Id = E then\n                return True;\n             end if;\n          end loop;\n@@ -634,7 +630,7 @@ package body SPARK_Specific is\n          declare\n             S : SPARK_Scope_Record renames SPARK_Scope_Table.Table (Index);\n          begin\n-            Set_Scope_Num (S.Scope_Entity, S.Scope_Num);\n+            Set_Scope_Num (S.Scope_Id, S.Scope_Num);\n          end;\n       end loop;\n \n@@ -800,10 +796,10 @@ package body SPARK_Specific is\n             end if;\n \n             SPARK_Xref_Table.Append (\n-              (Entity_Name => new String'(Unique_Name (Ref.Ent)),\n-               File_Num    => Dependency_Num (Ref.Lun),\n-               Scope_Num   => Get_Scope_Num (Ref.Ref_Scope),\n-               Rtype       => Typ));\n+              (Entity    => Unique_Entity (Ref.Ent),\n+               File_Num  => Dependency_Num (Ref.Lun),\n+               Scope_Num => Get_Scope_Num (Ref.Ref_Scope),\n+               Rtype     => Typ));\n          end;\n       end loop;\n \n@@ -948,7 +944,7 @@ package body SPARK_Specific is\n             declare\n                Srec : SPARK_Scope_Record renames SPARK_Scope_Table.Table (S);\n             begin\n-               Entity_Hash_Table.Set (Srec.Scope_Entity, S);\n+               Entity_Hash_Table.Set (Srec.Scope_Id, S);\n             end;\n          end loop;\n \n@@ -959,14 +955,14 @@ package body SPARK_Specific is\n                Srec : SPARK_Scope_Record renames SPARK_Scope_Table.Table (S);\n \n                Spec_Entity : constant Entity_Id :=\n-                               Unique_Entity (Srec.Scope_Entity);\n+                               Unique_Entity (Srec.Scope_Id);\n                Spec_Scope  : constant Scope_Index :=\n                                Entity_Hash_Table.Get (Spec_Entity);\n \n             begin\n                --  Generic spec may be missing in which case Spec_Scope is zero\n \n-               if Spec_Entity /= Srec.Scope_Entity\n+               if Spec_Entity /= Srec.Scope_Id\n                  and then Spec_Scope /= 0\n                then\n                   Srec.Spec_File_Num :="}, {"sha": "5dc92d28634f086172e0d10573d4f7df25eeebad", "filename": "gcc/ada/sem_ch6.adb", "status": "modified", "additions": 11, "deletions": 26, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3e5400f4acc56a3e6a25ebeb5f7bfcf9d7d3646a/gcc%2Fada%2Fsem_ch6.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3e5400f4acc56a3e6a25ebeb5f7bfcf9d7d3646a/gcc%2Fada%2Fsem_ch6.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch6.adb?ref=3e5400f4acc56a3e6a25ebeb5f7bfcf9d7d3646a", "patch": "@@ -1510,6 +1510,7 @@ package body Sem_Ch6 is\n \n       Process_End_Label (Handled_Statement_Sequence (N), 't', Current_Scope);\n       Update_Use_Clause_Chain;\n+      Validate_Categorization_Dependency (N, Gen_Id);\n       End_Scope;\n       Check_Subprogram_Order (N);\n \n@@ -10118,42 +10119,26 @@ package body Sem_Ch6 is\n \n          function Visible_Part_Type (T : Entity_Id) return Boolean is\n             P : constant Node_Id := Unit_Declaration_Node (Scope (T));\n-            N : Node_Id;\n \n          begin\n             --  If the entity is a private type, then it must be declared in a\n             --  visible part.\n \n             if Ekind (T) in Private_Kind then\n                return True;\n-            end if;\n-\n-            --  Otherwise, we traverse the visible part looking for its\n-            --  corresponding declaration. We cannot use the declaration\n-            --  node directly because in the private part the entity of a\n-            --  private type is the one in the full view, which does not\n-            --  indicate that it is the completion of something visible.\n-\n-            N := First (Visible_Declarations (Specification (P)));\n-            while Present (N) loop\n-               if Nkind (N) = N_Full_Type_Declaration\n-                 and then Present (Defining_Identifier (N))\n-                 and then T = Defining_Identifier (N)\n-               then\n-                  return True;\n \n-               elsif Nkind_In (N, N_Private_Type_Declaration,\n-                                  N_Private_Extension_Declaration)\n-                 and then Present (Defining_Identifier (N))\n-                 and then T = Full_View (Defining_Identifier (N))\n-               then\n-                  return True;\n-               end if;\n+            elsif Is_Type (T) and then Has_Private_Declaration (T) then\n+               return True;\n \n-               Next (N);\n-            end loop;\n+            elsif Is_List_Member (Declaration_Node (T))\n+              and then List_Containing (Declaration_Node (T)) =\n+                         Visible_Declarations (Specification (P))\n+            then\n+               return True;\n \n-            return False;\n+            else\n+               return False;\n+            end if;\n          end Visible_Part_Type;\n \n       --  Start of processing for Check_For_Primitive_Subprogram"}, {"sha": "31ce62b3867927d2731a2ad711190978caaec5d5", "filename": "gcc/ada/sem_ch8.adb", "status": "modified", "additions": 16, "deletions": 3, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3e5400f4acc56a3e6a25ebeb5f7bfcf9d7d3646a/gcc%2Fada%2Fsem_ch8.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3e5400f4acc56a3e6a25ebeb5f7bfcf9d7d3646a/gcc%2Fada%2Fsem_ch8.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch8.adb?ref=3e5400f4acc56a3e6a25ebeb5f7bfcf9d7d3646a", "patch": "@@ -8320,6 +8320,7 @@ package body Sem_Ch8 is\n \n       procedure Mark_Use_Type (E : Entity_Id) is\n          Curr : Node_Id;\n+         Base : Entity_Id;\n \n       begin\n          --  Ignore void types and unresolved string literals and primitives\n@@ -8331,12 +8332,22 @@ package body Sem_Ch8 is\n             return;\n          end if;\n \n+         --  Primitives with class-wide operands might additionally render\n+         --  their base type's use_clauses effective - so do a recursive check\n+         --  here.\n+\n+         Base := Base_Type (Etype (E));\n+\n+         if Ekind (Base) = E_Class_Wide_Type then\n+            Mark_Use_Type (Base);\n+         end if;\n+\n          --  The package containing the type or operator function being used\n          --  may be in use as well, so mark any use_package_clauses for it as\n          --  effective. There are also additional sanity checks performed here\n          --  for ignoring previous errors.\n \n-         Mark_Use_Package (Scope (Base_Type (Etype (E))));\n+         Mark_Use_Package (Scope (Base));\n \n          if Nkind (E) in N_Op\n            and then Present (Entity (E))\n@@ -8345,7 +8356,7 @@ package body Sem_Ch8 is\n             Mark_Use_Package (Scope (Entity (E)));\n          end if;\n \n-         Curr := Current_Use_Clause (Base_Type (Etype (E)));\n+         Curr := Current_Use_Clause (Base);\n          while Present (Curr)\n             and then not Is_Effective_Use_Clause (Curr)\n          loop\n@@ -8397,7 +8408,9 @@ package body Sem_Ch8 is\n                  or else Ekind_In (Id, E_Generic_Function,\n                                        E_Generic_Procedure))\n            and then (Is_Potentially_Use_Visible (Id)\n-                      or else Is_Intrinsic_Subprogram (Id))\n+                      or else Is_Intrinsic_Subprogram (Id)\n+                      or else (Ekind_In (Id, E_Function, E_Procedure)\n+                                and then Is_Generic_Actual_Subprogram (Id)))\n          then\n             Mark_Parameters (Id);\n          end if;"}, {"sha": "e093139704ffdb0dc54a9b626047fc3379dc13e8", "filename": "gcc/ada/spark_xrefs.adb", "status": "modified", "additions": 4, "deletions": 9, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3e5400f4acc56a3e6a25ebeb5f7bfcf9d7d3646a/gcc%2Fada%2Fspark_xrefs.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3e5400f4acc56a3e6a25ebeb5f7bfcf9d7d3646a/gcc%2Fada%2Fspark_xrefs.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fspark_xrefs.adb?ref=3e5400f4acc56a3e6a25ebeb5f7bfcf9d7d3646a", "patch": "@@ -23,7 +23,8 @@\n --                                                                          --\n ------------------------------------------------------------------------------\n \n-with Output; use Output;\n+with Output;   use Output;\n+with Sem_Util; use Sem_Util;\n \n package body SPARK_Xrefs is\n \n@@ -81,17 +82,13 @@ package body SPARK_Xrefs is\n             Write_Int (Int (ASR.Scope_Num));\n             Write_Str (\"  Scope_Name = \"\"\");\n \n-            if ASR.Scope_Name /= null then\n-               Write_Str (ASR.Scope_Name.all);\n-            end if;\n+            Write_Str (Unique_Name (ASR.Scope_Id));\n \n             Write_Char ('\"');\n             Write_Str  (\"  From = \");\n             Write_Int  (Int (ASR.From_Xref));\n             Write_Str  (\"  To = \");\n             Write_Int  (Int (ASR.To_Xref));\n-            Write_Str  (\"  Scope_Entity = \");\n-            Write_Int  (Int (ASR.Scope_Entity));\n             Write_Eol;\n          end;\n       end loop;\n@@ -111,9 +108,7 @@ package body SPARK_Xrefs is\n             Write_Int  (Int (Index));\n             Write_Str (\".  Entity_Name = \"\"\");\n \n-            if AXR.Entity_Name /= null then\n-               Write_Str (AXR.Entity_Name.all);\n-            end if;\n+            Write_Str (Unique_Name (AXR.Entity));\n \n             Write_Char ('\"');\n             Write_Str (\"  File_Num = \");"}, {"sha": "e4f1eef1497e63f69c70654878347ec1493eb9ee", "filename": "gcc/ada/spark_xrefs.ads", "status": "modified", "additions": 7, "deletions": 8, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3e5400f4acc56a3e6a25ebeb5f7bfcf9d7d3646a/gcc%2Fada%2Fspark_xrefs.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3e5400f4acc56a3e6a25ebeb5f7bfcf9d7d3646a/gcc%2Fada%2Fspark_xrefs.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fspark_xrefs.ads?ref=3e5400f4acc56a3e6a25ebeb5f7bfcf9d7d3646a", "patch": "@@ -66,7 +66,7 @@ package SPARK_Xrefs is\n    --  until a proper value is determined.\n \n    type SPARK_Xref_Record is record\n-      Entity_Name : String_Ptr;\n+      Entity : Entity_Id;\n       --  Pointer to entity name in ALI file\n \n       File_Num : Nat;\n@@ -109,7 +109,7 @@ package SPARK_Xrefs is\n    --  determined.\n \n    type SPARK_Scope_Record is record\n-      Scope_Name : String_Ptr;\n+      Scope_Id : Entity_Id;\n       --  Pointer to scope name in ALI file\n \n       File_Num : Nat;\n@@ -131,12 +131,6 @@ package SPARK_Xrefs is\n \n       To_Xref : Xref_Index;\n       --  Ending index in Xref table for this scope\n-\n-      --  The following component is only used in-memory, not printed out in\n-      --  ALI file.\n-\n-      Scope_Entity : Entity_Id := Empty;\n-      --  Entity (subprogram or package) for the scope\n    end record;\n \n    package SPARK_Scope_Table is new Table.Table (\n@@ -193,6 +187,11 @@ package SPARK_Xrefs is\n    --  Name of special variable used in effects to denote reads and writes\n    --  through explicit dereference.\n \n+   Heap : Entity_Id := Empty;\n+   --  A special entity which denotes the heap object; it should be considered\n+   --  constant, but needs to be variable, because it can only be initialized\n+   --  after the node tables are created.\n+\n    -----------------\n    -- Subprograms --\n    -----------------"}]}