{"sha": "11e811d8e2f63667f60f73731bb934273f5882b8", "node_id": "C_kwDOANBUbNoAKDExZTgxMWQ4ZTJmNjM2NjdmNjBmNzM3MzFiYjkzNDI3M2Y1ODgyYjg", "commit": {"author": {"name": "Julian Brown", "email": "julian@codesourcery.com", "date": "2022-10-12T20:44:57Z"}, "committer": {"name": "Thomas Schwinge", "email": "thomas@codesourcery.com", "date": "2022-10-28T08:17:34Z"}, "message": "OpenACC: Don't gang-privatize artificial variables [PR90115]\n\nThis patch prevents compiler-generated artificial variables from being\ntreated as privatization candidates for OpenACC.\n\nThe rationale is that e.g. \"gang-private\" variables actually must be\nshared by each worker and vector spawned within a particular gang, but\nthat sharing is not necessary for any compiler-generated variable (at\nleast at present, but no such need is anticipated either).  Variables on\nthe stack (and machine registers) are already private per-\"thread\"\n(gang, worker and/or vector), and that's fine for artificial variables.\n\nWe're restricting this to blocks, as we still need to understand what it\nmeans for a 'DECL_ARTIFICIAL' to appear in a 'private' clause.\n\nSeveral tests need their scan output patterns adjusted to compensate.\n\n2022-10-14  Julian Brown  <julian@codesourcery.com>\n\n\tPR middle-end/90115\ngcc/\n\t* omp-low.cc (oacc_privatization_candidate_p): Artificial vars are not\n\tprivatization candidates.\n\nlibgomp/\n\t* testsuite/libgomp.oacc-fortran/declare-1.f90: Adjust scan output.\n\t* testsuite/libgomp.oacc-fortran/host_data-5.F90: Likewise.\n\t* testsuite/libgomp.oacc-fortran/if-1.f90: Likewise.\n\t* testsuite/libgomp.oacc-fortran/print-1.f90: Likewise.\n\t* testsuite/libgomp.oacc-fortran/privatized-ref-2.f90: Likewise.\n\nCo-authored-by: Thomas Schwinge <thomas@codesourcery.com>", "tree": {"sha": "008e6f5e9504992b24cb6d8a433645bb5647a1a4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/008e6f5e9504992b24cb6d8a433645bb5647a1a4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/11e811d8e2f63667f60f73731bb934273f5882b8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/11e811d8e2f63667f60f73731bb934273f5882b8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/11e811d8e2f63667f60f73731bb934273f5882b8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/11e811d8e2f63667f60f73731bb934273f5882b8/comments", "author": {"login": "jtb20", "id": 6094880, "node_id": "MDQ6VXNlcjYwOTQ4ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/6094880?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jtb20", "html_url": "https://github.com/jtb20", "followers_url": "https://api.github.com/users/jtb20/followers", "following_url": "https://api.github.com/users/jtb20/following{/other_user}", "gists_url": "https://api.github.com/users/jtb20/gists{/gist_id}", "starred_url": "https://api.github.com/users/jtb20/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jtb20/subscriptions", "organizations_url": "https://api.github.com/users/jtb20/orgs", "repos_url": "https://api.github.com/users/jtb20/repos", "events_url": "https://api.github.com/users/jtb20/events{/privacy}", "received_events_url": "https://api.github.com/users/jtb20/received_events", "type": "User", "site_admin": false}, "committer": {"login": "tschwinge", "id": 21753, "node_id": "MDQ6VXNlcjIxNzUz", "avatar_url": "https://avatars.githubusercontent.com/u/21753?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tschwinge", "html_url": "https://github.com/tschwinge", "followers_url": "https://api.github.com/users/tschwinge/followers", "following_url": "https://api.github.com/users/tschwinge/following{/other_user}", "gists_url": "https://api.github.com/users/tschwinge/gists{/gist_id}", "starred_url": "https://api.github.com/users/tschwinge/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tschwinge/subscriptions", "organizations_url": "https://api.github.com/users/tschwinge/orgs", "repos_url": "https://api.github.com/users/tschwinge/repos", "events_url": "https://api.github.com/users/tschwinge/events{/privacy}", "received_events_url": "https://api.github.com/users/tschwinge/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0607307768b66a90e27c5bc91a247acc938f070e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0607307768b66a90e27c5bc91a247acc938f070e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0607307768b66a90e27c5bc91a247acc938f070e"}], "stats": {"total": 81, "additions": 44, "deletions": 37}, "files": [{"sha": "82a93d00f67f6660955b3fa11ca6a8471d31a142", "filename": "gcc/omp-low.cc", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11e811d8e2f63667f60f73731bb934273f5882b8/gcc%2Fomp-low.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11e811d8e2f63667f60f73731bb934273f5882b8/gcc%2Fomp-low.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fomp-low.cc?ref=11e811d8e2f63667f60f73731bb934273f5882b8", "patch": "@@ -10710,6 +10710,28 @@ oacc_privatization_candidate_p (const location_t loc, const tree c,\n \t}\n     }\n \n+  /* If an artificial variable has been added to a bind, e.g.\n+     a compiler-generated temporary structure used by the Fortran front-end, do\n+     not consider it as a privatization candidate.  Note that variables on\n+     the stack are private per-thread by default: making them \"gang-private\"\n+     for OpenACC actually means to share a single instance of a variable\n+     amongst all workers and threads spawned within each gang.\n+     At present, no compiler-generated artificial variables require such\n+     sharing semantics, so this is safe.  */\n+\n+  if (res && block && DECL_ARTIFICIAL (decl))\n+    {\n+      res = false;\n+\n+      if (dump_enabled_p ())\n+\t{\n+\t  oacc_privatization_begin_diagnose_var (l_dump_flags, loc, c, decl);\n+\t  dump_printf (l_dump_flags,\n+\t\t       \"isn%'t candidate for adjusting OpenACC privatization \"\n+\t\t       \"level: %s\\n\", \"artificial\");\n+\t}\n+    }\n+\n   if (res)\n     {\n       if (dump_enabled_p ())"}, {"sha": "89bd4a2d0945ffc3e5c85e458eacf0daf4766adf", "filename": "libgomp/testsuite/libgomp.oacc-fortran/declare-1.f90", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11e811d8e2f63667f60f73731bb934273f5882b8/libgomp%2Ftestsuite%2Flibgomp.oacc-fortran%2Fdeclare-1.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11e811d8e2f63667f60f73731bb934273f5882b8/libgomp%2Ftestsuite%2Flibgomp.oacc-fortran%2Fdeclare-1.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.oacc-fortran%2Fdeclare-1.f90?ref=11e811d8e2f63667f60f73731bb934273f5882b8", "patch": "@@ -215,7 +215,7 @@ program main\n   ! { dg-note {variable 'C\\.[0-9]+' declared in block potentially has improper OpenACC privatization level: 'const_decl'} \"TODO\" { target *-*-* } .-1 }\n   ! { dg-note {variable 'D\\.[0-9]+' declared in block isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } .-2 }\n   ! { dg-note {variable 'S\\.[0-9]+' declared in block isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } .-3 }\n-  ! { dg-note {variable 'desc\\.[0-9]+' declared in block is candidate for adjusting OpenACC privatization level} \"TODO\" { target *-*-* } .-4 }\n+  ! { dg-note {variable 'desc\\.[0-9]+' declared in block isn't candidate for adjusting OpenACC privatization level: artificial} \"\" { target *-*-* } .-4 }\n   use vars\n   use openacc\n   implicit none"}, {"sha": "c3453a579aea14b653b81b84733f8666c2741e07", "filename": "libgomp/testsuite/libgomp.oacc-fortran/host_data-5.F90", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11e811d8e2f63667f60f73731bb934273f5882b8/libgomp%2Ftestsuite%2Flibgomp.oacc-fortran%2Fhost_data-5.F90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11e811d8e2f63667f60f73731bb934273f5882b8/libgomp%2Ftestsuite%2Flibgomp.oacc-fortran%2Fhost_data-5.F90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.oacc-fortran%2Fhost_data-5.F90?ref=11e811d8e2f63667f60f73731bb934273f5882b8", "patch": "@@ -43,7 +43,7 @@ subroutine foo (p2, parr, host_p, host_parr, cond)\n   ! { dg-note {variable 'D\\.[0-9]+' declared in block isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target { ! openacc_host_selected } } .-2 }\n   ! { dg-note {variable 'p\\.[0-9]+' declared in block isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } .-3 }\n   ! { dg-note {variable 'parr\\.[0-9]+' declared in block isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } .-4 }\n-  ! { dg-note {variable 'parm\\.[0-9]+' declared in block is candidate for adjusting OpenACC privatization level} \"TODO\" { target { ! openacc_host_selected } } .-5 }\n+  ! { dg-note {variable 'parm\\.[0-9]+' declared in block isn't candidate for adjusting OpenACC privatization level: artificial} \"\" { target { ! openacc_host_selected } } .-5 }\n #if !ACC_MEM_SHARED\n     if (acc_is_present(p, c_sizeof(p))) stop 5\n     if (acc_is_present(parr, 1)) stop 6\n@@ -54,8 +54,8 @@ subroutine foo (p2, parr, host_p, host_parr, cond)\n     ! { dg-note {variable 'host_p\\.[0-9]+' declared in block isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } .-3 }\n     ! { dg-note {variable 'parr\\.[0-9]+' declared in block isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } .-4 }\n     ! { dg-note {variable 'host_parr\\.[0-9]+' declared in block isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } .-5 }\n-    ! { dg-note {variable 'D\\.[0-9]+' declared in block is candidate for adjusting OpenACC privatization level} \"TODO\" { target *-*-* } .-6 }\n-    ! { dg-note {variable 'transfer\\.[0-9]+' declared in block is candidate for adjusting OpenACC privatization level} \"TODO\" { target *-*-* } .-7 }\n+    ! { dg-note {variable 'D\\.[0-9]+' declared in block isn't candidate for adjusting OpenACC privatization level: artificial} \"\" { target *-*-* } .-6 }\n+    ! { dg-note {variable 'transfer\\.[0-9]+' declared in block isn't candidate for adjusting OpenACC privatization level: artificial} \"\" { target *-*-* } .-7 }\n     ! { dg-note {variable 'parm\\.[0-9]+' declared in block isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } .-8 }\n       ! not mapped yet, so it will be equal to the host pointer.\n       if (transfer(c_loc(p), host_p) /= host_p) stop 7\n@@ -74,9 +74,9 @@ subroutine foo (p2, parr, host_p, host_parr, cond)\n     ! { dg-note {variable 'host_p\\.[0-9]+' declared in block isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } .-5 }\n     ! { dg-note {variable 'host_parr\\.[0-9]+' declared in block isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } .-6 }\n     ! { dg-note {variable 'C\\.[0-9]+' declared in block potentially has improper OpenACC privatization level: 'const_decl'} \"TODO\" { target *-*-* } .-7 }\n-    ! { dg-note {variable 'parm\\.[0-9]+' declared in block is candidate for adjusting OpenACC privatization level} \"TODO\" { target *-*-* } .-8 }\n-    ! { dg-note {variable 'D\\.[0-9]+' declared in block is candidate for adjusting OpenACC privatization level} \"TODO\" { target *-*-* } .-9 }\n-    ! { dg-note {variable 'transfer\\.[0-9]+' declared in block is candidate for adjusting OpenACC privatization level} \"TODO\" { target *-*-* } .-10 }\n+    ! { dg-note {variable 'parm\\.[0-9]+' declared in block isn't candidate for adjusting OpenACC privatization level: artificial} \"\" { target *-*-* } .-8 }\n+    ! { dg-note {variable 'D\\.[0-9]+' declared in block isn't candidate for adjusting OpenACC privatization level: artificial} \"\" { target *-*-* } .-9 }\n+    ! { dg-note {variable 'transfer\\.[0-9]+' declared in block isn't candidate for adjusting OpenACC privatization level: artificial} \"\" { target *-*-* } .-10 }\n     ! { dg-note {variable 'parm\\.[0-9]+' declared in block isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } .-11 }\n       if (.not. acc_is_present(p, c_sizeof(p))) stop 11\n       if (.not. acc_is_present(parr, 1)) stop 12\n@@ -90,8 +90,8 @@ subroutine foo (p2, parr, host_p, host_parr, cond)\n       ! { dg-note {variable 'host_p\\.[0-9]+' declared in block isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } .-3 }\n       ! { dg-note {variable 'parr\\.[0-9]+' declared in block isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } .-4 }\n       ! { dg-note {variable 'host_parr\\.[0-9]+' declared in block isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } .-5 }\n-      ! { dg-note {variable 'D\\.[0-9]+' declared in block is candidate for adjusting OpenACC privatization level} \"TODO\" { target *-*-* } .-6 }\n-      ! { dg-note {variable 'transfer\\.[0-9]+' declared in block is candidate for adjusting OpenACC privatization level} \"TODO\" { target *-*-* } .-7 }\n+      ! { dg-note {variable 'D\\.[0-9]+' declared in block isn't candidate for adjusting OpenACC privatization level: artificial} \"\" { target *-*-* } .-6 }\n+      ! { dg-note {variable 'transfer\\.[0-9]+' declared in block isn't candidate for adjusting OpenACC privatization level: artificial} \"\" { target *-*-* } .-7 }\n       ! { dg-note {variable 'parm\\.[0-9]+' declared in block isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } .-8 }\n #if ACC_MEM_SHARED\n         if (transfer(c_loc(p), host_p) /= host_p) stop 15\n@@ -110,8 +110,8 @@ subroutine foo (p2, parr, host_p, host_parr, cond)\n         ! { dg-note {variable 'parr\\.[0-9]+' declared in block isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } .-4 }\n         ! { dg-note {variable 'host_parr\\.[0-9]+' declared in block isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } .-5 }\n         ! { dg-note {variable 'parm\\.[0-9]+' declared in block isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } .-6 }\n-        ! { dg-note {variable 'D\\.[0-9]+' declared in block is candidate for adjusting OpenACC privatization level} \"TODO\" { target *-*-* } .-7 }\n-        ! { dg-note {variable 'transfer\\.[0-9]+' declared in block is candidate for adjusting OpenACC privatization level} \"TODO\" { target *-*-* } .-8 }\n+        ! { dg-note {variable 'D\\.[0-9]+' declared in block isn't candidate for adjusting OpenACC privatization level: artificial} \"\" { target *-*-* } .-7 }\n+        ! { dg-note {variable 'transfer\\.[0-9]+' declared in block isn't candidate for adjusting OpenACC privatization level: artificial} \"\" { target *-*-* } .-8 }\n #if ACC_MEM_SHARED\n         if (transfer(c_loc(p), host_p) /= host_p) stop 19\n         if (transfer(c_loc(parr), host_parr) /= host_parr) stop 20\n@@ -129,8 +129,8 @@ subroutine foo (p2, parr, host_p, host_parr, cond)\n         ! { dg-note {variable 'parr\\.[0-9]+' declared in block isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } .-4 }\n         ! { dg-note {variable 'host_parr\\.[0-9]+' declared in block isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } .-5 }\n         ! { dg-note {variable 'parm\\.[0-9]+' declared in block isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } .-6 }\n-        ! { dg-note {variable 'D\\.[0-9]+' declared in block is candidate for adjusting OpenACC privatization level} \"TODO\" { target *-*-* } .-7 }\n-        ! { dg-note {variable 'transfer\\.[0-9]+' declared in block is candidate for adjusting OpenACC privatization level} \"TODO\" { target *-*-* } .-8 }\n+        ! { dg-note {variable 'D\\.[0-9]+' declared in block isn't candidate for adjusting OpenACC privatization level: artificial} \"\" { target *-*-* } .-7 }\n+        ! { dg-note {variable 'transfer\\.[0-9]+' declared in block isn't candidate for adjusting OpenACC privatization level: artificial} \"\" { target *-*-* } .-8 }\n #if ACC_MEM_SHARED\n         if (transfer(c_loc(p), host_p) /= host_p) stop 23\n         if (transfer(c_loc(parr), host_parr) /= host_parr) stop 24"}, {"sha": "e0cfd912d0fe26d304acb4efaffbfffbd7480047", "filename": "libgomp/testsuite/libgomp.oacc-fortran/if-1.f90", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11e811d8e2f63667f60f73731bb934273f5882b8/libgomp%2Ftestsuite%2Flibgomp.oacc-fortran%2Fif-1.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11e811d8e2f63667f60f73731bb934273f5882b8/libgomp%2Ftestsuite%2Flibgomp.oacc-fortran%2Fif-1.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.oacc-fortran%2Fif-1.f90?ref=11e811d8e2f63667f60f73731bb934273f5882b8", "patch": "@@ -382,7 +382,7 @@ program main\n   b(:) = 1.0\n \n   !$acc data copyin (a(1:N)) copyout (b(1:N)) if (0 == 1)\n-  ! { dg-note {variable 'parm\\.[0-9]+' declared in block is candidate for adjusting OpenACC privatization level} \"\" { target { ! openacc_host_selected } } .-1 }\n+  ! { dg-note {variable 'parm\\.[0-9]+' declared in block isn't candidate for adjusting OpenACC privatization level: artificial} \"\" { target { ! openacc_host_selected } } .-1 }\n \n #if !ACC_MEM_SHARED\n   if (acc_is_present (a) .eqv. .TRUE.) STOP 21\n@@ -396,15 +396,15 @@ program main\n \n   !$acc data copyin (a(1:N)) if (1 == 1)\n   ! { dg-note {variable 'parm\\.[0-9]+' declared in block isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } .-1 }\n-  ! { dg-note {variable 'parm\\.[0-9]+' declared in block is candidate for adjusting OpenACC privatization level} \"\" { target { ! openacc_host_selected } } .-2 }\n+  ! { dg-note {variable 'parm\\.[0-9]+' declared in block isn't candidate for adjusting OpenACC privatization level: artificial} \"\" { target { ! openacc_host_selected } } .-2 }\n \n #if !ACC_MEM_SHARED\n     if (acc_is_present (a) .eqv. .FALSE.) STOP 23\n #endif\n \n     !$acc data copyout (b(1:N)) if (0 == 1)\n     ! { dg-note {variable 'parm\\.[0-9]+' declared in block isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } .-1 }\n-    ! { dg-note {variable 'parm\\.[0-9]+' declared in block is candidate for adjusting OpenACC privatization level} \"\" { target { ! openacc_host_selected } } .-2 }\n+    ! { dg-note {variable 'parm\\.[0-9]+' declared in block isn't candidate for adjusting OpenACC privatization level: artificial} \"\" { target { ! openacc_host_selected } } .-2 }\n #if !ACC_MEM_SHARED\n       if (acc_is_present (b) .eqv. .TRUE.) STOP 24\n #endif\n@@ -877,7 +877,7 @@ program main\n   b(:) = 1.0\n \n   !$acc data copyin (a(1:N)) copyout (b(1:N)) if (0 == 1)\n-  ! { dg-note {variable 'parm\\.[0-9]+' declared in block is candidate for adjusting OpenACC privatization level} \"\" { target { ! openacc_host_selected } } .-1 }\n+  ! { dg-note {variable 'parm\\.[0-9]+' declared in block isn't candidate for adjusting OpenACC privatization level: artificial} \"\" { target { ! openacc_host_selected } } .-1 }\n \n #if !ACC_MEM_SHARED\n   if (acc_is_present (a) .eqv. .TRUE.) STOP 56\n@@ -891,15 +891,15 @@ program main\n \n   !$acc data copyin (a(1:N)) if (1 == 1)\n   ! { dg-note {variable 'parm\\.[0-9]+' declared in block isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } .-1 }\n-  ! { dg-note {variable 'parm\\.[0-9]+' declared in block is candidate for adjusting OpenACC privatization level} \"\" { target { ! openacc_host_selected } } .-2 }\n+  ! { dg-note {variable 'parm\\.[0-9]+' declared in block isn't candidate for adjusting OpenACC privatization level: artificial} \"\" { target { ! openacc_host_selected } } .-2 }\n \n #if !ACC_MEM_SHARED\n     if (acc_is_present (a) .eqv. .FALSE.) STOP 58\n #endif\n \n     !$acc data copyout (b(1:N)) if (0 == 1)\n     ! { dg-note {variable 'parm\\.[0-9]+' declared in block isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } .-1 }\n-    ! { dg-note {variable 'parm\\.[0-9]+' declared in block is candidate for adjusting OpenACC privatization level} \"\" { target { ! openacc_host_selected } } .-2 }\n+    ! { dg-note {variable 'parm\\.[0-9]+' declared in block isn't candidate for adjusting OpenACC privatization level: artificial} \"\" { target { ! openacc_host_selected } } .-2 }\n #if !ACC_MEM_SHARED\n       if (acc_is_present (b) .eqv. .TRUE.) STOP 59\n #endif"}, {"sha": "d2f89d915f8901a0455ebc0122f495850f91be50", "filename": "libgomp/testsuite/libgomp.oacc-fortran/print-1.f90", "status": "modified", "additions": 1, "deletions": 12, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11e811d8e2f63667f60f73731bb934273f5882b8/libgomp%2Ftestsuite%2Flibgomp.oacc-fortran%2Fprint-1.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11e811d8e2f63667f60f73731bb934273f5882b8/libgomp%2Ftestsuite%2Flibgomp.oacc-fortran%2Fprint-1.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.oacc-fortran%2Fprint-1.f90?ref=11e811d8e2f63667f60f73731bb934273f5882b8", "patch": "@@ -6,15 +6,6 @@\n ! Separate file 'print-1-nvptx.f90' for nvptx offloading.\n ! { dg-skip-if \"separate file\" { offload_target_nvptx } }\n \n-! For GCN offloading compilation, when gang-privatizing 'dt_parm.N'\n-! (see below), we run into an 'gang-private data-share memory exhausted'\n-! error: the default '-mgang-private-size' is too small.  Per\n-! 'gcc/fortran/trans-io.cc'/'libgfortran/io/io.h', that one is\n-! 'struct st_parameter_dt', which indeed is rather big.  Instead of\n-! working out its exact size (which may vary per GCC configuration),\n-! raise '-mgang-private-size' to an arbitrary high value.\n-! { dg-additional-options \"-foffload-options=amdgcn-amdhsa=-mgang-private-size=13579\" { target openacc_radeon_accel_selected } }\n-\n ! { dg-additional-options \"-fopt-info-note-omp\" }\n ! { dg-additional-options \"-foffload=-fopt-info-note-omp\" }\n \n@@ -36,9 +27,7 @@ program main\n   integer :: var = 42\n \n !$acc parallel ! { dg-line l_compute[incr c_compute] }\n-  ! { dg-note {variable 'dt_parm\\.[0-9]+' declared in block is candidate for adjusting OpenACC privatization level} {} { target *-*-* } l_compute$c_compute }\n-  !   { dg-note {variable 'dt_parm\\.[0-9]+' ought to be adjusted for OpenACC privatization level: 'gang'} {} { target *-*-* } l_compute$c_compute }\n-  !   { dg-note {variable 'dt_parm\\.[0-9]+' adjusted for OpenACC privatization level: 'gang'} {} { target { ! openacc_host_selected } } l_compute$c_compute }\n+  ! { dg-note {variable 'dt_parm\\.[0-9]+' declared in block isn't candidate for adjusting OpenACC privatization level: artificial} {} { target *-*-* } l_compute$c_compute }\n   write (0, '(\"The answer is \", I2)') var\n !$acc end parallel\n "}, {"sha": "498ef70b63a4ae977d11c4341f16d2443334c714", "filename": "libgomp/testsuite/libgomp.oacc-fortran/privatized-ref-2.f90", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11e811d8e2f63667f60f73731bb934273f5882b8/libgomp%2Ftestsuite%2Flibgomp.oacc-fortran%2Fprivatized-ref-2.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11e811d8e2f63667f60f73731bb934273f5882b8/libgomp%2Ftestsuite%2Flibgomp.oacc-fortran%2Fprivatized-ref-2.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.oacc-fortran%2Fprivatized-ref-2.f90?ref=11e811d8e2f63667f60f73731bb934273f5882b8", "patch": "@@ -122,9 +122,7 @@ subroutine foo_str(str)\n     ! { dg-note {variable 'str' in 'private' clause is candidate for adjusting OpenACC privatization level} \"\" { target *-*-* } l_loop$c_loop }\n     ! { dg-note {variable 'str' ought to be adjusted for OpenACC privatization level: 'gang'} \"\" { target *-*-* } l_loop$c_loop }\n     ! { dg-note {variable 'str' adjusted for OpenACC privatization level: 'gang'} \"\" { target { ! { openacc_host_selected || { openacc_nvidia_accel_selected && __OPTIMIZE__ } } } } l_loop$c_loop }\n-    ! { dg-note {variable 'char\\.[0-9]+' declared in block is candidate for adjusting OpenACC privatization level} \"\" { target *-*-* } l_loop$c_loop }\n-    ! { dg-note {variable 'char\\.[0-9]+' ought to be adjusted for OpenACC privatization level: 'gang'} \"\" { target *-*-* } l_loop$c_loop }\n-    ! { dg-note {variable 'char\\.[0-9]+' adjusted for OpenACC privatization level: 'gang'} \"\" { target { ! { openacc_host_selected || { openacc_nvidia_accel_selected && __OPTIMIZE__ } } } } l_loop$c_loop }\n+    ! { dg-note {variable 'char\\.[0-9]+' declared in block isn't candidate for adjusting OpenACC privatization level: artificial} \"\" { target *-*-* } l_loop$c_loop }\n     ! { dg-message {sorry, unimplemented: target cannot support alloca} PR65181 { target openacc_nvidia_accel_selected } l_loop$c_loop }\n     do i = 1, 10\n       str(i:i) = achar(ichar('A') + i)\n@@ -167,9 +165,7 @@ subroutine foobar (scalar)\n     ! { dg-note {variable 'scalar' in 'private' clause is candidate for adjusting OpenACC privatization level} \"\" { target *-*-* } l_loop$c_loop }\n     ! { dg-note {variable 'scalar' ought to be adjusted for OpenACC privatization level: 'gang'} \"\" { target *-*-* } l_loop$c_loop }\n     ! { dg-note {variable 'scalar' adjusted for OpenACC privatization level: 'gang'} \"\" { target { ! { openacc_host_selected || { openacc_nvidia_accel_selected && __OPTIMIZE__ } } } } l_loop$c_loop }\n-    ! { dg-note {variable 'char\\.[0-9]+' declared in block is candidate for adjusting OpenACC privatization level} \"\" { target *-*-* } l_loop$c_loop }\n-    ! { dg-note {variable 'char\\.[0-9]+' ought to be adjusted for OpenACC privatization level: 'gang'} \"\" { target *-*-* } l_loop$c_loop }\n-    ! { dg-note {variable 'char\\.[0-9]+' adjusted for OpenACC privatization level: 'gang'} \"\" { target { ! { openacc_host_selected || { openacc_nvidia_accel_selected && __OPTIMIZE__ } } } } l_loop$c_loop }\n+    ! { dg-note {variable 'char\\.[0-9]+' declared in block isn't candidate for adjusting OpenACC privatization level: artificial} \"\" { target *-*-* } l_loop$c_loop }\n     do i = 1, 15\n       scalar(i:i) = achar(ichar('A') + i)\n     end do"}]}