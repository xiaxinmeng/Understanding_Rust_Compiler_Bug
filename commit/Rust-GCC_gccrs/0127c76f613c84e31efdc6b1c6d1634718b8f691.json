{"sha": "0127c76f613c84e31efdc6b1c6d1634718b8f691", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDEyN2M3NmY2MTNjODRlMzFlZmRjNmIxYzZkMTYzNDcxOGI4ZjY5MQ==", "commit": {"author": {"name": "Ramana Radhakrishnan", "email": "ramana.radhakrishnan@linaro.org", "date": "2011-06-10T10:12:40Z"}, "committer": {"name": "Ramana Radhakrishnan", "email": "ramana@gcc.gnu.org", "date": "2011-06-10T10:12:40Z"}, "message": "Use mvn properly and consolidate movdi patterns.\n\n\n2011-06-10  Ramana Radhakrishnan  <ramana.radhakrishnan@linaro.org>\n\t    Richard Earnshaw  <rearnsha@arm.com>\n\n\t* config/arm/arm.c (const_ok_for_op): Check to see\n\tif mvn can be used.\n\t* config/arm/vfp.md (*arm_movdi_vfp): Delete.\n\t(*thumb2_movdi_vfp): Delete.\n\t(*arm_movdi_vfp_cortexa8): Delete.\n\t(*movdi_vfp): Consolidate from *arm_movdi_vfp and *thumb2_movdi_vfp.\n\t(*movdi_vfp_cortexa8): Likewise.\n\nCo-Authored-By: Richard Earnshaw <rearnsha@arm.com>\n\nFrom-SVN: r174894", "tree": {"sha": "f51c23cc2665f816f592a7d8de421e3d9ee23d0c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f51c23cc2665f816f592a7d8de421e3d9ee23d0c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0127c76f613c84e31efdc6b1c6d1634718b8f691", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0127c76f613c84e31efdc6b1c6d1634718b8f691", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0127c76f613c84e31efdc6b1c6d1634718b8f691", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0127c76f613c84e31efdc6b1c6d1634718b8f691/comments", "author": null, "committer": null, "parents": [{"sha": "f93fe5a0e6022edb30bd274d9243bdd02710450a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f93fe5a0e6022edb30bd274d9243bdd02710450a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f93fe5a0e6022edb30bd274d9243bdd02710450a"}], "stats": {"total": 147, "additions": 62, "deletions": 85}, "files": [{"sha": "435d448d382a6086913a5aed02ca3ca060e0e984", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0127c76f613c84e31efdc6b1c6d1634718b8f691/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0127c76f613c84e31efdc6b1c6d1634718b8f691/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=0127c76f613c84e31efdc6b1c6d1634718b8f691", "patch": "@@ -1,3 +1,14 @@\n+2011-06-10  Ramana Radhakrishnan  <ramana.radhakrishnan@linaro.org>\n+\t    Richard Earnshaw  <rearnsha@arm.com>\n+\n+\t* config/arm/arm.c (const_ok_for_op): Check to see\n+\tif mvn can be used.\n+\t* config/arm/vfp.md (*arm_movdi_vfp): Delete.\n+\t(*thumb2_movdi_vfp): Delete.\n+\t(*arm_movdi_vfp_cortexa8): Delete.\n+\t(*movdi_vfp): Consolidate from *arm_movdi_vfp and *thumb2_movdi_vfp.\n+\t(*movdi_vfp_cortexa8): Likewise.\n+\n 2011-06-10  Richard Guenther  <rguenther@suse.de>\n \n \t* stor-layout.c (initialize_sizetypes): Give names to all"}, {"sha": "c1bae17be069f0ea7f40c6d93fabea09583cfa54", "filename": "gcc/config/arm/arm.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0127c76f613c84e31efdc6b1c6d1634718b8f691/gcc%2Fconfig%2Farm%2Farm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0127c76f613c84e31efdc6b1c6d1634718b8f691/gcc%2Fconfig%2Farm%2Farm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.c?ref=0127c76f613c84e31efdc6b1c6d1634718b8f691", "patch": "@@ -2231,7 +2231,8 @@ const_ok_for_op (HOST_WIDE_INT i, enum rtx_code code)\n       if (arm_arch_thumb2 && (i & 0xffff0000) == 0)\n \treturn 1;\n       else\n-\treturn 0;\n+\t/* Otherwise, try mvn.  */\n+\treturn const_ok_for_arm (ARM_SIGN_EXTEND (~i));\n \n     case PLUS:\n     case COMPARE:"}, {"sha": "42be2ff3acc40f95db9f47e181d6c67c2e324b73", "filename": "gcc/config/arm/vfp.md", "status": "modified", "additions": 49, "deletions": 84, "changes": 133, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0127c76f613c84e31efdc6b1c6d1634718b8f691/gcc%2Fconfig%2Farm%2Fvfp.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0127c76f613c84e31efdc6b1c6d1634718b8f691/gcc%2Fconfig%2Farm%2Fvfp.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Fvfp.md?ref=0127c76f613c84e31efdc6b1c6d1634718b8f691", "patch": "@@ -133,127 +133,92 @@\n \n ;; DImode moves\n \n-(define_insn \"*arm_movdi_vfp\"\n-  [(set (match_operand:DI 0 \"nonimmediate_di_operand\" \"=r, r, m,w,r,w,w, Uv\")\n-\t(match_operand:DI 1 \"di_operand\"              \"rIK,mi,r,r,w,w,Uvi,w\"))]\n-  \"TARGET_ARM && TARGET_HARD_FLOAT && TARGET_VFP && arm_tune != cortexa8\n+(define_insn \"*movdi_vfp\"\n+  [(set (match_operand:DI 0 \"nonimmediate_di_operand\" \"=r,r,r,r,r,r,m,w,r,w,w, Uv\")\n+       (match_operand:DI 1 \"di_operand\"              \"r,rDa,Db,Dc,mi,mi,r,r,w,w,Uvi,w\"))]\n+  \"TARGET_32BIT && TARGET_HARD_FLOAT && TARGET_VFP && arm_tune != cortexa8\n    && (   register_operand (operands[0], DImode)\n        || register_operand (operands[1], DImode))\"\n   \"*\n   switch (which_alternative)\n     {\n     case 0: \n-      return \\\"#\\\";\n     case 1:\n     case 2:\n-      return output_move_double (operands);\n     case 3:\n-      return \\\"fmdrr%?\\\\t%P0, %Q1, %R1\\\\t%@ int\\\";\n+      return \\\"#\\\";\n     case 4:\n-      return \\\"fmrrd%?\\\\t%Q0, %R0, %P1\\\\t%@ int\\\";\n     case 5:\n+    case 6:\n+      return output_move_double (operands);\n+    case 7:\n+      return \\\"fmdrr%?\\\\t%P0, %Q1, %R1\\\\t%@ int\\\";\n+    case 8:\n+      return \\\"fmrrd%?\\\\t%Q0, %R0, %P1\\\\t%@ int\\\";\n+    case 9:\n       if (TARGET_VFP_SINGLE)\n \treturn \\\"fcpys%?\\\\t%0, %1\\\\t%@ int\\;fcpys%?\\\\t%p0, %p1\\\\t%@ int\\\";\n       else\n \treturn \\\"fcpyd%?\\\\t%P0, %P1\\\\t%@ int\\\";\n-    case 6: case 7:\n+    case 10: case 11:\n       return output_move_vfp (operands);\n     default:\n       gcc_unreachable ();\n     }\n   \"\n-  [(set_attr \"type\" \"*,load2,store2,r_2_f,f_2_r,ffarithd,f_loadd,f_stored\")\n-   (set_attr \"neon_type\" \"*,*,*,neon_mcr_2_mcrr,neon_mrrc,neon_vmov,*,*\")\n-   (set (attr \"length\") (cond [(eq_attr \"alternative\" \"0,1,2\") (const_int 8)\n-\t\t\t       (eq_attr \"alternative\" \"5\")\n-\t\t\t\t(if_then_else\n-\t\t\t\t (eq (symbol_ref \"TARGET_VFP_SINGLE\") (const_int 1))\n-\t\t\t\t (const_int 8)\n-\t\t\t\t (const_int 4))]\n-\t\t\t      (const_int 4)))\n-   (set_attr \"pool_range\"     \"*,1020,*,*,*,*,1020,*\")\n-   (set_attr \"neg_pool_range\" \"*,1008,*,*,*,*,1008,*\")]\n+  [(set_attr \"type\" \"*,*,*,*,load2,load2,store2,r_2_f,f_2_r,ffarithd,f_loadd,f_stored\")\n+   (set_attr \"neon_type\" \"*,*,*,*,*,*,*,neon_mcr_2_mcrr,neon_mrrc,neon_vmov,*,*\")\n+   (set (attr \"length\") (cond [(eq_attr \"alternative\" \"1,4,5,6\") (const_int 8)\n+                              (eq_attr \"alternative\" \"2\") (const_int 12)\n+                              (eq_attr \"alternative\" \"3\") (const_int 16)\n+                              (eq_attr \"alternative\" \"9\")\n+                               (if_then_else\n+                                 (eq (symbol_ref \"TARGET_VFP_SINGLE\") (const_int 1))\n+                                 (const_int 8)\n+                                 (const_int 4))]\n+                              (const_int 4)))\n+   (set_attr \"pool_range\"     \"*,*,*,*,1020,4096,*,*,*,*,1020,*\")\n+   (set_attr \"neg_pool_range\" \"*,*,*,*,1008,0,*,*,*,*,1008,*\")\n+   (set_attr \"arch\"           \"t2,any,any,any,a,t2,any,any,any,any,any,any\")]\n )\n \n-(define_insn \"*arm_movdi_vfp_cortexa8\"\n-  [(set (match_operand:DI 0 \"nonimmediate_di_operand\" \"=r, r,m,w,!r,w,w, Uv\")\n-\t(match_operand:DI 1 \"di_operand\"              \"rIK,mi,r,r,w,w,Uvi,w\"))]\n-  \"TARGET_ARM && TARGET_HARD_FLOAT && TARGET_VFP && arm_tune == cortexa8\n-   && (   register_operand (operands[0], DImode)\n-       || register_operand (operands[1], DImode))\"\n+(define_insn \"*movdi_vfp_cortexa8\"\n+  [(set (match_operand:DI 0 \"nonimmediate_di_operand\" \"=r,r,r,r,r,r,m,w,!r,w,w, Uv\")\n+       (match_operand:DI 1 \"di_operand\"              \"r,rDa,Db,Dc,mi,mi,r,r,w,w,Uvi,w\"))]\n+  \"TARGET_32BIT && TARGET_HARD_FLOAT && TARGET_VFP && arm_tune == cortexa8\n+    && (   register_operand (operands[0], DImode)\n+        || register_operand (operands[1], DImode))\"\n   \"*\n   switch (which_alternative)\n     {\n     case 0: \n-      return \\\"#\\\";\n     case 1:\n     case 2:\n-      return output_move_double (operands);\n     case 3:\n-      return \\\"fmdrr%?\\\\t%P0, %Q1, %R1\\\\t%@ int\\\";\n+      return \\\"#\\\";\n     case 4:\n-      return \\\"fmrrd%?\\\\t%Q0, %R0, %P1\\\\t%@ int\\\";\n     case 5:\n-      if (TARGET_VFP_SINGLE)\n-\treturn \\\"fcpys%?\\\\t%0, %1\\\\t%@ int\\;fcpys%?\\\\t%p0, %p1\\\\t%@ int\\\";\n-      else\n-\treturn \\\"fcpyd%?\\\\t%P0, %P1\\\\t%@ int\\\";\n-    case 6: case 7:\n-      return output_move_vfp (operands);\n-    default:\n-      gcc_unreachable ();\n-    }\n-  \"\n-  [(set_attr \"type\" \"*,load2,store2,r_2_f,f_2_r,ffarithd,f_loadd,f_stored\")\n-   (set (attr \"length\") (cond [(eq_attr \"alternative\" \"0,1,2\") (const_int 8)\n-\t\t\t       (eq_attr \"alternative\" \"5\")\n-\t\t\t\t(if_then_else\n-\t\t\t\t (eq (symbol_ref \"TARGET_VFP_SINGLE\")\n-\t\t\t\t     (const_int 1))\n-\t\t\t\t (const_int 8)\n-\t\t\t\t (const_int 4))]\n-\t\t\t      (const_int 4)))\n-   (set_attr \"predicable\"    \"yes\")\n-   (set_attr \"pool_range\"     \"*,1020,*,*,*,*,1020,*\")\n-   (set_attr \"neg_pool_range\" \"*,1008,*,*,*,*,1008,*\")]\n-)\n-\n-(define_insn \"*thumb2_movdi_vfp\"\n-  [(set (match_operand:DI 0 \"nonimmediate_di_operand\" \"=r, r,m,w,r,w,w, Uv\")\n-\t(match_operand:DI 1 \"di_operand\"              \"rIK,mi,r,r,w,w,Uvi,w\"))]\n-  \"TARGET_THUMB2 && TARGET_HARD_FLOAT && TARGET_VFP\"\n-  \"*\n-  switch (which_alternative)\n-    {\n-    case 0: case 1: case 2:\n-      return (output_move_double (operands));\n-    case 3:\n+    case 6:\n+      return output_move_double (operands);\n+    case 7:\n       return \\\"fmdrr%?\\\\t%P0, %Q1, %R1\\\\t%@ int\\\";\n-    case 4:\n+    case 8:\n       return \\\"fmrrd%?\\\\t%Q0, %R0, %P1\\\\t%@ int\\\";\n-    case 5:\n-      if (TARGET_VFP_SINGLE)\n-\treturn \\\"fcpys%?\\\\t%0, %1\\\\t%@ int\\;fcpys%?\\\\t%p0, %p1\\\\t%@ int\\\";\n-      else\n-\treturn \\\"fcpyd%?\\\\t%P0, %P1\\\\t%@ int\\\";\n-    case 6: case 7:\n+    case 9:\n+      return \\\"fcpyd%?\\\\t%P0, %P1\\\\t%@ int\\\";\n+    case 10: case 11:\n       return output_move_vfp (operands);\n     default:\n-      abort ();\n+      gcc_unreachable ();\n     }\n   \"\n-  [(set_attr \"type\" \"*,load2,store2,r_2_f,f_2_r,ffarithd,f_loadd,f_stored\")\n-   (set (attr \"length\") (cond [(eq_attr \"alternative\" \"0,1,2\") (const_int 8)\n-\t\t\t       (eq_attr \"alternative\" \"5\")\n-\t\t\t\t(if_then_else\n-\t\t\t\t (eq (symbol_ref \"TARGET_VFP_SINGLE\")\n-\t\t\t\t     (const_int 1))\n-\t\t\t\t (const_int 8)\n-\t\t\t\t (const_int 4))]\n-\t\t\t      (const_int 4)))\n-   (set_attr \"pool_range\"     \"*,4096,*,*,*,*,1020,*\")\n-   (set_attr \"neg_pool_range\" \"*,   0,*,*,*,*,1008,*\")]\n-)\n+  [(set_attr \"type\" \"*,*,*,*,load2,load2,store2,r_2_f,f_2_r,ffarithd,f_loadd,f_stored\")\n+   (set_attr \"length\" \"4,8,12,16,8,8,8,4,4,4,4,4\")\n+   (set_attr \"predicable\"    \"yes\")\n+   (set_attr \"pool_range\"     \"*,*,*,*,1020,4096,*,*,*,*,1020,*\")\n+   (set_attr \"neg_pool_range\" \"*,*,*,*,1008,0,*,*,*,*,1008,*\")\n+   (set_attr \"arch\"           \"t2,any,any,any,a,t2,any,any,any,any,any,any\")]\n+ )\n \n ;; HFmode moves\n (define_insn \"*movhf_vfp_neon\""}]}