{"sha": "2d8d15b76293051e139149bf567846f1798fe2d0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MmQ4ZDE1Yjc2MjkzMDUxZTEzOTE0OWJmNTY3ODQ2ZjE3OThmZTJkMA==", "commit": {"author": {"name": "Stephane Carrez", "email": "stcarrez@nerim.fr", "date": "2003-03-10T22:10:37Z"}, "committer": {"name": "Stephane Carrez", "email": "ciceron@gcc.gnu.org", "date": "2003-03-10T22:10:37Z"}, "message": "m68hc11.h (HARD_REGNO_RENAME_OK): Define.\n\n\t* config/m68hc11/m68hc11.h (HARD_REGNO_RENAME_OK): Define.\n\t* config/m68hc11/m68hc11-protos.h (m68hc11_hard_regno_rename_ok):\n\tDeclare.\n\t* config/m68hc11/m68hc11.c (m68hc11_hard_regno_rename_ok): New function\n\tfor reg rename optimization to avoid using Z and Y registers.\n\nFrom-SVN: r64134", "tree": {"sha": "f742d7d89ab767ab7a0bad18a7bdcd9c8ea996db", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f742d7d89ab767ab7a0bad18a7bdcd9c8ea996db"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2d8d15b76293051e139149bf567846f1798fe2d0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2d8d15b76293051e139149bf567846f1798fe2d0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2d8d15b76293051e139149bf567846f1798fe2d0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2d8d15b76293051e139149bf567846f1798fe2d0/comments", "author": null, "committer": null, "parents": [{"sha": "70f0e2883a4554c39445a4fd27e1490fcc828853", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/70f0e2883a4554c39445a4fd27e1490fcc828853", "html_url": "https://github.com/Rust-GCC/gccrs/commit/70f0e2883a4554c39445a4fd27e1490fcc828853"}], "stats": {"total": 32, "additions": 32, "deletions": 0}, "files": [{"sha": "70a26e27b42553e82e13a6c91c2cbb0677203d28", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2d8d15b76293051e139149bf567846f1798fe2d0/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2d8d15b76293051e139149bf567846f1798fe2d0/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=2d8d15b76293051e139149bf567846f1798fe2d0", "patch": "@@ -1,3 +1,11 @@\n+2003-03-10  Stephane Carrez  <stcarrez@nerim.fr>\n+\n+\t* config/m68hc11/m68hc11.h (HARD_REGNO_RENAME_OK): Define.\n+\t* config/m68hc11/m68hc11-protos.h (m68hc11_hard_regno_rename_ok):\n+\tDeclare.\n+\t* config/m68hc11/m68hc11.c (m68hc11_hard_regno_rename_ok): New function\n+\tfor reg rename optimization to avoid using Z and Y registers.\n+\n 2003-03-10  Stephane Carrez  <stcarrez@nerim.fr>\n \n \t* config/m68hc11/m68hc11.md (\"*addhi3_68hc12\"): Accept any constant"}, {"sha": "01352b3d87a7546fbf8f48232370ddc621d10e96", "filename": "gcc/config/m68hc11/m68hc11-protos.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2d8d15b76293051e139149bf567846f1798fe2d0/gcc%2Fconfig%2Fm68hc11%2Fm68hc11-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2d8d15b76293051e139149bf567846f1798fe2d0/gcc%2Fconfig%2Fm68hc11%2Fm68hc11-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68hc11%2Fm68hc11-protos.h?ref=2d8d15b76293051e139149bf567846f1798fe2d0", "patch": "@@ -24,6 +24,7 @@ extern int m68hc11_override_options PARAMS((void));\n extern int m68hc11_optimization_options PARAMS((int,int));\n extern void m68hc11_conditional_register_usage PARAMS((void));\n extern int hard_regno_mode_ok PARAMS((int, enum machine_mode));\n+extern int m68hc11_hard_regno_rename_ok PARAMS((int, int));\n \n extern int m68hc11_total_frame_size PARAMS((void));\n extern int m68hc11_initial_frame_pointer_offset PARAMS((void));"}, {"sha": "ba4407b9f35b021ccee899cad74c41207a3663e9", "filename": "gcc/config/m68hc11/m68hc11.c", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2d8d15b76293051e139149bf567846f1798fe2d0/gcc%2Fconfig%2Fm68hc11%2Fm68hc11.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2d8d15b76293051e139149bf567846f1798fe2d0/gcc%2Fconfig%2Fm68hc11%2Fm68hc11.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68hc11%2Fm68hc11.c?ref=2d8d15b76293051e139149bf567846f1798fe2d0", "patch": "@@ -394,6 +394,23 @@ hard_regno_mode_ok (regno, mode)\n     }\n }\n \n+int\n+m68hc11_hard_regno_rename_ok (reg1, reg2)\n+     int reg1, reg2;\n+{\n+  /* Don't accept renaming to Z register.  We will replace it to\n+     X,Y or D during machine reorg pass.  */\n+  if (reg2 == HARD_Z_REGNUM)\n+    return 0;\n+\n+  /* Don't accept renaming D,X to Y register as the code will be bigger.  */\n+  if (TARGET_M6811 && reg2 == HARD_Y_REGNUM\n+      && (D_REGNO_P (reg1) || X_REGNO_P (reg1)))\n+    return 0;\n+\n+  return 1;\n+}\n+\n enum reg_class\n preferred_reload_class (operand, class)\n      rtx operand;"}, {"sha": "95d3f609ae516c92005b68f4db1bf3293bb9f3b5", "filename": "gcc/config/m68hc11/m68hc11.h", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2d8d15b76293051e139149bf567846f1798fe2d0/gcc%2Fconfig%2Fm68hc11%2Fm68hc11.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2d8d15b76293051e139149bf567846f1798fe2d0/gcc%2Fconfig%2Fm68hc11%2Fm68hc11.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68hc11%2Fm68hc11.h?ref=2d8d15b76293051e139149bf567846f1798fe2d0", "patch": "@@ -801,6 +801,12 @@ extern enum reg_class m68hc11_tmp_regs_class;\n \n #define SMALL_REGISTER_CLASSES 1\n \n+/* A C expression that is nonzero if hard register number REGNO2 can be\n+   considered for use as a rename register for REGNO1 */\n+\n+#define HARD_REGNO_RENAME_OK(REGNO1,REGNO2) \\\n+  m68hc11_hard_regno_rename_ok ((REGNO1), (REGNO2))\n+\n /* A C expression whose value is nonzero if pseudos that have been\n    assigned to registers of class CLASS would likely be spilled\n    because registers of CLASS are needed for spill registers."}]}