{"sha": "aea5e9327a49bc73878a547d490bb32ac31df03e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWVhNWU5MzI3YTQ5YmM3Mzg3OGE1NDdkNDkwYmIzMmFjMzFkZjAzZQ==", "commit": {"author": {"name": "Paul Thomas", "email": "pault@gcc.gnu.org", "date": "2017-11-05T12:38:42Z"}, "committer": {"name": "Paul Thomas", "email": "pault@gcc.gnu.org", "date": "2017-11-05T12:38:42Z"}, "message": "re PR fortran/81447 ([7/8] gfortran fails to recognize the exact dynamic type of a polymorphic entity that was allocated in a external procedure)\n\n2017-11-05  Paul Thomas  <pault@gcc.gnu.org>\n\n\tPR fortran/81447\n\tPR fortran/82783\n\t* resolve.c (resolve_component): There is no need to resolve\n\tthe components of a use associated vtype.\n\t(resolve_fl_derived): Unconditionally generate a vtable for any\n\tmodule derived type, as long as the standard is F2003 or later\n\tand it is not a vtype or a PDT template.\n\n2017-11-05  Paul Thomas  <pault@gcc.gnu.org>\n\n\tPR fortran/81447\n\t* gfortran.dg/class_65.f90: New test.\n\t* gfortran.dg/alloc_comp_basics_1.f90: Increase builtin_free\n\tcount from 18 to 21.\n\t* gfortran.dg/allocatable_scalar_9.f90: Increase builtin_free\n\tcount from 32 to 54.\n\t* gfortran.dg/auto_dealloc_1.f90: Increase builtin_free\n\tcount from 4 to 10.\n\t* gfortran.dg/coarray_lib_realloc_1.f90: Increase builtin_free\n\tcount from 3 to 6. Likewise _gfortran_caf_deregister from 2 to\n\t3, builtin_malloc from 1 to 4 and builtin_memcpy|= MEM from\n\t2 to 5.\n\t* gfortran.dg/finalize_28.f90: Increase builtin_free\n\tcount from 3 to 6.\n\t* gfortran.dg/move_alloc_15.f90: Increase builtin_free and\n\tbuiltin_malloc counts from 11 to 14.\n\t* gfortran.dg/typebound_proc_27.f03: Increase builtin_free\n\tcount from 7 to 10. Likewise builtin_malloc from 12 to 15.\n\nFrom-SVN: r254427", "tree": {"sha": "428d69f0ccf3b22d6da4975c720054a5586d124f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/428d69f0ccf3b22d6da4975c720054a5586d124f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/aea5e9327a49bc73878a547d490bb32ac31df03e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/aea5e9327a49bc73878a547d490bb32ac31df03e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/aea5e9327a49bc73878a547d490bb32ac31df03e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/aea5e9327a49bc73878a547d490bb32ac31df03e/comments", "author": null, "committer": null, "parents": [{"sha": "ba89e5d5a7c35ff158e749b503c017921a9dbcbc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ba89e5d5a7c35ff158e749b503c017921a9dbcbc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ba89e5d5a7c35ff158e749b503c017921a9dbcbc"}], "stats": {"total": 135, "additions": 112, "deletions": 23}, "files": [{"sha": "1a4da461e1c4227a540a741275cb5a3626c9faac", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aea5e9327a49bc73878a547d490bb32ac31df03e/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aea5e9327a49bc73878a547d490bb32ac31df03e/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=aea5e9327a49bc73878a547d490bb32ac31df03e", "patch": "@@ -1,3 +1,13 @@\n+2017-11-05  Paul Thomas  <pault@gcc.gnu.org>\n+\n+\tPR fortran/81447\n+\tPR fortran/82783\n+\t* resolve.c (resolve_component): There is no need to resolve\n+\tthe components of a use associated vtype.\n+\t(resolve_fl_derived): Unconditionally generate a vtable for any\n+\tmodule derived type, as long as the standard is F2003 or later\n+\tand it is not a vtype or a PDT template.\n+\n 2017-11-05  Tom de Vries  <tom@codesourcery.com>\n \n \tPR other/82784"}, {"sha": "50b4b49fe97476961a0abb7932b2f3bcfb3a4be1", "filename": "gcc/fortran/resolve.c", "status": "modified", "additions": 18, "deletions": 1, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aea5e9327a49bc73878a547d490bb32ac31df03e/gcc%2Ffortran%2Fresolve.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aea5e9327a49bc73878a547d490bb32ac31df03e/gcc%2Ffortran%2Fresolve.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fresolve.c?ref=aea5e9327a49bc73878a547d490bb32ac31df03e", "patch": "@@ -13496,6 +13496,9 @@ resolve_component (gfc_component *c, gfc_symbol *sym)\n   if (c->attr.artificial)\n     return true;\n \n+  if (sym->attr.vtype && sym->attr.use_assoc)\n+    return true;\n+\n   /* F2008, C442.  */\n   if ((!sym->attr.is_class || c != sym->components)\n       && c->attr.codimension\n@@ -14075,6 +14078,20 @@ resolve_fl_derived (gfc_symbol *sym)\n   if (!resolve_typebound_procedures (sym))\n     return false;\n \n+  /* Generate module vtables subject to their accessibility and their not\n+     being vtables or pdt templates. If this is not done class declarations\n+     in external procedures wind up with their own version and so SELECT TYPE\n+     fails because the vptrs do not have the same address.  */\n+  if (gfc_option.allow_std & GFC_STD_F2003\n+      && sym->ns->proc_name\n+      && sym->ns->proc_name->attr.flavor == FL_MODULE\n+      && sym->attr.access != ACCESS_PRIVATE\n+      && !(sym->attr.use_assoc || sym->attr.vtype || sym->attr.pdt_template))\n+    {\n+      gfc_symbol *vtab = gfc_find_derived_vtab (sym);\n+      gfc_set_sym_referenced (vtab);\n+    }\n+\n   return true;\n }\n \n@@ -15943,7 +15960,7 @@ resolve_equivalence (gfc_equiv *eq)\n \t    {\n \t      gfc_use_rename *r;\n \t      for (r = sym->ns->use_stmts->rename; r; r = r->next)\n-\t\tif (strcmp(r->use_name, sym->name) == 0) saw_sym = true; \n+\t\tif (strcmp(r->use_name, sym->name) == 0) saw_sym = true;\n \t    }\n \t  else\n \t    saw_sym = true;"}, {"sha": "993dca9fee7caac9240e9d8cb1eb92345e537792", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aea5e9327a49bc73878a547d490bb32ac31df03e/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aea5e9327a49bc73878a547d490bb32ac31df03e/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=aea5e9327a49bc73878a547d490bb32ac31df03e", "patch": "@@ -1,3 +1,24 @@\n+2017-11-05  Paul Thomas  <pault@gcc.gnu.org>\n+\n+\tPR fortran/81447\n+\t* gfortran.dg/class_65.f90: New test.\n+\t* gfortran.dg/alloc_comp_basics_1.f90: Increase builtin_free\n+\tcount from 18 to 21.\n+\t* gfortran.dg/allocatable_scalar_9.f90: Increase builtin_free\n+\tcount from 32 to 54.\n+\t* gfortran.dg/auto_dealloc_1.f90: Increase builtin_free\n+\tcount from 4 to 10.\n+\t* gfortran.dg/coarray_lib_realloc_1.f90: Increase builtin_free\n+\tcount from 3 to 6. Likewise _gfortran_caf_deregister from 2 to\n+\t3, builtin_malloc from 1 to 4 and builtin_memcpy|= MEM from\n+\t2 to 5.\n+\t* gfortran.dg/finalize_28.f90: Increase builtin_free\n+\tcount from 3 to 6.\n+\t* gfortran.dg/move_alloc_15.f90: Increase builtin_free and\n+\tbuiltin_malloc counts from 11 to 14.\n+\t* gfortran.dg/typebound_proc_27.f03: Increase builtin_free\n+\tcount from 7 to 10. Likewise builtin_malloc from 12 to 15.\n+\n 2017-11-04  Daniel Santos  <daniel.santos@pobox.com>\n \n \tgcc.target/i386/pr82002-2a.c: Change from xfail to fail."}, {"sha": "44d1c8bc0e69eca01a7a0adf05f27105ef67d5d2", "filename": "gcc/testsuite/gfortran.dg/alloc_comp_basics_1.f90", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aea5e9327a49bc73878a547d490bb32ac31df03e/gcc%2Ftestsuite%2Fgfortran.dg%2Falloc_comp_basics_1.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aea5e9327a49bc73878a547d490bb32ac31df03e/gcc%2Ftestsuite%2Fgfortran.dg%2Falloc_comp_basics_1.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Falloc_comp_basics_1.f90?ref=aea5e9327a49bc73878a547d490bb32ac31df03e", "patch": "@@ -141,4 +141,4 @@ subroutine check_alloc2(b)\n     end subroutine check_alloc2\n \n end program alloc\n-! { dg-final { scan-tree-dump-times \"builtin_free\" 18 \"original\" } }\n+! { dg-final { scan-tree-dump-times \"builtin_free\" 21 \"original\" } }"}, {"sha": "802c5f7bc8d095e04589488b7a146e3eb06d4a1e", "filename": "gcc/testsuite/gfortran.dg/allocatable_scalar_9.f90", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aea5e9327a49bc73878a547d490bb32ac31df03e/gcc%2Ftestsuite%2Fgfortran.dg%2Fallocatable_scalar_9.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aea5e9327a49bc73878a547d490bb32ac31df03e/gcc%2Ftestsuite%2Fgfortran.dg%2Fallocatable_scalar_9.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fallocatable_scalar_9.f90?ref=aea5e9327a49bc73878a547d490bb32ac31df03e", "patch": "@@ -5,13 +5,13 @@\n !\n ! Contributed by Tobias Burnus <burnus@gcc.gnu.org>\n \n-module m                                                                        \n-type st                                                                         \n-  integer , allocatable :: a1                                                   \n-end type st                                                                     \n-type at                                                                         \n-  integer , allocatable :: a2(:)                                                \n-end type at                                                                     \n+module m\n+type st\n+  integer , allocatable :: a1\n+end type st\n+type at\n+  integer , allocatable :: a2(:)\n+end type at\n \n type t1\n   type(st), allocatable :: b1\n@@ -52,4 +52,4 @@ end module m\n end block\n end\n \n-! { dg-final { scan-tree-dump-times \"__builtin_free\" 32 \"original\" } }\n+! { dg-final { scan-tree-dump-times \"__builtin_free\" 54 \"original\" } }"}, {"sha": "99ecd1df85639c2b94334833360c124a2f7aff3c", "filename": "gcc/testsuite/gfortran.dg/auto_dealloc_1.f90", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aea5e9327a49bc73878a547d490bb32ac31df03e/gcc%2Ftestsuite%2Fgfortran.dg%2Fauto_dealloc_1.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aea5e9327a49bc73878a547d490bb32ac31df03e/gcc%2Ftestsuite%2Fgfortran.dg%2Fauto_dealloc_1.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fauto_dealloc_1.f90?ref=aea5e9327a49bc73878a547d490bb32ac31df03e", "patch": "@@ -50,7 +50,7 @@ subroutine d\n     m%k%i = 45\n   end subroutine\n \n-end module \n+end module\n \n \n-! { dg-final { scan-tree-dump-times \"__builtin_free\" 4 \"original\" } }\n+! { dg-final { scan-tree-dump-times \"__builtin_free\" 10 \"original\" } }"}, {"sha": "a82918c2087c129f5f46a8208f955bfecdb51a01", "filename": "gcc/testsuite/gfortran.dg/class_65.f90", "status": "added", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aea5e9327a49bc73878a547d490bb32ac31df03e/gcc%2Ftestsuite%2Fgfortran.dg%2Fclass_65.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aea5e9327a49bc73878a547d490bb32ac31df03e/gcc%2Ftestsuite%2Fgfortran.dg%2Fclass_65.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fclass_65.f90?ref=aea5e9327a49bc73878a547d490bb32ac31df03e", "patch": "@@ -0,0 +1,41 @@\n+! { dg-do run }\n+!\n+! Test the fix for PR81447 in which a vtable was not being created\n+! in the module 'm' so that x->vptr in 's' did not have the same\n+! value as that in 'p'.\n+!\n+! Contributed by Mat Cross  <mathewc@nag.co.uk>\n+!\n+Module m\n+  Type :: t\n+    integer :: i\n+  End Type\n+End Module\n+\n+Program p\n+  Use m\n+  Class (t), Allocatable :: x\n+  Interface\n+    Subroutine s(x)\n+      Use m\n+      Class (t), Allocatable :: x\n+    End Subroutine\n+  End Interface\n+  Call s(x)\n+  Select Type (x)\n+  Type Is (t)\n+    Continue\n+  Class Is (t)\n+    call abort\n+  Class Default\n+    call abort\n+  End Select\n+!  Print *, 'ok'\n+End Program\n+\n+Subroutine s(x)\n+  Use m, Only: t\n+  Implicit None\n+  Class (t), Allocatable :: x\n+  Allocate (t :: x)\n+End Subroutine"}, {"sha": "559d880b5ac46a3679aab88c2448117dc535f07d", "filename": "gcc/testsuite/gfortran.dg/coarray_lib_realloc_1.f90", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aea5e9327a49bc73878a547d490bb32ac31df03e/gcc%2Ftestsuite%2Fgfortran.dg%2Fcoarray_lib_realloc_1.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aea5e9327a49bc73878a547d490bb32ac31df03e/gcc%2Ftestsuite%2Fgfortran.dg%2Fcoarray_lib_realloc_1.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fcoarray_lib_realloc_1.f90?ref=aea5e9327a49bc73878a547d490bb32ac31df03e", "patch": "@@ -21,14 +21,14 @@ subroutine foo()\n end\n \n ! For comp%ii: End of scope of x + y (2x) and for the LHS of the assignment (1x)\n-! { dg-final { scan-tree-dump-times \"__builtin_free\" 3 \"original\" } }\n+! { dg-final { scan-tree-dump-times \"__builtin_free\" 6 \"original\" } }\n \n ! For comp%CAF:  End of scope of x + y (2x); no LHS freeing for the CAF in assignment\n-! { dg-final { scan-tree-dump-times \"_gfortran_caf_deregister\" 2 \"original\" } }\n+! { dg-final { scan-tree-dump-times \"_gfortran_caf_deregister\" 3 \"original\" } }\n \n ! Only malloc \"ii\":\n-! { dg-final { scan-tree-dump-times \"__builtin_malloc\" 1 \"original\" } }\n+! { dg-final { scan-tree-dump-times \"__builtin_malloc\" 4 \"original\" } }\n \n ! But copy \"ii\" and \"CAF\":\n-! { dg-final { scan-tree-dump-times \"__builtin_memcpy|= MEM\" 2 \"original\" } }\n+! { dg-final { scan-tree-dump-times \"__builtin_memcpy|= MEM\" 5 \"original\" } }\n "}, {"sha": "f0c9665252f46a455fe8877b0dae51f9af381e02", "filename": "gcc/testsuite/gfortran.dg/finalize_28.f90", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aea5e9327a49bc73878a547d490bb32ac31df03e/gcc%2Ftestsuite%2Fgfortran.dg%2Ffinalize_28.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aea5e9327a49bc73878a547d490bb32ac31df03e/gcc%2Ftestsuite%2Fgfortran.dg%2Ffinalize_28.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Ffinalize_28.f90?ref=aea5e9327a49bc73878a547d490bb32ac31df03e", "patch": "@@ -21,4 +21,4 @@ subroutine coo_dump_edges(g, edges)\n     integer, intent(out) :: edges(:,:)\n   end subroutine coo_dump_edges\n end module coo_graphs\n-! { dg-final { scan-tree-dump-times \"__builtin_free\" 3 \"original\" } }\n+! { dg-final { scan-tree-dump-times \"__builtin_free\" 6 \"original\" } }"}, {"sha": "0c8cacf3cf0625d39bf699337bd89bce59829133", "filename": "gcc/testsuite/gfortran.dg/move_alloc_15.f90", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aea5e9327a49bc73878a547d490bb32ac31df03e/gcc%2Ftestsuite%2Fgfortran.dg%2Fmove_alloc_15.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aea5e9327a49bc73878a547d490bb32ac31df03e/gcc%2Ftestsuite%2Fgfortran.dg%2Fmove_alloc_15.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fmove_alloc_15.f90?ref=aea5e9327a49bc73878a547d490bb32ac31df03e", "patch": "@@ -84,5 +84,5 @@ subroutine bar\n     end do\n   end subroutine\n end program name\n-! { dg-final { scan-tree-dump-times \"__builtin_malloc\" 11 \"original\" } }\n-! { dg-final { scan-tree-dump-times \"__builtin_free\" 11 \"original\" } }\n+! { dg-final { scan-tree-dump-times \"__builtin_malloc\" 14 \"original\" } }\n+! { dg-final { scan-tree-dump-times \"__builtin_free\" 14 \"original\" } }"}, {"sha": "06484942277d372ed50b87a9272524e0e7796a2a", "filename": "gcc/testsuite/gfortran.dg/typebound_proc_27.f03", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aea5e9327a49bc73878a547d490bb32ac31df03e/gcc%2Ftestsuite%2Fgfortran.dg%2Ftypebound_proc_27.f03", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aea5e9327a49bc73878a547d490bb32ac31df03e/gcc%2Ftestsuite%2Fgfortran.dg%2Ftypebound_proc_27.f03", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Ftypebound_proc_27.f03?ref=aea5e9327a49bc73878a547d490bb32ac31df03e", "patch": "@@ -1,6 +1,6 @@\n ! { dg-do run }\n ! { dg-options \"-fdump-tree-original\" }\n-! \n+!\n ! PR fortran/47586\n ! Missing deep copy for data pointer returning functions when the type\n ! has allocatable components\n@@ -77,15 +77,15 @@ end program prog\n ! statements.\n ! It is assumed that if the number of allocate is right, the number of\n ! deep copies is right too.\n-! { dg-final { scan-tree-dump-times \"__builtin_malloc\" 12 \"original\" } }\n+! { dg-final { scan-tree-dump-times \"__builtin_malloc\" 15 \"original\" } }\n \n !\n ! Realloc are only used for assignments to `that%i'.  Don't know why.\n ! { dg-final { scan-tree-dump-times \"__builtin_realloc\" 6 \"original\" } }\n-! \n+!\n \n ! No leak: Only assignments to `this' use malloc.  Assignments to `that%i'\n ! take the realloc path after the first assignment, so don't count as a malloc.\n-! { dg-final { scan-tree-dump-times \"__builtin_free\" 7 \"original\" } }\n+! { dg-final { scan-tree-dump-times \"__builtin_free\" 10 \"original\" } }\n !\n "}]}