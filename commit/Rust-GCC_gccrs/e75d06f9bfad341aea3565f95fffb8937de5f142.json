{"sha": "e75d06f9bfad341aea3565f95fffb8937de5f142", "node_id": "C_kwDOANBUbNoAKGU3NWQwNmY5YmZhZDM0MWFlYTM1NjVmOTVmZmZiODkzN2RlNWYxNDI", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2022-11-25T09:28:18Z"}, "committer": {"name": "Marc Poulhi\u00e8s", "email": "poulhies@adacore.com", "date": "2022-11-28T12:02:31Z"}, "message": "ada: Fix internal error on conversion as in/out actual with -gnatVa\n\nThe problem is that the regular expansion of the conversion around the\ncall to the subprogram is disabled by the expansion of the validity check\naround the same call, as documented in Expand_Actuals:\n\n  --  This case is given higher priority because the subsequent check\n  --  for type conversion may add an extra copy of the variable and\n  --  prevent proper value propagation back in the original object.\n\nNow the two mechanisms need to cooperate in order for the code to compile.\n\ngcc/ada/\n\n\t* exp_ch6.adb (Expand_Actuals.Add_Call_By_Copy_Code): Deal with a\n\treference to a validation variable in the actual.\n\t(Expand_Actuals.Add_Validation_Call_By_Copy_Code): Minor tweak.\n\t(Expand_Actuals): Call Add_Validation_Call_By_Copy_Code directly\n\tonly if Add_Call_By_Copy_Code is not to be invoked.", "tree": {"sha": "92b55422fd1fcd4e065cd44b612bfb947e7f3137", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/92b55422fd1fcd4e065cd44b612bfb947e7f3137"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e75d06f9bfad341aea3565f95fffb8937de5f142", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e75d06f9bfad341aea3565f95fffb8937de5f142", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e75d06f9bfad341aea3565f95fffb8937de5f142", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e75d06f9bfad341aea3565f95fffb8937de5f142/comments", "author": null, "committer": {"login": "dkm", "id": 87603, "node_id": "MDQ6VXNlcjg3NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/87603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dkm", "html_url": "https://github.com/dkm", "followers_url": "https://api.github.com/users/dkm/followers", "following_url": "https://api.github.com/users/dkm/following{/other_user}", "gists_url": "https://api.github.com/users/dkm/gists{/gist_id}", "starred_url": "https://api.github.com/users/dkm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dkm/subscriptions", "organizations_url": "https://api.github.com/users/dkm/orgs", "repos_url": "https://api.github.com/users/dkm/repos", "events_url": "https://api.github.com/users/dkm/events{/privacy}", "received_events_url": "https://api.github.com/users/dkm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f2b30a724e6bf7ff8e591b176967d596cee7648e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f2b30a724e6bf7ff8e591b176967d596cee7648e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f2b30a724e6bf7ff8e591b176967d596cee7648e"}], "stats": {"total": 61, "additions": 43, "deletions": 18}, "files": [{"sha": "0fe980c499a4efdef74dd260a64170196966d789", "filename": "gcc/ada/exp_ch6.adb", "status": "modified", "additions": 43, "deletions": 18, "changes": 61, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e75d06f9bfad341aea3565f95fffb8937de5f142/gcc%2Fada%2Fexp_ch6.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e75d06f9bfad341aea3565f95fffb8937de5f142/gcc%2Fada%2Fexp_ch6.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch6.adb?ref=e75d06f9bfad341aea3565f95fffb8937de5f142", "patch": "@@ -1639,6 +1639,27 @@ package body Exp_Ch6 is\n             Crep  := False;\n          end if;\n \n+         --  If the actual denotes a variable which captures the value of an\n+         --  object for validation purposes, we propagate the link with this\n+         --  object to the new variable made from the actual just above.\n+\n+         if Ekind (Formal) /= E_In_Parameter\n+           and then Is_Validation_Variable_Reference (Actual)\n+         then\n+            declare\n+               Ref : constant Node_Id := Unqual_Conv (Actual);\n+\n+            begin\n+               if Is_Entity_Name (Ref) then\n+                  Set_Validated_Object (Var, Validated_Object (Entity (Ref)));\n+\n+               else\n+                  pragma Assert (False);\n+                  null;\n+               end if;\n+            end;\n+         end if;\n+\n          --  Setup initialization for case of in out parameter, or an out\n          --  parameter where the formal is an unconstrained array (in the\n          --  latter case, we have to pass in an object with bounds).\n@@ -1906,6 +1927,13 @@ package body Exp_Ch6 is\n                       Name       => Lhs,\n                       Expression => Expr));\n                end if;\n+\n+               --  Add a copy-back to reflect any potential changes in value\n+               --  back into the original object, if any.\n+\n+               if Is_Validation_Variable_Reference (Lhs) then\n+                  Add_Validation_Call_By_Copy_Code (Lhs);\n+               end if;\n             end;\n          end if;\n       end Add_Call_By_Copy_Code;\n@@ -2052,10 +2080,11 @@ package body Exp_Ch6 is\n       --------------------------------------\n \n       procedure Add_Validation_Call_By_Copy_Code (Act : Node_Id) is\n+         Var : constant Node_Id := Unqual_Conv (Act);\n+\n          Expr    : Node_Id;\n          Obj     : Node_Id;\n          Obj_Typ : Entity_Id;\n-         Var     : constant Node_Id := Unqual_Conv (Act);\n          Var_Id  : Entity_Id;\n \n       begin\n@@ -2405,26 +2434,10 @@ package body Exp_Ch6 is\n                end if;\n             end if;\n \n-            --  The actual denotes a variable which captures the value of an\n-            --  object for validation purposes. Add a copy-back to reflect any\n-            --  potential changes in value back into the original object.\n-\n-            --    Var : ... := Object;\n-            --    if not Var'Valid then  --  validity check\n-            --    Call (Var);            --  modify var\n-            --    Object := Var;         --  update Object\n-\n-            --  This case is given higher priority because the subsequent check\n-            --  for type conversion may add an extra copy of the variable and\n-            --  prevent proper value propagation back in the original object.\n-\n-            if Is_Validation_Variable_Reference (Actual) then\n-               Add_Validation_Call_By_Copy_Code (Actual);\n-\n             --  If argument is a type conversion for a type that is passed by\n             --  copy, then we must pass the parameter by copy.\n \n-            elsif Nkind (Actual) = N_Type_Conversion\n+            if Nkind (Actual) = N_Type_Conversion\n               and then\n                 (Is_Elementary_Type (E_Formal)\n                   or else Is_Bit_Packed_Array (Etype (Formal))\n@@ -2508,6 +2521,18 @@ package body Exp_Ch6 is\n                       and then not In_Subrange_Of (E_Actual, E_Formal)))\n             then\n                Add_Call_By_Copy_Code;\n+\n+            --  The actual denotes a variable which captures the value of an\n+            --  object for validation purposes. Add a copy-back to reflect any\n+            --  potential changes in value back into the original object.\n+\n+            --    Var : ... := Object;\n+            --    if not Var'Valid then  --  validity check\n+            --    Call (Var);            --  modify var\n+            --    Object := Var;         --  update Object\n+\n+            elsif Is_Validation_Variable_Reference (Actual) then\n+               Add_Validation_Call_By_Copy_Code (Actual);\n             end if;\n \n             --  RM 3.2.4 (23/3): A predicate is checked on in-out and out"}]}