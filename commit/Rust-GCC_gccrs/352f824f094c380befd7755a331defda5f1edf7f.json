{"sha": "352f824f094c380befd7755a331defda5f1edf7f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzUyZjgyNGYwOTRjMzgwYmVmZDc3NTVhMzMxZGVmZGE1ZjFlZGY3Zg==", "commit": {"author": {"name": "Fran\u00e7ois Dumont", "email": "fdumont@gcc.gnu.org", "date": "2016-12-07T21:16:24Z"}, "committer": {"name": "Fran\u00e7ois Dumont", "email": "fdumont@gcc.gnu.org", "date": "2016-12-07T21:16:24Z"}, "message": "2016-12-07  Fran\u00e7ois Dumont  <fdumont@gcc.gnu.org>\n\n\t* include/bits/stl_tree.h\n\t(_Rb_tree<>::_M_copy(_Const_Link_type, _Base_ptr)): Delete.\n\t(_Rb_tree<>::_M_copy(const _Rb_tree&, _NodeGen&)): New.\n\t(_Rb_tree<>::_M_copy(const _Rb_tree&)): New, use latter.\n\t(_Rb_tree<>(const _Rb_tree&): Use latter.\n\t(_Rb_tree<>(const _Rb_tree&, const allocator_type&)): Likewise.\n\t(_Rb_tree<>::_M_move_data(_Rb_tree&, false_type)): Likewise.\n\t(_Rb_tree<>::_M_move_assign(_Rb_tree&, false_type)): Likewise.\n\t(_Rb_tree<>::operator=(const _Rb_tree&)): Likewise.\n\nFrom-SVN: r243380", "tree": {"sha": "32aed6e2e8fd9c8c85187fe7dc2871035ae04942", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/32aed6e2e8fd9c8c85187fe7dc2871035ae04942"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/352f824f094c380befd7755a331defda5f1edf7f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/352f824f094c380befd7755a331defda5f1edf7f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/352f824f094c380befd7755a331defda5f1edf7f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/352f824f094c380befd7755a331defda5f1edf7f/comments", "author": null, "committer": null, "parents": [{"sha": "a4dec0d6de97348e71932f7080fe4a3bb8730096", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a4dec0d6de97348e71932f7080fe4a3bb8730096", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a4dec0d6de97348e71932f7080fe4a3bb8730096"}], "stats": {"total": 61, "additions": 29, "deletions": 32}, "files": [{"sha": "085b95a3d0cd7ebe4ec33bcd229de50c368d7121", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/352f824f094c380befd7755a331defda5f1edf7f/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/352f824f094c380befd7755a331defda5f1edf7f/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=352f824f094c380befd7755a331defda5f1edf7f", "patch": "@@ -1,5 +1,15 @@\n 2016-12-07  Fran\u00e7ois Dumont  <fdumont@gcc.gnu.org>\n \n+\t* include/bits/stl_tree.h\n+\t(_Rb_tree<>::_M_copy(_Const_Link_type, _Base_ptr)): Delete.\n+\t(_Rb_tree<>::_M_copy(const _Rb_tree&, _NodeGen&)): New.\n+\t(_Rb_tree<>::_M_copy(const _Rb_tree&)): New, use latter.\n+\t(_Rb_tree<>(const _Rb_tree&): Use latter.\n+\t(_Rb_tree<>(const _Rb_tree&, const allocator_type&)): Likewise.\n+\t(_Rb_tree<>::_M_move_data(_Rb_tree&, false_type)): Likewise.\n+\t(_Rb_tree<>::_M_move_assign(_Rb_tree&, false_type)): Likewise.\n+\t(_Rb_tree<>::operator=(const _Rb_tree&)): Likewise.\n+\n \t* include/bits/stl_map.h (map(const map&)): Make default.\n \t(map(map&&)): Likewise.\n \t(~map()): Likewise."}, {"sha": "86d26d5d557cfc9062c5947c1fbfbcf1fe3ca3be", "filename": "libstdc++-v3/include/bits/stl_tree.h", "status": "modified", "additions": 19, "deletions": 32, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/352f824f094c380befd7755a331defda5f1edf7f/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/352f824f094c380befd7755a331defda5f1edf7f/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_tree.h?ref=352f824f094c380befd7755a331defda5f1edf7f", "patch": "@@ -861,11 +861,22 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t_Link_type\n \t_M_copy(_Const_Link_type __x, _Base_ptr __p, _NodeGen&);\n \n+      template<typename _NodeGen>\n+\t_Link_type\n+\t_M_copy(const _Rb_tree& __x, _NodeGen& __gen)\n+\t{\n+\t  _Link_type __root = _M_copy(__x._M_begin(), _M_end(), __gen);\n+\t  _M_leftmost() = _S_minimum(__root);\n+\t  _M_rightmost() = _S_maximum(__root);\n+\t  _M_impl._M_node_count = __x._M_impl._M_node_count;\n+\t  return __root;\n+\t}\n+\n       _Link_type\n-      _M_copy(_Const_Link_type __x, _Base_ptr __p)\n+      _M_copy(const _Rb_tree& __x)\n       {\n \t_Alloc_node __an(*this);\n-\treturn _M_copy(__x, __p, __an);\n+\treturn _M_copy(__x, __an);\n       }\n \n       void\n@@ -903,12 +914,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       : _M_impl(__x._M_impl)\n       {\n \tif (__x._M_root() != 0)\n-\t  {\n-\t    _M_root() = _M_copy(__x._M_begin(), _M_end());\n-\t    _M_leftmost() = _S_minimum(_M_root());\n-\t    _M_rightmost() = _S_maximum(_M_root());\n-\t    _M_impl._M_node_count = __x._M_impl._M_node_count;\n-\t  }\n+\t  _M_root() = _M_copy(__x);\n       }\n \n #if __cplusplus >= 201103L\n@@ -920,12 +926,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       : _M_impl(__x._M_impl._M_key_compare, _Node_allocator(__a))\n       {\n \tif (__x._M_root() != nullptr)\n-\t  {\n-\t    _M_root() = _M_copy(__x._M_begin(), _M_end());\n-\t    _M_leftmost() = _S_minimum(_M_root());\n-\t    _M_rightmost() = _S_maximum(_M_root());\n-\t    _M_impl._M_node_count = __x._M_impl._M_node_count;\n-\t  }\n+\t  _M_root() = _M_copy(__x);\n       }\n \n       _Rb_tree(_Rb_tree&&) = default;\n@@ -1595,10 +1596,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t      auto& __val = const_cast<value_type&>(__cval);\n \t      return __an(std::move_if_noexcept(__val));\n \t    };\n-\t  _M_root() = _M_copy(__x._M_begin(), _M_end(), __lbd);\n-\t  _M_leftmost() = _S_minimum(_M_root());\n-\t  _M_rightmost() = _S_maximum(_M_root());\n-\t  _M_impl._M_node_count = __x._M_impl._M_node_count;\n+\t  _M_root() = _M_copy(__x, __lbd);\n \t}\n     }\n \n@@ -1636,10 +1634,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t      auto& __val = const_cast<value_type&>(__cval);\n \t      return __roan(std::move_if_noexcept(__val));\n \t    };\n-\t  _M_root() = _M_copy(__x._M_begin(), _M_end(), __lbd);\n-\t  _M_leftmost() = _S_minimum(_M_root());\n-\t  _M_rightmost() = _S_maximum(_M_root());\n-\t  _M_impl._M_node_count = __x._M_impl._M_node_count;\n+\t  _M_root() = _M_copy(__x, __lbd);\n \t  __x.clear();\n \t}\n     }\n@@ -1653,10 +1648,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t     && is_nothrow_move_assignable<_Compare>::value)\n     {\n       _M_impl._M_key_compare = std::move(__x._M_impl._M_key_compare);\n-      constexpr bool __move_storage =\n-\t  _Alloc_traits::_S_propagate_on_move_assign()\n-\t  || _Alloc_traits::_S_always_equal();\n-      _M_move_assign(__x, __bool_constant<__move_storage>());\n+      _M_move_assign(__x, __bool_constant<_Alloc_traits::_S_nothrow_move()>());\n       return *this;\n     }\n \n@@ -1716,12 +1708,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t  _M_impl._M_reset();\n \t  _M_impl._M_key_compare = __x._M_impl._M_key_compare;\n \t  if (__x._M_root() != 0)\n-\t    {\n-\t      _M_root() = _M_copy(__x._M_begin(), _M_end(), __roan);\n-\t      _M_leftmost() = _S_minimum(_M_root());\n-\t      _M_rightmost() = _S_maximum(_M_root());\n-\t      _M_impl._M_node_count = __x._M_impl._M_node_count;\n-\t    }\n+\t    _M_root() = _M_copy(__x, __roan);\n \t}\n \n       return *this;"}]}