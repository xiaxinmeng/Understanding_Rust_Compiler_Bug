{"sha": "85244449104f49e68256d12f1eb31bb9ffaa7093", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODUyNDQ0NDkxMDRmNDllNjgyNTZkMTJmMWViMzFiYjlmZmFhNzA5Mw==", "commit": {"author": {"name": "Srinath Parvathaneni", "email": "srinath.parvathaneni@arm.com", "date": "2020-03-23T18:21:26Z"}, "committer": {"name": "Kyrylo Tkachov", "email": "kyrylo.tkachov@arm.com", "date": "2020-03-23T18:21:26Z"}, "message": "[ARM][GCC][13x]: MVE ACLE scalar shift intrinsics.\n\nThis patch supports following MVE ACLE scalar shift intrinsics.\n\nsqrshr, sqrshrl, sqrshrl_sat48, sqshl, sqshll, srshr, srshrl, uqrshl, uqrshll, uqrshll_sat48, uqshl, uqshll, urshr, urshrl, lsll, asrl.\n\nPlease refer to M-profile Vector Extension (MVE) intrinsics [1]  for more details.\n[1] https://developer.arm.com/architectures/instruction-sets/simd-isas/helium/mve-intrinsics\n\n2020-03-23  Srinath Parvathaneni  <srinath.parvathaneni@arm.com>\n\n\t* config/arm/arm-builtins.c (LSLL_QUALIFIERS): Define builtin qualifier.\n\t(UQSHL_QUALIFIERS): Likewise.\n\t(ASRL_QUALIFIERS): Likewise.\n\t(SQSHL_QUALIFIERS): Likewise.\n\t* config/arm/arm_mve.h (__ARM_BIG_ENDIAN): Check to not support MVE in\n\tBig-Endian Mode.\n\t(sqrshr): Define macro.\n\t(sqrshrl): Likewise.\n\t(sqrshrl_sat48): Likewise.\n\t(sqshl): Likewise.\n\t(sqshll): Likewise.\n\t(srshr): Likewise.\n\t(srshrl): Likewise.\n\t(uqrshl): Likewise.\n\t(uqrshll): Likewise.\n\t(uqrshll_sat48): Likewise.\n\t(uqshl): Likewise.\n\t(uqshll): Likewise.\n\t(urshr): Likewise.\n\t(urshrl): Likewise.\n\t(lsll): Likewise.\n\t(asrl): Likewise.\n\t(__arm_lsll): Define intrinsic.\n\t(__arm_asrl): Likewise.\n\t(__arm_uqrshll): Likewise.\n\t(__arm_uqrshll_sat48): Likewise.\n\t(__arm_sqrshrl): Likewise.\n\t(__arm_sqrshrl_sat48): Likewise.\n\t(__arm_uqshll): Likewise.\n\t(__arm_urshrl): Likewise.\n\t(__arm_srshrl): Likewise.\n\t(__arm_sqshll): Likewise.\n\t(__arm_uqrshl): Likewise.\n\t(__arm_sqrshr): Likewise.\n\t(__arm_uqshl): Likewise.\n\t(__arm_urshr): Likewise.\n\t(__arm_sqshl): Likewise.\n\t(__arm_srshr): Likewise.\n\t* config/arm/arm_mve_builtins.def (LSLL_QUALIFIERS): Use builtin\n\tqualifier.\n\t(UQSHL_QUALIFIERS): Likewise.\n\t(ASRL_QUALIFIERS): Likewise.\n\t(SQSHL_QUALIFIERS): Likewise.\n\t* config/arm/mve.md (mve_uqrshll_sat<supf>_di): Define RTL pattern.\n\t(mve_sqrshrl_sat<supf>_di): Likewise.\n\t(mve_uqrshl_si): Likewise.\n\t(mve_sqrshr_si): Likewise.\n\t(mve_uqshll_di): Likewise.\n\t(mve_urshrl_di): Likewise.\n\t(mve_uqshl_si): Likewise.\n\t(mve_urshr_si): Likewise.\n\t(mve_sqshl_si): Likewise.\n\t(mve_srshr_si): Likewise.\n\t(mve_srshrl_di): Likewise.\n\t(mve_sqshll_di): Likewise.\n\ngcc/testsuite/ChangeLog:\n\n2020-03-23  Srinath Parvathaneni  <srinath.parvathaneni@arm.com>\n\n\t* gcc.target/arm/mve/intrinsics/asrl.c: New test.\n\t* gcc.target/arm/mve/intrinsics/lsll.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/sqrshr.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/sqrshrl_sat48.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/sqrshrl_sat64.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/sqshl.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/sqshll.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/srshr.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/srshrl.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/uqrshl.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/uqrshll_sat48.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/uqrshll_sat64.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/uqshl.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/uqshll.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/urshr.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/urshrl.c: Likewise.\n\t* lib/target-supports.exp:\n\t(check_effective_target_arm_v8_1m_mve_fp_ok_nocache): Modify to not\n\tsupport MVE floating point in Big Endian mode.\n\t(check_effective_target_arm_v8_1m_mve_ok_nocache): Modify to not\n\tsupport MVE integer in Big Endian mode.", "tree": {"sha": "294a396560cdb2515c9702ffd72cfd64b1826d47", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/294a396560cdb2515c9702ffd72cfd64b1826d47"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/85244449104f49e68256d12f1eb31bb9ffaa7093", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/85244449104f49e68256d12f1eb31bb9ffaa7093", "html_url": "https://github.com/Rust-GCC/gccrs/commit/85244449104f49e68256d12f1eb31bb9ffaa7093", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/85244449104f49e68256d12f1eb31bb9ffaa7093/comments", "author": {"login": "sripar01", "id": 115715849, "node_id": "U_kgDOBuWvCQ", "avatar_url": "https://avatars.githubusercontent.com/u/115715849?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sripar01", "html_url": "https://github.com/sripar01", "followers_url": "https://api.github.com/users/sripar01/followers", "following_url": "https://api.github.com/users/sripar01/following{/other_user}", "gists_url": "https://api.github.com/users/sripar01/gists{/gist_id}", "starred_url": "https://api.github.com/users/sripar01/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sripar01/subscriptions", "organizations_url": "https://api.github.com/users/sripar01/orgs", "repos_url": "https://api.github.com/users/sripar01/repos", "events_url": "https://api.github.com/users/sripar01/events{/privacy}", "received_events_url": "https://api.github.com/users/sripar01/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ktkachov-arm", "id": 74917949, "node_id": "MDQ6VXNlcjc0OTE3OTQ5", "avatar_url": "https://avatars.githubusercontent.com/u/74917949?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ktkachov-arm", "html_url": "https://github.com/ktkachov-arm", "followers_url": "https://api.github.com/users/ktkachov-arm/followers", "following_url": "https://api.github.com/users/ktkachov-arm/following{/other_user}", "gists_url": "https://api.github.com/users/ktkachov-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/ktkachov-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ktkachov-arm/subscriptions", "organizations_url": "https://api.github.com/users/ktkachov-arm/orgs", "repos_url": "https://api.github.com/users/ktkachov-arm/repos", "events_url": "https://api.github.com/users/ktkachov-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/ktkachov-arm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1a5c27b1b43a15ad7922311f00f0d176b580298e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1a5c27b1b43a15ad7922311f00f0d176b580298e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1a5c27b1b43a15ad7922311f00f0d176b580298e"}], "stats": {"total": 612, "additions": 609, "deletions": 3}, "files": [{"sha": "3825df673854a49be109ec724f647715a4982e8e", "filename": "gcc/ChangeLog", "status": "modified", "additions": 58, "deletions": 0, "changes": 58, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/85244449104f49e68256d12f1eb31bb9ffaa7093/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/85244449104f49e68256d12f1eb31bb9ffaa7093/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=85244449104f49e68256d12f1eb31bb9ffaa7093", "patch": "@@ -1,3 +1,61 @@\n+2020-03-23  Srinath Parvathaneni  <srinath.parvathaneni@arm.com>\n+\n+\t* config/arm/arm-builtins.c (LSLL_QUALIFIERS): Define builtin qualifier.\n+\t(UQSHL_QUALIFIERS): Likewise.\n+\t(ASRL_QUALIFIERS): Likewise.\n+\t(SQSHL_QUALIFIERS): Likewise.\n+\t* config/arm/arm_mve.h (__ARM_BIG_ENDIAN): Check to not support MVE in\n+\tBig-Endian Mode.\n+\t(sqrshr): Define macro.\n+\t(sqrshrl): Likewise.\n+\t(sqrshrl_sat48): Likewise.\n+\t(sqshl): Likewise.\n+\t(sqshll): Likewise.\n+\t(srshr): Likewise.\n+\t(srshrl): Likewise.\n+\t(uqrshl): Likewise.\n+\t(uqrshll): Likewise.\n+\t(uqrshll_sat48): Likewise.\n+\t(uqshl): Likewise.\n+\t(uqshll): Likewise.\n+\t(urshr): Likewise.\n+\t(urshrl): Likewise.\n+\t(lsll): Likewise.\n+\t(asrl): Likewise.\n+\t(__arm_lsll): Define intrinsic.\n+\t(__arm_asrl): Likewise.\n+\t(__arm_uqrshll): Likewise.\n+\t(__arm_uqrshll_sat48): Likewise.\n+\t(__arm_sqrshrl): Likewise.\n+\t(__arm_sqrshrl_sat48): Likewise.\n+\t(__arm_uqshll): Likewise.\n+\t(__arm_urshrl): Likewise.\n+\t(__arm_srshrl): Likewise.\n+\t(__arm_sqshll): Likewise.\n+\t(__arm_uqrshl): Likewise.\n+\t(__arm_sqrshr): Likewise.\n+\t(__arm_uqshl): Likewise.\n+\t(__arm_urshr): Likewise.\n+\t(__arm_sqshl): Likewise.\n+\t(__arm_srshr): Likewise.\n+\t* config/arm/arm_mve_builtins.def (LSLL_QUALIFIERS): Use builtin\n+\tqualifier.\n+\t(UQSHL_QUALIFIERS): Likewise.\n+\t(ASRL_QUALIFIERS): Likewise.\n+\t(SQSHL_QUALIFIERS): Likewise.\n+\t* config/arm/mve.md (mve_uqrshll_sat<supf>_di): Define RTL pattern.\n+\t(mve_sqrshrl_sat<supf>_di): Likewise.\n+\t(mve_uqrshl_si): Likewise.\n+\t(mve_sqrshr_si): Likewise.\n+\t(mve_uqshll_di): Likewise.\n+\t(mve_urshrl_di): Likewise.\n+\t(mve_uqshl_si): Likewise.\n+\t(mve_urshr_si): Likewise.\n+\t(mve_sqshl_si): Likewise.\n+\t(mve_srshr_si): Likewise.\n+\t(mve_srshrl_di): Likewise.\n+\t(mve_sqshll_di): Likewise.\n+\n 2020-03-23  Srinath Parvathaneni  <srinath.parvathaneni@arm.com>\n             Andre Vieira  <andre.simoesdiasvieira@arm.com>\n             Mihail Ionescu  <mihail.ionescu@arm.com>"}, {"sha": "56f0db21ea95dcd738877daba27f1cb60f0d5a32", "filename": "gcc/config/arm/arm-builtins.c", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/85244449104f49e68256d12f1eb31bb9ffaa7093/gcc%2Fconfig%2Farm%2Farm-builtins.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/85244449104f49e68256d12f1eb31bb9ffaa7093/gcc%2Fconfig%2Farm%2Farm-builtins.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm-builtins.c?ref=85244449104f49e68256d12f1eb31bb9ffaa7093", "patch": "@@ -762,6 +762,26 @@ arm_strsbwbu_p_qualifiers[SIMD_MAX_BUILTIN_ARGS]\n       qualifier_unsigned, qualifier_unsigned};\n #define STRSBWBU_P_QUALIFIERS (arm_strsbwbu_p_qualifiers)\n \n+static enum arm_type_qualifiers\n+arm_lsll_qualifiers[SIMD_MAX_BUILTIN_ARGS]\n+  = { qualifier_unsigned, qualifier_unsigned, qualifier_none};\n+#define LSLL_QUALIFIERS (arm_lsll_qualifiers)\n+\n+static enum arm_type_qualifiers\n+arm_uqshl_qualifiers[SIMD_MAX_BUILTIN_ARGS]\n+  = { qualifier_unsigned, qualifier_unsigned, qualifier_const};\n+#define UQSHL_QUALIFIERS (arm_uqshl_qualifiers)\n+\n+static enum arm_type_qualifiers\n+arm_asrl_qualifiers[SIMD_MAX_BUILTIN_ARGS]\n+  = { qualifier_none, qualifier_none, qualifier_none};\n+#define ASRL_QUALIFIERS (arm_asrl_qualifiers)\n+\n+static enum arm_type_qualifiers\n+arm_sqshl_qualifiers[SIMD_MAX_BUILTIN_ARGS]\n+  = { qualifier_unsigned, qualifier_unsigned, qualifier_const};\n+#define SQSHL_QUALIFIERS (arm_sqshl_qualifiers)\n+\n /* End of Qualifier for MVE builtins.  */\n \n    /* void ([T element type] *, T, immediate).  */"}, {"sha": "f2d80ee636003ac58f70ddc25db15e129e228906", "filename": "gcc/config/arm/arm_mve.h", "status": "modified", "additions": 132, "deletions": 0, "changes": 132, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/85244449104f49e68256d12f1eb31bb9ffaa7093/gcc%2Fconfig%2Farm%2Farm_mve.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/85244449104f49e68256d12f1eb31bb9ffaa7093/gcc%2Fconfig%2Farm%2Farm_mve.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm_mve.h?ref=85244449104f49e68256d12f1eb31bb9ffaa7093", "patch": "@@ -22,6 +22,10 @@\n #ifndef _GCC_ARM_MVE_H\n #define _GCC_ARM_MVE_H\n \n+#if __ARM_BIG_ENDIAN\n+#error \"MVE intrinsics are not supported in Big-Endian mode.\"\n+#endif\n+\n #if !__ARM_FEATURE_MVE\n #error \"MVE feature not supported\"\n #endif\n@@ -2526,6 +2530,22 @@ typedef struct { uint8x16_t val[4]; } uint8x16x4_t;\n #define vgetq_lane_u16(__a,  __idx) __arm_vgetq_lane_u16(__a,  __idx)\n #define vgetq_lane_u32(__a,  __idx) __arm_vgetq_lane_u32(__a,  __idx)\n #define vgetq_lane_u64(__a,  __idx) __arm_vgetq_lane_u64(__a,  __idx)\n+#define sqrshr(__p0, __p1) __arm_sqrshr(__p0, __p1)\n+#define sqrshrl(__p0, __p1) __arm_sqrshrl(__p0, __p1)\n+#define sqrshrl_sat48(__p0, __p1) __arm_sqrshrl_sat48(__p0, __p1)\n+#define sqshl(__p0, __p1) __arm_sqshl(__p0, __p1)\n+#define sqshll(__p0, __p1) __arm_sqshll(__p0, __p1)\n+#define srshr(__p0, __p1) __arm_srshr(__p0, __p1)\n+#define srshrl(__p0, __p1) __arm_srshrl(__p0, __p1)\n+#define uqrshl(__p0, __p1) __arm_uqrshl(__p0, __p1)\n+#define uqrshll(__p0, __p1) __arm_uqrshll(__p0, __p1)\n+#define uqrshll_sat48(__p0, __p1) __arm_uqrshll_sat48(__p0, __p1)\n+#define uqshl(__p0, __p1) __arm_uqshl(__p0, __p1)\n+#define uqshll(__p0, __p1) __arm_uqshll(__p0, __p1)\n+#define urshr(__p0, __p1) __arm_urshr(__p0, __p1)\n+#define urshrl(__p0, __p1) __arm_urshrl(__p0, __p1)\n+#define lsll(__p0, __p1) __arm_lsll(__p0, __p1)\n+#define asrl(__p0, __p1) __arm_asrl(__p0, __p1)\n #endif\n \n /* For big-endian, GCC's vector indices are reversed within each 64 bits\n@@ -16539,6 +16559,118 @@ __arm_vgetq_lane_u64 (uint64x2_t __a, const int __idx)\n   return __a[__ARM_LANEQ(__a,__idx)];\n }\n \n+__extension__ extern __inline  uint64_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_lsll (uint64_t value, int32_t shift)\n+{\n+  return (value << shift);\n+}\n+\n+__extension__ extern __inline int64_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_asrl (int64_t value, int32_t shift)\n+{\n+  return (value >> shift);\n+}\n+\n+__extension__ extern __inline uint64_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_uqrshll (uint64_t value, int32_t shift)\n+{\n+  return __builtin_mve_uqrshll_sat64_di (value, shift);\n+}\n+\n+__extension__ extern __inline uint64_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_uqrshll_sat48 (uint64_t value, int32_t shift)\n+{\n+  return __builtin_mve_uqrshll_sat48_di (value, shift);\n+}\n+\n+__extension__ extern __inline int64_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_sqrshrl (int64_t value, int32_t shift)\n+{\n+  return __builtin_mve_sqrshrl_sat64_di (value, shift);\n+}\n+\n+__extension__ extern __inline int64_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_sqrshrl_sat48 (int64_t value, int32_t shift)\n+{\n+  return __builtin_mve_sqrshrl_sat48_di (value, shift);\n+}\n+\n+__extension__ extern __inline uint64_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_uqshll (uint64_t value, const int shift)\n+{\n+  return __builtin_mve_uqshll_di (value, shift);\n+}\n+\n+__extension__ extern __inline uint64_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_urshrl (uint64_t value, const int shift)\n+{\n+  return __builtin_mve_urshrl_di (value, shift);\n+}\n+\n+__extension__ extern __inline int64_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_srshrl (int64_t value, const int shift)\n+{\n+  return __builtin_mve_srshrl_di (value, shift);\n+}\n+\n+__extension__ extern __inline int64_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_sqshll (int64_t value, const int shift)\n+{\n+  return __builtin_mve_sqshll_di (value, shift);\n+}\n+\n+__extension__ extern __inline uint32_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_uqrshl (uint32_t value, int32_t shift)\n+{\n+  return __builtin_mve_uqrshl_si (value, shift);\n+}\n+\n+__extension__ extern __inline int32_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_sqrshr (int32_t value, int32_t shift)\n+{\n+  return __builtin_mve_sqrshr_si (value, shift);\n+}\n+\n+__extension__ extern __inline uint32_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_uqshl (uint32_t value, const int shift)\n+{\n+  return  __builtin_mve_uqshl_si (value, shift);\n+}\n+\n+__extension__ extern __inline uint32_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_urshr (uint32_t value, const int shift)\n+{\n+  return __builtin_mve_urshr_si (value, shift);\n+}\n+\n+__extension__ extern __inline int32_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_sqshl (int32_t value, const int shift)\n+{\n+  return __builtin_mve_sqshl_si (value, shift);\n+}\n+\n+__extension__ extern __inline int32_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_srshr (int32_t value, const int shift)\n+{\n+  return __builtin_mve_srshr_si (value, shift);\n+}\n+\n #if (__ARM_FEATURE_MVE & 2) /* MVE Floating point.  */\n \n __extension__ extern __inline void"}, {"sha": "9379927ae509c1b4fb70e7cbbad40bf645284714", "filename": "gcc/config/arm/arm_mve_builtins.def", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/85244449104f49e68256d12f1eb31bb9ffaa7093/gcc%2Fconfig%2Farm%2Farm_mve_builtins.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/85244449104f49e68256d12f1eb31bb9ffaa7093/gcc%2Fconfig%2Farm%2Farm_mve_builtins.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm_mve_builtins.def?ref=85244449104f49e68256d12f1eb31bb9ffaa7093", "patch": "@@ -876,3 +876,17 @@ VAR1 (QUADOP_UNONE_UNONE_UNONE_UNONE_UNONE, vsbcq_m_u, v4si)\n VAR5 (STORE1, vst2q, v16qi, v8hi, v4si, v8hf, v4sf)\n VAR5 (LOAD1, vld4q, v16qi, v8hi, v4si, v8hf, v4sf)\n VAR5 (LOAD1, vld2q, v16qi, v8hi, v4si, v8hf, v4sf)\n+VAR1 (ASRL, sqrshr_,si)\n+VAR1 (ASRL, sqrshrl_sat64_,di)\n+VAR1 (ASRL, sqrshrl_sat48_,di)\n+VAR1 (LSLL, uqrshl_, si)\n+VAR1 (LSLL, uqrshll_sat64_, di)\n+VAR1 (LSLL, uqrshll_sat48_, di)\n+VAR1 (SQSHL,srshr_,si)\n+VAR1 (SQSHL,srshrl_,di)\n+VAR1 (SQSHL,sqshl_,si)\n+VAR1 (SQSHL,sqshll_,di)\n+VAR1 (UQSHL, urshr_, si)\n+VAR1 (UQSHL, urshrl_, di)\n+VAR1 (UQSHL, uqshl_, si)\n+VAR1 (UQSHL, uqshll_, di)"}, {"sha": "6522dc89fbd34c99e907f838f1be7e0afc2a5d69", "filename": "gcc/config/arm/mve.md", "status": "modified", "additions": 147, "deletions": 3, "changes": 150, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/85244449104f49e68256d12f1eb31bb9ffaa7093/gcc%2Fconfig%2Farm%2Fmve.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/85244449104f49e68256d12f1eb31bb9ffaa7093/gcc%2Fconfig%2Farm%2Fmve.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Fmve.md?ref=85244449104f49e68256d12f1eb31bb9ffaa7093", "patch": "@@ -214,7 +214,9 @@\n \t\t\t VLDRDQGBWB_S VLDRDQGBWB_U VADCQ_U VADCQ_M_U VADCQ_S\n \t\t\t VADCQ_M_S VSBCIQ_U VSBCIQ_S VSBCIQ_M_U VSBCIQ_M_S\n \t\t\t VSBCQ_U VSBCQ_S VSBCQ_M_U VSBCQ_M_S VADCIQ_U VADCIQ_M_U\n-\t\t\t VADCIQ_S VADCIQ_M_S VLD2Q VLD4Q VST2Q])\n+\t\t\t VADCIQ_S VADCIQ_M_S VLD2Q VLD4Q VST2Q SRSHRL SRSHR\n+\t\t\t URSHR URSHRL SQRSHR UQRSHL UQRSHLL_64\n+\t\t\t UQRSHLL_48 SQRSHRL_64 SQRSHRL_48])\n \n (define_mode_attr MVE_CNVT [(V8HI \"V8HF\") (V4SI \"V4SF\") (V8HF \"V8HI\")\n \t\t\t    (V4SF \"V4SI\")])\n@@ -391,7 +393,8 @@\n \t\t       (VSBCIQ_M_U \"u\") (VSBCIQ_S \"s\") (VSBCIQ_M_S \"s\")\n \t\t       (VADCQ_U \"u\")  (VADCQ_M_U \"u\") (VADCQ_S \"s\")\n \t\t       (VADCIQ_U \"u\") (VADCIQ_M_U \"u\") (VADCIQ_S \"s\")\n-\t\t       (VADCIQ_M_S \"s\")])\n+\t\t       (VADCIQ_M_S \"s\") (SQRSHRL_64 \"64\") (SQRSHRL_48 \"48\")\n+\t\t       (UQRSHLL_64 \"64\") (UQRSHLL_48 \"48\")])\n \n (define_int_attr mode1 [(VCTP8Q \"8\") (VCTP16Q \"16\") (VCTP32Q \"32\")\n \t\t\t(VCTP64Q \"64\") (VCTP8Q_M \"8\") (VCTP16Q_M \"16\")\n@@ -657,7 +660,8 @@\n (define_int_iterator VSBCIQ_M [VSBCIQ_M_U VSBCIQ_M_S])\n (define_int_iterator VADCQ [VADCQ_U VADCQ_S])\n (define_int_iterator VADCQ_M [VADCQ_M_U VADCQ_M_S])\n-\n+(define_int_iterator UQRSHLLQ [UQRSHLL_64 UQRSHLL_48])\n+(define_int_iterator SQRSHRLQ [SQRSHRL_64 SQRSHRL_48])\n \n (define_insn \"*mve_mov<mode>\"\n   [(set (match_operand:MVE_types 0 \"nonimmediate_operand\" \"=w,w,r,w,w,r,w,Us\")\n@@ -11008,3 +11012,143 @@\n    return \"vmov\\t%f0, %J1, %K1\";\n }\n  [(set_attr \"type\" \"mve_move\")])\n+\n+;;\n+;; [uqrshll_di]\n+;;\n+(define_insn \"mve_uqrshll_sat<supf>_di\"\n+  [(set (match_operand:DI 0 \"arm_general_register_operand\" \"+r\")\n+\t(unspec:DI [(match_operand:DI 1 \"arm_general_register_operand\" \"r\")\n+\t\t    (match_operand:SI 2 \"s_register_operand\" \"r\")]\n+\t UQRSHLLQ))]\n+  \"TARGET_HAVE_MVE\"\n+  \"uqrshll%?\\\\t%Q1, %R1, #<supf>, %2\"\n+  [(set_attr \"predicable\" \"yes\")])\n+\n+;;\n+;; [sqrshrl_di]\n+;;\n+(define_insn \"mve_sqrshrl_sat<supf>_di\"\n+  [(set (match_operand:DI 0 \"arm_general_register_operand\" \"+r\")\n+\t(unspec:DI [(match_operand:DI 1 \"arm_general_register_operand\" \"r\")\n+\t\t    (match_operand:SI 2 \"s_register_operand\" \"r\")]\n+\t SQRSHRLQ))]\n+  \"TARGET_HAVE_MVE\"\n+  \"sqrshrl%?\\\\t%Q1, %R1, #<supf>, %2\"\n+  [(set_attr \"predicable\" \"yes\")])\n+\n+;;\n+;; [uqrshl_si]\n+;;\n+(define_insn \"mve_uqrshl_si\"\n+  [(set (match_operand:SI 0 \"arm_general_register_operand\" \"+r\")\n+\t(unspec:SI [(match_operand:SI 1 \"arm_general_register_operand\" \"r\")\n+\t\t    (match_operand:SI 2 \"s_register_operand\" \"r\")]\n+\t UQRSHL))]\n+  \"TARGET_HAVE_MVE\"\n+  \"uqrshl%?\\\\t%1, %2\"\n+  [(set_attr \"predicable\" \"yes\")])\n+\n+;;\n+;; [sqrshr_si]\n+;;\n+(define_insn \"mve_sqrshr_si\"\n+  [(set (match_operand:SI 0 \"arm_general_register_operand\" \"+r\")\n+\t(unspec:SI [(match_operand:SI 1 \"arm_general_register_operand\" \"r\")\n+\t\t    (match_operand:SI 2 \"s_register_operand\" \"r\")]\n+\t SQRSHR))]\n+  \"TARGET_HAVE_MVE\"\n+  \"sqrshr%?\\\\t%1, %2\"\n+  [(set_attr \"predicable\" \"yes\")])\n+\n+;;\n+;; [uqshll_di]\n+;;\n+(define_insn \"mve_uqshll_di\"\n+  [(set (match_operand:DI 0 \"arm_general_register_operand\" \"+r\")\n+\t(us_ashift:DI (match_operand:DI 1 \"arm_general_register_operand\" \"r\")\n+\t\t      (match_operand:SI 2 \"arm_reg_or_long_shift_imm\" \"rPg\")))]\n+  \"TARGET_HAVE_MVE\"\n+  \"uqshll%?\\\\t%Q1, %R1, %2\"\n+  [(set_attr \"predicable\" \"yes\")])\n+\n+;;\n+;; [urshrl_di]\n+;;\n+(define_insn \"mve_urshrl_di\"\n+  [(set (match_operand:DI 0 \"arm_general_register_operand\" \"+r\")\n+\t(unspec:DI [(match_operand:DI 1 \"arm_general_register_operand\" \"r\")\n+\t\t    (match_operand:SI 2 \"arm_reg_or_long_shift_imm\" \"rPg\")]\n+\t URSHRL))]\n+  \"TARGET_HAVE_MVE\"\n+  \"urshrl%?\\\\t%Q1, %R1, %2\"\n+  [(set_attr \"predicable\" \"yes\")])\n+\n+;;\n+;; [uqshl_si]\n+;;\n+(define_insn \"mve_uqshl_si\"\n+  [(set (match_operand:SI 0 \"arm_general_register_operand\" \"+r\")\n+\t(us_ashift:SI (match_operand:SI 1 \"arm_general_register_operand\" \"r\")\n+\t\t      (match_operand:SI 2 \"arm_reg_or_long_shift_imm\" \"rPg\")))]\n+  \"TARGET_HAVE_MVE\"\n+  \"uqshl%?\\\\t%1, %2\"\n+  [(set_attr \"predicable\" \"yes\")])\n+\n+;;\n+;; [urshr_si]\n+;;\n+(define_insn \"mve_urshr_si\"\n+  [(set (match_operand:SI 0 \"arm_general_register_operand\" \"+r\")\n+\t(unspec:SI [(match_operand:SI 1 \"arm_general_register_operand\" \"r\")\n+\t\t    (match_operand:SI 2 \"arm_reg_or_long_shift_imm\" \"rPg\")]\n+\t URSHR))]\n+  \"TARGET_HAVE_MVE\"\n+  \"urshr%?\\\\t%1, %2\"\n+  [(set_attr \"predicable\" \"yes\")])\n+\n+;;\n+;; [sqshl_si]\n+;;\n+(define_insn \"mve_sqshl_si\"\n+  [(set (match_operand:SI 0 \"arm_general_register_operand\" \"+r\")\n+\t(ss_ashift:SI (match_operand:DI 1 \"arm_general_register_operand\" \"r\")\n+\t\t      (match_operand:SI 2 \"arm_reg_or_long_shift_imm\" \"rPg\")))]\n+  \"TARGET_HAVE_MVE\"\n+  \"sqshl%?\\\\t%1, %2\"\n+  [(set_attr \"predicable\" \"yes\")])\n+\n+;;\n+;; [srshr_si]\n+;;\n+(define_insn \"mve_srshr_si\"\n+  [(set (match_operand:SI 0 \"arm_general_register_operand\" \"+r\")\n+\t(unspec:SI [(match_operand:DI 1 \"arm_general_register_operand\" \"r\")\n+\t\t    (match_operand:SI 2 \"arm_reg_or_long_shift_imm\" \"rPg\")]\n+\t SRSHR))]\n+  \"TARGET_HAVE_MVE\"\n+  \"srshr%?\\\\t%1, %2\"\n+  [(set_attr \"predicable\" \"yes\")])\n+\n+;;\n+;; [srshrl_di]\n+;;\n+(define_insn \"mve_srshrl_di\"\n+  [(set (match_operand:DI 0 \"arm_general_register_operand\" \"+r\")\n+\t(unspec:DI [(match_operand:DI 1 \"arm_general_register_operand\" \"r\")\n+\t\t    (match_operand:SI 2 \"arm_reg_or_long_shift_imm\" \"rPg\")]\n+\t SRSHRL))]\n+  \"TARGET_HAVE_MVE\"\n+  \"srshrl%?\\\\t%Q1, %R1, %2\"\n+  [(set_attr \"predicable\" \"yes\")])\n+\n+;;\n+;; [sqshll_di]\n+;;\n+(define_insn \"mve_sqshll_di\"\n+  [(set (match_operand:DI 0 \"arm_general_register_operand\" \"+r\")\n+\t(ss_ashift:DI (match_operand:DI 1 \"arm_general_register_operand\" \"r\")\n+\t\t      (match_operand:SI 2 \"arm_reg_or_long_shift_imm\" \"rPg\")))]\n+  \"TARGET_HAVE_MVE\"\n+  \"sqshll%?\\\\t%Q1, %R1, %2\"\n+  [(set_attr \"predicable\" \"yes\")])"}, {"sha": "c13710b3764af1027262133dd88af04956a20951", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/85244449104f49e68256d12f1eb31bb9ffaa7093/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/85244449104f49e68256d12f1eb31bb9ffaa7093/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=85244449104f49e68256d12f1eb31bb9ffaa7093", "patch": "@@ -1,3 +1,27 @@\n+2020-03-23  Srinath Parvathaneni  <srinath.parvathaneni@arm.com>\n+\n+\t* gcc.target/arm/mve/intrinsics/asrl.c: New test.\n+\t* gcc.target/arm/mve/intrinsics/lsll.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/sqrshr.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/sqrshrl_sat48.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/sqrshrl_sat64.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/sqshl.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/sqshll.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/srshr.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/srshrl.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/uqrshl.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/uqrshll_sat48.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/uqrshll_sat64.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/uqshl.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/uqshll.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/urshr.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/urshrl.c: Likewise.\n+\t* lib/target-supports.exp:\n+\t(check_effective_target_arm_v8_1m_mve_fp_ok_nocache): Modify to not\n+\tsupport MVE floating point in Big Endian mode.\n+\t(check_effective_target_arm_v8_1m_mve_ok_nocache): Modify to not\n+\tsupport MVE integer in Big Endian mode.\n+\n 2020-03-23  Srinath Parvathaneni  <srinath.parvathaneni@arm.com>\n             Andre Vieira  <andre.simoesdiasvieira@arm.com>\n             Mihail Ionescu  <mihail.ionescu@arm.com>"}, {"sha": "a2d5160e518b482f80eb26fae61f1d4b63e5e63f", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/asrl.c", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/85244449104f49e68256d12f1eb31bb9ffaa7093/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fasrl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/85244449104f49e68256d12f1eb31bb9ffaa7093/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fasrl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fasrl.c?ref=85244449104f49e68256d12f1eb31bb9ffaa7093", "patch": "@@ -0,0 +1,13 @@\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int64_t\n+asrl_reg (int64_t longval3, int32_t x)\n+{\n+  return asrl (longval3, x);\n+}\n+\n+/* { dg-final { scan-assembler \"asrl\\\\tr\\[0-9\\]+, r\\[0-9\\]+, r\\[0-9\\]+\" } } */"}, {"sha": "9c1b62fb9f27a0c90a9bea43ea0bc0234e7b2721", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/lsll.c", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/85244449104f49e68256d12f1eb31bb9ffaa7093/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Flsll.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/85244449104f49e68256d12f1eb31bb9ffaa7093/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Flsll.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Flsll.c?ref=85244449104f49e68256d12f1eb31bb9ffaa7093", "patch": "@@ -0,0 +1,13 @@\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+uint64_t\n+lsll_reg (uint64_t longval3, int32_t x)\n+{\n+  return lsll (longval3, x);\n+}\n+\n+/* { dg-final { scan-assembler \"lsll\\\\tr\\[0-9\\]+, r\\[0-9\\]+, r\\[0-9\\]+\" } } */"}, {"sha": "1f0a228e4b49595939d4cbff6cf18d6d7c53b52e", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/sqrshr.c", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/85244449104f49e68256d12f1eb31bb9ffaa7093/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fsqrshr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/85244449104f49e68256d12f1eb31bb9ffaa7093/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fsqrshr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fsqrshr.c?ref=85244449104f49e68256d12f1eb31bb9ffaa7093", "patch": "@@ -0,0 +1,13 @@\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int32_t\n+sqrshr_reg (int32_t longval3, int32_t x)\n+{\n+  return sqrshr (longval3, x);\n+}\n+\n+/* { dg-final { scan-assembler \"sqrshr\\\\tr\\[0-9\\]+, r\\[0-9\\]+\" } } */"}, {"sha": "2f1612cde77ba62a48a83a3f5ef6ba35e5034b1b", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/sqrshrl_sat48.c", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/85244449104f49e68256d12f1eb31bb9ffaa7093/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fsqrshrl_sat48.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/85244449104f49e68256d12f1eb31bb9ffaa7093/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fsqrshrl_sat48.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fsqrshrl_sat48.c?ref=85244449104f49e68256d12f1eb31bb9ffaa7093", "patch": "@@ -0,0 +1,13 @@\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int64_t\n+sqrshrl_reg (int64_t longval3, int32_t x)\n+{\n+  return sqrshrl_sat48 (longval3, x);\n+}\n+\n+/* { dg-final { scan-assembler \"sqrshrl\\\\tr\\[0-9\\]+, r\\[0-9\\]+, #48, r\\[0-9\\]+\" } } */"}, {"sha": "5d0a4bd155ac65b0724cf67fe916105e4db39b5c", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/sqrshrl_sat64.c", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/85244449104f49e68256d12f1eb31bb9ffaa7093/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fsqrshrl_sat64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/85244449104f49e68256d12f1eb31bb9ffaa7093/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fsqrshrl_sat64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fsqrshrl_sat64.c?ref=85244449104f49e68256d12f1eb31bb9ffaa7093", "patch": "@@ -0,0 +1,13 @@\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int64_t\n+sqrshrl_reg (int64_t longval3, int32_t x)\n+{\n+  return sqrshrl (longval3, x);\n+}\n+\n+/* { dg-final { scan-assembler \"sqrshrl\\\\tr\\[0-9\\]+, r\\[0-9\\]+, #64, r\\[0-9\\]+\" } } */"}, {"sha": "8cb8c74b2686ef3c0e68fa949fa96944b8b1d799", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/sqshl.c", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/85244449104f49e68256d12f1eb31bb9ffaa7093/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fsqshl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/85244449104f49e68256d12f1eb31bb9ffaa7093/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fsqshl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fsqshl.c?ref=85244449104f49e68256d12f1eb31bb9ffaa7093", "patch": "@@ -0,0 +1,13 @@\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int32_t\n+sqshl_imm (int32_t longval3)\n+{\n+  return sqshl (longval3, 25);\n+}\n+\n+/* { dg-final { scan-assembler \"sqshl\\\\tr\\[0-9\\]+, #25\" } } */"}, {"sha": "016ef2a336ed9e5d2539f927435932ab14687f3a", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/sqshll.c", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/85244449104f49e68256d12f1eb31bb9ffaa7093/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fsqshll.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/85244449104f49e68256d12f1eb31bb9ffaa7093/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fsqshll.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fsqshll.c?ref=85244449104f49e68256d12f1eb31bb9ffaa7093", "patch": "@@ -0,0 +1,13 @@\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int64_t\n+sqshll_imm(int64_t value)\n+{\n+  return sqshll (value, 21);\n+}\n+\n+/* { dg-final { scan-assembler \"sqshll\\\\tr\\[0-9\\]+, r\\[0-9\\]+, #21\" } } */"}, {"sha": "264f0bf09ce1684966ade2fdba62b70261e8f438", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/srshr.c", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/85244449104f49e68256d12f1eb31bb9ffaa7093/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fsrshr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/85244449104f49e68256d12f1eb31bb9ffaa7093/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fsrshr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fsrshr.c?ref=85244449104f49e68256d12f1eb31bb9ffaa7093", "patch": "@@ -0,0 +1,13 @@\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int32_t\n+srshr_imm (int32_t longval3)\n+{\n+  return srshr (longval3, 25);\n+}\n+\n+/* { dg-final { scan-assembler \"srshr\\\\tr\\[0-9\\]+, #25\" } } */"}, {"sha": "ab12d0da63596c7c4fb3bcb5bfc8f20fc5b0de31", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/srshrl.c", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/85244449104f49e68256d12f1eb31bb9ffaa7093/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fsrshrl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/85244449104f49e68256d12f1eb31bb9ffaa7093/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fsrshrl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fsrshrl.c?ref=85244449104f49e68256d12f1eb31bb9ffaa7093", "patch": "@@ -0,0 +1,13 @@\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int64_t\n+srshrl_imm(int64_t value)\n+{\n+  return srshrl (value, 21);\n+}\n+\n+/* { dg-final { scan-assembler \"srshrl\\\\tr\\[0-9\\]+, r\\[0-9\\]+, #21\" } } */"}, {"sha": "0064aa19fbc55a5b759f3aa8df2d9329eeee868d", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/uqrshl.c", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/85244449104f49e68256d12f1eb31bb9ffaa7093/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fuqrshl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/85244449104f49e68256d12f1eb31bb9ffaa7093/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fuqrshl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fuqrshl.c?ref=85244449104f49e68256d12f1eb31bb9ffaa7093", "patch": "@@ -0,0 +1,13 @@\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+uint32_t\n+uqrshl_reg (uint32_t longval3, int32_t x)\n+{\n+  return uqrshl (longval3, x);\n+}\n+\n+/* { dg-final { scan-assembler \"uqrshl\\\\tr\\[0-9\\]+, r\\[0-9\\]+\" } } */"}, {"sha": "24cd232441306721e067fd441e803a5352477921", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/uqrshll_sat48.c", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/85244449104f49e68256d12f1eb31bb9ffaa7093/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fuqrshll_sat48.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/85244449104f49e68256d12f1eb31bb9ffaa7093/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fuqrshll_sat48.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fuqrshll_sat48.c?ref=85244449104f49e68256d12f1eb31bb9ffaa7093", "patch": "@@ -0,0 +1,13 @@\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+uint64_t\n+uqrshll_reg (uint64_t longval3, int32_t x)\n+{\n+  return uqrshll_sat48 (longval3, x);\n+}\n+\n+/* { dg-final { scan-assembler \"uqrshll\\\\tr\\[0-9\\]+, r\\[0-9\\]+, #48, r\\[0-9\\]+\" } } */"}, {"sha": "22aaafdb919747721a408a8d6d2f18b770184f79", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/uqrshll_sat64.c", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/85244449104f49e68256d12f1eb31bb9ffaa7093/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fuqrshll_sat64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/85244449104f49e68256d12f1eb31bb9ffaa7093/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fuqrshll_sat64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fuqrshll_sat64.c?ref=85244449104f49e68256d12f1eb31bb9ffaa7093", "patch": "@@ -0,0 +1,13 @@\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+uint64_t\n+uqrshll_reg (uint64_t longval3, int32_t x)\n+{\n+  return uqrshll (longval3, x);\n+}\n+\n+/* { dg-final { scan-assembler \"uqrshll\\\\tr\\[0-9\\]+, r\\[0-9\\]+, #64, r\\[0-9\\]+\" } } */"}, {"sha": "9e6ff649805acfca497bbcbe78f7538a2df0da30", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/uqshl.c", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/85244449104f49e68256d12f1eb31bb9ffaa7093/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fuqshl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/85244449104f49e68256d12f1eb31bb9ffaa7093/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fuqshl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fuqshl.c?ref=85244449104f49e68256d12f1eb31bb9ffaa7093", "patch": "@@ -0,0 +1,13 @@\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+uint32_t\n+uqshl_imm (uint32_t longval3)\n+{\n+  return uqshl (longval3, 21);\n+}\n+\n+/* { dg-final { scan-assembler \"uqshl\\\\tr\\[0-9\\]+, #21\" } } */"}, {"sha": "52560721d6ff405c2bec64fdf833601c877d41be", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/uqshll.c", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/85244449104f49e68256d12f1eb31bb9ffaa7093/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fuqshll.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/85244449104f49e68256d12f1eb31bb9ffaa7093/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fuqshll.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fuqshll.c?ref=85244449104f49e68256d12f1eb31bb9ffaa7093", "patch": "@@ -0,0 +1,13 @@\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+uint64_t\n+uqshll_imm(uint64_t value)\n+{\n+  return uqshll (value, 21);\n+}\n+\n+/* { dg-final { scan-assembler \"uqshll\\\\tr\\[0-9\\]+, r\\[0-9\\]+, #21\" } } */"}, {"sha": "ec5d84bb0099de9f6b28bbb3bd6765c731d24ae8", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/urshr.c", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/85244449104f49e68256d12f1eb31bb9ffaa7093/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Furshr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/85244449104f49e68256d12f1eb31bb9ffaa7093/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Furshr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Furshr.c?ref=85244449104f49e68256d12f1eb31bb9ffaa7093", "patch": "@@ -0,0 +1,13 @@\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+uint64_t\n+urshr_imm (uint32_t longval3)\n+{\n+  return urshr (longval3, 21);\n+}\n+\n+/* { dg-final { scan-assembler \"urshr\\\\tr\\[0-9\\]+, #21\" } } */"}, {"sha": "ea29412ab7a6438bab7ca84a98810f99b95dbecf", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/urshrl.c", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/85244449104f49e68256d12f1eb31bb9ffaa7093/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Furshrl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/85244449104f49e68256d12f1eb31bb9ffaa7093/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Furshrl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Furshrl.c?ref=85244449104f49e68256d12f1eb31bb9ffaa7093", "patch": "@@ -0,0 +1,13 @@\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+uint64_t\n+urshrl_imm(uint64_t value)\n+{\n+  return urshrl (value, 21);\n+}\n+\n+/* { dg-final { scan-assembler \"urshrl\\\\tr\\[0-9\\]+, r\\[0-9\\]+, #21\" } } */"}, {"sha": "9f3f96f1dd5969ee2d4861d1403378a73603b6c8", "filename": "gcc/testsuite/lib/target-supports.exp", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/85244449104f49e68256d12f1eb31bb9ffaa7093/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/85244449104f49e68256d12f1eb31bb9ffaa7093/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp?ref=85244449104f49e68256d12f1eb31bb9ffaa7093", "patch": "@@ -4712,6 +4712,9 @@ proc check_effective_target_arm_v8_1m_mve_fp_ok_nocache { } {\n \t    #if !(__ARM_FEATURE_MVE & 2)\n \t    #error \"__ARM_FEATURE_MVE for floating point not defined\"\n \t    #endif\n+\t    #if __ARM_BIG_ENDIAN\n+\t    #error \"MVE intrinsics are not supported in Big-Endian mode.\"\n+\t    #endif\n \t} \"$flags -mthumb\"] } {\n \t    set et_arm_v8_1m_mve_fp_flags \"$flags -mthumb --save-temps\"\n \t    return 1\n@@ -4891,6 +4894,9 @@ proc check_effective_target_arm_v8_1m_mve_ok_nocache { } {\n             #if !defined (__ARM_FEATURE_MVE)\n             #error \"__ARM_FEATURE_MVE not defined\"\n             #endif\n+\t    #if __ARM_BIG_ENDIAN\n+\t    #error \"MVE intrinsics are not supported in Big-Endian mode.\"\n+\t    #endif\n         } \"$flags -mthumb\"] } {\n             set et_arm_v8_1m_mve_flags \"$flags -mthumb --save-temps\"\n             return 1"}]}