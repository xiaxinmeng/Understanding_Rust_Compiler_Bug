{"sha": "7af8968e982dbe3c5e77400e76a95fd56abf21d1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2FmODk2OGU5ODJkYmUzYzVlNzc0MDBlNzZhOTVmZDU2YWJmMjFkMQ==", "commit": {"author": {"name": "Michael Koch", "email": "konqueror@gmx.de", "date": "2004-10-16T17:51:45Z"}, "committer": {"name": "Michael Koch", "email": "mkoch@gcc.gnu.org", "date": "2004-10-16T17:51:45Z"}, "message": "BigDecimal.java, [...]: Reorganized import statements, removed redundant and reorganized modifiers.\n\n2004-10-16  Michael Koch  <konqueror@gmx.de>\n\n\t* java/math/BigDecimal.java, java/math/BigInteger.java:\n\tReorganized import statements, removed redundant and\n\treorganized modifiers.\n\nFrom-SVN: r89149", "tree": {"sha": "9dbb751927b11b64e78fb711e2d46db02b8c7aec", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9dbb751927b11b64e78fb711e2d46db02b8c7aec"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7af8968e982dbe3c5e77400e76a95fd56abf21d1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7af8968e982dbe3c5e77400e76a95fd56abf21d1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7af8968e982dbe3c5e77400e76a95fd56abf21d1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7af8968e982dbe3c5e77400e76a95fd56abf21d1/comments", "author": null, "committer": null, "parents": [{"sha": "f3bf84759ca82d0567186e63044a034d887d55ca", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f3bf84759ca82d0567186e63044a034d887d55ca", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f3bf84759ca82d0567186e63044a034d887d55ca"}], "stats": {"total": 78, "additions": 40, "deletions": 38}, "files": [{"sha": "e41bf609f2abefad504f4265a51298ec2f13f661", "filename": "libjava/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7af8968e982dbe3c5e77400e76a95fd56abf21d1/libjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7af8968e982dbe3c5e77400e76a95fd56abf21d1/libjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FChangeLog?ref=7af8968e982dbe3c5e77400e76a95fd56abf21d1", "patch": "@@ -1,3 +1,9 @@\n+2004-10-16  Michael Koch  <konqueror@gmx.de>\n+\n+\t* java/math/BigDecimal.java, java/math/BigInteger.java:\n+\tReorganized import statements, removed redundant and\n+\treorganized modifiers.\n+\n 2004-10-16  Michael Koch  <konqueror@gmx.de>\n \n \t* gnu/java/beans/ExplicitBeanInfo.java:"}, {"sha": "c8dba54c8adf3e68ab3ac069b09c0545ca5e2f68", "filename": "libjava/java/math/BigDecimal.java", "status": "modified", "additions": 10, "deletions": 12, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7af8968e982dbe3c5e77400e76a95fd56abf21d1/libjava%2Fjava%2Fmath%2FBigDecimal.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7af8968e982dbe3c5e77400e76a95fd56abf21d1/libjava%2Fjava%2Fmath%2FBigDecimal.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fmath%2FBigDecimal.java?ref=7af8968e982dbe3c5e77400e76a95fd56abf21d1", "patch": "@@ -37,28 +37,26 @@\n \n package java.math;\n \n-import java.math.BigInteger;\n-\n public class BigDecimal extends Number implements Comparable\n {\n   private BigInteger intVal;\n   private int scale;\n   private static final long serialVersionUID = 6108874887143696463L;\n \n-  private final static BigDecimal ZERO = \n+  private static final BigDecimal ZERO = \n     new BigDecimal (BigInteger.valueOf (0), 0);\n \n-  private final static BigDecimal ONE = \n+  private static final BigDecimal ONE = \n     new BigDecimal (BigInteger.valueOf (1), 0);\n \n-  public final static int ROUND_UP = 0;\n-  public final static int ROUND_DOWN = 1;\n-  public final static int ROUND_CEILING = 2;\n-  public final static int ROUND_FLOOR = 3;\n-  public final static int ROUND_HALF_UP = 4;\n-  public final static int ROUND_HALF_DOWN = 5;\n-  public final static int ROUND_HALF_EVEN = 6;\n-  public final static int ROUND_UNNECESSARY = 7;\n+  public static final int ROUND_UP = 0;\n+  public static final int ROUND_DOWN = 1;\n+  public static final int ROUND_CEILING = 2;\n+  public static final int ROUND_FLOOR = 3;\n+  public static final int ROUND_HALF_UP = 4;\n+  public static final int ROUND_HALF_DOWN = 5;\n+  public static final int ROUND_HALF_EVEN = 6;\n+  public static final int ROUND_UNNECESSARY = 7;\n \n   public BigDecimal (BigInteger num) \n   {"}, {"sha": "3a822aa81c66460e85ff0908b160e16af9843f06", "filename": "libjava/java/math/BigInteger.java", "status": "modified", "additions": 24, "deletions": 26, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7af8968e982dbe3c5e77400e76a95fd56abf21d1/libjava%2Fjava%2Fmath%2FBigInteger.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7af8968e982dbe3c5e77400e76a95fd56abf21d1/libjava%2Fjava%2Fmath%2FBigInteger.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fmath%2FBigInteger.java?ref=7af8968e982dbe3c5e77400e76a95fd56abf21d1", "patch": "@@ -35,18 +35,15 @@\n obligated to do so.  If you do not wish to do so, delete this\n exception statement from your version. */\n \n+\n package java.math;\n \n import gnu.java.math.MPN;\n-import java.util.Random;\n+\n+import java.io.IOException;\n import java.io.ObjectInputStream;\n import java.io.ObjectOutputStream;\n-import java.io.IOException;\n-\n-/**\n- * @author Warren Levy <warrenl@cygnus.com>\n- * @date December 20, 1999.\n- */\n+import java.util.Random;\n \n /**\n  * Written using on-line Java Platform 1.2 API Specification, as well\n@@ -56,17 +53,18 @@\n  * Based primarily on IntNum.java BitOps.java by Per Bothner <per@bothner.com>\n  * (found in Kawa 1.6.62).\n  *\n- * Status:  Believed complete and correct.\n+ * @author Warren Levy <warrenl@cygnus.com>\n+ * @date December 20, 1999.\n+ * @status believed complete and correct.\n  */\n-\n public class BigInteger extends Number implements Comparable\n {\n   /** All integers are stored in 2's-complement form.\n    * If words == null, the ival is the value of this BigInteger.\n    * Otherwise, the first ival elements of words make the value\n    * of this BigInteger, stored in little-endian order, 2's-complement form. */\n-  transient private int ival;\n-  transient private int[] words;\n+  private transient int ival;\n+  private transient int[] words;\n \n   // Serialization fields.\n   private int bitCount = -1;\n@@ -338,7 +336,7 @@ else if (words == null\n       }\n   }\n \n-  private final boolean isNegative()\n+  private boolean isNegative()\n   {\n     return (words == null ? ival : words[ival - 1]) < 0;\n   }\n@@ -389,12 +387,12 @@ public BigInteger max(BigInteger val)\n     return compareTo(this, val) > 0 ? this : val;\n   }\n \n-  private final boolean isZero()\n+  private boolean isZero()\n   {\n     return words == null && ival == 0;\n   }\n \n-  private final boolean isOne()\n+  private boolean isOne()\n   {\n     return words == null && ival == 1;\n   }\n@@ -440,7 +438,7 @@ private BigInteger canonicalize()\n   }\n \n   /** Add two ints, yielding a BigInteger. */\n-  private static final BigInteger add(int x, int y)\n+  private static BigInteger add(int x, int y)\n   {\n     return valueOf((long) x + (long) y);\n   }\n@@ -480,13 +478,13 @@ private void setAdd(BigInteger x, int y)\n   }\n \n   /** Destructively add an int to this. */\n-  private final void setAdd(int y)\n+  private void setAdd(int y)\n   {\n     setAdd(this, y);\n   }\n \n   /** Destructively set the value of this to a long. */\n-  private final void set(long y)\n+  private void set(long y)\n   {\n     int i = (int) y;\n     if ((long) i == y)\n@@ -505,14 +503,14 @@ private final void set(long y)\n \n   /** Destructively set the value of this to the given words.\n   * The words array is reused, not copied. */\n-  private final void set(int[] words, int length)\n+  private void set(int[] words, int length)\n   {\n     this.ival = length;\n     this.words = words;\n   }\n \n   /** Destructively set the value of this to that of y. */\n-  private final void set(BigInteger y)\n+  private void set(BigInteger y)\n   {\n     if (y.words == null)\n       set(y.ival);\n@@ -572,7 +570,7 @@ public BigInteger subtract(BigInteger val)\n     return add(this, val, -1);\n   }\n \n-  private static final BigInteger times(BigInteger x, int y)\n+  private static BigInteger times(BigInteger x, int y)\n   {\n     if (y == 0)\n       return ZERO;\n@@ -604,7 +602,7 @@ private static final BigInteger times(BigInteger x, int y)\n     return result.canonicalize();\n   }\n \n-  private static final BigInteger times(BigInteger x, BigInteger y)\n+  private static BigInteger times(BigInteger x, BigInteger y)\n   {\n     if (y.words == null)\n       return times(x, y.ival);\n@@ -1016,7 +1014,7 @@ public BigInteger pow(int exponent)\n     return BigInteger.make(rwords, rlen);\n   }\n \n-  private static final int[] euclidInv(int a, int b, int prevDiv)\n+  private static int[] euclidInv(int a, int b, int prevDiv)\n   {\n     if (b == 0)\n       throw new ArithmeticException(\"not invertible\");\n@@ -1033,8 +1031,8 @@ private static final int[] euclidInv(int a, int b, int prevDiv)\n     return xy;\n   }\n \n-  private static final void euclidInv(BigInteger a, BigInteger b,\n-                                      BigInteger prevDiv, BigInteger[] xy)\n+  private static void euclidInv(BigInteger a, BigInteger b,\n+                                BigInteger prevDiv, BigInteger[] xy)\n   {\n     if (b.isZero())\n       throw new ArithmeticException(\"not invertible\");\n@@ -1184,7 +1182,7 @@ public BigInteger modPow(BigInteger exponent, BigInteger m)\n   }\n \n   /** Calculate Greatest Common Divisor for non-negative ints. */\n-  private static final int gcd(int a, int b)\n+  private static int gcd(int a, int b)\n   {\n     // Euclid's algorithm, copied from libg++.\n     int tmp;\n@@ -1786,7 +1784,7 @@ private void setNegative(BigInteger x)\n   }\n \n   /** Destructively negate this. */\n-  private final void setNegative()\n+  private void setNegative()\n   {\n     setNegative(this);\n   }"}]}