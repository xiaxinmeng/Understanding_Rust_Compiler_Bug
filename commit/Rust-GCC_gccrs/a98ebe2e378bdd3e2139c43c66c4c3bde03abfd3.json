{"sha": "a98ebe2e378bdd3e2139c43c66c4c3bde03abfd3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTk4ZWJlMmUzNzhiZGQzZTIxMzljNDNjNjZjNGMzYmRlMDNhYmZkMw==", "commit": {"author": {"name": "Kazu Hirata", "email": "kazu@cs.umass.edu", "date": "2003-08-19T23:22:00Z"}, "committer": {"name": "Kazu Hirata", "email": "kazu@gcc.gnu.org", "date": "2003-08-19T23:22:00Z"}, "message": "builtins.c: Fix comment typos.\n\n\t* builtins.c: Fix comment typos.\n\t* c-common.c: Likewise.\n\t* c-decl.c: Likewise.\n\t* c-pretty-print.c: Likewise.\n\t* cfgbuild.c: Likewise.\n\t* cfglayout.c: Likewise.\n\t* cfgloopanal.c: Likewise.\n\t* cgraphunit.c: Likewise.\n\t* cppfiles.c: Likewise.\n\t* dwarfout.c: Likewise.\n\t* expr.c: Likewise.\n\t* fold-const.c: Likewise.\n\t* gcse.c: Likewise.\n\t* ggc-page.c: Likewise.\n\t* haifa-sched.c: Likewise.\n\t* pretty-print.c: Likewise.\n\t* tree.c: Likewise.\n\t* tree.h: Likewise.\n\t* value-prof.c: Likewise.\n\nFrom-SVN: r70583", "tree": {"sha": "cfd217c7e698d0aaf23ec02241ccbff7719cb9c0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/cfd217c7e698d0aaf23ec02241ccbff7719cb9c0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a98ebe2e378bdd3e2139c43c66c4c3bde03abfd3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a98ebe2e378bdd3e2139c43c66c4c3bde03abfd3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a98ebe2e378bdd3e2139c43c66c4c3bde03abfd3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a98ebe2e378bdd3e2139c43c66c4c3bde03abfd3/comments", "author": null, "committer": null, "parents": [{"sha": "f5e7af77738d6170febe908cae864652965d3639", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f5e7af77738d6170febe908cae864652965d3639", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f5e7af77738d6170febe908cae864652965d3639"}], "stats": {"total": 78, "additions": 50, "deletions": 28}, "files": [{"sha": "95b7f54e3ff75a426710694f3ae1cd3184d1e989", "filename": "gcc/ChangeLog", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a98ebe2e378bdd3e2139c43c66c4c3bde03abfd3/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a98ebe2e378bdd3e2139c43c66c4c3bde03abfd3/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=a98ebe2e378bdd3e2139c43c66c4c3bde03abfd3", "patch": "@@ -1,3 +1,25 @@\n+2003-08-19  Kazu Hirata  <kazu@cs.umass.edu>\n+\n+\t* builtins.c: Fix comment typos.\n+\t* c-common.c: Likewise.\n+\t* c-decl.c: Likewise.\n+\t* c-pretty-print.c: Likewise.\n+\t* cfgbuild.c: Likewise.\n+\t* cfglayout.c: Likewise.\n+\t* cfgloopanal.c: Likewise.\n+\t* cgraphunit.c: Likewise.\n+\t* cppfiles.c: Likewise.\n+\t* dwarfout.c: Likewise.\n+\t* expr.c: Likewise.\n+\t* fold-const.c: Likewise.\n+\t* gcse.c: Likewise.\n+\t* ggc-page.c: Likewise.\n+\t* haifa-sched.c: Likewise.\n+\t* pretty-print.c: Likewise.\n+\t* tree.c: Likewise.\n+\t* tree.h: Likewise.\n+\t* value-prof.c: Likewise.\n+\n 2003-08-19  Kazu Hirata  <kazu@cs.umass.edu>\n \n \t* c-decl.c: Follow spelling conventions."}, {"sha": "934e6fa923da348442418765de568c54a844ffbd", "filename": "gcc/builtins.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a98ebe2e378bdd3e2139c43c66c4c3bde03abfd3/gcc%2Fbuiltins.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a98ebe2e378bdd3e2139c43c66c4c3bde03abfd3/gcc%2Fbuiltins.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbuiltins.c?ref=a98ebe2e378bdd3e2139c43c66c4c3bde03abfd3", "patch": "@@ -4544,7 +4544,7 @@ expand_builtin_printf (tree arglist, rtx target, enum machine_mode mode,\n \t  size_t len = strlen (fmt_str);\n \t  if (fmt_str[len - 1] == '\\n')\n \t    {\n-\t      /* Create a NUL-terminalted string that's one char shorter\n+\t      /* Create a NUL-terminated string that's one char shorter\n \t\t than the original, stripping off the trailing '\\n'.  */\n \t      char *newstr = (char *) alloca (len);\n \t      memcpy (newstr, fmt_str, len - 1);"}, {"sha": "3089e5dbed8ab40b0bc393e558771111f172d20e", "filename": "gcc/c-common.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a98ebe2e378bdd3e2139c43c66c4c3bde03abfd3/gcc%2Fc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a98ebe2e378bdd3e2139c43c66c4c3bde03abfd3/gcc%2Fc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-common.c?ref=a98ebe2e378bdd3e2139c43c66c4c3bde03abfd3", "patch": "@@ -5639,7 +5639,7 @@ c_estimate_num_insns_1 (tree *tp, int *walk_subtrees, void *data)\n       return NULL;\n     }\n   /* Assume that constants and references counts nothing.  These should\n-     be majorized by amount of operations amoung them we count later\n+     be majorized by amount of operations among them we count later\n      and are common target of CSE and similar optimizations.  */\n   if (TREE_CODE_CLASS (TREE_CODE (x)) == 'c'\n       || TREE_CODE_CLASS (TREE_CODE (x)) == 'r')"}, {"sha": "d7b077631c70b87b00ebbd35bd122d823d19e140", "filename": "gcc/c-decl.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a98ebe2e378bdd3e2139c43c66c4c3bde03abfd3/gcc%2Fc-decl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a98ebe2e378bdd3e2139c43c66c4c3bde03abfd3/gcc%2Fc-decl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-decl.c?ref=a98ebe2e378bdd3e2139c43c66c4c3bde03abfd3", "patch": "@@ -6690,7 +6690,7 @@ make_pointer_declarator (tree type_quals_attrs, tree target)\n /* A wrapper around lhd_set_decl_assembler_name that gives static\n    variables their C names if they are at file scope and only one\n    translation unit is being compiled, for backwards compatibility\n-   with certain bizzare assembler hacks (like crtstuff.c).  */\n+   with certain bizarre assembler hacks (like crtstuff.c).  */\n \n void\n c_static_assembler_name (tree decl)"}, {"sha": "455137e6a58f432f36b97e51bd92a5454822eab3", "filename": "gcc/c-pretty-print.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a98ebe2e378bdd3e2139c43c66c4c3bde03abfd3/gcc%2Fc-pretty-print.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a98ebe2e378bdd3e2139c43c66c4c3bde03abfd3/gcc%2Fc-pretty-print.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-pretty-print.c?ref=a98ebe2e378bdd3e2139c43c66c4c3bde03abfd3", "patch": "@@ -30,9 +30,9 @@ Software Foundation, 59 Temple Place - Suite 330, Boston, MA\n /* The pretty-printer code is primarily designed to closely follow\n    (GNU) C and C++ grammars.  That is to be contrasted with spaghetti\n    codes we used to have in the past.  Following a structured\n-   approach (preferaably the official grammars) is believed to make it\n-   much easier o add extensions and nifty pretty-printing effects that\n-   takes expresssion or declaration contexts into account.  */\n+   approach (preferably the official grammars) is believed to make it\n+   much easier to add extensions and nifty pretty-printing effects that\n+   takes expression or declaration contexts into account.  */\n \n \n #define pp_c_whitespace(PP)           \\\n@@ -299,7 +299,7 @@ pp_c_simple_type_specifier (c_pretty_printer ppi, tree t)\n \n \n   Implementation note:  Because of the non-linearities in array or\n-  function declarations, this routinie prints not just the\n+  function declarations, this routine prints not just the\n   specifier-qualifier-list of such entities or types of such entities,\n   but also the 'pointer' production part of their declarators.  The\n   remaining part is done by pp_declarator or pp_c_abstract_declarator.  */"}, {"sha": "cd662da4a6d007cabd97f471eb9137195101c9fa", "filename": "gcc/cfgbuild.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a98ebe2e378bdd3e2139c43c66c4c3bde03abfd3/gcc%2Fcfgbuild.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a98ebe2e378bdd3e2139c43c66c4c3bde03abfd3/gcc%2Fcfgbuild.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcfgbuild.c?ref=a98ebe2e378bdd3e2139c43c66c4c3bde03abfd3", "patch": "@@ -121,7 +121,7 @@ control_flow_insn_p (rtx insn)\n       return (flag_non_call_exceptions && can_throw_internal (insn));\n \n     case BARRIER:\n-      /* It is nonsence to reach barrier when looking for the\n+      /* It is nonsense to reach barrier when looking for the\n          end of basic block, but before dead code is eliminated\n          this may happen.  */\n       return false;"}, {"sha": "7121a3e5db4b986a451f22a280c72cd7ab293672", "filename": "gcc/cfglayout.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a98ebe2e378bdd3e2139c43c66c4c3bde03abfd3/gcc%2Fcfglayout.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a98ebe2e378bdd3e2139c43c66c4c3bde03abfd3/gcc%2Fcfglayout.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcfglayout.c?ref=a98ebe2e378bdd3e2139c43c66c4c3bde03abfd3", "patch": "@@ -795,7 +795,7 @@ fixup_reorder_chain (void)\n   prev_bb->next_bb = EXIT_BLOCK_PTR;\n   EXIT_BLOCK_PTR->prev_bb = prev_bb;\n \n-  /* Anoying special case - jump around dead jumptables left in the code.  */\n+  /* Annoying special case - jump around dead jumptables left in the code.  */\n   FOR_EACH_BB (bb)\n     {\n       edge e;"}, {"sha": "da3602ebf019b9ef8a55f2b7cccf02717dbddbb1", "filename": "gcc/cfgloopanal.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a98ebe2e378bdd3e2139c43c66c4c3bde03abfd3/gcc%2Fcfgloopanal.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a98ebe2e378bdd3e2139c43c66c4c3bde03abfd3/gcc%2Fcfgloopanal.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcfgloopanal.c?ref=a98ebe2e378bdd3e2139c43c66c4c3bde03abfd3", "patch": "@@ -557,7 +557,7 @@ count_strange_loop_iterations (rtx init, rtx lim, enum rtx_code cond,\n       abort ();\n     }\n \n-  /* If this is const_true_rtx and we did not take a conservative aproximation\n+  /* If this is const_true_rtx and we did not take a conservative approximation\n      of after_wrap above, we might iterate the calculation (but of course we\n      would have to take care about infinite cases).  Ignore this for now.  */\n   rqmt = simplify_gen_relational (cond, SImode, mode, after_wrap, lim);"}, {"sha": "02a569f816a6beac3975c0e4f5b625258b652ff7", "filename": "gcc/cgraphunit.c", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a98ebe2e378bdd3e2139c43c66c4c3bde03abfd3/gcc%2Fcgraphunit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a98ebe2e378bdd3e2139c43c66c4c3bde03abfd3/gcc%2Fcgraphunit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcgraphunit.c?ref=a98ebe2e378bdd3e2139c43c66c4c3bde03abfd3", "patch": "@@ -781,7 +781,7 @@ cgraph_decide_inlining_of_small_functions (struct cgraph_node **inlined,\n \t  || !cgraph_default_inline_p (node))\n \tcontinue;\n \n-      /* Rule out always_inline functions we dealt with earler.  */\n+      /* Rule out always_inline functions we dealt with earlier.  */\n       for (e = node->callers; e; e = e->next_caller)\n \tif (e->inline_call)\n \t  break;\n@@ -1015,15 +1015,15 @@ cgraph_inline_p (tree caller_decl, tree callee_decl)\n     if (e->callee == callee)\n       return e->inline_call;\n   /* We do not record builtins in the callgraph.  Perhaps it would make more\n-     sense to do so and then prune out those not overwriten by explicit\n+     sense to do so and then prune out those not overwritten by explicit\n      function body.  */\n   return false;\n }\n /* Expand all functions that must be output.\n \n    Attempt to topologically sort the nodes so function is output when\n    all called functions are already assembled to allow data to be\n-   propagated accross the callgraph.  Use a stack to get smaller distance\n+   propagated across the callgraph.  Use a stack to get smaller distance\n    between a function and it's callees (later we may choose to use a more\n    sophisticated algorithm for function reordering; we will likely want\n    to use subsections to make the output functions appear in top-down\n@@ -1058,8 +1058,8 @@ cgraph_expand_functions (void)\n \n /* Mark all local functions.\n \n-   Local function is function whose calls can occur only in the\n-   current compilation unit so we change it's calling convetion.\n+   A local function is one whose calls can occur only in the\n+   current compilation unit, so we change its calling convention.\n    We simply mark all static functions whose address is not taken\n    as local.  */\n "}, {"sha": "04f067da9d1aa371b556f27934551cba0edafea1", "filename": "gcc/cppfiles.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a98ebe2e378bdd3e2139c43c66c4c3bde03abfd3/gcc%2Fcppfiles.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a98ebe2e378bdd3e2139c43c66c4c3bde03abfd3/gcc%2Fcppfiles.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcppfiles.c?ref=a98ebe2e378bdd3e2139c43c66c4c3bde03abfd3", "patch": "@@ -119,7 +119,7 @@ struct _cpp_file\n /* A singly-linked list for all searches for a given file name, with\n    its head pointed to by a slot in FILE_HASH.  The file name is what\n    appeared between the quotes in a #include directive; it can be\n-   determined implicity from the hash table location or explicitly\n+   determined implicitly from the hash table location or explicitly\n    from FILE->name.\n \n    FILE is a structure containing details about the file that was\n@@ -494,7 +494,7 @@ read_file_guts (cpp_reader *pfile, _cpp_file *file)\n }\n \n /* Convenience wrapper around read_file_guts that opens the file if\n-   necessary and closes the file desciptor after reading.  FILE must\n+   necessary and closes the file descriptor after reading.  FILE must\n    have been passed through find_file() at some stage.  */\n static bool\n read_file (cpp_reader *pfile, _cpp_file *file)"}, {"sha": "43ab37b971fa5e275aa2cc0d90d99ecb706c4d95", "filename": "gcc/dwarfout.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a98ebe2e378bdd3e2139c43c66c4c3bde03abfd3/gcc%2Fdwarfout.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a98ebe2e378bdd3e2139c43c66c4c3bde03abfd3/gcc%2Fdwarfout.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdwarfout.c?ref=a98ebe2e378bdd3e2139c43c66c4c3bde03abfd3", "patch": "@@ -942,7 +942,7 @@ static void retry_incomplete_types (void);\n #endif\n \n /* Pseudo-ops for pushing the current section onto the section stack (and\n-   simultaneously changing to a new section) and for poping back to the\n+   simultaneously changing to a new section) and for popping back to the\n    section we were in immediately before this one.  Note that most svr4\n    assemblers only maintain a one level stack... you can push all the\n    sections you want, but you can only pop out one level.  (The sparc"}, {"sha": "0dd49400ec1a5564dba87e4a6071d04f3203ba66", "filename": "gcc/expr.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a98ebe2e378bdd3e2139c43c66c4c3bde03abfd3/gcc%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a98ebe2e378bdd3e2139c43c66c4c3bde03abfd3/gcc%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpr.c?ref=a98ebe2e378bdd3e2139c43c66c4c3bde03abfd3", "patch": "@@ -6393,7 +6393,7 @@ highest_pow2_factor (tree exp)\n       /* We can find the lowest bit that's a one.  If the low\n \t HOST_BITS_PER_WIDE_INT bits are zero, return BIGGEST_ALIGNMENT.\n \t We need to handle this case since we can find it in a COND_EXPR,\n-\t a MIN_EXPR, or a MAX_EXPR.  If the constant overlows, we have an\n+\t a MIN_EXPR, or a MAX_EXPR.  If the constant overflows, we have an\n \t erroneous program, so return BIGGEST_ALIGNMENT to avoid any\n \t later ICE.  */\n       if (TREE_CONSTANT_OVERFLOW (exp))"}, {"sha": "18fd4e7fa2aa1b934435f02ad279c3d7d2740bcd", "filename": "gcc/fold-const.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a98ebe2e378bdd3e2139c43c66c4c3bde03abfd3/gcc%2Ffold-const.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a98ebe2e378bdd3e2139c43c66c4c3bde03abfd3/gcc%2Ffold-const.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffold-const.c?ref=a98ebe2e378bdd3e2139c43c66c4c3bde03abfd3", "patch": "@@ -8364,7 +8364,7 @@ fold_checksum_tree (tree expr, struct md5_ctx *ctx, htab_t ht)\n \n #endif\n \n-/* Perform constant folding and related simplification of intializer\n+/* Perform constant folding and related simplification of initializer\n    expression EXPR.  This behaves identically to \"fold\" but ignores\n    potential run-time traps and exceptions that fold must preserve.  */\n "}, {"sha": "3233d8494e255abcf70b65f35a9ffea3b75fb7d3", "filename": "gcc/gcse.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a98ebe2e378bdd3e2139c43c66c4c3bde03abfd3/gcc%2Fgcse.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a98ebe2e378bdd3e2139c43c66c4c3bde03abfd3/gcc%2Fgcse.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgcse.c?ref=a98ebe2e378bdd3e2139c43c66c4c3bde03abfd3", "patch": "@@ -4530,7 +4530,7 @@ find_implicit_sets (void)\n \n   count = 0;\n   FOR_EACH_BB (bb)\n-    /* Check for more than one sucessor.  */\n+    /* Check for more than one successor.  */\n     if (bb->succ && bb->succ->succ_next)\n       {\n \tcond = fis_get_condition (bb->end);\n@@ -6756,7 +6756,7 @@ trim_ld_motion_mems (void)\n /* This routine will take an expression which we are replacing with\n    a reaching register, and update any stores that are needed if\n    that expression is in the ld_motion list.  Stores are updated by\n-   copying their SRC to the reaching register, and then storeing\n+   copying their SRC to the reaching register, and then storing\n    the reaching register into the store location. These keeps the\n    correct value in the reaching register for the loads.  */\n "}, {"sha": "e8b3ddb85585b554f279420c352ceecb696e4ed1", "filename": "gcc/ggc-page.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a98ebe2e378bdd3e2139c43c66c4c3bde03abfd3/gcc%2Fggc-page.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a98ebe2e378bdd3e2139c43c66c4c3bde03abfd3/gcc%2Fggc-page.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fggc-page.c?ref=a98ebe2e378bdd3e2139c43c66c4c3bde03abfd3", "patch": "@@ -1452,7 +1452,7 @@ ggc_pop_context (void)\n   G.context_depth_allocations &= omask - 1;\n   G.context_depth_collections &= omask - 1;\n \n-  /* The G.depth array is shortend so that the last index is the\n+  /* The G.depth array is shortened so that the last index is the\n      context_depth of the top element of by_depth.  */\n   if (depth+1 < G.depth_in_use)\n     e = G.depth[depth+1];"}, {"sha": "b0c824c984b7ea5a2ed8ccd66bbef03779331c54", "filename": "gcc/haifa-sched.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a98ebe2e378bdd3e2139c43c66c4c3bde03abfd3/gcc%2Fhaifa-sched.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a98ebe2e378bdd3e2139c43c66c4c3bde03abfd3/gcc%2Fhaifa-sched.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fhaifa-sched.c?ref=a98ebe2e378bdd3e2139c43c66c4c3bde03abfd3", "patch": "@@ -385,7 +385,7 @@ may_trap_exp (rtx x, int is_store)\n    moved speculatively, by examining it's patterns, returning:\n    TRAP_RISKY: store, or risky non-load insn (e.g. division by variable).\n    TRAP_FREE: non-load insn.\n-   IFREE: load from a globaly safe location.\n+   IFREE: load from a globally safe location.\n    IRISKY: volatile load.\n    PFREE_CANDIDATE, PRISKY_CANDIDATE: load that need to be checked for\n    being either PFREE or PRISKY.  */"}, {"sha": "421302ec72234845730cff499c5649c0a743290c", "filename": "gcc/pretty-print.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a98ebe2e378bdd3e2139c43c66c4c3bde03abfd3/gcc%2Fpretty-print.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a98ebe2e378bdd3e2139c43c66c4c3bde03abfd3/gcc%2Fpretty-print.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fpretty-print.c?ref=a98ebe2e378bdd3e2139c43c66c4c3bde03abfd3", "patch": "@@ -217,7 +217,7 @@ pp_base_format_text (pretty_printer *pp, text_info *text)\n         default:\n           break;\n         }\n-      /* We don't support precision behond that of \"long long\".  */\n+      /* We don't support precision beyond that of \"long long\".  */\n       if (precision > 2)\n         abort();\n "}, {"sha": "841876712d2b0bd43c70bc8911367d563bd79277", "filename": "gcc/tree.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a98ebe2e378bdd3e2139c43c66c4c3bde03abfd3/gcc%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a98ebe2e378bdd3e2139c43c66c4c3bde03abfd3/gcc%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.c?ref=a98ebe2e378bdd3e2139c43c66c4c3bde03abfd3", "patch": "@@ -3823,7 +3823,7 @@ build_function_type (tree value_type, tree arg_types)\n   return t;\n }\n \n-/* Build a function type.  The RETURN_TYPE is the type retured by the\n+/* Build a function type.  The RETURN_TYPE is the type returned by the\n    function.  If additional arguments are provided, they are\n    additional argument types.  The list of argument types must always\n    be terminated by NULL_TREE.  */"}, {"sha": "6826109faaef5c0a9443df0f992f314bde01cd23", "filename": "gcc/tree.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a98ebe2e378bdd3e2139c43c66c4c3bde03abfd3/gcc%2Ftree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a98ebe2e378bdd3e2139c43c66c4c3bde03abfd3/gcc%2Ftree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.h?ref=a98ebe2e378bdd3e2139c43c66c4c3bde03abfd3", "patch": "@@ -2387,7 +2387,7 @@ enum size_type_kind\n   USIZETYPE,\t\t/* Unsigned representation of sizes in bytes.  */\n   BITSIZETYPE,\t\t/* Normal representation of sizes in bits.  */\n   SBITSIZETYPE,\t\t/* Signed representation of sizes in bits.  */\n-  UBITSIZETYPE,\t        /* Unsifgned representation of sizes in bits.  */\n+  UBITSIZETYPE,\t        /* Unsigned representation of sizes in bits.  */\n   TYPE_KIND_LAST};\n \n extern GTY(()) tree sizetype_tab[(int) TYPE_KIND_LAST];"}, {"sha": "5dca281b1df8632f1aaedabd7ede2dc0f19ea038", "filename": "gcc/value-prof.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a98ebe2e378bdd3e2139c43c66c4c3bde03abfd3/gcc%2Fvalue-prof.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a98ebe2e378bdd3e2139c43c66c4c3bde03abfd3/gcc%2Fvalue-prof.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvalue-prof.c?ref=a98ebe2e378bdd3e2139c43c66c4c3bde03abfd3", "patch": "@@ -40,7 +40,7 @@ Software Foundation, 59 Temple Place - Suite 330, Boston, MA\n    insn_values_to_profile function.  This function is called from branch_prob\n    in profile.c and the requested values are instrumented by it in the first\n    compilation with -fprofile-arcs.  The optimization may then read the\n-   gathered data in the second compilation with -fbranch-probablities.\n+   gathered data in the second compilation with -fbranch-probabilities.\n    The measured data is appended as REG_VALUE_PROFILE note to the instrumented\n    insn.  The argument to the note consists of an EXPR_LIST where its\n    members have the following meaning (from the first to the last):"}]}