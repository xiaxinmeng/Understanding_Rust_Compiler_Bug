{"sha": "b8add5942c0ce71990233b594d5f0bdec31d73c8", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjhhZGQ1OTQyYzBjZTcxOTkwMjMzYjU5NGQ1ZjBiZGVjMzFkNzNjOA==", "commit": {"author": {"name": "Jan Hubicka", "email": "jh@suse.cz", "date": "2009-04-18T15:48:16Z"}, "committer": {"name": "Jan Hubicka", "email": "hubicka@gcc.gnu.org", "date": "2009-04-18T15:48:16Z"}, "message": "formater.h: Include bits/c++config.h.\n\n\t* include/debug/formater.h: Include bits/c++config.h.\n\t(_M_error): Mark noreturn.\n\t* include/bits/c++config (_GLIBCXX_PURE, _GLIBCXX_CONST,\n\t_GLIBCXX_NORETURN): New.\n\t* include/bits/stl_tree.h (_Rb_tree_increment, _Rb_tree_increment,\n\t_Rb_tree_decrement, _Rb_tree_decrement, _Rb_tree_black_count): Mark pure.\n\t* include/c_compatibility/stdatomic.h (atomic_flag_test_and_set_explicit,\n\tatomic_flag_clear_explicit, __atomic_flag_wait_explicit,\n\t__atomic_flag_for_address): Mark by throw ().\n\t* src/atomic.cc (atomic_flag_test_and_set_explicit,\n\tatomic_flag_clear_explicit, __atomic_flag_wait_explicit,\n\t__atomic_flag_for_address): Mark by throw ().\n\nFrom-SVN: r146317", "tree": {"sha": "74629d2486edc497cc2f32e7b666fd1f23f63e71", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/74629d2486edc497cc2f32e7b666fd1f23f63e71"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b8add5942c0ce71990233b594d5f0bdec31d73c8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b8add5942c0ce71990233b594d5f0bdec31d73c8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b8add5942c0ce71990233b594d5f0bdec31d73c8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b8add5942c0ce71990233b594d5f0bdec31d73c8/comments", "author": null, "committer": null, "parents": [{"sha": "a5cb563b79b71ef5dbf3c3c0aca014c785f79927", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a5cb563b79b71ef5dbf3c3c0aca014c785f79927", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a5cb563b79b71ef5dbf3c3c0aca014c785f79927"}], "stats": {"total": 58, "additions": 43, "deletions": 15}, "files": [{"sha": "7c434cf1d8a0ca9d4d906f559ff4afc5ac857536", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b8add5942c0ce71990233b594d5f0bdec31d73c8/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b8add5942c0ce71990233b594d5f0bdec31d73c8/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=b8add5942c0ce71990233b594d5f0bdec31d73c8", "patch": "@@ -1,3 +1,18 @@\n+2009-04-18  Jan Hubicka  <jh@suse.cz>\n+\n+\t* include/debug/formater.h: Include bits/c++config.h.\n+\t(_M_error): Mark noreturn.\n+\t* include/bits/c++config (_GLIBCXX_PURE, _GLIBCXX_CONST,\n+\t_GLIBCXX_NORETURN): New.\n+\t* include/bits/stl_tree.h (_Rb_tree_increment, _Rb_tree_increment,\n+\t_Rb_tree_decrement, _Rb_tree_decrement, _Rb_tree_black_count): Mark pure.\n+\t* include/c_compatibility/stdatomic.h (atomic_flag_test_and_set_explicit,\n+\tatomic_flag_clear_explicit, __atomic_flag_wait_explicit,\n+\t__atomic_flag_for_address): Mark by throw ().\n+\t* src/atomic.cc (atomic_flag_test_and_set_explicit,\n+\tatomic_flag_clear_explicit, __atomic_flag_wait_explicit,\n+\t__atomic_flag_for_address): Mark by throw ().\n+\n 2009-04-17  Uros Bizjak  <ubizjak@gmail.com>\n \n \t* config/abi/post/alpha-linux-gnu/baseline_symbols.txt: Regenerated."}, {"sha": "92f0ddd19011db01895a2fa6782b96982750734d", "filename": "libstdc++-v3/include/bits/c++config", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b8add5942c0ce71990233b594d5f0bdec31d73c8/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fc%2B%2Bconfig", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b8add5942c0ce71990233b594d5f0bdec31d73c8/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fc%2B%2Bconfig", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fc%2B%2Bconfig?ref=b8add5942c0ce71990233b594d5f0bdec31d73c8", "patch": "@@ -314,4 +314,16 @@ _GLIBCXX_END_NAMESPACE\n #undef min\n #undef max\n \n+#ifndef _GLIBCXX_PURE\n+# define _GLIBCXX_PURE __attribute__ ((__pure__))\n+#endif\n+\n+#ifndef _GLIBCXX_CONST\n+# define _GLIBCXX_CONST __attribute__ ((__const__))\n+#endif\n+\n+#ifndef _GLIBCXX_NORETURN\n+# define _GLIBCXX_NORETURN __attribute__ ((__noreturn__))\n+#endif\n+\n // End of prewritten config; the discovered settings follow."}, {"sha": "ecf3b5c3fe4a37aa409e28b2967b1ec2835cb5fb", "filename": "libstdc++-v3/include/bits/stl_tree.h", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b8add5942c0ce71990233b594d5f0bdec31d73c8/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b8add5942c0ce71990233b594d5f0bdec31d73c8/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_tree.h?ref=b8add5942c0ce71990233b594d5f0bdec31d73c8", "patch": "@@ -137,16 +137,16 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n #endif\n     };\n \n-  _Rb_tree_node_base*\n+  _GLIBCXX_PURE _Rb_tree_node_base*\n   _Rb_tree_increment(_Rb_tree_node_base* __x) throw ();\n \n-  const _Rb_tree_node_base*\n+  _GLIBCXX_PURE const _Rb_tree_node_base*\n   _Rb_tree_increment(const _Rb_tree_node_base* __x) throw ();\n \n-  _Rb_tree_node_base*\n+  _GLIBCXX_PURE _Rb_tree_node_base*\n   _Rb_tree_decrement(_Rb_tree_node_base* __x) throw ();\n \n-  const _Rb_tree_node_base*\n+  _GLIBCXX_PURE const _Rb_tree_node_base*\n   _Rb_tree_decrement(const _Rb_tree_node_base* __x) throw ();\n \n   template<typename _Tp>\n@@ -1448,7 +1448,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n       return __n;\n     }\n \n-  unsigned int\n+  _GLIBCXX_PURE unsigned int\n   _Rb_tree_black_count(const _Rb_tree_node_base* __node,\n                        const _Rb_tree_node_base* __root) throw ();\n "}, {"sha": "e06bf388ba9290c95b8d256675729de9fb32f689", "filename": "libstdc++-v3/include/c_compatibility/stdatomic.h", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b8add5942c0ce71990233b594d5f0bdec31d73c8/libstdc%2B%2B-v3%2Finclude%2Fc_compatibility%2Fstdatomic.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b8add5942c0ce71990233b594d5f0bdec31d73c8/libstdc%2B%2B-v3%2Finclude%2Fc_compatibility%2Fstdatomic.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fc_compatibility%2Fstdatomic.h?ref=b8add5942c0ce71990233b594d5f0bdec31d73c8", "patch": "@@ -121,24 +121,24 @@ _GLIBCXX_BEGIN_EXTERN_C\n \n   // Accessor functions for base atomic_flag type.\n   bool \n-  atomic_flag_test_and_set_explicit(volatile __atomic_flag_base*, memory_order);\n+  atomic_flag_test_and_set_explicit(volatile __atomic_flag_base*, memory_order) throw ();\n \n   inline bool \n   atomic_flag_test_and_set(volatile __atomic_flag_base* __a)\n   { return atomic_flag_test_and_set_explicit(__a, memory_order_seq_cst); }\n   \n   void \n-  atomic_flag_clear_explicit(volatile __atomic_flag_base*, memory_order);\n+  atomic_flag_clear_explicit(volatile __atomic_flag_base*, memory_order) throw ();\n \n   inline void \n   atomic_flag_clear(volatile __atomic_flag_base* __a)\n   { atomic_flag_clear_explicit(__a, memory_order_seq_cst); }\n \n   void \n-  __atomic_flag_wait_explicit(volatile __atomic_flag_base*, memory_order);\n+  __atomic_flag_wait_explicit(volatile __atomic_flag_base*, memory_order) throw ();\n   \n-  volatile __atomic_flag_base* \n-  __atomic_flag_for_address(const volatile void* __z) __attribute__((const));\n+  _GLIBCXX_CONST volatile __atomic_flag_base* \n+  __atomic_flag_for_address(const volatile void* __z) throw ();\n \n   // Implementation specific defines.\n #define _ATOMIC_LOAD_(__a, __x)\t\t\t\t\t\t\\"}, {"sha": "6f4f8edc9d145f569ecff6cfa950901d2eb8d24e", "filename": "libstdc++-v3/include/debug/formatter.h", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b8add5942c0ce71990233b594d5f0bdec31d73c8/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fformatter.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b8add5942c0ce71990233b594d5f0bdec31d73c8/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fformatter.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fformatter.h?ref=b8add5942c0ce71990233b594d5f0bdec31d73c8", "patch": "@@ -29,6 +29,7 @@\n #ifndef _GLIBCXX_DEBUG_FORMATTER_H\n #define _GLIBCXX_DEBUG_FORMATTER_H 1\n \n+#include <bits/c++config.h>\n #include <typeinfo>\n #include <debug/debug.h>\n \n@@ -347,7 +348,7 @@ namespace __gnu_debug\n     const _Error_formatter&\n     _M_message(_Debug_msg_id __id) const;\n \n-    void\n+    _GLIBCXX_NORETURN void\n     _M_error() const;\n \n   private:"}, {"sha": "3a2ff3d52e927f1d72b40c20a6cfe6db37092446", "filename": "libstdc++-v3/src/atomic.cc", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b8add5942c0ce71990233b594d5f0bdec31d73c8/libstdc%2B%2B-v3%2Fsrc%2Fatomic.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b8add5942c0ce71990233b594d5f0bdec31d73c8/libstdc%2B%2B-v3%2Fsrc%2Fatomic.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Fatomic.cc?ref=b8add5942c0ce71990233b594d5f0bdec31d73c8", "patch": "@@ -78,30 +78,30 @@ namespace std\n   {\n     bool\n     atomic_flag_test_and_set_explicit(volatile __atomic_flag_base* __a,\n-\t\t\t\t      memory_order __m)\n+\t\t\t\t      memory_order __m) throw ()\n     {\n       volatile atomic_flag d(__a->_M_i);\n       return d.test_and_set(__m);\n     }\n \n     void\n     atomic_flag_clear_explicit(volatile __atomic_flag_base* __a,\n-\t\t\t       memory_order __m)\n+\t\t\t       memory_order __m) throw ()\n     {\n       volatile atomic_flag d(__a->_M_i);\n       return d.clear(__m);\n     }\n \n     void\n     __atomic_flag_wait_explicit(volatile __atomic_flag_base* __a,\n-\t\t\t\tmemory_order __x)\n+\t\t\t\tmemory_order __x) throw ()\n     {\n       while (atomic_flag_test_and_set_explicit(__a, __x))\n \t{ };\n     }\n \n     volatile __atomic_flag_base*\n-    __atomic_flag_for_address(const volatile void* __z)\n+    __atomic_flag_for_address(const volatile void* __z) throw ()\n     {\n       uintptr_t __u = reinterpret_cast<uintptr_t>(__z);\n       __u += (__u >> 2) + (__u << 4);"}]}