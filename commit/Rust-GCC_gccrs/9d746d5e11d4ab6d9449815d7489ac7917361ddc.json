{"sha": "9d746d5e11d4ab6d9449815d7489ac7917361ddc", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWQ3NDZkNWUxMWQ0YWI2ZDk0NDk4MTVkNzQ4OWFjNzkxNzM2MWRkYw==", "commit": {"author": {"name": "DJ Delorie", "email": "dj@redhat.com", "date": "2006-04-07T21:50:47Z"}, "committer": {"name": "DJ Delorie", "email": "dj@gcc.gnu.org", "date": "2006-04-07T21:50:47Z"}, "message": "m32c.c (m32c_function_arg): Structures are always passed on the stack.\n\n* config/m32c/m32c.c (m32c_function_arg): Structures are always\npassed on the stack.\n(m32c_init_cumulative_args): When a function returns a structure,\nalways pass the pointer to that return area on the stack.\n(m32c_function_arg_advance): Don't increment the parameter number\nif we're processing the returned structure pointer.\n(pushm_info): Reverse order of registers.\n\nFrom-SVN: r112765", "tree": {"sha": "cb57f09e55c4dc564adddb8556e8a35fbaf5fa77", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/cb57f09e55c4dc564adddb8556e8a35fbaf5fa77"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9d746d5e11d4ab6d9449815d7489ac7917361ddc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9d746d5e11d4ab6d9449815d7489ac7917361ddc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9d746d5e11d4ab6d9449815d7489ac7917361ddc", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9d746d5e11d4ab6d9449815d7489ac7917361ddc/comments", "author": null, "committer": null, "parents": [{"sha": "ff5e9a942cba0770cd0ccdd44d38cf03c3c5cbfb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ff5e9a942cba0770cd0ccdd44d38cf03c3c5cbfb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ff5e9a942cba0770cd0ccdd44d38cf03c3c5cbfb"}], "stats": {"total": 41, "additions": 29, "deletions": 12}, "files": [{"sha": "87613f8521a726267fa578b5ecfcf0723326e864", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9d746d5e11d4ab6d9449815d7489ac7917361ddc/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9d746d5e11d4ab6d9449815d7489ac7917361ddc/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=9d746d5e11d4ab6d9449815d7489ac7917361ddc", "patch": "@@ -1,3 +1,13 @@\n+2006-04-07  DJ Delorie  <dj@redhat.com>\n+\n+\t* config/m32c/m32c.c (m32c_function_arg): Structures are always\n+\tpassed on the stack.\n+\t(m32c_init_cumulative_args): When a function returns a structure,\n+\talways pass the pointer to that return area on the stack.\n+\t(m32c_function_arg_advance): Don't increment the parameter number\n+\tif we're processing the returned structure pointer.\n+\t(pushm_info): Reverse order of registers.\n+\n 2006-04-07  Sebastian Pop  <pop@cri.ensmp.fr>\n \n \t* tree-ssa-loop-niter.c (inverse, number_of_iterations_ne,"}, {"sha": "186f666d0fbc85da1f4f4b89848a1c728db80999", "filename": "gcc/config/m32c/m32c.c", "status": "modified", "additions": 19, "deletions": 12, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9d746d5e11d4ab6d9449815d7489ac7917361ddc/gcc%2Fconfig%2Fm32c%2Fm32c.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9d746d5e11d4ab6d9449815d7489ac7917361ddc/gcc%2Fconfig%2Fm32c%2Fm32c.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm32c%2Fm32c.c?ref=9d746d5e11d4ab6d9449815d7489ac7917361ddc", "patch": "@@ -1204,15 +1204,15 @@ static struct\n   int a24_bytes;\n } pushm_info[] =\n {\n-  /* These are in push order.  */\n-  { FB_REGNO, 0x01, 2, 4 },\n-  { SB_REGNO, 0x02, 2, 4 },\n-  { A1_REGNO, 0x04, 2, 4 },\n-  { A0_REGNO, 0x08, 2, 4 },\n-  { R3_REGNO, 0x10, 2, 2 },\n-  { R2_REGNO, 0x20, 2, 2 },\n+  /* These are in reverse push (nearest-to-sp) order.  */\n+  { R0_REGNO, 0x80, 2, 2 },\n   { R1_REGNO, 0x40, 2, 2 },\n-  { R0_REGNO, 0x80, 2, 2 }\n+  { R2_REGNO, 0x20, 2, 2 },\n+  { R3_REGNO, 0x10, 2, 2 },\n+  { A0_REGNO, 0x08, 2, 4 },\n+  { A1_REGNO, 0x04, 2, 4 },\n+  { SB_REGNO, 0x02, 2, 4 },\n+  { FB_REGNO, 0x01, 2, 4 }\n };\n \n #define PUSHM_N (sizeof(pushm_info)/sizeof(pushm_info[0]))\n@@ -1475,6 +1475,9 @@ m32c_function_arg (CUMULATIVE_ARGS * ca,\n   if (type && INTEGRAL_TYPE_P (type) && POINTER_TYPE_P (type))\n     return NULL_RTX;\n \n+  if (type && AGGREGATE_TYPE_P (type))\n+    return NULL_RTX;\n+\n   switch (ca->parm_num)\n     {\n     case 1:\n@@ -1508,12 +1511,15 @@ m32c_pass_by_reference (CUMULATIVE_ARGS * ca ATTRIBUTE_UNUSED,\n /* Implements INIT_CUMULATIVE_ARGS.  */\n void\n m32c_init_cumulative_args (CUMULATIVE_ARGS * ca,\n-\t\t\t   tree fntype ATTRIBUTE_UNUSED,\n+\t\t\t   tree fntype,\n \t\t\t   rtx libname ATTRIBUTE_UNUSED,\n-\t\t\t   tree fndecl ATTRIBUTE_UNUSED,\n+\t\t\t   tree fndecl,\n \t\t\t   int n_named_args ATTRIBUTE_UNUSED)\n {\n-  ca->force_mem = 0;\n+  if (fntype && aggregate_value_p (TREE_TYPE (fntype), fndecl))\n+    ca->force_mem = 1;\n+  else\n+    ca->force_mem = 0;\n   ca->parm_num = 1;\n }\n \n@@ -1529,7 +1535,8 @@ m32c_function_arg_advance (CUMULATIVE_ARGS * ca,\n {\n   if (ca->force_mem)\n     ca->force_mem = 0;\n-  ca->parm_num++;\n+  else\n+    ca->parm_num++;\n }\n \n /* Implements FUNCTION_ARG_REGNO_P.  */"}]}