{"sha": "1b4a93f79b44e6cffbd43cbdfa0f649b9b43158a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWI0YTkzZjc5YjQ0ZTZjZmZiZDQzY2JkZmEwZjY0OWI5YjQzMTU4YQ==", "commit": {"author": {"name": "Mark Mitchell", "email": "mark@codesourcery.com", "date": "2001-04-16T02:50:12Z"}, "committer": {"name": "Mark Mitchell", "email": "mmitchel@gcc.gnu.org", "date": "2001-04-16T02:50:12Z"}, "message": "init.c (build_delete): Create a SAVE_EXPR for the address if we're going to use it more than once.\n\n\t* init.c (build_delete): Create a SAVE_EXPR for the address if\n\twe're going to use it more than once.\n\nFrom-SVN: r41371", "tree": {"sha": "48199510d9ceeaf6551901883d22b7b6dcaa4389", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/48199510d9ceeaf6551901883d22b7b6dcaa4389"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1b4a93f79b44e6cffbd43cbdfa0f649b9b43158a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1b4a93f79b44e6cffbd43cbdfa0f649b9b43158a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1b4a93f79b44e6cffbd43cbdfa0f649b9b43158a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1b4a93f79b44e6cffbd43cbdfa0f649b9b43158a/comments", "author": null, "committer": null, "parents": [{"sha": "2406cfed9a14c49a295f00dd6758aa6aca1a86ed", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2406cfed9a14c49a295f00dd6758aa6aca1a86ed", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2406cfed9a14c49a295f00dd6758aa6aca1a86ed"}], "stats": {"total": 58, "additions": 52, "deletions": 6}, "files": [{"sha": "2487d9e498a00286bd099093c8b92efde3376417", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1b4a93f79b44e6cffbd43cbdfa0f649b9b43158a/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1b4a93f79b44e6cffbd43cbdfa0f649b9b43158a/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=1b4a93f79b44e6cffbd43cbdfa0f649b9b43158a", "patch": "@@ -1,3 +1,8 @@\n+2001-04-15  Mark Mitchell  <mark@codesourcery.com>\n+\n+\t* init.c (build_delete): Create a SAVE_EXPR for the address if\n+\twe're going to use it more than once.\n+\n 2001-04-13  Mark Mitchell  <mark@codesourcery.com>\n \n \t* cp-tree.h (DELTA2_FROM_PTRMEMFUNC): Remove."}, {"sha": "93ff71664c15504325277398bdc4d45df94fa99c", "filename": "gcc/cp/init.c", "status": "modified", "additions": 8, "deletions": 6, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1b4a93f79b44e6cffbd43cbdfa0f649b9b43158a/gcc%2Fcp%2Finit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1b4a93f79b44e6cffbd43cbdfa0f649b9b43158a/gcc%2Fcp%2Finit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Finit.c?ref=1b4a93f79b44e6cffbd43cbdfa0f649b9b43158a", "patch": "@@ -3155,7 +3155,6 @@ build_delete (type, addr, auto_delete, flags, use_global_delete)\n {\n   tree member;\n   tree expr;\n-  tree ref;\n \n   if (addr == error_mark_node)\n     return error_mark_node;\n@@ -3184,7 +3183,6 @@ build_delete (type, addr, auto_delete, flags, use_global_delete)\n \n       /* throw away const and volatile on target type of addr */\n       addr = convert_force (build_pointer_type (type), addr, 0);\n-      ref = build_indirect_ref (addr, NULL_PTR);\n     }\n   else if (TREE_CODE (type) == ARRAY_TYPE)\n     {\n@@ -3209,8 +3207,6 @@ build_delete (type, addr, auto_delete, flags, use_global_delete)\n \taddr = save_expr (addr);\n \n       addr = convert_force (build_pointer_type (type), addr, 0);\n-\n-      ref = build_indirect_ref (addr, NULL_PTR);\n     }\n \n   my_friendly_assert (IS_AGGR_TYPE (type), 220);\n@@ -3239,6 +3235,8 @@ build_delete (type, addr, auto_delete, flags, use_global_delete)\n \t delete'.  */\n       if (use_global_delete && auto_delete == sfk_deleting_destructor)\n \t{\n+\t  /* We will use ADDR multiple times so we must save it.  */\n+\t  addr = save_expr (addr);\n \t  /* Delete the object. */\n \t  do_delete = build_builtin_delete_call (addr);\n \t  /* Otherwise, treat this like a complete object destructor\n@@ -3251,7 +3249,9 @@ build_delete (type, addr, auto_delete, flags, use_global_delete)\n       else if (!DECL_VIRTUAL_P (CLASSTYPE_DESTRUCTORS (type))\n \t       && auto_delete == sfk_deleting_destructor)\n \t{\n-\t  /* Buidl the call.  */\n+\t  /* We will use ADDR multiple times so we must save it.  */\n+\t  addr = save_expr (addr);\n+\t  /* Build the call.  */\n \t  do_delete = build_op_delete_call (DELETE_EXPR,\n \t\t\t\t\t    addr,\n \t\t\t\t\t    c_sizeof_nowarn (type),\n@@ -3261,7 +3261,8 @@ build_delete (type, addr, auto_delete, flags, use_global_delete)\n \t  auto_delete = sfk_complete_destructor;\n \t}\n \n-      expr = build_dtor_call (ref, auto_delete, flags);\n+      expr = build_dtor_call (build_indirect_ref (addr, NULL_PTR),\n+\t\t\t      auto_delete, flags);\n       if (do_delete)\n \texpr = build (COMPOUND_EXPR, void_type_node, expr, do_delete);\n \n@@ -3285,6 +3286,7 @@ build_delete (type, addr, auto_delete, flags, use_global_delete)\n       int i, n_baseclasses = CLASSTYPE_N_BASECLASSES (type);\n       tree base_binfo = n_baseclasses > 0 ? TREE_VEC_ELT (binfos, 0) : NULL_TREE;\n       tree exprstmt = NULL_TREE;\n+      tree ref = build_indirect_ref (addr, NULL_PTR);\n \n       /* Set this again before we call anything, as we might get called\n \t recursively.  */"}, {"sha": "1f884b70b53c05722a3fb300bb9348ee42998b4b", "filename": "gcc/testsuite/g++.old-deja/g++.other/delete8.C", "status": "added", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1b4a93f79b44e6cffbd43cbdfa0f649b9b43158a/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.other%2Fdelete8.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1b4a93f79b44e6cffbd43cbdfa0f649b9b43158a/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.other%2Fdelete8.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.other%2Fdelete8.C?ref=1b4a93f79b44e6cffbd43cbdfa0f649b9b43158a", "patch": "@@ -0,0 +1,39 @@\n+// Origin: Mark Mitchell <mark@codesourcery.com>\n+\n+#include <stdlib.h>\n+\n+struct S {\n+  ~S ();\n+};\n+\n+bool flag;\n+S* s1;\n+S* s2;\n+\n+void* operator new (size_t s)\n+{\n+  return malloc (s);\n+}\n+\n+void operator delete (void* p)\n+{\n+  if (flag && p != s2)\n+    abort ();\n+}\n+\n+S::~S () { \n+  if (this != s2)\n+    abort ();\n+  s1 = 0;\n+}\n+\n+int main () {\n+  s2 = new S;\n+  s1 = s2;\n+  // Turn on the check in `operator delete'.\n+  flag = true;\n+  delete s1;\n+  // Turn it off again so that normal shutdown code works.\n+  flag = false;\n+}\n+"}]}