{"sha": "c77f46c67efa4aca7b8f0808c5de7e589cc44f15", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Yzc3ZjQ2YzY3ZWZhNGFjYTdiOGYwODA4YzVkZTdlNTg5Y2M0NGYxNQ==", "commit": {"author": {"name": "Alexandre Oliva", "email": "oliva@lsd.ic.unicamp.br", "date": "2000-01-26T07:57:28Z"}, "committer": {"name": "Alexandre Oliva", "email": "oliva@gcc.gnu.org", "date": "2000-01-26T07:57:28Z"}, "message": "alpha.c (alpha_emit_xfloating_cvt): Do not assume incoming operands array is large enough for one more operand.\n\n* config/alpha/alpha.c (alpha_emit_xfloating_cvt): Do not assume\nincoming operands array is large enough for one more operand.\n(alpha_emit_xfloating_arith): Likewise.\n\nFrom-SVN: r31629", "tree": {"sha": "049646eb341d43c241a691e41d5485f9e89e61e3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/049646eb341d43c241a691e41d5485f9e89e61e3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c77f46c67efa4aca7b8f0808c5de7e589cc44f15", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c77f46c67efa4aca7b8f0808c5de7e589cc44f15", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c77f46c67efa4aca7b8f0808c5de7e589cc44f15", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c77f46c67efa4aca7b8f0808c5de7e589cc44f15/comments", "author": null, "committer": null, "parents": [{"sha": "cef40e9fa4dd4e57384cc870db87d1e9cf4d7e97", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cef40e9fa4dd4e57384cc870db87d1e9cf4d7e97", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cef40e9fa4dd4e57384cc870db87d1e9cf4d7e97"}], "stats": {"total": 22, "additions": 17, "deletions": 5}, "files": [{"sha": "1f9c6f103f7462d0d15253dd60d83c50af81c1c1", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c77f46c67efa4aca7b8f0808c5de7e589cc44f15/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c77f46c67efa4aca7b8f0808c5de7e589cc44f15/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=c77f46c67efa4aca7b8f0808c5de7e589cc44f15", "patch": "@@ -1,3 +1,9 @@\n+2000-01-26  Alexandre Oliva  <oliva@lsd.ic.unicamp.br>\n+\n+\t* config/alpha/alpha.c (alpha_emit_xfloating_cvt): Do not assume\n+\tincoming operands array is large enough for one more operand.\n+\t(alpha_emit_xfloating_arith): Likewise.\n+\n 2000-01-25  Zack Weinberg  <zack@wolery.cumb.org>\n \n \t* fixinc/Makefile.in (machname.h): SunOS 4 sed can't handle a"}, {"sha": "23faed8d2505de2fef0c8b06ad61794c11db4968", "filename": "gcc/config/alpha/alpha.c", "status": "modified", "additions": 11, "deletions": 5, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c77f46c67efa4aca7b8f0808c5de7e589cc44f15/gcc%2Fconfig%2Falpha%2Falpha.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c77f46c67efa4aca7b8f0808c5de7e589cc44f15/gcc%2Fconfig%2Falpha%2Falpha.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Falpha.c?ref=c77f46c67efa4aca7b8f0808c5de7e589cc44f15", "patch": "@@ -1936,12 +1936,15 @@ alpha_emit_xfloating_arith (code, operands)\n {\n   const char *func;\n   int mode;\n+  rtx out_operands[3];\n \n   func = alpha_lookup_xfloating_lib_func (code);\n   mode = alpha_compute_xfloating_mode_arg (code, alpha_fprm);\n \n-  operands[3] = GEN_INT (mode);\n-  alpha_emit_xfloating_libcall (func, operands[0], operands+1, 3,  \n+  out_operands[0] = operands[1];\n+  out_operands[1] = operands[2];\n+  out_operands[2] = GEN_INT (mode);\n+  alpha_emit_xfloating_libcall (func, operands[0], out_operands, 3,  \n \t\t\t\tgen_rtx_fmt_ee (code, TFmode, operands[1],\n \t\t\t\t\t\toperands[2]));\n }\n@@ -1978,27 +1981,30 @@ alpha_emit_xfloating_cvt (code, operands)\n      rtx operands[];\n {\n   int noperands = 1, mode;\n+  rtx out_operands[2];\n   const char *func;\n \n   func = alpha_lookup_xfloating_lib_func (code);\n \n+  out_operands[0] = operands[1];\n+\n   switch (code)\n     {\n     case FIX:\n       mode = alpha_compute_xfloating_mode_arg (code, ALPHA_FPRM_CHOP);\n-      operands[2] = GEN_INT (mode);\n+      out_operands[1] = GEN_INT (mode);\n       noperands = 2;\n       break;\n     case FLOAT_TRUNCATE:\n       mode = alpha_compute_xfloating_mode_arg (code, alpha_fprm);\n-      operands[2] = GEN_INT (mode);\n+      out_operands[1] = GEN_INT (mode);\n       noperands = 2;\n       break;\n     default:\n       break;\n     }\n \n-  alpha_emit_xfloating_libcall (func, operands[0], operands+1, noperands,\n+  alpha_emit_xfloating_libcall (func, operands[0], out_operands, noperands,\n \t\t\t\tgen_rtx_fmt_e (code, GET_MODE (operands[0]),\n \t\t\t\t\t       operands[1]));\n }"}]}