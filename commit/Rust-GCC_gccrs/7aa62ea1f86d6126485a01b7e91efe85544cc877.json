{"sha": "7aa62ea1f86d6126485a01b7e91efe85544cc877", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2FhNjJlYTFmODZkNjEyNjQ4NWEwMWI3ZTkxZWZlODU1NDRjYzg3Nw==", "commit": {"author": {"name": "Martin Jambor", "email": "mjambor@suse.cz", "date": "2011-06-30T13:24:19Z"}, "committer": {"name": "Martin Jambor", "email": "jamborm@gcc.gnu.org", "date": "2011-06-30T13:24:19Z"}, "message": "re PR tree-optimization/49094 (ARM aligned(1) attribute is sometimes dropped)\n\n2011-06-30  Martin Jambor  <mjambor@suse.cz>\n\n\tPR tree-optimization/49094\n\t* tree-sra.c (tree_non_mode_aligned_mem_p): New function.\n\t(build_accesses_from_assign): Use it.\n\n\t* testsuite/gcc.dg/tree-ssa/pr49094.c: New test.\n\nFrom-SVN: r175703", "tree": {"sha": "b4e799d2e780d8dcdab0916f9db4969ba5b55613", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b4e799d2e780d8dcdab0916f9db4969ba5b55613"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7aa62ea1f86d6126485a01b7e91efe85544cc877", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7aa62ea1f86d6126485a01b7e91efe85544cc877", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7aa62ea1f86d6126485a01b7e91efe85544cc877", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7aa62ea1f86d6126485a01b7e91efe85544cc877/comments", "author": {"login": "jamborm", "id": 2180070, "node_id": "MDQ6VXNlcjIxODAwNzA=", "avatar_url": "https://avatars.githubusercontent.com/u/2180070?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jamborm", "html_url": "https://github.com/jamborm", "followers_url": "https://api.github.com/users/jamborm/followers", "following_url": "https://api.github.com/users/jamborm/following{/other_user}", "gists_url": "https://api.github.com/users/jamborm/gists{/gist_id}", "starred_url": "https://api.github.com/users/jamborm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jamborm/subscriptions", "organizations_url": "https://api.github.com/users/jamborm/orgs", "repos_url": "https://api.github.com/users/jamborm/repos", "events_url": "https://api.github.com/users/jamborm/events{/privacy}", "received_events_url": "https://api.github.com/users/jamborm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "a32dae63a2b518137716c0de82befeeb47dbcab5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a32dae63a2b518137716c0de82befeeb47dbcab5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a32dae63a2b518137716c0de82befeeb47dbcab5"}], "stats": {"total": 75, "additions": 74, "deletions": 1}, "files": [{"sha": "17f1cd8681a6f137fe534d3603afead90ac6b371", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7aa62ea1f86d6126485a01b7e91efe85544cc877/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7aa62ea1f86d6126485a01b7e91efe85544cc877/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=7aa62ea1f86d6126485a01b7e91efe85544cc877", "patch": "@@ -1,3 +1,9 @@\n+2011-06-30  Martin Jambor  <mjambor@suse.cz>\n+\n+\tPR tree-optimization/49094\n+\t* tree-sra.c (tree_non_mode_aligned_mem_p): New function.\n+\t(build_accesses_from_assign): Use it.\n+\n 2011-06-30  Jakub Jelinek  <jakub@redhat.com>\n \n \t* tree-ssa-structalias.c (find_func_aliases_for_builtin_call): Fix"}, {"sha": "ead74b9055a14be1d79d37fdd0cdb6bf7fab748c", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7aa62ea1f86d6126485a01b7e91efe85544cc877/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7aa62ea1f86d6126485a01b7e91efe85544cc877/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=7aa62ea1f86d6126485a01b7e91efe85544cc877", "patch": "@@ -1,3 +1,8 @@\n+2011-06-30  Martin Jambor  <mjambor@suse.cz>\n+\n+\tPR tree-optimization/49094\n+\t* gcc.dg/tree-ssa/pr49094.c: New test.\n+\n 2011-06-30  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR fortran/49540"}, {"sha": "5e565f786f4f8da6002bc89d27a4340523da87e7", "filename": "gcc/testsuite/gcc.dg/tree-ssa/pr49094.c", "status": "added", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7aa62ea1f86d6126485a01b7e91efe85544cc877/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr49094.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7aa62ea1f86d6126485a01b7e91efe85544cc877/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr49094.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr49094.c?ref=7aa62ea1f86d6126485a01b7e91efe85544cc877", "patch": "@@ -0,0 +1,38 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O\" } */\n+\n+struct in_addr {\n+\tunsigned int s_addr;\n+};\n+\n+struct ip {\n+\tunsigned char ip_p;\n+\tunsigned short ip_sum;\n+\tstruct\tin_addr ip_src,ip_dst;\n+} __attribute__ ((aligned(1), packed));\n+\n+struct ip ip_fw_fwd_addr;\n+\n+int test_alignment( char *m )\n+{\n+  struct ip *ip = (struct ip *) m;\n+  struct in_addr pkt_dst;\n+  pkt_dst = ip->ip_dst ;\n+  if( pkt_dst.s_addr == 0 )\n+    return 1;\n+  else\n+    return 0;\n+}\n+\n+int __attribute__ ((noinline, noclone))\n+intermediary (char *p)\n+{\n+  return test_alignment (p);\n+}\n+\n+int\n+main (int argc, char *argv[])\n+{\n+  ip_fw_fwd_addr.ip_dst.s_addr = 1;\n+  return intermediary ((void *) &ip_fw_fwd_addr);\n+}"}, {"sha": "e45ff8a027268c41f1f9cc5216da06fcf30ef82e", "filename": "gcc/tree-sra.c", "status": "modified", "additions": 25, "deletions": 1, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7aa62ea1f86d6126485a01b7e91efe85544cc877/gcc%2Ftree-sra.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7aa62ea1f86d6126485a01b7e91efe85544cc877/gcc%2Ftree-sra.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-sra.c?ref=7aa62ea1f86d6126485a01b7e91efe85544cc877", "patch": "@@ -1050,6 +1050,26 @@ disqualify_ops_if_throwing_stmt (gimple stmt, tree lhs, tree rhs)\n   return false;\n }\n \n+/* Return true iff type of EXP is not sufficiently aligned.  */\n+\n+static bool\n+tree_non_mode_aligned_mem_p (tree exp)\n+{\n+  enum machine_mode mode = TYPE_MODE (TREE_TYPE (exp));\n+  unsigned int align;\n+\n+  if (TREE_CODE (exp) == SSA_NAME\n+      || mode == BLKmode\n+      || !STRICT_ALIGNMENT)\n+    return false;\n+\n+  align = get_object_alignment (exp, BIGGEST_ALIGNMENT);\n+  if (GET_MODE_ALIGNMENT (mode) > align)\n+    return true;\n+\n+  return false;\n+}\n+\n /* Scan expressions occuring in STMT, create access structures for all accesses\n    to candidates for scalarization and remove those candidates which occur in\n    statements or expressions that prevent them from being split apart.  Return\n@@ -1074,14 +1094,18 @@ build_accesses_from_assign (gimple stmt)\n   lacc = build_access_from_expr_1 (lhs, stmt, true);\n \n   if (lacc)\n-    lacc->grp_assignment_write = 1;\n+    {\n+      lacc->grp_assignment_write = 1;\n+      lacc->grp_unscalarizable_region |= tree_non_mode_aligned_mem_p (rhs);\n+    }\n \n   if (racc)\n     {\n       racc->grp_assignment_read = 1;\n       if (should_scalarize_away_bitmap && !gimple_has_volatile_ops (stmt)\n \t  && !is_gimple_reg_type (racc->type))\n \tbitmap_set_bit (should_scalarize_away_bitmap, DECL_UID (racc->base));\n+      racc->grp_unscalarizable_region |= tree_non_mode_aligned_mem_p (lhs);\n     }\n \n   if (lacc && racc"}]}