{"sha": "f41d6665b2a2baa315878fc48549e53575625136", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjQxZDY2NjViMmEyYmFhMzE1ODc4ZmM0ODU0OWU1MzU3NTYyNTEzNg==", "commit": {"author": {"name": "Daniel Jacobowitz", "email": "dan@codesourcery.com", "date": "2005-12-14T15:30:44Z"}, "committer": {"name": "Daniel Jacobowitz", "email": "drow@gcc.gnu.org", "date": "2005-12-14T15:30:44Z"}, "message": "Makefile.tpl: Throughout the file, use : $(MAKE) along with $(stage) and $(unstage).\n\n\t* Makefile.tpl: Throughout the file, use : $(MAKE) along with\n\t$(stage) and $(unstage).\n\t(EXTRA_TARGET_FLAGS): Correct double-quoting.\n\t(all): Remove stray semicolon.\n\t(local-distclean): Don't handle multilib.tmp and multilib.out.\n\t(install.all): Set $s for consistency.\n\t(configure-[+prefix+][+module+]): Instead of [+deps+], handle\n\tcheck_multilibs setting.  Always make the install directory.\n\t(configure-stage[+id+]-[+prefix+][+module+]): Likewise.\n\tCorrect @if/@endif.\n\t(all-stage[+id+]-[+prefix+][+module+]): Correct @if/@endif.\n\t($(TARGET_SUBDIR)/[+module+]/multilib.out): Remove.\n\t(stage[+id+]-start, stage[+id+]-end): Stage $(TARGET_SUBDIR).\n\t(multilib.out): Remove.\n\t* Makefile.in: Regenerated.\n\nFrom-SVN: r108513", "tree": {"sha": "22c1081bca6e112e714a6e67670f3bdea730b863", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/22c1081bca6e112e714a6e67670f3bdea730b863"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f41d6665b2a2baa315878fc48549e53575625136", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f41d6665b2a2baa315878fc48549e53575625136", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f41d6665b2a2baa315878fc48549e53575625136", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f41d6665b2a2baa315878fc48549e53575625136/comments", "author": null, "committer": null, "parents": [{"sha": "d14c5160c116087d345ca2f72c14ab25bf494b87", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d14c5160c116087d345ca2f72c14ab25bf494b87", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d14c5160c116087d345ca2f72c14ab25bf494b87"}], "stats": {"total": 4150, "additions": 2254, "deletions": 1896}, "files": [{"sha": "162a7dddbc939890edab54456dc632f90cfe71dd", "filename": "ChangeLog", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f41d6665b2a2baa315878fc48549e53575625136/ChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f41d6665b2a2baa315878fc48549e53575625136/ChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/ChangeLog?ref=f41d6665b2a2baa315878fc48549e53575625136", "patch": "@@ -1,3 +1,21 @@\n+2005-12-14  Daniel Jacobowitz  <dan@codesourcery.com>\n+\n+\t* Makefile.tpl: Throughout the file, use : $(MAKE) along with\n+\t$(stage) and $(unstage).\n+\t(EXTRA_TARGET_FLAGS): Correct double-quoting.\n+\t(all): Remove stray semicolon.\n+\t(local-distclean): Don't handle multilib.tmp and multilib.out.\n+\t(install.all): Set $s for consistency.\n+\t(configure-[+prefix+][+module+]): Instead of [+deps+], handle\n+\tcheck_multilibs setting.  Always make the install directory.\n+\t(configure-stage[+id+]-[+prefix+][+module+]): Likewise.\n+\tCorrect @if/@endif.\n+\t(all-stage[+id+]-[+prefix+][+module+]): Correct @if/@endif.\n+\t($(TARGET_SUBDIR)/[+module+]/multilib.out): Remove.\n+\t(stage[+id+]-start, stage[+id+]-end): Stage $(TARGET_SUBDIR).\n+\t(multilib.out): Remove.\n+\t* Makefile.in: Regenerated.\n+\n 2005-12-12  Carlos O'Donell <carlos@codesourcery.com>\n \n \t* MAINTAINERS (Write After Approval): Add myself."}, {"sha": "973973209d33a76fb8b00f8acdef66ef6734ff46", "filename": "Makefile.in", "status": "modified", "additions": 2136, "deletions": 1810, "changes": 3946, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f41d6665b2a2baa315878fc48549e53575625136/Makefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f41d6665b2a2baa315878fc48549e53575625136/Makefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/Makefile.in?ref=f41d6665b2a2baa315878fc48549e53575625136"}, {"sha": "8026730efd7ddf22b248638a4aea886ca6e19089", "filename": "Makefile.tpl", "status": "modified", "additions": 100, "deletions": 86, "changes": 186, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f41d6665b2a2baa315878fc48549e53575625136/Makefile.tpl", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f41d6665b2a2baa315878fc48549e53575625136/Makefile.tpl", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/Makefile.tpl?ref=f41d6665b2a2baa315878fc48549e53575625136", "patch": "@@ -425,21 +425,22 @@ X11_FLAGS_TO_PASS = \\\n \t'X11_EXTRA_LIBS=$(X11_EXTRA_LIBS)'\n \n # Flags to pass down to makes which are built with the target environment.\n-# The double $ decreases the length of the command line; the variables\n-# are set in BASE_FLAGS_TO_PASS, and the sub-make will expand them.\n+# The double $ decreases the length of the command line; those variables\n+# are set in BASE_FLAGS_TO_PASS, and the sub-make will expand them.  The\n+# COMPILER_ prefixed variables are not passed down so we expand them here.\n EXTRA_TARGET_FLAGS = \\\n \t'AR=$$(AR_FOR_TARGET)' \\\n-\t'AS=$$(COMPILER_AS_FOR_TARGET)' \\\n+\t'AS=$(COMPILER_AS_FOR_TARGET)' \\\n \t'CC=$$(CC_FOR_TARGET)' \\\n \t'CFLAGS=$$(CFLAGS_FOR_TARGET)' \\\n \t'CXX=$$(CXX_FOR_TARGET)' \\\n \t'CXXFLAGS=$$(CXXFLAGS_FOR_TARGET)' \\\n \t'DLLTOOL=$$(DLLTOOL_FOR_TARGET)' \\\n-\t'LD=$$(COMPILER_LD_FOR_TARGET)' \\\n+\t'LD=$(COMPILER_LD_FOR_TARGET)' \\\n \t'LDFLAGS=$$(LDFLAGS_FOR_TARGET)' \\\n \t'LIBCFLAGS=$$(LIBCFLAGS_FOR_TARGET)' \\\n \t'LIBCXXFLAGS=$$(LIBCXXFLAGS_FOR_TARGET)' \\\n-\t'NM=$$(COMPILER_NM_FOR_TARGET)' \\\n+\t'NM=$(COMPILER_NM_FOR_TARGET)' \\\n \t'OBJDUMP=$$(OBJDUMP_FOR_TARGET)' \\\n \t'RANLIB=$$(RANLIB_FOR_TARGET)' \\\n \t'WINDRES=$$(WINDRES_FOR_TARGET)'\n@@ -486,17 +487,17 @@ all:\n \t[ -f stage_final ] || echo stage3 > stage_final\n \t@r=`${PWD_COMMAND}`; export r; \\\n \ts=`cd $(srcdir); ${PWD_COMMAND}`; export s; \\\n-\t$(MAKE) $(RECURSE_FLAGS_TO_PASS) `cat stage_final`-bubble; \\\n+\t$(MAKE) $(RECURSE_FLAGS_TO_PASS) `cat stage_final`-bubble\n @endif gcc-bootstrap\n-\t@$(unstage)\n+\t@: $(MAKE); $(unstage)\n \t@r=`${PWD_COMMAND}`; export r; \\\n \ts=`cd $(srcdir); ${PWD_COMMAND}`; export s; \\\n \tif [ -f stage_last ]; then \\\n \t  $(MAKE) $(TARGET_FLAGS_TO_PASS) all-host all-target; \\\n \telse \\\n \t  $(MAKE) $(RECURSE_FLAGS_TO_PASS) all-host all-target; \\\n \tfi\n-\t@$(stage)\n+\t@: $(MAKE); $(stage)\n \n .PHONY: all-build\n all-build: [+\n@@ -521,12 +522,12 @@ all-target: [+\n [+ FOR recursive_targets +]\n .PHONY: do-[+make_target+]\n do-[+make_target+]:\n-\t@$(unstage)\n+\t@: $(MAKE); $(unstage)\n \t@r=`${PWD_COMMAND}`; export r; \\\n \ts=`cd $(srcdir); ${PWD_COMMAND}`; export s; \\\n \t$(MAKE) $(RECURSE_FLAGS_TO_PASS) [+make_target+]-host \\\n \t  [+make_target+]-target\n-\t@$(stage)\n+\t@: $(MAKE); $(stage)\n \n \n .PHONY: [+make_target+]-host\n@@ -567,7 +568,7 @@ local-clean:\n \n local-distclean:\n \t-rm -f Makefile config.status config.cache mh-frag mt-frag\n-\t-rm -f multilib.out multilib.tmp maybedep.tmp serdep.tmp\n+\t-rm -f maybedep.tmp serdep.tmp\n \t-if [ \"$(TARGET_SUBDIR)\" != \".\" ]; then \\\n \t  rm -rf $(TARGET_SUBDIR); \\\n \telse true; fi\n@@ -616,11 +617,11 @@ check-target: [+\n   ENDFOR target_modules +]\n \n do-check:\n-\t@$(unstage)\n+\t@: $(MAKE); $(unstage)\n \t@r=`${PWD_COMMAND}`; export r; \\\n \ts=`cd $(srcdir); ${PWD_COMMAND}`; export s; \\\n \t$(MAKE) $(RECURSE_FLAGS_TO_PASS) check-host check-target\n-\t@$(stage)\n+\t@: $(MAKE); $(stage)\n \n # Automated reporting of test results.\n \n@@ -647,11 +648,11 @@ mail-report-with-warnings.log: warning.log\n \n .PHONY: install uninstall\n install:\n-\t@$(unstage)\n+\t@: $(MAKE); $(unstage)\n \t@r=`${PWD_COMMAND}`; export r; \\\n \ts=`cd $(srcdir); ${PWD_COMMAND}`; export s; \\\n \t$(MAKE) $(RECURSE_FLAGS_TO_PASS) installdirs install-host install-target\n-\t@$(stage)\n+\t@: $(MAKE); $(stage)\n \n .PHONY: install-host-nogcc\n install-host-nogcc: [+\n@@ -678,6 +679,7 @@ uninstall:\n install.all: install-no-fixedincludes\n \t@if [ -f ./gcc/Makefile ] ; then \\\n \t\tr=`${PWD_COMMAND}` ; export r ; \\\n+\t\ts=`cd $(srcdir); ${PWD_COMMAND}`; export s; \\\n \t\t$(HOST_EXPORTS) \\\n \t\t(cd ./gcc && \\\n \t\t$(MAKE) $(FLAGS_TO_PASS) install-headers) ; \\\n@@ -730,10 +732,26 @@ TAGS: do-TAGS\n maybe-configure-[+prefix+][+module+]:\n @if [+prefix+][+module+]\n maybe-configure-[+prefix+][+module+]: configure-[+prefix+][+module+]\n-configure-[+prefix+][+module+]: [+deps+]\n+configure-[+prefix+][+module+]:\n \t@[+ IF bootstrap +]test -f stage_last && exit 0; \\\n-\t[+ ELSE bootstrap +]$(unstage)\n-\t@[+ ENDIF bootstrap +]test ! -f [+subdir+]/[+module+]/Makefile || exit 0; \\\n+\t[+ ELSE bootstrap +]: $(MAKE); $(unstage)\n+\t@[+ ENDIF bootstrap +][+ IF check_multilibs\n+\t+]r=`${PWD_COMMAND}`; export r; \\\n+\ts=`cd $(srcdir); ${PWD_COMMAND}`; export s; \\\n+\techo \"Checking multilib configuration for [+module+]...\"; \\\n+\t$(SHELL) $(srcdir)/mkinstalldirs [+subdir+]/[+module+] ; \\\n+\t$(CC_FOR_TARGET) --print-multi-lib > [+subdir+]/[+module+]/multilib.tmp 2> /dev/null ; \\\n+\tif test -r [+subdir+]/[+module+]/multilib.out; then \\\n+\t  if cmp -s [+subdir+]/[+module+]/multilib.tmp [+subdir+]/[+module+]/multilib.out; then \\\n+\t    rm -f [+subdir+]/[+module+]/multilib.tmp; \\\n+\t  else \\\n+\t    rm -f [+subdir+]/[+module+]/Makefile; \\\n+\t    mv [+subdir+]/[+module+]/multilib.tmp [+subdir+]/[+module+]/multilib.out; \\\n+\t  fi; \\\n+\telse \\\n+\t  mv [+subdir+]/[+module+]/multilib.tmp [+subdir+]/[+module+]/multilib.out; \\\n+\tfi\n+\t@[+ ENDIF check_multilibs +]test ! -f [+subdir+]/[+module+]/Makefile || exit 0; \\\n \t$(SHELL) $(srcdir)/mkinstalldirs [+subdir+]/[+module+] ; \\\n \tr=`${PWD_COMMAND}`; export r; \\\n \ts=`cd $(srcdir); ${PWD_COMMAND}`; export s; \\\n@@ -757,16 +775,31 @@ configure-[+prefix+][+module+]: [+deps+]\n [+ FOR bootstrap_stage +]\n .PHONY: configure-stage[+id+]-[+prefix+][+module+] maybe-configure-stage[+id+]-[+prefix+][+module+]\n maybe-configure-stage[+id+]-[+prefix+][+module+]:\n-@if [+module+]-bootstrap\n+@if [+prefix+][+module+]-bootstrap\n maybe-configure-stage[+id+]-[+prefix+][+module+]: configure-stage[+id+]-[+prefix+][+module+]\n-configure-stage[+id+]-[+prefix+][+module+]: [+deps+]\n+configure-stage[+id+]-[+prefix+][+module+]:\n \t@[ `cat stage_current` = stage[+id+] ] || $(MAKE) stage[+id+]-start\n-\t@[ -f [+subdir+]/[+module+]/Makefile ] && exit 0 || : ; \\\n-\tr=`${PWD_COMMAND}`; export r; \\\n+\t@$(SHELL) $(srcdir)/mkinstalldirs [+subdir+]/[+module+]\n+\t[+ IF check_multilibs\n+\t+]@r=`${PWD_COMMAND}`; export r; \\\n \ts=`cd $(srcdir); ${PWD_COMMAND}`; export s; \\\n+\techo \"Checking multilib configuration for [+module+]...\"; \\\n+\t$(CC_FOR_TARGET) --print-multi-lib > [+subdir+]/[+module+]/multilib.tmp 2> /dev/null ; \\\n+\tif test -r [+subdir+]/[+module+]/multilib.out; then \\\n+\t  if cmp -s [+subdir+]/[+module+]/multilib.tmp [+subdir+]/[+module+]/multilib.out; then \\\n+\t    rm -f [+subdir+]/[+module+]/multilib.tmp; \\\n+\t  else \\\n+\t    rm -f [+subdir+]/[+module+]/Makefile; \\\n+\t    mv [+subdir+]/[+module+]/multilib.tmp [+subdir+]/[+module+]/multilib.out; \\\n+\t  fi; \\\n+\telse \\\n+\t  mv [+subdir+]/[+module+]/multilib.tmp [+subdir+]/[+module+]/multilib.out; \\\n+\tfi\n+\t@[+ ENDIF check_multilibs +]test ! -f [+subdir+]/[+module+]/Makefile || exit 0; \\\n \t[+exports+][+ IF prev +] \\\n \t[+poststage1_exports+][+ ENDIF prev +] \\\n \techo Configuring stage [+id+] in [+subdir+]/[+module+] ; \\\n+\t$(SHELL) $(srcdir)/mkinstalldirs [+subdir+]/[+module+] ; \\\n \tcd [+subdir+]/[+module+] || exit 1; \\\n \tcase $(srcdir) in \\\n \t  /* | [A-Za-z]:[\\\\/]*) topdir=$(srcdir) ;; \\\n@@ -778,7 +811,7 @@ configure-stage[+id+]-[+prefix+][+module+]: [+deps+]\n \t$(SHELL) $${libsrcdir}/configure \\\n \t  [+args+] $${srcdiroption} \\\n \t  [+stage_configure_flags+] [+extra_configure_flags+]\n-@endif [+module+]-bootstrap\n+@endif [+prefix+][+module+]-bootstrap\n [+ ENDFOR bootstrap_stage +]\n [+ ENDIF bootstrap +]\n [+ ENDDEF +]\n@@ -792,7 +825,7 @@ TARGET-[+prefix+][+module+]=[+\n maybe-all-[+prefix+][+module+]: all-[+prefix+][+module+]\n all-[+prefix+][+module+]: configure-[+prefix+][+module+]\n \t@[+ IF bootstrap +]test -f stage_last && exit 0; \\\n-\t[+ ELSE bootstrap +]$(unstage)\n+\t[+ ELSE bootstrap +]: $(MAKE); $(unstage)\n \t@[+ ENDIF bootstrap +]r=`${PWD_COMMAND}`; export r; \\\n \ts=`cd $(srcdir); ${PWD_COMMAND}`; export s; \\\n \t[+exports+] \\\n@@ -806,7 +839,7 @@ all-[+prefix+][+module+]: configure-[+prefix+][+module+]\n .PHONY: clean-stage[+id+]-[+prefix+][+module+] maybe-clean-stage[+id+]-[+prefix+][+module+]\n maybe-all-stage[+id+]-[+prefix+][+module+]:\n maybe-clean-stage[+id+]-[+prefix+][+module+]:\n-@if [+module+]-bootstrap\n+@if [+prefix+][+module+]-bootstrap\n maybe-all-stage[+id+]-[+prefix+][+module+]: all-stage[+id+]-[+prefix+][+module+]\n all-stage[+id+]: all-stage[+id+]-[+prefix+][+module+]\n TARGET-stage[+id+]-[+prefix+][+module+] = $(TARGET-[+prefix+][+module+])\n@@ -832,7 +865,7 @@ clean-stage[+id+]-[+prefix+][+module+]:\n \t$(MAKE) [+args+] [+ IF prev +] \\\n \t\t[+poststage1_args+] [+ ENDIF prev +] \\\n \t\t[+stage_make_flags+] [+extra_make_flags+] clean\n-@endif [+module+]-bootstrap\n+@endif [+prefix+][+module+]-bootstrap\n \n [+ ENDFOR bootstrap_stage +]\n [+ ENDIF bootstrap +]\n@@ -872,7 +905,7 @@ check-[+module+]:\n [+ ELIF no_check_cross +]\n # This module is only tested in a native toolchain.\n check-[+module+]:\n-\t@$(unstage)\n+\t@: $(MAKE); $(unstage)\n \t@if [ '$(host)' = '$(target)' ] ; then \\\n \t  r=`${PWD_COMMAND}`; export r; \\\n \t  s=`cd $(srcdir); ${PWD_COMMAND}`; export s; \\\n@@ -882,7 +915,7 @@ check-[+module+]:\n \tfi\n [+ ELSE check +]\n check-[+module+]:\n-\t@$(unstage)\n+\t@: $(MAKE); $(unstage)\n \t@r=`${PWD_COMMAND}`; export r; \\\n \ts=`cd $(srcdir); ${PWD_COMMAND}`; export s; \\\n \t$(HOST_EXPORTS) \\\n@@ -899,7 +932,7 @@ maybe-install-[+module+]: install-[+module+]\n install-[+module+]:\n [+ ELSE install +]\n install-[+module+]: installdirs\n-\t@$(unstage)\n+\t@: $(MAKE); $(unstage)\n \t@r=`${PWD_COMMAND}`; export r; \\\n \ts=`cd $(srcdir); ${PWD_COMMAND}`; export s; \\\n \t$(HOST_EXPORTS) \\\n@@ -922,7 +955,7 @@ maybe-[+make_target+]-[+module+]: [+make_target+]-[+module+]\n   FOR depend +]\\\n     [+depend+]-[+module+] [+\n   ENDFOR depend +]\n-\t@[+ IF bootstrap +][+ ELSE +]$(unstage)\n+\t@[+ IF bootstrap +][+ ELSE +]: $(MAKE); $(unstage)\n \t@[+ ENDIF bootstrap +][ -f ./[+module+]/Makefile ] || exit 0; \\\n \tr=`${PWD_COMMAND}`; export r; \\\n \ts=`cd $(srcdir); ${PWD_COMMAND}`; export s; \\\n@@ -948,17 +981,9 @@ maybe-[+make_target+]-[+module+]: [+make_target+]-[+module+]\n # ---------------------------------------\n [+ FOR target_modules +]\n \n-# There's only one multilib.out.  Cleverer subdirs shouldn't need it copied.\n-@if target-[+module+]\n-$(TARGET_SUBDIR)/[+module+]/multilib.out: multilib.out\n-\t$(SHELL) $(srcdir)/mkinstalldirs $(TARGET_SUBDIR)/[+module+] ; \\\n-\trm -f $(TARGET_SUBDIR)/[+module+]/Makefile || : ; \\\n-\tcp multilib.out $(TARGET_SUBDIR)/[+module+]/multilib.out\n-@endif target-[+module+]\n-\n [+ IF raw_cxx +]\n [+ configure prefix=\"target-\" subdir=\"$(TARGET_SUBDIR)\"\n-\t     deps=(string-append \"$(TARGET_SUBDIR)/\" (get \"module\") \"/multilib.out\")\n+\t     check_multilibs=true\n \t     exports=\"$(RAW_CXX_TARGET_EXPORTS)\"\n \t     args=\"$(TARGET_CONFIGARGS)\" no-config-site=true +]\n \n@@ -967,7 +992,7 @@ $(TARGET_SUBDIR)/[+module+]/multilib.out: multilib.out\n        args=\"$(TARGET_FLAGS_TO_PASS) 'CXX=$$(RAW_CXX_FOR_TARGET)' 'CXX_FOR_TARGET=$$(RAW_CXX_FOR_TARGET)'\" +]\n [+ ELSE +]\n [+ configure prefix=\"target-\" subdir=\"$(TARGET_SUBDIR)\"\n-\t     deps=(string-append \"$(TARGET_SUBDIR)/\" (get \"module\") \"/multilib.out\")\n+\t     check_multilibs=true\n \t     exports=\"$(NORMAL_TARGET_EXPORTS)\"\n \t     args=\"$(TARGET_CONFIGARGS)\" no-config-site=true +]\n \n@@ -985,7 +1010,7 @@ maybe-check-target-[+module+]: check-target-[+module+]\n check-target-[+module+]:\n [+ ELSE check +]\n check-target-[+module+]:\n-\t@$(unstage)\n+\t@: $(MAKE); $(unstage)\n \t@r=`${PWD_COMMAND}`; export r; \\\n \ts=`cd $(srcdir); ${PWD_COMMAND}`; export s; \\[+\n IF raw_cxx +]\n@@ -1011,7 +1036,7 @@ maybe-install-target-[+module+]: install-target-[+module+]\n install-target-[+module+]:\n [+ ELSE install +]\n install-target-[+module+]: installdirs\n-\t@$(unstage)\n+\t@: $(MAKE); $(unstage)\n \t@r=`${PWD_COMMAND}`; export r; \\\n \ts=`cd $(srcdir); ${PWD_COMMAND}`; export s; \\[+\n IF raw_cxx +]\n@@ -1038,7 +1063,7 @@ maybe-[+make_target+]-target-[+module+]: [+make_target+]-target-[+module+]\n   FOR depend +]\\\n     [+depend+]-target-[+module+] [+\n   ENDFOR depend +]\n-\t@$(unstage)\n+\t@: $(MAKE); $(unstage)\n \t@[ -f $(TARGET_SUBDIR)/[+module+]/Makefile ] || exit 0 ; \\\n \tr=`${PWD_COMMAND}`; export r; \\\n \ts=`cd $(srcdir); ${PWD_COMMAND}`; export s; \\[+\n@@ -1181,8 +1206,10 @@ gcc-no-fixedincludes:\n # are dummy when toplevel bootstrap is not active.\n \n # While making host and target tools, symlinks to the final stage must be\n-# there, so $(MAKE) $(unstage) should be run at various points.  To avoid\n-# excessive recursive invocations of make, we \"inline\" them using a variable.\n+# there, so $(unstage) should be run at various points.  To avoid excessive\n+# recursive invocations of make, we \"inline\" them using a variable.  These\n+# must be referenced as \": $(MAKE) ; $(unstage)\" rather than \"$(unstage)\"\n+# to avoid warnings from the GNU Make job server.\n \n unstage = :\n stage = :\n@@ -1194,16 +1221,16 @@ stage = [ -f stage_current ] && $(MAKE) `cat stage_current`-end || :\n \n .PHONY: unstage stage\n unstage:\n-\t@$(unstage)\n+\t@: $(MAKE); $(unstage)\n stage:\n-\t@$(stage)\n+\t@: $(MAKE); $(stage)\n \n # We name the build directories for the various stages \"stage1-gcc\",\n # \"stage2-gcc\",\"stage3-gcc\", etc.\n \n # Since the 'compare' process will fail (on debugging information) if any\n # directory names are different, we need to link the gcc directory for\n-# the previous stage to a constant name ('gcc-prev'), and to make the name of\n+# the previous stage to a constant name ('prev-gcc'), and to make the name of\n # the build directories constant as well. For the latter, we use naked names\n # like 'gcc', because the scripts in that directory assume it.  We use\n # mv on platforms where symlinks to directories do not work or are not\n@@ -1244,10 +1271,10 @@ POSTSTAGE1_FLAGS_TO_PASS = \\\n .PHONY: stage[+id+]-start stage[+id+]-end\n \n stage[+id+]-start::\n-\t@$(stage); \\\n+\t@: $(MAKE); $(stage); \\\n \techo stage[+id+] > stage_current ; \\\n \techo stage[+id+] > stage_last; \\\n-\t$(SHELL) $(srcdir)/mkinstalldirs $(HOST_SUBDIR) $(TARGET_SUBDIR)[+\n+\t$(SHELL) $(srcdir)/mkinstalldirs $(HOST_SUBDIR)[+\n    FOR host_modules +][+ IF bootstrap +]\n @if [+ module +]\n \t@cd $(HOST_SUBDIR); [ -d stage[+id+]-[+module+] ] || \\\n@@ -1256,36 +1283,34 @@ stage[+id+]-start::\n \t@CREATE_LINK_TO_DIR@ [+ IF prev +] ; \\\n \tset stage[+prev+]-[+module+] prev-[+module+] ; \\\n \t@CREATE_LINK_TO_DIR@ [+ ENDIF prev +]\n-@endif [+ module +][+ ENDIF bootstrap +][+ ENDFOR host_modules +][+\n-   FOR target_modules +][+ IF bootstrap +]\n-@if target-[+ module +]\n-\t@cd $(TARGET_SUBDIR); [ -d stage[+id+]-[+module+] ] || \\\n-\t  mkdir stage[+id+]-[+module+]; \\\n-\tset stage[+id+]-[+module+] [+module+] ; \\\n+@endif [+ module +][+ ENDIF bootstrap +][+ ENDFOR host_modules +]\n+\t@[ -d stage[+id+]-$(TARGET_SUBDIR) ] || \\\n+\t  mkdir stage[+id+]-$(TARGET_SUBDIR); \\\n+\tset stage[+id+]-$(TARGET_SUBDIR) $(TARGET_SUBDIR) ; \\\n \t@CREATE_LINK_TO_DIR@ [+ IF prev +] ; \\\n-\tset stage[+prev+]-[+module+] prev-[+module+] ; \\\n+\tset stage[+prev+]-$(TARGET_SUBDIR) prev-$(TARGET_SUBDIR) ; \\\n \t@CREATE_LINK_TO_DIR@ [+ ENDIF prev +]\n-@endif target-[+ module +][+ ENDIF bootstrap +][+ ENDFOR target_modules +]\n \n stage[+id+]-end::\n \t@rm -f stage_current[+ FOR host_modules +][+ IF bootstrap +]\n @if [+ module +]\n-\t@cd $(HOST_SUBDIR); set [+module+] stage[+id+]-[+module+] ; \\\n-\t@UNDO_LINK_TO_DIR@ [+ IF prev +] ; \\\n-\tset prev-[+module+] stage[+prev+]-[+module+] ; \\\n-\t@UNDO_LINK_TO_DIR@ [+ ENDIF prev +]\n-@endif [+ module +][+ ENDIF bootstrap +][+ ENDFOR host_modules +][+\n-   FOR target_modules +][+ IF bootstrap +]\n-@if target-[+ module +]\n-\t@cd $(HOST_SUBDIR); set [+module+] stage[+id+]-[+module+] ; \\\n+\t@if test -d $(HOST_SUBDIR) ; then \\\n+\tcd $(HOST_SUBDIR); set [+module+] stage[+id+]-[+module+] ; \\\n \t@UNDO_LINK_TO_DIR@ [+ IF prev +] ; \\\n \tset prev-[+module+] stage[+prev+]-[+module+] ; \\\n-\t@UNDO_LINK_TO_DIR@ [+ ENDIF prev +]\n-@endif [+ module +][+ ENDIF bootstrap +][+ ENDFOR target_modules +]\n+\t@UNDO_LINK_TO_DIR@ [+ ENDIF prev +] ; \\\n+\tfi\n+@endif [+ module +][+ ENDIF bootstrap +][+ ENDFOR host_modules +]\n+\t@if test -d $(TARGET_SUBDIR) ; then \\\n+\t  set $(TARGET_SUBDIR) stage[+id+]-$(TARGET_SUBDIR) ; \\\n+\t  @UNDO_LINK_TO_DIR@ [+ IF prev +] ; \\\n+\t  set prev-$(TARGET_SUBDIR) stage[+prev+]-$(TARGET_SUBDIR) ; \\\n+\t  @UNDO_LINK_TO_DIR@ [+ ENDIF prev +] ; \\\n+\tfi\n \n-# Bubble a bugfix through all the stages up to stage [+id+].  They\n-# are remade, but not reconfigured.  The next stage (if any) will not\n-# be reconfigured as well.\n+# Bubble a bugfix through all the stages up to stage [+id+].  They are\n+# remade, but not reconfigured.  The next stage (if any) will not be\n+# reconfigured as well.\n .PHONY: stage[+id+]-bubble\n stage[+id+]-bubble:: [+ IF prev +]stage[+prev+]-bubble[+ ENDIF +][+IF lean +]\n \t@bootstrap_lean@-rm -rf stage[+lean+]-* ; $(STAMP) stage[+lean+]-lean[+ ENDIF lean +]\n@@ -1314,7 +1339,7 @@ do-clean: clean-stage[+id+]\n \t  echo Cannot compare object files as stage [+prev+] was deleted. ; \\\n \t  exit 0 ; \\\n \tfi; \\\n-\t$(stage); \\\n+\t: $(MAKE); $(stage); \\\n \trm -f .bad_compare ; \\\n \tcd stage[+id+]-gcc; \\\n \tfiles=`find . -name \"*$(objext)\" -print` ; \\\n@@ -1349,18 +1374,18 @@ do-clean: clean-stage[+id+]\n \t@r=`${PWD_COMMAND}`; export r; \\\n \ts=`cd $(srcdir); ${PWD_COMMAND}`; export s; \\\n \t$(MAKE) $(RECURSE_FLAGS_TO_PASS) stage[+id+]-bubble\n-\t@$(unstage)\n+\t@: $(MAKE); $(unstage)\n \t@r=`${PWD_COMMAND}`; export r; \\\n \ts=`cd $(srcdir); ${PWD_COMMAND}`; export s; \\\n \t$(MAKE) $(TARGET_FLAGS_TO_PASS) all-host all-target\n-\t@$(stage)\n+\t@: $(MAKE); $(stage)\n [+ ENDIF bootstrap-target +]\n \n # Rules to wipe a stage and all the following ones, also used for cleanstrap\n [+ IF prev +]distclean-stage[+prev+]:: distclean-stage[+id+] [+ ENDIF prev +]\n .PHONY: distclean-stage[+id+]\n distclean-stage[+id+]::\n-\t@$(stage)\n+\t@: $(MAKE); $(stage)\n \trm -rf stage[+id+]-* [+\n \t  IF compare-target +][+compare-target+] [+ ENDIF compare-target +]\n \n@@ -1529,17 +1554,6 @@ install-gdb: $(INSTALL_GDB_TK)\n # Regenerating top level configury\n # --------------------------------\n \n-# Multilib.out tells target dirs what multilibs they should build.\n-# There is really only one copy.  We use the 'timestamp' method to\n-# work around various timestamp bugs on some systems.\n-# We use move-if-change so that it's only considered updated when it\n-# actually changes, because it has to depend on a phony target.\n-multilib.out: maybe-all-gcc\n-\t@r=`${PWD_COMMAND}`; export r; \\\n-\techo \"Checking multilib configuration...\"; \\\n-\t$(CC_FOR_TARGET) --print-multi-lib > multilib.tmp 2> /dev/null ; \\\n-\t$(SHELL) $(srcdir)/move-if-change multilib.tmp multilib.out ; \\\n-\n # Rebuilding Makefile.in, using autogen.\n AUTOGEN = autogen\n $(srcdir)/Makefile.in: @MAINT@ $(srcdir)/Makefile.tpl $(srcdir)/Makefile.def"}]}