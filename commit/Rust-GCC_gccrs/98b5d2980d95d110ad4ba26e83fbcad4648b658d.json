{"sha": "98b5d2980d95d110ad4ba26e83fbcad4648b658d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OThiNWQyOTgwZDk1ZDExMGFkNGJhMjZlODNmYmNhZDQ2NDhiNjU4ZA==", "commit": {"author": {"name": "Hristian Kirtchev", "email": "kirtchev@adacore.com", "date": "2014-01-29T16:10:44Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2014-01-29T16:10:44Z"}, "message": "sem_prag.adb (Check_Missing_Part_Of): List all values of State_Space_Kind for readability reasons.\n\n2014-01-29  Hristian Kirtchev  <kirtchev@adacore.com>\n\n\t* sem_prag.adb (Check_Missing_Part_Of): List all values of\n\tState_Space_Kind for readability reasons. Do not emit an error on\n\ta private item when the enclosing package lacks aspect/pragma\n\tAbstract_State. Do not emit an error on a private package\n\tinstantiation when the corresponding generic template lacks\n\tvisible state.\n\t(Has_Visible_State): New routine.\n\t* sem_util.adb (Find_Placement_In_State_Space): The visible\n\tdeclarations of any kind of child units in general act as proper\n\tplacement location.\n\nFrom-SVN: r207261", "tree": {"sha": "af4a881761c68480af7fb1a8c49e5745554eaf6e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/af4a881761c68480af7fb1a8c49e5745554eaf6e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/98b5d2980d95d110ad4ba26e83fbcad4648b658d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/98b5d2980d95d110ad4ba26e83fbcad4648b658d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/98b5d2980d95d110ad4ba26e83fbcad4648b658d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/98b5d2980d95d110ad4ba26e83fbcad4648b658d/comments", "author": {"login": "kirtchev-adacore", "id": 60669983, "node_id": "MDQ6VXNlcjYwNjY5OTgz", "avatar_url": "https://avatars.githubusercontent.com/u/60669983?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kirtchev-adacore", "html_url": "https://github.com/kirtchev-adacore", "followers_url": "https://api.github.com/users/kirtchev-adacore/followers", "following_url": "https://api.github.com/users/kirtchev-adacore/following{/other_user}", "gists_url": "https://api.github.com/users/kirtchev-adacore/gists{/gist_id}", "starred_url": "https://api.github.com/users/kirtchev-adacore/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kirtchev-adacore/subscriptions", "organizations_url": "https://api.github.com/users/kirtchev-adacore/orgs", "repos_url": "https://api.github.com/users/kirtchev-adacore/repos", "events_url": "https://api.github.com/users/kirtchev-adacore/events{/privacy}", "received_events_url": "https://api.github.com/users/kirtchev-adacore/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "a90bd866a9726aa68ea89f83e84376d7098b0b2d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a90bd866a9726aa68ea89f83e84376d7098b0b2d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a90bd866a9726aa68ea89f83e84376d7098b0b2d"}], "stats": {"total": 138, "additions": 118, "deletions": 20}, "files": [{"sha": "0f3117977d60b079038448e5eb923a2c32e632a5", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/98b5d2980d95d110ad4ba26e83fbcad4648b658d/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/98b5d2980d95d110ad4ba26e83fbcad4648b658d/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=98b5d2980d95d110ad4ba26e83fbcad4648b658d", "patch": "@@ -1,3 +1,16 @@\n+2014-01-29  Hristian Kirtchev  <kirtchev@adacore.com>\n+\n+\t* sem_prag.adb (Check_Missing_Part_Of): List all values of\n+\tState_Space_Kind for readability reasons. Do not emit an error on\n+\ta private item when the enclosing package lacks aspect/pragma\n+\tAbstract_State. Do not emit an error on a private package\n+\tinstantiation when the corresponding generic template lacks\n+\tvisible state.\n+\t(Has_Visible_State): New routine.\n+\t* sem_util.adb (Find_Placement_In_State_Space): The visible\n+\tdeclarations of any kind of child units in general act as proper\n+\tplacement location.\n+\n 2014-01-29  Robert Dewar  <dewar@adacore.com>\n \n \t* a-except-2005.adb, a-except.adb, a-excpol-abort.adb, a-exstat.adb,"}, {"sha": "fbd955b8f93b7a7f2060201e2c8cc2cb81916709", "filename": "gcc/ada/sem_prag.adb", "status": "modified", "additions": 102, "deletions": 15, "changes": 117, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/98b5d2980d95d110ad4ba26e83fbcad4648b658d/gcc%2Fada%2Fsem_prag.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/98b5d2980d95d110ad4ba26e83fbcad4648b658d/gcc%2Fada%2Fsem_prag.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_prag.adb?ref=98b5d2980d95d110ad4ba26e83fbcad4648b658d", "patch": "@@ -23732,9 +23732,57 @@ package body Sem_Prag is\n    ---------------------------\n \n    procedure Check_Missing_Part_Of (Item_Id : Entity_Id) is\n+      function Has_Visible_State (Pack_Id : Entity_Id) return Boolean;\n+      --  Determine whether a package denoted by Pack_Id declares at least one\n+      --  visible state.\n+\n+      -----------------------\n+      -- Has_Visible_State --\n+      -----------------------\n+\n+      function Has_Visible_State (Pack_Id : Entity_Id) return Boolean is\n+         Item_Id : Entity_Id;\n+\n+      begin\n+         --  Traverse the entity chain of the package trying to find at least\n+         --  one visible abstract state, variable or a package [instantiation]\n+         --  that declares a visible state.\n+\n+         Item_Id := First_Entity (Pack_Id);\n+         while Present (Item_Id)\n+           and then not In_Private_Part (Item_Id)\n+         loop\n+            --  Do not consider internally generated items\n+\n+            if not Comes_From_Source (Item_Id) then\n+               null;\n+\n+            --  A visible state has been found\n+\n+            elsif Ekind_In (Item_Id, E_Abstract_State, E_Variable) then\n+               return True;\n+\n+            --  Recursively peek into nested packages and instantiations\n+\n+            elsif Ekind (Item_Id) = E_Package\n+              and then Has_Visible_State (Item_Id)\n+            then\n+               return True;\n+            end if;\n+\n+            Next_Entity (Item_Id);\n+         end loop;\n+\n+         return False;\n+      end Has_Visible_State;\n+\n+      --  Local variables\n+\n       Pack_Id   : Entity_Id;\n       Placement : State_Space_Kind;\n \n+   --  Start of processing for Check_Missing_Part_Of\n+\n    begin\n       --  Do not consider internally generated entities as these can never\n       --  have a Part_Of indicator.\n@@ -23761,37 +23809,76 @@ package body Sem_Prag is\n       --  do not require a Part_Of indicator because they can never act as a\n       --  hidden state.\n \n+      if Placement = Not_In_Package then\n+         null;\n+\n       --  An item declared in the body state space of a package always act as a\n       --  constituent and does not need explicit Part_Of indicator.\n \n+      elsif Placement = Body_State_Space then\n+         null;\n+\n       --  In general an item declared in the visible state space of a package\n       --  does not require a Part_Of indicator. The only exception is when the\n       --  related package is a private child unit in which case Part_Of must\n       --  denote a state in the parent unit or in one of its descendants.\n \n-      if Placement = Visible_State_Space then\n+      elsif Placement = Visible_State_Space then\n          if Is_Child_Unit (Pack_Id)\n            and then Is_Private_Descendant (Pack_Id)\n          then\n-            Error_Msg_N\n-              (\"indicator Part_Of is required in this context (SPARK RM \"\n-               & \"7.2.6(3))\", Item_Id);\n-            Error_Msg_Name_1 := Chars (Pack_Id);\n-            Error_Msg_N\n-              (\"\\& is declared in the visible part of private child unit %\",\n-               Item_Id);\n+            --  A package instantiation does not need a Part_Of indicator when\n+            --  the related generic template has no visible state.\n+\n+            if Ekind (Item_Id) = E_Package\n+              and then Is_Generic_Instance (Item_Id)\n+              and then not Has_Visible_State (Item_Id)\n+            then\n+               null;\n+\n+            --  All other cases require Part_Of\n+\n+            else\n+               Error_Msg_N\n+                 (\"indicator Part_Of is required in this context (SPARK RM \"\n+                  & \"7.2.6(3))\", Item_Id);\n+               Error_Msg_Name_1 := Chars (Pack_Id);\n+               Error_Msg_N\n+                 (\"\\& is declared in the visible part of private child unit %\",\n+                  Item_Id);\n+            end if;\n          end if;\n \n       --  When the item appears in the private state space of a packge, it must\n       --  be a part of some state declared by the said package.\n \n-      elsif Placement = Private_State_Space then\n-         Error_Msg_N\n-           (\"indicator Part_Of is required in this context (SPARK RM \"\n-            & \"7.2.6(2))\", Item_Id);\n-         Error_Msg_Name_1 := Chars (Pack_Id);\n-         Error_Msg_N\n-           (\"\\& is declared in the private part of package %\", Item_Id);\n+      else pragma Assert (Placement = Private_State_Space);\n+\n+         --  The related package does not declare a state, the item cannot act\n+         --  as a Part_Of constituent.\n+\n+         if No (Get_Pragma (Pack_Id, Pragma_Abstract_State)) then\n+            null;\n+\n+         --  A package instantiation does not need a Part_Of indicator when the\n+         --  related generic template has no visible state.\n+\n+         elsif Ekind (Pack_Id) = E_Package\n+           and then Is_Generic_Instance (Pack_Id)\n+           and then not Has_Visible_State (Pack_Id)\n+         then\n+            null;\n+\n+         --  All other cases require Part_Of\n+\n+         else\n+            Error_Msg_N\n+              (\"indicator Part_Of is required in this context (SPARK RM \"\n+               & \"7.2.6(2))\", Item_Id);\n+            Error_Msg_Name_1 := Chars (Pack_Id);\n+            Error_Msg_N\n+              (\"\\& is declared in the private part of package %\", Item_Id);\n+         end if;\n       end if;\n    end Check_Missing_Part_Of;\n "}, {"sha": "e6b3233fb537daad82a32293269e845da7272807", "filename": "gcc/ada/sem_util.adb", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/98b5d2980d95d110ad4ba26e83fbcad4648b658d/gcc%2Fada%2Fsem_util.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/98b5d2980d95d110ad4ba26e83fbcad4648b658d/gcc%2Fada%2Fsem_util.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_util.adb?ref=98b5d2980d95d110ad4ba26e83fbcad4648b658d", "patch": "@@ -5884,12 +5884,10 @@ package body Sem_Util is\n             else\n                Placement := Visible_State_Space;\n \n-               --  The visible state space of a private child unit acts as the\n-               --  proper placement of an item.\n+               --  The visible state space of a child unit acts as the proper\n+               --  placement of an item.\n \n-               if Is_Child_Unit (Context)\n-                 and then Is_Private_Descendant (Context)\n-               then\n+               if Is_Child_Unit (Context) then\n                   return;\n                end if;\n             end if;"}]}