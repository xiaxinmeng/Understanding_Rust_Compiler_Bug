{"sha": "547101fb67fb77fb069acd04669e18f6d4684c9f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTQ3MTAxZmI2N2ZiNzdmYjA2OWFjZDA0NjY5ZTE4ZjZkNDY4NGM5Zg==", "commit": {"author": {"name": "Joseph Myers", "email": "joseph@codesourcery.com", "date": "2013-11-20T14:34:49Z"}, "committer": {"name": "Joseph Myers", "email": "jsm28@gcc.gnu.org", "date": "2013-11-20T14:34:49Z"}, "message": "re PR middle-end/21718 (real.c rounding not perfect)\n\n\tPR middle-end/21718\n\t* real.c: Remove comment about decimal string conversion and\n\trounding errors.\n\t(real_from_string): Use MPFR to convert nonzero decimal constant\n\tto REAL_VALUE_TYPE.\n\ntestsuite:\n\t* gcc.dg/float-exact-1.c: New test.\n\nFrom-SVN: r205119", "tree": {"sha": "64d27856340cb565d13242792a5eae7e1907b9f4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/64d27856340cb565d13242792a5eae7e1907b9f4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/547101fb67fb77fb069acd04669e18f6d4684c9f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/547101fb67fb77fb069acd04669e18f6d4684c9f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/547101fb67fb77fb069acd04669e18f6d4684c9f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/547101fb67fb77fb069acd04669e18f6d4684c9f/comments", "author": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "74e25e34f85cc0a274cc82fd572ea62f619f8ccf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/74e25e34f85cc0a274cc82fd572ea62f619f8ccf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/74e25e34f85cc0a274cc82fd572ea62f619f8ccf"}], "stats": {"total": 3294, "additions": 3226, "deletions": 68}, "files": [{"sha": "2ffc36a1edd01470388540147f85652f1b8b2347", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/547101fb67fb77fb069acd04669e18f6d4684c9f/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/547101fb67fb77fb069acd04669e18f6d4684c9f/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=547101fb67fb77fb069acd04669e18f6d4684c9f", "patch": "@@ -1,3 +1,11 @@\n+2013-11-20  Joseph Myers  <joseph@codesourcery.com>\n+\n+\tPR middle-end/21718\n+\t* real.c: Remove comment about decimal string conversion and\n+\trounding errors.\n+\t(real_from_string): Use MPFR to convert nonzero decimal constant\n+\tto REAL_VALUE_TYPE.\n+\n 2013-11-20  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* config/arm/arm.c (arm_dwarf_register_span): Take into account the"}, {"sha": "82f3ba61c10b57f209557ebe6b49cf87827d8b05", "filename": "gcc/real.c", "status": "modified", "additions": 36, "deletions": 68, "changes": 104, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/547101fb67fb77fb069acd04669e18f6d4684c9f/gcc%2Freal.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/547101fb67fb77fb069acd04669e18f6d4684c9f/gcc%2Freal.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Freal.c?ref=547101fb67fb77fb069acd04669e18f6d4684c9f", "patch": "@@ -57,14 +57,7 @@\n \n    Both of these requirements are easily satisfied.  The largest target\n    significand is 113 bits; we store at least 160.  The smallest\n-   denormal number fits in 17 exponent bits; we store 26.\n-\n-   Note that the decimal string conversion routines are sensitive to\n-   rounding errors.  Since the raw arithmetic routines do not themselves\n-   have guard digits or rounding, the computation of 10**exp can\n-   accumulate more than a few digits of error.  The previous incarnation\n-   of real.c successfully used a 144-bit fraction; given the current\n-   layout of REAL_VALUE_TYPE we're forced to expand to at least 160 bits.  */\n+   denormal number fits in 17 exponent bits; we store 26.  */\n \n \n /* Used to classify two numbers simultaneously.  */\n@@ -2029,75 +2022,50 @@ real_from_string (REAL_VALUE_TYPE *r, const char *str)\n   else\n     {\n       /* Decimal floating point.  */\n-      const REAL_VALUE_TYPE *ten = ten_to_ptwo (0);\n-      int d;\n+      const char *cstr = str;\n+      mpfr_t m;\n+      bool inexact;\n \n-      while (*str == '0')\n-\tstr++;\n-      while (ISDIGIT (*str))\n+      while (*cstr == '0')\n+\tcstr++;\n+      if (*cstr == '.')\n \t{\n-\t  d = *str++ - '0';\n-\t  do_multiply (r, r, ten);\n-\t  if (d)\n-\t    do_add (r, r, real_digit (d), 0);\n-\t}\n-      if (*str == '.')\n-\t{\n-\t  str++;\n-\t  if (r->cl == rvc_zero)\n-\t    {\n-\t      while (*str == '0')\n-\t\tstr++, exp--;\n-\t    }\n-\t  while (ISDIGIT (*str))\n-\t    {\n-\t      d = *str++ - '0';\n-\t      do_multiply (r, r, ten);\n-\t      if (d)\n-\t        do_add (r, r, real_digit (d), 0);\n-\t      exp--;\n-\t    }\n+\t  cstr++;\n+\t  while (*cstr == '0')\n+\t    cstr++;\n \t}\n \n       /* If the mantissa is zero, ignore the exponent.  */\n-      if (r->cl == rvc_zero)\n+      if (!ISDIGIT (*cstr))\n \tgoto is_a_zero;\n \n-      if (*str == 'e' || *str == 'E')\n+      /* Nonzero value, possibly overflowing or underflowing.  */\n+      mpfr_init2 (m, SIGNIFICAND_BITS);\n+      inexact = mpfr_strtofr (m, str, NULL, 10, GMP_RNDZ);\n+      /* The result should never be a NaN, and because the rounding is\n+\t toward zero should never be an infinity.  */\n+      gcc_assert (!mpfr_nan_p (m) && !mpfr_inf_p (m));\n+      if (mpfr_zero_p (m) || mpfr_get_exp (m) < -MAX_EXP + 4)\n \t{\n-\t  bool exp_neg = false;\n-\n-\t  str++;\n-\t  if (*str == '-')\n-\t    {\n-\t      exp_neg = true;\n-\t      str++;\n-\t    }\n-\t  else if (*str == '+')\n-\t    str++;\n-\n-\t  d = 0;\n-\t  while (ISDIGIT (*str))\n-\t    {\n-\t      d *= 10;\n-\t      d += *str - '0';\n-\t      if (d > MAX_EXP)\n-\t\t{\n-\t\t  /* Overflowed the exponent.  */\n-\t\t  if (exp_neg)\n-\t\t    goto underflow;\n-\t\t  else\n-\t\t    goto overflow;\n-\t\t}\n-\t      str++;\n-\t    }\n-\t  if (exp_neg)\n-\t    d = -d;\n-\t  exp += d;\n+\t  mpfr_clear (m);\n+\t  goto underflow;\n+\t}\n+      else if (mpfr_get_exp (m) > MAX_EXP - 4)\n+\t{\n+\t  mpfr_clear (m);\n+\t  goto overflow;\n+\t}\n+      else\n+\t{\n+\t  real_from_mpfr (r, m, NULL_TREE, GMP_RNDZ);\n+\t  /* 1 to 3 bits may have been shifted off (with a sticky bit)\n+\t     because the hex digits used in real_from_mpfr did not\n+\t     start with a digit 8 to f, but the exponent bounds above\n+\t     should have avoided underflow or overflow.  */\n+\t  gcc_assert (r->cl = rvc_normal);\n+\t  /* Set a sticky bit if mpfr_strtofr was inexact.  */\n+\t  r->sig[0] |= inexact;\n \t}\n-\n-      if (exp)\n-\ttimes_pten (r, exp);\n     }\n \n   r->sign = sign;"}, {"sha": "a172098f56686b497ae92d1248421bc51aa3c5e8", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/547101fb67fb77fb069acd04669e18f6d4684c9f/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/547101fb67fb77fb069acd04669e18f6d4684c9f/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=547101fb67fb77fb069acd04669e18f6d4684c9f", "patch": "@@ -1,3 +1,8 @@\n+2013-11-20  Joseph Myers  <joseph@codesourcery.com>\n+\n+\tPR middle-end/21718\n+\t* gcc.dg/float-exact-1.c: New test.\n+\n 2013-11-20  Richard Earnshaw  <rearnsha@arm.com>\n \n \tPR rtl-optimization/54300"}, {"sha": "7e8f3f153ae6be7d9efd97fec97c51dc6142e29e", "filename": "gcc/testsuite/gcc.dg/float-exact-1.c", "status": "added", "additions": 3177, "deletions": 0, "changes": 3177, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/547101fb67fb77fb069acd04669e18f6d4684c9f/gcc%2Ftestsuite%2Fgcc.dg%2Ffloat-exact-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/547101fb67fb77fb069acd04669e18f6d4684c9f/gcc%2Ftestsuite%2Fgcc.dg%2Ffloat-exact-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ffloat-exact-1.c?ref=547101fb67fb77fb069acd04669e18f6d4684c9f"}]}