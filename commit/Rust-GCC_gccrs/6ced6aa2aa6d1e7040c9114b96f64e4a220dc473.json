{"sha": "6ced6aa2aa6d1e7040c9114b96f64e4a220dc473", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmNlZDZhYTJhYTZkMWU3MDQwYzkxMTRiOTZmNjRlNGEyMjBkYzQ3Mw==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2015-01-06T10:03:43Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2015-01-06T10:03:43Z"}, "message": "einfo.ads (Is_Independent): Document extended usage.\n\n2015-01-06  Eric Botcazou  <ebotcazou@adacore.com>\n\n\t* einfo.ads (Is_Independent): Document extended usage.\n\t* einfo.adb (Is_Independent): Remove obsolete assertion.\n\t(Set_Is_Independent): Likewise.\n\t* sem_prag.adb (Process_Atomic_Shared_Volatile): Rename into...\n\t(Process_Atomic_Independent_Shared_Volatile): ...this.\n\tDeal with pragma Independent here.\n\t(Analyze_Pragma): Adjust\n\tto above renaming and also invoke it for pragma Independent.\n\tAdjust comment for Independent_Components.\n\nFrom-SVN: r219245", "tree": {"sha": "04c8ffd6bf12732cbbdff334b5671a16613c2d02", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/04c8ffd6bf12732cbbdff334b5671a16613c2d02"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6ced6aa2aa6d1e7040c9114b96f64e4a220dc473", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6ced6aa2aa6d1e7040c9114b96f64e4a220dc473", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6ced6aa2aa6d1e7040c9114b96f64e4a220dc473", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6ced6aa2aa6d1e7040c9114b96f64e4a220dc473/comments", "author": null, "committer": null, "parents": [{"sha": "61ae296d2beb645bd0aed720cf408891d67913d9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/61ae296d2beb645bd0aed720cf408891d67913d9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/61ae296d2beb645bd0aed720cf408891d67913d9"}], "stats": {"total": 145, "additions": 70, "deletions": 75}, "files": [{"sha": "d991649a80fff69e7e3ed11134280c1e7fde80e2", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ced6aa2aa6d1e7040c9114b96f64e4a220dc473/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ced6aa2aa6d1e7040c9114b96f64e4a220dc473/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=6ced6aa2aa6d1e7040c9114b96f64e4a220dc473", "patch": "@@ -1,3 +1,15 @@\n+2015-01-06  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* einfo.ads (Is_Independent): Document extended usage.\n+\t* einfo.adb (Is_Independent): Remove obsolete assertion.\n+\t(Set_Is_Independent): Likewise.\n+\t* sem_prag.adb (Process_Atomic_Shared_Volatile): Rename into...\n+\t(Process_Atomic_Independent_Shared_Volatile): ...this.\n+\tDeal with pragma Independent here.\n+\t(Analyze_Pragma): Adjust\n+\tto above renaming and also invoke it for pragma Independent.\n+\tAdjust comment for Independent_Components.\n+\n 2015-01-06  Robert Dewar  <dewar@adacore.com>\n \n \t* snames.ads-tmpl: Remove entries for attribute Enum_Image."}, {"sha": "c5ff28ef2168402e2d99bbaa931fe918b370cb59", "filename": "gcc/ada/einfo.adb", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ced6aa2aa6d1e7040c9114b96f64e4a220dc473/gcc%2Fada%2Feinfo.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ced6aa2aa6d1e7040c9114b96f64e4a220dc473/gcc%2Fada%2Feinfo.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Feinfo.adb?ref=6ced6aa2aa6d1e7040c9114b96f64e4a220dc473", "patch": "@@ -2117,7 +2117,6 @@ package body Einfo is\n \n    function Is_Independent (Id : E) return B is\n    begin\n-      pragma Assert (Ekind (Id) = E_Component);\n       return Flag268 (Id);\n    end Is_Independent;\n \n@@ -4967,7 +4966,6 @@ package body Einfo is\n \n    procedure Set_Is_Independent (Id : E; V : B := True) is\n    begin\n-      pragma Assert (Ekind_In (Id, E_Component, E_Void));\n       Set_Flag268 (Id, V);\n    end Set_Is_Independent;\n "}, {"sha": "21518e95b84cd04cb0796728acfbfb7146a1da15", "filename": "gcc/ada/einfo.ads", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ced6aa2aa6d1e7040c9114b96f64e4a220dc473/gcc%2Fada%2Feinfo.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ced6aa2aa6d1e7040c9114b96f64e4a220dc473/gcc%2Fada%2Feinfo.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Feinfo.ads?ref=6ced6aa2aa6d1e7040c9114b96f64e4a220dc473", "patch": "@@ -2483,9 +2483,13 @@ package Einfo is\n --       Applies to all entities, true for incomplete types and subtypes\n \n --    Is_Independent (Flag268)\n---       Defined in record components. Set if a valid pragma or aspect\n---       Independent applies to the component, or if a valid pragma or aspect\n---       Independent_Components applies to the enclosing record type.\n+--       Defined in all type entities, and also in constants, components and\n+--       variables. Set if a valid pragma or aspect Independent applies to the\n+--       entity, or if a valid pragma or aspect Independent_Components applies\n+--       to the enclosing record type for a component. Also set if a pragma\n+--       Shared or pragma Atomic applies to the entity. In the case of private\n+--       and incomplete types, this flag is set in both the partial view and\n+--       the full view.\n \n --    Is_Inlined (Flag11)\n --       Defined in all entities. Set for functions and procedures which are"}, {"sha": "d5c1599498d2c52bb536119c9e07716b45406f3e", "filename": "gcc/ada/sem_prag.adb", "status": "modified", "additions": 51, "deletions": 70, "changes": 121, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ced6aa2aa6d1e7040c9114b96f64e4a220dc473/gcc%2Fada%2Fsem_prag.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ced6aa2aa6d1e7040c9114b96f64e4a220dc473/gcc%2Fada%2Fsem_prag.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_prag.adb?ref=6ced6aa2aa6d1e7040c9114b96f64e4a220dc473", "patch": "@@ -3114,10 +3114,10 @@ package body Sem_Prag is\n       pragma No_Return (Pragma_Misplaced);\n       --  Issue fatal error message for misplaced pragma\n \n-      procedure Process_Atomic_Shared_Volatile;\n-      --  Common processing for pragmas Atomic, Shared, Volatile. Note that\n-      --  Shared is an obsolete Ada 83 pragma, treated as being identical\n-      --  in effect to pragma Atomic.\n+      procedure Process_Atomic_Independent_Shared_Volatile;\n+      --  Common processing for pragmas Atomic, Independent, Shared, Volatile.\n+      --  Note that Shared is an obsolete Ada 83 pragma and treated as being\n+      --  identical in effect to pragma Atomic.\n \n       procedure Process_Compile_Time_Warning_Or_Error;\n       --  Common processing for Compile_Time_Error and Compile_Time_Warning\n@@ -6152,11 +6152,11 @@ package body Sem_Prag is\n          Error_Pragma (\"incorrect placement of pragma%\");\n       end Pragma_Misplaced;\n \n-      ------------------------------------\n-      -- Process_Atomic_Shared_Volatile --\n-      ------------------------------------\n+      ------------------------------------------------\n+      -- Process_Atomic_Independent_Shared_Volatile --\n+      ------------------------------------------------\n \n-      procedure Process_Atomic_Shared_Volatile is\n+      procedure Process_Atomic_Independent_Shared_Volatile is\n          E_Id : Node_Id;\n          E    : Entity_Id;\n          D    : Node_Id;\n@@ -6182,7 +6182,7 @@ package body Sem_Prag is\n             end if;\n          end Set_Atomic;\n \n-      --  Start of processing for Process_Atomic_Shared_Volatile\n+      --  Start of processing for Process_Atomic_Independent_Shared_Volatile\n \n       begin\n          Check_Ada_83_Warning;\n@@ -6215,20 +6215,34 @@ package body Sem_Prag is\n                Check_First_Subtype (Arg1);\n             end if;\n \n-            if Prag_Id /= Pragma_Volatile then\n+            if Prag_Id = Pragma_Atomic or else Prag_Id = Pragma_Shared then\n                Set_Atomic (E);\n                Set_Atomic (Underlying_Type (E));\n                Set_Atomic (Base_Type (E));\n             end if;\n \n+            --  Atomic/Shared imply both Independent and Volatile\n+\n+            if Prag_Id /= Pragma_Volatile then\n+               Set_Is_Independent (E);\n+               Set_Is_Independent (Underlying_Type (E));\n+               Set_Is_Independent (Base_Type (E));\n+\n+               if Prag_Id = Pragma_Independent then\n+                  Independence_Checks.Append ((N, Base_Type (E)));\n+               end if;\n+            end if;\n+\n             --  Attribute belongs on the base type. If the view of the type is\n             --  currently private, it also belongs on the underlying type.\n \n-            Set_Is_Volatile (Base_Type (E));\n-            Set_Is_Volatile (Underlying_Type (E));\n+            if Prag_Id /= Pragma_Independent then\n+               Set_Is_Volatile (Base_Type (E));\n+               Set_Is_Volatile (Underlying_Type (E));\n \n-            Set_Treat_As_Volatile (E);\n-            Set_Treat_As_Volatile (Underlying_Type (E));\n+               Set_Treat_As_Volatile (E);\n+               Set_Treat_As_Volatile (Underlying_Type (E));\n+            end if;\n \n          elsif K = N_Object_Declaration\n            or else (K = N_Component_Declaration\n@@ -6238,7 +6252,7 @@ package body Sem_Prag is\n                return;\n             end if;\n \n-            if Prag_Id /= Pragma_Volatile then\n+            if Prag_Id = Pragma_Atomic or else Prag_Id = Pragma_Shared then\n                Set_Is_Atomic (E);\n \n                --  If the object declaration has an explicit initialization, a\n@@ -6284,8 +6298,20 @@ package body Sem_Prag is\n                end if;\n             end if;\n \n-            Set_Is_Volatile (E);\n-            Set_Treat_As_Volatile (E);\n+            --  Atomic/Shared imply both Independent and Volatile\n+\n+            if Prag_Id /= Pragma_Volatile then\n+               Set_Is_Independent (E);\n+\n+               if Prag_Id = Pragma_Independent then\n+                  Independence_Checks.Append ((N, E));\n+               end if;\n+            end if;\n+\n+            if Prag_Id /= Pragma_Independent then\n+               Set_Is_Volatile (E);\n+               Set_Treat_As_Volatile (E);\n+            end if;\n \n          else\n             Error_Pragma_Arg (\"inappropriate entity for pragma%\", Arg1);\n@@ -6305,7 +6331,7 @@ package body Sem_Prag is\n               (\"argument of pragma % must denote a full type or object \"\n                & \"declaration\", Arg1);\n          end if;\n-      end Process_Atomic_Shared_Volatile;\n+      end Process_Atomic_Independent_Shared_Volatile;\n \n       -------------------------------------------\n       -- Process_Compile_Time_Warning_Or_Error --\n@@ -11408,7 +11434,7 @@ package body Sem_Prag is\n          --  pragma Atomic (LOCAL_NAME);\n \n          when Pragma_Atomic =>\n-            Process_Atomic_Shared_Volatile;\n+            Process_Atomic_Independent_Shared_Volatile;\n \n          -----------------------\n          -- Atomic_Components --\n@@ -14903,61 +14929,16 @@ package body Sem_Prag is\n          -- Independent --\n          -----------------\n \n-         --  pragma Independent (record_component_LOCAL_NAME);\n-\n-         when Pragma_Independent => Independent : declare\n-            E_Id : Node_Id;\n-            E    : Entity_Id;\n-\n-         begin\n-            Check_Ada_83_Warning;\n-            Ada_2012_Pragma;\n-            Check_No_Identifiers;\n-            Check_Arg_Count (1);\n-            Check_Arg_Is_Local_Name (Arg1);\n-            E_Id := Get_Pragma_Arg (Arg1);\n-\n-            if Etype (E_Id) = Any_Type then\n-               return;\n-            end if;\n-\n-            E := Entity (E_Id);\n-\n-            --  Check we have a record component. We have not yet setup\n-            --  components fully, so identify by syntactic structure.\n-\n-            if Nkind (Declaration_Node (E)) /= N_Component_Declaration then\n-               Error_Pragma_Arg\n-                 (\"argument for pragma% must be record component\", Arg1);\n-            end if;\n-\n-            --  Check duplicate before we chain ourselves\n-\n-            Check_Duplicate_Pragma (E);\n-\n-            --  Chain pragma\n-\n-            if Rep_Item_Too_Early (E, N)\n-                 or else\n-               Rep_Item_Too_Late (E, N)\n-            then\n-               return;\n-            end if;\n-\n-            --  Set flag in component\n-\n-            Set_Is_Independent (E);\n+         --  pragma Independent (LOCAL_NAME);\n \n-            Independence_Checks.Append ((N, E));\n-         end Independent;\n+         when Pragma_Independent =>\n+            Process_Atomic_Independent_Shared_Volatile;\n \n          ----------------------------\n          -- Independent_Components --\n          ----------------------------\n \n-         --  pragma Atomic_Components (array_LOCAL_NAME);\n-\n-         --  This processing is shared by Volatile_Components\n+         --  pragma Independent_Components (array_or_record_LOCAL_NAME);\n \n          when Pragma_Independent_Components => Independent_Components : declare\n             E_Id : Node_Id;\n@@ -19358,7 +19339,7 @@ package body Sem_Prag is\n \n          when Pragma_Shared =>\n             GNAT_Pragma;\n-            Process_Atomic_Shared_Volatile;\n+            Process_Atomic_Independent_Shared_Volatile;\n \n          --------------------\n          -- Shared_Passive --\n@@ -21239,7 +21220,7 @@ package body Sem_Prag is\n          --  pragma Volatile (LOCAL_NAME);\n \n          when Pragma_Volatile =>\n-            Process_Atomic_Shared_Volatile;\n+            Process_Atomic_Independent_Shared_Volatile;\n \n          -------------------------\n          -- Volatile_Components --"}]}