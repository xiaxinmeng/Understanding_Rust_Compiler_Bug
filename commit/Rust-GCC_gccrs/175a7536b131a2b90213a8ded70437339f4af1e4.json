{"sha": "175a7536b131a2b90213a8ded70437339f4af1e4", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTc1YTc1MzZiMTMxYTJiOTAyMTNhOGRlZDcwNDM3MzM5ZjRhZjFlNA==", "commit": {"author": {"name": "Michael Matz", "email": "matz@suse.de", "date": "2012-06-12T11:52:41Z"}, "committer": {"name": "Michael Matz", "email": "matz@gcc.gnu.org", "date": "2012-06-12T11:52:41Z"}, "message": "alias.c (nonoverlapping_component_refs_p): Take two rtx arguments.\n\n\t* alias.c (nonoverlapping_component_refs_p): Take two rtx arguments.\n\t(nonoverlapping_memrefs_p): Don't call it here ...\n\t(true_dependence_1): ... but here.\n\ntestsuite/\n\t* gcc.dg/torture/alias-1.c: New test.\n\nFrom-SVN: r188448", "tree": {"sha": "08829258d4fe6802e2f465d6ba336e5a409258ca", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/08829258d4fe6802e2f465d6ba336e5a409258ca"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/175a7536b131a2b90213a8ded70437339f4af1e4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/175a7536b131a2b90213a8ded70437339f4af1e4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/175a7536b131a2b90213a8ded70437339f4af1e4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/175a7536b131a2b90213a8ded70437339f4af1e4/comments", "author": {"login": "susematz", "id": 4117296, "node_id": "MDQ6VXNlcjQxMTcyOTY=", "avatar_url": "https://avatars.githubusercontent.com/u/4117296?v=4", "gravatar_id": "", "url": "https://api.github.com/users/susematz", "html_url": "https://github.com/susematz", "followers_url": "https://api.github.com/users/susematz/followers", "following_url": "https://api.github.com/users/susematz/following{/other_user}", "gists_url": "https://api.github.com/users/susematz/gists{/gist_id}", "starred_url": "https://api.github.com/users/susematz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/susematz/subscriptions", "organizations_url": "https://api.github.com/users/susematz/orgs", "repos_url": "https://api.github.com/users/susematz/repos", "events_url": "https://api.github.com/users/susematz/events{/privacy}", "received_events_url": "https://api.github.com/users/susematz/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "d3b00ce368f3d32a4db4dac4538a90920f6365ef", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d3b00ce368f3d32a4db4dac4538a90920f6365ef", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d3b00ce368f3d32a4db4dac4538a90920f6365ef"}], "stats": {"total": 68, "additions": 58, "deletions": 10}, "files": [{"sha": "213703c13dd8abd4f982e4ec68b6642aaa3d97a0", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/175a7536b131a2b90213a8ded70437339f4af1e4/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/175a7536b131a2b90213a8ded70437339f4af1e4/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=175a7536b131a2b90213a8ded70437339f4af1e4", "patch": "@@ -1,3 +1,9 @@\n+2012-06-12  Michael Matz  <matz@suse.de>\n+\n+\t* alias.c (nonoverlapping_component_refs_p): Take two rtx arguments.\n+\t(nonoverlapping_memrefs_p): Don't call it here ...\n+\t(true_dependence_1): ... but here.\n+\n 2012-06-12  Richard Guenther  <rguenther@suse.de>\n \n \t* emit-rtl.c (set_mem_attributes_minus_bitpos): Remove dead code."}, {"sha": "c11b13f3657eefc9c77ddcfc6e71e736e12e3c04", "filename": "gcc/alias.c", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/175a7536b131a2b90213a8ded70437339f4af1e4/gcc%2Falias.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/175a7536b131a2b90213a8ded70437339f4af1e4/gcc%2Falias.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Falias.c?ref=175a7536b131a2b90213a8ded70437339f4af1e4", "patch": "@@ -156,7 +156,7 @@ static rtx find_base_value (rtx);\n static int mems_in_disjoint_alias_sets_p (const_rtx, const_rtx);\n static int insert_subset_children (splay_tree_node, void*);\n static alias_set_entry get_alias_set_entry (alias_set_type);\n-static bool nonoverlapping_component_refs_p (const_tree, const_tree);\n+static bool nonoverlapping_component_refs_p (const_rtx, const_rtx);\n static tree decl_for_component_ref (tree);\n static int write_dependence_p (const_rtx, const_rtx, int);\n \n@@ -2181,11 +2181,15 @@ read_dependence (const_rtx mem, const_rtx x)\n    overlap for any pair of objects.  */\n \n static bool\n-nonoverlapping_component_refs_p (const_tree x, const_tree y)\n+nonoverlapping_component_refs_p (const_rtx rtlx, const_rtx rtly)\n {\n+  const_tree x = MEM_EXPR (rtlx), y = MEM_EXPR (rtly);\n   const_tree fieldx, fieldy, typex, typey, orig_y;\n \n-  if (!flag_strict_aliasing)\n+  if (!flag_strict_aliasing\n+      || !x || !y\n+      || TREE_CODE (x) != COMPONENT_REF\n+      || TREE_CODE (y) != COMPONENT_REF)\n     return false;\n \n   do\n@@ -2304,13 +2308,6 @@ nonoverlapping_memrefs_p (const_rtx x, const_rtx y, bool loop_invariant)\n \t  && ! MEM_OFFSET_KNOWN_P (y)))\n     return 0;\n \n-  /* If both are field references, we may be able to determine something.  */\n-  if (TREE_CODE (exprx) == COMPONENT_REF\n-      && TREE_CODE (expry) == COMPONENT_REF\n-      && nonoverlapping_component_refs_p (exprx, expry))\n-    return 1;\n-\n-\n   /* If the field reference test failed, look at the DECLs involved.  */\n   moffsetx_known_p = MEM_OFFSET_KNOWN_P (x);\n   if (moffsetx_known_p)\n@@ -2516,6 +2513,9 @@ true_dependence_1 (const_rtx mem, enum machine_mode mem_mode, rtx mem_addr,\n   if (nonoverlapping_memrefs_p (mem, x, false))\n     return 0;\n \n+  if (nonoverlapping_component_refs_p (mem, x))\n+    return 0;\n+\n   return rtx_refs_may_alias_p (x, mem, true);\n }\n "}, {"sha": "1cc34844c1eca6e75c9d4bb69b4b80936eb10b3f", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/175a7536b131a2b90213a8ded70437339f4af1e4/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/175a7536b131a2b90213a8ded70437339f4af1e4/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=175a7536b131a2b90213a8ded70437339f4af1e4", "patch": "@@ -1,3 +1,7 @@\n+2012-06-12  Michael Matz  <matz@suse.de>\n+\n+\t* gcc.dg/torture/alias-1.c: New test.\n+\n 2012-06-12  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR rtl-optimization/53589"}, {"sha": "1e60341f7b6fe9b8256b143ef34858007f197187", "filename": "gcc/testsuite/gcc.dg/torture/alias-1.c", "status": "added", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/175a7536b131a2b90213a8ded70437339f4af1e4/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Falias-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/175a7536b131a2b90213a8ded70437339f4af1e4/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Falias-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Falias-1.c?ref=175a7536b131a2b90213a8ded70437339f4af1e4", "patch": "@@ -0,0 +1,38 @@\n+/* { dg-do run } */\n+/* { dg-options \"-fschedule-insns\" } */\n+\n+extern void abort (void) __attribute__((noreturn));\n+\n+struct B { int a; int b;};\n+struct wrapper {\n+union setconflict\n+{\n+  struct S { char one1; struct B b1; } s;\n+  struct T { struct B b2; char two2; } t;\n+} a;\n+};\n+\n+int\n+main ()\n+{\n+  int sum = 0;\n+  int i;\n+  struct wrapper w;\n+  struct B *p;\n+\n+  p = &w.a.s.b1;\n+  asm (\"\": \"=r\" (p):\"0\" (p));\n+  p->a = 0;\n+  asm (\"\": \"=r\" (p):\"0\" (p));\n+  sum += p->a;\n+\n+  p = &w.a.t.b2;\n+  asm (\"\": \"=r\" (p):\"0\" (p));\n+  p->b = 1;\n+  asm (\"\": \"=r\" (p):\"0\" (p));\n+  sum += p->b;\n+\n+  if (sum != 1)\n+    abort();\n+  return 0;\n+}"}]}