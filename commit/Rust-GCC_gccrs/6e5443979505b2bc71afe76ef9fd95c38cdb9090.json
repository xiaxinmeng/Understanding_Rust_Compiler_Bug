{"sha": "6e5443979505b2bc71afe76ef9fd95c38cdb9090", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmU1NDQzOTc5NTA1YjJiYzcxYWZlNzZlZjlmZDk1YzM4Y2RiOTA5MA==", "commit": {"author": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2019-06-07T14:19:51Z"}, "committer": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2019-06-07T14:19:51Z"}, "message": "compiler: support inlining functions with if statements\n    \n    This increases the number of inlinable functions from 455 to 500.\n    An example of a newly inlinable function is strings.Compare.\n    \n    Reviewed-on: https://go-review.googlesource.com/c/gofrontend/+/181137\n\nFrom-SVN: r272045", "tree": {"sha": "d48643e47c92e5b9248dfbabab0220d3ccfed287", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d48643e47c92e5b9248dfbabab0220d3ccfed287"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6e5443979505b2bc71afe76ef9fd95c38cdb9090", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6e5443979505b2bc71afe76ef9fd95c38cdb9090", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6e5443979505b2bc71afe76ef9fd95c38cdb9090", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6e5443979505b2bc71afe76ef9fd95c38cdb9090/comments", "author": null, "committer": null, "parents": [{"sha": "e94a64a078b3382c1217a06f1ce6610eef04ce28", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e94a64a078b3382c1217a06f1ce6610eef04ce28", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e94a64a078b3382c1217a06f1ce6610eef04ce28"}], "stats": {"total": 151, "additions": 131, "deletions": 20}, "files": [{"sha": "e107d529eb66b22c7d121559dbd92724dbe50719", "filename": "gcc/go/gofrontend/MERGE", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6e5443979505b2bc71afe76ef9fd95c38cdb9090/gcc%2Fgo%2Fgofrontend%2FMERGE", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6e5443979505b2bc71afe76ef9fd95c38cdb9090/gcc%2Fgo%2Fgofrontend%2FMERGE", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2FMERGE?ref=6e5443979505b2bc71afe76ef9fd95c38cdb9090", "patch": "@@ -1,4 +1,4 @@\n-46329dd9e6473fff46df6b310c11116d1558e470\n+9df825b5f142ac2b6f48a8dac94fcff740acd411\n \n The first line of this file holds the git revision number of the last\n merge done from the gofrontend repository."}, {"sha": "6d51d9e0c9082658c0dd59387f93ca69a310a7f9", "filename": "gcc/go/gofrontend/gogo.cc", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6e5443979505b2bc71afe76ef9fd95c38cdb9090/gcc%2Fgo%2Fgofrontend%2Fgogo.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6e5443979505b2bc71afe76ef9fd95c38cdb9090/gcc%2Fgo%2Fgofrontend%2Fgogo.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Fgogo.cc?ref=6e5443979505b2bc71afe76ef9fd95c38cdb9090", "patch": "@@ -6941,7 +6941,12 @@ Block::import_block(Block* set, Import_function_body *ifb, Location loc)\n \n       if (at_end)\n \t{\n-\t  off = nl + 1;\n+\t  // An if statement can have an \"else\" following the \"}\", in\n+\t  // which case we want to leave the offset where it is, just\n+\t  // after the \"}\".  We don't get the block ending location\n+\t  // quite right for if statements.\n+\t  if (body.compare(off, 6, \" else \") != 0)\n+\t    off = nl + 1;\n \t  break;\n \t}\n "}, {"sha": "f680a0a1c3e079e120e662804546e8dfbb984b14", "filename": "gcc/go/gofrontend/statements.cc", "status": "modified", "additions": 105, "deletions": 18, "changes": 123, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6e5443979505b2bc71afe76ef9fd95c38cdb9090/gcc%2Fgo%2Fgofrontend%2Fstatements.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6e5443979505b2bc71afe76ef9fd95c38cdb9090/gcc%2Fgo%2Fgofrontend%2Fstatements.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Fstatements.cc?ref=6e5443979505b2bc71afe76ef9fd95c38cdb9090", "patch": "@@ -129,22 +129,8 @@ Statement::import_statement(Import_function_body* ifb, Location loc)\n {\n   if (ifb->match_c_string(\"{\"))\n     {\n-      size_t nl = ifb->body().find('\\n', ifb->off());\n-      if (nl == std::string::npos)\n-\t{\n-\t  if (!ifb->saw_error())\n-\t    go_error_at(ifb->location(),\n-\t\t\t\"import error: no newline after { at %lu\",\n-\t\t\tstatic_cast<unsigned long>(ifb->off()));\n-\t  ifb->set_saw_error();\n-\t  return Statement::make_error_statement(loc);\n-\t}\n-      ifb->set_off(nl + 1);\n-      ifb->increment_indent();\n-      Block* block = new Block(ifb->block(), loc);\n-      bool ok = Block::import_block(block, ifb, loc);\n-      ifb->decrement_indent();\n-      if (!ok)\n+      Block* block = Block_statement::do_import(ifb, loc);\n+      if (block == NULL)\n \treturn Statement::make_error_statement(loc);\n       return Statement::make_block_statement(block, loc);\n     }\n@@ -159,6 +145,8 @@ Statement::import_statement(Import_function_body* ifb, Location loc)\n     return Temporary_statement::do_import(ifb, loc);\n   else if (ifb->match_c_string(\"var \"))\n     return Variable_declaration_statement::do_import(ifb, loc);\n+  else if (ifb->match_c_string(\"if \"))\n+    return If_statement::do_import(ifb, loc);\n \n   Expression* lhs = Expression::import_expression(ifb, loc);\n   ifb->require_c_string(\" = \");\n@@ -2120,14 +2108,20 @@ Statement::make_statement(Expression* expr, bool is_ignored)\n \n void\n Block_statement::do_export_statement(Export_function_body* efb)\n+{\n+  Block_statement::export_block(efb, this->block_);\n+}\n+\n+void\n+Block_statement::export_block(Export_function_body* efb, Block* block)\n {\n   // We are already indented to the right position.\n   char buf[50];\n   snprintf(buf, sizeof buf, \"{ //%d\\n\",\n-\t   Linemap::location_to_line(this->block_->start_location()));\n+\t   Linemap::location_to_line(block->start_location()));\n   efb->write_c_string(buf);\n \n-  this->block_->export_block(efb);\n+  block->export_block(efb);\n   // The indentation is correct for the statements in the block, so\n   // subtract one for the closing curly brace.\n   efb->decrement_indent();\n@@ -2137,6 +2131,32 @@ Block_statement::do_export_statement(Export_function_body* efb)\n   efb->increment_indent();\n }\n \n+// Import a block statement, returning the block.\n+\n+Block*\n+Block_statement::do_import(Import_function_body* ifb, Location loc)\n+{\n+  go_assert(ifb->match_c_string(\"{\"));\n+  size_t nl = ifb->body().find('\\n', ifb->off());\n+  if (nl == std::string::npos)\n+    {\n+      if (!ifb->saw_error())\n+\tgo_error_at(ifb->location(),\n+\t\t    \"import error: no newline after { at %lu\",\n+\t\t    static_cast<unsigned long>(ifb->off()));\n+      ifb->set_saw_error();\n+      return NULL;\n+    }\n+  ifb->set_off(nl + 1);\n+  ifb->increment_indent();\n+  Block* block = new Block(ifb->block(), loc);\n+  bool ok = Block::import_block(block, ifb, loc);\n+  ifb->decrement_indent();\n+  if (!ok)\n+    return NULL;\n+  return block;\n+}\n+\n // Convert a block to the backend representation of a statement.\n \n Bstatement*\n@@ -3529,6 +3549,73 @@ If_statement::do_get_backend(Translate_context* context)\n \t\t\t\t\t  this->location());\n }\n \n+// Export an if statement.\n+\n+void\n+If_statement::do_export_statement(Export_function_body* efb)\n+{\n+  efb->write_c_string(\"if \");\n+  this->cond_->export_expression(efb);\n+  efb->write_c_string(\" \");\n+  Block_statement::export_block(efb, this->then_block_);\n+  if (this->else_block_ != NULL)\n+    {\n+      efb->write_c_string(\" else \");\n+      Block_statement::export_block(efb, this->else_block_);\n+    }\n+}\n+\n+// Import an if statement.\n+\n+Statement*\n+If_statement::do_import(Import_function_body* ifb, Location loc)\n+{\n+  ifb->require_c_string(\"if \");\n+\n+  Expression* cond = Expression::import_expression(ifb, loc);\n+  Type_context context(Type::lookup_bool_type(), false);\n+  cond->determine_type(&context);\n+  ifb->require_c_string(\" \");\n+\n+  if (!ifb->match_c_string(\"{\"))\n+    {\n+      if (!ifb->saw_error())\n+\tgo_error_at(ifb->location(),\n+\t\t    \"import error for %qs: no block for if statement at %lu\",\n+\t\t    ifb->name().c_str(),\n+\t\t    static_cast<unsigned long>(ifb->off()));\n+      ifb->set_saw_error();\n+      return Statement::make_error_statement(loc);\n+    }\n+\n+  Block* then_block = Block_statement::do_import(ifb, loc);\n+  if (then_block == NULL)\n+    return Statement::make_error_statement(loc);\n+\n+  Block* else_block = NULL;\n+  if (ifb->match_c_string(\" else \"))\n+    {\n+      ifb->advance(6);\n+      if (!ifb->match_c_string(\"{\"))\n+\t{\n+\t  if (!ifb->saw_error())\n+\t    go_error_at(ifb->location(),\n+\t\t\t(\"import error for %qs: no else block \"\n+\t\t\t \"for if statement at %lu\"),\n+\t\t\tifb->name().c_str(),\n+\t\t\tstatic_cast<unsigned long>(ifb->off()));\n+\t  ifb->set_saw_error();\n+\t  return Statement::make_error_statement(loc);\n+\t}\n+\n+      else_block = Block_statement::do_import(ifb, loc);\n+      if (else_block == NULL)\n+\treturn Statement::make_error_statement(loc);\n+    }\n+\n+  return Statement::make_if_statement(cond, then_block, else_block, loc);\n+}\n+\n // Dump the AST representation for an if statement\n \n void"}, {"sha": "3e85243b084febf0d0587de9e18e1adb6b5f50df", "filename": "gcc/go/gofrontend/statements.h", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6e5443979505b2bc71afe76ef9fd95c38cdb9090/gcc%2Fgo%2Fgofrontend%2Fstatements.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6e5443979505b2bc71afe76ef9fd95c38cdb9090/gcc%2Fgo%2Fgofrontend%2Fstatements.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Fstatements.h?ref=6e5443979505b2bc71afe76ef9fd95c38cdb9090", "patch": "@@ -954,6 +954,14 @@ class Block_statement : public Statement\n   is_lowered_for_statement()\n   { return this->is_lowered_for_statement_; }\n \n+  // Export a block for a block statement.\n+  static void\n+  export_block(Export_function_body*, Block*);\n+\n+  // Import a block statement, returning the block.\n+  static Block*\n+  do_import(Import_function_body*, Location);\n+\n  protected:\n   int\n   do_traverse(Traverse* traverse)\n@@ -1529,6 +1537,10 @@ class If_statement : public Statement\n   else_block() const\n   { return this->else_block_; }\n \n+  // Import an if statement.\n+  static Statement*\n+  do_import(Import_function_body*, Location);\n+\n  protected:\n   int\n   do_traverse(Traverse*);\n@@ -1539,6 +1551,13 @@ class If_statement : public Statement\n   void\n   do_check_types(Gogo*);\n \n+  int\n+  do_inlining_cost()\n+  { return 5; }\n+\n+  void\n+  do_export_statement(Export_function_body*);\n+\n   bool\n   do_may_fall_through() const;\n "}]}