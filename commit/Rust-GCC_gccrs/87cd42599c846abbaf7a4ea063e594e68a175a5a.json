{"sha": "87cd42599c846abbaf7a4ea063e594e68a175a5a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODdjZDQyNTk5Yzg0NmFiYmFmN2E0ZWEwNjNlNTk0ZTY4YTE3NWE1YQ==", "commit": {"author": {"name": "Michael Matz", "email": "matz@suse.de", "date": "2009-11-26T15:54:07Z"}, "committer": {"name": "Michael Matz", "email": "matz@gcc.gnu.org", "date": "2009-11-26T15:54:07Z"}, "message": "tree-eh.c (lower_eh_constructs_2): Don't add assignments below statements that can't fall thru.\n\n        * tree-eh.c (lower_eh_constructs_2): Don't add assignments\n        below statements that can't fall thru.\n\ntestsuite/\n        * g++.dg/tree-ssa/pr41905.C: New testcase.\n\nFrom-SVN: r154674", "tree": {"sha": "cd15fcca6d3d4e5c519f24b570af912dd9b6ea69", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/cd15fcca6d3d4e5c519f24b570af912dd9b6ea69"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/87cd42599c846abbaf7a4ea063e594e68a175a5a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/87cd42599c846abbaf7a4ea063e594e68a175a5a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/87cd42599c846abbaf7a4ea063e594e68a175a5a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/87cd42599c846abbaf7a4ea063e594e68a175a5a/comments", "author": {"login": "susematz", "id": 4117296, "node_id": "MDQ6VXNlcjQxMTcyOTY=", "avatar_url": "https://avatars.githubusercontent.com/u/4117296?v=4", "gravatar_id": "", "url": "https://api.github.com/users/susematz", "html_url": "https://github.com/susematz", "followers_url": "https://api.github.com/users/susematz/followers", "following_url": "https://api.github.com/users/susematz/following{/other_user}", "gists_url": "https://api.github.com/users/susematz/gists{/gist_id}", "starred_url": "https://api.github.com/users/susematz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/susematz/subscriptions", "organizations_url": "https://api.github.com/users/susematz/orgs", "repos_url": "https://api.github.com/users/susematz/repos", "events_url": "https://api.github.com/users/susematz/events{/privacy}", "received_events_url": "https://api.github.com/users/susematz/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "6dc3bf569b32983d2c2322d32458f8b28564d8b3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6dc3bf569b32983d2c2322d32458f8b28564d8b3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6dc3bf569b32983d2c2322d32458f8b28564d8b3"}], "stats": {"total": 20, "additions": 19, "deletions": 1}, "files": [{"sha": "26668214c15a4a723e909eeaa60c69bbbd465782", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/87cd42599c846abbaf7a4ea063e594e68a175a5a/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/87cd42599c846abbaf7a4ea063e594e68a175a5a/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=87cd42599c846abbaf7a4ea063e594e68a175a5a", "patch": "@@ -1,3 +1,9 @@\n+2009-11-26  Michael Matz  <matz@suse.de>\n+\n+\tPR tree-optimization/41905\n+\t* tree-eh.c (lower_eh_constructs_2): Don't add assignments\n+\tbelow statements that can't fall thru.\n+\n 2009-11-26  Michael Matz  <matz@suse.de>\n \n \t* builtins.c (expand_builtin_printf, expand_builtin_fprintf,"}, {"sha": "73f39a7c29d30a07fbb72b7591ab87fff4c7acb0", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/87cd42599c846abbaf7a4ea063e594e68a175a5a/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/87cd42599c846abbaf7a4ea063e594e68a175a5a/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=87cd42599c846abbaf7a4ea063e594e68a175a5a", "patch": "@@ -1,3 +1,8 @@\n+2009-11-26  Michael Matz  <matz@suse.de>\n+\n+\tPR tree-optimization/41905\n+\t* g++.dg/tree-ssa/pr41905.C: New testcase.\n+\n 2009-11-25  Richard Henderson  <rth@redhat.com>\n \n \t* gcc.dg/vect/slp-21.c: Succeed with vect_extract_even_odd too."}, {"sha": "4424ce8d23db3176eb6f99e0ac8458b7a3b142d0", "filename": "gcc/testsuite/g++.dg/tree-ssa/pr41905.C", "status": "added", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/87cd42599c846abbaf7a4ea063e594e68a175a5a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftree-ssa%2Fpr41905.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/87cd42599c846abbaf7a4ea063e594e68a175a5a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftree-ssa%2Fpr41905.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftree-ssa%2Fpr41905.C?ref=87cd42599c846abbaf7a4ea063e594e68a175a5a", "patch": "@@ -0,0 +1,4 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2\" } */\n+int foo() __attribute__((noreturn));\n+int bar() { return foo(); }"}, {"sha": "dde343c46116d676d49d69b4b3d09ab486eda885", "filename": "gcc/tree-eh.c", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/87cd42599c846abbaf7a4ea063e594e68a175a5a/gcc%2Ftree-eh.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/87cd42599c846abbaf7a4ea063e594e68a175a5a/gcc%2Ftree-eh.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-eh.c?ref=87cd42599c846abbaf7a4ea063e594e68a175a5a", "patch": "@@ -1868,9 +1868,12 @@ lower_eh_constructs_2 (struct leh_state *state, gimple_stmt_iterator *gsi)\n     case GIMPLE_ASSIGN:\n       /* If the stmt can throw use a new temporary for the assignment\n          to a LHS.  This makes sure the old value of the LHS is\n-\t available on the EH edge.  */\n+\t available on the EH edge.  Only do so for statements that\n+\t potentially fall thru (no noreturn calls e.g.), otherwise\n+\t this new assignment might create fake fallthru regions.  */\n       if (stmt_could_throw_p (stmt)\n \t  && gimple_has_lhs (stmt)\n+\t  && gimple_stmt_may_fallthru (stmt)\n \t  && !tree_could_throw_p (gimple_get_lhs (stmt))\n \t  && is_gimple_reg_type (TREE_TYPE (gimple_get_lhs (stmt))))\n \t{"}]}