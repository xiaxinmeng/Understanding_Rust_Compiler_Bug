{"sha": "fd3acbb3a2c176dc658f2b957c3693dfebb2ae7e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmQzYWNiYjNhMmMxNzZkYzY1OGYyYjk1N2MzNjkzZGZlYmIyYWU3ZQ==", "commit": {"author": {"name": "Nathan Sidwell", "email": "nathan@gcc.gnu.org", "date": "2003-06-16T08:27:05Z"}, "committer": {"name": "Nathan Sidwell", "email": "nathan@gcc.gnu.org", "date": "2003-06-16T08:27:05Z"}, "message": "function.h (struct emit_status): Remove x_last_linenum, x_last_filename.\n\n\t* function.h (struct emit_status): Remove x_last_linenum,\n\tx_last_filename. Add x_last_location.\n\t* rtl.h: #include \"input.h\".\n\t(NOTE_DATA): New.\n\t* cfglayout.c (duplicate_insn_chain): Use emit_line_note for line\n\tnumber notes.\n\t* emit-rtl.c (last_linenum, last_filename): Remove.\n\t(last_location): New.\n\t(emit_line_note_after): LINE must always be >= 0.\n\t(emit_line_note): Likewise. Check not duplicate here...\n\t(emit_note): ... rather than here.\n\t(emit_line_note_force, force_next_line_note, init_emit): Adjust.\n\t* integrate.c (expand_inline_function): Use emit_line_note for\n\tline number notes.\n\t(copy_insn_list): Likewise.\n\t* unroll.c (copy_loop_body): Likewise.\n\t* Makefile.in (RTL_H): Add input.h.\n\nFrom-SVN: r68002", "tree": {"sha": "2b5cb543169ef70477d25bcc0683bd89eb4851a2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2b5cb543169ef70477d25bcc0683bd89eb4851a2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/fd3acbb3a2c176dc658f2b957c3693dfebb2ae7e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fd3acbb3a2c176dc658f2b957c3693dfebb2ae7e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fd3acbb3a2c176dc658f2b957c3693dfebb2ae7e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fd3acbb3a2c176dc658f2b957c3693dfebb2ae7e/comments", "author": null, "committer": null, "parents": [{"sha": "695a94b30aef2dbf9d30e96d02c8fdfa5d99c3eb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/695a94b30aef2dbf9d30e96d02c8fdfa5d99c3eb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/695a94b30aef2dbf9d30e96d02c8fdfa5d99c3eb"}], "stats": {"total": 151, "additions": 92, "deletions": 59}, "files": [{"sha": "f9e2b7f5ef151469e5bf51e7497ca655195d07d5", "filename": "gcc/ChangeLog", "status": "modified", "additions": 21, "deletions": 2, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fd3acbb3a2c176dc658f2b957c3693dfebb2ae7e/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fd3acbb3a2c176dc658f2b957c3693dfebb2ae7e/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=fd3acbb3a2c176dc658f2b957c3693dfebb2ae7e", "patch": "@@ -1,3 +1,23 @@\n+2003-06-15  Nathan Sidwell  <nathan@codesourcery.com>\n+\n+\t* function.h (struct emit_status): Remove x_last_linenum,\n+\tx_last_filename. Add x_last_location.\n+\t* rtl.h: #include \"input.h\".\n+\t(NOTE_DATA): New.\n+\t* cfglayout.c (duplicate_insn_chain): Use emit_line_note for line\n+\tnumber notes.\n+\t* emit-rtl.c (last_linenum, last_filename): Remove.\n+\t(last_location): New.\n+\t(emit_line_note_after): LINE must always be >= 0.\n+\t(emit_line_note): Likewise. Check not duplicate here...\n+\t(emit_note): ... rather than here.\n+\t(emit_line_note_force, force_next_line_note, init_emit): Adjust.\n+\t* integrate.c (expand_inline_function): Use emit_line_note for\n+\tline number notes.\n+\t(copy_insn_list): Likewise.\n+\t* unroll.c (copy_loop_body): Likewise.\n+\t* Makefile.in (RTL_H): Add input.h.\n+\n 2003-06-16  Richard Sandiford  <rsandifo@redhat.com>\n \n \t* optabs.c (emit_libcall_block): Don't hoist insns past a label.\n@@ -86,8 +106,7 @@\n \t* c.opt: Specify languages.\n \t* opts.h: Remove languages.\n \t* opts.sh: Recognise front-end defined languages.\n-doc:\n-\t* sourcebuild.texi: Update.\n+\t* doc/sourcebuild.texi: Update.\n \n 2003-06-15  Andreas Jaeger  <aj@suse.de>\n "}, {"sha": "316690358a33a5d1cb421de6ad2802c2f6473bdf", "filename": "gcc/Makefile.in", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fd3acbb3a2c176dc658f2b957c3693dfebb2ae7e/gcc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fd3acbb3a2c176dc658f2b957c3693dfebb2ae7e/gcc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FMakefile.in?ref=fd3acbb3a2c176dc658f2b957c3693dfebb2ae7e", "patch": "@@ -631,7 +631,7 @@ LANGHOOKS_DEF_H = langhooks-def.h $(HOOKS_H)\n TARGET_DEF_H = target-def.h $(HOOKS_H)\n MACHMODE_H = machmode.h machmode.def @extra_modes_file@\n RTL_BASE_H = rtl.h rtl.def $(MACHMODE_H)\n-RTL_H = $(RTL_BASE_H) genrtl.h\n+RTL_H = $(RTL_BASE_H) genrtl.h input.h\n PARAMS_H = params.h params.def\n TREE_H = tree.h tree.def $(MACHMODE_H) tree-check.h version.h builtins.def \\\n           input.h"}, {"sha": "d73030672120c90901c06b4e1c234a0d12b3649f", "filename": "gcc/cfglayout.c", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fd3acbb3a2c176dc658f2b957c3693dfebb2ae7e/gcc%2Fcfglayout.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fd3acbb3a2c176dc658f2b957c3693dfebb2ae7e/gcc%2Fcfglayout.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcfglayout.c?ref=fd3acbb3a2c176dc658f2b957c3693dfebb2ae7e", "patch": "@@ -1023,15 +1023,17 @@ duplicate_insn_chain (from, to)\n \t      abort ();\n \t      break;\n \t    case NOTE_INSN_REPEATED_LINE_NUMBER:\n-\t      emit_note (NOTE_SOURCE_FILE (insn), NOTE_LINE_NUMBER (insn));\n+\t      emit_line_note (NOTE_SOURCE_FILE (insn),\n+\t\t\t      NOTE_LINE_NUMBER (insn));\n \t      break;\n \n \t    default:\n \t      if (NOTE_LINE_NUMBER (insn) < 0)\n \t\tabort ();\n \t      /* It is possible that no_line_number is set and the note\n \t         won't be emitted.  */\n-\t      emit_note (NOTE_SOURCE_FILE (insn), NOTE_LINE_NUMBER (insn));\n+\t      emit_line_note (NOTE_SOURCE_FILE (insn),\n+\t\t\t      NOTE_LINE_NUMBER (insn));\n \t    }\n \t  break;\n \tdefault:"}, {"sha": "03ee9000923e3fc324abc8c7037e39e44cdbd3cc", "filename": "gcc/emit-rtl.c", "status": "modified", "additions": 21, "deletions": 25, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fd3acbb3a2c176dc658f2b957c3693dfebb2ae7e/gcc%2Femit-rtl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fd3acbb3a2c176dc658f2b957c3693dfebb2ae7e/gcc%2Femit-rtl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Femit-rtl.c?ref=fd3acbb3a2c176dc658f2b957c3693dfebb2ae7e", "patch": "@@ -170,8 +170,7 @@ static GTY ((if_marked (\"ggc_marked_p\"), param_is (struct rtx_def)))\n #define first_insn (cfun->emit->x_first_insn)\n #define last_insn (cfun->emit->x_last_insn)\n #define cur_insn_uid (cfun->emit->x_cur_insn_uid)\n-#define last_linenum (cfun->emit->x_last_linenum)\n-#define last_filename (cfun->emit->x_last_filename)\n+#define last_location (cfun->emit->x_last_location)\n #define first_label_num (cfun->emit->x_first_label_num)\n \n static rtx make_jump_insn_raw\t\tPARAMS ((rtx));\n@@ -4636,7 +4635,9 @@ emit_line_note_after (file, line, after)\n {\n   rtx note;\n \n-  if (no_line_numbers && line > 0)\n+  if (line < 0)\n+    abort ();\n+  if (no_line_numbers)\n     {\n       cur_insn_uid++;\n       return 0;\n@@ -4896,12 +4897,22 @@ emit_line_note (file, line)\n      const char *file;\n      int line;\n {\n+  if (line < 0)\n+    abort ();\n+  \n   set_file_and_line_for_stmt (file, line);\n \n-#if 0\n+  if (file && last_location.file && !strcmp (file, last_location.file)\n+      && line == last_location.line)\n+    return NULL_RTX;\n+  last_location.file = file;\n+  last_location.line = line;\n+\n   if (no_line_numbers)\n-    return 0;\n-#endif\n+    {\n+      cur_insn_uid++;\n+      return NULL_RTX;\n+    }\n \n   return emit_note (file, line);\n }\n@@ -4918,21 +4929,6 @@ emit_note (file, line)\n {\n   rtx note;\n \n-  if (line > 0)\n-    {\n-      if (file && last_filename && !strcmp (file, last_filename)\n-\t  && line == last_linenum)\n-\treturn 0;\n-      last_filename = file;\n-      last_linenum = line;\n-    }\n-\n-  if (no_line_numbers && line > 0)\n-    {\n-      cur_insn_uid++;\n-      return 0;\n-    }\n-\n   note = rtx_alloc (NOTE);\n   INSN_UID (note) = cur_insn_uid++;\n   NOTE_SOURCE_FILE (note) = file;\n@@ -4949,7 +4945,7 @@ emit_line_note_force (file, line)\n      const char *file;\n      int line;\n {\n-  last_linenum = -1;\n+  last_location.line = -1;\n   return emit_line_note (file, line);\n }\n \n@@ -4959,7 +4955,7 @@ emit_line_note_force (file, line)\n void\n force_next_line_note ()\n {\n-  last_linenum = -1;\n+  last_location.line = -1;\n }\n \n /* Place a note of KIND on insn INSN with DATUM as the datum. If a\n@@ -5438,8 +5434,8 @@ init_emit ()\n   seq_rtl_expr = NULL;\n   cur_insn_uid = 1;\n   reg_rtx_no = LAST_VIRTUAL_REGISTER + 1;\n-  last_linenum = 0;\n-  last_filename = 0;\n+  last_location.line = 0;\n+  last_location.file = 0;\n   first_label_num = label_num;\n   last_label_num = 0;\n   seq_stack = NULL;"}, {"sha": "24bebc1982ef6480f8ff8f011251a956caecbac2", "filename": "gcc/function.h", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fd3acbb3a2c176dc658f2b957c3693dfebb2ae7e/gcc%2Ffunction.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fd3acbb3a2c176dc658f2b957c3693dfebb2ae7e/gcc%2Ffunction.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffunction.h?ref=fd3acbb3a2c176dc658f2b957c3693dfebb2ae7e", "patch": "@@ -83,10 +83,9 @@ struct emit_status GTY(())\n      Reset to 1 for each function compiled.  */\n   int x_cur_insn_uid;\n \n-  /* Line number and source file of the last line-number NOTE emitted.\n+  /* Location the last line-number NOTE emitted.\n      This is used to avoid generating duplicates.  */\n-  int x_last_linenum;\n-  const char *x_last_filename;\n+  location_t x_last_location;\n \n   /* The length of the regno_pointer_align, regno_decl, and x_regno_reg_rtx\n      vectors.  Since these vectors are needed during the expansion phase when"}, {"sha": "e9719e5f5c39882b7b45969a1e9d28331feef08d", "filename": "gcc/integrate.c", "status": "modified", "additions": 14, "deletions": 13, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fd3acbb3a2c176dc658f2b957c3693dfebb2ae7e/gcc%2Fintegrate.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fd3acbb3a2c176dc658f2b957c3693dfebb2ae7e/gcc%2Fintegrate.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fintegrate.c?ref=fd3acbb3a2c176dc658f2b957c3693dfebb2ae7e", "patch": "@@ -925,8 +925,8 @@ expand_inline_function (fndecl, parms, target, ignore, type,\n   if (GET_CODE (parm_insns) == NOTE\n       && NOTE_LINE_NUMBER (parm_insns) > 0)\n     {\n-      rtx note = emit_note (NOTE_SOURCE_FILE (parm_insns),\n-\t\t\t    NOTE_LINE_NUMBER (parm_insns));\n+      rtx note = emit_line_note (NOTE_SOURCE_FILE (parm_insns),\n+\t\t\t\t NOTE_LINE_NUMBER (parm_insns));\n       if (note)\n \tRTX_INTEGRATED_P (note) = 1;\n     }\n@@ -1017,8 +1017,8 @@ expand_inline_function (fndecl, parms, target, ignore, type,\n \t  && ! (GET_CODE (XEXP (loc, 0)) == REG\n \t\t&& REGNO (XEXP (loc, 0)) > LAST_VIRTUAL_REGISTER))\n \t{\n-\t  rtx note = emit_note (DECL_SOURCE_FILE (formal),\n-\t\t\t\tDECL_SOURCE_LINE (formal));\n+\t  rtx note = emit_line_note (DECL_SOURCE_FILE (formal),\n+\t\t\t\t     DECL_SOURCE_LINE (formal));\n \t  if (note)\n \t    RTX_INTEGRATED_P (note) = 1;\n \n@@ -1305,7 +1305,7 @@ expand_inline_function (fndecl, parms, target, ignore, type,\n      This line number note is still needed for debugging though, so we can't\n      delete it.  */\n   if (flag_test_coverage)\n-    emit_note (0, NOTE_INSN_REPEATED_LINE_NUMBER);\n+    emit_note (NULL, NOTE_INSN_REPEATED_LINE_NUMBER);\n \n   emit_line_note (input_filename, input_line);\n \n@@ -1683,15 +1683,17 @@ copy_insn_list (insns, map, static_chain_value)\n \n \t     NOTE_INSN_DELETED notes aren't useful.  */\n \n-\t  if (NOTE_LINE_NUMBER (insn) != NOTE_INSN_FUNCTION_END\n+\t  if (NOTE_LINE_NUMBER (insn) > 0)\n+\t    copy = emit_line_note (NOTE_SOURCE_FILE (insn),\n+\t\t\t\t   NOTE_LINE_NUMBER (insn));\n+\t  else if (NOTE_LINE_NUMBER (insn) != NOTE_INSN_FUNCTION_END\n \t      && NOTE_LINE_NUMBER (insn) != NOTE_INSN_FUNCTION_BEG\n \t      && NOTE_LINE_NUMBER (insn) != NOTE_INSN_DELETED)\n \t    {\n-\t      copy = emit_note (NOTE_SOURCE_FILE (insn),\n-\t\t\t\tNOTE_LINE_NUMBER (insn));\n-\t      if (copy\n-\t\t  && (NOTE_LINE_NUMBER (copy) == NOTE_INSN_BLOCK_BEG\n-\t\t      || NOTE_LINE_NUMBER (copy) == NOTE_INSN_BLOCK_END)\n+\t      copy = emit_note (NULL, NOTE_LINE_NUMBER (insn));\n+\t      NOTE_DATA (copy) = NOTE_DATA (insn);\n+\t      if ((NOTE_LINE_NUMBER (copy) == NOTE_INSN_BLOCK_BEG\n+\t\t   || NOTE_LINE_NUMBER (copy) == NOTE_INSN_BLOCK_END)\n \t\t  && NOTE_BLOCK (insn))\n \t\t{\n \t\t  tree *mapped_block_p;\n@@ -1708,8 +1710,7 @@ copy_insn_list (insns, map, static_chain_value)\n \t\t  else\n \t\t    NOTE_BLOCK (copy) = *mapped_block_p;\n \t\t}\n-\t      else if (copy\n-\t\t       && NOTE_LINE_NUMBER (copy) == NOTE_INSN_EXPECTED_VALUE)\n+\t      else if (NOTE_LINE_NUMBER (copy) == NOTE_INSN_EXPECTED_VALUE)\n \t\tNOTE_EXPECTED_VALUE (copy)\n \t\t  = copy_rtx_and_substitute (NOTE_EXPECTED_VALUE (insn),\n \t\t\t\t\t     map, 0);"}, {"sha": "4701009c3970314523f5ca638b617ec4d8f05988", "filename": "gcc/rtl.h", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fd3acbb3a2c176dc658f2b957c3693dfebb2ae7e/gcc%2Frtl.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fd3acbb3a2c176dc658f2b957c3693dfebb2ae7e/gcc%2Frtl.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frtl.h?ref=fd3acbb3a2c176dc658f2b957c3693dfebb2ae7e", "patch": "@@ -25,6 +25,7 @@ Software Foundation, 59 Temple Place - Suite 330, Boston, MA\n struct function;\n \n #include \"machmode.h\"\n+#include \"input.h\"\n \n #undef FFS  /* Some systems predefine this symbol; don't let it interfere.  */\n #undef FLOAT /* Likewise.  */\n@@ -782,6 +783,8 @@ extern const char * const reg_note_name[];\n    between ints and pointers if we use a different macro for the block number.)\n    */\n \n+/* Opaque data.  */\n+#define NOTE_DATA(INSN)\t        XCINT (INSN, 4, NOTE)\n #define NOTE_SOURCE_FILE(INSN)\tXCSTR (INSN, 4, NOTE)\n #define NOTE_BLOCK(INSN)\tXCTREE (INSN, 4, NOTE)\n #define NOTE_EH_HANDLER(INSN)\tXCINT (INSN, 4, NOTE)\n@@ -1511,6 +1514,7 @@ extern rtx assign_stack_temp\t\tPARAMS ((enum machine_mode,\n extern rtx assign_stack_temp_for_type\tPARAMS ((enum machine_mode,\n \t\t\t\t\t\t HOST_WIDE_INT, int, tree));\n extern rtx assign_temp\t\t\tPARAMS ((tree, int, int, int));\n+\n /* In emit-rtl.c */\n extern rtx emit_insn_before\t\tPARAMS ((rtx, rtx));\n extern rtx emit_insn_before_setloc\tPARAMS ((rtx, rtx, int));"}, {"sha": "2097e6e0e7b00d75768899cbc97da4983bb917cd", "filename": "gcc/unroll.c", "status": "modified", "additions": 25, "deletions": 13, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fd3acbb3a2c176dc658f2b957c3693dfebb2ae7e/gcc%2Funroll.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fd3acbb3a2c176dc658f2b957c3693dfebb2ae7e/gcc%2Funroll.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Funroll.c?ref=fd3acbb3a2c176dc658f2b957c3693dfebb2ae7e", "patch": "@@ -2263,14 +2263,20 @@ copy_loop_body (loop, copy_start, copy_end, map, exit_label, last_iteration,\n \t     the associated rtl.  We do not want to share the structure in\n \t     this new block.  */\n \n-\t  if (NOTE_LINE_NUMBER (insn) != NOTE_INSN_DELETED\n-\t      && NOTE_LINE_NUMBER (insn) != NOTE_INSN_DELETED_LABEL\n-\t      && NOTE_LINE_NUMBER (insn) != NOTE_INSN_BASIC_BLOCK\n-\t      && ((NOTE_LINE_NUMBER (insn) != NOTE_INSN_LOOP_VTOP\n-\t\t   && NOTE_LINE_NUMBER (insn) != NOTE_INSN_LOOP_CONT)\n-\t\t  || (last_iteration && unroll_type != UNROLL_COMPLETELY)))\n-\t    copy = emit_note (NOTE_SOURCE_FILE (insn),\n+\t  if (NOTE_LINE_NUMBER (insn) > 0)\n+\t    copy = emit_line_note (NOTE_SOURCE_FILE (insn),\n \t\t\t      NOTE_LINE_NUMBER (insn));\n+\t  else if (NOTE_LINE_NUMBER (insn) != NOTE_INSN_DELETED\n+\t\t   && NOTE_LINE_NUMBER (insn) != NOTE_INSN_DELETED_LABEL\n+\t\t   && NOTE_LINE_NUMBER (insn) != NOTE_INSN_BASIC_BLOCK\n+\t\t   && ((NOTE_LINE_NUMBER (insn) != NOTE_INSN_LOOP_VTOP\n+\t\t\t&& NOTE_LINE_NUMBER (insn) != NOTE_INSN_LOOP_CONT)\n+\t\t       || (last_iteration\n+\t\t\t   && unroll_type != UNROLL_COMPLETELY)))\n+\t    {\n+\t      copy = emit_note (NULL, NOTE_LINE_NUMBER (insn));\n+\t      NOTE_DATA (copy) = NOTE_DATA (insn);\n+\t    }\n \t  else\n \t    copy = 0;\n \t  break;\n@@ -2315,12 +2321,18 @@ copy_loop_body (loop, copy_start, copy_end, map, exit_label, last_iteration,\n \t     instructions before the last insn in the loop, COPY_NOTES_FROM\n \t     can be a NOTE_INSN_LOOP_CONT note if there is no VTOP note,\n \t     as in a do .. while loop.  */\n-\t  if (GET_CODE (insn) == NOTE\n-\t      && NOTE_LINE_NUMBER (insn) != NOTE_INSN_DELETED\n-\t      && NOTE_LINE_NUMBER (insn) != NOTE_INSN_BASIC_BLOCK\n-\t      && NOTE_LINE_NUMBER (insn) != NOTE_INSN_LOOP_VTOP\n-\t      && NOTE_LINE_NUMBER (insn) != NOTE_INSN_LOOP_CONT)\n-\t    emit_note (NOTE_SOURCE_FILE (insn), NOTE_LINE_NUMBER (insn));\n+\t  if (GET_CODE (insn) != NOTE)\n+\t    /*NOP*/;\n+\t  else if (NOTE_LINE_NUMBER (insn) > 0)\n+\t    emit_line_note (NOTE_SOURCE_FILE (insn), NOTE_LINE_NUMBER (insn));\n+\t  else if (NOTE_LINE_NUMBER (insn) != NOTE_INSN_DELETED\n+\t\t   && NOTE_LINE_NUMBER (insn) != NOTE_INSN_BASIC_BLOCK\n+\t\t   && NOTE_LINE_NUMBER (insn) != NOTE_INSN_LOOP_VTOP\n+\t\t   && NOTE_LINE_NUMBER (insn) != NOTE_INSN_LOOP_CONT)\n+\t    {\n+\t      rtx copy = emit_note (NULL, NOTE_LINE_NUMBER (insn));\n+\t      NOTE_DATA (copy) = NOTE_DATA (insn);\n+\t    }\n \t}\n     }\n "}]}