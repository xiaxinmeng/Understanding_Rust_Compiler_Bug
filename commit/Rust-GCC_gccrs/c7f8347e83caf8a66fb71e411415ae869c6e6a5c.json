{"sha": "c7f8347e83caf8a66fb71e411415ae869c6e6a5c", "node_id": "C_kwDOANBUbNoAKGM3ZjgzNDdlODNjYWY4YTY2ZmI3MWU0MTE0MTVhZTg2OWM2ZTZhNWM", "commit": {"author": {"name": "Philip Herron", "email": "philip.herron@embecosm.com", "date": "2022-08-23T15:22:47Z"}, "committer": {"name": "Arthur Cohen", "email": "arthur.cohen@embecosm.com", "date": "2022-12-13T13:00:05Z"}, "message": "gccrs: Add port of FNV hash used during legacy symbol mangling\n\nThis hash was ported from the Go runtime, as we needed a hash for the legacy\nsymbol mangling system. All symbols in Rust contain a hash of some\nmetadata for uniqueness on generic functions.\n\n\tgcc/rust/\n\t* util/fnv-hash.h: New.", "tree": {"sha": "c164bf5745f8840526bd1f8b7dd1889979b46c23", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c164bf5745f8840526bd1f8b7dd1889979b46c23"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c7f8347e83caf8a66fb71e411415ae869c6e6a5c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c7f8347e83caf8a66fb71e411415ae869c6e6a5c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c7f8347e83caf8a66fb71e411415ae869c6e6a5c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c7f8347e83caf8a66fb71e411415ae869c6e6a5c/comments", "author": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "committer": {"login": "CohenArthur", "id": 43524065, "node_id": "MDQ6VXNlcjQzNTI0MDY1", "avatar_url": "https://avatars.githubusercontent.com/u/43524065?v=4", "gravatar_id": "", "url": "https://api.github.com/users/CohenArthur", "html_url": "https://github.com/CohenArthur", "followers_url": "https://api.github.com/users/CohenArthur/followers", "following_url": "https://api.github.com/users/CohenArthur/following{/other_user}", "gists_url": "https://api.github.com/users/CohenArthur/gists{/gist_id}", "starred_url": "https://api.github.com/users/CohenArthur/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/CohenArthur/subscriptions", "organizations_url": "https://api.github.com/users/CohenArthur/orgs", "repos_url": "https://api.github.com/users/CohenArthur/repos", "events_url": "https://api.github.com/users/CohenArthur/events{/privacy}", "received_events_url": "https://api.github.com/users/CohenArthur/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b32b1b1576a6df965cb3fcbed3780b9f045286b2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b32b1b1576a6df965cb3fcbed3780b9f045286b2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b32b1b1576a6df965cb3fcbed3780b9f045286b2"}], "stats": {"total": 95, "additions": 95, "deletions": 0}, "files": [{"sha": "78e54c994116fcbb5485666cd85770b63741e12b", "filename": "gcc/rust/util/fnv-hash.h", "status": "added", "additions": 95, "deletions": 0, "changes": 95, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c7f8347e83caf8a66fb71e411415ae869c6e6a5c/gcc%2Frust%2Futil%2Ffnv-hash.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c7f8347e83caf8a66fb71e411415ae869c6e6a5c/gcc%2Frust%2Futil%2Ffnv-hash.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Futil%2Ffnv-hash.h?ref=c7f8347e83caf8a66fb71e411415ae869c6e6a5c", "patch": "@@ -0,0 +1,95 @@\n+// Copyright (C) 2020-2022 Free Software Foundation, Inc.\n+\n+// This file is part of GCC.\n+\n+// GCC is free software; you can redistribute it and/or modify it under\n+// the terms of the GNU General Public License as published by the Free\n+// Software Foundation; either version 3, or (at your option) any later\n+// version.\n+\n+// GCC is distributed in the hope that it will be useful, but WITHOUT ANY\n+// WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+// FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+// for more details.\n+\n+// You should have received a copy of the GNU General Public License\n+// along with GCC; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+#ifndef RUST_FNV_HASH_H\n+#define RUST_FNV_HASH_H\n+\n+namespace Rust {\n+namespace Hash {\n+\n+const uint64_t offset128Lower = 0x62b821756295c58d;\n+const uint64_t offset128Higher = 0x6c62272e07bb0142;\n+const uint64_t prime128Lower = 0x13b;\n+const uint64_t prime128Shift = 24;\n+\n+// ported from https://github.com/golang/go/blob/master/src/hash/fnv/fnv.go\n+class FNV128\n+{\n+public:\n+  FNV128 () { reset (); }\n+\n+  void reset ()\n+  {\n+    buf[0] = offset128Higher;\n+    buf[1] = offset128Lower;\n+  }\n+\n+  void write (const unsigned char *in, size_t len)\n+  {\n+    for (size_t i = 0; i < len; i++)\n+      {\n+\tunsigned char c = in[i];\n+\n+\t// https://stackoverflow.com/questions/28868367/getting-the-high-part-of-64-bit-integer-multiplication\n+\tuint64_t a = prime128Lower;\n+\tuint64_t b = buf[1];\n+\n+\tuint64_t a_lo = (uint32_t) a;\n+\tuint64_t a_hi = a >> 32;\n+\tuint64_t b_lo = (uint32_t) b;\n+\tuint64_t b_hi = b >> 32;\n+\n+\tuint64_t a_x_b_hi = a_hi * b_hi;\n+\tuint64_t a_x_b_mid = a_hi * b_lo;\n+\tuint64_t b_x_a_mid = b_hi * a_lo;\n+\tuint64_t a_x_b_lo = a_lo * b_lo;\n+\n+\tuint64_t carry_bit\n+\t  = ((uint64_t) (uint32_t) a_x_b_mid + (uint64_t) (uint32_t) b_x_a_mid\n+\t     + (a_x_b_lo >> 32))\n+\t    >> 32;\n+\n+\tuint64_t multhi\n+\t  = a_x_b_hi + (a_x_b_mid >> 32) + (b_x_a_mid >> 32) + carry_bit;\n+\n+\tuint64_t s0 = multhi;\t\t      // high\n+\tuint64_t s1 = prime128Lower * buf[1]; // low\n+\n+\ts0 += buf[1] << (prime128Shift + prime128Lower * buf[0]);\n+\n+\t// Update the values\n+\tbuf[1] = s1;\n+\tbuf[0] = s0;\n+\tbuf[1] ^= (uint64_t) c;\n+      }\n+  }\n+\n+  void sum (uint64_t *hi, uint64_t *lo) const\n+  {\n+    *hi = buf[0];\n+    *lo = buf[1];\n+  }\n+\n+private:\n+  uint64_t buf[2];\n+};\n+\n+} // namespace Hash\n+} // namespace Rust\n+\n+#endif // RUST_FNV_HASH_H"}]}