{"sha": "e76b6399550f6de221cd7fb88e981c0e72db7f86", "node_id": "C_kwDOANBUbNoAKGU3NmI2Mzk5NTUwZjZkZTIyMWNkN2ZiODhlOTgxYzBlNzJkYjdmODY", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2022-04-16T09:37:42Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-04-16T09:37:42Z"}, "message": "Merge #1118\n\n1118: Add reachability visitor to Enum variants r=CohenArthur a=CohenArthur\n\nThis visits all of an enum's variants and their fields if present. To do that properly, this adds a new `EnumItemKind` enum which allows static casting when visiting each variant of the enum (kept as an `EnumItem` class which is derived three times)\n\nCo-authored-by: Arthur Cohen <arthur.cohen@embecosm.com>", "tree": {"sha": "a05dbbd23dcba07c63a6d4f59a534dc1af799776", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a05dbbd23dcba07c63a6d4f59a534dc1af799776"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e76b6399550f6de221cd7fb88e981c0e72db7f86", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJiWo5mCRBK7hj4Ov3rIwAAgJgIAKNkAYyb6HzcEwtKAkTA548N\nwOmVMGf0vbGgpzWg4YeAvlmelfIyL1fHPcRuP09LAQjMu85v5N5QKjlunMrolXKA\ntkYvkTBgsgRc3lNuq0SFZiqbEl6DDp/zwD+GPbLG4/IppdldYU/arkP6bMuwmVC8\nGNvASELq/PZoa3Fd5vdrgD7ZX4TZhKR1XszMD94EPoqCm9wfuTd/oyhhbmOEEL+v\n73fHUYiVSoaAHagDLEZ9yO691u6EXdYSg6lcc4kNwwGcbpROaJSOIns8S2lRwG7v\nJhySh2XP9Z24dqLTgpL1XSsRL2WJrtFffkh6rc6/aQON91VDBF3NGfg8lFG2CFg=\n=G1Ws\n-----END PGP SIGNATURE-----\n", "payload": "tree a05dbbd23dcba07c63a6d4f59a534dc1af799776\nparent 042c8750245e011e3585b56f9080126636f10444\nparent c4443ca3b2e1e0847bcb1a7d858d4bb0de16fdb3\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1650101862 +0000\ncommitter GitHub <noreply@github.com> 1650101862 +0000\n\nMerge #1118\n\n1118: Add reachability visitor to Enum variants r=CohenArthur a=CohenArthur\n\nThis visits all of an enum's variants and their fields if present. To do that properly, this adds a new `EnumItemKind` enum which allows static casting when visiting each variant of the enum (kept as an `EnumItem` class which is derived three times)\n\nCo-authored-by: Arthur Cohen <arthur.cohen@embecosm.com>\n"}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e76b6399550f6de221cd7fb88e981c0e72db7f86", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e76b6399550f6de221cd7fb88e981c0e72db7f86", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e76b6399550f6de221cd7fb88e981c0e72db7f86/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "042c8750245e011e3585b56f9080126636f10444", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/042c8750245e011e3585b56f9080126636f10444", "html_url": "https://github.com/Rust-GCC/gccrs/commit/042c8750245e011e3585b56f9080126636f10444"}, {"sha": "c4443ca3b2e1e0847bcb1a7d858d4bb0de16fdb3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c4443ca3b2e1e0847bcb1a7d858d4bb0de16fdb3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c4443ca3b2e1e0847bcb1a7d858d4bb0de16fdb3"}], "stats": {"total": 98, "additions": 92, "deletions": 6}, "files": [{"sha": "a996228ce31543c15dc353c5de5e87901e549c39", "filename": "gcc/rust/hir/tree/rust-hir-full-test.cc", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e76b6399550f6de221cd7fb88e981c0e72db7f86/gcc%2Frust%2Fhir%2Ftree%2Frust-hir-full-test.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e76b6399550f6de221cd7fb88e981c0e72db7f86/gcc%2Frust%2Fhir%2Ftree%2Frust-hir-full-test.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fhir%2Ftree%2Frust-hir-full-test.cc?ref=e76b6399550f6de221cd7fb88e981c0e72db7f86", "patch": "@@ -3108,6 +3108,22 @@ EnumItem::as_string () const\n {\n   std::string str = Item::as_string ();\n   str += variant_name;\n+  str += \" \";\n+  switch (get_enum_item_kind ())\n+    {\n+    case Named:\n+      str += \"[Named variant]\";\n+      break;\n+    case Tuple:\n+      str += \"[Tuple variant]\";\n+      break;\n+    case Struct:\n+      str += \"[Struct variant]\";\n+      break;\n+    case Discriminant:\n+      str += \"[Discriminant variant]\";\n+      break;\n+    }\n \n   return str;\n }"}, {"sha": "2f696307cfec13a37dcc003bb90085e165b7cc5f", "filename": "gcc/rust/hir/tree/rust-hir-item.h", "status": "modified", "additions": 25, "deletions": 2, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e76b6399550f6de221cd7fb88e981c0e72db7f86/gcc%2Frust%2Fhir%2Ftree%2Frust-hir-item.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e76b6399550f6de221cd7fb88e981c0e72db7f86/gcc%2Frust%2Fhir%2Ftree%2Frust-hir-item.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fhir%2Ftree%2Frust-hir-item.h?ref=e76b6399550f6de221cd7fb88e981c0e72db7f86", "patch": "@@ -1588,7 +1588,7 @@ struct TupleField\n \n   std::string as_string () const;\n \n-  Analysis::NodeMapping get_mappings () { return mappings; }\n+  Analysis::NodeMapping get_mappings () const { return mappings; }\n \n   Location get_locus () const { return locus; }\n \n@@ -1644,12 +1644,19 @@ class TupleStruct : public Struct\n class EnumItem : public Item\n {\n   Identifier variant_name;\n-\n   Location locus;\n \n public:\n   virtual ~EnumItem () {}\n \n+  enum EnumItemKind\n+  {\n+    Named,\n+    Tuple,\n+    Struct,\n+    Discriminant,\n+  };\n+\n   EnumItem (Analysis::NodeMapping mappings, Identifier variant_name,\n \t    AST::AttrVec outer_attrs, Location locus)\n     : Item (std::move (mappings), std::move (outer_attrs)),\n@@ -1663,6 +1670,7 @@ class EnumItem : public Item\n   }\n \n   virtual std::string as_string () const override;\n+  virtual EnumItemKind get_enum_item_kind () const { return Named; };\n \n   // not pure virtual as not abstract\n   void accept_vis (HIRFullVisitor &vis) override;\n@@ -1687,6 +1695,11 @@ class EnumItemTuple : public EnumItem\n   // Returns whether tuple enum item has tuple fields.\n   bool has_tuple_fields () const { return !tuple_fields.empty (); }\n \n+  EnumItemKind get_enum_item_kind () const override\n+  {\n+    return EnumItemKind::Tuple;\n+  }\n+\n   EnumItemTuple (Analysis::NodeMapping mappings, Identifier variant_name,\n \t\t std::vector<TupleField> tuple_fields, AST::AttrVec outer_attrs,\n \t\t Location locus)\n@@ -1720,6 +1733,11 @@ class EnumItemStruct : public EnumItem\n   // Returns whether struct enum item has struct fields.\n   bool has_struct_fields () const { return !struct_fields.empty (); }\n \n+  EnumItemKind get_enum_item_kind () const override\n+  {\n+    return EnumItemKind::Struct;\n+  }\n+\n   EnumItemStruct (Analysis::NodeMapping mappings, Identifier variant_name,\n \t\t  std::vector<StructField> struct_fields,\n \t\t  AST::AttrVec outer_attrs, Location locus)\n@@ -1777,6 +1795,11 @@ class EnumItemDiscriminant : public EnumItem\n   EnumItemDiscriminant (EnumItemDiscriminant &&other) = default;\n   EnumItemDiscriminant &operator= (EnumItemDiscriminant &&other) = default;\n \n+  EnumItemKind get_enum_item_kind () const override\n+  {\n+    return EnumItemKind::Discriminant;\n+  }\n+\n   std::string as_string () const override;\n \n   void accept_vis (HIRFullVisitor &vis) override;"}, {"sha": "bf2480b23c545a7a43497e6da4d9ffad22ba9a75", "filename": "gcc/rust/privacy/rust-reachability.cc", "status": "modified", "additions": 51, "deletions": 4, "changes": 55, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e76b6399550f6de221cd7fb88e981c0e72db7f86/gcc%2Frust%2Fprivacy%2Frust-reachability.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e76b6399550f6de221cd7fb88e981c0e72db7f86/gcc%2Frust%2Fprivacy%2Frust-reachability.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fprivacy%2Frust-reachability.cc?ref=e76b6399550f6de221cd7fb88e981c0e72db7f86", "patch": "@@ -69,6 +69,9 @@ ReachabilityVisitor::visit_generic_predicates (\n void\n ReachabilityVisitor::visit (HIR::Module &mod)\n {\n+  auto reach = get_reachability_level (mod.get_visibility ());\n+  reach = ctx.update_reachability (mod.get_mappings (), reach);\n+\n   for (auto &item : mod.get_items ())\n     {\n       // FIXME: Is that what we want to do? Yes? Only visit the items with\n@@ -83,11 +86,17 @@ ReachabilityVisitor::visit (HIR::Module &mod)\n \n void\n ReachabilityVisitor::visit (HIR::ExternCrate &crate)\n-{}\n+{\n+  auto reach = get_reachability_level (crate.get_visibility ());\n+  reach = ctx.update_reachability (crate.get_mappings (), reach);\n+}\n \n void\n ReachabilityVisitor::visit (HIR::UseDeclaration &use_decl)\n-{}\n+{\n+  auto reach = get_reachability_level (use_decl.get_visibility ());\n+  reach = ctx.update_reachability (use_decl.get_mappings (), reach);\n+}\n \n void\n ReachabilityVisitor::visit (HIR::Function &func)\n@@ -141,6 +150,38 @@ ReachabilityVisitor::visit (HIR::Enum &enum_item)\n \n   enum_reach = ctx.update_reachability (enum_item.get_mappings (), enum_reach);\n   visit_generic_predicates (enum_item.get_generic_params (), enum_reach);\n+\n+  for (const auto &variant : enum_item.get_variants ())\n+    {\n+      auto variant_reach\n+\t= ctx.update_reachability (variant->get_mappings (), enum_reach);\n+\n+      switch (variant->get_enum_item_kind ())\n+\t{\n+\t  case HIR::EnumItem::Tuple: {\n+\t    // Should we update the fields only if they are public? Similarly to\n+\t    // what we do in the ReachabilityVisitor for HIR::TupleStruct?\n+\t    auto tuple_variant\n+\t      = static_cast<HIR::EnumItemTuple *> (variant.get ());\n+\t    for (const auto &field : tuple_variant->get_tuple_fields ())\n+\t      ctx.update_reachability (field.get_mappings (), variant_reach);\n+\t    break;\n+\t  }\n+\t  case HIR::EnumItem::Struct: {\n+\t    // Should we update the fields only if they are public? Similarly to\n+\t    // what we do in the ReachabilityVisitor for HIR::StructStruct?\n+\t    auto struct_variant\n+\t      = static_cast<HIR::EnumItemStruct *> (variant.get ());\n+\t    for (const auto &field : struct_variant->get_struct_fields ())\n+\t      ctx.update_reachability (field.get_mappings (), variant_reach);\n+\t    break;\n+\t  }\n+\t// Nothing nested to visit in that case\n+\tcase HIR::EnumItem::Named:\n+\tcase HIR::EnumItem::Discriminant:\n+\t  break;\n+\t}\n+    }\n }\n \n void\n@@ -155,11 +196,17 @@ ReachabilityVisitor::visit (HIR::Union &union_item)\n \n void\n ReachabilityVisitor::visit (HIR::ConstantItem &const_item)\n-{}\n+{\n+  auto reach = get_reachability_level (const_item.get_visibility ());\n+  reach = ctx.update_reachability (const_item.get_mappings (), reach);\n+}\n \n void\n ReachabilityVisitor::visit (HIR::StaticItem &static_item)\n-{}\n+{\n+  auto reach = get_reachability_level (static_item.get_visibility ());\n+  reach = ctx.update_reachability (static_item.get_mappings (), reach);\n+}\n \n void\n ReachabilityVisitor::visit (HIR::Trait &trait)"}]}