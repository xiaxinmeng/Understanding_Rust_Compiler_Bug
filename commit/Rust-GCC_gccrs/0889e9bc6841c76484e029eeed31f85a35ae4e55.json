{"sha": "0889e9bc6841c76484e029eeed31f85a35ae4e55", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDg4OWU5YmM2ODQxYzc2NDg0ZTAyOWVlZWQzMWY4NWEzNWFlNGU1NQ==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2008-12-09T23:01:15Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2008-12-09T23:01:15Z"}, "message": "re PR middle-end/38454 (memcpy folding breaks -D_FORTIFY_SOURCE=2 protection)\n\n\tPR middle-end/38454\n\t* function.h (struct function): Add always_inline_functions_inlined.\n\t* ipa-inline.c (cgraph_early_inlining): Set it to true.\n\t* tree-optimize.c (execute_fixup_cfg): Likewise.\n\t* builtins.c (avoid_folding_inline_builtin): New function.\n\t(fold_call_expr): Don't optimize always_inline builtins before\n\tinlining.\n\t(fold_call_stmt): Likewise.\n\t(fold_builtin_call_array): Likewise.  Don't call\n\tfold_builtin_varargs for BUILT_IN_MD builtins.\n\n\t* gcc.dg/memset-1.c: New test.\n\t* gcc.dg/memcpy-2.c: New test.\n\nFrom-SVN: r142617", "tree": {"sha": "f58c3d091da63db8a731136167c34e30bcf310d2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f58c3d091da63db8a731136167c34e30bcf310d2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0889e9bc6841c76484e029eeed31f85a35ae4e55", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0889e9bc6841c76484e029eeed31f85a35ae4e55", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0889e9bc6841c76484e029eeed31f85a35ae4e55", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0889e9bc6841c76484e029eeed31f85a35ae4e55/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "218d1c24bb8bd00b49a4c9097b5777a2c25ba231", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/218d1c24bb8bd00b49a4c9097b5777a2c25ba231", "html_url": "https://github.com/Rust-GCC/gccrs/commit/218d1c24bb8bd00b49a4c9097b5777a2c25ba231"}], "stats": {"total": 97, "additions": 97, "deletions": 0}, "files": [{"sha": "95b8e98eb07eb4cbb9580b7a4343aa2ebf101d0c", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0889e9bc6841c76484e029eeed31f85a35ae4e55/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0889e9bc6841c76484e029eeed31f85a35ae4e55/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=0889e9bc6841c76484e029eeed31f85a35ae4e55", "patch": "@@ -1,5 +1,16 @@\n 2008-12-09  Jakub Jelinek  <jakub@redhat.com>\n \n+\tPR middle-end/38454\n+\t* function.h (struct function): Add always_inline_functions_inlined.\n+\t* ipa-inline.c (cgraph_early_inlining): Set it to true.\n+\t* tree-optimize.c (execute_fixup_cfg): Likewise.\n+\t* builtins.c (avoid_folding_inline_builtin): New function.\n+\t(fold_call_expr): Don't optimize always_inline builtins before\n+\tinlining.\n+\t(fold_call_stmt): Likewise.\n+\t(fold_builtin_call_array): Likewise.  Don't call\n+\tfold_builtin_varargs for BUILT_IN_MD builtins.\n+\n \tPR tree-optimization/37416\n \t* tree-scalar-evolution.c (follow_ssa_edge_in_rhs): Handle NOP_EXPR.\n "}, {"sha": "afb3b3fdb328a31b5fd1b20047313b9faf9fdf6b", "filename": "gcc/builtins.c", "status": "modified", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0889e9bc6841c76484e029eeed31f85a35ae4e55/gcc%2Fbuiltins.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0889e9bc6841c76484e029eeed31f85a35ae4e55/gcc%2Fbuiltins.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbuiltins.c?ref=0889e9bc6841c76484e029eeed31f85a35ae4e55", "patch": "@@ -10797,6 +10797,22 @@ fold_builtin_varargs (tree fndecl, tree exp, bool ignore ATTRIBUTE_UNUSED)\n   return NULL_TREE;\n }\n \n+/* Return true if FNDECL shouldn't be folded right now.\n+   If a built-in function has an inline attribute always_inline\n+   wrapper, defer folding it after always_inline functions have\n+   been inlined, otherwise e.g. -D_FORTIFY_SOURCE checking\n+   might not be performed.  */\n+\n+static bool\n+avoid_folding_inline_builtin (tree fndecl)\n+{\n+  return (DECL_DECLARED_INLINE_P (fndecl)\n+\t  && DECL_DISREGARD_INLINE_LIMITS (fndecl)\n+\t  && cfun\n+\t  && !cfun->always_inline_functions_inlined\n+\t  && lookup_attribute (\"always_inline\", DECL_ATTRIBUTES (fndecl)));\n+}\n+\n /* A wrapper function for builtin folding that prevents warnings for\n    \"statement without effect\" and the like, caused by removing the\n    call node earlier than the warning is generated.  */\n@@ -10829,6 +10845,9 @@ fold_call_expr (tree exp, bool ignore)\n \t    return NULL_TREE;\n \t}\n \n+      if (avoid_folding_inline_builtin (fndecl))\n+\treturn NULL_TREE;\n+\n       /* FIXME: Don't use a list in this interface.  */\n       if (DECL_BUILT_IN_CLASS (fndecl) == BUILT_IN_MD)\n \t  return targetm.fold_builtin (fndecl, CALL_EXPR_ARGS (exp), ignore);\n@@ -10931,6 +10950,8 @@ fold_builtin_call_array (tree type,\n \t\t&& DECL_FUNCTION_CODE (fndecl2) == BUILT_IN_VA_ARG_PACK)\n \t      return build_call_array (type, fn, n, argarray);\n \t  }\n+\tif (avoid_folding_inline_builtin (fndecl))\n+\t  return build_call_array (type, fn, n, argarray);\n         if (DECL_BUILT_IN_CLASS (fndecl) == BUILT_IN_MD)\n           {\n             tree arglist = NULL_TREE;\n@@ -10939,6 +10960,7 @@ fold_builtin_call_array (tree type,\n             ret = targetm.fold_builtin (fndecl, arglist, false);\n             if (ret)\n               return ret;\n+\t    return build_call_array (type, fn, n, argarray);\n           }\n         else if (n <= MAX_ARGS_TO_FOLD_BUILTIN)\n           {\n@@ -13647,6 +13669,8 @@ fold_call_stmt (gimple stmt, bool ignore)\n     {\n       int nargs = gimple_call_num_args (stmt);\n \n+      if (avoid_folding_inline_builtin (fndecl))\n+\treturn NULL_TREE;\n       /* FIXME: Don't use a list in this interface.  */\n       if (DECL_BUILT_IN_CLASS (fndecl) == BUILT_IN_MD)\n         {"}, {"sha": "68df55e1a6e0e033150ddcda132b8a0ff069375a", "filename": "gcc/function.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0889e9bc6841c76484e029eeed31f85a35ae4e55/gcc%2Ffunction.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0889e9bc6841c76484e029eeed31f85a35ae4e55/gcc%2Ffunction.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffunction.h?ref=0889e9bc6841c76484e029eeed31f85a35ae4e55", "patch": "@@ -578,6 +578,7 @@ struct function GTY(())\n   unsigned int dont_save_pending_sizes_p : 1;\n \n   unsigned int after_inlining : 1;\n+  unsigned int always_inline_functions_inlined : 1;\n \n   /* Fields below this point are not set for abstract functions; see\n      allocate_struct_function.  */"}, {"sha": "35ec9a60f869d6087f82c0f02cd45fa0b889e3af", "filename": "gcc/ipa-inline.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0889e9bc6841c76484e029eeed31f85a35ae4e55/gcc%2Fipa-inline.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0889e9bc6841c76484e029eeed31f85a35ae4e55/gcc%2Fipa-inline.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-inline.c?ref=0889e9bc6841c76484e029eeed31f85a35ae4e55", "patch": "@@ -1528,6 +1528,7 @@ cgraph_early_inlining (void)\n       todo = optimize_inline_calls (current_function_decl);\n       timevar_pop (TV_INTEGRATION);\n     }\n+  cfun->always_inline_functions_inlined = true;\n   return todo;\n }\n "}, {"sha": "6f8449a5ea37291be4aeef98e1a5ce8df048a230", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0889e9bc6841c76484e029eeed31f85a35ae4e55/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0889e9bc6841c76484e029eeed31f85a35ae4e55/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=0889e9bc6841c76484e029eeed31f85a35ae4e55", "patch": "@@ -1,3 +1,9 @@\n+2008-12-09  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR middle-end/38454\n+\t* gcc.dg/memset-1.c: New test.\n+\t* gcc.dg/memcpy-2.c: New test.\n+\n 2008-12-09  Mikael Morin  <mikael.morin@tele2.fr>\n \n \tPR fortran/35983"}, {"sha": "24464abd4a9257d90053917b23493f3d4ac0f832", "filename": "gcc/testsuite/gcc.dg/memcpy-2.c", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0889e9bc6841c76484e029eeed31f85a35ae4e55/gcc%2Ftestsuite%2Fgcc.dg%2Fmemcpy-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0889e9bc6841c76484e029eeed31f85a35ae4e55/gcc%2Ftestsuite%2Fgcc.dg%2Fmemcpy-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fmemcpy-2.c?ref=0889e9bc6841c76484e029eeed31f85a35ae4e55", "patch": "@@ -0,0 +1,25 @@\n+/* PR middle-end/38454 */\n+/* { dg-do compile } */\n+/* { dg-options \"-O2\" } */\n+\n+typedef __SIZE_TYPE__ size_t;\n+\n+extern inline __attribute__((gnu_inline, always_inline, artificial)) void *\n+memcpy (void *__restrict dest, const void *__restrict src, size_t len)\n+{\n+  return __builtin___memcpy_chk (dest, /* { dg-warning \"will always overflow destination buffer\" } */\n+\t\t\t\t src, len, __builtin_object_size (dest, 0));\n+}\n+\n+struct S { char buf[10]; } s;\n+\n+void\n+foo (void)\n+{\n+  char buf[12];\n+  char *p = buf + 4;\n+  struct S *q = (struct S *) p;\n+  memcpy (q, &s, sizeof (s));\n+}\n+\n+/* { dg-final { scan-assembler \"__memcpy_chk\" } } */"}, {"sha": "677ae91bd0e7f5f04b4ce3c1a93dfcbcee188d44", "filename": "gcc/testsuite/gcc.dg/memset-1.c", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0889e9bc6841c76484e029eeed31f85a35ae4e55/gcc%2Ftestsuite%2Fgcc.dg%2Fmemset-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0889e9bc6841c76484e029eeed31f85a35ae4e55/gcc%2Ftestsuite%2Fgcc.dg%2Fmemset-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fmemset-1.c?ref=0889e9bc6841c76484e029eeed31f85a35ae4e55", "patch": "@@ -0,0 +1,28 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2\" } */\n+\n+typedef __SIZE_TYPE__ size_t;\n+\n+extern void warn_memset_zero_len (void)\n+__attribute__((__warning__ (\"memset used with constant zero length parameter;\"\n+\t\t\t    \" this could be due to transposed parameters\")));\n+\n+extern inline __attribute__((gnu_inline, always_inline, artificial)) void *\n+memset (void *dest, int ch, size_t len)\n+{\n+  if (__builtin_constant_p (len) && len == 0)\n+    {\n+      warn_memset_zero_len ();\t/* { dg-warning \"memset used with constant zero\" } */\n+      return dest;\n+    }\n+  return __builtin_memset (dest, ch, len);\n+}\n+\n+char buf[10];\n+\n+int\n+main (void)\n+{\n+  memset (buf, sizeof (buf), 0);\n+  return 0;\n+}"}, {"sha": "0802e5af82552e03365ccb9781b0d646813048e1", "filename": "gcc/tree-optimize.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0889e9bc6841c76484e029eeed31f85a35ae4e55/gcc%2Ftree-optimize.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0889e9bc6841c76484e029eeed31f85a35ae4e55/gcc%2Ftree-optimize.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-optimize.c?ref=0889e9bc6841c76484e029eeed31f85a35ae4e55", "patch": "@@ -293,6 +293,7 @@ execute_fixup_cfg (void)\n   int todo = gimple_in_ssa_p (cfun) ? TODO_verify_ssa : 0;\n \n   cfun->after_inlining = true;\n+  cfun->always_inline_functions_inlined = true;\n \n   if (cfun->eh)\n     FOR_EACH_BB (bb)"}]}