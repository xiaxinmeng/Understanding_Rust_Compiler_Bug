{"sha": "5ab5907a2a98b52006be353c626c6074f3f79505", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWFiNTkwN2EyYTk4YjUyMDA2YmUzNTNjNjI2YzYwNzRmM2Y3OTUwNQ==", "commit": {"author": {"name": "Daniel Franke", "email": "franke.daniel@gmail.com", "date": "2007-04-12T18:23:03Z"}, "committer": {"name": "Daniel Franke", "email": "dfranke@gcc.gnu.org", "date": "2007-04-12T18:23:03Z"}, "message": "re PR fortran/31234 (Thread-safety of random_number should be documented.)\n\n2007-04-12  Daniel Franke  <franke.daniel@gmail.com>\n\n        PR fortran/31234\n        * intrinsic.texi (RANDOM_SEED, RANDOM_NUMBER): New.\n\nFrom-SVN: r123760", "tree": {"sha": "c493cd99e6d2b26a78c8d290829f25f2e17064b9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c493cd99e6d2b26a78c8d290829f25f2e17064b9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5ab5907a2a98b52006be353c626c6074f3f79505", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5ab5907a2a98b52006be353c626c6074f3f79505", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5ab5907a2a98b52006be353c626c6074f3f79505", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5ab5907a2a98b52006be353c626c6074f3f79505/comments", "author": {"login": "dfranke76", "id": 15729164, "node_id": "MDQ6VXNlcjE1NzI5MTY0", "avatar_url": "https://avatars.githubusercontent.com/u/15729164?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dfranke76", "html_url": "https://github.com/dfranke76", "followers_url": "https://api.github.com/users/dfranke76/followers", "following_url": "https://api.github.com/users/dfranke76/following{/other_user}", "gists_url": "https://api.github.com/users/dfranke76/gists{/gist_id}", "starred_url": "https://api.github.com/users/dfranke76/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dfranke76/subscriptions", "organizations_url": "https://api.github.com/users/dfranke76/orgs", "repos_url": "https://api.github.com/users/dfranke76/repos", "events_url": "https://api.github.com/users/dfranke76/events{/privacy}", "received_events_url": "https://api.github.com/users/dfranke76/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "e8a25349277ba07e340785c2e03d1ad42ae91763", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e8a25349277ba07e340785c2e03d1ad42ae91763", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e8a25349277ba07e340785c2e03d1ad42ae91763"}], "stats": {"total": 77, "additions": 71, "deletions": 6}, "files": [{"sha": "28e2d16716ecc45c099ea0e522e0ce4cc855c823", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5ab5907a2a98b52006be353c626c6074f3f79505/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5ab5907a2a98b52006be353c626c6074f3f79505/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=5ab5907a2a98b52006be353c626c6074f3f79505", "patch": "@@ -1,3 +1,8 @@\n+2007-04-12  Daniel Franke  <franke.daniel@gmail.com>\n+\n+\tPR fortran/31234\n+\t* intrinsic.texi (RANDOM_SEED, RANDOM_NUMBER): New.\n+\n 2007-04-12  Tobias Schl\ufffdter  <tobi@gcc.gnu.org>\n \n \tPR fortran/31266"}, {"sha": "56e6b319eb3f1fc44c98cc2c35b00c4d1556d988", "filename": "gcc/fortran/intrinsic.texi", "status": "modified", "additions": 66, "deletions": 6, "changes": 72, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5ab5907a2a98b52006be353c626c6074f3f79505/gcc%2Ffortran%2Fintrinsic.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5ab5907a2a98b52006be353c626c6074f3f79505/gcc%2Ffortran%2Fintrinsic.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fintrinsic.texi?ref=5ab5907a2a98b52006be353c626c6074f3f79505", "patch": "@@ -7614,20 +7614,43 @@ end program test_rand\n @cindex @code{RANDOM_NUMBER} intrinsic\n @cindex random numbers\n \n-Intrinsic implemented, documentation pending.\n-\n @table @asis\n @item @emph{Description}:\n+Returns a single pseudorandom number or an array of pseudorandom numbers\n+from the uniform distribution over the range @math{ 0 \\leq x < 1}.\n+\n @item @emph{Standard}:\n F95 and later\n \n @item @emph{Class}:\n Elemental subroutine\n \n @item @emph{Syntax}:\n+@code{RANDOM_NUMBER(HARVEST)}\n+\n @item @emph{Arguments}:\n-@item @emph{Return value}:\n+@multitable @columnfractions .15 .70\n+@item @var{HARVEST} @tab Shall be a scalar or an array of type @code{REAL(*)}.\n+@end multitable\n+\n @item @emph{Example}:\n+@smallexample\n+program test_random_number\n+  REAL :: r(5,5)\n+  CALL init_random_seed()         ! see example of RANDOM_SEED\n+  CALL RANDOM_NUMBER(r)\n+end program\n+@end smallexample\n+\n+@item @emph{Note}:\n+The implemented random number generator is thread safe if used within\n+OpenMP directives, i. e. its state will be consistent while called from\n+multiple threads. Please note that the currently implemented KISS generator \n+does not create random numbers in parallel from multiple sources, but in\n+sequence from a single source. If your OpenMP-enabled application heavily\n+relies on random numbers, you should consider employing a dedicated parallel\n+random number generator instead.\n+\n @item @emph{See also}:\n @ref{RANDOM_SEED}\n @end table\n@@ -7639,20 +7662,57 @@ Elemental subroutine\n @cindex @code{RANDOM_SEED} intrinsic\n @cindex random numbers\n \n-Intrinsic implemented, documentation pending.\n-\n @table @asis\n @item @emph{Description}:\n+Restarts or queries the state of the pseudorandom number generator used by \n+@code{RANDOM_NUMBER}.\n+\n+If @code{RANDOM_SEED} is called without arguments, it is initialized to\n+a default state. The example below shows how to initialize the random \n+seed based on the system's time.\n+\n @item @emph{Standard}:\n F95 and later\n \n @item @emph{Class}:\n Subroutine\n \n @item @emph{Syntax}:\n+@code{CALL RANDOM_SEED(SIZE, PUT, GET)}\n+\n @item @emph{Arguments}:\n-@item @emph{Return value}:\n+@multitable @columnfractions .15 .70\n+@item @var{SIZE} @tab (Optional) Shall be a scalar and of type default \n+@code{INTEGER}, with @code{INTENT(OUT)}. It specifies the minimum size \n+of the arrays used with the @var{PUT} and @var{GET} arguments.\n+@item @var{PUT}  @tab (Optional) Shall be an array of type default \n+@code{INTEGER} and rank one. It is @code{INTENT(IN)} and the size of \n+the array must be larger than or equal to the number returned by the \n+@var{SIZE} argument.\n+@item @var{GET}  @tab (Optional) Shall be an array of type default \n+@code{INTEGER} and rank one. It is @code{INTENT(OUT)} and the size \n+of the array must be larger than or equal to the number returned by \n+the @var{SIZE} argument.\n+@end multitable\n+\n @item @emph{Example}:\n+@smallexample\n+SUBROUTINE init_random_seed()\n+  INTEGER :: i, n, clock\n+  INTEGER, DIMENSION(:), ALLOCATABLE :: seed\n+\n+  CALL RANDOM_SEED(size = n)\n+  ALLOCATE(seed(n))\n+\n+  CALL SYSTEM_CLOCK(COUNT=clock)\n+\n+  seed = clock + 37 * (/ (i - 1, i = 1, n) /)\n+  CALL RANDOM_SEED(PUT = seed)\n+\n+  DEALLOCATE(seed)\n+END SUBROUTINE\n+@end smallexample\n+\n @item @emph{See also}:\n @ref{RANDOM_NUMBER}\n @end table"}]}