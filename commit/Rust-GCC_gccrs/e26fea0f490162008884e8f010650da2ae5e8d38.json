{"sha": "e26fea0f490162008884e8f010650da2ae5e8d38", "node_id": "C_kwDOANBUbNoAKGUyNmZlYTBmNDkwMTYyMDA4ODg0ZThmMDEwNjUwZGEyYWU1ZThkMzg", "commit": {"author": {"name": "Pierre-Emmanuel Patry", "email": "pierre-emmanuel.patry@embecosm.com", "date": "2023-05-30T08:57:01Z"}, "committer": {"name": "Philip Herron", "email": "philip.herron@embecosm.com", "date": "2023-06-01T15:23:35Z"}, "message": "libproc_macro: Add cpp Span representation\n\nAdd Span representation in libproc_macro cpp part of the library.\nIntegrate spans to existing types.\n\ngcc/rust/ChangeLog:\n\n\t* util/rust-token-converter.cc (convert): Update call to\n\tconstructors with location information.\n\t(handle_suffix): Convert token locus to a Span and use it in the\n\tliteral.\n\nChangeLog:\n\n\t* libgrust/libproc_macro/Makefile.am: Add span.cc\n\t* libgrust/libproc_macro/Makefile.in: Regenerate.\n\t* libgrust/libproc_macro/span.cc: New file.\n\t* libgrust/libproc_macro/span.h: New file.\n\t* libgrust/libproc_macro/group.cc (Group::make_group): Add span\n\targument.\n\t* libgrust/libproc_macro/group.h (GROUP_H): Add include\n\tdirective for spans.\n\t* libgrust/libproc_macro/ident.cc (Ident__new): Add span\n\targument.\n\t(Ident__new_raw): Likewise.\n\t(Ident::make_ident): Likewise.\n\t* libgrust/libproc_macro/ident.h (Ident__new): Likewise.\n\t(Ident__new_raw): Likewise.\n\t* libgrust/libproc_macro/literal.cc (Literal::clone): Clone the\n\tspan.\n\t(Literal::make_literal): Add span argument.\n\t(Literal::make_u8): Likewise.\n\t(Literal::make_u16): Likewise.\n\t(Literal::make_u32): Likewise.\n\t(Literal::make_u64): Likewise.\n\t(Literal::make_i8): Likewise.\n\t(Literal::make_i16): Likewise.\n\t(Literal::make_i32): Likewise.\n\t(Literal::make_i64): Likewise.\n\t(Literal::make_string): Likewise.\n\t(Literal::make_byte_string): Likewise.\n\t(Literal::make_f32): Likewise.\n\t(Literal::make_f64): Likewise.\n\t(Literal::make_char): Likewise.\n\t(Literal::make_usize): Likewise.\n\t(Literal::make_isize): Likewise.\n\t* libgrust/libproc_macro/literal.h (struct Literal): Add span to\n\tLiteral structure.\n\t* libgrust/libproc_macro/punct.cc (Punct::make_punct): Add span\n\targument to punct constructor.\n\t* libgrust/libproc_macro/punct.h (struct Punct): Add span to\n\tPunct structure.\n\nSigned-off-by: Pierre-Emmanuel Patry <pierre-emmanuel.patry@embecosm.com>", "tree": {"sha": "0f5135a61e5ec305c333030ca05cea7d3b7019b3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0f5135a61e5ec305c333030ca05cea7d3b7019b3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e26fea0f490162008884e8f010650da2ae5e8d38", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e26fea0f490162008884e8f010650da2ae5e8d38", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e26fea0f490162008884e8f010650da2ae5e8d38", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e26fea0f490162008884e8f010650da2ae5e8d38/comments", "author": {"login": "P-E-P", "id": 32375388, "node_id": "MDQ6VXNlcjMyMzc1Mzg4", "avatar_url": "https://avatars.githubusercontent.com/u/32375388?v=4", "gravatar_id": "", "url": "https://api.github.com/users/P-E-P", "html_url": "https://github.com/P-E-P", "followers_url": "https://api.github.com/users/P-E-P/followers", "following_url": "https://api.github.com/users/P-E-P/following{/other_user}", "gists_url": "https://api.github.com/users/P-E-P/gists{/gist_id}", "starred_url": "https://api.github.com/users/P-E-P/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/P-E-P/subscriptions", "organizations_url": "https://api.github.com/users/P-E-P/orgs", "repos_url": "https://api.github.com/users/P-E-P/repos", "events_url": "https://api.github.com/users/P-E-P/events{/privacy}", "received_events_url": "https://api.github.com/users/P-E-P/received_events", "type": "User", "site_admin": false}, "committer": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3f60f6104a559fc14ccda51157f8db6e43df0d52", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3f60f6104a559fc14ccda51157f8db6e43df0d52", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3f60f6104a559fc14ccda51157f8db6e43df0d52"}], "stats": {"total": 199, "additions": 155, "deletions": 44}, "files": [{"sha": "a50d7218113342bd3019988f77f3231b828850d2", "filename": "gcc/rust/util/rust-token-converter.cc", "status": "modified", "additions": 21, "deletions": 5, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e26fea0f490162008884e8f010650da2ae5e8d38/gcc%2Frust%2Futil%2Frust-token-converter.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e26fea0f490162008884e8f010650da2ae5e8d38/gcc%2Frust%2Futil%2Frust-token-converter.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Futil%2Frust-token-converter.cc?ref=e26fea0f490162008884e8f010650da2ae5e8d38", "patch": "@@ -50,6 +50,12 @@ pop_group (std::vector<ProcMacro::TokenStream> &streams,\n   streams.back ().push (tt);\n }\n \n+static ProcMacro::Span\n+convert (Location location)\n+{\n+  return ProcMacro::Span::make_unknown ();\n+}\n+\n static void\n handle_suffix (ProcMacro::TokenStream &ts, const const_TokenPtr &token,\n \t       ProcMacro::LitKind kind)\n@@ -58,7 +64,8 @@ handle_suffix (ProcMacro::TokenStream &ts, const const_TokenPtr &token,\n   auto lookup = suffixes.lookup (token->get_type_hint ());\n   auto suffix = suffixes.is_iter_ok (lookup) ? lookup->second : \"\";\n   ts.push (ProcMacro::TokenTree::make_tokentree (\n-    ProcMacro::Literal::make_literal (kind, str, suffix)));\n+    ProcMacro::Literal::make_literal (kind, convert (token->get_locus ()), str,\n+\t\t\t\t      suffix)));\n }\n \n ProcMacro::TokenStream\n@@ -82,22 +89,26 @@ convert (const std::vector<const_TokenPtr> &tokens)\n \tcase CHAR_LITERAL:\n \t  trees.back ().push (ProcMacro::TokenTree::make_tokentree (\n \t    ProcMacro::Literal::make_literal (ProcMacro::LitKind::make_char (),\n+\t\t\t\t\t      convert (token->get_locus ()),\n \t\t\t\t\t      token->as_string ())));\n \t  break;\n \tcase STRING_LITERAL:\n \t  trees.back ().push (ProcMacro::TokenTree::make_tokentree (\n \t    ProcMacro::Literal::make_literal (ProcMacro::LitKind::make_str (),\n+\t\t\t\t\t      convert (token->get_locus ()),\n \t\t\t\t\t      token->as_string ())));\n \t  break;\n \tcase BYTE_CHAR_LITERAL:\n \t  trees.back ().push (ProcMacro::TokenTree::make_tokentree (\n \t    ProcMacro::Literal::make_literal (ProcMacro::LitKind::make_byte (),\n+\t\t\t\t\t      convert (token->get_locus ()),\n \t\t\t\t\t      token->as_string ())));\n \t  break;\n \tcase BYTE_STRING_LITERAL:\n \t  trees.back ().push (ProcMacro::TokenTree::make_tokentree (\n \t    ProcMacro::Literal::make_literal (\n-\t      ProcMacro::LitKind::make_byte_str (), token->as_string ())));\n+\t      ProcMacro::LitKind::make_byte_str (),\n+\t      convert (token->get_locus ()), token->as_string ())));\n \t  break;\n \t// Ident\n \tcase IDENTIFIER:\n@@ -157,7 +168,8 @@ convert (const std::vector<const_TokenPtr> &tokens)\n \tcase FALSE_LITERAL:\n \tcase TRUE_LITERAL:\n \t  trees.back ().push (ProcMacro::TokenTree::make_tokentree (\n-\t    ProcMacro::Ident::make_ident (token->as_string ())));\n+\t    ProcMacro::Ident::make_ident (token->as_string (),\n+\t\t\t\t\t  convert (token->get_locus ()))));\n \t  break;\n \t// Joint punct\n \tcase OR:\n@@ -188,9 +200,12 @@ convert (const std::vector<const_TokenPtr> &tokens)\n \t    auto it = str.cbegin ();\n \t    for (; it != str.cend () - 1; it++)\n \t      trees.back ().push (ProcMacro::TokenTree::make_tokentree (\n-\t\tProcMacro::Punct::make_punct (*it, ProcMacro::JOINT)));\n+\t\tProcMacro::Punct::make_punct (*it,\n+\t\t\t\t\t      convert (token->get_locus ()),\n+\t\t\t\t\t      ProcMacro::JOINT)));\n \t    trees.back ().push (ProcMacro::TokenTree::make_tokentree (\n-\t      ProcMacro::Punct::make_punct (*it, ProcMacro::ALONE)));\n+\t      ProcMacro::Punct::make_punct (*it, convert (token->get_locus ()),\n+\t\t\t\t\t    ProcMacro::ALONE)));\n \t  }\n \t  break;\n \t// Alone punct tokens\n@@ -218,6 +233,7 @@ convert (const std::vector<const_TokenPtr> &tokens)\n \tcase SINGLE_QUOTE:\n \t  trees.back ().push (ProcMacro::TokenTree::make_tokentree (\n \t    ProcMacro::Punct::make_punct (token->as_string ()[0],\n+\t\t\t\t\t  convert (token->get_locus ()),\n \t\t\t\t\t  ProcMacro::ALONE)));\n \t  break;\n \tcase RIGHT_PAREN:"}, {"sha": "bae526eb47b572a14c820c26b82b7c11f5982ddf", "filename": "libgrust/libproc_macro/Makefile.am", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e26fea0f490162008884e8f010650da2ae5e8d38/libgrust%2Flibproc_macro%2FMakefile.am", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e26fea0f490162008884e8f010650da2ae5e8d38/libgrust%2Flibproc_macro%2FMakefile.am", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgrust%2Flibproc_macro%2FMakefile.am?ref=e26fea0f490162008884e8f010650da2ae5e8d38", "patch": "@@ -54,6 +54,7 @@ objext = @OBJEXT@\n \n REQUIRED_OFILES =\t\t\t\t\t\t\t\\\n \t./proc_macro.$(objext) \\\n+\t./span.$(objext) \\\n \t./literal.$(objext) \\\n \t./group.$(objext) \\\n \t./ident.$(objext) \\"}, {"sha": "55c47d3c9b887cd2665c78a9e57c178f982a3693", "filename": "libgrust/libproc_macro/Makefile.in", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e26fea0f490162008884e8f010650da2ae5e8d38/libgrust%2Flibproc_macro%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e26fea0f490162008884e8f010650da2ae5e8d38/libgrust%2Flibproc_macro%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgrust%2Flibproc_macro%2FMakefile.in?ref=e26fea0f490162008884e8f010650da2ae5e8d38", "patch": "@@ -307,6 +307,7 @@ TARGETLIB = ./libproc_macro.a\n objext = @OBJEXT@\n REQUIRED_OFILES = \\\n \t./proc_macro.$(objext) \\\n+\t./span.$(objext) \\\n \t./literal.$(objext) \\\n \t./group.$(objext) \\\n \t./ident.$(objext) \\"}, {"sha": "38730d8afd9b6e7c918ef0c77c05594fe90675ea", "filename": "libgrust/libproc_macro/group.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e26fea0f490162008884e8f010650da2ae5e8d38/libgrust%2Flibproc_macro%2Fgroup.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e26fea0f490162008884e8f010650da2ae5e8d38/libgrust%2Flibproc_macro%2Fgroup.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgrust%2Flibproc_macro%2Fgroup.cc?ref=e26fea0f490162008884e8f010650da2ae5e8d38", "patch": "@@ -25,9 +25,9 @@\n namespace ProcMacro {\n \n Group\n-Group::make_group (TokenStream stream, Delimiter delim)\n+Group::make_group (TokenStream stream, Delimiter delim, Span span)\n {\n-  return {delim, stream};\n+  return {delim, stream, span};\n }\n \n void"}, {"sha": "fa76d4b15a52a9b16ed469a3e22d7ad0e2023f06", "filename": "libgrust/libproc_macro/group.h", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e26fea0f490162008884e8f010650da2ae5e8d38/libgrust%2Flibproc_macro%2Fgroup.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e26fea0f490162008884e8f010650da2ae5e8d38/libgrust%2Flibproc_macro%2Fgroup.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgrust%2Flibproc_macro%2Fgroup.h?ref=e26fea0f490162008884e8f010650da2ae5e8d38", "patch": "@@ -23,6 +23,7 @@\n #ifndef GROUP_H\n #define GROUP_H\n \n+#include \"span.h\"\n #include \"tokenstream.h\"\n \n namespace ProcMacro {\n@@ -39,9 +40,11 @@ struct Group\n {\n   Delimiter delimiter;\n   TokenStream stream;\n+  Span span;\n \n public:\n-  static Group make_group (TokenStream stream, Delimiter delim);\n+  static Group make_group (TokenStream stream, Delimiter delim,\n+\t\t\t   Span span = Span::make_unknown ());\n \n   static void drop (Group *g);\n };"}, {"sha": "236970519da4679ecbb369300c6333569ef28cf5", "filename": "libgrust/libproc_macro/ident.cc", "status": "modified", "additions": 10, "deletions": 9, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e26fea0f490162008884e8f010650da2ae5e8d38/libgrust%2Flibproc_macro%2Fident.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e26fea0f490162008884e8f010650da2ae5e8d38/libgrust%2Flibproc_macro%2Fident.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgrust%2Flibproc_macro%2Fident.cc?ref=e26fea0f490162008884e8f010650da2ae5e8d38", "patch": "@@ -28,15 +28,15 @@ namespace ProcMacro {\n extern \"C\" {\n \n Ident\n-Ident__new (unsigned char *str, std::uint64_t len)\n+Ident__new (unsigned char *str, std::uint64_t len, Span span)\n {\n-  return Ident::make_ident (str, len);\n+  return Ident::make_ident (str, len, span);\n }\n \n Ident\n-Ident__new_raw (unsigned char *str, std::uint64_t len)\n+Ident__new_raw (unsigned char *str, std::uint64_t len, Span span)\n {\n-  return Ident::make_ident (str, len, true);\n+  return Ident::make_ident (str, len, span, true);\n }\n \n void\n@@ -57,23 +57,24 @@ Ident::clone () const\n {\n   unsigned char *val = new unsigned char[this->len];\n   std::memcpy (val, this->val, this->len);\n-  return {this->is_raw, val, this->len};\n+  return {this->is_raw, val, this->len, this->span};\n }\n \n Ident\n-Ident::make_ident (std::string str, bool raw)\n+Ident::make_ident (std::string str, Span span, bool raw)\n {\n   return Ident::make_ident (reinterpret_cast<const unsigned char *> (\n \t\t\t      str.c_str ()),\n-\t\t\t    str.length (), raw);\n+\t\t\t    str.length (), span, raw);\n }\n \n Ident\n-Ident::make_ident (const unsigned char *str, std::uint64_t len, bool raw)\n+Ident::make_ident (const unsigned char *str, std::uint64_t len, Span span,\n+\t\t   bool raw)\n {\n   unsigned char *val = new unsigned char[len];\n   std::memcpy (val, str, len);\n-  return {raw, val, len};\n+  return {raw, val, len, span};\n }\n \n void"}, {"sha": "28d6ebe825f59ff2cbd4e5dcae4999f8772a42c5", "filename": "libgrust/libproc_macro/ident.h", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e26fea0f490162008884e8f010650da2ae5e8d38/libgrust%2Flibproc_macro%2Fident.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e26fea0f490162008884e8f010650da2ae5e8d38/libgrust%2Flibproc_macro%2Fident.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgrust%2Flibproc_macro%2Fident.h?ref=e26fea0f490162008884e8f010650da2ae5e8d38", "patch": "@@ -26,6 +26,8 @@\n #include <cstdint>\n #include <string>\n \n+#include \"span.h\"\n+\n namespace ProcMacro {\n \n struct Ident\n@@ -35,23 +37,24 @@ struct Ident\n   unsigned char *val;\n   // Length in bytes\n   std::uint64_t len;\n+  Span span;\n \n public:\n   Ident clone () const;\n-  static Ident make_ident (std::string str, bool raw = false);\n+  static Ident make_ident (std::string str, Span span, bool raw = false);\n   static Ident make_ident (const unsigned char *str, std::uint64_t len,\n-\t\t\t   bool raw = false);\n+\t\t\t   Span span, bool raw = false);\n \n   static void drop (Ident *ident);\n };\n \n extern \"C\" {\n \n Ident\n-Ident__new (unsigned char *str, std::uint64_t len);\n+Ident__new (unsigned char *str, std::uint64_t len, Span span);\n \n Ident\n-Ident__new_raw (unsigned char *str, std::uint64_t len);\n+Ident__new_raw (unsigned char *str, std::uint64_t len, Span span);\n \n void\n Ident__drop (Ident *ident);"}, {"sha": "4ad45c903315f1ba066741fee4056ed80b16a96a", "filename": "libgrust/libproc_macro/literal.cc", "status": "modified", "additions": 18, "deletions": 18, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e26fea0f490162008884e8f010650da2ae5e8d38/libgrust%2Flibproc_macro%2Fliteral.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e26fea0f490162008884e8f010650da2ae5e8d38/libgrust%2Flibproc_macro%2Fliteral.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgrust%2Flibproc_macro%2Fliteral.cc?ref=e26fea0f490162008884e8f010650da2ae5e8d38", "patch": "@@ -46,88 +46,88 @@ Literal::drop (Literal *lit)\n Literal\n Literal::clone () const\n {\n-  return {this->kind, this->text.clone (), this->suffix.clone ()};\n+  return {this->kind, this->text.clone (), this->suffix.clone (), this->span};\n }\n \n Literal\n-Literal::make_literal (LitKind kind, const std::string &text,\n+Literal::make_literal (LitKind kind, Span span, const std::string &text,\n \t\t       const std::string &suffix)\n {\n   auto ffi_text = FFIString::make_ffistring (text);\n   auto ffi_suffix = FFIString::make_ffistring (suffix);\n-  return {kind, ffi_text, ffi_suffix};\n+  return {kind, ffi_text, ffi_suffix, span};\n }\n \n Literal\n Literal::make_u8 (std::uint8_t value, bool suffixed)\n {\n   auto text = FFIString::make_ffistring (std::to_string (value));\n   auto suffix = FFIString::make_ffistring (suffixed ? \"u8\" : \"\");\n-  return {LitKind::make_integer (), text, suffix};\n+  return {LitKind::make_integer (), text, suffix, Span::make_unknown ()};\n }\n \n Literal\n Literal::make_u16 (std::uint16_t value, bool suffixed)\n {\n   auto text = FFIString::make_ffistring (std::to_string (value));\n   auto suffix = FFIString::make_ffistring (suffixed ? \"u16\" : \"\");\n-  return {LitKind::make_integer (), text, suffix};\n+  return {LitKind::make_integer (), text, suffix, Span::make_unknown ()};\n }\n \n Literal\n Literal::make_u32 (std::uint32_t value, bool suffixed)\n {\n   auto text = FFIString::make_ffistring (std::to_string (value));\n   auto suffix = FFIString::make_ffistring (suffixed ? \"u32\" : \"\");\n-  return {LitKind::make_integer (), text, suffix};\n+  return {LitKind::make_integer (), text, suffix, Span::make_unknown ()};\n }\n \n Literal\n Literal::make_u64 (std::uint64_t value, bool suffixed)\n {\n   auto text = FFIString::make_ffistring (std::to_string (value));\n   auto suffix = FFIString::make_ffistring (suffixed ? \"u64\" : \"\");\n-  return {LitKind::make_integer (), text, suffix};\n+  return {LitKind::make_integer (), text, suffix, Span::make_unknown ()};\n }\n \n Literal\n Literal::make_i8 (std::int8_t value, bool suffixed)\n {\n   auto text = FFIString::make_ffistring (std::to_string (value));\n   auto suffix = FFIString::make_ffistring (suffixed ? \"i8\" : \"\");\n-  return {LitKind::make_integer (), text, suffix};\n+  return {LitKind::make_integer (), text, suffix, Span::make_unknown ()};\n }\n \n Literal\n Literal::make_i16 (std::int16_t value, bool suffixed)\n {\n   auto text = FFIString::make_ffistring (std::to_string (value));\n   auto suffix = FFIString::make_ffistring (suffixed ? \"i16\" : \"\");\n-  return {LitKind::make_integer (), text, suffix};\n+  return {LitKind::make_integer (), text, suffix, Span::make_unknown ()};\n }\n \n Literal\n Literal::make_i32 (std::int32_t value, bool suffixed)\n {\n   auto text = FFIString::make_ffistring (std::to_string (value));\n   auto suffix = FFIString::make_ffistring (suffixed ? \"i32\" : \"\");\n-  return {LitKind::make_integer (), text, suffix};\n+  return {LitKind::make_integer (), text, suffix, Span::make_unknown ()};\n }\n \n Literal\n Literal::make_i64 (std::int64_t value, bool suffixed)\n {\n   auto text = FFIString::make_ffistring (std::to_string (value));\n   auto suffix = FFIString::make_ffistring (suffixed ? \"i64\" : \"\");\n-  return {LitKind::make_integer (), text, suffix};\n+  return {LitKind::make_integer (), text, suffix, Span::make_unknown ()};\n }\n \n Literal\n Literal::make_string (const std::string &str)\n {\n   auto text = FFIString::make_ffistring (str);\n   auto suffix = FFIString::make_ffistring (\"\");\n-  return {LitKind::make_str (), text, suffix};\n+  return {LitKind::make_str (), text, suffix, Span::make_unknown ()};\n }\n \n Literal\n@@ -136,47 +136,47 @@ Literal::make_byte_string (const std::vector<std::uint8_t> &vec)\n   auto text\n     = FFIString::make_ffistring (std::string (vec.cbegin (), vec.cend ()));\n   auto suffix = FFIString::make_ffistring (\"\");\n-  return {LitKind::make_byte_str (), text, suffix};\n+  return {LitKind::make_byte_str (), text, suffix, Span::make_unknown ()};\n }\n \n Literal\n Literal::make_f32 (float value, bool suffixed)\n {\n   auto text = FFIString::make_ffistring (std::to_string (value));\n   auto suffix = FFIString::make_ffistring (suffixed ? \"f32\" : \"\");\n-  return {LitKind::make_float (), text, suffix};\n+  return {LitKind::make_float (), text, suffix, Span::make_unknown ()};\n }\n \n Literal\n Literal::make_f64 (double value, bool suffixed)\n {\n   auto text = FFIString::make_ffistring (std::to_string (value));\n   auto suffix = FFIString::make_ffistring (suffixed ? \"f64\" : \"\");\n-  return {LitKind::make_float (), text, suffix};\n+  return {LitKind::make_float (), text, suffix, Span::make_unknown ()};\n }\n \n Literal\n Literal::make_char (std::uint32_t ch)\n {\n   auto text = FFIString::make_ffistring (std::to_string ((char) ch));\n   auto suffix = FFIString::make_ffistring (\"\");\n-  return {LitKind::make_char (), text, suffix};\n+  return {LitKind::make_char (), text, suffix, Span::make_unknown ()};\n }\n \n Literal\n Literal::make_usize (std::uint64_t value, bool suffixed)\n {\n   auto text = FFIString::make_ffistring (std::to_string (value));\n   auto suffix = FFIString::make_ffistring (suffixed ? \"usize\" : \"\");\n-  return {LitKind::make_integer (), text, suffix};\n+  return {LitKind::make_integer (), text, suffix, Span::make_unknown ()};\n }\n \n Literal\n Literal::make_isize (std::int64_t value, bool suffixed)\n {\n   auto text = FFIString::make_ffistring (std::to_string (value));\n   auto suffix = FFIString::make_ffistring (suffixed ? \"isize\" : \"\");\n-  return {LitKind::make_integer (), text, suffix};\n+  return {LitKind::make_integer (), text, suffix, Span::make_unknown ()};\n }\n \n LitKind"}, {"sha": "e1b7079451a6b3f81f3fd781826d94439fd06da3", "filename": "libgrust/libproc_macro/literal.h", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e26fea0f490162008884e8f010650da2ae5e8d38/libgrust%2Flibproc_macro%2Fliteral.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e26fea0f490162008884e8f010650da2ae5e8d38/libgrust%2Flibproc_macro%2Fliteral.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgrust%2Flibproc_macro%2Fliteral.h?ref=e26fea0f490162008884e8f010650da2ae5e8d38", "patch": "@@ -26,6 +26,7 @@\n #include <cstdint>\n #include <string>\n #include <vector>\n+#include \"span.h\"\n #include \"ffistring.h\"\n \n namespace ProcMacro {\n@@ -70,13 +71,14 @@ struct Literal\n   LitKind kind;\n   FFIString text;\n   FFIString suffix;\n-  // TODO: Add span once done in rust interface\n+  Span span;\n \n public:\n   Literal clone () const;\n   bool has_suffix () const { return suffix.len != 0; };\n \n-  static Literal make_literal (const LitKind kind, const std::string &text,\n+  static Literal make_literal (const LitKind kind, Span span,\n+\t\t\t       const std::string &text,\n \t\t\t       const std::string &suffix = \"\");\n   static Literal make_u8 (std::uint8_t value, bool suffixed = true);\n   static Literal make_u16 (std::uint16_t value, bool suffixed = true);"}, {"sha": "32450cc8ea6e46c2bf75d74eb8024aa9d61cc157", "filename": "libgrust/libproc_macro/punct.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e26fea0f490162008884e8f010650da2ae5e8d38/libgrust%2Flibproc_macro%2Fpunct.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e26fea0f490162008884e8f010650da2ae5e8d38/libgrust%2Flibproc_macro%2Fpunct.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgrust%2Flibproc_macro%2Fpunct.cc?ref=e26fea0f490162008884e8f010650da2ae5e8d38", "patch": "@@ -26,9 +26,9 @@\n namespace ProcMacro {\n \n Punct\n-Punct::make_punct (std::uint32_t ch, Spacing spacing)\n+Punct::make_punct (std::uint32_t ch, Span span, Spacing spacing)\n {\n-  return {ch, spacing};\n+  return {ch, spacing, span};\n }\n \n } // namespace ProcMacro"}, {"sha": "6d0146083bf081823dce24b87ddb23881d79a44e", "filename": "libgrust/libproc_macro/punct.h", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e26fea0f490162008884e8f010650da2ae5e8d38/libgrust%2Flibproc_macro%2Fpunct.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e26fea0f490162008884e8f010650da2ae5e8d38/libgrust%2Flibproc_macro%2Fpunct.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgrust%2Flibproc_macro%2Fpunct.h?ref=e26fea0f490162008884e8f010650da2ae5e8d38", "patch": "@@ -24,6 +24,7 @@\n #define PUNCT_H\n \n #include <cstdint>\n+#include \"span.h\"\n \n namespace ProcMacro {\n \n@@ -37,9 +38,11 @@ struct Punct\n {\n   std::uint32_t ch;\n   Spacing spacing;\n+  Span span;\n \n public:\n-  static Punct make_punct (std::uint32_t ch, Spacing spacing = Spacing::ALONE);\n+  static Punct make_punct (std::uint32_t ch, Span span,\n+\t\t\t   Spacing spacing = Spacing::ALONE);\n };\n \n } // namespace ProcMacro"}, {"sha": "62c8c57f6881078a0abbf35e1a09054b258e4e9f", "filename": "libgrust/libproc_macro/span.cc", "status": "added", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e26fea0f490162008884e8f010650da2ae5e8d38/libgrust%2Flibproc_macro%2Fspan.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e26fea0f490162008884e8f010650da2ae5e8d38/libgrust%2Flibproc_macro%2Fspan.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgrust%2Flibproc_macro%2Fspan.cc?ref=e26fea0f490162008884e8f010650da2ae5e8d38", "patch": "@@ -0,0 +1,40 @@\n+// Copyright (C) 2023 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU Proc Macro Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// Under Section 7 of GPL version 3, you are granted additional\n+// permissions described in the GCC Runtime Library Exception, version\n+// 3.1, as published by the Free Software Foundation.\n+\n+// You should have received a copy of the GNU General Public License and\n+// a copy of the GCC Runtime Library Exception along with this program;\n+// see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n+// <http://www.gnu.org/licenses/>.\n+\n+#include \"span.h\"\n+\n+namespace ProcMacro {\n+\n+Span\n+Span::make_span (std::uint32_t start, std::uint32_t end)\n+{\n+  return {start, end};\n+}\n+\n+Span\n+Span::make_unknown ()\n+{\n+  // TODO: Change this value to UNKNOWN_LOCATION from gcc/input.h\n+  return {0, 0};\n+}\n+\n+} // namespace ProcMacro"}, {"sha": "70ea9e7ea3dd60758f6de3a4d5789483bec83ebf", "filename": "libgrust/libproc_macro/span.h", "status": "added", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e26fea0f490162008884e8f010650da2ae5e8d38/libgrust%2Flibproc_macro%2Fspan.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e26fea0f490162008884e8f010650da2ae5e8d38/libgrust%2Flibproc_macro%2Fspan.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgrust%2Flibproc_macro%2Fspan.h?ref=e26fea0f490162008884e8f010650da2ae5e8d38", "patch": "@@ -0,0 +1,41 @@\n+// Copyright (C) 2023 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU Proc Macro Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// Under Section 7 of GPL version 3, you are granted additional\n+// permissions described in the GCC Runtime Library Exception, version\n+// 3.1, as published by the Free Software Foundation.\n+\n+// You should have received a copy of the GNU General Public License and\n+// a copy of the GCC Runtime Library Exception along with this program;\n+// see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n+// <http://www.gnu.org/licenses/>.\n+\n+#ifndef SPAN_H\n+#define SPAN_H\n+\n+#include <cstdint>\n+\n+namespace ProcMacro {\n+struct Span\n+{\n+  std::uint32_t start;\n+  std::uint32_t end;\n+\n+public:\n+  static Span make_span (std::uint32_t start, std::uint32_t end);\n+\n+  static Span make_unknown ();\n+};\n+} // namespace ProcMacro\n+\n+#endif /* SPAN_H */"}]}