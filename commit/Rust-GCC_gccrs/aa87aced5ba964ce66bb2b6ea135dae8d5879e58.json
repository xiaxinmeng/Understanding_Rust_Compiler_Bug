{"sha": "aa87aced5ba964ce66bb2b6ea135dae8d5879e58", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWE4N2FjZWQ1YmE5NjRjZTY2YmIyYjZlYTEzNWRhZThkNTg3OWU1OA==", "commit": {"author": {"name": "Kugan Vivekanandarajah", "email": "kuganv@linaro.org", "date": "2014-05-22T22:05:08Z"}, "committer": {"name": "Kugan Vivekanandarajah", "email": "kugan@gcc.gnu.org", "date": "2014-05-22T22:05:08Z"}, "message": "aarch64.c (TARGET_ATOMIC_ASSIGN_EXPAND_FENV): New define.\n\n2014-05-23  Kugan Vivekanandarajah  <kuganv@linaro.org>\n\n\t* config/aarch64/aarch64.c (TARGET_ATOMIC_ASSIGN_EXPAND_FENV): New\n\tdefine.\n\t* config/aarch64/aarch64-protos.h (aarch64_atomic_assign_expand_fenv):\n\tNew function declaration.\n\t* config/aarch64/aarch64-builtins.c (aarch64_builtins) : Add\n\tAARCH64_BUILTIN_GET_FPCR, AARCH64_BUILTIN_SET_FPCR.\n\tAARCH64_BUILTIN_GET_FPSR and AARCH64_BUILTIN_SET_FPSR.\n\t(aarch64_init_builtins) : Initialize builtins\n\t__builtins_aarch64_set_fpcr, __builtins_aarch64_get_fpcr.\n\t__builtins_aarch64_set_fpsr and __builtins_aarch64_get_fpsr.\n\t(aarch64_expand_builtin) : Expand builtins __builtins_aarch64_set_fpcr\n\t__builtins_aarch64_get_fpcr, __builtins_aarch64_get_fpsr,\n\tand __builtins_aarch64_set_fpsr.\n\t(aarch64_atomic_assign_expand_fenv): New function.\n\t* config/aarch64/aarch64.md (set_fpcr): New pattern.\n\t(get_fpcr) : Likewise.\n\t(set_fpsr) : Likewise.\n\t(get_fpsr) : Likewise.\n\t(unspecv): Add UNSPECV_GET_FPCR and UNSPECV_SET_FPCR, UNSPECV_GET_FPSR\n\t and UNSPECV_SET_FPSR.\n\t* doc/extend.texi (AARCH64 Built-in Functions) : Document\n\t__builtins_aarch64_set_fpcr, __builtins_aarch64_get_fpcr.\n\t__builtins_aarch64_set_fpsr and __builtins_aarch64_get_fpsr.\n\nFrom-SVN: r210828", "tree": {"sha": "714cd635ad43f0f53f7e21b400682b1cf9429a5f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/714cd635ad43f0f53f7e21b400682b1cf9429a5f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/aa87aced5ba964ce66bb2b6ea135dae8d5879e58", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/aa87aced5ba964ce66bb2b6ea135dae8d5879e58", "html_url": "https://github.com/Rust-GCC/gccrs/commit/aa87aced5ba964ce66bb2b6ea135dae8d5879e58", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/aa87aced5ba964ce66bb2b6ea135dae8d5879e58/comments", "author": null, "committer": null, "parents": [{"sha": "410e3e10dd4bd96ac933aa8294ee91fd91a5dd6e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/410e3e10dd4bd96ac933aa8294ee91fd91a5dd6e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/410e3e10dd4bd96ac933aa8294ee91fd91a5dd6e"}], "stats": {"total": 233, "additions": 233, "deletions": 0}, "files": [{"sha": "0dd354fb114d4b5c8b64b85246024dba292f1ddb", "filename": "gcc/ChangeLog", "status": "modified", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aa87aced5ba964ce66bb2b6ea135dae8d5879e58/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aa87aced5ba964ce66bb2b6ea135dae8d5879e58/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=aa87aced5ba964ce66bb2b6ea135dae8d5879e58", "patch": "@@ -1,3 +1,29 @@\n+2014-05-23  Kugan Vivekanandarajah  <kuganv@linaro.org>\n+\n+\t* config/aarch64/aarch64.c (TARGET_ATOMIC_ASSIGN_EXPAND_FENV): New\n+\tdefine.\n+\t* config/aarch64/aarch64-protos.h (aarch64_atomic_assign_expand_fenv):\n+\tNew function declaration.\n+\t* config/aarch64/aarch64-builtins.c (aarch64_builtins) : Add\n+\tAARCH64_BUILTIN_GET_FPCR, AARCH64_BUILTIN_SET_FPCR.\n+\tAARCH64_BUILTIN_GET_FPSR and AARCH64_BUILTIN_SET_FPSR.\n+\t(aarch64_init_builtins) : Initialize builtins\n+\t__builtins_aarch64_set_fpcr, __builtins_aarch64_get_fpcr.\n+\t__builtins_aarch64_set_fpsr and __builtins_aarch64_get_fpsr.\n+\t(aarch64_expand_builtin) : Expand builtins __builtins_aarch64_set_fpcr\n+\t__builtins_aarch64_get_fpcr, __builtins_aarch64_get_fpsr,\n+\tand __builtins_aarch64_set_fpsr.\n+\t(aarch64_atomic_assign_expand_fenv): New function.\n+\t* config/aarch64/aarch64.md (set_fpcr): New pattern.\n+\t(get_fpcr) : Likewise.\n+\t(set_fpsr) : Likewise.\n+\t(get_fpsr) : Likewise.\n+\t(unspecv): Add UNSPECV_GET_FPCR and UNSPECV_SET_FPCR, UNSPECV_GET_FPSR\n+\t and UNSPECV_SET_FPSR.\n+\t* doc/extend.texi (AARCH64 Built-in Functions) : Document\n+\t__builtins_aarch64_set_fpcr, __builtins_aarch64_get_fpcr.\n+\t__builtins_aarch64_set_fpsr and __builtins_aarch64_get_fpsr.\n+\n 2014-05-22  Vladimir Makarov  <vmakarov@redhat.com>\n \n \tPR rtl-optimization/60969"}, {"sha": "afd568ebeea6b000ca624141baa4552ca991553e", "filename": "gcc/config/aarch64/aarch64-builtins.c", "status": "modified", "additions": 154, "deletions": 0, "changes": 154, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aa87aced5ba964ce66bb2b6ea135dae8d5879e58/gcc%2Fconfig%2Faarch64%2Faarch64-builtins.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aa87aced5ba964ce66bb2b6ea135dae8d5879e58/gcc%2Fconfig%2Faarch64%2Faarch64-builtins.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-builtins.c?ref=aa87aced5ba964ce66bb2b6ea135dae8d5879e58", "patch": "@@ -394,6 +394,12 @@ static aarch64_simd_builtin_datum aarch64_simd_builtin_data[] = {\n enum aarch64_builtins\n {\n   AARCH64_BUILTIN_MIN,\n+\n+  AARCH64_BUILTIN_GET_FPCR,\n+  AARCH64_BUILTIN_SET_FPCR,\n+  AARCH64_BUILTIN_GET_FPSR,\n+  AARCH64_BUILTIN_SET_FPSR,\n+\n   AARCH64_SIMD_BUILTIN_BASE,\n #include \"aarch64-simd-builtins.def\"\n   AARCH64_SIMD_BUILTIN_MAX = AARCH64_SIMD_BUILTIN_BASE\n@@ -775,6 +781,24 @@ aarch64_init_simd_builtins (void)\n void\n aarch64_init_builtins (void)\n {\n+  tree ftype_set_fpr\n+    = build_function_type_list (void_type_node, unsigned_type_node, NULL);\n+  tree ftype_get_fpr\n+    = build_function_type_list (unsigned_type_node, NULL);\n+\n+  aarch64_builtin_decls[AARCH64_BUILTIN_GET_FPCR]\n+    = add_builtin_function (\"__builtin_aarch64_get_fpcr\", ftype_get_fpr,\n+\t\t\t    AARCH64_BUILTIN_GET_FPCR, BUILT_IN_MD, NULL, NULL_TREE);\n+  aarch64_builtin_decls[AARCH64_BUILTIN_SET_FPCR]\n+    = add_builtin_function (\"__builtin_aarch64_set_fpcr\", ftype_set_fpr,\n+\t\t\t    AARCH64_BUILTIN_SET_FPCR, BUILT_IN_MD, NULL, NULL_TREE);\n+  aarch64_builtin_decls[AARCH64_BUILTIN_GET_FPSR]\n+    = add_builtin_function (\"__builtin_aarch64_get_fpsr\", ftype_get_fpr,\n+\t\t\t    AARCH64_BUILTIN_GET_FPSR, BUILT_IN_MD, NULL, NULL_TREE);\n+  aarch64_builtin_decls[AARCH64_BUILTIN_SET_FPSR]\n+    = add_builtin_function (\"__builtin_aarch64_set_fpsr\", ftype_set_fpr,\n+\t\t\t    AARCH64_BUILTIN_SET_FPSR, BUILT_IN_MD, NULL, NULL_TREE);\n+\n   if (TARGET_SIMD)\n     aarch64_init_simd_builtins ();\n }\n@@ -987,6 +1011,36 @@ aarch64_expand_builtin (tree exp,\n {\n   tree fndecl = TREE_OPERAND (CALL_EXPR_FN (exp), 0);\n   int fcode = DECL_FUNCTION_CODE (fndecl);\n+  int icode;\n+  rtx pat, op0;\n+  tree arg0;\n+\n+  switch (fcode)\n+    {\n+    case AARCH64_BUILTIN_GET_FPCR:\n+    case AARCH64_BUILTIN_SET_FPCR:\n+    case AARCH64_BUILTIN_GET_FPSR:\n+    case AARCH64_BUILTIN_SET_FPSR:\n+      if ((fcode == AARCH64_BUILTIN_GET_FPCR)\n+\t  || (fcode == AARCH64_BUILTIN_GET_FPSR))\n+\t{\n+\t  icode = (fcode == AARCH64_BUILTIN_GET_FPSR) ?\n+\t    CODE_FOR_get_fpsr : CODE_FOR_get_fpcr;\n+\t  target = gen_reg_rtx (SImode);\n+\t  pat = GEN_FCN (icode) (target);\n+\t}\n+      else\n+\t{\n+\t  target = NULL_RTX;\n+\t  icode = (fcode == AARCH64_BUILTIN_SET_FPSR) ?\n+\t    CODE_FOR_set_fpsr : CODE_FOR_set_fpcr;\n+\t  arg0 = CALL_EXPR_ARG (exp, 0);\n+\t  op0 = expand_normal (arg0);\n+\t  pat = GEN_FCN (icode) (op0);\n+\t}\n+      emit_insn (pat);\n+      return target;\n+    }\n \n   if (fcode >= AARCH64_SIMD_BUILTIN_BASE)\n     return aarch64_simd_expand_builtin (fcode, exp, target);\n@@ -1260,6 +1314,106 @@ aarch64_gimple_fold_builtin (gimple_stmt_iterator *gsi)\n   return changed;\n }\n \n+void\n+aarch64_atomic_assign_expand_fenv (tree *hold, tree *clear, tree *update)\n+{\n+  const unsigned AARCH64_FE_INVALID = 1;\n+  const unsigned AARCH64_FE_DIVBYZERO = 2;\n+  const unsigned AARCH64_FE_OVERFLOW = 4;\n+  const unsigned AARCH64_FE_UNDERFLOW = 8;\n+  const unsigned AARCH64_FE_INEXACT = 16;\n+  const unsigned HOST_WIDE_INT AARCH64_FE_ALL_EXCEPT = (AARCH64_FE_INVALID\n+\t\t\t\t\t\t\t| AARCH64_FE_DIVBYZERO\n+\t\t\t\t\t\t\t| AARCH64_FE_OVERFLOW\n+\t\t\t\t\t\t\t| AARCH64_FE_UNDERFLOW\n+\t\t\t\t\t\t\t| AARCH64_FE_INEXACT);\n+  const unsigned HOST_WIDE_INT AARCH64_FE_EXCEPT_SHIFT = 8;\n+  tree fenv_cr, fenv_sr, get_fpcr, set_fpcr, mask_cr, mask_sr;\n+  tree ld_fenv_cr, ld_fenv_sr, masked_fenv_cr, masked_fenv_sr, hold_fnclex_cr;\n+  tree hold_fnclex_sr, new_fenv_var, reload_fenv, restore_fnenv, get_fpsr, set_fpsr;\n+  tree update_call, atomic_feraiseexcept, hold_fnclex, masked_fenv, ld_fenv;\n+\n+  /* Generate the equivalence of :\n+       unsigned int fenv_cr;\n+       fenv_cr = __builtin_aarch64_get_fpcr ();\n+\n+       unsigned int fenv_sr;\n+       fenv_sr = __builtin_aarch64_get_fpsr ();\n+\n+       Now set all exceptions to non-stop\n+       unsigned int mask_cr\n+\t\t= ~(AARCH64_FE_ALL_EXCEPT << AARCH64_FE_EXCEPT_SHIFT);\n+       unsigned int masked_cr;\n+       masked_cr = fenv_cr & mask_cr;\n+\n+       And clear all exception flags\n+       unsigned int maske_sr = ~AARCH64_FE_ALL_EXCEPT;\n+       unsigned int masked_cr;\n+       masked_sr = fenv_sr & mask_sr;\n+\n+       __builtin_aarch64_set_cr (masked_cr);\n+       __builtin_aarch64_set_sr (masked_sr);  */\n+\n+  fenv_cr = create_tmp_var (unsigned_type_node, NULL);\n+  fenv_sr = create_tmp_var (unsigned_type_node, NULL);\n+\n+  get_fpcr = aarch64_builtin_decls[AARCH64_BUILTIN_GET_FPCR];\n+  set_fpcr = aarch64_builtin_decls[AARCH64_BUILTIN_SET_FPCR];\n+  get_fpsr = aarch64_builtin_decls[AARCH64_BUILTIN_GET_FPSR];\n+  set_fpsr = aarch64_builtin_decls[AARCH64_BUILTIN_SET_FPSR];\n+\n+  mask_cr = build_int_cst (unsigned_type_node,\n+\t\t\t   ~(AARCH64_FE_ALL_EXCEPT << AARCH64_FE_EXCEPT_SHIFT));\n+  mask_sr = build_int_cst (unsigned_type_node,\n+\t\t\t   ~(AARCH64_FE_ALL_EXCEPT));\n+\n+  ld_fenv_cr = build2 (MODIFY_EXPR, unsigned_type_node,\n+\t\t    fenv_cr, build_call_expr (get_fpcr, 0));\n+  ld_fenv_sr = build2 (MODIFY_EXPR, unsigned_type_node,\n+\t\t    fenv_sr, build_call_expr (get_fpsr, 0));\n+\n+  masked_fenv_cr = build2 (BIT_AND_EXPR, unsigned_type_node, fenv_cr, mask_cr);\n+  masked_fenv_sr = build2 (BIT_AND_EXPR, unsigned_type_node, fenv_sr, mask_sr);\n+\n+  hold_fnclex_cr = build_call_expr (set_fpcr, 1, masked_fenv_cr);\n+  hold_fnclex_sr = build_call_expr (set_fpsr, 1, masked_fenv_sr);\n+\n+  hold_fnclex = build2 (COMPOUND_EXPR, void_type_node, hold_fnclex_cr,\n+\t\t\thold_fnclex_sr);\n+  masked_fenv = build2 (COMPOUND_EXPR, void_type_node, masked_fenv_cr,\n+\t\t\tmasked_fenv_sr);\n+  ld_fenv = build2 (COMPOUND_EXPR, void_type_node, ld_fenv_cr, ld_fenv_sr);\n+\n+  *hold = build2 (COMPOUND_EXPR, void_type_node,\n+\t\t  build2 (COMPOUND_EXPR, void_type_node, masked_fenv, ld_fenv),\n+\t\t  hold_fnclex);\n+\n+  /* Store the value of masked_fenv to clear the exceptions:\n+     __builtin_aarch64_set_fpsr (masked_fenv_sr);  */\n+\n+  *clear = build_call_expr (set_fpsr, 1, masked_fenv_sr);\n+\n+  /* Generate the equivalent of :\n+       unsigned int new_fenv_var;\n+       new_fenv_var = __builtin_aarch64_get_fpsr ();\n+\n+       __builtin_aarch64_set_fpsr (fenv_sr);\n+\n+       __atomic_feraiseexcept (new_fenv_var);  */\n+\n+  new_fenv_var = create_tmp_var (unsigned_type_node, NULL);\n+  reload_fenv = build2 (MODIFY_EXPR, unsigned_type_node,\n+\t\t\tnew_fenv_var, build_call_expr (get_fpsr, 0));\n+  restore_fnenv = build_call_expr (set_fpsr, 1, fenv_sr);\n+  atomic_feraiseexcept = builtin_decl_implicit (BUILT_IN_ATOMIC_FERAISEEXCEPT);\n+  update_call = build_call_expr (atomic_feraiseexcept, 1,\n+\t\t\t\t fold_convert (integer_type_node, new_fenv_var));\n+  *update = build2 (COMPOUND_EXPR, void_type_node,\n+\t\t    build2 (COMPOUND_EXPR, void_type_node,\n+\t\t\t    reload_fenv, restore_fnenv), update_call);\n+}\n+\n+\n #undef AARCH64_CHECK_BUILTIN_MODE\n #undef AARCH64_FIND_FRINT_VARIANT\n #undef BUILTIN_DX"}, {"sha": "68d488d2fd9f401c986855ac6f043c500cda6c8f", "filename": "gcc/config/aarch64/aarch64-protos.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aa87aced5ba964ce66bb2b6ea135dae8d5879e58/gcc%2Fconfig%2Faarch64%2Faarch64-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aa87aced5ba964ce66bb2b6ea135dae8d5879e58/gcc%2Fconfig%2Faarch64%2Faarch64-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-protos.h?ref=aa87aced5ba964ce66bb2b6ea135dae8d5879e58", "patch": "@@ -306,4 +306,5 @@ extern void aarch64_split_combinev16qi (rtx operands[3]);\n extern void aarch64_expand_vec_perm (rtx target, rtx op0, rtx op1, rtx sel);\n extern bool\n aarch64_expand_vec_perm_const (rtx target, rtx op0, rtx op1, rtx sel);\n+void aarch64_atomic_assign_expand_fenv (tree *, tree *, tree *);\n #endif /* GCC_AARCH64_PROTOS_H */"}, {"sha": "d73c5ef68689c6ced056734051c909bb88110c63", "filename": "gcc/config/aarch64/aarch64.c", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aa87aced5ba964ce66bb2b6ea135dae8d5879e58/gcc%2Fconfig%2Faarch64%2Faarch64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aa87aced5ba964ce66bb2b6ea135dae8d5879e58/gcc%2Fconfig%2Faarch64%2Faarch64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64.c?ref=aa87aced5ba964ce66bb2b6ea135dae8d5879e58", "patch": "@@ -9487,6 +9487,10 @@ aarch64_modes_tieable_p (enum machine_mode mode1, enum machine_mode mode2)\n #define TARGET_VECTORIZE_AUTOVECTORIZE_VECTOR_SIZES \\\n   aarch64_autovectorize_vector_sizes\n \n+#undef TARGET_ATOMIC_ASSIGN_EXPAND_FENV\n+#define TARGET_ATOMIC_ASSIGN_EXPAND_FENV \\\n+  aarch64_atomic_assign_expand_fenv\n+\n /* Section anchor support.  */\n \n #undef TARGET_MIN_ANCHOR_OFFSET"}, {"sha": "da9444fca256d89ef58945394547eca137840458", "filename": "gcc/config/aarch64/aarch64.md", "status": "modified", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aa87aced5ba964ce66bb2b6ea135dae8d5879e58/gcc%2Fconfig%2Faarch64%2Faarch64.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aa87aced5ba964ce66bb2b6ea135dae8d5879e58/gcc%2Fconfig%2Faarch64%2Faarch64.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64.md?ref=aa87aced5ba964ce66bb2b6ea135dae8d5879e58", "patch": "@@ -112,6 +112,10 @@\n \n (define_c_enum \"unspecv\" [\n     UNSPECV_EH_RETURN\t\t; Represent EH_RETURN\n+    UNSPECV_GET_FPCR\t\t; Represent fetch of FPCR content.\n+    UNSPECV_SET_FPCR\t\t; Represent assign of FPCR content.\n+    UNSPECV_GET_FPSR\t\t; Represent fetch of FPSR content.\n+    UNSPECV_SET_FPSR\t\t; Represent assign of FPSR content.\n   ]\n )\n \n@@ -3885,6 +3889,37 @@\n   [(set_attr \"length\" \"12\")\n    (set_attr \"type\" \"multiple\")])\n \n+;; Write Floating-point Control Register.\n+(define_insn \"set_fpcr\"\n+  [(unspec_volatile [(match_operand:SI 0 \"register_operand\" \"r\")] UNSPECV_SET_FPCR)]\n+  \"\"\n+  \"msr\\\\tfpcr, %0\\;isb\"\n+  [(set_attr \"type\" \"mrs\")])\n+\n+;; Read Floating-point Control Register.\n+(define_insn \"get_fpcr\"\n+  [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n+        (unspec_volatile:SI [(const_int 0)] UNSPECV_GET_FPCR))]\n+  \"\"\n+  \"mrs\\\\t%0, fpcr\"\n+  [(set_attr \"type\" \"mrs\")])\n+\n+;; Write Floating-point Status Register.\n+(define_insn \"set_fpsr\"\n+  [(unspec_volatile [(match_operand:SI 0 \"register_operand\" \"r\")] UNSPECV_SET_FPSR)]\n+  \"\"\n+  \"msr\\\\tfpsr, %0\"\n+  [(set_attr \"type\" \"mrs\")])\n+\n+;; Read Floating-point Status Register.\n+(define_insn \"get_fpsr\"\n+  [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n+        (unspec_volatile:SI [(const_int 0)] UNSPECV_GET_FPSR))]\n+  \"\"\n+  \"mrs\\\\t%0, fpsr\"\n+  [(set_attr \"type\" \"mrs\")])\n+\n+\n ;; AdvSIMD Stuff\n (include \"aarch64-simd.md\")\n "}, {"sha": "28eb8aefa0a5f6e381571f6b778e8946a89d99b7", "filename": "gcc/doc/extend.texi", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aa87aced5ba964ce66bb2b6ea135dae8d5879e58/gcc%2Fdoc%2Fextend.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aa87aced5ba964ce66bb2b6ea135dae8d5879e58/gcc%2Fdoc%2Fextend.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fextend.texi?ref=aa87aced5ba964ce66bb2b6ea135dae8d5879e58", "patch": "@@ -9661,6 +9661,7 @@ to those machines.  Generally these generate calls to specific machine\n instructions, but allow the compiler to schedule those calls.\n \n @menu\n+* AArch64 Built-in Functions::\n * Alpha Built-in Functions::\n * Altera Nios II Built-in Functions::\n * ARC Built-in Functions::\n@@ -9693,6 +9694,18 @@ instructions, but allow the compiler to schedule those calls.\n * TILEPro Built-in Functions::\n @end menu\n \n+@node AArch64 Built-in Functions\n+@subsection AArch64 Built-in Functions\n+\n+These built-in functions are available for the AArch64 family of\n+processors.\n+@smallexample\n+unsigned int __builtin_aarch64_get_fpcr ()\n+void __builtin_aarch64_set_fpcr (unsigned int)\n+unsigned int __builtin_aarch64_get_fpsr ()\n+void __builtin_aarch64_set_fpsr (unsigned int)\n+@end smallexample\n+\n @node Alpha Built-in Functions\n @subsection Alpha Built-in Functions\n "}]}