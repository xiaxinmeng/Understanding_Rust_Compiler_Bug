{"sha": "af789a7079408782f76dc29efa7a8368740dc2ee", "node_id": "C_kwDOANBUbNoAKGFmNzg5YTcwNzk0MDg3ODJmNzZkYzI5ZWZhN2E4MzY4NzQwZGMyZWU", "commit": {"author": {"name": "Arthur Cohen", "email": "arthur.cohen@embecosm.com", "date": "2022-02-17T14:08:28Z"}, "committer": {"name": "Arthur Cohen", "email": "arthur.cohen@embecosm.com", "date": "2022-02-18T15:46:10Z"}, "message": "macros: Add test cases for repetitions", "tree": {"sha": "4c52557a56fa1ccfa38e9689696e3768230d549d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4c52557a56fa1ccfa38e9689696e3768230d549d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/af789a7079408782f76dc29efa7a8368740dc2ee", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/af789a7079408782f76dc29efa7a8368740dc2ee", "html_url": "https://github.com/Rust-GCC/gccrs/commit/af789a7079408782f76dc29efa7a8368740dc2ee", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/af789a7079408782f76dc29efa7a8368740dc2ee/comments", "author": {"login": "CohenArthur", "id": 43524065, "node_id": "MDQ6VXNlcjQzNTI0MDY1", "avatar_url": "https://avatars.githubusercontent.com/u/43524065?v=4", "gravatar_id": "", "url": "https://api.github.com/users/CohenArthur", "html_url": "https://github.com/CohenArthur", "followers_url": "https://api.github.com/users/CohenArthur/followers", "following_url": "https://api.github.com/users/CohenArthur/following{/other_user}", "gists_url": "https://api.github.com/users/CohenArthur/gists{/gist_id}", "starred_url": "https://api.github.com/users/CohenArthur/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/CohenArthur/subscriptions", "organizations_url": "https://api.github.com/users/CohenArthur/orgs", "repos_url": "https://api.github.com/users/CohenArthur/repos", "events_url": "https://api.github.com/users/CohenArthur/events{/privacy}", "received_events_url": "https://api.github.com/users/CohenArthur/received_events", "type": "User", "site_admin": false}, "committer": {"login": "CohenArthur", "id": 43524065, "node_id": "MDQ6VXNlcjQzNTI0MDY1", "avatar_url": "https://avatars.githubusercontent.com/u/43524065?v=4", "gravatar_id": "", "url": "https://api.github.com/users/CohenArthur", "html_url": "https://github.com/CohenArthur", "followers_url": "https://api.github.com/users/CohenArthur/followers", "following_url": "https://api.github.com/users/CohenArthur/following{/other_user}", "gists_url": "https://api.github.com/users/CohenArthur/gists{/gist_id}", "starred_url": "https://api.github.com/users/CohenArthur/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/CohenArthur/subscriptions", "organizations_url": "https://api.github.com/users/CohenArthur/orgs", "repos_url": "https://api.github.com/users/CohenArthur/repos", "events_url": "https://api.github.com/users/CohenArthur/events{/privacy}", "received_events_url": "https://api.github.com/users/CohenArthur/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ad7e4bb6f8e19efbae93332f25f3a4897fedbb74", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ad7e4bb6f8e19efbae93332f25f3a4897fedbb74", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ad7e4bb6f8e19efbae93332f25f3a4897fedbb74"}], "stats": {"total": 106, "additions": 106, "deletions": 0}, "files": [{"sha": "e59155cf76f758aa82fe4e1bc62b2415c87eb5ee", "filename": "gcc/testsuite/rust/compile/macro6.rs", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/af789a7079408782f76dc29efa7a8368740dc2ee/gcc%2Ftestsuite%2Frust%2Fcompile%2Fmacro6.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/af789a7079408782f76dc29efa7a8368740dc2ee/gcc%2Ftestsuite%2Frust%2Fcompile%2Fmacro6.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fcompile%2Fmacro6.rs?ref=af789a7079408782f76dc29efa7a8368740dc2ee", "patch": "@@ -0,0 +1,11 @@\n+macro_rules! zero_or_one {\n+    ($($a:literal)?) => { // { dg-error \"invalid amount of matches for macro invocation. Expected between 0 and 1, got 2\" }\n+        f()\n+    }\n+}\n+\n+fn main() {\n+    zero_or_one!();\n+    zero_or_one!(14);\n+    zero_or_one!(125 12 \"gcc\"); // { dg-error \"Failed to match any rule within macro\" }\n+}"}, {"sha": "b57c5cbd473c77d347ec5a21cdcd49a22d0e84fc", "filename": "gcc/testsuite/rust/compile/macro7.rs", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/af789a7079408782f76dc29efa7a8368740dc2ee/gcc%2Ftestsuite%2Frust%2Fcompile%2Fmacro7.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/af789a7079408782f76dc29efa7a8368740dc2ee/gcc%2Ftestsuite%2Frust%2Fcompile%2Fmacro7.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fcompile%2Fmacro7.rs?ref=af789a7079408782f76dc29efa7a8368740dc2ee", "patch": "@@ -0,0 +1,13 @@\n+fn f() {}\n+\n+macro_rules! one_or_more {\n+    ($($a:literal)+) => { // { dg-error \"invalid amount of matches for macro invocation\" }\n+        f()\n+    }\n+}\n+\n+fn main() {\n+    one_or_more!(1 1 1 1 1 1 1 1 1 1 1 \"rust\" 'c');\n+    one_or_more!(1);\n+    one_or_more!(); // { dg-error \"Failed to match any rule within macro\" }\n+}"}, {"sha": "756d5b05491e3534a248176b8a6c94aea16d9732", "filename": "gcc/testsuite/rust/compile/macro8.rs", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/af789a7079408782f76dc29efa7a8368740dc2ee/gcc%2Ftestsuite%2Frust%2Fcompile%2Fmacro8.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/af789a7079408782f76dc29efa7a8368740dc2ee/gcc%2Ftestsuite%2Frust%2Fcompile%2Fmacro8.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fcompile%2Fmacro8.rs?ref=af789a7079408782f76dc29efa7a8368740dc2ee", "patch": "@@ -0,0 +1,12 @@\n+fn f() {}\n+\n+macro_rules! expr {\n+    ($($a:expr)?) => {\n+        f()\n+    }\n+}\n+\n+fn main() {\n+    expr!();\n+    expr!(14);\n+}"}, {"sha": "8005cafe5b74486ba55c64a046f0a0d727619574", "filename": "gcc/testsuite/rust/execute/xfail/macro4.rs", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/af789a7079408782f76dc29efa7a8368740dc2ee/gcc%2Ftestsuite%2Frust%2Fexecute%2Fxfail%2Fmacro4.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/af789a7079408782f76dc29efa7a8368740dc2ee/gcc%2Ftestsuite%2Frust%2Fexecute%2Fxfail%2Fmacro4.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fexecute%2Fxfail%2Fmacro4.rs?ref=af789a7079408782f76dc29efa7a8368740dc2ee", "patch": "@@ -0,0 +1,24 @@\n+// { dg-output \"any\\nany\\nany\\nany\\nany\\n\" }\n+extern \"C\" {\n+    fn printf(s: *const i8, ...);\n+}\n+\n+fn f() {\n+    let r_s = \"any\\n\\0\";\n+    let s_p = r_s as *const str;\n+    let c_p = s_p as *const i8;\n+\n+    printf(c_p);\n+}\n+\n+macro_rules! any {\n+    ($($a:expr)*) => {\n+        $($a;)*\n+    }\n+}\n+\n+fn main() {\n+    any!(); // valid, but does not print anything\n+    any!(f() f());\n+    any!(f() f()    f());\n+}"}, {"sha": "b8130d8b28ddb6f411ae75deadd1fd8ebe351292", "filename": "gcc/testsuite/rust/execute/xfail/macro5.rs", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/af789a7079408782f76dc29efa7a8368740dc2ee/gcc%2Ftestsuite%2Frust%2Fexecute%2Fxfail%2Fmacro5.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/af789a7079408782f76dc29efa7a8368740dc2ee/gcc%2Ftestsuite%2Frust%2Fexecute%2Fxfail%2Fmacro5.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fexecute%2Fxfail%2Fmacro5.rs?ref=af789a7079408782f76dc29efa7a8368740dc2ee", "patch": "@@ -0,0 +1,23 @@\n+// { dg-output \"zo1\\nzo1\\n\" }\n+extern \"C\" {\n+    fn printf(s: *const i8, ...);\n+}\n+\n+fn f() {\n+    let r_s = \"zo1\\n\\0\";\n+    let s_p = r_s as *const str;\n+    let c_p = s_p as *const i8;\n+\n+    unsafe { printf(c_p); }\n+}\n+\n+macro_rules! zero_or_one {\n+    ($($a:expr)?) => {\n+        f()\n+    }\n+}\n+\n+fn main() {\n+    zero_or_one!();\n+    zero_or_one!(f());\n+}"}, {"sha": "77107ef5976c4df6fdd8d29e1817f18f8cd709cf", "filename": "gcc/testsuite/rust/execute/xfail/macro6.rs", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/af789a7079408782f76dc29efa7a8368740dc2ee/gcc%2Ftestsuite%2Frust%2Fexecute%2Fxfail%2Fmacro6.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/af789a7079408782f76dc29efa7a8368740dc2ee/gcc%2Ftestsuite%2Frust%2Fexecute%2Fxfail%2Fmacro6.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fexecute%2Fxfail%2Fmacro6.rs?ref=af789a7079408782f76dc29efa7a8368740dc2ee", "patch": "@@ -0,0 +1,23 @@\n+// { dg-output \"oom\\noom\\noom\\n\" }\n+extern \"C\" {\n+    fn printf(s: *const i8, ...);\n+}\n+\n+fn f() {\n+    let r_s = \"oom\\n\\0\";\n+    let s_p = r_s as *const str;\n+    let c_p = s_p as *const i8;\n+\n+    unsafe { printf(c_p); }\n+}\n+\n+macro_rules! one_or_more {\n+    ($($a:expr)+) => {\n+        $($a;)+\n+    }\n+}\n+\n+fn main() {\n+    one_or_more!(f());\n+    one_or_more!(f() f());\n+}"}]}