{"sha": "111a28c29e1f0af6064dd1a3ba2f9eac09ad00eb", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTExYTI4YzI5ZTFmMGFmNjA2NGRkMWEzYmEyZjllYWMwOWFkMDBlYg==", "commit": {"author": {"name": "Dodji Seketeli", "email": "dodji@gcc.gnu.org", "date": "2009-04-23T11:15:33Z"}, "committer": {"name": "Dodji Seketeli", "email": "dodji@gcc.gnu.org", "date": "2009-04-23T11:15:33Z"}, "message": "re PR c++/38228 (ICE with invalid use of bound member function)\n\n    gcc/cp/ChangeLog:\n    \tPR c++/38228\n    \t* pt.c (unify): Do not allow the result of a template argument\n    \tdeduction to be a METHOD_TYPE.\n    \t* cvt.c (cp_convert): Report a meaningful error for non-valid use\n    \tof pointer to member functions during conversions.\n    \t* call.c (build_new_op): Report a meaningful error for non-valid\n    \tuse of pointer to member functions in binary expressions.\n    \t* typeck.c (invalid_nonstatic_memfn_p): Do not crash when EXPR is\n    \tNULL;\n    \n    gcc/testsuite/ChangeLog:\n    \tPR c++/38228\n    \t* g++.dg/expr/bound-mem-fun.C: New test.\n\nFrom-SVN: r146646", "tree": {"sha": "9cf794ed9aa81713d4ecea5e289646e8597a6fcf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9cf794ed9aa81713d4ecea5e289646e8597a6fcf"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/111a28c29e1f0af6064dd1a3ba2f9eac09ad00eb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/111a28c29e1f0af6064dd1a3ba2f9eac09ad00eb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/111a28c29e1f0af6064dd1a3ba2f9eac09ad00eb", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/111a28c29e1f0af6064dd1a3ba2f9eac09ad00eb/comments", "author": null, "committer": null, "parents": [{"sha": "c1abd261d91caa67f71439292081b7299d4f5788", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c1abd261d91caa67f71439292081b7299d4f5788", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c1abd261d91caa67f71439292081b7299d4f5788"}], "stats": {"total": 54, "additions": 49, "deletions": 5}, "files": [{"sha": "4eae7338c322947267c6c4b907b0a5929b5cd3d7", "filename": "gcc/cp/call.c", "status": "modified", "additions": 14, "deletions": 2, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/111a28c29e1f0af6064dd1a3ba2f9eac09ad00eb/gcc%2Fcp%2Fcall.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/111a28c29e1f0af6064dd1a3ba2f9eac09ad00eb/gcc%2Fcp%2Fcall.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcall.c?ref=111a28c29e1f0af6064dd1a3ba2f9eac09ad00eb", "patch": "@@ -4072,8 +4072,20 @@ build_new_op (enum tree_code code, int flags, tree arg1, tree arg2, tree arg3,\n \tdefault:\n \t  if ((flags & LOOKUP_COMPLAIN) && (complain & tf_error))\n \t    {\n-\t      op_error (code, code2, arg1, arg2, arg3, \"no match\");\n-\t      print_z_candidates (candidates);\n+\t\t/* If one of the arguments of the operator represents\n+\t\t   an invalid use of member function pointer, try to report\n+\t\t   a meaningful error ...  */\n+\t\tif (invalid_nonstatic_memfn_p (arg1, tf_error)\n+\t\t    || invalid_nonstatic_memfn_p (arg2, tf_error)\n+\t\t    || invalid_nonstatic_memfn_p (arg3, tf_error))\n+\t\t  /* We displayed the error message.  */;\n+\t\telse\n+\t\t  {\n+\t\t    /* ... Otherwise, report the more generic\n+\t\t       \"no matching operator found\" error */\n+\t\t    op_error (code, code2, arg1, arg2, arg3, \"no match\");\n+\t\t    print_z_candidates (candidates);\n+\t\t  }\n \t    }\n \t  result = error_mark_node;\n \t  break;"}, {"sha": "6d35245e823362aaff2085534734e49b30d3e1a8", "filename": "gcc/cp/cvt.c", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/111a28c29e1f0af6064dd1a3ba2f9eac09ad00eb/gcc%2Fcp%2Fcvt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/111a28c29e1f0af6064dd1a3ba2f9eac09ad00eb/gcc%2Fcp%2Fcvt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcvt.c?ref=111a28c29e1f0af6064dd1a3ba2f9eac09ad00eb", "patch": "@@ -760,8 +760,15 @@ ocp_convert (tree type, tree expr, int convtype, int flags)\n     }\n \n   if (flags & LOOKUP_COMPLAIN)\n-    error (\"conversion from %qT to non-scalar type %qT requested\",\n-\t   TREE_TYPE (expr), type);\n+    {\n+      /* If the conversion failed and expr was an invalid use of pointer to\n+\t member function, try to report a meaningful error.  */\n+      if (invalid_nonstatic_memfn_p (expr, tf_warning_or_error))\n+\t/* We displayed the error message.  */;\n+      else\n+\terror (\"conversion from %qT to non-scalar type %qT requested\",\n+\t       TREE_TYPE (expr), type);\n+    }\n   return error_mark_node;\n }\n "}, {"sha": "4844333770d5a5db71b9fac1d4770801616eda0b", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/111a28c29e1f0af6064dd1a3ba2f9eac09ad00eb/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/111a28c29e1f0af6064dd1a3ba2f9eac09ad00eb/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=111a28c29e1f0af6064dd1a3ba2f9eac09ad00eb", "patch": "@@ -13581,6 +13581,13 @@ unify (tree tparms, tree targs, tree parm, tree arg, int strict)\n \t  && !template_parameter_pack_p (parm))\n \treturn 1;\n \n+      /* If the argument deduction results is a METHOD_TYPE,\n+         then there is a problem.\n+         METHOD_TYPE doesn't map to any real C++ type the result of\n+\t the deduction can not be of that type.  */\n+      if (TREE_CODE (arg) == METHOD_TYPE)\n+\treturn 1;\n+\n       TREE_VEC_ELT (INNERMOST_TEMPLATE_ARGS (targs), idx) = arg;\n       return 0;\n "}, {"sha": "d9222dcbd06130bdcbacf357fd653dc3c335f05d", "filename": "gcc/cp/typeck.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/111a28c29e1f0af6064dd1a3ba2f9eac09ad00eb/gcc%2Fcp%2Ftypeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/111a28c29e1f0af6064dd1a3ba2f9eac09ad00eb/gcc%2Fcp%2Ftypeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftypeck.c?ref=111a28c29e1f0af6064dd1a3ba2f9eac09ad00eb", "patch": "@@ -1508,7 +1508,7 @@ cxx_sizeof_or_alignof_expr (tree e, enum tree_code op, bool complain)\n bool\n invalid_nonstatic_memfn_p (const_tree expr, tsubst_flags_t complain)\n {\n-  if (DECL_NONSTATIC_MEMBER_FUNCTION_P (expr))\n+  if (expr && DECL_NONSTATIC_MEMBER_FUNCTION_P (expr))\n     {\n       if (complain & tf_error)\n         error (\"invalid use of non-static member function\");"}, {"sha": "9e699b638e36311f988ba68a062764d0cdfcd458", "filename": "gcc/testsuite/g++.dg/expr/bound-mem-fun.C", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/111a28c29e1f0af6064dd1a3ba2f9eac09ad00eb/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fexpr%2Fbound-mem-fun.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/111a28c29e1f0af6064dd1a3ba2f9eac09ad00eb/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fexpr%2Fbound-mem-fun.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fexpr%2Fbound-mem-fun.C?ref=111a28c29e1f0af6064dd1a3ba2f9eac09ad00eb", "patch": "@@ -0,0 +1,18 @@\n+// Contributed by Dodji Seketeli <dodji@redhat.com>\n+// Origin PR c++/38228\n+// { dg-do \"compile\" }\n+\n+struct A\n+{\n+  A ();\n+  template<typename T> A(T);\n+};\n+\n+struct B\n+{\n+  int foo();\n+};\n+\n+A a = B().*(&B::foo); // { dg-error \"invalid use of non-static member function\" }\n+\n+"}]}