{"sha": "955886d1a2c75d16b41df1c97d04387bd7436dab", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTU1ODg2ZDFhMmM3NWQxNmI0MWRmMWM5N2QwNDM4N2JkNzQzNmRhYg==", "commit": {"author": {"name": "Johannes Kanig", "email": "kanig@adacore.com", "date": "2020-08-17T00:41:10Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "derodat@adacore.com", "date": "2020-10-23T08:24:55Z"}, "message": "[Ada] GNATprove: remove support for external axiomatizations\n\ngcc/ada/\n\n\t* exp_util.adb, exp_util.ads\n\t(Containing_Package_With_Ext_Axioms,\n\tHas_Annotate_Pragma_For_External_Axiomatizations): Removed.\n\t* sem_ch8.adb (Analyze_Subprogram_Renaming): Removed code\n\trelated to external axiomatizations.\n\t* einfo.ads\n\t(Is_Generic_Actual_Subprogram): Removed comment about external\n\taxiomatization.", "tree": {"sha": "e1523580cbe7a1b38d6de0e54dec69b7b6c34fff", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e1523580cbe7a1b38d6de0e54dec69b7b6c34fff"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/955886d1a2c75d16b41df1c97d04387bd7436dab", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/955886d1a2c75d16b41df1c97d04387bd7436dab", "html_url": "https://github.com/Rust-GCC/gccrs/commit/955886d1a2c75d16b41df1c97d04387bd7436dab", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/955886d1a2c75d16b41df1c97d04387bd7436dab/comments", "author": {"login": "kanigsson", "id": 169032, "node_id": "MDQ6VXNlcjE2OTAzMg==", "avatar_url": "https://avatars.githubusercontent.com/u/169032?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kanigsson", "html_url": "https://github.com/kanigsson", "followers_url": "https://api.github.com/users/kanigsson/followers", "following_url": "https://api.github.com/users/kanigsson/following{/other_user}", "gists_url": "https://api.github.com/users/kanigsson/gists{/gist_id}", "starred_url": "https://api.github.com/users/kanigsson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kanigsson/subscriptions", "organizations_url": "https://api.github.com/users/kanigsson/orgs", "repos_url": "https://api.github.com/users/kanigsson/repos", "events_url": "https://api.github.com/users/kanigsson/events{/privacy}", "received_events_url": "https://api.github.com/users/kanigsson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pmderodat", "id": 758452, "node_id": "MDQ6VXNlcjc1ODQ1Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/758452?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pmderodat", "html_url": "https://github.com/pmderodat", "followers_url": "https://api.github.com/users/pmderodat/followers", "following_url": "https://api.github.com/users/pmderodat/following{/other_user}", "gists_url": "https://api.github.com/users/pmderodat/gists{/gist_id}", "starred_url": "https://api.github.com/users/pmderodat/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pmderodat/subscriptions", "organizations_url": "https://api.github.com/users/pmderodat/orgs", "repos_url": "https://api.github.com/users/pmderodat/repos", "events_url": "https://api.github.com/users/pmderodat/events{/privacy}", "received_events_url": "https://api.github.com/users/pmderodat/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "294e16b4e7ef586619b92bf0f109448e7de31c6e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/294e16b4e7ef586619b92bf0f109448e7de31c6e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/294e16b4e7ef586619b92bf0f109448e7de31c6e"}], "stats": {"total": 219, "additions": 1, "deletions": 218}, "files": [{"sha": "bb5ab07790ebe2b1d134f1b3d0eab4ecf2d27e2b", "filename": "gcc/ada/einfo.ads", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/955886d1a2c75d16b41df1c97d04387bd7436dab/gcc%2Fada%2Feinfo.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/955886d1a2c75d16b41df1c97d04387bd7436dab/gcc%2Fada%2Feinfo.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Feinfo.ads?ref=955886d1a2c75d16b41df1c97d04387bd7436dab", "patch": "@@ -2655,10 +2655,6 @@ package Einfo is\n --       Used to generate constraint checks on calls to these subprograms, even\n --       within an instance of a predefined run-time unit, in which checks\n --       are otherwise suppressed.\n---\n---       The flag is also set on the entity of the expression function created\n---       within an instance, for a function that has external axiomatization,\n---       for use in GNATprove mode.\n \n --    Is_Generic_Actual_Type (Flag94)\n --       Defined in all type and subtype entities. Set in the subtype"}, {"sha": "6b474d80f82f8043548cbe35fa1ba4664f403f33", "filename": "gcc/ada/exp_util.adb", "status": "modified", "additions": 0, "deletions": 170, "changes": 170, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/955886d1a2c75d16b41df1c97d04387bd7436dab/gcc%2Fada%2Fexp_util.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/955886d1a2c75d16b41df1c97d04387bd7436dab/gcc%2Fada%2Fexp_util.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_util.adb?ref=955886d1a2c75d16b41df1c97d04387bd7436dab", "patch": "@@ -4615,60 +4615,6 @@ package body Exp_Util is\n       end if;\n    end Component_May_Be_Bit_Aligned;\n \n-   ----------------------------------------\n-   -- Containing_Package_With_Ext_Axioms --\n-   ----------------------------------------\n-\n-   function Containing_Package_With_Ext_Axioms\n-     (E : Entity_Id) return Entity_Id\n-   is\n-   begin\n-      --  E is the package or generic package which is externally axiomatized\n-\n-      if Is_Package_Or_Generic_Package (E)\n-        and then Has_Annotate_Pragma_For_External_Axiomatization (E)\n-      then\n-         return E;\n-      end if;\n-\n-      --  If E's scope is axiomatized, E is axiomatized\n-\n-      if Present (Scope (E)) then\n-         declare\n-            First_Ax_Parent_Scope : constant Entity_Id :=\n-              Containing_Package_With_Ext_Axioms (Scope (E));\n-         begin\n-            if Present (First_Ax_Parent_Scope) then\n-               return First_Ax_Parent_Scope;\n-            end if;\n-         end;\n-      end if;\n-\n-      --  Otherwise, if E is a package instance, it is axiomatized if the\n-      --  corresponding generic package is axiomatized.\n-\n-      if Ekind (E) = E_Package then\n-         declare\n-            Par  : constant Node_Id := Parent (E);\n-            Decl : Node_Id;\n-\n-         begin\n-            if Nkind (Par) = N_Defining_Program_Unit_Name then\n-               Decl := Parent (Par);\n-            else\n-               Decl := Par;\n-            end if;\n-\n-            if Present (Generic_Parent (Decl)) then\n-               return\n-                 Containing_Package_With_Ext_Axioms (Generic_Parent (Decl));\n-            end if;\n-         end;\n-      end if;\n-\n-      return Empty;\n-   end Containing_Package_With_Ext_Axioms;\n-\n    -------------------------------\n    -- Convert_To_Actual_Subtype --\n    -------------------------------\n@@ -6653,122 +6599,6 @@ package body Exp_Util is\n       end if;\n    end Has_Access_Constraint;\n \n-   -----------------------------------------------------\n-   -- Has_Annotate_Pragma_For_External_Axiomatization --\n-   -----------------------------------------------------\n-\n-   function Has_Annotate_Pragma_For_External_Axiomatization\n-     (E : Entity_Id) return Boolean\n-   is\n-      function Is_Annotate_Pragma_For_External_Axiomatization\n-        (N : Node_Id) return Boolean;\n-      --  Returns whether N is\n-      --    pragma Annotate (GNATprove, External_Axiomatization);\n-\n-      ----------------------------------------------------\n-      -- Is_Annotate_Pragma_For_External_Axiomatization --\n-      ----------------------------------------------------\n-\n-      --  The general form of pragma Annotate is\n-\n-      --    pragma Annotate (IDENTIFIER [, IDENTIFIER {, ARG}]);\n-      --    ARG ::= NAME | EXPRESSION\n-\n-      --  The first two arguments are by convention intended to refer to an\n-      --  external tool and a tool-specific function. These arguments are\n-      --  not analyzed.\n-\n-      --  The following is used to annotate a package specification which\n-      --  GNATprove should treat specially, because the axiomatization of\n-      --  this unit is given by the user instead of being automatically\n-      --  generated.\n-\n-      --    pragma Annotate (GNATprove, External_Axiomatization);\n-\n-      function Is_Annotate_Pragma_For_External_Axiomatization\n-        (N : Node_Id) return Boolean\n-      is\n-         Name_GNATprove               : constant String :=\n-                                          \"gnatprove\";\n-         Name_External_Axiomatization : constant String :=\n-                                          \"external_axiomatization\";\n-         --  Special names\n-\n-      begin\n-         if Nkind (N) = N_Pragma\n-           and then Get_Pragma_Id (N) = Pragma_Annotate\n-           and then List_Length (Pragma_Argument_Associations (N)) = 2\n-         then\n-            declare\n-               Arg1 : constant Node_Id :=\n-                        First (Pragma_Argument_Associations (N));\n-               Arg2 : constant Node_Id := Next (Arg1);\n-               Nam1 : Name_Id;\n-               Nam2 : Name_Id;\n-\n-            begin\n-               --  Fill in Name_Buffer with Name_GNATprove first, and then with\n-               --  Name_External_Axiomatization so that Name_Find returns the\n-               --  corresponding name. This takes care of all possible casings.\n-\n-               Name_Len := 0;\n-               Add_Str_To_Name_Buffer (Name_GNATprove);\n-               Nam1 := Name_Find;\n-\n-               Name_Len := 0;\n-               Add_Str_To_Name_Buffer (Name_External_Axiomatization);\n-               Nam2 := Name_Find;\n-\n-               return Chars (Get_Pragma_Arg (Arg1)) = Nam1\n-                         and then\n-                      Chars (Get_Pragma_Arg (Arg2)) = Nam2;\n-            end;\n-\n-         else\n-            return False;\n-         end if;\n-      end Is_Annotate_Pragma_For_External_Axiomatization;\n-\n-      --  Local variables\n-\n-      Decl      : Node_Id;\n-      Vis_Decls : List_Id;\n-      N         : Node_Id;\n-\n-   --  Start of processing for Has_Annotate_Pragma_For_External_Axiomatization\n-\n-   begin\n-      if Nkind (Parent (E)) = N_Defining_Program_Unit_Name then\n-         Decl := Parent (Parent (E));\n-      else\n-         Decl := Parent (E);\n-      end if;\n-\n-      Vis_Decls := Visible_Declarations (Decl);\n-\n-      N := First (Vis_Decls);\n-      while Present (N) loop\n-\n-         --  Skip declarations generated by the frontend. Skip all pragmas\n-         --  that are not the desired Annotate pragma. Stop the search on\n-         --  the first non-pragma source declaration.\n-\n-         if Comes_From_Source (N) then\n-            if Nkind (N) = N_Pragma then\n-               if Is_Annotate_Pragma_For_External_Axiomatization (N) then\n-                  return True;\n-               end if;\n-            else\n-               return False;\n-            end if;\n-         end if;\n-\n-         Next (N);\n-      end loop;\n-\n-      return False;\n-   end Has_Annotate_Pragma_For_External_Axiomatization;\n-\n    --------------------\n    -- Homonym_Number --\n    --------------------"}, {"sha": "37eb86fba003c488f8b39cb803a69fead13a4107", "filename": "gcc/ada/exp_util.ads", "status": "modified", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/955886d1a2c75d16b41df1c97d04387bd7436dab/gcc%2Fada%2Fexp_util.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/955886d1a2c75d16b41df1c97d04387bd7436dab/gcc%2Fada%2Fexp_util.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_util.ads?ref=955886d1a2c75d16b41df1c97d04387bd7436dab", "patch": "@@ -427,11 +427,6 @@ package Exp_Util is\n    --  for trouble using this function and, if so, the assignment is expanded\n    --  component-wise, which the back end is required to handle correctly.\n \n-   function Containing_Package_With_Ext_Axioms\n-     (E : Entity_Id) return Entity_Id;\n-   --  Returns the package entity with an external axiomatization containing E,\n-   --  if any, or Empty if none.\n-\n    procedure Convert_To_Actual_Subtype (Exp : Node_Id);\n    --  The Etype of an expression is the nominal type of the expression,\n    --  not the actual subtype. Often these are the same, but not always.\n@@ -730,12 +725,6 @@ package Exp_Util is\n    function Has_Access_Constraint (E : Entity_Id) return Boolean;\n    --  Given object or type E, determine if a discriminant is of an access type\n \n-   function Has_Annotate_Pragma_For_External_Axiomatization\n-     (E : Entity_Id) return Boolean;\n-   --  Returns whether E is a package entity, for which the initial list of\n-   --  pragmas at the start of the package declaration contains\n-   --    pragma Annotate (GNATprove, External_Axiomatization);\n-\n    function Homonym_Number (Subp : Entity_Id) return Pos;\n    --  Here subp is the entity for a subprogram. This routine returns the\n    --  homonym number used to disambiguate overloaded subprograms in the same"}, {"sha": "35c6f60d75d9a46af93bd3b9f1de075fe6849cca", "filename": "gcc/ada/sem_ch8.adb", "status": "modified", "additions": 1, "deletions": 33, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/955886d1a2c75d16b41df1c97d04387bd7436dab/gcc%2Fada%2Fsem_ch8.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/955886d1a2c75d16b41df1c97d04387bd7436dab/gcc%2Fada%2Fsem_ch8.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch8.adb?ref=955886d1a2c75d16b41df1c97d04387bd7436dab", "patch": "@@ -3005,16 +3005,7 @@ package body Sem_Ch8 is\n          --  Check whether the renaming is for a defaulted actual subprogram\n          --  with a class-wide actual.\n \n-         --  The class-wide wrapper is not needed in GNATprove_Mode and there\n-         --  is an external axiomatization on the package.\n-\n-         if CW_Actual\n-           and then Box_Present (Inst_Node)\n-           and then not\n-             (GNATprove_Mode\n-               and then\n-                 Present (Containing_Package_With_Ext_Axioms (Formal_Spec)))\n-         then\n+         if CW_Actual and then Box_Present (Inst_Node) then\n             Build_Class_Wide_Wrapper (New_S, Old_S);\n \n          elsif Is_Entity_Name (Nam)\n@@ -3874,29 +3865,6 @@ package body Sem_Ch8 is\n       Ada_Version_Pragma := Save_AVP;\n       Ada_Version_Explicit := Save_AV_Exp;\n \n-      --  In GNATprove mode, the renamings of actual subprograms are replaced\n-      --  with wrapper functions that make it easier to propagate axioms to the\n-      --  points of call within an instance. Wrappers are generated if formal\n-      --  subprogram is subject to axiomatization.\n-\n-      --  The types in the wrapper profiles are obtained from (instances of)\n-      --  the types of the formal subprogram.\n-\n-      if Is_Actual\n-        and then GNATprove_Mode\n-        and then Present (Containing_Package_With_Ext_Axioms (Formal_Spec))\n-        and then not Inside_A_Generic\n-      then\n-         if Ekind (Old_S) = E_Function then\n-            Rewrite (N, Build_Function_Wrapper (Formal_Spec, Old_S));\n-            Analyze (N);\n-\n-         elsif Ekind (Old_S) = E_Operator then\n-            Rewrite (N, Build_Operator_Wrapper (Formal_Spec, Old_S));\n-            Analyze (N);\n-         end if;\n-      end if;\n-\n       --  Check if we are looking at an Ada 2012 defaulted formal subprogram\n       --  and mark any use_package_clauses that affect the visibility of the\n       --  implicit generic actual."}]}