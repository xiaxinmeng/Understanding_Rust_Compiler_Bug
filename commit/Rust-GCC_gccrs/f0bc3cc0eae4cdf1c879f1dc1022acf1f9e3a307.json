{"sha": "f0bc3cc0eae4cdf1c879f1dc1022acf1f9e3a307", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjBiYzNjYzBlYWU0Y2RmMWM4NzlmMWRjMTAyMmFjZjFmOWUzYTMwNw==", "commit": {"author": {"name": "Jeff Law", "email": "law@redhat.com", "date": "2013-11-08T16:24:06Z"}, "committer": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "2013-11-08T16:24:06Z"}, "message": "tree-ssa-threadupdate.h (delete_thread_path): Declare.\n\n       * tree-ssa-threadupdate.h (delete_thread_path): Declare.\n        * tree-ssa-threadupdate.c (delete_thread_path): New function.\n        (ssa_redirect_edges, thread_block_1): Use it.\n        (thread_through_loop_header, mark_threaded_blocks): Likewise.\n        (thread_through_all_blocks, register_jump_thread): Likewise.\n        * tree-ssa-threadedge.c (thread_across_edge): Likewise.\n\nFrom-SVN: r204579", "tree": {"sha": "22495c8c04488309899cb5498c2ee0b571944d2c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/22495c8c04488309899cb5498c2ee0b571944d2c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f0bc3cc0eae4cdf1c879f1dc1022acf1f9e3a307", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f0bc3cc0eae4cdf1c879f1dc1022acf1f9e3a307", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f0bc3cc0eae4cdf1c879f1dc1022acf1f9e3a307", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f0bc3cc0eae4cdf1c879f1dc1022acf1f9e3a307/comments", "author": null, "committer": null, "parents": [{"sha": "df023e0f3e7228cc38677384dc7149368449066c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/df023e0f3e7228cc38677384dc7149368449066c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/df023e0f3e7228cc38677384dc7149368449066c"}], "stats": {"total": 65, "additions": 32, "deletions": 33}, "files": [{"sha": "9ba77dbcbe5fe06cd291ec9417361962a7d2bdea", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f0bc3cc0eae4cdf1c879f1dc1022acf1f9e3a307/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f0bc3cc0eae4cdf1c879f1dc1022acf1f9e3a307/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=f0bc3cc0eae4cdf1c879f1dc1022acf1f9e3a307", "patch": "@@ -1,3 +1,12 @@\n+2013-11-08  Jeff Law  <law@redhat.com>\n+\n+\t* tree-ssa-threadupdate.h (delete_thread_path): Declare.\n+\t* tree-ssa-threadupdate.c (delete_thread_path): New function.\n+\t(ssa_redirect_edges, thread_block_1): Use it.\n+\t(thread_through_loop_header, mark_threaded_blocks): Likewise.\n+\t(thread_through_all_blocks, register_jump_thread): Likewise.\n+\t* tree-ssa-threadedge.c (thread_across_edge): Likewise.\n+\n 2013-11-08  James Greenhalgh  <james.greenhalgh@arm.com>\n \n \t* config/arm/aarch-common.c"}, {"sha": "cd2b34ae6fff778793ad1e584788f1466c46b8e7", "filename": "gcc/tree-ssa-threadedge.c", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f0bc3cc0eae4cdf1c879f1dc1022acf1f9e3a307/gcc%2Ftree-ssa-threadedge.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f0bc3cc0eae4cdf1c879f1dc1022acf1f9e3a307/gcc%2Ftree-ssa-threadedge.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-threadedge.c?ref=f0bc3cc0eae4cdf1c879f1dc1022acf1f9e3a307", "patch": "@@ -1086,9 +1086,7 @@ thread_across_edge (gimple dummy_cond,\n \t  }\n \telse\n \t  {\n-\t    for (unsigned int i = 0; i < path->length (); i++)\n-\t      delete (*path)[i];\n-\t    path->release();\n+\t    delete_jump_thread_path (path);\n \t  }\n       }\n     BITMAP_FREE (visited);"}, {"sha": "24e7767c3b71c075ffa456bdf847b348f726384e", "filename": "gcc/tree-ssa-threadupdate.c", "status": "modified", "additions": 21, "deletions": 30, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f0bc3cc0eae4cdf1c879f1dc1022acf1f9e3a307/gcc%2Ftree-ssa-threadupdate.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f0bc3cc0eae4cdf1c879f1dc1022acf1f9e3a307/gcc%2Ftree-ssa-threadupdate.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-threadupdate.c?ref=f0bc3cc0eae4cdf1c879f1dc1022acf1f9e3a307", "patch": "@@ -555,9 +555,7 @@ ssa_redirect_edges (struct redirection_data **slot,\n \n       /* Go ahead and clear E->aux.  It's not needed anymore and failure\n          to clear it will cause all kinds of unpleasant problems later.  */\n-      for (unsigned int i = 0; i < path->length (); i++)\n-\tdelete (*path)[i];\n-      path->release ();\n+      delete_jump_thread_path (path);\n       e->aux = NULL;\n \n     }\n@@ -703,9 +701,7 @@ thread_block_1 (basic_block bb, bool noloop_only, bool joiners)\n \t      /* Since this case is not handled by our special code\n \t\t to thread through a loop header, we must explicitly\n \t\t cancel the threading request here.  */\n-\t      for (unsigned int i = 0; i < path->length (); i++)\n-\t\tdelete (*path)[i];\n-\t      path->release ();\n+\t      delete_jump_thread_path (path);\n \t      e->aux = NULL;\n \t      continue;\n \t    }\n@@ -1161,9 +1157,7 @@ thread_through_loop_header (struct loop *loop, bool may_peel_loop_headers)\n \t  if (e->src->loop_father != e2->dest->loop_father\n \t      && e2->dest != loop->header)\n \t    {\n-\t      for (unsigned int i = 0; i < path->length (); i++)\n-\t\tdelete (*path)[i];\n-\t      path->release ();\n+\t      delete_jump_thread_path (path);\n \t      e->aux = NULL;\n \t    }\n \t}\n@@ -1213,9 +1207,7 @@ thread_through_loop_header (struct loop *loop, bool may_peel_loop_headers)\n \n       if (path)\n \t{\n-\t  for (unsigned int i = 0; i < path->length (); i++)\n-\t    delete (*path)[i];\n-\t  path->release ();\n+\t  delete_jump_thread_path (path);\n \t  e->aux = NULL;\n \t}\n     }\n@@ -1310,9 +1302,7 @@ mark_threaded_blocks (bitmap threaded_blocks)\n \n \t\t  if (e2 && !phi_args_equal_on_edges (e2, final_edge))\n \t\t    {\n-\t\t      for (unsigned int i = 0; i < path->length (); i++)\n-\t\t\tdelete (*path)[i];\n-\t\t      path->release ();\n+\t\t      delete_jump_thread_path (path);\n \t\t      e->aux = NULL;\n \t\t    }\n \t\t}\n@@ -1336,9 +1326,7 @@ mark_threaded_blocks (bitmap threaded_blocks)\n \t\t  if (e->aux)\n \t\t    {\n \t\t      vec<jump_thread_edge *> *path = THREAD_PATH (e);\n-\t\t      for (unsigned int i = 0; i < path->length (); i++)\n-\t\t        delete (*path)[i];\n-\t\t      path->release ();\n+\t\t      delete_jump_thread_path (path);\n \t\t      e->aux = NULL;\n \t\t    }\n \t\t}\n@@ -1395,9 +1383,7 @@ mark_threaded_blocks (bitmap threaded_blocks)\n \t\t\t      || (path->last ()->type\n \t\t\t\t  == EDGE_COPY_SRC_JOINER_BLOCK))\n \t\t\t    {\n-\t\t\t      for (unsigned int i = 0; i < path->length (); i++)\n-\t\t\t\tdelete (*path)[i];\n-\t\t\t      path->release ();\n+\t\t\t      delete_jump_thread_path (path);\n \t\t\t      e->aux = NULL;\n \t\t\t    }\n \t\t\t  break;\n@@ -1498,9 +1484,7 @@ thread_through_all_blocks (bool may_peel_loop_headers)\n \t  {\n \t    vec<jump_thread_edge *> *path = THREAD_PATH (e);\n \n-\t    for (unsigned int i = 0; i < path->length (); i++)\n-\t      delete (*path)[i];\n-\t    path->release ();\n+\t    delete_jump_thread_path (path);\n \t    e->aux = NULL;\n  \t  }\n     }\n@@ -1520,6 +1504,17 @@ thread_through_all_blocks (bool may_peel_loop_headers)\n   return retval;\n }\n \n+/* Delete the jump threading path PATH.  We have to explcitly delete\n+   each entry in the vector, then the container.  */\n+\n+void\n+delete_jump_thread_path (vec<jump_thread_edge *> *path)\n+{\n+  for (unsigned int i = 0; i < path->length (); i++)\n+    delete (*path)[i];\n+  path->release();\n+}\n+\n /* Dump a jump threading path, including annotations about each\n    edge in the path.  */\n \n@@ -1565,9 +1560,7 @@ register_jump_thread (vec<jump_thread_edge *> *path)\n {\n   if (!dbg_cnt (registered_jump_thread))\n     {\n-      for (unsigned int i = 0; i < path->length (); i++)\n-\tdelete (*path)[i];\n-      path->release ();\n+      delete_jump_thread_path (path);\n       return;\n     }\n \n@@ -1583,9 +1576,7 @@ register_jump_thread (vec<jump_thread_edge *> *path)\n \t    dump_jump_thread_path (dump_file, *path);\n \t  }\n \n-\tfor (unsigned int i = 0; i < path->length (); i++)\n-\t  delete (*path)[i];\n-\tpath->release ();\n+\tdelete_jump_thread_path (path);\n \treturn;\n       }\n "}, {"sha": "4617b9c1d3e839f2a6b67298f35d6012f0f6b845", "filename": "gcc/tree-ssa-threadupdate.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f0bc3cc0eae4cdf1c879f1dc1022acf1f9e3a307/gcc%2Ftree-ssa-threadupdate.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f0bc3cc0eae4cdf1c879f1dc1022acf1f9e3a307/gcc%2Ftree-ssa-threadupdate.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-threadupdate.h?ref=f0bc3cc0eae4cdf1c879f1dc1022acf1f9e3a307", "patch": "@@ -42,4 +42,5 @@ class jump_thread_edge\n };\n \n extern void register_jump_thread (vec <class jump_thread_edge *> *);\n+extern void delete_jump_thread_path (vec <class jump_thread_edge *> *);\n #endif"}]}