{"sha": "0777fc02105dd9067329ed9ccfe341a9fb90fdc2", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDc3N2ZjMDIxMDVkZDkwNjczMjllZDljY2ZlMzQxYTlmYjkwZmRjMg==", "commit": {"author": {"name": "Uros Bizjak", "email": "ubizjak@gmail.com", "date": "2014-10-14T18:40:59Z"}, "committer": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2014-10-14T18:40:59Z"}, "message": "re PR rtl-optimization/63475 (Postreload CSE propagates aliased memory operand)\n\n\tPR rtl-optimization/63475\n\t* alias.c (true_dependence_1): Always use get_addr to extract\n\ttrue address operands from x_addr and mem_addr.  Use extracted\n\taddress operands to check for references with alignment ANDs.\n\tUse extracted address operands with find_base_term and\n\tbase_alias_check. For noncanonicalized operands call canon_rtx with\n\textracted address operand.\n\t(write_dependence_1): Ditto.\n\t(may_alias_p): Ditto.  Remove unused calls to canon_rtx.\n\nFrom-SVN: r216217", "tree": {"sha": "d9aee1f90a9669265bd2bec0ed8a70b4a7bf84e0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d9aee1f90a9669265bd2bec0ed8a70b4a7bf84e0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0777fc02105dd9067329ed9ccfe341a9fb90fdc2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0777fc02105dd9067329ed9ccfe341a9fb90fdc2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0777fc02105dd9067329ed9ccfe341a9fb90fdc2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0777fc02105dd9067329ed9ccfe341a9fb90fdc2/comments", "author": {"login": "ubizjak", "id": 55479990, "node_id": "MDQ6VXNlcjU1NDc5OTkw", "avatar_url": "https://avatars.githubusercontent.com/u/55479990?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ubizjak", "html_url": "https://github.com/ubizjak", "followers_url": "https://api.github.com/users/ubizjak/followers", "following_url": "https://api.github.com/users/ubizjak/following{/other_user}", "gists_url": "https://api.github.com/users/ubizjak/gists{/gist_id}", "starred_url": "https://api.github.com/users/ubizjak/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ubizjak/subscriptions", "organizations_url": "https://api.github.com/users/ubizjak/orgs", "repos_url": "https://api.github.com/users/ubizjak/repos", "events_url": "https://api.github.com/users/ubizjak/events{/privacy}", "received_events_url": "https://api.github.com/users/ubizjak/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "2a523cfe4e6304f18117266d34f4ae2603274577", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2a523cfe4e6304f18117266d34f4ae2603274577", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2a523cfe4e6304f18117266d34f4ae2603274577"}], "stats": {"total": 95, "additions": 39, "deletions": 56}, "files": [{"sha": "647b3a441994eb41bfe958e8d23f465c4345d487", "filename": "gcc/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0777fc02105dd9067329ed9ccfe341a9fb90fdc2/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0777fc02105dd9067329ed9ccfe341a9fb90fdc2/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=0777fc02105dd9067329ed9ccfe341a9fb90fdc2", "patch": "@@ -1,3 +1,15 @@\n+2014-10-14  Uros Bizjak  <ubizjak@gmail.com>\n+\n+\tPR rtl-optimization/63475\n+\t* alias.c (true_dependence_1): Always use get_addr to extract\n+\ttrue address operands from x_addr and mem_addr.  Use extracted\n+\taddress operands to check for references with alignment ANDs.\n+\tUse extracted address operands with find_base_term and\n+\tbase_alias_check. For noncanonicalized operands call canon_rtx with\n+\textracted address operand.\n+\t(write_dependence_1): Ditto.\n+\t(may_alias_p): Ditto.  Remove unused calls to canon_rtx.\n+\n 2014-10-14  Evgeny Stupachenko  <evstupac@gmail.com>\n \n \tPR target/63534"}, {"sha": "4ff0aacfba8f4f4d95f90d215ba14e5e10f7c8ca", "filename": "gcc/alias.c", "status": "modified", "additions": 27, "deletions": 56, "changes": 83, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0777fc02105dd9067329ed9ccfe341a9fb90fdc2/gcc%2Falias.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0777fc02105dd9067329ed9ccfe341a9fb90fdc2/gcc%2Falias.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Falias.c?ref=0777fc02105dd9067329ed9ccfe341a9fb90fdc2", "patch": "@@ -2439,6 +2439,7 @@ static int\n true_dependence_1 (const_rtx mem, enum machine_mode mem_mode, rtx mem_addr,\n \t\t   const_rtx x, rtx x_addr, bool mem_canonicalized)\n {\n+  rtx true_mem_addr;\n   rtx base;\n   int ret;\n \n@@ -2458,28 +2459,17 @@ true_dependence_1 (const_rtx mem, enum machine_mode mem_mode, rtx mem_addr,\n       || MEM_ALIAS_SET (mem) == ALIAS_SET_MEMORY_BARRIER)\n     return 1;\n \n+  if (! x_addr)\n+    x_addr = XEXP (x, 0);\n+  x_addr = get_addr (x_addr);\n+\n   if (! mem_addr)\n     {\n       mem_addr = XEXP (mem, 0);\n       if (mem_mode == VOIDmode)\n \tmem_mode = GET_MODE (mem);\n     }\n-\n-  if (! x_addr)\n-    {\n-      x_addr = XEXP (x, 0);\n-      if (!((GET_CODE (x_addr) == VALUE\n-\t     && GET_CODE (mem_addr) != VALUE\n-\t     && reg_mentioned_p (x_addr, mem_addr))\n-\t    || (GET_CODE (x_addr) != VALUE\n-\t\t&& GET_CODE (mem_addr) == VALUE\n-\t\t&& reg_mentioned_p (mem_addr, x_addr))))\n-\t{\n-\t  x_addr = get_addr (x_addr);\n-\t  if (! mem_canonicalized)\n-\t    mem_addr = get_addr (mem_addr);\n-\t}\n-    }\n+  true_mem_addr = get_addr (mem_addr);\n \n   /* Read-only memory is by definition never modified, and therefore can't\n      conflict with anything.  However, don't assume anything when AND\n@@ -2488,7 +2478,7 @@ true_dependence_1 (const_rtx mem, enum machine_mode mem_mode, rtx mem_addr,\n      stupid user tricks can produce them, so don't die.  */\n   if (MEM_READONLY_P (x)\n       && GET_CODE (x_addr) != AND\n-      && GET_CODE (mem_addr) != AND)\n+      && GET_CODE (true_mem_addr) != AND)\n     return 0;\n \n   /* If we have MEMs referring to different address spaces (which can\n@@ -2503,14 +2493,14 @@ true_dependence_1 (const_rtx mem, enum machine_mode mem_mode, rtx mem_addr,\n \t\t   && CONSTANT_POOL_ADDRESS_P (base))))\n     return 0;\n \n-  rtx mem_base = find_base_term (mem_addr);\n-  if (! base_alias_check (x_addr, base, mem_addr, mem_base,\n+  rtx mem_base = find_base_term (true_mem_addr);\n+  if (! base_alias_check (x_addr, base, true_mem_addr, mem_base,\n \t\t\t  GET_MODE (x), mem_mode))\n     return 0;\n \n   x_addr = canon_rtx (x_addr);\n   if (!mem_canonicalized)\n-    mem_addr = canon_rtx (mem_addr);\n+    mem_addr = canon_rtx (true_mem_addr);\n \n   if ((ret = memrefs_conflict_p (GET_MODE_SIZE (mem_mode), mem_addr,\n \t\t\t\t SIZE_FOR_MODE (x), x_addr, 0)) != -1)\n@@ -2560,6 +2550,7 @@ write_dependence_p (const_rtx mem,\n \t\t    bool mem_canonicalized, bool x_canonicalized, bool writep)\n {\n   rtx mem_addr;\n+  rtx true_mem_addr, true_x_addr;\n   rtx base;\n   int ret;\n \n@@ -2580,30 +2571,20 @@ write_dependence_p (const_rtx mem,\n       || MEM_ALIAS_SET (mem) == ALIAS_SET_MEMORY_BARRIER)\n     return 1;\n \n-  mem_addr = XEXP (mem, 0);\n   if (!x_addr)\n-    {\n-      x_addr = XEXP (x, 0);\n-      if (!((GET_CODE (x_addr) == VALUE\n-\t     && GET_CODE (mem_addr) != VALUE\n-\t     && reg_mentioned_p (x_addr, mem_addr))\n-\t    || (GET_CODE (x_addr) != VALUE\n-\t\t&& GET_CODE (mem_addr) == VALUE\n-\t\t&& reg_mentioned_p (mem_addr, x_addr))))\n-\t{\n-\t  x_addr = get_addr (x_addr);\n-\t  if (!mem_canonicalized)\n-\t    mem_addr = get_addr (mem_addr);\n-\t}\n-    }\n+    x_addr = XEXP (x, 0);\n+  true_x_addr = get_addr (x_addr);\n+\n+  mem_addr = XEXP (mem, 0);\n+  true_mem_addr = get_addr (mem_addr);\n \n   /* A read from read-only memory can't conflict with read-write memory.\n      Don't assume anything when AND addresses are involved and leave to\n      the code below to determine dependence.  */\n   if (!writep\n       && MEM_READONLY_P (mem)\n-      && GET_CODE (x_addr) != AND\n-      && GET_CODE (mem_addr) != AND)\n+      && GET_CODE (true_x_addr) != AND\n+      && GET_CODE (true_mem_addr) != AND)\n     return 0;\n \n   /* If we have MEMs referring to different address spaces (which can\n@@ -2612,26 +2593,26 @@ write_dependence_p (const_rtx mem,\n   if (MEM_ADDR_SPACE (mem) != MEM_ADDR_SPACE (x))\n     return 1;\n \n-  base = find_base_term (mem_addr);\n+  base = find_base_term (true_mem_addr);\n   if (! writep\n       && base\n       && (GET_CODE (base) == LABEL_REF\n \t  || (GET_CODE (base) == SYMBOL_REF\n \t      && CONSTANT_POOL_ADDRESS_P (base))))\n     return 0;\n \n-  rtx x_base = find_base_term (x_addr);\n-  if (! base_alias_check (x_addr, x_base, mem_addr, base, GET_MODE (x),\n-\t\t\t  GET_MODE (mem)))\n+  rtx x_base = find_base_term (true_x_addr);\n+  if (! base_alias_check (true_x_addr, x_base, true_mem_addr, base,\n+\t\t\t  GET_MODE (x), GET_MODE (mem)))\n     return 0;\n \n   if (!x_canonicalized)\n     {\n-      x_addr = canon_rtx (x_addr);\n+      x_addr = canon_rtx (true_x_addr);\n       x_mode = GET_MODE (x);\n     }\n   if (!mem_canonicalized)\n-    mem_addr = canon_rtx (mem_addr);\n+    mem_addr = canon_rtx (true_mem_addr);\n \n   if ((ret = memrefs_conflict_p (SIZE_FOR_MODE (mem), mem_addr,\n \t\t\t\t GET_MODE_SIZE (x_mode), x_addr, 0)) != -1)\n@@ -2700,17 +2681,10 @@ may_alias_p (const_rtx mem, const_rtx x)\n     return 1;\n \n   x_addr = XEXP (x, 0);\n+  x_addr = get_addr (x_addr);\n+\n   mem_addr = XEXP (mem, 0);\n-  if (!((GET_CODE (x_addr) == VALUE\n-\t && GET_CODE (mem_addr) != VALUE\n-\t && reg_mentioned_p (x_addr, mem_addr))\n-\t|| (GET_CODE (x_addr) != VALUE\n-\t    && GET_CODE (mem_addr) == VALUE\n-\t    && reg_mentioned_p (mem_addr, x_addr))))\n-    {\n-      x_addr = get_addr (x_addr);\n-      mem_addr = get_addr (mem_addr);\n-    }\n+  mem_addr = get_addr (mem_addr);\n \n   /* Read-only memory is by definition never modified, and therefore can't\n      conflict with anything.  However, don't assume anything when AND\n@@ -2734,9 +2708,6 @@ may_alias_p (const_rtx mem, const_rtx x)\n \t\t\t  GET_MODE (x), GET_MODE (mem_addr)))\n     return 0;\n \n-  x_addr = canon_rtx (x_addr);\n-  mem_addr = canon_rtx (mem_addr);\n-\n   if (nonoverlapping_memrefs_p (mem, x, true))\n     return 0;\n "}]}