{"sha": "51ec054c3aa3fa4db27a2d939f9ebe686bfaa247", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTFlYzA1NGMzYWEzZmE0ZGIyN2EyZDkzOWY5ZWJlNjg2YmZhYTI0Nw==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@cygnus.com", "date": "2000-01-30T20:14:40Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2000-01-30T20:14:40Z"}, "message": "alpha.md (negtf2, abstf2): Fix word order thinko.\n\n        * alpha.md (negtf2, abstf2): Fix word order thinko.\n        (extendsftf2): New.\n        (trunctfsf2): Avoid intermediate rounding errors.\n\nFrom-SVN: r31701", "tree": {"sha": "dc45e6998db7ad7394295874b844f51c2f2f8a7b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/dc45e6998db7ad7394295874b844f51c2f2f8a7b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/51ec054c3aa3fa4db27a2d939f9ebe686bfaa247", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/51ec054c3aa3fa4db27a2d939f9ebe686bfaa247", "html_url": "https://github.com/Rust-GCC/gccrs/commit/51ec054c3aa3fa4db27a2d939f9ebe686bfaa247", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/51ec054c3aa3fa4db27a2d939f9ebe686bfaa247/comments", "author": null, "committer": null, "parents": [{"sha": "a73ac7a5686a2825ee6ec5cb354036087dd71ac2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a73ac7a5686a2825ee6ec5cb354036087dd71ac2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a73ac7a5686a2825ee6ec5cb354036087dd71ac2"}], "stats": {"total": 61, "additions": 45, "deletions": 16}, "files": [{"sha": "8050ecd9e8714452976774145d71c9f8b9b38bab", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/51ec054c3aa3fa4db27a2d939f9ebe686bfaa247/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/51ec054c3aa3fa4db27a2d939f9ebe686bfaa247/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=51ec054c3aa3fa4db27a2d939f9ebe686bfaa247", "patch": "@@ -1,3 +1,9 @@\n+2000-01-30  Richard Henderson  <rth@cygnus.com>\n+\n+\t* alpha.md (negtf2, abstf2): Fix word order thinko.\n+\t(extendsftf2): New.\n+\t(trunctfsf2): Avoid intermediate rounding errors.\n+\n 2000-01-30  Zack Weinberg  <zack@wolery.cumb.org>\n \n \t* cppfiles.c (find_position): Drop 'colp' argument, return the"}, {"sha": "74140329839c54763cd8486044b82e067e098510", "filename": "gcc/config/alpha/alpha.md", "status": "modified", "additions": 39, "deletions": 16, "changes": 55, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/51ec054c3aa3fa4db27a2d939f9ebe686bfaa247/gcc%2Fconfig%2Falpha%2Falpha.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/51ec054c3aa3fa4db27a2d939f9ebe686bfaa247/gcc%2Fconfig%2Falpha%2Falpha.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Falpha.md?ref=51ec054c3aa3fa4db27a2d939f9ebe686bfaa247", "patch": "@@ -1808,18 +1808,18 @@\n   move = 1;\n   if (rtx_equal_p (operands[0], operands[2]))\n     move = 0;\n-  else if (rtx_equal_p (operands[0], operands[3]))\n+  else if (rtx_equal_p (operands[1], operands[2]))\n     move = -1;\n \n   if (move < 0)\n-    emit_move_insn (operands[1], operands[3]);\n+    emit_move_insn (operands[0], operands[2]);\n \n   tmp = gen_rtx_NOT (DImode, operands[4]);\n-  tmp = gen_rtx_AND (DImode, tmp, operands[2]);\n-  emit_insn (gen_rtx_SET (VOIDmode, operands[0], tmp));\n+  tmp = gen_rtx_AND (DImode, tmp, operands[3]);\n+  emit_insn (gen_rtx_SET (VOIDmode, operands[1], tmp));\n \t\n   if (move > 0)\n-    emit_move_insn (operands[1], operands[3]);\n+    emit_move_insn (operands[0], operands[2]);\n   DONE;\n }\")\n \n@@ -1873,16 +1873,16 @@\n   move = 1;\n   if (rtx_equal_p (operands[0], operands[2]))\n     move = 0;\n-  else if (rtx_equal_p (operands[0], operands[3]))\n+  else if (rtx_equal_p (operands[1], operands[2]))\n     move = -1;\n \n   if (move < 0)\n-    emit_move_insn (operands[1], operands[3]);\n+    emit_move_insn (operands[0], operands[2]);\n \n-  emit_insn (gen_xordi3 (operands[0], operands[2], operands[4]));\n+  emit_insn (gen_xordi3 (operands[1], operands[3], operands[4]));\n \t\n   if (move > 0)\n-    emit_move_insn (operands[1], operands[3]);\n+    emit_move_insn (operands[0], operands[2]);\n   DONE;\n }\")\n \n@@ -2179,6 +2179,18 @@\n    st%- %1,%0\"\n   [(set_attr \"type\" \"fcpys,fld,fst\")])\n \n+(define_expand \"extendsftf2\"\n+  [(use (match_operand:TF 0 \"register_operand\" \"\"))\n+   (use (match_operand:SF 1 \"general_operand\" \"\"))]\n+  \"TARGET_HAS_XFLOATING_LIBS\"\n+  \"\n+{\n+  rtx tmp = gen_reg_rtx (DFmode);\n+  emit_insn (gen_extendsfdf2 (tmp, operands[1]));\n+  emit_insn (gen_extenddftf2 (operands[0], tmp));\n+  DONE;\n+}\")\n+\n (define_expand \"extenddftf2\"\n   [(use (match_operand:TF 0 \"register_operand\" \"\"))\n    (use (match_operand:DF 1 \"general_operand\" \"\"))]\n@@ -2207,19 +2219,30 @@\n   \"TARGET_HAS_XFLOATING_LIBS\"\n   \"alpha_emit_xfloating_cvt (FLOAT_TRUNCATE, operands); DONE;\")\n \n-;; ??? This isn't quite right, as rounding isn't correct.  But it's\n-;; extremely tortureous to do this correctly with the functionality\n-;; availible in the library.\n-\n (define_expand \"trunctfsf2\"\n   [(use (match_operand:SF 0 \"register_operand\" \"\"))\n    (use (match_operand:TF 1 \"general_operand\" \"\"))]\n   \"TARGET_HAS_XFLOATING_LIBS\"\n   \"\n {\n-  rtx tmp = gen_reg_rtx (DFmode);\n-  emit_insn (gen_trunctfdf2 (tmp, operands[1]));\n-  emit_insn (gen_truncdfsf2 (operands[0], tmp));\n+  rtx tmpf, sticky, arg, lo, hi;\n+\n+  tmpf = gen_reg_rtx (DFmode);\n+  sticky = gen_reg_rtx (DImode);\n+  arg = copy_to_mode_reg (TFmode, operands[1]);\n+  lo = gen_lowpart (DImode, arg);\n+  hi = gen_highpart (DImode, arg);\n+\n+  /* Convert the low word of the TFmode value into a sticky rounding bit,\n+     then or it into the low bit of the high word.  This leaves the sticky\n+     bit at bit 48 of the fraction, which is representable in DFmode,\n+     which prevents rounding error in the final conversion to SFmode.  */\n+\n+  emit_insn (gen_rtx_SET (VOIDmode, sticky, \n+\t\t\t  gen_rtx_LTU (DImode, const0_rtx, lo)));\n+  emit_insn (gen_iordi3 (hi, hi, sticky));\n+  emit_insn (gen_trunctfdf2 (tmpf, arg));\n+  emit_insn (gen_truncdfsf2 (operands[0], tmpf));\n   DONE;\n }\")\n "}]}