{"sha": "80d96902421579b2ca7458027a0003da0271b4de", "node_id": "C_kwDOANBUbNoAKDgwZDk2OTAyNDIxNTc5YjJjYTc0NTgwMjdhMDAwM2RhMDI3MWI0ZGU", "commit": {"author": {"name": "Arthur Cohen", "email": "arthur.cohen@embecosm.com", "date": "2022-03-18T13:44:29Z"}, "committer": {"name": "Arthur Cohen", "email": "arthur.cohen@embecosm.com", "date": "2022-03-18T13:44:29Z"}, "message": "parser: Parse reserved keywords as valid fragments identifiers\n\nPer the reference, macro fragments actually accept all identifiers, not\nNON_KEYWORD_IDENTIFIERS", "tree": {"sha": "5835b6f393524237bd007ad21d9651fa584c8809", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5835b6f393524237bd007ad21d9651fa584c8809"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/80d96902421579b2ca7458027a0003da0271b4de", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/80d96902421579b2ca7458027a0003da0271b4de", "html_url": "https://github.com/Rust-GCC/gccrs/commit/80d96902421579b2ca7458027a0003da0271b4de", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/80d96902421579b2ca7458027a0003da0271b4de/comments", "author": {"login": "CohenArthur", "id": 43524065, "node_id": "MDQ6VXNlcjQzNTI0MDY1", "avatar_url": "https://avatars.githubusercontent.com/u/43524065?v=4", "gravatar_id": "", "url": "https://api.github.com/users/CohenArthur", "html_url": "https://github.com/CohenArthur", "followers_url": "https://api.github.com/users/CohenArthur/followers", "following_url": "https://api.github.com/users/CohenArthur/following{/other_user}", "gists_url": "https://api.github.com/users/CohenArthur/gists{/gist_id}", "starred_url": "https://api.github.com/users/CohenArthur/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/CohenArthur/subscriptions", "organizations_url": "https://api.github.com/users/CohenArthur/orgs", "repos_url": "https://api.github.com/users/CohenArthur/repos", "events_url": "https://api.github.com/users/CohenArthur/events{/privacy}", "received_events_url": "https://api.github.com/users/CohenArthur/received_events", "type": "User", "site_admin": false}, "committer": {"login": "CohenArthur", "id": 43524065, "node_id": "MDQ6VXNlcjQzNTI0MDY1", "avatar_url": "https://avatars.githubusercontent.com/u/43524065?v=4", "gravatar_id": "", "url": "https://api.github.com/users/CohenArthur", "html_url": "https://github.com/CohenArthur", "followers_url": "https://api.github.com/users/CohenArthur/followers", "following_url": "https://api.github.com/users/CohenArthur/following{/other_user}", "gists_url": "https://api.github.com/users/CohenArthur/gists{/gist_id}", "starred_url": "https://api.github.com/users/CohenArthur/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/CohenArthur/subscriptions", "organizations_url": "https://api.github.com/users/CohenArthur/orgs", "repos_url": "https://api.github.com/users/CohenArthur/repos", "events_url": "https://api.github.com/users/CohenArthur/events{/privacy}", "received_events_url": "https://api.github.com/users/CohenArthur/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1bb9a29688ab4ddfec7f8d36ca2cee63c5f258d2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1bb9a29688ab4ddfec7f8d36ca2cee63c5f258d2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1bb9a29688ab4ddfec7f8d36ca2cee63c5f258d2"}], "stats": {"total": 62, "additions": 59, "deletions": 3}, "files": [{"sha": "644e7898a70bf67c0ed9084118b1a70c58059923", "filename": "gcc/rust/parse/rust-parse-impl.h", "status": "modified", "additions": 59, "deletions": 3, "changes": 62, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/80d96902421579b2ca7458027a0003da0271b4de/gcc%2Frust%2Fparse%2Frust-parse-impl.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/80d96902421579b2ca7458027a0003da0271b4de/gcc%2Frust%2Fparse%2Frust-parse-impl.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fparse%2Frust-parse-impl.h?ref=80d96902421579b2ca7458027a0003da0271b4de", "patch": "@@ -1832,6 +1832,56 @@ Parser<ManagedTokenSource>::parse_macro_match ()\n \tconst_TokenPtr t2 = lexer.peek_token (1);\n \tswitch (t2->get_id ())\n \t  {\n+\t  case ABSTRACT:\n+\t  case AS:\n+\t  case ASYNC:\n+\t  case BECOME:\n+\t  case BOX:\n+\t  case BREAK:\n+\t  case CONST:\n+\t  case CONTINUE:\n+\t  case CRATE:\n+\t  case DO:\n+\t  case DYN:\n+\t  case ELSE:\n+\t  case ENUM_TOK:\n+\t  case EXTERN_TOK:\n+\t  case FALSE_LITERAL:\n+\t  case FINAL_TOK:\n+\t  case FN_TOK:\n+\t  case FOR:\n+\t  case IF:\n+\t  case IMPL:\n+\t  case IN:\n+\t  case LET:\n+\t  case LOOP:\n+\t  case MACRO:\n+\t  case MATCH_TOK:\n+\t  case MOD:\n+\t  case MOVE:\n+\t  case MUT:\n+\t  case OVERRIDE_TOK:\n+\t  case PRIV:\n+\t  case PUB:\n+\t  case REF:\n+\t  case RETURN_TOK:\n+\t  case SELF_ALIAS:\n+\t  case SELF:\n+\t  case STATIC_TOK:\n+\t  case STRUCT_TOK:\n+\t  case SUPER:\n+\t  case TRAIT:\n+\t  case TRUE_LITERAL:\n+\t  case TRY:\n+\t  case TYPE:\n+\t  case TYPEOF:\n+\t  case UNSAFE:\n+\t  case UNSIZED:\n+\t  case USE:\n+\t  case VIRTUAL:\n+\t  case WHERE:\n+\t  case WHILE:\n+\t  case YIELD:\n \t  case IDENTIFIER:\n \t    // macro fragment\n \t    return parse_macro_match_fragment ();\n@@ -1877,16 +1927,22 @@ Parser<ManagedTokenSource>::parse_macro_match_fragment ()\n   Location fragment_locus = lexer.peek_token ()->get_locus ();\n   skip_token (DOLLAR_SIGN);\n \n-  const_TokenPtr ident_tok = expect_token (IDENTIFIER);\n-  if (ident_tok == nullptr)\n+  Identifier ident = \"\";\n+  auto identifier = lexer.peek_token ();\n+  if (identifier->has_str ())\n+    ident = identifier->get_str ();\n+  else\n+    ident = std::string (token_id_to_str (identifier->get_id ()));\n+\n+  if (ident.empty ())\n     {\n       Error error (lexer.peek_token ()->get_locus (),\n \t\t   \"missing identifier in macro match fragment\");\n       add_error (std::move (error));\n \n       return nullptr;\n     }\n-  Identifier ident = ident_tok->get_str ();\n+  skip_token (identifier->get_id ());\n \n   if (!skip_token (COLON))\n     {"}]}