{"sha": "ca1ffed0e8ac8c0eddaf04b73e05a1af1e0dff32", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Y2ExZmZlZDBlOGFjOGMwZWRkYWYwNGI3M2UwNWExYWYxZTBkZmYzMg==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2013-01-02T11:53:18Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2013-01-02T11:53:18Z"}, "message": "[multiple changes]\n\n2013-01-02  Robert Dewar  <dewar@adacore.com>\n\n\t* einfo.ads, einfo.adb (Has_Independent_Components): New flag.\n\t* freeze.adb (Size_Known): We do not know the size of a packed\n\trecord if it has atomic components, by reference type components,\n\tor independent components.\n\t* sem_prag.adb (Analyze_Pragma, case Independent_Components): Set new\n\tflag Has_Independent_Components.\n\n2013-01-02  Yannick Moy  <moy@adacore.com>\n\n\t* opt.ads (Warn_On_Suspicious_Contract): Set to True by default.\n\t* usage.adb (Usage): Update usage message.\n\n2013-01-02  Pascal Obry  <obry@adacore.com>\n\n\t* adaint.c (__gnat_is_module_name_supported): New constant.\n\n2013-01-02  Ed Schonberg  <schonberg@adacore.com>\n\n\t* sem_attr.adb (Check_Array_Type): Reject an attribute reference on an\n\tarray whose component type does not have a completion.\n\nFrom-SVN: r194802", "tree": {"sha": "fcf852e9dd7a9c44aea85f37bc627c6f0395314e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/fcf852e9dd7a9c44aea85f37bc627c6f0395314e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ca1ffed0e8ac8c0eddaf04b73e05a1af1e0dff32", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ca1ffed0e8ac8c0eddaf04b73e05a1af1e0dff32", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ca1ffed0e8ac8c0eddaf04b73e05a1af1e0dff32", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ca1ffed0e8ac8c0eddaf04b73e05a1af1e0dff32/comments", "author": null, "committer": null, "parents": [{"sha": "04b80dbb54360ddefb7c7303063141d811bf3d16", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/04b80dbb54360ddefb7c7303063141d811bf3d16", "html_url": "https://github.com/Rust-GCC/gccrs/commit/04b80dbb54360ddefb7c7303063141d811bf3d16"}], "stats": {"total": 165, "additions": 129, "deletions": 36}, "files": [{"sha": "eaa7d6a95c07a38fb92a4e11c574061cccd58fca", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca1ffed0e8ac8c0eddaf04b73e05a1af1e0dff32/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca1ffed0e8ac8c0eddaf04b73e05a1af1e0dff32/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=ca1ffed0e8ac8c0eddaf04b73e05a1af1e0dff32", "patch": "@@ -1,3 +1,26 @@\n+2013-01-02  Robert Dewar  <dewar@adacore.com>\n+\n+\t* einfo.ads, einfo.adb (Has_Independent_Components): New flag.\n+\t* freeze.adb (Size_Known): We do not know the size of a packed\n+\trecord if it has atomic components, by reference type components,\n+\tor independent components.\n+\t* sem_prag.adb (Analyze_Pragma, case Independent_Components): Set new\n+\tflag Has_Independent_Components.\n+\n+2013-01-02  Yannick Moy  <moy@adacore.com>\n+\n+\t* opt.ads (Warn_On_Suspicious_Contract): Set to True by default.\n+\t* usage.adb (Usage): Update usage message.\n+\n+2013-01-02  Pascal Obry  <obry@adacore.com>\n+\n+\t* adaint.c (__gnat_is_module_name_supported): New constant.\n+\n+2013-01-02  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* sem_attr.adb (Check_Array_Type): Reject an attribute reference on an\n+\tarray whose component type does not have a completion.\n+\n 2013-01-02  Geert Bosch  <bosch@adacore.com>\n \n \t* a-nllcef.ads, a-nlcefu.ads, a-nscefu.ads: Make Pure."}, {"sha": "d95b6615b772e6e73900e5c0529ec5a67fe06019", "filename": "gcc/ada/adaint.c", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca1ffed0e8ac8c0eddaf04b73e05a1af1e0dff32/gcc%2Fada%2Fadaint.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca1ffed0e8ac8c0eddaf04b73e05a1af1e0dff32/gcc%2Fada%2Fadaint.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fadaint.c?ref=ca1ffed0e8ac8c0eddaf04b73e05a1af1e0dff32", "patch": "@@ -2963,7 +2963,10 @@ __gnat_locate_exec_on_path (char *exec_name)\n /* __gnat_get_module_name returns the module name (executable or shared\n    library) in which the code at addr is. This is used to properly\n    report the symbolic tracebacks.  If the module cannot be located\n-   it returns the empty string. The returned value must not be freed.  */\n+   it returns the empty string. The returned value must not be freed.\n+\n+   If this routine is fully implemented the value for\n+   __gnat_is_module_name_supported should be set to 1.  */\n \n char *__gnat_get_module_name (void *addr ATTRIBUTE_UNUSED)\n {\n@@ -2999,6 +3002,12 @@ char *__gnat_get_module_name (void *addr ATTRIBUTE_UNUSED)\n #endif\n }\n \n+#ifdef _WIN32\n+int __gnat_is_module_name_supported = 1;\n+#else\n+int __gnat_is_module_name_supported = 0;\n+#endif\n+\n #ifdef VMS\n \n /* These functions are used to translate to and from VMS and Unix syntax"}, {"sha": "34f61b9f25ee82f56e4513460c8ba1ffa4ddc38d", "filename": "gcc/ada/einfo.adb", "status": "modified", "additions": 13, "deletions": 1, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca1ffed0e8ac8c0eddaf04b73e05a1af1e0dff32/gcc%2Fada%2Feinfo.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca1ffed0e8ac8c0eddaf04b73e05a1af1e0dff32/gcc%2Fada%2Feinfo.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Feinfo.adb?ref=ca1ffed0e8ac8c0eddaf04b73e05a1af1e0dff32", "patch": "@@ -285,6 +285,7 @@ package body Einfo is\n    --    Checks_May_Be_Suppressed        Flag31\n    --    Kill_Elaboration_Checks         Flag32\n    --    Kill_Range_Checks               Flag33\n+   --    Has_Independent_Components      Flag34\n    --    Is_Class_Wide_Equivalent_Type   Flag35\n    --    Referenced_As_LHS               Flag36\n    --    Is_Known_Non_Null               Flag37\n@@ -527,7 +528,6 @@ package body Einfo is\n    --    Has_Anonymous_Master            Flag253\n    --    Is_Implementation_Defined       Flag254\n \n-   --    (unused)                        Flag34\n    --    (unused)                        Flag201\n \n    -----------------------\n@@ -1338,6 +1338,12 @@ package body Einfo is\n       return Flag251 (Id);\n    end Has_Implicit_Dereference;\n \n+   function Has_Independent_Components (Id : E) return B is\n+   begin\n+      pragma Assert (Is_Object (Id) or else Is_Type (Id));\n+      return Flag34 (Id);\n+   end Has_Independent_Components;\n+\n    function Has_Inheritable_Invariants (Id : E) return B is\n    begin\n       pragma Assert (Is_Type (Id));\n@@ -3853,6 +3859,12 @@ package body Einfo is\n       Set_Flag251 (Id, V);\n    end Set_Has_Implicit_Dereference;\n \n+   procedure Set_Has_Independent_Components (Id : E; V : B := True) is\n+   begin\n+      pragma Assert (Is_Object (Id) or else Is_Type (Id));\n+      Set_Flag34 (Id, V);\n+   end Set_Has_Independent_Components;\n+\n    procedure Set_Has_Inheritable_Invariants (Id : E; V : B := True) is\n    begin\n       pragma Assert (Is_Type (Id));"}, {"sha": "1da43d8cfb7f8df5acb355e7df8530ca947aecdb", "filename": "gcc/ada/einfo.ads", "status": "modified", "additions": 24, "deletions": 13, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca1ffed0e8ac8c0eddaf04b73e05a1af1e0dff32/gcc%2Fada%2Feinfo.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca1ffed0e8ac8c0eddaf04b73e05a1af1e0dff32/gcc%2Fada%2Feinfo.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Feinfo.ads?ref=ca1ffed0e8ac8c0eddaf04b73e05a1af1e0dff32", "patch": "@@ -528,19 +528,19 @@ package Einfo is\n --\n --       Setting this False in all cases corresponds to the traditional back\n --       end strategy, where all access-to-subprogram types are represented the\n---       same way, independent of the Convention. See also\n+--       same way, independent of the Convention. For further details, see also\n --       Always_Compatible_Rep in Targparm.\n --\n --       Efficiency note: On targets that use dynamically generated\n --       trampolines, False generally favors efficiency of top-level\n --       subprograms, whereas True generally favors efficiency of nested\n --       ones. On other targets, this flag has little or no effect on\n --       efficiency. The front end should take this into account. In\n---       particular, pragma Favor_Top_Level gives a hint that the flag should\n---       be False.\n+--       particular, pragma Favor_Top_Level gives a hint that the flag\n+--       should be False.\n --\n --       Note: We considered using Convention-C for this purpose, but we need\n---       this separate flag, because Convention-C implies that for\n+--       this separate flag, because Convention-C implies that in the case of\n --       P'[Unrestricted_]Access, P also have convention C. Sometimes we want\n --       to have Can_Use_Internal_Rep False for an access type, but allow P to\n --       have convention Ada.\n@@ -1547,6 +1547,19 @@ package Einfo is\n --       Implicit_Dereference. Set also on the discriminant named in the aspect\n --       clause, to simplify type resolution.\n \n+--    Has_Independent_Components (Flag34)\n+--       Defined in objects and types. Set if the aspect Independent_Components\n+--       applies (as set by coresponding pragma or aspect specification).\n+\n+--    Has_Inheritable_Invariants (Flag248)\n+--       Defined in all type entities. Set True in private types from which one\n+--       or more Invariant'Class aspects will be inherited if a another type is\n+--       derived from the type (i.e. those types which have an Invariant'Class\n+--       aspect, or which inherit one or more Invariant'Class aspects). Also\n+--       set in the corresponding full types. Note that it might be the full\n+--       type which has inheritable invariants, and in this case the flag will\n+--       also be set in the private type.\n+\n --    Has_Initial_Value (Flag219)\n --       Defined in entities for variables and out parameters. Set if there\n --       is an explicit initial value expression in the declaration of the\n@@ -1573,15 +1586,6 @@ package Einfo is\n --       the invariant procedure entity, to distinguish it among entries in the\n --       Subprograms_For_Type.\n \n---    Has_Inheritable_Invariants (Flag248)\n---       Defined in all type entities. Set True in private types from which one\n---       or more Invariant'Class aspects will be inherited if a another type is\n---       derived from the type (i.e. those types which have an Invariant'Class\n---       aspect, or which inherit one or more Invariant'Class aspects). Also\n---       set in the corresponding full types. Note that it might be the full\n---       type which has inheritable invariants, and in this case the flag will\n---       also be set in the private type.\n-\n --    Has_Machine_Radix_Clause (Flag83)\n --       Defined in decimal types and subtypes, set if a Machine_Radix\n --       representation clause is present. This flag is used to detect\n@@ -4902,6 +4906,7 @@ package Einfo is\n    --    Has_Controlled_Component            (Flag43)   (base type only)\n    --    Has_Default_Aspect                  (Flag39)   (base type only)\n    --    Has_Discriminants                   (Flag5)\n+   --    Has_Independent_Components          (Flag34)   (base type only)\n    --    Has_Inheritable_Invariants          (Flag248)\n    --    Has_Invariants                      (Flag232)\n    --    Has_Non_Standard_Rep                (Flag75)   (base type only)\n@@ -5102,6 +5107,7 @@ package Einfo is\n    --    Has_Atomic_Components               (Flag86)\n    --    Has_Biased_Representation           (Flag139)\n    --    Has_Completion                      (Flag26)   (constants only)\n+   --    Has_Independent_Components          (Flag34)   (base type only)\n    --    Has_Thunks                          (Flag228)  (constants only)\n    --    Has_Size_Clause                     (Flag29)\n    --    Has_Up_Level_Access                 (Flag215)\n@@ -5769,6 +5775,7 @@ package Einfo is\n    --    Has_Alignment_Clause                (Flag46)\n    --    Has_Atomic_Components               (Flag86)\n    --    Has_Biased_Representation           (Flag139)\n+   --    Has_Independent_Components          (Flag34)   (base type only)\n    --    Has_Initial_Value                   (Flag219)\n    --    Has_Size_Clause                     (Flag29)\n    --    Has_Up_Level_Access                 (Flag215)\n@@ -6154,6 +6161,7 @@ package Einfo is\n    function Has_Gigi_Rep_Item                   (Id : E) return B;\n    function Has_Homonym                         (Id : E) return B;\n    function Has_Implicit_Dereference            (Id : E) return B;\n+   function Has_Independent_Components          (Id : E) return B;\n    function Has_Inheritable_Invariants          (Id : E) return B;\n    function Has_Initial_Value                   (Id : E) return B;\n    function Has_Interrupt_Handler               (Id : E) return B;\n@@ -6745,6 +6753,7 @@ package Einfo is\n    procedure Set_Has_Gigi_Rep_Item               (Id : E; V : B := True);\n    procedure Set_Has_Homonym                     (Id : E; V : B := True);\n    procedure Set_Has_Implicit_Dereference        (Id : E; V : B := True);\n+   procedure Set_Has_Independent_Components      (Id : E; V : B := True);\n    procedure Set_Has_Inheritable_Invariants      (Id : E; V : B := True);\n    procedure Set_Has_Initial_Value               (Id : E; V : B := True);\n    procedure Set_Has_Invariants                  (Id : E; V : B := True);\n@@ -7424,6 +7433,7 @@ package Einfo is\n    pragma Inline (Has_Gigi_Rep_Item);\n    pragma Inline (Has_Homonym);\n    pragma Inline (Has_Implicit_Dereference);\n+   pragma Inline (Has_Independent_Components);\n    pragma Inline (Has_Inheritable_Invariants);\n    pragma Inline (Has_Initial_Value);\n    pragma Inline (Has_Invariants);\n@@ -7870,6 +7880,7 @@ package Einfo is\n    pragma Inline (Set_Has_Gigi_Rep_Item);\n    pragma Inline (Set_Has_Homonym);\n    pragma Inline (Set_Has_Implicit_Dereference);\n+   pragma Inline (Set_Has_Independent_Components);\n    pragma Inline (Set_Has_Inheritable_Invariants);\n    pragma Inline (Set_Has_Initial_Value);\n    pragma Inline (Set_Has_Invariants);"}, {"sha": "5df4c7271949665d942d0651874d8825c648d52d", "filename": "gcc/ada/freeze.adb", "status": "modified", "additions": 34, "deletions": 10, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca1ffed0e8ac8c0eddaf04b73e05a1af1e0dff32/gcc%2Fada%2Ffreeze.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca1ffed0e8ac8c0eddaf04b73e05a1af1e0dff32/gcc%2Fada%2Ffreeze.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Ffreeze.adb?ref=ca1ffed0e8ac8c0eddaf04b73e05a1af1e0dff32", "patch": "@@ -802,17 +802,22 @@ package body Freeze is\n                --  size of packed records if we can tell the size of the packed\n                --  record in the front end. Packed_Size_Known is True if so far\n                --  we can figure out the size. It is initialized to True for a\n-               --  packed record, unless the record has discriminants. The\n-               --  reason we eliminate the discriminated case is that we don't\n-               --  know the way the back end lays out discriminated packed\n-               --  records. If Packed_Size_Known is True, then Packed_Size is\n-               --  the size in bits so far.\n+               --  packed record, unless the record has discriminants or atomic\n+               --  components or independent components.\n+\n+               --  The reason we eliminate the discriminated case is that\n+               --  we don't know the way the back end lays out discriminated\n+               --  packed records. If Packed_Size_Known is True, then\n+               --  Packed_Size is the size in bits so far.\n \n                Packed_Size_Known : Boolean :=\n-                                     Is_Packed (T)\n-                                       and then not Has_Discriminants (T);\n+                 Is_Packed (T)\n+                   and then not Has_Discriminants (T)\n+                   and then not Has_Atomic_Components (T)\n+                   and then not Has_Independent_Components (T);\n \n                Packed_Size : Uint := Uint_0;\n+               --  SIze in bis so far\n \n             begin\n                --  Test for variant part present\n@@ -856,6 +861,16 @@ package body Freeze is\n                      Packed_Size_Known := False;\n                   end if;\n \n+                  --  We do not know the packed size if we have a by reference\n+                  --  type, or an atomic type or an atomic component.\n+\n+                  if Is_Atomic (Ctyp)\n+                    or else Is_Atomic (Comp)\n+                    or else Is_By_Reference_Type (Ctyp)\n+                  then\n+                     Packed_Size_Known := False;\n+                  end if;\n+\n                   --  We need to identify a component that is an array where\n                   --  the index type is an enumeration type with non-standard\n                   --  representation, and some bound of the type depends on a\n@@ -934,10 +949,19 @@ package body Freeze is\n                                  and then Is_Modular_Integer_Type\n                                             (Packed_Array_Type (Ctyp)))\n                      then\n+                        --  Packed size unknown if we have an atomic type\n+                        --  or a by reference type, since the back end\n+                        --  knows how these are layed out.\n+\n+                        if Is_Atomic (Ctyp)\n+                          or else Is_By_Reference_Type (Ctyp)\n+                        then\n+                           Packed_Size_Known := False;\n+\n                         --  If RM_Size is known and static, then we can keep\n-                        --  accumulating the packed size.\n+                        --  accumulating the packed size\n \n-                        if Known_Static_RM_Size (Ctyp) then\n+                        elsif Known_Static_RM_Size (Ctyp) then\n \n                            --  A little glitch, to be removed sometime ???\n                            --  gigi does not understand zero sizes yet.\n@@ -1050,7 +1074,7 @@ package body Freeze is\n             Comp_Byte_Aligned :=\n               Present (Component_Clause (Comp))\n                 and then\n-              Normalized_First_Bit (Comp) mod System_Storage_Unit = 0;\n+                  Normalized_First_Bit (Comp) mod System_Storage_Unit = 0;\n          end if;\n \n       --  Array case"}, {"sha": "2b68d79699375f69a0c3316cdf0ac297e9e1b425", "filename": "gcc/ada/opt.ads", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca1ffed0e8ac8c0eddaf04b73e05a1af1e0dff32/gcc%2Fada%2Fopt.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca1ffed0e8ac8c0eddaf04b73e05a1af1e0dff32/gcc%2Fada%2Fopt.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fopt.ads?ref=ca1ffed0e8ac8c0eddaf04b73e05a1af1e0dff32", "patch": "@@ -1618,11 +1618,11 @@ package Opt is\n    --  clauses that are affected by non-standard bit-order. The default is\n    --  that this warning is enabled. Modified by -gnatw.v/.V.\n \n-   Warn_On_Suspicious_Contract : Boolean := False;\n+   Warn_On_Suspicious_Contract : Boolean := True;\n    --  GNAT\n    --  Set to True to generate warnings for suspicious contracts expressed as\n    --  pragmas or aspects precondition and postcondition. The default is that\n-   --  this warning is disabled. Modified by use of -gnatw.t/.T.\n+   --  this warning is enabled. Modified by use of -gnatw.t/.T.\n \n    Warn_On_Suspicious_Modulus_Value : Boolean := True;\n    --  GNAT"}, {"sha": "6247952843e8f865c7551f14367645eb36917c0b", "filename": "gcc/ada/sem_attr.adb", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca1ffed0e8ac8c0eddaf04b73e05a1af1e0dff32/gcc%2Fada%2Fsem_attr.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca1ffed0e8ac8c0eddaf04b73e05a1af1e0dff32/gcc%2Fada%2Fsem_attr.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_attr.adb?ref=ca1ffed0e8ac8c0eddaf04b73e05a1af1e0dff32", "patch": "@@ -1015,6 +1015,16 @@ package body Sem_Attr is\n                  (\"prefix for % attribute must be constrained array\", P);\n             end if;\n \n+            --  The attribute reference freezes the type, and thus the\n+            --  component type, even if the attribute may not depend on the\n+            --  component. Diagnose arrays with incomplete components now.\n+            --  If the prefix is an access to array, this does not freeze\n+            --  the designated type.\n+\n+            if Nkind (P) /= N_Explicit_Dereference then\n+               Check_Fully_Declared (Component_Type (P_Type), P);\n+            end if;\n+\n             D := Number_Dimensions (P_Type);\n \n          else"}, {"sha": "0610128fd7b9bc96f471ab008b5f3a43db57158d", "filename": "gcc/ada/sem_prag.adb", "status": "modified", "additions": 11, "deletions": 7, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca1ffed0e8ac8c0eddaf04b73e05a1af1e0dff32/gcc%2Fada%2Fsem_prag.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca1ffed0e8ac8c0eddaf04b73e05a1af1e0dff32/gcc%2Fada%2Fsem_prag.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_prag.adb?ref=ca1ffed0e8ac8c0eddaf04b73e05a1af1e0dff32", "patch": "@@ -10330,15 +10330,19 @@ package body Sem_Prag is\n             D := Declaration_Node (E);\n             K := Nkind (D);\n \n-            if (K = N_Full_Type_Declaration\n-                 and then (Is_Array_Type (E) or else Is_Record_Type (E)))\n-              or else\n-                ((Ekind (E) = E_Constant or else Ekind (E) = E_Variable)\n-                   and then Nkind (D) = N_Object_Declaration\n-                   and then Nkind (Object_Definition (D)) =\n-                                       N_Constrained_Array_Definition)\n+            if K = N_Full_Type_Declaration\n+              and then (Is_Array_Type (E) or else Is_Record_Type (E))\n+            then\n+               Independence_Checks.Append ((N, E));\n+               Set_Has_Independent_Components (Base_Type (E));\n+\n+            elsif (Ekind (E) = E_Constant or else Ekind (E) = E_Variable)\n+              and then Nkind (D) = N_Object_Declaration\n+              and then Nkind (Object_Definition (D)) =\n+                                           N_Constrained_Array_Definition\n             then\n                Independence_Checks.Append ((N, E));\n+               Set_Has_Independent_Components (E);\n \n             else\n                Error_Pragma_Arg (\"inappropriate entity for pragma%\", Arg1);"}, {"sha": "769afdeba1ac4cd6cf114b152bce94a4df4b735a", "filename": "gcc/ada/usage.adb", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca1ffed0e8ac8c0eddaf04b73e05a1af1e0dff32/gcc%2Fada%2Fusage.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca1ffed0e8ac8c0eddaf04b73e05a1af1e0dff32/gcc%2Fada%2Fusage.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fusage.adb?ref=ca1ffed0e8ac8c0eddaf04b73e05a1af1e0dff32", "patch": "@@ -541,8 +541,8 @@ begin\n    Write_Line (\"        .S*  turn off warnings for overridden size clause\");\n    Write_Line (\"        t    turn on warnings for tracking deleted code\");\n    Write_Line (\"        T*   turn off warnings for tracking deleted code\");\n-   Write_Line (\"        .t+  turn on warnings for suspicious contract\");\n-   Write_Line (\"        .T*  turn off warnings for suspicious contract\");\n+   Write_Line (\"        .t*+ turn on warnings for suspicious contract\");\n+   Write_Line (\"        .T   turn off warnings for suspicious contract\");\n    Write_Line (\"        u+   turn on warnings for unused entity\");\n    Write_Line (\"        U*   turn off warnings for unused entity\");\n    Write_Line (\"        .u   turn on warnings for unordered enumeration\");"}]}