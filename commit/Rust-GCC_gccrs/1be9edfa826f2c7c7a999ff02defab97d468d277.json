{"sha": "1be9edfa826f2c7c7a999ff02defab97d468d277", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWJlOWVkZmE4MjZmMmM3YzdhOTk5ZmYwMmRlZmFiOTdkNDY4ZDI3Nw==", "commit": {"author": {"name": "Maciej W. Rozycki", "email": "macro@linux-mips.org", "date": "2020-12-05T18:26:26Z"}, "committer": {"name": "Maciej W. Rozycki", "email": "macro@linux-mips.org", "date": "2020-12-05T18:26:26Z"}, "message": "VAX: Make the `divmoddisi4' and `*amulsi4' comment notation consistent\n\nUse a double colon to introduce the comments like elsewhere throughout\nthe VAX machine description.\n\n\tgcc/\n\t* config/vax/vax.md (divmoddisi4, *amulsi4): Make the comment\n\tnotation consistent with the rest of the file.", "tree": {"sha": "13d24228f222e4379971c255b340c15a0253f256", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/13d24228f222e4379971c255b340c15a0253f256"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1be9edfa826f2c7c7a999ff02defab97d468d277", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1be9edfa826f2c7c7a999ff02defab97d468d277", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1be9edfa826f2c7c7a999ff02defab97d468d277", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1be9edfa826f2c7c7a999ff02defab97d468d277/comments", "author": null, "committer": null, "parents": [{"sha": "3c085897738b0da9c199eda2476c2563bdbdb292", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3c085897738b0da9c199eda2476c2563bdbdb292", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3c085897738b0da9c199eda2476c2563bdbdb292"}], "stats": {"total": 38, "additions": 19, "deletions": 19}, "files": [{"sha": "1bb4e300caef50dc8c54b92ca5e02a1546a87527", "filename": "gcc/config/vax/vax.md", "status": "modified", "additions": 19, "deletions": 19, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1be9edfa826f2c7c7a999ff02defab97d468d277/gcc%2Fconfig%2Fvax%2Fvax.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1be9edfa826f2c7c7a999ff02defab97d468d277/gcc%2Fconfig%2Fvax%2Fvax.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fvax%2Fvax.md?ref=1be9edfa826f2c7c7a999ff02defab97d468d277", "patch": "@@ -498,17 +498,17 @@\n    div<VAXint:isfx>2 %2,%0\n    div<VAXint:isfx>3 %2,%1,%0\")\n \n-;This is left out because it is very slow;\n-;we are better off programming around the \"lack\" of this insn.\n-;(define_insn \"divmoddisi4\"\n-;  [(set (match_operand:SI 0 \"nonimmediate_operand\" \"=g\")\n-;\t(div:SI (match_operand:DI 1 \"general_operand\" \"g\")\n-;\t\t(match_operand:SI 2 \"general_operand\" \"g\")))\n-;   (set (match_operand:SI 3 \"nonimmediate_operand\" \"=g\")\n-;\t(mod:SI (match_dup 1)\n-;\t\t(match_dup 2)))]\n-;  \"\"\n-;  \"ediv %2,%1,%0,%3\")\n+;; This is left out because it is very slow;\n+;; we are better off programming around the \"lack\" of this insn.\n+;;(define_insn \"divmoddisi4\"\n+;;  [(set (match_operand:SI 0 \"nonimmediate_operand\" \"=g\")\n+;;\t(div:SI (match_operand:DI 1 \"general_operand\" \"g\")\n+;;\t\t(match_operand:SI 2 \"general_operand\" \"g\")))\n+;;   (set (match_operand:SI 3 \"nonimmediate_operand\" \"=g\")\n+;;\t(mod:SI (match_dup 1)\n+;;\t\t(match_dup 2)))]\n+;;  \"\"\n+;;  \"ediv %2,%1,%0,%3\")\n \f\n ;; Bit-and on the VAX is done with a clear-bits insn.\n (define_expand \"and<mode>3\"\n@@ -740,14 +740,14 @@\n   \"\"\n   \"rotl %2,%1,%0\")\n \n-;This insn is probably slower than a multiply and an add.\n-;(define_insn \"*amulsi4\"\n-;  [(set (match_operand:SI 0 \"nonimmediate_operand\" \"=g\")\n-;\t(mult:SI (plus:SI (match_operand:SI 1 \"general_operand\" \"g\")\n-;\t\t\t  (match_operand:SI 2 \"general_operand\" \"g\"))\n-;\t\t (match_operand:SI 3 \"general_operand\" \"g\")))]\n-;  \"\"\n-;  \"index %1,$0x80000000,$0x7fffffff,%3,%2,%0\")\n+;; This insn is probably slower than a multiply and an add.\n+;;(define_insn \"*amulsi4\"\n+;;  [(set (match_operand:SI 0 \"nonimmediate_operand\" \"=g\")\n+;;\t(mult:SI (plus:SI (match_operand:SI 1 \"general_operand\" \"g\")\n+;;\t\t\t  (match_operand:SI 2 \"general_operand\" \"g\"))\n+;;\t\t (match_operand:SI 3 \"general_operand\" \"g\")))]\n+;;  \"\"\n+;;  \"index %1,$0x80000000,$0x7fffffff,%3,%2,%0\")\n \f\n ;; Special cases of bit-field insns which we should\n ;; recognize in preference to the general case."}]}