{"sha": "878f99d22982a567cffaa1c0c21fb52e230f867d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODc4Zjk5ZDIyOTgyYTU2N2NmZmFhMWMwYzIxZmI1MmUyMzBmODY3ZA==", "commit": {"author": {"name": "Jan Hubicka", "email": "jh@suse.cz", "date": "2004-08-04T21:37:06Z"}, "committer": {"name": "Jan Hubicka", "email": "hubicka@gcc.gnu.org", "date": "2004-08-04T21:37:06Z"}, "message": "basic-block.h (profile_staus): New global variable.\n\n\t* basic-block.h (profile_staus): New global variable.\n\t* cfg.c (profile_status): Declare.\n\t(check_bb_profile): Break out from ....; use profile_status\n\t(dump_flow_info): ... here.\n\t* cfgbuild.c (find_basic_blocks): Set profile_status.\n\t* cfgexpand.c (tree_expand_cfg): Likewise.\n\t* predict.c (estimate_probability): Likewise.\n\t* profile.c (branch_prob): Likewise.\n\t* tree-cfg.c (build_tree_cfg): Likewise.\n\t(dump_function_to_file): Use check_bb_profile.\n\t* tree-pretty-print (dump_bb_header): Likewise.\n\t* tree-profile.c (do_tree_profiling): Cleanup.\n\nFrom-SVN: r85579", "tree": {"sha": "14f9d312df96f3a3cf47a367e3b936b8d773c4fe", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/14f9d312df96f3a3cf47a367e3b936b8d773c4fe"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/878f99d22982a567cffaa1c0c21fb52e230f867d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/878f99d22982a567cffaa1c0c21fb52e230f867d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/878f99d22982a567cffaa1c0c21fb52e230f867d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/878f99d22982a567cffaa1c0c21fb52e230f867d/comments", "author": null, "committer": null, "parents": [{"sha": "d4794d1a61d47a03acde40beaf0a372929212754", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d4794d1a61d47a03acde40beaf0a372929212754", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d4794d1a61d47a03acde40beaf0a372929212754"}], "stats": {"total": 139, "additions": 105, "deletions": 34}, "files": [{"sha": "9f50220cb06a4f59a37dfd309ff480ee168bf84f", "filename": "gcc/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/878f99d22982a567cffaa1c0c21fb52e230f867d/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/878f99d22982a567cffaa1c0c21fb52e230f867d/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=878f99d22982a567cffaa1c0c21fb52e230f867d", "patch": "@@ -1,3 +1,18 @@\n+2004-08-04  Jan Hubicka  <jh@suse.cz>\n+\n+\t* basic-block.h (profile_staus): New global variable.\n+\t* cfg.c (profile_status): Declare.\n+\t(check_bb_profile): Break out from ....; use profile_status\n+\t(dump_flow_info): ... here.\n+\t* cfgbuild.c (find_basic_blocks): Set profile_status.\n+\t* cfgexpand.c (tree_expand_cfg): Likewise.\n+\t* predict.c (estimate_probability): Likewise.\n+\t* profile.c (branch_prob): Likewise.\n+\t* tree-cfg.c (build_tree_cfg): Likewise.\n+\t(dump_function_to_file): Use check_bb_profile.\n+\t* tree-pretty-print (dump_bb_header): Likewise.\n+\t* tree-profile.c (do_tree_profiling): Cleanup.\n+\n 2004-08-04  Zack Weinberg  <zack@codesourcery.com>\n \n \t* Makefile.in (RTL_BASE_H, RTL_H): Correct."}, {"sha": "76f13687a522693ab4a841e45bbda9136180a2c1", "filename": "gcc/basic-block.h", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/878f99d22982a567cffaa1c0c21fb52e230f867d/gcc%2Fbasic-block.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/878f99d22982a567cffaa1c0c21fb52e230f867d/gcc%2Fbasic-block.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbasic-block.h?ref=878f99d22982a567cffaa1c0c21fb52e230f867d", "patch": "@@ -330,6 +330,14 @@ extern int last_basic_block;\n \n extern int n_edges;\n \n+/* Signalize the status of profile information in the CFG.  */\n+extern enum profile_status\n+{\n+  PROFILE_ABSENT,\n+  PROFILE_GUESSED,\n+  PROFILE_READ\n+} profile_status;\n+\n /* Index by basic block number, get basic block struct info.  */\n \n extern GTY(()) varray_type basic_block_info;\n@@ -723,6 +731,7 @@ extern basic_block first_dom_son (enum cdi_direction, basic_block);\n extern basic_block next_dom_son (enum cdi_direction, basic_block);\n extern edge try_redirect_by_replacing_jump (edge, basic_block, bool);\n extern void break_superblocks (void);\n+extern void check_bb_profile (basic_block, FILE *);\n \n #include \"cfghooks.h\"\n "}, {"sha": "cee3cf2211c65e2b8df8e632479d8d745dded021", "filename": "gcc/cfg.c", "status": "modified", "additions": 65, "deletions": 33, "changes": 98, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/878f99d22982a567cffaa1c0c21fb52e230f867d/gcc%2Fcfg.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/878f99d22982a567cffaa1c0c21fb52e230f867d/gcc%2Fcfg.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcfg.c?ref=878f99d22982a567cffaa1c0c21fb52e230f867d", "patch": "@@ -94,6 +94,9 @@ alloc_pool rbi_pool;\n \n void debug_flow_info (void);\n static void free_edge (edge);\n+\n+/* Indicate the presence of the profile.  */\n+enum profile_status profile_status;\n \f\n /* Called once at initialization time.  */\n \n@@ -468,6 +471,53 @@ clear_bb_flags (void)\n     bb->flags = 0;\n }\n \f\n+/* Check the consistency of profile information.  We can't do that\n+   in verify_flow_info, as the counts may get invalid for incompletely\n+   solved graphs, later eliminating of conditionals or roundoff errors.\n+   It is still practical to have them reported for debugging of simple\n+   testcases.  */\n+void\n+check_bb_profile (basic_block bb, FILE * file)\n+{\n+  edge e;\n+  int sum = 0;\n+  gcov_type lsum;\n+\n+  if (profile_status == PROFILE_ABSENT)\n+    return;\n+\n+  if (bb != EXIT_BLOCK_PTR)\n+    {\n+      for (e = bb->succ; e; e = e->succ_next)\n+\tsum += e->probability;\n+      if (bb->succ && abs (sum - REG_BR_PROB_BASE) > 100)\n+\tfprintf (file, \"Invalid sum of outgoing probabilities %.1f%%\\n\",\n+\t\t sum * 100.0 / REG_BR_PROB_BASE);\n+      lsum = 0;\n+      for (e = bb->succ; e; e = e->succ_next)\n+\tlsum += e->count;\n+      if (bb->succ && (lsum - bb->count > 100 || lsum - bb->count < -100))\n+\tfprintf (file, \"Invalid sum of outgoing counts %i, should be %i\\n\",\n+\t\t (int) lsum, (int) bb->count);\n+    }\n+  if (bb != ENTRY_BLOCK_PTR)\n+    {\n+      sum = 0;\n+      for (e = bb->pred; e; e = e->pred_next)\n+\tsum += EDGE_FREQUENCY (e);\n+      if (abs (sum - bb->frequency) > 100)\n+\tfprintf (file,\n+\t\t \"Invalid sum of incomming frequencies %i, should be %i\\n\",\n+\t\t sum, bb->frequency);\n+      lsum = 0;\n+      for (e = bb->pred; e; e = e->pred_next)\n+\tlsum += e->count;\n+      if (lsum - bb->count > 100 || lsum - bb->count < -100)\n+\tfprintf (file, \"Invalid sum of incomming counts %i, should be %i\\n\",\n+\t\t (int) lsum, (int) bb->count);\n+    }\n+}\n+\f\n void\n dump_flow_info (FILE *file)\n {\n@@ -527,8 +577,6 @@ dump_flow_info (FILE *file)\n   FOR_EACH_BB (bb)\n     {\n       edge e;\n-      int sum;\n-      gcov_type lsum;\n \n       fprintf (file, \"\\nBasic block %d \", bb->index);\n       fprintf (file, \"prev %d, next %d, \",\n@@ -555,39 +603,23 @@ dump_flow_info (FILE *file)\n \n       fprintf (file, \"\\nRegisters live at end:\");\n       dump_regset (bb->global_live_at_end, file);\n-\n+  \n       putc ('\\n', file);\n \n-      /* Check the consistency of profile information.  We can't do that\n-\t in verify_flow_info, as the counts may get invalid for incompletely\n-\t solved graphs, later eliminating of conditionals or roundoff errors.\n-\t It is still practical to have them reported for debugging of simple\n-\t testcases.  */\n-      sum = 0;\n-      for (e = bb->succ; e; e = e->succ_next)\n-\tsum += e->probability;\n-      if (bb->succ && abs (sum - REG_BR_PROB_BASE) > 100)\n-\tfprintf (file, \"Invalid sum of outgoing probabilities %.1f%%\\n\",\n-\t\t sum * 100.0 / REG_BR_PROB_BASE);\n-      sum = 0;\n-      for (e = bb->pred; e; e = e->pred_next)\n-\tsum += EDGE_FREQUENCY (e);\n-      if (abs (sum - bb->frequency) > 100)\n-\tfprintf (file,\n-\t\t \"Invalid sum of incomming frequencies %i, should be %i\\n\",\n-\t\t sum, bb->frequency);\n-      lsum = 0;\n-      for (e = bb->pred; e; e = e->pred_next)\n-\tlsum += e->count;\n-      if (lsum - bb->count > 100 || lsum - bb->count < -100)\n-\tfprintf (file, \"Invalid sum of incomming counts %i, should be %i\\n\",\n-\t\t (int)lsum, (int)bb->count);\n-      lsum = 0;\n-      for (e = bb->succ; e; e = e->succ_next)\n-\tlsum += e->count;\n-      if (bb->succ && (lsum - bb->count > 100 || lsum - bb->count < -100))\n-\tfprintf (file, \"Invalid sum of incomming counts %i, should be %i\\n\",\n-\t\t (int)lsum, (int)bb->count);\n+      if (bb->global_live_at_start)\n+\t{\n+\t  fprintf (file, \"\\nRegisters live at start:\");\n+\t  dump_regset (bb->global_live_at_start, file);\n+\t}\n+\n+      if (bb->global_live_at_end)\n+\t{\n+\t  fprintf (file, \"\\nRegisters live at end:\");\n+\t  dump_regset (bb->global_live_at_end, file);\n+\t}\n+\n+      putc ('\\n', file);\n+      check_bb_profile (bb, file);\n     }\n \n   putc ('\\n', file);"}, {"sha": "cb451efe4f2395628228204fe18860becd751672", "filename": "gcc/cfgbuild.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/878f99d22982a567cffaa1c0c21fb52e230f867d/gcc%2Fcfgbuild.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/878f99d22982a567cffaa1c0c21fb52e230f867d/gcc%2Fcfgbuild.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcfgbuild.c?ref=878f99d22982a567cffaa1c0c21fb52e230f867d", "patch": "@@ -546,6 +546,8 @@ find_basic_blocks (rtx f, int nregs ATTRIBUTE_UNUSED,\n \n   find_basic_blocks_1 (f);\n \n+  profile_status = PROFILE_ABSENT;\n+\n   /* Discover the edges of our cfg.  */\n   make_edges (ENTRY_BLOCK_PTR->next_bb, EXIT_BLOCK_PTR->prev_bb, 0);\n "}, {"sha": "faa4635aa31926087a0e6d41b426ee0581c3a457", "filename": "gcc/cfgexpand.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/878f99d22982a567cffaa1c0c21fb52e230f867d/gcc%2Fcfgexpand.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/878f99d22982a567cffaa1c0c21fb52e230f867d/gcc%2Fcfgexpand.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcfgexpand.c?ref=878f99d22982a567cffaa1c0c21fb52e230f867d", "patch": "@@ -433,6 +433,8 @@ tree_expand_cfg (void)\n \t       IDENTIFIER_POINTER (DECL_ASSEMBLER_NAME (current_function_decl)));\n     }\n \n+  profile_status = PROFILE_ABSENT;\n+\n   /* Some backends want to know that we are expanding to RTL.  */\n   currently_expanding_to_rtl = 1;\n "}, {"sha": "d89282daa89c50924f0e700d7859f5556f97f194", "filename": "gcc/predict.c", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/878f99d22982a567cffaa1c0c21fb52e230f867d/gcc%2Fpredict.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/878f99d22982a567cffaa1c0c21fb52e230f867d/gcc%2Fpredict.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fpredict.c?ref=878f99d22982a567cffaa1c0c21fb52e230f867d", "patch": "@@ -805,6 +805,8 @@ estimate_probability (struct loops *loops_info)\n     }\n   estimate_bb_frequencies (loops_info);\n   free_dominance_info (CDI_POST_DOMINATORS);\n+  if (profile_status == PROFILE_ABSENT)\n+    profile_status = PROFILE_GUESSED;\n }\n \f\n \n@@ -988,6 +990,8 @@ tree_estimate_probability (void)\n   flow_loops_free (&loops_info);\n   if (dump_file && (dump_flags & TDF_DETAILS))\n     dump_tree_cfg (dump_file, dump_flags);\n+  if (profile_status == PROFILE_ABSENT)\n+    profile_status = PROFILE_GUESSED;\n }\n \f\n /* __builtin_expect dropped tokens into the insn stream describing expected"}, {"sha": "002e7a1b694f870169317a55eadc1166153fe149", "filename": "gcc/profile.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/878f99d22982a567cffaa1c0c21fb52e230f867d/gcc%2Fprofile.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/878f99d22982a567cffaa1c0c21fb52e230f867d/gcc%2Fprofile.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fprofile.c?ref=878f99d22982a567cffaa1c0c21fb52e230f867d", "patch": "@@ -1005,6 +1005,7 @@ branch_prob (void)\n     }\n \n   free_edge_list (el);\n+  profile_status = PROFILE_READ;\n }\n \f\n /* Union find algorithm implementation for the basic blocks using"}, {"sha": "86ac7ee3a92303c76cc3872e70d131eb7ec850fa", "filename": "gcc/tree-cfg.c", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/878f99d22982a567cffaa1c0c21fb52e230f867d/gcc%2Ftree-cfg.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/878f99d22982a567cffaa1c0c21fb52e230f867d/gcc%2Ftree-cfg.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-cfg.c?ref=878f99d22982a567cffaa1c0c21fb52e230f867d", "patch": "@@ -125,6 +125,7 @@ build_tree_cfg (tree *tp)\n \n   /* Initialize the basic block array.  */\n   init_flow ();\n+  profile_status = PROFILE_ABSENT;\n   n_basic_blocks = 0;\n   last_basic_block = 0;\n   VARRAY_BB_INIT (basic_block_info, initial_cfg_capacity, \"basic_block_info\");\n@@ -4396,6 +4397,7 @@ dump_function_to_file (tree fn, FILE *file, int flags)\n   if (basic_block_info)\n     {\n       /* Make a CFG based dump.  */\n+      check_bb_profile (ENTRY_BLOCK_PTR, file);\n       if (!ignore_topmost_bind)\n \tfprintf (file, \"{\\n\");\n \n@@ -4406,6 +4408,7 @@ dump_function_to_file (tree fn, FILE *file, int flags)\n \tdump_generic_bb (file, bb, 2, flags);\n \t\n       fprintf (file, \"}\\n\");\n+      check_bb_profile (EXIT_BLOCK_PTR, file);\n     }\n   else\n     {"}, {"sha": "1821700635aebbed47b8478d8b1a091e78018e56", "filename": "gcc/tree-pretty-print.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/878f99d22982a567cffaa1c0c21fb52e230f867d/gcc%2Ftree-pretty-print.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/878f99d22982a567cffaa1c0c21fb52e230f867d/gcc%2Ftree-pretty-print.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-pretty-print.c?ref=878f99d22982a567cffaa1c0c21fb52e230f867d", "patch": "@@ -2144,6 +2144,8 @@ dump_bb_header (pretty_printer *buffer, basic_block bb, int indent, int flags)\n \t  pp_newline (buffer);\n \t}\n     }\n+  pp_write_text_to_stream (buffer);\n+  check_bb_profile (bb, buffer->buffer->stream);\n }\n \n /* Dumps end of basic block BB to buffer BUFFER indented by INDENT"}, {"sha": "1a7b744f3a729a91d8be7915b00e1163a01b0b7c", "filename": "gcc/tree-profile.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/878f99d22982a567cffaa1c0c21fb52e230f867d/gcc%2Ftree-profile.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/878f99d22982a567cffaa1c0c21fb52e230f867d/gcc%2Ftree-profile.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-profile.c?ref=878f99d22982a567cffaa1c0c21fb52e230f867d", "patch": "@@ -146,7 +146,8 @@ tree_gen_const_delta_profiler (struct histogram_value *value ATTRIBUTE_UNUSED,\n    If it is, set up hooks for tree-based profiling.\n    Gate for pass_tree_profile.  */\n \n-static bool do_tree_profiling (void) {\n+static bool do_tree_profiling (void)\n+{\n   if (flag_tree_based_profiling)\n     {\n       tree_register_profile_hooks ();"}]}