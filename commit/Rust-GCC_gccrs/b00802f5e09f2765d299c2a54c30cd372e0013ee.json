{"sha": "b00802f5e09f2765d299c2a54c30cd372e0013ee", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjAwODAyZjVlMDlmMjc2NWQyOTljMmE1NGMzMGNkMzcyZTAwMTNlZQ==", "commit": {"author": {"name": "Steven G. Kargl", "email": "kargl@gcc.gnu.org", "date": "2019-06-13T18:40:19Z"}, "committer": {"name": "Steven G. Kargl", "email": "kargl@gcc.gnu.org", "date": "2019-06-13T18:40:19Z"}, "message": "re PR fortran/68544 (ICE trying to pass derived type constructor as a function)\n\n2019-06-13  Steven G. Kargl  <kargl@gcc.gnu.org>\n\n\tPR fortran/68544\n\t* resolve.c (is_dt_name): New function to compare symbol name against\n\tlist of derived types.\n\t(resolve_actual_arglist): Use it to find wrong code.\n\n2019-06-13  Steven G. Kargl  <kargl@gcc.gnu.org>\n\n\tPR fortran/68544\n\t* gfortran.dg/pr68544.f90: New test.\n\t* gfortran.dg/pr85687.f90: Modify test for new error message.\n\nFrom-SVN: r272259", "tree": {"sha": "04fe9fd31225b385bc80c8aa2e654baba7cbd608", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/04fe9fd31225b385bc80c8aa2e654baba7cbd608"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b00802f5e09f2765d299c2a54c30cd372e0013ee", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b00802f5e09f2765d299c2a54c30cd372e0013ee", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b00802f5e09f2765d299c2a54c30cd372e0013ee", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b00802f5e09f2765d299c2a54c30cd372e0013ee/comments", "author": null, "committer": null, "parents": [{"sha": "19c6bc40f056f06c48819c838aec306037e9b76b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/19c6bc40f056f06c48819c838aec306037e9b76b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/19c6bc40f056f06c48819c838aec306037e9b76b"}], "stats": {"total": 54, "additions": 53, "deletions": 1}, "files": [{"sha": "99a399abc719e46012974a0422a1fd467520b6a8", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b00802f5e09f2765d299c2a54c30cd372e0013ee/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b00802f5e09f2765d299c2a54c30cd372e0013ee/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=b00802f5e09f2765d299c2a54c30cd372e0013ee", "patch": "@@ -1,3 +1,10 @@\n+2019-06-12  Steven G. Kargl  <kargl@gcc.gnu.org>\n+\n+\tPR fortran/68544\n+\t* resolve.c (is_dt_name): New function to compare symbol name against\n+\tlist of derived types.\n+\t(resolve_actual_arglist): Use it to find wrong code.\n+\n 2019-06-13  Steven G. Kargl  <kargl@gcc.gnu.org>\n \n \tPR fortran/89344"}, {"sha": "c565325ee2f4db129fd9d8d72548e82d6360b767", "filename": "gcc/fortran/resolve.c", "status": "modified", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b00802f5e09f2765d299c2a54c30cd372e0013ee/gcc%2Ffortran%2Fresolve.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b00802f5e09f2765d299c2a54c30cd372e0013ee/gcc%2Ffortran%2Fresolve.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fresolve.c?ref=b00802f5e09f2765d299c2a54c30cd372e0013ee", "patch": "@@ -1862,6 +1862,25 @@ resolve_procedure_expression (gfc_expr* expr)\n }\n \n \n+/* Check that name is not a derived type.  */\n+ \n+static bool\n+is_dt_name (const char *name)\n+{\n+  gfc_symbol *dt_list, *dt_first;\n+\n+  dt_list = dt_first = gfc_derived_types;\n+  for (; dt_list; dt_list = dt_list->dt_next)\n+    {\n+      if (strcmp(dt_list->name, name) == 0)\n+\treturn true;\n+      if (dt_first == dt_list->dt_next)\n+\tbreak;\n+    }\n+  return false;\n+}\n+\n+\n /* Resolve an actual argument list.  Most of the time, this is just\n    resolving the expressions in the list.\n    The exception is that we sometimes have to decide whether arguments\n@@ -1923,6 +1942,13 @@ resolve_actual_arglist (gfc_actual_arglist *arg, procedure_type ptype,\n \n       sym = e->symtree->n.sym;\n \n+      if (sym->attr.flavor == FL_PROCEDURE && is_dt_name (sym->name))\n+\t{\n+\t  gfc_error (\"Derived type %qs is used as an actual \"\n+\t\t     \"argument at %L\", sym->name, &e->where);\n+\t  goto cleanup;\n+\t}\n+\n       if (sym->attr.flavor == FL_PROCEDURE\n \t  || sym->attr.intrinsic\n \t  || sym->attr.external)"}, {"sha": "c5c68eac373bc9362e767da6d69c1b43190c9c6c", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b00802f5e09f2765d299c2a54c30cd372e0013ee/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b00802f5e09f2765d299c2a54c30cd372e0013ee/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=b00802f5e09f2765d299c2a54c30cd372e0013ee", "patch": "@@ -1,3 +1,9 @@\n+2019-06-13  Steven G. Kargl  <kargl@gcc.gnu.org>\n+\n+\tPR fortran/68544\n+\t* gfortran.dg/pr68544.f90: New test.\n+\t* gfortran.dg/pr85687.f90: Modify test for new error message.\n+\n 2019-06-13  Iain Sandoe  <iain@sandoe.co.uk>\n \n \t* g++.dg/pr71694.C: Use non-PIC codegen for Darwin m32."}, {"sha": "3b17e2ab523acea31fe1c478eaecbe77badfaaa3", "filename": "gcc/testsuite/gfortran.dg/pr68544.f90", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b00802f5e09f2765d299c2a54c30cd372e0013ee/gcc%2Ftestsuite%2Fgfortran.dg%2Fpr68544.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b00802f5e09f2765d299c2a54c30cd372e0013ee/gcc%2Ftestsuite%2Fgfortran.dg%2Fpr68544.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fpr68544.f90?ref=b00802f5e09f2765d299c2a54c30cd372e0013ee", "patch": "@@ -0,0 +1,13 @@\n+! { dg-do compile }\n+! PF fortran/68544\n+program p\n+   real x\n+   type t\n+   end type\n+   x = f(t)             ! { dg-error \"used as an actual argument\" }\n+end\n+subroutine b\n+   type t\n+   end type\n+   print *, shape(t)    ! { dg-error \"used as an actual argument\" }\n+end"}, {"sha": "410b2b2a5cc27e6a1c950f696e7fe1c1833fabe2", "filename": "gcc/testsuite/gfortran.dg/pr85687.f90", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b00802f5e09f2765d299c2a54c30cd372e0013ee/gcc%2Ftestsuite%2Fgfortran.dg%2Fpr85687.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b00802f5e09f2765d299c2a54c30cd372e0013ee/gcc%2Ftestsuite%2Fgfortran.dg%2Fpr85687.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fpr85687.f90?ref=b00802f5e09f2765d299c2a54c30cd372e0013ee", "patch": "@@ -4,5 +4,5 @@\n program p\n    type t\n    end type\n-   print *, rank(t)  ! { dg-error \"must be a data object\" }\n+   print *, rank(t)  ! { dg-error \"used as an actual argument\" }\n end"}]}