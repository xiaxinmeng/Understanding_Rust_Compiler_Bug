{"sha": "86fee241f7c026808dcba406f62751dfbeac8c1c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODZmZWUyNDFmN2MwMjY4MDhkY2JhNDA2ZjYyNzUxZGZiZWFjOGMxYw==", "commit": {"author": {"name": "Michael Hayes", "email": "mhayes@redhat.com", "date": "2001-01-01T01:04:01Z"}, "committer": {"name": "Michael Hayes", "email": "m.hayes@gcc.gnu.org", "date": "2001-01-01T01:04:01Z"}, "message": "loop.c (check_insn_for_bivs): Use ivs->n_regs to check array bounds.\n\n\t* loop.c (check_insn_for_bivs): Use ivs->n_regs to check array bounds.\n\t(find_mem_givs, record_biv, maybe_eliminate_biv): Likewise.\n\t(record_initial): Likewise.\n\t* unroll.c (copy_loop_body, loop_iterations): Likewise.\n\t(remap_split_bivs): Likewise.\n\nFrom-SVN: r38584", "tree": {"sha": "168553bb855f69a9560df11aa4e6f6a692c8b648", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/168553bb855f69a9560df11aa4e6f6a692c8b648"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/86fee241f7c026808dcba406f62751dfbeac8c1c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/86fee241f7c026808dcba406f62751dfbeac8c1c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/86fee241f7c026808dcba406f62751dfbeac8c1c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/86fee241f7c026808dcba406f62751dfbeac8c1c/comments", "author": null, "committer": null, "parents": [{"sha": "b2735d9a75162d5e0585ea5f615a8fc5bc544841", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b2735d9a75162d5e0585ea5f615a8fc5bc544841", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b2735d9a75162d5e0585ea5f615a8fc5bc544841"}], "stats": {"total": 25, "additions": 15, "deletions": 10}, "files": [{"sha": "802678e8ede21faf5a5fa64f59067b3d0a70e4d7", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/86fee241f7c026808dcba406f62751dfbeac8c1c/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/86fee241f7c026808dcba406f62751dfbeac8c1c/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=86fee241f7c026808dcba406f62751dfbeac8c1c", "patch": "@@ -1,5 +1,13 @@\n 2001-01-01  Michael Hayes  <mhayes@redhat.com>\n \n+\t* loop.c (check_insn_for_bivs): Use ivs->n_regs to check array bounds.\n+\t(find_mem_givs, record_biv, maybe_eliminate_biv): Likewise.\n+\t(record_initial): Likewise.\n+\t* unroll.c (copy_loop_body, loop_iterations): Likewise.\n+\t(remap_split_bivs): Likewise.\n+\n+2001-01-01  Michael Hayes  <mhayes@redhat.com>\t\n+\n \t* loop.c (loop_ivs_free): New function.\n \t(strength_reduce): Break out from...\n "}, {"sha": "652b5feb9ec71bec544e4ec69a35b3cee43d772f", "filename": "gcc/loop.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/86fee241f7c026808dcba406f62751dfbeac8c1c/gcc%2Floop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/86fee241f7c026808dcba406f62751dfbeac8c1c/gcc%2Floop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Floop.c?ref=86fee241f7c026808dcba406f62751dfbeac8c1c", "patch": "@@ -4651,7 +4651,7 @@ check_insn_for_bivs (loop, p, not_every_iteration, maybe_multiple)\n \t\t\t  not_every_iteration, maybe_multiple);\n \t      REG_IV_TYPE (ivs, REGNO (dest_reg)) = BASIC_INDUCT;\n \t    }\n-\t  else if (REGNO (dest_reg) < max_reg_before_loop)\n+\t  else if (REGNO (dest_reg) < ivs->n_regs)\n \t    REG_IV_TYPE (ivs, REGNO (dest_reg)) = NOT_BASIC_INDUCT;\n \t}\n     }\n@@ -7842,7 +7842,7 @@ maybe_eliminate_biv (loop, bl, eliminate_p, threshold, insn_count)\n \t\t{\n \t\t  unsigned int regno = REGNO (SET_DEST (set));\n \n-\t\t  if (regno < max_reg_before_loop\n+\t\t  if (regno < ivs->n_regs\n \t\t      && REG_IV_TYPE (ivs, regno) == GENERAL_INDUCT\n \t\t      && REG_IV_INFO (ivs, regno)->src_reg == bl->biv->src_reg)\n \t\t    p = last;\n@@ -8321,7 +8321,7 @@ record_initial (dest, set, data)\n   struct iv_class *bl;\n \n   if (GET_CODE (dest) != REG\n-      || REGNO (dest) >= max_reg_before_loop\n+      || REGNO (dest) >= ivs->n_regs\n       || REG_IV_TYPE (ivs, REGNO (dest)) != BASIC_INDUCT)\n     return;\n "}, {"sha": "b22d01f7a866a10ba1d6ce4d6bd07e7b7a7678c1", "filename": "gcc/unroll.c", "status": "modified", "additions": 4, "deletions": 7, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/86fee241f7c026808dcba406f62751dfbeac8c1c/gcc%2Funroll.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/86fee241f7c026808dcba406f62751dfbeac8c1c/gcc%2Funroll.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Funroll.c?ref=86fee241f7c026808dcba406f62751dfbeac8c1c", "patch": "@@ -1912,7 +1912,7 @@ copy_loop_body (loop, copy_start, copy_end, map, exit_label, last_iteration,\n \t\t     for the biv was stored in the biv's first struct\n \t\t     induction entry by find_splittable_regs.  */\n \n-\t\t  if (regno < max_reg_before_loop\n+\t\t  if (regno < ivs->n_regs\n \t\t      && REG_IV_TYPE (ivs, regno) == BASIC_INDUCT)\n \t\t    {\n \t\t      giv_src_reg = REG_IV_CLASS (ivs, regno)->biv->src_reg;\n@@ -3591,10 +3591,7 @@ loop_iterations (loop)\n     }\n   else if (REG_IV_TYPE (ivs, REGNO (iteration_var)) == BASIC_INDUCT)\n     {\n-      /* When reg_iv_type / reg_iv_info is resized for biv increments\n-\t that are turned into givs, reg_biv_class is not resized.\n-\t So check here that we don't make an out-of-bounds access.  */\n-      if (REGNO (iteration_var) >= max_reg_before_loop)\n+      if (REGNO (iteration_var) >= ivs->n_regs)\n \tabort ();\n \n       /* Grab initial value, only useful if it is a constant.  */\n@@ -3609,7 +3606,7 @@ loop_iterations (loop)\n       struct induction *v = REG_IV_INFO (ivs, REGNO (iteration_var));\n       rtx biv_initial_value;\n \n-      if (REGNO (v->src_reg) >= max_reg_before_loop)\n+      if (REGNO (v->src_reg) >= ivs->n_regs)\n \tabort ();\n \n       bl = REG_IV_CLASS (ivs, REGNO (v->src_reg));\n@@ -4012,7 +4009,7 @@ remap_split_bivs (loop, x)\n       /* If non-reduced/final-value givs were split, then this would also\n \t have to remap those givs also.  */\n #endif\n-      if (REGNO (x) < max_reg_before_loop\n+      if (REGNO (x) < ivs->n_regs\n \t  && REG_IV_TYPE (ivs, REGNO (x)) == BASIC_INDUCT)\n \treturn REG_IV_CLASS (ivs, REGNO (x))->biv->src_reg;\n       break;"}]}