{"sha": "8b6bcedc88d54415cbc018b3f7fc2bc20dcd4800", "node_id": "C_kwDOANBUbNoAKDhiNmJjZWRjODhkNTQ0MTVjYmMwMThiM2Y3ZmMyYmMyMGRjZDQ4MDA", "commit": {"author": {"name": "Aldy Hernandez", "email": "aldyh@redhat.com", "date": "2022-10-10T11:43:56Z"}, "committer": {"name": "Aldy Hernandez", "email": "aldyh@redhat.com", "date": "2022-10-10T12:50:16Z"}, "message": "Return non-legacy ranges in range.h.\n\nint_range<1> is a legacy range (think anti ranges, legacy VRP, etc).\nThere is a penalty for converting anything built with <1> to\nnon-legacy.  Since most of the uses of these functions are now ranger,\nwe can save a miniscule amount of time by converting them to\nnon-legacy.\n\ngcc/ChangeLog:\n\n\t* range.h (range_true): Return int_range<2>.\n\t(range_false): Same.\n\t(range_true_and_false): Same.", "tree": {"sha": "e97d8d884cae851be768bf6261d09d84b5be4ba6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e97d8d884cae851be768bf6261d09d84b5be4ba6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8b6bcedc88d54415cbc018b3f7fc2bc20dcd4800", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8b6bcedc88d54415cbc018b3f7fc2bc20dcd4800", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8b6bcedc88d54415cbc018b3f7fc2bc20dcd4800", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8b6bcedc88d54415cbc018b3f7fc2bc20dcd4800/comments", "author": {"login": "aldyh", "id": 12937877, "node_id": "MDQ6VXNlcjEyOTM3ODc3", "avatar_url": "https://avatars.githubusercontent.com/u/12937877?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aldyh", "html_url": "https://github.com/aldyh", "followers_url": "https://api.github.com/users/aldyh/followers", "following_url": "https://api.github.com/users/aldyh/following{/other_user}", "gists_url": "https://api.github.com/users/aldyh/gists{/gist_id}", "starred_url": "https://api.github.com/users/aldyh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aldyh/subscriptions", "organizations_url": "https://api.github.com/users/aldyh/orgs", "repos_url": "https://api.github.com/users/aldyh/repos", "events_url": "https://api.github.com/users/aldyh/events{/privacy}", "received_events_url": "https://api.github.com/users/aldyh/received_events", "type": "User", "site_admin": false}, "committer": {"login": "aldyh", "id": 12937877, "node_id": "MDQ6VXNlcjEyOTM3ODc3", "avatar_url": "https://avatars.githubusercontent.com/u/12937877?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aldyh", "html_url": "https://github.com/aldyh", "followers_url": "https://api.github.com/users/aldyh/followers", "following_url": "https://api.github.com/users/aldyh/following{/other_user}", "gists_url": "https://api.github.com/users/aldyh/gists{/gist_id}", "starred_url": "https://api.github.com/users/aldyh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aldyh/subscriptions", "organizations_url": "https://api.github.com/users/aldyh/orgs", "repos_url": "https://api.github.com/users/aldyh/repos", "events_url": "https://api.github.com/users/aldyh/events{/privacy}", "received_events_url": "https://api.github.com/users/aldyh/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2bd112dee7f9786a0484d9281899a9bb0b2ae57d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2bd112dee7f9786a0484d9281899a9bb0b2ae57d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2bd112dee7f9786a0484d9281899a9bb0b2ae57d"}], "stats": {"total": 6, "additions": 3, "deletions": 3}, "files": [{"sha": "8138d6f55151295d5cf6d8a80a56c8b6586641bc", "filename": "gcc/range.h", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8b6bcedc88d54415cbc018b3f7fc2bc20dcd4800/gcc%2Frange.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8b6bcedc88d54415cbc018b3f7fc2bc20dcd4800/gcc%2Frange.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frange.h?ref=8b6bcedc88d54415cbc018b3f7fc2bc20dcd4800", "patch": "@@ -32,7 +32,7 @@ static inline int_range<1>\n range_true (tree type)\n {\n   unsigned prec = TYPE_PRECISION (type);\n-  return int_range<1> (type, wi::one (prec), wi::one (prec));\n+  return int_range<2> (type, wi::one (prec), wi::one (prec));\n }\n \n // Return an irange instance that is a boolean FALSE.\n@@ -41,7 +41,7 @@ static inline int_range<1>\n range_false (tree type)\n {\n   unsigned prec = TYPE_PRECISION (type);\n-  return int_range<1> (type, wi::zero (prec), wi::zero (prec));\n+  return int_range<2> (type, wi::zero (prec), wi::zero (prec));\n }\n \n // Return an irange that covers both true and false.\n@@ -50,7 +50,7 @@ static inline int_range<1>\n range_true_and_false (tree type)\n {\n   unsigned prec = TYPE_PRECISION (type);\n-  return int_range<1> (type, wi::zero (prec), wi::one (prec));\n+  return int_range<2> (type, wi::zero (prec), wi::one (prec));\n }\n \n #endif // GCC_RANGE_H"}]}