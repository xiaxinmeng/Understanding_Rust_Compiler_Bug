{"sha": "1fe04c497d5a16baee6af48a0b08ca99b75724e4", "node_id": "C_kwDOANBUbNoAKDFmZTA0YzQ5N2Q1YTE2YmFlZTZhZjQ4YTBiMDhjYTk5Yjc1NzI0ZTQ", "commit": {"author": {"name": "Roger Sayle", "email": "roger@nextmovesoftware.com", "date": "2022-05-13T21:20:16Z"}, "committer": {"name": "Roger Sayle", "email": "roger@nextmovesoftware.com", "date": "2022-05-13T21:20:16Z"}, "message": "PR tree-optimization/83907: Improved memset handling in strlen pass.\n\nThis patch implements the missed optimization enhancement PR 83907,\nby handling memset with a constant byte value in tree-ssa's strlen\noptimization pass.  Effectively, this treats memset(dst,'x',3) as\nit would memcpy(dst,\"xxx\",3).\n\nThis patch also includes a tweak to handle_store to address another\nmissed optimization observed in the related test case pr83907-2.c.\nThe consecutive byte stores to memory get coalesced into a vector\nwrite of a vector const, but unfortunately tree-ssa-strlen's\nhandle_store didn't previously handle the (unusual) case where the\nstored \"string\" starts with a zero byte but also contains non-zero\nbytes.\n\n2022-05-13  Roger Sayle  <roger@nextmovesoftware.com>\n\ngcc/ChangeLog\n\tPR tree-optimization/83907\n\t* tree-ssa-strlen.cc (handle_builtin_memset): Record a strinfo\n\tfor memset with an constant char value.\n\t(handle_store): Improved handling of stores with a first byte\n\tof zero, but not storing_all_zeros_p.\n\ngcc/testsuite/ChangeLog\n\tPR tree-optimization/83907\n\t* gcc.dg/tree-ssa/pr83907-1.c: New test case.\n\t* gcc.dg/tree-ssa/pr83907-2.c: New test case.", "tree": {"sha": "e913d36dacd0894c24eafb38386a16b20036319b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e913d36dacd0894c24eafb38386a16b20036319b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1fe04c497d5a16baee6af48a0b08ca99b75724e4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1fe04c497d5a16baee6af48a0b08ca99b75724e4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1fe04c497d5a16baee6af48a0b08ca99b75724e4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1fe04c497d5a16baee6af48a0b08ca99b75724e4/comments", "author": {"login": "rogersayle", "id": 13512313, "node_id": "MDQ6VXNlcjEzNTEyMzEz", "avatar_url": "https://avatars.githubusercontent.com/u/13512313?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rogersayle", "html_url": "https://github.com/rogersayle", "followers_url": "https://api.github.com/users/rogersayle/followers", "following_url": "https://api.github.com/users/rogersayle/following{/other_user}", "gists_url": "https://api.github.com/users/rogersayle/gists{/gist_id}", "starred_url": "https://api.github.com/users/rogersayle/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rogersayle/subscriptions", "organizations_url": "https://api.github.com/users/rogersayle/orgs", "repos_url": "https://api.github.com/users/rogersayle/repos", "events_url": "https://api.github.com/users/rogersayle/events{/privacy}", "received_events_url": "https://api.github.com/users/rogersayle/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rogersayle", "id": 13512313, "node_id": "MDQ6VXNlcjEzNTEyMzEz", "avatar_url": "https://avatars.githubusercontent.com/u/13512313?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rogersayle", "html_url": "https://github.com/rogersayle", "followers_url": "https://api.github.com/users/rogersayle/followers", "following_url": "https://api.github.com/users/rogersayle/following{/other_user}", "gists_url": "https://api.github.com/users/rogersayle/gists{/gist_id}", "starred_url": "https://api.github.com/users/rogersayle/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rogersayle/subscriptions", "organizations_url": "https://api.github.com/users/rogersayle/orgs", "repos_url": "https://api.github.com/users/rogersayle/repos", "events_url": "https://api.github.com/users/rogersayle/events{/privacy}", "received_events_url": "https://api.github.com/users/rogersayle/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "16f7fcadac19dabd04a5abbe6601df52d22e9685", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/16f7fcadac19dabd04a5abbe6601df52d22e9685", "html_url": "https://github.com/Rust-GCC/gccrs/commit/16f7fcadac19dabd04a5abbe6601df52d22e9685"}], "stats": {"total": 75, "additions": 69, "deletions": 6}, "files": [{"sha": "2a6f4f5690347848531d8dfe7df6d8aa9a99ff35", "filename": "gcc/testsuite/gcc.dg/tree-ssa/pr83907-1.c", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1fe04c497d5a16baee6af48a0b08ca99b75724e4/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr83907-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1fe04c497d5a16baee6af48a0b08ca99b75724e4/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr83907-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr83907-1.c?ref=1fe04c497d5a16baee6af48a0b08ca99b75724e4", "patch": "@@ -0,0 +1,13 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -fdump-tree-optimized\" } */\n+\n+extern char str[];\n+\n+unsigned int foo()\n+{\n+  __builtin_memset(str,'x',5);\n+  str[5] = 0;\n+  return __builtin_strlen (str);\n+}\n+\n+/* { dg-final { scan-tree-dump-not \"strlen\" \"optimized\" } } */"}, {"sha": "cc27504fe86784dc636f7dde5cde93472da0223a", "filename": "gcc/testsuite/gcc.dg/tree-ssa/pr83907-2.c", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1fe04c497d5a16baee6af48a0b08ca99b75724e4/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr83907-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1fe04c497d5a16baee6af48a0b08ca99b75724e4/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr83907-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr83907-2.c?ref=1fe04c497d5a16baee6af48a0b08ca99b75724e4", "patch": "@@ -0,0 +1,14 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -fdump-tree-optimized\" } */\n+\n+extern char str[];\n+\n+unsigned int foo()\n+{\n+  __builtin_memset(str,'x',5);\n+  str[5] = 0;\n+  str[6] = 'z';\n+  return __builtin_strlen (str);\n+}\n+\n+/* { dg-final { scan-tree-dump-not \"strlen\" \"optimized\" } } */"}, {"sha": "1d4c0f78fbf7d0f27d27f39f395a0a36afeaf6f5", "filename": "gcc/tree-ssa-strlen.cc", "status": "modified", "additions": 42, "deletions": 6, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1fe04c497d5a16baee6af48a0b08ca99b75724e4/gcc%2Ftree-ssa-strlen.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1fe04c497d5a16baee6af48a0b08ca99b75724e4/gcc%2Ftree-ssa-strlen.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-strlen.cc?ref=1fe04c497d5a16baee6af48a0b08ca99b75724e4", "patch": "@@ -3805,9 +3805,44 @@ strlen_pass::handle_builtin_memset (bool *zero_write)\n {\n   gimple *memset_stmt = gsi_stmt (m_gsi);\n   tree ptr = gimple_call_arg (memset_stmt, 0);\n+  tree memset_val = gimple_call_arg (memset_stmt, 1);\n+  tree memset_size = gimple_call_arg (memset_stmt, 2);\n+\n   /* Set to the non-constant offset added to PTR.  */\n   wide_int offrng[2];\n   int idx1 = get_stridx (ptr, memset_stmt, offrng, ptr_qry.rvals);\n+  if (idx1 == 0\n+      && TREE_CODE (memset_val) == INTEGER_CST\n+      && ((TREE_CODE (memset_size) == INTEGER_CST\n+\t   && !integer_zerop (memset_size))\n+\t  || TREE_CODE (memset_size) == SSA_NAME))\n+    {\n+      unsigned HOST_WIDE_INT mask = (HOST_WIDE_INT_1U << CHAR_TYPE_SIZE) - 1;\n+      bool full_string_p = (wi::to_wide (memset_val) & mask) == 0;\n+\n+      /* We only handle symbolic lengths when writing non-zero values.  */\n+      if (full_string_p && TREE_CODE (memset_size) != INTEGER_CST)\n+\treturn false;\n+\n+      idx1 = new_stridx (ptr);\n+      if (idx1 == 0)\n+\treturn false;\n+      tree newlen;\n+      if (full_string_p)\n+\tnewlen = build_int_cst (size_type_node, 0);\n+      else if (TREE_CODE (memset_size) == INTEGER_CST)\n+\tnewlen = fold_convert (size_type_node, memset_size);\n+      else\n+\tnewlen = memset_size;\n+\n+      strinfo *dsi = new_strinfo (ptr, idx1, newlen, full_string_p);\n+      set_strinfo (idx1, dsi);\n+      find_equal_ptrs (ptr, idx1);\n+      dsi->dont_invalidate = true;\n+      dsi->writable = true;\n+      return false;\n+    }\n+\n   if (idx1 <= 0)\n     return false;\n   strinfo *si1 = get_strinfo (idx1);\n@@ -3820,7 +3855,6 @@ strlen_pass::handle_builtin_memset (bool *zero_write)\n   if (!valid_builtin_call (alloc_stmt))\n     return false;\n   tree alloc_size = gimple_call_arg (alloc_stmt, 0);\n-  tree memset_size = gimple_call_arg (memset_stmt, 2);\n \n   /* Check for overflow.  */\n   maybe_warn_overflow (memset_stmt, false, memset_size, NULL, false, true);\n@@ -3836,7 +3870,7 @@ strlen_pass::handle_builtin_memset (bool *zero_write)\n     return false;\n \n   /* Bail when the call writes a non-zero value.  */\n-  if (!integer_zerop (gimple_call_arg (memset_stmt, 1)))\n+  if (!integer_zerop (memset_val))\n     return false;\n \n   /* Let the caller know the memset call cleared the destination.  */\n@@ -5089,8 +5123,9 @@ strlen_pass::handle_store (bool *zero_write)\n \t  return false;\n \t}\n \n-      if (storing_all_zeros_p\n-\t  || storing_nonzero_p\n+      if (storing_nonzero_p\n+\t  || storing_all_zeros_p\n+\t  || (full_string_p && lenrange[1] == 0)\n \t  || (offset != 0 && store_before_nul[1] > 0))\n \t{\n \t  /* When STORING_NONZERO_P, we know that the string will start\n@@ -5100,8 +5135,9 @@ strlen_pass::handle_store (bool *zero_write)\n \t     of leading non-zero characters and set si->NONZERO_CHARS to\n \t     the result instead.\n \n-\t     When STORING_ALL_ZEROS_P, we know that the string is now\n-\t     OFFSET characters long.\n+\t     When STORING_ALL_ZEROS_P, or the first byte written is zero,\n+\t     i.e. FULL_STRING_P && LENRANGE[1] == 0, we know that the\n+\t     string is now OFFSET characters long.\n \n \t     Otherwise, we're storing an unknown value at offset OFFSET,\n \t     so need to clip the nonzero_chars to OFFSET."}]}