{"sha": "9065c4adab0b1280f5707d53833d195d0d350fd2", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTA2NWM0YWRhYjBiMTI4MGY1NzA3ZDUzODMzZDE5NWQwZDM1MGZkMg==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2020-10-06T08:41:16Z"}, "committer": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2020-10-06T08:41:40Z"}, "message": "libstdc++: Avoid CTAD for std::ranges::join_view [LWG 3474]\n\nIn commit ef275d1f2083f8a1fa1b59a3cd07fd3e8431023e I implemented the\nwrong resolution of LWG 3474. This removes the deduction guide and\nalters the views::join factory to create the right type explicitly.\n\nlibstdc++-v3/ChangeLog:\n\n\t* include/std/ranges (join_view): Remove deduction guide.\n\t(views::join): Add explicit template argument list to prevent\n\tdeducing the wrong type.\n\t* testsuite/std/ranges/adaptors/join.cc: Move test for LWG 3474\n\there, from ...\n\t* testsuite/std/ranges/adaptors/join_lwg3474.cc: Removed.", "tree": {"sha": "021ba7a31fdf866d04c550a1e1b9d005acb39c54", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/021ba7a31fdf866d04c550a1e1b9d005acb39c54"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9065c4adab0b1280f5707d53833d195d0d350fd2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9065c4adab0b1280f5707d53833d195d0d350fd2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9065c4adab0b1280f5707d53833d195d0d350fd2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9065c4adab0b1280f5707d53833d195d0d350fd2/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bf510679bb3f9bfd6019666065016bb26a5b5466", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bf510679bb3f9bfd6019666065016bb26a5b5466", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bf510679bb3f9bfd6019666065016bb26a5b5466"}], "stats": {"total": 62, "additions": 19, "deletions": 43}, "files": [{"sha": "10f1f7b525b7bf5531907deddc6b4d8700be9d74", "filename": "libstdc++-v3/include/std/ranges", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9065c4adab0b1280f5707d53833d195d0d350fd2/libstdc%2B%2B-v3%2Finclude%2Fstd%2Franges", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9065c4adab0b1280f5707d53833d195d0d350fd2/libstdc%2B%2B-v3%2Finclude%2Fstd%2Franges", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Franges?ref=9065c4adab0b1280f5707d53833d195d0d350fd2", "patch": "@@ -2369,17 +2369,14 @@ namespace views\n   template<typename _Range>\n     explicit join_view(_Range&&) -> join_view<views::all_t<_Range>>;\n \n-    // _GLIBCXX_RESOLVE_LIB_DEFECTS\n-    // 3474. Nesting join_views is broken because of CTAD\n-  template<typename _View>\n-    explicit join_view(join_view<_View>) -> join_view<join_view<_View>>;\n-\n   namespace views\n   {\n     inline constexpr __adaptor::_RangeAdaptorClosure join\n       = [] <viewable_range _Range> (_Range&& __r)\n       {\n-\treturn join_view{std::forward<_Range>(__r)};\n+\t// _GLIBCXX_RESOLVE_LIB_DEFECTS\n+\t// 3474. Nesting join_views is broken because of CTAD\n+\treturn join_view<views::all_t<_Range>>{std::forward<_Range>(__r)};\n       };\n   } // namespace views\n "}, {"sha": "e21e7054b3508ed18e808ff4ac16fc06230ade25", "filename": "libstdc++-v3/testsuite/std/ranges/adaptors/join.cc", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9065c4adab0b1280f5707d53833d195d0d350fd2/libstdc%2B%2B-v3%2Ftestsuite%2Fstd%2Franges%2Fadaptors%2Fjoin.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9065c4adab0b1280f5707d53833d195d0d350fd2/libstdc%2B%2B-v3%2Ftestsuite%2Fstd%2Franges%2Fadaptors%2Fjoin.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fstd%2Franges%2Fadaptors%2Fjoin.cc?ref=9065c4adab0b1280f5707d53833d195d0d350fd2", "patch": "@@ -123,6 +123,21 @@ test06()\n   b = ranges::end(v);\n }\n \n+void\n+test07()\n+{\n+  // LWG 3474. Nesting join_views is broken because of CTAD\n+  std::vector<std::vector<std::vector<int>>> nested_vectors = {\n+    {{1, 2, 3}, {4, 5}, {6}},\n+    {{7},       {8, 9}, {10, 11, 12}},\n+    {{13}}\n+  };\n+  auto joined = nested_vectors | std::views::join | std::views::join;\n+\n+  using V = decltype(joined);\n+  static_assert( std::same_as<std::ranges::range_value_t<V>, int> );\n+}\n+\n int\n main()\n {\n@@ -132,4 +147,5 @@ main()\n   test04();\n   test05();\n   test06();\n+  test07();\n }"}, {"sha": "516aaba7070a08c64f93ce5c9f8d23cc4ffedad7", "filename": "libstdc++-v3/testsuite/std/ranges/adaptors/join_lwg3474.cc", "status": "removed", "additions": 0, "deletions": 37, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bf510679bb3f9bfd6019666065016bb26a5b5466/libstdc%2B%2B-v3%2Ftestsuite%2Fstd%2Franges%2Fadaptors%2Fjoin_lwg3474.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bf510679bb3f9bfd6019666065016bb26a5b5466/libstdc%2B%2B-v3%2Ftestsuite%2Fstd%2Franges%2Fadaptors%2Fjoin_lwg3474.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fstd%2Franges%2Fadaptors%2Fjoin_lwg3474.cc?ref=bf510679bb3f9bfd6019666065016bb26a5b5466", "patch": "@@ -1,37 +0,0 @@\n-// Copyright (C) 2020 Free Software Foundation, Inc.\n-//\n-// This file is part of the GNU ISO C++ Library.  This library is free\n-// software; you can redistribute it and/or modify it under the\n-// terms of the GNU General Public License as published by the\n-// Free Software Foundation; either version 3, or (at your option)\n-// any later version.\n-\n-// This library is distributed in the hope that it will be useful,\n-// but WITHOUT ANY WARRANTY; without even the implied warranty of\n-// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n-// GNU General Public License for more details.\n-\n-// You should have received a copy of the GNU General Public License along\n-// with this library; see the file COPYING3.  If not see\n-// <http://www.gnu.org/licenses/>.\n-\n-// { dg-options \"-std=gnu++2a\" }\n-// { dg-do compile { target c++2a } }\n-\n-#include <ranges>\n-#include <vector>\n-\n-void\n-test01()\n-{\n-  // LWG 3474. Nesting join_views is broken because of CTAD\n-  std::vector<std::vector<std::vector<int>>> nested_vectors = {\n-    {{1, 2, 3}, {4, 5}, {6}},\n-    {{7},       {8, 9}, {10, 11, 12}},\n-    {{13}}\n-  };\n-  auto joined = nested_vectors | std::views::join | std::views::join;\n-\n-  using V = decltype(joined);\n-  static_assert( std::same_as<std::ranges::range_value_t<V>, int> );\n-}"}]}