{"sha": "e2298656eb195614bcf70e385ddf44a4b137a081", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTIyOTg2NTZlYjE5NTYxNGJjZjcwZTM4NWRkZjQ0YTRiMTM3YTA4MQ==", "commit": {"author": {"name": "Bill Schmidt", "email": "wschmidt@linux.vnet.ibm.com", "date": "2016-07-01T20:38:51Z"}, "committer": {"name": "William Schmidt", "email": "wschmidt@gcc.gnu.org", "date": "2016-07-01T20:38:51Z"}, "message": "const-float128-ped.c: Require __float128 effective target and options.\n\n2016-07-01  Bill Schmidt  <wschmidt@linux.vnet.ibm.com>\n\n\t* gcc.dg/const-float128-ped.c: Require __float128 effective\n\ttarget and options.\n\t* gcc.dg/const-float128.c: Likewise.\n\t* gcc.dg/torture/float128-cmp-invalid.c: Require\n\t__float128 and base_quadfloat_support effective targets, and\n\t__float128 options.\n\t* gcc.dg/torture/float128-div-underflow.c: Likewise.\n\t* gcc.dg/torture/float128-extend-nan.c: Likewise.\n\t* gcc.dg/torture/float128-nan.c: Likewise.\n\t* gcc.dg/torture/fp-int-convert-float128-timode-2.c: Likewise.\n\t* gcc.dg/torture/fp-int-convert-float128-timode-3.c: Likewise.\n\t* gcc.dg/torture/fp-int-convert-float128-timode.c: Likewise.\n\t* lib/target-supports.exp (check_effective_target___float128):\n\tNew.\n\t(add_options_for___float128): New.\n\t(check_effective_target_base_quadword_support): New.\n\nFrom-SVN: r237924", "tree": {"sha": "bd9e08d5897fbca44ee27895f676cd7092f86dac", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/bd9e08d5897fbca44ee27895f676cd7092f86dac"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e2298656eb195614bcf70e385ddf44a4b137a081", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e2298656eb195614bcf70e385ddf44a4b137a081", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e2298656eb195614bcf70e385ddf44a4b137a081", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e2298656eb195614bcf70e385ddf44a4b137a081/comments", "author": {"login": "wschmidt-ibm", "id": 5520937, "node_id": "MDQ6VXNlcjU1MjA5Mzc=", "avatar_url": "https://avatars.githubusercontent.com/u/5520937?v=4", "gravatar_id": "", "url": "https://api.github.com/users/wschmidt-ibm", "html_url": "https://github.com/wschmidt-ibm", "followers_url": "https://api.github.com/users/wschmidt-ibm/followers", "following_url": "https://api.github.com/users/wschmidt-ibm/following{/other_user}", "gists_url": "https://api.github.com/users/wschmidt-ibm/gists{/gist_id}", "starred_url": "https://api.github.com/users/wschmidt-ibm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/wschmidt-ibm/subscriptions", "organizations_url": "https://api.github.com/users/wschmidt-ibm/orgs", "repos_url": "https://api.github.com/users/wschmidt-ibm/repos", "events_url": "https://api.github.com/users/wschmidt-ibm/events{/privacy}", "received_events_url": "https://api.github.com/users/wschmidt-ibm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "a550396b8071de85da71fb2cfebe5d63cc31fc01", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a550396b8071de85da71fb2cfebe5d63cc31fc01", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a550396b8071de85da71fb2cfebe5d63cc31fc01"}], "stats": {"total": 96, "additions": 87, "deletions": 9}, "files": [{"sha": "11af4b3b730e046ef2946e5ff1e4399a30eef058", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e2298656eb195614bcf70e385ddf44a4b137a081/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e2298656eb195614bcf70e385ddf44a4b137a081/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=e2298656eb195614bcf70e385ddf44a4b137a081", "patch": "@@ -1,3 +1,22 @@\n+2016-07-01  Bill Schmidt  <wschmidt@linux.vnet.ibm.com>\n+\n+\t* gcc.dg/const-float128-ped.c: Require __float128 effective\n+\ttarget and options.\n+\t* gcc.dg/const-float128.c: Likewise.\n+\t* gcc.dg/torture/float128-cmp-invalid.c: Require\n+\t__float128 and base_quadfloat_support effective targets, and\n+\t__float128 options.\n+\t* gcc.dg/torture/float128-div-underflow.c: Likewise.\n+\t* gcc.dg/torture/float128-extend-nan.c: Likewise.\n+\t* gcc.dg/torture/float128-nan.c: Likewise.\n+\t* gcc.dg/torture/fp-int-convert-float128-timode-2.c: Likewise.\n+\t* gcc.dg/torture/fp-int-convert-float128-timode-3.c: Likewise.\n+\t* gcc.dg/torture/fp-int-convert-float128-timode.c: Likewise.\n+\t* lib/target-supports.exp (check_effective_target___float128):\n+\tNew.\n+\t(add_options_for___float128): New.\n+\t(check_effective_target_base_quadword_support): New.\n+\n 2016-07-01  Michael Meissner  <meissner@linux.vnet.ibm.com>\n \n \tPR target/71720"}, {"sha": "c1869cc43f318d9aff3617e089dfe63246248a2e", "filename": "gcc/testsuite/gcc.dg/const-float128-ped.c", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e2298656eb195614bcf70e385ddf44a4b137a081/gcc%2Ftestsuite%2Fgcc.dg%2Fconst-float128-ped.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e2298656eb195614bcf70e385ddf44a4b137a081/gcc%2Ftestsuite%2Fgcc.dg%2Fconst-float128-ped.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fconst-float128-ped.c?ref=e2298656eb195614bcf70e385ddf44a4b137a081", "patch": "@@ -1,5 +1,7 @@\n /* Test 'q' suffix with -pedantic on __float128 type constants.  */\n-/* { dg-do compile { target ia64-*-* i?86-*-* x86_64-*-* } } */\n+/* { dg-do compile } */\n+/* { dg-require-effective-target __float128 } */\n /* { dg-options \"-pedantic\" } */\n+/* { dg-add-options __float128 } */\n \n __float128 a = 123.456789q; /* { dg-warning \"non-standard suffix on floating constant\" } */"}, {"sha": "15394b483fc97a2a5b1e4f17a4e0d9e2c178ca86", "filename": "gcc/testsuite/gcc.dg/const-float128.c", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e2298656eb195614bcf70e385ddf44a4b137a081/gcc%2Ftestsuite%2Fgcc.dg%2Fconst-float128.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e2298656eb195614bcf70e385ddf44a4b137a081/gcc%2Ftestsuite%2Fgcc.dg%2Fconst-float128.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fconst-float128.c?ref=e2298656eb195614bcf70e385ddf44a4b137a081", "patch": "@@ -1,6 +1,8 @@\n /* Test 'q' and 'Q' suffixes on __float128 type constants.  */\n-/* { dg-do compile { target ia64-*-* i?86-*-* x86_64-*-* } } */\n+/* { dg-do compile } */\n+/* { dg-require-effective-target __float128 } */\n /* { dg-options \"\" } */\n+/* { dg-add-options __float128 } */\n \n __float128 a = 123.456789q;\n __float128 b = 123.456789Q;"}, {"sha": "1f675efdd6132a700ad651dbd3ab4ef8061dc9ce", "filename": "gcc/testsuite/gcc.dg/torture/float128-cmp-invalid.c", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e2298656eb195614bcf70e385ddf44a4b137a081/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Ffloat128-cmp-invalid.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e2298656eb195614bcf70e385ddf44a4b137a081/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Ffloat128-cmp-invalid.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Ffloat128-cmp-invalid.c?ref=e2298656eb195614bcf70e385ddf44a4b137a081", "patch": "@@ -1,7 +1,10 @@\n /* Test for \"invalid\" exceptions from __float128 comparisons.  */\n-/* { dg-do run { target i?86-*-* x86_64-*-* ia64-*-* } } */\n+/* { dg-do run } */\n /* { dg-options \"\" } */\n+/* { dg-require-effective-target __float128 } */\n+/* { dg-require-effective-target base_quadfloat_support } */\n /* { dg-require-effective-target fenv_exceptions } */\n+/* { dg-add-options __float128 } */\n \n #include <fenv.h>\n #include <stdlib.h>"}, {"sha": "dc284dec6dcb57abb683b62b4d90526fef2dfab6", "filename": "gcc/testsuite/gcc.dg/torture/float128-div-underflow.c", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e2298656eb195614bcf70e385ddf44a4b137a081/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Ffloat128-div-underflow.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e2298656eb195614bcf70e385ddf44a4b137a081/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Ffloat128-div-underflow.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Ffloat128-div-underflow.c?ref=e2298656eb195614bcf70e385ddf44a4b137a081", "patch": "@@ -1,7 +1,10 @@\n /* Test for spurious underflow from __float128 division.  */\n-/* { dg-do run { target i?86-*-* x86_64-*-* ia64-*-* } } */\n+/* { dg-do run } */\n /* { dg-options \"\" } */\n+/* { dg-require-effective-target __float128 } */\n+/* { dg-require-effective-target base_quadfloat_support } */\n /* { dg-require-effective-target fenv_exceptions } */\n+/* { dg-add-options __float128 } */\n \n #include <fenv.h>\n #include <stdlib.h>"}, {"sha": "65dc520af7f2e0419ae1f6ab58daafd4d7bc8644", "filename": "gcc/testsuite/gcc.dg/torture/float128-extend-nan.c", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e2298656eb195614bcf70e385ddf44a4b137a081/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Ffloat128-extend-nan.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e2298656eb195614bcf70e385ddf44a4b137a081/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Ffloat128-extend-nan.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Ffloat128-extend-nan.c?ref=e2298656eb195614bcf70e385ddf44a4b137a081", "patch": "@@ -1,7 +1,10 @@\n /* Test extensions to __float128 quiet signaling NaNs.  */\n-/* { dg-do run { target i?86-*-* x86_64-*-* ia64-*-* } } */\n+/* { dg-do run } */\n /* { dg-options \"-fsignaling-nans\" } */\n+/* { dg-require-effective-target __float128 } */\n+/* { dg-require-effective-target base_quadfloat_support } */\n /* { dg-require-effective-target fenv_exceptions } */\n+/* { dg-add-options __float128 } */\n \n #include <fenv.h>\n #include <float.h>"}, {"sha": "0ad043160a4fbabc6fec86e784fcc27434b3cafd", "filename": "gcc/testsuite/gcc.dg/torture/float128-nan.c", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e2298656eb195614bcf70e385ddf44a4b137a081/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Ffloat128-nan.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e2298656eb195614bcf70e385ddf44a4b137a081/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Ffloat128-nan.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Ffloat128-nan.c?ref=e2298656eb195614bcf70e385ddf44a4b137a081", "patch": "@@ -1,7 +1,10 @@\n /* Test __float128 NaN generation.  */\n-/* { dg-do run { target i?86-*-* x86_64-*-* ia64-*-* } } */\n+/* { dg-do run } */\n /* { dg-require-effective-target fenv_exceptions } */\n+/* { dg-require-effective-target __float128 } */\n+/* { dg-require-effective-target base_quadfloat_support } */\n /* { dg-options \"\" } */\n+/* { dg-add-options __float128 } */\n \n #include <fenv.h>\n #include <stdbool.h>"}, {"sha": "b46acb39fd50b366ae52cff81f66ab17c60501e3", "filename": "gcc/testsuite/gcc.dg/torture/fp-int-convert-float128-timode-2.c", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e2298656eb195614bcf70e385ddf44a4b137a081/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Ffp-int-convert-float128-timode-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e2298656eb195614bcf70e385ddf44a4b137a081/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Ffp-int-convert-float128-timode-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Ffp-int-convert-float128-timode-2.c?ref=e2298656eb195614bcf70e385ddf44a4b137a081", "patch": "@@ -1,9 +1,12 @@\n /* Test floating-point conversions.  __float128 type with TImode: bug\n    53317.  */\n /* Origin: Joseph Myers <joseph@codesourcery.com> */\n-/* { dg-do run { target i?86-*-* x86_64-*-* ia64-*-* } } */\n+/* { dg-do run } */\n+/* { dg-require-effective-target __float128 } */\n+/* { dg-require-effective-target base_quadfloat_support } */\n /* { dg-require-effective-target int128 } */\n /* { dg-options \"\" } */\n+/* { dg-add-options __float128 } */\n \n extern void abort (void);\n extern void exit (int);"}, {"sha": "fa6eb6b72bf3b0eb0fec67be67ecb1e4b0101199", "filename": "gcc/testsuite/gcc.dg/torture/fp-int-convert-float128-timode-3.c", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e2298656eb195614bcf70e385ddf44a4b137a081/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Ffp-int-convert-float128-timode-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e2298656eb195614bcf70e385ddf44a4b137a081/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Ffp-int-convert-float128-timode-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Ffp-int-convert-float128-timode-3.c?ref=e2298656eb195614bcf70e385ddf44a4b137a081", "patch": "@@ -1,8 +1,11 @@\n /* Test for correct rounding of conversions from __int128 to\n    __float128.  */\n-/* { dg-do run { target i?86-*-* x86_64-*-* ia64-*-* } } */\n+/* { dg-do run } */\n+/* { dg-require-effective-target __float128 } */\n+/* { dg-require-effective-target base_quadfloat_support } */\n /* { dg-require-effective-target int128 } */\n /* { dg-options \"-frounding-math\" } */\n+/* { dg-add-options __float128 } */\n \n #include <fenv.h>\n #include <stdlib.h>"}, {"sha": "493dee892b076e4b5e34dff9da0d065fcf30c5c5", "filename": "gcc/testsuite/gcc.dg/torture/fp-int-convert-float128-timode.c", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e2298656eb195614bcf70e385ddf44a4b137a081/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Ffp-int-convert-float128-timode.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e2298656eb195614bcf70e385ddf44a4b137a081/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Ffp-int-convert-float128-timode.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Ffp-int-convert-float128-timode.c?ref=e2298656eb195614bcf70e385ddf44a4b137a081", "patch": "@@ -1,7 +1,10 @@\n /* Test floating-point conversions.  __float128 type with TImode.  */\n /* Origin: Joseph Myers <joseph@codesourcery.com> */\n-/* { dg-do run { target i?86-*-* x86_64-*-* ia64-*-* } } */\n+/* { dg-do run } */\n+/* { dg-require-effective-target __float128 } */\n+/* { dg-require-effective-target base_quadfloat_support } */\n /* { dg-options \"\" } */\n+/* { dg-add-options __float128 } */\n \n #include \"fp-int-convert.h\"\n "}, {"sha": "4ef52ace37b8f11c2ea036e4bdd655ef1a6aef59", "filename": "gcc/testsuite/lib/target-supports.exp", "status": "modified", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e2298656eb195614bcf70e385ddf44a4b137a081/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e2298656eb195614bcf70e385ddf44a4b137a081/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp?ref=e2298656eb195614bcf70e385ddf44a4b137a081", "patch": "@@ -2370,6 +2370,40 @@ proc check_effective_target_has_q_floating_suffix { } {\n \tfloat dummy = 1.0q;\n     } \"$opts\"]\n }\n+\n+# Return 1 if the target supports __float128,\n+# 0 otherwise.\n+\n+proc check_effective_target___float128 { } {\n+    if { [istarget powerpc*-*-*] } {\n+\treturn [check_ppc_float128_sw_available]\n+    }\n+    if { [istarget ia64-*-*]\n+\t || [istarget i?86-*-*]\n+\t || [istarget x86_64-*-*] } {\n+\treturn 1\n+    }\n+    return 0\n+}\n+\n+proc add_options_for___float128 { flags } {\n+    if { [istarget powerpc*-*-*] } {\n+\treturn \"$flags -mfloat128 -mvsx\"\n+    }\n+    return \"$flags\"\n+}\n+\n+# Return 1 if the target supports any special run-time requirements\n+# for __float128 or _Float128,\n+# 0 otherwise.\n+\n+proc check_effective_target_base_quadfloat_support { } {\n+    if { [istarget powerpc*-*-*] } {\n+\treturn [check_vsx_hw_available]\n+    }\n+    return 1\n+}\n+\n # Return 1 if the target supports compiling fixed-point,\n # 0 otherwise.\n "}]}