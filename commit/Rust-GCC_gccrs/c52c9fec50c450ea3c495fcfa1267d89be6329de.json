{"sha": "c52c9fec50c450ea3c495fcfa1267d89be6329de", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzUyYzlmZWM1MGM0NTBlYTNjNDk1ZmNmYTEyNjdkODliZTYzMjlkZQ==", "commit": {"author": {"name": "Michael Koch", "email": "konqueror@gmx.de", "date": "2003-06-20T12:01:54Z"}, "committer": {"name": "Michael Koch", "email": "mkoch@gcc.gnu.org", "date": "2003-06-20T12:01:54Z"}, "message": "MappedByteFileBuffer.java, [...]: Removed\n\n2003-06-20  Michael Koch  <konqueror@gmx.de>\n\n\t* gnu/java/nio/MappedByteFileBuffer.java,\n\tgnu/java/nio/natMappedByteFileBuffer.cc:\n\tRemoved\n\t* java/nio/MappedByteBufferImpl.java:\n\tNew file.\n\t* gnu/java/nio/FileChannelImpl.java:\n\tUse MappedByteBufferImpl instead of MappedByteFileBuffer.\n\t* Makefile.am\n\t(ordinary_java_source_files): Removed\n\tgnu/java/nio/MappedByteFileBuffer.java and added\n\tjava/nio/MappedByteBufferImpl.java.\n\t(nat_source_files): Removed gnu/java/nio/natMappedByteFileBuffer.cc\n\t* Makefile.in: Regenerated.\n\nFrom-SVN: r68259", "tree": {"sha": "8a24e3385d6e3d894832f242bf0fb27f8fddbe25", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8a24e3385d6e3d894832f242bf0fb27f8fddbe25"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c52c9fec50c450ea3c495fcfa1267d89be6329de", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c52c9fec50c450ea3c495fcfa1267d89be6329de", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c52c9fec50c450ea3c495fcfa1267d89be6329de", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c52c9fec50c450ea3c495fcfa1267d89be6329de/comments", "author": null, "committer": null, "parents": [{"sha": "27a3e49454786b3eb1728793c30cb3d1c9b2e77e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/27a3e49454786b3eb1728793c30cb3d1c9b2e77e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/27a3e49454786b3eb1728793c30cb3d1c9b2e77e"}], "stats": {"total": 923, "additions": 308, "deletions": 615}, "files": [{"sha": "2d2ffb7a24d513fc034839162bca908e1c500035", "filename": "libjava/ChangeLog", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c52c9fec50c450ea3c495fcfa1267d89be6329de/libjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c52c9fec50c450ea3c495fcfa1267d89be6329de/libjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FChangeLog?ref=c52c9fec50c450ea3c495fcfa1267d89be6329de", "patch": "@@ -1,3 +1,19 @@\n+2003-06-20  Michael Koch  <konqueror@gmx.de>\n+\n+\t* gnu/java/nio/MappedByteFileBuffer.java,\n+\tgnu/java/nio/natMappedByteFileBuffer.cc:\n+\tRemoved\n+\t* java/nio/MappedByteBufferImpl.java:\n+\tNew file.\n+\t* gnu/java/nio/FileChannelImpl.java:\n+\tUse MappedByteBufferImpl instead of MappedByteFileBuffer.\n+\t* Makefile.am\n+\t(ordinary_java_source_files): Removed\n+\tgnu/java/nio/MappedByteFileBuffer.java and added\n+\tjava/nio/MappedByteBufferImpl.java.\n+\t(nat_source_files): Removed gnu/java/nio/natMappedByteFileBuffer.cc\n+\t* Makefile.in: Regenerated.\n+\n 2003-06-19  Michael Koch  <konqueror@gmx.de>\n \n \t* gnu/java/nio/DatagramChannelImpl.java"}, {"sha": "0b636e7eb653272c92ea327fc700c7e6abf92786", "filename": "libjava/Makefile.am", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c52c9fec50c450ea3c495fcfa1267d89be6329de/libjava%2FMakefile.am", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c52c9fec50c450ea3c495fcfa1267d89be6329de/libjava%2FMakefile.am", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FMakefile.am?ref=c52c9fec50c450ea3c495fcfa1267d89be6329de", "patch": "@@ -2101,7 +2101,6 @@ gnu/java/math/MPN.java \\\n gnu/java/nio/DatagramChannelImpl.java \\\n gnu/java/nio/FileChannelImpl.java \\\n gnu/java/nio/FileLockImpl.java \\\n-gnu/java/nio/MappedByteFileBuffer.java \\\n gnu/java/nio/PipeImpl.java \\\n gnu/java/nio/SelectionKeyImpl.java \\\n gnu/java/nio/SelectorImpl.java \\\n@@ -2244,6 +2243,7 @@ java/nio/LongBuffer.java \\\n java/nio/LongBufferImpl.java \\\n java/nio/LongViewBufferImpl.java \\\n java/nio/MappedByteBuffer.java \\\n+java/nio/MappedByteBufferImpl.java \\\n java/nio/ReadOnlyBufferException.java \\\n java/nio/ShortBuffer.java \\\n java/nio/ShortBufferImpl.java \\\n@@ -2567,7 +2567,6 @@ gnu/gcj/runtime/natStringBuffer.cc \\\n gnu/gcj/runtime/natVMClassLoader.cc \\\n gnu/java/nio/natFileChannelImpl.cc \\\n gnu/java/nio/natFileLockImpl.cc \\\n-gnu/java/nio/natMappedByteFileBuffer.cc \\\n gnu/java/nio/natSelectorImpl.cc \\\n java/io/natFile.cc \\\n java/io/natFileDescriptor.cc \\"}, {"sha": "5580b886479d469284be6aa04b24ec00a100edd0", "filename": "libjava/Makefile.in", "status": "modified", "additions": 11, "deletions": 14, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c52c9fec50c450ea3c495fcfa1267d89be6329de/libjava%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c52c9fec50c450ea3c495fcfa1267d89be6329de/libjava%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FMakefile.in?ref=c52c9fec50c450ea3c495fcfa1267d89be6329de", "patch": "@@ -1863,7 +1863,6 @@ gnu/java/math/MPN.java \\\n gnu/java/nio/DatagramChannelImpl.java \\\n gnu/java/nio/FileChannelImpl.java \\\n gnu/java/nio/FileLockImpl.java \\\n-gnu/java/nio/MappedByteFileBuffer.java \\\n gnu/java/nio/PipeImpl.java \\\n gnu/java/nio/SelectionKeyImpl.java \\\n gnu/java/nio/SelectorImpl.java \\\n@@ -2006,6 +2005,7 @@ java/nio/LongBuffer.java \\\n java/nio/LongBufferImpl.java \\\n java/nio/LongViewBufferImpl.java \\\n java/nio/MappedByteBuffer.java \\\n+java/nio/MappedByteBufferImpl.java \\\n java/nio/ReadOnlyBufferException.java \\\n java/nio/ShortBuffer.java \\\n java/nio/ShortBufferImpl.java \\\n@@ -2328,7 +2328,6 @@ gnu/gcj/runtime/natStringBuffer.cc \\\n gnu/gcj/runtime/natVMClassLoader.cc \\\n gnu/java/nio/natFileChannelImpl.cc \\\n gnu/java/nio/natFileLockImpl.cc \\\n-gnu/java/nio/natMappedByteFileBuffer.cc \\\n gnu/java/nio/natSelectorImpl.cc \\\n java/io/natFile.cc \\\n java/io/natFileDescriptor.cc \\\n@@ -2502,14 +2501,13 @@ gnu/gcj/runtime/natFinalizerThread.lo gnu/gcj/runtime/natFirstThread.lo \\\n gnu/gcj/runtime/natNameFinder.lo gnu/gcj/runtime/natSharedLibLoader.lo \\\n gnu/gcj/runtime/natStackTrace.lo gnu/gcj/runtime/natStringBuffer.lo \\\n gnu/gcj/runtime/natVMClassLoader.lo gnu/java/nio/natFileChannelImpl.lo \\\n-gnu/java/nio/natFileLockImpl.lo gnu/java/nio/natMappedByteFileBuffer.lo \\\n-gnu/java/nio/natSelectorImpl.lo java/io/natFile.lo \\\n-java/io/natFileDescriptor.lo java/io/natObjectInputStream.lo \\\n-java/io/natVMObjectStreamClass.lo java/lang/natCharacter.lo \\\n-java/lang/natClass.lo java/lang/natClassLoader.lo \\\n-java/lang/natConcreteProcess.lo java/lang/natDouble.lo \\\n-java/lang/natFloat.lo java/lang/natMath.lo java/lang/natObject.lo \\\n-java/lang/natRuntime.lo java/lang/natString.lo \\\n+gnu/java/nio/natFileLockImpl.lo gnu/java/nio/natSelectorImpl.lo \\\n+java/io/natFile.lo java/io/natFileDescriptor.lo \\\n+java/io/natObjectInputStream.lo java/io/natVMObjectStreamClass.lo \\\n+java/lang/natCharacter.lo java/lang/natClass.lo \\\n+java/lang/natClassLoader.lo java/lang/natConcreteProcess.lo \\\n+java/lang/natDouble.lo java/lang/natFloat.lo java/lang/natMath.lo \\\n+java/lang/natObject.lo java/lang/natRuntime.lo java/lang/natString.lo \\\n java/lang/natStringBuffer.lo java/lang/natSystem.lo \\\n java/lang/natThread.lo java/lang/natVMSecurityManager.lo \\\n java/lang/ref/natReference.lo java/lang/reflect/natArray.lo \\\n@@ -2966,8 +2964,8 @@ DEP_FILES =  .deps/$(srcdir)/$(CONVERT_DIR)/gen-from-JIS.P \\\n .deps/gnu/java/locale/LocaleInformation_zh_TW.P \\\n .deps/gnu/java/math/MPN.P .deps/gnu/java/nio/DatagramChannelImpl.P \\\n .deps/gnu/java/nio/FileChannelImpl.P .deps/gnu/java/nio/FileLockImpl.P \\\n-.deps/gnu/java/nio/MappedByteFileBuffer.P .deps/gnu/java/nio/PipeImpl.P \\\n-.deps/gnu/java/nio/SelectionKeyImpl.P .deps/gnu/java/nio/SelectorImpl.P \\\n+.deps/gnu/java/nio/PipeImpl.P .deps/gnu/java/nio/SelectionKeyImpl.P \\\n+.deps/gnu/java/nio/SelectorImpl.P \\\n .deps/gnu/java/nio/SelectorProviderImpl.P \\\n .deps/gnu/java/nio/ServerSocketChannelImpl.P \\\n .deps/gnu/java/nio/SocketChannelImpl.P \\\n@@ -2982,7 +2980,6 @@ DEP_FILES =  .deps/$(srcdir)/$(CONVERT_DIR)/gen-from-JIS.P \\\n .deps/gnu/java/nio/charset/UTF_8.P \\\n .deps/gnu/java/nio/natFileChannelImpl.P \\\n .deps/gnu/java/nio/natFileLockImpl.P \\\n-.deps/gnu/java/nio/natMappedByteFileBuffer.P \\\n .deps/gnu/java/nio/natSelectorImpl.P \\\n .deps/gnu/java/rmi/RMIMarshalledObjectInputStream.P \\\n .deps/gnu/java/rmi/RMIMarshalledObjectOutputStream.P \\\n@@ -3498,7 +3495,7 @@ DEP_FILES =  .deps/$(srcdir)/$(CONVERT_DIR)/gen-from-JIS.P \\\n .deps/java/nio/IntBufferImpl.P .deps/java/nio/IntViewBufferImpl.P \\\n .deps/java/nio/InvalidMarkException.P .deps/java/nio/LongBuffer.P \\\n .deps/java/nio/LongBufferImpl.P .deps/java/nio/LongViewBufferImpl.P \\\n-.deps/java/nio/MappedByteBuffer.P \\\n+.deps/java/nio/MappedByteBuffer.P .deps/java/nio/MappedByteBufferImpl.P \\\n .deps/java/nio/ReadOnlyBufferException.P .deps/java/nio/ShortBuffer.P \\\n .deps/java/nio/ShortBufferImpl.P .deps/java/nio/ShortViewBufferImpl.P \\\n .deps/java/nio/channels/AlreadyConnectedException.P \\"}, {"sha": "97929ca786aa36383dfb1e51eaea9210a7e6314f", "filename": "libjava/gnu/java/nio/FileChannelImpl.java", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c52c9fec50c450ea3c495fcfa1267d89be6329de/libjava%2Fgnu%2Fjava%2Fnio%2FFileChannelImpl.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c52c9fec50c450ea3c495fcfa1267d89be6329de/libjava%2Fgnu%2Fjava%2Fnio%2FFileChannelImpl.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fgnu%2Fjava%2Fnio%2FFileChannelImpl.java?ref=c52c9fec50c450ea3c495fcfa1267d89be6329de", "patch": "@@ -46,6 +46,7 @@\n import java.io.RandomAccessFile;\n import java.nio.ByteBuffer;\n import java.nio.MappedByteBuffer;\n+import java.nio.MappedByteBufferImpl;\n import java.nio.channels.ClosedChannelException;\n import java.nio.channels.FileChannel;\n import java.nio.channels.FileLock;\n@@ -260,7 +261,7 @@ public MappedByteBuffer map (FileChannel.MapMode mode, long position,\n     int cmode = mode.m;\n     map_address = nio_mmap_file (position, size, cmode);\n     length = (int) size;\n-    buf = new MappedByteFileBuffer (this);\n+    buf = new MappedByteBufferImpl (this);\n     return buf;\n   }\n \n@@ -271,7 +272,7 @@ static MappedByteBuffer create_direct_mapped_buffer (RawData map_address,\n     FileChannelImpl ch = new FileChannelImpl ();\n     ch.map_address = map_address;\n     ch.length = (int) length;\n-    ch.buf = new MappedByteFileBuffer (ch);\n+    ch.buf = new MappedByteBufferImpl (ch);\n     return ch.buf;\t\t\t \n   }\n "}, {"sha": "ec6c83c5d708013810624e616803892d167eea27", "filename": "libjava/gnu/java/nio/MappedByteFileBuffer.java", "status": "removed", "additions": 0, "deletions": 449, "changes": 449, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/27a3e49454786b3eb1728793c30cb3d1c9b2e77e/libjava%2Fgnu%2Fjava%2Fnio%2FMappedByteFileBuffer.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/27a3e49454786b3eb1728793c30cb3d1c9b2e77e/libjava%2Fgnu%2Fjava%2Fnio%2FMappedByteFileBuffer.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fgnu%2Fjava%2Fnio%2FMappedByteFileBuffer.java?ref=27a3e49454786b3eb1728793c30cb3d1c9b2e77e", "patch": "@@ -1,449 +0,0 @@\n-/* MappedByteFileBuffer.java -- \n-   Copyright (C) 2002 Free Software Foundation, Inc.\n-\n-This file is part of GNU Classpath.\n-\n-GNU Classpath is free software; you can redistribute it and/or modify\n-it under the terms of the GNU General Public License as published by\n-the Free Software Foundation; either version 2, or (at your option)\n-any later version.\n-\n-GNU Classpath is distributed in the hope that it will be useful, but\n-WITHOUT ANY WARRANTY; without even the implied warranty of\n-MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n-General Public License for more details.\n-\n-You should have received a copy of the GNU General Public License\n-along with GNU Classpath; see the file COPYING.  If not, write to the\n-Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n-02111-1307 USA.\n-\n-Linking this library statically or dynamically with other modules is\n-making a combined work based on this library.  Thus, the terms and\n-conditions of the GNU General Public License cover the whole\n-combination.\n-\n-As a special exception, the copyright holders of this library give you\n-permission to link this library with independent modules to produce an\n-executable, regardless of the license terms of these independent\n-modules, and to copy and distribute the resulting executable under\n-terms of your choice, provided that you also meet, for each linked\n-independent module, the terms and conditions of the license of that\n-module.  An independent module is a module which is not derived from\n-or based on this library.  If you modify this library, you may extend\n-this exception to your version of the library, but you are not\n-obligated to do so.  If you do not wish to do so, delete this\n-exception statement from your version. */\n-\n-package gnu.java.nio;\n-\n-import java.nio.ByteBuffer;\n-import java.nio.CharBuffer;\n-import java.nio.DoubleBuffer;\n-import java.nio.FloatBuffer;\n-import java.nio.IntBuffer;\n-import java.nio.LongBuffer;\n-import java.nio.ShortBuffer;\n-import java.nio.MappedByteBuffer;\n-import java.io.IOException;\n-import gnu.gcj.RawData;\n-\n-final public class MappedByteFileBuffer\n-  extends MappedByteBuffer\n-{\n-  RawData map_address;\n-  boolean readOnly;\n-  boolean direct;\n-  public FileChannelImpl ch;\n-  \n-  public MappedByteFileBuffer (FileChannelImpl ch) throws IOException\n-  {\n-    super ((int) ch.size (), (int) ch.size (), 0, -1);\n-    \n-    this.ch = ch;\n-    map_address = ch.map_address;\n-    \n-    try\n-      {\n-        long si = ch.size () / 1;\n-        limit ((int) si);\n-      }\n-    catch (IOException e)\n-      {\n-        System.err.println (\"failed to get size of file-channel's file\");\n-      }\n-  }\n-  \n-  public MappedByteFileBuffer (MappedByteFileBuffer b)\n-  {\n-    // FIXME: fix last value\n-    super (b.capacity (), b.limit (), b.position (), -1);\n-    \n-    this.readOnly = b.isReadOnly ();\n-    this.ch = b.ch;\n-    map_address = b.map_address;\n-    limit (b.limit ());\n-  }\n-\n-  public boolean isReadOnly ()\n-  {\n-    return readOnly;\n-  }\n-  \n-  public static native byte nio_read_Byte_file_channel (FileChannelImpl ch,\n-                                                        int index, int limit,\n-                                                        RawData map_address);\n-  public static native void nio_write_Byte_file_channel (FileChannelImpl ch,\n-                                                         int index, int limit,\n-                                                         byte value,\n-                                                         RawData map_address);\n-  public static native short nio_read_Short_file_channel (FileChannelImpl ch,\n-                                                          int index, int limit,\n-                                                          RawData map_address);\n-  public static native void nio_write_Short_file_channel (FileChannelImpl ch,\n-                                                          int index, int limit,\n-                                                          short value,\n-                                                          RawData map_address);\n-  public static native char nio_read_Char_file_channel (FileChannelImpl ch,\n-                                                        int index, int limit,\n-                                                        RawData map_address);\n-  public static native void nio_write_Char_file_channel (FileChannelImpl ch,\n-                                                         int index, int limit,\n-                                                         char value,\n-                                                         RawData map_address);\n-  public static native int nio_read_Int_file_channel (FileChannelImpl ch,\n-                                                      int index, int limit,\n-                                                      RawData map_address);\n-  public static native void nio_write_Int_file_channel (FileChannelImpl ch,\n-                                                        int index, int limit,\n-                                                        int value,\n-                                                        RawData map_address);\n-  public static native long nio_read_Long_file_channel (FileChannelImpl ch,\n-                                                        int index, int limit,\n-                                                        RawData map_address);\n-  public static native void nio_write_Long_file_channel (FileChannelImpl ch,\n-                                                         int index, int limit,\n-                                                         long value,\n-                                                         RawData map_address);\n-  public static native float nio_read_Float_file_channel (FileChannelImpl ch,\n-                                                          int index, int limit,\n-                                                          RawData map_address);\n-  public static native void nio_write_Float_file_channel (FileChannelImpl ch,\n-                                                          int index, int limit,\n-                                                          float value,\n-                                                          RawData map_address);\n-  public static native double\n-    nio_read_Double_file_channel (FileChannelImpl ch, int index, int limit,\n-                                  RawData map_address);\n-  public static native void nio_write_Double_file_channel (FileChannelImpl ch,\n-                                                           int index, int limit,\n-                                                           double value,\n-                                                           RawData map_address);\n-\n-  final public byte get ()\n-  {\n-    byte a = MappedByteFileBuffer.nio_read_Byte_file_channel (ch, position (),\n-                                                              limit (),\n-                                                              map_address);\n-    position (position () + 1);\n-    return a;\n-  }\n-\n-  final public ByteBuffer put (byte b)\n-  {\n-    MappedByteFileBuffer.nio_write_Byte_file_channel (ch, position (), limit (),\n-                                                      b, map_address);\n-    position (position () + 1);\n-    return this;\n-  }\n-\n-  final public byte get (int index)\n-  {\n-    byte a = MappedByteFileBuffer.nio_read_Byte_file_channel (ch, index,\n-                                                              limit (),\n-                                                              map_address);\n-    return a;\n-  }\n-\n-  final public ByteBuffer put (int index, byte b)\n-  {\n-    MappedByteFileBuffer.nio_write_Byte_file_channel (ch, index, limit (), b,\n-                                                      map_address);\n-    return this;\n-  }\n-\n-  final public ByteBuffer compact ()\n-  {\n-    return this;\n-  }\n-\n-  final public boolean isDirect ()\n-  {\n-    return direct;\n-  }\n-\n-  final public ByteBuffer slice ()\n-  {\n-    MappedByteFileBuffer A = new MappedByteFileBuffer (this);\n-    return A;\n-  }\n-\n-  public ByteBuffer duplicate ()\n-  {\n-    return new MappedByteFileBuffer (this);\n-  }\n-\n-  public ByteBuffer asReadOnlyBuffer ()\n-  {\n-    MappedByteFileBuffer b = new MappedByteFileBuffer (this);\n-    b.readOnly = true;\n-    return b;\n-  }\n-\n-  final public ByteBuffer asByteBuffer ()\n-  {\n-//     ByteBuffer res = new MappedByteFileBuffer (ch);\n-//     res.limit ((limit () * 1) / 1);\n-//     return res;\n-    throw new Error (\"not implemented\");\n-  }\n-  \n-  final public byte getByte ()\n-  {\n-    byte a = nio_read_Byte_file_channel (ch, position (), limit (),\n-                                         map_address);\n-    position (position () + 1);\n-    return a;\n-  }\n-  \n-  final public ByteBuffer putByte (byte value)\n-  {\n-    nio_write_Byte_file_channel (ch, position (), limit (), value, map_address);\n-    position (position () + 1);\n-    return this;\n-  }\n-  \n-  final public byte getByte (int index)\n-  {\n-    byte a = nio_read_Byte_file_channel (ch, index, limit(), map_address);\n-    return a;\n-  }\n-  \n-  final public ByteBuffer putByte (int index, byte value)\n-  {\n-    nio_write_Byte_file_channel (ch, index, limit (), value, map_address);\n-    return this;\n-  };\n-  \n-  final public CharBuffer asCharBuffer ()\n-  {\n-//     CharBuffer res = new MappedCharFileBuffer (ch);\n-//     res.limit ((limit () * 1) / 2);\n-//     return res;\n-    throw new Error (\"not implemented\");\n-  }\n-\n-  final public char getChar ()\n-  {\n-    char a = nio_read_Char_file_channel (ch, position (), limit (),\n-                                         map_address);\n-    position (position () + 1);\n-    return a;\n-  }\n-  \n-  final public ByteBuffer putChar (char value)\n-  {\n-    nio_write_Char_file_channel (ch, position (), limit (), value, map_address);\n-    position (position () + 1);\n-    return this;\n-  }\n-  \n-  final public char getChar (int index)\n-  {\n-    char a = nio_read_Char_file_channel (ch, index, limit (), map_address);\n-    return a;\n-  }\n-  \n-  final public ByteBuffer putChar (int index, char value)\n-  {\n-    nio_write_Char_file_channel (ch, index, limit (), value, map_address);\n-    return this;\n-  };\n-\n-  final public ShortBuffer asShortBuffer ()\n-  {\n-//     ShortBuffer res = new MappedShortFileBuffer (ch);\n-//     res.limit ((limit () * 1) / 2);\n-//     return res;\n-    throw new Error (\"not implemented\");\n-  }\n-  \n-  final public short getShort ()\n-  {\n-    short a = nio_read_Short_file_channel (ch, position (), limit (),\n-                                           map_address);\n-    position (position () + 1);\n-    return a;\n-  }\n-  \n-  final public ByteBuffer putShort (short value)\n-  {\n-    nio_write_Short_file_channel (ch, position (), limit (), value,\n-                                  map_address);\n-    position (position () + 1);\n-    return this;\n-  }\n-  \n-  final public short getShort (int index)\n-  {\n-    short a = nio_read_Short_file_channel (ch, index, limit (), map_address);\n-    return a;\n-  }\n-  \n-  final public ByteBuffer putShort (int index, short value)\n-  {\n-    nio_write_Short_file_channel (ch, index, limit (), value, map_address);\n-    return this;\n-  }\n-\n-  final public IntBuffer asIntBuffer ()\n-  {\n-//     IntBuffer res = new MappedIntFileBuffer (ch);\n-//     res.limit ((limit () * 1) / 4);\n-//     return res;\n-    throw new Error (\"not implemented\");\n-  }\n-  \n-  final public int getInt ()\n-  {\n-    int a = nio_read_Int_file_channel (ch, position (), limit (), map_address);\n-    position (position () + 1);\n-    return a;\n-  }\n-  \n-  final public ByteBuffer putInt (int value)\n-  {\n-    nio_write_Int_file_channel (ch, position (), limit (), value, map_address);\n-    position (position () + 1);\n-    return this;\n-  }\n-  \n-  final public int getInt (int index)\n-  {\n-    int a = nio_read_Int_file_channel (ch, index, limit (), map_address);\n-    return a;\n-  }\n-  \n-  final public ByteBuffer putInt (int index, int value)\n-  {\n-    nio_write_Int_file_channel (ch, index, limit (), value, map_address);\n-    return this;\n-  }\n-\n-  final public LongBuffer asLongBuffer ()\n-  {\n-//     LongBuffer res = new MappedLongFileBuffer (ch);\n-//     res.limit ((limit () * 1) / 8);\n-//     return res;\n-    throw new Error (\"not implemented\");\n-  }\n-  \n-  final public long getLong ()\n-  {\n-    long a = nio_read_Long_file_channel (ch, position (), limit (),\n-                                         map_address);\n-    position (position () + 1);\n-    return a;\n-  }\n-  \n-  final public ByteBuffer putLong (long value)\n-  {\n-    nio_write_Long_file_channel (ch, position (), limit (), value, map_address);\n-    position (position () + 1);\n-    return this;\n-  }\n-  \n-  final public long getLong (int index)\n-  {\n-    long a = nio_read_Long_file_channel (ch, index, limit (), map_address);\n-    return a;\n-  }\n-  \n-  final public ByteBuffer putLong (int index, long value)\n-  {\n-    nio_write_Long_file_channel (ch, index, limit (), value, map_address);\n-    return this;\n-  }\n-\n-  final public FloatBuffer asFloatBuffer ()\n-  {\n-//     FloatBuffer res = new MappedFloatFileBuffer (ch);\n-//     res.limit ((limit () * 1) / 4);\n-//     return res;\n-    throw new Error (\"not implemented\");\n-  }\n-  \n-  final public float getFloat ()\n-  {\n-    float a = nio_read_Float_file_channel (ch, position (), limit (),\n-                                           map_address);\n-    position (position () + 1);\n-    return a;\n-  }\n-  \n-  final public ByteBuffer putFloat (float value)\n-  {\n-    nio_write_Float_file_channel (ch, position (), limit (), value,\n-                                  map_address);\n-    position (position () + 1);\n-    return this;\n-  }\n-  \n-  final public float getFloat (int index)\n-  {\n-    float a = nio_read_Float_file_channel (ch, index, limit (), map_address);\n-    return a;\n-  }\n-  \n-  final public ByteBuffer putFloat (int index, float value)\n-  {\n-    nio_write_Float_file_channel (ch, index, limit (), value, map_address);\n-    return this;\n-  }\n-\n-  final public DoubleBuffer asDoubleBuffer ()\n-  {\n-//     DoubleBuffer res = new MappedDoubleFileBuffer (ch);\n-//     res.limit ((limit () * 1) / 8);\n-//     return res;\n-    throw new Error (\"not implemented\");\n-  }\n-  \n-  final public double getDouble ()\n-  {\n-    double a = nio_read_Double_file_channel (ch, position (), limit (),\n-                                             map_address);\n-    position (position () + 1);\n-    return a;\n-  }\n-  \n-  final public ByteBuffer putDouble (double value)\n-  {\n-    nio_write_Double_file_channel (ch, position (), limit (), value,\n-                                   map_address);\n-    position (position () + 1);\n-    return this;\n-  }\n-  \n-  final public double getDouble (int index)\n-  {\n-    double a = nio_read_Double_file_channel (ch, index, limit (), map_address);\n-    return a;\n-  }\n-  \n-  final public ByteBuffer putDouble (int index, double value)\n-  {\n-    nio_write_Double_file_channel (ch, index, limit (), value, map_address);\n-    return this;\n-  }\n-}"}, {"sha": "e64e27c8829b395933d4b4c733037ef4e16508a7", "filename": "libjava/gnu/java/nio/natMappedByteFileBuffer.cc", "status": "removed", "additions": 0, "deletions": 148, "changes": 148, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/27a3e49454786b3eb1728793c30cb3d1c9b2e77e/libjava%2Fgnu%2Fjava%2Fnio%2FnatMappedByteFileBuffer.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/27a3e49454786b3eb1728793c30cb3d1c9b2e77e/libjava%2Fgnu%2Fjava%2Fnio%2FnatMappedByteFileBuffer.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fgnu%2Fjava%2Fnio%2FnatMappedByteFileBuffer.cc?ref=27a3e49454786b3eb1728793c30cb3d1c9b2e77e", "patch": "@@ -1,148 +0,0 @@\n-// natMappedByteFileBuffer.cc\n-\n-/* Copyright (C) 2003  Free Software Foundation\n-\n-   This file is part of libgcj.\n-\n-This software is copyrighted work licensed under the terms of the\n-Libgcj License.  Please consult the file \"LIBGCJ_LICENSE\" for\n-details.  */\n-\n-#include <config.h>\n-\n-#include <jvm.h>\n-\n-#include <errno.h>\n-#include <string.h>\n-#include <sys/types.h>\n-\n-#ifdef HAVE_UNISTD_H\n-#include <unistd.h>\n-#endif\n-\n-#ifdef HAVE_FCNTL_H\n-#include <fcntl.h>\n-#endif\n-\n-#include <gnu/gcj/RawData.h>\n-#include <gnu/java/nio/MappedByteFileBuffer.h>\n-#include <java/lang/Error.h>\n-\n-jbyte\n-gnu::java::nio::MappedByteFileBuffer::nio_read_Byte_file_channel\n-                                            (gnu::java::nio::FileChannelImpl*,\n-                                             jint, jint, gnu::gcj::RawData*)\n-{\n-  throw new ::java::lang::Error (_Jv_NewStringUTF (\"not implemented\"));\n-}\n-\n-jchar\n-gnu::java::nio::MappedByteFileBuffer::nio_read_Char_file_channel\n-                                            (gnu::java::nio::FileChannelImpl*,\n-                                             jint, jint, gnu::gcj::RawData*)\n-{\n-  throw new ::java::lang::Error (_Jv_NewStringUTF (\"not implemented\"));\n-}\n-\n-jdouble\n-gnu::java::nio::MappedByteFileBuffer::nio_read_Double_file_channel\n-                                            (gnu::java::nio::FileChannelImpl*,\n-                                             jint, jint, gnu::gcj::RawData*)\n-{\n-  throw new ::java::lang::Error (_Jv_NewStringUTF (\"not implemented\"));\n-}\n-\n-jfloat\n-gnu::java::nio::MappedByteFileBuffer::nio_read_Float_file_channel\n-                                            (gnu::java::nio::FileChannelImpl*,\n-                                             jint, jint, gnu::gcj::RawData*)\n-{\n-  throw new ::java::lang::Error (_Jv_NewStringUTF (\"not implemented\"));\n-}\n-\n-jint\n-gnu::java::nio::MappedByteFileBuffer::nio_read_Int_file_channel\n-                                            (gnu::java::nio::FileChannelImpl*,\n-                                             jint, jint, gnu::gcj::RawData*)\n-{\n-  throw new ::java::lang::Error (_Jv_NewStringUTF (\"not implemented\"));\n-}\n-\n-jlong\n-gnu::java::nio::MappedByteFileBuffer::nio_read_Long_file_channel\n-                                            (gnu::java::nio::FileChannelImpl*,\n-                                             jint, jint, gnu::gcj::RawData*)\n-{\n-  throw new ::java::lang::Error (_Jv_NewStringUTF (\"not implemented\"));\n-}\n-\n-jshort\n-gnu::java::nio::MappedByteFileBuffer::nio_read_Short_file_channel\n-                                            (gnu::java::nio::FileChannelImpl*,\n-                                             jint, jint, gnu::gcj::RawData*)\n-{\n-  throw new ::java::lang::Error (_Jv_NewStringUTF (\"not implemented\"));\n-}\n-\n-void\n-gnu::java::nio::MappedByteFileBuffer::nio_write_Byte_file_channel\n-                                            (gnu::java::nio::FileChannelImpl*,\n-                                             jint, jint, jbyte,\n-                                             gnu::gcj::RawData*)\n-{\n-  throw new ::java::lang::Error (_Jv_NewStringUTF (\"not implemented\"));\n-}\n-\n-void\n-gnu::java::nio::MappedByteFileBuffer::nio_write_Char_file_channel\n-                                            (gnu::java::nio::FileChannelImpl*,\n-                                             jint, jint, jchar,\n-                                             gnu::gcj::RawData*)\n-{\n-  throw new ::java::lang::Error (_Jv_NewStringUTF (\"not implemented\"));\n-}\n-\n-void\n-gnu::java::nio::MappedByteFileBuffer::nio_write_Double_file_channel\n-                                            (gnu::java::nio::FileChannelImpl*,\n-                                             jint, jint, jdouble,\n-                                             gnu::gcj::RawData*)\n-{\n-  throw new ::java::lang::Error (_Jv_NewStringUTF (\"not implemented\"));\n-}\n-\n-void\n-gnu::java::nio::MappedByteFileBuffer::nio_write_Float_file_channel\n-                                            (gnu::java::nio::FileChannelImpl*,\n-                                             jint, jint, jfloat,\n-                                             gnu::gcj::RawData*)\n-{\n-  throw new ::java::lang::Error (_Jv_NewStringUTF (\"not implemented\"));\n-}\n-\n-void\n-gnu::java::nio::MappedByteFileBuffer::nio_write_Int_file_channel\n-                                            (gnu::java::nio::FileChannelImpl*,\n-                                             jint, jint, jint,\n-                                             gnu::gcj::RawData*)\n-{\n-  throw new ::java::lang::Error (_Jv_NewStringUTF (\"not implemented\"));\n-}\n-\n-void\n-gnu::java::nio::MappedByteFileBuffer::nio_write_Long_file_channel\n-                                            (gnu::java::nio::FileChannelImpl*,\n-                                             jint, jint, jlong,\n-                                             gnu::gcj::RawData*)\n-{\n-  throw new ::java::lang::Error (_Jv_NewStringUTF (\"not implemented\"));\n-}\n-\n-void\n-gnu::java::nio::MappedByteFileBuffer::nio_write_Short_file_channel\n-                                            (gnu::java::nio::FileChannelImpl*,\n-                                             jint, jint, jshort,\n-                                             gnu::gcj::RawData*)\n-{\n-  throw new ::java::lang::Error (_Jv_NewStringUTF (\"not implemented\"));\n-}"}, {"sha": "422794872b77f54541a49f922129e0539c4f20ed", "filename": "libjava/java/nio/MappedByteBufferImpl.java", "status": "added", "additions": 277, "deletions": 0, "changes": 277, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c52c9fec50c450ea3c495fcfa1267d89be6329de/libjava%2Fjava%2Fnio%2FMappedByteBufferImpl.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c52c9fec50c450ea3c495fcfa1267d89be6329de/libjava%2Fjava%2Fnio%2FMappedByteBufferImpl.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fnio%2FMappedByteBufferImpl.java?ref=c52c9fec50c450ea3c495fcfa1267d89be6329de", "patch": "@@ -0,0 +1,277 @@\n+/* MappedByteBufferImpl.java -- \n+   Copyright (C) 2002, 2003 Free Software Foundation, Inc.\n+\n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n+\n+Linking this library statically or dynamically with other modules is\n+making a combined work based on this library.  Thus, the terms and\n+conditions of the GNU General Public License cover the whole\n+combination.\n+\n+As a special exception, the copyright holders of this library give you\n+permission to link this library with independent modules to produce an\n+executable, regardless of the license terms of these independent\n+modules, and to copy and distribute the resulting executable under\n+terms of your choice, provided that you also meet, for each linked\n+independent module, the terms and conditions of the license of that\n+module.  An independent module is a module which is not derived from\n+or based on this library.  If you modify this library, you may extend\n+this exception to your version of the library, but you are not\n+obligated to do so.  If you do not wish to do so, delete this\n+exception statement from your version. */\n+\n+\n+package java.nio;\n+\n+import gnu.java.nio.FileChannelImpl;\n+import java.io.IOException;\n+import gnu.gcj.RawData;\n+\n+public class MappedByteBufferImpl extends MappedByteBuffer\n+{\n+  boolean readOnly;\n+  RawData map_address;\n+  public FileChannelImpl ch;\n+  \n+  public MappedByteBufferImpl (FileChannelImpl ch) throws IOException\n+  {\n+    super ((int) ch.size (), (int) ch.size (), 0, -1);\n+    \n+    this.ch = ch;\n+    map_address = ch.map_address;\n+    long si = ch.size () / 1;\n+    limit ((int) si);\n+  }\n+\n+  public boolean isReadOnly ()\n+  {\n+    return readOnly;\n+  }\n+  \n+  public static byte getImpl (FileChannelImpl ch, int index,\n+\t\t\t      int limit, RawData map_address)\n+  {\n+    throw new Error (\"Not implemented\");\n+  }\n+  \n+  public static void putImpl (FileChannelImpl ch, int index,\n+\t\t\t      int limit, byte value, RawData map_address)\n+  {\n+    throw new Error (\"Not implemented\");\n+  }\n+\n+  public byte get ()\n+  {\n+    byte result = get (position());\n+    position (position() + 1);\n+    return result;\n+  }\n+\n+  public ByteBuffer put (byte value)\n+  {\n+    put (position(), value);\n+    position (position() + 1);\n+    return this;\n+  }\n+\n+  public byte get (int index)\n+  {\n+    return getImpl (ch, index, limit (), map_address);\n+  }\n+\n+  public ByteBuffer put (int index, byte value)\n+  {\n+    putImpl (ch, index, limit (), value, map_address);\n+    return this;\n+  }\n+\n+  public ByteBuffer compact ()\n+  {\n+    throw new Error (\"Not implemented\");\n+  }\n+\n+  public boolean isDirect ()\n+  {\n+    return true;\n+  }\n+\n+  public ByteBuffer slice ()\n+  {\n+    throw new Error (\"Not implemented\");\n+  }\n+\n+  public ByteBuffer duplicate ()\n+  {\n+    throw new Error (\"Not implemented\");\n+  }\n+\n+  public ByteBuffer asReadOnlyBuffer ()\n+  {\n+    throw new Error (\"Not implemented\");\n+  }\n+\n+  public CharBuffer asCharBuffer ()\n+  {\n+    return new CharViewBufferImpl (this, position (), remaining(), remaining (), 0, -1, isReadOnly ());\n+  }\n+\n+  public ShortBuffer asShortBuffer ()\n+  {\n+    return new ShortViewBufferImpl (this, position (), remaining(), remaining (), 0, -1, isReadOnly ());\n+  }\n+\n+  public IntBuffer asIntBuffer ()\n+  {\n+    return new IntViewBufferImpl (this, position (), remaining(), remaining (), 0, -1, isReadOnly ());\n+  }\n+  \n+  public LongBuffer asLongBuffer ()\n+  {\n+    return new LongViewBufferImpl (this, position (), remaining(), remaining (), 0, -1, isReadOnly ());\n+  }\n+\n+  public FloatBuffer asFloatBuffer ()\n+  {\n+    return new FloatViewBufferImpl (this, position (), remaining(), remaining (), 0, -1, isReadOnly ());\n+  }\n+\n+  public DoubleBuffer asDoubleBuffer ()\n+  {\n+    return new DoubleViewBufferImpl (this, position (), remaining(), remaining (), 0, -1, isReadOnly ());\n+  }\n+\n+  public char getChar ()\n+  {\n+    throw new Error (\"Not implemented\");\n+  }\n+\n+  public char getChar (int index)\n+  {\n+    throw new Error (\"Not implemented\");\n+  }\n+\n+  public ByteBuffer putChar (char value)\n+  {\n+    throw new Error (\"Not implemented\");\n+  }\n+\n+  public ByteBuffer putChar (int index, char value)\n+  {\n+    throw new Error (\"Not implemented\");\n+  }\n+\n+  public double getDouble ()\n+  {\n+    throw new Error (\"Not implemented\");\n+  }\n+\n+  public double getDouble (int index)\n+  {\n+    throw new Error (\"Not implemented\");\n+  }\n+\n+  public ByteBuffer putDouble (double value)\n+  {\n+    throw new Error (\"Not implemented\");\n+  }\n+\n+  public ByteBuffer putDouble (int index, double value)\n+  {\n+    throw new Error (\"Not implemented\");\n+  }\n+\n+  public float getFloat ()\n+  {\n+    throw new Error (\"Not implemented\");\n+  }\n+\n+  public float getFloat (int index)\n+  {\n+    throw new Error (\"Not implemented\");\n+  }\n+\n+  public ByteBuffer putFloat (float value)\n+  {\n+    throw new Error (\"Not implemented\");\n+  }\n+\n+  public ByteBuffer putFloat (int index, float value)\n+  {\n+    throw new Error (\"Not implemented\");\n+  }\n+\n+  public int getInt ()\n+  {\n+    throw new Error (\"Not implemented\");\n+  }\n+\n+  public int getInt (int index)\n+  {\n+    throw new Error (\"Not implemented\");\n+  }\n+\n+  public ByteBuffer putInt (int value)\n+  {\n+    throw new Error (\"Not implemented\");\n+  }\n+\n+  public ByteBuffer putInt (int index, int value)\n+  {\n+    throw new Error (\"Not implemented\");\n+  }\n+\n+  public long getLong ()\n+  {\n+    throw new Error (\"Not implemented\");\n+  }\n+\n+  public long getLong (int index)\n+  {\n+    throw new Error (\"Not implemented\");\n+  }\n+\n+  public ByteBuffer putLong (long value)\n+  {\n+    throw new Error (\"Not implemented\");\n+  }\n+\n+  public ByteBuffer putLong (int index, long value)\n+  {\n+    throw new Error (\"Not implemented\");\n+  }\n+\n+  public short getShort ()\n+  {\n+    throw new Error (\"Not implemented\");\n+  }\n+\n+  public short getShort (int index)\n+  {\n+    throw new Error (\"Not implemented\");\n+  }\n+\n+  public ByteBuffer putShort (short value)\n+  {\n+    throw new Error (\"Not implemented\");\n+  }\n+\n+  public ByteBuffer putShort (int index, short value)\n+  {\n+    throw new Error (\"Not implemented\");\n+  }\n+}"}]}