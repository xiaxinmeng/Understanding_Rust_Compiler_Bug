{"sha": "126f7aecdcdf1bf3044e0a0165324ed3ce258a78", "node_id": "C_kwDOANBUbNoAKDEyNmY3YWVjZGNkZjFiZjMwNDRlMGEwMTY1MzI0ZWQzY2UyNThhNzg", "commit": {"author": {"name": "Arthur Cohen", "email": "arthur.cohen@embecosm.com", "date": "2022-04-14T08:49:19Z"}, "committer": {"name": "Arthur Cohen", "email": "arthur.cohen@embecosm.com", "date": "2022-04-14T08:49:19Z"}, "message": "hir: Add `EnumItemKind` enum for EnumItem classes", "tree": {"sha": "4e1bc4daf08c17d61f032c5125cfb8fd2825df6b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4e1bc4daf08c17d61f032c5125cfb8fd2825df6b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/126f7aecdcdf1bf3044e0a0165324ed3ce258a78", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/126f7aecdcdf1bf3044e0a0165324ed3ce258a78", "html_url": "https://github.com/Rust-GCC/gccrs/commit/126f7aecdcdf1bf3044e0a0165324ed3ce258a78", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/126f7aecdcdf1bf3044e0a0165324ed3ce258a78/comments", "author": {"login": "CohenArthur", "id": 43524065, "node_id": "MDQ6VXNlcjQzNTI0MDY1", "avatar_url": "https://avatars.githubusercontent.com/u/43524065?v=4", "gravatar_id": "", "url": "https://api.github.com/users/CohenArthur", "html_url": "https://github.com/CohenArthur", "followers_url": "https://api.github.com/users/CohenArthur/followers", "following_url": "https://api.github.com/users/CohenArthur/following{/other_user}", "gists_url": "https://api.github.com/users/CohenArthur/gists{/gist_id}", "starred_url": "https://api.github.com/users/CohenArthur/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/CohenArthur/subscriptions", "organizations_url": "https://api.github.com/users/CohenArthur/orgs", "repos_url": "https://api.github.com/users/CohenArthur/repos", "events_url": "https://api.github.com/users/CohenArthur/events{/privacy}", "received_events_url": "https://api.github.com/users/CohenArthur/received_events", "type": "User", "site_admin": false}, "committer": {"login": "CohenArthur", "id": 43524065, "node_id": "MDQ6VXNlcjQzNTI0MDY1", "avatar_url": "https://avatars.githubusercontent.com/u/43524065?v=4", "gravatar_id": "", "url": "https://api.github.com/users/CohenArthur", "html_url": "https://github.com/CohenArthur", "followers_url": "https://api.github.com/users/CohenArthur/followers", "following_url": "https://api.github.com/users/CohenArthur/following{/other_user}", "gists_url": "https://api.github.com/users/CohenArthur/gists{/gist_id}", "starred_url": "https://api.github.com/users/CohenArthur/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/CohenArthur/subscriptions", "organizations_url": "https://api.github.com/users/CohenArthur/orgs", "repos_url": "https://api.github.com/users/CohenArthur/repos", "events_url": "https://api.github.com/users/CohenArthur/events{/privacy}", "received_events_url": "https://api.github.com/users/CohenArthur/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "71f2cd57c6fed5d01c56858800bc17cb68a9ac38", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/71f2cd57c6fed5d01c56858800bc17cb68a9ac38", "html_url": "https://github.com/Rust-GCC/gccrs/commit/71f2cd57c6fed5d01c56858800bc17cb68a9ac38"}], "stats": {"total": 43, "additions": 41, "deletions": 2}, "files": [{"sha": "a996228ce31543c15dc353c5de5e87901e549c39", "filename": "gcc/rust/hir/tree/rust-hir-full-test.cc", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/126f7aecdcdf1bf3044e0a0165324ed3ce258a78/gcc%2Frust%2Fhir%2Ftree%2Frust-hir-full-test.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/126f7aecdcdf1bf3044e0a0165324ed3ce258a78/gcc%2Frust%2Fhir%2Ftree%2Frust-hir-full-test.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fhir%2Ftree%2Frust-hir-full-test.cc?ref=126f7aecdcdf1bf3044e0a0165324ed3ce258a78", "patch": "@@ -3108,6 +3108,22 @@ EnumItem::as_string () const\n {\n   std::string str = Item::as_string ();\n   str += variant_name;\n+  str += \" \";\n+  switch (get_enum_item_kind ())\n+    {\n+    case Named:\n+      str += \"[Named variant]\";\n+      break;\n+    case Tuple:\n+      str += \"[Tuple variant]\";\n+      break;\n+    case Struct:\n+      str += \"[Struct variant]\";\n+      break;\n+    case Discriminant:\n+      str += \"[Discriminant variant]\";\n+      break;\n+    }\n \n   return str;\n }"}, {"sha": "2f696307cfec13a37dcc003bb90085e165b7cc5f", "filename": "gcc/rust/hir/tree/rust-hir-item.h", "status": "modified", "additions": 25, "deletions": 2, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/126f7aecdcdf1bf3044e0a0165324ed3ce258a78/gcc%2Frust%2Fhir%2Ftree%2Frust-hir-item.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/126f7aecdcdf1bf3044e0a0165324ed3ce258a78/gcc%2Frust%2Fhir%2Ftree%2Frust-hir-item.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fhir%2Ftree%2Frust-hir-item.h?ref=126f7aecdcdf1bf3044e0a0165324ed3ce258a78", "patch": "@@ -1588,7 +1588,7 @@ struct TupleField\n \n   std::string as_string () const;\n \n-  Analysis::NodeMapping get_mappings () { return mappings; }\n+  Analysis::NodeMapping get_mappings () const { return mappings; }\n \n   Location get_locus () const { return locus; }\n \n@@ -1644,12 +1644,19 @@ class TupleStruct : public Struct\n class EnumItem : public Item\n {\n   Identifier variant_name;\n-\n   Location locus;\n \n public:\n   virtual ~EnumItem () {}\n \n+  enum EnumItemKind\n+  {\n+    Named,\n+    Tuple,\n+    Struct,\n+    Discriminant,\n+  };\n+\n   EnumItem (Analysis::NodeMapping mappings, Identifier variant_name,\n \t    AST::AttrVec outer_attrs, Location locus)\n     : Item (std::move (mappings), std::move (outer_attrs)),\n@@ -1663,6 +1670,7 @@ class EnumItem : public Item\n   }\n \n   virtual std::string as_string () const override;\n+  virtual EnumItemKind get_enum_item_kind () const { return Named; };\n \n   // not pure virtual as not abstract\n   void accept_vis (HIRFullVisitor &vis) override;\n@@ -1687,6 +1695,11 @@ class EnumItemTuple : public EnumItem\n   // Returns whether tuple enum item has tuple fields.\n   bool has_tuple_fields () const { return !tuple_fields.empty (); }\n \n+  EnumItemKind get_enum_item_kind () const override\n+  {\n+    return EnumItemKind::Tuple;\n+  }\n+\n   EnumItemTuple (Analysis::NodeMapping mappings, Identifier variant_name,\n \t\t std::vector<TupleField> tuple_fields, AST::AttrVec outer_attrs,\n \t\t Location locus)\n@@ -1720,6 +1733,11 @@ class EnumItemStruct : public EnumItem\n   // Returns whether struct enum item has struct fields.\n   bool has_struct_fields () const { return !struct_fields.empty (); }\n \n+  EnumItemKind get_enum_item_kind () const override\n+  {\n+    return EnumItemKind::Struct;\n+  }\n+\n   EnumItemStruct (Analysis::NodeMapping mappings, Identifier variant_name,\n \t\t  std::vector<StructField> struct_fields,\n \t\t  AST::AttrVec outer_attrs, Location locus)\n@@ -1777,6 +1795,11 @@ class EnumItemDiscriminant : public EnumItem\n   EnumItemDiscriminant (EnumItemDiscriminant &&other) = default;\n   EnumItemDiscriminant &operator= (EnumItemDiscriminant &&other) = default;\n \n+  EnumItemKind get_enum_item_kind () const override\n+  {\n+    return EnumItemKind::Discriminant;\n+  }\n+\n   std::string as_string () const override;\n \n   void accept_vis (HIRFullVisitor &vis) override;"}]}