{"sha": "752b602fede7017f745d81d78d80ecc1bec25b0d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzUyYjYwMmZlZGU3MDE3Zjc0NWQ4MWQ3OGQ4MGVjYzFiZWMyNWIwZA==", "commit": {"author": {"name": "Hans-Peter Nilsson", "email": "hp@axis.com", "date": "2005-12-23T00:45:36Z"}, "committer": {"name": "Hans-Peter Nilsson", "email": "hp@gcc.gnu.org", "date": "2005-12-23T00:45:36Z"}, "message": "re PR target/24342 (testsuite failure:gfortran.fortran-torture/execute/in-pack.f90 exe)\n\n\tPR target/24342\n\t* config/cris/cris.c (cris_split_movdx): Add REG_INC notes for\n\temitted insns with post-increments.\n\t(cris_expand_epilogue): Ditto.\n\nFrom-SVN: r108998", "tree": {"sha": "fb1638851f30841777f983cdb3aedecd9f68b2fa", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/fb1638851f30841777f983cdb3aedecd9f68b2fa"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/752b602fede7017f745d81d78d80ecc1bec25b0d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/752b602fede7017f745d81d78d80ecc1bec25b0d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/752b602fede7017f745d81d78d80ecc1bec25b0d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/752b602fede7017f745d81d78d80ecc1bec25b0d/comments", "author": {"login": "hpataxisdotcom", "id": 80339731, "node_id": "MDQ6VXNlcjgwMzM5NzMx", "avatar_url": "https://avatars.githubusercontent.com/u/80339731?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hpataxisdotcom", "html_url": "https://github.com/hpataxisdotcom", "followers_url": "https://api.github.com/users/hpataxisdotcom/followers", "following_url": "https://api.github.com/users/hpataxisdotcom/following{/other_user}", "gists_url": "https://api.github.com/users/hpataxisdotcom/gists{/gist_id}", "starred_url": "https://api.github.com/users/hpataxisdotcom/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hpataxisdotcom/subscriptions", "organizations_url": "https://api.github.com/users/hpataxisdotcom/orgs", "repos_url": "https://api.github.com/users/hpataxisdotcom/repos", "events_url": "https://api.github.com/users/hpataxisdotcom/events{/privacy}", "received_events_url": "https://api.github.com/users/hpataxisdotcom/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "a0274e3e23a38ee21e35b50e778bb1107322b762", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a0274e3e23a38ee21e35b50e778bb1107322b762", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a0274e3e23a38ee21e35b50e778bb1107322b762"}], "stats": {"total": 115, "additions": 98, "deletions": 17}, "files": [{"sha": "0906088fb59c8c776e9acb799011fb3790752f03", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/752b602fede7017f745d81d78d80ecc1bec25b0d/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/752b602fede7017f745d81d78d80ecc1bec25b0d/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=752b602fede7017f745d81d78d80ecc1bec25b0d", "patch": "@@ -1,3 +1,10 @@\n+2005-12-23  Hans-Peter Nilsson  <hp@axis.com>\n+\n+\tPR target/24342\n+\t* config/cris/cris.c (cris_split_movdx): Add REG_INC notes for\n+\temitted insns with post-increments.\n+\t(cris_expand_epilogue): Ditto.\n+\n 2005-12-22  Jakub Jelinek  <jakub@redhat.com>\n \t    Richard Henderson  <rth@redhat.com>\n "}, {"sha": "63b5ba71d1f08e8ecd3fa91fa4177313e75f7750", "filename": "gcc/config/cris/cris.c", "status": "modified", "additions": 91, "deletions": 17, "changes": 108, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/752b602fede7017f745d81d78d80ecc1bec25b0d/gcc%2Fconfig%2Fcris%2Fcris.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/752b602fede7017f745d81d78d80ecc1bec25b0d/gcc%2Fconfig%2Fcris%2Fcris.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fcris%2Fcris.c?ref=752b602fede7017f745d81d78d80ecc1bec25b0d", "patch": "@@ -2353,12 +2353,31 @@ cris_split_movdx (rtx *operands)\n \n           if (GET_CODE (addr) == POST_INC)\n \t    {\n-\t      emit_insn (gen_rtx_SET (VOIDmode,\n-\t\t\t\t      operand_subword (dest, 0, TRUE, mode),\n-\t\t\t\t      change_address (src, SImode, addr)));\n-\t      emit_insn (gen_rtx_SET (VOIDmode,\n-\t\t\t\t      operand_subword (dest, 1, TRUE, mode),\n-\t\t\t\t      change_address (src, SImode, addr)));\n+\t      rtx mem;\n+\t      rtx insn;\n+\n+\t      /* Whenever we emit insns with post-incremented\n+\t\t addresses ourselves, we must add a post-inc note\n+\t\t manually.  */\n+\t      mem = change_address (src, SImode, addr);\n+\t      insn\n+\t\t= gen_rtx_SET (VOIDmode,\n+\t\t\t       operand_subword (dest, 0, TRUE, mode), mem);\n+\t      insn = emit_insn (insn);\n+\t      if (GET_CODE (XEXP (mem, 0)) == POST_INC)\n+\t\tREG_NOTES (insn)\n+\t\t  = alloc_EXPR_LIST (REG_INC, XEXP (XEXP (mem, 0), 0),\n+\t\t\t\t     REG_NOTES (insn));\n+\n+\t      mem = change_address (src, SImode, addr);\n+\t      insn\n+\t\t= gen_rtx_SET (VOIDmode,\n+\t\t\t       operand_subword (dest, 1, TRUE, mode), mem);\n+\t      insn = emit_insn (insn);\n+\t      if (GET_CODE (XEXP (mem, 0)) == POST_INC)\n+\t\tREG_NOTES (insn)\n+\t\t  = alloc_EXPR_LIST (REG_INC, XEXP (XEXP (mem, 0), 0),\n+\t\t\t\t     REG_NOTES (insn));\n \t    }\n \t  else\n \t    {\n@@ -2399,12 +2418,31 @@ cris_split_movdx (rtx *operands)\n \n       if (GET_CODE (addr) == POST_INC)\n \t{\n-\t  emit_insn (gen_rtx_SET (VOIDmode,\n-\t\t\t\t  change_address (dest, SImode, addr),\n-\t\t\t\t  operand_subword (src, 0, TRUE, mode)));\n-\t  emit_insn (gen_rtx_SET (VOIDmode,\n-\t\t\t\t  change_address (dest, SImode, addr),\n-\t\t\t\t  operand_subword (src, 1, TRUE, mode)));\n+\t  rtx mem;\n+\t  rtx insn;\n+\t  \n+\t  /* Whenever we emit insns with post-incremented addresses\n+\t     ourselves, we must add a post-inc note manually.  */\n+\t  mem = change_address (dest, SImode, addr);\n+\t  insn\n+\t    = gen_rtx_SET (VOIDmode,\n+\t\t\t   mem, operand_subword (src, 0, TRUE, mode));\n+\t  insn = emit_insn (insn);\n+\t  if (GET_CODE (XEXP (mem, 0)) == POST_INC)\n+\t    REG_NOTES (insn)\n+\t      = alloc_EXPR_LIST (REG_INC, XEXP (XEXP (mem, 0), 0),\n+\t\t\t\t REG_NOTES (insn));\n+\n+\t  mem = change_address (dest, SImode, addr);\n+\t  insn\n+\t    = gen_rtx_SET (VOIDmode,\n+\t\t\t   mem,\n+\t\t\t   operand_subword (src, 1, TRUE, mode));\n+\t  insn = emit_insn (insn);\n+\t  if (GET_CODE (XEXP (mem, 0)) == POST_INC)\n+\t    REG_NOTES (insn)\n+\t      = alloc_EXPR_LIST (REG_INC, XEXP (XEXP (mem, 0), 0),\n+\t\t\t\t REG_NOTES (insn));\n \t}\n       else\n \t{\n@@ -2780,6 +2818,8 @@ cris_expand_epilogue (void)\n        regno--)\n     if (cris_reg_saved_in_regsave_area (regno, got_really_used))\n       {\n+\trtx insn;\n+\n \tif (argspace_offset)\n \t  {\n \t    /* There is an area for outgoing parameters located before\n@@ -2795,12 +2835,19 @@ cris_expand_epilogue (void)\n \tmem = gen_rtx_MEM (SImode, gen_rtx_POST_INC (SImode,\n \t\t\t\t\t\t     stack_pointer_rtx));\n \tset_mem_alias_set (mem, get_frame_alias_set ());\n-\temit_move_insn (gen_rtx_raw_REG (SImode, regno), mem);\n+\tinsn = emit_move_insn (gen_rtx_raw_REG (SImode, regno), mem);\n+\n+\t/* Whenever we emit insns with post-incremented addresses\n+\t   ourselves, we must add a post-inc note manually.  */\n+\tREG_NOTES (insn)\n+\t  = alloc_EXPR_LIST (REG_INC, stack_pointer_rtx, REG_NOTES (insn));\n       }\n \n   /* If we have any movem-restore, do it now.  */\n   if (last_movem_reg != -1)\n     {\n+      rtx insn;\n+\n       if (argspace_offset)\n \t{\n \t  emit_insn (gen_rtx_SET (VOIDmode,\n@@ -2813,7 +2860,14 @@ cris_expand_epilogue (void)\n       mem = gen_rtx_MEM (SImode,\n \t\t\t gen_rtx_POST_INC (SImode, stack_pointer_rtx));\n       set_mem_alias_set (mem, get_frame_alias_set ());\n-      emit_insn (cris_gen_movem_load (mem, GEN_INT (last_movem_reg + 1), 0));\n+      insn\n+\t= emit_insn (cris_gen_movem_load (mem,\n+\t\t\t\t\t  GEN_INT (last_movem_reg + 1), 0));\n+      /* Whenever we emit insns with post-incremented addresses\n+\t ourselves, we must add a post-inc note manually.  */\n+      if (side_effects_p (PATTERN (insn)))\n+\tREG_NOTES (insn)\n+\t  = alloc_EXPR_LIST (REG_INC, stack_pointer_rtx, REG_NOTES (insn));\n     }\n \n   /* If we don't clobber all of the allocated stack area (we've already\n@@ -2829,13 +2883,20 @@ cris_expand_epilogue (void)\n   /* Restore frame pointer if necessary.  */\n   if (frame_pointer_needed)\n     {\n+      rtx insn;\n+\n       emit_insn (gen_cris_frame_deallocated_barrier ());\n \n       emit_move_insn (stack_pointer_rtx, frame_pointer_rtx);\n       mem = gen_rtx_MEM (SImode, gen_rtx_POST_INC (SImode,\n \t\t\t\t\t\t   stack_pointer_rtx));\n       set_mem_alias_set (mem, get_frame_alias_set ());\n-      emit_move_insn (frame_pointer_rtx, mem);\n+      insn = emit_move_insn (frame_pointer_rtx, mem);\n+\n+      /* Whenever we emit insns with post-incremented addresses\n+\t ourselves, we must add a post-inc note manually.  */\n+      REG_NOTES (insn)\n+\t= alloc_EXPR_LIST (REG_INC, stack_pointer_rtx, REG_NOTES (insn));\n     }\n   else if ((size + argspace_offset) != 0)\n     {\n@@ -2861,12 +2922,18 @@ cris_expand_epilogue (void)\n       if (current_function_calls_eh_return)\n \t{\n \t  rtx mem;\n+\t  rtx insn;\n \t  rtx srpreg = gen_rtx_raw_REG (SImode, CRIS_SRP_REGNUM);\n \t  mem = gen_rtx_MEM (SImode,\n \t\t\t     gen_rtx_POST_INC (SImode,\n \t\t\t\t\t       stack_pointer_rtx));\n \t  set_mem_alias_set (mem, get_frame_alias_set ());\n-\t  emit_move_insn (srpreg, mem);\n+\t  insn = emit_move_insn (srpreg, mem);\n+\n+\t  /* Whenever we emit insns with post-incremented addresses\n+\t     ourselves, we must add a post-inc note manually.  */\n+\t  REG_NOTES (insn)\n+\t    = alloc_EXPR_LIST (REG_INC, stack_pointer_rtx, REG_NOTES (insn));\n \n \t  emit_insn (gen_addsi3 (stack_pointer_rtx,\n \t\t\t\t stack_pointer_rtx,\n@@ -2889,11 +2956,18 @@ cris_expand_epilogue (void)\n \t{\n \t  rtx mem;\n \t  rtx srpreg = gen_rtx_raw_REG (SImode, CRIS_SRP_REGNUM);\n+\t  rtx insn;\n+\n \t  mem = gen_rtx_MEM (SImode,\n \t\t\t     gen_rtx_POST_INC (SImode,\n \t\t\t\t\t       stack_pointer_rtx));\n \t  set_mem_alias_set (mem, get_frame_alias_set ());\n-\t  emit_move_insn (srpreg, mem);\n+\t  insn = emit_move_insn (srpreg, mem);\n+\n+\t  /* Whenever we emit insns with post-incremented addresses\n+\t     ourselves, we must add a post-inc note manually.  */\n+\t  REG_NOTES (insn)\n+\t    = alloc_EXPR_LIST (REG_INC, stack_pointer_rtx, REG_NOTES (insn));\n \t}\n \n       emit_insn (gen_rtx_SET (VOIDmode,"}]}