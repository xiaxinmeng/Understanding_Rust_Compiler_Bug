{"sha": "283b768c860d632cb50af82a459a9f4c985f3cbf", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjgzYjc2OGM4NjBkNjMyY2I1MGFmODJhNDU5YTlmNGM5ODVmM2NiZg==", "commit": {"author": {"name": "John David Anglin", "email": "danglin@gcc.gnu.org", "date": "2015-02-20T00:33:24Z"}, "committer": {"name": "John David Anglin", "email": "danglin@gcc.gnu.org", "date": "2015-02-20T00:33:24Z"}, "message": "pa.c (pa_emit_move_sequence): Always force (const (plus (symbol) (const_int))) to const mem.\n\n\t* config/pa/pa.c (pa_emit_move_sequence): Always force\n\t(const (plus (symbol) (const_int))) to const mem.  Put REG_EQUAL\n\tnote on insn.\n\nFrom-SVN: r220833", "tree": {"sha": "9b0325cc8820c69c2f665d7ce9701f0a9ba47f02", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9b0325cc8820c69c2f665d7ce9701f0a9ba47f02"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/283b768c860d632cb50af82a459a9f4c985f3cbf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/283b768c860d632cb50af82a459a9f4c985f3cbf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/283b768c860d632cb50af82a459a9f4c985f3cbf", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/283b768c860d632cb50af82a459a9f4c985f3cbf/comments", "author": null, "committer": null, "parents": [{"sha": "6e6938b476f5fb298cdb5d1c71d41cec8f352515", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6e6938b476f5fb298cdb5d1c71d41cec8f352515", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6e6938b476f5fb298cdb5d1c71d41cec8f352515"}], "stats": {"total": 33, "additions": 20, "deletions": 13}, "files": [{"sha": "f36328e673dfd4f97e9acb199ea0838474fe9037", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/283b768c860d632cb50af82a459a9f4c985f3cbf/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/283b768c860d632cb50af82a459a9f4c985f3cbf/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=283b768c860d632cb50af82a459a9f4c985f3cbf", "patch": "@@ -1,4 +1,8 @@\n-2015-02-19  John David Anglin  <danglin@gcc.gnu.org>\n+2015-02-19  John David Anglin  <danlgin@gcc.gnu.org>\n+\n+\t* config/pa/pa.c (pa_emit_move_sequence): Always force\n+\t(const (plus (symbol) (const_int))) to const mem.  Put REG_EQUAL\n+\tnote on insn.\n \n \t* config/pa/pa.c (pa_reloc_rw_mask): New function.\n \t(TARGET_ASM_RELOC_RW_MASK): Define."}, {"sha": "2f2735c7c44e9735ab46abb1b48af93652541a68", "filename": "gcc/config/pa/pa.c", "status": "modified", "additions": 15, "deletions": 12, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/283b768c860d632cb50af82a459a9f4c985f3cbf/gcc%2Fconfig%2Fpa%2Fpa.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/283b768c860d632cb50af82a459a9f4c985f3cbf/gcc%2Fconfig%2Fpa%2Fpa.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Fpa.c?ref=283b768c860d632cb50af82a459a9f4c985f3cbf", "patch": "@@ -2008,6 +2008,7 @@ pa_emit_move_sequence (rtx *operands, machine_mode mode, rtx scratch_reg)\n \n \t  if (flag_pic)\n \t    {\n+\t      rtx_insn *insn;\n \t      rtx temp;\n \n \t      if (reload_in_progress || reload_completed)\n@@ -2021,29 +2022,31 @@ pa_emit_move_sequence (rtx *operands, machine_mode mode, rtx scratch_reg)\n \t      else\n \t\ttemp = gen_reg_rtx (Pmode);\n \n-\t      /* (const (plus (symbol) (const_int))) must be forced to\n-\t\t memory during/after reload if the const_int will not fit\n-\t\t in 14 bits.  */\n+\t      /* Force (const (plus (symbol) (const_int))) to memory\n+\t         if the const_int will not fit in 14 bits.  Although\n+\t\t this requires a relocation, the instruction sequence\n+\t\t needed to load the value is shorter.  */\n \t      if (GET_CODE (operand1) == CONST\n \t\t       && GET_CODE (XEXP (operand1, 0)) == PLUS\n \t\t       && GET_CODE (XEXP (XEXP (operand1, 0), 1)) == CONST_INT\n-\t\t       && !INT_14_BITS (XEXP (XEXP (operand1, 0), 1))\n-\t\t       && (reload_completed || reload_in_progress)\n-\t\t       && flag_pic)\n+\t\t       && !INT_14_BITS (XEXP (XEXP (operand1, 0), 1)))\n \t\t{\n-\t\t  rtx const_mem = force_const_mem (mode, operand1);\n-\t\t  operands[1] = legitimize_pic_address (XEXP (const_mem, 0),\n-\t\t\t\t\t\t\tmode, temp);\n-\t\t  operands[1] = replace_equiv_address (const_mem, operands[1]);\n-\t\t  pa_emit_move_sequence (operands, mode, temp);\n+\t\t  rtx x, m = force_const_mem (mode, operand1);\n+\n+\t\t  x = legitimize_pic_address (XEXP (m, 0), mode, temp);\n+\t\t  x = replace_equiv_address (m, x);\n+\t\t  insn = emit_move_insn (operand0, x);\n \t\t}\n \t      else\n \t\t{\n \t\t  operands[1] = legitimize_pic_address (operand1, mode, temp);\n \t\t  if (REG_P (operand0) && REG_P (operands[1]))\n \t\t    copy_reg_pointer (operand0, operands[1]);\n-\t\t  emit_insn (gen_rtx_SET (VOIDmode, operand0, operands[1]));\n+\t\t  insn = emit_move_insn (operand0, operands[1]);\n \t\t}\n+\n+\t      /* Put a REG_EQUAL note on this insn.  */\n+\t      set_unique_reg_note (insn, REG_EQUAL, operand1);\n \t    }\n \t  /* On the HPPA, references to data space are supposed to use dp,\n \t     register 27, but showing it in the RTL inhibits various cse"}]}