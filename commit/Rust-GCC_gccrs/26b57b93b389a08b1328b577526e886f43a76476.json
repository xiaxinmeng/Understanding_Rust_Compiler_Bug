{"sha": "26b57b93b389a08b1328b577526e886f43a76476", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjZiNTdiOTNiMzg5YTA4YjEzMjhiNTc3NTI2ZTg4NmY0M2E3NjQ3Ng==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2018-12-13T08:08:22Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2018-12-13T08:08:22Z"}, "message": "re PR target/88465 (AVX512: optimize loading of constant values to kN registers)\n\n\tPR target/88465\n\t* config/i386/i386.md (*movdi_internal, *movsi_internal,\n\t*movhi_internal, *movqi_internal): Add alternative(s) to load\n\t0 or -1 into k registers using kxor or kxnoq instructions.\n\n\t* gcc.target/i386/avx512f-pr88465.c: New test.\n\t* gcc.target/i386/avx512dq-pr88465.c: New test.\n\nFrom-SVN: r267078", "tree": {"sha": "ff355b1d936ae7356f46b61c77fceffecf548990", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ff355b1d936ae7356f46b61c77fceffecf548990"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/26b57b93b389a08b1328b577526e886f43a76476", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/26b57b93b389a08b1328b577526e886f43a76476", "html_url": "https://github.com/Rust-GCC/gccrs/commit/26b57b93b389a08b1328b577526e886f43a76476", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/26b57b93b389a08b1328b577526e886f43a76476/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "e00199d7b78ccff66112b17b8c9bb07f67f40e66", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e00199d7b78ccff66112b17b8c9bb07f67f40e66", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e00199d7b78ccff66112b17b8c9bb07f67f40e66"}], "stats": {"total": 112, "additions": 100, "deletions": 12}, "files": [{"sha": "a88ec3269536810c195a778614ac1365e33bc53a", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/26b57b93b389a08b1328b577526e886f43a76476/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/26b57b93b389a08b1328b577526e886f43a76476/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=26b57b93b389a08b1328b577526e886f43a76476", "patch": "@@ -1,5 +1,10 @@\n 2018-12-13  Jakub Jelinek  <jakub@redhat.com>\n \n+\tPR target/88465\n+\t* config/i386/i386.md (*movdi_internal, *movsi_internal,\n+\t*movhi_internal, *movqi_internal): Add alternative(s) to load\n+\t0 or -1 into k registers using kxor or kxnoq instructions.\n+\n \tPR target/88461\n \t* config/i386/sse.md (VI1248_AVX512VLBW, AVX512ZEXTMASK): New\n \tmode iterators."}, {"sha": "5e46bdcdd37478941535f7a54fb1c770ea1b75d4", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 56, "deletions": 12, "changes": 68, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/26b57b93b389a08b1328b577526e886f43a76476/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/26b57b93b389a08b1328b577526e886f43a76476/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=26b57b93b389a08b1328b577526e886f43a76476", "patch": "@@ -2056,16 +2056,23 @@\n \n (define_insn \"*movdi_internal\"\n   [(set (match_operand:DI 0 \"nonimmediate_operand\"\n-    \"=r  ,o  ,r,r  ,r,m ,*y,*y,?*y,?m,?r,?*y,*v,*v,*v,m ,m,?r ,?*Yd,?r,?*v,?*y,?*x,*k,*k ,*r,*m\")\n+    \"=r  ,o  ,r,r  ,r,m ,*y,*y,?*y,?m,?r,?*y,*v,*v,*v,m ,m,?r ,?*Yd,?r,?*v,?*y,?*x,*k,*k ,*r,*m,*k\")\n \t(match_operand:DI 1 \"general_operand\"\n-    \"riFo,riF,Z,rem,i,re,C ,*y,m  ,*y,*y,r  ,C ,*v,m ,*v,v,*Yd,r   ,*v,r  ,*x ,*y ,*r,*km,*k,*k\"))]\n+    \"riFo,riF,Z,rem,i,re,C ,*y,m  ,*y,*y,r  ,C ,*v,m ,*v,v,*Yd,r   ,*v,r  ,*x ,*y ,*r,*km,*k,*k,CBC\"))]\n   \"!(MEM_P (operands[0]) && MEM_P (operands[1]))\"\n {\n   switch (get_attr_type (insn))\n     {\n     case TYPE_MSKMOV:\n       return \"kmovq\\t{%1, %0|%0, %1}\";\n \n+    case TYPE_MSKLOG:\n+      if (operands[1] == const0_rtx)\n+\treturn \"kxorq\\t%0, %0, %0\";\n+      else if (operands[1] == constm1_rtx)\n+\treturn \"kxnorq\\t%0, %0, %0\";\n+      gcc_unreachable ();\n+\n     case TYPE_MULTI:\n       return \"#\";\n \n@@ -2159,6 +2166,8 @@\n \t      (const_string \"ssecvt\")\n \t    (eq_attr \"alternative\" \"23,24,25,26\")\n \t      (const_string \"mskmov\")\n+\t    (eq_attr \"alternative\" \"27\")\n+\t      (const_string \"msklog\")\n \t    (and (match_operand 0 \"register_operand\")\n \t\t (match_operand 1 \"pic_32bit_operand\"))\n \t      (const_string \"lea\")\n@@ -2296,9 +2305,9 @@\n \n (define_insn \"*movsi_internal\"\n   [(set (match_operand:SI 0 \"nonimmediate_operand\"\n-    \"=r,m ,*y,*y,?*y,?m,?r,?*y,*v,*v,*v,m ,?r,?*v,*k,*k ,*rm\")\n+    \"=r,m ,*y,*y,?*y,?m,?r,?*y,*v,*v,*v,m ,?r,?*v,*k,*k ,*rm,*k\")\n \t(match_operand:SI 1 \"general_operand\"\n-    \"g ,re,C ,*y,m  ,*y,*y,r  ,C ,*v,m ,*v,*v,r  ,*r,*km,*k\"))]\n+    \"g ,re,C ,*y,m  ,*y,*y,r  ,C ,*v,m ,*v,*v,r  ,*r,*km,*k ,CBC\"))]\n   \"!(MEM_P (operands[0]) && MEM_P (operands[1]))\"\n {\n   switch (get_attr_type (insn))\n@@ -2309,6 +2318,13 @@\n     case TYPE_MSKMOV:\n       return \"kmovd\\t{%1, %0|%0, %1}\";\n \n+    case TYPE_MSKLOG:\n+      if (operands[1] == const0_rtx)\n+\treturn \"kxord\\t%0, %0, %0\";\n+      else if (operands[1] == constm1_rtx)\n+\treturn \"kxnord\\t%0, %0, %0\";\n+      gcc_unreachable ();\n+\n     case TYPE_SSEMOV:\n       switch (get_attr_mode (insn))\n \t{\n@@ -2375,6 +2391,8 @@\n \t      (const_string \"ssemov\")\n \t    (eq_attr \"alternative\" \"14,15,16\")\n \t      (const_string \"mskmov\")\n+\t    (eq_attr \"alternative\" \"17\")\n+\t      (const_string \"msklog\")\n \t    (and (match_operand 0 \"register_operand\")\n \t\t (match_operand 1 \"pic_32bit_operand\"))\n \t      (const_string \"lea\")\n@@ -2419,8 +2437,8 @@\n \t   (symbol_ref \"true\")))])\n \n (define_insn \"*movhi_internal\"\n-  [(set (match_operand:HI 0 \"nonimmediate_operand\" \"=r,r ,r ,m ,k,k ,r,m\")\n-\t(match_operand:HI 1 \"general_operand\"      \"r ,rn,rm,rn,r,km,k,k\"))]\n+  [(set (match_operand:HI 0 \"nonimmediate_operand\" \"=r,r ,r ,m ,k,k ,r,m,k\")\n+\t(match_operand:HI 1 \"general_operand\"      \"r ,rn,rm,rn,r,km,k,k,CBC\"))]\n   \"!(MEM_P (operands[0]) && MEM_P (operands[1]))\"\n {\n   switch (get_attr_type (insn))\n@@ -2444,6 +2462,13 @@\n \t  gcc_unreachable ();\n \t}\n \n+    case TYPE_MSKLOG:\n+      if (operands[1] == const0_rtx)\n+\treturn \"kxorw\\t%0, %0, %0\";\n+      else if (operands[1] == constm1_rtx)\n+\treturn \"kxnorw\\t%0, %0, %0\";\n+      gcc_unreachable ();\n+\n     default:\n       if (get_attr_mode (insn) == MODE_SI)\n \treturn \"mov{l}\\t{%k1, %k0|%k0, %k1}\";\n@@ -2454,6 +2479,8 @@\n   [(set (attr \"type\")\n      (cond [(eq_attr \"alternative\" \"4,5,6,7\")\n \t      (const_string \"mskmov\")\n+\t    (eq_attr \"alternative\" \"8\")\n+\t      (const_string \"msklog\")\n \t    (match_test \"optimize_function_for_size_p (cfun)\")\n \t      (const_string \"imov\")\n \t    (and (eq_attr \"alternative\" \"0\")\n@@ -2469,7 +2496,7 @@\n \t   ]\n \t   (const_string \"imov\")))\n     (set (attr \"prefix\")\n-      (if_then_else (eq_attr \"alternative\" \"4,5,6,7\")\n+      (if_then_else (eq_attr \"alternative\" \"4,5,6,7,8\")\n \t(const_string \"vex\")\n \t(const_string \"orig\")))\n     (set (attr \"mode\")\n@@ -2498,9 +2525,9 @@\n \n (define_insn \"*movqi_internal\"\n   [(set (match_operand:QI 0 \"nonimmediate_operand\"\n-\t\t\t\"=Q,R,r,q,q,r,r ,?r,m ,k,k,r,m,k\")\n+\t\t\t\"=Q,R,r,q,q,r,r ,?r,m ,k,k,r,m,k,k,k\")\n \t(match_operand:QI 1 \"general_operand\"\n-\t\t\t\"Q ,R,r,n,m,q,rn, m,qn,r,k,k,k,m\"))]\n+\t\t\t\"Q ,R,r,n,m,q,rn, m,qn,r,k,k,k,m,C,BC\"))]\n   \"!(MEM_P (operands[0]) && MEM_P (operands[1]))\"\n {\n   static char buf[128];\n@@ -2538,6 +2565,21 @@\n       snprintf (buf, sizeof (buf), ops, suffix);\n       return buf;\n \n+    case TYPE_MSKLOG:\n+      if (operands[1] == const0_rtx)\n+\t{\n+\t  if (get_attr_mode (insn) == MODE_HI)\n+\t    return \"kxorw\\t%0, %0, %0\";\n+\t  else\n+\t    return \"kxorb\\t%0, %0, %0\";\n+\t}\n+      else if (operands[1] == constm1_rtx)\n+\t{\n+\t  gcc_assert (TARGET_AVX512DQ);\n+\t  return \"kxnorb\\t%0, %0, %0\";\n+\t}\n+      gcc_unreachable ();\n+\n     default:\n       if (get_attr_mode (insn) == MODE_SI)\n \treturn \"mov{l}\\t{%k1, %k0|%k0, %k1}\";\n@@ -2548,13 +2590,15 @@\n   [(set (attr \"isa\")\n      (cond [(eq_attr \"alternative\" \"1,2\")\n \t      (const_string \"x64\")\n-\t    (eq_attr \"alternative\" \"12,13\")\n+\t    (eq_attr \"alternative\" \"12,13,15\")\n \t      (const_string \"avx512dq\")\n \t   ]\n \t   (const_string \"*\")))\n    (set (attr \"type\")\n      (cond [(eq_attr \"alternative\" \"9,10,11,12,13\")\n \t      (const_string \"mskmov\")\n+\t    (eq_attr \"alternative\" \"14,15\")\n+\t      (const_string \"msklog\")\n \t    (and (eq_attr \"alternative\" \"7\")\n \t\t (not (match_operand:QI 1 \"aligned_operand\")))\n \t      (const_string \"imovx\")\n@@ -2572,15 +2616,15 @@\n \t   ]\n \t   (const_string \"imov\")))\n    (set (attr \"prefix\")\n-     (if_then_else (eq_attr \"alternative\" \"9,10,11\")\n+     (if_then_else (eq_attr \"alternative\" \"9,10,11,12,13,14,15\")\n        (const_string \"vex\")\n        (const_string \"orig\")))\n    (set (attr \"mode\")\n       (cond [(eq_attr \"alternative\" \"5,6,7\")\n \t       (const_string \"SI\")\n \t     (eq_attr \"alternative\" \"8\")\n \t       (const_string \"QI\")\n-\t     (and (eq_attr \"alternative\" \"9,10,11\")\n+\t     (and (eq_attr \"alternative\" \"9,10,11,14\")\n \t\t  (not (match_test \"TARGET_AVX512DQ\")))\n \t       (const_string \"HI\")\n \t     (eq_attr \"type\" \"imovx\")"}, {"sha": "d6901c4db36b4c4a0dd8710b09a40c3a60446ad4", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/26b57b93b389a08b1328b577526e886f43a76476/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/26b57b93b389a08b1328b577526e886f43a76476/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=26b57b93b389a08b1328b577526e886f43a76476", "patch": "@@ -1,5 +1,9 @@\n 2018-12-13  Jakub Jelinek  <jakub@redhat.com>\n \n+\tPR target/88465\n+\t* gcc.target/i386/avx512f-pr88465.c: New test.\n+\t* gcc.target/i386/avx512dq-pr88465.c: New test.\n+\n \tPR target/88461\n \t* gcc.target/i386/pr88461.c: New test.\n \t"}, {"sha": "a11fd26a44e69066716066f76e5e854ea381f255", "filename": "gcc/testsuite/gcc.target/i386/avx512dq-pr88465.c", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/26b57b93b389a08b1328b577526e886f43a76476/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512dq-pr88465.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/26b57b93b389a08b1328b577526e886f43a76476/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512dq-pr88465.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512dq-pr88465.c?ref=26b57b93b389a08b1328b577526e886f43a76476", "patch": "@@ -0,0 +1,14 @@\n+/* PR target/88465 */\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -mavx512dq -mno-avx512bw\" } */\n+/* { dg-final { scan-assembler-times \"kxorb\\[ \\t]\" 1 } } */\n+/* { dg-final { scan-assembler-times \"kxnorb\\[ \\t]\" 1 } } */\n+\n+void\n+foo (void)\n+{\n+  unsigned char k = 0;\n+  __asm volatile (\"\" : : \"k\" (k));\n+  k = -1;\n+  __asm volatile (\"\" : : \"k\" (k));\n+}"}, {"sha": "e66ea64db02f53a494b414ac8356414f75a923ae", "filename": "gcc/testsuite/gcc.target/i386/avx512f-pr88465.c", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/26b57b93b389a08b1328b577526e886f43a76476/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-pr88465.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/26b57b93b389a08b1328b577526e886f43a76476/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-pr88465.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-pr88465.c?ref=26b57b93b389a08b1328b577526e886f43a76476", "patch": "@@ -0,0 +1,21 @@\n+/* PR target/88465 */\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -mavx512f -mno-avx512dq -mno-avx512bw\" } */\n+/* { dg-final { scan-assembler-times \"kxorw\\[ \\t]\" 2 } } */\n+/* { dg-final { scan-assembler-times \"kxnorw\\[ \\t]\" 1 } } */\n+\n+void\n+foo (void)\n+{\n+  unsigned short int k = 0;\n+  __asm volatile (\"\" : : \"k\" (k));\n+  k = -1;\n+  __asm volatile (\"\" : : \"k\" (k));\n+}\n+\n+void\n+bar (void)\n+{\n+  unsigned char k = 0;\n+  __asm volatile (\"\" : : \"k\" (k));\n+}"}]}