{"sha": "4f0de5dd33ec2f8eb0aa43da72d9cc493478f077", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NGYwZGU1ZGQzM2VjMmY4ZWIwYWE0M2RhNzJkOWNjNDkzNDc4ZjA3Nw==", "commit": {"author": {"name": "Paolo Carlini", "email": "pcarlini@suse.de", "date": "2006-02-07T13:14:03Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2006-02-07T13:14:03Z"}, "message": "cmath: New.\n\n2006-02-07  Paolo Carlini  <pcarlini@suse.de>\n\n\t* include/tr1/cmath: New.\n\t* include/tr1/cstdlib: Likewise.\n\t* include/tr1/ctime: Likewise.\n\t* include/tr1/math.h: Likewise.\t\n\t* include/tr1/stdlib.h: Likewise.\n\t* include/Makefile.am: Add.\n\t* acinclude.m4 ([GLIBCXX_CHECK_C99_TR1]): Add <math.h> checks.\n\t* testsuite/tr1/8_c_compatibility/cmath/functions.cc: New.\n\t* testsuite/tr1/8_c_compatibility/cstdlib/functions.cc: Likewise.\n\t* testsuite/tr1/8_c_compatibility/cstdlib/types.cc: Likewise.\n\t* testsuite/tr1/headers.cc: Update.\t\n\n\t* include/tr1/cinttypes: Do not provide abs and div, conflicting\n\twith the above overloads for _Longlong types.\n\t* include/tr1/inttypes.h: Adjust.\n\t* testsuite/tr1/8_c_compatibility/cinttypes/functions.cc: Adjust.\n\n\t* docs/html/ext/tr1.html: Update.\n\t\n\t* testsuite/tr1/8_c_compatibility/cwchar/functions.cc: Tweak.\n\n\t* include/Makefile.in: Regenerate.\n\t* config.h.in: Likewise.\n\t* configure: Likewise.\n\nFrom-SVN: r110696", "tree": {"sha": "cc86837e8687d6a0aa23db28adf57f641ea15a85", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/cc86837e8687d6a0aa23db28adf57f641ea15a85"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4f0de5dd33ec2f8eb0aa43da72d9cc493478f077", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4f0de5dd33ec2f8eb0aa43da72d9cc493478f077", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4f0de5dd33ec2f8eb0aa43da72d9cc493478f077", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4f0de5dd33ec2f8eb0aa43da72d9cc493478f077/comments", "author": null, "committer": null, "parents": [{"sha": "88e23c503ac776ac63d93451557ac2da3939851b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/88e23c503ac776ac63d93451557ac2da3939851b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/88e23c503ac776ac63d93451557ac2da3939851b"}], "stats": {"total": 1192, "additions": 1159, "deletions": 33}, "files": [{"sha": "c35668506fc0d906fcc1fc35892f331fb88139b8", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4f0de5dd33ec2f8eb0aa43da72d9cc493478f077/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4f0de5dd33ec2f8eb0aa43da72d9cc493478f077/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=4f0de5dd33ec2f8eb0aa43da72d9cc493478f077", "patch": "@@ -1,3 +1,30 @@\n+2006-02-07  Paolo Carlini  <pcarlini@suse.de>\n+\n+\t* include/tr1/cmath: New.\n+\t* include/tr1/cstdlib: Likewise.\n+\t* include/tr1/ctime: Likewise.\n+\t* include/tr1/math.h: Likewise.\t\n+\t* include/tr1/stdlib.h: Likewise.\n+\t* include/Makefile.am: Add.\n+\t* acinclude.m4 ([GLIBCXX_CHECK_C99_TR1]): Add <math.h> checks.\n+\t* testsuite/tr1/8_c_compatibility/cmath/functions.cc: New.\n+\t* testsuite/tr1/8_c_compatibility/cstdlib/functions.cc: Likewise.\n+\t* testsuite/tr1/8_c_compatibility/cstdlib/types.cc: Likewise.\n+\t* testsuite/tr1/headers.cc: Update.\t\n+\n+\t* include/tr1/cinttypes: Do not provide abs and div, conflicting\n+\twith the above overloads for _Longlong types.\n+\t* include/tr1/inttypes.h: Adjust.\n+\t* testsuite/tr1/8_c_compatibility/cinttypes/functions.cc: Adjust.\n+\n+\t* docs/html/ext/tr1.html: Update.\n+\t\n+\t* testsuite/tr1/8_c_compatibility/cwchar/functions.cc: Tweak.\n+\n+\t* include/Makefile.in: Regenerate.\n+\t* config.h.in: Likewise.\n+\t* configure: Likewise.\n+\n 2006-02-07  Mark Mitchell  <mark@codesourcery.com>\n \n \t* testsuite/testsuite_tr1.h (test_property): New function."}, {"sha": "dc4e237968ca1893f2b2c4c52d3c9ddad120ca0b", "filename": "libstdc++-v3/acinclude.m4", "status": "modified", "additions": 118, "deletions": 0, "changes": 118, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4f0de5dd33ec2f8eb0aa43da72d9cc493478f077/libstdc%2B%2B-v3%2Facinclude.m4", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4f0de5dd33ec2f8eb0aa43da72d9cc493478f077/libstdc%2B%2B-v3%2Facinclude.m4", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Facinclude.m4?ref=4f0de5dd33ec2f8eb0aa43da72d9cc493478f077", "patch": "@@ -1181,6 +1181,124 @@ AC_DEFUN([GLIBCXX_CHECK_C99_TR1], [\n \t      <tr1/cstdint> in namespace std::tr1.])\n   fi\n \n+  # Check for the existence of <math.h> functions.\n+  AC_MSG_CHECKING([for ISO C99 support to TR1 in <math.h>])\n+  AC_CACHE_VAL(ac_c99_math_tr1, [\n+  AC_TRY_COMPILE([#include <math.h>],\n+\t         [acosh(0.0);\n+\t          acoshf(0.0f);\n+\t          acoshl(0.0l);\n+\t          asinh(0.0);\n+\t          asinhf(0.0f);\n+\t          asinhl(0.0l);\n+\t          atanh(0.0);\n+\t          atanhf(0.0f);\n+\t          atanhl(0.0l);\n+\t          cbrt(0.0);\n+\t          cbrtf(0.0f);\n+\t          cbrtl(0.0l);\n+\t          copysign(0.0, 0.0);\n+\t          copysignf(0.0f, 0.0f);\n+\t          copysignl(0.0l, 0.0l);\n+\t          erf(0.0);\n+\t          erff(0.0f);\n+\t          erfl(0.0l);\n+\t          erfc(0.0);\n+\t          erfcf(0.0f);\n+\t          erfcl(0.0l);\n+\t          exp2(0.0);\n+\t          exp2f(0.0f);\n+\t          exp2l(0.0l);\n+\t          expm1(0.0);\n+\t          expm1f(0.0f);\n+\t          expm1l(0.0l);\n+\t          fdim(0.0, 0.0);\n+\t          fdimf(0.0f, 0.0f);\n+\t          fdiml(0.0l, 0.0l);\n+\t          fma(0.0, 0.0, 0.0);\n+\t          fmaf(0.0f, 0.0f, 0.0f);\n+\t          fmal(0.0l, 0.0l, 0.0l);\n+\t          fmax(0.0, 0.0);\n+\t          fmaxf(0.0f, 0.0f);\n+\t          fmaxl(0.0l, 0.0l);\n+\t          fmin(0.0, 0.0);\n+\t          fminf(0.0f, 0.0f);\n+\t          fminl(0.0l, 0.0l);\n+\t          hypot(0.0, 0.0);\n+\t          hypotf(0.0f, 0.0f);\n+\t          hypotl(0.0l, 0.0l);\n+\t          ilogb(0.0);\n+\t          ilogbf(0.0f);\n+\t          ilogbl(0.0l);\n+\t          lgamma(0.0);\n+\t          lgammaf(0.0f);\n+\t          lgammal(0.0l);\n+\t          llrint(0.0);\n+\t          llrintf(0.0f);\n+\t          llrintl(0.0l);\n+\t          llround(0.0);\n+\t          llroundf(0.0f);\n+\t          llroundl(0.0l);\n+\t          log1p(0.0);\n+\t          log1pf(0.0f);\n+\t          log1pl(0.0l);\n+\t          log2(0.0);\n+\t          log2f(0.0f);\n+\t          log2l(0.0l);\n+\t          logb(0.0);\n+\t          logbf(0.0f);\n+\t          logbl(0.0l);\n+\t          lrint(0.0);\n+\t          lrintf(0.0f);\n+\t          lrintl(0.0l);\n+\t          lround(0.0);\n+\t          lroundf(0.0f);\n+\t          lroundl(0.0l);\n+\t          nan(0);\n+\t          nanf(0);\n+\t          nanl(0);\n+\t          nearbyint(0.0);\n+\t          nearbyintf(0.0f);\n+\t          nearbyintl(0.0l);\n+\t          nextafter(0.0, 0.0);\n+\t          nextafterf(0.0f, 0.0f);\n+\t          nextafterl(0.0l, 0.0l);\n+\t          nexttoward(0.0, 0.0);\n+\t          nexttowardf(0.0f, 0.0f);\n+\t          nexttowardl(0.0l, 0.0l);\n+\t          remainder(0.0, 0.0);\n+\t          remainderf(0.0f, 0.0f);\n+\t          remainderl(0.0l, 0.0l);\n+\t          remquo(0.0, 0.0, 0);\n+\t          remquo(0.0f, 0.0f, 0);\n+\t          remquo(0.0l, 0.0l, 0);\n+\t          rint(0.0);\n+\t          rintf(0.0f);\n+\t          rintl(0.0l);\n+\t          round(0.0);\n+\t          roundf(0.0f);\n+\t          roundl(0.0l);\n+\t          scalbln(0.0, 0l);\n+\t          scalblnf(0.0f, 0l);\n+\t          scalblnl(0.0l, 0l);\n+\t          scalbn(0.0, 0);\n+\t          scalbnf(0.0f, 0);\n+\t          scalbnl(0.0l, 0);\n+\t          tgamma(0.0);\n+\t          tgammaf(0.0f);\n+\t          tgammal(0.0l);\n+\t          trunc(0.0);\n+\t          truncf(0.0f);\n+\t          truncl(0.0l);\n+\t\t ],[ac_c99_math_tr1=yes], [ac_c99_math_tr1=no])\n+  ])\n+  AC_MSG_RESULT($ac_c99_math_tr1)\n+  if test x\"$ac_c99_math_tr1\" = x\"yes\"; then\n+    AC_DEFINE(_GLIBCXX_USE_C99_MATH_TR1, 1,\n+              [Define if C99 functions or macros in <math.h> should be imported\n+              in <tr1/cmath> in namespace std::tr1.])\n+  fi\n+\n   # Check for the existence of <inttypes.h> functions (NB: doesn't make\n   # sense if the previous check fails, per C99, 7.8/1).\n   ac_c99_inttypes_tr1=no;"}, {"sha": "61840a5628b79a36f6ff64c3fc50bfbfb0ec48b5", "filename": "libstdc++-v3/config.h.in", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4f0de5dd33ec2f8eb0aa43da72d9cc493478f077/libstdc%2B%2B-v3%2Fconfig.h.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4f0de5dd33ec2f8eb0aa43da72d9cc493478f077/libstdc%2B%2B-v3%2Fconfig.h.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig.h.in?ref=4f0de5dd33ec2f8eb0aa43da72d9cc493478f077", "patch": "@@ -715,6 +715,10 @@\n    in namespace std. */\n #undef _GLIBCXX_USE_C99_MATH\n \n+/* Define if C99 functions or macros in <math.h> should be imported in\n+   <tr1/cmath> in namespace std::tr1. */\n+#undef _GLIBCXX_USE_C99_MATH_TR1\n+\n /* Define if C99 types in <stdint.h> should be imported in <tr1/cstdint> in\n    namespace std::tr1. */\n #undef _GLIBCXX_USE_C99_STDINT_TR1"}, {"sha": "5ed65950480394e5884585976fea55f3da65bfeb", "filename": "libstdc++-v3/configure", "status": "modified", "additions": 170, "deletions": 0, "changes": 170, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4f0de5dd33ec2f8eb0aa43da72d9cc493478f077/libstdc%2B%2B-v3%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4f0de5dd33ec2f8eb0aa43da72d9cc493478f077/libstdc%2B%2B-v3%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfigure?ref=4f0de5dd33ec2f8eb0aa43da72d9cc493478f077", "patch": "@@ -30610,6 +30610,176 @@ _ACEOF\n \n   fi\n \n+  # Check for the existence of <math.h> functions.\n+  echo \"$as_me:$LINENO: checking for ISO C99 support to TR1 in <math.h>\" >&5\n+echo $ECHO_N \"checking for ISO C99 support to TR1 in <math.h>... $ECHO_C\" >&6\n+  if test \"${ac_c99_math_tr1+set}\" = set; then\n+  echo $ECHO_N \"(cached) $ECHO_C\" >&6\n+else\n+\n+  cat >conftest.$ac_ext <<_ACEOF\n+/* confdefs.h.  */\n+_ACEOF\n+cat confdefs.h >>conftest.$ac_ext\n+cat >>conftest.$ac_ext <<_ACEOF\n+/* end confdefs.h.  */\n+#include <math.h>\n+int\n+main ()\n+{\n+acosh(0.0);\n+\t          acoshf(0.0f);\n+\t          acoshl(0.0l);\n+\t          asinh(0.0);\n+\t          asinhf(0.0f);\n+\t          asinhl(0.0l);\n+\t          atanh(0.0);\n+\t          atanhf(0.0f);\n+\t          atanhl(0.0l);\n+\t          cbrt(0.0);\n+\t          cbrtf(0.0f);\n+\t          cbrtl(0.0l);\n+\t          copysign(0.0, 0.0);\n+\t          copysignf(0.0f, 0.0f);\n+\t          copysignl(0.0l, 0.0l);\n+\t          erf(0.0);\n+\t          erff(0.0f);\n+\t          erfl(0.0l);\n+\t          erfc(0.0);\n+\t          erfcf(0.0f);\n+\t          erfcl(0.0l);\n+\t          exp2(0.0);\n+\t          exp2f(0.0f);\n+\t          exp2l(0.0l);\n+\t          expm1(0.0);\n+\t          expm1f(0.0f);\n+\t          expm1l(0.0l);\n+\t          fdim(0.0, 0.0);\n+\t          fdimf(0.0f, 0.0f);\n+\t          fdiml(0.0l, 0.0l);\n+\t          fma(0.0, 0.0, 0.0);\n+\t          fmaf(0.0f, 0.0f, 0.0f);\n+\t          fmal(0.0l, 0.0l, 0.0l);\n+\t          fmax(0.0, 0.0);\n+\t          fmaxf(0.0f, 0.0f);\n+\t          fmaxl(0.0l, 0.0l);\n+\t          fmin(0.0, 0.0);\n+\t          fminf(0.0f, 0.0f);\n+\t          fminl(0.0l, 0.0l);\n+\t          hypot(0.0, 0.0);\n+\t          hypotf(0.0f, 0.0f);\n+\t          hypotl(0.0l, 0.0l);\n+\t          ilogb(0.0);\n+\t          ilogbf(0.0f);\n+\t          ilogbl(0.0l);\n+\t          lgamma(0.0);\n+\t          lgammaf(0.0f);\n+\t          lgammal(0.0l);\n+\t          llrint(0.0);\n+\t          llrintf(0.0f);\n+\t          llrintl(0.0l);\n+\t          llround(0.0);\n+\t          llroundf(0.0f);\n+\t          llroundl(0.0l);\n+\t          log1p(0.0);\n+\t          log1pf(0.0f);\n+\t          log1pl(0.0l);\n+\t          log2(0.0);\n+\t          log2f(0.0f);\n+\t          log2l(0.0l);\n+\t          logb(0.0);\n+\t          logbf(0.0f);\n+\t          logbl(0.0l);\n+\t          lrint(0.0);\n+\t          lrintf(0.0f);\n+\t          lrintl(0.0l);\n+\t          lround(0.0);\n+\t          lroundf(0.0f);\n+\t          lroundl(0.0l);\n+\t          nan(0);\n+\t          nanf(0);\n+\t          nanl(0);\n+\t          nearbyint(0.0);\n+\t          nearbyintf(0.0f);\n+\t          nearbyintl(0.0l);\n+\t          nextafter(0.0, 0.0);\n+\t          nextafterf(0.0f, 0.0f);\n+\t          nextafterl(0.0l, 0.0l);\n+\t          nexttoward(0.0, 0.0);\n+\t          nexttowardf(0.0f, 0.0f);\n+\t          nexttowardl(0.0l, 0.0l);\n+\t          remainder(0.0, 0.0);\n+\t          remainderf(0.0f, 0.0f);\n+\t          remainderl(0.0l, 0.0l);\n+\t          remquo(0.0, 0.0, 0);\n+\t          remquo(0.0f, 0.0f, 0);\n+\t          remquo(0.0l, 0.0l, 0);\n+\t          rint(0.0);\n+\t          rintf(0.0f);\n+\t          rintl(0.0l);\n+\t          round(0.0);\n+\t          roundf(0.0f);\n+\t          roundl(0.0l);\n+\t          scalbln(0.0, 0l);\n+\t          scalblnf(0.0f, 0l);\n+\t          scalblnl(0.0l, 0l);\n+\t          scalbn(0.0, 0);\n+\t          scalbnf(0.0f, 0);\n+\t          scalbnl(0.0l, 0);\n+\t          tgamma(0.0);\n+\t          tgammaf(0.0f);\n+\t          tgammal(0.0l);\n+\t          trunc(0.0);\n+\t          truncf(0.0f);\n+\t          truncl(0.0l);\n+\n+  ;\n+  return 0;\n+}\n+_ACEOF\n+rm -f conftest.$ac_objext\n+if { (eval echo \"$as_me:$LINENO: \\\"$ac_compile\\\"\") >&5\n+  (eval $ac_compile) 2>conftest.er1\n+  ac_status=$?\n+  grep -v '^ *+' conftest.er1 >conftest.err\n+  rm -f conftest.er1\n+  cat conftest.err >&5\n+  echo \"$as_me:$LINENO: \\$? = $ac_status\" >&5\n+  (exit $ac_status); } &&\n+\t { ac_try='test -z \"$ac_cxx_werror_flag\"\n+\t\t\t || test ! -s conftest.err'\n+  { (eval echo \"$as_me:$LINENO: \\\"$ac_try\\\"\") >&5\n+  (eval $ac_try) 2>&5\n+  ac_status=$?\n+  echo \"$as_me:$LINENO: \\$? = $ac_status\" >&5\n+  (exit $ac_status); }; } &&\n+\t { ac_try='test -s conftest.$ac_objext'\n+  { (eval echo \"$as_me:$LINENO: \\\"$ac_try\\\"\") >&5\n+  (eval $ac_try) 2>&5\n+  ac_status=$?\n+  echo \"$as_me:$LINENO: \\$? = $ac_status\" >&5\n+  (exit $ac_status); }; }; then\n+  ac_c99_math_tr1=yes\n+else\n+  echo \"$as_me: failed program was:\" >&5\n+sed 's/^/| /' conftest.$ac_ext >&5\n+\n+ac_c99_math_tr1=no\n+fi\n+rm -f conftest.err conftest.$ac_objext conftest.$ac_ext\n+\n+fi\n+\n+  echo \"$as_me:$LINENO: result: $ac_c99_math_tr1\" >&5\n+echo \"${ECHO_T}$ac_c99_math_tr1\" >&6\n+  if test x\"$ac_c99_math_tr1\" = x\"yes\"; then\n+\n+cat >>confdefs.h <<\\_ACEOF\n+#define _GLIBCXX_USE_C99_MATH_TR1 1\n+_ACEOF\n+\n+  fi\n+\n   # Check for the existence of <inttypes.h> functions (NB: doesn't make\n   # sense if the previous check fails, per C99, 7.8/1).\n   ac_c99_inttypes_tr1=no;"}, {"sha": "69dd2daaaac254756e16ed8635931c679b1872dc", "filename": "libstdc++-v3/docs/html/ext/tr1.html", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4f0de5dd33ec2f8eb0aa43da72d9cc493478f077/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2Fext%2Ftr1.html", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4f0de5dd33ec2f8eb0aa43da72d9cc493478f077/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2Fext%2Ftr1.html", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2Fext%2Ftr1.html?ref=4f0de5dd33ec2f8eb0aa43da72d9cc493478f077", "patch": "@@ -1918,7 +1918,7 @@ <h1 align=\"center\">\n       <td>done</td>\n       <td></td>\n       <td></td>\n-      <td></td>\n+      <td>abs, div: issue with _Longlong</td>\n     </tr>\n     <tr>\n       <td>8.11.2</td>\n@@ -2115,49 +2115,49 @@ <h1 align=\"center\">\n     <tr>\n       <td>8.25</td>\n       <td>Additions to header <code>&lt;cstdlib&gt;</code></td>\n+      <td>done</td>\n       <td></td>\n       <td></td>\n-      <td>missing</td>\n       <td></td>\n     </tr>\n     <tr>\n       <td>8.25.1</td>\n       <td>Synopsis</td>\n+      <td>done</td>\n       <td></td>\n       <td></td>\n-      <td>missing</td>\n       <td></td>\n     </tr>\n     <tr>\n       <td>8.25.2</td>\n       <td>Definitions</td>\n+      <td>done</td>\n       <td></td>\n       <td></td>\n-      <td>missing</td>\n       <td></td>\n     </tr>\n     <tr>\n       <td>8.25.3</td>\n       <td>Function <code>abs</code></td>\n+      <td>done</td>\n       <td></td>\n       <td></td>\n-      <td>missing</td>\n       <td></td>\n     </tr>\n     <tr>\n       <td>8.25.4</td>\n       <td>Function <code>div</code></td>\n+      <td>done</td>\n       <td></td>\n       <td></td>\n-      <td>missing</td>\n       <td></td>\n     </tr>\n     <tr>\n       <td>8.26</td>\n       <td>Additions to header <code>&lt;stdlib.h&gt;</code></td>\n+      <td>done</td>\n       <td></td>\n       <td></td>\n-      <td>missing</td>\n       <td></td>\n     </tr>\n     <tr>\n@@ -2179,10 +2179,10 @@ <h1 align=\"center\">\n     <tr>\n       <td>8.29</td>\n       <td>Additions to header <code>&lt;ctime&gt;</code></td>\n+      <td>done</td>\n       <td></td>\n       <td></td>\n-      <td>missing</td>\n-      <td></td>\n+      <td>C library responsability</td>\n     </tr>\n     <tr>\n       <td>8.30</td>\n@@ -2307,7 +2307,7 @@ <h3>Footnotes</h3>\n <table width=\"100%\" border=\"0\">\n <tr>\n   <td>\n-    <!-- IGNORE DIFF -->Last modified 2006-02-05\n+    <!-- IGNORE DIFF -->Last modified 2006-02-07\n   </td>\n   <td align=\"right\" valign=\"bottom\">\n     <a href=\"http://validator.w3.org/check/referer\">"}, {"sha": "4f124abb03a2bd5a0c841c8a5ad18c426e6e1a93", "filename": "libstdc++-v3/include/Makefile.am", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4f0de5dd33ec2f8eb0aa43da72d9cc493478f077/libstdc%2B%2B-v3%2Finclude%2FMakefile.am", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4f0de5dd33ec2f8eb0aa43da72d9cc493478f077/libstdc%2B%2B-v3%2Finclude%2FMakefile.am", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2FMakefile.am?ref=4f0de5dd33ec2f8eb0aa43da72d9cc493478f077", "patch": "@@ -489,11 +489,14 @@ tr1_headers = \\\n \t${tr1_srcdir}/cfloat \\\n \t${tr1_srcdir}/cinttypes \\\n \t${tr1_srcdir}/climits \\\n+\t${tr1_srcdir}/cmath \\\n \t${tr1_srcdir}/common.h \\\n \t${tr1_srcdir}/complex \\\n \t${tr1_srcdir}/cstdarg \\\n \t${tr1_srcdir}/cstdint \\\n \t${tr1_srcdir}/cstdio \\\n+\t${tr1_srcdir}/cstdlib \\\n+\t${tr1_srcdir}/ctime \\\n \t${tr1_srcdir}/ctype.h \\\n \t${tr1_srcdir}/cwchar \\\n \t${tr1_srcdir}/cwctype \\\n@@ -504,6 +507,7 @@ tr1_headers = \\\n \t${tr1_srcdir}/hashtable \\\n \t${tr1_srcdir}/inttypes.h \\\n \t${tr1_srcdir}/limits.h \\\n+\t${tr1_srcdir}/math.h \\\n \t${tr1_srcdir}/memory \\\n \t${tr1_srcdir}/mu_iterate.h \\\n \t${tr1_srcdir}/ref_fwd.h \\\n@@ -512,6 +516,7 @@ tr1_headers = \\\n \t${tr1_srcdir}/stdarg.h \\\n \t${tr1_srcdir}/stdint.h \\\n \t${tr1_srcdir}/stdio.h \\\n+\t${tr1_srcdir}/stdlib.h \\\n \t${tr1_srcdir}/tuple \\\n \t${tr1_srcdir}/tuple_iterate.h \\\n \t${tr1_srcdir}/type_traits \\"}, {"sha": "d32cc112e3d2b49f36c833bad0e2191b768f81f2", "filename": "libstdc++-v3/include/Makefile.in", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4f0de5dd33ec2f8eb0aa43da72d9cc493478f077/libstdc%2B%2B-v3%2Finclude%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4f0de5dd33ec2f8eb0aa43da72d9cc493478f077/libstdc%2B%2B-v3%2Finclude%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2FMakefile.in?ref=4f0de5dd33ec2f8eb0aa43da72d9cc493478f077", "patch": "@@ -706,11 +706,14 @@ tr1_headers = \\\n \t${tr1_srcdir}/cfloat \\\n \t${tr1_srcdir}/cinttypes \\\n \t${tr1_srcdir}/climits \\\n+\t${tr1_srcdir}/cmath \\\n \t${tr1_srcdir}/common.h \\\n \t${tr1_srcdir}/complex \\\n \t${tr1_srcdir}/cstdarg \\\n \t${tr1_srcdir}/cstdint \\\n \t${tr1_srcdir}/cstdio \\\n+\t${tr1_srcdir}/cstdlib \\\n+\t${tr1_srcdir}/ctime \\\n \t${tr1_srcdir}/ctype.h \\\n \t${tr1_srcdir}/cwchar \\\n \t${tr1_srcdir}/cwctype \\\n@@ -721,6 +724,7 @@ tr1_headers = \\\n \t${tr1_srcdir}/hashtable \\\n \t${tr1_srcdir}/inttypes.h \\\n \t${tr1_srcdir}/limits.h \\\n+\t${tr1_srcdir}/math.h \\\n \t${tr1_srcdir}/memory \\\n \t${tr1_srcdir}/mu_iterate.h \\\n \t${tr1_srcdir}/ref_fwd.h \\\n@@ -729,6 +733,7 @@ tr1_headers = \\\n \t${tr1_srcdir}/stdarg.h \\\n \t${tr1_srcdir}/stdint.h \\\n \t${tr1_srcdir}/stdio.h \\\n+\t${tr1_srcdir}/stdlib.h \\\n \t${tr1_srcdir}/tuple \\\n \t${tr1_srcdir}/tuple_iterate.h \\\n \t${tr1_srcdir}/type_traits \\"}, {"sha": "25e5c075e4a47c1d0346716772cc3dd733213ec6", "filename": "libstdc++-v3/include/tr1/cinttypes", "status": "modified", "additions": 9, "deletions": 8, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4f0de5dd33ec2f8eb0aa43da72d9cc493478f077/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Fcinttypes", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4f0de5dd33ec2f8eb0aa43da72d9cc493478f077/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Fcinttypes", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Fcinttypes?ref=4f0de5dd33ec2f8eb0aa43da72d9cc493478f077", "patch": "@@ -56,16 +56,17 @@ _GLIBCXX_BEGIN_NAMESPACE(tr1)\n \n   // functions\n   using ::imaxabs;\n-  \n-  inline intmax_t\n-  abs(intmax_t __i)\n-  { return imaxabs(__i); }\n+\n+  // May collide with _Longlong abs(_Longlong), and is not described\n+  // anywhere outside the synopsis.  Likely, a defect.\n+  //\n+  // intmax_t abs(intmax_t)\n \n   using ::imaxdiv;\n-  \n-  inline imaxdiv_t\n-  div(intmax_t __numer, intmax_t __denom)\n-  { return imaxdiv(__numer, __denom); }\n+\n+  // Likewise, with lldiv_t div(_Longlong, _Longlong).\n+  //\n+  // imaxdiv_t div(intmax_t, intmax_t)\n \n   using ::strtoimax;\n   using ::strtoumax;"}, {"sha": "ec11b26adc5614e7f13813a394d7b674570aff84", "filename": "libstdc++-v3/include/tr1/cmath", "status": "added", "additions": 298, "deletions": 0, "changes": 298, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4f0de5dd33ec2f8eb0aa43da72d9cc493478f077/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Fcmath", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4f0de5dd33ec2f8eb0aa43da72d9cc493478f077/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Fcmath", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Fcmath?ref=4f0de5dd33ec2f8eb0aa43da72d9cc493478f077", "patch": "@@ -0,0 +1,298 @@\n+// TR1 cmath -*- C++ -*-\n+\n+// Copyright (C) 2006 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+// As a special exception, you may use this file as part of a free software\n+// library without restriction.  Specifically, if other files instantiate\n+// templates or use macros or inline functions from this file, or you compile\n+// this file and link it with other files to produce an executable, this\n+// file does not by itself cause the resulting executable to be covered by\n+// the GNU General Public License.  This exception does not however\n+// invalidate any other reasons why the executable file might be covered by\n+// the GNU General Public License.\n+\n+/** @file \n+ *  This is a TR1 C++ Library header. \n+ */\n+\n+#ifndef _TR1_CMATH\n+#define _TR1_CMATH 1\n+\n+#include <bits/c++config.h>\n+#include <cmath>\n+\n+#if _GLIBCXX_USE_C99_MATH_TR1\n+\n+#undef acosh\n+#undef acoshf\n+#undef acoshl\n+#undef asinh\n+#undef asinhf\n+#undef asinhl\n+#undef atanh\n+#undef atanhf\n+#undef atanhl\n+#undef cbrt\n+#undef cbrtf\n+#undef cbrtl\n+#undef copysign\n+#undef copysignf\n+#undef copysignl\n+#undef erf\n+#undef erff\n+#undef erfl\n+#undef erfc\n+#undef erfcf\n+#undef erfcl\n+#undef exp2\n+#undef exp2f\n+#undef exp2l\n+#undef expm1\n+#undef expm1f\n+#undef expm1l\n+#undef fdim\n+#undef fdimf\n+#undef fdiml\n+#undef fma\n+#undef fmaf\n+#undef fmal\n+#undef fmax\n+#undef fmaxf\n+#undef fmaxl\n+#undef fmin\n+#undef fminf\n+#undef fminl\n+#undef hypot\n+#undef hypotf\n+#undef hypotl\n+#undef ilogb\n+#undef ilogbf\n+#undef ilogbl\n+#undef lgamma\n+#undef lgammaf\n+#undef lgammal\n+#undef llrint\n+#undef llrintf\n+#undef llrintl\n+#undef llround\n+#undef llroundf\n+#undef llroundl\n+#undef log1p\n+#undef log1pf\n+#undef log1pl\n+#undef log2\n+#undef log2f\n+#undef log2l\n+#undef logb\n+#undef logbf\n+#undef logbl\n+#undef lrint\n+#undef lrintf\n+#undef lrintl\n+#undef lround\n+#undef lroundf\n+#undef lroundl\n+#undef nan\n+#undef nanf\n+#undef nanl\n+#undef nearbyint\n+#undef nearbyintf\n+#undef nearbyintl\n+#undef nextafter\n+#undef nextafterf\n+#undef nextafterl\n+#undef nexttoward\n+#undef nexttowardf\n+#undef nexttowardl\n+#undef remainder\n+#undef remainderf\n+#undef remainderl\n+#undef remquo\n+#undef remquo\n+#undef remquo\n+#undef rint\n+#undef rintf\n+#undef rintl\n+#undef round\n+#undef roundf\n+#undef roundl\n+#undef scalbln\n+#undef scalblnf\n+#undef scalblnl\n+#undef scalbn\n+#undef scalbnf\n+#undef scalbnl\n+#undef tgamma\n+#undef tgammaf\n+#undef tgammal\n+#undef trunc\n+#undef truncf\n+#undef truncl\n+\n+// namespace std::tr1\n+namespace std\n+{\n+_GLIBCXX_BEGIN_NAMESPACE(tr1)\n+\n+  using ::acosh;\n+  using ::acoshf;\n+  using ::acoshl;\n+\n+  using ::asinh;\n+  using ::asinhf;\n+  using ::asinhl;\n+\n+  using ::atanh;\n+  using ::atanhf;\n+  using ::atanhl;\n+\n+  using ::cbrt;\n+  using ::cbrtf;\n+  using ::cbrtl;\n+\n+  using ::copysign;\n+  using ::copysignf;\n+  using ::copysignl;\n+\n+  using ::erf;\n+  using ::erff;\n+  using ::erfl;\n+\n+  using ::erfc;\n+  using ::erfcf;\n+  using ::erfcl;\n+\n+  using ::exp2;\n+  using ::exp2f;\n+  using ::exp2l;\n+\n+  using ::expm1;\n+  using ::expm1f;\n+  using ::expm1l;\n+\n+  using ::fdim;\n+  using ::fdimf;\n+  using ::fdiml;\n+\n+  using ::fma;\n+  using ::fmaf;\n+  using ::fmal;\n+\n+  using ::fmax;\n+  using ::fmaxf;\n+  using ::fmaxl;\n+\n+  using ::fmin;\n+  using ::fminf;\n+  using ::fminl;\n+\n+  using ::hypot;\n+  using ::hypotf;\n+  using ::hypotl;\n+\n+  using ::ilogb;\n+  using ::ilogbf;\n+  using ::ilogbl;\n+\n+  using ::lgamma;\n+  using ::lgammaf;\n+  using ::lgammal;\n+\n+  using ::llrint;\n+  using ::llrintf;\n+  using ::llrintl;\n+\n+  using ::llround;\n+  using ::llroundf;\n+  using ::llroundl;\n+\n+  using ::log1p;\n+  using ::log1pf;\n+  using ::log1pl;\n+\n+  using ::log2;\n+  using ::log2f;\n+  using ::log2l;\n+\n+  using ::logb;\n+  using ::logbf;\n+  using ::logbl;\n+\n+  using ::lrint;\n+  using ::lrintf;\n+  using ::lrintl;\n+\n+  using ::lround;\n+  using ::lroundf;\n+  using ::lroundl;\n+\n+  using ::nan;\n+  using ::nanf;\n+  using ::nanl;\n+\n+  using ::nearbyint;\n+  using ::nearbyintf;\n+  using ::nearbyintl;\n+\n+  using ::nextafter;\n+  using ::nextafterf;\n+  using ::nextafterl;\n+\n+  using ::nexttoward;\n+  using ::nexttowardf;\n+  using ::nexttowardl;\n+\n+  using ::remainder;\n+  using ::remainderf;\n+  using ::remainderl;\n+\n+  using ::remquo;\n+  using ::remquo;\n+  using ::remquo;\n+\n+  using ::rint;\n+  using ::rintf;\n+  using ::rintl;\n+\n+  using ::round;\n+  using ::roundf;\n+  using ::roundl;\n+\n+  using ::scalbln;\n+  using ::scalblnf;\n+  using ::scalblnl;\n+\n+  using ::scalbn;\n+  using ::scalbnf;\n+  using ::scalbnl;\n+\n+  using ::tgamma;\n+  using ::tgammaf;\n+  using ::tgammal;\n+\n+  using ::trunc;\n+  using ::truncf;\n+  using ::truncl;\n+\n+_GLIBCXX_END_NAMESPACE\n+}\n+\n+#endif\n+\n+#endif"}, {"sha": "49ccb959cbd2b4771a3067fe3cfe54e832e170c0", "filename": "libstdc++-v3/include/tr1/cstdlib", "status": "added", "additions": 79, "deletions": 0, "changes": 79, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4f0de5dd33ec2f8eb0aa43da72d9cc493478f077/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Fcstdlib", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4f0de5dd33ec2f8eb0aa43da72d9cc493478f077/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Fcstdlib", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Fcstdlib?ref=4f0de5dd33ec2f8eb0aa43da72d9cc493478f077", "patch": "@@ -0,0 +1,79 @@\n+// TR1 cstdlib -*- C++ -*-\n+\n+// Copyright (C) 2006 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+// As a special exception, you may use this file as part of a free software\n+// library without restriction.  Specifically, if other files instantiate\n+// templates or use macros or inline functions from this file, or you compile\n+// this file and link it with other files to produce an executable, this\n+// file does not by itself cause the resulting executable to be covered by\n+// the GNU General Public License.  This exception does not however\n+// invalidate any other reasons why the executable file might be covered by\n+// the GNU General Public License.\n+\n+/** @file \n+ *  This is a TR1 C++ Library header. \n+ */\n+\n+#ifndef _TR1_CSTDLIB\n+#define _TR1_CSTDLIB 1\n+\n+#include <bits/c++config.h>\n+\n+#if _GLIBCXX_HOSTED\n+\n+#include <cstdlib>\n+\n+// namespace std::tr1\n+namespace std\n+{\n+_GLIBCXX_BEGIN_NAMESPACE(tr1)\n+\n+#if _GLIBCXX_USE_C99\n+\n+#if !_GLIBCXX_USE_C99_LONG_LONG_DYNAMIC\n+  // types\n+  using std::lldiv_t;\n+\n+  // functions\n+  using std::llabs;\n+  using std::lldiv;\n+#endif\n+\n+  using std::atoll;\n+  using std::strtoll;\n+  using std::strtoull;\n+\n+  using std::strtof;\n+  using std::strtold;\n+\n+  // overloads\n+  using std::abs;\n+#if !_GLIBCXX_USE_C99_LONG_LONG_DYNAMIC\n+  using std::div;\n+#endif\n+\n+#endif\n+\n+_GLIBCXX_END_NAMESPACE\n+}\n+\n+#endif\n+\n+#endif"}, {"sha": "420bfdb301a94a85fe08595a79cc937dcd5db14c", "filename": "libstdc++-v3/include/tr1/ctime", "status": "added", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4f0de5dd33ec2f8eb0aa43da72d9cc493478f077/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Fctime", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4f0de5dd33ec2f8eb0aa43da72d9cc493478f077/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Fctime", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Fctime?ref=4f0de5dd33ec2f8eb0aa43da72d9cc493478f077", "patch": "@@ -0,0 +1,39 @@\n+// TR1 ctime -*- C++ -*-\n+\n+// Copyright (C) 2006 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+// As a special exception, you may use this file as part of a free software\n+// library without restriction.  Specifically, if other files instantiate\n+// templates or use macros or inline functions from this file, or you compile\n+// this file and link it with other files to produce an executable, this\n+// file does not by itself cause the resulting executable to be covered by\n+// the GNU General Public License.  This exception does not however\n+// invalidate any other reasons why the executable file might be covered by\n+// the GNU General Public License.\n+\n+/** @file \n+ *  This is a TR1 C++ Library header. \n+ */\n+\n+#ifndef _TR1_CTIME\n+#define _TR1_CTIME 1\n+\n+#include <ctime>\n+\n+#endif"}, {"sha": "31901cc92e9760137dee90c670d5a8d700713c5a", "filename": "libstdc++-v3/include/tr1/inttypes.h", "status": "modified", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4f0de5dd33ec2f8eb0aa43da72d9cc493478f077/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Finttypes.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4f0de5dd33ec2f8eb0aa43da72d9cc493478f077/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Finttypes.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Finttypes.h?ref=4f0de5dd33ec2f8eb0aa43da72d9cc493478f077", "patch": "@@ -36,11 +36,4 @@\n \n #include <tr1/cinttypes>\n \n-#if _GLIBCXX_USE_C99_INTTYPES_TR1\n-\n-using std::tr1::abs;\n-using std::tr1::div;\n-\n-#endif\n-\n #endif"}, {"sha": "a0dd24ba4ac83937abec2ee967d376e08827d442", "filename": "libstdc++-v3/include/tr1/math.h", "status": "added", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4f0de5dd33ec2f8eb0aa43da72d9cc493478f077/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Fmath.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4f0de5dd33ec2f8eb0aa43da72d9cc493478f077/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Fmath.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Fmath.h?ref=4f0de5dd33ec2f8eb0aa43da72d9cc493478f077", "patch": "@@ -0,0 +1,39 @@\n+// TR1 math.h -*- C++ -*-\n+\n+// Copyright (C) 2006 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+// As a special exception, you may use this file as part of a free software\n+// library without restriction.  Specifically, if other files instantiate\n+// templates or use macros or inline functions from this file, or you compile\n+// this file and link it with other files to produce an executable, this\n+// file does not by itself cause the resulting executable to be covered by\n+// the GNU General Public License.  This exception does not however\n+// invalidate any other reasons why the executable file might be covered by\n+// the GNU General Public License.\n+\n+/** @file \n+ *  This is a TR1 C++ Library header. \n+ */\n+\n+#ifndef _TR1_MATH_H\n+#define _TR1_MATH_H 1\n+\n+#include <tr1/cmath>\n+\n+#endif"}, {"sha": "f58e4f000198e6a3e2b14f2c03751804cd64f7c4", "filename": "libstdc++-v3/include/tr1/stdlib.h", "status": "added", "additions": 56, "deletions": 0, "changes": 56, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4f0de5dd33ec2f8eb0aa43da72d9cc493478f077/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Fstdlib.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4f0de5dd33ec2f8eb0aa43da72d9cc493478f077/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Fstdlib.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Fstdlib.h?ref=4f0de5dd33ec2f8eb0aa43da72d9cc493478f077", "patch": "@@ -0,0 +1,56 @@\n+// TR1 stdlib.h -*- C++ -*-\n+\n+// Copyright (C) 2006 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+// As a special exception, you may use this file as part of a free software\n+// library without restriction.  Specifically, if other files instantiate\n+// templates or use macros or inline functions from this file, or you compile\n+// this file and link it with other files to produce an executable, this\n+// file does not by itself cause the resulting executable to be covered by\n+// the GNU General Public License.  This exception does not however\n+// invalidate any other reasons why the executable file might be covered by\n+// the GNU General Public License.\n+\n+/** @file \n+ *  This is a TR1 C++ Library header. \n+ */\n+\n+#ifndef _TR1_STDLIB_H\n+#define _TR1_STDLIB_H 1\n+\n+#include <tr1/cstdlib>\n+\n+#if _GLIBCXX_HOSTED\n+\n+#if _GLIBCXX_USE_C99\n+\n+using std::tr1::atoll;\n+using std::tr1::strtoll;\n+using std::tr1::strtoull;\n+\n+using std::tr1::abs;\n+#if !_GLIBCXX_USE_C99_LONG_LONG_DYNAMIC\n+using std::tr1::div;\n+#endif\n+\n+#endif\n+\n+#endif\n+\n+#endif"}, {"sha": "cd5a0378554868f92dc1155944a99fc5d0780c0b", "filename": "libstdc++-v3/testsuite/tr1/8_c_compatibility/cinttypes/functions.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4f0de5dd33ec2f8eb0aa43da72d9cc493478f077/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F8_c_compatibility%2Fcinttypes%2Ffunctions.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4f0de5dd33ec2f8eb0aa43da72d9cc493478f077/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F8_c_compatibility%2Fcinttypes%2Ffunctions.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F8_c_compatibility%2Fcinttypes%2Ffunctions.cc?ref=4f0de5dd33ec2f8eb0aa43da72d9cc493478f077", "patch": "@@ -41,10 +41,10 @@ void test01()\n   std::tr1::imaxdiv_t dret;\n \n   ret = std::tr1::imaxabs(i);\n-  ret = std::tr1::abs(i);\n+  // ret = std::tr1::abs(i);\n \n   dret = std::tr1::imaxdiv(numer, denom);\n-  dret = std::tr1::div(numer, denom);\n+  // dret = std::tr1::div(numer, denom);\n \n   ret = std::tr1::strtoimax(s, endptr, base);\n   uret = std::tr1::strtoumax(s, endptr, base);"}, {"sha": "f97cd8a7dd98b643b945e33d8372fc0a9b449ba1", "filename": "libstdc++-v3/testsuite/tr1/8_c_compatibility/cmath/functions.cc", "status": "added", "additions": 187, "deletions": 0, "changes": 187, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4f0de5dd33ec2f8eb0aa43da72d9cc493478f077/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F8_c_compatibility%2Fcmath%2Ffunctions.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4f0de5dd33ec2f8eb0aa43da72d9cc493478f077/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F8_c_compatibility%2Fcmath%2Ffunctions.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F8_c_compatibility%2Fcmath%2Ffunctions.cc?ref=4f0de5dd33ec2f8eb0aa43da72d9cc493478f077", "patch": "@@ -0,0 +1,187 @@\n+// { dg-do compile }\n+\n+// 2006-02-07  Paolo Carlini  <pcarlini@suse.de>\n+//\n+// Copyright (C) 2006 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+// 8.16 Additions to header <cmath>\n+\n+#include <tr1/cmath>\n+\n+void test01()\n+{\n+#if _GLIBCXX_USE_C99_MATH_TR1\n+\n+  double d0 = 0.0;\n+  float f0 = 0.0f;\n+  long double ld0 = 0.0l;\n+  const char* str = \"NAN\";\n+  int* pquo = 0;\n+  long lex = 0l;\n+  int ex = 0;\n+\n+  double ret;\n+  float fret;\n+  long double ldret;\n+  int iret;\n+  long lret;\n+  long long llret;\n+\n+  ret = acosh(d0);\n+  fret = acoshf(f0);\n+  ldret = acoshl(ld0);\n+\n+  ret = asinh(d0);\n+  fret = asinhf(f0);\n+  ldret = asinhl(ld0);\n+\n+  ret = atanh(d0);\n+  fret = atanhf(f0);\n+  ldret = atanhl(ld0);\n+\n+  ret = cbrt(d0);\n+  fret = cbrtf(f0);\n+  ldret = cbrtl(ld0);\n+\n+  ret = copysign(d0, d0);\n+  fret = copysignf(f0, f0);\n+  ldret = copysignl(ld0, ld0);\n+\n+  ret = erf(d0);\n+  fret = erff(f0);\n+  ldret = erfl(ld0);\n+\n+  ret = erfc(d0);\n+  fret = erfcf(f0);\n+  ldret = erfcl(ld0);\n+\n+  ret = exp2(d0);\n+  fret = exp2f(f0);\n+  ldret = exp2l(ld0);\n+\n+  ret = expm1(d0);\n+  fret = expm1f(f0);\n+  ldret = expm1l(ld0);\n+\n+  ret = fdim(d0, d0);\n+  fret = fdimf(f0, f0);\n+  ldret = fdiml(ld0, ld0);\n+\n+  ret = fma(d0, d0, d0);\n+  fret = fmaf(f0, f0, f0);\n+  ldret = fmal(ld0, ld0, ld0);\n+\n+  ret = fmax(d0, d0);\n+  fret = fmaxf(f0, f0);\n+  ldret = fmaxl(ld0, ld0);\n+\n+  ret = fmin(d0, d0);\n+  fret = fminf(f0, f0);\n+  ldret = fminl(ld0, ld0);\n+\n+  ret = hypot(d0, d0);\n+  fret = hypotf(f0, f0);\n+  ldret = hypotl(ld0, ld0);\n+\n+  iret = ilogb(d0);\n+  iret = ilogbf(f0);\n+  iret = ilogbl(ld0);\n+\n+  ret = lgamma(d0);\n+  fret = lgammaf(f0);\n+  ldret = lgammal(ld0);\n+\n+  llret = llrint(d0);\n+  llret = llrintf(f0);\n+  llret = llrintl(ld0);\n+\n+  llret = llround(d0);\n+  llret = llroundf(f0);\n+  llret = llroundl(ld0);\n+\n+  ret = log1p(d0);\n+  fret = log1pf(f0);\n+  ldret = log1pl(ld0);\n+\n+  ret = log2(d0);\n+  fret = log2f(f0);\n+  ldret = log2l(ld0);\n+\n+  ret = logb(d0);\n+  fret = logbf(f0);\n+  ldret = logbl(ld0);\n+\n+  lret = lrint(d0);\n+  lret = lrintf(f0);\n+  lret = lrintl(ld0);\n+\n+  lret = lround(d0);\n+  lret = lroundf(f0);\n+  lret = lroundl(ld0);\n+\n+  ret = nan(str);\n+  fret = nanf(str);\n+  ldret = nanl(str);\n+\n+  ret = nearbyint(d0);\n+  fret = nearbyintf(f0);\n+  ldret = nearbyintl(ld0);\n+\n+  ret = nextafter(d0, d0);\n+  fret = nextafterf(f0, f0);\n+  ldret = nextafterl(ld0, ld0);\n+\n+  ret = nexttoward(d0, d0);\n+  fret = nexttowardf(f0, f0);\n+  ldret = nexttowardl(ld0, ld0);\n+\n+  ret = remainder(d0, d0);\n+  fret = remainderf(f0, f0);\n+  ldret = remainderl(ld0, ld0);\n+\n+  ret = remquo(d0, d0, pquo);\n+  fret = remquo(f0, f0, pquo);\n+  ldret = remquo(ld0, ld0, pquo);\n+\n+  ret = rint(d0);\n+  fret = rintf(f0);\n+  ldret = rintl(ld0);\n+\n+  ret = round(d0);\n+  fret = roundf(f0);\n+  ldret = roundl(ld0);\n+\n+  ret = scalbln(d0, lex);\n+  fret = scalblnf(f0, lex);\n+  ldret = scalblnl(ld0, lex);\n+\n+  ret = scalbn(d0, ex);\n+  fret = scalbnf(f0, ex);\n+  ldret = scalbnl(ld0, ex);\n+\n+  ret = tgamma(d0);\n+  fret = tgammaf(f0);\n+  ldret = tgammal(ld0);\n+\n+  ret = trunc(d0);\n+  fret = truncf(f0);\n+  ldret = truncl(ld0);\n+  \n+#endif\n+}"}, {"sha": "316482836e1c96c4143c8c41b78bcdc4f4a6f7e2", "filename": "libstdc++-v3/testsuite/tr1/8_c_compatibility/cstdlib/functions.cc", "status": "added", "additions": 66, "deletions": 0, "changes": 66, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4f0de5dd33ec2f8eb0aa43da72d9cc493478f077/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F8_c_compatibility%2Fcstdlib%2Ffunctions.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4f0de5dd33ec2f8eb0aa43da72d9cc493478f077/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F8_c_compatibility%2Fcstdlib%2Ffunctions.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F8_c_compatibility%2Fcstdlib%2Ffunctions.cc?ref=4f0de5dd33ec2f8eb0aa43da72d9cc493478f077", "patch": "@@ -0,0 +1,66 @@\n+// { dg-do compile }\n+\n+// 2006-02-07  Paolo Carlini  <pcarlini@suse.de>\n+//\n+// Copyright (C) 2006 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+// 8.25 Additions to header <cstdlib>\n+\n+#include <tr1/cstdlib>\n+\n+#if _GLIBCXX_HOSTED\n+\n+void test01()\n+{\n+#if _GLIBCXX_USE_C99\n+\n+  long long i = 0;\n+  const char* s = 0;\n+  char** endptr = 0;\n+  int base = 0;\n+\n+  long long ret;\n+  unsigned long long uret;\n+  float fret;\n+  long double ldret;\n+\n+#if !_GLIBCXX_USE_C99_LONG_LONG_DYNAMIC\n+  long long numer = 0, denom = 0;\n+  std::tr1::lldiv_t dret;\n+\n+  ret = std::tr1::llabs(i);\n+  dret = std::tr1::lldiv(numer, denom);\n+#endif\n+\n+  ret = std::tr1::atoll(s);\n+  ret = std::tr1::strtoll(s, endptr, base);\n+  uret = std::tr1::strtoull(s, endptr, base);\n+\n+  fret = std::tr1::strtof(s, endptr);\n+  ldret = std::tr1::strtold(s, endptr);\n+\n+  ret = std::tr1::abs(i);\n+#if !_GLIBCXX_USE_C99_LONG_LONG_DYNAMIC\n+  dret = std::tr1::div(numer, denom);\n+#endif\n+\n+#endif\n+}\n+\n+#endif"}, {"sha": "aa1e21dd92c229d343c0a1424329727bccc42db8", "filename": "libstdc++-v3/testsuite/tr1/8_c_compatibility/cstdlib/types.cc", "status": "added", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4f0de5dd33ec2f8eb0aa43da72d9cc493478f077/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F8_c_compatibility%2Fcstdlib%2Ftypes.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4f0de5dd33ec2f8eb0aa43da72d9cc493478f077/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F8_c_compatibility%2Fcstdlib%2Ftypes.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F8_c_compatibility%2Fcstdlib%2Ftypes.cc?ref=4f0de5dd33ec2f8eb0aa43da72d9cc493478f077", "patch": "@@ -0,0 +1,38 @@\n+// { dg-do compile }\n+\n+// 2006-02-07  Paolo Carlini  <pcarlini@suse.de>\n+//\n+// Copyright (C) 2006 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+// 8.25 Additions to header <cstdlib>\n+\n+#include <tr1/cstdlib>\n+\n+#if _GLIBCXX_HOSTED\n+\n+void test01()\n+{\n+#if _GLIBCXX_USE_C99\n+\n+  typedef std::tr1::lldiv_t     my_lldiv_t;\n+  \n+#endif\n+}\n+\n+#endif"}, {"sha": "547bce378ccfb064bd237b43a6d385273f3656a9", "filename": "libstdc++-v3/testsuite/tr1/8_c_compatibility/cwchar/functions.cc", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4f0de5dd33ec2f8eb0aa43da72d9cc493478f077/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F8_c_compatibility%2Fcwchar%2Ffunctions.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4f0de5dd33ec2f8eb0aa43da72d9cc493478f077/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F8_c_compatibility%2Fcwchar%2Ffunctions.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F8_c_compatibility%2Fcwchar%2Ffunctions.cc?ref=4f0de5dd33ec2f8eb0aa43da72d9cc493478f077", "patch": "@@ -67,15 +67,11 @@ void test01(int dummy, ...)\n   long double ldret;\n   ldret = std::tr1::wcstold(nptr2, endptr2);\n \n-#ifdef _GLIBCXX_USE_LONG_LONG\n-  const wchar_t* nptr3 = 0;\n-  wchar_t** endptr3 = 0;\n   int base = 0;\n   long long llret;\n   unsigned long long ullret;\n-  llret = std::tr1::wcstoll(nptr3, endptr3, base);\n-  ullret = std::tr1::wcstoull(nptr3, endptr3, base);\n-#endif\n+  llret = std::tr1::wcstoll(nptr2, endptr2, base);\n+  ullret = std::tr1::wcstoull(nptr2, endptr2, base);\n \n #endif\n }"}, {"sha": "765abae1829e00f47379ff112cc6112e085cc95b", "filename": "libstdc++-v3/testsuite/tr1/headers.cc", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4f0de5dd33ec2f8eb0aa43da72d9cc493478f077/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2Fheaders.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4f0de5dd33ec2f8eb0aa43da72d9cc493478f077/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2Fheaders.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2Fheaders.cc?ref=4f0de5dd33ec2f8eb0aa43da72d9cc493478f077", "patch": "@@ -26,10 +26,13 @@\n #include <tr1/cfloat>\n #include <tr1/cinttypes>\n #include <tr1/climits>\n+#include <tr1/cmath>\n #include <tr1/complex>\n #include <tr1/cstdarg>\n #include <tr1/cstdint>\n #include <tr1/cstdio>\n+#include <tr1/cstdlib>\n+#include <tr1/ctime>\n #include <tr1/ctype.h>\n #include <tr1/cwchar>\n #include <tr1/cwctype>\n@@ -39,10 +42,12 @@\n #include <tr1/hashtable>\n #include <tr1/inttypes.h>\n #include <tr1/limits.h>\n+#include <tr1/math.h>\n #include <tr1/memory>\n #include <tr1/stdarg.h>\n #include <tr1/stdint.h>\n #include <tr1/stdio.h>\n+#include <tr1/stdlib.h>\n #include <tr1/tuple>\n #include <tr1/type_traits>\n #include <tr1/unordered_set>"}]}