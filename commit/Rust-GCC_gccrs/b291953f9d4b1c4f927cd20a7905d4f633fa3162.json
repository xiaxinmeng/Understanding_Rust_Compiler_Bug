{"sha": "b291953f9d4b1c4f927cd20a7905d4f633fa3162", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjI5MTk1M2Y5ZDRiMWM0ZjkyN2NkMjBhNzkwNWQ0ZjYzM2ZhMzE2Mg==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@act-europe.fr", "date": "2004-01-23T10:35:42Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2004-01-23T10:35:42Z"}, "message": "1aexcept.adb, [...]: Removed, unused.\n\n\t* 1aexcept.adb, 1aexcept.ads, 1ic.ads, 1ssecsta.adb,\n\t1ssecsta.ads: Removed, unused.\n\nFrom-SVN: r76404", "tree": {"sha": "23f058d4955acf9233fd7c9b30a328f4a01a313f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/23f058d4955acf9233fd7c9b30a328f4a01a313f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b291953f9d4b1c4f927cd20a7905d4f633fa3162", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b291953f9d4b1c4f927cd20a7905d4f633fa3162", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b291953f9d4b1c4f927cd20a7905d4f633fa3162", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b291953f9d4b1c4f927cd20a7905d4f633fa3162/comments", "author": null, "committer": null, "parents": [{"sha": "b7e429ab799b3003bcd2f83011dd2ee3d7309691", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b7e429ab799b3003bcd2f83011dd2ee3d7309691", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b7e429ab799b3003bcd2f83011dd2ee3d7309691"}], "stats": {"total": 429, "additions": 2, "deletions": 427}, "files": [{"sha": "42b623633fd81f9091480dc3557f36d3a74f6f46", "filename": "gcc/ada/1aexcept.adb", "status": "removed", "additions": 0, "deletions": 49, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b7e429ab799b3003bcd2f83011dd2ee3d7309691/gcc%2Fada%2F1aexcept.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b7e429ab799b3003bcd2f83011dd2ee3d7309691/gcc%2Fada%2F1aexcept.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2F1aexcept.adb?ref=b7e429ab799b3003bcd2f83011dd2ee3d7309691", "patch": "@@ -1,49 +0,0 @@\n-------------------------------------------------------------------------------\n---                                                                          --\n---                         GNAT COMPILER COMPONENTS                         --\n---                                                                          --\n---                       A D A . E X C E P T I O N S                        --\n---                                                                          --\n---                                 B o d y                                  --\n---                                                                          --\n---          Copyright (C) 1992-2001 Free Software Foundation, Inc.          --\n---                                                                          --\n--- GNAT is free software;  you can  redistribute it  and/or modify it under --\n--- terms of the  GNU General Public License as published  by the Free Soft- --\n--- ware  Foundation;  either version 2,  or (at your option) any later ver- --\n--- sion.  GNAT is distributed in the hope that it will be useful, but WITH- --\n--- OUT ANY WARRANTY;  without even the  implied warranty of MERCHANTABILITY --\n--- or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License --\n--- for  more details.  You should have  received  a copy of the GNU General --\n--- Public License  distributed with GNAT;  see file COPYING.  If not, write --\n--- to  the Free Software Foundation,  59 Temple Place - Suite 330,  Boston, --\n--- MA 02111-1307, USA.                                                      --\n---                                                                          --\n--- As a special exception,  if other files  instantiate  generics from this --\n--- unit, or you link  this unit with other files  to produce an executable, --\n--- this  unit  does not  by itself cause  the resulting  executable  to  be --\n--- covered  by the  GNU  General  Public  License.  This exception does not --\n--- however invalidate  any other reasons why  the executable file  might be --\n--- covered by the  GNU Public License.                                      --\n---                                                                          --\n--- GNAT was originally developed  by the GNAT team at  New York University. --\n--- Extensive contributions were provided by Ada Core Technologies Inc.      --\n---                                                                          --\n-------------------------------------------------------------------------------\n-\n-package body Ada.Exceptions is\n-\n-   procedure Last_Chance_Handler (Msg : System.Address; Line : Integer);\n-   pragma Import (C, Last_Chance_Handler, \"__gnat_last_chance_handler\");\n-   pragma No_Return (Last_Chance_Handler);\n-\n-   ---------------------\n-   -- Raise_Exception --\n-   ---------------------\n-\n-   procedure Raise_Exception (E : Exception_Id; Message : String := \"\") is\n-   begin\n-      Last_Chance_Handler (Message'Address, 0);\n-   end Raise_Exception;\n-\n-end Ada.Exceptions;"}, {"sha": "160a086f4922e2defaf9d7a393b04f7803773607", "filename": "gcc/ada/1aexcept.ads", "status": "removed", "additions": 0, "deletions": 66, "changes": 66, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b7e429ab799b3003bcd2f83011dd2ee3d7309691/gcc%2Fada%2F1aexcept.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b7e429ab799b3003bcd2f83011dd2ee3d7309691/gcc%2Fada%2F1aexcept.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2F1aexcept.ads?ref=b7e429ab799b3003bcd2f83011dd2ee3d7309691", "patch": "@@ -1,66 +0,0 @@\n-------------------------------------------------------------------------------\n---                                                                          --\n---                         GNAT RUN-TIME COMPONENTS                         --\n---                                                                          --\n---                       A D A . E X C E P T I O N S                        --\n---                   (Version for No Exception Handlers)                    --\n---                                                                          --\n---                                 S p e c                                  --\n---                                                                          --\n---          Copyright (C) 1992-2003 Free Software Foundation, Inc.          --\n---                                                                          --\n--- This specification is derived from the Ada Reference Manual for use with --\n--- GNAT. The copyright notice above, and the license provisions that follow --\n--- apply solely to the  contents of the part following the private keyword. --\n---                                                                          --\n--- GNAT is free software;  you can  redistribute it  and/or modify it under --\n--- terms of the  GNU General Public License as published  by the Free Soft- --\n--- ware  Foundation;  either version 2,  or (at your option) any later ver- --\n--- sion.  GNAT is distributed in the hope that it will be useful, but WITH- --\n--- OUT ANY WARRANTY;  without even the  implied warranty of MERCHANTABILITY --\n--- or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License --\n--- for  more details.  You should have  received  a copy of the GNU General --\n--- Public License  distributed with GNAT;  see file COPYING.  If not, write --\n--- to  the Free Software Foundation,  59 Temple Place - Suite 330,  Boston, --\n--- MA 02111-1307, USA.                                                      --\n---                                                                          --\n--- As a special exception,  if other files  instantiate  generics from this --\n--- unit, or you link  this unit with other files  to produce an executable, --\n--- this  unit  does not  by itself cause  the resulting  executable  to  be --\n--- covered  by the  GNU  General  Public  License.  This exception does not --\n--- however invalidate  any other reasons why  the executable file  might be --\n--- covered by the  GNU Public License.                                      --\n---                                                                          --\n--- GNAT was originally developed  by the GNAT team at  New York University. --\n--- Extensive contributions were provided by Ada Core Technologies Inc.      --\n---                                                                          --\n-------------------------------------------------------------------------------\n-\n---  This version is for use when the restriction No_Exception_Handlers\n---  is enabled.\n-\n-with System;\n-\n-package Ada.Exceptions is\n-\n-   type Exception_Id is private;\n-\n-   Null_Id : constant Exception_Id;\n-\n-   procedure Raise_Exception (E : Exception_Id; Message : String := \"\");\n-   --  Unconditionally call __gnat_last_chance_handler.\n-   --  Message should be a null terminated string.\n-   pragma No_Return (Raise_Exception);\n-\n-private\n-\n-   ------------------\n-   -- Exception_Id --\n-   ------------------\n-\n-   type Exception_Id is new System.Address;\n-   Null_Id : constant Exception_Id := Exception_Id (System.Null_Address);\n-\n-   pragma Inline_Always (Raise_Exception);\n-\n-end Ada.Exceptions;"}, {"sha": "bc1b7eb34ef841a4ba513d081126b15fe123dedf", "filename": "gcc/ada/1ic.ads", "status": "removed", "additions": 0, "deletions": 83, "changes": 83, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b7e429ab799b3003bcd2f83011dd2ee3d7309691/gcc%2Fada%2F1ic.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b7e429ab799b3003bcd2f83011dd2ee3d7309691/gcc%2Fada%2F1ic.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2F1ic.ads?ref=b7e429ab799b3003bcd2f83011dd2ee3d7309691", "patch": "@@ -1,83 +0,0 @@\n-------------------------------------------------------------------------------\n---                                                                          --\n---                         GNAT COMPILER COMPONENTS                         --\n---                                                                          --\n---                         I N T E R F A C E S . C                          --\n---                                                                          --\n---                                 S p e c                                  --\n---                                                                          --\n--- This specification is adapted from the Ada Reference Manual for use with --\n--- GNAT  Hi Integrity Edition.  In accordance  with the  copyright of  that --\n--- document,  you can  freely copy and modify this specification,  provided --\n--- that if you  redistribute a modified version,  any changes that you have --\n--- made are clearly indicated.                                              --\n---                                                                          --\n-------------------------------------------------------------------------------\n-\n---  This version contains only the type definitions for standard interfacing\n---  with C. All functions have been removed from the original spec.\n-\n-package Interfaces.C is\n-pragma Pure (C);\n-\n-   --  Declaration's based on C's <limits.h>\n-\n-   CHAR_BIT  : constant := 8;\n-   SCHAR_MIN : constant := -128;\n-   SCHAR_MAX : constant := 127;\n-   UCHAR_MAX : constant := 255;\n-\n-   --  Signed and Unsigned Integers. Note that in GNAT, we have ensured that\n-   --  the standard predefined Ada types correspond to the standard C types\n-\n-   type int   is new Integer;\n-   type short is new Short_Integer;\n-   type long  is new Long_Integer;\n-\n-   type signed_char is range SCHAR_MIN .. SCHAR_MAX;\n-   for signed_char'Size use CHAR_BIT;\n-\n-   type unsigned       is mod 2 ** int'Size;\n-   type unsigned_short is mod 2 ** short'Size;\n-   type unsigned_long  is mod 2 ** long'Size;\n-\n-   type unsigned_char is mod (UCHAR_MAX + 1);\n-   for unsigned_char'Size use CHAR_BIT;\n-\n-   subtype plain_char is unsigned_char;\n-\n-   type ptrdiff_t is\n-     range -(2 ** (Standard'Address_Size - 1)) ..\n-           +(2 ** (Standard'Address_Size - 1) - 1);\n-\n-   type size_t is mod 2 ** Standard'Address_Size;\n-\n-   --  Floating-Point\n-\n-   type C_float     is new Float;\n-   type double      is new Standard.Long_Float;\n-   type long_double is new Standard.Long_Long_Float;\n-\n-   ----------------------------\n-   -- Characters and Strings --\n-   ----------------------------\n-\n-   type char is new Character;\n-\n-   nul : constant char := char'First;\n-\n-   type char_array is array (size_t range <>) of aliased char;\n-   for char_array'Component_Size use CHAR_BIT;\n-\n-   ------------------------------------\n-   -- Wide Character and Wide String --\n-   ------------------------------------\n-\n-   type wchar_t is new Wide_Character;\n-   for wchar_t'Size use Standard'Wchar_T_Size;\n-\n-   wide_nul : constant wchar_t := wchar_t'First;\n-\n-   type wchar_array is array (size_t range <>) of aliased wchar_t;\n-\n-end Interfaces.C;"}, {"sha": "2a8eee7d83fb285859f47d37dc95866b80cc4db9", "filename": "gcc/ada/1ssecsta.adb", "status": "removed", "additions": 0, "deletions": 143, "changes": 143, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b7e429ab799b3003bcd2f83011dd2ee3d7309691/gcc%2Fada%2F1ssecsta.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b7e429ab799b3003bcd2f83011dd2ee3d7309691/gcc%2Fada%2F1ssecsta.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2F1ssecsta.adb?ref=b7e429ab799b3003bcd2f83011dd2ee3d7309691", "patch": "@@ -1,143 +0,0 @@\n-------------------------------------------------------------------------------\n---                                                                          --\n---                         GNAT COMPILER COMPONENTS                         --\n---                                                                          --\n---               S Y S T E M . S E C O N D A R Y _ S T A C K                --\n---                                                                          --\n---                                 B o d y                                  --\n---                                                                          --\n---          Copyright (C) 1992-2004 Free Software Foundation, Inc.          --\n---                                                                          --\n--- GNAT is free software;  you can  redistribute it  and/or modify it under --\n--- terms of the  GNU General Public License as published  by the Free Soft- --\n--- ware  Foundation;  either version 2,  or (at your option) any later ver- --\n--- sion.  GNAT is distributed in the hope that it will be useful, but WITH- --\n--- OUT ANY WARRANTY;  without even the  implied warranty of MERCHANTABILITY --\n--- or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License --\n--- for  more details.  You should have  received  a copy of the GNU General --\n--- Public License  distributed with GNAT;  see file COPYING.  If not, write --\n--- to  the Free Software Foundation,  59 Temple Place - Suite 330,  Boston, --\n--- MA 02111-1307, USA.                                                      --\n---                                                                          --\n--- As a special exception,  if other files  instantiate  generics from this --\n--- unit, or you link  this unit with other files  to produce an executable, --\n--- this  unit  does not  by itself cause  the resulting  executable  to  be --\n--- covered  by the  GNU  General  Public  License.  This exception does not --\n--- however invalidate  any other reasons why  the executable file  might be --\n--- covered by the  GNU Public License.                                      --\n---                                                                          --\n--- GNAT was originally developed  by the GNAT team at  New York University. --\n--- Extensive contributions were provided by Ada Core Technologies Inc.      --\n---                                                                          --\n-------------------------------------------------------------------------------\n-\n---  This is the HI-E version of this package.\n-\n-with Unchecked_Conversion;\n-\n-package body System.Secondary_Stack is\n-\n-   use type SSE.Storage_Offset;\n-\n-   type Memory is array (Mark_Id range <>) of SSE.Storage_Element;\n-\n-   type Stack_Id is record\n-      Top  : Mark_Id;\n-      Last : Mark_Id;\n-      Mem  : Memory (1 .. Mark_Id'Last);\n-   end record;\n-   pragma Suppress_Initialization (Stack_Id);\n-\n-   type Stack_Ptr is access Stack_Id;\n-\n-   function From_Addr is new Unchecked_Conversion (Address, Stack_Ptr);\n-\n-   function Get_Sec_Stack return Stack_Ptr;\n-   pragma Import (C, Get_Sec_Stack, \"__gnat_get_secondary_stack\");\n-   --  Return the address of the secondary stack.\n-   --  In a multi-threaded environment, Sec_Stack should be a thread-local\n-   --  variable.\n-\n-   --  Possible implementation of Get_Sec_Stack in a single-threaded\n-   --  environment:\n-   --\n-   --     Chunk : aliased Memory (1 .. Default_Secondary_Stack_Size);\n-   --     for Chunk'Alignment use Standard'Maximum_Alignment;\n-   --     --  The secondary stack.\n-   --\n-   --     function Get_Sec_Stack return Stack_Ptr is\n-   --     begin\n-   --        return From_Addr (Chunk'Address);\n-   --     end Get_Sec_Stack;\n-   --\n-   --  begin\n-   --     SS_Init (Chunk'Address, Default_Secondary_Stack_Size);\n-   --  end System.Secondary_Stack;\n-\n-   -----------------\n-   -- SS_Allocate --\n-   -----------------\n-\n-   procedure SS_Allocate\n-     (Address      : out System.Address;\n-      Storage_Size : SSE.Storage_Count)\n-   is\n-      Max_Align    : constant Mark_Id := Mark_Id (Standard'Maximum_Alignment);\n-      Max_Size     : constant Mark_Id :=\n-                       ((Mark_Id (Storage_Size) + Max_Align - 1) / Max_Align)\n-                         * Max_Align;\n-      Sec_Stack    : constant Stack_Ptr := Get_Sec_Stack;\n-\n-   begin\n-      if Sec_Stack.Top + Max_Size > Sec_Stack.Last then\n-         raise Storage_Error;\n-      end if;\n-\n-      Address := Sec_Stack.Mem (Sec_Stack.Top)'Address;\n-      Sec_Stack.Top := Sec_Stack.Top + Max_Size;\n-   end SS_Allocate;\n-\n-   -------------\n-   -- SS_Free --\n-   -------------\n-\n-   procedure SS_Free (Stk : in out System.Address) is\n-   begin\n-      Stk := Null_Address;\n-   end SS_Free;\n-\n-   -------------\n-   -- SS_Init --\n-   -------------\n-\n-   procedure SS_Init\n-     (Stk  : System.Address;\n-      Size : Natural := Default_Secondary_Stack_Size)\n-   is\n-      Stack : Stack_Ptr := From_Addr (Stk);\n-   begin\n-      pragma Assert (Size >= 2 * Mark_Id'Max_Size_In_Storage_Elements);\n-\n-      Stack.Top := Stack.Mem'First;\n-      Stack.Last := Mark_Id (Size) - 2 * Mark_Id'Max_Size_In_Storage_Elements;\n-   end SS_Init;\n-\n-   -------------\n-   -- SS_Mark --\n-   -------------\n-\n-   function SS_Mark return Mark_Id is\n-   begin\n-      return Get_Sec_Stack.Top;\n-   end SS_Mark;\n-\n-   ----------------\n-   -- SS_Release --\n-   ----------------\n-\n-   procedure SS_Release (M : Mark_Id) is\n-   begin\n-      Get_Sec_Stack.Top := M;\n-   end SS_Release;\n-\n-end System.Secondary_Stack;"}, {"sha": "1da66e86f2a0dcfad431b177974212ed2a150775", "filename": "gcc/ada/1ssecsta.ads", "status": "removed", "additions": 0, "deletions": 85, "changes": 85, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b7e429ab799b3003bcd2f83011dd2ee3d7309691/gcc%2Fada%2F1ssecsta.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b7e429ab799b3003bcd2f83011dd2ee3d7309691/gcc%2Fada%2F1ssecsta.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2F1ssecsta.ads?ref=b7e429ab799b3003bcd2f83011dd2ee3d7309691", "patch": "@@ -1,85 +0,0 @@\n-------------------------------------------------------------------------------\n---                                                                          --\n---                         GNAT COMPILER COMPONENTS                         --\n---                                                                          --\n---               S Y S T E M . S E C O N D A R Y _ S T A C K                --\n---                                                                          --\n---                                 S p e c                                  --\n---                                                                          --\n---          Copyright (C) 1992-2003 Free Software Foundation, Inc.          --\n---                                                                          --\n--- GNAT is free software;  you can  redistribute it  and/or modify it under --\n--- terms of the  GNU General Public License as published  by the Free Soft- --\n--- ware  Foundation;  either version 2,  or (at your option) any later ver- --\n--- sion.  GNAT is distributed in the hope that it will be useful, but WITH- --\n--- OUT ANY WARRANTY;  without even the  implied warranty of MERCHANTABILITY --\n--- or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License --\n--- for  more details.  You should have  received  a copy of the GNU General --\n--- Public License  distributed with GNAT;  see file COPYING.  If not, write --\n--- to  the Free Software Foundation,  59 Temple Place - Suite 330,  Boston, --\n--- MA 02111-1307, USA.                                                      --\n---                                                                          --\n--- As a special exception,  if other files  instantiate  generics from this --\n--- unit, or you link  this unit with other files  to produce an executable, --\n--- this  unit  does not  by itself cause  the resulting  executable  to  be --\n--- covered  by the  GNU  General  Public  License.  This exception does not --\n--- however invalidate  any other reasons why  the executable file  might be --\n--- covered by the  GNU Public License.                                      --\n---                                                                          --\n--- GNAT was originally developed  by the GNAT team at  New York University. --\n--- Extensive contributions were provided by Ada Core Technologies Inc.      --\n---                                                                          --\n-------------------------------------------------------------------------------\n-\n---  Version for use in HI-E mode\n-\n-with System.Storage_Elements;\n-\n-package System.Secondary_Stack is\n-\n-   package SSE renames System.Storage_Elements;\n-\n-   Default_Secondary_Stack_Size : Natural := 10 * 1024;\n-   --  Default size of a secondary stack. May be modified by binder -D switch\n-\n-   procedure SS_Init\n-     (Stk  : System.Address;\n-      Size : Natural := Default_Secondary_Stack_Size);\n-   --  Initialize the secondary stack with a main stack of the given Size.\n-   --\n-   --  Stk is an \"in\" parameter that is already pointing to a memory area of\n-   --  size Size.\n-   --\n-   --  The secondary stack is fixed, and any attempt to allocate more than the\n-   --  initial size will result in a Storage_Error being raised.\n-\n-   procedure SS_Allocate\n-     (Address      : out System.Address;\n-      Storage_Size : SSE.Storage_Count);\n-   --  Allocate enough space for a 'Storage_Size' bytes object with Maximum\n-   --  alignment. The address of the allocated space is returned in 'Address'\n-\n-   procedure SS_Free (Stk : in out System.Address);\n-   --  Release the memory allocated for the Secondary Stack. That is to say,\n-   --  all the allocated chuncks.\n-   --  Upon return, Stk will be set to System.Null_Address\n-\n-   type Mark_Id is private;\n-   --  Type used to mark the stack.\n-\n-   function SS_Mark return Mark_Id;\n-   --  Return the Mark corresponding to the current state of the stack\n-\n-   procedure SS_Release (M : Mark_Id);\n-   --  Restore the state of the stack corresponding to the mark M. If an\n-   --  additional chunk have been allocated, it will never be freed during a\n-\n-private\n-\n-   SS_Pool : Integer;\n-   --  Unused entity that is just present to ease the sharing of the pool\n-   --  mechanism for specific allocation/deallocation in the compiler\n-\n-   type Mark_Id is new SSE.Integer_Address;\n-\n-end System.Secondary_Stack;"}, {"sha": "ba407a29541ec502f2415b7279b8aa0c19d8411f", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b291953f9d4b1c4f927cd20a7905d4f633fa3162/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b291953f9d4b1c4f927cd20a7905d4f633fa3162/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=b291953f9d4b1c4f927cd20a7905d4f633fa3162", "patch": "@@ -65,7 +65,8 @@\n \n \t* Makefile.in: Remove mention of Makefile.adalib, unused.\n \n-\t* Makefile.adalib: Removed, unused.\n+\t* Makefile.adalib, 1aexcept.adb, 1aexcept.ads, 1ic.ads, 1ssecsta.adb,\n+\t1ssecsta.ads: Removed, unused.\n \n 2004-01-21  Javier Miranda  <miranda@gnat.com>\n "}]}