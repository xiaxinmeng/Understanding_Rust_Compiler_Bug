{"sha": "1dd584a2d766d0679c9c68bdb11449196d3b73d9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWRkNTg0YTJkNzY2ZDA2NzljOWM2OGJkYjExNDQ5MTk2ZDNiNzNkOQ==", "commit": {"author": {"name": "Kai Tietz", "email": "kai.tietz@onevision.com", "date": "2011-01-21T09:05:14Z"}, "committer": {"name": "Kai Tietz", "email": "ktietz@gcc.gnu.org", "date": "2011-01-21T09:05:14Z"}, "message": "re PR bootstrap/47215 (Failed to bootstrap)\n\n2011-01-21  Kai Tietz  <kai.tietz@onevision.com>\n\n        PR bootstrap/47215\n        * decl.c (java_init_decl_processing): Remove\n        va_list_type_node related type initializations.\n\n2011-01-21  Kai Tietz  <kai.tietz@onevision.com>\n\n\tPR bootstrap/47215\n\t* config/i386/i386.c (ix86_local_alignment): Handle\n\tcase for va_list_type_node is nil.\n\t(ix86_canonical_va_list_type): Likewise.\n\nFrom-SVN: r169080", "tree": {"sha": "186772f805b6095c3f0cded06a31b916e6cc0215", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/186772f805b6095c3f0cded06a31b916e6cc0215"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1dd584a2d766d0679c9c68bdb11449196d3b73d9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1dd584a2d766d0679c9c68bdb11449196d3b73d9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1dd584a2d766d0679c9c68bdb11449196d3b73d9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1dd584a2d766d0679c9c68bdb11449196d3b73d9/comments", "author": null, "committer": null, "parents": [{"sha": "7f1f7ffb496174346fd73b93ebaf12ee4a26685f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7f1f7ffb496174346fd73b93ebaf12ee4a26685f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7f1f7ffb496174346fd73b93ebaf12ee4a26685f"}], "stats": {"total": 35, "additions": 17, "deletions": 18}, "files": [{"sha": "dffe700995cc0f30e8059cccf82211a67ba5a916", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1dd584a2d766d0679c9c68bdb11449196d3b73d9/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1dd584a2d766d0679c9c68bdb11449196d3b73d9/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=1dd584a2d766d0679c9c68bdb11449196d3b73d9", "patch": "@@ -1,3 +1,10 @@\n+2011-01-21  Kai Tietz  <kai.tietz@onevision.com>\n+\n+\tPR bootstrap/47215\n+\t* config/i386/i386.c (ix86_local_alignment): Handle\n+\tcase for va_list_type_node is nil.\n+\t(ix86_canonical_va_list_type): Likewise.\n+\n 2011-01-21  Alan Modra  <amodra@gmail.com>\n \n \t* config/rs6000/rs6000-c.c (rs6000_cpu_cpp_builtins): Add"}, {"sha": "1484deab9d007672ad510c0ebc49f181935f003e", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1dd584a2d766d0679c9c68bdb11449196d3b73d9/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1dd584a2d766d0679c9c68bdb11449196d3b73d9/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=1dd584a2d766d0679c9c68bdb11449196d3b73d9", "patch": "@@ -22931,8 +22931,9 @@ ix86_local_alignment (tree exp, enum machine_mode mode,\n       && TARGET_SSE)\n     {\n       if (AGGREGATE_TYPE_P (type)\n-\t   && (TYPE_MAIN_VARIANT (type)\n-\t       != TYPE_MAIN_VARIANT (va_list_type_node))\n+\t   && (va_list_type_node == NULL_TREE\n+\t       || (TYPE_MAIN_VARIANT (type)\n+\t\t   != TYPE_MAIN_VARIANT (va_list_type_node)))\n \t   && TYPE_SIZE (type)\n \t   && TREE_CODE (TYPE_SIZE (type)) == INTEGER_CST\n \t   && (TREE_INT_CST_LOW (TYPE_SIZE (type)) >= 16\n@@ -33682,7 +33683,7 @@ ix86_canonical_va_list_type (tree type)\n   else if (POINTER_TYPE_P (type) && TREE_CODE (TREE_TYPE (type)) == ARRAY_TYPE)\n     type = TREE_TYPE (type);\n \n-  if (TARGET_64BIT)\n+  if (TARGET_64BIT && va_list_type_node != NULL_TREE)\n     {\n       wtype = va_list_type_node;\n \t  gcc_assert (wtype != NULL_TREE);"}, {"sha": "28e89649c09ac82fd0d5354299f4348964b96079", "filename": "gcc/java/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1dd584a2d766d0679c9c68bdb11449196d3b73d9/gcc%2Fjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1dd584a2d766d0679c9c68bdb11449196d3b73d9/gcc%2Fjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2FChangeLog?ref=1dd584a2d766d0679c9c68bdb11449196d3b73d9", "patch": "@@ -1,3 +1,9 @@\n+2011-01-21  Kai Tietz  <kai.tietz@onevision.com>\n+\n+\tPR bootstrap/47215\n+\t* decl.c (java_init_decl_processing): Remove\n+\tva_list_type_node related type initializations.\n+\n 2011-01-11  Kai Tietz  <kai.tietz@onevision.com>\n \n \tPR bootstrap/47215"}, {"sha": "a17b826696b165ec094b1804788d8ef1c0b31ba8", "filename": "gcc/java/decl.c", "status": "modified", "additions": 0, "deletions": 15, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1dd584a2d766d0679c9c68bdb11449196d3b73d9/gcc%2Fjava%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1dd584a2d766d0679c9c68bdb11449196d3b73d9/gcc%2Fjava%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fdecl.c?ref=1dd584a2d766d0679c9c68bdb11449196d3b73d9", "patch": "@@ -1153,21 +1153,6 @@ java_init_decl_processing (void)\n   soft_lrem_node\n     = add_builtin_function (\"_Jv_remJ\", t,\n \t\t\t    0, NOT_BUILT_IN, NULL, NULL_TREE);\n-  /* Initialize va_list_type_node.  */\n-  unsigned_type_node = make_unsigned_type (INT_TYPE_SIZE);\n-  long_integer_type_node = make_signed_type (LONG_TYPE_SIZE);\n-\n-  t = targetm.build_builtin_va_list ();\n-\n-  /* Many back-ends define record types without setting TYPE_NAME.\n-     If we copied the record type here, we'd keep the original\n-     record type without a name.  This breaks name mangling.  So,\n-     don't copy record types and let c_common_nodes_and_builtins()\n-     declare the type to be __builtin_va_list.  */\n-  if (TREE_CODE (t) != RECORD_TYPE)\n-    t = build_variant_type_copy (t);\n-\n-  va_list_type_node = t;\n \n   initialize_builtins ();\n "}]}