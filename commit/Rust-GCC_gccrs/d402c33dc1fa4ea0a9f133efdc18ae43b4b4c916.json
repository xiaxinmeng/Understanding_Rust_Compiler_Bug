{"sha": "d402c33dc1fa4ea0a9f133efdc18ae43b4b4c916", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDQwMmMzM2RjMWZhNGVhMGE5ZjEzM2VmZGMxOGFlNDNiNGI0YzkxNg==", "commit": {"author": {"name": "Jan Hubicka", "email": "jh@suse.cz", "date": "2010-06-28T00:10:34Z"}, "committer": {"name": "Jan Hubicka", "email": "hubicka@gcc.gnu.org", "date": "2010-06-28T00:10:34Z"}, "message": "re PR middle-end/44671 (Partial inlining breaks C++)\n\n\n\tPR middle-end/44671\n\tPR middle-end/44686\n\t* tree.c (build_function_decl_skip_args): Clear DECL_BUILT_IN on signature\n\tchange.\n\t* ipa-split.c (split_function): Always clear DECL_BUILT_IN.\n\t* ipa-prop.c (ipa_modify_formal_parameters): Likewise.\n\n\t* gcc.c-torture/pr44686.c: New file.\n\nFrom-SVN: r161476", "tree": {"sha": "6ab1c2265180e9232911690d3ba0715ff2be32d0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6ab1c2265180e9232911690d3ba0715ff2be32d0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d402c33dc1fa4ea0a9f133efdc18ae43b4b4c916", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d402c33dc1fa4ea0a9f133efdc18ae43b4b4c916", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d402c33dc1fa4ea0a9f133efdc18ae43b4b4c916", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d402c33dc1fa4ea0a9f133efdc18ae43b4b4c916/comments", "author": null, "committer": null, "parents": [{"sha": "e7041633a5b9ac8eb09b92de5321bf3184a7b98f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e7041633a5b9ac8eb09b92de5321bf3184a7b98f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e7041633a5b9ac8eb09b92de5321bf3184a7b98f"}], "stats": {"total": 44, "additions": 43, "deletions": 1}, "files": [{"sha": "d53ba696e7ed1a57a42f6800f9320dc89b5ba0e4", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d402c33dc1fa4ea0a9f133efdc18ae43b4b4c916/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d402c33dc1fa4ea0a9f133efdc18ae43b4b4c916/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=d402c33dc1fa4ea0a9f133efdc18ae43b4b4c916", "patch": "@@ -1,3 +1,12 @@\n+2010-06-27  Jan Hubicka  <jh@suse.cz>\n+\n+\tPR middle-end/44671\n+\tPR middle-end/44686\n+\t* tree.c (build_function_decl_skip_args): Clear DECL_BUILT_IN on signature\n+\tchange.\n+\t* ipa-split.c (split_function): Always clear DECL_BUILT_IN.\n+\t* ipa-prop.c (ipa_modify_formal_parameters): Likewise.\n+\n 2010-06-27  Anatoly Sokolov  <aesok@post.ru>\n \n \t* target.h (struct gcc_target): Add register_move_cost field."}, {"sha": "997f8ec9612688fa4e074551d32cb1393c81207c", "filename": "gcc/ipa-prop.c", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d402c33dc1fa4ea0a9f133efdc18ae43b4b4c916/gcc%2Fipa-prop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d402c33dc1fa4ea0a9f133efdc18ae43b4b4c916/gcc%2Fipa-prop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-prop.c?ref=d402c33dc1fa4ea0a9f133efdc18ae43b4b4c916", "patch": "@@ -2087,6 +2087,13 @@ ipa_modify_formal_parameters (tree fndecl, ipa_parm_adjustment_vec adjustments,\n       DECL_VINDEX (fndecl) = NULL_TREE;\n     }\n \n+  /* When signature changes, we need to clear builtin info.  */\n+  if (DECL_BUILT_IN (fndecl))\n+    {\n+      DECL_BUILT_IN_CLASS (fndecl) = NOT_BUILT_IN;\n+      DECL_FUNCTION_CODE (fndecl) = (enum built_in_function) 0;\n+    }\n+\n   /* This is a new type, not a copy of an old type.  Need to reassociate\n      variants.  We can handle everything except the main variant lazily.  */\n   t = TYPE_MAIN_VARIANT (orig_type);"}, {"sha": "ccc89c431c35cbf19da2a04eea35b73767015193", "filename": "gcc/ipa-split.c", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d402c33dc1fa4ea0a9f133efdc18ae43b4b4c916/gcc%2Fipa-split.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d402c33dc1fa4ea0a9f133efdc18ae43b4b4c916/gcc%2Fipa-split.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-split.c?ref=d402c33dc1fa4ea0a9f133efdc18ae43b4b4c916", "patch": "@@ -277,7 +277,7 @@ consider_split (struct split_point *current, bitmap non_ssa_vars,\n     }\n \n   /* FIXME: we currently can pass only SSA function parameters to the split\n-     arguments.  Once parm_adjustment infrastructure is supported by clonning,\n+     arguments.  Once parm_adjustment infrastructure is supported by cloning,\n      we can pass more than that.  */\n   if (num_args != bitmap_count_bits (current->ssa_names_to_pass))\n     {\n@@ -843,6 +843,14 @@ split_function (struct split_point *split_point)\n \t\t\t\t     args_to_skip,\n \t\t\t\t     split_point->split_bbs,\n \t\t\t\t     split_point->entry_bb, \"_part\");\n+  /* For usual cloning it is enough to clear builtin only when signature\n+     changes.  For partial inlining we however can not expect the part\n+     of builtin implementation to have same semantic as the whole.  */\n+  if (DECL_BUILT_IN (node->decl))\n+    {\n+      DECL_BUILT_IN_CLASS (node->decl) = NOT_BUILT_IN;\n+      DECL_FUNCTION_CODE (node->decl) = (enum built_in_function) 0;\n+    }\n   cgraph_node_remove_callees (cgraph_node (current_function_decl));\n   if (!split_part_return_p)\n     TREE_THIS_VOLATILE (node->decl) = 1;"}, {"sha": "be888c8906856be3ddc8751d1a7a0ac41bde8d0e", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d402c33dc1fa4ea0a9f133efdc18ae43b4b4c916/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d402c33dc1fa4ea0a9f133efdc18ae43b4b4c916/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=d402c33dc1fa4ea0a9f133efdc18ae43b4b4c916", "patch": "@@ -1,3 +1,7 @@\n+2010-06-27  Jan Hubicka  <jh@suse.cz>\n+\n+\t* gcc.c-torture/compile/pr44686.c: New file.\n+\n 2010-06-27  Richard Guenther  <rguenther@suse.de>\n \n \tPR tree-optimization/44683"}, {"sha": "eacd83d3130869f5bad8aefc08cf0e1e84bed1ca", "filename": "gcc/testsuite/gcc.c-torture/compile/pr44686.c", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d402c33dc1fa4ea0a9f133efdc18ae43b4b4c916/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fpr44686.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d402c33dc1fa4ea0a9f133efdc18ae43b4b4c916/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fpr44686.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fpr44686.c?ref=d402c33dc1fa4ea0a9f133efdc18ae43b4b4c916", "patch": "@@ -0,0 +1,7 @@\n+/* { dg-options \"-O2 -fipa-pta -fprofile-generate\" } */\n+void *\n+memcpy (void *a, const void *b, __SIZE_TYPE__ len)\n+{\n+  if (a == b)\n+    __builtin_abort ();\n+}"}, {"sha": "5e7de012e2ab44ad652905b2b12e43ef45429788", "filename": "gcc/tree.c", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d402c33dc1fa4ea0a9f133efdc18ae43b4b4c916/gcc%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d402c33dc1fa4ea0a9f133efdc18ae43b4b4c916/gcc%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.c?ref=d402c33dc1fa4ea0a9f133efdc18ae43b4b4c916", "patch": "@@ -7303,6 +7303,13 @@ build_function_decl_skip_args (tree orig_decl, bitmap args_to_skip)\n      we expect first argument to be THIS pointer.   */\n   if (bitmap_bit_p (args_to_skip, 0))\n     DECL_VINDEX (new_decl) = NULL_TREE;\n+\n+  /* When signature changes, we need to clear builtin info.  */\n+  if (DECL_BUILT_IN (new_decl) && !bitmap_empty_p (args_to_skip))\n+    {\n+      DECL_BUILT_IN_CLASS (new_decl) = NOT_BUILT_IN;\n+      DECL_FUNCTION_CODE (new_decl) = (enum built_in_function) 0;\n+    }\n   return new_decl;\n }\n "}]}