{"sha": "b200de021c2c1bb5b3794e793831e2211466620c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjIwMGRlMDIxYzJjMWJiNWIzNzk0ZTc5MzgzMWUyMjExNDY2NjIwYw==", "commit": {"author": {"name": "Oleg Endo", "email": "olegendo@gcc.gnu.org", "date": "2014-05-16T23:12:19Z"}, "committer": {"name": "Oleg Endo", "email": "olegendo@gcc.gnu.org", "date": "2014-05-16T23:12:19Z"}, "message": "re PR target/54089 ([SH] Refactor shift patterns)\n\ngcc/\n\tPR target/54089\n\t* config/sh/predicates.md (negt_reg_shl31_operand): Match additional\n\tpatterns.\n\t* config/sh/sh.md (*negt_msb): Merge SH2A and non-SH2A variants.\n\nFrom-SVN: r210537", "tree": {"sha": "4aef1c4759789c8b0ccc2cc0c0ec4f795651538a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4aef1c4759789c8b0ccc2cc0c0ec4f795651538a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b200de021c2c1bb5b3794e793831e2211466620c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b200de021c2c1bb5b3794e793831e2211466620c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b200de021c2c1bb5b3794e793831e2211466620c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b200de021c2c1bb5b3794e793831e2211466620c/comments", "author": null, "committer": null, "parents": [{"sha": "cf40f9734f3397ff29b603d1c528475c17a5ba79", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cf40f9734f3397ff29b603d1c528475c17a5ba79", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cf40f9734f3397ff29b603d1c528475c17a5ba79"}], "stats": {"total": 67, "additions": 48, "deletions": 19}, "files": [{"sha": "e73879ceddc3146741cfb66ab589552bf217e3b9", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b200de021c2c1bb5b3794e793831e2211466620c/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b200de021c2c1bb5b3794e793831e2211466620c/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=b200de021c2c1bb5b3794e793831e2211466620c", "patch": "@@ -1,3 +1,10 @@\n+2014-05-16  Oleg Endo  <olegendo@gcc.gnu.org>\n+\n+\tPR target/54089\n+\t* config/sh/predicates.md (negt_reg_shl31_operand): Match additional\n+\tpatterns.\n+\t* config/sh/sh.md (*negt_msb): Merge SH2A and non-SH2A variants.\n+\n 2014-05-16  Dehao Chen  <dehao@google.com>\n \n \t* ira-int.h (REG_FREQ_FROM_EDGE_FREQ): Use optimize_function_for_size_p."}, {"sha": "d7251f36e35e7a944d1b4461bde8d46e1a787a23", "filename": "gcc/config/sh/predicates.md", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b200de021c2c1bb5b3794e793831e2211466620c/gcc%2Fconfig%2Fsh%2Fpredicates.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b200de021c2c1bb5b3794e793831e2211466620c/gcc%2Fconfig%2Fsh%2Fpredicates.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fpredicates.md?ref=b200de021c2c1bb5b3794e793831e2211466620c", "patch": "@@ -1132,6 +1132,28 @@\n (define_predicate \"negt_reg_shl31_operand\"\n   (match_code \"plus,minus,if_then_else\")\n {\n+  /* (minus:SI (const_int -2147483648)  ;; 0xffffffff80000000\n+\t       (ashift:SI (match_operand:SI 1 \"t_reg_operand\")\n+\t\t\t  (const_int 31)))\n+  */\n+  if (GET_CODE (op) == MINUS && satisfies_constraint_Jhb (XEXP (op, 0))\n+      && GET_CODE (XEXP (op, 1)) == ASHIFT\n+      && t_reg_operand (XEXP (XEXP (op, 1), 0), SImode)\n+      && CONST_INT_P (XEXP (XEXP (op, 1), 1))\n+      && INTVAL (XEXP (XEXP (op, 1), 1)) == 31)\n+    return true;\n+\n+  /* (plus:SI (ashift:SI (match_operand:SI 1 \"t_reg_operand\")\n+\t\t\t (const_int 31))\n+\t      (const_int -2147483648))  ;; 0xffffffff80000000\n+  */\n+  if (GET_CODE (op) == PLUS && satisfies_constraint_Jhb (XEXP (op, 1))\n+      && GET_CODE (XEXP (op, 0)) == ASHIFT\n+      && t_reg_operand (XEXP (XEXP (op, 0), 0), SImode)\n+      && CONST_INT_P (XEXP (XEXP (op, 0), 1))\n+      && INTVAL (XEXP (XEXP (op, 0), 1)) == 31)\n+    return true;\n+\n   /* (plus:SI (mult:SI (match_operand:SI 1 \"t_reg_operand\")\n \t\t       (const_int -2147483648))  ;; 0xffffffff80000000\n \t      (const_int -2147483648))"}, {"sha": "609645b4f44dfc7a48f829bb8a193322a1363716", "filename": "gcc/config/sh/sh.md", "status": "modified", "additions": 19, "deletions": 19, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b200de021c2c1bb5b3794e793831e2211466620c/gcc%2Fconfig%2Fsh%2Fsh.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b200de021c2c1bb5b3794e793831e2211466620c/gcc%2Fconfig%2Fsh%2Fsh.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fsh.md?ref=b200de021c2c1bb5b3794e793831e2211466620c", "patch": "@@ -11568,34 +11568,34 @@ label:\n ;; Store inverted T bit as MSB in a reg.\n ;; T = 0: 0x80000000 -> reg\n ;; T = 1: 0x00000000 -> reg\n-;; On SH2A we can get away without clobbering the T_REG.\n+;; On SH2A we can get away without clobbering the T_REG using the movrt insn.\n+;; On non SH2A we resort to the following sequence:\n+;;\tmovt\tRn\n+;;\ttst\tRn,Rn\n+;;\trotcr\tRn\n+;; The T bit value will be modified during the sequence, but the rotcr insn\n+;; will restore its original value.\n (define_insn_and_split \"*negt_msb\"\n   [(set (match_operand:SI 0 \"arith_reg_dest\")\n \t(match_operand:SI 1 \"negt_reg_shl31_operand\"))]\n-  \"TARGET_SH2A\"\n+  \"TARGET_SH1\"\n   \"#\"\n   \"&& can_create_pseudo_p ()\"\n   [(const_int 0)]\n {\n   rtx tmp = gen_reg_rtx (SImode);\n-  emit_insn (gen_movrt (tmp, get_t_reg_rtx ()));\n-  emit_insn (gen_rotrsi3 (operands[0], tmp, const1_rtx));\n-  DONE;\n-})\n \n-(define_insn_and_split \"*negt_msb\"\n-  [(set (match_operand:SI 0 \"arith_reg_dest\")\n-\t(match_operand:SI 1 \"negt_reg_shl31_operand\"))\n-   (clobber (reg:SI T_REG))]\n-  \"TARGET_SH1 && !TARGET_SH2A\"\n-  \"#\"\n-  \"&& can_create_pseudo_p ()\"\n-  [(const_int 0)]\n-{\n-  rtx tmp = gen_reg_rtx (SImode);\n-  emit_move_insn (tmp, get_t_reg_rtx ());\n-  emit_insn (gen_cmpeqsi_t (tmp, const0_rtx));\n-  emit_insn (gen_rotcr (operands[0], tmp, get_t_reg_rtx ()));\n+  if (TARGET_SH2A)\n+    {\n+      emit_insn (gen_movrt (tmp, get_t_reg_rtx ()));\n+      emit_insn (gen_rotrsi3 (operands[0], tmp, const1_rtx));\n+    }\n+  else\n+    {\n+      emit_move_insn (tmp, get_t_reg_rtx ());\n+      emit_insn (gen_cmpeqsi_t (tmp, const0_rtx));\n+      emit_insn (gen_rotcr (operands[0], tmp, get_t_reg_rtx ()));\n+    }\n   DONE;\n })\n "}]}