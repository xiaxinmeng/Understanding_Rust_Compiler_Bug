{"sha": "40e5b283996d0f4856d7c530caf390f2e0c86daf", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDBlNWIyODM5OTZkMGY0ODU2ZDdjNTMwY2FmMzkwZjJlMGM4NmRhZg==", "commit": {"author": {"name": "Benjamin Kosnik", "email": "bkoz@redhat.com", "date": "2002-04-03T02:32:52Z"}, "committer": {"name": "Benjamin Kosnik", "email": "bkoz@gcc.gnu.org", "date": "2002-04-03T02:32:52Z"}, "message": "ios.cc: (ios_base::Init::_S_ios_destroy): Remove flush calls.\n\n\n2002-04-02  Benjamin Kosnik  <bkoz@redhat.com>\n\n\tlibstdc++/5268\n\t* src/ios.cc: (ios_base::Init::_S_ios_destroy): Remove flush calls.\n\t* testsuite/27_io/ios_init.cc (tests04): Add test.\n\n\tlibstdc++/3983\n\t* include/bits/basic_ios.h (basic_ios::_M_get_fctype_ios): Remove.\n\t(basic_ios::_M_ios_fctype): Consistently name to _M_fctype.\n\t* include/bits/basic_ios.tcc: Same. Remove outdated comments.\n\t* include/bits/istream.tcc: Use _M_fctype, make consistent with\n\tostream.\n\t* testsuite/27_io/ios_init.cc (tests03): Add test.\n\nFrom-SVN: r51777", "tree": {"sha": "6251cfb06881554892dd18eece7ba47087929eaa", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6251cfb06881554892dd18eece7ba47087929eaa"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/40e5b283996d0f4856d7c530caf390f2e0c86daf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/40e5b283996d0f4856d7c530caf390f2e0c86daf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/40e5b283996d0f4856d7c530caf390f2e0c86daf", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/40e5b283996d0f4856d7c530caf390f2e0c86daf/comments", "author": null, "committer": null, "parents": [{"sha": "7a145e929d4f1df9043baf5a26e991629ce077dc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7a145e929d4f1df9043baf5a26e991629ce077dc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7a145e929d4f1df9043baf5a26e991629ce077dc"}], "stats": {"total": 151, "additions": 113, "deletions": 38}, "files": [{"sha": "bbb282d26100182eb506b19e3a8057409e9f89f7", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/40e5b283996d0f4856d7c530caf390f2e0c86daf/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/40e5b283996d0f4856d7c530caf390f2e0c86daf/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=40e5b283996d0f4856d7c530caf390f2e0c86daf", "patch": "@@ -1,3 +1,17 @@\n+2002-04-02  Benjamin Kosnik  <bkoz@redhat.com>\n+\t\n+\tlibstdc++/5268\n+\t* src/ios.cc: (ios_base::Init::_S_ios_destroy): Remove flush calls.\n+\t* testsuite/27_io/ios_init.cc (tests04): Add test.\n+\n+\tlibstdc++/3983\n+\t* include/bits/basic_ios.h (basic_ios::_M_get_fctype_ios): Remove.\n+\t(basic_ios::_M_ios_fctype): Consistently name to _M_fctype.\n+\t* include/bits/basic_ios.tcc: Same. Remove outdated comments.\n+\t* include/bits/istream.tcc: Use _M_fctype, make consistent with\n+\tostream.\n+\t* testsuite/27_io/ios_init.cc (tests03): Add test.\n+\t\n 2002-04-02  Phil Edwards  <pme@gcc.gnu.org>\n \n \t* include/Makefile.am (install-data-local):  Use mkinstalldirs."}, {"sha": "13ad0f82e99064feb361f392abf1751b451cd11a", "filename": "libstdc++-v3/include/bits/basic_ios.h", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/40e5b283996d0f4856d7c530caf390f2e0c86daf/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_ios.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/40e5b283996d0f4856d7c530caf390f2e0c86daf/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_ios.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_ios.h?ref=40e5b283996d0f4856d7c530caf390f2e0c86daf", "patch": "@@ -69,17 +69,13 @@ namespace std\n       basic_streambuf<_CharT, _Traits>* _M_streambuf;\n \n       // Cached use_facet<ctype>, which is based on the current locale info.\n-      const __ctype_type*\t\t_M_ios_fctype;      \n+      const __ctype_type*\t\t_M_fctype;      \n       // From ostream.\n       const __numput_type* \t\t_M_fnumput;\n       // From istream.\n       const __numget_type* \t\t_M_fnumget;\n \n     public:\n-      const __ctype_type*\t\n-      _M_get_fctype_ios(void)\n-      { return _M_ios_fctype; }\n-\n       operator void*() const \n       { return this->fail() ? 0 : const_cast<basic_ios*>(this); }\n "}, {"sha": "1e345dc2117205d9394cf744a348547c05f08abd", "filename": "libstdc++-v3/include/bits/basic_ios.tcc", "status": "modified", "additions": 6, "deletions": 12, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/40e5b283996d0f4856d7c530caf390f2e0c86daf/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_ios.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/40e5b283996d0f4856d7c530caf390f2e0c86daf/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_ios.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_ios.tcc?ref=40e5b283996d0f4856d7c530caf390f2e0c86daf", "patch": "@@ -67,12 +67,6 @@ namespace std\n       _Words* __words = (__rhs._M_word_size <= _S_local_word_size) ?\n \t_M_local_word : new _Words[__rhs._M_word_size];\n \n-      // XXX This is the only reason _Callback_list was defined\n-      // inline. The suspicion is that this increased compilation\n-      // times dramatically for functions that use this member\n-      // function (inserters_extractors, ios_manip_fmtflags). FIX ME,\n-      // clean this stuff up. Callbacks are broken right now, anyway.\n-\n       // Bump refs before doing callbacks, for safety.\n       _Callback_list* __cb = __rhs._M_callbacks;\n       if (__cb) \n@@ -113,8 +107,8 @@ namespace std\n     basic_ios<_CharT, _Traits>::narrow(char_type __c, char __dfault) const\n     { \n       char __ret = __dfault;\n-      if (_M_check_facet(_M_ios_fctype))\n-\t__ret = _M_ios_fctype->narrow(__c, __dfault); \n+      if (_M_check_facet(_M_fctype))\n+\t__ret = _M_fctype->narrow(__c, __dfault); \n       return __ret;\n     }\n \n@@ -123,8 +117,8 @@ namespace std\n     basic_ios<_CharT, _Traits>::widen(char __c) const\n     {\n       char_type __ret = char_type();\n-      if (_M_check_facet(_M_ios_fctype))\n-\t__ret = _M_ios_fctype->widen(__c); \n+      if (_M_check_facet(_M_fctype))\n+\t__ret = _M_fctype->widen(__c); \n       return __ret;\n     }\n \n@@ -175,9 +169,9 @@ namespace std\n     basic_ios<_CharT, _Traits>::_M_cache_facets(const locale& __loc)\n     {\n       if (has_facet<__ctype_type>(__loc))\n-\t_M_ios_fctype = &use_facet<__ctype_type>(__loc);\n+\t_M_fctype = &use_facet<__ctype_type>(__loc);\n       else\n-\t_M_ios_fctype = 0;\n+\t_M_fctype = 0;\n       // Should be filled in by ostream and istream, respectively.\n       if (has_facet<__numput_type>(__loc))\n \t_M_fnumput = &use_facet<__numput_type>(__loc); "}, {"sha": "7f985594f9b531dc288d58485be52046c49f0530", "filename": "libstdc++-v3/include/bits/istream.tcc", "status": "modified", "additions": 16, "deletions": 15, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/40e5b283996d0f4856d7c530caf390f2e0c86daf/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fistream.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/40e5b283996d0f4856d7c530caf390f2e0c86daf/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fistream.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fistream.tcc?ref=40e5b283996d0f4856d7c530caf390f2e0c86daf", "patch": "@@ -50,12 +50,13 @@ namespace std\n \t  if (!__noskipws && (__in.flags() & ios_base::skipws))\n \t    {\t  \n \t      const __int_type __eof = traits_type::eof();\n-\t      const __ctype_type* __ctype = __in._M_get_fctype_ios();\n \t      __streambuf_type* __sb = __in.rdbuf();\n \t      __int_type __c = __sb->sgetc();\n-\t      \n-\t      while (__c != __eof && __ctype->is(ctype_base::space, __c))\n-\t\t__c = __sb->snextc();\n+\n+\t      if (__in._M_check_facet(__in._M_fctype))\n+\t\twhile (__c != __eof\n+\t\t       && __in._M_fctype->is(ctype_base::space, __c))\n+\t\t  __c = __sb->snextc();\n \n #ifdef _GLIBCPP_RESOLVE_LIB_DEFECTS\n //195.  Should basic_istream::sentry's constructor ever set eofbit? \n@@ -1098,20 +1099,20 @@ namespace std\n \t      if (__num == 0)\n \t\t__num = numeric_limits<streamsize>::max();\n \t      \n+\t      const __ctype_type& __ctype = use_facet<__ctype_type>(__in.getloc());\n+\t      const int_type __eof = _Traits::eof();\n \t      __streambuf_type* __sb = __in.rdbuf();\n-\t      const __ctype_type* __ctype = __in._M_get_fctype_ios();\n \t      int_type __c = __sb->sbumpc();\n-\t      const int_type __eof = _Traits::eof();\n-\t      bool __testsp = __ctype->is(ctype_base::space, __c);\n \t      bool __testeof =  __c == __eof;\n+\t      bool __testsp = __ctype.is(ctype_base::space, __c);\n \t      \n \t      while (__extracted < __num - 1 && !__testeof && !__testsp)\n \t\t{\n \t\t  *__s++ = __c;\n \t\t  ++__extracted;\n \t\t  __c = __sb->sbumpc();\n \t\t  __testeof = __c == __eof;\n-\t\t  __testsp = __ctype->is(ctype_base::space, __c);\n+\t\t  __testsp = __ctype.is(ctype_base::space, __c);\n \t\t}\n \t      \n \t      if (!__testeof)\n@@ -1150,8 +1151,8 @@ namespace std\n       typedef typename __istream_type::int_type \t__int_type;\n       typedef typename __istream_type::char_type \t__char_type;\n \n+      const __ctype_type& __ctype = use_facet<__ctype_type>(__in.getloc());\n       __streambuf_type* __sb = __in.rdbuf();\n-      const __ctype_type* __ctype = __in._M_get_fctype_ios();\n       const __int_type __eof = _Traits::eof();\t      \n       __int_type __c;\n       bool __testeof;\n@@ -1160,8 +1161,8 @@ namespace std\n       do \n \t{\n \t  __c = __sb->sbumpc();\n-\t  __testeof = __c == __eof;\n-\t  __testsp = __ctype->is(ctype_base::space, __c);\n+\t  __testeof = __c == __eof;\t  \n+\t  __testsp = __ctype.is(ctype_base::space, __c);\n \t}\n       while (!__testeof && __testsp);\n \n@@ -1195,20 +1196,20 @@ namespace std\n \t  __size_type __n;\n \t  __n = __w > 0 ? static_cast<__size_type>(__w) : __str.max_size();\n \n+\t  const __ctype_type& __ctype = use_facet<__ctype_type>(__in.getloc());\n+\t  const __int_type __eof = _Traits::eof();\n \t  __streambuf_type* __sb = __in.rdbuf();\n-\t  const __ctype_type* __ctype = __in._M_get_fctype_ios();\n \t  __int_type __c = __sb->sbumpc();\n-\t  const __int_type __eof = _Traits::eof();\n-\t  bool __testsp = __ctype->is(ctype_base::space, __c);\n \t  bool __testeof =  __c == __eof;\n+\t  bool __testsp = __ctype.is(ctype_base::space, __c);\n \n \t  while (__extracted < __n && !__testeof && !__testsp)\n \t    {\n \t      __str += _Traits::to_char_type(__c);\n \t      ++__extracted;\n \t      __c = __sb->sbumpc();\n \t      __testeof = __c == __eof;\n-\t      __testsp = __ctype->is(ctype_base::space, __c);\n+\t      __testsp = __ctype.is(ctype_base::space, __c);\n \t    }\n \t  if (!__testeof)\n \t    __sb->sputbackc(__c);"}, {"sha": "0aab0a25a3a007d99282e3975a404ee35f376059", "filename": "libstdc++-v3/src/ios.cc", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/40e5b283996d0f4856d7c530caf390f2e0c86daf/libstdc%2B%2B-v3%2Fsrc%2Fios.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/40e5b283996d0f4856d7c530caf390f2e0c86daf/libstdc%2B%2B-v3%2Fsrc%2Fios.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Fios.cc?ref=40e5b283996d0f4856d7c530caf390f2e0c86daf", "patch": "@@ -190,16 +190,10 @@ namespace std\n     // Explicitly call dtors to free any memory that is dynamically\n     // allocated by filebuf ctor or member functions, but don't\n     // deallocate all memory by calling operator delete.\n-    cout.flush();\n-    cerr.flush();\n-    clog.flush();\n     buf_cout.~filebuf();\n     buf_cin.~filebuf();\n     buf_cerr.~filebuf();\n #ifdef _GLIBCPP_USE_WCHAR_T\n-    wcout.flush();\n-    wcerr.flush();\n-    wclog.flush();\n     buf_wcout.~wfilebuf();\n     buf_wcin.~wfilebuf();\n     buf_wcerr.~wfilebuf();"}, {"sha": "72b9fb4cc85698856181a57cac4906202cbaf789", "filename": "libstdc++-v3/testsuite/27_io/ios_init.cc", "status": "modified", "additions": 76, "deletions": 0, "changes": 76, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/40e5b283996d0f4856d7c530caf390f2e0c86daf/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fios_init.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/40e5b283996d0f4856d7c530caf390f2e0c86daf/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fios_init.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fios_init.cc?ref=40e5b283996d0f4856d7c530caf390f2e0c86daf", "patch": "@@ -132,6 +132,80 @@ void test02()\n   VERIFY( test );\n }\n \n+// libstdc++/3983\n+void test03()\n+{\n+  using namespace std;\n+  bool test = true;\n+\n+  // input streams\n+  basic_istringstream<unsigned char> iss_uc;\n+  unsigned char arr[6] = { 'a', 'b', 'c', 'd', 'e' };\n+\n+  // Sentry uses locale info, so have to try one formatted input.\n+  try \n+    { \n+      int i;\n+      iss_uc >> i;\n+    }\n+  catch (bad_cast& obj)\n+    { }\n+  catch (exception& obj)\n+    { test = false; }\n+  \n+  try \n+    { \n+      iss_uc >> arr;\n+    }\n+  catch (bad_cast& obj)\n+    { }\n+  catch (exception& obj)\n+    { test = false; }\n+  \n+  try \n+    { \n+      iss_uc >> ws;\n+    }\n+  catch (bad_cast& obj)\n+    { }\n+  catch (exception& obj)\n+    { test = false; }\n+ \n+  try \n+    { \n+      basic_string<unsigned char> s_uc(arr);\n+      iss_uc >> s_uc;\n+    }\n+  catch (bad_cast& obj)\n+    { }\n+  catch (exception& obj)\n+    { test = false; }\n+\n+  // output streams\n+  basic_ostringstream<unsigned char> oss_uc;\n+\n+  try \n+    { \n+      bool b = true;\n+      oss_uc << b;\n+    }\n+  catch (bad_cast& obj)\n+    { }\n+  catch (exception& obj)\n+    { test = false; }\n+   \n+  VERIFY( test );\n+}\n+\n+// libstdc++/5268\n+int test04()\n+{\n+  std::stringbuf b1;\n+  std::cout.rdbuf( &b1 );\n+  std::cout << \"hello\\n\";\n+  return 0;\n+}\n+\n #if !__GXX_WEAK__\n // Explicitly instantiate for systems with no COMDAT or weak support.\n template \n@@ -147,5 +221,7 @@ int main()\n {\n   test01();\n   test02();\n+  test03();\n+  test04();\n   return 0;\n }"}]}