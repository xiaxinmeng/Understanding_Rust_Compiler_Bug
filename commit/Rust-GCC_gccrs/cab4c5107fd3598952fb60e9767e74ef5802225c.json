{"sha": "cab4c5107fd3598952fb60e9767e74ef5802225c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Y2FiNGM1MTA3ZmQzNTk4OTUyZmI2MGU5NzY3ZTc0ZWY1ODAyMjI1Yw==", "commit": {"author": {"name": "Oleg Endo", "email": "olegendo@gcc.gnu.org", "date": "2012-07-08T15:03:21Z"}, "committer": {"name": "Oleg Endo", "email": "olegendo@gcc.gnu.org", "date": "2012-07-08T15:03:21Z"}, "message": "re PR target/51244 ([SH] Inefficient conditional branch and code around T bit)\n\n\tPR target/51244\n\t* config/sh/sh.md (*branch_true_eq, *branch_false_ne, nott): New insns.\n\nFrom-SVN: r189360", "tree": {"sha": "67340f5b3ebf5f912483544d822439f9488b3298", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/67340f5b3ebf5f912483544d822439f9488b3298"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/cab4c5107fd3598952fb60e9767e74ef5802225c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cab4c5107fd3598952fb60e9767e74ef5802225c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cab4c5107fd3598952fb60e9767e74ef5802225c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cab4c5107fd3598952fb60e9767e74ef5802225c/comments", "author": null, "committer": null, "parents": [{"sha": "532aafaddbc0ec451f6301800ba4b0d3c7ddf8a9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/532aafaddbc0ec451f6301800ba4b0d3c7ddf8a9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/532aafaddbc0ec451f6301800ba4b0d3c7ddf8a9"}], "stats": {"total": 41, "additions": 41, "deletions": 0}, "files": [{"sha": "4e4014795875a07b597d99101b2160148fd7c7ca", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cab4c5107fd3598952fb60e9767e74ef5802225c/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cab4c5107fd3598952fb60e9767e74ef5802225c/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=cab4c5107fd3598952fb60e9767e74ef5802225c", "patch": "@@ -1,3 +1,8 @@\n+2012-07-08  Oleg Endo  <olegendo@gcc.gnu.org>\n+\n+\tPR target/51244\n+\t* config/sh/sh.md (*branch_true_eq, *branch_false_ne, nott): New insns.\n+\n 2012-07-08  Steven Bosscher  <steven@gcc.gnu.org>\n \n \t* basic-block.h: Re-group most prototypes per file."}, {"sha": "cf37cb9179d8df00744eec7a6bbeb49d4286b506", "filename": "gcc/config/sh/sh.md", "status": "modified", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cab4c5107fd3598952fb60e9767e74ef5802225c/gcc%2Fconfig%2Fsh%2Fsh.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cab4c5107fd3598952fb60e9767e74ef5802225c/gcc%2Fconfig%2Fsh%2Fsh.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fsh.md?ref=cab4c5107fd3598952fb60e9767e74ef5802225c", "patch": "@@ -7220,6 +7220,17 @@ label:\n }\n   [(set_attr \"type\" \"cbranch\")])\n \n+(define_insn \"*branch_true_eq\"\n+  [(set (pc) (if_then_else (eq (match_operand 1 \"t_reg_operand\" \"\")\n+\t\t\t       (const_int 1))\n+\t\t\t   (label_ref (match_operand 0 \"\" \"\"))\n+\t\t\t   (pc)))]\n+  \"TARGET_SH1\"\n+{\n+  return output_branch (1, insn, operands);\n+}\n+  [(set_attr \"type\" \"cbranch\")])\n+\n (define_insn \"branch_false\"\n   [(set (pc) (if_then_else (eq (match_operand 1 \"t_reg_operand\" \"\")\n \t\t\t       (const_int 0))\n@@ -7231,6 +7242,17 @@ label:\n }\n   [(set_attr \"type\" \"cbranch\")])\n \n+(define_insn \"*branch_false_ne\"\n+  [(set (pc) (if_then_else (ne (match_operand 1 \"t_reg_operand\" \"\")\n+\t\t\t       (const_int 1))\n+\t\t\t   (label_ref (match_operand 0 \"\" \"\"))\n+\t\t\t   (pc)))]\n+  \"TARGET_SH1\"\n+{\n+  return output_branch (0, insn, operands);\n+}\n+  [(set_attr \"type\" \"cbranch\")])\n+\n ;; Patterns to prevent reorg from re-combining a condbranch with a branch\n ;; which destination is too far away.\n ;; The const_int_operand is distinct for each branch target; it avoids\n@@ -9844,6 +9866,20 @@ label:\n   \"\"\n   [(const_int 0)])\n \n+(define_insn_and_split \"nott\"\n+  [(set (reg:SI T_REG) (xor:SI (reg:SI T_REG) (const_int 1)))]\n+  \"TARGET_SH1\"\n+{\n+  gcc_assert (TARGET_SH2A);\n+  return \"nott\";\n+}\n+  \"! TARGET_SH2A && can_create_pseudo_p ()\"\n+  [(set (match_dup 0) (reg:SI T_REG))\n+   (set (reg:SI T_REG) (eq:SI (match_dup 0) (const_int 0)))]\n+{\n+  operands[0] = gen_reg_rtx (SImode);\n+})\n+\n (define_expand \"cstoresf4\"\n   [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n \t(match_operator:SI 1 \"sh_float_comparison_operator\""}]}