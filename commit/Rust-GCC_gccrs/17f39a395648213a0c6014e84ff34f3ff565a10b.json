{"sha": "17f39a395648213a0c6014e84ff34f3ff565a10b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTdmMzlhMzk1NjQ4MjEzYTBjNjAxNGU4NGZmMzRmM2ZmNTY1YTEwYg==", "commit": {"author": {"name": "Jan Hubicka", "email": "jh@suse.cz", "date": "2010-09-04T17:36:49Z"}, "committer": {"name": "Jan Hubicka", "email": "hubicka@gcc.gnu.org", "date": "2010-09-04T17:36:49Z"}, "message": "foldconst-2.c: New testcase.\n\n\n\t* gcc.dg/tree-ssa/foldconst-2.c: New testcase.\n\t* gcc.dg/tree-ssa/foldconst-3.c: New testcase.\n\n\t* gimple-fold.c (maybe_fold_reference): Use fold_const_aggregate_ref.\n\t* tree-ssa-ccp.c (fold_const_aggregate_ref): Use\n\tfold_read_from_constant_string.\n\n\t* gimple.h (canonicalize_constructor_val): Declare.\n\t* gimple-fold.c (canonicalize_constructor_val): New function.\n\t(get_symbol_constant_value):Use it.\n\t* tree-ssa-ccp.c (fold_const_aggregate_ref): Likewise.\n\nFrom-SVN: r163861", "tree": {"sha": "57771775ce3d663de352f64104a3e0370a61a56f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/57771775ce3d663de352f64104a3e0370a61a56f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/17f39a395648213a0c6014e84ff34f3ff565a10b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/17f39a395648213a0c6014e84ff34f3ff565a10b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/17f39a395648213a0c6014e84ff34f3ff565a10b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/17f39a395648213a0c6014e84ff34f3ff565a10b/comments", "author": null, "committer": null, "parents": [{"sha": "5f7ae6b656d4468b1f2ebf3f773e494c7d147624", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5f7ae6b656d4468b1f2ebf3f773e494c7d147624", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5f7ae6b656d4468b1f2ebf3f773e494c7d147624"}], "stats": {"total": 236, "additions": 188, "deletions": 48}, "files": [{"sha": "e5fe0a2365b7d5ff903e548e31d5533f244487b9", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/17f39a395648213a0c6014e84ff34f3ff565a10b/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/17f39a395648213a0c6014e84ff34f3ff565a10b/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=17f39a395648213a0c6014e84ff34f3ff565a10b", "patch": "@@ -1,3 +1,14 @@\n+2010-09-04  Jan Hubicka  <jh@suse.cz>\n+\n+\t* gimple-fold.c (maybe_fold_reference): Use fold_const_aggregate_ref.\n+\t* tree-ssa-ccp.c (fold_const_aggregate_ref): Use\n+\tfold_read_from_constant_string.\n+\n+\t* gimple.h (canonicalize_constructor_val): Declare.\n+\t* gimple-fold.c (canonicalize_constructor_val): New function.\n+\t(get_symbol_constant_value):Use it.\n+\t* tree-ssa-ccp.c (fold_const_aggregate_ref): Likewise.\n+\n 2010-09-04  Jan Hubicka  <jh@suse.cz>\n \n \t* tree-switch-conversion.c (build_one_array): Set constructor to be"}, {"sha": "2b40ee6909e914380fe0661bfd4645644a815a47", "filename": "gcc/gimple-fold.c", "status": "modified", "additions": 30, "deletions": 21, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/17f39a395648213a0c6014e84ff34f3ff565a10b/gcc%2Fgimple-fold.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/17f39a395648213a0c6014e84ff34f3ff565a10b/gcc%2Fgimple-fold.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-fold.c?ref=17f39a395648213a0c6014e84ff34f3ff565a10b", "patch": "@@ -31,6 +31,30 @@ along with GCC; see the file COPYING3.  If not see\n #include \"tree-ssa-propagate.h\"\n #include \"target.h\"\n \n+/* CVAL is value taken from DECL_INITIAL of variable.  Try to transorm it into\n+   acceptable form for is_gimple_min_invariant.   */\n+\n+tree\n+canonicalize_constructor_val (tree cval)\n+{\n+  STRIP_NOPS (cval);\n+  if (TREE_CODE (cval) == POINTER_PLUS_EXPR)\n+    {\n+      tree t = maybe_fold_offset_to_address (EXPR_LOCATION (cval),\n+\t\t\t\t\t     TREE_OPERAND (cval, 0),\n+\t\t\t\t\t     TREE_OPERAND (cval, 1),\n+\t\t\t\t\t     TREE_TYPE (cval));\n+      if (t)\n+\tcval = t;\n+    }\n+  if (TREE_CODE (cval) == ADDR_EXPR)\n+    {\n+      tree base = get_base_address (TREE_OPERAND (cval, 0));\n+      if (base && TREE_CODE (base) == VAR_DECL)\n+\tadd_referenced_var (base);\n+    }\n+  return cval;\n+}\n \n /* If SYM is a constant variable with known value, return the value.\n    NULL_TREE is returned otherwise.  */\n@@ -45,21 +69,9 @@ get_symbol_constant_value (tree sym)\n       tree val = DECL_INITIAL (sym);\n       if (val)\n \t{\n-\t  STRIP_NOPS (val);\n+\t  val = canonicalize_constructor_val (val);\n \t  if (is_gimple_min_invariant (val))\n-\t    {\n-\t      if (TREE_CODE (val) == ADDR_EXPR)\n-\t\t{\n-\t\t  tree base = get_base_address (TREE_OPERAND (val, 0));\n-\t\t  if (base && TREE_CODE (base) == VAR_DECL)\n-\t\t    {\n-\t\t      TREE_ADDRESSABLE (base) = 1;\n-\t\t      if (gimple_referenced_vars (cfun))\n-\t\t\tadd_referenced_var (base);\n-\t\t    }\n-\t\t}\n-\t      return val;\n-\t    }\n+\t    return val;\n \t}\n       /* Variables declared 'const' without an initializer\n \t have zero as the initializer if they may not be\n@@ -462,14 +474,11 @@ static tree\n maybe_fold_reference (tree expr, bool is_lhs)\n {\n   tree *t = &expr;\n+  tree result;\n \n-  if (TREE_CODE (expr) == ARRAY_REF\n-      && !is_lhs)\n-    {\n-      tree tem = fold_read_from_constant_string (expr);\n-      if (tem)\n-\treturn tem;\n-    }\n+  if (!is_lhs\n+      && (result = fold_const_aggregate_ref (expr)))\n+    return result;\n \n   /* ???  We might want to open-code the relevant remaining cases\n      to avoid using the generic fold.  */"}, {"sha": "ee69318906820568b9dfb1d4a9d79f721c6a3ce8", "filename": "gcc/gimple.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/17f39a395648213a0c6014e84ff34f3ff565a10b/gcc%2Fgimple.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/17f39a395648213a0c6014e84ff34f3ff565a10b/gcc%2Fgimple.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple.h?ref=17f39a395648213a0c6014e84ff34f3ff565a10b", "patch": "@@ -4876,6 +4876,7 @@ tree maybe_fold_offset_to_address (location_t, tree, tree, tree);\n tree maybe_fold_offset_to_reference (location_t, tree, tree, tree);\n tree maybe_fold_stmt_addition (location_t, tree, tree, tree);\n tree get_symbol_constant_value (tree);\n+tree canonicalize_constructor_val (tree);\n bool may_propagate_address_into_dereference (tree, tree);\n extern tree maybe_fold_and_comparisons (enum tree_code, tree, tree, \n \t\t\t\t\tenum tree_code, tree, tree);"}, {"sha": "f5306a92ac2b220637bc4d9ba8e6cb1368559c88", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/17f39a395648213a0c6014e84ff34f3ff565a10b/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/17f39a395648213a0c6014e84ff34f3ff565a10b/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=17f39a395648213a0c6014e84ff34f3ff565a10b", "patch": "@@ -1,3 +1,8 @@\n+2010-09-04  Jan Hubicka  <jh@suse.cz>\n+\n+\t* gcc.dg/tree-ssa/foldconst-2.c: New testcase.\n+\t* gcc.dg/tree-ssa/foldconst-3.c: New testcase.\n+\n 2010-09-04  Jan Hubicka  <jh@suse.cz>\n \n \t* gcc.dg/tree-ssa/foldconst-1.c: New testcase."}, {"sha": "8fdad906a80f89dcfd97efdc9b5b71baccb3e0db", "filename": "gcc/testsuite/gcc.dg/tree-ssa/foldconst-2.c", "status": "added", "additions": 58, "deletions": 0, "changes": 58, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/17f39a395648213a0c6014e84ff34f3ff565a10b/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Ffoldconst-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/17f39a395648213a0c6014e84ff34f3ff565a10b/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Ffoldconst-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Ffoldconst-2.c?ref=17f39a395648213a0c6014e84ff34f3ff565a10b", "patch": "@@ -0,0 +1,58 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -fdump-tree-optimized\" } */\n+typedef union tree_node *tree;\n+enum tree_code\n+{\n+  OFFSET_TYPE, ENUMERAL_TYPE, BOOLEAN_TYPE, POINTER_TYPE, FIXED_POINT_TYPE,\n+};\n+struct tree_base\n+{\n+  unsigned public_flag:1;\n+};\n+struct tree_decl_with_vis\n+{\n+  unsigned comdat_flag:1;\n+};\n+union tree_node\n+{\n+  struct tree_base base;\n+  struct tree_decl_with_vis decl_with_vis;\n+};\n+enum tree_index\n+{\n+    TI_LONG_DOUBLE_PTR_TYPE, TI_INTEGER_PTR_TYPE, TI_VOID_TYPE, TI_PTR_TYPE,\n+    TI_VA_LIST_FPR_COUNTER_FIELD, TI_BOOLEAN_TYPE, TI_FILEPTR_TYPE,\n+    TI_CURRENT_TARGET_PRAGMA, TI_CURRENT_OPTIMIZE_PRAGMA, TI_MAX\n+};\n+extern tree global_trees[TI_MAX];\n+emit_support_tinfos (void)\n+{\n+  static tree *const fundamentals[] = {\n+    &global_trees[TI_VOID_TYPE], &global_trees[TI_BOOLEAN_TYPE],\n+  };\n+  int ix;\n+  for (ix = 0; fundamentals[ix]; ix++)\n+    {\n+\t{\n+\t  tree tinfo;\n+\t    {\n+\t      ((void) (!(((tinfo)->base.public_flag) && !(__extension__ (\n+\t\t\t\t\t\t\t\t\t  {\n+\t\t\t\t\t\t\t\t\t  __typeof\n+\t\t\t\t\t\t\t\t\t  (tinfo)\n+\t\t\t\t\t\t\t\t\t  __t\n+\t\t\t\t\t\t\t\t\t  =\n+\t\t\t\t\t\t\t\t\t  (tinfo);\n+\t\t\t\t\t\t\t\t\t  __t;}\n+\t\t\t\t\t\t\t  )->decl_with_vis.\n+\t\t\t\t\t\t\t  comdat_flag)) ?\n+\t\t       fancy_abort (\"../../gcc/cp/rtti.c\", 1529,\n+\t\t\t\t    __FUNCTION__), 0 : 0));\n+\t    }\n+\t}\n+    }\n+}\n+/* We should copy loop header to fundamentals[0] and then fold it way into\n+   known value.  */\n+/* { dg-final { scan-tree-dump-not \"fundamentals.0\" \"optimized\"} } */\n+/* { dg-final { cleanup-tree-dump \"optimized\" } } */"}, {"sha": "61323620714d31b2b602f0a791d862ce7b0d8107", "filename": "gcc/testsuite/gcc.dg/tree-ssa/foldconst-3.c", "status": "added", "additions": 76, "deletions": 0, "changes": 76, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/17f39a395648213a0c6014e84ff34f3ff565a10b/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Ffoldconst-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/17f39a395648213a0c6014e84ff34f3ff565a10b/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Ffoldconst-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Ffoldconst-3.c?ref=17f39a395648213a0c6014e84ff34f3ff565a10b", "patch": "@@ -0,0 +1,76 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -fdump-tree-optimized\" } */\n+typedef const union tree_node *const_tree;\n+typedef struct\n+{\n+}\n+double_int;\n+double_int double_int_zext (double_int, unsigned);\n+enum tree_code\n+{ ERROR_MARK, IDENTIFIER_NODE, TREE_LIST, BLOCK, ENUMERAL_TYPE, BOOLEAN_TYPE,\n+    INTEGER_TYPE, ARRAY_TYPE, INTEGER_CST, VAR_DECL, PARM_DECL, RESULT_DECL,\n+  };\n+enum tree_code_class\n+{ tcc_exceptional, tcc_constant, tcc_type, tcc_declaration, tcc_reference, };\n+struct tree_base\n+{\n+  __extension__ enum tree_code code:16;\n+  unsigned unsigned_flag:1;\n+};\n+struct tree_type\n+{\n+  unsigned int precision:10;\n+  union tree_type_symtab\n+  {\n+  } symtab;\n+};\n+union tree_node\n+{\n+  struct tree_base base;\n+  struct tree_type type;\n+};\n+const enum tree_code_class tree_code_type[] =\n+{ tcc_exceptional, 1, 0, 0, 0, 0, 2, };\n+\n+int_fits_type_p (const_tree c, const_tree type)\n+{\n+  double_int dc, dd;\n+  {\n+    if (((enum tree_code) (type)->base.code) == INTEGER_TYPE && ((\n+\t\t\t\t\t\t\t\t   {\n+\t\t\t\t\t\t\t\t   __typeof\n+\t\t\t\t\t\t\t\t   (type) __t\n+\t\t\t\t\t\t\t\t   = (type);\n+\t\t\t\t\t\t\t\t   if\n+\t\t\t\t\t\t\t\t   (tree_code_type\n+\t\t\t\t\t\t\t\t    [(int)\n+\t\t\t\t\t\t\t\t     (((enum\n+\t\t\t\t\t\t\t\t\ttree_code)\n+\t\t\t\t\t\t\t\t       (__t)->\n+\t\t\t\t\t\t\t\t       base.\n+\t\t\t\t\t\t\t\t       code))]\n+\t\t\t\t\t\t\t\t    !=\n+\t\t\t\t\t\t\t\t    (tcc_type))\n+\t\t\t\t\t\t\t\t   tree_class_check_failed\n+\t\t\t\t\t\t\t\t   (__t,\n+\t\t\t\t\t\t\t\t    __FUNCTION__);\n+\t\t\t\t\t\t\t\t   __t;})->\n+\t\t\t\t\t\t\t\t base.\n+\t\t\t\t\t\t\t\t unsigned_flag))\n+      dd = double_int_zext (dd, ((\n+\t\t\t\t   {\n+\t\t\t\t   __typeof (type) __t = (type);\n+\t\t\t\t   if (tree_code_type\n+\t\t\t\t       [(int)\n+\t\t\t\t\t(((enum tree_code) (__t)->base.\n+\t\t\t\t\t  code))] !=\n+\t\t\t\t       (tcc_type))\n+\t\t\t\t   tree_class_check_failed (__t,\n+\t\t\t\t\t\t\t    __FUNCTION__);\n+\t\t\t\t   __t;}\n+\t\t\t\t )->type.precision));\n+}\n+}\n+/* The switch should be switch converted and later constant propagated.  */\n+/* { dg-final { scan-tree-dump-not \"tree_code_type\" \"optimized\"} } */\n+/* { dg-final { cleanup-tree-dump \"optimized\" } } */"}, {"sha": "32fde458f1333cc5dd33013113a01633d91b292f", "filename": "gcc/tree-ssa-ccp.c", "status": "modified", "additions": 7, "deletions": 27, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/17f39a395648213a0c6014e84ff34f3ff565a10b/gcc%2Ftree-ssa-ccp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/17f39a395648213a0c6014e84ff34f3ff565a10b/gcc%2Ftree-ssa-ccp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-ccp.c?ref=17f39a395648213a0c6014e84ff34f3ff565a10b", "patch": "@@ -1325,6 +1325,10 @@ fold_const_aggregate_ref (tree t)\n   if (TREE_CODE_CLASS (TREE_CODE (t)) == tcc_declaration)\n     return get_symbol_constant_value (t);\n \n+  tem = fold_read_from_constant_string (t);\n+  if (tem)\n+    return tem;\n+\n   switch (TREE_CODE (t))\n     {\n     case ARRAY_REF:\n@@ -1413,16 +1417,7 @@ fold_const_aggregate_ref (tree t)\n       /* Whoo-hoo!  I'll fold ya baby.  Yeah!  */\n       FOR_EACH_CONSTRUCTOR_ELT (CONSTRUCTOR_ELTS (ctor), cnt, cfield, cval)\n \tif (tree_int_cst_equal (cfield, idx))\n-\t  {\n-\t    STRIP_NOPS (cval);\n-\t    if (TREE_CODE (cval) == ADDR_EXPR)\n-\t      {\n-\t\ttree base = get_base_address (TREE_OPERAND (cval, 0));\n-\t\tif (base && TREE_CODE (base) == VAR_DECL)\n-\t\t  add_referenced_var (base);\n-\t      }\n-\t    return cval;\n-\t  }\n+\t  return canonicalize_constructor_val (cval);\n       break;\n \n     case COMPONENT_REF:\n@@ -1463,16 +1458,7 @@ fold_const_aggregate_ref (tree t)\n \tif (cfield == field\n \t    /* FIXME: Handle bit-fields.  */\n \t    && ! DECL_BIT_FIELD (cfield))\n-\t  {\n-\t    STRIP_NOPS (cval);\n-\t    if (TREE_CODE (cval) == ADDR_EXPR)\n-\t      {\n-\t\ttree base = get_base_address (TREE_OPERAND (cval, 0));\n-\t\tif (base && TREE_CODE (base) == VAR_DECL)\n-\t\t  add_referenced_var (base);\n-\t      }\n-\t    return cval;\n-\t  }\n+\t  return canonicalize_constructor_val (cval);\n       break;\n \n     case REALPART_EXPR:\n@@ -1567,13 +1553,7 @@ fold_const_aggregate_ref (tree t)\n \t  FOR_EACH_CONSTRUCTOR_ELT (CONSTRUCTOR_ELTS (ctor), cnt, cfield, cval)\n \t    if (tree_int_cst_equal (cfield, idx))\n \t      {\n-\t\tSTRIP_NOPS (cval);\n-\t\tif (TREE_CODE (cval) == ADDR_EXPR)\n-\t\t  {\n-\t\t    tree base = get_base_address (TREE_OPERAND (cval, 0));\n-\t\t    if (base && TREE_CODE (base) == VAR_DECL)\n-\t\t      add_referenced_var (base);\n-\t\t  }\n+\t\tcval = canonicalize_constructor_val (cval);\n \t\tif (useless_type_conversion_p (TREE_TYPE (t), TREE_TYPE (cval)))\n \t\t  return cval;\n \t\telse if (CONSTANT_CLASS_P (cval))"}]}