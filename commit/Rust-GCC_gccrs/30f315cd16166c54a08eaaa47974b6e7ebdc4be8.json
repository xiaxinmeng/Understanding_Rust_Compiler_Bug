{"sha": "30f315cd16166c54a08eaaa47974b6e7ebdc4be8", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzBmMzE1Y2QxNjE2NmM1NGEwOGVhYWE0Nzk3NGI2ZTdlYmRjNGJlOA==", "commit": {"author": {"name": "Paolo Carlini", "email": "pcarlini@suse.de", "date": "2004-01-25T10:26:46Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2004-01-25T10:26:46Z"}, "message": "basic_string.h (erase(size_type, size_type), [...]): Call _M_replace_safe instead, thus avoiding redundant check for length_error.\n\n2004-01-25  Paolo Carlini  <pcarlini@suse.de>\n\n\t* include/bits/basic_string.h (erase(size_type, size_type),\n\terase(iterator), erase(iterator, iterator)): Call _M_replace_safe\n\tinstead, thus avoiding redundant check for length_error.\n\n\t* include/bits/basic_string.h: Tweak some comments.\n\nFrom-SVN: r76550", "tree": {"sha": "76768679ff7e6b5c028669cb1894f2e44bdd89f4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/76768679ff7e6b5c028669cb1894f2e44bdd89f4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/30f315cd16166c54a08eaaa47974b6e7ebdc4be8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/30f315cd16166c54a08eaaa47974b6e7ebdc4be8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/30f315cd16166c54a08eaaa47974b6e7ebdc4be8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/30f315cd16166c54a08eaaa47974b6e7ebdc4be8/comments", "author": null, "committer": null, "parents": [{"sha": "bcbc6b7fb8758e95fc602ec909d9b597ff6d93bd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bcbc6b7fb8758e95fc602ec909d9b597ff6d93bd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bcbc6b7fb8758e95fc602ec909d9b597ff6d93bd"}], "stats": {"total": 28, "additions": 14, "deletions": 14}, "files": [{"sha": "492dc79209e0fe009e9ecca80f5928fc2d79e05e", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/30f315cd16166c54a08eaaa47974b6e7ebdc4be8/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/30f315cd16166c54a08eaaa47974b6e7ebdc4be8/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=30f315cd16166c54a08eaaa47974b6e7ebdc4be8", "patch": "@@ -1,3 +1,11 @@\n+2004-01-25  Paolo Carlini  <pcarlini@suse.de>\n+\n+\t* include/bits/basic_string.h (erase(size_type, size_type),\n+\terase(iterator), erase(iterator, iterator)): Call _M_replace_safe\n+\tinstead, thus avoiding redundant check for length_error.\n+\n+\t* include/bits/basic_string.h: Tweak some comments.\n+\n 2004-01-24  Paolo Carlini  <pcarlini@suse.de>\n \n \t* include/bits/basic_string.tcc (operator+(const _CharT*,"}, {"sha": "a42a5c403618a499a44cde5aff3bd884248cd611", "filename": "libstdc++-v3/include/bits/basic_string.h", "status": "modified", "additions": 6, "deletions": 14, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/30f315cd16166c54a08eaaa47974b6e7ebdc4be8/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_string.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/30f315cd16166c54a08eaaa47974b6e7ebdc4be8/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_string.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_string.h?ref=30f315cd16166c54a08eaaa47974b6e7ebdc4be8", "patch": "@@ -993,7 +993,6 @@ namespace std\n        *  @param c  The character to insert.\n        *  @return  Iterator referencing newly inserted char.\n        *  @throw  std::length_error  If new length exceeds @c max_size().\n-       *  @throw  std::out_of_range  If @a p is beyond the end of this string.\n        *\n        *  Inserts character @a c at position referenced by @a p.  If adding\n        *  character causes the length to exceed max_size(), length_error is\n@@ -1016,7 +1015,6 @@ namespace std\n        *  @param p  Iterator referencing position in string to insert at.\n        *  @return  Iterator referencing newly inserted char.\n        *  @throw  std::length_error  If new length exceeds @c max_size().\n-       *  @throw  std::out_of_range  If @a p is beyond the end of this string.\n        *\n        *  Inserts a default-constructed character at position\n        *  referenced by @a p.  If adding character causes the length\n@@ -1045,18 +1043,15 @@ namespace std\n       */\n       basic_string&\n       erase(size_type __pos = 0, size_type __n = npos)\n-      { return _M_replace_aux(_M_check(__pos, \"basic_string::erase\"),\n-\t\t\t      _M_limit(__pos, __n), size_type(0), _CharT()); }\n+      { return _M_replace_safe(_M_check(__pos, \"basic_string::erase\"),\n+\t\t\t       _M_limit(__pos, __n), NULL, size_type(0)); }\n \n       /**\n        *  @brief  Remove one character.\n        *  @param position  Iterator referencing the character to remove.\n        *  @return  iterator referencing same location after removal.\n-       *  @throw  std::out_of_range  If @a position is beyond the end of this\n-       *  string. \n        *\n-       *  Removes the character at @a position from this string.  If @a\n-       *  position is beyond end of string, out_of_range is thrown.  The value\n+       *  Removes the character at @a position from this string. The value\n        *  of the string doesn't change if an error is thrown.\n       */\n       iterator\n@@ -1065,7 +1060,7 @@ namespace std\n \t_GLIBCXX_DEBUG_PEDASSERT(__position >= _M_ibegin() \n \t\t\t\t && __position < _M_iend());\n \tconst size_type __pos = __position - _M_ibegin();\n-\t_M_replace_aux(__pos, size_type(1), size_type(0), _CharT());\n+\t_M_replace_safe(__pos, size_type(1), NULL, size_type(0));\n \t_M_rep()->_M_set_leaked();\n \treturn _M_ibegin() + __pos;\n       }\n@@ -1075,20 +1070,17 @@ namespace std\n        *  @param first  Iterator referencing the first character to remove.\n        *  @param last  Iterator referencing the end of the range.\n        *  @return  Iterator referencing location of first after removal.\n-       *  @throw  std::out_of_range  If @a first is beyond the end of this\n-       *  string. \n        *\n        *  Removes the characters in the range [first,last) from this string.\n-       *  If @a first is beyond end of string, out_of_range is thrown.  The\n-       *  value of the string doesn't change if an error is thrown.\n+       *  The value of the string doesn't change if an error is thrown.\n       */\n       iterator\n       erase(iterator __first, iterator __last)\n       {\n \t_GLIBCXX_DEBUG_PEDASSERT(__first >= _M_ibegin() && __first <= __last\n \t\t\t\t && __last <= _M_iend());\n         const size_type __pos = __first - _M_ibegin();\n-\t_M_replace_aux(__pos, __last - __first, size_type(0), _CharT());\n+\t_M_replace_safe(__pos, __last - __first, NULL, size_type(0));\n \t_M_rep()->_M_set_leaked();\n \treturn _M_ibegin() + __pos;\n       }"}]}