{"sha": "7f62854a80615355f6ef1e7ff82e8af92b6b2531", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2Y2Mjg1NGE4MDYxNTM1NWY2ZWYxZTdmZjgyZThhZjkyYjZiMjUzMQ==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1995-01-18T12:43:31Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1995-01-18T12:43:31Z"}, "message": "(get_inner_reference): Don't ignore CONVERT_EXPR from non-UNION_TYPE to UNION_TYPE.\n\n(get_inner_reference): Don't ignore CONVERT_EXPR from non-UNION_TYPE\nto UNION_TYPE.\n(expand_expr, case CONVERT_EXPR): Check for conversion to union before\nchecking for not changing mode.\n\nFrom-SVN: r8772", "tree": {"sha": "e996de04a0605b861d31e1d322aaf18d88a2320e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e996de04a0605b861d31e1d322aaf18d88a2320e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7f62854a80615355f6ef1e7ff82e8af92b6b2531", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7f62854a80615355f6ef1e7ff82e8af92b6b2531", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7f62854a80615355f6ef1e7ff82e8af92b6b2531", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7f62854a80615355f6ef1e7ff82e8af92b6b2531/comments", "author": null, "committer": null, "parents": [{"sha": "21f0e042fc79c005eff164a94e9cbaef70121296", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/21f0e042fc79c005eff164a94e9cbaef70121296", "html_url": "https://github.com/Rust-GCC/gccrs/commit/21f0e042fc79c005eff164a94e9cbaef70121296"}], "stats": {"total": 33, "additions": 18, "deletions": 15}, "files": [{"sha": "785e74294e1ff21857791e8d605bbc0d46f46d10", "filename": "gcc/expr.c", "status": "modified", "additions": 18, "deletions": 15, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7f62854a80615355f6ef1e7ff82e8af92b6b2531/gcc%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7f62854a80615355f6ef1e7ff82e8af92b6b2531/gcc%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpr.c?ref=7f62854a80615355f6ef1e7ff82e8af92b6b2531", "patch": "@@ -3581,6 +3581,9 @@ get_inner_reference (exp, pbitsize, pbitpos, poffset, pmode,\n       else if (TREE_CODE (exp) != NON_LVALUE_EXPR\n \t       && ! ((TREE_CODE (exp) == NOP_EXPR\n \t\t      || TREE_CODE (exp) == CONVERT_EXPR)\n+\t\t     && ! (TREE_CODE (TREE_TYPE (exp)) == UNION_TYPE\n+\t\t\t   && (TREE_CODE (TREE_TYPE (TREE_OPERAND (exp, 0)))\n+\t\t\t       != UNION_TYPE))\n \t\t     && (TYPE_MODE (TREE_TYPE (exp))\n \t\t\t == TYPE_MODE (TREE_TYPE (TREE_OPERAND (exp, 0))))))\n \tbreak;\n@@ -4981,21 +4984,6 @@ expand_expr (exp, target, tmode, modifier)\n     case NOP_EXPR:\n     case CONVERT_EXPR:\n     case REFERENCE_EXPR:\n-      if (mode == TYPE_MODE (TREE_TYPE (TREE_OPERAND (exp, 0))))\n-\t{\n-\t  op0 = expand_expr (TREE_OPERAND (exp, 0), target, VOIDmode,\n-\t\t\t     modifier);\n-\n-\t  /* If the signedness of the conversion differs and OP0 is\n-\t     a promoted SUBREG, clear that indication since we now\n-\t     have to do the proper extension.  */\n-\t  if (TREE_UNSIGNED (TREE_TYPE (TREE_OPERAND (exp, 0))) != unsignedp\n-\t      && GET_CODE (op0) == SUBREG)\n-\t    SUBREG_PROMOTED_VAR_P (op0) = 0;\n-\n-\t  return op0;\n-\t}\n-\n       if (TREE_CODE (type) == UNION_TYPE)\n \t{\n \t  tree valtype = TREE_TYPE (TREE_OPERAND (exp, 0));\n@@ -5034,6 +5022,21 @@ expand_expr (exp, target, tmode, modifier)\n \t  return target;\n \t}\n \n+      if (mode == TYPE_MODE (TREE_TYPE (TREE_OPERAND (exp, 0))))\n+\t{\n+\t  op0 = expand_expr (TREE_OPERAND (exp, 0), target, VOIDmode,\n+\t\t\t     modifier);\n+\n+\t  /* If the signedness of the conversion differs and OP0 is\n+\t     a promoted SUBREG, clear that indication since we now\n+\t     have to do the proper extension.  */\n+\t  if (TREE_UNSIGNED (TREE_TYPE (TREE_OPERAND (exp, 0))) != unsignedp\n+\t      && GET_CODE (op0) == SUBREG)\n+\t    SUBREG_PROMOTED_VAR_P (op0) = 0;\n+\n+\t  return op0;\n+\t}\n+\n       op0 = expand_expr (TREE_OPERAND (exp, 0), NULL_RTX, mode, 0);\n       if (GET_MODE (op0) == mode)\n \treturn op0;"}]}