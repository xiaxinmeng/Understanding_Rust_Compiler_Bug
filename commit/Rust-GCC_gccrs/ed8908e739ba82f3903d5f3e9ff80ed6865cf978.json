{"sha": "ed8908e739ba82f3903d5f3e9ff80ed6865cf978", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWQ4OTA4ZTczOWJhODJmMzkwM2Q1ZjNlOWZmODBlZDY4NjVjZjk3OA==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@vlsi1.ultra.nyu.edu", "date": "2001-07-03T01:58:35Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "2001-07-03T01:58:35Z"}, "message": "explow.c (plus_constant_wide, [...]): New case.\n\n\t* explow.c (plus_constant_wide, case LO_SUM): New case.\n\t(plus_constant_for_output_wide): Delete.\n\t* rtl.h (plus_constant_for_output): Delete.\n\t* alias.c (canon_rtx, init_alias_analysis): Call plus_constant\n\tinstead of plus_constant_for_output.\n\t* recog.c (offsettable_address_p, adj_offsettable_operand): Likewise.\n\t* config/darwin.c, config/arm/arm.c, config/m68k/m68k.c: Likewise.\n\t* config/m88k/m88k.c, config/mips/mips.c, config/pa/pa.c: Likewise.\n\t* config/rs6000/rs6000.c, config/sparc/sparc.c: Likewise.\n\t* config/sparc/sparc.md: Likewise.\n\tConvert some change_address calls to adjust_address.\n\nFrom-SVN: r43720", "tree": {"sha": "20f4c1fadc86f3b89ef524490fc2bd176650f76c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/20f4c1fadc86f3b89ef524490fc2bd176650f76c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ed8908e739ba82f3903d5f3e9ff80ed6865cf978", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ed8908e739ba82f3903d5f3e9ff80ed6865cf978", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ed8908e739ba82f3903d5f3e9ff80ed6865cf978", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ed8908e739ba82f3903d5f3e9ff80ed6865cf978/comments", "author": null, "committer": null, "parents": [{"sha": "aee96fe99b16dc13f61ebd1076b80335e8a71f8b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/aee96fe99b16dc13f61ebd1076b80335e8a71f8b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/aee96fe99b16dc13f61ebd1076b80335e8a71f8b"}], "stats": {"total": 142, "additions": 58, "deletions": 84}, "files": [{"sha": "6b30fd302f9e986a2edf6e99b12693bfae105325", "filename": "gcc/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ed8908e739ba82f3903d5f3e9ff80ed6865cf978/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ed8908e739ba82f3903d5f3e9ff80ed6865cf978/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=ed8908e739ba82f3903d5f3e9ff80ed6865cf978", "patch": "@@ -1,3 +1,17 @@\n+Mon Jul  2 21:52:19 2001  Richard Kenner  <kenner@vlsi1.ultra.nyu.edu>\n+\n+\t* explow.c (plus_constant_wide, case LO_SUM): New case.\n+\t(plus_constant_for_output_wide): Delete.\n+\t* rtl.h (plus_constant_for_output): Delete.\n+\t* alias.c (canon_rtx, init_alias_analysis): Call plus_constant\n+\tinstead of plus_constant_for_output.\n+\t* recog.c (offsettable_address_p, adj_offsettable_operand): Likewise.\n+\t* config/darwin.c, config/arm/arm.c, config/m68k/m68k.c: Likewise.\n+\t* config/m88k/m88k.c, config/mips/mips.c, config/pa/pa.c: Likewise.\n+\t* config/rs6000/rs6000.c, config/sparc/sparc.c: Likewise.\n+\t* config/sparc/sparc.md: Likewise.\n+\tConvert some change_address calls to adjust_address.\n+\n 2001-07-03  Joseph S. Myers  <jsm28@cam.ac.uk>\n \n \t* doc/extend.texi, doc/gcc.texi, doc/invoke.texi, doc/md.texi,"}, {"sha": "83354257b75c076b9fc949a58af9c2ce78f95229", "filename": "gcc/alias.c", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ed8908e739ba82f3903d5f3e9ff80ed6865cf978/gcc%2Falias.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ed8908e739ba82f3903d5f3e9ff80ed6865cf978/gcc%2Falias.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Falias.c?ref=ed8908e739ba82f3903d5f3e9ff80ed6865cf978", "patch": "@@ -959,12 +959,10 @@ canon_rtx (x)\n \n       if (x0 != XEXP (x, 0) || x1 != XEXP (x, 1))\n \t{\n-\t  /* We can tolerate LO_SUMs being offset here; these\n-\t     rtl are used for nothing other than comparisons.  */\n \t  if (GET_CODE (x0) == CONST_INT)\n-\t    return plus_constant_for_output (x1, INTVAL (x0));\n+\t    return plus_constant (x1, INTVAL (x0));\n \t  else if (GET_CODE (x1) == CONST_INT)\n-\t    return plus_constant_for_output (x0, INTVAL (x1));\n+\t    return plus_constant (x0, INTVAL (x1));\n \t  return gen_rtx_PLUS (GET_MODE (x), x0, x1);\n \t}\n     }\n@@ -2349,8 +2347,7 @@ init_alias_analysis ()\n \t\t      rtx op0 = XEXP (src, 0);\n \t\t      op0 = reg_known_value[REGNO (op0)];\n \t\t      reg_known_value[regno]\n-\t\t\t= plus_constant_for_output (op0,\n-\t\t\t\t\t\t    INTVAL (XEXP (src, 1)));\n+\t\t\t= plus_constant (op0, INTVAL (XEXP (src, 1)));\n \t\t      reg_known_equiv_p[regno] = 0;\n \t\t    }\n \t\t  else if (REG_N_SETS (regno) == 1"}, {"sha": "5fe04181119c4f9a2f28d675f55701dc97f66d8e", "filename": "gcc/config/arm/arm.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ed8908e739ba82f3903d5f3e9ff80ed6865cf978/gcc%2Fconfig%2Farm%2Farm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ed8908e739ba82f3903d5f3e9ff80ed6865cf978/gcc%2Fconfig%2Farm%2Farm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.c?ref=ed8908e739ba82f3903d5f3e9ff80ed6865cf978", "patch": "@@ -2234,7 +2234,7 @@ legitimize_pic_address (orig, mode, reg)\n \n \twin:\n \t  if (GET_CODE (offset) == CONST_INT)\n-\t    return plus_constant_for_output (base, INTVAL (offset));\n+\t    return plus_constant (base, INTVAL (offset));\n \t}\n \n       if (GET_MODE_SIZE (mode) > 4"}, {"sha": "816cd4bbb4f6cc92ba53349c0ec7fbfff86d8d17", "filename": "gcc/config/darwin.c", "status": "modified", "additions": 4, "deletions": 10, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ed8908e739ba82f3903d5f3e9ff80ed6865cf978/gcc%2Fconfig%2Fdarwin.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ed8908e739ba82f3903d5f3e9ff80ed6865cf978/gcc%2Fconfig%2Fdarwin.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fdarwin.c?ref=ed8908e739ba82f3903d5f3e9ff80ed6865cf978", "patch": "@@ -474,13 +474,9 @@ machopic_indirect_data_reference (orig, reg)\n \treturn orig;\n \n       if (MACHOPIC_PURE && GET_CODE (orig) == CONST_INT)\n-        {\n-\t  result = plus_constant_for_output (base, INTVAL (orig));\n-        }\n+\tresult = plus_constant (base, INTVAL (orig));\n       else\n-        {\n-           result = gen_rtx (PLUS, Pmode, base, orig);\n-        }\n+\tresult = gen_rtx (PLUS, Pmode, base, orig);\n \n       if (RTX_UNCHANGING_P (base) && RTX_UNCHANGING_P (orig))\n \tRTX_UNCHANGING_P (result) = 1;\n@@ -835,13 +831,11 @@ machopic_legitimize_pic_address (orig, mode, reg)\n \t\t\t\t\t      Pmode, (base == reg ? 0 : reg));\n       if (GET_CODE (orig) == CONST_INT)\n \t{\n-\t  pic_ref = plus_constant_for_output (base, INTVAL (orig));\n+\t  pic_ref = plus_constant (base, INTVAL (orig));\n \t  is_complex = 1;\n \t}\n       else\n-\t{\n-\t  pic_ref = gen_rtx (PLUS, Pmode, base, orig);\n-\t}\n+\tpic_ref = gen_rtx (PLUS, Pmode, base, orig);\n \n       if (RTX_UNCHANGING_P (base) && RTX_UNCHANGING_P (orig))\n \tRTX_UNCHANGING_P (pic_ref) = 1;"}, {"sha": "d0c3da1f3a154fd39ee870b9f2b1a64b27774599", "filename": "gcc/config/m68k/m68k.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ed8908e739ba82f3903d5f3e9ff80ed6865cf978/gcc%2Fconfig%2Fm68k%2Fm68k.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ed8908e739ba82f3903d5f3e9ff80ed6865cf978/gcc%2Fconfig%2Fm68k%2Fm68k.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68k%2Fm68k.c?ref=ed8908e739ba82f3903d5f3e9ff80ed6865cf978", "patch": "@@ -1402,7 +1402,7 @@ legitimize_pic_address (orig, mode, reg)\n       else abort ();\n \n       if (GET_CODE (orig) == CONST_INT)\n-\treturn plus_constant_for_output (base, INTVAL (orig));\n+\treturn plus_constant (base, INTVAL (orig));\n       pic_ref = gen_rtx_PLUS (Pmode, base, orig);\n       /* Likewise, should we set special REG_NOTEs here?  */\n     }"}, {"sha": "86332bfad3f0edc727500c82886b7bc5d8eec7d7", "filename": "gcc/config/m88k/m88k.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ed8908e739ba82f3903d5f3e9ff80ed6865cf978/gcc%2Fconfig%2Fm88k%2Fm88k.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ed8908e739ba82f3903d5f3e9ff80ed6865cf978/gcc%2Fconfig%2Fm88k%2Fm88k.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm88k%2Fm88k.c?ref=ed8908e739ba82f3903d5f3e9ff80ed6865cf978", "patch": "@@ -368,7 +368,7 @@ legitimize_address (pic, orig, reg, scratch)\n \t  if (GET_CODE (addr) == CONST_INT)\n \t    {\n \t      if (ADD_INT (addr))\n-\t\treturn plus_constant_for_output (base, INTVAL (addr));\n+\t\treturn plus_constant (base, INTVAL (addr));\n \t      else if (! reload_in_progress && ! reload_completed)\n \t\taddr = force_reg (Pmode, addr);\n \t      /* We can't create any new registers during reload, so use the"}, {"sha": "08be812f324bf0d1d5b6cb4c84cb59f49887c144", "filename": "gcc/config/mips/mips.c", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ed8908e739ba82f3903d5f3e9ff80ed6865cf978/gcc%2Fconfig%2Fmips%2Fmips.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ed8908e739ba82f3903d5f3e9ff80ed6865cf978/gcc%2Fconfig%2Fmips%2Fmips.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.c?ref=ed8908e739ba82f3903d5f3e9ff80ed6865cf978", "patch": "@@ -930,9 +930,8 @@ double_memory_operand (op, mode)\n     return 1;\n \n   return memory_address_p ((GET_MODE_CLASS (mode) == MODE_INT\n-\t\t\t    ? SImode\n-\t\t\t    : SFmode),\n-\t\t\t   plus_constant_for_output (addr, 4));\n+\t\t\t    ? SImode : SFmode),\n+\t\t\t   plus_constant (addr, 4));\n }\n \n /* Return nonzero if the code of this rtx pattern is EQ or NE.  */"}, {"sha": "4d17d4500e78d7d87f3fa6a515d60e756627949c", "filename": "gcc/config/pa/pa.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ed8908e739ba82f3903d5f3e9ff80ed6865cf978/gcc%2Fconfig%2Fpa%2Fpa.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ed8908e739ba82f3903d5f3e9ff80ed6865cf978/gcc%2Fconfig%2Fpa%2Fpa.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Fpa.c?ref=ed8908e739ba82f3903d5f3e9ff80ed6865cf978", "patch": "@@ -758,7 +758,7 @@ legitimize_pic_address (orig, mode, reg)\n       if (GET_CODE (orig) == CONST_INT)\n \t{\n \t  if (INT_14_BITS (orig))\n-\t    return plus_constant_for_output (base, INTVAL (orig));\n+\t    return plus_constant (base, INTVAL (orig));\n \t  orig = force_reg (Pmode, orig);\n \t}\n       pic_ref = gen_rtx_PLUS (Pmode, base, orig);"}, {"sha": "b9f2348c5efa63f5c2fd403eedc5aa88d0d1378d", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ed8908e739ba82f3903d5f3e9ff80ed6865cf978/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ed8908e739ba82f3903d5f3e9ff80ed6865cf978/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=ed8908e739ba82f3903d5f3e9ff80ed6865cf978", "patch": "@@ -3992,11 +3992,11 @@ print_operand (file, x, code)\n \t     we have already done it, we can just use an offset of word.  */\n \t  if (GET_CODE (XEXP (x, 0)) == PRE_INC\n \t      || GET_CODE (XEXP (x, 0)) == PRE_DEC)\n-\t    output_address (plus_constant_for_output (XEXP (XEXP (x, 0), 0),\n-\t\t\t\t\t\t      UNITS_PER_WORD));\n+\t    output_address (plus_constant (XEXP (XEXP (x, 0), 0),\n+\t\t\t\t\t   UNITS_PER_WORD));\n \t  else\n-\t    output_address (plus_constant_for_output (XEXP (x, 0),\n-\t\t\t\t\t\t      UNITS_PER_WORD));\n+\t    output_address (plus_constant (XEXP (x, 0), UNITS_PER_WORD));\n+\n \t  if (small_data_operand (x, GET_MODE (x)))\n \t    fprintf (file, \"@%s(%s)\", SMALL_DATA_RELOC,\n \t\t     reg_names[SMALL_DATA_REG]);\n@@ -8444,7 +8444,7 @@ rs6000_machopic_legitimize_pic_address (orig, mode, reg)\n       if (GET_CODE (offset) == CONST_INT)\n \t{\n \t  if (SMALL_INT (offset))\n-\t    return plus_constant_for_output (base, INTVAL (offset));\n+\t    return plus_constant (base, INTVAL (offset));\n \t  else if (! reload_in_progress && ! reload_completed)\n \t    offset = force_reg (Pmode, offset);\n \t  else"}, {"sha": "05fff2b35b2a002658d08d0c17d30e0e53be9b21", "filename": "gcc/config/sparc/sparc.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ed8908e739ba82f3903d5f3e9ff80ed6865cf978/gcc%2Fconfig%2Fsparc%2Fsparc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ed8908e739ba82f3903d5f3e9ff80ed6865cf978/gcc%2Fconfig%2Fsparc%2Fsparc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsparc.c?ref=ed8908e739ba82f3903d5f3e9ff80ed6865cf978", "patch": "@@ -2813,7 +2813,7 @@ legitimize_pic_address (orig, mode, reg)\n       if (GET_CODE (offset) == CONST_INT)\n \t{\n \t  if (SMALL_INT (offset))\n-\t    return plus_constant_for_output (base, INTVAL (offset));\n+\t    return plus_constant (base, INTVAL (offset));\n \t  else if (! reload_in_progress && ! reload_completed)\n \t    offset = force_reg (Pmode, offset);\n \t  else"}, {"sha": "61c2b9baf12cf88098bdd1181aad58e69cd3d553", "filename": "gcc/config/sparc/sparc.md", "status": "modified", "additions": 16, "deletions": 28, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ed8908e739ba82f3903d5f3e9ff80ed6865cf978/gcc%2Fconfig%2Fsparc%2Fsparc.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ed8908e739ba82f3903d5f3e9ff80ed6865cf978/gcc%2Fconfig%2Fsparc%2Fsparc.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsparc.md?ref=ed8908e739ba82f3903d5f3e9ff80ed6865cf978", "patch": "@@ -2958,8 +2958,7 @@\n   \"\n {\n   rtx word0 = adjust_address (operands[1], SImode, 0);\n-  rtx word1 = change_address (operands[1], SImode,\n-\t\t\t      plus_constant_for_output (XEXP (word0, 0), 4));\n+  rtx word1 = adjust_address (operands[1], SImode, 4);\n   rtx high_part = gen_highpart (SImode, operands[0]);\n   rtx low_part = gen_lowpart (SImode, operands[0]);\n \n@@ -2985,14 +2984,10 @@\n   [(clobber (const_int 0))]\n   \"\n {\n-  rtx word0 = adjust_address (operands[0], SImode, 0);\n-  rtx word1 = change_address (operands[0], SImode,\n-\t\t\t      plus_constant_for_output (XEXP (word0, 0), 4));\n-  rtx high_part = gen_highpart (SImode, operands[1]);\n-  rtx low_part = gen_lowpart (SImode, operands[1]);\n-\n-  emit_insn (gen_movsi (word0, high_part));\n-  emit_insn (gen_movsi (word1, low_part));\n+  emit_insn (gen_movsi (adjust_address (operands[0], SImode, 0),\n+\t\t\tgen_highpart (SImode, operands[1])));\n+  emit_insn (gen_movsi (adjust_address (operands[0], SImode, 4),\n+\t\t\tgen_lowpart (SImode, operands[1])));\n   DONE;\n }\")\n \n@@ -3595,8 +3590,7 @@\n   \"\n {\n   rtx word0 = adjust_address (operands[1], SFmode, 0);\n-  rtx word1 = change_address (operands[1], SFmode,\n-\t\t\t      plus_constant_for_output (XEXP (word0, 0), 4));\n+  rtx word1 = adjust_address (operands[1], SFmode, 4);\n \n   if (GET_CODE (operands[0]) == SUBREG)\n     operands[0] = alter_subreg (operands[0]);\n@@ -3630,8 +3624,7 @@\n   \"\n {\n   rtx word0 = adjust_address (operands[0], SFmode, 0);\n-  rtx word1 = change_address (operands[0], SFmode,\n-\t\t\t      plus_constant_for_output (XEXP (word0, 0), 4));\n+  rtx word1 = adjust_address (operands[0], SFmode, 4);\n \n   if (GET_CODE (operands[1]) == SUBREG)\n     operands[1] = alter_subreg (operands[1]);\n@@ -3656,8 +3649,8 @@\n   rtx dest1, dest2;\n \n   dest1 = adjust_address (operands[0], SFmode, 0);\n-  dest2 = change_address (operands[0], SFmode,\n-\t\t\t  plus_constant_for_output (XEXP (dest1, 0), 4));\n+  dest2 = adjust_address (operands[0], SFmode, 4);\n+\n   emit_insn (gen_movsf (dest1, CONST0_RTX (SFmode)));\n   emit_insn (gen_movsf (dest2, CONST0_RTX (SFmode)));\n   DONE;\n@@ -3930,8 +3923,7 @@\n       break;\n     case MEM:\n       dest1 = adjust_address (set_dest, DFmode, 0);\n-      dest2 = change_address (set_dest, DFmode,\n-\t\t\t      plus_constant_for_output (XEXP (dest1, 0), 8));\n+      dest2 = adjust_address (set_dest, DFmode, 8);\n       break;\n     default:\n       abort ();      \n@@ -3951,8 +3943,7 @@\n   \"\n {\n   rtx word0 = adjust_address (operands[1], DFmode, 0);\n-  rtx word1 = change_address (operands[1], DFmode,\n-\t\t\t      plus_constant_for_output (XEXP (word0, 0), 8));\n+  rtx word1 = adjust_address (operands[1], DFmode, 8);\n   rtx set_dest, dest1, dest2;\n \n   set_dest = operands[0];\n@@ -3986,17 +3977,14 @@\n   [(clobber (const_int 0))]\n   \"\n {\n-  rtx word1 = adjust_address (operands[0], DFmode, 0);\n-  rtx word2 = change_address (operands[0], DFmode,\n-\t\t\t      plus_constant_for_output (XEXP (word1, 0), 8));\n-  rtx set_src;\n-\n-  set_src = operands[1];\n+  rtx set_src = operands[1];\n   if (GET_CODE (set_src) == SUBREG)\n     set_src = alter_subreg (set_src);\n \n-  emit_insn (gen_movdf (word1, gen_df_reg (set_src, 0)));\n-  emit_insn (gen_movdf (word2, gen_df_reg (set_src, 1)));\n+  emit_insn (gen_movdf (adjust_address (operands[0], DFmode, 0),\n+\t\t\tgen_df_reg (set_src, 0)));\n+  emit_insn (gen_movdf (adjust_address (operands[0], DFmode, 8),\n+\t\t\tgen_df_reg (set_src, 1)));\n   DONE;\n }\")\n \f"}, {"sha": "a6a05f57cbf887d77998e98acc0f8581461cd5b9", "filename": "gcc/explow.c", "status": "modified", "additions": 5, "deletions": 19, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ed8908e739ba82f3903d5f3e9ff80ed6865cf978/gcc%2Fexplow.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ed8908e739ba82f3903d5f3e9ff80ed6865cf978/gcc%2Fexplow.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexplow.c?ref=ed8908e739ba82f3903d5f3e9ff80ed6865cf978", "patch": "@@ -174,6 +174,11 @@ plus_constant_wide (x, c)\n \t  c = 0;\n \t}\n       break;\n+\n+    case LO_SUM:\n+      return gen_rtx_LO_SUM (mode, XEXP (x, 0),\n+\t\t\t     plus_constant (XEXP (x, 1), c));\n+\n       \n     default:\n       break;\n@@ -189,25 +194,6 @@ plus_constant_wide (x, c)\n   else\n     return x;\n }\n-\n-/* This is the same as `plus_constant', except that it handles LO_SUM.\n-\n-   This function should be used via the `plus_constant_for_output' macro.  */\n-\n-rtx\n-plus_constant_for_output_wide (x, c)\n-     register rtx x;\n-     register HOST_WIDE_INT c;\n-{\n-  register enum machine_mode mode = GET_MODE (x);\n-\n-  if (GET_CODE (x) == LO_SUM)\n-    return gen_rtx_LO_SUM (mode, XEXP (x, 0),\n-\t\t\t   plus_constant_for_output (XEXP (x, 1), c));\n-\n-  else\n-    return plus_constant (x, c);\n-}\n \f\n /* If X is a sum, return a new sum like X but lacking any constant terms.\n    Add all the removed constant terms into *CONSTPTR."}, {"sha": "10230d5be12274453e598c2e1a771d930318ec1f", "filename": "gcc/recog.c", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ed8908e739ba82f3903d5f3e9ff80ed6865cf978/gcc%2Frecog.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ed8908e739ba82f3903d5f3e9ff80ed6865cf978/gcc%2Frecog.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frecog.c?ref=ed8908e739ba82f3903d5f3e9ff80ed6865cf978", "patch": "@@ -1968,7 +1968,7 @@ offsettable_address_p (strictp, mode, y)\n      of the specified mode.  We assume that if Y and Y+c are\n      valid addresses then so is Y+d for all 0<d<c.  */\n \n-  z = plus_constant_for_output (y, mode_sz - 1);\n+  z = plus_constant (y, mode_sz - 1);\n \n   /* Use QImode because an odd displacement may be automatically invalid\n      for any wider mode.  But it should be valid for a single byte.  */\n@@ -2035,8 +2035,7 @@ adj_offsettable_operand (op, offset)\n \n       if (CONSTANT_ADDRESS_P (y))\n \t{\n-\t  new = gen_rtx_MEM (GET_MODE (op),\n-\t\t\t     plus_constant_for_output (y, offset));\n+\t  new = gen_rtx_MEM (GET_MODE (op), plus_constant (y, offset));\n \t  MEM_COPY_ATTRIBUTES (new, op);\n \t  return new;\n \t}\n@@ -2051,12 +2050,12 @@ adj_offsettable_operand (op, offset)\n \t  const_loc = find_constant_term_loc (&z);\n \t  if (const_loc)\n \t    {\n-\t      *const_loc = plus_constant_for_output (*const_loc, offset);\n+\t      *const_loc = plus_constant (*const_loc, offset);\n \t      return op;\n \t    }\n \t}\n \n-      new = gen_rtx_MEM (GET_MODE (op), plus_constant_for_output (y, offset));\n+      new = gen_rtx_MEM (GET_MODE (op), plus_constant (y, offset));\n       MEM_COPY_ATTRIBUTES (new, op);\n       return new;\n     }"}, {"sha": "efbaec23335df2bc116748befe56b0437110aa0b", "filename": "gcc/rtl.h", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ed8908e739ba82f3903d5f3e9ff80ed6865cf978/gcc%2Frtl.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ed8908e739ba82f3903d5f3e9ff80ed6865cf978/gcc%2Frtl.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frtl.h?ref=ed8908e739ba82f3903d5f3e9ff80ed6865cf978", "patch": "@@ -1144,9 +1144,6 @@ extern int ceil_log2\t\t\tPARAMS ((unsigned HOST_WIDE_INT));\n \n #define plus_constant(X,C) plus_constant_wide (X, (HOST_WIDE_INT) (C))\n \n-#define plus_constant_for_output(X,C)  \\\n-  plus_constant_for_output_wide (X, (HOST_WIDE_INT) (C))\n-\n /* In builtins.c */\n extern rtx expand_builtin_expect_jump\tPARAMS ((union tree_node *, rtx, rtx));\n "}]}