{"sha": "832812bb9cb59a0f05f0f328a8a757fe24b40cad", "node_id": "C_kwDOANBUbNoAKDgzMjgxMmJiOWNiNTlhMGYwNWYwZjMyOGE4YTc1N2ZlMjRiNDBjYWQ", "commit": {"author": {"name": "Pierre-Emmanuel Patry", "email": "pierre-emmanuel.patry@embecosm.com", "date": "2023-03-28T07:56:52Z"}, "committer": {"name": "Arthur Cohen", "email": "arthur.cohen@embecosm.com", "date": "2023-03-30T14:48:28Z"}, "message": "ast: Fix various TokenStream visitors\n\nTokenStream visitors still have many issues, this commit fixes some of\nthem.\n\ngcc/rust/ChangeLog:\n\n\t* ast/rust-ast-tokenstream.cc (TokenStream::visit_items_as_lines):\n\tHandle trailing chars.\n\t(TokenStream::visit_items_as_block): Likewise.\n\t(TokenStream::visit): Fix visitor.\n\nSigned-off-by: Pierre-Emmanuel Patry <pierre-emmanuel.patry@embecosm.com>", "tree": {"sha": "66968292729cebaaf3c6e8835766bfae2dfd24a8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/66968292729cebaaf3c6e8835766bfae2dfd24a8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/832812bb9cb59a0f05f0f328a8a757fe24b40cad", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/832812bb9cb59a0f05f0f328a8a757fe24b40cad", "html_url": "https://github.com/Rust-GCC/gccrs/commit/832812bb9cb59a0f05f0f328a8a757fe24b40cad", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/832812bb9cb59a0f05f0f328a8a757fe24b40cad/comments", "author": {"login": "P-E-P", "id": 32375388, "node_id": "MDQ6VXNlcjMyMzc1Mzg4", "avatar_url": "https://avatars.githubusercontent.com/u/32375388?v=4", "gravatar_id": "", "url": "https://api.github.com/users/P-E-P", "html_url": "https://github.com/P-E-P", "followers_url": "https://api.github.com/users/P-E-P/followers", "following_url": "https://api.github.com/users/P-E-P/following{/other_user}", "gists_url": "https://api.github.com/users/P-E-P/gists{/gist_id}", "starred_url": "https://api.github.com/users/P-E-P/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/P-E-P/subscriptions", "organizations_url": "https://api.github.com/users/P-E-P/orgs", "repos_url": "https://api.github.com/users/P-E-P/repos", "events_url": "https://api.github.com/users/P-E-P/events{/privacy}", "received_events_url": "https://api.github.com/users/P-E-P/received_events", "type": "User", "site_admin": false}, "committer": {"login": "CohenArthur", "id": 43524065, "node_id": "MDQ6VXNlcjQzNTI0MDY1", "avatar_url": "https://avatars.githubusercontent.com/u/43524065?v=4", "gravatar_id": "", "url": "https://api.github.com/users/CohenArthur", "html_url": "https://github.com/CohenArthur", "followers_url": "https://api.github.com/users/CohenArthur/followers", "following_url": "https://api.github.com/users/CohenArthur/following{/other_user}", "gists_url": "https://api.github.com/users/CohenArthur/gists{/gist_id}", "starred_url": "https://api.github.com/users/CohenArthur/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/CohenArthur/subscriptions", "organizations_url": "https://api.github.com/users/CohenArthur/orgs", "repos_url": "https://api.github.com/users/CohenArthur/repos", "events_url": "https://api.github.com/users/CohenArthur/events{/privacy}", "received_events_url": "https://api.github.com/users/CohenArthur/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "816ed80ab7c02cf05cdb1e811f230fe25ea9d413", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/816ed80ab7c02cf05cdb1e811f230fe25ea9d413", "html_url": "https://github.com/Rust-GCC/gccrs/commit/816ed80ab7c02cf05cdb1e811f230fe25ea9d413"}], "stats": {"total": 98, "additions": 74, "deletions": 24}, "files": [{"sha": "f965b4da9f3910923147ab0280d58129f4480bf3", "filename": "gcc/rust/ast/rust-ast-tokenstream.cc", "status": "modified", "additions": 74, "deletions": 24, "changes": 98, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/832812bb9cb59a0f05f0f328a8a757fe24b40cad/gcc%2Frust%2Fast%2Frust-ast-tokenstream.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/832812bb9cb59a0f05f0f328a8a757fe24b40cad/gcc%2Frust%2Fast%2Frust-ast-tokenstream.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fast%2Frust-ast-tokenstream.cc?ref=832812bb9cb59a0f05f0f328a8a757fe24b40cad", "patch": "@@ -90,7 +90,7 @@ TokenStream::visit_items_as_lines (T &collection,\n \t\t\t\t   std::vector<TokenPtr> trailing)\n {\n   for (auto &item : collection)\n-    visit_as_line (item);\n+    visit_as_line (item, trailing);\n }\n \n template <typename T>\n@@ -109,7 +109,7 @@ TokenStream::visit_items_as_block (T &collection,\n     {\n       newline ();\n       increment_indentation ();\n-      visit_items_as_lines (collection);\n+      visit_items_as_lines (collection, trailing);\n       decrement_indentation ();\n       indentation ();\n       tokens.push_back (Rust::Token::make (right_brace, Location ()));\n@@ -385,7 +385,56 @@ TokenStream::visit (MaybeNamedParam &param)\n void\n TokenStream::visit (Token &tok)\n {\n-  tokens.push_back (Rust::Token::make (tok.get_id (), tok.get_locus ()));\n+  std::string data = tok.get_tok_ptr ()->has_str () ? tok.get_str () : \"\";\n+  switch (tok.get_id ())\n+    {\n+    case IDENTIFIER:\n+      tokens.push_back (\n+\tRust::Token::make_identifier (tok.get_locus (), std::move (data)));\n+      break;\n+    case INT_LITERAL:\n+      tokens.push_back (Rust::Token::make_int (tok.get_locus (),\n+\t\t\t\t\t       std::move (data),\n+\t\t\t\t\t       tok.get_type_hint ()));\n+      break;\n+    case FLOAT_LITERAL:\n+      tokens.push_back (Rust::Token::make_float (tok.get_locus (),\n+\t\t\t\t\t\t std::move (data),\n+\t\t\t\t\t\t tok.get_type_hint ()));\n+      break;\n+    case STRING_LITERAL:\n+      tokens.push_back (\n+\tRust::Token::make_string (tok.get_locus (), std::move (data)));\n+      break;\n+    case CHAR_LITERAL:\n+      tokens.push_back (Rust::Token::make_char (\n+\ttok.get_locus (),\n+\t// FIXME: This need to be fixed to properly support UTF-8\n+\tstatic_cast<uint32_t> (data[0])));\n+      break;\n+    case BYTE_CHAR_LITERAL:\n+      tokens.push_back (\n+\tRust::Token::make_byte_char (tok.get_locus (), data[0]));\n+      break;\n+    case BYTE_STRING_LITERAL:\n+      tokens.push_back (\n+\tRust::Token::make_byte_string (tok.get_locus (), std::move (data)));\n+      break;\n+    case INNER_DOC_COMMENT:\n+      tokens.push_back (Rust::Token::make_inner_doc_comment (tok.get_locus (),\n+\t\t\t\t\t\t\t     std::move (data)));\n+      break;\n+    case OUTER_DOC_COMMENT:\n+      tokens.push_back (Rust::Token::make_outer_doc_comment (tok.get_locus (),\n+\t\t\t\t\t\t\t     std::move (data)));\n+      break;\n+    case LIFETIME:\n+      tokens.push_back (\n+\tRust::Token::make_lifetime (tok.get_locus (), std::move (data)));\n+      break;\n+    default:\n+      tokens.push_back (Rust::Token::make (tok.get_id (), tok.get_locus ()));\n+    }\n }\n \n void\n@@ -533,10 +582,7 @@ TokenStream::visit (PathInExpression &path)\n \tRust::Token::make (SCOPE_RESOLUTION, path.get_locus ()));\n     }\n \n-  for (auto &segment : path.get_segments ())\n-    {\n-      visit (segment);\n-    }\n+  visit_items_joined_by_separator (path.get_segments (), SCOPE_RESOLUTION);\n }\n \n void\n@@ -1122,6 +1168,9 @@ TokenStream::visit (StructExprStructFields &expr)\n     {\n       tokens.push_back (Rust::Token::make (COMMA, Location ()));\n       visit (expr.get_struct_base ());\n+    }\n+  else\n+    {\n       trailing_comma ();\n     }\n }\n@@ -1794,11 +1843,14 @@ TokenStream::visit (TypeAlias &type_alias)\n     visit (type_alias.get_where_clause ());\n   tokens.push_back (Rust::Token::make (EQUAL, Location ()));\n   visit (type_alias.get_type_aliased ());\n+  tokens.push_back (Rust::Token::make (SEMICOLON, Location ()));\n }\n \n void\n TokenStream::visit (StructStruct &struct_item)\n {\n+  if (struct_item.has_visibility ())\n+    visit (struct_item.get_visibility ());\n   auto struct_name = struct_item.get_identifier ();\n   tokens.push_back (Rust::Token::make (STRUCT_TOK, struct_item.get_locus ()));\n   tokens.push_back (\n@@ -1877,26 +1929,26 @@ TokenStream::visit (EnumItemDiscriminant &item)\n }\n \n void\n-TokenStream::visit (Enum &enum_item)\n+TokenStream::visit (Enum &enumeration)\n {\n-  tokens.push_back (Rust::Token::make (ENUM_TOK, enum_item.get_locus ()));\n-  auto id = enum_item.get_identifier ();\n+  if (enumeration.has_visibility ())\n+    visit (enumeration.get_visibility ());\n+  tokens.push_back (Rust::Token::make (ENUM_TOK, enumeration.get_locus ()));\n+  auto id = enumeration.get_identifier ();\n   tokens.push_back (\n-    Rust::Token::make_identifier (enum_item.get_locus (), std::move (id)));\n-  if (enum_item.has_generics ())\n-    visit (enum_item.get_generic_params ());\n-  if (enum_item.has_where_clause ())\n-    visit (enum_item.get_where_clause ());\n+    Rust::Token::make_identifier (enumeration.get_locus (), std::move (id)));\n+  if (enumeration.has_generics ())\n+    visit (enumeration.get_generic_params ());\n+  if (enumeration.has_where_clause ())\n+    visit (enumeration.get_where_clause ());\n \n-  visit_items_as_block (enum_item.get_variants (),\n+  visit_items_as_block (enumeration.get_variants (),\n \t\t\t{Rust::Token::make (COMMA, Location ())});\n }\n \n void\n TokenStream::visit (Union &union_item)\n {\n-  // FIXME: \"union\" is a context dependent keyword\n-  gcc_unreachable ();\n   auto id = union_item.get_identifier ();\n   tokens.push_back (\n     Rust::Token::make_identifier (union_item.get_locus (), \"union\"));\n@@ -2187,10 +2239,8 @@ TokenStream::visit (ExternBlock &block)\n   if (block.has_abi ())\n     {\n       auto abi = block.get_abi ();\n-      tokens.push_back (Rust::Token::make (DOUBLE_QUOTE, Location ()));\n       tokens.push_back (\n-\tRust::Token::make_identifier (Location (), std::move (abi)));\n-      tokens.push_back (Rust::Token::make (DOUBLE_QUOTE, Location ()));\n+\tRust::Token::make_string (Location (), std::move (abi)));\n     }\n \n   visit_items_as_block (block.get_extern_items (),\n@@ -2614,15 +2664,15 @@ TokenStream::visit (GroupedPattern &pattern)\n void\n TokenStream::visit (SlicePattern &pattern)\n {\n-  tokens.push_back (Rust::Token::make (LEFT_PAREN, pattern.get_locus ()));\n+  tokens.push_back (Rust::Token::make (LEFT_SQUARE, pattern.get_locus ()));\n   visit_items_joined_by_separator (pattern.get_items (), COMMA);\n-  tokens.push_back (Rust::Token::make (RIGHT_PAREN, Location ()));\n+  tokens.push_back (Rust::Token::make (RIGHT_SQUARE, Location ()));\n }\n \n void\n TokenStream::visit (AltPattern &pattern)\n {\n-  visit_items_as_lines (pattern.get_alts ());\n+  visit_items_joined_by_separator (pattern.get_alts (), PIPE);\n }\n \n // rust-stmt.h"}]}