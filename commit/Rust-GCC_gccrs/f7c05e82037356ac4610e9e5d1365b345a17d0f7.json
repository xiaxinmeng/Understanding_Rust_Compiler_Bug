{"sha": "f7c05e82037356ac4610e9e5d1365b345a17d0f7", "node_id": "C_kwDOANBUbNoAKGY3YzA1ZTgyMDM3MzU2YWM0NjEwZTllNWQxMzY1YjM0NWExN2QwZjc", "commit": {"author": {"name": "Steve Baird", "email": "baird@adacore.com", "date": "2022-05-24T21:09:14Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "derodat@adacore.com", "date": "2022-07-04T07:45:54Z"}, "message": "[Ada] Avoid unwanted warnings for statically-known-successful assertions\n\nThe -gnatwc switch enables warnings for test condition outcomes that are\nknown at compile time. Such warnings are unlikely to be useful in the\ncase of an assertion expression (or a subexpression thereof), so do not\ngenerate them in that case.\n\ngcc/ada/\n\n\t* sem_warn.adb (Warn_On_Constant_Valid_Condition): Do not\n\tgenerate a warning if the expression in question is an assertion\n\texpression, or a subexpression thereof. But do call\n\tTest_Comparison so that it can generate warnings for the cases\n\tthat it generates warnings for.\n\t* sem_prag.ads: Modify Assertion_Expression_Pragma constant so\n\tthat the predicate Sem_Util.In_Assertion_Expression_Pragma\n\treturns True for the expression of a Compile_Time_Error pragma.", "tree": {"sha": "fcc31852c5d7045342defa872ea420dc03c937cf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/fcc31852c5d7045342defa872ea420dc03c937cf"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f7c05e82037356ac4610e9e5d1365b345a17d0f7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f7c05e82037356ac4610e9e5d1365b345a17d0f7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f7c05e82037356ac4610e9e5d1365b345a17d0f7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f7c05e82037356ac4610e9e5d1365b345a17d0f7/comments", "author": {"login": "swbaird", "id": 50751052, "node_id": "MDQ6VXNlcjUwNzUxMDUy", "avatar_url": "https://avatars.githubusercontent.com/u/50751052?v=4", "gravatar_id": "", "url": "https://api.github.com/users/swbaird", "html_url": "https://github.com/swbaird", "followers_url": "https://api.github.com/users/swbaird/followers", "following_url": "https://api.github.com/users/swbaird/following{/other_user}", "gists_url": "https://api.github.com/users/swbaird/gists{/gist_id}", "starred_url": "https://api.github.com/users/swbaird/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/swbaird/subscriptions", "organizations_url": "https://api.github.com/users/swbaird/orgs", "repos_url": "https://api.github.com/users/swbaird/repos", "events_url": "https://api.github.com/users/swbaird/events{/privacy}", "received_events_url": "https://api.github.com/users/swbaird/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pmderodat", "id": 758452, "node_id": "MDQ6VXNlcjc1ODQ1Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/758452?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pmderodat", "html_url": "https://github.com/pmderodat", "followers_url": "https://api.github.com/users/pmderodat/followers", "following_url": "https://api.github.com/users/pmderodat/following{/other_user}", "gists_url": "https://api.github.com/users/pmderodat/gists{/gist_id}", "starred_url": "https://api.github.com/users/pmderodat/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pmderodat/subscriptions", "organizations_url": "https://api.github.com/users/pmderodat/orgs", "repos_url": "https://api.github.com/users/pmderodat/repos", "events_url": "https://api.github.com/users/pmderodat/events{/privacy}", "received_events_url": "https://api.github.com/users/pmderodat/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e7428fff12ca000b59185c71dee511ac0c886089", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e7428fff12ca000b59185c71dee511ac0c886089", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e7428fff12ca000b59185c71dee511ac0c886089"}], "stats": {"total": 10, "additions": 8, "deletions": 2}, "files": [{"sha": "e8a65ce501122f9928dab9669a6d24c18088cfbe", "filename": "gcc/ada/sem_prag.ads", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f7c05e82037356ac4610e9e5d1365b345a17d0f7/gcc%2Fada%2Fsem_prag.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f7c05e82037356ac4610e9e5d1365b345a17d0f7/gcc%2Fada%2Fsem_prag.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_prag.ads?ref=f7c05e82037356ac4610e9e5d1365b345a17d0f7", "patch": "@@ -135,6 +135,7 @@ package Sem_Prag is\n       Pragma_Assert_And_Cut            => True,\n       Pragma_Assume                    => True,\n       Pragma_Check                     => True,\n+      Pragma_Compile_Time_Error        => True,\n       Pragma_Contract_Cases            => True,\n       Pragma_Default_Initial_Condition => True,\n       Pragma_Initial_Condition         => True,"}, {"sha": "1d73f21e7dec627d752e2e0b13503a43b6c83b52", "filename": "gcc/ada/sem_warn.adb", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f7c05e82037356ac4610e9e5d1365b345a17d0f7/gcc%2Fada%2Fsem_warn.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f7c05e82037356ac4610e9e5d1365b345a17d0f7/gcc%2Fada%2Fsem_warn.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_warn.adb?ref=f7c05e82037356ac4610e9e5d1365b345a17d0f7", "patch": "@@ -3401,9 +3401,14 @@ package body Sem_Warn is\n             False_Result => False_Result);\n \n          --  Warn on a possible evaluation to False / True in the presence of\n-         --  invalid values.\n+         --  invalid values. But issue no warning for an assertion expression\n+         --  (or a subexpression thereof); in particular, we don't want a\n+         --  warning about an assertion that will always succeed.\n \n-         if True_Result then\n+         if In_Assertion_Expression_Pragma (Op) then\n+            null;\n+\n+         elsif True_Result then\n             Error_Msg_N\n               (\"condition can only be False if invalid values present?c?\", Op);\n "}]}