{"sha": "58376b85b19d40b3028db530373cb053614e5c0c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTgzNzZiODViMTlkNDBiMzAyOGRiNTMwMzczY2IwNTM2MTRlNWMwYw==", "commit": {"author": {"name": "Richard Stallman", "email": "rms@gnu.org", "date": "1994-07-11T21:05:28Z"}, "committer": {"name": "Richard Stallman", "email": "rms@gnu.org", "date": "1994-07-11T21:05:28Z"}, "message": "Initial revision\n\nFrom-SVN: r7720", "tree": {"sha": "7de320365a545dc54d21ee8f4267e5b649878a1b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7de320365a545dc54d21ee8f4267e5b649878a1b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/58376b85b19d40b3028db530373cb053614e5c0c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/58376b85b19d40b3028db530373cb053614e5c0c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/58376b85b19d40b3028db530373cb053614e5c0c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/58376b85b19d40b3028db530373cb053614e5c0c/comments", "author": null, "committer": null, "parents": [{"sha": "4eb38a3357177d4de32aa11c200d3c5ea1384713", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4eb38a3357177d4de32aa11c200d3c5ea1384713", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4eb38a3357177d4de32aa11c200d3c5ea1384713"}], "stats": {"total": 146, "additions": 146, "deletions": 0}, "files": [{"sha": "51977d078cd022aa4b1cec1530db610614474cba", "filename": "gcc/config/i386/lynx-ng.h", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/58376b85b19d40b3028db530373cb053614e5c0c/gcc%2Fconfig%2Fi386%2Flynx-ng.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/58376b85b19d40b3028db530373cb053614e5c0c/gcc%2Fconfig%2Fi386%2Flynx-ng.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Flynx-ng.h?ref=58376b85b19d40b3028db530373cb053614e5c0c", "patch": "@@ -0,0 +1,30 @@\n+/* Definitions for Intel 386 running LynxOS, using Lynx's old as and ld.\n+   Copyright (C) 1993 Free Software Foundation, Inc.\n+\n+This file is part of GNU CC.\n+\n+GNU CC is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU CC is distributed in the hope that it will be useful,\n+but WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+GNU General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU CC; see the file COPYING.  If not, write to\n+the Free Software Foundation, 675 Mass Ave, Cambridge, MA 02139, USA.  */\n+\n+#include \"i386/gstabs.h\"\n+#include \"lynx-ng.h\"\n+\n+#undef CPP_PREDEFINES\n+#define CPP_PREDEFINES \"-Dunix -Di386 -DI386 -DLynx -DIBITS32 -Asystem(unix) -Asystem(lynx) -Acpu(i386) -Amachine(i386)\"\n+\n+/* Provide required defaults for linker switches.  */\n+\n+#undef LINK_SPEC\n+#define LINK_SPEC \"-P1000 %{msystem-v:-V} %{mcoff:-k}\"\n+"}, {"sha": "112b24a487f74db4c207d1a1335afb5d5e1c90d9", "filename": "gcc/config/lynx-ng.h", "status": "added", "additions": 116, "deletions": 0, "changes": 116, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/58376b85b19d40b3028db530373cb053614e5c0c/gcc%2Fconfig%2Flynx-ng.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/58376b85b19d40b3028db530373cb053614e5c0c/gcc%2Fconfig%2Flynx-ng.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Flynx-ng.h?ref=58376b85b19d40b3028db530373cb053614e5c0c", "patch": "@@ -0,0 +1,116 @@\n+/* Target independent definitions for LynxOS, using Lynx's old as and ld.\n+   Copyright (C) 1993 Free Software Foundation, Inc.\n+\n+This file is part of GNU CC.\n+\n+GNU CC is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU CC is distributed in the hope that it will be useful,\n+but WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+GNU General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU CC; see the file COPYING.  If not, write to\n+the Free Software Foundation, 675 Mass Ave, Cambridge, MA 02139, USA.  */\n+\n+/* This is for backwards compatibility with older Lynx tools, which use\n+   a version of a.out format. */\n+\n+#undef ASM_SPEC\n+#define ASM_SPEC \"%{mcoff:-C}\"\n+\n+#undef CPP_SPEC\n+#define CPP_SPEC \"%{mthreads:-D_MULTITHREADED}  \\\n+  %{mposix:-D_POSIX_SOURCE}  \\\n+  %{msystem-v:-I/usr/include_v}\"\n+\n+/* Provide required defaults for linker switches.  */\n+\n+#undef LINK_SPEC\n+#define LINK_SPEC \"%{msystem-v:-V} %{mcoff:-k}\"\n+\n+#undef LIB_SPEC\n+#define LIB_SPEC \"%{mthreads:-L/lib/thread/}%{msystem-v:-lc_v}%{!msystem-v:%{mposix:-lc_p} -lc}\"\n+\n+#undef STARTFILE_SPEC\n+#define STARTFILE_SPEC \"%{p:%{mcoff:pinit1.o%s}%{!mcoff:pinit.o%s}}%{!p:%{msystem-v:%{mcoff:vinit1.o%s}%{!mcoff:vinit.o%s}}%{!msystem-v:%{mcoff:init1.o%s}%{!mcoff:init.o%s}}}\"\n+\n+#undef ENDFILE_SPEC\n+#define ENDFILE_SPEC \"%{mcoff:initn.o%s} %{p:_etext.o%s}\"\n+\n+#undef SIZE_TYPE\n+#define SIZE_TYPE \"unsigned int\"\n+\n+#undef WCHAR_TYPE\n+#define WCHAR_TYPE \"int\"\n+\n+#undef PTRDIFF_TYPE\n+#define PTRDIFF_TYPE \"long int\"\n+\n+/* We want to output DBX debugging information.  */\n+\n+#define DBX_DEBUGGING_INFO\n+#define PREFERRED_DEBUGGING_TYPE DBX_DEBUG\n+\n+/* We optionally want to be able to produce SDB debugging output so that\n+   we can create debuggable SDB/coff files.  This won't be needed when\n+   stabs-in-coff works.  */\n+\n+#define SDB_DEBUGGING_INFO\n+\n+/* Generate calls to memcpy, memcmp and memset.  */\n+\n+#define TARGET_MEM_FUNCTIONS\n+\n+/* Handle #pragma pack and sometimes #pragma weak.  */\n+\n+#define HANDLE_SYSV_PRAGMA\n+\n+#define TARGET_THREADS\t(target_flags & MASK_THREADS)\n+#define MASK_THREADS\t0x40000000\n+\n+#define TARGET_POSIX\t(target_flags & MASK_POSIX)\n+#define MASK_POSIX\t0x20000000\n+\n+#define TARGET_SYSTEM_V\t(target_flags & MASK_SYSTEM_V)\n+#define MASK_SYSTEM_V\t0x10000000\n+\n+#define TARGET_COFF\t(target_flags & MASK_COFF)\n+#define MASK_COFF\t0x08000000\n+\n+#undef SUBTARGET_SWITCHES\n+#define SUBTARGET_SWITCHES \\\n+    {\"threads\",\t\tMASK_THREADS},\t\t\\\n+    {\"posix\",\t\tMASK_POSIX},\t\t\\\n+    {\"system-v\",\tMASK_SYSTEM_V},\t\t\\\n+    {\"coff\",\t\tMASK_COFF},\n+\n+#undef SUBTARGET_OVERRIDE_OPTIONS\n+#define SUBTARGET_OVERRIDE_OPTIONS \\\n+{ if (TARGET_SYSTEM_V && profile_flag)\t\t\t\\\n+    warning (\"-msystem-v and -p are incompatible\");\t\t\\\n+  if (TARGET_SYSTEM_V && TARGET_THREADS)\t\t\t\\\n+    warning (\"-msystem-v and -mthreads are incompatible\"); }\n+\n+/* Define this so that C++ destructors will use atexit.  */\n+\n+#define HAVE_ATEXIT\n+\n+/* This is defined only so that we can find the assembler.  Everything else\n+   is in /bin.  */\n+\n+#define MD_EXEC_PREFIX \"/usr/local/lib/gcc-\"\n+\n+/* This is needed because /bin/ld does not handle -L options correctly. */\n+\n+#define LINK_LIBGCC_SPECIAL_1\n+\n+/* The Lynx linker considers __main to be a possible entry point, so we\n+   must use a different name.  */\n+\n+#define NAME__MAIN \"____main\"\n+#define SYMBOL__MAIN ____main"}]}