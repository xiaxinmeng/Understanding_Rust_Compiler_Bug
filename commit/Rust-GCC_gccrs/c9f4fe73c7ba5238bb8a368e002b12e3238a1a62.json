{"sha": "c9f4fe73c7ba5238bb8a368e002b12e3238a1a62", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzlmNGZlNzNjN2JhNTIzOGJiOGEzNjhlMDAyYjEyZTMyMzhhMWE2Mg==", "commit": {"author": {"name": "Martin Liska", "email": "mliska@suse.cz", "date": "2016-06-16T19:25:56Z"}, "committer": {"name": "Martin Liska", "email": "marxin@gcc.gnu.org", "date": "2016-06-16T19:25:56Z"}, "message": "Fix finding of a first match predictor\n\n\t* predict.c (combine_predictions_for_insn): When we find a first\n\tmatch predictor, we should consider just predictors with\n\tPRED_FLAG_FIRST_MATCH.  Print either first match (if any) or\n\tDS theory predictor.\n\t(combine_predictions_for_bb): Likewise.\n\nFrom-SVN: r237539", "tree": {"sha": "6b7b963e1b4063bfecd849ef63345af19eccfc0a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6b7b963e1b4063bfecd849ef63345af19eccfc0a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c9f4fe73c7ba5238bb8a368e002b12e3238a1a62", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c9f4fe73c7ba5238bb8a368e002b12e3238a1a62", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c9f4fe73c7ba5238bb8a368e002b12e3238a1a62", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c9f4fe73c7ba5238bb8a368e002b12e3238a1a62/comments", "author": {"login": "marxin", "id": 2658545, "node_id": "MDQ6VXNlcjI2NTg1NDU=", "avatar_url": "https://avatars.githubusercontent.com/u/2658545?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marxin", "html_url": "https://github.com/marxin", "followers_url": "https://api.github.com/users/marxin/followers", "following_url": "https://api.github.com/users/marxin/following{/other_user}", "gists_url": "https://api.github.com/users/marxin/gists{/gist_id}", "starred_url": "https://api.github.com/users/marxin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marxin/subscriptions", "organizations_url": "https://api.github.com/users/marxin/orgs", "repos_url": "https://api.github.com/users/marxin/repos", "events_url": "https://api.github.com/users/marxin/events{/privacy}", "received_events_url": "https://api.github.com/users/marxin/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "283635f9bd93d373b93efc1f6ffdd215f93be5fe", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/283635f9bd93d373b93efc1f6ffdd215f93be5fe", "html_url": "https://github.com/Rust-GCC/gccrs/commit/283635f9bd93d373b93efc1f6ffdd215f93be5fe"}], "stats": {"total": 38, "additions": 26, "deletions": 12}, "files": [{"sha": "f07df860263fe291eee34da71b5252ff722b8f5c", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c9f4fe73c7ba5238bb8a368e002b12e3238a1a62/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c9f4fe73c7ba5238bb8a368e002b12e3238a1a62/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=c9f4fe73c7ba5238bb8a368e002b12e3238a1a62", "patch": "@@ -1,3 +1,11 @@\n+2016-06-16  Martin Liska  <mliska@suse.cz>\n+\n+\t* predict.c (combine_predictions_for_insn): When we find a first\n+\tmatch predictor, we should consider just predictors with\n+\tPRED_FLAG_FIRST_MATCH.  Print either first match (if any) or\n+\tDS theory predictor.\n+\t(combine_predictions_for_bb): Likewise.\n+\n 2016-06-16  Jakub Jelinek  <jakub@redhat.com>\n \n \t* gimplify.c (gimplify_scan_omp_clauses): Handle COMPONENT_REFs"}, {"sha": "642bd6287a0dbffa4bcd1f923ee82b97b0b02a37", "filename": "gcc/predict.c", "status": "modified", "additions": 18, "deletions": 12, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c9f4fe73c7ba5238bb8a368e002b12e3238a1a62/gcc%2Fpredict.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c9f4fe73c7ba5238bb8a368e002b12e3238a1a62/gcc%2Fpredict.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fpredict.c?ref=c9f4fe73c7ba5238bb8a368e002b12e3238a1a62", "patch": "@@ -835,7 +835,8 @@ combine_predictions_for_insn (rtx_insn *insn, basic_block bb)\n \tint probability = INTVAL (XEXP (XEXP (note, 0), 1));\n \n \tfound = true;\n-\tif (best_predictor > predictor)\n+\tif (best_predictor > predictor\n+\t    && predictor_info[predictor].flags & PRED_FLAG_FIRST_MATCH)\n \t  best_probability = probability, best_predictor = predictor;\n \n \td = (combined_probability * probability\n@@ -855,18 +856,20 @@ combine_predictions_for_insn (rtx_insn *insn, basic_block bb)\n      use no_prediction heuristic, in case we did match, use either\n      first match or Dempster-Shaffer theory depending on the flags.  */\n \n-  if (predictor_info [best_predictor].flags & PRED_FLAG_FIRST_MATCH)\n+  if (best_predictor != END_PREDICTORS)\n     first_match = true;\n \n   if (!found)\n     dump_prediction (dump_file, PRED_NO_PREDICTION,\n \t\t     combined_probability, bb);\n   else\n     {\n-      dump_prediction (dump_file, PRED_DS_THEORY, combined_probability,\n-\t\t       bb, !first_match ? REASON_NONE : REASON_IGNORED);\n-      dump_prediction (dump_file, PRED_FIRST_MATCH, best_probability,\n-\t\t       bb, first_match ? REASON_NONE : REASON_IGNORED);\n+      if (!first_match)\n+\tdump_prediction (dump_file, PRED_DS_THEORY, combined_probability,\n+\t\t\t bb, !first_match ? REASON_NONE : REASON_IGNORED);\n+      else\n+\tdump_prediction (dump_file, PRED_FIRST_MATCH, best_probability,\n+\t\t\t bb, first_match ? REASON_NONE : REASON_IGNORED);\n     }\n \n   if (first_match)\n@@ -1096,7 +1099,8 @@ combine_predictions_for_bb (basic_block bb, bool dry_run)\n \t  found = true;\n \t  /* First match heuristics would be widly confused if we predicted\n \t     both directions.  */\n-\t  if (best_predictor > predictor)\n+\t  if (best_predictor > predictor\n+\t    && predictor_info[predictor].flags & PRED_FLAG_FIRST_MATCH)\n \t    {\n               struct edge_prediction *pred2;\n \t      int prob = probability;\n@@ -1142,17 +1146,19 @@ combine_predictions_for_bb (basic_block bb, bool dry_run)\n      use no_prediction heuristic, in case we did match, use either\n      first match or Dempster-Shaffer theory depending on the flags.  */\n \n-  if (predictor_info [best_predictor].flags & PRED_FLAG_FIRST_MATCH)\n+  if (best_predictor != END_PREDICTORS)\n     first_match = true;\n \n   if (!found)\n     dump_prediction (dump_file, PRED_NO_PREDICTION, combined_probability, bb);\n   else\n     {\n-      dump_prediction (dump_file, PRED_DS_THEORY, combined_probability, bb,\n-\t\t       !first_match ? REASON_NONE : REASON_IGNORED);\n-      dump_prediction (dump_file, PRED_FIRST_MATCH, best_probability, bb,\n-\t\t       first_match ? REASON_NONE : REASON_IGNORED);\n+      if (!first_match)\n+\tdump_prediction (dump_file, PRED_DS_THEORY, combined_probability, bb,\n+\t\t\t !first_match ? REASON_NONE : REASON_IGNORED);\n+      else\n+\tdump_prediction (dump_file, PRED_FIRST_MATCH, best_probability, bb,\n+\t\t\t first_match ? REASON_NONE : REASON_IGNORED);\n     }\n \n   if (first_match)"}]}