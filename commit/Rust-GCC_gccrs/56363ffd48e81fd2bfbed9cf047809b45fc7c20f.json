{"sha": "56363ffd48e81fd2bfbed9cf047809b45fc7c20f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTYzNjNmZmQ0OGU4MWZkMmJmYmVkOWNmMDQ3ODA5YjQ1ZmM3YzIwZg==", "commit": {"author": {"name": "Jan Hubicka", "email": "hubicka@ucw.cz", "date": "2014-06-15T23:38:29Z"}, "committer": {"name": "Jan Hubicka", "email": "hubicka@gcc.gnu.org", "date": "2014-06-15T23:38:29Z"}, "message": "c-common.c (handle_tls_model_attribute): Use set_decl_tls_model.\n\n\t* c-family/c-common.c (handle_tls_model_attribute): Use set_decl_tls_model.\n\t* cgraph.h (struct varpool_node): Add tls_model.\n\t* tree.c (decl_tls_model, set_decl_tls_model): New functions.\n\t* tree.h (DECL_TLS_MODEL): Update.\n\t(DECL_THREAD_LOCAL_P): Check that variable is static.\n\t(decl_tls_model): Declare.\n\t(set_decl_tls_model): Declare.\n\t* tree-emutls.c (get_emutls_init_templ_addr): First build decl and then\n\tset symbol prorperties.\n\t(get_emutls_init_templ_addr): Cleanup.\n\t(new_emutls_decl): Update.\n\t* lto-cgraph.c (lto_output_varpool_node): Stream TLS model\n\t(lto_input_varpool_node): Likewise.\n\t* lto-streamer-out.c (hash_tree): Likewise.\n\t* tree-streamer-in.c (unpack_ts_decl_with_vis_value_fields): Do\n\tnot stream DECL_TLS_MODEL.\n\t* tree-profile.c (init_ic_make_global_vars): Use\n\tset_decl_tls_model.\n\t* tree-core.h (tree_decl_with_vis): Remove tls_model;\n\tupdate comments.\n\n\t* c-parser.c (c_parser_omp_threadprivate): Likewise.\n\t* c-decl.c (merge_decls): Likewise.\n\n\t* decl.c (duplicate_decls): Use set_decl_tls_model.\n\t(grokdeclarator): Likewise.\n\t* semantics.c (finish_id_expression): Check TLS only for\n\tstatic variables.\n\t(finish_omp_threadprivate): Use decl_default_tls_model.\n\t* decl2.c (get_guard): Likewise.\n\t* call.c (make_temporary_var_for_ref_to_temp): Likewise.\n\n\t* gcc-interface/utils.c (process_attributes): Use\n\tset_decl_tls_model.\n\n\t* trans-common.c (build_common_decl): Use\n\tset_decl_tls_model.\n\t* trans-decl.c (gfc_finish_var_decl): Likewise.\n\t(get_proc_pointer_decl): Likewise.\n\n\t* lto.c (compare_tree_sccs_1): Do not compare DECL_TLS_MODEL.\n\nFrom-SVN: r211689", "tree": {"sha": "997fbc019bd9db4f0a5a593250dbf13e6ebe406e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/997fbc019bd9db4f0a5a593250dbf13e6ebe406e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/56363ffd48e81fd2bfbed9cf047809b45fc7c20f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/56363ffd48e81fd2bfbed9cf047809b45fc7c20f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/56363ffd48e81fd2bfbed9cf047809b45fc7c20f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/56363ffd48e81fd2bfbed9cf047809b45fc7c20f/comments", "author": null, "committer": null, "parents": [{"sha": "a416c4c766df05b1e85dcee2fe7857e9a6e87b88", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a416c4c766df05b1e85dcee2fe7857e9a6e87b88", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a416c4c766df05b1e85dcee2fe7857e9a6e87b88"}], "stats": {"total": 147, "additions": 114, "deletions": 33}, "files": [{"sha": "1917c285a677f2bfd057751ecb8f45c5e57dc084", "filename": "gcc/ChangeLog", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/56363ffd48e81fd2bfbed9cf047809b45fc7c20f/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/56363ffd48e81fd2bfbed9cf047809b45fc7c20f/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=56363ffd48e81fd2bfbed9cf047809b45fc7c20f", "patch": "@@ -1,3 +1,26 @@\n+2014-06-15  Jan Hubicka  <hubicka@ucw.cz>\n+\n+\t* c-family/c-common.c (handle_tls_model_attribute): Use set_decl_tls_model.\n+\t* cgraph.h (struct varpool_node): Add tls_model.\n+\t* tree.c (decl_tls_model, set_decl_tls_model): New functions.\n+\t* tree.h (DECL_TLS_MODEL): Update.\n+\t(DECL_THREAD_LOCAL_P): Check that variable is static.\n+\t(decl_tls_model): Declare.\n+\t(set_decl_tls_model): Declare.\n+\t* tree-emutls.c (get_emutls_init_templ_addr): First build decl and then\n+\tset symbol prorperties.\n+\t(get_emutls_init_templ_addr): Cleanup.\n+\t(new_emutls_decl): Update.\n+\t* lto-cgraph.c (lto_output_varpool_node): Stream TLS model\n+\t(lto_input_varpool_node): Likewise.\n+\t* lto-streamer-out.c (hash_tree): Likewise.\n+\t* tree-streamer-in.c (unpack_ts_decl_with_vis_value_fields): Do\n+\tnot stream DECL_TLS_MODEL.\n+\t* tree-profile.c (init_ic_make_global_vars): Use\n+\tset_decl_tls_model.\n+\t* tree-core.h (tree_decl_with_vis): Remove tls_model;\n+\tupdate comments.\n+\n 2014-06-15  Richard Sandiford  <rdsandiford@googlemail.com>\n \n \t* df.h (DF_REF_REG_USE_P, DF_MWS_REG_USE_P): Remove null checks."}, {"sha": "649533afb1dcf4613af4984afbee68ee97399852", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/56363ffd48e81fd2bfbed9cf047809b45fc7c20f/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/56363ffd48e81fd2bfbed9cf047809b45fc7c20f/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=56363ffd48e81fd2bfbed9cf047809b45fc7c20f", "patch": "@@ -1,3 +1,8 @@\n+2014-06-15  Jan Hubicka  <hubicka@ucw.cz>\n+\n+\t* gcc-interface/utils.c (process_attributes): Use\n+\tset_decl_tls_model.\n+\n 2014-06-14  Bernd Edlinger  <bernd.edlinger@hotmail.de>\n \n \tPR ada/61505"}, {"sha": "4d4623b3419e46330157ab762a2508d5b0231331", "filename": "gcc/ada/gcc-interface/utils.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/56363ffd48e81fd2bfbed9cf047809b45fc7c20f/gcc%2Fada%2Fgcc-interface%2Futils.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/56363ffd48e81fd2bfbed9cf047809b45fc7c20f/gcc%2Fada%2Fgcc-interface%2Futils.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2Futils.c?ref=56363ffd48e81fd2bfbed9cf047809b45fc7c20f", "patch": "@@ -2495,7 +2495,7 @@ process_attributes (tree *node, struct attrib **attr_list, bool in_place,\n \tbreak;\n \n       case ATTR_THREAD_LOCAL_STORAGE:\n-\tDECL_TLS_MODEL (*node) = decl_default_tls_model (*node);\n+\tset_decl_tls_model (*node, decl_default_tls_model (*node));\n \tDECL_COMMON (*node) = 0;\n \tbreak;\n       }"}, {"sha": "077263e1de5881d82f9a0d25ff581954952fd62e", "filename": "gcc/c-family/c-common.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/56363ffd48e81fd2bfbed9cf047809b45fc7c20f/gcc%2Fc-family%2Fc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/56363ffd48e81fd2bfbed9cf047809b45fc7c20f/gcc%2Fc-family%2Fc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-common.c?ref=56363ffd48e81fd2bfbed9cf047809b45fc7c20f", "patch": "@@ -8036,7 +8036,7 @@ handle_tls_model_attribute (tree *node, tree name, tree args,\n   else\n     error (\"tls_model argument must be one of \\\"local-exec\\\", \\\"initial-exec\\\", \\\"local-dynamic\\\" or \\\"global-dynamic\\\"\");\n \n-  DECL_TLS_MODEL (decl) = kind;\n+  set_decl_tls_model (decl, kind);\n   return NULL_TREE;\n }\n "}, {"sha": "cc3e5feda8a3773a4d85425b6890199a15d976e3", "filename": "gcc/c/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/56363ffd48e81fd2bfbed9cf047809b45fc7c20f/gcc%2Fc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/56363ffd48e81fd2bfbed9cf047809b45fc7c20f/gcc%2Fc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2FChangeLog?ref=56363ffd48e81fd2bfbed9cf047809b45fc7c20f", "patch": "@@ -1,3 +1,8 @@\n+2014-06-15  Jan Hubicka  <hubicka@ucw.cz>\n+\n+\t* c-parser.c (c_parser_omp_threadprivate): Likewise.\n+\t* c-decl.c (merge_decls): Likewise.\n+\n 2014-06-09  Marek Polacek  <polacek@redhat.com>\n \n \tPR c/36446"}, {"sha": "34560308b832d426e4c50b188159cd54878e8980", "filename": "gcc/c/c-decl.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/56363ffd48e81fd2bfbed9cf047809b45fc7c20f/gcc%2Fc%2Fc-decl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/56363ffd48e81fd2bfbed9cf047809b45fc7c20f/gcc%2Fc%2Fc-decl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2Fc-decl.c?ref=56363ffd48e81fd2bfbed9cf047809b45fc7c20f", "patch": "@@ -2294,7 +2294,7 @@ merge_decls (tree newdecl, tree olddecl, tree newtype, tree oldtype)\n   /* Merge the threadprivate attribute.  */\n   if (TREE_CODE (olddecl) == VAR_DECL && C_DECL_THREADPRIVATE_P (olddecl))\n     {\n-      DECL_TLS_MODEL (newdecl) = DECL_TLS_MODEL (olddecl);\n+      set_decl_tls_model (newdecl, DECL_TLS_MODEL (olddecl));\n       C_DECL_THREADPRIVATE_P (newdecl) = 1;\n     }\n \n@@ -6345,7 +6345,7 @@ grokdeclarator (const struct c_declarator *declarator,\n \t  }\n \n \tif (threadp)\n-\t  DECL_TLS_MODEL (decl) = decl_default_tls_model (decl);\n+\t  set_decl_tls_model (decl, decl_default_tls_model (decl));\n       }\n \n     if ((storage_class == csc_extern"}, {"sha": "5fecb488b6a2d4b15ccd0d45be16bc79b9dff9d7", "filename": "gcc/c/c-parser.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/56363ffd48e81fd2bfbed9cf047809b45fc7c20f/gcc%2Fc%2Fc-parser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/56363ffd48e81fd2bfbed9cf047809b45fc7c20f/gcc%2Fc%2Fc-parser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2Fc-parser.c?ref=56363ffd48e81fd2bfbed9cf047809b45fc7c20f", "patch": "@@ -13557,7 +13557,7 @@ c_parser_omp_threadprivate (c_parser *parser)\n \t{\n \t  if (! DECL_THREAD_LOCAL_P (v))\n \t    {\n-\t      DECL_TLS_MODEL (v) = decl_default_tls_model (v);\n+\t      set_decl_tls_model (v, decl_default_tls_model (v));\n \t      /* If rtl has been already set for this var, call\n \t\t make_decl_rtl once again, so that encode_section_info\n \t\t has a chance to look at the new decl flags.  */"}, {"sha": "a701cf90f0842b4dccf4bd0679f9492e5364a117", "filename": "gcc/cgraph.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/56363ffd48e81fd2bfbed9cf047809b45fc7c20f/gcc%2Fcgraph.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/56363ffd48e81fd2bfbed9cf047809b45fc7c20f/gcc%2Fcgraph.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcgraph.h?ref=56363ffd48e81fd2bfbed9cf047809b45fc7c20f", "patch": "@@ -708,6 +708,8 @@ class GTY((tag (\"SYMTAB_VARIABLE\"))) varpool_node : public symtab_node {\n   /* Set if the variable is dynamically initialized, except for\n      function local statics.   */\n   unsigned dynamically_initialized : 1;\n+\n+  ENUM_BITFIELD(tls_model) tls_model : 3;\n };\n \n /* Every top level asm statement is put into a asm_node.  */"}, {"sha": "8ab004896fc4ff78834be28eff4753ea66ce8480", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/56363ffd48e81fd2bfbed9cf047809b45fc7c20f/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/56363ffd48e81fd2bfbed9cf047809b45fc7c20f/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=56363ffd48e81fd2bfbed9cf047809b45fc7c20f", "patch": "@@ -1,3 +1,13 @@\n+2014-06-15  Jan Hubicka  <hubicka@ucw.cz>\n+\n+\t* decl.c (duplicate_decls): Use set_decl_tls_model.\n+\t(grokdeclarator): Likewise.\n+\t* semantics.c (finish_id_expression): Check TLS only for\n+\tstatic variables.\n+\t(finish_omp_threadprivate): Use decl_default_tls_model.\n+\t* decl2.c (get_guard): Likewise.\n+\t* call.c (make_temporary_var_for_ref_to_temp): Likewise.\n+\n 2014-06-14  Paolo Carlini  <paolo.carlini@oracle.com>\n \n \tPR c++/33101"}, {"sha": "1d4c4f99e2f3d066796aef45a1a6abe2c5fe592b", "filename": "gcc/cp/call.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/56363ffd48e81fd2bfbed9cf047809b45fc7c20f/gcc%2Fcp%2Fcall.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/56363ffd48e81fd2bfbed9cf047809b45fc7c20f/gcc%2Fcp%2Fcall.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcall.c?ref=56363ffd48e81fd2bfbed9cf047809b45fc7c20f", "patch": "@@ -9387,7 +9387,7 @@ make_temporary_var_for_ref_to_temp (tree decl, tree type)\n       tree name;\n \n       TREE_STATIC (var) = TREE_STATIC (decl);\n-      DECL_TLS_MODEL (var) = DECL_TLS_MODEL (decl);\n+      set_decl_tls_model (var, DECL_TLS_MODEL (decl));\n       name = mangle_ref_init_variable (decl);\n       DECL_NAME (var) = name;\n       SET_DECL_ASSEMBLER_NAME (var, name);"}, {"sha": "1c8d497884881327ed24035c401324a54c44ba1d", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/56363ffd48e81fd2bfbed9cf047809b45fc7c20f/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/56363ffd48e81fd2bfbed9cf047809b45fc7c20f/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=56363ffd48e81fd2bfbed9cf047809b45fc7c20f", "patch": "@@ -1952,7 +1952,7 @@ duplicate_decls (tree newdecl, tree olddecl, bool newdecl_is_friend)\n \t      if (!DECL_LANG_SPECIFIC (newdecl))\n \t\tretrofit_lang_decl (newdecl);\n \n-\t      DECL_TLS_MODEL (newdecl) = DECL_TLS_MODEL (olddecl);\n+\t      set_decl_tls_model (newdecl, DECL_TLS_MODEL (olddecl));\n \t      CP_DECL_THREADPRIVATE_P (newdecl) = 1;\n \t    }\n \t}\n@@ -8016,7 +8016,8 @@ grokvardecl (tree type,\n \n   if (decl_spec_seq_has_spec_p (declspecs, ds_thread))\n     {\n-      DECL_TLS_MODEL (decl) = decl_default_tls_model (decl);\n+      if (DECL_EXTERNAL (decl) || TREE_PUBLIC (decl))\n+        set_decl_tls_model (decl, decl_default_tls_model (decl));\n       if (declspecs->gnu_thread_keyword_p)\n \tDECL_GNU_TLS_P (decl) = true;\n     }\n@@ -10699,7 +10700,7 @@ grokdeclarator (const cp_declarator *declarator,\n \n \t\tif (thread_p)\n \t\t  {\n-\t\t    DECL_TLS_MODEL (decl) = decl_default_tls_model (decl);\n+\t\t    set_decl_tls_model (decl, decl_default_tls_model (decl));\n \t\t    if (declspecs->gnu_thread_keyword_p)\n \t\t      DECL_GNU_TLS_P (decl) = true;\n \t\t  }"}, {"sha": "99ea582f9588e9862aeb9072c5a4511d2f0bec42", "filename": "gcc/cp/decl2.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/56363ffd48e81fd2bfbed9cf047809b45fc7c20f/gcc%2Fcp%2Fdecl2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/56363ffd48e81fd2bfbed9cf047809b45fc7c20f/gcc%2Fcp%2Fdecl2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl2.c?ref=56363ffd48e81fd2bfbed9cf047809b45fc7c20f", "patch": "@@ -2939,7 +2939,7 @@ get_guard (tree decl)\n       TREE_STATIC (guard) = TREE_STATIC (decl);\n       DECL_COMMON (guard) = DECL_COMMON (decl);\n       DECL_COMDAT (guard) = DECL_COMDAT (decl);\n-      DECL_TLS_MODEL (guard) = DECL_TLS_MODEL (decl);\n+      set_decl_tls_model (guard, DECL_TLS_MODEL (decl));\n       if (DECL_ONE_ONLY (decl))\n \tmake_decl_one_only (guard, cxx_comdat_group (guard));\n       if (TREE_PUBLIC (decl))\n@@ -4212,7 +4212,7 @@ handle_tls_init (void)\n   DECL_ARTIFICIAL (guard) = true;\n   DECL_IGNORED_P (guard) = true;\n   TREE_USED (guard) = true;\n-  DECL_TLS_MODEL (guard) = decl_default_tls_model (guard);\n+  set_decl_tls_model (guard, decl_default_tls_model (guard));\n   pushdecl_top_level_and_finish (guard, NULL_TREE);\n \n   tree fn = get_local_tls_init_fn ();"}, {"sha": "ec510c96fedf824852b4a6e6a52a2b9ad4743f52", "filename": "gcc/cp/semantics.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/56363ffd48e81fd2bfbed9cf047809b45fc7c20f/gcc%2Fcp%2Fsemantics.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/56363ffd48e81fd2bfbed9cf047809b45fc7c20f/gcc%2Fcp%2Fsemantics.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fsemantics.c?ref=56363ffd48e81fd2bfbed9cf047809b45fc7c20f", "patch": "@@ -3493,6 +3493,7 @@ finish_id_expression (tree id_expression,\n       tree wrap;\n       if (VAR_P (decl)\n \t  && !cp_unevaluated_operand\n+\t  && (TREE_STATIC (decl) || DECL_EXTERNAL (decl))\n \t  && DECL_THREAD_LOCAL_P (decl)\n \t  && (wrap = get_tls_wrapper_fn (decl)))\n \t{\n@@ -5956,7 +5957,7 @@ finish_omp_threadprivate (tree vars)\n \n \t  if (! DECL_THREAD_LOCAL_P (v))\n \t    {\n-\t      DECL_TLS_MODEL (v) = decl_default_tls_model (v);\n+\t      set_decl_tls_model (v, decl_default_tls_model (v));\n \t      /* If rtl has been already set for this var, call\n \t\t make_decl_rtl once again, so that encode_section_info\n \t\t has a chance to look at the new decl flags.  */"}, {"sha": "e795de6767b8c72446c468c3134c64e86551e3e9", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/56363ffd48e81fd2bfbed9cf047809b45fc7c20f/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/56363ffd48e81fd2bfbed9cf047809b45fc7c20f/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=56363ffd48e81fd2bfbed9cf047809b45fc7c20f", "patch": "@@ -1,3 +1,10 @@\n+2014-06-15  Jan Hubicka  <hubicka@ucw.cz>\n+\n+\t* trans-common.c (build_common_decl): Use\n+\tset_decl_tls_model.\n+\t* trans-decl.c (gfc_finish_var_decl): Likewise.\n+\t(get_proc_pointer_decl): Likewise.\n+\n 2014-06-15  Francois-Xavier Coudert  <fxcoudert@gcc.gnu.org>\n \n \tPR fortran/28484"}, {"sha": "5a52984602f4ac4810b804dfb998efea3c846da3", "filename": "gcc/fortran/trans-common.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/56363ffd48e81fd2bfbed9cf047809b45fc7c20f/gcc%2Ffortran%2Ftrans-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/56363ffd48e81fd2bfbed9cf047809b45fc7c20f/gcc%2Ffortran%2Ftrans-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-common.c?ref=56363ffd48e81fd2bfbed9cf047809b45fc7c20f", "patch": "@@ -454,7 +454,7 @@ build_common_decl (gfc_common_head *com, tree union_type, bool is_init)\n       gfc_set_decl_location (decl, &com->where);\n \n       if (com->threadprivate)\n-\tDECL_TLS_MODEL (decl) = decl_default_tls_model (decl);\n+\tset_decl_tls_model (decl, decl_default_tls_model (decl));\n \n       /* Place the back end declaration for this common block in\n          GLOBAL_BINDING_LEVEL.  */"}, {"sha": "bd82a905560f833f9ca08d7d527c2118d4f4b009", "filename": "gcc/fortran/trans-decl.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/56363ffd48e81fd2bfbed9cf047809b45fc7c20f/gcc%2Ffortran%2Ftrans-decl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/56363ffd48e81fd2bfbed9cf047809b45fc7c20f/gcc%2Ffortran%2Ftrans-decl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-decl.c?ref=56363ffd48e81fd2bfbed9cf047809b45fc7c20f", "patch": "@@ -631,7 +631,7 @@ gfc_finish_var_decl (tree decl, gfc_symbol * sym)\n   /* Handle threadprivate variables.  */\n   if (sym->attr.threadprivate\n       && (TREE_STATIC (decl) || DECL_EXTERNAL (decl)))\n-    DECL_TLS_MODEL (decl) = decl_default_tls_model (decl);\n+    set_decl_tls_model (decl, decl_default_tls_model (decl));\n \n   gfc_finish_decl_attrs (decl, &sym->attr);\n }\n@@ -1645,7 +1645,7 @@ get_proc_pointer_decl (gfc_symbol *sym)\n   /* Handle threadprivate procedure pointers.  */\n   if (sym->attr.threadprivate\n       && (TREE_STATIC (decl) || DECL_EXTERNAL (decl)))\n-    DECL_TLS_MODEL (decl) = decl_default_tls_model (decl);\n+    set_decl_tls_model (decl, decl_default_tls_model (decl));\n \n   attributes = add_attributes_to_decl (sym->attr, NULL_TREE);\n   decl_attributes (&decl, attributes, 0);"}, {"sha": "6c6896cb0f886abe732010745f4ac36dda995aef", "filename": "gcc/lto-cgraph.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/56363ffd48e81fd2bfbed9cf047809b45fc7c20f/gcc%2Flto-cgraph.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/56363ffd48e81fd2bfbed9cf047809b45fc7c20f/gcc%2Flto-cgraph.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flto-cgraph.c?ref=56363ffd48e81fd2bfbed9cf047809b45fc7c20f", "patch": "@@ -609,6 +609,7 @@ lto_output_varpool_node (struct lto_simple_output_block *ob, varpool_node *node,\n \t\t     && boundary_p && !DECL_EXTERNAL (node->decl), 1);\n \t  /* in_other_partition.  */\n     }\n+  bp_pack_value (&bp, node->tls_model, 3);\n   streamer_write_bitpack (&bp);\n \n   group = node->get_comdat_group ();\n@@ -1265,6 +1266,7 @@ input_varpool_node (struct lto_file_decl_data *file_data,\n     }\n   if (node->alias && !node->analyzed && node->weakref)\n     node->alias_target = get_alias_symbol (node->decl);\n+  node->tls_model = (enum tls_model)bp_unpack_value (&bp, 3);\n   group = read_identifier (ib);\n   if (group)\n     {"}, {"sha": "14d3623a1bea4f11c9c9be440acd33d72c0c9f50", "filename": "gcc/lto-streamer-out.c", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/56363ffd48e81fd2bfbed9cf047809b45fc7c20f/gcc%2Flto-streamer-out.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/56363ffd48e81fd2bfbed9cf047809b45fc7c20f/gcc%2Flto-streamer-out.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flto-streamer-out.c?ref=56363ffd48e81fd2bfbed9cf047809b45fc7c20f", "patch": "@@ -821,7 +821,6 @@ hash_tree (struct streamer_tree_cache_d *cache, tree t)\n \t  v = iterative_hash_host_wide_int (DECL_HARD_REGISTER (t)\n \t\t\t\t\t    | (DECL_IN_CONSTANT_POOL (t) << 1),\n \t\t\t\t\t    v);\n-\t  v = iterative_hash_host_wide_int (DECL_TLS_MODEL (t), v);\n \t}\n       if (TREE_CODE (t) == FUNCTION_DECL)\n \tv = iterative_hash_host_wide_int (DECL_FINAL_P (t)"}, {"sha": "9c45cc6071c46641b1d6e2391a5f3774a00af8c0", "filename": "gcc/lto/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/56363ffd48e81fd2bfbed9cf047809b45fc7c20f/gcc%2Flto%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/56363ffd48e81fd2bfbed9cf047809b45fc7c20f/gcc%2Flto%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flto%2FChangeLog?ref=56363ffd48e81fd2bfbed9cf047809b45fc7c20f", "patch": "@@ -1,3 +1,7 @@\n+2014-06-15  Jan Hubicka  <hubicka@ucw.cz>\n+\n+\t* lto.c (compare_tree_sccs_1): Do not compare DECL_TLS_MODEL.\n+\n 2014-06-10  Jan Hubicka  <hubicka@ucw.cz>\n \n \t* lto.c (read_cgraph_and_symbols): Remove unreachable symbols."}, {"sha": "015eaf0c1a0a878f0f8734112f06d71abd7f69b2", "filename": "gcc/lto/lto.c", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/56363ffd48e81fd2bfbed9cf047809b45fc7c20f/gcc%2Flto%2Flto.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/56363ffd48e81fd2bfbed9cf047809b45fc7c20f/gcc%2Flto%2Flto.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flto%2Flto.c?ref=56363ffd48e81fd2bfbed9cf047809b45fc7c20f", "patch": "@@ -1299,7 +1299,6 @@ compare_tree_sccs_1 (tree t1, tree t2, tree **map)\n \t  compare_values (DECL_HARD_REGISTER);\n           /* DECL_IN_TEXT_SECTION is set during final asm output only.  */\n \t  compare_values (DECL_IN_CONSTANT_POOL);\n-\t  compare_values (DECL_TLS_MODEL);\n \t}\n       if (VAR_OR_FUNCTION_DECL_P (t1))\n \tcompare_values (DECL_INIT_PRIORITY);"}, {"sha": "aa7498b90e013d3951244f3eadbc9672a2323b0a", "filename": "gcc/tree-core.h", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/56363ffd48e81fd2bfbed9cf047809b45fc7c20f/gcc%2Ftree-core.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/56363ffd48e81fd2bfbed9cf047809b45fc7c20f/gcc%2Ftree-core.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-core.h?ref=56363ffd48e81fd2bfbed9cf047809b45fc7c20f", "patch": "@@ -1455,10 +1455,9 @@ struct GTY(()) tree_decl_with_vis {\n \n  unsigned seen_in_bind_expr : 1;\n  unsigned comdat_flag : 1;\n+ /* Used for FUNCTION_DECL, VAR_DECL and in C++ for TYPE_DECL.  */\n  ENUM_BITFIELD(symbol_visibility) visibility : 2;\n  unsigned visibility_specified : 1;\n- /* Belongs to VAR_DECL exclusively.  */\n- ENUM_BITFIELD(tls_model) tls_model : 3;\n \n  /* Belong to FUNCTION_DECL exclusively.  */\n  unsigned init_priority_p : 1;\n@@ -1470,7 +1469,7 @@ struct GTY(()) tree_decl_with_vis {\n  unsigned cxx_destructor : 1;\n  /* Belong to FUNCTION_DECL exclusively.  */\n  unsigned final : 1;\n- /* 12 unused bits. */\n+ /* 15 unused bits. */\n };\n \n struct GTY(()) tree_var_decl {"}, {"sha": "fe1e85d9014d44a9c9e50b4d43f255bcf428b821", "filename": "gcc/tree-emutls.c", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/56363ffd48e81fd2bfbed9cf047809b45fc7c20f/gcc%2Ftree-emutls.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/56363ffd48e81fd2bfbed9cf047809b45fc7c20f/gcc%2Ftree-emutls.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-emutls.c?ref=56363ffd48e81fd2bfbed9cf047809b45fc7c20f", "patch": "@@ -250,10 +250,10 @@ get_emutls_init_templ_addr (tree decl)\n   DECL_WEAK (to) = DECL_WEAK (decl);\n   if (DECL_ONE_ONLY (decl))\n     {\n-      make_decl_one_only (to, DECL_ASSEMBLER_NAME (to));\n       TREE_STATIC (to) = TREE_STATIC (decl);\n       TREE_PUBLIC (to) = TREE_PUBLIC (decl);\n       DECL_VISIBILITY (to) = DECL_VISIBILITY (decl);\n+      make_decl_one_only (to, DECL_ASSEMBLER_NAME (to));\n     }\n   else\n     TREE_STATIC (to) = 1;\n@@ -263,9 +263,7 @@ get_emutls_init_templ_addr (tree decl)\n   DECL_INITIAL (decl) = NULL;\n \n   if (targetm.emutls.tmpl_section)\n-    {\n-      set_decl_section_name (to, targetm.emutls.tmpl_section);\n-    }\n+    set_decl_section_name (to, targetm.emutls.tmpl_section);\n   else\n     set_decl_section_name (to, DECL_SECTION_NAME (decl));\n \n@@ -292,7 +290,6 @@ new_emutls_decl (tree decl, tree alias_of)\n \n   SET_DECL_ASSEMBLER_NAME (to, DECL_NAME (to));\n \n-  DECL_TLS_MODEL (to) = TLS_MODEL_EMULATED;\n   DECL_ARTIFICIAL (to) = 1;\n   DECL_IGNORED_P (to) = 1;\n   TREE_READONLY (to) = 0;\n@@ -314,6 +311,8 @@ new_emutls_decl (tree decl, tree alias_of)\n   if (DECL_ONE_ONLY (decl))\n     make_decl_one_only (to, DECL_ASSEMBLER_NAME (to));\n \n+  set_decl_tls_model (to, TLS_MODEL_EMULATED);\n+\n   /* If we're not allowed to change the proxy object's alignment,\n      pretend it has been set by the user.  */\n   if (targetm.emutls.var_align_fixed)"}, {"sha": "e0de24cd0e2dc31745667916abe108a7f55ca664", "filename": "gcc/tree-profile.c", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/56363ffd48e81fd2bfbed9cf047809b45fc7c20f/gcc%2Ftree-profile.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/56363ffd48e81fd2bfbed9cf047809b45fc7c20f/gcc%2Ftree-profile.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-profile.c?ref=56363ffd48e81fd2bfbed9cf047809b45fc7c20f", "patch": "@@ -110,8 +110,7 @@ init_ic_make_global_vars (void)\n   DECL_ARTIFICIAL (ic_void_ptr_var) = 1;\n   DECL_INITIAL (ic_void_ptr_var) = NULL;\n   if (targetm.have_tls)\n-    DECL_TLS_MODEL (ic_void_ptr_var) =\n-      decl_default_tls_model (ic_void_ptr_var);\n+    set_decl_tls_model (ic_void_ptr_var, decl_default_tls_model (ic_void_ptr_var));\n \n   varpool_finalize_decl (ic_void_ptr_var);\n \n@@ -141,8 +140,7 @@ init_ic_make_global_vars (void)\n   DECL_ARTIFICIAL (ic_gcov_type_ptr_var) = 1;\n   DECL_INITIAL (ic_gcov_type_ptr_var) = NULL;\n   if (targetm.have_tls)\n-    DECL_TLS_MODEL (ic_gcov_type_ptr_var) =\n-      decl_default_tls_model (ic_gcov_type_ptr_var);\n+    set_decl_tls_model (ic_gcov_type_ptr_var, decl_default_tls_model (ic_gcov_type_ptr_var));\n \n   varpool_finalize_decl (ic_gcov_type_ptr_var);\n }"}, {"sha": "1ab9d9f7d05b194b695b7b9d1f8cd8a0017da4e4", "filename": "gcc/tree-streamer-in.c", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/56363ffd48e81fd2bfbed9cf047809b45fc7c20f/gcc%2Ftree-streamer-in.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/56363ffd48e81fd2bfbed9cf047809b45fc7c20f/gcc%2Ftree-streamer-in.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-streamer-in.c?ref=56363ffd48e81fd2bfbed9cf047809b45fc7c20f", "patch": "@@ -280,7 +280,6 @@ unpack_ts_decl_with_vis_value_fields (struct bitpack_d *bp, tree expr)\n     {\n       DECL_HARD_REGISTER (expr) = (unsigned) bp_unpack_value (bp, 1);\n       DECL_IN_CONSTANT_POOL (expr) = (unsigned) bp_unpack_value (bp, 1);\n-      DECL_TLS_MODEL (expr) = (enum tls_model) bp_unpack_value (bp,  3);\n     }\n \n   if (TREE_CODE (expr) == FUNCTION_DECL)"}, {"sha": "c65214c83b6e94dd6be16ce94e932dd9d21c9599", "filename": "gcc/tree-streamer-out.c", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/56363ffd48e81fd2bfbed9cf047809b45fc7c20f/gcc%2Ftree-streamer-out.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/56363ffd48e81fd2bfbed9cf047809b45fc7c20f/gcc%2Ftree-streamer-out.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-streamer-out.c?ref=56363ffd48e81fd2bfbed9cf047809b45fc7c20f", "patch": "@@ -248,7 +248,6 @@ pack_ts_decl_with_vis_value_fields (struct bitpack_d *bp, tree expr)\n       bp_pack_value (bp, DECL_HARD_REGISTER (expr), 1);\n       /* DECL_IN_TEXT_SECTION is set during final asm output only. */\n       bp_pack_value (bp, DECL_IN_CONSTANT_POOL (expr), 1);\n-      bp_pack_value (bp, DECL_TLS_MODEL (expr),  3);\n     }\n \n   if (TREE_CODE (expr) == FUNCTION_DECL)"}, {"sha": "559e7581ef85ed8260bf1d09ec177fc8af1da13b", "filename": "gcc/tree.c", "status": "modified", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/56363ffd48e81fd2bfbed9cf047809b45fc7c20f/gcc%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/56363ffd48e81fd2bfbed9cf047809b45fc7c20f/gcc%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.c?ref=56363ffd48e81fd2bfbed9cf047809b45fc7c20f", "patch": "@@ -657,6 +657,33 @@ set_decl_section_name (tree node, const char *value)\n   snode->set_section (value);\n }\n \n+/* Return TLS model of a variable NODE.  */\n+enum tls_model\n+decl_tls_model (const_tree node)\n+{\n+  struct varpool_node *snode = varpool_get_node (node);\n+  if (!snode)\n+    return TLS_MODEL_NONE;\n+  return snode->tls_model;\n+}\n+\n+/* Set TLS model of variable NODE to MODEL.  */\n+void\n+set_decl_tls_model (tree node, enum tls_model model)\n+{\n+  struct varpool_node *vnode;\n+\n+  if (model == TLS_MODEL_NONE)\n+    {\n+      vnode = varpool_get_node (node);\n+      if (!vnode)\n+\treturn;\n+    }\n+  else\n+    vnode = varpool_node_for_decl (node);\n+  vnode->tls_model = model;\n+}\n+\n /* Compute the number of bytes occupied by a tree with code CODE.\n    This function cannot be used for nodes that have variable sizes,\n    including TREE_VEC, INTEGER_CST, STRING_CST, and CALL_EXPR.  */"}, {"sha": "4a29aa2776d069f6122d3d67c99ee7216cb21f24", "filename": "gcc/tree.h", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/56363ffd48e81fd2bfbed9cf047809b45fc7c20f/gcc%2Ftree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/56363ffd48e81fd2bfbed9cf047809b45fc7c20f/gcc%2Ftree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.h?ref=56363ffd48e81fd2bfbed9cf047809b45fc7c20f", "patch": "@@ -2386,12 +2386,12 @@ extern void decl_value_expr_insert (tree, tree);\n \n /* In a VAR_DECL, the model to use if the data should be allocated from\n    thread-local storage.  */\n-#define DECL_TLS_MODEL(NODE) (VAR_DECL_CHECK (NODE)->decl_with_vis.tls_model)\n+#define DECL_TLS_MODEL(NODE) decl_tls_model (NODE)\n \n /* In a VAR_DECL, nonzero if the data should be allocated from\n    thread-local storage.  */\n #define DECL_THREAD_LOCAL_P(NODE) \\\n-  (VAR_DECL_CHECK (NODE)->decl_with_vis.tls_model >= TLS_MODEL_REAL)\n+  ((TREE_STATIC (NODE) || DECL_EXTERNAL (NODE)) && decl_tls_model (NODE) >= TLS_MODEL_REAL)\n \n /* In a non-local VAR_DECL with static storage duration, true if the\n    variable has an initialization priority.  If false, the variable\n@@ -3429,6 +3429,8 @@ extern tree decl_comdat_group (const_tree);\n extern tree decl_comdat_group_id (const_tree);\n extern const char *decl_section_name (const_tree);\n extern void set_decl_section_name (tree, const char *);\n+extern enum tls_model decl_tls_model (const_tree);\n+extern void set_decl_tls_model (tree, enum tls_model);\n \n /* Compute the number of bytes occupied by 'node'.  This routine only\n    looks at TREE_CODE and, if the code is TREE_VEC, TREE_VEC_LENGTH.  */"}]}