{"sha": "288e4c64f6b4806358aabc9b99b2fba72bf04bf6", "node_id": "C_kwDOANBUbNoAKDI4OGU0YzY0ZjZiNDgwNjM1OGFhYmM5Yjk5YjJmYmE3MmJmMDRiZjY", "commit": {"author": {"name": "Patrick Palka", "email": "ppalka@redhat.com", "date": "2022-04-26T01:46:56Z"}, "committer": {"name": "Patrick Palka", "email": "ppalka@redhat.com", "date": "2022-04-26T01:46:56Z"}, "message": "c++: partial ordering with dependent NTTP type [PR105289]\n\nHere ever since r11-6483-ge2e2f3f2c9400f we're rejecting and crashing\non (respectively) two testcases that we used to accept in C++17 mode\nsince r8-1437-g3da557ec145823.  Both testcases declare a partial\nspecialization of a primary template that has an NTTP with dependent\ntype, and the validity of these partial specializations is unclear and\nthe subject of PR86193 / CWG 455.\n\nSo for now, this minimal patch just aims to fix the crash in the second\ntestcase.  During deduction, when checking whether the type of an NTTP\nuses still-undeduced parameters, we were incorrectly substituting into\nthe previously substituted type instead of into its original type.\n\nIn passing this patch also downgrades the \"not more specialized\"\ndiagnostic from a permerror to a pedwarn.\n\n\tPR c++/105289\n\tPR c++/86193\n\ngcc/cp/ChangeLog:\n\n\t* pt.cc (process_partial_specialization): Downgrade \"partial\n\tspecialization isn't more specialized\" diagnostic from permerror\n\tto an on-by-default pedwarn.\n\t(unify) <case TEMPLATE_PARM_INDEX>: When substituting into the\n\tNTTP type a second time, use the original type not the\n\tsubstituted type.\n\ngcc/testsuite/ChangeLog:\n\n\t* g++.dg/template/partial-specialization11.C: New test.\n\t* g++.dg/template/partial-specialization12.C: New test.", "tree": {"sha": "5f328ab3507d22193c963a86c483f009573a20f6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5f328ab3507d22193c963a86c483f009573a20f6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/288e4c64f6b4806358aabc9b99b2fba72bf04bf6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/288e4c64f6b4806358aabc9b99b2fba72bf04bf6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/288e4c64f6b4806358aabc9b99b2fba72bf04bf6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/288e4c64f6b4806358aabc9b99b2fba72bf04bf6/comments", "author": null, "committer": null, "parents": [{"sha": "98de0da6035771b5fd9185f2a2c53dd65581b886", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/98de0da6035771b5fd9185f2a2c53dd65581b886", "html_url": "https://github.com/Rust-GCC/gccrs/commit/98de0da6035771b5fd9185f2a2c53dd65581b886"}], "stats": {"total": 30, "additions": 27, "deletions": 3}, "files": [{"sha": "7dd9e6788f4b84d0bf96d52c08dbbf7cbd636409", "filename": "gcc/cp/pt.cc", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/288e4c64f6b4806358aabc9b99b2fba72bf04bf6/gcc%2Fcp%2Fpt.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/288e4c64f6b4806358aabc9b99b2fba72bf04bf6/gcc%2Fcp%2Fpt.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.cc?ref=288e4c64f6b4806358aabc9b99b2fba72bf04bf6", "patch": "@@ -5227,8 +5227,9 @@ process_partial_specialization (tree decl)\n \t   && !get_partial_spec_bindings (maintmpl, maintmpl, specargs))\n     {\n       auto_diagnostic_group d;\n-      if (permerror (input_location, \"partial specialization %qD is not \"\n-\t\t     \"more specialized than\", decl))\n+      if (pedwarn (input_location, 0,\n+\t\t   \"partial specialization %qD is not more specialized than\",\n+\t\t   decl))\n \tinform (DECL_SOURCE_LOCATION (maintmpl), \"primary template %qD\",\n \t\tmaintmpl);\n     }\n@@ -24299,7 +24300,7 @@ unify (tree tparms, tree targs, tree parm, tree arg, int strict,\n \t      /* Now check whether the type of this parameter is still\n \t\t dependent, and give up if so.  */\n \t      ++processing_template_decl;\n-\t      tparm = tsubst (tparm, targs, tf_none, NULL_TREE);\n+\t      tparm = tsubst (TREE_TYPE (parm), targs, tf_none, NULL_TREE);\n \t      --processing_template_decl;\n \t      if (uses_template_parms (tparm))\n \t\treturn unify_success (explain_p);"}, {"sha": "556224a3104832288cd19573837f3f2c52b370de", "filename": "gcc/testsuite/g++.dg/template/partial-specialization11.C", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/288e4c64f6b4806358aabc9b99b2fba72bf04bf6/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fpartial-specialization11.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/288e4c64f6b4806358aabc9b99b2fba72bf04bf6/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fpartial-specialization11.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fpartial-specialization11.C?ref=288e4c64f6b4806358aabc9b99b2fba72bf04bf6", "patch": "@@ -0,0 +1,11 @@\n+// PR c++/86193\n+// CWG 455 (active)\n+// { dg-options \"\" } // clear -pedantic-errors\n+\n+template<class T> struct value_type;\n+\n+template<class T, typename value_type<T>::type V>\n+struct A;\n+\n+template<class T, int V>\n+struct A<T*, V> { }; // { dg-warning \"not more specialized\" }"}, {"sha": "5f51e8a27debe8a4ada721b33303a307cb881cb7", "filename": "gcc/testsuite/g++.dg/template/partial-specialization12.C", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/288e4c64f6b4806358aabc9b99b2fba72bf04bf6/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fpartial-specialization12.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/288e4c64f6b4806358aabc9b99b2fba72bf04bf6/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fpartial-specialization12.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fpartial-specialization12.C?ref=288e4c64f6b4806358aabc9b99b2fba72bf04bf6", "patch": "@@ -0,0 +1,12 @@\n+// PR c++/105289\n+// CWG 455 (active)\n+// { dg-do compile { target c++11 } }\n+\n+template<class T>\n+struct value_type;\n+\n+template<class List, typename value_type<List>::type Element>\n+struct push_front_vlist;\n+\n+template<template<class X, X...> class XList, class T, T Arg, T... Vs>\n+struct push_front_vlist<XList<T, Vs...>, Arg> { }; // { dg-error \"not more specialized\" }"}]}