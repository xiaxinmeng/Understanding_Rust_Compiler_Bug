{"sha": "6cb4308702d0333775a1da15f43bcfd949115aeb", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmNiNDMwODcwMmQwMzMzNzc1YTFkYTE1ZjQzYmNmZDk0OTExNWFlYg==", "commit": {"author": {"name": "Tim Shen", "email": "timshen91@gmail.com", "date": "2013-10-06T17:53:14Z"}, "committer": {"name": "Tim Shen", "email": "timshen@gcc.gnu.org", "date": "2013-10-06T17:53:14Z"}, "message": "regex.h: (regex_token_iterator<>::regex_token_iterator): Fix compile error.\n\n2013-10-06  Tim Shen  <timshen91@gmail.com>\n\n\t* include/bits/regex.h: (regex_token_iterator<>::regex_token_iterator):\n\tFix compile error.\n\t* include/bits/regex.tcc: (regex_replace<>): Remove default parameter.\n\n2013-10-06  Tim Shen  <timshen91@gmail.com>\n\n\t* include/bits/regex.h (__regex_algo_impl<>, regex_match<>,\n\tregex_search<>): New abstract function for regex_match and regex_search.\n\t* include/bits/regex.tcc (__regex_algo_impl<>): Implement.\n\t* include/bits/regex_executor.h\n\t(_Executor<>::_M_lookahead,\n\t _DFSExecutor<>::_M_clone,\n\t _BFSExecutor<>::_M_clone): Let _M_clone to choose which executor to\n\tuse.\n\t* include/bits/regex_executor.tcc (__get_executor<>): Update the\n\tdefinition to support __policy.\n\t* testsuite/28_regex/algorithms/regex_match/awk/cstring_01.cc: Use\n\t*_debug.\n\t* testsuite/28_regex/algorithms/regex_match/basic/empty_range.cc: Same.\n\t* testsuite/28_regex/algorithms/regex_match/basic/string_01.cc: Same.\n\t* testsuite/28_regex/algorithms/regex_match/basic/string_range_00_03.cc:\n\tSame.\n\t* testsuite/28_regex/algorithms/regex_match/basic/string_range_01_03.cc:\n\tSame.\n\t* testsuite/28_regex/algorithms/regex_match/basic/string_range_02_03.cc:\n\tSame.\n\t* testsuite/28_regex/algorithms/regex_match/ecma/char/53622.cc: Same.\n\t* testsuite/28_regex/algorithms/regex_match/ecma/char/57173.cc: Same.\n\t* testsuite/28_regex/algorithms/regex_match/ecma/char/58576.cc: Same.\n\t* testsuite/28_regex/algorithms/regex_match/ecma/char/anymatcher.cc:\n\tSame.\n\t* testsuite/28_regex/algorithms/regex_match/ecma/char/backref.cc: Same.\n\t* testsuite/28_regex/algorithms/regex_match/ecma/char/empty_range.cc:\n\tSame.\n\t* testsuite/28_regex/algorithms/regex_match/ecma/char/emptygroup.cc:\n\tSame.\n\t* testsuite/28_regex/algorithms/regex_match/ecma/char/hex.cc: Same.\n\t* testsuite/28_regex/algorithms/regex_match/ecma/char/quoted_char.cc:\n\tSame.\n\t* testsuite/28_regex/algorithms/regex_match/ecma/wchar_t/anymatcher.cc:\n\tSame.\n\t* testsuite/28_regex/algorithms/regex_match/ecma/wchar_t/hex.cc: Same.\n\t* testsuite/28_regex/algorithms/regex_match/extended/\n\tstring_bracket_01.cc: Same.\n\t* testsuite/28_regex/algorithms/regex_match/extended/cstring_plus.cc:\n\tSame.\n\t* testsuite/28_regex/algorithms/regex_match/extended/\n\tstring_questionmark.cc: Same.\n\t* testsuite/28_regex/algorithms/regex_match/extended/cstring_range.cc:\n\tSame.\n\t* testsuite/28_regex/algorithms/regex_match/extended/string_any.cc:\n\tSame.\n\t* testsuite/28_regex/algorithms/regex_match/extended/\n\tstring_dispatch_01.cc: Same.\n\t* testsuite/28_regex/algorithms/regex_match/extended/\n\tstring_range_00_03.cc: Same.\n\t* testsuite/28_regex/algorithms/regex_match/extended/\n\tstring_range_01_03.cc: Same.\n\t* testsuite/28_regex/algorithms/regex_match/extended/\n\tstring_range_02_03.cc: Same.\n\t* testsuite/28_regex/algorithms/regex_match/extended/wstring_locale.cc:\n\tSame.\n\t* testsuite/28_regex/algorithms/regex_search/basic/string_01.cc: Same.\n\t* testsuite/28_regex/algorithms/regex_search/ecma/assertion.cc: Same.\n\t* testsuite/28_regex/algorithms/regex_search/ecma/flags.cc: Same.\n\t* testsuite/28_regex/algorithms/regex_search/ecma/greedy.cc: Same.\n\t* testsuite/28_regex/algorithms/regex_search/ecma/string_01.cc: Same.\n\t* testsuite/28_regex/match_results/format.cc: Same.\n\t* testsuite/util/testsuite_regex.h\n\t(regex_match_debug<>, regex_search_debug<>): Implement.\n\nFrom-SVN: r203231", "tree": {"sha": "11e71078d7989a6eeed530a3f83baefff784fb8b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/11e71078d7989a6eeed530a3f83baefff784fb8b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6cb4308702d0333775a1da15f43bcfd949115aeb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6cb4308702d0333775a1da15f43bcfd949115aeb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6cb4308702d0333775a1da15f43bcfd949115aeb", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6cb4308702d0333775a1da15f43bcfd949115aeb/comments", "author": {"login": "timshen91", "id": 1157432, "node_id": "MDQ6VXNlcjExNTc0MzI=", "avatar_url": "https://avatars.githubusercontent.com/u/1157432?v=4", "gravatar_id": "", "url": "https://api.github.com/users/timshen91", "html_url": "https://github.com/timshen91", "followers_url": "https://api.github.com/users/timshen91/followers", "following_url": "https://api.github.com/users/timshen91/following{/other_user}", "gists_url": "https://api.github.com/users/timshen91/gists{/gist_id}", "starred_url": "https://api.github.com/users/timshen91/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/timshen91/subscriptions", "organizations_url": "https://api.github.com/users/timshen91/orgs", "repos_url": "https://api.github.com/users/timshen91/repos", "events_url": "https://api.github.com/users/timshen91/events{/privacy}", "received_events_url": "https://api.github.com/users/timshen91/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "fef7e16b3fecef48e0ce67b9c0ab8fd32356e789", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fef7e16b3fecef48e0ce67b9c0ab8fd32356e789", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fef7e16b3fecef48e0ce67b9c0ab8fd32356e789"}], "stats": {"total": 997, "additions": 680, "deletions": 317}, "files": [{"sha": "377ac0e7e9fd634df9d32993fa4f817d1d799fe4", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 73, "deletions": 0, "changes": 73, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6cb4308702d0333775a1da15f43bcfd949115aeb/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6cb4308702d0333775a1da15f43bcfd949115aeb/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=6cb4308702d0333775a1da15f43bcfd949115aeb", "patch": "@@ -1,3 +1,76 @@\n+2013-10-06  Tim Shen  <timshen91@gmail.com>\n+\n+\t* include/bits/regex.h: (regex_token_iterator<>::regex_token_iterator):\n+\tFix compile error.\n+\t* include/bits/regex.tcc: (regex_replace<>): Remove default parameter.\n+\n+2013-10-06  Tim Shen  <timshen91@gmail.com>\n+\n+\t* include/bits/regex.h (__regex_algo_impl<>, regex_match<>,\n+\tregex_search<>): New abstract function for regex_match and regex_search.\n+\t* include/bits/regex.tcc (__regex_algo_impl<>): Implement.\n+\t* include/bits/regex_executor.h\n+\t(_Executor<>::_M_lookahead,\n+\t _DFSExecutor<>::_M_clone,\n+\t _BFSExecutor<>::_M_clone): Let _M_clone to choose which executor to\n+\tuse.\n+\t* include/bits/regex_executor.tcc (__get_executor<>): Update the\n+\tdefinition to support __policy.\n+\t* testsuite/28_regex/algorithms/regex_match/awk/cstring_01.cc: Use\n+\t*_debug.\n+\t* testsuite/28_regex/algorithms/regex_match/basic/empty_range.cc: Same.\n+\t* testsuite/28_regex/algorithms/regex_match/basic/string_01.cc: Same.\n+\t* testsuite/28_regex/algorithms/regex_match/basic/string_range_00_03.cc:\n+\tSame.\n+\t* testsuite/28_regex/algorithms/regex_match/basic/string_range_01_03.cc:\n+\tSame.\n+\t* testsuite/28_regex/algorithms/regex_match/basic/string_range_02_03.cc:\n+\tSame.\n+\t* testsuite/28_regex/algorithms/regex_match/ecma/char/53622.cc: Same.\n+\t* testsuite/28_regex/algorithms/regex_match/ecma/char/57173.cc: Same.\n+\t* testsuite/28_regex/algorithms/regex_match/ecma/char/58576.cc: Same.\n+\t* testsuite/28_regex/algorithms/regex_match/ecma/char/anymatcher.cc:\n+\tSame.\n+\t* testsuite/28_regex/algorithms/regex_match/ecma/char/backref.cc: Same.\n+\t* testsuite/28_regex/algorithms/regex_match/ecma/char/empty_range.cc:\n+\tSame.\n+\t* testsuite/28_regex/algorithms/regex_match/ecma/char/emptygroup.cc:\n+\tSame.\n+\t* testsuite/28_regex/algorithms/regex_match/ecma/char/hex.cc: Same.\n+\t* testsuite/28_regex/algorithms/regex_match/ecma/char/quoted_char.cc:\n+\tSame.\n+\t* testsuite/28_regex/algorithms/regex_match/ecma/wchar_t/anymatcher.cc:\n+\tSame.\n+\t* testsuite/28_regex/algorithms/regex_match/ecma/wchar_t/hex.cc: Same.\n+\t* testsuite/28_regex/algorithms/regex_match/extended/\n+\tstring_bracket_01.cc: Same.\n+\t* testsuite/28_regex/algorithms/regex_match/extended/cstring_plus.cc:\n+\tSame.\n+\t* testsuite/28_regex/algorithms/regex_match/extended/\n+\tstring_questionmark.cc: Same.\n+\t* testsuite/28_regex/algorithms/regex_match/extended/cstring_range.cc:\n+\tSame.\n+\t* testsuite/28_regex/algorithms/regex_match/extended/string_any.cc:\n+\tSame.\n+\t* testsuite/28_regex/algorithms/regex_match/extended/\n+\tstring_dispatch_01.cc: Same.\n+\t* testsuite/28_regex/algorithms/regex_match/extended/\n+\tstring_range_00_03.cc: Same.\n+\t* testsuite/28_regex/algorithms/regex_match/extended/\n+\tstring_range_01_03.cc: Same.\n+\t* testsuite/28_regex/algorithms/regex_match/extended/\n+\tstring_range_02_03.cc: Same.\n+\t* testsuite/28_regex/algorithms/regex_match/extended/wstring_locale.cc:\n+\tSame.\n+\t* testsuite/28_regex/algorithms/regex_search/basic/string_01.cc: Same.\n+\t* testsuite/28_regex/algorithms/regex_search/ecma/assertion.cc: Same.\n+\t* testsuite/28_regex/algorithms/regex_search/ecma/flags.cc: Same.\n+\t* testsuite/28_regex/algorithms/regex_search/ecma/greedy.cc: Same.\n+\t* testsuite/28_regex/algorithms/regex_search/ecma/string_01.cc: Same.\n+\t* testsuite/28_regex/match_results/format.cc: Same.\n+\t* testsuite/util/testsuite_regex.h\n+\t(regex_match_debug<>, regex_search_debug<>): Implement.\n+\n 2013-10-06  Oleg Endo  <olegendo@gcc.gnu.org>\n \t    Paolo Carlini  <paolo.carlini@oracle.com>\n "}, {"sha": "3420f10b18b7aa43708fcac7e7be874c7bedffc7", "filename": "libstdc++-v3/include/bits/regex.h", "status": "modified", "additions": 47, "deletions": 34, "changes": 81, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6cb4308702d0333775a1da15f43bcfd949115aeb/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fregex.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6cb4308702d0333775a1da15f43bcfd949115aeb/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fregex.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fregex.h?ref=6cb4308702d0333775a1da15f43bcfd949115aeb", "patch": "@@ -32,6 +32,24 @@ namespace std _GLIBCXX_VISIBILITY(default)\n {\n _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n+namespace __detail\n+{\n+_GLIBCXX_BEGIN_NAMESPACE_VERSION\n+\n+  template<typename _BiIter, typename _Alloc,\n+\t   typename _CharT, typename _TraitsT,\n+\t   _RegexExecutorPolicy __policy,\n+\t   bool __match_mode>\n+    bool\n+    __regex_algo_impl(_BiIter                              __s,\n+\t\t      _BiIter                              __e,\n+\t\t      match_results<_BiIter, _Alloc>&      __m,\n+\t\t      const basic_regex<_CharT, _TraitsT>& __re,\n+\t\t      regex_constants::match_flag_type     __flags);\n+\n+_GLIBCXX_END_NAMESPACE_VERSION\n+}\n+\n   /**\n    * @addtogroup regex\n    * @{\n@@ -713,7 +731,8 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t_AutomatonPtr;\n \n       template<typename _BiIter, typename _Alloc,\n-\ttypename _CharT, typename _TraitsT>\n+\ttypename _CharT, typename _TraitsT,\n+\t__detail::_RegexExecutorPolicy __policy>\n \tfriend std::unique_ptr<\n \t  __detail::_Executor<_BiIter, _Alloc, _CharT, _TraitsT>>\n \t__detail::__get_executor(_BiIter,\n@@ -722,19 +741,12 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t\t\t\t const basic_regex<_CharT, _TraitsT>&,\n \t\t\t\t regex_constants::match_flag_type);\n \n-      template<typename _Bp, typename _Ap, typename _Cp, typename _Rp>\n-\tfriend bool\n-\tregex_match(_Bp, _Bp,\n-\t\t    match_results<_Bp, _Ap>&,\n-\t\t    const basic_regex<_Cp, _Rp>&,\n-\t\t    regex_constants::match_flag_type);\n-\n-      template<typename _Bp, typename _Ap, typename _Cp, typename _Rp>\n+      template<typename _Bp, typename _Ap, typename _Cp, typename _Rp,\n+\t__detail::_RegexExecutorPolicy, bool>\n \tfriend bool\n-\tregex_search(_Bp, _Bp,\n-\t\t     match_results<_Bp, _Ap>&,\n-\t\t     const basic_regex<_Cp, _Rp>&,\n-\t\t     regex_constants::match_flag_type);\n+\t__detail::__regex_algo_impl(_Bp, _Bp, match_results<_Bp, _Ap>&,\n+\t\t\t\t    const basic_regex<_Cp, _Rp>&,\n+\t\t\t\t    regex_constants::match_flag_type);\n \n       template<typename, typename, typename, typename>\n \tfriend class __detail::_Executor;\n@@ -1851,21 +1863,12 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       template<typename, typename, typename>\n \tfriend class regex_iterator;\n \n-      template<typename _Bp, typename _Ap,\n-\ttypename _Ch_type, typename _Rx_traits>\n-\tfriend bool\n-\tregex_match(_Bp, _Bp, match_results<_Bp, _Ap>&,\n-\t\t    const basic_regex<_Ch_type,\n-\t\t    _Rx_traits>&,\n-\t\t    regex_constants::match_flag_type);\n-\n-      template<typename _Bp, typename _Ap,\n-\ttypename _Ch_type, typename _Rx_traits>\n+      template<typename _Bp, typename _Ap, typename _Cp, typename _Rp,\n+\t__detail::_RegexExecutorPolicy, bool>\n \tfriend bool\n-\tregex_search(_Bp, _Bp, match_results<_Bp, _Ap>&,\n-\t\t     const basic_regex<_Ch_type,\n-\t\t     _Rx_traits>&,\n-\t\t     regex_constants::match_flag_type);\n+\t__detail::__regex_algo_impl(_Bp, _Bp, match_results<_Bp, _Ap>&,\n+\t\t\t\t    const basic_regex<_Cp, _Rp>&,\n+\t\t\t\t    regex_constants::match_flag_type);\n \n       _Bi_iter _M_begin;\n       bool     _M_in_iterator;\n@@ -1951,13 +1954,18 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n    */\n   template<typename _Bi_iter, typename _Alloc,\n \t   typename _Ch_type, typename _Rx_traits>\n-    bool\n+    inline bool\n     regex_match(_Bi_iter                                 __s,\n \t\t_Bi_iter                                 __e,\n \t\tmatch_results<_Bi_iter, _Alloc>&         __m,\n \t\tconst basic_regex<_Ch_type, _Rx_traits>& __re,\n \t\tregex_constants::match_flag_type         __flags\n-\t\t\t       = regex_constants::match_default);\n+\t\t\t       = regex_constants::match_default)\n+    {\n+      return __detail::__regex_algo_impl<_Bi_iter, _Alloc, _Ch_type, _Rx_traits,\n+\t__detail::_RegexExecutorPolicy::_S_auto, true>\n+\t  (__s, __e, __m, __re, __flags);\n+    }\n \n   /**\n    * @brief Indicates if there is a match between the regular expression @p e\n@@ -2091,12 +2099,17 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n    */\n   template<typename _Bi_iter, typename _Alloc,\n \t   typename _Ch_type, typename _Rx_traits>\n-    bool\n-    regex_search(_Bi_iter __first, _Bi_iter __last,\n+    inline bool\n+    regex_search(_Bi_iter __s, _Bi_iter __e,\n \t\t match_results<_Bi_iter, _Alloc>& __m,\n \t\t const basic_regex<_Ch_type, _Rx_traits>& __re,\n \t\t regex_constants::match_flag_type __flags\n-\t\t = regex_constants::match_default);\n+\t\t = regex_constants::match_default)\n+    {\n+      return __detail::__regex_algo_impl<_Bi_iter, _Alloc, _Ch_type, _Rx_traits,\n+\t__detail::_RegexExecutorPolicy::_S_auto, false>\n+\t  (__s, __e, __m, __re, __flags);\n+    }\n \n   /**\n    * Searches for a regular expression within a range.\n@@ -2586,8 +2599,8 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n        * @param __rhs [IN] A %regex_token_iterator to copy.\n        */\n       regex_token_iterator(const regex_token_iterator& __rhs)\n-      : _M_position(__rhs.position), _M_subs(__rhs.subs), _M_n(__rhs.N),\n-      _M_result(__rhs.result), _M_suffix(__rhs.suffix),\n+      : _M_position(__rhs._M_position), _M_subs(__rhs._M_subs),\n+      _M_n(__rhs._M_n), _M_result(__rhs._M_result), _M_suffix(__rhs._M_suffix),\n       _M_has_m1(__rhs._M_has_m1)\n       {\n \tif (__rhs._M_result == &__rhs._M_suffix)"}, {"sha": "128a92c2f0d8c5a79598712908d4c149cd9f7204", "filename": "libstdc++-v3/include/bits/regex.tcc", "status": "modified", "additions": 81, "deletions": 81, "changes": 162, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6cb4308702d0333775a1da15f43bcfd949115aeb/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fregex.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6cb4308702d0333775a1da15f43bcfd949115aeb/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fregex.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fregex.tcc?ref=6cb4308702d0333775a1da15f43bcfd949115aeb", "patch": "@@ -32,6 +32,83 @@ namespace std _GLIBCXX_VISIBILITY(default)\n {\n _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n+namespace __detail\n+{\n+_GLIBCXX_BEGIN_NAMESPACE_VERSION\n+\n+  // Result of merging regex_match and regex_search.\n+  //\n+  // __policy now can be _S_auto(auto dispatch by checking back-references)\n+  // and _S_force_dfs(just use _DFSExecutor).\n+  //\n+  // That __match_mode is true means regex_match, else regex_search.\n+  template<typename _BiIter, typename _Alloc,\n+\t   typename _CharT, typename _TraitsT,\n+\t   _RegexExecutorPolicy __policy,\n+\t   bool __match_mode>\n+    bool\n+    __regex_algo_impl(_BiIter                              __s,\n+\t\t      _BiIter                              __e,\n+\t\t      match_results<_BiIter, _Alloc>&      __m,\n+\t\t      const basic_regex<_CharT, _TraitsT>& __re,\n+\t\t      regex_constants::match_flag_type     __flags)\n+    {\n+      if (__re._M_automaton == nullptr)\n+\treturn false;\n+\n+      typename match_results<_BiIter, _Alloc>::_Base_type& __res = __m;\n+      __res.resize(__re._M_automaton->_M_sub_count() + 2);\n+      for (auto& __it : __res)\n+\t__it.matched = false;\n+\n+      typedef std::unique_ptr<_Executor<_BiIter, _Alloc, _CharT, _TraitsT>>\n+\t_ExecutorPtr;\n+      typedef _DFSExecutor<_BiIter, _Alloc, _CharT, _TraitsT> _DFSExecutorT;\n+      typedef _BFSExecutor<_BiIter, _Alloc, _CharT, _TraitsT> _BFSExecutorT;\n+\n+      _ExecutorPtr __executor =\n+\t__get_executor<_BiIter, _Alloc, _CharT, _TraitsT,\n+\t  __policy>(__s, __e, __res, __re, __flags);\n+\n+      bool __ret;\n+      if (__match_mode)\n+\t__ret = __executor->_M_match();\n+      else\n+\t__ret = __executor->_M_search();\n+      if (__ret)\n+\t{\n+\t  for (auto __it : __res)\n+\t    if (!__it.matched)\n+\t      __it.first = __it.second = __e;\n+\t  auto& __pre = __res[__res.size()-2];\n+\t  auto& __suf = __res[__res.size()-1];\n+\t  if (__match_mode)\n+\t    {\n+\t      __pre.matched = false;\n+\t      __pre.first = __s;\n+\t      __pre.second = __s;\n+\t      __suf.matched = false;\n+\t      __suf.first = __e;\n+\t      __suf.second = __e;\n+\t    }\n+\t  else\n+\t    {\n+\t      __pre.first = __s;\n+\t      __pre.second = __res[0].first;\n+\t      __pre.matched = (__pre.first != __pre.second);\n+\t      __suf.first = __res[0].second;\n+\t      __suf.second = __e;\n+\t      __suf.matched = (__suf.first != __suf.second);\n+\t    }\n+\t  if (__re.flags() & regex_constants::nosubs)\n+\t    __res.resize(3);\n+\t}\n+      return __ret;\n+    }\n+\n+_GLIBCXX_END_NAMESPACE_VERSION\n+}\n+\n   template<typename _Ch_type>\n   template<typename _Fwd_iter>\n     typename regex_traits<_Ch_type>::string_type\n@@ -295,7 +372,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     value(_Ch_type __ch, int __radix) const\n     {\n       std::basic_istringstream<char_type> __is(string_type(1, __ch));\n-      int __v;\n+      long __v;\n       if (__radix == 8)\n \t__is >> std::oct;\n       else if (__radix == 16)\n@@ -318,7 +395,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       const __ctype_type&\n \t__fctyp(use_facet<__ctype_type>(__traits.getloc()));\n \n-      auto __output = [&](int __idx)\n+      auto __output = [&](size_t __idx)\n \t{\n \t  auto& __sub = _Base_type::operator[](__idx);\n \t  if (__sub.matched)\n@@ -376,7 +453,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t\t__output(_Base_type::size()-1);\n \t      else if (__fctyp.is(__ctype_type::digit, *__next))\n \t\t{\n-\t\t  int __num = __traits.value(*__next, 10);\n+\t\t  long __num = __traits.value(*__next, 10);\n \t\t  if (++__next != __fmt_last\n \t\t      && __fctyp.is(__ctype_type::digit, *__next))\n \t\t    {\n@@ -395,90 +472,13 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       return __out;\n     }\n \n-  template<typename _Bi_iter, typename _Alloc,\n-\t   typename _Ch_type, typename _Rx_traits>\n-    bool\n-    regex_match(_Bi_iter                                 __s,\n-\t\t_Bi_iter                                 __e,\n-\t\tmatch_results<_Bi_iter, _Alloc>&         __m,\n-\t\tconst basic_regex<_Ch_type, _Rx_traits>& __re,\n-\t\tregex_constants::match_flag_type         __flags\n-\t\t\t       = regex_constants::match_default)\n-    {\n-      if (__re._M_automaton == nullptr)\n-\treturn false;\n-\n-      typename match_results<_Bi_iter, _Alloc>::_Base_type& __res = __m;\n-      auto __size = __re._M_automaton->_M_sub_count();\n-      __size += 2;\n-      __res.resize(__size);\n-      for (decltype(__size) __i = 0; __i < __size; ++__i)\n-\t__res[__i].matched = false;\n-\n-      if (__detail::__get_executor(__s, __e, __res, __re, __flags)->_M_match())\n-\t{\n-\t  for (auto __it : __res)\n-\t    if (!__it.matched)\n-\t      __it.first = __it.second = __e;\n-\t  auto& __pre = __res[__res.size()-2];\n-\t  auto& __suf = __res[__res.size()-1];\n-\t  __pre.matched = false;\n-\t  __pre.first = __s;\n-\t  __pre.second = __s;\n-\t  __suf.matched = false;\n-\t  __suf.first = __e;\n-\t  __suf.second = __e;\n-\t  return true;\n-\t}\n-      return false;\n-    }\n-\n-  template<typename _Bi_iter, typename _Alloc,\n-\t   typename _Ch_type, typename _Rx_traits>\n-    bool\n-    regex_search(_Bi_iter __first, _Bi_iter __last,\n-\t\t match_results<_Bi_iter, _Alloc>& __m,\n-\t\t const basic_regex<_Ch_type, _Rx_traits>& __re,\n-\t\t regex_constants::match_flag_type __flags\n-\t\t = regex_constants::match_default)\n-    {\n-      if (__re._M_automaton == nullptr)\n-\treturn false;\n-\n-      typename match_results<_Bi_iter, _Alloc>::_Base_type& __res = __m;\n-      auto __size = __re._M_automaton->_M_sub_count();\n-      __size += 2;\n-      __res.resize(__size);\n-      for (decltype(__size) __i = 0; __i < __size; ++__i)\n-\t__res[__i].matched = false;\n-\n-      if (__detail::__get_executor(__first, __last, __res, __re, __flags)\n-\t  ->_M_search())\n-\t{\n-\t  for (auto __it : __res)\n-\t    if (!__it.matched)\n-\t      __it.first = __it.second = __last;\n-\t  auto& __pre = __res[__res.size()-2];\n-\t  auto& __suf = __res[__res.size()-1];\n-\t  __pre.first = __first;\n-\t  __pre.second = __res[0].first;\n-\t  __pre.matched = (__pre.first != __pre.second);\n-\t  __suf.first = __res[0].second;\n-\t  __suf.second = __last;\n-\t  __suf.matched = (__suf.first != __suf.second);\n-\t  return true;\n-\t}\n-      return false;\n-    }\n-\n   template<typename _Out_iter, typename _Bi_iter,\n \t   typename _Rx_traits, typename _Ch_type>\n     _Out_iter\n     regex_replace(_Out_iter __out, _Bi_iter __first, _Bi_iter __last,\n \t\t  const basic_regex<_Ch_type, _Rx_traits>& __e,\n \t\t  const _Ch_type* __fmt,\n-\t\t  regex_constants::match_flag_type __flags\n-\t\t  = regex_constants::match_default)\n+\t\t  regex_constants::match_flag_type __flags)\n     {\n       typedef regex_iterator<_Bi_iter, _Ch_type, _Rx_traits> _IterT;\n       _IterT __i(__first, __last, __e, __flags);"}, {"sha": "60744b206625991e96824114060f4deb579e68ed", "filename": "libstdc++-v3/include/bits/regex_automaton.h", "status": "modified", "additions": 10, "deletions": 11, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6cb4308702d0333775a1da15f43bcfd949115aeb/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fregex_automaton.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6cb4308702d0333775a1da15f43bcfd949115aeb/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fregex_automaton.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fregex_automaton.h?ref=6cb4308702d0333775a1da15f43bcfd949115aeb", "patch": "@@ -40,7 +40,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n    *  @{\n    */\n \n-  typedef int _StateIdT;\n+  typedef long _StateIdT;\n   typedef std::set<_StateIdT> _StateSet;\n   static const _StateIdT _S_invalid_state_id  = -1;\n \n@@ -49,7 +49,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n   /// Operation codes that define the type of transitions within the base NFA\n   /// that represents the regular expression.\n-  enum _Opcode\n+  enum _Opcode : int\n   {\n       _S_opcode_unknown,\n       _S_opcode_alternative,\n@@ -69,15 +69,14 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     class _State\n     {\n     public:\n-      typedef int                        _OpcodeT;\n       typedef _Matcher<_CharT>           _MatcherT;\n \n-      _OpcodeT     _M_opcode;           // type of outgoing transition\n+      _Opcode      _M_opcode;           // type of outgoing transition\n       _StateIdT    _M_next;             // outgoing transition\n       union // Since they are mutually exclusive.\n       {\n-\tunsigned int _M_subexpr;        // for _S_opcode_subexpr_*\n-\tunsigned int _M_backref_index;  // for _S_opcode_backref\n+\tsize_t _M_subexpr;        // for _S_opcode_subexpr_*\n+\tsize_t _M_backref_index;  // for _S_opcode_backref\n \tstruct\n \t{\n \t  // for _S_opcode_alternative.\n@@ -91,7 +90,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       };\n       _MatcherT      _M_matches;        // for _S_opcode_match\n \n-      explicit _State(_OpcodeT __opcode)\n+      explicit _State(_Opcode  __opcode)\n       : _M_opcode(__opcode), _M_next(_S_invalid_state_id)\n       { }\n \n@@ -110,7 +109,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     class _Automaton\n     {\n     public:\n-      typedef unsigned int _SizeT;\n+      typedef size_t _SizeT;\n \n     public:\n       virtual _SizeT\n@@ -130,7 +129,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     public:\n       typedef _State<_CharT, _TraitsT>            _StateT;\n       typedef const _Matcher<_CharT>&             _MatcherT;\n-      typedef unsigned int                        _SizeT;\n+      typedef size_t                              _SizeT;\n       typedef regex_constants::syntax_option_type _FlagT;\n \n       _NFA(_FlagT __f)\n@@ -203,7 +202,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       }\n \n       _StateIdT\n-      _M_insert_backref(unsigned int __index);\n+      _M_insert_backref(size_t __index);\n \n       _StateIdT\n       _M_insert_line_begin()\n@@ -250,7 +249,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       _M_dot(std::ostream& __ostr) const;\n #endif\n \n-      std::vector<unsigned int> _M_paren_stack;\n+      std::vector<size_t>       _M_paren_stack;\n       _StateSet                 _M_accepting_states;\n       _FlagT                    _M_flags;\n       _StateIdT                 _M_start_state;"}, {"sha": "c15e3e99545f75eb39fa4cab092fb305afbcb6e4", "filename": "libstdc++-v3/include/bits/regex_automaton.tcc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6cb4308702d0333775a1da15f43bcfd949115aeb/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fregex_automaton.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6cb4308702d0333775a1da15f43bcfd949115aeb/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fregex_automaton.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fregex_automaton.tcc?ref=6cb4308702d0333775a1da15f43bcfd949115aeb", "patch": "@@ -137,7 +137,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     {\n       __ostr << \"digraph _Nfa {\\n\"\n        << \"  rankdir=LR;\\n\";\n-      for (unsigned int __i = 0; __i < this->size(); ++__i)\n+      for (size_t __i = 0; __i < this->size(); ++__i)\n       { this->at(__i)._M_dot(__ostr, __i); }\n       __ostr << \"}\\n\";\n       return __ostr;\n@@ -146,7 +146,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n   template<typename _CharT, typename _TraitsT>\n     _StateIdT _NFA<_CharT, _TraitsT>::\n-    _M_insert_backref(unsigned int __index)\n+    _M_insert_backref(size_t __index)\n     {\n       // To figure out whether a backref is valid, a stack is used to store\n       // unfinished sub-expressions. For example, when parsing"}, {"sha": "52386ce4e6450546cf618fff8eed4f9fa5f689d7", "filename": "libstdc++-v3/include/bits/regex_compiler.tcc", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6cb4308702d0333775a1da15f43bcfd949115aeb/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fregex_compiler.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6cb4308702d0333775a1da15f43bcfd949115aeb/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fregex_compiler.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fregex_compiler.tcc?ref=6cb4308702d0333775a1da15f43bcfd949115aeb", "patch": "@@ -222,9 +222,9 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t    __throw_regex_error(regex_constants::error_badbrace);\n \t  _StateSeqT __r(_M_pop());\n \t  _StateSeqT __e(_M_nfa, _M_nfa._M_insert_dummy());\n-\t  int __min_rep = _M_cur_int_value(10);\n+\t  long __min_rep = _M_cur_int_value(10);\n \t  bool __infi = false;\n-\t  int __n;\n+\t  long __n;\n \n \t  // {3\n \t  if (_M_match_token(_ScannerT::_S_token_comma))\n@@ -239,7 +239,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n \t  __neg = __neg && _M_match_token(_ScannerT::_S_token_opt);\n \n-\t  for (int __i = 0; __i < __min_rep; ++__i)\n+\t  for (long __i = 0; __i < __min_rep; ++__i)\n \t    __e._M_append(__r._M_clone());\n \n \t  if (__infi)\n@@ -260,7 +260,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t      // \"match less\" one. Switch _M_alt and _M_next of all created\n \t      // nodes. This is a hacking but IMO works well.\n \t      std::stack<_StateIdT> __stack;\n-\t      for (int __i = 0; __i < __n; ++__i)\n+\t      for (long __i = 0; __i < __n; ++__i)\n \t\t{\n \t\t  auto __tmp = __r._M_clone();\n \t\t  auto __alt = _M_nfa._M_insert_alt(__tmp._M_start,\n@@ -318,7 +318,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t}\n       else if (_M_match_token(_ScannerT::_S_token_subexpr_begin))\n \t{\n-\t  int __mark = _M_nfa._M_sub_count();\n+\t  auto __mark = _M_nfa._M_sub_count();\n \t  _StateSeqT __r(_M_nfa, _M_nfa._M_insert_subexpr_begin());\n \t  this->_M_disjunction();\n \t  if (!_M_match_token(_ScannerT::_S_token_subexpr_end))\n@@ -425,7 +425,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     _Compiler<_FwdIter, _CharT, _TraitsT>::\n     _M_cur_int_value(int __radix)\n     {\n-      int __v = 0;\n+      long __v = 0;\n       for (typename _StringT::size_type __i = 0;\n \t   __i < _M_value.length(); ++__i)\n \t__v =__v * __radix + _M_traits.value(_M_value[__i], __radix);"}, {"sha": "2770098152b8dc64e971d37bede0a184a6c0a382", "filename": "libstdc++-v3/include/bits/regex_executor.h", "status": "modified", "additions": 39, "deletions": 19, "changes": 58, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6cb4308702d0333775a1da15f43bcfd949115aeb/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fregex_executor.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6cb4308702d0333775a1da15f43bcfd949115aeb/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fregex_executor.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fregex_executor.h?ref=6cb4308702d0333775a1da15f43bcfd949115aeb", "patch": "@@ -145,8 +145,17 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       bool\n       _M_word_boundry(_State<_CharT, _TraitsT> __state) const;\n \n+      virtual std::unique_ptr<_Executor>\n+      _M_clone() const = 0;\n+\n+      // Return whether now match the given sub-NFA.\n       bool\n-      _M_lookahead(_State<_CharT, _TraitsT> __state) const;\n+      _M_lookahead(_State<_CharT, _TraitsT> __state) const\n+      {\n+\tauto __sub = this->_M_clone();\n+\t__sub->_M_set_start(__state._M_alt);\n+\treturn __sub->_M_search_from_first();\n+      }\n \n       void\n       _M_set_results(_ResultsVec& __cur_results);\n@@ -226,6 +235,16 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       bool\n       _M_dfs(_StateIdT __start);\n \n+      std::unique_ptr<_BaseT>\n+      _M_clone() const\n+      {\n+\treturn std::unique_ptr<_BaseT>(new _DFSExecutor(this->_M_current,\n+\t\t\t\t\t\t\tthis->_M_end,\n+\t\t\t\t\t\t\tthis->_M_results,\n+\t\t\t\t\t\t\tthis->_M_re,\n+\t\t\t\t\t\t\tthis->_M_flags));\n+      }\n+\n       // To record current solution.\n       _ResultsVec     _M_cur_results;\n       const _NFAT&    _M_nfa;\n@@ -268,8 +287,8 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       // greedy policy.\n       //\n       // The definition of `greedy`:\n-      // For the sequence of quantifiers in NFA sorted by there start position,\n-      // now maintain a vector in every matching state, with equal length to\n+      // For the sequence of quantifiers in NFA sorted by their start positions,\n+      // now maintain a vector in every matching state, with length equal to\n       // quantifier seq, recording repeating times of every quantifier. Now to\n       // compare two matching states, we just lexically compare these two\n       // vectors. To win the compare(to survive), one matching state needs to\n@@ -281,26 +300,26 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       // operator<() for lexicographical_compare will emit the answer.\n       //\n       // When two vectors equal, it means the `where`, `when` and quantifier\n-      // counts are identical, and indicates the same solution; so just return\n-      // false.\n+      // counts are identical, and indicates the same solution; so\n+      // _ResultsEntry::operator<() just return false.\n       struct _ResultsEntry\n       : private _ResultsVec\n       {\n       public:\n-\t_ResultsEntry(unsigned int __res_sz, unsigned int __sz)\n+\t_ResultsEntry(size_t __res_sz, size_t __sz)\n \t: _ResultsVec(__res_sz), _M_quant_keys(__sz)\n \t{ }\n \n \tvoid\n-\tresize(unsigned int __n)\n+\tresize(size_t __n)\n \t{ _ResultsVec::resize(__n); }\n \n-\tunsigned int\n+\tsize_t\n \tsize()\n \t{ return _ResultsVec::size(); }\n \n \tsub_match<_BiIter>&\n-\toperator[](unsigned int __idx)\n+\toperator[](size_t __idx)\n \t{ return _ResultsVec::operator[](__idx); }\n \n \tbool\n@@ -315,7 +334,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t}\n \n \tvoid\n-\t_M_inc(unsigned int __idx, bool __neg)\n+\t_M_inc(size_t __idx, bool __neg)\n \t{ _M_quant_keys[__idx] += __neg ? 1 : -1; }\n \n \t_ResultsVec&\n@@ -369,22 +388,23 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       bool\n       _M_includes_some();\n \n+      std::unique_ptr<_BaseT>\n+      _M_clone() const\n+      {\n+\treturn std::unique_ptr<_BaseT>(new _BFSExecutor(this->_M_current,\n+\t\t\t\t\t\t\tthis->_M_end,\n+\t\t\t\t\t\t\tthis->_M_results,\n+\t\t\t\t\t\t\tthis->_M_re,\n+\t\t\t\t\t\t\tthis->_M_flags));\n+      }\n+\n       std::map<_StateIdT, _ResultsPtr> _M_covered;\n       // To record global optimal solution.\n       _ResultsPtr                      _M_cur_results;\n       const _NFAT&                     _M_nfa;\n       _StateIdT                        _M_start_state;\n     };\n \n-  template<typename _BiIter, typename _Alloc,\n-    typename _CharT, typename _TraitsT>\n-    std::unique_ptr<_Executor<_BiIter, _Alloc, _CharT, _TraitsT>>\n-    __get_executor(_BiIter __b,\n-\t\t   _BiIter __e,\n-\t\t   std::vector<sub_match<_BiIter>, _Alloc>& __m,\n-\t\t   const basic_regex<_CharT, _TraitsT>& __re,\n-\t\t   regex_constants::match_flag_type __flags);\n-\n  //@} regex-detail\n _GLIBCXX_END_NAMESPACE_VERSION\n } // namespace __detail"}, {"sha": "3b1fcbc9e38f489ac85f27b5e11f88e9a15fa7d5", "filename": "libstdc++-v3/include/bits/regex_executor.tcc", "status": "modified", "additions": 8, "deletions": 24, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6cb4308702d0333775a1da15f43bcfd949115aeb/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fregex_executor.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6cb4308702d0333775a1da15f43bcfd949115aeb/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fregex_executor.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fregex_executor.tcc?ref=6cb4308702d0333775a1da15f43bcfd949115aeb", "patch": "@@ -365,39 +365,22 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       return __ans;\n     }\n \n-  // Return whether now match the given sub-NFA.\n-  template<typename _BiIter, typename _Alloc,\n-    typename _CharT, typename _TraitsT>\n-    bool _Executor<_BiIter, _Alloc, _CharT, _TraitsT>::\n-    _M_lookahead(_State<_CharT, _TraitsT> __state) const\n-    {\n-      auto __sub = __get_executor(this->_M_current,\n-\t\t\t\t  this->_M_end,\n-\t\t\t\t  this->_M_results,\n-\t\t\t\t  this->_M_re,\n-\t\t\t\t  this->_M_flags);\n-      __sub->_M_set_start(__state._M_alt);\n-      return __sub->_M_search_from_first();\n-    }\n-\n   template<typename _BiIter, typename _Alloc,\n     typename _CharT, typename _TraitsT>\n     void _Executor<_BiIter, _Alloc, _CharT, _TraitsT>::\n     _M_set_results(_ResultsVec& __cur_results)\n     {\n-      if (_M_re.flags() & regex_constants::nosubs)\n-\t{\n-\t  // truncate\n-\t  __cur_results.resize(3);\n-\t  _M_results.resize(3);\n-\t}\n-      for (unsigned int __i = 0; __i < __cur_results.size(); ++__i)\n+      for (size_t __i = 0; __i < __cur_results.size(); ++__i)\n \tif (__cur_results[__i].matched)\n \t  _M_results[__i] = __cur_results[__i];\n     }\n \n+  enum class _RegexExecutorPolicy : int\n+    { _S_auto, _S_force_dfs };\n+\n   template<typename _BiIter, typename _Alloc,\n-    typename _CharT, typename _TraitsT>\n+    typename _CharT, typename _TraitsT,\n+    _RegexExecutorPolicy __policy>\n     std::unique_ptr<_Executor<_BiIter, _Alloc, _CharT, _TraitsT>>\n     __get_executor(_BiIter __b,\n \t\t   _BiIter __e,\n@@ -411,7 +394,8 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       typedef _BFSExecutor<_BiIter, _Alloc, _CharT, _TraitsT> _BFSExecutorT;\n       auto __p = std::static_pointer_cast<_NFA<_CharT, _TraitsT>>\n \t(__re._M_automaton);\n-      if (__p->_M_has_backref)\n+      if (__policy == _RegexExecutorPolicy::_S_force_dfs\n+\t  || (__policy == _RegexExecutorPolicy::_S_auto && __p->_M_has_backref))\n \treturn _ExecutorPtr(new _DFSExecutorT(__b, __e, __m, __re, __flags));\n       return _ExecutorPtr(new _BFSExecutorT(__b, __e, __m, __re, __flags));\n     }"}, {"sha": "e2bde2216dfcb4eda43812d4299186d572f0e196", "filename": "libstdc++-v3/testsuite/28_regex/algorithms/regex_match/awk/cstring_01.cc", "status": "modified", "additions": 8, "deletions": 6, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6cb4308702d0333775a1da15f43bcfd949115aeb/libstdc%2B%2B-v3%2Ftestsuite%2F28_regex%2Falgorithms%2Fregex_match%2Fawk%2Fcstring_01.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6cb4308702d0333775a1da15f43bcfd949115aeb/libstdc%2B%2B-v3%2Ftestsuite%2F28_regex%2Falgorithms%2Fregex_match%2Fawk%2Fcstring_01.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F28_regex%2Falgorithms%2Fregex_match%2Fawk%2Fcstring_01.cc?ref=6cb4308702d0333775a1da15f43bcfd949115aeb", "patch": "@@ -25,7 +25,9 @@\n \n #include <regex>\n #include <testsuite_hooks.h>\n+#include <testsuite_regex.h>\n \n+using namespace __gnu_test;\n using namespace std;\n \n void\n@@ -34,12 +36,12 @@ test01()\n   bool test __attribute__((unused)) = true;\n \n   regex(\"\\\\[\", regex_constants::awk);\n-  VERIFY(regex_match(\"\\\"\", regex(\"[\\\\\\\"]\", regex_constants::awk)));\n-  VERIFY(regex_match(\"/\", regex(\"/\", regex_constants::awk)));\n-  VERIFY(regex_match(\"\\a\", regex(\"\\\\a\", regex_constants::awk)));\n-  VERIFY(regex_match(\"\\\"\", regex(\"\\\\\\\"\", regex_constants::awk)));\n-  VERIFY(regex_match(\"5\", regex(\"\\\\65\", regex_constants::awk)));\n-  VERIFY(regex_match(\"53\", regex(\"\\\\0653\", regex_constants::awk)));\n+  VERIFY(regex_match_debug(\"\\\"\", regex(\"[\\\\\\\"]\", regex_constants::awk)));\n+  VERIFY(regex_match_debug(\"/\", regex(\"/\", regex_constants::awk)));\n+  VERIFY(regex_match_debug(\"\\a\", regex(\"\\\\a\", regex_constants::awk)));\n+  VERIFY(regex_match_debug(\"\\\"\", regex(\"\\\\\\\"\", regex_constants::awk)));\n+  VERIFY(regex_match_debug(\"5\", regex(\"\\\\65\", regex_constants::awk)));\n+  VERIFY(regex_match_debug(\"53\", regex(\"\\\\0653\", regex_constants::awk)));\n }\n \n int"}, {"sha": "dd0dac4392f2c9a1d114a654a0f3cc38df4fb42c", "filename": "libstdc++-v3/testsuite/28_regex/algorithms/regex_match/basic/empty_range.cc", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6cb4308702d0333775a1da15f43bcfd949115aeb/libstdc%2B%2B-v3%2Ftestsuite%2F28_regex%2Falgorithms%2Fregex_match%2Fbasic%2Fempty_range.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6cb4308702d0333775a1da15f43bcfd949115aeb/libstdc%2B%2B-v3%2Ftestsuite%2F28_regex%2Falgorithms%2Fregex_match%2Fbasic%2Fempty_range.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F28_regex%2Falgorithms%2Fregex_match%2Fbasic%2Fempty_range.cc?ref=6cb4308702d0333775a1da15f43bcfd949115aeb", "patch": "@@ -25,7 +25,9 @@\n \n #include <regex>\n #include <testsuite_hooks.h>\n+#include <testsuite_regex.h>\n \n+using namespace __gnu_test;\n using namespace std;\n \n void\n@@ -45,8 +47,8 @@ test01()\n     }\n   FAIL(\"[]\");\n   FAIL(\"[^]\");\n-  VERIFY(regex_match(\"]\", regex(\"[]]\", regex_constants::basic)));\n-  VERIFY(!regex_match(\"]\", regex(\"[^]]\", regex_constants::basic)));\n+  VERIFY(regex_match_debug (\"]\", regex(\"[]]\", regex_constants::basic)));\n+  VERIFY(!regex_match_debug (\"]\", regex(\"[^]]\", regex_constants::basic)));\n }\n \n int"}, {"sha": "34cfa557f016d823de2e13a61e27933ea059c627", "filename": "libstdc++-v3/testsuite/28_regex/algorithms/regex_match/basic/string_01.cc", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6cb4308702d0333775a1da15f43bcfd949115aeb/libstdc%2B%2B-v3%2Ftestsuite%2F28_regex%2Falgorithms%2Fregex_match%2Fbasic%2Fstring_01.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6cb4308702d0333775a1da15f43bcfd949115aeb/libstdc%2B%2B-v3%2Ftestsuite%2F28_regex%2Falgorithms%2Fregex_match%2Fbasic%2Fstring_01.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F28_regex%2Falgorithms%2Fregex_match%2Fbasic%2Fstring_01.cc?ref=6cb4308702d0333775a1da15f43bcfd949115aeb", "patch": "@@ -25,6 +25,10 @@\n \n #include <regex>\n #include <testsuite_hooks.h>\n+#include <testsuite_regex.h>\n+\n+using namespace __gnu_test;\n+using namespace std;\n \n void\n test01()\n@@ -35,7 +39,7 @@ test01()\n \tstd::string target(\"aaba\");\n \tstd::smatch m;\n \n-\tVERIFY( std::regex_match(target, m, re) );\n+\tVERIFY( regex_match_debug(target, m, re) );\n \n \tVERIFY( m.size()  == re.mark_count()+1 );\n \tVERIFY( m.empty() == false );"}, {"sha": "36f032d7024c4a32db052f75d9b4a8c554537961", "filename": "libstdc++-v3/testsuite/28_regex/algorithms/regex_match/basic/string_range_00_03.cc", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6cb4308702d0333775a1da15f43bcfd949115aeb/libstdc%2B%2B-v3%2Ftestsuite%2F28_regex%2Falgorithms%2Fregex_match%2Fbasic%2Fstring_range_00_03.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6cb4308702d0333775a1da15f43bcfd949115aeb/libstdc%2B%2B-v3%2Ftestsuite%2F28_regex%2Falgorithms%2Fregex_match%2Fbasic%2Fstring_range_00_03.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F28_regex%2Falgorithms%2Fregex_match%2Fbasic%2Fstring_range_00_03.cc?ref=6cb4308702d0333775a1da15f43bcfd949115aeb", "patch": "@@ -25,6 +25,10 @@\n \n #include <regex>\n #include <testsuite_hooks.h>\n+#include <testsuite_regex.h>\n+\n+using namespace __gnu_test;\n+using namespace std;\n \n void\n test01()\n@@ -35,7 +39,7 @@ test01()\n \tstd::string target(\"aa\");\n \tstd::smatch m;\n \n-\tVERIFY( std::regex_match(target, m, re) );\n+\tVERIFY( regex_match_debug(target, m, re) );\n \n \tVERIFY( m.size()  == re.mark_count()+1 );\n \tVERIFY( m.empty() == false );"}, {"sha": "812e3efa4d31804ce3143054c6ed0afe5bb23ca8", "filename": "libstdc++-v3/testsuite/28_regex/algorithms/regex_match/basic/string_range_01_03.cc", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6cb4308702d0333775a1da15f43bcfd949115aeb/libstdc%2B%2B-v3%2Ftestsuite%2F28_regex%2Falgorithms%2Fregex_match%2Fbasic%2Fstring_range_01_03.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6cb4308702d0333775a1da15f43bcfd949115aeb/libstdc%2B%2B-v3%2Ftestsuite%2F28_regex%2Falgorithms%2Fregex_match%2Fbasic%2Fstring_range_01_03.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F28_regex%2Falgorithms%2Fregex_match%2Fbasic%2Fstring_range_01_03.cc?ref=6cb4308702d0333775a1da15f43bcfd949115aeb", "patch": "@@ -25,6 +25,10 @@\n \n #include <regex>\n #include <testsuite_hooks.h>\n+#include <testsuite_regex.h>\n+\n+using namespace __gnu_test;\n+using namespace std;\n \n void\n test01()\n@@ -35,7 +39,7 @@ test01()\n \tstd::string target(\"aa\");\n \tstd::smatch m;\n \n-\tVERIFY( std::regex_match(target, m, re) );\n+\tVERIFY( regex_match_debug(target, m, re) );\n \n \tVERIFY( m.size()  == re.mark_count()+1 );\n \tVERIFY( m.empty() == false );"}, {"sha": "0924ed0014b61f1e3b47732288e129fa5eaa17e6", "filename": "libstdc++-v3/testsuite/28_regex/algorithms/regex_match/basic/string_range_02_03.cc", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6cb4308702d0333775a1da15f43bcfd949115aeb/libstdc%2B%2B-v3%2Ftestsuite%2F28_regex%2Falgorithms%2Fregex_match%2Fbasic%2Fstring_range_02_03.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6cb4308702d0333775a1da15f43bcfd949115aeb/libstdc%2B%2B-v3%2Ftestsuite%2F28_regex%2Falgorithms%2Fregex_match%2Fbasic%2Fstring_range_02_03.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F28_regex%2Falgorithms%2Fregex_match%2Fbasic%2Fstring_range_02_03.cc?ref=6cb4308702d0333775a1da15f43bcfd949115aeb", "patch": "@@ -25,6 +25,10 @@\n \n #include <regex>\n #include <testsuite_hooks.h>\n+#include <testsuite_regex.h>\n+\n+using namespace __gnu_test;\n+using namespace std;\n \n void\n test01()\n@@ -35,7 +39,7 @@ test01()\n \tstd::string target(\"aa\");\n \tstd::smatch m;\n \n-\tVERIFY( std::regex_match(target, m, re) );\n+\tVERIFY( regex_match_debug(target, m, re) );\n \n \tVERIFY( m.size()  == re.mark_count()+1 );\n \tVERIFY( m.empty() == false );"}, {"sha": "5a762ab6eb4c31b1309b1b45bfd320bd48307d01", "filename": "libstdc++-v3/testsuite/28_regex/algorithms/regex_match/ecma/char/53622.cc", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6cb4308702d0333775a1da15f43bcfd949115aeb/libstdc%2B%2B-v3%2Ftestsuite%2F28_regex%2Falgorithms%2Fregex_match%2Fecma%2Fchar%2F53622.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6cb4308702d0333775a1da15f43bcfd949115aeb/libstdc%2B%2B-v3%2Ftestsuite%2F28_regex%2Falgorithms%2Fregex_match%2Fecma%2Fchar%2F53622.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F28_regex%2Falgorithms%2Fregex_match%2Fecma%2Fchar%2F53622.cc?ref=6cb4308702d0333775a1da15f43bcfd949115aeb", "patch": "@@ -24,6 +24,10 @@\n \n #include <regex>\n #include <testsuite_hooks.h>\n+#include <testsuite_regex.h>\n+\n+using namespace __gnu_test;\n+using namespace std;\n \n // libstdc++/53622\n void\n@@ -36,7 +40,7 @@ test01()\n     std::string target(\"zxcv/onetwoabc\");\n     std::smatch m;\n \n-    VERIFY( std::regex_match(target, m, re) );\n+    VERIFY( regex_match_debug(target, m, re) );\n     VERIFY( m.size() == 2 );\n     VERIFY( m[0].matched == true );\n     VERIFY( std::string(m[0].first, m[0].second) == \"zxcv/onetwoabc\" );\n@@ -49,7 +53,7 @@ test01()\n     std::string target(\"zxcv/onetwoabc\");\n     std::smatch m;\n \n-    VERIFY( std::regex_match(target, m, re) );\n+    VERIFY( regex_match_debug(target, m, re) );\n     VERIFY( m.size() == 3 );\n     VERIFY( m[0].matched == true );\n     VERIFY( std::string(m[0].first, m[0].second) == \"zxcv/onetwoabc\" );"}, {"sha": "dc177e54274ef4708b7ccaabe76c98fe0dac2b95", "filename": "libstdc++-v3/testsuite/28_regex/algorithms/regex_match/ecma/char/57173.cc", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6cb4308702d0333775a1da15f43bcfd949115aeb/libstdc%2B%2B-v3%2Ftestsuite%2F28_regex%2Falgorithms%2Fregex_match%2Fecma%2Fchar%2F57173.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6cb4308702d0333775a1da15f43bcfd949115aeb/libstdc%2B%2B-v3%2Ftestsuite%2F28_regex%2Falgorithms%2Fregex_match%2Fecma%2Fchar%2F57173.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F28_regex%2Falgorithms%2Fregex_match%2Fecma%2Fchar%2F57173.cc?ref=6cb4308702d0333775a1da15f43bcfd949115aeb", "patch": "@@ -24,6 +24,10 @@\n \n #include <regex>\n #include <testsuite_hooks.h>\n+#include <testsuite_regex.h>\n+\n+using namespace __gnu_test;\n+using namespace std;\n #include <iostream>\n \n // libstdc++/57173\n@@ -37,7 +41,7 @@ test01()\n     std::string target(\"/asdf/qwerty\");\n     std::smatch m;\n \n-    VERIFY( std::regex_match(target, m, re) );\n+    VERIFY( regex_match_debug(target, m, re) );\n     VERIFY( m.size() == 2 );\n     VERIFY( std::string(m[1].first, m[1].second) == \"/qwerty\");\n   }\n@@ -46,7 +50,7 @@ test01()\n     std::string target(\"/asdf/qwerty\");\n     std::smatch m;\n \n-    VERIFY( std::regex_match(target, m, re) );\n+    VERIFY( regex_match_debug(target, m, re) );\n     VERIFY( m.size() == 3 );\n     VERIFY( std::string(m[1].first, m[1].second) == \"/qwerty\");\n   }"}, {"sha": "f745ef34e379e5cbc166af46f5b09d358ca7867a", "filename": "libstdc++-v3/testsuite/28_regex/algorithms/regex_match/ecma/char/58576.cc", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6cb4308702d0333775a1da15f43bcfd949115aeb/libstdc%2B%2B-v3%2Ftestsuite%2F28_regex%2Falgorithms%2Fregex_match%2Fecma%2Fchar%2F58576.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6cb4308702d0333775a1da15f43bcfd949115aeb/libstdc%2B%2B-v3%2Ftestsuite%2F28_regex%2Falgorithms%2Fregex_match%2Fecma%2Fchar%2F58576.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F28_regex%2Falgorithms%2Fregex_match%2Fecma%2Fchar%2F58576.cc?ref=6cb4308702d0333775a1da15f43bcfd949115aeb", "patch": "@@ -24,13 +24,15 @@\n \n #include <regex>\n #include <testsuite_hooks.h>\n+#include <testsuite_regex.h>\n+\n+using namespace __gnu_test;\n+using namespace std;\n \n // libstdc++/58576\n void\n test01()\n {\n-  using namespace std;\n-\n   bool test __attribute__((unused)) = true;\n \n   string domain_name = \"valid.hostname.org\";\n@@ -74,9 +76,9 @@ test01()\n   };\n   try\n     {\n-      VERIFY(regex_match( domain_name, m, fqdn_regex ));\n+      VERIFY(regex_match_debug( domain_name, m, fqdn_regex ));\n       VERIFY(m.size() == sizeof(sol) / sizeof(*sol));\n-      for (int i = 0; i < (int)m.size(); i++) {\n+      for (size_t i = 0; i < m.size(); i++) {\n \t  string s(m[i].first, m[i].second);\n \t  VERIFY(s == sol[i]);\n       }"}, {"sha": "866ff7fead8ce7c15d65888c158bed5e4165850d", "filename": "libstdc++-v3/testsuite/28_regex/algorithms/regex_match/ecma/char/anymatcher.cc", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6cb4308702d0333775a1da15f43bcfd949115aeb/libstdc%2B%2B-v3%2Ftestsuite%2F28_regex%2Falgorithms%2Fregex_match%2Fecma%2Fchar%2Fanymatcher.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6cb4308702d0333775a1da15f43bcfd949115aeb/libstdc%2B%2B-v3%2Ftestsuite%2F28_regex%2Falgorithms%2Fregex_match%2Fecma%2Fchar%2Fanymatcher.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F28_regex%2Falgorithms%2Fregex_match%2Fecma%2Fchar%2Fanymatcher.cc?ref=6cb4308702d0333775a1da15f43bcfd949115aeb", "patch": "@@ -25,7 +25,9 @@\n \n #include <regex>\n #include <testsuite_hooks.h>\n+#include <testsuite_regex.h>\n \n+using namespace __gnu_test;\n using namespace std;\n \n void\n@@ -37,7 +39,7 @@ test01()\n   {\\\n     regex re(res);\\\n     string st(s);\\\n-    VERIFY(!regex_match(st, re));\\\n+    VERIFY(!regex_match_debug(st, re));\\\n   }\n   TEST(\".\", \"\\0\");\n   TEST(\".\", \"\\n\");"}, {"sha": "05a57725d04b00204af37bcc658bbbc3e45e7732", "filename": "libstdc++-v3/testsuite/28_regex/algorithms/regex_match/ecma/char/backref.cc", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6cb4308702d0333775a1da15f43bcfd949115aeb/libstdc%2B%2B-v3%2Ftestsuite%2F28_regex%2Falgorithms%2Fregex_match%2Fecma%2Fchar%2Fbackref.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6cb4308702d0333775a1da15f43bcfd949115aeb/libstdc%2B%2B-v3%2Ftestsuite%2F28_regex%2Falgorithms%2Fregex_match%2Fecma%2Fchar%2Fbackref.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F28_regex%2Falgorithms%2Fregex_match%2Fecma%2Fchar%2Fbackref.cc?ref=6cb4308702d0333775a1da15f43bcfd949115aeb", "patch": "@@ -25,7 +25,9 @@\n \n #include <regex>\n #include <testsuite_hooks.h>\n+#include <testsuite_regex.h>\n \n+using namespace __gnu_test;\n using namespace std;\n \n void"}, {"sha": "9f09c7463e8fde2c38e8f1b66d01eede4cb32f2a", "filename": "libstdc++-v3/testsuite/28_regex/algorithms/regex_match/ecma/char/empty_range.cc", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6cb4308702d0333775a1da15f43bcfd949115aeb/libstdc%2B%2B-v3%2Ftestsuite%2F28_regex%2Falgorithms%2Fregex_match%2Fecma%2Fchar%2Fempty_range.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6cb4308702d0333775a1da15f43bcfd949115aeb/libstdc%2B%2B-v3%2Ftestsuite%2F28_regex%2Falgorithms%2Fregex_match%2Fecma%2Fchar%2Fempty_range.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F28_regex%2Falgorithms%2Fregex_match%2Fecma%2Fchar%2Fempty_range.cc?ref=6cb4308702d0333775a1da15f43bcfd949115aeb", "patch": "@@ -25,18 +25,20 @@\n \n #include <regex>\n #include <testsuite_hooks.h>\n+#include <testsuite_regex.h>\n \n+using namespace __gnu_test;\n using namespace std;\n \n void\n test01()\n {\n   bool test __attribute__((unused)) = true;\n \n-  VERIFY(!regex_match(\"x\", regex(\"[]\")));\n-  VERIFY(regex_match(\"x\", regex(\"[^]\")));\n-  VERIFY(!regex_match(\"]\", regex(\"[]]\")));\n-  VERIFY(!regex_match(\"]\", regex(\"[^]]\")));\n+  VERIFY(!regex_match_debug(\"x\", regex(\"[]\")));\n+  VERIFY(regex_match_debug(\"x\", regex(\"[^]\")));\n+  VERIFY(!regex_match_debug(\"]\", regex(\"[]]\")));\n+  VERIFY(!regex_match_debug(\"]\", regex(\"[^]]\")));\n }\n \n int"}, {"sha": "77fd43c0acbd357607c10a5052459f780cb633d8", "filename": "libstdc++-v3/testsuite/28_regex/algorithms/regex_match/ecma/char/emptygroup.cc", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6cb4308702d0333775a1da15f43bcfd949115aeb/libstdc%2B%2B-v3%2Ftestsuite%2F28_regex%2Falgorithms%2Fregex_match%2Fecma%2Fchar%2Femptygroup.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6cb4308702d0333775a1da15f43bcfd949115aeb/libstdc%2B%2B-v3%2Ftestsuite%2F28_regex%2Falgorithms%2Fregex_match%2Fecma%2Fchar%2Femptygroup.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F28_regex%2Falgorithms%2Fregex_match%2Fecma%2Fchar%2Femptygroup.cc?ref=6cb4308702d0333775a1da15f43bcfd949115aeb", "patch": "@@ -25,7 +25,9 @@\n \n #include <regex>\n #include <testsuite_hooks.h>\n+#include <testsuite_regex.h>\n \n+using namespace __gnu_test;\n using namespace std;\n \n void\n@@ -37,7 +39,7 @@ test01()\n     regex re(\"()*\\\\1\");\n     cmatch m;\n     const char s[] = \"\";\n-    VERIFY( regex_match(s, m, re) );\n+    VERIFY( regex_match_debug(s, m, re) );\n     VERIFY( m.size() == 2 );\n     VERIFY( m[0].matched );\n     VERIFY( m[1].matched );\n@@ -46,7 +48,7 @@ test01()\n     regex re(\"()*\");\n     cmatch m;\n     const char s[] = \"\";\n-    VERIFY( regex_match(s, m, re) );\n+    VERIFY( regex_match_debug(s, m, re) );\n   }\n }\n "}, {"sha": "b1030615ec360a612cf9f7d5aa73ea7e83957c40", "filename": "libstdc++-v3/testsuite/28_regex/algorithms/regex_match/ecma/char/hex.cc", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6cb4308702d0333775a1da15f43bcfd949115aeb/libstdc%2B%2B-v3%2Ftestsuite%2F28_regex%2Falgorithms%2Fregex_match%2Fecma%2Fchar%2Fhex.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6cb4308702d0333775a1da15f43bcfd949115aeb/libstdc%2B%2B-v3%2Ftestsuite%2F28_regex%2Falgorithms%2Fregex_match%2Fecma%2Fchar%2Fhex.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F28_regex%2Falgorithms%2Fregex_match%2Fecma%2Fchar%2Fhex.cc?ref=6cb4308702d0333775a1da15f43bcfd949115aeb", "patch": "@@ -25,15 +25,17 @@\n \n #include <regex>\n #include <testsuite_hooks.h>\n+#include <testsuite_regex.h>\n \n+using namespace __gnu_test;\n using namespace std;\n \n void\n test01()\n {\n   bool test __attribute__((unused)) = true;\n \n-  VERIFY(regex_match(\":\", regex(\"\\\\x3a\")));\n+  VERIFY(regex_match_debug(\":\", regex(\"\\\\x3a\")));\n   try\n     {\n       regex(\"\\\\u400x\");"}, {"sha": "118c47226770048c6b0d3d30f4835c3f4e7ae4ec", "filename": "libstdc++-v3/testsuite/28_regex/algorithms/regex_match/ecma/char/quoted_char.cc", "status": "modified", "additions": 11, "deletions": 9, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6cb4308702d0333775a1da15f43bcfd949115aeb/libstdc%2B%2B-v3%2Ftestsuite%2F28_regex%2Falgorithms%2Fregex_match%2Fecma%2Fchar%2Fquoted_char.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6cb4308702d0333775a1da15f43bcfd949115aeb/libstdc%2B%2B-v3%2Ftestsuite%2F28_regex%2Falgorithms%2Fregex_match%2Fecma%2Fchar%2Fquoted_char.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F28_regex%2Falgorithms%2Fregex_match%2Fecma%2Fchar%2Fquoted_char.cc?ref=6cb4308702d0333775a1da15f43bcfd949115aeb", "patch": "@@ -25,23 +25,25 @@\n \n #include <regex>\n #include <testsuite_hooks.h>\n+#include <testsuite_regex.h>\n \n+using namespace __gnu_test;\n using namespace std;\n \n void\n test01()\n {\n   bool test __attribute__((unused)) = true;\n \n-  VERIFY(regex_match(\"01\", regex(\"\\\\d*\")));\n-  VERIFY(regex_match(\"asdfjkl\", regex(\"\\\\D*\")));\n-  VERIFY(!regex_match(\"asdfjkl0\", regex(\"\\\\D*\")));\n-  VERIFY(regex_match(\"\\r\\t\\v\\f \", regex(\"\\\\s*\")));\n-  VERIFY(regex_match(\"asdfjkl\", regex(\"\\\\S*\")));\n-  VERIFY(!regex_match(\"asdfjkl\\r\", regex(\"\\\\S*\")));\n-  VERIFY(regex_match(\"_az\", regex(\"\\\\w*\")));\n-  VERIFY(regex_match(\"!@#$%\", regex(\"\\\\W*\")));\n-  VERIFY(!regex_match(\"_01234\", regex(\"\\\\W*\")));\n+  VERIFY(regex_match_debug(\"01\", regex(\"\\\\d*\")));\n+  VERIFY(regex_match_debug(\"asdfjkl\", regex(\"\\\\D*\")));\n+  VERIFY(!regex_match_debug(\"asdfjkl0\", regex(\"\\\\D*\")));\n+  VERIFY(regex_match_debug(\"\\r\\t\\v\\f \", regex(\"\\\\s*\")));\n+  VERIFY(regex_match_debug(\"asdfjkl\", regex(\"\\\\S*\")));\n+  VERIFY(!regex_match_debug(\"asdfjkl\\r\", regex(\"\\\\S*\")));\n+  VERIFY(regex_match_debug(\"_az\", regex(\"\\\\w*\")));\n+  VERIFY(regex_match_debug(\"!@#$%\", regex(\"\\\\W*\")));\n+  VERIFY(!regex_match_debug(\"_01234\", regex(\"\\\\W*\")));\n }\n \n int"}, {"sha": "323a2ff4ed612c7a28eaf623ed5e24a3227a5126", "filename": "libstdc++-v3/testsuite/28_regex/algorithms/regex_match/ecma/wchar_t/anymatcher.cc", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6cb4308702d0333775a1da15f43bcfd949115aeb/libstdc%2B%2B-v3%2Ftestsuite%2F28_regex%2Falgorithms%2Fregex_match%2Fecma%2Fwchar_t%2Fanymatcher.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6cb4308702d0333775a1da15f43bcfd949115aeb/libstdc%2B%2B-v3%2Ftestsuite%2F28_regex%2Falgorithms%2Fregex_match%2Fecma%2Fwchar_t%2Fanymatcher.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F28_regex%2Falgorithms%2Fregex_match%2Fecma%2Fwchar_t%2Fanymatcher.cc?ref=6cb4308702d0333775a1da15f43bcfd949115aeb", "patch": "@@ -25,7 +25,9 @@\n \n #include <regex>\n #include <testsuite_hooks.h>\n+#include <testsuite_regex.h>\n \n+using namespace __gnu_test;\n using namespace std;\n \n void\n@@ -37,7 +39,7 @@ test01()\n   {\\\n     wregex re(res);\\\n     wstring st(s);\\\n-    VERIFY(!regex_match(st, re));\\\n+    VERIFY(!regex_match_debug(st, re));\\\n   }\n   TESTL(L\".\", L\"\\u2028\");\n   TESTL(L\".\", L\"\\u2029\");"}, {"sha": "876a7df1e2e331aa35bcabd098e95b317952efee", "filename": "libstdc++-v3/testsuite/28_regex/algorithms/regex_match/ecma/wchar_t/hex.cc", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6cb4308702d0333775a1da15f43bcfd949115aeb/libstdc%2B%2B-v3%2Ftestsuite%2F28_regex%2Falgorithms%2Fregex_match%2Fecma%2Fwchar_t%2Fhex.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6cb4308702d0333775a1da15f43bcfd949115aeb/libstdc%2B%2B-v3%2Ftestsuite%2F28_regex%2Falgorithms%2Fregex_match%2Fecma%2Fwchar_t%2Fhex.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F28_regex%2Falgorithms%2Fregex_match%2Fecma%2Fwchar_t%2Fhex.cc?ref=6cb4308702d0333775a1da15f43bcfd949115aeb", "patch": "@@ -25,15 +25,17 @@\n \n #include <regex>\n #include <testsuite_hooks.h>\n+#include <testsuite_regex.h>\n \n+using namespace __gnu_test;\n using namespace std;\n \n void\n test01()\n {\n   bool test __attribute__((unused)) = true;\n \n-  VERIFY(regex_match(L\"\\u1234\", wregex(L\"\\\\u1234\")));\n+  VERIFY(regex_match_debug(L\"\\u1234\", wregex(L\"\\\\u1234\")));\n }\n \n int"}, {"sha": "c5f066bec816cd8913a53f59259d4bc995f0997f", "filename": "libstdc++-v3/testsuite/28_regex/algorithms/regex_match/extended/cstring_bracket_01.cc", "status": "modified", "additions": 19, "deletions": 15, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6cb4308702d0333775a1da15f43bcfd949115aeb/libstdc%2B%2B-v3%2Ftestsuite%2F28_regex%2Falgorithms%2Fregex_match%2Fextended%2Fcstring_bracket_01.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6cb4308702d0333775a1da15f43bcfd949115aeb/libstdc%2B%2B-v3%2Ftestsuite%2F28_regex%2Falgorithms%2Fregex_match%2Fextended%2Fcstring_bracket_01.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F28_regex%2Falgorithms%2Fregex_match%2Fextended%2Fcstring_bracket_01.cc?ref=6cb4308702d0333775a1da15f43bcfd949115aeb", "patch": "@@ -25,6 +25,10 @@\n \n #include <regex>\n #include <testsuite_hooks.h>\n+#include <testsuite_regex.h>\n+\n+using namespace __gnu_test;\n+using namespace std;\n \n void\n test01()\n@@ -33,33 +37,33 @@ test01()\n \n   {\n     std::regex  re(\"pre/[za-x]\", std::regex::extended);\n-    VERIFY( std::regex_match(\"pre/z\", re) );\n-    VERIFY( std::regex_match(\"pre/a\", re) );\n-    VERIFY( !std::regex_match(\"pre/y\", re) );\n+    VERIFY( regex_match_debug(\"pre/z\", re) );\n+    VERIFY( regex_match_debug(\"pre/a\", re) );\n+    VERIFY( !regex_match_debug(\"pre/y\", re) );\n   }\n   {\n     std::regex  re(\"pre/[[:uPPer:]]\", std::regex::extended);\n-    VERIFY( std::regex_match(\"pre/Z\", re) );\n-    VERIFY( !std::regex_match(\"pre/_\", re) );\n-    VERIFY( !std::regex_match(\"pre/a\", re) );\n-    VERIFY( !std::regex_match(\"pre/0\", re) );\n+    VERIFY( regex_match_debug(\"pre/Z\", re) );\n+    VERIFY( !regex_match_debug(\"pre/_\", re) );\n+    VERIFY( !regex_match_debug(\"pre/a\", re) );\n+    VERIFY( !regex_match_debug(\"pre/0\", re) );\n   }\n   {\n     std::regex  re(\"pre/[[:lOWer:]]\", std::regex::extended | std::regex::icase);\n-    VERIFY( std::regex_match(\"pre/Z\", re) );\n-    VERIFY( std::regex_match(\"pre/a\", re) );\n+    VERIFY( regex_match_debug(\"pre/Z\", re) );\n+    VERIFY( regex_match_debug(\"pre/a\", re) );\n   }\n   {\n     std::regex  re(\"pre/[[:w:][.tilde.]]\", std::regex::extended);\n-    VERIFY( std::regex_match(\"pre/~\", re) );\n-    VERIFY( std::regex_match(\"pre/_\", re) );\n-    VERIFY( std::regex_match(\"pre/a\", re) );\n-    VERIFY( std::regex_match(\"pre/0\", re) );\n+    VERIFY( regex_match_debug(\"pre/~\", re) );\n+    VERIFY( regex_match_debug(\"pre/_\", re) );\n+    VERIFY( regex_match_debug(\"pre/a\", re) );\n+    VERIFY( regex_match_debug(\"pre/0\", re) );\n   }\n   {\n     std::regex  re(\"pre/[[=a=]]\", std::regex::extended);\n-    VERIFY( std::regex_match(\"pre/a\", re) );\n-    VERIFY( std::regex_match(\"pre/A\", re) );\n+    VERIFY( regex_match_debug(\"pre/a\", re) );\n+    VERIFY( regex_match_debug(\"pre/A\", re) );\n   }\n }\n "}, {"sha": "32bc24f99822228a1484cd64bb23377a3e532042", "filename": "libstdc++-v3/testsuite/28_regex/algorithms/regex_match/extended/cstring_plus.cc", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6cb4308702d0333775a1da15f43bcfd949115aeb/libstdc%2B%2B-v3%2Ftestsuite%2F28_regex%2Falgorithms%2Fregex_match%2Fextended%2Fcstring_plus.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6cb4308702d0333775a1da15f43bcfd949115aeb/libstdc%2B%2B-v3%2Ftestsuite%2F28_regex%2Falgorithms%2Fregex_match%2Fextended%2Fcstring_plus.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F28_regex%2Falgorithms%2Fregex_match%2Fextended%2Fcstring_plus.cc?ref=6cb4308702d0333775a1da15f43bcfd949115aeb", "patch": "@@ -25,6 +25,10 @@\n \n #include <regex>\n #include <testsuite_hooks.h>\n+#include <testsuite_regex.h>\n+\n+using namespace __gnu_test;\n+using namespace std;\n \n void\n test01()\n@@ -35,7 +39,7 @@ test01()\n   const char target[] = \"aa\";\n   std::cmatch m;\n \n-  VERIFY( std::regex_match(target, m, re) );\n+  VERIFY( regex_match_debug(target, m, re) );\n \n   VERIFY( re.mark_count() == 1 );\n   VERIFY( m.size()  == re.mark_count()+1 );\n@@ -53,9 +57,9 @@ test01()\n   VERIFY( m[1].second == target+sizeof(target)-1 );\n   VERIFY( m[1].matched == true );\n \n-  VERIFY(!std::regex_match(\"\", std::regex(\"a+\", std::regex::extended)));\n-  VERIFY(std::regex_match(\"a\", std::regex(\"a+\", std::regex::extended)));\n-  VERIFY(std::regex_match(\"aa\", std::regex(\"a+\", std::regex::extended)));\n+  VERIFY(!regex_match_debug(\"\", std::regex(\"a+\", std::regex::extended)));\n+  VERIFY(regex_match_debug(\"a\", std::regex(\"a+\", std::regex::extended)));\n+  VERIFY(regex_match_debug(\"aa\", std::regex(\"a+\", std::regex::extended)));\n }\n \n "}, {"sha": "90e9eafae602e769c5a48e4cbcd5e2fed6aed59f", "filename": "libstdc++-v3/testsuite/28_regex/algorithms/regex_match/extended/cstring_questionmark.cc", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6cb4308702d0333775a1da15f43bcfd949115aeb/libstdc%2B%2B-v3%2Ftestsuite%2F28_regex%2Falgorithms%2Fregex_match%2Fextended%2Fcstring_questionmark.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6cb4308702d0333775a1da15f43bcfd949115aeb/libstdc%2B%2B-v3%2Ftestsuite%2F28_regex%2Falgorithms%2Fregex_match%2Fextended%2Fcstring_questionmark.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F28_regex%2Falgorithms%2Fregex_match%2Fextended%2Fcstring_questionmark.cc?ref=6cb4308702d0333775a1da15f43bcfd949115aeb", "patch": "@@ -25,6 +25,10 @@\n \n #include <regex>\n #include <testsuite_hooks.h>\n+#include <testsuite_regex.h>\n+\n+using namespace __gnu_test;\n+using namespace std;\n \n void\n test01()\n@@ -35,7 +39,7 @@ test01()\n   char target[] = \"a\";\n   std::cmatch m;\n \n-  VERIFY( std::regex_match(target, m, re) );\n+  VERIFY( regex_match_debug(target, m, re) );\n \n   VERIFY( re.mark_count() == 1 );\n   VERIFY( m.size()  == re.mark_count()+1 );\n@@ -53,9 +57,9 @@ test01()\n   VERIFY( m[1].second == target+sizeof(target)-1 );\n   VERIFY( m[1].matched == true );\n \n-  VERIFY(std::regex_match(\"\", std::regex(\"a?\", std::regex::extended)));\n-  VERIFY(std::regex_match(\"a\", std::regex(\"a?\", std::regex::extended)));\n-  VERIFY(!std::regex_match(\"aa\", std::regex(\"a?\", std::regex::extended)));\n+  VERIFY(regex_match_debug(\"\", std::regex(\"a?\", std::regex::extended)));\n+  VERIFY(regex_match_debug(\"a\", std::regex(\"a?\", std::regex::extended)));\n+  VERIFY(!regex_match_debug(\"aa\", std::regex(\"a?\", std::regex::extended)));\n }\n \n "}, {"sha": "f9f7b6af1fdb1f982776169b084627e01ba22538", "filename": "libstdc++-v3/testsuite/28_regex/algorithms/regex_match/extended/cstring_range.cc", "status": "modified", "additions": 22, "deletions": 20, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6cb4308702d0333775a1da15f43bcfd949115aeb/libstdc%2B%2B-v3%2Ftestsuite%2F28_regex%2Falgorithms%2Fregex_match%2Fextended%2Fcstring_range.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6cb4308702d0333775a1da15f43bcfd949115aeb/libstdc%2B%2B-v3%2Ftestsuite%2F28_regex%2Falgorithms%2Fregex_match%2Fextended%2Fcstring_range.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F28_regex%2Falgorithms%2Fregex_match%2Fextended%2Fcstring_range.cc?ref=6cb4308702d0333775a1da15f43bcfd949115aeb", "patch": "@@ -25,7 +25,9 @@\n \n #include <regex>\n #include <testsuite_hooks.h>\n+#include <testsuite_regex.h>\n \n+using namespace __gnu_test;\n using namespace std;\n \n void\n@@ -35,29 +37,29 @@ test01()\n \n   regex re;\n   re.assign(\"(ab){3}\", std::regex::extended);\n-  VERIFY(!regex_match(\"abab\", re));\n-  VERIFY(regex_match(\"ababab\", re));\n-  VERIFY(!regex_match(\"abababab\", re));\n+  VERIFY(!regex_match_debug(\"abab\", re));\n+  VERIFY(regex_match_debug(\"ababab\", re));\n+  VERIFY(!regex_match_debug(\"abababab\", re));\n   re.assign(\"(ab){3,}\", std::regex::extended);\n-  VERIFY(!regex_match(\"abab\", re));\n-  VERIFY(regex_match(\"ababab\", re));\n-  VERIFY(regex_match(\"abababab\", re));\n-  VERIFY(regex_match(\"ababababab\", re));\n+  VERIFY(!regex_match_debug(\"abab\", re));\n+  VERIFY(regex_match_debug(\"ababab\", re));\n+  VERIFY(regex_match_debug(\"abababab\", re));\n+  VERIFY(regex_match_debug(\"ababababab\", re));\n   re.assign(\"(ab){0,3}\", std::regex::extended);\n-  VERIFY(regex_match(\"\", re));\n-  VERIFY(regex_match(\"ab\", re));\n-  VERIFY(regex_match(\"abab\", re));\n-  VERIFY(regex_match(\"ababab\", re));\n-  VERIFY(!regex_match(\"abababab\", re));\n+  VERIFY(regex_match_debug(\"\", re));\n+  VERIFY(regex_match_debug(\"ab\", re));\n+  VERIFY(regex_match_debug(\"abab\", re));\n+  VERIFY(regex_match_debug(\"ababab\", re));\n+  VERIFY(!regex_match_debug(\"abababab\", re));\n   re.assign(\"(a|b){0,2}\", std::regex::extended);\n-  VERIFY(regex_match(\"\", re));\n-  VERIFY(regex_match(\"a\", re));\n-  VERIFY(regex_match(\"b\", re));\n-  VERIFY(regex_match(\"aa\", re));\n-  VERIFY(regex_match(\"ab\", re));\n-  VERIFY(regex_match(\"ba\", re));\n-  VERIFY(regex_match(\"bb\", re));\n-  VERIFY(!regex_match(\"aaa\", re));\n+  VERIFY(regex_match_debug(\"\", re));\n+  VERIFY(regex_match_debug(\"a\", re));\n+  VERIFY(regex_match_debug(\"b\", re));\n+  VERIFY(regex_match_debug(\"aa\", re));\n+  VERIFY(regex_match_debug(\"ab\", re));\n+  VERIFY(regex_match_debug(\"ba\", re));\n+  VERIFY(regex_match_debug(\"bb\", re));\n+  VERIFY(!regex_match_debug(\"aaa\", re));\n }\n \n int"}, {"sha": "cd870396781fb8ccae4b4c133eacfed445255c97", "filename": "libstdc++-v3/testsuite/28_regex/algorithms/regex_match/extended/string_any.cc", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6cb4308702d0333775a1da15f43bcfd949115aeb/libstdc%2B%2B-v3%2Ftestsuite%2F28_regex%2Falgorithms%2Fregex_match%2Fextended%2Fstring_any.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6cb4308702d0333775a1da15f43bcfd949115aeb/libstdc%2B%2B-v3%2Ftestsuite%2F28_regex%2Falgorithms%2Fregex_match%2Fextended%2Fstring_any.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F28_regex%2Falgorithms%2Fregex_match%2Fextended%2Fstring_any.cc?ref=6cb4308702d0333775a1da15f43bcfd949115aeb", "patch": "@@ -25,6 +25,10 @@\n \n #include <regex>\n #include <testsuite_hooks.h>\n+#include <testsuite_regex.h>\n+\n+using namespace __gnu_test;\n+using namespace std;\n \n void\n test01()\n@@ -35,7 +39,7 @@ test01()\n \tstd::string target(\"aaba\");\n \tstd::smatch m;\n \n-\tVERIFY( std::regex_match(target, m, re) );\n+\tVERIFY( regex_match_debug(target, m, re) );\n \n \tVERIFY( m.size()  == re.mark_count()+1 );\n \tVERIFY( m.empty() == false );"}, {"sha": "50141f0037d73d6127709b9c5e1af5837c39470a", "filename": "libstdc++-v3/testsuite/28_regex/algorithms/regex_match/extended/string_dispatch_01.cc", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6cb4308702d0333775a1da15f43bcfd949115aeb/libstdc%2B%2B-v3%2Ftestsuite%2F28_regex%2Falgorithms%2Fregex_match%2Fextended%2Fstring_dispatch_01.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6cb4308702d0333775a1da15f43bcfd949115aeb/libstdc%2B%2B-v3%2Ftestsuite%2F28_regex%2Falgorithms%2Fregex_match%2Fextended%2Fstring_dispatch_01.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F28_regex%2Falgorithms%2Fregex_match%2Fextended%2Fstring_dispatch_01.cc?ref=6cb4308702d0333775a1da15f43bcfd949115aeb", "patch": "@@ -38,10 +38,12 @@ template<typename _Bi_iter, typename _Alloc,\n              regex_constants::match_flag_type         __flags\n                             = regex_constants::match_default)\n   {\n+    using namespace __detail;\n     auto& __res = (vector<sub_match<_Bi_iter>, _Alloc>&)(__m);\n     VERIFY( (dynamic_cast\n-             <__detail::_DFSExecutor<_Bi_iter, _Alloc, _Ch_type, _Rx_traits>*>\n-             (&*__detail::__get_executor(__s, __e, __res, __re, __flags))\n+             <_DFSExecutor<_Bi_iter, _Alloc, _Ch_type, _Rx_traits>*>\n+             (&*__get_executor<_Bi_iter, _Alloc, _Ch_type, _Rx_traits,\n+\t      _RegexExecutorPolicy::_S_auto>(__s, __e, __res, __re, __flags))\n              != nullptr) );\n   }\n "}, {"sha": "e483b0abb9d42f441fbfc243880e727b341af88c", "filename": "libstdc++-v3/testsuite/28_regex/algorithms/regex_match/extended/string_range_00_03.cc", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6cb4308702d0333775a1da15f43bcfd949115aeb/libstdc%2B%2B-v3%2Ftestsuite%2F28_regex%2Falgorithms%2Fregex_match%2Fextended%2Fstring_range_00_03.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6cb4308702d0333775a1da15f43bcfd949115aeb/libstdc%2B%2B-v3%2Ftestsuite%2F28_regex%2Falgorithms%2Fregex_match%2Fextended%2Fstring_range_00_03.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F28_regex%2Falgorithms%2Fregex_match%2Fextended%2Fstring_range_00_03.cc?ref=6cb4308702d0333775a1da15f43bcfd949115aeb", "patch": "@@ -25,6 +25,9 @@\n \n #include <regex>\n #include <testsuite_hooks.h>\n+#include <testsuite_regex.h>\n+\n+using namespace __gnu_test;\n \n void\n test01()\n@@ -35,7 +38,7 @@ test01()\n   std::string target(\"aa\");\n   std::smatch m;\n \n-  VERIFY( std::regex_match(target, m, re) );\n+  VERIFY( regex_match_debug(target, m, re) );\n \n   VERIFY( m.size()  == re.mark_count()+1 );\n   VERIFY( m.empty() == false );"}, {"sha": "3879fc418aa576dbf456269493734fdeaaa08bf3", "filename": "libstdc++-v3/testsuite/28_regex/algorithms/regex_match/extended/string_range_01_03.cc", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6cb4308702d0333775a1da15f43bcfd949115aeb/libstdc%2B%2B-v3%2Ftestsuite%2F28_regex%2Falgorithms%2Fregex_match%2Fextended%2Fstring_range_01_03.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6cb4308702d0333775a1da15f43bcfd949115aeb/libstdc%2B%2B-v3%2Ftestsuite%2F28_regex%2Falgorithms%2Fregex_match%2Fextended%2Fstring_range_01_03.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F28_regex%2Falgorithms%2Fregex_match%2Fextended%2Fstring_range_01_03.cc?ref=6cb4308702d0333775a1da15f43bcfd949115aeb", "patch": "@@ -25,6 +25,10 @@\n \n #include <regex>\n #include <testsuite_hooks.h>\n+#include <testsuite_regex.h>\n+\n+using namespace __gnu_test;\n+using namespace std;\n \n void\n test01()\n@@ -35,7 +39,7 @@ test01()\n \tstd::string target(\"aa\");\n \tstd::smatch m;\n \n-\tVERIFY( std::regex_match(target, m, re) );\n+\tVERIFY( regex_match_debug(target, m, re) );\n \n \tVERIFY( m.size()  == re.mark_count()+1 );\n \tVERIFY( m.empty() == false );"}, {"sha": "c2ebdf8b143d65295a96a0cc2854dc911b70b1d8", "filename": "libstdc++-v3/testsuite/28_regex/algorithms/regex_match/extended/string_range_02_03.cc", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6cb4308702d0333775a1da15f43bcfd949115aeb/libstdc%2B%2B-v3%2Ftestsuite%2F28_regex%2Falgorithms%2Fregex_match%2Fextended%2Fstring_range_02_03.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6cb4308702d0333775a1da15f43bcfd949115aeb/libstdc%2B%2B-v3%2Ftestsuite%2F28_regex%2Falgorithms%2Fregex_match%2Fextended%2Fstring_range_02_03.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F28_regex%2Falgorithms%2Fregex_match%2Fextended%2Fstring_range_02_03.cc?ref=6cb4308702d0333775a1da15f43bcfd949115aeb", "patch": "@@ -25,6 +25,10 @@\n \n #include <regex>\n #include <testsuite_hooks.h>\n+#include <testsuite_regex.h>\n+\n+using namespace __gnu_test;\n+using namespace std;\n \n void\n test01()\n@@ -35,7 +39,7 @@ test01()\n \tstd::string target(\"aa\");\n \tstd::smatch m;\n \n-\tVERIFY( std::regex_match(target, m, re) );\n+\tVERIFY( regex_match_debug(target, m, re) );\n \n \tVERIFY( m.size()  == re.mark_count()+1 );\n \tVERIFY( m.empty() == false );"}, {"sha": "ba0ecd5b4c4bb8d6974b6598190ba78ff7e3066b", "filename": "libstdc++-v3/testsuite/28_regex/algorithms/regex_match/extended/wstring_locale.cc", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6cb4308702d0333775a1da15f43bcfd949115aeb/libstdc%2B%2B-v3%2Ftestsuite%2F28_regex%2Falgorithms%2Fregex_match%2Fextended%2Fwstring_locale.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6cb4308702d0333775a1da15f43bcfd949115aeb/libstdc%2B%2B-v3%2Ftestsuite%2F28_regex%2Falgorithms%2Fregex_match%2Fextended%2Fwstring_locale.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F28_regex%2Falgorithms%2Fregex_match%2Fextended%2Fwstring_locale.cc?ref=6cb4308702d0333775a1da15f43bcfd949115aeb", "patch": "@@ -26,6 +26,10 @@\n \n #include <regex>\n #include <testsuite_hooks.h>\n+#include <testsuite_regex.h>\n+\n+using namespace __gnu_test;\n+using namespace std;\n \n void\n test01()\n@@ -37,7 +41,7 @@ test01()\n   re2.imbue(std::locale(\"de_DE.UTF-8\"));\n   re2.assign(L\"[[:upper:]]*\", std::regex::extended);\n   std::wsmatch m2;\n-  VERIFY(std::regex_match(str2, m2, re2));\n+  VERIFY(regex_match_debug(str2, m2, re2));\n }\n \n int"}, {"sha": "fed8e7dd17f49208ce7bf80bd8d7746fd44ebd62", "filename": "libstdc++-v3/testsuite/28_regex/algorithms/regex_search/basic/string_01.cc", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6cb4308702d0333775a1da15f43bcfd949115aeb/libstdc%2B%2B-v3%2Ftestsuite%2F28_regex%2Falgorithms%2Fregex_search%2Fbasic%2Fstring_01.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6cb4308702d0333775a1da15f43bcfd949115aeb/libstdc%2B%2B-v3%2Ftestsuite%2F28_regex%2Falgorithms%2Fregex_search%2Fbasic%2Fstring_01.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F28_regex%2Falgorithms%2Fregex_search%2Fbasic%2Fstring_01.cc?ref=6cb4308702d0333775a1da15f43bcfd949115aeb", "patch": "@@ -25,6 +25,10 @@\n \n #include <regex>\n #include <testsuite_hooks.h>\n+#include <testsuite_regex.h>\n+\n+using namespace __gnu_test;\n+using namespace std;\n \n void\n test01()\n@@ -35,7 +39,7 @@ test01()\n   std::string target(\"xxasdfyy\");\n   std::smatch m;\n \n-  VERIFY( std::regex_search(target, m, re) );\n+  VERIFY( regex_search_debug(target, m, re) );\n \n   VERIFY( m.size()  == re.mark_count()+1 );\n   VERIFY( m.empty() == false );"}, {"sha": "f7bce8023d32026f5e8a7193990c679d97bbfdf2", "filename": "libstdc++-v3/testsuite/28_regex/algorithms/regex_search/ecma/assertion.cc", "status": "modified", "additions": 16, "deletions": 14, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6cb4308702d0333775a1da15f43bcfd949115aeb/libstdc%2B%2B-v3%2Ftestsuite%2F28_regex%2Falgorithms%2Fregex_search%2Fecma%2Fassertion.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6cb4308702d0333775a1da15f43bcfd949115aeb/libstdc%2B%2B-v3%2Ftestsuite%2F28_regex%2Falgorithms%2Fregex_search%2Fecma%2Fassertion.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F28_regex%2Falgorithms%2Fregex_search%2Fecma%2Fassertion.cc?ref=6cb4308702d0333775a1da15f43bcfd949115aeb", "patch": "@@ -25,29 +25,31 @@\n \n #include <regex>\n #include <testsuite_hooks.h>\n+#include <testsuite_regex.h>\n \n+using namespace __gnu_test;\n using namespace std;\n \n void\n test01()\n {\n   bool test __attribute__((unused)) = true;\n \n-  VERIFY(!regex_search(\"2123456\", regex(\"^1234\")));\n-  VERIFY(regex_search(\"123456\", regex(\"^1234\")));\n-  VERIFY(regex_search(\"123456\", regex(\"(5|^)1234\")));\n-  VERIFY(regex_search(\"5123456\", regex(\"(5|^)1234\")));\n-  VERIFY(!regex_search(\"1234562\", regex(\"3456$\")));\n-  VERIFY(regex_search(\"123456\", regex(\"3456$\")));\n-  VERIFY(!regex_search(\"123456\", regex(\"(?=1234)56\")));\n-  VERIFY(regex_search(\"123456\", regex(\"(?=1234)123456\")));\n-  VERIFY(regex_search(\"123456\", regex(\"(?!1234)56\")));\n-  VERIFY(!regex_search(\"123456\", regex(\"(?!1234)123456\")));\n+  VERIFY(!regex_search_debug(\"2123456\", regex(\"^1234\")));\n+  VERIFY(regex_search_debug(\"123456\", regex(\"^1234\")));\n+  VERIFY(regex_search_debug(\"123456\", regex(\"(5|^)1234\")));\n+  VERIFY(regex_search_debug(\"5123456\", regex(\"(5|^)1234\")));\n+  VERIFY(!regex_search_debug(\"1234562\", regex(\"3456$\")));\n+  VERIFY(regex_search_debug(\"123456\", regex(\"3456$\")));\n+  VERIFY(!regex_search_debug(\"123456\", regex(\"(?=1234)56\")));\n+  VERIFY(regex_search_debug(\"123456\", regex(\"(?=1234)123456\")));\n+  VERIFY(regex_search_debug(\"123456\", regex(\"(?!1234)56\")));\n+  VERIFY(!regex_search_debug(\"123456\", regex(\"(?!1234)123456\")));\n \n-  VERIFY(regex_search(\"a-\", regex(\"a\\\\b-\")));\n-  VERIFY(!regex_search(\"ab\", regex(\"a\\\\bb\")));\n-  VERIFY(!regex_search(\"a-\", regex(\"a\\\\B-\")));\n-  VERIFY(regex_search(\"ab\", regex(\"a\\\\Bb\")));\n+  VERIFY(regex_search_debug(\"a-\", regex(\"a\\\\b-\")));\n+  VERIFY(!regex_search_debug(\"ab\", regex(\"a\\\\bb\")));\n+  VERIFY(!regex_search_debug(\"a-\", regex(\"a\\\\B-\")));\n+  VERIFY(regex_search_debug(\"ab\", regex(\"a\\\\Bb\")));\n \n   string s(\"This is a regular expression\");\n   string sol[] ="}, {"sha": "490ab1c9159a5b465a5dd610f28666f837dc99c6", "filename": "libstdc++-v3/testsuite/28_regex/algorithms/regex_search/ecma/flags.cc", "status": "modified", "additions": 26, "deletions": 22, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6cb4308702d0333775a1da15f43bcfd949115aeb/libstdc%2B%2B-v3%2Ftestsuite%2F28_regex%2Falgorithms%2Fregex_search%2Fecma%2Fflags.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6cb4308702d0333775a1da15f43bcfd949115aeb/libstdc%2B%2B-v3%2Ftestsuite%2F28_regex%2Falgorithms%2Fregex_search%2Fecma%2Fflags.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F28_regex%2Falgorithms%2Fregex_search%2Fecma%2Fflags.cc?ref=6cb4308702d0333775a1da15f43bcfd949115aeb", "patch": "@@ -25,7 +25,9 @@\n \n #include <regex>\n #include <testsuite_hooks.h>\n+#include <testsuite_regex.h>\n \n+using namespace __gnu_test;\n using namespace std;\n \n void\n@@ -35,32 +37,34 @@ test01()\n \n   cmatch m;\n   regex re(\"((as)(df))\", regex_constants::ECMAScript | regex_constants::nosubs);\n-  VERIFY(regex_search(\"asdf\", m, re));\n+  VERIFY(regex_search_debug(\"asdf\", m, re));\n   VERIFY(m.size() == 1);\n   VERIFY(m[0].matched && string(m[0].first, m[0].second) == \"asdf\");\n \n-  VERIFY( regex_search(\"a\", regex(\"^a\")));\n-  VERIFY(!regex_search(\"a\", regex(\"^a\"), regex_constants::match_not_bol));\n-  VERIFY( regex_search(\"a\", regex(\"a$\")));\n-  VERIFY(!regex_search(\"a\", regex(\"a$\"), regex_constants::match_not_eol));\n-  VERIFY( regex_search(\"a\", regex(\"\\\\ba\")));\n-  VERIFY(!regex_search(\"a\", regex(\"\\\\ba\"), regex_constants::match_not_bow));\n-  VERIFY( regex_search(\"a\", regex(\"a\\\\b\")));\n-  VERIFY(!regex_search(\"a\", regex(\"a\\\\b\"), regex_constants::match_not_eow));\n-  VERIFY( regex_search(\"\", regex(\"\")));\n-  VERIFY(!regex_search(\"\", regex(\"\"), regex_constants::match_not_null));\n-  VERIFY( regex_search(\"\", regex(\"^$\")));\n-  VERIFY(!regex_search(\"\", regex(\"^$\"), regex_constants::match_not_null));\n-  VERIFY( regex_search(\"aaa\", m, regex(\"a*?\"),\n-\t\t       regex_constants::match_not_null));\n+  VERIFY( regex_search_debug(\"a\", regex(\"^a\")));\n+  VERIFY(!regex_search_debug(\"a\", regex(\"^a\"), regex_constants::match_not_bol));\n+  VERIFY( regex_search_debug(\"a\", regex(\"a$\")));\n+  VERIFY(!regex_search_debug(\"a\", regex(\"a$\"), regex_constants::match_not_eol));\n+  VERIFY( regex_search_debug(\"a\", regex(\"\\\\ba\")));\n+  VERIFY(!regex_search_debug(\"a\", regex(\"\\\\ba\"),\n+\t\t\t     regex_constants::match_not_bow));\n+  VERIFY( regex_search_debug(\"a\", regex(\"a\\\\b\")));\n+  VERIFY(!regex_search_debug(\"a\", regex(\"a\\\\b\"),\n+\t\t\t     regex_constants::match_not_eow));\n+  VERIFY( regex_search_debug(\"\", regex(\"\")));\n+  VERIFY(!regex_search_debug(\"\", regex(\"\"), regex_constants::match_not_null));\n+  VERIFY( regex_search_debug(\"\", regex(\"^$\")));\n+  VERIFY(!regex_search_debug(\"\", regex(\"^$\"), regex_constants::match_not_null));\n+  VERIFY( regex_search_debug(\"aaa\", m, regex(\"a*?\"),\n+\t\t\t     regex_constants::match_not_null));\n   VERIFY(m[0].matched && string(m[0].first, m[0].second) == \"a\");\n-  VERIFY( regex_search(\"asdf\", regex(\"sdf\")));\n-  VERIFY(!regex_search(\"asdf\", regex(\"sdf\"),\n-\t\t       regex_constants::match_continuous));\n-  VERIFY( regex_search(\" a\"+1, regex(\"\\\\ba\"),\n-\t\t       regex_constants::match_prev_avail));\n-  VERIFY( regex_search(\"ba\"+1, regex(\"\\\\Ba\"),\n-\t\t       regex_constants::match_prev_avail));\n+  VERIFY( regex_search_debug(\"asdf\", regex(\"sdf\")));\n+  VERIFY(!regex_search_debug(\"asdf\", regex(\"sdf\"),\n+\t\t\t     regex_constants::match_continuous));\n+  VERIFY( regex_search_debug(\" a\"+1, regex(\"\\\\ba\"),\n+\t\t\t     regex_constants::match_prev_avail));\n+  VERIFY( regex_search_debug(\"ba\"+1, regex(\"\\\\Ba\"),\n+\t\t\t     regex_constants::match_prev_avail));\n }\n \n int"}, {"sha": "107ced0edc8265f0e0ac6cbc3088219020c31cba", "filename": "libstdc++-v3/testsuite/28_regex/algorithms/regex_search/ecma/greedy.cc", "status": "modified", "additions": 13, "deletions": 11, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6cb4308702d0333775a1da15f43bcfd949115aeb/libstdc%2B%2B-v3%2Ftestsuite%2F28_regex%2Falgorithms%2Fregex_search%2Fecma%2Fgreedy.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6cb4308702d0333775a1da15f43bcfd949115aeb/libstdc%2B%2B-v3%2Ftestsuite%2F28_regex%2Falgorithms%2Fregex_search%2Fecma%2Fgreedy.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F28_regex%2Falgorithms%2Fregex_search%2Fecma%2Fgreedy.cc?ref=6cb4308702d0333775a1da15f43bcfd949115aeb", "patch": "@@ -25,7 +25,9 @@\n \n #include <regex>\n #include <testsuite_hooks.h>\n+#include <testsuite_regex.h>\n \n+using namespace __gnu_test;\n using namespace std;\n \n void\n@@ -35,30 +37,30 @@ test01()\n \n   cmatch m;\n #define TEST(i, s) VERIFY(m[i].matched && string(m[i].first, m[i].second) == s)\n-  VERIFY(regex_search(\"aaaa\", m, regex(\"a*\")));\n+  VERIFY(regex_search_debug(\"aaaa\", m, regex(\"a*\")));\n   TEST(0, \"aaaa\");\n-  VERIFY(regex_search(\"aaaa\", m, regex(\"a*?\")));\n+  VERIFY(regex_search_debug(\"aaaa\", m, regex(\"a*?\")));\n   TEST(0, \"\");\n-  VERIFY(regex_search(\"aaaa\", m, regex(\"a+\")));\n+  VERIFY(regex_search_debug(\"aaaa\", m, regex(\"a+\")));\n   TEST(0, \"aaaa\");\n-  VERIFY(regex_search(\"aaaa\", m, regex(\"a+?\")));\n+  VERIFY(regex_search_debug(\"aaaa\", m, regex(\"a+?\")));\n   TEST(0, \"a\");\n-  VERIFY(regex_search(\"a\", m, regex(\"a?\")));\n+  VERIFY(regex_search_debug(\"a\", m, regex(\"a?\")));\n   TEST(0, \"a\");\n-  VERIFY(regex_search(\"a\", m, regex(\"a??\")));\n+  VERIFY(regex_search_debug(\"a\", m, regex(\"a??\")));\n   TEST(0, \"\");\n-  VERIFY(regex_search(\"\", m, regex(\"a??\")));\n+  VERIFY(regex_search_debug(\"\", m, regex(\"a??\")));\n   TEST(0, \"\");\n-  VERIFY(regex_search(\"aaaa\", m, regex(\"(a+)(a+)\")));\n+  VERIFY(regex_search_debug(\"aaaa\", m, regex(\"(a+)(a+)\")));\n   TEST(1, \"aaa\");\n   TEST(2, \"a\");\n-  VERIFY(regex_search(\"aaaa\", m, regex(\"(a+?)(a+)\")));\n+  VERIFY(regex_search_debug(\"aaaa\", m, regex(\"(a+?)(a+)\")));\n   TEST(1, \"a\");\n   TEST(2, \"aaa\");\n-  VERIFY(regex_search(\"aaaa\", m, regex(\"(a+?)(a+)\")));\n+  VERIFY(regex_search_debug(\"aaaa\", m, regex(\"(a+?)(a+)\")));\n   TEST(1, \"a\");\n   TEST(2, \"aaa\");\n-  VERIFY(regex_search(\"aaaa\", m, regex(\"(a+?)(a+?)\")));\n+  VERIFY(regex_search_debug(\"aaaa\", m, regex(\"(a+?)(a+?)\")));\n   TEST(1, \"a\");\n   TEST(2, \"a\");\n }"}, {"sha": "c07e7efa7d4b181e6805a27a0defd6a728fe874e", "filename": "libstdc++-v3/testsuite/28_regex/algorithms/regex_search/ecma/string_01.cc", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6cb4308702d0333775a1da15f43bcfd949115aeb/libstdc%2B%2B-v3%2Ftestsuite%2F28_regex%2Falgorithms%2Fregex_search%2Fecma%2Fstring_01.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6cb4308702d0333775a1da15f43bcfd949115aeb/libstdc%2B%2B-v3%2Ftestsuite%2F28_regex%2Falgorithms%2Fregex_search%2Fecma%2Fstring_01.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F28_regex%2Falgorithms%2Fregex_search%2Fecma%2Fstring_01.cc?ref=6cb4308702d0333775a1da15f43bcfd949115aeb", "patch": "@@ -25,13 +25,17 @@\n \n #include <regex>\n #include <testsuite_hooks.h>\n+#include <testsuite_regex.h>\n+\n+using namespace __gnu_test;\n+using namespace std;\n \n void\n test01()\n {\n   bool test __attribute__((unused)) = true;\n \n-  VERIFY(std::regex_search(\"\", std::regex(\"\")));\n+  VERIFY(regex_search_debug(\"\", std::regex(\"\")));\n }\n \n int"}, {"sha": "659ffdcb13ba2ea938b82b221ab22fab8efcf298", "filename": "libstdc++-v3/testsuite/28_regex/match_results/format.cc", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6cb4308702d0333775a1da15f43bcfd949115aeb/libstdc%2B%2B-v3%2Ftestsuite%2F28_regex%2Fmatch_results%2Fformat.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6cb4308702d0333775a1da15f43bcfd949115aeb/libstdc%2B%2B-v3%2Ftestsuite%2F28_regex%2Fmatch_results%2Fformat.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F28_regex%2Fmatch_results%2Fformat.cc?ref=6cb4308702d0333775a1da15f43bcfd949115aeb", "patch": "@@ -25,17 +25,19 @@\n \n #include <regex>\n #include <testsuite_hooks.h>\n+#include <testsuite_regex.h>\n \n using namespace std;\n+using namespace __gnu_test;\n \n void\n test01()\n {\n   bool test __attribute__((unused)) = true;\n \n   cmatch m;\n-  VERIFY(regex_search(\"*** this is a string !!!\", m,\n-\t\t      regex(\"(\\\\w+) (\\\\w+) (\\\\w+) (\\\\w+)\")));\n+  VERIFY(regex_search_debug(\"*** this is a string !!!\", m,\n+\t\t\t    regex(\"(\\\\w+) (\\\\w+) (\\\\w+) (\\\\w+)\")));\n   VERIFY(m.format(\"$&|$`|$3|$4|$2|$1|$'$$$\")\n \t == \"this is a string|*** |a|string|is|this| !!!$$\");\n   VERIFY(m.format(\"&|\\\\3|\\\\4|\\\\2|\\\\1|\\\\\","}, {"sha": "17be78d9c1b9f6aaac5d7f728f28656503603538", "filename": "libstdc++-v3/testsuite/util/testsuite_regex.h", "status": "modified", "additions": 175, "deletions": 0, "changes": 175, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6cb4308702d0333775a1da15f43bcfd949115aeb/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Ftestsuite_regex.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6cb4308702d0333775a1da15f43bcfd949115aeb/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Ftestsuite_regex.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Ftestsuite_regex.h?ref=6cb4308702d0333775a1da15f43bcfd949115aeb", "patch": "@@ -31,9 +31,12 @@ namespace __gnu_test\n   // Test on a compilation of simple expressions, throw regex_error on error.\n   typedef std::regex\t\t\t\tregex_type;\n   typedef regex_type::flag_type\t\t\tflag_type;\n+  typedef std::regex_constants::match_flag_type\tmatch_flag_type;\n   typedef std::regex_constants::error_type\terror_type;\n   typedef std::size_t\t\t\t\tsize_type;\n   typedef std::string\t\t\t\tstring_type;\n+  using std::basic_regex;\n+  using std::match_results;\n \n   // Utilities\n   struct regex_expected_fail { };\n@@ -126,5 +129,177 @@ namespace __gnu_test\n       }\n   }\n \n+  // regex_match_debug behaves like regex_match, but will run *two* executors\n+  // (if there's no back-reference) and check if their results agree. If not,\n+  // an exception throws. One can use them just in the way of using regex_match.\n+  template<typename _Bi_iter, typename _Alloc,\n+\t   typename _Ch_type, typename _Rx_traits>\n+    bool\n+    regex_match_debug(_Bi_iter                                 __s,\n+\t\t      _Bi_iter                                 __e,\n+\t\t      match_results<_Bi_iter, _Alloc>&         __m,\n+\t\t      const basic_regex<_Ch_type, _Rx_traits>& __re,\n+\t\t      match_flag_type                          __flags\n+\t\t      = std::regex_constants::match_default)\n+    {\n+      using namespace std::__detail;\n+      auto __res1 = __regex_algo_impl<_Bi_iter, _Alloc, _Ch_type, _Rx_traits,\n+\t   _RegexExecutorPolicy::_S_auto, true>\n+\t(__s, __e, __m, __re, __flags);\n+      match_results<_Bi_iter, _Alloc> __mm;\n+      auto __res2 = __regex_algo_impl<_Bi_iter, _Alloc, _Ch_type, _Rx_traits,\n+\t   _RegexExecutorPolicy::_S_force_dfs, true>\n+\t(__s, __e, __mm, __re, __flags);\n+      if (__res1 == __res2 && __m == __mm)\n+\treturn __res1;\n+      throw(std::exception());\n+    }\n+\n+  // No match_results version\n+  template<typename _Bi_iter, typename _Ch_type, typename _Rx_traits>\n+    inline bool\n+    regex_match_debug(_Bi_iter                                 __first,\n+\t\t      _Bi_iter                                 __last,\n+\t\t      const basic_regex<_Ch_type, _Rx_traits>& __re,\n+\t\t      match_flag_type                          __flags\n+\t\t      = std::regex_constants::match_default)\n+    {\n+      match_results<_Bi_iter> __what;\n+      return regex_match_debug(__first, __last, __what, __re, __flags);\n+    }\n+\n+  // C-string version\n+  template<typename _Ch_type, typename _Alloc, typename _Rx_traits>\n+    inline bool\n+    regex_match_debug(const _Ch_type*                          __s,\n+\t\t      match_results<const _Ch_type*, _Alloc>&  __m,\n+\t\t      const basic_regex<_Ch_type, _Rx_traits>& __re,\n+\t\t      match_flag_type                          __f\n+\t\t      = std::regex_constants::match_default)\n+      { return regex_match_debug(__s, __s + _Rx_traits::length(__s),\n+\t\t\t\t __m, __re, __f); }\n+\n+  // C-string version without match_results\n+  template<typename _Ch_type, class _Rx_traits>\n+    inline bool\n+    regex_match_debug(const _Ch_type*                          __s,\n+\t\t      const basic_regex<_Ch_type, _Rx_traits>& __re,\n+\t\t      match_flag_type                          __f\n+\t\t      = std::regex_constants::match_default)\n+      { return regex_match_debug(__s, __s + _Rx_traits::length(__s),\n+\t\t\t\t __re, __f); }\n+\n+  // std::basic_string version\n+  template<typename _Ch_traits, typename _Ch_alloc,\n+           typename _Alloc, typename _Ch_type, typename _Rx_traits>\n+    inline bool\n+    regex_match_debug(const std::basic_string<_Ch_type, _Ch_traits,\n+\t\t\t_Ch_alloc>& __s,\n+\t\t      match_results<typename std::basic_string<_Ch_type,\n+\t\t\t_Ch_traits, _Ch_alloc>::const_iterator,\n+\t\t\t_Alloc>& __m,\n+\t\t      const basic_regex<_Ch_type, _Rx_traits>& __re,\n+\t\t      match_flag_type                          __flags\n+\t\t      = std::regex_constants::match_default)\n+      { return regex_match_debug(__s.begin(), __s.end(),\n+\t\t\t\t __m, __re, __flags); }\n+\n+  // std::basic_string version without match_results\n+  template<typename _Ch_traits, typename _Str_allocator,\n+           typename _Ch_type, typename _Rx_traits>\n+    inline bool\n+    regex_match_debug(const std::basic_string<_Ch_type, _Ch_traits,\n+\t\t      _Str_allocator>&                         __s,\n+\t\t      const basic_regex<_Ch_type, _Rx_traits>& __re,\n+\t\t      match_flag_type                          __flags\n+\t\t      = std::regex_constants::match_default)\n+    { return regex_match_debug(__s.begin(), __s.end(), __re, __flags); }\n+\n+  // regex_match_debug behaves like regex_match, but will run *two* executors\n+  // (if there's no back-reference) and check if their results agree. If not,\n+  // an exception throws. One can use them just in the way of using regex_match.\n+  template<typename _Bi_iter, typename _Alloc,\n+           typename _Ch_type, typename _Rx_traits>\n+    bool\n+    regex_search_debug(_Bi_iter                                 __s,\n+\t\t       _Bi_iter                                 __e,\n+\t\t       match_results<_Bi_iter, _Alloc>&         __m,\n+\t\t       const basic_regex<_Ch_type, _Rx_traits>& __re,\n+\t\t       match_flag_type   __flags\n+\t\t       = std::regex_constants::match_default)\n+    {\n+      using namespace std::__detail;\n+      auto __res1 = __regex_algo_impl<_Bi_iter, _Alloc, _Ch_type, _Rx_traits,\n+\t   _RegexExecutorPolicy::_S_auto, false>\n+        (__s, __e, __m, __re, __flags);\n+      match_results<_Bi_iter, _Alloc> __mm;\n+      auto __res2 = __regex_algo_impl<_Bi_iter, _Alloc, _Ch_type, _Rx_traits,\n+\t   _RegexExecutorPolicy::_S_force_dfs, false>\n+        (__s, __e, __mm, __re, __flags);\n+      if (__res1 == __res2 && __m == __mm)\n+        return __res1;\n+      throw(std::exception()); // Let test fail. Give it a name.\n+    }\n+\n+  // No match_results version\n+  template<typename _Bi_iter, typename _Ch_type, typename _Rx_traits>\n+    inline bool\n+    regex_search_debug(_Bi_iter                                 __first,\n+\t\t       _Bi_iter                                 __last,\n+\t\t       const basic_regex<_Ch_type, _Rx_traits>& __re,\n+\t\t       match_flag_type                          __flags\n+\t\t       = std::regex_constants::match_default)\n+    {\n+      match_results<_Bi_iter> __what;\n+      return regex_search_debug(__first, __last, __what, __re, __flags);\n+    }\n+\n+  // C-string version\n+  template<typename _Ch_type, class _Alloc, class _Rx_traits>\n+    inline bool\n+    regex_search_debug(const _Ch_type*                          __s,\n+\t\t       match_results<const _Ch_type*, _Alloc>&  __m,\n+\t\t       const basic_regex<_Ch_type, _Rx_traits>& __e,\n+\t\t       match_flag_type                          __f\n+\t\t       = std::regex_constants::match_default)\n+    { return regex_search_debug(__s, __s + _Rx_traits::length(__s),\n+\t\t\t\t__m, __e, __f); }\n+\n+  // C-string version without match_results\n+  template<typename _Ch_type, typename _Rx_traits>\n+    inline bool\n+    regex_search_debug(const _Ch_type*                          __s,\n+\t\t       const basic_regex<_Ch_type, _Rx_traits>& __e,\n+\t\t       match_flag_type                          __f\n+\t\t       = std::regex_constants::match_default)\n+    { return regex_search_debug(__s, __s + _Rx_traits::length(__s),\n+\t\t\t\t__e, __f); }\n+\n+  // std::basic_string version\n+  template<typename _Ch_traits, typename _Ch_alloc,\n+           typename _Alloc, typename _Ch_type,\n+           typename _Rx_traits>\n+    inline bool\n+    regex_search_debug(const std::basic_string<_Ch_type, _Ch_traits,\n+\t\t       _Ch_alloc>& __s,\n+\t\t       match_results<typename std::basic_string<_Ch_type,\n+\t\t       _Ch_traits, _Ch_alloc>::const_iterator, _Alloc>&\n+\t\t       __m,\n+\t\t       const basic_regex<_Ch_type, _Rx_traits>& __e,\n+\t\t       match_flag_type                          __f\n+\t\t       = std::regex_constants::match_default)\n+    { return regex_search_debug(__s.begin(), __s.end(), __m, __e, __f); }\n+\n+  // std::basic_string version without match_results\n+  template<typename _Ch_traits, typename _String_allocator,\n+           typename _Ch_type, typename _Rx_traits>\n+    inline bool\n+    regex_search_debug(const std::basic_string<_Ch_type, _Ch_traits,\n+\t\t       _String_allocator>&                      __s,\n+\t\t       const basic_regex<_Ch_type, _Rx_traits>& __e,\n+\t\t       match_flag_type                          __f\n+\t\t       = std::regex_constants::match_default)\n+    { return regex_search_debug(__s.begin(), __s.end(), __e, __f); }\n+\n } // namespace __gnu_test\n #endif"}]}