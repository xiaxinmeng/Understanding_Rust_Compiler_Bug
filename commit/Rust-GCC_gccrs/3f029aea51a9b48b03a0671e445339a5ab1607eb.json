{"sha": "3f029aea51a9b48b03a0671e445339a5ab1607eb", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2YwMjlhZWE1MWE5YjQ4YjAzYTA2NzFlNDQ1MzM5YTVhYjE2MDdlYg==", "commit": {"author": {"name": "Carl Love", "email": "cel@us.ibm.com", "date": "2020-06-15T22:44:19Z"}, "committer": {"name": "Carl Love", "email": "carll@us.ibm.com", "date": "2020-08-05T04:12:04Z"}, "message": "rs6000, Add vector replace builtin support GCC maintainers:\n\nThe following patch adds support for builtins vec_replace_elt and\nvec_replace_unaligned.\n\nThe patch has been compiled and tested on\n\n  powerpc64le-unknown-linux-gnu (Power 8 LE)\n  powerpc64le-unknown-linux-gnu (Power 9 LE)\n\nand mambo with no regression errors.\n\nPlease let me know if this patch is acceptable for the mainline\nbranch.  Thanks.\n\n                         Carl Love\n\n-------------------------------------------------------\n\ngcc/ChangeLog\n\n\t    2020-08-04 Carl Love  <cel@us.ibm.com>\n\n\t* config/rs6000/altivec.h: Add define for vec_replace_elt and\n\tvec_replace_unaligned.\n\t* config/rs6000/vsx.md (UNSPEC_REPLACE_ELT, UNSPEC_REPLACE_UN): New\n\tunspecs.\n\t(REPLACE_ELT): New mode iterator.\n\t(REPLACE_ELT_char, REPLACE_ELT_sh, REPLACE_ELT_max): New mode attributes.\n\t(vreplace_un_<mode>, vreplace_elt_<mode>_inst): New.\n\t* config/rs6000/rs6000-builtin.def (VREPLACE_ELT_V4SI,\n\tVREPLACE_ELT_UV4SI, VREPLACE_ELT_V4SF, VREPLACE_ELT_UV2DI,\n\tVREPLACE_ELT_V2DF, VREPLACE_UN_V4SI, VREPLACE_UN_UV4SI,\n\tVREPLACE_UN_V4SF, VREPLACE_UN_V2DI, VREPLACE_UN_UV2DI,\n\tVREPLACE_UN_V2DF, (REPLACE_ELT, REPLACE_UN, VREPLACE_ELT_V2DI): New builtin\n\tentries.\n\t* config/rs6000/rs6000-call.c (P10_BUILTIN_VEC_REPLACE_ELT,\n\tP10_BUILTIN_VEC_REPLACE_UN): New builtin argument definitions.\n\t(rs6000_expand_quaternop_builtin): Add 3rd argument checks for\n\tCODE_FOR_vreplace_elt_v4si, CODE_FOR_vreplace_elt_v4sf,\n\tCODE_FOR_vreplace_un_v4si, CODE_FOR_vreplace_un_v4sf.\n\t(builtin_function_type) [P10_BUILTIN_VREPLACE_ELT_UV4SI,\n\tP10_BUILTIN_VREPLACE_ELT_UV2DI, P10_BUILTIN_VREPLACE_UN_UV4SI,\n\tP10_BUILTIN_VREPLACE_UN_UV2DI]: New cases.\n\t* doc/extend.texi: Add description for vec_replace_elt and\n\tvec_replace_unaligned builtins.\n\ngcc/testsuite/ChangeLog\n\n\t    2020-08-04 Carl Love  <cel@us.ibm.com>\n\n\t* gcc.target/powerpc/vec-replace-word-runnable.c: New test.", "tree": {"sha": "77731cea7b4b2fe3d7d3debf82edd79315831262", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/77731cea7b4b2fe3d7d3debf82edd79315831262"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3f029aea51a9b48b03a0671e445339a5ab1607eb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3f029aea51a9b48b03a0671e445339a5ab1607eb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3f029aea51a9b48b03a0671e445339a5ab1607eb", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3f029aea51a9b48b03a0671e445339a5ab1607eb/comments", "author": {"login": "carlelove", "id": 86435705, "node_id": "MDQ6VXNlcjg2NDM1NzA1", "avatar_url": "https://avatars.githubusercontent.com/u/86435705?v=4", "gravatar_id": "", "url": "https://api.github.com/users/carlelove", "html_url": "https://github.com/carlelove", "followers_url": "https://api.github.com/users/carlelove/followers", "following_url": "https://api.github.com/users/carlelove/following{/other_user}", "gists_url": "https://api.github.com/users/carlelove/gists{/gist_id}", "starred_url": "https://api.github.com/users/carlelove/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/carlelove/subscriptions", "organizations_url": "https://api.github.com/users/carlelove/orgs", "repos_url": "https://api.github.com/users/carlelove/repos", "events_url": "https://api.github.com/users/carlelove/events{/privacy}", "received_events_url": "https://api.github.com/users/carlelove/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "530e90952574febf1fa51639b08bd6b3f188b0b0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/530e90952574febf1fa51639b08bd6b3f188b0b0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/530e90952574febf1fa51639b08bd6b3f188b0b0"}], "stats": {"total": 478, "additions": 478, "deletions": 0}, "files": [{"sha": "62fe0bfc6fba14cbed4929050e480d8b885029bd", "filename": "gcc/config/rs6000/altivec.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3f029aea51a9b48b03a0671e445339a5ab1607eb/gcc%2Fconfig%2Frs6000%2Faltivec.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3f029aea51a9b48b03a0671e445339a5ab1607eb/gcc%2Fconfig%2Frs6000%2Faltivec.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Faltivec.h?ref=3f029aea51a9b48b03a0671e445339a5ab1607eb", "patch": "@@ -705,6 +705,8 @@ __altivec_scalar_pred(vec_any_nle,\n #define vec_extracth(a, b, c)\t__builtin_vec_extracth (a, b, c)\n #define vec_insertl(a, b, c)   __builtin_vec_insertl (a, b, c)\n #define vec_inserth(a, b, c)   __builtin_vec_inserth (a, b, c)\n+#define vec_replace_elt(a, b, c)       __builtin_vec_replace_elt (a, b, c)\n+#define vec_replace_unaligned(a, b, c) __builtin_vec_replace_un (a, b, c)\n \n #define vec_gnb(a, b)\t__builtin_vec_gnb (a, b)\n #define vec_clrl(a, b)\t__builtin_vec_clrl (a, b)"}, {"sha": "6e11d38d1fa7b8d0037f8adeb58040f670f007e3", "filename": "gcc/config/rs6000/rs6000-builtin.def", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3f029aea51a9b48b03a0671e445339a5ab1607eb/gcc%2Fconfig%2Frs6000%2Frs6000-builtin.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3f029aea51a9b48b03a0671e445339a5ab1607eb/gcc%2Fconfig%2Frs6000%2Frs6000-builtin.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000-builtin.def?ref=3f029aea51a9b48b03a0671e445339a5ab1607eb", "patch": "@@ -2750,6 +2750,20 @@ BU_P10V_3 (VINSERTVPRBR, \"vinsvubvrx\", CONST, vinsertvr_v16qi)\n BU_P10V_3 (VINSERTVPRHR, \"vinsvuhvrx\", CONST, vinsertvr_v8hi)\n BU_P10V_3 (VINSERTVPRWR, \"vinsvuwvrx\", CONST, vinsertvr_v4si)\n \n+BU_P10V_3 (VREPLACE_ELT_V4SI, \"vreplace_v4si\", CONST, vreplace_elt_v4si)\n+BU_P10V_3 (VREPLACE_ELT_UV4SI, \"vreplace_uv4si\", CONST, vreplace_elt_v4si)\n+BU_P10V_3 (VREPLACE_ELT_V4SF, \"vreplace_v4sf\", CONST, vreplace_elt_v4sf)\n+BU_P10V_3 (VREPLACE_ELT_V2DI, \"vreplace_v2di\", CONST, vreplace_elt_v2di)\n+BU_P10V_3 (VREPLACE_ELT_UV2DI, \"vreplace_uv2di\", CONST, vreplace_elt_v2di)\n+BU_P10V_3 (VREPLACE_ELT_V2DF, \"vreplace_v2df\", CONST, vreplace_elt_v2df)\n+\n+BU_P10V_3 (VREPLACE_UN_V4SI, \"vreplace_un_v4si\", CONST, vreplace_un_v4si)\n+BU_P10V_3 (VREPLACE_UN_UV4SI, \"vreplace_un_uv4si\", CONST, vreplace_un_v4si)\n+BU_P10V_3 (VREPLACE_UN_V4SF, \"vreplace_un_v4sf\", CONST, vreplace_un_v4sf)\n+BU_P10V_3 (VREPLACE_UN_V2DI, \"vreplace_un_v2di\", CONST, vreplace_un_v2di)\n+BU_P10V_3 (VREPLACE_UN_UV2DI, \"vreplace_un_uv2di\", CONST, vreplace_un_v2di)\n+BU_P10V_3 (VREPLACE_UN_V2DF, \"vreplace_un_v2df\", CONST, vreplace_un_v2df)\n+\n BU_P10V_1 (VSTRIBR, \"vstribr\", CONST, vstrir_v16qi)\n BU_P10V_1 (VSTRIHR, \"vstrihr\", CONST, vstrir_v8hi)\n BU_P10V_1 (VSTRIBL, \"vstribl\", CONST, vstril_v16qi)\n@@ -2794,6 +2808,8 @@ BU_P10_OVERLOAD_3 (EXTRACTL, \"extractl\")\n BU_P10_OVERLOAD_3 (EXTRACTH, \"extracth\")\n BU_P10_OVERLOAD_3 (INSERTL, \"insertl\")\n BU_P10_OVERLOAD_3 (INSERTH, \"inserth\")\n+BU_P10_OVERLOAD_3 (REPLACE_ELT, \"replace_elt\")\n+BU_P10_OVERLOAD_3 (REPLACE_UN, \"replace_un\")\n \n BU_P10_OVERLOAD_1 (VSTRIR, \"strir\")\n BU_P10_OVERLOAD_1 (VSTRIL, \"stril\")"}, {"sha": "5dd1f666feb37f27526d6a45ee9c3b51640e24de", "filename": "gcc/config/rs6000/rs6000-call.c", "status": "modified", "additions": 61, "deletions": 0, "changes": 61, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3f029aea51a9b48b03a0671e445339a5ab1607eb/gcc%2Fconfig%2Frs6000%2Frs6000-call.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3f029aea51a9b48b03a0671e445339a5ab1607eb/gcc%2Fconfig%2Frs6000%2Frs6000-call.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000-call.c?ref=3f029aea51a9b48b03a0671e445339a5ab1607eb", "patch": "@@ -5639,6 +5639,36 @@ const struct altivec_builtin_types altivec_overloaded_builtins[] = {\n     RS6000_BTI_unsigned_V4SI, RS6000_BTI_unsigned_V4SI,\n     RS6000_BTI_unsigned_V4SI, RS6000_BTI_UINTQI },\n \n+  { P10_BUILTIN_VEC_REPLACE_ELT, P10_BUILTIN_VREPLACE_ELT_UV4SI,\n+    RS6000_BTI_unsigned_V4SI, RS6000_BTI_unsigned_V4SI,\n+    RS6000_BTI_UINTSI, RS6000_BTI_UINTQI },\n+  { P10_BUILTIN_VEC_REPLACE_ELT, P10_BUILTIN_VREPLACE_ELT_V4SI,\n+    RS6000_BTI_V4SI, RS6000_BTI_V4SI, RS6000_BTI_INTSI, RS6000_BTI_INTQI },\n+  { P10_BUILTIN_VEC_REPLACE_ELT, P10_BUILTIN_VREPLACE_ELT_V4SF,\n+    RS6000_BTI_V4SF, RS6000_BTI_V4SF, RS6000_BTI_float, RS6000_BTI_INTQI },\n+  { P10_BUILTIN_VEC_REPLACE_ELT, P10_BUILTIN_VREPLACE_ELT_UV2DI,\n+    RS6000_BTI_unsigned_V2DI, RS6000_BTI_unsigned_V2DI,\n+    RS6000_BTI_UINTDI, RS6000_BTI_UINTQI },\n+  { P10_BUILTIN_VEC_REPLACE_ELT, P10_BUILTIN_VREPLACE_ELT_V2DI,\n+    RS6000_BTI_V2DI, RS6000_BTI_V2DI, RS6000_BTI_INTDI, RS6000_BTI_INTQI },\n+  { P10_BUILTIN_VEC_REPLACE_ELT, P10_BUILTIN_VREPLACE_ELT_V2DF,\n+    RS6000_BTI_V2DF, RS6000_BTI_V2DF, RS6000_BTI_double, RS6000_BTI_INTQI },\n+\n+  { P10_BUILTIN_VEC_REPLACE_UN, P10_BUILTIN_VREPLACE_UN_UV4SI,\n+    RS6000_BTI_unsigned_V4SI, RS6000_BTI_unsigned_V4SI,\n+    RS6000_BTI_UINTSI, RS6000_BTI_UINTQI },\n+  { P10_BUILTIN_VEC_REPLACE_UN, P10_BUILTIN_VREPLACE_UN_V4SI,\n+    RS6000_BTI_V4SI, RS6000_BTI_V4SI, RS6000_BTI_INTSI, RS6000_BTI_INTQI },\n+  { P10_BUILTIN_VEC_REPLACE_UN, P10_BUILTIN_VREPLACE_UN_V4SF,\n+    RS6000_BTI_V4SF, RS6000_BTI_V4SF, RS6000_BTI_float, RS6000_BTI_INTQI },\n+  { P10_BUILTIN_VEC_REPLACE_UN, P10_BUILTIN_VREPLACE_UN_UV2DI,\n+    RS6000_BTI_unsigned_V2DI, RS6000_BTI_unsigned_V2DI,\n+    RS6000_BTI_UINTDI, RS6000_BTI_UINTQI },\n+  { P10_BUILTIN_VEC_REPLACE_UN, P10_BUILTIN_VREPLACE_UN_V2DI,\n+    RS6000_BTI_V2DI, RS6000_BTI_V2DI, RS6000_BTI_INTDI, RS6000_BTI_INTQI },\n+  { P10_BUILTIN_VEC_REPLACE_UN, P10_BUILTIN_VREPLACE_UN_V2DF,\n+    RS6000_BTI_V2DF, RS6000_BTI_V2DF, RS6000_BTI_double, RS6000_BTI_INTQI },\n+\n   { P10_BUILTIN_VEC_VSTRIL, P10_BUILTIN_VSTRIBL,\n     RS6000_BTI_unsigned_V16QI, RS6000_BTI_unsigned_V16QI, 0, 0 },\n   { P10_BUILTIN_VEC_VSTRIL, P10_BUILTIN_VSTRIBL,\n@@ -10066,6 +10096,33 @@ rs6000_expand_quaternop_builtin (enum insn_code icode, tree exp, rtx target)\n \t  return CONST0_RTX (tmode);\n \t}\n     }\n+  else if (icode == CODE_FOR_vreplace_elt_v4si\n+\t   || icode == CODE_FOR_vreplace_elt_v4sf)\n+   {\n+     /* Check whether the 3rd argument is an integer constant in the range\n+\t0 to 3 inclusive.  */\n+     STRIP_NOPS (arg2);\n+     if (TREE_CODE (arg2) != INTEGER_CST\n+\t || !IN_RANGE (TREE_INT_CST_LOW (arg2), 0, 3))\n+\t{\n+\t  error (\"argument 3 must be in the range 0 to 3\");\n+\t  return CONST0_RTX (tmode);\n+\t}\n+   }\n+\n+  else if (icode == CODE_FOR_vreplace_un_v4si\n+\t   || icode == CODE_FOR_vreplace_un_v4sf)\n+   {\n+     /* Check whether the 3rd argument is an integer constant in the range\n+\t0 to 12 inclusive.  */\n+     STRIP_NOPS (arg2);\n+     if (TREE_CODE (arg2) != INTEGER_CST\n+\t || !IN_RANGE(TREE_INT_CST_LOW (arg2), 0, 12))\n+\t{\n+\t  error (\"argument 3 must be in the range 0 to 12\");\n+\t  return CONST0_RTX (tmode);\n+\t}\n+   }\n \n   if (target == 0\n       || GET_MODE (target) != tmode\n@@ -13912,6 +13969,10 @@ builtin_function_type (machine_mode mode_ret, machine_mode mode_arg0,\n     case P10_BUILTIN_VINSERTVPRBL:\n     case P10_BUILTIN_VINSERTVPRHL:\n     case P10_BUILTIN_VINSERTVPRWL:\n+    case P10_BUILTIN_VREPLACE_ELT_UV4SI:\n+    case P10_BUILTIN_VREPLACE_ELT_UV2DI:\n+    case P10_BUILTIN_VREPLACE_UN_UV4SI:\n+    case P10_BUILTIN_VREPLACE_UN_UV2DI:\n       h.uns_p[0] = 1;\n       h.uns_p[1] = 1;\n       h.uns_p[2] = 1;"}, {"sha": "dd750210758a2431ded9d42224c05ed36a9daa2a", "filename": "gcc/config/rs6000/vsx.md", "status": "modified", "additions": 60, "deletions": 0, "changes": 60, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3f029aea51a9b48b03a0671e445339a5ab1607eb/gcc%2Fconfig%2Frs6000%2Fvsx.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3f029aea51a9b48b03a0671e445339a5ab1607eb/gcc%2Fconfig%2Frs6000%2Fvsx.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Fvsx.md?ref=3f029aea51a9b48b03a0671e445339a5ab1607eb", "patch": "@@ -359,6 +359,8 @@\n    UNSPEC_EXTRACTR\n    UNSPEC_INSERTL\n    UNSPEC_INSERTR\n+   UNSPEC_REPLACE_ELT\n+   UNSPEC_REPLACE_UN\n   ])\n \n (define_int_iterator XVCVBF16\t[UNSPEC_VSX_XVCVSPBF16\n@@ -370,6 +372,15 @@\n ;; Like VI, defined in vector.md, but add ISA 2.07 integer vector ops\n (define_mode_iterator VI2 [V4SI V8HI V16QI V2DI])\n \n+;; Vector extract_elt iterator/attr for 32-bit and 64-bit elements\n+(define_mode_iterator REPLACE_ELT [V4SI V4SF V2DI V2DF])\n+(define_mode_attr REPLACE_ELT_char [(V4SI \"w\") (V4SF \"w\")\n+\t\t\t\t    (V2DI  \"d\") (V2DF \"d\")])\n+(define_mode_attr REPLACE_ELT_sh [(V4SI \"2\") (V4SF \"2\")\n+\t\t\t\t  (V2DI  \"3\") (V2DF \"3\")])\n+(define_mode_attr REPLACE_ELT_max [(V4SI \"12\") (V4SF \"12\")\n+\t\t\t\t   (V2DI  \"8\") (V2DF \"8\")])\n+\n ;; VSX moves\n \n ;; The patterns for LE permuted loads and stores come before the general\n@@ -4022,6 +4033,55 @@\n  \"vins<wd>rx %0,%1,%2\"\n  [(set_attr \"type\" \"vecsimple\")])\n \n+(define_expand \"vreplace_elt_<mode>\"\n+  [(set (match_operand:REPLACE_ELT 0 \"register_operand\")\n+  (unspec:REPLACE_ELT [(match_operand:REPLACE_ELT 1 \"register_operand\")\n+\t\t       (match_operand:<VS_scalar> 2 \"register_operand\")\n+\t\t       (match_operand:QI 3 \"const_0_to_3_operand\")]\n+\t\t      UNSPEC_REPLACE_ELT))]\n+ \"TARGET_POWER10\"\n+{\n+   int index;\n+   /* Immediate value is the word index, convert to byte index and adjust for\n+      Endianness if needed.  */\n+   if (BYTES_BIG_ENDIAN)\n+     index = INTVAL (operands[3]) << <REPLACE_ELT_sh>;\n+\n+   else\n+     index = <REPLACE_ELT_max> - (INTVAL (operands[3]) << <REPLACE_ELT_sh>);\n+\n+   emit_insn (gen_vreplace_elt_<mode>_inst (operands[0], operands[1],\n+\t\t\t\t\t    operands[2],\n+\t\t\t\t\t    GEN_INT (index)));\n+   DONE;\n+ }\n+[(set_attr \"type\" \"vecsimple\")])\n+\n+(define_expand \"vreplace_un_<mode>\"\n+ [(set (match_operand:REPLACE_ELT 0 \"register_operand\")\n+ (unspec:REPLACE_ELT [(match_operand:REPLACE_ELT 1 \"register_operand\")\n+\t\t      (match_operand:<VS_scalar> 2 \"register_operand\")\n+\t\t      (match_operand:QI 3 \"const_0_to_12_operand\")]\n+\t\t     UNSPEC_REPLACE_UN))]\n+ \"TARGET_POWER10\"\n+{\n+   /* Immediate value is the byte index Big Endian numbering.  */\n+   emit_insn (gen_vreplace_elt_<mode>_inst (operands[0], operands[1],\n+\t\t\t\t\t    operands[2], operands[3]));\n+   DONE;\n+ }\n+[(set_attr \"type\" \"vecsimple\")])\n+\n+(define_insn \"vreplace_elt_<mode>_inst\"\n+ [(set (match_operand:REPLACE_ELT 0 \"register_operand\" \"=v\")\n+  (unspec:REPLACE_ELT [(match_operand:REPLACE_ELT 1 \"register_operand\" \"0\")\n+\t\t       (match_operand:<VS_scalar> 2 \"register_operand\" \"r\")\n+\t\t       (match_operand:QI 3 \"const_0_to_12_operand\" \"n\")]\n+\t\t      UNSPEC_REPLACE_ELT))]\n+ \"TARGET_POWER10\"\n+ \"vins<REPLACE_ELT_char> %0,%2,%3\"\n+ [(set_attr \"type\" \"vecsimple\")])\n+\n ;; VSX_EXTRACT optimizations\n ;; Optimize double d = (double) vec_extract (vi, <n>)\n ;; Get the element into the top position and use XVCVSWDP/XVCVUWDP"}, {"sha": "f9b57e4d616db8a63be5f10a81e52e8eebc93219", "filename": "gcc/doc/extend.texi", "status": "modified", "additions": 50, "deletions": 0, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3f029aea51a9b48b03a0671e445339a5ab1607eb/gcc%2Fdoc%2Fextend.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3f029aea51a9b48b03a0671e445339a5ab1607eb/gcc%2Fdoc%2Fextend.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fextend.texi?ref=3f029aea51a9b48b03a0671e445339a5ab1607eb", "patch": "@@ -21090,6 +21090,56 @@ Note that some fairly anomalous results can be generated if the byte index is\n not aligned on an element boundary for the sort of element being inserted.\n @findex vec_inserth\n \n+Vector Replace Element\n+@smallexample\n+@exdent vector signed int vec_replace_elt (vector signed int, signed int,\n+const int);\n+@exdent vector unsigned int vec_replace_elt (vector unsigned int,\n+unsigned int, const int);\n+@exdent vector float vec_replace_elt (vector float, float, const int);\n+@exdent vector signed long long vec_replace_elt (vector signed long long,\n+signed long long, const int);\n+@exdent vector unsigned long long vec_replace_elt (vector unsigned long long,\n+unsigned long long, const int);\n+@exdent vector double rec_replace_elt (vector double, double, const int);\n+@end smallexample\n+The third argument (constrained to [0,3]) identifies the natural-endian\n+element number of the first argument that will be replaced by the second\n+argument to produce the result.  The other elements of the first argument will\n+remain unchanged in the result.\n+\n+If it's desirable to insert a word at an unaligned position, use\n+vec_replace_unaligned instead.\n+\n+@findex vec_replace_element\n+\n+Vector Replace Unaligned\n+@smallexample\n+@exdent vector unsigned char vec_replace_unaligned (vector unsigned char,\n+signed int, const int);\n+@exdent vector unsigned char vec_replace_unaligned (vector unsigned char,\n+unsigned int, const int);\n+@exdent vector unsigned char vec_replace_unaligned (vector unsigned char,\n+float, const int);\n+@exdent vector unsigned char vec_replace_unaligned (vector unsigned char,\n+signed long long, const int);\n+@exdent vector unsigned char vec_replace_unaligned (vector unsigned char,\n+unsigned long long, const int);\n+@exdent vector unsigned char vec_replace_unaligned (vector unsigned char,\n+double, const int);\n+@end smallexample\n+\n+The second argument replaces a portion of the first argument to produce the\n+result, with the rest of the first argument unchanged in the result.  The\n+third argument identifies the byte index (using left-to-right, or big-endian\n+order) where the high-order byte of the second argument will be placed, with\n+the remaining bytes of the second argument placed naturally \"to the right\"\n+of the high-order byte.\n+\n+The programmer is responsible for understanding the endianness issues involved\n+with the first argument and the result.\n+@findex vec_replace_unaligned\n+\n @smallexample\n @exdent vector unsigned long long int\n @exdent vec_pext (vector unsigned long long int, vector unsigned long long int)"}, {"sha": "94af21064820002522471697a9962f556169d1ba", "filename": "gcc/testsuite/gcc.target/powerpc/vec-replace-word-runnable.c", "status": "added", "additions": 289, "deletions": 0, "changes": 289, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3f029aea51a9b48b03a0671e445339a5ab1607eb/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvec-replace-word-runnable.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3f029aea51a9b48b03a0671e445339a5ab1607eb/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvec-replace-word-runnable.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvec-replace-word-runnable.c?ref=3f029aea51a9b48b03a0671e445339a5ab1607eb", "patch": "@@ -0,0 +1,289 @@\n+/* { dg-do run } */\n+/* { dg-require-effective-target power10_hw } */\n+/* { dg-options \"-mdejagnu-cpu=power10\" } */\n+\n+#include <altivec.h>\n+\n+#define DEBUG 0\n+\n+#ifdef DEBUG\n+#include <stdio.h>\n+#endif\n+\n+extern void abort (void);\n+\n+int\n+main (int argc, char *argv [])\n+{\n+  int i;\n+  unsigned char ch;\n+  unsigned int index;\n+\n+  vector unsigned int vresult_uint;\n+  vector unsigned int expected_vresult_uint;\n+  vector unsigned int src_va_uint;\n+  vector unsigned int src_vb_uint;\n+  unsigned int src_a_uint;\n+\n+  vector int vresult_int;\n+  vector int expected_vresult_int;\n+  vector int src_va_int;\n+  vector int src_vb_int;\n+  int src_a_int;\n+\n+  vector unsigned long long int vresult_ullint;\n+  vector unsigned long long int expected_vresult_ullint;\n+  vector unsigned long long int src_va_ullint;\n+  vector unsigned long long int src_vb_ullint;\n+  unsigned int long long src_a_ullint;\n+\n+  vector long long int vresult_llint;\n+  vector long long int expected_vresult_llint;\n+  vector long long int src_va_llint;\n+  vector long long int src_vb_llint;\n+  long long int src_a_llint;\n+\n+  vector float vresult_float;\n+  vector float expected_vresult_float;\n+  vector float src_va_float;\n+  float src_a_float;\n+\n+  vector double vresult_double;\n+  vector double expected_vresult_double;\n+  vector double src_va_double;\n+  double src_a_double;\n+\n+  /* Vector replace 32-bit element */\n+  src_a_uint = 345;\n+  src_va_uint = (vector unsigned int) { 0, 1, 2, 3 };\n+  vresult_uint = (vector unsigned int) { 0, 0, 0, 0 };\n+  expected_vresult_uint = (vector unsigned int) { 0, 1, 345, 3 };\n+\t\t\t\t\t\t \n+  vresult_uint = vec_replace_elt (src_va_uint, src_a_uint, 2);\n+\n+  if (!vec_all_eq (vresult_uint,  expected_vresult_uint)) {\n+#if DEBUG\n+    printf(\"ERROR, vec_replace_elt (src_vb_uint, src_va_uint, index)\\n\");\n+    for(i = 0; i < 4; i++)\n+      printf(\" vresult_uint[%d] = %d, expected_vresult_uint[%d] = %d\\n\",\n+\t     i, vresult_uint[i], i, expected_vresult_uint[i]);\n+#else\n+    abort();\n+#endif\n+  }\n+\n+  src_a_int = 234;\n+  src_va_int = (vector int) { 0, 1, 2, 3 };\n+  vresult_int = (vector int) { 0, 0, 0, 0 };\n+  expected_vresult_int = (vector int) { 0, 234, 2, 3 };\n+\t\t\t\t\t\t \n+  vresult_int = vec_replace_elt (src_va_int, src_a_int, 1);\n+\n+  if (!vec_all_eq (vresult_int,  expected_vresult_int)) {\n+#if DEBUG\n+    printf(\"ERROR, vec_replace_elt (src_vb_int, src_va_int, index)\\n\");\n+    for(i = 0; i < 4; i++)\n+      printf(\" vresult_int[%d] = %d, expected_vresult_int[%d] = %d\\n\",\n+\t     i, vresult_int[i], i, expected_vresult_int[i]);\n+#else\n+    abort();\n+#endif\n+  }\n+  \n+  src_a_float = 34.0;\n+  src_va_float = (vector float) { 0.0, 10.0, 20.0, 30.0 };\n+  vresult_float = (vector float) { 0.0, 0.0, 0.0, 0.0 };\n+  expected_vresult_float = (vector float) { 0.0, 34.0, 20.0, 30.0 };\n+\t\t\t\t\t\t \n+  vresult_float = vec_replace_elt (src_va_float, src_a_float, 1);\n+\n+  if (!vec_all_eq (vresult_float,  expected_vresult_float)) {\n+#if DEBUG\n+    printf(\"ERROR, vec_replace_elt (src_vb_float, src_va_float, index)\\n\");\n+    for(i = 0; i < 4; i++)\n+      printf(\" vresult_float[%d] = %f, expected_vresult_float[%d] = %f\\n\",\n+\t     i, vresult_float[i], i, expected_vresult_float[i]);\n+#else\n+    abort();\n+#endif\n+  }\n+\n+  /* Vector replace 64-bit element */\n+  src_a_ullint = 456;\n+  src_va_ullint = (vector unsigned long long int) { 0, 1 };\n+  vresult_ullint = (vector unsigned long long int) { 0, 0 };\n+  expected_vresult_ullint = (vector unsigned long long int) { 0, 456 };\n+\t\t\t\t\t\t \n+  vresult_ullint = vec_replace_elt (src_va_ullint, src_a_ullint, 1);\n+\n+  if (!vec_all_eq (vresult_ullint,  expected_vresult_ullint)) {\n+#if DEBUG\n+    printf(\"ERROR, vec_replace_elt (src_vb_ullint, src_va_ullint, index)\\n\");\n+    for(i = 0; i < 2; i++)\n+      printf(\" vresult_ullint[%d] = %d, expected_vresult_ullint[%d] = %d\\n\",\n+\t     i, vresult_ullint[i], i, expected_vresult_ullint[i]);\n+#else\n+    abort();\n+#endif\n+  }\n+\n+  src_a_llint = 678;\n+  src_va_llint = (vector long long int) { 0, 1 };\n+  vresult_llint = (vector long long int) { 0, 0 };\n+  expected_vresult_llint = (vector long long int) { 0, 678 };\n+\t\t\t\t\t\t \n+  vresult_llint = vec_replace_elt (src_va_llint, src_a_llint, 1);\n+\n+  if (!vec_all_eq (vresult_llint,  expected_vresult_llint)) {\n+#if DEBUG\n+    printf(\"ERROR, vec_replace_elt (src_vb_llint, src_va_llint, index)\\n\");\n+    for(i = 0; i < 2; i++)\n+      printf(\" vresult_llint[%d] = %d, expected_vresult_llint[%d] = %d\\n\",\n+\t     i, vresult_llint[i], i, expected_vresult_llint[i]);\n+#else\n+    abort();\n+#endif\n+  }\n+  \n+  src_a_double = 678.0;\n+  src_va_double = (vector double) { 0.0, 50.0 };\n+  vresult_double = (vector double) { 0.0, 0.0 };\n+  expected_vresult_double = (vector double) { 0.0, 678.0 };\n+\t\t\t\t\t\t \n+  vresult_double = vec_replace_elt (src_va_double, src_a_double, 1);\n+\n+  if (!vec_all_eq (vresult_double,  expected_vresult_double)) {\n+#if DEBUG\n+    printf(\"ERROR, vec_replace_elt (src_vb_double, src_va_double, index)\\n\");\n+    for(i = 0; i < 2; i++)\n+      printf(\" vresult_double[%d] = %f, expected_vresult_double[%d] = %f\\n\",\n+\t     i, vresult_double[i], i, expected_vresult_double[i]);\n+#else\n+    abort();\n+#endif\n+  }\n+\n+\n+  /* Vector replace 32-bit element, unaligned */\n+  src_a_uint = 345;\n+  src_va_uint = (vector unsigned int) { 1, 2, 0, 0 };\n+  vresult_uint = (vector unsigned int) { 0, 0, 0, 0 };\n+  /* Byte index 7 will overwrite part of elements 2 and 3 */\n+  expected_vresult_uint = (vector unsigned int) { 1, 2, 345*256, 0 };\n+\t\t\t\t\t\t \n+  vresult_uint = vec_replace_unaligned (src_va_uint, src_a_uint, 3);\n+\n+  if (!vec_all_eq (vresult_uint,  expected_vresult_uint)) {\n+#if DEBUG\n+    printf(\"ERROR, vec_replace_unaligned (src_vb_uint, src_va_uint, index)\\n\");\n+    for(i = 0; i < 4; i++)\n+      printf(\" vresult_uint[%d] = %d, expected_vresult_uint[%d] = %d\\n\",\n+\t     i, vresult_uint[i], i, expected_vresult_uint[i]);\n+#else\n+    abort();\n+#endif\n+  }\n+\n+  src_a_int = 234;\n+  src_va_int = (vector int) { 1, 0, 3, 4 };\n+  vresult_int = (vector int) { 0, 0, 0, 0 };\n+  /* Byte index 7 will over write part of elements 1 and 2 */\n+  expected_vresult_int = (vector int) { 1, 234*256, 0, 4 };\n+\t\t\t\t\t\t \n+  vresult_int = vec_replace_unaligned (src_va_int, src_a_int, 7);\n+\n+  if (!vec_all_eq (vresult_int,  expected_vresult_int)) {\n+#if DEBUG\n+    printf(\"ERROR, vec_replace_unaligned (src_vb_int, src_va_int, index)\\n\");\n+    for(i = 0; i < 4; i++)\n+      printf(\" vresult_int[%d] = %d, expected_vresult_int[%d] = %d\\n\",\n+\t     i, vresult_int[i], i, expected_vresult_int[i]);\n+#else\n+    abort();\n+#endif\n+  }\n+\n+  src_a_float = 34.0;\n+  src_va_float = (vector float) { 0.0, 10.0, 20.0, 30.0 };\n+  vresult_float = (vector float) { 0.0, 0.0, 0.0, 0.0 };\n+  expected_vresult_float = (vector float) { 0.0, 34.0, 20.0, 30.0 };\n+\t\t\t\t\t\t \n+  vresult_float = vec_replace_unaligned (src_va_float, src_a_float, 8);\n+\n+  if (!vec_all_eq (vresult_float,  expected_vresult_float)) {\n+#if DEBUG\n+    printf(\"ERROR, vec_replace_unaligned (src_vb_float, src_va_float, index)\\n\");\n+    for(i = 0; i < 4; i++)\n+      printf(\" vresult_float[%d] = %f, expected_vresult_float[%d] = %f\\n\",\n+\t     i, vresult_float[i], i, expected_vresult_float[i]);\n+#else\n+    abort();\n+#endif\n+  }\n+\n+  /* Vector replace 64-bit element, unaligned  */\n+  src_a_ullint = 456;\n+  src_va_ullint = (vector unsigned long long int) { 0, 0x222 };\n+  vresult_ullint = (vector unsigned long long int) { 0, 0 };\n+  expected_vresult_ullint = (vector unsigned long long int) { 456*256,\n+\t\t\t\t\t\t\t      0x200 };\n+\t\t\t\t\t\t \n+  /* Byte index 7 will over write least significant byte of  element 0  */\n+  vresult_ullint = vec_replace_unaligned (src_va_ullint, src_a_ullint, 7);\n+\n+  if (!vec_all_eq (vresult_ullint,  expected_vresult_ullint)) {\n+#if DEBUG\n+    printf(\"ERROR, vec_replace_unaligned (src_vb_ullint, src_va_ullint, index)\\n\");\n+    for(i = 0; i < 2; i++)\n+      printf(\" vresult_ullint[%d] = %d, expected_vresult_ullint[%d] = %d\\n\",\n+\t     i, vresult_ullint[i], i, expected_vresult_ullint[i]);\n+#else\n+    abort();\n+#endif\n+  }\n+\n+  src_a_llint = 678;\n+  src_va_llint = (vector long long int) { 0, 0x101 };\n+  vresult_llint = (vector long long int) { 0, 0 };\n+  /* Byte index 7 will over write least significant byte of  element 0  */\n+  expected_vresult_llint = (vector long long int) { 678*256, 0x100 };\n+\t\t\t\t\t\t \n+  vresult_llint = vec_replace_unaligned (src_va_llint, src_a_llint, 7);\n+\n+  if (!vec_all_eq (vresult_llint,  expected_vresult_llint)) {\n+#if DEBUG\n+    printf(\"ERROR, vec_replace_unaligned (src_vb_llint, src_va_llint, index)\\n\");\n+    for(i = 0; i < 2; i++)\n+      printf(\" vresult_llint[%d] = %d, expected_vresult_llint[%d] = %d\\n\",\n+\t     i, vresult_llint[i], i, expected_vresult_llint[i]);\n+#else\n+    abort();\n+#endif\n+  }\n+  \n+  src_a_double = 678.0;\n+  src_va_double = (vector double) { 0.0, 50.0 };\n+  vresult_double = (vector double) { 0.0, 0.0 };\n+  expected_vresult_double = (vector double) { 0.0, 678.0 };\n+\t\t\t\t\t\t \n+  vresult_double = vec_replace_unaligned (src_va_double, src_a_double, 0);\n+\n+  if (!vec_all_eq (vresult_double,  expected_vresult_double)) {\n+#if DEBUG\n+    printf(\"ERROR, vec_replace_unaligned (src_vb_double, src_va_double, index)\\\n+n\");\n+    for(i = 0; i < 2; i++)\n+      printf(\" vresult_double[%d] = %f, expected_vresult_double[%d] = %f\\n\",\n+\t     i, vresult_double[i], i, expected_vresult_double[i]);\n+#else\n+    abort();\n+#endif\n+  }\n+    \n+  return 0;\n+}\n+\n+/* { dg-final { scan-assembler-times {\\mvinsw\\M} 6 } } */\n+/* { dg-final { scan-assembler-times {\\mvinsd\\M} 6 } } */\n+\n+"}]}