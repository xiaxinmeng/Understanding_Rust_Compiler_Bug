{"sha": "cbeeadff4c041c09a6335105d596019b6d583880", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Y2JlZWFkZmY0YzA0MWMwOWE2MzM1MTA1ZDU5NjAxOWI2ZDU4Mzg4MA==", "commit": {"author": {"name": "Aldy Hernandez", "email": "aldyh@redhat.com", "date": "2021-09-05T07:41:50Z"}, "committer": {"name": "Aldy Hernandez", "email": "aldyh@redhat.com", "date": "2021-09-05T09:46:22Z"}, "message": "Clean up registering of paths in backwards threader.\n\nAll callers to maybe_register_path() call find_taken_edge() beforehand\nand pass the edge as an argument.  There's no reason to repeat this\nat each call site.\n\nThis is a clean-up in preparation for some other enhancements to the\nbackwards threader.\n\nTested on x86-64 Linux.\n\ngcc/ChangeLog:\n\n\t* tree-ssa-threadbackward.c (back_threader::maybe_register_path):\n\tRemove argument and call find_taken_edge.\n\t(back_threader::resolve_phi): Do not calculate taken edge before\n\tcalling maybe_register_path.\n\t(back_threader::find_paths_to_names): Same.", "tree": {"sha": "a49eff0daaa1750081150b70b8d6d364e4846d0c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a49eff0daaa1750081150b70b8d6d364e4846d0c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/cbeeadff4c041c09a6335105d596019b6d583880", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cbeeadff4c041c09a6335105d596019b6d583880", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cbeeadff4c041c09a6335105d596019b6d583880", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cbeeadff4c041c09a6335105d596019b6d583880/comments", "author": {"login": "aldyh", "id": 12937877, "node_id": "MDQ6VXNlcjEyOTM3ODc3", "avatar_url": "https://avatars.githubusercontent.com/u/12937877?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aldyh", "html_url": "https://github.com/aldyh", "followers_url": "https://api.github.com/users/aldyh/followers", "following_url": "https://api.github.com/users/aldyh/following{/other_user}", "gists_url": "https://api.github.com/users/aldyh/gists{/gist_id}", "starred_url": "https://api.github.com/users/aldyh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aldyh/subscriptions", "organizations_url": "https://api.github.com/users/aldyh/orgs", "repos_url": "https://api.github.com/users/aldyh/repos", "events_url": "https://api.github.com/users/aldyh/events{/privacy}", "received_events_url": "https://api.github.com/users/aldyh/received_events", "type": "User", "site_admin": false}, "committer": {"login": "aldyh", "id": 12937877, "node_id": "MDQ6VXNlcjEyOTM3ODc3", "avatar_url": "https://avatars.githubusercontent.com/u/12937877?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aldyh", "html_url": "https://github.com/aldyh", "followers_url": "https://api.github.com/users/aldyh/followers", "following_url": "https://api.github.com/users/aldyh/following{/other_user}", "gists_url": "https://api.github.com/users/aldyh/gists{/gist_id}", "starred_url": "https://api.github.com/users/aldyh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aldyh/subscriptions", "organizations_url": "https://api.github.com/users/aldyh/orgs", "repos_url": "https://api.github.com/users/aldyh/repos", "events_url": "https://api.github.com/users/aldyh/events{/privacy}", "received_events_url": "https://api.github.com/users/aldyh/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b27416a7a91b7e6b6b018411ac85cad556ff9903", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b27416a7a91b7e6b6b018411ac85cad556ff9903", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b27416a7a91b7e6b6b018411ac85cad556ff9903"}], "stats": {"total": 44, "additions": 23, "deletions": 21}, "files": [{"sha": "6827d008fb103ad248529df3ad55a47ca3d37e5f", "filename": "gcc/tree-ssa-threadbackward.c", "status": "modified", "additions": 23, "deletions": 21, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cbeeadff4c041c09a6335105d596019b6d583880/gcc%2Ftree-ssa-threadbackward.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cbeeadff4c041c09a6335105d596019b6d583880/gcc%2Ftree-ssa-threadbackward.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-threadbackward.c?ref=cbeeadff4c041c09a6335105d596019b6d583880", "patch": "@@ -83,7 +83,7 @@ class back_threader\n   bool thread_through_all_blocks (bool may_peel_loop_headers);\n private:\n   void find_paths (basic_block bb, tree name);\n-  void maybe_register_path (edge taken_edge);\n+  edge maybe_register_path ();\n   bool find_paths_to_names (basic_block bb, bitmap imports);\n   bool resolve_def (tree name, bitmap interesting, vec<tree> &worklist);\n   bool resolve_phi (gphi *phi, bitmap imports);\n@@ -134,22 +134,31 @@ back_threader::~back_threader ()\n }\n \n // Register the current path for jump threading if it's profitable to\n-// do so.  TAKEN_EDGE is the known edge out of the path.\n+// do so.\n+//\n+// Return the known taken edge out of the path, even if the path was\n+// not registered, or NULL if the taken edge could not be determined.\n \n-void\n-back_threader::maybe_register_path (edge taken_edge)\n+edge\n+back_threader::maybe_register_path ()\n {\n-  bool irreducible = false;\n-  bool profitable\n-    = m_profit.profitable_path_p (m_path, m_name, taken_edge, &irreducible);\n+  edge taken_edge = find_taken_edge (m_path);\n \n-  if (profitable)\n+  if (taken_edge && taken_edge != UNREACHABLE_EDGE)\n     {\n-      m_registry.register_path (m_path, taken_edge);\n+      bool irreducible = false;\n+      bool profitable\n+\t= m_profit.profitable_path_p (m_path, m_name, taken_edge, &irreducible);\n+\n+      if (profitable)\n+\t{\n+\t  m_registry.register_path (m_path, taken_edge);\n \n-      if (irreducible)\n-\tvect_free_loop_info_assumptions (m_path[0]->loop_father);\n+\t  if (irreducible)\n+\t    vect_free_loop_info_assumptions (m_path[0]->loop_father);\n+\t}\n     }\n+  return taken_edge;\n }\n \n // Return the known taken edge out of a path.  If the path can be\n@@ -295,12 +304,9 @@ back_threader::resolve_phi (gphi *phi, bitmap interesting)\n       else if (TREE_CODE (arg) == INTEGER_CST)\n \t{\n \t  m_path.safe_push (e->src);\n-\t  edge taken_edge = find_taken_edge (m_path);\n+\t  edge taken_edge = maybe_register_path ();\n \t  if (taken_edge && taken_edge != UNREACHABLE_EDGE)\n-\t    {\n-\t      maybe_register_path (taken_edge);\n-\t      done = true;\n-\t    }\n+\t    done = true;\n \t  m_path.pop ();\n \t}\n     }\n@@ -388,12 +394,8 @@ back_threader::find_paths_to_names (basic_block bb, bitmap interesting)\n \t   || bitmap_bit_p (m_ranger.gori ().exports (bb), i))\n \t  && m_path.length () > 1)\n \t{\n-\t  edge taken_edge = find_taken_edge (m_path);\n-\t  if (taken_edge)\n+\t  if (maybe_register_path ())\n \t    {\n-\t      if (taken_edge != UNREACHABLE_EDGE)\n-\t\tmaybe_register_path (taken_edge);\n-\n \t      done = true;\n \t      goto leave_bb;\n \t    }"}]}