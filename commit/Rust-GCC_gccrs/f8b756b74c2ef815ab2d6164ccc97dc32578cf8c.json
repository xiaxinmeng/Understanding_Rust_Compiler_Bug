{"sha": "f8b756b74c2ef815ab2d6164ccc97dc32578cf8c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjhiNzU2Yjc0YzJlZjgxNWFiMmQ2MTY0Y2NjOTdkYzMyNTc4Y2Y4Yw==", "commit": {"author": {"name": "Tejas Belagod", "email": "tejas.belagod@arm.com", "date": "2014-11-20T13:58:23Z"}, "committer": {"name": "Tejas Belagod", "email": "belagod@gcc.gnu.org", "date": "2014-11-20T13:58:23Z"}, "message": "aarch64-protos.h (aarch64_classify_symbol): Fixup prototype.\n\n2014-11-20  Tejas Belagod  <tejas.belagod@arm.com>\n\ngcc/\n\t* config/aarch64/aarch64-protos.h (aarch64_classify_symbol):\n\tFixup prototype.\n\t* config/aarch64/aarch64.c (aarch64_expand_mov_immediate,\n\taarch64_cannot_force_const_mem, aarch64_classify_address,\n\taarch64_classify_symbolic_expression): Fixup call to\n\taarch64_classify_symbol.\n\t(aarch64_classify_symbol): Add range-checking for\n\tsymbol + offset addressing for tiny and small models.\n\ntestsuite/\n         * gcc.target/aarch64/symbol-range.c: New.\n         * gcc.target/aarch64/symbol-range-tiny.c: New.\n\nFrom-SVN: r217852", "tree": {"sha": "9ea2abe70a6cbe692f694d574b7bd7fd6257181d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9ea2abe70a6cbe692f694d574b7bd7fd6257181d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f8b756b74c2ef815ab2d6164ccc97dc32578cf8c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f8b756b74c2ef815ab2d6164ccc97dc32578cf8c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f8b756b74c2ef815ab2d6164ccc97dc32578cf8c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f8b756b74c2ef815ab2d6164ccc97dc32578cf8c/comments", "author": {"login": "tejas-belagod-arm", "id": 92718852, "node_id": "U_kgDOBYbHBA", "avatar_url": "https://avatars.githubusercontent.com/u/92718852?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tejas-belagod-arm", "html_url": "https://github.com/tejas-belagod-arm", "followers_url": "https://api.github.com/users/tejas-belagod-arm/followers", "following_url": "https://api.github.com/users/tejas-belagod-arm/following{/other_user}", "gists_url": "https://api.github.com/users/tejas-belagod-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/tejas-belagod-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tejas-belagod-arm/subscriptions", "organizations_url": "https://api.github.com/users/tejas-belagod-arm/orgs", "repos_url": "https://api.github.com/users/tejas-belagod-arm/repos", "events_url": "https://api.github.com/users/tejas-belagod-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/tejas-belagod-arm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "1b6b13f3eeae79e4ba9b0888f623bdf30467ad46", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1b6b13f3eeae79e4ba9b0888f623bdf30467ad46", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1b6b13f3eeae79e4ba9b0888f623bdf30467ad46"}], "stats": {"total": 70, "additions": 62, "deletions": 8}, "files": [{"sha": "9aaac254e9da540ed58462c3f537af9044530fea", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f8b756b74c2ef815ab2d6164ccc97dc32578cf8c/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f8b756b74c2ef815ab2d6164ccc97dc32578cf8c/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=f8b756b74c2ef815ab2d6164ccc97dc32578cf8c", "patch": "@@ -1,3 +1,14 @@\n+2014-11-20  Tejas Belagod  <tejas.belagod@arm.com>\n+\n+\t* config/aarch64/aarch64-protos.h (aarch64_classify_symbol):\n+\tFixup prototype.\n+\t* config/aarch64/aarch64.c (aarch64_expand_mov_immediate,\n+\taarch64_cannot_force_const_mem, aarch64_classify_address,\n+\taarch64_classify_symbolic_expression): Fixup call to\n+\taarch64_classify_symbol.\n+\t(aarch64_classify_symbol): Add range-checking for\n+\tsymbol + offset addressing for tiny and small models.\n+\n 2014-11-20  Richard Biener  <rguenther@suse.de>\n \n \tPR middle-end/63962"}, {"sha": "8ef6401ab3cc4d0f33c3bad6e97f7a228b9560fb", "filename": "gcc/config/aarch64/aarch64-protos.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f8b756b74c2ef815ab2d6164ccc97dc32578cf8c/gcc%2Fconfig%2Faarch64%2Faarch64-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f8b756b74c2ef815ab2d6164ccc97dc32578cf8c/gcc%2Fconfig%2Faarch64%2Faarch64-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-protos.h?ref=f8b756b74c2ef815ab2d6164ccc97dc32578cf8c", "patch": "@@ -218,7 +218,7 @@ const char *aarch64_mangle_builtin_type (const_tree);\n const char *aarch64_output_casesi (rtx *);\n const char *aarch64_rewrite_selected_cpu (const char *name);\n \n-enum aarch64_symbol_type aarch64_classify_symbol (rtx,\n+enum aarch64_symbol_type aarch64_classify_symbol (rtx, rtx,\n \t\t\t\t\t\t  enum aarch64_symbol_context);\n enum aarch64_symbol_type aarch64_classify_tls_symbol (rtx);\n enum reg_class aarch64_regno_regclass (unsigned);"}, {"sha": "2d8f48d11990e2cbc91cbda8015a51bad4089b4e", "filename": "gcc/config/aarch64/aarch64.c", "status": "modified", "additions": 20, "deletions": 7, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f8b756b74c2ef815ab2d6164ccc97dc32578cf8c/gcc%2Fconfig%2Faarch64%2Faarch64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f8b756b74c2ef815ab2d6164ccc97dc32578cf8c/gcc%2Fconfig%2Faarch64%2Faarch64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64.c?ref=f8b756b74c2ef815ab2d6164ccc97dc32578cf8c", "patch": "@@ -1339,7 +1339,7 @@ aarch64_expand_mov_immediate (rtx dest, rtx imm)\n \t before we start classifying the symbol.  */\n       split_const (imm, &base, &offset);\n \n-      sty = aarch64_classify_symbol (base, SYMBOL_CONTEXT_ADR);\n+      sty = aarch64_classify_symbol (base, offset, SYMBOL_CONTEXT_ADR);\n       switch (sty)\n \t{\n \tcase SYMBOL_FORCE_TO_MEM:\n@@ -3024,7 +3024,7 @@ aarch64_cannot_force_const_mem (machine_mode mode ATTRIBUTE_UNUSED, rtx x)\n   split_const (x, &base, &offset);\n   if (GET_CODE (base) == SYMBOL_REF || GET_CODE (base) == LABEL_REF)\n     {\n-      if (aarch64_classify_symbol (base, SYMBOL_CONTEXT_ADR)\n+      if (aarch64_classify_symbol (base, offset, SYMBOL_CONTEXT_ADR)\n \t  != SYMBOL_FORCE_TO_MEM)\n \treturn true;\n       else\n@@ -3438,7 +3438,7 @@ aarch64_classify_address (struct aarch64_address_info *info,\n \t  rtx sym, offs;\n \t  split_const (info->offset, &sym, &offs);\n \t  if (GET_CODE (sym) == SYMBOL_REF\n-\t      && (aarch64_classify_symbol (sym, SYMBOL_CONTEXT_MEM)\n+\t      && (aarch64_classify_symbol (sym, offs, SYMBOL_CONTEXT_MEM)\n \t\t  == SYMBOL_SMALL_ABSOLUTE))\n \t    {\n \t      /* The symbol and offset must be aligned to the access size.  */\n@@ -3495,7 +3495,7 @@ aarch64_classify_symbolic_expression (rtx x,\n   rtx offset;\n \n   split_const (x, &x, &offset);\n-  return aarch64_classify_symbol (x, context);\n+  return aarch64_classify_symbol (x, offset, context);\n }\n \n \n@@ -6834,7 +6834,7 @@ aarch64_classify_tls_symbol (rtx x)\n    LABEL_REF X in context CONTEXT.  */\n \n enum aarch64_symbol_type\n-aarch64_classify_symbol (rtx x,\n+aarch64_classify_symbol (rtx x, rtx offset,\n \t\t\t enum aarch64_symbol_context context ATTRIBUTE_UNUSED)\n {\n   if (GET_CODE (x) == LABEL_REF)\n@@ -6868,12 +6868,25 @@ aarch64_classify_symbol (rtx x,\n       switch (aarch64_cmodel)\n \t{\n \tcase AARCH64_CMODEL_TINY:\n-\t  if (SYMBOL_REF_WEAK (x))\n+\t  /* When we retreive symbol + offset address, we have to make sure\n+\t     the offset does not cause overflow of the final address.  But\n+\t     we have no way of knowing the address of symbol at compile time\n+\t     so we can't accurately say if the distance between the PC and\n+\t     symbol + offset is outside the addressible range of +/-1M in the\n+\t     TINY code model.  So we rely on images not being greater than\n+\t     1M and cap the offset at 1M and anything beyond 1M will have to\n+\t     be loaded using an alternative mechanism.  */\n+\t  if (SYMBOL_REF_WEAK (x)\n+\t      || INTVAL (offset) < -1048575 || INTVAL (offset) > 1048575)\n \t    return SYMBOL_FORCE_TO_MEM;\n \t  return SYMBOL_TINY_ABSOLUTE;\n \n \tcase AARCH64_CMODEL_SMALL:\n-\t  if (SYMBOL_REF_WEAK (x))\n+\t  /* Same reasoning as the tiny code model, but the offset cap here is\n+\t     4G.  */\n+\t  if (SYMBOL_REF_WEAK (x)\n+\t      || INTVAL (offset) < (HOST_WIDE_INT) -4294967263\n+\t      || INTVAL (offset) > (HOST_WIDE_INT) 4294967264)\n \t    return SYMBOL_FORCE_TO_MEM;\n \t  return SYMBOL_SMALL_ABSOLUTE;\n "}, {"sha": "61f8a495a42d8978293b3315a7960f5010208be1", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f8b756b74c2ef815ab2d6164ccc97dc32578cf8c/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f8b756b74c2ef815ab2d6164ccc97dc32578cf8c/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=f8b756b74c2ef815ab2d6164ccc97dc32578cf8c", "patch": "@@ -1,3 +1,7 @@\n+2014-11-20  Tejas Belagod  <tejas.belagod@arm.com>\n+\n+\t* gcc.target/aarch64/symbol-range.c: New.\n+\t* gcc.target/aarch64/symbol-range-tiny.c: New.\n 2014-11-20  Richard Biener  <rguenther@suse.de>\n \n \tPR middle-end/63962"}, {"sha": "d7d2039694ff4b9c9bff1d13a30af69988b5ccc3", "filename": "gcc/testsuite/gcc.target/aarch64/symbol-range-tiny.c", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f8b756b74c2ef815ab2d6164ccc97dc32578cf8c/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsymbol-range-tiny.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f8b756b74c2ef815ab2d6164ccc97dc32578cf8c/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsymbol-range-tiny.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsymbol-range-tiny.c?ref=f8b756b74c2ef815ab2d6164ccc97dc32578cf8c", "patch": "@@ -0,0 +1,13 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O3 -save-temps -mcmodel=tiny\" } */\n+\n+int fixed_regs[0x00200000];\n+\n+int\n+foo()\n+{\n+  return fixed_regs[0x00080000];\n+}\n+\n+/* { dg-final { scan-assembler-not \"adr\\tx\\[0-9\\]+, fixed_regs\\\\\\+\" } } */\n+/* { dg-final {cleanup-saved-temps } } */"}, {"sha": "f999bb38102ff4eb9a95d14128612dff4c0e2ff5", "filename": "gcc/testsuite/gcc.target/aarch64/symbol-range.c", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f8b756b74c2ef815ab2d6164ccc97dc32578cf8c/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsymbol-range.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f8b756b74c2ef815ab2d6164ccc97dc32578cf8c/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsymbol-range.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsymbol-range.c?ref=f8b756b74c2ef815ab2d6164ccc97dc32578cf8c", "patch": "@@ -0,0 +1,13 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O3 -save-temps -mcmodel=small\" } */\n+\n+int fixed_regs[0x200000000ULL];\n+\n+int\n+foo()\n+{\n+  return fixed_regs[0x100000000ULL];\n+}\n+\n+/* { dg-final { scan-assembler-not \"adrp\\tx\\[0-9\\]+, fixed_regs\\\\\\+\" } } */\n+/* { dg-final {cleanup-saved-temps } } */"}]}