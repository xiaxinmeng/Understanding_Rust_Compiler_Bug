{"sha": "a0bff95ffc4fa6262b6125172e2c5bc0760b46a9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTBiZmY5NWZmYzRmYTYyNjJiNjEyNTE3MmUyYzViYzA3NjBiNDZhOQ==", "commit": {"author": {"name": "Greg McGary", "email": "greg@mcgary.org", "date": "2000-08-28T05:51:27Z"}, "committer": {"name": "Greg McGary", "email": "gkm@gcc.gnu.org", "date": "2000-08-28T05:51:27Z"}, "message": "cpplex.c (parse_string): Don't look for backslash before first char in `namebuf'.\n\n\t* cpplex.c (parse_string): Don't look for backslash\n\tbefore first char in `namebuf'.\n\t* loop.c (strength_reduce): Skip NOTEs.\n\nFrom-SVN: r36015", "tree": {"sha": "c2ea404c780febc5ce34dcc7dc421c0550edf131", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c2ea404c780febc5ce34dcc7dc421c0550edf131"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a0bff95ffc4fa6262b6125172e2c5bc0760b46a9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a0bff95ffc4fa6262b6125172e2c5bc0760b46a9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a0bff95ffc4fa6262b6125172e2c5bc0760b46a9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a0bff95ffc4fa6262b6125172e2c5bc0760b46a9/comments", "author": null, "committer": null, "parents": [{"sha": "a440fd1970ea5eaaca67ac0ce34104eaedd4a596", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a440fd1970ea5eaaca67ac0ce34104eaedd4a596", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a440fd1970ea5eaaca67ac0ce34104eaedd4a596"}], "stats": {"total": 13, "additions": 10, "deletions": 3}, "files": [{"sha": "c8925f2f7f465d323388b5cd8cedfc483e326a15", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a0bff95ffc4fa6262b6125172e2c5bc0760b46a9/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a0bff95ffc4fa6262b6125172e2c5bc0760b46a9/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=a0bff95ffc4fa6262b6125172e2c5bc0760b46a9", "patch": "@@ -1,3 +1,9 @@\n+2000-08-27  Greg McGary  <greg@mcgary.org>\n+\n+\t* cpplex.c (parse_string): Don't look for backslash\n+\tbefore first char in `namebuf'.\n+\t* loop.c (strength_reduce): Skip NOTEs.\n+\n 2000-08-27  Jason Merrill  <jason@redhat.com>\n \n \t* c-decl.c (duplicate_decls): Don't set TREE_STATIC or clear"}, {"sha": "ba53e5cd6161c0d30503addedaeac62765656391", "filename": "gcc/cpplex.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a0bff95ffc4fa6262b6125172e2c5bc0760b46a9/gcc%2Fcpplex.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a0bff95ffc4fa6262b6125172e2c5bc0760b46a9/gcc%2Fcpplex.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcpplex.c?ref=a0bff95ffc4fa6262b6125172e2c5bc0760b46a9", "patch": "@@ -1106,7 +1106,7 @@ parse_string (pfile, list, token, terminator)\n \t  if (is_vspace (c))\n \t    {\n \t      /* Drop a backslash newline, and continue. */\n-\t      if (namebuf[-1] == '\\\\')\n+\t      if (namebuf > list->namebuf && namebuf[-1] == '\\\\')\n \t\t{\n \t\t  handle_newline (cur, buffer->rlimit, c);\n \t\t  namebuf--;"}, {"sha": "04fe7ccbab0df1fd3d2ef36aea10e8de67d81954", "filename": "gcc/loop.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a0bff95ffc4fa6262b6125172e2c5bc0760b46a9/gcc%2Floop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a0bff95ffc4fa6262b6125172e2c5bc0760b46a9/gcc%2Floop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Floop.c?ref=a0bff95ffc4fa6262b6125172e2c5bc0760b46a9", "patch": "@@ -4188,8 +4188,9 @@ strength_reduce (loop, insn_count, flags)\n \t      /* Some bivs are incremented with a multi-insn sequence.\n \t\t The first insn contains the add.  */\n \t      next_loc_insn = next->insn;\n-\t      while (! loc_mentioned_in_p (next->location,\n-\t\t\t\t\t   PATTERN (next_loc_insn)))\n+\t      while (NOTE_P (next_loc_insn)\n+\t\t     || ! loc_mentioned_in_p (next->location,\n+\t\t\t\t\t      PATTERN (next_loc_insn)))\n \t\tnext_loc_insn = PREV_INSN (next_loc_insn);\n \n \t      if (next_loc_insn == v->insn)"}]}