{"sha": "5c2ee2f1fe77697b7af9740f1d89c43a7c257bc5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWMyZWUyZjFmZTc3Njk3YjdhZjk3NDBmMWQ4OWM0M2E3YzI1N2JjNQ==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2016-12-12T07:56:39Z"}, "committer": {"name": "Eric Botcazou", "email": "ebotcazou@gcc.gnu.org", "date": "2016-12-12T07:56:39Z"}, "message": "constraints.md (T): Use special memory constraint.\n\n\t* config/sparc/constraints.md (T): Use special memory constraint.\n\t(U): Minor tweak.\n\t(W): Add TARGET_ARCH64 test.\n\t* config/sparc/sparc.md (*movdi_insn_sp32): Replace 'W' with 'T'.\n\t(*movdf_insn_sp32): Likewise.\n\t(*mov<VM64:mode>_insn_sp32): Likewise.  Replace 'e' with 'f' in\n\tconjunction with offsettable memory references.\n\nFrom-SVN: r243540", "tree": {"sha": "f003e1eb364e5f9d577d33ce50967b0a2b4cc08e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f003e1eb364e5f9d577d33ce50967b0a2b4cc08e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5c2ee2f1fe77697b7af9740f1d89c43a7c257bc5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5c2ee2f1fe77697b7af9740f1d89c43a7c257bc5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5c2ee2f1fe77697b7af9740f1d89c43a7c257bc5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5c2ee2f1fe77697b7af9740f1d89c43a7c257bc5/comments", "author": null, "committer": null, "parents": [{"sha": "d688bd654ebf07f5dcfbe62e382f9a1be03b0091", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d688bd654ebf07f5dcfbe62e382f9a1be03b0091", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d688bd654ebf07f5dcfbe62e382f9a1be03b0091"}], "stats": {"total": 37, "additions": 24, "deletions": 13}, "files": [{"sha": "bf789c6f2ca58551547f9c2ca60dd14ef318b323", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5c2ee2f1fe77697b7af9740f1d89c43a7c257bc5/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5c2ee2f1fe77697b7af9740f1d89c43a7c257bc5/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=5c2ee2f1fe77697b7af9740f1d89c43a7c257bc5", "patch": "@@ -1,3 +1,13 @@\n+2016-12-12  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* config/sparc/constraints.md (T): Use special memory constraint.\n+\t(U): Minor tweak.\n+\t(W): Add TARGET_ARCH64 test.\n+\t* config/sparc/sparc.md (*movdi_insn_sp32): Replace 'W' with 'T'.\n+\t(*movdf_insn_sp32): Likewise.\n+\t(*mov<VM64:mode>_insn_sp32): Likewise.  Replace 'e' with 'f' in\n+\tconjunction with offsettable memory references.\n+\n 2016-12-11  Sandra Loosemore  <sandra@codesourcery.com>\n \n \t* config/nios2/nios2.c (nios2_emit_move_sequence): Call copy_rtx"}, {"sha": "f0b69c23b5b2794afc21a8fea8e6a5f9a1931a8b", "filename": "gcc/config/sparc/constraints.md", "status": "modified", "additions": 8, "deletions": 7, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5c2ee2f1fe77697b7af9740f1d89c43a7c257bc5/gcc%2Fconfig%2Fsparc%2Fconstraints.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5c2ee2f1fe77697b7af9740f1d89c43a7c257bc5/gcc%2Fconfig%2Fsparc%2Fconstraints.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fconstraints.md?ref=5c2ee2f1fe77697b7af9740f1d89c43a7c257bc5", "patch": "@@ -128,11 +128,11 @@\n  (and (match_code \"const_double\")\n       (match_test \"fp_high_losum_p (op)\")))\n \n-;; Not needed in 64-bit mode\n-(define_memory_constraint \"T\"\n+;; We need a special memory constraint because of the alignment requirement\n+(define_special_memory_constraint \"T\"\n  \"Memory reference whose address is aligned to 8-byte boundary\"\n- (and (match_test \"TARGET_ARCH32\")\n-      (match_code \"mem\")\n+ (and (match_code \"mem\")\n+      (match_test \"TARGET_ARCH32\")\n       (match_test \"memory_ok_for_ldd (op)\")))\n \n ;; This awkward register constraint is necessary because it is not\n@@ -174,16 +174,17 @@\n ;; reg_class_for_constraint, and checks it against NO_REGS.\n (define_constraint \"U\"\n  \"Pseudo-register or hard even-numbered integer register\"\n- (and (match_test \"TARGET_ARCH32\")\n-      (match_code \"reg\")\n+ (and (match_code \"reg\")\n       (ior (match_test \"REGNO (op) < FIRST_PSEUDO_REGISTER\")\n \t   (not (match_test \"reload_in_progress && reg_renumber [REGNO (op)] < 0\")))\n+      (match_test \"TARGET_ARCH32\")\n       (match_test \"register_ok_for_ldd (op)\")))\n \n-;; Equivalent to 'T' but available in 64-bit mode\n+;; Equivalent to 'T' but in 64-bit mode without alignment requirement\n (define_memory_constraint \"W\"\n  \"Memory reference for 'e' constraint floating-point register\"\n  (and (match_code \"mem\")\n+      (match_test \"TARGET_ARCH64\")\n       (match_test \"memory_ok_for_ldd (op)\")))\n \n (define_memory_constraint \"w\""}, {"sha": "d2a6da4941ce0ac23aa0296dc0763cd352514cee", "filename": "gcc/config/sparc/sparc.md", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5c2ee2f1fe77697b7af9740f1d89c43a7c257bc5/gcc%2Fconfig%2Fsparc%2Fsparc.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5c2ee2f1fe77697b7af9740f1d89c43a7c257bc5/gcc%2Fconfig%2Fsparc%2Fsparc.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsparc.md?ref=5c2ee2f1fe77697b7af9740f1d89c43a7c257bc5", "patch": "@@ -1705,9 +1705,9 @@\n \n (define_insn \"*movdi_insn_sp32\"\n   [(set (match_operand:DI 0 \"nonimmediate_operand\"\n-\t\t\t    \"=T,o,U,T,r,o,r,r,?*f,?T,?*f,?o,?*e,?*e,  r,?*f,?*e,?W,*b,*b\")\n+\t\t\t    \"=T,o,U,T,r,o,r,r,?*f,?T,?*f,?o,?*e,?*e,  r,?*f,?*e,?T,*b,*b\")\n         (match_operand:DI 1 \"input_operand\"\n-\t\t\t    \" J,J,T,U,o,r,i,r,  T,*f,  o,*f, *e, *e,?*f,  r,  W,*e, J, P\"))]\n+\t\t\t    \" J,J,T,U,o,r,i,r,  T,*f,  o,*f, *e, *e,?*f,  r,  T,*e, J, P\"))]\n   \"TARGET_ARCH32\n    && (register_operand (operands[0], DImode)\n        || register_or_zero_operand (operands[1], DImode))\"\n@@ -2336,9 +2336,9 @@\n \n (define_insn \"*movdf_insn_sp32\"\n   [(set (match_operand:DF 0 \"nonimmediate_operand\"\n-\t\t\t    \"=T,o,b,b,e,e,*r, f,  e,W,U,T,  f,o, *r,*r, o\")\n+\t\t\t    \"=T,o,b,b,e,e,*r, f,  e,T,U,T,  f,o, *r,*r, o\")\n \t(match_operand:DF 1 \"input_operand\"\n-\t\t\t    \" G,G,G,C,e,e, f,*r,W#F,e,T,U,o#F,f,*rF, o,*r\"))]\n+\t\t\t    \" G,G,G,C,e,e, f,*r,T#F,e,T,U,o#F,f,*rF, o,*r\"))]\n   \"TARGET_ARCH32\n    && (register_operand (operands[0], DFmode)\n        || register_or_zero_or_all_ones_operand (operands[1], DFmode))\"\n@@ -8543,9 +8543,9 @@\n \n (define_insn \"*mov<VM64:mode>_insn_sp32\"\n   [(set (match_operand:VM64 0 \"nonimmediate_operand\"\n-\t\t\t      \"=T,o,e,e,e,*r, f,e,W,U,T,e,o,*r,*r, o\")\n+\t\t\t      \"=T,o,e,e,e,*r, f,e,T,U,T,f,o,*r,*r, o\")\n \t(match_operand:VM64 1 \"input_operand\"\n-\t\t\t      \" Y,Y,Y,Z,e, f,*r,W,e,T,U,o,e,*r, o,*r\"))]\n+\t\t\t      \" Y,Y,Y,Z,e, f,*r,T,e,T,U,o,f,*r, o,*r\"))]\n   \"TARGET_VIS\n    && TARGET_ARCH32\n    && (register_operand (operands[0], <VM64:MODE>mode)"}]}