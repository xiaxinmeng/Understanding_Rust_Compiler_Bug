{"sha": "4a52cf2eb9d6864ad85674ab56838e0d9ce27926", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NGE1MmNmMmViOWQ2ODY0YWQ4NTY3NGFiNTY4MzhlMGQ5Y2UyNzkyNg==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2021-06-25T17:31:23Z"}, "committer": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2021-06-25T17:47:44Z"}, "message": "libstdc++: Avoid intercepting exception in ostream::write\n\nCurrently if ostream::write fails and sets badbit and that causes an\nexception, we will catch the exception, set badbit again, and rethrow\nthe exception.\n\nThis change delays setting badbit until after the try-catch block, so\nthat if it causes an exception we don't need to catch and rethrow it.\n\nThis removes the last remaining use of _M_write, so it can be made\nprivate (or removed entirely for versioned namespace builds, where ABI\ncompatibility is not required). All other uses of _M_write were replaced\nby calls to __ostream_insert, so make _M_write use that too.\n\nlibstdc++-v3/ChangeLog:\n\n\t* include/bits/ostream.tcc (basic_ostream::write): Call sputn\n\tdirectly instead of using _M_write. Do setstate(__err) all\n\toutside the try-catch block.\n\t* include/std/ostream (basic_ostream::_M_write): Declare\n\tprivate. Use __ostream_insert. Do not define for the versioned\n\tnamespace.", "tree": {"sha": "c6d5721c0a4ccfbe7c739b5856e70635da9ea805", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c6d5721c0a4ccfbe7c739b5856e70635da9ea805"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4a52cf2eb9d6864ad85674ab56838e0d9ce27926", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4a52cf2eb9d6864ad85674ab56838e0d9ce27926", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4a52cf2eb9d6864ad85674ab56838e0d9ce27926", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4a52cf2eb9d6864ad85674ab56838e0d9ce27926/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f8c5b542f6cb6a947600e34420565ac67486ea14", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f8c5b542f6cb6a947600e34420565ac67486ea14", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f8c5b542f6cb6a947600e34420565ac67486ea14"}], "stats": {"total": 28, "additions": 14, "deletions": 14}, "files": [{"sha": "06b2217d216133b10a713621a6db272375b67c7e", "filename": "libstdc++-v3/include/bits/ostream.tcc", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4a52cf2eb9d6864ad85674ab56838e0d9ce27926/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fostream.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4a52cf2eb9d6864ad85674ab56838e0d9ce27926/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fostream.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fostream.tcc?ref=4a52cf2eb9d6864ad85674ab56838e0d9ce27926", "patch": "@@ -192,15 +192,21 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       sentry __cerb(*this);\n       if (__cerb)\n \t{\n+\t  ios_base::iostate __err = ios_base::goodbit;\n \t  __try\n-\t    { _M_write(__s, __n); }\n+\t    {\n+\t      if (this->rdbuf()->sputn(__s, __n) != __n)\n+\t\t__err = ios_base::badbit;\n+\t    }\n \t  __catch(__cxxabiv1::__forced_unwind&)\n \t    {\n \t      this->_M_setstate(ios_base::badbit);\t\t\n \t      __throw_exception_again;\n \t    }\n \t  __catch(...)\n \t    { this->_M_setstate(ios_base::badbit); }\n+\t  if (__err)\n+\t    this->setstate(ios_base::badbit);\n \t}\n       return *this;\n     }"}, {"sha": "ddb33feb12f3cf9666791b741c5644514765fbba", "filename": "libstdc++-v3/include/std/ostream", "status": "modified", "additions": 7, "deletions": 13, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4a52cf2eb9d6864ad85674ab56838e0d9ce27926/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fostream", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4a52cf2eb9d6864ad85674ab56838e0d9ce27926/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fostream", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fostream?ref=4a52cf2eb9d6864ad85674ab56838e0d9ce27926", "patch": "@@ -308,19 +308,6 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       __ostream_type&\n       put(char_type __c);\n \n-      /**\n-       *  @brief  Core write functionality, without sentry.\n-       *  @param  __s  The array to insert.\n-       *  @param  __n  Maximum number of characters to insert.\n-      */\n-      void\n-      _M_write(const char_type* __s, streamsize __n)\n-      {\n-\tconst streamsize __put = this->rdbuf()->sputn(__s, __n);\n-\tif (__put != __n)\n-\t  this->setstate(ios_base::badbit);\n-      }\n-\n       /**\n        *  @brief  Character string insertion.\n        *  @param  __s  The array to insert.\n@@ -419,6 +406,13 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       template<typename _ValueT>\n \t__ostream_type&\n \t_M_insert(_ValueT __v);\n+\n+    private:\n+#if !_GLIBCXX_INLINE_VERSION\n+      void\n+      _M_write(const char_type* __s, streamsize __n)\n+      { std::__ostream_insert(*this, __s, __n); }\n+#endif\n     };\n \n   /**"}]}