{"sha": "10d2f801f472931137deae1714d5b690c1862037", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTBkMmY4MDFmNDcyOTMxMTM3ZGVhZTE3MTRkNWI2OTBjMTg2MjAzNw==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2020-01-08T20:31:20Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2020-01-08T20:31:20Z"}, "message": "PR c++/91369 - constexpr destructor and member initializer.\n\nPreviously it didn't matter whether we looked through a TARGET_EXPR in\nconstexpr evaluation, but now that we have constexpr destructors it does.\nOn IRC I mentioned the idea of clearing TARGET_EXPR_CLEANUP in\ndigest_nsdmi_init, but since this initialization is expressed by an\nINIT_EXPR, it's better to handle all INIT_EXPR, not just those for a member\ninitializer.\n\n\t* constexpr.c (cxx_eval_store_expression): Look through TARGET_EXPR\n\twhen not preevaluating.\n\nFrom-SVN: r280018", "tree": {"sha": "f13bc24987acc7188124e8414df9cc31ed103b00", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f13bc24987acc7188124e8414df9cc31ed103b00"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/10d2f801f472931137deae1714d5b690c1862037", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/10d2f801f472931137deae1714d5b690c1862037", "html_url": "https://github.com/Rust-GCC/gccrs/commit/10d2f801f472931137deae1714d5b690c1862037", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/10d2f801f472931137deae1714d5b690c1862037/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "cd3ca6cb1129b1e80b5b048a59aa3a0c387c2413", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cd3ca6cb1129b1e80b5b048a59aa3a0c387c2413", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cd3ca6cb1129b1e80b5b048a59aa3a0c387c2413"}], "stats": {"total": 31, "additions": 31, "deletions": 0}, "files": [{"sha": "7aacbe2334b67e4083c9060c8a0e80d0fdd77734", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/10d2f801f472931137deae1714d5b690c1862037/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/10d2f801f472931137deae1714d5b690c1862037/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=10d2f801f472931137deae1714d5b690c1862037", "patch": "@@ -1,3 +1,9 @@\n+2020-01-08  Jason Merrill  <jason@redhat.com>\n+\n+\tPR c++/91369 - constexpr destructor and member initializer.\n+\t* constexpr.c (cxx_eval_store_expression): Look through TARGET_EXPR\n+\twhen not preevaluating.\n+\n 2020-01-08  Jason Merrill  <jason@redhat.com>\n \n \t* constexpr.c (cxx_eval_call_expression): Remove DECL_BY_REFERENCE"}, {"sha": "5fe6d0277b6041ba54f4dcb858f5190342d21b56", "filename": "gcc/cp/constexpr.c", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/10d2f801f472931137deae1714d5b690c1862037/gcc%2Fcp%2Fconstexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/10d2f801f472931137deae1714d5b690c1862037/gcc%2Fcp%2Fconstexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fconstexpr.c?ref=10d2f801f472931137deae1714d5b690c1862037", "patch": "@@ -4577,6 +4577,12 @@ cxx_eval_store_expression (const constexpr_ctx *ctx, tree t,\n \t}\n       new_ctx.ctor = *valp;\n       new_ctx.object = target;\n+      /* Avoid temporary materialization when initializing from a TARGET_EXPR.\n+\t We don't need to mess with AGGR_EXPR_SLOT/VEC_INIT_EXPR_SLOT because\n+\t expansion of those trees uses ctx instead.  */\n+      if (TREE_CODE (init) == TARGET_EXPR)\n+\tif (tree tinit = TARGET_EXPR_INITIAL (init))\n+\t  init = tinit;\n       init = cxx_eval_constant_expression (&new_ctx, init, false,\n \t\t\t\t\t   non_constant_p, overflow_p);\n       if (ctors->is_empty())"}, {"sha": "500a3240c8feba5fad2efaa88fb89f7b2119b145", "filename": "gcc/testsuite/g++.dg/cpp2a/constexpr-new10.C", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/10d2f801f472931137deae1714d5b690c1862037/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconstexpr-new10.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/10d2f801f472931137deae1714d5b690c1862037/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconstexpr-new10.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconstexpr-new10.C?ref=10d2f801f472931137deae1714d5b690c1862037", "patch": "@@ -0,0 +1,19 @@\n+// PR c++/91369\n+// { dg-do compile { target c++2a } }\n+\n+struct S {\n+  constexpr S (int* i) : s{i} {}\n+  constexpr ~S () { delete s; }\n+  int *s;\n+};\n+\n+struct T { S t = { new int }; };\n+\n+constexpr auto\n+foo ()\n+{\n+  T b;\n+  return true;\n+}\n+\n+static_assert (foo ());"}]}