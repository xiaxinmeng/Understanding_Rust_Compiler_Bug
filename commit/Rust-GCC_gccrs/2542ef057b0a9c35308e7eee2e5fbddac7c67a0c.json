{"sha": "2542ef057b0a9c35308e7eee2e5fbddac7c67a0c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjU0MmVmMDU3YjBhOWMzNTMwOGU3ZWVlMmU1ZmJkZGFjN2M2N2EwYw==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@redhat.com", "date": "2012-12-20T18:05:03Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2012-12-20T18:05:03Z"}, "message": "s390: Add mode attribute for mode bitsize\n\n        * config/s390/s390.md (bitsize): New mode attr.\n        (*extzv<GPR>, *extzv<GPR>, *insv<GPR>_zEC12, *insv<GPR>_z10): Use it.\n        (extend<HQI><DSI>2, zero_extend<HQI>si2): Likewise.\n        (zero_extend<HQI>di2, fixuns_trunc<BFP><GPR>2): Likewise.\n\nCo-Authored-By: Andreas Krebbel <Andreas.Krebbel@de.ibm.com>\n\nFrom-SVN: r194643", "tree": {"sha": "7f68e556137c2e672463cfebeafe2ea21ccb8f9f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7f68e556137c2e672463cfebeafe2ea21ccb8f9f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2542ef057b0a9c35308e7eee2e5fbddac7c67a0c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2542ef057b0a9c35308e7eee2e5fbddac7c67a0c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2542ef057b0a9c35308e7eee2e5fbddac7c67a0c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2542ef057b0a9c35308e7eee2e5fbddac7c67a0c/comments", "author": null, "committer": null, "parents": [{"sha": "e314051839e109bf4e17f1c95f58b523b2176bd7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e314051839e109bf4e17f1c95f58b523b2176bd7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e314051839e109bf4e17f1c95f58b523b2176bd7"}], "stats": {"total": 77, "additions": 31, "deletions": 46}, "files": [{"sha": "3efc06806556df6ad4edde664048aac449aa006c", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2542ef057b0a9c35308e7eee2e5fbddac7c67a0c/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2542ef057b0a9c35308e7eee2e5fbddac7c67a0c/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=2542ef057b0a9c35308e7eee2e5fbddac7c67a0c", "patch": "@@ -16,6 +16,11 @@\n \t(*anddi3_cconly, *anddi3): Likewise.\n \t(*andsi3, *andsi3_cconly, *andsi3_zarch): Likewise.\n \n+\t* config/s390/s390.md (bitsize): New mode attr.\n+\t(*extzv<GPR>, *extzv<GPR>, *insv<GPR>_zEC12, *insv<GPR>_z10): Use it.\n+\t(extend<HQI><DSI>2, zero_extend<HQI>si2): Likewise.\n+\t(zero_extend<HQI>di2, fixuns_trunc<BFP><GPR>2): Likewise.\n+\n 2012-12-20  Thomas Schwinge  <thomas@codesourcery.com>\n \n \tPR bootstrap/55202"}, {"sha": "d7adde5e724ca2dbbbbbea4a025439883029dbe4", "filename": "gcc/config/s390/s390.md", "status": "modified", "additions": 26, "deletions": 46, "changes": 72, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2542ef057b0a9c35308e7eee2e5fbddac7c67a0c/gcc%2Fconfig%2Fs390%2Fs390.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2542ef057b0a9c35308e7eee2e5fbddac7c67a0c/gcc%2Fconfig%2Fs390%2Fs390.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Fs390.md?ref=2542ef057b0a9c35308e7eee2e5fbddac7c67a0c", "patch": "@@ -531,6 +531,9 @@\n (define_mode_attr bfstart [(DI \"s\") (SI \"t\")])\n (define_mode_attr bfend   [(DI \"e\") (SI \"f\")])\n \n+;; In place of GET_MODE_BITSIZE (<MODE>mode)\n+(define_mode_attr bitsize [(DI \"64\") (SI \"32\") (HI \"16\") (QI \"8\")])\n+\n ;;\n ;;- Compare instructions.\n ;;\n@@ -3326,7 +3329,7 @@\n \n   operands[1] = adjust_address (operands[1], BLKmode, 0);\n   set_mem_size (operands[1], size);\n-  operands[2] = GEN_INT (GET_MODE_BITSIZE (<MODE>mode) - bitsize);\n+  operands[2] = GEN_INT (<GPR:bitsize> - bitsize);\n   operands[3] = GEN_INT (mask);\n })\n \n@@ -3353,7 +3356,7 @@\n \n   operands[1] = adjust_address (operands[1], BLKmode, 0);\n   set_mem_size (operands[1], size);\n-  operands[2] = GEN_INT (GET_MODE_BITSIZE (<MODE>mode) - bitsize);\n+  operands[2] = GEN_INT (<GPR:bitsize> - bitsize);\n   operands[3] = GEN_INT (mask);\n })\n \n@@ -3373,49 +3376,29 @@\n   FAIL;\n })\n \n+\n+; The normal RTL expansion will never generate a zero_extract where\n+; the location operand isn't word mode.  However, we do this in the\n+; back-end when generating atomic operations. See s390_two_part_insv.\n (define_insn \"*insv<mode>_zEC12\"\n   [(set (zero_extract:GPR (match_operand:GPR 0 \"nonimmediate_operand\" \"+d\")\n-\t\t\t  (match_operand 1 \"const_int_operand\"    \"I\")\n-\t\t\t  (match_operand 2 \"const_int_operand\"    \"I\"))\n+\t\t\t  (match_operand 1 \"const_int_operand\"    \"I\")  ; size\n+\t\t\t  (match_operand 2 \"const_int_operand\"    \"I\")) ; pos\n \t(match_operand:GPR 3 \"nonimmediate_operand\" \"d\"))]\n   \"TARGET_ZEC12\n-   && (INTVAL (operands[1]) + INTVAL (operands[2])) <=\n-      GET_MODE_BITSIZE (<MODE>mode)\"\n-{\n-  int start = INTVAL (operands[2]);\n-  int size = INTVAL (operands[1]);\n-  int offset = 64 - GET_MODE_BITSIZE (<MODE>mode);\n-\n-  operands[2] = GEN_INT (offset + start);              /* start bit position */\n-  operands[1] = GEN_INT (offset + start + size - 1);   /* end bit position */\n-  operands[4] = GEN_INT (GET_MODE_BITSIZE (<MODE>mode) -\n-\t\t\t start - size);       /* left shift count */\n-\n-  return \"risbgn\\t%0,%3,%b2,%b1,%b4\";\n-}\n+   && (INTVAL (operands[1]) + INTVAL (operands[2])) <= <bitsize>\"\n+  \"risbgn\\t%0,%3,64-<bitsize>+%2,64-<bitsize>+%2+%1-1,<bitsize>-%2-%1\"\n   [(set_attr \"op_type\" \"RIE\")])\n \n (define_insn \"*insv<mode>_z10\"\n   [(set (zero_extract:GPR (match_operand:GPR 0 \"nonimmediate_operand\" \"+d\")\n-\t\t\t  (match_operand 1 \"const_int_operand\"    \"I\")\n-\t\t\t  (match_operand 2 \"const_int_operand\"    \"I\"))\n+\t\t\t  (match_operand 1 \"const_int_operand\"    \"I\")  ; size\n+\t\t\t  (match_operand 2 \"const_int_operand\"    \"I\")) ; pos\n \t(match_operand:GPR 3 \"nonimmediate_operand\" \"d\"))\n    (clobber (reg:CC CC_REGNUM))]\n   \"TARGET_Z10\n-   && (INTVAL (operands[1]) + INTVAL (operands[2])) <=\n-      GET_MODE_BITSIZE (<MODE>mode)\"\n-{\n-  int start = INTVAL (operands[2]);\n-  int size = INTVAL (operands[1]);\n-  int offset = 64 - GET_MODE_BITSIZE (<MODE>mode);\n-\n-  operands[2] = GEN_INT (offset + start);              /* start bit position */\n-  operands[1] = GEN_INT (offset + start + size - 1);   /* end bit position */\n-  operands[4] = GEN_INT (GET_MODE_BITSIZE (<MODE>mode) -\n-\t\t\t start - size);       /* left shift count */\n-\n-  return \"risbg\\t%0,%3,%b2,%b1,%b4\";\n-}\n+   && (INTVAL (operands[1]) + INTVAL (operands[2])) <= <bitsize>\"\n+  \"risbg\\t%0,%3,64-<bitsize>+%2,64-<bitsize>+%2+%1-1,<bitsize>-%2-%1\"\n   [(set_attr \"op_type\" \"RIE\")\n    (set_attr \"z10prop\" \"z10_super_E1\")])\n \n@@ -3585,8 +3568,7 @@\n     }\n   else if (!TARGET_EXTIMM)\n     {\n-      rtx bitcount = GEN_INT (GET_MODE_BITSIZE (<DSI:MODE>mode) -\n-\t\t\t      GET_MODE_BITSIZE (<HQI:MODE>mode));\n+      rtx bitcount = GEN_INT (<DSI:bitsize> - <HQI:bitsize>);\n \n       operands[1] = gen_lowpart (<DSI:MODE>mode, operands[1]);\n       emit_insn (gen_ashl<DSI:mode>3 (operands[0], operands[1], bitcount));\n@@ -3688,8 +3670,7 @@\n {\n   operands[1] = adjust_address (operands[1], BLKmode, 0);\n   set_mem_size (operands[1], GET_MODE_SIZE (QImode));\n-  operands[2] = GEN_INT (GET_MODE_BITSIZE (<MODE>mode)\n-\t\t\t - GET_MODE_BITSIZE (QImode));\n+  operands[2] = GEN_INT (<GPR:bitsize> - BITS_PER_UNIT);\n })\n \n ;\n@@ -3800,8 +3781,7 @@\n     }\n   else if (!TARGET_EXTIMM)\n     {\n-      rtx bitcount = GEN_INT (GET_MODE_BITSIZE(DImode) -\n-\t\t\t      GET_MODE_BITSIZE(<MODE>mode));\n+      rtx bitcount = GEN_INT (64 - <HQI:bitsize>);\n       operands[1] = gen_lowpart (DImode, operands[1]);\n       emit_insn (gen_ashldi3 (operands[0], operands[1], bitcount));\n       emit_insn (gen_lshrdi3 (operands[0], operands[0], bitcount));\n@@ -3818,7 +3798,7 @@\n     {\n       operands[1] = gen_lowpart (SImode, operands[1]);\n       emit_insn (gen_andsi3 (operands[0], operands[1],\n-                   GEN_INT ((1 << GET_MODE_BITSIZE(<MODE>mode)) - 1)));\n+\t\t\t     GEN_INT ((1 << <HQI:bitsize>) - 1)));\n       DONE;\n     }\n })\n@@ -4011,8 +3991,8 @@\n       REAL_VALUE_TYPE cmp, sub;\n \n       operands[1] = force_reg (<BFP:MODE>mode, operands[1]);\n-      real_2expN (&cmp, GET_MODE_BITSIZE(<GPR:MODE>mode) - 1, <BFP:MODE>mode);\n-      real_2expN (&sub, GET_MODE_BITSIZE(<GPR:MODE>mode), <BFP:MODE>mode);\n+      real_2expN (&cmp, <GPR:bitsize> - 1, <BFP:MODE>mode);\n+      real_2expN (&sub, <GPR:bitsize>, <BFP:MODE>mode);\n \n       emit_cmp_and_jump_insns (operands[1],\n \t    CONST_DOUBLE_FROM_REAL_VALUE (cmp, <BFP:MODE>mode),\n@@ -4727,9 +4707,9 @@\n         (plus:GPR (match_dup 1) (match_dup 2)))]\n   \"s390_match_ccmode (insn, CCAmode)\n    && (CONST_OK_FOR_CONSTRAINT_P (INTVAL (operands[2]), 'K', \\\"K\\\")\n-       || CONST_OK_FOR_CONSTRAINT_P (INTVAL (operands[2]), 'O', \\\"Os\\\")\n-       || CONST_OK_FOR_CONSTRAINT_P (INTVAL (operands[2]), 'C', \\\"C\\\"))\n-   && INTVAL (operands[2]) != -((HOST_WIDE_INT)1 << (GET_MODE_BITSIZE(<MODE>mode) - 1))\"\n+       || (CONST_OK_FOR_CONSTRAINT_P (INTVAL (operands[2]), 'O', \\\"Os\\\")\n+           /* Avoid INT32_MIN on 32 bit.  */\n+           && (!TARGET_ZARCH || INTVAL (operands[2]) != -0x7fffffff - 1)))\"\n   \"@\n    a<g>hi\\t%0,%h2\n    a<g>hik\\t%0,%1,%h2"}]}