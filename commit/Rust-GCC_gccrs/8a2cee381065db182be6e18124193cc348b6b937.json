{"sha": "8a2cee381065db182be6e18124193cc348b6b937", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGEyY2VlMzgxMDY1ZGIxODJiZTZlMTgxMjQxOTNjYzM0OGI2YjkzNw==", "commit": {"author": {"name": "Jan Beulich", "email": "jbeulich@novell.com", "date": "2004-07-09T23:20:36Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2004-07-09T23:20:36Z"}, "message": "c-typeck.c (build_unary_op): include VECTOR_TYPE in set of codes permissible for unary plus.\n\n        * c-typeck.c (build_unary_op): include VECTOR_TYPE in set of codes\n        permissible for unary plus.\n\nFrom-SVN: r84417", "tree": {"sha": "7f15378fb80418b7903e8b6ed86c8514f95c236b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7f15378fb80418b7903e8b6ed86c8514f95c236b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8a2cee381065db182be6e18124193cc348b6b937", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8a2cee381065db182be6e18124193cc348b6b937", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8a2cee381065db182be6e18124193cc348b6b937", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8a2cee381065db182be6e18124193cc348b6b937/comments", "author": null, "committer": null, "parents": [{"sha": "5806d4fd849871d77fdc9b5f6a1ef05d42039a52", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5806d4fd849871d77fdc9b5f6a1ef05d42039a52", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5806d4fd849871d77fdc9b5f6a1ef05d42039a52"}], "stats": {"total": 103, "additions": 100, "deletions": 3}, "files": [{"sha": "4e049420392d5793b3a9355ff26325957f0b49e3", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8a2cee381065db182be6e18124193cc348b6b937/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8a2cee381065db182be6e18124193cc348b6b937/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=8a2cee381065db182be6e18124193cc348b6b937", "patch": "@@ -4,6 +4,11 @@\n \t* config/ia64/ia64.c (ia64_function_arg): For a single element HFA,\n \tdo return a parallel if hfa_mode == XFmode and mode == TImode.\n \n+2004-07-09 Jan Beulich <jbeulich@novell.com>\n+\n+\t* c-typeck.c (build_unary_op): include VECTOR_TYPE in set of codes\n+\tpermissible for unary plus.\n+\n 2004-07-09 Jan Beulich <jbeulich@novell.com>\n \n \t* builtin-types.def (BT_UINT): Rename from BT_UNSIGNED."}, {"sha": "2c6df142597163ca1341077e101349059c920292", "filename": "gcc/c-typeck.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8a2cee381065db182be6e18124193cc348b6b937/gcc%2Fc-typeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8a2cee381065db182be6e18124193cc348b6b937/gcc%2Fc-typeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-typeck.c?ref=8a2cee381065db182be6e18124193cc348b6b937", "patch": "@@ -2303,7 +2303,8 @@ build_unary_op (enum tree_code code, tree xarg, int flag)\n \t is enough to prevent anybody from looking inside for\n \t associativity, but won't generate any code.  */\n       if (!(typecode == INTEGER_TYPE || typecode == REAL_TYPE\n-\t    || typecode == COMPLEX_TYPE))\n+\t    || typecode == COMPLEX_TYPE\n+\t    || typecode == VECTOR_TYPE))\n \t{\n \t  error (\"wrong type argument to unary plus\");\n \t  return error_mark_node;"}, {"sha": "e36c5beec5c927637db966a8a3faefc97082311a", "filename": "gcc/testsuite/gcc.dg/simd-1.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8a2cee381065db182be6e18124193cc348b6b937/gcc%2Ftestsuite%2Fgcc.dg%2Fsimd-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8a2cee381065db182be6e18124193cc348b6b937/gcc%2Ftestsuite%2Fgcc.dg%2Fsimd-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fsimd-1.c?ref=8a2cee381065db182be6e18124193cc348b6b937", "patch": "@@ -14,8 +14,8 @@ v2si c, d;\n v8hi e;\n uv4si f;\n \n-int foo __attribute__((mode(DI)));\n-int foo1 __attribute__((mode(SI)));\n+long long foo;\n+int foo1;\n short foo2 __attribute__((vector_size (8)));\n \n void"}, {"sha": "d40fb0469caab567281240e65998a6a6986c3e50", "filename": "gcc/testsuite/gcc.dg/simd-1b.c", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8a2cee381065db182be6e18124193cc348b6b937/gcc%2Ftestsuite%2Fgcc.dg%2Fsimd-1b.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8a2cee381065db182be6e18124193cc348b6b937/gcc%2Ftestsuite%2Fgcc.dg%2Fsimd-1b.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fsimd-1b.c?ref=8a2cee381065db182be6e18124193cc348b6b937", "patch": "@@ -0,0 +1,36 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-Wall\" } */\n+\n+/* Origin: Aldy Hernandez <aldyh@redhat.com>.  */\n+/* Purpose: Program to test generic SIMD support.  */\n+\n+typedef int __attribute__((vector_size (16))) v4si;\n+typedef int __attribute__((vector_size (8))) v2si;\n+\n+v4si a, b;\n+v2si c, d;\n+\n+void\n+hanneke ()\n+{\n+  /* Operators on compatible SIMD types.  */\n+  a %= b; /* { dg-bogus \"invalid operands to binary %\" \"\" { xfail *-*-* } } */\n+  c &= d;\n+  a |= b;\n+  c ^= d;\n+  a >>= b; /* { dg-bogus \"invalid operands to binary >>\" \"\" { xfail *-*-* } } */\n+  c <<= d; /* { dg-bogus \"invalid operands to binary <<\" \"\" { xfail *-*-* } } */\n+  a = +b;\n+  c = ~d;\n+\n+  /* Operators on incompatible SIMD types.  */\n+/*  a = b % c;  { dg*error \"can't convert between vector values of different size\" } */\n+  a = b % c; /* { dg-bogus \"invalid operands to binary %\" \"\" { xfail *-*-* } } */\n+  d = c & b; /* { dg-error \"can't convert between vector values of different size\" } */\n+  a = b | c; /* { dg-error \"can't convert between vector values of different size\" } */\n+  d = c ^ b; /* { dg-error \"can't convert between vector values of different size\" } */\n+/*  a = b >> c;  { dg*error \"can't convert between vector values of different size\" } */\n+  a = b >> c; /* { dg-bogus \"invalid operands to binary >>\" \"\" { xfail *-*-* } } */\n+/*  d = c << b;  { dg*error \"can't convert between vector values of different size\" } */\n+  d = c << b; /* { dg-bogus \"invalid operands to binary <<\" \"\" { xfail *-*-* } } */\n+}"}, {"sha": "20d4a07d46c6139e5b6d109cafd9599f2f2cd792", "filename": "gcc/testsuite/gcc.dg/simd-2.c", "status": "added", "additions": 55, "deletions": 0, "changes": 55, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8a2cee381065db182be6e18124193cc348b6b937/gcc%2Ftestsuite%2Fgcc.dg%2Fsimd-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8a2cee381065db182be6e18124193cc348b6b937/gcc%2Ftestsuite%2Fgcc.dg%2Fsimd-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fsimd-2.c?ref=8a2cee381065db182be6e18124193cc348b6b937", "patch": "@@ -0,0 +1,55 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-Wall\" } */\n+\n+/* Origin: Aldy Hernandez <aldyh@redhat.com>.  */\n+/* Purpose: Program to test generic SIMD support.  */\n+\n+typedef float __attribute__((vector_size(8))) v2sf;\n+typedef float __attribute__((vector_size(16))) v4sf;\n+typedef double __attribute__((vector_size(16))) v2df;\n+\n+v4sf a, b;\n+v2sf c, d;\n+v2df e;\n+\n+double foo;\n+float foo1;\n+v2sf foo2;\n+\n+void\n+hanneke ()\n+{\n+  /* Assignment.  */\n+  a = b;\n+\n+  /* Assignment of different types.  */\n+  b = c; /* { dg-error \"incompatible types in assignment\" } */\n+  d = a; /* { dg-error \"incompatible types in assignment\" } */\n+\n+  /* Casting between SIMDs of the same size.  */\n+  e = (typeof (e)) a;\n+\n+  /* Assignment between scalar and SIMD of different size.  */\n+  foo = a; /* { dg-error \"incompatible types in assignment\" } */\n+\n+  /* Casted assignment between scalar and SIMD of same size.  */\n+  foo = (typeof (foo)) foo2; /* { dg-bogus \"aggregate value used where a float was expected\" \"\" { xfail *-*-* } } */\n+\n+  /* Casted assignment between scalar and SIMD of different size.  */\n+/*  foo1 = (typeof (foo1)) foo2;  { dg*error \"can't convert between vector values of different size\" } */\n+  foo1 = (typeof (foo1)) foo2; /* { dg-bogus \"aggregate value used where a float was expected\" \"\" { xfail *-*-* } } */\n+\n+  /* Operators on compatible SIMD types.  */\n+  a += b + b;\n+  a -= b;\n+  a *= b;\n+  a /= b;\n+  a = +b;\n+  c = -d;\n+\n+  /* Operators on incompatible SIMD types.  */\n+  a = b + c; /* { dg-error \"can't convert between vector values of different size\" } */\n+  a = b - c; /* { dg-error \"can't convert between vector values of different size\" } */\n+  a = b * c; /* { dg-error \"can't convert between vector values of different size\" } */\n+  a = b / c; /* { dg-error \"can't convert between vector values of different size\" } */\n+}"}]}