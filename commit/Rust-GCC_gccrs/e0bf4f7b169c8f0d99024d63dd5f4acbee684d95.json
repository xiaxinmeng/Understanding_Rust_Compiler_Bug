{"sha": "e0bf4f7b169c8f0d99024d63dd5f4acbee684d95", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTBiZjRmN2IxNjljOGYwZDk5MDI0ZDYzZGQ1ZjRhY2JlZTY4NGQ5NQ==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@vlsi1.ultra.nyu.edu", "date": "2000-04-14T21:59:52Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "2000-04-14T21:59:52Z"}, "message": "* sbitmap.h (EXECUTE_IF_SET_IN_SBITMAP): Revert last change.\n\nFrom-SVN: r33153", "tree": {"sha": "8793155e9912b6f48485d188064b8a9fc5ebbb0b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8793155e9912b6f48485d188064b8a9fc5ebbb0b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e0bf4f7b169c8f0d99024d63dd5f4acbee684d95", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e0bf4f7b169c8f0d99024d63dd5f4acbee684d95", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e0bf4f7b169c8f0d99024d63dd5f4acbee684d95", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e0bf4f7b169c8f0d99024d63dd5f4acbee684d95/comments", "author": null, "committer": null, "parents": [{"sha": "85b2a0917a24fd32ab641bd64044cb0722670c28", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/85b2a0917a24fd32ab641bd64044cb0722670c28", "html_url": "https://github.com/Rust-GCC/gccrs/commit/85b2a0917a24fd32ab641bd64044cb0722670c28"}], "stats": {"total": 41, "additions": 22, "deletions": 19}, "files": [{"sha": "8cf19574f34d26fde5f22924f9897ef88126293a", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 5, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e0bf4f7b169c8f0d99024d63dd5f4acbee684d95/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e0bf4f7b169c8f0d99024d63dd5f4acbee684d95/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=e0bf4f7b169c8f0d99024d63dd5f4acbee684d95", "patch": "@@ -1,3 +1,7 @@\n+Fri Apr 14 18:07:30 2000  Richard Kenner  <kenner@vlsi1.ultra.nyu.edu>\n+\n+\t* sbitmap.h (EXECUTE_IF_SET_IN_SBITMAP): Revert last change.\n+\n Fri Apr 14 10:54:22 2000  Jim Wilson  <wilson@cygnus.com>\n \n \t* config/ia64/lib1funcs.asm (__ia64_nonlocal_goto): Drop obsolete\n@@ -46,15 +50,14 @@ Thu Apr 13 19:39:56 2000  Clinton Popetz  <cpopetz@cygnus.com>\n \n Thu Apr 13 15:55:08 MET DST 2000  Jan Hubicka  <jh@suse.cz>\n \n-\t* alias.c (nonlocal_reference_p): Take a care for\n-\tCALL_INSNS's fusage field.\n+\t* alias.c (nonlocal_reference_p): Take care of CALL_INSNS's fusage.\n \t* calls.c (ECF_PURE): New flag.\n \t(emit_call_1): Handle ECF_PURE calls.\n \t(initialize_argument_information): Unset ECF_PURE flag too.\n \t(precompute_arguments): Precompute for ECF_PURE too.\n \t(expand_call): Handle ECF_PURE calls too.\n-\t(emit_library_call_value_1): Rename no_queue argument to\n-\tfn_type, accept value of 2 as pure function.\n+\t(emit_library_call_value_1): Rename no_queue argument to fn_type,\n+\taccept value of 2 as pure function.\n \t(emit_library_call_value, emit_library_call): Rename no_queue argument\n \tto fn_type.\n \t* optabs.c (prepare_cmp_insn): Pass fn_type 2 to memcmp call.\n@@ -116,7 +119,7 @@ Wed Apr 12 20:51:20 2000  J\"orn Rennecke <amylaar@cygnus.co.uk>\n \n Wed Apr 12 17:20:41 MET DST 2000  Jan Hubicka  <jh@suse.cz>\n \n-\t(expand_call): Do not reverse args in \"equal from\" field.\n+\t* calls.c (expand_call): Do not reverse args in \"equal from\" field.\n \t(emit_library_call_value_1): Emit_libcall_block for const and pure\n \tfunction.\n "}, {"sha": "ade0c591fc3d5551aad8dfedf486ee656cc06370", "filename": "gcc/sbitmap.h", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e0bf4f7b169c8f0d99024d63dd5f4acbee684d95/gcc%2Fsbitmap.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e0bf4f7b169c8f0d99024d63dd5f4acbee684d95/gcc%2Fsbitmap.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsbitmap.h?ref=e0bf4f7b169c8f0d99024d63dd5f4acbee684d95", "patch": "@@ -58,27 +58,27 @@ typedef SBITMAP_ELT_TYPE *sbitmap_ptr;\n /* Loop over all elements of SBITSET, starting with MIN.  */\n #define EXECUTE_IF_SET_IN_SBITMAP(SBITMAP, MIN, N, CODE)\t\t\\\n do {\t\t\t\t\t\t\t\t\t\\\n-  unsigned int _word_num;\t\t\t\t\t\t\\\n-  unsigned int _bit_num = (MIN) % (unsigned int) SBITMAP_ELT_BITS;\t\\\n-  unsigned int _size = (SBITMAP)->size;\t\t\t\t\t\\\n-  SBITMAP_ELT_TYPE *_ptr = (SBITMAP)->elms;\t\t\t\t\\\n+  unsigned int word_num_;\t\t\t\t\t\t\\\n+  unsigned int bit_num_ = (MIN) % (unsigned int) SBITMAP_ELT_BITS;\t\\\n+  unsigned int size_ = (SBITMAP)->size;\t\t\t\t\t\\\n+  SBITMAP_ELT_TYPE *ptr_ = (SBITMAP)->elms;\t\t\t\t\\\n \t\t\t\t\t\t\t\t\t\\\n-  for (_word_num = (MIN) / (unsigned int) SBITMAP_ELT_BITS;\t\t\\\n-       _word_num < _size; _word_num++, _bit_num = 0)\t\t\t\\\n+  for (word_num_ = (MIN) / (unsigned int) SBITMAP_ELT_BITS;\t\t\\\n+       word_num_ < size_; word_num_++, bit_num_ = 0)\t\t\t\\\n     {\t\t\t\t\t\t\t\t\t\\\n-      SBITMAP_ELT_TYPE _word = _ptr[_word_num];\t\t\t\t\\\n+      SBITMAP_ELT_TYPE word_ = ptr_[word_num_];\t\t\t\t\\\n \t\t\t\t\t\t\t\t\t\\\n-      if (_word != 0)\t\t\t\t\t\t\t\\\n-\tfor (; _bit_num < SBITMAP_ELT_BITS; _bit_num++)\t\t\t\\\n+      if (word_ != 0)\t\t\t\t\t\t\t\\\n+\tfor (; bit_num_ < SBITMAP_ELT_BITS; bit_num_++)\t\t\t\\\n \t  {\t\t\t\t\t\t\t\t\\\n-\t    SBITMAP_ELT_TYPE _mask = (SBITMAP_ELT_TYPE)1 << _bit_num;\t\\\n+\t    SBITMAP_ELT_TYPE _mask = (SBITMAP_ELT_TYPE)1 << bit_num_;\t\\\n \t\t\t\t\t\t\t\t\t\\\n-\t    if ((_word & _mask) != 0)\t\t\t\t\t\\\n+\t    if ((word_ & _mask) != 0)\t\t\t\t\t\\\n \t      {\t\t\t\t\t\t\t\t\\\n-\t\t_word &= ~ _mask;\t\t\t\t\t\\\n-\t\t(N) = _word_num * SBITMAP_ELT_BITS + _bit_num;\t\t\\\n+\t\tword_ &= ~ _mask;\t\t\t\t\t\\\n+\t\t(N) = word_num_ * SBITMAP_ELT_BITS + bit_num_;\t\t\\\n \t\tCODE;\t\t\t\t\t\t\t\\\n-\t\tif (_word == 0)\t\t\t\t\t\t\\\n+\t\tif (word_ == 0)\t\t\t\t\t\t\\\n \t\t  break;\t\t\t\t\t\t\\\n \t      }\t\t\t\t\t\t\t\t\\\n \t  }\t\t\t\t\t\t\t\t\\"}]}