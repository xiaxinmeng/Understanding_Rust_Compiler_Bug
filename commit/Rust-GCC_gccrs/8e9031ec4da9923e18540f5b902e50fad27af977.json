{"sha": "8e9031ec4da9923e18540f5b902e50fad27af977", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGU5MDMxZWM0ZGE5OTIzZTE4NTQwZjViOTAyZTUwZmFkMjdhZjk3Nw==", "commit": {"author": {"name": "Tom Tromey", "email": "tromey@redhat.com", "date": "2004-08-03T17:38:30Z"}, "committer": {"name": "Tom Tromey", "email": "tromey@gcc.gnu.org", "date": "2004-08-03T17:38:30Z"}, "message": "* jni.cc: Reindented.\n\nFrom-SVN: r85491", "tree": {"sha": "2d3d54f0474e8be3703d7d940a8b9bbfddf23586", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2d3d54f0474e8be3703d7d940a8b9bbfddf23586"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8e9031ec4da9923e18540f5b902e50fad27af977", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8e9031ec4da9923e18540f5b902e50fad27af977", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8e9031ec4da9923e18540f5b902e50fad27af977", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8e9031ec4da9923e18540f5b902e50fad27af977/comments", "author": null, "committer": null, "parents": [{"sha": "336bd6ac1671ccfbaf046f63f96c900c4ce3813c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/336bd6ac1671ccfbaf046f63f96c900c4ce3813c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/336bd6ac1671ccfbaf046f63f96c900c4ce3813c"}], "stats": {"total": 78, "additions": 41, "deletions": 37}, "files": [{"sha": "a39acad82fc7f8b4ca54e6d475dfd537f9500e53", "filename": "libjava/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8e9031ec4da9923e18540f5b902e50fad27af977/libjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8e9031ec4da9923e18540f5b902e50fad27af977/libjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FChangeLog?ref=8e9031ec4da9923e18540f5b902e50fad27af977", "patch": "@@ -1,3 +1,7 @@\n+2004-08-03  Tom Tromey  <tromey@redhat.com>\n+\n+\t* jni.cc: Reindented.\n+\n 2004-08-02  Bryce McKinlay  <mckinlay@redhat.com>\n \n \t* java/sql/Timestamp.java (valueOf): Synchronize access to dateFormat."}, {"sha": "f5a66d0948d1f92de4d2b3816e6932a0ca5f35fc", "filename": "libjava/jni.cc", "status": "modified", "additions": 37, "deletions": 37, "changes": 74, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8e9031ec4da9923e18540f5b902e50fad27af977/libjava%2Fjni.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8e9031ec4da9923e18540f5b902e50fad27af977/libjava%2Fjni.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjni.cc?ref=8e9031ec4da9923e18540f5b902e50fad27af977", "patch": "@@ -463,7 +463,7 @@ _Jv_JNI_GetVersion (JNIEnv *)\n \n static jclass JNICALL\n _Jv_JNI_DefineClass (JNIEnv *env, const char *name, jobject loader,\n-\t\t               const jbyte *buf, jsize bufLen)\n+\t\t     const jbyte *buf, jsize bufLen)\n {\n   try\n     {\n@@ -668,7 +668,7 @@ _Jv_JNI_IsInstanceOf (JNIEnv *, jobject obj, jclass clazz)\n template<jboolean is_static>\n static jmethodID JNICALL\n _Jv_JNI_GetAnyMethodID (JNIEnv *env, jclass clazz,\n-\t\t\t          const char *name, const char *sig)\n+\t\t\tconst char *name, const char *sig)\n {\n   try\n     {\n@@ -767,7 +767,7 @@ array_from_valist (jvalue *values, JArray<jclass> *arg_types, va_list vargs)\n template<typename T, invocation_type style>\n static T JNICALL\n _Jv_JNI_CallAnyMethodV (JNIEnv *env, jobject obj, jclass klass,\n-\t\t\t          jmethodID id, va_list vargs)\n+\t\t\tjmethodID id, va_list vargs)\n {\n   obj = unwrap (obj);\n   klass = unwrap (klass);\n@@ -809,7 +809,7 @@ _Jv_JNI_CallAnyMethodV (JNIEnv *env, jobject obj, jclass klass,\n template<typename T, invocation_type style>\n static T JNICALL\n _Jv_JNI_CallAnyMethod (JNIEnv *env, jobject obj, jclass klass,\n-\t\t                 jmethodID method, ...)\n+\t\t       jmethodID method, ...)\n {\n   va_list args;\n   T result;\n@@ -824,7 +824,7 @@ _Jv_JNI_CallAnyMethod (JNIEnv *env, jobject obj, jclass klass,\n template<typename T, invocation_type style>\n static T JNICALL\n _Jv_JNI_CallAnyMethodA (JNIEnv *env, jobject obj, jclass klass,\n-\t\t\t          jmethodID id, jvalue *args)\n+\t\t\tjmethodID id, jvalue *args)\n {\n   obj = unwrap (obj);\n   klass = unwrap (klass);\n@@ -873,7 +873,7 @@ _Jv_JNI_CallAnyMethodA (JNIEnv *env, jobject obj, jclass klass,\n template<invocation_type style>\n static void JNICALL\n _Jv_JNI_CallAnyVoidMethodV (JNIEnv *env, jobject obj, jclass klass,\n-\t\t\t              jmethodID id, va_list vargs)\n+\t\t\t    jmethodID id, va_list vargs)\n {\n   obj = unwrap (obj);\n   klass = unwrap (klass);\n@@ -909,7 +909,7 @@ _Jv_JNI_CallAnyVoidMethodV (JNIEnv *env, jobject obj, jclass klass,\n template<invocation_type style>\n static void JNICALL\n _Jv_JNI_CallAnyVoidMethod (JNIEnv *env, jobject obj, jclass klass,\n-\t\t\t             jmethodID method, ...)\n+\t\t\t   jmethodID method, ...)\n {\n   va_list args;\n \n@@ -921,7 +921,7 @@ _Jv_JNI_CallAnyVoidMethod (JNIEnv *env, jobject obj, jclass klass,\n template<invocation_type style>\n static void JNICALL\n _Jv_JNI_CallAnyVoidMethodA (JNIEnv *env, jobject obj, jclass klass,\n-\t\t\t              jmethodID id, jvalue *args)\n+\t\t\t    jmethodID id, jvalue *args)\n {\n   jclass decl_class = klass ? klass : obj->getClass ();\n   JvAssert (decl_class != NULL);\n@@ -960,7 +960,7 @@ _Jv_JNI_CallAnyVoidMethodA (JNIEnv *env, jobject obj, jclass klass,\n template<typename T>\n static T JNICALL\n _Jv_JNI_CallMethodV (JNIEnv *env, jobject obj, \n-                               jmethodID id, va_list args)\n+\t\t     jmethodID id, va_list args)\n {\n   return _Jv_JNI_CallAnyMethodV<T, normal> (env, obj, NULL, id, args);\n }\n@@ -986,14 +986,14 @@ _Jv_JNI_CallMethod (JNIEnv *env, jobject obj, jmethodID id, ...)\n template<typename T>\n static T JNICALL\n _Jv_JNI_CallMethodA (JNIEnv *env, jobject obj, \n-                               jmethodID id, jvalue *args)\n+\t\t     jmethodID id, jvalue *args)\n {\n   return _Jv_JNI_CallAnyMethodA<T, normal> (env, obj, NULL, id, args);\n }\n \n static void JNICALL\n _Jv_JNI_CallVoidMethodV (JNIEnv *env, jobject obj, \n-                                   jmethodID id, va_list args)\n+\t\t\t jmethodID id, va_list args)\n {\n   _Jv_JNI_CallAnyVoidMethodV<normal> (env, obj, NULL, id, args);\n }\n@@ -1010,7 +1010,7 @@ _Jv_JNI_CallVoidMethod (JNIEnv *env, jobject obj, jmethodID id, ...)\n \n static void JNICALL\n _Jv_JNI_CallVoidMethodA (JNIEnv *env, jobject obj, \n-                                   jmethodID id, jvalue *args)\n+\t\t\t jmethodID id, jvalue *args)\n {\n   _Jv_JNI_CallAnyVoidMethodA<normal> (env, obj, NULL, id, args);\n }\n@@ -1020,7 +1020,7 @@ _Jv_JNI_CallVoidMethodA (JNIEnv *env, jobject obj,\n template<typename T>\n static T JNICALL\n _Jv_JNI_CallStaticMethodV (JNIEnv *env, jclass klass,\n-\t\t\t             jmethodID id, va_list args)\n+\t\t\t   jmethodID id, va_list args)\n {\n   JvAssert (((id->accflags) & java::lang::reflect::Modifier::STATIC));\n   JvAssert (java::lang::Class::class$.isInstance (unwrap (klass)));\n@@ -1033,7 +1033,7 @@ _Jv_JNI_CallStaticMethodV (JNIEnv *env, jclass klass,\n template<typename T>\n static T JNICALL\n _Jv_JNI_CallStaticMethod (JNIEnv *env, jclass klass, \n-                                    jmethodID id, ...)\n+\t\t\t  jmethodID id, ...)\n {\n   va_list args;\n   T result;\n@@ -1054,7 +1054,7 @@ _Jv_JNI_CallStaticMethod (JNIEnv *env, jclass klass,\n template<typename T>\n static T JNICALL\n _Jv_JNI_CallStaticMethodA (JNIEnv *env, jclass klass, jmethodID id,\n-\t\t\t             jvalue *args)\n+\t\t\t   jvalue *args)\n {\n   JvAssert (((id->accflags) & java::lang::reflect::Modifier::STATIC));\n   JvAssert (java::lang::Class::class$.isInstance (unwrap (klass)));\n@@ -1064,14 +1064,14 @@ _Jv_JNI_CallStaticMethodA (JNIEnv *env, jclass klass, jmethodID id,\n \n static void JNICALL\n _Jv_JNI_CallStaticVoidMethodV (JNIEnv *env, jclass klass, \n-                                         jmethodID id, va_list args)\n+\t\t\t       jmethodID id, va_list args)\n {\n   _Jv_JNI_CallAnyVoidMethodV<static_type> (env, NULL, klass, id, args);\n }\n \n static void JNICALL\n _Jv_JNI_CallStaticVoidMethod (JNIEnv *env, jclass klass, \n-                                        jmethodID id, ...)\n+\t\t\t      jmethodID id, ...)\n {\n   va_list args;\n \n@@ -1082,14 +1082,14 @@ _Jv_JNI_CallStaticVoidMethod (JNIEnv *env, jclass klass,\n \n static void JNICALL\n _Jv_JNI_CallStaticVoidMethodA (JNIEnv *env, jclass klass, \n-                                         jmethodID id, jvalue *args)\n+\t\t\t       jmethodID id, jvalue *args)\n {\n   _Jv_JNI_CallAnyVoidMethodA<static_type> (env, NULL, klass, id, args);\n }\n \n static jobject JNICALL\n _Jv_JNI_NewObjectV (JNIEnv *env, jclass klass,\n-\t\t              jmethodID id, va_list args)\n+\t\t    jmethodID id, va_list args)\n {\n   JvAssert (klass && ! klass->isArray ());\n   JvAssert (! strcmp (id->name->data, \"<init>\")\n@@ -1125,7 +1125,7 @@ _Jv_JNI_NewObject (JNIEnv *env, jclass klass, jmethodID id, ...)\n \n static jobject JNICALL\n _Jv_JNI_NewObjectA (JNIEnv *env, jclass klass, jmethodID id,\n-\t\t              jvalue *args)\n+\t\t    jvalue *args)\n {\n   JvAssert (klass && ! klass->isArray ());\n   JvAssert (! strcmp (id->name->data, \"<init>\")\n@@ -1165,7 +1165,7 @@ _Jv_JNI_SetField (JNIEnv *, jobject obj, jfieldID field, T value)\n template<jboolean is_static>\n static jfieldID JNICALL\n _Jv_JNI_GetAnyFieldID (JNIEnv *env, jclass clazz,\n-\t\t                 const char *name, const char *sig)\n+\t\t       const char *name, const char *sig)\n {\n   try\n     {\n@@ -1301,7 +1301,7 @@ _Jv_JNI_GetStringUTFLength (JNIEnv *, jstring string)\n \n static const char * JNICALL\n _Jv_JNI_GetStringUTFChars (JNIEnv *env, jstring string, \n-                                     jboolean *isCopy)\n+\t\t\t   jboolean *isCopy)\n {\n   try\n     {\n@@ -1333,7 +1333,7 @@ _Jv_JNI_ReleaseStringUTFChars (JNIEnv *, jstring, const char *utf)\n \n static void JNICALL\n _Jv_JNI_GetStringRegion (JNIEnv *env, jstring string, jsize start, \n-                                   jsize len, jchar *buf)\n+\t\t\t jsize len, jchar *buf)\n {\n   string = unwrap (string);\n   jchar *result = _Jv_GetStringChars (string);\n@@ -1355,7 +1355,7 @@ _Jv_JNI_GetStringRegion (JNIEnv *env, jstring string, jsize start,\n \n static void JNICALL\n _Jv_JNI_GetStringUTFRegion (JNIEnv *env, jstring str, jsize start,\n-\t\t\t              jsize len, char *buf)\n+\t\t\t    jsize len, char *buf)\n {\n   str = unwrap (str);\n     \n@@ -1398,7 +1398,7 @@ _Jv_JNI_GetArrayLength (JNIEnv *, jarray array)\n \n static jarray JNICALL\n _Jv_JNI_NewObjectArray (JNIEnv *env, jsize length, \n-                                  jclass elementClass, jobject init)\n+\t\t\tjclass elementClass, jobject init)\n {\n   try\n     {\n@@ -1418,7 +1418,7 @@ _Jv_JNI_NewObjectArray (JNIEnv *env, jsize length,\n \n static jobject JNICALL\n _Jv_JNI_GetObjectArrayElement (JNIEnv *env, jobjectArray array, \n-                                         jsize index)\n+\t\t\t       jsize index)\n {\n   if ((unsigned) index >= (unsigned) array->length)\n     _Jv_ThrowBadArrayIndex (index);\n@@ -1428,7 +1428,7 @@ _Jv_JNI_GetObjectArrayElement (JNIEnv *env, jobjectArray array,\n \n static void JNICALL\n _Jv_JNI_SetObjectArrayElement (JNIEnv *env, jobjectArray array, \n-                                         jsize index, jobject value)\n+\t\t\t       jsize index, jobject value)\n {\n   try\n     {\n@@ -1465,7 +1465,7 @@ _Jv_JNI_NewPrimitiveArray (JNIEnv *env, jsize length)\n template<typename T, jclass K>\n static T * JNICALL\n _Jv_JNI_GetPrimitiveArrayElements (JNIEnv *env, JArray<T> *array,\n-\t\t\t\t             jboolean *isCopy)\n+\t\t\t\t   jboolean *isCopy)\n {\n   array = unwrap (array);\n   if (! _Jv_JNI_check_types (env, array, K))\n@@ -1483,7 +1483,7 @@ _Jv_JNI_GetPrimitiveArrayElements (JNIEnv *env, JArray<T> *array,\n template<typename T, jclass K>\n static void JNICALL\n _Jv_JNI_ReleasePrimitiveArrayElements (JNIEnv *env, JArray<T> *array,\n-\t\t\t\t                 T *, jint /* mode */)\n+\t\t\t\t       T *, jint /* mode */)\n {\n   array = unwrap (array);\n   _Jv_JNI_check_types (env, array, K);\n@@ -1496,7 +1496,7 @@ _Jv_JNI_ReleasePrimitiveArrayElements (JNIEnv *env, JArray<T> *array,\n template<typename T, jclass K>\n static void JNICALL\n _Jv_JNI_GetPrimitiveArrayRegion (JNIEnv *env, JArray<T> *array,\n-\t\t\t\t           jsize start, jsize len,\n+\t\t\t\t jsize start, jsize len,\n \t\t\t\t T *buf)\n {\n   array = unwrap (array);\n@@ -1528,7 +1528,7 @@ _Jv_JNI_GetPrimitiveArrayRegion (JNIEnv *env, JArray<T> *array,\n template<typename T, jclass K>\n static void JNICALL\n _Jv_JNI_SetPrimitiveArrayRegion (JNIEnv *env, JArray<T> *array,\n-\t\t\t\t           jsize start, jsize len, T *buf)\n+\t\t\t\t jsize start, jsize len, T *buf)\n {\n   array = unwrap (array);\n   if (! _Jv_JNI_check_types (env, array, K))\n@@ -1557,7 +1557,7 @@ _Jv_JNI_SetPrimitiveArrayRegion (JNIEnv *env, JArray<T> *array,\n \n static void * JNICALL\n _Jv_JNI_GetPrimitiveArrayCritical (JNIEnv *, jarray array,\n-\t\t\t\t             jboolean *isCopy)\n+\t\t\t\t   jboolean *isCopy)\n {\n   array = unwrap (array);\n   // FIXME: does this work?\n@@ -1608,7 +1608,7 @@ _Jv_JNI_MonitorExit (JNIEnv *env, jobject obj)\n // JDK 1.2\n jobject JNICALL\n _Jv_JNI_ToReflectedField (JNIEnv *env, jclass cls, jfieldID fieldID,\n-\t\t\t            jboolean)\n+\t\t\t  jboolean)\n {\n   try\n     {\n@@ -1639,7 +1639,7 @@ _Jv_JNI_FromReflectedField (JNIEnv *, jobject f)\n \n jobject JNICALL\n _Jv_JNI_ToReflectedMethod (JNIEnv *env, jclass klass, jmethodID id,\n-        \t\t             jboolean)\n+\t\t\t   jboolean)\n {\n   using namespace java::lang::reflect;\n \n@@ -1861,8 +1861,8 @@ nathash_add (const JNINativeMethod *method)\n \n static jint JNICALL\n _Jv_JNI_RegisterNatives (JNIEnv *env, jclass klass,\n-\t\t\t           const JNINativeMethod *methods,\n-\t\t\t           jint nMethods)\n+\t\t\t const JNINativeMethod *methods,\n+\t\t\t jint nMethods)\n {\n   // Synchronize while we do the work.  This must match\n   // synchronization in some other functions that manipulate or use\n@@ -2308,7 +2308,7 @@ _Jv_JNI_AttachCurrentThread (JavaVM *vm, void **penv, void *args)\n \n static jint JNICALL\n _Jv_JNI_AttachCurrentThreadAsDaemon (JavaVM *vm, void **penv, \n-                                               void *args)\n+\t\t\t\t     void *args)\n {\n   return _Jv_JNI_AttachCurrentThread (vm, NULL, penv, args, true);\n }"}]}