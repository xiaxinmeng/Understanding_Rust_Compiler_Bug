{"sha": "0d24ff5d2450f8de4c1b6aa1e7b727cf49bc2e1b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGQyNGZmNWQyNDUwZjhkZTRjMWI2YWExZTdiNzI3Y2Y0OWJjMmUxYg==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@cygnus.com", "date": "1997-09-15T22:28:34Z"}, "committer": {"name": "Jim Wilson", "email": "wilson@gcc.gnu.org", "date": "1997-09-15T22:28:34Z"}, "message": "Patch from Richard Henderson for large frames.\n\n\t* alpha/alpha.c (output_prolog): New variable sa_reg.  Use it for\n\tout-or-range reg_offset.\n\t(output_epilog): Likewise.\n\nFrom-SVN: r15458", "tree": {"sha": "ac81a2e948e3063220a9bd42602e09de475b8a09", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ac81a2e948e3063220a9bd42602e09de475b8a09"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0d24ff5d2450f8de4c1b6aa1e7b727cf49bc2e1b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0d24ff5d2450f8de4c1b6aa1e7b727cf49bc2e1b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0d24ff5d2450f8de4c1b6aa1e7b727cf49bc2e1b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0d24ff5d2450f8de4c1b6aa1e7b727cf49bc2e1b/comments", "author": null, "committer": null, "parents": [{"sha": "4da0677ba75d38283579fb4d6054641384310653", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4da0677ba75d38283579fb4d6054641384310653", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4da0677ba75d38283579fb4d6054641384310653"}], "stats": {"total": 59, "additions": 51, "deletions": 8}, "files": [{"sha": "0fd4105b35037a9ee4240a70daff290caedfea15", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0d24ff5d2450f8de4c1b6aa1e7b727cf49bc2e1b/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0d24ff5d2450f8de4c1b6aa1e7b727cf49bc2e1b/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=0d24ff5d2450f8de4c1b6aa1e7b727cf49bc2e1b", "patch": "@@ -1,3 +1,9 @@\n+Mon Sep 15 15:24:00 1997  Richard Henderson  <rth@cygnus.com>\n+\n+\t* alpha/alpha.c (output_prolog): New variable sa_reg.  Use it for\n+\tout-or-range reg_offset.\n+\t(output_epilog): Likewise.\n+\n Mon Sep 15 15:39:26 1997  Jeffrey A Law  (law@cygnus.com)\n \n \t* cse.c (simplify_relational_operation): If MODE specifies a"}, {"sha": "a054f8c630d04d220da7b3585811ae06749b83e9", "filename": "gcc/config/alpha/alpha.c", "status": "modified", "additions": 45, "deletions": 8, "changes": 53, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0d24ff5d2450f8de4c1b6aa1e7b727cf49bc2e1b/gcc%2Fconfig%2Falpha%2Falpha.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0d24ff5d2450f8de4c1b6aa1e7b727cf49bc2e1b/gcc%2Fconfig%2Falpha%2Falpha.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Falpha.c?ref=0d24ff5d2450f8de4c1b6aa1e7b727cf49bc2e1b", "patch": "@@ -2317,7 +2317,7 @@ output_prolog (file, size)\n   int int_reg_save_area_size = 0;\n   rtx insn;\n   unsigned reg_mask = 0;\n-  int i;\n+  int i, sa_reg;\n \n   /* Ecoff can handle multiple .file directives, so put out file and lineno.\n      We have to do that before the .ent directive as we cannot switch\n@@ -2463,12 +2463,30 @@ output_prolog (file, size)\n \t        ? HARD_FRAME_POINTER_REGNUM : STACK_POINTER_REGNUM),\n \t       frame_size, current_function_pretend_args_size);\n     }\n+\n+  /* Cope with very large offsets to the register save area.  */\n+  sa_reg = 30;\n+  if (reg_offset + sa_size > 0x8000)\n+    {\n+      int low = ((reg_offset & 0xffff) ^ 0x8000) - 0x8000;\n+      if (low + sa_size <= 0x8000)\n+\t{\n+\t  add_long_const (file, reg_offset - low, 30, 24, 24);\n+\t  reg_offset = low;\n+\t}\n+      else\n+\t{\n+          add_long_const (file, reg_offset, 30, 24, 24);\n+          reg_offset = 0;\n+\t}\n+      sa_reg = 24;\n+    }\n     \n   /* Save register 26 if any other register needs to be saved.  */\n   if (sa_size != 0)\n     {\n       reg_mask |= 1 << 26;\n-      fprintf (file, \"\\tstq $26,%d($30)\\n\", reg_offset);\n+      fprintf (file, \"\\tstq $26,%d($%d)\\n\", reg_offset, sa_reg);\n       reg_offset += 8;\n       int_reg_save_area_size += 8;\n     }\n@@ -2478,7 +2496,7 @@ output_prolog (file, size)\n     if (! fixed_regs[i] && ! call_used_regs[i] && regs_ever_live[i] && i != 26)\n       {\n \treg_mask |= 1 << i;\n-\tfprintf (file, \"\\tstq $%d,%d($30)\\n\", i, reg_offset);\n+\tfprintf (file, \"\\tstq $%d,%d($%d)\\n\", i, reg_offset, sa_reg);\n \treg_offset += 8;\n \tint_reg_save_area_size += 8;\n       }\n@@ -2496,7 +2514,7 @@ output_prolog (file, size)\n \t&& regs_ever_live[i + 32])\n       {\n \treg_mask |= 1 << i;\n-\tfprintf (file, \"\\tstt $f%d,%d($30)\\n\", i, reg_offset);\n+\tfprintf (file, \"\\tstt $f%d,%d($%d)\\n\", i, reg_offset, sa_reg);\n \treg_offset += 8;\n       }\n \n@@ -2542,18 +2560,37 @@ output_epilog (file, size)\n   if (insn == 0 || GET_CODE (insn) != BARRIER)\n     {\n       int fp_offset = 0;\n+      int sa_reg;\n \n       final_prescan_insn (NULL_RTX, NULL_PTR, 0);\n \n       /* If we have a frame pointer, restore SP from it.  */\n       if (frame_pointer_needed)\n \tfprintf (file, \"\\tbis $15,$15,$30\\n\");\n \n+      /* Cope with large offsets to the register save area.  */\n+      sa_reg = 30;\n+      if (reg_offset + sa_size > 0x8000)\n+\t{\n+          int low = ((reg_offset & 0xffff) ^ 0x8000) - 0x8000;\n+          if (low + sa_size <= 0x8000)\n+\t    {\n+\t      add_long_const (file, reg_offset - low, 30, 24, 24);\n+\t      reg_offset = low;\n+\t    }\n+          else\n+\t    {\n+              add_long_const (file, reg_offset, 30, 24, 24);\n+              reg_offset = 0;\n+\t    }\n+\t  sa_reg = 24;\n+\t}\n+\n       /* Restore all the registers, starting with the return address\n \t register.  */\n       if (sa_size != 0)\n \t{\n-\t  fprintf (file, \"\\tldq $26,%d($30)\\n\", reg_offset);\n+\t  fprintf (file, \"\\tldq $26,%d($%d)\\n\", reg_offset, sa_reg);\n \t  reg_offset += 8;\n \t}\n \n@@ -2568,15 +2605,15 @@ output_epilog (file, size)\n \t    if (i == HARD_FRAME_POINTER_REGNUM && frame_pointer_needed)\n \t      fp_offset = reg_offset;\n \t    else\n-\t      fprintf (file, \"\\tldq $%d,%d($30)\\n\", i, reg_offset);\n+\t      fprintf (file, \"\\tldq $%d,%d($%d)\\n\", i, reg_offset, sa_reg);\n \t    reg_offset += 8;\n \t  }\n \n       for (i = 0; i < 32; i++)\n \tif (! fixed_regs[i + 32] && ! call_used_regs[i + 32]\n \t    && regs_ever_live[i + 32])\n \t  {\n-\t    fprintf (file, \"\\tldt $f%d,%d($30)\\n\", i, reg_offset);\n+\t    fprintf (file, \"\\tldt $f%d,%d($%d)\\n\", i, reg_offset, sa_reg);\n \t    reg_offset += 8;\n \t  }\n \n@@ -2591,7 +2628,7 @@ output_epilog (file, size)\n \t now.  This must be done in one instruction immediately\n \t before the SP update.  */\n       if (restore_fp && fp_offset)\n-\tfprintf (file, \"\\tldq $15,%d($30)\\n\", fp_offset);\n+\tfprintf (file, \"\\tldq $15,%d($%d)\\n\", fp_offset, sa_reg);\n \n       /* Now update the stack pointer, if needed.  Only one instruction must\n \t modify the stack pointer.  It must be the last instruction in the"}]}