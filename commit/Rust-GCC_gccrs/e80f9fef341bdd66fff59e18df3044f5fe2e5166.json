{"sha": "e80f9fef341bdd66fff59e18df3044f5fe2e5166", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTgwZjlmZWYzNDFiZGQ2NmZmZjU5ZTE4ZGYzMDQ0ZjVmZTJlNTE2Ng==", "commit": {"author": {"name": "Andreas Schwab", "email": "schwab@gcc.gnu.org", "date": "2014-10-19T17:47:29Z"}, "committer": {"name": "Andreas Schwab", "email": "schwab@gcc.gnu.org", "date": "2014-10-19T17:47:29Z"}, "message": "md.texi (RTL Template): Correct equivalent match_operand expression.\n\n* doc/md.texi (RTL Template) [match_scratch]: Correct equivalent\nmatch_operand expression.\n\nFrom-SVN: r216441", "tree": {"sha": "e8f9e604a4e80562cc3acc497d46afcf4619ea84", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e8f9e604a4e80562cc3acc497d46afcf4619ea84"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e80f9fef341bdd66fff59e18df3044f5fe2e5166", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e80f9fef341bdd66fff59e18df3044f5fe2e5166", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e80f9fef341bdd66fff59e18df3044f5fe2e5166", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e80f9fef341bdd66fff59e18df3044f5fe2e5166/comments", "author": null, "committer": null, "parents": [{"sha": "4435bb9232cf3a3ab015f7bc0f8dbe562bd8e0c8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4435bb9232cf3a3ab015f7bc0f8dbe562bd8e0c8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4435bb9232cf3a3ab015f7bc0f8dbe562bd8e0c8"}], "stats": {"total": 101, "additions": 53, "deletions": 48}, "files": [{"sha": "bee63fe9710f1212e53f59b4b58cb2d4ba85f53b", "filename": "gcc/ChangeLog", "status": "modified", "additions": 52, "deletions": 47, "changes": 99, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e80f9fef341bdd66fff59e18df3044f5fe2e5166/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e80f9fef341bdd66fff59e18df3044f5fe2e5166/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=e80f9fef341bdd66fff59e18df3044f5fe2e5166", "patch": "@@ -1,3 +1,8 @@\n+2014-10-19  Andreas Schwab  <schwab@linux-m68k.org>\n+\n+\t* doc/md.texi (RTL Template) [match_scratch]: Correct equivalent\n+\tmatch_operand expression.\n+\n 2014-10-19  Adhemerval Zanella  <azanella@linux.vnet.ibm.com>\n \t    David Edelsohn  <dje.gcc@gmail.com>\n \n@@ -206,7 +211,7 @@\n \n 2014-10-16  Andrew MacLeod  <amacleod@redhat.com>\n \n-\t* function.h: Flatten file.  Remove includes, adjust prototypes to \n+\t* function.h: Flatten file.  Remove includes, adjust prototypes to\n \treflect only what is in function.h.\n \t(enum direction, struct args_size, struct locate_and_pad_arg_data,\n \tADD_PARM_SIZE, SUB_PARM_SIZE, ARGS_SIZE_TREE, ARGS_SIZE_RTX): Relocate\n@@ -820,9 +825,9 @@\n \tRevert:\n \t2011-08-19  H.J. Lu  <hongjiu.lu@intel.com>\n \n-        PR middle-end/49721\n-        * explow.c (convert_memory_address_addr_space): Also permute the\n-        conversion and addition of constant for zero-extend.\n+\tPR middle-end/49721\n+\t* explow.c (convert_memory_address_addr_space): Also permute the\n+\tconversion and addition of constant for zero-extend.\n \n 2014-10-14  DJ Delorie  <dj@redhat.com>\n \n@@ -965,8 +970,8 @@\n \t    Kirill Yukhin  <kirill.yukhin@intel.com>\n \t    Michael Zolotukhin  <michael.v.zolotukhin@intel.com>\n \n-        * config/i386/sse.md\n-        (define_mode_iterator REDUC_SMINMAX_MODE): Add V64QI and V32HI modes.\n+\t* config/i386/sse.md\n+\t(define_mode_iterator REDUC_SMINMAX_MODE): Add V64QI and V32HI modes.\n \n 2014-10-14  Alexander Ivchenko  <alexander.ivchenko@intel.com>\n \t    Maxim Kuznetsov  <maxim.kuznetsov@intel.com>\n@@ -1015,9 +1020,9 @@\n \t    Kirill Yukhin  <kirill.yukhin@intel.com>\n \t    Michael Zolotukhin  <michael.v.zolotukhin@intel.com>\n \n-        * config/i386/sse.md\n-        (define_insn \"avx512bw_umulhrswv32hi3<mask_name>\"): New.\n-        (define_expand \"<ssse3_avx2>_pmulhrsw<mode>3_mask\"): Ditto.\n+\t* config/i386/sse.md\n+\t(define_insn \"avx512bw_umulhrswv32hi3<mask_name>\"): New.\n+\t(define_expand \"<ssse3_avx2>_pmulhrsw<mode>3_mask\"): Ditto.\n \n 2014-10-14  Alexander Ivchenko  <alexander.ivchenko@intel.com>\n \t    Maxim Kuznetsov  <maxim.kuznetsov@intel.com>\n@@ -1362,8 +1367,8 @@\n 2014-10-13  John David Anglin  <dave.anglin@nrc-cnrc.gc.ca>\n \n \tPR libfortran/63471\n-        * config/pa/pa-hpux11.h (TARGET_OS_CPP_BUILTINS): Define _REENTRANT\n-        when _HPUX_SOURCE is defined.\n+\t* config/pa/pa-hpux11.h (TARGET_OS_CPP_BUILTINS): Define _REENTRANT\n+\twhen _HPUX_SOURCE is defined.\n \n 2014-10-13  Jan Hubicka  <hubicka@ucw.cz>\n \n@@ -1474,7 +1479,7 @@\n \t* internal-fn.def (UBSAN_OBJECT_SIZE): Define.\n \t* opts.c (common_handle_option): Handle -fsanitize=object-size.\n \t* ubsan.c: Include tree-object-size.h.\n-\t(ubsan_type_descriptor): Call tree_to_uhwi instead of tree_to_shwi. \n+\t(ubsan_type_descriptor): Call tree_to_uhwi instead of tree_to_shwi.\n \t(ubsan_expand_bounds_ifn): Use false instead of 0.\n \t(ubsan_expand_objsize_ifn): New function.\n \t(instrument_object_size): New function.\n@@ -1506,11 +1511,11 @@\n \tTARGET_FIX_ERR_A53_835769_DEFAULT.\n \t* config/aarch64/aarch64.opt (mfix-cortex-a53-835769): Set Init\n \tvalue to 2.\n-\t* doc/install.texi (aarch64*-*-*): Document \n+\t* doc/install.texi (aarch64*-*-*): Document\n \tnew --enable-fix-cortex-a53-835769 option.\n \n 2014-10-10  Kyrylo Tkachov  <kyrylo.tkachov@arm.com>\n-            Ramana Radhakrishnan  <ramana.radhakrishnan@arm.com>\n+\t    Ramana Radhakrishnan  <ramana.radhakrishnan@arm.com>\n \n \t* config/aarch64/aarch64.h (FINAL_PRESCAN_INSN): Define.\n \t(ADJUST_INSN_LENGTH): Define.\n@@ -1680,7 +1685,7 @@\n 2014-10-08  Rong Xu  <xur@google.com>\n \n \t* gcov-tool.c (profile_overlap): New driver function\n-\tto compute profile overlap. \n+\tto compute profile overlap.\n \t(print_overlap_usage_message): New.\n \t(overlap_usage): New.\n \t(do_overlap): New.\n@@ -2358,9 +2363,9 @@\n 2014-09-26  Christophe Lyon  <christophe.lyon@linaro.org>\n \n \t* config/aarch64/aarch64-linux.h (ASAN_CC1_SPEC): Define.\n-        (CC1_SPEC): Define.\n-        * config/aarch64/aarch64.c (aarch64_asan_shadow_offset): New function.\n-        (TARGET_ASAN_SHADOW_OFFSET): Define.\n+\t(CC1_SPEC): Define.\n+\t* config/aarch64/aarch64.c (aarch64_asan_shadow_offset): New function.\n+\t(TARGET_ASAN_SHADOW_OFFSET): Define.\n \n 2014-09-26  Martin Liska  <mliska@suse.cz>\n \n@@ -3700,15 +3705,15 @@\n \n 2014-09-15  Trevor Saunders  <tsaunders@mozilla.com>\n \n-    \t* cfgrtl.c, combine.c, config/arc/arc.c, config/mcore/mcore.c,\n-    \tconfig/rs6000/rs6000.c, config/sh/sh.c, cprop.c, dwarf2out.c,\n-    \temit-rtl.c, final.c, function.c, gcse.c, jump.c, reg-stack.c,\n-    \treload1.c, reorg.c, resource.c, sel-sched-ir.c: Replace INSN_DELETED_P\n-    \tmacro with statically checked member functions.\n-    \t* rtl.h (rtx_insn::deleted): New method.\n-    \t(rtx_insn::set_deleted): Likewise.\n-    \t(rtx_insn::set_undeleted): Likewise.\n-    \t(INSN_DELETED_P): Remove.\n+\t* cfgrtl.c, combine.c, config/arc/arc.c, config/mcore/mcore.c,\n+\tconfig/rs6000/rs6000.c, config/sh/sh.c, cprop.c, dwarf2out.c,\n+\temit-rtl.c, final.c, function.c, gcse.c, jump.c, reg-stack.c,\n+\treload1.c, reorg.c, resource.c, sel-sched-ir.c: Replace INSN_DELETED_P\n+\tmacro with statically checked member functions.\n+\t* rtl.h (rtx_insn::deleted): New method.\n+\t(rtx_insn::set_deleted): Likewise.\n+\t(rtx_insn::set_undeleted): Likewise.\n+\t(INSN_DELETED_P): Remove.\n \n 2014-09-15  Trevor Saunders  <tsaunders@mozilla.com>\n \n@@ -5164,9 +5169,9 @@\n \tRamana Radhakrishnan  <ramana.radhakrishnan@arm.com>\n \n \t * config/aarch64/aarch64-elf-raw.h (ENDFILE_SPEC): Add crtfastmath.o.\n-         * config/aarch64/aarch64-linux.h (GNU_USER_TARGET_MATH_ENDFILE_SPEC):\n+\t * config/aarch64/aarch64-linux.h (GNU_USER_TARGET_MATH_ENDFILE_SPEC):\n \tDefine.\n-        (ENDFILE_SPEC): Define and use GNU_USER_TARGET_MATH_ENDFILE_SPEC.\n+\t(ENDFILE_SPEC): Define and use GNU_USER_TARGET_MATH_ENDFILE_SPEC.\n \n 2014-09-09  David Malcolm  <dmalcolm@redhat.com>\n \n@@ -8225,8 +8230,8 @@\n \n 2014-08-27  Kaz Kojima  <kkojima@gcc.gnu.org>\n \n-        PR target/62261\n-        * config/sh/sh.md (ashlsi3): Handle negative shift count for\n+\tPR target/62261\n+\t* config/sh/sh.md (ashlsi3): Handle negative shift count for\n \tTARGET_SHMEDIA.\n \t(ashldi3, ashrsi3, ashrdi3, lshrsi3, lshrdi3): Likewise.\n \n@@ -8852,7 +8857,7 @@\n \t    Kirill Yukhin  <kirill.yukhin@intel.com>\n \t    Michael Zolotukhin  <michael.v.zolotukhin@intel.com>\n \n-        * config/i386/sse.md\n+\t* config/i386/sse.md\n \t(define_mode_iterator VI48_AVX2_48_AVX512F): Delete.\n \t(define_mode_iterator VI48_AVX512BW): New.\n \t(define_insn \"<avx2_avx512f>_<shift_insn>v<mode><mask_name>\"): Delete.\n@@ -9394,7 +9399,7 @@\n \n \t* sel-sched-ir.h (struct vinsn_def): Strengthen field \"insn_rtx\"\n \tfrom rtx to rtx_insn *.\n-        (VINSN_INSN_RTX): Eliminate rvalue function and...\n+\t(VINSN_INSN_RTX): Eliminate rvalue function and...\n \t(SET_VINSN_INSN): ...lvalue function in favor of...\n \t(VINSN_INSN_RTX): reinstate this old macro.\n \n@@ -14782,7 +14787,7 @@\n \t    Kirill Yukhin  <kirill.yukhin@intel.com>\n \t    Michael Zolotukhin  <michael.v.zolotukhin@intel.com>\n \n-        * config/i386/sse.md (define_mode_attr avx512): New.\n+\t* config/i386/sse.md (define_mode_attr avx512): New.\n \t(define_mode_attr sse2_avx_avx512f): Allow V8HI, V16HI, V32HI, V2DI,\n \tV4DI modes.\n \t(define_mode_attr sse2_avx2): Allow V64QI, V32HI, V4TI modes.\n@@ -14852,7 +14857,7 @@\n \t    Kirill Yukhin  <kirill.yukhin@intel.com>\n \t    Michael Zolotukhin  <michael.v.zolotukhin@intel.com>\n \n-        * config/i386/i386.md\n+\t* config/i386/i386.md\n \t(define_attr \"isa\"): Add avx512bw,noavx512bw.\n \t(define_attr \"enabled\"): Ditto.\n \t(define_split): Add 32/64-bit mask logic.\n@@ -15143,8 +15148,8 @@\n \t(compute_bounds_for_param): use isl_val instead of isl_int\n \t(compute_bounds_for_loop): likewise\n \t* graphite-interchange.c: include isl/val.h, isl/val_gmp.h\n-        (build_linearized_memory_access): use isl_val instead of isl_int\n-        (pdr_stride_in_loop): likewise\n+\t(build_linearized_memory_access): use isl_val instead of isl_int\n+\t(pdr_stride_in_loop): likewise\n \t* graphite-optimize-isl.c:\n \t(getPrevectorMap): use isl_val instead of isl_int\n \t* graphite-poly.c:\n@@ -15172,7 +15177,7 @@\n \t    Kirill Yukhin  <kirill.yukhin@intel.com>\n \t    Michael Zolotukhin  <michael.v.zolotukhin@intel.com>\n \n-        * common/config/i386/i386-common.c\n+\t* common/config/i386/i386-common.c\n \t(OPTION_MASK_ISA_AVX512VL_SET): Define.\n \t(OPTION_MASK_ISA_AVX512F_UNSET): Update.\n \t(ix86_handle_option): Handle OPT_mavx512vl.\n@@ -15204,7 +15209,7 @@\n \t    Kirill Yukhin  <kirill.yukhin@intel.com>\n \t    Michael Zolotukhin  <michael.v.zolotukhin@intel.com>\n \n-        * common/config/i386/i386-common.c\n+\t* common/config/i386/i386-common.c\n \t(OPTION_MASK_ISA_AVX512BW_SET) : Define.\n \t(OPTION_MASK_ISA_AVX512BW_UNSET): Ditto.\n \t(OPTION_MASK_ISA_AVX512VL_UNSET) : Ditto.\n@@ -15342,7 +15347,7 @@\n \t    Kirill Yukhin  <kirill.yukhin@intel.com>\n \t    Michael Zolotukhin  <michael.v.zolotukhin@intel.com>\n \n-        * common/config/i386/i386-common.c\n+\t* common/config/i386/i386-common.c\n \t(OPTION_MASK_ISA_AVX512DQ_SET): Define.\n \t(OPTION_MASK_ISA_AVX512DQ_UNSET): Ditto.\n \t(ix86_handle_option): Handle OPT_mavx512dq.\n@@ -15531,7 +15536,7 @@\n \tTARGET_FLOAT and TARGET_SIMD.\n \n 2014-08-07  Ian Bolton  <ian.bolton@arm.com>\n-            Kyrylo Tkachov  <kyrylo.tkachov@arm.com>\n+\t    Kyrylo Tkachov  <kyrylo.tkachov@arm.com>\n \n \t* config/aarch64/aarch64.c (aarch64_expand_mov_immediate):\n \tUse MOVN when one of the half-words is 0xffff.\n@@ -15649,9 +15654,9 @@\n \n 2014-08-05  David Malcolm  <dmalcolm@redhat.com>\n \n-        * gdbhooks.py (find_gcc_source_dir): New helper function.\n-        (class PassNames): New class, locating and parsing passes.def.\n-        (class BreakOnPass): New command \"break-on-pass\".\n+\t* gdbhooks.py (find_gcc_source_dir): New helper function.\n+\t(class PassNames): New class, locating and parsing passes.def.\n+\t(class BreakOnPass): New command \"break-on-pass\".\n \n 2014-08-05  Trevor Saunders  <tsaunders@mozilla.com>\n \n@@ -15859,7 +15864,7 @@\n \tPTA_RDRND and PTA_MOVBE for bdver4.\n \n 2014-08-04  Kyrylo Tkachov  <kyrylo.tkachov@arm.com>\n-            James Greenhalgh  <james.greenhalgh@arm.com>\n+\t    James Greenhalgh  <james.greenhalgh@arm.com>\n \n \t* doc/md.texi (clrsb): Document.\n \t(clz): Change reference to x into operand 1.\n@@ -15873,7 +15878,7 @@\n \tmove to subtarget in serial version if result is ignored.\n \n 2014-08-04  Ramana Radhakrishnan <ramana.radhakrishnan@arm.com>\n-            Kyrylo Tkachov  <kyrylo.tkachov@arm.com>\n+\t    Kyrylo Tkachov  <kyrylo.tkachov@arm.com>\n \n \t* sched-deps.c (try_group_insn): Generalise macro fusion hook usage\n \tto any two insns.  Update comment.  Rename to sched_macro_fuse_insns.\n@@ -18278,7 +18283,7 @@\n \tIdem.\n \t* config/i386/i386.c (x96_emit_mode_set): Idem.\n \t* config/sh/sh.c (sh_emit_mode_set): Likewise. Handle PR toggle.\n-\t* config/sh/sh.md (toggle_pr): \tDefined if TARGET_FPU_SINGLE.\n+\t* config/sh/sh.md (toggle_pr):\tDefined if TARGET_FPU_SINGLE.\n \t(fpscr_toggle) Disallow from delay slot.\n \t* target.def (emit_mode_set): Add prev_mode parameter.\n \t* doc/tm.texi: Regenerate."}, {"sha": "2f2325e907a805ab87d1c853428b4d57bb25545c", "filename": "gcc/doc/md.texi", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e80f9fef341bdd66fff59e18df3044f5fe2e5166/gcc%2Fdoc%2Fmd.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e80f9fef341bdd66fff59e18df3044f5fe2e5166/gcc%2Fdoc%2Fmd.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fmd.texi?ref=e80f9fef341bdd66fff59e18df3044f5fe2e5166", "patch": "@@ -297,7 +297,7 @@ expression.\n When matching patterns, this is equivalent to\n \n @smallexample\n-(match_operand:@var{m} @var{n} \"scratch_operand\" @var{pred})\n+(match_operand:@var{m} @var{n} \"scratch_operand\" @var{constraint})\n @end smallexample\n \n but, when generating RTL, it produces a (@code{scratch}:@var{m})"}]}