{"sha": "ea1763b1e4fefce5f111b1f914a83e5e3577f444", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWExNzYzYjFlNGZlZmNlNWYxMTFiMWY5MTRhODNlNWUzNTc3ZjQ0NA==", "commit": {"author": {"name": "Nathan Sidwell", "email": "nathan@codesourcery.com", "date": "2004-11-10T17:34:47Z"}, "committer": {"name": "Nathan Sidwell", "email": "nathan@gcc.gnu.org", "date": "2004-11-10T17:34:47Z"}, "message": "re PR c++/18143 (Duplicated thunk with a huge member in the hierarchy)\n\n.:\t* tree.c (tree_check_failed): Emit general error if the list of\n\tnode types is empty.\ncp:\n\tPR c++/18143\n\t* cp-tree.h (NON_THUNK_FUNCTION_CHECK, THUNK_FUNCTION_CHECK): New.\n\t(struct lang_decl_flags): Add thunk_p flag.\n\t(struct lang_decl): Remove separate fixed_offset. Place\n\tcloned_function and fixed_offset into union.\n\t(DECL_CLONED_FUNCTION_P, DECL_CLONED_FUNCTION): Adjust.\n\t(DECL_THUNK_P, SET_DECL_THUNK_P): Adjust.\n\t(THUNK_FIXED_OFFSET): Adjust.\n\t* method.c (make_thunk): Adjust.\n\nFrom-SVN: r90399", "tree": {"sha": "8829016c2ed4010c8ebc2fc7d926015013f72d69", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8829016c2ed4010c8ebc2fc7d926015013f72d69"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ea1763b1e4fefce5f111b1f914a83e5e3577f444", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ea1763b1e4fefce5f111b1f914a83e5e3577f444", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ea1763b1e4fefce5f111b1f914a83e5e3577f444", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ea1763b1e4fefce5f111b1f914a83e5e3577f444/comments", "author": null, "committer": null, "parents": [{"sha": "22d8d62798a3ce51a7e328805593bf675eddf60f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/22d8d62798a3ce51a7e328805593bf675eddf60f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/22d8d62798a3ce51a7e328805593bf675eddf60f"}], "stats": {"total": 123, "additions": 83, "deletions": 40}, "files": [{"sha": "f17008d7a3538049dd8d0d536116de3f48a3eb4a", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ea1763b1e4fefce5f111b1f914a83e5e3577f444/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ea1763b1e4fefce5f111b1f914a83e5e3577f444/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=ea1763b1e4fefce5f111b1f914a83e5e3577f444", "patch": "@@ -1,3 +1,8 @@\n+2004-11-10  Nathan Sidwell  <nathan@codesourcery.com>\n+\n+\t* tree.c (tree_check_failed): Emit general error if the list of\n+\tnode types is empty.\n+\n 2004-11-10  Eric Botcazou  <ebotcazou@libertysurf.fr>\n \n \t* config/sparc/sparc.c (function_arg_union_value): New 'slotno'"}, {"sha": "080e2460aa62017c44b96a286508157db4a864ff", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ea1763b1e4fefce5f111b1f914a83e5e3577f444/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ea1763b1e4fefce5f111b1f914a83e5e3577f444/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=ea1763b1e4fefce5f111b1f914a83e5e3577f444", "patch": "@@ -1,3 +1,15 @@\n+2004-11-10  Nathan Sidwell  <nathan@codesourcery.com>\n+\n+\tPR c++/18143\n+\t* cp-tree.h (NON_THUNK_FUNCTION_CHECK, THUNK_FUNCTION_CHECK): New.\n+\t(struct lang_decl_flags): Add thunk_p flag.\n+\t(struct lang_decl): Remove separate fixed_offset. Place\n+\tcloned_function and fixed_offset into union.\n+\t(DECL_CLONED_FUNCTION_P, DECL_CLONED_FUNCTION): Adjust.\n+\t(DECL_THUNK_P, SET_DECL_THUNK_P): Adjust.\n+\t(THUNK_FIXED_OFFSET): Adjust.\n+\t* method.c (make_thunk): Adjust.\n+\n 2004-11-09  Mark Mitchell  <mark@codesourcery.com>\n \n \tPR c++/18369"}, {"sha": "2f2a226fe45ebf0f4219a10d5223abd3cea20e0a", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 47, "deletions": 25, "changes": 72, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ea1763b1e4fefce5f111b1f914a83e5e3577f444/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ea1763b1e4fefce5f111b1f914a83e5e3577f444/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=ea1763b1e4fefce5f111b1f914a83e5e3577f444", "patch": "@@ -163,6 +163,24 @@ struct diagnostic_context;\n #define BOUND_TEMPLATE_TEMPLATE_PARM_TYPE_CHECK(NODE) \\\n   TREE_CHECK(NODE,BOUND_TEMPLATE_TEMPLATE_PARM)\n \n+#if defined ENABLE_TREE_CHECKING && (GCC_VERSION >= 2007)\n+#define NON_THUNK_FUNCTION_CHECK(NODE) __extension__\t\t\t\\\n+({  const tree __t = (NODE);\t\t\t\t\t\t\\\n+    if (TREE_CODE (__t) != FUNCTION_DECL &&\t\t\t\t\\\n+ \tTREE_CODE (__t) != TEMPLATE_DECL && __t->decl.lang_specific\t\\\n+\t&& __t->decl.lang_specific->decl_flags.thunk_p)\t\t\t\\\n+      tree_check_failed (__t, __FILE__, __LINE__, __FUNCTION__, 0);\t\\\n+    __t; })\n+#define THUNK_FUNCTION_CHECK(NODE) __extension__\t\t\t\\\n+({  const tree __t = (NODE);\t\t\t\t\t\t\\\n+    if (TREE_CODE (__t) != FUNCTION_DECL || !__t->decl.lang_specific\t\\\n+\t|| !__t->decl.lang_specific->decl_flags.thunk_p)\t\t\\\n+      tree_check_failed (__t, __FILE__, __LINE__, __FUNCTION__, 0); \t\\\n+     __t; })\n+#else\n+#define NON_THUNK_FUNCTION_CHECK(NODE) (NODE)\n+#define THUNK_FUNCTION_CHECK(NODE) (NODE)\n+#endif\n \f\n /* Language-dependent contents of an identifier.  */\n \n@@ -1496,9 +1514,10 @@ struct lang_decl_flags GTY(())\n  \n   unsigned u2sel : 1;\n   unsigned can_be_full : 1;\n+  unsigned thunk_p : 1;\n   unsigned this_thunk_p : 1;\n   unsigned repo_available_p : 1;\n-  unsigned dummy : 4;\n+  unsigned dummy : 3;\n \n   union lang_decl_u {\n     /* In a FUNCTION_DECL for which DECL_THUNK_P holds, this is\n@@ -1540,15 +1559,8 @@ struct lang_decl GTY(())\n \n \tunsigned u3sel : 1;\n \tunsigned pending_inline_p : 1;\n-\tunsigned spare : 3;\n+\tunsigned spare : 22;\n \t\n-\t/* In a FUNCTION_DECL for which THUNK_P holds this is the\n-\t   THUNK_FIXED_OFFSET.  The largest object that can be\n-\t   thunked is thus 262144, which is what is required [limits].\n-\t   We have to store a signed value as for regular thunks this\n-\t   is <= 0, and for covariant thunks it is >= 0.  */\n-\tsigned fixed_offset : 19;\n-\n \t/* For a non-thunk function decl, this is a tree list of\n   \t   friendly classes. For a thunk function decl, it is the\n   \t   thunked to function decl.  */\n@@ -1562,9 +1574,17 @@ struct lang_decl GTY(())\n \t   will be chained on the return pointer thunk.  */\n \ttree context;\n \n-\t/* In a FUNCTION_DECL, this is DECL_CLONED_FUNCTION.  */\n-\ttree cloned_function;\n-\n+\tunion lang_decl_u5\n+\t{\n+\t  /* In a non-thunk FUNCTION_DECL or TEMPLATE_DECL, this is\n+\t     DECL_CLONED_FUNCTION.  */\n+\t  tree GTY ((tag (\"0\"))) cloned_function;\n+\t  \n+\t  /* In a FUNCTION_DECL for which THUNK_P holds this is the\n+\t     THUNK_FIXED_OFFSET.  */\n+\t  HOST_WIDE_INT GTY ((tag (\"1\"))) fixed_offset;\n+\t} GTY ((desc (\"%0.decl_flags.thunk_p\"))) u5;\n+\t\n \tunion lang_decl_u3\n \t{\n \t  struct sorted_fields_type * GTY ((tag (\"0\"), reorder (\"resort_sorted_fields\")))\n@@ -1667,16 +1687,17 @@ struct lang_decl GTY(())\n \n /* Nonzero if NODE (a FUNCTION_DECL) is a cloned constructor or\n    destructor.  */\n-#define DECL_CLONED_FUNCTION_P(NODE)\t\t\\\n-  ((TREE_CODE (NODE) == FUNCTION_DECL \t\t\\\n-    || TREE_CODE (NODE) == TEMPLATE_DECL)\t\\\n-   && DECL_LANG_SPECIFIC (NODE)\t\t\t\\\n+#define DECL_CLONED_FUNCTION_P(NODE)\t\t\t\\\n+  ((TREE_CODE (NODE) == FUNCTION_DECL\t\t\t\\\n+    || TREE_CODE (NODE) == TEMPLATE_DECL)\t\t\\\n+   && DECL_LANG_SPECIFIC (NODE)\t\t\t\t\\\n+   && !DECL_LANG_SPECIFIC (NODE)->decl_flags.thunk_p\t\\\n    && DECL_CLONED_FUNCTION (NODE) != NULL_TREE)\n \n /* If DECL_CLONED_FUNCTION_P holds, this is the function that was\n    cloned.  */\n #define DECL_CLONED_FUNCTION(NODE) \\\n-  (DECL_LANG_SPECIFIC (NODE)->u.f.cloned_function)\n+  (DECL_LANG_SPECIFIC (NON_THUNK_FUNCTION_CHECK(NODE))->u.f.u5.cloned_function)\n \n /* Perform an action for each clone of FN, if FN is a function with\n    clones.  This macro should be used like:\n@@ -1868,7 +1889,14 @@ struct lang_decl GTY(())\n /* Nonzero if NODE is a thunk, rather than an ordinary function.  */\n #define DECL_THUNK_P(NODE)\t\t\t\\\n   (TREE_CODE (NODE) == FUNCTION_DECL\t\t\\\n-   && DECL_LANG_FLAG_7 (NODE))\n+   && DECL_LANG_SPECIFIC (NODE)\t\t\t\\\n+   && DECL_LANG_SPECIFIC (NODE)->decl_flags.thunk_p)\n+     \n+/* Set DECL_THUNK_P for node.  */\n+#define SET_DECL_THUNK_P(NODE, THIS_ADJUSTING)\t\t\t\\\n+  (DECL_LANG_SPECIFIC (NODE)->decl_flags.thunk_p = 1,\t\t\\\n+   DECL_LANG_SPECIFIC (NODE)->u.f.u3sel = 1,\t\t\t\\\n+   DECL_LANG_SPECIFIC (NODE)->decl_flags.this_thunk_p = (THIS_ADJUSTING))\n \n /* Nonzero if NODE is a this pointer adjusting thunk.  */\n #define DECL_THIS_THUNK_P(NODE)\t\t\t\\\n@@ -1890,12 +1918,6 @@ struct lang_decl GTY(())\n #define DECL_EXTERN_C_FUNCTION_P(NODE) \\\n   (DECL_NON_THUNK_FUNCTION_P (NODE) && DECL_EXTERN_C_P (NODE))\n \n-/* Set DECL_THUNK_P for node.  */\n-#define SET_DECL_THUNK_P(NODE, THIS_ADJUSTING)\t\t\t\\\n-  (DECL_LANG_FLAG_7 (NODE) = 1, \t\t\t\t\\\n-   DECL_LANG_SPECIFIC (NODE)->u.f.u3sel = 1,\t\t\t\\\n-   DECL_LANG_SPECIFIC (NODE)->decl_flags.this_thunk_p = (THIS_ADJUSTING))\n-\n /* True iff DECL is an entity with vague linkage whose definition is\n    available in this translation unit.  */\n #define DECL_REPO_AVAILABLE_P(NODE) \\\n@@ -2818,7 +2840,7 @@ struct lang_decl GTY(())\n /* An integer indicating how many bytes should be subtracted from the\n    this or result pointer when this function is called.  */\n #define THUNK_FIXED_OFFSET(DECL) \\\n-  (DECL_LANG_SPECIFIC (VAR_OR_FUNCTION_DECL_CHECK (DECL))->u.f.fixed_offset)\n+  (DECL_LANG_SPECIFIC (THUNK_FUNCTION_CHECK (DECL))->u.f.u5.fixed_offset)\n \n /* A tree indicating how to perform the virtual adjustment. For a this\n    adjusting thunk it is the number of bytes to be added to the vtable"}, {"sha": "75f98168a9146b4429cb39c223c8d87382a0d75b", "filename": "gcc/cp/method.c", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ea1763b1e4fefce5f111b1f914a83e5e3577f444/gcc%2Fcp%2Fmethod.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ea1763b1e4fefce5f111b1f914a83e5e3577f444/gcc%2Fcp%2Fmethod.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fmethod.c?ref=ea1763b1e4fefce5f111b1f914a83e5e3577f444", "patch": "@@ -150,8 +150,6 @@ make_thunk (tree function, bool this_adjusting,\n   DECL_SAVED_FUNCTION_DATA (thunk) = NULL;\n   DECL_DESTRUCTOR_P (thunk) = 0;\n   DECL_CONSTRUCTOR_P (thunk) = 0;\n-  /* And neither is it a clone.  */\n-  DECL_CLONED_FUNCTION (thunk) = NULL_TREE;\n   DECL_EXTERNAL (thunk) = 1;\n   DECL_ARTIFICIAL (thunk) = 1;\n   /* Even if this thunk is a member of a local class, we don't"}, {"sha": "97adffabf3ad8db5593ded9a5b4355693c0c0b50", "filename": "gcc/tree.c", "status": "modified", "additions": 19, "deletions": 13, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ea1763b1e4fefce5f111b1f914a83e5e3577f444/gcc%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ea1763b1e4fefce5f111b1f914a83e5e3577f444/gcc%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.c?ref=ea1763b1e4fefce5f111b1f914a83e5e3577f444", "patch": "@@ -5402,8 +5402,9 @@ get_set_constructor_bytes (tree init, unsigned char *buffer, int wd_size)\n #if defined ENABLE_TREE_CHECKING && (GCC_VERSION >= 2007)\n \n /* Complain that the tree code of NODE does not match the expected 0\n-   terminated list of trailing codes. FILE, LINE, and FUNCTION are of\n-   the caller.  */\n+   terminated list of trailing codes. The trailing code list can be\n+   empty, for a more vague error message.  FILE, LINE, and FUNCTION\n+   are of the caller.  */\n \n void\n tree_check_failed (const tree node, const char *file,\n@@ -5418,22 +5419,27 @@ tree_check_failed (const tree node, const char *file,\n   while ((code = va_arg (args, int)))\n     length += 4 + strlen (tree_code_name[code]);\n   va_end (args);\n-  va_start (args, function);\n-  buffer = alloca (length);\n-  length = 0;\n-  while ((code = va_arg (args, int)))\n+  if (length)\n     {\n-      if (length)\n+      va_start (args, function);\n+      length += strlen (\"expected \");\n+      buffer = alloca (length);\n+      length = 0;\n+      while ((code = va_arg (args, int)))\n \t{\n-\t  strcpy (buffer + length, \" or \");\n-\t  length += 4;\n+\t  const char *prefix = length ? \" or \" : \"expected \";\n+\t  \n+\t  strcpy (buffer + length, prefix);\n+\t  length += strlen (prefix);\n+\t  strcpy (buffer + length, tree_code_name[code]);\n+\t  length += strlen (tree_code_name[code]);\n \t}\n-      strcpy (buffer + length, tree_code_name[code]);\n-      length += strlen (tree_code_name[code]);\n+      va_end (args);\n     }\n-  va_end (args);\n+  else\n+    buffer = (char *)\"unexpected node\";\n \n-  internal_error (\"tree check: expected %s, have %s in %s, at %s:%d\",\n+  internal_error (\"tree check: %s, have %s in %s, at %s:%d\",\n \t\t  buffer, tree_code_name[TREE_CODE (node)],\n \t\t  function, trim_filename (file), line);\n }"}]}