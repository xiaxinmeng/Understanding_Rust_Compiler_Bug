{"sha": "8c54c36bdf845cce69641c012e97ef30dc497369", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGM1NGMzNmJkZjg0NWNjZTY5NjQxYzAxMmU5N2VmMzBkYzQ5NzM2OQ==", "commit": {"author": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2014-12-16T18:53:46Z"}, "committer": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2014-12-16T18:53:46Z"}, "message": "re PR go/61273 (gccgo: ICE in Unsafe_type_conversion_expression::do_get_backend [GoSmith])\n\n\tPR go/61273\ncompiler: Send statements should contextually permit composite literals.\n\nFrom-SVN: r218788", "tree": {"sha": "7db52d8bf0adafc96716713bffbb1b146557a5b2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7db52d8bf0adafc96716713bffbb1b146557a5b2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8c54c36bdf845cce69641c012e97ef30dc497369", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8c54c36bdf845cce69641c012e97ef30dc497369", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8c54c36bdf845cce69641c012e97ef30dc497369", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8c54c36bdf845cce69641c012e97ef30dc497369/comments", "author": null, "committer": null, "parents": [{"sha": "01ada710782bb14c86d7caed1813efa593740eab", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/01ada710782bb14c86d7caed1813efa593740eab", "html_url": "https://github.com/Rust-GCC/gccrs/commit/01ada710782bb14c86d7caed1813efa593740eab"}], "stats": {"total": 10, "additions": 5, "deletions": 5}, "files": [{"sha": "a98dd479eb55902367ecbda23df25d03cb74f879", "filename": "gcc/go/gofrontend/parse.cc", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8c54c36bdf845cce69641c012e97ef30dc497369/gcc%2Fgo%2Fgofrontend%2Fparse.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8c54c36bdf845cce69641c012e97ef30dc497369/gcc%2Fgo%2Fgofrontend%2Fparse.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Fparse.cc?ref=8c54c36bdf845cce69641c012e97ef30dc497369", "patch": "@@ -3819,7 +3819,7 @@ Parse::simple_stat(bool may_be_composite_lit, bool* return_exp,\n   token = this->peek_token();\n   if (token->is_op(OPERATOR_CHANOP))\n     {\n-      this->send_stmt(this->verify_not_sink(exp));\n+      this->send_stmt(this->verify_not_sink(exp), may_be_composite_lit);\n       if (return_exp != NULL)\n \t*return_exp = true;\n     }\n@@ -3913,13 +3913,13 @@ Parse::expression_stat(Expression* exp)\n // Channel  = Expression .\n \n void\n-Parse::send_stmt(Expression* channel)\n+Parse::send_stmt(Expression* channel, bool may_be_composite_lit)\n {\n   go_assert(this->peek_token()->is_op(OPERATOR_CHANOP));\n   Location loc = this->location();\n   this->advance_token();\n-  Expression* val = this->expression(PRECEDENCE_NORMAL, false, true, NULL,\n-\t\t\t\t     NULL);\n+  Expression* val = this->expression(PRECEDENCE_NORMAL, false,\n+\t\t\t\t     may_be_composite_lit, NULL, NULL);\n   Statement* s = Statement::make_send_statement(channel, val, loc);\n   this->gogo_->add_statement(s);\n }"}, {"sha": "d55798b682520e7393f4707cd3b44df1162798dc", "filename": "gcc/go/gofrontend/parse.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8c54c36bdf845cce69641c012e97ef30dc497369/gcc%2Fgo%2Fgofrontend%2Fparse.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8c54c36bdf845cce69641c012e97ef30dc497369/gcc%2Fgo%2Fgofrontend%2Fparse.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Fparse.h?ref=8c54c36bdf845cce69641c012e97ef30dc497369", "patch": "@@ -245,7 +245,7 @@ class Parse\n   void statement_list();\n   bool statement_list_may_start_here();\n   void expression_stat(Expression*);\n-  void send_stmt(Expression*);\n+  void send_stmt(Expression*, bool may_be_composite_lit);\n   void inc_dec_stat(Expression*);\n   void assignment(Expression*, bool may_be_composite_lit, Range_clause*);\n   void tuple_assignment(Expression_list*, bool may_be_composite_lit,"}]}