{"sha": "2bdf1dd58b6a19f34898e324c587c6ad3f291da1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MmJkZjFkZDU4YjZhMTlmMzQ4OThlMzI0YzU4N2M2YWQzZjI5MWRhMQ==", "commit": {"author": {"name": "Ajit Agarwal", "email": "ajitkum@xilinx.com", "date": "2015-05-05T01:08:45Z"}, "committer": {"name": "Michael Eager", "email": "eager@gcc.gnu.org", "date": "2015-05-05T01:08:45Z"}, "message": "The changes are made in the patch for optimized usage of pcmpne/pcmpeq instructions.\n\nThe changes are made in the patch for optimized usage of pcmpne/pcmpeq\ninstructions. The xor with register to register is replaced with pcmpeq\n/pcmpne instructions and for immediate check still the xori will be used.\nThe purpose of the change is to acheive the aggressive usage of pcmpne\n/pcmpeq instructions instead of xor being used for comparison.\n\nChangeLog:\n2015-05-04  Ajit Agarwal  <ajitkum@xilinx.com>\n\n\t* config/microblaze/microblaze.md (cbranchsi4): Added immediate\n\tconstraints.\n\t(cbranchsi4_reg): New.\n\t* config/microblaze/microblaze.c\n\t(microblaze_expand_conditional_branch_reg): New.\n\t* config/microblaze/microblaze-protos.h\n\t(microblaze_expand_conditional_branch_reg): New prototype.\n\nFrom-SVN: r222791", "tree": {"sha": "e3b6cd33ee621f691c535acc00f4e13c53410a92", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e3b6cd33ee621f691c535acc00f4e13c53410a92"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2bdf1dd58b6a19f34898e324c587c6ad3f291da1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2bdf1dd58b6a19f34898e324c587c6ad3f291da1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2bdf1dd58b6a19f34898e324c587c6ad3f291da1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2bdf1dd58b6a19f34898e324c587c6ad3f291da1/comments", "author": null, "committer": null, "parents": [{"sha": "0bb87e8a83d3b9e0d56e1cddb4dad667eaa6e195", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0bb87e8a83d3b9e0d56e1cddb4dad667eaa6e195", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0bb87e8a83d3b9e0d56e1cddb4dad667eaa6e195"}], "stats": {"total": 81, "additions": 75, "deletions": 6}, "files": [{"sha": "ce501cac13dfe6d2aac6cd3e10d4124992c7ae34", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2bdf1dd58b6a19f34898e324c587c6ad3f291da1/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2bdf1dd58b6a19f34898e324c587c6ad3f291da1/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=2bdf1dd58b6a19f34898e324c587c6ad3f291da1", "patch": "@@ -1,3 +1,13 @@\n+2015-05-04  Ajit Agarwal  <ajitkum@xilinx.com>\n+\n+\t* config/microblaze/microblaze.md (cbranchsi4): Added immediate\n+\tconstraints.\n+\t(cbranchsi4_reg): New.\n+\t* config/microblaze/microblaze.c\n+\t(microblaze_expand_conditional_branch_reg): New.\n+\t* config/microblaze/microblaze-protos.h\n+\t(microblaze_expand_conditional_branch_reg): New prototype.\n+\n 2015-05-04  Ajit Agarwal  <ajitkum@xilinx.com>\n \n \t* config/microblaze/microblaze.md (peephole2): New."}, {"sha": "3ece34e086f1f7aa996c52dd634b44a917f952fe", "filename": "gcc/config/microblaze/microblaze-protos.h", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2bdf1dd58b6a19f34898e324c587c6ad3f291da1/gcc%2Fconfig%2Fmicroblaze%2Fmicroblaze-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2bdf1dd58b6a19f34898e324c587c6ad3f291da1/gcc%2Fconfig%2Fmicroblaze%2Fmicroblaze-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmicroblaze%2Fmicroblaze-protos.h?ref=2bdf1dd58b6a19f34898e324c587c6ad3f291da1", "patch": "@@ -32,7 +32,8 @@ extern int microblaze_expand_shift (rtx *);\n extern bool microblaze_expand_move (machine_mode, rtx *);\n extern bool microblaze_expand_block_move (rtx, rtx, rtx, rtx);\n extern void microblaze_expand_divide (rtx *);\n-extern void microblaze_expand_conditional_branch (machine_mode, rtx *); \n+extern void microblaze_expand_conditional_branch (machine_mode, rtx *);\n+extern void microblaze_expand_conditional_branch_reg (enum machine_mode, rtx *);\n extern void microblaze_expand_conditional_branch_sf (rtx *); \n extern int microblaze_can_use_return_insn (void);\n extern void print_operand (FILE *, rtx, int);"}, {"sha": "372be5d8742625100a6c04c8851de0c06306c36f", "filename": "gcc/config/microblaze/microblaze.c", "status": "modified", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2bdf1dd58b6a19f34898e324c587c6ad3f291da1/gcc%2Fconfig%2Fmicroblaze%2Fmicroblaze.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2bdf1dd58b6a19f34898e324c587c6ad3f291da1/gcc%2Fconfig%2Fmicroblaze%2Fmicroblaze.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmicroblaze%2Fmicroblaze.c?ref=2bdf1dd58b6a19f34898e324c587c6ad3f291da1", "patch": "@@ -3471,6 +3471,51 @@ microblaze_expand_conditional_branch (machine_mode mode, rtx operands[])\n     }\n }\n \n+void\n+microblaze_expand_conditional_branch_reg (enum machine_mode mode,\n+                                          rtx operands[])\n+{\n+  enum rtx_code code = GET_CODE (operands[0]);\n+  rtx cmp_op0 = operands[1];\n+  rtx cmp_op1 = operands[2];\n+  rtx label1 = operands[3];\n+  rtx comp_reg = gen_reg_rtx (SImode);\n+  rtx condition;\n+\n+  gcc_assert ((GET_CODE (cmp_op0) == REG)\n+               || (GET_CODE (cmp_op0) == SUBREG));\n+\n+  /* If comparing against zero, just test source reg.  */\n+  if (cmp_op1 == const0_rtx)\n+    {\n+      comp_reg = cmp_op0;\n+      condition = gen_rtx_fmt_ee (signed_condition (code),\n+                                  SImode, comp_reg, const0_rtx);\n+      emit_jump_insn (gen_condjump (condition, label1));\n+    }\n+  else if (code == EQ)\n+    {\n+      emit_insn (gen_seq_internal_pat (comp_reg,\n+                                       cmp_op0, cmp_op1));\n+      condition = gen_rtx_EQ (SImode, comp_reg, const0_rtx);\n+      emit_jump_insn (gen_condjump (condition, label1));\n+    }\n+  else if (code == NE)\n+    {\n+      emit_insn (gen_sne_internal_pat (comp_reg, cmp_op0,\n+                                       cmp_op1));\n+      condition = gen_rtx_NE (SImode, comp_reg, const0_rtx);\n+      emit_jump_insn (gen_condjump (condition, label1));\n+    }\n+  else\n+    {\n+      /* Generate compare and branch in single instruction. */\n+      cmp_op1 = force_reg (mode, cmp_op1);\n+      condition = gen_rtx_fmt_ee (code, mode, cmp_op0, cmp_op1);\n+      emit_jump_insn (gen_branch_compare (condition, cmp_op0,\n+                                         cmp_op1, label1));\n+    }\n+}\n \n void\n microblaze_expand_conditional_branch_sf (rtx operands[])"}, {"sha": "596968d5b5609d2316a618a8f32352105459e378", "filename": "gcc/config/microblaze/microblaze.md", "status": "modified", "additions": 18, "deletions": 5, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2bdf1dd58b6a19f34898e324c587c6ad3f291da1/gcc%2Fconfig%2Fmicroblaze%2Fmicroblaze.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2bdf1dd58b6a19f34898e324c587c6ad3f291da1/gcc%2Fconfig%2Fmicroblaze%2Fmicroblaze.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmicroblaze%2Fmicroblaze.md?ref=2bdf1dd58b6a19f34898e324c587c6ad3f291da1", "patch": "@@ -1680,17 +1680,30 @@\n \n (define_expand \"cbranchsi4\"\n   [(set (pc)\n-\t(if_then_else (match_operator 0 \"ordered_comparison_operator\"\n-\t\t       [(match_operand:SI 1 \"register_operand\")\n-\t\t        (match_operand:SI 2 \"arith_operand\")])\n-\t\t      (label_ref (match_operand 3 \"\"))\n-\t\t      (pc)))]\n+        (if_then_else (match_operator 0 \"ordered_comparison_operator\"\n+                       [(match_operand:SI 1 \"register_operand\")\n+                        (match_operand:SI 2 \"arith_operand\" \"I,i\")])\n+                      (label_ref (match_operand 3 \"\"))\n+                      (pc)))]\n   \"\"\n {\n   microblaze_expand_conditional_branch (SImode, operands);\n   DONE;\n })\n \n+(define_expand \"cbranchsi4_reg\"\n+  [(set (pc)\n+        (if_then_else (match_operator 0 \"ordered_comparison_operator\"\n+                       [(match_operand:SI 1 \"register_operand\")\n+                        (match_operand:SI 2 \"register_operand\")])\n+                      (label_ref (match_operand 3 \"\"))\n+                      (pc)))]\n+  \"\"\n+{\n+  microblaze_expand_conditional_branch_reg (SImode, operands);\n+  DONE;\n+})\n+\n (define_expand \"cbranchsf4\"\n   [(set (pc)\n \t(if_then_else (match_operator 0 \"ordered_comparison_operator\""}]}