{"sha": "c85b8963694b31d041e7d5adc99ba25fff62ad7b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Yzg1Yjg5NjM2OTRiMzFkMDQxZTdkNWFkYzk5YmEyNWZmZjYyYWQ3Yg==", "commit": {"author": {"name": "Torbjorn Granlund", "email": "tege@gnu.org", "date": "1993-01-19T21:03:05Z"}, "committer": {"name": "Torbjorn Granlund", "email": "tege@gnu.org", "date": "1993-01-19T21:03:05Z"}, "message": "(print_operand): Handle 'S' and 'B' for conditions.\n\nHandle 'I' for printing 'i' when CONST_INT.\nHandle 'k' for ones-complement of CONST_INT.\n(incscc_operator): Remove.\n\nFrom-SVN: r3279", "tree": {"sha": "10a3bd0b939db5dbafd77c218af688305807068f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/10a3bd0b939db5dbafd77c218af688305807068f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c85b8963694b31d041e7d5adc99ba25fff62ad7b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c85b8963694b31d041e7d5adc99ba25fff62ad7b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c85b8963694b31d041e7d5adc99ba25fff62ad7b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c85b8963694b31d041e7d5adc99ba25fff62ad7b/comments", "author": null, "committer": null, "parents": [{"sha": "6f672dc06a7467f7edeff0316e8d6778becf5b20", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6f672dc06a7467f7edeff0316e8d6778becf5b20", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6f672dc06a7467f7edeff0316e8d6778becf5b20"}], "stats": {"total": 88, "additions": 71, "deletions": 17}, "files": [{"sha": "40610b3064468a6d26f81d3bc52692f4b6231a00", "filename": "gcc/config/pa/pa.c", "status": "modified", "additions": 71, "deletions": 17, "changes": 88, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c85b8963694b31d041e7d5adc99ba25fff62ad7b/gcc%2Fconfig%2Fpa%2Fpa.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c85b8963694b31d041e7d5adc99ba25fff62ad7b/gcc%2Fconfig%2Fpa%2Fpa.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Fpa.c?ref=c85b8963694b31d041e7d5adc99ba25fff62ad7b", "patch": "@@ -1954,7 +1954,7 @@ print_operand (file, x, code)\n \t}\n       else\n \tbreak;\n-    case 'C':\n+    case 'C':\t\t\t/* Plain (C)ondition */\n     case 'X':\n       switch (GET_CODE (x))\n \t{\t\n@@ -1984,7 +1984,7 @@ print_operand (file, x, code)\n \t  abort ();\n \t}\n       return;\n-    case 'N':\n+    case 'N':\t\t\t/* Condition, (N)egated */\n     case 'Y':\n       switch (GET_CODE (x))\n \t{\n@@ -2014,6 +2014,75 @@ print_operand (file, x, code)\n \t  abort ();\n \t}\n       return;\n+    case 'S':\t\t\t/* Condition, operands are (S)wapped.  */\n+      switch (GET_CODE (x))\n+\t{\n+\tcase EQ:\n+\t  fprintf (file, \"=\");  break;\n+\tcase NE:\n+\t  fprintf (file, \"<>\");  break;\n+\tcase GT:\n+\t  fprintf (file, \"<\");  break;\n+\tcase GE:\n+\t  fprintf (file, \"<=\");  break;\n+\tcase GEU:\n+\t  fprintf (file, \"<<=\");  break;\n+\tcase GTU:\n+\t  fprintf (file, \"<<\");  break;\n+\tcase LT:\n+\t  fprintf (file, \">\");  break;\n+\tcase LE:\n+\t  fprintf (file, \">=\");  break;\n+\tcase LEU:\n+\t  fprintf (file, \">>=\");  break;\n+\tcase LTU:\n+\t  fprintf (file, \">>\");  break;\n+\tdefault:\n+\t  printf (\"Can't grok '%c' operator:\\n\", code);\n+\t  debug_rtx (x);\n+\t  abort ();\n+\t}\t  \n+      return;\n+    case 'B':\t\t\t/* Condition, (B)oth swapped and negate.  */\n+      switch (GET_CODE (x))\n+\t{\n+\tcase EQ:\n+\t  fprintf (file, \"<>\");  break;\n+\tcase NE:\n+\t  fprintf (file, \"=\");  break;\n+\tcase GT:\n+\t  fprintf (file, \">=\");  break;\n+\tcase GE:\n+\t  fprintf (file, \">\");  break;\n+\tcase GEU:\n+\t  fprintf (file, \">>\");  break;\n+\tcase GTU:\n+\t  fprintf (file, \">>=\");  break;\n+\tcase LT:\n+\t  fprintf (file, \"<=\");  break;\n+\tcase LE:\n+\t  fprintf (file, \"<\");  break;\n+\tcase LEU:\n+\t  fprintf (file, \"<<\");  break;\n+\tcase LTU:\n+\t  fprintf (file, \"<<=\");  break;\n+\tdefault:\n+\t  printf (\"Can't grok '%c' operator:\\n\", code);\n+\t  debug_rtx (x);\n+\t  abort ();\n+\t}\t  \n+      return;\n+    case 'k':\n+      if (GET_CODE (x) == CONST_INT)\n+\t{\n+\t  fprintf (file, \"%d\", ~INTVAL (x));\n+\t  return;\n+\t}\n+      abort();\n+    case 'I':\n+      if (GET_CODE (x) == CONST_INT)\n+\tfputs (\"i\", file);\n+      return;\n     case 'M':\n       switch (GET_CODE (XEXP (x, 0)))\n \t{\n@@ -2623,20 +2692,6 @@ fmpysuboperands(operands)\n   return 1;\n }\n \n-\n-/* Return 1 iff OP is a valid operator to use in an incscc \n-   instruction.  Adding or subtracting the condition code\n-   to/from another operand is valid on the PA, so return 1 \n-   for PLUS or MINUS.  */\n-int\n-incscc_operator (op, mode)\n-     rtx op;\n-     enum machine_mode mode;\n-{\n-  return (GET_CODE (op) == PLUS || GET_CODE (op) == MINUS);\n-}\n-\n-\n /* Return 1 if OP is suitable for the second add operand (the unshifed \n    operand) in an shadd instruction.   Allow CONST_INT to work around\n    a reload bug.  */\n@@ -2672,4 +2727,3 @@ shadd_constant_p (val)\n   else\n     return 0;\n }\n-"}]}