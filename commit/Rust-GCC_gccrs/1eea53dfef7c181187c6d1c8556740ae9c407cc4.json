{"sha": "1eea53dfef7c181187c6d1c8556740ae9c407cc4", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWVlYTUzZGZlZjdjMTgxMTg3YzZkMWM4NTU2NzQwYWU5YzQwN2NjNA==", "commit": {"author": {"name": "Andrew Pinski", "email": "andrew_pinski@playstation.sony.com", "date": "2008-02-22T21:21:11Z"}, "committer": {"name": "Andrew Pinski", "email": "pinskia@gcc.gnu.org", "date": "2008-02-22T21:21:11Z"}, "message": "re PR c++/34715 (always_inline with templates and not declared as always_inline but definition has it)\n\n2008-02-22  Andrew Pinski  <andrew_pinski@playstation.sony.com>\n\n        PR C++/34715\n        * decl.c (duplicate_decls): Merge DECL_DISREGARD_INLINE_LIMITS for\n        template decls' function decl.\n\n2008-02-22  Andrew Pinski  <andrew_pinski@playstation.sony.com>\n\n        PR C++/34715\n        * g++.dg/ext/always_inline-1.C: New test.\n        * g++.dg/ext/always_inline-2.C: New test.\n        * g++.dg/ext/always_inline-3.C: New test.\n        * g++.dg/ext/always_inline-4.C: New test.\n\nFrom-SVN: r132558", "tree": {"sha": "2e28932094f40b110cf5d60e656e39a948ee722c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2e28932094f40b110cf5d60e656e39a948ee722c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1eea53dfef7c181187c6d1c8556740ae9c407cc4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1eea53dfef7c181187c6d1c8556740ae9c407cc4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1eea53dfef7c181187c6d1c8556740ae9c407cc4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1eea53dfef7c181187c6d1c8556740ae9c407cc4/comments", "author": null, "committer": null, "parents": [{"sha": "5114c2a3200bce2c19d95a26b02c7b0b37c7a137", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5114c2a3200bce2c19d95a26b02c7b0b37c7a137", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5114c2a3200bce2c19d95a26b02c7b0b37c7a137"}], "stats": {"total": 117, "additions": 117, "deletions": 0}, "files": [{"sha": "19709c10920403c4302c19645797f3ca9f450115", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1eea53dfef7c181187c6d1c8556740ae9c407cc4/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1eea53dfef7c181187c6d1c8556740ae9c407cc4/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=1eea53dfef7c181187c6d1c8556740ae9c407cc4", "patch": "@@ -1,3 +1,9 @@\n+2008-02-22  Andrew Pinski  <andrew_pinski@playstation.sony.com>\n+\n+\tPR C++/34715\n+\t* decl.c (duplicate_decls): Merge DECL_DISREGARD_INLINE_LIMITS for\n+\ttemplate decls' function decl.\n+\n 2008-02-22  Paolo Carlini  <pcarlini@suse.de>\n \n \tPR c++/35282"}, {"sha": "82c55e0ec6330883060ec397df51cbf84a4e8222", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1eea53dfef7c181187c6d1c8556740ae9c407cc4/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1eea53dfef7c181187c6d1c8556740ae9c407cc4/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=1eea53dfef7c181187c6d1c8556740ae9c407cc4", "patch": "@@ -1675,13 +1675,18 @@ duplicate_decls (tree newdecl, tree olddecl, bool newdecl_is_friend)\n \t\t= DECL_INTERFACE_KNOWN (new_result);\n \t      DECL_DECLARED_INLINE_P (old_result)\n \t\t= DECL_DECLARED_INLINE_P (new_result);\n+\t      DECL_DISREGARD_INLINE_LIMITS (old_result)\n+\t        |= DECL_DISREGARD_INLINE_LIMITS (new_result);\n+\n \t    }\n \t  else\n \t    {\n \t      DECL_INLINE (old_result)\n \t\t|= DECL_INLINE (new_result);\n \t      DECL_DECLARED_INLINE_P (old_result)\n \t\t|= DECL_DECLARED_INLINE_P (new_result);\n+\t      DECL_DISREGARD_INLINE_LIMITS (old_result)\n+\t        |= DECL_DISREGARD_INLINE_LIMITS (new_result);\n \t      check_redeclaration_exception_specification (newdecl, olddecl);\n \t    }\n \t}"}, {"sha": "378f04b074ac8bb7f34bb8f20390c8af613b710b", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1eea53dfef7c181187c6d1c8556740ae9c407cc4/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1eea53dfef7c181187c6d1c8556740ae9c407cc4/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=1eea53dfef7c181187c6d1c8556740ae9c407cc4", "patch": "@@ -1,3 +1,11 @@\n+2008-02-22  Andrew Pinski  <andrew_pinski@playstation.sony.com>\n+\n+\tPR C++/34715\n+\t* g++.dg/ext/always_inline-1.C: New test.\n+\t* g++.dg/ext/always_inline-2.C: New test.\n+\t* g++.dg/ext/always_inline-3.C: New test.\n+\t* g++.dg/ext/always_inline-4.C: New test.\n+\n 2008-02-22  Hans-Peter Nilsson  <hp@axis.com>\n \n \t* gcc.target/cris/asm-b-1.c: New test."}, {"sha": "284fd17a005d071149711411be5ecfe399e9526d", "filename": "gcc/testsuite/g++.dg/ext/always_inline-1.C", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1eea53dfef7c181187c6d1c8556740ae9c407cc4/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Falways_inline-1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1eea53dfef7c181187c6d1c8556740ae9c407cc4/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Falways_inline-1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Falways_inline-1.C?ref=1eea53dfef7c181187c6d1c8556740ae9c407cc4", "patch": "@@ -0,0 +1,26 @@\n+// { dg-options \"-O0\" }\n+// { dg-do compile }\n+// PR C++/34715\n+\n+\n+namespace X\n+{\n+ template <class T>\n+ const T& min(const T& a, const T& b);\n+\n+ template <class T>\n+ inline __attribute__ ((always_inline)) const T& min(const T& a, const T& b)\n+ {\n+  return a < b ? a : b;\n+ }\n+}\n+template <class T>\n+inline __attribute__ ((always_inline)) T y(const T& a, const T& b)\n+{\n+ return X::min(a, b);\n+}\n+int main()\n+{\n+ int a = 0, b = 0;\n+ return y(a, b);\n+}"}, {"sha": "31123c19229b921fb9a6629bd628acf51c51850b", "filename": "gcc/testsuite/g++.dg/ext/always_inline-2.C", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1eea53dfef7c181187c6d1c8556740ae9c407cc4/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Falways_inline-2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1eea53dfef7c181187c6d1c8556740ae9c407cc4/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Falways_inline-2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Falways_inline-2.C?ref=1eea53dfef7c181187c6d1c8556740ae9c407cc4", "patch": "@@ -0,0 +1,26 @@\n+// { dg-options \"-O0\" }\n+// { dg-do compile }\n+// PR C++/34715\n+\n+\n+namespace X\n+{\n+ template <class T>\n+ const T& min123(const T& a, const T& b);\n+}\n+\n+\n+template <class T>\n+inline __attribute__ ((always_inline)) const T& X::min123(const T& a, const T& b)\n+{\n+ return a < b ? a : b;\n+}\n+int main()\n+{\n+ int a, b;\n+ return X::min123(a, b);\n+}\n+\n+\n+\n+// { dg-final { scan-assembler-not \"min123\" } }"}, {"sha": "e008932bf2a84c92fbb04f826ebab63ae6752de3", "filename": "gcc/testsuite/g++.dg/ext/always_inline-3.C", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1eea53dfef7c181187c6d1c8556740ae9c407cc4/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Falways_inline-3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1eea53dfef7c181187c6d1c8556740ae9c407cc4/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Falways_inline-3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Falways_inline-3.C?ref=1eea53dfef7c181187c6d1c8556740ae9c407cc4", "patch": "@@ -0,0 +1,26 @@\n+// { dg-options \"-O0\" }\n+// { dg-do compile }\n+// PR C++/34715\n+\n+\n+namespace X\n+{\n+ template <class T>\n+ inline __attribute__ ((always_inline)) const T& min123(const T& a, const T& b);\n+}\n+\n+\n+template <class T>\n+inline __attribute__ ((always_inline)) const T& X::min123(const T& a, const T& b)\n+{\n+ return a < b ? a : b;\n+}\n+int main()\n+{\n+ int a, b;\n+ return X::min123(a, b);\n+}\n+\n+\n+\n+// { dg-final { scan-assembler-not \"min123\" } }"}, {"sha": "e9507619354172816ebecb864ce22f18affcac33", "filename": "gcc/testsuite/g++.dg/ext/always_inline-4.C", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1eea53dfef7c181187c6d1c8556740ae9c407cc4/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Falways_inline-4.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1eea53dfef7c181187c6d1c8556740ae9c407cc4/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Falways_inline-4.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Falways_inline-4.C?ref=1eea53dfef7c181187c6d1c8556740ae9c407cc4", "patch": "@@ -0,0 +1,20 @@\n+// { dg-options \"-O0\" }\n+// { dg-do compile }\n+// PR C++/34715\n+\n+ template <class T>\n+ const T& min123(const T& a, const T& b);\n+template <class T>\n+inline __attribute__ ((always_inline)) const T& \n+min123(const T& a, const T& b)\n+{\n+ return a < b ? a : b;\n+}\n+int main()\n+{\n+ int a, b;\n+ return min123(a, b);\n+}\n+\n+\n+// { dg-final { scan-assembler-not \"min123\" } }"}]}