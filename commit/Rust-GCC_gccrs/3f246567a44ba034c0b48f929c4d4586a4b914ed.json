{"sha": "3f246567a44ba034c0b48f929c4d4586a4b914ed", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2YyNDY1NjdhNDRiYTAzNGMwYjQ4ZjkyOWM0ZDQ1ODZhNGI5MTRlZA==", "commit": {"author": {"name": "Jos\u00e9 Rui Faustino de Sousa", "email": "jrfsousa@gmail.com", "date": "2019-11-11T10:18:14Z"}, "committer": {"name": "Tobias Burnus", "email": "burnus@gcc.gnu.org", "date": "2019-11-11T10:18:14Z"}, "message": "PR fortran/92142 - CFI_setpointer corrupts descriptor\n\n2019-11-11  Jos\u00e9 Rui Faustino de Sousa  <jrfsousa@gmail.com>\n\n        libgfortran/\n        PR fortran/92142\n        * runtime/ISO_Fortran_binding.c (CFI_setpointer): Don't\n        override descriptor attribute; with -fcheck, check that\n        it is a pointer.\n\n        gcc/testsuite/\n        PR fortran/92142\n        * gcc/testsuite/gfortran.dg/ISO_Fortran_binding_16.c: New.\n        * gcc/testsuite/gfortran.dg/ISO_Fortran_binding_16.f90: New.\n        * gcc/testsuite/gfortran.dg/ISO_Fortran_binding_10.c: Correct\n        upper bounds for case 0.\n\nFrom-SVN: r278048", "tree": {"sha": "1f4588827caf5b8df93c515cc20a1a7c61b3e8d9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1f4588827caf5b8df93c515cc20a1a7c61b3e8d9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3f246567a44ba034c0b48f929c4d4586a4b914ed", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3f246567a44ba034c0b48f929c4d4586a4b914ed", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3f246567a44ba034c0b48f929c4d4586a4b914ed", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3f246567a44ba034c0b48f929c4d4586a4b914ed/comments", "author": {"login": "jrfsousa", "id": 56982651, "node_id": "MDQ6VXNlcjU2OTgyNjUx", "avatar_url": "https://avatars.githubusercontent.com/u/56982651?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jrfsousa", "html_url": "https://github.com/jrfsousa", "followers_url": "https://api.github.com/users/jrfsousa/followers", "following_url": "https://api.github.com/users/jrfsousa/following{/other_user}", "gists_url": "https://api.github.com/users/jrfsousa/gists{/gist_id}", "starred_url": "https://api.github.com/users/jrfsousa/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jrfsousa/subscriptions", "organizations_url": "https://api.github.com/users/jrfsousa/orgs", "repos_url": "https://api.github.com/users/jrfsousa/repos", "events_url": "https://api.github.com/users/jrfsousa/events{/privacy}", "received_events_url": "https://api.github.com/users/jrfsousa/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "a5aeee56d897cb1120bf4d2a61c8f62c45fecb5b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a5aeee56d897cb1120bf4d2a61c8f62c45fecb5b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a5aeee56d897cb1120bf4d2a61c8f62c45fecb5b"}], "stats": {"total": 106, "additions": 97, "deletions": 9}, "files": [{"sha": "d03a6fd70b18381b3083af5ef453d105d5a18ed7", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3f246567a44ba034c0b48f929c4d4586a4b914ed/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3f246567a44ba034c0b48f929c4d4586a4b914ed/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=3f246567a44ba034c0b48f929c4d4586a4b914ed", "patch": "@@ -1,3 +1,11 @@\n+2019-11-11  Jos\u00e9 Rui Faustino de Sousa  <jrfsousa@gmail.com>\n+\n+\tPR fortran/92142\n+\t* gcc/testsuite/gfortran.dg/ISO_Fortran_binding_16.c: New.\n+\t* gcc/testsuite/gfortran.dg/ISO_Fortran_binding_16.f90: New.\n+\t* gcc/testsuite/gfortran.dg/ISO_Fortran_binding_10.c: Correct\n+\tupper bounds for case 0.\n+\n 2019-11-11  Thomas Schwinge  <thomas@codesourcery.com>\n \n \t* gfortran.dg/goacc/common-block-1.f90: Fix OpenACC directives"}, {"sha": "9f06e2dd7794d150e12ed088563ea9a94ba4041f", "filename": "gcc/testsuite/gfortran.dg/ISO_Fortran_binding_10.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3f246567a44ba034c0b48f929c4d4586a4b914ed/gcc%2Ftestsuite%2Fgfortran.dg%2FISO_Fortran_binding_10.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3f246567a44ba034c0b48f929c4d4586a4b914ed/gcc%2Ftestsuite%2Fgfortran.dg%2FISO_Fortran_binding_10.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2FISO_Fortran_binding_10.c?ref=3f246567a44ba034c0b48f929c4d4586a4b914ed", "patch": "@@ -15,7 +15,7 @@ void si(CFI_cdesc_t *this, int flag, int *status)\n   bool err;\n   CFI_CDESC_T(1) that;\n   CFI_index_t lb[] = { 0, 0 };\n-  CFI_index_t ub[] = { 4, 1 };\n+  CFI_index_t ub[] = { 4, 0 };\n   CFI_index_t st[] = { 2, 0 };\n   int chksum[] = { 9, 36, 38 };\n \n@@ -50,7 +50,7 @@ void si(CFI_cdesc_t *this, int flag, int *status)\n \n   if (err)\n     {\n-      printf(\"FAIL C: contiguity for flag value %i - is %i\\n\",flag, value);\n+      printf(\"FAIL C: contiguity for flag value %i - is %i\\n\", flag, value);\n       *status = 10;\n       return;\n     }"}, {"sha": "cdee0b89efe28feceffce7a105c3e8fba2184721", "filename": "gcc/testsuite/gfortran.dg/ISO_Fortran_binding_16.c", "status": "added", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3f246567a44ba034c0b48f929c4d4586a4b914ed/gcc%2Ftestsuite%2Fgfortran.dg%2FISO_Fortran_binding_16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3f246567a44ba034c0b48f929c4d4586a4b914ed/gcc%2Ftestsuite%2Fgfortran.dg%2FISO_Fortran_binding_16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2FISO_Fortran_binding_16.c?ref=3f246567a44ba034c0b48f929c4d4586a4b914ed", "patch": "@@ -0,0 +1,40 @@\n+/* Test the fix for PR92142. */\n+\n+#include \"../../../libgfortran/ISO_Fortran_binding.h\"\n+\n+#include <stdlib.h>\n+\n+int c_setpointer(CFI_cdesc_t *);\n+\n+int c_setpointer(CFI_cdesc_t *ip)\n+{\n+  CFI_cdesc_t *yp = NULL;\n+  void *auxp = ip->base_addr;\n+  int ierr;\n+  int status;\n+\n+  /* Setting up the pointer */\n+  ierr = 1;\n+  yp = malloc(sizeof(*ip));\n+  if (yp == NULL) return ierr;\n+  status = CFI_establish(yp, NULL, CFI_attribute_pointer, ip->type, ip->elem_len, ip->rank, NULL);\n+  if (status != CFI_SUCCESS) return ierr;\n+  if (yp->attribute != CFI_attribute_pointer) return ierr;\n+  /* Set the pointer to ip */\n+  ierr = 2;\n+  status = CFI_setpointer(yp, ip, NULL);\n+  if (status != CFI_SUCCESS) return ierr;\n+  if (yp->attribute != CFI_attribute_pointer) return ierr;\n+  /* Set the pointer to NULL */\n+  ierr = 3;\n+  status = CFI_setpointer(yp, NULL, NULL);\n+  if (status != CFI_SUCCESS) return ierr;\n+  if (yp->attribute != CFI_attribute_pointer) return ierr;\n+  /* \"Set\" the ip variable to yp (should not be possible) */\n+  ierr = 4;\n+  status = CFI_setpointer(ip, yp, NULL);\n+  if (status != CFI_INVALID_ATTRIBUTE) return ierr;\n+  if (ip->attribute != CFI_attribute_other) return ierr;\n+  if (ip->base_addr != auxp) return ierr;\n+  return 0;\n+}"}, {"sha": "799f34b1287517eaa006ebe263f533a8b1cde119", "filename": "gcc/testsuite/gfortran.dg/ISO_Fortran_binding_16.f90", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3f246567a44ba034c0b48f929c4d4586a4b914ed/gcc%2Ftestsuite%2Fgfortran.dg%2FISO_Fortran_binding_16.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3f246567a44ba034c0b48f929c4d4586a4b914ed/gcc%2Ftestsuite%2Fgfortran.dg%2FISO_Fortran_binding_16.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2FISO_Fortran_binding_16.f90?ref=3f246567a44ba034c0b48f929c4d4586a4b914ed", "patch": "@@ -0,0 +1,25 @@\n+! { dg-do run }\n+! { dg-additional-options \"-fbounds-check\" }\n+! { dg-additional-sources ISO_Fortran_binding_15.c }\n+!\n+! Test the fix for PR92142.\n+!\n+  use, intrinsic :: iso_c_binding, only: c_int\n+\n+  implicit none\n+  \n+  interface\n+    function c_setpointer(ip) result(ierr) bind(c)\n+      use, intrinsic :: iso_c_binding, only: c_int\n+      type(*), dimension(..), target :: ip\n+      integer(c_int)                 :: ierr\n+    end function c_setpointer\n+  end interface\n+  \n+  integer(c_int) :: it = 1\n+  \n+  if (c_setpointer(it) /= 0) stop 1\n+  \n+end\n+\n+! { dg-output \"CFI_setpointer: Result shall be the address of a C descriptor for a Fortran pointer.\" }"}, {"sha": "075c9860c80bd38363eae7084da29d643bc10307", "filename": "libgfortran/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3f246567a44ba034c0b48f929c4d4586a4b914ed/libgfortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3f246567a44ba034c0b48f929c4d4586a4b914ed/libgfortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2FChangeLog?ref=3f246567a44ba034c0b48f929c4d4586a4b914ed", "patch": "@@ -1,3 +1,10 @@\n+2019-11-11  Jos\u00e9 Rui Faustino de Sousa  <jrfsousa@gmail.com>\n+\n+\tPR fortran/92142\n+\t* runtime/ISO_Fortran_binding.c (CFI_setpointer): Don't\n+\toverride descriptor attribute; with -fcheck, check that\n+\tit is a pointer.\n+\n 2019-11-06  Jerry DeLisle  <jvdelisle@gcc.ngu.org>\n \n \tPR fortran/90374"}, {"sha": "ae5005710987bd7ca4727da2c07a27e8e9c41ccf", "filename": "libgfortran/runtime/ISO_Fortran_binding.c", "status": "modified", "additions": 15, "deletions": 7, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3f246567a44ba034c0b48f929c4d4586a4b914ed/libgfortran%2Fruntime%2FISO_Fortran_binding.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3f246567a44ba034c0b48f929c4d4586a4b914ed/libgfortran%2Fruntime%2FISO_Fortran_binding.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fruntime%2FISO_Fortran_binding.c?ref=3f246567a44ba034c0b48f929c4d4586a4b914ed", "patch": "@@ -795,20 +795,29 @@ int CFI_select_part (CFI_cdesc_t *result, const CFI_cdesc_t *source,\n int CFI_setpointer (CFI_cdesc_t *result, CFI_cdesc_t *source,\n \t\t    const CFI_index_t lower_bounds[])\n {\n-  /* Result must not be NULL. */\n-  if (unlikely (compile_options.bounds_check) && result == NULL)\n+  /* Result must not be NULL and must be a Fortran pointer. */\n+  if (unlikely (compile_options.bounds_check))\n     {\n-      fprintf (stderr, \"CFI_setpointer: Result is NULL.\\n\");\n-      return CFI_INVALID_DESCRIPTOR;\n+      if (result == NULL)\n+\t{\n+\t  fprintf (stderr, \"CFI_setpointer: Result is NULL.\\n\");\n+\t  return CFI_INVALID_DESCRIPTOR;\n+\t}\n+      \n+      if (result->attribute != CFI_attribute_pointer)\n+\t{\n+ \t  fprintf (stderr, \"CFI_setpointer: Result shall be the address of a \"\n+\t\t   \"C descriptor for a Fortran pointer.\\n\");\n+ \t  return CFI_INVALID_ATTRIBUTE;\n+ \t}\n     }\n-\n+      \n   /* If source is NULL, the result is a C Descriptor that describes a\n    * disassociated pointer. */\n   if (source == NULL)\n     {\n       result->base_addr = NULL;\n       result->version  = CFI_VERSION;\n-      result->attribute = CFI_attribute_pointer;\n     }\n   else\n     {\n@@ -852,7 +861,6 @@ int CFI_setpointer (CFI_cdesc_t *result, CFI_cdesc_t *source,\n \n       /* Assign components to result. */\n       result->version = source->version;\n-      result->attribute = source->attribute;\n \n       /* Dimension information. */\n       for (int i = 0; i < source->rank; i++)"}]}