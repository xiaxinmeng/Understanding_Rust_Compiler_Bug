{"sha": "18406601136a40c875005c3f11563f657fc1f0ca", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTg0MDY2MDExMzZhNDBjODc1MDA1YzNmMTE1NjNmNjU3ZmMxZjBjYQ==", "commit": {"author": {"name": "Paolo Bonzini", "email": "bonzini@gnu.org", "date": "2010-11-13T09:42:58Z"}, "committer": {"name": "Paolo Bonzini", "email": "bonzini@gcc.gnu.org", "date": "2010-11-13T09:42:58Z"}, "message": "c-format.c (enum format_specifier_kind, [...]): New.\n\ngcc:\n2010-11-13  Paolo Bonzini  <bonzini@gnu.org>\n\n\t* c-format.c (enum format_specifier_kind, kind_descriptions): New.\n\t(struct format_wanted_type): Replace field \"name\" with \"kind\", add\n\t\"format_start\" and \"format_length\".\n\t(check_format_info_main): Fill in new fields.  Fill in\n\tFORMAT_WANTED_TYPES even for missing arguments.  Move checks\n\tafter the final NUL outside the while loop.  Do not include\n\twidth and precision modifiers in the format_start/format_length\n\tof the main format.\n\t(check_format_types): Remove FORMAT_START and FORMAT_LENGTH\n\targuments.  Compute WANTED_TYPE first so that format_type_warning\n\tcan be called for missing arguments.  Adjust calls to\n\tformat_type_warning.\n\t(format_type_warning): Fetch as much information as possible\n\tfrom format_wanted_type.  Adjust printing now that every\n\twarning has a \"descr\", as well as for missing argument warnings\n\tand to include % sign for format specifiers.\n\ntestsuite:\n2010-11-13  Paolo Bonzini  <bonzini@gnu.org>\n\n\t* gcc.dg/format/few-1.c: New test.\n\t* gcc.dg/format/asm_fprintf-1.c: Adjust.\n\t* gcc.dg/format/c90-scanf-1.c: Adjust.\n\t* gcc.dg/format/cmn-err-1.c: Adjust.\n\t* gcc.dg/format/dfp-printf-1.c: Adjust.\n\t* gcc.dg/format/dfp-scanf-1.c: Adjust.\n\t* gcc.dg/format/gcc_diag-1.c: Adjust.\n\t* gcc.dg/format/ms_unnamed-1.c: Adjust.\n\t* gcc.dg/format/strfmon-1.c: Adjust.\n\t* gcc.dg/format/unnamed-1.c: Adjust.\n\t* gcc.dg/format/xopen-2.c: Adjust.\n\t* g++.dg/ext/builtin4.C: Adjust.\n\t* g++.dg/ext/builtin5.C: Adjust.\n\nFrom-SVN: r166698", "tree": {"sha": "0d06eb7663647344d99ac555d7388b17cb2e52a6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0d06eb7663647344d99ac555d7388b17cb2e52a6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/18406601136a40c875005c3f11563f657fc1f0ca", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/18406601136a40c875005c3f11563f657fc1f0ca", "html_url": "https://github.com/Rust-GCC/gccrs/commit/18406601136a40c875005c3f11563f657fc1f0ca", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/18406601136a40c875005c3f11563f657fc1f0ca/comments", "author": {"login": "bonzini", "id": 42082, "node_id": "MDQ6VXNlcjQyMDgy", "avatar_url": "https://avatars.githubusercontent.com/u/42082?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bonzini", "html_url": "https://github.com/bonzini", "followers_url": "https://api.github.com/users/bonzini/followers", "following_url": "https://api.github.com/users/bonzini/following{/other_user}", "gists_url": "https://api.github.com/users/bonzini/gists{/gist_id}", "starred_url": "https://api.github.com/users/bonzini/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bonzini/subscriptions", "organizations_url": "https://api.github.com/users/bonzini/orgs", "repos_url": "https://api.github.com/users/bonzini/repos", "events_url": "https://api.github.com/users/bonzini/events{/privacy}", "received_events_url": "https://api.github.com/users/bonzini/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "5f33b9722588dccaf5b5e99c0f7540ab7483fa2f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5f33b9722588dccaf5b5e99c0f7540ab7483fa2f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5f33b9722588dccaf5b5e99c0f7540ab7483fa2f"}], "stats": {"total": 493, "additions": 294, "deletions": 199}, "files": [{"sha": "44035e340372794594f14b9f9e4f241ffd9047ee", "filename": "gcc/ChangeLog", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/18406601136a40c875005c3f11563f657fc1f0ca/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/18406601136a40c875005c3f11563f657fc1f0ca/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=18406601136a40c875005c3f11563f657fc1f0ca", "patch": "@@ -1,3 +1,22 @@\n+2010-11-13  Paolo Bonzini  <bonzini@gnu.org>\n+\n+\t* c-format.c (enum format_specifier_kind, kind_descriptions): New.\n+\t(struct format_wanted_type): Replace field \"name\" with \"kind\", add\n+\t\"format_start\" and \"format_length\".\n+\t(check_format_info_main): Fill in new fields.  Fill in\n+\tFORMAT_WANTED_TYPES even for missing arguments.  Move checks\n+\tafter the final NUL outside the while loop.  Do not include\n+\twidth and precision modifiers in the format_start/format_length\n+\tof the main format.\n+\t(check_format_types): Remove FORMAT_START and FORMAT_LENGTH\n+\targuments.  Compute WANTED_TYPE first so that format_type_warning\n+\tcan be called for missing arguments.  Adjust calls to\n+\tformat_type_warning.\n+\t(format_type_warning): Fetch as much information as possible\n+\tfrom format_wanted_type.  Adjust printing now that every\n+\twarning has a \"descr\", as well as for missing argument warnings\n+\tand to include % sign for format specifiers.\n+\n 2010-11-12  Alexander Monakov  <amonakov@ispras.ru>\n \n \tPR rtl-optimization/46204"}, {"sha": "a43f434043fb357b6040f742d5be959067a9581c", "filename": "gcc/Makefile.in", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/18406601136a40c875005c3f11563f657fc1f0ca/gcc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/18406601136a40c875005c3f11563f657fc1f0ca/gcc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FMakefile.in?ref=18406601136a40c875005c3f11563f657fc1f0ca", "patch": "@@ -3689,7 +3689,7 @@ s-constrs-h: $(MD_DEPS) build/genpreds$(build_exeext)\n \t$(STAMP) s-constrs-h\n \n target-hooks-def.h: s-target-hooks-def-h; @true\n-tm.texi: s-tm-texi; @true\n+tm.texi: s-tm-texi\n \n s-target-hooks-def-h: build/genhooks$(build_exeext)\n \t$(RUN_GEN) build/genhooks$(build_exeext) > tmp-target-hooks-def.h\n@@ -3942,7 +3942,9 @@ $(genprog:%=build/gen%$(build_exeext)): build/gen%$(build_exeext): build/gen%.o\n \t+$(LINKER_FOR_BUILD) $(BUILD_LINKERFLAGS) $(BUILD_LDFLAGS) -o $@ \\\n \t    $(filter-out $(BUILD_LIBDEPS), $^) $(BUILD_LIBS)\n \n-# Generated source files for gengtype.\n+# Generated source files for gengtype.  Prepend inclusion of\n+# bconfig.h because AIX requires _LARGE_FILES to be defined before\n+# any system header is included.\n gengtype-lex.c : gengtype-lex.l\n \t-$(FLEX) $(FLEXFLAGS) -o$@ $< && { \\\n \t  echo '#include \"bconfig.h\"' > $@.tmp; \\"}, {"sha": "1ca181baebcea2fa98e44885b385599c1d332949", "filename": "gcc/c-family/c-format.c", "status": "modified", "additions": 131, "deletions": 104, "changes": 235, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/18406601136a40c875005c3f11563f657fc1f0ca/gcc%2Fc-family%2Fc-format.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/18406601136a40c875005c3f11563f657fc1f0ca/gcc%2Fc-family%2Fc-format.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-format.c?ref=18406601136a40c875005c3f11563f657fc1f0ca", "patch": "@@ -356,6 +356,20 @@ decode_format_attr (tree args, function_format_info *info, int validated_p)\n \t\t\t\t       ? (warn_long_long ? STD_C99 : STD_C89) \\\n \t\t\t\t       : (VER)))\n \n+/* Enum describing the kind of specifiers present in the format and\n+   requiring an argument.  */\n+enum format_specifier_kind {\n+  CF_KIND_FORMAT,\n+  CF_KIND_FIELD_WIDTH,\n+  CF_KIND_FIELD_PRECISION\n+};\n+\n+static const char *kind_descriptions[] = {\n+  N_(\"format\"),\n+  N_(\"field width specifier\"),\n+  N_(\"field precision specifier\")\n+};\n+\n /* Structure describing details of a type expected in format checking,\n    and the type to check against it.  */\n typedef struct format_wanted_type\n@@ -377,11 +391,13 @@ typedef struct format_wanted_type\n   /* Whether the argument, dereferenced once, is read from and so\n      must not be a NULL pointer.  */\n   int reading_from_flag;\n-  /* If warnings should be of the form \"field precision should have\n-     type 'int'\", the name to use (in this case \"field precision\"),\n-     otherwise NULL, for \"format expects type 'long'\" type\n-     messages.  */\n-  const char *name;\n+  /* The kind of specifier that this type is used for.  */\n+  enum format_specifier_kind kind;\n+  /* The starting character of the specifier.  This never includes the\n+     initial percent sign.  */\n+  const char *format_start;\n+  /* The length of the specifier.  */\n+  int format_length;\n   /* The actual parameter to check against the wanted type.  */\n   tree param;\n   /* The argument number of that parameter.  */\n@@ -957,9 +973,8 @@ static void finish_dollar_format_checking (format_check_results *, int);\n static const format_flag_spec *get_flag_spec (const format_flag_spec *,\n \t\t\t\t\t      int, const char *);\n \n-static void check_format_types (format_wanted_type *, const char *, int);\n-static void format_type_warning (const char *, const char *, int, tree,\n-\t\t\t\t int, const char *, tree, int);\n+static void check_format_types (format_wanted_type *);\n+static void format_type_warning (format_wanted_type *, tree, tree);\n \n /* Decode a format type from a string, returning the type, or\n    format_type_error if not valid, in which case the caller should print an\n@@ -1619,7 +1634,7 @@ check_format_info_main (format_check_results *res,\n \n   init_dollar_format_checking (info->first_arg_num, first_fillin_param);\n \n-  while (1)\n+  while (*format_chars != 0)\n     {\n       int i;\n       int suppressed = FALSE;\n@@ -1643,21 +1658,8 @@ check_format_info_main (format_check_results *res,\n       char flag_chars[256];\n       int alloc_flag = 0;\n       int scalar_identity_flag = 0;\n-      const char *format_start = format_chars;\n-      if (*format_chars == 0)\n-\t{\n-\t  if (format_chars - orig_format_chars != format_length)\n-\t    warning (OPT_Wformat_contains_nul, \"embedded %<\\\\0%> in format\");\n-\t  if (info->first_arg_num != 0 && params != 0\n-\t      && has_operand_number <= 0)\n-\t    {\n-\t      res->number_other--;\n-\t      res->number_extra_args++;\n-\t    }\n-\t  if (has_operand_number > 0)\n-\t    finish_dollar_format_checking (res, fki->flags & (int) FMT_FLAG_DOLLAR_GAP_POINTER_OK);\n-\t  return;\n-\t}\n+      const char *format_start;\n+\n       if (*format_chars++ != '%')\n \tcontinue;\n       if (*format_chars == 0)\n@@ -1762,24 +1764,26 @@ check_format_info_main (format_check_results *res,\n \t      if (info->first_arg_num != 0)\n \t\t{\n \t\t  if (params == 0)\n-\t\t    {\n-\t\t      warning (OPT_Wformat, \"too few arguments for format\");\n-\t\t      return;\n-\t\t    }\n-\t\t  cur_param = TREE_VALUE (params);\n-\t\t  if (has_operand_number <= 0)\n-\t\t    {\n-\t\t      params = TREE_CHAIN (params);\n-\t\t      ++arg_num;\n-\t\t    }\n+                    cur_param = NULL;\n+                  else\n+                    {\n+                      cur_param = TREE_VALUE (params);\n+                      if (has_operand_number <= 0)\n+                        {\n+                          params = TREE_CHAIN (params);\n+                          ++arg_num;\n+                        }\n+                    }\n \t\t  width_wanted_type.wanted_type = *fki->width_type;\n \t\t  width_wanted_type.wanted_type_name = NULL;\n \t\t  width_wanted_type.pointer_count = 0;\n \t\t  width_wanted_type.char_lenient_flag = 0;\n \t\t  width_wanted_type.scalar_identity_flag = 0;\n \t\t  width_wanted_type.writing_in_flag = 0;\n \t\t  width_wanted_type.reading_from_flag = 0;\n-\t\t  width_wanted_type.name = _(\"field width\");\n+                  width_wanted_type.kind = CF_KIND_FIELD_WIDTH;\n+\t\t  width_wanted_type.format_start = format_chars - 1;\n+\t\t  width_wanted_type.format_length = 1;\n \t\t  width_wanted_type.param = cur_param;\n \t\t  width_wanted_type.arg_num = arg_num;\n \t\t  width_wanted_type.next = NULL;\n@@ -1865,25 +1869,27 @@ check_format_info_main (format_check_results *res,\n \t      if (info->first_arg_num != 0)\n \t\t{\n \t\t  if (params == 0)\n-\t\t    {\n-\t\t      warning (OPT_Wformat, \"too few arguments for format\");\n-\t\t      return;\n-\t\t    }\n-\t\t  cur_param = TREE_VALUE (params);\n-\t\t  if (has_operand_number <= 0)\n-\t\t    {\n-\t\t      params = TREE_CHAIN (params);\n-\t\t      ++arg_num;\n-\t\t    }\n+                    cur_param = NULL;\n+                  else\n+                    {\n+                      cur_param = TREE_VALUE (params);\n+                      if (has_operand_number <= 0)\n+                        {\n+                          params = TREE_CHAIN (params);\n+                          ++arg_num;\n+                        }\n+                    }\n \t\t  precision_wanted_type.wanted_type = *fki->precision_type;\n \t\t  precision_wanted_type.wanted_type_name = NULL;\n \t\t  precision_wanted_type.pointer_count = 0;\n \t\t  precision_wanted_type.char_lenient_flag = 0;\n \t\t  precision_wanted_type.scalar_identity_flag = 0;\n \t\t  precision_wanted_type.writing_in_flag = 0;\n \t\t  precision_wanted_type.reading_from_flag = 0;\n-\t\t  precision_wanted_type.name = _(\"field precision\");\n+                  precision_wanted_type.kind = CF_KIND_FIELD_PRECISION;\n \t\t  precision_wanted_type.param = cur_param;\n+\t\t  precision_wanted_type.format_start = format_chars - 2;\n+\t\t  precision_wanted_type.format_length = 2;\n \t\t  precision_wanted_type.arg_num = arg_num;\n \t\t  precision_wanted_type.next = NULL;\n \t\t  if (last_wanted_type != 0)\n@@ -1903,6 +1909,7 @@ check_format_info_main (format_check_results *res,\n \t    }\n \t}\n \n+      format_start = format_chars;\n       if (fki->alloc_char && fki->alloc_char == *format_chars)\n \t{\n \t  i = strlen (flag_chars);\n@@ -2163,12 +2170,8 @@ check_format_info_main (format_check_results *res,\n \t      /* Heuristic: skip one argument when an invalid length/type\n \t\t combination is encountered.  */\n \t      arg_num++;\n-\t      if (params == 0)\n-\t\t{\n-\t\t  warning (OPT_Wformat, \"too few arguments for format\");\n-\t\t  return;\n-\t\t}\n-\t      params = TREE_CHAIN (params);\n+\t      if (params != 0)\n+                params = TREE_CHAIN (params);\n \t      continue;\n \t    }\n \t  else if (pedantic\n@@ -2229,13 +2232,12 @@ check_format_info_main (format_check_results *res,\n \t  while (fci)\n \t    {\n \t      if (params == 0)\n-\t\t{\n-\t\t  warning (OPT_Wformat, \"too few arguments for format\");\n-\t\t  return;\n-\t\t}\n-\n-\t      cur_param = TREE_VALUE (params);\n-\t      params = TREE_CHAIN (params);\n+                cur_param = NULL;\n+              else\n+                {\n+                  cur_param = TREE_VALUE (params);\n+                  params = TREE_CHAIN (params);\n+                }\n \n \t      wanted_type_ptr->wanted_type = wanted_type;\n \t      wanted_type_ptr->wanted_type_name = wanted_type_name;\n@@ -2257,9 +2259,11 @@ check_format_info_main (format_check_results *res,\n \t\t  if (strchr (fci->flags2, 'R') != 0)\n \t\t    wanted_type_ptr->reading_from_flag = 1;\n \t\t}\n-\t      wanted_type_ptr->name = NULL;\n+              wanted_type_ptr->kind = CF_KIND_FORMAT;\n \t      wanted_type_ptr->param = cur_param;\n \t      wanted_type_ptr->arg_num = arg_num;\n+\t      wanted_type_ptr->format_start = format_start;\n+\t      wanted_type_ptr->format_length = format_chars - format_start;\n \t      wanted_type_ptr->next = NULL;\n \t      if (last_wanted_type != 0)\n \t\tlast_wanted_type->next = wanted_type_ptr;\n@@ -2280,17 +2284,26 @@ check_format_info_main (format_check_results *res,\n \t}\n \n       if (first_wanted_type != 0)\n-\tcheck_format_types (first_wanted_type, format_start,\n-\t\t\t    format_chars - format_start);\n+        check_format_types (first_wanted_type);\n+    }\n+\n+  if (format_chars - orig_format_chars != format_length)\n+    warning (OPT_Wformat_contains_nul, \"embedded %<\\\\0%> in format\");\n+  if (info->first_arg_num != 0 && params != 0\n+      && has_operand_number <= 0)\n+    {\n+      res->number_other--;\n+      res->number_extra_args++;\n     }\n+  if (has_operand_number > 0)\n+    finish_dollar_format_checking (res, fki->flags & (int) FMT_FLAG_DOLLAR_GAP_POINTER_OK);\n }\n \n \n /* Check the argument types from a single format conversion (possibly\n    including width and precision arguments).  */\n static void\n-check_format_types (format_wanted_type *types, const char *format_start,\n-\t\t    int format_length)\n+check_format_types (format_wanted_type *types)\n {\n   for (; types != 0; types = types->next)\n     {\n@@ -2301,12 +2314,7 @@ check_format_types (format_wanted_type *types, const char *format_start,\n       int arg_num;\n       int i;\n       int char_type_flag;\n-      cur_param = types->param;\n-      cur_type = TREE_TYPE (cur_param);\n-      if (cur_type == error_mark_node)\n-\tcontinue;\n-      orig_cur_type = cur_type;\n-      char_type_flag = 0;\n+\n       wanted_type = types->wanted_type;\n       arg_num = types->arg_num;\n \n@@ -2319,6 +2327,19 @@ check_format_types (format_wanted_type *types, const char *format_start,\n \n       wanted_type = TYPE_MAIN_VARIANT (wanted_type);\n \n+      cur_param = types->param;\n+      if (!cur_param)\n+        {\n+          format_type_warning (types, wanted_type, NULL);\n+          continue;\n+        }\n+\n+      cur_type = TREE_TYPE (cur_param);\n+      if (cur_type == error_mark_node)\n+\tcontinue;\n+      orig_cur_type = cur_type;\n+      char_type_flag = 0;\n+\n       STRIP_NOPS (cur_param);\n \n       /* Check the types of any additional pointer arguments\n@@ -2382,10 +2403,7 @@ check_format_types (format_wanted_type *types, const char *format_start,\n \t    }\n \t  else\n \t    {\n-\t      format_type_warning (types->name, format_start, format_length,\n-\t\t\t\t   wanted_type, types->pointer_count,\n-\t\t\t\t   types->wanted_type_name, orig_cur_type,\n-\t\t\t\t   arg_num);\n+              format_type_warning (types, wanted_type, orig_cur_type);\n \t      break;\n \t    }\n \t}\n@@ -2437,33 +2455,34 @@ check_format_types (format_wanted_type *types, const char *format_start,\n \t  && TYPE_PRECISION (cur_type) == TYPE_PRECISION (wanted_type))\n \tcontinue;\n       /* Now we have a type mismatch.  */\n-      format_type_warning (types->name, format_start, format_length,\n-\t\t\t   wanted_type, types->pointer_count,\n-\t\t\t   types->wanted_type_name, orig_cur_type, arg_num);\n+      format_type_warning (types, wanted_type, orig_cur_type);\n     }\n }\n \n \n /* Give a warning about a format argument of different type from that\n-   expected.  DESCR is a description such as \"field precision\", or\n-   NULL for an ordinary format.  For an ordinary format, FORMAT_START\n-   points to where the format starts in the format string and\n-   FORMAT_LENGTH is its length.  WANTED_TYPE is the type the argument\n-   should have after POINTER_COUNT pointer dereferences.\n-   WANTED_NAME_NAME is a possibly more friendly name of WANTED_TYPE,\n-   or NULL if the ordinary name of the type should be used.  ARG_TYPE\n-   is the type of the actual argument.  ARG_NUM is the number of that\n-   argument.  */\n+   expected.  WANTED_TYPE is the type the argument should have, possibly\n+   stripped of pointer dereferences.  The description (such as \"field\n+   precision\"), the placement in the format string, a possibly more\n+   friendly name of WANTED_TYPE, and the number of pointer dereferences\n+   are taken from TYPE.  ARG_TYPE is the type of the actual argument,\n+   or NULL if it is missing.  */\n static void\n-format_type_warning (const char *descr, const char *format_start,\n-\t\t     int format_length, tree wanted_type, int pointer_count,\n-\t\t     const char *wanted_type_name, tree arg_type, int arg_num)\n+format_type_warning (format_wanted_type *type, tree wanted_type, tree arg_type)\n {\n+  int kind = type->kind;\n+  const char *wanted_type_name = type->wanted_type_name;\n+  const char *format_start = type->format_start;\n+  int format_length = type->format_length;\n+  int pointer_count = type->pointer_count;\n+  int arg_num = type->arg_num;\n+\n   char *p;\n   /* If ARG_TYPE is a typedef with a misleading name (for example,\n      size_t but not the standard size_t expected by printf %zu), avoid\n      printing the typedef name.  */\n   if (wanted_type_name\n+      && arg_type\n       && TYPE_NAME (arg_type)\n       && TREE_CODE (TYPE_NAME (arg_type)) == TYPE_DECL\n       && DECL_NAME (TYPE_NAME (arg_type))\n@@ -2489,28 +2508,36 @@ format_type_warning (const char *descr, const char *format_start,\n       memset (p + 1, '*', pointer_count);\n       p[pointer_count + 1] = 0;\n     }\n+\n   if (wanted_type_name)\n     {\n-      if (descr)\n-\twarning (OPT_Wformat, \"%s should have type %<%s%s%>, \"\n-\t\t \"but argument %d has type %qT\",\n-\t\t descr, wanted_type_name, p, arg_num, arg_type);\n+      if (arg_type)\n+        warning (OPT_Wformat, \"%s %<%s%.*s%> expects argument of type %<%s%s%>, \"\n+                 \"but argument %d has type %qT\",\n+                 gettext (kind_descriptions[kind]),\n+                 (kind == CF_KIND_FORMAT ? \"%\" : \"\"),\n+                 format_length, format_start, \n+                 wanted_type_name, p, arg_num, arg_type);\n       else\n-\twarning (OPT_Wformat, \"format %q.*s expects type %<%s%s%>, \"\n-\t\t \"but argument %d has type %qT\",\n-\t\t format_length, format_start, wanted_type_name, p,\n-\t\t arg_num, arg_type);\n+        warning (OPT_Wformat, \"%s %<%s%.*s%> expects a matching %<%s%s%> argument\",\n+                 gettext (kind_descriptions[kind]),\n+                 (kind == CF_KIND_FORMAT ? \"%\" : \"\"),\n+                 format_length, format_start, wanted_type_name, p);\n     }\n   else\n     {\n-      if (descr)\n-\twarning (OPT_Wformat, \"%s should have type %<%T%s%>, \"\n-\t\t \"but argument %d has type %qT\",\n-\t\t descr, wanted_type, p, arg_num, arg_type);\n+      if (arg_type)\n+        warning (OPT_Wformat, \"%s %<%s%.*s%> expects argument of type %<%T%s%>, \"\n+                 \"but argument %d has type %qT\",\n+                 gettext (kind_descriptions[kind]),\n+                 (kind == CF_KIND_FORMAT ? \"%\" : \"\"),\n+                 format_length, format_start, \n+                 wanted_type, p, arg_num, arg_type);\n       else\n-\twarning (OPT_Wformat, \"format %q.*s expects type %<%T%s%>, \"\n-\t\t \"but argument %d has type %qT\",\n-\t\t format_length, format_start, wanted_type, p, arg_num, arg_type);\n+        warning (OPT_Wformat, \"%s %<%s%.*s%> expects a matching %<%T%s%> argument\",\n+                 gettext (kind_descriptions[kind]),\n+                 (kind == CF_KIND_FORMAT ? \"%\" : \"\"),\n+                 format_length, format_start, wanted_type, p);\n     }\n }\n "}, {"sha": "ee05b7b80f220c8853081c9251ff9db66a6d6e5e", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/18406601136a40c875005c3f11563f657fc1f0ca/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/18406601136a40c875005c3f11563f657fc1f0ca/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=18406601136a40c875005c3f11563f657fc1f0ca", "patch": "@@ -1,3 +1,19 @@\n+2010-11-13  Paolo Bonzini  <bonzini@gnu.org>\n+\n+\t* gcc.dg/format/few-1.c: New test.\n+\t* gcc.dg/format/asm_fprintf-1.c: Adjust.\n+\t* gcc.dg/format/c90-scanf-1.c: Adjust.\n+\t* gcc.dg/format/cmn-err-1.c: Adjust.\n+\t* gcc.dg/format/dfp-printf-1.c: Adjust.\n+\t* gcc.dg/format/dfp-scanf-1.c: Adjust.\n+\t* gcc.dg/format/gcc_diag-1.c: Adjust.\n+\t* gcc.dg/format/ms_unnamed-1.c: Adjust.\n+\t* gcc.dg/format/strfmon-1.c: Adjust.\n+\t* gcc.dg/format/unnamed-1.c: Adjust.\n+\t* gcc.dg/format/xopen-2.c: Adjust.\n+\t* g++.dg/ext/builtin4.C: Adjust.\n+\t* g++.dg/ext/builtin5.C: Adjust.\n+\n 2010-11-12  Joseph Myers  <joseph@codesourcery.com>\n \n \t* gcc.dg/pragma-diag-2.c: New test."}, {"sha": "8804b53bd7a93a204b8abecf512c2e87246ae2a0", "filename": "gcc/testsuite/g++.dg/ext/builtin4.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/18406601136a40c875005c3f11563f657fc1f0ca/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fbuiltin4.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/18406601136a40c875005c3f11563f657fc1f0ca/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fbuiltin4.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fbuiltin4.C?ref=18406601136a40c875005c3f11563f657fc1f0ca", "patch": "@@ -6,5 +6,5 @@\n extern \"C\" int printf(const char*,...);\n \n void foo() {\n-  printf(\"%d\"); \t\t// { dg-warning \"too few arguments\" }\n+  printf(\"%d\"); \t\t// { dg-warning \"expects a matching\" }\n }"}, {"sha": "051224ffd08adfb95eb6e5406ae581cb62c32d29", "filename": "gcc/testsuite/g++.dg/ext/builtin5.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/18406601136a40c875005c3f11563f657fc1f0ca/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fbuiltin5.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/18406601136a40c875005c3f11563f657fc1f0ca/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fbuiltin5.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fbuiltin5.C?ref=18406601136a40c875005c3f11563f657fc1f0ca", "patch": "@@ -8,5 +8,5 @@ namespace std {\n }\n \n void foo() {\n-  std::printf(\"%d\"); \t\t// { dg-warning \"too few arguments\" }\n+  std::printf(\"%d\"); \t\t// { dg-warning \"expects a matching\" }\n }"}, {"sha": "d71834af705b17fcc4f3c1dcb75acdbe7ba6fd60", "filename": "gcc/testsuite/gcc.dg/format/asm_fprintf-1.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/18406601136a40c875005c3f11563f657fc1f0ca/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fasm_fprintf-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/18406601136a40c875005c3f11563f657fc1f0ca/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fasm_fprintf-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fasm_fprintf-1.c?ref=18406601136a40c875005c3f11563f657fc1f0ca", "patch": "@@ -62,7 +62,7 @@ foo (int i, int i1, int i2, unsigned int u, double d, char *s, void *p,\n   asm_fprintf (\"%s\", n); /* { dg-warning \"format\" \"bad argument types\" } */\n \n   /* Wrong number of arguments.  */\n-  asm_fprintf (\"%d%d\", i); /* { dg-warning \"arguments\" \"wrong number of args\" } */\n+  asm_fprintf (\"%d%d\", i); /* { dg-warning \"matching\" \"wrong number of args\" } */\n   asm_fprintf (\"%d\", i, i); /* { dg-warning \"arguments\" \"wrong number of args\" } */\n   /* Miscellaneous bogus constructions.  */\n   asm_fprintf (\"\"); /* { dg-warning \"zero-length\" \"warning for empty format\" } */"}, {"sha": "586e4af6a54ad14acbf59aef3c97ff5ec53d4084", "filename": "gcc/testsuite/gcc.dg/format/c90-printf-1.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/18406601136a40c875005c3f11563f657fc1f0ca/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fc90-printf-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/18406601136a40c875005c3f11563f657fc1f0ca/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fc90-printf-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fc90-printf-1.c?ref=18406601136a40c875005c3f11563f657fc1f0ca", "patch": "@@ -220,7 +220,7 @@ foo (int i, int i1, int i2, unsigned int u, double d, char *s, void *p,\n   */\n   printf (\"%*.*d\", u1, u2, i);\n   /* Wrong number of arguments.  */\n-  printf (\"%d%d\", i); /* { dg-warning \"arguments\" \"wrong number of args\" } */\n+  printf (\"%d%d\", i); /* { dg-warning \"matching\" \"wrong number of args\" } */\n   printf (\"%d\", i, i); /* { dg-warning \"arguments\" \"wrong number of args\" } */\n   /* Miscellaneous bogus constructions.  */\n   printf (\"\"); /* { dg-warning \"zero-length\" \"warning for empty format\" } */"}, {"sha": "e4803f1f457fe8e131b1b77ee06ccb2a7ee86669", "filename": "gcc/testsuite/gcc.dg/format/c90-scanf-1.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/18406601136a40c875005c3f11563f657fc1f0ca/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fc90-scanf-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/18406601136a40c875005c3f11563f657fc1f0ca/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fc90-scanf-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fc90-scanf-1.c?ref=18406601136a40c875005c3f11563f657fc1f0ca", "patch": "@@ -106,7 +106,7 @@ foo (int *ip, unsigned int *uip, short int *hp, unsigned short int *uhp,\n   scanf (\"%s\", cs); /* { dg-warning \"constant\" \"%s writing into const\" } */\n   scanf (\"%p\", pcp); /* { dg-warning \"constant\" \"%p writing into const\" } */\n   /* Wrong number of arguments.  */\n-  scanf (\"%d%d\", ip); /* { dg-warning \"arguments\" \"wrong number of args\" } */\n+  scanf (\"%d%d\", ip); /* { dg-warning \"matching\" \"wrong number of args\" } */\n   scanf (\"%d\", ip, ip); /* { dg-warning \"arguments\" \"wrong number of args\" } */\n   /* Miscellaneous bogus constructions.  */\n   scanf (\"\"); /* { dg-warning \"zero-length\" \"warning for empty format\" } */"}, {"sha": "fd5ca59d05833b83ac03532bb7f4f2f3ae6818e4", "filename": "gcc/testsuite/gcc.dg/format/cmn-err-1.c", "status": "modified", "additions": 7, "deletions": 6, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/18406601136a40c875005c3f11563f657fc1f0ca/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fcmn-err-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/18406601136a40c875005c3f11563f657fc1f0ca/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fcmn-err-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fcmn-err-1.c?ref=18406601136a40c875005c3f11563f657fc1f0ca", "patch": "@@ -28,11 +28,12 @@ int main()\n   cmn_err_func (0, \"%16b\", i, \"\\01Foo\");\n \n   cmn_err_func (0, \"%i\", i);\t\t/* { dg-warning \"unknown|too many\" } */\n-  cmn_err_func (0, \"%d\", l);\t\t/* { dg-warning \"expects type\" } */\n-  cmn_err_func (0, \"%b\");\t\t/* { dg-warning \"too few\" } */\n-  cmn_err_func (0, \"%b\", i);\t\t/* { dg-warning \"too few\" } */\n-  cmn_err_func (0, \"%b\", i, i);\t\t/* { dg-warning \"expects type\" } */\n-  cmn_err_func (0, \"%b\", string, i);\t/* { dg-warning \"expects type\" } */\n-  cmn_err_func (0, \"%p\", 3);\t\t/* { dg-warning \"expects type\" } */\n+  cmn_err_func (0, \"%d\", l);\t\t/* { dg-warning \"expects argument\" } */\n+  cmn_err_func (0, \"%b\");\t\t/* { dg-warning \"'int'\" } */\n+/* { dg-warning \"'char \\\\*'\" \"\" { target *-*-solaris2.* } 32 } */\n+  cmn_err_func (0, \"%b\", i);\t\t/* { dg-warning \"matching\" } */\n+  cmn_err_func (0, \"%b\", i, i);\t\t/* { dg-warning \"expects argument\" } */\n+  cmn_err_func (0, \"%b\", string, i);\t/* { dg-warning \"expects argument\" } */\n+  cmn_err_func (0, \"%p\", 3);\t\t/* { dg-warning \"expects argument\" } */\n   return 0;\n }"}, {"sha": "e92f1610c3442699ddb7e1e8a75918af327f2480", "filename": "gcc/testsuite/gcc.dg/format/dfp-printf-1.c", "status": "modified", "additions": 38, "deletions": 38, "changes": 76, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/18406601136a40c875005c3f11563f657fc1f0ca/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fdfp-printf-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/18406601136a40c875005c3f11563f657fc1f0ca/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fdfp-printf-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fdfp-printf-1.c?ref=18406601136a40c875005c3f11563f657fc1f0ca", "patch": "@@ -43,44 +43,44 @@ foo (_Decimal32 x, _Decimal64 y, _Decimal128 z, int i, unsigned int j,\n \n   /* Check warnings for type mismatches.  */\n \n-  printf (\"%Hf\\n\", y);\t/* { dg-warning \"expects type\" \"bad use of %H\" } */\n-  printf (\"%HF\\n\", y);\t/* { dg-warning \"expects type\" \"bad use of %H\" } */\n-  printf (\"%He\\n\", y);\t/* { dg-warning \"expects type\" \"bad use of %H\" } */\n-  printf (\"%HE\\n\", y);\t/* { dg-warning \"expects type\" \"bad use of %H\" } */\n-  printf (\"%Hg\\n\", y);\t/* { dg-warning \"expects type\" \"bad use of %H\" } */\n-  printf (\"%HG\\n\", y);\t/* { dg-warning \"expects type\" \"bad use of %H\" } */\n-  printf (\"%Hf\\n\", z);\t/* { dg-warning \"expects type\" \"bad use of %H\" } */\n-  printf (\"%HF\\n\", z);\t/* { dg-warning \"expects type\" \"bad use of %H\" } */\n-  printf (\"%He\\n\", z);\t/* { dg-warning \"expects type\" \"bad use of %H\" } */\n-  printf (\"%HE\\n\", z);\t/* { dg-warning \"expects type\" \"bad use of %H\" } */\n-  printf (\"%Hg\\n\", z);\t/* { dg-warning \"expects type\" \"bad use of %H\" } */\n-  printf (\"%HG\\n\", z);\t/* { dg-warning \"expects type\" \"bad use of %H\" } */\n-\n-  printf (\"%Df\\n\", x);\t/* { dg-warning \"expects type\" \"bad use of %D\" } */\n-  printf (\"%DF\\n\", x);\t/* { dg-warning \"expects type\" \"bad use of %D\" } */\n-  printf (\"%De\\n\", x);\t/* { dg-warning \"expects type\" \"bad use of %D\" } */\n-  printf (\"%DE\\n\", x);\t/* { dg-warning \"expects type\" \"bad use of %D\" } */\n-  printf (\"%Dg\\n\", x);\t/* { dg-warning \"expects type\" \"bad use of %D\" } */\n-  printf (\"%DG\\n\", x);\t/* { dg-warning \"expects type\" \"bad use of %D\" } */\n-  printf (\"%Df\\n\", z);\t/* { dg-warning \"expects type\" \"bad use of %D\" } */\n-  printf (\"%DF\\n\", z);\t/* { dg-warning \"expects type\" \"bad use of %D\" } */\n-  printf (\"%De\\n\", z);\t/* { dg-warning \"expects type\" \"bad use of %D\" } */\n-  printf (\"%DE\\n\", z);\t/* { dg-warning \"expects type\" \"bad use of %D\" } */\n-  printf (\"%Dg\\n\", z);\t/* { dg-warning \"expects type\" \"bad use of %D\" } */\n-  printf (\"%DG\\n\", z);\t/* { dg-warning \"expects type\" \"bad use of %D\" } */\n-\n-  printf (\"%DDf\\n\", x);\t/* { dg-warning \"expects type\" \"bad use of %DD\" } */\n-  printf (\"%DDF\\n\", x);\t/* { dg-warning \"expects type\" \"bad use of %DD\" } */\n-  printf (\"%DDe\\n\", x);\t/* { dg-warning \"expects type\" \"bad use of %DD\" } */\n-  printf (\"%DDE\\n\", x);\t/* { dg-warning \"expects type\" \"bad use of %DD\" } */\n-  printf (\"%DDg\\n\", x);\t/* { dg-warning \"expects type\" \"bad use of %DD\" } */\n-  printf (\"%DDG\\n\", x);\t/* { dg-warning \"expects type\" \"bad use of %DD\" } */\n-  printf (\"%DDf\\n\", y);\t/* { dg-warning \"expects type\" \"bad use of %DD\" } */\n-  printf (\"%DDF\\n\", y);\t/* { dg-warning \"expects type\" \"bad use of %DD\" } */\n-  printf (\"%DDe\\n\", y);\t/* { dg-warning \"expects type\" \"bad use of %DD\" } */\n-  printf (\"%DDE\\n\", y);\t/* { dg-warning \"expects type\" \"bad use of %DD\" } */\n-  printf (\"%DDg\\n\", y);\t/* { dg-warning \"expects type\" \"bad use of %DD\" } */\n-  printf (\"%DDG\\n\", y);\t/* { dg-warning \"expects type\" \"bad use of %DD\" } */\n+  printf (\"%Hf\\n\", y);\t/* { dg-warning \"expects argument\" \"bad use of %H\" } */\n+  printf (\"%HF\\n\", y);\t/* { dg-warning \"expects argument\" \"bad use of %H\" } */\n+  printf (\"%He\\n\", y);\t/* { dg-warning \"expects argument\" \"bad use of %H\" } */\n+  printf (\"%HE\\n\", y);\t/* { dg-warning \"expects argument\" \"bad use of %H\" } */\n+  printf (\"%Hg\\n\", y);\t/* { dg-warning \"expects argument\" \"bad use of %H\" } */\n+  printf (\"%HG\\n\", y);\t/* { dg-warning \"expects argument\" \"bad use of %H\" } */\n+  printf (\"%Hf\\n\", z);\t/* { dg-warning \"expects argument\" \"bad use of %H\" } */\n+  printf (\"%HF\\n\", z);\t/* { dg-warning \"expects argument\" \"bad use of %H\" } */\n+  printf (\"%He\\n\", z);\t/* { dg-warning \"expects argument\" \"bad use of %H\" } */\n+  printf (\"%HE\\n\", z);\t/* { dg-warning \"expects argument\" \"bad use of %H\" } */\n+  printf (\"%Hg\\n\", z);\t/* { dg-warning \"expects argument\" \"bad use of %H\" } */\n+  printf (\"%HG\\n\", z);\t/* { dg-warning \"expects argument\" \"bad use of %H\" } */\n+\n+  printf (\"%Df\\n\", x);\t/* { dg-warning \"expects argument\" \"bad use of %D\" } */\n+  printf (\"%DF\\n\", x);\t/* { dg-warning \"expects argument\" \"bad use of %D\" } */\n+  printf (\"%De\\n\", x);\t/* { dg-warning \"expects argument\" \"bad use of %D\" } */\n+  printf (\"%DE\\n\", x);\t/* { dg-warning \"expects argument\" \"bad use of %D\" } */\n+  printf (\"%Dg\\n\", x);\t/* { dg-warning \"expects argument\" \"bad use of %D\" } */\n+  printf (\"%DG\\n\", x);\t/* { dg-warning \"expects argument\" \"bad use of %D\" } */\n+  printf (\"%Df\\n\", z);\t/* { dg-warning \"expects argument\" \"bad use of %D\" } */\n+  printf (\"%DF\\n\", z);\t/* { dg-warning \"expects argument\" \"bad use of %D\" } */\n+  printf (\"%De\\n\", z);\t/* { dg-warning \"expects argument\" \"bad use of %D\" } */\n+  printf (\"%DE\\n\", z);\t/* { dg-warning \"expects argument\" \"bad use of %D\" } */\n+  printf (\"%Dg\\n\", z);\t/* { dg-warning \"expects argument\" \"bad use of %D\" } */\n+  printf (\"%DG\\n\", z);\t/* { dg-warning \"expects argument\" \"bad use of %D\" } */\n+\n+  printf (\"%DDf\\n\", x);\t/* { dg-warning \"expects argument\" \"bad use of %DD\" } */\n+  printf (\"%DDF\\n\", x);\t/* { dg-warning \"expects argument\" \"bad use of %DD\" } */\n+  printf (\"%DDe\\n\", x);\t/* { dg-warning \"expects argument\" \"bad use of %DD\" } */\n+  printf (\"%DDE\\n\", x);\t/* { dg-warning \"expects argument\" \"bad use of %DD\" } */\n+  printf (\"%DDg\\n\", x);\t/* { dg-warning \"expects argument\" \"bad use of %DD\" } */\n+  printf (\"%DDG\\n\", x);\t/* { dg-warning \"expects argument\" \"bad use of %DD\" } */\n+  printf (\"%DDf\\n\", y);\t/* { dg-warning \"expects argument\" \"bad use of %DD\" } */\n+  printf (\"%DDF\\n\", y);\t/* { dg-warning \"expects argument\" \"bad use of %DD\" } */\n+  printf (\"%DDe\\n\", y);\t/* { dg-warning \"expects argument\" \"bad use of %DD\" } */\n+  printf (\"%DDE\\n\", y);\t/* { dg-warning \"expects argument\" \"bad use of %DD\" } */\n+  printf (\"%DDg\\n\", y);\t/* { dg-warning \"expects argument\" \"bad use of %DD\" } */\n+  printf (\"%DDG\\n\", y);\t/* { dg-warning \"expects argument\" \"bad use of %DD\" } */\n \n   /* Check for warnings for bad use of H, D, and DD length specifiers.  */\n "}, {"sha": "ffa12a803ec33f23507db8ad660d44e1e652213e", "filename": "gcc/testsuite/gcc.dg/format/dfp-scanf-1.c", "status": "modified", "additions": 36, "deletions": 36, "changes": 72, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/18406601136a40c875005c3f11563f657fc1f0ca/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fdfp-scanf-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/18406601136a40c875005c3f11563f657fc1f0ca/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fdfp-scanf-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fdfp-scanf-1.c?ref=18406601136a40c875005c3f11563f657fc1f0ca", "patch": "@@ -43,44 +43,44 @@ voo (_Decimal32 *x, _Decimal64 *y, _Decimal128 *z, int *i, unsigned int *j,\n \n   /* Check warnings for type mismatches.  */\n \n-  scanf (\"%Hf\", y);\t/* { dg-warning \"expects type\" \"bad use of %H\" } */\n-  scanf (\"%HF\", y);\t/* { dg-warning \"expects type\" \"bad use of %H\" } */\n-  scanf (\"%He\", y);\t/* { dg-warning \"expects type\" \"bad use of %H\" } */\n-  scanf (\"%HE\", y);\t/* { dg-warning \"expects type\" \"bad use of %H\" } */\n-  scanf (\"%Hg\", y);\t/* { dg-warning \"expects type\" \"bad use of %H\" } */\n-  scanf (\"%HG\", y);\t/* { dg-warning \"expects type\" \"bad use of %H\" } */\n-  scanf (\"%Hf\", z);\t/* { dg-warning \"expects type\" \"bad use of %H\" } */\n-  scanf (\"%HF\", z);\t/* { dg-warning \"expects type\" \"bad use of %H\" } */\n-  scanf (\"%He\", z);\t/* { dg-warning \"expects type\" \"bad use of %H\" } */\n-  scanf (\"%HE\", z);\t/* { dg-warning \"expects type\" \"bad use of %H\" } */\n-  scanf (\"%Hg\", z);\t/* { dg-warning \"expects type\" \"bad use of %H\" } */\n-  scanf (\"%HG\", z);\t/* { dg-warning \"expects type\" \"bad use of %H\" } */\n+  scanf (\"%Hf\", y);\t/* { dg-warning \"expects argument\" \"bad use of %H\" } */\n+  scanf (\"%HF\", y);\t/* { dg-warning \"expects argument\" \"bad use of %H\" } */\n+  scanf (\"%He\", y);\t/* { dg-warning \"expects argument\" \"bad use of %H\" } */\n+  scanf (\"%HE\", y);\t/* { dg-warning \"expects argument\" \"bad use of %H\" } */\n+  scanf (\"%Hg\", y);\t/* { dg-warning \"expects argument\" \"bad use of %H\" } */\n+  scanf (\"%HG\", y);\t/* { dg-warning \"expects argument\" \"bad use of %H\" } */\n+  scanf (\"%Hf\", z);\t/* { dg-warning \"expects argument\" \"bad use of %H\" } */\n+  scanf (\"%HF\", z);\t/* { dg-warning \"expects argument\" \"bad use of %H\" } */\n+  scanf (\"%He\", z);\t/* { dg-warning \"expects argument\" \"bad use of %H\" } */\n+  scanf (\"%HE\", z);\t/* { dg-warning \"expects argument\" \"bad use of %H\" } */\n+  scanf (\"%Hg\", z);\t/* { dg-warning \"expects argument\" \"bad use of %H\" } */\n+  scanf (\"%HG\", z);\t/* { dg-warning \"expects argument\" \"bad use of %H\" } */\n \n-  scanf (\"%Df\", x);\t/* { dg-warning \"expects type\" \"bad use of %D\" } */\n-  scanf (\"%DF\", x);\t/* { dg-warning \"expects type\" \"bad use of %D\" } */\n-  scanf (\"%De\", x);\t/* { dg-warning \"expects type\" \"bad use of %D\" } */\n-  scanf (\"%DE\", x);\t/* { dg-warning \"expects type\" \"bad use of %D\" } */\n-  scanf (\"%Dg\", x);\t/* { dg-warning \"expects type\" \"bad use of %D\" } */\n-  scanf (\"%DG\", x);\t/* { dg-warning \"expects type\" \"bad use of %D\" } */\n-  scanf (\"%Df\", z);\t/* { dg-warning \"expects type\" \"bad use of %D\" } */\n-  scanf (\"%DF\", z);\t/* { dg-warning \"expects type\" \"bad use of %D\" } */\n-  scanf (\"%De\", z);\t/* { dg-warning \"expects type\" \"bad use of %D\" } */\n-  scanf (\"%DE\", z);\t/* { dg-warning \"expects type\" \"bad use of %D\" } */\n-  scanf (\"%Dg\", z);\t/* { dg-warning \"expects type\" \"bad use of %D\" } */\n-  scanf (\"%DG\", z);\t/* { dg-warning \"expects type\" \"bad use of %D\" } */\n+  scanf (\"%Df\", x);\t/* { dg-warning \"expects argument\" \"bad use of %D\" } */\n+  scanf (\"%DF\", x);\t/* { dg-warning \"expects argument\" \"bad use of %D\" } */\n+  scanf (\"%De\", x);\t/* { dg-warning \"expects argument\" \"bad use of %D\" } */\n+  scanf (\"%DE\", x);\t/* { dg-warning \"expects argument\" \"bad use of %D\" } */\n+  scanf (\"%Dg\", x);\t/* { dg-warning \"expects argument\" \"bad use of %D\" } */\n+  scanf (\"%DG\", x);\t/* { dg-warning \"expects argument\" \"bad use of %D\" } */\n+  scanf (\"%Df\", z);\t/* { dg-warning \"expects argument\" \"bad use of %D\" } */\n+  scanf (\"%DF\", z);\t/* { dg-warning \"expects argument\" \"bad use of %D\" } */\n+  scanf (\"%De\", z);\t/* { dg-warning \"expects argument\" \"bad use of %D\" } */\n+  scanf (\"%DE\", z);\t/* { dg-warning \"expects argument\" \"bad use of %D\" } */\n+  scanf (\"%Dg\", z);\t/* { dg-warning \"expects argument\" \"bad use of %D\" } */\n+  scanf (\"%DG\", z);\t/* { dg-warning \"expects argument\" \"bad use of %D\" } */\n \n-  scanf (\"%DDf\", x);\t/* { dg-warning \"expects type\" \"bad use of %DD\" } */\n-  scanf (\"%DDF\", x);\t/* { dg-warning \"expects type\" \"bad use of %DD\" } */\n-  scanf (\"%DDe\", x);\t/* { dg-warning \"expects type\" \"bad use of %DD\" } */\n-  scanf (\"%DDE\", x);\t/* { dg-warning \"expects type\" \"bad use of %DD\" } */\n-  scanf (\"%DDg\", x);\t/* { dg-warning \"expects type\" \"bad use of %DD\" } */\n-  scanf (\"%DDG\", x);\t/* { dg-warning \"expects type\" \"bad use of %DD\" } */\n-  scanf (\"%DDf\", y);\t/* { dg-warning \"expects type\" \"bad use of %DD\" } */\n-  scanf (\"%DDF\", y);\t/* { dg-warning \"expects type\" \"bad use of %DD\" } */\n-  scanf (\"%DDe\", y);\t/* { dg-warning \"expects type\" \"bad use of %DD\" } */\n-  scanf (\"%DDE\", y);\t/* { dg-warning \"expects type\" \"bad use of %DD\" } */\n-  scanf (\"%DDg\", y);\t/* { dg-warning \"expects type\" \"bad use of %DD\" } */\n-  scanf (\"%DDG\", y);\t/* { dg-warning \"expects type\" \"bad use of %DD\" } */\n+  scanf (\"%DDf\", x);\t/* { dg-warning \"expects argument\" \"bad use of %DD\" } */\n+  scanf (\"%DDF\", x);\t/* { dg-warning \"expects argument\" \"bad use of %DD\" } */\n+  scanf (\"%DDe\", x);\t/* { dg-warning \"expects argument\" \"bad use of %DD\" } */\n+  scanf (\"%DDE\", x);\t/* { dg-warning \"expects argument\" \"bad use of %DD\" } */\n+  scanf (\"%DDg\", x);\t/* { dg-warning \"expects argument\" \"bad use of %DD\" } */\n+  scanf (\"%DDG\", x);\t/* { dg-warning \"expects argument\" \"bad use of %DD\" } */\n+  scanf (\"%DDf\", y);\t/* { dg-warning \"expects argument\" \"bad use of %DD\" } */\n+  scanf (\"%DDF\", y);\t/* { dg-warning \"expects argument\" \"bad use of %DD\" } */\n+  scanf (\"%DDe\", y);\t/* { dg-warning \"expects argument\" \"bad use of %DD\" } */\n+  scanf (\"%DDE\", y);\t/* { dg-warning \"expects argument\" \"bad use of %DD\" } */\n+  scanf (\"%DDg\", y);\t/* { dg-warning \"expects argument\" \"bad use of %DD\" } */\n+  scanf (\"%DDG\", y);\t/* { dg-warning \"expects argument\" \"bad use of %DD\" } */\n \n   /* Check for warnings for bad use of H, D, and DD length specifiers.  */\n "}, {"sha": "6e0d35b31c17ba3f9745c76cbea024857abcbcc3", "filename": "gcc/testsuite/gcc.dg/format/few-1.c", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/18406601136a40c875005c3f11563f657fc1f0ca/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Ffew-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/18406601136a40c875005c3f11563f657fc1f0ca/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Ffew-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Ffew-1.c?ref=18406601136a40c875005c3f11563f657fc1f0ca", "patch": "@@ -0,0 +1,30 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-std=gnu89 -Wformat\" } */\n+\n+int f(int *ip, char *cp)\n+{\n+\t__builtin_printf (\"%*.*s\");\n+/* { dg-warning \"field width specifier '\\\\*' expects a matching 'int' argument\" \"\" { target *-*-* } 6 } */\n+/* { dg-warning \"field precision specifier '\\\\.\\\\*' expects a matching 'int' argument\" \"\" { target *-*-* } 6 } */\n+/* { dg-warning \"format '%s' expects a matching 'char \\\\*' argument\" \"\" { target *-*-* } 6 } */\n+\t__builtin_printf (\"%*.*s\", ip, *cp);\n+/* { dg-warning \"field width specifier '\\\\*' expects argument of type 'int'\" \"\" { target *-*-* } 10 } */\n+/* { dg-warning \"format '%s' expects a matching 'char \\\\*' argument\" \"\" { target *-*-* } 10 } */\n+\t__builtin_printf (\"%s %i\", ip, ip);\n+/* { dg-warning \"format '%s' expects argument of type 'char \\\\*'\" \"\" { target *-*-* } 13 } */\n+/* { dg-warning \"format '%i' expects argument of type 'int'\" \"\" { target *-*-* } 13 } */\n+\t__builtin_printf (\"%s %i\", cp);\n+/* { dg-warning \"format '%i' expects a matching 'int' argument\" \"\" { target *-*-* } 16 } */\n+\t__builtin_printf (\"%lc\");\n+/* { dg-warning \"format '%lc' expects a matching 'wint_t' argument\" \"\" { target *-*-* } 18 } */\n+\t__builtin_printf (\"%lc\", cp);\n+/* { dg-warning \"format '%lc' expects argument of type 'wint_t'\" \"\" { target *-*-* } 20 } */\n+\t__builtin_scanf (\"%s\");\n+/* { dg-warning \"format '%s' expects a matching 'char \\\\*' argument\" \"\" { target *-*-* } 22 } */\n+\t__builtin_scanf (\"%i\", cp);\n+/* { dg-warning \"format '%i' expects argument of type 'int \\\\*'\" \"\" { target *-*-* } 24 } */\n+\t__builtin_scanf (\"%lc\");\n+/* { dg-warning \"format '%lc' expects a matching 'wchar_t \\\\*' argument\" \"\" { target *-*-* } 26 } */\n+\t__builtin_scanf (\"%lc\", cp);\n+/* { dg-warning \"format '%lc' expects argument of type 'wchar_t \\\\*'\" \"\" { target *-*-* } 28 } */\n+}"}, {"sha": "953c944b4e884c0a88ed6d0f485fda1bd2a4335e", "filename": "gcc/testsuite/gcc.dg/format/gcc_diag-1.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/18406601136a40c875005c3f11563f657fc1f0ca/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fgcc_diag-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/18406601136a40c875005c3f11563f657fc1f0ca/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fgcc_diag-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fgcc_diag-1.c?ref=18406601136a40c875005c3f11563f657fc1f0ca", "patch": "@@ -201,7 +201,7 @@ foo (int i, int i1, int i2, unsigned int u, double d, char *s, void *p,\n   diag (\"%s\", n); /* { dg-warning \"format\" \"bad argument types\" } */\n \n   /* Wrong number of arguments.  */\n-  diag (\"%d%d\", i); /* { dg-warning \"arguments\" \"wrong number of args\" } */\n+  diag (\"%d%d\", i); /* { dg-warning \"matching\" \"wrong number of args\" } */\n   diag (\"%d\", i, i); /* { dg-warning \"arguments\" \"wrong number of args\" } */\n   /* Miscellaneous bogus constructions.  */\n   diag (\"\"); /* { dg-warning \"zero-length\" \"warning for empty format\" } */"}, {"sha": "fddd347ff331b3c820d6bfadac16dfec9ed3749d", "filename": "gcc/testsuite/gcc.dg/format/ms_unnamed-1.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/18406601136a40c875005c3f11563f657fc1f0ca/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fms_unnamed-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/18406601136a40c875005c3f11563f657fc1f0ca/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fms_unnamed-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fms_unnamed-1.c?ref=18406601136a40c875005c3f11563f657fc1f0ca", "patch": "@@ -19,7 +19,7 @@\n void\n f (TItype x)\n {\n-  printf(\"%d\", x); /* { dg-warning \"expects type\" } */\n-  printf(\"%d\", 141592653589793238462643383279502884197169399375105820974944); /* { dg-warning \"expects type\" } */\n+  printf(\"%d\", x); /* { dg-warning \"expects argument\" } */\n+  printf(\"%d\", 141592653589793238462643383279502884197169399375105820974944); /* { dg-warning \"expects argument\" } */\n   /* { dg-warning \"unsigned only|too large\" \"constant\" { target *-*-* } 23 } */\n }"}, {"sha": "934242a238cdace7d2d86b0355fcec85ee1e3755", "filename": "gcc/testsuite/gcc.dg/format/strfmon-1.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/18406601136a40c875005c3f11563f657fc1f0ca/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fstrfmon-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/18406601136a40c875005c3f11563f657fc1f0ca/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fstrfmon-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fstrfmon-1.c?ref=18406601136a40c875005c3f11563f657fc1f0ca", "patch": "@@ -54,7 +54,7 @@ foo (char *s, size_t m, double d, long double ld)\n   strfmon (s, m, \"%.5%\\n\"); /* { dg-warning \"format\" \"bogus %%\" } */\n   strfmon (s, m, \"%#5%\\n\"); /* { dg-warning \"format\" \"bogus %%\" } */\n   /* Miscellaneous bogus formats.  */\n-  strfmon (s, m, \"%n%n\", d); /* { dg-warning \"arguments\" \"too few args\" } */\n+  strfmon (s, m, \"%n%n\", d); /* { dg-warning \"matching\" \"too few args\" } */\n   strfmon (s, m, \"\"); /* { dg-warning \"zero-length\" \"empty\" } */\n   strfmon (s, m, NULL); /* { dg-warning \"null\" \"null format string\" } */\n   strfmon (s, m, \"%\"); /* { dg-warning \"trailing\" \"tailing %\" } */"}, {"sha": "6d8cd39745923ab47058c3255712942aa9806ae3", "filename": "gcc/testsuite/gcc.dg/format/unnamed-1.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/18406601136a40c875005c3f11563f657fc1f0ca/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Funnamed-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/18406601136a40c875005c3f11563f657fc1f0ca/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Funnamed-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Funnamed-1.c?ref=18406601136a40c875005c3f11563f657fc1f0ca", "patch": "@@ -19,7 +19,7 @@\n void\n f (TItype x)\n {\n-  printf(\"%d\", x); /* { dg-warning \"expects type\" } */\n-  printf(\"%d\", 141592653589793238462643383279502884197169399375105820974944); /* { dg-warning \"expects type\" } */\n+  printf(\"%d\", x); /* { dg-warning \"expects argument\" } */\n+  printf(\"%d\", 141592653589793238462643383279502884197169399375105820974944); /* { dg-warning \"expects argument\" } */\n   /* { dg-warning \"unsigned only|too large\" \"constant\" { target *-*-* } 23 } */\n }"}, {"sha": "4aee191ea2b619b0f0e471320c8111d1b02ecabd", "filename": "gcc/testsuite/gcc.dg/format/xopen-2.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/18406601136a40c875005c3f11563f657fc1f0ca/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fxopen-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/18406601136a40c875005c3f11563f657fc1f0ca/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fxopen-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fxopen-2.c?ref=18406601136a40c875005c3f11563f657fc1f0ca", "patch": "@@ -16,6 +16,6 @@ void\n foo (int i, int j, va_list va)\n {\n   printf(\"%2$*1$c\", i, j);\n-  printf(\"%2$*1$c %2$*1$c\", i, j); /* { dg-bogus \"too few\" \"bogus too few dollar\" } */\n-  vbar(va, \"%*s\"); /* { dg-bogus \"too few\" \"bogus too few vprintf\" } */\n+  printf(\"%2$*1$c %2$*1$c\", i, j); /* { dg-bogus \"matching\" \"bogus too few dollar\" } */\n+  vbar(va, \"%*s\"); /* { dg-bogus \"matching\" \"bogus too few vprintf\" } */\n }"}]}