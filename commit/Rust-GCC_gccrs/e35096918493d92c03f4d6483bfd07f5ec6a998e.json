{"sha": "e35096918493d92c03f4d6483bfd07f5ec6a998e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTM1MDk2OTE4NDkzZDkyYzAzZjRkNjQ4M2JmZDA3ZjVlYzZhOTk4ZQ==", "commit": {"author": {"name": "Tim Shen", "email": "timshen91@gmail.com", "date": "2013-09-02T22:20:56Z"}, "committer": {"name": "Tim Shen", "email": "timshen@gcc.gnu.org", "date": "2013-09-02T22:20:56Z"}, "message": "regex_automaton.h: Rearrange _NFA's layout.\n\n2013-09-02  Tim Shen  <timshen91@gmail.com>\n\n\t* regex_automaton.h: Rearrange _NFA's layout.\n\t* include/bits/regex_compiler.h: Add _AnyMatcher and _CharMatcher.\n\t  Rearrange _BracketMatcher's layout.\n\t  (_BracketMatcher<>::_M_add_char): Use set instead of vector for\n\t  _M_char_set.\n\t  (_BracketMatcher<>::_M_add_collating_element): Likewise.\n\t  (_BracketMatcher<>::_M_make_range): Likewise.\n\t* include/bits/regex_compiler.tcc (_Compiler<>::_M_atom): Use\n\t  apropriate constructors of matchers above.\n\t* testsuite/28_regex/algorithms/regex_match/ecma/char/anymatcher.cc:\n\t  New.\n\t* testsuite/28_regex/algorithms/regex_match/ecma/char/backref.cc: New.\n\t* testsuite/28_regex/algorithms/regex_match/ecma/char/empty_range.cc:\n\t  New.\n\t* testsuite/28_regex/algorithms/regex_match/ecma/char/emptygroup.cc:\n\t  New.\n\t* testsuite/28_regex/algorithms/regex_match/ecma/char/hex.cc: New.\n\t* testsuite/28_regex/algorithms/regex_match/ecma/wchar_t/anymatcher.cc:\n\t  New.\n\t* testsuite/28_regex/algorithms/regex_match/ecma/wchar_t/hex.cc: New.\n\nFrom-SVN: r202189", "tree": {"sha": "35679ea7831ed6df022d4a35fa92b9b36166cb35", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/35679ea7831ed6df022d4a35fa92b9b36166cb35"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e35096918493d92c03f4d6483bfd07f5ec6a998e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e35096918493d92c03f4d6483bfd07f5ec6a998e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e35096918493d92c03f4d6483bfd07f5ec6a998e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e35096918493d92c03f4d6483bfd07f5ec6a998e/comments", "author": {"login": "timshen91", "id": 1157432, "node_id": "MDQ6VXNlcjExNTc0MzI=", "avatar_url": "https://avatars.githubusercontent.com/u/1157432?v=4", "gravatar_id": "", "url": "https://api.github.com/users/timshen91", "html_url": "https://github.com/timshen91", "followers_url": "https://api.github.com/users/timshen91/followers", "following_url": "https://api.github.com/users/timshen91/following{/other_user}", "gists_url": "https://api.github.com/users/timshen91/gists{/gist_id}", "starred_url": "https://api.github.com/users/timshen91/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/timshen91/subscriptions", "organizations_url": "https://api.github.com/users/timshen91/orgs", "repos_url": "https://api.github.com/users/timshen91/repos", "events_url": "https://api.github.com/users/timshen91/events{/privacy}", "received_events_url": "https://api.github.com/users/timshen91/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "ce96d372535446c64e2434f5eafddf78331f2808", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ce96d372535446c64e2434f5eafddf78331f2808", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ce96d372535446c64e2434f5eafddf78331f2808"}], "stats": {"total": 315, "additions": 255, "deletions": 60}, "files": [{"sha": "cd365692b5c9fe9b8fb29cf006a5defdff6c5d95", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e35096918493d92c03f4d6483bfd07f5ec6a998e/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e35096918493d92c03f4d6483bfd07f5ec6a998e/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=e35096918493d92c03f4d6483bfd07f5ec6a998e", "patch": "@@ -1,3 +1,26 @@\n+2013-09-02  Tim Shen  <timshen91@gmail.com>\n+\n+\t* regex_automaton.h: Rearrange _NFA's layout.\n+\t* include/bits/regex_compiler.h: Add _AnyMatcher and _CharMatcher.\n+\t  Rearrange _BracketMatcher's layout.\n+\t  (_BracketMatcher<>::_M_add_char): Use set instead of vector for\n+\t  _M_char_set.\n+\t  (_BracketMatcher<>::_M_add_collating_element): Likewise.\n+\t  (_BracketMatcher<>::_M_make_range): Likewise.\n+\t* include/bits/regex_compiler.tcc (_Compiler<>::_M_atom): Use\n+\t  apropriate constructors of matchers above.\n+\t* testsuite/28_regex/algorithms/regex_match/ecma/char/anymatcher.cc:\n+\t  New.\n+\t* testsuite/28_regex/algorithms/regex_match/ecma/char/backref.cc: New.\n+\t* testsuite/28_regex/algorithms/regex_match/ecma/char/empty_range.cc:\n+\t  New.\n+\t* testsuite/28_regex/algorithms/regex_match/ecma/char/emptygroup.cc:\n+\t  New.\n+\t* testsuite/28_regex/algorithms/regex_match/ecma/char/hex.cc: New.\n+\t* testsuite/28_regex/algorithms/regex_match/ecma/wchar_t/anymatcher.cc:\n+\t  New.\n+\t* testsuite/28_regex/algorithms/regex_match/ecma/wchar_t/hex.cc: New.\n+\n 2013-08-30  Fran\u00e7ois Dumont  <fdumont@gcc.gnu.org>\n \n \tPR libstdc++/58148"}, {"sha": "2c872aa94822e71ea854f733e433fda816232021", "filename": "libstdc++-v3/include/bits/regex_automaton.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e35096918493d92c03f4d6483bfd07f5ec6a998e/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fregex_automaton.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e35096918493d92c03f4d6483bfd07f5ec6a998e/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fregex_automaton.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fregex_automaton.h?ref=e35096918493d92c03f4d6483bfd07f5ec6a998e", "patch": "@@ -206,12 +206,12 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       _M_dot(std::ostream& __ostr) const;\n #endif\n \n+      std::vector<unsigned int> _M_paren_stack;\n+      _StateSet                 _M_accepting_states;\n       _FlagT                    _M_flags;\n       _StateIdT                 _M_start_state;\n-      _StateSet                 _M_accepting_states;\n       _SizeT                    _M_subexpr_count;\n       bool                      _M_has_backref;\n-      std::vector<unsigned int> _M_paren_stack;\n     };\n \n   /// Describes a sequence of one or more %_State, its current start"}, {"sha": "55ecdb92d41a8bfe99239b580450657c116d55b8", "filename": "libstdc++-v3/include/bits/regex_compiler.h", "status": "modified", "additions": 68, "deletions": 20, "changes": 88, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e35096918493d92c03f4d6483bfd07f5ec6a998e/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fregex_compiler.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e35096918493d92c03f4d6483bfd07f5ec6a998e/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fregex_compiler.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fregex_compiler.h?ref=e35096918493d92c03f4d6483bfd07f5ec6a998e", "patch": "@@ -125,12 +125,60 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n       const _TraitsT& _M_traits;\n       _ScannerT       _M_scanner;\n-      _StringT        _M_value;\n       _RegexT         _M_state_store;\n+      _StringT        _M_value;\n       _StackT         _M_stack;\n       _FlagT          _M_flags;\n     };\n \n+  template<typename _CharT, typename _TraitsT>\n+    struct _AnyMatcher\n+    {\n+      explicit\n+      _AnyMatcher(const _TraitsT& __traits)\n+      : _M_traits(__traits)\n+      { }\n+\n+      bool\n+      operator()(_CharT __ch) const\n+      {\n+\treturn _M_traits.translate(__ch) != '\\n'\n+\t  && _M_traits.translate(__ch) != '\\r'\n+\t  && _M_traits.translate(__ch) != u'\\u2028'\n+\t  && _M_traits.translate(__ch) != u'\\u2029';\n+      }\n+\n+      const _TraitsT& _M_traits;\n+    };\n+\n+  template<typename _CharT, typename _TraitsT>\n+    struct _CharMatcher\n+    {\n+      typedef regex_constants::syntax_option_type _FlagT;\n+\n+      explicit\n+      _CharMatcher(_CharT __ch, const _TraitsT& __traits, _FlagT __flags)\n+      : _M_ch(_M_translate(__ch)), _M_traits(__traits), _M_flags(__flags)\n+      { }\n+\n+      bool\n+      operator()(_CharT __ch) const\n+      { return _M_ch == _M_translate(__ch); }\n+\n+      _CharT\n+      _M_translate(_CharT __ch) const\n+      {\n+\tif (_M_flags & regex_constants::icase)\n+\t  return _M_traits.translate_nocase(__ch);\n+\telse\n+\t  return _M_traits.translate(__ch);\n+      }\n+\n+      const _TraitsT& _M_traits;\n+      _FlagT          _M_flags;\n+      _CharT          _M_ch;\n+    };\n+\n   /// Matches a character range (bracket expression)\n   template<typename _CharT, typename _TraitsT>\n     struct _BracketMatcher\n@@ -141,9 +189,9 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n       explicit\n       _BracketMatcher(bool __is_non_matching,\n-\t\t      const _TraitsT& __t,\n+\t\t      const _TraitsT& __traits,\n \t\t      _FlagT __flags)\n-      : _M_is_non_matching(__is_non_matching), _M_traits(__t),\n+      : _M_is_non_matching(__is_non_matching), _M_traits(__traits),\n \t_M_flags(__flags), _M_class_set(0)\n       { }\n \n@@ -152,7 +200,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n       void\n       _M_add_char(_CharT __c)\n-      { _M_char_set.push_back(_M_translate(__c)); }\n+      { _M_char_set.insert(_M_translate(__c)); }\n \n       void\n       _M_add_collating_element(const _StringT& __s)\n@@ -162,7 +210,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \tif (__st.empty())\n \t  __throw_regex_error(regex_constants::error_collate);\n \t// TODO: digraph\n-\t_M_char_set.push_back(__st[0]);\n+\t_M_char_set.insert(_M_translate(__st[0]));\n       }\n \n       void\n@@ -186,21 +234,21 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       void\n       _M_make_range(_CharT __l, _CharT __r)\n       {\n-\t_M_range_set.push_back(\n-\t  make_pair(_M_get_str(_M_translate(__l)),\n-\t\t    _M_get_str(_M_translate(__r))));\n+\tif (_M_flags & regex_constants::collate)\n+\t  _M_range_set.insert(\n+\t    make_pair(_M_get_str(_M_translate(__l)),\n+\t\t      _M_get_str(_M_translate(__r))));\n+\telse\n+\t  _M_range_set.insert(make_pair(_M_get_str(__l), _M_get_str(__r)));\n       }\n \n       _CharT\n       _M_translate(_CharT __c) const\n       {\n-\tif (_M_flags & regex_constants::collate)\n-\t  if (_M_is_icase())\n-\t    return _M_traits.translate_nocase(__c);\n-\t  else\n-\t    return _M_traits.translate(__c);\n+\tif (_M_is_icase())\n+\t  return _M_traits.translate_nocase(__c);\n \telse\n-\t  return __c;\n+\t  return _M_traits.translate(__c);\n       }\n \n       bool\n@@ -214,12 +262,12 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \treturn _M_traits.transform(__s.begin(), __s.end());\n       }\n \n-      const _TraitsT&                       _M_traits;\n-      _FlagT                                _M_flags;\n-      bool                                  _M_is_non_matching;\n-      std::vector<_CharT>                   _M_char_set;\n-      std::vector<pair<_StringT, _StringT>> _M_range_set;\n-      _CharClassT                           _M_class_set;\n+      std::set<_CharT>                   _M_char_set;\n+      std::set<pair<_StringT, _StringT>> _M_range_set;\n+      const _TraitsT&                    _M_traits;\n+      _CharClassT                        _M_class_set;\n+      _FlagT                             _M_flags;\n+      bool                               _M_is_non_matching;\n     };\n \n  //@} regex-detail"}, {"sha": "e41b251c2578c94c030dccc727c35e678a8703ef", "filename": "libstdc++-v3/include/bits/regex_compiler.tcc", "status": "modified", "additions": 11, "deletions": 33, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e35096918493d92c03f4d6483bfd07f5ec6a998e/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fregex_compiler.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e35096918493d92c03f4d6483bfd07f5ec6a998e/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fregex_compiler.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fregex_compiler.tcc?ref=e35096918493d92c03f4d6483bfd07f5ec6a998e", "patch": "@@ -204,32 +204,18 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     {\n       if (_M_match_token(_ScannerT::_S_token_anychar))\n \t{\n-\t  const static auto&\n-\t  __any_matcher = [](_CharT __ch) -> bool\n-\t  { return true; };\n-\n \t  _M_stack.push(_StateSeqT(_M_state_store,\n \t\t\t\t  _M_state_store._M_insert_matcher\n-\t\t\t\t  (__any_matcher)));\n+\t\t\t\t  (_AnyMatcher<_CharT, _TraitsT>(_M_traits))));\n \t  return true;\n \t}\n       if (_M_try_char())\n \t{\n-\t  _CharT __c = _M_value[0];\n-\t  __detail::_Matcher<_CharT> f;\n-\t  if (_M_flags & regex_constants::icase)\n-\t    {\n-\t      auto __traits = this->_M_traits;\n-\t      __c = __traits.translate_nocase(__c);\n-\t      f = [__traits, __c](_CharT __ch) -> bool\n-\t      { return __traits.translate_nocase(__ch) == __c; };\n-\t    }\n-\t  else\n-\t    f = [__c](_CharT __ch) -> bool\n-\t    { return __ch == __c; };\n-\n \t  _M_stack.push(_StateSeqT(_M_state_store,\n-\t\t\t\t   _M_state_store._M_insert_matcher(f)));\n+\t\t\t\t   _M_state_store._M_insert_matcher\n+\t\t\t\t   (_CharMatcher<_CharT, _TraitsT>(_M_value[0],\n+\t\t\t\t\t\t\t\t   _M_traits,\n+\t\t\t\t\t\t\t\t   _M_flags))));\n \t  return true;\n \t}\n       if (_M_match_token(_ScannerT::_S_token_backref))\n@@ -374,26 +360,18 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       bool __ret = false;\n       if (_M_traits.isctype(__ch, _M_class_set))\n \t__ret = true;\n+      else if (_M_char_set.count(_M_translate(__ch)))\n+\t__ret = true;\n       else\n \t{\n-\t  __ch = _M_translate(__ch);\n-\n-\t  for (auto __c : _M_char_set)\n-\t    if (__c == __ch)\n+\t  _StringT __s = _M_get_str(_M_flags & regex_constants::collate\n+\t\t\t\t    ? _M_translate(__ch) : __ch);\n+\t  for (auto& __it : _M_range_set)\n+\t    if (__it.first <= __s && __s <= __it.second)\n \t      {\n \t\t__ret = true;\n \t\tbreak;\n \t      }\n-\t  if (!__ret)\n-\t    {\n-\t      _StringT __s = _M_get_str(__ch);\n-\t      for (auto& __it : _M_range_set)\n-\t\tif (__it.first <= __s && __s <= __it.second)\n-\t\t  {\n-\t\t    __ret = true;\n-\t\t    break;\n-\t\t  }\n-\t    }\n \t}\n       if (_M_is_non_matching)\n \treturn !__ret;"}, {"sha": "6e6095b8f249a9ece3daccebcd00be5179f96d04", "filename": "libstdc++-v3/testsuite/28_regex/algorithms/regex_match/ecma/char/anymatcher.cc", "status": "added", "additions": 52, "deletions": 0, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e35096918493d92c03f4d6483bfd07f5ec6a998e/libstdc%2B%2B-v3%2Ftestsuite%2F28_regex%2Falgorithms%2Fregex_match%2Fecma%2Fchar%2Fanymatcher.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e35096918493d92c03f4d6483bfd07f5ec6a998e/libstdc%2B%2B-v3%2Ftestsuite%2F28_regex%2Falgorithms%2Fregex_match%2Fecma%2Fchar%2Fanymatcher.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F28_regex%2Falgorithms%2Fregex_match%2Fecma%2Fchar%2Fanymatcher.cc?ref=e35096918493d92c03f4d6483bfd07f5ec6a998e", "patch": "@@ -0,0 +1,52 @@\n+// { dg-options \"-std=gnu++11\" }\n+\n+//\n+// 2013-09-02  Tim Shen <timshen91@gmail.com>\n+//\n+// Copyright (C) 2013 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// 28.11.2 regex_match\n+// Tests ECMAScript \".\" against a std::string.\n+\n+#include <regex>\n+#include <testsuite_hooks.h>\n+\n+using namespace std;\n+\n+void\n+test01()\n+{\n+  bool test __attribute__((unused)) = true;\n+\n+#define TEST(res, s) \\\n+  {\\\n+    regex re(res);\\\n+    string st(s);\\\n+    VERIFY(!regex_match(st, re));\\\n+  }\n+  TEST(\".\", \"\\0\");\n+  TEST(\".\", \"\\n\");\n+  TEST(\".\", \"\\r\");\n+}\n+\n+int\n+main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "321ce35a0389a90b44c65584f71f280674c72e78", "filename": "libstdc++-v3/testsuite/28_regex/algorithms/regex_match/ecma/char/backref.cc", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e35096918493d92c03f4d6483bfd07f5ec6a998e/libstdc%2B%2B-v3%2Ftestsuite%2F28_regex%2Falgorithms%2Fregex_match%2Fecma%2Fchar%2Fbackref.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e35096918493d92c03f4d6483bfd07f5ec6a998e/libstdc%2B%2B-v3%2Ftestsuite%2F28_regex%2Falgorithms%2Fregex_match%2Fecma%2Fchar%2Fbackref.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F28_regex%2Falgorithms%2Fregex_match%2Fecma%2Fchar%2Fbackref.cc?ref=e35096918493d92c03f4d6483bfd07f5ec6a998e", "patch": "@@ -1,7 +1,7 @@\n // { dg-options \"-std=gnu++11\" }\n \n //\n-// 2013-08-10  Tim Shen <timshen91@gmail.com>\n+// 2013-09-02  Tim Shen <timshen91@gmail.com>\n //\n // Copyright (C) 2013 Free Software Foundation, Inc.\n //", "previous_filename": "libstdc++-v3/testsuite/28_regex/algorithms/regex_match/ecma/string_backref.cc"}, {"sha": "3c48d3521a5e2cc804a4cfbbc1ddcf8de8ffc95d", "filename": "libstdc++-v3/testsuite/28_regex/algorithms/regex_match/ecma/char/empty_range.cc", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e35096918493d92c03f4d6483bfd07f5ec6a998e/libstdc%2B%2B-v3%2Ftestsuite%2F28_regex%2Falgorithms%2Fregex_match%2Fecma%2Fchar%2Fempty_range.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e35096918493d92c03f4d6483bfd07f5ec6a998e/libstdc%2B%2B-v3%2Ftestsuite%2F28_regex%2Falgorithms%2Fregex_match%2Fecma%2Fchar%2Fempty_range.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F28_regex%2Falgorithms%2Fregex_match%2Fecma%2Fchar%2Fempty_range.cc?ref=e35096918493d92c03f4d6483bfd07f5ec6a998e", "patch": "@@ -1,7 +1,7 @@\n // { dg-options \"-std=gnu++11\" }\n \n //\n-// 2013-08-26  Tim Shen <timshen91@gmail.com>\n+// 2013-09-02  Tim Shen <timshen91@gmail.com>\n //\n // Copyright (C) 2013 Free Software Foundation, Inc.\n //", "previous_filename": "libstdc++-v3/testsuite/28_regex/algorithms/regex_match/ecma/empty_range.cc"}, {"sha": "1dc8f63f7891c0d60fb16a5fbc0c82fdfd99bb51", "filename": "libstdc++-v3/testsuite/28_regex/algorithms/regex_match/ecma/char/emptygroup.cc", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e35096918493d92c03f4d6483bfd07f5ec6a998e/libstdc%2B%2B-v3%2Ftestsuite%2F28_regex%2Falgorithms%2Fregex_match%2Fecma%2Fchar%2Femptygroup.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e35096918493d92c03f4d6483bfd07f5ec6a998e/libstdc%2B%2B-v3%2Ftestsuite%2F28_regex%2Falgorithms%2Fregex_match%2Fecma%2Fchar%2Femptygroup.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F28_regex%2Falgorithms%2Fregex_match%2Fecma%2Fchar%2Femptygroup.cc?ref=e35096918493d92c03f4d6483bfd07f5ec6a998e", "patch": "@@ -1,7 +1,7 @@\n // { dg-options \"-std=gnu++11\" }\n \n //\n-// 2013-08-22  Tim Shen <timshen91@gmail.com>\n+// 2013-09-02  Tim Shen <timshen91@gmail.com>\n //\n // Copyright (C) 2013 Free Software Foundation, Inc.\n //", "previous_filename": "libstdc++-v3/testsuite/28_regex/algorithms/regex_match/ecma/cstring_emptygroup.cc"}, {"sha": "a73b742a5e43dfdafe61a8a98910f2b9a350383a", "filename": "libstdc++-v3/testsuite/28_regex/algorithms/regex_match/ecma/char/hex.cc", "status": "renamed", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e35096918493d92c03f4d6483bfd07f5ec6a998e/libstdc%2B%2B-v3%2Ftestsuite%2F28_regex%2Falgorithms%2Fregex_match%2Fecma%2Fchar%2Fhex.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e35096918493d92c03f4d6483bfd07f5ec6a998e/libstdc%2B%2B-v3%2Ftestsuite%2F28_regex%2Falgorithms%2Fregex_match%2Fecma%2Fchar%2Fhex.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F28_regex%2Falgorithms%2Fregex_match%2Fecma%2Fchar%2Fhex.cc?ref=e35096918493d92c03f4d6483bfd07f5ec6a998e", "patch": "@@ -1,7 +1,7 @@\n // { dg-options \"-std=gnu++11\" }\n \n //\n-// 2013-08-26  Tim Shen <timshen91@gmail.com>\n+// 2013-09-02  Tim Shen <timshen91@gmail.com>\n //\n // Copyright (C) 2013 Free Software Foundation, Inc.\n //\n@@ -34,7 +34,6 @@ test01()\n   bool test __attribute__((unused)) = true;\n \n   VERIFY(regex_match(\":\", regex(\"\\\\x3a\")));\n-  VERIFY(regex_match(L\"\\u1234\", wregex(L\"\\\\u1234\")));\n   try\n     {\n       regex(\"\\\\u400x\");", "previous_filename": "libstdc++-v3/testsuite/28_regex/algorithms/regex_match/ecma/cstring_hex.cc"}, {"sha": "c574908d6a9c51035bfb29217c815bec0db79d43", "filename": "libstdc++-v3/testsuite/28_regex/algorithms/regex_match/ecma/wchar_t/anymatcher.cc", "status": "added", "additions": 51, "deletions": 0, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e35096918493d92c03f4d6483bfd07f5ec6a998e/libstdc%2B%2B-v3%2Ftestsuite%2F28_regex%2Falgorithms%2Fregex_match%2Fecma%2Fwchar_t%2Fanymatcher.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e35096918493d92c03f4d6483bfd07f5ec6a998e/libstdc%2B%2B-v3%2Ftestsuite%2F28_regex%2Falgorithms%2Fregex_match%2Fecma%2Fwchar_t%2Fanymatcher.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F28_regex%2Falgorithms%2Fregex_match%2Fecma%2Fwchar_t%2Fanymatcher.cc?ref=e35096918493d92c03f4d6483bfd07f5ec6a998e", "patch": "@@ -0,0 +1,51 @@\n+// { dg-options \"-std=gnu++11\" }\n+\n+//\n+// 2013-09-02  Tim Shen <timshen91@gmail.com>\n+//\n+// Copyright (C) 2013 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// 28.11.2 regex_match\n+// Tests ECMAScript \".\" against a std::string.\n+\n+#include <regex>\n+#include <testsuite_hooks.h>\n+\n+using namespace std;\n+\n+void\n+test01()\n+{\n+  bool test __attribute__((unused)) = true;\n+\n+#define TESTL(res, s) \\\n+  {\\\n+    wregex re(res);\\\n+    wstring st(s);\\\n+    VERIFY(!regex_match(st, re));\\\n+  }\n+  TESTL(L\".\", L\"\\u2028\");\n+  TESTL(L\".\", L\"\\u2029\");\n+}\n+\n+int\n+main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "f9561be70e29a74bfda300eefaf1f2e3f4728433", "filename": "libstdc++-v3/testsuite/28_regex/algorithms/regex_match/ecma/wchar_t/hex.cc", "status": "added", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e35096918493d92c03f4d6483bfd07f5ec6a998e/libstdc%2B%2B-v3%2Ftestsuite%2F28_regex%2Falgorithms%2Fregex_match%2Fecma%2Fwchar_t%2Fhex.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e35096918493d92c03f4d6483bfd07f5ec6a998e/libstdc%2B%2B-v3%2Ftestsuite%2F28_regex%2Falgorithms%2Fregex_match%2Fecma%2Fwchar_t%2Fhex.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F28_regex%2Falgorithms%2Fregex_match%2Fecma%2Fwchar_t%2Fhex.cc?ref=e35096918493d92c03f4d6483bfd07f5ec6a998e", "patch": "@@ -0,0 +1,44 @@\n+// { dg-options \"-std=gnu++11\" }\n+\n+//\n+// 2013-09-02  Tim Shen <timshen91@gmail.com>\n+//\n+// Copyright (C) 2013 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// 28.11.2 regex_match\n+// Tests ECMAScript \\x and \\u.\n+\n+#include <regex>\n+#include <testsuite_hooks.h>\n+\n+using namespace std;\n+\n+void\n+test01()\n+{\n+  bool test __attribute__((unused)) = true;\n+\n+  VERIFY(regex_match(L\"\\u1234\", wregex(L\"\\\\u1234\")));\n+}\n+\n+int\n+main()\n+{\n+  test01();\n+  return 0;\n+}"}]}