{"sha": "a11f204e5a30d1dfd2508e3f3014509a0342f604", "node_id": "C_kwDOANBUbNoAKGExMWYyMDRlNWEzMGQxZGZkMjUwOGUzZjMwMTQ1MDlhMDM0MmY2MDQ", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2022-04-01T19:55:21Z"}, "committer": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2022-04-04T14:43:33Z"}, "message": "c++: alias-tmpl equivalence and default targs [PR103852]\n\nThe suggested resolution for CWG1286, which we implemented, ignores default\ntemplate arguments, but this PR is an example of why that doesn't make\nsense: the templates aren't functionally equivalent.\n\n\tPR c++/103852\n\tDR 1286\n\ngcc/cp/ChangeLog:\n\n\t* pt.cc (get_underlying_template): Compare default template args.\n\ngcc/testsuite/ChangeLog:\n\n\t* g++.dg/cpp0x/alias-decl-dr1286a.C: Default args now matter.\n\t* g++.dg/cpp1z/class-deduction-alias1.C: New test.", "tree": {"sha": "94522b48491e007b1f98a227ee44cb4ec21287d6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/94522b48491e007b1f98a227ee44cb4ec21287d6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a11f204e5a30d1dfd2508e3f3014509a0342f604", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a11f204e5a30d1dfd2508e3f3014509a0342f604", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a11f204e5a30d1dfd2508e3f3014509a0342f604", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a11f204e5a30d1dfd2508e3f3014509a0342f604/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2f0610acbc056052a108e4a46911fc21d0dca2ab", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2f0610acbc056052a108e4a46911fc21d0dca2ab", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2f0610acbc056052a108e4a46911fc21d0dca2ab"}], "stats": {"total": 46, "additions": 38, "deletions": 8}, "files": [{"sha": "1f0231f70e67cbe69e00c8392cdf32db01212663", "filename": "gcc/cp/pt.cc", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a11f204e5a30d1dfd2508e3f3014509a0342f604/gcc%2Fcp%2Fpt.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a11f204e5a30d1dfd2508e3f3014509a0342f604/gcc%2Fcp%2Fpt.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.cc?ref=a11f204e5a30d1dfd2508e3f3014509a0342f604", "patch": "@@ -6637,6 +6637,18 @@ get_underlying_template (tree tmpl)\n       if (!comp_template_args (TI_ARGS (tinfo), alias_args))\n \tbreak;\n \n+      /* Are any default template arguments equivalent?  */\n+      tree aparms = INNERMOST_TEMPLATE_PARMS (DECL_TEMPLATE_PARMS (tmpl));\n+      tree uparms = INNERMOST_TEMPLATE_PARMS (DECL_TEMPLATE_PARMS (underlying));\n+      const int nparms = TREE_VEC_LENGTH (aparms);\n+      for (int i = 0; i < nparms; ++i)\n+\t{\n+\t  tree adefarg = TREE_PURPOSE (TREE_VEC_ELT (aparms, i));\n+\t  tree udefarg = TREE_PURPOSE (TREE_VEC_ELT (uparms, i));\n+\t  if (!template_args_equal (adefarg, udefarg))\n+\t    goto top_break;\n+\t}\n+\n       /* If TMPL adds or changes any constraints, it isn't equivalent.  I think\n \t it's appropriate to treat a less-constrained alias as equivalent.  */\n       if (!at_least_as_constrained (underlying, tmpl))\n@@ -6645,6 +6657,7 @@ get_underlying_template (tree tmpl)\n       /* Alias is equivalent.  Strip it and repeat.  */\n       tmpl = underlying;\n     }\n+  top_break:;\n \n   return tmpl;\n }"}, {"sha": "fbd63d891d0135497b20ccd86ba109a67077a17d", "filename": "gcc/testsuite/g++.dg/cpp0x/alias-decl-dr1286a.C", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a11f204e5a30d1dfd2508e3f3014509a0342f604/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Falias-decl-dr1286a.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a11f204e5a30d1dfd2508e3f3014509a0342f604/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Falias-decl-dr1286a.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Falias-decl-dr1286a.C?ref=a11f204e5a30d1dfd2508e3f3014509a0342f604", "patch": "@@ -11,13 +11,13 @@ template<typename T, typename U = T> struct A;\n template<template <class...> class> struct X;\n \n // equivalent to A\n-template<typename V, typename W>\n+template<typename V, typename W = V>\n using B = A<V, W>;\n \n same<X<A>,X<B>> s1;\n \n // not equivalent to A: not all parameters used\n-template<typename V, typename W>\n+template<typename V, typename W = V>\n using C = A<V>;\n \n different<X<A>,X<C>> d1;\n@@ -29,32 +29,32 @@ using D = A<V>;\n different<X<A>,X<D>> d2;\n \n // not equivalent to A: template-arguments in wrong order\n-template<typename V, typename W>\n+template<typename V, typename W = V>\n using E = A<W, V>;\n \n different<X<A>,X<E>> d3;\n \n-// equivalent to A: default arguments not considered\n+// NOT equivalent to A: default arguments now considered\n template<typename V, typename W = int>\n using F = A<V, W>;\n \n-same<X<A>,X<F>> s2;\n+different<X<A>,X<F>> s2;\n \n // equivalent to A and B\n-template<typename V, typename W>\n+template<typename V, typename W = V>\n using G = A<V, W>;\n \n same<X<A>,X<G>> s3;\n same<X<B>,X<G>> s3b;\n \n // equivalent to E\n-template<typename V, typename W>\n+template<typename V, typename W = V>\n using H = E<V, W>;\n \n same<X<E>,X<H>> s4;\n \n // not equivalent to A: argument not identifier\n-template<typename V, typename W>\n+template<typename V, typename W = V>\n using I = A<V, typename W::type>;\n \n different<X<A>,X<I>> d4;"}, {"sha": "1ec90b58e3a006bec52de77f655d499afe4ec4af", "filename": "gcc/testsuite/g++.dg/cpp1z/class-deduction-alias1.C", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a11f204e5a30d1dfd2508e3f3014509a0342f604/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fclass-deduction-alias1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a11f204e5a30d1dfd2508e3f3014509a0342f604/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fclass-deduction-alias1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fclass-deduction-alias1.C?ref=a11f204e5a30d1dfd2508e3f3014509a0342f604", "patch": "@@ -0,0 +1,17 @@\n+// PR c++/103852\n+// { dg-do compile { target c++17 } }\n+\n+template <class T> struct b{};\n+template <class T, class T1 = b<T>>\n+struct s\n+{\n+    s(T);\n+};\n+s c(100);\n+template <class T, class T1 = b<T>>\n+using ss = s<T, T1>;\t     // equivalent under proposed resolution of DR 1286\n+ss tt(1);\t\t     // OK\n+\n+template <class T, class T1 = T>\n+using ss2 = s<T, T1>;\t     // different default arg makes it non-equivalent\n+ss2 tt2(1); // { dg-error \"alias template deduction\" \"\" { target c++17_only } }"}]}