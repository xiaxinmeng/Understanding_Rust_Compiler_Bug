{"sha": "92eabea208c3d09e0234cd32db064d6e1d5fac7b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTJlYWJlYTIwOGMzZDA5ZTAyMzRjZDMyZGIwNjRkNmUxZDVmYWM3Yg==", "commit": {"author": {"name": "Phil Edwards", "email": "pme@gcc.gnu.org", "date": "2003-08-27T19:06:56Z"}, "committer": {"name": "Phil Edwards", "email": "pme@gcc.gnu.org", "date": "2003-08-27T19:06:56Z"}, "message": "acinclude.m4 (GLIBCXX_CONDITIONAL): New macro.\n\n2003-08-27  Phil Edwards  <pme@gcc.gnu.org>\n\n\t* acinclude.m4 (GLIBCXX_CONDITIONAL):  New macro.  Wrap\n\tAM_CONDITIONAL.  Replace all calls to AM_CONDITIONAL with this one.\n\t(GLIBCXX_ENABLE_HOSTED):  New macro, sets new variable is_hosted,\n\tused elsewhere in this file.\n\t(GLIBCXX_EVALUATE_CONDITIONALS):  New macro...\n\t* configure.ac:  ...called here to expand all conditionals.\n\t* Makefile.am:  Conditionalize SUBDIRS on GLIBCXX_HOSTED.\n\t* include/Makefile.am:  Remove redundant gxx_include_dir assignment.\n\t(install-freestanding-headers):  New target, a subset of\n\tinstall-headers.  Conditionalize install-data-local on GLIBCXX_HOSTED.\n\n\t* aclocal.m4, configure, Makefile.in, include/Makefile.in,\n\tlibmath/Makefile.in, libsupc++/Makefile.in, po/Makefile.in,\n\tsrc/Makefile.in, testsuite/Makefile.in:  Regenerated.\n\nFrom-SVN: r70854", "tree": {"sha": "d38037daf02cdd90f73e292b4bafe5c70a210f8a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d38037daf02cdd90f73e292b4bafe5c70a210f8a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/92eabea208c3d09e0234cd32db064d6e1d5fac7b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/92eabea208c3d09e0234cd32db064d6e1d5fac7b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/92eabea208c3d09e0234cd32db064d6e1d5fac7b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/92eabea208c3d09e0234cd32db064d6e1d5fac7b/comments", "author": null, "committer": null, "parents": [{"sha": "5af2f3d3ff87a08c4292f6dcbf60a6d1b7039e6c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5af2f3d3ff87a08c4292f6dcbf60a6d1b7039e6c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5af2f3d3ff87a08c4292f6dcbf60a6d1b7039e6c"}], "stats": {"total": 565, "additions": 405, "deletions": 160}, "files": [{"sha": "26cbdff5a741fd33cee2770b00daf051534f2c26", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92eabea208c3d09e0234cd32db064d6e1d5fac7b/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92eabea208c3d09e0234cd32db064d6e1d5fac7b/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=92eabea208c3d09e0234cd32db064d6e1d5fac7b", "patch": "@@ -1,3 +1,20 @@\n+2003-08-27  Phil Edwards  <pme@gcc.gnu.org>\n+\n+\t* acinclude.m4 (GLIBCXX_CONDITIONAL):  New macro.  Wrap\n+\tAM_CONDITIONAL.  Replace all calls to AM_CONDITIONAL with this one.\n+\t(GLIBCXX_ENABLE_HOSTED):  New macro, sets new variable is_hosted,\n+\tused elsewhere in this file.\n+\t(GLIBCXX_EVALUATE_CONDITIONALS):  New macro...\n+\t* configure.ac:  ...called here to expand all conditionals.\n+\t* Makefile.am:  Conditionalize SUBDIRS on GLIBCXX_HOSTED.\n+\t* include/Makefile.am:  Remove redundant gxx_include_dir assignment.\n+\t(install-freestanding-headers):  New target, a subset of\n+\tinstall-headers.  Conditionalize install-data-local on GLIBCXX_HOSTED.\n+\n+\t* aclocal.m4, configure, Makefile.in, include/Makefile.in,\n+\tlibmath/Makefile.in, libsupc++/Makefile.in, po/Makefile.in,\n+\tsrc/Makefile.in, testsuite/Makefile.in:  Regenerated.\n+\n 2003-08-26  Phil Edwards  <pme@gcc.gnu.org>\n \n \t* docs/doxygen/run_doxygen:  Shell fixes.  Remove hardcoded local"}, {"sha": "2c3db0e94802d050d620c61be0f1e4954c356197", "filename": "libstdc++-v3/Makefile.am", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92eabea208c3d09e0234cd32db064d6e1d5fac7b/libstdc%2B%2B-v3%2FMakefile.am", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92eabea208c3d09e0234cd32db064d6e1d5fac7b/libstdc%2B%2B-v3%2FMakefile.am", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FMakefile.am?ref=92eabea208c3d09e0234cd32db064d6e1d5fac7b", "patch": "@@ -24,8 +24,12 @@\n \n include $(top_srcdir)/fragment.am\n \n+if GLIBCXX_HOSTED\n+  # Possibly libmath as well...\n+  hosted_source = src po\n+endif\n ## Keep this list sync'd with acinclude.m4:GLIBCXX_CONFIGURE.\n-SUBDIRS = include libmath libsupc++ src po testsuite \n+SUBDIRS = include libmath libsupc++ $(hosted_source) testsuite \n \n # These rules are messy, but are hella worth it.\n doxygen:"}, {"sha": "2e7f454aeb1f4da9401d7b63f3c0dd1e536501aa", "filename": "libstdc++-v3/Makefile.in", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92eabea208c3d09e0234cd32db064d6e1d5fac7b/libstdc%2B%2B-v3%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92eabea208c3d09e0234cd32db064d6e1d5fac7b/libstdc%2B%2B-v3%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FMakefile.in?ref=92eabea208c3d09e0234cd32db064d6e1d5fac7b", "patch": "@@ -94,6 +94,8 @@ GLIBCXX_C_HEADERS_C_FALSE = @GLIBCXX_C_HEADERS_C_FALSE@\n GLIBCXX_C_HEADERS_C_STD_FALSE = @GLIBCXX_C_HEADERS_C_STD_FALSE@\n GLIBCXX_C_HEADERS_C_STD_TRUE = @GLIBCXX_C_HEADERS_C_STD_TRUE@\n GLIBCXX_C_HEADERS_C_TRUE = @GLIBCXX_C_HEADERS_C_TRUE@\n+GLIBCXX_HOSTED_FALSE = @GLIBCXX_HOSTED_FALSE@\n+GLIBCXX_HOSTED_TRUE = @GLIBCXX_HOSTED_TRUE@\n GLIBCXX_INCLUDES = @GLIBCXX_INCLUDES@\n GLIBCXX_TEST_ABI_FALSE = @GLIBCXX_TEST_ABI_FALSE@\n GLIBCXX_TEST_ABI_TRUE = @GLIBCXX_TEST_ABI_TRUE@\n@@ -216,8 +218,8 @@ WARN_CXXFLAGS = \\\n \n # -I/-D flags to pass when compiling.\n AM_CPPFLAGS = $(GLIBCXX_INCLUDES)\n-\n-SUBDIRS = include libmath libsupc++ src po testsuite \n+@GLIBCXX_HOSTED_TRUE@hosted_source = src po\n+SUBDIRS = include libmath libsupc++ $(hosted_source) testsuite \n \n # Multilib support.\n MAKEOVERRIDES = \n@@ -296,7 +298,7 @@ DIST_COMMON = README $(top_srcdir)/fragment.am ../ABOUT-NLS ../COPYING \\\n \t../ltconfig ../ltmain.sh ../missing ../mkinstalldirs ../ylwrap \\\n \tChangeLog Makefile.am Makefile.in acconfig.h acinclude.m4 \\\n \taclocal.m4 config.h.in configure configure.ac\n-DIST_SUBDIRS = $(SUBDIRS)\n+DIST_SUBDIRS = include libmath libsupc++ src po testsuite\n all: config.h\n \t$(MAKE) $(AM_MAKEFLAGS) all-recursive\n \n@@ -491,7 +493,7 @@ distdir: $(DISTFILES)\n \t    || exit 1; \\\n \t  fi; \\\n \tdone\n-\tlist='$(SUBDIRS)'; for subdir in $$list; do \\\n+\tlist='$(DIST_SUBDIRS)'; for subdir in $$list; do \\\n \t  if test \"$$subdir\" = .; then :; else \\\n \t    test -d $(distdir)/$$subdir \\\n \t    || mkdir $(distdir)/$$subdir \\\n@@ -670,6 +672,8 @@ uninstall-info: uninstall-info-recursive\n \tuninstall-info-recursive uninstall-recursive\n \n \n+@GLIBCXX_HOSTED_TRUE@  # Possibly libmath as well...\n+\n # These rules are messy, but are hella worth it.\n doxygen:\n \t-(srcdir=`cd ${top_srcdir}; ${PWD_COMMAND}`; \\"}, {"sha": "474af59c05e319c3ef4cfa267a1160b9b618655d", "filename": "libstdc++-v3/acinclude.m4", "status": "modified", "additions": 60, "deletions": 11, "changes": 71, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92eabea208c3d09e0234cd32db064d6e1d5fac7b/libstdc%2B%2B-v3%2Facinclude.m4", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92eabea208c3d09e0234cd32db064d6e1d5fac7b/libstdc%2B%2B-v3%2Facinclude.m4", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Facinclude.m4?ref=92eabea208c3d09e0234cd32db064d6e1d5fac7b", "patch": "@@ -1,4 +1,21 @@\n \n+dnl\n+dnl GLIBCXX_CONDITIONAL (NAME, SHELL-TEST)\n+dnl\n+dnl Exactly like AM_CONDITIONAL, but delays evaluation of the test until the\n+dnl end of configure.  This lets tested variables be reassigned, and the\n+dnl conditional will depend on the final state of the variable.  For a simple\n+dnl example of why this is needed, see GLIBCXX_ENABLE_HOSTED.\n+dnl\n+m4_define([_m4_divert(glibcxx_diversion)], 8000)dnl\n+AC_DEFUN(GLIBCXX_CONDITIONAL, [dnl\n+  m4_divert_text([glibcxx_diversion],dnl\n+   AM_CONDITIONAL([$1],[$2])\n+  )dnl\n+])dnl\n+AC_DEFUN(GLIBCXX_EVALUATE_CONDITIONALS, [m4_undivert([glibcxx_diversion])])dnl\n+\n+\n dnl\n dnl Check to see what architecture and operating system we are compiling\n dnl for.  Also, if architecture- or OS-specific flags are required for\n@@ -143,7 +160,10 @@ AC_DEFUN(GLIBCXX_CONFIGURE, [\n \n   AM_MAINTAINER_MODE\n \n-  # Set up safe default values for all subsequent AM_CONDITIONAL tests.\n+  # Set up safe default values for all subsequent AM_CONDITIONAL tests\n+  # which are themselves conditionally expanded.\n+  ## (Right now, this only matters for enable_wchar_t, but nothing prevents\n+  ## other macros from doing the same.  This should be automated.)  -pme\n   need_libmath=no\n   enable_wchar_t=no\n   #enable_libstdcxx_debug=no\n@@ -152,6 +172,7 @@ AC_DEFUN(GLIBCXX_CONFIGURE, [\n   #c_compatibility=no\n   #enable_abi_check=no\n   #enable_symvers=no\n+  #enable_hosted_libstdcxx=yes\n \n   # Find platform-specific directories containing configuration info.\n   # Also possibly modify flags used elsewhere, as needed by the platform.\n@@ -560,7 +581,7 @@ dnl Substs:\n dnl  baseline_dir\n dnl\n AC_DEFUN(GLIBCXX_CONFIGURE_TESTSUITE, [\n-  if $GLIBCXX_IS_NATIVE; then\n+  if $GLIBCXX_IS_NATIVE && test $is_hosted = yes; then\n     # Do checks for memory limit functions.\n     GLIBCXX_CHECK_SETRLIMIT\n \n@@ -573,7 +594,7 @@ AC_DEFUN(GLIBCXX_CONFIGURE_TESTSUITE, [\n   AC_SUBST(baseline_dir)\n \n   # Determine if checking the ABI is desirable.\n-  if test $enable_symvers = no; then\n+  if test $enable_symvers = no || test $is_hosted = no; then\n     enable_abi_check=no\n   else\n     case \"$host\" in\n@@ -584,8 +605,8 @@ AC_DEFUN(GLIBCXX_CONFIGURE_TESTSUITE, [\n     esac\n   fi\n \n-  AM_CONDITIONAL(GLIBCXX_TEST_WCHAR_T, test $enable_wchar_t = yes)\n-  AM_CONDITIONAL(GLIBCXX_TEST_ABI, test $enable_abi_check = yes)\n+  GLIBCXX_CONDITIONAL(GLIBCXX_TEST_WCHAR_T, test $enable_wchar_t = yes)\n+  GLIBCXX_CONDITIONAL(GLIBCXX_TEST_ABI, test $enable_abi_check = yes)\n ])\n \n \n@@ -897,9 +918,9 @@ AC_DEFUN(GLIBCXX_ENABLE_CHEADERS, [\n   C_INCLUDE_DIR='${glibcxx_srcdir}/include/'$enable_cheaders\n \n   AC_SUBST(C_INCLUDE_DIR)\n-  AM_CONDITIONAL(GLIBCXX_C_HEADERS_C, test $enable_cheaders = c)\n-  AM_CONDITIONAL(GLIBCXX_C_HEADERS_C_STD, test $enable_cheaders = c_std)\n-  AM_CONDITIONAL(GLIBCXX_C_HEADERS_COMPATIBILITY, test $c_compatibility = yes)\n+  GLIBCXX_CONDITIONAL(GLIBCXX_C_HEADERS_C, test $enable_cheaders = c)\n+  GLIBCXX_CONDITIONAL(GLIBCXX_C_HEADERS_C_STD, test $enable_cheaders = c_std)\n+  GLIBCXX_CONDITIONAL(GLIBCXX_C_HEADERS_COMPATIBILITY, test $c_compatibility = yes)\n ])\n \n \n@@ -1213,7 +1234,7 @@ AC_DEFUN(GLIBCXX_ENABLE_DEBUG, [\n   AC_MSG_CHECKING([for additional debug build])\n   GLIBCXX_ENABLE(libstdcxx-debug,$1,,[build extra debug library])\n   AC_MSG_RESULT($enable_libstdcxx_debug)\n-  AM_CONDITIONAL(GLIBCXX_BUILD_DEBUG, test $enable_libstdcxx_debug = yes)\n+  GLIBCXX_CONDITIONAL(GLIBCXX_BUILD_DEBUG, test $enable_libstdcxx_debug = yes)\n ])\n \n \n@@ -1246,6 +1267,34 @@ AC_DEFUN(GLIBCXX_ENABLE_DEBUG_FLAGS, [\n ])\n \n \n+dnl\n+dnl Check if the user only wants a freestanding library implementation.\n+dnl\n+dnl --disable-hosted-libstdcxx will turn off most of the library build,\n+dnl installing only the headers required by [17.4.1.3] and the language\n+dnl support library.  More than that will be built (to keep the Makefiles\n+dnl conveniently clean), but not installed.\n+dnl\n+dnl Sets:\n+dnl  is_hosted  (yes/no)\n+dnl\n+AC_DEFUN(GLIBCXX_ENABLE_HOSTED, [\n+  AC_ARG_ENABLE([hosted-libstdcxx],\n+    AC_HELP_STRING([--disable-hosted-libstdcxx],\n+                   [only build freestanding C++ runtime support]),,\n+    [enable_hosted_libstdcxx=yes])\n+  if test \"$enable_hosted_libstdcxx\" = no; then\n+    AC_MSG_NOTICE([Only freestanding libraries will be built])\n+    is_hosted=no\n+    enable_abi_check=no\n+    enable_libstdcxx_pch=no\n+  else\n+    is_hosted=yes\n+  fi\n+  GLIBCXX_CONDITIONAL(GLIBCXX_HOSTED, test $is_hosted = yes)\n+])\n+\n+\n dnl\n dnl Check for libunwind exception handling support.  If enabled, then\n dnl we assume that the _Unwind_* functions that make up the Unwind ABI\n@@ -1351,7 +1400,7 @@ AC_DEFUN(GLIBCXX_ENABLE_PCH, [\n     enable_libstdcxx_pch=$glibcxx_cv_prog_CXX_pch\n   fi\n \n-  AM_CONDITIONAL(GLIBCXX_BUILD_PCH, test $enable_libstdcxx_pch = yes)\n+  GLIBCXX_CONDITIONAL(GLIBCXX_BUILD_PCH, test $enable_libstdcxx_pch = yes)\n   if test $enable_libstdcxx_pch = yes; then\n     glibcxx_PCHFLAGS=\"-include bits/stdc++.h\"\n   else\n@@ -1523,7 +1572,7 @@ esac\n \n AC_SUBST(SYMVER_MAP)\n AC_SUBST(port_specific_symbol_files)\n-AM_CONDITIONAL(GLIBCXX_BUILD_VERSIONED_SHLIB, test $enable_symvers != no)\n+GLIBCXX_CONDITIONAL(GLIBCXX_BUILD_VERSIONED_SHLIB, test $enable_symvers != no)\n AC_MSG_NOTICE(versioning on shared library symbols is $enable_symvers)\n ])\n "}, {"sha": "e6870fdced79647485acef1850bb23f55d0751f0", "filename": "libstdc++-v3/aclocal.m4", "status": "modified", "additions": 104, "deletions": 55, "changes": 159, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92eabea208c3d09e0234cd32db064d6e1d5fac7b/libstdc%2B%2B-v3%2Faclocal.m4", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92eabea208c3d09e0234cd32db064d6e1d5fac7b/libstdc%2B%2B-v3%2Faclocal.m4", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Faclocal.m4?ref=92eabea208c3d09e0234cd32db064d6e1d5fac7b", "patch": "@@ -12,6 +12,23 @@\n # PARTICULAR PURPOSE.\n \n \n+dnl\n+dnl GLIBCXX_CONDITIONAL (NAME, SHELL-TEST)\n+dnl\n+dnl Exactly like AM_CONDITIONAL, but delays evaluation of the test until the\n+dnl end of configure.  This lets tested variables be reassigned, and the\n+dnl conditional will depend on the final state of the variable.  For a simple\n+dnl example of why this is needed, see GLIBCXX_ENABLE_HOSTED.\n+dnl\n+m4_define([_m4_divert(glibcxx_diversion)], 8000)dnl\n+AC_DEFUN(GLIBCXX_CONDITIONAL, [dnl\n+  m4_divert_text([glibcxx_diversion],dnl\n+   AM_CONDITIONAL([$1],[$2])\n+  )dnl\n+])dnl\n+AC_DEFUN(GLIBCXX_EVALUATE_CONDITIONALS, [m4_undivert([glibcxx_diversion])])dnl\n+\n+\n dnl\n dnl Check to see what architecture and operating system we are compiling\n dnl for.  Also, if architecture- or OS-specific flags are required for\n@@ -156,7 +173,10 @@ AC_DEFUN(GLIBCXX_CONFIGURE, [\n \n   AM_MAINTAINER_MODE\n \n-  # Set up safe default values for all subsequent AM_CONDITIONAL tests.\n+  # Set up safe default values for all subsequent AM_CONDITIONAL tests\n+  # which are themselves conditionally expanded.\n+  ## (Right now, this only matters for enable_wchar_t, but nothing prevents\n+  ## other macros from doing the same.  This should be automated.)  -pme\n   need_libmath=no\n   enable_wchar_t=no\n   #enable_libstdcxx_debug=no\n@@ -165,6 +185,7 @@ AC_DEFUN(GLIBCXX_CONFIGURE, [\n   #c_compatibility=no\n   #enable_abi_check=no\n   #enable_symvers=no\n+  #enable_hosted_libstdcxx=yes\n \n   # Find platform-specific directories containing configuration info.\n   # Also possibly modify flags used elsewhere, as needed by the platform.\n@@ -573,7 +594,7 @@ dnl Substs:\n dnl  baseline_dir\n dnl\n AC_DEFUN(GLIBCXX_CONFIGURE_TESTSUITE, [\n-  if $GLIBCXX_IS_NATIVE; then\n+  if $GLIBCXX_IS_NATIVE && test $is_hosted = yes; then\n     # Do checks for memory limit functions.\n     GLIBCXX_CHECK_SETRLIMIT\n \n@@ -586,7 +607,7 @@ AC_DEFUN(GLIBCXX_CONFIGURE_TESTSUITE, [\n   AC_SUBST(baseline_dir)\n \n   # Determine if checking the ABI is desirable.\n-  if test $enable_symvers = no; then\n+  if test $enable_symvers = no || test $is_hosted = no; then\n     enable_abi_check=no\n   else\n     case \"$host\" in\n@@ -597,8 +618,8 @@ AC_DEFUN(GLIBCXX_CONFIGURE_TESTSUITE, [\n     esac\n   fi\n \n-  AM_CONDITIONAL(GLIBCXX_TEST_WCHAR_T, test $enable_wchar_t = yes)\n-  AM_CONDITIONAL(GLIBCXX_TEST_ABI, test $enable_abi_check = yes)\n+  GLIBCXX_CONDITIONAL(GLIBCXX_TEST_WCHAR_T, test $enable_wchar_t = yes)\n+  GLIBCXX_CONDITIONAL(GLIBCXX_TEST_ABI, test $enable_abi_check = yes)\n ])\n \n \n@@ -910,9 +931,9 @@ AC_DEFUN(GLIBCXX_ENABLE_CHEADERS, [\n   C_INCLUDE_DIR='${glibcxx_srcdir}/include/'$enable_cheaders\n \n   AC_SUBST(C_INCLUDE_DIR)\n-  AM_CONDITIONAL(GLIBCXX_C_HEADERS_C, test $enable_cheaders = c)\n-  AM_CONDITIONAL(GLIBCXX_C_HEADERS_C_STD, test $enable_cheaders = c_std)\n-  AM_CONDITIONAL(GLIBCXX_C_HEADERS_COMPATIBILITY, test $c_compatibility = yes)\n+  GLIBCXX_CONDITIONAL(GLIBCXX_C_HEADERS_C, test $enable_cheaders = c)\n+  GLIBCXX_CONDITIONAL(GLIBCXX_C_HEADERS_C_STD, test $enable_cheaders = c_std)\n+  GLIBCXX_CONDITIONAL(GLIBCXX_C_HEADERS_COMPATIBILITY, test $c_compatibility = yes)\n ])\n \n \n@@ -1226,7 +1247,7 @@ AC_DEFUN(GLIBCXX_ENABLE_DEBUG, [\n   AC_MSG_CHECKING([for additional debug build])\n   GLIBCXX_ENABLE(libstdcxx-debug,$1,,[build extra debug library])\n   AC_MSG_RESULT($enable_libstdcxx_debug)\n-  AM_CONDITIONAL(GLIBCXX_BUILD_DEBUG, test $enable_libstdcxx_debug = yes)\n+  GLIBCXX_CONDITIONAL(GLIBCXX_BUILD_DEBUG, test $enable_libstdcxx_debug = yes)\n ])\n \n \n@@ -1259,6 +1280,34 @@ AC_DEFUN(GLIBCXX_ENABLE_DEBUG_FLAGS, [\n ])\n \n \n+dnl\n+dnl Check if the user only wants a freestanding library implementation.\n+dnl\n+dnl --disable-hosted-libstdcxx will turn off most of the library build,\n+dnl installing only the headers required by [17.4.1.3] and the language\n+dnl support library.  More than that will be built (to keep the Makefiles\n+dnl conveniently clean), but not installed.\n+dnl\n+dnl Sets:\n+dnl  is_hosted  (yes/no)\n+dnl\n+AC_DEFUN(GLIBCXX_ENABLE_HOSTED, [\n+  AC_ARG_ENABLE([hosted-libstdcxx],\n+    AC_HELP_STRING([--disable-hosted-libstdcxx],\n+                   [only build freestanding C++ runtime support]),,\n+    [enable_hosted_libstdcxx=yes])\n+  if test \"$enable_hosted_libstdcxx\" = no; then\n+    AC_MSG_NOTICE([Only freestanding libraries will be built])\n+    is_hosted=no\n+    enable_abi_check=no\n+    enable_libstdcxx_pch=no\n+  else\n+    is_hosted=yes\n+  fi\n+  GLIBCXX_CONDITIONAL(GLIBCXX_HOSTED, test $is_hosted = yes)\n+])\n+\n+\n dnl\n dnl Check for libunwind exception handling support.  If enabled, then\n dnl we assume that the _Unwind_* functions that make up the Unwind ABI\n@@ -1364,7 +1413,7 @@ AC_DEFUN(GLIBCXX_ENABLE_PCH, [\n     enable_libstdcxx_pch=$glibcxx_cv_prog_CXX_pch\n   fi\n \n-  AM_CONDITIONAL(GLIBCXX_BUILD_PCH, test $enable_libstdcxx_pch = yes)\n+  GLIBCXX_CONDITIONAL(GLIBCXX_BUILD_PCH, test $enable_libstdcxx_pch = yes)\n   if test $enable_libstdcxx_pch = yes; then\n     glibcxx_PCHFLAGS=\"-include bits/stdc++.h\"\n   else\n@@ -1536,7 +1585,7 @@ esac\n \n AC_SUBST(SYMVER_MAP)\n AC_SUBST(port_specific_symbol_files)\n-AM_CONDITIONAL(GLIBCXX_BUILD_VERSIONED_SHLIB, test $enable_symvers != no)\n+GLIBCXX_CONDITIONAL(GLIBCXX_BUILD_VERSIONED_SHLIB, test $enable_symvers != no)\n AC_MSG_NOTICE(versioning on shared library symbols is $enable_symvers)\n ])\n \n@@ -1608,6 +1657,50 @@ AC_DEFUN([AC_PROG_LD])\n \n dnl vim:et:ts=2:sw=2\n \n+# AM_CONDITIONAL                                              -*- Autoconf -*-\n+\n+# Copyright 1997, 2000, 2001 Free Software Foundation, Inc.\n+\n+# This program is free software; you can redistribute it and/or modify\n+# it under the terms of the GNU General Public License as published by\n+# the Free Software Foundation; either version 2, or (at your option)\n+# any later version.\n+\n+# This program is distributed in the hope that it will be useful,\n+# but WITHOUT ANY WARRANTY; without even the implied warranty of\n+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+# GNU General Public License for more details.\n+\n+# You should have received a copy of the GNU General Public License\n+# along with this program; if not, write to the Free Software\n+# Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA\n+# 02111-1307, USA.\n+\n+# serial 5\n+\n+AC_PREREQ(2.52)\n+\n+# AM_CONDITIONAL(NAME, SHELL-CONDITION)\n+# -------------------------------------\n+# Define a conditional.\n+AC_DEFUN([AM_CONDITIONAL],\n+[ifelse([$1], [TRUE],  [AC_FATAL([$0: invalid condition: $1])],\n+        [$1], [FALSE], [AC_FATAL([$0: invalid condition: $1])])dnl\n+AC_SUBST([$1_TRUE])\n+AC_SUBST([$1_FALSE])\n+if $2; then\n+  $1_TRUE=\n+  $1_FALSE='#'\n+else\n+  $1_TRUE='#'\n+  $1_FALSE=\n+fi\n+AC_CONFIG_COMMANDS_PRE(\n+[if test -z \"${$1_TRUE}\" && test -z \"${$1_FALSE}\"; then\n+  AC_MSG_ERROR([conditional \"$1\" was never defined.\n+Usually this means the macro was only invoked conditionally.])\n+fi])])\n+\n # Copyright 1998, 1999, 2000, 2001 Free Software Foundation, Inc.\n \n # This program is free software; you can redistribute it and/or modify\n@@ -1742,50 +1835,6 @@ AC_DEFUN([AM_MAINTAINER_MODE],\n \n AU_DEFUN([jm_MAINTAINER_MODE], [AM_MAINTAINER_MODE])\n \n-# AM_CONDITIONAL                                              -*- Autoconf -*-\n-\n-# Copyright 1997, 2000, 2001 Free Software Foundation, Inc.\n-\n-# This program is free software; you can redistribute it and/or modify\n-# it under the terms of the GNU General Public License as published by\n-# the Free Software Foundation; either version 2, or (at your option)\n-# any later version.\n-\n-# This program is distributed in the hope that it will be useful,\n-# but WITHOUT ANY WARRANTY; without even the implied warranty of\n-# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n-# GNU General Public License for more details.\n-\n-# You should have received a copy of the GNU General Public License\n-# along with this program; if not, write to the Free Software\n-# Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA\n-# 02111-1307, USA.\n-\n-# serial 5\n-\n-AC_PREREQ(2.52)\n-\n-# AM_CONDITIONAL(NAME, SHELL-CONDITION)\n-# -------------------------------------\n-# Define a conditional.\n-AC_DEFUN([AM_CONDITIONAL],\n-[ifelse([$1], [TRUE],  [AC_FATAL([$0: invalid condition: $1])],\n-        [$1], [FALSE], [AC_FATAL([$0: invalid condition: $1])])dnl\n-AC_SUBST([$1_TRUE])\n-AC_SUBST([$1_FALSE])\n-if $2; then\n-  $1_TRUE=\n-  $1_FALSE='#'\n-else\n-  $1_TRUE='#'\n-  $1_FALSE=\n-fi\n-AC_CONFIG_COMMANDS_PRE(\n-[if test -z \"${$1_TRUE}\" && test -z \"${$1_FALSE}\"; then\n-  AC_MSG_ERROR([conditional \"$1\" was never defined.\n-Usually this means the macro was only invoked conditionally.])\n-fi])])\n-\n # Do all the work for Automake.                            -*- Autoconf -*-\n \n # This macro actually does too much some checks are only needed if"}, {"sha": "9a7b9c483765b2cc5a28099988c871d3f4621106", "filename": "libstdc++-v3/configure", "status": "modified", "additions": 143, "deletions": 77, "changes": 220, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92eabea208c3d09e0234cd32db064d6e1d5fac7b/libstdc%2B%2B-v3%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92eabea208c3d09e0234cd32db064d6e1d5fac7b/libstdc%2B%2B-v3%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfigure?ref=92eabea208c3d09e0234cd32db064d6e1d5fac7b", "patch": "@@ -308,7 +308,7 @@ ac_includes_default=\"\\\n # include <unistd.h>\n #endif\"\n \n-ac_subst_vars='SHELL PATH_SEPARATOR PACKAGE_NAME PACKAGE_TARNAME PACKAGE_VERSION PACKAGE_STRING PACKAGE_BUGREPORT exec_prefix prefix program_transform_name bindir sbindir libexecdir datadir sysconfdir sharedstatedir localstatedir libdir includedir oldincludedir infodir mandir build_alias host_alias target_alias DEFS ECHO_C ECHO_N ECHO_T LIBS libtool_VERSION multi_basedir build build_cpu build_vendor build_os host host_cpu host_vendor host_os target target_cpu target_vendor target_os INSTALL_PROGRAM INSTALL_SCRIPT INSTALL_DATA CYGPATH_W PACKAGE VERSION ACLOCAL AUTOCONF AUTOMAKE AUTOHEADER MAKEINFO AMTAR install_sh STRIP ac_ct_STRIP INSTALL_STRIP_PROGRAM AWK SET_MAKE am__leading_dot glibcxx_builddir glibcxx_srcdir toplevel_srcdir CC ac_ct_CC EXEEXT OBJEXT CXX ac_ct_CXX CFLAGS CXXFLAGS LN_S AS ac_ct_AS AR ac_ct_AR RANLIB ac_ct_RANLIB MAINTAINER_MODE_TRUE MAINTAINER_MODE_FALSE MAINT LIBTOOL CXXCPP CPPFLAGS enable_shared enable_static LIBUNWIND_FLAG GLIBCXX_BUILD_PCH_TRUE GLIBCXX_BUILD_PCH_FALSE glibcxx_PCHFLAGS CSTDIO_H FPOS_H BASIC_FILE_H BASIC_FILE_CC CPP EGREP check_msgfmt glibcxx_MOFILES glibcxx_POFILES glibcxx_localedir USE_NLS CLOCALE_H CCODECVT_H CMESSAGES_H CCODECVT_CC CCOLLATE_CC CCTYPE_CC CMESSAGES_CC CMONEY_CC CNUMERIC_CC CTIME_H CTIME_CC CLOCALE_CC CLOCALE_INTERNAL_H C_INCLUDE_DIR GLIBCXX_C_HEADERS_C_TRUE GLIBCXX_C_HEADERS_C_FALSE GLIBCXX_C_HEADERS_C_STD_TRUE GLIBCXX_C_HEADERS_C_STD_FALSE GLIBCXX_C_HEADERS_COMPATIBILITY_TRUE GLIBCXX_C_HEADERS_COMPATIBILITY_FALSE glibcxx_thread_h DEBUG_FLAGS GLIBCXX_BUILD_DEBUG_TRUE GLIBCXX_BUILD_DEBUG_FALSE EXTRA_CXX_FLAGS WERROR SECTION_FLAGS SECTION_LDFLAGS OPT_LDFLAGS LIBMATHOBJS SYMVER_MAP port_specific_symbol_files GLIBCXX_BUILD_VERSIONED_SHLIB_TRUE GLIBCXX_BUILD_VERSIONED_SHLIB_FALSE baseline_dir GLIBCXX_TEST_WCHAR_T_TRUE GLIBCXX_TEST_WCHAR_T_FALSE GLIBCXX_TEST_ABI_TRUE GLIBCXX_TEST_ABI_FALSE ATOMICITY_INC_SRCDIR FPOS_INC_SRCDIR OS_INC_SRCDIR glibcxx_prefixdir gxx_include_dir glibcxx_toolexecdir glibcxx_toolexeclibdir GLIBCXX_INCLUDES TOPLEVEL_INCLUDES OPTIMIZE_CXXFLAGS WARN_FLAGS LIBSUPCXX_PICFLAGS LIBOBJS LTLIBOBJS'\n+ac_subst_vars='SHELL PATH_SEPARATOR PACKAGE_NAME PACKAGE_TARNAME PACKAGE_VERSION PACKAGE_STRING PACKAGE_BUGREPORT exec_prefix prefix program_transform_name bindir sbindir libexecdir datadir sysconfdir sharedstatedir localstatedir libdir includedir oldincludedir infodir mandir build_alias host_alias target_alias DEFS ECHO_C ECHO_N ECHO_T LIBS libtool_VERSION multi_basedir build build_cpu build_vendor build_os host host_cpu host_vendor host_os target target_cpu target_vendor target_os INSTALL_PROGRAM INSTALL_SCRIPT INSTALL_DATA CYGPATH_W PACKAGE VERSION ACLOCAL AUTOCONF AUTOMAKE AUTOHEADER MAKEINFO AMTAR install_sh STRIP ac_ct_STRIP INSTALL_STRIP_PROGRAM AWK SET_MAKE am__leading_dot glibcxx_builddir glibcxx_srcdir toplevel_srcdir CC ac_ct_CC EXEEXT OBJEXT CXX ac_ct_CXX CFLAGS CXXFLAGS LN_S AS ac_ct_AS AR ac_ct_AR RANLIB ac_ct_RANLIB MAINTAINER_MODE_TRUE MAINTAINER_MODE_FALSE MAINT LIBTOOL CXXCPP CPPFLAGS enable_shared enable_static GLIBCXX_HOSTED_TRUE GLIBCXX_HOSTED_FALSE LIBUNWIND_FLAG GLIBCXX_BUILD_PCH_TRUE GLIBCXX_BUILD_PCH_FALSE glibcxx_PCHFLAGS CSTDIO_H FPOS_H BASIC_FILE_H BASIC_FILE_CC CPP EGREP check_msgfmt glibcxx_MOFILES glibcxx_POFILES glibcxx_localedir USE_NLS CLOCALE_H CCODECVT_H CMESSAGES_H CCODECVT_CC CCOLLATE_CC CCTYPE_CC CMESSAGES_CC CMONEY_CC CNUMERIC_CC CTIME_H CTIME_CC CLOCALE_CC CLOCALE_INTERNAL_H C_INCLUDE_DIR GLIBCXX_C_HEADERS_C_TRUE GLIBCXX_C_HEADERS_C_FALSE GLIBCXX_C_HEADERS_C_STD_TRUE GLIBCXX_C_HEADERS_C_STD_FALSE GLIBCXX_C_HEADERS_COMPATIBILITY_TRUE GLIBCXX_C_HEADERS_COMPATIBILITY_FALSE glibcxx_thread_h DEBUG_FLAGS GLIBCXX_BUILD_DEBUG_TRUE GLIBCXX_BUILD_DEBUG_FALSE EXTRA_CXX_FLAGS WERROR SECTION_FLAGS SECTION_LDFLAGS OPT_LDFLAGS LIBMATHOBJS SYMVER_MAP port_specific_symbol_files GLIBCXX_BUILD_VERSIONED_SHLIB_TRUE GLIBCXX_BUILD_VERSIONED_SHLIB_FALSE baseline_dir GLIBCXX_TEST_WCHAR_T_TRUE GLIBCXX_TEST_WCHAR_T_FALSE GLIBCXX_TEST_ABI_TRUE GLIBCXX_TEST_ABI_FALSE ATOMICITY_INC_SRCDIR FPOS_INC_SRCDIR OS_INC_SRCDIR glibcxx_prefixdir gxx_include_dir glibcxx_toolexecdir glibcxx_toolexeclibdir GLIBCXX_INCLUDES TOPLEVEL_INCLUDES OPTIMIZE_CXXFLAGS WARN_FLAGS LIBSUPCXX_PICFLAGS LIBOBJS LTLIBOBJS'\n ac_subst_files=''\n \n # Initialize some variables set by options.\n@@ -850,14 +850,16 @@ Optional Features:\n   --enable-static=PKGS  build static libraries default=yes\n   --enable-fast-install=PKGS  optimize for fast installation default=yes\n   --disable-libtool-lock  avoid locking (might break parallel builds)\n+  --disable-hosted-libstdcxx\n+                          only build freestanding C++ runtime support\n   --enable-sjlj-exceptions\n                           force use of builtin_setjmp for exceptions\n                           [default=auto]\n   --enable-libunwind-exceptions\n                           force use of libunwind for exceptions\n                           [default=no]\n   --enable-libstdcxx-pch  build pre-compiled libstdc++ headers\n-                          [default=yes]\n+                          [default=$is_hosted]\n   --enable-cstdio=PACKAGE use target-specific I/O package\n                           [default=stdio]\n   --enable-clocale[=MODEL]\n@@ -3536,7 +3538,10 @@ fi\n \n \n \n-  # Set up safe default values for all subsequent AM_CONDITIONAL tests.\n+  # Set up safe default values for all subsequent AM_CONDITIONAL tests\n+  # which are themselves conditionally expanded.\n+  ## (Right now, this only matters for enable_wchar_t, but nothing prevents\n+  ## other macros from doing the same.  This should be automated.)  -pme\n   need_libmath=no\n   enable_wchar_t=no\n   #enable_libstdcxx_debug=no\n@@ -3545,6 +3550,7 @@ fi\n   #c_compatibility=no\n   #enable_abi_check=no\n   #enable_symvers=no\n+  #enable_hosted_libstdcxx=yes\n \n   # Find platform-specific directories containing configuration info.\n   # Also possibly modify flags used elsewhere, as needed by the platform.\n@@ -4287,7 +4293,7 @@ test x\"$pic_mode\" = xno && libtool_flags=\"$libtool_flags --prefer-non-pic\"\n case $host in\n *-*-irix6*)\n   # Find out which ABI we are using.\n-  echo '#line 4290 \"configure\"' > conftest.$ac_ext\n+  echo '#line 4296 \"configure\"' > conftest.$ac_ext\n   if { (eval echo \"$as_me:$LINENO: \\\"$ac_compile\\\"\") >&5\n   (eval $ac_compile) 2>&5\n   ac_status=$?\n@@ -4821,6 +4827,29 @@ exec 5>>./config.log\n \n #AC_MSG_NOTICE([====== Finished libtool configuration]) ; sleep 10\n \n+# Possibly disable most of the library.\n+## XXX Consider skipping unncessary tests altogether in this case, rather\n+## than just ignoring the results.  Faster /and/ more correct, win win.\n+\n+  # Check whether --enable-hosted-libstdcxx or --disable-hosted-libstdcxx was given.\n+if test \"${enable_hosted_libstdcxx+set}\" = set; then\n+  enableval=\"$enable_hosted_libstdcxx\"\n+\n+else\n+  enable_hosted_libstdcxx=yes\n+fi;\n+  if test \"$enable_hosted_libstdcxx\" = no; then\n+    { echo \"$as_me:$LINENO: Only freestanding libraries will be built\" >&5\n+echo \"$as_me: Only freestanding libraries will be built\" >&6;}\n+    is_hosted=no\n+    enable_abi_check=no\n+    enable_libstdcxx_pch=no\n+  else\n+    is_hosted=yes\n+  fi\n+\n+\n+\n # Check for support bits and g++ features that don't require linking.\n \n   echo \"$as_me:$LINENO: checking for exception model to use\" >&5\n@@ -4856,7 +4885,7 @@ fi;\n     #\n     # Fake what AC_TRY_COMPILE does.  XXX Look at redoing this new-style.\n     cat > conftest.$ac_ext << EOF\n-#line 4859 \"configure\"\n+#line 4888 \"configure\"\n struct S { ~S(); };\n void bar();\n void foo()\n@@ -4953,7 +4982,7 @@ echo \"$as_me: error: Argument to enable/disable libstdcxx-pch must be yes or no\"\n       esac\n \n else\n-  enable_libstdcxx_pch=yes\n+  enable_libstdcxx_pch=$is_hosted\n fi;\n \n   echo \"$as_me:$LINENO: result: $enable_libstdcxx_pch\" >&5\n@@ -5002,15 +5031,6 @@ echo \"${ECHO_T}$glibcxx_cv_prog_CXX_pch\" >&6\n   fi\n \n \n-\n-if test $enable_libstdcxx_pch = yes; then\n-  GLIBCXX_BUILD_PCH_TRUE=\n-  GLIBCXX_BUILD_PCH_FALSE='#'\n-else\n-  GLIBCXX_BUILD_PCH_TRUE='#'\n-  GLIBCXX_BUILD_PCH_FALSE=\n-fi\n-\n   if test $enable_libstdcxx_pch = yes; then\n     glibcxx_PCHFLAGS=\"-include bits/stdc++.h\"\n   else\n@@ -6088,33 +6108,6 @@ echo \"$as_me: \\\"C\\\" header strategy set to $enable_cheaders\" >&6;}\n \n \n \n-if test $enable_cheaders = c; then\n-  GLIBCXX_C_HEADERS_C_TRUE=\n-  GLIBCXX_C_HEADERS_C_FALSE='#'\n-else\n-  GLIBCXX_C_HEADERS_C_TRUE='#'\n-  GLIBCXX_C_HEADERS_C_FALSE=\n-fi\n-\n-\n-\n-if test $enable_cheaders = c_std; then\n-  GLIBCXX_C_HEADERS_C_STD_TRUE=\n-  GLIBCXX_C_HEADERS_C_STD_FALSE='#'\n-else\n-  GLIBCXX_C_HEADERS_C_STD_TRUE='#'\n-  GLIBCXX_C_HEADERS_C_STD_FALSE=\n-fi\n-\n-\n-\n-if test $c_compatibility = yes; then\n-  GLIBCXX_C_HEADERS_COMPATIBILITY_TRUE=\n-  GLIBCXX_C_HEADERS_COMPATIBILITY_FALSE='#'\n-else\n-  GLIBCXX_C_HEADERS_COMPATIBILITY_TRUE='#'\n-  GLIBCXX_C_HEADERS_COMPATIBILITY_FALSE=\n-fi\n \n \n    # Check whether --enable-c-mbchar or --disable-c-mbchar was given.\n@@ -7427,15 +7420,6 @@ fi;\n echo \"${ECHO_T}$enable_libstdcxx_debug\" >&6\n \n \n-if test $enable_libstdcxx_debug = yes; then\n-  GLIBCXX_BUILD_DEBUG_TRUE=\n-  GLIBCXX_BUILD_DEBUG_FALSE='#'\n-else\n-  GLIBCXX_BUILD_DEBUG_TRUE='#'\n-  GLIBCXX_BUILD_DEBUG_FALSE=\n-fi\n-\n-\n   echo \"$as_me:$LINENO: checking for extra compiler flags for building\" >&5\n echo $ECHO_N \"checking for extra compiler flags for building... $ECHO_C\" >&6\n    # Check whether --enable-cxx-flags or --disable-cxx-flags was given.\n@@ -56984,22 +56968,13 @@ esac\n \n \n \n-\n-if test $enable_symvers != no; then\n-  GLIBCXX_BUILD_VERSIONED_SHLIB_TRUE=\n-  GLIBCXX_BUILD_VERSIONED_SHLIB_FALSE='#'\n-else\n-  GLIBCXX_BUILD_VERSIONED_SHLIB_TRUE='#'\n-  GLIBCXX_BUILD_VERSIONED_SHLIB_FALSE=\n-fi\n-\n { echo \"$as_me:$LINENO: versioning on shared library symbols is $enable_symvers\" >&5\n echo \"$as_me: versioning on shared library symbols is $enable_symvers\" >&6;}\n \n \n # This depends on GLIBCXX_ENABLE_SYMVERS and GLIBCXX_IS_NATIVE.\n \n-  if $GLIBCXX_IS_NATIVE; then\n+  if $GLIBCXX_IS_NATIVE && test $is_hosted = yes; then\n     # Do checks for memory limit functions.\n \n   setrlimit_have_headers=yes\n@@ -57562,7 +57537,7 @@ done\n \n \n   # Determine if checking the ABI is desirable.\n-  if test $enable_symvers = no; then\n+  if test $enable_symvers = no || test $is_hosted = no; then\n     enable_abi_check=no\n   else\n     case \"$host\" in\n@@ -57575,6 +57550,102 @@ done\n \n \n \n+\n+\n+# Propagate the target-specific source directories through the build chain.\n+# (Nothing currently uses cpu_include_dir directly; only atomicity_include_dir\n+# uses it, and it only gets used in this file.)\n+ATOMICITY_INC_SRCDIR=config/${atomicity_include_dir}\n+OS_INC_SRCDIR=config/${os_include_dir}\n+FPOS_INC_SRCDIR=config/${fpos_include_dir}\n+\n+\n+\n+\n+# Determine cross-compile flags and AM_CONDITIONALs.\n+#AC_SUBST(GLIBCXX_IS_NATIVE)\n+#AM_CONDITIONAL(CANADIAN, test $CANADIAN = yes)\n+# from GLIBCXX_CHECK_COMPLEX_MATH_SUPPORT:\n+#AM_CONDITIONAL(GLIBCXX_BUILD_LIBMATH,  test $need_libmath = yes)\n+\n+\n+if test $is_hosted = yes; then\n+  GLIBCXX_HOSTED_TRUE=\n+  GLIBCXX_HOSTED_FALSE='#'\n+else\n+  GLIBCXX_HOSTED_TRUE='#'\n+  GLIBCXX_HOSTED_FALSE=\n+fi\n+\n+\n+\n+\n+if test $enable_libstdcxx_pch = yes; then\n+  GLIBCXX_BUILD_PCH_TRUE=\n+  GLIBCXX_BUILD_PCH_FALSE='#'\n+else\n+  GLIBCXX_BUILD_PCH_TRUE='#'\n+  GLIBCXX_BUILD_PCH_FALSE=\n+fi\n+\n+\n+\n+\n+if test $enable_cheaders = c; then\n+  GLIBCXX_C_HEADERS_C_TRUE=\n+  GLIBCXX_C_HEADERS_C_FALSE='#'\n+else\n+  GLIBCXX_C_HEADERS_C_TRUE='#'\n+  GLIBCXX_C_HEADERS_C_FALSE=\n+fi\n+\n+\n+\n+\n+if test $enable_cheaders = c_std; then\n+  GLIBCXX_C_HEADERS_C_STD_TRUE=\n+  GLIBCXX_C_HEADERS_C_STD_FALSE='#'\n+else\n+  GLIBCXX_C_HEADERS_C_STD_TRUE='#'\n+  GLIBCXX_C_HEADERS_C_STD_FALSE=\n+fi\n+\n+\n+\n+\n+if test $c_compatibility = yes; then\n+  GLIBCXX_C_HEADERS_COMPATIBILITY_TRUE=\n+  GLIBCXX_C_HEADERS_COMPATIBILITY_FALSE='#'\n+else\n+  GLIBCXX_C_HEADERS_COMPATIBILITY_TRUE='#'\n+  GLIBCXX_C_HEADERS_COMPATIBILITY_FALSE=\n+fi\n+\n+\n+\n+\n+if test $enable_libstdcxx_debug = yes; then\n+  GLIBCXX_BUILD_DEBUG_TRUE=\n+  GLIBCXX_BUILD_DEBUG_FALSE='#'\n+else\n+  GLIBCXX_BUILD_DEBUG_TRUE='#'\n+  GLIBCXX_BUILD_DEBUG_FALSE=\n+fi\n+\n+\n+\n+\n+if test $enable_symvers != no; then\n+  GLIBCXX_BUILD_VERSIONED_SHLIB_TRUE=\n+  GLIBCXX_BUILD_VERSIONED_SHLIB_FALSE='#'\n+else\n+  GLIBCXX_BUILD_VERSIONED_SHLIB_TRUE='#'\n+  GLIBCXX_BUILD_VERSIONED_SHLIB_FALSE=\n+fi\n+\n+\n+\n+\n if test $enable_wchar_t = yes; then\n   GLIBCXX_TEST_WCHAR_T_TRUE=\n   GLIBCXX_TEST_WCHAR_T_FALSE='#'\n@@ -57585,6 +57656,7 @@ fi\n \n \n \n+\n if test $enable_abi_check = yes; then\n   GLIBCXX_TEST_ABI_TRUE=\n   GLIBCXX_TEST_ABI_FALSE='#'\n@@ -57595,21 +57667,6 @@ fi\n \n \n \n-# Propagate the target-specific source directories through the build chain.\n-# (Nothing currently uses cpu_include_dir directly; only atomicity_include_dir\n-# uses it, and it only gets used in this file.)\n-ATOMICITY_INC_SRCDIR=config/${atomicity_include_dir}\n-OS_INC_SRCDIR=config/${os_include_dir}\n-FPOS_INC_SRCDIR=config/${fpos_include_dir}\n-\n-\n-\n-\n-# Determine cross-compile flags and AM_CONDITIONALs.\n-#AC_SUBST(GLIBCXX_IS_NATIVE)\n-#AM_CONDITIONAL(CANADIAN, test $CANADIAN = yes)\n-# from GLIBCXX_CHECK_COMPLEX_MATH_SUPPORT:\n-#AM_CONDITIONAL(GLIBCXX_BUILD_LIBMATH,  test $need_libmath = yes)\n \n cat >confcache <<\\_ACEOF\n # This file is a shell script that caches the results of configure\n@@ -57911,6 +57968,13 @@ echo \"$as_me: error: conditional \\\"MAINTAINER_MODE\\\" was never defined.\n Usually this means the macro was only invoked conditionally.\" >&2;}\n    { (exit 1); exit 1; }; }\n fi\n+if test -z \"${GLIBCXX_HOSTED_TRUE}\" && test -z \"${GLIBCXX_HOSTED_FALSE}\"; then\n+  { { echo \"$as_me:$LINENO: error: conditional \\\"GLIBCXX_HOSTED\\\" was never defined.\n+Usually this means the macro was only invoked conditionally.\" >&5\n+echo \"$as_me: error: conditional \\\"GLIBCXX_HOSTED\\\" was never defined.\n+Usually this means the macro was only invoked conditionally.\" >&2;}\n+   { (exit 1); exit 1; }; }\n+fi\n if test -z \"${GLIBCXX_BUILD_PCH_TRUE}\" && test -z \"${GLIBCXX_BUILD_PCH_FALSE}\"; then\n   { { echo \"$as_me:$LINENO: error: conditional \\\"GLIBCXX_BUILD_PCH\\\" was never defined.\n Usually this means the macro was only invoked conditionally.\" >&5\n@@ -58581,6 +58645,8 @@ s,@CXXCPP@,$CXXCPP,;t t\n s,@CPPFLAGS@,$CPPFLAGS,;t t\n s,@enable_shared@,$enable_shared,;t t\n s,@enable_static@,$enable_static,;t t\n+s,@GLIBCXX_HOSTED_TRUE@,$GLIBCXX_HOSTED_TRUE,;t t\n+s,@GLIBCXX_HOSTED_FALSE@,$GLIBCXX_HOSTED_FALSE,;t t\n s,@LIBUNWIND_FLAG@,$LIBUNWIND_FLAG,;t t\n s,@GLIBCXX_BUILD_PCH_TRUE@,$GLIBCXX_BUILD_PCH_TRUE,;t t\n s,@GLIBCXX_BUILD_PCH_FALSE@,$GLIBCXX_BUILD_PCH_FALSE,;t t"}, {"sha": "d10d38144e5222d98beb19b5ec2dca2e1b44ffc1", "filename": "libstdc++-v3/configure.ac", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92eabea208c3d09e0234cd32db064d6e1d5fac7b/libstdc%2B%2B-v3%2Fconfigure.ac", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92eabea208c3d09e0234cd32db064d6e1d5fac7b/libstdc%2B%2B-v3%2Fconfigure.ac", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfigure.ac?ref=92eabea208c3d09e0234cd32db064d6e1d5fac7b", "patch": "@@ -70,10 +70,15 @@ AC_SUBST(enable_shared)\n AC_SUBST(enable_static)\n #AC_MSG_NOTICE([====== Finished libtool configuration]) ; sleep 10\n \n+# Possibly disable most of the library.\n+## XXX Consider skipping unncessary tests altogether in this case, rather\n+## than just ignoring the results.  Faster /and/ more correct, win win.\n+GLIBCXX_ENABLE_HOSTED\n+\n # Check for support bits and g++ features that don't require linking.\n GLIBCXX_ENABLE_SJLJ_EXCEPTIONS\n GLIBCXX_ENABLE_LIBUNWIND_EXCEPTIONS\n-GLIBCXX_ENABLE_PCH([yes])\n+GLIBCXX_ENABLE_PCH($is_hosted)\n \n # Enable all the variable C++ runtime options.  \n # NB: C_MBCHAR must come early.\n@@ -266,6 +271,7 @@ AC_SUBST(OS_INC_SRCDIR)\n #AM_CONDITIONAL(CANADIAN, test $CANADIAN = yes)\n # from GLIBCXX_CHECK_COMPLEX_MATH_SUPPORT:\n #AM_CONDITIONAL(GLIBCXX_BUILD_LIBMATH,  test $need_libmath = yes)\n+GLIBCXX_EVALUATE_CONDITIONALS\n  \n AC_CACHE_SAVE\n "}, {"sha": "cc4a5f54f3f860317a265b66d055252bfd4189b4", "filename": "libstdc++-v3/include/Makefile.am", "status": "modified", "additions": 21, "deletions": 1, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92eabea208c3d09e0234cd32db064d6e1d5fac7b/libstdc%2B%2B-v3%2Finclude%2FMakefile.am", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92eabea208c3d09e0234cd32db064d6e1d5fac7b/libstdc%2B%2B-v3%2Finclude%2FMakefile.am", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2FMakefile.am?ref=92eabea208c3d09e0234cd32db064d6e1d5fac7b", "patch": "@@ -510,10 +510,30 @@ ${pch_input}: ${allstamped} ${host_builddir}/c++config.h ${pch_source}\n # `$(mkinstalldirs)' instead of `mkdir -p'.  In particular,\n # host_headers_extra are taken out of the build tree staging area;\n # the rest are taken from the original source tree.\n-gxx_include_dir = @gxx_include_dir@\n \n+if GLIBCXX_HOSTED\n install-data-local: install-headers ${pch_install}\n+else\n+install-data-local: install-freestanding-headers\n+endif\n+\n+# This is a subset of the full install-headers rule.  We only need <cstddef>,\n+# <limits>, <cstdlib>, <cstdarg>, <new>, <typeinfo>, <exception>, and any\n+# files which they include (and which we provide).  The last three headers\n+# are installed by libsupc++, so only the first four and the sub-includes\n+# are copied here.\n+install-freestanding-headers:\n+\t$(mkinstalldirs) $(DESTDIR)${gxx_include_dir}\n+\t$(mkinstalldirs) $(DESTDIR)${gxx_include_dir}/${host_builddir}\n+\tfor file in ${host_srcdir}/os_defines.h ${host_builddir}/c++config.h; do \\\n+\t  $(INSTALL_DATA) $${file} $(DESTDIR)${gxx_include_dir}/${host_builddir}; done\n+\t$(mkinstalldirs) $(DESTDIR)${gxx_include_dir}/${std_builddir}\n+\t$(INSTALL_DATA) ${std_builddir}/limits $(DESTDIR)${gxx_include_dir}/${std_builddir}\n+\t$(mkinstalldirs) $(DESTDIR)${gxx_include_dir}/${c_base_builddir}\n+\tfor file in cstddef cstdlib cstdarg; do \\\n+\t  $(INSTALL_DATA) ${c_base_builddir}/$${file} $(DESTDIR)${gxx_include_dir}/${c_base_builddir}; done\n \n+# The real deal.\n install-headers:\n \t$(mkinstalldirs) $(DESTDIR)${gxx_include_dir}\n \t$(mkinstalldirs) $(DESTDIR)${gxx_include_dir}/${bits_builddir}"}, {"sha": "bb3218960b8c6cb51b80a812248e24d3f20fed29", "filename": "libstdc++-v3/include/Makefile.in", "status": "modified", "additions": 30, "deletions": 10, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92eabea208c3d09e0234cd32db064d6e1d5fac7b/libstdc%2B%2B-v3%2Finclude%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92eabea208c3d09e0234cd32db064d6e1d5fac7b/libstdc%2B%2B-v3%2Finclude%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2FMakefile.in?ref=92eabea208c3d09e0234cd32db064d6e1d5fac7b", "patch": "@@ -94,6 +94,8 @@ GLIBCXX_C_HEADERS_C_FALSE = @GLIBCXX_C_HEADERS_C_FALSE@\n GLIBCXX_C_HEADERS_C_STD_FALSE = @GLIBCXX_C_HEADERS_C_STD_FALSE@\n GLIBCXX_C_HEADERS_C_STD_TRUE = @GLIBCXX_C_HEADERS_C_STD_TRUE@\n GLIBCXX_C_HEADERS_C_TRUE = @GLIBCXX_C_HEADERS_C_TRUE@\n+GLIBCXX_HOSTED_FALSE = @GLIBCXX_HOSTED_FALSE@\n+GLIBCXX_HOSTED_TRUE = @GLIBCXX_HOSTED_TRUE@\n GLIBCXX_INCLUDES = @GLIBCXX_INCLUDES@\n GLIBCXX_TEST_ABI_FALSE = @GLIBCXX_TEST_ABI_FALSE@\n GLIBCXX_TEST_ABI_TRUE = @GLIBCXX_TEST_ABI_TRUE@\n@@ -169,15 +171,6 @@ glibcxx_srcdir = @glibcxx_srcdir@\n glibcxx_thread_h = @glibcxx_thread_h@\n glibcxx_toolexecdir = @glibcxx_toolexecdir@\n glibcxx_toolexeclibdir = @glibcxx_toolexeclibdir@\n-\n-# For robustness sake (in light of junk files or in-source\n-# configuration), copy from the build or source tree to the install\n-# tree using only the human-maintained file lists and directory\n-# components.  Yes, with minor differences, this is sheer duplication\n-# of the staging rules above using $(INSTALL_DATA) instead of LN_S and\n-# `$(mkinstalldirs)' instead of `mkdir -p'.  In particular,\n-# host_headers_extra are taken out of the build tree staging area;\n-# the rest are taken from the original source tree.\n gxx_include_dir = @gxx_include_dir@\n host = @host@\n host_alias = @host_alias@\n@@ -860,8 +853,35 @@ ${pch_input}: ${allstamped} ${host_builddir}/c++config.h ${pch_source}\n \t$(CXX) $(PCHFLAGS) $(AM_CPPFLAGS) ${pch_source} -O0 -g -o ${pch_output_builddir}/O0g; \\\n \t$(CXX) $(PCHFLAGS) $(AM_CPPFLAGS) ${pch_source} -O2 -g -o ${pch_output_builddir}/O2g;\n \n-install-data-local: install-headers ${pch_install}\n+# For robustness sake (in light of junk files or in-source\n+# configuration), copy from the build or source tree to the install\n+# tree using only the human-maintained file lists and directory\n+# components.  Yes, with minor differences, this is sheer duplication\n+# of the staging rules above using $(INSTALL_DATA) instead of LN_S and\n+# `$(mkinstalldirs)' instead of `mkdir -p'.  In particular,\n+# host_headers_extra are taken out of the build tree staging area;\n+# the rest are taken from the original source tree.\n+\n+@GLIBCXX_HOSTED_TRUE@install-data-local: install-headers ${pch_install}\n+@GLIBCXX_HOSTED_FALSE@install-data-local: install-freestanding-headers\n+\n+# This is a subset of the full install-headers rule.  We only need <cstddef>,\n+# <limits>, <cstdlib>, <cstdarg>, <new>, <typeinfo>, <exception>, and any\n+# files which they include (and which we provide).  The last three headers\n+# are installed by libsupc++, so only the first four and the sub-includes\n+# are copied here.\n+install-freestanding-headers:\n+\t$(mkinstalldirs) $(DESTDIR)${gxx_include_dir}\n+\t$(mkinstalldirs) $(DESTDIR)${gxx_include_dir}/${host_builddir}\n+\tfor file in ${host_srcdir}/os_defines.h ${host_builddir}/c++config.h; do \\\n+\t  $(INSTALL_DATA) $${file} $(DESTDIR)${gxx_include_dir}/${host_builddir}; done\n+\t$(mkinstalldirs) $(DESTDIR)${gxx_include_dir}/${std_builddir}\n+\t$(INSTALL_DATA) ${std_builddir}/limits $(DESTDIR)${gxx_include_dir}/${std_builddir}\n+\t$(mkinstalldirs) $(DESTDIR)${gxx_include_dir}/${c_base_builddir}\n+\tfor file in cstddef cstdlib cstdarg; do \\\n+\t  $(INSTALL_DATA) ${c_base_builddir}/$${file} $(DESTDIR)${gxx_include_dir}/${c_base_builddir}; done\n \n+# The real deal.\n install-headers:\n \t$(mkinstalldirs) $(DESTDIR)${gxx_include_dir}\n \t$(mkinstalldirs) $(DESTDIR)${gxx_include_dir}/${bits_builddir}"}, {"sha": "55699003f574401932dcdf92e24ef3ee3f1476bb", "filename": "libstdc++-v3/libmath/Makefile.in", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92eabea208c3d09e0234cd32db064d6e1d5fac7b/libstdc%2B%2B-v3%2Flibmath%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92eabea208c3d09e0234cd32db064d6e1d5fac7b/libstdc%2B%2B-v3%2Flibmath%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Flibmath%2FMakefile.in?ref=92eabea208c3d09e0234cd32db064d6e1d5fac7b", "patch": "@@ -94,6 +94,8 @@ GLIBCXX_C_HEADERS_C_FALSE = @GLIBCXX_C_HEADERS_C_FALSE@\n GLIBCXX_C_HEADERS_C_STD_FALSE = @GLIBCXX_C_HEADERS_C_STD_FALSE@\n GLIBCXX_C_HEADERS_C_STD_TRUE = @GLIBCXX_C_HEADERS_C_STD_TRUE@\n GLIBCXX_C_HEADERS_C_TRUE = @GLIBCXX_C_HEADERS_C_TRUE@\n+GLIBCXX_HOSTED_FALSE = @GLIBCXX_HOSTED_FALSE@\n+GLIBCXX_HOSTED_TRUE = @GLIBCXX_HOSTED_TRUE@\n GLIBCXX_INCLUDES = @GLIBCXX_INCLUDES@\n GLIBCXX_TEST_ABI_FALSE = @GLIBCXX_TEST_ABI_FALSE@\n GLIBCXX_TEST_ABI_TRUE = @GLIBCXX_TEST_ABI_TRUE@"}, {"sha": "4e74717ed63e57691f83916546bb061afc12891a", "filename": "libstdc++-v3/libsupc++/Makefile.in", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92eabea208c3d09e0234cd32db064d6e1d5fac7b/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92eabea208c3d09e0234cd32db064d6e1d5fac7b/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2FMakefile.in?ref=92eabea208c3d09e0234cd32db064d6e1d5fac7b", "patch": "@@ -94,6 +94,8 @@ GLIBCXX_C_HEADERS_C_FALSE = @GLIBCXX_C_HEADERS_C_FALSE@\n GLIBCXX_C_HEADERS_C_STD_FALSE = @GLIBCXX_C_HEADERS_C_STD_FALSE@\n GLIBCXX_C_HEADERS_C_STD_TRUE = @GLIBCXX_C_HEADERS_C_STD_TRUE@\n GLIBCXX_C_HEADERS_C_TRUE = @GLIBCXX_C_HEADERS_C_TRUE@\n+GLIBCXX_HOSTED_FALSE = @GLIBCXX_HOSTED_FALSE@\n+GLIBCXX_HOSTED_TRUE = @GLIBCXX_HOSTED_TRUE@\n GLIBCXX_INCLUDES = @GLIBCXX_INCLUDES@\n GLIBCXX_TEST_ABI_FALSE = @GLIBCXX_TEST_ABI_FALSE@\n GLIBCXX_TEST_ABI_TRUE = @GLIBCXX_TEST_ABI_TRUE@"}, {"sha": "d9b439bac2b08450a8a4c9c6e4c7a53fb3fcd076", "filename": "libstdc++-v3/po/Makefile.in", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92eabea208c3d09e0234cd32db064d6e1d5fac7b/libstdc%2B%2B-v3%2Fpo%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92eabea208c3d09e0234cd32db064d6e1d5fac7b/libstdc%2B%2B-v3%2Fpo%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fpo%2FMakefile.in?ref=92eabea208c3d09e0234cd32db064d6e1d5fac7b", "patch": "@@ -94,6 +94,8 @@ GLIBCXX_C_HEADERS_C_FALSE = @GLIBCXX_C_HEADERS_C_FALSE@\n GLIBCXX_C_HEADERS_C_STD_FALSE = @GLIBCXX_C_HEADERS_C_STD_FALSE@\n GLIBCXX_C_HEADERS_C_STD_TRUE = @GLIBCXX_C_HEADERS_C_STD_TRUE@\n GLIBCXX_C_HEADERS_C_TRUE = @GLIBCXX_C_HEADERS_C_TRUE@\n+GLIBCXX_HOSTED_FALSE = @GLIBCXX_HOSTED_FALSE@\n+GLIBCXX_HOSTED_TRUE = @GLIBCXX_HOSTED_TRUE@\n GLIBCXX_INCLUDES = @GLIBCXX_INCLUDES@\n GLIBCXX_TEST_ABI_FALSE = @GLIBCXX_TEST_ABI_FALSE@\n GLIBCXX_TEST_ABI_TRUE = @GLIBCXX_TEST_ABI_TRUE@"}, {"sha": "a622f551f997f1e3094782636b06acfd9b57b458", "filename": "libstdc++-v3/src/Makefile.in", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92eabea208c3d09e0234cd32db064d6e1d5fac7b/libstdc%2B%2B-v3%2Fsrc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92eabea208c3d09e0234cd32db064d6e1d5fac7b/libstdc%2B%2B-v3%2Fsrc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2FMakefile.in?ref=92eabea208c3d09e0234cd32db064d6e1d5fac7b", "patch": "@@ -95,6 +95,8 @@ GLIBCXX_C_HEADERS_C_FALSE = @GLIBCXX_C_HEADERS_C_FALSE@\n GLIBCXX_C_HEADERS_C_STD_FALSE = @GLIBCXX_C_HEADERS_C_STD_FALSE@\n GLIBCXX_C_HEADERS_C_STD_TRUE = @GLIBCXX_C_HEADERS_C_STD_TRUE@\n GLIBCXX_C_HEADERS_C_TRUE = @GLIBCXX_C_HEADERS_C_TRUE@\n+GLIBCXX_HOSTED_FALSE = @GLIBCXX_HOSTED_FALSE@\n+GLIBCXX_HOSTED_TRUE = @GLIBCXX_HOSTED_TRUE@\n GLIBCXX_INCLUDES = @GLIBCXX_INCLUDES@\n GLIBCXX_TEST_ABI_FALSE = @GLIBCXX_TEST_ABI_FALSE@\n GLIBCXX_TEST_ABI_TRUE = @GLIBCXX_TEST_ABI_TRUE@"}, {"sha": "932aca9c1957981c23281f7243052c8806c47ada", "filename": "libstdc++-v3/testsuite/Makefile.in", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92eabea208c3d09e0234cd32db064d6e1d5fac7b/libstdc%2B%2B-v3%2Ftestsuite%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92eabea208c3d09e0234cd32db064d6e1d5fac7b/libstdc%2B%2B-v3%2Ftestsuite%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2FMakefile.in?ref=92eabea208c3d09e0234cd32db064d6e1d5fac7b", "patch": "@@ -94,6 +94,8 @@ GLIBCXX_C_HEADERS_C_FALSE = @GLIBCXX_C_HEADERS_C_FALSE@\n GLIBCXX_C_HEADERS_C_STD_FALSE = @GLIBCXX_C_HEADERS_C_STD_FALSE@\n GLIBCXX_C_HEADERS_C_STD_TRUE = @GLIBCXX_C_HEADERS_C_STD_TRUE@\n GLIBCXX_C_HEADERS_C_TRUE = @GLIBCXX_C_HEADERS_C_TRUE@\n+GLIBCXX_HOSTED_FALSE = @GLIBCXX_HOSTED_FALSE@\n+GLIBCXX_HOSTED_TRUE = @GLIBCXX_HOSTED_TRUE@\n GLIBCXX_INCLUDES = @GLIBCXX_INCLUDES@\n GLIBCXX_TEST_ABI_FALSE = @GLIBCXX_TEST_ABI_FALSE@\n GLIBCXX_TEST_ABI_TRUE = @GLIBCXX_TEST_ABI_TRUE@"}]}