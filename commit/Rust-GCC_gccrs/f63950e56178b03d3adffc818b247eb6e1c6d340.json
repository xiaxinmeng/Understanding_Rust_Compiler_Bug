{"sha": "f63950e56178b03d3adffc818b247eb6e1c6d340", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjYzOTUwZTU2MTc4YjAzZDNhZGZmYzgxOGIyNDdlYjZlMWM2ZDM0MA==", "commit": {"author": {"name": "Kyrylo Tkachov", "email": "kyrylo.tkachov@arm.com", "date": "2014-12-11T09:43:53Z"}, "committer": {"name": "Kyrylo Tkachov", "email": "ktkachov@gcc.gnu.org", "date": "2014-12-11T09:43:53Z"}, "message": "[testsuite][1/2] Move ${tool}_check_unsupported_p into separate file\n\n\t* lib/target-utils.exp: New file.\n\t* lib/gcc-defs.exp (${tool}_check_unsupported_p): Delete.\n\tInclude target-utils.exp.\n\t* lib/objc.exp: Likewise.\n\t* lib/mike-gcc.exp: Load target-utils.exp.\n\t* lib/mike-g++.exp: Likewise.\n\t* lib/go-torture.exp: Likewise.\n\t* lib/fortran-torture.exp: Likewise.\n\t* lib/c-torture.exp: Likewise.\n\nFrom-SVN: r218620", "tree": {"sha": "e4b10e68010aa74c575a149263e90c4472e35f36", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e4b10e68010aa74c575a149263e90c4472e35f36"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f63950e56178b03d3adffc818b247eb6e1c6d340", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f63950e56178b03d3adffc818b247eb6e1c6d340", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f63950e56178b03d3adffc818b247eb6e1c6d340", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f63950e56178b03d3adffc818b247eb6e1c6d340/comments", "author": {"login": "ktkachov-arm", "id": 74917949, "node_id": "MDQ6VXNlcjc0OTE3OTQ5", "avatar_url": "https://avatars.githubusercontent.com/u/74917949?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ktkachov-arm", "html_url": "https://github.com/ktkachov-arm", "followers_url": "https://api.github.com/users/ktkachov-arm/followers", "following_url": "https://api.github.com/users/ktkachov-arm/following{/other_user}", "gists_url": "https://api.github.com/users/ktkachov-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/ktkachov-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ktkachov-arm/subscriptions", "organizations_url": "https://api.github.com/users/ktkachov-arm/orgs", "repos_url": "https://api.github.com/users/ktkachov-arm/repos", "events_url": "https://api.github.com/users/ktkachov-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/ktkachov-arm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "c9db45aaf49be681ba6e16203ab4b455bfa9746e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c9db45aaf49be681ba6e16203ab4b455bfa9746e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c9db45aaf49be681ba6e16203ab4b455bfa9746e"}], "stats": {"total": 116, "additions": 67, "deletions": 49}, "files": [{"sha": "aab05553f068a2d5ec84249c84c20be3b22810f1", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f63950e56178b03d3adffc818b247eb6e1c6d340/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f63950e56178b03d3adffc818b247eb6e1c6d340/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=f63950e56178b03d3adffc818b247eb6e1c6d340", "patch": "@@ -1,3 +1,15 @@\n+2014-12-11  Kyrylo Tkachov  kyrylo.tkachov@arm.com\n+\n+\t* lib/target-utils.exp: New file.\n+\t* lib/gcc-defs.exp (${tool}_check_unsupported_p): Delete.\n+\tInclude target-utils.exp.\n+\t* lib/objc.exp: Likewise.\n+\t* lib/mike-gcc.exp: Load target-utils.exp.\n+\t* lib/mike-g++.exp: Likewise.\n+\t* lib/go-torture.exp: Likewise.\n+\t* lib/fortran-torture.exp: Likewise.\n+\t* lib/c-torture.exp: Likewise.\n+\n 2014-12-10  Ilya Tocar  <ilya.tocar@intel.com>\n \n \t* gcc.target/i386/funcspec-5.c: Test avx512f and knl."}, {"sha": "3e339620afb3255f6ae783e2631a6493735cce66", "filename": "gcc/testsuite/lib/c-torture.exp", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f63950e56178b03d3adffc818b247eb6e1c6d340/gcc%2Ftestsuite%2Flib%2Fc-torture.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f63950e56178b03d3adffc818b247eb6e1c6d340/gcc%2Ftestsuite%2Flib%2Fc-torture.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Flib%2Fc-torture.exp?ref=f63950e56178b03d3adffc818b247eb6e1c6d340", "patch": "@@ -19,6 +19,7 @@\n load_lib target-supports.exp\n load_lib file-format.exp\n load_lib target-libpath.exp\n+load_lib target-utils.exp\n \n # The default option list can be overridden by\n # TORTURE_OPTIONS=\"{ { list1 } ... { listN } }\""}, {"sha": "cbc3427f6c08b41842c436d50c648480e104adda", "filename": "gcc/testsuite/lib/fortran-torture.exp", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f63950e56178b03d3adffc818b247eb6e1c6d340/gcc%2Ftestsuite%2Flib%2Ffortran-torture.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f63950e56178b03d3adffc818b247eb6e1c6d340/gcc%2Ftestsuite%2Flib%2Ffortran-torture.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Flib%2Ffortran-torture.exp?ref=f63950e56178b03d3adffc818b247eb6e1c6d340", "patch": "@@ -22,6 +22,7 @@\n \n load_lib target-supports.exp\n load_lib fortran-modules.exp\n+load_lib target-utils.exp\n \n # Return the list of options to use for fortran torture tests.\n # The default option list can be overridden by"}, {"sha": "a9c0d615dd26bab86038d584a369da291428b295", "filename": "gcc/testsuite/lib/gcc-defs.exp", "status": "modified", "additions": 2, "deletions": 28, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f63950e56178b03d3adffc818b247eb6e1c6d340/gcc%2Ftestsuite%2Flib%2Fgcc-defs.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f63950e56178b03d3adffc818b247eb6e1c6d340/gcc%2Ftestsuite%2Flib%2Fgcc-defs.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Flib%2Fgcc-defs.exp?ref=f63950e56178b03d3adffc818b247eb6e1c6d340", "patch": "@@ -18,6 +18,8 @@ load_lib target-libpath.exp\n \n load_lib wrapper.exp\n \n+load_lib target-utils.exp\n+\n #\n # ${tool}_check_compile -- Reports and returns pass/fail for a compilation\n #\n@@ -145,34 +147,6 @@ proc ${tool}_exit { } {\n \tunset gluefile\n     }\n }\n-    \n-#\n-# ${tool}_check_unsupported_p -- Check the compiler(/assembler/linker) output \n-#\tfor text indicating that the testcase should be marked as \"unsupported\"\n-#\n-# Utility used by mike-gcc.exp and c-torture.exp.\n-# When dealing with a large number of tests, it's difficult to weed out the\n-# ones that are too big for a particular cpu (eg: 16 bit with a small amount\n-# of memory).  There are various ways to deal with this.  Here's one.\n-# Fortunately, all of the cases where this is likely to happen will be using\n-# gld so we can tell what the error text will look like.\n-#\n-\n-proc ${tool}_check_unsupported_p { output } {\n-    if [regexp \"(^|\\n)\\[^\\n\\]*: region \\[^\\n\\]* is full\" $output] {\n-\treturn \"memory full\"\n-    }\n-    if { [regexp \"(^|\\n)\\[^\\n\\]*: relocation truncated to fit\" $output]\n-          && [check_effective_target_tiny] } {\n-        return \"memory full\"\n-     }\n-\n-    if { [istarget spu-*-*] && \\\n-\t     [string match \"*exceeds local store*\" $output] } {\n-\treturn \"memory full\"\n-    }\n-    return \"\"\n-}\n \n #\n # runtest_file_p -- Provide a definition for older dejagnu releases"}, {"sha": "fc2f5596b72311d42008638b222a5d58ddaa8e6a", "filename": "gcc/testsuite/lib/go-torture.exp", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f63950e56178b03d3adffc818b247eb6e1c6d340/gcc%2Ftestsuite%2Flib%2Fgo-torture.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f63950e56178b03d3adffc818b247eb6e1c6d340/gcc%2Ftestsuite%2Flib%2Fgo-torture.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Flib%2Fgo-torture.exp?ref=f63950e56178b03d3adffc818b247eb6e1c6d340", "patch": "@@ -22,6 +22,8 @@\n \n load_lib target-supports.exp\n \n+load_lib target-utils.exp\n+\n # The default option list can be overridden by\n # TORTURE_OPTIONS=\"{ { list1 } ... { listN } }\"\n "}, {"sha": "e60dff8e389fd072c954c04afe0d60adccee178f", "filename": "gcc/testsuite/lib/mike-g++.exp", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f63950e56178b03d3adffc818b247eb6e1c6d340/gcc%2Ftestsuite%2Flib%2Fmike-g%2B%2B.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f63950e56178b03d3adffc818b247eb6e1c6d340/gcc%2Ftestsuite%2Flib%2Fmike-g%2B%2B.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Flib%2Fmike-g%2B%2B.exp?ref=f63950e56178b03d3adffc818b247eb6e1c6d340", "patch": "@@ -16,6 +16,8 @@\n \n # This file was written by Mike Stump <mrs@cygnus.com>\n \n+load_lib target-utils.exp\n+\n #\n # mike_cleanup -- remove any files that are created by the testcase\n #"}, {"sha": "b2705e6e1793fe39f27753ec36b78f22caef9ae7", "filename": "gcc/testsuite/lib/mike-gcc.exp", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f63950e56178b03d3adffc818b247eb6e1c6d340/gcc%2Ftestsuite%2Flib%2Fmike-gcc.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f63950e56178b03d3adffc818b247eb6e1c6d340/gcc%2Ftestsuite%2Flib%2Fmike-gcc.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Flib%2Fmike-gcc.exp?ref=f63950e56178b03d3adffc818b247eb6e1c6d340", "patch": "@@ -16,6 +16,8 @@\n \n # This file was derived from mike-g++.exp written by Mike Stump <mrs@cygnus.com>\n \n+load_lib target-utils.exp\n+\n #\n # mike_cleanup -- remove any files that are created by the testcase\n #"}, {"sha": "976ef8793ce5ef8757c73b3690003037bc60be3a", "filename": "gcc/testsuite/lib/objc.exp", "status": "modified", "additions": 1, "deletions": 21, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f63950e56178b03d3adffc818b247eb6e1c6d340/gcc%2Ftestsuite%2Flib%2Fobjc.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f63950e56178b03d3adffc818b247eb6e1c6d340/gcc%2Ftestsuite%2Flib%2Fobjc.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Flib%2Fobjc.exp?ref=f63950e56178b03d3adffc818b247eb6e1c6d340", "patch": "@@ -29,6 +29,7 @@ load_lib prune.exp\n load_lib gcc-defs.exp\n load_lib timeout.exp\n load_lib target-libpath.exp\n+load_lib target-utils.exp\n \n #\n # OBJC_UNDER_TEST is the compiler under test.\n@@ -343,27 +344,6 @@ if { [info procs prune_warnings] == \"\" } then {\n     }\n }\n \n-# Utility used by mike-gcc.exp and c-torture.exp.\n-# Check the compiler(/assembler/linker) output for text indicating that\n-# the testcase should be marked as \"unsupported\".\n-#\n-# When dealing with a large number of tests, it's difficult to weed out the\n-# ones that are too big for a particular cpu (eg: 16 bit with a small amount\n-# of memory).  There are various ways to deal with this.  Here's one.\n-# Fortunately, all of the cases where this is likely to happen will be using\n-# gld so we can tell what the error text will look like.\n-\n-proc ${tool}_check_unsupported_p { output } {\n-    if [regexp \"(^|\\n)\\[^\\n\\]*: region \\[^\\n\\]* is full\" $output] {\n-\treturn \"memory full\"\n-    }\n-    if { [regexp \"(^|\\n)\\[^\\n\\]*: relocation truncated to fit\" $output]\n-          && [check_effective_target_tiny] } {\n-        return \"memory full\"\n-    }\n-    return \"\"\n-}\n-\n # Prune messages from objc that aren't useful.\n \n proc prune_objc_output { text } {"}, {"sha": "1f52adb1d1b9c202367b4e7e39b1b62ba0fde349", "filename": "gcc/testsuite/lib/target-utils.exp", "status": "added", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f63950e56178b03d3adffc818b247eb6e1c6d340/gcc%2Ftestsuite%2Flib%2Ftarget-utils.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f63950e56178b03d3adffc818b247eb6e1c6d340/gcc%2Ftestsuite%2Flib%2Ftarget-utils.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Flib%2Ftarget-utils.exp?ref=f63950e56178b03d3adffc818b247eb6e1c6d340", "patch": "@@ -0,0 +1,44 @@\n+# Copyright (C) 2014 Free Software Foundation, Inc.\n+\n+# This program is free software; you can redistribute it and/or modify\n+# it under the terms of the GNU General Public License as published by\n+# the Free Software Foundation; either version 3 of the License, or\n+# (at your option) any later version.\n+#\n+# This program is distributed in the hope that it will be useful,\n+# but WITHOUT ANY WARRANTY; without even the implied warranty of\n+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+# GNU General Public License for more details.\n+#\n+# You should have received a copy of the GNU General Public License\n+# along with GCC; see the file COPYING3.  If not see\n+# <http://www.gnu.org/licenses/>.\n+\n+#\n+# ${tool}_check_unsupported_p -- Check the compiler(/assembler/linker) output\n+# for text indicating that the testcase should be marked as \"unsupported\"\n+#\n+# When dealing with a large number of tests, it's difficult to weed out the\n+# ones that are too big for a particular cpu (eg: 16 bit with a small amount\n+# of memory).  There are various ways to deal with this.  Here's one.\n+# Fortunately, all of the cases where this is likely to happen will be using\n+# gld so we can tell what the error text will look like.\n+#\n+\n+load_lib target-supports.exp\n+\n+proc ${tool}_check_unsupported_p { output } {\n+    if [regexp \"(^|\\n)\\[^\\n\\]*: region \\[^\\n\\]* is full\" $output] {\n+\treturn \"memory full\"\n+    }\n+    if { [regexp \"(^|\\n)\\[^\\n\\]*: relocation truncated to fit\" $output]\n+          && [check_effective_target_tiny] } {\n+        return \"memory full\"\n+     }\n+\n+    if { [istarget spu-*-*] && \\\n+\t     [string match \"*exceeds local store*\" $output] } {\n+\treturn \"memory full\"\n+    }\n+    return \"\"\n+}"}]}