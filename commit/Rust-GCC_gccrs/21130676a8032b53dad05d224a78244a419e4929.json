{"sha": "21130676a8032b53dad05d224a78244a419e4929", "node_id": "C_kwDOANBUbNoAKDIxMTMwNjc2YTgwMzJiNTNkYWQwNWQyMjRhNzgyNDRhNDE5ZTQ5Mjk", "commit": {"author": {"name": "Alexandre Oliva", "email": "oliva@adacore.com", "date": "2022-09-08T03:15:19Z"}, "committer": {"name": "Marc Poulhi\u00e8s", "email": "poulhies@adacore.com", "date": "2022-10-06T09:22:49Z"}, "message": "ada: hardened booleans: exemplify codegen changes\n\nShow the sort of code that is to be expected from using hardened\nbooleans in Ada code.  Mention that C traps instead of raising\nexceptions.\n\ngcc/ada/\n\n\t* doc/gnat_rm/security_hardening_features.rst: Add examples of\n\tcodegen changes in hardened booleans. Mention that C traps where\n\tAda raises exceptions.\n\t* gnat_rm.texi: Regenerate.", "tree": {"sha": "c67bda32d5660d5290bf1ed89212185f14b5ce13", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c67bda32d5660d5290bf1ed89212185f14b5ce13"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/21130676a8032b53dad05d224a78244a419e4929", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/21130676a8032b53dad05d224a78244a419e4929", "html_url": "https://github.com/Rust-GCC/gccrs/commit/21130676a8032b53dad05d224a78244a419e4929", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/21130676a8032b53dad05d224a78244a419e4929/comments", "author": null, "committer": {"login": "dkm", "id": 87603, "node_id": "MDQ6VXNlcjg3NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/87603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dkm", "html_url": "https://github.com/dkm", "followers_url": "https://api.github.com/users/dkm/followers", "following_url": "https://api.github.com/users/dkm/following{/other_user}", "gists_url": "https://api.github.com/users/dkm/gists{/gist_id}", "starred_url": "https://api.github.com/users/dkm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dkm/subscriptions", "organizations_url": "https://api.github.com/users/dkm/orgs", "repos_url": "https://api.github.com/users/dkm/repos", "events_url": "https://api.github.com/users/dkm/events{/privacy}", "received_events_url": "https://api.github.com/users/dkm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "09203b787a9a64bd57ee83d1be1495975a384ec6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/09203b787a9a64bd57ee83d1be1495975a384ec6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/09203b787a9a64bd57ee83d1be1495975a384ec6"}], "stats": {"total": 55, "additions": 48, "deletions": 7}, "files": [{"sha": "d8ea849c032a99b51e2085a02935336cb5c54dd0", "filename": "gcc/ada/doc/gnat_rm/security_hardening_features.rst", "status": "modified", "additions": 25, "deletions": 4, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/21130676a8032b53dad05d224a78244a419e4929/gcc%2Fada%2Fdoc%2Fgnat_rm%2Fsecurity_hardening_features.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/21130676a8032b53dad05d224a78244a419e4929/gcc%2Fada%2Fdoc%2Fgnat_rm%2Fsecurity_hardening_features.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fdoc%2Fgnat_rm%2Fsecurity_hardening_features.rst?ref=21130676a8032b53dad05d224a78244a419e4929", "patch": "@@ -265,19 +265,40 @@ further remove checks found to be redundant.\n For additional hardening, the ``hardbool`` :samp:`Machine_Attribute`\n pragma can be used to annotate boolean types with representation\n clauses, so that expressions of such types used as conditions are\n-checked even when compiling with :switch:`-gnatVT`.\n+checked even when compiling with :switch:`-gnatVT`:\n \n .. code-block:: ada\n \n    pragma Machine_Attribute (HBool, \"hardbool\");\n \n+   function To_Boolean (X : HBool) returns Boolean is (Boolean (X));\n+\n+\n+is compiled roughly like:\n+\n+.. code-block:: ada\n+\n+   function To_Boolean (X : HBool) returns Boolean is\n+   begin\n+     if X not in True | False then\n+       raise Constraint_Error;\n+     elsif X in True then\n+       return True;\n+     else\n+       return False;\n+     end if;\n+   end To_Boolean;\n+\n \n Note that :switch:`-gnatVn` will disable even ``hardbool`` testing.\n \n Analogous behavior is available as a GCC extension to the C and\n-Objective C programming languages, through the ``hardbool`` attribute.\n-For usage and more details on that attribute, see :title:`Using the\n-GNU Compiler Collection (GCC)`.\n+Objective C programming languages, through the ``hardbool`` attribute,\n+with the difference that, instead of raising a Constraint_Error\n+exception, when a hardened boolean variable is found to hold a value\n+that stands for neither True nor False, the program traps.  For usage\n+and more details on that attribute, see :title:`Using the GNU Compiler\n+Collection (GCC)`.\n \n \n .. Control Flow Redundancy:"}, {"sha": "dad0092713e7815aeba709fe775be0c22e0a6797", "filename": "gcc/ada/gnat_rm.texi", "status": "modified", "additions": 23, "deletions": 3, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/21130676a8032b53dad05d224a78244a419e4929/gcc%2Fada%2Fgnat_rm.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/21130676a8032b53dad05d224a78244a419e4929/gcc%2Fada%2Fgnat_rm.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgnat_rm.texi?ref=21130676a8032b53dad05d224a78244a419e4929", "patch": "@@ -28920,17 +28920,37 @@ further remove checks found to be redundant.\n For additional hardening, the @code{hardbool} @code{Machine_Attribute}\n pragma can be used to annotate boolean types with representation\n clauses, so that expressions of such types used as conditions are\n-checked even when compiling with @code{-gnatVT}.\n+checked even when compiling with @code{-gnatVT}:\n \n @example\n pragma Machine_Attribute (HBool, \"hardbool\");\n+\n+function To_Boolean (X : HBool) returns Boolean is (Boolean (X));\n+@end example\n+\n+is compiled roughly like:\n+\n+@example\n+function To_Boolean (X : HBool) returns Boolean is\n+begin\n+  if X not in True | False then\n+    raise Constraint_Error;\n+  elsif X in True then\n+    return True;\n+  else\n+    return False;\n+  end if;\n+end To_Boolean;\n @end example\n \n Note that @code{-gnatVn} will disable even @code{hardbool} testing.\n \n Analogous behavior is available as a GCC extension to the C and\n-Objective C programming languages, through the @code{hardbool} attribute.\n-For usage and more details on that attribute, see @cite{Using the GNU Compiler Collection (GCC)}.\n+Objective C programming languages, through the @code{hardbool} attribute,\n+with the difference that, instead of raising a Constraint_Error\n+exception, when a hardened boolean variable is found to hold a value\n+that stands for neither True nor False, the program traps.  For usage\n+and more details on that attribute, see @cite{Using the GNU Compiler Collection (GCC)}.\n \n @c Control Flow Redundancy:\n "}]}