{"sha": "6ec8079e0b7dc7c44a7001ffb20ca038362191d5", "node_id": "C_kwDOANBUbNoAKDZlYzgwNzllMGI3ZGM3YzQ0YTcwMDFmZmIyMGNhMDM4MzYyMTkxZDU", "commit": {"author": {"name": "Alexandre Oliva", "email": "oliva@adacore.com", "date": "2022-12-29T17:32:59Z"}, "committer": {"name": "Alexandre Oliva", "email": "oliva@gnu.org", "date": "2022-12-29T17:39:47Z"}, "message": "[C++] constexpr: request insert iff depth is ok\n\ncxx_eval_call_expression requests an INSERT even in cases when it\nwould later decide not to insert.  This could break double-hashing\nchains.  Arrange for it to use NO_INSERT when the insertion would not\nbe completed.\n\n\nfor  gcc/cp/ChangeLog\n\n\t* constexpr.cc (cxx_eval_call_expression): Do not request an\n\tINSERT that would not be completed.", "tree": {"sha": "836013364cf807a42d7f33a5ad7857ea615a8628", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/836013364cf807a42d7f33a5ad7857ea615a8628"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6ec8079e0b7dc7c44a7001ffb20ca038362191d5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6ec8079e0b7dc7c44a7001ffb20ca038362191d5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6ec8079e0b7dc7c44a7001ffb20ca038362191d5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6ec8079e0b7dc7c44a7001ffb20ca038362191d5/comments", "author": null, "committer": null, "parents": [{"sha": "06be65894f7f18058496aa0e55bb7ec5613cb2a3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/06be65894f7f18058496aa0e55bb7ec5613cb2a3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/06be65894f7f18058496aa0e55bb7ec5613cb2a3"}], "stats": {"total": 8, "additions": 5, "deletions": 3}, "files": [{"sha": "a65dbdc5b13d8b01df26d5794190f6ef8ee45688", "filename": "gcc/cp/constexpr.cc", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ec8079e0b7dc7c44a7001ffb20ca038362191d5/gcc%2Fcp%2Fconstexpr.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ec8079e0b7dc7c44a7001ffb20ca038362191d5/gcc%2Fcp%2Fconstexpr.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fconstexpr.cc?ref=6ec8079e0b7dc7c44a7001ffb20ca038362191d5", "patch": "@@ -3000,13 +3000,15 @@ cxx_eval_call_expression (const constexpr_ctx *ctx, tree t,\n \n       /* If we have seen this call before, we are done.  */\n       maybe_initialize_constexpr_call_table ();\n+      bool insert = depth_ok < constexpr_cache_depth;\n       constexpr_call **slot\n-\t= constexpr_call_table->find_slot (&new_call, INSERT);\n-      entry = *slot;\n+\t= constexpr_call_table->find_slot (&new_call,\n+\t\t\t\t\t   insert ? INSERT : NO_INSERT);\n+      entry = slot ? *slot : NULL;\n       if (entry == NULL)\n \t{\n \t  /* Only cache up to constexpr_cache_depth to limit memory use.  */\n-\t  if (depth_ok < constexpr_cache_depth)\n+\t  if (insert)\n \t    {\n \t      /* We need to keep a pointer to the entry, not just the slot, as\n \t\t the slot can move during evaluation of the body.  */"}]}