{"sha": "5f2f13fde25c838309d1bf6c23bf58bd92442822", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWYyZjEzZmRlMjVjODM4MzA5ZDFiZjZjMjNiZjU4YmQ5MjQ0MjgyMg==", "commit": {"author": {"name": "DJ Delorie", "email": "dj@redhat.com", "date": "2011-05-12T10:30:28Z"}, "committer": {"name": "Nick Clifton", "email": "nickc@gcc.gnu.org", "date": "2011-05-12T10:30:28Z"}, "message": "rx.h (HAVE_PRE_DECREMENT): Fix typo.\n\n\t* config/rx/rx.h (HAVE_PRE_DECREMENT): Fix typo.\n\t* config/rx/rx.c (CC_FLAG_FP): Fix comment.\n\t(rx_is_legitimate_address): Add pre-decrement and post-increment\n\taddressing in HImode and QImode.  Fix test for out of range\n\tREG+INT addressing.\n\t(rx_legitimate_constant_p): Rename ro rx_is_legitimate_constant.\n\t(rx_align_for_label): Test label before extracting its usage\n\tcount.\n\t(rx_adjust_insn_lengths): Fix selection of insn codes.\n\t(TARGET_LEGITIMNATE_CONSTANT_P): Use renamed function.\n\nCo-Authored-By: Nick Clifton <nickc@redhat.com>\n\nFrom-SVN: r173695", "tree": {"sha": "8d47664dc153bb53502ad279e144b65d45d58735", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8d47664dc153bb53502ad279e144b65d45d58735"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5f2f13fde25c838309d1bf6c23bf58bd92442822", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5f2f13fde25c838309d1bf6c23bf58bd92442822", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5f2f13fde25c838309d1bf6c23bf58bd92442822", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5f2f13fde25c838309d1bf6c23bf58bd92442822/comments", "author": null, "committer": null, "parents": [{"sha": "57421f45e80e19f0100187543ff91d291359d5ff", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/57421f45e80e19f0100187543ff91d291359d5ff", "html_url": "https://github.com/Rust-GCC/gccrs/commit/57421f45e80e19f0100187543ff91d291359d5ff"}], "stats": {"total": 49, "additions": 36, "deletions": 13}, "files": [{"sha": "5b6a1b79d2b37448327110e062653456e0b5585c", "filename": "gcc/ChangeLog", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f2f13fde25c838309d1bf6c23bf58bd92442822/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f2f13fde25c838309d1bf6c23bf58bd92442822/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=5f2f13fde25c838309d1bf6c23bf58bd92442822", "patch": "@@ -1,3 +1,24 @@\n+2011-05-12  DJ Delorie  <dj@redhat.com>\n+\t    Nick Clifton  <nickc@redhat.com>\n+\n+\t* config/rx/rx.h (HAVE_PRE_DECREMENT): Fix typo.\n+\t* config/rx/rx.c (CC_FLAG_FP): Fix comment.\n+\t(rx_is_legitimate_address): Add pre-decrement and post-increment\n+\taddressing in HImode and QImode.  Fix test for out of range\n+\tREG+INT addressing.\n+\t(rx_legitimate_constant_p): Rename ro rx_is_legitimate_constant.\n+\t(rx_align_for_label): Test label before extracting its usage\n+\tcount.\n+\t(rx_adjust_insn_lengths): Fix selection of insn codes.\n+\t(TARGET_LEGITIMNATE_CONSTANT_P): Use renamed function.\n+\n+\t(rx_builtins): New arrays - holds builtin functions.\n+\t(ADD_RX_BUILTIN1, ADD_RX_BUILTIN2, ADD_RX_BUILTIN3): Install\n+\tcreated builtin into rx_builtins array.\n+\t(rx_builtin_decl): New function.\n+\t(TARGET_BUITLIN_DECL): Define.\n+\tInclude gt-rx.h.\n+\n 2011-05-11  Jason Merrill  <jason@redhat.com>\n \n \t* tree.c (type_hash_canon): Use struct tree_type_non_common."}, {"sha": "b26490e14361d9b55c35f91bf606e93a3bb90c77", "filename": "gcc/config/rx/rx.c", "status": "modified", "additions": 14, "deletions": 12, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f2f13fde25c838309d1bf6c23bf58bd92442822/gcc%2Fconfig%2Frx%2Frx.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f2f13fde25c838309d1bf6c23bf58bd92442822/gcc%2Fconfig%2Frx%2Frx.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frx%2Frx.c?ref=5f2f13fde25c838309d1bf6c23bf58bd92442822", "patch": "@@ -58,7 +58,7 @@ static void rx_print_operand (FILE *, rtx, int);\n #define CC_FLAG_Z\t(1 << 1)\n #define CC_FLAG_O\t(1 << 2)\n #define CC_FLAG_C\t(1 << 3)\n-#define CC_FLAG_FP\t(1 << 4)\t/* fake, to differentiate CC_Fmode */\n+#define CC_FLAG_FP\t(1 << 4)\t/* Fake, to differentiate CC_Fmode.  */\n \n static unsigned int flags_from_mode (enum machine_mode mode);\n static unsigned int flags_from_code (enum rtx_code code);\n@@ -85,7 +85,9 @@ rx_is_legitimate_address (enum machine_mode mode, rtx x,\n     /* Register Indirect.  */\n     return true;\n \n-  if (GET_MODE_SIZE (mode) <= 4\n+  if ((GET_MODE_SIZE (mode) == 4\n+       || GET_MODE_SIZE (mode) == 2\n+       || GET_MODE_SIZE (mode) == 1)\n       && (GET_CODE (x) == PRE_DEC || GET_CODE (x) == POST_INC))\n     /* Pre-decrement Register Indirect or\n        Post-increment Register Indirect.  */\n@@ -125,7 +127,7 @@ rx_is_legitimate_address (enum machine_mode mode, rtx x,\n \t      case 1: factor = 1; break;\n \t      }\n \n-\t    if (val >= (0x10000 * factor))\n+\t    if (val > (65535 * factor))\n \t      return false;\n \t    return (val % factor) == 0;\n \t  }\n@@ -1349,7 +1351,7 @@ gen_safe_add (rtx dest, rtx src, rtx val, bool is_frame_related)\n     insn = emit_insn (gen_addsi3 (dest, src, val));\n   else\n     {\n-      /* Wrap VAL in an UNSPEC so that rx_legitimate_constant_p\n+      /* Wrap VAL in an UNSPEC so that rx_is_legitimate_constant\n \t will not reject it.  */\n       val = gen_rtx_CONST (SImode, gen_rtx_UNSPEC (SImode, gen_rtvec (1, val), UNSPEC_CONST));\n       insn = emit_insn (gen_addsi3 (dest, src, val));\n@@ -1932,7 +1934,7 @@ static void\n rx_init_builtins (void)\n {\n #define ADD_RX_BUILTIN1(UC_NAME, LC_NAME, RET_TYPE, ARG_TYPE)\t\t\\\n-  add_builtin_function (\"__builtin_rx_\" LC_NAME,\t\t\t\\\n+   add_builtin_function (\"__builtin_rx_\" LC_NAME,\t\t\t\\\n \t\t\tbuild_function_type_list (RET_TYPE##_type_node, \\\n \t\t\t\t\t\t  ARG_TYPE##_type_node, \\\n \t\t\t\t\t\t  NULL_TREE),\t\t\\\n@@ -2448,7 +2450,7 @@ rx_is_ms_bitfield_layout (const_tree record_type ATTRIBUTE_UNUSED)\n    operand on the RX.  X is already known to satisfy CONSTANT_P.  */\n \n bool\n-rx_legitimate_constant_p (enum machine_mode mode ATTRIBUTE_UNUSED, rtx x)\n+rx_is_legitimate_constant (enum machine_mode mode ATTRIBUTE_UNUSED, rtx x)\n {\n   switch (GET_CODE (x))\n     {\n@@ -2782,7 +2784,7 @@ rx_align_for_label (rtx lab, int uses_threshold)\n      because the delay due to the inserted NOPs would be greater than the delay\n      due to the misaligned branch.  If uses_threshold is zero then the alignment\n      is always useful.  */\n-  if (LABEL_NUSES (lab) < uses_threshold)\n+  if (LABEL_P (lab) && LABEL_NUSES (lab) < uses_threshold)\n     return 0;\n \n   return optimize_size ? 1 : 3;\n@@ -2837,7 +2839,7 @@ rx_adjust_insn_length (rtx insn, int current_length)\n     case CODE_FOR_smaxsi3_zero_extendhi:\n     case CODE_FOR_sminsi3_zero_extendhi:\n     case CODE_FOR_multsi3_zero_extendhi:\n-    case CODE_FOR_comparesi3_zero_extendqi:\n+    case CODE_FOR_comparesi3_zero_extendhi:\n       zero = true;\n       factor = 2;\n       break;\n@@ -2852,7 +2854,7 @@ rx_adjust_insn_length (rtx insn, int current_length)\n     case CODE_FOR_smaxsi3_sign_extendhi:\n     case CODE_FOR_sminsi3_sign_extendhi:\n     case CODE_FOR_multsi3_sign_extendhi:\n-    case CODE_FOR_comparesi3_zero_extendhi:\n+    case CODE_FOR_comparesi3_sign_extendhi:\n       zero = false;\n       factor = 2;\n       break;\n@@ -2867,7 +2869,7 @@ rx_adjust_insn_length (rtx insn, int current_length)\n     case CODE_FOR_smaxsi3_zero_extendqi:\n     case CODE_FOR_sminsi3_zero_extendqi:\n     case CODE_FOR_multsi3_zero_extendqi:\n-    case CODE_FOR_comparesi3_sign_extendqi:\n+    case CODE_FOR_comparesi3_zero_extendqi:\n       zero = true;\n       factor = 1;\n       break;\n@@ -2882,7 +2884,7 @@ rx_adjust_insn_length (rtx insn, int current_length)\n     case CODE_FOR_smaxsi3_sign_extendqi:\n     case CODE_FOR_sminsi3_sign_extendqi:\n     case CODE_FOR_multsi3_sign_extendqi:\n-    case CODE_FOR_comparesi3_sign_extendhi:\n+    case CODE_FOR_comparesi3_sign_extendqi:\n       zero = false;\n       factor = 1;\n       break;\n@@ -3062,7 +3064,7 @@ rx_adjust_insn_length (rtx insn, int current_length)\n #define TARGET_FLAGS_REGNUM\t\t\tCC_REG\n \n #undef  TARGET_LEGITIMATE_CONSTANT_P\n-#define TARGET_LEGITIMATE_CONSTANT_P\t\trx_legitimate_constant_p\n+#define TARGET_LEGITIMATE_CONSTANT_P\t\trx_is_legitimate_constant\n \n struct gcc_target targetm = TARGET_INITIALIZER;\n "}, {"sha": "67e8ce1c5772831ade8c50f12887d1eaa100ccc2", "filename": "gcc/config/rx/rx.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f2f13fde25c838309d1bf6c23bf58bd92442822/gcc%2Fconfig%2Frx%2Frx.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f2f13fde25c838309d1bf6c23bf58bd92442822/gcc%2Fconfig%2Frx%2Frx.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frx%2Frx.h?ref=5f2f13fde25c838309d1bf6c23bf58bd92442822", "patch": "@@ -144,7 +144,7 @@\n \n #define TRULY_NOOP_TRUNCATION(OUTPREC, INPREC)   1\n \n-#define HAVE_PRE_DECCREMENT\t\t1\n+#define HAVE_PRE_DECREMENT\t\t1\n #define HAVE_POST_INCREMENT\t\t1\n \n #define MOVE_RATIO(SPEED) \t\t((SPEED) ? 4 : 2)"}]}