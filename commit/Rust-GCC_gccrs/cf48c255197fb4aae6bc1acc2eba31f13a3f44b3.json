{"sha": "cf48c255197fb4aae6bc1acc2eba31f13a3f44b3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Y2Y0OGMyNTUxOTdmYjRhYWU2YmMxYWNjMmViYTMxZjEzYTNmNDRiMw==", "commit": {"author": {"name": "Marc Glisse", "email": "marc.glisse@inria.fr", "date": "2012-04-29T23:36:09Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2012-04-29T23:36:09Z"}, "message": "re PR libstdc++/51795 (linear_congruential_engine doesn't work correctly)\n\n2012-04-29  Marc Glisse  <marc.glisse@inria.fr>\n\t    Paolo Carlini  <paolo.carlini@oracle.com>\n\n\tPR libstdc++/51795\n\t* include/bits/stl_algobase.h (__lg<>(_Size)): Remove.\n\t(__lg(int), __lg(unsigned), __lg(long), __lg(unsigned long),\n\t__lg(long long), __lg(unsigned long long)): Define constexpr.\n\t* include/bits/random.h (_Mod<>): Overcome Schrage's algorithm\n\tlimitations.\n\t(__mod): Adjust.\n\t(linear_congruential): Remove FIXME static_assert.\n\t* include/bits/random.tcc (_Mod<>): Adjust.\n\t* testsuite/26_numerics/random/linear_congruential_engine/operators/\n\t51795.cc: New.\n\nCo-Authored-By: Paolo Carlini <paolo.carlini@oracle.com>\n\nFrom-SVN: r186948", "tree": {"sha": "9adf35dcdbd754a14ae986576a07b43387e41d70", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9adf35dcdbd754a14ae986576a07b43387e41d70"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/cf48c255197fb4aae6bc1acc2eba31f13a3f44b3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cf48c255197fb4aae6bc1acc2eba31f13a3f44b3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cf48c255197fb4aae6bc1acc2eba31f13a3f44b3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cf48c255197fb4aae6bc1acc2eba31f13a3f44b3/comments", "author": {"login": "mglisse", "id": 10097863, "node_id": "MDQ6VXNlcjEwMDk3ODYz", "avatar_url": "https://avatars.githubusercontent.com/u/10097863?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mglisse", "html_url": "https://github.com/mglisse", "followers_url": "https://api.github.com/users/mglisse/followers", "following_url": "https://api.github.com/users/mglisse/following{/other_user}", "gists_url": "https://api.github.com/users/mglisse/gists{/gist_id}", "starred_url": "https://api.github.com/users/mglisse/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mglisse/subscriptions", "organizations_url": "https://api.github.com/users/mglisse/orgs", "repos_url": "https://api.github.com/users/mglisse/repos", "events_url": "https://api.github.com/users/mglisse/events{/privacy}", "received_events_url": "https://api.github.com/users/mglisse/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "143a1ce16cee1ade7a09266a3a0190ee2e826734", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/143a1ce16cee1ade7a09266a3a0190ee2e826734", "html_url": "https://github.com/Rust-GCC/gccrs/commit/143a1ce16cee1ade7a09266a3a0190ee2e826734"}], "stats": {"total": 238, "additions": 165, "deletions": 73}, "files": [{"sha": "99be46799d29c29ebdbf9bd5e175b8929fc6e18b", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cf48c255197fb4aae6bc1acc2eba31f13a3f44b3/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cf48c255197fb4aae6bc1acc2eba31f13a3f44b3/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=cf48c255197fb4aae6bc1acc2eba31f13a3f44b3", "patch": "@@ -1,3 +1,18 @@\n+2012-04-29  Marc Glisse  <marc.glisse@inria.fr>\n+\t    Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+\tPR libstdc++/51795\n+\t* include/bits/stl_algobase.h (__lg<>(_Size)): Remove.\n+\t(__lg(int), __lg(unsigned), __lg(long), __lg(unsigned long),\n+\t__lg(long long), __lg(unsigned long long)): Define constexpr.\n+\t* include/bits/random.h (_Mod<>): Overcome Schrage's algorithm\n+\tlimitations.\n+\t(__mod): Adjust.\n+\t(linear_congruential): Remove FIXME static_assert.\n+\t* include/bits/random.tcc (_Mod<>): Adjust.\n+\t* testsuite/26_numerics/random/linear_congruential_engine/operators/\n+\t51795.cc: New.\n+\n 2012-04-29  Jonathan Wakely  <jwakely.gcc@gmail.com>\n \n \t* include/std/functional (function::function(F)): LWG 2132: Disable"}, {"sha": "4361296bca002d9d5fe9fb36eb7aa3c8741cd9bc", "filename": "libstdc++-v3/include/bits/random.h", "status": "modified", "additions": 68, "deletions": 10, "changes": 78, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cf48c255197fb4aae6bc1acc2eba31f13a3f44b3/libstdc%2B%2B-v3%2Finclude%2Fbits%2Frandom.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cf48c255197fb4aae6bc1acc2eba31f13a3f44b3/libstdc%2B%2B-v3%2Finclude%2Fbits%2Frandom.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Frandom.h?ref=cf48c255197fb4aae6bc1acc2eba31f13a3f44b3", "patch": "@@ -76,15 +76,78 @@ _GLIBCXX_END_NAMESPACE_VERSION\n       struct _Shift<_UIntType, __w, true>\n       { static const _UIntType __value = _UIntType(1) << __w; };\n \n-    template<typename _Tp, _Tp __m, _Tp __a, _Tp __c, bool>\n-      struct _Mod;\n+    template<int __s,\n+\t     int __which = ((__s <= __CHAR_BIT__ * sizeof (int))\n+\t\t\t    + (__s <= __CHAR_BIT__ * sizeof (long))\n+\t\t\t    + (__s <= __CHAR_BIT__ * sizeof (long long))\n+\t\t\t    /* assume long long no bigger than __int128 */\n+\t\t\t    + (__s <= 128))>\n+      struct _Select_uint_least_t\n+      {\n+\tstatic_assert(__which < 0, /* needs to be dependent */\n+\t\t      \"sorry, would be too much trouble for a slow result\");\n+      };\n+\n+    template<int __s>\n+      struct _Select_uint_least_t<__s, 4>\n+      { typedef unsigned int type; };\n+\n+    template<int __s>\n+      struct _Select_uint_least_t<__s, 3>\n+      { typedef unsigned long type; };\n+\n+    template<int __s>\n+      struct _Select_uint_least_t<__s, 2>\n+      { typedef unsigned long long type; };\n+\n+#ifdef _GLIBCXX_USE_INT128\n+    template<int __s>\n+      struct _Select_uint_least_t<__s, 1>\n+      { typedef unsigned __int128 type; };\n+#endif\n+\n+    // Assume a != 0, a < m, c < m, x < m.\n+    template<typename _Tp, _Tp __m, _Tp __a, _Tp __c,\n+\t     bool __big_enough = (!(__m & (__m - 1))\n+\t\t\t\t  || (_Tp(-1) - __c) / __a >= __m - 1),\n+             bool __schrage_ok = __m % __a < __m / __a>\n+      struct _Mod\n+      {\n+\ttypedef typename _Select_uint_least_t<std::__lg(__a)\n+\t\t\t\t\t      + std::__lg(__m) + 2>::type _Tp2;\n+\tstatic _Tp\n+\t__calc(_Tp __x)\n+\t{ return static_cast<_Tp>((_Tp2(__a) * __x + __c) % __m); }\n+      };\n+\n+    // Schrage.\n+    template<typename _Tp, _Tp __m, _Tp __a, _Tp __c>\n+      struct _Mod<_Tp, __m, __a, __c, false, true>\n+      {\n+\tstatic _Tp\n+\t__calc(_Tp __x);\n+      };\n+\n+    // Special cases:\n+    // - for m == 2^n or m == 0, unsigned integer overflow is safe.\n+    // - a * (m - 1) + c fits in _Tp, there is no overflow.\n+    template<typename _Tp, _Tp __m, _Tp __a, _Tp __c, bool __s>\n+      struct _Mod<_Tp, __m, __a, __c, true, __s>\n+      {\n+\tstatic _Tp\n+\t__calc(_Tp __x)\n+\t{\n+\t  _Tp __res = __a * __x + __c;\n+\t  if (__m)\n+\t    __res %= __m;\n+\t  return __res;\n+\t}\n+      };\n \n-    // Dispatch based on modulus value to prevent divide-by-zero compile-time\n-    // errors when m == 0.\n     template<typename _Tp, _Tp __m, _Tp __a = 1, _Tp __c = 0>\n       inline _Tp\n       __mod(_Tp __x)\n-      { return _Mod<_Tp, __m, __a, __c, __m == 0>::__calc(__x); }\n+      { return _Mod<_Tp, __m, __a, __c>::__calc(__x); }\n \n     /*\n      * An adaptor class for converting the output of any Generator into\n@@ -174,11 +237,6 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       static_assert(__m == 0u || (__a < __m && __c < __m),\n \t\t    \"template argument substituting __m out of bounds\");\n \n-      // XXX FIXME:\n-      // _Mod::__calc should handle correctly __m % __a >= __m / __a too.\n-      static_assert(__m % __a < __m / __a,\n-\t\t    \"sorry, not implemented yet: try a smaller 'a' constant\");\n-\n     public:\n       /** The type of the generated random value. */\n       typedef _UIntType result_type;"}, {"sha": "f7064c4e224c8b2e9925aa2cadd47456bb035e44", "filename": "libstdc++-v3/include/bits/random.tcc", "status": "modified", "additions": 31, "deletions": 47, "changes": 78, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cf48c255197fb4aae6bc1acc2eba31f13a3f44b3/libstdc%2B%2B-v3%2Finclude%2Fbits%2Frandom.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cf48c255197fb4aae6bc1acc2eba31f13a3f44b3/libstdc%2B%2B-v3%2Finclude%2Fbits%2Frandom.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Frandom.tcc?ref=cf48c255197fb4aae6bc1acc2eba31f13a3f44b3", "patch": "@@ -41,58 +41,42 @@ namespace std _GLIBCXX_VISIBILITY(default)\n   {\n   _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n-    // General case for x = (ax + c) mod m -- use Schrage's algorithm to\n-    // avoid integer overflow.\n-    //\n-    // Because a and c are compile-time integral constants the compiler\n-    // kindly elides any unreachable paths.\n+    // General case for x = (ax + c) mod m -- use Schrage's algorithm\n+    // to avoid integer overflow.\n     //\n     // Preconditions:  a > 0, m > 0.\n     //\n-    // XXX FIXME: as-is, only works correctly for __m % __a < __m / __a. \n-    //\n-    template<typename _Tp, _Tp __m, _Tp __a, _Tp __c, bool>\n-      struct _Mod\n-      {\n-\tstatic _Tp\n-\t__calc(_Tp __x)\n-\t{\n-\t  if (__a == 1)\n-\t    __x %= __m;\n-\t  else\n-\t    {\n-\t      static const _Tp __q = __m / __a;\n-\t      static const _Tp __r = __m % __a;\n-\n-\t      _Tp __t1 = __a * (__x % __q);\n-\t      _Tp __t2 = __r * (__x / __q);\n-\t      if (__t1 >= __t2)\n-\t\t__x = __t1 - __t2;\n-\t      else\n-\t\t__x = __m - __t2 + __t1;\n-\t    }\n-\n-\t  if (__c != 0)\n-\t    {\n-\t      const _Tp __d = __m - __x;\n-\t      if (__d > __c)\n-\t\t__x += __c;\n-\t      else\n-\t\t__x = __c - __d;\n-\t    }\n-\t  return __x;\n-\t}\n-      };\n-\n-    // Special case for m == 0 -- use unsigned integer overflow as modulo\n-    // operator.\n+    // Note: only works correctly for __m % __a < __m / __a.\n     template<typename _Tp, _Tp __m, _Tp __a, _Tp __c>\n-      struct _Mod<_Tp, __m, __a, __c, true>\n+      _Tp\n+      _Mod<_Tp, __m, __a, __c, false, true>::\n+      __calc(_Tp __x)\n       {\n-\tstatic _Tp\n-\t__calc(_Tp __x)\n-\t{ return __a * __x + __c; }\n-      };\n+\tif (__a == 1)\n+\t  __x %= __m;\n+\telse\n+\t  {\n+\t    static const _Tp __q = __m / __a;\n+\t    static const _Tp __r = __m % __a;\n+\n+\t    _Tp __t1 = __a * (__x % __q);\n+\t    _Tp __t2 = __r * (__x / __q);\n+\t    if (__t1 >= __t2)\n+\t      __x = __t1 - __t2;\n+\t    else\n+\t      __x = __m - __t2 + __t1;\n+\t  }\n+\n+\tif (__c != 0)\n+\t  {\n+\t    const _Tp __d = __m - __x;\n+\t    if (__d > __c)\n+\t      __x += __c;\n+\t    else\n+\t      __x = __c - __d;\n+\t  }\n+\treturn __x;\n+      }\n \n     template<typename _InputIterator, typename _OutputIterator,\n \t     typename _UnaryOperation>"}, {"sha": "a48cf9ada6db766ce7573380edfb4c24924fa8c3", "filename": "libstdc++-v3/include/bits/stl_algobase.h", "status": "modified", "additions": 6, "deletions": 16, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cf48c255197fb4aae6bc1acc2eba31f13a3f44b3/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_algobase.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cf48c255197fb4aae6bc1acc2eba31f13a3f44b3/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_algobase.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_algobase.h?ref=cf48c255197fb4aae6bc1acc2eba31f13a3f44b3", "patch": "@@ -975,37 +975,27 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n   /// This is a helper function for the sort routines and for random.tcc.\n   //  Precondition: __n > 0.\n-  template<typename _Size>\n-    inline _Size\n-    __lg(_Size __n)\n-    {\n-      _Size __k;\n-      for (__k = 0; __n != 0; __n >>= 1)\n-\t++__k;\n-      return __k - 1;\n-    }\n-\n-  inline int\n+  inline _GLIBCXX_CONSTEXPR int\n   __lg(int __n)\n   { return sizeof(int) * __CHAR_BIT__  - 1 - __builtin_clz(__n); }\n \n-  inline unsigned\n+  inline _GLIBCXX_CONSTEXPR unsigned\n   __lg(unsigned __n)\n   { return sizeof(int) * __CHAR_BIT__  - 1 - __builtin_clz(__n); }\n \n-  inline long\n+  inline _GLIBCXX_CONSTEXPR long\n   __lg(long __n)\n   { return sizeof(long) * __CHAR_BIT__ - 1 - __builtin_clzl(__n); }\n \n-  inline unsigned long\n+  inline _GLIBCXX_CONSTEXPR unsigned long\n   __lg(unsigned long __n)\n   { return sizeof(long) * __CHAR_BIT__ - 1 - __builtin_clzl(__n); }\n \n-  inline long long\n+  inline _GLIBCXX_CONSTEXPR long long\n   __lg(long long __n)\n   { return sizeof(long long) * __CHAR_BIT__ - 1 - __builtin_clzll(__n); }\n \n-  inline unsigned long long\n+  inline _GLIBCXX_CONSTEXPR unsigned long long\n   __lg(unsigned long long __n)\n   { return sizeof(long long) * __CHAR_BIT__ - 1 - __builtin_clzll(__n); }\n "}, {"sha": "a626df0eae396c6fac526632c3c7eaba1accb00b", "filename": "libstdc++-v3/testsuite/26_numerics/random/linear_congruential_engine/operators/51795.cc", "status": "added", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cf48c255197fb4aae6bc1acc2eba31f13a3f44b3/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Flinear_congruential_engine%2Foperators%2F51795.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cf48c255197fb4aae6bc1acc2eba31f13a3f44b3/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Flinear_congruential_engine%2Foperators%2F51795.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Flinear_congruential_engine%2Foperators%2F51795.cc?ref=cf48c255197fb4aae6bc1acc2eba31f13a3f44b3", "patch": "@@ -0,0 +1,45 @@\n+// { dg-options \"-std=gnu++11\" }\n+// { dg-require-cstdint \"\" }\n+//\n+// Copyright (C) 2012 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// 26.5.3.1 class template linear_congruential_engine [rand.eng.lcong]\n+\n+#include <random>\n+#include <testsuite_hooks.h>\n+\n+void test01()\n+{\n+  bool test __attribute__((unused)) = true;\n+\n+  typedef std::linear_congruential_engine<std::uint64_t, 1103515245ULL,\n+\t\t\t\t\t  12345, 2147483648ULL> engine;\n+  engine eng(1103527590ULL);\n+\n+  for (unsigned it = 0; it < 1000; ++it)\n+    {\n+      std::uint64_t num = eng();\n+      VERIFY( (num >= eng.min() && num <= eng.max()) );\n+    }\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}]}