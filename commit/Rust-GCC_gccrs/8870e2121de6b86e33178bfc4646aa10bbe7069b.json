{"sha": "8870e2121de6b86e33178bfc4646aa10bbe7069b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODg3MGUyMTIxZGU2Yjg2ZTMzMTc4YmZjNDY0NmFhMTBiYmU3MDY5Yg==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2005-01-07T09:01:00Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2005-01-07T09:01:00Z"}, "message": "re PR tree-optimization/18828 (Extraneous warning with var_start and optimization)\n\n\tPR tree-optimization/18828\n\t* builtins.c (expand_builtin_next_arg): Remove argument and all\n\tthe argument checking.\n\t(expand_builtin): Adjust caller.\n\t(expand_builtin_va_start): Likewise.  Remove error for too many\n\targuments.\n\t(fold_builtin_next_arg): Issue error for too many arguments.\n\tAfter checking arguments, replace them with magic arguments that\n\tprevent further checking of the args.\n\n\t* gcc.dg/20050105-2.c: New test.\n\nFrom-SVN: r93040", "tree": {"sha": "9ca4a80106abc12d7faa84a20a89676b90effb70", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9ca4a80106abc12d7faa84a20a89676b90effb70"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8870e2121de6b86e33178bfc4646aa10bbe7069b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8870e2121de6b86e33178bfc4646aa10bbe7069b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8870e2121de6b86e33178bfc4646aa10bbe7069b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8870e2121de6b86e33178bfc4646aa10bbe7069b/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "4f1cfe85af8f53bdf31aa5b27cd6b5a7998f17bd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4f1cfe85af8f53bdf31aa5b27cd6b5a7998f17bd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4f1cfe85af8f53bdf31aa5b27cd6b5a7998f17bd"}], "stats": {"total": 135, "additions": 83, "deletions": 52}, "files": [{"sha": "47923a1d95e4a51639bd08b32913567270a394f3", "filename": "gcc/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8870e2121de6b86e33178bfc4646aa10bbe7069b/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8870e2121de6b86e33178bfc4646aa10bbe7069b/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=8870e2121de6b86e33178bfc4646aa10bbe7069b", "patch": "@@ -1,3 +1,15 @@\n+2005-01-07  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR tree-optimization/18828\n+\t* builtins.c (expand_builtin_next_arg): Remove argument and all\n+\tthe argument checking.\n+\t(expand_builtin): Adjust caller.\n+\t(expand_builtin_va_start): Likewise.  Remove error for too many\n+\targuments.\n+\t(fold_builtin_next_arg): Issue error for too many arguments.\n+\tAfter checking arguments, replace them with magic arguments that\n+\tprevent further checking of the args.\n+\n 2005-01-06  John David Anglin  <dave.anglin@nrc-cnrc.gc.ca>\n \n \t* pa64-hpux.h (STARTFILE_SPEC): Fix typo in spec."}, {"sha": "b41212ae2e0f113d8bd9d8e4e0cdbcfe28db368b", "filename": "gcc/builtins.c", "status": "modified", "additions": 34, "deletions": 52, "changes": 86, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8870e2121de6b86e33178bfc4646aa10bbe7069b/gcc%2Fbuiltins.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8870e2121de6b86e33178bfc4646aa10bbe7069b/gcc%2Fbuiltins.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbuiltins.c?ref=8870e2121de6b86e33178bfc4646aa10bbe7069b", "patch": "@@ -99,7 +99,7 @@ static rtx expand_builtin_mathfn (tree, rtx, rtx);\n static rtx expand_builtin_mathfn_2 (tree, rtx, rtx);\n static rtx expand_builtin_mathfn_3 (tree, rtx, rtx);\n static rtx expand_builtin_args_info (tree);\n-static rtx expand_builtin_next_arg (tree);\n+static rtx expand_builtin_next_arg (void);\n static rtx expand_builtin_va_start (tree);\n static rtx expand_builtin_va_end (tree);\n static rtx expand_builtin_va_copy (tree);\n@@ -3743,43 +3743,13 @@ expand_builtin_args_info (tree arglist)\n   return const0_rtx;\n }\n \n-/* Expand ARGLIST, from a call to __builtin_next_arg.  */\n+/* Expand a call to __builtin_next_arg.  */\n \n static rtx\n-expand_builtin_next_arg (tree arglist)\n+expand_builtin_next_arg (void)\n {\n-  tree fntype = TREE_TYPE (current_function_decl);\n-\n-  if (TYPE_ARG_TYPES (fntype) == 0\n-      || (TREE_VALUE (tree_last (TYPE_ARG_TYPES (fntype)))\n-\t  == void_type_node))\n-    {\n-      error (\"%<va_start%> used in function with fixed args\");\n-      return const0_rtx;\n-    }\n-\n-  if (arglist)\n-    {\n-      tree last_parm = tree_last (DECL_ARGUMENTS (current_function_decl));\n-      tree arg = TREE_VALUE (arglist);\n-\n-      /* Strip off all nops for the sake of the comparison.  This\n-\t is not quite the same as STRIP_NOPS.  It does more.\n-\t We must also strip off INDIRECT_EXPR for C++ reference\n-\t parameters.  */\n-      while (TREE_CODE (arg) == NOP_EXPR\n-\t     || TREE_CODE (arg) == CONVERT_EXPR\n-\t     || TREE_CODE (arg) == NON_LVALUE_EXPR\n-\t     || TREE_CODE (arg) == INDIRECT_REF)\n-\targ = TREE_OPERAND (arg, 0);\n-      if (arg != last_parm)\n-\twarning (\"second parameter of %<va_start%> not last named argument\");\n-    }\n-  else\n-    /* Evidently an out of date version of <stdarg.h>; can't validate\n-       va_start's second argument, but can still work as intended.  */\n-    warning (\"%<__builtin_next_arg%> called without an argument\");\n-\n+  /* Checking arguments is already done in fold_builtin_next_arg\n+     that must be called before this function.  */\n   return expand_binop (Pmode, add_optab,\n \t\t       current_function_internal_arg_pointer,\n \t\t       current_function_arg_offset_rtx,\n@@ -3867,15 +3837,11 @@ expand_builtin_va_start (tree arglist)\n       error (\"too few arguments to function %<va_start%>\");\n       return const0_rtx;\n     }\n-  if (TREE_CHAIN (chain))\n-    error (\"too many arguments to function %<va_start%>\");\n \n   if (fold_builtin_next_arg (chain))\n-    {\n-      return const0_rtx;\n-    }\n+    return const0_rtx;\n \n-  nextarg = expand_builtin_next_arg (chain);\n+  nextarg = expand_builtin_next_arg ();\n   valist = stabilize_va_list (TREE_VALUE (arglist), 1);\n \n #ifdef EXPAND_BUILTIN_VA_START\n@@ -5256,7 +5222,7 @@ expand_builtin (tree exp, rtx target, rtx subtarget, enum machine_mode mode,\n     case BUILT_IN_NEXT_ARG:\n       if (fold_builtin_next_arg (arglist))\n         return const0_rtx;\n-      return expand_builtin_next_arg (arglist);\n+      return expand_builtin_next_arg ();\n \n     case BUILT_IN_CLASSIFY_TYPE:\n       return expand_builtin_classify_type (arglist);\n@@ -8671,11 +8637,29 @@ fold_builtin_next_arg (tree arglist)\n       error (\"%<va_start%> used in function with fixed args\");\n       return true;\n     }\n-  else if (arglist)\n+  else if (!arglist)\n+    {\n+      /* Evidently an out of date version of <stdarg.h>; can't validate\n+\t va_start's second argument, but can still work as intended.  */\n+      warning (\"%<__builtin_next_arg%> called without an argument\");\n+      return true;\n+    }\n+  /* We use __builtin_va_start (ap, 0, 0) or __builtin_next_arg (0, 0)\n+     when we checked the arguments and if needed issued a warning.  */\n+  else if (!TREE_CHAIN (arglist)\n+           || !integer_zerop (TREE_VALUE (arglist))\n+           || !integer_zerop (TREE_VALUE (TREE_CHAIN (arglist)))\n+           || TREE_CHAIN (TREE_CHAIN (arglist)))\n     {\n       tree last_parm = tree_last (DECL_ARGUMENTS (current_function_decl));\n       tree arg = TREE_VALUE (arglist);\n \n+      if (TREE_CHAIN (arglist))\n+        {\n+          error (\"%<va_start%> used with too many arguments\");\n+          return true;\n+        }\n+\n       /* Strip off all nops for the sake of the comparison.  This\n \t is not quite the same as STRIP_NOPS.  It does more.\n \t We must also strip off INDIRECT_EXPR for C++ reference\n@@ -8692,17 +8676,15 @@ fold_builtin_next_arg (tree arglist)\n \t     argument.  We just warn and set the arg to be the last\n \t     argument so that we will get wrong-code because of\n \t     it.  */\n-\t  arg = last_parm;\n \t  warning (\"second parameter of %<va_start%> not last named argument\");\n \t}\n-      TREE_VALUE (arglist) = arg;\n-    }\n-  else\n-    {\n-      /* Evidently an out of date version of <stdarg.h>; can't validate\n-\t va_start's second argument, but can still work as intended.  */\n-      warning (\"%<__builtin_next_arg%> called without an argument\");\n-      return true;\n+      /* We want to verify the second parameter just once before the tree\n+         optimizers are run and then avoid keeping it in the tree,\n+         as otherwise we could warn even for correct code like:\n+         void foo (int i, ...)\n+         { va_list ap; i++; va_start (ap, i); va_end (ap); }  */\n+      TREE_VALUE (arglist) = integer_zero_node;\n+      TREE_CHAIN (arglist) = build_tree_list (NULL, integer_zero_node);\n     }\n   return false;\n }"}, {"sha": "e12f5389ac8c3daa5c7969801f0ed1c44d082e56", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8870e2121de6b86e33178bfc4646aa10bbe7069b/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8870e2121de6b86e33178bfc4646aa10bbe7069b/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=8870e2121de6b86e33178bfc4646aa10bbe7069b", "patch": "@@ -1,3 +1,8 @@\n+2005-01-07  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR tree-optimization/18828\n+\t* gcc.dg/20050105-2.c: New test.\n+\n 2005-01-07  Andreas Jaeger  <aj@suse.de>\n \n \t* gcc.dg/i386-local.c: Handle -m32/-m64 runs correctly."}, {"sha": "02ac1596b398bcf44e38875a82ec2ca9e3e32822", "filename": "gcc/testsuite/gcc.dg/20050105-2.c", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8870e2121de6b86e33178bfc4646aa10bbe7069b/gcc%2Ftestsuite%2Fgcc.dg%2F20050105-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8870e2121de6b86e33178bfc4646aa10bbe7069b/gcc%2Ftestsuite%2Fgcc.dg%2F20050105-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2F20050105-2.c?ref=8870e2121de6b86e33178bfc4646aa10bbe7069b", "patch": "@@ -0,0 +1,32 @@\n+/* PR tree-optimization/18828 */\n+/* { dg-do compile } */\n+/* { dg-options \"-O2\" } */\n+\n+#include <stdarg.h>\n+\n+extern void abort (void);\n+\n+void foo (int x, ...)\n+{\n+  va_list ap;\n+  if (x != 21)\n+    abort ();\n+  va_start (ap, x);\n+  va_end (ap);\n+}\n+\n+void bar (int x, ...)\n+{\n+  va_list ap;\n+  x++;\n+  va_start (ap, x);\n+  va_end (ap);\n+}\n+\n+void baz (int x, ...)\n+{\n+  va_list ap;\n+  x = 0;\n+  va_start (ap, x);\n+  va_end (ap);\n+}"}]}