{"sha": "d634e6088f139ee700d79ec73b1ad6436096a6ff", "node_id": "C_kwDOANBUbNoAKGQ2MzRlNjA4OGYxMzllZTcwMGQ3OWVjNzNiMWFkNjQzNjA5NmE2ZmY", "commit": {"author": {"name": "Kewen Lin", "email": "linkw@linux.ibm.com", "date": "2023-04-04T02:47:54Z"}, "committer": {"name": "Kewen Lin", "email": "linkw@linux.ibm.com", "date": "2023-04-04T05:11:54Z"}, "message": "rs6000: Fix vector_set_var_p9 by considering BE [PR108807]\n\nAs PR108807 exposes, the current handling in function\nrs6000_expand_vector_set_var_p9 doesn't take care of big\nendianness.  Currently the function is to rotate the\ntarget vector by moving element to-be-set to element 0,\nset element 0 with the given val, then rotate back.  To\nget the permutation control vector for the rotation, it\nmakes use of lvsr and lvsl, but the element ordering is\ndifferent for BE and LE (like element 0 is the most\nsignificant one on BE while the least significant one on\nLE), this patch is to add consideration for BE and make\nsure permutation control vectors for rotations are expected.\n\nAs tested, it helped to fix the below failures:\n\nFAIL: gcc.target/powerpc/pr79251-run.p9.c execution test\nFAIL: gcc.target/powerpc/pr89765-mc.c execution test\nFAIL: gcc.target/powerpc/vsx-builtin-10d.c execution test\nFAIL: gcc.target/powerpc/vsx-builtin-11d.c execution test\nFAIL: gcc.target/powerpc/vsx-builtin-14d.c execution test\nFAIL: gcc.target/powerpc/vsx-builtin-16d.c execution test\nFAIL: gcc.target/powerpc/vsx-builtin-18d.c execution test\nFAIL: gcc.target/powerpc/vsx-builtin-9d.c execution test\n\tPR target/108807\n\ngcc/ChangeLog:\n\n\t* config/rs6000/rs6000.cc (rs6000_expand_vector_set_var_p9): Fix gen\n\tfunction for permutation control vector by considering big endianness.", "tree": {"sha": "b50a65e5b3fc8c1504cd24dd7f7700d0679c2b1a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b50a65e5b3fc8c1504cd24dd7f7700d0679c2b1a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d634e6088f139ee700d79ec73b1ad6436096a6ff", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d634e6088f139ee700d79ec73b1ad6436096a6ff", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d634e6088f139ee700d79ec73b1ad6436096a6ff", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d634e6088f139ee700d79ec73b1ad6436096a6ff/comments", "author": {"login": "jedilyn", "id": 38515402, "node_id": "MDQ6VXNlcjM4NTE1NDAy", "avatar_url": "https://avatars.githubusercontent.com/u/38515402?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jedilyn", "html_url": "https://github.com/jedilyn", "followers_url": "https://api.github.com/users/jedilyn/followers", "following_url": "https://api.github.com/users/jedilyn/following{/other_user}", "gists_url": "https://api.github.com/users/jedilyn/gists{/gist_id}", "starred_url": "https://api.github.com/users/jedilyn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jedilyn/subscriptions", "organizations_url": "https://api.github.com/users/jedilyn/orgs", "repos_url": "https://api.github.com/users/jedilyn/repos", "events_url": "https://api.github.com/users/jedilyn/events{/privacy}", "received_events_url": "https://api.github.com/users/jedilyn/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jedilyn", "id": 38515402, "node_id": "MDQ6VXNlcjM4NTE1NDAy", "avatar_url": "https://avatars.githubusercontent.com/u/38515402?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jedilyn", "html_url": "https://github.com/jedilyn", "followers_url": "https://api.github.com/users/jedilyn/followers", "following_url": "https://api.github.com/users/jedilyn/following{/other_user}", "gists_url": "https://api.github.com/users/jedilyn/gists{/gist_id}", "starred_url": "https://api.github.com/users/jedilyn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jedilyn/subscriptions", "organizations_url": "https://api.github.com/users/jedilyn/orgs", "repos_url": "https://api.github.com/users/jedilyn/repos", "events_url": "https://api.github.com/users/jedilyn/events{/privacy}", "received_events_url": "https://api.github.com/users/jedilyn/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cdd2d6643f7fef40e335a7027edfea7276cde608", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cdd2d6643f7fef40e335a7027edfea7276cde608", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cdd2d6643f7fef40e335a7027edfea7276cde608"}], "stats": {"total": 52, "additions": 31, "deletions": 21}, "files": [{"sha": "3be5860dd9b90ccd75d1747e2d4de0a8365df922", "filename": "gcc/config/rs6000/rs6000.cc", "status": "modified", "additions": 31, "deletions": 21, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d634e6088f139ee700d79ec73b1ad6436096a6ff/gcc%2Fconfig%2Frs6000%2Frs6000.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d634e6088f139ee700d79ec73b1ad6436096a6ff/gcc%2Fconfig%2Frs6000%2Frs6000.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.cc?ref=d634e6088f139ee700d79ec73b1ad6436096a6ff", "patch": "@@ -7237,23 +7237,29 @@ rs6000_expand_vector_set_var_p9 (rtx target, rtx val, rtx idx)\n   machine_mode idx_mode = GET_MODE (idx);\n \n   machine_mode shift_mode;\n-  rtx (*gen_ashl)(rtx, rtx, rtx);\n-  rtx (*gen_lvsl)(rtx, rtx);\n-  rtx (*gen_lvsr)(rtx, rtx);\n+  /* Gen function pointers for shifting left and generation of permutation\n+     control vectors.  */\n+  rtx (*gen_ashl) (rtx, rtx, rtx);\n+  rtx (*gen_pcvr1) (rtx, rtx);\n+  rtx (*gen_pcvr2) (rtx, rtx);\n \n   if (TARGET_POWERPC64)\n     {\n       shift_mode = DImode;\n       gen_ashl = gen_ashldi3;\n-      gen_lvsl = gen_altivec_lvsl_reg_di;\n-      gen_lvsr = gen_altivec_lvsr_reg_di;\n+      gen_pcvr1 = BYTES_BIG_ENDIAN ? gen_altivec_lvsl_reg_di\n+\t\t\t\t   : gen_altivec_lvsr_reg_di;\n+      gen_pcvr2 = BYTES_BIG_ENDIAN ? gen_altivec_lvsr_reg_di\n+\t\t\t\t   : gen_altivec_lvsl_reg_di;\n     }\n   else\n     {\n       shift_mode = SImode;\n       gen_ashl = gen_ashlsi3;\n-      gen_lvsl = gen_altivec_lvsl_reg_si;\n-      gen_lvsr = gen_altivec_lvsr_reg_si;\n+      gen_pcvr1 = BYTES_BIG_ENDIAN ? gen_altivec_lvsl_reg_si\n+\t\t\t\t   : gen_altivec_lvsr_reg_si;\n+      gen_pcvr2 = BYTES_BIG_ENDIAN ? gen_altivec_lvsr_reg_si\n+\t\t\t\t   : gen_altivec_lvsl_reg_si;\n     }\n   /* Generate the IDX for permute shift, width is the vector element size.\n      idx = idx * width.  */\n@@ -7262,25 +7268,29 @@ rs6000_expand_vector_set_var_p9 (rtx target, rtx val, rtx idx)\n \n   emit_insn (gen_ashl (tmp, idx, GEN_INT (shift)));\n \n-  /*  lvsr    v1,0,idx.  */\n-  rtx pcvr = gen_reg_rtx (V16QImode);\n-  emit_insn (gen_lvsr (pcvr, tmp));\n-\n-  /*  lvsl    v2,0,idx.  */\n-  rtx pcvl = gen_reg_rtx (V16QImode);\n-  emit_insn (gen_lvsl (pcvl, tmp));\n+  /* Generate one permutation control vector used for rotating the element\n+     at to-insert position to element zero in target vector.  lvsl is\n+     used for big endianness while lvsr is used for little endianness:\n+     lvs[lr]    v1,0,idx.  */\n+  rtx pcvr1 = gen_reg_rtx (V16QImode);\n+  emit_insn (gen_pcvr1 (pcvr1, tmp));\n \n   rtx sub_target = simplify_gen_subreg (V16QImode, target, mode, 0);\n+  rtx perm1 = gen_altivec_vperm_v8hiv16qi (sub_target, sub_target, sub_target,\n+\t\t\t\t\t   pcvr1);\n+  emit_insn (perm1);\n \n-  rtx permr\n-    = gen_altivec_vperm_v8hiv16qi (sub_target, sub_target, sub_target, pcvr);\n-  emit_insn (permr);\n-\n+  /* Insert val into element 0 of target vector.  */\n   rs6000_expand_vector_set (target, val, const0_rtx);\n \n-  rtx perml\n-    = gen_altivec_vperm_v8hiv16qi (sub_target, sub_target, sub_target, pcvl);\n-  emit_insn (perml);\n+  /* Rotate back with a reversed permutation control vector generated from:\n+     lvs[rl]   v2,0,idx.  */\n+  rtx pcvr2 = gen_reg_rtx (V16QImode);\n+  emit_insn (gen_pcvr2 (pcvr2, tmp));\n+\n+  rtx perm2 = gen_altivec_vperm_v8hiv16qi (sub_target, sub_target, sub_target,\n+\t\t\t\t\t   pcvr2);\n+  emit_insn (perm2);\n }\n \n /* Insert VAL into IDX of TARGET, VAL size is same of the vector element, IDX"}]}