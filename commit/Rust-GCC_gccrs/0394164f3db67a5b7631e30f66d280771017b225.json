{"sha": "0394164f3db67a5b7631e30f66d280771017b225", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDM5NDE2NGYzZGI2N2E1Yjc2MzFlMzBmNjZkMjgwNzcxMDE3YjIyNQ==", "commit": {"author": {"name": "Philip Herron", "email": "philip.herron@embecosm.com", "date": "2020-12-03T14:00:54Z"}, "committer": {"name": "Philip Herron", "email": "herron.philip@googlemail.com", "date": "2020-12-03T16:36:05Z"}, "message": "Add failure tests to rust testsuite\n\nWe need to have test cases for when the compilation should xfail this will\nhelp add more tests for name/type resolutions. This is needed as there is\na large code changes on the horizon and this will help spot regressions.", "tree": {"sha": "2443d4f647c3d064c2ef2471a9847b0b95241121", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2443d4f647c3d064c2ef2471a9847b0b95241121"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0394164f3db67a5b7631e30f66d280771017b225", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0394164f3db67a5b7631e30f66d280771017b225", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0394164f3db67a5b7631e30f66d280771017b225", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0394164f3db67a5b7631e30f66d280771017b225/comments", "author": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "committer": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8993741f97ca3426e22a740070b9a413dcb2fe04", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8993741f97ca3426e22a740070b9a413dcb2fe04", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8993741f97ca3426e22a740070b9a413dcb2fe04"}], "stats": {"total": 64, "additions": 39, "deletions": 25}, "files": [{"sha": "614c67d6f3c5ac7d334d6d41a01cde25bcab6747", "filename": "gcc/testsuite/rust.test/compilable/type_infer2.rs", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0394164f3db67a5b7631e30f66d280771017b225/gcc%2Ftestsuite%2Frust.test%2Fcompilable%2Ftype_infer2.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0394164f3db67a5b7631e30f66d280771017b225/gcc%2Ftestsuite%2Frust.test%2Fcompilable%2Ftype_infer2.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust.test%2Fcompilable%2Ftype_infer2.rs?ref=0394164f3db67a5b7631e30f66d280771017b225", "patch": "@@ -0,0 +1,8 @@\n+fn test(x: i32) -> i32 {\n+    return x + 1;\n+}\n+\n+fn main() {\n+    let an_integer = 5;\n+    let call_test = test(an_integer + 1);\n+}"}, {"sha": "797f1ca91c921ab76cc54c428f0f85be4d9b75d2", "filename": "gcc/testsuite/rust.test/fail_compilation/arrays1.rs", "status": "added", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0394164f3db67a5b7631e30f66d280771017b225/gcc%2Ftestsuite%2Frust.test%2Ffail_compilation%2Farrays1.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0394164f3db67a5b7631e30f66d280771017b225/gcc%2Ftestsuite%2Frust.test%2Ffail_compilation%2Farrays1.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust.test%2Ffail_compilation%2Farrays1.rs?ref=0394164f3db67a5b7631e30f66d280771017b225", "patch": "@@ -0,0 +1,4 @@\n+fn main() {\n+    let xs: [i32; 5] = [1, 2, 3, 4, 5];\n+    let a: bool = xs[0];\n+}"}, {"sha": "9ecf322db19ec297f5fc1fdc8fb0bd200eaae395", "filename": "gcc/testsuite/rust.test/fail_compilation/arrays2.rs", "status": "added", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0394164f3db67a5b7631e30f66d280771017b225/gcc%2Ftestsuite%2Frust.test%2Ffail_compilation%2Farrays2.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0394164f3db67a5b7631e30f66d280771017b225/gcc%2Ftestsuite%2Frust.test%2Ffail_compilation%2Farrays2.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust.test%2Ffail_compilation%2Farrays2.rs?ref=0394164f3db67a5b7631e30f66d280771017b225", "patch": "@@ -0,0 +1,3 @@\n+fn main() {\n+    let array: [i32; 5] = [1, 2, 3];\n+}"}, {"sha": "83e16f31f967199a4dce1123c9085f31fd92a782", "filename": "gcc/testsuite/rust.test/fail_compilation/bad_type1.rs", "status": "added", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0394164f3db67a5b7631e30f66d280771017b225/gcc%2Ftestsuite%2Frust.test%2Ffail_compilation%2Fbad_type1.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0394164f3db67a5b7631e30f66d280771017b225/gcc%2Ftestsuite%2Frust.test%2Ffail_compilation%2Fbad_type1.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust.test%2Ffail_compilation%2Fbad_type1.rs?ref=0394164f3db67a5b7631e30f66d280771017b225", "patch": "@@ -0,0 +1,3 @@\n+fn main() {\n+    let logical: bool = 123;\n+}"}, {"sha": "5578c279c00f4d78445fd19111332559de4ff084", "filename": "gcc/testsuite/rust.test/fail_compilation/func1.rs", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0394164f3db67a5b7631e30f66d280771017b225/gcc%2Ftestsuite%2Frust.test%2Ffail_compilation%2Ffunc1.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0394164f3db67a5b7631e30f66d280771017b225/gcc%2Ftestsuite%2Frust.test%2Ffail_compilation%2Ffunc1.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust.test%2Ffail_compilation%2Ffunc1.rs?ref=0394164f3db67a5b7631e30f66d280771017b225", "patch": "@@ -0,0 +1,9 @@\n+fn test(x: i32) -> bool {\n+    return x + 1;\n+}\n+\n+fn main() {\n+    let an_integer = 5;\n+\n+    let call_test = test(1);\n+}"}, {"sha": "cc324548892ccfae4c30a1f5384dfb20df0c2bec", "filename": "gcc/testsuite/rust.test/rust-test.exp", "status": "modified", "additions": 12, "deletions": 25, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0394164f3db67a5b7631e30f66d280771017b225/gcc%2Ftestsuite%2Frust.test%2Frust-test.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0394164f3db67a5b7631e30f66d280771017b225/gcc%2Ftestsuite%2Frust.test%2Frust-test.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust.test%2Frust-test.exp?ref=0394164f3db67a5b7631e30f66d280771017b225", "patch": "@@ -310,23 +310,11 @@ proc dmd2dg { base test } {\n \t}\n \n \tcompilable {\n-\t    set out_line \"// { dg-final { output-exists } }\"\n-\t    puts $fdout $out_line\n-\n-\t    # Check that Ddoc tests also generate a html file.\n-\t    if [regexp -- \"ddoc.*\" $name] {\n-\t\tset ddocfile \"[file rootname $name].html\"\n-\t\tset out_line \"// { dg-final { scan-file $ddocfile \\\"Generated by Ddoc from $test\\\" } }\"\n-\t\tputs $fdout $out_line\n-\t\t# Cleanup extra generated files.\n-\t\tset out_line \"// { dg-final { file delete $ddocfile } }\"\n-\t\tputs $fdout $out_line\n-\t    }\n+\t    puts $fdout \"// { dg-final { output-exists } }\"\n \t}\n \n \tfail_compilation {\n-\t    set out_line \"// { dg-final { output-exists-not } }\"\n-\t    puts $fdout $out_line\n+\t    puts $fdout \"// { dg-do run { xfail *-*-* } }\"\n \t}\n     }\n \n@@ -336,6 +324,7 @@ proc dmd2dg { base test } {\n     return $test\n }\n \n+\n proc rust-permute-options { options } {\n     set result { }\n     set n [expr 1<<[llength $options]]\n@@ -395,11 +384,6 @@ proc rust-do-test { } {\n     foreach test [lsort [find $srcdir/$subdir *]] {\n \tregexp -- \"(.*)/(.+)/(.+)\\.rs$\" $test match base dir name ext\n \tset ext \"rs\"\n-\t\n-\t# Skip invalid test directory\n-\tif { [lsearch \"compilable\" $dir] == -1 } {\n-\t    continue\n-\t}\n \n \t# Skip invalid test extensions\n \tif { [lsearch \"rs\" $ext] == -1 } {\n@@ -421,12 +405,15 @@ proc rust-do-test { } {\n \t    compilable {\n \t\tfor { set i 0 } { $i<[llength $options] } { incr i } {\n \t\t    set flags [lindex $options $i]\n-\t\t    # Compilable test may require checking another kind of output file.\n-\t\t    if [regexp -- \"ddoc.*\" $name] {\n-\t\t\tset dg-do-what-default \"compile\"\n-\t\t    } else {\n-\t\t\tset dg-do-what-default \"assemble\"\n-\t\t    }\n+\t\t    set dg-do-what-default \"compile\"\n+\t\t    rust-dg-runtest $filename $flags $imports\n+\t\t}\n+\t    }\n+\n+\t    fail_compilation {\n+\t\tfor { set i 0 } { $i<[llength $options] } { incr i } {\n+\t\t    set flags [lindex $options $i]\n+\t\t    set dg-do-what-default \"compile\"\n \t\t    rust-dg-runtest $filename $flags $imports\n \t\t}\n \t    }"}]}