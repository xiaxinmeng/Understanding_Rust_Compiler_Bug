{"sha": "ff1912238e28ed204570e0d33d3c3517491caf0f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmYxOTEyMjM4ZTI4ZWQyMDQ1NzBlMGQzM2QzYzM1MTc0OTFjYWYwZg==", "commit": {"author": {"name": "Richard Sandiford", "email": "richard.sandiford@arm.com", "date": "2021-04-15T15:18:25Z"}, "committer": {"name": "Richard Sandiford", "email": "richard.sandiford@arm.com", "date": "2021-04-15T15:18:25Z"}, "message": "Make SVE tests work with --with-cpu\n\nA lot of the SVE assembly tests are for generic-tuned SVE codegen\nand so can fail when run on a toolchain configured with --with-cpu.\n\nThis could easily be solved by forcing -mtune=generic, like we already\ndo for -moverride=tune=none.  However, the testsuite also has some\nuseful execution tests that it would be better to run with as\nfew flag changes as possible.  Also, the flags in $sve_flags are\nprinted as part of the test results, so each change to $sve_flags\nresults in a change to the test summaries.\n\nThis patch instead intercepts dg-options and tailors the list\nof additional options based on what the test is trying to do.\nIt also gets rid of DEFAULT_CFLAGS, which are never useful\nfor these tests.\n\ngcc/testsuite/\n\t* lib/gcc-defs.exp (aarch64-arch-dg-options): New procedure.\n\t(aarch64-with-arch-dg-options): Likewise.\n\t* g++.target/aarch64/sve/aarch64-sve.exp: Run the tests inside\n\taarch64-with-arch-dg-options.  Move the default architecture\n\tflags to the final dg-runtest argument.\n\t* gcc.target/aarch64/sve/aarch64-sve.exp: Likewise.  Dispense with\n\tDEFAULT_CFLAGS.\n\t* gcc.target/aarch64/sve2/aarch64-sve2.exp: Likewise.", "tree": {"sha": "80ed862234e6734a0ac85df7010f00ad68f9a4aa", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/80ed862234e6734a0ac85df7010f00ad68f9a4aa"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ff1912238e28ed204570e0d33d3c3517491caf0f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ff1912238e28ed204570e0d33d3c3517491caf0f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ff1912238e28ed204570e0d33d3c3517491caf0f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ff1912238e28ed204570e0d33d3c3517491caf0f/comments", "author": {"login": "rsandifo-arm", "id": 28043039, "node_id": "MDQ6VXNlcjI4MDQzMDM5", "avatar_url": "https://avatars.githubusercontent.com/u/28043039?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo-arm", "html_url": "https://github.com/rsandifo-arm", "followers_url": "https://api.github.com/users/rsandifo-arm/followers", "following_url": "https://api.github.com/users/rsandifo-arm/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo-arm/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo-arm/orgs", "repos_url": "https://api.github.com/users/rsandifo-arm/repos", "events_url": "https://api.github.com/users/rsandifo-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo-arm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rsandifo-arm", "id": 28043039, "node_id": "MDQ6VXNlcjI4MDQzMDM5", "avatar_url": "https://avatars.githubusercontent.com/u/28043039?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo-arm", "html_url": "https://github.com/rsandifo-arm", "followers_url": "https://api.github.com/users/rsandifo-arm/followers", "following_url": "https://api.github.com/users/rsandifo-arm/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo-arm/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo-arm/orgs", "repos_url": "https://api.github.com/users/rsandifo-arm/repos", "events_url": "https://api.github.com/users/rsandifo-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo-arm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ca7d451d985b31a0b593b50115971e70ae0767da", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ca7d451d985b31a0b593b50115971e70ae0767da", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ca7d451d985b31a0b593b50115971e70ae0767da"}], "stats": {"total": 105, "additions": 76, "deletions": 29}, "files": [{"sha": "2b8502322292ad61983128b416abd916454e6ec1", "filename": "gcc/testsuite/g++.target/aarch64/sve/aarch64-sve.exp", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ff1912238e28ed204570e0d33d3c3517491caf0f/gcc%2Ftestsuite%2Fg%2B%2B.target%2Faarch64%2Fsve%2Faarch64-sve.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ff1912238e28ed204570e0d33d3c3517491caf0f/gcc%2Ftestsuite%2Fg%2B%2B.target%2Faarch64%2Fsve%2Faarch64-sve.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Faarch64%2Fsve%2Faarch64-sve.exp?ref=ff1912238e28ed204570e0d33d3c3517491caf0f", "patch": "@@ -38,12 +38,10 @@ if { [check_effective_target_aarch64_sve] } {\n     set sve_flags \"-march=armv8.2-a+sve\"\n }\n \n-# Turn off any codegen tweaks by default that may affect expected assembly.\n-# Tests relying on those should turn them on explicitly.\n-set sve_flags \"$sve_flags -moverride=tune=none\"\n-\n-# Main loop.\n-dg-runtest [lsort [glob -nocomplain $srcdir/$subdir/*.C]] $sve_flags \"\"\n+aarch64-with-arch-dg-options $sve_flags {\n+    # Main loop.\n+    dg-runtest [lsort [glob -nocomplain $srcdir/$subdir/*.C]] \"\" $sve_flags\n+}\n \n # All done.\n dg-finish"}, {"sha": "439a012ce43b7f6619d29ef38cc60da58bcef9e5", "filename": "gcc/testsuite/gcc.target/aarch64/sve/aarch64-sve.exp", "status": "modified", "additions": 5, "deletions": 14, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ff1912238e28ed204570e0d33d3c3517491caf0f/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Faarch64-sve.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ff1912238e28ed204570e0d33d3c3517491caf0f/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Faarch64-sve.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Faarch64-sve.exp?ref=ff1912238e28ed204570e0d33d3c3517491caf0f", "patch": "@@ -28,26 +28,15 @@ if {![istarget aarch64*-*-*] } then {\n # Load support procs.\n load_lib gcc-dg.exp\n \n-# If a testcase doesn't have special options, use these.\n-global DEFAULT_CFLAGS\n-if ![info exists DEFAULT_CFLAGS] then {\n-    set DEFAULT_CFLAGS \" -ansi -pedantic-errors\"\n-}\n-\n # Initialize `dg'.\n dg-init\n \n-# Force SVE if we're not testing it already.\n if { [check_effective_target_aarch64_sve] } {\n     set sve_flags \"\"\n } else {\n     set sve_flags \"-march=armv8.2-a+sve\"\n }\n \n-# Turn off any codegen tweaks by default that may affect expected assembly.\n-# Tests relying on those should turn them on explicitly.\n-set sve_flags \"$sve_flags -moverride=tune=none\"\n-\n # Most of the code-quality tests are written for LP64.  Just do the\n # correctness tests for ILP32.\n if { [check_effective_target_ilp32] } {\n@@ -56,9 +45,11 @@ if { [check_effective_target_ilp32] } {\n     set pattern \"*\"\n }\n \n-# Main loop.\n-dg-runtest [lsort [glob -nocomplain $srcdir/$subdir/$pattern.\\[cCS\\]]] \\\n-    $sve_flags $DEFAULT_CFLAGS\n+aarch64-with-arch-dg-options $sve_flags {\n+    # Main loop.\n+    dg-runtest [lsort [glob -nocomplain $srcdir/$subdir/$pattern.\\[cCS\\]]] \\\n+\t\"\" $sve_flags\n+}\n \n # All done.\n dg-finish"}, {"sha": "28d61555ff28cf9966f7af9f67ee807310423b6b", "filename": "gcc/testsuite/gcc.target/aarch64/sve2/aarch64-sve2.exp", "status": "modified", "additions": 5, "deletions": 9, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ff1912238e28ed204570e0d33d3c3517491caf0f/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve2%2Faarch64-sve2.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ff1912238e28ed204570e0d33d3c3517491caf0f/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve2%2Faarch64-sve2.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve2%2Faarch64-sve2.exp?ref=ff1912238e28ed204570e0d33d3c3517491caf0f", "patch": "@@ -28,12 +28,6 @@ if {![istarget aarch64*-*-*] } then {\n # Load support procs.\n load_lib gcc-dg.exp\n \n-# If a testcase doesn't have special options, use these.\n-global DEFAULT_CFLAGS\n-if ![info exists DEFAULT_CFLAGS] then {\n-    set DEFAULT_CFLAGS \" -ansi -pedantic-errors\"\n-}\n-\n # Initialize `dg'.\n dg-init\n \n@@ -44,9 +38,11 @@ if { [check_effective_target_aarch64_sve2] } {\n     set sve2_flags \"-march=armv8.5-a+sve2\"\n }\n \n-# Main loop.\n-dg-runtest [lsort [glob -nocomplain $srcdir/$subdir/*.\\[cCS\\]]] \\\n-    $sve2_flags $DEFAULT_CFLAGS\n+aarch64-with-arch-dg-options $sve2_flags {\n+    # Main loop.\n+    dg-runtest [lsort [glob -nocomplain $srcdir/$subdir/*.\\[cCS\\]]] \\\n+\t\"\" $sve2_flags\n+}\n \n # All done.\n dg-finish"}, {"sha": "e9119f02d65b9472955537a9d90bda00e0beb43c", "filename": "gcc/testsuite/lib/gcc-defs.exp", "status": "modified", "additions": 62, "deletions": 0, "changes": 62, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ff1912238e28ed204570e0d33d3c3517491caf0f/gcc%2Ftestsuite%2Flib%2Fgcc-defs.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ff1912238e28ed204570e0d33d3c3517491caf0f/gcc%2Ftestsuite%2Flib%2Fgcc-defs.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Flib%2Fgcc-defs.exp?ref=ff1912238e28ed204570e0d33d3c3517491caf0f", "patch": "@@ -506,3 +506,65 @@ proc dg-check-dot { args } {\n \n     pass \"$testcase dg-check-dot $dotfile\"\n }\n+\n+# Used by aarch64-with-arch-dg-options to intercept dg-options and make\n+# the changes required.  See there for details.\n+proc aarch64-arch-dg-options { args } {\n+    upvar dg-do-what do_what\n+    global aarch64_default_testing_arch\n+\n+    set add_arch 1\n+    set add_tune 1\n+    set checks_output [string equal [lindex $do_what 0] \"compile\"]\n+    set options [lindex $args 1]\n+\n+    foreach option [split $options] {\n+\tswitch -glob -- $option {\n+\t    -march=* { set add_arch 0 }\n+\t    -mcpu=* { set add_arch 0; set add_tune 0 }\n+\t    -mtune=* { set add_tune 0 }\n+\t    -moverride=* { set add_tune 0 }\n+\t    -save-temps { set checks_output 1 }\n+\t    --save-temps { set checks_output 1 }\n+\t    -fdump* { set checks_output 1 }\n+\t}\n+    }\n+\n+    if { $add_arch && ![string equal $aarch64_default_testing_arch \"\"] } {\n+\t# Force SVE if we're not testing it already.\n+\tappend options \" $aarch64_default_testing_arch\"\n+    }\n+\n+    if { $add_tune && $checks_output } {\n+\t# Turn off any default tuning and codegen tweaks.\n+\tappend options \" -mtune=generic -moverride=tune=none\"\n+    }\n+\n+    uplevel 1 aarch64-old-dg-options [lreplace $args 1 1 $options]\n+}\n+\n+# Run Tcl code CODE with dg-options modified to work better for some\n+# AArch64 tests.  In particular:\n+#\n+# - If the dg-options do not specify an -march or -mcpu option,\n+#   use the architecture options in ARCH (which might be empty).\n+#\n+# - If the dg-options do not specify an -mcpu, -mtune or -moverride option,\n+#   and if the test appears to be checking assembly or dump output,\n+#   force the test to use generic tuning.\n+#\n+# The idea is to handle toolchains that are configured with a default\n+# CPU or architecture that's different from the norm.\n+proc aarch64-with-arch-dg-options { arch code } {\n+    global aarch64_default_testing_arch\n+\n+    set aarch64_default_testing_arch $arch\n+\n+    rename dg-options aarch64-old-dg-options\n+    rename aarch64-arch-dg-options dg-options\n+\n+    uplevel 1 $code\n+\n+    rename dg-options aarch64-arch-dg-options\n+    rename aarch64-old-dg-options dg-options\n+}"}]}