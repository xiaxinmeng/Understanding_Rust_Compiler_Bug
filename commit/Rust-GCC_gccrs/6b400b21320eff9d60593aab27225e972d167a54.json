{"sha": "6b400b21320eff9d60593aab27225e972d167a54", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmI0MDBiMjEzMjBlZmY5ZDYwNTkzYWFiMjcyMjVlOTcyZDE2N2E1NA==", "commit": {"author": {"name": "Mark Mitchell", "email": "mark@codesourcery.com", "date": "1999-04-15T19:21:21Z"}, "committer": {"name": "Mark Mitchell", "email": "mmitchel@gcc.gnu.org", "date": "1999-04-15T19:21:21Z"}, "message": "cp-tree.h (lookup_nested_field): Remove.\n\n\t* cp-tree.h (lookup_nested_field): Remove.\n\t* class.c (push_nested_class): Handle UNION_TYPEs.\n\t(pop_nested_class): Likewise.\n\t* decl.c (lookup_name_real): Don't call lookup_nested_field.\n\t(start_decl): Use push_nested_class, not just pushclass.\n\t(cp_finish_decl): Use pop_nested_class, not just popclass.\n\t* search.c (lookup_nested_field): Remove.\n\nFrom-SVN: r26476", "tree": {"sha": "a52f77a104060d167a13082ea8b19035d0ce7011", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a52f77a104060d167a13082ea8b19035d0ce7011"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6b400b21320eff9d60593aab27225e972d167a54", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6b400b21320eff9d60593aab27225e972d167a54", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6b400b21320eff9d60593aab27225e972d167a54", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6b400b21320eff9d60593aab27225e972d167a54/comments", "author": null, "committer": null, "parents": [{"sha": "3d7de1fa03bd7dd6c5b9826cb14ea4db2ea03c6c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3d7de1fa03bd7dd6c5b9826cb14ea4db2ea03c6c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3d7de1fa03bd7dd6c5b9826cb14ea4db2ea03c6c"}], "stats": {"total": 99, "additions": 26, "deletions": 73}, "files": [{"sha": "cdcb7b574578fb16d99bf5c57f6f219b9cba940a", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6b400b21320eff9d60593aab27225e972d167a54/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6b400b21320eff9d60593aab27225e972d167a54/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=6b400b21320eff9d60593aab27225e972d167a54", "patch": "@@ -1,5 +1,13 @@\n 1999-04-15  Mark Mitchell  <mark@codesourcery.com>\n \n+\t* cp-tree.h (lookup_nested_field): Remove.\n+\t* class.c (push_nested_class): Handle UNION_TYPEs.\n+\t(pop_nested_class): Likewise.\n+\t* decl.c (lookup_name_real): Don't call lookup_nested_field.\n+\t(start_decl): Use push_nested_class, not just pushclass.\n+\t(cp_finish_decl): Use pop_nested_class, not just popclass.\n+\t* search.c (lookup_nested_field): Remove.\n+\t\n \t* cp-tree.h (lang_type): Add documentation.\n \t* decl2.c (handle_class_head): Create template declarations here,\n \tas appropriate."}, {"sha": "4d970f5d6f2f91c44a264d7ebaa823c1518277df", "filename": "gcc/cp/class.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6b400b21320eff9d60593aab27225e972d167a54/gcc%2Fcp%2Fclass.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6b400b21320eff9d60593aab27225e972d167a54/gcc%2Fcp%2Fclass.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fclass.c?ref=6b400b21320eff9d60593aab27225e972d167a54", "patch": "@@ -4617,7 +4617,7 @@ push_nested_class (type, modify)\n   \n   context = DECL_CONTEXT (TYPE_MAIN_DECL (type));\n \n-  if (context && TREE_CODE (context) == RECORD_TYPE)\n+  if (context && CLASS_TYPE_P (context))\n     push_nested_class (context, 2);\n   pushclass (type, modify);\n }\n@@ -4630,7 +4630,7 @@ pop_nested_class ()\n   tree context = DECL_CONTEXT (TYPE_MAIN_DECL (current_class_type));\n \n   popclass ();\n-  if (context && TREE_CODE (context) == RECORD_TYPE)\n+  if (context && CLASS_TYPE_P (context))\n     pop_nested_class ();\n }\n "}, {"sha": "dcfdeb380212e111a946dd9a79063dccf2d57488", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6b400b21320eff9d60593aab27225e972d167a54/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6b400b21320eff9d60593aab27225e972d167a54/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=6b400b21320eff9d60593aab27225e972d167a54", "patch": "@@ -3189,7 +3189,6 @@ extern tree get_binfo\t\t\t\tPROTO((tree, tree, int));\n extern int get_base_distance\t\t\tPROTO((tree, tree, int, tree *));\n extern int accessible_p                         PROTO((tree, tree));\n extern tree lookup_field\t\t\tPROTO((tree, tree, int, int));\n-extern tree lookup_nested_field\t\t\tPROTO((tree, int));\n extern int lookup_fnfields_1                    PROTO((tree, tree));\n extern tree lookup_fnfields\t\t\tPROTO((tree, tree, int));\n extern tree lookup_member\t\t\tPROTO((tree, tree, int, int));"}, {"sha": "163c3d75ef7e272e8ba19bfea353d6ec5386c9b3", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6b400b21320eff9d60593aab27225e972d167a54/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6b400b21320eff9d60593aab27225e972d167a54/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=6b400b21320eff9d60593aab27225e972d167a54", "patch": "@@ -5643,10 +5643,6 @@ lookup_name_real (name, prefer_type, nonclass, namespaces_only)\n \t}\n     }\n \n-  /* The name might be from an enclosing class of the current scope.  */\n-  if (!val && !nonclass && current_class_type)\n-    val = qualify_lookup (lookup_nested_field (name, !yylex), flags);\n-  \n   /* If we found a type from a dependent base class (using the\n      implicit typename extension) make sure that there's not some\n      global name which should be chosen instead.  */\n@@ -7135,7 +7131,7 @@ start_decl (declarator, declspecs, initialized, attributes, prefix_attributes)\n \n   if (context && TYPE_SIZE (complete_type (context)) != NULL_TREE)\n     {\n-      pushclass (context, 2);\n+      push_nested_class (context, 2);\n \n       if (TREE_CODE (decl) == VAR_DECL)\n \t{\n@@ -8176,7 +8172,7 @@ cp_finish_decl (decl, init, asmspec_tree, need_pop, flags)\n \t       the binding level..  */\n \t    && TYPE_SIZE (context) != NULL_TREE\n \t    && context == current_class_type)\n-\t  popclass ();\n+\t  pop_nested_class ();\n       }\n     }\n "}, {"sha": "c061d72dca60e7787a64bb03fe4e58debc0acac4", "filename": "gcc/cp/search.c", "status": "modified", "additions": 0, "deletions": 64, "changes": 64, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6b400b21320eff9d60593aab27225e972d167a54/gcc%2Fcp%2Fsearch.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6b400b21320eff9d60593aab27225e972d167a54/gcc%2Fcp%2Fsearch.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fsearch.c?ref=6b400b21320eff9d60593aab27225e972d167a54", "patch": "@@ -1485,70 +1485,6 @@ lookup_fnfields (xbasetype, name, protect)\n   return rval;\n }\n \n-/* Try to find NAME inside a nested class.  */\n-\n-tree\n-lookup_nested_field (name, complain)\n-     tree name;\n-     int complain;\n-{\n-  register tree t;\n-\n-  tree id = NULL_TREE;\n-  if (TYPE_MAIN_DECL (current_class_type))\n-    {\n-      /* Climb our way up the nested ladder, seeing if we're trying to\n-\t modify a field in an enclosing class.  If so, we should only\n-\t be able to modify if it's static.  */\n-      for (t = TYPE_MAIN_DECL (current_class_type);\n-\t   t && DECL_CONTEXT (t);\n-\t   t = TYPE_MAIN_DECL (DECL_CONTEXT (t)))\n-\t{\n-\t  if (TREE_CODE (DECL_CONTEXT (t)) != RECORD_TYPE)\n-\t    break;\n-\n-\t  /* N.B.: lookup_field will do the access checking for us */\n-\t  id = lookup_field (DECL_CONTEXT (t), name, complain, 0);\n-\t  if (id == error_mark_node)\n-\t    {\n-\t      id = NULL_TREE;\n-\t      continue;\n-\t    }\n-\n-\t  if (id != NULL_TREE)\n-\t    {\n-\t      if (TREE_CODE (id) == FIELD_DECL\n-\t\t  && ! TREE_STATIC (id)\n-\t\t  && TREE_TYPE (id) != error_mark_node)\n-\t\t{\n-\t\t  if (complain)\n-\t\t    {\n-\t\t      /* At parse time, we don't want to give this error, since\n-\t\t\t we won't have enough state to make this kind of\n-\t\t\t decision properly.  But there are times (e.g., with\n-\t\t\t enums in nested classes) when we do need to call\n-\t\t\t this fn at parse time.  So, in those cases, we pass\n-\t\t\t complain as a 0 and just return a NULL_TREE.  */\n-\t\t      cp_error (\"assignment to non-static member `%D' of enclosing class `%T'\",\n-\t\t\t\tid, DECL_CONTEXT (t));\n-\t\t      /* Mark this for do_identifier().  It would otherwise\n-\t\t\t claim that the variable was undeclared.  */\n-\t\t      TREE_TYPE (id) = error_mark_node;\n-\t\t    }\n-\t\t  else\n-\t\t    {\n-\t\t      id = NULL_TREE;\n-\t\t      continue;\n-\t\t    }\n-\t\t}\n-\t      break;\n-\t    }\n-\t}\n-    }\n-\n-  return id;\n-}\n-\n /* TYPE is a class type. Return the index of the fields within\n    the method vector with name NAME, or -1 is no such field exists.  */\n "}, {"sha": "5c81c44815a1008b758cfcb75a7a4f1ef0cff6e1", "filename": "gcc/testsuite/g++.old-deja/g++.other/lookup14.C", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6b400b21320eff9d60593aab27225e972d167a54/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.other%2Flookup14.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6b400b21320eff9d60593aab27225e972d167a54/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.other%2Flookup14.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.other%2Flookup14.C?ref=6b400b21320eff9d60593aab27225e972d167a54", "patch": "@@ -0,0 +1,14 @@\n+// Build don't link:\n+// Origin: Mark Mitchell <mark@codesourcery.com>\n+\n+union U {\n+  typedef int I;\n+\n+  struct S {\n+    void f();\n+  };\n+};\n+\n+void U::S::f() {\n+  I i;\n+}"}]}