{"sha": "d319517e809ee50496db29e552f86a83a14c837c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDMxOTUxN2U4MDllZTUwNDk2ZGIyOWU1NTJmODZhODNhMTRjODM3Yw==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2021-06-08T13:56:57Z"}, "committer": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2021-06-08T14:01:06Z"}, "message": "libstdc++: Finish implementing LWG 3413 for propagate_const\n\nWe already have conditional noexcept so this just constrains the\nnon-member swap overload.\n\nSigned-off-by: Jonathan Wakely <jwakely@redhat.com>\n\nlibstdc++-v3/ChangeLog:\n\n\t* include/experimental/propagate_const (swap): Constrain.\n\t* testsuite/experimental/propagate_const/swap/lwg3413.cc: New test.", "tree": {"sha": "eb7f646279de62312995493d391e8fc95b82c621", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/eb7f646279de62312995493d391e8fc95b82c621"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d319517e809ee50496db29e552f86a83a14c837c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d319517e809ee50496db29e552f86a83a14c837c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d319517e809ee50496db29e552f86a83a14c837c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d319517e809ee50496db29e552f86a83a14c837c/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7a56d3d3e99cc77ad8a6a674870c814da6225675", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7a56d3d3e99cc77ad8a6a674870c814da6225675", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7a56d3d3e99cc77ad8a6a674870c814da6225675"}], "stats": {"total": 49, "additions": 48, "deletions": 1}, "files": [{"sha": "162b4783dd7ac02b3e2d504cff917bc4d315297d", "filename": "libstdc++-v3/include/experimental/propagate_const", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d319517e809ee50496db29e552f86a83a14c837c/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Fpropagate_const", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d319517e809ee50496db29e552f86a83a14c837c/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Fpropagate_const", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Fpropagate_const?ref=d319517e809ee50496db29e552f86a83a14c837c", "patch": "@@ -113,20 +113,23 @@ inline namespace fundamentals_v2\n       constexpr propagate_const() = default;\n       propagate_const(const propagate_const& __p) = delete;\n       constexpr propagate_const(propagate_const&& __p) = default;\n+\n       template <typename _Up, typename\n \t\tenable_if<__and_<is_constructible<_Tp, _Up&&>,\n \t\t\t\t is_convertible<_Up&&, _Tp>>::value, bool\n \t\t\t  >::type=true>\n       constexpr propagate_const(propagate_const<_Up>&& __pu)\n \t: _M_t(std::move(get_underlying(__pu)))\n       {}\n+\n       template <typename _Up, typename\n \t\tenable_if<__and_<is_constructible<_Tp, _Up&&>,\n \t\t\t\t __not_<is_convertible<_Up&&, _Tp>>>::value,\n \t\t\t  bool>::type=false>\n       constexpr explicit propagate_const(propagate_const<_Up>&& __pu)\n \t: _M_t(std::move(get_underlying(__pu)))\n       {}\n+\n       template <typename _Up, typename\n \t\tenable_if<__and_<is_constructible<_Tp, _Up&&>,\n \t\t\t\t is_convertible<_Up&&, _Tp>,\n@@ -136,6 +139,7 @@ inline namespace fundamentals_v2\n       constexpr propagate_const(_Up&& __u)\n \t: _M_t(std::forward<_Up>(__u))\n       {}\n+\n       template <typename _Up, typename\n \t\tenable_if<__and_<is_constructible<_Tp, _Up&&>,\n \t\t\t\t __not_<is_convertible<_Up&&, _Tp>>,\n@@ -399,8 +403,10 @@ inline namespace fundamentals_v2\n     }\n \n   // [propagate_const.algorithms], specialized algorithms\n+  // _GLIBCXX_RESOLVE_LIB_DEFECTS\n+  // 3413. propagate_const's swap [...] needs to be constrained and use a trait\n   template <typename _Tp>\n-    constexpr void\n+    constexpr enable_if_t<__is_swappable<_Tp>::value, void>\n     swap(propagate_const<_Tp>& __pt, propagate_const<_Tp>& __pt2)\n       noexcept(__is_nothrow_swappable<_Tp>::value)\n     {"}, {"sha": "8dc13cfebdd4e01cace0db88f130b8b5e4610b7f", "filename": "libstdc++-v3/testsuite/experimental/propagate_const/swap/lwg3413.cc", "status": "added", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d319517e809ee50496db29e552f86a83a14c837c/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fpropagate_const%2Fswap%2Flwg3413.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d319517e809ee50496db29e552f86a83a14c837c/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fpropagate_const%2Fswap%2Flwg3413.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fpropagate_const%2Fswap%2Flwg3413.cc?ref=d319517e809ee50496db29e552f86a83a14c837c", "patch": "@@ -0,0 +1,41 @@\n+// { dg-do compile { target c++14 } }\n+\n+// LWG 3413\n+// propagate_const's swap's noexcept specification needs to be constrained\n+// and use a trait\n+\n+#include <experimental/propagate_const>\n+\n+using std::experimental::propagate_const;\n+\n+propagate_const<int*> i;\n+static_assert( noexcept(i.swap(i)), \"member swap is noexcept\" );\n+static_assert( noexcept(swap(i, i)), \"non-member swap is noexcept\" );\n+\n+struct P\n+{\n+  int i = 0;\n+  int& operator*() const;\n+};\n+\n+void swap(P&, P&) noexcept(false);\n+\n+propagate_const<P> p;\n+static_assert( ! noexcept(p.swap(p)), \"member swap is conditionally noexcept\" );\n+static_assert( ! noexcept(swap(p, p)), \"non-member swap is conditionally noexcept\" );\n+\n+// std::is_swappable not available for -std=c++14\n+#if __cplusplus > 201402L || !defined(__STRICT_ANSI__)\n+struct Q\n+{\n+  int i = 0;\n+  int& operator*() const;\n+\n+  Q& operator=(Q&&) = delete;\n+};\n+\n+static_assert( ! std::is_swappable<Q>::value, \"\" );\n+\n+static_assert( ! std::is_swappable<propagate_const<Q>>::value,\n+\t       \"non-member swap is constrained\" );\n+#endif"}]}