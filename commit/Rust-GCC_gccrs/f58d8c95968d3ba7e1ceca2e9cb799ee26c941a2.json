{"sha": "f58d8c95968d3ba7e1ceca2e9cb799ee26c941a2", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjU4ZDhjOTU5NjhkM2JhN2UxY2VjYTJlOWNiNzk5ZWUyNmM5NDFhMg==", "commit": {"author": {"name": "James E Wilson", "email": "wilson@tuliptree.org", "date": "2003-06-11T04:25:47Z"}, "committer": {"name": "Jim Wilson", "email": "wilson@gcc.gnu.org", "date": "2003-06-11T04:25:47Z"}, "message": "re PR rtl-optimization/8812 ([avr] Registers allocated for two uses at once)\n\nPR target/8812\n* reload1.c (choose_reload_regs): For equiv reg, add loop over all\nhard regs for reload_reg_used_at_all and reg_class_contents checks.\n\nFrom-SVN: r67751", "tree": {"sha": "a25acc52909f923cf8d78ae5442aa4e4419df108", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a25acc52909f923cf8d78ae5442aa4e4419df108"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f58d8c95968d3ba7e1ceca2e9cb799ee26c941a2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f58d8c95968d3ba7e1ceca2e9cb799ee26c941a2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f58d8c95968d3ba7e1ceca2e9cb799ee26c941a2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f58d8c95968d3ba7e1ceca2e9cb799ee26c941a2/comments", "author": {"login": "jim-wilson", "id": 11654017, "node_id": "MDQ6VXNlcjExNjU0MDE3", "avatar_url": "https://avatars.githubusercontent.com/u/11654017?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jim-wilson", "html_url": "https://github.com/jim-wilson", "followers_url": "https://api.github.com/users/jim-wilson/followers", "following_url": "https://api.github.com/users/jim-wilson/following{/other_user}", "gists_url": "https://api.github.com/users/jim-wilson/gists{/gist_id}", "starred_url": "https://api.github.com/users/jim-wilson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jim-wilson/subscriptions", "organizations_url": "https://api.github.com/users/jim-wilson/orgs", "repos_url": "https://api.github.com/users/jim-wilson/repos", "events_url": "https://api.github.com/users/jim-wilson/events{/privacy}", "received_events_url": "https://api.github.com/users/jim-wilson/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "46dfb7aa2cdcc6125a2f17cd38fee0f4b1b21503", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/46dfb7aa2cdcc6125a2f17cd38fee0f4b1b21503", "html_url": "https://github.com/Rust-GCC/gccrs/commit/46dfb7aa2cdcc6125a2f17cd38fee0f4b1b21503"}], "stats": {"total": 29, "additions": 24, "deletions": 5}, "files": [{"sha": "2fcaf5a7275a9f21a24188d979bdec29d7190683", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f58d8c95968d3ba7e1ceca2e9cb799ee26c941a2/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f58d8c95968d3ba7e1ceca2e9cb799ee26c941a2/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=f58d8c95968d3ba7e1ceca2e9cb799ee26c941a2", "patch": "@@ -1,3 +1,9 @@\n+2003-06-10  James E Wilson  <wilson@tuliptree.org>\n+\n+\tPR target/8812\n+\t* reload1.c (choose_reload_regs): For equiv reg, add loop over all\n+\thard regs for reload_reg_used_at_all and reg_class_contents checks.\n+\n 2003-06-10  Kazu Hirata  <kazu@cs.umass.edu>\n \n \t* config/h8300/h8300.c (print_operand): Remove support for"}, {"sha": "f8b3d5aef3497722393911b561c2eb577800a025", "filename": "gcc/reload1.c", "status": "modified", "additions": 18, "deletions": 5, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f58d8c95968d3ba7e1ceca2e9cb799ee26c941a2/gcc%2Freload1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f58d8c95968d3ba7e1ceca2e9cb799ee26c941a2/gcc%2Freload1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Freload1.c?ref=f58d8c95968d3ba7e1ceca2e9cb799ee26c941a2", "patch": "@@ -5685,14 +5685,27 @@ choose_reload_regs (chain)\n \n \t      /* If we found a spill reg, reject it unless it is free\n \t\t and of the desired class.  */\n-\t      if (equiv != 0\n-\t\t  && ((TEST_HARD_REG_BIT (reload_reg_used_at_all, regno)\n+\t      if (equiv != 0)\n+\t\t{\n+\t\t  int regs_used = 0;\n+\t\t  int bad_for_class = 0;\n+\t\t  int max_regno = regno + rld[r].nregs;\n+\n+\t\t  for (i = regno; i < max_regno; i++)\n+\t\t    {\n+\t\t      regs_used |= TEST_HARD_REG_BIT (reload_reg_used_at_all,\n+\t\t\t\t\t\t      i);\n+\t\t      bad_for_class |= ! TEST_HARD_REG_BIT (reg_class_contents[(int) rld[r].class], \n+\t\t\t\t\t\t\t   i);\n+\t\t    }\n+\n+\t\t  if ((regs_used\n \t\t       && ! free_for_value_p (regno, rld[r].mode,\n \t\t\t\t\t      rld[r].opnum, rld[r].when_needed,\n \t\t\t\t\t      rld[r].in, rld[r].out, r, 1))\n-\t\t      || ! TEST_HARD_REG_BIT (reg_class_contents[(int) rld[r].class],\n-\t\t\t\t\t      regno)))\n-\t\tequiv = 0;\n+\t\t      || bad_for_class)\n+\t\t    equiv = 0;\n+\t\t}\n \n \t      if (equiv != 0 && ! HARD_REGNO_MODE_OK (regno, rld[r].mode))\n \t\tequiv = 0;"}]}