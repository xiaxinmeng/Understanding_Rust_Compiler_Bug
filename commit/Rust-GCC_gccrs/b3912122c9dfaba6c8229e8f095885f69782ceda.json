{"sha": "b3912122c9dfaba6c8229e8f095885f69782ceda", "node_id": "C_kwDOANBUbNoAKGIzOTEyMTIyYzlkZmFiYTZjODIyOWU4ZjA5NTg4NWY2OTc4MmNlZGE", "commit": {"author": {"name": "Patrick Palka", "email": "ppalka@redhat.com", "date": "2022-12-03T15:28:25Z"}, "committer": {"name": "Patrick Palka", "email": "ppalka@redhat.com", "date": "2022-12-03T15:28:25Z"}, "message": "c++: substituting CONST_DECL_USING_P enumerators [PR103081]\n\nWe implement class-scope using enum by injecting clones of the enum's\nCONST_DECLs as fields of the class, for which CONST_DECL_USING_P is\ntrue, so that qualified lookup naturally finds the enumerators.\nSubstitution into such a CONST_DECL currently ICEs however, because we\nassume the DECL_CONTEXT is always the ENUMERAL_TYPE (which has\nTYPE_VALUES) but in this case it's the RECORD_TYPE for the class scope\n(which has TYPE_FIELDS).\n\nSince these CONST_DECLs appear to always be non-dependent, this patch\nfixes this by shortcutting substitution for CONST_DECLs that have\nnon-dependent DECL_CONTEXT.  This subsumes the existing (and seemingly\ndead) DECL_NAMESPACE_SCOPE_P early exit test and also benefits\nsubstitution into ordinary non-dependent CONST_DECLs.\n\n\tPR c++/103081\n\ngcc/cp/ChangeLog:\n\n\t* pt.cc (tsubst_copy) <case CONST_DECL>: Generalize\n\tearly exit test for namespace-scope decls to check dependence of\n\tthe enclosing scope instead.  Remove dead early exit test.\n\ngcc/testsuite/ChangeLog:\n\n\t* g++.dg/cpp2a/using-enum-10.C: New test.\n\t* g++.dg/cpp2a/using-enum-10a.C: New test.", "tree": {"sha": "f8ec304030ba701fd7aa6200e3182cf0baa8eecf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f8ec304030ba701fd7aa6200e3182cf0baa8eecf"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b3912122c9dfaba6c8229e8f095885f69782ceda", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b3912122c9dfaba6c8229e8f095885f69782ceda", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b3912122c9dfaba6c8229e8f095885f69782ceda", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b3912122c9dfaba6c8229e8f095885f69782ceda/comments", "author": null, "committer": null, "parents": [{"sha": "93574914e462e87e42dddd66b0dfbb9627662f33", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/93574914e462e87e42dddd66b0dfbb9627662f33", "html_url": "https://github.com/Rust-GCC/gccrs/commit/93574914e462e87e42dddd66b0dfbb9627662f33"}], "stats": {"total": 42, "additions": 36, "deletions": 6}, "files": [{"sha": "bc8ea06ceaeef133da9165692dd4b0c14a3a28e4", "filename": "gcc/cp/pt.cc", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b3912122c9dfaba6c8229e8f095885f69782ceda/gcc%2Fcp%2Fpt.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b3912122c9dfaba6c8229e8f095885f69782ceda/gcc%2Fcp%2Fpt.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.cc?ref=b3912122c9dfaba6c8229e8f095885f69782ceda", "patch": "@@ -17066,13 +17066,8 @@ tsubst_copy (tree t, tree args, tsubst_flags_t complain, tree in_decl)\n \n \tif (DECL_TEMPLATE_PARM_P (t))\n \t  return tsubst_copy (DECL_INITIAL (t), args, complain, in_decl);\n-\t/* There is no need to substitute into namespace-scope\n-\t   enumerators.  */\n-\tif (DECL_NAMESPACE_SCOPE_P (t))\n+\tif (!uses_template_parms (DECL_CONTEXT (t)))\n \t  return t;\n-\t/* If ARGS is NULL, then T is known to be non-dependent.  */\n-\tif (args == NULL_TREE)\n-\t  return scalar_constant_value (t);\n \n \t/* Unfortunately, we cannot just call lookup_name here.\n \t   Consider:"}, {"sha": "98fe0644729fd142a5c6a53d0e4e0eefa5c21c23", "filename": "gcc/testsuite/g++.dg/cpp2a/using-enum-10.C", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b3912122c9dfaba6c8229e8f095885f69782ceda/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fusing-enum-10.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b3912122c9dfaba6c8229e8f095885f69782ceda/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fusing-enum-10.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fusing-enum-10.C?ref=b3912122c9dfaba6c8229e8f095885f69782ceda", "patch": "@@ -0,0 +1,16 @@\n+// PR c++/103081\n+// { dg-do compile { target c++20 } }\n+\n+enum class Pig { OINK };\n+\n+struct Hog {\n+  using enum Pig;\n+  Hog(Pig) { }\n+};\n+\n+template<int>\n+void pen() {\n+  Hog(Hog::OINK);\n+}\n+\n+template void pen<0>();"}, {"sha": "daa3221b77aac35cd3912fb3e5cb554efc387c30", "filename": "gcc/testsuite/g++.dg/cpp2a/using-enum-10a.C", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b3912122c9dfaba6c8229e8f095885f69782ceda/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fusing-enum-10a.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b3912122c9dfaba6c8229e8f095885f69782ceda/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fusing-enum-10a.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fusing-enum-10a.C?ref=b3912122c9dfaba6c8229e8f095885f69782ceda", "patch": "@@ -0,0 +1,19 @@\n+// A version of using-enum-10.C where Hog is a template.\n+// PR c++/103081\n+// { dg-do compile { target c++20 } }\n+\n+enum class Pig { OINK };\n+\n+template<int>\n+struct Hog {\n+  using enum Pig;\n+  Hog(Pig) { OINK; }\n+};\n+\n+template<int N>\n+void pen() {\n+  Hog<1>(Hog<1>::OINK);\n+  Hog<N>(Hog<N>::OINK);\n+}\n+\n+template void pen<0>();"}]}