{"sha": "46e248fb7fe7af696f5bd331f1b981cfe2ffca76", "node_id": "C_kwDOANBUbNoAKDQ2ZTI0OGZiN2ZlN2FmNjk2ZjViZDMzMWYxYjk4MWNmZTJmZmNhNzY", "commit": {"author": {"name": "liushuyu", "email": "liushuyu011@gmail.com", "date": "2022-06-07T06:57:43Z"}, "committer": {"name": "liushuyu", "email": "liushuyu011@gmail.com", "date": "2022-06-07T07:17:37Z"}, "message": "rust/lex: skip broken string expression ...\n\n... when the matching quote is not found on the same line\n\nthis could unstuck the string parser when the parser could not advance\nthe parsing position", "tree": {"sha": "87ae2e67d3bd298ebc13055ededa390734baa68b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/87ae2e67d3bd298ebc13055ededa390734baa68b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/46e248fb7fe7af696f5bd331f1b981cfe2ffca76", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEE6x/rcKrl3aOwzUVJI9HORTRBlDcFAmKe+5MACgkQI9HORTRB\nlDeObxAAqLBm5C79DDVHx9HmHpyq8fANITRFfNQ3ikBadmvWUkXfSULF0diNApbV\nZuCTQh+PDu2eDfrC0cHbo0NOsI0eatDyr1SH4lNyucriCPHhuU0VESX7JKIjbMaa\ne0IwszOU8ZZ4EJDkNJmnklSypo4Wm3Btj84XR8EnrIUPo0n3+Gf3/Hy4+y0ssgZ1\n+ZflExZHJkgqV0LhDy2riCvjdgsCP3NpTrzuUCXl7fqAlMNvu1Ac/OeSYOwZdxVa\nH/iPDOSvYSEJK7ML+oxNPEypB0OLRpqtjN39Ic9bLmSTEBi4xmfdsy//g+j9YugG\nZKasSp8MzHNlUWnV5AOmd7JUwPnPOXXk2ODGqwoJuhPcNyIcs4Jl7h5ZIJMrZtAs\nbfhgV/cpKQyOWBGFpcw0GPWXxsZlNhFG4I/M0QD/J6XsFFgDkE0o3tZqaoQvomta\nYOyA53JjQoBLWQrKIGE/hbCOD1P2NxFv31WTUCcT24k4tA0B1yrCul/Wto6+tDOF\n8bcA9POldDOJuoscdKveUQQbMitBjl2IKq+Xk65/SeguRfk+A1bPO83gfDCgGUQ3\nJNekalFazPPEoQTv06Hf3oQkVkVtVtwSt4fofm4pELJRJUC150tHirYXKLusNUZv\nySB9tqbJQvbFS/U2RdYuMsDxLLdbhHKraLg5GxxfScH74IIxpU4=\n=9wAe\n-----END PGP SIGNATURE-----", "payload": "tree 87ae2e67d3bd298ebc13055ededa390734baa68b\nparent 957914b4284213b1d72c9c4210892367acaf1419\nauthor liushuyu <liushuyu011@gmail.com> 1654585063 -0600\ncommitter liushuyu <liushuyu011@gmail.com> 1654586257 -0600\n\nrust/lex: skip broken string expression ...\n\n... when the matching quote is not found on the same line\n\nthis could unstuck the string parser when the parser could not advance\nthe parsing position\n"}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/46e248fb7fe7af696f5bd331f1b981cfe2ffca76", "html_url": "https://github.com/Rust-GCC/gccrs/commit/46e248fb7fe7af696f5bd331f1b981cfe2ffca76", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/46e248fb7fe7af696f5bd331f1b981cfe2ffca76/comments", "author": {"login": "liushuyu", "id": 6829345, "node_id": "MDQ6VXNlcjY4MjkzNDU=", "avatar_url": "https://avatars.githubusercontent.com/u/6829345?v=4", "gravatar_id": "", "url": "https://api.github.com/users/liushuyu", "html_url": "https://github.com/liushuyu", "followers_url": "https://api.github.com/users/liushuyu/followers", "following_url": "https://api.github.com/users/liushuyu/following{/other_user}", "gists_url": "https://api.github.com/users/liushuyu/gists{/gist_id}", "starred_url": "https://api.github.com/users/liushuyu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/liushuyu/subscriptions", "organizations_url": "https://api.github.com/users/liushuyu/orgs", "repos_url": "https://api.github.com/users/liushuyu/repos", "events_url": "https://api.github.com/users/liushuyu/events{/privacy}", "received_events_url": "https://api.github.com/users/liushuyu/received_events", "type": "User", "site_admin": false}, "committer": {"login": "liushuyu", "id": 6829345, "node_id": "MDQ6VXNlcjY4MjkzNDU=", "avatar_url": "https://avatars.githubusercontent.com/u/6829345?v=4", "gravatar_id": "", "url": "https://api.github.com/users/liushuyu", "html_url": "https://github.com/liushuyu", "followers_url": "https://api.github.com/users/liushuyu/followers", "following_url": "https://api.github.com/users/liushuyu/following{/other_user}", "gists_url": "https://api.github.com/users/liushuyu/gists{/gist_id}", "starred_url": "https://api.github.com/users/liushuyu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/liushuyu/subscriptions", "organizations_url": "https://api.github.com/users/liushuyu/orgs", "repos_url": "https://api.github.com/users/liushuyu/repos", "events_url": "https://api.github.com/users/liushuyu/events{/privacy}", "received_events_url": "https://api.github.com/users/liushuyu/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "957914b4284213b1d72c9c4210892367acaf1419", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/957914b4284213b1d72c9c4210892367acaf1419", "html_url": "https://github.com/Rust-GCC/gccrs/commit/957914b4284213b1d72c9c4210892367acaf1419"}], "stats": {"total": 52, "additions": 51, "deletions": 1}, "files": [{"sha": "023b67651b71acf3f7a76ec2addf69f134343262", "filename": "gcc/rust/lex/rust-lex.cc", "status": "modified", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/46e248fb7fe7af696f5bd331f1b981cfe2ffca76/gcc%2Frust%2Flex%2Frust-lex.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/46e248fb7fe7af696f5bd331f1b981cfe2ffca76/gcc%2Frust%2Flex%2Frust-lex.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Flex%2Frust-lex.cc?ref=46e248fb7fe7af696f5bd331f1b981cfe2ffca76", "patch": "@@ -1856,6 +1856,35 @@ Lexer::parse_raw_identifier (Location loc)\n     }\n }\n \n+// skip broken string input (unterminated strings)\n+void\n+Lexer::skip_broken_string_input (int current_char)\n+{\n+  while (current_char != '\"' && current_char != EOF)\n+    {\n+      if (current_char == '\\n')\n+\t{\n+\t  current_line++;\n+\t  current_column = 1;\n+\t}\n+      else\n+\t{\n+\t  current_column++;\n+\t}\n+      skip_input ();\n+      current_char = peek_input ();\n+    }\n+  if (current_char == '\"')\n+    {\n+      current_column++;\n+\n+      skip_input ();\n+      current_char = peek_input ();\n+    }\n+  rust_debug (\"skipped to %d:%d due to bad quotes\", current_line,\n+\t      current_column);\n+}\n+\n // Parses a unicode string.\n TokenPtr\n Lexer::parse_string (Location loc)\n@@ -1903,6 +1932,9 @@ Lexer::parse_string (Location loc)\n   if (current_char32.value == '\\n')\n     {\n       rust_error_at (get_current_location (), \"unended string literal\");\n+      // by this point, the parser will stuck at this position due to\n+      // undetermined string termination. we now need to unstuck the parser\n+      skip_broken_string_input (current_char32.value);\n     }\n   else if (current_char32.value == '\"')\n     {"}, {"sha": "429b9e129c1c4b1d9a4d5f29a536684094e80efc", "filename": "gcc/rust/lex/rust-lex.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/46e248fb7fe7af696f5bd331f1b981cfe2ffca76/gcc%2Frust%2Flex%2Frust-lex.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/46e248fb7fe7af696f5bd331f1b981cfe2ffca76/gcc%2Frust%2Flex%2Frust-lex.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Flex%2Frust-lex.h?ref=46e248fb7fe7af696f5bd331f1b981cfe2ffca76", "patch": "@@ -114,6 +114,7 @@ class Lexer\n   Codepoint peek_codepoint_input ();\n   Codepoint test_peek_codepoint_input (int n);\n   void skip_codepoint_input ();\n+  void skip_broken_string_input (int current_char);\n \n   TokenPtr parse_byte_char (Location loc);\n   TokenPtr parse_byte_string (Location loc);"}, {"sha": "0fc1c1fe3ac6fc0be05135c3df6d30cb9f65a4aa", "filename": "gcc/rust/parse/rust-parse-impl.h", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/46e248fb7fe7af696f5bd331f1b981cfe2ffca76/gcc%2Frust%2Fparse%2Frust-parse-impl.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/46e248fb7fe7af696f5bd331f1b981cfe2ffca76/gcc%2Frust%2Fparse%2Frust-parse-impl.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fparse%2Frust-parse-impl.h?ref=46e248fb7fe7af696f5bd331f1b981cfe2ffca76", "patch": "@@ -914,7 +914,8 @@ Parser<ManagedTokenSource>::parse_delim_token_tree ()\n \n   // repeat loop until finding the matching delimiter\n   t = lexer.peek_token ();\n-  while (!token_id_matches_delims (t->get_id (), delim_type))\n+  while (!token_id_matches_delims (t->get_id (), delim_type)\n+\t && t->get_id () != END_OF_FILE)\n     {\n       std::unique_ptr<AST::TokenTree> tok_tree = parse_token_tree ();\n "}, {"sha": "33001c01fd0047d927ed5f000783a0e36f608d60", "filename": "gcc/testsuite/rust/compile/torture/check-doc-attr-string.rs", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/46e248fb7fe7af696f5bd331f1b981cfe2ffca76/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftorture%2Fcheck-doc-attr-string.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/46e248fb7fe7af696f5bd331f1b981cfe2ffca76/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftorture%2Fcheck-doc-attr-string.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftorture%2Fcheck-doc-attr-string.rs?ref=46e248fb7fe7af696f5bd331f1b981cfe2ffca76", "patch": "@@ -0,0 +1,13 @@\n+#![crate_type = \"lib\"]\n+\n+#[doc(alias = \"foo\")] // ok!\n+#[doc(alias(\"bar\", \"baz\"))] // ok!\n+pub struct Bar;\n+\n+#[doc(alias = \"\n+\")] // { dg-error \"unended string literal\" \"\" { target *-*-* } .-1 }\n+pub struct Foo;\n+\n+#[doc(alias(\"\n+\"))] // { dg-error \"unended string literal\" \"\" { target *-*-* } .-1 }\n+pub struct Foo2;"}, {"sha": "832ba7b8ec9551f8274a8e73b8e9089d3fa5a118", "filename": "gcc/testsuite/rust/compile/torture/very-broken-attr-string.rs", "status": "added", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/46e248fb7fe7af696f5bd331f1b981cfe2ffca76/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftorture%2Fvery-broken-attr-string.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/46e248fb7fe7af696f5bd331f1b981cfe2ffca76/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftorture%2Fvery-broken-attr-string.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftorture%2Fvery-broken-attr-string.rs?ref=46e248fb7fe7af696f5bd331f1b981cfe2ffca76", "patch": "@@ -0,0 +1,3 @@\n+// { dg-excess-errors \"....\" }\n+// { dg-error \"unended string literal\" \"\" { target *-*-* } .+1 }\n+#[doc(alias = \"123"}]}