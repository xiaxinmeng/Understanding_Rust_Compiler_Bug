{"sha": "a5dd23a728109134f3eea1272cb7edaba389f5c6", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTVkZDIzYTcyODEwOTEzNGYzZWVhMTI3MmNiN2VkYWJhMzg5ZjVjNg==", "commit": {"author": {"name": "Pascal Obry", "email": "obry@adacore.com", "date": "2011-11-21T11:38:35Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2011-11-21T11:38:35Z"}, "message": "sem_prag.adb (Process_Convention): A dispatching call cannot have a stdcall calling convention.\n\n2011-11-21  Pascal Obry  <obry@adacore.com>\n\n\t* sem_prag.adb (Process_Convention): A dispatching call cannot\n\thave a stdcall calling convention.\n\n2011-11-21  Pascal Obry  <obry@adacore.com>\n\n\t* s-taprop-linux.adb (Initialize_Lock): Do not allocate a\n\tmutex attribute as not needed.\n\t(Initialize_TCB): Likewise.\n\t(Initialize): Likewise.\n\nFrom-SVN: r181564", "tree": {"sha": "c5547ad418f7231614dae5dede71839222e1f9ed", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c5547ad418f7231614dae5dede71839222e1f9ed"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a5dd23a728109134f3eea1272cb7edaba389f5c6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a5dd23a728109134f3eea1272cb7edaba389f5c6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a5dd23a728109134f3eea1272cb7edaba389f5c6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a5dd23a728109134f3eea1272cb7edaba389f5c6/comments", "author": {"login": "TurboGit", "id": 467069, "node_id": "MDQ6VXNlcjQ2NzA2OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/467069?v=4", "gravatar_id": "", "url": "https://api.github.com/users/TurboGit", "html_url": "https://github.com/TurboGit", "followers_url": "https://api.github.com/users/TurboGit/followers", "following_url": "https://api.github.com/users/TurboGit/following{/other_user}", "gists_url": "https://api.github.com/users/TurboGit/gists{/gist_id}", "starred_url": "https://api.github.com/users/TurboGit/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/TurboGit/subscriptions", "organizations_url": "https://api.github.com/users/TurboGit/orgs", "repos_url": "https://api.github.com/users/TurboGit/repos", "events_url": "https://api.github.com/users/TurboGit/events{/privacy}", "received_events_url": "https://api.github.com/users/TurboGit/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "a4901c083549b9173a1cb3e55741ef0dfc3a8472", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a4901c083549b9173a1cb3e55741ef0dfc3a8472", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a4901c083549b9173a1cb3e55741ef0dfc3a8472"}], "stats": {"total": 53, "additions": 25, "deletions": 28}, "files": [{"sha": "c0efe1b004390345177aa93c225797a70cf3cbb1", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a5dd23a728109134f3eea1272cb7edaba389f5c6/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a5dd23a728109134f3eea1272cb7edaba389f5c6/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=a5dd23a728109134f3eea1272cb7edaba389f5c6", "patch": "@@ -1,3 +1,15 @@\n+2011-11-21  Pascal Obry  <obry@adacore.com>\n+\n+\t* sem_prag.adb (Process_Convention): A dispatching call cannot\n+\thave a stdcall calling convention.\n+\n+2011-11-21  Pascal Obry  <obry@adacore.com>\n+\n+\t* s-taprop-linux.adb (Initialize_Lock): Do not allocate a\n+\tmutex attribute as not needed.\n+\t(Initialize_TCB): Likewise.\n+\t(Initialize): Likewise.\n+\n 2011-11-21  Robert Dewar  <dewar@adacore.com>\n \n \t* sem_ch6.adb (Is_Public_Subprogram_For): New procedure"}, {"sha": "70f2d143545142d38f377aae0bb8582f5f3b5d44", "filename": "gcc/ada/s-taprop-linux.adb", "status": "modified", "additions": 10, "deletions": 26, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a5dd23a728109134f3eea1272cb7edaba389f5c6/gcc%2Fada%2Fs-taprop-linux.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a5dd23a728109134f3eea1272cb7edaba389f5c6/gcc%2Fada%2Fs-taprop-linux.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-taprop-linux.adb?ref=a5dd23a728109134f3eea1272cb7edaba389f5c6", "patch": "@@ -291,14 +291,10 @@ package body System.Task_Primitives.Operations is\n \n       else\n          declare\n-            Mutex_Attr : aliased pthread_mutexattr_t;\n-            Result     : Interfaces.C.int;\n+            Result : Interfaces.C.int;\n \n          begin\n-            Result := pthread_mutexattr_init (Mutex_Attr'Access);\n-            pragma Assert (Result = 0);\n-\n-            Result := pthread_mutex_init (L.WO'Access, Mutex_Attr'Access);\n+            Result := pthread_mutex_init (L.WO'Access, null);\n \n             pragma Assert (Result = 0 or else Result = ENOMEM);\n \n@@ -315,14 +311,10 @@ package body System.Task_Primitives.Operations is\n    is\n       pragma Unreferenced (Level);\n \n-      Mutex_Attr : aliased pthread_mutexattr_t;\n-      Result     : Interfaces.C.int;\n+      Result : Interfaces.C.int;\n \n    begin\n-      Result := pthread_mutexattr_init (Mutex_Attr'Access);\n-      pragma Assert (Result = 0);\n-\n-      Result := pthread_mutex_init (L, Mutex_Attr'Access);\n+      Result := pthread_mutex_init (L, null);\n \n       pragma Assert (Result = 0 or else Result = ENOMEM);\n \n@@ -817,9 +809,8 @@ package body System.Task_Primitives.Operations is\n    --------------------\n \n    procedure Initialize_TCB (Self_ID : Task_Id; Succeeded : out Boolean) is\n-      Mutex_Attr : aliased pthread_mutexattr_t;\n-      Cond_Attr  : aliased pthread_condattr_t;\n-      Result     : Interfaces.C.int;\n+      Cond_Attr : aliased pthread_condattr_t;\n+      Result    : Interfaces.C.int;\n \n    begin\n       --  Give the task a unique serial number\n@@ -831,11 +822,8 @@ package body System.Task_Primitives.Operations is\n       Self_ID.Common.LL.Thread := Null_Thread_Id;\n \n       if not Single_Lock then\n-         Result := pthread_mutexattr_init (Mutex_Attr'Access);\n-         pragma Assert (Result = 0);\n-\n          Result :=\n-           pthread_mutex_init (Self_ID.Common.LL.L'Access, Mutex_Attr'Access);\n+           pthread_mutex_init (Self_ID.Common.LL.L'Access, null);\n          pragma Assert (Result = 0 or else Result = ENOMEM);\n \n          if Result /= 0 then\n@@ -1081,9 +1069,8 @@ package body System.Task_Primitives.Operations is\n    ----------------\n \n    procedure Initialize (S : in out Suspension_Object) is\n-      Mutex_Attr : aliased pthread_mutexattr_t;\n-      Cond_Attr  : aliased pthread_condattr_t;\n-      Result     : Interfaces.C.int;\n+      Cond_Attr : aliased pthread_condattr_t;\n+      Result    : Interfaces.C.int;\n \n    begin\n       --  Initialize internal state (always to False (RM D.10(6)))\n@@ -1093,10 +1080,7 @@ package body System.Task_Primitives.Operations is\n \n       --  Initialize internal mutex\n \n-      Result := pthread_mutexattr_init (Mutex_Attr'Access);\n-      pragma Assert (Result = 0);\n-\n-      Result := pthread_mutex_init (S.L'Access, Mutex_Attr'Access);\n+      Result := pthread_mutex_init (S.L'Access, null);\n \n       pragma Assert (Result = 0 or else Result = ENOMEM);\n "}, {"sha": "9ba21291b856098ea1a4a63fbf92e146c8251a68", "filename": "gcc/ada/sem_prag.adb", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a5dd23a728109134f3eea1272cb7edaba389f5c6/gcc%2Fada%2Fsem_prag.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a5dd23a728109134f3eea1272cb7edaba389f5c6/gcc%2Fada%2Fsem_prag.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_prag.adb?ref=a5dd23a728109134f3eea1272cb7edaba389f5c6", "patch": "@@ -3527,8 +3527,9 @@ package body Sem_Prag is\n          --  For Stdcall, a subprogram, variable or subprogram type is required\n \n          if C = Convention_Stdcall\n-           and then not Is_Subprogram (E)\n-           and then not Is_Generic_Subprogram (E)\n+           and then\n+             ((not Is_Subprogram (E) and then not Is_Generic_Subprogram (E))\n+                or else Is_Dispatching_Operation (E))\n            and then Ekind (E) /= E_Variable\n            and then not\n              (Is_Access_Type (E)"}]}