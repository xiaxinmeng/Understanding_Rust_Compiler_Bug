{"sha": "973162ec9dd144e6637a9fc775c3e9ce308b054c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTczMTYyZWM5ZGQxNDRlNjYzN2E5ZmM3NzVjM2U5Y2UzMDhiMDU0Yw==", "commit": {"author": {"name": "Daniel Berlin", "email": "dberlin@dberlin.org", "date": "2005-11-08T16:34:48Z"}, "committer": {"name": "Daniel Berlin", "email": "dberlin@gcc.gnu.org", "date": "2005-11-08T16:34:48Z"}, "message": "re PR tree-optimization/23382 (Does not remove the old HEAP virtual variables in clobbered)\n\n2005-11-08  Daniel Berlin  <dberlin@dberlin.org>\n\n\tFix PR tree-optimization/23382\n\n\t* tree-ssa-alias.c (compute_may_aliases): Call\n\tdelete_old_heap_vars.\n\t* tree-dfa.c (referenced_var_remove): New function.\n\t* tree-ssa.c (delete_tree_ssa): Call delete_old_heap_vars.\n\t* tree-flow.h (referenced_var_remove): Add prototype.\n\t(delete_old_heap_vars): Ditto.\n\t* tree-ssa-structalias.c (heapvars): New variable.\n\t(oldheapvars): Ditto.\n\t(get_constraint_for): Put heap vars on heapvars list.\n\t(delete_old_heap_vars): New function.\n\nFrom-SVN: r106643", "tree": {"sha": "b44d278762551161178f033b428dfde8fea6c404", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b44d278762551161178f033b428dfde8fea6c404"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/973162ec9dd144e6637a9fc775c3e9ce308b054c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/973162ec9dd144e6637a9fc775c3e9ce308b054c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/973162ec9dd144e6637a9fc775c3e9ce308b054c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/973162ec9dd144e6637a9fc775c3e9ce308b054c/comments", "author": {"login": "dberlin", "id": 324715, "node_id": "MDQ6VXNlcjMyNDcxNQ==", "avatar_url": "https://avatars.githubusercontent.com/u/324715?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dberlin", "html_url": "https://github.com/dberlin", "followers_url": "https://api.github.com/users/dberlin/followers", "following_url": "https://api.github.com/users/dberlin/following{/other_user}", "gists_url": "https://api.github.com/users/dberlin/gists{/gist_id}", "starred_url": "https://api.github.com/users/dberlin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dberlin/subscriptions", "organizations_url": "https://api.github.com/users/dberlin/orgs", "repos_url": "https://api.github.com/users/dberlin/repos", "events_url": "https://api.github.com/users/dberlin/events{/privacy}", "received_events_url": "https://api.github.com/users/dberlin/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "e5f51638541b06c1f10707c89a9699419eb77933", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e5f51638541b06c1f10707c89a9699419eb77933", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e5f51638541b06c1f10707c89a9699419eb77933"}], "stats": {"total": 103, "additions": 103, "deletions": 0}, "files": [{"sha": "d6d939ba0d296a802ebdfba34881aca73e8d8d32", "filename": "gcc/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/973162ec9dd144e6637a9fc775c3e9ce308b054c/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/973162ec9dd144e6637a9fc775c3e9ce308b054c/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=973162ec9dd144e6637a9fc775c3e9ce308b054c", "patch": "@@ -1,3 +1,18 @@\n+2005-11-08  Daniel Berlin  <dberlin@dberlin.org>\n+\n+\tFix PR tree-optimization/23382\n+\n+\t* tree-ssa-alias.c (compute_may_aliases): Call\n+\tdelete_old_heap_vars.\n+\t* tree-dfa.c (referenced_var_remove): New function.\n+\t* tree-ssa.c (delete_tree_ssa): Call delete_old_heap_vars.\n+\t* tree-flow.h (referenced_var_remove): Add prototype.\n+\t(delete_old_heap_vars): Ditto.\n+\t* tree-ssa-structalias.c (heapvars): New variable.\n+\t(oldheapvars): Ditto.\n+\t(get_constraint_for): Put heap vars on heapvars list.\n+\t(delete_old_heap_vars): New function.\n+\t\n 2005-11-08  Jason Merrill  <jason@redhat.com>\n \n \t* tree.h (CALL_FROM_THUNK_P): Add CALL_EXPR_CHECK."}, {"sha": "eeeb0ffd0d72a3b75cca599004df57ec8590e7b9", "filename": "gcc/testsuite/gcc.dg/tree-ssa/pr23382.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/973162ec9dd144e6637a9fc775c3e9ce308b054c/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr23382.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/973162ec9dd144e6637a9fc775c3e9ce308b054c/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr23382.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr23382.c?ref=973162ec9dd144e6637a9fc775c3e9ce308b054c", "patch": "@@ -0,0 +1,24 @@\n+/* { dg-do compile } */ \n+/* { dg-options \"-O2 -fdump-tree-alias-vops\" } */\n+struct a\n+{\n+  int length;\n+  int a1[256];\n+};\n+\n+void *malloc(long size) __attribute__((malloc));\n+\n+void f(void)\n+{\n+   struct a *a = malloc(sizeof(struct a));\n+}\n+/* { dg-final { scan-tree-dump-times \"V_MAY_DEF <HEAP\" 1 \"alias1\"} } */\n+/* { dg-final { scan-tree-dump-times \"V_MAY_DEF <HEAP\" 1 \"alias2\"} } */\n+/* { dg-final { scan-tree-dump-times \"V_MAY_DEF <HEAP\" 1 \"alias3\"} } */\n+/* { dg-final { scan-tree-dump-times \"V_MAY_DEF <HEAP\" 1 \"alias4\"} } */\n+/* { dg-final { scan-tree-dump-times \"V_MAY_DEF <HEAP\" 1 \"alias5\"} } */\n+/* { dg-final { cleanup-tree-dump \"alias1\" } } */\n+/* { dg-final { cleanup-tree-dump \"alias2\" } } */\n+/* { dg-final { cleanup-tree-dump \"alias3\" } } */\n+/* { dg-final { cleanup-tree-dump \"alias4\" } } */\n+/* { dg-final { cleanup-tree-dump \"alias5\" } } */"}, {"sha": "2ede8e6365bbbffdc9c1becea90cd77b17bad2df", "filename": "gcc/tree-dfa.c", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/973162ec9dd144e6637a9fc775c3e9ce308b054c/gcc%2Ftree-dfa.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/973162ec9dd144e6637a9fc775c3e9ce308b054c/gcc%2Ftree-dfa.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-dfa.c?ref=973162ec9dd144e6637a9fc775c3e9ce308b054c", "patch": "@@ -609,6 +609,18 @@ referenced_var_insert (unsigned int uid, tree to)\n   *(struct int_tree_map **)  loc = h;\n }\n \n+/* Remove the pair DECL_UID (TO), TO from the referenced vars\n+   hashtable.  */\n+\n+void\n+referenced_var_remove (tree to)\n+{ \n+  struct int_tree_map in;\n+  in.uid = DECL_UID (to);\n+  in.to = to;\n+  htab_remove_elt_with_hash (referenced_vars, &in, in.uid);\n+}\n+\n /* Add VAR to the list of dereferenced variables.\n \n    WALK_STATE contains a hash table used to avoid adding the same"}, {"sha": "b61b3575dd2fb4819c136646a90da5d7ca8ae058", "filename": "gcc/tree-flow.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/973162ec9dd144e6637a9fc775c3e9ce308b054c/gcc%2Ftree-flow.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/973162ec9dd144e6637a9fc775c3e9ce308b054c/gcc%2Ftree-flow.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-flow.h?ref=973162ec9dd144e6637a9fc775c3e9ce308b054c", "patch": "@@ -423,6 +423,7 @@ extern GTY((param_is (struct int_tree_map))) htab_t referenced_vars;\n \n extern tree referenced_var_lookup (unsigned int);\n extern tree referenced_var_lookup_if_exists (unsigned int);\n+extern void referenced_var_remove (tree);\n #define num_referenced_vars htab_elements (referenced_vars)\n #define referenced_var(i) referenced_var_lookup (i)\n \n@@ -891,6 +892,7 @@ int push_fields_onto_fieldstack (tree, VEC(fieldoff_s,heap) **,\n \t\t\t\t HOST_WIDE_INT, bool *);\n void sort_fieldstack (VEC(fieldoff_s,heap) *);\n \n+void delete_old_heap_vars (void);\n #include \"tree-flow-inline.h\"\n \n #endif /* _TREE_FLOW_H  */"}, {"sha": "539789491b3b8cd5bd22585e9f81c3507baff626", "filename": "gcc/tree-ssa-alias.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/973162ec9dd144e6637a9fc775c3e9ce308b054c/gcc%2Ftree-ssa-alias.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/973162ec9dd144e6637a9fc775c3e9ce308b054c/gcc%2Ftree-ssa-alias.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-alias.c?ref=973162ec9dd144e6637a9fc775c3e9ce308b054c", "patch": "@@ -252,6 +252,8 @@ compute_may_aliases (void)\n   \n   memset (&alias_stats, 0, sizeof (alias_stats));\n \n+  delete_old_heap_vars ();\n+\n   /* Initialize aliasing information.  */\n   ai = init_alias_info ();\n "}, {"sha": "67e872af9d3347dee14bd23029486e95a2fe0d51", "filename": "gcc/tree-ssa-structalias.c", "status": "modified", "additions": 47, "deletions": 0, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/973162ec9dd144e6637a9fc775c3e9ce308b054c/gcc%2Ftree-ssa-structalias.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/973162ec9dd144e6637a9fc775c3e9ce308b054c/gcc%2Ftree-ssa-structalias.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-structalias.c?ref=973162ec9dd144e6637a9fc775c3e9ce308b054c", "patch": "@@ -159,6 +159,9 @@ Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA\n   TODO: We could handle unions, but to be honest, it's probably not\n   worth the pain or slowdown.  */\n \n+static VEC(tree, heap) *heapvars = NULL;\n+static VEC(tree, heap) *oldheapvars = NULL;\n+\n static bool use_field_sensitive = true;\n static unsigned int create_variable_info_for (tree, const char *);\n static struct constraint_expr get_constraint_for (tree, bool *);\n@@ -2213,6 +2216,7 @@ get_constraint_for (tree t, bool *need_anyoffset)\n \t\ttree heapvar;\n \t\t\n \t\theapvar = create_tmp_var_raw (ptr_type_node, \"HEAP\");\n+\t\tVEC_safe_push (tree, heap, heapvars, heapvar);\n \t\tDECL_EXTERNAL (heapvar) = 1;\n \t\tadd_referenced_tmp_var (heapvar);\n \t\ttemp.var = create_variable_info_for (heapvar,\n@@ -3763,3 +3767,46 @@ delete_points_to_sets (void)\n \n   have_alias_info = false;\n }\n+\n+/* Delete old heap vars, since nothing else will remove them for\n+   us.  */\n+void\n+delete_old_heap_vars (void)\n+{\n+  if (!in_ssa_p)\n+    {\n+      VEC_free (tree, heap, heapvars);\n+      VEC_free (tree, heap, oldheapvars);\n+      heapvars = NULL;\n+      oldheapvars = NULL;\n+    }\n+  /* Why is this complicated?\n+     We can't remove the heapvars from the referenced var array until\n+     they go away from the ssa form, and we can't remove them from the\n+     ssa form until we've renamed it.  We can't renamed it if it's not\n+     in the referenced vars array. \n+     Thus, we have to first mark it for renaming, and then the *next*\n+     time after that we call this function, we can remove it from\n+     referenced vars.  */\n+\n+  if (!VEC_empty (tree, heapvars))\n+    {\n+      int i;\n+      tree heapvar;\n+      for (i = 0; VEC_iterate (tree, heapvars, i, heapvar); i++)\n+\t{\n+\t  if (in_ssa_p)\n+\t    mark_sym_for_renaming (heapvar);\n+\t  DECL_EXTERNAL (heapvar) = false;\n+\t  bitmap_clear_bit (call_clobbered_vars, DECL_UID (heapvar));\n+\t}\n+      if (!VEC_empty (tree, oldheapvars))\n+\t{\n+\t  for (i = 0; VEC_iterate (tree, oldheapvars, i, heapvar); i++)\n+\t    referenced_var_remove (heapvar);\n+\t}\n+      VEC_free (tree, heap, oldheapvars);\n+      oldheapvars = heapvars;\n+      heapvars = NULL;\n+    }\n+}"}, {"sha": "15af7f37210e206b57ac8c8fd9a0a3b13a916403", "filename": "gcc/tree-ssa.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/973162ec9dd144e6637a9fc775c3e9ce308b054c/gcc%2Ftree-ssa.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/973162ec9dd144e6637a9fc775c3e9ce308b054c/gcc%2Ftree-ssa.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa.c?ref=973162ec9dd144e6637a9fc775c3e9ce308b054c", "patch": "@@ -848,6 +848,7 @@ delete_tree_ssa (void)\n       set_phi_nodes (bb, NULL);\n     }\n \n+  delete_old_heap_vars ();\n   /* Remove annotations from every referenced variable.  */\n   FOR_EACH_REFERENCED_VAR (var, rvi)\n     {"}]}