{"sha": "469b4adb4fec2b61caee16ed982f5fab333e784b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDY5YjRhZGI0ZmVjMmI2MWNhZWUxNmVkOTgyZjVmYWIzMzNlNzg0Yg==", "commit": {"author": {"name": "Martin Jambor", "email": "mjambor@suse.cz", "date": "2019-02-18T08:59:04Z"}, "committer": {"name": "Martin Jambor", "email": "jamborm@gcc.gnu.org", "date": "2019-02-18T08:59:04Z"}, "message": "[PR 89209] Avoid segfault in a peculiar corner case in SRA\n\n2019-02-18  Martin Jambor  <mjambor@suse.cz>\n\n\tPR tree-optimization/89209\n\t* tree-sra.c (create_access_replacement): New optional parameter\n\treg_tree.  Use it as a type if non-NULL and access type is not of\n\ta register type.\n\t(get_repl_default_def_ssa_name): New parameter REG_TYPE, pass it\n\tto create_access_replacement.\n\t(sra_modify_assign): Pass LHS type to get_repl_default_def_ssa_name.\n\tCheck lacc is non-NULL before attempting to re-create it on the RHS.\n\n\ttestsuite/\n\t* gcc.dg/tree-ssa/pr89209.c: New test.\n\nFrom-SVN: r268980", "tree": {"sha": "5d0bbafdf437cf662f2be34721a7245a03b1733c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5d0bbafdf437cf662f2be34721a7245a03b1733c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/469b4adb4fec2b61caee16ed982f5fab333e784b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/469b4adb4fec2b61caee16ed982f5fab333e784b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/469b4adb4fec2b61caee16ed982f5fab333e784b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/469b4adb4fec2b61caee16ed982f5fab333e784b/comments", "author": {"login": "jamborm", "id": 2180070, "node_id": "MDQ6VXNlcjIxODAwNzA=", "avatar_url": "https://avatars.githubusercontent.com/u/2180070?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jamborm", "html_url": "https://github.com/jamborm", "followers_url": "https://api.github.com/users/jamborm/followers", "following_url": "https://api.github.com/users/jamborm/following{/other_user}", "gists_url": "https://api.github.com/users/jamborm/gists{/gist_id}", "starred_url": "https://api.github.com/users/jamborm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jamborm/subscriptions", "organizations_url": "https://api.github.com/users/jamborm/orgs", "repos_url": "https://api.github.com/users/jamborm/repos", "events_url": "https://api.github.com/users/jamborm/events{/privacy}", "received_events_url": "https://api.github.com/users/jamborm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "db30281f0b2ff6dfc0c4146291baf020a27e4065", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/db30281f0b2ff6dfc0c4146291baf020a27e4065", "html_url": "https://github.com/Rust-GCC/gccrs/commit/db30281f0b2ff6dfc0c4146291baf020a27e4065"}], "stats": {"total": 66, "additions": 53, "deletions": 13}, "files": [{"sha": "e5a6922e59d7e881f530f38dedb9e171092eaf39", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/469b4adb4fec2b61caee16ed982f5fab333e784b/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/469b4adb4fec2b61caee16ed982f5fab333e784b/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=469b4adb4fec2b61caee16ed982f5fab333e784b", "patch": "@@ -1,3 +1,14 @@\n+2019-02-18  Martin Jambor  <mjambor@suse.cz>\n+\n+\tPR tree-optimization/89209\n+\t* tree-sra.c (create_access_replacement): New optional parameter\n+\treg_tree.  Use it as a type if non-NULL and access type is not of\n+\ta register type.\n+\t(get_repl_default_def_ssa_name): New parameter REG_TYPE, pass it\n+\tto create_access_replacement.\n+\t(sra_modify_assign): Pass LHS type to get_repl_default_def_ssa_name.\n+\tCheck lacc is non-NULL before attempting to re-create it on the RHS.\n+\n 2019-02-18  Martin Liska  <mliska@suse.cz>\n \n \tPR ipa/89306"}, {"sha": "9e274acbbd1ea58245b204b44f19e1b72df86b68", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/469b4adb4fec2b61caee16ed982f5fab333e784b/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/469b4adb4fec2b61caee16ed982f5fab333e784b/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=469b4adb4fec2b61caee16ed982f5fab333e784b", "patch": "@@ -1,3 +1,8 @@\n+2019-02-18  Martin Jambor  <mjambor@suse.cz>\n+\n+\tPR tree-optimization/89209\n+\t* gcc.dg/tree-ssa/pr89209.c: New test.\n+\n 2019-02-18  Martin Liska  <mliska@suse.cz>\n \n \t* gfortran.dg/simd-builtins-7.f90: New test."}, {"sha": "f01bda9ae5c1dbf9f93dd1e723d107ffd0074772", "filename": "gcc/testsuite/gcc.dg/tree-ssa/pr89209.c", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/469b4adb4fec2b61caee16ed982f5fab333e784b/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr89209.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/469b4adb4fec2b61caee16ed982f5fab333e784b/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr89209.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr89209.c?ref=469b4adb4fec2b61caee16ed982f5fab333e784b", "patch": "@@ -0,0 +1,16 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2\" } */\n+\n+struct S {\n+  short a, b;\n+};\n+struct T {\n+  int c;\n+  struct S s;\n+};\n+int f ()\n+{\n+  struct T t;\n+  t.c = t.s.a || t.s.b;\n+  return t.c;\n+}"}, {"sha": "eeef31ba496018ca81baa14ea49b7c9327c11657", "filename": "gcc/tree-sra.c", "status": "modified", "additions": 21, "deletions": 13, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/469b4adb4fec2b61caee16ed982f5fab333e784b/gcc%2Ftree-sra.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/469b4adb4fec2b61caee16ed982f5fab333e784b/gcc%2Ftree-sra.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-sra.c?ref=469b4adb4fec2b61caee16ed982f5fab333e784b", "patch": "@@ -2195,13 +2195,20 @@ sort_and_splice_var_accesses (tree var)\n \n /* Create a variable for the given ACCESS which determines the type, name and a\n    few other properties.  Return the variable declaration and store it also to\n-   ACCESS->replacement.  */\n+   ACCESS->replacement.  REG_TREE is used when creating a declaration to base a\n+   default-definition SSA name on on in order to facilitate an uninitialized\n+   warning.  It is used instead of the actual ACCESS type if that is not of a\n+   gimple register type.  */\n \n static tree\n-create_access_replacement (struct access *access)\n+create_access_replacement (struct access *access, tree reg_type = NULL_TREE)\n {\n   tree repl;\n \n+  tree type = access->type;\n+  if (reg_type && !is_gimple_reg_type (type))\n+    type = reg_type;\n+\n   if (access->grp_to_be_debug_replaced)\n     {\n       repl = create_tmp_var_raw (access->type);\n@@ -2210,17 +2217,16 @@ create_access_replacement (struct access *access)\n   else\n     /* Drop any special alignment on the type if it's not on the main\n        variant.  This avoids issues with weirdo ABIs like AAPCS.  */\n-    repl = create_tmp_var (build_qualified_type\n-\t\t\t     (TYPE_MAIN_VARIANT (access->type),\n-\t\t\t      TYPE_QUALS (access->type)), \"SR\");\n-  if (TREE_CODE (access->type) == COMPLEX_TYPE\n-      || TREE_CODE (access->type) == VECTOR_TYPE)\n+    repl = create_tmp_var (build_qualified_type (TYPE_MAIN_VARIANT (type),\n+\t\t\t\t\t\t TYPE_QUALS (type)), \"SR\");\n+  if (TREE_CODE (type) == COMPLEX_TYPE\n+      || TREE_CODE (type) == VECTOR_TYPE)\n     {\n       if (!access->grp_partial_lhs)\n \tDECL_GIMPLE_REG_P (repl) = 1;\n     }\n   else if (access->grp_partial_lhs\n-\t   && is_gimple_reg_type (access->type))\n+\t   && is_gimple_reg_type (type))\n     TREE_ADDRESSABLE (repl) = 1;\n \n   DECL_SOURCE_LOCATION (repl) = DECL_SOURCE_LOCATION (access->base);\n@@ -3450,15 +3456,16 @@ sra_modify_constructor_assign (gimple *stmt, gimple_stmt_iterator *gsi)\n \n /* Create and return a new suitable default definition SSA_NAME for RACC which\n    is an access describing an uninitialized part of an aggregate that is being\n-   loaded.  */\n+   loaded.  REG_TREE is used instead of the actual RACC type if that is not of\n+   a gimple register type.  */\n \n static tree\n-get_repl_default_def_ssa_name (struct access *racc)\n+get_repl_default_def_ssa_name (struct access *racc, tree reg_type)\n {\n   gcc_checking_assert (!racc->grp_to_be_replaced\n \t\t       && !racc->grp_to_be_debug_replaced);\n   if (!racc->replacement_decl)\n-    racc->replacement_decl = create_access_replacement (racc);\n+    racc->replacement_decl = create_access_replacement (racc, reg_type);\n   return get_or_create_ssa_default_def (cfun, racc->replacement_decl);\n }\n \n@@ -3530,7 +3537,7 @@ sra_modify_assign (gimple *stmt, gimple_stmt_iterator *gsi)\n \t   && TREE_CODE (lhs) == SSA_NAME\n \t   && !access_has_replacements_p (racc))\n     {\n-      rhs = get_repl_default_def_ssa_name (racc);\n+      rhs = get_repl_default_def_ssa_name (racc, TREE_TYPE (lhs));\n       modify_this_stmt = true;\n       sra_stats.exprs++;\n     }\n@@ -3548,7 +3555,8 @@ sra_modify_assign (gimple *stmt, gimple_stmt_iterator *gsi)\n \t      lhs = build_ref_for_model (loc, lhs, 0, racc, gsi, false);\n \t      gimple_assign_set_lhs (stmt, lhs);\n \t    }\n-\t  else if (AGGREGATE_TYPE_P (TREE_TYPE (rhs))\n+\t  else if (lacc\n+\t\t   && AGGREGATE_TYPE_P (TREE_TYPE (rhs))\n \t\t   && !contains_vce_or_bfcref_p (rhs))\n \t    rhs = build_ref_for_model (loc, rhs, 0, lacc, gsi, false);\n "}]}