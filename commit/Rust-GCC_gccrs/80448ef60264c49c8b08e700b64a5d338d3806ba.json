{"sha": "80448ef60264c49c8b08e700b64a5d338d3806ba", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODA0NDhlZjYwMjY0YzQ5YzhiMDhlNzAwYjY0YTVkMzM4ZDM4MDZiYQ==", "commit": {"author": {"name": "Richard Earnshaw", "email": "rearnsha@arm.com", "date": "2017-06-16T21:01:22Z"}, "committer": {"name": "Richard Earnshaw", "email": "rearnsha@gcc.gnu.org", "date": "2017-06-16T21:01:22Z"}, "message": "[arm] Use strings for -march, -mcpu and -mtune options\n\n\nIn order to support more complex specifications for cpus and architectures\nwe need to move away from using enumerations to represent the set of\npermitted options.  This basic change just moves the option parsing\ninfrastructure over to that, but changes nothing more beyond generating\na hint when the specified option does not match a known target (previously\nthe help option was able to print out all the permitted values, but we\ncan no-longer do that.\n\n\t* config/arm/arm.opt (x_arm_arch_string): New TargetSave option.\n\t(x_arm_cpu_string, x_arm_tune_string): Likewise.\n\t(march, mcpu, mtune): Convert to string-based options.\n\t* config/arm/arm.c (arm_print_hint_for_core_or_arch): New function.\n\t(arm_parse_arch_cpu_name): New function.\n\t(arm_configure_build_target): Use arm_parse_arch_cpu_name to\n\tidentify selected architecture or CPU.\n\t(arm_option_save): New function.\n\t(TARGET_OPTION_SAVE): Redefine.\n\t(arm_option_restore): Restore string options.\n\t(arm_option_print): Print string options.\n\nFrom-SVN: r249279", "tree": {"sha": "9dc74e23fa1ae46264d4e3bef30f5423004104b7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9dc74e23fa1ae46264d4e3bef30f5423004104b7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/80448ef60264c49c8b08e700b64a5d338d3806ba", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/80448ef60264c49c8b08e700b64a5d338d3806ba", "html_url": "https://github.com/Rust-GCC/gccrs/commit/80448ef60264c49c8b08e700b64a5d338d3806ba", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/80448ef60264c49c8b08e700b64a5d338d3806ba/comments", "author": null, "committer": null, "parents": [{"sha": "b3d8d88efa4d8467d3b0657cc8a4a3e1913d939c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b3d8d88efa4d8467d3b0657cc8a4a3e1913d939c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b3d8d88efa4d8467d3b0657cc8a4a3e1913d939c"}], "stats": {"total": 121, "additions": 108, "deletions": 13}, "files": [{"sha": "61236929a59de87585daa7b78c0c75660fee616d", "filename": "gcc/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/80448ef60264c49c8b08e700b64a5d338d3806ba/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/80448ef60264c49c8b08e700b64a5d338d3806ba/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=80448ef60264c49c8b08e700b64a5d338d3806ba", "patch": "@@ -1,3 +1,17 @@\n+2017-06-16  Richard Earnshaw  <rearnsha@arm.com>\n+\n+\t* config/arm/arm.opt (x_arm_arch_string): New TargetSave option.\n+\t(x_arm_cpu_string, x_arm_tune_string): Likewise.\n+\t(march, mcpu, mtune): Convert to string-based options.\n+\t* config/arm/arm.c (arm_print_hint_for_core_or_arch): New function.\n+\t(arm_parse_arch_cpu_name): New function.\n+\t(arm_configure_build_target): Use arm_parse_arch_cpu_name to\n+\tidentify selected architecture or CPU.\n+\t(arm_option_save): New function.\n+\t(TARGET_OPTION_SAVE): Redefine.\n+\t(arm_option_restore): Restore string options.\n+\t(arm_option_print): Print string options.\n+\n 2017-06-16  Martin Sebor  <msebor@redhat.com>\n \n \tPR tree-optimization/80933"}, {"sha": "2502eb8f3a685816051b82b957f753ec3e23441b", "filename": "gcc/config/arm/arm.c", "status": "modified", "additions": 82, "deletions": 10, "changes": 92, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/80448ef60264c49c8b08e700b64a5d338d3806ba/gcc%2Fconfig%2Farm%2Farm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/80448ef60264c49c8b08e700b64a5d338d3806ba/gcc%2Fconfig%2Farm%2Farm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.c?ref=80448ef60264c49c8b08e700b64a5d338d3806ba", "patch": "@@ -233,6 +233,7 @@ static tree arm_build_builtin_va_list (void);\n static void arm_expand_builtin_va_start (tree, rtx);\n static tree arm_gimplify_va_arg_expr (tree, tree, gimple_seq *, gimple_seq *);\n static void arm_option_override (void);\n+static void arm_option_save (struct cl_target_option *, struct gcc_options *);\n static void arm_option_restore (struct gcc_options *,\n \t\t\t\tstruct cl_target_option *);\n static void arm_override_options_after_change (void);\n@@ -413,6 +414,9 @@ static const struct attribute_spec arm_attribute_table[] =\n #undef TARGET_OVERRIDE_OPTIONS_AFTER_CHANGE\n #define TARGET_OVERRIDE_OPTIONS_AFTER_CHANGE arm_override_options_after_change\n \n+#undef TARGET_OPTION_SAVE\n+#define TARGET_OPTION_SAVE arm_option_save\n+\n #undef TARGET_OPTION_RESTORE\n #define TARGET_OPTION_RESTORE arm_option_restore\n \n@@ -2902,9 +2906,22 @@ arm_override_options_after_change (void)\n   arm_override_options_after_change_1 (&global_options);\n }\n \n+/* Implement TARGET_OPTION_SAVE.  */\n+static void\n+arm_option_save (struct cl_target_option *ptr, struct gcc_options *opts)\n+{\n+  ptr->x_arm_arch_string = opts->x_arm_arch_string;\n+  ptr->x_arm_cpu_string = opts->x_arm_cpu_string;\n+  ptr->x_arm_tune_string = opts->x_arm_tune_string;\n+}\n+\n+/* Implement TARGET_OPTION_RESTORE.  */\n static void\n-arm_option_restore (struct gcc_options *, struct cl_target_option *ptr)\n+arm_option_restore (struct gcc_options *opts, struct cl_target_option *ptr)\n {\n+  opts->x_arm_arch_string = ptr->x_arm_arch_string;\n+  opts->x_arm_cpu_string = ptr->x_arm_cpu_string;\n+  opts->x_arm_tune_string = ptr->x_arm_tune_string;\n   arm_configure_build_target (&arm_active_target, ptr, &global_options_set,\n \t\t\t      false);\n }\n@@ -3022,6 +3039,46 @@ arm_initialize_isa (sbitmap isa, const enum isa_feature *isa_bits)\n     bitmap_set_bit (isa, *(isa_bits++));\n }\n \n+/* List the permitted CPU or architecture names.  If TARGET is a near\n+   miss for an entry, print out the suggested alternative.  */\n+static void\n+arm_print_hint_for_core_or_arch (const char *target,\n+\t\t\t\t const struct processors *list)\n+{\n+  auto_vec<const char*> candidates;\n+  for (; list->name != NULL; list++)\n+    candidates.safe_push (list->name);\n+  char *s;\n+  const char *hint = candidates_list_and_hint (target, s, candidates);\n+  if (hint)\n+    inform (input_location, \"valid arguments are: %s; did you mean %qs?\",\n+\t    s, hint);\n+  else\n+    inform (input_location, \"valid arguments are: %s\", s);\n+\n+  XDELETEVEC (s);\n+}\n+\n+/* Parse the base component of a CPU or architecture selection in\n+   LIST.  Return a pointer to the entry in the architecture table.\n+   OPTNAME is the name of the option we are parsing and can be used if\n+   a diagnostic is needed.  */\n+static const struct processors *\n+arm_parse_arch_cpu_name (const struct processors *list, const char *optname,\n+\t\t\t const char *target)\n+{\n+  const struct processors *entry;\n+  for (entry = list; entry->name != NULL; entry++)\n+    {\n+      if (streq (entry->name, target))\n+\treturn entry;\n+    }\n+\n+  error_at (input_location, \"unrecognized %s target: %s\", optname, target);\n+  arm_print_hint_for_core_or_arch (target, list);\n+  return NULL;\n+}\n+\n static sbitmap isa_all_fpubits;\n static sbitmap isa_quirkbits;\n \n@@ -3043,17 +3100,20 @@ arm_configure_build_target (struct arm_build_target *target,\n   target->core_name = NULL;\n   target->arch_name = NULL;\n \n-  if (opts_set->x_arm_arch_option)\n-    arm_selected_arch = &all_architectures[opts->x_arm_arch_option];\n-\n-  if (opts_set->x_arm_cpu_option)\n+  if (opts_set->x_arm_arch_string)\n+    arm_selected_arch = arm_parse_arch_cpu_name (all_architectures,\n+\t\t\t\t\t\t \"-march\",\n+\t\t\t\t\t\t opts->x_arm_arch_string);\n+  if (opts_set->x_arm_cpu_string)\n     {\n-      arm_selected_cpu = &all_cores[(int) opts->x_arm_cpu_option];\n-      arm_selected_tune = &all_cores[(int) opts->x_arm_cpu_option];\n+      arm_selected_cpu = arm_parse_arch_cpu_name (all_cores, \"-mcpu\",\n+\t\t\t\t\t\t  opts->x_arm_cpu_string);\n+      arm_selected_tune = arm_selected_cpu;\n     }\n \n-  if (opts_set->x_arm_tune_option)\n-    arm_selected_tune = &all_cores[(int) opts->x_arm_tune_option];\n+  if (opts_set->x_arm_tune_string)\n+    arm_selected_tune = arm_parse_arch_cpu_name (all_cores, \"-mtune\",\n+\t\t\t\t\t\t opts->x_arm_tune_string);\n \n   if (arm_selected_arch)\n     {\n@@ -30368,11 +30428,23 @@ arm_option_print (FILE *file, int indent, struct cl_target_option *ptr)\n   fpu_name = (ptr->x_arm_fpu_index == TARGET_FPU_auto\n \t      ? \"auto\" : all_fpus[ptr->x_arm_fpu_index].name);\n \n-  fprintf (file, \"%*sselected arch %s\\n\", indent, \"\",\n+  fprintf (file, \"%*sselected isa %s\\n\", indent, \"\",\n \t   TARGET_THUMB2_P (flags) ? \"thumb2\" :\n \t   TARGET_THUMB_P (flags) ? \"thumb1\" :\n \t   \"arm\");\n \n+  if (ptr->x_arm_arch_string)\n+    fprintf (file, \"%*sselected architecture %s\\n\", indent, \"\",\n+\t     ptr->x_arm_arch_string);\n+\n+  if (ptr->x_arm_cpu_string)\n+    fprintf (file, \"%*sselected CPU %s\\n\", indent, \"\",\n+\t     ptr->x_arm_cpu_string);\n+\n+  if (ptr->x_arm_tune_string)\n+    fprintf (file, \"%*sselected tune %s\\n\", indent, \"\",\n+\t     ptr->x_arm_tune_string);\n+\n   fprintf (file, \"%*sselected fpu %s\\n\", indent, \"\", fpu_name);\n }\n "}, {"sha": "efee1bef8d5b902f686a988ed03733bc1bcd7f8f", "filename": "gcc/config/arm/arm.opt", "status": "modified", "additions": 12, "deletions": 3, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/80448ef60264c49c8b08e700b64a5d338d3806ba/gcc%2Fconfig%2Farm%2Farm.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/80448ef60264c49c8b08e700b64a5d338d3806ba/gcc%2Fconfig%2Farm%2Farm.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.opt?ref=80448ef60264c49c8b08e700b64a5d338d3806ba", "patch": "@@ -21,6 +21,15 @@\n HeaderInclude\n config/arm/arm-opts.h\n \n+TargetSave\n+const char *x_arm_arch_string\n+\n+TargetSave\n+const char *x_arm_cpu_string\n+\n+TargetSave\n+const char *x_arm_tune_string\n+\n Enum\n Name(tls_type) Type(enum arm_tls_type)\n TLS dialect to use:\n@@ -73,7 +82,7 @@ mapcs-stack-check\n Target Report Mask(APCS_STACK) Undocumented\n \n march=\n-Target RejectNegative ToLower Joined Enum(arm_arch) Var(arm_arch_option) Save\n+Target RejectNegative ToLower Joined Var(arm_arch_string)\n Specify the name of the target architecture.\n \n ; Other arm_arch values are loaded from arm-tables.opt\n@@ -98,7 +107,7 @@ Target Report Mask(CALLER_INTERWORKING)\n Thumb: Assume function pointers may go to non-Thumb aware code.\n \n mcpu=\n-Target RejectNegative ToLower Joined Enum(processor_type) Var(arm_cpu_option) Init(TARGET_CPU_arm_none) Save\n+Target RejectNegative ToLower Joined Var(arm_cpu_string)\n Specify the name of the target CPU.\n \n mfloat-abi=\n@@ -223,7 +232,7 @@ Target Report Mask(TPCS_LEAF_FRAME)\n Thumb: Generate (leaf) stack frames even if not needed.\n \n mtune=\n-Target RejectNegative ToLower Joined Enum(processor_type) Var(arm_tune_option) Init(TARGET_CPU_arm_none) Save\n+Target RejectNegative ToLower Joined Var(arm_tune_string)\n Tune code for the given processor.\n \n mprint-tune-info"}]}