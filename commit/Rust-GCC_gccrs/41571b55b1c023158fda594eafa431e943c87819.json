{"sha": "41571b55b1c023158fda594eafa431e943c87819", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDE1NzFiNTViMWMwMjMxNThmZGE1OTRlYWZhNDMxZTk0M2M4NzgxOQ==", "commit": {"author": {"name": "David Malcolm", "email": "dmalcolm@redhat.com", "date": "2015-06-17T16:04:18Z"}, "committer": {"name": "David Malcolm", "email": "dmalcolm@gcc.gnu.org", "date": "2015-06-17T16:04:18Z"}, "message": "jit: Add missing type-checking to gcc_jit_{l|r}value_access_field\n\ngcc/jit/ChangeLog:\n\t* libgccjit.c (gcc_jit_lvalue_access_field): Verify that the field\n\tis for the correct struct.\n\t(gcc_jit_rvalue_access_field): Likewise.\n\ngcc/testsuite/ChangeLog:\n\t* jit.dg/test-error-accessing-field-in-other-struct.c: Rename to...\n\t* jit.dg/test-error-gcc_jit_rvalue_dereference_field-wrong-struct.c:\n\t...this.\n\t* jit.dg/test-error-gcc_jit_lvalue_access_field-wrong-struct.c:\n\tNew testcase.\n\t* jit.dg/test-error-gcc_jit_rvalue_access_field-wrong-struct.c:\n\tNew testcase.\n\nFrom-SVN: r224565", "tree": {"sha": "10a4226e3f1ed7c7916021c9e43f14c899f827d4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/10a4226e3f1ed7c7916021c9e43f14c899f827d4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/41571b55b1c023158fda594eafa431e943c87819", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/41571b55b1c023158fda594eafa431e943c87819", "html_url": "https://github.com/Rust-GCC/gccrs/commit/41571b55b1c023158fda594eafa431e943c87819", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/41571b55b1c023158fda594eafa431e943c87819/comments", "author": {"login": "davidmalcolm", "id": 1553248, "node_id": "MDQ6VXNlcjE1NTMyNDg=", "avatar_url": "https://avatars.githubusercontent.com/u/1553248?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidmalcolm", "html_url": "https://github.com/davidmalcolm", "followers_url": "https://api.github.com/users/davidmalcolm/followers", "following_url": "https://api.github.com/users/davidmalcolm/following{/other_user}", "gists_url": "https://api.github.com/users/davidmalcolm/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidmalcolm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidmalcolm/subscriptions", "organizations_url": "https://api.github.com/users/davidmalcolm/orgs", "repos_url": "https://api.github.com/users/davidmalcolm/repos", "events_url": "https://api.github.com/users/davidmalcolm/events{/privacy}", "received_events_url": "https://api.github.com/users/davidmalcolm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "ee47f74ef0e961a0168e830919606981ef331c52", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ee47f74ef0e961a0168e830919606981ef331c52", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ee47f74ef0e961a0168e830919606981ef331c52"}], "stats": {"total": 255, "additions": 255, "deletions": 0}, "files": [{"sha": "a131171a34200cc739177303cc0767673da09705", "filename": "gcc/jit/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/41571b55b1c023158fda594eafa431e943c87819/gcc%2Fjit%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/41571b55b1c023158fda594eafa431e943c87819/gcc%2Fjit%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjit%2FChangeLog?ref=41571b55b1c023158fda594eafa431e943c87819", "patch": "@@ -1,3 +1,9 @@\n+2015-06-17  David Malcolm  <dmalcolm@redhat.com>\n+\n+\t* libgccjit.c (gcc_jit_lvalue_access_field): Verify that the field\n+\tis for the correct struct.\n+\t(gcc_jit_rvalue_access_field): Likewise.\n+\n 2015-06-17  Andrew MacLeod  <amacleod@redhat.com>\n \n \t* dummy-frontend.c: Do not include input.h, line-map.h or is-a.h."}, {"sha": "dedf942ebaaa74b51178b538e12f5698adb510d4", "filename": "gcc/jit/libgccjit.c", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/41571b55b1c023158fda594eafa431e943c87819/gcc%2Fjit%2Flibgccjit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/41571b55b1c023158fda594eafa431e943c87819/gcc%2Fjit%2Flibgccjit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjit%2Flibgccjit.c?ref=41571b55b1c023158fda594eafa431e943c87819", "patch": "@@ -1671,6 +1671,15 @@ gcc_jit_lvalue_access_field (gcc_jit_lvalue *struct_,\n   RETURN_NULL_IF_FAIL_PRINTF1 (field->get_container (), field->m_ctxt, loc,\n \t\t\t       \"field %s has not been placed in a struct\",\n \t\t\t       field->get_debug_string ());\n+  gcc::jit::recording::type *underlying_type =\n+    struct_->get_type ();\n+  RETURN_NULL_IF_FAIL_PRINTF2 (\n+    (field->get_container ()->unqualified ()\n+     == underlying_type->unqualified ()),\n+    struct_->m_ctxt, loc,\n+    \"%s is not a field of %s\",\n+    field->get_debug_string (),\n+    underlying_type->get_debug_string ());\n \n   return (gcc_jit_lvalue *)struct_->access_field (loc, field);\n }\n@@ -1694,6 +1703,15 @@ gcc_jit_rvalue_access_field (gcc_jit_rvalue *struct_,\n   RETURN_NULL_IF_FAIL_PRINTF1 (field->get_container (), field->m_ctxt, loc,\n \t\t\t       \"field %s has not been placed in a struct\",\n \t\t\t       field->get_debug_string ());\n+  gcc::jit::recording::type *underlying_type =\n+    struct_->get_type ();\n+  RETURN_NULL_IF_FAIL_PRINTF2 (\n+    (field->get_container ()->unqualified ()\n+     == underlying_type->unqualified ()),\n+    struct_->m_ctxt, loc,\n+    \"%s is not a field of %s\",\n+    field->get_debug_string (),\n+    underlying_type->get_debug_string ());\n \n   return (gcc_jit_rvalue *)struct_->access_field (loc, field);\n }"}, {"sha": "bc86c88e1e0bfc2b8c3ceafe3fa57d2358c1a2ae", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/41571b55b1c023158fda594eafa431e943c87819/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/41571b55b1c023158fda594eafa431e943c87819/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=41571b55b1c023158fda594eafa431e943c87819", "patch": "@@ -1,3 +1,13 @@\n+2015-06-17  David Malcolm  <dmalcolm@redhat.com>\n+\n+\t* jit.dg/test-error-accessing-field-in-other-struct.c: Rename to...\n+\t* jit.dg/test-error-gcc_jit_rvalue_dereference_field-wrong-struct.c:\n+\t...this.\n+\t* jit.dg/test-error-gcc_jit_lvalue_access_field-wrong-struct.c:\n+\tNew testcase.\n+\t* jit.dg/test-error-gcc_jit_rvalue_access_field-wrong-struct.c:\n+\tNew testcase.\n+\n 2015-06-17  Uros Bizjak  <ubizjak@gmail.com>\n \n \tPR testsuite/65944"}, {"sha": "b47571e4917a8eb4e6ca9d15644df9b267ca20f3", "filename": "gcc/testsuite/jit.dg/test-error-gcc_jit_lvalue_access_field-wrong-struct.c", "status": "added", "additions": 111, "deletions": 0, "changes": 111, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/41571b55b1c023158fda594eafa431e943c87819/gcc%2Ftestsuite%2Fjit.dg%2Ftest-error-gcc_jit_lvalue_access_field-wrong-struct.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/41571b55b1c023158fda594eafa431e943c87819/gcc%2Ftestsuite%2Fjit.dg%2Ftest-error-gcc_jit_lvalue_access_field-wrong-struct.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fjit.dg%2Ftest-error-gcc_jit_lvalue_access_field-wrong-struct.c?ref=41571b55b1c023158fda594eafa431e943c87819", "patch": "@@ -0,0 +1,111 @@\n+#include <stdlib.h>\n+#include <stdio.h>\n+\n+#include \"libgccjit.h\"\n+\n+#include \"harness.h\"\n+\n+struct foo\n+{\n+  int x;\n+  int y;\n+};\n+\n+struct bar\n+{\n+  int p;\n+  int q;\n+};\n+\n+void\n+create_code (gcc_jit_context *ctxt, void *user_data)\n+{\n+  /* Let's try to inject the equivalent of:\n+     void\n+     test_bogus_access (struct foo f)\n+     {\n+       f.p = f.x;\n+     }\n+     i.e. using the wrong struct for the LHS.\n+  */\n+  gcc_jit_type *void_type =\n+    gcc_jit_context_get_type (ctxt, GCC_JIT_TYPE_VOID);\n+  gcc_jit_type *int_type =\n+    gcc_jit_context_get_type (ctxt, GCC_JIT_TYPE_INT);\n+\n+  /* Map \"struct foo\".  */\n+  gcc_jit_field *x =\n+    gcc_jit_context_new_field (ctxt,\n+\t\t\t       NULL,\n+\t\t\t       int_type,\n+\t\t\t       \"x\");\n+  gcc_jit_field *y =\n+    gcc_jit_context_new_field (ctxt,\n+\t\t\t       NULL,\n+\t\t\t       int_type,\n+\t\t\t       \"y\");\n+  gcc_jit_field *foo_fields[] = {x, y};\n+  gcc_jit_struct *struct_foo =\n+    gcc_jit_context_new_struct_type (ctxt, NULL, \"foo\", 2, foo_fields);\n+\n+  /* Map \"struct bar\".  */\n+  gcc_jit_field *p =\n+    gcc_jit_context_new_field (ctxt,\n+\t\t\t       NULL,\n+\t\t\t       int_type,\n+\t\t\t       \"p\");\n+  gcc_jit_field *q =\n+    gcc_jit_context_new_field (ctxt,\n+\t\t\t       NULL,\n+\t\t\t       int_type,\n+\t\t\t       \"q\");\n+  /* We don't actually need a gcc_jit_type for \"struct bar\" for the test.  */\n+  gcc_jit_field *bar_fields[] = {p, q};\n+  (void)gcc_jit_context_new_struct_type (ctxt, NULL, \"foo\", 2, bar_fields);\n+\n+  /* Build the test function.  */\n+  gcc_jit_param *param_f =\n+    gcc_jit_context_new_param (ctxt, NULL,\n+\t\t\t       gcc_jit_struct_as_type (struct_foo), \"f\");\n+  gcc_jit_function *test_fn =\n+    gcc_jit_context_new_function (ctxt, NULL,\n+\t\t\t\t  GCC_JIT_FUNCTION_EXPORTED,\n+\t\t\t\t  void_type,\n+\t\t\t\t  \"test_bogus_access\",\n+\t\t\t\t  1, &param_f,\n+\t\t\t\t  0);\n+\n+  /* Erroneous: f.p = ... */\n+  gcc_jit_lvalue *lvalue =\n+    gcc_jit_lvalue_access_field (\n+      gcc_jit_param_as_lvalue (param_f),\n+      NULL,\n+      p);\n+\n+  /* OK: ... = f.x; */\n+  gcc_jit_rvalue *rvalue =\n+    gcc_jit_lvalue_as_rvalue (\n+      gcc_jit_lvalue_access_field (\n+\tgcc_jit_param_as_lvalue (param_f),\n+\tNULL,\n+\tx));\n+\n+  gcc_jit_block *block =\n+    gcc_jit_function_new_block (test_fn, NULL);\n+  gcc_jit_block_add_assignment (\n+    block,\n+    NULL,\n+    lvalue, rvalue);\n+  gcc_jit_block_end_with_void_return (block, NULL);\n+}\n+\n+void\n+verify_code (gcc_jit_context *ctxt, gcc_jit_result *result)\n+{\n+  CHECK_VALUE (result, NULL);\n+\n+  /* Verify that the correct error message was emitted.  */\n+  CHECK_STRING_VALUE (gcc_jit_context_get_first_error (ctxt),\n+\t\t      \"gcc_jit_lvalue_access_field:\"\n+\t\t      \" p is not a field of struct foo\");\n+}"}, {"sha": "c09acfb52cadb3c265f169d2fe390b7aee30a94d", "filename": "gcc/testsuite/jit.dg/test-error-gcc_jit_rvalue_access_field-wrong-struct.c", "status": "added", "additions": 110, "deletions": 0, "changes": 110, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/41571b55b1c023158fda594eafa431e943c87819/gcc%2Ftestsuite%2Fjit.dg%2Ftest-error-gcc_jit_rvalue_access_field-wrong-struct.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/41571b55b1c023158fda594eafa431e943c87819/gcc%2Ftestsuite%2Fjit.dg%2Ftest-error-gcc_jit_rvalue_access_field-wrong-struct.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fjit.dg%2Ftest-error-gcc_jit_rvalue_access_field-wrong-struct.c?ref=41571b55b1c023158fda594eafa431e943c87819", "patch": "@@ -0,0 +1,110 @@\n+#include <stdlib.h>\n+#include <stdio.h>\n+\n+#include \"libgccjit.h\"\n+\n+#include \"harness.h\"\n+\n+struct foo\n+{\n+  int x;\n+  int y;\n+};\n+\n+struct bar\n+{\n+  int p;\n+  int q;\n+};\n+\n+void\n+create_code (gcc_jit_context *ctxt, void *user_data)\n+{\n+  /* Let's try to inject the equivalent of:\n+     void\n+     test_bogus_access (struct foo f)\n+     {\n+       f.x = f.p;\n+     }\n+     i.e. using the wrong struct for the RHS.\n+  */\n+  gcc_jit_type *void_type =\n+    gcc_jit_context_get_type (ctxt, GCC_JIT_TYPE_VOID);\n+  gcc_jit_type *int_type =\n+    gcc_jit_context_get_type (ctxt, GCC_JIT_TYPE_INT);\n+\n+  /* Map \"struct foo\".  */\n+  gcc_jit_field *x =\n+    gcc_jit_context_new_field (ctxt,\n+\t\t\t       NULL,\n+\t\t\t       int_type,\n+\t\t\t       \"x\");\n+  gcc_jit_field *y =\n+    gcc_jit_context_new_field (ctxt,\n+\t\t\t       NULL,\n+\t\t\t       int_type,\n+\t\t\t       \"y\");\n+  gcc_jit_field *foo_fields[] = {x, y};\n+  gcc_jit_struct *struct_foo =\n+    gcc_jit_context_new_struct_type (ctxt, NULL, \"foo\", 2, foo_fields);\n+\n+  /* Map \"struct bar\".  */\n+  gcc_jit_field *p =\n+    gcc_jit_context_new_field (ctxt,\n+\t\t\t       NULL,\n+\t\t\t       int_type,\n+\t\t\t       \"p\");\n+  gcc_jit_field *q =\n+    gcc_jit_context_new_field (ctxt,\n+\t\t\t       NULL,\n+\t\t\t       int_type,\n+\t\t\t       \"q\");\n+  /* We don't actually need a gcc_jit_type for \"struct bar\" for the test.  */\n+  gcc_jit_field *bar_fields[] = {p, q};\n+  (void)gcc_jit_context_new_struct_type (ctxt, NULL, \"foo\", 2, bar_fields);\n+\n+  /* Build the test function.  */\n+  gcc_jit_param *param_f =\n+    gcc_jit_context_new_param (ctxt, NULL,\n+\t\t\t       gcc_jit_struct_as_type (struct_foo), \"f\");\n+  gcc_jit_function *test_fn =\n+    gcc_jit_context_new_function (ctxt, NULL,\n+\t\t\t\t  GCC_JIT_FUNCTION_EXPORTED,\n+\t\t\t\t  void_type,\n+\t\t\t\t  \"test_bogus_access\",\n+\t\t\t\t  1, &param_f,\n+\t\t\t\t  0);\n+\n+  /* OK: f.x = ... */\n+  gcc_jit_lvalue *lvalue =\n+    gcc_jit_lvalue_access_field (\n+      gcc_jit_param_as_lvalue (param_f),\n+      NULL,\n+      x);\n+\n+  /* Erroneous: ... = f.p; */\n+  gcc_jit_rvalue *rvalue =\n+      gcc_jit_rvalue_access_field (\n+\tgcc_jit_param_as_rvalue (param_f),\n+\tNULL,\n+\tp);\n+\n+  gcc_jit_block *block =\n+    gcc_jit_function_new_block (test_fn, NULL);\n+  gcc_jit_block_add_assignment (\n+    block,\n+    NULL,\n+    lvalue, rvalue);\n+  gcc_jit_block_end_with_void_return (block, NULL);\n+}\n+\n+void\n+verify_code (gcc_jit_context *ctxt, gcc_jit_result *result)\n+{\n+  CHECK_VALUE (result, NULL);\n+\n+  /* Verify that the correct error message was emitted.  */\n+  CHECK_STRING_VALUE (gcc_jit_context_get_first_error (ctxt),\n+\t\t      \"gcc_jit_rvalue_access_field:\"\n+\t\t      \" p is not a field of struct foo\");\n+}"}, {"sha": "f10954b434c119a8f0f0d1e2aa661beb841fe95a", "filename": "gcc/testsuite/jit.dg/test-error-gcc_jit_rvalue_dereference_field-wrong-struct.c", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/41571b55b1c023158fda594eafa431e943c87819/gcc%2Ftestsuite%2Fjit.dg%2Ftest-error-gcc_jit_rvalue_dereference_field-wrong-struct.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/41571b55b1c023158fda594eafa431e943c87819/gcc%2Ftestsuite%2Fjit.dg%2Ftest-error-gcc_jit_rvalue_dereference_field-wrong-struct.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fjit.dg%2Ftest-error-gcc_jit_rvalue_dereference_field-wrong-struct.c?ref=41571b55b1c023158fda594eafa431e943c87819", "previous_filename": "gcc/testsuite/jit.dg/test-error-accessing-field-in-other-struct.c"}]}