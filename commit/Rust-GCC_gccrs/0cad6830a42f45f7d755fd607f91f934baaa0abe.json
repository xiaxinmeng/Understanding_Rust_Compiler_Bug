{"sha": "0cad6830a42f45f7d755fd607f91f934baaa0abe", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGNhZDY4MzBhNDJmNDVmN2Q3NTVmZDYwN2Y5MWY5MzRiYWFhMGFiZQ==", "commit": {"author": {"name": "Bernd Edlinger", "email": "bernd.edlinger@hotmail.de", "date": "2013-10-21T15:57:05Z"}, "committer": {"name": "Bernd Edlinger", "email": "edlinger@gcc.gnu.org", "date": "2013-10-21T15:57:05Z"}, "message": "Fix volatile issues in optimize_bit_field_compare.\n\n2013-10-21  Bernd Edlinger  <bernd.edlinger@hotmail.de>\n\n        Fix volatile issues in optimize_bit_field_compare.\n        * fold-const.c (optimize_bit_field_compare): Bail out if\n        lvolatilep or rvolatilep.\n\nFrom-SVN: r203899", "tree": {"sha": "5c2c938a6b01353b413b726cd5724b4f715e5cf7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5c2c938a6b01353b413b726cd5724b4f715e5cf7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0cad6830a42f45f7d755fd607f91f934baaa0abe", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0cad6830a42f45f7d755fd607f91f934baaa0abe", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0cad6830a42f45f7d755fd607f91f934baaa0abe", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0cad6830a42f45f7d755fd607f91f934baaa0abe/comments", "author": {"login": "bernd-edlinger", "id": 17638929, "node_id": "MDQ6VXNlcjE3NjM4OTI5", "avatar_url": "https://avatars.githubusercontent.com/u/17638929?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bernd-edlinger", "html_url": "https://github.com/bernd-edlinger", "followers_url": "https://api.github.com/users/bernd-edlinger/followers", "following_url": "https://api.github.com/users/bernd-edlinger/following{/other_user}", "gists_url": "https://api.github.com/users/bernd-edlinger/gists{/gist_id}", "starred_url": "https://api.github.com/users/bernd-edlinger/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bernd-edlinger/subscriptions", "organizations_url": "https://api.github.com/users/bernd-edlinger/orgs", "repos_url": "https://api.github.com/users/bernd-edlinger/repos", "events_url": "https://api.github.com/users/bernd-edlinger/events{/privacy}", "received_events_url": "https://api.github.com/users/bernd-edlinger/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "5dfd32cddaa43eeda595dba8dff86ae1794f0830", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5dfd32cddaa43eeda595dba8dff86ae1794f0830", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5dfd32cddaa43eeda595dba8dff86ae1794f0830"}], "stats": {"total": 35, "additions": 13, "deletions": 22}, "files": [{"sha": "e839517732c14b0f8e51d03cbc310c89b3c8461b", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0cad6830a42f45f7d755fd607f91f934baaa0abe/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0cad6830a42f45f7d755fd607f91f934baaa0abe/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=0cad6830a42f45f7d755fd607f91f934baaa0abe", "patch": "@@ -1,3 +1,9 @@\n+2013-10-21  Bernd Edlinger  <bernd.edlinger@hotmail.de>\n+\n+\tFix volatile issues in optimize_bit_field_compare.\n+\t* fold-const.c (optimize_bit_field_compare): Bail out if\n+\tlvolatilep or rvolatilep.\n+\n 2013-10-21  Bernd Edlinger  <bernd.edlinger@hotmail.de>\n \n \tFix DECL_BIT_FIELD depencency on flag_strict_volatile_bitfields"}, {"sha": "2c2b929d6e296d4d4f23508e70c773bbbd86ab64", "filename": "gcc/fold-const.c", "status": "modified", "additions": 7, "deletions": 22, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0cad6830a42f45f7d755fd607f91f934baaa0abe/gcc%2Ffold-const.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0cad6830a42f45f7d755fd607f91f934baaa0abe/gcc%2Ffold-const.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffold-const.c?ref=0cad6830a42f45f7d755fd607f91f934baaa0abe", "patch": "@@ -3473,11 +3473,6 @@ optimize_bit_field_compare (location_t loc, enum tree_code code,\n   tree mask;\n   tree offset;\n \n-  /* In the strict volatile bitfields case, doing code changes here may prevent\n-     other optimizations, in particular in a SLOW_BYTE_ACCESS setting.  */\n-  if (flag_strict_volatile_bitfields > 0)\n-    return 0;\n-\n   /* Get all the information about the extractions being done.  If the bit size\n      if the same as the size of the underlying object, we aren't doing an\n      extraction at all and so can do nothing.  We also don't want to\n@@ -3486,7 +3481,7 @@ optimize_bit_field_compare (location_t loc, enum tree_code code,\n   linner = get_inner_reference (lhs, &lbitsize, &lbitpos, &offset, &lmode,\n \t\t\t\t&lunsignedp, &lvolatilep, false);\n   if (linner == lhs || lbitsize == GET_MODE_BITSIZE (lmode) || lbitsize < 0\n-      || offset != 0 || TREE_CODE (linner) == PLACEHOLDER_EXPR)\n+      || offset != 0 || TREE_CODE (linner) == PLACEHOLDER_EXPR || lvolatilep)\n     return 0;\n \n  if (!const_p)\n@@ -3498,22 +3493,17 @@ optimize_bit_field_compare (location_t loc, enum tree_code code,\n \n      if (rinner == rhs || lbitpos != rbitpos || lbitsize != rbitsize\n \t || lunsignedp != runsignedp || offset != 0\n-\t || TREE_CODE (rinner) == PLACEHOLDER_EXPR)\n+\t || TREE_CODE (rinner) == PLACEHOLDER_EXPR || rvolatilep)\n        return 0;\n    }\n \n   /* See if we can find a mode to refer to this field.  We should be able to,\n      but fail if we can't.  */\n-  if (lvolatilep\n-      && GET_MODE_BITSIZE (lmode) > 0\n-      && flag_strict_volatile_bitfields > 0)\n-    nmode = lmode;\n-  else\n-    nmode = get_best_mode (lbitsize, lbitpos, 0, 0,\n-\t\t\t   const_p ? TYPE_ALIGN (TREE_TYPE (linner))\n-\t\t\t   : MIN (TYPE_ALIGN (TREE_TYPE (linner)),\n-\t\t\t\t  TYPE_ALIGN (TREE_TYPE (rinner))),\n-\t\t\t   word_mode, lvolatilep || rvolatilep);\n+  nmode = get_best_mode (lbitsize, lbitpos, 0, 0,\n+\t\t\t const_p ? TYPE_ALIGN (TREE_TYPE (linner))\n+\t\t\t : MIN (TYPE_ALIGN (TREE_TYPE (linner)),\n+\t\t\t\tTYPE_ALIGN (TREE_TYPE (rinner))),\n+\t\t\t word_mode, false);\n   if (nmode == VOIDmode)\n     return 0;\n \n@@ -3602,11 +3592,6 @@ optimize_bit_field_compare (location_t loc, enum tree_code code,\n      appropriate number of bits and mask it with the computed mask\n      (in case this was a signed field).  If we changed it, make a new one.  */\n   lhs = make_bit_field_ref (loc, linner, unsigned_type, nbitsize, nbitpos, 1);\n-  if (lvolatilep)\n-    {\n-      TREE_SIDE_EFFECTS (lhs) = 1;\n-      TREE_THIS_VOLATILE (lhs) = 1;\n-    }\n \n   rhs = const_binop (BIT_AND_EXPR,\n \t\t     const_binop (LSHIFT_EXPR,"}]}