{"sha": "9a63901fb7b59ae76134fc07126b56f32f014f91", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWE2MzkwMWZiN2I1OWFlNzYxMzRmYzA3MTI2YjU2ZjMyZjAxNGY5MQ==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1993-09-25T12:29:59Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1993-09-25T12:29:59Z"}, "message": "Use WORD_REGISTER_OPERATION and LOAD_EXTEND_OP and delete\nBYTE_LOADS_{SIGN,ZERO}_EXTEND.\n\nFrom-SVN: r5477", "tree": {"sha": "223c9581bfd75a8f5e58e84493d080cc09064112", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/223c9581bfd75a8f5e58e84493d080cc09064112"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9a63901fb7b59ae76134fc07126b56f32f014f91", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9a63901fb7b59ae76134fc07126b56f32f014f91", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9a63901fb7b59ae76134fc07126b56f32f014f91", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9a63901fb7b59ae76134fc07126b56f32f014f91/comments", "author": null, "committer": null, "parents": [{"sha": "e90d3cbbcded0e203eb3af8785a1006c53ed4569", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e90d3cbbcded0e203eb3af8785a1006c53ed4569", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e90d3cbbcded0e203eb3af8785a1006c53ed4569"}], "stats": {"total": 147, "additions": 100, "deletions": 47}, "files": [{"sha": "95656cc1b4415f9d208aba2156699a6e8344b6ea", "filename": "gcc/config/a29k/a29k.h", "status": "modified", "additions": 9, "deletions": 3, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9a63901fb7b59ae76134fc07126b56f32f014f91/gcc%2Fconfig%2Fa29k%2Fa29k.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9a63901fb7b59ae76134fc07126b56f32f014f91/gcc%2Fconfig%2Fa29k%2Fa29k.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fa29k%2Fa29k.h?ref=9a63901fb7b59ae76134fc07126b56f32f014f91", "patch": "@@ -1204,9 +1204,15 @@ extern char *a29k_function_name;\n    manipulate fields.  */\n #define SLOW_BYTE_ACCESS\t0\n \n-/* Define if normal loads of shorter-than-word items from memory clears\n-   the rest of the bigs in the register.  */\n-#define BYTE_LOADS_ZERO_EXTEND\n+/* Define if operations between registers always perform the operation\n+   on the full register even if a narrower mode is specified.  */\n+#define WORD_REGISTER_OPERATIONS\n+\n+/* Define if loading in MODE, an integral mode narrower than BITS_PER_WORD\n+   will either zero-extend or sign-extend.  The value of this macro should\n+   be the code that says which one of the two operations is implicitly\n+   done, NIL if none.  */\n+#define LOAD_EXTEND_OP(MODE) ZERO_EXTEND\n \n /* Define if the object format being used is COFF or a superset.  */\n #define OBJECT_FORMAT_COFF"}, {"sha": "1758919bb169278f3249b79618eb5dd59ea05ed0", "filename": "gcc/config/alpha/alpha.h", "status": "modified", "additions": 9, "deletions": 7, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9a63901fb7b59ae76134fc07126b56f32f014f91/gcc%2Fconfig%2Falpha%2Falpha.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9a63901fb7b59ae76134fc07126b56f32f014f91/gcc%2Fconfig%2Falpha%2Falpha.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Falpha.h?ref=9a63901fb7b59ae76134fc07126b56f32f014f91", "patch": "@@ -1221,13 +1221,15 @@ extern char *current_function_name;\n \n #define SLOW_BYTE_ACCESS\t1\n \n-/* Define if normal loads of shorter-than-word items from memory clears\n-   the rest of the bits in the register.  */\n-/* #define BYTE_LOADS_ZERO_EXTEND  */\n-\n-/* Define if normal loads of shorter-than-word items from memory sign-extends\n-   the rest of the bits in the register.  */\n-#define BYTE_LOADS_SIGN_EXTEND\n+/* Define if operations between registers always perform the operation\n+   on the full register even if a narrower mode is specified.  */\n+#define WORD_REGISTER_OPERATIONS\n+\n+/* Define if loading in MODE, an integral mode narrower than BITS_PER_WORD\n+   will either zero-extend or sign-extend.  The value of this macro should\n+   be the code that says which one of the two operations is implicitly\n+   done, NIL if none.  */\n+#define LOAD_EXTEND_OP(MODE) SIGN_EXTEND\n \n /* Define if loading short immediate values into registers sign extends.  */\n #define SHORT_IMMEDIATES_SIGN_EXTEND"}, {"sha": "e2e06918524fb591a27b4df0396fdd614a5e7436", "filename": "gcc/config/arm/arm.h", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9a63901fb7b59ae76134fc07126b56f32f014f91/gcc%2Fconfig%2Farm%2Farm.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9a63901fb7b59ae76134fc07126b56f32f014f91/gcc%2Fconfig%2Farm%2Farm.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.h?ref=9a63901fb7b59ae76134fc07126b56f32f014f91", "patch": "@@ -1,5 +1,5 @@\n /* Definitions of target machine for GNU compiler, for Acorn RISC Machine.\n-   Copyright (C) 1991 Free Software Foundation, Inc.\n+   Copyright (C) 1991, 1993 Free Software Foundation, Inc.\n    Contributed by Pieter `Tiggr' Schoenmakers (rcpieter@win.tue.nl)\n               and Martin Simmons (@harleqn.co.uk).\n \n@@ -848,11 +848,6 @@ do\t\t\t\t\t\t\t\t\t\\\n    in one reasonably fast instruction.  */\n #define MOVE_MAX 4\n \n-/* Define if normal loads of shorter-than-word items from memory clears\n-   the rest of the bigs in the register.\n-   On the ARM, movhi does a garbage extend.  */\n-/* #define BYTE_LOADS_ZERO_EXTEND */\n-\n /* Define this if zero-extension is slow (more than one real instruction).\n    On the ARM, it is more than one instruction only if not fetching from\n    memory.  */"}, {"sha": "06a6ffe00d7ceebf7aada1ce7a75ef4fb79f917d", "filename": "gcc/config/clipper/clipper.h", "status": "modified", "additions": 9, "deletions": 4, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9a63901fb7b59ae76134fc07126b56f32f014f91/gcc%2Fconfig%2Fclipper%2Fclipper.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9a63901fb7b59ae76134fc07126b56f32f014f91/gcc%2Fconfig%2Fclipper%2Fclipper.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fclipper%2Fclipper.h?ref=9a63901fb7b59ae76134fc07126b56f32f014f91", "patch": "@@ -773,10 +773,15 @@ do\t\t\t\t\t\t\t\t\t\\\n    jumps to the default label instead.  */\n /* #define CASE_DROPS_THROUGH */\n \n-/* Define this macro if an instruction to load a value narrower than a\n-   word from memory into a register also sign-extends the value to\n-   the whole register. */\n-#define BYTE_LOADS_SIGN_EXTEND\n+/* Define if operations between registers always perform the operation\n+   on the full register even if a narrower mode is specified.  */\n+#define WORD_REGISTER_OPERATIONS\n+\n+/* Define if loading in MODE, an integral mode narrower than BITS_PER_WORD\n+   will either zero-extend or sign-extend.  The value of this macro should\n+   be the code that says which one of the two operations is implicitly\n+   done, NIL if none.  */\n+#define LOAD_EXTEND_OP(MODE) SIGN_EXTEND\n \n /* Specify the tree operation to be used to convert reals to integers.  */\n #define IMPLICIT_FIX_EXPR FIX_ROUND_EXPR"}, {"sha": "d76a19f7fe7de1a11b6b8cf3a7d53295cbb35b23", "filename": "gcc/config/i960/i960.h", "status": "modified", "additions": 9, "deletions": 3, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9a63901fb7b59ae76134fc07126b56f32f014f91/gcc%2Fconfig%2Fi960%2Fi960.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9a63901fb7b59ae76134fc07126b56f32f014f91/gcc%2Fconfig%2Fi960%2Fi960.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi960%2Fi960.h?ref=9a63901fb7b59ae76134fc07126b56f32f014f91", "patch": "@@ -1055,9 +1055,15 @@ extern struct rtx_def *legitimize_address ();\n    in one reasonably fast instruction.  */\n #define MOVE_MAX 16\n \n-/* Define if normal loads of shorter-than-word items from memory clears\n-   the rest of the bigs in the register.  */\n-#define BYTE_LOADS_ZERO_EXTEND\n+/* Define if operations between registers always perform the operation\n+   on the full register even if a narrower mode is specified.  */\n+#define WORD_REGISTER_OPERATIONS\n+\n+/* Define if loading in MODE, an integral mode narrower than BITS_PER_WORD\n+   will either zero-extend or sign-extend.  The value of this macro should\n+   be the code that says which one of the two operations is implicitly\n+   done, NIL if none.  */\n+#define LOAD_EXTEND_OP(MODE) ZERO_EXTEND\n \n /* Nonzero if access to memory by bytes is no faster than for words.\n    Defining this results in worse code on the i960.  */"}, {"sha": "8573f1a62e1ded571947b145925518ba0b62a61e", "filename": "gcc/config/m88k/m88k.h", "status": "modified", "additions": 9, "deletions": 3, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9a63901fb7b59ae76134fc07126b56f32f014f91/gcc%2Fconfig%2Fm88k%2Fm88k.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9a63901fb7b59ae76134fc07126b56f32f014f91/gcc%2Fconfig%2Fm88k%2Fm88k.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm88k%2Fm88k.h?ref=9a63901fb7b59ae76134fc07126b56f32f014f91", "patch": "@@ -1508,9 +1508,15 @@ enum reg_class { NO_REGS, AP_REG, XRF_REGS, GENERAL_REGS, AGRF_REGS,\n    in one reasonably fast instruction.  */\n #define MOVE_MAX 8\n \n-/* Define if normal loads of shorter-than-word items from memory clears\n-   the rest of the bigs in the register.  */\n-#define BYTE_LOADS_ZERO_EXTEND\n+/* Define if operations between registers always perform the operation\n+   on the full register even if a narrower mode is specified.  */\n+#define WORD_REGISTER_OPERATIONS\n+\n+/* Define if loading in MODE, an integral mode narrower than BITS_PER_WORD\n+   will either zero-extend or sign-extend.  The value of this macro should\n+   be the code that says which one of the two operations is implicitly\n+   done, NIL if none.  */\n+#define LOAD_EXTEND_OP(MODE) ZERO_EXTEND\n \n /* Zero if access to memory by bytes is faster.  */\n #define SLOW_BYTE_ACCESS 1"}, {"sha": "11c47bee3a0d2e76dc954ebcdb110dfdda7e362d", "filename": "gcc/config/mips/mips.h", "status": "modified", "additions": 9, "deletions": 6, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9a63901fb7b59ae76134fc07126b56f32f014f91/gcc%2Fconfig%2Fmips%2Fmips.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9a63901fb7b59ae76134fc07126b56f32f014f91/gcc%2Fconfig%2Fmips%2Fmips.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.h?ref=9a63901fb7b59ae76134fc07126b56f32f014f91", "patch": "@@ -1049,12 +1049,15 @@ do {\t\t\t\t\t\t\t\\\n \n #define PROMOTE_PROTOTYPES\n \n-/* Define this macro if an instruction to load a value narrower\n-   than a word from memory into a register also zero-extends the\n-   value to the whole  register.  */\n-\n-#define BYTE_LOADS_ZERO_EXTEND\n-\n+/* Define if operations between registers always perform the operation\n+   on the full register even if a narrower mode is specified.  */\n+#define WORD_REGISTER_OPERATIONS\n+\n+/* Define if loading in MODE, an integral mode narrower than BITS_PER_WORD\n+   will either zero-extend or sign-extend.  The value of this macro should\n+   be the code that says which one of the two operations is implicitly\n+   done, NIL if none.  */\n+#define LOAD_EXTEND_OP(MODE) ZERO_EXTEND\n \f\n /* Standard register usage.  */\n "}, {"sha": "551a6f7b14ebb00a831c8f7568326c459f0af31f", "filename": "gcc/config/pa/pa.h", "status": "modified", "additions": 9, "deletions": 3, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9a63901fb7b59ae76134fc07126b56f32f014f91/gcc%2Fconfig%2Fpa%2Fpa.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9a63901fb7b59ae76134fc07126b56f32f014f91/gcc%2Fconfig%2Fpa%2Fpa.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Fpa.h?ref=9a63901fb7b59ae76134fc07126b56f32f014f91", "patch": "@@ -1367,9 +1367,15 @@ while (0)\n    in one reasonably fast instruction.  */\n #define MOVE_MAX 8\n \n-/* Define if normal loads of shorter-than-word items from memory clears\n-   the rest of the bigs in the register.  */\n-#define BYTE_LOADS_ZERO_EXTEND\n+/* Define if operations between registers always perform the operation\n+   on the full register even if a narrower mode is specified.  */\n+#define WORD_REGISTER_OPERATIONS\n+\n+/* Define if loading in MODE, an integral mode narrower than BITS_PER_WORD\n+   will either zero-extend or sign-extend.  The value of this macro should\n+   be the code that says which one of the two operations is implicitly\n+   done, NIL if none.  */\n+#define LOAD_EXTEND_OP(MODE) ZERO_EXTEND\n \n /* Nonzero if access to memory by bytes is slow and undesirable.  */\n #define SLOW_BYTE_ACCESS 1"}, {"sha": "c454b5e4a301ee1ab47dcfe39dd7420c16d2cc98", "filename": "gcc/config/romp/romp.h", "status": "modified", "additions": 9, "deletions": 3, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9a63901fb7b59ae76134fc07126b56f32f014f91/gcc%2Fconfig%2Fromp%2Fromp.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9a63901fb7b59ae76134fc07126b56f32f014f91/gcc%2Fconfig%2Fromp%2Fromp.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fromp%2Fromp.h?ref=9a63901fb7b59ae76134fc07126b56f32f014f91", "patch": "@@ -1186,9 +1186,15 @@ struct rt_cargs {int gregs, fregs; };\n    is undesirable.  */\n #define SLOW_BYTE_ACCESS 1\n \n-/* Define if normal loads of shorter-than-word items from memory clears\n-   the rest of the bigs in the register.  */\n-#define BYTE_LOADS_ZERO_EXTEND\n+/* Define if operations between registers always perform the operation\n+   on the full register even if a narrower mode is specified.  */\n+#define WORD_REGISTER_OPERATIONS\n+\n+/* Define if loading in MODE, an integral mode narrower than BITS_PER_WORD\n+   will either zero-extend or sign-extend.  The value of this macro should\n+   be the code that says which one of the two operations is implicitly\n+   done, NIL if none.  */\n+#define LOAD_EXTEND_OP(MODE) ZERO_EXTEND\n \n /* This is BSD, so it wants DBX format.  */\n #define DBX_DEBUGGING_INFO"}, {"sha": "5949ff64204210fdc47fe705b060056ecf220477", "filename": "gcc/config/rs6000/rs6000.h", "status": "modified", "additions": 9, "deletions": 3, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9a63901fb7b59ae76134fc07126b56f32f014f91/gcc%2Fconfig%2Frs6000%2Frs6000.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9a63901fb7b59ae76134fc07126b56f32f014f91/gcc%2Fconfig%2Frs6000%2Frs6000.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.h?ref=9a63901fb7b59ae76134fc07126b56f32f014f91", "patch": "@@ -1288,9 +1288,15 @@ struct rs6000_args {int words, fregno, nargs_prototype; };\n    is undesirable.  */\n #define SLOW_BYTE_ACCESS 1\n \n-/* Define if normal loads of shorter-than-word items from memory clears\n-   the rest of the bigs in the register.  */\n-#define BYTE_LOADS_ZERO_EXTEND\n+/* Define if operations between registers always perform the operation\n+   on the full register even if a narrower mode is specified.  */\n+#define WORD_REGISTER_OPERATIONS\n+\n+/* Define if loading in MODE, an integral mode narrower than BITS_PER_WORD\n+   will either zero-extend or sign-extend.  The value of this macro should\n+   be the code that says which one of the two operations is implicitly\n+   done, NIL if none.  */\n+#define LOAD_EXTEND_OP(MODE) ZERO_EXTEND\n \n /* Define if loading short immediate values into registers sign extends.  */\n #define SHORT_IMMEDIATES_SIGN_EXTEND"}, {"sha": "c1fdda9904481aa79009c42416acef113c237903", "filename": "gcc/config/sh/sh.h", "status": "modified", "additions": 9, "deletions": 3, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9a63901fb7b59ae76134fc07126b56f32f014f91/gcc%2Fconfig%2Fsh%2Fsh.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9a63901fb7b59ae76134fc07126b56f32f014f91/gcc%2Fconfig%2Fsh%2Fsh.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fsh.h?ref=9a63901fb7b59ae76134fc07126b56f32f014f91", "patch": "@@ -902,9 +902,15 @@ extern int current_function_anonymous_args;\n    in one reasonably fast instruction.  */\n #define MOVE_MAX 4\n \n-/* Define if normal loads of shorter-than-word items from sign extends\n-   the rest of the bigs in the register. */\n-#define BYTE_LOADS_SIGN_EXTEND  1\n+/* Define if operations between registers always perform the operation\n+   on the full register even if a narrower mode is specified.  */\n+#define WORD_REGISTER_OPERATIONS\n+\n+/* Define if loading in MODE, an integral mode narrower than BITS_PER_WORD\n+   will either zero-extend or sign-extend.  The value of this macro should\n+   be the code that says which one of the two operations is implicitly\n+   done, NIL if none.  */\n+#define LOAD_EXTEND_OP(MODE) SIGN_EXTEND\n \n /* Define this if zero-extension is slow (more than one real instruction).\n    On the SH, it's only one instruction */"}, {"sha": "c615eaf0c53e91a8993a3b66028b0429ae44adb9", "filename": "gcc/config/sparc/sparc.h", "status": "modified", "additions": 9, "deletions": 3, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9a63901fb7b59ae76134fc07126b56f32f014f91/gcc%2Fconfig%2Fsparc%2Fsparc.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9a63901fb7b59ae76134fc07126b56f32f014f91/gcc%2Fconfig%2Fsparc%2Fsparc.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsparc.h?ref=9a63901fb7b59ae76134fc07126b56f32f014f91", "patch": "@@ -1348,9 +1348,15 @@ extern struct rtx_def *legitimize_pic_address ();\n   gen_rtx (MEM, SImode, gen_rtx (SYMBOL_REF, Pmode, \"errno\"))\n #endif /* 0 */\n \n-/* Define if normal loads of shorter-than-word items from memory clears\n-   the rest of the bigs in the register.  */\n-#define BYTE_LOADS_ZERO_EXTEND\n+/* Define if operations between registers always perform the operation\n+   on the full register even if a narrower mode is specified.  */\n+#define WORD_REGISTER_OPERATIONS\n+\n+/* Define if loading in MODE, an integral mode narrower than BITS_PER_WORD\n+   will either zero-extend or sign-extend.  The value of this macro should\n+   be the code that says which one of the two operations is implicitly\n+   done, NIL if none.  */\n+#define LOAD_EXTEND_OP(MODE) ZERO_EXTEND\n \n /* Nonzero if access to memory by bytes is slow and undesirable.\n    For RISC chips, it means that access to memory by bytes is no"}]}