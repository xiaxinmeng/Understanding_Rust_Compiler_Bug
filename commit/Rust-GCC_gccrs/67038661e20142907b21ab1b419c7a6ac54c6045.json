{"sha": "67038661e20142907b21ab1b419c7a6ac54c6045", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjcwMzg2NjFlMjAxNDI5MDdiMjFhYjFiNDE5YzdhNmFjNTRjNjA0NQ==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1995-10-27T01:54:34Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1995-10-27T01:54:34Z"}, "message": "(expand_call): Don't trust the callee to copy a TREE_ADDRESSABLE type.\n\nFrom-SVN: r10526", "tree": {"sha": "3fe14dd0d3aba069fef6313243c41c0dfe4aa4c8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3fe14dd0d3aba069fef6313243c41c0dfe4aa4c8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/67038661e20142907b21ab1b419c7a6ac54c6045", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/67038661e20142907b21ab1b419c7a6ac54c6045", "html_url": "https://github.com/Rust-GCC/gccrs/commit/67038661e20142907b21ab1b419c7a6ac54c6045", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/67038661e20142907b21ab1b419c7a6ac54c6045/comments", "author": null, "committer": null, "parents": [{"sha": "439eb7764a0c430e25c41920936520b35cbd0381", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/439eb7764a0c430e25c41920936520b35cbd0381", "html_url": "https://github.com/Rust-GCC/gccrs/commit/439eb7764a0c430e25c41920936520b35cbd0381"}], "stats": {"total": 3, "additions": 2, "deletions": 1}, "files": [{"sha": "ad05be4f7c0383ffce8ceccf8378b100dd2d43c7", "filename": "gcc/calls.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/67038661e20142907b21ab1b419c7a6ac54c6045/gcc%2Fcalls.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/67038661e20142907b21ab1b419c7a6ac54c6045/gcc%2Fcalls.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcalls.c?ref=67038661e20142907b21ab1b419c7a6ac54c6045", "patch": "@@ -1043,7 +1043,8 @@ expand_call (exp, target, ignore)\n \t      /* If it's in a register, we must make a copy of it too.  */\n \t      /* ??? Is this a sufficient test?  Is there a better one? */\n \t      && !(TREE_CODE (args[i].tree_value) == VAR_DECL\n-\t\t   && REG_P (DECL_RTL (args[i].tree_value))))\n+\t\t   && REG_P (DECL_RTL (args[i].tree_value)))\n+\t      && ! TREE_ADDRESSABLE (type))\n \t    {\n \t      args[i].tree_value = build1 (ADDR_EXPR,\n \t\t\t\t\t   build_pointer_type (type),"}]}