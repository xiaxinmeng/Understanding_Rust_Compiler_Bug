{"sha": "1b9a5cc9ec08e9f239dd2096edcc447b7a72f64a", "node_id": "C_kwDOANBUbNoAKDFiOWE1Y2M5ZWMwOGU5ZjIzOWRkMjA5NmVkY2M0NDdiN2E3MmY2NGE", "commit": {"author": {"name": "Cui,Lili", "email": "lili.cui@intel.com", "date": "2022-11-01T01:16:49Z"}, "committer": {"name": "Cui,Lili", "email": "lili.cui@intel.com", "date": "2022-11-01T01:21:40Z"}, "message": "Add attribute hot judgement for INLINE_HINT_known_hot hint.\n\nWe set up INLINE_HINT_known_hot hint only when we have profile feedback,\nnow add function attribute judgement for it, when both caller and callee\nhave __attribute__((hot)), we will also set up INLINE_HINT_known_hot hint\nfor it.\n\nWith this patch applied,\nADL Multi-copy:    538.imagic_r  16.7%\nICX Multi-copy:    538.imagic_r  15.2%\nCLX Multi-copy:    538.imagic_r  12.7%\nZnver3 Multi-copy: 538.imagic_r  10.6%\nArm Multi-copy:    538.imagic_r  13.4%\n\ngcc/ChangeLog\n\n\t* ipa-inline-analysis.cc (do_estimate_edge_time): Add function attribute\n\tjudgement for INLINE_HINT_known_hot hint.\n\ngcc/testsuite/ChangeLog:\n\n\t* gcc.dg/ipa/inlinehint-6.c: New test.", "tree": {"sha": "6d10a8f8c270c9b465feecfc738898dcf653454f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6d10a8f8c270c9b465feecfc738898dcf653454f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1b9a5cc9ec08e9f239dd2096edcc447b7a72f64a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1b9a5cc9ec08e9f239dd2096edcc447b7a72f64a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1b9a5cc9ec08e9f239dd2096edcc447b7a72f64a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1b9a5cc9ec08e9f239dd2096edcc447b7a72f64a/comments", "author": {"login": "cuilili8868", "id": 54013017, "node_id": "MDQ6VXNlcjU0MDEzMDE3", "avatar_url": "https://avatars.githubusercontent.com/u/54013017?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cuilili8868", "html_url": "https://github.com/cuilili8868", "followers_url": "https://api.github.com/users/cuilili8868/followers", "following_url": "https://api.github.com/users/cuilili8868/following{/other_user}", "gists_url": "https://api.github.com/users/cuilili8868/gists{/gist_id}", "starred_url": "https://api.github.com/users/cuilili8868/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cuilili8868/subscriptions", "organizations_url": "https://api.github.com/users/cuilili8868/orgs", "repos_url": "https://api.github.com/users/cuilili8868/repos", "events_url": "https://api.github.com/users/cuilili8868/events{/privacy}", "received_events_url": "https://api.github.com/users/cuilili8868/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cuilili8868", "id": 54013017, "node_id": "MDQ6VXNlcjU0MDEzMDE3", "avatar_url": "https://avatars.githubusercontent.com/u/54013017?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cuilili8868", "html_url": "https://github.com/cuilili8868", "followers_url": "https://api.github.com/users/cuilili8868/followers", "following_url": "https://api.github.com/users/cuilili8868/following{/other_user}", "gists_url": "https://api.github.com/users/cuilili8868/gists{/gist_id}", "starred_url": "https://api.github.com/users/cuilili8868/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cuilili8868/subscriptions", "organizations_url": "https://api.github.com/users/cuilili8868/orgs", "repos_url": "https://api.github.com/users/cuilili8868/repos", "events_url": "https://api.github.com/users/cuilili8868/events{/privacy}", "received_events_url": "https://api.github.com/users/cuilili8868/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9a8b868d7a3e0c4e754a3c2f21c524fec4a6b0ab", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9a8b868d7a3e0c4e754a3c2f21c524fec4a6b0ab", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9a8b868d7a3e0c4e754a3c2f21c524fec4a6b0ab"}], "stats": {"total": 60, "additions": 56, "deletions": 4}, "files": [{"sha": "7bd29c365907c1c76a48336bde5ec82f3986d5b1", "filename": "gcc/ipa-inline-analysis.cc", "status": "modified", "additions": 9, "deletions": 4, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1b9a5cc9ec08e9f239dd2096edcc447b7a72f64a/gcc%2Fipa-inline-analysis.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1b9a5cc9ec08e9f239dd2096edcc447b7a72f64a/gcc%2Fipa-inline-analysis.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-inline-analysis.cc?ref=1b9a5cc9ec08e9f239dd2096edcc447b7a72f64a", "patch": "@@ -48,6 +48,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"ipa-utils.h\"\n #include \"cfgexpand.h\"\n #include \"gimplify.h\"\n+#include \"attribs.h\"\n \n /* Cached node/edge growths.  */\n fast_call_summary<edge_growth_cache_entry *, va_heap> *edge_growth_cache = NULL;\n@@ -249,15 +250,19 @@ do_estimate_edge_time (struct cgraph_edge *edge, sreal *ret_nonspec_time)\n       hints = estimates.hints;\n     }\n \n-  /* When we have profile feedback, we can quite safely identify hot\n-     edges and for those we disable size limits.  Don't do that when\n-     probability that caller will call the callee is low however, since it\n+  /* When we have profile feedback or function attribute, we can quite safely\n+     identify hot edges and for those we disable size limits.  Don't do that\n+     when probability that caller will call the callee is low however, since it\n      may hurt optimization of the caller's hot path.  */\n-  if (edge->count.ipa ().initialized_p () && edge->maybe_hot_p ()\n+  if ((edge->count.ipa ().initialized_p () && edge->maybe_hot_p ()\n       && (edge->count.ipa () * 2\n \t  > (edge->caller->inlined_to\n \t     ? edge->caller->inlined_to->count.ipa ()\n \t     : edge->caller->count.ipa ())))\n+      || (lookup_attribute (\"hot\", DECL_ATTRIBUTES (edge->caller->decl))\n+\t  != NULL\n+\t && lookup_attribute (\"hot\", DECL_ATTRIBUTES (edge->callee->decl))\n+\t  != NULL))\n     hints |= INLINE_HINT_known_hot;\n \n   gcc_checking_assert (size >= 0);"}, {"sha": "1f3be641c6d26c6f831b879ebb0224b72e0a0cd1", "filename": "gcc/testsuite/gcc.dg/ipa/inlinehint-6.c", "status": "added", "additions": 47, "deletions": 0, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1b9a5cc9ec08e9f239dd2096edcc447b7a72f64a/gcc%2Ftestsuite%2Fgcc.dg%2Fipa%2Finlinehint-6.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1b9a5cc9ec08e9f239dd2096edcc447b7a72f64a/gcc%2Ftestsuite%2Fgcc.dg%2Fipa%2Finlinehint-6.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fipa%2Finlinehint-6.c?ref=1b9a5cc9ec08e9f239dd2096edcc447b7a72f64a", "patch": "@@ -0,0 +1,47 @@\n+/* { dg-options \"-O3 -c -fdump-ipa-inline-details -fno-early-inlining -fno-ipa-cp\"  } */\n+/* { dg-add-options bind_pic_locally } */\n+\n+#define size_t long long int\n+\n+struct A\n+{\n+  size_t f1, f2, f3, f4;\n+};\n+struct C\n+{\n+  struct A a;\n+  size_t b;\n+};\n+struct C x;\n+\n+__attribute__((hot)) struct C callee (struct A *a, struct C *c)\n+{\n+  c->a=(*a);\n+\n+  if((c->b + 7) & 17)\n+   {\n+      c->a.f1 = c->a.f2 + c->a.f1;\n+      c->a.f2 = c->a.f3 - c->a.f2;\n+      c->a.f3 = c->a.f2 + c->a.f3;\n+      c->a.f4 = c->a.f2 - c->a.f4;\n+      c->b = c->a.f2;\n+\n+    }\n+  return *c;\n+}\n+\n+__attribute__((hot)) struct C caller (size_t d, size_t e, size_t f, size_t g, struct C *c)\n+{\n+  struct A a;\n+  a.f1 = 1 + d;\n+  a.f2 = e;\n+  a.f3 = 12 + f;\n+  a.f4 = 68 + g;\n+  if (c->b > 0)\n+    return callee (&a, c);\n+  else\n+    return *c;\n+}\n+\n+/* { dg-final { scan-ipa-dump \"known_hot\"  \"inline\"  } } */\n+"}]}