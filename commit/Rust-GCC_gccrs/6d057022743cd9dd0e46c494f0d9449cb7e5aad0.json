{"sha": "6d057022743cd9dd0e46c494f0d9449cb7e5aad0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmQwNTcwMjI3NDNjZDlkZDBlNDZjNDk0ZjBkOTQ0OWNiN2U1YWFkMA==", "commit": {"author": {"name": "Adrian Straetling", "email": "straetling@de.ibm.com", "date": "2005-07-07T10:34:57Z"}, "committer": {"name": "Ulrich Weigand", "email": "uweigand@gcc.gnu.org", "date": "2005-07-07T10:34:57Z"}, "message": "s390-protos.h (s390_expand_clrmem): Delete.\n\n2005-07-07  Adrian Straetling  <straetling@de.ibm.com>\n\n\t* config/s390/s390-protos.h (s390_expand_clrmem): Delete.\n\t(s390_expand_setmem): New.\n\t* config/s390/s390.c: Likewise.\n\t(print_shift_count_operand): Truncate to 12 bits instead of 6.\n\tAdapt comments.\n\t* config/s390/s390.md: (\"setmem<mode>\"): Accept character as\n\tgeneral_operand.  Call new function \"s390_expand_setmem\".\n\t(\"clrmem_long\", \"*clrmem_long\"): Rewrite to ...\n\t(\"setmem_long\", \"*setmem_long\"): ... this.\n\nFrom-SVN: r101705", "tree": {"sha": "e301231c4747444ffc60804e49f5ac57ae82248a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e301231c4747444ffc60804e49f5ac57ae82248a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6d057022743cd9dd0e46c494f0d9449cb7e5aad0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6d057022743cd9dd0e46c494f0d9449cb7e5aad0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6d057022743cd9dd0e46c494f0d9449cb7e5aad0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6d057022743cd9dd0e46c494f0d9449cb7e5aad0/comments", "author": null, "committer": null, "parents": [{"sha": "8daf098e468d2943bba4bd4617f5e56e6529a69d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8daf098e468d2943bba4bd4617f5e56e6529a69d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8daf098e468d2943bba4bd4617f5e56e6529a69d"}], "stats": {"total": 116, "additions": 84, "deletions": 32}, "files": [{"sha": "6fc9d8f25edab70347dbb8389da6796c6ad692f1", "filename": "gcc/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6d057022743cd9dd0e46c494f0d9449cb7e5aad0/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6d057022743cd9dd0e46c494f0d9449cb7e5aad0/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=6d057022743cd9dd0e46c494f0d9449cb7e5aad0", "patch": "@@ -1,3 +1,15 @@\n+2005-07-07  Adrian Straetling  <straetling@de.ibm.com>\n+\n+\t* config/s390/s390-protos.h (s390_expand_clrmem): Delete.\n+\t(s390_expand_setmem): New.\n+\t* config/s390/s390.c: Likewise. \n+\t(print_shift_count_operand): Truncate to 12 bits instead of 6.\n+\tAdapt comments.\n+\t* config/s390/s390.md: (\"setmem<mode>\"): Accept character as\n+\tgeneral_operand.  Call new function \"s390_expand_setmem\".\n+\t(\"clrmem_long\", \"*clrmem_long\"): Rewrite to ...\n+\t(\"setmem_long\", \"*setmem_long\"): ... this.\n+\n 2005-07-07  Adrian Straetling  <straetling@de.ibm.com>\n \t\n \t* config/s390/s390.c: (optimization_options): Enable"}, {"sha": "7d63c7503e332d38081a55376ae538624474e843", "filename": "gcc/config/s390/s390-protos.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6d057022743cd9dd0e46c494f0d9449cb7e5aad0/gcc%2Fconfig%2Fs390%2Fs390-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6d057022743cd9dd0e46c494f0d9449cb7e5aad0/gcc%2Fconfig%2Fs390%2Fs390-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Fs390-protos.h?ref=6d057022743cd9dd0e46c494f0d9449cb7e5aad0", "patch": "@@ -69,7 +69,7 @@ extern void s390_expand_plus_operand (rtx, rtx, rtx);\n extern void emit_symbolic_move (rtx *);\n extern void s390_load_address (rtx, rtx);\n extern void s390_expand_movmem (rtx, rtx, rtx);\n-extern void s390_expand_clrmem (rtx, rtx);\n+extern void s390_expand_setmem (rtx, rtx, rtx);\n extern void s390_expand_cmpmem (rtx, rtx, rtx, rtx);\n extern bool s390_expand_addcc (enum rtx_code, rtx, rtx, rtx, rtx, rtx);\n extern rtx s390_return_addr_rtx (int, rtx);"}, {"sha": "3573db59e41b2b89fca1379c5b18ba6b62e253f0", "filename": "gcc/config/s390/s390.c", "status": "modified", "additions": 59, "deletions": 12, "changes": 71, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6d057022743cd9dd0e46c494f0d9449cb7e5aad0/gcc%2Fconfig%2Fs390%2Fs390.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6d057022743cd9dd0e46c494f0d9449cb7e5aad0/gcc%2Fconfig%2Fs390%2Fs390.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Fs390.c?ref=6d057022743cd9dd0e46c494f0d9449cb7e5aad0", "patch": "@@ -3225,25 +3225,49 @@ s390_expand_movmem (rtx dst, rtx src, rtx len)\n     }\n }\n \n-/* Emit code to clear LEN bytes at DST.  */\n+/* Emit code to set LEN bytes at DST to VAL.\n+   Make use of clrmem if VAL is zero.  */\n \n void\n-s390_expand_clrmem (rtx dst, rtx len)\n+s390_expand_setmem (rtx dst, rtx len, rtx val)\n {\n-  if (GET_CODE (len) == CONST_INT && INTVAL (len) >= 0 && INTVAL (len) <= 256)\n+  gcc_assert (GET_CODE (len) != CONST_INT || INTVAL (len) > 0);\n+  gcc_assert (GET_CODE (val) == CONST_INT || GET_MODE (val) == QImode);\n+  \n+  if (GET_CODE (len) == CONST_INT && INTVAL (len) <= 257)\n     {\n-      if (INTVAL (len) > 0)\n+      if (val == const0_rtx && INTVAL (len) <= 256)\n         emit_insn (gen_clrmem_short (dst, GEN_INT (INTVAL (len) - 1)));\n+      else\n+\t{\n+\t  /* Initialize memory by storing the first byte.  */\n+\t  emit_move_insn (adjust_address (dst, QImode, 0), val);\n+\t  \n+\t  if (INTVAL (len) > 1)\n+\t    {\n+\t      /* Initiate 1 byte overlap move.\n+\t         The first byte of DST is propagated through DSTP1.\n+\t\t Prepare a movmem for:  DST+1 = DST (length = LEN - 1).\n+\t\t DST is set to size 1 so the rest of the memory location\n+\t\t does not count as source operand.  */\n+\t      rtx dstp1 = adjust_address (dst, VOIDmode, 1);\n+\t      set_mem_size (dst, const1_rtx);\n+\n+\t      emit_insn (gen_movmem_short (dstp1, dst, \n+\t\t\t\t\t   GEN_INT (INTVAL (len) - 2)));\n+\t    }\n+\t}\n     }\n \n   else if (TARGET_MVCLE)\n     {\n-      emit_insn (gen_clrmem_long (dst, convert_to_mode (Pmode, len, 1)));\n+      val = force_not_mem (convert_modes (Pmode, QImode, val, 1));\n+      emit_insn (gen_setmem_long (dst, convert_to_mode (Pmode, len, 1), val));\n     }\n \n   else\n     {\n-      rtx dst_addr, src_addr, count, blocks, temp;\n+      rtx dst_addr, src_addr, count, blocks, temp, dstp1 = NULL_RTX;\n       rtx loop_start_label = gen_label_rtx ();\n       rtx loop_end_label = gen_label_rtx ();\n       rtx end_label = gen_label_rtx ();\n@@ -3265,7 +3289,22 @@ s390_expand_clrmem (rtx dst, rtx len)\n       emit_move_insn (dst_addr, force_operand (XEXP (dst, 0), NULL_RTX));\n       dst = change_address (dst, VOIDmode, dst_addr);\n \n-      temp = expand_binop (mode, add_optab, count, constm1_rtx, count, 1, 0);\n+      if (val == const0_rtx)\n+        temp = expand_binop (mode, add_optab, count, constm1_rtx, count, 1, 0);\n+      else\n+\t{\n+\t  dstp1 = adjust_address (dst, VOIDmode, 1);\n+\t  set_mem_size (dst, const1_rtx);\n+\n+\t  /* Initialize memory by storing the first byte.  */\n+\t  emit_move_insn (adjust_address (dst, QImode, 0), val);\n+\t  \n+\t  /* If count is 1 we are done.  */\n+\t  emit_cmp_and_jump_insns (count, const1_rtx,\n+\t\t\t\t   EQ, NULL_RTX, mode, 1, end_label);\n+\n+\t  temp = expand_binop (mode, add_optab, count, GEN_INT (-2), count, 1, 0);\n+\t}\n       if (temp != count)\n         emit_move_insn (count, temp);\n \n@@ -3278,7 +3317,10 @@ s390_expand_clrmem (rtx dst, rtx len)\n \n       emit_label (loop_start_label);\n \n-      emit_insn (gen_clrmem_short (dst, GEN_INT (255)));\n+      if (val == const0_rtx)\n+\temit_insn (gen_clrmem_short (dst, GEN_INT (255)));\n+      else\n+\temit_insn (gen_movmem_short (dstp1, dst, GEN_INT (255)));\n       s390_load_address (dst_addr,\n \t\t\t gen_rtx_PLUS (Pmode, dst_addr, GEN_INT (256)));\n \n@@ -3292,7 +3334,10 @@ s390_expand_clrmem (rtx dst, rtx len)\n       emit_jump (loop_start_label);\n       emit_label (loop_end_label);\n \n-      emit_insn (gen_clrmem_short (dst, convert_to_mode (Pmode, count, 1)));\n+      if (val == const0_rtx)\n+        emit_insn (gen_clrmem_short (dst, convert_to_mode (Pmode, count, 1)));\n+      else\n+        emit_insn (gen_movmem_short (dstp1, dst, convert_to_mode (Pmode, count, 1)));\n       emit_label (end_label);\n     }\n }\n@@ -3637,7 +3682,9 @@ s390_delegitimize_address (rtx orig_x)\n   return orig_x;\n }\n \n-/* Output shift count operand OP to stdio stream FILE.  */\n+/* Output operand OP to stdio stream FILE.\n+   OP is an address (register + offset) which is not used to address data;\n+   instead the rightmost bits are interpreted as the value.  */\n \n static void\n print_shift_count_operand (FILE *file, rtx op)\n@@ -3667,8 +3714,8 @@ print_shift_count_operand (FILE *file, rtx op)\n       gcc_assert (REGNO_REG_CLASS (REGNO (op)) == ADDR_REGS);\n     }\n \n-  /* Shift counts are truncated to the low six bits anyway.  */\n-  fprintf (file, HOST_WIDE_INT_PRINT_DEC, offset & 63);\n+  /* Offsets are constricted to twelve bits.  */\n+  fprintf (file, HOST_WIDE_INT_PRINT_DEC, offset & ((1 << 12) - 1));\n   if (op)\n     fprintf (file, \"(%s)\", reg_names[REGNO (op)]);\n }"}, {"sha": "6d8c107fa52ecd2ca89efcd28fc2b3e165debcb6", "filename": "gcc/config/s390/s390.md", "status": "modified", "additions": 12, "deletions": 19, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6d057022743cd9dd0e46c494f0d9449cb7e5aad0/gcc%2Fconfig%2Fs390%2Fs390.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6d057022743cd9dd0e46c494f0d9449cb7e5aad0/gcc%2Fconfig%2Fs390%2Fs390.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Fs390.md?ref=6d057022743cd9dd0e46c494f0d9449cb7e5aad0", "patch": "@@ -1924,18 +1924,11 @@\n \n (define_expand \"setmem<mode>\"\n   [(set (match_operand:BLK 0 \"memory_operand\" \"\")\n-        (match_operand 2 \"const_int_operand\" \"\"))\n+        (match_operand:QI 2 \"general_operand\" \"\"))\n    (use (match_operand:GPR 1 \"general_operand\" \"\"))\n    (match_operand 3 \"\" \"\")]\n   \"\"\n-{\n-  /* If value to set is not zero, use the library routine.  */\n-  if (operands[2] != const0_rtx) \n-    FAIL;\n-\n-  s390_expand_clrmem (operands[0], operands[1]); \n-  DONE;\n-})\n+  \"s390_expand_setmem (operands[0], operands[1], operands[2]); DONE;\")\n \n ; Clear a block that is up to 256 bytes in length.\n ; The block length is taken as (operands[1] % 256) + 1.\n@@ -2010,15 +2003,15 @@\n      (clobber (reg:CC CC_REGNUM))])]\n   \"operands[3] = gen_label_rtx ();\")\n \n-; Clear a block of arbitrary length.\n+; Initialize a block of arbitrary length with (operands[2] % 256). \n \n-(define_expand \"clrmem_long\"\n+(define_expand \"setmem_long\"\n   [(parallel\n     [(clobber (match_dup 1))\n      (set (match_operand:BLK 0 \"memory_operand\" \"\")\n-          (const_int 0))\n+          (match_operand 2 \"shift_count_operand\" \"\"))\n      (use (match_operand 1 \"general_operand\" \"\"))\n-     (use (match_dup 2))\n+     (use (match_dup 3))\n      (clobber (reg:CC CC_REGNUM))])]\n   \"\"\n {\n@@ -2036,18 +2029,18 @@\n \n   operands[0] = replace_equiv_address_nv (operands[0], addr0);\n   operands[1] = reg0;\n-  operands[2] = reg1;\n+  operands[3] = reg1;\n })\n \n-(define_insn \"*clrmem_long\"\n+(define_insn \"*setmem_long\"\n   [(clobber (match_operand:<DBL> 0 \"register_operand\" \"=d\"))\n-   (set (mem:BLK (subreg:P (match_operand:<DBL> 2 \"register_operand\" \"0\") 0))\n-        (const_int 0))\n-   (use (match_dup 2))\n+   (set (mem:BLK (subreg:P (match_operand:<DBL> 3 \"register_operand\" \"0\") 0))\n+        (match_operand 2 \"shift_count_operand\" \"Y\"))\n+   (use (match_dup 3))\n    (use (match_operand:<DBL> 1 \"register_operand\" \"d\"))\n    (clobber (reg:CC CC_REGNUM))]\n   \"\"\n-  \"mvcle\\t%0,%1,0\\;jo\\t.-4\"\n+  \"mvcle\\t%0,%1,%Y2\\;jo\\t.-4\"\n   [(set_attr \"length\" \"8\")\n    (set_attr \"type\" \"vs\")])\n "}]}