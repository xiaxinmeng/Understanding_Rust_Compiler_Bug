{"sha": "d4feb3d31ab828db75f8d9848cd833de964a75a6", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDRmZWIzZDMxYWI4MjhkYjc1ZjhkOTg0OGNkODMzZGU5NjRhNzVhNg==", "commit": {"author": {"name": "Paul Thomas", "email": "pault@gcc.gnu.org", "date": "2007-02-02T12:35:57Z"}, "committer": {"name": "Paul Thomas", "email": "pault@gcc.gnu.org", "date": "2007-02-02T12:35:57Z"}, "message": "re PR fortran/30284 ([4.1 only] ICE in gfc_add_modify with internal reads)\n\n2007-02-02  Paul Thomas  <pault@gcc.gnu.org>\n\n\tPR fortran/30284\n\tPR fortran/30626\n\t* trans-expr.c (gfc_conv_aliased_arg): Remove static attribute\n\tfrom function and make sure that substring lengths are\n\ttranslated.\n\t(is_aliased_array): Remove static attribute.\n\t* trans.c : Add prototypes for gfc_conv_aliased_arg and\n\tis_aliased_array.\n\t* trans-io.c (set_internal_unit): Add the post block to the\n\targuments of the function.  Use is_aliased_array to check if\n\ttemporary is needed; if so call gfc_conv_aliased_arg.\n\t(build_dt): Pass the post block to set_internal_unit and\n\tadd to the block after all io activiy is done.\n\n2007-02-02  Paul Thomas  <pault@gcc.gnu.org>\n\n\tPR fortran/30284\n\tPR fortran/30626\n\t* io/transfer.c (init_loop_spec, next_array_record): Change to\n\tlbound rather than unity base.\n\n2007-02-02  Paul Thomas  <pault@gcc.gnu.org>\n\n\tPR fortran/30284\n\t* gfortran.dg/arrayio_11.f90.f90: New test.\n\n\tPR fortran/30626\n\t* gfortran.dg/arrayio_12.f90.f90: New test.\n\nFrom-SVN: r121500", "tree": {"sha": "0569867556e0d5a7bd437b89e86d54632a6fbed1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0569867556e0d5a7bd437b89e86d54632a6fbed1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d4feb3d31ab828db75f8d9848cd833de964a75a6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d4feb3d31ab828db75f8d9848cd833de964a75a6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d4feb3d31ab828db75f8d9848cd833de964a75a6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d4feb3d31ab828db75f8d9848cd833de964a75a6/comments", "author": null, "committer": null, "parents": [{"sha": "47742ccdded540d6e157ce49f89ec4148cd27154", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/47742ccdded540d6e157ce49f89ec4148cd27154", "html_url": "https://github.com/Rust-GCC/gccrs/commit/47742ccdded540d6e157ce49f89ec4148cd27154"}], "stats": {"total": 171, "additions": 157, "deletions": 14}, "files": [{"sha": "3ee0a28ba0a1b6e02c2f0b16adfd6ec4fd1d5f98", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d4feb3d31ab828db75f8d9848cd833de964a75a6/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d4feb3d31ab828db75f8d9848cd833de964a75a6/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=d4feb3d31ab828db75f8d9848cd833de964a75a6", "patch": "@@ -1,3 +1,19 @@\n+2007-02-02  Paul Thomas  <pault@gcc.gnu.org>\n+\n+\tPR fortran/30284\n+\tPR fortran/30626\n+\t* trans-expr.c (gfc_conv_aliased_arg): Remove static attribute\n+\tfrom function and make sure that substring lengths are\n+\ttranslated.\n+\t(is_aliased_array): Remove static attribute.\n+\t* trans.c : Add prototypes for gfc_conv_aliased_arg and\n+\tis_aliased_array.\n+\t* trans-io.c (set_internal_unit): Add the post block to the\n+\targuments of the function.  Use is_aliased_array to check if\n+\ttemporary is needed; if so call gfc_conv_aliased_arg.\n+\t(build_dt): Pass the post block to set_internal_unit and\n+\tadd to the block after all io activiy is done.\n+\n 2007-02-01  Roger Sayle  <roger@eyesopen.com>\n \n \t* trans-array.c (gfc_conv_expr_descriptor): We don't need to use"}, {"sha": "723ffabacb8c05af5e706520c1b3ae80e2dd168f", "filename": "gcc/fortran/trans-expr.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d4feb3d31ab828db75f8d9848cd833de964a75a6/gcc%2Ffortran%2Ftrans-expr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d4feb3d31ab828db75f8d9848cd833de964a75a6/gcc%2Ffortran%2Ftrans-expr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-expr.c?ref=d4feb3d31ab828db75f8d9848cd833de964a75a6", "patch": "@@ -1682,9 +1682,9 @@ gfc_apply_interface_mapping (gfc_interface_mapping * mapping,\n    an actual argument derived type array is copied and then returned\n    after the function call.\n    TODO Get rid of this kludge, when array descriptors are capable of\n-   handling aliased arrays.  */\n+   handling arrays with a bigger stride in bytes than size.  */\n \n-static void\n+void\n gfc_conv_aliased_arg (gfc_se * parmse, gfc_expr * expr,\n \t\t      int g77, sym_intent intent)\n {\n@@ -1733,7 +1733,7 @@ gfc_conv_aliased_arg (gfc_se * parmse, gfc_expr * expr,\n     {\n       gfc_ref *char_ref = expr->ref;\n \n-      for (; expr->ts.cl == NULL && char_ref; char_ref = char_ref->next)\n+      for (; char_ref; char_ref = char_ref->next)\n \tif (char_ref->type == REF_SUBSTRING)\n \t  {\n \t    gfc_se tmp_se;\n@@ -1928,7 +1928,7 @@ gfc_conv_aliased_arg (gfc_se * parmse, gfc_expr * expr,\n /* Is true if an array reference is followed by a component or substring\n    reference.  */\n \n-static bool\n+bool\n is_aliased_array (gfc_expr * e)\n {\n   gfc_ref * ref;"}, {"sha": "9865f44c3312a40568415ca89a2f5c3e3170f047", "filename": "gcc/fortran/trans-io.c", "status": "modified", "additions": 28, "deletions": 8, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d4feb3d31ab828db75f8d9848cd833de964a75a6/gcc%2Ffortran%2Ftrans-io.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d4feb3d31ab828db75f8d9848cd833de964a75a6/gcc%2Ffortran%2Ftrans-io.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-io.c?ref=d4feb3d31ab828db75f8d9848cd833de964a75a6", "patch": "@@ -586,7 +586,8 @@ set_string (stmtblock_t * block, stmtblock_t * postblock, tree var,\n    for an internal unit.  */\n \n static unsigned int\n-set_internal_unit (stmtblock_t * block, tree var, gfc_expr * e)\n+set_internal_unit (stmtblock_t * block, stmtblock_t * post_block,\n+\t\t   tree var, gfc_expr * e)\n {\n   gfc_se se;\n   tree io;\n@@ -624,21 +625,36 @@ set_internal_unit (stmtblock_t * block, tree var, gfc_expr * e)\n     {\n       se.ss = gfc_walk_expr (e);\n \n-      /* Return the data pointer and rank from the descriptor.  */\n-      gfc_conv_expr_descriptor (&se, e, se.ss);\n-      tmp = gfc_conv_descriptor_data_get (se.expr);\n-      se.expr = gfc_build_addr_expr (pchar_type_node, se.expr);\n+      if (is_aliased_array (e))\n+\t{\n+\t  /* Use a temporary for components of arrays of derived types\n+\t     or substring array references.  */\n+\t  gfc_conv_aliased_arg (&se, e, 0,\n+\t\tlast_dt == READ ? INTENT_IN : INTENT_OUT);\n+\t  tmp = build_fold_indirect_ref (se.expr);\n+\t  se.expr = gfc_build_addr_expr (pchar_type_node, tmp);\n+\t  tmp = gfc_conv_descriptor_data_get (tmp);\n+\t}\n+      else\n+\t{\n+\t  /* Return the data pointer and rank from the descriptor.  */\n+\t  gfc_conv_expr_descriptor (&se, e, se.ss);\n+\t  tmp = gfc_conv_descriptor_data_get (se.expr);\n+\t  se.expr = gfc_build_addr_expr (pchar_type_node, se.expr);\n+\t}\n     }\n   else\n     gcc_unreachable ();\n \n   /* The cast is needed for character substrings and the descriptor\n      data.  */\n   gfc_add_modify_expr (&se.pre, io, fold_convert (TREE_TYPE (io), tmp));\n-  gfc_add_modify_expr (&se.pre, len, se.string_length);\n+  gfc_add_modify_expr (&se.pre, len,\n+\t\t       fold_convert (TREE_TYPE (len), se.string_length));\n   gfc_add_modify_expr (&se.pre, desc, se.expr);\n \n   gfc_add_block_to_block (block, &se.pre);\n+  gfc_add_block_to_block (post_block, &se.post);\n   return mask;\n }\n \n@@ -1371,7 +1387,7 @@ transfer_namelist_element (stmtblock_t * block, const char * var_name,\n static tree\n build_dt (tree function, gfc_code * code)\n {\n-  stmtblock_t block, post_block, post_end_block;\n+  stmtblock_t block, post_block, post_end_block, post_iu_block;\n   gfc_dt *dt;\n   tree tmp, var;\n   gfc_expr *nmlname;\n@@ -1381,6 +1397,7 @@ build_dt (tree function, gfc_code * code)\n   gfc_start_block (&block);\n   gfc_init_block (&post_block);\n   gfc_init_block (&post_end_block);\n+  gfc_init_block (&post_iu_block);\n \n   var = gfc_create_var (st_parameter[IOPARM_ptype_dt].type, \"dt_parm\");\n \n@@ -1411,7 +1428,8 @@ build_dt (tree function, gfc_code * code)\n     {\n       if (dt->io_unit->ts.type == BT_CHARACTER)\n \t{\n-\t  mask |= set_internal_unit (&block, var, dt->io_unit);\n+\t  mask |= set_internal_unit (&block, &post_iu_block,\n+\t\t\t\t     var, dt->io_unit);\n \t  set_parameter_const (&block, var, IOPARM_common_unit, 0);\n \t}\n       else\n@@ -1502,6 +1520,8 @@ build_dt (tree function, gfc_code * code)\n \n   gfc_add_expr_to_block (&block, gfc_trans_code (code->block->next));\n \n+  gfc_add_block_to_block (&block, &post_iu_block);\n+\n   dt_parm = NULL;\n   dt_post_end_block = NULL;\n "}, {"sha": "a66ad39f2e2e3bfe3ea4a13eae7b043d32479cd5", "filename": "gcc/fortran/trans.h", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d4feb3d31ab828db75f8d9848cd833de964a75a6/gcc%2Ffortran%2Ftrans.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d4feb3d31ab828db75f8d9848cd833de964a75a6/gcc%2Ffortran%2Ftrans.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans.h?ref=d4feb3d31ab828db75f8d9848cd833de964a75a6", "patch": "@@ -309,6 +309,10 @@ tree gfc_conv_operator_assign (gfc_se *, gfc_se *, gfc_symbol *);\n /* Also used to CALL subroutines.  */\n int gfc_conv_function_call (gfc_se *, gfc_symbol *, gfc_actual_arglist *,\n \t\t\t    tree);\n+\n+void gfc_conv_aliased_arg (gfc_se *, gfc_expr *, int, sym_intent);\n+bool is_aliased_array (gfc_expr *);\n+\n /* gfc_trans_* shouldn't call push/poplevel, use gfc_push/pop_scope */\n \n /* Generate code for a scalar assignment.  */"}, {"sha": "de2915922c45200cf62916768de10875bfca4157", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d4feb3d31ab828db75f8d9848cd833de964a75a6/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d4feb3d31ab828db75f8d9848cd833de964a75a6/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=d4feb3d31ab828db75f8d9848cd833de964a75a6", "patch": "@@ -1,3 +1,11 @@\n+2007-02-02  Paul Thomas  <pault@gcc.gnu.org>\n+\n+\tPR fortran/30284\n+\t* gfortran.dg/arrayio_11.f90.f90: New test.\n+\n+\tPR fortran/30626\n+\t* gfortran.dg/arrayio_12.f90.f90: New test.\n+\n 2007-02-02  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR c++/30536"}, {"sha": "39255dbcdaef4143ecd29c25bf1dd2d2db031803", "filename": "gcc/testsuite/gfortran.dg/arrayio_11.f90", "status": "added", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d4feb3d31ab828db75f8d9848cd833de964a75a6/gcc%2Ftestsuite%2Fgfortran.dg%2Farrayio_11.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d4feb3d31ab828db75f8d9848cd833de964a75a6/gcc%2Ftestsuite%2Fgfortran.dg%2Farrayio_11.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Farrayio_11.f90?ref=d4feb3d31ab828db75f8d9848cd833de964a75a6", "patch": "@@ -0,0 +1,45 @@\n+! { dg-do run }\n+! Tests the fix for PR30284, in which the substring plus\n+! component reference for an internal file would cause an ICE.\n+!\n+! Contributed by Harald Anlauf <anlauf@gmx.de>\n+\n+program gfcbug51\n+  implicit none\n+\n+  type :: date_t\n+    character(len=12) :: date      ! yyyymmddhhmm\n+  end type date_t\n+\n+  type year_t\n+    integer :: year = 0\n+  end type year_t\n+\n+  type(date_t) :: file(3)\n+  type(year_t) :: time(3)\n+\n+  FILE%date = (/'200612231200', '200712231200', &\n+                '200812231200'/)\n+\n+  time = date_to_year (FILE)\n+  if (any (time%year .ne. (/2006, 2007, 2008/))) call abort ()\n+\n+  call month_to_date ((/8, 9, 10/), FILE)\n+  if ( any (file%date .ne. (/'200608231200', '200709231200', &\n+                             '200810231200'/))) call abort ()\n+\n+contains\n+\n+  function date_to_year (d) result (y)\n+    type(date_t) :: d(3)\n+    type(year_t) :: y(size (d, 1))\n+    read (d%date(1:4),'(i4)')  time% year\n+  end function date_to_year\n+\n+  subroutine month_to_date (m, d)\n+    type(date_t) :: d(3)\n+    integer :: m(:)\n+    write (d%date(5:6),'(i2.2)')  m\n+  end subroutine month_to_date\n+\n+end program gfcbug51"}, {"sha": "ca010479bd2d894dde4f2ee4b65f64bb411d588a", "filename": "gcc/testsuite/gfortran.dg/arrayio_12.f90", "status": "added", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d4feb3d31ab828db75f8d9848cd833de964a75a6/gcc%2Ftestsuite%2Fgfortran.dg%2Farrayio_12.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d4feb3d31ab828db75f8d9848cd833de964a75a6/gcc%2Ftestsuite%2Fgfortran.dg%2Farrayio_12.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Farrayio_12.f90?ref=d4feb3d31ab828db75f8d9848cd833de964a75a6", "patch": "@@ -0,0 +1,42 @@\n+! { dg-do run }\n+! Tests the fix for PR30626, in which the substring reference\n+! for an internal file would cause an ICE.\n+!\n+! Contributed by Francois-Xavier Coudert <fxcoudert@gcc.gnu.org>\n+\n+program gfcbug51\n+  implicit none\n+\n+  character(len=12) :: cdate(3)      ! yyyymmddhhmm\n+\n+  type year_t\n+    integer :: year = 0\n+  end type year_t\n+\n+  type(year_t) :: time(3)\n+\n+  cdate = (/'200612231200', '200712231200', &\n+            '200812231200'/)\n+\n+  time = date_to_year (cdate)\n+  if (any (time%year .ne. (/2006, 2007, 2008/))) call abort ()\n+\n+  call month_to_date ((/8, 9, 10/), cdate)\n+  if ( any (cdate .ne. (/'200608231200', '200709231200', &\n+                         '200810231200'/))) call abort ()\n+\n+contains\n+\n+  function date_to_year (d) result (y)\n+    character(len=12) :: d(3)\n+    type(year_t) :: y(size (d, 1))\n+    read (cdate(:)(1:4),'(i4)')  time% year\n+  end function date_to_year\n+\n+  subroutine month_to_date (m, d)\n+    character(len=12) :: d(3)\n+    integer :: m(:)\n+    write (cdate(:)(5:6),'(i2.2)')  m\n+  end subroutine month_to_date\n+\n+end program gfcbug51"}, {"sha": "4f5eed45d52cde6bd3b23bfafe952882b7d9032c", "filename": "libgfortran/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d4feb3d31ab828db75f8d9848cd833de964a75a6/libgfortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d4feb3d31ab828db75f8d9848cd833de964a75a6/libgfortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2FChangeLog?ref=d4feb3d31ab828db75f8d9848cd833de964a75a6", "patch": "@@ -1,3 +1,10 @@\n+2007-02-02  Paul Thomas  <pault@gcc.gnu.org>\n+\n+\tPR fortran/30284\n+\tPR fortran/30626\n+\t* io/transfer.c (init_loop_spec, next_array_record): Change to\n+\tlbound rather than unity base.\n+\n 2007-01-21  Francois-Xavier Coudert  <coudert@clipper.ens.fr>\n \n \t* runtime/error.c: Include sys/time.h before sys/resource.h."}, {"sha": "a7632da55ae913dbfad2be18fd9fc19b1e8f8aaf", "filename": "libgfortran/io/transfer.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d4feb3d31ab828db75f8d9848cd833de964a75a6/libgfortran%2Fio%2Ftransfer.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d4feb3d31ab828db75f8d9848cd833de964a75a6/libgfortran%2Fio%2Ftransfer.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fio%2Ftransfer.c?ref=d4feb3d31ab828db75f8d9848cd833de964a75a6", "patch": "@@ -2013,7 +2013,7 @@ init_loop_spec (gfc_array_char *desc, array_loop_spec *ls)\n   index = 1;\n   for (i=0; i<rank; i++)\n     {\n-      ls[i].idx = 1;\n+      ls[i].idx = desc->dim[i].lbound;\n       ls[i].start = desc->dim[i].lbound;\n       ls[i].end = desc->dim[i].ubound;\n       ls[i].step = desc->dim[i].stride;\n@@ -2050,8 +2050,9 @@ next_array_record (st_parameter_dt *dtp, array_loop_spec *ls)\n           else\n             carry = 0;\n         }\n-      index = index + (ls[i].idx - 1) * ls[i].step;\n+      index = index + (ls[i].idx - ls[i].start) * ls[i].step;\n     }\n+\n   return index;\n }\n "}]}