{"sha": "09c91caeb84e7c3609a12a53b57e5219a1dd2b15", "node_id": "C_kwDOANBUbNoAKDA5YzkxY2FlYjg0ZTdjMzYwOWExMmE1M2I1N2U1MjE5YTFkZDJiMTU", "commit": {"author": {"name": "Sebastian Pop", "email": "spop@amazon.com", "date": "2022-11-30T19:45:24Z"}, "committer": {"name": "Sebastian Pop", "email": "spop@amazon.com", "date": "2022-12-08T17:11:11Z"}, "message": "AArch64: Add UNSPECV_PATCHABLE_AREA [PR98776]\n\nCurrently patchable area is at the wrong place on AArch64.  It is placed\nimmediately after function label, before .cfi_startproc.  This patch\nadds UNSPECV_PATCHABLE_AREA for pseudo patchable area instruction and\nmodifies aarch64_print_patchable_function_entry to avoid placing\npatchable area before .cfi_startproc.\n\ngcc/\n\tPR target/98776\n\t* config/aarch64/aarch64-protos.h (aarch64_output_patchable_area):\n\tDeclared.\n\t* config/aarch64/aarch64.cc (aarch64_print_patchable_function_entry):\n\tEmit an UNSPECV_PATCHABLE_AREA pseudo instruction.\n\t(aarch64_output_patchable_area): New.\n\t* config/aarch64/aarch64.md (UNSPECV_PATCHABLE_AREA): New.\n\t(patchable_area): Define.\n\ngcc/testsuite/\n\tPR target/98776\n\t* gcc.target/aarch64/pr98776.c: New.\n\t* gcc.target/aarch64/pr92424-2.c: Adjust pattern.\n\t* gcc.target/aarch64/pr92424-3.c: Adjust pattern.", "tree": {"sha": "2e99afa890ace31b1981881b069caae575230c24", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2e99afa890ace31b1981881b069caae575230c24"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/09c91caeb84e7c3609a12a53b57e5219a1dd2b15", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/09c91caeb84e7c3609a12a53b57e5219a1dd2b15", "html_url": "https://github.com/Rust-GCC/gccrs/commit/09c91caeb84e7c3609a12a53b57e5219a1dd2b15", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/09c91caeb84e7c3609a12a53b57e5219a1dd2b15/comments", "author": {"login": "sebpop", "id": 568397, "node_id": "MDQ6VXNlcjU2ODM5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/568397?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sebpop", "html_url": "https://github.com/sebpop", "followers_url": "https://api.github.com/users/sebpop/followers", "following_url": "https://api.github.com/users/sebpop/following{/other_user}", "gists_url": "https://api.github.com/users/sebpop/gists{/gist_id}", "starred_url": "https://api.github.com/users/sebpop/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sebpop/subscriptions", "organizations_url": "https://api.github.com/users/sebpop/orgs", "repos_url": "https://api.github.com/users/sebpop/repos", "events_url": "https://api.github.com/users/sebpop/events{/privacy}", "received_events_url": "https://api.github.com/users/sebpop/received_events", "type": "User", "site_admin": false}, "committer": {"login": "sebpop", "id": 568397, "node_id": "MDQ6VXNlcjU2ODM5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/568397?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sebpop", "html_url": "https://github.com/sebpop", "followers_url": "https://api.github.com/users/sebpop/followers", "following_url": "https://api.github.com/users/sebpop/following{/other_user}", "gists_url": "https://api.github.com/users/sebpop/gists{/gist_id}", "starred_url": "https://api.github.com/users/sebpop/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sebpop/subscriptions", "organizations_url": "https://api.github.com/users/sebpop/orgs", "repos_url": "https://api.github.com/users/sebpop/repos", "events_url": "https://api.github.com/users/sebpop/events{/privacy}", "received_events_url": "https://api.github.com/users/sebpop/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "955093369ed41e7ad7d9e4fadc2948375a6cb103", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/955093369ed41e7ad7d9e4fadc2948375a6cb103", "html_url": "https://github.com/Rust-GCC/gccrs/commit/955093369ed41e7ad7d9e4fadc2948375a6cb103"}], "stats": {"total": 87, "additions": 70, "deletions": 17}, "files": [{"sha": "fcc3a66cdf2cf8d87da4cd027e3d6ed04741c514", "filename": "gcc/config/aarch64/aarch64-protos.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/09c91caeb84e7c3609a12a53b57e5219a1dd2b15/gcc%2Fconfig%2Faarch64%2Faarch64-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/09c91caeb84e7c3609a12a53b57e5219a1dd2b15/gcc%2Fconfig%2Faarch64%2Faarch64-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-protos.h?ref=09c91caeb84e7c3609a12a53b57e5219a1dd2b15", "patch": "@@ -1075,4 +1075,6 @@ const char *aarch64_indirect_call_asm (rtx);\n extern bool aarch64_harden_sls_retbr_p (void);\n extern bool aarch64_harden_sls_blr_p (void);\n \n+extern void aarch64_output_patchable_area (unsigned int, bool);\n+\n #endif /* GCC_AARCH64_PROTOS_H */"}, {"sha": "45d659a4a91d73ffea675d489ca1f3fe7768fd0f", "filename": "gcc/config/aarch64/aarch64.cc", "status": "modified", "additions": 41, "deletions": 15, "changes": 56, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/09c91caeb84e7c3609a12a53b57e5219a1dd2b15/gcc%2Fconfig%2Faarch64%2Faarch64.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/09c91caeb84e7c3609a12a53b57e5219a1dd2b15/gcc%2Fconfig%2Faarch64%2Faarch64.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64.cc?ref=09c91caeb84e7c3609a12a53b57e5219a1dd2b15", "patch": "@@ -22672,30 +22672,56 @@ aarch64_declare_function_name (FILE *stream, const char* name,\n   cfun->machine->label_is_assembled = true;\n }\n \n-/* Implement PRINT_PATCHABLE_FUNCTION_ENTRY.  Check if the patch area is after\n-   the function label and emit a BTI if necessary.  */\n+/* Implement PRINT_PATCHABLE_FUNCTION_ENTRY.  */\n \n void\n aarch64_print_patchable_function_entry (FILE *file,\n \t\t\t\t\tunsigned HOST_WIDE_INT patch_area_size,\n \t\t\t\t\tbool record_p)\n {\n-  if (cfun->machine->label_is_assembled\n-      && aarch64_bti_enabled ()\n-      && !cgraph_node::get (cfun->decl)->only_called_directly_p ())\n+  if (!cfun->machine->label_is_assembled)\n     {\n-      /* Remove the BTI that follows the patch area and insert a new BTI\n-\t before the patch area right after the function label.  */\n-      rtx_insn *insn = next_real_nondebug_insn (get_insns ());\n-      if (insn\n-\t  && INSN_P (insn)\n-\t  && GET_CODE (PATTERN (insn)) == UNSPEC_VOLATILE\n-\t  && XINT (PATTERN (insn), 1) == UNSPECV_BTI_C)\n-\tdelete_insn (insn);\n-      asm_fprintf (file, \"\\thint\\t34 // bti c\\n\");\n+      /* Emit the patching area before the entry label, if any.  */\n+      default_print_patchable_function_entry (file, patch_area_size,\n+\t\t\t\t\t      record_p);\n+      return;\n+    }\n+\n+  rtx pa = gen_patchable_area (GEN_INT (patch_area_size),\n+\t\t\t       GEN_INT (record_p));\n+  basic_block bb = ENTRY_BLOCK_PTR_FOR_FN (cfun)->next_bb;\n+\n+  if (!aarch64_bti_enabled ()\n+      || cgraph_node::get (cfun->decl)->only_called_directly_p ())\n+    {\n+      /* Emit the patchable_area at the beginning of the function.  */\n+      rtx_insn *insn = emit_insn_before (pa, BB_HEAD (bb));\n+      INSN_ADDRESSES_NEW (insn, -1);\n+      return;\n+    }\n+\n+  rtx_insn *insn = next_real_nondebug_insn (get_insns ());\n+  if (!insn\n+      || !INSN_P (insn)\n+      || GET_CODE (PATTERN (insn)) != UNSPEC_VOLATILE\n+      || XINT (PATTERN (insn), 1) != UNSPECV_BTI_C)\n+    {\n+      /* Emit a BTI_C.  */\n+      insn = emit_insn_before (gen_bti_c (), BB_HEAD (bb));\n     }\n \n-  default_print_patchable_function_entry (file, patch_area_size, record_p);\n+  /* Emit the patchable_area after BTI_C.  */\n+  insn = emit_insn_after (pa, insn);\n+  INSN_ADDRESSES_NEW (insn, -1);\n+}\n+\n+/* Output patchable area.  */\n+\n+void\n+aarch64_output_patchable_area (unsigned int patch_area_size, bool record_p)\n+{\n+  default_print_patchable_function_entry (asm_out_file, patch_area_size,\n+\t\t\t\t\t  record_p);\n }\n \n /* Implement ASM_OUTPUT_DEF_FROM_DECLS.  Output .variant_pcs for aliases.  */"}, {"sha": "896b6a8ac79f9fc7ada42791da9a2d05a7a275a2", "filename": "gcc/config/aarch64/aarch64.md", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/09c91caeb84e7c3609a12a53b57e5219a1dd2b15/gcc%2Fconfig%2Faarch64%2Faarch64.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/09c91caeb84e7c3609a12a53b57e5219a1dd2b15/gcc%2Fconfig%2Faarch64%2Faarch64.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64.md?ref=09c91caeb84e7c3609a12a53b57e5219a1dd2b15", "patch": "@@ -303,6 +303,7 @@\n     UNSPEC_TAG_SPACE\t\t; Translate address to MTE tag address space.\n     UNSPEC_LD1RO\n     UNSPEC_SALT_ADDR\n+    UNSPECV_PATCHABLE_AREA\n ])\n \n (define_c_enum \"unspecv\" [\n@@ -7825,6 +7826,19 @@\n   [(set_attr \"type\" \"ls64\")]\n )\n \n+(define_insn \"patchable_area\"\n+  [(unspec_volatile [(match_operand 0 \"const_int_operand\")\n+\t\t     (match_operand 1 \"const_int_operand\")]\n+\t\t    UNSPECV_PATCHABLE_AREA)]\n+  \"\"\n+{\n+  aarch64_output_patchable_area (INTVAL (operands[0]),\n+\t\t\t         INTVAL (operands[1]) != 0);\n+  return \"\";\n+}\n+  [(set (attr \"length\") (symbol_ref \"INTVAL (operands[0])\"))]\n+)\n+\n ;; AdvSIMD Stuff\n (include \"aarch64-simd.md\")\n "}, {"sha": "0a79901108c5a140905a0db48b7afdee1ac94797", "filename": "gcc/testsuite/gcc.target/aarch64/pr92424-2.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/09c91caeb84e7c3609a12a53b57e5219a1dd2b15/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fpr92424-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/09c91caeb84e7c3609a12a53b57e5219a1dd2b15/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fpr92424-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fpr92424-2.c?ref=09c91caeb84e7c3609a12a53b57e5219a1dd2b15", "patch": "@@ -9,4 +9,4 @@ __attribute__ ((target(\"branch-protection=bti\"),\n f10_bti ()\n {\n }\n-/* { dg-final { scan-assembler \"f10_bti:\\n\\thint\\t34 // bti c\\n.*\\.LPFE0:\\n\\tnop\\n.*\\tret\\n\" } } */\n+/* { dg-final { scan-assembler \"hint\\t34 // bti c\\n.*\\.LPFE0:\\n\\tnop\\n.*\\tret\\n\" } } */"}, {"sha": "854bb7f9feca908c8934b18a94dd32f0ab3e0eda", "filename": "gcc/testsuite/gcc.target/aarch64/pr92424-3.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/09c91caeb84e7c3609a12a53b57e5219a1dd2b15/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fpr92424-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/09c91caeb84e7c3609a12a53b57e5219a1dd2b15/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fpr92424-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fpr92424-3.c?ref=09c91caeb84e7c3609a12a53b57e5219a1dd2b15", "patch": "@@ -9,4 +9,4 @@ __attribute__ ((target(\"branch-protection=bti+pac-ret+leaf\"),\n f10_pac ()\n {\n }\n-/* { dg-final { scan-assembler \"f10_pac:\\n\\thint\\t34 // bti c\\n.*\\.LPFE0:\\n\\tnop\\n.*\\thint\\t25 // paciasp\\n.*\\thint\\t29 // autiasp\\n.*\\tret\\n\" } } */\n+/* { dg-final { scan-assembler \"hint\\t34 // bti c\\n.*\\.LPFE0:\\n\\tnop\\n.*\\thint\\t25 // paciasp\\n.*\\thint\\t29 // autiasp\\n.*\\tret\\n\" } } */"}, {"sha": "b075b8f75efd5f13c8b24040ece9f29bf590eedc", "filename": "gcc/testsuite/gcc.target/aarch64/pr98776.c", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/09c91caeb84e7c3609a12a53b57e5219a1dd2b15/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fpr98776.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/09c91caeb84e7c3609a12a53b57e5219a1dd2b15/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fpr98776.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fpr98776.c?ref=09c91caeb84e7c3609a12a53b57e5219a1dd2b15", "patch": "@@ -0,0 +1,11 @@\n+/* { dg-do \"compile\" } */\n+/* { dg-options \"-O1 -fpatchable-function-entry=1 -fasynchronous-unwind-tables\" } */\n+\n+/* Test the placement of the .LPFE0 label.  */\n+\n+void\n+foo (void)\n+{\n+}\n+\n+/* { dg-final { scan-assembler \"\\t\\.cfi_startproc\\n.*\\.LPFE0:\\n\\tnop\\n\\tret\\n\" } } */"}]}