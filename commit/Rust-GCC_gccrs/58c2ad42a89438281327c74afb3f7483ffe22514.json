{"sha": "58c2ad42a89438281327c74afb3f7483ffe22514", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NThjMmFkNDJhODk0MzgyODEzMjdjNzRhZmIzZjc0ODNmZmUyMjUxNA==", "commit": {"author": {"name": "Luis Machado", "email": "luis.machado@linaro.org", "date": "2018-05-22T18:35:15Z"}, "committer": {"name": "Luis Machado", "email": "luisgpm@gcc.gnu.org", "date": "2018-05-22T18:35:15Z"}, "message": "[AArch64] Recognize a missed usage of a sbfiz instruction\n\nA customer reported the following missed opportunities to combine a couple\ninstructions into a sbfiz.\n\nint sbfiz32 (int x)\n{\n  return x << 29 >> 10;\n}\n\nlong sbfiz64 (long x)\n{\n  return x << 58 >> 20;\n}\n\nThis gets converted to the following pattern:\n\n(set (reg:SI 98)\n    (ashift:SI (sign_extend:SI (reg:HI 0 x0 [ xD.3334 ]))\n        (const_int 6 [0x6])))\n\nCurrently, gcc generates the following:\n\nsbfiz32:\n  lsl x0, x0, 29\n  asr x0, x0, 10\n  ret\n\nsbfiz64:\n  lsl x0, x0, 58\n  asr x0, x0, 20\n  ret\n\nIt could generate this instead:\n\nsbfiz32:\n  sbfiz   w0, w0, 19, 3\n  ret\n\nsbfiz64::\n  sbfiz   x0, x0, 38, 6\n  ret\n\nThe unsigned versions already generate ubfiz for the same code, so the lack of\na sbfiz pattern may have been an oversight.\n\nThis particular sbfiz pattern shows up in both CPU2006 (~ 80 hits) and\nCPU2017 (~ 280 hits). It's not a lot, but seems beneficial in any case. No\nsignificant performance differences, probably due to the small number of\noccurrences or cases outside hot areas.\n\ngcc/ChangeLog:\n\n2018-05-22  Luis Machado  <luis.machado@linaro.org>\n\n\tgcc/\n\t* config/aarch64/aarch64.md (*ashift<mode>_extv_bfiz): New pattern.\n\ngcc/testsuite/ChangeLog:\n\n2018-05-22  Luis Machado  <luis.machado@linaro.org>\n\n\tgcc/testsuite/\n\t* gcc.target/aarch64/lsl_asr_sbfiz.c: New test.\n\nFrom-SVN: r260546", "tree": {"sha": "e5383edb41763183c8360ddf1bcd8410ebdf25db", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e5383edb41763183c8360ddf1bcd8410ebdf25db"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/58c2ad42a89438281327c74afb3f7483ffe22514", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/58c2ad42a89438281327c74afb3f7483ffe22514", "html_url": "https://github.com/Rust-GCC/gccrs/commit/58c2ad42a89438281327c74afb3f7483ffe22514", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/58c2ad42a89438281327c74afb3f7483ffe22514/comments", "author": {"login": "luislinaro", "id": 53092780, "node_id": "MDQ6VXNlcjUzMDkyNzgw", "avatar_url": "https://avatars.githubusercontent.com/u/53092780?v=4", "gravatar_id": "", "url": "https://api.github.com/users/luislinaro", "html_url": "https://github.com/luislinaro", "followers_url": "https://api.github.com/users/luislinaro/followers", "following_url": "https://api.github.com/users/luislinaro/following{/other_user}", "gists_url": "https://api.github.com/users/luislinaro/gists{/gist_id}", "starred_url": "https://api.github.com/users/luislinaro/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/luislinaro/subscriptions", "organizations_url": "https://api.github.com/users/luislinaro/orgs", "repos_url": "https://api.github.com/users/luislinaro/repos", "events_url": "https://api.github.com/users/luislinaro/events{/privacy}", "received_events_url": "https://api.github.com/users/luislinaro/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "927a00917dfdf5585159803211c71910b32da10f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/927a00917dfdf5585159803211c71910b32da10f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/927a00917dfdf5585159803211c71910b32da10f"}], "stats": {"total": 46, "additions": 46, "deletions": 0}, "files": [{"sha": "d2e0b06741e22e1811724c9dba8843e96eb9d939", "filename": "gcc/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/58c2ad42a89438281327c74afb3f7483ffe22514/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/58c2ad42a89438281327c74afb3f7483ffe22514/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=58c2ad42a89438281327c74afb3f7483ffe22514", "patch": "@@ -1,3 +1,7 @@\n+2018-05-22  Luis Machado  <luis.machado@linaro.org>\n+\n+\t* config/aarch64/aarch64.md (*ashift<mode>_extv_bfiz): New pattern.\n+\n 2018-05-22  Martin Sebor  <msebor@redhat.com>\n \n \t* calls.c (maybe_warn_nonstring_arg): Fix a typo in a comment."}, {"sha": "7a0e34d624b41435cb5897036477ccefdf7d2b89", "filename": "gcc/config/aarch64/aarch64.md", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/58c2ad42a89438281327c74afb3f7483ffe22514/gcc%2Fconfig%2Faarch64%2Faarch64.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/58c2ad42a89438281327c74afb3f7483ffe22514/gcc%2Fconfig%2Faarch64%2Faarch64.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64.md?ref=58c2ad42a89438281327c74afb3f7483ffe22514", "patch": "@@ -4790,6 +4790,20 @@\n   [(set_attr \"type\" \"bfx\")]\n )\n \n+;; Match sbfiz pattern in a shift left + shift right operation.\n+\n+(define_insn \"*ashift<mode>_extv_bfiz\"\n+  [(set (match_operand:GPI 0 \"register_operand\" \"=r\")\n+\t(ashift:GPI (sign_extract:GPI (match_operand:GPI 1 \"register_operand\" \"r\")\n+\t\t\t\t      (match_operand 2 \"aarch64_simd_shift_imm_offset_<mode>\" \"n\")\n+\t\t\t\t      (const_int 0))\n+\t\t     (match_operand 3 \"aarch64_simd_shift_imm_<mode>\" \"n\")))]\n+  \"IN_RANGE (INTVAL (operands[2]) + INTVAL (operands[3]),\n+\t     1, GET_MODE_BITSIZE (<MODE>mode) - 1)\"\n+  \"sbfiz\\\\t%<w>0, %<w>1, %3, %2\"\n+  [(set_attr \"type\" \"bfx\")]\n+)\n+\n ;; When the bit position and width of the equivalent extraction add up to 32\n ;; we can use a W-reg LSL instruction taking advantage of the implicit\n ;; zero-extension of the X-reg."}, {"sha": "5ab91fd0b88db4844614de7bd99c2d13c514dc49", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/58c2ad42a89438281327c74afb3f7483ffe22514/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/58c2ad42a89438281327c74afb3f7483ffe22514/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=58c2ad42a89438281327c74afb3f7483ffe22514", "patch": "@@ -1,3 +1,7 @@\n+2018-05-22  Luis Machado  <luis.machado@linaro.org>\n+\n+\t* gcc.target/aarch64/lsl_asr_sbfiz.c: New test.\n+\n 2018-05-22  Janus Weil  <janus@gcc.gnu.org>\n \n \tPR fortran/85841"}, {"sha": "106433d9131b0da2a612d4cc60924cb99d52926b", "filename": "gcc/testsuite/gcc.target/aarch64/lsl_asr_sbfiz.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/58c2ad42a89438281327c74afb3f7483ffe22514/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Flsl_asr_sbfiz.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/58c2ad42a89438281327c74afb3f7483ffe22514/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Flsl_asr_sbfiz.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Flsl_asr_sbfiz.c?ref=58c2ad42a89438281327c74afb3f7483ffe22514", "patch": "@@ -0,0 +1,24 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O3\" } */\n+\n+/* Check that a LSL followed by an ASR can be combined into a single SBFIZ\n+   instruction.  */\n+\n+/* Using W-reg */\n+\n+int\n+sbfiz32 (int x)\n+{\n+  return x << 29 >> 10;\n+}\n+\n+/* Using X-reg */\n+\n+long long\n+sbfiz64 (long long x)\n+{\n+  return x << 58 >> 20;\n+}\n+\n+/* { dg-final { scan-assembler \"sbfiz\\tw\" } } */\n+/* { dg-final { scan-assembler \"sbfiz\\tx\" } } */"}]}