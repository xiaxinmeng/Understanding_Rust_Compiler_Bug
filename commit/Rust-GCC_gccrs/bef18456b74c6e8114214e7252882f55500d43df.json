{"sha": "bef18456b74c6e8114214e7252882f55500d43df", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmVmMTg0NTZiNzRjNmU4MTE0MjE0ZTcyNTI4ODJmNTU1MDBkNDNkZg==", "commit": {"author": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2011-03-09T22:13:09Z"}, "committer": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2011-03-09T22:13:09Z"}, "message": "Solaris specific syslog support.\n\nFrom-SVN: r170837", "tree": {"sha": "a79eaedceae2cad9594cb151794741e8feba386e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a79eaedceae2cad9594cb151794741e8feba386e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/bef18456b74c6e8114214e7252882f55500d43df", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bef18456b74c6e8114214e7252882f55500d43df", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bef18456b74c6e8114214e7252882f55500d43df", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bef18456b74c6e8114214e7252882f55500d43df/comments", "author": null, "committer": null, "parents": [{"sha": "db7ec03597533caa93e7eb3688de61c0d6e2bc77", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/db7ec03597533caa93e7eb3688de61c0d6e2bc77", "html_url": "https://github.com/Rust-GCC/gccrs/commit/db7ec03597533caa93e7eb3688de61c0d6e2bc77"}], "stats": {"total": 183, "additions": 147, "deletions": 36}, "files": [{"sha": "bc8b8316f0ee173b09f6e53696b01e38526b29ef", "filename": "libgo/Makefile.am", "status": "modified", "additions": 17, "deletions": 6, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bef18456b74c6e8114214e7252882f55500d43df/libgo%2FMakefile.am", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bef18456b74c6e8114214e7252882f55500d43df/libgo%2FMakefile.am", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2FMakefile.am?ref=bef18456b74c6e8114214e7252882f55500d43df", "patch": "@@ -787,8 +787,15 @@ go_sync_files = \\\n go_sync_c_files = \\\n \tgo/sync/cas.c\n \n+if LIBGO_IS_SOLARIS\n+go_syslog_file = go/syslog/syslog_solaris.go\n+else\n+go_syslog_file = go/syslog/syslog_unix.go\n+endif\n+\n go_syslog_files = \\\n-\tgo/syslog/syslog.go\n+\tgo/syslog/syslog.go \\\n+\t$(go_syslog_file)\n \n go_tabwriter_files = \\\n \tgo/tabwriter/tabwriter.go\n@@ -1785,10 +1792,14 @@ sync/check: $(CHECK_DEPS)\n \t$(CHECK)\n .PHONY: sync/check\n \n-syslog/libsyslog.$(OBJEXT): $(go_syslog_files) fmt.gox log.gox net.gox os.gox\n-\t$(BUILDPACKAGE)\n-syslog/libsyslog.lo: syslog/libsyslog.$(OBJEXT)\n-syslog/libsyslog.la: syslog/libsyslog.lo\n+syslog/syslog.$(OBJEXT): $(go_syslog_files) fmt.gox log.gox net.gox os.gox \\\n+\t\tsyscall.gox\n+\ttest -d syslog || $(MKDIR_P) syslog\n+\t$(LTGOCOMPILE) -I . -c -o $@ -fgo-prefix=libgo_syslog $(srcdir)/go/syslog/syslog.go $(srcdir)/$(go_syslog_file)\n+syslog/syslog_c.$(OBJEXT): $(srcdir)/go/syslog/syslog_c.c syslog/syslog.$(OBJEXT)\n+\t$(LTCOMPILE) -c -o $@ $(srcdir)/go/syslog/syslog_c.c\n+syslog/libsyslog.la: syslog/syslog.$(OBJEXT) syslog/syslog_c.$(OBJEXT)\n+\t$(LINK) syslog/syslog.lo syslog/syslog_c.lo\n syslog/check: $(CHECK_DEPS)\n \t$(CHECK)\n .PHONY: syslog/check\n@@ -2733,7 +2744,7 @@ strings.gox: strings/libstrings.$(OBJEXT)\n \t$(BUILDGOX)\n sync.gox: sync/mutex.$(OBJEXT)\n \t$(BUILDGOX)\n-syslog.gox: syslog/libsyslog.$(OBJEXT)\n+syslog.gox: syslog/syslog.$(OBJEXT)\n \t$(BUILDGOX)\n syscall.gox: syscalls/syscall.$(OBJEXT)\n \t$(BUILDGOX)"}, {"sha": "12c542cd1e1bba62c3114dafe6e2e2f424d8b8b1", "filename": "libgo/Makefile.in", "status": "modified", "additions": 13, "deletions": 6, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bef18456b74c6e8114214e7252882f55500d43df/libgo%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bef18456b74c6e8114214e7252882f55500d43df/libgo%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2FMakefile.in?ref=bef18456b74c6e8114214e7252882f55500d43df", "patch": "@@ -1139,8 +1139,11 @@ go_sync_files = \\\n go_sync_c_files = \\\n \tgo/sync/cas.c\n \n+@LIBGO_IS_SOLARIS_FALSE@go_syslog_file = go/syslog/syslog_unix.go\n+@LIBGO_IS_SOLARIS_TRUE@go_syslog_file = go/syslog/syslog_solaris.go\n go_syslog_files = \\\n-\tgo/syslog/syslog.go\n+\tgo/syslog/syslog.go \\\n+\t$(go_syslog_file)\n \n go_tabwriter_files = \\\n \tgo/tabwriter/tabwriter.go\n@@ -4163,10 +4166,14 @@ sync/check: $(CHECK_DEPS)\n \t$(CHECK)\n .PHONY: sync/check\n \n-syslog/libsyslog.$(OBJEXT): $(go_syslog_files) fmt.gox log.gox net.gox os.gox\n-\t$(BUILDPACKAGE)\n-syslog/libsyslog.lo: syslog/libsyslog.$(OBJEXT)\n-syslog/libsyslog.la: syslog/libsyslog.lo\n+syslog/syslog.$(OBJEXT): $(go_syslog_files) fmt.gox log.gox net.gox os.gox \\\n+\t\tsyscall.gox\n+\ttest -d syslog || $(MKDIR_P) syslog\n+\t$(LTGOCOMPILE) -I . -c -o $@ -fgo-prefix=libgo_syslog $(srcdir)/go/syslog/syslog.go $(srcdir)/$(go_syslog_file)\n+syslog/syslog_c.$(OBJEXT): $(srcdir)/go/syslog/syslog_c.c syslog/syslog.$(OBJEXT)\n+\t$(LTCOMPILE) -c -o $@ $(srcdir)/go/syslog/syslog_c.c\n+syslog/libsyslog.la: syslog/syslog.$(OBJEXT) syslog/syslog_c.$(OBJEXT)\n+\t$(LINK) syslog/syslog.lo syslog/syslog_c.lo\n syslog/check: $(CHECK_DEPS)\n \t$(CHECK)\n .PHONY: syslog/check\n@@ -5107,7 +5114,7 @@ strings.gox: strings/libstrings.$(OBJEXT)\n \t$(BUILDGOX)\n sync.gox: sync/mutex.$(OBJEXT)\n \t$(BUILDGOX)\n-syslog.gox: syslog/libsyslog.$(OBJEXT)\n+syslog.gox: syslog/syslog.$(OBJEXT)\n \t$(BUILDGOX)\n syscall.gox: syscalls/syscall.$(OBJEXT)\n \t$(BUILDGOX)"}, {"sha": "711d5ddc74e5f8bf2ade888c8a4c9e30eaca06d4", "filename": "libgo/go/syslog/syslog.go", "status": "modified", "additions": 30, "deletions": 24, "changes": 54, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bef18456b74c6e8114214e7252882f55500d43df/libgo%2Fgo%2Fsyslog%2Fsyslog.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bef18456b74c6e8114214e7252882f55500d43df/libgo%2Fgo%2Fsyslog%2Fsyslog.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fsyslog%2Fsyslog.go?ref=bef18456b74c6e8114214e7252882f55500d43df", "patch": "@@ -34,7 +34,17 @@ const (\n type Writer struct {\n \tpriority Priority\n \tprefix   string\n-\tconn     net.Conn\n+\tconn     serverConn\n+}\n+\n+type serverConn interface {\n+\twriteBytes(p Priority, prefix string, b []byte) (int, os.Error)\n+\twriteString(p Priority, prefix string, s string) (int, os.Error)\n+\tclose() os.Error\n+}\n+\n+type netConn struct {\n+\tconn net.Conn\n }\n \n // New establishes a new connection to the system log daemon.\n@@ -52,46 +62,30 @@ func Dial(network, raddr string, priority Priority, prefix string) (w *Writer, e\n \tif prefix == \"\" {\n \t\tprefix = os.Args[0]\n \t}\n-\tvar conn net.Conn\n+\tvar conn serverConn\n \tif network == \"\" {\n \t\tconn, err = unixSyslog()\n \t} else {\n-\t\tconn, err = net.Dial(network, \"\", raddr)\n+\t\tvar c net.Conn\n+\t\tc, err = net.Dial(network, \"\", raddr)\n+\t\tconn = netConn{c}\n \t}\n \treturn &Writer{priority, prefix, conn}, err\n }\n \n-func unixSyslog() (conn net.Conn, err os.Error) {\n-\tlogTypes := []string{\"unixgram\", \"unix\"}\n-\tlogPaths := []string{\"/dev/log\", \"/var/run/syslog\"}\n-\tvar raddr string\n-\tfor _, network := range logTypes {\n-\t\tfor _, path := range logPaths {\n-\t\t\traddr = path\n-\t\t\tconn, err := net.Dial(network, \"\", raddr)\n-\t\t\tif err != nil {\n-\t\t\t\tcontinue\n-\t\t\t} else {\n-\t\t\t\treturn conn, nil\n-\t\t\t}\n-\t\t}\n-\t}\n-\treturn nil, os.ErrorString(\"Unix syslog delivery error\")\n-}\n-\n // Write sends a log message to the syslog daemon.\n func (w *Writer) Write(b []byte) (int, os.Error) {\n \tif w.priority > LOG_DEBUG || w.priority < LOG_EMERG {\n \t\treturn 0, os.EINVAL\n \t}\n-\treturn fmt.Fprintf(w.conn, \"<%d>%s: %s\\n\", w.priority, w.prefix, b)\n+\treturn w.conn.writeBytes(w.priority, w.prefix, b)\n }\n \n func (w *Writer) writeString(p Priority, s string) (int, os.Error) {\n-\treturn fmt.Fprintf(w.conn, \"<%d>%s: %s\\n\", p, w.prefix, s)\n+\treturn w.conn.writeString(p, w.prefix, s)\n }\n \n-func (w *Writer) Close() os.Error { return w.conn.Close() }\n+func (w *Writer) Close() os.Error { return w.conn.close() }\n \n // Emerg logs a message using the LOG_EMERG priority.\n func (w *Writer) Emerg(m string) (err os.Error) {\n@@ -131,6 +125,18 @@ func (w *Writer) Debug(m string) (err os.Error) {\n \treturn err\n }\n \n+func (n netConn) writeBytes(p Priority, prefix string, b []byte) (int, os.Error) {\n+\treturn fmt.Fprintf(n.conn, \"<%d>%s: %s\\n\", p, prefix, b)\n+}\n+\n+func (n netConn) writeString(p Priority, prefix string, s string) (int, os.Error) {\n+\treturn fmt.Fprintf(n.conn, \"<%d>%s: %s\\n\", p, prefix, s)\n+}\n+\n+func (n netConn) close() os.Error {\n+\treturn n.conn.Close()\n+}\n+\n // NewLogger provides an object that implements the full log.Logger interface,\n // but sends messages to Syslog instead; flag is passed as is to Logger;\n // priority will be used for all messages sent using this interface."}, {"sha": "f49b9ffcb1c27040865f374c9ac1b375e7e51a21", "filename": "libgo/go/syslog/syslog_c.c", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bef18456b74c6e8114214e7252882f55500d43df/libgo%2Fgo%2Fsyslog%2Fsyslog_c.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bef18456b74c6e8114214e7252882f55500d43df/libgo%2Fgo%2Fsyslog%2Fsyslog_c.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fsyslog%2Fsyslog_c.c?ref=bef18456b74c6e8114214e7252882f55500d43df", "patch": "@@ -0,0 +1,19 @@\n+/* syslog_c.c -- call syslog for Go.\n+\n+   Copyright 2011 The Go Authors. All rights reserved.\n+   Use of this source code is governed by a BSD-style\n+   license that can be found in the LICENSE file.  */\n+\n+#include <syslog.h>\n+\n+/* We need to use a C function to call the syslog function, because we\n+   can't represent a C varargs function in Go.  */\n+\n+void syslog_c(int, const char*)\n+  asm (\"libgo_syslog.syslog.syslog_c\");\n+\n+void\n+syslog_c (int priority, const char *msg)\n+{\n+  syslog (priority, \"%s\", msg);\n+}"}, {"sha": "044351dbfd44c654bda0cedf0915610ad1617f07", "filename": "libgo/go/syslog/syslog_solaris.go", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bef18456b74c6e8114214e7252882f55500d43df/libgo%2Fgo%2Fsyslog%2Fsyslog_solaris.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bef18456b74c6e8114214e7252882f55500d43df/libgo%2Fgo%2Fsyslog%2Fsyslog_solaris.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fsyslog%2Fsyslog_solaris.go?ref=bef18456b74c6e8114214e7252882f55500d43df", "patch": "@@ -0,0 +1,37 @@\n+// Copyright 2011 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+// gccgo specific implementation of syslog for Solaris.  Solaris uses\n+// STREAMS to communicate with syslogd.  That is enough of a pain that\n+// we just call the libc function.\n+\n+package syslog\n+\n+import (\n+\t\"fmt\"\n+\t\"os\"\n+\t\"syscall\"\n+)\n+\n+func unixSyslog() (conn serverConn, err os.Error) {\n+\treturn libcConn(0), nil\n+}\n+\n+type libcConn int\n+\n+func syslog_c(int, *byte)\n+\n+func (libcConn) writeBytes(p Priority, prefix string, b []byte) (int, os.Error) {\n+\tsyslog_c(int(p), syscall.StringBytePtr(fmt.Sprintf(\"%s: %s\", prefix, b)))\n+\treturn len(b), nil\n+}\n+\n+func (libcConn) writeString(p Priority, prefix string, s string) (int, os.Error) {\n+\tsyslog_c(int(p), syscall.StringBytePtr(fmt.Sprintf(\"%s: %s\", prefix, s)))\n+\treturn len(s), nil\n+}\n+\n+func (libcConn) close() os.Error {\n+\treturn nil\n+}"}, {"sha": "b4daf88ee285af11ce974a123aac0c9ca03a096e", "filename": "libgo/go/syslog/syslog_unix.go", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bef18456b74c6e8114214e7252882f55500d43df/libgo%2Fgo%2Fsyslog%2Fsyslog_unix.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bef18456b74c6e8114214e7252882f55500d43df/libgo%2Fgo%2Fsyslog%2Fsyslog_unix.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fsyslog%2Fsyslog_unix.go?ref=bef18456b74c6e8114214e7252882f55500d43df", "patch": "@@ -0,0 +1,31 @@\n+// Copyright 2009 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+package syslog\n+\n+import (\n+\t\"net\"\n+\t\"os\"\n+)\n+\n+// unixSyslog opens a connection to the syslog daemon running on the\n+// local machine using a Unix domain socket.\n+\n+func unixSyslog() (conn serverConn, err os.Error) {\n+\tlogTypes := []string{\"unixgram\", \"unix\"}\n+\tlogPaths := []string{\"/dev/log\", \"/var/run/syslog\"}\n+\tvar raddr string\n+\tfor _, network := range logTypes {\n+\t\tfor _, path := range logPaths {\n+\t\t\traddr = path\n+\t\t\tconn, err := net.Dial(network, \"\", raddr)\n+\t\t\tif err != nil {\n+\t\t\t\tcontinue\n+\t\t\t} else {\n+\t\t\t\treturn netConn{conn}, nil\n+\t\t\t}\n+\t\t}\n+\t}\n+\treturn nil, os.ErrorString(\"Unix syslog delivery error\")\n+}"}]}