{"sha": "84264cb69e412b6626c2b24cd89592220f08474d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODQyNjRjYjY5ZTQxMmI2NjI2YzJiMjRjZDg5NTkyMjIwZjA4NDc0ZA==", "commit": {"author": {"name": "Ranjit Mathew", "email": "rmathew@hotmail.com", "date": "2004-04-09T04:39:24Z"}, "committer": {"name": "Ranjit Mathew", "email": "rmathew@gcc.gnu.org", "date": "2004-04-09T04:39:24Z"}, "message": "VMThrowable.java (getStackTrace): Pass trace as-is to modified lookup().\n\n\t* java/lang/VMThrowable.java (getStackTrace): Pass trace as-is to\n\tmodified lookup().\n\t* gnu/gcj/runtime/NameFinder.java (lookup): Change to take in a\n\tStackTraceElement directly.\n\t(newElement): New native helper method to create StackTraceElement\n\tbypassing Java access control.\n\t(createStackTraceElement): Use newElement() instead of directly\n\tcalling StackTraceElement's constructor.\n\t* gnu/gcj/runtime/natNameFinder.cc (newElement): New method.\n\nFrom-SVN: r80541", "tree": {"sha": "bee37dba73aef5eae797ab35d14db74a96616823", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/bee37dba73aef5eae797ab35d14db74a96616823"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/84264cb69e412b6626c2b24cd89592220f08474d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/84264cb69e412b6626c2b24cd89592220f08474d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/84264cb69e412b6626c2b24cd89592220f08474d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/84264cb69e412b6626c2b24cd89592220f08474d/comments", "author": null, "committer": null, "parents": [{"sha": "886733617a5414bf849d049b04df5ba6460295fe", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/886733617a5414bf849d049b04df5ba6460295fe", "html_url": "https://github.com/Rust-GCC/gccrs/commit/886733617a5414bf849d049b04df5ba6460295fe"}], "stats": {"total": 51, "additions": 43, "deletions": 8}, "files": [{"sha": "787119bde05cea8d6439707ac29e2f7a5d3fdc49", "filename": "libjava/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/84264cb69e412b6626c2b24cd89592220f08474d/libjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/84264cb69e412b6626c2b24cd89592220f08474d/libjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FChangeLog?ref=84264cb69e412b6626c2b24cd89592220f08474d", "patch": "@@ -1,3 +1,15 @@\n+2004-04-09  Ranjit Mathew  <rmathew@hotmail.com>\n+\t\n+\t* java/lang/VMThrowable.java (getStackTrace): Pass trace as-is to\n+\tmodified lookup().\n+\t* gnu/gcj/runtime/NameFinder.java (lookup): Change to take in a\n+\tStackTraceElement directly.\n+\t(newElement): New native helper method to create StackTraceElement\n+\tbypassing Java access control.\n+\t(createStackTraceElement): Use newElement() instead of directly\n+\tcalling StackTraceElement's constructor.\n+\t* gnu/gcj/runtime/natNameFinder.cc (newElement): New method.\n+\n 2004-04-01  Michael Koch  <konqueror@gmx.de>\n \n \t* java/lang/SecurityManager.java"}, {"sha": "024a6eeb232a0c9e4f578dbc30c11827de29df62", "filename": "libjava/gnu/gcj/runtime/NameFinder.java", "status": "modified", "additions": 17, "deletions": 4, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/84264cb69e412b6626c2b24cd89592220f08474d/libjava%2Fgnu%2Fgcj%2Fruntime%2FNameFinder.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/84264cb69e412b6626c2b24cd89592220f08474d/libjava%2Fgnu%2Fgcj%2Fruntime%2FNameFinder.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fgnu%2Fgcj%2Fruntime%2FNameFinder.java?ref=84264cb69e412b6626c2b24cd89592220f08474d", "patch": "@@ -1,5 +1,5 @@\n /* NameFinder.java -- Translates addresses to StackTraceElements.\n-   Copyright (C) 2002 Free Software Foundation, Inc.\n+   Copyright (C) 2002, 2004 Free Software Foundation, Inc.\n \n    This file is part of libgcj.\n \n@@ -241,8 +241,11 @@ private StackTraceElement lookup(RawData addrs, int n)\n    * Given an Throwable and a native stacktrace returns an array of\n    * StackTraceElement containing class, method, file and linenumbers.\n    */\n-  public StackTraceElement[] lookup(Throwable t, RawData addrs, int length)\n+  public StackTraceElement[] lookup(Throwable t, StackTrace trace)\n   {\n+    RawData addrs = trace.stackTraceAddrs();\n+    int length = trace.length();\n+\n     StackTraceElement[] elements = new StackTraceElement[length];\n     for (int i=0; i < length; i++)\n       elements[i] = lookup(addrs, i);\n@@ -352,6 +355,16 @@ else if (remove_interpreter\n     return stack;\n   }\n \n+  /**\n+   * Native helper method to create a StackTraceElement. Needed to work\n+   * around normal Java access restrictions.\n+   */\n+  native private StackTraceElement newElement(String fileName,\n+                                              int lineNumber,\n+                                              String className,\n+                                              String methName,\n+                                              boolean isNative);\n+\n   /**\n    * Creates a StackTraceElement given a string and a filename.\n    * Splits the given string into the class and method part.\n@@ -363,7 +376,7 @@ else if (remove_interpreter\n   private StackTraceElement createStackTraceElement(String name, String file)\n   {\n     if (!demangle)\n-      return new StackTraceElement(file, -1, null, name, false);\n+      return newElement(file, -1, null, name, false);\n \n     String s = demangleName(name);\n     String methodName = s;\n@@ -409,7 +422,7 @@ else if (fileName != null)\n \t  }\n       }\n \n-    return new StackTraceElement(fileName, line, className, methodName, false);\n+    return newElement(fileName, line, className, methodName, false);\n   }\n \n   /**"}, {"sha": "d688884ca366bec9048f98cc5018175042aa59e0", "filename": "libjava/gnu/gcj/runtime/natNameFinder.cc", "status": "modified", "additions": 12, "deletions": 1, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/84264cb69e412b6626c2b24cd89592220f08474d/libjava%2Fgnu%2Fgcj%2Fruntime%2FnatNameFinder.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/84264cb69e412b6626c2b24cd89592220f08474d/libjava%2Fgnu%2Fgcj%2Fruntime%2FnatNameFinder.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fgnu%2Fgcj%2Fruntime%2FnatNameFinder.cc?ref=84264cb69e412b6626c2b24cd89592220f08474d", "patch": "@@ -1,6 +1,6 @@\n // natNameFinder.cc - native helper methods for NameFinder.java\n \n-/* Copyright (C) 2002, 2003  Free Software Foundation, Inc\n+/* Copyright (C) 2002, 2003, 2004  Free Software Foundation, Inc\n \n    This file is part of libgcj.\n \n@@ -48,6 +48,17 @@ details.  */\n \n #endif /* ! __USER_LABEL_PREFIX__ */\n \n+java::lang::StackTraceElement*\n+gnu::gcj::runtime::NameFinder::newElement (java::lang::String* fileName,\n+                                           jint lineNumber,\n+                                           java::lang::String* className,\n+                                           java::lang::String* methName,\n+                                           jboolean isNative)\n+{\n+  return new java::lang::StackTraceElement( fileName, lineNumber,\n+                                            className, methName, isNative);\n+}\n+                                          \n java::lang::String*\n gnu::gcj::runtime::NameFinder::getExternalLabel (java::lang::String* name)\n {"}, {"sha": "102916a5d7cbdf7925c76699a3bb88c50a8cc87f", "filename": "libjava/java/lang/VMThrowable.java", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/84264cb69e412b6626c2b24cd89592220f08474d/libjava%2Fjava%2Flang%2FVMThrowable.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/84264cb69e412b6626c2b24cd89592220f08474d/libjava%2Fjava%2Flang%2FVMThrowable.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Flang%2FVMThrowable.java?ref=84264cb69e412b6626c2b24cd89592220f08474d", "patch": "@@ -1,5 +1,5 @@\n /* java.lang.VMThrowable -- VM support methods for Throwable.\n-   Copyright (C) 1998, 1999, 2002 Free Software Foundation, Inc.\n+   Copyright (C) 1998, 1999, 2002, 2004 Free Software Foundation, Inc.\n \n This file is part of GNU Classpath.\n \n@@ -96,8 +96,7 @@ StackTraceElement[] getStackTrace(Throwable t)\n     if (trace != null)\n       {\n \tNameFinder nameFinder = new NameFinder();\n-\tresult = nameFinder.lookup(t, trace.stackTraceAddrs(), \n-\t\t\t\t   trace.length());\n+\tresult = nameFinder.lookup(t, trace);\n \tnameFinder.close();\n       }\n     else"}]}