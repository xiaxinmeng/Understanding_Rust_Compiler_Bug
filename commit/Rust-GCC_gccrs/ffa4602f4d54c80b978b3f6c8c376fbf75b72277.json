{"sha": "ffa4602f4d54c80b978b3f6c8c376fbf75b72277", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmZhNDYwMmY0ZDU0YzgwYjk3OGIzZjZjOGMzNzZmYmY3NWI3MjI3Nw==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2014-06-06T07:32:25Z"}, "committer": {"name": "Eric Botcazou", "email": "ebotcazou@gcc.gnu.org", "date": "2014-06-06T07:32:25Z"}, "message": "rtl.h (insn_location): Declare.\n\n\t* rtl.h (insn_location): Declare.\n\t* cfgcleanup.c (try_forward_edges): Compare the locus of locations\n\twith UNKNOWN_LOCATION.\n\t* emit-rtl.c (insn_location): New function.\n\t* final.c (notice_source_line): Check that the instruction has a\n\tlocation before retrieving it and use insn_location.\n\t* modulo-sched.c (loop_single_full_bb_p): Likewise.\n\t* print-rtl.c (print_rtx): Likewise.\n\nFrom-SVN: r211305", "tree": {"sha": "fc8f51ea70b82f892ac226dafb7defa86a52c93b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/fc8f51ea70b82f892ac226dafb7defa86a52c93b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ffa4602f4d54c80b978b3f6c8c376fbf75b72277", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ffa4602f4d54c80b978b3f6c8c376fbf75b72277", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ffa4602f4d54c80b978b3f6c8c376fbf75b72277", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ffa4602f4d54c80b978b3f6c8c376fbf75b72277/comments", "author": null, "committer": null, "parents": [{"sha": "28a4a292fc1717544e68ed2f6107b3f0cbe10aed", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/28a4a292fc1717544e68ed2f6107b3f0cbe10aed", "html_url": "https://github.com/Rust-GCC/gccrs/commit/28a4a292fc1717544e68ed2f6107b3f0cbe10aed"}], "stats": {"total": 67, "additions": 46, "deletions": 21}, "files": [{"sha": "77ac41642786d99afb611755652c35a8e3fa8b07", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ffa4602f4d54c80b978b3f6c8c376fbf75b72277/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ffa4602f4d54c80b978b3f6c8c376fbf75b72277/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=ffa4602f4d54c80b978b3f6c8c376fbf75b72277", "patch": "@@ -1,3 +1,14 @@\n+2014-06-06  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* rtl.h (insn_location): Declare.\n+\t* cfgcleanup.c (try_forward_edges): Compare the locus of locations\n+\twith UNKNOWN_LOCATION.\n+\t* emit-rtl.c (insn_location): New function.\n+\t* final.c (notice_source_line): Check that the instruction has a\n+\tlocation before retrieving it and use insn_location.\n+\t* modulo-sched.c (loop_single_full_bb_p): Likewise.\n+\t* print-rtl.c (print_rtx): Likewise.\n+\n 2014-06-06  Richard Biener  <rguenther@suse.de>\n \n \t* passes.def: Move 2nd VRP pass before phi-only-cprop."}, {"sha": "26dfbe62ddc278d394e63fc6ed5fa03ff26d0b8d", "filename": "gcc/cfgcleanup.c", "status": "modified", "additions": 11, "deletions": 12, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ffa4602f4d54c80b978b3f6c8c376fbf75b72277/gcc%2Fcfgcleanup.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ffa4602f4d54c80b978b3f6c8c376fbf75b72277/gcc%2Fcfgcleanup.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcfgcleanup.c?ref=ffa4602f4d54c80b978b3f6c8c376fbf75b72277", "patch": "@@ -482,31 +482,30 @@ try_forward_edges (int mode, basic_block b)\n \t\t  location_t new_locus = single_succ_edge (target)->goto_locus;\n \t\t  location_t locus = goto_locus;\n \n-\t\t  if (new_locus != UNKNOWN_LOCATION\n-\t\t      && locus != UNKNOWN_LOCATION\n+\t\t  if (LOCATION_LOCUS (new_locus) != UNKNOWN_LOCATION\n+\t\t      && LOCATION_LOCUS (locus) != UNKNOWN_LOCATION\n \t\t      && new_locus != locus)\n \t\t    new_target = NULL;\n \t\t  else\n \t\t    {\n-\t\t      rtx last;\n-\n-\t\t      if (new_locus != UNKNOWN_LOCATION)\n+\t\t      if (LOCATION_LOCUS (new_locus) != UNKNOWN_LOCATION)\n \t\t\tlocus = new_locus;\n \n-\t\t      last = BB_END (target);\n+\t\t      rtx last = BB_END (target);\n \t\t      if (DEBUG_INSN_P (last))\n \t\t\tlast = prev_nondebug_insn (last);\n+\t\t      if (last && INSN_P (last))\n+\t\t\tnew_locus = INSN_LOCATION (last);\n+\t\t      else\n+\t\t\tnew_locus = UNKNOWN_LOCATION;\n \n-\t\t      new_locus = last && INSN_P (last)\n-\t\t\t\t  ? INSN_LOCATION (last) : 0;\n-\n-\t\t      if (new_locus != UNKNOWN_LOCATION\n-\t\t\t  && locus != UNKNOWN_LOCATION\n+\t\t      if (LOCATION_LOCUS (new_locus) != UNKNOWN_LOCATION\n+\t\t\t  && LOCATION_LOCUS (locus) != UNKNOWN_LOCATION\n \t\t\t  && new_locus != locus)\n \t\t\tnew_target = NULL;\n \t\t      else\n \t\t\t{\n-\t\t\t  if (new_locus != UNKNOWN_LOCATION)\n+\t\t\t  if (LOCATION_LOCUS (new_locus) != UNKNOWN_LOCATION)\n \t\t\t    locus = new_locus;\n \n \t\t\t  goto_locus = locus;"}, {"sha": "ceb072a5522194df322f4dfaf45a5a79802c4e3b", "filename": "gcc/emit-rtl.c", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ffa4602f4d54c80b978b3f6c8c376fbf75b72277/gcc%2Femit-rtl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ffa4602f4d54c80b978b3f6c8c376fbf75b72277/gcc%2Femit-rtl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Femit-rtl.c?ref=ffa4602f4d54c80b978b3f6c8c376fbf75b72277", "patch": "@@ -6174,6 +6174,13 @@ insn_file (const_rtx insn)\n   return LOCATION_FILE (INSN_LOCATION (insn));\n }\n \n+/* Return expanded location of the statement that produced this insn.  */\n+expanded_location\n+insn_location (const_rtx insn)\n+{\n+  return expand_location (INSN_LOCATION (insn));\n+}\n+\n /* Return true if memory model MODEL requires a pre-operation (release-style)\n    barrier or a post-operation (acquire-style) barrier.  While not universal,\n    this function matches behavior of several targets.  */"}, {"sha": "4f08073341632c98a53e4a5636f8a6199dd984d5", "filename": "gcc/final.c", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ffa4602f4d54c80b978b3f6c8c376fbf75b72277/gcc%2Ffinal.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ffa4602f4d54c80b978b3f6c8c376fbf75b72277/gcc%2Ffinal.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffinal.c?ref=ffa4602f4d54c80b978b3f6c8c376fbf75b72277", "patch": "@@ -3019,10 +3019,16 @@ notice_source_line (rtx insn, bool *is_stmt)\n       filename = override_filename;\n       linenum = override_linenum;\n     }\n+  else if (INSN_HAS_LOCATION (insn))\n+    {\n+      expanded_location xloc = insn_location (insn);\n+      filename = xloc.file;\n+      linenum = xloc.line;\n+    }\n   else\n     {\n-      filename = insn_file (insn);\n-      linenum = insn_line (insn);\n+      filename = NULL;\n+      linenum = 0;\n     }\n \n   if (filename == NULL)"}, {"sha": "6db1a21bbb59edcc557f3536ca3c59f20caa0259", "filename": "gcc/modulo-sched.c", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ffa4602f4d54c80b978b3f6c8c376fbf75b72277/gcc%2Fmodulo-sched.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ffa4602f4d54c80b978b3f6c8c376fbf75b72277/gcc%2Fmodulo-sched.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fmodulo-sched.c?ref=ffa4602f4d54c80b978b3f6c8c376fbf75b72277", "patch": "@@ -1244,11 +1244,10 @@ loop_single_full_bb_p (struct loop *loop)\n static void\n dump_insn_location (rtx insn)\n {\n-  if (dump_file && INSN_LOCATION (insn))\n+  if (dump_file && INSN_HAS_LOCATION (insn))\n     {\n-      const char *file = insn_file (insn);\n-      if (file)\n-\tfprintf (dump_file, \" %s:%i\", file, insn_line (insn));\n+      expanded_location xloc = insn_location (insn);\n+      fprintf (dump_file, \" %s:%i\", xloc.file, xloc.line);\n     }\n }\n "}, {"sha": "5dc8e94411a0051f500a2f08bc6f3f051e38f38d", "filename": "gcc/print-rtl.c", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ffa4602f4d54c80b978b3f6c8c376fbf75b72277/gcc%2Fprint-rtl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ffa4602f4d54c80b978b3f6c8c376fbf75b72277/gcc%2Fprint-rtl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fprint-rtl.c?ref=ffa4602f4d54c80b978b3f6c8c376fbf75b72277", "patch": "@@ -395,9 +395,11 @@ print_rtx (const_rtx in_rtx)\n \t    /*  Pretty-print insn locations.  Ignore scoping as it is mostly\n \t\tredundant with line number information and do not print anything\n \t\twhen there is no location information available.  */\n-\t    if (INSN_LOCATION (in_rtx) && insn_file (in_rtx))\n-\t      fprintf (outfile, \" %s:%i\", insn_file (in_rtx),\n-\t\t       insn_line (in_rtx));\n+\t    if (INSN_HAS_LOCATION (in_rtx))\n+\t      {\n+\t\texpanded_location xloc = insn_location (in_rtx);\n+\t\tfprintf (outfile, \" %s:%i\", xloc.file, xloc.line);\n+\t      }\n #endif\n \t  }\n \telse if (i == 6 && GET_CODE (in_rtx) == ASM_OPERANDS)"}, {"sha": "6ec91a890a616224e26d4ec73cee37ef898aebd7", "filename": "gcc/rtl.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ffa4602f4d54c80b978b3f6c8c376fbf75b72277/gcc%2Frtl.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ffa4602f4d54c80b978b3f6c8c376fbf75b72277/gcc%2Frtl.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frtl.h?ref=ffa4602f4d54c80b978b3f6c8c376fbf75b72277", "patch": "@@ -2130,6 +2130,7 @@ extern rtx prev_cc0_setter (rtx);\n extern int insn_line (const_rtx);\n extern const char * insn_file (const_rtx);\n extern tree insn_scope (const_rtx);\n+extern expanded_location insn_location (const_rtx);\n extern location_t prologue_location, epilogue_location;\n \n /* In jump.c */"}]}