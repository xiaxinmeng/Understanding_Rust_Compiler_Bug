{"sha": "7b9d4f7084b377ac50df11387983c5b4e6004137", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2I5ZDRmNzA4NGIzNzdhYzUwZGYxMTM4Nzk4M2M1YjRlNjAwNDEzNw==", "commit": {"author": {"name": "Zdenek Dvorak", "email": "dvorakz@suse.cz", "date": "2005-09-22T11:24:00Z"}, "committer": {"name": "Zdenek Dvorak", "email": "rakdver@gcc.gnu.org", "date": "2005-09-22T11:24:00Z"}, "message": "re PR tree-optimization/22438 (ICE SEGV in is_gimple_variable at tree-gimple.c:239)\n\n\tPR tree-optimization/22438\n\t* tree-ssa-loop-ivopts.c (rewrite_use_nonlinear_expr): Handle all\n\tpreserved iv rhs rewriting specially.\n\nFrom-SVN: r104522", "tree": {"sha": "76c2e159c8e6f8d8fe4ea0fdacc3a048f57fe959", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/76c2e159c8e6f8d8fe4ea0fdacc3a048f57fe959"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7b9d4f7084b377ac50df11387983c5b4e6004137", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7b9d4f7084b377ac50df11387983c5b4e6004137", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7b9d4f7084b377ac50df11387983c5b4e6004137", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7b9d4f7084b377ac50df11387983c5b4e6004137/comments", "author": null, "committer": null, "parents": [{"sha": "ccdeca37fe155145a1857d13557b8dfb9eca2dd5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ccdeca37fe155145a1857d13557b8dfb9eca2dd5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ccdeca37fe155145a1857d13557b8dfb9eca2dd5"}], "stats": {"total": 62, "additions": 52, "deletions": 10}, "files": [{"sha": "5ba52fe415fb05c23725cf4ff8511c0eb0ec54d2", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b9d4f7084b377ac50df11387983c5b4e6004137/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b9d4f7084b377ac50df11387983c5b4e6004137/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=7b9d4f7084b377ac50df11387983c5b4e6004137", "patch": "@@ -1,3 +1,9 @@\n+2005-09-21  Zdenek Dvorak  <dvorakz@suse.cz>\n+\n+\tPR tree-optimization/22438\n+\t* tree-ssa-loop-ivopts.c (rewrite_use_nonlinear_expr): Handle all\n+\tpreserved iv rhs rewriting specially.\n+\n 2005-09-21  Daniel Berlin  <dberlin@dberlin.org>\n \n \t* tree-data-ref.c (analyze_array_indexes): Only estimate when"}, {"sha": "8bfbf7f8424b0637c61a0bf8839b93c5814ea7b5", "filename": "gcc/tree-ssa-loop-ivopts.c", "status": "modified", "additions": 46, "deletions": 10, "changes": 56, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b9d4f7084b377ac50df11387983c5b4e6004137/gcc%2Ftree-ssa-loop-ivopts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b9d4f7084b377ac50df11387983c5b4e6004137/gcc%2Ftree-ssa-loop-ivopts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-loop-ivopts.c?ref=7b9d4f7084b377ac50df11387983c5b4e6004137", "patch": "@@ -5331,22 +5331,58 @@ rewrite_use_nonlinear_expr (struct ivopts_data *data,\n      introduce a new computation (that might also need casting the\n      variable to unsigned and back).  */\n   if (cand->pos == IP_ORIGINAL\n-      && TREE_CODE (use->stmt) == MODIFY_EXPR\n-      && TREE_OPERAND (use->stmt, 0) == cand->var_after)\n+      && cand->incremented_at == use->stmt)\n     {\n+      tree step, ctype, utype;\n+      enum tree_code incr_code = PLUS_EXPR;\n+\n+      gcc_assert (TREE_CODE (use->stmt) == MODIFY_EXPR);\n+      gcc_assert (TREE_OPERAND (use->stmt, 0) == cand->var_after);\n+\n+      step = cand->iv->step;\n+      ctype = TREE_TYPE (step);\n+      utype = TREE_TYPE (cand->var_after);\n+      if (TREE_CODE (step) == NEGATE_EXPR)\n+\t{\n+\t  incr_code = MINUS_EXPR;\n+\t  step = TREE_OPERAND (step, 0);\n+\t}\n+\n+      /* Check whether we may leave the computation unchanged.\n+\t This is the case only if it does not rely on other\n+\t computations in the loop -- otherwise, the computation\n+\t we rely upon may be removed in remove_unused_ivs,\n+\t thus leading to ICE.  */\n       op = TREE_OPERAND (use->stmt, 1);\n+      if (TREE_CODE (op) == PLUS_EXPR\n+\t  || TREE_CODE (op) == MINUS_EXPR)\n+\t{\n+\t  if (TREE_OPERAND (op, 0) == cand->var_before)\n+\t    op = TREE_OPERAND (op, 1);\n+\t  else if (TREE_CODE (op) == PLUS_EXPR\n+\t\t   && TREE_OPERAND (op, 1) == cand->var_before)\n+\t    op = TREE_OPERAND (op, 0);\n+\t  else\n+\t    op = NULL_TREE;\n+\t}\n+      else\n+\top = NULL_TREE;\n \n-      /* Be a bit careful.  In case variable is expressed in some\n-\t complicated way, rewrite it so that we may get rid of this\n-\t complicated expression.  */\n-      if ((TREE_CODE (op) == PLUS_EXPR\n-\t   || TREE_CODE (op) == MINUS_EXPR)\n-\t  && TREE_OPERAND (op, 0) == cand->var_before\n-\t  && TREE_CODE (TREE_OPERAND (op, 1)) == INTEGER_CST)\n+      if (op\n+\t  && (TREE_CODE (op) == INTEGER_CST\n+\t      || operand_equal_p (op, step, 0)))\n \treturn;\n+\n+      /* Otherwise, add the necessary computations to express\n+\t the iv.  */\n+      op = fold_convert (ctype, cand->var_before);\n+      comp = fold_convert (utype,\n+\t\t\t   build2 (incr_code, ctype, op,\n+\t\t\t\t   unshare_expr (step)));\n     }\n+  else\n+    comp = get_computation (data->current_loop, use, cand);\n \n-  comp = get_computation (data->current_loop, use, cand);\n   switch (TREE_CODE (use->stmt))\n     {\n     case PHI_NODE:"}]}