{"sha": "4a8d3d9161118cfa3e8188b7a84f34cf842e0787", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NGE4ZDNkOTE2MTExOGNmYTNlODE4OGI3YTg0ZjM0Y2Y4NDJlMDc4Nw==", "commit": {"author": {"name": "Joseph Myers", "email": "joseph@codesourcery.com", "date": "2011-03-22T22:48:11Z"}, "committer": {"name": "Joseph Myers", "email": "jsm28@gcc.gnu.org", "date": "2011-03-22T22:48:11Z"}, "message": "v850-opts.h: New.\n\n\t* config/v850/v850-opts.h: New.\n\t* config/v850/v850.c (small_memory): Replace with\n\tsmall_memory_physical_max array.  Make that array static const.\n\t(v850_handle_memory_option): Take integer value of argument.  Take\n\tgcc_options pointer, option text and location.  Return void.\n\tUpdate for changes to small memory structures.\n\t(v850_handle_option): Access target_flags via opts pointer.  Don't\n\tassert that global structures are in use.  Update calls to\n\tv850_handle_memory_option.\n\t(v850_encode_data_area): Update references to small memory\n\tsettings.\n\t* config/v850/v850.h (struct small_memory_info, small_memory):\n\tRemove.\n\t(enum small_memory_type): Move to v850-opts.h.\n\t* config/v850/v850.opt (config/v850/v850-opts.h): New\n\tHeaderInclude entry.\n\t(small_memory_max): New Variable entry.\n\t(msda): Replace by pair of options msda= and msda-.  Use UInteger.\n\t(mtda, mzda): Likewise.\n\nFrom-SVN: r171327", "tree": {"sha": "290099b795000ec918076785442ad985dfc2727c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/290099b795000ec918076785442ad985dfc2727c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4a8d3d9161118cfa3e8188b7a84f34cf842e0787", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4a8d3d9161118cfa3e8188b7a84f34cf842e0787", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4a8d3d9161118cfa3e8188b7a84f34cf842e0787", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4a8d3d9161118cfa3e8188b7a84f34cf842e0787/comments", "author": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "117fdbfa24eaad74ae3b80bce79f0152fe2e776a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/117fdbfa24eaad74ae3b80bce79f0152fe2e776a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/117fdbfa24eaad74ae3b80bce79f0152fe2e776a"}], "stats": {"total": 183, "additions": 115, "deletions": 68}, "files": [{"sha": "965bd3b88115a862ff601de191f83cdd2b48a1c8", "filename": "gcc/ChangeLog", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4a8d3d9161118cfa3e8188b7a84f34cf842e0787/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4a8d3d9161118cfa3e8188b7a84f34cf842e0787/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=4a8d3d9161118cfa3e8188b7a84f34cf842e0787", "patch": "@@ -1,3 +1,25 @@\n+2011-03-22  Joseph Myers  <joseph@codesourcery.com>\n+\n+\t* config/v850/v850-opts.h: New.\n+\t* config/v850/v850.c (small_memory): Replace with\n+\tsmall_memory_physical_max array.  Make that array static const.\n+\t(v850_handle_memory_option): Take integer value of argument.  Take\n+\tgcc_options pointer, option text and location.  Return void.\n+\tUpdate for changes to small memory structures.\n+\t(v850_handle_option): Access target_flags via opts pointer.  Don't\n+\tassert that global structures are in use.  Update calls to\n+\tv850_handle_memory_option.\n+\t(v850_encode_data_area): Update references to small memory\n+\tsettings.\n+\t* config/v850/v850.h (struct small_memory_info, small_memory):\n+\tRemove.\n+\t(enum small_memory_type): Move to v850-opts.h.\n+\t* config/v850/v850.opt (config/v850/v850-opts.h): New\n+\tHeaderInclude entry.\n+\t(small_memory_max): New Variable entry.\n+\t(msda): Replace by pair of options msda= and msda-.  Use UInteger.\n+\t(mtda, mzda): Likewise.\n+\n 2011-03-22  Joseph Myers  <joseph@codesourcery.com>\n \n \t* config/sh/sh.c (sh_handle_option): Access target_flags via opts"}, {"sha": "0d238d3103fe534521284a24839b68b6374d9707", "filename": "gcc/config/v850/v850-opts.h", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4a8d3d9161118cfa3e8188b7a84f34cf842e0787/gcc%2Fconfig%2Fv850%2Fv850-opts.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4a8d3d9161118cfa3e8188b7a84f34cf842e0787/gcc%2Fconfig%2Fv850%2Fv850-opts.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fv850%2Fv850-opts.h?ref=4a8d3d9161118cfa3e8188b7a84f34cf842e0787", "patch": "@@ -0,0 +1,34 @@\n+/* Definitions for option handling for NEC V850 series.\n+   Copyright (C) 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005,\n+   2007, 2008, 2009, 2010, 2011  Free Software Foundation, Inc.\n+\n+   This file is part of GCC.\n+\n+   GCC is free software; you can redistribute it and/or modify\n+   it under the terms of the GNU General Public License as published by\n+   the Free Software Foundation; either version 3, or (at your option)\n+   any later version.\n+\n+   GCC is distributed in the hope that it will be useful,\n+   but WITHOUT ANY WARRANTY; without even the implied warranty of\n+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+   GNU General Public License for more details.\n+\n+   You should have received a copy of the GNU General Public License\n+   along with GCC; see the file COPYING3.  If not see\n+   <http://www.gnu.org/licenses/>.  */\n+\n+#ifndef V850_OPTS_H\n+#define V850_OPTS_H\n+\n+enum small_memory_type {\n+  /* tiny data area, using EP as base register */\n+  SMALL_MEMORY_TDA = 0,\n+  /* small data area using dp as base register */\n+  SMALL_MEMORY_SDA,\n+  /* zero data area using r0 as base register */\n+  SMALL_MEMORY_ZDA,\n+  SMALL_MEMORY_max\n+};\n+\n+#endif"}, {"sha": "f2275961b3a52ff7cfe11c046a88601aab97b3d6", "filename": "gcc/config/v850/v850.c", "status": "modified", "additions": 37, "deletions": 42, "changes": 79, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4a8d3d9161118cfa3e8188b7a84f34cf842e0787/gcc%2Fconfig%2Fv850%2Fv850.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4a8d3d9161118cfa3e8188b7a84f34cf842e0787/gcc%2Fconfig%2Fv850%2Fv850.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fv850%2Fv850.c?ref=4a8d3d9161118cfa3e8188b7a84f34cf842e0787", "patch": "@@ -51,12 +51,11 @@\n static void v850_print_operand_address (FILE *, rtx);\n \n /* Information about the various small memory areas.  */\n-struct small_memory_info small_memory[ (int)SMALL_MEMORY_max ] =\n+static const int small_memory_physical_max[(int) SMALL_MEMORY_max] =\n {\n-  /* Name\tMax\tPhysical max.  */\n-  { \"tda\",\t0,\t\t256 },\n-  { \"sda\",\t0,\t\t65536 },\n-  { \"zda\",\t0,\t\t32768 },\n+  256,\n+  65536,\n+  32768,\n };\n \n /* Names of the various data areas used on the v850.  */\n@@ -83,66 +82,62 @@ static GTY(()) section * zdata_section;\n static GTY(()) section * zbss_section;\n \f\n /* Set the maximum size of small memory area TYPE to the value given\n-   by VALUE.  Return true if VALUE was syntactically correct.  VALUE\n-   starts with the argument separator: either \"-\" or \"=\".  */\n+   by SIZE in structure OPTS (option text OPT passed at location LOC).  */\n \n-static bool\n-v850_handle_memory_option (enum small_memory_type type, const char *value)\n+static void\n+v850_handle_memory_option (enum small_memory_type type,\n+\t\t\t   struct gcc_options *opts, const char *opt,\n+\t\t\t   int size, location_t loc)\n {\n-  int i, size;\n-\n-  if (*value != '-' && *value != '=')\n-    return false;\n-\n-  value++;\n-  for (i = 0; value[i]; i++)\n-    if (!ISDIGIT (value[i]))\n-      return false;\n-\n-  size = atoi (value);\n-  if (size > small_memory[type].physical_max)\n-    error (\"value passed to %<-m%s%> is too large\", small_memory[type].name);\n+  if (size > small_memory_physical_max[type])\n+    error_at (loc, \"value passed in %qs is too large\", opt);\n   else\n-    small_memory[type].max = size;\n-  return true;\n+    opts->x_small_memory_max[type] = size;\n }\n \n /* Implement TARGET_HANDLE_OPTION.  */\n \n static bool\n-v850_handle_option (struct gcc_options *opts, struct gcc_options *opts_set,\n+v850_handle_option (struct gcc_options *opts,\n+\t\t    struct gcc_options *opts_set ATTRIBUTE_UNUSED,\n \t\t    const struct cl_decoded_option *decoded,\n-\t\t    location_t loc ATTRIBUTE_UNUSED)\n+\t\t    location_t loc)\n {\n   size_t code = decoded->opt_index;\n-  const char *arg = decoded->arg;\n-\n-  gcc_assert (opts == &global_options);\n-  gcc_assert (opts_set == &global_options_set);\n+  int value = decoded->value;\n \n   switch (code)\n     {\n     case OPT_mspace:\n-      target_flags |= MASK_EP | MASK_PROLOG_FUNCTION;\n+      opts->x_target_flags |= MASK_EP | MASK_PROLOG_FUNCTION;\n       return true;\n \n     case OPT_mv850:\n-      target_flags &= ~(MASK_CPU ^ MASK_V850);\n+      opts->x_target_flags &= ~(MASK_CPU ^ MASK_V850);\n       return true;\n \n     case OPT_mv850e:\n     case OPT_mv850e1:\n-      target_flags &= ~(MASK_CPU ^ MASK_V850E);\n+      opts->x_target_flags &= ~(MASK_CPU ^ MASK_V850E);\n       return true;\n \n-    case OPT_mtda:\n-      return v850_handle_memory_option (SMALL_MEMORY_TDA, arg);\n+    case OPT_mtda_:\n+      v850_handle_memory_option (SMALL_MEMORY_TDA, opts,\n+\t\t\t\t decoded->orig_option_with_args_text,\n+\t\t\t\t value, loc);\n+      return true;\n \n-    case OPT_msda:\n-      return v850_handle_memory_option (SMALL_MEMORY_SDA, arg);\n+    case OPT_msda_:\n+      v850_handle_memory_option (SMALL_MEMORY_SDA, opts,\n+\t\t\t\t decoded->orig_option_with_args_text,\n+\t\t\t\t value, loc);\n+      return true;\n \n-    case OPT_mzda:\n-      return v850_handle_memory_option (SMALL_MEMORY_ZDA, arg);\n+    case OPT_mzda_:\n+      v850_handle_memory_option (SMALL_MEMORY_ZDA, opts,\n+\t\t\t\t decoded->orig_option_with_args_text,\n+\t\t\t\t value, loc);\n+      return true;\n \n     default:\n       return true;\n@@ -2265,13 +2260,13 @@ v850_encode_data_area (tree decl, rtx symbol)\n \t  if (size <= 0)\n \t    ;\n \n-\t  else if (size <= small_memory [(int) SMALL_MEMORY_TDA].max)\n+\t  else if (size <= small_memory_max [(int) SMALL_MEMORY_TDA])\n \t    v850_set_data_area (decl, DATA_AREA_TDA);\n \n-\t  else if (size <= small_memory [(int) SMALL_MEMORY_SDA].max)\n+\t  else if (size <= small_memory_max [(int) SMALL_MEMORY_SDA])\n \t    v850_set_data_area (decl, DATA_AREA_SDA);\n \n-\t  else if (size <= small_memory [(int) SMALL_MEMORY_ZDA].max)\n+\t  else if (size <= small_memory_max [(int) SMALL_MEMORY_ZDA])\n \t    v850_set_data_area (decl, DATA_AREA_ZDA);\n \t}\n       "}, {"sha": "d1c4320e39ebd30fe12f81bb129d9d3f89695caf", "filename": "gcc/config/v850/v850.h", "status": "modified", "additions": 0, "deletions": 19, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4a8d3d9161118cfa3e8188b7a84f34cf842e0787/gcc%2Fconfig%2Fv850%2Fv850.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4a8d3d9161118cfa3e8188b7a84f34cf842e0787/gcc%2Fconfig%2Fv850%2Fv850.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fv850%2Fv850.h?ref=4a8d3d9161118cfa3e8188b7a84f34cf842e0787", "patch": "@@ -123,25 +123,6 @@ extern GTY(()) rtx v850_compare_op1;\n } while(0)\n \n #define MASK_CPU (MASK_V850 | MASK_V850E)\n-\n-/* Information about the various small memory areas.  */\n-struct small_memory_info {\n-  const char *name;\n-  long max;\n-  long physical_max;\n-};\n-\n-enum small_memory_type {\n-  /* tiny data area, using EP as base register */\n-  SMALL_MEMORY_TDA = 0,\n-  /* small data area using dp as base register */\n-  SMALL_MEMORY_SDA,\n-  /* zero data area using r0 as base register */\n-  SMALL_MEMORY_ZDA,\n-  SMALL_MEMORY_max\n-};\n-\n-extern struct small_memory_info small_memory[(int)SMALL_MEMORY_max];\n \f\n /* Target machine storage layout */\n "}, {"sha": "12b0937391d48fe2393b52a8b1584a7b8f6b9d37", "filename": "gcc/config/v850/v850.opt", "status": "modified", "additions": 22, "deletions": 7, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4a8d3d9161118cfa3e8188b7a84f34cf842e0787/gcc%2Fconfig%2Fv850%2Fv850.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4a8d3d9161118cfa3e8188b7a84f34cf842e0787/gcc%2Fconfig%2Fv850%2Fv850.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fv850%2Fv850.opt?ref=4a8d3d9161118cfa3e8188b7a84f34cf842e0787", "patch": "@@ -1,6 +1,6 @@\n ; Options for the NEC V850 port of the compiler.\n \n-; Copyright (C) 2005, 2007, 2010 Free Software Foundation, Inc.\n+; Copyright (C) 2005, 2007, 2010, 2011 Free Software Foundation, Inc.\n ;\n ; This file is part of GCC.\n ;\n@@ -18,6 +18,12 @@\n ; along with GCC; see the file COPYING3.  If not see\n ; <http://www.gnu.org/licenses/>.\n \n+HeaderInclude\n+config/v850/v850-opts.h\n+\n+Variable\n+int small_memory_max[(int)SMALL_MEMORY_max] = { 0, 0, 0 }\n+\n mapp-regs\n Target Report Mask(APP_REGS)\n Use registers r2 and r5\n@@ -50,10 +56,13 @@ mprolog-function\n Target Report Mask(PROLOG_FUNCTION)\n Use stubs for function prologues\n \n-msda\n-Target RejectNegative Joined\n+msda=\n+Target RejectNegative Joined UInteger\n Set the max size of data eligible for the SDA area\n \n+msda-\n+Target RejectNegative Joined Undocumented Alias(msda=)\n+\n msmall-sld\n Target Report Mask(SMALL_SLD)\n Enable the use of the short load instructions\n@@ -62,10 +71,13 @@ mspace\n Target RejectNegative\n Same as: -mep -mprolog-function\n \n-mtda\n-Target RejectNegative Joined\n+mtda=\n+Target RejectNegative Joined UInteger\n Set the max size of data eligible for the TDA area\n \n+mtda-\n+Target RejectNegative Joined Undocumented Alias(mtda=)\n+\n mno-strict-align\n Target Report Mask(NO_STRICT_ALIGN)\n Do not enforce strict alignment\n@@ -101,6 +113,9 @@ mv850e2v3\n Target Report RejectNegative Mask(V850E2V3)\n Compile for the v850e2v3 processor\n \n-mzda\n-Target RejectNegative Joined\n+mzda=\n+Target RejectNegative Joined UInteger\n Set the max size of data eligible for the ZDA area\n+\n+mzda-\n+Target RejectNegative Joined Undocumented Alias(mzda=)"}]}