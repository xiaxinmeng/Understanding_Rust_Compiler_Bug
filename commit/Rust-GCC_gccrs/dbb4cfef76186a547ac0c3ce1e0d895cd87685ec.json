{"sha": "dbb4cfef76186a547ac0c3ce1e0d895cd87685ec", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZGJiNGNmZWY3NjE4NmE1NDdhYzBjM2NlMWUwZDg5NWNkODc2ODVlYw==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2014-10-20T15:06:52Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2014-10-20T15:06:52Z"}, "message": "[multiple changes]\n\n2014-10-20  Robert Dewar  <dewar@adacore.com>\n\n\t* sem_ch3.adb, prj-proc.adb, prj-proc.ads, prj-conf.adb: Minor\n\treformatting.\n\n2014-10-20  Robert Dewar  <dewar@adacore.com>\n\n\t* par-prag.adb (Add_List_Pragma_Entry): New procedure.\n\t* par.adb (P_Pragma): Document requirement to handle multiple calls.\n\n2014-10-20  Robert Dewar  <dewar@adacore.com>\n\n\t* sem_prag.adb (Analyze_Pragma, case No_Elaboration_Code_All):\n\tFix error of bad inheritance of this pragma from with'ed unit.\n\n2014-10-20  Ed Schonberg  <schonberg@adacore.com>\n\n\t* sem_ch13.adb (Inherit_Aspects_At_Freeze_Point): For a subtype,\n\tinherit convention from parent type, because the subtype may\n\thave been declared on a partial view, prior to the pragma on\n\tthe parent.\n\n2014-10-20  Olivier Hainque  <hainque@adacore.com>\n\t    Tristan Gingold  <gingold@adacore.com>\n\n\t* gcc-interface/Makefile.in: Handle arm-darwin and VxWorks 7.\n\tMisc clean ups.\n\n2014-10-20  Nicolas Roche  <roche@adacore.com>\n\n\t* gcc-interface/Make-lang.in: ensure that automatically generated\n\tdependency are referencing generated gnatvsn rather than original\n\tone.\n\nFrom-SVN: r216482", "tree": {"sha": "384bb4169d12696247c049d5cbdb743d5cbb744b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/384bb4169d12696247c049d5cbdb743d5cbb744b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/dbb4cfef76186a547ac0c3ce1e0d895cd87685ec", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dbb4cfef76186a547ac0c3ce1e0d895cd87685ec", "html_url": "https://github.com/Rust-GCC/gccrs/commit/dbb4cfef76186a547ac0c3ce1e0d895cd87685ec", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dbb4cfef76186a547ac0c3ce1e0d895cd87685ec/comments", "author": null, "committer": null, "parents": [{"sha": "c19273ff4a5cb466c7f5ac09336b066e8ba4ea28", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c19273ff4a5cb466c7f5ac09336b066e8ba4ea28", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c19273ff4a5cb466c7f5ac09336b066e8ba4ea28"}], "stats": {"total": 191, "additions": 151, "deletions": 40}, "files": [{"sha": "759de61734afc4cbec8f0e71f6021142cf93f030", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dbb4cfef76186a547ac0c3ce1e0d895cd87685ec/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dbb4cfef76186a547ac0c3ce1e0d895cd87685ec/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=dbb4cfef76186a547ac0c3ce1e0d895cd87685ec", "patch": "@@ -1,3 +1,37 @@\n+2014-10-20  Robert Dewar  <dewar@adacore.com>\n+\n+\t* sem_ch3.adb, prj-proc.adb, prj-proc.ads, prj-conf.adb: Minor\n+\treformatting.\n+\n+2014-10-20  Robert Dewar  <dewar@adacore.com>\n+\n+\t* par-prag.adb (Add_List_Pragma_Entry): New procedure.\n+\t* par.adb (P_Pragma): Document requirement to handle multiple calls.\n+\n+2014-10-20  Robert Dewar  <dewar@adacore.com>\n+\n+\t* sem_prag.adb (Analyze_Pragma, case No_Elaboration_Code_All):\n+\tFix error of bad inheritance of this pragma from with'ed unit.\n+\n+2014-10-20  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* sem_ch13.adb (Inherit_Aspects_At_Freeze_Point): For a subtype,\n+\tinherit convention from parent type, because the subtype may\n+\thave been declared on a partial view, prior to the pragma on\n+\tthe parent.\n+\n+2014-10-20  Olivier Hainque  <hainque@adacore.com>\n+\t    Tristan Gingold  <gingold@adacore.com>\n+\n+\t* gcc-interface/Makefile.in: Handle arm-darwin and VxWorks 7.\n+\tMisc clean ups.\n+\n+2014-10-20  Nicolas Roche  <roche@adacore.com>\n+\n+\t* gcc-interface/Make-lang.in: ensure that automatically generated\n+\tdependency are referencing generated gnatvsn rather than original\n+\tone.\n+\n 2014-10-20  Gary Dismukes  <dismukes@adacore.com>\n \n \t* gnat_ugn.texi: Minor reformatting."}, {"sha": "efae513ef79f2c434062b76d5b1671039f6db95b", "filename": "gcc/ada/gcc-interface/Make-lang.in", "status": "modified", "additions": 26, "deletions": 6, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dbb4cfef76186a547ac0c3ce1e0d895cd87685ec/gcc%2Fada%2Fgcc-interface%2FMake-lang.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dbb4cfef76186a547ac0c3ce1e0d895cd87685ec/gcc%2Fada%2Fgcc-interface%2FMake-lang.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2FMake-lang.in?ref=dbb4cfef76186a547ac0c3ce1e0d895cd87685ec", "patch": "@@ -68,7 +68,7 @@ ALL_ADAFLAGS = \\\n   $(CFLAGS) $(ADA_CFLAGS) $(ADAFLAGS) $(CHECKING_ADAFLAGS) $(WARN_ADAFLAGS)\n FORCE_DEBUG_ADAFLAGS = -g\n ADA_CFLAGS =\n-ADA_INCLUDES = -nostdinc -I- -I. -Iada -I$(srcdir)/ada -I$(srcdir)/ada/gcc-interface\n+ADA_INCLUDES = -nostdinc -I- -I. -Iada/generated -Iada -I$(srcdir)/ada -I$(srcdir)/ada/gcc-interface\n GNATLIBFLAGS= -W -Wall -gnatpg -nostdinc\n GNATLIBCFLAGS= -g -O2 $(TCFLAGS)\n ADA_INCLUDE_DIR = $(libsubdir)/adainclude\n@@ -111,6 +111,7 @@ ADA_DEPS=case $@ in \\\n             *)a=\"`echo $@ | sed -e 's/.o$$/.ali/'`\"; \\\n                 echo \"$@: `cat $$a | \\\n                 sed -ne 's;^D \\([a-z0-9_\\.-]*\\).*;ada/\\1;gp' | \\\n+                sed -e 's;ada/gnatvsn.ads;ada/generated/gnatvsn.ads;g' | \\\n                 tr -d '\\015' | tr '\\n' ' '`\" > $(dir $@)/$(DEPDIR)/$(patsubst %.o,%.Po,$(notdir $@));; \\\n          esac;\n \n@@ -145,7 +146,7 @@ ifeq ($(build), $(host))\n         CC=\"../../xgcc -B../../\" \\\n         CXX=\"$(CXX)\" \\\n         $(COMMON_FLAGS_TO_PASS) $(ADA_FLAGS_TO_PASS) \\\n-        ADA_INCLUDES=\"-I- -I../rts\" \\\n+        ADA_INCLUDES=\"-I- -I../generated -I../rts\" \\\n         GNATMAKE=\"../../gnatmake\" \\\n         GNATLINK=\"../../gnatlink\" \\\n         GNATBIND=\"../../gnatbind\"\n@@ -163,7 +164,7 @@ ifeq ($(build), $(host))\n         CC=\"$(CC)\" \\\n         CXX=\"$(CXX)\" \\\n         $(COMMON_FLAGS_TO_PASS) $(ADA_FLAGS_TO_PASS) \\\n-        ADA_INCLUDES=\"-I$(RTS_DIR)/../adainclude -I$(RTS_DIR)\" \\\n+        ADA_INCLUDES=\"-I../generated -I$(RTS_DIR)/../adainclude -I$(RTS_DIR)\" \\\n         GNATMAKE=\"gnatmake\" \\\n         GNATBIND=\"gnatbind\" \\\n         GNATLINK=\"gnatlink\" \\\n@@ -186,7 +187,7 @@ else\n         CC=\"$(CC)\" \\\n         CXX=\"$(CXX)\" \\\n         $(COMMON_FLAGS_TO_PASS) $(ADA_FLAGS_TO_PASS)  \\\n-        ADA_INCLUDES=\"-I../rts\"                \\\n+        ADA_INCLUDES=\"-I../generated -I../rts\"                \\\n         GNATMAKE=\"$(GNATMAKE_FOR_HOST)\"      \\\n         GNATBIND=\"$(GNATBIND_FOR_HOST)\"      \\\n         GNATLINK=\"$(GNATLINK_FOR_HOST)\"      \\\n@@ -201,7 +202,7 @@ else\n         CC=\"$(CC)\" \\\n         CXX=\"$(CXX)\" \\\n         $(COMMON_FLAGS_TO_PASS) $(ADA_FLAGS_TO_PASS)  \\\n-        ADA_INCLUDES=\"-I$(RTS_DIR)/../adainclude -I$(RTS_DIR)\" \\\n+        ADA_INCLUDES=\"-I../generated -I$(RTS_DIR)/../adainclude -I$(RTS_DIR)\" \\\n         GNATMAKE=\"$(GNATMAKE_FOR_HOST)\"      \\\n         GNATBIND=\"$(GNATBIND_FOR_HOST)\"      \\\n         GNATLINK=\"$(GNATLINK_FOR_HOST)\"      \\\n@@ -985,6 +986,24 @@ ada/a-tags.o  : ada/a-tags.adb ada/a-tags.ads\n \t  $< $(OUTPUT_OPTION)\n \t@$(ADA_DEPS)\n \n+# Handling of gnatvsn version string\n+\n+# This ensure the build works even if there is no GNAT_DATE present in the\n+# sources\n+ada/GNAT_DATE:\n+\ttouch ada/GNAT_DATE\n+\n+ada/generated/gnatvsn.ads: ada/gnatvsn.ads BASE-VER ada/GNAT_DATE\n+\t$(MKDIR) ada/generated\n+\ts=`cat $(srcdir)/BASE-VER | sed -e \"s/\\([0-9]*\\)\\.\\([0-9]*\\)\\..*/-\\1\\2/g\"`; \\\n+\td=`if test -f $(srcdir)/ada/GNAT_DATE; then \\\n+           cat $(srcdir)/ada/GNAT_DATE; else date +%Y%m%d; fi`; \\\n+\tcat $< | sed -e \"/Version/s/(\\([0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9]\\).*)/($$d$$s)/g\" >$@\n+\n+ada/gnatvsn.o : ada/gnatvsn.adb ada/generated/gnatvsn.ads\n+\t$(CC) -c $(ALL_ADAFLAGS) -Iada/generated -I../ada/generated $(ADA_INCLUDES) $< $(OUTPUT_OPTION)\n+\t@$(ADA_DEPS)\n+\n # Dependencies for windows specific tool (mdll)\n \n ada/mdll.o : ada/mdll.adb ada/mdll.ads ada/mdll-fil.ads ada/mdll-utl.ads\n@@ -997,7 +1016,8 @@ ada/mdll-utl.o : ada/mdll-utl.adb ada/mdll.ads ada/mdll-utl.ads ada/sdefault.ads\n \t$(CC) -c $(ALL_ADAFLAGS) $(ADA_INCLUDES) $< $(OUTPUT_OPTION)\n \n ada_generated_files = ada/sinfo.h ada/einfo.h ada/nmake.adb ada/nmake.ads \\\n-\t\t      ada/treeprs.ads ada/snames.ads ada/snames.adb ada/snames.h\n+\t\t      ada/treeprs.ads ada/snames.ads ada/snames.adb ada/snames.h \\\n+\t\t      ada/generated/gnatvsn.ads\n \n # When building from scratch we don't have dependency files, the only thing\n # we need to ensure is that the generated files are created first."}, {"sha": "cedc7e93a0367ea52398d7a17c3f16a992e51234", "filename": "gcc/ada/gcc-interface/Makefile.in", "status": "modified", "additions": 32, "deletions": 6, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dbb4cfef76186a547ac0c3ce1e0d895cd87685ec/gcc%2Fada%2Fgcc-interface%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dbb4cfef76186a547ac0c3ce1e0d895cd87685ec/gcc%2Fada%2Fgcc-interface%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2FMakefile.in?ref=dbb4cfef76186a547ac0c3ce1e0d895cd87685ec", "patch": "@@ -523,6 +523,12 @@ ifeq ($(strip $(filter-out powerpc% wrs vxworks vxworks7,$(target_cpu) $(target_\n      ARCH_STR=ppc\n   endif\n \n+  ifeq ($(strip $(filter-out vxworks7%, $(target_os))),)\n+     SVX=system-vxworks7\n+  else\n+     SVX=system-vxworks\n+  endif\n+\n   LIBGNAT_TARGET_PAIRS = \\\n   a-intnam.ads<a-intnam-vxworks.ads \\\n   a-numaux.ads<a-numaux-vxworks.ads \\\n@@ -586,7 +592,7 @@ ifeq ($(strip $(filter-out powerpc% wrs vxworks vxworks7,$(target_cpu) $(target_\n       s-vxwext.ads<s-vxwext-rtp.ads \\\n       s-vxwext.adb<s-vxwext-rtp-smp.adb \\\n       s-tpopsp.adb<s-tpopsp-vxworks-tls.adb \\\n-      system.ads<system-vxworks-$(ARCH_STR)-rtp.ads\n+      system.ads<$(SVX)-$(ARCH_STR)-rtp-smp.ads\n \n       EH_MECHANISM=-gcc\n       EXTRA_LIBGNAT_OBJS+=affinity.o sigtramp-vxworks.o\n@@ -871,6 +877,13 @@ endif\n \n # x86 VxWorks\n ifeq ($(strip $(filter-out %86 wrs vxworks vxworks7,$(target_cpu) $(target_vendor) $(target_os))),)\n+\n+  ifeq ($(strip $(filter-out vxworks7%, $(target_os))),)\n+     SVX=system-vxworks7\n+  else\n+     SVX=system-vxworks\n+  endif\n+\n   LIBGNAT_TARGET_PAIRS = \\\n   a-intnam.ads<a-intnam-vxworks.ads \\\n   i-vxwork.ads<i-vxwork-x86.ads \\\n@@ -921,7 +934,7 @@ ifeq ($(strip $(filter-out %86 wrs vxworks vxworks7,$(target_cpu) $(target_vendo\n       s-vxwext.ads<s-vxwext-rtp.ads \\\n       s-vxwext.adb<s-vxwext-rtp-smp.adb \\\n       s-tpopsp.adb<s-tpopsp-vxworks-tls.adb \\\n-      system.ads<system-vxworks-x86-rtp.ads\n+      system.ads<$(SVX)-x86-rtp-smp.ads\n \n       EXTRA_LIBGNAT_OBJS+=affinity.o\n     else\n@@ -956,6 +969,9 @@ ifeq ($(strip $(filter-out %86 wrs vxworks vxworks7,$(target_cpu) $(target_vendo\n   EXTRA_GNATRTL_TASKING_OBJS += s-vxwork.o s-vxwext.o\n \n   EXTRA_LIBGNAT_OBJS+=vx_stack_info.o\n+\n+  GCC_SPEC_FILES+=vxworks-x86-link.spec\n+  GCC_SPEC_FILES+=vxworks-smp-x86-link.spec\n endif\n \n # ARM VxWorks\n@@ -1149,15 +1165,15 @@ ifeq ($(strip $(filter-out sparc% sun solaris%,$(target_cpu) $(target_vendor) $(\n   s-tasinf.ads<s-tasinf-solaris.ads \\\n   s-taspri.ads<s-taspri-solaris.ads \\\n   s-tpopsp.adb<s-tpopsp-solaris.adb \\\n-  g-soliop.ads<g-soliop-solaris.ads\n+  g-soliop.ads<g-soliop-solaris.ads \\\n+  $(ATOMICS_TARGET_PAIRS) \\\n+  $(ATOMICS_BUILTINS_TARGET_PAIRS)\n \n   LIBGNAT_TARGET_PAIRS_32 = \\\n   system.ads<system-solaris-sparc.ads\n \n   LIBGNAT_TARGET_PAIRS_64 = \\\n-  system.ads<system-solaris-sparcv9.ads \\\n-  $(ATOMICS_TARGET_PAIRS) \\\n-  $(ATOMICS_BUILTINS_TARGET_PAIRS)\n+  system.ads<system-solaris-sparcv9.ads\n \n   ifeq ($(strip $(filter-out sparc sun solaris%,$(target_cpu) $(target_vendor) $(target_os))),)\n     ifeq ($(strip $(MULTISUBDIR)),/sparcv9)\n@@ -2326,6 +2342,16 @@ ifeq ($(strip $(filter-out darwin%,$(target_os))),)\n     endif\n   endif\n \n+  ifeq ($(strip $(filter-out arm,$(arch))),)\n+    LIBGNAT_TARGET_PAIRS += \\\n+      s-intman.adb<s-intman-susv3.adb \\\n+      s-osprim.adb<s-osprim-darwin.adb \\\n+      $(ATOMICS_TARGET_PAIRS)\n+\n+    LIBGNAT_TARGET_PAIRS += \\\n+      system.ads<system-darwin-arm.ads\n+  endif\n+\n   TOOLS_TARGET_PAIRS =  \\\n     mlib-tgt-specific.adb<mlib-tgt-specific-darwin.adb \\\n     indepsw.adb<indepsw-darwin.adb"}, {"sha": "44f936e96e7b27546e43e62335be4f9c60a20a8a", "filename": "gcc/ada/par-prag.adb", "status": "modified", "additions": 23, "deletions": 10, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dbb4cfef76186a547ac0c3ce1e0d895cd87685ec/gcc%2Fada%2Fpar-prag.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dbb4cfef76186a547ac0c3ce1e0d895cd87685ec/gcc%2Fada%2Fpar-prag.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fpar-prag.adb?ref=dbb4cfef76186a547ac0c3ce1e0d895cd87685ec", "patch": "@@ -53,6 +53,11 @@ function Prag (Pragma_Node : Node_Id; Semi : Source_Ptr) return Node_Id is\n    -- Local Subprograms --\n    -----------------------\n \n+   procedure Add_List_Pragma_Entry (PT : List_Pragma_Type; Loc : Source_Ptr);\n+   --  Make a new entry in the List_Pragmas table if this entry is not already\n+   --  in the table (it will always be the last one if there is a duplication\n+   --  resulting from the use of Save/Restore_Scan_State).\n+\n    function Arg1 return Node_Id;\n    function Arg2 return Node_Id;\n    function Arg3 return Node_Id;\n@@ -107,6 +112,19 @@ function Prag (Pragma_Node : Node_Id; Semi : Source_Ptr) return Node_Id is\n    --  Note that we don't need to do full error checking for badly formed cases\n    --  of restrictions, since these will be caught during semantic analysis.\n \n+   ---------------------------\n+   -- Add_List_Pragma_Entry --\n+   ---------------------------\n+\n+   procedure Add_List_Pragma_Entry (PT : List_Pragma_Type; Loc : Source_Ptr) is\n+   begin\n+      if List_Pragmas.Last < List_Pragmas.First\n+        or else (List_Pragmas.Table (List_Pragmas.Last)) /= ((PT, Loc))\n+      then\n+         List_Pragmas.Append ((PT, Loc));\n+      end if;\n+   end Add_List_Pragma_Entry;\n+\n    ----------\n    -- Arg1 --\n    ----------\n@@ -413,8 +431,8 @@ begin\n \n       --  pragma List (Off | On)\n \n-      --  The processing for pragma List must be done at parse time,\n-      --  since a listing can be generated in parse only mode.\n+      --  The processing for pragma List must be done at parse time, since a\n+      --  listing can be generated in parse only mode.\n \n       when Pragma_List =>\n          Check_Arg_Count (1);\n@@ -425,16 +443,12 @@ begin\n          --  in the List (Off) case, the pragma will print even in a region\n          --  of code with listing turned off (this is required).\n \n-         List_Pragmas.Increment_Last;\n-         List_Pragmas.Table (List_Pragmas.Last) :=\n-           (Ptyp => List_On, Ploc => Sloc (Pragma_Node));\n+         Add_List_Pragma_Entry (List_On, Sloc (Pragma_Node));\n \n          --  Now generate the list off entry for pragma List (Off)\n \n          if Chars (Expression (Arg1)) = Name_Off then\n-            List_Pragmas.Increment_Last;\n-            List_Pragmas.Table (List_Pragmas.Last) :=\n-              (Ptyp => List_Off, Ploc => Semi);\n+            Add_List_Pragma_Entry (List_Off, Semi);\n          end if;\n \n       ----------------\n@@ -448,8 +462,7 @@ begin\n \n       when Pragma_Page =>\n          Check_Arg_Count (0);\n-         List_Pragmas.Increment_Last;\n-         List_Pragmas.Table (List_Pragmas.Last) := (Page, Semi);\n+         Add_List_Pragma_Entry (Page, Semi);\n \n       ------------------\n       -- Restrictions --"}, {"sha": "0e938d72ea86b17ab597e99556047bf0c497f547", "filename": "gcc/ada/par.adb", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dbb4cfef76186a547ac0c3ce1e0d895cd87685ec/gcc%2Fada%2Fpar.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dbb4cfef76186a547ac0c3ce1e0d895cd87685ec/gcc%2Fada%2Fpar.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fpar.adb?ref=dbb4cfef76186a547ac0c3ce1e0d895cd87685ec", "patch": "@@ -611,7 +611,12 @@ function Par (Configuration_Pragmas : Boolean) return List_Id is\n       function P_Pragma (Skipping : Boolean := False) return Node_Id;\n       --  Scan out a pragma. If Skipping is True, then the caller is skipping\n       --  the pragma in the context of illegal placement (this is used to avoid\n-      --  some junk cascaded messages).\n+      --  some junk cascaded messages). Some pragmas must be dealt with during\n+      --  the parsing phase (e.g. pragma Page, since we can generate a listing\n+      --  in syntax only mode). It is possible that the parser uses the rescan\n+      --  logic (using Save/Restore_Scan_State) with the effect of calling this\n+      --  procedure more than once for the same pragma. All parse-time pragma\n+      --  handling must be prepared to handle such multiple calls correctly.\n \n       function P_Identifier (C : Id_Check := None) return Node_Id;\n       --  Scans out an identifier. The parameter C determines the treatment"}, {"sha": "53d29ac5d37feaa3c2733f2f31250b1ab6de9349", "filename": "gcc/ada/prj-conf.adb", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dbb4cfef76186a547ac0c3ce1e0d895cd87685ec/gcc%2Fada%2Fprj-conf.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dbb4cfef76186a547ac0c3ce1e0d895cd87685ec/gcc%2Fada%2Fprj-conf.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fprj-conf.adb?ref=dbb4cfef76186a547ac0c3ce1e0d895cd87685ec", "patch": "@@ -849,10 +849,8 @@ package body Prj.Conf is\n \n       begin\n          Proj := Project;\n-\n          while Proj /= No_Project loop\n             Id := Value_Of (Name_Runtime, Proj.Decl.Arrays, Shared);\n-\n             while Id /= No_Array_Element loop\n                Element := Shared.Array_Elements.Table (Id);\n                Lang := Element.Index;"}, {"sha": "bb07da9bdeaa9c0b26c9f331641144785a3166b1", "filename": "gcc/ada/prj-proc.adb", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dbb4cfef76186a547ac0c3ce1e0d895cd87685ec/gcc%2Fada%2Fprj-proc.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dbb4cfef76186a547ac0c3ce1e0d895cd87685ec/gcc%2Fada%2Fprj-proc.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fprj-proc.adb?ref=dbb4cfef76186a547ac0c3ce1e0d895cd87685ec", "patch": "@@ -966,19 +966,19 @@ package body Prj.Proc is\n \n                            when List =>\n                               case The_Default is\n-                                 when Read_Only_Value =>\n+                                 when Read_Only_Value  =>\n                                     null;\n \n-                                 when Empty_Value =>\n+                                 when Empty_Value      =>\n                                     The_Variable.Values := Nil_String;\n \n-                                 when Dot_Value =>\n+                                 when Dot_Value        =>\n                                     The_Variable.Values :=\n                                       Shared.Dot_String_List;\n \n                                  when Object_Dir_Value |\n-                                      Target_Value |\n-                                      Runtime_Value =>\n+                                      Target_Value     |\n+                                      Runtime_Value    =>\n                                     null;\n                               end case;\n                            end case;"}, {"sha": "face045b5f4a554d30179d09200b7039b152e104", "filename": "gcc/ada/prj-proc.ads", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dbb4cfef76186a547ac0c3ce1e0d895cd87685ec/gcc%2Fada%2Fprj-proc.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dbb4cfef76186a547ac0c3ce1e0d895cd87685ec/gcc%2Fada%2Fprj-proc.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fprj-proc.ads?ref=dbb4cfef76186a547ac0c3ce1e0d895cd87685ec", "patch": "@@ -93,4 +93,5 @@ package Prj.Proc is\n    procedure Set_Default_Runtime_For (Language : Name_Id; Value : String);\n    --  Set the default value for the runtime of Language. To be used for the\n    --  value of 'Runtime(<Language>) when Runtime (<language>) is not declared.\n+\n end Prj.Proc;"}, {"sha": "a23001daa482ec0fbbc93b950538f4af04c878ea", "filename": "gcc/ada/sem_ch13.adb", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dbb4cfef76186a547ac0c3ce1e0d895cd87685ec/gcc%2Fada%2Fsem_ch13.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dbb4cfef76186a547ac0c3ce1e0d895cd87685ec/gcc%2Fada%2Fsem_ch13.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch13.adb?ref=dbb4cfef76186a547ac0c3ce1e0d895cd87685ec", "patch": "@@ -10664,6 +10664,9 @@ package body Sem_Ch13 is\n       --  Component_Size, Machine_Radix, Object_Size, Pack, Predicates,\n       --  Preelaborable_Initialization, RM_Size and Small.\n \n+      --  In addition, Convention must be propagated from base type to subtype,\n+      --  because the subtype may have been declared on an incomplete view.\n+\n       if Nkind (Parent (Typ)) = N_Private_Extension_Declaration then\n          return;\n       end if;\n@@ -10700,6 +10703,12 @@ package body Sem_Ch13 is\n          Set_Is_Volatile (Typ);\n       end if;\n \n+      --  Convention\n+\n+      if Typ /= Base_Type (Typ) and then Is_Frozen (Base_Type (Typ)) then\n+         Set_Convention (Typ, Convention (Base_Type (Typ)));\n+      end if;\n+\n       --  Default_Component_Value\n \n       if Is_Array_Type (Typ)"}, {"sha": "7f42291317cd7c23e9d0e9c094a27a2848c8852e", "filename": "gcc/ada/sem_ch3.adb", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dbb4cfef76186a547ac0c3ce1e0d895cd87685ec/gcc%2Fada%2Fsem_ch3.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dbb4cfef76186a547ac0c3ce1e0d895cd87685ec/gcc%2Fada%2Fsem_ch3.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch3.adb?ref=dbb4cfef76186a547ac0c3ce1e0d895cd87685ec", "patch": "@@ -3846,19 +3846,17 @@ package body Sem_Ch3 is\n             --  for discriminants and are thus not indefinite.\n \n             elsif Is_Unchecked_Union (T) then\n-               if Constant_Present (N)\n-                 or else Nkind (E) = N_Function_Call\n-               then\n+               if Constant_Present (N) or else Nkind (E) = N_Function_Call then\n                   Set_Ekind (Id, E_Constant);\n                else\n                   Set_Ekind (Id, E_Variable);\n                end if;\n \n                Rewrite (N,\n                  Make_Object_Renaming_Declaration (Loc,\n-                    Defining_Identifier => Id,\n-                    Subtype_Mark => New_Occurrence_Of (T, Loc),\n-                    Name => E));\n+                   Defining_Identifier => Id,\n+                   Subtype_Mark        => New_Occurrence_Of (T, Loc),\n+                   Name                => E));\n \n                Set_Renamed_Object (Id, E);\n                Freeze_Before (N, T);"}, {"sha": "5ef1010e3caa0dcfce595cbd58a159291bcf775b", "filename": "gcc/ada/sem_prag.adb", "status": "modified", "additions": 11, "deletions": 4, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dbb4cfef76186a547ac0c3ce1e0d895cd87685ec/gcc%2Fada%2Fsem_prag.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dbb4cfef76186a547ac0c3ce1e0d895cd87685ec/gcc%2Fada%2Fsem_prag.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_prag.adb?ref=dbb4cfef76186a547ac0c3ce1e0d895cd87685ec", "patch": "@@ -16416,12 +16416,19 @@ package body Sem_Prag is\n \n             Set_No_Elab_Code_All (Current_Sem_Unit);\n \n-            --  Set restriction No_Elaboration_Code, including adding it to the\n-            --  set of configuration restrictions so it will apply to all units\n-            --  in the extended main source.\n+            --  Set restriction No_Elaboration_Code\n \n             Set_Restriction (No_Elaboration_Code, N);\n-            Add_To_Config_Boolean_Restrictions (No_Elaboration_Code);\n+\n+            --  If we are in the main unit or in an extended main source unit,\n+            --  then we also add it to the configuration restrictions so that\n+            --  it will apply to all units in the extended main source.\n+\n+            if Current_Sem_Unit = Main_Unit\n+              or else In_Extended_Main_Source_Unit (N)\n+            then\n+               Add_To_Config_Boolean_Restrictions (No_Elaboration_Code);\n+            end if;\n \n             --  If in main extended unit, activate transitive with test\n "}]}