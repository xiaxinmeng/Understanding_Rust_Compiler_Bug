{"sha": "511bbc8f91882da77dfb2026bbed3ee94df4f731", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTExYmJjOGY5MTg4MmRhNzdkZmIyMDI2YmJlZDNlZTk0ZGY0ZjczMQ==", "commit": {"author": {"name": "Mark Mitchell", "email": "mark@codesourcery.com", "date": "2004-09-16T03:41:19Z"}, "committer": {"name": "Mark Mitchell", "email": "mmitchel@gcc.gnu.org", "date": "2004-09-16T03:41:19Z"}, "message": "cxxabi_tweaks.h (__cxa_cdtor_return_type): Define.\n\n\t* config/cpu/arm/cxxabi_tweaks.h (__cxa_cdtor_return_type):\n\tDefine.\n\t* config/cpu/generic/cxxabi_tweaks.h (__cxa_cdtor_return_type):\n\tDefine.\n\t* libsupc++/cxxabi.h (__cxa_cdtor_return_type): New type.\n\t(__cxa_vec_new): Use it.\n\t(__cxa_vec_new2): Likewise.\n\t(__cxa_vec_new3): Likewise.\n\t(__cxa_vec_cdtor): Likewise.\n\t(__cxa_vec_cctor): Likeiwse.\n\t(__cxa_vec_dtor): Likewise.\n\t(__cxa_vec_cleanup): Likewise.\n\t(__cxa_vec_delete2): Likewise.\n\t(__cxa_vec_delete3): Likewise.\n\t* libsupc++/vec.cc (__cxa_vec_new): Likewise.\n\t(__cxa_vec_new2): Likewise.\n\t(__cxa_vec_new3): Likewise.\n\t(__cxa_vec_cdtor): Likewise.\n\t(__cxa_vec_cctor): Likeiwse.\n\t(__cxa_vec_dtor): Likewise.\n\t(__cxa_vec_cleanup): Likewise.\n\t(__cxa_vec_delete2): Likewise.\n\t(__cxa_vec_delete3): Likewise.\n\t(__aeabi_vec_ctor_nocookie_nodtor): New function.\n\t(__aeabi_vec_ctor_cookie_nodtor): Likewise.\n\t(__aeabi_vec_cctor_nocookie_nodtor): Likewise.\n\t(__aeabi_vec_new_cookie_noctor): Likewise.\n\t(__aeabi_vec_new_nocookie): Likewise.\n\t(__aeabi_vec_new_cookie_nodtor): Likewise.\n\t(__aeabi_vec_new_cookie): Likewise.\n\t(__aeabi_vec_dtor): Likewise.\n\t(__aeabi_vec_dtor_cookie): Likewise.\n\t(__aeabi_vec_delete): Likewise.\n\t(__aeabi_vec_delete3): Likewise.\n\t(__aeabi_vec_delete3_nodtor): Likewise.\n\t(__aeabi_atexit): Likewise.\n\n\t* testsuite/g++.old-deja/g++.abi/cxa_vec.C: Adjust for ARM\n\tEABI.\n\nFrom-SVN: r87585", "tree": {"sha": "c2094545552a4faf8500ecec49f51af6a4e34bb0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c2094545552a4faf8500ecec49f51af6a4e34bb0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/511bbc8f91882da77dfb2026bbed3ee94df4f731", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/511bbc8f91882da77dfb2026bbed3ee94df4f731", "html_url": "https://github.com/Rust-GCC/gccrs/commit/511bbc8f91882da77dfb2026bbed3ee94df4f731", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/511bbc8f91882da77dfb2026bbed3ee94df4f731/comments", "author": null, "committer": null, "parents": [{"sha": "329bed5eb4e681e1d2acf011ab73cda83ba8d5d1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/329bed5eb4e681e1d2acf011ab73cda83ba8d5d1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/329bed5eb4e681e1d2acf011ab73cda83ba8d5d1"}], "stats": {"total": 275, "additions": 243, "deletions": 32}, "files": [{"sha": "357fe77e9b040733556d82dfcc88f1fd8bc72423", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/511bbc8f91882da77dfb2026bbed3ee94df4f731/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/511bbc8f91882da77dfb2026bbed3ee94df4f731/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=511bbc8f91882da77dfb2026bbed3ee94df4f731", "patch": "@@ -1,3 +1,8 @@\n+2004-09-15  Mark Mitchell  <mark@codesourcery.com>\n+\n+\t* testsuite/g++.old-deja/g++.abi/cxa_vec.C: Adjust for ARM\n+\tEABI.\n+\n 2004-09-15  Mark Mitchell  <mark@codesourcery.com>\n \n \t* g++.dg/opt/switch1.C: New test."}, {"sha": "3c05f16f28ead30511830c45212d44acdb8f9893", "filename": "gcc/testsuite/g++.old-deja/g++.abi/cxa_vec.C", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/511bbc8f91882da77dfb2026bbed3ee94df4f731/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.abi%2Fcxa_vec.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/511bbc8f91882da77dfb2026bbed3ee94df4f731/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.abi%2Fcxa_vec.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.abi%2Fcxa_vec.C?ref=511bbc8f91882da77dfb2026bbed3ee94df4f731", "patch": "@@ -22,14 +22,17 @@ static bool dtor_repeat = false;\n #endif\n \n // our pseudo ctors and dtors\n-static void ctor (void *)\n+static abi::__cxa_cdtor_return_type ctor (void *x)\n {\n   if (!ctor_count)\n     throw 1;\n   ctor_count--;\n+#ifdef __ARM_EABI__\n+  return x;\n+#endif\n }\n \n-static void dtor (void *)\n+static abi::__cxa_cdtor_return_type dtor (void *x)\n {\n   if (!dtor_count)\n     {\n@@ -38,6 +41,9 @@ static void dtor (void *)\n       throw 1;\n     }\n   dtor_count--;\n+#ifdef __ARM_EABI__\n+  return x;\n+#endif\n }\n \n // track new and delete"}, {"sha": "4598b25903ef99b1e18c4c336df0b3daf1e3be37", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/511bbc8f91882da77dfb2026bbed3ee94df4f731/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/511bbc8f91882da77dfb2026bbed3ee94df4f731/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=511bbc8f91882da77dfb2026bbed3ee94df4f731", "patch": "@@ -1,3 +1,42 @@\n+2004-09-15  Mark Mitchell  <mark@codesourcery.com>\n+\n+\t* config/cpu/arm/cxxabi_tweaks.h (__cxa_cdtor_return_type):\n+\tDefine.\n+\t* config/cpu/generic/cxxabi_tweaks.h (__cxa_cdtor_return_type):\n+\tDefine.\n+\t* libsupc++/cxxabi.h (__cxa_cdtor_return_type): New type.\n+\t(__cxa_vec_new): Use it.\n+\t(__cxa_vec_new2): Likewise.\n+\t(__cxa_vec_new3): Likewise.\n+\t(__cxa_vec_cdtor): Likewise.\n+\t(__cxa_vec_cctor): Likeiwse.\n+\t(__cxa_vec_dtor): Likewise.\n+\t(__cxa_vec_cleanup): Likewise.\n+\t(__cxa_vec_delete2): Likewise.\n+\t(__cxa_vec_delete3): Likewise.\n+\t* libsupc++/vec.cc (__cxa_vec_new): Likewise.\n+\t(__cxa_vec_new2): Likewise.\n+\t(__cxa_vec_new3): Likewise.\n+\t(__cxa_vec_cdtor): Likewise.\n+\t(__cxa_vec_cctor): Likeiwse.\n+\t(__cxa_vec_dtor): Likewise.\n+\t(__cxa_vec_cleanup): Likewise.\n+\t(__cxa_vec_delete2): Likewise.\n+\t(__cxa_vec_delete3): Likewise.\n+\t(__aeabi_vec_ctor_nocookie_nodtor): New function.\n+\t(__aeabi_vec_ctor_cookie_nodtor): Likewise.\n+\t(__aeabi_vec_cctor_nocookie_nodtor): Likewise.\n+\t(__aeabi_vec_new_cookie_noctor): Likewise.\n+\t(__aeabi_vec_new_nocookie): Likewise.\n+\t(__aeabi_vec_new_cookie_nodtor): Likewise.\n+\t(__aeabi_vec_new_cookie): Likewise.\n+\t(__aeabi_vec_dtor): Likewise.\n+\t(__aeabi_vec_dtor_cookie): Likewise.\n+\t(__aeabi_vec_delete): Likewise.\n+\t(__aeabi_vec_delete3): Likewise.\n+\t(__aeabi_vec_delete3_nodtor): Likewise.\n+\t(__aeabi_atexit): Likewise.\n+\n 2004-09-14  Nathan Myers  <ncm@cantrip.org>\n \n \t* include/bits/fstream.tcc (xsgetn): Slightly tweak the recent fix"}, {"sha": "06c16fa3993bc04cc9daaa4da421474ef4d6018b", "filename": "libstdc++-v3/config/cpu/arm/cxxabi_tweaks.h", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/511bbc8f91882da77dfb2026bbed3ee94df4f731/libstdc%2B%2B-v3%2Fconfig%2Fcpu%2Farm%2Fcxxabi_tweaks.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/511bbc8f91882da77dfb2026bbed3ee94df4f731/libstdc%2B%2B-v3%2Fconfig%2Fcpu%2Farm%2Fcxxabi_tweaks.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fcpu%2Farm%2Fcxxabi_tweaks.h?ref=511bbc8f91882da77dfb2026bbed3ee94df4f731", "patch": "@@ -48,6 +48,8 @@ namespace __cxxabiv1\n   // __cxa_vec_ctor should return a pointer to the array.\n   typedef void * __cxa_vec_ctor_return_type;\n #define _GLIBCXX_CXA_VEC_CTOR_RETURN(x) return x\n+  // Constructors and destructors return the \"this\" pointer.\n+  typedef void * __cxa_cdtor_return_type;\n \n #else // __ARM_EABI__\n \n@@ -59,6 +61,8 @@ namespace __cxxabiv1\n   // __cxa_vec_ctor has void return type.\n   typedef void __cxa_vec_ctor_return_type;\n #define _GLIBCXX_CXA_VEC_CTOR_RETURN(x) return\n+  // Constructors and destructors do not return a value.\n+  typedef void __cxa_cdtor_return_type;\n \n #endif //!__ARM_EABI__\n "}, {"sha": "5cacb3c5531a20d3028a3a7586d05787c1a0987f", "filename": "libstdc++-v3/config/cpu/generic/cxxabi_tweaks.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/511bbc8f91882da77dfb2026bbed3ee94df4f731/libstdc%2B%2B-v3%2Fconfig%2Fcpu%2Fgeneric%2Fcxxabi_tweaks.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/511bbc8f91882da77dfb2026bbed3ee94df4f731/libstdc%2B%2B-v3%2Fconfig%2Fcpu%2Fgeneric%2Fcxxabi_tweaks.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fcpu%2Fgeneric%2Fcxxabi_tweaks.h?ref=511bbc8f91882da77dfb2026bbed3ee94df4f731", "patch": "@@ -43,6 +43,8 @@ namespace __cxxabiv1\n   // __cxa_vec_ctor has void return type.\n   typedef void __cxa_vec_ctor_return_type;\n #define _GLIBCXX_CXA_VEC_CTOR_RETURN(x) return\n+  // Constructors and destructors do not return a value.\n+  typedef void __cxa_cdtor_return_type;\n \n #ifdef __cplusplus\n } // namespace __cxxabiv1"}, {"sha": "39a41c61aee2fb8916c9ec34eec331d5e571ce0f", "filename": "libstdc++-v3/libsupc++/cxxabi.h", "status": "modified", "additions": 18, "deletions": 15, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/511bbc8f91882da77dfb2026bbed3ee94df4f731/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fcxxabi.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/511bbc8f91882da77dfb2026bbed3ee94df4f731/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fcxxabi.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fcxxabi.h?ref=511bbc8f91882da77dfb2026bbed3ee94df4f731", "patch": "@@ -50,61 +50,64 @@\n #ifdef __cplusplus\n namespace __cxxabiv1\n {  \n+  typedef __cxa_cdtor_return_type (*__cxa_cdtor_type)(void *);\n+\n   extern \"C\" \n   {\n #endif\n \n   // Allocate array.\n   void* \n   __cxa_vec_new(size_t __element_count, size_t __element_size, \n-\t\tsize_t __padding_size, void (*__constructor) (void*),\n-\t\tvoid (*__destructor) (void*));\n+\t\tsize_t __padding_size, __cxa_cdtor_type constructor,\n+\t\t__cxa_cdtor_type destructor);\n \n   void*\n   __cxa_vec_new2(size_t __element_count, size_t __element_size,\n-\t\t size_t __padding_size, void (*__constructor) (void*),\n-\t\t void (*__destructor) (void*), void *(*__alloc) (size_t), \n+\t\t size_t __padding_size, __cxa_cdtor_type constructor,\n+\t\t __cxa_cdtor_type destructor, void *(*__alloc) (size_t), \n \t\t void (*__dealloc) (void*));\n \n   void*\n   __cxa_vec_new3(size_t __element_count, size_t __element_size,\n-\t\t size_t __padding_size, void (*__constructor) (void*),\n-\t\t void (*__destructor) (void*), void *(*__alloc) (size_t), \n+\t\t size_t __padding_size, __cxa_cdtor_type constructor,\n+\t\t __cxa_cdtor_type destructor, void *(*__alloc) (size_t), \n \t\t void (*__dealloc) (void*, size_t));\n \n   // Construct array.\n   __cxa_vec_ctor_return_type\n   __cxa_vec_ctor(void* __array_address, size_t __element_count,\n-\t\t size_t __element_size, void (*__constructor) (void*),\n-\t\t void (*__destructor) (void*));\n+\t\t size_t __element_size, __cxa_cdtor_type constructor,\n+\t\t __cxa_cdtor_type destructor);\n \n   __cxa_vec_ctor_return_type\n   __cxa_vec_cctor(void* dest_array, void* src_array, size_t element_count, \n-\t\t  size_t element_size, void (*constructor) (void*, void*), \n-\t\t  void (*destructor) (void*));\n+\t\t  size_t element_size, \n+\t\t  __cxa_cdtor_return_type (*constructor) (void*, void*), \n+\t\t  __cxa_cdtor_type destructor);\n  \n   // Destruct array.\n   void \n   __cxa_vec_dtor(void* __array_address, size_t __element_count,\n-\t\t size_t __element_size, void (*__destructor) (void*));\n+\t\t size_t __element_size, __cxa_cdtor_type destructor);\n   \n   void \n   __cxa_vec_cleanup(void* __array_address, size_t __element_count,\n-\t\t    size_t __element_size, void (*__destructor) (void*));\n+\t\t    size_t __element_size, __cxa_cdtor_type destructor);\n   \n   // Destruct and release array.\n   void \n   __cxa_vec_delete(void* __array_address, size_t __element_size,\n-\t\t   size_t __padding_size, void (*__destructor) (void*));\n+\t\t   size_t __padding_size, __cxa_cdtor_type destructor);\n \n   void \n   __cxa_vec_delete2(void* __array_address, size_t __element_size,\n-\t\t    size_t __padding_size, void (*__destructor) (void*),\n+\t\t    size_t __padding_size, __cxa_cdtor_type destructor,\n \t\t    void (*__dealloc) (void*));\n                   \n   void \n   __cxa_vec_delete3(void* __array_address, size_t __element_size,\n-\t\t    size_t __padding_size, void (*__destructor) (void*),\n+\t\t    size_t __padding_size, __cxa_cdtor_type destructor,\n \t\t    void (*__dealloc) (void*, size_t));\n \n   int "}, {"sha": "7e93d1cfea0ae513dbb2272b2e9a5afe645de118", "filename": "libstdc++-v3/libsupc++/vec.cc", "status": "modified", "additions": 167, "deletions": 15, "changes": 182, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/511bbc8f91882da77dfb2026bbed3ee94df4f731/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fvec.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/511bbc8f91882da77dfb2026bbed3ee94df4f731/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fvec.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fvec.cc?ref=511bbc8f91882da77dfb2026bbed3ee94df4f731", "patch": "@@ -70,8 +70,8 @@ namespace __cxxabiv1\n   __cxa_vec_new(std::size_t element_count,\n \t\tstd::size_t element_size,\n \t\tstd::size_t padding_size,\n-\t\tvoid (*constructor) (void *),\n-\t\tvoid (*destructor) (void *))\n+\t\t__cxa_cdtor_type constructor,\n+\t\t__cxa_cdtor_type destructor)\n   {\n     return __cxa_vec_new2(element_count, element_size, padding_size,\n \t\t\t   constructor, destructor,\n@@ -82,8 +82,8 @@ namespace __cxxabiv1\n   __cxa_vec_new2(std::size_t element_count,\n \t\t std::size_t element_size,\n \t\t std::size_t padding_size,\n-\t\t void (*constructor) (void *),\n-\t\t void (*destructor) (void *),\n+\t\t __cxa_cdtor_type constructor,\n+\t\t __cxa_cdtor_type destructor,\n \t\t void *(*alloc) (std::size_t),\n \t\t void (*dealloc) (void *))\n   {\n@@ -120,8 +120,8 @@ namespace __cxxabiv1\n   __cxa_vec_new3(std::size_t element_count,\n \t\t std::size_t element_size,\n \t\t std::size_t padding_size,\n-\t\t void (*constructor) (void *),\n-\t\t void (*destructor) (void *),\n+\t\t __cxa_cdtor_type constructor,\n+\t\t __cxa_cdtor_type destructor,\n \t\t void *(*alloc) (std::size_t),\n \t\t void (*dealloc) (void *, std::size_t))\n   {\n@@ -159,8 +159,8 @@ namespace __cxxabiv1\n   __cxa_vec_ctor(void *array_address,\n \t\t std::size_t element_count,\n \t\t std::size_t element_size,\n-\t\t void (*constructor) (void *),\n-\t\t void (*destructor) (void *))\n+\t\t __cxa_cdtor_type constructor,\n+\t\t __cxa_cdtor_type destructor)\n   {\n     std::size_t ix = 0;\n     char *ptr = static_cast<char *>(array_address);\n@@ -188,8 +188,8 @@ namespace __cxxabiv1\n \t\t  void *src_array,\n \t\t  std::size_t element_count,\n \t\t  std::size_t element_size,\n-\t\t  void (*constructor) (void *, void *),\n-\t\t  void (*destructor) (void *))\n+\t\t  __cxa_cdtor_return_type (*constructor) (void *, void *),\n+\t\t  __cxa_cdtor_type destructor)\n   {\n     std::size_t ix = 0;\n     char *dest_ptr = static_cast<char *>(dest_array);\n@@ -218,7 +218,7 @@ namespace __cxxabiv1\n   __cxa_vec_dtor(void *array_address,\n \t\t std::size_t element_count,\n \t\t std::size_t element_size,\n-\t\t void (*destructor) (void *))\n+\t\t __cxa_cdtor_type destructor)\n   {\n     if (destructor)\n       {\n@@ -253,7 +253,7 @@ namespace __cxxabiv1\n   __cxa_vec_cleanup(void *array_address,\n \t\t    std::size_t element_count,\n \t\t    std::size_t element_size,\n-\t\t    void (*destructor) (void *))\n+\t\t    __cxa_cdtor_type destructor)\n   {\n     if (destructor)\n       {\n@@ -282,7 +282,7 @@ namespace __cxxabiv1\n   __cxa_vec_delete(void *array_address,\n \t\t   std::size_t element_size,\n \t\t   std::size_t padding_size,\n-\t\t   void (*destructor) (void *))\n+\t\t   __cxa_cdtor_type destructor)\n   {\n     __cxa_vec_delete2(array_address, element_size, padding_size,\n \t\t       destructor,\n@@ -293,7 +293,7 @@ namespace __cxxabiv1\n   __cxa_vec_delete2(void *array_address,\n \t\t    std::size_t element_size,\n \t\t    std::size_t padding_size,\n-\t\t    void (*destructor) (void *),\n+\t\t    __cxa_cdtor_type destructor,\n \t\t    void (*dealloc) (void *))\n   {\n     if (!array_address)\n@@ -326,7 +326,7 @@ namespace __cxxabiv1\n   __cxa_vec_delete3(void *array_address,\n \t\t    std::size_t element_size,\n \t\t    std::size_t padding_size,\n-\t\t     void (*destructor) (void *),\n+\t\t     __cxa_cdtor_type destructor,\n \t\t    void (*dealloc) (void *, std::size_t))\n   {\n     if (!array_address)\n@@ -358,3 +358,155 @@ namespace __cxxabiv1\n   }\n } // namespace __cxxabiv1\n \n+#if defined(__arm__) && defined(__ARM_EABI__)\n+\n+// The ARM C++ ABI requires that the library provide these additional\n+// helper functions.  There are placed in this file, despite being\n+// architecture-specifier, so that the compiler can inline the __cxa\n+// functions into these functions as appropriate.\n+\n+namespace __aeabiv1\n+{\n+  extern \"C\" void *\n+  __aeabi_vec_ctor_nocookie_nodtor (void *array_address,\n+\t\t\t\t    abi::__cxa_cdtor_type constructor,\n+\t\t\t\t    std::size_t element_size,\n+\t\t\t\t    std::size_t element_count)\n+  {\n+    return abi::__cxa_vec_ctor (array_address, element_count, element_size,\n+\t\t\t\tconstructor, /*destructor=*/NULL);\n+  }\n+\n+  extern \"C\" void *\n+  __aeabi_vec_ctor_cookie_nodtor (void *array_address,\n+\t\t\t\t  abi::__cxa_cdtor_type constructor,\n+\t\t\t\t  std::size_t element_size,\n+\t\t\t\t  std::size_t element_count)\n+  {\n+    if (array_address == NULL)\n+      return NULL;\n+\n+    array_address = reinterpret_cast<std::size_t *>(array_address) + 2;\n+    reinterpret_cast<std::size_t *>(array_address)[-2] = element_size;\n+    reinterpret_cast<std::size_t *>(array_address)[-1] = element_count;\n+    return abi::__cxa_vec_ctor (array_address,\n+\t\t\t\telement_count, element_size, \n+\t\t\t\tconstructor, /*destructor=*/NULL);\n+  }\n+  \n+  extern \"C\" void *\n+  __aeabi_vec_cctor_nocookie_nodtor (void *dest_array,\n+\t\t\t\t     void *src_array, \n+\t\t\t\t     std::size_t element_size, \n+\t\t\t\t     std::size_t element_count,\n+\t\t\t\t     void *(*constructor) (void *, void *))\n+  {\n+    return abi::__cxa_vec_cctor (dest_array, src_array,\n+\t\t\t\t element_count, element_size,\n+\t\t\t\t constructor, NULL);\n+  }\n+\n+  extern \"C\" void *\n+  __aeabi_vec_new_cookie_noctor (std::size_t element_size, \n+\t\t\t\t std::size_t element_count)\n+  {\n+    return abi::__cxa_vec_new(element_count, element_size, \n+\t\t\t      2 * sizeof (std::size_t),\n+\t\t\t      /*constructor=*/NULL, /*destructor=*/NULL);\n+  }\n+\n+  extern \"C\" void *\n+  __aeabi_vec_new_nocookie (std::size_t element_size, \n+\t\t\t    std::size_t element_count,\n+\t\t\t    abi::__cxa_cdtor_type constructor)\n+  {\n+    return abi::__cxa_vec_new (element_count, element_size, 0, constructor, \n+\t\t\t       NULL);\n+  }\n+\n+  extern \"C\" void *\n+  __aeabi_vec_new_cookie_nodtor (std::size_t element_size, \n+\t\t\t\t std::size_t element_count,\n+\t\t\t\t abi::__cxa_cdtor_type constructor)\n+  {\n+    return abi::__cxa_vec_new(element_count, element_size, \n+\t\t\t      2 * sizeof (std::size_t),\n+\t\t\t      constructor, NULL);\n+  }\n+\n+  extern \"C\" void *\n+  __aeabi_vec_new_cookie(std::size_t element_size, \n+\t\t\t std::size_t element_count,\n+\t\t\t abi::__cxa_cdtor_type constructor,\n+\t\t\t abi::__cxa_cdtor_type destructor)\n+  {\n+    return abi::__cxa_vec_new (element_count, element_size, \n+\t\t\t       2 * sizeof (std::size_t),\n+\t\t\t       constructor, destructor);\n+  }\n+\n+  \n+  extern \"C\" void *\n+  __aeabi_vec_dtor (void *array_address, \n+\t\t    abi::__cxa_cdtor_type destructor,\n+\t\t    std::size_t element_size, \n+\t\t    std::size_t element_count)\n+  {\n+    abi::__cxa_vec_dtor (array_address, element_count, element_size, \n+\t\t\t destructor);\n+    return reinterpret_cast<std::size_t*> (array_address) - 2;\n+  }\n+\n+  extern \"C\" void *\n+  __aeabi_vec_dtor_cookie (void *array_address, \n+\t\t\t   abi::__cxa_cdtor_type destructor)\n+  {\n+    abi::__cxa_vec_dtor (array_address, \n+\t\t\t reinterpret_cast<std::size_t *>(array_address)[-1],\n+\t\t\t reinterpret_cast<std::size_t *>(array_address)[-2],\n+\t\t\t destructor);\n+    return reinterpret_cast<std::size_t*> (array_address) - 2;\n+  }\n+  \n+  \n+  extern \"C\" void\n+  __aeabi_vec_delete (void *array_address, \n+\t\t      abi::__cxa_cdtor_type destructor)\n+  {\n+    abi::__cxa_vec_delete (array_address,\n+\t\t\t   reinterpret_cast<std::size_t *>(array_address)[-2],\n+\t\t\t   2 * sizeof (std::size_t),\n+\t\t\t   destructor);\n+  }\n+\n+  extern \"C\" void\n+  __aeabi_vec_delete3 (void *array_address, \n+\t\t       abi::__cxa_cdtor_type destructor,\n+\t\t       void (*dealloc) (void *, std::size_t))\n+  {\n+    abi::__cxa_vec_delete3 (array_address,\n+\t\t\t    reinterpret_cast<std::size_t *>(array_address)[-2],\n+\t\t\t    2 * sizeof (std::size_t),\n+\t\t\t    destructor, dealloc);\n+  }\n+\n+  extern \"C\" void\n+  __aeabi_vec_delete3_nodtor (void *array_address,\n+\t\t\t      void (*dealloc) (void *, std::size_t))\n+  {\n+    abi::__cxa_vec_delete3 (array_address,\n+\t\t\t    reinterpret_cast<std::size_t *>(array_address)[-2],\n+\t\t\t    2 * sizeof (std::size_t),\n+\t\t\t    /*destructor=*/NULL, dealloc);\n+  }\n+  \n+  extern \"C\" int\n+  __aeabi_atexit (void *object, \n+\t\t  void (*destructor) (void *),\n+\t\t  void *dso_handle)\n+  {\n+    return abi::__cxa_atexit(destructor, object, dso_handle);\n+  }\n+} // namespace __aeabiv1\n+\n+#endif // defined(__arm__) && defined(__ARM_EABI__)"}]}