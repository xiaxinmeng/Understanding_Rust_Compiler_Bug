{"sha": "d1be5d82e008bb123557087fd3db9a1b28e7c209", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDFiZTVkODJlMDA4YmIxMjM1NTcwODdmZDNkYjlhMWIyOGU3YzIwOQ==", "commit": {"author": {"name": "Nicola Pero", "email": "nicola.pero@meta-innovation.com", "date": "2010-09-12T01:44:58Z"}, "committer": {"name": "Nicola Pero", "email": "nicola@gcc.gnu.org", "date": "2010-09-12T01:44:58Z"}, "message": "In libobjc/:\n\n        * objc/deprecated/objc_malloc.h: New file.\n        * objc/deprecated/objc_valloc.h: New file.\n        * objc/objc-api.h: Include the files instead of defining\n        objc_valloc, _objc_malloc() and similar.\n        * Makefile.in (OBJC_DEPRECATED_H): Added objc_valloc.h and\n        objc_malloc.h.\n        * memory.c: Removed the extra layer of indirection of _objc_malloc\n        and similar.\n        (objc_calloc): Use GC_malloc in the garbage-collected\n        implementation as GC_malloc returns memory that is already freed.\n        (objc_valloc): Deprecated.\n\nFrom-SVN: r164224", "tree": {"sha": "d3064b97c59138cbba1ca85249d30ede27b9aacf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d3064b97c59138cbba1ca85249d30ede27b9aacf"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d1be5d82e008bb123557087fd3db9a1b28e7c209", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d1be5d82e008bb123557087fd3db9a1b28e7c209", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d1be5d82e008bb123557087fd3db9a1b28e7c209", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d1be5d82e008bb123557087fd3db9a1b28e7c209/comments", "author": {"login": "Nico-31415", "id": 94470564, "node_id": "U_kgDOBaGBpA", "avatar_url": "https://avatars.githubusercontent.com/u/94470564?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Nico-31415", "html_url": "https://github.com/Nico-31415", "followers_url": "https://api.github.com/users/Nico-31415/followers", "following_url": "https://api.github.com/users/Nico-31415/following{/other_user}", "gists_url": "https://api.github.com/users/Nico-31415/gists{/gist_id}", "starred_url": "https://api.github.com/users/Nico-31415/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Nico-31415/subscriptions", "organizations_url": "https://api.github.com/users/Nico-31415/orgs", "repos_url": "https://api.github.com/users/Nico-31415/repos", "events_url": "https://api.github.com/users/Nico-31415/events{/privacy}", "received_events_url": "https://api.github.com/users/Nico-31415/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "7b8699866416f7a55116e19bf6fe2c28bae12a68", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7b8699866416f7a55116e19bf6fe2c28bae12a68", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7b8699866416f7a55116e19bf6fe2c28bae12a68"}], "stats": {"total": 189, "additions": 117, "deletions": 72}, "files": [{"sha": "4abad0a88b91512d5189b4f90227207eef9542c2", "filename": "libobjc/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d1be5d82e008bb123557087fd3db9a1b28e7c209/libobjc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d1be5d82e008bb123557087fd3db9a1b28e7c209/libobjc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libobjc%2FChangeLog?ref=d1be5d82e008bb123557087fd3db9a1b28e7c209", "patch": "@@ -1,3 +1,17 @@\n+2010-09-12  Nicola Pero  <nicola.pero@meta-innovation.com>\n+\t\n+\t* objc/deprecated/objc_malloc.h: New file.\n+\t* objc/deprecated/objc_valloc.h: New file.\n+\t* objc/objc-api.h: Include the files instead of defining\n+\tobjc_valloc, _objc_malloc() and similar.\n+\t* Makefile.in (OBJC_DEPRECATED_H): Added objc_valloc.h and\n+\tobjc_malloc.h.\n+\t* memory.c: Removed the extra layer of indirection of _objc_malloc\n+\tand similar.\n+\t(objc_calloc): Use GC_malloc in the garbage-collected\n+\timplementation as GC_malloc returns memory that is already freed.\n+\t(objc_valloc): Deprecated.\t\n+\t\n 2010-09-12  Nicola Pero  <nicola.pero@meta-innovation.com>\n \n \t* objc/deprecated/objc_error.h: New file."}, {"sha": "f4a6de19f9a3809c94caa9d5702a8d06caa31dbf", "filename": "libobjc/Makefile.in", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d1be5d82e008bb123557087fd3db9a1b28e7c209/libobjc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d1be5d82e008bb123557087fd3db9a1b28e7c209/libobjc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libobjc%2FMakefile.in?ref=d1be5d82e008bb123557087fd3db9a1b28e7c209", "patch": "@@ -168,7 +168,9 @@ OBJC_DEPRECATED_H = \\\n   Object.h \\\n   STR.h \\\n   objc_error.h \\\n+  objc_malloc.h \\\n   objc_unexpected_exception.h \\\n+  objc_valloc.h \\\n   struct_objc_class.h \\\n   struct_objc_protocol.h \\\n   struct_objc_selector.h \\"}, {"sha": "2a6dec0de7d0747b803f9b08cbc54900fdf4b335", "filename": "libobjc/memory.c", "status": "modified", "additions": 74, "deletions": 47, "changes": 121, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d1be5d82e008bb123557087fd3db9a1b28e7c209/libobjc%2Fmemory.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d1be5d82e008bb123557087fd3db9a1b28e7c209/libobjc%2Fmemory.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libobjc%2Fmemory.c?ref=d1be5d82e008bb123557087fd3db9a1b28e7c209", "patch": "@@ -24,6 +24,12 @@ a copy of the GCC Runtime Library Exception along with this program;\n see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n <http://www.gnu.org/licenses/>.  */\n \n+/*\n+  This file includes the standard functions for memory allocation and\n+  disposal.  Users should use these functions in their ObjC programs\n+  so that they work properly with garbage collectors.\n+*/\n+\n #include \"objc-private/common.h\"\n #include \"objc-private/error.h\"\n \n@@ -38,17 +44,13 @@ see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n #include \"objc/objc-api.h\"\n #include \"objc-private/runtime.h\"\n \n-/*\n-  Standard functions for memory allocation and disposal.  Users should\n-  use these functions in their ObjC programs so that they work\n-  properly with garbage collectors as well as can take advantage of\n-  the exception/error handling available.\n-*/\n+#if OBJC_WITH_GC\n+#include <gc.h>\n \n void *\n objc_malloc (size_t size)\n {\n-  void *res = (void *) (*_objc_malloc) (size);\n+  void *res = (void *)(GC_malloc (size));\n   if (! res)\n     _objc_abort (\"Virtual memory exhausted\\n\");\n   return res;\n@@ -57,16 +59,53 @@ objc_malloc (size_t size)\n void *\n objc_atomic_malloc (size_t size)\n {\n-  void *res = (void *) (*_objc_atomic_malloc) (size);\n+  void *res = (void *)(GC_malloc_atomic (size));\n   if (! res)\n     _objc_abort (\"Virtual memory exhausted\\n\");\n   return res;\n }\n \n void *\n-objc_valloc (size_t size)\n+objc_realloc (void *mem, size_t size)\n+{\n+  void *res = (void *)(GC_realloc (mem, size));\n+  if (! res)\n+    _objc_abort (\"Virtual memory exhausted\\n\");\n+  return res;\n+}\n+\n+void *\n+objc_calloc (size_t nelem, size_t size)\n+{\n+  /* Note that GC_malloc returns cleared memory (see documentation) so\n+     there is no need to clear it.  */\n+  void *res = (void *)(GC_malloc (nelem, size));\n+  if (! res)\n+    _objc_abort (\"Virtual memory exhausted\\n\");\n+  return res;\n+}\n+\n+void\n+objc_free (void *mem)\n+{\n+  return;\n+}\n+\n+#else\n+\n+void *\n+objc_malloc (size_t size)\n {\n-  void *res = (void *) (*_objc_valloc) (size);\n+  void *res = (void *)(malloc (size));\n+  if (! res)\n+    _objc_abort (\"Virtual memory exhausted\\n\");\n+  return res;\n+}\n+\n+void *\n+objc_atomic_malloc (size_t size)\n+{\n+  void *res = (void *)(malloc (size));\n   if (! res)\n     _objc_abort (\"Virtual memory exhausted\\n\");\n   return res;\n@@ -75,7 +114,7 @@ objc_valloc (size_t size)\n void *\n objc_realloc (void *mem, size_t size)\n {\n-  void *res = (void *) (*_objc_realloc) (mem, size);\n+  void *res = (void *)(realloc (mem, size));\n   if (! res)\n     _objc_abort (\"Virtual memory exhausted\\n\");\n   return res;\n@@ -84,7 +123,7 @@ objc_realloc (void *mem, size_t size)\n void *\n objc_calloc (size_t nelem, size_t size)\n {\n-  void *res = (void *) (*_objc_calloc) (nelem, size);\n+  void *res = (void *)(calloc (nelem, size));\n   if (! res)\n     _objc_abort (\"Virtual memory exhausted\\n\");\n   return res;\n@@ -93,57 +132,45 @@ objc_calloc (size_t nelem, size_t size)\n void\n objc_free (void *mem)\n {\n-  (*_objc_free) (mem);\n+  free (mem);\n }\n \n-/*\n-  Hook functions for memory allocation and disposal.  This makes it\n-  easy to substitute garbage collection systems such as Boehm's GC by\n-  assigning these function pointers to the GC's allocation routines.\n-  By default these point to the ANSI standard malloc, realloc, free,\n-  etc.\n-\n-  Users should call the normal objc routines above for memory\n-  allocation and disposal within their programs.\n-*/\n+#endif\t/* !OBJC_WITH_GC */\n+\n+/* The rest of the file contains deprecated code.  */\n \n #if OBJC_WITH_GC\n-#include <gc.h>\n \n-/* FIXME: The following sounds pointless because the GC_malloc\n-   documentation says that it returns memory that is already zeroed!\n-*/\n-static void *\n-GC_calloc (size_t nelem, size_t size)\n+void *\n+objc_valloc (size_t size)\n {\n-  void *p = GC_malloc (nelem * size);\n-  if (! p)\n-    _objc_abort (\"Virtual memory exhausted!\\n\");\n-\n-  memset (p, 0, nelem * size);\n-  return p;\n+  void *res = (void *)(GC_malloc (size));\n+  if (! res)\n+    _objc_abort (\"Virtual memory exhausted\\n\");\n+  return res;\n }\n \n-static void\n-noFree (void *p)\n+#else\n+\n+void *\n+objc_valloc (size_t size)\n {\n+  void *res = (void *)(malloc (size));\n+  if (! res)\n+    _objc_abort (\"Virtual memory exhausted\\n\");\n+  return res;\n }\n \n-void *(*_objc_malloc) (size_t) = GC_malloc;\n-void *(*_objc_atomic_malloc) (size_t) = GC_malloc_atomic;\n-void *(*_objc_valloc) (size_t) = GC_malloc;\n-void *(*_objc_realloc) (void *, size_t) = GC_realloc;\n-void *(*_objc_calloc) (size_t, size_t) = GC_calloc;\n-void (*_objc_free) (void *) = noFree;\n+#endif\t/* !OBJC_WITH_GC */\n \n-#else\t/* !OBJC_WITH_GC */\n+/*\n+  Hook functions for memory allocation and disposal.  Deprecated\n+  and currently unused.\n+*/\n \n void *(*_objc_malloc) (size_t) = malloc;\n void *(*_objc_atomic_malloc) (size_t) = malloc;\n void *(*_objc_valloc) (size_t) = malloc;\n void *(*_objc_realloc) (void *, size_t) = realloc;\n void *(*_objc_calloc) (size_t, size_t) = calloc;\n void (*_objc_free) (void *) = free;\n-\n-\n-#endif\t/* !OBJC_WITH_GC */"}, {"sha": "cf6c6e9d092e81a1fef753f285e8afa0253381e8", "filename": "libobjc/objc/deprecated/objc_malloc.h", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d1be5d82e008bb123557087fd3db9a1b28e7c209/libobjc%2Fobjc%2Fdeprecated%2Fobjc_malloc.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d1be5d82e008bb123557087fd3db9a1b28e7c209/libobjc%2Fobjc%2Fdeprecated%2Fobjc_malloc.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libobjc%2Fobjc%2Fdeprecated%2Fobjc_malloc.h?ref=d1be5d82e008bb123557087fd3db9a1b28e7c209", "patch": "@@ -0,0 +1,17 @@\n+/*\n+** Hook functions for memory allocation and disposal.\n+** This makes it easy to substitute garbage collection systems\n+** such as Boehm's GC by assigning these function pointers\n+** to the GC's allocation routines.  By default these point\n+** to the ANSI standard malloc, realloc, free, etc.\n+**\n+** Users should call the normal objc routines above for\n+** memory allocation and disposal within their programs.\n+*/\n+objc_EXPORT void *(*_objc_malloc)(size_t);\n+objc_EXPORT void *(*_objc_atomic_malloc)(size_t);\n+objc_EXPORT void *(*_objc_valloc)(size_t);\n+objc_EXPORT void *(*_objc_realloc)(void *, size_t);\n+objc_EXPORT void *(*_objc_calloc)(size_t, size_t);\n+objc_EXPORT void (*_objc_free)(void *);\n+"}, {"sha": "a715f1a733034394079b8ef4547e9a43dd68a5a9", "filename": "libobjc/objc/deprecated/objc_valloc.h", "status": "added", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d1be5d82e008bb123557087fd3db9a1b28e7c209/libobjc%2Fobjc%2Fdeprecated%2Fobjc_valloc.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d1be5d82e008bb123557087fd3db9a1b28e7c209/libobjc%2Fobjc%2Fdeprecated%2Fobjc_valloc.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libobjc%2Fobjc%2Fdeprecated%2Fobjc_valloc.h?ref=d1be5d82e008bb123557087fd3db9a1b28e7c209", "patch": "@@ -0,0 +1,2 @@\n+void *\n+objc_valloc(size_t size);"}, {"sha": "9fff9e1d155e6d8c5301e39ba6c0a0e476eb8a36", "filename": "libobjc/objc/objc-api.h", "status": "modified", "additions": 8, "deletions": 25, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d1be5d82e008bb123557087fd3db9a1b28e7c209/libobjc%2Fobjc%2Fobjc-api.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d1be5d82e008bb123557087fd3db9a1b28e7c209/libobjc%2Fobjc%2Fobjc-api.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libobjc%2Fobjc%2Fobjc-api.h?ref=d1be5d82e008bb123557087fd3db9a1b28e7c209", "patch": "@@ -82,10 +82,8 @@ struct objc_method_description\n #define _C_VECTOR   '!'\n #define _C_COMPLEX   'j'\n \n-\n #include \"deprecated/objc_error.h\"\n \n-\n /* For every class which happens to have statically allocated instances in\n    this module, one OBJC_STATIC_INSTANCES is allocated by the compiler.\n    INSTANCES is NULL terminated and points to all statically allocated\n@@ -328,20 +326,19 @@ objc_EXPORT id (*_objc_object_copy)(id object);\n objc_EXPORT id (*_objc_object_dispose)(id object);\n \n /*\n-** Standard functions for memory allocation and disposal.\n-** Users should use these functions in their ObjC programs so\n-** that they work properly with garbage collectors as well as\n-** can take advantage of the exception/error handling available.\n+  Standard functions for memory allocation and disposal.  Users should\n+  use these functions in their ObjC programs so that they work so that\n+  they work properly with garbage collectors.\n */\n void *\n objc_malloc(size_t size);\n \n+/* FIXME: Shouldn't the following be called objc_malloc_atomic ?  The\n+   GC function is GC_malloc_atomic() which makes sense.\n+ */\n void *\n objc_atomic_malloc(size_t size);\n \n-void *\n-objc_valloc(size_t size);\n-\n void *\n objc_realloc(void *mem, size_t size);\n \n@@ -351,22 +348,8 @@ objc_calloc(size_t nelem, size_t size);\n void\n objc_free(void *mem);\n \n-/*\n-** Hook functions for memory allocation and disposal.\n-** This makes it easy to substitute garbage collection systems\n-** such as Boehm's GC by assigning these function pointers\n-** to the GC's allocation routines.  By default these point\n-** to the ANSI standard malloc, realloc, free, etc.\n-**\n-** Users should call the normal objc routines above for\n-** memory allocation and disposal within their programs.\n-*/\n-objc_EXPORT void *(*_objc_malloc)(size_t);\n-objc_EXPORT void *(*_objc_atomic_malloc)(size_t);\n-objc_EXPORT void *(*_objc_valloc)(size_t);\n-objc_EXPORT void *(*_objc_realloc)(void *, size_t);\n-objc_EXPORT void *(*_objc_calloc)(size_t, size_t);\n-objc_EXPORT void (*_objc_free)(void *);\n+#include \"deprecated/objc_valloc.h\"\n+#include \"deprecated/objc_malloc.h\"\n \n /*\n **  Hooks for method forwarding. This makes it easy to substitute a"}]}