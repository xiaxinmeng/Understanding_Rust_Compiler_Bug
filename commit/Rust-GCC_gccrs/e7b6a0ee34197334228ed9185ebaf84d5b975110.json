{"sha": "e7b6a0ee34197334228ed9185ebaf84d5b975110", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTdiNmEwZWUzNDE5NzMzNDIyOGVkOTE4NWViYWY4NGQ1Yjk3NTExMA==", "commit": {"author": {"name": "DJ Delorie", "email": "dj@redhat.com", "date": "2001-09-21T00:27:59Z"}, "committer": {"name": "DJ Delorie", "email": "dj@gcc.gnu.org", "date": "2001-09-21T00:27:59Z"}, "message": "c-typeck.c (really_start_incremental_init): Discriminate between zero-length arrays and flexible arrays.\n\n* c-typeck.c (really_start_incremental_init): Discriminate\nbetween zero-length arrays and flexible arrays.\n(push_init_level): Detect zero-length arrays and handle them\nlike fixed-sized arrays.\n* expr.c (store_constructor): Handle zero-length arrays and\nflexible arrays correctly.\n* doc/extend.texi: Update zero-length array notes.\n\n* gcc.dg/20000926-1.c: Update expected warning messages.\n* gcc.dg/array-2.c: Likewise, and test for warnings too.\n* gcc.dg/array-4.c: Likewise, and don't verify the zero-length\narray.\n\nFrom-SVN: r45714", "tree": {"sha": "367fe25e25603ec8574df8960ea2e634f886da63", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/367fe25e25603ec8574df8960ea2e634f886da63"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e7b6a0ee34197334228ed9185ebaf84d5b975110", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e7b6a0ee34197334228ed9185ebaf84d5b975110", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e7b6a0ee34197334228ed9185ebaf84d5b975110", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e7b6a0ee34197334228ed9185ebaf84d5b975110/comments", "author": null, "committer": null, "parents": [{"sha": "f5aee6316d591598ac8574b47b79fa35e10bca2c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f5aee6316d591598ac8574b47b79fa35e10bca2c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f5aee6316d591598ac8574b47b79fa35e10bca2c"}], "stats": {"total": 80, "additions": 44, "deletions": 36}, "files": [{"sha": "1419033057b7fee583967a9ca628e2a95a7ac796", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e7b6a0ee34197334228ed9185ebaf84d5b975110/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e7b6a0ee34197334228ed9185ebaf84d5b975110/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=e7b6a0ee34197334228ed9185ebaf84d5b975110", "patch": "@@ -1,3 +1,13 @@\n+2001-09-20  DJ Delorie  <dj@redhat.com>\n+\n+\t* c-typeck.c (really_start_incremental_init): Discriminate\n+\tbetween zero-length arrays and flexible arrays.\n+\t(push_init_level): Detect zero-length arrays and handle them\n+\tlike fixed-sized arrays.\n+\t* expr.c (store_constructor): Handle zero-length arrays and\n+\tflexible arrays correctly.\n+\t* doc/extend.texi: Update zero-length array notes.\n+\n 2001-09-20  Jim Wilson  <wilson@redhat.com>\n \n \t* config/ia64/ia64.c (itanium_split_issue): Allow max 2 FP per cycle."}, {"sha": "c3d11fe731694b4b9a87a5ec3d572f1950351df7", "filename": "gcc/c-typeck.c", "status": "modified", "additions": 11, "deletions": 19, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e7b6a0ee34197334228ed9185ebaf84d5b975110/gcc%2Fc-typeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e7b6a0ee34197334228ed9185ebaf84d5b975110/gcc%2Fc-typeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-typeck.c?ref=e7b6a0ee34197334228ed9185ebaf84d5b975110", "patch": "@@ -5190,7 +5190,8 @@ really_start_incremental_init (type)\n \t    = TYPE_MAX_VALUE (TYPE_DOMAIN (constructor_type));\n \n \t  /* Detect non-empty initializations of zero-length arrays.  */\n-\t  if (constructor_max_index == NULL_TREE)\n+\t  if (constructor_max_index == NULL_TREE\n+\t      && TYPE_SIZE (constructor_type))\n \t    constructor_max_index = build_int_2 (-1, -1);\n \n \t  constructor_index\n@@ -5352,14 +5353,15 @@ push_init_level (implicit)\n \t{\n \t  constructor_max_index\n \t    = TYPE_MAX_VALUE (TYPE_DOMAIN (constructor_type));\n+\n+\t  /* Detect non-empty initializations of zero-length arrays.  */\n+\t  if (constructor_max_index == NULL_TREE\n+\t      && TYPE_SIZE (constructor_type))\n+\t    constructor_max_index = build_int_2 (-1, -1);\n+\n \t  constructor_index\n \t    = convert (bitsizetype, \n \t\t       TYPE_MIN_VALUE (TYPE_DOMAIN (constructor_type)));\n-\n-\t  /* ??? For GCC 3.1, remove special case initialization of\n-\t     zero-length array members from pop_init_level and set\n-\t     constructor_max_index such that we get the normal\n-\t     \"excess elements\" warning.  */\n \t}\n       else\n \tconstructor_index = bitsize_zero_node;\n@@ -5438,19 +5440,9 @@ pop_init_level (implicit)\n \t    constructor_type = NULL_TREE;\n \t}\n       else\n-\t{\n-\t  warning_init (\"deprecated initialization of zero-length array\");\n-\n-\t  /* We must be initializing the last member of a top-level struct.  */\n-\t  if (TREE_CHAIN (constructor_fields) != NULL_TREE)\n-\t    {\n-\t      error_init (\"initialization of zero-length array before end of structure\");\n-\t      /* Discard the initializer so that we do not abort later.  */\n-\t      constructor_type = NULL_TREE;\n-\t    }\n-\t  else if (constructor_depth > 2)\n-\t    error_init (\"initialization of zero-length array inside a nested context\");\n-\t}\n+\t/* Zero-length arrays are no longer special, so we should no longer\n+\t   get here.  */\n+\tabort();\n     }\n \n   /* Warn when some struct elements are implicitly initialized to zero.  */"}, {"sha": "08344960b52820dc79f3e10bc8f2bb0963ea8333", "filename": "gcc/doc/extend.texi", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e7b6a0ee34197334228ed9185ebaf84d5b975110/gcc%2Fdoc%2Fextend.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e7b6a0ee34197334228ed9185ebaf84d5b975110/gcc%2Fdoc%2Fextend.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fextend.texi?ref=e7b6a0ee34197334228ed9185ebaf84d5b975110", "patch": "@@ -1303,17 +1303,17 @@ of zero-length arrays, @code{sizeof} evaluates to zero.\n \n @item\n Flexible array members may only appear as the last member of a\n-@code{struct} that is otherwise non-empty.  GCC currently allows\n-zero-length arrays anywhere.  You may encounter problems, however,\n-defining structures containing only a zero-length array.  Such usage\n-is deprecated, and we recommend using zero-length arrays only in\n-places in which flexible array members would be allowed.\n+@code{struct} that is otherwise non-empty.\n @end itemize\n \n GCC versions before 3.0 allowed zero-length arrays to be statically\n-initialized.  In addition to those cases that were useful, it also\n-allowed initializations in situations that would corrupt later data.\n-Non-empty initialization of zero-length arrays is now deprecated.\n+initialized, as if they were flexible arrays.  In addition to those\n+cases that were useful, it also allowed initializations in situations\n+that would corrupt later data.  Non-empty initialization of zero-length\n+arrays is now treated like any case where there are more initializer\n+elements than the array holds, in that a suitable warning about \"excess\n+elements in array\" is given, and the excess elements (all of them, in\n+this case) are ignored.\n \n Instead GCC allows static initialization of flexible array members.\n This is equivalent to defining a new structure containing the original"}, {"sha": "b61fc176ed769a5a696340b6fa9f5ed646d5c9b1", "filename": "gcc/expr.c", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e7b6a0ee34197334228ed9185ebaf84d5b975110/gcc%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e7b6a0ee34197334228ed9185ebaf84d5b975110/gcc%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpr.c?ref=e7b6a0ee34197334228ed9185ebaf84d5b975110", "patch": "@@ -4710,7 +4710,9 @@ store_constructor (exp, target, align, cleared, size)\n       int need_to_clear;\n       tree domain = TYPE_DOMAIN (type);\n       tree elttype = TREE_TYPE (type);\n-      int const_bounds_p = (host_integerp (TYPE_MIN_VALUE (domain), 0)\n+      int const_bounds_p = (TYPE_MIN_VALUE (domain)\n+\t\t\t    && TYPE_MAX_VALUE (domain)\n+\t\t\t    && host_integerp (TYPE_MIN_VALUE (domain), 0)\n \t\t\t    && host_integerp (TYPE_MAX_VALUE (domain), 0));\n       HOST_WIDE_INT minelt = 0;\n       HOST_WIDE_INT maxelt = 0;"}, {"sha": "16d4816af73d5e881236fe6223eb26ac0f32ac1c", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e7b6a0ee34197334228ed9185ebaf84d5b975110/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e7b6a0ee34197334228ed9185ebaf84d5b975110/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=e7b6a0ee34197334228ed9185ebaf84d5b975110", "patch": "@@ -1,3 +1,10 @@\n+2001-09-20  DJ Delorie  <dj@redhat.com>\n+\n+\t* gcc.dg/20000926-1.c: Update expected warning messages.\n+\t* gcc.dg/array-2.c: Likewise, and test for warnings too.\n+\t* gcc.dg/array-4.c: Likewise, and don't verify the zero-length\n+\tarray.\n+\n 2001-09-18  Richard Sandiford  <rsandifo@redhat.com>\n \n \t* g++.dg/eh/registers1.C: New test case."}, {"sha": "2f5ca10a1ba8197fea08acb34b0337a1354e28ff", "filename": "gcc/testsuite/gcc.dg/20000926-1.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e7b6a0ee34197334228ed9185ebaf84d5b975110/gcc%2Ftestsuite%2Fgcc.dg%2F20000926-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e7b6a0ee34197334228ed9185ebaf84d5b975110/gcc%2Ftestsuite%2Fgcc.dg%2F20000926-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2F20000926-1.c?ref=e7b6a0ee34197334228ed9185ebaf84d5b975110", "patch": "@@ -22,6 +22,6 @@ struct PLAYBOOK playbook  =\n {\n   \"BookName\",\n   {\n-    { 1, \"PName0\" },\n-  } /* { dg-warning \"(deprecated initialization)|(near initialization)\" \"\" } */\n+    { 1, \"PName0\" }, /* { dg-warning \"(excess elements)|(near initialization)\" \"\" } */\n+  }\n };"}, {"sha": "06c753f63216be70f8d5e2204b84bc164d9b2a22", "filename": "gcc/testsuite/gcc.dg/array-2.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e7b6a0ee34197334228ed9185ebaf84d5b975110/gcc%2Ftestsuite%2Fgcc.dg%2Farray-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e7b6a0ee34197334228ed9185ebaf84d5b975110/gcc%2Ftestsuite%2Fgcc.dg%2Farray-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Farray-2.c?ref=e7b6a0ee34197334228ed9185ebaf84d5b975110", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile } */\n-/* { dg-options \"-w\" } */\n+/* { dg-options \"\" } */\n \n /* Verify that we can't do things to get ourselves in trouble\n    with GCC's initialized flexible array member extension.  */\n@@ -10,4 +10,4 @@ struct g g1 = { { 0, { } } };\n struct g g2 = { { 0, { 1 } } }; /* { dg-error \"(nested context)|(near initialization)\" \"nested\" } */\n \n struct h { int x[0]; int y; };\n-struct h h1 = { { 0 }, 1 }; /* { dg-error \"(before end)|(near initialization)\" \"before end\" } */\n+struct h h1 = { { 0 }, 1 }; /* { dg-error \"(excess elements)|(near initialization)\" \"before end\" } */"}, {"sha": "b3e4f6c50dedc8ac4432fe1d9d8ec9c9a8310861", "filename": "gcc/testsuite/gcc.dg/array-4.c", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e7b6a0ee34197334228ed9185ebaf84d5b975110/gcc%2Ftestsuite%2Fgcc.dg%2Farray-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e7b6a0ee34197334228ed9185ebaf84d5b975110/gcc%2Ftestsuite%2Fgcc.dg%2Farray-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Farray-4.c?ref=e7b6a0ee34197334228ed9185ebaf84d5b975110", "patch": "@@ -12,7 +12,7 @@ struct g { int w; int x[0]; };\n \n static struct f f = { 4, { 0, 1, 2, 3 } };\n static int junk1[] = { -1, -1, -1, -1 };\n-static struct g g = { 4, { 0, 1, 2, 3 } }; /* { dg-warning \"(deprecated initialization)|(near initialization)\" \"\" } */\n+static struct g g = { 4, { 0, 1, 2, 3 } }; /* { dg-warning \"(excess elements)|(near initialization)\" \"\" } */\n static int junk2[] = { -1, -1, -1, -1 };\n \n int main()\n@@ -21,8 +21,5 @@ int main()\n   for (i = 0; i < f.w; ++i)\n     if (f.x[i] != i)\n       abort ();\n-  for (i = 0; i < g.w; ++i)\n-    if (g.x[i] != i)\n-      abort ();\n   exit(0);\n }"}]}