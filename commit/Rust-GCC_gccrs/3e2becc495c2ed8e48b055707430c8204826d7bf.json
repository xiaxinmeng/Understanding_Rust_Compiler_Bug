{"sha": "3e2becc495c2ed8e48b055707430c8204826d7bf", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2UyYmVjYzQ5NWMyZWQ4ZTQ4YjA1NTcwNzQzMGM4MjA0ODI2ZDdiZg==", "commit": {"author": {"name": "Marek Polacek", "email": "polacek@redhat.com", "date": "2017-06-26T10:02:27Z"}, "committer": {"name": "Marek Polacek", "email": "mpolacek@gcc.gnu.org", "date": "2017-06-26T10:02:27Z"}, "message": "re PR c/80116 (Warn about macros expanding to multiple statements)\n\n\tPR c/80116\n\t* c-common.h (warn_for_multistatement_macros): Declare.\n\t* c-warn.c: Include \"c-family/c-indentation.h\".\n\t(warn_for_multistatement_macros): New function.\n\t* c.opt (Wmultistatement-macros): New option.\n\t* c-indentation.c (guard_tinfo_to_string): No longer static.\n\tChange the parameter type to \"enum rid\".  Handle RID_SWITCH.\n\t* c-indentation.h (guard_tinfo_to_string): Declare.\n\n\t* c-parser.c (c_parser_if_body): Set the location of the\n\tbody of the conditional after parsing all the labels.  Call\n\twarn_for_multistatement_macros.\n\t(c_parser_else_body): Likewise.\n\t(c_parser_switch_statement): Likewise.\n\t(c_parser_while_statement): Likewise.\n\t(c_parser_for_statement): Likewise.\n\t(c_parser_statement): Add a default argument.  Save the location\n\tafter labels have been parsed.\n\t(c_parser_c99_block_statement): Likewise.\n\n\t* parser.c (cp_parser_statement): Add a default argument.  Save the\n\tlocation of the expression-statement after labels have been parsed.\n\t(cp_parser_implicitly_scoped_statement): Set the location of the\n\tbody of the conditional after parsing all the labels.  Call\n\twarn_for_multistatement_macros.\n\t(cp_parser_already_scoped_statement): Likewise.\n\n\t* doc/invoke.texi: Document -Wmultistatement-macros.\n\n\t* c-c++-common/Wmultistatement-macros-1.c: New test.\n\t* c-c++-common/Wmultistatement-macros-2.c: New test.\n\t* c-c++-common/Wmultistatement-macros-3.c: New test.\n\t* c-c++-common/Wmultistatement-macros-4.c: New test.\n\t* c-c++-common/Wmultistatement-macros-5.c: New test.\n\t* c-c++-common/Wmultistatement-macros-6.c: New test.\n\t* c-c++-common/Wmultistatement-macros-7.c: New test.\n\t* c-c++-common/Wmultistatement-macros-8.c: New test.\n\t* c-c++-common/Wmultistatement-macros-9.c: New test.\n\t* c-c++-common/Wmultistatement-macros-10.c: New test.\n\t* c-c++-common/Wmultistatement-macros-11.c: New test.\n\nFrom-SVN: r249643", "tree": {"sha": "eb5ce085c45fa8f538a1c2ea1da0f6b4aee02485", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/eb5ce085c45fa8f538a1c2ea1da0f6b4aee02485"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3e2becc495c2ed8e48b055707430c8204826d7bf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3e2becc495c2ed8e48b055707430c8204826d7bf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3e2becc495c2ed8e48b055707430c8204826d7bf", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3e2becc495c2ed8e48b055707430c8204826d7bf/comments", "author": {"login": "mpolacek", "id": 10496300, "node_id": "MDQ6VXNlcjEwNDk2MzAw", "avatar_url": "https://avatars.githubusercontent.com/u/10496300?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mpolacek", "html_url": "https://github.com/mpolacek", "followers_url": "https://api.github.com/users/mpolacek/followers", "following_url": "https://api.github.com/users/mpolacek/following{/other_user}", "gists_url": "https://api.github.com/users/mpolacek/gists{/gist_id}", "starred_url": "https://api.github.com/users/mpolacek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mpolacek/subscriptions", "organizations_url": "https://api.github.com/users/mpolacek/orgs", "repos_url": "https://api.github.com/users/mpolacek/repos", "events_url": "https://api.github.com/users/mpolacek/events{/privacy}", "received_events_url": "https://api.github.com/users/mpolacek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "945653db613d34683696341759c4b070600b350c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/945653db613d34683696341759c4b070600b350c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/945653db613d34683696341759c4b070600b350c"}], "stats": {"total": 841, "additions": 822, "deletions": 19}, "files": [{"sha": "41d5f57a78bab6df517f7383681a605abd2d135e", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3e2becc495c2ed8e48b055707430c8204826d7bf/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3e2becc495c2ed8e48b055707430c8204826d7bf/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=3e2becc495c2ed8e48b055707430c8204826d7bf", "patch": "@@ -1,3 +1,8 @@\n+2017-06-26  Marek Polacek  <polacek@redhat.com>\n+\n+\tPR c/80116\n+\t* doc/invoke.texi: Document -Wmultistatement-macros.\n+\n 2017-06-26  Christophe Lyon  <christophe.lyon@linaro.org>\n \n \t* doc/sourcebuild.texi (ARM-specific attributes): Document new"}, {"sha": "b116d4c1300fadb5878ed6c766d78c86e1a47b99", "filename": "gcc/c-family/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3e2becc495c2ed8e48b055707430c8204826d7bf/gcc%2Fc-family%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3e2becc495c2ed8e48b055707430c8204826d7bf/gcc%2Fc-family%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2FChangeLog?ref=3e2becc495c2ed8e48b055707430c8204826d7bf", "patch": "@@ -1,3 +1,14 @@\n+2017-06-26  Marek Polacek  <polacek@redhat.com>\n+\n+\tPR c/80116\n+\t* c-common.h (warn_for_multistatement_macros): Declare.\n+\t* c-warn.c: Include \"c-family/c-indentation.h\".\n+\t(warn_for_multistatement_macros): New function.\n+\t* c.opt (Wmultistatement-macros): New option.\n+\t* c-indentation.c (guard_tinfo_to_string): No longer static.\n+\tChange the parameter type to \"enum rid\".  Handle RID_SWITCH.\n+\t* c-indentation.h (guard_tinfo_to_string): Declare.\n+\n 2017-06-23  Marc Glisse  <marc.glisse@inria.fr>\n \n \t* c-common.c (c_common_nodes_and_builtins): Use builtin_structptr_types."}, {"sha": "f3d051a73a4d0b3a033d3afba93408a1663e13f7", "filename": "gcc/c-family/c-common.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3e2becc495c2ed8e48b055707430c8204826d7bf/gcc%2Fc-family%2Fc-common.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3e2becc495c2ed8e48b055707430c8204826d7bf/gcc%2Fc-family%2Fc-common.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-common.h?ref=3e2becc495c2ed8e48b055707430c8204826d7bf", "patch": "@@ -1539,6 +1539,8 @@ extern bool maybe_warn_shift_overflow (location_t, tree, tree);\n extern void warn_duplicated_cond_add_or_warn (location_t, tree, vec<tree> **);\n extern bool diagnose_mismatched_attributes (tree, tree);\n extern tree do_warn_duplicated_branches_r (tree *, int *, void *);\n+extern void warn_for_multistatement_macros (location_t, location_t,\n+\t\t\t\t\t    location_t, enum rid);\n \n /* In c-attribs.c.  */\n extern bool attribute_takes_identifier_p (const_tree);"}, {"sha": "7ca21e8334707aca03eebf313e301cc6a2e5a82a", "filename": "gcc/c-family/c-indentation.c", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3e2becc495c2ed8e48b055707430c8204826d7bf/gcc%2Fc-family%2Fc-indentation.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3e2becc495c2ed8e48b055707430c8204826d7bf/gcc%2Fc-family%2Fc-indentation.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-indentation.c?ref=3e2becc495c2ed8e48b055707430c8204826d7bf", "patch": "@@ -542,10 +542,10 @@ should_warn_for_misleading_indentation (const token_indent_info &guard_tinfo,\n \n /* Return the string identifier corresponding to the given guard token.  */\n \n-static const char *\n-guard_tinfo_to_string (const token_indent_info &guard_tinfo)\n+const char *\n+guard_tinfo_to_string (enum rid keyword)\n {\n-  switch (guard_tinfo.keyword)\n+  switch (keyword)\n     {\n     case RID_FOR:\n       return \"for\";\n@@ -557,6 +557,8 @@ guard_tinfo_to_string (const token_indent_info &guard_tinfo)\n       return \"while\";\n     case RID_DO:\n       return \"do\";\n+    case RID_SWITCH:\n+      return \"switch\";\n     default:\n       gcc_unreachable ();\n     }\n@@ -605,10 +607,10 @@ warn_for_misleading_indentation (const token_indent_info &guard_tinfo,\n     {\n       if (warning_at (guard_tinfo.location, OPT_Wmisleading_indentation,\n \t\t      \"this %qs clause does not guard...\",\n-\t\t      guard_tinfo_to_string (guard_tinfo)))\n+\t\t      guard_tinfo_to_string (guard_tinfo.keyword)))\n \tinform (next_tinfo.location,\n \t\t\"...this statement, but the latter is misleadingly indented\"\n \t\t\" as if it were guarded by the %qs\",\n-\t\tguard_tinfo_to_string (guard_tinfo));\n+\t\tguard_tinfo_to_string (guard_tinfo.keyword));\n     }\n }"}, {"sha": "e4cad26cdad6b1f22ea99c3f8cbd168d5cfbc764", "filename": "gcc/c-family/c-indentation.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3e2becc495c2ed8e48b055707430c8204826d7bf/gcc%2Fc-family%2Fc-indentation.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3e2becc495c2ed8e48b055707430c8204826d7bf/gcc%2Fc-family%2Fc-indentation.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-indentation.h?ref=3e2becc495c2ed8e48b055707430c8204826d7bf", "patch": "@@ -48,5 +48,7 @@ extern void\n warn_for_misleading_indentation (const token_indent_info &guard_tinfo,\n \t\t\t\t const token_indent_info &body_tinfo,\n \t\t\t\t const token_indent_info &next_tinfo);\n+extern const char *\n+guard_tinfo_to_string (enum rid keyword);\n \n #endif  /* ! GCC_C_INDENTATION_H  */"}, {"sha": "5d67395c5020230cff3572093c155a94bc3913c4", "filename": "gcc/c-family/c-warn.c", "status": "modified", "additions": 89, "deletions": 0, "changes": 89, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3e2becc495c2ed8e48b055707430c8204826d7bf/gcc%2Fc-family%2Fc-warn.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3e2becc495c2ed8e48b055707430c8204826d7bf/gcc%2Fc-family%2Fc-warn.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-warn.c?ref=3e2becc495c2ed8e48b055707430c8204826d7bf", "patch": "@@ -31,6 +31,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"asan.h\"\n #include \"gcc-rich-location.h\"\n #include \"gimplify.h\"\n+#include \"c-family/c-indentation.h\"\n \n /* Print a warning if a constant expression had overflow in folding.\n    Invoke this function on every expression that the language\n@@ -2401,3 +2402,91 @@ do_warn_duplicated_branches_r (tree *tp, int *, void *)\n     do_warn_duplicated_branches (*tp);\n   return NULL_TREE;\n }\n+\n+/* Implementation of -Wmultistatement-macros.  This warning warns about\n+   cases when a macro expands to multiple statements not wrapped in\n+   do {} while (0) or ({ }) and is used as a body of if/else/for/while\n+   conditionals.  For example,\n+\n+   #define DOIT x++; y++\n+\n+   if (c)\n+     DOIT;\n+\n+   will increment y unconditionally.\n+\n+   BODY_LOC is the location of the first token in the body after labels\n+   have been parsed, NEXT_LOC is the location of the next token after the\n+   body of the conditional has been parsed, and GUARD_LOC is the location\n+   of the conditional.  */\n+\n+void\n+warn_for_multistatement_macros (location_t body_loc, location_t next_loc,\n+\t\t\t\tlocation_t guard_loc, enum rid keyword)\n+{\n+  if (!warn_multistatement_macros)\n+    return;\n+\n+  /* Ain't got time to waste.  We only care about macros here.  */\n+  if (!from_macro_expansion_at (body_loc)\n+      || !from_macro_expansion_at (next_loc))\n+    return;\n+\n+  /* Let's skip macros defined in system headers.  */\n+  if (in_system_header_at (body_loc)\n+      || in_system_header_at (next_loc))\n+    return;\n+\n+  /* Find the actual tokens in the macro definition.  BODY_LOC and\n+     NEXT_LOC have to come from the same spelling location, but they\n+     will resolve to different locations in the context of the macro\n+     definition.  */\n+  location_t body_loc_exp\n+    = linemap_resolve_location (line_table, body_loc,\n+\t\t\t\tLRK_MACRO_DEFINITION_LOCATION, NULL);\n+  location_t next_loc_exp\n+    = linemap_resolve_location (line_table, next_loc,\n+\t\t\t\tLRK_MACRO_DEFINITION_LOCATION, NULL);\n+  location_t guard_loc_exp\n+    = linemap_resolve_location (line_table, guard_loc,\n+\t\t\t\tLRK_MACRO_DEFINITION_LOCATION, NULL);\n+\n+  /* These are some funky cases we don't want to warn about.  */\n+  if (body_loc_exp == guard_loc_exp\n+      || next_loc_exp == guard_loc_exp\n+      || body_loc_exp == next_loc_exp)\n+    return;\n+\n+  /* Find the macro map for the macro expansion BODY_LOC.  */\n+  const line_map *map = linemap_lookup (line_table, body_loc);\n+  const line_map_macro *macro_map = linemap_check_macro (map);\n+\n+  /* Now see if the following token is coming from the same macro\n+     expansion.  If it is, it's a problem, because it should've been\n+     parsed at this point.  We only look at odd-numbered indexes\n+     within the MACRO_MAP_LOCATIONS array, i.e. the spelling locations\n+     of the tokens.  */\n+  bool found_guard = false;\n+  bool found_next = false;\n+  for (unsigned int i = 1;\n+       i < 2 * MACRO_MAP_NUM_MACRO_TOKENS (macro_map);\n+       i += 2)\n+    {\n+      if (MACRO_MAP_LOCATIONS (macro_map)[i] == next_loc_exp)\n+\tfound_next = true;\n+      if (MACRO_MAP_LOCATIONS (macro_map)[i] == guard_loc_exp)\n+\tfound_guard = true;\n+    }\n+\n+  /* The conditional itself must not come from the same expansion, because\n+     we don't want to warn about\n+     #define IF if (x) x++; y++\n+     and similar.  */\n+  if (!found_next || found_guard)\n+    return;\n+\n+  if (warning_at (body_loc, OPT_Wmultistatement_macros,\n+\t\t  \"macro expands to multiple statements\"))\n+    inform (guard_loc, \"some parts of macro expansion are not guarded by \"\n+\t    \"this %qs clause\", guard_tinfo_to_string (keyword));\n+}"}, {"sha": "43a4166f3121a9be4aa1876a9c76d615faf05cf1", "filename": "gcc/c-family/c.opt", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3e2becc495c2ed8e48b055707430c8204826d7bf/gcc%2Fc-family%2Fc.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3e2becc495c2ed8e48b055707430c8204826d7bf/gcc%2Fc-family%2Fc.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc.opt?ref=3e2becc495c2ed8e48b055707430c8204826d7bf", "patch": "@@ -698,6 +698,10 @@ Wmissing-field-initializers\n C ObjC C++ ObjC++ Var(warn_missing_field_initializers) Warning EnabledBy(Wextra)\n Warn about missing fields in struct initializers.\n \n+Wmultistatement-macros\n+C ObjC C++ ObjC++ Var(warn_multistatement_macros) Warning LangEnabledBy(C ObjC C++ ObjC++,Wall)\n+Warn about unsafe macros expanding to multiple statements used as a body of a clause such as if, else, while, switch, or for.\n+\n Wmultiple-inheritance\n C++ ObjC++ Var(warn_multiple_inheritance) Warning\n Warn on direct multiple inheritance."}, {"sha": "fabddc17d2f4e401f88b7ea735f21ca39b02df33", "filename": "gcc/c/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3e2becc495c2ed8e48b055707430c8204826d7bf/gcc%2Fc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3e2becc495c2ed8e48b055707430c8204826d7bf/gcc%2Fc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2FChangeLog?ref=3e2becc495c2ed8e48b055707430c8204826d7bf", "patch": "@@ -1,3 +1,17 @@\n+2017-06-26  Marek Polacek  <polacek@redhat.com>\n+\n+\tPR c/80116\n+\t* c-parser.c (c_parser_if_body): Set the location of the\n+\tbody of the conditional after parsing all the labels.  Call\n+\twarn_for_multistatement_macros.\n+\t(c_parser_else_body): Likewise.\n+\t(c_parser_switch_statement): Likewise.\n+\t(c_parser_while_statement): Likewise.\n+\t(c_parser_for_statement): Likewise.\n+\t(c_parser_statement): Add a default argument.  Save the location\n+\tafter labels have been parsed.\n+\t(c_parser_c99_block_statement): Likewise.\n+\n 2017-06-19  Richard Biener  <rguenther@suse.de>\n \n \t* gimple-parser.c (c_parser_gimple_postfix_expression): Handle"}, {"sha": "f8fbc92617213b9e10951f28dcd8d36097928c0f", "filename": "gcc/c/c-parser.c", "status": "modified", "additions": 46, "deletions": 9, "changes": 55, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3e2becc495c2ed8e48b055707430c8204826d7bf/gcc%2Fc%2Fc-parser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3e2becc495c2ed8e48b055707430c8204826d7bf/gcc%2Fc%2Fc-parser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2Fc-parser.c?ref=3e2becc495c2ed8e48b055707430c8204826d7bf", "patch": "@@ -1218,9 +1218,11 @@ static void c_parser_initval (c_parser *, struct c_expr *,\n static tree c_parser_compound_statement (c_parser *);\n static void c_parser_compound_statement_nostart (c_parser *);\n static void c_parser_label (c_parser *);\n-static void c_parser_statement (c_parser *, bool *);\n+static void c_parser_statement (c_parser *, bool *, location_t * = NULL);\n static void c_parser_statement_after_labels (c_parser *, bool *,\n \t\t\t\t\t     vec<tree> * = NULL);\n+static tree c_parser_c99_block_statement (c_parser *, bool *,\n+\t\t\t\t\t  location_t * = NULL);\n static void c_parser_if_statement (c_parser *, bool *, vec<tree> *);\n static void c_parser_switch_statement (c_parser *, bool *);\n static void c_parser_while_statement (c_parser *, bool, bool *);\n@@ -5204,9 +5206,11 @@ c_parser_label (c_parser *parser)\n    implement -Wparentheses.  */\n \n static void\n-c_parser_statement (c_parser *parser, bool *if_p)\n+c_parser_statement (c_parser *parser, bool *if_p, location_t *loc_after_labels)\n {\n   c_parser_all_labels (parser);\n+  if (loc_after_labels)\n+    *loc_after_labels = c_parser_peek_token (parser)->location;\n   c_parser_statement_after_labels (parser, if_p, NULL);\n }\n \n@@ -5466,11 +5470,12 @@ c_parser_paren_condition (c_parser *parser)\n    implement -Wparentheses.  */\n \n static tree\n-c_parser_c99_block_statement (c_parser *parser, bool *if_p)\n+c_parser_c99_block_statement (c_parser *parser, bool *if_p,\n+\t\t\t      location_t *loc_after_labels)\n {\n   tree block = c_begin_compound_stmt (flag_isoc99);\n   location_t loc = c_parser_peek_token (parser)->location;\n-  c_parser_statement (parser, if_p);\n+  c_parser_statement (parser, if_p, loc_after_labels);\n   return c_end_compound_stmt (loc, block, flag_isoc99);\n }\n \n@@ -5492,6 +5497,7 @@ c_parser_if_body (c_parser *parser, bool *if_p,\n {\n   tree block = c_begin_compound_stmt (flag_isoc99);\n   location_t body_loc = c_parser_peek_token (parser)->location;\n+  location_t body_loc_after_labels = UNKNOWN_LOCATION;\n   token_indent_info body_tinfo\n     = get_token_indent_info (c_parser_peek_token (parser));\n \n@@ -5508,11 +5514,18 @@ c_parser_if_body (c_parser *parser, bool *if_p,\n   else if (c_parser_next_token_is (parser, CPP_OPEN_BRACE))\n     add_stmt (c_parser_compound_statement (parser));\n   else\n-    c_parser_statement_after_labels (parser, if_p);\n+    {\n+      body_loc_after_labels = c_parser_peek_token (parser)->location;\n+      c_parser_statement_after_labels (parser, if_p);\n+    }\n \n   token_indent_info next_tinfo\n     = get_token_indent_info (c_parser_peek_token (parser));\n   warn_for_misleading_indentation (if_tinfo, body_tinfo, next_tinfo);\n+  if (body_loc_after_labels != UNKNOWN_LOCATION\n+      && next_tinfo.type != CPP_SEMICOLON)\n+    warn_for_multistatement_macros (body_loc_after_labels, next_tinfo.location,\n+\t\t\t\t    if_tinfo.location, RID_IF);\n \n   return c_end_compound_stmt (body_loc, block, flag_isoc99);\n }\n@@ -5530,6 +5543,7 @@ c_parser_else_body (c_parser *parser, const token_indent_info &else_tinfo,\n   tree block = c_begin_compound_stmt (flag_isoc99);\n   token_indent_info body_tinfo\n     = get_token_indent_info (c_parser_peek_token (parser));\n+  location_t body_loc_after_labels = UNKNOWN_LOCATION;\n \n   c_parser_all_labels (parser);\n   if (c_parser_next_token_is (parser, CPP_SEMICOLON))\n@@ -5542,11 +5556,18 @@ c_parser_else_body (c_parser *parser, const token_indent_info &else_tinfo,\n       c_parser_consume_token (parser);\n     }\n   else\n-    c_parser_statement_after_labels (parser, NULL, chain);\n+    {\n+      body_loc_after_labels = c_parser_peek_token (parser)->location;\n+      c_parser_statement_after_labels (parser, NULL, chain);\n+    }\n \n   token_indent_info next_tinfo\n     = get_token_indent_info (c_parser_peek_token (parser));\n   warn_for_misleading_indentation (else_tinfo, body_tinfo, next_tinfo);\n+  if (body_loc_after_labels != UNKNOWN_LOCATION\n+      && next_tinfo.type != CPP_SEMICOLON)\n+    warn_for_multistatement_macros (body_loc_after_labels, next_tinfo.location,\n+\t\t\t\t    else_tinfo.location, RID_ELSE);\n \n   return c_end_compound_stmt (body_loc, block, flag_isoc99);\n }\n@@ -5732,7 +5753,13 @@ c_parser_switch_statement (c_parser *parser, bool *if_p)\n   c_start_case (switch_loc, switch_cond_loc, expr, explicit_cast_p);\n   save_break = c_break_label;\n   c_break_label = NULL_TREE;\n-  body = c_parser_c99_block_statement (parser, if_p);\n+  location_t loc_after_labels;\n+  bool open_brace_p = c_parser_peek_token (parser)->type == CPP_OPEN_BRACE;\n+  body = c_parser_c99_block_statement (parser, if_p, &loc_after_labels);\n+  location_t next_loc = c_parser_peek_token (parser)->location;\n+  if (!open_brace_p && c_parser_peek_token (parser)->type != CPP_SEMICOLON)\n+    warn_for_multistatement_macros (loc_after_labels, next_loc, switch_loc,\n+\t\t\t\t    RID_SWITCH);\n   c_finish_case (body, ce.original_type);\n   if (c_break_label)\n     {\n@@ -5783,7 +5810,8 @@ c_parser_while_statement (c_parser *parser, bool ivdep, bool *if_p)\n   token_indent_info body_tinfo\n     = get_token_indent_info (c_parser_peek_token (parser));\n \n-  body = c_parser_c99_block_statement (parser, if_p);\n+  location_t loc_after_labels;\n+  body = c_parser_c99_block_statement (parser, if_p, &loc_after_labels);\n   c_finish_loop (loc, cond, NULL, body, c_break_label, c_cont_label, true);\n   add_stmt (c_end_compound_stmt (loc, block, flag_isoc99));\n   c_parser_maybe_reclassify_token (parser);\n@@ -5792,6 +5820,10 @@ c_parser_while_statement (c_parser *parser, bool ivdep, bool *if_p)\n     = get_token_indent_info (c_parser_peek_token (parser));\n   warn_for_misleading_indentation (while_tinfo, body_tinfo, next_tinfo);\n \n+  if (next_tinfo.type != CPP_SEMICOLON)\n+    warn_for_multistatement_macros (loc_after_labels, next_tinfo.location,\n+\t\t\t\t    while_tinfo.location, RID_WHILE);\n+\n   c_break_label = save_break;\n   c_cont_label = save_cont;\n }\n@@ -6076,7 +6108,8 @@ c_parser_for_statement (c_parser *parser, bool ivdep, bool *if_p)\n   token_indent_info body_tinfo\n     = get_token_indent_info (c_parser_peek_token (parser));\n \n-  body = c_parser_c99_block_statement (parser, if_p);\n+  location_t loc_after_labels;\n+  body = c_parser_c99_block_statement (parser, if_p, &loc_after_labels);\n \n   if (is_foreach_statement)\n     objc_finish_foreach_loop (loc, object_expression, collection_expression, body, c_break_label, c_cont_label);\n@@ -6089,6 +6122,10 @@ c_parser_for_statement (c_parser *parser, bool ivdep, bool *if_p)\n     = get_token_indent_info (c_parser_peek_token (parser));\n   warn_for_misleading_indentation (for_tinfo, body_tinfo, next_tinfo);\n \n+  if (next_tinfo.type != CPP_SEMICOLON)\n+    warn_for_multistatement_macros (loc_after_labels, next_tinfo.location,\n+\t\t\t\t    for_tinfo.location, RID_FOR);\n+\n   c_break_label = save_break;\n   c_cont_label = save_cont;\n }"}, {"sha": "3d04c5812ddec3737f8d386c41f442bdbd00b5cf", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3e2becc495c2ed8e48b055707430c8204826d7bf/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3e2becc495c2ed8e48b055707430c8204826d7bf/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=3e2becc495c2ed8e48b055707430c8204826d7bf", "patch": "@@ -1,3 +1,13 @@\n+2017-06-26  Marek Polacek  <polacek@redhat.com>\n+\n+\tPR c/80116\n+\t* parser.c (cp_parser_statement): Add a default argument.  Save the\n+\tlocation of the expression-statement after labels have been parsed.\n+\t(cp_parser_implicitly_scoped_statement): Set the location of the\n+\tbody of the conditional after parsing all the labels.  Call\n+\twarn_for_multistatement_macros.\n+\t(cp_parser_already_scoped_statement): Likewise.\n+\n 2017-06-24  Paolo Carlini  <paolo.carlini@oracle.com>\n \n \tPR c++/62315"}, {"sha": "c405fe5b77611fd1041b342bd105a9e6027f1e45", "filename": "gcc/cp/parser.c", "status": "modified", "additions": 23, "deletions": 4, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3e2becc495c2ed8e48b055707430c8204826d7bf/gcc%2Fcp%2Fparser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3e2becc495c2ed8e48b055707430c8204826d7bf/gcc%2Fcp%2Fparser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparser.c?ref=3e2becc495c2ed8e48b055707430c8204826d7bf", "patch": "@@ -2102,7 +2102,7 @@ static void cp_parser_lambda_body\n /* Statements [gram.stmt.stmt]  */\n \n static void cp_parser_statement\n-  (cp_parser *, tree, bool, bool *, vec<tree> * = NULL);\n+  (cp_parser *, tree, bool, bool *, vec<tree> * = NULL, location_t * = NULL);\n static void cp_parser_label_for_labeled_statement\n (cp_parser *, tree);\n static tree cp_parser_expression_statement\n@@ -10637,7 +10637,8 @@ cp_parser_lambda_body (cp_parser* parser, tree lambda_expr)\n \n static void\n cp_parser_statement (cp_parser* parser, tree in_statement_expr,\n-\t\t     bool in_compound, bool *if_p, vec<tree> *chain)\n+\t\t     bool in_compound, bool *if_p, vec<tree> *chain,\n+\t\t     location_t *loc_after_labels)\n {\n   tree statement, std_attrs = NULL_TREE;\n   cp_token *token;\n@@ -10830,6 +10831,10 @@ cp_parser_statement (cp_parser* parser, tree in_statement_expr,\n \t  if (cp_parser_parse_definitely (parser))\n \t    return;\n \t}\n+      /* All preceding labels have been parsed at this point.  */\n+      if (loc_after_labels != NULL)\n+\t*loc_after_labels = statement_location;\n+\n       /* Look for an expression-statement instead.  */\n       statement = cp_parser_expression_statement (parser, in_statement_expr);\n \n@@ -12370,6 +12375,7 @@ cp_parser_implicitly_scoped_statement (cp_parser* parser, bool *if_p,\n {\n   tree statement;\n   location_t body_loc = cp_lexer_peek_token (parser->lexer)->location;\n+  location_t body_loc_after_labels = UNKNOWN_LOCATION;\n   token_indent_info body_tinfo\n     = get_token_indent_info (cp_lexer_peek_token (parser->lexer));\n \n@@ -12399,7 +12405,8 @@ cp_parser_implicitly_scoped_statement (cp_parser* parser, bool *if_p,\n       /* Create a compound-statement.  */\n       statement = begin_compound_stmt (0);\n       /* Parse the dependent-statement.  */\n-      cp_parser_statement (parser, NULL_TREE, false, if_p, chain);\n+      cp_parser_statement (parser, NULL_TREE, false, if_p, chain,\n+\t\t\t   &body_loc_after_labels);\n       /* Finish the dummy compound-statement.  */\n       finish_compound_stmt (statement);\n     }\n@@ -12408,6 +12415,11 @@ cp_parser_implicitly_scoped_statement (cp_parser* parser, bool *if_p,\n     = get_token_indent_info (cp_lexer_peek_token (parser->lexer));\n   warn_for_misleading_indentation (guard_tinfo, body_tinfo, next_tinfo);\n \n+  if (body_loc_after_labels != UNKNOWN_LOCATION\n+      && next_tinfo.type != CPP_SEMICOLON)\n+    warn_for_multistatement_macros (body_loc_after_labels, next_tinfo.location,\n+\t\t\t\t    guard_tinfo.location, guard_tinfo.keyword);\n+\n   /* Return the statement.  */\n   return statement;\n }\n@@ -12426,11 +12438,18 @@ cp_parser_already_scoped_statement (cp_parser* parser, bool *if_p,\n     {\n       token_indent_info body_tinfo\n \t= get_token_indent_info (cp_lexer_peek_token (parser->lexer));\n+      location_t loc_after_labels;\n \n-      cp_parser_statement (parser, NULL_TREE, false, if_p);\n+      cp_parser_statement (parser, NULL_TREE, false, if_p, NULL,\n+\t\t\t   &loc_after_labels);\n       token_indent_info next_tinfo\n \t= get_token_indent_info (cp_lexer_peek_token (parser->lexer));\n       warn_for_misleading_indentation (guard_tinfo, body_tinfo, next_tinfo);\n+\n+      if (next_tinfo.type != CPP_SEMICOLON)\n+\twarn_for_multistatement_macros (loc_after_labels, next_tinfo.location,\n+\t\t\t\t\tguard_tinfo.location,\n+\t\t\t\t\tguard_tinfo.keyword);\n     }\n   else\n     {"}, {"sha": "d1e097b9ffc4fbc95efa442bd4e3f3fac52f01ff", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 28, "deletions": 1, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3e2becc495c2ed8e48b055707430c8204826d7bf/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3e2becc495c2ed8e48b055707430c8204826d7bf/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=3e2becc495c2ed8e48b055707430c8204826d7bf", "patch": "@@ -294,7 +294,7 @@ Objective-C and Objective-C++ Dialects}.\n -Wmain  -Wmaybe-uninitialized  -Wmemset-elt-size  -Wmemset-transposed-args @gol\n -Wmisleading-indentation  -Wmissing-braces @gol\n -Wmissing-field-initializers  -Wmissing-include-dirs @gol\n--Wno-multichar  -Wnonnull  -Wnonnull-compare @gol\n+-Wno-multichar  -Wmultistatement-macros  -Wnonnull  -Wnonnull-compare @gol\n -Wnormalized=@r{[}none@r{|}id@r{|}nfc@r{|}nfkc@r{]} @gol\n -Wnull-dereference  -Wodr  -Wno-overflow  -Wopenmp-simd  @gol\n -Woverride-init-side-effects  -Woverlength-strings @gol\n@@ -3842,6 +3842,7 @@ Options} and @ref{Objective-C and Objective-C++ Dialect Options}.\n -Wmemset-transposed-args @gol\n -Wmisleading-indentation @r{(only for C/C++)} @gol\n -Wmissing-braces @r{(only for C/ObjC)} @gol\n+-Wmultistatement-macros  @gol\n -Wnarrowing @r{(only for C++)}  @gol\n -Wnonnull  @gol\n -Wnonnull-compare  @gol\n@@ -4514,6 +4515,32 @@ This warning is enabled by @option{-Wall}.\n @opindex Wno-missing-include-dirs\n Warn if a user-supplied include directory does not exist.\n \n+@item -Wmultistatement-macros\n+@opindex Wmultistatement-macros\n+@opindex Wno-multistatement-macros\n+Warn about unsafe multiple statement macros that appear to be guarded\n+by a clause such as @code{if}, @code{else}, @code{for}, @code{switch}, or\n+@code{while}, in which only the first statement is actually guarded after\n+the macro is expanded.\n+\n+For example:\n+\n+@smallexample\n+#define DOIT x++; y++\n+if (c)\n+  DOIT;\n+@end smallexample\n+\n+will increment @code{y} unconditionally, not just when @code{c} holds.\n+The can usually be fixed by wrapping the macro in a do-while loop:\n+@smallexample\n+#define DOIT do @{ x++; y++; @} while (0)\n+if (c)\n+  DOIT;\n+@end smallexample\n+\n+This warning is enabled by @option{-Wall} in C and C++.\n+\n @item -Wparentheses\n @opindex Wparentheses\n @opindex Wno-parentheses"}, {"sha": "0a5b8a823a73adbedce48bee5936f011cb92bb67", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3e2becc495c2ed8e48b055707430c8204826d7bf/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3e2becc495c2ed8e48b055707430c8204826d7bf/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=3e2becc495c2ed8e48b055707430c8204826d7bf", "patch": "@@ -1,3 +1,18 @@\n+2017-06-26  Marek Polacek  <polacek@redhat.com>\n+\n+\tPR c/80116\n+\t* c-c++-common/Wmultistatement-macros-1.c: New test.\n+\t* c-c++-common/Wmultistatement-macros-2.c: New test.\n+\t* c-c++-common/Wmultistatement-macros-3.c: New test.\n+\t* c-c++-common/Wmultistatement-macros-4.c: New test.\n+\t* c-c++-common/Wmultistatement-macros-5.c: New test.\n+\t* c-c++-common/Wmultistatement-macros-6.c: New test.\n+\t* c-c++-common/Wmultistatement-macros-7.c: New test.\n+\t* c-c++-common/Wmultistatement-macros-8.c: New test.\n+\t* c-c++-common/Wmultistatement-macros-9.c: New test.\n+\t* c-c++-common/Wmultistatement-macros-10.c: New test.\n+\t* c-c++-common/Wmultistatement-macros-11.c: New test.\n+\n 2017-06-26  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* c-c++-common/ubsan/sanitize-recover-7.c (dg-options): Add -w."}, {"sha": "cdecbb4aca422f20849e9b4832645226e21d69f0", "filename": "gcc/testsuite/c-c++-common/Wmultistatement-macros-1.c", "status": "added", "additions": 118, "deletions": 0, "changes": 118, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3e2becc495c2ed8e48b055707430c8204826d7bf/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2FWmultistatement-macros-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3e2becc495c2ed8e48b055707430c8204826d7bf/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2FWmultistatement-macros-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2FWmultistatement-macros-1.c?ref=3e2becc495c2ed8e48b055707430c8204826d7bf", "patch": "@@ -0,0 +1,118 @@\n+/* PR c/80116 */\n+/* { dg-options \"-Wmultistatement-macros\" } */\n+/* { dg-do compile } */\n+\n+#define SWAP(X, Y)\t\\\n+  tmp = X; /* { dg-warning \"macro expands to multiple statements\" } */ \\\n+  X = Y;\t\t\\\n+  Y = tmp\n+\n+#define STUFF\t\t\\\n+  if (0) x = y\n+\n+#define STUFF2\t\t\\\n+  if (0) x = y; x++\n+\n+#define STUFF3\t\t\\\n+  if (x) /* { dg-message \"not guarded by this 'if' clause\" } */ \\\n+    SWAP(x, y) /* { dg-message \"in expansion of macro .SWAP.\" } */\n+\n+#define SET(X, Y)\t\\\n+  (X) = (Y)\n+\n+#define STUFF4\t\t\\\n+  if (x)\t\t\\\n+    SET(x, y);\t\t\\\n+  SET(x, y)\n+\n+#define STUFF5\t\t\\\n+  { tmp = x; x = y; }\n+\n+#define STUFF6\t\t\\\n+  x++;;\n+\n+int x, y, tmp;\n+\n+void\n+fn1 (void)\n+{\n+  if (x) /* { dg-message \"not guarded by this 'if' clause\" } */\n+    SWAP(x, y); /* { dg-message \"in expansion of macro .SWAP.\" } */\n+}\n+\n+void\n+fn2 (void)\n+{\n+  SWAP(x, y);\n+}\n+\n+void\n+fn3 (void)\n+{\n+  if (x)\n+    {\n+      SWAP(x, y);\n+    }\n+}\n+\n+void\n+fn4 (void)\n+{\n+  if (x)\n+  ({ x = 10; x++; });\n+}\n+\n+void\n+fn5 (void)\n+{\n+  if (x) /* { dg-message \"not guarded by this 'if' clause\" } */\n+L1:\n+    SWAP (x, y); /* { dg-message \"in expansion of macro .SWAP.\" } */\n+  goto L1;\n+}\n+\n+void\n+fn6 (void)\n+{\n+  if (x)\n+    SET (x, y);\n+  SET (tmp, x);\n+}\n+\n+void\n+fn7 (void)\n+{\n+  STUFF;\n+}\n+\n+void\n+fn8 (void)\n+{\n+  STUFF2;\n+}\n+\n+void\n+fn9 (void)\n+{\n+  STUFF3; /* { dg-message \"in expansion of macro .STUFF3.\" } */\n+}\n+\n+void\n+fn10 (void)\n+{\n+  STUFF4;\n+}\n+\n+void\n+fn11 (void)\n+{\n+  if (x)\n+    STUFF5;\n+}\n+\n+void\n+fn12 (void)\n+{\n+  if (x)\n+    STUFF6;\n+}"}, {"sha": "766ed25242aade0a1f6a46a3c6c8f1e8eca18ce4", "filename": "gcc/testsuite/c-c++-common/Wmultistatement-macros-10.c", "status": "added", "additions": 82, "deletions": 0, "changes": 82, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3e2becc495c2ed8e48b055707430c8204826d7bf/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2FWmultistatement-macros-10.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3e2becc495c2ed8e48b055707430c8204826d7bf/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2FWmultistatement-macros-10.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2FWmultistatement-macros-10.c?ref=3e2becc495c2ed8e48b055707430c8204826d7bf", "patch": "@@ -0,0 +1,82 @@\n+/* PR c/80116 */\n+/* { dg-options \"-Wmultistatement-macros\" } */\n+/* { dg-do compile } */\n+\n+#define SWAP(x, y) \\\n+  tmp = x; /* { dg-warning \"macro expands to multiple statements\" } */ \\\n+  x = y; \\\n+  y = tmp\n+\n+#define M1\t\\\n+  switch (x) /* { dg-message \"not guarded by this 'switch' clause\" } */ \\\n+    case 1:\t\\\n+    SWAP (x, y) /* { dg-message \"in expansion of macro .SWAP.\" } */\n+\n+#define M2\t\\\n+  switch (x)\t\\\n+    case 1:\t\\\n+    x++\n+\n+#define M3\t\\\n+  switch (x)\t\\\n+    case 1:\t\\\n+    x++;;\n+\n+#define M4\t\\\n+  switch (x) /* { dg-message \"not guarded by this 'switch' clause\" } */ \\\n+L1:\t\t\\\n+    case 1:\t\\\n+    SWAP (x, y) /* { dg-message \"in expansion of macro .SWAP.\" } */\n+\n+#define INC\t\\\n+  x++;;\n+\n+int x, y, tmp;\n+\n+void\n+fn0 (void)\n+{\n+  switch (x) /* { dg-message \"not guarded by this 'switch' clause\" } */\n+    case 1:\n+      SWAP (x, y); /* { dg-message \"in expansion of macro .SWAP.\" } */\n+\n+  switch (x) /* { dg-message \"not guarded by this 'switch' clause\" } */\n+    case 1:\n+    case 2:\n+    case 3:\n+    case 4:\n+    case 5:\n+      SWAP (x, y); /* { dg-message \"in expansion of macro .SWAP.\" } */\n+}\n+\n+void\n+fn1 (void)\n+{\n+  M1; /* { dg-message \"in expansion of macro .M1.\" } */\n+  M2;\n+  M3;\n+  M4; /* { dg-message \"in expansion of macro .M4.\" } */\n+  goto L1;\n+}\n+\n+void\n+fn2 (void)\n+{\n+  switch (x)\n+    case 1:\n+      INC\n+\n+  switch (x)\n+    case 1:\n+      ({ x = 10; x++; });\n+}\n+\n+void\n+fn3 (void)\n+{\n+  switch (x)\n+    {\n+    case 1:\n+      SWAP (x, y);\n+    }\n+}"}, {"sha": "4f4a123631de4845b649023d216f4966b8bc49cb", "filename": "gcc/testsuite/c-c++-common/Wmultistatement-macros-11.c", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3e2becc495c2ed8e48b055707430c8204826d7bf/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2FWmultistatement-macros-11.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3e2becc495c2ed8e48b055707430c8204826d7bf/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2FWmultistatement-macros-11.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2FWmultistatement-macros-11.c?ref=3e2becc495c2ed8e48b055707430c8204826d7bf", "patch": "@@ -0,0 +1,19 @@\n+/* PR c/80116 */\n+/* { dg-options \"-Wmultistatement-macros\" } */\n+/* { dg-do compile } */\n+\n+enum E { A, B };\n+\n+const char *\n+foo (enum E e)\n+{\n+#define CASE(X) case X: return #X\n+  switch (e)\n+    {\n+      CASE (A);\n+      CASE (B);\n+    default:\n+      return \"<unknown>\";\n+    }\n+#undef CASE\n+};"}, {"sha": "9fef90177eb25f9aa5d0b5aa64ae07f13985e0b7", "filename": "gcc/testsuite/c-c++-common/Wmultistatement-macros-2.c", "status": "added", "additions": 137, "deletions": 0, "changes": 137, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3e2becc495c2ed8e48b055707430c8204826d7bf/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2FWmultistatement-macros-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3e2becc495c2ed8e48b055707430c8204826d7bf/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2FWmultistatement-macros-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2FWmultistatement-macros-2.c?ref=3e2becc495c2ed8e48b055707430c8204826d7bf", "patch": "@@ -0,0 +1,137 @@\n+/* PR c/80116 */\n+/* { dg-options \"-Wmultistatement-macros\" } */\n+/* { dg-do compile } */\n+\n+#define SWAP(X, Y)\t\\\n+  tmp = X; /* { dg-warning \"macro expands to multiple statements\" } */ \\\n+  X = Y;\t\t\\\n+  Y = tmp\n+\n+#define STUFF\t\t\\\n+  if (0) {} else x = y\n+\n+#define STUFF2\t\t\\\n+  if (0) {} else x = y; x++\n+\n+#define STUFF3\t\t\\\n+  if (x)\t\t\\\n+    {}\t\t\t\\\n+  else /* { dg-message \"not guarded by this 'else' clause\" } */ \\\n+    SWAP(x, y) /* { dg-message \"in expansion of macro .SWAP.\" } */\n+\n+#define SET(X, Y)\t\\\n+  (X) = (Y)\n+\n+#define STUFF4\t\t\\\n+  if (x)\t\t\\\n+    {}\t\t\t\\\n+  else\t\t\t\\\n+    SET(x, y);\t\t\\\n+  SET(x, y)\n+\n+#define STUFF5\t\t\\\n+  { tmp = x; x = y; }\n+\n+#define STUFF6\t\t\\\n+  x++;;\n+\n+int x, y, tmp;\n+\n+void\n+fn1 (void)\n+{\n+  if (x)\n+   {\n+   }\n+  else /* { dg-message \"not guarded by this 'else' clause\" } */\n+    SWAP(x, y); /* { dg-message \"in expansion of macro .SWAP.\" } */\n+}\n+\n+void\n+fn2 (void)\n+{\n+  SWAP(x, y);\n+}\n+\n+void\n+fn3 (void)\n+{\n+  if (x)\n+    {\n+    }\n+  else\n+    {\n+      SWAP(x, y);\n+    }\n+}\n+\n+void\n+fn4 (void)\n+{\n+  if (x)\n+    {\n+    }\n+  else\n+    ({ x = 10; x++; });\n+}\n+\n+void\n+fn5 (void)\n+{\n+  if (x)\n+    {\n+    }\n+  else /* { dg-message \"not guarded by this 'else' clause\" } */\n+L1:\n+    SWAP (x, y); /* { dg-message \"in expansion of macro .SWAP.\" } */\n+  goto L1;\n+}\n+\n+void\n+fn6 (void)\n+{\n+  if (x)\n+    {\n+    }\n+  else\n+    SET (x, y);\n+  SET (tmp, x);\n+}\n+\n+void\n+fn7 (void)\n+{\n+  STUFF;\n+}\n+\n+void\n+fn8 (void)\n+{\n+  STUFF2;\n+}\n+\n+void\n+fn9 (void)\n+{\n+  STUFF3; /* { dg-message \"in expansion of macro .STUFF3.\" } */\n+}\n+\n+void\n+fn10 (void)\n+{\n+  STUFF4;\n+}\n+\n+void\n+fn11 (void)\n+{\n+  if (x)\n+    STUFF5;\n+}\n+\n+void\n+fn12 (void)\n+{\n+  if (x)\n+    STUFF6;\n+}"}, {"sha": "d130a35f8cc0657da4fbe08838df8b0454878dbc", "filename": "gcc/testsuite/c-c++-common/Wmultistatement-macros-3.c", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3e2becc495c2ed8e48b055707430c8204826d7bf/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2FWmultistatement-macros-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3e2becc495c2ed8e48b055707430c8204826d7bf/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2FWmultistatement-macros-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2FWmultistatement-macros-3.c?ref=3e2becc495c2ed8e48b055707430c8204826d7bf", "patch": "@@ -0,0 +1,12 @@\n+/* PR c/80116 */\n+/* { dg-options \"-Wmultistatement-macros\" } */\n+/* { dg-do compile } */\n+\n+#define CHECK(X) if (!(X)) __builtin_abort ()\n+\n+void\n+fn (int i)\n+{\n+  CHECK (i == 1);\n+  CHECK (i == 2);\n+}"}, {"sha": "e5cc9c35d5b12d1f67e123c41373e74769439d72", "filename": "gcc/testsuite/c-c++-common/Wmultistatement-macros-4.c", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3e2becc495c2ed8e48b055707430c8204826d7bf/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2FWmultistatement-macros-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3e2becc495c2ed8e48b055707430c8204826d7bf/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2FWmultistatement-macros-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2FWmultistatement-macros-4.c?ref=3e2becc495c2ed8e48b055707430c8204826d7bf", "patch": "@@ -0,0 +1,14 @@\n+/* PR c/80116 */\n+/* { dg-options \"-Wmultistatement-macros\" } */\n+/* { dg-do compile } */\n+\n+#define FN(C)\t\t\\\n+  void\t\t\t\\\n+  fn (void)\t\t\\\n+  {\t\t\t\\\n+    C;\t\t\t\\\n+  }\n+\n+int i;\n+\n+FN (if (i) ++i)"}, {"sha": "0ac84f544809c0147ffd5b367cdf96f240717212", "filename": "gcc/testsuite/c-c++-common/Wmultistatement-macros-5.c", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3e2becc495c2ed8e48b055707430c8204826d7bf/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2FWmultistatement-macros-5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3e2becc495c2ed8e48b055707430c8204826d7bf/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2FWmultistatement-macros-5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2FWmultistatement-macros-5.c?ref=3e2becc495c2ed8e48b055707430c8204826d7bf", "patch": "@@ -0,0 +1,18 @@\n+/* PR c/80116 */\n+/* { dg-options \"-Wmultistatement-macros\" } */\n+/* { dg-do compile } */\n+\n+#define M(N)\t\\\n+L ## N:\t\t\\\n+  x++; x++ /* { dg-warning \"macro expands to multiple statements\" } */\n+\n+int x, y, tmp;\n+\n+void\n+fn1 (void)\n+{\n+  if (x) /* { dg-message \"not guarded by this 'if' clause\" } */\n+   M (0); /* { dg-message \"in expansion of macro .M.\" } */\n+  if (x) /* { dg-message \"not guarded by this 'if' clause\" } */\n+   M (1); /* { dg-message \"in expansion of macro .M.\" } */\n+}"}, {"sha": "5ec9cd9db26a80e9bb6928f8584c85e03df72f01", "filename": "gcc/testsuite/c-c++-common/Wmultistatement-macros-6.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3e2becc495c2ed8e48b055707430c8204826d7bf/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2FWmultistatement-macros-6.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3e2becc495c2ed8e48b055707430c8204826d7bf/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2FWmultistatement-macros-6.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2FWmultistatement-macros-6.c?ref=3e2becc495c2ed8e48b055707430c8204826d7bf", "patch": "@@ -0,0 +1,22 @@\n+/* PR c/80116 */\n+/* { dg-options \"-Wmultistatement-macros\" } */\n+/* { dg-do compile } */\n+\n+#define M \\\n+  if (x) x++; x++\n+\n+void\n+f (int x)\n+{\n+  M;\n+  M;\n+  M;\n+  M;\n+  M;\n+  M;\n+  M;\n+  M;\n+  M;\n+  M;\n+  M;\n+}"}, {"sha": "d661f148ddf7e8bc295145b176ee8fb9a8eb77b7", "filename": "gcc/testsuite/c-c++-common/Wmultistatement-macros-7.c", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3e2becc495c2ed8e48b055707430c8204826d7bf/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2FWmultistatement-macros-7.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3e2becc495c2ed8e48b055707430c8204826d7bf/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2FWmultistatement-macros-7.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2FWmultistatement-macros-7.c?ref=3e2becc495c2ed8e48b055707430c8204826d7bf", "patch": "@@ -0,0 +1,18 @@\n+/* PR c/80116 */\n+/* { dg-options \"-Wmultistatement-macros\" } */\n+/* { dg-do compile } */\n+\n+#define SWAP(X, Y)      \\\n+  tmp = X; /* { dg-warning \"macro expands to multiple statements\" } */ \\\n+  X = Y;                \\\n+  Y = tmp\n+\n+#define BODY_AND_IF(COND, X, Y)  \\\n+  if (COND) SWAP (X, Y) /* { dg-message \"in expansion of macro .SWAP.\" } */\n+\n+void\n+fn (int x, int y)\n+{\n+  int tmp;\n+  BODY_AND_IF (1, x, y); /* { dg-message \"in expansion of macro .BODY_AND_IF.\" } */\n+}"}, {"sha": "06522a7d737bbca43c8bb1f5c01b07c8c94c2851", "filename": "gcc/testsuite/c-c++-common/Wmultistatement-macros-8.c", "status": "added", "additions": 64, "deletions": 0, "changes": 64, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3e2becc495c2ed8e48b055707430c8204826d7bf/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2FWmultistatement-macros-8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3e2becc495c2ed8e48b055707430c8204826d7bf/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2FWmultistatement-macros-8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2FWmultistatement-macros-8.c?ref=3e2becc495c2ed8e48b055707430c8204826d7bf", "patch": "@@ -0,0 +1,64 @@\n+/* PR c/80116 */\n+/* { dg-options \"-Wmultistatement-macros\" } */\n+/* { dg-do compile } */\n+\n+#define SWAP(x, y) \\\n+  tmp = x; /* { dg-warning \"macro expands to multiple statements\" } */ \\\n+  x = y; \\\n+  y = tmp\n+\n+#define M1\t\t\t\t\\\n+  for (i = 0; i < 1; ++i) /* { dg-message \"not guarded by this 'for' clause\" } */ \\\n+    SWAP (x, y) /* { dg-message \"in expansion of macro .SWAP.\" } */\n+\n+#define M2\t\t\t\t\\\n+  for (i = 0; i < 1; ++i)\t\t\\\n+    x++\n+\n+#define M3\t\t\t\t\\\n+  for (i = 0; i < 1; ++i)\t\t\\\n+    x++;;\n+\n+#define M4\t\t\t\t\\\n+  for (i = 0; i < 1; ++i) /* { dg-message \"not guarded by this 'for' clause\" } */ \\\n+L1:\t\t\t\t\t\\\n+    SWAP (x, y) /* { dg-message \"in expansion of macro .SWAP.\" } */\n+\n+#define INC\t\\\n+  x++;;\n+\n+int x, y, tmp;\n+\n+void\n+fn0 (void)\n+{\n+  int i;\n+  for (i = 0; i < 1; ++i) /* { dg-message \"not guarded by this 'for' clause\" } */\n+    SWAP (x, y); /* { dg-message \"in expansion of macro .SWAP.\" } */\n+\n+  for (i = 0; i < 1; ++i) /* { dg-message \"not guarded by this 'for' clause\" } */\n+L:\n+    SWAP (x, y); /* { dg-message \"in expansion of macro .SWAP.\" } */\n+  goto L;\n+}\n+\n+void\n+fn1 (void)\n+{\n+  int i;\n+  M1; /* { dg-message \"in expansion of macro .M1.\" } */\n+  M2;\n+  M3;\n+  M4; /* { dg-message \"in expansion of macro .M4.\" } */\n+  goto L1;\n+}\n+\n+void\n+fn2 (void)\n+{\n+  for (int i = 0; i < 1; ++i)\n+    INC\n+\n+  for (int i = 0; i < 1; ++i)\n+    ({ x = 10; x++; });\n+}"}, {"sha": "350c4f9ffd03d4dd2fd438cb888a10f16c048fa4", "filename": "gcc/testsuite/c-c++-common/Wmultistatement-macros-9.c", "status": "added", "additions": 62, "deletions": 0, "changes": 62, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3e2becc495c2ed8e48b055707430c8204826d7bf/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2FWmultistatement-macros-9.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3e2becc495c2ed8e48b055707430c8204826d7bf/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2FWmultistatement-macros-9.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2FWmultistatement-macros-9.c?ref=3e2becc495c2ed8e48b055707430c8204826d7bf", "patch": "@@ -0,0 +1,62 @@\n+/* PR c/80116 */\n+/* { dg-options \"-Wmultistatement-macros\" } */\n+/* { dg-do compile } */\n+\n+#define SWAP(x, y) \\\n+  tmp = x; /* { dg-warning \"macro expands to multiple statements\" } */ \\\n+  x = y; \\\n+  y = tmp\n+\n+#define M1\t\\\n+  while (x) /* { dg-message \"not guarded by this 'while' claus\" } */ \\\n+    SWAP (x, y) /* { dg-message \"in expansion of macro .SWAP.\" } */\n+\n+#define M2\t\\\n+  while (x)\t\\\n+    x++\n+\n+#define M3\t\\\n+  while (x)\t\\\n+    x++;;\n+\n+#define M4\t\\\n+  while (x) /* { dg-message \"not guarded by this 'while' claus\" } */ \\\n+L1:\t\t\\\n+    SWAP (x, y) /* { dg-message \"in expansion of macro .SWAP.\" } */\n+\n+#define INC\t\\\n+  x++;;\n+\n+int x, y, tmp;\n+\n+void\n+fn0 (void)\n+{\n+  while (x) /* { dg-message \"not guarded by this 'while' claus\" } */\n+    SWAP (x, y); /* { dg-message \"in expansion of macro .SWAP.\" } */\n+\n+  while (x) /* { dg-message \"not guarded by this 'while' claus\" } */\n+L:\n+    SWAP (x, y); /* { dg-message \"in expansion of macro .SWAP.\" } */\n+  goto L;\n+}\n+\n+void\n+fn1 (void)\n+{\n+  M1; /* { dg-message \"in expansion of macro .M1.\" } */\n+  M2;\n+  M3;\n+  M4; /* { dg-message \"in expansion of macro .M4.\" } */\n+  goto L1;\n+}\n+\n+void\n+fn2 (void)\n+{\n+  while (x)\n+    INC\n+\n+  while (x)\n+    ({ x = 10; x++; });\n+}"}]}