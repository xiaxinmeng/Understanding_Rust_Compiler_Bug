{"sha": "c01c11cc9cbb2d2a78f03c7c90d98149fd650a95", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzAxYzExY2M5Y2JiMmQyYTc4ZjAzYzdjOTBkOTgxNDlmZDY1MGE5NQ==", "commit": {"author": {"name": "Yannick Moy", "email": "moy@adacore.com", "date": "2020-07-22T07:14:54Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "derodat@adacore.com", "date": "2020-10-20T07:21:44Z"}, "message": "[Ada] Fixes for pretty command-line GNATprove output with -gnatdF\n\ngcc/ada/\n\n\t* errout.adb (Write_Source_Code_Line): Adopt display closer to\n\tGCC format.\n\t(Output_Messages): Deal specially with info messages.\n\t* erroutc.adb (Prescan_Message): Fix bug leading to check\n\tmessages being considered as error messages in pretty output\n\tmode.", "tree": {"sha": "314c27103d1c9628cd8fe7ed69f0d8bfc3aa13ab", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/314c27103d1c9628cd8fe7ed69f0d8bfc3aa13ab"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c01c11cc9cbb2d2a78f03c7c90d98149fd650a95", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c01c11cc9cbb2d2a78f03c7c90d98149fd650a95", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c01c11cc9cbb2d2a78f03c7c90d98149fd650a95", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c01c11cc9cbb2d2a78f03c7c90d98149fd650a95/comments", "author": {"login": "yannickmoy", "id": 859440, "node_id": "MDQ6VXNlcjg1OTQ0MA==", "avatar_url": "https://avatars.githubusercontent.com/u/859440?v=4", "gravatar_id": "", "url": "https://api.github.com/users/yannickmoy", "html_url": "https://github.com/yannickmoy", "followers_url": "https://api.github.com/users/yannickmoy/followers", "following_url": "https://api.github.com/users/yannickmoy/following{/other_user}", "gists_url": "https://api.github.com/users/yannickmoy/gists{/gist_id}", "starred_url": "https://api.github.com/users/yannickmoy/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/yannickmoy/subscriptions", "organizations_url": "https://api.github.com/users/yannickmoy/orgs", "repos_url": "https://api.github.com/users/yannickmoy/repos", "events_url": "https://api.github.com/users/yannickmoy/events{/privacy}", "received_events_url": "https://api.github.com/users/yannickmoy/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pmderodat", "id": 758452, "node_id": "MDQ6VXNlcjc1ODQ1Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/758452?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pmderodat", "html_url": "https://github.com/pmderodat", "followers_url": "https://api.github.com/users/pmderodat/followers", "following_url": "https://api.github.com/users/pmderodat/following{/other_user}", "gists_url": "https://api.github.com/users/pmderodat/gists{/gist_id}", "starred_url": "https://api.github.com/users/pmderodat/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pmderodat/subscriptions", "organizations_url": "https://api.github.com/users/pmderodat/orgs", "repos_url": "https://api.github.com/users/pmderodat/repos", "events_url": "https://api.github.com/users/pmderodat/events{/privacy}", "received_events_url": "https://api.github.com/users/pmderodat/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "04b06947cbcfebaa1ba5beb3c9bf086af5beabab", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/04b06947cbcfebaa1ba5beb3c9bf086af5beabab", "html_url": "https://github.com/Rust-GCC/gccrs/commit/04b06947cbcfebaa1ba5beb3c9bf086af5beabab"}], "stats": {"total": 122, "additions": 82, "deletions": 40}, "files": [{"sha": "049db89f24bd67d09c289704c5ccca2198208eb4", "filename": "gcc/ada/errout.adb", "status": "modified", "additions": 51, "deletions": 20, "changes": 71, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c01c11cc9cbb2d2a78f03c7c90d98149fd650a95/gcc%2Fada%2Ferrout.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c01c11cc9cbb2d2a78f03c7c90d98149fd650a95/gcc%2Fada%2Ferrout.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Ferrout.adb?ref=c01c11cc9cbb2d2a78f03c7c90d98149fd650a95", "patch": "@@ -1840,7 +1840,6 @@ package body Errout is\n       procedure Write_Source_Code_Line (Loc : Source_Ptr);\n       --  Write the source code line corresponding to Loc, as follows:\n       --\n-      --       |\n       --  line |  actual code line here with Loc somewhere\n       --       |                             ^ here\n       --\n@@ -2041,26 +2040,50 @@ package body Errout is\n       ----------------------------\n \n       procedure Write_Source_Code_Line (Loc : Source_Ptr) is\n-         Line    : constant Pos := Pos (Get_Physical_Line_Number (Loc));\n+\n+         function Image (X : Positive; Width : Positive) return String;\n+         --  Output number X over Width characters, with whitespace padding.\n+         --  Only output the low-order Width digits of X, if X is larger than\n+         --  Width digits.\n+\n+         -----------\n+         -- Image --\n+         -----------\n+\n+         function Image (X : Positive; Width : Positive) return String is\n+            Str  : String (1 .. Width);\n+            Curr : Natural := X;\n+         begin\n+            for J in reverse 1 .. Width loop\n+               if Curr > 0 then\n+                  Str (J) := Character'Val (Character'Pos ('0') + Curr mod 10);\n+                  Curr := Curr / 10;\n+               else\n+                  Str (J) := ' ';\n+               end if;\n+            end loop;\n+\n+            return Str;\n+         end Image;\n+\n+         --  Local variables\n+\n+         Line    : constant Pos     := Pos (Get_Physical_Line_Number (Loc));\n          Col     : constant Natural := Natural (Get_Column_Number (Loc));\n-         Padding : constant String (1 .. Int'Image (Line)'Length) :=\n-                              (others => ' ');\n+         Width   : constant         := 5;\n \n          Buf     : Source_Buffer_Ptr;\n          Cur_Loc : Source_Ptr := Loc;\n+\n+      --  Start of processing for Write_Source_Code_Line\n+\n       begin\n          if Loc >= First_Source_Ptr then\n             Buf := Source_Text (Get_Source_File_Index (Loc));\n \n-            --  First line\n-\n-            Write_Str (Padding);\n-            Write_Char ('|');\n-            Write_Eol;\n-\n-            --  Second line with the actual source code line\n+            --  First line with the actual source code line\n \n-            Write_Int (Line);\n+            Write_Str (Image (Positive (Line), Width => Width));\n             Write_Str (\" |\");\n             Write_Str (String (Buf (Loc - Source_Ptr (Col) + 1  .. Loc - 1)));\n \n@@ -2073,10 +2096,10 @@ package body Errout is\n \n             Write_Eol;\n \n-            --  Third line with carret sign pointing to location Loc\n+            --  Second line with carret sign pointing to location Loc\n \n-            Write_Str (Padding);\n-            Write_Char ('|');\n+            Write_Str (String'(1 .. Width => ' '));\n+            Write_Str (\" |\");\n             Write_Str (String'(1 .. Col - 1 => ' '));\n             Write_Str (\"^ here\");\n             Write_Eol;\n@@ -2117,9 +2140,10 @@ package body Errout is\n          while E /= No_Error_Msg loop\n \n             --  If -gnatdF is used, separate main messages from previous\n-            --  messages with a newline and make continuation messages\n-            --  follow the main message with only an indentation of two\n-            --  space characters, without repeating file:line:col: prefix.\n+            --  messages with a newline (unless it is an info message) and\n+            --  make continuation messages follow the main message with only\n+            --  an indentation of two space characters, without repeating\n+            --  file:line:col: prefix.\n \n             Use_Prefix :=\n               not (Debug_Flag_FF and then Errors.Table (E).Msg_Cont);\n@@ -2129,7 +2153,7 @@ package body Errout is\n                if Debug_Flag_FF then\n                   if Errors.Table (E).Msg_Cont then\n                      Write_Str (\"  \");\n-                  else\n+                  elsif not Errors.Table (E).Info then\n                      Write_Eol;\n                   end if;\n                end if;\n@@ -2158,7 +2182,14 @@ package body Errout is\n                Output_Msg_Text (E);\n                Write_Eol;\n \n-               if Debug_Flag_FF then\n+               --  If -gnatdF is used, write the source code line corresponding\n+               --  to the location of the main message (unless it is an info\n+               --  message). Also write the source code line corresponding to\n+               --  an insertion location inside continuation messages.\n+\n+               if Debug_Flag_FF\n+                 and then not Errors.Table (E).Info\n+               then\n                   if Errors.Table (E).Msg_Cont then\n                      declare\n                         Loc : constant Source_Ptr :="}, {"sha": "d0cc6ffc8baed280f1b08043b2b5cef48dbebacd", "filename": "gcc/ada/erroutc.adb", "status": "modified", "additions": 31, "deletions": 20, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c01c11cc9cbb2d2a78f03c7c90d98149fd650a95/gcc%2Fada%2Ferroutc.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c01c11cc9cbb2d2a78f03c7c90d98149fd650a95/gcc%2Fada%2Ferroutc.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Ferroutc.adb?ref=c01c11cc9cbb2d2a78f03c7c90d98149fd650a95", "patch": "@@ -818,34 +818,45 @@ package body Erroutc is\n \n       if not Debug_Flag_FF and then Msg (Msg'First) = '\\' then\n          return;\n-      end if;\n \n-      --  Set initial values of globals (may be changed during scan)\n+      --  Some global variables are not set for continuation messages, as they\n+      --  only make sense for the initial mesage.\n+\n+      elsif Msg (Msg'First) /= '\\' then\n+\n+         --  Set initial values of globals (may be changed during scan)\n \n-      Is_Serious_Error     := True;\n-      Is_Unconditional_Msg := False;\n-      Is_Warning_Msg       := False;\n-      Has_Double_Exclam    := False;\n-      Has_Insertion_Line   := False;\n+         Is_Serious_Error     := True;\n+         Is_Unconditional_Msg := False;\n+         Is_Warning_Msg       := False;\n \n-      --  Check style message\n+         --  Check style message\n \n-      Is_Style_Msg :=\n-        Msg'Length > 7 and then Msg (Msg'First .. Msg'First + 6) = \"(style)\";\n+         Is_Style_Msg :=\n+           Msg'Length > 7\n+             and then Msg (Msg'First .. Msg'First + 6) = \"(style)\";\n \n-      --  Check info message\n+         --  Check info message\n \n-      Is_Info_Msg :=\n-        Msg'Length > 6 and then Msg (Msg'First .. Msg'First + 5) = \"info: \";\n+         Is_Info_Msg :=\n+           Msg'Length > 6\n+             and then Msg (Msg'First .. Msg'First + 5) = \"info: \";\n \n-      --  Check check message\n+         --  Check check message\n+\n+         Is_Check_Msg :=\n+           (Msg'Length > 8\n+             and then Msg (Msg'First .. Msg'First + 7) = \"medium: \")\n+           or else\n+           (Msg'Length > 6\n+             and then Msg (Msg'First .. Msg'First + 5) = \"high: \")\n+           or else\n+           (Msg'Length > 5\n+             and then Msg (Msg'First .. Msg'First + 4) = \"low: \");\n+      end if;\n \n-      Is_Check_Msg :=\n-        (Msg'Length > 8 and then Msg (Msg'First .. Msg'First + 7) = \"medium: \")\n-        or else\n-          (Msg'Length > 6 and then Msg (Msg'First .. Msg'First + 5) = \"high: \")\n-        or else\n-          (Msg'Length > 5 and then Msg (Msg'First .. Msg'First + 4) = \"low: \");\n+      Has_Double_Exclam  := False;\n+      Has_Insertion_Line := False;\n \n       --  Loop through message looking for relevant insertion sequences\n "}]}