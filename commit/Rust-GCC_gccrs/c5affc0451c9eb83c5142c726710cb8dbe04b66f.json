{"sha": "c5affc0451c9eb83c5142c726710cb8dbe04b66f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzVhZmZjMDQ1MWM5ZWI4M2M1MTQyYzcyNjcxMGNiOGRiZTA0YjY2Zg==", "commit": {"author": {"name": "Kyrylo Tkachov", "email": "kyrylo.tkachov@arm.com", "date": "2018-01-18T09:30:58Z"}, "committer": {"name": "Kyrylo Tkachov", "email": "ktkachov@gcc.gnu.org", "date": "2018-01-18T09:30:58Z"}, "message": "[arm] PR target/65578: Fix builtin-bswap16-1.c and builtin-bswap-1.c\n\nThe builtin-bswap-1.c and builtin-bswap16-1.c are pretty annoying at the moment.\nThey force an explicit armv6 option that is a thumb1 target, so if you're testing a toolchain\nconfigured with something like --with-cpu=cortex-a15 --with-float=hard --with-mode=thumb\nyou'll get those pesky errors about Thumb1 hard-float not being implemented, even though\nthe tests don't relate to floating-point functionality at all. I *think* this is also due\nto the wrong order of dg-options and dg-require-effective-target directives that might\nend up not doing a proper effective target check.\n\nThe solution in this patch is to commonise the code and create a couple of tests for each.\nOne tests an armv6t2 target. This allows us to test an ARM or a Thumb2 target.\nThe second one sets an armv6-m target, which is a Thumb1 target.\nThe dg-add-options machinery for arm_arch_v6m knows how to add the right -mfloat-abi=soft option.\n\nWith this patch we end up testing all of ARM, Thumb1, Thumb2 codegen whereas before we only\never tried testing Thumb1, if the multilib options happened to line up just right, and would\ngive an ugly error otherwise.  Now, if the multilib options don't allow the test it should just\nappear as UNSUPPORTED.\n\n\tPR target/65578\n\t* gcc.target/arm/builtin-bswap.x: New file.\n\t* gcc.target/arm/builtin-bswap-1.c: Include the above.  Add checks\n\tand options for armv6t2.\n\t* gcc.target/arm/builtin-bswap-2.c: Include the above.  Add checks\n\tand options for Thumb1.\n\t* gcc.target/arm/builtin-bswap16.x: New file.\n\t* gcc.target/arm/builtin-bswap16-1.c: Include the above.  Add checks\n\tand options for armv6t2.\n\t* gcc.target/arm/builtin-bswap16-2.c: Include the above.  Add checks\n\tand options for Thumb1.\n\nFrom-SVN: r256840", "tree": {"sha": "c2f03f4bfa211ae80e3804c4cf56c6dfca144b34", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c2f03f4bfa211ae80e3804c4cf56c6dfca144b34"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c5affc0451c9eb83c5142c726710cb8dbe04b66f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c5affc0451c9eb83c5142c726710cb8dbe04b66f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c5affc0451c9eb83c5142c726710cb8dbe04b66f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c5affc0451c9eb83c5142c726710cb8dbe04b66f/comments", "author": {"login": "ktkachov-arm", "id": 74917949, "node_id": "MDQ6VXNlcjc0OTE3OTQ5", "avatar_url": "https://avatars.githubusercontent.com/u/74917949?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ktkachov-arm", "html_url": "https://github.com/ktkachov-arm", "followers_url": "https://api.github.com/users/ktkachov-arm/followers", "following_url": "https://api.github.com/users/ktkachov-arm/following{/other_user}", "gists_url": "https://api.github.com/users/ktkachov-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/ktkachov-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ktkachov-arm/subscriptions", "organizations_url": "https://api.github.com/users/ktkachov-arm/orgs", "repos_url": "https://api.github.com/users/ktkachov-arm/repos", "events_url": "https://api.github.com/users/ktkachov-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/ktkachov-arm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "f2f4f2442c02a8ea6ad0f01cebe0705c442dc816", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f2f4f2442c02a8ea6ad0f01cebe0705c442dc816", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f2f4f2442c02a8ea6ad0f01cebe0705c442dc816"}], "stats": {"total": 197, "additions": 116, "deletions": 81}, "files": [{"sha": "b5a83f45c08e99c7b562380458920b6502084b0a", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c5affc0451c9eb83c5142c726710cb8dbe04b66f/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c5affc0451c9eb83c5142c726710cb8dbe04b66f/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=c5affc0451c9eb83c5142c726710cb8dbe04b66f", "patch": "@@ -1,3 +1,17 @@\n+2018-01-18  Kyrylo Tkachov  <kyrylo.tkachov@arm.com>\n+\n+\tPR target/65578\n+\t* gcc.target/arm/builtin-bswap.x: New file.\n+\t* gcc.target/arm/builtin-bswap-1.c: Include the above.  Add checks\n+\tand options for armv6t2.\n+\t* gcc.target/arm/builtin-bswap-2.c: Include the above.  Add checks\n+\tand options for Thumb1.\n+\t* gcc.target/arm/builtin-bswap16.x: New file.\n+\t* gcc.target/arm/builtin-bswap16-1.c: Include the above.  Add checks\n+\tand options for armv6t2.\n+\t* gcc.target/arm/builtin-bswap16-2.c: Include the above.  Add checks\n+\tand options for Thumb1.\n+\n 2018-01-18  Christophe Lyon  <christophe.lyon@linaro.org>\n \n \t* gcc.target/arm/pr40887.c: Fix dg-options and dg-add-options"}, {"sha": "c1e7740d14d3ca4e93a71e38b12f82c19791a204", "filename": "gcc/testsuite/gcc.target/arm/builtin-bswap-1.c", "status": "modified", "additions": 6, "deletions": 69, "changes": 75, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c5affc0451c9eb83c5142c726710cb8dbe04b66f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fbuiltin-bswap-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c5affc0451c9eb83c5142c726710cb8dbe04b66f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fbuiltin-bswap-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fbuiltin-bswap-1.c?ref=c5affc0451c9eb83c5142c726710cb8dbe04b66f", "patch": "@@ -1,7 +1,9 @@\n /* { dg-do compile } */\n-/* { dg-options \"-O2\" } */\n-/* { dg-require-effective-target arm_arch_v6_ok } */\n-/* { dg-add-options arm_arch_v6 } */\n+/* { dg-require-effective-target arm_arch_v6t2_ok } */\n+/* { dg-add-options arm_arch_v6t2 } */\n+/* This test depends on if-conversion creating the conditional forms of\n+   of the instructions.  Add an -mtune option known to facilitate that.  */\n+/* { dg-additional-options \"-O2 -mtune=cortex-a53\" } */\n /* { dg-final { scan-assembler-not \"orr\\[ \\t\\]\" } } */\n /* { dg-final { scan-assembler-times \"revsh\\\\t\" 1 { target { arm_nothumb } } } }  */\n /* { dg-final { scan-assembler-times \"revshne\\\\t\" 1 { target { arm_nothumb } } } }  */\n@@ -13,69 +15,4 @@\n /* { dg-final { scan-assembler-times \"revne\\\\t\" 2 { target { arm_nothumb } } } }  */\n /* { dg-final { scan-assembler-times \"rev\\\\t\" 4 { target { ! arm_nothumb } } } }  */\n \n-/* revsh */\n-short swaps16 (short x)\n-{\n-  return __builtin_bswap16 (x);\n-}\n-\n-extern short foos16 (short);\n-\n-/* revshne */\n-short swaps16_cond (short x, int y)\n-{\n-  short z = x;\n-  if (y)\n-    z = __builtin_bswap16 (x);\n-  return foos16 (z);\n-}\n-\n-/* rev16 */\n-unsigned short swapu16 (unsigned short x)\n-{\n-  return __builtin_bswap16 (x);\n-}\n-\n-extern unsigned short foou16 (unsigned short);\n-\n-/* rev16ne */\n-unsigned short swapu16_cond (unsigned short x, int y)\n-{\n-  unsigned short z = x;\n-  if (y)\n-    z = __builtin_bswap16 (x);\n-  return foou16 (z);\n-}\n-\n-/* rev */\n-int swaps32 (int x) {\n-  return __builtin_bswap32 (x);\n-}\n-\n-extern int foos32 (int);\n-\n-/* revne */\n-int swaps32_cond (int x, int y)\n-{\n-  int z = x;\n-  if (y)\n-    z = __builtin_bswap32 (x);\n-  return foos32 (z);\n-}\n-\n-/* rev */\n-unsigned int swapu32 (unsigned int x)\n-{\n-  return __builtin_bswap32 (x);\n-}\n-\n-extern unsigned int foou32 (unsigned int);\n-\n-/* revne */\n-unsigned int swapsu2 (unsigned int x, int y)\n-{\n-  int z = x;\n-  if (y)\n-    z = __builtin_bswap32 (x);\n-  return foou32 (z);\n-}\n+#include \"builtin-bswap.x\""}, {"sha": "4ba79aa322dc72b521dbff7e5f5ac3f77767988c", "filename": "gcc/testsuite/gcc.target/arm/builtin-bswap-2.c", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c5affc0451c9eb83c5142c726710cb8dbe04b66f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fbuiltin-bswap-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c5affc0451c9eb83c5142c726710cb8dbe04b66f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fbuiltin-bswap-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fbuiltin-bswap-2.c?ref=c5affc0451c9eb83c5142c726710cb8dbe04b66f", "patch": "@@ -0,0 +1,10 @@\n+/* { dg-do compile } */\n+/* { dg-require-effective-target arm_arch_v6m_ok } */\n+/* { dg-add-options arm_arch_v6m } */\n+/* { dg-additional-options \"-O2\" } */\n+/* { dg-final { scan-assembler-not \"orr\\[ \\t\\]\" } } */\n+/* { dg-final { scan-assembler-times \"revsh\\\\t\" 2  } }  */\n+/* { dg-final { scan-assembler-times \"rev16\\\\t\" 2 } }  */\n+/* { dg-final { scan-assembler-times \"rev\\\\t\" 4 } }  */\n+\n+#include \"builtin-bswap.x\""}, {"sha": "c96dbe6329c4dc648fd0bcc972ad494c7d6dc6e5", "filename": "gcc/testsuite/gcc.target/arm/builtin-bswap.x", "status": "added", "additions": 66, "deletions": 0, "changes": 66, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c5affc0451c9eb83c5142c726710cb8dbe04b66f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fbuiltin-bswap.x", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c5affc0451c9eb83c5142c726710cb8dbe04b66f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fbuiltin-bswap.x", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fbuiltin-bswap.x?ref=c5affc0451c9eb83c5142c726710cb8dbe04b66f", "patch": "@@ -0,0 +1,66 @@\n+/* revsh */\n+short swaps16 (short x)\n+{\n+  return __builtin_bswap16 (x);\n+}\n+\n+extern short foos16 (short);\n+\n+/* revshne */\n+short swaps16_cond (short x, int y)\n+{\n+  short z = x;\n+  if (y)\n+    z = __builtin_bswap16 (x);\n+  return foos16 (z);\n+}\n+\n+/* rev16 */\n+unsigned short swapu16 (unsigned short x)\n+{\n+  return __builtin_bswap16 (x);\n+}\n+\n+extern unsigned short foou16 (unsigned short);\n+\n+/* rev16ne */\n+unsigned short swapu16_cond (unsigned short x, int y)\n+{\n+  unsigned short z = x;\n+  if (y)\n+    z = __builtin_bswap16 (x);\n+  return foou16 (z);\n+}\n+\n+/* rev */\n+int swaps32 (int x) {\n+  return __builtin_bswap32 (x);\n+}\n+\n+extern int foos32 (int);\n+\n+/* revne */\n+int swaps32_cond (int x, int y)\n+{\n+  int z = x;\n+  if (y)\n+    z = __builtin_bswap32 (x);\n+  return foos32 (z);\n+}\n+\n+/* rev */\n+unsigned int swapu32 (unsigned int x)\n+{\n+  return __builtin_bswap32 (x);\n+}\n+\n+extern unsigned int foou32 (unsigned int);\n+\n+/* revne */\n+unsigned int swapsu2 (unsigned int x, int y)\n+{\n+  int z = x;\n+  if (y)\n+    z = __builtin_bswap32 (x);\n+  return foou32 (z);\n+}"}, {"sha": "e08a38abcf27807a29bd1eca1844bb7e9a369dd7", "filename": "gcc/testsuite/gcc.target/arm/builtin-bswap16-1.c", "status": "modified", "additions": 4, "deletions": 12, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c5affc0451c9eb83c5142c726710cb8dbe04b66f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fbuiltin-bswap16-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c5affc0451c9eb83c5142c726710cb8dbe04b66f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fbuiltin-bswap16-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fbuiltin-bswap16-1.c?ref=c5affc0451c9eb83c5142c726710cb8dbe04b66f", "patch": "@@ -1,15 +1,7 @@\n /* { dg-do compile } */\n-/* { dg-options \"-O2\" } */\n-/* { dg-require-effective-target arm_arch_v6_ok } */\n-/* { dg-add-options arm_arch_v6 } */\n+/* { dg-require-effective-target arm_arch_v6t2_ok } */\n+/* { dg-add-options arm_arch_v6t2 } */\n+/* { dg-additional-options \"-O2\" } */\n /* { dg-final { scan-assembler-not \"orr\\[ \\t\\]\" } } */\n \n-unsigned short swapu16_1 (unsigned short x)\n-{\n-  return (x << 8) | (x >> 8);\n-}\n-\n-unsigned short swapu16_2 (unsigned short x)\n-{\n-  return (x >> 8) | (x << 8);\n-}\n+#include \"builtin-bswap16.x\""}, {"sha": "6b709a2887de45ded607d8eb076465e0ef5958de", "filename": "gcc/testsuite/gcc.target/arm/builtin-bswap16-2.c", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c5affc0451c9eb83c5142c726710cb8dbe04b66f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fbuiltin-bswap16-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c5affc0451c9eb83c5142c726710cb8dbe04b66f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fbuiltin-bswap16-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fbuiltin-bswap16-2.c?ref=c5affc0451c9eb83c5142c726710cb8dbe04b66f", "patch": "@@ -0,0 +1,7 @@\n+/* { dg-do compile } */\n+/* { dg-require-effective-target arm_arch_v6m_ok } */\n+/* { dg-add-options arm_arch_v6m } */\n+/* { dg-additional-options \"-O2\" } */\n+/* { dg-final { scan-assembler-not \"orr\\[ \\t\\]\" } } */\n+\n+#include \"builtin-bswap16.x\""}, {"sha": "1e7f41edf013e353944f0a4879a1248c8a8b2f11", "filename": "gcc/testsuite/gcc.target/arm/builtin-bswap16.x", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c5affc0451c9eb83c5142c726710cb8dbe04b66f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fbuiltin-bswap16.x", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c5affc0451c9eb83c5142c726710cb8dbe04b66f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fbuiltin-bswap16.x", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fbuiltin-bswap16.x?ref=c5affc0451c9eb83c5142c726710cb8dbe04b66f", "patch": "@@ -0,0 +1,9 @@\n+unsigned short swapu16_1 (unsigned short x)\n+{\n+  return (x << 8) | (x >> 8);\n+}\n+\n+unsigned short swapu16_2 (unsigned short x)\n+{\n+  return (x >> 8) | (x << 8);\n+}"}]}