{"sha": "daf469e2bab0c9101b50c56ac41acffd31cbf9e9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZGFmNDY5ZTJiYWIwYzkxMDFiNTBjNTZhYzQxYWNmZmQzMWNiZjllOQ==", "commit": {"author": {"name": "Warren Levy", "email": "warrenl@cygnus.com", "date": "1999-06-10T23:53:37Z"}, "committer": {"name": "Warren Levy", "email": "warrenl@gcc.gnu.org", "date": "1999-06-10T23:53:37Z"}, "message": "DecimalFormat.java: Throw IllegalArgumentException throughout rather than ParseException.\n\n\t* java/text/DecimalFormat.java: Throw IllegalArgumentException\n\tthroughout rather than ParseException.\n\nFrom-SVN: r27481", "tree": {"sha": "67a6bfebfa876126f866c00575106182d565eb1d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/67a6bfebfa876126f866c00575106182d565eb1d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/daf469e2bab0c9101b50c56ac41acffd31cbf9e9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/daf469e2bab0c9101b50c56ac41acffd31cbf9e9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/daf469e2bab0c9101b50c56ac41acffd31cbf9e9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/daf469e2bab0c9101b50c56ac41acffd31cbf9e9/comments", "author": null, "committer": null, "parents": [{"sha": "8c84eeeda1e932abd906cc66306a2379582b441e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8c84eeeda1e932abd906cc66306a2379582b441e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8c84eeeda1e932abd906cc66306a2379582b441e"}], "stats": {"total": 61, "additions": 33, "deletions": 28}, "files": [{"sha": "b7b295df09142cb332f718f9d0899037036950ee", "filename": "libjava/ChangeLog", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/daf469e2bab0c9101b50c56ac41acffd31cbf9e9/libjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/daf469e2bab0c9101b50c56ac41acffd31cbf9e9/libjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FChangeLog?ref=daf469e2bab0c9101b50c56ac41acffd31cbf9e9", "patch": "@@ -7,6 +7,8 @@\n \tIOException.\n \t* java/text/Collator.java (CANONICAL_DECOMPOSITION): Fixed typo\n \tin static field name.\n+\t* java/text/DecimalFormat.java: Throw IllegalArgumentException\n+\tthroughout rather than ParseException.\n \n 1999-06-09  Bryce McKinlay <bryce@albatross.co.nz>\n "}, {"sha": "12a46f6e6e17a0948be4d417cbeb0a2511e37cd5", "filename": "libjava/java/text/DecimalFormat.java", "status": "modified", "additions": 31, "deletions": 28, "changes": 59, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/daf469e2bab0c9101b50c56ac41acffd31cbf9e9/libjava%2Fjava%2Ftext%2FDecimalFormat.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/daf469e2bab0c9101b50c56ac41acffd31cbf9e9/libjava%2Fjava%2Ftext%2FDecimalFormat.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Ftext%2FDecimalFormat.java?ref=daf469e2bab0c9101b50c56ac41acffd31cbf9e9", "patch": "@@ -32,7 +32,6 @@ public class DecimalFormat extends NumberFormat\n   private final int scanFix (String pattern, int index, StringBuffer buf,\n \t\t\t     String patChars, DecimalFormatSymbols syms,\n \t\t\t     boolean is_suffix)\n-    throws ParseException\n     {\n       int len = pattern.length();\n       buf.setLength(0);\n@@ -65,15 +64,17 @@ else if (c == '\\u00a4')\n \t  else if (is_suffix && c == syms.getPercent())\n \t    {\n \t      if (multiplierSet)\n-\t\tthrow new ParseException (\"multiplier already set\", index);\n+\t\tthrow new IllegalArgumentException (\"multiplier already set \" +\n+\t\t\t\t\t\t    \"- index: \" + index);\n \t      multiplierSet = true;\n \t      multiplier = 100;\n \t      buf.append(c);\n \t    }\n \t  else if (is_suffix && c == syms.getPerMill())\n \t    {\n \t      if (multiplierSet)\n-\t\tthrow new ParseException (\"multiplier already set\", index);\n+\t\tthrow new IllegalArgumentException (\"multiplier already set \" +\n+\t\t\t\t\t\t    \"- index: \" + index);\n \t      multiplierSet = true;\n \t      multiplier = 1000;\n \t      buf.append(c);\n@@ -95,7 +96,6 @@ else if (patChars.indexOf(c) != -1)\n   private final int scanFormat (String pattern, int index,\n \t\t\t\tString patChars, DecimalFormatSymbols syms,\n \t\t\t\tboolean is_positive)\n-    throws ParseException\n     {\n       int max = pattern.length();\n \n@@ -113,7 +113,8 @@ private final int scanFormat (String pattern, int index,\n \t  if (c == syms.getDigit())\n \t    {\n \t      if (zeroCount > 0)\n-\t\tthrow new ParseException (\"digit mark following zero\", index);\n+\t\tthrow new IllegalArgumentException (\"digit mark following \" +\n+\t\t\t\t\t\t    \"zero - index: \" + index);\n \t      ++countSinceGroup;\n \t    }\n \t  else if (c == syms.getZeroDigit())\n@@ -163,8 +164,8 @@ else if (c == syms.getGroupingSeparator())\n \t      if (c == syms.getZeroDigit())\n \t\t{\n \t\t  if (hashCount > 0)\n-\t\t    throw new ParseException (\"zero mark following digit\",\n-\t\t\t\t\t      index);\n+\t\t    throw new IllegalArgumentException (\"zero mark \" +\n+\t\t\t\t\t\"following digit - index: \" + index);\n \t\t  ++zeroCount;\n \t\t}\n \t      else if (c == syms.getDigit())\n@@ -174,8 +175,8 @@ else if (c == syms.getDigit())\n \t      else if (c != syms.getExponential()\n \t\t       && c != syms.getPatternSeparator()\n \t\t       && patChars.indexOf(c) != -1)\n-\t\tthrow new ParseException (\"unexpected special character\",\n-\t\t\t\t\t  index);\n+\t\tthrow new IllegalArgumentException (\"unexpected special \" +\n+\t\t\t\t\t\t\"character - index: \" + index);\n \t      else\n \t\tbreak;\n \n@@ -208,12 +209,14 @@ else if (c == syms.getDigit())\n \t\t{\n \t\t  if (zeroCount > 0)\n \t\t    throw new\n-\t\t      ParseException (\"digit mark following zero in exponent\",\n-\t\t\t\t      index);\n+\t\t      IllegalArgumentException (\"digit mark following zero \" +\n+\t\t\t\t\t\t\"in exponent - index: \" +\n+\t\t\t\t\t\tindex);\n \t\t}\n \t      else if (patChars.indexOf(c) != -1)\n-\t\tthrow new ParseException (\"unexpected special character\",\n-\t\t\t\t\t  index);\n+\t\tthrow new IllegalArgumentException (\"unexpected special \" +\n+\t\t\t\t\t\t    \"character - index: \" +\n+\t\t\t\t\t\t    index);\n \t      else\n \t\tbreak;\n \n@@ -253,7 +256,6 @@ private final String patternChars (DecimalFormatSymbols syms)\n \n   private final void applyPatternWithSymbols (String pattern,\n \t\t\t\t\t      DecimalFormatSymbols syms)\n-    throws ParseException\n     {\n       // Initialize to the state the parser expects.\n       negativePrefix = \"\";\n@@ -292,7 +294,8 @@ private final void applyPatternWithSymbols (String pattern,\n       else\n \t{\n \t  if (pattern.charAt(index) != syms.getPatternSeparator())\n-\t    throw new ParseException (\"separator character expected\", index);\n+\t    throw new IllegalArgumentException (\"separator character \" +\n+\t\t\t\t\t\t\"expected - index: \" + index);\n \n \t  index = scanFix (pattern, index + 1, buf, patChars, syms, false);\n \t  negativePrefix = buf.toString();\n@@ -305,17 +308,26 @@ private final void applyPatternWithSymbols (String pattern,\n \t  negativeSuffix = buf.toString();\n \n \t  if (index != pattern.length())\n-\t    throw new ParseException (\"end of pattern expected\", index);\n+\t    throw new IllegalArgumentException (\"end of pattern expected \" +\n+\t\t\t\t\t\t\"- index: \" + index);\n \t}\n     }\n \n-  public void applyLocalizedPattern (String pattern) throws ParseException\n+  public void applyLocalizedPattern (String pattern)\n     {\n+      // JCL p. 638 claims this throws a ParseException but p. 629\n+      // contradicts this.  Empirical tests with patterns of \"0,###.0\"\n+      // and \"#.#.#\" corroborate the p. 629 statement that an\n+      // IllegalArgumentException is thrown.\n       applyPatternWithSymbols (pattern, symbols);\n     }\n \n-  public void applyPattern (String pattern) throws ParseException\n+  public void applyPattern (String pattern)\n     {\n+      // JCL p. 638 claims this throws a ParseException but p. 629\n+      // contradicts this.  Empirical tests with patterns of \"0,###.0\"\n+      // and \"#.#.#\" corroborate the p. 629 statement that an\n+      // IllegalArgumentException is thrown.\n       applyPatternWithSymbols (pattern, nonLocalizedSymbols);\n     }\n \n@@ -351,16 +363,7 @@ public DecimalFormat (String pattern)\n   public DecimalFormat (String pattern, DecimalFormatSymbols symbols)\n     {\n       this.symbols = symbols;\n-      // The docs imply that the constructor turns a ParseException\n-      // into an IllegalArgumentException.\n-      try\n-\t{\n-\t  applyPattern (pattern);\n-\t}\n-      catch (ParseException x)\n-\t{\n-\t  throw new IllegalArgumentException (x.getMessage());\n-\t}\n+      applyPattern (pattern);\n     }\n \n   private final boolean equals (String s1, String s2)"}]}