{"sha": "ed178abb75b2e01875075bbdcf7689c5047951fc", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWQxNzhhYmI3NWIyZTAxODc1MDc1YmJkY2Y3Njg5YzUwNDc5NTFmYw==", "commit": {"author": {"name": "Tom Tromey", "email": "tromey@redhat.com", "date": "2001-12-19T19:38:25Z"}, "committer": {"name": "Tom Tromey", "email": "tromey@gcc.gnu.org", "date": "2001-12-19T19:38:25Z"}, "message": "FlowLayout.java (FlowLayout(), [...]): Set gaps to 5.\n\n\t* java/awt/FlowLayout.java (FlowLayout(), FlowLayout(int)): Set\n\tgaps to 5.\n\t(FlowLayout(int,int,int)): Use methods to set fields.\n\t(getSize): Skip invisible components.\n\t(layoutContainer): Skip invisible components.\n\nFrom-SVN: r48182", "tree": {"sha": "35bcde5ff122f6496551a769cae5c3b7763f0856", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/35bcde5ff122f6496551a769cae5c3b7763f0856"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ed178abb75b2e01875075bbdcf7689c5047951fc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ed178abb75b2e01875075bbdcf7689c5047951fc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ed178abb75b2e01875075bbdcf7689c5047951fc", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ed178abb75b2e01875075bbdcf7689c5047951fc/comments", "author": null, "committer": null, "parents": [{"sha": "24ea750e3d5ec1da1d0d3b8c9d159d77a2fc4ce0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/24ea750e3d5ec1da1d0d3b8c9d159d77a2fc4ce0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/24ea750e3d5ec1da1d0d3b8c9d159d77a2fc4ce0"}], "stats": {"total": 68, "additions": 42, "deletions": 26}, "files": [{"sha": "3513b273f6e63215d78c868c2165300a8710cc66", "filename": "libjava/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ed178abb75b2e01875075bbdcf7689c5047951fc/libjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ed178abb75b2e01875075bbdcf7689c5047951fc/libjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FChangeLog?ref=ed178abb75b2e01875075bbdcf7689c5047951fc", "patch": "@@ -1,3 +1,11 @@\n+2001-12-19  Tom Tromey  <tromey@redhat.com>\n+\n+\t* java/awt/FlowLayout.java (FlowLayout(), FlowLayout(int)): Set\n+\tgaps to 5.\n+\t(FlowLayout(int,int,int)): Use methods to set fields.\n+\t(getSize): Skip invisible components.\n+\t(layoutContainer): Skip invisible components.\n+\n 2001-12-19  Bryce McKinlay  <bryce@waitaki.otago.ac.nz>\n \n \t* include/jvm.h (_Jv_BuildGCDescr): Declare unconditionally."}, {"sha": "d33059bf25268981a29a977c367330126671c3f4", "filename": "libjava/java/awt/FlowLayout.java", "status": "modified", "additions": 34, "deletions": 26, "changes": 60, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ed178abb75b2e01875075bbdcf7689c5047951fc/libjava%2Fjava%2Fawt%2FFlowLayout.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ed178abb75b2e01875075bbdcf7689c5047951fc/libjava%2Fjava%2Fawt%2FFlowLayout.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fawt%2FFlowLayout.java?ref=ed178abb75b2e01875075bbdcf7689c5047951fc", "patch": "@@ -1,6 +1,6 @@\n-// GridLayout.java - Grid-based layout engine\n+// FlowLayout.java - Grid-based layout engine\n \n-/* Copyright (C) 2000  Free Software Foundation\n+/* Copyright (C) 2000, 2001  Free Software Foundation\n \n    This file is part of libgcj.\n \n@@ -61,20 +61,20 @@ public int getVgap ()\n   }\n \n   /** Create a new FlowLayout with center alignment.\n-   * Both gaps are set to 0.\n+   * Both gaps are set to 5.\n    */\n   public FlowLayout ()\n   {\n-    this (CENTER, 0, 0);\n+    this (CENTER, 5, 5);\n   }\n \n   /** Create a new FlowLayout with the alignment.\n-   * columns.  Both gaps are set to 0.\n+   * columns.  Both gaps are set to 5.\n    * @param align Alignment\n    */\n   public FlowLayout (int align)\n   {\n-    this (align, 0, 0);\n+    this (align, 5, 5);\n   }\n \n   /** Create a new FlowLayout with the specified alignment and gaps.\n@@ -85,16 +85,11 @@ public FlowLayout (int align)\n    */\n   public FlowLayout (int align, int hgap, int vgap)\n   {\n-    if (hgap < 0)\n-      throw new IllegalArgumentException (\"horizontal gap must be nonnegative\");\n-    if (vgap < 0)\n-      throw new IllegalArgumentException (\"vertical gap must be nonnegative\");\n-    if (align != LEFT && align != RIGHT && align != CENTER\n-\t&& align != LEADING && align != TRAILING)\n-      throw new IllegalArgumentException (\"invalid align: \" + align);\n-    this.align = align;\n-    this.hgap = hgap;\n-    this.vgap = vgap;\n+    // Use methods to set fields so that we can have all the checking\n+    // in one place.\n+    setVgap (vgap);\n+    setHgap (hgap);\n+    setAlignment (align);\n   }\n \n   /** Lay out the container's components based on current settings.\n@@ -120,22 +115,29 @@ public void layoutContainer (Container parent)\n \tint new_w = ins.left + hgap + ins.right;\n \tint new_h = 0;\n \tint j;\n-\tfor (j = i; j < num; ++j)\n+\tboolean found_one = false;\n+\tfor (j = i; j < num && ! found_one; ++j)\n \t  {\n \t    // FIXME: this is very inefficient.\n \t    Dimension c = comps[i].getPreferredSize ();\n+\n+\t    // Skip invisible items.\n+\t    if (! comps[i].visible)\n+\t      continue;\n+\n \t    int next_w = new_w + hgap + c.width;\n-\t    if (next_w > d.width)\n+\t    if (next_w <= d.width || ! found_one)\n+\t      {\n+\t\tnew_w = next_w;\n+\t\tnew_h = Math.max (new_h, c.height);\n+\t\tfound_one = true;\n+\t      }\n+\t    else\n \t      {\n-\t\t// We must start a new row.\n+\t\t// Must start a new row, and we already found an item\n \t\tbreak;\n \t      }\n-\t    new_w = next_w;\n-\t    new_h = Math.max (new_h, c.height);\n \t  }\n-\t// We always need at least one item.\n-\tif (j == i)\n-\t  ++j;\n \n \t// Set the location of each component for this row.\n \tint x;\n@@ -157,8 +159,11 @@ else if (myalign == CENTER)\n \t  {\n \t    // FIXME: this is very inefficient.\n \t    Dimension c = comps[i].getPreferredSize ();\n-\t    comps[i].setLocation (x, y);\n-\t    x += c.width + vgap;\n+\t    if (comps[i].visible)\n+\t      {\n+\t\tcomps[i].setLocation (x, y);\n+\t\tx += c.width + vgap;\n+\t      }\n \t  }\n \n \t// Advance to next row.\n@@ -241,6 +246,9 @@ private Dimension getSize (Container parent, boolean is_min)\n     h = 0;\n     for (int i = 0; i < num; ++i)\n       {\n+\tif (! comps[i].visible)\n+\t  continue;\n+\n \t// FIXME: can we just directly read the fields in Component?\n \t// Or will that not work with subclassing?\n \tDimension d;"}]}