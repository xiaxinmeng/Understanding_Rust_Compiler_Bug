{"sha": "2e65f38f1bf1f04c530bfeb6b543f084564eec3d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MmU2NWYzOGYxYmYxZjA0YzUzMGJmZWI2YjU0M2YwODQ1NjRlZWMzZA==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@redhat.com", "date": "2011-11-30T16:10:24Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2011-11-30T16:10:24Z"}, "message": "sparc: Add -mmemory-model command-line option.\n\n\t* config/sparc/sparc-opts.h (enum sparc_memory_model_type): New.\n\t* config/sparc/sparc.opt (mmemory-model=): New option.\n\t* doc/invoke.texi (Sparc Options): Document it.\n\t* config/sparc/sparc.c (sparc_option_override): Provide default\n\tfor sparc_memory_model.\n\t(sparc_emit_membar_for_model): Omit barrier combinations that are\n\timplied by the memory model.\n\nFrom-SVN: r181853", "tree": {"sha": "f7ebc47322ba3389b5583ce189866e18f3530ba4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f7ebc47322ba3389b5583ce189866e18f3530ba4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2e65f38f1bf1f04c530bfeb6b543f084564eec3d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2e65f38f1bf1f04c530bfeb6b543f084564eec3d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2e65f38f1bf1f04c530bfeb6b543f084564eec3d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2e65f38f1bf1f04c530bfeb6b543f084564eec3d/comments", "author": null, "committer": null, "parents": [{"sha": "99ee7887c639daad4ae2a9440eef9bab15da58c6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/99ee7887c639daad4ae2a9440eef9bab15da58c6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/99ee7887c639daad4ae2a9440eef9bab15da58c6"}], "stats": {"total": 165, "additions": 145, "deletions": 20}, "files": [{"sha": "1e5936ed6a4531df6bfed47b08c6154166657a5a", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2e65f38f1bf1f04c530bfeb6b543f084564eec3d/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2e65f38f1bf1f04c530bfeb6b543f084564eec3d/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=2e65f38f1bf1f04c530bfeb6b543f084564eec3d", "patch": "@@ -1,3 +1,13 @@\n+2011-11-30  Richard Henderson  <rth@redhat.com>\n+\n+\t* config/sparc/sparc-opts.h (enum sparc_memory_model_type): New.\n+\t* config/sparc/sparc.opt (mmemory-model=): New option.\n+\t* doc/invoke.texi (Sparc Options): Document it.\n+\t* config/sparc/sparc.c (sparc_option_override): Provide default\n+\tfor sparc_memory_model.\n+\t(sparc_emit_membar_for_model): Omit barrier combinations that are\n+\timplied by the memory model.\n+\n 2011-11-30  Richard Henderson  <rth@redhat.com>\n \n \t* config/sparc/sync.md (I124MODE): New mode iterator."}, {"sha": "7682eb9d452d2f60aa5ea67bab3c964a3ab6782c", "filename": "gcc/config/sparc/sparc-opts.h", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2e65f38f1bf1f04c530bfeb6b543f084564eec3d/gcc%2Fconfig%2Fsparc%2Fsparc-opts.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2e65f38f1bf1f04c530bfeb6b543f084564eec3d/gcc%2Fconfig%2Fsparc%2Fsparc-opts.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsparc-opts.h?ref=2e65f38f1bf1f04c530bfeb6b543f084564eec3d", "patch": "@@ -47,4 +47,14 @@ enum processor_type {\n   PROCESSOR_NATIVE\n };\n \n+/* Sparc system memory model.  See Appendix D in the Sparc V9 manual\n+   for formal specification, and Appendix J for more discussion.  */\n+enum sparc_memory_model_type {\n+  SMM_DEFAULT,\t/* Uninitialized.  */\n+  SMM_RMO,\t/* Relaxed Memory Order.  */\n+  SMM_PSO,\t/* Partial Store Order.  */\n+  SMM_TSO,\t/* Total Store Order.  */\n+  SMM_SC\t/* Sequential Consistency.  */\n+};\n+\n #endif"}, {"sha": "713db26ee0bac87dd5f24b8f28066dd0c36e5d49", "filename": "gcc/config/sparc/sparc.c", "status": "modified", "additions": 48, "deletions": 1, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2e65f38f1bf1f04c530bfeb6b543f084564eec3d/gcc%2Fconfig%2Fsparc%2Fsparc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2e65f38f1bf1f04c530bfeb6b543f084564eec3d/gcc%2Fconfig%2Fsparc%2Fsparc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsparc.c?ref=2e65f38f1bf1f04c530bfeb6b543f084564eec3d", "patch": "@@ -1160,6 +1160,17 @@ sparc_option_override (void)\n       gcc_unreachable ();\n     };\n \n+  if (sparc_memory_model == SMM_DEFAULT)\n+    {\n+      /* Choose the most relaxed model for the processor.  */\n+      if (TARGET_V9)\n+\tsparc_memory_model = SMM_RMO;\n+      else if (TARGET_V8)\n+\tsparc_memory_model = SMM_PSO;\n+      else\n+\tsparc_memory_model = SMM_SC;\n+    }\n+\n #ifdef TARGET_DEFAULT_LONG_DOUBLE_128\n   if (!(target_flags_explicit & MASK_LONG_DOUBLE_128))\n     target_flags |= MASK_LONG_DOUBLE_128;\n@@ -10863,7 +10874,40 @@ sparc_emit_membar_for_model (enum memmodel model,\n   const int LoadStore = 4;\n   const int StoreStore = 8;\n \n-  int mm = 0;\n+  int mm = 0, implied = 0;\n+\n+  switch (sparc_memory_model)\n+    {\n+    case SMM_SC:\n+      /* Sequential Consistency.  All memory transactions are immediately\n+\t visible in sequential execution order.  No barriers needed.  */\n+      implied = LoadLoad | StoreLoad | LoadStore | StoreStore;\n+      break;\n+\n+    case SMM_TSO:\n+      /* Total Store Ordering: all memory transactions with store semantics\n+\t are followed by an implied StoreStore.  */\n+      implied |= StoreStore;\n+      /* FALLTHRU */\n+\n+    case SMM_PSO:\n+      /* Partial Store Ordering: all memory transactions with load semantics\n+\t are followed by an implied LoadLoad | LoadStore.  */\n+      implied |= LoadLoad | LoadStore;\n+\n+      /* If we're not looking for a raw barrer (before+after), then atomic\n+\t operations get the benefit of being both load and store.  */\n+      if (load_store == 3 && before_after == 2)\n+\timplied |= StoreLoad | StoreStore;\n+      /* FALLTHRU */\n+\n+    case SMM_RMO:\n+      /* Relaxed Memory Ordering: no implicit bits.  */\n+      break;\n+\n+    default:\n+      gcc_unreachable ();\n+    }\n \n   if (before_after & 1)\n     {\n@@ -10890,6 +10934,9 @@ sparc_emit_membar_for_model (enum memmodel model,\n \t}\n     }\n \n+  /* Remove the bits implied by the system memory model.  */\n+  mm &= ~implied;\n+\n   /* For raw barriers (before+after), always emit a barrier.\n      This will become a compile-time barrier if needed.  */\n   if (mm || before_after == 3)"}, {"sha": "01f3d43b2ca2737c7aea4eb27df1993a05efa416", "filename": "gcc/config/sparc/sparc.opt", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2e65f38f1bf1f04c530bfeb6b543f084564eec3d/gcc%2Fconfig%2Fsparc%2Fsparc.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2e65f38f1bf1f04c530bfeb6b543f084564eec3d/gcc%2Fconfig%2Fsparc%2Fsparc.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsparc.opt?ref=2e65f38f1bf1f04c530bfeb6b543f084564eec3d", "patch": "@@ -215,3 +215,25 @@ Mask(V9)\n Mask(DEPRECATED_V8_INSNS)\n ;; Generate code that uses the V8 instructions deprecated\n ;; in the V9 architecture.\n+\n+mmemory-model=\n+Target RejectNegative Joined Var(sparc_memory_model) Enum(sparc_memory_model) Init(SMM_DEFAULT)\n+Specify the memory model in effect for the program.\n+\n+Enum\n+Name(sparc_memory_model) Type(enum sparc_memory_model_type)\n+\n+EnumValue\n+Enum(sparc_memory_model) String(default) Value(SMM_DEFAULT)\n+\n+EnumValue\n+Enum(sparc_memory_model) String(rmo) Value(SMM_RMO)\n+\n+EnumValue\n+Enum(sparc_memory_model) String(pso) Value(SMM_PSO)\n+\n+EnumValue\n+Enum(sparc_memory_model) String(tso) Value(SMM_TSO)\n+\n+EnumValue\n+Enum(sparc_memory_model) String(sc) Value(SMM_SC)"}, {"sha": "a4a135c9cbd25ae52e0b7784687c267100e46aa6", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 55, "deletions": 19, "changes": 74, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2e65f38f1bf1f04c530bfeb6b543f084564eec3d/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2e65f38f1bf1f04c530bfeb6b543f084564eec3d/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=2e65f38f1bf1f04c530bfeb6b543f084564eec3d", "patch": "@@ -887,6 +887,7 @@ See RS/6000 and PowerPC Options.\n @gccoptlist{-mcpu=@var{cpu-type} @gol\n -mtune=@var{cpu-type} @gol\n -mcmodel=@var{code-model} @gol\n+-mmemory-model=@var{mem-model} @gol\n -m32  -m64  -mapp-regs  -mno-app-regs @gol\n -mfaster-structs  -mno-faster-structs  -mflat  -mno-flat @gol\n -mfpu  -mno-fpu  -mhard-float  -msoft-float @gol\n@@ -17838,13 +17839,22 @@ an architecture and not an implementation.  These are @samp{v7}, @samp{v8},\n Here is a list of each supported architecture and their supported\n implementations.\n \n-@smallexample\n-    v7:             cypress\n-    v8:             supersparc, hypersparc, leon\n-    sparclite:      f930, f934, sparclite86x\n-    sparclet:       tsc701\n-    v9:             ultrasparc, ultrasparc3, niagara, niagara2, niagara3, niagara4\n-@end smallexample\n+@table @asis\n+@item v7\n+cypress\n+\n+@item v8\n+supersparc, hypersparc, leon\n+\n+@item sparclite\n+f930, f934, sparclite86x\n+\n+@item sparclet\n+tsc701\n+\n+@item v9\n+ultrasparc, ultrasparc3, niagara, niagara2, niagara3, niagara4\n+@end table\n \n By default (unless configured otherwise), GCC generates code for the V7\n variant of the SPARC architecture.  With @option{-mcpu=cypress}, the compiler\n@@ -17979,33 +17989,59 @@ The 32-bit environment sets int, long and pointer to 32 bits.\n The 64-bit environment sets int to 32 bits and long and pointer\n to 64 bits.\n \n-@item -mcmodel=medlow\n-@opindex mcmodel=medlow\n-Generate code for the Medium/Low code model: 64-bit addresses, programs\n+@item -mcmodel=@var{which}\n+@opindex mcmodel\n+Set the code model to one of\n+\n+@table @samp\n+@item medlow\n+The Medium/Low code model: 64-bit addresses, programs\n must be linked in the low 32 bits of memory.  Programs can be statically\n or dynamically linked.\n \n-@item -mcmodel=medmid\n-@opindex mcmodel=medmid\n-Generate code for the Medium/Middle code model: 64-bit addresses, programs\n+@item medmid\n+The Medium/Middle code model: 64-bit addresses, programs\n must be linked in the low 44 bits of memory, the text and data segments must\n be less than 2GB in size and the data segment must be located within 2GB of\n the text segment.\n \n-@item -mcmodel=medany\n-@opindex mcmodel=medany\n-Generate code for the Medium/Anywhere code model: 64-bit addresses, programs\n+@item medany\n+The Medium/Anywhere code model: 64-bit addresses, programs\n may be linked anywhere in memory, the text and data segments must be less\n than 2GB in size and the data segment must be located within 2GB of the\n text segment.\n \n-@item -mcmodel=embmedany\n-@opindex mcmodel=embmedany\n-Generate code for the Medium/Anywhere code model for embedded systems:\n+@item embmedany\n+The Medium/Anywhere code model for embedded systems:\n 64-bit addresses, the text and data segments must be less than 2GB in\n size, both starting anywhere in memory (determined at link time).  The\n global register %g4 points to the base of the data segment.  Programs\n are statically linked and PIC is not supported.\n+@end table\n+\n+@item -mmemory-model=@var{mem-model}\n+@opindex mmemory-model\n+Set the memory model in force on the processor to one of\n+\n+@table @samp\n+@item default\n+The default memory model for the processor and operating system.\n+\n+@item rmo\n+Relaxed Memory Order\n+\n+@item pso\n+Partial Store Order\n+\n+@item tso\n+Total Store Order\n+\n+@item sc\n+Sequential Consistency\n+@end table\n+\n+These memory models are formally defined in Appendix D of the Sparc V9\n+architecture manual, as set in the processor's @code{PSTATE.MM} field.\n \n @item -mstack-bias\n @itemx -mno-stack-bias"}]}