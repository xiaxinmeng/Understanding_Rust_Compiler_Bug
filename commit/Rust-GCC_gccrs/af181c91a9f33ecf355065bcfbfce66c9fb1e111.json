{"sha": "af181c91a9f33ecf355065bcfbfce66c9fb1e111", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWYxODFjOTFhOWYzM2VjZjM1NTA2NWJjZmJmY2U2NmM5ZmIxZTExMQ==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2017-03-22T15:58:35Z"}, "committer": {"name": "Jonathan Wakely", "email": "redi@gcc.gnu.org", "date": "2017-03-22T15:58:35Z"}, "message": "Add deduction guides for C++17 (P0433R2, partial)\n\n\t* include/bits/shared_ptr.h (shared_ptr, weak_ptr): Add deduction\n\tguides for C++17.\n\t* include/bits/std_function.h (function): Likewise.\n\t* include/bits/stl_pair.h (pair): Likewise.\n\t* include/debug/array (__gnu_debug::array): Likewise.\n\t* include/std/array (array): Likewise.\n\t* include/std/functional (make_default_searcher)\n\t(make_boyer_moore_searcher, make_boyer_moore_horspool_searcher):\n\tRemove generator functions.\n\t* include/std/tuple (tuple): Add deduction guides.\n\t* include/std/valarray (valarray): Likewise.\n\t* testsuite/20_util/function_objects/searchers.cc: Adjust to use\n\tclass template argument deduction instead of generator functions.\n\t* testsuite/20_util/function/cons/deduction.cc: New test.\n\t* testsuite/20_util/optional/cons/deduction_guide.cc: Rename to ...\n\t* testsuite/20_util/optional/cons/deduction.cc: ... here.\n\t* testsuite/20_util/pair/cons/deduction.cc: New test.\n\t* testsuite/20_util/shared_ptr/cons/deduction.cc: New test.\n\t* testsuite/20_util/tuple/cons/deduction.cc: New test.\n\t* testsuite/20_util/tuple/element_access/get_neg.cc: Adjust dg-error.\n\t* testsuite/20_util/unique_ptr/cons/deduction_neg.cc: New test.\n\t* testsuite/20_util/weak_ptr/cons/deduction.cc: New test.\n\t* testsuite/23_containers/array/cons/deduction.cc: New test.\n\t* testsuite/23_containers/array/cons/deduction_neg.cc: New test.\n\t* testsuite/23_containers/array/tuple_interface/get_debug_neg.cc:\n\tAdjust dg-error.\n\t* testsuite/23_containers/array/tuple_interface/get_neg.cc: Likewise.\n\t* testsuite/23_containers/array/tuple_interface/tuple_element_neg.cc:\n\tLikewise.\n\t* testsuite/26_numerics/valarray/deduction.cc: New test.\n\t* testsuite/30_threads/lock_guard/cons/deduction.cc: New test.\n\t* testsuite/30_threads/scoped_lock/cons/deduction.cc: New test.\n\t* testsuite/30_threads/unique_lock/cons/deduction.cc: New test.\n\nFrom-SVN: r246389", "tree": {"sha": "f68fdc2fff16e5983b80b5ad47b59ae9f3639c9c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f68fdc2fff16e5983b80b5ad47b59ae9f3639c9c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/af181c91a9f33ecf355065bcfbfce66c9fb1e111", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/af181c91a9f33ecf355065bcfbfce66c9fb1e111", "html_url": "https://github.com/Rust-GCC/gccrs/commit/af181c91a9f33ecf355065bcfbfce66c9fb1e111", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/af181c91a9f33ecf355065bcfbfce66c9fb1e111/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "918b6c9ec22543ced2487fd8780049f595a94b38", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/918b6c9ec22543ced2487fd8780049f595a94b38", "html_url": "https://github.com/Rust-GCC/gccrs/commit/918b6c9ec22543ced2487fd8780049f595a94b38"}], "stats": {"total": 916, "additions": 852, "deletions": 64}, "files": [{"sha": "56a80c7ce6251657a6b80cf233ac7bd09559bbb8", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/af181c91a9f33ecf355065bcfbfce66c9fb1e111/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/af181c91a9f33ecf355065bcfbfce66c9fb1e111/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=af181c91a9f33ecf355065bcfbfce66c9fb1e111", "patch": "@@ -1,3 +1,39 @@\n+2017-03-22  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* include/bits/shared_ptr.h (shared_ptr, weak_ptr): Add deduction\n+\tguides for C++17.\n+\t* include/bits/std_function.h (function): Likewise.\n+\t* include/bits/stl_pair.h (pair): Likewise.\n+\t* include/debug/array (__gnu_debug::array): Likewise.\n+\t* include/std/array (array): Likewise.\n+\t* include/std/functional (make_default_searcher)\n+\t(make_boyer_moore_searcher, make_boyer_moore_horspool_searcher):\n+\tRemove generator functions.\n+\t* include/std/tuple (tuple): Add deduction guides.\n+\t* include/std/valarray (valarray): Likewise.\n+\t* testsuite/20_util/function_objects/searchers.cc: Adjust to use\n+\tclass template argument deduction instead of generator functions.\n+\t* testsuite/20_util/function/cons/deduction.cc: New test.\n+\t* testsuite/20_util/optional/cons/deduction_guide.cc: Rename to ...\n+\t* testsuite/20_util/optional/cons/deduction.cc: ... here.\n+\t* testsuite/20_util/pair/cons/deduction.cc: New test.\n+\t* testsuite/20_util/shared_ptr/cons/deduction.cc: New test.\n+\t* testsuite/20_util/tuple/cons/deduction.cc: New test.\n+\t* testsuite/20_util/tuple/element_access/get_neg.cc: Adjust dg-error.\n+\t* testsuite/20_util/unique_ptr/cons/deduction_neg.cc: New test.\n+\t* testsuite/20_util/weak_ptr/cons/deduction.cc: New test.\n+\t* testsuite/23_containers/array/cons/deduction.cc: New test.\n+\t* testsuite/23_containers/array/cons/deduction_neg.cc: New test.\n+\t* testsuite/23_containers/array/tuple_interface/get_debug_neg.cc:\n+\tAdjust dg-error.\n+\t* testsuite/23_containers/array/tuple_interface/get_neg.cc: Likewise.\n+\t* testsuite/23_containers/array/tuple_interface/tuple_element_neg.cc:\n+\tLikewise.\n+\t* testsuite/26_numerics/valarray/deduction.cc: New test.\n+\t* testsuite/30_threads/lock_guard/cons/deduction.cc: New test.\n+\t* testsuite/30_threads/scoped_lock/cons/deduction.cc: New test.\n+\t* testsuite/30_threads/unique_lock/cons/deduction.cc: New test.\n+\n 2017-03-20  Fran\u00e7ois Dumont  <fdumont@gcc.gnu.org>\n \n \t* include/bits/stl_deque.h (deque): Access allocator value_type only if"}, {"sha": "fe933ff2afecd0c2906127c5fdcbcf8631a0225c", "filename": "libstdc++-v3/include/bits/shared_ptr.h", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/af181c91a9f33ecf355065bcfbfce66c9fb1e111/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fshared_ptr.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/af181c91a9f33ecf355065bcfbfce66c9fb1e111/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fshared_ptr.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fshared_ptr.h?ref=af181c91a9f33ecf355065bcfbfce66c9fb1e111", "patch": "@@ -355,6 +355,13 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       friend class weak_ptr<_Tp>;\n     };\n \n+#if __cpp_deduction_guides >= 201606\n+  template<typename _Tp>\n+    shared_ptr(weak_ptr<_Tp>) ->  shared_ptr<_Tp>;\n+  template<typename _Tp, typename _Del>\n+    shared_ptr(unique_ptr<_Tp, _Del>) ->  shared_ptr<_Tp>;\n+#endif\n+\n   // 20.7.2.2.7 shared_ptr comparisons\n   template<typename _Tp, typename _Up>\n     inline bool\n@@ -577,6 +584,11 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       { return shared_ptr<_Tp>(*this, std::nothrow); }\n     };\n \n+#if __cpp_deduction_guides >= 201606\n+  template<typename _Tp>\n+    weak_ptr(shared_ptr<_Tp>) ->  weak_ptr<_Tp>;\n+#endif\n+\n   // 20.7.2.3.6 weak_ptr specialized algorithms.\n   template<typename _Tp>\n     inline void"}, {"sha": "b393a944818f30604a62ee4e9529e4f140874965", "filename": "libstdc++-v3/include/bits/std_function.h", "status": "modified", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/af181c91a9f33ecf355065bcfbfce66c9fb1e111/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstd_function.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/af181c91a9f33ecf355065bcfbfce66c9fb1e111/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstd_function.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstd_function.h?ref=af181c91a9f33ecf355065bcfbfce66c9fb1e111", "patch": "@@ -629,6 +629,43 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       _Invoker_type _M_invoker;\n   };\n \n+#if __cpp_deduction_guides >= 201606\n+  template<typename>\n+    struct __function_guide_helper\n+    { };\n+\n+  template<typename _Res, typename _Tp, bool _Nx, typename... _Args>\n+    struct __function_guide_helper<\n+      _Res (_Tp::*) (_Args...) noexcept(_Nx)\n+    >\n+    { using type = _Res(_Args...); };\n+\n+  template<typename _Res, typename _Tp, bool _Nx, typename... _Args>\n+    struct __function_guide_helper<\n+      _Res (_Tp::*) (_Args...) & noexcept(_Nx)\n+    >\n+    { using type = _Res(_Args...); };\n+\n+  template<typename _Res, typename _Tp, bool _Nx, typename... _Args>\n+    struct __function_guide_helper<\n+      _Res (_Tp::*) (_Args...) const noexcept(_Nx)\n+    >\n+    { using type = _Res(_Args...); };\n+\n+  template<typename _Res, typename _Tp, bool _Nx, typename... _Args>\n+    struct __function_guide_helper<\n+      _Res (_Tp::*) (_Args...) const & noexcept(_Nx)\n+    >\n+    { using type = _Res(_Args...); };\n+\n+  template<typename _Res, typename... _ArgTypes>\n+    function(_Res(*)(_ArgTypes...)) -> function<_Res(_ArgTypes...)>;\n+\n+  template<typename _Functor, typename _Signature = typename\n+\t   __function_guide_helper<decltype(&_Functor::operator())>::type>\n+    function(_Functor) -> function<_Signature>;\n+#endif\n+\n   // Out-of-line member definitions.\n   template<typename _Res, typename... _ArgTypes>\n     function<_Res(_ArgTypes...)>::"}, {"sha": "66f52b3358e9156624c218d87a749eab39dbab93", "filename": "libstdc++-v3/include/bits/stl_pair.h", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/af181c91a9f33ecf355065bcfbfce66c9fb1e111/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_pair.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/af181c91a9f33ecf355065bcfbfce66c9fb1e111/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_pair.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_pair.h?ref=af181c91a9f33ecf355065bcfbfce66c9fb1e111", "patch": "@@ -425,6 +425,10 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n #endif\n     };\n \n+#if __cpp_deduction_guides >= 201606\n+  template<typename _T1, typename _T2> pair(_T1, _T2) -> pair<_T1, _T2>;\n+#endif\n+\n   /// Two pairs of the same type are equal iff their members are equal.\n   template<typename _T1, typename _T2>\n     inline _GLIBCXX_CONSTEXPR bool"}, {"sha": "9c279221040a64f8e779708934921a98ead1861c", "filename": "libstdc++-v3/include/debug/array", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/af181c91a9f33ecf355065bcfbfce66c9fb1e111/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Farray", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/af181c91a9f33ecf355065bcfbfce66c9fb1e111/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Farray", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Farray?ref=af181c91a9f33ecf355065bcfbfce66c9fb1e111", "patch": "@@ -225,6 +225,13 @@ namespace __debug\n       { return _AT_Type::_S_ptr(_M_elems); }\n     };\n \n+#if __cpp_deduction_guides >= 201606\n+  template<typename _Tp, typename... _Up>\n+    array(_Tp, _Up...)\n+      -> array<std::enable_if_t<(std::is_same_v<_Tp, _Up> && ...), _Tp>,\n+\t       1 + sizeof...(_Up)>;\n+#endif\n+\n   // Array comparisons.\n   template<typename _Tp, std::size_t _Nm>\n     inline bool"}, {"sha": "1c7d6dc4ab128b1100d51c9271a04e80089dcb6f", "filename": "libstdc++-v3/include/std/array", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/af181c91a9f33ecf355065bcfbfce66c9fb1e111/libstdc%2B%2B-v3%2Finclude%2Fstd%2Farray", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/af181c91a9f33ecf355065bcfbfce66c9fb1e111/libstdc%2B%2B-v3%2Finclude%2Fstd%2Farray", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Farray?ref=af181c91a9f33ecf355065bcfbfce66c9fb1e111", "patch": "@@ -239,6 +239,13 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n       { return _AT_Type::_S_ptr(_M_elems); }\n     };\n \n+#if __cpp_deduction_guides >= 201606\n+  template<typename _Tp, typename... _Up>\n+    array(_Tp, _Up...)\n+      -> array<enable_if_t<(is_same_v<_Tp, _Up> && ...), _Tp>,\n+\t       1 + sizeof...(_Up)>;\n+#endif\n+\n   // Array comparisons.\n   template<typename _Tp, std::size_t _Nm>\n     inline bool"}, {"sha": "3db10cade1c8f4db68054d58aecb97a73397bdbf", "filename": "libstdc++-v3/include/std/functional", "status": "modified", "additions": 0, "deletions": 30, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/af181c91a9f33ecf355065bcfbfce66c9fb1e111/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ffunctional", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/af181c91a9f33ecf355065bcfbfce66c9fb1e111/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ffunctional", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ffunctional?ref=af181c91a9f33ecf355065bcfbfce66c9fb1e111", "patch": "@@ -1175,36 +1175,6 @@ _GLIBCXX_MEM_FN_TRAITS(&&, false_type, true_type)\n       _RAIter _M_pat_end;\n     };\n \n-  /// Generator function for default_searcher\n-  template<typename _ForwardIterator,\n-\t   typename _BinaryPredicate = std::equal_to<>>\n-    inline default_searcher<_ForwardIterator, _BinaryPredicate>\n-    make_default_searcher(_ForwardIterator __pat_first,\n-\t\t\t  _ForwardIterator __pat_last,\n-\t\t\t  _BinaryPredicate __pred = _BinaryPredicate())\n-    { return { __pat_first, __pat_last, __pred }; }\n-\n-  /// Generator function for boyer_moore_searcher\n-  template<typename _RAIter, typename _Hash\n-\t     = std::hash<typename std::iterator_traits<_RAIter>::value_type>,\n-\t   typename _BinaryPredicate = equal_to<>>\n-    inline boyer_moore_searcher<_RAIter, _Hash, _BinaryPredicate>\n-    make_boyer_moore_searcher(_RAIter __pat_first, _RAIter __pat_last,\n-\t\t\t      _Hash __hf = _Hash(),\n-\t\t\t      _BinaryPredicate __pred = _BinaryPredicate())\n-    { return { __pat_first, __pat_last, std::move(__hf), std::move(__pred) }; }\n-\n-  /// Generator function for boyer_moore_horspool_searcher\n-  template<typename _RAIter, typename _Hash\n-\t     = std::hash<typename std::iterator_traits<_RAIter>::value_type>,\n-\t   typename _BinaryPredicate = equal_to<>>\n-    inline boyer_moore_horspool_searcher<_RAIter, _Hash, _BinaryPredicate>\n-    make_boyer_moore_horspool_searcher(_RAIter __pat_first, _RAIter __pat_last,\n-\t\t\t\t       _Hash __hf = _Hash(),\n-\t\t\t\t       _BinaryPredicate __pred\n-\t\t\t\t       = _BinaryPredicate())\n-    { return { __pat_first, __pat_last, std::move(__hf), std::move(__pred) }; }\n-\n   template<typename _RAIter, typename _Hash, typename _BinaryPredicate>\n     boyer_moore_searcher<_RAIter, _Hash, _BinaryPredicate>::\n     boyer_moore_searcher(_RAIter __pat, _RAIter __pat_end,"}, {"sha": "ae495d9dc513e69ce26ce5a0a35e554c8fee8516", "filename": "libstdc++-v3/include/std/tuple", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/af181c91a9f33ecf355065bcfbfce66c9fb1e111/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ftuple", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/af181c91a9f33ecf355065bcfbfce66c9fb1e111/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ftuple", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ftuple?ref=af181c91a9f33ecf355065bcfbfce66c9fb1e111", "patch": "@@ -872,6 +872,19 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       { _Inherited::_M_swap(__in); }\n     };\n \n+#if __cpp_deduction_guides >= 201606\n+  template<typename... _UTypes>\n+    tuple(_UTypes...) -> tuple<_UTypes...>;\n+  template<typename _T1, typename _T2>\n+    tuple(pair<_T1, _T2>) -> tuple<_T1, _T2>;\n+  template<typename _Alloc, typename... _UTypes>\n+    tuple(allocator_arg_t, _Alloc, _UTypes...) -> tuple<_UTypes...>;\n+  template<typename _Alloc, typename _T1, typename _T2>\n+    tuple(allocator_arg_t, _Alloc, pair<_T1, _T2>) -> tuple<_T1, _T2>;\n+  template<typename _Alloc, typename... _UTypes>\n+    tuple(allocator_arg_t, _Alloc, tuple<_UTypes...>) -> tuple<_UTypes...>;\n+#endif\n+\n   // Explicit specialization, zero-element tuple.\n   template<>\n     class tuple<>"}, {"sha": "2dc6e42ca05273e6e68d08aad0922c77a52355cc", "filename": "libstdc++-v3/include/std/valarray", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/af181c91a9f33ecf355065bcfbfce66c9fb1e111/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fvalarray", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/af181c91a9f33ecf355065bcfbfce66c9fb1e111/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fvalarray", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fvalarray?ref=af181c91a9f33ecf355065bcfbfce66c9fb1e111", "patch": "@@ -563,6 +563,11 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       friend class _Array<_Tp>;\n     };\n \n+#if __cpp_deduction_guides >= 201606\n+  template<typename _Tp, size_t _Nm>\n+    valarray(const _Tp(&)[_Nm], size_t) -> valarray<_Tp>;\n+#endif\n+\n   template<typename _Tp>\n     inline const _Tp&\n     valarray<_Tp>::operator[](size_t __i) const"}, {"sha": "a4346e0accd4bfd7b0a98c575e3cc510fbfc0e1d", "filename": "libstdc++-v3/testsuite/20_util/function/cons/deduction.cc", "status": "added", "additions": 86, "deletions": 0, "changes": 86, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/af181c91a9f33ecf355065bcfbfce66c9fb1e111/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Ffunction%2Fcons%2Fdeduction.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/af181c91a9f33ecf355065bcfbfce66c9fb1e111/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Ffunction%2Fcons%2Fdeduction.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Ffunction%2Fcons%2Fdeduction.cc?ref=af181c91a9f33ecf355065bcfbfce66c9fb1e111", "patch": "@@ -0,0 +1,86 @@\n+// Copyright (C) 2017 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-options \"-std=gnu++17\" }\n+// { dg-do compile { target c++1z } }\n+\n+#include <functional>\n+\n+template<typename T, typename U> struct require_same;\n+template<typename T> struct require_same<T, T> { using type = void; };\n+\n+template<typename T, typename U>\n+  typename require_same<T, U>::type\n+  check_type(U&) { }\n+\n+void f0v();\n+void f0vn() noexcept;\n+int f0i();\n+int f0in() noexcept;\n+long f1l(int&);\n+long f1ln(double*) noexcept;\n+\n+void\n+test01()\n+{\n+  std::function func1 = f0v;\n+  check_type<std::function<void()>>(func1);\n+\n+  std::function func2 = f0vn;\n+  check_type<std::function<void()>>(func2);\n+\n+  std::function func3 = f0i;\n+  check_type<std::function<int()>>(func3);\n+\n+  std::function func4 = f0in;\n+  check_type<std::function<int()>>(func4);\n+\n+  std::function func5 = f1l;\n+  check_type<std::function<long(int&)>>(func5);\n+\n+  std::function func6 = f1ln;\n+  check_type<std::function<long(double*)>>(func6);\n+\n+  std::function func5a = func5;\n+  check_type<std::function<long(int&)>>(func5a);\n+\n+  std::function func6a = func6;\n+  check_type<std::function<long(double*)>>(func6a);\n+}\n+\n+struct X {\n+  int operator()(const short&, void*);\n+};\n+\n+struct Y {\n+  void operator()(int) const & noexcept;\n+};\n+\n+void\n+test02()\n+{\n+  X x;\n+  std::function func1 = x;\n+  check_type<std::function<int(const short&, void*)>>(func1);\n+\n+  Y y;\n+  std::function func2 = y;\n+  check_type<std::function<void(int)>>(func2);\n+\n+  std::function func3 = [&x](float) -> X& { return x; };\n+  check_type<std::function<X&(float)>>(func3);\n+}"}, {"sha": "9cc1455c85cad28b82fd96b1033050decd7cf9af", "filename": "libstdc++-v3/testsuite/20_util/function_objects/searchers.cc", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/af181c91a9f33ecf355065bcfbfce66c9fb1e111/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Ffunction_objects%2Fsearchers.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/af181c91a9f33ecf355065bcfbfce66c9fb1e111/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Ffunction_objects%2Fsearchers.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Ffunction_objects%2Fsearchers.cc?ref=af181c91a9f33ecf355065bcfbfce66c9fb1e111", "patch": "@@ -31,9 +31,9 @@\n # error \"Feature-test macro for searchers has wrong value\"\n #endif\n \n-using std::make_default_searcher;\n-using std::make_boyer_moore_searcher;\n-using std::make_boyer_moore_horspool_searcher;\n+using std::default_searcher;\n+using std::boyer_moore_searcher;\n+using std::boyer_moore_horspool_searcher;\n \n void\n test01()\n@@ -50,9 +50,9 @@ test01()\n   for (auto n : needles)\n   {\n     auto ne = n + std::strlen(n);\n-    auto d = make_default_searcher(n, ne);\n-    auto bm = make_boyer_moore_searcher(n, ne);\n-    auto bmh = make_boyer_moore_horspool_searcher(n, ne);\n+    default_searcher d(n, ne);\n+    boyer_moore_searcher bm(n, ne);\n+    boyer_moore_horspool_searcher bmh(n, ne);\n     for (auto h : haystacks)\n     {\n       auto he = h + std::strlen(h);\n@@ -83,9 +83,9 @@ test02()\n   for (auto n : needles)\n   {\n     auto ne = n + std::wcslen(n);\n-    auto d = make_default_searcher(n, ne);\n-    auto bm = make_boyer_moore_searcher(n, ne);\n-    auto bmh = make_boyer_moore_horspool_searcher(n, ne);\n+    default_searcher d(n, ne);\n+    boyer_moore_searcher bm(n, ne);\n+    boyer_moore_horspool_searcher bmh(n, ne);\n     for (auto h : haystacks)\n     {\n       auto he = h + std::wcslen(h);\n@@ -122,9 +122,9 @@ test03()\n   const char* ne = needle + std::strlen(needle);\n   const char* he = haystack + std::strlen(haystack);\n \n-  auto d = make_default_searcher(needle, ne, eq);\n-  auto bm = make_boyer_moore_searcher(needle, ne, eq, eq);\n-  auto bmh = make_boyer_moore_horspool_searcher(needle, ne, eq, eq);\n+  default_searcher d(needle, ne, eq);\n+  boyer_moore_searcher bm(needle, ne, eq, eq);\n+  boyer_moore_horspool_searcher bmh(needle, ne, eq, eq);\n \n   auto res = std::search(haystack, he, needle, ne, eq);\n   auto d_res = d(haystack, he);"}, {"sha": "e15db0bc1ec67b2ee0a7a0b3c29802b564ad4fcf", "filename": "libstdc++-v3/testsuite/20_util/optional/cons/deduction.cc", "status": "renamed", "additions": 19, "deletions": 14, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/af181c91a9f33ecf355065bcfbfce66c9fb1e111/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Foptional%2Fcons%2Fdeduction.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/af181c91a9f33ecf355065bcfbfce66c9fb1e111/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Foptional%2Fcons%2Fdeduction.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Foptional%2Fcons%2Fdeduction.cc?ref=af181c91a9f33ecf355065bcfbfce66c9fb1e111", "patch": "@@ -1,6 +1,3 @@\n-// { dg-options \"-std=gnu++17\" }\n-// { dg-do compile }\n-\n // Copyright (C) 2017 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n@@ -18,6 +15,9 @@\n // with this library; see the file COPYING3.  If not see\n // <http://www.gnu.org/licenses/>.\n \n+// { dg-options \"-std=gnu++17\" }\n+// { dg-do compile }\n+\n #include <optional>\n #include <type_traits>\n \n@@ -30,15 +30,20 @@ struct MoveOnly\n \n int main()\n {\n-    std::optional x = 5;\n-    static_assert(std::is_same_v<decltype(x), std::optional<int>>);\n-    int y = 42;\n-    std::optional x2 = y;\n-    static_assert(std::is_same_v<decltype(x2), std::optional<int>>);\n-    const int z = 666;\n-    std::optional x3 = z;\n-    static_assert(std::is_same_v<decltype(x3), std::optional<int>>);\n-    std::optional mo = MoveOnly();\n-    static_assert(std::is_same_v<decltype(mo), std::optional<MoveOnly>>);\n-    mo = MoveOnly();\n+  std::optional x = 5;\n+  static_assert(std::is_same_v<decltype(x), std::optional<int>>);\n+  int y = 42;\n+  std::optional x2 = y;\n+  static_assert(std::is_same_v<decltype(x2), std::optional<int>>);\n+  const int z = 666;\n+  std::optional x3 = z;\n+  static_assert(std::is_same_v<decltype(x3), std::optional<int>>);\n+  std::optional mo = MoveOnly();\n+  static_assert(std::is_same_v<decltype(mo), std::optional<MoveOnly>>);\n+  mo = MoveOnly();\n+\n+  std::optional copy = x;\n+  static_assert(std::is_same_v<decltype(copy), std::optional<int>>);\n+  std::optional move = std::move(mo);\n+  static_assert(std::is_same_v<decltype(move), std::optional<MoveOnly>>);\n }", "previous_filename": "libstdc++-v3/testsuite/20_util/optional/cons/deduction_guide.cc"}, {"sha": "c8e6fd60591858960b5ea946b953843934b15e6d", "filename": "libstdc++-v3/testsuite/20_util/pair/cons/deduction.cc", "status": "added", "additions": 60, "deletions": 0, "changes": 60, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/af181c91a9f33ecf355065bcfbfce66c9fb1e111/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fpair%2Fcons%2Fdeduction.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/af181c91a9f33ecf355065bcfbfce66c9fb1e111/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fpair%2Fcons%2Fdeduction.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fpair%2Fcons%2Fdeduction.cc?ref=af181c91a9f33ecf355065bcfbfce66c9fb1e111", "patch": "@@ -0,0 +1,60 @@\n+// { dg-options \"-std=gnu++17\" }\n+// { dg-do compile { target c++1z } }\n+\n+// Copyright (C) 2017 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+#include <utility>\n+\n+template<typename T, typename U> struct require_same;\n+template<typename T> struct require_same<T, T> { using type = void; };\n+\n+template<typename T, typename U>\n+  typename require_same<T, U>::type\n+  check_type(U&) { }\n+\n+struct MoveOnly\n+{\n+  MoveOnly() = default;\n+  MoveOnly(MoveOnly&&) {}\n+  MoveOnly& operator=(MoveOnly&&) {}\n+};\n+\n+void\n+test01()\n+{\n+  std::pair x{5, 6u};\n+  check_type<std::pair<int, unsigned>>(x);\n+  int y = 42;\n+  std::pair x2{y, 48u};\n+  check_type<std::pair<int, unsigned>>(x2);\n+  const int z = 666;\n+  std::pair x3{z, y};\n+  check_type<std::pair<int, int>>(x3);\n+  std::pair x4{1, x};\n+  check_type<std::pair<int, std::pair<int, unsigned>>>(x4);\n+  std::pair mo{MoveOnly(), 2l};\n+  check_type<std::pair<MoveOnly, long>>(mo);\n+  mo = {MoveOnly(), 3l};\n+\n+  std::pair copy = x;\n+  check_type<decltype(x)>(copy);\n+  std::pair copy2{x};\n+  check_type<decltype(x)>(copy2);\n+  std::pair move = std::move(mo);\n+  check_type<decltype(mo)>(move);\n+}"}, {"sha": "ecd0780fbc2aff2461a5b645e4ce797dc9efc831", "filename": "libstdc++-v3/testsuite/20_util/shared_ptr/cons/deduction.cc", "status": "added", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/af181c91a9f33ecf355065bcfbfce66c9fb1e111/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fshared_ptr%2Fcons%2Fdeduction.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/af181c91a9f33ecf355065bcfbfce66c9fb1e111/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fshared_ptr%2Fcons%2Fdeduction.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fshared_ptr%2Fcons%2Fdeduction.cc?ref=af181c91a9f33ecf355065bcfbfce66c9fb1e111", "patch": "@@ -0,0 +1,45 @@\n+// Copyright (C) 2017 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-options \"-std=gnu++17\" }\n+// { dg-do compile { target c++1z } }\n+\n+#include <memory>\n+\n+template<typename T, typename U> struct require_same;\n+template<typename T> struct require_same<T, T> { using type = void; };\n+\n+template<typename T, typename U>\n+  typename require_same<T, U>::type\n+  check_type(U&) { }\n+\n+void\n+test01()\n+{\n+  std::shared_ptr<long> s;\n+  std::shared_ptr s2 = s;\n+  check_type<std::shared_ptr<long>>(s2);\n+\n+  std::weak_ptr<long> w;\n+  std::shared_ptr s3(w);\n+  check_type<std::shared_ptr<long>>(s3);\n+\n+  struct D { void operator()(double*) { } };\n+  std::unique_ptr<double, D> u;\n+  std::shared_ptr s4 = std::move(u);\n+  check_type<std::shared_ptr<double>>(s4);\n+}"}, {"sha": "47e2488348a87c336ee1d0aac7cd799c52f88d89", "filename": "libstdc++-v3/testsuite/20_util/tuple/cons/deduction.cc", "status": "added", "additions": 166, "deletions": 0, "changes": 166, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/af181c91a9f33ecf355065bcfbfce66c9fb1e111/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Ftuple%2Fcons%2Fdeduction.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/af181c91a9f33ecf355065bcfbfce66c9fb1e111/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Ftuple%2Fcons%2Fdeduction.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Ftuple%2Fcons%2Fdeduction.cc?ref=af181c91a9f33ecf355065bcfbfce66c9fb1e111", "patch": "@@ -0,0 +1,166 @@\n+// { dg-options \"-std=gnu++17\" }\n+// { dg-do compile { target c++1z } }\n+\n+// Copyright (C) 2017 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+#include <tuple>\n+\n+template<typename T, typename U> struct require_same;\n+template<typename T> struct require_same<T, T> { using type = void; };\n+\n+template<typename T, typename U>\n+  typename require_same<T, U>::type\n+  check_type(U&) { }\n+\n+struct MoveOnly\n+{\n+  MoveOnly() = default;\n+  MoveOnly(MoveOnly&&) {}\n+  MoveOnly& operator=(MoveOnly&&) {}\n+};\n+\n+void\n+test00()\n+{\n+  std::tuple x;\n+  check_type<std::tuple<>>(x);\n+\n+  std::tuple copy = x;\n+  check_type<decltype(x)>(copy);\n+  std::tuple move = std::move(x);\n+  check_type<decltype(x)>(move);\n+}\n+\n+void\n+test01()\n+{\n+  std::tuple x = 5;\n+  check_type<std::tuple<int>>(x);\n+  int y = 42;\n+  std::tuple x2 = y;\n+  check_type<std::tuple<int>>(x2);\n+  const int z = 666;\n+  std::tuple x3 = z;\n+  check_type<std::tuple<int>>(x3);\n+  std::tuple mo = MoveOnly();\n+  check_type<std::tuple<MoveOnly>>(mo);\n+  mo = MoveOnly();\n+\n+  std::tuple copy = x;\n+  check_type<decltype(x)>(copy);\n+  std::tuple move = std::move(mo);\n+  check_type<decltype(mo)>(move);\n+}\n+\n+void\n+test02()\n+{\n+  std::tuple x{5, 6u};\n+  check_type<std::tuple<int, unsigned>>(x);\n+  int y = 42;\n+  std::tuple x2{y, 48u};\n+  check_type<std::tuple<int, unsigned>>(x2);\n+  const int z = 666;\n+  std::tuple x3{z, y};\n+  check_type<std::tuple<int, int>>(x3);\n+  std::tuple x4{1, x};\n+  check_type<std::tuple<int, decltype(x)>>(x4);\n+  std::tuple mo{MoveOnly(), 2l};\n+  check_type<std::tuple<MoveOnly, long>>(mo);\n+  mo = {MoveOnly(), 3l};\n+\n+  std::tuple copy = x;\n+  check_type<decltype(x)>(copy);\n+  std::tuple copy2{x};\n+  check_type<decltype(x)>(copy2);\n+  std::tuple move = std::move(mo);\n+  check_type<decltype(mo)>(move);\n+}\n+\n+void\n+test03()\n+{\n+  std::tuple x{5, 6u, '7'};\n+  check_type<std::tuple<int, unsigned, char>>(x);\n+  int y = 42;\n+  std::tuple x2{y, 48u, 54l};\n+  check_type<std::tuple<int, unsigned, long>>(x2);\n+  const int z = 666;\n+  std::tuple x3{z, y, x};\n+  check_type<std::tuple<int, int, decltype(x)>>(x3);\n+  std::tuple x4{1, x, x2};\n+  check_type<std::tuple<int, decltype(x), decltype(x2)>>(x4);\n+  std::tuple mo{MoveOnly(), 2l};\n+  check_type<std::tuple<MoveOnly, long>>(mo);\n+  mo = {MoveOnly(), 3l};\n+\n+  std::tuple copy = x;\n+  check_type<decltype(x)>(copy);\n+  std::tuple copy2{x};\n+  check_type<decltype(x)>(copy2);\n+  std::tuple move = std::move(mo);\n+  check_type<decltype(mo)>(move);\n+}\n+\n+void\n+test04()\n+{\n+  std::pair<int, unsigned> p;\n+  std::tuple x = p;\n+  check_type<std::tuple<int, unsigned>>(x);\n+  int y = 42;\n+  std::tuple x2{p};\n+  check_type<std::tuple<int, unsigned>>(x2);\n+  const int z = 666;\n+  std::pair<const int, unsigned> p2;\n+  std::tuple x3{p2};\n+  check_type<std::tuple<const int, unsigned>>(x3);\n+  std::pair<int&, const unsigned&> p3{p.first, p.second};\n+  std::tuple x4{p3};\n+  check_type<std::tuple<int&, const unsigned&>>(x4);\n+  std::tuple mo = std::pair<MoveOnly, MoveOnly>();\n+  check_type<std::tuple<MoveOnly, MoveOnly>>(mo);\n+\n+  std::tuple copy = x4;\n+  check_type<decltype(x4)>(copy);\n+  std::tuple copy2{x4};\n+  check_type<decltype(x4)>(copy2);\n+  std::tuple move = std::move(mo);\n+  check_type<decltype(mo)>(move);\n+}\n+\n+void\n+test05()\n+{\n+  std::allocator<double> a;\n+  std::tuple x{std::allocator_arg, a, 1};\n+  check_type<std::tuple<int>>(x);\n+  std::tuple x2{std::allocator_arg, a, 1, '2'};\n+  check_type<std::tuple<int, char>>(x2);\n+\n+  std::pair<float, const short> p{};\n+  std::tuple x3{std::allocator_arg, a, p};\n+  check_type<std::tuple<float, const short>>(x3);\n+  std::tuple x4{std::allocator_arg, a, std::move(p)};\n+  check_type<std::tuple<float, const short>>(x4);\n+\n+  std::tuple x5{std::allocator_arg, a, x};\n+  check_type<decltype(x)>(x5);\n+  std::tuple x6{std::allocator_arg, a, std::move(x)};\n+  check_type<decltype(x)>(x6);\n+}"}, {"sha": "03835f40188f4d4815b046c94a2fea23eb4c9e2b", "filename": "libstdc++-v3/testsuite/20_util/tuple/element_access/get_neg.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/af181c91a9f33ecf355065bcfbfce66c9fb1e111/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Ftuple%2Felement_access%2Fget_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/af181c91a9f33ecf355065bcfbfce66c9fb1e111/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Ftuple%2Felement_access%2Fget_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Ftuple%2Felement_access%2Fget_neg.cc?ref=af181c91a9f33ecf355065bcfbfce66c9fb1e111", "patch": "@@ -17,7 +17,7 @@\n \n // { dg-options \"-fno-show-column\" }\n // { dg-do compile { target c++14 } }\n-// { dg-error \"in range\" \"\" { target *-*-* } 1284 }\n+// { dg-error \"in range\" \"\" { target *-*-* } 1297 }\n \n #include <tuple>\n "}, {"sha": "23aca62caad821780d36408edc3d466b82b978c6", "filename": "libstdc++-v3/testsuite/20_util/unique_ptr/cons/deduction_neg.cc", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/af181c91a9f33ecf355065bcfbfce66c9fb1e111/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Funique_ptr%2Fcons%2Fdeduction_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/af181c91a9f33ecf355065bcfbfce66c9fb1e111/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Funique_ptr%2Fcons%2Fdeduction_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Funique_ptr%2Fcons%2Fdeduction_neg.cc?ref=af181c91a9f33ecf355065bcfbfce66c9fb1e111", "patch": "@@ -0,0 +1,36 @@\n+// Copyright (C) 2017 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-options \"-std=gnu++17\" }\n+// { dg-do compile { target c++1z } }\n+\n+#include <memory>\n+\n+void\n+test01()\n+{\n+  std::unique_ptr<long> s;\n+  std::unique_ptr s2 = std::move(s); // OK\n+\n+  std::unique_ptr bad{new int}; // { dg-error \"class template argument deduction failed\" }\n+\n+  struct D { void operator()(double*) { } };\n+  std::unique_ptr bad2{new double, D()}; // { dg-error \"class template argument deduction failed\" }\n+}\n+\n+// { dg-error \"no matching function\" \"\" { target *-*-* } 29 }\n+// { dg-error \"no matching function\" \"\" { target *-*-* } 32 }"}, {"sha": "ea384172aca2c6ceb147a1bb51eb909223a82075", "filename": "libstdc++-v3/testsuite/20_util/weak_ptr/cons/deduction.cc", "status": "added", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/af181c91a9f33ecf355065bcfbfce66c9fb1e111/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fweak_ptr%2Fcons%2Fdeduction.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/af181c91a9f33ecf355065bcfbfce66c9fb1e111/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fweak_ptr%2Fcons%2Fdeduction.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fweak_ptr%2Fcons%2Fdeduction.cc?ref=af181c91a9f33ecf355065bcfbfce66c9fb1e111", "patch": "@@ -0,0 +1,39 @@\n+// Copyright (C) 2017 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-options \"-std=gnu++17\" }\n+// { dg-do compile { target c++1z } }\n+\n+#include <memory>\n+\n+template<typename T, typename U> struct require_same;\n+template<typename T> struct require_same<T, T> { using type = void; };\n+\n+template<typename T, typename U>\n+  typename require_same<T, U>::type\n+  check_type(U&) { }\n+\n+void\n+test01()\n+{\n+  std::shared_ptr<long> s;\n+  std::weak_ptr w(s);\n+  check_type<std::weak_ptr<long>>(w);\n+\n+  std::weak_ptr w2(w);\n+  check_type<std::weak_ptr<long>>(w2);\n+}"}, {"sha": "5ce2909d832c8302f9ff85808d5f626cfd2ea7c9", "filename": "libstdc++-v3/testsuite/23_containers/array/cons/deduction.cc", "status": "added", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/af181c91a9f33ecf355065bcfbfce66c9fb1e111/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Farray%2Fcons%2Fdeduction.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/af181c91a9f33ecf355065bcfbfce66c9fb1e111/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Farray%2Fcons%2Fdeduction.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Farray%2Fcons%2Fdeduction.cc?ref=af181c91a9f33ecf355065bcfbfce66c9fb1e111", "patch": "@@ -0,0 +1,46 @@\n+// Copyright (C) 2017 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-options \"-std=gnu++17\" }\n+// { dg-do compile { target c++1z } }\n+\n+#include <array>\n+\n+template<typename T, typename U> struct require_same;\n+template<typename T> struct require_same<T, T> { using type = void; };\n+\n+template<typename T, typename U>\n+  typename require_same<T, U>::type\n+  check_type(U&) { }\n+\n+void\n+test01()\n+{\n+  std::array a1{ 1, 2, 3 };\n+  check_type<std::array<int, 3>>(a1);\n+  int y = 2;\n+  const int z = 3;\n+  std::array a2{ 1, y, z };\n+  check_type<std::array<int, 3>>(a2);\n+  std::array a3{ 'a', 'b', 'c', 'd', 'e' };\n+  check_type<std::array<char, 5>>(a3);\n+\n+  std::array copy = a1;\n+  check_type<decltype(a1)>(copy);\n+  std::array move = std::move(a1);\n+  check_type<decltype(a1)>(move);\n+}"}, {"sha": "ec11b05a54c83c095c0a1143c4894602e90e9cf0", "filename": "libstdc++-v3/testsuite/23_containers/array/cons/deduction_neg.cc", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/af181c91a9f33ecf355065bcfbfce66c9fb1e111/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Farray%2Fcons%2Fdeduction_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/af181c91a9f33ecf355065bcfbfce66c9fb1e111/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Farray%2Fcons%2Fdeduction_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Farray%2Fcons%2Fdeduction_neg.cc?ref=af181c91a9f33ecf355065bcfbfce66c9fb1e111", "patch": "@@ -0,0 +1,31 @@\n+// Copyright (C) 2017 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-options \"-std=gnu++17\" }\n+// { dg-do compile { target c++1z } }\n+\n+#include <array>\n+\n+void\n+test01()\n+{\n+  std::array a1{}; // { dg-error \"class template argument deduction failed\" }\n+  std::array a2{1, 2u, 3}; // { dg-error \"class template argument deduction failed\" }\n+}\n+// { dg-error \"no matching function for call\" \"\" { target *-*-* } 26 }\n+// { dg-error \"no matching function for call\" \"\" { target *-*-* } 27 }\n+// { dg-error \"no type named .*enable_if\" \"\" { target *-*-* } 0 }"}, {"sha": "81d8b931753ac9b11bfa861434f89352d2e9e734", "filename": "libstdc++-v3/testsuite/23_containers/array/tuple_interface/get_debug_neg.cc", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/af181c91a9f33ecf355065bcfbfce66c9fb1e111/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Farray%2Ftuple_interface%2Fget_debug_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/af181c91a9f33ecf355065bcfbfce66c9fb1e111/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Farray%2Ftuple_interface%2Fget_debug_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Farray%2Ftuple_interface%2Fget_debug_neg.cc?ref=af181c91a9f33ecf355065bcfbfce66c9fb1e111", "patch": "@@ -27,6 +27,6 @@ int n1 = std::get<1>(a);\n int n2 = std::get<1>(std::move(a));\n int n3 = std::get<1>(ca);\n \n-// { dg-error \"static assertion failed\" \"\" { target *-*-* } 281 }\n-// { dg-error \"static assertion failed\" \"\" { target *-*-* } 290 }\n-// { dg-error \"static assertion failed\" \"\" { target *-*-* } 298 }\n+// { dg-error \"static assertion failed\" \"\" { target *-*-* } 288 }\n+// { dg-error \"static assertion failed\" \"\" { target *-*-* } 297 }\n+// { dg-error \"static assertion failed\" \"\" { target *-*-* } 305 }"}, {"sha": "8983ad7c7b289c9aa5187ce2a89e2762653bee54", "filename": "libstdc++-v3/testsuite/23_containers/array/tuple_interface/get_neg.cc", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/af181c91a9f33ecf355065bcfbfce66c9fb1e111/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Farray%2Ftuple_interface%2Fget_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/af181c91a9f33ecf355065bcfbfce66c9fb1e111/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Farray%2Ftuple_interface%2Fget_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Farray%2Ftuple_interface%2Fget_neg.cc?ref=af181c91a9f33ecf355065bcfbfce66c9fb1e111", "patch": "@@ -27,6 +27,6 @@ int n1 = std::get<1>(a);\n int n2 = std::get<1>(std::move(a));\n int n3 = std::get<1>(ca);\n \n-// { dg-error \"static assertion failed\" \"\" { target *-*-* } 302 }\n-// { dg-error \"static assertion failed\" \"\" { target *-*-* } 311 }\n-// { dg-error \"static assertion failed\" \"\" { target *-*-* } 319 }\n+// { dg-error \"static assertion failed\" \"\" { target *-*-* } 309 }\n+// { dg-error \"static assertion failed\" \"\" { target *-*-* } 318 }\n+// { dg-error \"static assertion failed\" \"\" { target *-*-* } 326 }"}, {"sha": "493449a235ba6fd078d91d7f58c8ceb6a7f072b0", "filename": "libstdc++-v3/testsuite/23_containers/array/tuple_interface/tuple_element_neg.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/af181c91a9f33ecf355065bcfbfce66c9fb1e111/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Farray%2Ftuple_interface%2Ftuple_element_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/af181c91a9f33ecf355065bcfbfce66c9fb1e111/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Farray%2Ftuple_interface%2Ftuple_element_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Farray%2Ftuple_interface%2Ftuple_element_neg.cc?ref=af181c91a9f33ecf355065bcfbfce66c9fb1e111", "patch": "@@ -22,4 +22,4 @@\n \n typedef std::tuple_element<1, std::array<int, 1>>::type type;\n \n-// { dg-error \"static assertion failed\" \"\" { target *-*-* } 350 }\n+// { dg-error \"static assertion failed\" \"\" { target *-*-* } 357 }"}, {"sha": "72d4bc0912635c28e899e11c6403797c7fbfafa3", "filename": "libstdc++-v3/testsuite/26_numerics/valarray/deduction.cc", "status": "added", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/af181c91a9f33ecf355065bcfbfce66c9fb1e111/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Fvalarray%2Fdeduction.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/af181c91a9f33ecf355065bcfbfce66c9fb1e111/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Fvalarray%2Fdeduction.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Fvalarray%2Fdeduction.cc?ref=af181c91a9f33ecf355065bcfbfce66c9fb1e111", "patch": "@@ -0,0 +1,42 @@\n+// Copyright (C) 2017 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-options \"-std=gnu++17\" }\n+// { dg-do compile { target c++1z } }\n+\n+#include <valarray>\n+\n+template<typename T, typename U> struct require_same;\n+template<typename T> struct require_same<T, T> { using type = void; };\n+\n+template<typename T, typename U>\n+  typename require_same<T, U>::type\n+  check_type(U&) { }\n+\n+void\n+test01()\n+{\n+  int arr[4] = { 1, 2, 3, 4 };\n+  std::valarray v(arr, 4);\n+  check_type<std::valarray<int>>(v);\n+\n+  std::valarray v2 = v;\n+  check_type<std::valarray<int>>(v2);\n+\n+  std::valarray v3 = std::move(v);\n+  check_type<std::valarray<int>>(v3);\n+}"}, {"sha": "b72c1a12a405e7458e216bb19f92ebe1e8d32b40", "filename": "libstdc++-v3/testsuite/30_threads/lock_guard/cons/deduction.cc", "status": "added", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/af181c91a9f33ecf355065bcfbfce66c9fb1e111/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Flock_guard%2Fcons%2Fdeduction.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/af181c91a9f33ecf355065bcfbfce66c9fb1e111/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Flock_guard%2Fcons%2Fdeduction.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Flock_guard%2Fcons%2Fdeduction.cc?ref=af181c91a9f33ecf355065bcfbfce66c9fb1e111", "patch": "@@ -0,0 +1,44 @@\n+// Copyright (C) 2017 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-options \"-std=gnu++17\" }\n+// { dg-do compile { target c++1z } }\n+\n+#include <mutex>\n+\n+template<typename T, typename U> struct require_same;\n+template<typename T> struct require_same<T, T> { using type = void; };\n+\n+template<typename T, typename U>\n+  typename require_same<T, U>::type\n+  check_type(U&) { }\n+\n+void\n+test01()\n+{\n+  std::mutex m;\n+  std::lock_guard l(m);\n+  check_type<std::lock_guard<std::mutex>>(l);\n+\n+  struct Mutex {\n+    void lock() { }\n+    void unlock() { }\n+  } m2;\n+\n+  std::lock_guard l2(m2);\n+  check_type<std::lock_guard<Mutex>>(l2);\n+}"}, {"sha": "399de7a5ae695c21cc24be2f4906bc6d4d2471a4", "filename": "libstdc++-v3/testsuite/30_threads/scoped_lock/cons/deduction.cc", "status": "added", "additions": 53, "deletions": 0, "changes": 53, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/af181c91a9f33ecf355065bcfbfce66c9fb1e111/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fscoped_lock%2Fcons%2Fdeduction.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/af181c91a9f33ecf355065bcfbfce66c9fb1e111/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fscoped_lock%2Fcons%2Fdeduction.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fscoped_lock%2Fcons%2Fdeduction.cc?ref=af181c91a9f33ecf355065bcfbfce66c9fb1e111", "patch": "@@ -0,0 +1,53 @@\n+// Copyright (C) 2017 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-options \"-std=gnu++17\" }\n+// { dg-do compile { target c++1z } }\n+\n+#include <mutex>\n+\n+template<typename T, typename U> struct require_same;\n+template<typename T> struct require_same<T, T> { using type = void; };\n+\n+template<typename T, typename U>\n+  typename require_same<T, U>::type\n+  check_type(U&) { }\n+\n+void\n+test01()\n+{\n+  std::scoped_lock l0;\n+  check_type<std::scoped_lock<>>(l0);\n+\n+  struct BasicLockable {\n+    void lock() { }\n+    void unlock() { }\n+  } m1;\n+\n+  std::scoped_lock l1(m1);\n+  check_type<std::scoped_lock<BasicLockable>>(l1);\n+\n+  struct Lockable {\n+    void lock() { }\n+    void unlock() { }\n+    bool try_lock() { return true; }\n+  } m2;\n+\n+  std::mutex m3;\n+  std::scoped_lock l2(m2, m3);\n+  check_type<std::scoped_lock<Lockable, std::mutex>>(l2);\n+}"}, {"sha": "4f36bab9d6a9a67a72e53b7e5e4933502c463876", "filename": "libstdc++-v3/testsuite/30_threads/unique_lock/cons/deduction.cc", "status": "added", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/af181c91a9f33ecf355065bcfbfce66c9fb1e111/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Funique_lock%2Fcons%2Fdeduction.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/af181c91a9f33ecf355065bcfbfce66c9fb1e111/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Funique_lock%2Fcons%2Fdeduction.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Funique_lock%2Fcons%2Fdeduction.cc?ref=af181c91a9f33ecf355065bcfbfce66c9fb1e111", "patch": "@@ -0,0 +1,44 @@\n+// Copyright (C) 2017 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-options \"-std=gnu++17\" }\n+// { dg-do compile { target c++1z } }\n+\n+#include <mutex>\n+\n+template<typename T, typename U> struct require_same;\n+template<typename T> struct require_same<T, T> { using type = void; };\n+\n+template<typename T, typename U>\n+  typename require_same<T, U>::type\n+  check_type(U&) { }\n+\n+void\n+test01()\n+{\n+  std::mutex m;\n+  std::unique_lock l(m);\n+  check_type<std::unique_lock<std::mutex>>(l);\n+\n+  struct Mutex {\n+    void lock() { }\n+    void unlock() { }\n+  } m2;\n+\n+  std::unique_lock l2(m2);\n+  check_type<std::unique_lock<Mutex>>(l2);\n+}"}]}