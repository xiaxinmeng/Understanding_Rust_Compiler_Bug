{"sha": "22be0d084c010c8c798f397d628759d259b15a92", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjJiZTBkMDg0YzAxMGM4Yzc5OGYzOTdkNjI4NzU5ZDI1OWIxNWE5Mg==", "commit": {"author": {"name": "Michael Collison", "email": "michael.collison@arm.com", "date": "2017-10-27T06:05:58Z"}, "committer": {"name": "Michael Collison", "email": "collison@gcc.gnu.org", "date": "2017-10-27T06:05:58Z"}, "message": "aarch64.md (<optab>_trunc><vf><GPI:mode>2): New pattern.\n\n2017-10-26  Michael Collison  <michael.collison@arm.com>\n\n\t* config/aarch64/aarch64.md(<optab>_trunc><vf><GPI:mode>2):\n\tNew pattern.\n\t(<optab>_trunchf<GPI:mode>2: New pattern.\n\t(<optab>_trunc<vgp><GPI:mode>2: New pattern.\n\t* config/aarch64/iterators.md (wv): New mode attribute.\n\t(vf, VF): New mode attributes.\n\t(vgp, VGP): New mode attributes.\n\t(s): Update attribute with SImode and DImode prefixes.\n\t* testsuite/gcc.target/aarch64/fix_trunc1.c: New testcase.\n\t* testsuite/gcc.target/aarch64/vect-vcvt.c: Fix scan-assembler\n\tdirectives to allow float or integer destination registers for\n\tfcvtz[su].\n\nFrom-SVN: r254133", "tree": {"sha": "8064bf46ae9e6631cad0fde860c06b6f09e943f9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8064bf46ae9e6631cad0fde860c06b6f09e943f9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/22be0d084c010c8c798f397d628759d259b15a92", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/22be0d084c010c8c798f397d628759d259b15a92", "html_url": "https://github.com/Rust-GCC/gccrs/commit/22be0d084c010c8c798f397d628759d259b15a92", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/22be0d084c010c8c798f397d628759d259b15a92/comments", "author": null, "committer": null, "parents": [{"sha": "acec245b359e4bb75f3ee635b2d367c84554860e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/acec245b359e4bb75f3ee635b2d367c84554860e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/acec245b359e4bb75f3ee635b2d367c84554860e"}], "stats": {"total": 92, "additions": 83, "deletions": 9}, "files": [{"sha": "e9418ee98fe1c5b5197395fa216e1c5cf8b974aa", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/22be0d084c010c8c798f397d628759d259b15a92/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/22be0d084c010c8c798f397d628759d259b15a92/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=22be0d084c010c8c798f397d628759d259b15a92", "patch": "@@ -1,3 +1,14 @@\n+2017-10-26  Michael Collison  <michael.collison@arm.com>\n+\n+\t* config/aarch64/aarch64.md(<optab>_trunc><vf><GPI:mode>2):\n+\tNew pattern.\n+\t(<optab>_trunchf<GPI:mode>2: New pattern.\n+\t(<optab>_trunc<vgp><GPI:mode>2: New pattern.\n+\t* config/aarch64/iterators.md (wv): New mode attribute.\n+\t(vf, VF): New mode attributes.\n+\t(vgp, VGP): New mode attributes.\n+\t(s): Update attribute with SImode and DImode prefixes.\n+\n 2017-10-26  Sandra Loosemore  <sandra@codesourcery.com>\n \n \t* config/nios2/constraints.md (\"S\"): Match r0rel_constant_p too."}, {"sha": "bbd5174df75ff0ddb5d2cf84aa7d4524f59fb858", "filename": "gcc/config/aarch64/aarch64.md", "status": "modified", "additions": 29, "deletions": 3, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/22be0d084c010c8c798f397d628759d259b15a92/gcc%2Fconfig%2Faarch64%2Faarch64.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/22be0d084c010c8c798f397d628759d259b15a92/gcc%2Fconfig%2Faarch64%2Faarch64.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64.md?ref=22be0d084c010c8c798f397d628759d259b15a92", "patch": "@@ -4849,11 +4849,37 @@\n   [(set_attr \"type\" \"f_cvt\")]\n )\n \n-(define_insn \"<optab>_trunc<GPF_F16:mode><GPI:mode>2\"\n+;; Convert SF -> SI or DF -> DI while preferring w = w register constraints\n+;; and making r = w more expensive\n+\n+(define_insn \"<optab>_trunc<fcvt_target><GPI:mode>2\"\n+  [(set (match_operand:GPI 0 \"register_operand\" \"=?r,w\")\n+\t(FIXUORS:GPI (match_operand:<FCVT_TARGET> 1 \"register_operand\" \"w,w\")))]\n+  \"TARGET_FLOAT\"\n+  \"@\n+   fcvtz<su>\\t%<w>0, %<s>1\n+   fcvtz<su>\\t%<s>0, %<s>1\"\n+  [(set_attr \"type\" \"f_cvtf2i,neon_fp_to_int_s\")]\n+)\n+\n+;; Convert HF -> SI or DI\n+\n+(define_insn \"<optab>_trunchf<GPI:mode>2\"\n+  [(set (match_operand:GPI 0 \"register_operand\" \"=r\")\n+\t(FIXUORS:GPI (match_operand:HF 1 \"register_operand\" \"w\")))]\n+  \"TARGET_FP_F16INST\"\n+  \"fcvtz<su>\\t%<w>0, %h1\"\n+  [(set_attr \"type\" \"f_cvtf2i\")]\n+)\n+\n+;; Convert DF -> SI or SF -> DI which can only be accomplished with\n+;; input in a fp register and output in a integer register\n+\n+(define_insn \"<optab>_trunc<fcvt_change_mode><GPI:mode>2\"\n   [(set (match_operand:GPI 0 \"register_operand\" \"=r\")\n-\t(FIXUORS:GPI (match_operand:GPF_F16 1 \"register_operand\" \"w\")))]\n+\t(FIXUORS:GPI (match_operand:<FCVT_CHANGE_MODE> 1 \"register_operand\" \"w\")))]\n   \"TARGET_FLOAT\"\n-  \"fcvtz<su>\\t%<GPI:w>0, %<GPF_F16:s>1\"\n+  \"fcvtz<su>\\t%<w>0, %<fpw>1\"\n   [(set_attr \"type\" \"f_cvtf2i\")]\n )\n "}, {"sha": "68da31653203dfcaa71939a7a7d2fecaa0659374", "filename": "gcc/config/aarch64/iterators.md", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/22be0d084c010c8c798f397d628759d259b15a92/gcc%2Fconfig%2Faarch64%2Fiterators.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/22be0d084c010c8c798f397d628759d259b15a92/gcc%2Fconfig%2Faarch64%2Fiterators.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Fiterators.md?ref=22be0d084c010c8c798f397d628759d259b15a92", "patch": "@@ -398,6 +398,9 @@\n (define_mode_attr w1 [(HF \"w\") (SF \"w\") (DF \"x\")])\n (define_mode_attr w2 [(HF \"x\") (SF \"x\") (DF \"w\")])\n \n+;; For width of fp registers in fcvt instruction\n+(define_mode_attr fpw [(DI \"s\") (SI \"d\")])\n+\n (define_mode_attr short_mask [(HI \"65535\") (QI \"255\")])\n \n ;; For constraints used in scalar immediate vector moves\n@@ -406,6 +409,10 @@\n ;; For doubling width of an integer mode\n (define_mode_attr DWI [(QI \"HI\") (HI \"SI\") (SI \"DI\") (DI \"TI\")])\n \n+(define_mode_attr fcvt_change_mode [(SI \"df\") (DI \"sf\")])\n+\n+(define_mode_attr FCVT_CHANGE_MODE [(SI \"DF\") (DI \"SF\")])\n+\n ;; For scalar usage of vector/FP registers\n (define_mode_attr v [(QI \"b\") (HI \"h\") (SI \"s\") (DI \"d\")\n \t\t    (HF  \"h\") (SF \"s\") (DF \"d\")\n@@ -438,8 +445,8 @@\n (define_mode_attr rtn [(DI \"d\") (SI \"\")])\n (define_mode_attr vas [(DI \"\") (SI \".2s\")])\n \n-;; Map a floating point mode to the appropriate register name prefix\n-(define_mode_attr s [(HF \"h\") (SF \"s\") (DF \"d\")])\n+;; Map a floating point or integer mode to the appropriate register name prefix\n+(define_mode_attr s [(HF \"h\") (SF \"s\") (DF \"d\") (SI \"s\") (DI \"d\")])\n \n ;; Give the length suffix letter for a sign- or zero-extension.\n (define_mode_attr size [(QI \"b\") (HI \"h\") (SI \"w\")])"}, {"sha": "a545b7fd7ea387e903e63aec103f9a8456736529", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/22be0d084c010c8c798f397d628759d259b15a92/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/22be0d084c010c8c798f397d628759d259b15a92/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=22be0d084c010c8c798f397d628759d259b15a92", "patch": "@@ -1,3 +1,10 @@\n+2017-10-26  Michael Collison  <michael.collison@arm.com>\n+\n+\t* gcc.target/aarch64/fix_trunc1.c: New testcase.\n+\t* gcc.target/aarch64/vect-vcvt.c: Fix scan-assembler\n+\tdirectives to allow float or integer destination registers for\n+\tfcvtz[su].\n+\n 2017-10-26  Sandra Loosemore  <sandra@codesourcery.com>\n \n \t* gcc.target/nios2/gpopt-r0rel-sec.c: New."}, {"sha": "0441458f635f0c2daca80b383e941c83b93c446e", "filename": "gcc/testsuite/gcc.target/aarch64/fix_trunc1.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/22be0d084c010c8c798f397d628759d259b15a92/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Ffix_trunc1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/22be0d084c010c8c798f397d628759d259b15a92/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Ffix_trunc1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Ffix_trunc1.c?ref=22be0d084c010c8c798f397d628759d259b15a92", "patch": "@@ -0,0 +1,23 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2\" } */\n+\n+float\n+f1 (float x)\n+{\n+  int y = x;\n+\n+  return (float) y;\n+}\n+\n+double\n+f2 (double x)\n+{\n+  long y = x;\n+\n+  return (double) y;\n+}\n+\n+/* { dg-final { scan-assembler \"fcvtzs\\\\ts\\[0-9\\]+, s\\[0-9\\]+\" } } */\n+/* { dg-final { scan-assembler \"scvtf\\\\ts\\[0-9\\]+, s\\[0-9\\]+\" } } */\n+/* { dg-final { scan-assembler \"fcvtzs\\\\td\\[0-9\\]+, d\\[0-9\\]+\" } } */\n+/* { dg-final { scan-assembler \"scvtf\\\\td\\[0-9\\]+, d\\[0-9\\]+\" } } */"}, {"sha": "436399c61950722c1a13dfded02de074efeaf9f3", "filename": "gcc/testsuite/gcc.target/aarch64/vect-vcvt.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/22be0d084c010c8c798f397d628759d259b15a92/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fvect-vcvt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/22be0d084c010c8c798f397d628759d259b15a92/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fvect-vcvt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fvect-vcvt.c?ref=22be0d084c010c8c798f397d628759d259b15a92", "patch": "@@ -56,13 +56,13 @@ TEST (SUFFIX, q, 32, 4, u,u,s)\t\t\t\\\n TEST (SUFFIX, q, 64, 2, u,u,d)\t\t\t\\\n \n BUILD_VARIANTS ( )\n-/* { dg-final { scan-assembler \"fcvtzs\\\\tw\\[0-9\\]+, s\\[0-9\\]+\" } } */\n-/* { dg-final { scan-assembler \"fcvtzs\\\\tx\\[0-9\\]+, d\\[0-9\\]+\" } } */\n+/* { dg-final { scan-assembler \"fcvtzs\\\\t(w|s)\\[0-9\\]+, s\\[0-9\\]+\" } } */\n+/* { dg-final { scan-assembler \"fcvtzs\\\\t(x|d)\\[0-9\\]+, d\\[0-9\\]+\" } } */\n /* { dg-final { scan-assembler \"fcvtzs\\\\tv\\[0-9\\]+\\.2s, v\\[0-9\\]+\\.2s\" } } */\n /* { dg-final { scan-assembler \"fcvtzs\\\\tv\\[0-9\\]+\\.4s, v\\[0-9\\]+\\.4s\" } } */\n /* { dg-final { scan-assembler \"fcvtzs\\\\tv\\[0-9\\]+\\.2d, v\\[0-9\\]+\\.2d\" } } */\n-/* { dg-final { scan-assembler \"fcvtzu\\\\tw\\[0-9\\]+, s\\[0-9\\]+\" } } */\n-/* { dg-final { scan-assembler \"fcvtzu\\\\tx\\[0-9\\]+, d\\[0-9\\]+\" } } */\n+/* { dg-final { scan-assembler \"fcvtzu\\\\t(w|s)\\[0-9\\]+, s\\[0-9\\]+\" } } */\n+/* { dg-final { scan-assembler \"fcvtzu\\\\t(x|d)\\[0-9\\]+, d\\[0-9\\]+\" } } */\n /* { dg-final { scan-assembler \"fcvtzu\\\\tv\\[0-9\\]+\\.2s, v\\[0-9\\]+\\.2s\" } } */\n /* { dg-final { scan-assembler \"fcvtzu\\\\tv\\[0-9\\]+\\.4s, v\\[0-9\\]+\\.4s\" } } */\n /* { dg-final { scan-assembler \"fcvtzu\\\\tv\\[0-9\\]+\\.2d, v\\[0-9\\]+\\.2d\" } } */"}]}