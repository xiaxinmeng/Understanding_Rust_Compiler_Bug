{"sha": "653ab081391e9e7e38b304f3234323c93693d40c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjUzYWIwODEzOTFlOWU3ZTM4YjMwNGYzMjM0MzIzYzkzNjkzZDQwYw==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2020-06-09T06:38:19Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2020-06-09T06:38:19Z"}, "message": "match.pd: Optimize ffs comparisons against constants [PR95527]\n\nThe following patch implements various optimizations of __builtin_ffs*\nagainst constants.\n\n2020-06-09  Jakub Jelinek  <jakub@redhat.com>\n\n\tPR tree-optimization/95527\n\t* match.pd (__builtin_ffs (X) cmp CST): New optimizations.\n\n\t* gcc.dg/tree-ssa/pr95527.c: New test.", "tree": {"sha": "d47fff87fa78625528b5c945800858dc9749c3f2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d47fff87fa78625528b5c945800858dc9749c3f2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/653ab081391e9e7e38b304f3234323c93693d40c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/653ab081391e9e7e38b304f3234323c93693d40c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/653ab081391e9e7e38b304f3234323c93693d40c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/653ab081391e9e7e38b304f3234323c93693d40c/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9a39b91d934e7acd8f3a9767b6d5febe90168d0d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9a39b91d934e7acd8f3a9767b6d5febe90168d0d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9a39b91d934e7acd8f3a9767b6d5febe90168d0d"}], "stats": {"total": 220, "additions": 220, "deletions": 0}, "files": [{"sha": "53ced346bbd2f96ad437c6fd2232b593d0a3d2d2", "filename": "gcc/match.pd", "status": "modified", "additions": 48, "deletions": 0, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/653ab081391e9e7e38b304f3234323c93693d40c/gcc%2Fmatch.pd", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/653ab081391e9e7e38b304f3234323c93693d40c/gcc%2Fmatch.pd", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fmatch.pd?ref=653ab081391e9e7e38b304f3234323c93693d40c", "patch": "@@ -6024,6 +6024,54 @@ DEFINE_INT_AND_FLOAT_ROUND_FN (RINT)\n   (plus (CTZ:type @0) { build_one_cst (type); })))\n #endif\n \n+(for ffs (BUILT_IN_FFS BUILT_IN_FFSL BUILT_IN_FFSLL\n+\t  BUILT_IN_FFSIMAX)\n+ /* __builtin_ffs (X) == 0 -> X == 0.\n+    __builtin_ffs (X) == 6 -> (X & 63) == 32.  */\n+ (for cmp (eq ne)\n+  (simplify\n+   (cmp (ffs@2 @0) INTEGER_CST@1)\n+    (with { int prec = TYPE_PRECISION (TREE_TYPE (@0)); }\n+     (switch\n+      (if (integer_zerop (@1))\n+       (cmp @0 { build_zero_cst (TREE_TYPE (@0)); }))\n+      (if (tree_int_cst_sgn (@1) < 0 || wi::to_widest (@1) > prec)\n+       { constant_boolean_node (cmp == NE_EXPR ? true : false, type); })\n+      (if (single_use (@2))\n+       (cmp (bit_and @0 { wide_int_to_tree (TREE_TYPE (@0),\n+\t\t\t\t\t    wi::mask (tree_to_uhwi (@1),\n+\t\t\t\t\t\t      false, prec)); })\n+\t    { wide_int_to_tree (TREE_TYPE (@0),\n+\t\t\t\twi::shifted_mask (tree_to_uhwi (@1) - 1, 1,\n+\t\t\t\t\t\t  false, prec)); }))))))\n+\n+ /* __builtin_ffs (X) > 6 -> X != 0 && (X & 63) == 0.  */\n+ (for cmp (gt le)\n+      cmp2 (ne eq)\n+      cmp3 (eq ne)\n+      bit_op (bit_and bit_ior)\n+  (simplify\n+   (cmp (ffs@2 @0) INTEGER_CST@1)\n+    (with { int prec = TYPE_PRECISION (TREE_TYPE (@0)); }\n+     (switch\n+      (if (integer_zerop (@1))\n+       (cmp2 @0 { build_zero_cst (TREE_TYPE (@0)); }))\n+      (if (tree_int_cst_sgn (@1) < 0)\n+       { constant_boolean_node (cmp == GT_EXPR ? true : false, type); })\n+      (if (wi::to_widest (@1) >= prec)\n+       { constant_boolean_node (cmp == GT_EXPR ? false : true, type); })\n+      (if (wi::to_widest (@1) == prec - 1)\n+       (cmp3 @0 { wide_int_to_tree (TREE_TYPE (@0),\n+\t\t\t\t    wi::shifted_mask (prec - 1, 1,\n+\t\t\t\t\t\t      false, prec)); }))\n+      (if (single_use (@2))\n+       (bit_op (cmp2 @0 { build_zero_cst (TREE_TYPE (@0)); })\n+\t       (cmp3 (bit_and @0\n+\t\t\t      { wide_int_to_tree (TREE_TYPE (@0),\n+\t\t\t\t\t\t  wi::mask (tree_to_uhwi (@1),\n+\t\t\t\t\t\t  false, prec)); })\n+\t\t     { build_zero_cst (TREE_TYPE (@0)); }))))))))\n+\n /* Simplify:\n \n      a = a1 op a2"}, {"sha": "afd763cb245ffaac12f86285327a8a9611125c71", "filename": "gcc/testsuite/gcc.dg/tree-ssa/pr95527.c", "status": "added", "additions": 172, "deletions": 0, "changes": 172, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/653ab081391e9e7e38b304f3234323c93693d40c/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr95527.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/653ab081391e9e7e38b304f3234323c93693d40c/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr95527.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr95527.c?ref=653ab081391e9e7e38b304f3234323c93693d40c", "patch": "@@ -0,0 +1,172 @@\n+/* PR tree-optimization/95527 */\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -fdump-tree-optimized\" } */\n+/* { dg-final { scan-tree-dump-times \"return 0;\" 4 \"optimized\" } } */\n+/* { dg-final { scan-tree-dump-times \"return 18;\" 4 \"optimized\" } } */\n+\n+/* { dg-final { scan-tree-dump-times \"a_\\[0-9]*\\\\\\(D\\\\\\) == 0\" 1 \"optimized\" } } */\n+\n+int\n+f1 (int a)\n+{\n+  return __builtin_ffs (a) == 0;\n+}\n+\n+/* { dg-final { scan-tree-dump-times \"b_\\[0-9]*\\\\\\(D\\\\\\) != 0\" 1 \"optimized\" } } */\n+\n+int\n+f2 (int b)\n+{\n+  return __builtin_ffs (b) != 0;\n+}\n+\n+int\n+f3 (int x)\n+{\n+  return __builtin_ffs (x) == -1;\n+}\n+\n+int\n+f4 (int x)\n+{\n+  return 17 + (__builtin_ffs (x) != -1);\n+}\n+\n+int\n+f5 (int x)\n+{\n+  return __builtin_ffs (x) == __SIZEOF_INT__ * __CHAR_BIT__ + 1;\n+}\n+\n+int\n+f6 (int x)\n+{\n+  return 17 + (__builtin_ffs (x) != __SIZEOF_INT__ * __CHAR_BIT__ + 1);\n+}\n+\n+/* { dg-final { scan-tree-dump-times \"c_\\[0-9]*\\\\\\(D\\\\\\) & 63\" 1 \"optimized\" } } */\n+/* { dg-final { scan-tree-dump-times \"== 32\" 1 \"optimized\" } } */\n+\n+int\n+f7 (int c)\n+{\n+  return __builtin_ffs (c) == 6;\n+}\n+\n+/* { dg-final { scan-tree-dump-times \"d_\\[0-9]*\\\\\\(D\\\\\\) & 16383\" 1 \"optimized\" } } */\n+/* { dg-final { scan-tree-dump-times \"!= 8192\" 1 \"optimized\" } } */\n+\n+int\n+f8 (int d)\n+{\n+  return __builtin_ffs (d) != 14;\n+}\n+\n+/* { dg-final { scan-tree-dump-times \"e_\\[0-9]*\\\\\\(D\\\\\\) == -9223372036854775808\" 1 \"optimized\" { target lp64 } } } */\n+/* { dg-final { scan-tree-dump-times \"e_\\[0-9]*\\\\\\(D\\\\\\) == -2147483648\" 1 \"optimized\" { target ilp32 } } } */\n+\n+int\n+f9 (long int e)\n+{\n+  return __builtin_ffsl (e) == __SIZEOF_LONG__ * __CHAR_BIT__;\n+}\n+\n+/* { dg-final { scan-tree-dump-times \"f_\\[0-9]*\\\\\\(D\\\\\\) != -9223372036854775808\" 1 \"optimized\" } } */\n+\n+int\n+f10 (long long int f)\n+{\n+  return __builtin_ffsll (f) != __SIZEOF_LONG_LONG__ * __CHAR_BIT__;\n+}\n+\n+/* { dg-final { scan-tree-dump-times \"g_\\[0-9]*\\\\\\(D\\\\\\) != 0\" 1 \"optimized\" } } */\n+\n+int\n+f11 (long long int g)\n+{\n+  return __builtin_ffsll (g) > 0;\n+}\n+\n+/* { dg-final { scan-tree-dump-times \"h_\\[0-9]*\\\\\\(D\\\\\\) == 0\" 1 \"optimized\" } } */\n+\n+int\n+f12 (int h)\n+{\n+  return __builtin_ffs (h) <= 0;\n+}\n+\n+int\n+f13 (int x)\n+{\n+  return 17 + (__builtin_ffs (x) > -1);\n+}\n+\n+int\n+f14 (int x)\n+{\n+  return __builtin_ffs (x) <= -1;\n+}\n+\n+int\n+f15 (int x)\n+{\n+  return __builtin_ffs (x) > __SIZEOF_INT__ * __CHAR_BIT__;\n+}\n+\n+int\n+f16 (int x)\n+{\n+  return 17 + (__builtin_ffs (x) <= __SIZEOF_INT__ * __CHAR_BIT__);\n+}\n+\n+/* { dg-final { scan-tree-dump-times \"i_\\[0-9]*\\\\\\(D\\\\\\) & 63\" 1 \"optimized\" } } */\n+/* { dg-final { scan-tree-dump-times \"i_\\[0-9]*\\\\\\(D\\\\\\) != 0\" 1 \"optimized\" } } */\n+\n+int\n+f17 (int i)\n+{\n+  return __builtin_ffs (i) > 6;\n+}\n+\n+/* { dg-final { scan-tree-dump-times \"j_\\[0-9]*\\\\\\(D\\\\\\) & 4095\" 1 \"optimized\" } } */\n+/* { dg-final { scan-tree-dump-times \"j_\\[0-9]*\\\\\\(D\\\\\\) == 0\" 1 \"optimized\" } } */\n+\n+int\n+f18 (int j)\n+{\n+  return __builtin_ffs (j) <= 12;\n+}\n+\n+/* { dg-final { scan-tree-dump-times \"k_\\[0-9]*\\\\\\(D\\\\\\) == -2147483648\" 1 \"optimized\" { target int32 } } } */\n+\n+int\n+f19 (int k)\n+{\n+  return __builtin_ffs (k) > __SIZEOF_INT__ * __CHAR_BIT__ - 1;\n+}\n+\n+/* { dg-final { scan-tree-dump-times \"l_\\[0-9]*\\\\\\(D\\\\\\) != -2147483648\" 1 \"optimized\" { target int32 } } } */\n+\n+int\n+f20 (int l)\n+{\n+  return __builtin_ffs (l) <= __SIZEOF_INT__ * __CHAR_BIT__ - 1;\n+}\n+\n+/* { dg-final { scan-tree-dump-times \"m_\\[0-9]*\\\\\\(D\\\\\\) & 1073741823\" 1 \"optimized\" { target int32 } } } */\n+/* { dg-final { scan-tree-dump-times \"m_\\[0-9]*\\\\\\(D\\\\\\) != 0\" 1 \"optimized\" } } */\n+\n+int\n+f21 (int m)\n+{\n+  return __builtin_ffs (m) > __SIZEOF_INT__ * __CHAR_BIT__ - 2;\n+}\n+\n+/* { dg-final { scan-tree-dump-times \"n_\\[0-9]*\\\\\\(D\\\\\\) & 1073741823\" 1 \"optimized\" { target int32 } } } */\n+/* { dg-final { scan-tree-dump-times \"n_\\[0-9]*\\\\\\(D\\\\\\) == 0\" 1 \"optimized\" } } */\n+\n+int\n+f22 (int n)\n+{\n+  return __builtin_ffs (n) <= __SIZEOF_INT__ * __CHAR_BIT__ - 2;\n+}"}]}