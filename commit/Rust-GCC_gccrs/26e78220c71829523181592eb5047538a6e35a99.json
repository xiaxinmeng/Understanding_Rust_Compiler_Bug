{"sha": "26e78220c71829523181592eb5047538a6e35a99", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjZlNzgyMjBjNzE4Mjk1MjMxODE1OTJlYjUwNDc1MzhhNmUzNWE5OQ==", "commit": {"author": {"name": "Iain Sandoe", "email": "iain@sandoe.co.uk", "date": "2020-02-23T15:44:20Z"}, "committer": {"name": "Iain Sandoe", "email": "iain@sandoe.co.uk", "date": "2020-03-01T17:18:45Z"}, "message": "coroutines: Test that we correctly use class data members.\n\nImprove test coverage, NFC.\n\ngcc/testsuite/ChangeLog:\n\n2020-03-01 Iain Sandoe <iain@sandoe.co.uk>\n\n\t* g++.dg/coroutines/torture/class-07-data-member.C: New test.", "tree": {"sha": "15ea917a6c6d1398b7c415c1511cfec7ea942c44", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/15ea917a6c6d1398b7c415c1511cfec7ea942c44"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/26e78220c71829523181592eb5047538a6e35a99", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/26e78220c71829523181592eb5047538a6e35a99", "html_url": "https://github.com/Rust-GCC/gccrs/commit/26e78220c71829523181592eb5047538a6e35a99", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/26e78220c71829523181592eb5047538a6e35a99/comments", "author": {"login": "iains", "id": 4039407, "node_id": "MDQ6VXNlcjQwMzk0MDc=", "avatar_url": "https://avatars.githubusercontent.com/u/4039407?v=4", "gravatar_id": "", "url": "https://api.github.com/users/iains", "html_url": "https://github.com/iains", "followers_url": "https://api.github.com/users/iains/followers", "following_url": "https://api.github.com/users/iains/following{/other_user}", "gists_url": "https://api.github.com/users/iains/gists{/gist_id}", "starred_url": "https://api.github.com/users/iains/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/iains/subscriptions", "organizations_url": "https://api.github.com/users/iains/orgs", "repos_url": "https://api.github.com/users/iains/repos", "events_url": "https://api.github.com/users/iains/events{/privacy}", "received_events_url": "https://api.github.com/users/iains/received_events", "type": "User", "site_admin": false}, "committer": {"login": "iains", "id": 4039407, "node_id": "MDQ6VXNlcjQwMzk0MDc=", "avatar_url": "https://avatars.githubusercontent.com/u/4039407?v=4", "gravatar_id": "", "url": "https://api.github.com/users/iains", "html_url": "https://github.com/iains", "followers_url": "https://api.github.com/users/iains/followers", "following_url": "https://api.github.com/users/iains/following{/other_user}", "gists_url": "https://api.github.com/users/iains/gists{/gist_id}", "starred_url": "https://api.github.com/users/iains/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/iains/subscriptions", "organizations_url": "https://api.github.com/users/iains/orgs", "repos_url": "https://api.github.com/users/iains/repos", "events_url": "https://api.github.com/users/iains/events{/privacy}", "received_events_url": "https://api.github.com/users/iains/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "957a1b14e99596610abb0777ca86a1c80dde24e0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/957a1b14e99596610abb0777ca86a1c80dde24e0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/957a1b14e99596610abb0777ca86a1c80dde24e0"}], "stats": {"total": 65, "additions": 65, "deletions": 0}, "files": [{"sha": "35b1a3c2bfcaaff1ba2e49c0a9b26ec113e9298d", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/26e78220c71829523181592eb5047538a6e35a99/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/26e78220c71829523181592eb5047538a6e35a99/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=26e78220c71829523181592eb5047538a6e35a99", "patch": "@@ -1,3 +1,7 @@\n+2020-03-01 Iain Sandoe <iain@sandoe.co.uk>\n+\n+\t* g++.dg/coroutines/torture/class-07-data-member.C: New test.\n+\n 2020-03-01  Paul Thomas  <pault@gcc.gnu.org>\n \n \tPR fortran/92976"}, {"sha": "00a0df69758eb88d1188f30bce9d57b668b48cb9", "filename": "gcc/testsuite/g++.dg/coroutines/torture/class-07-data-member.C", "status": "added", "additions": 61, "deletions": 0, "changes": 61, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/26e78220c71829523181592eb5047538a6e35a99/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcoroutines%2Ftorture%2Fclass-07-data-member.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/26e78220c71829523181592eb5047538a6e35a99/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcoroutines%2Ftorture%2Fclass-07-data-member.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcoroutines%2Ftorture%2Fclass-07-data-member.C?ref=26e78220c71829523181592eb5047538a6e35a99", "patch": "@@ -0,0 +1,61 @@\n+//  { dg-do run }\n+\n+// Show that we are correctly accessing class variables.\n+\n+#include \"../coro.h\"\n+\n+// boiler-plate for tests of codegen\n+#include \"../coro1-ret-int-yield-int.h\"\n+\n+class Foo\n+{\n+  int v;\n+  public:\n+  Foo () : v(0) {};\n+  Foo (int x) : v(x) {};\n+  coro1 meth ()\n+    {\n+      PRINT (\"coro1: about to return\");\n+      co_return v++;\n+    }\n+};\n+\n+int main ()\n+{\n+  Foo inst (42);\n+  int y;\n+  {\n+    PRINT (\"main: create coro1 [instance 1]\");\n+    coro1 x = inst.meth ();\n+    if (x.handle.done())\n+      abort();\n+    PRINT (\"main: got coro1 - resuming (initial suspend)\");\n+    x.handle.resume();\n+    PRINT (\"main: after resume\");\n+    y = x.handle.promise().get_value();\n+    if ( y != 42 )\n+      abort ();\n+    if (!x.handle.done())\n+      {\n+        PRINT (\"main: apparently not done...\");\n+        abort ();\n+      }\n+  }\n+  PRINT (\"main: create coro1 [instance 2]\");\n+  coro1 p = inst.meth ();\n+  if (p.handle.done())\n+    abort();\n+  PRINT (\"main: got coro1 - resuming (initial suspend)\");\n+  p.handle.resume();\n+  PRINT (\"main: after resume\");\n+  y = p.handle.promise().get_value();\n+  if ( y != 43 )\n+    abort ();\n+  if (!p.handle.done())\n+    {\n+      PRINT (\"main: apparently not done...\");\n+      abort ();\n+    }\n+  PRINT (\"main: returning\");\n+  return 0;\n+}"}]}