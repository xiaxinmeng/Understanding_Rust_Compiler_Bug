{"sha": "83a658ca0b5164509f86a2b674192e50a934c6db", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODNhNjU4Y2EwYjUxNjQ1MDlmODZhMmI2NzQxOTJlNTBhOTM0YzZkYg==", "commit": {"author": {"name": "Ian Lance Taylor", "email": "iant@golang.org", "date": "2018-04-17T13:59:38Z"}, "committer": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2018-04-17T13:59:38Z"}, "message": "backtrace.c (backtrace_full): When testing whether we can allocate memory...\n\n\t* backtrace.c (backtrace_full): When testing whether we can\n\tallocate memory, call mmap directly, and munmap the memory.\n\nFixes https://github.com/ianlancetaylor/libbacktrace/issues/13 .\n\nFrom-SVN: r259434", "tree": {"sha": "dbceef94aeb346b1a317fc802cf86815e747eaa6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/dbceef94aeb346b1a317fc802cf86815e747eaa6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/83a658ca0b5164509f86a2b674192e50a934c6db", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/83a658ca0b5164509f86a2b674192e50a934c6db", "html_url": "https://github.com/Rust-GCC/gccrs/commit/83a658ca0b5164509f86a2b674192e50a934c6db", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/83a658ca0b5164509f86a2b674192e50a934c6db/comments", "author": {"login": "ianlancetaylor", "id": 3194333, "node_id": "MDQ6VXNlcjMxOTQzMzM=", "avatar_url": "https://avatars.githubusercontent.com/u/3194333?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ianlancetaylor", "html_url": "https://github.com/ianlancetaylor", "followers_url": "https://api.github.com/users/ianlancetaylor/followers", "following_url": "https://api.github.com/users/ianlancetaylor/following{/other_user}", "gists_url": "https://api.github.com/users/ianlancetaylor/gists{/gist_id}", "starred_url": "https://api.github.com/users/ianlancetaylor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ianlancetaylor/subscriptions", "organizations_url": "https://api.github.com/users/ianlancetaylor/orgs", "repos_url": "https://api.github.com/users/ianlancetaylor/repos", "events_url": "https://api.github.com/users/ianlancetaylor/events{/privacy}", "received_events_url": "https://api.github.com/users/ianlancetaylor/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "50ffe7adc0d686e9f193c4e53ea2f0d617309f35", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/50ffe7adc0d686e9f193c4e53ea2f0d617309f35", "html_url": "https://github.com/Rust-GCC/gccrs/commit/50ffe7adc0d686e9f193c4e53ea2f0d617309f35"}], "stats": {"total": 49, "additions": 38, "deletions": 11}, "files": [{"sha": "b26da88223f5f52af7f1261b1145a7c6f7d2a783", "filename": "libbacktrace/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/83a658ca0b5164509f86a2b674192e50a934c6db/libbacktrace%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/83a658ca0b5164509f86a2b674192e50a934c6db/libbacktrace%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libbacktrace%2FChangeLog?ref=83a658ca0b5164509f86a2b674192e50a934c6db", "patch": "@@ -1,3 +1,8 @@\n+2018-04-17  Ian Lance Taylor  <iant@golang.org>\n+\n+\t* backtrace.c (backtrace_full): When testing whether we can\n+\tallocate memory, call mmap directly, and munmap the memory.\n+\n 2018-04-04  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR other/85161"}, {"sha": "319edcf12eb963065a1ca405f8dc6c64fd44d69d", "filename": "libbacktrace/backtrace.c", "status": "modified", "additions": 33, "deletions": 11, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/83a658ca0b5164509f86a2b674192e50a934c6db/libbacktrace%2Fbacktrace.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/83a658ca0b5164509f86a2b674192e50a934c6db/libbacktrace%2Fbacktrace.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libbacktrace%2Fbacktrace.c?ref=83a658ca0b5164509f86a2b674192e50a934c6db", "patch": "@@ -32,12 +32,26 @@ POSSIBILITY OF SUCH DAMAGE.  */\n \n #include \"config.h\"\n \n+#include <unistd.h>\n #include <sys/types.h>\n \n+#if !BACKTRACE_USES_MALLOC\n+#include <sys/mman.h>\n+#endif\n+\n #include \"unwind.h\"\n #include \"backtrace.h\"\n+#include \"backtrace-supported.h\"\n #include \"internal.h\"\n \n+#ifndef MAP_ANONYMOUS\n+#define MAP_ANONYMOUS MAP_ANON\n+#endif\n+\n+#ifndef MAP_FAILED\n+#define MAP_FAILED ((void *)-1)\n+#endif\n+\n /* The main backtrace_full routine.  */\n \n /* Data passed through _Unwind_Backtrace.  */\n@@ -104,7 +118,6 @@ backtrace_full (struct backtrace_state *state, int skip,\n \t\tbacktrace_error_callback error_callback, void *data)\n {\n   struct backtrace_data bdata;\n-  void *p;\n \n   bdata.skip = skip + 1;\n   bdata.state = state;\n@@ -113,16 +126,25 @@ backtrace_full (struct backtrace_state *state, int skip,\n   bdata.data = data;\n   bdata.ret = 0;\n \n-  /* If we can't allocate any memory at all, don't try to produce\n-     file/line information.  */\n-  p = backtrace_alloc (state, 4096, NULL, NULL);\n-  if (p == NULL)\n-    bdata.can_alloc = 0;\n-  else\n-    {\n-      backtrace_free (state, p, 4096, NULL, NULL);\n-      bdata.can_alloc = 1;\n-    }\n+#if !BACKTRACE_USES_MALLOC\n+  {\n+    size_t pagesize;\n+    void *page;\n+\n+    /* If we can't allocate any memory at all, don't try to produce\n+       file/line information.  */\n+    pagesize = getpagesize ();\n+    page = mmap (NULL, pagesize, PROT_READ | PROT_WRITE, \n+\t\t MAP_PRIVATE | MAP_ANONYMOUS, -1, 0);\n+    if (page == MAP_FAILED)\n+      bdata.can_alloc = 0;\n+    else\n+      {\n+\tmunmap (page, pagesize);\n+\tbdata.can_alloc = 1;\n+      }\n+  }\n+#endif\n \n   _Unwind_Backtrace (unwind, &bdata);\n   return bdata.ret;"}]}