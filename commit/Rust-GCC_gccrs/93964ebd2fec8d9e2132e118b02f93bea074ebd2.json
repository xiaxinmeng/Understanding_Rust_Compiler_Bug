{"sha": "93964ebd2fec8d9e2132e118b02f93bea074ebd2", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTM5NjRlYmQyZmVjOGQ5ZTIxMzJlMTE4YjAyZjkzYmVhMDc0ZWJkMg==", "commit": {"author": {"name": "Martin Liska", "email": "mliska@suse.cz", "date": "2019-03-11T13:59:04Z"}, "committer": {"name": "Martin Liska", "email": "marxin@gcc.gnu.org", "date": "2019-03-11T13:59:04Z"}, "message": "Wrap apostrophes in gcc internal format with %'.\n\n2019-03-11  Martin Liska  <mliska@suse.cz>\n\n\t* check-internal-format-escaping.py: Uncomment apostrophes\n\tcheck.\n2019-03-11  Martin Liska  <mliska@suse.cz>\n\n\t* collect-utils.c (collect_wait): Wrap apostrophes\n\tin gcc internal format with %'.\n\t* collect2.c (main): Likewise.\n\t(scan_prog_file): Likewise.\n\t(scan_libraries): Likewise.\n\t* config/i386/i386.c (ix86_expand_call): Likewise.\n\t(ix86_handle_interrupt_attribute): Likewise.\n\t* config/nds32/nds32-intrinsic.c (nds32_expand_builtin_impl): Likewise.\n\t* config/nds32/nds32.c (nds32_insert_attributes): Likewise.\n\t* config/rl78/rl78.c (rl78_handle_saddr_attribute): Likewise.\n\t* lto-wrapper.c (find_crtoffloadtable): Likewise.\n\t* symtab.c (symtab_node::verify_base): Likewise.\n\t* tree-cfg.c (verify_gimple_label): Likewise.\n\t* tree.c (verify_type_variant): Likewise.\n2019-03-11  Martin Liska  <mliska@suse.cz>\n\n\t* c-opts.c (c_common_post_options): Wrap apostrophes\n\tin gcc internal format with %'.\n2019-03-11  Martin Liska  <mliska@suse.cz>\n\n\t* cvt.c (build_expr_type_conversion): Wrap apostrophes\n\tin gcc internal format with %'.\n\t* decl.c (check_no_redeclaration_friend_default_args): Likewise.\n\t(grokfndecl): Likewise.\n\t* name-lookup.c (do_pushtag): Likewise.\n\t* pt.c (unify_parameter_deduction_failure): Likewise.\n\t(unify_template_deduction_failure): Likewise.\n\nFrom-SVN: r269587", "tree": {"sha": "8fda972202e700a77c6634e36bb92060c51041a4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8fda972202e700a77c6634e36bb92060c51041a4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/93964ebd2fec8d9e2132e118b02f93bea074ebd2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/93964ebd2fec8d9e2132e118b02f93bea074ebd2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/93964ebd2fec8d9e2132e118b02f93bea074ebd2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/93964ebd2fec8d9e2132e118b02f93bea074ebd2/comments", "author": {"login": "marxin", "id": 2658545, "node_id": "MDQ6VXNlcjI2NTg1NDU=", "avatar_url": "https://avatars.githubusercontent.com/u/2658545?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marxin", "html_url": "https://github.com/marxin", "followers_url": "https://api.github.com/users/marxin/followers", "following_url": "https://api.github.com/users/marxin/following{/other_user}", "gists_url": "https://api.github.com/users/marxin/gists{/gist_id}", "starred_url": "https://api.github.com/users/marxin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marxin/subscriptions", "organizations_url": "https://api.github.com/users/marxin/orgs", "repos_url": "https://api.github.com/users/marxin/repos", "events_url": "https://api.github.com/users/marxin/events{/privacy}", "received_events_url": "https://api.github.com/users/marxin/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "a3f9f006a8e24bfc2a045b918a4f3665407f0018", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a3f9f006a8e24bfc2a045b918a4f3665407f0018", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a3f9f006a8e24bfc2a045b918a4f3665407f0018"}], "stats": {"total": 109, "additions": 73, "deletions": 36}, "files": [{"sha": "74e9592f8c29b85950f8a4786a0d2cef296dcdda", "filename": "contrib/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/93964ebd2fec8d9e2132e118b02f93bea074ebd2/contrib%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/93964ebd2fec8d9e2132e118b02f93bea074ebd2/contrib%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/contrib%2FChangeLog?ref=93964ebd2fec8d9e2132e118b02f93bea074ebd2", "patch": "@@ -1,3 +1,8 @@\n+2019-03-11  Martin Liska  <mliska@suse.cz>\n+\n+\t* check-internal-format-escaping.py: Uncomment apostrophes\n+\tcheck.\n+\n 2019-03-11  Martin Liska  <mliska@suse.cz>\n \n \t* check-internal-format-escaping.py: New file."}, {"sha": "5da56b59dd6bf7a2ee06d6baae6f4d88036b9b84", "filename": "contrib/check-internal-format-escaping.py", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/93964ebd2fec8d9e2132e118b02f93bea074ebd2/contrib%2Fcheck-internal-format-escaping.py", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/93964ebd2fec8d9e2132e118b02f93bea074ebd2/contrib%2Fcheck-internal-format-escaping.py", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/contrib%2Fcheck-internal-format-escaping.py?ref=93964ebd2fec8d9e2132e118b02f93bea074ebd2", "patch": "@@ -56,8 +56,8 @@\n                             print('%s: %s' % (origin, text))\n                     elif p.startswith('__builtin_'):\n                         print('%s: %s' % (origin, text))\n-#                    if re.search(\"[a-zA-Z]'[a-zA-Z]\", p):\n-#                        print('%s: %s' % (origin, text))\n+                    if re.search(\"[a-zA-Z]'[a-zA-Z]\", p):\n+                        print('%s: %s' % (origin, text))\n             j += 1\n \n         origin = None"}, {"sha": "61e23a645b167c2559004a1712f7a30477c9cdac", "filename": "gcc/ChangeLog", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/93964ebd2fec8d9e2132e118b02f93bea074ebd2/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/93964ebd2fec8d9e2132e118b02f93bea074ebd2/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=93964ebd2fec8d9e2132e118b02f93bea074ebd2", "patch": "@@ -1,3 +1,20 @@\n+2019-03-11  Martin Liska  <mliska@suse.cz>\n+\n+\t* collect-utils.c (collect_wait): Wrap apostrophes\n+\tin gcc internal format with %'.\n+\t* collect2.c (main): Likewise.\n+\t(scan_prog_file): Likewise.\n+\t(scan_libraries): Likewise.\n+\t* config/i386/i386.c (ix86_expand_call): Likewise.\n+\t(ix86_handle_interrupt_attribute): Likewise.\n+\t* config/nds32/nds32-intrinsic.c (nds32_expand_builtin_impl): Likewise.\n+\t* config/nds32/nds32.c (nds32_insert_attributes): Likewise.\n+\t* config/rl78/rl78.c (rl78_handle_saddr_attribute): Likewise.\n+\t* lto-wrapper.c (find_crtoffloadtable): Likewise.\n+\t* symtab.c (symtab_node::verify_base): Likewise.\n+\t* tree-cfg.c (verify_gimple_label): Likewise.\n+\t* tree.c (verify_type_variant): Likewise.\n+\n 2019-03-11  Martin Liska  <mliska@suse.cz>\n \n \t* builtins.c (expand_builtin_thread_pointer): Wrap an option name"}, {"sha": "885e3265d5b79dd6bf589c89c54a6a1a5e21fa3b", "filename": "gcc/c-family/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/93964ebd2fec8d9e2132e118b02f93bea074ebd2/gcc%2Fc-family%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/93964ebd2fec8d9e2132e118b02f93bea074ebd2/gcc%2Fc-family%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2FChangeLog?ref=93964ebd2fec8d9e2132e118b02f93bea074ebd2", "patch": "@@ -1,3 +1,8 @@\n+2019-03-11  Martin Liska  <mliska@suse.cz>\n+\n+\t* c-opts.c (c_common_post_options): Wrap apostrophes\n+\tin gcc internal format with %'.\n+\n 2019-03-11  Martin Liska  <mliska@suse.cz>\n \n \t* c-attribs.c (handle_nocf_check_attribute): Wrap an option name"}, {"sha": "daa02a5e72d1aebe90e2b4cfd760c4609886ef6c", "filename": "gcc/c-family/c-opts.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/93964ebd2fec8d9e2132e118b02f93bea074ebd2/gcc%2Fc-family%2Fc-opts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/93964ebd2fec8d9e2132e118b02f93bea074ebd2/gcc%2Fc-family%2Fc-opts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-opts.c?ref=93964ebd2fec8d9e2132e118b02f93bea074ebd2", "patch": "@@ -945,7 +945,7 @@ c_common_post_options (const char **pfilename)\n       if (flag_abi_version == latest_abi_version)\n \t{\n \t  auto_diagnostic_group d;\n-\t  if (warning (OPT_Wabi, \"%<-Wabi%> won't warn about anything\"))\n+\t  if (warning (OPT_Wabi, \"%<-Wabi%> won%'t warn about anything\"))\n \t    {\n \t      inform (input_location, \"%<-Wabi%> warns about differences \"\n \t\t      \"from the most up-to-date ABI, which is also used \""}, {"sha": "1e034433b802e4421a7791838a19175855a8ee87", "filename": "gcc/collect-utils.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/93964ebd2fec8d9e2132e118b02f93bea074ebd2/gcc%2Fcollect-utils.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/93964ebd2fec8d9e2132e118b02f93bea074ebd2/gcc%2Fcollect-utils.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcollect-utils.c?ref=93964ebd2fec8d9e2132e118b02f93bea074ebd2", "patch": "@@ -65,7 +65,7 @@ collect_wait (const char *prog, struct pex_obj *pex)\n   int status;\n \n   if (!pex_get_status (pex, 1, &status))\n-    fatal_error (input_location, \"can't get program status: %m\");\n+    fatal_error (input_location, \"can%'t get program status: %m\");\n   pex_free (pex);\n \n   if (response_file && !save_temps)"}, {"sha": "9d7de940ec1786d6b8d1a29e61c9199989477b26", "filename": "gcc/collect2.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/93964ebd2fec8d9e2132e118b02f93bea074ebd2/gcc%2Fcollect2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/93964ebd2fec8d9e2132e118b02f93bea074ebd2/gcc%2Fcollect2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcollect2.c?ref=93964ebd2fec8d9e2132e118b02f93bea074ebd2", "patch": "@@ -1396,7 +1396,7 @@ main (int argc, char **argv)\n \n \t\t  stream = fopen (list_filename, \"r\");\n \t\t  if (stream == NULL)\n-\t\t    fatal_error (input_location, \"can't open %s: %m\",\n+\t\t    fatal_error (input_location, \"can%'t open %s: %m\",\n \t\t\t\t list_filename);\n \n \t\t  while (fgets (buf, sizeof buf, stream) != NULL)\n@@ -2470,7 +2470,7 @@ scan_prog_file (const char *prog_name, scanpass which_pass,\n \n   inf = pex_read_output (pex, 0);\n   if (inf == NULL)\n-    fatal_error (input_location, \"can't open nm output: %m\");\n+    fatal_error (input_location, \"can%'t open nm output: %m\");\n \n   if (debug)\n     fprintf (stderr, \"\\nnm output with constructors/destructors.\\n\");\n@@ -2639,7 +2639,7 @@ scan_libraries (const char *prog_name)\n \n   inf = pex_read_output (pex, 0);\n   if (inf == NULL)\n-    fatal_error (input_location, \"can't open ldd output: %m\");\n+    fatal_error (input_location, \"can%'t open ldd output: %m\");\n \n   if (debug)\n     notice (\"\\nldd output with constructors/destructors.\\n\");"}, {"sha": "896c6f33d40f9a746d00469e7dcee950958d2815", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/93964ebd2fec8d9e2132e118b02f93bea074ebd2/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/93964ebd2fec8d9e2132e118b02f93bea074ebd2/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=93964ebd2fec8d9e2132e118b02f93bea074ebd2", "patch": "@@ -28399,7 +28399,7 @@ ix86_expand_call (rtx retval, rtx fnaddr, rtx callarg1,\n       if (fndecl\n \t  && (lookup_attribute (\"interrupt\",\n \t\t\t\tTYPE_ATTRIBUTES (TREE_TYPE (fndecl)))))\n-\terror (\"interrupt service routine can't be called directly\");\n+\terror (\"interrupt service routine can%'t be called directly\");\n     }\n   else\n     fndecl = NULL_TREE;\n@@ -38375,7 +38375,7 @@ ix86_expand_builtin (tree exp, rtx target, rtx subtarget,\n       mode0 = insn_data[icode].operand[0].mode;\n       if (!insn_data[icode].operand[0].predicate (op0, mode0))\n \t{\n-\t  error (\"the xabort's argument must be an 8-bit immediate\");\n+\t  error (\"xabort argument must be an 8-bit immediate\");\n \t  return const0_rtx;\n \t}\n       emit_insn (gen_xabort (op0));\n@@ -41440,7 +41440,7 @@ ix86_handle_interrupt_attribute (tree *node, tree, tree, int, bool *)\n     error (\"interrupt service routine can only have a pointer argument \"\n \t   \"and an optional integer argument\");\n   if (! VOID_TYPE_P (return_type))\n-    error (\"interrupt service routine can't have non-void return value\");\n+    error (\"interrupt service routine can%'t have non-void return value\");\n \n   return NULL_TREE;\n }"}, {"sha": "c78dc935bf3e671d1a40d4bd5adc6f6d6d56b44e", "filename": "gcc/config/nds32/nds32-intrinsic.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/93964ebd2fec8d9e2132e118b02f93bea074ebd2/gcc%2Fconfig%2Fnds32%2Fnds32-intrinsic.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/93964ebd2fec8d9e2132e118b02f93bea074ebd2/gcc%2Fconfig%2Fnds32%2Fnds32-intrinsic.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fnds32%2Fnds32-intrinsic.c?ref=93964ebd2fec8d9e2132e118b02f93bea074ebd2", "patch": "@@ -1000,7 +1000,7 @@ nds32_expand_builtin_impl (tree exp,\n   if (!NDS32_EXT_DSP_P ()\n       && fcode > NDS32_BUILTIN_DSP_BEGIN\n       && fcode < NDS32_BUILTIN_DSP_END)\n-    error (\"don't support DSP extension instructions\");\n+    error (\"don%'t support DSP extension instructions\");\n \n   switch (fcode)\n     {\n@@ -1059,7 +1059,7 @@ nds32_expand_builtin_impl (tree exp,\n     case NDS32_BUILTIN_CLO:\n       if (!TARGET_EXT_PERF)\n \t{\n-\t  error (\"don't support performance extension instructions\");\n+\t  error (\"don%'t support performance extension instructions\");\n \t  return NULL_RTX;\n \t}\n       break;\n@@ -1071,7 +1071,7 @@ nds32_expand_builtin_impl (tree exp,\n     case NDS32_BUILTIN_BSP:\n       if (!TARGET_EXT_PERF2)\n \t{\n-\t  error (\"don't support performance extension \"\n+\t  error (\"don%'t support performance extension \"\n \t\t \"version 2 instructions\");\n \t  return NULL_RTX;\n \t}\n@@ -1083,7 +1083,7 @@ nds32_expand_builtin_impl (tree exp,\n     case NDS32_BUILTIN_FLMISM:\n       if (!TARGET_EXT_STRING)\n \t{\n-\t  error (\"don't support string extension instructions\");\n+\t  error (\"don%'t support string extension instructions\");\n \t  return NULL_RTX;\n \t}\n       break;"}, {"sha": "f2723ea4cdcdf2dce588a9cd4b7f127e55c0d088", "filename": "gcc/config/nds32/nds32.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/93964ebd2fec8d9e2132e118b02f93bea074ebd2/gcc%2Fconfig%2Fnds32%2Fnds32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/93964ebd2fec8d9e2132e118b02f93bea074ebd2/gcc%2Fconfig%2Fnds32%2Fnds32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fnds32%2Fnds32.c?ref=93964ebd2fec8d9e2132e118b02f93bea074ebd2", "patch": "@@ -3944,7 +3944,7 @@ nds32_insert_attributes (tree decl, tree *attributes)\n \tnew_attrs = tree_cons (get_identifier (\"noclone\"), NULL, new_attrs);\n \n       if (!TREE_PUBLIC (decl))\n-\terror(\"indirect_call attribute can't apply for static function\");\n+\terror (\"indirect_call attribute can%'t apply for static function\");\n \n       *attributes = new_attrs;\n     }"}, {"sha": "d2caa118281cc563806ba77928b3d11a2f67a4b9", "filename": "gcc/config/rl78/rl78.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/93964ebd2fec8d9e2132e118b02f93bea074ebd2/gcc%2Fconfig%2Frl78%2Frl78.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/93964ebd2fec8d9e2132e118b02f93bea074ebd2/gcc%2Fconfig%2Frl78%2Frl78.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frl78%2Frl78.c?ref=93964ebd2fec8d9e2132e118b02f93bea074ebd2", "patch": "@@ -864,7 +864,7 @@ rl78_handle_saddr_attribute (tree * node,\n \n   if (TREE_CODE (* node) == FUNCTION_DECL)\n     {\n-      warning (OPT_Wattributes, \"%qE attribute doesn't apply to functions\",\n+      warning (OPT_Wattributes, \"%qE attribute doesn%'t apply to functions\",\n \t       name);\n       * no_add_attrs = true;\n     }"}, {"sha": "8cad038fd1c91d344a68c100669f4e89f67ad400", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/93964ebd2fec8d9e2132e118b02f93bea074ebd2/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/93964ebd2fec8d9e2132e118b02f93bea074ebd2/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=93964ebd2fec8d9e2132e118b02f93bea074ebd2", "patch": "@@ -1,3 +1,13 @@\n+2019-03-11  Martin Liska  <mliska@suse.cz>\n+\n+\t* cvt.c (build_expr_type_conversion): Wrap apostrophes\n+\tin gcc internal format with %'.\n+\t* decl.c (check_no_redeclaration_friend_default_args): Likewise.\n+\t(grokfndecl): Likewise.\n+\t* name-lookup.c (do_pushtag): Likewise.\n+\t* pt.c (unify_parameter_deduction_failure): Likewise.\n+\t(unify_template_deduction_failure): Likewise.\n+\n 2019-03-11  Martin Liska  <mliska@suse.cz>\n \n \t* call.c (convert_arg_to_ellipsis): Wrap an option name"}, {"sha": "3b8656c2a6b48c073fb64e98067f7676b910e2ff", "filename": "gcc/cp/cvt.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/93964ebd2fec8d9e2132e118b02f93bea074ebd2/gcc%2Fcp%2Fcvt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/93964ebd2fec8d9e2132e118b02f93bea074ebd2/gcc%2Fcp%2Fcvt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcvt.c?ref=93964ebd2fec8d9e2132e118b02f93bea074ebd2", "patch": "@@ -1822,7 +1822,7 @@ build_expr_type_conversion (int desires, tree expr, bool complain)\n \t  if (TREE_CODE (cand) == TEMPLATE_DECL)\n \t    {\n \t      if (complain)\n-\t\terror (\"default type conversion can't deduce template\"\n+\t\terror (\"default type conversion can%'t deduce template\"\n \t\t       \" argument for %qD\", cand);\n \t      return error_mark_node;\n \t    }"}, {"sha": "c8435e29491e029e7999455cf5082384608e3060", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/93964ebd2fec8d9e2132e118b02f93bea074ebd2/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/93964ebd2fec8d9e2132e118b02f93bea074ebd2/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=93964ebd2fec8d9e2132e118b02f93bea074ebd2", "patch": "@@ -1305,7 +1305,7 @@ check_no_redeclaration_friend_default_args (tree olddecl, tree newdecl,\n \tauto_diagnostic_group d;\n \tif (permerror (DECL_SOURCE_LOCATION (newdecl),\n \t\t       \"friend declaration of %q#D specifies default \"\n-\t\t       \"arguments and isn't the only declaration\", newdecl))\n+\t\t       \"arguments and isn%'t the only declaration\", newdecl))\n \t  inform (DECL_SOURCE_LOCATION (olddecl),\n \t\t  \"previous declaration of %q#D\", olddecl);\n \treturn;\n@@ -8913,7 +8913,7 @@ grokfndecl (tree ctype,\n \t  {\n \t    permerror (DECL_SOURCE_LOCATION (decl),\n \t\t       \"friend declaration of %qD specifies default \"\n-\t\t       \"arguments and isn't a definition\", decl);\n+\t\t       \"arguments and isn%'t a definition\", decl);\n \t    break;\n \t  }\n     }"}, {"sha": "4ca976c812d84d87c69147276f834c6a582b1ff8", "filename": "gcc/cp/name-lookup.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/93964ebd2fec8d9e2132e118b02f93bea074ebd2/gcc%2Fcp%2Fname-lookup.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/93964ebd2fec8d9e2132e118b02f93bea074ebd2/gcc%2Fcp%2Fname-lookup.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fname-lookup.c?ref=93964ebd2fec8d9e2132e118b02f93bea074ebd2", "patch": "@@ -6897,7 +6897,7 @@ do_pushtag (tree name, tree type, tag_scope scope)\n \t      && !CLASSTYPE_TEMPLATE_INFO (type))\n \t    {\n \t      error (\"declaration of %<std::initializer_list%> does not match \"\n-\t\t     \"%<#include <initializer_list>%>, isn't a template\");\n+\t\t     \"%<#include <initializer_list>%>, isn%'t a template\");\n \t      return error_mark_node;\n \t    }\n \t}"}, {"sha": "2ab6e273c3ad787c17a1a27958beceae8ab17c8c", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/93964ebd2fec8d9e2132e118b02f93bea074ebd2/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/93964ebd2fec8d9e2132e118b02f93bea074ebd2/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=93964ebd2fec8d9e2132e118b02f93bea074ebd2", "patch": "@@ -6364,7 +6364,7 @@ unify_parameter_deduction_failure (bool explain_p, tree parm)\n {\n   if (explain_p)\n     inform (input_location,\n-\t    \"  couldn't deduce template parameter %qD\", parm);\n+\t    \"  couldn%'t deduce template parameter %qD\", parm);\n   return unify_invalid (explain_p);\n }\n \n@@ -6540,7 +6540,7 @@ unify_template_deduction_failure (bool explain_p, tree parm, tree arg)\n {\n   if (explain_p)\n     inform (input_location,\n-\t    \"  can't deduce a template for %qT from non-template type %qT\",\n+\t    \"  can%'t deduce a template for %qT from non-template type %qT\",\n \t    parm, arg);\n   return unify_invalid (explain_p);\n }"}, {"sha": "2cd69f24048923d2f79200e9043f27c41b722288", "filename": "gcc/lto-wrapper.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/93964ebd2fec8d9e2132e118b02f93bea074ebd2/gcc%2Flto-wrapper.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/93964ebd2fec8d9e2132e118b02f93bea074ebd2/gcc%2Flto-wrapper.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flto-wrapper.c?ref=93964ebd2fec8d9e2132e118b02f93bea074ebd2", "patch": "@@ -960,7 +960,7 @@ find_crtoffloadtable (void)\n       }\n   if (i == n_paths)\n     fatal_error (input_location,\n-\t\t \"installation error, can't find crtoffloadtable.o\");\n+\t\t \"installation error, can%'t find crtoffloadtable.o\");\n \n   free_array_of_ptrs ((void **) paths, n_paths);\n }"}, {"sha": "c3c057d32831232a34666564a7abd5e2eeb518a2", "filename": "gcc/symtab.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/93964ebd2fec8d9e2132e118b02f93bea074ebd2/gcc%2Fsymtab.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/93964ebd2fec8d9e2132e118b02f93bea074ebd2/gcc%2Fsymtab.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsymtab.c?ref=93964ebd2fec8d9e2132e118b02f93bea074ebd2", "patch": "@@ -1155,7 +1155,7 @@ symtab_node::verify_base (void)\n     }\n   if (implicit_section && !get_section ())\n     {\n-      error (\"implicit_section flag is set but section isn't\");\n+      error (\"implicit_section flag is set but section isn%'t\");\n       error_found = true;\n     }\n   if (get_section () && get_comdat_group ()\n@@ -1174,14 +1174,14 @@ symtab_node::verify_base (void)\n \t  || strcmp (get_section(),\n \t\t     get_alias_target ()->get_section ())))\n     {\n-      error (\"Alias and target's section differs\");\n+      error (\"Alias and target%'s section differs\");\n       get_alias_target ()->dump (stderr);\n       error_found = true;\n     }\n   if (alias && definition\n       && get_comdat_group () != get_alias_target ()->get_comdat_group ())\n     {\n-      error (\"Alias and target's comdat groups differs\");\n+      error (\"Alias and target%'s comdat groups differs\");\n       get_alias_target ()->dump (stderr);\n       error_found = true;\n     }\n@@ -1196,7 +1196,7 @@ symtab_node::verify_base (void)\n \t    ultimate_transparent_alias_target (DECL_ASSEMBLER_NAME (to->decl)));\n       if (!symbol_table::assembler_names_equal_p (name1, name2))\n \t{\n-\t  error (\"Transparent alias and target's assembler names differs\");\n+\t  error (\"Transparent alias and target%'s assembler names differs\");\n \t  get_alias_target ()->dump (stderr);\n \t  error_found = true;\n \t}"}, {"sha": "805e8727ce0d9679309e889c3de68662e27c5ccb", "filename": "gcc/tree-cfg.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/93964ebd2fec8d9e2132e118b02f93bea074ebd2/gcc%2Ftree-cfg.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/93964ebd2fec8d9e2132e118b02f93bea074ebd2/gcc%2Ftree-cfg.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-cfg.c?ref=93964ebd2fec8d9e2132e118b02f93bea074ebd2", "patch": "@@ -4827,7 +4827,7 @@ verify_gimple_label (glabel *stmt)\n   if (!DECL_NONLOCAL (decl) && !FORCED_LABEL (decl)\n       && DECL_CONTEXT (decl) != current_function_decl)\n     {\n-      error (\"label's context is not the current function decl\");\n+      error (\"label%'s context is not the current function decl\");\n       err |= true;\n     }\n "}, {"sha": "02721cfc8a04b8e48241611cba03b44972354010", "filename": "gcc/tree.c", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/93964ebd2fec8d9e2132e118b02f93bea074ebd2/gcc%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/93964ebd2fec8d9e2132e118b02f93bea074ebd2/gcc%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.c?ref=93964ebd2fec8d9e2132e118b02f93bea074ebd2", "patch": "@@ -13815,9 +13815,9 @@ verify_type_variant (const_tree t, tree tv)\n \t\t\t\t\tTYPE_SIZE_UNIT (tv), 0));\n \t  error (\"type variant has different TYPE_SIZE_UNIT\");\n \t  debug_tree (tv);\n-\t  error (\"type variant's TYPE_SIZE_UNIT\");\n+\t  error (\"type variant%'s TYPE_SIZE_UNIT\");\n \t  debug_tree (TYPE_SIZE_UNIT (tv));\n-\t  error (\"type's TYPE_SIZE_UNIT\");\n+\t  error (\"type%'s TYPE_SIZE_UNIT\");\n \t  debug_tree (TYPE_SIZE_UNIT (t));\n \t  return false;\n \t}\n@@ -13888,9 +13888,9 @@ verify_type_variant (const_tree t, tree tv)\n     {\n       error (\"type variant has different TYPE_BINFO\");\n       debug_tree (tv);\n-      error (\"type variant's TYPE_BINFO\");\n+      error (\"type variant%'s TYPE_BINFO\");\n       debug_tree (TYPE_BINFO (tv));\n-      error (\"type's TYPE_BINFO\");\n+      error (\"type%'s TYPE_BINFO\");\n       debug_tree (TYPE_BINFO (t));\n       return false;\n     }\n@@ -13952,9 +13952,9 @@ verify_type_variant (const_tree t, tree tv)\n     {\n       error (\"type variant has different TREE_TYPE\");\n       debug_tree (tv);\n-      error (\"type variant's TREE_TYPE\");\n+      error (\"type variant%'s TREE_TYPE\");\n       debug_tree (TREE_TYPE (tv));\n-      error (\"type's TREE_TYPE\");\n+      error (\"type%'s TREE_TYPE\");\n       debug_tree (TREE_TYPE (t));\n       return false;\n     }\n@@ -13963,9 +13963,9 @@ verify_type_variant (const_tree t, tree tv)\n     {\n       error (\"type is not compatible with its variant\");\n       debug_tree (tv);\n-      error (\"type variant's TREE_TYPE\");\n+      error (\"type variant%'s TREE_TYPE\");\n       debug_tree (TREE_TYPE (tv));\n-      error (\"type's TREE_TYPE\");\n+      error (\"type%'s TREE_TYPE\");\n       debug_tree (TREE_TYPE (t));\n       return false;\n     }"}]}