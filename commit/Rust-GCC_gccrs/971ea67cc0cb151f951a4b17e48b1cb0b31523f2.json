{"sha": "971ea67cc0cb151f951a4b17e48b1cb0b31523f2", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTcxZWE2N2NjMGNiMTUxZjk1MWE0YjE3ZTQ4YjFjYjBiMzE1MjNmMg==", "commit": {"author": {"name": "Xinliang David Li", "email": "davidxl@google.com", "date": "2014-09-10T20:10:25Z"}, "committer": {"name": "Xinliang David Li", "email": "davidxl@gcc.gnu.org", "date": "2014-09-10T20:10:25Z"}, "message": "Fix PR target/63209.\n\nFrom-SVN: r215136", "tree": {"sha": "cd74552e78d5ba091ebc5436409c9474c12ddc4c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/cd74552e78d5ba091ebc5436409c9474c12ddc4c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/971ea67cc0cb151f951a4b17e48b1cb0b31523f2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/971ea67cc0cb151f951a4b17e48b1cb0b31523f2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/971ea67cc0cb151f951a4b17e48b1cb0b31523f2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/971ea67cc0cb151f951a4b17e48b1cb0b31523f2/comments", "author": {"login": "vns-mn", "id": 57157229, "node_id": "MDQ6VXNlcjU3MTU3MjI5", "avatar_url": "https://avatars.githubusercontent.com/u/57157229?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vns-mn", "html_url": "https://github.com/vns-mn", "followers_url": "https://api.github.com/users/vns-mn/followers", "following_url": "https://api.github.com/users/vns-mn/following{/other_user}", "gists_url": "https://api.github.com/users/vns-mn/gists{/gist_id}", "starred_url": "https://api.github.com/users/vns-mn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vns-mn/subscriptions", "organizations_url": "https://api.github.com/users/vns-mn/orgs", "repos_url": "https://api.github.com/users/vns-mn/repos", "events_url": "https://api.github.com/users/vns-mn/events{/privacy}", "received_events_url": "https://api.github.com/users/vns-mn/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "7bee00c3739a093dff3108bf55663fc6b50274b4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7bee00c3739a093dff3108bf55663fc6b50274b4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7bee00c3739a093dff3108bf55663fc6b50274b4"}], "stats": {"total": 48, "additions": 46, "deletions": 2}, "files": [{"sha": "6e532f8c05776ca31e94845d3afc3472c0c4d3ff", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/971ea67cc0cb151f951a4b17e48b1cb0b31523f2/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/971ea67cc0cb151f951a4b17e48b1cb0b31523f2/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=971ea67cc0cb151f951a4b17e48b1cb0b31523f2", "patch": "@@ -1,3 +1,9 @@\n+2014-09-10  Xinliang David Li  <davidxl@google.com>\n+\n+\tPR target/63209\n+\t* config/arm/arm.md (movcond_addsi): Handle case where source\n+\tand target operands are the same.\n+\n 2014-09-10  David Malcolm  <dmalcolm@redhat.com>\n \n \t* final.c (this_is_asm_operands): Strengthen this variable from"}, {"sha": "e691562ac751f2dbbddd14725125e2a56626b8cd", "filename": "gcc/config/arm/arm.md", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/971ea67cc0cb151f951a4b17e48b1cb0b31523f2/gcc%2Fconfig%2Farm%2Farm.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/971ea67cc0cb151f951a4b17e48b1cb0b31523f2/gcc%2Fconfig%2Farm%2Farm.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.md?ref=971ea67cc0cb151f951a4b17e48b1cb0b31523f2", "patch": "@@ -9328,10 +9328,16 @@\n     enum machine_mode mode = SELECT_CC_MODE (GET_CODE (operands[5]),\n \t\t\t\t\t     operands[3], operands[4]);\n     enum rtx_code rc = GET_CODE (operands[5]);\n-\n     operands[6] = gen_rtx_REG (mode, CC_REGNUM);\n     gcc_assert (!(mode == CCFPmode || mode == CCFPEmode));\n-    rc = reverse_condition (rc);\n+    if (REGNO (operands[2]) != REGNO (operands[0]))\n+      rc = reverse_condition (rc);\n+    else \n+      {\n+\trtx tmp = operands[1];\n+\toperands[1] = operands[2];\n+\toperands[2] = tmp;\n+      }\n \n     operands[6] = gen_rtx_fmt_ee (rc, VOIDmode, operands[6], const0_rtx);\n   }"}, {"sha": "197297a75438cd6f010f43fd94fbf19a58d3f99c", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/971ea67cc0cb151f951a4b17e48b1cb0b31523f2/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/971ea67cc0cb151f951a4b17e48b1cb0b31523f2/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=971ea67cc0cb151f951a4b17e48b1cb0b31523f2", "patch": "@@ -1,3 +1,8 @@\n+2014-09-10  Xinliang David Li  <davidxl@google.com>\n+\n+\tPR target/63209\n+\t* gcc.c-torture/execute/pr63209.c: New test.\n+\n 2014-09-10  Jakub Jelinek  <jakub@redhat.com>\n \n \t* gcc.target/i386/i386.exp: Only run vect-args.c tests"}, {"sha": "9bcb58745638e067cce8f3837a304a91c975f4ca", "filename": "gcc/testsuite/gcc.c-torture/execute/pr63209.c", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/971ea67cc0cb151f951a4b17e48b1cb0b31523f2/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fpr63209.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/971ea67cc0cb151f951a4b17e48b1cb0b31523f2/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fpr63209.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fpr63209.c?ref=971ea67cc0cb151f951a4b17e48b1cb0b31523f2", "patch": "@@ -0,0 +1,27 @@\n+static int Sub(int a, int b) {\n+  return  b -a;\n+}\n+\n+static unsigned Select(unsigned a, unsigned b, unsigned c) {\n+  const int pa_minus_pb =\n+      Sub((a >>  8) & 0xff, (b >>  8) & 0xff) + \n+      Sub((a >>  0) & 0xff, (b >>  0) & 0xff); \n+  return (pa_minus_pb <= 0) ? a : b;\n+}\n+\n+__attribute__((noinline)) unsigned Predictor(unsigned left, const unsigned* const top) {\n+  const unsigned pred = Select(top[1], left, top[0]);\n+  return pred;\n+}\n+\n+int main(void) {\n+  const unsigned top[2] = {0xff7a7a7a, 0xff7a7a7a};\n+  const unsigned left = 0xff7b7b7b;\n+  const unsigned pred = Predictor(left, top /*+ 1*/);\n+  if (pred == left)\n+    return 0;\n+  return 1;\n+}\n+\n+\n+"}]}