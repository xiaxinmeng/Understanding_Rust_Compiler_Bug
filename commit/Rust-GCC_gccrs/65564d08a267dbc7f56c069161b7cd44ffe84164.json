{"sha": "65564d08a267dbc7f56c069161b7cd44ffe84164", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjU1NjRkMDhhMjY3ZGJjN2Y1NmMwNjkxNjFiN2NkNDRmZmU4NDE2NA==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2010-01-26T13:49:56Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2010-01-26T13:49:56Z"}, "message": "[multiple changes]\n\n2010-01-26  Robert Dewar  <dewar@adacore.com>\n\n\t* par_sco.adb (Traverse_Declarations_Or_Statements): Only generate\n\tdecisions for pragmas Assert, Check, Precondition, Postcondition if\n\t-gnata set.\n\t* scos.ads: Update comments.\n\t* get_scos.adb, put_scos.adb: Minor fix to code reading statement SCOs.\n\tAlso remove obsolete code for CT (exit point) SCOs.\n\n2010-01-26  Thomas Quinot  <quinot@adacore.com>\n\n\t* switch-c.adb: Fix handling of -gnatz*\n\nFrom-SVN: r156247", "tree": {"sha": "1b33af4080c74c8a3723bc10f6095775be68c37a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1b33af4080c74c8a3723bc10f6095775be68c37a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/65564d08a267dbc7f56c069161b7cd44ffe84164", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/65564d08a267dbc7f56c069161b7cd44ffe84164", "html_url": "https://github.com/Rust-GCC/gccrs/commit/65564d08a267dbc7f56c069161b7cd44ffe84164", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/65564d08a267dbc7f56c069161b7cd44ffe84164/comments", "author": null, "committer": null, "parents": [{"sha": "2b054f631a94b4af133e564f9995473aaabd4911", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2b054f631a94b4af133e564f9995473aaabd4911", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2b054f631a94b4af133e564f9995473aaabd4911"}], "stats": {"total": 174, "additions": 118, "deletions": 56}, "files": [{"sha": "2b501289020a4e8985809755bd9fdf055206d049", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/65564d08a267dbc7f56c069161b7cd44ffe84164/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/65564d08a267dbc7f56c069161b7cd44ffe84164/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=65564d08a267dbc7f56c069161b7cd44ffe84164", "patch": "@@ -1,3 +1,16 @@\n+2010-01-26  Robert Dewar  <dewar@adacore.com>\n+\n+\t* par_sco.adb (Traverse_Declarations_Or_Statements): Only generate\n+\tdecisions for pragmas Assert, Check, Precondition, Postcondition if\n+\t-gnata set.\n+\t* scos.ads: Update comments.\n+\t* get_scos.adb, put_scos.adb: Minor fix to code reading statement SCOs.\n+\tAlso remove obsolete code for CT (exit point) SCOs.\n+\n+2010-01-26  Thomas Quinot  <quinot@adacore.com>\n+\n+\t* switch-c.adb: Fix handling of -gnatz*\n+\n 2010-01-26  Robert Dewar  <dewar@adacore.com>\n \n \t* par_sco.adb (Traverse_Declarations_Or_Statements): Separate F/W"}, {"sha": "da63f90e307738fdeb0f2730d0f69878bbf072ca", "filename": "gcc/ada/get_scos.adb", "status": "modified", "additions": 2, "deletions": 8, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/65564d08a267dbc7f56c069161b7cd44ffe84164/gcc%2Fada%2Fget_scos.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/65564d08a267dbc7f56c069161b7cd44ffe84164/gcc%2Fada%2Fget_scos.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fget_scos.adb?ref=65564d08a267dbc7f56c069161b7cd44ffe84164", "patch": "@@ -272,7 +272,7 @@ begin\n \n                   Add_SCO\n                     (C1   => Key,\n-                     C2   => C,\n+                     C2   => Typ,\n                      From => Loc1,\n                      To   => Loc2,\n                      Last => At_EOL);\n@@ -282,15 +282,9 @@ begin\n                end loop;\n             end;\n \n-         --  Exit entry\n-\n-         when 'T' =>\n-            Get_Sloc_Range (Loc1, Loc2);\n-            Add_SCO (C1 => 'T', From => Loc1, To => Loc2);\n-\n          --  Decision entry\n \n-         when 'I' | 'E' | 'W' | 'X' =>\n+         when 'I' | 'E' | 'P' | 'W' | 'X' =>\n             Dtyp := C;\n             Skip_Spaces;\n             C := Getc;"}, {"sha": "82ab9d651a0cea55403d3b6a79cc258d5b03e6eb", "filename": "gcc/ada/par_sco.adb", "status": "modified", "additions": 48, "deletions": 8, "changes": 56, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/65564d08a267dbc7f56c069161b7cd44ffe84164/gcc%2Fada%2Fpar_sco.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/65564d08a267dbc7f56c069161b7cd44ffe84164/gcc%2Fada%2Fpar_sco.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fpar_sco.adb?ref=65564d08a267dbc7f56c069161b7cd44ffe84164", "patch": "@@ -35,6 +35,7 @@ with Put_SCOs;\n with SCOs;     use SCOs;\n with Sinfo;    use Sinfo;\n with Sinput;   use Sinput;\n+with Snames;   use Snames;\n with Table;\n \n with GNAT.HTable;      use GNAT.HTable;\n@@ -101,10 +102,10 @@ package body Par_SCO is\n \n    procedure Process_Decisions (N : Node_Id; T : Character);\n    --  If N is Empty, has no effect. Otherwise scans the tree for the node N,\n-   --  to output any decisions it contains. T is one of IEWX (for context of\n-   --  expresion: if/while/when-exit/expression). If T is other than X, then\n-   --  the node is always a decision a decision is always present (at the very\n-   --  least a simple decision is present at the top level).\n+   --  to output any decisions it contains. T is one of IEPWX (for context of\n+   --  expresion: if/exit when/pragma/while/expression). If T is other than X,\n+   --  then a decision is always present (at the very least a simple decision\n+   --  is present at the top level).\n \n    procedure Process_Decisions (L : List_Id; T : Character);\n    --  Calls above procedure for each element of the list L\n@@ -938,7 +939,7 @@ package body Par_SCO is\n                --  any decisions in the exit statement expression.\n \n                when N_Exit_Statement =>\n-                  Extend_Statement_Sequence (N, 'E');\n+                  Extend_Statement_Sequence (N, ' ');\n                   Set_Statement_Entry;\n                   Process_Decisions (Condition (N), 'E');\n \n@@ -1071,6 +1072,48 @@ package body Par_SCO is\n                   Set_Statement_Entry;\n                   Traverse_Declarations_Or_Statements (Statements (N));\n \n+               --  Pragma\n+\n+               when N_Pragma =>\n+                  Extend_Statement_Sequence (N, 'P');\n+\n+                  --  For pragmas Assert, Check, Precondition, and\n+                  --  Postcondition, we generate decision entries for the\n+                  --  condition only if the pragma is enabled. For now, we just\n+                  --  check Assertions_Enabled, which will be set to reflect\n+                  --  the presence of -gnata.\n+\n+                  --  Later we should move processing of the relevant pragmas\n+                  --  to Par_Prag, and properly set the flag Pragma_Enabled at\n+                  --  parse time, so that we can check this flag instead ???\n+\n+                  --  For all other pragmas, we always generate decision\n+                  --  entries for any embedded expressions.\n+\n+                  declare\n+                     Nam : constant Name_Id :=\n+                             Chars (Pragma_Identifier (N));\n+                     Arg : Node_Id := First (Pragma_Argument_Associations (N));\n+                  begin\n+                     case Nam is\n+                        when Name_Assert        |\n+                             Name_Check         |\n+                             Name_Precondition  |\n+                             Name_Postcondition =>\n+\n+                           if Nam = Name_Check then\n+                              Next (Arg);\n+                           end if;\n+\n+                           if Assertions_Enabled then\n+                              Process_Decisions (Expression (Arg), 'P');\n+                           end if;\n+\n+                        when others =>\n+                           Process_Decisions (N, 'X');\n+                     end case;\n+                  end;\n+\n                --  All other cases, which extend the current statement sequence\n                --  but do not terminate it, even if they have nested decisions.\n \n@@ -1101,9 +1144,6 @@ package body Par_SCO is\n                         when N_Generic_Instantiation         =>\n                            Typ := 'i';\n \n-                        when N_Pragma                        =>\n-                           Typ := 'P';\n-\n                         when others                          =>\n                            Typ := ' ';\n                      end case;"}, {"sha": "39b6288520e74bd58227c5ca138fd0696276e471", "filename": "gcc/ada/put_scos.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/65564d08a267dbc7f56c069161b7cd44ffe84164/gcc%2Fada%2Fput_scos.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/65564d08a267dbc7f56c069161b7cd44ffe84164/gcc%2Fada%2Fput_scos.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fput_scos.adb?ref=65564d08a267dbc7f56c069161b7cd44ffe84164", "patch": "@@ -115,7 +115,7 @@ begin\n \n                   --  Decision\n \n-                  when 'I' | 'E' | 'W' | 'X' =>\n+                  when 'I' | 'E' | 'P' | 'W' | 'X' =>\n                      if T.C2 = ' ' then\n                         Start := Start + 1;\n                      end if;"}, {"sha": "19804e4567b3da6188eec31cc0eeaabed517babb", "filename": "gcc/ada/scos.ads", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/65564d08a267dbc7f56c069161b7cd44ffe84164/gcc%2Fada%2Fscos.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/65564d08a267dbc7f56c069161b7cd44ffe84164/gcc%2Fada%2Fscos.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fscos.ads?ref=65564d08a267dbc7f56c069161b7cd44ffe84164", "patch": "@@ -281,10 +281,7 @@ package SCOs is\n \n    --    Statements\n    --      C1   = 'S' for entry point, 's' otherwise\n-   --      C2   = 't', 's', 'o', 'r', 'i',\n-   --             'C', 'E', 'F', 'I', 'P', 'R', 'W', ' '\n-   --             (type/subtype/object/renaming/instantiation/\n-   --              CASE/EXIT/FOR/IF/PRAGMA/RETURN/WHILE/other)\n+   --      C2   = statement type code to appear on CS line (or ' ' if none)\n    --      From = starting source location\n    --      To   = ending source location\n    --      Last = False for all but the last entry, True for last entry\n@@ -296,7 +293,7 @@ package SCOs is\n    --    statements on a single CS line.\n \n    --    Decision\n-   --      C1   = 'I', 'E', 'P', 'W', 'X' (if/exit/pragma/while/expression)\n+   --      C1   = decision type code\n    --      C2   = ' '\n    --      From = location of IF/EXIT/PRAGMA/WHILE token,\n    --             No_Source_Location for X"}, {"sha": "d1bbf53adf61d5cb6b4730d8c4b8cd5a8999466d", "filename": "gcc/ada/sem_ch6.adb", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/65564d08a267dbc7f56c069161b7cd44ffe84164/gcc%2Fada%2Fsem_ch6.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/65564d08a267dbc7f56c069161b7cd44ffe84164/gcc%2Fada%2Fsem_ch6.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch6.adb?ref=65564d08a267dbc7f56c069161b7cd44ffe84164", "patch": "@@ -8218,7 +8218,7 @@ package body Sem_Ch6 is\n          Prag := Spec_PPC_List (Spec_Id);\n          while Present (Prag) loop\n             if Pragma_Name (Prag) = Name_Precondition\n-              and then PPC_Enabled (Prag)\n+              and then Pragma_Enabled (Prag)\n             then\n                --  Add pragma Check at the start of the declarations of N.\n                --  Note that this processing reverses the order of the list,\n@@ -8297,7 +8297,7 @@ package body Sem_Ch6 is\n          Prag := Spec_PPC_List (Spec_Id);\n          while Present (Prag) loop\n             if Pragma_Name (Prag) = Name_Postcondition\n-              and then PPC_Enabled (Prag)\n+              and then Pragma_Enabled (Prag)\n             then\n                if Plist = No_List then\n                   Plist := Empty_List;"}, {"sha": "31799333edeb1a8646062d7fdb55fee07fa86eb4", "filename": "gcc/ada/sem_prag.adb", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/65564d08a267dbc7f56c069161b7cd44ffe84164/gcc%2Fada%2Fsem_prag.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/65564d08a267dbc7f56c069161b7cd44ffe84164/gcc%2Fada%2Fsem_prag.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_prag.adb?ref=65564d08a267dbc7f56c069161b7cd44ffe84164", "patch": "@@ -1420,7 +1420,7 @@ package body Sem_Prag is\n \n          --  Record whether pragma is enabled\n \n-         Set_PPC_Enabled (N, Check_Enabled (Pname));\n+         Set_Pragma_Enabled (N, Check_Enabled (Pname));\n \n          --  If we are within an inlined body, the legality of the pragma\n          --  has been checked already.\n@@ -5789,6 +5789,7 @@ package body Sem_Prag is\n \n             Check_Arg_Is_Identifier (Arg1);\n             Check_On := Check_Enabled (Chars (Get_Pragma_Arg (Arg1)));\n+            Set_Pragma_Enabled (N, Check_On);\n \n             --  If expansion is active and the check is not enabled then we\n             --  rewrite the Check as:"}, {"sha": "73377f1a39f80ce29d154a7572697dbcc243747d", "filename": "gcc/ada/sinfo.adb", "status": "modified", "additions": 16, "deletions": 16, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/65564d08a267dbc7f56c069161b7cd44ffe84164/gcc%2Fada%2Fsinfo.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/65564d08a267dbc7f56c069161b7cd44ffe84164/gcc%2Fada%2Fsinfo.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsinfo.adb?ref=65564d08a267dbc7f56c069161b7cd44ffe84164", "patch": "@@ -2257,14 +2257,6 @@ package body Sinfo is\n       return Node4 (N);\n    end Parent_Spec;\n \n-   function PPC_Enabled\n-     (N : Node_Id) return Boolean is\n-   begin\n-      pragma Assert (False\n-        or else NT (N).Nkind = N_Pragma);\n-      return Flag5 (N);\n-   end PPC_Enabled;\n-\n    function Position\n       (N : Node_Id) return Node_Id is\n    begin\n@@ -2281,6 +2273,14 @@ package body Sinfo is\n       return List2 (N);\n    end Pragma_Argument_Associations;\n \n+   function Pragma_Enabled\n+     (N : Node_Id) return Boolean is\n+   begin\n+      pragma Assert (False\n+        or else NT (N).Nkind = N_Pragma);\n+      return Flag5 (N);\n+   end Pragma_Enabled;\n+\n    function Pragma_Identifier\n       (N : Node_Id) return Node_Id is\n    begin\n@@ -5135,14 +5135,6 @@ package body Sinfo is\n       Set_Node4 (N, Val); -- semantic field, no parent set\n    end Set_Parent_Spec;\n \n-   procedure Set_PPC_Enabled\n-     (N : Node_Id; Val : Boolean := True) is\n-   begin\n-      pragma Assert (False\n-        or else NT (N).Nkind = N_Pragma);\n-      Set_Flag5 (N, Val);\n-   end Set_PPC_Enabled;\n-\n    procedure Set_Position\n       (N : Node_Id; Val : Node_Id) is\n    begin\n@@ -5159,6 +5151,14 @@ package body Sinfo is\n       Set_List2_With_Parent (N, Val);\n    end Set_Pragma_Argument_Associations;\n \n+   procedure Set_Pragma_Enabled\n+     (N : Node_Id; Val : Boolean := True) is\n+   begin\n+      pragma Assert (False\n+        or else NT (N).Nkind = N_Pragma);\n+      Set_Flag5 (N, Val);\n+   end Set_Pragma_Enabled;\n+\n    procedure Set_Pragma_Identifier\n       (N : Node_Id; Val : Node_Id) is\n    begin"}, {"sha": "8a6a157cc34e550e532662156cdc09b18c81060c", "filename": "gcc/ada/sinfo.ads", "status": "modified", "additions": 14, "deletions": 13, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/65564d08a267dbc7f56c069161b7cd44ffe84164/gcc%2Fada%2Fsinfo.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/65564d08a267dbc7f56c069161b7cd44ffe84164/gcc%2Fada%2Fsinfo.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsinfo.ads?ref=65564d08a267dbc7f56c069161b7cd44ffe84164", "patch": "@@ -1526,10 +1526,11 @@ package Sinfo is\n    --    package specification. This field is Empty for library bodies (the\n    --    parent spec in this case can be found from the corresponding spec).\n \n-   --  PPC_Enabled (Flag5-Sem)\n-   --    Present in N_Pragma nodes. This flag is relevant only for precondition\n-   --    and postcondition nodes. It is true if the check corresponding to the\n-   --    pragma type is enabled at the point where the pragma appears.\n+   --  Pragma_Enabled (Flag5-Sem)\n+   --    Present in N_Pragma nodes. This flag is relevant only for pragmas\n+   --    Assert, Check, Precondition, and Postcondition. It is true if the\n+   --    check corresponding to the pragma type is enabled at the point where\n+   --    the pragma appears.\n \n    --  Present_Expr (Uint3-Sem)\n    --    Present in an N_Variant node. This has a meaningful value only after\n@@ -1979,7 +1980,7 @@ package Sinfo is\n       --  Debug_Statement (Node3) (set to Empty if not Debug, Assert)\n       --  Pragma_Identifier (Node4)\n       --  Next_Rep_Item (Node5-Sem)\n-      --  PPC_Enabled (Flag5-Sem)\n+      --  Pragma_Enabled (Flag5-Sem)\n \n       --  Note: we should have a section on what pragmas are passed on to\n       --  the back end to be processed. This section should note that pragma\n@@ -8311,15 +8312,15 @@ package Sinfo is\n    function Parent_Spec\n      (N : Node_Id) return Node_Id;    -- Node4\n \n-   function PPC_Enabled\n-     (N : Node_Id) return Boolean;    -- Flag5\n-\n    function Position\n      (N : Node_Id) return Node_Id;    -- Node2\n \n    function Pragma_Argument_Associations\n      (N : Node_Id) return List_Id;    -- List2\n \n+   function Pragma_Enabled\n+     (N : Node_Id) return Boolean;    -- Flag5\n+\n    function Pragma_Identifier\n      (N : Node_Id) return Node_Id;    -- Node4\n \n@@ -9229,15 +9230,15 @@ package Sinfo is\n    procedure Set_Parent_Spec\n      (N : Node_Id; Val : Node_Id);            -- Node4\n \n-   procedure Set_PPC_Enabled\n-     (N : Node_Id; Val : Boolean := True);    -- Flag5\n-\n    procedure Set_Position\n      (N : Node_Id; Val : Node_Id);            -- Node2\n \n    procedure Set_Pragma_Argument_Associations\n      (N : Node_Id; Val : List_Id);            -- List2\n \n+   procedure Set_Pragma_Enabled\n+     (N : Node_Id; Val : Boolean := True);    -- Flag5\n+\n    procedure Set_Pragma_Identifier\n      (N : Node_Id; Val : Node_Id);            -- Node4\n \n@@ -11370,9 +11371,9 @@ package Sinfo is\n    pragma Inline (Parameter_List_Truncated);\n    pragma Inline (Parameter_Type);\n    pragma Inline (Parent_Spec);\n-   pragma Inline (PPC_Enabled);\n    pragma Inline (Position);\n    pragma Inline (Pragma_Argument_Associations);\n+   pragma Inline (Pragma_Enabled);\n    pragma Inline (Pragma_Identifier);\n    pragma Inline (Pragmas_After);\n    pragma Inline (Pragmas_Before);\n@@ -11673,9 +11674,9 @@ package Sinfo is\n    pragma Inline (Set_Parameter_List_Truncated);\n    pragma Inline (Set_Parameter_Type);\n    pragma Inline (Set_Parent_Spec);\n-   pragma Inline (Set_PPC_Enabled);\n    pragma Inline (Set_Position);\n    pragma Inline (Set_Pragma_Argument_Associations);\n+   pragma Inline (Set_Pragma_Enabled);\n    pragma Inline (Set_Pragma_Identifier);\n    pragma Inline (Set_Pragmas_After);\n    pragma Inline (Set_Pragmas_Before);"}, {"sha": "7b194107ff619569d25e13ae70aee1e78b0a7c0d", "filename": "gcc/ada/switch-c.adb", "status": "modified", "additions": 18, "deletions": 2, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/65564d08a267dbc7f56c069161b7cd44ffe84164/gcc%2Fada%2Fswitch-c.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/65564d08a267dbc7f56c069161b7cd44ffe84164/gcc%2Fada%2Fswitch-c.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fswitch-c.adb?ref=65564d08a267dbc7f56c069161b7cd44ffe84164", "patch": "@@ -933,10 +933,23 @@ package body Switch.C is\n             --  Processing for z switch\n \n             when 'z' =>\n+               --  -gnatz must be the first and only switch in Switch_Chars,\n+               --  and is a two-letter switch.\n+\n+               if Ptr /= Switch_Chars'First + 5\n+                 or else (Max - Ptr + 1) > 2\n+               then\n+                  Osint.Fail\n+                    (\"-gnatz* may not be combined with other switches\");\n+               end if;\n+\n+               if Ptr = Max then\n+                  Bad_Switch (\"-gnatz\");\n+               end if;\n+\n                Ptr := Ptr + 1;\n \n-               --  Allowed for compiler only if this is the only\n-               --  -z switch, we do not allow multiple occurrences\n+               --  Only one occurrence of -gnat* is permitted\n \n                if Distribution_Stub_Mode = No_Stubs then\n                   case Switch_Chars (Ptr) is\n@@ -951,6 +964,9 @@ package body Switch.C is\n                   end case;\n \n                   Ptr := Ptr + 1;\n+\n+               else\n+                  Osint.Fail (\"only one -gnatz* switch allowed\");\n                end if;\n \n             --  Processing for Z switch"}]}