{"sha": "f9590eae5f7900ce92900cc95e3faa477abcc7ef", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Zjk1OTBlYWU1Zjc5MDBjZTkyOTAwY2M5NWUzZmFhNDc3YWJjYzdlZg==", "commit": {"author": {"name": "Chris Jefferson", "email": "chris@bubblescope.net", "date": "2009-08-24T14:07:34Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2009-08-24T14:07:34Z"}, "message": "stl_algo.h (__unguarded_partition_pivot, [...]): New.\n\n2009-08-24  Chris Jefferson  <chris@bubblescope.net>\n\n\t* include/stl_algo.h (__unguarded_partition_pivot,\n\t__move_median_first): New.\n\t(__insertion_sort, __unguarded_insertion_sort): Adjust for move-only\n\ttypes.\n\t(__unguarded_linear_insert): Assume always inserting value at __last.\n\t(__unguarded_partition): Take pivot by reference.\n\t(__introsort_loop, __introselect) : Use __unguarded_partition_pivot.\n\t* testsuite/25_algorithms/nth_element/moveable.cc : Enable.\n\nFrom-SVN: r151055", "tree": {"sha": "19f0bd36e26f8d4cf25a4a9abc187e5018a185ad", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/19f0bd36e26f8d4cf25a4a9abc187e5018a185ad"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f9590eae5f7900ce92900cc95e3faa477abcc7ef", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f9590eae5f7900ce92900cc95e3faa477abcc7ef", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f9590eae5f7900ce92900cc95e3faa477abcc7ef", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f9590eae5f7900ce92900cc95e3faa477abcc7ef/comments", "author": {"login": "ChrisJefferson", "id": 811527, "node_id": "MDQ6VXNlcjgxMTUyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/811527?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ChrisJefferson", "html_url": "https://github.com/ChrisJefferson", "followers_url": "https://api.github.com/users/ChrisJefferson/followers", "following_url": "https://api.github.com/users/ChrisJefferson/following{/other_user}", "gists_url": "https://api.github.com/users/ChrisJefferson/gists{/gist_id}", "starred_url": "https://api.github.com/users/ChrisJefferson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ChrisJefferson/subscriptions", "organizations_url": "https://api.github.com/users/ChrisJefferson/orgs", "repos_url": "https://api.github.com/users/ChrisJefferson/repos", "events_url": "https://api.github.com/users/ChrisJefferson/events{/privacy}", "received_events_url": "https://api.github.com/users/ChrisJefferson/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "2ef4a8e14ab95a85c4e626c905325c030b4583cf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2ef4a8e14ab95a85c4e626c905325c030b4583cf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2ef4a8e14ab95a85c4e626c905325c030b4583cf"}], "stats": {"total": 181, "additions": 116, "deletions": 65}, "files": [{"sha": "f60c2b48f1d18fdd4516081f0419abda78b9f988", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9590eae5f7900ce92900cc95e3faa477abcc7ef/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9590eae5f7900ce92900cc95e3faa477abcc7ef/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=f9590eae5f7900ce92900cc95e3faa477abcc7ef", "patch": "@@ -1,3 +1,14 @@\n+2009-08-24  Chris Jefferson  <chris@bubblescope.net>\n+\n+\t* include/stl_algo.h (__unguarded_partition_pivot,\n+\t__move_median_first): New.\n+\t(__insertion_sort, __unguarded_insertion_sort): Adjust for move-only\n+\ttypes.\n+\t(__unguarded_linear_insert): Assume always inserting value at __last.\n+\t(__unguarded_partition): Take pivot by reference.\n+\t(__introsort_loop, __introselect) : Use __unguarded_partition_pivot.\n+\t* testsuite/25_algorithms/nth_element/moveable.cc : Enable.\n+\n 2009-08-23  Ralf Wildenhues  <Ralf.Wildenhues@gmx.de>\n \n \t* libsupc++/Makefile.am (LTCOMPILE): Expand $(LIBTOOLFLAGS)"}, {"sha": "a745295e9b0218578afed0baf739310d6dfb94a1", "filename": "libstdc++-v3/include/bits/stl_algo.h", "status": "modified", "additions": 105, "deletions": 64, "changes": 169, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9590eae5f7900ce92900cc95e3faa477abcc7ef/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_algo.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9590eae5f7900ce92900cc95e3faa477abcc7ef/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_algo.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_algo.h?ref=f9590eae5f7900ce92900cc95e3faa477abcc7ef", "patch": "@@ -136,6 +136,56 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n \treturn __b;\n     }\n \n+  /// Swaps the median value of *__a, *__b and *__c to *__a\n+  template<typename _Iterator>\n+    void\n+    __move_median_first(_Iterator __a, _Iterator __b, _Iterator __c)\n+    {\n+      // concept requirements\n+      __glibcxx_function_requires(_LessThanComparableConcept<\n+\t    typename iterator_traits<_Iterator>::value_type>)\n+\n+      if (*__a < *__b)\n+\t{\n+\t  if (*__b < *__c)\n+\t    std::iter_swap(__a, __b);\n+\t  else if (*__a < *__c)\n+\t    std::iter_swap(__a, __c);\n+\t}\n+      else if (*__a < *__c)\n+\treturn;\n+      else if (*__b < *__c)\n+\tstd::iter_swap(__a, __c);\n+      else\n+\tstd::iter_swap(__a, __b);\n+    }\n+\n+  /// Swaps the median value of *__a, *__b and *__c under __comp to *__a\n+  template<typename _Iterator, typename _Compare>\n+    void\n+    __move_median_first(_Iterator __a, _Iterator __b, _Iterator __c,\n+\t\t\t_Compare __comp)\n+    {\n+      // concept requirements\n+      __glibcxx_function_requires(_BinaryFunctionConcept<_Compare, bool,\n+\t    typename iterator_traits<_Iterator>::value_type,\n+\t    typename iterator_traits<_Iterator>::value_type>)\n+\n+      if (__comp(*__a, *__b))\n+\t{\n+\t  if (__comp(*__b, *__c))\n+\t    std::iter_swap(__a, __b);\n+\t  else if (__comp(*__a, *__c))\n+\t    std::iter_swap(__a, __c);\n+\t}\n+      else if (__comp(*__a, *__c))\n+\treturn;\n+      else if (__comp(*__b, *__c))\n+\tstd::iter_swap(__a, __c);\n+      else\n+\tstd::iter_swap(__a, __b);\n+    }\n+\n   // for_each\n \n   /// This is an overload used by find() for the Input Iterator case.\n@@ -2058,36 +2108,40 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n     }\n \n   /// This is a helper function for the sort routine.\n-  template<typename _RandomAccessIterator, typename _Tp>\n+  template<typename _RandomAccessIterator>\n     void\n-    __unguarded_linear_insert(_RandomAccessIterator __last, _Tp __val)\n+    __unguarded_linear_insert(_RandomAccessIterator __last)\n     {\n+      typename iterator_traits<_RandomAccessIterator>::value_type\n+\t__val = _GLIBCXX_MOVE(*__last);\n       _RandomAccessIterator __next = __last;\n       --__next;\n       while (__val < *__next)\n \t{\n-\t  *__last = *__next;\n+\t  *__last = _GLIBCXX_MOVE(*__next);\n \t  __last = __next;\n \t  --__next;\n \t}\n-      *__last = __val;\n+      *__last = _GLIBCXX_MOVE(__val);\n     }\n \n   /// This is a helper function for the sort routine.\n-  template<typename _RandomAccessIterator, typename _Tp, typename _Compare>\n+  template<typename _RandomAccessIterator, typename _Compare>\n     void\n-    __unguarded_linear_insert(_RandomAccessIterator __last, _Tp __val,\n+    __unguarded_linear_insert(_RandomAccessIterator __last,\n \t\t\t      _Compare __comp)\n     {\n+      typename iterator_traits<_RandomAccessIterator>::value_type\n+\t__val = _GLIBCXX_MOVE(*__last);\n       _RandomAccessIterator __next = __last;\n       --__next;\n       while (__comp(__val, *__next))\n \t{\n-\t  *__last = *__next;\n+\t  *__last = _GLIBCXX_MOVE(*__next);\n \t  __last = __next;\n \t  --__next;\n \t}\n-      *__last = __val;\n+      *__last = _GLIBCXX_MOVE(__val);\n     }\n \n   /// This is a helper function for the sort routine.\n@@ -2101,15 +2155,15 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n \n       for (_RandomAccessIterator __i = __first + 1; __i != __last; ++__i)\n \t{\n-\t  typename iterator_traits<_RandomAccessIterator>::value_type\n-\t    __val = *__i;\n-\t  if (__val < *__first)\n+\t  if (*__i < *__first)\n \t    {\n-\t      std::copy_backward(__first, __i, __i + 1);\n-\t      *__first = __val;\n+\t      typename iterator_traits<_RandomAccessIterator>::value_type\n+\t\t__val = _GLIBCXX_MOVE(*__i);\n+\t      _GLIBCXX_MOVE_BACKWARD3(__first, __i, __i + 1);\n+\t      *__first = _GLIBCXX_MOVE(__val);\n \t    }\n \t  else\n-\t    std::__unguarded_linear_insert(__i, __val);\n+\t    std::__unguarded_linear_insert(__i);\n \t}\n     }\n \n@@ -2123,15 +2177,15 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n \n       for (_RandomAccessIterator __i = __first + 1; __i != __last; ++__i)\n \t{\n-\t  typename iterator_traits<_RandomAccessIterator>::value_type\n-\t    __val = *__i;\n-\t  if (__comp(__val, *__first))\n+\t  if (__comp(*__i, *__first))\n \t    {\n-\t      std::copy_backward(__first, __i, __i + 1);\n-\t      *__first = __val;\n+\t      typename iterator_traits<_RandomAccessIterator>::value_type\n+\t\t__val = _GLIBCXX_MOVE(*__i);\n+\t      _GLIBCXX_MOVE_BACKWARD3(__first, __i, __i + 1);\n+\t      *__first = _GLIBCXX_MOVE(__val);\n \t    }\n \t  else\n-\t    std::__unguarded_linear_insert(__i, __val, __comp);\n+\t    std::__unguarded_linear_insert(__i, __comp);\n \t}\n     }\n \n@@ -2145,7 +2199,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n \t_ValueType;\n \n       for (_RandomAccessIterator __i = __first; __i != __last; ++__i)\n-\tstd::__unguarded_linear_insert(__i, _ValueType(*__i));\n+\tstd::__unguarded_linear_insert(__i);\n     }\n \n   /// This is a helper function for the sort routine.\n@@ -2158,7 +2212,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n \t_ValueType;\n \n       for (_RandomAccessIterator __i = __first; __i != __last; ++__i)\n-\tstd::__unguarded_linear_insert(__i, _ValueType(*__i), __comp);\n+\tstd::__unguarded_linear_insert(__i, __comp);\n     }\n \n   /**\n@@ -2202,7 +2256,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n   template<typename _RandomAccessIterator, typename _Tp>\n     _RandomAccessIterator\n     __unguarded_partition(_RandomAccessIterator __first,\n-\t\t\t  _RandomAccessIterator __last, _Tp __pivot)\n+\t\t\t  _RandomAccessIterator __last, const _Tp& __pivot)\n     {\n       while (true)\n \t{\n@@ -2223,7 +2277,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n     _RandomAccessIterator\n     __unguarded_partition(_RandomAccessIterator __first,\n \t\t\t  _RandomAccessIterator __last,\n-\t\t\t  _Tp __pivot, _Compare __comp)\n+\t\t\t  const _Tp& __pivot, _Compare __comp)\n     {\n       while (true)\n \t{\n@@ -2239,16 +2293,36 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n \t}\n     }\n \n+  /// This is a helper function...\n+  template<typename _RandomAccessIterator>\n+    inline _RandomAccessIterator\n+    __unguarded_partition_pivot(_RandomAccessIterator __first,\n+\t\t\t\t_RandomAccessIterator __last)\n+    {\n+      _RandomAccessIterator __mid = __first + (__last - __first) / 2;\n+      std::__move_median_first(__first, __mid, (__last - 1));\n+      return std::__unguarded_partition(__first + 1, __last, *__first);\n+    }\n+\n+\n+  /// This is a helper function...\n+  template<typename _RandomAccessIterator, typename _Compare>\n+    inline _RandomAccessIterator\n+    __unguarded_partition_pivot(_RandomAccessIterator __first,\n+\t\t\t\t_RandomAccessIterator __last, _Compare __comp)\n+    {\n+      _RandomAccessIterator __mid = __first + (__last - __first) / 2;\n+      std::__move_median_first(__first, __mid, (__last - 1), __comp);\n+      return std::__unguarded_partition(__first + 1, __last, *__first, __comp);\n+    }\n+\n   /// This is a helper function for the sort routine.\n   template<typename _RandomAccessIterator, typename _Size>\n     void\n     __introsort_loop(_RandomAccessIterator __first,\n \t\t     _RandomAccessIterator __last,\n \t\t     _Size __depth_limit)\n     {\n-      typedef typename iterator_traits<_RandomAccessIterator>::value_type\n-\t_ValueType;\n-\n       while (__last - __first > int(_S_threshold))\n \t{\n \t  if (__depth_limit == 0)\n@@ -2258,14 +2332,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n \t    }\n \t  --__depth_limit;\n \t  _RandomAccessIterator __cut =\n-\t    std::__unguarded_partition(__first, __last,\n-\t\t\t\t       _ValueType(std::__median(*__first,\n-\t\t\t\t\t\t\t\t*(__first\n-\t\t\t\t\t\t\t\t  + (__last\n-\t\t\t\t\t\t\t\t     - __first)\n-\t\t\t\t\t\t\t\t  / 2),\n-\t\t\t\t\t\t\t\t*(__last\n-\t\t\t\t\t\t\t\t  - 1))));\n+\t    std::__unguarded_partition_pivot(__first, __last);\n \t  std::__introsort_loop(__cut, __last, __depth_limit);\n \t  __last = __cut;\n \t}\n@@ -2278,9 +2345,6 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n \t\t     _RandomAccessIterator __last,\n \t\t     _Size __depth_limit, _Compare __comp)\n     {\n-      typedef typename iterator_traits<_RandomAccessIterator>::value_type\n-\t_ValueType;\n-\n       while (__last - __first > int(_S_threshold))\n \t{\n \t  if (__depth_limit == 0)\n@@ -2290,15 +2354,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n \t    }\n \t  --__depth_limit;\n \t  _RandomAccessIterator __cut =\n-\t    std::__unguarded_partition(__first, __last,\n-\t\t\t\t       _ValueType(std::__median(*__first,\n-\t\t\t\t\t\t\t\t*(__first\n-\t\t\t\t\t\t\t\t  + (__last\n-\t\t\t\t\t\t\t\t     - __first)\n-\t\t\t\t\t\t\t\t  / 2),\n-\t\t\t\t\t\t\t\t*(__last - 1),\n-\t\t\t\t\t\t\t\t__comp)),\n-\t\t\t\t       __comp);\n+\t    std::__unguarded_partition_pivot(__first, __last, __comp);\n \t  std::__introsort_loop(__cut, __last, __depth_limit, __comp);\n \t  __last = __cut;\n \t}\n@@ -2349,14 +2405,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n \t    }\n \t  --__depth_limit;\n \t  _RandomAccessIterator __cut =\n-\t    std::__unguarded_partition(__first, __last,\n-\t\t\t\t       _ValueType(std::__median(*__first,\n-\t\t\t\t\t\t\t\t*(__first\n-\t\t\t\t\t\t\t\t  + (__last\n-\t\t\t\t\t\t\t\t     - __first)\n-\t\t\t\t\t\t\t\t  / 2),\n-\t\t\t\t\t\t\t\t*(__last\n-\t\t\t\t\t\t\t\t  - 1))));\n+\t    std::__unguarded_partition_pivot(__first, __last);\n \t  if (__cut <= __nth)\n \t    __first = __cut;\n \t  else\n@@ -2385,15 +2434,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n \t    }\n \t  --__depth_limit;\n \t  _RandomAccessIterator __cut =\n-\t    std::__unguarded_partition(__first, __last,\n-\t\t\t\t       _ValueType(std::__median(*__first,\n-\t\t\t\t\t\t\t\t*(__first\n-\t\t\t\t\t\t\t\t  + (__last\n-\t\t\t\t\t\t\t\t     - __first)\n-\t\t\t\t\t\t\t\t  / 2),\n-\t\t\t\t\t\t\t\t*(__last - 1),\n-\t\t\t\t\t\t\t\t__comp)),\n-\t\t\t\t       __comp);\n+\t    std::__unguarded_partition_pivot(__first, __last, __comp);\n \t  if (__cut <= __nth)\n \t    __first = __cut;\n \t  else"}, {"sha": "005f6ec7cbc1f9f79d1317b038f0f2dfdac4d2a8", "filename": "libstdc++-v3/testsuite/25_algorithms/nth_element/moveable.cc", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9590eae5f7900ce92900cc95e3faa477abcc7ef/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fnth_element%2Fmoveable.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9590eae5f7900ce92900cc95e3faa477abcc7ef/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fnth_element%2Fmoveable.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fnth_element%2Fmoveable.cc?ref=f9590eae5f7900ce92900cc95e3faa477abcc7ef", "patch": "@@ -1,4 +1,3 @@\n-// { dg-require-rvalref \"\" }\n // { dg-options \"-std=gnu++0x\" }\n \n // Copyright (C) 2005, 2007, 2009 Free Software Foundation, Inc."}]}