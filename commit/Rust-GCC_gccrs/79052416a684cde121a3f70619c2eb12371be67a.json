{"sha": "79052416a684cde121a3f70619c2eb12371be67a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzkwNTI0MTZhNjg0Y2RlMTIxYTNmNzA2MTljMmViMTIzNzFiZTY3YQ==", "commit": {"author": {"name": "Richard Sandiford", "email": "richard.sandiford@linaro.org", "date": "2017-08-30T11:19:47Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2017-08-30T11:19:47Z"}, "message": "[67/77] Use scalar_mode in fixed-value.*\n\nThis patch makes the fixed-value.* routines use scalar_mode.\nIt would be possible to define special classes for these modes, as for\nscalar_int_mode and scalar_float_mode, but at the moment nothing would\nbenefit from them.  In particular, there's no use case that would help\nselect between one class for all fixed-point modes versus one class for\nfractional modes and one class for accumulator modes.\n\n2017-08-30  Richard Sandiford  <richard.sandiford@linaro.org>\n\t    Alan Hayward  <alan.hayward@arm.com>\n\t    David Sherwood  <david.sherwood@arm.com>\n\ngcc/\n\t* fixed-value.h (fixed_from_double_int): Take a scalar_mode\n\trather than a machine_mode.\n\t(fixed_from_string): Likewise.\n\t(fixed_convert): Likewise.\n\t(fixed_convert_from_int): Likewise.\n\t(fixed_convert_from_real): Likewise.\n\t(real_convert_from_fixed): Likewise.\n\t* fixed-value.c (fixed_from_double_int): Likewise.\n\t(fixed_from_string): Likewise.\n\t(fixed_convert): Likewise.\n\t(fixed_convert_from_int): Likewise.\n\t(fixed_convert_from_real): Likewise.\n\t(real_convert_from_fixed): Likewise.\n\t* config/avr/avr.c (avr_out_round): Use as_a <scalar_mode>.\n\nCo-Authored-By: Alan Hayward <alan.hayward@arm.com>\nCo-Authored-By: David Sherwood <david.sherwood@arm.com>\n\nFrom-SVN: r251518", "tree": {"sha": "a08db0758c2391ecccdffb242e712fba7c8e4d8e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a08db0758c2391ecccdffb242e712fba7c8e4d8e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/79052416a684cde121a3f70619c2eb12371be67a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/79052416a684cde121a3f70619c2eb12371be67a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/79052416a684cde121a3f70619c2eb12371be67a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/79052416a684cde121a3f70619c2eb12371be67a/comments", "author": null, "committer": null, "parents": [{"sha": "db61b7f923b769142156eab047c94b04bb7adaae", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/db61b7f923b769142156eab047c94b04bb7adaae", "html_url": "https://github.com/Rust-GCC/gccrs/commit/db61b7f923b769142156eab047c94b04bb7adaae"}], "stats": {"total": 48, "additions": 33, "deletions": 15}, "files": [{"sha": "88ed52e72d7dac4fbd63e6de97861ce72c2c9de4", "filename": "gcc/ChangeLog", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/79052416a684cde121a3f70619c2eb12371be67a/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/79052416a684cde121a3f70619c2eb12371be67a/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=79052416a684cde121a3f70619c2eb12371be67a", "patch": "@@ -1,3 +1,22 @@\n+2017-08-30  Richard Sandiford  <richard.sandiford@linaro.org>\n+\t    Alan Hayward  <alan.hayward@arm.com>\n+\t    David Sherwood  <david.sherwood@arm.com>\n+\n+\t* fixed-value.h (fixed_from_double_int): Take a scalar_mode\n+\trather than a machine_mode.\n+\t(fixed_from_string): Likewise.\n+\t(fixed_convert): Likewise.\n+\t(fixed_convert_from_int): Likewise.\n+\t(fixed_convert_from_real): Likewise.\n+\t(real_convert_from_fixed): Likewise.\n+\t* fixed-value.c (fixed_from_double_int): Likewise.\n+\t(fixed_from_string): Likewise.\n+\t(fixed_convert): Likewise.\n+\t(fixed_convert_from_int): Likewise.\n+\t(fixed_convert_from_real): Likewise.\n+\t(real_convert_from_fixed): Likewise.\n+\t* config/avr/avr.c (avr_out_round): Use as_a <scalar_mode>.\n+\n 2017-08-30  Richard Sandiford  <richard.sandiford@linaro.org>\n \t    Alan Hayward  <alan.hayward@arm.com>\n \t    David Sherwood  <david.sherwood@arm.com>"}, {"sha": "c1d27497d50bc36caee7d32f7414f064b91e472f", "filename": "gcc/config/avr/avr.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/79052416a684cde121a3f70619c2eb12371be67a/gcc%2Fconfig%2Favr%2Favr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/79052416a684cde121a3f70619c2eb12371be67a/gcc%2Fconfig%2Favr%2Favr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Favr%2Favr.c?ref=79052416a684cde121a3f70619c2eb12371be67a", "patch": "@@ -9176,7 +9176,7 @@ avr_out_fract (rtx_insn *insn, rtx operands[], bool intsigned, int *plen)\n const char*\n avr_out_round (rtx_insn *insn ATTRIBUTE_UNUSED, rtx *xop, int *plen)\n {\n-  machine_mode mode = GET_MODE (xop[0]);\n+  scalar_mode mode = as_a <scalar_mode> (GET_MODE (xop[0]));\n   scalar_int_mode imode = int_mode_for_mode (mode).require ();\n   // The smallest fractional bit not cleared by the rounding is 2^(-RP).\n   int fbit = (int) GET_MODE_FBIT (mode);"}, {"sha": "3c92453955c4ef4b6439a554d2277fed031ccb30", "filename": "gcc/fixed-value.c", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/79052416a684cde121a3f70619c2eb12371be67a/gcc%2Ffixed-value.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/79052416a684cde121a3f70619c2eb12371be67a/gcc%2Ffixed-value.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffixed-value.c?ref=79052416a684cde121a3f70619c2eb12371be67a", "patch": "@@ -86,7 +86,7 @@ check_real_for_fixed_mode (REAL_VALUE_TYPE *real_value, machine_mode mode)\n    The bits in PAYLOAD are sign-extended/zero-extended according to MODE.  */\n \n FIXED_VALUE_TYPE\n-fixed_from_double_int (double_int payload, machine_mode mode)\n+fixed_from_double_int (double_int payload, scalar_mode mode)\n {\n   FIXED_VALUE_TYPE value;\n \n@@ -108,7 +108,7 @@ fixed_from_double_int (double_int payload, machine_mode mode)\n /* Initialize from a decimal or hexadecimal string.  */\n \n void\n-fixed_from_string (FIXED_VALUE_TYPE *f, const char *str, machine_mode mode)\n+fixed_from_string (FIXED_VALUE_TYPE *f, const char *str, scalar_mode mode)\n {\n   REAL_VALUE_TYPE real_value, fixed_value, base_value;\n   unsigned int fbit;\n@@ -803,7 +803,7 @@ fixed_compare (int icode, const FIXED_VALUE_TYPE *op0,\n    Return true, if !SAT_P and overflow.  */\n \n bool\n-fixed_convert (FIXED_VALUE_TYPE *f, machine_mode mode,\n+fixed_convert (FIXED_VALUE_TYPE *f, scalar_mode mode,\n                const FIXED_VALUE_TYPE *a, bool sat_p)\n {\n   bool overflow_p = false;\n@@ -947,7 +947,7 @@ fixed_convert (FIXED_VALUE_TYPE *f, machine_mode mode,\n    Return true, if !SAT_P and overflow.  */\n \n bool\n-fixed_convert_from_int (FIXED_VALUE_TYPE *f, machine_mode mode,\n+fixed_convert_from_int (FIXED_VALUE_TYPE *f, scalar_mode mode,\n \t\t\tdouble_int a, bool unsigned_p, bool sat_p)\n {\n   bool overflow_p = false;\n@@ -1031,7 +1031,7 @@ fixed_convert_from_int (FIXED_VALUE_TYPE *f, machine_mode mode,\n    Return true, if !SAT_P and overflow.  */\n \n bool\n-fixed_convert_from_real (FIXED_VALUE_TYPE *f, machine_mode mode,\n+fixed_convert_from_real (FIXED_VALUE_TYPE *f, scalar_mode mode,\n \t\t\t const REAL_VALUE_TYPE *a, bool sat_p)\n {\n   bool overflow_p = false;\n@@ -1090,7 +1090,7 @@ fixed_convert_from_real (FIXED_VALUE_TYPE *f, machine_mode mode,\n /* Convert to a new real mode from a fixed-point.  */\n \n void\n-real_convert_from_fixed (REAL_VALUE_TYPE *r, machine_mode mode,\n+real_convert_from_fixed (REAL_VALUE_TYPE *r, scalar_mode mode,\n \t\t\t const FIXED_VALUE_TYPE *f)\n {\n   REAL_VALUE_TYPE base_value, fixed_value, real_value;"}, {"sha": "cc2180b3920029f0d7943d934516c1444d4005c1", "filename": "gcc/fixed-value.h", "status": "modified", "additions": 7, "deletions": 8, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/79052416a684cde121a3f70619c2eb12371be67a/gcc%2Ffixed-value.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/79052416a684cde121a3f70619c2eb12371be67a/gcc%2Ffixed-value.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffixed-value.h?ref=79052416a684cde121a3f70619c2eb12371be67a", "patch": "@@ -47,14 +47,13 @@ extern rtx const_fixed_from_fixed_value (FIXED_VALUE_TYPE, machine_mode);\n \n /* Construct a FIXED_VALUE from a bit payload and machine mode MODE.\n    The bits in PAYLOAD are sign-extended/zero-extended according to MODE.  */\n-extern FIXED_VALUE_TYPE fixed_from_double_int (double_int,\n-\t\t\t\t\t\t     machine_mode);\n+extern FIXED_VALUE_TYPE fixed_from_double_int (double_int, scalar_mode);\n \n /* Return a CONST_FIXED from a bit payload and machine mode MODE.\n    The bits in PAYLOAD are sign-extended/zero-extended according to MODE.  */\n static inline rtx\n const_fixed_from_double_int (double_int payload,\n-                             machine_mode mode)\n+\t\t\t     scalar_mode mode)\n {\n   return\n     const_fixed_from_fixed_value (fixed_from_double_int (payload, mode),\n@@ -63,25 +62,25 @@ const_fixed_from_double_int (double_int payload,\n \n /* Initialize from a decimal or hexadecimal string.  */\n extern void fixed_from_string (FIXED_VALUE_TYPE *, const char *,\n-\t\t\t       machine_mode);\n+\t\t\t       scalar_mode);\n \n /* In tree.c: wrap up a FIXED_VALUE_TYPE in a tree node.  */\n extern tree build_fixed (tree, FIXED_VALUE_TYPE);\n \n /* Extend or truncate to a new mode.  */\n-extern bool fixed_convert (FIXED_VALUE_TYPE *, machine_mode,\n+extern bool fixed_convert (FIXED_VALUE_TYPE *, scalar_mode,\n \t\t\t   const FIXED_VALUE_TYPE *, bool);\n \n /* Convert to a fixed-point mode from an integer.  */\n-extern bool fixed_convert_from_int (FIXED_VALUE_TYPE *, machine_mode,\n+extern bool fixed_convert_from_int (FIXED_VALUE_TYPE *, scalar_mode,\n \t\t\t\t    double_int, bool, bool);\n \n /* Convert to a fixed-point mode from a real.  */\n-extern bool fixed_convert_from_real (FIXED_VALUE_TYPE *, machine_mode,\n+extern bool fixed_convert_from_real (FIXED_VALUE_TYPE *, scalar_mode,\n \t\t\t\t     const REAL_VALUE_TYPE *, bool);\n \n /* Convert to a real mode from a fixed-point.  */\n-extern void real_convert_from_fixed (REAL_VALUE_TYPE *, machine_mode,\n+extern void real_convert_from_fixed (REAL_VALUE_TYPE *, scalar_mode,\n \t\t\t\t     const FIXED_VALUE_TYPE *);\n \n /* Compare two fixed-point objects for bitwise identity.  */"}]}