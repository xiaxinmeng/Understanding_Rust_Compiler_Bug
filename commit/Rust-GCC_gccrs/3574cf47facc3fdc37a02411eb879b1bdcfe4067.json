{"sha": "3574cf47facc3fdc37a02411eb879b1bdcfe4067", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzU3NGNmNDdmYWNjM2ZkYzM3YTAyNDExZWI4NzliMWJkY2ZlNDA2Nw==", "commit": {"author": {"name": "Bill Schmidt", "email": "wschmidt@linux.vnet.ibm.com", "date": "2016-01-12T04:49:55Z"}, "committer": {"name": "William Schmidt", "email": "wschmidt@gcc.gnu.org", "date": "2016-01-12T04:49:55Z"}, "message": "rs6000.c (v2df_reduction_p): New function.\n\n[gcc]\n\n2016-01-11  Bill Schmidt  <wschmidt@linux.vnet.ibm.com>\n\n\t* config/rs6000/rs6000.c (v2df_reduction_p): New function.\n\t(rtx_is_swappable_p): Reductions are swappable.\n\t(insn_is_swappable_p): V2DF reductions are swappable.\n\n[gcc/testsuite]\n\n2016-01-11  Bill Schmidt  <wschmidt@linux.vnet.ibm.com>\n\n\t* gcc.target/powerpc/swaps-p8-23.c: New test.\n\t* gcc.target/powerpc/swaps-p8-24.c: Likewise.\n\nFrom-SVN: r232257", "tree": {"sha": "a1cb600732732c578ca346068b994343e91cccc2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a1cb600732732c578ca346068b994343e91cccc2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3574cf47facc3fdc37a02411eb879b1bdcfe4067", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3574cf47facc3fdc37a02411eb879b1bdcfe4067", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3574cf47facc3fdc37a02411eb879b1bdcfe4067", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3574cf47facc3fdc37a02411eb879b1bdcfe4067/comments", "author": {"login": "wschmidt-ibm", "id": 5520937, "node_id": "MDQ6VXNlcjU1MjA5Mzc=", "avatar_url": "https://avatars.githubusercontent.com/u/5520937?v=4", "gravatar_id": "", "url": "https://api.github.com/users/wschmidt-ibm", "html_url": "https://github.com/wschmidt-ibm", "followers_url": "https://api.github.com/users/wschmidt-ibm/followers", "following_url": "https://api.github.com/users/wschmidt-ibm/following{/other_user}", "gists_url": "https://api.github.com/users/wschmidt-ibm/gists{/gist_id}", "starred_url": "https://api.github.com/users/wschmidt-ibm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/wschmidt-ibm/subscriptions", "organizations_url": "https://api.github.com/users/wschmidt-ibm/orgs", "repos_url": "https://api.github.com/users/wschmidt-ibm/repos", "events_url": "https://api.github.com/users/wschmidt-ibm/events{/privacy}", "received_events_url": "https://api.github.com/users/wschmidt-ibm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "feb20787df9cfe500d0fb41a157d77c8416bf0a7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/feb20787df9cfe500d0fb41a157d77c8416bf0a7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/feb20787df9cfe500d0fb41a157d77c8416bf0a7"}], "stats": {"total": 115, "additions": 115, "deletions": 0}, "files": [{"sha": "4a8a005138f9d587c8bf1c8573dffca992bfda5d", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3574cf47facc3fdc37a02411eb879b1bdcfe4067/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3574cf47facc3fdc37a02411eb879b1bdcfe4067/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=3574cf47facc3fdc37a02411eb879b1bdcfe4067", "patch": "@@ -1,3 +1,9 @@\n+2016-01-11  Bill Schmidt  <wschmidt@linux.vnet.ibm.com>\n+\n+\t* config/rs6000/rs6000.c (v2df_reduction_p): New function.\n+\t(rtx_is_swappable_p): Reductions are swappable.\n+\t(insn_is_swappable_p): V2DF reductions are swappable.\n+\n 2016-01-11  John David Anglin  <danglin@gcc.gnu.org>\n \n \t* config/pa/pa.c (pa_emit_move_sequence): Handle floating point"}, {"sha": "4cd6a1b58cd8bcc484eeb8508c6b3948df0a6f0a", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 52, "deletions": 0, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3574cf47facc3fdc37a02411eb879b1bdcfe4067/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3574cf47facc3fdc37a02411eb879b1bdcfe4067/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=3574cf47facc3fdc37a02411eb879b1bdcfe4067", "patch": "@@ -36648,6 +36648,44 @@ const_load_sequence_p (swap_web_entry *insn_entry, rtx insn)\n   return true;\n }\n \n+/* Return TRUE iff OP matches a V2DF reduction pattern.  See the\n+   definition of vsx_reduc_<VEC_reduc_name>_v2df in vsx.md.  */\n+static bool\n+v2df_reduction_p (rtx op)\n+{\n+  if (GET_MODE (op) != V2DFmode)\n+    return false;\n+  \n+  enum rtx_code code = GET_CODE (op);\n+  if (code != PLUS && code != SMIN && code != SMAX)\n+    return false;\n+\n+  rtx concat = XEXP (op, 0);\n+  if (GET_CODE (concat) != VEC_CONCAT)\n+    return false;\n+\n+  rtx select0 = XEXP (concat, 0);\n+  rtx select1 = XEXP (concat, 1);\n+  if (GET_CODE (select0) != VEC_SELECT || GET_CODE (select1) != VEC_SELECT)\n+    return false;\n+\n+  rtx reg0 = XEXP (select0, 0);\n+  rtx reg1 = XEXP (select1, 0);\n+  if (!rtx_equal_p (reg0, reg1) || !REG_P (reg0))\n+    return false;\n+\n+  rtx parallel0 = XEXP (select0, 1);\n+  rtx parallel1 = XEXP (select1, 1);\n+  if (GET_CODE (parallel0) != PARALLEL || GET_CODE (parallel1) != PARALLEL)\n+    return false;\n+\n+  if (!rtx_equal_p (XVECEXP (parallel0, 0, 0), const1_rtx)\n+      || !rtx_equal_p (XVECEXP (parallel1, 0, 0), const0_rtx))\n+    return false;\n+\n+  return true;\n+}\n+\n /* Return 1 iff OP is an operand that will not be affected by having\n    vector doublewords swapped in memory.  */\n static unsigned int\n@@ -36719,6 +36757,8 @@ rtx_is_swappable_p (rtx op, unsigned int *special)\n \t  *special = SH_XXPERMDI;\n \t  return 1;\n \t}\n+      else if (v2df_reduction_p (op))\n+\treturn 1;\n       else\n \treturn 0;\n \n@@ -36783,6 +36823,9 @@ rtx_is_swappable_p (rtx op, unsigned int *special)\n \t  case UNSPEC_VSPLT_DIRECT:\n \t    *special = SH_SPLAT;\n \t    return 1;\n+\t  case UNSPEC_REDUC_PLUS:\n+\t  case UNSPEC_REDUC:\n+\t    return 1;\n \t  }\n       }\n \n@@ -36907,6 +36950,15 @@ insn_is_swappable_p (swap_web_entry *insn_entry, rtx insn,\n       return 1;\n     }\n \n+  /* V2DF reductions are always swappable.  */\n+  if (GET_CODE (body) == PARALLEL)\n+    {\n+      rtx expr = XVECEXP (body, 0, 0);\n+      if (GET_CODE (expr) == SET\n+\t  && v2df_reduction_p (SET_SRC (expr)))\n+\treturn 1;\n+    }\n+\n   /* An UNSPEC_VPERM is ok if the mask operand is loaded from the\n      constant pool.  */\n   if (GET_CODE (body) == SET"}, {"sha": "97562b918172a53c58fbcad789d2aa2f4babefe1", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3574cf47facc3fdc37a02411eb879b1bdcfe4067/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3574cf47facc3fdc37a02411eb879b1bdcfe4067/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=3574cf47facc3fdc37a02411eb879b1bdcfe4067", "patch": "@@ -1,3 +1,8 @@\n+2016-01-11  Bill Schmidt  <wschmidt@linux.vnet.ibm.com>\n+\n+\t* gcc.target/powerpc/swaps-p8-23.c: New test.\n+\t* gcc.target/powerpc/swaps-p8-24.c: Likewise.\n+\n 2016-01-11  John David Anglin  <danglin@gcc.gnu.org>\n \n \tPR tree-optimization/68356"}, {"sha": "a3f83ae26b9f627b193e150d64ec56277396a3fe", "filename": "gcc/testsuite/gcc.target/powerpc/swaps-p8-23.c", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3574cf47facc3fdc37a02411eb879b1bdcfe4067/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fswaps-p8-23.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3574cf47facc3fdc37a02411eb879b1bdcfe4067/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fswaps-p8-23.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fswaps-p8-23.c?ref=3574cf47facc3fdc37a02411eb879b1bdcfe4067", "patch": "@@ -0,0 +1,26 @@\n+/* { dg-do compile { target { powerpc64le-*-* } } } */\n+/* { dg-skip-if \"do not override -mcpu\" { powerpc*-*-* } { \"-mcpu=*\" } { \"-mcpu=power8\" } } */\n+/* { dg-options \"-mcpu=power8 -O3 -ffast-math\" } */\n+/* { dg-final { scan-assembler \"lxvd2x\" } } */\n+/* { dg-final { scan-assembler-not \"xxpermdi\" } } */\n+\n+/* Verify that swap optimization works correctly in the presence of\n+   a V2DFmode reduction.  */\n+\n+extern double optvalue;\n+extern void obfuscate (double, unsigned int);\n+\n+void\n+foo (double *x, double *y, unsigned int n, unsigned int m)\n+{\n+  unsigned int i, j;\n+  double sacc;\n+  for (j = 0; j < m; ++j)\n+    {\n+      sacc = 0.0;\n+      for (i = 0; i < n; ++i)\n+\tsacc += x[i] * y[i];\n+      obfuscate (sacc, n);\n+    }\n+  optvalue = n * 2.0 * m;\n+}"}, {"sha": "528d6e6a68cfa508c14701b8380c918acb39d9d8", "filename": "gcc/testsuite/gcc.target/powerpc/swaps-p8-24.c", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3574cf47facc3fdc37a02411eb879b1bdcfe4067/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fswaps-p8-24.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3574cf47facc3fdc37a02411eb879b1bdcfe4067/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fswaps-p8-24.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fswaps-p8-24.c?ref=3574cf47facc3fdc37a02411eb879b1bdcfe4067", "patch": "@@ -0,0 +1,26 @@\n+/* { dg-do compile { target { powerpc64le-*-* } } } */\n+/* { dg-skip-if \"do not override -mcpu\" { powerpc*-*-* } { \"-mcpu=*\" } { \"-mcpu=power8\" } } */\n+/* { dg-options \"-mcpu=power8 -O3 -ffast-math\" } */\n+/* { dg-final { scan-assembler \"lxvd2x\" } } */\n+/* { dg-final { scan-assembler-not \"xxpermdi\" } } */\n+\n+/* Verify that swap optimization works correctly in the presence of\n+   a V4SFmode reduction.  */\n+\n+extern double optvalue;\n+extern void obfuscate (float, unsigned int);\n+\n+void\n+foo (float *x, float *y, unsigned int n, unsigned int m)\n+{\n+  unsigned int i, j;\n+  float sacc;\n+  for (j = 0; j < m; ++j)\n+    {\n+      sacc = 0.0f;\n+      for (i = 0; i < n; ++i)\n+\tsacc += x[i] * y[i];\n+      obfuscate (sacc, n);\n+    }\n+  optvalue = n * 2.0f * m;\n+}"}]}