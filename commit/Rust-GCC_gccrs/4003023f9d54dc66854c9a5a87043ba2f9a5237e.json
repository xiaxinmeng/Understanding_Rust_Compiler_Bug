{"sha": "4003023f9d54dc66854c9a5a87043ba2f9a5237e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDAwMzAyM2Y5ZDU0ZGM2Njg1NGM5YTVhODcwNDNiYTJmOWE1MjM3ZQ==", "commit": {"author": {"name": "Nick Clifton", "email": "nickc@redhat.com", "date": "2009-11-04T11:06:36Z"}, "committer": {"name": "Nick Clifton", "email": "nickc@gcc.gnu.org", "date": "2009-11-04T11:06:36Z"}, "message": "defaults.h (CONSTANT_ADDRESS_P): Provide a default definition.\n\n        * defaults.h (CONSTANT_ADDRESS_P): Provide a default definition.\n        Make sure that it does not allow CONST_DOUBLEs.\n        * doc/tm.texi (CONSTANT_ADDRESS_P): Update description.\n        * config/avr/avr.h (CONSTANT_ADDRESS_P): Delete.\n        * config/bfin/bfin.h (CONSTANT_ADDRESS_P): Delete.\n        * config/cris/cris.h (CONSTANT_ADDRESS_P): Delete.\n        * config/fr30/fr30.h (CONSTANT_ADDRESS_P): Delete.\n        * config/frv/frv.h (CONSTANT_ADDRESS_P): Delete.\n        * config/m32c/m32c.h (CONSTANT_ADDRESS_P): Delete.\n        * config/m68hc11/m68hc11.h (CONSTANT_ADDRESS_P): Delete.\n        * config/mep/mep.h (CONSTANT_ADDRESS_P): Delete.\n        * config/mn10300/mn10300.h (CONSTANT_ADDRESS_P): Delete.\n        * config/moxie/moxie.h (CONSTANT_ADDRESS_P): Delete.\n        * config/pdp11/pdp11.h (CONSTANT_ADDRESS_P): Delete.\n        * config/picochip/picochip.h (CONSTANT_ADDRESS_P): Delete.\n        * config/score/score.h (CONSTANT_ADDRESS_P): Delete.\n        * config/stormy16/stormy16.h (CONSTANT_ADDRESS_P): Delete.\n\nFrom-SVN: r153894", "tree": {"sha": "83cbbda09b74519a6b5f2487f8503c7bbafe3c10", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/83cbbda09b74519a6b5f2487f8503c7bbafe3c10"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4003023f9d54dc66854c9a5a87043ba2f9a5237e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4003023f9d54dc66854c9a5a87043ba2f9a5237e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4003023f9d54dc66854c9a5a87043ba2f9a5237e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4003023f9d54dc66854c9a5a87043ba2f9a5237e/comments", "author": {"login": "nickclifton", "id": 31441682, "node_id": "MDQ6VXNlcjMxNDQxNjgy", "avatar_url": "https://avatars.githubusercontent.com/u/31441682?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nickclifton", "html_url": "https://github.com/nickclifton", "followers_url": "https://api.github.com/users/nickclifton/followers", "following_url": "https://api.github.com/users/nickclifton/following{/other_user}", "gists_url": "https://api.github.com/users/nickclifton/gists{/gist_id}", "starred_url": "https://api.github.com/users/nickclifton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nickclifton/subscriptions", "organizations_url": "https://api.github.com/users/nickclifton/orgs", "repos_url": "https://api.github.com/users/nickclifton/repos", "events_url": "https://api.github.com/users/nickclifton/events{/privacy}", "received_events_url": "https://api.github.com/users/nickclifton/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "92fcbf95c187cb63ecd2172dcc0da1e72ca30c4a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/92fcbf95c187cb63ecd2172dcc0da1e72ca30c4a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/92fcbf95c187cb63ecd2172dcc0da1e72ca30c4a"}], "stats": {"total": 78, "additions": 26, "deletions": 52}, "files": [{"sha": "8afa6d11b11ee6f2a20cd12670b57a8c057861ce", "filename": "gcc/ChangeLog", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4003023f9d54dc66854c9a5a87043ba2f9a5237e/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4003023f9d54dc66854c9a5a87043ba2f9a5237e/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=4003023f9d54dc66854c9a5a87043ba2f9a5237e", "patch": "@@ -1,3 +1,23 @@\n+2009-11-04  Nick Clifton  <nickc@redhat.com>\n+\n+\t* defaults.h (CONSTANT_ADDRESS_P): Provide a default definition.\n+\tMake sure that it does not allow CONST_DOUBLEs.\n+\t* doc/tm.texi (CONSTANT_ADDRESS_P): Update description.\n+\t* config/avr/avr.h (CONSTANT_ADDRESS_P): Delete.\n+\t* config/bfin/bfin.h (CONSTANT_ADDRESS_P): Delete.\n+\t* config/cris/cris.h (CONSTANT_ADDRESS_P): Delete.\n+\t* config/fr30/fr30.h (CONSTANT_ADDRESS_P): Delete.\n+\t* config/frv/frv.h (CONSTANT_ADDRESS_P): Delete.\n+\t* config/m32c/m32c.h (CONSTANT_ADDRESS_P): Delete.\n+\t* config/m68hc11/m68hc11.h (CONSTANT_ADDRESS_P): Delete.\n+\t* config/mep/mep.h (CONSTANT_ADDRESS_P): Delete.\n+\t* config/mn10300/mn10300.h (CONSTANT_ADDRESS_P): Delete.\n+\t* config/moxie/moxie.h (CONSTANT_ADDRESS_P): Delete.\n+\t* config/pdp11/pdp11.h (CONSTANT_ADDRESS_P): Delete.\n+\t* config/picochip/picochip.h (CONSTANT_ADDRESS_P): Delete.\n+\t* config/score/score.h (CONSTANT_ADDRESS_P): Delete.\n+\t* config/stormy16/stormy16.h (CONSTANT_ADDRESS_P): Delete.\n+\n 2009-11-04  Richard Guenther  <rguenther@suse.de>\n \n \tPR tree-optimization/41919"}, {"sha": "782ad11627b31d69d20c26f0537b472bc171c582", "filename": "gcc/config/avr/avr.h", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4003023f9d54dc66854c9a5a87043ba2f9a5237e/gcc%2Fconfig%2Favr%2Favr.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4003023f9d54dc66854c9a5a87043ba2f9a5237e/gcc%2Fconfig%2Favr%2Favr.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Favr%2Favr.h?ref=4003023f9d54dc66854c9a5a87043ba2f9a5237e", "patch": "@@ -406,8 +406,6 @@ extern int avr_reg_order[];\n #define HAVE_POST_INCREMENT 1\n #define HAVE_PRE_DECREMENT 1\n \n-#define CONSTANT_ADDRESS_P(X) CONSTANT_P (X)\n-\n #define MAX_REGS_PER_ADDRESS 1\n \n #define REG_OK_FOR_BASE_NOSTRICT_P(X) \\"}, {"sha": "365680ee9fa095c5a6a927b05963ce09ea3ee947", "filename": "gcc/config/bfin/bfin.h", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4003023f9d54dc66854c9a5a87043ba2f9a5237e/gcc%2Fconfig%2Fbfin%2Fbfin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4003023f9d54dc66854c9a5a87043ba2f9a5237e/gcc%2Fconfig%2Fbfin%2Fbfin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fbfin%2Fbfin.h?ref=4003023f9d54dc66854c9a5a87043ba2f9a5237e", "patch": "@@ -911,9 +911,6 @@ typedef struct {\n \n /* Addressing Modes */\n \n-/* Recognize any constant value that is a valid address.  */\n-#define CONSTANT_ADDRESS_P(X)\t(CONSTANT_P (X))\n-\n /* Nonzero if the constant value X is a legitimate general operand.\n    symbol_ref are not legitimate and will be put into constant pool.\n    See force_const_mem()."}, {"sha": "3c426b74ae5d8af9c2bcffe22b380bda90c5762a", "filename": "gcc/config/cris/cris.h", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4003023f9d54dc66854c9a5a87043ba2f9a5237e/gcc%2Fconfig%2Fcris%2Fcris.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4003023f9d54dc66854c9a5a87043ba2f9a5237e/gcc%2Fconfig%2Fcris%2Fcris.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fcris%2Fcris.h?ref=4003023f9d54dc66854c9a5a87043ba2f9a5237e", "patch": "@@ -950,8 +950,6 @@ struct cum_args {int regs;};\n \n #define HAVE_POST_INCREMENT 1\n \n-#define CONSTANT_ADDRESS_P(X) CONSTANT_P (X)\n-\n /* Must be a compile-time constant, so we go with the highest value\n    among all CRIS variants.  */\n #define MAX_REGS_PER_ADDRESS 2"}, {"sha": "5e6237895b53059785f657d82ce674deb5f9106a", "filename": "gcc/config/fr30/fr30.h", "status": "modified", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4003023f9d54dc66854c9a5a87043ba2f9a5237e/gcc%2Fconfig%2Ffr30%2Ffr30.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4003023f9d54dc66854c9a5a87043ba2f9a5237e/gcc%2Fconfig%2Ffr30%2Ffr30.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Ffr30%2Ffr30.h?ref=4003023f9d54dc66854c9a5a87043ba2f9a5237e", "patch": "@@ -741,16 +741,6 @@ enum reg_class\n /*}}}*/ \f\n /*{{{  Addressing Modes.  */ \n \n-/* A C expression that is 1 if the RTX X is a constant which is a valid\n-   address.  On most machines, this can be defined as `CONSTANT_P (X)', but a\n-   few machines are more restrictive in which constant addresses are supported.\n-\n-   `CONSTANT_P' accepts integer-values expressions whose values are not\n-   explicitly known, such as `symbol_ref', `label_ref', and `high' expressions\n-   and `const' arithmetic expressions, in addition to `const_int' and\n-   `const_double' expressions.  */\n-#define CONSTANT_ADDRESS_P(X) CONSTANT_P (X)\n-\n /* A number, the maximum number of registers that can appear in a valid memory\n    address.  Note that it is up to you to specify a value equal to the maximum\n    number that `GO_IF_LEGITIMATE_ADDRESS' would ever accept.  */"}, {"sha": "d5a7a4a6670476b478d0af7dff890c781d5ca002", "filename": "gcc/config/frv/frv.h", "status": "modified", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4003023f9d54dc66854c9a5a87043ba2f9a5237e/gcc%2Fconfig%2Ffrv%2Ffrv.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4003023f9d54dc66854c9a5a87043ba2f9a5237e/gcc%2Fconfig%2Ffrv%2Ffrv.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Ffrv%2Ffrv.h?ref=4003023f9d54dc66854c9a5a87043ba2f9a5237e", "patch": "@@ -1927,16 +1927,6 @@ __asm__(\"\\n\"\t\t\t\t\t\t\t\t\\\n \f\n /* Addressing Modes.  */\n \n-/* A C expression that is 1 if the RTX X is a constant which is a valid\n-   address.  On most machines, this can be defined as `CONSTANT_P (X)', but a\n-   few machines are more restrictive in which constant addresses are supported.\n-\n-   `CONSTANT_P' accepts integer-values expressions whose values are not\n-   explicitly known, such as `symbol_ref', `label_ref', and `high' expressions\n-   and `const' arithmetic expressions, in addition to `const_int' and\n-   `const_double' expressions.  */\n-#define CONSTANT_ADDRESS_P(X) CONSTANT_P (X)\n-\n /* A number, the maximum number of registers that can appear in a valid memory\n    address.  Note that it is up to you to specify a value equal to the maximum\n    number that `TARGET_LEGITIMATE_ADDRESS_P' would ever accept.  */"}, {"sha": "78e3115c291efdf9b8f7674747e82de02d9f08c9", "filename": "gcc/config/m32c/m32c.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4003023f9d54dc66854c9a5a87043ba2f9a5237e/gcc%2Fconfig%2Fm32c%2Fm32c.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4003023f9d54dc66854c9a5a87043ba2f9a5237e/gcc%2Fconfig%2Fm32c%2Fm32c.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm32c%2Fm32c.h?ref=4003023f9d54dc66854c9a5a87043ba2f9a5237e", "patch": "@@ -560,7 +560,6 @@ typedef struct m32c_cumulative_args\n \n #define HAVE_PRE_DECREMENT 1\n #define HAVE_POST_INCREMENT 1\n-#define CONSTANT_ADDRESS_P(X) CONSTANT_P(X)\n #define MAX_REGS_PER_ADDRESS 1\n \n /* This is passed to the macros below, so that they can be implemented"}, {"sha": "278ba15c4facd636c547e20ebc48599147034ca4", "filename": "gcc/config/m68hc11/m68hc11.h", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4003023f9d54dc66854c9a5a87043ba2f9a5237e/gcc%2Fconfig%2Fm68hc11%2Fm68hc11.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4003023f9d54dc66854c9a5a87043ba2f9a5237e/gcc%2Fconfig%2Fm68hc11%2Fm68hc11.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68hc11%2Fm68hc11.h?ref=4003023f9d54dc66854c9a5a87043ba2f9a5237e", "patch": "@@ -1108,9 +1108,6 @@ extern unsigned char m68hc11_reg_valid_for_index[FIRST_PSEUDO_REGISTER];\n      && (GET_CODE (XEXP (operand, 0)) == POST_INC) \\\n      && (SP_REG_P (XEXP (XEXP (operand, 0), 0))))\n \n-/* 1 if X is an rtx for a constant that is a valid address.  */\n-#define CONSTANT_ADDRESS_P(X)\t(CONSTANT_P (X))\n-\n /* Maximum number of registers that can appear in a valid memory address */\n #define MAX_REGS_PER_ADDRESS\t2\n "}, {"sha": "9d286e33b94fa034a5cb4bd73f7b456dc5974284", "filename": "gcc/config/mep/mep.h", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4003023f9d54dc66854c9a5a87043ba2f9a5237e/gcc%2Fconfig%2Fmep%2Fmep.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4003023f9d54dc66854c9a5a87043ba2f9a5237e/gcc%2Fconfig%2Fmep%2Fmep.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmep%2Fmep.h?ref=4003023f9d54dc66854c9a5a87043ba2f9a5237e", "patch": "@@ -567,8 +567,6 @@ typedef struct\n #define TRAMPOLINE_SIZE 20\n \f\n \n-#define CONSTANT_ADDRESS_P(X) CONSTANT_P (X)\n-\n #define MAX_REGS_PER_ADDRESS 1\n \n #ifdef REG_OK_STRICT"}, {"sha": "c732aa0718041c65c5ea6735e15e4f66147375ee", "filename": "gcc/config/mn10300/mn10300.h", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4003023f9d54dc66854c9a5a87043ba2f9a5237e/gcc%2Fconfig%2Fmn10300%2Fmn10300.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4003023f9d54dc66854c9a5a87043ba2f9a5237e/gcc%2Fconfig%2Fmn10300%2Fmn10300.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmn10300%2Fmn10300.h?ref=4003023f9d54dc66854c9a5a87043ba2f9a5237e", "patch": "@@ -600,10 +600,6 @@ struct cum_arg {int nbytes; };\n    ? gen_rtx_MEM (Pmode, arg_pointer_rtx) \\\n    : (rtx) 0)\n \f\n-/* 1 if X is an rtx for a constant that is a valid address.  */\n-\n-#define CONSTANT_ADDRESS_P(X)   (CONSTANT_P (X) && GET_CODE (X) != CONST_DOUBLE)\n-\n /* Maximum number of registers that can appear in a valid memory address.  */\n \n #define MAX_REGS_PER_ADDRESS 2"}, {"sha": "384bce4a9866be7937c8a42eed91122d95eeb7b5", "filename": "gcc/config/moxie/moxie.h", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4003023f9d54dc66854c9a5a87043ba2f9a5237e/gcc%2Fconfig%2Fmoxie%2Fmoxie.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4003023f9d54dc66854c9a5a87043ba2f9a5237e/gcc%2Fconfig%2Fmoxie%2Fmoxie.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmoxie%2Fmoxie.h?ref=4003023f9d54dc66854c9a5a87043ba2f9a5237e", "patch": "@@ -475,10 +475,6 @@ enum reg_class\n    an immediate operand on the target machine.  */\n #define LEGITIMATE_CONSTANT_P(X) 1\n \n-/* A C expression that is 1 if the RTX X is a constant which is a\n-   valid address.  */\n-#define CONSTANT_ADDRESS_P(X) CONSTANT_P(X)\n-\n /* A number, the maximum number of registers that can appear in a\n    valid memory address.  */\n #define MAX_REGS_PER_ADDRESS 1"}, {"sha": "fe8c9e8aed3b85cd40495062dd9dc36c8753edb6", "filename": "gcc/config/pdp11/pdp11.h", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4003023f9d54dc66854c9a5a87043ba2f9a5237e/gcc%2Fconfig%2Fpdp11%2Fpdp11.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4003023f9d54dc66854c9a5a87043ba2f9a5237e/gcc%2Fconfig%2Fpdp11%2Fpdp11.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpdp11%2Fpdp11.h?ref=4003023f9d54dc66854c9a5a87043ba2f9a5237e", "patch": "@@ -594,10 +594,6 @@ extern int may_call_alloca;\n \n #define MAX_REGS_PER_ADDRESS 1\n \n-/* Recognize any constant value that is a valid address.  */\n-\n-#define CONSTANT_ADDRESS_P(X)  CONSTANT_P (X)\n-\n /* Nonzero if the constant value X is a legitimate general operand.\n    It is given that X satisfies CONSTANT_P or is a CONST_DOUBLE.  */\n "}, {"sha": "4d0c96278e044b12d8ae6f2d92ea1f76e3932d19", "filename": "gcc/config/picochip/picochip.h", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4003023f9d54dc66854c9a5a87043ba2f9a5237e/gcc%2Fconfig%2Fpicochip%2Fpicochip.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4003023f9d54dc66854c9a5a87043ba2f9a5237e/gcc%2Fconfig%2Fpicochip%2Fpicochip.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpicochip%2Fpicochip.h?ref=4003023f9d54dc66854c9a5a87043ba2f9a5237e", "patch": "@@ -471,8 +471,6 @@ extern const enum reg_class picochip_regno_reg_class[FIRST_PSEUDO_REGISTER];\n \f\n /* Addressing Modes  */\n \n-#define CONSTANT_ADDRESS_P(X) CONSTANT_P(X)\n-\n #define MAX_REGS_PER_ADDRESS 1\n \n /* Legitimize reload address tries machine dependent means of"}, {"sha": "cde9c22254606ed2155a67036164f58dd6d2dfe3", "filename": "gcc/config/score/score.h", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4003023f9d54dc66854c9a5a87043ba2f9a5237e/gcc%2Fconfig%2Fscore%2Fscore.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4003023f9d54dc66854c9a5a87043ba2f9a5237e/gcc%2Fconfig%2Fscore%2Fscore.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fscore%2Fscore.h?ref=4003023f9d54dc66854c9a5a87043ba2f9a5237e", "patch": "@@ -688,9 +688,6 @@ typedef struct score_args\n #define HAVE_PRE_MODIFY_REG             0\n #define HAVE_POST_MODIFY_REG            0\n \n-/* Recognize any constant value that is a valid address.  */\n-#define CONSTANT_ADDRESS_P(X)           CONSTANT_P (X)\n-\n /* Maximum number of registers that can appear in a valid memory address.  */\n #define MAX_REGS_PER_ADDRESS            1\n "}, {"sha": "fa97e8becdce3c9ee9d5c1eff85cab9af162e678", "filename": "gcc/config/stormy16/stormy16.h", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4003023f9d54dc66854c9a5a87043ba2f9a5237e/gcc%2Fconfig%2Fstormy16%2Fstormy16.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4003023f9d54dc66854c9a5a87043ba2f9a5237e/gcc%2Fconfig%2Fstormy16%2Fstormy16.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fstormy16%2Fstormy16.h?ref=4003023f9d54dc66854c9a5a87043ba2f9a5237e", "patch": "@@ -522,8 +522,6 @@ enum reg_class\n \n #define HAVE_PRE_DECREMENT 1\n \n-#define CONSTANT_ADDRESS_P(X) CONSTANT_P (X)\n-\n #define MAX_REGS_PER_ADDRESS 1\n \n #ifdef REG_OK_STRICT"}, {"sha": "182de95685c5f214fab1c3a0aedf9a621ae32778", "filename": "gcc/defaults.h", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4003023f9d54dc66854c9a5a87043ba2f9a5237e/gcc%2Fdefaults.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4003023f9d54dc66854c9a5a87043ba2f9a5237e/gcc%2Fdefaults.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdefaults.h?ref=4003023f9d54dc66854c9a5a87043ba2f9a5237e", "patch": "@@ -1154,4 +1154,10 @@ see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n #define GO_IF_MODE_DEPENDENT_ADDRESS(X, WIN)\n #endif\n \n+/* For most ports anything that evaluates to a constant symbolic\n+   or integer value is acceptable as a constant address.  */\n+#ifndef CONSTANT_ADDRESS_P\n+#define CONSTANT_ADDRESS_P(X)   (CONSTANT_P (X) && GET_CODE (X) != CONST_DOUBLE)\n+#endif\n+\n #endif  /* ! GCC_DEFAULTS_H */"}]}