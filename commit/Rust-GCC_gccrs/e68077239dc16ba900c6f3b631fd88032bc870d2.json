{"sha": "e68077239dc16ba900c6f3b631fd88032bc870d2", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTY4MDc3MjM5ZGMxNmJhOTAwYzZmM2I2MzFmZDg4MDMyYmM4NzBkMg==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2012-08-06T08:17:25Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2012-08-06T08:17:25Z"}, "message": "[multiple changes]\n\n2012-08-06  Geert Bosch  <bosch@adacore.com>\n\n\t* a-ngelfu.adb: Change obsolete comment that this is a non-strict\n\timplementation.\n\n2012-08-06  Steve Baird  <baird@adacore.com>\n\n\t* exp_ch7.adb (Build_Finalizer.Process_Object_Declaration): If\n\tCodePeer_Mode = True then omit exception handlers for finalization calls\n\n2012-08-06  Robert Dewar  <dewar@adacore.com>\n\n\t* exp_aggr.adb: Minor reformatting.\n\nFrom-SVN: r190165", "tree": {"sha": "a045f0edbeb7f8290f764a4308dc6a58d30da10d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a045f0edbeb7f8290f764a4308dc6a58d30da10d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e68077239dc16ba900c6f3b631fd88032bc870d2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e68077239dc16ba900c6f3b631fd88032bc870d2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e68077239dc16ba900c6f3b631fd88032bc870d2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e68077239dc16ba900c6f3b631fd88032bc870d2/comments", "author": null, "committer": null, "parents": [{"sha": "2aca76d6731a7d0602438ada075fcd651bde68cb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2aca76d6731a7d0602438ada075fcd651bde68cb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2aca76d6731a7d0602438ada075fcd651bde68cb"}], "stats": {"total": 38, "additions": 32, "deletions": 6}, "files": [{"sha": "0610114c4016fc08c3581aad9f6ba70465665604", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e68077239dc16ba900c6f3b631fd88032bc870d2/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e68077239dc16ba900c6f3b631fd88032bc870d2/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=e68077239dc16ba900c6f3b631fd88032bc870d2", "patch": "@@ -1,3 +1,17 @@\n+2012-08-06  Geert Bosch  <bosch@adacore.com>\n+\n+\t* a-ngelfu.adb: Change obsolete comment that this is a non-strict\n+\timplementation.\n+\n+2012-08-06  Steve Baird  <baird@adacore.com>\n+\n+\t* exp_ch7.adb (Build_Finalizer.Process_Object_Declaration): If\n+\tCodePeer_Mode = True then omit exception handlers for finalization calls\n+\n+2012-08-06  Robert Dewar  <dewar@adacore.com>\n+\n+\t* exp_aggr.adb: Minor reformatting.\n+\n 2012-08-06  Robert Dewar  <dewar@adacore.com>\n \n \t* sem_ch6.adb: Remove useless flag Body_Deleted."}, {"sha": "cd426ca7511fa4bba5bde593472aa226bcd1b915", "filename": "gcc/ada/a-ngelfu.adb", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e68077239dc16ba900c6f3b631fd88032bc870d2/gcc%2Fada%2Fa-ngelfu.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e68077239dc16ba900c6f3b631fd88032bc870d2/gcc%2Fada%2Fa-ngelfu.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-ngelfu.adb?ref=e68077239dc16ba900c6f3b631fd88032bc870d2", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1992-2011, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2012, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -31,9 +31,7 @@\n \n --  This body is specifically for using an Ada interface to C math.h to get\n --  the computation engine. Many special cases are handled locally to avoid\n---  unnecessary calls. This is not a \"strict\" implementation, but takes full\n---  advantage of the C functions, e.g. in providing interface to hardware\n---  provided versions of the elementary functions.\n+--  unnecessary calls or to meet Annex G strict mode requirements.\n \n --  Uses functions sqrt, exp, log, pow, sin, asin, cos, acos, tan, atan, sinh,\n --  cosh, tanh from C library via math.h"}, {"sha": "294a7d82ab2098b51655f68a4775200982078ce7", "filename": "gcc/ada/exp_aggr.adb", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e68077239dc16ba900c6f3b631fd88032bc870d2/gcc%2Fada%2Fexp_aggr.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e68077239dc16ba900c6f3b631fd88032bc870d2/gcc%2Fada%2Fexp_aggr.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_aggr.adb?ref=e68077239dc16ba900c6f3b631fd88032bc870d2", "patch": "@@ -3737,6 +3737,9 @@ package body Exp_Aggr is\n          Analyze_And_Resolve (N, Typ);\n       end if;\n \n+      --  Is Static_Eaboration_Desired has been specified, diagnose aggregates\n+      --  that will still require initialization code.\n+\n       if (Ekind (Current_Scope) = E_Package\n         and then Static_Elaboration_Desired (Current_Scope))\n         and then Nkind (Parent (N)) = N_Object_Declaration\n@@ -3745,7 +3748,7 @@ package body Exp_Aggr is\n             Expr : Node_Id;\n \n          begin\n-            if Present (Expressions (N)) then\n+            if Nkind (N) = N_Aggregate and then Present (Expressions (N)) then\n                Expr := First (Expressions (N));\n                while Present (Expr) loop\n                   if Nkind_In (Expr, N_Integer_Literal, N_Real_Literal)"}, {"sha": "122065df803cd9332e5569663966aa0ebc0297b6", "filename": "gcc/ada/exp_ch7.adb", "status": "modified", "additions": 12, "deletions": 1, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e68077239dc16ba900c6f3b631fd88032bc870d2/gcc%2Fada%2Fexp_ch7.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e68077239dc16ba900c6f3b631fd88032bc870d2/gcc%2Fada%2Fexp_ch7.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch7.adb?ref=e68077239dc16ba900c6f3b631fd88032bc870d2", "patch": "@@ -2645,7 +2645,18 @@ package body Exp_Ch7 is\n                 Obj_Ref => Obj_Ref,\n                 Typ     => Obj_Typ);\n \n-            if Exceptions_OK then\n+            --  For CodePeer, the exception handlers normally generated here\n+            --  generate complex flowgraphs which result in capacity problems.\n+            --  Omitting these handlers for CodePeer is justified as follows:\n+\n+            --    If a handler is dead, then omitting it is surely ok\n+\n+            --    If a handler is live, then CodePeer should flag the\n+            --      potentially-exception-raising construct that causes it\n+            --      to be live. That is what we are interested in, not what\n+            --      happens after the exception is raised.\n+\n+            if Exceptions_OK and not CodePeer_Mode then\n                Fin_Stmts := New_List (\n                  Make_Block_Statement (Loc,\n                    Handled_Statement_Sequence =>"}]}