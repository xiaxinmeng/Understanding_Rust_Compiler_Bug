{"sha": "4847c9386bfbaf333a36d7086c74a4b29f3b1461", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDg0N2M5Mzg2YmZiYWYzMzNhMzZkNzA4NmM3NGE0YjI5ZjNiMTQ2MQ==", "commit": {"author": {"name": "Mike Stump", "email": "mrs@gcc.gnu.org", "date": "1996-05-17T21:48:14Z"}, "committer": {"name": "Mike Stump", "email": "mrs@gcc.gnu.org", "date": "1996-05-17T21:48:14Z"}, "message": "expr.c (expand_expr, [...]): Make TARGET_EXPRs redoable for UNSAVE_EXPR.\n\n\t* expr.c (expand_expr, cond TARGET_EXPR): Make TARGET_EXPRs\n\tredoable for UNSAVE_EXPR.\n\t* stmt.c (expand_decl_cleanup): Wrap the cleanup in an UNSAVE_EXPR\n\tto that we can redo it.\n\t* tree.c (unsave_expr_now): Handle TARGET_EXPRs fully now.\n\t* tree.def (TARGET_EXPR): Add a third field so that TARGET_EXPRs\n\tare redoable.\n\nFrom-SVN: r12018", "tree": {"sha": "d45ed9209ff2030610011f8365b79f5db25beac6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d45ed9209ff2030610011f8365b79f5db25beac6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4847c9386bfbaf333a36d7086c74a4b29f3b1461", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4847c9386bfbaf333a36d7086c74a4b29f3b1461", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4847c9386bfbaf333a36d7086c74a4b29f3b1461", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4847c9386bfbaf333a36d7086c74a4b29f3b1461/comments", "author": null, "committer": null, "parents": [{"sha": "3cd456066e16f812b16ea0095bc392adbb94fa8f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3cd456066e16f812b16ea0095bc392adbb94fa8f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3cd456066e16f812b16ea0095bc392adbb94fa8f"}], "stats": {"total": 25, "additions": 14, "deletions": 11}, "files": [{"sha": "9dc6ccfe5c937236642e50cf0bbbd146ea7fd4ca", "filename": "gcc/expr.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4847c9386bfbaf333a36d7086c74a4b29f3b1461/gcc%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4847c9386bfbaf333a36d7086c74a4b29f3b1461/gcc%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpr.c?ref=4847c9386bfbaf333a36d7086c74a4b29f3b1461", "patch": "@@ -6705,7 +6705,7 @@ expand_expr (exp, target, tmode, modifier)\n \t    DECL_RTL (slot) = target;\n \t  }\n \n-\texp1 = TREE_OPERAND (exp, 1);\n+\texp1 = TREE_OPERAND (exp, 3) = TREE_OPERAND (exp, 1);\n \t/* Mark it as expanded.  */\n \tTREE_OPERAND (exp, 1) = NULL_TREE;\n "}, {"sha": "d9551f6a8ac91662facc9bc3d853c29b4d92d219", "filename": "gcc/stmt.c", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4847c9386bfbaf333a36d7086c74a4b29f3b1461/gcc%2Fstmt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4847c9386bfbaf333a36d7086c74a4b29f3b1461/gcc%2Fstmt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fstmt.c?ref=4847c9386bfbaf333a36d7086c74a4b29f3b1461", "patch": "@@ -3687,12 +3687,9 @@ bc_expand_decl_init (decl)\n /* CLEANUP is an expression to be executed at exit from this binding contour;\n    for example, in C++, it might call the destructor for this variable.\n \n-   If CLEANUP contains any SAVE_EXPRs, then you must preevaluate them\n-   either before or after calling `expand_decl_cleanup' but before compiling\n-   any subsequent expressions.  This is because CLEANUP may be expanded\n-   more than once, on different branches of execution.\n-   For the same reason, CLEANUP may not contain a CALL_EXPR\n-   except as its topmost node--else `preexpand_calls' would get confused.\n+   We wrap CLEANUP in an UNSAVE_EXPR node, so that we can expand the\n+   CLEANUP multiple times, and have the correct semantics.  This\n+   happens in exception handling, and for non-local gotos.\n \n    If CLEANUP is nonzero and DECL is zero, we record a cleanup\n    that is not associated with any particular variable.   */\n@@ -3711,6 +3708,8 @@ expand_decl_cleanup (decl, cleanup)\n \n   if (cleanup != 0)\n     {\n+      cleanup = unsave_expr (cleanup);\n+\n       thisblock->data.block.cleanups\n \t= temp_tree_cons (decl, cleanup, thisblock->data.block.cleanups);\n       /* If this block has a cleanup, it belongs in stack_block_stack.  */"}, {"sha": "0e31d5322fb63babea5311062bcf2aec93d0df92", "filename": "gcc/tree.c", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4847c9386bfbaf333a36d7086c74a4b29f3b1461/gcc%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4847c9386bfbaf333a36d7086c74a4b29f3b1461/gcc%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.c?ref=4847c9386bfbaf333a36d7086c74a4b29f3b1461", "patch": "@@ -2195,12 +2195,14 @@ unsave_expr_now (expr)\n       break;\n \n     case TARGET_EXPR:\n-      sorry (\"TARGET_EXPR reused inside UNSAVE_EXPR\");\n+      TREE_OPERAND (expr, 1) = TREE_OPERAND (expr, 3);\n+      TREE_OPERAND (expr, 3) = NULL_TREE;\n       break;\n       \n     case RTL_EXPR:\n-      warning (\"RTL_EXPR reused inside UNSAVE_EXPR\");\n-      RTL_EXPR_SEQUENCE (expr) = NULL_RTX;\n+      /* I don't yet know how to emit a sequence multiple times.  */\n+      if (RTL_EXPR_SEQUENCE (expr) != NULL_RTX)\n+\tabort ();\n       break;\n \n     case CALL_EXPR:"}, {"sha": "2b7088351f2dda250edeb63ec1959c67b0c7f1e4", "filename": "gcc/tree.def", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4847c9386bfbaf333a36d7086c74a4b29f3b1461/gcc%2Ftree.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4847c9386bfbaf333a36d7086c74a4b29f3b1461/gcc%2Ftree.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.def?ref=4847c9386bfbaf333a36d7086c74a4b29f3b1461", "patch": "@@ -406,7 +406,9 @@ DEFTREECODE (INIT_EXPR, \"init_expr\", \"e\", 2)\n \n /* For TARGET_EXPR, operand 0 is the target of an initialization,\n    operand 1 is the initializer for the target,\n-   and operand 2 is the cleanup for this node, if any.  */\n+   and operand 2 is the cleanup for this node, if any.\n+   and operand 3 is the saved initializer after this node has been\n+   expanded once, this is so we can re-expand the tree later.  */\n DEFTREECODE (TARGET_EXPR, \"target_expr\", \"e\", 3)\n \n /* Conditional expression ( ... ? ... : ...  in C)."}]}