{"sha": "fdecbf80705f71143b2ef3e598067b582be95903", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmRlY2JmODA3MDVmNzExNDNiMmVmM2U1OTgwNjdiNTgyYmU5NTkwMw==", "commit": {"author": {"name": "Paul Thomas", "email": "pault@gcc.gnu.org", "date": "2007-05-31T07:45:50Z"}, "committer": {"name": "Paul Thomas", "email": "pault@gcc.gnu.org", "date": "2007-05-31T07:45:50Z"}, "message": "re PR fortran/32103 (Module with equivalence draws \"unsatisfied reference\")\n\n2007-05-31  Paul Thomas  <pault@gcc.gnu.org>\n\n\tPR fortran/32103\n\t* module.c (mio_symtree_ref): If an equivalence group member\n\tis not used, give it a hidden symbol and set the pointer_info.\n\t(load_equiv): Only free the equivalence if none of the members\n\tare used.\n\n2007-05-31  Paul Thomas  <pault@gcc.gnu.org>\n\n\tPR fortran/32103\n\t* gfortran.dg/module_equivalence_3.f90: New test.\n\nFrom-SVN: r125216", "tree": {"sha": "dc1bbff7211de77af13ec23b2603163f0d6606c0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/dc1bbff7211de77af13ec23b2603163f0d6606c0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/fdecbf80705f71143b2ef3e598067b582be95903", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fdecbf80705f71143b2ef3e598067b582be95903", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fdecbf80705f71143b2ef3e598067b582be95903", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fdecbf80705f71143b2ef3e598067b582be95903/comments", "author": null, "committer": null, "parents": [{"sha": "eecb746156c95ba35140a06a6f056f1f90d3e1a1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/eecb746156c95ba35140a06a6f056f1f90d3e1a1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/eecb746156c95ba35140a06a6f056f1f90d3e1a1"}], "stats": {"total": 72, "additions": 63, "deletions": 9}, "files": [{"sha": "a4ebacabfafa501a414ff0aefc93b728e979b1ea", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fdecbf80705f71143b2ef3e598067b582be95903/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fdecbf80705f71143b2ef3e598067b582be95903/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=fdecbf80705f71143b2ef3e598067b582be95903", "patch": "@@ -1,4 +1,4 @@\n-2007-05-29  Daniel Franke  <franke.daniel@gmail.com>\n+2007-05-31  Paul Thomas  <pault@gcc.gnu.org>\r\r\tPR fortran/32103\r\t* module.c (mio_symtree_ref): If an equivalence group member\r\tis not used, give it a hidden symbol and set the pointer_info.\r\t(load_equiv): Only free the equivalence if none of the members\r\tare used.\r\r2007-05-29  Daniel Franke  <franke.daniel@gmail.com>\n \n \t* gfortran.h: Renamed 'enum gfc_generic_isym_id' to 'enum gfc_isym_id',\n \tadded missing GFC_ISYM_* enumerators, ordered alphabetically."}, {"sha": "132de385860cb3c948e153cb028c988e3be18029", "filename": "gcc/fortran/module.c", "status": "modified", "additions": 23, "deletions": 7, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fdecbf80705f71143b2ef3e598067b582be95903/gcc%2Ffortran%2Fmodule.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fdecbf80705f71143b2ef3e598067b582be95903/gcc%2Ffortran%2Fmodule.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fmodule.c?ref=fdecbf80705f71143b2ef3e598067b582be95903", "patch": "@@ -189,7 +189,7 @@ static gfc_use_rename *gfc_rename_list;\n static pointer_info *pi_root;\n static int symbol_number;\t/* Counter for assigning symbol numbers */\n \n-/* Tells mio_expr_ref not to load unused equivalence members.  */\n+/* Tells mio_expr_ref to make symbols for unused equivalence members.  */\n static bool in_load_equiv;\n \n \n@@ -2234,9 +2234,25 @@ mio_symtree_ref (gfc_symtree **stp)\n       require_atom (ATOM_INTEGER);\n       p = get_integer (atom_int);\n \n-      /* An unused equivalence member; bail out.  */\n+      /* An unused equivalence member; make a symbol and a symtree\n+\t for it.  */\n       if (in_load_equiv && p->u.rsym.symtree == NULL)\n-\treturn;\n+\t{\n+\t  /* Since this is not used, it must have a unique name.  */\n+\t  p->u.rsym.symtree = get_unique_symtree (gfc_current_ns);\n+\n+\t  /* Make the symbol.  */\n+\t  if (p->u.rsym.sym == NULL)\n+\t    {\n+\t      p->u.rsym.sym = gfc_new_symbol (p->u.rsym.true_name,\n+\t\t\t\t\t      gfc_current_ns);\n+\t      p->u.rsym.sym->module = gfc_get_string (p->u.rsym.module);\n+\t    }\n+\n+\t  p->u.rsym.symtree->n.sym = p->u.rsym.sym;\n+\t  p->u.rsym.symtree->n.sym->refs++;\n+\t  p->u.rsym.referenced = 1;\n+\t}\n       \n       if (p->type == P_UNKNOWN)\n \tp->type = P_SYMBOL;\n@@ -3206,13 +3222,13 @@ load_equiv (void)\n \tmio_expr (&tail->expr);\n       }\n \n-    /* Unused variables have no symtree.  */\n-    unused = false;\n+    /* Unused equivalence members have a unique name.  */\n+    unused = true;\n     for (eq = head; eq; eq = eq->eq)\n       {\n-\tif (!eq->expr->symtree)\n+\tif (!check_unique_name (eq->expr->symtree->name))\n \t  {\n-\t    unused = true;\n+\t    unused = false;\n \t    break;\n \t  }\n       }"}, {"sha": "045a3369169543e907e1b5ed84dab9169a62c26d", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fdecbf80705f71143b2ef3e598067b582be95903/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fdecbf80705f71143b2ef3e598067b582be95903/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=fdecbf80705f71143b2ef3e598067b582be95903", "patch": "@@ -1,4 +1,4 @@\n-2007-05-30  Russell Yanofsky <russ@yanofsky.org>\n+2007-05-31  Paul Thomas  <pault@gcc.gnu.org>\r\r\tPR fortran/32103\r\t* gfortran.dg/module_equivalence_3.f90: New test.\r\r2007-05-30  Russell Yanofsky <russ@yanofsky.org>\n             Douglas Gregor <doug.gregor@gmail.com>\n             Pedro Lamarao <pedro.lamarao@mndfck.org>\n             Howard Hinnant <howard.hinnant@gmail.com>"}, {"sha": "d646f97407e59a39d2d0d01c918d2475cc6a1a45", "filename": "gcc/testsuite/gfortran.dg/module_equivalence_3.f90", "status": "added", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fdecbf80705f71143b2ef3e598067b582be95903/gcc%2Ftestsuite%2Fgfortran.dg%2Fmodule_equivalence_3.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fdecbf80705f71143b2ef3e598067b582be95903/gcc%2Ftestsuite%2Fgfortran.dg%2Fmodule_equivalence_3.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fmodule_equivalence_3.f90?ref=fdecbf80705f71143b2ef3e598067b582be95903", "patch": "@@ -0,0 +1,38 @@\n+! { dg-do run }\n+! This checks the fix for PR32103 in which not using one member\n+! of an equivalence group would cause all memory of the equivalence\n+! to be lost and subsequent incorrect referencing of the remaining\n+! members. \n+!\n+! Contributed by Toon Moene <toon@moene.indiv.nluug.nl> \n+!\n+module aap\n+   real :: a(5) = (/1.0,2.0,3.0,4.0,5.0/) \n+   real :: b(3)\n+   real :: d(5) = (/1.0,2.0,3.0,4.0,5.0/) \n+   equivalence (a(3),b(1))\n+end module aap\n+\n+  use aap, only : b\n+  call foo\n+  call bar\n+!  call foobar\n+contains\n+  subroutine foo\n+    use aap, only : c=>b\n+    if (any(c .ne. b)) call abort ()\n+  end subroutine\n+  subroutine bar\n+    use aap, only : a\n+    if (any(a(3:5) .ne. b)) call abort ()\n+  end subroutine\n+\n+! Make sure that bad things do not happen if we do not USE a or b.\n+\n+  subroutine foobar\n+    use aap, only : d\n+    if (any(d(3:5) .ne. b)) call abort ()\n+  end subroutine\n+end\n+\n+! { dg-final { cleanup-modules \"aap\" } }"}]}