{"sha": "9aa8327e86eba9a5ad6dacb4db505e3451854976", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWFhODMyN2U4NmViYTlhNWFkNmRhY2I0ZGI1MDVlMzQ1MTg1NDk3Ng==", "commit": {"author": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2021-06-25T00:16:53Z"}, "committer": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2021-06-25T00:16:53Z"}, "message": "Daily bump.", "tree": {"sha": "bccc33bc87b444acd0d1574cbff1f19115874a8f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/bccc33bc87b444acd0d1574cbff1f19115874a8f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9aa8327e86eba9a5ad6dacb4db505e3451854976", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9aa8327e86eba9a5ad6dacb4db505e3451854976", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9aa8327e86eba9a5ad6dacb4db505e3451854976", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9aa8327e86eba9a5ad6dacb4db505e3451854976/comments", "author": null, "committer": null, "parents": [{"sha": "ce3316e9c02c81c509173572c71a101f4eb62a24", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ce3316e9c02c81c509173572c71a101f4eb62a24", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ce3316e9c02c81c509173572c71a101f4eb62a24"}], "stats": {"total": 470, "additions": 469, "deletions": 1}, "files": [{"sha": "7e16a491c4a2c7048fa0e0a3b9d45205224b0075", "filename": "ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9aa8327e86eba9a5ad6dacb4db505e3451854976/ChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9aa8327e86eba9a5ad6dacb4db505e3451854976/ChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/ChangeLog?ref=9aa8327e86eba9a5ad6dacb4db505e3451854976", "patch": "@@ -1,3 +1,7 @@\n+2021-06-24  prathamesh.kulkarni  <prathamesh.kulkarni@linaro.org>\n+\n+\t* .gitignore: Add entry for cscope.out.\n+\n 2021-06-22  liuhongt  <hongtao.liu@intel.com>\n \n \t* MAINTAINERS: Remove my Write After Approval entry."}, {"sha": "d7ea100d7f7b92d35c24e2ce3601d46992a6c3e1", "filename": "gcc/ChangeLog", "status": "modified", "additions": 231, "deletions": 0, "changes": 231, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9aa8327e86eba9a5ad6dacb4db505e3451854976/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9aa8327e86eba9a5ad6dacb4db505e3451854976/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=9aa8327e86eba9a5ad6dacb4db505e3451854976", "patch": "@@ -1,3 +1,234 @@\n+2021-06-24  Andrew MacLeod  <amacleod@redhat.com>\n+\n+\tPR tree-optimization/101189\n+\t* gimple-range-fold.cc (fold_using_range::range_of_range_op): Pass\n+\tLHS range of condition to postfold routine.\n+\t(fold_using_range::postfold_gcond_edges): Only process the TRUE or\n+\tFALSE edge if the LHS range supports it being taken.\n+\t* gimple-range-fold.h (postfold_gcond_edges): Add range parameter.\n+\n+2021-06-24  Andrew MacLeod  <amacleod@redhat.com>\n+\n+\t* value-relation.cc (equiv_oracle::dump): Do not dump NULL blocks.\n+\t(relation_oracle::find_relation_block): Check correct bitmap.\n+\t(relation_oracle::dump): Do not dump NULL blocks.\n+\n+2021-06-24  Andrew MacLeod  <amacleod@redhat.com>\n+\n+\t* gimple-range-cache.cc (ranger_cache::propagate_cache): Call\n+\trange_on_edge instead of manually calculating.\n+\n+2021-06-24  Andrew MacLeod  <amacleod@redhat.com>\n+\n+\t* range-op.cc: Fix comment.\n+\n+2021-06-24  Uro\u0161 Bizjak  <ubizjak@gmail.com>\n+\n+\tPR target/89021\n+\t* config/i386/i386-expand.c (ix86_expand_sse_unpack):\n+\tHandle V8QI and V4HI modes.\n+\t* config/i386/mmx.md (sse4_1_<any_extend:code>v4qiv4hi2):\n+\tNew insn pattern.\n+\t(sse4_1_<any_extend:code>v4qiv4hi2): Ditto.\n+\t(mmxpackmode): New mode attribute.\n+\t(vec_pack_trunc_<mmxpackmode:mode>): New expander.\n+\t(mmxunpackmode): New mode attribute.\n+\t(vec_unpacks_lo_<mmxunpackmode:mode>): New expander.\n+\t(vec_unpacks_hi_<mmxunpackmode:mode>): Ditto.\n+\t(vec_unpacku_lo_<mmxunpackmode:mode>): Ditto.\n+\t(vec_unpacku_hi_<mmxunpackmode:mode>): Ditto.\n+\t* config/i386/i386.md (extsuffix): Move from ...\n+\t* config/i386/sse.md: ... here.\n+\n+2021-06-24  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* dwarf2out.c (dwarf2out_assembly_start): Emit .file 0 marker here..\n+\t(dwarf2out_finish): ...instead of here.\n+\n+2021-06-24  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* configure.ac (--gdwarf-5 option): Use objdump instead of readelf.\n+\t(working --gdwarf-4/--gdwarf-5 for all sources): Likewise.\n+\t(--gdwarf-4 not refusing generated .debug_line): Adjust for Windows.\n+\t* configure: Regenerate.\n+\n+2021-06-24  Richard Biener  <rguenther@suse.de>\n+\n+\t* config/i386/sse.md (vec_addsubv4df3, vec_addsubv2df3,\n+\tvec_addsubv8sf3, vec_addsubv4sf3): Merge into ...\n+\t(vec_addsub<mode>3): ... using a new addsub_cst mode attribute.\n+\n+2021-06-24  Richard Biener  <rguenther@suse.de>\n+\n+\t* config/i386/sse.md (avx_addsubv4df3): Rename to\n+\tvec_addsubv4df3.\n+\t(avx_addsubv8sf3): Rename to vec_addsubv8sf3.\n+\t(sse3_addsubv2df3): Rename to vec_addsubv2df3.\n+\t(sse3_addsubv4sf3): Rename to vec_addsubv4sf3.\n+\t* config/i386/i386-builtin.def: Adjust.\n+\t* internal-fn.def (VEC_ADDSUB): New internal optab fn.\n+\t* optabs.def (vec_addsub_optab): New optab.\n+\t* tree-vect-slp-patterns.c (class addsub_pattern): New.\n+\t(slp_patterns): Add addsub_pattern.\n+\t* tree-vect-slp.c (vect_optimize_slp): Disable propagation\n+\tacross CFN_VEC_ADDSUB.\n+\t* tree-vectorizer.h (vect_pattern::vect_pattern): Make\n+\tm_ops optional.\n+\t* doc/md.texi (vec_addsub<mode>3): Document.\n+\n+2021-06-24  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR middle-end/101170\n+\t* df-scan.c (df_ref_record): For paradoxical big-endian SUBREGs\n+\twhere regno + subreg_regno_offset wraps around use 0 as starting\n+\tregno.\n+\n+2021-06-24  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR middle-end/101172\n+\t* stor-layout.c (finish_bitfield_representative): If nextf has\n+\terror_mark_node type, set repr type to error_mark_node too.\n+\n+2021-06-24  Ilya Leoshkevich  <iii@linux.ibm.com>\n+\n+\t* config/s390/s390.c (s390_function_profiler): Ignore labelno\n+\tparameter.\n+\t* config/s390/s390.h (NO_PROFILE_COUNTERS): Define.\n+\n+2021-06-24  Richard Biener  <rguenther@suse.de>\n+\n+\t* tree-vect-slp.c (vect_optimize_slp): Do not propagate\n+\tacross operations that have different semantics on different\n+\tlanes.\n+\n+2021-06-24  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* tree.h (OMP_CLAUSE_MAP_IN_REDUCTION): Document meaning for OpenMP.\n+\t* gimplify.c (gimplify_scan_omp_clauses): For OpenMP map clauses\n+\twith OMP_CLAUSE_MAP_IN_REDUCTION flag partially defer gimplification\n+\tof non-decl OMP_CLAUSE_DECL.  For OMP_CLAUSE_IN_REDUCTION on\n+\tOMP_TARGET user outer_ctx instead of ctx for placeholders and\n+\tinitializer/combiner gimplification.\n+\t* omp-low.c (scan_sharing_clauses): Handle OMP_CLAUSE_MAP_IN_REDUCTION\n+\ton target constructs.\n+\t(lower_rec_input_clauses): Likewise.\n+\t(lower_omp_target): Likewise.\n+\t* omp-expand.c (expand_omp_target): Temporarily ignore nowait clause\n+\ton target if in_reduction is present.\n+\n+2021-06-24  Kewen Lin  <linkw@linux.ibm.com>\n+\n+\t* tree-predcom.c (class pcom_worker): New class.\n+\t(release_chain): Renamed to...\n+\t(pcom_worker::release_chain): ...this.\n+\t(release_chains): Renamed to...\n+\t(pcom_worker::release_chains): ...this.\n+\t(aff_combination_dr_offset): Renamed to...\n+\t(pcom_worker::aff_combination_dr_offset): ...this.\n+\t(determine_offset): Renamed to...\n+\t(pcom_worker::determine_offset): ...this.\n+\t(class comp_ptrs): New class.\n+\t(split_data_refs_to_components): Renamed to...\n+\t(pcom_worker::split_data_refs_to_components): ...this,\n+\tand update with class comp_ptrs.\n+\t(suitable_component_p): Renamed to...\n+\t(pcom_worker::suitable_component_p): ...this.\n+\t(filter_suitable_components): Renamed to...\n+\t(pcom_worker::filter_suitable_components): ...this.\n+\t(valid_initializer_p): Renamed to...\n+\t(pcom_worker::valid_initializer_p): ...this.\n+\t(find_looparound_phi): Renamed to...\n+\t(pcom_worker::find_looparound_phi): ...this.\n+\t(add_looparound_copies): Renamed to...\n+\t(pcom_worker::add_looparound_copies): ...this.\n+\t(determine_roots_comp): Renamed to...\n+\t(pcom_worker::determine_roots_comp): ...this.\n+\t(determine_roots): Renamed to...\n+\t(pcom_worker::determine_roots): ...this.\n+\t(single_nonlooparound_use): Renamed to...\n+\t(pcom_worker::single_nonlooparound_use): ...this.\n+\t(remove_stmt): Renamed to...\n+\t(pcom_worker::remove_stmt): ...this.\n+\t(execute_pred_commoning_chain): Renamed to...\n+\t(pcom_worker::execute_pred_commoning_chain): ...this.\n+\t(execute_pred_commoning): Renamed to...\n+\t(pcom_worker::execute_pred_commoning): ...this.\n+\t(struct epcc_data): New member worker.\n+\t(execute_pred_commoning_cbck): Call execute_pred_commoning\n+\twith pcom_worker pointer.\n+\t(find_use_stmt): Renamed to...\n+\t(pcom_worker::find_use_stmt): ...this.\n+\t(find_associative_operation_root): Renamed to...\n+\t(pcom_worker::find_associative_operation_root): ...this.\n+\t(find_common_use_stmt): Renamed to...\n+\t(pcom_worker::find_common_use_stmt): ...this.\n+\t(combinable_refs_p): Renamed to...\n+\t(pcom_worker::combinable_refs_p): ...this.\n+\t(reassociate_to_the_same_stmt): Renamed to...\n+\t(pcom_worker::reassociate_to_the_same_stmt): ...this.\n+\t(stmt_combining_refs): Renamed to...\n+\t(pcom_worker::stmt_combining_refs): ...this.\n+\t(combine_chains): Renamed to...\n+\t(pcom_worker::combine_chains): ...this.\n+\t(try_combine_chains): Renamed to...\n+\t(pcom_worker::try_combine_chains): ...this.\n+\t(prepare_initializers_chain): Renamed to...\n+\t(pcom_worker::prepare_initializers_chain): ...this.\n+\t(prepare_initializers): Renamed to...\n+\t(pcom_worker::prepare_initializers): ...this.\n+\t(prepare_finalizers_chain): Renamed to...\n+\t(pcom_worker::prepare_finalizers_chain): ...this.\n+\t(prepare_finalizers): Renamed to...\n+\t(pcom_worker::prepare_finalizers): ...this.\n+\t(tree_predictive_commoning_loop): Renamed to...\n+\t(pcom_worker::tree_predictive_commoning_loop): ...this, adjust\n+\tsome calls and remove some cleanup code.\n+\t(tree_predictive_commoning): Adjusted to use pcom_worker instance.\n+\t(static variable looparound_phis): Remove.\n+\t(static variable name_expansions): Remove.\n+\n+2021-06-24  Richard Biener  <rguenther@suse.de>\n+\n+\t* tree-vect-slp.c (slpg_vertex): New struct.\n+\t(vect_slp_build_vertices): Adjust.\n+\t(vect_optimize_slp): Likewise.  Maintain an outgoing permute\n+\tand a materialized one.\n+\n+2021-06-24  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/101105\n+\t* tree-vect-data-refs.c (vect_prune_runtime_alias_test_list):\n+\tOnly ignore steps when they are equal or scalar order is preserved.\n+\n+2021-06-24  liuhongt  <hongtao.liu@intel.com>\n+\n+\tPR target/98434\n+\t* config/i386/i386-expand.c (ix86_expand_vec_interleave):\n+\tAdjust comments for ix86_expand_vecop_qihi2.\n+\t(ix86_expand_vecmul_qihi): Renamed to ..\n+\t(ix86_expand_vecop_qihi2): Adjust function prototype to\n+\tsupport shift operation, add static to definition.\n+\t(ix86_expand_vec_shift_qihi_constant): Add static to definition.\n+\t(ix86_expand_vecop_qihi): Call ix86_expand_vecop_qihi2 and\n+\tix86_expand_vec_shift_qihi_constant.\n+\t* config/i386/i386-protos.h (ix86_expand_vecmul_qihi): Deleted.\n+\t(ix86_expand_vec_shift_qihi_constant): Deleted.\n+\t* config/i386/sse.md (VI12_256_512_AVX512VL): New mode\n+\titerator.\n+\t(mulv8qi3): Call ix86_expand_vecop_qihi directly, add\n+\tcondition TARGET_64BIT.\n+\t(mul<mode>3): Ditto.\n+\t(<insn><mode>3): Ditto.\n+\t(vlshr<mode>3): Extend to support avx512 vlshr.\n+\t(v<insn><mode>3): New expander for\n+\tvashr/vlshr/vashl.\n+\t(v<insn>v8qi3): Ditto.\n+\t(vashrv8hi3<mask_name>): Renamed to ..\n+\t(vashr<mode>3): And extend to support V16QImode for avx512.\n+\t(vashrv16qi3): Deleted.\n+\t(vashrv2di3<mask_name>): Extend expander to support avx512\n+\tinstruction.\n+\n 2021-06-23  Dimitar Dimitrov  <dimitar@dinux.eu>\n \n \t* doc/lto.texi (Design Overview): Update that slim objects are"}, {"sha": "ed06b627c4d88aa1c781561eb117742173ba1813", "filename": "gcc/DATESTAMP", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9aa8327e86eba9a5ad6dacb4db505e3451854976/gcc%2FDATESTAMP", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9aa8327e86eba9a5ad6dacb4db505e3451854976/gcc%2FDATESTAMP", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FDATESTAMP?ref=9aa8327e86eba9a5ad6dacb4db505e3451854976", "patch": "@@ -1 +1 @@\n-20210624\n+20210625"}, {"sha": "1521f2db87899aa1a2bdec378aecb5f856ec2fff", "filename": "gcc/c-family/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9aa8327e86eba9a5ad6dacb4db505e3451854976/gcc%2Fc-family%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9aa8327e86eba9a5ad6dacb4db505e3451854976/gcc%2Fc-family%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2FChangeLog?ref=9aa8327e86eba9a5ad6dacb4db505e3451854976", "patch": "@@ -1,3 +1,10 @@\n+2021-06-24  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* c-common.h (enum c_omp_region_type): Add C_ORT_TARGET and\n+\tC_ORT_OMP_TARGET.\n+\t* c-omp.c (c_omp_split_clauses): For OMP_CLAUSE_IN_REDUCTION on\n+\tcombined target constructs also add map (always, tofrom:) clause.\n+\n 2021-06-15  Robin Dapp  <rdapp@linux.ibm.com>\n \n \t* c-attribs.c (common_handle_aligned_attribute): Remove short"}, {"sha": "c38b6655abe8e19f1ab811ccde150dbb165b1c1c", "filename": "gcc/c/ChangeLog", "status": "modified", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9aa8327e86eba9a5ad6dacb4db505e3451854976/gcc%2Fc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9aa8327e86eba9a5ad6dacb4db505e3451854976/gcc%2Fc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2FChangeLog?ref=9aa8327e86eba9a5ad6dacb4db505e3451854976", "patch": "@@ -1,3 +1,30 @@\n+2021-06-24  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR c/101176\n+\t* c-parser.c (c_parser_has_attribute_expression): Set source range for\n+\tthe result.\n+\n+2021-06-24  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR c/101171\n+\t* c-typeck.c (build_c_cast): Don't call note_integer_operands on\n+\terror_mark_node.\n+\n+2021-06-24  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* c-parser.c (omp_split_clauses): Pass C_ORT_OMP_TARGET instead of\n+\tC_ORT_OMP for clauses on target construct.\n+\t(OMP_TARGET_CLAUSE_MASK): Add in_reduction clause.\n+\t(c_parser_omp_target): For non-combined target add\n+\tmap (always, tofrom:) clauses for OMP_CLAUSE_IN_REDUCTION.  Pass\n+\tC_ORT_OMP_TARGET to c_finish_omp_clauses.\n+\t* c-typeck.c (handle_omp_array_sections): Adjust ort handling\n+\tfor addition of C_ORT_OMP_TARGET and simplify, mapping clauses are\n+\tnever present on C_ORT_*DECLARE_SIMD.\n+\t(c_finish_omp_clauses): Likewise.  Handle OMP_CLAUSE_IN_REDUCTION\n+\ton C_ORT_OMP_TARGET, set OMP_CLAUSE_MAP_IN_REDUCTION on\n+\tcorresponding map clauses.\n+\n 2021-06-21  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR inline-asm/100785"}, {"sha": "770d327bb7b903819955895f6c1cd1b0eabd5d55", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9aa8327e86eba9a5ad6dacb4db505e3451854976/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9aa8327e86eba9a5ad6dacb4db505e3451854976/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=9aa8327e86eba9a5ad6dacb4db505e3451854976", "patch": "@@ -1,3 +1,33 @@\n+2021-06-24  Patrick Palka  <ppalka@redhat.com>\n+\n+\tPR c++/98832\n+\t* pt.c (maybe_aggr_guide): Handle alias templates appropriately.\n+\n+2021-06-24  Patrick Palka  <ppalka@redhat.com>\n+\n+\tPR c++/101182\n+\t* constraint.cc (evaluate_requires_expr): Adjust function comment.\n+\t* cp-gimplify.c (cp_genericize_r) <case REQUIRES_EXPR>: Move to ...\n+\t(cp_fold) <case REQUIRES_EXPR>: ... here.\n+\n+2021-06-24  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* parser.c (cp_omp_split_clauses): Pass C_ORT_OMP_TARGET instead of\n+\tC_ORT_OMP for clauses on target construct.\n+\t(OMP_TARGET_CLAUSE_MASK): Add in_reduction clause.\n+\t(cp_parser_omp_target): For non-combined target add\n+\tmap (always, tofrom:) clauses for OMP_CLAUSE_IN_REDUCTION.  Pass\n+\tC_ORT_OMP_TARGET to finish_omp_clauses.\n+\t* semantics.c (handle_omp_array_sections_1): Adjust ort handling\n+\tfor addition of C_ORT_OMP_TARGET and simplify, mapping clauses are\n+\tnever present on C_ORT_*DECLARE_SIMD.\n+\t(handle_omp_array_sections): Likewise.\n+\t(finish_omp_clauses): Likewise.  Handle OMP_CLAUSE_IN_REDUCTION\n+\ton C_ORT_OMP_TARGET, set OMP_CLAUSE_MAP_IN_REDUCTION on\n+\tcorresponding map clauses.\n+\t* pt.c (tsubst_expr): Pass C_ORT_OMP_TARGET instead of C_ORT_OMP for\n+\tclauses on target construct.\n+\n 2021-06-23  Patrick Palka  <ppalka@redhat.com>\n \n \tPR c++/101174"}, {"sha": "6895330cd855d1ab299b5a871574b85429f3ec54", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 76, "deletions": 0, "changes": 76, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9aa8327e86eba9a5ad6dacb4db505e3451854976/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9aa8327e86eba9a5ad6dacb4db505e3451854976/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=9aa8327e86eba9a5ad6dacb4db505e3451854976", "patch": "@@ -1,3 +1,79 @@\n+2021-06-24  Andrew MacLeod  <amacleod@redhat.com>\n+\n+\t* gcc.dg/tree-ssa/evrp30.c: New.\n+\n+2021-06-24  Andrew MacLeod  <amacleod@redhat.com>\n+\n+\t* gcc.dg/tree-ssa/pr101189.c: New.\n+\n+2021-06-24  Patrick Palka  <ppalka@redhat.com>\n+\n+\tPR c++/98832\n+\t* g++.dg/cpp2a/class-deduction-alias9.C: New test.\n+\n+2021-06-24  Patrick Palka  <ppalka@redhat.com>\n+\n+\tPR c++/101182\n+\t* g++.dg/cpp2a/concepts-requires25.C: New test.\n+\n+2021-06-24  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR c/101171\n+\t* gcc.dg/pr101171.c: New test.\n+\n+2021-06-24  Uro\u0161 Bizjak  <ubizjak@gmail.com>\n+\n+\tPR target/89021\n+\t* gcc.dg/vect/vect-nb-iter-ub-3.c (dg-additional-options):\n+\tAdd --param vect-epilogues-nomask=0.\n+\t* gcc.target/i386/pr97249-1.c (foo): Add #pragma GCC unroll\n+\tto avoid loop vectorization.\n+\t(foo1): Ditto.\n+\t(foo2): Ditto.\n+\n+2021-06-24  Richard Biener  <rguenther@suse.de>\n+\n+\t* gcc.target/i386/vect-addsubv2df.c: New testcase.\n+\t* gcc.target/i386/vect-addsubv4sf.c: Likewise.\n+\t* gcc.target/i386/vect-addsubv4df.c: Likewise.\n+\t* gcc.target/i386/vect-addsubv8sf.c: Likewise.\n+\t* gcc.target/i386/vect-addsub-2.c: Likewise.\n+\t* gcc.target/i386/vect-addsub-3.c: Likewise.\n+\n+2021-06-24  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR middle-end/101170\n+\t* gcc.dg/pr101170.c: New test.\n+\n+2021-06-24  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR middle-end/101172\n+\t* gcc.dg/pr101172.c: New test.\n+\n+2021-06-24  Ilya Leoshkevich  <iii@linux.ibm.com>\n+\n+\t* gcc.target/s390/mnop-mcount-m31-mzarch.c: Adapt to the new\n+\tprologue size.\n+\t* gcc.target/s390/mnop-mcount-m64.c: Likewise.\n+\n+2021-06-24  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* c-c++-common/gomp/target-in-reduction-1.c: New test.\n+\t* c-c++-common/gomp/clauses-1.c: Add in_reduction clauses on\n+\ttarget or combined target constructs.\n+\n+2021-06-24  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/101105\n+\t* gcc.dg/torture/pr101105.c: New testcase.\n+\n+2021-06-24  liuhongt  <hongtao.liu@intel.com>\n+\n+\tPR target/98434\n+\t* gcc.target/i386/pr98434-1.c: New test.\n+\t* gcc.target/i386/pr98434-2.c: New test.\n+\t* gcc.target/i386/avx512vl-pr95488-1.c: Adjust testcase.\n+\n 2021-06-23  Patrick Palka  <ppalka@redhat.com>\n \n \tPR c++/101174"}, {"sha": "640d6fa3c1a56cd3c8f57b7ddea7c3d6901d707a", "filename": "libgomp/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9aa8327e86eba9a5ad6dacb4db505e3451854976/libgomp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9aa8327e86eba9a5ad6dacb4db505e3451854976/libgomp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2FChangeLog?ref=9aa8327e86eba9a5ad6dacb4db505e3451854976", "patch": "@@ -1,3 +1,10 @@\n+2021-06-24  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* testsuite/libgomp.c-c++-common/target-in-reduction-1.c: New test.\n+\t* testsuite/libgomp.c-c++-common/target-in-reduction-2.c: New test.\n+\t* testsuite/libgomp.c++/target-in-reduction-1.C: New test.\n+\t* testsuite/libgomp.c++/target-in-reduction-2.C: New test.\n+\n 2021-06-23  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR middle-end/101167"}, {"sha": "58d591cccfbeb68ac987bf8d2ee0f514c5225c7e", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 86, "deletions": 0, "changes": 86, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9aa8327e86eba9a5ad6dacb4db505e3451854976/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9aa8327e86eba9a5ad6dacb4db505e3451854976/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=9aa8327e86eba9a5ad6dacb4db505e3451854976", "patch": "@@ -1,3 +1,89 @@\n+2021-06-24  Matthias Kretz  <m.kretz@gsi.de>\n+\n+\t* include/experimental/bits/simd_math.h\n+\t(_GLIBCXX_SIMD_MATH_CALL2_): Rename arg2_ to __arg2.\n+\t(_GLIBCXX_SIMD_MATH_CALL3_): Rename arg2_ to __arg2 and arg3_ to\n+\t__arg3.\n+\n+2021-06-24  Matthias Kretz  <m.kretz@gsi.de>\n+\n+\t* include/experimental/bits/simd.h (__execute_on_index_sequence)\n+\t(__execute_on_index_sequence_with_return)\n+\t(__call_with_n_evaluations, __call_with_subscripts): Add flatten\n+\tattribute.\n+\n+2021-06-24  Matthias Kretz  <m.kretz@gsi.de>\n+\n+\t* include/experimental/bits/simd_x86.h (_S_trunc, _S_floor)\n+\t(_S_ceil): Set bit 8 (_MM_FROUND_NO_EXC) on AVX and SSE4.1\n+\troundp[sd] calls.\n+\n+2021-06-24  Matthias Kretz  <m.kretz@gsi.de>\n+\n+\t* include/experimental/bits/simd_x86.h (_S_ldexp): The AVX512F\n+\timplementation doesn't require a _VecBltnBtmsk ABI tag, it\n+\trequires either a 64-Byte input (in which case AVX512F must be\n+\tavailable) or AVX512VL.\n+\n+2021-06-24  Matthias Kretz  <m.kretz@gsi.de>\n+\n+\t* include/experimental/bits/simd_math.h: Undefine internal\n+\tmacros after use.\n+\t(frexp): Move #if to a more sensible position and reformat\n+\tpreceding code.\n+\t(logb): Call _SimdImpl::_S_logb for fixed_size instead of\n+\tduplicating the code here.\n+\t(modf): Simplify condition.\n+\n+2021-06-24  Matthias Kretz  <m.kretz@gsi.de>\n+\n+\t* include/experimental/bits/simd_math.h (fabs): Remove\n+\tfabs(simd<integral>) overload.\n+\n+2021-06-24  Matthias Kretz  <m.kretz@gsi.de>\n+\n+\t* include/experimental/bits/simd_converter.h\n+\t(_SimdConverter::operator()): Pass _SimdTuple by const-ref.\n+\t* include/experimental/bits/simd_fixed_size.h\n+\t(_GLIBCXX_SIMD_FIXED_OP): Pass binary operator _SimdTuple\n+\targuments by const-ref.\n+\t(_S_masked_unary): Pass _SimdTuple by const-ref.\n+\n+2021-06-24  Matthias Kretz  <m.kretz@gsi.de>\n+\n+\t* include/experimental/bits/simd_fixed_size.h\n+\t(_AbisInSimdTuple): Removed.\n+\n+2021-06-24  Matthias Kretz  <m.kretz@gsi.de>\n+\n+\t* include/experimental/bits/simd.h: Add missing operator~\n+\toverload for simd<floating-point> to __float_bitwise_operators.\n+\t* include/experimental/bits/simd_builtin.h\n+\t(_SimdImplBuiltin::_S_complement): Bitcast to int (and back) to\n+\timplement complement for floating-point vectors.\n+\t* include/experimental/bits/simd_fixed_size.h\n+\t(_SimdImplFixedSize::_S_copysign): New function, forwarding to\n+\tcopysign implementation of _SimdTuple members.\n+\t* include/experimental/bits/simd_math.h (copysign): Call\n+\t_SimdImpl::_S_copysign for fixed_size arguments. Simplify\n+\tgeneric copysign implementation using the new ~ operator.\n+\n+2021-06-24  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* testsuite/experimental/simd/README.md: Fix typos.\n+\n+2021-06-24  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* include/bits/shared_ptr_base.h (__shared_ptr_access::operator[]):\n+\tAdd noexcept.\n+\t* include/bits/unique_ptr.h (unique_ptr::operator*): Add\n+\tconditional noexcept as per LWG 2762.\n+\t* testsuite/20_util/shared_ptr/observers/array.cc: Check that\n+\tdereferencing cannot throw.\n+\t* testsuite/20_util/shared_ptr/observers/get.cc: Likewise.\n+\t* testsuite/20_util/optional/observers/lwg2762.cc: New test.\n+\t* testsuite/20_util/unique_ptr/lwg2762.cc: New test.\n+\n 2021-06-23  Patrick Palka  <ppalka@redhat.com>\n \n \tPR c++/101174"}]}