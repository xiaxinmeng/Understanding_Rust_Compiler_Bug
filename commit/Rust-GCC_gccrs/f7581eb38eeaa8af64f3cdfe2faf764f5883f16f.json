{"sha": "f7581eb38eeaa8af64f3cdfe2faf764f5883f16f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Zjc1ODFlYjM4ZWVhYThhZjY0ZjNjZGZlMmZhZjc2NGY1ODgzZjE2Zg==", "commit": {"author": {"name": "Kyrylo Tkachov", "email": "kyrylo.tkachov@arm.com", "date": "2021-03-17T18:21:05Z"}, "committer": {"name": "Kyrylo Tkachov", "email": "kyrylo.tkachov@arm.com", "date": "2021-03-17T18:21:05Z"}, "message": "aarch64: Fix status return logic in RNG intrinsics\n\nThere is a bug with the RNG intrinsics in their return code. The definition says:\n\n\"Stores a 64-bit random number into the object pointed to by the argument and returns zero.\nIf the implementation could not generate a random number within a reasonable period of time\nthe object pointed to by the input is set to zero and a non-zero value is returned.\"\n\nThis means we should be testing whether to return non-zero with:\nCSET W0, EQ\nrather than NE.\n\nThis patch fixes that.\n\ngcc/ChangeLog:\n\n\t* config/aarch64/aarch64-builtins.c (aarch64_expand_rng_builtin): Use EQ\n\tto compare against CC_REG rather than NE.\n\ngcc/testsuite/ChangeLog:\n\n\t* gcc.target/aarch64/acle/rng_2.c: New test.", "tree": {"sha": "d4eea38c38257195c866a5b645ee3f31481efdc8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d4eea38c38257195c866a5b645ee3f31481efdc8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f7581eb38eeaa8af64f3cdfe2faf764f5883f16f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f7581eb38eeaa8af64f3cdfe2faf764f5883f16f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f7581eb38eeaa8af64f3cdfe2faf764f5883f16f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f7581eb38eeaa8af64f3cdfe2faf764f5883f16f/comments", "author": {"login": "ktkachov-arm", "id": 74917949, "node_id": "MDQ6VXNlcjc0OTE3OTQ5", "avatar_url": "https://avatars.githubusercontent.com/u/74917949?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ktkachov-arm", "html_url": "https://github.com/ktkachov-arm", "followers_url": "https://api.github.com/users/ktkachov-arm/followers", "following_url": "https://api.github.com/users/ktkachov-arm/following{/other_user}", "gists_url": "https://api.github.com/users/ktkachov-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/ktkachov-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ktkachov-arm/subscriptions", "organizations_url": "https://api.github.com/users/ktkachov-arm/orgs", "repos_url": "https://api.github.com/users/ktkachov-arm/repos", "events_url": "https://api.github.com/users/ktkachov-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/ktkachov-arm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ktkachov-arm", "id": 74917949, "node_id": "MDQ6VXNlcjc0OTE3OTQ5", "avatar_url": "https://avatars.githubusercontent.com/u/74917949?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ktkachov-arm", "html_url": "https://github.com/ktkachov-arm", "followers_url": "https://api.github.com/users/ktkachov-arm/followers", "following_url": "https://api.github.com/users/ktkachov-arm/following{/other_user}", "gists_url": "https://api.github.com/users/ktkachov-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/ktkachov-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ktkachov-arm/subscriptions", "organizations_url": "https://api.github.com/users/ktkachov-arm/orgs", "repos_url": "https://api.github.com/users/ktkachov-arm/repos", "events_url": "https://api.github.com/users/ktkachov-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/ktkachov-arm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "adf14bdbc10d4114865a08cf20020a2616039057", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/adf14bdbc10d4114865a08cf20020a2616039057", "html_url": "https://github.com/Rust-GCC/gccrs/commit/adf14bdbc10d4114865a08cf20020a2616039057"}], "stats": {"total": 14, "additions": 13, "deletions": 1}, "files": [{"sha": "acdea2a0601c1208afe7b3c653489cf1e0634526", "filename": "gcc/config/aarch64/aarch64-builtins.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f7581eb38eeaa8af64f3cdfe2faf764f5883f16f/gcc%2Fconfig%2Faarch64%2Faarch64-builtins.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f7581eb38eeaa8af64f3cdfe2faf764f5883f16f/gcc%2Fconfig%2Faarch64%2Faarch64-builtins.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-builtins.c?ref=f7581eb38eeaa8af64f3cdfe2faf764f5883f16f", "patch": "@@ -1954,7 +1954,7 @@ aarch64_expand_rng_builtin (tree exp, rtx target, int fcode, int ignore)\n     return target;\n \n   rtx cc_reg = gen_rtx_REG (CC_Zmode, CC_REGNUM);\n-  rtx cmp_rtx = gen_rtx_fmt_ee (NE, SImode, cc_reg, const0_rtx);\n+  rtx cmp_rtx = gen_rtx_fmt_ee (EQ, SImode, cc_reg, const0_rtx);\n   emit_insn (gen_aarch64_cstoresi (target, cmp_rtx, cc_reg));\n   return target;\n }"}, {"sha": "206136cfc1f0f903b33d6886c49af3a6b6642848", "filename": "gcc/testsuite/gcc.target/aarch64/acle/rng_2.c", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f7581eb38eeaa8af64f3cdfe2faf764f5883f16f/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Facle%2Frng_2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f7581eb38eeaa8af64f3cdfe2faf764f5883f16f/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Facle%2Frng_2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Facle%2Frng_2.c?ref=f7581eb38eeaa8af64f3cdfe2faf764f5883f16f", "patch": "@@ -0,0 +1,12 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -march=armv8.5-a+rng\" } */\n+\n+#include <arm_acle.h>\n+\n+int test_rndr (uint64_t *addr)\n+{\n+  return  __rndr (addr);\n+}\n+\n+/* { dg-final { scan-assembler-times {cset\\t...?, eq} 1 } } */\n+"}]}