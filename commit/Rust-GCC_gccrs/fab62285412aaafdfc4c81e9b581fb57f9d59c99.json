{"sha": "fab62285412aaafdfc4c81e9b581fb57f9d59c99", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmFiNjIyODU0MTJhYWFmZGZjNGM4MWU5YjU4MWZiNTdmOWQ1OWM5OQ==", "commit": {"author": {"name": "Bryce McKinlay", "email": "mckinlay@redhat.com", "date": "2004-07-19T20:08:20Z"}, "committer": {"name": "Bryce McKinlay", "email": "bryce@gcc.gnu.org", "date": "2004-07-19T20:08:20Z"}, "message": "re PR java/16472 (jartool.c uses ftruncate, nonexistant on mingw32)\n\n2004-07-11  Bryce McKinlay  <mckinlay@redhat.com>\n\n\tPR java/16472\n\t* configure.ac: Check for ftruncate() and _chsize().\n\t* jartool.c (main): Use _chsize if ftruncate not available.\n\t* configure, config.h.in: Rebuilt.\n\nFrom-SVN: r84929", "tree": {"sha": "4cbbf8b8f23b0c6b798815d6cae56c0bf239a767", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4cbbf8b8f23b0c6b798815d6cae56c0bf239a767"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/fab62285412aaafdfc4c81e9b581fb57f9d59c99", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fab62285412aaafdfc4c81e9b581fb57f9d59c99", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fab62285412aaafdfc4c81e9b581fb57f9d59c99", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fab62285412aaafdfc4c81e9b581fb57f9d59c99/comments", "author": null, "committer": null, "parents": [{"sha": "43fa0f09d933559e09925b054dace39b83f12076", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/43fa0f09d933559e09925b054dace39b83f12076", "html_url": "https://github.com/Rust-GCC/gccrs/commit/43fa0f09d933559e09925b054dace39b83f12076"}], "stats": {"total": 127, "additions": 127, "deletions": 0}, "files": [{"sha": "2b54f3bde3cadaab3efb36b25b61d20b5429414c", "filename": "fastjar/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fab62285412aaafdfc4c81e9b581fb57f9d59c99/fastjar%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fab62285412aaafdfc4c81e9b581fb57f9d59c99/fastjar%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/fastjar%2FChangeLog?ref=fab62285412aaafdfc4c81e9b581fb57f9d59c99", "patch": "@@ -1,3 +1,10 @@\n+2004-07-11  Bryce McKinlay  <mckinlay@redhat.com>\n+\n+\tPR 16472\n+\t* configure.ac: Check for ftruncate() and _chsize().\n+\t* jartool.c (main): Use _chsize if ftruncate not available.\n+\t* configure, config.h.in: Rebuilt.\n+\n 2004-07-09  Richard Sandiford  <rsandifo@redhat.com>\n \n \t* jartool.c (find_entry, looks_like_dir): Remove inline spec."}, {"sha": "84efea0e5fc13291643b646045644f683720d183", "filename": "fastjar/config.h.in", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fab62285412aaafdfc4c81e9b581fb57f9d59c99/fastjar%2Fconfig.h.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fab62285412aaafdfc4c81e9b581fb57f9d59c99/fastjar%2Fconfig.h.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/fastjar%2Fconfig.h.in?ref=fab62285412aaafdfc4c81e9b581fb57f9d59c99", "patch": "@@ -10,6 +10,9 @@\n /* Define to 1 if you have the <fcntl.h> header file. */\n #undef HAVE_FCNTL_H\n \n+/* Define to 1 if you have the `ftruncate' function. */\n+#undef HAVE_FTRUNCATE\n+\n /* Define to 1 if you have the <inttypes.h> header file. */\n #undef HAVE_INTTYPES_H\n \n@@ -57,6 +60,9 @@\n /* Define to 1 if you have the <unistd.h> header file. */\n #undef HAVE_UNISTD_H\n \n+/* Define to 1 if you have the `_chsize' function. */\n+#undef HAVE__CHSIZE\n+\n /* Define if the host machine stores words of multi-word integers in\n    big-endian order. */\n #undef HOST_WORDS_BIG_ENDIAN"}, {"sha": "2b3bfb7cca33332533c776df12f735455ce175a3", "filename": "fastjar/configure", "status": "modified", "additions": 104, "deletions": 0, "changes": 104, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fab62285412aaafdfc4c81e9b581fb57f9d59c99/fastjar%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fab62285412aaafdfc4c81e9b581fb57f9d59c99/fastjar%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/fastjar%2Fconfigure?ref=fab62285412aaafdfc4c81e9b581fb57f9d59c99", "patch": "@@ -4150,6 +4150,110 @@ fi\n done\n \n \n+\n+\n+for ac_func in ftruncate _chsize\n+do\n+as_ac_var=`echo \"ac_cv_func_$ac_func\" | $as_tr_sh`\n+echo \"$as_me:$LINENO: checking for $ac_func\" >&5\n+echo $ECHO_N \"checking for $ac_func... $ECHO_C\" >&6\n+if eval \"test \\\"\\${$as_ac_var+set}\\\" = set\"; then\n+  echo $ECHO_N \"(cached) $ECHO_C\" >&6\n+else\n+  cat >conftest.$ac_ext <<_ACEOF\n+/* confdefs.h.  */\n+_ACEOF\n+cat confdefs.h >>conftest.$ac_ext\n+cat >>conftest.$ac_ext <<_ACEOF\n+/* end confdefs.h.  */\n+/* Define $ac_func to an innocuous variant, in case <limits.h> declares $ac_func.\n+   For example, HP-UX 11i <limits.h> declares gettimeofday.  */\n+#define $ac_func innocuous_$ac_func\n+\n+/* System header to define __stub macros and hopefully few prototypes,\n+    which can conflict with char $ac_func (); below.\n+    Prefer <limits.h> to <assert.h> if __STDC__ is defined, since\n+    <limits.h> exists even on freestanding compilers.  */\n+\n+#ifdef __STDC__\n+# include <limits.h>\n+#else\n+# include <assert.h>\n+#endif\n+\n+#undef $ac_func\n+\n+/* Override any gcc2 internal prototype to avoid an error.  */\n+#ifdef __cplusplus\n+extern \"C\"\n+{\n+#endif\n+/* We use char because int might match the return type of a gcc2\n+   builtin and then its argument prototype would still apply.  */\n+char $ac_func ();\n+/* The GNU C library defines this for functions which it implements\n+    to always fail with ENOSYS.  Some functions are actually named\n+    something starting with __ and the normal name is an alias.  */\n+#if defined (__stub_$ac_func) || defined (__stub___$ac_func)\n+choke me\n+#else\n+char (*f) () = $ac_func;\n+#endif\n+#ifdef __cplusplus\n+}\n+#endif\n+\n+int\n+main ()\n+{\n+return f != $ac_func;\n+  ;\n+  return 0;\n+}\n+_ACEOF\n+rm -f conftest.$ac_objext conftest$ac_exeext\n+if { (eval echo \"$as_me:$LINENO: \\\"$ac_link\\\"\") >&5\n+  (eval $ac_link) 2>conftest.er1\n+  ac_status=$?\n+  grep -v '^ *+' conftest.er1 >conftest.err\n+  rm -f conftest.er1\n+  cat conftest.err >&5\n+  echo \"$as_me:$LINENO: \\$? = $ac_status\" >&5\n+  (exit $ac_status); } &&\n+\t { ac_try='test -z \"$ac_c_werror_flag\"\n+\t\t\t || test ! -s conftest.err'\n+  { (eval echo \"$as_me:$LINENO: \\\"$ac_try\\\"\") >&5\n+  (eval $ac_try) 2>&5\n+  ac_status=$?\n+  echo \"$as_me:$LINENO: \\$? = $ac_status\" >&5\n+  (exit $ac_status); }; } &&\n+\t { ac_try='test -s conftest$ac_exeext'\n+  { (eval echo \"$as_me:$LINENO: \\\"$ac_try\\\"\") >&5\n+  (eval $ac_try) 2>&5\n+  ac_status=$?\n+  echo \"$as_me:$LINENO: \\$? = $ac_status\" >&5\n+  (exit $ac_status); }; }; then\n+  eval \"$as_ac_var=yes\"\n+else\n+  echo \"$as_me: failed program was:\" >&5\n+sed 's/^/| /' conftest.$ac_ext >&5\n+\n+eval \"$as_ac_var=no\"\n+fi\n+rm -f conftest.err conftest.$ac_objext \\\n+      conftest$ac_exeext conftest.$ac_ext\n+fi\n+echo \"$as_me:$LINENO: result: `eval echo '${'$as_ac_var'}'`\" >&5\n+echo \"${ECHO_T}`eval echo '${'$as_ac_var'}'`\" >&6\n+if test `eval echo '${'$as_ac_var'}'` = yes; then\n+  cat >>confdefs.h <<_ACEOF\n+#define `echo \"HAVE_$ac_func\" | $as_tr_cpp` 1\n+_ACEOF\n+\n+fi\n+done\n+\n+\n echo \"$as_me:$LINENO: checking for off_t\" >&5\n echo $ECHO_N \"checking for off_t... $ECHO_C\" >&6\n if test \"${ac_cv_type_off_t+set}\" = set; then"}, {"sha": "fa3ecf4ac0e3f69ed76f30fa18faa2de9834744f", "filename": "fastjar/configure.ac", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fab62285412aaafdfc4c81e9b581fb57f9d59c99/fastjar%2Fconfigure.ac", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fab62285412aaafdfc4c81e9b581fb57f9d59c99/fastjar%2Fconfigure.ac", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/fastjar%2Fconfigure.ac?ref=fab62285412aaafdfc4c81e9b581fb57f9d59c99", "patch": "@@ -27,6 +27,8 @@ AC_HEADER_STDC\n AC_STRUCT_TM\n AC_CHECK_HEADERS(fcntl.h unistd.h sys/param.h stdlib.h limits.h)\n \n+AC_CHECK_FUNCS(ftruncate _chsize)\n+\n dnl Checks for typedefs, structures, and compiler characteristics.\n AC_TYPE_OFF_T\n AC_STRUCT_TM"}, {"sha": "d57794dea928c79c6a07ece72284526170483b8b", "filename": "fastjar/jartool.c", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fab62285412aaafdfc4c81e9b581fb57f9d59c99/fastjar%2Fjartool.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fab62285412aaafdfc4c81e9b581fb57f9d59c99/fastjar%2Fjartool.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/fastjar%2Fjartool.c?ref=fab62285412aaafdfc4c81e9b581fb57f9d59c99", "patch": "@@ -573,9 +573,17 @@ int main(int argc, char **argv){\n     \n     create_central_header(jarfd);\n \n+#if ! (HAVE_FTRUNCATE || HAVE__CHSIZE)\n+  #error neither ftruncate() or _chsize() available\n+#endif\n     /* Check if the file shrunk when we updated it. */\n     if (action == ACTION_UPDATE)\n+#if HAVE_FTRUNCATE\n       ftruncate (jarfd, lseek (jarfd, 0, SEEK_CUR));\n+#endif\n+#if HAVE__CHSIZE\n+      _chsize (jarfd, lseek (jarfd, 0, SEEK_CUR));\n+#endif\n \n     if (jarfd != STDIN_FILENO && close(jarfd) != 0) {\n       fprintf(stderr, \"%s: error closing jar archive: %s\\n\","}]}