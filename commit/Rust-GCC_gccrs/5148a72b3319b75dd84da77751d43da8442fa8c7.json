{"sha": "5148a72b3319b75dd84da77751d43da8442fa8c7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTE0OGE3MmIzMzE5Yjc1ZGQ4NGRhNzc3NTFkNDNkYTg0NDJmYThjNw==", "commit": {"author": {"name": "Kaveh R. Ghazi", "email": "ghazi@caip.rutgers.edu", "date": "1998-11-08T15:10:24Z"}, "committer": {"name": "Kaveh Ghazi", "email": "ghazi@gcc.gnu.org", "date": "1998-11-08T15:10:24Z"}, "message": "gansidecl.h: Prepend a \"G\" to the macro wrapping this file (to distinguish it from the macro...\n\n        * gansidecl.h: Prepend a \"G\" to the macro wrapping this file\n        (to distinguish it from the macro wrapping ansidecl.h.)\n        Include libiberty's ansidecl.h.  Remove all redundant definitions.\n        Define the PROTO() style macros in terms of the PARAMS() ones.\n        * calls.c (emit_library_call): Switch on ANSI_PROTOTYPES, not\n        __STDC__, when deciding whether to use ANSI variable args.\n        (emit_library_call_value): Likewise.\n        * cccp.c (error): Likewise.\n        (warning): Likewise.\n        (error_with_line): Likewise.\n        (warning_with_line): Likewise.\n        (pedwarn): Likewise.\n        (pedwarn_with_line): Likewise.\n        (pedwarn_with_file_and_line): Likewise.\n        (fatal): Likewise.\n        * cexp.y (error): Likewise.\n        (pedwarn): Likewise.\n        (warning): Likewise.\n        * collect2.c (fatal_perror): Likewise.\n        (fatal): Likewise.\n        (error): Likewise.\n        * combine.c (gen_rtx_combine): Likewise.\n        * cpperror.c (cpp_message): Likewise.\n        (cpp_fatal): Likewise.\n        * cpplib.c (cpp_error): Likewise.\n        (cpp_warning): Likewise.\n        (cpp_pedwarn): Likewise.\n        (cpp_error_with_line): Likewise.\n        (cpp_warning_with_line): Likewise.\n        (cpp_pedwarn_with_line): Likewise.\n        (cpp_pedwarn_with_file_and_line): Likewise.\n        * cpplib.h: Don't define PARAMS() macro.\n        * demangle.h: Likewise.\n        * doprint.c (checkit): Switch on ANSI_PROTOTYPES, not __STDC__,\n        when deciding whether to use ANSI variable args.\n        * emit-rtl.c (gen_rtx): Likewise.\n        (gen_rtvec): Likewise.\n        * final.c (asm_fprintf): Likewise.\n        * fix-header.c (cpp_message): Likewise.\n        (fatal): Likewise.\n        (cpp_fatal): Likewise.\n        * gcc.c (concat): Likewise.\n        (fatal): Likewise.\n        (error): Likewise.\n        * genattr.c (fatal): Likewise.\n        * genattrtab.c (attr_rtx): Likewise.\n        (attr_printf): Likewise.\n        (fatal): Likewise.\n        * gencodes.c (fatal): Likewise.\n        * genconfig.c (fatal): Likewise.\n        * genemit.c (fatal): Likewise.\n        * genextract.c (fatal): Likewise.\n        * genflags.c (fatal): Likewise.\n        * genopinit.c (fatal): Likewise.\n        * genoutput.c (fatal): Likewise.\n        (error): Likewise.\n        * genpeep.c (fatal): Likewise.\n        * genrecog.c (fatal): Likewise.\n        * halfpic.h: Switch on ANSI_PROTOTYPES, not __STDC__, when\n        deciding whether to declare `tree_node' and `rtx_def'.\n        * hash.h: Don't define stuff we get from gansidecl.h.\n        * mips-tfile.c: Likewise.  Define __proto() in terms of PARAMS().\n        (fatal): Switch on ANSI_PROTOTYPES, not __STDC__, when deciding\n        whether to use ANSI variable args.\n        (error): Likewise.\n        * prefix.c (concat): Likewise.\n        * scan.h: Likewise.\n        * system.h: Likewise.\n        * toplev.c (error_with_file_and_line): Likewise.\n        (error_with_decl): Likewise.\n        (error_for_asm): Likewise.\n        (error): Likewise.\n        (fatal): Likewise.\n        (warning_with_file_and_line): Likewise.\n        (warning_with_decl): Likewise.\n        (warning_for_asm): Likewise.\n        (warning): Likewise.\n        (pedwarn): Likewise.\n        (pedwarn_with_decl): Likewise.\n        (pedwarn_with_file_and_line): Likewise.\n        (sorry): Likewise.\n        (really_sorry): Likewise.\n        * toplev.h: Switch on ANSI_PROTOTYPES, not __STDC__, when deciding\n        whether to declare `tree_node' and `rtx_def'.\n        * tree.c (build): Switch on ANSI_PROTOTYPES, not __STDC__, when\n        deciding whether to use ANSI variable args.\n        (build_nt): Likewise.\n        (build_parse_node): Likewise.\n\nFrom-SVN: r23577", "tree": {"sha": "bb484d02aaa49afd3477050555c29914fce3ef3d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/bb484d02aaa49afd3477050555c29914fce3ef3d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5148a72b3319b75dd84da77751d43da8442fa8c7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5148a72b3319b75dd84da77751d43da8442fa8c7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5148a72b3319b75dd84da77751d43da8442fa8c7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5148a72b3319b75dd84da77751d43da8442fa8c7/comments", "author": null, "committer": null, "parents": [{"sha": "78651e7ad09ee224964287b88f2f326674654723", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/78651e7ad09ee224964287b88f2f326674654723", "html_url": "https://github.com/Rust-GCC/gccrs/commit/78651e7ad09ee224964287b88f2f326674654723"}], "stats": {"total": 536, "additions": 296, "deletions": 240}, "files": [{"sha": "96e000ac896ffbcb07b5d83e6f00cf2dd0e9eef3", "filename": "gcc/ChangeLog", "status": "modified", "additions": 126, "deletions": 0, "changes": 126, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5148a72b3319b75dd84da77751d43da8442fa8c7/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5148a72b3319b75dd84da77751d43da8442fa8c7/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=5148a72b3319b75dd84da77751d43da8442fa8c7", "patch": "@@ -1,3 +1,129 @@\n+Sun Nov  8 17:50:30 1998  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n+\n+\t* gansidecl.h: Prepend a \"G\" to the macro wrapping this file\n+\t(to distinguish it from the macro wrapping ansidecl.h.)\n+\tInclude libiberty's ansidecl.h.  Remove all redundant definitions.\n+  \tDefine the PROTO() style macros in terms of the PARAMS() ones.\n+\n+\t\n+\t* calls.c (emit_library_call): Switch on ANSI_PROTOTYPES, not\n+\t__STDC__, when deciding whether to use ANSI variable args.\n+\t(emit_library_call_value): Likewise.\n+\n+\t* cccp.c (error): Likewise.\n+\t(warning): Likewise.\n+\t(error_with_line): Likewise.\n+\t(warning_with_line): Likewise.\n+\t(pedwarn): Likewise.\n+\t(pedwarn_with_line): Likewise.\n+\t(pedwarn_with_file_and_line): Likewise.\n+\t(fatal): Likewise.\n+\n+\t* cexp.y (error): Likewise.\n+\t(pedwarn): Likewise.\n+\t(warning): Likewise.\n+\n+\t* collect2.c (fatal_perror): Likewise.\n+\t(fatal): Likewise.\n+\t(error): Likewise.\n+\n+\t* combine.c (gen_rtx_combine): Likewise.\n+\n+\t* cpperror.c (cpp_message): Likewise.\n+\t(cpp_fatal): Likewise.\n+\n+\t* cpplib.c (cpp_error): Likewise.\n+\t(cpp_warning): Likewise.\n+\t(cpp_pedwarn): Likewise.\n+\t(cpp_error_with_line): Likewise.\n+\t(cpp_warning_with_line): Likewise.\n+\t(cpp_pedwarn_with_line): Likewise.\n+\t(cpp_pedwarn_with_file_and_line): Likewise.\n+\n+\t* cpplib.h: Don't define PARAMS() macro.\n+\n+\t* demangle.h: Likewise.\n+\n+\t* doprint.c (checkit): Switch on ANSI_PROTOTYPES, not __STDC__,\n+ \twhen deciding whether to use ANSI variable args.\n+\n+\t* emit-rtl.c (gen_rtx): Likewise.\n+\t(gen_rtvec): Likewise.\n+\n+\t* final.c (asm_fprintf): Likewise.\n+\n+\t* fix-header.c (cpp_message): Likewise.\n+\t(fatal): Likewise.\n+\t(cpp_fatal): Likewise.\n+\n+\t* gcc.c (concat): Likewise.\n+\t(fatal): Likewise.\n+\t(error): Likewise.\n+\n+\t* genattr.c (fatal): Likewise.\n+\n+\t* genattrtab.c (attr_rtx): Likewise.\n+\t(attr_printf): Likewise.\n+\t(fatal): Likewise.\n+\n+\t* gencodes.c (fatal): Likewise.\n+\n+\t* genconfig.c (fatal): Likewise.\n+\n+\t* genemit.c (fatal): Likewise.\n+\n+\t* genextract.c (fatal): Likewise.\n+\n+\t* genflags.c (fatal): Likewise.\n+\n+\t* genopinit.c (fatal): Likewise.\n+\n+\t* genoutput.c (fatal): Likewise.\n+\t(error): Likewise.\n+\n+\t* genpeep.c (fatal): Likewise.\n+\n+\t* genrecog.c (fatal): Likewise.\n+\n+\t* halfpic.h: Switch on ANSI_PROTOTYPES, not __STDC__, when\n+\tdeciding whether to declare `tree_node' and `rtx_def'.\n+\n+\t* hash.h: Don't define stuff we get from gansidecl.h.\n+\n+\t* mips-tfile.c: Likewise.  Define __proto() in terms of PARAMS().\n+\t(fatal): Switch on ANSI_PROTOTYPES, not __STDC__, when deciding\n+\twhether to use ANSI variable args.\n+\t(error): Likewise.\n+\n+\t* prefix.c (concat): Likewise.\n+\n+\t* scan.h: Likewise.\n+\n+\t* system.h: Likewise.\n+\n+\t* toplev.c (error_with_file_and_line): Likewise.\n+\t(error_with_decl): Likewise.\n+\t(error_for_asm): Likewise.\n+\t(error): Likewise.\n+\t(fatal): Likewise.\n+\t(warning_with_file_and_line): Likewise.\n+\t(warning_with_decl): Likewise.\n+\t(warning_for_asm): Likewise.\n+\t(warning): Likewise.\n+\t(pedwarn): Likewise.\n+\t(pedwarn_with_decl): Likewise.\n+\t(pedwarn_with_file_and_line): Likewise.\n+\t(sorry): Likewise.\n+\t(really_sorry): Likewise.\n+\n+\t* toplev.h: Switch on ANSI_PROTOTYPES, not __STDC__, when deciding\n+\twhether to declare `tree_node' and `rtx_def'.\n+\n+\t* tree.c (build): Switch on ANSI_PROTOTYPES, not __STDC__, when\n+\tdeciding whether to use ANSI variable args.\n+\t(build_nt): Likewise.\n+\t(build_parse_node): Likewise.\n+\n Sun Nov 8 13:10:55 PST 1998 Jeff Law  (law@cygnus.com)\n \n \t* version.c: Bump for snapshot."}, {"sha": "fb64c7588b3271262b82d590fc456d6eb3821b3c", "filename": "gcc/calls.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5148a72b3319b75dd84da77751d43da8442fa8c7/gcc%2Fcalls.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5148a72b3319b75dd84da77751d43da8442fa8c7/gcc%2Fcalls.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcalls.c?ref=5148a72b3319b75dd84da77751d43da8442fa8c7", "patch": "@@ -2232,7 +2232,7 @@ void\n emit_library_call VPROTO((rtx orgfun, int no_queue, enum machine_mode outmode,\n \t\t\t  int nargs, ...))\n {\n-#ifndef __STDC__\n+#ifndef ANSI_PROTOTYPES\n   rtx orgfun;\n   int no_queue;\n   enum machine_mode outmode;\n@@ -2279,7 +2279,7 @@ emit_library_call VPROTO((rtx orgfun, int no_queue, enum machine_mode outmode,\n \n   VA_START (p, nargs);\n \n-#ifndef __STDC__\n+#ifndef ANSI_PROTOTYPES\n   orgfun = va_arg (p, rtx);\n   no_queue = va_arg (p, int);\n   outmode = va_arg (p, enum machine_mode);\n@@ -2723,7 +2723,7 @@ rtx\n emit_library_call_value VPROTO((rtx orgfun, rtx value, int no_queue,\n \t\t\t\tenum machine_mode outmode, int nargs, ...))\n {\n-#ifndef __STDC__\n+#ifndef ANSI_PROTOTYPES\n   rtx orgfun;\n   rtx value;\n   int no_queue;\n@@ -2778,7 +2778,7 @@ emit_library_call_value VPROTO((rtx orgfun, rtx value, int no_queue,\n \n   VA_START (p, nargs);\n \n-#ifndef __STDC__\n+#ifndef ANSI_PROTOTYPES\n   orgfun = va_arg (p, rtx);\n   value = va_arg (p, rtx);\n   no_queue = va_arg (p, int);"}, {"sha": "e3568daa567c9f741cdb2f5cd8c483f1c18c3d23", "filename": "gcc/cccp.c", "status": "modified", "additions": 16, "deletions": 16, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5148a72b3319b75dd84da77751d43da8442fa8c7/gcc%2Fcccp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5148a72b3319b75dd84da77751d43da8442fa8c7/gcc%2Fcccp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcccp.c?ref=5148a72b3319b75dd84da77751d43da8442fa8c7", "patch": "@@ -9312,14 +9312,14 @@ my_strerror (errnum)\n void\n error VPROTO ((char * msg, ...))\n {\n-#ifndef __STDC__\n+#ifndef ANSI_PROTOTYPES\n   char * msg;\n #endif\n   va_list args;\n \n   VA_START (args, msg);\n \n-#ifndef __STDC__\n+#ifndef ANSI_PROTOTYPES\n   msg = va_arg (args, char *);\n #endif\n \n@@ -9385,14 +9385,14 @@ error_from_errno (name)\n void\n warning VPROTO ((char * msg, ...))\n {\n-#ifndef __STDC__\n+#ifndef ANSI_PROTOTYPES\n   char * msg;\n #endif\n   va_list args;\n \n   VA_START (args, msg);\n \n-#ifndef __STDC__\n+#ifndef ANSI_PROTOTYPES\n   msg = va_arg (args, char *);\n #endif\n \n@@ -9434,15 +9434,15 @@ vwarning (msg, args)\n static void\n error_with_line VPROTO ((int line, char * msg, ...))\n {\n-#ifndef __STDC__\n+#ifndef ANSI_PROTOTYPES\n   int line;\n   char * msg;\n #endif\n   va_list args;\n \n   VA_START (args, msg);\n \n-#ifndef __STDC__\n+#ifndef ANSI_PROTOTYPES\n   line = va_arg (args, int);\n   msg = va_arg (args, char *);\n #endif\n@@ -9480,15 +9480,15 @@ verror_with_line (line, msg, args)\n static void\n warning_with_line VPROTO ((int line, char * msg, ...))\n {\n-#ifndef __STDC__\n+#ifndef ANSI_PROTOTYPES\n   int line;\n   char * msg;\n #endif\n   va_list args;\n \n   VA_START (args, msg);\n \n-#ifndef __STDC__\n+#ifndef ANSI_PROTOTYPES\n   line = va_arg (args, int);\n   msg = va_arg (args, char *);\n #endif\n@@ -9534,14 +9534,14 @@ vwarning_with_line (line, msg, args)\n void\n pedwarn VPROTO ((char * msg, ...))\n {\n-#ifndef __STDC__\n+#ifndef ANSI_PROTOTYPES\n   char * msg;\n #endif\n   va_list args;\n \n   VA_START (args, msg);\n  \n-#ifndef __STDC__\n+#ifndef ANSI_PROTOTYPES\n   msg = va_arg (args, char *);\n #endif\n  \n@@ -9555,15 +9555,15 @@ pedwarn VPROTO ((char * msg, ...))\n void\n pedwarn_with_line VPROTO ((int line, char * msg, ...))\n {\n-#ifndef __STDC__\n+#ifndef ANSI_PROTOTYPES\n   int line;\n   char * msg;\n #endif\n   va_list args;\n \n   VA_START (args, msg);\n  \n-#ifndef __STDC__\n+#ifndef ANSI_PROTOTYPES\n   line = va_arg (args, int);\n   msg = va_arg (args, char *);\n #endif\n@@ -9582,7 +9582,7 @@ static void\n pedwarn_with_file_and_line VPROTO ((char *file, size_t file_len, int line,\n \t\t\t\t    char * msg, ...))\n {\n-#ifndef __STDC__\n+#ifndef ANSI_PROTOTYPES\n   char *file;\n   size_t file_len;\n   int line;\n@@ -9595,7 +9595,7 @@ pedwarn_with_file_and_line VPROTO ((char *file, size_t file_len, int line,\n \n   VA_START (args, msg);\n  \n-#ifndef __STDC__\n+#ifndef ANSI_PROTOTYPES\n   file = va_arg (args, char *);\n   file_len = va_arg (args, size_t);\n   line = va_arg (args, int);\n@@ -10623,15 +10623,15 @@ deps_output (string, spacer)\n static void\n fatal VPROTO ((char * msg, ...))\n {\n-#ifndef __STDC__\n+#ifndef ANSI_PROTOTYPES\n   char * msg;\n #endif\n   va_list args;\n \n   fprintf (stderr, \"%s: \", progname);\n   VA_START (args, msg);\n  \n-#ifndef __STDC__\n+#ifndef ANSI_PROTOTYPES\n   msg = va_arg (args, char *);\n #endif\n  "}, {"sha": "d2d67f4c1cd127402be2e2e51054ea5829befa12", "filename": "gcc/cexp.c", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5148a72b3319b75dd84da77751d43da8442fa8c7/gcc%2Fcexp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5148a72b3319b75dd84da77751d43da8442fa8c7/gcc%2Fcexp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcexp.c?ref=5148a72b3319b75dd84da77751d43da8442fa8c7", "patch": "@@ -2080,14 +2080,14 @@ initialize_random_junk ()\n void\n error VPROTO ((char * msg, ...))\n {\n-#ifndef __STDC__\n+#ifndef ANSI_PROTOTYPES\n   char * msg;\n #endif\n   va_list args;\n \n   VA_START (args, msg);\n  \n-#ifndef __STDC__\n+#ifndef ANSI_PROTOTYPES\n   msg = va_arg (args, char *);\n #endif\n  \n@@ -2100,14 +2100,14 @@ error VPROTO ((char * msg, ...))\n void\n pedwarn VPROTO ((char * msg, ...))\n {\n-#ifndef __STDC__\n+#ifndef ANSI_PROTOTYPES\n   char * msg;\n #endif\n   va_list args;\n \n   VA_START (args, msg);\n  \n-#ifndef __STDC__\n+#ifndef ANSI_PROTOTYPES\n   msg = va_arg (args, char *);\n #endif\n  \n@@ -2120,14 +2120,14 @@ pedwarn VPROTO ((char * msg, ...))\n void\n warning VPROTO ((char * msg, ...))\n {\n-#ifndef __STDC__\n+#ifndef ANSI_PROTOTYPES\n   char * msg;\n #endif\n   va_list args;\n \n   VA_START (args, msg);\n  \n-#ifndef __STDC__\n+#ifndef ANSI_PROTOTYPES\n   msg = va_arg (args, char *);\n #endif\n  "}, {"sha": "b3b5e9d99a33acb6a23b95b9f437020396ff36f2", "filename": "gcc/cexp.y", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5148a72b3319b75dd84da77751d43da8442fa8c7/gcc%2Fcexp.y", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5148a72b3319b75dd84da77751d43da8442fa8c7/gcc%2Fcexp.y", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcexp.y?ref=5148a72b3319b75dd84da77751d43da8442fa8c7", "patch": "@@ -1164,14 +1164,14 @@ initialize_random_junk ()\n void\n error VPROTO ((char * msg, ...))\n {\n-#ifndef __STDC__\n+#ifndef ANSI_PROTOTYPES\n   char * msg;\n #endif\n   va_list args;\n \n   VA_START (args, msg);\n  \n-#ifndef __STDC__\n+#ifndef ANSI_PROTOTYPES\n   msg = va_arg (args, char *);\n #endif\n  \n@@ -1184,14 +1184,14 @@ error VPROTO ((char * msg, ...))\n void\n pedwarn VPROTO ((char * msg, ...))\n {\n-#ifndef __STDC__\n+#ifndef ANSI_PROTOTYPES\n   char * msg;\n #endif\n   va_list args;\n \n   VA_START (args, msg);\n  \n-#ifndef __STDC__\n+#ifndef ANSI_PROTOTYPES\n   msg = va_arg (args, char *);\n #endif\n  \n@@ -1204,14 +1204,14 @@ pedwarn VPROTO ((char * msg, ...))\n void\n warning VPROTO ((char * msg, ...))\n {\n-#ifndef __STDC__\n+#ifndef ANSI_PROTOTYPES\n   char * msg;\n #endif\n   va_list args;\n \n   VA_START (args, msg);\n  \n-#ifndef __STDC__\n+#ifndef ANSI_PROTOTYPES\n   msg = va_arg (args, char *);\n #endif\n  "}, {"sha": "729682e5f3baab4641a7bd3a41ef7b5a79717205", "filename": "gcc/collect2.c", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5148a72b3319b75dd84da77751d43da8442fa8c7/gcc%2Fcollect2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5148a72b3319b75dd84da77751d43da8442fa8c7/gcc%2Fcollect2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcollect2.c?ref=5148a72b3319b75dd84da77751d43da8442fa8c7", "patch": "@@ -425,15 +425,15 @@ collect_exit (status)\n void\n fatal_perror VPROTO((const char * string, ...))\n {\n-#ifndef __STDC__\n+#ifndef ANSI_PROTOTYPES\n   const char *string;\n #endif\n   int e = errno;\n   va_list ap;\n \n   VA_START (ap, string);\n \n-#ifndef __STDC__\n+#ifndef ANSI_PROTOTYPES\n   string = va_arg (ap, const char *);\n #endif\n \n@@ -450,14 +450,14 @@ fatal_perror VPROTO((const char * string, ...))\n void\n fatal VPROTO((const char * string, ...))\n {\n-#ifndef __STDC__\n+#ifndef ANSI_PROTOTYPES\n   const char *string;\n #endif\n   va_list ap;\n   \n   VA_START (ap, string);\n \n-#ifndef __STDC__\n+#ifndef ANSI_PROTOTYPES\n   string = va_arg (ap, const char *);\n #endif\n   \n@@ -474,14 +474,14 @@ fatal VPROTO((const char * string, ...))\n void\n error VPROTO((const char * string, ...))\n {\n-#ifndef __STDC__\n+#ifndef ANSI_PROTOTYPES\n   const char * string;\n #endif\n   va_list ap;\n  \n   VA_START (ap, string);\n   \n-#ifndef __STDC__\n+#ifndef ANSI_PROTOTYPES\n   string = va_arg (ap, const char *);\n #endif\n "}, {"sha": "bd0a2254413298d2a6e7c184d1120d27def9f225", "filename": "gcc/combine.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5148a72b3319b75dd84da77751d43da8442fa8c7/gcc%2Fcombine.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5148a72b3319b75dd84da77751d43da8442fa8c7/gcc%2Fcombine.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcombine.c?ref=5148a72b3319b75dd84da77751d43da8442fa8c7", "patch": "@@ -9288,7 +9288,7 @@ gen_lowpart_for_combine (mode, x)\n static rtx\n gen_rtx_combine VPROTO((enum rtx_code code, enum machine_mode mode, ...))\n {\n-#ifndef __STDC__\n+#ifndef ANSI_PROTOTYPES\n   enum rtx_code code;\n   enum machine_mode mode;\n #endif\n@@ -9302,7 +9302,7 @@ gen_rtx_combine VPROTO((enum rtx_code code, enum machine_mode mode, ...))\n \n   VA_START (p, mode);\n \n-#ifndef __STDC__\n+#ifndef ANSI_PROTOTYPES\n   code = va_arg (p, enum rtx_code);\n   mode = va_arg (p, enum machine_mode);\n #endif"}, {"sha": "107dc543e40fbbc8bf8cdb70b2b16f95a5aa5423", "filename": "gcc/cpperror.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5148a72b3319b75dd84da77751d43da8442fa8c7/gcc%2Fcpperror.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5148a72b3319b75dd84da77751d43da8442fa8c7/gcc%2Fcpperror.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcpperror.c?ref=5148a72b3319b75dd84da77751d43da8442fa8c7", "patch": "@@ -111,7 +111,7 @@ v_cpp_message (pfile, is_error, msg, ap)\n void\n cpp_message VPROTO ((cpp_reader *pfile, int is_error, const char *msg, ...))\n {\n-#ifndef __STDC__\n+#ifndef ANSI_PROTOTYPES\n   cpp_reader *pfile;\n   int is_error;\n   const char *msg;\n@@ -120,7 +120,7 @@ cpp_message VPROTO ((cpp_reader *pfile, int is_error, const char *msg, ...))\n   \n   VA_START (ap, msg);\n   \n-#ifndef __STDC__\n+#ifndef ANSI_PROTOTYPES\n   pfile = va_arg (ap, cpp_reader *);\n   is_error = va_arg (ap, int);\n   msg = va_arg (ap, const char *);\n@@ -139,15 +139,15 @@ cpp_message VPROTO ((cpp_reader *pfile, int is_error, const char *msg, ...))\n void\n cpp_fatal VPROTO ((cpp_reader *pfile, const char *str, ...))\n {  \n-#ifndef __STDC__\n+#ifndef ANSI_PROTOTYPES\n   cpp_reader *pfile;\n   const char *str;\n #endif\n   va_list ap;\n   \n   VA_START (ap, str);\n   \n-#ifndef __STDC__\n+#ifndef ANSI_PROTOTYPES\n   pfile = va_arg (ap, cpp_reader *);\n   str = va_arg (ap, const char *);\n #endif"}, {"sha": "f8a38e55bb13f5e0576daa50d06acab2a12ba293", "filename": "gcc/cpplib.c", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5148a72b3319b75dd84da77751d43da8442fa8c7/gcc%2Fcpplib.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5148a72b3319b75dd84da77751d43da8442fa8c7/gcc%2Fcpplib.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcpplib.c?ref=5148a72b3319b75dd84da77751d43da8442fa8c7", "patch": "@@ -6725,15 +6725,15 @@ v_cpp_error (pfile, msg, ap)\n void\n cpp_error VPROTO ((cpp_reader * pfile, const char *msg, ...))\n {\n-#ifndef __STDC__\n+#ifndef ANSI_PROTOTYPES\n   cpp_reader *pfile;\n   const char *msg;\n #endif\n   va_list ap;\n \n   VA_START(ap, msg);\n   \n-#ifndef __STDC__\n+#ifndef ANSI_PROTOTYPES\n   pfile = va_arg (ap, cpp_reader *);\n   msg = va_arg (ap, const char *);\n #endif\n@@ -6764,15 +6764,15 @@ v_cpp_warning (pfile, msg, ap)\n void\n cpp_warning VPROTO ((cpp_reader * pfile, const char *msg, ...))\n {\n-#ifndef __STDC__\n+#ifndef ANSI_PROTOTYPES\n   cpp_reader *pfile;\n   const char *msg;\n #endif\n   va_list ap;\n   \n   VA_START (ap, msg);\n   \n-#ifndef __STDC__\n+#ifndef ANSI_PROTOTYPES\n   pfile = va_arg (ap, cpp_reader *);\n   msg = va_arg (ap, const char *);\n #endif\n@@ -6786,15 +6786,15 @@ cpp_warning VPROTO ((cpp_reader * pfile, const char *msg, ...))\n void\n cpp_pedwarn VPROTO ((cpp_reader * pfile, const char *msg, ...))\n {\n-#ifndef __STDC__\n+#ifndef ANSI_PROTOTYPES\n   cpp_reader *pfile;\n   const char *msg;\n #endif\n   va_list ap;\n   \n   VA_START (ap, msg);\n   \n-#ifndef __STDC__\n+#ifndef ANSI_PROTOTYPES\n   pfile = va_arg (ap, cpp_reader *);\n   msg = va_arg (ap, const char *);\n #endif\n@@ -6827,7 +6827,7 @@ v_cpp_error_with_line (pfile, line, column, msg, ap)\n void\n cpp_error_with_line VPROTO ((cpp_reader * pfile, int line, int column, const char *msg, ...))\n {\n-#ifndef __STDC__\n+#ifndef ANSI_PROTOTYPES\n   cpp_reader *pfile;\n   int line;\n   int column;\n@@ -6837,7 +6837,7 @@ cpp_error_with_line VPROTO ((cpp_reader * pfile, int line, int column, const cha\n   \n   VA_START (ap, msg);\n   \n-#ifndef __STDC__\n+#ifndef ANSI_PROTOTYPES\n   pfile = va_arg (ap, cpp_reader *);\n   line = va_arg (ap, int);\n   column = va_arg (ap, int);\n@@ -6878,7 +6878,7 @@ v_cpp_warning_with_line (pfile, line, column, msg, ap)\n static void\n cpp_warning_with_line VPROTO ((cpp_reader * pfile, int line, int column, const char *msg, ...))\n {\n-#ifndef __STDC__\n+#ifndef ANSI_PROTOTYPES\n   cpp_reader *pfile;\n   int line;\n   int column;\n@@ -6888,7 +6888,7 @@ cpp_warning_with_line VPROTO ((cpp_reader * pfile, int line, int column, const c\n   \n   VA_START (ap, msg);\n   \n-#ifndef __STDC__\n+#ifndef ANSI_PROTOTYPES\n   pfile = va_arg (ap, cpp_reader *);\n   line = va_arg (ap, int);\n   column = va_arg (ap, int);\n@@ -6903,7 +6903,7 @@ cpp_warning_with_line VPROTO ((cpp_reader * pfile, int line, int column, const c\n void\n cpp_pedwarn_with_line VPROTO ((cpp_reader * pfile, int line, int column, const char *msg, ...))\n {\n-#ifndef __STDC__\n+#ifndef ANSI_PROTOTYPES\n   cpp_reader *pfile;\n   int line;\n   int column;\n@@ -6913,7 +6913,7 @@ cpp_pedwarn_with_line VPROTO ((cpp_reader * pfile, int line, int column, const c\n   \n   VA_START (ap, msg);\n   \n-#ifndef __STDC__\n+#ifndef ANSI_PROTOTYPES\n   pfile = va_arg (ap, cpp_reader *);\n   line = va_arg (ap, int);\n   column = va_arg (ap, int);\n@@ -6933,7 +6933,7 @@ cpp_pedwarn_with_line VPROTO ((cpp_reader * pfile, int line, int column, const c\n void\n cpp_pedwarn_with_file_and_line VPROTO ((cpp_reader *pfile, char *file, int line, const char *msg, ...))\n {\n-#ifndef __STDC__\n+#ifndef ANSI_PROTOTYPES\n   cpp_reader *pfile;\n   char *file;\n   int line;\n@@ -6943,7 +6943,7 @@ cpp_pedwarn_with_file_and_line VPROTO ((cpp_reader *pfile, char *file, int line,\n   \n   VA_START (ap, msg);\n \n-#ifndef __STDC__\n+#ifndef ANSI_PROTOTYPES\n   pfile = va_arg (ap, cpp_reader *);\n   file = va_arg (ap, char *);\n   line = va_arg (ap, int);"}, {"sha": "99745c98f224bef8e8a24b54ec3e2e63dc92b465", "filename": "gcc/cpplib.h", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5148a72b3319b75dd84da77751d43da8442fa8c7/gcc%2Fcpplib.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5148a72b3319b75dd84da77751d43da8442fa8c7/gcc%2Fcpplib.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcpplib.h?ref=5148a72b3319b75dd84da77751d43da8442fa8c7", "patch": "@@ -70,10 +70,6 @@ enum cpp_token {\n   CPP_POP\n };\n \n-#ifndef PARAMS\n-#define PARAMS(P) PROTO(P)\n-#endif /* !PARAMS */\n-\n typedef enum cpp_token (*parse_underflow_t) PARAMS((cpp_reader *));\n typedef int (*parse_cleanup_t) PARAMS((cpp_buffer *, cpp_reader *));\n "}, {"sha": "eddb55510b368bac464edd1a7b75b1f93ede45fd", "filename": "gcc/demangle.h", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5148a72b3319b75dd84da77751d43da8442fa8c7/gcc%2Fdemangle.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5148a72b3319b75dd84da77751d43da8442fa8c7/gcc%2Fdemangle.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdemangle.h?ref=5148a72b3319b75dd84da77751d43da8442fa8c7", "patch": "@@ -20,11 +20,9 @@\n #if !defined (DEMANGLE_H)\n #define DEMANGLE_H\n \n-#ifdef IN_GCC\n-#define PARAMS(ARGS) PROTO(ARGS)\n-#else /* ! IN_GCC */\n+#ifndef IN_GCC\n #include <ansidecl.h>\n-#endif /* IN_GCC */\n+#endif /* ! IN_GCC */\n \n /* Options passed to cplus_demangle (in 2nd parameter). */\n "}, {"sha": "d53ccfa16a392fbf23375c2bdcde0a8da542ce53", "filename": "gcc/doprint.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5148a72b3319b75dd84da77751d43da8442fa8c7/gcc%2Fdoprint.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5148a72b3319b75dd84da77751d43da8442fa8c7/gcc%2Fdoprint.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoprint.c?ref=5148a72b3319b75dd84da77751d43da8442fa8c7", "patch": "@@ -199,13 +199,13 @@ checkit VPROTO ((const char* format, ...))\n   va_list args;\n   int result;\n \n-#ifndef __STDC__\n+#ifndef ANSI_PROTOTYPES\n   char *format;\n #endif\n \n   VA_START (args, format);\n \n-#ifndef __STDC__\n+#ifndef ANSI_PROTOTYPES\n   format = va_arg (args, char *);\n #endif\n "}, {"sha": "a8bbfe42318fb97fb1cf14a6f215645ef2c71d24", "filename": "gcc/emit-rtl.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5148a72b3319b75dd84da77751d43da8442fa8c7/gcc%2Femit-rtl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5148a72b3319b75dd84da77751d43da8442fa8c7/gcc%2Femit-rtl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Femit-rtl.c?ref=5148a72b3319b75dd84da77751d43da8442fa8c7", "patch": "@@ -350,7 +350,7 @@ gen_rtx_MEM (mode, addr)\n rtx\n gen_rtx VPROTO((enum rtx_code code, enum machine_mode mode, ...))\n {\n-#ifndef __STDC__\n+#ifndef ANSI_PROTOTYPES\n   enum rtx_code code;\n   enum machine_mode mode;\n #endif\n@@ -361,7 +361,7 @@ gen_rtx VPROTO((enum rtx_code code, enum machine_mode mode, ...))\n \n   VA_START (p, mode);\n \n-#ifndef __STDC__\n+#ifndef ANSI_PROTOTYPES\n   code = va_arg (p, enum rtx_code);\n   mode = va_arg (p, enum machine_mode);\n #endif\n@@ -433,7 +433,7 @@ gen_rtx VPROTO((enum rtx_code code, enum machine_mode mode, ...))\n rtvec\n gen_rtvec VPROTO((int n, ...))\n {\n-#ifndef __STDC__\n+#ifndef ANSI_PROTOTYPES\n   int n;\n #endif\n   int i;\n@@ -442,7 +442,7 @@ gen_rtvec VPROTO((int n, ...))\n \n   VA_START (p, n);\n \n-#ifndef __STDC__\n+#ifndef ANSI_PROTOTYPES\n   n = va_arg (p, int);\n #endif\n "}, {"sha": "be6f3312f7f185444edb682930c102ad6b8f69c1", "filename": "gcc/final.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5148a72b3319b75dd84da77751d43da8442fa8c7/gcc%2Ffinal.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5148a72b3319b75dd84da77751d43da8442fa8c7/gcc%2Ffinal.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffinal.c?ref=5148a72b3319b75dd84da77751d43da8442fa8c7", "patch": "@@ -3694,7 +3694,7 @@ output_addr_const (file, x)\n void\n asm_fprintf VPROTO((FILE *file, char *p, ...))\n {\n-#ifndef __STDC__\n+#ifndef ANSI_PROTOTYPES\n   FILE *file;\n   char *p;\n #endif\n@@ -3704,7 +3704,7 @@ asm_fprintf VPROTO((FILE *file, char *p, ...))\n \n   VA_START (argptr, p);\n \n-#ifndef __STDC__\n+#ifndef ANSI_PROTOTYPES\n   file = va_arg (argptr, FILE *);\n   p = va_arg (argptr, char *);\n #endif"}, {"sha": "08f5be427c2231517bfc495a9a495eaca4e963f8", "filename": "gcc/fix-header.c", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5148a72b3319b75dd84da77751d43da8442fa8c7/gcc%2Ffix-header.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5148a72b3319b75dd84da77751d43da8442fa8c7/gcc%2Ffix-header.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffix-header.c?ref=5148a72b3319b75dd84da77751d43da8442fa8c7", "patch": "@@ -1367,7 +1367,7 @@ v_cpp_message (pfile, is_error, msg, ap)\n void\n cpp_message VPROTO ((cpp_reader *pfile, int is_error, const char *msg, ...))\n {\n-#ifndef __STDC__\n+#ifndef ANSI_PROTOTYPES\n   cpp_reader *pfile;\n   int is_error;\n   const char *msg;\n@@ -1376,7 +1376,7 @@ cpp_message VPROTO ((cpp_reader *pfile, int is_error, const char *msg, ...))\n   \n   VA_START (ap, msg);\n   \n-#ifndef __STDC__\n+#ifndef ANSI_PROTOTYPES\n   pfile = va_arg (ap, cpp_reader *);\n   is_error = va_arg (ap, const int);\n   msg = va_arg (ap, const char *);\n@@ -1401,14 +1401,14 @@ v_fatal (str, ap)\n void\n fatal VPROTO ((const char *str, ...))\n {\n-#ifndef __STDC__\n+#ifndef ANSI_PROTOTYPES\n   const char *str;\n #endif\n   va_list ap;\n   \n   VA_START(ap, str);\n \n-#ifndef __STDC__\n+#ifndef ANSI_PROTOTYPES\n   str = va_arg (ap, const char *);\n #endif\n \n@@ -1419,15 +1419,15 @@ fatal VPROTO ((const char *str, ...))\n void\n cpp_fatal VPROTO ((cpp_reader * pfile ATTRIBUTE_UNUSED, const char *str, ...))\n {\n-#ifndef __STDC__\n+#ifndef ANSI_PROTOTYPES\n   cpp_reader * pfile;\n   const char *str;\n #endif\n   va_list ap;\n   \n   VA_START(ap, str);\n \n-#ifndef __STDC__\n+#ifndef ANSI_PROTOTYPES\n   pfile = va_arg (ap, cpp_reader *);\n   str = va_arg (ap, const char *);\n #endif"}, {"sha": "3ba99f59f4b640cf0d75433160a8ac7fc52cd1ba", "filename": "gcc/gansidecl.h", "status": "modified", "additions": 12, "deletions": 43, "changes": 55, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5148a72b3319b75dd84da77751d43da8442fa8c7/gcc%2Fgansidecl.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5148a72b3319b75dd84da77751d43da8442fa8c7/gcc%2Fgansidecl.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgansidecl.h?ref=5148a72b3319b75dd84da77751d43da8442fa8c7", "patch": "@@ -22,29 +22,17 @@ Boston, MA 02111-1307, USA.  */\n    in binutils and gdb releases.\n    ??? Over time the two should be merged into one.  */\n \n-#ifndef\tANSIDECL_H\n-#define\tANSIDECL_H\n+#ifndef\t__GANSIDECL_H__\n+#define\t__GANSIDECL_H__\n \n-/* Add prototype support.  */\n-#ifndef PROTO\n-#if defined (USE_PROTOTYPES) ? USE_PROTOTYPES : defined (__STDC__)\n-#define PROTO(ARGS) ARGS\n-#else\n-#define PROTO(ARGS) ()\n-#endif\n-#endif\n+#include \"ansidecl.h\"\n \n-#ifndef VPROTO\n-#ifdef __STDC__\n-#define PVPROTO(ARGS)\t\tARGS\n-#define VPROTO(ARGS)            ARGS\n-#define VA_START(va_list,var)  va_start(va_list,var)\n-#else\n-#define PVPROTO(ARGS)\t\t()\n-#define VPROTO(ARGS)            (va_alist) va_dcl\n-#define VA_START(va_list,var)  va_start(va_list)\n-#endif\n-#endif\n+/* Undef ansidecl.h's \"obsolete\" version. */\n+#undef PROTO\n+/* These macros are deprecated, use ansidecl.h's PARAMS style instead. */\n+#define PROTO(ARGS) PARAMS(ARGS)\n+#define VPROTO(ARGS) VPARAMS(ARGS)\n+#define PVPROTO(ARGS) PARAMS(ARGS)\n \n #if __GNUC__ < 2 || (__GNUC__ == 2 && __GNUC_MINOR__ < 7)\n # define __attribute__(x)\n@@ -67,29 +55,10 @@ Boston, MA 02111-1307, USA.  */\n #define ATTRIBUTE_PRINTF_5 ATTRIBUTE_PRINTF(5, 6)\n #endif /* ATTRIBUTE_PRINTF */\n \n-#ifndef GENERIC_PTR\n-#if defined (USE_PROTOTYPES) ? USE_PROTOTYPES : defined (__STDC__)\n-#define GENERIC_PTR void *\n-#else\n-#define GENERIC_PTR char *\n-#endif\n-#endif\n+#define GENERIC_PTR PTR\n \n #ifndef NULL_PTR\n-#define NULL_PTR ((GENERIC_PTR) 0)\n+#define NULL_PTR ((PTR) 0)\n #endif\n \n-#ifdef __STDC__\n-\n-#define\tPTR void *\n-\n-#else\n-\n-#define\tPTR char *\n-#ifndef const\n-#define const\n-#endif\n-\n-#endif /* ! __STDC__ */\n-\n-#endif /* ANSIDECL_H */\n+#endif /* __GANSIDECL_H__ */"}, {"sha": "d7ff558da974f20fe56762e37af99802a4ec9ae6", "filename": "gcc/gcc.c", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5148a72b3319b75dd84da77751d43da8442fa8c7/gcc%2Fgcc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5148a72b3319b75dd84da77751d43da8442fa8c7/gcc%2Fgcc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgcc.c?ref=5148a72b3319b75dd84da77751d43da8442fa8c7", "patch": "@@ -5296,14 +5296,14 @@ concat VPROTO((char *first, ...))\n   register char *end;\n   register char *arg;\n   va_list args;\n-#ifndef __STDC__\n+#ifndef ANSI_PROTOTYPES\n   char *first;\n #endif\n \n   /* First compute the size of the result and get sufficient memory.  */\n \n   VA_START (args, first);\n-#ifndef __STDC__\n+#ifndef ANSI_PROTOTYPES\n   first = va_arg (args, char *);\n #endif\n \n@@ -5322,7 +5322,7 @@ concat VPROTO((char *first, ...))\n   /* Now copy the individual pieces to the result string.  */\n \n   VA_START (args, first);\n-#ifndef __STDC__\n+#ifndef ANSI_PROTOTYPES\n   first = va_arg (args, char *);\n #endif\n \n@@ -5398,14 +5398,14 @@ fancy_abort ()\n static void\n fatal VPROTO((char *format, ...))\n {\n-#ifndef __STDC__\n+#ifndef ANSI_PROTOTYPES\n   char *format;\n #endif\n   va_list ap;\n \n   VA_START (ap, format);\n \n-#ifndef __STDC__\n+#ifndef ANSI_PROTOTYPES\n   format = va_arg (ap, char *);\n #endif\n \n@@ -5420,14 +5420,14 @@ fatal VPROTO((char *format, ...))\n static void\n error VPROTO((char *format, ...))\n {\n-#ifndef __STDC__\n+#ifndef ANSI_PROTOTYPES\n   char *format;\n #endif\n   va_list ap;\n \n   VA_START (ap, format);\n \n-#ifndef __STDC__\n+#ifndef ANSI_PROTOTYPES\n   format = va_arg (ap, char *);\n #endif\n "}, {"sha": "dd44fde6ba8385cf7cbfe0bc3734ef244656f560", "filename": "gcc/genattr.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5148a72b3319b75dd84da77751d43da8442fa8c7/gcc%2Fgenattr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5148a72b3319b75dd84da77751d43da8442fa8c7/gcc%2Fgenattr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgenattr.c?ref=5148a72b3319b75dd84da77751d43da8442fa8c7", "patch": "@@ -224,14 +224,14 @@ xrealloc (ptr, size)\n static void\n fatal VPROTO ((char *format, ...))\n {\n-#ifndef __STDC__\n+#ifndef ANSI_PROTOTYPES\n   char *format;\n #endif\n   va_list ap;\n \n   VA_START (ap, format);\n \n-#ifndef __STDC__\n+#ifndef ANSI_PROTOTYPES\n   format = va_arg (ap, char *);\n #endif\n "}, {"sha": "8bb3dc6994817da4194a91c6c6e7688ba94e7b3e", "filename": "gcc/genattrtab.c", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5148a72b3319b75dd84da77751d43da8442fa8c7/gcc%2Fgenattrtab.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5148a72b3319b75dd84da77751d43da8442fa8c7/gcc%2Fgenattrtab.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgenattrtab.c?ref=5148a72b3319b75dd84da77751d43da8442fa8c7", "patch": "@@ -538,7 +538,7 @@ attr_hash_add_string (hashcode, str)\n static rtx\n attr_rtx VPROTO((enum rtx_code code, ...))\n {\n-#ifndef __STDC__\n+#ifndef ANSI_PROTOTYPES\n   enum rtx_code code;\n #endif\n   va_list p;\n@@ -551,7 +551,7 @@ attr_rtx VPROTO((enum rtx_code code, ...))\n \n   VA_START (p, code);\n \n-#ifndef __STDC__\n+#ifndef ANSI_PROTOTYPES\n   code = va_arg (p, enum rtx_code);\n #endif\n \n@@ -735,7 +735,7 @@ attr_rtx VPROTO((enum rtx_code code, ...))\n static char *\n attr_printf VPROTO((register int len, char *fmt, ...))\n {\n-#ifndef __STDC__\n+#ifndef ANSI_PROTOTYPES\n   register int len;\n   char *fmt;\n #endif\n@@ -744,7 +744,7 @@ attr_printf VPROTO((register int len, char *fmt, ...))\n \n   VA_START (p, fmt);\n \n-#ifndef __STDC__\n+#ifndef ANSI_PROTOTYPES\n   len = va_arg (p, int);\n   fmt = va_arg (p, char *);\n #endif\n@@ -5816,14 +5816,14 @@ copy_rtx_unchanging (orig)\n static void\n fatal VPROTO ((char *format, ...))\n {\n-#ifndef __STDC__\n+#ifndef ANSI_PROTOTYPES\n   char *format;\n #endif\n   va_list ap;\n \n   VA_START (ap, format);\n \n-#ifndef __STDC__\n+#ifndef ANSI_PROTOTYPES\n   format = va_arg (ap, char *);\n #endif\n "}, {"sha": "696dbfb28024b4c78e79eb61c571b764fd5547b3", "filename": "gcc/gencodes.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5148a72b3319b75dd84da77751d43da8442fa8c7/gcc%2Fgencodes.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5148a72b3319b75dd84da77751d43da8442fa8c7/gcc%2Fgencodes.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgencodes.c?ref=5148a72b3319b75dd84da77751d43da8442fa8c7", "patch": "@@ -82,14 +82,14 @@ xrealloc (ptr, size)\n static void\n fatal VPROTO ((char *format, ...))\n {\n-#ifndef __STDC__\n+#ifndef ANSI_PROTOTYPES\n   char *format;\n #endif\n   va_list ap;\n \n   VA_START (ap, format);\n \n-#ifndef __STDC__\n+#ifndef ANSI_PROTOTYPES\n   format = va_arg (ap, char *);\n #endif\n "}, {"sha": "e61e1a24ba9170f1599e86882405c7098f21738c", "filename": "gcc/genconfig.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5148a72b3319b75dd84da77751d43da8442fa8c7/gcc%2Fgenconfig.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5148a72b3319b75dd84da77751d43da8442fa8c7/gcc%2Fgenconfig.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgenconfig.c?ref=5148a72b3319b75dd84da77751d43da8442fa8c7", "patch": "@@ -271,14 +271,14 @@ xrealloc (ptr, size)\n static void\n fatal VPROTO ((char *format, ...))\n {\n-#ifndef __STDC__\n+#ifndef ANSI_PROTOTYPES\n   char *format;\n #endif\n   va_list ap;\n \n   VA_START (ap, format);\n \n-#ifndef __STDC__\n+#ifndef ANSI_PROTOTYPES\n   format = va_arg (ap, char *);\n #endif\n "}, {"sha": "f67dacbb68318c8720c1713c888d6752e03f605f", "filename": "gcc/genemit.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5148a72b3319b75dd84da77751d43da8442fa8c7/gcc%2Fgenemit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5148a72b3319b75dd84da77751d43da8442fa8c7/gcc%2Fgenemit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgenemit.c?ref=5148a72b3319b75dd84da77751d43da8442fa8c7", "patch": "@@ -705,14 +705,14 @@ xrealloc (ptr, size)\n static void\n fatal VPROTO ((char *format, ...))\n {\n-#ifndef __STDC__\n+#ifndef ANSI_PROTOTYPES\n   char *format;\n #endif\n   va_list ap;\n \n   VA_START (ap, format);\n \n-#ifndef __STDC__\n+#ifndef ANSI_PROTOTYPES\n   format = va_arg (ap, char *);\n #endif\n "}, {"sha": "00bc571c99133ee7a8f700641c1517b408fcecac", "filename": "gcc/genextract.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5148a72b3319b75dd84da77751d43da8442fa8c7/gcc%2Fgenextract.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5148a72b3319b75dd84da77751d43da8442fa8c7/gcc%2Fgenextract.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgenextract.c?ref=5148a72b3319b75dd84da77751d43da8442fa8c7", "patch": "@@ -373,14 +373,14 @@ xrealloc (ptr, size)\n static void\n fatal VPROTO ((char *format, ...))\n {\n-#ifndef __STDC__\n+#ifndef ANSI_PROTOTYPES\n   char *format;\n #endif\n   va_list ap;\n \n   VA_START (ap, format);\n \n-#ifndef __STDC__\n+#ifndef ANSI_PROTOTYPES\n   format = va_arg (ap, char *);\n #endif\n "}, {"sha": "b56175f86a3d76866099aa8e6c2f8f009f2cb5f3", "filename": "gcc/genflags.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5148a72b3319b75dd84da77751d43da8442fa8c7/gcc%2Fgenflags.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5148a72b3319b75dd84da77751d43da8442fa8c7/gcc%2Fgenflags.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgenflags.c?ref=5148a72b3319b75dd84da77751d43da8442fa8c7", "patch": "@@ -202,14 +202,14 @@ xrealloc (ptr, size)\n static void\n fatal VPROTO ((char *format, ...))\n {\n-#ifndef __STDC__\n+#ifndef ANSI_PROTOTYPES\n   char *format;\n #endif\n   va_list ap;\n \n   VA_START (ap, format);\n \n-#ifndef __STDC__\n+#ifndef ANSI_PROTOTYPES\n   format = va_arg (ap, char *);\n #endif\n "}, {"sha": "985be8fdb0bbf68e1fc91fcfc5cab7d8da34ef75", "filename": "gcc/genopinit.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5148a72b3319b75dd84da77751d43da8442fa8c7/gcc%2Fgenopinit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5148a72b3319b75dd84da77751d43da8442fa8c7/gcc%2Fgenopinit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgenopinit.c?ref=5148a72b3319b75dd84da77751d43da8442fa8c7", "patch": "@@ -307,14 +307,14 @@ xrealloc (ptr, size)\n static void\n fatal VPROTO ((char *format, ...))\n {\n-#ifndef __STDC__\n+#ifndef ANSI_PROTOTYPES\n   char *format;\n #endif\n   va_list ap;\n \n   VA_START (ap, format);\n \n-#ifndef __STDC__\n+#ifndef ANSI_PROTOTYPES\n   format = va_arg (ap, char *);\n #endif\n "}, {"sha": "1651070c96d0a17a6425dbbdeff4c58c8a8e91b6", "filename": "gcc/genoutput.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5148a72b3319b75dd84da77751d43da8442fa8c7/gcc%2Fgenoutput.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5148a72b3319b75dd84da77751d43da8442fa8c7/gcc%2Fgenoutput.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgenoutput.c?ref=5148a72b3319b75dd84da77751d43da8442fa8c7", "patch": "@@ -925,14 +925,14 @@ mybcopy (b1, b2, length)\n static void\n fatal VPROTO ((char *format, ...))\n {\n-#ifndef __STDC__\n+#ifndef ANSI_PROTOTYPES\n   char *format;\n #endif\n   va_list ap;\n \n   VA_START (ap, format);\n \n-#ifndef __STDC__\n+#ifndef ANSI_PROTOTYPES\n   format = va_arg (ap, char *);\n #endif\n \n@@ -955,14 +955,14 @@ fancy_abort ()\n static void\n error VPROTO ((char *format, ...))\n {\n-#ifndef __STDC__\n+#ifndef ANSI_PROTOTYPES\n   char *format;\n #endif\n   va_list ap;\n \n   VA_START (ap, format);\n \n-#ifndef __STDC__\n+#ifndef ANSI_PROTOTYPES\n   format = va_arg (ap, char *);\n #endif\n "}, {"sha": "ad9efabad4d9383c7a0568b8c6941618808faca5", "filename": "gcc/genpeep.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5148a72b3319b75dd84da77751d43da8442fa8c7/gcc%2Fgenpeep.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5148a72b3319b75dd84da77751d43da8442fa8c7/gcc%2Fgenpeep.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgenpeep.c?ref=5148a72b3319b75dd84da77751d43da8442fa8c7", "patch": "@@ -410,14 +410,14 @@ xrealloc (ptr, size)\n static void\n fatal VPROTO ((char *format, ...))\n {\n-#ifndef __STDC__\n+#ifndef ANSI_PROTOTYPES\n   char *format;\n #endif\n   va_list ap;\n \n   VA_START (ap, format);\n \n-#ifndef __STDC__\n+#ifndef ANSI_PROTOTYPES\n   format = va_arg (ap, char *);\n #endif\n "}, {"sha": "db4566ad615b24d7d42223f93873868bd98ddf53", "filename": "gcc/genrecog.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5148a72b3319b75dd84da77751d43da8442fa8c7/gcc%2Fgenrecog.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5148a72b3319b75dd84da77751d43da8442fa8c7/gcc%2Fgenrecog.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgenrecog.c?ref=5148a72b3319b75dd84da77751d43da8442fa8c7", "patch": "@@ -1685,14 +1685,14 @@ xmalloc (size)\n static void\n fatal VPROTO ((char *format, ...))\n {\n-#ifndef __STDC__\n+#ifndef ANSI_PROTOTYPES\n   char *format;\n #endif\n   va_list ap;\n \n   VA_START (ap, format);\n \n-#ifndef __STDC__\n+#ifndef ANSI_PROTOTYPES\n   format = va_arg (ap, char *);\n #endif\n "}, {"sha": "a4f8961927dd1d402e415611e75f8192994cd26d", "filename": "gcc/halfpic.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5148a72b3319b75dd84da77751d43da8442fa8c7/gcc%2Fhalfpic.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5148a72b3319b75dd84da77751d43da8442fa8c7/gcc%2Fhalfpic.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fhalfpic.h?ref=5148a72b3319b75dd84da77751d43da8442fa8c7", "patch": "@@ -20,7 +20,7 @@ Boston, MA 02111-1307, USA.  */\n \n #ifndef NO_HALF_PIC\n \n-#if defined (USE_PROTOTYPES) ? USE_PROTOTYPES : defined (__STDC__)\n+#ifdef ANSI_PROTOTYPES\n union tree_node;\t\t/* forward reference */\n struct rtx_def;\n #endif"}, {"sha": "5733daadab40ccc7d0cbdd6178f28fbb8f8fe47f", "filename": "gcc/hash.h", "status": "modified", "additions": 2, "deletions": 24, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5148a72b3319b75dd84da77751d43da8442fa8c7/gcc%2Fhash.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5148a72b3319b75dd84da77751d43da8442fa8c7/gcc%2Fhash.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fhash.h?ref=5148a72b3319b75dd84da77751d43da8442fa8c7", "patch": "@@ -18,31 +18,9 @@ You should have received a copy of the GNU General Public License\n along with this program; if not, write to the Free Software\n Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.  */\n \n-#ifdef IN_GCC\n-\n-/* Add prototype support.  */\n-#ifndef PROTO\n-#if defined (USE_PROTOTYPES) ? USE_PROTOTYPES : defined (__STDC__)\n-#define PROTO(ARGS) ARGS\n-#else\n-#define PROTO(ARGS) ()\n-#endif\n-#endif\n-\n-#define PARAMS(ARGS) PROTO(ARGS)\n-\n-#ifdef __STDC__\n-#define PTR void *\n-#else\n-#ifndef const\n-#define const\n-#endif\n-#define PTR char *\n-#endif\n-\n-#else /* ! IN_GCC */\n+#ifndef IN_GCC\n #include <ansidecl.h>\n-#endif /* IN_GCC */\n+#endif /* ! IN_GCC */\n \n #include \"obstack.h\"\n "}, {"sha": "ad112fccbcbfff063d60fe4b519f40f26dff13e4", "filename": "gcc/mips-tfile.c", "status": "modified", "additions": 6, "deletions": 17, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5148a72b3319b75dd84da77751d43da8442fa8c7/gcc%2Fmips-tfile.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5148a72b3319b75dd84da77751d43da8442fa8c7/gcc%2Fmips-tfile.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fmips-tfile.c?ref=5148a72b3319b75dd84da77751d43da8442fa8c7", "patch": "@@ -610,15 +610,11 @@ Boston, MA 02111-1307, USA.  */\n #define __LINE__ 0\n #endif\n \n+#define __proto(x) PARAMS(x)\n+/* Should PTR_T and CPTR_T be typedef'ed in terms of PTR ??? */\n #ifdef __STDC__\n typedef void *PTR_T;\n typedef const void *CPTR_T;\n-#define __proto(x) x\n-#ifndef VPROTO\n-#define PVPROTO(ARGS)\t\tARGS\n-#define VPROTO(ARGS)            ARGS\n-#define VA_START(va_list,var)  va_start(va_list,var)\n-#endif\n #else\n \n #if defined(_STDIO_H_) || defined(__STDIO_H__)\t\t/* Ultrix 4.0, SGI */\n@@ -630,13 +626,6 @@ typedef char *PTR_T;\t\t\t\t\t/* Ultrix 3.1 */\n typedef char *CPTR_T;\n #endif\n \n-#define __proto(x) ()\n-#define const\n-#ifndef VPROTO\n-#define PVPROTO(ARGS)\t\t()\n-#define VPROTO(ARGS)            (va_alist) va_dcl\n-#define VA_START(va_list,var)  va_start(va_list)\n-#endif\n #endif\n \n /* Do to size_t being defined in sys/types.h and different\n@@ -5607,14 +5596,14 @@ free_thead (ptr)\n void\n fatal VPROTO((const char *format, ...))\n {\n-#ifndef __STDC__\n+#ifndef ANSI_PROTOTYPES\n   char *format;\n #endif\n   va_list ap;\n \n   VA_START (ap, format);\n \n-#ifndef __STDC__\n+#ifndef ANSI_PROTOTYPES\n   format = va_arg (ap, char *);\n #endif\n \n@@ -5637,14 +5626,14 @@ fatal VPROTO((const char *format, ...))\n void\n error VPROTO((const char *format, ...))\n {\n-#ifndef __STDC__\n+#ifndef ANSI_PROTOTYPES\n   char *format;\n #endif\n   va_list ap;\n \n   VA_START (ap, format);\n \n-#ifndef __STDC__\n+#ifndef ANSI_PROTOTYPES\n   format = va_arg (ap, char *);\n #endif\n "}, {"sha": "387ff462dd4f8f0f4c1737fa02d116fc3465ff1b", "filename": "gcc/prefix.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5148a72b3319b75dd84da77751d43da8442fa8c7/gcc%2Fprefix.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5148a72b3319b75dd84da77751d43da8442fa8c7/gcc%2Fprefix.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fprefix.c?ref=5148a72b3319b75dd84da77751d43da8442fa8c7", "patch": "@@ -118,14 +118,14 @@ concat VPROTO((char *first, ...))\n   register char *end;\n   register char *arg;\n   va_list args;\n-#ifndef __STDC__\n+#ifndef ANSI_PROTOTYPES\n   char *first;\n #endif\n \n   /* First compute the size of the result and get sufficient memory.  */\n \n   VA_START (args, first);\n-#ifndef __STDC__\n+#ifndef ANSI_PROTOTYPES\n   first = va_arg (args, char *);\n #endif\n \n@@ -144,7 +144,7 @@ concat VPROTO((char *first, ...))\n   /* Now copy the individual pieces to the result string.  */\n \n   VA_START (args, first);\n-#ifndef __STDC__\n+#ifndef ANSI_PROTOTYPES\n   first = va_arg (args, char *);\n #endif\n "}, {"sha": "f27c9a3ceb4a3aee5445890a64e292fd65879918", "filename": "gcc/scan.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5148a72b3319b75dd84da77751d43da8442fa8c7/gcc%2Fscan.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5148a72b3319b75dd84da77751d43da8442fa8c7/gcc%2Fscan.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fscan.h?ref=5148a72b3319b75dd84da77751d43da8442fa8c7", "patch": "@@ -34,7 +34,7 @@ typedef struct sstring\n   if ((STR)->limit - (STR)->ptr < (COUNT)) make_sstring_space (STR, COUNT);\n \n #ifndef _PARAMS\n-#if defined(__STDC__) || defined(__cplusplus)\n+#if defined(ANSI_PROTOTYPES) || defined(__cplusplus)\n #define _PARAMS(args) args\n #else\n #define _PARAMS(args) ()"}, {"sha": "ca786a49c81fee57af0c3270c94d1e61411efed0", "filename": "gcc/system.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5148a72b3319b75dd84da77751d43da8442fa8c7/gcc%2Fsystem.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5148a72b3319b75dd84da77751d43da8442fa8c7/gcc%2Fsystem.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsystem.h?ref=5148a72b3319b75dd84da77751d43da8442fa8c7", "patch": "@@ -8,7 +8,7 @@\n #define __GCC_SYSTEM_H__\n \n /* We must include stdarg.h/varargs.h before stdio.h. */\n-#ifdef __STDC__\n+#ifdef ANSI_PROTOTYPES\n #include <stdarg.h>\n #else\n #include <varargs.h>"}, {"sha": "851ed3e94e1e770d716ffe5137a1a0387ea2d2f4", "filename": "gcc/toplev.c", "status": "modified", "additions": 28, "deletions": 28, "changes": 56, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5148a72b3319b75dd84da77751d43da8442fa8c7/gcc%2Ftoplev.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5148a72b3319b75dd84da77751d43da8442fa8c7/gcc%2Ftoplev.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftoplev.c?ref=5148a72b3319b75dd84da77751d43da8442fa8c7", "patch": "@@ -1659,7 +1659,7 @@ v_error_with_file_and_line (file, line, s, ap)\n void\n error_with_file_and_line VPROTO((char *file, int line, char *s, ...))\n {\n-#ifndef __STDC__\n+#ifndef ANSI_PROTOTYPES\n   char *file;\n   int line;\n   char *s;\n@@ -1668,7 +1668,7 @@ error_with_file_and_line VPROTO((char *file, int line, char *s, ...))\n \n   VA_START (ap, s);\n \n-#ifndef __STDC__\n+#ifndef ANSI_PROTOTYPES\n   file = va_arg (ap, char *);\n   line = va_arg (ap, int);\n   s = va_arg (ap, char *);\n@@ -1696,15 +1696,15 @@ v_error_with_decl (decl, s, ap)\n void\n error_with_decl VPROTO((tree decl, char *s, ...))\n {\n-#ifndef __STDC__\n+#ifndef ANSI_PROTOTYPES\n   tree decl;\n   char *s;\n #endif\n   va_list ap;\n \n   VA_START (ap, s);\n \n-#ifndef __STDC__\n+#ifndef ANSI_PROTOTYPES\n   decl = va_arg (ap, tree);\n   s = va_arg (ap, char *);\n #endif\n@@ -1735,15 +1735,15 @@ v_error_for_asm (insn, s, ap)\n void\n error_for_asm VPROTO((rtx insn, char *s, ...))\n {\n-#ifndef __STDC__\n+#ifndef ANSI_PROTOTYPES\n   rtx insn;\n   char *s;\n #endif\n   va_list ap;\n \n   VA_START (ap, s);\n \n-#ifndef __STDC__\n+#ifndef ANSI_PROTOTYPES\n   insn = va_arg (ap, rtx);\n   s = va_arg (ap, char *);\n #endif\n@@ -1765,14 +1765,14 @@ verror (s, ap)\n void\n error VPROTO((char *s, ...))\n {\n-#ifndef __STDC__\n+#ifndef ANSI_PROTOTYPES\n   char *s;\n #endif\n   va_list ap;\n \n   VA_START (ap, s);\n \n-#ifndef __STDC__\n+#ifndef ANSI_PROTOTYPES\n   s = va_arg (ap, char *);\n #endif\n \n@@ -1794,14 +1794,14 @@ vfatal (s, ap)\n void\n fatal VPROTO((char *s, ...))\n {\n-#ifndef __STDC__\n+#ifndef ANSI_PROTOTYPES\n   char *s;\n #endif\n   va_list ap;\n \n   VA_START (ap, s);\n \n-#ifndef __STDC__\n+#ifndef ANSI_PROTOTYPES\n   s = va_arg (ap, char *);\n #endif\n \n@@ -1828,7 +1828,7 @@ v_warning_with_file_and_line (file, line, s, ap)\n void\n warning_with_file_and_line VPROTO((char *file, int line, char *s, ...))\n {\n-#ifndef __STDC__\n+#ifndef ANSI_PROTOTYPES\n   char *file;\n   int line;\n   char *s;\n@@ -1837,7 +1837,7 @@ warning_with_file_and_line VPROTO((char *file, int line, char *s, ...))\n \n   VA_START (ap, s);\n \n-#ifndef __STDC__\n+#ifndef ANSI_PROTOTYPES\n   file = va_arg (ap, char *);\n   line = va_arg (ap, int);\n   s = va_arg (ap, char *);\n@@ -1867,15 +1867,15 @@ v_warning_with_decl (decl, s, ap)\n void\n warning_with_decl VPROTO((tree decl, char *s, ...))\n {\n-#ifndef __STDC__\n+#ifndef ANSI_PROTOTYPES\n   tree decl;\n   char *s;\n #endif\n   va_list ap;\n \n   VA_START (ap, s);\n \n-#ifndef __STDC__\n+#ifndef ANSI_PROTOTYPES\n   decl = va_arg (ap, tree);\n   s = va_arg (ap, char *);\n #endif\n@@ -1908,15 +1908,15 @@ v_warning_for_asm (insn, s, ap)\n void\n warning_for_asm VPROTO((rtx insn, char *s, ...))\n {\n-#ifndef __STDC__\n+#ifndef ANSI_PROTOTYPES\n   rtx insn;\n   char *s;\n #endif\n   va_list ap;\n \n   VA_START (ap, s);\n \n-#ifndef __STDC__\n+#ifndef ANSI_PROTOTYPES\n   insn = va_arg (ap, rtx);\n   s = va_arg (ap, char *);\n #endif\n@@ -1938,14 +1938,14 @@ vwarning (s, ap)\n void\n warning VPROTO((char *s, ...))\n {\n-#ifndef __STDC__\n+#ifndef ANSI_PROTOTYPES\n   char *s;\n #endif\n   va_list ap;\n \n   VA_START (ap, s);\n \n-#ifndef __STDC__\n+#ifndef ANSI_PROTOTYPES\n   s = va_arg (ap, char *);\n #endif\n \n@@ -1970,14 +1970,14 @@ vpedwarn (s, ap)\n void\n pedwarn VPROTO((char *s, ...))\n {\n-#ifndef __STDC__\n+#ifndef ANSI_PROTOTYPES\n   char *s;\n #endif\n   va_list ap;\n \n   VA_START (ap, s);\n \n-#ifndef __STDC__\n+#ifndef ANSI_PROTOTYPES\n   s = va_arg (ap, char *);\n #endif\n \n@@ -2010,15 +2010,15 @@ v_pedwarn_with_decl (decl, s, ap)\n void\n pedwarn_with_decl VPROTO((tree decl, char *s, ...))\n {\n-#ifndef __STDC__\n+#ifndef ANSI_PROTOTYPES\n   tree decl;\n   char *s;\n #endif\n   va_list ap;\n \n   VA_START (ap, s);\n \n-#ifndef __STDC__\n+#ifndef ANSI_PROTOTYPES\n   decl = va_arg (ap, tree);\n   s = va_arg (ap, char *);\n #endif\n@@ -2043,7 +2043,7 @@ v_pedwarn_with_file_and_line (file, line, s, ap)\n void\n pedwarn_with_file_and_line VPROTO((char *file, int line, char *s, ...))\n {\n-#ifndef __STDC__\n+#ifndef ANSI_PROTOTYPES\n   char *file;\n   int line;\n   char *s;\n@@ -2052,7 +2052,7 @@ pedwarn_with_file_and_line VPROTO((char *file, int line, char *s, ...))\n \n   VA_START (ap, s);\n \n-#ifndef __STDC__\n+#ifndef ANSI_PROTOTYPES\n   file = va_arg (ap, char *);\n   line = va_arg (ap, int);\n   s = va_arg (ap, char *);\n@@ -2081,14 +2081,14 @@ vsorry (s, ap)\n void\n sorry VPROTO((char *s, ...))\n {\n-#ifndef __STDC__\n+#ifndef ANSI_PROTOTYPES\n   char *s;\n #endif\n   va_list ap;\n \n   VA_START (ap, s);\n \n-#ifndef __STDC__\n+#ifndef ANSI_PROTOTYPES\n   s = va_arg (ap, char *);\n #endif\n \n@@ -2115,14 +2115,14 @@ v_really_sorry (s, ap)\n void\n really_sorry VPROTO((char *s, ...))\n {\n-#ifndef __STDC__\n+#ifndef ANSI_PROTOTYPES\n   char *s;\n #endif\n   va_list ap;\n \n   VA_START (ap, s);\n \n-#ifndef __STDC__\n+#ifndef ANSI_PROTOTYPES\n   s = va_arg (ap, char *);\n #endif\n "}, {"sha": "38d0fca21fb616f1a147a3653dbe59274f1744e0", "filename": "gcc/toplev.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5148a72b3319b75dd84da77751d43da8442fa8c7/gcc%2Ftoplev.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5148a72b3319b75dd84da77751d43da8442fa8c7/gcc%2Ftoplev.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftoplev.h?ref=5148a72b3319b75dd84da77751d43da8442fa8c7", "patch": "@@ -5,7 +5,7 @@\n #ifndef __GCC_TOPLEV_H__\n #define __GCC_TOPLEV_H__\n \n-#ifdef __STDC__\n+#ifdef ANSI_PROTOTYPES\n union tree_node;\n struct rtx_def;\n #endif"}, {"sha": "de3655cb605ff35029ab7815e5b3b1c4559b1bcc", "filename": "gcc/tree.c", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5148a72b3319b75dd84da77751d43da8442fa8c7/gcc%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5148a72b3319b75dd84da77751d43da8442fa8c7/gcc%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.c?ref=5148a72b3319b75dd84da77751d43da8442fa8c7", "patch": "@@ -2983,7 +2983,7 @@ stabilize_reference_1 (e)\n tree\n build VPROTO((enum tree_code code, tree tt, ...))\n {\n-#ifndef __STDC__\n+#ifndef ANSI_PROTOTYPES\n   enum tree_code code;\n   tree tt;\n #endif\n@@ -2994,7 +2994,7 @@ build VPROTO((enum tree_code code, tree tt, ...))\n \n   VA_START (p, tt);\n \n-#ifndef __STDC__\n+#ifndef ANSI_PROTOTYPES\n   code = va_arg (p, enum tree_code);\n   tt = va_arg (p, tree);\n #endif\n@@ -3109,7 +3109,7 @@ build1 (code, type, node)\n tree\n build_nt VPROTO((enum tree_code code, ...))\n {\n-#ifndef __STDC__\n+#ifndef ANSI_PROTOTYPES\n   enum tree_code code;\n #endif\n   va_list p;\n@@ -3119,7 +3119,7 @@ build_nt VPROTO((enum tree_code code, ...))\n \n   VA_START (p, code);\n \n-#ifndef __STDC__\n+#ifndef ANSI_PROTOTYPES\n   code = va_arg (p, enum tree_code);\n #endif\n \n@@ -3139,7 +3139,7 @@ build_nt VPROTO((enum tree_code code, ...))\n tree\n build_parse_node VPROTO((enum tree_code code, ...))\n {\n-#ifndef __STDC__\n+#ifndef ANSI_PROTOTYPES\n   enum tree_code code;\n #endif\n   register struct obstack *ambient_obstack = expression_obstack;\n@@ -3150,7 +3150,7 @@ build_parse_node VPROTO((enum tree_code code, ...))\n \n   VA_START (p, code);\n \n-#ifndef __STDC__\n+#ifndef ANSI_PROTOTYPES\n   code = va_arg (p, enum tree_code);\n #endif\n "}]}