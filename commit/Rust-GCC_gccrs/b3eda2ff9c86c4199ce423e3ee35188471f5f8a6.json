{"sha": "b3eda2ff9c86c4199ce423e3ee35188471f5f8a6", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjNlZGEyZmY5Yzg2YzQxOTljZTQyM2UzZWUzNTE4ODQ3MWY1ZjhhNg==", "commit": {"author": {"name": "Bryce McKinlay", "email": "bryce@gcc.gnu.org", "date": "2001-02-07T09:32:46Z"}, "committer": {"name": "Bryce McKinlay", "email": "bryce@gcc.gnu.org", "date": "2001-02-07T09:32:46Z"}, "message": "re PR java/1895 (Libjava: Arrays.sort doesn't work)\n\n\t* java/util/Arrays.java: Removed \"cmp\" methods.\n\t(qsort): Don't use \"cmp\".\n\t(med3): Likewise.\n\n2001-02-07  Mark Benvenuto  <mcb54@columbia.edu>\n\n\t* java/util/Arrays.java (qsort): Handle N value of 7 with insertion\n\tsort. Fix for PR java/1895.\n\nFrom-SVN: r39514", "tree": {"sha": "582f03f24f614fcb2e972a395bedd2b1a1c57f74", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/582f03f24f614fcb2e972a395bedd2b1a1c57f74"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b3eda2ff9c86c4199ce423e3ee35188471f5f8a6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b3eda2ff9c86c4199ce423e3ee35188471f5f8a6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b3eda2ff9c86c4199ce423e3ee35188471f5f8a6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b3eda2ff9c86c4199ce423e3ee35188471f5f8a6/comments", "author": null, "committer": null, "parents": [{"sha": "d2add47547715b148f5f595e69a8d8233f84f103", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d2add47547715b148f5f595e69a8d8233f84f103", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d2add47547715b148f5f595e69a8d8233f84f103"}], "stats": {"total": 154, "additions": 65, "deletions": 89}, "files": [{"sha": "28d6093abdc90662d0617fa9ca19e047f9281055", "filename": "libjava/ChangeLog", "status": "modified", "additions": 12, "deletions": 1, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b3eda2ff9c86c4199ce423e3ee35188471f5f8a6/libjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b3eda2ff9c86c4199ce423e3ee35188471f5f8a6/libjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FChangeLog?ref=b3eda2ff9c86c4199ce423e3ee35188471f5f8a6", "patch": "@@ -1,4 +1,15 @@\n-2000-02-03  Jeff Sturm  <jeff.sturm@commerceone.com>\n+2001-02-07  Bryce McKinlay  <bryce@albatross.co.nz>\n+\n+\t* java/util/Arrays.java: Removed \"cmp\" methods.\n+\t(qsort): Don't use \"cmp\".\n+\t(med3): Likewise.\n+\n+2001-02-07  Mark Benvenuto  <mcb54@columbia.edu>\n+\n+\t* java/util/Arrays.java (qsort): Handle N value of 7 with insertion\n+\tsort. Fix for PR java/1895.\n+\n+2001-02-03  Jeff Sturm  <jeff.sturm@commerceone.com>\n \n \t* configure.host: Use sjlj-exceptions for Alpha.\n "}, {"sha": "87a40e3554746e149ae4ac280a694e8777be959b", "filename": "libjava/java/util/Arrays.java", "status": "modified", "additions": 53, "deletions": 88, "changes": 141, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b3eda2ff9c86c4199ce423e3ee35188471f5f8a6/libjava%2Fjava%2Futil%2FArrays.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b3eda2ff9c86c4199ce423e3ee35188471f5f8a6/libjava%2Fjava%2Futil%2FArrays.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Futil%2FArrays.java?ref=b3eda2ff9c86c4199ce423e3ee35188471f5f8a6", "patch": "@@ -1079,16 +1079,11 @@ public static void sort(byte[] a, int fromIndex, int toIndex)\n     qsort(a, fromIndex, toIndex);\n   }\n \n-  private static short cmp(byte i, byte j)\n-  {\n-    return (short) (i - j);\n-  }\n-\n   private static int med3(int a, int b, int c, byte[]d)\n   {\n-    return cmp(d[a], d[b]) < 0 ?\n-      (cmp(d[b], d[c]) < 0 ? b : cmp(d[a], d[c]) < 0 ? c : a)\n-      : (cmp(d[b], d[c]) > 0 ? b : cmp(d[a], d[c]) > 0 ? c : a);\n+    return d[a] < d[b] ? \n+               (d[b] < d[c] ? b : d[a] < d[c] ? c : a)\n+\t     : (d[b] > d[c] ? b : d[a] > d[c] ? c : a);\n   }\n \n   private static void swap(int i, int j, byte[]a)\n@@ -1101,10 +1096,10 @@ private static void swap(int i, int j, byte[]a)\n   private static void qsort(byte[]a, int start, int n)\n   {\n     // use an insertion sort on small arrays\n-    if (n < 7)\n+    if (n <= 7)\n       {\n \tfor (int i = start + 1; i < start + n; i++)\n-\t  for (int j = i; j > 0 && cmp(a[j - 1], a[j]) > 0; j--)\n+\t  for (int j = i; j > 0 && a[j - 1] > a[j]; j--)\n \t    swap(j, j - 1, a);\n \treturn;\n       }\n@@ -1126,7 +1121,7 @@ private static void qsort(byte[]a, int start, int n)\n       }\n \n     int pa, pb, pc, pd, pv;\n-    short r;\n+    int r;\n \n     pv = start;\n     swap(pv, pm, a);\n@@ -1135,7 +1130,7 @@ private static void qsort(byte[]a, int start, int n)\n \n     for (;;)\n       {\n-\twhile (pb <= pc && (r = cmp(a[pb], a[pv])) <= 0)\n+\twhile (pb <= pc && (r = a[pb] - a[pv]) <= 0)\n \t  {\n \t    if (r == 0)\n \t      {\n@@ -1144,7 +1139,7 @@ private static void qsort(byte[]a, int start, int n)\n \t      }\n \t    pb++;\n \t  }\n-\twhile (pc >= pb && (r = cmp(a[pc], a[pv])) >= 0)\n+\twhile (pc >= pb && (r = a[pc] - a[pv]) >= 0)\n \t  {\n \t    if (r == 0)\n \t      {\n@@ -1197,16 +1192,11 @@ public static void sort(char[] a, int fromIndex, int toIndex)\n     qsort(a, fromIndex, toIndex);\n   }\n \n-  private static int cmp(char i, char j)\n-  {\n-    return i - j;\n-  }\n-\n   private static int med3(int a, int b, int c, char[]d)\n   {\n-    return cmp(d[a], d[b]) < 0 ?\n-      (cmp(d[b], d[c]) < 0 ? b : cmp(d[a], d[c]) < 0 ? c : a)\n-      : (cmp(d[b], d[c]) > 0 ? b : cmp(d[a], d[c]) > 0 ? c : a);\n+    return d[a] < d[b] ? \n+               (d[b] < d[c] ? b : d[a] < d[c] ? c : a)\n+\t     : (d[b] > d[c] ? b : d[a] > d[c] ? c : a);\n   }\n \n   private static void swap(int i, int j, char[]a)\n@@ -1219,10 +1209,10 @@ private static void swap(int i, int j, char[]a)\n   private static void qsort(char[]a, int start, int n)\n   {\n     // use an insertion sort on small arrays\n-    if (n < 7)\n+    if (n <= 7)\n       {\n \tfor (int i = start + 1; i < start + n; i++)\n-\t  for (int j = i; j > 0 && cmp(a[j - 1], a[j]) > 0; j--)\n+\t  for (int j = i; j > 0 && a[j - 1] > a[j]; j--)\n \t    swap(j, j - 1, a);\n \treturn;\n       }\n@@ -1253,7 +1243,7 @@ private static void qsort(char[]a, int start, int n)\n \n     for (;;)\n       {\n-\twhile (pb <= pc && (r = cmp(a[pb], a[pv])) <= 0)\n+\twhile (pb <= pc && (r = a[pb] - a[pv]) <= 0)\n \t  {\n \t    if (r == 0)\n \t      {\n@@ -1262,7 +1252,7 @@ private static void qsort(char[]a, int start, int n)\n \t      }\n \t    pb++;\n \t  }\n-\twhile (pc >= pb && (r = cmp(a[pc], a[pv])) >= 0)\n+\twhile (pc >= pb && (r = a[pc] - a[pv]) >= 0)\n \t  {\n \t    if (r == 0)\n \t      {\n@@ -1316,16 +1306,11 @@ public static void sort(double[] a, int fromIndex, int toIndex)\n     qsort(a, fromIndex, toIndex);\n   }\n \n-  private static double cmp(double i, double j)\n-  {\n-    return i - j;\n-  }\n-\n   private static int med3(int a, int b, int c, double[]d)\n   {\n-    return cmp(d[a], d[b]) < 0 ?\n-      (cmp(d[b], d[c]) < 0 ? b : cmp(d[a], d[c]) < 0 ? c : a)\n-      : (cmp(d[b], d[c]) > 0 ? b : cmp(d[a], d[c]) > 0 ? c : a);\n+    return d[a] < d[b] ? \n+               (d[b] < d[c] ? b : d[a] < d[c] ? c : a)\n+\t     : (d[b] > d[c] ? b : d[a] > d[c] ? c : a);\n   }\n \n   private static void swap(int i, int j, double[]a)\n@@ -1338,10 +1323,10 @@ private static void swap(int i, int j, double[]a)\n   private static void qsort(double[]a, int start, int n)\n   {\n     // use an insertion sort on small arrays\n-    if (n < 7)\n+    if (n <= 7)\n       {\n \tfor (int i = start + 1; i < start + n; i++)\n-\t  for (int j = i; j > 0 && cmp(a[j - 1], a[j]) > 0; j--)\n+\t  for (int j = i; j > 0 && a[j - 1] > a[j]; j--)\n \t    swap(j, j - 1, a);\n \treturn;\n       }\n@@ -1372,7 +1357,7 @@ private static void qsort(double[]a, int start, int n)\n \n     for (;;)\n       {\n-\twhile (pb <= pc && (r = cmp(a[pb], a[pv])) <= 0)\n+\twhile (pb <= pc && (r = a[pb] - a[pv]) <= 0)\n \t  {\n \t    if (r == 0)\n \t      {\n@@ -1381,7 +1366,7 @@ private static void qsort(double[]a, int start, int n)\n \t      }\n \t    pb++;\n \t  }\n-\twhile (pc >= pb && (r = cmp(a[pc], a[pv])) >= 0)\n+\twhile (pc >= pb && (r = a[pc] - a[pv]) >= 0)\n \t  {\n \t    if (r == 0)\n \t      {\n@@ -1435,16 +1420,11 @@ public static void sort(float[] a, int fromIndex, int toIndex)\n     qsort(a, fromIndex, toIndex);\n   }\n \n-  private static float cmp(float i, float j)\n-  {\n-    return i - j;\n-  }\n-\n   private static int med3(int a, int b, int c, float[]d)\n   {\n-    return cmp(d[a], d[b]) < 0 ?\n-      (cmp(d[b], d[c]) < 0 ? b : cmp(d[a], d[c]) < 0 ? c : a)\n-      : (cmp(d[b], d[c]) > 0 ? b : cmp(d[a], d[c]) > 0 ? c : a);\n+    return d[a] < d[b] ? \n+               (d[b] < d[c] ? b : d[a] < d[c] ? c : a)\n+\t     : (d[b] > d[c] ? b : d[a] > d[c] ? c : a);\n   }\n \n   private static void swap(int i, int j, float[]a)\n@@ -1457,10 +1437,10 @@ private static void swap(int i, int j, float[]a)\n   private static void qsort(float[]a, int start, int n)\n   {\n     // use an insertion sort on small arrays\n-    if (n < 7)\n+    if (n <= 7)\n       {\n \tfor (int i = start + 1; i < start + n; i++)\n-\t  for (int j = i; j > 0 && cmp(a[j - 1], a[j]) > 0; j--)\n+\t  for (int j = i; j > 0 && a[j - 1] > a[j]; j--)\n \t    swap(j, j - 1, a);\n \treturn;\n       }\n@@ -1491,7 +1471,7 @@ private static void qsort(float[]a, int start, int n)\n \n     for (;;)\n       {\n-\twhile (pb <= pc && (r = cmp(a[pb], a[pv])) <= 0)\n+\twhile (pb <= pc && (r = a[pb] - a[pv]) <= 0)\n \t  {\n \t    if (r == 0)\n \t      {\n@@ -1500,7 +1480,7 @@ private static void qsort(float[]a, int start, int n)\n \t      }\n \t    pb++;\n \t  }\n-\twhile (pc >= pb && (r = cmp(a[pc], a[pv])) >= 0)\n+\twhile (pc >= pb && (r = a[pc] - a[pv]) >= 0)\n \t  {\n \t    if (r == 0)\n \t      {\n@@ -1553,16 +1533,11 @@ public static void sort(int[] a, int fromIndex, int toIndex)\n     qsort(a, fromIndex, toIndex);\n   }\n \n-  private static long cmp(int i, int j)\n-  {\n-    return (long) i - (long) j;\n-  }\n-\n   private static int med3(int a, int b, int c, int[]d)\n   {\n-    return cmp(d[a], d[b]) < 0 ?\n-      (cmp(d[b], d[c]) < 0 ? b : cmp(d[a], d[c]) < 0 ? c : a)\n-      : (cmp(d[b], d[c]) > 0 ? b : cmp(d[a], d[c]) > 0 ? c : a);\n+    return d[a] < d[b] ? \n+               (d[b] < d[c] ? b : d[a] < d[c] ? c : a)\n+\t     : (d[b] > d[c] ? b : d[a] > d[c] ? c : a);\n   }\n \n   private static void swap(int i, int j, int[]a)\n@@ -1575,10 +1550,10 @@ private static void swap(int i, int j, int[]a)\n   private static void qsort(int[]a, int start, int n)\n   {\n     // use an insertion sort on small arrays\n-    if (n < 7)\n+    if (n <= 7)\n       {\n \tfor (int i = start + 1; i < start + n; i++)\n-\t  for (int j = i; j > 0 && cmp(a[j - 1], a[j]) > 0; j--)\n+\t  for (int j = i; j > 0 && a[j - 1] > a[j]; j--)\n \t    swap(j, j - 1, a);\n \treturn;\n       }\n@@ -1600,7 +1575,7 @@ private static void qsort(int[]a, int start, int n)\n       }\n \n     int pa, pb, pc, pd, pv;\n-    long r;\n+    int r;\n \n     pv = start;\n     swap(pv, pm, a);\n@@ -1609,7 +1584,7 @@ private static void qsort(int[]a, int start, int n)\n \n     for (;;)\n       {\n-\twhile (pb <= pc && (r = cmp(a[pb], a[pv])) <= 0)\n+\twhile (pb <= pc && (r = a[pb] - a[pv]) <= 0)\n \t  {\n \t    if (r == 0)\n \t      {\n@@ -1618,7 +1593,7 @@ private static void qsort(int[]a, int start, int n)\n \t      }\n \t    pb++;\n \t  }\n-\twhile (pc >= pb && (r = cmp(a[pc], a[pv])) >= 0)\n+\twhile (pc >= pb && (r = a[pc] - a[pv]) >= 0)\n \t  {\n \t    if (r == 0)\n \t      {\n@@ -1671,16 +1646,11 @@ public static void sort(long[] a, int fromIndex, int toIndex)\n     qsort(a, fromIndex, toIndex);\n   }\n \n-  // The \"cmp\" method has been removed from here and replaced with direct\n-  // compares in situ, to avoid problems with overflow if the difference\n-  // between two numbers is bigger than a long will hold.\n-  // One particular change as a result is the use of r1 and r2 in qsort\n-\n   private static int med3(int a, int b, int c, long[]d)\n   {\n-    return d[a] < d[b] ?\n-      (d[b] < d[c] ? b : d[a] < d[c] ? c : a)\n-      : (d[b] > d[c] ? b : d[a] > d[c] ? c : a);\n+    return d[a] < d[b] ? \n+               (d[b] < d[c] ? b : d[a] < d[c] ? c : a)\n+\t     : (d[b] > d[c] ? b : d[a] > d[c] ? c : a);\n   }\n \n   private static void swap(int i, int j, long[]a)\n@@ -1693,7 +1663,7 @@ private static void swap(int i, int j, long[]a)\n   private static void qsort(long[]a, int start, int n)\n   {\n     // use an insertion sort on small arrays\n-    if (n < 7)\n+    if (n <= 7)\n       {\n \tfor (int i = start + 1; i < start + n; i++)\n \t  for (int j = i; j > 0 && a[j - 1] > a[j]; j--)\n@@ -1718,7 +1688,7 @@ private static void qsort(long[]a, int start, int n)\n       }\n \n     int pa, pb, pc, pd, pv;\n-    long r1, r2;\n+    long r;\n \n     pv = start;\n     swap(pv, pm, a);\n@@ -1727,18 +1697,18 @@ private static void qsort(long[]a, int start, int n)\n \n     for (;;)\n       {\n-\twhile (pb <= pc && (r1 = a[pb]) <= (r2 = a[pv]))\n+\twhile (pb <= pc && (r = a[pb] - a[pv]) <= 0)\n \t  {\n-\t    if (r1 == r2)\n+\t    if (r == 0)\n \t      {\n \t\tswap(pa, pb, a);\n \t\tpa++;\n \t      }\n \t    pb++;\n \t  }\n-\twhile (pc >= pb && (r1 = a[pc]) >= (r2 = a[pv]))\n+\twhile (pc >= pb && (r = a[pc] - a[pv]) >= 0)\n \t  {\n-\t    if (r1 == r2)\n+\t    if (r == 0)\n \t      {\n \t\tswap(pc, pd, a);\n \t\tpd--;\n@@ -1789,16 +1759,11 @@ public static void sort(short[] a, int fromIndex, int toIndex)\n     qsort(a, fromIndex, toIndex);\n   }\n \n-  private static int cmp(short i, short j)\n-  {\n-    return i - j;\n-  }\n-\n   private static int med3(int a, int b, int c, short[]d)\n   {\n-    return cmp(d[a], d[b]) < 0 ?\n-      (cmp(d[b], d[c]) < 0 ? b : cmp(d[a], d[c]) < 0 ? c : a)\n-      : (cmp(d[b], d[c]) > 0 ? b : cmp(d[a], d[c]) > 0 ? c : a);\n+    return d[a] < d[b] ? \n+               (d[b] < d[c] ? b : d[a] < d[c] ? c : a)\n+\t     : (d[b] > d[c] ? b : d[a] > d[c] ? c : a);\n   }\n \n   private static void swap(int i, int j, short[]a)\n@@ -1811,10 +1776,10 @@ private static void swap(int i, int j, short[]a)\n   private static void qsort(short[]a, int start, int n)\n   {\n     // use an insertion sort on small arrays\n-    if (n < 7)\n+    if (n <= 7)\n       {\n \tfor (int i = start + 1; i < start + n; i++)\n-\t  for (int j = i; j > 0 && cmp(a[j - 1], a[j]) > 0; j--)\n+\t  for (int j = i; j > 0 && a[j - 1] > a[j]; j--)\n \t    swap(j, j - 1, a);\n \treturn;\n       }\n@@ -1845,7 +1810,7 @@ private static void qsort(short[]a, int start, int n)\n \n     for (;;)\n       {\n-\twhile (pb <= pc && (r = cmp(a[pb], a[pv])) <= 0)\n+\twhile (pb <= pc && (r = a[pb] - a[pv]) <= 0)\n \t  {\n \t    if (r == 0)\n \t      {\n@@ -1854,7 +1819,7 @@ private static void qsort(short[]a, int start, int n)\n \t      }\n \t    pb++;\n \t  }\n-\twhile (pc >= pb && (r = cmp(a[pc], a[pv])) >= 0)\n+\twhile (pc >= pb && (r = a[pc] - a[pv]) >= 0)\n \t  {\n \t    if (r == 0)\n \t      {"}]}