{"sha": "0cb4334ee9bae97eb674ffd6bb26088fe7f25865", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGNiNDMzNGVlOWJhZTk3ZWI2NzRmZmQ2YmIyNjA4OGZlN2YyNTg2NQ==", "commit": {"author": {"name": "H.J. Lu", "email": "hongjiu.lu@intel.com", "date": "2004-12-02T21:49:00Z"}, "committer": {"name": "H.J. Lu", "email": "hjl@gcc.gnu.org", "date": "2004-12-02T21:49:00Z"}, "message": "re PR bootstrap/18532 (libgcc.mk isn't parallel build safe for multilib)\n\n2004-12-02  H.J. Lu  <hongjiu.lu@intel.com>\n\n\tPR bootstrap/18532\n\t* mklibgcc.in: Build one set of EXTRA_MULTILIB_PARTS for\n\tmultilib at a time. Don't build the default set. Don't add\n\tEXTRA_MULTILIB_PARTS to shared libunwind nor libgcc. Remove\n\tfilter for shared libunwind and libgcc.\n\nFrom-SVN: r91663", "tree": {"sha": "2ecc2c612cc4f4ef8d7a8cf6befe1dc94b8cd532", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2ecc2c612cc4f4ef8d7a8cf6befe1dc94b8cd532"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0cb4334ee9bae97eb674ffd6bb26088fe7f25865", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0cb4334ee9bae97eb674ffd6bb26088fe7f25865", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0cb4334ee9bae97eb674ffd6bb26088fe7f25865", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0cb4334ee9bae97eb674ffd6bb26088fe7f25865/comments", "author": {"login": "hjl-tools", "id": 1072356, "node_id": "MDQ6VXNlcjEwNzIzNTY=", "avatar_url": "https://avatars.githubusercontent.com/u/1072356?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hjl-tools", "html_url": "https://github.com/hjl-tools", "followers_url": "https://api.github.com/users/hjl-tools/followers", "following_url": "https://api.github.com/users/hjl-tools/following{/other_user}", "gists_url": "https://api.github.com/users/hjl-tools/gists{/gist_id}", "starred_url": "https://api.github.com/users/hjl-tools/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hjl-tools/subscriptions", "organizations_url": "https://api.github.com/users/hjl-tools/orgs", "repos_url": "https://api.github.com/users/hjl-tools/repos", "events_url": "https://api.github.com/users/hjl-tools/events{/privacy}", "received_events_url": "https://api.github.com/users/hjl-tools/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "14c473b90e3b5f2ef495b961a4f04e1b5ae91e09", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/14c473b90e3b5f2ef495b961a4f04e1b5ae91e09", "html_url": "https://github.com/Rust-GCC/gccrs/commit/14c473b90e3b5f2ef495b961a4f04e1b5ae91e09"}], "stats": {"total": 86, "additions": 53, "deletions": 33}, "files": [{"sha": "7acdb818ef15e3b7be99d4fb86a4056e769c57e0", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0cb4334ee9bae97eb674ffd6bb26088fe7f25865/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0cb4334ee9bae97eb674ffd6bb26088fe7f25865/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=0cb4334ee9bae97eb674ffd6bb26088fe7f25865", "patch": "@@ -1,3 +1,11 @@\n+2004-12-02  H.J. Lu  <hongjiu.lu@intel.com>\n+\n+\tPR bootstrap/18532\n+\t* mklibgcc.in: Build one set of EXTRA_MULTILIB_PARTS for\n+\tmultilib at a time. Don't build the default set. Don't add\n+\tEXTRA_MULTILIB_PARTS to shared libunwind nor libgcc. Remove\n+\tfilter for shared libunwind and libgcc.\n+\n 2004-12-02  Roger Sayle  <roger@eyesopen.com>\n \n \tPR target/18759"}, {"sha": "916a0f5e3f0490ce10187eaf38c1704240c63a52", "filename": "gcc/mklibgcc.in", "status": "modified", "additions": 45, "deletions": 33, "changes": 78, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0cb4334ee9bae97eb674ffd6bb26088fe7f25865/gcc%2Fmklibgcc.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0cb4334ee9bae97eb674ffd6bb26088fe7f25865/gcc%2Fmklibgcc.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fmklibgcc.in?ref=0cb4334ee9bae97eb674ffd6bb26088fe7f25865", "patch": "@@ -160,6 +160,11 @@ for ml in $MULTILIBS; do\n   libgcc_s_so=\n   libunwind_a=\n   libunwind_so=\n+  if [ \"$dir\" = . ]; then\n+    suffix=\n+  else\n+    suffix=`echo $dir | sed s,/,_,g`\n+  fi\n \n   if [ \"$LIBUNWIND\" ]; then\n     libunwind_a=$dir/libunwind.a\n@@ -177,7 +182,6 @@ for ml in $MULTILIBS; do\n \t  libunwind_soname=libunwind\n \tfi\n       else\n-        suffix=`echo $dir | sed s,/,_,g`\n \tlibgcc_eh_a=$dir/libgcc_eh.a\n \tlibgcc_s_so_base=$dir/libgcc_s_${suffix}\n \tlibgcc_s_so=${libgcc_s_so_base}${SHLIB_EXT}\n@@ -655,37 +659,45 @@ for ml in $MULTILIBS; do\n   done\n \n   # EXTRA_MULTILIB_PARTS.\n-  echo\n-  for f in $EXTRA_MULTILIB_PARTS; do\n-    case $dir in\n-    .) out=$f ; t= ;;\n-    *) out=$dir/$f ; t=$dir/ ;;\n-    esac\n-    case $out in\n-    # Prevent `make' from interpreting $out as a macro assignment\n-    *'$(EQ)'*) targ=\"T_TARGET=$out T_TARGET\" ;;\n-    *) targ=$out ;;\n-    esac\n-\n-    echo $out: stmp-dirs\n-    echo \"\t$make_compile\" \\\\\n-    echo '\t  LIBGCC2_CFLAGS=\"$(LIBGCC2_CFLAGS)' $flags '\" ' \\\\\n-    echo '\t  MULTILIB_CFLAGS=\"'$flags'\"' T=$t $targ\n-    echo \"all: $out\"\n-\n-    # Make libunwind.so and libgcc_s.so depend on these, since they are\n-    # likely to be implicitly used by the link process.  However, we must\n-    # then arrange to remove them from the explicit object list generated\n-    # from $^ - see below.\n-    if [ \"$libgcc_s_so\" ]; then\n-      libgcc_s_so_extra=\"$libgcc_s_so_extra $out\"\n-      echo \"$libgcc_s_so: $out\"\n-    fi\n-    if [ \"$libunwind_so\" ]; then\n-      libunwind_so_extra=\"$libunwind_so_extra $out\"\n-      echo \"$libunwind_so: $out\"\n+  if [ -n \"$EXTRA_MULTILIB_PARTS\" ]; then\n+    # Each of the EXTRA_MULTILIB_PARTS is built by recursive invocation\n+    # of the parent Makefile.  We must do this just once for each\n+    # multilib, passing it all the EXTRA_MULTILIB_PARTS as\n+    # simultaneous goal targets, so that rules which cannot execute\n+    # simultaneously are properly serialized.\n+    \n+    # We don't need to build the default ones since they have been\n+    # built before we get here.\n+    if [ $dir != \".\" ]; then\n+      extra=\n+      t=$dir/\n+      echo\n+      for f in $EXTRA_MULTILIB_PARTS; do\n+\tout=$dir/$f\n+\tcase $out in\n+\t# Prevent `make' from interpreting $out as a macro assignment\n+\t*'$(EQ)'*) targ=\"T_TARGET=$out T_TARGET\" ;;\n+\t*) targ=$out ;;\n+\tesac\n+\textra=\"$extra $targ\"\n+      done\n+\n+      echo extra$suffix: stmp-dirs\n+      echo \"\t$make_compile\" \\\\\n+      echo '\t  LIBGCC2_CFLAGS=\"$(LIBGCC2_CFLAGS)' $flags '\" ' \\\\\n+      echo '\t  MULTILIB_CFLAGS=\"'$flags'\"' T=$t $extra\n+      echo \"all: extra$suffix\"\n+\n+      # Make libunwind.so and libgcc_s.so depend on these, since they\n+      # are likely to be implicitly used by the link process.\n+      if [ \"$libgcc_s_so\" ]; then\n+\techo \"$libgcc_s_so: extra$suffix\"\n+\tfi\n+      if [ \"$libunwind_so\" ]; then\n+\techo \"$libunwind_so: extra$suffix\"\n+      fi\n     fi\n-  done\n+  fi\n \n   # Library build rules.\n   dir=`echo ${ml} | sed -e 's/;.*$//' -e 's/=/$(EQ)/g'`\n@@ -760,7 +772,7 @@ EOF\n     echo \"\t$SHLIB_LINK\" \\\n \t | sed -e \"s%@multilib_flags@%$flags%g\" \\\n \t       -e \"s%@multilib_dir@%$dir%g\" \\\n-\t       -e \"s%@shlib_objs@%\\$(filter-out $libgcc_s_so_extra,\\$(objects))%g\" \\\n+\t       -e \"s%@shlib_objs@%\\$(objects)%g\" \\\n \t       -e \"s%@shlib_base_name@%$libgcc_s_so_base%g\" \\\n \t       -e \"s%@shlib_so_name@%$libgcc_s_soname%g\" \\\n \t       -e \"s%@shlib_map_file@%$mapfile%g\" \\\n@@ -775,7 +787,7 @@ EOF\n     echo \"\t$SHLIBUNWIND_LINK\" \\\n \t   | sed -e \"s%@multilib_flags@%$flags%g\" \\\n \t\t -e \"s%@multilib_dir@%$dir%g\" \\\n-\t\t -e \"s%@shlib_objs@%\\$(filter-out $libunwind_so_extra,\\$(objects))%g\" \\\n+\t\t -e \"s%@shlib_objs@%\\$(objects)%g\" \\\n \t\t -e \"s%@shlib_base_name@%$libunwind_so_base%g\" \\\n \t\t -e \"s%@shlib_so_name@%$libunwind_soname%g\" \\\n \t\t -e \"s%@shlib_dir@%$shlib_dir%g\" \\"}]}