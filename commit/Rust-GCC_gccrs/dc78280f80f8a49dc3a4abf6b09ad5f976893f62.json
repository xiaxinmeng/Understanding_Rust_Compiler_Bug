{"sha": "dc78280f80f8a49dc3a4abf6b09ad5f976893f62", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZGM3ODI4MGY4MGY4YTQ5ZGMzYTRhYmY2YjA5YWQ1Zjk3Njg5M2Y2Mg==", "commit": {"author": {"name": "David S. Miller", "email": "davem@davemloft.net", "date": "2011-10-06T06:28:35Z"}, "committer": {"name": "David S. Miller", "email": "davem@gcc.gnu.org", "date": "2011-10-06T06:28:35Z"}, "message": "Add support for lzd and popc instructions on sparc.\n\ngcc/\n\n\t* config/sparc/sparc.opt (POPC): New option.\n\t* doc/invoke.texi: Document it.\n\t* config/sparc/sparc.c (sparc_option_override): Enable MASK_POPC by\n\tdefault on Niagara-2 and later.\n\t* config/sparc/sparc.h (CLZ_DEFINED_VALUE_AT_ZERO): Define.\n\t* config/sparc/sparc.md (SIDI): New mode iterator.\n\t(ffsdi2): Delete commented out pattern and comments.\n\t(popcount<mode>2, clz<mode>2): New expanders.\n\t(*popcount<mode>_sp64, popcountsi_v8plus, popcountdi_v8plus,\n\t*clzdi_sp64, clzdi_v8plus, *clzsi_sp64, clzsi_v8plus): New insns.\n\ngcc/testsuite/\n\n\t* gcc.target/sparc/lzd.c: New test.\n\t* gcc.target/sparc/popc.c: New test.\n\nFrom-SVN: r179591", "tree": {"sha": "485b7b1fdbf0b16f98fdb6ab036573b4f9eea481", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/485b7b1fdbf0b16f98fdb6ab036573b4f9eea481"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/dc78280f80f8a49dc3a4abf6b09ad5f976893f62", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dc78280f80f8a49dc3a4abf6b09ad5f976893f62", "html_url": "https://github.com/Rust-GCC/gccrs/commit/dc78280f80f8a49dc3a4abf6b09ad5f976893f62", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dc78280f80f8a49dc3a4abf6b09ad5f976893f62/comments", "author": {"login": "davem330", "id": 1053866, "node_id": "MDQ6VXNlcjEwNTM4NjY=", "avatar_url": "https://avatars.githubusercontent.com/u/1053866?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davem330", "html_url": "https://github.com/davem330", "followers_url": "https://api.github.com/users/davem330/followers", "following_url": "https://api.github.com/users/davem330/following{/other_user}", "gists_url": "https://api.github.com/users/davem330/gists{/gist_id}", "starred_url": "https://api.github.com/users/davem330/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davem330/subscriptions", "organizations_url": "https://api.github.com/users/davem330/orgs", "repos_url": "https://api.github.com/users/davem330/repos", "events_url": "https://api.github.com/users/davem330/events{/privacy}", "received_events_url": "https://api.github.com/users/davem330/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "5f4992ca45497afb4d6fad31f587045121174ffe", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5f4992ca45497afb4d6fad31f587045121174ffe", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5f4992ca45497afb4d6fad31f587045121174ffe"}], "stats": {"total": 188, "additions": 170, "deletions": 18}, "files": [{"sha": "a3cd40470894117a289bd261ab2f8e8b8d3aa800", "filename": "gcc/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dc78280f80f8a49dc3a4abf6b09ad5f976893f62/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dc78280f80f8a49dc3a4abf6b09ad5f976893f62/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=dc78280f80f8a49dc3a4abf6b09ad5f976893f62", "patch": "@@ -1,3 +1,16 @@\n+2011-10-05  David S. Miller  <davem@davemloft.net>\n+\n+\t* config/sparc/sparc.opt (POPC): New option.\n+\t* doc/invoke.texi: Document it.\n+\t* config/sparc/sparc.c (sparc_option_override): Enable MASK_POPC by\n+\tdefault on Niagara-2 and later.\n+\t* config/sparc/sparc.h (CLZ_DEFINED_VALUE_AT_ZERO): Define.\n+\t* config/sparc/sparc.md (SIDI): New mode iterator.\n+\t(ffsdi2): Delete commented out pattern and comments.\n+\t(popcount<mode>2, clz<mode>2): New expanders.\n+\t(*popcount<mode>_sp64, popcountsi_v8plus, popcountdi_v8plus,\n+\t*clzdi_sp64, clzdi_v8plus, *clzsi_sp64, clzsi_v8plus): New insns.\n+\n 2011-10-06  Artjoms Sinkarovs  <artyom.shinkaroff@gmail.com>\n \n \tPR middle-end/50607"}, {"sha": "9606f68d9b5b1e31601ec193b24da8733ef85bc6", "filename": "gcc/config/sparc/sparc.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dc78280f80f8a49dc3a4abf6b09ad5f976893f62/gcc%2Fconfig%2Fsparc%2Fsparc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dc78280f80f8a49dc3a4abf6b09ad5f976893f62/gcc%2Fconfig%2Fsparc%2Fsparc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsparc.c?ref=dc78280f80f8a49dc3a4abf6b09ad5f976893f62", "patch": "@@ -774,11 +774,11 @@ sparc_option_override (void)\n     { MASK_ISA,\n       MASK_V9|MASK_DEPRECATED_V8_INSNS},\n     /* UltraSPARC T2 */\n-    { MASK_ISA, MASK_V9|MASK_VIS2},\n+    { MASK_ISA, MASK_V9|MASK_POPC|MASK_VIS2},\n     /* UltraSPARC T3 */\n-    { MASK_ISA, MASK_V9|MASK_VIS2|MASK_VIS3|MASK_FMAF},\n+    { MASK_ISA, MASK_V9|MASK_POPC|MASK_VIS2|MASK_VIS3|MASK_FMAF},\n     /* UltraSPARC T4 */\n-    { MASK_ISA, MASK_V9|MASK_VIS2|MASK_VIS3|MASK_FMAF},\n+    { MASK_ISA, MASK_V9|MASK_POPC|MASK_VIS2|MASK_VIS3|MASK_FMAF},\n   };\n   const struct cpu_table *cpu;\n   unsigned int i;"}, {"sha": "0642ff2f9e8a2a29a6e9cb6ef7bbeddcd857a118", "filename": "gcc/config/sparc/sparc.h", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dc78280f80f8a49dc3a4abf6b09ad5f976893f62/gcc%2Fconfig%2Fsparc%2Fsparc.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dc78280f80f8a49dc3a4abf6b09ad5f976893f62/gcc%2Fconfig%2Fsparc%2Fsparc.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsparc.h?ref=dc78280f80f8a49dc3a4abf6b09ad5f976893f62", "patch": "@@ -1608,6 +1608,11 @@ do {\t\t\t\t\t\t\t\t\t   \\\n    is done just by pretending it is already truncated.  */\n #define TRULY_NOOP_TRUNCATION(OUTPREC, INPREC) 1\n \n+/* For SImode, we make sure the top 32-bits of the register are clear and\n+   then we subtract 32 from the lzd instruction result.  */\n+#define CLZ_DEFINED_VALUE_AT_ZERO(MODE, VALUE) \\\n+  ((VALUE) = ((MODE) == SImode ? 32 : 64), 1)\n+\n /* Given a comparison code (EQ, NE, etc.) and the first operand of a COMPARE,\n    return the mode to be used for the comparison.  For floating-point,\n    CCFP[E]mode is used.  CC_NOOVmode should be used when the first operand"}, {"sha": "15552b2b1c9d24ae53e94abb011273fb9b3f3aa1", "filename": "gcc/config/sparc/sparc.md", "status": "modified", "additions": 94, "deletions": 14, "changes": 108, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dc78280f80f8a49dc3a4abf6b09ad5f976893f62/gcc%2Fconfig%2Fsparc%2Fsparc.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dc78280f80f8a49dc3a4abf6b09ad5f976893f62/gcc%2Fconfig%2Fsparc%2Fsparc.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsparc.md?ref=dc78280f80f8a49dc3a4abf6b09ad5f976893f62", "patch": "@@ -206,6 +206,8 @@\n \n (define_mode_iterator V64N8 [V2SI V4HI])\n \n+(define_mode_iterator SIDI [SI DI])\n+\n ;; The upper 32 fp regs on the v9 can't hold SFmode values.  To deal with this\n ;; a second register class, EXTRA_FP_REGS, exists for the v9 chip.  The name\n ;; is a bit of a misnomer as it covers all 64 fp regs.  The corresponding\n@@ -6804,21 +6806,99 @@\n   [(set_attr \"type\" \"multi\")\n    (set_attr \"length\" \"8\")])\n \n-;; ??? This should be a define expand, so that the extra instruction have\n-;; a chance of being optimized away.\n-\n-;; Disabled because none of the UltraSPARCs implement popc.  The HAL R1\n-;; does, but no one uses that and we don't have a switch for it.\n-;\n-;(define_insn \"ffsdi2\"\n-;  [(set (match_operand:DI 0 \"register_operand\" \"=&r\")\n-;\t(ffs:DI (match_operand:DI 1 \"register_operand\" \"r\")))\n-;   (clobber (match_scratch:DI 2 \"=&r\"))]\n-;  \"TARGET_ARCH64\"\n-;  \"neg\\t%1, %2\\;xnor\\t%1, %2, %2\\;popc\\t%2, %0\\;movzr\\t%1, 0, %0\"\n-;  [(set_attr \"type\" \"multi\")\n-;   (set_attr \"length\" \"4\")])\n+(define_expand \"popcount<mode>2\"\n+  [(set (match_operand:SIDI 0 \"register_operand\" \"\")\n+        (popcount:SIDI (match_operand:SIDI 1 \"register_operand\" \"\")))]\n+  \"TARGET_POPC\"\n+{\n+  if (! TARGET_ARCH64)\n+    {\n+      emit_insn (gen_popcount<mode>_v8plus (operands[0], operands[1]));\n+      DONE;\n+    }\n+})\n+\n+(define_insn \"*popcount<mode>_sp64\"\n+  [(set (match_operand:SIDI 0 \"register_operand\" \"=r\")\n+        (popcount:SIDI (match_operand:SIDI 1 \"register_operand\" \"r\")))]\n+  \"TARGET_POPC && TARGET_ARCH64\"\n+  \"popc\\t%1, %0\")\n \n+(define_insn \"popcountsi_v8plus\"\n+  [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n+        (popcount:SI (match_operand:SI 1 \"register_operand\" \"r\")))]\n+  \"TARGET_POPC && ! TARGET_ARCH64\"\n+{\n+  if (sparc_check_64 (operands[1], insn) <= 0)\n+    output_asm_insn (\"srl\\t%1, 0, %1\", operands);\n+  return \"popc\\t%1, %0\";\n+}\n+  [(set_attr \"type\" \"multi\")\n+   (set_attr \"length\" \"2\")])\n+\n+(define_insn \"popcountdi_v8plus\"\n+  [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n+        (popcount:DI (match_operand:DI 1 \"register_operand\" \"r\")))\n+   (clobber (match_scratch:SI 2 \"=&h\"))]\n+  \"TARGET_POPC && ! TARGET_ARCH64\"\n+{\n+  if (sparc_check_64 (operands[1], insn) <= 0)\n+    output_asm_insn (\"srl\\t%L1, 0, %L1\", operands);\n+  return \"sllx\\t%H1, 32, %2\\n\\tor\\t%L1, %2, %2\\n\\tpopc\\t%2, %L0\\n\\tclr\\t%H0\";\n+}\n+  [(set_attr \"type\" \"multi\")\n+   (set_attr \"length\" \"5\")])\n+\n+(define_expand \"clz<mode>2\"\n+  [(set (match_operand:SIDI 0 \"register_operand\" \"\")\n+        (clz:SIDI (match_operand:SIDI 1 \"register_operand\" \"\")))]\n+  \"TARGET_VIS3\"\n+{\n+  if (! TARGET_ARCH64)\n+    {\n+      emit_insn (gen_clz<mode>_v8plus (operands[0], operands[1]));\n+      DONE;\n+    }\n+})\n+\n+(define_insn \"*clzdi_sp64\"\n+  [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n+        (clz:DI (match_operand:DI 1 \"register_operand\" \"r\")))]\n+  \"TARGET_VIS3 && TARGET_ARCH64\"\n+  \"lzd\\t%1, %0\")\n+\n+(define_insn \"clzdi_v8plus\"\n+  [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n+        (clz:DI (match_operand:DI 1 \"register_operand\" \"r\")))\n+   (clobber (match_scratch:SI 2 \"=&h\"))]\n+  \"TARGET_VIS3 && ! TARGET_ARCH64\"\n+{\n+  if (sparc_check_64 (operands[1], insn) <= 0)\n+    output_asm_insn (\"srl\\t%L1, 0, %L1\", operands);\n+  return \"sllx\\t%H1, 32, %2\\n\\tor\\t%L1, %2, %2\\n\\tlzd\\t%2, %L0\\n\\tclr\\t%H0\";\n+}\n+  [(set_attr \"type\" \"multi\")\n+   (set_attr \"length\" \"5\")])\n+\n+(define_insn \"*clzsi_sp64\"\n+  [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n+        (clz:SI (match_operand:SI 1 \"register_operand\" \"r\")))]\n+  \"TARGET_VIS3 && TARGET_ARCH64\"\n+  \"lzd\\t%1, %0\\n\\tsub\\t%0, 32, %0\"\n+  [(set_attr \"type\" \"multi\")\n+   (set_attr \"length\" \"2\")])\n+\n+(define_insn \"clzsi_v8plus\"\n+  [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n+        (clz:SI (match_operand:SI 1 \"register_operand\" \"r\")))]\n+  \"TARGET_VIS3 && ! TARGET_ARCH64\"\n+{\n+  if (sparc_check_64 (operands[1], insn) <= 0)\n+    output_asm_insn (\"srl\\t%1, 0, %1\", operands);\n+  return \"lzd\\t%1, %0\\n\\tsub\\t%0, 32, %0\";\n+}\n+  [(set_attr \"type\" \"multi\")\n+   (set_attr \"length\" \"3\")])\n \n \f\n ;; Peepholes go at the end."}, {"sha": "131db4277d9f6061cc2306f9b66aca08e9e72abb", "filename": "gcc/config/sparc/sparc.opt", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dc78280f80f8a49dc3a4abf6b09ad5f976893f62/gcc%2Fconfig%2Fsparc%2Fsparc.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dc78280f80f8a49dc3a4abf6b09ad5f976893f62/gcc%2Fconfig%2Fsparc%2Fsparc.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsparc.opt?ref=dc78280f80f8a49dc3a4abf6b09ad5f976893f62", "patch": "@@ -73,6 +73,10 @@ mfmaf\n Target Report Mask(FMAF)\n Use UltraSPARC Fused Multiply-Add extensions\n \n+mpopc\n+Target Report Mask(POPC)\n+Use UltraSPARC Population-Count instruction\n+\n mptr64\n Target Report RejectNegative Mask(PTR64)\n Pointers are 64-bit"}, {"sha": "05882840db87d8c27195b0af4d7537e80fe2ee01", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dc78280f80f8a49dc3a4abf6b09ad5f976893f62/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dc78280f80f8a49dc3a4abf6b09ad5f976893f62/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=dc78280f80f8a49dc3a4abf6b09ad5f976893f62", "patch": "@@ -882,7 +882,7 @@ See RS/6000 and PowerPC Options.\n -munaligned-doubles  -mno-unaligned-doubles @gol\n -mv8plus  -mno-v8plus  -mvis  -mno-vis @gol\n -mvis2  -mno-vis2  -mvis3  -mno-vis3 @gol\n--mfmaf  -mno-fmaf}\n+-mfmaf  -mno-fmaf  -mpopc  -mno-popc}\n \n @emph{SPU Options}\n @gccoptlist{-mwarn-reloc -merror-reloc @gol\n@@ -17494,6 +17494,15 @@ default is @option{-mvis3} when targetting a cpu that supports such\n instructions, such as niagara-3 and later.  Setting @option{-mvis3}\n also sets @option{-mvis2} and @option{-mvis}.\n \n+@item -mpopc\n+@itemx -mno-popc\n+@opindex mpopc\n+@opindex mno-popc\n+With @option{-mpopc}, GCC generates code that takes advantage of the UltraSPARC\n+population count instruction.  The default is @option{-mpopc}\n+when targetting a cpu that supports such instructions, such as Niagara-2 and\n+later.\n+\n @item -mfmaf\n @itemx -mno-fmaf\n @opindex mfmaf"}, {"sha": "cbd8f7147bf46d0512984f73eabe0de64f0c8ed8", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dc78280f80f8a49dc3a4abf6b09ad5f976893f62/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dc78280f80f8a49dc3a4abf6b09ad5f976893f62/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=dc78280f80f8a49dc3a4abf6b09ad5f976893f62", "patch": "@@ -1,3 +1,8 @@\n+2011-10-05  David S. Miller  <davem@davemloft.net>\n+\n+\t* gcc.target/sparc/lzd.c: New test.\n+\t* gcc.target/sparc/popc.c: New test.\n+\n 2011-10-05  Uros Bizjak  <ubizjak@gmail.com>\n \n \t* gcc.dg/strlenopt-21.c (dg-options): Remove -fdump-tree-optimized."}, {"sha": "a8978296300f3ff0f439f66f5b6afaece38fde42", "filename": "gcc/testsuite/gcc.target/sparc/lzd.c", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dc78280f80f8a49dc3a4abf6b09ad5f976893f62/gcc%2Ftestsuite%2Fgcc.target%2Fsparc%2Flzd.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dc78280f80f8a49dc3a4abf6b09ad5f976893f62/gcc%2Ftestsuite%2Fgcc.target%2Fsparc%2Flzd.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fsparc%2Flzd.c?ref=dc78280f80f8a49dc3a4abf6b09ad5f976893f62", "patch": "@@ -0,0 +1,18 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mcpu=niagara3\" } */\n+int test_clz(int a)\n+{\n+  return __builtin_clz(a);\n+}\n+\n+long test_clzl(long a)\n+{\n+  return __builtin_clzl(a);\n+}\n+\n+long long test_clzll(long long a)\n+{\n+  return __builtin_clzll(a);\n+}\n+\n+/* { dg-final { scan-assembler-times \"lzd\\t%\" 3 } } */"}, {"sha": "5442a610fa2deb5d5b74255a6c73798c141516e5", "filename": "gcc/testsuite/gcc.target/sparc/popc.c", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dc78280f80f8a49dc3a4abf6b09ad5f976893f62/gcc%2Ftestsuite%2Fgcc.target%2Fsparc%2Fpopc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dc78280f80f8a49dc3a4abf6b09ad5f976893f62/gcc%2Ftestsuite%2Fgcc.target%2Fsparc%2Fpopc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fsparc%2Fpopc.c?ref=dc78280f80f8a49dc3a4abf6b09ad5f976893f62", "patch": "@@ -0,0 +1,18 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mcpu=niagara2\" } */\n+int test_popcount(int a)\n+{\n+  return __builtin_popcount(a);\n+}\n+\n+long test_popcountl(long a)\n+{\n+  return __builtin_popcountl(a);\n+}\n+\n+long long test_popcountll(long long a)\n+{\n+  return __builtin_popcountll(a);\n+}\n+\n+/* { dg-final { scan-assembler-times \"popc\\t%\" 3 } } */"}]}