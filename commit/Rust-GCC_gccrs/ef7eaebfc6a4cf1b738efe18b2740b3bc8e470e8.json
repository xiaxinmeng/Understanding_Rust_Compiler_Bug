{"sha": "ef7eaebfc6a4cf1b738efe18b2740b3bc8e470e8", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWY3ZWFlYmZjNmE0Y2YxYjczOGVmZTE4YjI3NDBiM2JjOGU0NzBlOA==", "commit": {"author": {"name": "Kaveh R. Ghazi", "email": "ghazi@caip.rutgers.edu", "date": "2004-10-04T00:04:58Z"}, "committer": {"name": "Kaveh Ghazi", "email": "ghazi@gcc.gnu.org", "date": "2004-10-04T00:04:58Z"}, "message": "builtins.c (expand_builtin_memcpy): Delete duplicate code and make the first parameter the expression not the arglist.\n\n\t* builtins.c (expand_builtin_memcpy): Delete duplicate code\n\tand make the first parameter the expression not the arglist.\n\nFrom-SVN: r88466", "tree": {"sha": "03acb193b8a3659bdefa3a89754e8f7fb85908e8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/03acb193b8a3659bdefa3a89754e8f7fb85908e8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ef7eaebfc6a4cf1b738efe18b2740b3bc8e470e8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ef7eaebfc6a4cf1b738efe18b2740b3bc8e470e8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ef7eaebfc6a4cf1b738efe18b2740b3bc8e470e8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ef7eaebfc6a4cf1b738efe18b2740b3bc8e470e8/comments", "author": null, "committer": null, "parents": [{"sha": "41775162a7e2b03f6c1f9324370dacb71527151f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/41775162a7e2b03f6c1f9324370dacb71527151f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/41775162a7e2b03f6c1f9324370dacb71527151f"}], "stats": {"total": 30, "additions": 12, "deletions": 18}, "files": [{"sha": "b4e62b7dc1770a889999e611f5b10d1be04488ec", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ef7eaebfc6a4cf1b738efe18b2740b3bc8e470e8/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ef7eaebfc6a4cf1b738efe18b2740b3bc8e470e8/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=ef7eaebfc6a4cf1b738efe18b2740b3bc8e470e8", "patch": "@@ -1,3 +1,8 @@\n+2004-10-03  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n+\n+\t* builtins.c (expand_builtin_memcpy): Delete duplicate code\n+\tand make the first parameter the expression not the arglist.\n+\n 2004-10-03  Ulrich Weigand  <uweigand@de.ibm.com>\n \n \t* expr.c (expand_expr_addr_expr): Only accept Pmode or ptr_mode"}, {"sha": "08ef1b85a48c46feb7514a93446cfdc29cb0f16c", "filename": "gcc/builtins.c", "status": "modified", "additions": 7, "deletions": 18, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ef7eaebfc6a4cf1b738efe18b2740b3bc8e470e8/gcc%2Fbuiltins.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ef7eaebfc6a4cf1b738efe18b2740b3bc8e470e8/gcc%2Fbuiltins.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbuiltins.c?ref=ef7eaebfc6a4cf1b738efe18b2740b3bc8e470e8", "patch": "@@ -2544,8 +2544,9 @@ builtin_memcpy_read_str (void *data, HOST_WIDE_INT offset,\n    otherwise try to get the result in TARGET, if convenient (and in\n    mode MODE if that's convenient).  */\n static rtx\n-expand_builtin_memcpy (tree arglist, rtx target, enum machine_mode mode)\n+expand_builtin_memcpy (tree exp, rtx target, enum machine_mode mode)\n {\n+  tree arglist = TREE_OPERAND (exp, 1);\n   if (!validate_arglist (arglist,\n \t\t\t POINTER_TYPE, POINTER_TYPE, INTEGER_TYPE, VOID_TYPE))\n     return 0;\n@@ -2559,27 +2560,15 @@ expand_builtin_memcpy (tree arglist, rtx target, enum machine_mode mode)\n       unsigned int dest_align\n \t= get_pointer_alignment (dest, BIGGEST_ALIGNMENT);\n       rtx dest_mem, src_mem, dest_addr, len_rtx;\n+      tree result = fold_builtin_memcpy (exp);\n+\n+      if (result)\n+\treturn expand_expr (result, target, mode, EXPAND_NORMAL);\n \n       /* If DEST is not a pointer type, call the normal function.  */\n       if (dest_align == 0)\n \treturn 0;\n \n-      /* If the LEN parameter is zero, return DEST.  */\n-      if (integer_zerop (len))\n-\t{\n-\t  /* Evaluate and ignore SRC in case it has side-effects.  */\n-\t  expand_expr (src, const0_rtx, VOIDmode, EXPAND_NORMAL);\n-\t  return expand_expr (dest, target, mode, EXPAND_NORMAL);\n-\t}\n-\n-      /* If SRC and DEST are the same (and not volatile), return DEST.  */\n-      if (operand_equal_p (src, dest, 0))\n-\t{\n-\t  /* Evaluate and ignore LEN in case it has side-effects.  */\n-\t  expand_expr (len, const0_rtx, VOIDmode, EXPAND_NORMAL);\n-\t  return expand_expr (dest, target, mode, EXPAND_NORMAL);\n-\t}\n-\n       /* If either SRC is not a pointer type, don't do this\n          operation in-line.  */\n       if (src_align == 0)\n@@ -5490,7 +5479,7 @@ expand_builtin (tree exp, rtx target, rtx subtarget, enum machine_mode mode,\n       break;\n \n     case BUILT_IN_MEMCPY:\n-      target = expand_builtin_memcpy (arglist, target, mode);\n+      target = expand_builtin_memcpy (exp, target, mode);\n       if (target)\n \treturn target;\n       break;"}]}