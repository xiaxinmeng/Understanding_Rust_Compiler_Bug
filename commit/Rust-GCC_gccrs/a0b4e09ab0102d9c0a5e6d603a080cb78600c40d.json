{"sha": "a0b4e09ab0102d9c0a5e6d603a080cb78600c40d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTBiNGUwOWFiMDEwMmQ5YzBhNWU2ZDYwM2EwODBjYjc4NjAwYzQwZA==", "commit": {"author": {"name": "Ivan Sorokin", "email": "vanyacpp@gmail.com", "date": "2021-05-03T08:39:48Z"}, "committer": {"name": "H.J. Lu", "email": "hjl.tools@gmail.com", "date": "2021-05-05T18:42:11Z"}, "message": "x86: Build only one __cpu_model/__cpu_features2 variables\n\nGCC -O2 generated quite bad code for this function:\n\nbool\nf (void)\n{\n  return __builtin_cpu_supports(\"popcnt\")\n\t && __builtin_cpu_supports(\"ssse3\");\n}\n\nf:\n\tmovl\t__cpu_model+12(%rip), %edx\n\tmovl\t%edx, %eax\n\tshrl\t$6, %eax\n\tandl\t$1, %eax\n\tandl\t$4, %edx\n\tmovl\t$0, %edx\n\tcmove\t%edx, %eax\n\tret\n\nThe problem was caused by the fact that internally every invocation of\n__builtin_cpu_supports built a new variable __cpu_model and a new type\n__processor_model.  Because of this, GIMPLE level optimizers weren't able\nto CSE the loads of __cpu_model and optimize bit-operations properly.\n\nImprove GCC -O2 code generation by caching __cpu_model and__cpu_features2\nvariables as well as their types:\n\nf:\n        movl    __cpu_model+12(%rip), %eax\n        andl    $68, %eax\n        cmpl    $68, %eax\n        sete    %al\n        ret\n\n2021-05-05  Ivan Sorokin <vanyacpp@gmail.com>\n\t    H.J. Lu <hjl.tools@gmail.com>\n\ngcc/\n\n\tPR target/91400\n\t* config/i386/i386-builtins.c (ix86_cpu_model_type_node): New.\n\t(ix86_cpu_model_var): Likewise.\n\t(ix86_cpu_features2_type_node): Likewise.\n\t(ix86_cpu_features2_var): Likewise.\n\t(fold_builtin_cpu): Cache __cpu_model and __cpu_features2 with\n\ttheir types.\n\ngcc/testsuite/\n\n\tPR target/91400\n\t* gcc.target/i386/pr91400-1.c: New test.\n\t* gcc.target/i386/pr91400-2.c: Likewise.", "tree": {"sha": "414b094f906e09fe4fdb88dd10ae2d7f811d5048", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/414b094f906e09fe4fdb88dd10ae2d7f811d5048"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a0b4e09ab0102d9c0a5e6d603a080cb78600c40d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a0b4e09ab0102d9c0a5e6d603a080cb78600c40d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a0b4e09ab0102d9c0a5e6d603a080cb78600c40d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a0b4e09ab0102d9c0a5e6d603a080cb78600c40d/comments", "author": {"login": "sorokin", "id": 286877, "node_id": "MDQ6VXNlcjI4Njg3Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/286877?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sorokin", "html_url": "https://github.com/sorokin", "followers_url": "https://api.github.com/users/sorokin/followers", "following_url": "https://api.github.com/users/sorokin/following{/other_user}", "gists_url": "https://api.github.com/users/sorokin/gists{/gist_id}", "starred_url": "https://api.github.com/users/sorokin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sorokin/subscriptions", "organizations_url": "https://api.github.com/users/sorokin/orgs", "repos_url": "https://api.github.com/users/sorokin/repos", "events_url": "https://api.github.com/users/sorokin/events{/privacy}", "received_events_url": "https://api.github.com/users/sorokin/received_events", "type": "User", "site_admin": false}, "committer": {"login": "hjl-tools", "id": 1072356, "node_id": "MDQ6VXNlcjEwNzIzNTY=", "avatar_url": "https://avatars.githubusercontent.com/u/1072356?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hjl-tools", "html_url": "https://github.com/hjl-tools", "followers_url": "https://api.github.com/users/hjl-tools/followers", "following_url": "https://api.github.com/users/hjl-tools/following{/other_user}", "gists_url": "https://api.github.com/users/hjl-tools/gists{/gist_id}", "starred_url": "https://api.github.com/users/hjl-tools/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hjl-tools/subscriptions", "organizations_url": "https://api.github.com/users/hjl-tools/orgs", "repos_url": "https://api.github.com/users/hjl-tools/repos", "events_url": "https://api.github.com/users/hjl-tools/events{/privacy}", "received_events_url": "https://api.github.com/users/hjl-tools/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2254b3233b5bfa690e8c6e6fa923e4626a6a93d3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2254b3233b5bfa690e8c6e6fa923e4626a6a93d3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2254b3233b5bfa690e8c6e6fa923e4626a6a93d3"}], "stats": {"total": 80, "additions": 63, "deletions": 17}, "files": [{"sha": "8036aedebac9309cd7ed52cc1302758c46301968", "filename": "gcc/config/i386/i386-builtins.c", "status": "modified", "additions": 35, "deletions": 17, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a0b4e09ab0102d9c0a5e6d603a080cb78600c40d/gcc%2Fconfig%2Fi386%2Fi386-builtins.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a0b4e09ab0102d9c0a5e6d603a080cb78600c40d/gcc%2Fconfig%2Fi386%2Fi386-builtins.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386-builtins.c?ref=a0b4e09ab0102d9c0a5e6d603a080cb78600c40d", "patch": "@@ -2103,6 +2103,11 @@ make_var_decl (tree type, const char *name)\n   return new_decl;\n }\n \n+static GTY(()) tree ix86_cpu_model_type_node;\n+static GTY(()) tree ix86_cpu_model_var;\n+static GTY(()) tree ix86_cpu_features2_type_node;\n+static GTY(()) tree ix86_cpu_features2_var;\n+\n /* FNDECL is a __builtin_cpu_is or a __builtin_cpu_supports call that is folded\n    into an integer defined in libgcc/config/i386/cpuinfo.c */\n \n@@ -2114,12 +2119,16 @@ fold_builtin_cpu (tree fndecl, tree *args)\n     = (enum ix86_builtins) DECL_MD_FUNCTION_CODE (fndecl);\n   tree param_string_cst = NULL;\n \n-  tree __processor_model_type = build_processor_model_struct ();\n-  tree __cpu_model_var = make_var_decl (__processor_model_type,\n-\t\t\t\t\t\"__cpu_model\");\n-\n-\n-  varpool_node::add (__cpu_model_var);\n+  if (ix86_cpu_model_var == nullptr)\n+    {\n+      /* Build a single __cpu_model variable for all references to\n+\t __cpu_model so that GIMPLE level optimizers can CSE the loads\n+\t of __cpu_model and optimize bit-operations properly.  */\n+      ix86_cpu_model_type_node = build_processor_model_struct ();\n+      ix86_cpu_model_var = make_var_decl (ix86_cpu_model_type_node,\n+\t\t\t\t\t  \"__cpu_model\");\n+      varpool_node::add (ix86_cpu_model_var);\n+    }\n \n   gcc_assert ((args != NULL) && (*args != NULL));\n \n@@ -2160,7 +2169,7 @@ fold_builtin_cpu (tree fndecl, tree *args)\n \t  return integer_zero_node;\n \t}\n \n-      field = TYPE_FIELDS (__processor_model_type);\n+      field = TYPE_FIELDS (ix86_cpu_model_type_node);\n       field_val = processor_alias_table[i].model;\n \n       /* CPU types are stored in the next field.  */\n@@ -2179,7 +2188,7 @@ fold_builtin_cpu (tree fndecl, tree *args)\n \t}\n \n       /* Get the appropriate field in __cpu_model.  */\n-      ref = build3 (COMPONENT_REF, TREE_TYPE (field), __cpu_model_var,\n+      ref = build3 (COMPONENT_REF, TREE_TYPE (field), ix86_cpu_model_var,\n \t\t    field, NULL_TREE);\n \n       /* Check the value.  */\n@@ -2212,21 +2221,30 @@ fold_builtin_cpu (tree fndecl, tree *args)\n \n       if (isa_names_table[i].feature >= 32)\n \t{\n-\t  tree index_type\n-\t    = build_index_type (size_int (SIZE_OF_CPU_FEATURES));\n-\t  tree type = build_array_type (unsigned_type_node, index_type);\n-\t  tree __cpu_features2_var = make_var_decl (type,\n-\t\t\t\t\t\t    \"__cpu_features2\");\n+\t  if (ix86_cpu_features2_var == nullptr)\n+\t    {\n+\t      /* Build a single __cpu_features2 variable for all\n+\t\t references to __cpu_features2 so that GIMPLE level\n+\t\t optimizers can CSE the loads of __cpu_features2 and\n+\t\t optimize bit-operations properly.  */\n+\t      tree index_type\n+\t\t= build_index_type (size_int (SIZE_OF_CPU_FEATURES));\n+\t      ix86_cpu_features2_type_node\n+\t\t= build_array_type (unsigned_type_node, index_type);\n+\t      ix86_cpu_features2_var\n+\t\t= make_var_decl (ix86_cpu_features2_type_node,\n+\t\t\t\t \"__cpu_features2\");\n+\t      varpool_node::add (ix86_cpu_features2_var);\n+\t    }\n \n-\t  varpool_node::add (__cpu_features2_var);\n \t  for (unsigned int j = 0; j < SIZE_OF_CPU_FEATURES; j++)\n \t    if (isa_names_table[i].feature < (32 + 32 + j * 32))\n \t      {\n \t\tfield_val = (1U << (isa_names_table[i].feature\n \t\t\t\t    - (32 + j * 32)));\n \t\ttree index = size_int (j);\n \t\tarray_elt = build4 (ARRAY_REF, unsigned_type_node,\n-\t\t\t\t    __cpu_features2_var,\n+\t\t\t\t    ix86_cpu_features2_var,\n \t\t\t\t    index, NULL_TREE, NULL_TREE);\n \t\t/* Return __cpu_features2[index] & field_val  */\n \t\tfinal = build2 (BIT_AND_EXPR, unsigned_type_node,\n@@ -2237,13 +2255,13 @@ fold_builtin_cpu (tree fndecl, tree *args)\n \t      }\n \t}\n \n-      field = TYPE_FIELDS (__processor_model_type);\n+      field = TYPE_FIELDS (ix86_cpu_model_type_node);\n       /* Get the last field, which is __cpu_features.  */\n       while (DECL_CHAIN (field))\n         field = DECL_CHAIN (field);\n \n       /* Get the appropriate field: __cpu_model.__cpu_features  */\n-      ref = build3 (COMPONENT_REF, TREE_TYPE (field), __cpu_model_var,\n+      ref = build3 (COMPONENT_REF, TREE_TYPE (field), ix86_cpu_model_var,\n \t\t    field, NULL_TREE);\n \n       /* Access the 0th element of __cpu_features array.  */"}, {"sha": "6124058dc1ebf846fc7f9f365ebce2329b00dc8f", "filename": "gcc/testsuite/gcc.target/i386/pr91400-1.c", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a0b4e09ab0102d9c0a5e6d603a080cb78600c40d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr91400-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a0b4e09ab0102d9c0a5e6d603a080cb78600c40d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr91400-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr91400-1.c?ref=a0b4e09ab0102d9c0a5e6d603a080cb78600c40d", "patch": "@@ -0,0 +1,14 @@\n+/* PR target/91400 */\n+/* { dg-do compile } */\n+/* { dg-options \"-O2\" } */\n+/* { dg-final { scan-assembler-times \"andl\" 1 } } */\n+/* { dg-final { scan-assembler-times \"cmpl\" 1 } } */\n+/* { dg-final { scan-assembler-times \"sete\" 1 } } */\n+/* { dg-final { scan-assembler-not \"cmove\" } } */\n+\n+_Bool\n+f (void)\n+{\n+  return __builtin_cpu_supports(\"popcnt\")\n+\t && __builtin_cpu_supports(\"ssse3\");\n+}"}, {"sha": "1af5a2f41cd680fe0f27c68d6024fc56ea984985", "filename": "gcc/testsuite/gcc.target/i386/pr91400-2.c", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a0b4e09ab0102d9c0a5e6d603a080cb78600c40d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr91400-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a0b4e09ab0102d9c0a5e6d603a080cb78600c40d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr91400-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr91400-2.c?ref=a0b4e09ab0102d9c0a5e6d603a080cb78600c40d", "patch": "@@ -0,0 +1,14 @@\n+/* PR target/91400 */\n+/* { dg-do compile } */\n+/* { dg-options \"-O2\" } */\n+/* { dg-final { scan-assembler-times \"andl\" 1 } } */\n+/* { dg-final { scan-assembler-times \"cmpl\" 1 } } */\n+/* { dg-final { scan-assembler-times \"sete\" 1 } } */\n+/* { dg-final { scan-assembler-not \"cmove\" } } */\n+\n+_Bool\n+f (void)\n+{\n+  return __builtin_cpu_supports(\"avx512vnni\")\n+\t && __builtin_cpu_supports(\"3dnow\");\n+}"}]}