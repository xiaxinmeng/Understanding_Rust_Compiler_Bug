{"sha": "d05586dce2ea2ac3bc6f645b7ad79290b327ccae", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDA1NTg2ZGNlMmVhMmFjM2JjNmY2NDViN2FkNzkyOTBiMzI3Y2NhZQ==", "commit": {"author": {"name": "Yannick Moy", "email": "moy@adacore.com", "date": "2019-09-18T08:32:28Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "pmderodat@gcc.gnu.org", "date": "2019-09-18T08:32:28Z"}, "message": "[Ada] Skip entity name qualification in GNATprove mode\n\nGNATprove was using the qualification of names for entities with local\nhomonyms in the same scope, requiring the use of a suffix to\ndifferentiate them. This caused problems for correctly identifying\nprimitive equality operators. This case is now handled like the rest of\nentities in GNATprove, by instead updating Unique_Name to append the\nsuffix on-the-fly where needed.\n\nThere is no impact on compilation and hence no test.\n\n2019-09-18  Yannick Moy  <moy@adacore.com>\n\ngcc/ada/\n\n\t* exp_dbug.adb (Append_Homonym_Number): Use new function\n\tGet_Homonym_Number.\n\t(Get_Homonym_Number): New function to return the homonym number.\n\t(Qualify_Entity_Name): Remove special case for GNATprove.\n\t* exp_dbug.ads (Get_Homonym_Number): Make the new function\n\tpublic for use in GNATprove.\n\t* frontend.adb (Frontend): Do not qualify names in GNATprove\n\tmode.\n\t* sem_util.adb (Unique_Name): Append homonym suffix where needed\n\tfor entities which have local homonyms in the same scope.\n\nFrom-SVN: r275850", "tree": {"sha": "b791600e0a1e6ec7845a1b28bf2a695a7c61e95b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b791600e0a1e6ec7845a1b28bf2a695a7c61e95b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d05586dce2ea2ac3bc6f645b7ad79290b327ccae", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d05586dce2ea2ac3bc6f645b7ad79290b327ccae", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d05586dce2ea2ac3bc6f645b7ad79290b327ccae", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d05586dce2ea2ac3bc6f645b7ad79290b327ccae/comments", "author": {"login": "yannickmoy", "id": 859440, "node_id": "MDQ6VXNlcjg1OTQ0MA==", "avatar_url": "https://avatars.githubusercontent.com/u/859440?v=4", "gravatar_id": "", "url": "https://api.github.com/users/yannickmoy", "html_url": "https://github.com/yannickmoy", "followers_url": "https://api.github.com/users/yannickmoy/followers", "following_url": "https://api.github.com/users/yannickmoy/following{/other_user}", "gists_url": "https://api.github.com/users/yannickmoy/gists{/gist_id}", "starred_url": "https://api.github.com/users/yannickmoy/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/yannickmoy/subscriptions", "organizations_url": "https://api.github.com/users/yannickmoy/orgs", "repos_url": "https://api.github.com/users/yannickmoy/repos", "events_url": "https://api.github.com/users/yannickmoy/events{/privacy}", "received_events_url": "https://api.github.com/users/yannickmoy/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "b67723ddeea0206e68f122a26b1a7b46382b79e7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b67723ddeea0206e68f122a26b1a7b46382b79e7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b67723ddeea0206e68f122a26b1a7b46382b79e7"}], "stats": {"total": 139, "additions": 91, "deletions": 48}, "files": [{"sha": "a6012fea00e60ad7c7330b657505bfc5703868c5", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d05586dce2ea2ac3bc6f645b7ad79290b327ccae/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d05586dce2ea2ac3bc6f645b7ad79290b327ccae/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=d05586dce2ea2ac3bc6f645b7ad79290b327ccae", "patch": "@@ -1,3 +1,16 @@\n+2019-09-18  Yannick Moy  <moy@adacore.com>\n+\n+\t* exp_dbug.adb (Append_Homonym_Number): Use new function\n+\tGet_Homonym_Number.\n+\t(Get_Homonym_Number): New function to return the homonym number.\n+\t(Qualify_Entity_Name): Remove special case for GNATprove.\n+\t* exp_dbug.ads (Get_Homonym_Number): Make the new function\n+\tpublic for use in GNATprove.\n+\t* frontend.adb (Frontend): Do not qualify names in GNATprove\n+\tmode.\n+\t* sem_util.adb (Unique_Name): Append homonym suffix where needed\n+\tfor entities which have local homonyms in the same scope.\n+\n 2019-09-18  Nicolas Roche  <roche@adacore.com>\n \n \t* libgnat/s-valrea.adb (Scan_Integral_Digits): New procedure."}, {"sha": "eb5e72b8ce7d3b11715896f0ec1e7770f5e8415e", "filename": "gcc/ada/exp_dbug.adb", "status": "modified", "additions": 25, "deletions": 38, "changes": 63, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d05586dce2ea2ac3bc6f645b7ad79290b327ccae/gcc%2Fada%2Fexp_dbug.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d05586dce2ea2ac3bc6f645b7ad79290b327ccae/gcc%2Fada%2Fexp_dbug.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_dbug.adb?ref=d05586dce2ea2ac3bc6f645b7ad79290b327ccae", "patch": "@@ -219,26 +219,12 @@ package body Exp_Dbug is\n \n    begin\n       if Has_Homonym (E) then\n-         declare\n-            H  : Entity_Id := Homonym (E);\n-            Nr : Nat := 1;\n-\n-         begin\n-            while Present (H) loop\n-               if Scope (H) = Scope (E) then\n-                  Nr := Nr + 1;\n-               end if;\n-\n-               H := Homonym (H);\n-            end loop;\n-\n-            if Homonym_Len > 0 then\n-               Homonym_Len := Homonym_Len + 1;\n-               Homonym_Numbers (Homonym_Len) := '_';\n-            end if;\n+         if Homonym_Len > 0 then\n+            Homonym_Len := Homonym_Len + 1;\n+            Homonym_Numbers (Homonym_Len) := '_';\n+         end if;\n \n-            Add_Nat_To_H (Nr);\n-         end;\n+         Add_Nat_To_H (Get_Homonym_Number (E));\n       end if;\n    end Append_Homonym_Number;\n \n@@ -1068,6 +1054,26 @@ package body Exp_Dbug is\n       end loop;\n    end Build_Subprogram_Instance_Renamings;\n \n+   ------------------------\n+   -- Get_Homonym_Number --\n+   ------------------------\n+\n+   function Get_Homonym_Number (E : Entity_Id) return Nat is\n+      H  : Entity_Id := Homonym (E);\n+      Nr : Nat := 1;\n+\n+   begin\n+      while Present (H) loop\n+         if Scope (H) = Scope (E) then\n+            Nr := Nr + 1;\n+         end if;\n+\n+         H := Homonym (H);\n+      end loop;\n+\n+      return Nr;\n+   end Get_Homonym_Number;\n+\n    ------------------------------------\n    -- Get_Secondary_DT_External_Name --\n    ------------------------------------\n@@ -1451,25 +1457,6 @@ package body Exp_Dbug is\n       if Has_Qualified_Name (Ent) then\n          return;\n \n-      --  In formal verification mode, simply append a suffix for homonyms.\n-      --  We used to qualify entity names as full expansion does, but this was\n-      --  removed as this prevents the verification back-end from using a short\n-      --  name for debugging and user interaction. The verification back-end\n-      --  already takes care of qualifying names when needed. Still mark the\n-      --  name as being qualified, as Qualify_Entity_Name may be called more\n-      --  than once on the same entity.\n-\n-      elsif GNATprove_Mode then\n-         if Has_Homonym (Ent) then\n-            Get_Name_String (Chars (Ent));\n-            Append_Homonym_Number (Ent);\n-            Output_Homonym_Numbers_Suffix;\n-            Set_Chars (Ent, Name_Enter);\n-         end if;\n-\n-         Set_Has_Qualified_Name (Ent);\n-         return;\n-\n       --  If the entity is a variable encoding the debug name for an object\n       --  renaming, then the qualified name of the entity associated with the\n       --  renamed object can now be incorporated in the debug name."}, {"sha": "b9f1fd6e7eb2f11b78e1f66e7d9a8f2764769037", "filename": "gcc/ada/exp_dbug.ads", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d05586dce2ea2ac3bc6f645b7ad79290b327ccae/gcc%2Fada%2Fexp_dbug.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d05586dce2ea2ac3bc6f645b7ad79290b327ccae/gcc%2Fada%2Fexp_dbug.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_dbug.ads?ref=d05586dce2ea2ac3bc6f645b7ad79290b327ccae", "patch": "@@ -460,6 +460,10 @@ package Exp_Dbug is\n    -- Subprograms for Handling Qualification --\n    --------------------------------------------\n \n+   function Get_Homonym_Number (E : Entity_Id) return Nat;\n+   --  Return the homonym number for E, which is its position in the homonym\n+   --  chain starting at 1. This is exported for use in GNATprove.\n+\n    procedure Qualify_Entity_Names (N : Node_Id);\n    --  Given a node N, that represents a block, subprogram body, or package\n    --  body or spec, or protected or task type, sets a fully qualified name"}, {"sha": "1cc143a001245b088ba25c24b9374289cfd006b9", "filename": "gcc/ada/frontend.adb", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d05586dce2ea2ac3bc6f645b7ad79290b327ccae/gcc%2Fada%2Ffrontend.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d05586dce2ea2ac3bc6f645b7ad79290b327ccae/gcc%2Fada%2Ffrontend.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Ffrontend.adb?ref=d05586dce2ea2ac3bc6f645b7ad79290b327ccae", "patch": "@@ -492,7 +492,9 @@ begin\n \n    --  Qualify all entity names in inner packages, package bodies, etc\n \n-   Exp_Dbug.Qualify_All_Entity_Names;\n+   if not GNATprove_Mode then\n+      Exp_Dbug.Qualify_All_Entity_Names;\n+   end if;\n \n    --  SCIL backend requirement. Check that SCIL nodes associated with\n    --  dispatching calls reference subprogram calls."}, {"sha": "f66c77f71aebdf4c36c494d56ef490ea463aa9d4", "filename": "gcc/ada/sem_util.adb", "status": "modified", "additions": 46, "deletions": 9, "changes": 55, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d05586dce2ea2ac3bc6f645b7ad79290b327ccae/gcc%2Fada%2Fsem_util.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d05586dce2ea2ac3bc6f645b7ad79290b327ccae/gcc%2Fada%2Fsem_util.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_util.adb?ref=d05586dce2ea2ac3bc6f645b7ad79290b327ccae", "patch": "@@ -33,6 +33,7 @@ with Elists;   use Elists;\n with Errout;   use Errout;\n with Erroutc;  use Erroutc;\n with Exp_Ch11; use Exp_Ch11;\n+with Exp_Dbug; use Exp_Dbug;\n with Exp_Util; use Exp_Util;\n with Fname;    use Fname;\n with Freeze;   use Freeze;\n@@ -26154,24 +26155,59 @@ package body Sem_Util is\n \n    function Unique_Name (E : Entity_Id) return String is\n \n-      --  Names in E_Subprogram_Body or E_Package_Body entities are not\n-      --  reliable, as they may not include the overloading suffix. Instead,\n-      --  when looking for the name of E or one of its enclosing scope, we get\n-      --  the name of the corresponding Unique_Entity.\n+      --  Local subprograms\n \n-      U : constant Entity_Id := Unique_Entity (E);\n+      function Add_Homonym_Suffix (E : Entity_Id) return String;\n \n       function This_Name return String;\n \n+      ------------------------\n+      -- Add_Homonym_Suffix --\n+      ------------------------\n+\n+      function Add_Homonym_Suffix (E : Entity_Id) return String is\n+\n+         --  Names in E_Subprogram_Body or E_Package_Body entities are not\n+         --  reliable, as they may not include the overloading suffix.\n+         --  Instead, when looking for the name of E or one of its enclosing\n+         --  scope, we get the name of the corresponding Unique_Entity.\n+\n+         U   : constant Entity_Id := Unique_Entity (E);\n+         Nam : constant String := Get_Name_String (Chars (U));\n+\n+      begin\n+         --  If E has homonyms but is not fully qualified, as done in\n+         --  GNATprove mode, append the homonym number on the fly. Strip the\n+         --  leading space character in the image of natural numbers. Also do\n+         --  not print the homonym value of 1.\n+\n+         if Has_Homonym (U) then\n+            declare\n+               N : constant Nat := Get_Homonym_Number (U);\n+               S : constant String := N'Img;\n+            begin\n+               if N > 1 then\n+                  return Nam & \"__\" & S (2 .. S'Last);\n+               end if;\n+            end;\n+         end if;\n+\n+         return Nam;\n+      end Add_Homonym_Suffix;\n+\n       ---------------\n       -- This_Name --\n       ---------------\n \n       function This_Name return String is\n       begin\n-         return Get_Name_String (Chars (U));\n+         return Add_Homonym_Suffix (E);\n       end This_Name;\n \n+      --  Local variables\n+\n+      U : constant Entity_Id := Unique_Entity (E);\n+\n    --  Start of processing for Unique_Name\n \n    begin\n@@ -26201,16 +26237,17 @@ package body Sem_Util is\n                end if;\n \n             --  For intances of generic subprograms use the name of the related\n-            --  instace and skip the scope of its wrapper package.\n+            --  instance and skip the scope of its wrapper package.\n \n             elsif Is_Wrapper_Package (S) then\n                pragma Assert (Scope (S) = Scope (Related_Instance (S)));\n                --  Wrapper package and the instantiation are in the same scope\n \n                declare\n+                  Related_Name : constant String :=\n+                    Add_Homonym_Suffix (Related_Instance (S));\n                   Enclosing_Name : constant String :=\n-                    Unique_Name (Scope (S)) & \"__\" &\n-                      Get_Name_String (Chars (Related_Instance (S)));\n+                    Unique_Name (Scope (S)) & \"__\" & Related_Name;\n \n                begin\n                   if Is_Subprogram (U)"}]}