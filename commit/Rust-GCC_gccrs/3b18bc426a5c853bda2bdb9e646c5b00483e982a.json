{"sha": "3b18bc426a5c853bda2bdb9e646c5b00483e982a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2IxOGJjNDI2YTVjODUzYmRhMmJkYjllNjQ2YzViMDA0ODNlOTgyYQ==", "commit": {"author": {"name": "Jeff Law", "email": "law@redhat.com", "date": "2013-09-03T20:43:46Z"}, "committer": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "2013-09-03T20:43:46Z"}, "message": "tree-ssa-threadedge.c (thread_across_edge): Record entire path when not threading through a joiner block.\n\n\t* tree-ssa-threadedge.c (thread_across_edge): Record entire path\n\twhen not threading through a joiner block.  Pass joiner/no joiner\n\tstate to register_jump_thread.\n\t* tree-ssa-threadupdate.c (register_jump_thread): Get joiner/no joiner\n\tstate from argument rather than implying on path length.\n\tDump the entire jump thread path into debugging dump.\n\t* tree-flow.h (register_jump_thread): Update prototype.\n\n\t* tree-ssa/ssa-dom-thread-3.c: Update due to changes in debug\n\tdump output.\n\nFrom-SVN: r202232", "tree": {"sha": "a84c9f73b9de44d8f8421f514d4b08f7eefa96d7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a84c9f73b9de44d8f8421f514d4b08f7eefa96d7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3b18bc426a5c853bda2bdb9e646c5b00483e982a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3b18bc426a5c853bda2bdb9e646c5b00483e982a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3b18bc426a5c853bda2bdb9e646c5b00483e982a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3b18bc426a5c853bda2bdb9e646c5b00483e982a/comments", "author": null, "committer": null, "parents": [{"sha": "ae84e151ddf7908e0d7b90036c0754cc39209595", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ae84e151ddf7908e0d7b90036c0754cc39209595", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ae84e151ddf7908e0d7b90036c0754cc39209595"}], "stats": {"total": 61, "additions": 44, "deletions": 17}, "files": [{"sha": "0adc930380a290d9594df9c578f2a2bdcabeb2ed", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b18bc426a5c853bda2bdb9e646c5b00483e982a/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b18bc426a5c853bda2bdb9e646c5b00483e982a/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=3b18bc426a5c853bda2bdb9e646c5b00483e982a", "patch": "@@ -1,3 +1,13 @@\n+2013-09-03  Jeff Law  <law@redhat.com>\n+\n+\t* tree-ssa-threadedge.c (thread_across_edge): Record entire path\n+\twhen not threading through a joiner block.  Pass joiner/no joiner\n+\tstate to register_jump_thread.\n+\t* tree-ssa-threadupdate.c (register_jump_thread): Get joiner/no joiner\n+\tstate from argument rather than implying on path length.\n+\tDump the entire jump thread path into debugging dump.\n+\t* tree-flow.h (register_jump_thread): Update prototype.\n+\n 2013-08-29  Xinliang David Li  <davidxl@google.com>\n \n \t* tree-vect-data-refs.c (vect_compute_data_ref_alignment):"}, {"sha": "dbc88b17e164f31d067fb0b659fb4cc7773dfdd9", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b18bc426a5c853bda2bdb9e646c5b00483e982a/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b18bc426a5c853bda2bdb9e646c5b00483e982a/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=3b18bc426a5c853bda2bdb9e646c5b00483e982a", "patch": "@@ -1,3 +1,8 @@\n+2013-09-03  Jeff Law  <law@redhat.com>\n+\n+\t* tree-ssa/ssa-dom-thread-3.c: Update due to changes in debug\n+\tdump output.\n+\n 2013-09-03  Meador Inge  <meadori@codesourcery.com>\n \n \tRevert:"}, {"sha": "c2efd15eb3327e3e73d194c58258ef3e679968e6", "filename": "gcc/testsuite/gcc.dg/tree-ssa/ssa-dom-thread-3.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b18bc426a5c853bda2bdb9e646c5b00483e982a/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-dom-thread-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b18bc426a5c853bda2bdb9e646c5b00483e982a/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-dom-thread-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-dom-thread-3.c?ref=3b18bc426a5c853bda2bdb9e646c5b00483e982a", "patch": "@@ -43,6 +43,5 @@ expand_one_var (tree var, unsigned char toplevel, unsigned char really_expand)\n }\n /* We should thread the jump, through an intermediate block.  */\n /* { dg-final { scan-tree-dump-times \"Threaded\" 1 \"dom1\"} } */\n-/* { dg-final { scan-tree-dump-times \"one or more intermediate\" 1 \"dom1\"} } */\n-/* { dg-final { cleanup-tree-dump \"dom1\" } } */\n+/* { dg-final { scan-tree-dump-times \"Registering jump thread .through joiner block.: \\\\(.*\\\\);  \\\\(.*\\\\);  \\\\(.*\\\\);\" 1 \"dom1\"} } */\n "}, {"sha": "333e1687e5d56393b004dd4955b639517367070d", "filename": "gcc/tree-flow.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b18bc426a5c853bda2bdb9e646c5b00483e982a/gcc%2Ftree-flow.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b18bc426a5c853bda2bdb9e646c5b00483e982a/gcc%2Ftree-flow.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-flow.h?ref=3b18bc426a5c853bda2bdb9e646c5b00483e982a", "patch": "@@ -749,7 +749,7 @@ bool may_be_nonaddressable_p (tree expr);\n \n /* In tree-ssa-threadupdate.c.  */\n extern bool thread_through_all_blocks (bool);\n-extern void register_jump_thread (vec<edge>);\n+extern void register_jump_thread (vec<edge>, bool);\n \n /* In gimplify.c  */\n tree force_gimple_operand_1 (tree, gimple_seq *, gimple_predicate, tree);"}, {"sha": "dddcfce5a3b12768797ef678912e60f11b34194f", "filename": "gcc/tree-ssa-threadedge.c", "status": "modified", "additions": 11, "deletions": 7, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b18bc426a5c853bda2bdb9e646c5b00483e982a/gcc%2Ftree-ssa-threadedge.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b18bc426a5c853bda2bdb9e646c5b00483e982a/gcc%2Ftree-ssa-threadedge.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-threadedge.c?ref=3b18bc426a5c853bda2bdb9e646c5b00483e982a", "patch": "@@ -901,6 +901,10 @@ thread_across_edge (gimple dummy_cond,\n \t  if (dest == e->dest)\n \t    goto fail;\n \n+\t  vec<edge> path = vNULL;\n+\t  path.safe_push (e);\n+\t  path.safe_push (taken_edge);\n+\n \t  /* DEST could be null for a computed jump to an absolute\n \t     address.  If DEST is not null, then see if we can thread\n \t     through it as well, this helps capture secondary effects\n@@ -922,7 +926,10 @@ thread_across_edge (gimple dummy_cond,\n \t\t\t\t\t\t  simplify,\n \t\t\t\t\t\t  visited);\n \t\t  if (e2)\n-\t\t    taken_edge = e2;\n+\t\t    {\n+\t\t      taken_edge = e2;\n+\t\t      path.safe_push (e2);\n+\t\t    }\n \t\t}\n \t      while (e2);\n \t      BITMAP_FREE (visited);\n@@ -931,13 +938,10 @@ thread_across_edge (gimple dummy_cond,\n \t  remove_temporary_equivalences (stack);\n \t  if (taken_edge)\n \t    {\n-\t      vec<edge> path = vNULL;\n \t      propagate_threaded_block_debug_into (taken_edge->dest, e->dest);\n-\t      path.safe_push (e);\n-\t      path.safe_push (taken_edge);\n-\t      register_jump_thread (path);\n-\t      path.release ();\n+\t      register_jump_thread (path, false);\n \t    }\n+\t  path.release ();\n \t  return;\n \t}\n     }\n@@ -1009,7 +1013,7 @@ thread_across_edge (gimple dummy_cond,\n \t      {\n \t\tpropagate_threaded_block_debug_into (e3->dest,\n \t\t\t\t\t\t     taken_edge->dest);\n-\t\tregister_jump_thread (path);\n+\t\tregister_jump_thread (path, true);\n \t      }\n \t  }\n "}, {"sha": "8e40f6668cf52dbf602403495421d190abb1f448", "filename": "gcc/tree-ssa-threadupdate.c", "status": "modified", "additions": 16, "deletions": 7, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b18bc426a5c853bda2bdb9e646c5b00483e982a/gcc%2Ftree-ssa-threadupdate.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b18bc426a5c853bda2bdb9e646c5b00483e982a/gcc%2Ftree-ssa-threadupdate.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-threadupdate.c?ref=3b18bc426a5c853bda2bdb9e646c5b00483e982a", "patch": "@@ -1303,7 +1303,7 @@ thread_through_all_blocks (bool may_peel_loop_headers)\n    after fixing the SSA graph.  */\n \n void\n-register_jump_thread (vec<edge> path)\n+register_jump_thread (vec<edge> path, bool through_joiner)\n {\n   /* Convert PATH into 3 edge representation we've been using.  This\n      is temporary until we convert this file to use a path representation\n@@ -1312,7 +1312,7 @@ register_jump_thread (vec<edge> path)\n   edge e2 = path[1];\n   edge e3;\n \n-  if (path.length () <= 2)\n+  if (!through_joiner)\n     e3 = NULL;\n   else\n     e3 = path[path.length () - 1];\n@@ -1322,14 +1322,23 @@ register_jump_thread (vec<edge> path)\n   if (e2 == NULL)\n     return;\n \n+  if (dump_file && (dump_flags & TDF_DETAILS))\n+    {\n+      unsigned int i;\n+\n+      fprintf (dump_file,\n+\t       \"  Registering jump thread %s:\",\n+\t       through_joiner ? \"(through joiner block)\" : \"\");\n+\n+      for (i = 0; i < path.length (); i++)\n+\tfprintf (dump_file, \" (%d, %d); \",\n+\t\t path[i]->src->index, path[i]->dest->index);\n+      fputc ('\\n', dump_file);\n+    }\n+    \n   if (!threaded_edges.exists ())\n     threaded_edges.create (15);\n \n-  if (dump_file && (dump_flags & TDF_DETAILS)\n-      && e->dest != e2->src)\n-    fprintf (dump_file,\n-\t     \"  Registering jump thread around one or more intermediate blocks\\n\");\n-\n   threaded_edges.safe_push (e);\n   threaded_edges.safe_push (e2);\n   threaded_edges.safe_push (e3);"}]}