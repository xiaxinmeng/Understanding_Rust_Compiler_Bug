{"sha": "96b40f8d4c5288483a72676796154b82f92d6c8c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTZiNDBmOGQ0YzUyODg0ODNhNzI2NzY3OTYxNTRiODJmOTJkNmM4Yw==", "commit": {"author": {"name": "Marek Polacek", "email": "polacek@redhat.com", "date": "2014-05-01T07:35:05Z"}, "committer": {"name": "Marek Polacek", "email": "mpolacek@gcc.gnu.org", "date": "2014-05-01T07:35:05Z"}, "message": "re PR c/60257 (Incorrect column number and confusing message in -Woverride-init)\n\n\tPR c/60257\n\t* c-typeck.c (warning_init): Add location_t parameter.  Call\n\twarning_at instead of warning.\n\t(push_init_level): Pass input_location to warning_init.\n\t(add_pending_init): Add location_t parameter.  Pass loc to\n\twarning_init.\n\t(set_nonincremental_init): Pass input_location to add_pending_init.\n\t(set_nonincremental_init_from_string): Likewise.\n\t(output_init_element): Pass loc to warning_init and to\n\tadd_pending_init.\n\n\t* gcc.dg/pr60257.c: New test.\n\nFrom-SVN: r209974", "tree": {"sha": "f5de2e6b0ec86ec0665eeb06f19f3d927f3e9f63", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f5de2e6b0ec86ec0665eeb06f19f3d927f3e9f63"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/96b40f8d4c5288483a72676796154b82f92d6c8c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/96b40f8d4c5288483a72676796154b82f92d6c8c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/96b40f8d4c5288483a72676796154b82f92d6c8c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/96b40f8d4c5288483a72676796154b82f92d6c8c/comments", "author": {"login": "mpolacek", "id": 10496300, "node_id": "MDQ6VXNlcjEwNDk2MzAw", "avatar_url": "https://avatars.githubusercontent.com/u/10496300?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mpolacek", "html_url": "https://github.com/mpolacek", "followers_url": "https://api.github.com/users/mpolacek/followers", "following_url": "https://api.github.com/users/mpolacek/following{/other_user}", "gists_url": "https://api.github.com/users/mpolacek/gists{/gist_id}", "starred_url": "https://api.github.com/users/mpolacek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mpolacek/subscriptions", "organizations_url": "https://api.github.com/users/mpolacek/orgs", "repos_url": "https://api.github.com/users/mpolacek/repos", "events_url": "https://api.github.com/users/mpolacek/events{/privacy}", "received_events_url": "https://api.github.com/users/mpolacek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "32e007683d8eeb92afe99367049b28d27845dfc0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/32e007683d8eeb92afe99367049b28d27845dfc0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/32e007683d8eeb92afe99367049b28d27845dfc0"}], "stats": {"total": 108, "additions": 85, "deletions": 23}, "files": [{"sha": "8cc268b0f7b7c20dda87b324e4fc366b5e9ff27a", "filename": "gcc/c/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/96b40f8d4c5288483a72676796154b82f92d6c8c/gcc%2Fc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/96b40f8d4c5288483a72676796154b82f92d6c8c/gcc%2Fc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2FChangeLog?ref=96b40f8d4c5288483a72676796154b82f92d6c8c", "patch": "@@ -1,3 +1,16 @@\n+2014-05-01  Marek Polacek  <polacek@redhat.com>\n+\n+\tPR c/60257\n+\t* c-typeck.c (warning_init): Add location_t parameter.  Call\n+\twarning_at instead of warning.\n+\t(push_init_level): Pass input_location to warning_init.\n+\t(add_pending_init): Add location_t parameter.  Pass loc to\n+\twarning_init.\n+\t(set_nonincremental_init): Pass input_location to add_pending_init.\n+\t(set_nonincremental_init_from_string): Likewise.\n+\t(output_init_element): Pass loc to warning_init and to\n+\tadd_pending_init.\n+\n 2014-05-01  Marek Polacek  <polacek@redhat.com>\n \n \tPR c/43395"}, {"sha": "21d1006fb1aa3ec7b1f70b7fa200bba0d43cec52", "filename": "gcc/c/c-typeck.c", "status": "modified", "additions": 30, "deletions": 23, "changes": 53, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/96b40f8d4c5288483a72676796154b82f92d6c8c/gcc%2Fc%2Fc-typeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/96b40f8d4c5288483a72676796154b82f92d6c8c/gcc%2Fc%2Fc-typeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2Fc-typeck.c?ref=96b40f8d4c5288483a72676796154b82f92d6c8c", "patch": "@@ -100,14 +100,15 @@ static void push_string (const char *);\n static void push_member_name (tree);\n static int spelling_length (void);\n static char *print_spelling (char *);\n-static void warning_init (int, const char *);\n+static void warning_init (location_t, int, const char *);\n static tree digest_init (location_t, tree, tree, tree, bool, bool, int);\n static void output_init_element (location_t, tree, tree, bool, tree, tree, int,\n \t\t\t\t bool, struct obstack *);\n static void output_pending_init_elements (int, struct obstack *);\n static int set_designator (int, struct obstack *);\n static void push_range_stack (tree, struct obstack *);\n-static void add_pending_init (tree, tree, tree, bool, struct obstack *);\n+static void add_pending_init (location_t, tree, tree, tree, bool,\n+\t\t\t      struct obstack *);\n static void set_nonincremental_init (struct obstack *);\n static void set_nonincremental_init_from_string (tree, struct obstack *);\n static tree find_init_member (tree, struct obstack *);\n@@ -6446,15 +6447,15 @@ pedwarn_init (location_t location, int opt, const char *gmsgid)\n    component name is taken from the spelling stack.  */\n \n static void\n-warning_init (int opt, const char *gmsgid)\n+warning_init (location_t loc, int opt, const char *gmsgid)\n {\n   char *ofwhat;\n \n   /* The gmsgid may be a format string with %< and %>. */\n-  warning (opt, gmsgid);\n+  warning_at (loc, opt, gmsgid);\n   ofwhat = print_spelling ((char *) alloca (spelling_length () + 1));\n   if (*ofwhat)\n-    warning (opt, \"(near initialization for %qs)\", ofwhat);\n+    warning_at (loc, opt, \"(near initialization for %qs)\", ofwhat);\n }\n \f\n /* If TYPE is an array type and EXPR is a parenthesized string\n@@ -7300,7 +7301,8 @@ push_init_level (int implicit, struct obstack * braced_init_obstack)\n   if (implicit == 1 && warn_missing_braces && !missing_braces_mentioned)\n     {\n       missing_braces_mentioned = 1;\n-      warning_init (OPT_Wmissing_braces, \"missing braces around initializer\");\n+      warning_init (input_location, OPT_Wmissing_braces,\n+\t\t    \"missing braces around initializer\");\n     }\n \n   if (TREE_CODE (constructor_type) == RECORD_TYPE\n@@ -7361,7 +7363,7 @@ push_init_level (int implicit, struct obstack * braced_init_obstack)\n   else\n     {\n       if (constructor_type != error_mark_node)\n-\twarning_init (0, \"braces around scalar initializer\");\n+\twarning_init (input_location, 0, \"braces around scalar initializer\");\n       constructor_fields = constructor_type;\n       constructor_unfilled_fields = constructor_type;\n     }\n@@ -7776,8 +7778,8 @@ set_init_label (tree fieldname, struct obstack * braced_init_obstack)\n    existing initializer.  */\n \n static void\n-add_pending_init (tree purpose, tree value, tree origtype, bool implicit,\n-\t\t  struct obstack * braced_init_obstack)\n+add_pending_init (location_t loc, tree purpose, tree value, tree origtype,\n+\t\t  bool implicit, struct obstack *braced_init_obstack)\n {\n   struct init_node *p, **q, *r;\n \n@@ -7798,9 +7800,12 @@ add_pending_init (tree purpose, tree value, tree origtype, bool implicit,\n \t      if (!implicit)\n \t\t{\n \t\t  if (TREE_SIDE_EFFECTS (p->value))\n-\t\t    warning_init (0, \"initialized field with side-effects overwritten\");\n+\t\t    warning_init (loc, 0,\n+\t\t\t\t  \"initialized field with side-effects \"\n+\t\t\t\t  \"overwritten\");\n \t\t  else if (warn_override_init)\n-\t\t    warning_init (OPT_Woverride_init, \"initialized field overwritten\");\n+\t\t    warning_init (loc, OPT_Woverride_init,\n+\t\t\t\t  \"initialized field overwritten\");\n \t\t}\n \t      p->value = value;\n \t      p->origtype = origtype;\n@@ -7825,9 +7830,12 @@ add_pending_init (tree purpose, tree value, tree origtype, bool implicit,\n \t      if (!implicit)\n \t\t{\n \t\t  if (TREE_SIDE_EFFECTS (p->value))\n-\t\t    warning_init (0, \"initialized field with side-effects overwritten\");\n+\t\t    warning_init (loc, 0,\n+\t\t\t\t  \"initialized field with side-effects \"\n+\t\t\t\t  \"overwritten\");\n \t\t  else if (warn_override_init)\n-\t\t    warning_init (OPT_Woverride_init, \"initialized field overwritten\");\n+\t\t    warning_init (loc, OPT_Woverride_init,\n+\t\t\t\t  \"initialized field overwritten\");\n \t\t}\n \t      p->value = value;\n \t      p->origtype = origtype;\n@@ -8016,10 +8024,8 @@ set_nonincremental_init (struct obstack * braced_init_obstack)\n     return;\n \n   FOR_EACH_CONSTRUCTOR_ELT (constructor_elements, ix, index, value)\n-    {\n-      add_pending_init (index, value, NULL_TREE, true,\n-\t\t\tbraced_init_obstack);\n-    }\n+    add_pending_init (input_location, index, value, NULL_TREE, true,\n+\t\t      braced_init_obstack);\n   constructor_elements = NULL;\n   if (TREE_CODE (constructor_type) == RECORD_TYPE)\n     {\n@@ -8112,7 +8118,7 @@ set_nonincremental_init_from_string (tree str,\n \t}\n \n       value = build_int_cst_wide (type, val[1], val[0]);\n-      add_pending_init (purpose, value, NULL_TREE, true,\n+      add_pending_init (input_location, purpose, value, NULL_TREE, true,\n                         braced_init_obstack);\n     }\n \n@@ -8278,7 +8284,7 @@ output_init_element (location_t loc, tree value, tree origtype,\n       if (checktype != error_mark_node\n \t  && (TYPE_MAIN_VARIANT (checktype)\n \t      != TYPE_MAIN_VARIANT (DECL_BIT_FIELD_TYPE (field))))\n-\twarning_init (OPT_Wc___compat,\n+\twarning_init (loc, OPT_Wc___compat,\n \t\t      \"enum conversion in initialization is invalid in C++\");\n     }\n \n@@ -8314,7 +8320,7 @@ output_init_element (location_t loc, tree value, tree origtype,\n \t  && tree_int_cst_lt (field, constructor_unfilled_index))\n \tset_nonincremental_init (braced_init_obstack);\n \n-      add_pending_init (field, value, origtype, implicit,\n+      add_pending_init (loc, field, value, origtype, implicit,\n \t\t\tbraced_init_obstack);\n       return;\n     }\n@@ -8341,7 +8347,7 @@ output_init_element (location_t loc, tree value, tree origtype,\n \t    }\n \t}\n \n-      add_pending_init (field, value, origtype, implicit,\n+      add_pending_init (loc, field, value, origtype, implicit,\n \t\t\tbraced_init_obstack);\n       return;\n     }\n@@ -8351,10 +8357,11 @@ output_init_element (location_t loc, tree value, tree origtype,\n       if (!implicit)\n \t{\n \t  if (TREE_SIDE_EFFECTS (constructor_elements->last ().value))\n-\t    warning_init (0,\n+\t    warning_init (loc, 0,\n \t\t\t  \"initialized field with side-effects overwritten\");\n \t  else if (warn_override_init)\n-\t    warning_init (OPT_Woverride_init, \"initialized field overwritten\");\n+\t    warning_init (loc, OPT_Woverride_init,\n+\t\t\t  \"initialized field overwritten\");\n \t}\n \n       /* We can have just one union field set.  */"}, {"sha": "6424b854a4f16352058d83aafd43f22642e17559", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/96b40f8d4c5288483a72676796154b82f92d6c8c/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/96b40f8d4c5288483a72676796154b82f92d6c8c/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=96b40f8d4c5288483a72676796154b82f92d6c8c", "patch": "@@ -1,3 +1,8 @@\n+2014-05-01  Marek Polacek  <polacek@redhat.com>\n+\n+\tPR c/60257\n+\t* gcc.dg/pr60257.c: New test.\n+\n 2014-05-01  Marek Polacek  <polacek@redhat.com>\n \n \tPR c/43395"}, {"sha": "46c29b0543f986f76c02b28ba6feaca46b66c572", "filename": "gcc/testsuite/gcc.dg/pr60257.c", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/96b40f8d4c5288483a72676796154b82f92d6c8c/gcc%2Ftestsuite%2Fgcc.dg%2Fpr60257.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/96b40f8d4c5288483a72676796154b82f92d6c8c/gcc%2Ftestsuite%2Fgcc.dg%2Fpr60257.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr60257.c?ref=96b40f8d4c5288483a72676796154b82f92d6c8c", "patch": "@@ -0,0 +1,37 @@\n+/* PR c/60257 */\n+/* { dg-do compile } */\n+/* { dg-options \"-Wc++-compat -Woverride-init\" } */\n+/* { dg-prune-output \".*near initialization for.*\" } */\n+\n+enum E1 { A };\n+enum E2 { B };\n+\n+struct S\n+{\n+  enum E1 e: 3;\n+};\n+\n+struct S s[] =\n+{\n+  { B } /* { dg-warning \"5:enum conversion in initialization is invalid in C\\[+\\]\\[+\\]\" } */\n+};\n+\n+union U {\n+  int i;\n+  long long int l;\n+};\n+\n+struct R {\n+  int a;\n+};\n+\n+void\n+foo (int i)\n+{\n+  union U u = { .i = ++i, .l = 1 }; /* { dg-warning \"32:initialized field with side-effects overwritten\" } */\n+  union U u2 = { .i = 1, .l = 3 }; /* { dg-warning \"31:initialized field overwritten\" } */\n+  int a[] = { i++, [0] = 1 }; /* { dg-warning \"26:initialized field with side-effects overwritten\" } */\n+  int a2[] = { i, [0] = 1 }; /* { dg-warning \"25:initialized field overwritten\" } */\n+  struct R r = { 1, .a = 2 }; /* { dg-warning \"26:initialized field overwritten\" } */\n+  struct R r2 = { ++i, .a = 2 }; /* { dg-warning \"29:initialized field with side-effects overwritten\" } */\n+}"}]}