{"sha": "31e358e1c8a0f896ec189b1fdb28dcb4a21a1e78", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzFlMzU4ZTFjOGEwZjg5NmVjMTg5YjFmZGIyOGRjYjRhMjFhMWU3OA==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2017-05-02T08:28:03Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2017-05-02T08:28:03Z"}, "message": "[multiple changes]\n\n2017-05-02  Hristian Kirtchev  <kirtchev@adacore.com>\n\n\t* checks.adb, sem_ch3.adb, sem_ch6.adb: Minor reformatting.\n\n2017-05-02  Bob Duff  <duff@adacore.com>\n\n\t* exp_attr.adb (Callable, Identity, Terminated): Use Find_Prim_Op\n\tto find primitive ops, instead of using an Identifier that will\n\tlater be looked up. This is necessary because these ops are not\n\tnecessarily visible at all places where we need to call them.\n\t* exp_util.ads: Minor comment fix.\n\nFrom-SVN: r247466", "tree": {"sha": "bdf69b78b3ec15d795dc9246ee7c7827daa702e7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/bdf69b78b3ec15d795dc9246ee7c7827daa702e7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/31e358e1c8a0f896ec189b1fdb28dcb4a21a1e78", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/31e358e1c8a0f896ec189b1fdb28dcb4a21a1e78", "html_url": "https://github.com/Rust-GCC/gccrs/commit/31e358e1c8a0f896ec189b1fdb28dcb4a21a1e78", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/31e358e1c8a0f896ec189b1fdb28dcb4a21a1e78/comments", "author": null, "committer": null, "parents": [{"sha": "d59179b15e717e87a5c27bc90e7d16f541caa740", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d59179b15e717e87a5c27bc90e7d16f541caa740", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d59179b15e717e87a5c27bc90e7d16f541caa740"}], "stats": {"total": 183, "additions": 104, "deletions": 79}, "files": [{"sha": "59ee6e5cd95b413b99cf4560823f0040bbdb7484", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/31e358e1c8a0f896ec189b1fdb28dcb4a21a1e78/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/31e358e1c8a0f896ec189b1fdb28dcb4a21a1e78/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=31e358e1c8a0f896ec189b1fdb28dcb4a21a1e78", "patch": "@@ -1,3 +1,15 @@\n+2017-05-02  Hristian Kirtchev  <kirtchev@adacore.com>\n+\n+\t* checks.adb, sem_ch3.adb, sem_ch6.adb: Minor reformatting.\n+\n+2017-05-02  Bob Duff  <duff@adacore.com>\n+\n+\t* exp_attr.adb (Callable, Identity, Terminated): Use Find_Prim_Op\n+\tto find primitive ops, instead of using an Identifier that will\n+\tlater be looked up. This is necessary because these ops are not\n+\tnecessarily visible at all places where we need to call them.\n+\t* exp_util.ads: Minor comment fix.\n+\n 2017-05-02  Ed Schonberg  <schonberg@adacore.com>\n \n \t* sem_ch6.adb (Fully_Conformant_Expressions): Two entity"}, {"sha": "40f4e65252e4bb14019e34ad4609b06a348f8b7b", "filename": "gcc/ada/checks.adb", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/31e358e1c8a0f896ec189b1fdb28dcb4a21a1e78/gcc%2Fada%2Fchecks.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/31e358e1c8a0f896ec189b1fdb28dcb4a21a1e78/gcc%2Fada%2Fchecks.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fchecks.adb?ref=31e358e1c8a0f896ec189b1fdb28dcb4a21a1e78", "patch": "@@ -4124,7 +4124,7 @@ package body Checks is\n \n          if Present (Comp) then\n \n-            --  Specialize the error message to indicate that we are dealing\n+            --  Specialize the warning message to indicate that we are dealing\n             --  with an uninitialized composite object that has a defaulted\n             --  null-excluding component.\n \n@@ -4133,9 +4133,11 @@ package body Checks is\n \n             Apply_Compile_Time_Constraint_Error\n               (N      => Expression (N),\n-               Msg    => \"(Ada 2005) null-excluding component % of object % \" &\n-                           \"must be initialized??\",\n+               Msg    =>\n+                 \"(Ada 2005) null-excluding component % of object % must be \"\n+                 & \"initialized??\",\n                Reason => CE_Null_Not_Allowed);\n+\n          else\n             Apply_Compile_Time_Constraint_Error\n               (N      => Expression (N),"}, {"sha": "4d8417afeeb9e43ed5d6fe9b974604f9433615cc", "filename": "gcc/ada/exp_attr.adb", "status": "modified", "additions": 51, "deletions": 39, "changes": 90, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/31e358e1c8a0f896ec189b1fdb28dcb4a21a1e78/gcc%2Fada%2Fexp_attr.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/31e358e1c8a0f896ec189b1fdb28dcb4a21a1e78/gcc%2Fada%2Fexp_attr.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_attr.adb?ref=31e358e1c8a0f896ec189b1fdb28dcb4a21a1e78", "patch": "@@ -1028,7 +1028,7 @@ package body Exp_Attr is\n       Loc       : Source_Ptr;\n       Loop_Id   : Entity_Id;\n       Loop_Stmt : Node_Id;\n-      Result    : Node_Id;\n+      Result    : Node_Id := Empty;\n       Scheme    : Node_Id;\n       Temp_Decl : Node_Id;\n       Temp_Id   : Entity_Id;\n@@ -1093,8 +1093,6 @@ package body Exp_Attr is\n             Decls := Declarations (Parent (Parent (Loop_Stmt)));\n          end if;\n \n-         Result := Empty;\n-\n       --  Transform the loop into a conditional block\n \n       else\n@@ -2480,20 +2478,25 @@ package body Exp_Attr is\n            and then Is_Interface (Ptyp)\n            and then Is_Task_Interface (Ptyp)\n          then\n-            Rewrite (N,\n-              Make_Function_Call (Loc,\n-                Name                   =>\n-                  New_Occurrence_Of (RTE (RE_Callable), Loc),\n-                Parameter_Associations => New_List (\n-                  Make_Unchecked_Type_Conversion (Loc,\n-                    Subtype_Mark =>\n-                      New_Occurrence_Of (RTE (RO_ST_Task_Id), Loc),\n-                    Expression   =>\n-                      Make_Selected_Component (Loc,\n-                        Prefix        =>\n-                          New_Copy_Tree (Pref),\n-                        Selector_Name =>\n-                          Make_Identifier (Loc, Name_uDisp_Get_Task_Id))))));\n+            declare\n+               Id : constant Node_Id :=\n+                 New_Occurrence_Of\n+                   (Find_Prim_Op (Ptyp, Name_uDisp_Get_Task_Id), Loc);\n+               Call : constant Node_Id :=\n+                 Make_Function_Call (Loc,\n+                   Name => Id,\n+                   Parameter_Associations => New_List (Pref));\n+            begin\n+               Rewrite (N,\n+                 Make_Function_Call (Loc,\n+                   Name =>\n+                     New_Occurrence_Of (RTE (RE_Callable), Loc),\n+                   Parameter_Associations => New_List (\n+                     Make_Unchecked_Type_Conversion (Loc,\n+                       Subtype_Mark =>\n+                         New_Occurrence_Of (RTE (RO_ST_Task_Id), Loc),\n+                       Expression => Call))));\n+            end;\n \n          else\n             Rewrite (N,\n@@ -3578,13 +3581,17 @@ package body Exp_Attr is\n               and then Is_Interface (Ptyp)\n               and then Is_Task_Interface (Ptyp)\n             then\n-               Rewrite (N,\n-                 Unchecked_Convert_To (Id_Kind,\n-                   Make_Selected_Component (Loc,\n-                     Prefix =>\n-                       New_Copy_Tree (Pref),\n-                     Selector_Name =>\n-                       Make_Identifier (Loc, Name_uDisp_Get_Task_Id))));\n+               declare\n+                  Id : constant Node_Id :=\n+                    New_Occurrence_Of\n+                      (Find_Prim_Op (Ptyp, Name_uDisp_Get_Task_Id), Loc);\n+                  Call : constant Node_Id :=\n+                    Make_Function_Call (Loc,\n+                      Name => Id,\n+                      Parameter_Associations => New_List (Pref));\n+               begin\n+                  Rewrite (N, Unchecked_Convert_To (Id_Kind, Call));\n+               end;\n \n             else\n                Rewrite (N,\n@@ -6264,27 +6271,32 @@ package body Exp_Attr is\n \n          --  The prefix of Terminated is of a task interface class-wide type.\n          --  Generate:\n-         --    terminated (Task_Id (Pref._disp_get_task_id));\n+         --    terminated (Task_Id (_disp_get_task_id (Pref)));\n \n          if Ada_Version >= Ada_2005\n            and then Ekind (Ptyp) = E_Class_Wide_Type\n            and then Is_Interface (Ptyp)\n            and then Is_Task_Interface (Ptyp)\n          then\n-            Rewrite (N,\n-              Make_Function_Call (Loc,\n-                Name =>\n-                  New_Occurrence_Of (RTE (RE_Terminated), Loc),\n-                Parameter_Associations => New_List (\n-                  Make_Unchecked_Type_Conversion (Loc,\n-                    Subtype_Mark =>\n-                      New_Occurrence_Of (RTE (RO_ST_Task_Id), Loc),\n-                    Expression =>\n-                      Make_Selected_Component (Loc,\n-                        Prefix =>\n-                          New_Copy_Tree (Pref),\n-                        Selector_Name =>\n-                          Make_Identifier (Loc, Name_uDisp_Get_Task_Id))))));\n+            declare\n+               Id : constant Node_Id :=\n+                 New_Occurrence_Of\n+                   (Find_Prim_Op (Ptyp, Name_uDisp_Get_Task_Id), Loc);\n+               Call : constant Node_Id :=\n+                 Make_Function_Call (Loc,\n+                   Name => Id,\n+                   Parameter_Associations => New_List (Pref));\n+            begin\n+               Rewrite (N,\n+                 Make_Function_Call (Loc,\n+                   Name =>\n+                     New_Occurrence_Of (RTE (RE_Terminated), Loc),\n+                   Parameter_Associations => New_List (\n+                     Make_Unchecked_Type_Conversion (Loc,\n+                       Subtype_Mark =>\n+                         New_Occurrence_Of (RTE (RO_ST_Task_Id), Loc),\n+                       Expression => Call))));\n+            end;\n \n          elsif Restricted_Profile then\n             Rewrite (N,"}, {"sha": "485374ba0ff5c4908de6555c2ce8411ba60e61a6", "filename": "gcc/ada/exp_util.ads", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/31e358e1c8a0f896ec189b1fdb28dcb4a21a1e78/gcc%2Fada%2Fexp_util.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/31e358e1c8a0f896ec189b1fdb28dcb4a21a1e78/gcc%2Fada%2Fexp_util.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_util.ads?ref=31e358e1c8a0f896ec189b1fdb28dcb4a21a1e78", "patch": "@@ -592,11 +592,9 @@ package Exp_Util is\n    function Find_Prim_Op\n      (T    : Entity_Id;\n       Name : TSS_Name_Type) return Entity_Id;\n-   --  Find the first primitive operation of type T whose name has the form\n-   --  indicated by the name parameter (i.e. is a type support subprogram\n-   --  with the indicated suffix). This function allows use of a primitive\n-   --  operation which is not directly visible. If T is a class wide type,\n-   --  then the reference is to an operation of the corresponding root type.\n+   --  Same as Find_Prim_Op above, except we're searching for an op that has\n+   --  the form indicated by Name (i.e. is a type support subprogram with the\n+   --  indicated suffix).\n \n    function Find_Optional_Prim_Op\n      (T : Entity_Id; Name : Name_Id) return Entity_Id;"}, {"sha": "9ad370facb6a207e633f2be5fee143939c7e0427", "filename": "gcc/ada/sem_ch3.adb", "status": "modified", "additions": 21, "deletions": 23, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/31e358e1c8a0f896ec189b1fdb28dcb4a21a1e78/gcc%2Fada%2Fsem_ch3.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/31e358e1c8a0f896ec189b1fdb28dcb4a21a1e78/gcc%2Fada%2Fsem_ch3.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch3.adb?ref=31e358e1c8a0f896ec189b1fdb28dcb4a21a1e78", "patch": "@@ -3583,17 +3583,17 @@ package body Sem_Ch3 is\n       T     : Entity_Id;\n \n       E : Node_Id := Expression (N);\n-      --  E is set to Expression (N) throughout this routine. When\n-      --  Expression (N) is modified, E is changed accordingly.\n+      --  E is set to Expression (N) throughout this routine. When Expression\n+      --  (N) is modified, E is changed accordingly.\n \n       Prev_Entity : Entity_Id := Empty;\n \n       procedure Check_For_Null_Excluding_Components\n         (Obj_Typ  : Entity_Id;\n          Obj_Decl : Node_Id);\n-      --  Recursively verify that each null-excluding component of an object\n-      --  declaration's type has explicit initialization, and generate\n-      --  compile-time warnings for each one that does not.\n+      --  Verify that each null-excluding component of object declaration\n+      --  Obj_Decl carrying type Obj_Typ has explicit initialization. Emit\n+      --  a compile-time warning if this is not the case.\n \n       function Count_Tasks (T : Entity_Id) return Uint;\n       --  This function is called when a non-generic library level object of a\n@@ -3622,12 +3622,12 @@ package body Sem_Ch3 is\n         (Obj_Typ  : Entity_Id;\n          Obj_Decl : Node_Id)\n       is\n-\n          procedure Check_Component\n            (Comp_Typ  : Entity_Id;\n             Comp_Decl : Node_Id := Empty);\n-         --  Perform compile-time null-exclusion checks on a given component\n-         --  and all of its subcomponents, if any.\n+         --  Apply a compile-time null-exclusion check on a component denoted\n+         --  by its declaration Comp_Decl and type Comp_Typ, and all of its\n+         --  subcomponents (if any).\n \n          ---------------------\n          -- Check_Component --\n@@ -3641,15 +3641,14 @@ package body Sem_Ch3 is\n             T    : Entity_Id;\n \n          begin\n-            --  Return without further checking if the component has explicit\n-            --  initialization or does not come from source.\n+            --  Do not consider internally-generated components or those that\n+            --  are already initialized.\n \n-            if Present (Comp_Decl) then\n-               if not Comes_From_Source (Comp_Decl)\n-                 or else Present (Expression (Comp_Decl))\n-               then\n-                  return;\n-               end if;\n+            if Present (Comp_Decl)\n+              and then (not Comes_From_Source (Comp_Decl)\n+                         or else Present (Expression (Comp_Decl)))\n+            then\n+               return;\n             end if;\n \n             if Is_Incomplete_Or_Private_Type (Comp_Typ)\n@@ -3667,9 +3666,10 @@ package body Sem_Ch3 is\n             then\n                Null_Exclusion_Static_Checks (Obj_Decl, Comp_Decl);\n \n-            --  Check array type components\n+            --  Check array components\n \n             elsif Is_Array_Type (T) then\n+\n                --  There is no suitable component when the object is of an\n                --  array type. However, a namable component may appear at some\n                --  point during the recursive inspection, but not at the top\n@@ -3681,12 +3681,10 @@ package body Sem_Ch3 is\n                   Check_Component (Component_Type (T), Comp_Decl);\n                end if;\n \n-            --  If T allows named components, then iterate through them,\n-            --  recursively verifying all subcomponents.\n+            --  Verify all components of type T\n \n-            --  NOTE: Due to the complexities involved with checking components\n-            --  of nontrivial types with discriminants (variant records and\n-            --  the like), no static checking is performed on them. ???\n+            --  Note: No checks are performed on types with discriminants due\n+            --  to complexities involving variants. ???\n \n             elsif (Is_Concurrent_Type (T)\n                     or else Is_Incomplete_Or_Private_Type (T)\n@@ -3910,12 +3908,12 @@ package body Sem_Ch3 is\n       --  out some static checks.\n \n       if Ada_Version >= Ada_2005 then\n+\n          --  In case of aggregates we must also take care of the correct\n          --  initialization of nested aggregates bug this is done at the\n          --  point of the analysis of the aggregate (see sem_aggr.adb) ???\n \n          if Can_Never_Be_Null (T) then\n-\n             if Present (Expression (N))\n               and then Nkind (Expression (N)) = N_Aggregate\n             then"}, {"sha": "5c31c428c2fac72bc62181d21e4b76a78c470c7c", "filename": "gcc/ada/sem_ch6.adb", "status": "modified", "additions": 12, "deletions": 9, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/31e358e1c8a0f896ec189b1fdb28dcb4a21a1e78/gcc%2Fada%2Fsem_ch6.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/31e358e1c8a0f896ec189b1fdb28dcb4a21a1e78/gcc%2Fada%2Fsem_ch6.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch6.adb?ref=31e358e1c8a0f896ec189b1fdb28dcb4a21a1e78", "patch": "@@ -8763,18 +8763,20 @@ package body Sem_Ch6 is\n          if Present (Entity (E1)) then\n             return Entity (E1) = Entity (E2)\n \n-              --  One may be a discriminant that has been replaced by\n-              --  the corresponding discriminal.\n+              --  One may be a discriminant that has been replaced by the\n+              --  corresponding discriminal.\n \n-              or else (Chars (Entity (E1)) = Chars (Entity (E2))\n-                        and then Ekind (Entity (E1)) = E_Discriminant\n-                        and then Ekind (Entity (E2)) = E_In_Parameter)\n+              or else\n+                (Chars (Entity (E1)) = Chars (Entity (E2))\n+                  and then Ekind (Entity (E1)) = E_Discriminant\n+                  and then Ekind (Entity (E2)) = E_In_Parameter)\n \n              --  The discriminant of a protected type is transformed into\n              --  a local constant and then into a parameter of a protected\n              --  operation.\n \n-             or else (Ekind (Entity (E1)) = E_Constant\n+             or else\n+               (Ekind (Entity (E1)) = E_Constant\n                  and then Ekind (Entity (E2)) = E_In_Parameter\n                  and then Present (Discriminal_Link (Entity (E1)))\n                  and then Discriminal_Link (Entity (E1)) =\n@@ -8784,9 +8786,10 @@ package body Sem_Ch6 is\n              --  match if they have the same identifier, even though they\n              --  are different entities.\n \n-              or else (Chars (Entity (E1)) = Chars (Entity (E2))\n-                       and then Ekind (Entity (E1)) = E_Loop_Parameter\n-                       and then Ekind (Entity (E2)) = E_Loop_Parameter);\n+              or else\n+                (Chars (Entity (E1)) = Chars (Entity (E2))\n+                  and then Ekind (Entity (E1)) = E_Loop_Parameter\n+                  and then Ekind (Entity (E2)) = E_Loop_Parameter);\n \n          elsif Nkind (E1) = N_Expanded_Name\n            and then Nkind (E2) = N_Expanded_Name"}]}