{"sha": "62e98ef1a23b06c939d5fde19ac65d77a5922ccd", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjJlOThlZjFhMjNiMDZjOTM5ZDVmZGUxOWFjNjVkNzdhNTkyMmNjZA==", "commit": {"author": {"name": "David Malcolm", "email": "dmalcolm@redhat.com", "date": "2018-03-29T20:43:48Z"}, "committer": {"name": "David Malcolm", "email": "dmalcolm@gcc.gnu.org", "date": "2018-03-29T20:43:48Z"}, "message": "More #include suggestions (PR c++/84269)\n\nPR c++/84269 reports a number of names in the C and C++ standard\nlibraries for which we don't yet offer #include fix-it hints.\n\nThis patch adds them (up to comment #9).\n\ngcc/c-family/ChangeLog:\n\tPR c++/84269\n\t* known-headers.cc (get_stdlib_header_for_name): Add various names\n\tfrom <assert.h>, <string.h>, and <memory.h>; add more names from\n\t<stdio.h>.\n\ngcc/cp/ChangeLog:\n\tPR c++/84269\n\t* name-lookup.c (get_std_name_hint): Add names from <memory>,\n\t<tuple>, and <utility>.\n\ngcc/testsuite/ChangeLog:\n\tPR c++/84269\n\t* g++.dg/lookup/missing-std-include-6.C: New test.\n\t* g++.dg/lookup/missing-std-include.C: Add std::pair and\n\tstd::tuple tests.\n\t* g++.dg/spellcheck-reswords.C: Expect a hint about <cstring>.\n\t* g++.dg/spellcheck-stdlib.C: Add tests for names in <cstdio>,\n\t<cstring>, <cassert>, and <cstdlib>.\n\nFrom-SVN: r258966", "tree": {"sha": "9d01cf6e271276c71032bebae47e9ab8a33c3548", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9d01cf6e271276c71032bebae47e9ab8a33c3548"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/62e98ef1a23b06c939d5fde19ac65d77a5922ccd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/62e98ef1a23b06c939d5fde19ac65d77a5922ccd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/62e98ef1a23b06c939d5fde19ac65d77a5922ccd", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/62e98ef1a23b06c939d5fde19ac65d77a5922ccd/comments", "author": {"login": "davidmalcolm", "id": 1553248, "node_id": "MDQ6VXNlcjE1NTMyNDg=", "avatar_url": "https://avatars.githubusercontent.com/u/1553248?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidmalcolm", "html_url": "https://github.com/davidmalcolm", "followers_url": "https://api.github.com/users/davidmalcolm/followers", "following_url": "https://api.github.com/users/davidmalcolm/following{/other_user}", "gists_url": "https://api.github.com/users/davidmalcolm/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidmalcolm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidmalcolm/subscriptions", "organizations_url": "https://api.github.com/users/davidmalcolm/orgs", "repos_url": "https://api.github.com/users/davidmalcolm/repos", "events_url": "https://api.github.com/users/davidmalcolm/events{/privacy}", "received_events_url": "https://api.github.com/users/davidmalcolm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "1e2b90c4ac0b08279fdfe65c6fab3c49573f236c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1e2b90c4ac0b08279fdfe65c6fab3c49573f236c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1e2b90c4ac0b08279fdfe65c6fab3c49573f236c"}], "stats": {"total": 214, "additions": 213, "deletions": 1}, "files": [{"sha": "27245b7e60df47fe12475946f44f8f8052549988", "filename": "gcc/c-family/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/62e98ef1a23b06c939d5fde19ac65d77a5922ccd/gcc%2Fc-family%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/62e98ef1a23b06c939d5fde19ac65d77a5922ccd/gcc%2Fc-family%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2FChangeLog?ref=62e98ef1a23b06c939d5fde19ac65d77a5922ccd", "patch": "@@ -1,3 +1,10 @@\n+2018-03-29  David Malcolm  <dmalcolm@redhat.com>\n+\n+\tPR c++/84269\n+\t* known-headers.cc (get_stdlib_header_for_name): Add various names\n+\tfrom <assert.h>, <string.h>, and <memory.h>; add more names from\n+\t<stdio.h>.\n+\n 2018-03-27  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR c++/85061"}, {"sha": "5524d21631824beac9bccdee412e9d51c958ccb7", "filename": "gcc/c-family/known-headers.cc", "status": "modified", "additions": 32, "deletions": 1, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/62e98ef1a23b06c939d5fde19ac65d77a5922ccd/gcc%2Fc-family%2Fknown-headers.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/62e98ef1a23b06c939d5fde19ac65d77a5922ccd/gcc%2Fc-family%2Fknown-headers.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fknown-headers.cc?ref=62e98ef1a23b06c939d5fde19ac65d77a5922ccd", "patch": "@@ -57,6 +57,9 @@ get_stdlib_header_for_name (const char *name, enum stdlib lib)\n   gcc_assert (lib < NUM_STDLIBS);\n \n   static const stdlib_hint hints[] = {\n+    /* <assert.h> and <cassert>.  */\n+    {\"assert\", {\"<assert.h>\",  \"<cassert>\"} },\n+\n     /* <errno.h> and <cerrno>.  */\n     {\"errno\", {\"<errno.h>\", \"<cerrno>\"} },\n \n@@ -92,16 +95,44 @@ get_stdlib_header_for_name (const char *name, enum stdlib lib)\n     {\"size_t\", {\"<stddef.h>\", \"<cstddef>\"} },\n     {\"wchar_t\", {\"<stddef.h>\", NULL /* a keyword in C++ */} },\n \n-    /* <stdio.h>.  */\n+    /* <stdio.h> and <cstdio>.  */\n     {\"BUFSIZ\", {\"<stdio.h>\", \"<cstdio>\"} },\n     {\"EOF\", {\"<stdio.h>\", \"<cstdio>\"} },\n     {\"FILE\", {\"<stdio.h>\", \"<cstdio>\"} },\n     {\"FILENAME_MAX\", {\"<stdio.h>\", \"<cstdio>\"} },\n+    {\"fopen\", {\"<stdio.h>\", \"<cstdio>\"} },\n     {\"fpos_t\", {\"<stdio.h>\", \"<cstdio>\"} },\n+    {\"getchar\", {\"<stdio.h>\", \"<cstdio>\"} },\n+    {\"printf\", {\"<stdio.h>\", \"<cstdio>\"} },\n+    {\"snprintf\", {\"<stdio.h>\", \"<cstdio>\"} },\n+    {\"sprintf\", {\"<stdio.h>\", \"<cstdio>\"} },\n     {\"stderr\", {\"<stdio.h>\", \"<cstdio>\"} },\n     {\"stdin\", {\"<stdio.h>\", \"<cstdio>\"} },\n     {\"stdout\", {\"<stdio.h>\", \"<cstdio>\"} },\n \n+    /* <stdlib.h> and <cstdlib>.  */\n+    {\"free\", {\"<stdlib.h>\", \"<cstdlib>\"} },\n+    {\"malloc\", {\"<stdlib.h>\", \"<cstdlib>\"} },\n+    {\"realloc\", {\"<stdlib.h>\", \"<cstdlib>\"} },\n+\n+    /* <string.h> and <cstring>.  */\n+    {\"memchr\", {\"<string.h>\", \"<cstring>\"} },\n+    {\"memcmp\", {\"<string.h>\", \"<cstring>\"} },\n+    {\"memcpy\", {\"<string.h>\", \"<cstring>\"} },\n+    {\"memmove\", {\"<string.h>\", \"<cstring>\"} },\n+    {\"memset\", {\"<string.h>\", \"<cstring>\"} },\n+    {\"strcat\", {\"<string.h>\", \"<cstring>\"} },\n+    {\"strchr\", {\"<string.h>\", \"<cstring>\"} },\n+    {\"strcmp\", {\"<string.h>\", \"<cstring>\"} },\n+    {\"strcpy\", {\"<string.h>\", \"<cstring>\"} },\n+    {\"strlen\", {\"<string.h>\", \"<cstring>\"} },\n+    {\"strncat\", {\"<string.h>\", \"<cstring>\"} },\n+    {\"strncmp\", {\"<string.h>\", \"<cstring>\"} },\n+    {\"strncpy\", {\"<string.h>\", \"<cstring>\"} },\n+    {\"strrchr\", {\"<string.h>\", \"<cstring>\"} },\n+    {\"strspn\", {\"<string.h>\", \"<cstring>\"} },\n+    {\"strstr\", {\"<string.h>\", \"<cstring>\"} },\n+\n     /* <stdint.h>.  */\n     {\"PTRDIFF_MAX\", {\"<stdint.h>\", \"<cstdint>\"} },\n     {\"PTRDIFF_MIN\", {\"<stdint.h>\", \"<cstdint>\"} },"}, {"sha": "77c729c979e6ee4a7d0b6394c056845ee1490587", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/62e98ef1a23b06c939d5fde19ac65d77a5922ccd/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/62e98ef1a23b06c939d5fde19ac65d77a5922ccd/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=62e98ef1a23b06c939d5fde19ac65d77a5922ccd", "patch": "@@ -1,3 +1,9 @@\n+2018-03-29  David Malcolm  <dmalcolm@redhat.com>\n+\n+\tPR c++/84269\n+\t* name-lookup.c (get_std_name_hint): Add names from <memory>,\n+\t<tuple>, and <utility>.\n+\n 2018-03-29  Jason Merrill  <jason@redhat.com>\n \n \tPR c++/85093 - too many template args with pack expansion."}, {"sha": "061729a989b67bacdffe39e88c4045e075b26841", "filename": "gcc/cp/name-lookup.c", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/62e98ef1a23b06c939d5fde19ac65d77a5922ccd/gcc%2Fcp%2Fname-lookup.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/62e98ef1a23b06c939d5fde19ac65d77a5922ccd/gcc%2Fcp%2Fname-lookup.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fname-lookup.c?ref=62e98ef1a23b06c939d5fde19ac65d77a5922ccd", "patch": "@@ -5453,6 +5453,12 @@ get_std_name_hint (const char *name)\n     /* <map>.  */\n     {\"map\", \"<map>\"},\n     {\"multimap\", \"<map>\"},\n+    /* <memory>.  */\n+    {\"make_shared\", \"<memory>\"},\n+    {\"make_unique\", \"<memory>\"},\n+    {\"shared_ptr\", \"<memory>\"},\n+    {\"unique_ptr\", \"<memory>\"},\n+    {\"weak_ptr\", \"<memory>\"},\n     /* <queue>.  */\n     {\"queue\", \"<queue>\"},\n     {\"priority_queue\", \"<queue>\"},\n@@ -5472,6 +5478,9 @@ get_std_name_hint (const char *name)\n     {\"basic_stringstream\", \"<sstream>\"},\n     /* <stack>.  */\n     {\"stack\", \"<stack>\"},\n+    /* <tuple>.  */\n+    {\"make_tuple\", \"<tuple>\"},\n+    {\"tuple\", \"<tuple>\"},\n     /* <string>.  */\n     {\"string\", \"<string>\"},\n     {\"wstring\", \"<string>\"},\n@@ -5483,6 +5492,11 @@ get_std_name_hint (const char *name)\n     /* <unordered_set>.  */\n     {\"unordered_set\", \"<unordered_set>\"}, // C++11\n     {\"unordered_multiset\", \"<unordered_set>\"}, // C++11\n+    /* <utility>.  */\n+    {\"forward\", \"<utility>\"},\n+    {\"make_pair\", \"<utility>\"},\n+    {\"move\", \"<utility>\"},\n+    {\"pair\", \"<utility>\"},\n     /* <vector>.  */\n     {\"vector\", \"<vector>\"},\n   };"}, {"sha": "a8906ddbc98825f2b122ff223ce9b2060a3cc476", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/62e98ef1a23b06c939d5fde19ac65d77a5922ccd/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/62e98ef1a23b06c939d5fde19ac65d77a5922ccd/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=62e98ef1a23b06c939d5fde19ac65d77a5922ccd", "patch": "@@ -1,3 +1,13 @@\n+2018-03-29  David Malcolm  <dmalcolm@redhat.com>\n+\n+\tPR c++/84269\n+\t* g++.dg/lookup/missing-std-include-6.C: New test.\n+\t* g++.dg/lookup/missing-std-include.C: Add std::pair and\n+\tstd::tuple tests.\n+\t* g++.dg/spellcheck-reswords.C: Expect a hint about <cstring>.\n+\t* g++.dg/spellcheck-stdlib.C: Add tests for names in <cstdio>,\n+\t<cstring>, <cassert>, and <cstdlib>.\n+\n 2018-03-29  Vladimir Makarov  <vmakarov@redhat.com>\n \n \tPR inline-asm/84985"}, {"sha": "100bcc0aa0a22de8db378aacc91b515b8cb772e4", "filename": "gcc/testsuite/g++.dg/lookup/missing-std-include-6.C", "status": "added", "additions": 62, "deletions": 0, "changes": 62, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/62e98ef1a23b06c939d5fde19ac65d77a5922ccd/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flookup%2Fmissing-std-include-6.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/62e98ef1a23b06c939d5fde19ac65d77a5922ccd/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flookup%2Fmissing-std-include-6.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flookup%2Fmissing-std-include-6.C?ref=62e98ef1a23b06c939d5fde19ac65d77a5922ccd", "patch": "@@ -0,0 +1,62 @@\n+// { dg-do compile { target c++11 } }\n+\n+/* <memory>.  */\n+\n+template<class T>\n+void test_make_shared ()\n+{\n+  auto p = std::make_shared<T>(); // { dg-error \"'make_shared' is not a member of 'std'\" }\n+  // { dg-message \"'#include <memory>'\" \"\" { target *-*-* } .-1 }\n+  // { dg-error \"expected primary-expression before '>' token\" \"\" { target *-*-* } .-2 }\n+  // { dg-error \"expected primary-expression before '\\\\)' token\" \"\" { target *-*-* } .-3 }\n+}\n+\n+template<class T>\n+void test_make_unique ()\n+{\n+  auto p = std::make_unique<T>(); // { dg-error \"'make_unique' is not a member of 'std'\" }\n+  // { dg-message \"'#include <memory>'\" \"\" { target *-*-* } .-1 }\n+  // { dg-error \"expected primary-expression before '>' token\" \"\" { target *-*-* } .-2 }\n+  // { dg-error \"expected primary-expression before '\\\\)' token\" \"\" { target *-*-* } .-3 }\n+}\n+\n+std::shared_ptr<int> test_shared_ptr; // { dg-error \"'shared_ptr' in namespace 'std' does not name a template type\" }\n+// { dg-message \"'#include <memory>'\" \"\" { target *-*-* } .-1 }\n+\n+std::unique_ptr<int> test_unique_ptr; // { dg-error \"'unique_ptr' in namespace 'std' does not name a template type\" }\n+// { dg-message \"'#include <memory>'\" \"\" { target *-*-* } .-1 }\n+\n+std::weak_ptr<int> test_weak_ptr; // { dg-error \"'weak_ptr' in namespace 'std' does not name a template type\" }\n+// { dg-message \"'#include <memory>'\" \"\" { target *-*-* } .-1 }\n+\n+/* <tuple>.  */\n+\n+void test_make_tuple (int i, int j, int k)\n+{\n+  auto t = std::make_tuple (i, j, k); // { dg-error \"'make_tuple' is not a member of 'std'\" }\n+  // { dg-message \"'#include <tuple>'\" \"\" { target *-*-* } .-1 }\n+}\n+\n+/* <utility>.  */\n+\n+template<class T>\n+void test_forward(T&& arg) \n+{\n+  std::forward<T>(arg); // { dg-error \"'forward' is not a member of 'std'\" }\n+  // { dg-message \"'#include <utility>'\" \"\" { target *-*-* } .-1 }\n+  // { dg-error \"expected primary-expression before '>' token\" \"\" { target *-*-* } .-2 }\n+}\n+\n+void test_make_pair (int i, int j)\n+{\n+  auto p = std::make_pair (i, j); // { dg-error \"'make_pair' is not a member of 'std'\" }\n+  // { dg-message \"'#include <utility>'\" \"\" { target *-*-* } .-1 }\n+}\n+\n+template<class T>\n+void test_move(T&& arg) \n+{\n+  std::move<T>(arg); // { dg-error \"'move' is not a member of 'std'\" }\n+  // { dg-message \"'#include <utility>'\" \"\" { target *-*-* } .-1 }\n+  // { dg-error \"expected primary-expression before '>' token\" \"\" { target *-*-* } .-2 }\n+}"}, {"sha": "54527602eb86221bf57d6593287d4023f42c2981", "filename": "gcc/testsuite/g++.dg/lookup/missing-std-include.C", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/62e98ef1a23b06c939d5fde19ac65d77a5922ccd/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flookup%2Fmissing-std-include.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/62e98ef1a23b06c939d5fde19ac65d77a5922ccd/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flookup%2Fmissing-std-include.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flookup%2Fmissing-std-include.C?ref=62e98ef1a23b06c939d5fde19ac65d77a5922ccd", "patch": "@@ -26,4 +26,12 @@ void test (void)\n   std::list<int> lst;  // { dg-error \".list. is not a member of .std.\" }\n   // { dg-message \".std::list. is defined in header .<list>.; did you forget to .#include <list>.?\" \"\" { target *-*-* } .-1 }\n   // { dg-error \"expected primary-expression before .int.\" \"\" { target *-*-* } .-2 }\n+\n+  std::pair<int,float> p; // { dg-error \".pair. is not a member of .std.\" }\n+  // { dg-message \".std::pair. is defined in header .<utility>.; did you forget to .#include <utility>.?\" \"\" { target *-*-* } .-1 }\n+  // { dg-error \"expected primary-expression before .int.\" \"\" { target *-*-* } .-2 }\n+\n+  std::tuple<int,float> p; // { dg-error \".tuple. is not a member of .std.\" }\n+  // { dg-message \".std::tuple. is defined in header .<tuple>.; did you forget to .#include <tuple>.?\" \"\" { target *-*-* } .-1 }\n+  // { dg-error \"expected primary-expression before .int.\" \"\" { target *-*-* } .-2 }\n }"}, {"sha": "0687666744afe08d0bca2c94d4bed0f8b3695e04", "filename": "gcc/testsuite/g++.dg/spellcheck-reswords.C", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/62e98ef1a23b06c939d5fde19ac65d77a5922ccd/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fspellcheck-reswords.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/62e98ef1a23b06c939d5fde19ac65d77a5922ccd/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fspellcheck-reswords.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fspellcheck-reswords.C?ref=62e98ef1a23b06c939d5fde19ac65d77a5922ccd", "patch": "@@ -8,4 +8,5 @@ void pr80567 (void *p)\n {\n   memset (p, 0, 4); // { dg-error \"not declared\" }\n   // { dg-bogus \"'else'\" \"\" { target *-*-*} .-1 }\n+  // { dg-message \"'#include <cstring>'\" \"\" { target *-*-*} .-2 }\n }"}, {"sha": "11a4e3e8c41ae6e21b239dd099d2057257386450", "filename": "gcc/testsuite/g++.dg/spellcheck-stdlib.C", "status": "modified", "additions": 73, "deletions": 0, "changes": 73, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/62e98ef1a23b06c939d5fde19ac65d77a5922ccd/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fspellcheck-stdlib.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/62e98ef1a23b06c939d5fde19ac65d77a5922ccd/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fspellcheck-stdlib.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fspellcheck-stdlib.C?ref=62e98ef1a23b06c939d5fde19ac65d77a5922ccd", "patch": "@@ -35,6 +35,21 @@ void test_cstdio (void)\n \n   EOF; // { dg-error \"'EOF' was not declared\" }\n   // { dg-message \"'EOF' is defined in header '<cstdio>'; did you forget to '#include <cstdio>'?\" \"\" { target *-*-* } .-1 }\n+\n+  fopen (\"test.txt\"); // { dg-error \"'fopen' was not declared\" }\n+  // { dg-message \"'#include <cstdio>'\" \"\" { target *-*-* } .-1 }\n+\n+  printf (\"test\\n\"); // { dg-error \"'printf' was not declared\" }\n+  // { dg-message \"'#include <cstdio>'\" \"\" { target *-*-* } .-1 }\n+  \n+  char tmp[16];\n+  sprintf (tmp, \"test\\n\");  // { dg-error \"'sprintf' was not declared\" }\n+  // { dg-message \"'#include <cstdio>'\" \"\" { target *-*-* } .-1 }\n+  snprintf (tmp, 16, \"test\\n\");  // { dg-error \"'snprintf' was not declared\" }\n+  // { dg-message \"'#include <cstdio>'\" \"\" { target *-*-* } .-1 }\n+\n+  getchar ();  // { dg-error \"'getchar' was not declared\" }\n+  // { dg-message \"'#include <cstdio>'\" \"\" { target *-*-* } .-1 }\n }\n \n /* Missing <cerrno>.  */\n@@ -62,6 +77,64 @@ int test_INT_MAX (void)\n   // { dg-message \"'INT_MAX' is defined in header '<climits>'; did you forget to '#include <climits>'?\" \"\" { target *-*-* } INT_MAX_line }\n }\n \n+/* Missing <cstring>.  */\n+\n+void test_cstring (char *dest, char *src)\n+{\n+  memchr(dest, 'a', 4); // { dg-error \"was not declared\" }\n+  // { dg-message \"'#include <cstring>'\" \"\" { target *-*-* } .-1 }\n+  memcmp(dest, src, 4); // { dg-error \"was not declared\" }\n+  // { dg-message \"'#include <cstring>'\" \"\" { target *-*-* } .-1 }\n+  memcpy(dest, src, 4); // { dg-error \"was not declared\" }\n+  // { dg-message \"'#include <cstring>'\" \"\" { target *-*-* } .-1 }\n+  memmove(dest, src, 4); // { dg-error \"was not declared\" }\n+  // { dg-message \"'#include <cstring>'\" \"\" { target *-*-* } .-1 }\n+  memset(dest, 'a', 4); // { dg-error \"was not declared\" }\n+  // { dg-message \"'#include <cstring>'\" \"\" { target *-*-* } .-1 }\n+  strcat(dest, \"test\"); // { dg-error \"was not declared\" }\n+  // { dg-message \"'#include <cstring>'\" \"\" { target *-*-* } .-1 }\n+  strchr(\"test\", 'e'); // { dg-error \"was not declared\" }\n+  // { dg-message \"'#include <cstring>'\" \"\" { target *-*-* } .-1 }\n+  strcmp(dest, \"test\"); // { dg-error \"was not declared\" }\n+  // { dg-message \"'#include <cstring>'\" \"\" { target *-*-* } .-1 }\n+  strcpy(dest, \"test\"); // { dg-error \"was not declared\" }\n+  // { dg-message \"'#include <cstring>'\" \"\" { target *-*-* } .-1 }\n+  strlen(\"test\"); // { dg-error \"was not declared\" }\n+  // { dg-message \"'#include <cstring>'\" \"\" { target *-*-* } .-1 }\n+  strncat(dest, \"test\", 3); // { dg-error \"was not declared\" }\n+  // { dg-message \"'#include <cstring>'\" \"\" { target *-*-* } .-1 }\n+  strncmp(dest, \"test\", 3); // { dg-error \"was not declared\" }\n+  // { dg-message \"'#include <cstring>'\" \"\" { target *-*-* } .-1 }\n+  strncpy(dest, \"test\", 3); // { dg-error \"was not declared\" }\n+  // { dg-message \"'#include <cstring>'\" \"\" { target *-*-* } .-1 }\n+  strrchr(\"test\", 'e'); // { dg-error \"was not declared\" }\n+  // { dg-message \"'#include <cstring>'\" \"\" { target *-*-* } .-1 }\n+  strspn(dest, \"test\"); // { dg-error \"was not declared\" }\n+  // { dg-message \"'#include <cstring>'\" \"\" { target *-*-* } .-1 }\n+  strstr(dest, \"test\"); // { dg-error \"was not declared\" }\n+  // { dg-message \"'#include <cstring>'\" \"\" { target *-*-* } .-1 }\n+}\n+\n+/* Missing <cassert>.  */\n+\n+void test_cassert (int a, int b)\n+{\n+  assert (a == b); // { dg-error \"was not declared\" }\n+  // { dg-message \"'#include <cassert>'\" \"\" { target *-*-* } .-1 }\n+}\n+\n+/* Missing <cstdlib>.  */\n+\n+void test_cstdlib (void *q)\n+{\n+  void *ptr = malloc (64); // { dg-error \"was not declared\" }\n+  // { dg-message \"'#include <cstdlib>'\" \"\" { target *-*-* } .-1 }\n+  free (ptr); // { dg-error \"was not declared\" }\n+  // { dg-message \"'#include <cstdlib>'\" \"\" { target *-*-* } .-1 }\n+  q = realloc (q, 1024); // { dg-error \"was not declared\" }\n+  // { dg-message \"'#include <cstdlib>'\" \"\" { target *-*-* } .-1 }\n+}\n+\n /* Verify that we don't offer suggestions to stdlib globals names when\n    there's an explicit namespace.  */\n "}]}