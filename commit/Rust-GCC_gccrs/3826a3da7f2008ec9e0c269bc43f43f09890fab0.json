{"sha": "3826a3da7f2008ec9e0c269bc43f43f09890fab0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzgyNmEzZGE3ZjIwMDhlYzllMGMyNjliYzQzZjQzZjA5ODkwZmFiMA==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1995-01-25T19:40:53Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1995-01-25T19:40:53Z"}, "message": "Update comments.\n\nFrom-SVN: r8811", "tree": {"sha": "19bb862296df17f64d83291dca5b3c45e5bdcda3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/19bb862296df17f64d83291dca5b3c45e5bdcda3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3826a3da7f2008ec9e0c269bc43f43f09890fab0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3826a3da7f2008ec9e0c269bc43f43f09890fab0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3826a3da7f2008ec9e0c269bc43f43f09890fab0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3826a3da7f2008ec9e0c269bc43f43f09890fab0/comments", "author": null, "committer": null, "parents": [{"sha": "e7f6e33b0fdcfda5a33c6408c3e490231e446ecd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e7f6e33b0fdcfda5a33c6408c3e490231e446ecd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e7f6e33b0fdcfda5a33c6408c3e490231e446ecd"}], "stats": {"total": 44, "additions": 22, "deletions": 22}, "files": [{"sha": "6d126def85778e8fcefc38d622adc92af8f4ac02", "filename": "gcc/c-aux-info.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3826a3da7f2008ec9e0c269bc43f43f09890fab0/gcc%2Fc-aux-info.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3826a3da7f2008ec9e0c269bc43f43f09890fab0/gcc%2Fc-aux-info.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-aux-info.c?ref=3826a3da7f2008ec9e0c269bc43f43f09890fab0", "patch": "@@ -1,8 +1,8 @@\n /* Generate information regarding function declarations and definitions based\n    on information stored in GCC's tree structure.  This code implements the\n    -aux-info option.\n-   Copyright (C) 1989, 1991, 1994 Free Software Foundation, Inc.\n-   Contributed by Ron Guilmette (rfg@netcom.com).\n+   Copyright (C) 1989, 1991, 1994, 1995 Free Software Foundation, Inc.\n+   Contributed by Ron Guilmette (rfg@segfault.us.com).\n \n This file is part of GNU CC.\n \n@@ -208,7 +208,7 @@ gen_formal_list_for_type (fntype, style)\n      to output the \"void\" verbatim, and that what we do.  In the former case,\n      we do our best to give protoize something nice to insert.\n \n-     This \"something nice\" should be something that is still legal (when\n+     This \"something nice\" should be something that is still valid (when\n      re-compiled) but something that can clearly indicate to the user that\n      more typing information (for the parameter list) should be added (by\n      hand) at some convenient moment."}, {"sha": "d72c05501fc224934b0f38ccd3c8151448ad6184", "filename": "gcc/cccp.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3826a3da7f2008ec9e0c269bc43f43f09890fab0/gcc%2Fcccp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3826a3da7f2008ec9e0c269bc43f43f09890fab0/gcc%2Fcccp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcccp.c?ref=3826a3da7f2008ec9e0c269bc43f43f09890fab0", "patch": "@@ -7521,7 +7521,7 @@ skip_quoted_string (bp, limit, start_line, count_newlines, backslash_newlines_p,\n       bp++;\n     } else if (c == '\\n') {\n       if (traditional) {\n- \t/* Unterminated strings and character constants are 'legal'.  */\n+ \t/* Unterminated strings and character constants are 'valid'.  */\n  \tbp--;\t/* Don't consume the newline. */\n  \tif (eofp)\n  \t  *eofp = 1;"}, {"sha": "4e8f4fa30de1329523ab4b4740fa889d10575733", "filename": "gcc/config/convex/convex.md", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3826a3da7f2008ec9e0c269bc43f43f09890fab0/gcc%2Fconfig%2Fconvex%2Fconvex.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3826a3da7f2008ec9e0c269bc43f43f09890fab0/gcc%2Fconfig%2Fconvex%2Fconvex.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fconvex%2Fconvex.md?ref=3826a3da7f2008ec9e0c269bc43f43f09890fab0", "patch": "@@ -1,5 +1,5 @@\n ;;- Machine description for GNU compiler, Convex Version\n-;;  Copyright (C) 1988, 1994 Free Software Foundation, Inc.\n+;;  Copyright (C) 1988, 1994, 1995 Free Software Foundation, Inc.\n \n ;; This file is part of GNU CC.\n \n@@ -1268,7 +1268,7 @@\n ;; Use\n ;;     ((a >> b) ^ signbit) - signbit\n ;; where signbit is (1 << 63) >> b\n-;; Works for 0..63.  Does not work for 64; unfortunate but legal.\n+;; Works for 0..63.  Does not work for 64; unfortunate but valid.\n \n (define_expand \"ashrdi3\"\n   [(set (match_operand:DI 0 \"register_operand\" \"\")"}, {"sha": "2633183899e465e26b738430715191d532aa0dd6", "filename": "gcc/config/m68k/m68k.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3826a3da7f2008ec9e0c269bc43f43f09890fab0/gcc%2Fconfig%2Fm68k%2Fm68k.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3826a3da7f2008ec9e0c269bc43f43f09890fab0/gcc%2Fconfig%2Fm68k%2Fm68k.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68k%2Fm68k.md?ref=3826a3da7f2008ec9e0c269bc43f43f09890fab0", "patch": "@@ -5464,7 +5464,7 @@\n ;;\n ;; The strategy I use here is to use SYMBOL_REF_FLAG to differentiate \n ;; these two different operands. The macro LEGITIMATE_PIC_OPERAND_P needs\n-;; to be changed to recognize function calls symbol_ref operand as a legal \n+;; to be changed to recognize function calls symbol_ref operand as a valid \n ;; PIC operand (by checking whether SYMBOL_REF_FLAG is set). This will \n ;; avoid the compiler to load this symbol_ref operand into a register. \n ;; Remember, the operand \"foo@PLTPC\" cannot be called via jsr directly "}, {"sha": "b31a7a9ac900d9826c5e31f7c6e039ac152aea80", "filename": "gcc/config/m88k/x-dolph", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3826a3da7f2008ec9e0c269bc43f43f09890fab0/gcc%2Fconfig%2Fm88k%2Fx-dolph", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3826a3da7f2008ec9e0c269bc43f43f09890fab0/gcc%2Fconfig%2Fm88k%2Fx-dolph", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm88k%2Fx-dolph?ref=3826a3da7f2008ec9e0c269bc43f43f09890fab0", "patch": "@@ -1,5 +1,5 @@\n # Use link editor directives to make NULL pointers point to \n-# illegal addresses.\n+# invalid addresses.\n \n EXTRA_PARTS=crtbegin.o crtend.o gcc.ld\n "}, {"sha": "cb74328fd97053a77a375ac0b987a0b9e7864f29", "filename": "gcc/config/mips/mips.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3826a3da7f2008ec9e0c269bc43f43f09890fab0/gcc%2Fconfig%2Fmips%2Fmips.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3826a3da7f2008ec9e0c269bc43f43f09890fab0/gcc%2Fconfig%2Fmips%2Fmips.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.md?ref=3826a3da7f2008ec9e0c269bc43f43f09890fab0", "patch": "@@ -2861,7 +2861,7 @@ move\\\\t%0,%z4\\\\n\\\\\n       DONE;\n     }\n \n-  /* If operands[1] is a constant address illegal for pic, then we need to\n+  /* If operands[1] is a constant address invalid for pic, then we need to\n      handle it just like LEGITIMIZE_ADDRESS does.  */\n   if (flag_pic && pic_address_needs_scratch (operands[1]))\n     {"}, {"sha": "c475e694f5f76315f8eb27c167b124c230d41592", "filename": "gcc/config/ns32k/ns32k.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3826a3da7f2008ec9e0c269bc43f43f09890fab0/gcc%2Fconfig%2Fns32k%2Fns32k.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3826a3da7f2008ec9e0c269bc43f43f09890fab0/gcc%2Fconfig%2Fns32k%2Fns32k.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fns32k%2Fns32k.c?ref=3826a3da7f2008ec9e0c269bc43f43f09890fab0", "patch": "@@ -1,5 +1,5 @@\n /* Subroutines for assembler code output on the NS32000.\n-   Copyright (C) 1988, 1994 Free Software Foundation, Inc.\n+   Copyright (C) 1988, 1994, 1995 Free Software Foundation, Inc.\n \n This file is part of GNU CC.\n \n@@ -202,7 +202,7 @@ gen_indexed_expr (base, index, scale)\n {\n   rtx addr;\n \n-  /* This generates an illegal addressing mode, if BASE is\n+  /* This generates an invalid addressing mode, if BASE is\n      fp or sp.  This is handled by PRINT_OPERAND_ADDRESS.  */\n   if (GET_CODE (base) != REG && GET_CODE (base) != CONST_INT)\n     base = gen_rtx (MEM, SImode, base);"}, {"sha": "c8c39c1ad4469b3a996fa576c586e248216e48ca", "filename": "gcc/config/sparc/sparc.md", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3826a3da7f2008ec9e0c269bc43f43f09890fab0/gcc%2Fconfig%2Fsparc%2Fsparc.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3826a3da7f2008ec9e0c269bc43f43f09890fab0/gcc%2Fconfig%2Fsparc%2Fsparc.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsparc.md?ref=3826a3da7f2008ec9e0c269bc43f43f09890fab0", "patch": "@@ -1538,7 +1538,7 @@\n    (set_attr \"length\" \"2\")])\n \n ;;; ??? This pattern originally clobbered a scratch register.  However, this\n-;;; is illegal, the movdi pattern may not use a temp register because it\n+;;; is invalid, the movdi pattern may not use a temp register because it\n ;;; may be called from reload to reload a DImode value.  In that case, we\n ;;; end up with a scratch register that never gets allocated.  To avoid this,\n ;;; we use global register 1 which is never otherwise used by gcc as a temp.\n@@ -3441,7 +3441,7 @@\n   \"smul %1,%2,%R0\\;rd %%y,%0\"\n   [(set_attr \"length\" \"2\")])\n \n-;; Extra pattern, because sign_extend of a constant isn't legal.\n+;; Extra pattern, because sign_extend of a constant isn't valid.\n \n (define_insn \"const_mulsidi3\"\n   [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n@@ -3509,7 +3509,7 @@\n   \"umul %1,%2,%R0\\;rd %%y,%0\"\n   [(set_attr \"length\" \"2\")])\n \n-;; Extra pattern, because sign_extend of a constant isn't legal.\n+;; Extra pattern, because sign_extend of a constant isn't valid.\n \n (define_insn \"const_umulsidi3\"\n   [(set (match_operand:DI 0 \"register_operand\" \"=r\")"}, {"sha": "bcec8cde3544e2477578fcb9148e9b9f1b8539b8", "filename": "gcc/cse.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3826a3da7f2008ec9e0c269bc43f43f09890fab0/gcc%2Fcse.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3826a3da7f2008ec9e0c269bc43f43f09890fab0/gcc%2Fcse.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcse.c?ref=3826a3da7f2008ec9e0c269bc43f43f09890fab0", "patch": "@@ -1,5 +1,5 @@\n /* Common subexpression elimination for GNU compiler.\n-   Copyright (C) 1987, 88, 89, 92, 93, 1994 Free Software Foundation, Inc.\n+   Copyright (C) 1987, 88, 89, 92, 93, 94, 1995 Free Software Foundation, Inc.\n \n This file is part of GNU CC.\n \n@@ -6261,7 +6261,7 @@ cse_insn (insn, in_libcall_block)\n \n       /* If this is a STRICT_LOW_PART assignment, src_eqv corresponds to the\n \t value of the INNER register, not the destination.  So it is not\n-\t a legal substitution for the source.  But save it for later.  */\n+\t a valid substitution for the source.  But save it for later.  */\n       if (GET_CODE (dest) == STRICT_LOW_PART)\n \tsrc_eqv_here = 0;\n       else"}, {"sha": "823afcdcbffbcd752cb9eedf48a28723f31c2f21", "filename": "gcc/protoize.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3826a3da7f2008ec9e0c269bc43f43f09890fab0/gcc%2Fprotoize.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3826a3da7f2008ec9e0c269bc43f43f09890fab0/gcc%2Fprotoize.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fprotoize.c?ref=3826a3da7f2008ec9e0c269bc43f43f09890fab0", "patch": "@@ -1,5 +1,5 @@\n /* Protoize program - Original version by Ron Guilmette at MCC.\n-   Copyright (C) 1989, 1992, 1993, 1994 Free Software Foundation, Inc.\n+   Copyright (C) 1989, 1992, 1993, 1994, 1995 Free Software Foundation, Inc.\n \n This file is part of GNU CC.\n \n@@ -812,7 +812,7 @@ restore_pointers ()\n   repl_write_ptr = saved_repl_write_ptr;\n }\n \n-/* Return true if the given character is a legal identifier character.  */\n+/* Return true if the given character is a valid identifier character.  */\n \n static int\n is_id_char (ch)\n@@ -3486,7 +3486,7 @@ find_rightmost_formals_list (clean_text_p)\n          sure that this is in fact the right paren that we were looking for.\n \n          The one we were looking for *must* be followed by either a '{' or\n-         by an alphabetic character, while others *cannot* legally be followed\n+         by an alphabetic character, while others *cannot* validly be followed\n          by such characters.  */\n \n       if ((ch == '{') || isalpha (ch))"}, {"sha": "49c37b15f2f70e72ecc1a3986d3bfad999e0fac2", "filename": "gcc/sched.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3826a3da7f2008ec9e0c269bc43f43f09890fab0/gcc%2Fsched.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3826a3da7f2008ec9e0c269bc43f43f09890fab0/gcc%2Fsched.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsched.c?ref=3826a3da7f2008ec9e0c269bc43f43f09890fab0", "patch": "@@ -1,5 +1,5 @@\n /* Instruction scheduling pass.\n-   Copyright (C) 1992, 1993, 1994 Free Software Foundation, Inc.\n+   Copyright (C) 1992, 1993, 1994, 1995 Free Software Foundation, Inc.\n    Contributed by Michael Tiemann (tiemann@cygnus.com)\n    Enhanced by, and currently maintained by, Jim Wilson (wilson@cygnus.com)\n \n@@ -3426,7 +3426,7 @@ schedule_block (b, file)\n \t\t  {\n \t\t    if ((REG_NOTE_KIND (link) == REG_DEAD\n \t\t\t || REG_NOTE_KIND (link) == REG_UNUSED)\n-\t\t\t/* Verify that the REG_NOTE has a legal value.  */\n+\t\t\t/* Verify that the REG_NOTE has a valid value.  */\n \t\t\t&& GET_CODE (XEXP (link, 0)) == REG)\n \t\t      {\n \t\t\tregister int regno = REGNO (XEXP (link, 0));\n@@ -3529,7 +3529,7 @@ schedule_block (b, file)\n \t      next = XEXP (link, 1);\n \t      if ((REG_NOTE_KIND (link) == REG_DEAD\n \t\t   || REG_NOTE_KIND (link) == REG_UNUSED)\n-\t\t  /* Verify that the REG_NOTE has a legal value.  */\n+\t\t  /* Verify that the REG_NOTE has a valid value.  */\n \t\t  && GET_CODE (XEXP (link, 0)) == REG)\n \t\t{\n \t\t  register int regno = REGNO (XEXP (link, 0));"}]}