{"sha": "784b508c3046bdf7ae23ce8bad7c03e15ec63312", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Nzg0YjUwOGMzMDQ2YmRmN2FlMjNjZThiYWQ3YzAzZTE1ZWM2MzMxMg==", "commit": {"author": {"name": "Andi Kleen", "email": "ak@linux.intel.com", "date": "2014-11-11T05:10:35Z"}, "committer": {"name": "Andi Kleen", "email": "ak@gcc.gnu.org", "date": "2014-11-11T05:10:35Z"}, "message": "Add test cases for all the new cilk errors\n\ngcc/testsuite/:\n\n2014-11-10  Andi Kleen  <ak@linux.intel.com>\n\n\t* c-c++-common/cilk-plus/CK/errors.c: New test.\n\nFrom-SVN: r217334", "tree": {"sha": "e91ccb485c9bdac3132369b1679b396d6eba4edc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e91ccb485c9bdac3132369b1679b396d6eba4edc"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/784b508c3046bdf7ae23ce8bad7c03e15ec63312", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/784b508c3046bdf7ae23ce8bad7c03e15ec63312", "html_url": "https://github.com/Rust-GCC/gccrs/commit/784b508c3046bdf7ae23ce8bad7c03e15ec63312", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/784b508c3046bdf7ae23ce8bad7c03e15ec63312/comments", "author": null, "committer": null, "parents": [{"sha": "e64b984d9b74210d8a3db25791558f13a6004be4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e64b984d9b74210d8a3db25791558f13a6004be4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e64b984d9b74210d8a3db25791558f13a6004be4"}], "stats": {"total": 60, "additions": 60, "deletions": 0}, "files": [{"sha": "56214a198583c24b24eb63dea64e566ce272d430", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/784b508c3046bdf7ae23ce8bad7c03e15ec63312/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/784b508c3046bdf7ae23ce8bad7c03e15ec63312/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=784b508c3046bdf7ae23ce8bad7c03e15ec63312", "patch": "@@ -1,3 +1,7 @@\n+2014-11-10  Andi Kleen  <ak@linux.intel.com>\n+\n+\t* c-c++-common/cilk-plus/CK/errors.c: New test.\n+\n 2014-11-11  Uros Bizjak  <ubizjak@gmail.com>\n \t    Ilya Enkovich  <ilya.enkovich@intel.com>\n "}, {"sha": "ca2032c7c9a8e72e6b71fa5e7fc541f96d0f62d0", "filename": "gcc/testsuite/c-c++-common/cilk-plus/CK/errors.c", "status": "added", "additions": 56, "deletions": 0, "changes": 56, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/784b508c3046bdf7ae23ce8bad7c03e15ec63312/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fcilk-plus%2FCK%2Ferrors.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/784b508c3046bdf7ae23ce8bad7c03e15ec63312/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fcilk-plus%2FCK%2Ferrors.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fcilk-plus%2FCK%2Ferrors.c?ref=784b508c3046bdf7ae23ce8bad7c03e15ec63312", "patch": "@@ -0,0 +1,56 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-fcilkplus\" } */\n+\n+int func_2(void);\n+\n+int check_spawn(int v)\n+{\n+  if (_Cilk_spawn func_2()) /* { dg-error \"cannot contain\" \"\" { target c } } */\n+  /* XXX: no error in C++ */\n+    ;\n+  if (v + _Cilk_spawn func_2())  /* { dg-error \"cannot contain\" \"\" { target c } } */\n+  /* { dg-error \"invalid use\" \"\" { target c++ } 11 } */\n+    ;\n+  if (v, _Cilk_spawn func_2()) /* { dg-error \"spawned function call cannot be part\" } */\n+    ;\n+  v, _Cilk_spawn func_2(); /* { dg-error \"spawned function call cannot be part\" } */\n+  while (_Cilk_spawn func_2())  /* { dg-error \"a condition for while statement\" } */\n+    ;\n+  while (v + _Cilk_spawn func_2())  /* { dg-error \"a condition for while statement\" } */\n+    ;\n+  for (; _Cilk_spawn func_2() ;)  /* { dg-error \"cannot be used\" } */\n+    ;\n+  for (; v + _Cilk_spawn func_2() ;)  /* { dg-error \"cannot be used\" } */\n+    ;\n+  v + _Cilk_spawn func_2(); /* { dg-error } */\n+  for (_Cilk_spawn func_2() ;;)\n+    ;\n+  for (;; _Cilk_spawn func_2())\n+    ;\n+  do {} while(_Cilk_spawn func_2());  /* { dg-error \"cannot be used\" } */\n+  do {} while(v + _Cilk_spawn func_2());  /* { dg-error \"cannot be used\" } */\n+  switch (_Cilk_spawn func_2())   /* { dg-error \"cannot be used\" } */\n+    {\n+    default: break;\n+    }\n+  goto *(_Cilk_spawn func_2()); /* { dg-error \"cannot be used\" } */\n+\n+  return _Cilk_spawn func_2(); /* { dg-error \"is not allowed\" } */\n+}\n+\n+int check_array_notation(int x[100], int y[100])\n+{\n+  x[0:100] = y[0:100];\n+  for (; x[0:100] = y[0:100]; )  /* { dg-error \"cannot be used\" } */\n+    ;\n+  while (x[0:100] = y[0:100])  /* { dg-error \"cannot be used\" } */\n+    ;\n+  switch (x[0:100] = y[0:100])  /* { dg-error \"cannot be used\" } */\n+    {\n+      default: break;\n+    }\n+  do {} while (x[0:100] = y[0:100]);  /* { dg-error \"cannot be used\" } */\n+  if (x[0:100] = y[0:100]) /* allowed */\n+    ;\n+  return x[0:100] = y[0:100]; /* { dg-error \"cannot be used\" } */\n+}"}]}