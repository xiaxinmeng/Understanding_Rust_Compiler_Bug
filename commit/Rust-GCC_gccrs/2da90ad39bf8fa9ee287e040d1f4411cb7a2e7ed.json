{"sha": "2da90ad39bf8fa9ee287e040d1f4411cb7a2e7ed", "node_id": "C_kwDOANBUbNoAKDJkYTkwYWQzOWJmOGZhOWVlMjg3ZTA0MGQxZjQ0MTFjYjdhMmU3ZWQ", "commit": {"author": {"name": "Will Wray", "email": "wjwray@gmail.com", "date": "2022-01-15T00:28:53Z"}, "committer": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2022-01-23T22:27:06Z"}, "message": "c++: designated init of char array by string constant [PR55227]\n\nThere are two underlying bugs in the designated initialization of char array\nfields by string literals that cause:\n\n(1) Rejection of valid cases with:\n  (a) brace-enclosed string literal initializer (of any valid size), or\n  (b) unbraced string literal shorter than the target char array field.\n\n(2) Acceptance of invalid cases with designators appearing within the braces\n    of a braced string literal, in which case the bogus 'designator' was\n    being entirely ignored and the string literal treated as a positional\n    initializer.\n\nThe fixes above allow to address a FIXME in cp_complete_array_type:\n\n  /* FIXME: this code is duplicated from reshape_init.\n     Probably we should just call reshape_init here?  */\n\nI believe that this was obstructed by the designator bugs (see comment here\nhttps://patchwork.ozlabs.org/project/gcc/list/?series=199783)\n\n\tPR c++/55227\n\ngcc/cp/ChangeLog:\n\n\t* decl.cc (reshape_init_r): Only call has_designator_check when\n\tfirst_initializer_p or for the inner constructor element.\n\t(cp_complete_array_type): Call reshape_init on braced-init-list.\n\ngcc/testsuite/ChangeLog:\n\n\t* g++.dg/cpp2a/desig21.C: New test.", "tree": {"sha": "8fe11cd45aa5875095a1ddc94a86e8df6c4dd5c6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8fe11cd45aa5875095a1ddc94a86e8df6c4dd5c6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2da90ad39bf8fa9ee287e040d1f4411cb7a2e7ed", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2da90ad39bf8fa9ee287e040d1f4411cb7a2e7ed", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2da90ad39bf8fa9ee287e040d1f4411cb7a2e7ed", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2da90ad39bf8fa9ee287e040d1f4411cb7a2e7ed/comments", "author": {"login": "willwray", "id": 3172718, "node_id": "MDQ6VXNlcjMxNzI3MTg=", "avatar_url": "https://avatars.githubusercontent.com/u/3172718?v=4", "gravatar_id": "", "url": "https://api.github.com/users/willwray", "html_url": "https://github.com/willwray", "followers_url": "https://api.github.com/users/willwray/followers", "following_url": "https://api.github.com/users/willwray/following{/other_user}", "gists_url": "https://api.github.com/users/willwray/gists{/gist_id}", "starred_url": "https://api.github.com/users/willwray/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/willwray/subscriptions", "organizations_url": "https://api.github.com/users/willwray/orgs", "repos_url": "https://api.github.com/users/willwray/repos", "events_url": "https://api.github.com/users/willwray/events{/privacy}", "received_events_url": "https://api.github.com/users/willwray/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cbcf4a50fa21abd7a4a50a7ce47ada80b115febc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cbcf4a50fa21abd7a4a50a7ce47ada80b115febc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cbcf4a50fa21abd7a4a50a7ce47ada80b115febc"}], "stats": {"total": 76, "additions": 58, "deletions": 18}, "files": [{"sha": "22d3dd1e2ad59a8583ecb6d3ade4f98f82d57897", "filename": "gcc/cp/decl.cc", "status": "modified", "additions": 10, "deletions": 18, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2da90ad39bf8fa9ee287e040d1f4411cb7a2e7ed/gcc%2Fcp%2Fdecl.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2da90ad39bf8fa9ee287e040d1f4411cb7a2e7ed/gcc%2Fcp%2Fdecl.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.cc?ref=2da90ad39bf8fa9ee287e040d1f4411cb7a2e7ed", "patch": "@@ -6817,14 +6817,16 @@ reshape_init_r (tree type, reshape_iter *d, tree first_initializer_p,\n     {\n       tree str_init = init;\n       tree stripped_str_init = stripped_init;\n+      reshape_iter stripd = {};\n \n       /* Strip one level of braces if and only if they enclose a single\n \t element (as allowed by [dcl.init.string]).  */\n       if (!first_initializer_p\n \t  && TREE_CODE (stripped_str_init) == CONSTRUCTOR\n \t  && CONSTRUCTOR_NELTS (stripped_str_init) == 1)\n \t{\n-\t  str_init = (*CONSTRUCTOR_ELTS (stripped_str_init))[0].value;\n+\t  stripd.cur = CONSTRUCTOR_ELT (stripped_str_init, 0);\n+\t  str_init = stripd.cur->value;\n \t  stripped_str_init = tree_strip_any_location_wrapper (str_init);\n \t}\n \n@@ -6833,7 +6835,8 @@ reshape_init_r (tree type, reshape_iter *d, tree first_initializer_p,\n \t array types (one value per array element).  */\n       if (TREE_CODE (stripped_str_init) == STRING_CST)\n \t{\n-\t  if (has_designator_problem (d, complain))\n+\t  if ((first_initializer_p && has_designator_problem (d, complain))\n+\t      || (stripd.cur && has_designator_problem (&stripd, complain)))\n \t    return error_mark_node;\n \t  d->cur++;\n \t  return str_init;\n@@ -9555,22 +9558,11 @@ cp_complete_array_type (tree *ptype, tree initial_value, bool do_default)\n   if (initial_value)\n     {\n       /* An array of character type can be initialized from a\n-\t brace-enclosed string constant.\n-\n-\t FIXME: this code is duplicated from reshape_init. Probably\n-\t we should just call reshape_init here?  */\n-      if (char_type_p (TYPE_MAIN_VARIANT (TREE_TYPE (*ptype)))\n-\t  && TREE_CODE (initial_value) == CONSTRUCTOR\n-\t  && !vec_safe_is_empty (CONSTRUCTOR_ELTS (initial_value)))\n-\t{\n-\t  vec<constructor_elt, va_gc> *v = CONSTRUCTOR_ELTS (initial_value);\n-\t  tree value = (*v)[0].value;\n-\t  STRIP_ANY_LOCATION_WRAPPER (value);\n-\n-\t  if (TREE_CODE (value) == STRING_CST\n-\t      && v->length () == 1)\n-\t    initial_value = value;\n-\t}\n+\t brace-enclosed string constant so call reshape_init to\n+\t remove the optional braces from a braced string literal.  */\n+      if (BRACE_ENCLOSED_INITIALIZER_P (initial_value))\n+\tinitial_value = reshape_init (*ptype, initial_value,\n+\t\t\t\t      tf_warning_or_error);\n \n       /* If any of the elements are parameter packs, we can't actually\n \t complete this type now because the array size is dependent.  */"}, {"sha": "daadfa5885554b68e07e60ac27786418035105a4", "filename": "gcc/testsuite/g++.dg/cpp2a/desig21.C", "status": "added", "additions": 48, "deletions": 0, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2da90ad39bf8fa9ee287e040d1f4411cb7a2e7ed/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fdesig21.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2da90ad39bf8fa9ee287e040d1f4411cb7a2e7ed/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fdesig21.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fdesig21.C?ref=2da90ad39bf8fa9ee287e040d1f4411cb7a2e7ed", "patch": "@@ -0,0 +1,48 @@\n+// PR c++/55227 \n+// Test designated initializer for char array by string constant\n+\n+// { dg-options \"\" }\n+\n+struct C {char a[2];};\n+\n+/* Case a, designated, unbraced, string-literal of the exact same size\n+   as the initialized char array; valid and accepted before and after.  */\n+C a = {.a=\"a\"};\n+\n+/* Cases b,c,d, designated, braced or mimatched-size, string literal,\n+   previously rejected; \"C99 designator 'a' outside aggregate initializer\".  */\n+C b = {.a=\"\"};\n+C c = {.a={\"\"}};\n+C d = {.a={\"a\"}};\n+\n+/* Case e, designated char array field and braced, designated array element(s)\n+   (with GNU [N]= extension) valid and accepted before and after.  */\n+C e = {.a={[0]='a'}};\n+\n+/* Cases f,g,h, braced string literal, 'designated' within inner braces;\n+   invalid, previously accepted as positional with 'designator' ignored.  */\n+C f = {{[0]=\"a\"}}; // { dg-error \"C99 designator .0. outside aggregate initializer\" }\n+C g = {{.a=\"a\"}}; // { dg-error \"C99 designator .a. outside aggregate initializer\" }\n+C h = {{.b=\"a\"}}; // { dg-error \"C99 designator .b. outside aggregate initializer\" }\n+\n+char a2[][10] = { [0] = { \"aaa\" } };\n+\n+struct D { C c; int a[8]; };\n+\n+D x = { .c {.a={\"a\"}}, .a={1,2,3,4,5,6,7,8} };\n+\n+struct A { union { int a; char c[4]; }; };\n+\n+A non = { .c = \"c++\" };\n+\n+template <class T>\n+void t()\n+{\n+  C ca[] = { {.a=\"\"}, {.a={\"\"}}, };\n+\n+}\n+\n+void u()\n+{\n+  return t<void>();\n+}"}]}