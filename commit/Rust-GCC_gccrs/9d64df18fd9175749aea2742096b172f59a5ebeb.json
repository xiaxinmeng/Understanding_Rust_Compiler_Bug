{"sha": "9d64df18fd9175749aea2742096b172f59a5ebeb", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWQ2NGRmMThmZDkxNzU3NDlhZWEyNzQyMDk2YjE3MmY1OWE1ZWJlYg==", "commit": {"author": {"name": "Tobias Schl\u00fcter", "email": "tobias.schlueter@physik.uni-muenchen.de", "date": "2004-08-27T14:49:35Z"}, "committer": {"name": "Tobias Schl\u00fcter", "email": "tobi@gcc.gnu.org", "date": "2004-08-27T14:49:35Z"}, "message": "gfortran.h (gfc_default_*_kind): Remove prototypes, add extern variable declaration of same name.\n\n* gfortran.h (gfc_default_*_kind): Remove prototypes, add extern\nvariable declaration of same name.\n* arith.c, check.c, decl.c, dump_parse_tree.c, expr.c,\nintrinsic.c, io.c, iresolve.c, match.c, options.c, primary.c,\nresolve.c, simplify.c, symbol.c, trans-const.c, trans-io.c:\nReplace all calls to gfc_default_*_kind with variable accesses.\n* trans-types.c: Same as above.\n(gfc_default_*_kind_1): Rename to gfc_default_*_kind, remove\nstatic qualifier. Replace all occurences.\n(gfc_default_*_kind): Remove functions.\n\nFrom-SVN: r86662", "tree": {"sha": "55ec01c924dd426981ff9999706252413e684560", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/55ec01c924dd426981ff9999706252413e684560"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9d64df18fd9175749aea2742096b172f59a5ebeb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9d64df18fd9175749aea2742096b172f59a5ebeb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9d64df18fd9175749aea2742096b172f59a5ebeb", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9d64df18fd9175749aea2742096b172f59a5ebeb/comments", "author": {"login": "TobiSchluter", "id": 11887541, "node_id": "MDQ6VXNlcjExODg3NTQx", "avatar_url": "https://avatars.githubusercontent.com/u/11887541?v=4", "gravatar_id": "", "url": "https://api.github.com/users/TobiSchluter", "html_url": "https://github.com/TobiSchluter", "followers_url": "https://api.github.com/users/TobiSchluter/followers", "following_url": "https://api.github.com/users/TobiSchluter/following{/other_user}", "gists_url": "https://api.github.com/users/TobiSchluter/gists{/gist_id}", "starred_url": "https://api.github.com/users/TobiSchluter/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/TobiSchluter/subscriptions", "organizations_url": "https://api.github.com/users/TobiSchluter/orgs", "repos_url": "https://api.github.com/users/TobiSchluter/repos", "events_url": "https://api.github.com/users/TobiSchluter/events{/privacy}", "received_events_url": "https://api.github.com/users/TobiSchluter/received_events", "type": "User", "site_admin": false}, "committer": {"login": "TobiSchluter", "id": 11887541, "node_id": "MDQ6VXNlcjExODg3NTQx", "avatar_url": "https://avatars.githubusercontent.com/u/11887541?v=4", "gravatar_id": "", "url": "https://api.github.com/users/TobiSchluter", "html_url": "https://github.com/TobiSchluter", "followers_url": "https://api.github.com/users/TobiSchluter/followers", "following_url": "https://api.github.com/users/TobiSchluter/following{/other_user}", "gists_url": "https://api.github.com/users/TobiSchluter/gists{/gist_id}", "starred_url": "https://api.github.com/users/TobiSchluter/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/TobiSchluter/subscriptions", "organizations_url": "https://api.github.com/users/TobiSchluter/orgs", "repos_url": "https://api.github.com/users/TobiSchluter/repos", "events_url": "https://api.github.com/users/TobiSchluter/events{/privacy}", "received_events_url": "https://api.github.com/users/TobiSchluter/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0be27b59bcfdf82ce4193647111f331677cab237", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0be27b59bcfdf82ce4193647111f331677cab237", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0be27b59bcfdf82ce4193647111f331677cab237"}], "stats": {"total": 371, "additions": 172, "deletions": 199}, "files": [{"sha": "2a3d6aed17f1a27ec913179112ad22ce591f0d1b", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9d64df18fd9175749aea2742096b172f59a5ebeb/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9d64df18fd9175749aea2742096b172f59a5ebeb/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=9d64df18fd9175749aea2742096b172f59a5ebeb", "patch": "@@ -1,3 +1,16 @@\n+2004-08-27  Tobias Schlueter  <tobias.schlueter@physik.uni-muenchen.de>\n+\n+\t* gfortran.h (gfc_default_*_kind): Remove prototypes, add extern\n+\tvariable declaration of same name.\n+\t* arith.c, check.c, decl.c, dump_parse_tree.c, expr.c,\n+\tintrinsic.c, io.c, iresolve.c, match.c, options.c, primary.c,\n+\tresolve.c, simplify.c, symbol.c, trans-const.c, trans-io.c:\n+\tReplace all calls to gfc_default_*_kind with variable accesses.\n+\t* trans-types.c: Same as above.\n+\t(gfc_default_*_kind_1): Rename to gfc_default_*_kind, remove\n+\tstatic qualifier. Replace all occurences.\n+\t(gfc_default_*_kind): Remove functions.\n+\n 2004-08-26  Richard Henderson  <rth@redhat.com>\n \n         * arith.c: Include system.h, not real system headers."}, {"sha": "6379d7e7f4bf8402749ecc61b59a2b707a727bf7", "filename": "gcc/fortran/arith.c", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9d64df18fd9175749aea2742096b172f59a5ebeb/gcc%2Ffortran%2Farith.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9d64df18fd9175749aea2742096b172f59a5ebeb/gcc%2Ffortran%2Farith.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Farith.c?ref=9d64df18fd9175749aea2742096b172f59a5ebeb", "patch": "@@ -1047,7 +1047,7 @@ gfc_arith_concat (gfc_expr * op1, gfc_expr * op2, gfc_expr ** resultp)\n   gfc_expr *result;\n   int len;\n \n-  result = gfc_constant_result (BT_CHARACTER, gfc_default_character_kind (),\n+  result = gfc_constant_result (BT_CHARACTER, gfc_default_character_kind,\n \t\t\t\t&op1->where);\n \n   len = op1->value.character.length + op2->value.character.length;\n@@ -1161,7 +1161,7 @@ gfc_arith_eq (gfc_expr * op1, gfc_expr * op2, gfc_expr ** resultp)\n {\n   gfc_expr *result;\n \n-  result = gfc_constant_result (BT_LOGICAL, gfc_default_logical_kind (),\n+  result = gfc_constant_result (BT_LOGICAL, gfc_default_logical_kind,\n \t\t\t\t&op1->where);\n   result->value.logical = (op1->ts.type == BT_COMPLEX) ?\n     compare_complex (op1, op2) : (gfc_compare_expr (op1, op2) == 0);\n@@ -1176,7 +1176,7 @@ gfc_arith_ne (gfc_expr * op1, gfc_expr * op2, gfc_expr ** resultp)\n {\n   gfc_expr *result;\n \n-  result = gfc_constant_result (BT_LOGICAL, gfc_default_logical_kind (),\n+  result = gfc_constant_result (BT_LOGICAL, gfc_default_logical_kind,\n \t\t\t\t&op1->where);\n   result->value.logical = (op1->ts.type == BT_COMPLEX) ?\n     !compare_complex (op1, op2) : (gfc_compare_expr (op1, op2) != 0);\n@@ -1191,7 +1191,7 @@ gfc_arith_gt (gfc_expr * op1, gfc_expr * op2, gfc_expr ** resultp)\n {\n   gfc_expr *result;\n \n-  result = gfc_constant_result (BT_LOGICAL, gfc_default_logical_kind (),\n+  result = gfc_constant_result (BT_LOGICAL, gfc_default_logical_kind,\n \t\t\t\t&op1->where);\n   result->value.logical = (gfc_compare_expr (op1, op2) > 0);\n   *resultp = result;\n@@ -1205,7 +1205,7 @@ gfc_arith_ge (gfc_expr * op1, gfc_expr * op2, gfc_expr ** resultp)\n {\n   gfc_expr *result;\n \n-  result = gfc_constant_result (BT_LOGICAL, gfc_default_logical_kind (),\n+  result = gfc_constant_result (BT_LOGICAL, gfc_default_logical_kind,\n \t\t\t\t&op1->where);\n   result->value.logical = (gfc_compare_expr (op1, op2) >= 0);\n   *resultp = result;\n@@ -1219,7 +1219,7 @@ gfc_arith_lt (gfc_expr * op1, gfc_expr * op2, gfc_expr ** resultp)\n {\n   gfc_expr *result;\n \n-  result = gfc_constant_result (BT_LOGICAL, gfc_default_logical_kind (),\n+  result = gfc_constant_result (BT_LOGICAL, gfc_default_logical_kind,\n \t\t\t\t&op1->where);\n   result->value.logical = (gfc_compare_expr (op1, op2) < 0);\n   *resultp = result;\n@@ -1233,7 +1233,7 @@ gfc_arith_le (gfc_expr * op1, gfc_expr * op2, gfc_expr ** resultp)\n {\n   gfc_expr *result;\n \n-  result = gfc_constant_result (BT_LOGICAL, gfc_default_logical_kind (),\n+  result = gfc_constant_result (BT_LOGICAL, gfc_default_logical_kind,\n \t\t\t\t&op1->where);\n   result->value.logical = (gfc_compare_expr (op1, op2) <= 0);\n   *resultp = result;\n@@ -1479,7 +1479,7 @@ eval_intrinsic (gfc_intrinsic_op operator,\n \tgoto runtime;\n \n       temp.ts.type = BT_LOGICAL;\n-      temp.ts.kind = gfc_default_logical_kind ();\n+      temp.ts.kind = gfc_default_logical_kind;\n \n       unary = 1;\n       break;\n@@ -1493,7 +1493,7 @@ eval_intrinsic (gfc_intrinsic_op operator,\n \tgoto runtime;\n \n       temp.ts.type = BT_LOGICAL;\n-      temp.ts.kind = gfc_default_logical_kind ();\n+      temp.ts.kind = gfc_default_logical_kind;\n \n       unary = 0;\n       break;\n@@ -1515,7 +1515,7 @@ eval_intrinsic (gfc_intrinsic_op operator,\n       if (op1->ts.type == BT_COMPLEX || op2->ts.type == BT_COMPLEX)\n \t{\n \t  temp.ts.type = BT_LOGICAL;\n-\t  temp.ts.kind = gfc_default_logical_kind();\n+\t  temp.ts.kind = gfc_default_logical_kind;\n \t  goto runtime;\n \t}\n \n@@ -1527,7 +1527,7 @@ eval_intrinsic (gfc_intrinsic_op operator,\n \t{\n \t  unary = 0;\n \t  temp.ts.type = BT_LOGICAL;\n-\t  temp.ts.kind = gfc_default_logical_kind();\n+\t  temp.ts.kind = gfc_default_logical_kind;\n \t  break;\n \t}\n \n@@ -1557,7 +1557,7 @@ eval_intrinsic (gfc_intrinsic_op operator,\n \t  || operator == INTRINSIC_LE || operator == INTRINSIC_LT)\n \t{\n \t  temp.ts.type = BT_LOGICAL;\n-\t  temp.ts.kind = gfc_default_logical_kind ();\n+\t  temp.ts.kind = gfc_default_logical_kind;\n \t}\n \n       unary = 0;\n@@ -1568,7 +1568,7 @@ eval_intrinsic (gfc_intrinsic_op operator,\n \tgoto runtime;\n \n       temp.ts.type = BT_CHARACTER;\n-      temp.ts.kind = gfc_default_character_kind ();\n+      temp.ts.kind = gfc_default_character_kind;\n \n       unary = 0;\n       break;\n@@ -1645,7 +1645,7 @@ eval_type_intrinsic0 (gfc_intrinsic_op operator, gfc_expr *op)\n     case INTRINSIC_EQ:\n     case INTRINSIC_NE:\n       op->ts.type = BT_LOGICAL;\n-      op->ts.kind = gfc_default_logical_kind();\n+      op->ts.kind = gfc_default_logical_kind;\n       break;\n \n     default:"}, {"sha": "a010dce6e77eb4bc7d62639e171c539a6d9e9236", "filename": "gcc/fortran/check.c", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9d64df18fd9175749aea2742096b172f59a5ebeb/gcc%2Ffortran%2Fcheck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9d64df18fd9175749aea2742096b172f59a5ebeb/gcc%2Ffortran%2Fcheck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fcheck.c?ref=9d64df18fd9175749aea2742096b172f59a5ebeb", "patch": "@@ -136,7 +136,7 @@ double_check (gfc_expr * d, int n)\n   if (type_check (d, n, BT_REAL) == FAILURE)\n     return FAILURE;\n \n-  if (d->ts.kind != gfc_default_double_kind ())\n+  if (d->ts.kind != gfc_default_double_kind)\n     {\n       must_be (d, n, \"double precision\");\n       return FAILURE;\n@@ -774,7 +774,7 @@ gfc_check_ibclr (gfc_expr * i, gfc_expr * pos)\n \n   if (type_check (i, 0, BT_INTEGER) == FAILURE\n       || type_check (pos, 1, BT_INTEGER) == FAILURE\n-      || kind_value_check (pos, 1, gfc_default_integer_kind ()) == FAILURE)\n+      || kind_value_check (pos, 1, gfc_default_integer_kind) == FAILURE)\n     return FAILURE;\n \n   return SUCCESS;\n@@ -787,7 +787,7 @@ gfc_check_ibits (gfc_expr * i, gfc_expr * pos, gfc_expr * len)\n \n   if (type_check (i, 0, BT_INTEGER) == FAILURE\n       || type_check (pos, 1, BT_INTEGER) == FAILURE\n-      || kind_value_check (pos, 1, gfc_default_integer_kind ()) == FAILURE\n+      || kind_value_check (pos, 1, gfc_default_integer_kind) == FAILURE\n       || type_check (len, 2, BT_INTEGER) == FAILURE)\n     return FAILURE;\n \n@@ -801,7 +801,7 @@ gfc_check_ibset (gfc_expr * i, gfc_expr * pos)\n \n   if (type_check (i, 0, BT_INTEGER) == FAILURE\n       || type_check (pos, 1, BT_INTEGER) == FAILURE\n-      || kind_value_check (pos, 1, gfc_default_integer_kind ()) == FAILURE)\n+      || kind_value_check (pos, 1, gfc_default_integer_kind) == FAILURE)\n     return FAILURE;\n \n   return SUCCESS;\n@@ -1036,23 +1036,23 @@ try\n gfc_check_min_max_integer (gfc_actual_arglist * arg)\n {\n \n-  return check_rest (BT_INTEGER, gfc_default_integer_kind (), arg);\n+  return check_rest (BT_INTEGER, gfc_default_integer_kind, arg);\n }\n \n \n try\n gfc_check_min_max_real (gfc_actual_arglist * arg)\n {\n \n-  return check_rest (BT_REAL, gfc_default_real_kind (), arg);\n+  return check_rest (BT_REAL, gfc_default_real_kind, arg);\n }\n \n \n try\n gfc_check_min_max_double (gfc_actual_arglist * arg)\n {\n \n-  return check_rest (BT_REAL, gfc_default_double_kind (), arg);\n+  return check_rest (BT_REAL, gfc_default_double_kind, arg);\n }\n \n /* End of min/max family.  */\n@@ -1545,7 +1545,7 @@ gfc_check_size (gfc_expr * array, gfc_expr * dim)\n       if (type_check (dim, 1, BT_INTEGER) == FAILURE)\n \treturn FAILURE;\n \n-      if (kind_value_check (dim, 1, gfc_default_integer_kind ()) == FAILURE)\n+      if (kind_value_check (dim, 1, gfc_default_integer_kind) == FAILURE)\n \treturn FAILURE;\n \n       if (dim_rank_check (dim, array, 0) == FAILURE)\n@@ -1834,7 +1834,7 @@ gfc_check_random_seed (gfc_expr * size, gfc_expr * put, gfc_expr * get)\n       if (variable_check (size, 0) == FAILURE)\n \treturn FAILURE;\n \n-      if (kind_value_check (size, 0, gfc_default_integer_kind ()) == FAILURE)\n+      if (kind_value_check (size, 0, gfc_default_integer_kind) == FAILURE)\n \treturn FAILURE;\n     }\n \n@@ -1854,7 +1854,7 @@ gfc_check_random_seed (gfc_expr * size, gfc_expr * put, gfc_expr * get)\n       if (type_check (put, 1, BT_INTEGER) == FAILURE)\n \treturn FAILURE;\n \n-      if (kind_value_check (put, 1, gfc_default_integer_kind ()) == FAILURE)\n+      if (kind_value_check (put, 1, gfc_default_integer_kind) == FAILURE)\n \treturn FAILURE;\n     }\n \n@@ -1877,7 +1877,7 @@ gfc_check_random_seed (gfc_expr * size, gfc_expr * put, gfc_expr * get)\n       if (variable_check (get, 2) == FAILURE)\n \treturn FAILURE;\n \n-      if (kind_value_check (get, 2, gfc_default_integer_kind ()) == FAILURE)\n+      if (kind_value_check (get, 2, gfc_default_integer_kind) == FAILURE)\n \treturn FAILURE;\n     }\n "}, {"sha": "4ab58399f3df50e3bb4b3e3ecb8610d9771e61c2", "filename": "gcc/fortran/decl.c", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9d64df18fd9175749aea2742096b172f59a5ebeb/gcc%2Ffortran%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9d64df18fd9175749aea2742096b172f59a5ebeb/gcc%2Ffortran%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fdecl.c?ref=9d64df18fd9175749aea2742096b172f59a5ebeb", "patch": "@@ -727,7 +727,7 @@ match_char_spec (gfc_typespec * ts)\n   gfc_expr *len;\n   match m;\n \n-  kind = gfc_default_character_kind ();\n+  kind = gfc_default_character_kind;\n   len = NULL;\n   seen_length = 0;\n \n@@ -891,7 +891,7 @@ match_type_spec (gfc_typespec * ts, int implicit_flag)\n   if (gfc_match (\" integer\") == MATCH_YES)\n     {\n       ts->type = BT_INTEGER;\n-      ts->kind = gfc_default_integer_kind ();\n+      ts->kind = gfc_default_integer_kind;\n       goto get_kind;\n     }\n \n@@ -907,35 +907,35 @@ match_type_spec (gfc_typespec * ts, int implicit_flag)\n   if (gfc_match (\" real\") == MATCH_YES)\n     {\n       ts->type = BT_REAL;\n-      ts->kind = gfc_default_real_kind ();\n+      ts->kind = gfc_default_real_kind;\n       goto get_kind;\n     }\n \n   if (gfc_match (\" double precision\") == MATCH_YES)\n     {\n       ts->type = BT_REAL;\n-      ts->kind = gfc_default_double_kind ();\n+      ts->kind = gfc_default_double_kind;\n       return MATCH_YES;\n     }\n \n   if (gfc_match (\" complex\") == MATCH_YES)\n     {\n       ts->type = BT_COMPLEX;\n-      ts->kind = gfc_default_complex_kind ();\n+      ts->kind = gfc_default_complex_kind;\n       goto get_kind;\n     }\n \n   if (gfc_match (\" double complex\") == MATCH_YES)\n     {\n       ts->type = BT_COMPLEX;\n-      ts->kind = gfc_default_double_kind ();\n+      ts->kind = gfc_default_double_kind;\n       return MATCH_YES;\n     }\n \n   if (gfc_match (\" logical\") == MATCH_YES)\n     {\n       ts->type = BT_LOGICAL;\n-      ts->kind = gfc_default_logical_kind ();\n+      ts->kind = gfc_default_logical_kind;\n       goto get_kind;\n     }\n \n@@ -1141,7 +1141,7 @@ gfc_match_implicit (void)\n \t      /* Check for CHARACTER with no length parameter.  */\n \t      if (ts.type == BT_CHARACTER && !ts.cl)\n \t\t{\n-\t\t  ts.kind = gfc_default_character_kind ();\n+\t\t  ts.kind = gfc_default_character_kind;\n \t\t  ts.cl = gfc_get_charlen ();\n \t\t  ts.cl->next = gfc_current_ns->cl_list;\n \t\t  gfc_current_ns->cl_list = ts.cl;"}, {"sha": "7af7a625f651f44167dd4fa0f12bba65cf49356e", "filename": "gcc/fortran/dump-parse-tree.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9d64df18fd9175749aea2742096b172f59a5ebeb/gcc%2Ffortran%2Fdump-parse-tree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9d64df18fd9175749aea2742096b172f59a5ebeb/gcc%2Ffortran%2Fdump-parse-tree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fdump-parse-tree.c?ref=9d64df18fd9175749aea2742096b172f59a5ebeb", "patch": "@@ -351,7 +351,7 @@ gfc_show_expr (gfc_expr * p)\n \tcase BT_INTEGER:\n \t  mpz_out_str (stdout, 10, p->value.integer);\n \n-\t  if (p->ts.kind != gfc_default_integer_kind ())\n+\t  if (p->ts.kind != gfc_default_integer_kind)\n \t    gfc_status (\"_%d\", p->ts.kind);\n \t  break;\n \n@@ -364,7 +364,7 @@ gfc_show_expr (gfc_expr * p)\n \n \tcase BT_REAL:\n \t  mpfr_out_str (stdout, 10, 0, p->value.real, GFC_RND_MODE);\n-\t  if (p->ts.kind != gfc_default_real_kind ())\n+\t  if (p->ts.kind != gfc_default_real_kind)\n \t    gfc_status (\"_%d\", p->ts.kind);\n \t  break;\n \n@@ -389,13 +389,13 @@ gfc_show_expr (gfc_expr * p)\n \t  gfc_status (\"(complex \");\n \n \t  mpfr_out_str (stdout, 10, 0, p->value.complex.r, GFC_RND_MODE);\n-\t  if (p->ts.kind != gfc_default_complex_kind ())\n+\t  if (p->ts.kind != gfc_default_complex_kind)\n \t    gfc_status (\"_%d\", p->ts.kind);\n \n \t  gfc_status (\" \");\n \n \t  mpfr_out_str (stdout, 10, 0, p->value.complex.i, GFC_RND_MODE);\n-\t  if (p->ts.kind != gfc_default_complex_kind ())\n+\t  if (p->ts.kind != gfc_default_complex_kind)\n \t    gfc_status (\"_%d\", p->ts.kind);\n \n \t  gfc_status (\")\");"}, {"sha": "f9811857d7e93e3e9a55f2bcd9a007a291654c7e", "filename": "gcc/fortran/expr.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9d64df18fd9175749aea2742096b172f59a5ebeb/gcc%2Ffortran%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9d64df18fd9175749aea2742096b172f59a5ebeb/gcc%2Ffortran%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fexpr.c?ref=9d64df18fd9175749aea2742096b172f59a5ebeb", "patch": "@@ -524,7 +524,7 @@ gfc_int_expr (int i)\n \n   p->expr_type = EXPR_CONSTANT;\n   p->ts.type = BT_INTEGER;\n-  p->ts.kind = gfc_default_integer_kind ();\n+  p->ts.kind = gfc_default_integer_kind;\n \n   p->where = gfc_current_locus;\n   mpz_init_set_si (p->value.integer, i);\n@@ -544,7 +544,7 @@ gfc_logical_expr (int i, locus * where)\n \n   p->expr_type = EXPR_CONSTANT;\n   p->ts.type = BT_LOGICAL;\n-  p->ts.kind = gfc_default_logical_kind ();\n+  p->ts.kind = gfc_default_logical_kind;\n \n   if (where == NULL)\n     where = &gfc_current_locus;"}, {"sha": "09b832370f4bc2af8898dc05cbc02f93c36a769c", "filename": "gcc/fortran/gfortran.h", "status": "modified", "additions": 6, "deletions": 7, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9d64df18fd9175749aea2742096b172f59a5ebeb/gcc%2Ffortran%2Fgfortran.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9d64df18fd9175749aea2742096b172f59a5ebeb/gcc%2Ffortran%2Fgfortran.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fgfortran.h?ref=9d64df18fd9175749aea2742096b172f59a5ebeb", "patch": "@@ -1505,15 +1505,14 @@ void gfc_arith_init_1 (void);\n void gfc_arith_done_1 (void);\n \n /* trans-types.c */\n-/* FIXME: These should go to symbol.c, really...  */\n-int gfc_default_integer_kind (void);\n-int gfc_default_real_kind (void);\n-int gfc_default_double_kind (void);\n-int gfc_default_character_kind (void);\n-int gfc_default_logical_kind (void);\n-int gfc_default_complex_kind (void);\n int gfc_validate_kind (bt, int, bool);\n extern int gfc_index_integer_kind;\n+extern int gfc_default_integer_kind;\n+extern int gfc_default_real_kind;\n+extern int gfc_default_double_kind;\n+extern int gfc_default_character_kind;\n+extern int gfc_default_logical_kind;\n+extern int gfc_default_complex_kind;\n \n /* symbol.c */\n void gfc_clear_new_implicit (void);"}, {"sha": "744ce387fd2e97becc79787c2e2b623cf5239875", "filename": "gcc/fortran/intrinsic.c", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9d64df18fd9175749aea2742096b172f59a5ebeb/gcc%2Ffortran%2Fintrinsic.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9d64df18fd9175749aea2742096b172f59a5ebeb/gcc%2Ffortran%2Fintrinsic.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fintrinsic.c?ref=9d64df18fd9175749aea2742096b172f59a5ebeb", "patch": "@@ -849,12 +849,12 @@ add_functions (void)\n \n   int di, dr, dd, dl, dc, dz, ii;\n \n-  di = gfc_default_integer_kind ();\n-  dr = gfc_default_real_kind ();\n-  dd = gfc_default_double_kind ();\n-  dl = gfc_default_logical_kind ();\n-  dc = gfc_default_character_kind ();\n-  dz = gfc_default_complex_kind ();\n+  di = gfc_default_integer_kind;\n+  dr = gfc_default_real_kind;\n+  dd = gfc_default_double_kind;\n+  dl = gfc_default_logical_kind;\n+  dc = gfc_default_character_kind;\n+  dz = gfc_default_complex_kind;\n   ii = gfc_index_integer_kind;\n \n   add_sym_1 (\"abs\", 1, 1, BT_REAL, dr,\n@@ -1806,10 +1806,10 @@ add_subroutines (void)\n \n   int di, dr, dc, dl;\n \n-  di = gfc_default_integer_kind ();\n-  dr = gfc_default_real_kind ();\n-  dc = gfc_default_character_kind ();\n-  dl = gfc_default_logical_kind ();\n+  di = gfc_default_integer_kind;\n+  dr = gfc_default_real_kind;\n+  dc = gfc_default_character_kind;\n+  dl = gfc_default_logical_kind;\n \n   add_sym_0s (\"abort\", 1, NULL);\n "}, {"sha": "f383e406907744025cd1318a7f8e2040e52ea2e4", "filename": "gcc/fortran/io.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9d64df18fd9175749aea2742096b172f59a5ebeb/gcc%2Ffortran%2Fio.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9d64df18fd9175749aea2742096b172f59a5ebeb/gcc%2Ffortran%2Fio.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fio.c?ref=9d64df18fd9175749aea2742096b172f59a5ebeb", "patch": "@@ -842,7 +842,7 @@ gfc_match_format (void)\n   e = gfc_get_expr();\n   e->expr_type = EXPR_CONSTANT;\n   e->ts.type = BT_CHARACTER;\n-  e->ts.kind = gfc_default_character_kind();\n+  e->ts.kind = gfc_default_character_kind;\n   e->where = start;\n   e->value.character.string = format_string = gfc_getmem(format_length+1);\n   e->value.character.length = format_length;"}, {"sha": "24734ac251d8b3caabe35a1eb1694d47145e3941", "filename": "gcc/fortran/iresolve.c", "status": "modified", "additions": 32, "deletions": 32, "changes": 64, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9d64df18fd9175749aea2742096b172f59a5ebeb/gcc%2Ffortran%2Firesolve.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9d64df18fd9175749aea2742096b172f59a5ebeb/gcc%2Ffortran%2Firesolve.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Firesolve.c?ref=9d64df18fd9175749aea2742096b172f59a5ebeb", "patch": "@@ -274,7 +274,7 @@ gfc_resolve_btest (gfc_expr * f, gfc_expr * i, gfc_expr * pos)\n {\n \n   f->ts.type = BT_LOGICAL;\n-  f->ts.kind = gfc_default_logical_kind ();\n+  f->ts.kind = gfc_default_logical_kind;\n \n   f->value.function.name = gfc_get_string (\"__btest_%d_%d\", i->ts.kind,\n \t\t\t\t\t   pos->ts.kind);\n@@ -286,7 +286,7 @@ gfc_resolve_ceiling (gfc_expr * f, gfc_expr * a, gfc_expr * kind)\n {\n \n   f->ts.type = BT_INTEGER;\n-  f->ts.kind = (kind == NULL) ? gfc_default_integer_kind ()\n+  f->ts.kind = (kind == NULL) ? gfc_default_integer_kind\n     : mpz_get_si (kind->value.integer);\n \n   f->value.function.name =\n@@ -300,7 +300,7 @@ gfc_resolve_char (gfc_expr * f, gfc_expr * a, gfc_expr * kind)\n {\n \n   f->ts.type = BT_CHARACTER;\n-  f->ts.kind = (kind == NULL) ? gfc_default_character_kind ()\n+  f->ts.kind = (kind == NULL) ? gfc_default_character_kind\n     : mpz_get_si (kind->value.integer);\n \n   f->value.function.name =\n@@ -314,7 +314,7 @@ gfc_resolve_cmplx (gfc_expr * f, gfc_expr * x, gfc_expr * y, gfc_expr * kind)\n {\n \n   f->ts.type = BT_COMPLEX;\n-  f->ts.kind = (kind == NULL) ? gfc_default_real_kind ()\n+  f->ts.kind = (kind == NULL) ? gfc_default_real_kind\n     : mpz_get_si (kind->value.integer);\n \n   if (y == NULL)\n@@ -331,7 +331,7 @@ gfc_resolve_cmplx (gfc_expr * f, gfc_expr * x, gfc_expr * y, gfc_expr * kind)\n void\n gfc_resolve_dcmplx (gfc_expr * f, gfc_expr * x, gfc_expr * y)\n {\n-  gfc_resolve_cmplx (f, x, y, gfc_int_expr (gfc_default_double_kind ()));\n+  gfc_resolve_cmplx (f, x, y, gfc_int_expr (gfc_default_double_kind));\n }\n \n void\n@@ -368,7 +368,7 @@ gfc_resolve_count (gfc_expr * f, gfc_expr * mask, gfc_expr * dim)\n {\n \n   f->ts.type = BT_INTEGER;\n-  f->ts.kind = gfc_default_integer_kind ();\n+  f->ts.kind = gfc_default_integer_kind;\n \n   if (dim != NULL)\n     {\n@@ -416,7 +416,7 @@ gfc_resolve_dble (gfc_expr * f, gfc_expr * a)\n {\n \n   f->ts.type = BT_REAL;\n-  f->ts.kind = gfc_default_double_kind ();\n+  f->ts.kind = gfc_default_double_kind;\n   f->value.function.name =\n     gfc_get_string (\"__dble_%c%d\", gfc_type_letter (a->ts.type), a->ts.kind);\n }\n@@ -441,7 +441,7 @@ gfc_resolve_dot_product (gfc_expr * f, gfc_expr * a, gfc_expr * b)\n   if (a->ts.type == BT_LOGICAL && b->ts.type == BT_LOGICAL)\n     {\n       f->ts.type = BT_LOGICAL;\n-      f->ts.kind = gfc_default_logical_kind ();\n+      f->ts.kind = gfc_default_logical_kind;\n     }\n   else\n     {\n@@ -465,7 +465,7 @@ gfc_resolve_dprod (gfc_expr * f,\n \t\t   gfc_expr * a ATTRIBUTE_UNUSED,\n \t\t   gfc_expr * b ATTRIBUTE_UNUSED)\n {\n-  f->ts.kind = gfc_default_double_kind ();\n+  f->ts.kind = gfc_default_double_kind;\n   f->ts.type = BT_REAL;\n \n   f->value.function.name = gfc_get_string (\"__dprod_r%d\", f->ts.kind);\n@@ -515,7 +515,7 @@ gfc_resolve_exponent (gfc_expr * f, gfc_expr * x)\n {\n \n   f->ts.type = BT_INTEGER;\n-  f->ts.kind = gfc_default_integer_kind ();\n+  f->ts.kind = gfc_default_integer_kind;\n \n   f->value.function.name = gfc_get_string (\"__exponent_%d\", x->ts.kind);\n }\n@@ -526,7 +526,7 @@ gfc_resolve_floor (gfc_expr * f, gfc_expr * a, gfc_expr * kind)\n {\n \n   f->ts.type = BT_INTEGER;\n-  f->ts.kind = (kind == NULL) ? gfc_default_integer_kind ()\n+  f->ts.kind = (kind == NULL) ? gfc_default_integer_kind\n     : mpz_get_si (kind->value.integer);\n \n   f->value.function.name =\n@@ -588,7 +588,7 @@ gfc_resolve_ichar (gfc_expr * f, gfc_expr * c)\n {\n \n   f->ts.type = BT_INTEGER;\n-  f->ts.kind = gfc_default_integer_kind ();\n+  f->ts.kind = gfc_default_integer_kind;\n \n   f->value.function.name = gfc_get_string (\"__ichar_%d\", c->ts.kind);\n }\n@@ -626,7 +626,7 @@ gfc_resolve_int (gfc_expr * f, gfc_expr * a, gfc_expr * kind)\n {\n \n   f->ts.type = BT_INTEGER;\n-  f->ts.kind = (kind == NULL) ? gfc_default_integer_kind ()\n+  f->ts.kind = (kind == NULL) ? gfc_default_integer_kind\n     : mpz_get_si (kind->value.integer);\n \n   f->value.function.name =\n@@ -651,7 +651,7 @@ gfc_resolve_ishftc (gfc_expr * f, gfc_expr * i, gfc_expr * shift,\n {\n   int s_kind;\n \n-  s_kind = (size == NULL) ? gfc_default_integer_kind () : shift->ts.kind;\n+  s_kind = (size == NULL) ? gfc_default_integer_kind : shift->ts.kind;\n \n   f->ts = i->ts;\n   f->value.function.name =\n@@ -666,7 +666,7 @@ gfc_resolve_lbound (gfc_expr * f, gfc_expr * array,\n   static char lbound[] = \"__lbound\";\n \n   f->ts.type = BT_INTEGER;\n-  f->ts.kind = gfc_default_integer_kind ();\n+  f->ts.kind = gfc_default_integer_kind;\n \n   if (dim == NULL)\n     {\n@@ -684,7 +684,7 @@ gfc_resolve_len (gfc_expr * f, gfc_expr * string)\n {\n \n   f->ts.type = BT_INTEGER;\n-  f->ts.kind = gfc_default_integer_kind ();\n+  f->ts.kind = gfc_default_integer_kind;\n   f->value.function.name = gfc_get_string (\"__len_%d\", string->ts.kind);\n }\n \n@@ -694,7 +694,7 @@ gfc_resolve_len_trim (gfc_expr * f, gfc_expr * string)\n {\n \n   f->ts.type = BT_INTEGER;\n-  f->ts.kind = gfc_default_integer_kind ();\n+  f->ts.kind = gfc_default_integer_kind;\n   f->value.function.name = gfc_get_string (\"__len_trim%d\", string->ts.kind);\n }\n \n@@ -724,7 +724,7 @@ gfc_resolve_logical (gfc_expr * f, gfc_expr * a, gfc_expr * kind)\n {\n \n   f->ts.type = BT_LOGICAL;\n-  f->ts.kind = (kind == NULL) ? gfc_default_logical_kind ()\n+  f->ts.kind = (kind == NULL) ? gfc_default_logical_kind\n     : mpz_get_si (kind->value.integer);\n   f->rank = a->rank;\n \n@@ -742,7 +742,7 @@ gfc_resolve_matmul (gfc_expr * f, gfc_expr * a, gfc_expr * b)\n   if (a->ts.type == BT_LOGICAL && b->ts.type == BT_LOGICAL)\n     {\n       f->ts.type = BT_LOGICAL;\n-      f->ts.kind = gfc_default_logical_kind ();\n+      f->ts.kind = gfc_default_logical_kind;\n     }\n   else\n     {\n@@ -803,7 +803,7 @@ gfc_resolve_maxloc (gfc_expr * f, gfc_expr * array, gfc_expr * dim,\n   const char *name;\n \n   f->ts.type = BT_INTEGER;\n-  f->ts.kind = gfc_default_integer_kind ();\n+  f->ts.kind = gfc_default_integer_kind;\n \n   if (dim == NULL)\n     f->rank = 1;\n@@ -866,7 +866,7 @@ gfc_resolve_minloc (gfc_expr * f, gfc_expr * array, gfc_expr * dim,\n   const char *name;\n \n   f->ts.type = BT_INTEGER;\n-  f->ts.kind = gfc_default_integer_kind ();\n+  f->ts.kind = gfc_default_integer_kind;\n \n   if (dim == NULL)\n     f->rank = 1;\n@@ -940,7 +940,7 @@ gfc_resolve_nint (gfc_expr * f, gfc_expr * a, gfc_expr * kind)\n {\n \n   f->ts.type = BT_INTEGER;\n-  f->ts.kind = (kind == NULL) ? gfc_default_integer_kind ()\n+  f->ts.kind = (kind == NULL) ? gfc_default_integer_kind\n     : mpz_get_si (kind->value.integer);\n \n   f->value.function.name =\n@@ -1001,7 +1001,7 @@ gfc_resolve_real (gfc_expr * f, gfc_expr * a, gfc_expr * kind)\n     f->ts.kind = mpz_get_si (kind->value.integer);\n   else\n     f->ts.kind = (a->ts.type == BT_COMPLEX) ?\n-      a->ts.kind : gfc_default_real_kind ();\n+      a->ts.kind : gfc_default_real_kind;\n \n   f->value.function.name =\n     gfc_get_string (\"__real_%d_%c%d\", f->ts.kind,\n@@ -1110,7 +1110,7 @@ gfc_resolve_scan (gfc_expr * f, gfc_expr * string,\n {\n \n   f->ts.type = BT_INTEGER;\n-  f->ts.kind = gfc_default_integer_kind ();\n+  f->ts.kind = gfc_default_integer_kind;\n   f->value.function.name = gfc_get_string (\"__scan_%d\", string->ts.kind);\n }\n \n@@ -1130,7 +1130,7 @@ gfc_resolve_shape (gfc_expr * f, gfc_expr * array)\n {\n \n   f->ts.type = BT_INTEGER;\n-  f->ts.kind = gfc_default_integer_kind ();\n+  f->ts.kind = gfc_default_integer_kind;\n   f->rank = 1;\n   f->value.function.name = gfc_get_string (\"__shape_%d\", f->ts.kind);\n   f->shape = gfc_get_shape (1);\n@@ -1329,7 +1329,7 @@ gfc_resolve_ubound (gfc_expr * f, gfc_expr * array,\n   static char ubound[] = \"__ubound\";\n \n   f->ts.type = BT_INTEGER;\n-  f->ts.kind = gfc_default_integer_kind ();\n+  f->ts.kind = gfc_default_integer_kind;\n \n   if (dim == NULL)\n     {\n@@ -1363,7 +1363,7 @@ gfc_resolve_verify (gfc_expr * f, gfc_expr * string,\n {\n \n   f->ts.type = BT_INTEGER;\n-  f->ts.kind = gfc_default_integer_kind ();\n+  f->ts.kind = gfc_default_integer_kind;\n   f->value.function.name = gfc_get_string (\"__verify_%d\", string->ts.kind);\n }\n \n@@ -1441,7 +1441,7 @@ gfc_resolve_getarg (gfc_code * c)\n   const char *name;\n   int kind;\n \n-  kind = gfc_default_integer_kind ();\n+  kind = gfc_default_integer_kind;\n   name = gfc_get_string (PREFIX(\"getarg_i%d\"), kind);\n   c->resolved_sym = gfc_get_intrinsic_sub_symbol (name);\n }\n@@ -1455,7 +1455,7 @@ gfc_resolve_get_command (gfc_code * c)\n   const char *name;\n   int kind;\n \n-  kind = gfc_default_integer_kind ();\n+  kind = gfc_default_integer_kind;\n   name = gfc_get_string (PREFIX(\"get_command_i%d\"), kind);\n   c->resolved_sym = gfc_get_intrinsic_sub_symbol (name);\n }\n@@ -1469,7 +1469,7 @@ gfc_resolve_get_command_argument (gfc_code * c)\n   const char *name;\n   int kind;\n \n-  kind = gfc_default_integer_kind ();\n+  kind = gfc_default_integer_kind;\n   name = gfc_get_string (PREFIX(\"get_command_argument_i%d\"), kind);\n   c->resolved_sym = gfc_get_intrinsic_sub_symbol (name);\n }\n@@ -1482,7 +1482,7 @@ gfc_resolve_get_environment_variable (gfc_code * code)\n   const char *name;\n   int kind;\n \n-  kind = gfc_default_integer_kind();\n+  kind = gfc_default_integer_kind;\n   name = gfc_get_string (PREFIX(\"get_environment_variable_i%d\"), kind);\n   code->resolved_sym = gfc_get_intrinsic_sub_symbol (name);\n }\n@@ -1503,7 +1503,7 @@ gfc_resolve_system_clock (gfc_code * c)\n   else if (c->ext.actual->next->next->expr != NULL)\n       kind = c->ext.actual->next->next->expr->ts.kind;\n   else\n-    kind = gfc_default_integer_kind ();\n+    kind = gfc_default_integer_kind;\n \n   name = gfc_get_string (PREFIX(\"system_clock_%d\"), kind);\n   c->resolved_sym = gfc_get_intrinsic_sub_symbol (name);"}, {"sha": "cd1dbe80cd60f8f4907b97ad8db21a73cbcc643b", "filename": "gcc/fortran/match.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9d64df18fd9175749aea2742096b172f59a5ebeb/gcc%2Ffortran%2Fmatch.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9d64df18fd9175749aea2742096b172f59a5ebeb/gcc%2Ffortran%2Fmatch.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fmatch.c?ref=9d64df18fd9175749aea2742096b172f59a5ebeb", "patch": "@@ -2053,7 +2053,7 @@ gfc_match_call (void)\n \n       select_sym = select_st->n.sym;\n       select_sym->ts.type = BT_INTEGER;\n-      select_sym->ts.kind = gfc_default_integer_kind ();\n+      select_sym->ts.kind = gfc_default_integer_kind;\n       gfc_set_sym_referenced (select_sym);\n       c->expr = gfc_get_expr ();\n       c->expr->expr_type = EXPR_VARIABLE;"}, {"sha": "13b1f11ad947a8590295725bcb8012a47a701750", "filename": "gcc/fortran/options.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9d64df18fd9175749aea2742096b172f59a5ebeb/gcc%2Ffortran%2Foptions.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9d64df18fd9175749aea2742096b172f59a5ebeb/gcc%2Ffortran%2Foptions.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Foptions.c?ref=9d64df18fd9175749aea2742096b172f59a5ebeb", "patch": "@@ -70,7 +70,7 @@ gfc_init_options (unsigned int argc ATTRIBUTE_UNUSED,\n   gfc_option.flag_pack_derived = 0;\n   gfc_option.flag_repack_arrays = 0;\n \n-  gfc_option.q_kind = gfc_default_double_kind ();\n+  gfc_option.q_kind = gfc_default_double_kind;\n   gfc_option.i8 = 0;\n   gfc_option.r8 = 0;\n   gfc_option.d8 = 0;"}, {"sha": "10e1068967ab15e4ea6b490456792db2b5e957bb", "filename": "gcc/fortran/primary.c", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9d64df18fd9175749aea2742096b172f59a5ebeb/gcc%2Ffortran%2Fprimary.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9d64df18fd9175749aea2742096b172f59a5ebeb/gcc%2Ffortran%2Fprimary.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fprimary.c?ref=9d64df18fd9175749aea2742096b172f59a5ebeb", "patch": "@@ -204,7 +204,7 @@ match_integer_constant (gfc_expr ** result, int signflag)\n \n   kind = get_kind ();\n   if (kind == -2)\n-    kind = gfc_default_integer_kind ();\n+    kind = gfc_default_integer_kind;\n   if (kind == -1)\n     return MATCH_ERROR;\n \n@@ -295,7 +295,7 @@ match_boz_constant (gfc_expr ** result)\n   match_digits (0, radix, buffer);\n   gfc_next_char ();\n \n-  e = gfc_convert_integer (buffer, gfc_default_integer_kind (), radix,\n+  e = gfc_convert_integer (buffer, gfc_default_integer_kind, radix,\n \t\t\t   &gfc_current_locus);\n \n   if (gfc_range_check (e) != ARITH_OK)\n@@ -460,7 +460,7 @@ match_real_constant (gfc_expr ** result, int signflag)\n \t    (\"Real number at %C has a 'd' exponent and an explicit kind\");\n \t  goto cleanup;\n \t}\n-      kind = gfc_default_double_kind ();\n+      kind = gfc_default_double_kind;\n       break;\n \n     case 'q':\n@@ -475,7 +475,7 @@ match_real_constant (gfc_expr ** result, int signflag)\n \n     default:\n       if (kind == -2)\n-\tkind = gfc_default_real_kind ();\n+\tkind = gfc_default_real_kind;\n \n       if (gfc_validate_kind (BT_REAL, kind, true) < 0)\n \t{\n@@ -758,7 +758,7 @@ match_string_constant (gfc_expr ** result)\n   c = gfc_next_char ();\n   if (c == '\\'' || c == '\"')\n     {\n-      kind = gfc_default_character_kind ();\n+      kind = gfc_default_character_kind;\n       goto got_delim;\n     }\n \n@@ -905,7 +905,7 @@ match_logical_constant (gfc_expr ** result)\n   if (kind == -1)\n     return MATCH_ERROR;\n   if (kind == -2)\n-    kind = gfc_default_logical_kind ();\n+    kind = gfc_default_logical_kind;\n \n   if (gfc_validate_kind (BT_LOGICAL, kind, true) < 0)\n     gfc_error (\"Bad kind for logical constant at %C\");\n@@ -972,7 +972,7 @@ match_sym_complex_part (gfc_expr ** result)\n       break;\n \n     case BT_INTEGER:\n-      e = gfc_int2real (sym->value, gfc_default_real_kind ());\n+      e = gfc_int2real (sym->value, gfc_default_real_kind);\n       if (e == NULL)\n \tgoto error;\n       break;\n@@ -1098,7 +1098,7 @@ match_const_complex_part (gfc_expr ** result)\n   if (seen_dp == 0 && exp_char == ' ')\n     {\n       if (kind == -2)\n-\tkind = gfc_default_integer_kind ();\n+\tkind = gfc_default_integer_kind;\n \n     }\n   else\n@@ -1111,13 +1111,13 @@ match_const_complex_part (gfc_expr ** result)\n \t\t(\"Real number at %C has a 'd' exponent and an explicit kind\");\n \t      return MATCH_ERROR;\n \t    }\n-\t  kind = gfc_default_double_kind ();\n+\t  kind = gfc_default_double_kind;\n \n \t}\n       else\n \t{\n \t  if (kind == -2)\n-\t    kind = gfc_default_real_kind ();\n+\t    kind = gfc_default_real_kind;\n \t}\n \n       if (gfc_validate_kind (BT_REAL, kind, true) < 0)"}, {"sha": "e310f590236e6719aa8f72bba4c66856f3a65c8c", "filename": "gcc/fortran/resolve.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9d64df18fd9175749aea2742096b172f59a5ebeb/gcc%2Ffortran%2Fresolve.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9d64df18fd9175749aea2742096b172f59a5ebeb/gcc%2Ffortran%2Fresolve.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fresolve.c?ref=9d64df18fd9175749aea2742096b172f59a5ebeb", "patch": "@@ -1392,7 +1392,7 @@ resolve_operator (gfc_expr * e)\n       if (op1->ts.type == BT_CHARACTER && op2->ts.type == BT_CHARACTER)\n \t{\n \t  e->ts.type = BT_LOGICAL;\n-\t  e->ts.kind = gfc_default_logical_kind ();\n+\t  e->ts.kind = gfc_default_logical_kind;\n \t  break;\n \t}\n \n@@ -1401,7 +1401,7 @@ resolve_operator (gfc_expr * e)\n \t  gfc_type_convert_binary (e);\n \n \t  e->ts.type = BT_LOGICAL;\n-\t  e->ts.kind = gfc_default_logical_kind ();\n+\t  e->ts.kind = gfc_default_logical_kind;\n \t  break;\n \t}\n "}, {"sha": "26c4d7d0ad32d1c1bc95f649b457ca316c7ca09a", "filename": "gcc/fortran/simplify.c", "status": "modified", "additions": 32, "deletions": 32, "changes": 64, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9d64df18fd9175749aea2742096b172f59a5ebeb/gcc%2Ffortran%2Fsimplify.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9d64df18fd9175749aea2742096b172f59a5ebeb/gcc%2Ffortran%2Fsimplify.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fsimplify.c?ref=9d64df18fd9175749aea2742096b172f59a5ebeb", "patch": "@@ -212,7 +212,7 @@ gfc_simplify_achar (gfc_expr * e)\n       return &gfc_bad_expr;\n     }\n \n-  result = gfc_constant_result (BT_CHARACTER, gfc_default_character_kind (),\n+  result = gfc_constant_result (BT_CHARACTER, gfc_default_character_kind,\n \t\t\t\t&e->where);\n \n   result->value.character.string = gfc_getmem (2);\n@@ -382,7 +382,7 @@ gfc_simplify_dint (gfc_expr * e)\n \n   mpfr_trunc (rtrunc->value.real, e->value.real);\n \n-  result = gfc_real2real (rtrunc, gfc_default_double_kind ());\n+  result = gfc_real2real (rtrunc, gfc_default_double_kind);\n   gfc_free_expr (rtrunc);\n \n   return range_check (result, \"DINT\");\n@@ -445,13 +445,13 @@ gfc_simplify_dnint (gfc_expr * e)\n     return NULL;\n \n   result =\n-    gfc_constant_result (BT_REAL, gfc_default_double_kind (), &e->where);\n+    gfc_constant_result (BT_REAL, gfc_default_double_kind, &e->where);\n \n   rtrunc = gfc_copy_expr (e);\n \n   cmp = mpfr_cmp_ui (e->value.real, 0);\n \n-  gfc_set_model_kind (gfc_default_double_kind ());\n+  gfc_set_model_kind (gfc_default_double_kind);\n   mpfr_init (half);\n   mpfr_set_str (half, \"0.5\", 10, GFC_RND_MODE);\n \n@@ -576,7 +576,7 @@ gfc_simplify_ceiling (gfc_expr * e, gfc_expr * k)\n   gfc_expr *ceil, *result;\n   int kind;\n \n-  kind = get_kind (BT_REAL, k, \"CEILING\", gfc_default_real_kind ());\n+  kind = get_kind (BT_REAL, k, \"CEILING\", gfc_default_real_kind);\n   if (kind == -1)\n     return &gfc_bad_expr;\n \n@@ -602,7 +602,7 @@ gfc_simplify_char (gfc_expr * e, gfc_expr * k)\n   gfc_expr *result;\n   int c, kind;\n \n-  kind = get_kind (BT_CHARACTER, k, \"CHAR\", gfc_default_character_kind ());\n+  kind = get_kind (BT_CHARACTER, k, \"CHAR\", gfc_default_character_kind);\n   if (kind == -1)\n     return &gfc_bad_expr;\n \n@@ -687,7 +687,7 @@ gfc_simplify_cmplx (gfc_expr * x, gfc_expr * y, gfc_expr * k)\n       || (y != NULL && y->expr_type != EXPR_CONSTANT))\n     return NULL;\n \n-  kind = get_kind (BT_REAL, k, \"CMPLX\", gfc_default_real_kind ());\n+  kind = get_kind (BT_REAL, k, \"CMPLX\", gfc_default_real_kind);\n   if (kind == -1)\n     return &gfc_bad_expr;\n \n@@ -776,7 +776,7 @@ gfc_simplify_dcmplx (gfc_expr * x, gfc_expr * y)\n       || (y != NULL && y->expr_type != EXPR_CONSTANT))\n     return NULL;\n \n-  return simplify_cmplx (\"DCMPLX\", x, y, gfc_default_double_kind ());\n+  return simplify_cmplx (\"DCMPLX\", x, y, gfc_default_double_kind);\n }\n \n \n@@ -791,15 +791,15 @@ gfc_simplify_dble (gfc_expr * e)\n   switch (e->ts.type)\n     {\n     case BT_INTEGER:\n-      result = gfc_int2real (e, gfc_default_double_kind ());\n+      result = gfc_int2real (e, gfc_default_double_kind);\n       break;\n \n     case BT_REAL:\n-      result = gfc_real2real (e, gfc_default_double_kind ());\n+      result = gfc_real2real (e, gfc_default_double_kind);\n       break;\n \n     case BT_COMPLEX:\n-      result = gfc_complex2real (e, gfc_default_double_kind ());\n+      result = gfc_complex2real (e, gfc_default_double_kind);\n       break;\n \n     default:\n@@ -880,10 +880,10 @@ gfc_simplify_dprod (gfc_expr * x, gfc_expr * y)\n     return NULL;\n \n   result =\n-    gfc_constant_result (BT_REAL, gfc_default_double_kind (), &x->where);\n+    gfc_constant_result (BT_REAL, gfc_default_double_kind, &x->where);\n \n-  a1 = gfc_real2real (x, gfc_default_double_kind ());\n-  a2 = gfc_real2real (y, gfc_default_double_kind ());\n+  a1 = gfc_real2real (x, gfc_default_double_kind);\n+  a2 = gfc_real2real (y, gfc_default_double_kind);\n \n   mpfr_mul (result->value.real, a1->value.real, a2->value.real, GFC_RND_MODE);\n \n@@ -957,7 +957,7 @@ gfc_simplify_exponent (gfc_expr * x)\n   if (x->expr_type != EXPR_CONSTANT)\n     return NULL;\n \n-  result = gfc_constant_result (BT_INTEGER, gfc_default_integer_kind (),\n+  result = gfc_constant_result (BT_INTEGER, gfc_default_integer_kind,\n \t\t\t\t&x->where);\n \n   gfc_set_model (x->value.real);\n@@ -1006,7 +1006,7 @@ gfc_simplify_float (gfc_expr * a)\n   if (a->expr_type != EXPR_CONSTANT)\n     return NULL;\n \n-  result = gfc_int2real (a, gfc_default_real_kind ());\n+  result = gfc_int2real (a, gfc_default_real_kind);\n   return range_check (result, \"FLOAT\");\n }\n \n@@ -1018,7 +1018,7 @@ gfc_simplify_floor (gfc_expr * e, gfc_expr * k)\n   mpfr_t floor;\n   int kind;\n \n-  kind = get_kind (BT_REAL, k, \"FLOOR\", gfc_default_real_kind ());\n+  kind = get_kind (BT_REAL, k, \"FLOOR\", gfc_default_real_kind);\n   if (kind == -1)\n     gfc_internal_error (\"gfc_simplify_floor(): Bad kind\");\n \n@@ -1354,7 +1354,7 @@ gfc_simplify_index (gfc_expr * x, gfc_expr * y, gfc_expr * b)\n   else\n     back = 0;\n \n-  result = gfc_constant_result (BT_INTEGER, gfc_default_integer_kind (),\n+  result = gfc_constant_result (BT_INTEGER, gfc_default_integer_kind,\n \t\t\t\t&x->where);\n \n   len = x->value.character.length;\n@@ -1488,7 +1488,7 @@ gfc_simplify_int (gfc_expr * e, gfc_expr * k)\n   gfc_expr *rpart, *rtrunc, *result;\n   int kind;\n \n-  kind = get_kind (BT_REAL, k, \"INT\", gfc_default_real_kind ());\n+  kind = get_kind (BT_REAL, k, \"INT\", gfc_default_real_kind);\n   if (kind == -1)\n     return &gfc_bad_expr;\n \n@@ -1537,7 +1537,7 @@ gfc_simplify_ifix (gfc_expr * e)\n   if (e->expr_type != EXPR_CONSTANT)\n     return NULL;\n \n-  result = gfc_constant_result (BT_INTEGER, gfc_default_integer_kind (),\n+  result = gfc_constant_result (BT_INTEGER, gfc_default_integer_kind,\n \t\t\t\t&e->where);\n \n   rtrunc = gfc_copy_expr (e);\n@@ -1558,7 +1558,7 @@ gfc_simplify_idint (gfc_expr * e)\n   if (e->expr_type != EXPR_CONSTANT)\n     return NULL;\n \n-  result = gfc_constant_result (BT_INTEGER, gfc_default_integer_kind (),\n+  result = gfc_constant_result (BT_INTEGER, gfc_default_integer_kind,\n \t\t\t\t&e->where);\n \n   rtrunc = gfc_copy_expr (e);\n@@ -1809,7 +1809,7 @@ gfc_simplify_len (gfc_expr * e)\n   if (e->expr_type != EXPR_CONSTANT)\n     return NULL;\n \n-  result = gfc_constant_result (BT_INTEGER, gfc_default_integer_kind (),\n+  result = gfc_constant_result (BT_INTEGER, gfc_default_integer_kind,\n \t\t\t\t&e->where);\n \n   mpz_set_si (result->value.integer, e->value.character.length);\n@@ -1826,7 +1826,7 @@ gfc_simplify_len_trim (gfc_expr * e)\n   if (e->expr_type != EXPR_CONSTANT)\n     return NULL;\n \n-  result = gfc_constant_result (BT_INTEGER, gfc_default_integer_kind (),\n+  result = gfc_constant_result (BT_INTEGER, gfc_default_integer_kind,\n \t\t\t\t&e->where);\n \n   len = e->value.character.length;\n@@ -1998,7 +1998,7 @@ gfc_simplify_logical (gfc_expr * e, gfc_expr * k)\n   gfc_expr *result;\n   int kind;\n \n-  kind = get_kind (BT_LOGICAL, k, \"LOGICAL\", gfc_default_logical_kind ());\n+  kind = get_kind (BT_LOGICAL, k, \"LOGICAL\", gfc_default_logical_kind);\n   if (kind < 0)\n     return &gfc_bad_expr;\n \n@@ -2342,7 +2342,7 @@ simplify_nint (const char *name, gfc_expr * e, gfc_expr * k)\n   int kind, cmp;\n   mpfr_t half;\n \n-  kind = get_kind (BT_INTEGER, k, name, gfc_default_integer_kind ());\n+  kind = get_kind (BT_INTEGER, k, name, gfc_default_integer_kind);\n   if (kind == -1)\n     return &gfc_bad_expr;\n \n@@ -2527,7 +2527,7 @@ gfc_simplify_real (gfc_expr * e, gfc_expr * k)\n   if (e->ts.type == BT_COMPLEX)\n     kind = get_kind (BT_REAL, k, \"REAL\", e->ts.kind);\n   else\n-    kind = get_kind (BT_REAL, k, \"REAL\", gfc_default_real_kind ());\n+    kind = get_kind (BT_REAL, k, \"REAL\", gfc_default_real_kind);\n \n   if (kind == -1)\n     return &gfc_bad_expr;\n@@ -2975,7 +2975,7 @@ gfc_simplify_scan (gfc_expr * e, gfc_expr * c, gfc_expr * b)\n   else\n     back = 0;\n \n-  result = gfc_constant_result (BT_INTEGER, gfc_default_integer_kind (),\n+  result = gfc_constant_result (BT_INTEGER, gfc_default_integer_kind,\n \t\t\t\t&e->where);\n \n   len = e->value.character.length;\n@@ -3173,7 +3173,7 @@ gfc_simplify_shape (gfc_expr * source)\n   if (source->rank == 0 || source->expr_type != EXPR_VARIABLE)\n     return NULL;\n \n-  result = gfc_start_constructor (BT_INTEGER, gfc_default_integer_kind (),\n+  result = gfc_start_constructor (BT_INTEGER, gfc_default_integer_kind,\n \t\t\t\t  &source->where);\n \n   ar = gfc_find_array_ref (source);\n@@ -3182,7 +3182,7 @@ gfc_simplify_shape (gfc_expr * source)\n \n   for (n = 0; n < source->rank; n++)\n     {\n-      e = gfc_constant_result (BT_INTEGER, gfc_default_integer_kind (),\n+      e = gfc_constant_result (BT_INTEGER, gfc_default_integer_kind,\n \t\t\t       &source->where);\n \n       if (t == SUCCESS)\n@@ -3236,7 +3236,7 @@ gfc_simplify_size (gfc_expr * array, gfc_expr * dim)\n \treturn NULL;\n     }\n \n-  result = gfc_constant_result (BT_INTEGER, gfc_default_integer_kind (),\n+  result = gfc_constant_result (BT_INTEGER, gfc_default_integer_kind,\n \t\t\t\t&array->where);\n \n   mpz_set (result->value.integer, size);\n@@ -3350,7 +3350,7 @@ gfc_simplify_sngl (gfc_expr * a)\n   if (a->expr_type != EXPR_CONSTANT)\n     return NULL;\n \n-  result = gfc_real2real (a, gfc_default_real_kind ());\n+  result = gfc_real2real (a, gfc_default_real_kind);\n   return range_check (result, \"SNGL\");\n }\n \n@@ -3654,7 +3654,7 @@ gfc_simplify_verify (gfc_expr * s, gfc_expr * set, gfc_expr * b)\n   else\n     back = 0;\n \n-  result = gfc_constant_result (BT_INTEGER, gfc_default_integer_kind (),\n+  result = gfc_constant_result (BT_INTEGER, gfc_default_integer_kind,\n \t\t\t\t&s->where);\n \n   len = s->value.character.length;"}, {"sha": "b7097215e100e74f3dec21278dac72df4d94ad41", "filename": "gcc/fortran/symbol.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9d64df18fd9175749aea2742096b172f59a5ebeb/gcc%2Ffortran%2Fsymbol.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9d64df18fd9175749aea2742096b172f59a5ebeb/gcc%2Ffortran%2Fsymbol.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fsymbol.c?ref=9d64df18fd9175749aea2742096b172f59a5ebeb", "patch": "@@ -1576,12 +1576,12 @@ gfc_get_namespace (gfc_namespace * parent)\n       if ('i' <= i && i <= 'n')\n \t{\n \t  ts->type = BT_INTEGER;\n-\t  ts->kind = gfc_default_integer_kind ();\n+\t  ts->kind = gfc_default_integer_kind;\n \t}\n       else\n \t{\n \t  ts->type = BT_REAL;\n-\t  ts->kind = gfc_default_real_kind ();\n+\t  ts->kind = gfc_default_real_kind;\n \t}\n     }\n "}, {"sha": "56687273e1757ccc9ec812525263350fde3e1755", "filename": "gcc/fortran/trans-const.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9d64df18fd9175749aea2742096b172f59a5ebeb/gcc%2Ffortran%2Ftrans-const.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9d64df18fd9175749aea2742096b172f59a5ebeb/gcc%2Ffortran%2Ftrans-const.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-const.c?ref=9d64df18fd9175749aea2742096b172f59a5ebeb", "patch": "@@ -252,7 +252,7 @@ gfc_conv_mpfr_to_tree (mpfr_t f, int kind)\n       edigits += 3;\n     }\n \n-  if (kind == gfc_default_double_kind())\n+  if (kind == gfc_default_double_kind)\n     p = mpfr_get_str (NULL, &exp, 10, 17, f, GFC_RND_MODE);\n   else\n     p = mpfr_get_str (NULL, &exp, 10, 8, f, GFC_RND_MODE);"}, {"sha": "fb9541f7efd35999a7712cf53cbf5c598f605cfc", "filename": "gcc/fortran/trans-io.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9d64df18fd9175749aea2742096b172f59a5ebeb/gcc%2Ffortran%2Ftrans-io.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9d64df18fd9175749aea2742096b172f59a5ebeb/gcc%2Ffortran%2Ftrans-io.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-io.c?ref=9d64df18fd9175749aea2742096b172f59a5ebeb", "patch": "@@ -817,7 +817,7 @@ gfc_new_nml_name_expr (char * name)\n    nml_name = gfc_get_expr();\n    nml_name->ref = NULL;\n    nml_name->expr_type = EXPR_CONSTANT;\n-   nml_name->ts.kind = gfc_default_character_kind ();\n+   nml_name->ts.kind = gfc_default_character_kind;\n    nml_name->ts.type = BT_CHARACTER;\n    nml_name->value.character.length = strlen(name);\n    nml_name->value.character.string = name;"}, {"sha": "e247fb3139669c9788d246958a24393aa930ab11", "filename": "gcc/fortran/trans-types.c", "status": "modified", "additions": 21, "deletions": 60, "changes": 81, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9d64df18fd9175749aea2742096b172f59a5ebeb/gcc%2Ffortran%2Ftrans-types.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9d64df18fd9175749aea2742096b172f59a5ebeb/gcc%2Ffortran%2Ftrans-types.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-types.c?ref=9d64df18fd9175749aea2742096b172f59a5ebeb", "patch": "@@ -78,12 +78,12 @@ int gfc_index_integer_kind;\n \n /* The default kinds of the various types.  */\n \n-static int gfc_default_integer_kind_1;\n-static int gfc_default_real_kind_1;\n-static int gfc_default_double_kind_1;\n-static int gfc_default_character_kind_1;\n-static int gfc_default_logical_kind_1;\n-static int gfc_default_complex_kind_1;\n+int gfc_default_integer_kind;\n+int gfc_default_real_kind;\n+int gfc_default_double_kind;\n+int gfc_default_character_kind;\n+int gfc_default_logical_kind;\n+int gfc_default_complex_kind;\n \n /* Query the target to determine which machine modes are available for\n    computation.  Choose KIND numbers for them.  */\n@@ -180,31 +180,31 @@ gfc_init_kinds (void)\n     {\n       if (!saw_i8)\n \tfatal_error (\"integer kind=8 not available for -i8 option\");\n-      gfc_default_integer_kind_1 = 8;\n+      gfc_default_integer_kind = 8;\n     }\n   else if (saw_i4)\n-    gfc_default_integer_kind_1 = 4;\n+    gfc_default_integer_kind = 4;\n   else\n-    gfc_default_integer_kind_1 = gfc_integer_kinds[i_index - 1].kind;\n+    gfc_default_integer_kind = gfc_integer_kinds[i_index - 1].kind;\n \n   /* Choose the default real kind.  Again, we choose 4 when possible.  */\n   if (gfc_option.r8)\n     {\n       if (!saw_r8)\n \tfatal_error (\"real kind=8 not available for -r8 option\");\n-      gfc_default_real_kind_1 = 8;\n+      gfc_default_real_kind = 8;\n     }\n   else if (saw_r4)\n-    gfc_default_real_kind_1 = 4;\n+    gfc_default_real_kind = 4;\n   else\n-    gfc_default_real_kind_1 = gfc_real_kinds[0].kind;\n+    gfc_default_real_kind = gfc_real_kinds[0].kind;\n \n   /* Choose the default double kind.  If -r8 is specified, we use kind=16,\n      if it's available, otherwise we do not change anything.  */\n   if (gfc_option.r8 && saw_r16)\n-    gfc_default_double_kind_1 = 16;\n+    gfc_default_double_kind = 16;\n   else if (saw_r4 && saw_r8)\n-    gfc_default_double_kind_1 = 8;\n+    gfc_default_double_kind = 8;\n   else\n     {\n       /* F95 14.6.3.1: A nonpointer scalar object of type double precision\n@@ -218,61 +218,22 @@ gfc_init_kinds (void)\n \t no GCC targets for which a two-word type does not exist, so we\n \t just let gfc_validate_kind abort and tell us if something breaks.  */\n \n-      gfc_default_double_kind_1\n-\t= gfc_validate_kind (BT_REAL, gfc_default_real_kind_1 * 2, false);\n+      gfc_default_double_kind\n+\t= gfc_validate_kind (BT_REAL, gfc_default_real_kind * 2, false);\n     }\n \n   /* The default logical kind is constrained to be the same as the\n      default integer kind.  Similarly with complex and real.  */\n-  gfc_default_logical_kind_1 = gfc_default_integer_kind_1;\n-  gfc_default_complex_kind_1 = gfc_default_real_kind_1;\n+  gfc_default_logical_kind = gfc_default_integer_kind;\n+  gfc_default_complex_kind = gfc_default_real_kind;\n \n   /* Choose the smallest integer kind for our default character.  */\n-  gfc_default_character_kind_1 = gfc_integer_kinds[0].kind;\n+  gfc_default_character_kind = gfc_integer_kinds[0].kind;\n \n   /* Choose the integer kind the same size as \"void*\" for our index kind.  */\n   gfc_index_integer_kind = POINTER_SIZE / 8;\n }\n \n-/* ??? These functions should go away in favor of direct access to\n-   the relevant variables.  */\n-\n-int\n-gfc_default_integer_kind (void)\n-{\n-  return gfc_default_integer_kind_1;\n-}\n-\n-int\n-gfc_default_real_kind (void)\n-{\n-  return gfc_default_real_kind_1;\n-}\n-\n-int\n-gfc_default_double_kind (void)\n-{\n-  return gfc_default_double_kind_1;\n-}\n-\n-int\n-gfc_default_character_kind (void)\n-{\n-  return gfc_default_character_kind_1;\n-}\n-\n-int\n-gfc_default_logical_kind (void)\n-{\n-  return gfc_default_logical_kind_1;\n-}\n-\n-int\n-gfc_default_complex_kind (void)\n-{\n-  return gfc_default_complex_kind_1;\n-}\n-\n /* Make sure that a valid kind is present.  Returns an index into the\n    associated kinds array, -1 if the kind is not present.  */\n \n@@ -315,7 +276,7 @@ validate_logical (int kind)\n static int\n validate_character (int kind)\n {\n-  return kind == gfc_default_character_kind_1 ? 0 : -1;\n+  return kind == gfc_default_character_kind ? 0 : -1;\n }\n \n /* Validate a kind given a basic type.  The return value is the same\n@@ -466,7 +427,7 @@ gfc_init_types (void)\n     = build_int_cst_wide (long_unsigned_type_node, lo, hi);\n \n   size_type_node = gfc_array_index_type;\n-  boolean_type_node = gfc_get_logical_type (gfc_default_logical_kind ());\n+  boolean_type_node = gfc_get_logical_type (gfc_default_logical_kind);\n \n   boolean_true_node = build_int_cst (boolean_type_node, 1);\n   boolean_false_node = build_int_cst (boolean_type_node, 0);"}]}