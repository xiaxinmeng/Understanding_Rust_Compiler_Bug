{"sha": "c1a03f03117d454190e4f2e05cc1d68c3169132b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzFhMDNmMDMxMTdkNDU0MTkwZTRmMmUwNWNjMWQ2OGMzMTY5MTMyYg==", "commit": {"author": {"name": "Benjamin Kosnik", "email": "bkoz@redhat.com", "date": "2006-09-12T17:48:45Z"}, "committer": {"name": "Benjamin Kosnik", "email": "bkoz@gcc.gnu.org", "date": "2006-09-12T17:48:45Z"}, "message": "eh_globals.cc: Remove __gnu_internal.\n\n2006-09-12  Benjamin Kosnik  <bkoz@redhat.com>\n\n\t* libsupc++/eh_globals.cc: Remove __gnu_internal.\n\t* config/io/basic_file_stdio.cc: Same.\n\t* config/abi/compatibility.h: Same.\n\t* config/cpu/generic/atomicity_mutex/atomicity.h: Same.\n\t* config/cpu/sh/atomicity.h: Same.\n\nFrom-SVN: r116899", "tree": {"sha": "6db29cef50e6329534c0434e843f9be75b9833a3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6db29cef50e6329534c0434e843f9be75b9833a3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c1a03f03117d454190e4f2e05cc1d68c3169132b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c1a03f03117d454190e4f2e05cc1d68c3169132b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c1a03f03117d454190e4f2e05cc1d68c3169132b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c1a03f03117d454190e4f2e05cc1d68c3169132b/comments", "author": null, "committer": null, "parents": [{"sha": "fb8cbd3cb710a0e96d7b50e93f6dc37873c399f2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fb8cbd3cb710a0e96d7b50e93f6dc37873c399f2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fb8cbd3cb710a0e96d7b50e93f6dc37873c399f2"}], "stats": {"total": 72, "additions": 39, "deletions": 33}, "files": [{"sha": "830adbf306634920e694e993054b8c82cf7794bf", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c1a03f03117d454190e4f2e05cc1d68c3169132b/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c1a03f03117d454190e4f2e05cc1d68c3169132b/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=c1a03f03117d454190e4f2e05cc1d68c3169132b", "patch": "@@ -1,3 +1,11 @@\n+2006-09-12  Benjamin Kosnik  <bkoz@redhat.com>\n+\n+\t* libsupc++/eh_globals.cc: Remove __gnu_internal.\n+\t* config/io/basic_file_stdio.cc: Same.\n+\t* config/abi/compatibility.h: Same.\n+\t* config/cpu/generic/atomicity_mutex/atomicity.h: Same.\n+\t* config/cpu/sh/atomicity.h: Same.\n+\t\n 2006-09-10  Paolo Carlini  <pcarlini@suse.de>\n \n \t* include/bits/stl_heap.h (sort_heap): Iterator post-decrement is"}, {"sha": "51a8acf26e5e457a74e1d5aac29063b68905c02c", "filename": "libstdc++-v3/config/abi/compatibility.h", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c1a03f03117d454190e4f2e05cc1d68c3169132b/libstdc%2B%2B-v3%2Fconfig%2Fabi%2Fcompatibility.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c1a03f03117d454190e4f2e05cc1d68c3169132b/libstdc%2B%2B-v3%2Fconfig%2Fabi%2Fcompatibility.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fabi%2Fcompatibility.h?ref=c1a03f03117d454190e4f2e05cc1d68c3169132b", "patch": "@@ -1,6 +1,6 @@\n // Compatibility symbols for previous versions -*- C++ -*-\n \n-// Copyright (C) 2005\n+// Copyright (C) 2005, 2006\n // Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n@@ -37,7 +37,7 @@\n _ZNSt19istreambuf_iteratorIcSt11char_traitsIcEEppEv\n _ZNSt19istreambuf_iteratorIwSt11char_traitsIwEEppEv\n  */\n-namespace __gnu_internal\n+namespace \n {\n _GLIBCXX_APPLY_SYMVER(_ZNSt21istreambuf_iteratorXXIcSt11char_traitsIcEEppEv,\n \t\t      _ZNSt19istreambuf_iteratorIcSt11char_traitsIcEEppEv)\n@@ -46,7 +46,7 @@ _GLIBCXX_APPLY_SYMVER(_ZNSt21istreambuf_iteratorXXIcSt11char_traitsIcEEppEv,\n _GLIBCXX_APPLY_SYMVER(_ZNSt21istreambuf_iteratorXXIwSt11char_traitsIwEEppEv,\n \t\t      _ZNSt19istreambuf_iteratorIwSt11char_traitsIwEEppEv)\n #endif\n-} // namespace std\n+} // anonymous namespace\n \n /* gcc-4.0.0\n _ZNSs4_Rep26_M_set_length_and_sharableEj\n@@ -77,7 +77,7 @@ _ZNSt13basic_istreamIwSt11char_traitsIwEE6ignoreEv\n _ZNSt11char_traitsIcE2eqERKcS2_\n _ZNSt11char_traitsIwE2eqERKwS2_\n  */\n-namespace __gnu_internal\n+namespace \n {\n _GLIBCXX_APPLY_SYMVER(_ZNSt11char_traitsIcE4eqXXERKcS2_,\n \t\t      _ZNSt11char_traitsIcE2eqERKcS2_)\n@@ -210,5 +210,5 @@ _GLIBCXX_APPLY_SYMVER(_ZNKSt16basic_ifstreamXXIwSt11char_traitsIwEE7is_openEv,\n _GLIBCXX_APPLY_SYMVER(_ZNKSt16basic_ofstreamXXIwSt11char_traitsIwEE7is_openEv,\n \t\t      _ZNKSt14basic_ofstreamIwSt11char_traitsIwEE7is_openEv)\n #endif\n-}\n+  } // anonymous namespace\n "}, {"sha": "e62c5ae6f28bd5238bfc9670d274f2a1319093a4", "filename": "libstdc++-v3/config/cpu/generic/atomicity_mutex/atomicity.h", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c1a03f03117d454190e4f2e05cc1d68c3169132b/libstdc%2B%2B-v3%2Fconfig%2Fcpu%2Fgeneric%2Fatomicity_mutex%2Fatomicity.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c1a03f03117d454190e4f2e05cc1d68c3169132b/libstdc%2B%2B-v3%2Fconfig%2Fcpu%2Fgeneric%2Fatomicity_mutex%2Fatomicity.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fcpu%2Fgeneric%2Fatomicity_mutex%2Fatomicity.h?ref=c1a03f03117d454190e4f2e05cc1d68c3169132b", "patch": "@@ -1,6 +1,6 @@\n // Low-level functions for atomic operations: Generic version  -*- C++ -*-\n \n-// Copyright (C) 1999, 2001, 2002, 2003, 2004, 2005\n+// Copyright (C) 1999, 2001, 2002, 2003, 2004, 2005, 2006\n // Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n@@ -31,22 +31,22 @@\n #include <bits/atomicity.h>\n #include <bits/concurrence.h>\n \n-namespace __gnu_internal\n+namespace \n {\n   __glibcxx_mutex_define_initialized(atomic_mutex);\n-} // namespace __gnu_internal\n+} // anonymous namespace\n \n _GLIBCXX_BEGIN_NAMESPACE(__gnu_cxx)\n \n   _Atomic_word\n   __attribute__ ((__unused__))\n   __exchange_and_add(volatile _Atomic_word* __mem, int __val)\n   {\n-    __glibcxx_mutex_lock(__gnu_internal::atomic_mutex);\n+    __glibcxx_mutex_lock(atomic_mutex);\n     _Atomic_word __result;\n     __result = *__mem;\n     *__mem += __val;\n-    __glibcxx_mutex_unlock(__gnu_internal::atomic_mutex);\n+    __glibcxx_mutex_unlock(atomic_mutex);\n     return __result;\n   }\n "}, {"sha": "2294c5d13ac0421828005f8dad744d246ce91190", "filename": "libstdc++-v3/config/cpu/sh/atomicity.h", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c1a03f03117d454190e4f2e05cc1d68c3169132b/libstdc%2B%2B-v3%2Fconfig%2Fcpu%2Fsh%2Fatomicity.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c1a03f03117d454190e4f2e05cc1d68c3169132b/libstdc%2B%2B-v3%2Fconfig%2Fcpu%2Fsh%2Fatomicity.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fcpu%2Fsh%2Fatomicity.h?ref=c1a03f03117d454190e4f2e05cc1d68c3169132b", "patch": "@@ -1,6 +1,6 @@\n // Low-level functions for atomic operations: sh version  -*- C++ -*-\n \n-// Copyright (C) 1999, 2001, 2002, 2003, 2004, 2005\n+// Copyright (C) 1999, 2001, 2002, 2003, 2004, 2005, 2006\n // Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n@@ -77,22 +77,22 @@ __atomic_add (volatile _Atomic_word* __mem, int __val)\n #include <bits/atomicity.h>\n #include <bits/concurrence.h>\n \n-namespace __gnu_internal\n+namespace \n {\n   __glibcxx_mutex_define_initialized(atomic_mutex);\n-} // namespace __gnu_internal\n+} // anonymous namespace\n \n _GLIBCXX_BEGIN_NAMESPACE(__gnu_cxx)\n \n   _Atomic_word\n   __attribute__ ((__unused__))\n   __exchange_and_add(volatile _Atomic_word* __mem, int __val)\n   {\n-    __glibcxx_mutex_lock(__gnu_internal::atomic_mutex);\n+    __glibcxx_mutex_lock(atomic_mutex);\n     _Atomic_word __result;\n     __result = *__mem;\n     *__mem += __val;\n-    __glibcxx_mutex_unlock(__gnu_internal::atomic_mutex);\n+    __glibcxx_mutex_unlock(atomic_mutex);\n     return __result;\n   }\n "}, {"sha": "2bc17baead9c3adc85aff4724ab74f95211ad16f", "filename": "libstdc++-v3/config/io/basic_file_stdio.cc", "status": "modified", "additions": 10, "deletions": 9, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c1a03f03117d454190e4f2e05cc1d68c3169132b/libstdc%2B%2B-v3%2Fconfig%2Fio%2Fbasic_file_stdio.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c1a03f03117d454190e4f2e05cc1d68c3169132b/libstdc%2B%2B-v3%2Fconfig%2Fio%2Fbasic_file_stdio.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fio%2Fbasic_file_stdio.cc?ref=c1a03f03117d454190e4f2e05cc1d68c3169132b", "patch": "@@ -1,6 +1,7 @@\n // Wrapper of C-language FILE struct -*- C++ -*-\n \n-// Copyright (C) 2000, 2001, 2002, 2003, 2004 Free Software Foundation, Inc.\n+// Copyright (C) 2000, 2001, 2002, 2003, 2004, 2006\n+// Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -70,7 +71,7 @@\n \n #include <limits> // For <off_t>::max() and min() and <streamsize>::max()\n \n-namespace __gnu_internal\n+namespace \n {\n   // Map ios_base::openmode flags to a string for use in fopen().\n   // Table of valid combinations as given in [lib.filebuf.members]/2.\n@@ -172,7 +173,7 @@ namespace __gnu_internal\n     return __n1 + __n2 - __nleft;\n   }\n #endif\n-} // namespace __gnu_internal\n+} // anonymous namespace\n \n \n _GLIBCXX_BEGIN_NAMESPACE(std)\n@@ -209,7 +210,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n   __basic_file<char>::sys_open(int __fd, ios_base::openmode __mode)\n   {\n     __basic_file* __ret = NULL;\n-    const char* __c_mode = __gnu_internal::fopen_mode(__mode);\n+    const char* __c_mode = fopen_mode(__mode);\n     if (__c_mode && !this->is_open() && (_M_cfile = fdopen(__fd, __c_mode)))\n       {\n \tchar* __buf = NULL;\n@@ -226,7 +227,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n \t\t\t   int /*__prot*/)\n   {\n     __basic_file* __ret = NULL;\n-    const char* __c_mode = __gnu_internal::fopen_mode(__mode);\n+    const char* __c_mode = fopen_mode(__mode);\n     if (__c_mode && !this->is_open())\n       {\n #ifdef _GLIBCXX_USE_LFS\n@@ -291,21 +292,21 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n \n   streamsize \n   __basic_file<char>::xsputn(const char* __s, streamsize __n)\n-  { return __gnu_internal::xwrite(this->fd(), __s, __n); }\n+  { return xwrite(this->fd(), __s, __n); }\n \n   streamsize \n   __basic_file<char>::xsputn_2(const char* __s1, streamsize __n1,\n \t\t\t       const char* __s2, streamsize __n2)\n   {\n     streamsize __ret = 0;\n #ifdef _GLIBCXX_HAVE_WRITEV\n-    __ret = __gnu_internal::xwritev(this->fd(), __s1, __n1, __s2, __n2);\n+    __ret = xwritev(this->fd(), __s1, __n1, __s2, __n2);\n #else\n     if (__n1)\n-      __ret = __gnu_internal::xwrite(this->fd(), __s1, __n1);\n+      __ret = xwrite(this->fd(), __s1, __n1);\n \n     if (__ret == __n1)\n-      __ret += __gnu_internal::xwrite(this->fd(), __s2, __n2);\n+      __ret += xwrite(this->fd(), __s2, __n2);\n #endif\n     return __ret;\n   }"}, {"sha": "424e375696e4b16235b707e30fd88c0bf5214748", "filename": "libstdc++-v3/libsupc++/eh_globals.cc", "status": "modified", "additions": 6, "deletions": 9, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c1a03f03117d454190e4f2e05cc1d68c3169132b/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Feh_globals.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c1a03f03117d454190e4f2e05cc1d68c3169132b/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Feh_globals.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Feh_globals.cc?ref=c1a03f03117d454190e4f2e05cc1d68c3169132b", "patch": "@@ -49,26 +49,23 @@ using namespace __cxxabiv1;\n \n #if _GLIBCXX_HAVE_TLS\n \n-namespace __gnu_internal\n+namespace\n {\n-  using namespace abi;\n-  using namespace std;\n-\n-  __cxa_eh_globals*\n+  abi::__cxa_eh_globals*\n   get_global() throw()\n   {\n-    static __thread __cxa_eh_globals global;\n+    static __thread abi::__cxa_eh_globals global;\n     return &global;\n   }\n-}\n+} // anonymous namespace\n \n extern \"C\" __cxa_eh_globals*\n __cxxabiv1::__cxa_get_globals_fast() throw()\n-{ return __gnu_internal::get_global(); }\n+{ return get_global(); }\n \n extern \"C\" __cxa_eh_globals*\n __cxxabiv1::__cxa_get_globals() throw()\n-{ return __gnu_internal::get_global(); }\n+{ return get_global(); }\n \n \n #else"}]}