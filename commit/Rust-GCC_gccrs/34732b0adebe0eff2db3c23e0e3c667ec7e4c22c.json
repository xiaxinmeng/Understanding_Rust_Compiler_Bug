{"sha": "34732b0adebe0eff2db3c23e0e3c667ec7e4c22c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzQ3MzJiMGFkZWJlMGVmZjJkYjNjMjNlMGUzYzY2N2VjN2U0YzIyYw==", "commit": {"author": {"name": "Anatoly Sokolov", "email": "aesok@post.ru", "date": "2009-10-31T21:56:14Z"}, "committer": {"name": "Anatoly Sokolov", "email": "aesok@gcc.gnu.org", "date": "2009-10-31T21:56:14Z"}, "message": "mn10300.c (mn10300_function_value): Make static, add new 'outgoing' argument.\n\n\t* config/mn10300/mn10300.c (mn10300_function_value): Make static, add\n\tnew 'outgoing' argument.\n\t(mn10300_libcall_value, mn10300_function_value_regno_p): New\n\tfunctions.\n\t(TARGET_FUNCTION_VALUE, TARGET_LIBCALL_VALUE): Declare.\n\t* config/mn10300/mn10300.h: (FUNCTION_VALUE, FUNCTION_OUTGOING_VALUE,\n\tLIBCALL_VALUE): Remove.\n\t(FUNCTION_VALUE_REGNO_P): Redefine, use mn10300_function_value_regno_p.\n\t* config/mn10300/mn10300-protos.h (mn10300_function_value): Remove.\n\t(mh10300_function_value_regno_p): Declare.\n\nFrom-SVN: r153782", "tree": {"sha": "c5f6c633174ba9d95f902eff1e2ec3a9c6806ab2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c5f6c633174ba9d95f902eff1e2ec3a9c6806ab2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/34732b0adebe0eff2db3c23e0e3c667ec7e4c22c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/34732b0adebe0eff2db3c23e0e3c667ec7e4c22c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/34732b0adebe0eff2db3c23e0e3c667ec7e4c22c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/34732b0adebe0eff2db3c23e0e3c667ec7e4c22c/comments", "author": null, "committer": null, "parents": [{"sha": "46527cc82c394c372e91b7453dccfc1da5899aa0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/46527cc82c394c372e91b7453dccfc1da5899aa0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/46527cc82c394c372e91b7453dccfc1da5899aa0"}], "stats": {"total": 66, "additions": 44, "deletions": 22}, "files": [{"sha": "7d63c0a479fb51da20e7cfed117c3a052d138d4e", "filename": "gcc/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/34732b0adebe0eff2db3c23e0e3c667ec7e4c22c/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/34732b0adebe0eff2db3c23e0e3c667ec7e4c22c/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=34732b0adebe0eff2db3c23e0e3c667ec7e4c22c", "patch": "@@ -1,3 +1,16 @@\n+2009-10-31  Anatoly Sokolov  <aesok@post.ru>\n+\n+\t* config/mn10300/mn10300.c (mn10300_function_value): Make static, add\n+\tnew 'outgoing' argument.\n+\t(mn10300_libcall_value, mn10300_function_value_regno_p): New\n+\tfunctions.\n+\t(TARGET_FUNCTION_VALUE, TARGET_LIBCALL_VALUE): Declare.\n+\t* config/mn10300/mn10300.h: (FUNCTION_VALUE, FUNCTION_OUTGOING_VALUE,\n+\tLIBCALL_VALUE): Remove.\n+\t(FUNCTION_VALUE_REGNO_P): Redefine, use mn10300_function_value_regno_p.\n+\t* config/mn10300/mn10300-protos.h (mn10300_function_value): Remove.\n+\t(mh10300_function_value_regno_p): Declare.\n+\n 2009-10-31  Ramana Radhakrishnan  <ramana.radhakrishnan@arm.com>\n \n         * config/arm/cortex-a9.md: New - integer pipeline description."}, {"sha": "47488c9b0ba197991f23357a7eb43f5c0f14cf24", "filename": "gcc/config/mn10300/mn10300-protos.h", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/34732b0adebe0eff2db3c23e0e3c667ec7e4c22c/gcc%2Fconfig%2Fmn10300%2Fmn10300-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/34732b0adebe0eff2db3c23e0e3c667ec7e4c22c/gcc%2Fconfig%2Fmn10300%2Fmn10300-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmn10300%2Fmn10300-protos.h?ref=34732b0adebe0eff2db3c23e0e3c667ec7e4c22c", "patch": "@@ -37,12 +37,13 @@ extern int symbolic_operand (rtx, enum machine_mode);\n extern int impossible_plus_operand (rtx, enum machine_mode);\n \n extern bool mn10300_wide_const_load_uses_clr (rtx operands[2]);\n+\n+extern bool mn10300_function_value_regno_p (const unsigned int);\n #endif /* RTX_CODE */\n \n #ifdef TREE_CODE\n extern struct rtx_def *function_arg (CUMULATIVE_ARGS *,\n \t\t\t\t     enum machine_mode, tree, int);\n-extern rtx mn10300_function_value (const_tree, const_tree, int);\n #endif /* TREE_CODE */\n \n extern void expand_prologue (void);"}, {"sha": "8f69dd0d995ac1e7031a41ec63fdada7b752b89a", "filename": "gcc/config/mn10300/mn10300.c", "status": "modified", "additions": 28, "deletions": 2, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/34732b0adebe0eff2db3c23e0e3c667ec7e4c22c/gcc%2Fconfig%2Fmn10300%2Fmn10300.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/34732b0adebe0eff2db3c23e0e3c667ec7e4c22c/gcc%2Fconfig%2Fmn10300%2Fmn10300.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmn10300%2Fmn10300.c?ref=34732b0adebe0eff2db3c23e0e3c667ec7e4c22c", "patch": "@@ -86,6 +86,8 @@ static unsigned int mn10300_case_values_threshold (void);\n static void mn10300_encode_section_info (tree, rtx, int);\n static void mn10300_asm_trampoline_template (FILE *);\n static void mn10300_trampoline_init (rtx, tree, rtx);\n+static rtx mn10300_function_value (const_tree, const_tree, bool);\n+static rtx mn10300_libcall_value (enum machine_mode, const_rtx);\n \f\n /* Initialize the GCC target structure.  */\n #undef TARGET_ASM_ALIGNED_HI_OP\n@@ -139,6 +141,11 @@ static void mn10300_trampoline_init (rtx, tree, rtx);\n #undef TARGET_TRAMPOLINE_INIT\n #define TARGET_TRAMPOLINE_INIT mn10300_trampoline_init\n \n+#undef TARGET_FUNCTION_VALUE\n+#define TARGET_FUNCTION_VALUE mn10300_function_value\n+#undef TARGET_LIBCALL_VALUE\n+#define TARGET_LIBCALL_VALUE mn10300_libcall_value\n+\n struct gcc_target targetm = TARGET_INITIALIZER;\n \f\n /* Implement TARGET_HANDLE_OPTION.  */\n@@ -1624,8 +1631,10 @@ mn10300_arg_partial_bytes (CUMULATIVE_ARGS *cum, enum machine_mode mode,\n    we only return the PARALLEL for outgoing values; we do not want\n    callers relying on this extra copy.  */\n \n-rtx\n-mn10300_function_value (const_tree valtype, const_tree func, int outgoing)\n+static rtx\n+mn10300_function_value (const_tree valtype,\n+\t\t\tconst_tree fn_decl_or_type ATTRIBUTE_UNUSED,\n+\t\t\tbool outgoing)\n {\n   rtx rv;\n   enum machine_mode mode = TYPE_MODE (valtype);\n@@ -1649,6 +1658,23 @@ mn10300_function_value (const_tree valtype, const_tree func, int outgoing)\n   return rv;\n }\n \n+/* Implements TARGET_LIBCALL_VALUE.  */\n+\n+static rtx\n+mn10300_libcall_value (enum machine_mode mode,\n+\t\t       const_rtx fun ATTRIBUTE_UNUSED)\n+{\n+  return gen_rtx_REG (mode, FIRST_DATA_REGNUM);\n+}\n+\n+/* Implements FUNCTION_VALUE_REGNO_P.  */\n+\n+bool\n+mn10300_function_value_regno_p (const unsigned int regno)\n+{\n+ return (regno == FIRST_DATA_REGNUM || regno == FIRST_ADDRESS_REGNUM);\n+}\n+\n /* Output a tst insn.  */\n const char *\n output_tst (rtx operand, rtx insn)"}, {"sha": "bdbc948ac1273f1033d763670368512771494957", "filename": "gcc/config/mn10300/mn10300.h", "status": "modified", "additions": 1, "deletions": 19, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/34732b0adebe0eff2db3c23e0e3c667ec7e4c22c/gcc%2Fconfig%2Fmn10300%2Fmn10300.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/34732b0adebe0eff2db3c23e0e3c667ec7e4c22c/gcc%2Fconfig%2Fmn10300%2Fmn10300.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmn10300%2Fmn10300.h?ref=34732b0adebe0eff2db3c23e0e3c667ec7e4c22c", "patch": "@@ -564,25 +564,7 @@ struct cum_arg {int nbytes; };\n #define FUNCTION_ARG(CUM, MODE, TYPE, NAMED) \\\n   function_arg (&CUM, MODE, TYPE, NAMED)\n \n-/* Define how to find the value returned by a function.\n-   VALTYPE is the data type of the value (as a tree).\n-   If the precise function being called is known, FUNC is its FUNCTION_DECL;\n-   otherwise, FUNC is 0.  */\n-\n-#define FUNCTION_VALUE(VALTYPE, FUNC) \\\n-  mn10300_function_value (VALTYPE, FUNC, 0)\n-#define FUNCTION_OUTGOING_VALUE(VALTYPE, FUNC) \\\n-  mn10300_function_value (VALTYPE, FUNC, 1)\n-\n-/* Define how to find the value returned by a library function\n-   assuming the value has mode MODE.  */\n-\n-#define LIBCALL_VALUE(MODE) gen_rtx_REG (MODE, FIRST_DATA_REGNUM)\n-\n-/* 1 if N is a possible register number for a function value.  */\n-\n-#define FUNCTION_VALUE_REGNO_P(N) \\\n-  ((N) == FIRST_DATA_REGNUM || (N) == FIRST_ADDRESS_REGNUM)\n+#define FUNCTION_VALUE_REGNO_P(N)  mn10300_function_value_regno_p (N)\n \n #define DEFAULT_PCC_STRUCT_RETURN 0\n "}]}