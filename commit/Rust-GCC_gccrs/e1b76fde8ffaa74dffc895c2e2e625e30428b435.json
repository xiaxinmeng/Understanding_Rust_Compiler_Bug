{"sha": "e1b76fde8ffaa74dffc895c2e2e625e30428b435", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTFiNzZmZGU4ZmZhYTc0ZGZmYzg5NWMyZTJlNjI1ZTMwNDI4YjQzNQ==", "commit": {"author": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2017-10-26T23:04:12Z"}, "committer": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2017-10-26T23:04:12Z"}, "message": "compiler: explicitly convert between type aliases\n    \n    Otherwise we can get a crash in the backend.\n    \n    Test case is https://golang.org/cl/73790.\n    \n    Reviewed-on: https://go-review.googlesource.com/73810\n\nFrom-SVN: r254126", "tree": {"sha": "d9d0d3c409c9dbcccf50b746203d6675f1ba3f3c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d9d0d3c409c9dbcccf50b746203d6675f1ba3f3c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e1b76fde8ffaa74dffc895c2e2e625e30428b435", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e1b76fde8ffaa74dffc895c2e2e625e30428b435", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e1b76fde8ffaa74dffc895c2e2e625e30428b435", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e1b76fde8ffaa74dffc895c2e2e625e30428b435/comments", "author": null, "committer": null, "parents": [{"sha": "1cef1159dbf7af419d9cd2c75fadcd1eb2fa0ab3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1cef1159dbf7af419d9cd2c75fadcd1eb2fa0ab3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1cef1159dbf7af419d9cd2c75fadcd1eb2fa0ab3"}], "stats": {"total": 18, "additions": 12, "deletions": 6}, "files": [{"sha": "0fa2cccebfe3becfaf6a54334e1748b1b9588b8e", "filename": "gcc/go/gofrontend/MERGE", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e1b76fde8ffaa74dffc895c2e2e625e30428b435/gcc%2Fgo%2Fgofrontend%2FMERGE", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e1b76fde8ffaa74dffc895c2e2e625e30428b435/gcc%2Fgo%2Fgofrontend%2FMERGE", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2FMERGE?ref=e1b76fde8ffaa74dffc895c2e2e625e30428b435", "patch": "@@ -1,4 +1,4 @@\n-a409ac2c78899e638a014c97891925bec93cb3ad\n+64d570c590a76921cbdca4efb22e4675e19cc809\n \n The first line of this file holds the git revision number of the last\n merge done from the gofrontend repository."}, {"sha": "dad22ebd2c97adaeab654beafa5b6b77deee3070", "filename": "gcc/go/gofrontend/expressions.cc", "status": "modified", "additions": 11, "deletions": 5, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e1b76fde8ffaa74dffc895c2e2e625e30428b435/gcc%2Fgo%2Fgofrontend%2Fexpressions.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e1b76fde8ffaa74dffc895c2e2e625e30428b435/gcc%2Fgo%2Fgofrontend%2Fexpressions.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Fexpressions.cc?ref=e1b76fde8ffaa74dffc895c2e2e625e30428b435", "patch": "@@ -144,17 +144,16 @@ Expression::convert_for_assignment(Gogo*, Type* lhs_type,\n       || rhs->is_error_expression())\n     return Expression::make_error(location);\n \n-  if (lhs_type->forwarded() != rhs_type->forwarded()\n-      && lhs_type->interface_type() != NULL)\n+  bool are_identical = Type::are_identical(lhs_type, rhs_type, false, NULL);\n+  if (!are_identical && lhs_type->interface_type() != NULL)\n     {\n       if (rhs_type->interface_type() == NULL)\n         return Expression::convert_type_to_interface(lhs_type, rhs, location);\n       else\n         return Expression::convert_interface_to_interface(lhs_type, rhs, false,\n                                                           location);\n     }\n-  else if (lhs_type->forwarded() != rhs_type->forwarded()\n-\t   && rhs_type->interface_type() != NULL)\n+  else if (!are_identical && rhs_type->interface_type() != NULL)\n     return Expression::convert_interface_to_type(lhs_type, rhs, location);\n   else if (lhs_type->is_slice_type() && rhs_type->is_nil_type())\n     {\n@@ -165,8 +164,15 @@ Expression::convert_for_assignment(Gogo*, Type* lhs_type,\n     }\n   else if (rhs_type->is_nil_type())\n     return Expression::make_nil(location);\n-  else if (Type::are_identical(lhs_type, rhs_type, false, NULL))\n+  else if (are_identical)\n     {\n+      if (lhs_type->forwarded() != rhs_type->forwarded())\n+\t{\n+\t  // Different but identical types require an explicit\n+\t  // conversion.  This happens with type aliases.\n+\t  return Expression::make_cast(lhs_type, rhs, location);\n+\t}\n+\n       // No conversion is needed.\n       return rhs;\n     }"}]}