{"sha": "b1b543d2c07b470207d4b347d6b2a9af6d488da7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjFiNTQzZDJjMDdiNDcwMjA3ZDRiMzQ3ZDZiMmE5YWY2ZDQ4OGRhNw==", "commit": {"author": {"name": "Bob Duff", "email": "duff@adacore.com", "date": "2009-04-17T12:11:04Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2009-04-17T12:11:04Z"}, "message": "output.ads (Indent,Outdent): New procedures for indenting the output.\n\n2009-04-17  Bob Duff  <duff@adacore.com>\n\n\t* output.ads (Indent,Outdent): New procedures for indenting the output.\n\t(Write_Char): Correct comment -- LF _is_ allowed.\n\n\t* output.adb (Indent,Outdent): New procedures for indenting the output.\n\tKeep track of the indentation level, and make sure it doesn't get too\n\thigh.\n\t(Flush_Buffer): Insert spaces at the beginning of each line, if\n\tindentation level is nonzero.\n\t(Save_Output_Buffer,Restore_Output_Buffer): Save and restore the current\n\tindentation level.\n\t(Set_Standard_Error,Set_Standard_Output): Remove superfluous\n\t\"Next_Col := 1;\".  Flush_Buffer does that.\n\n\t* sem_ch6.adb, sem_ch7.adb (Debug_Flag_C): Reorganize the output\n\tcontrolled by the -gnatdc switch. It now occurs on entry/exit to the\n\trelevant analysis routines, and calls Indent/Outdent to make the\n\tindentation reflect the nesting level.  Add \"helper\" routines, since\n\totherwise lots of \"return;\" statements would skip the debugging output.\n\nFrom-SVN: r146253", "tree": {"sha": "6e957cad5a9b6a8086189a2bb0175f2b72b4a7bd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6e957cad5a9b6a8086189a2bb0175f2b72b4a7bd"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b1b543d2c07b470207d4b347d6b2a9af6d488da7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b1b543d2c07b470207d4b347d6b2a9af6d488da7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b1b543d2c07b470207d4b347d6b2a9af6d488da7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b1b543d2c07b470207d4b347d6b2a9af6d488da7/comments", "author": {"login": "bobduff", "id": 29099567, "node_id": "MDQ6VXNlcjI5MDk5NTY3", "avatar_url": "https://avatars.githubusercontent.com/u/29099567?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bobduff", "html_url": "https://github.com/bobduff", "followers_url": "https://api.github.com/users/bobduff/followers", "following_url": "https://api.github.com/users/bobduff/following{/other_user}", "gists_url": "https://api.github.com/users/bobduff/gists{/gist_id}", "starred_url": "https://api.github.com/users/bobduff/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bobduff/subscriptions", "organizations_url": "https://api.github.com/users/bobduff/orgs", "repos_url": "https://api.github.com/users/bobduff/repos", "events_url": "https://api.github.com/users/bobduff/events{/privacy}", "received_events_url": "https://api.github.com/users/bobduff/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "e31f58141167c7eecd9bd9cdcf1a6a9cdd528f32", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e31f58141167c7eecd9bd9cdcf1a6a9cdd528f32", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e31f58141167c7eecd9bd9cdcf1a6a9cdd528f32"}], "stats": {"total": 274, "additions": 214, "deletions": 60}, "files": [{"sha": "5208daf22e4f68b9a4f82626ab589c1f7ae06a82", "filename": "gcc/ada/output.adb", "status": "modified", "additions": 87, "deletions": 17, "changes": 104, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b1b543d2c07b470207d4b347d6b2a9af6d488da7/gcc%2Fada%2Foutput.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b1b543d2c07b470207d4b347d6b2a9af6d488da7/gcc%2Fada%2Foutput.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Foutput.adb?ref=b1b543d2c07b470207d4b347d6b2a9af6d488da7", "patch": "@@ -40,6 +40,17 @@ package body Output is\n    --  Record argument to last call to Set_Special_Output. If this is\n    --  non-null, then we are in special output mode.\n \n+   Indentation_Amount : constant Positive := 3;\n+   --  Number of spaces to output for each indentation level\n+\n+   Indentation_Limit : constant Positive := 40;\n+   --  Indentation beyond this number of spaces wraps around\n+   pragma Assert (Indentation_Limit < Buffer_Max / 2);\n+   --  Make sure this is substantially shorter than the line length\n+\n+   Cur_Indentation : Natural := 0;\n+   --  Number of spaces to indent each line\n+\n    -----------------------\n    -- Local_Subprograms --\n    -----------------------\n@@ -70,50 +81,109 @@ package body Output is\n    ------------------\n \n    procedure Flush_Buffer is\n-      Len : constant Natural := Next_Col - 1;\n+      Write_Error : exception;\n+      --  Raised if Write fails\n \n-   begin\n-      if Len /= 0 then\n+      ------------------\n+      -- Write_Buffer --\n+      ------------------\n \n+      procedure Write_Buffer (Buf : String);\n+      --  Write out Buf, either using Special_Output_Proc, or the normal way\n+      --  using Write. Raise Write_Error if Write fails (presumably due to disk\n+      --  full). Write_Error is not used in the case of Special_Output_Proc.\n+\n+      procedure Write_Buffer (Buf : String) is\n+      begin\n          --  If Special_Output_Proc has been set, then use it\n \n          if Special_Output_Proc /= null then\n-            Special_Output_Proc.all (Buffer (1 .. Len));\n+            Special_Output_Proc.all (Buf);\n \n          --  If output is not set, then output to either standard output\n          --  or standard error.\n \n-         elsif Len /= Write (Current_FD, Buffer'Address, Len) then\n+         elsif Write (Current_FD, Buf'Address, Buf'Length) /= Buf'Length then\n+            raise Write_Error;\n \n-            --  If there are errors with standard error, just quit\n+         end if;\n+      end Write_Buffer;\n \n-            if Current_FD = Standerr then\n-               OS_Exit (2);\n+      Len : constant Natural := Next_Col - 1;\n \n-            --  Otherwise, set the output to standard error before\n-            --  reporting a failure and quitting.\n+   begin\n+      if Len /= 0 then\n+         begin\n+            --  If there's no indentation, or if the line is too long with\n+            --  indentation, just write the buffer.\n+\n+            if Cur_Indentation = 0\n+              or else Cur_Indentation + Len > Buffer_Max\n+            then\n+               Write_Buffer (Buffer (1 .. Len));\n+\n+            --  Otherwise, construct a new buffer with preceding spaces, and\n+            --  write that.\n \n             else\n-               Current_FD := Standerr;\n-               Next_Col := 1;\n-               Write_Line (\"fatal error: disk full\");\n-               OS_Exit (2);\n+               declare\n+                  Indented_Buffer : constant String\n+                    := (1 .. Cur_Indentation => ' ') & Buffer (1 .. Len);\n+               begin\n+                  Write_Buffer (Indented_Buffer);\n+               end;\n             end if;\n-         end if;\n+\n+         exception\n+            when Write_Error =>\n+               --  If there are errors with standard error, just quit.\n+               --  Otherwise, set the output to standard error before reporting\n+               --  a failure and quitting.\n+\n+               if Current_FD /= Standerr then\n+                  Current_FD := Standerr;\n+                  Next_Col := 1;\n+                  Write_Line (\"fatal error: disk full\");\n+               end if;\n+\n+               OS_Exit (2);\n+         end;\n \n          --  Buffer is now empty\n \n          Next_Col := 1;\n       end if;\n    end Flush_Buffer;\n \n+   ------------\n+   -- Indent --\n+   ------------\n+\n+   procedure Indent is\n+   begin\n+      Cur_Indentation :=\n+        (Cur_Indentation + Indentation_Amount) mod Indentation_Limit;\n+      --  The \"mod\" is to wrap around in case there's too much indentation.\n+   end Indent;\n+\n+   -------------\n+   -- Outdent --\n+   -------------\n+\n+   procedure Outdent is\n+   begin\n+      Cur_Indentation :=\n+        (Cur_Indentation - Indentation_Amount) mod Indentation_Limit;\n+   end Outdent;\n+\n    ---------------------------\n    -- Restore_Output_Buffer --\n    ---------------------------\n \n    procedure Restore_Output_Buffer (S : Saved_Output_Buffer) is\n    begin\n       Next_Col := S.Next_Col;\n+      Cur_Indentation := S.Cur_Indentation;\n       Buffer (1 .. Next_Col - 1) := S.Buffer (1 .. Next_Col - 1);\n    end Restore_Output_Buffer;\n \n@@ -126,7 +196,9 @@ package body Output is\n    begin\n       S.Buffer (1 .. Next_Col - 1) := Buffer (1 .. Next_Col - 1);\n       S.Next_Col := Next_Col;\n+      S.Cur_Indentation := Cur_Indentation;\n       Next_Col := 1;\n+      Cur_Indentation := 0;\n       return S;\n    end Save_Output_Buffer;\n \n@@ -147,7 +219,6 @@ package body Output is\n    begin\n       if Special_Output_Proc = null then\n          Flush_Buffer;\n-         Next_Col := 1;\n       end if;\n \n       Current_FD := Standerr;\n@@ -161,7 +232,6 @@ package body Output is\n    begin\n       if Special_Output_Proc = null then\n          Flush_Buffer;\n-         Next_Col := 1;\n       end if;\n \n       Current_FD := Standout;"}, {"sha": "2bb38fc8fa423686610f79af5e23e4dc98b8e71d", "filename": "gcc/ada/output.ads", "status": "modified", "additions": 12, "deletions": 3, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b1b543d2c07b470207d4b347d6b2a9af6d488da7/gcc%2Fada%2Foutput.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b1b543d2c07b470207d4b347d6b2a9af6d488da7/gcc%2Fada%2Foutput.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Foutput.ads?ref=b1b543d2c07b470207d4b347d6b2a9af6d488da7", "patch": "@@ -81,9 +81,17 @@ package Output is\n    --  has been cancelled. Output to standard output is the default mode\n    --  before any call to either of the Set procedures.\n \n+   procedure Indent;\n+   --  Increases the current indentation level. Whenever a line is written\n+   --  (triggered by Eol), an appropriate amount of whitespace is added to the\n+   --  beginning of the line, wrapping around if it gets to long.\n+\n+   procedure Outdent;\n+   --  Decreases the current indentation level.\n+\n    procedure Write_Char (C : Character);\n-   --  Write one character to the standard output file. Note that the\n-   --  character should not be LF or CR (use Write_Eol for end of line)\n+   --  Write one character to the standard output file. If the character is LF,\n+   --  this is equivalent to Write_Eol.\n \n    procedure Write_Erase_Char (C : Character);\n    --  If last character in buffer matches C, erase it, otherwise no effect\n@@ -177,7 +185,7 @@ private\n    --  subprograms defined in this package, and cannot be directly modified or\n    --  accessed by a client.\n \n-   Buffer : String (1 .. Buffer_Max + 1);\n+   Buffer : String (1 .. Buffer_Max + 1) := (others => '*');\n    for Buffer'Alignment use 4;\n    --  Buffer used to build output line. We do line buffering because it\n    --  is needed for the support of the debug-generated-code option (-gnatD).\n@@ -194,6 +202,7 @@ private\n    type Saved_Output_Buffer is record\n       Buffer   : String (1 .. Buffer_Max + 1);\n       Next_Col : Positive;\n+      Cur_Indentation : Natural;\n    end record;\n \n end Output;"}, {"sha": "a9dd4af54e19c108a92dd3c6f06d003ce602e9e6", "filename": "gcc/ada/sem_ch6.adb", "status": "modified", "additions": 60, "deletions": 21, "changes": 81, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b1b543d2c07b470207d4b347d6b2a9af6d488da7/gcc%2Fada%2Fsem_ch6.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b1b543d2c07b470207d4b347d6b2a9af6d488da7/gcc%2Fada%2Fsem_ch6.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch6.adb?ref=b1b543d2c07b470207d4b347d6b2a9af6d488da7", "patch": "@@ -107,6 +107,9 @@ package body Sem_Ch6 is\n    --  specification, in a context where the formals are visible and hide\n    --  outer homographs.\n \n+   procedure Analyze_Subprogram_Body_Helper (N : Node_Id);\n+   --  Does all the real work of Analyze_Subprogram_Body\n+\n    procedure Analyze_Generic_Subprogram_Body (N : Node_Id; Gen_Id : Entity_Id);\n    --  Analyze a generic subprogram body. N is the body to be analyzed, and\n    --  Gen_Id is the defining entity Id for the corresponding spec.\n@@ -1342,12 +1345,48 @@ package body Sem_Ch6 is\n    -- Analyze_Subprogram_Body --\n    -----------------------------\n \n+   procedure Analyze_Subprogram_Body (N : Node_Id) is\n+      Loc       : constant Source_Ptr := Sloc (N);\n+      Body_Spec : constant Node_Id    := Specification (N);\n+      Body_Id   : constant Entity_Id  := Defining_Entity (Body_Spec);\n+\n+   begin\n+      if Debug_Flag_C then\n+         Write_Str (\"==> subprogram body \");\n+         Write_Name (Chars (Body_Id));\n+         Write_Str (\" from \");\n+         Write_Location (Loc);\n+         Write_Eol;\n+         Indent;\n+      end if;\n+\n+      Trace_Scope (N, Body_Id, \" Analyze subprogram: \");\n+\n+      --  The real work is split out into the helper, so it can do \"return;\"\n+      --  without skipping the debug output:\n+\n+      Analyze_Subprogram_Body_Helper (N);\n+\n+      if Debug_Flag_C then\n+         Outdent;\n+         Write_Str (\"<== subprogram body \");\n+         Write_Name (Chars (Body_Id));\n+         Write_Str (\" from \");\n+         Write_Location (Loc);\n+         Write_Eol;\n+      end if;\n+   end Analyze_Subprogram_Body;\n+\n+   ------------------------------------\n+   -- Analyze_Subprogram_Body_Helper --\n+   ------------------------------------\n+\n    --  This procedure is called for regular subprogram bodies, generic bodies,\n    --  and for subprogram stubs of both kinds. In the case of stubs, only the\n    --  specification matters, and is used to create a proper declaration for\n    --  the subprogram, or to perform conformance checks.\n \n-   procedure Analyze_Subprogram_Body (N : Node_Id) is\n+   procedure Analyze_Subprogram_Body_Helper (N : Node_Id) is\n       Loc          : constant Source_Ptr := Sloc (N);\n       Body_Deleted : constant Boolean    := False;\n       Body_Spec    : constant Node_Id    := Specification (N);\n@@ -1785,19 +1824,9 @@ package body Sem_Ch6 is\n          end if;\n       end Verify_Overriding_Indicator;\n \n-   --  Start of processing for Analyze_Subprogram_Body\n+   --  Start of processing for Analyze_Subprogram_Body_Helper\n \n    begin\n-      if Debug_Flag_C then\n-         Write_Str (\"====  Compiling subprogram body \");\n-         Write_Name (Chars (Body_Id));\n-         Write_Str (\" from \");\n-         Write_Location (Loc);\n-         Write_Eol;\n-      end if;\n-\n-      Trace_Scope (N, Body_Id, \" Analyze subprogram: \");\n-\n       --  Generic subprograms are handled separately. They always have a\n       --  generic specification. Determine whether current scope has a\n       --  previous declaration.\n@@ -2558,7 +2587,7 @@ package body Sem_Ch6 is\n             Check_References (Body_Id);\n          end if;\n       end;\n-   end Analyze_Subprogram_Body;\n+   end Analyze_Subprogram_Body_Helper;\n \n    ------------------------------------\n    -- Analyze_Subprogram_Declaration --\n@@ -2572,6 +2601,15 @@ package body Sem_Ch6 is\n    --  Start of processing for Analyze_Subprogram_Declaration\n \n    begin\n+      if Debug_Flag_C then\n+         Write_Str (\"==> subprogram spec \");\n+         Write_Name (Chars (Designator));\n+         Write_Str (\" from \");\n+         Write_Location (Sloc (N));\n+         Write_Eol;\n+         Indent;\n+      end if;\n+\n       Generate_Definition (Designator);\n \n       --  Check for RCI unit subprogram declarations for illegal inlined\n@@ -2585,14 +2623,6 @@ package body Sem_Ch6 is\n          Defining_Entity (N),\n          \" Analyze subprogram spec: \");\n \n-      if Debug_Flag_C then\n-         Write_Str (\"====  Compiling subprogram spec \");\n-         Write_Name (Chars (Designator));\n-         Write_Str (\" from \");\n-         Write_Location (Sloc (N));\n-         Write_Eol;\n-      end if;\n-\n       New_Overloaded_Entity (Designator);\n       Check_Delayed_Subprogram (Designator);\n \n@@ -2712,6 +2742,15 @@ package body Sem_Ch6 is\n               (\"protected operation cannot be a null procedure\", N);\n          end if;\n       end if;\n+\n+      if Debug_Flag_C then\n+         Outdent;\n+         Write_Str (\"<== subprogram spec \");\n+         Write_Name (Chars (Designator));\n+         Write_Str (\" from \");\n+         Write_Location (Sloc (N));\n+         Write_Eol;\n+      end if;\n    end Analyze_Subprogram_Declaration;\n \n    --------------------------------------"}, {"sha": "e344a5802db33b00637a99409b2e9afab8b35d0d", "filename": "gcc/ada/sem_ch7.adb", "status": "modified", "additions": 55, "deletions": 19, "changes": 74, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b1b543d2c07b470207d4b347d6b2a9af6d488da7/gcc%2Fada%2Fsem_ch7.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b1b543d2c07b470207d4b347d6b2a9af6d488da7/gcc%2Fada%2Fsem_ch7.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch7.adb?ref=b1b543d2c07b470207d4b347d6b2a9af6d488da7", "patch": "@@ -90,6 +90,9 @@ package body Sem_Ch7 is\n    -- Local Subprograms --\n    -----------------------\n \n+   procedure Analyze_Package_Body_Helper (N : Node_Id);\n+   --  Does all the real work of Analyze_Package_Body\n+\n    procedure Check_Anonymous_Access_Types\n      (Spec_Id : Entity_Id;\n       P_Body  : Node_Id);\n@@ -135,7 +138,38 @@ package body Sem_Ch7 is\n    --------------------------\n \n    procedure Analyze_Package_Body (N : Node_Id) is\n-      Loc              : constant Source_Ptr := Sloc (N);\n+      Loc : constant Source_Ptr := Sloc (N);\n+\n+   begin\n+      if Debug_Flag_C then\n+         Write_Str (\"==> package body \");\n+         Write_Name (Chars (Defining_Entity (N)));\n+         Write_Str (\" from \");\n+         Write_Location (Loc);\n+         Write_Eol;\n+         Indent;\n+      end if;\n+\n+      --  The real work is split out into the helper, so it can do \"return;\"\n+      --  without skipping the debug output.\n+\n+      Analyze_Package_Body_Helper (N);\n+\n+      if Debug_Flag_C then\n+         Outdent;\n+         Write_Str (\"<== package body \");\n+         Write_Name (Chars (Defining_Entity (N)));\n+         Write_Str (\" from \");\n+         Write_Location (Loc);\n+         Write_Eol;\n+      end if;\n+   end Analyze_Package_Body;\n+\n+   ---------------------------------\n+   -- Analyze_Package_Body_Helper --\n+   ---------------------------------\n+\n+   procedure Analyze_Package_Body_Helper (N : Node_Id) is\n       HSS              : Node_Id;\n       Body_Id          : Entity_Id;\n       Spec_Id          : Entity_Id;\n@@ -172,7 +206,7 @@ package body Sem_Ch7 is\n          end loop;\n       end Install_Composite_Operations;\n \n-   --  Start of processing for Analyze_Package_Body\n+   --  Start of processing for Analyze_Package_Body_Helper\n \n    begin\n       --  Find corresponding package specification, and establish the current\n@@ -182,14 +216,6 @@ package body Sem_Ch7 is\n       --  the later is never used for name resolution. In this fashion there\n       --  is only one visible entity that denotes the package.\n \n-      if Debug_Flag_C then\n-         Write_Str (\"====  Compiling package body \");\n-         Write_Name (Chars (Defining_Entity (N)));\n-         Write_Str (\" from \");\n-         Write_Location (Loc);\n-         Write_Eol;\n-      end if;\n-\n       --  Set Body_Id. Note that this Will be reset to point to the generic\n       --  copy later on in the generic case.\n \n@@ -634,7 +660,7 @@ package body Sem_Ch7 is\n             Qualify_Entity_Names (N);\n          end if;\n       end if;\n-   end Analyze_Package_Body;\n+   end Analyze_Package_Body_Helper;\n \n    ---------------------------------\n    -- Analyze_Package_Declaration --\n@@ -664,6 +690,15 @@ package body Sem_Ch7 is\n          return;\n       end if;\n \n+      if Debug_Flag_C then\n+         Write_Str (\"==> package spec \");\n+         Write_Name (Chars (Id));\n+         Write_Str (\" from \");\n+         Write_Location (Sloc (N));\n+         Write_Eol;\n+         Indent;\n+      end if;\n+\n       Generate_Definition (Id);\n       Enter_Name (Id);\n       Set_Ekind (Id, E_Package);\n@@ -676,14 +711,6 @@ package body Sem_Ch7 is\n \n       Set_Categorization_From_Pragmas (N);\n \n-      if Debug_Flag_C then\n-         Write_Str (\"====  Compiling package spec \");\n-         Write_Name (Chars (Id));\n-         Write_Str (\" from \");\n-         Write_Location (Sloc (N));\n-         Write_Eol;\n-      end if;\n-\n       Analyze (Specification (N));\n       Validate_Categorization_Dependency (N, Id);\n \n@@ -725,6 +752,15 @@ package body Sem_Ch7 is\n       if Comp_Unit then\n          Validate_RT_RAT_Component (N);\n       end if;\n+\n+      if Debug_Flag_C then\n+         Outdent;\n+         Write_Str (\"<== package spec \");\n+         Write_Name (Chars (Id));\n+         Write_Str (\" from \");\n+         Write_Location (Sloc (N));\n+         Write_Eol;\n+      end if;\n    end Analyze_Package_Declaration;\n \n    -----------------------------------"}]}