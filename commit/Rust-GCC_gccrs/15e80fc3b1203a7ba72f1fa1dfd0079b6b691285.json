{"sha": "15e80fc3b1203a7ba72f1fa1dfd0079b6b691285", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTVlODBmYzNiMTIwM2E3YmE3MmYxZmExZGZkMDA3OWI2YjY5MTI4NQ==", "commit": {"author": {"name": "Jan Hubicka", "email": "jh@suse.cz", "date": "2010-06-09T23:41:06Z"}, "committer": {"name": "Jan Hubicka", "email": "hubicka@gcc.gnu.org", "date": "2010-06-09T23:41:06Z"}, "message": "ipa-pure-const.c (propagate_pure_const, [...]): Break out from ...\n\n\n\t* ipa-pure-const.c (propagate_pure_const, propagate_noreturn):\n\tBreak out from ...\n\t(propagate) ... here; swap the order.\n\nFrom-SVN: r160517", "tree": {"sha": "dc3b124226cba504d48163438893d6adc04350ab", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/dc3b124226cba504d48163438893d6adc04350ab"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/15e80fc3b1203a7ba72f1fa1dfd0079b6b691285", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/15e80fc3b1203a7ba72f1fa1dfd0079b6b691285", "html_url": "https://github.com/Rust-GCC/gccrs/commit/15e80fc3b1203a7ba72f1fa1dfd0079b6b691285", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/15e80fc3b1203a7ba72f1fa1dfd0079b6b691285/comments", "author": null, "committer": null, "parents": [{"sha": "377002a9c0aafcd2061b496e19778f826ad058a4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/377002a9c0aafcd2061b496e19778f826ad058a4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/377002a9c0aafcd2061b496e19778f826ad058a4"}], "stats": {"total": 66, "additions": 53, "deletions": 13}, "files": [{"sha": "0e9a91b6f1bfa435c1034d36a8efdeb18e35e82c", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/15e80fc3b1203a7ba72f1fa1dfd0079b6b691285/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/15e80fc3b1203a7ba72f1fa1dfd0079b6b691285/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=15e80fc3b1203a7ba72f1fa1dfd0079b6b691285", "patch": "@@ -1,3 +1,9 @@\n+2010-06-09  Jan Hubicka  <jh@suse.cz>\n+\n+\t* ipa-pure-const.c (propagate_pure_const, propagate_noreturn):\n+\tBreak out from ...\n+\t(propagate) ... here; swap the order.\n+\n 2010-06-09  Jan Hubicka  <jh@suse.cz>\n \n \t* bitmap.c (bitmap_elt_insert_after, bitmap_first_set_bit,"}, {"sha": "766c8fc6456be38db5249ce5b4365e22df49f5c2", "filename": "gcc/ipa-pure-const.c", "status": "modified", "additions": 47, "deletions": 13, "changes": 60, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/15e80fc3b1203a7ba72f1fa1dfd0079b6b691285/gcc%2Fipa-pure-const.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/15e80fc3b1203a7ba72f1fa1dfd0079b6b691285/gcc%2Fipa-pure-const.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-pure-const.c?ref=15e80fc3b1203a7ba72f1fa1dfd0079b6b691285", "patch": "@@ -1021,14 +1021,11 @@ self_recursive_p (struct cgraph_node *node)\n   return false;\n }\n \n+/* Produce transitive closure over the callgraph and compute pure/const\n+   attributes.  */\n \n-/* Produce the global information by preforming a transitive closure\n-   on the local information that was produced by generate_summary.\n-   Note that there is no function_transform pass since this only\n-   updates the function_decl.  */\n-\n-static unsigned int\n-propagate (void)\n+static void\n+propagate_pure_const (void)\n {\n   struct cgraph_node *node;\n   struct cgraph_node *w;\n@@ -1038,9 +1035,6 @@ propagate (void)\n   int i;\n   struct ipa_dfs_info * w_info;\n \n-  cgraph_remove_function_insertion_hook (function_insertion_hook_holder);\n-  cgraph_remove_node_duplication_hook (node_duplication_hook_holder);\n-  cgraph_remove_node_removal_hook (node_removal_hook_holder);\n   order_pos = ipa_utils_reduced_inorder (order, true, false, NULL);\n   if (dump_file)\n     {\n@@ -1301,12 +1295,31 @@ propagate (void)\n \t  node->aux = NULL;\n \t}\n     }\n+\n+  free (order);\n+}\n+\n+/* Produce transitive closure over the callgraph and compute nothrow\n+   attributes.  */\n+\n+static void\n+propagate_nothrow (void)\n+{\n+  struct cgraph_node *node;\n+  struct cgraph_node *w;\n+  struct cgraph_node **order =\n+    XCNEWVEC (struct cgraph_node *, cgraph_n_nodes);\n+  int order_pos;\n+  int i;\n+  struct ipa_dfs_info * w_info;\n+\n   order_pos = ipa_utils_reduced_inorder (order, true, false, ignore_edge);\n   if (dump_file)\n     {\n       dump_cgraph (dump_file);\n       ipa_utils_print_order(dump_file, \"reduced for nothrow\", order, order_pos);\n     }\n+\n   /* Propagate the local information thru the call graph to produce\n      the global information.  All the nodes within a cycle will have\n      the same info so we collapse cycles first.  Then we can do the\n@@ -1387,12 +1400,33 @@ propagate (void)\n \t  free (node->aux);\n \t  node->aux = NULL;\n \t}\n-      if (cgraph_function_body_availability (node) >= AVAIL_OVERWRITABLE\n-\t  && has_function_state (node))\n-\tfree (get_function_state (node));\n     }\n \n   free (order);\n+}\n+\n+\n+/* Produce the global information by preforming a transitive closure\n+   on the local information that was produced by generate_summary.  */\n+\n+static unsigned int\n+propagate (void)\n+{\n+  struct cgraph_node *node;\n+\n+  cgraph_remove_function_insertion_hook (function_insertion_hook_holder);\n+  cgraph_remove_node_duplication_hook (node_duplication_hook_holder);\n+  cgraph_remove_node_removal_hook (node_removal_hook_holder);\n+\n+  /* Nothrow makes more function to not lead to return and improve\n+     later analysis.  */\n+  propagate_nothrow ();\n+  propagate_pure_const ();\n+\n+  /* Cleanup. */\n+  for (node = cgraph_nodes; node; node = node->next)\n+    if (has_function_state (node))\n+      free (get_function_state (node));\n   VEC_free (funct_state, heap, funct_state_vec);\n   finish_state ();\n   return 0;"}]}