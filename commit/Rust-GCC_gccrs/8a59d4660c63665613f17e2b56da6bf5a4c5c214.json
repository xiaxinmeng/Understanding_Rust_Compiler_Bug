{"sha": "8a59d4660c63665613f17e2b56da6bf5a4c5c214", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGE1OWQ0NjYwYzYzNjY1NjEzZjE3ZTJiNTZkYTZiZjVhNGM1YzIxNA==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2017-04-20T09:18:02Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2017-04-20T09:18:02Z"}, "message": "re PR middle-end/80423 (GC related -fcompare-debug failure)\n\n\tPR middle-end/80423\n\t* tree.h (build_array_type): Add typeless_storage default argument.\n\t* tree.c (type_cache_hasher::equal): Also compare\n\tTYPE_TYPELESS_STORAGE flag for ARRAY_TYPEs.\n\t(build_array_type): Add typeless_storage argument, set\n\tTYPE_TYPELESS_STORAGE to it, if shared also hash it, and pass to\n\trecursive call.\n\t(build_nonshared_array_type): Adjust build_array_type_1 caller.\n\t(build_array_type): Likewise.  Add typeless_storage argument.\nc-family/\n\t* c-common.c (complete_array_type): Preserve TYPE_TYPELESS_STORAGE.\ncp/\n\t* tree.c (build_cplus_array_type): Call build_array_type\n\twith the intended TYPE_TYPELESS_STORAGE flag value, instead\n\tof calling build_array_type and modifying later TYPE_TYPELESS_STORAGE\n\ton the shared type.\ntestsuite/\n\t* g++.dg/other/pr80423.C: New test.\n\nFrom-SVN: r247014", "tree": {"sha": "1484e8a152e79fdd86427e4b01e206056ad5c9fa", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1484e8a152e79fdd86427e4b01e206056ad5c9fa"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8a59d4660c63665613f17e2b56da6bf5a4c5c214", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8a59d4660c63665613f17e2b56da6bf5a4c5c214", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8a59d4660c63665613f17e2b56da6bf5a4c5c214", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8a59d4660c63665613f17e2b56da6bf5a4c5c214/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "a4bb5c57c9211c7eda33259af525ce5675889842", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a4bb5c57c9211c7eda33259af525ce5675889842", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a4bb5c57c9211c7eda33259af525ce5675889842"}], "stats": {"total": 91, "additions": 70, "deletions": 21}, "files": [{"sha": "e650e01f5a7c36e55f13add81b0c31d52aef666d", "filename": "gcc/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8a59d4660c63665613f17e2b56da6bf5a4c5c214/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8a59d4660c63665613f17e2b56da6bf5a4c5c214/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=8a59d4660c63665613f17e2b56da6bf5a4c5c214", "patch": "@@ -1,3 +1,15 @@\n+2017-04-20  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR middle-end/80423\n+\t* tree.h (build_array_type): Add typeless_storage default argument.\n+\t* tree.c (type_cache_hasher::equal): Also compare\n+\tTYPE_TYPELESS_STORAGE flag for ARRAY_TYPEs.\n+\t(build_array_type): Add typeless_storage argument, set\n+\tTYPE_TYPELESS_STORAGE to it, if shared also hash it, and pass to\n+\trecursive call.\n+\t(build_nonshared_array_type): Adjust build_array_type_1 caller.\n+\t(build_array_type): Likewise.  Add typeless_storage argument.\n+\n 2017-04-19  Eric Botcazou  <ebotcazou@adacore.com>\n             Jakub Jelinek  <jakub@redhat.com>\n "}, {"sha": "ae98705736269103867d4d01121afa54497d2a60", "filename": "gcc/c-family/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8a59d4660c63665613f17e2b56da6bf5a4c5c214/gcc%2Fc-family%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8a59d4660c63665613f17e2b56da6bf5a4c5c214/gcc%2Fc-family%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2FChangeLog?ref=8a59d4660c63665613f17e2b56da6bf5a4c5c214", "patch": "@@ -1,3 +1,8 @@\n+2017-04-20  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR middle-end/80423\n+\t* c-common.c (complete_array_type): Preserve TYPE_TYPELESS_STORAGE.\n+\n 2017-04-18  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR middle-end/79788"}, {"sha": "782a44496084a1c7a6dfaf3ea9db92a328a1b506", "filename": "gcc/c-family/c-common.c", "status": "modified", "additions": 8, "deletions": 6, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8a59d4660c63665613f17e2b56da6bf5a4c5c214/gcc%2Fc-family%2Fc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8a59d4660c63665613f17e2b56da6bf5a4c5c214/gcc%2Fc-family%2Fc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-common.c?ref=8a59d4660c63665613f17e2b56da6bf5a4c5c214", "patch": "@@ -6386,7 +6386,6 @@ complete_array_type (tree *ptype, tree initial_value, bool do_default)\n {\n   tree maxindex, type, main_type, elt, unqual_elt;\n   int failure = 0, quals;\n-  hashval_t hashcode = 0;\n   bool overflow_p = false;\n \n   maxindex = size_zero_node;\n@@ -6480,13 +6479,15 @@ complete_array_type (tree *ptype, tree initial_value, bool do_default)\n   TYPE_DOMAIN (main_type)\n     = build_range_type (TREE_TYPE (maxindex),\n \t\t\tbuild_int_cst (TREE_TYPE (maxindex), 0), maxindex);\n+  TYPE_TYPELESS_STORAGE (main_type) = TYPE_TYPELESS_STORAGE (type);\n   layout_type (main_type);\n \n   /* Make sure we have the canonical MAIN_TYPE. */\n-  hashcode = iterative_hash_object (TYPE_HASH (unqual_elt), hashcode);\n-  hashcode = iterative_hash_object (TYPE_HASH (TYPE_DOMAIN (main_type)),\n-\t\t\t\t    hashcode);\n-  main_type = type_hash_canon (hashcode, main_type);\n+  inchash::hash hstate;\n+  hstate.add_object (TYPE_HASH (unqual_elt));\n+  hstate.add_object (TYPE_HASH (TYPE_DOMAIN (main_type)));\n+  hstate.add_flag (TYPE_TYPELESS_STORAGE (main_type));\n+  main_type = type_hash_canon (hstate.end (), main_type);\n \n   /* Fix the canonical type.  */\n   if (TYPE_STRUCTURAL_EQUALITY_P (TREE_TYPE (main_type))\n@@ -6497,7 +6498,8 @@ complete_array_type (tree *ptype, tree initial_value, bool do_default)\n \t       != TYPE_DOMAIN (main_type)))\n     TYPE_CANONICAL (main_type)\n       = build_array_type (TYPE_CANONICAL (TREE_TYPE (main_type)),\n-\t\t\t  TYPE_CANONICAL (TYPE_DOMAIN (main_type)));\n+\t\t\t  TYPE_CANONICAL (TYPE_DOMAIN (main_type)),\n+\t\t\t  TYPE_TYPELESS_STORAGE (main_type));\n   else\n     TYPE_CANONICAL (main_type) = main_type;\n "}, {"sha": "ec4bb86044acc6efed3a597091872906a2dd3152", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8a59d4660c63665613f17e2b56da6bf5a4c5c214/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8a59d4660c63665613f17e2b56da6bf5a4c5c214/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=8a59d4660c63665613f17e2b56da6bf5a4c5c214", "patch": "@@ -1,3 +1,11 @@\n+2017-04-20  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR middle-end/80423\n+\t* tree.c (build_cplus_array_type): Call build_array_type\n+\twith the intended TYPE_TYPELESS_STORAGE flag value, instead\n+\tof calling build_array_type and modifying later TYPE_TYPELESS_STORAGE\n+\ton the shared type.\n+\n 2017-04-18  Marek Polacek  <polacek@redhat.com>\n \n \tPR c++/80244 - ICE with attribute in template alias."}, {"sha": "15b3ad93b2cde842f0dc9e2f08ac259aa615ff4f", "filename": "gcc/cp/tree.c", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8a59d4660c63665613f17e2b56da6bf5a4c5c214/gcc%2Fcp%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8a59d4660c63665613f17e2b56da6bf5a4c5c214/gcc%2Fcp%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftree.c?ref=8a59d4660c63665613f17e2b56da6bf5a4c5c214", "patch": "@@ -949,14 +949,14 @@ build_cplus_array_type (tree elt_type, tree index_type)\n     }\n   else\n     {\n-      t = build_array_type (elt_type, index_type);\n-      if (elt_type == unsigned_char_type_node\n-\t  || elt_type == signed_char_type_node\n-\t  || elt_type == char_type_node\n-\t  || (TREE_CODE (elt_type) == ENUMERAL_TYPE\n-\t      && TYPE_CONTEXT (elt_type) == std_node\n-\t      && !strcmp (\"byte\", TYPE_NAME_STRING (elt_type))))\n-\tTYPE_TYPELESS_STORAGE (t) = 1;\n+      bool typeless_storage\n+\t= (elt_type == unsigned_char_type_node\n+\t   || elt_type == signed_char_type_node\n+\t   || elt_type == char_type_node\n+\t   || (TREE_CODE (elt_type) == ENUMERAL_TYPE\n+\t       && TYPE_CONTEXT (elt_type) == std_node\n+\t       && !strcmp (\"byte\", TYPE_NAME_STRING (elt_type))));\n+      t = build_array_type (elt_type, index_type, typeless_storage);\n     }\n \n   /* Now check whether we already have this array variant.  */"}, {"sha": "2299ad1f5df4675061ecec7853c54c97a5e7d61d", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8a59d4660c63665613f17e2b56da6bf5a4c5c214/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8a59d4660c63665613f17e2b56da6bf5a4c5c214/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=8a59d4660c63665613f17e2b56da6bf5a4c5c214", "patch": "@@ -1,3 +1,8 @@\n+2017-04-20  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR middle-end/80423\n+\t* g++.dg/other/pr80423.C: New test.\n+\n 2017-04-19  Senthil Kumar Selvaraj  <senthil_kumar.selvaraj@atmel.com>\n \n \t* gcc.dg/pr80170.c: Require ptr32plus."}, {"sha": "a855114fa6db344e3a68e1ec980fd1b803f0a6a2", "filename": "gcc/testsuite/g++.dg/other/pr80423.C", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8a59d4660c63665613f17e2b56da6bf5a4c5c214/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Fpr80423.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8a59d4660c63665613f17e2b56da6bf5a4c5c214/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Fpr80423.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Fpr80423.C?ref=8a59d4660c63665613f17e2b56da6bf5a4c5c214", "patch": "@@ -0,0 +1,11 @@\n+// PR middle-end/80423\n+// { dg-do compile { target c++11 } }\n+\n+typedef unsigned char uint8_t;                                                                                                                     \n+struct A {                                                                                                                                         \n+  template <int N> A(unsigned char (&)[N]);                                                                                                        \n+};                                                                                                                                                 \n+void fn1(A) {                                                                                                                                      \n+  uint8_t a[]{0};                                                                                                                                  \n+  fn1(a);                                                                                                                                          \n+}                                                                                                                                                  "}, {"sha": "72dbba4daadb425ded706330d8147e4941a65e80", "filename": "gcc/tree.c", "status": "modified", "additions": 12, "deletions": 6, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8a59d4660c63665613f17e2b56da6bf5a4c5c214/gcc%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8a59d4660c63665613f17e2b56da6bf5a4c5c214/gcc%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.c?ref=8a59d4660c63665613f17e2b56da6bf5a4c5c214", "patch": "@@ -7073,7 +7073,9 @@ type_cache_hasher::equal (type_hash *a, type_hash *b)\n         break;\n       return 0;\n     case ARRAY_TYPE:\n-      return TYPE_DOMAIN (a->type) == TYPE_DOMAIN (b->type);\n+      return (TYPE_TYPELESS_STORAGE (a->type)\n+\t      == TYPE_TYPELESS_STORAGE (b->type)\n+\t      && TYPE_DOMAIN (a->type) == TYPE_DOMAIN (b->type));\n \n     case RECORD_TYPE:\n     case UNION_TYPE:\n@@ -8350,10 +8352,12 @@ subrange_type_for_debug_p (const_tree type, tree *lowval, tree *highval)\n \n /* Construct, lay out and return the type of arrays of elements with ELT_TYPE\n    and number of elements specified by the range of values of INDEX_TYPE.\n+   If TYPELESS_STORAGE is true, TYPE_TYPELESS_STORAGE flag is set on the type.\n    If SHARED is true, reuse such a type that has already been constructed.  */\n \n static tree\n-build_array_type_1 (tree elt_type, tree index_type, bool shared)\n+build_array_type_1 (tree elt_type, tree index_type, bool typeless_storage,\n+\t\t    bool shared)\n {\n   tree t;\n \n@@ -8367,6 +8371,7 @@ build_array_type_1 (tree elt_type, tree index_type, bool shared)\n   TREE_TYPE (t) = elt_type;\n   TYPE_DOMAIN (t) = index_type;\n   TYPE_ADDR_SPACE (t) = TYPE_ADDR_SPACE (elt_type);\n+  TYPE_TYPELESS_STORAGE (t) = typeless_storage;\n   layout_type (t);\n \n   /* If the element type is incomplete at this point we get marked for\n@@ -8381,6 +8386,7 @@ build_array_type_1 (tree elt_type, tree index_type, bool shared)\n       hstate.add_object (TYPE_HASH (elt_type));\n       if (index_type)\n \thstate.add_object (TYPE_HASH (index_type));\n+      hstate.add_flag (typeless_storage);\n       t = type_hash_canon (hstate.end (), t);\n     }\n \n@@ -8396,7 +8402,7 @@ build_array_type_1 (tree elt_type, tree index_type, bool shared)\n \t  = build_array_type_1 (TYPE_CANONICAL (elt_type),\n \t\t\t\tindex_type\n \t\t\t\t? TYPE_CANONICAL (index_type) : NULL_TREE,\n-\t\t\t\tshared);\n+\t\t\t\ttypeless_storage, shared);\n     }\n \n   return t;\n@@ -8405,17 +8411,17 @@ build_array_type_1 (tree elt_type, tree index_type, bool shared)\n /* Wrapper around build_array_type_1 with SHARED set to true.  */\n \n tree\n-build_array_type (tree elt_type, tree index_type)\n+build_array_type (tree elt_type, tree index_type, bool typeless_storage)\n {\n-  return build_array_type_1 (elt_type, index_type, true);\n+  return build_array_type_1 (elt_type, index_type, typeless_storage, true);\n }\n \n /* Wrapper around build_array_type_1 with SHARED set to false.  */\n \n tree\n build_nonshared_array_type (tree elt_type, tree index_type)\n {\n-  return build_array_type_1 (elt_type, index_type, false);\n+  return build_array_type_1 (elt_type, index_type, false, false);\n }\n \n /* Return a representation of ELT_TYPE[NELTS], using indices of type"}, {"sha": "b136f5cce6b4fd8d9cedeee5ff4057d8d0c53090", "filename": "gcc/tree.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8a59d4660c63665613f17e2b56da6bf5a4c5c214/gcc%2Ftree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8a59d4660c63665613f17e2b56da6bf5a4c5c214/gcc%2Ftree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.h?ref=8a59d4660c63665613f17e2b56da6bf5a4c5c214", "patch": "@@ -4068,7 +4068,7 @@ extern tree build_truth_vector_type (unsigned, unsigned);\n extern tree build_same_sized_truth_vector_type (tree vectype);\n extern tree build_opaque_vector_type (tree innertype, int nunits);\n extern tree build_index_type (tree);\n-extern tree build_array_type (tree, tree);\n+extern tree build_array_type (tree, tree, bool = false);\n extern tree build_nonshared_array_type (tree, tree);\n extern tree build_array_type_nelts (tree, unsigned HOST_WIDE_INT);\n extern tree build_function_type (tree, tree);"}]}