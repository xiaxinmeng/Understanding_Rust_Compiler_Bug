{"sha": "d6b0b376ea57964c73786fa1730b15cafeb7ea07", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDZiMGIzNzZlYTU3OTY0YzczNzg2ZmExNzMwYjE1Y2FmZWI3ZWEwNw==", "commit": {"author": {"name": "Eric Christopher", "email": "echristo@gcc.gnu.org", "date": "2007-06-06T18:39:25Z"}, "committer": {"name": "Eric Christopher", "email": "echristo@gcc.gnu.org", "date": "2007-06-06T18:39:25Z"}, "message": "i386.c (override_options): Move handling of TARGET_SUBTARGET* earlier.\n\n2007-06-06  Eric Christopher  <echristo@apple.com>\n\n        * config/i386/i386.c (override_options): Move handling\n        of TARGET_SUBTARGET* earlier.\n\nFrom-SVN: r125497", "tree": {"sha": "099e0e3e9febcb39755dfe14557dbe9b97407f60", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/099e0e3e9febcb39755dfe14557dbe9b97407f60"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d6b0b376ea57964c73786fa1730b15cafeb7ea07", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d6b0b376ea57964c73786fa1730b15cafeb7ea07", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d6b0b376ea57964c73786fa1730b15cafeb7ea07", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d6b0b376ea57964c73786fa1730b15cafeb7ea07/comments", "author": null, "committer": null, "parents": [{"sha": "1fd994f19119dfca57de3af7d2c6a3bc431e56e4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1fd994f19119dfca57de3af7d2c6a3bc431e56e4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1fd994f19119dfca57de3af7d2c6a3bc431e56e4"}], "stats": {"total": 67, "additions": 36, "deletions": 31}, "files": [{"sha": "c493244282463226b5f095ae8e8dffda19794fb7", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 4, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6b0b376ea57964c73786fa1730b15cafeb7ea07/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6b0b376ea57964c73786fa1730b15cafeb7ea07/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=d6b0b376ea57964c73786fa1730b15cafeb7ea07", "patch": "@@ -1,3 +1,8 @@\n+2007-06-06  Eric Christopher  <echristo@apple.com>\n+\n+\t* config/i386/i386.c (override_options): Move handling\n+\tof TARGET_SUBTARGET* earlier.\n+\n 2007-06-06  Paolo Bonzini  <bonzini@gnu.org>\n \n \t* genmodes.c (tagged_printf, emit_insn_modes_h): Don't\n@@ -14,7 +19,7 @@\n \tnon-removed insns.\n \t(rtl_delete_block, rtl_merge_blocks): Pass true to delete_insn_chain.\n \t(delete_insn_chain_and_edges, try_redirect_by_replacing_jump,\n-\trtl_tidy_fallthru_edge, cfg_layout_merge_blocks): Pass false \n+\trtl_tidy_fallthru_edge, cfg_layout_merge_blocks): Pass false\n \tto delete_insn_chain.\n \t(rtl_verify_flow_info_1): Verify that the insns in header and footer\n \tdo not have bb field set.\n@@ -127,7 +132,7 @@\n \t    Sebastian Pop  <sebpop@gmail.com>\n \n \t* lambda.h (build_linear_expr): New.\n-\t* lambda-code.c (lbv_to_gcc_expression, lle_to_gcc_expression): \n+\t* lambda-code.c (lbv_to_gcc_expression, lle_to_gcc_expression):\n \tUse build_linear_expr, call fold and force_gimple_operand.\n \t(lambda_loopnest_to_gcc_loopnest): Check that there is\n \tsomething to insert.\n@@ -138,7 +143,7 @@\n \tPR preprocessor/23479\n \t* doc/extend.texi: Document the 0b-prefixed binary integer\n \tconstant extension.\n-\t\n+\n 2007-06-05  Uros Bizjak  <ubizjak@gmail.com>\n \n \tPR tree-optimization/32215\n@@ -437,7 +442,7 @@\n \n \t* config/mips/mips.c (mips_output_mi_thunk): Only load gp if not\n \tLOADGP_ABSOLUTE and not binds_local_p.\n-\t\n+\n 2007-06-01  Geoffrey Keating  <geoffk@apple.com>\n \n \t* config/darwin.h (LINK_SPEC): Pass -fpie through to the linker."}, {"sha": "c23b5b796e8c4224c89b268f9153466baf90d3f8", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 27, "deletions": 27, "changes": 54, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6b0b376ea57964c73786fa1730b15cafeb7ea07/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6b0b376ea57964c73786fa1730b15cafeb7ea07/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=d6b0b376ea57964c73786fa1730b15cafeb7ea07", "patch": "@@ -2219,6 +2219,33 @@ override_options (void)\n \terror (\"pc%d is not valid precision setting (32, 64 or 80)\", i);\n     }\n \n+  if (TARGET_64BIT)\n+    {\n+      target_flags |= TARGET_SUBTARGET64_DEFAULT & ~target_flags_explicit;\n+\n+      /* Enable by default the SSE and MMX builtins.  Do allow the user to\n+\t explicitly disable any of these.  In particular, disabling SSE and\n+\t MMX for kernel code is extremely useful.  */\n+      ix86_isa_flags\n+\t|= ((OPTION_MASK_ISA_SSE2 | OPTION_MASK_ISA_SSE | OPTION_MASK_ISA_MMX\n+\t     | TARGET_SUBTARGET64_ISA_DEFAULT) & ~ix86_isa_flags_explicit);\n+\n+      if (TARGET_RTD)\n+\twarning (0, \"-mrtd is ignored in 64bit mode\");\n+    }\n+  else\n+    {\n+      target_flags |= TARGET_SUBTARGET32_DEFAULT & ~target_flags_explicit;\n+\n+      ix86_isa_flags\n+\t|= TARGET_SUBTARGET32_ISA_DEFAULT & ~ix86_isa_flags_explicit;\n+\n+      /* i386 ABI does not specify red zone.  It still makes sense to use it\n+         when programmer takes care to stack from being destroyed.  */\n+      if (!(target_flags_explicit & MASK_NO_RED_ZONE))\n+        target_flags |= MASK_NO_RED_ZONE;\n+    }\n+\n   /* Keep nonleaf frame pointers.  */\n   if (flag_omit_frame_pointer)\n     target_flags &= ~MASK_OMIT_LEAF_FRAME_POINTER;\n@@ -2282,33 +2309,6 @@ override_options (void)\n   if (TARGET_ABM)\n     x86_popcnt = true;\n \n-  if (TARGET_64BIT)\n-    {\n-      target_flags |= TARGET_SUBTARGET64_DEFAULT & ~target_flags_explicit;\n-\n-      /* Enable by default the SSE and MMX builtins.  Do allow the user to\n-\t explicitly disable any of these.  In particular, disabling SSE and\n-\t MMX for kernel code is extremely useful.  */\n-      ix86_isa_flags\n-\t|= ((OPTION_MASK_ISA_SSE2 | OPTION_MASK_ISA_SSE | OPTION_MASK_ISA_MMX\n-\t     | TARGET_SUBTARGET64_ISA_DEFAULT) & ~ix86_isa_flags_explicit);\n-\n-      if (TARGET_RTD)\n-\twarning (0, \"-mrtd is ignored in 64bit mode\");\n-    }\n-  else\n-    {\n-      target_flags |= TARGET_SUBTARGET32_DEFAULT & ~target_flags_explicit;\n-\n-      ix86_isa_flags\n-\t|= TARGET_SUBTARGET32_ISA_DEFAULT & ~ix86_isa_flags_explicit;\n-\n-      /* i386 ABI does not specify red zone.  It still makes sense to use it\n-         when programmer takes care to stack from being destroyed.  */\n-      if (!(target_flags_explicit & MASK_NO_RED_ZONE))\n-        target_flags |= MASK_NO_RED_ZONE;\n-    }\n-\n   /* Validate -mpreferred-stack-boundary= value, or provide default.\n      The default of 128 bits is for Pentium III's SSE __m128.  We can't\n      change it because of optimize_size.  Otherwise, we can't mix object"}]}