{"sha": "9c01326d9a6d56c381ef139a2c25953f483feec8", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWMwMTMyNmQ5YTZkNTZjMzgxZWYxMzlhMmMyNTk1M2Y0ODNmZWVjOA==", "commit": {"author": {"name": "Richard Guenther", "email": "rguenther@suse.de", "date": "2009-01-04T19:51:18Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2009-01-04T19:51:18Z"}, "message": "re PR libstdc++/38720 (_Relative_pointer_impl invokes undefined behavior)\n\n2009-01-04  Richard Guenther  <rguenther@suse.de>\n\n\tPR libstdc++/38720\n\t* include/ext/pointer.h (_Relative_pointer_impl): Use an unsigned\n\tinteger type for storage, arithmetic and comparisons.\n\t* testsuite/ext/ext_pointer/1_neg.cc: Adjust line numbers.\n\nFrom-SVN: r143058", "tree": {"sha": "cf9015c7924ee0018c79317504d5e9640ab6595d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/cf9015c7924ee0018c79317504d5e9640ab6595d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9c01326d9a6d56c381ef139a2c25953f483feec8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9c01326d9a6d56c381ef139a2c25953f483feec8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9c01326d9a6d56c381ef139a2c25953f483feec8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9c01326d9a6d56c381ef139a2c25953f483feec8/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "70e72065c34129a5b5d3381b111f22f18c5c3aa3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/70e72065c34129a5b5d3381b111f22f18c5c3aa3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/70e72065c34129a5b5d3381b111f22f18c5c3aa3"}], "stats": {"total": 63, "additions": 40, "deletions": 23}, "files": [{"sha": "94f3bd7dfac5c5b2441fce2ef3ae8536206e0ccb", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c01326d9a6d56c381ef139a2c25953f483feec8/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c01326d9a6d56c381ef139a2c25953f483feec8/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=9c01326d9a6d56c381ef139a2c25953f483feec8", "patch": "@@ -1,3 +1,10 @@\n+2009-01-04  Richard Guenther  <rguenther@suse.de>\n+\n+\tPR libstdc++/38720\n+\t* include/ext/pointer.h (_Relative_pointer_impl): Use an unsigned\n+\tinteger type for storage, arithmetic and comparisons.\n+\t* testsuite/ext/ext_pointer/1_neg.cc: Adjust line numbers.\n+\n 2009-01-04  Paolo Carlini  <paolo.carlini@oracle.com>\n \n \tPR libstdc++/38719"}, {"sha": "ff409b6557ee05fa4dbda4f10c9390da110feb39", "filename": "libstdc++-v3/include/ext/pointer.h", "status": "modified", "additions": 25, "deletions": 15, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c01326d9a6d56c381ef139a2c25953f483feec8/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpointer.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c01326d9a6d56c381ef139a2c25953f483feec8/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpointer.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpointer.h?ref=9c01326d9a6d56c381ef139a2c25953f483feec8", "patch": "@@ -42,6 +42,7 @@\n #include <iosfwd>\n #include <bits/stl_iterator_base_types.h>\n #include <ext/cast.h>\n+#include <ext/type_traits.h>\n \n _GLIBCXX_BEGIN_NAMESPACE(__gnu_cxx)\n \n@@ -111,9 +112,8 @@ _GLIBCXX_BEGIN_NAMESPACE(__gnu_cxx)\n         if (_M_diff == 1)\n           return 0;\n         else\n-          return reinterpret_cast<_Tp*>(\n-                 const_cast<char*>(reinterpret_cast<const char*>(this))\n-                 + _M_diff);\n+          return reinterpret_cast<_Tp*>(reinterpret_cast<_UIntPtrType>(this)\n+\t\t\t\t\t+ _M_diff);\n       }\n   \n       void \n@@ -122,21 +122,26 @@ _GLIBCXX_BEGIN_NAMESPACE(__gnu_cxx)\n         if (!__arg)\n           _M_diff = 1;\n         else\n-          _M_diff = reinterpret_cast<char*>(__arg) \n-                    - reinterpret_cast<char*>(this);\n+          _M_diff = reinterpret_cast<_UIntPtrType>(__arg) \n+                    - reinterpret_cast<_UIntPtrType>(this);\n       }\n   \n       // Comparison of pointers\n       inline bool\n       operator<(const _Relative_pointer_impl& __rarg) const\n-      { return (this->get() < __rarg.get()); }\n+      { return (reinterpret_cast<_UIntPtrType>(this->get())\n+\t\t< reinterpret_cast<_UIntPtrType>(__rarg.get())); }\n \n       inline bool\n       operator==(const _Relative_pointer_impl& __rarg) const\n-      { return (this->get() == __rarg.get()); }\n+      { return (reinterpret_cast<_UIntPtrType>(this->get())\n+\t\t== reinterpret_cast<_UIntPtrType>(__rarg.get())); }\n \n     private:\n-      std::ptrdiff_t _M_diff;\n+      typedef __gnu_cxx::__conditional_type<\n+\t (sizeof(unsigned long) >= sizeof(void*)),\n+\t unsigned long, unsigned long long>::__type _UIntPtrType;\n+      _UIntPtrType _M_diff;\n     };\n   \n   /**\n@@ -155,8 +160,8 @@ _GLIBCXX_BEGIN_NAMESPACE(__gnu_cxx)\n         if (_M_diff == 1)\n           return 0;\n         else\n-          return reinterpret_cast<const _Tp*>(\n-                  (reinterpret_cast<const char*>(this)) + _M_diff);\n+          return reinterpret_cast<const _Tp*>\n+\t      (reinterpret_cast<_UIntPtrType>(this) + _M_diff);\n       }\n   \n       void \n@@ -165,21 +170,26 @@ _GLIBCXX_BEGIN_NAMESPACE(__gnu_cxx)\n         if (!__arg)\n           _M_diff = 1;\n         else\n-          _M_diff = reinterpret_cast<const char*>(__arg) \n-                    - reinterpret_cast<const char*>(this);\n+          _M_diff = reinterpret_cast<_UIntPtrType>(__arg) \n+                    - reinterpret_cast<_UIntPtrType>(this);\n       }\n   \n       // Comparison of pointers\n       inline bool\n       operator<(const _Relative_pointer_impl& __rarg) const\n-      { return (this->get() < __rarg.get()); }\n+      { return (reinterpret_cast<_UIntPtrType>(this->get())\n+\t\t< reinterpret_cast<_UIntPtrType>(__rarg.get())); }\n \n       inline bool\n       operator==(const _Relative_pointer_impl& __rarg) const\n-      { return (this->get() == __rarg.get()); }\n+      { return (reinterpret_cast<_UIntPtrType>(this->get())\n+\t\t== reinterpret_cast<_UIntPtrType>(__rarg.get())); }\n   \n     private:\n-      std::ptrdiff_t _M_diff;\n+      typedef __gnu_cxx::__conditional_type\n+\t<(sizeof(unsigned long) >= sizeof(void*)),\n+\t unsigned long, unsigned long long>::__type _UIntPtrType;\n+      _UIntPtrType _M_diff;\n     };\n \n   /**"}, {"sha": "f9f7454ce8c345f7e758c4c53e580659d7b4473c", "filename": "libstdc++-v3/testsuite/ext/ext_pointer/1_neg.cc", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c01326d9a6d56c381ef139a2c25953f483feec8/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fext_pointer%2F1_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c01326d9a6d56c381ef139a2c25953f483feec8/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fext_pointer%2F1_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fext_pointer%2F1_neg.cc?ref=9c01326d9a6d56c381ef139a2c25953f483feec8", "patch": "@@ -100,13 +100,13 @@ void test01(void) {\n   aptr5 = __const_pointer_cast<B_pointer>(cbptr);  // ok\n }\n \n-// { dg-error \"invalid conversion \" \"\" { target *-*-* } 289 }\n-// { dg-error \"initializing argument 1 of\" \"\" { target *-*-* } 289 }\n-// { dg-error \"invalid conversion \" \"\" { target *-*-* } 295 }\n-// { dg-error \"initializing argument 1 of\" \"\" { target *-*-* } 295 }\n-// { dg-error \"invalid conversion \" \"\" { target *-*-* } 312 }\n-// { dg-error \"initializing argument 1 of\" \"\" { target *-*-* } 312 }\n-// { dg-error \"invalid conversion \" \"\" { target *-*-* } 320 }\n-// { dg-error \"initializing argument 1 of\" \"\" { target *-*-* } 320 }\n+// { dg-error \"invalid conversion \" \"\" { target *-*-* } 299 }\n+// { dg-error \"initializing argument 1 of\" \"\" { target *-*-* } 299 }\n+// { dg-error \"invalid conversion \" \"\" { target *-*-* } 305 }\n+// { dg-error \"initializing argument 1 of\" \"\" { target *-*-* } 305 }\n+// { dg-error \"invalid conversion \" \"\" { target *-*-* } 322 }\n+// { dg-error \"initializing argument 1 of\" \"\" { target *-*-* } 322 }\n+// { dg-error \"invalid conversion \" \"\" { target *-*-* } 330 }\n+// { dg-error \"initializing argument 1 of\" \"\" { target *-*-* } 330 }\n // { dg-excess-errors \"In constructor\" }\n "}]}