{"sha": "f813b3309837f8fea19a0924f22a3f20a3ac8304", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjgxM2IzMzA5ODM3ZjhmZWExOWEwOTI0ZjIyYTNmMjBhM2FjODMwNA==", "commit": {"author": {"name": "Philip Herron", "email": "philip.herron@embecosm.com", "date": "2021-07-15T15:29:32Z"}, "committer": {"name": "Philip Herron", "email": "philip.herron@embecosm.com", "date": "2021-07-16T12:07:17Z"}, "message": "Track the parent impl a probe candidate comes from.\n\nThis change keeps an enum for the candidate type and the parent impl block\nthis probed candidate originates from.", "tree": {"sha": "1a5a01fb005e7baa73b6d4f6e3c0685ec5edab45", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1a5a01fb005e7baa73b6d4f6e3c0685ec5edab45"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f813b3309837f8fea19a0924f22a3f20a3ac8304", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f813b3309837f8fea19a0924f22a3f20a3ac8304", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f813b3309837f8fea19a0924f22a3f20a3ac8304", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f813b3309837f8fea19a0924f22a3f20a3ac8304/comments", "author": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "committer": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d57f3b8af1498c7bb4b1eaea372270119e9845fd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d57f3b8af1498c7bb4b1eaea372270119e9845fd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d57f3b8af1498c7bb4b1eaea372270119e9845fd"}], "stats": {"total": 27, "additions": 23, "deletions": 4}, "files": [{"sha": "1b7aa4dcf80f362f0bf5f818616c38f5f8f3897a", "filename": "gcc/rust/typecheck/rust-hir-path-probe.h", "status": "modified", "additions": 23, "deletions": 4, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f813b3309837f8fea19a0924f22a3f20a3ac8304/gcc%2Frust%2Ftypecheck%2Frust-hir-path-probe.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f813b3309837f8fea19a0924f22a3f20a3ac8304/gcc%2Frust%2Ftypecheck%2Frust-hir-path-probe.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-hir-path-probe.h?ref=f813b3309837f8fea19a0924f22a3f20a3ac8304", "patch": "@@ -29,8 +29,17 @@ namespace Resolver {\n \n struct PathProbeCandidate\n {\n+  enum CandidateType\n+  {\n+    IMPL_CONST,\n+    IMPL_TYPE_ALIAS,\n+    IMPL_FUNC,\n+  };\n+\n+  CandidateType type;\n   HIR::ImplItem *impl_item;\n   TyTy::BaseType *ty;\n+  HIR::ImplBlock *parent;\n };\n \n class PathProbeType : public TypeCheckBase\n@@ -48,11 +57,13 @@ class PathProbeType : public TypeCheckBase\n \tprobe.process_candidate (id, item, impl);\n \treturn true;\n       });\n+\n     return probe.candidates;\n   }\n \n   void process_candidate (HirId id, HIR::ImplItem *item, HIR::ImplBlock *impl)\n   {\n+    current_impl = impl;\n     HirId impl_ty_id = impl->get_type ()->get_mappings ().get_hirid ();\n     TyTy::BaseType *impl_block_ty = nullptr;\n     bool ok = context->lookup_type (impl_ty_id, &impl_block_ty);\n@@ -75,7 +86,9 @@ class PathProbeType : public TypeCheckBase\n \tbool ok = context->lookup_type (tyid, &ty);\n \trust_assert (ok);\n \n-\tPathProbeCandidate candidate{&alias, ty};\n+\tPathProbeCandidate candidate{\n+\t  PathProbeCandidate::CandidateType::IMPL_TYPE_ALIAS, &alias, ty,\n+\t  current_impl};\n \tcandidates.push_back (std::move (candidate));\n       }\n   }\n@@ -90,7 +103,9 @@ class PathProbeType : public TypeCheckBase\n \tbool ok = context->lookup_type (tyid, &ty);\n \trust_assert (ok);\n \n-\tPathProbeCandidate candidate{&constant, ty};\n+\tPathProbeCandidate candidate{\n+\t  PathProbeCandidate::CandidateType::IMPL_CONST, &constant, ty,\n+\t  current_impl};\n \tcandidates.push_back (std::move (candidate));\n       }\n   }\n@@ -105,19 +120,23 @@ class PathProbeType : public TypeCheckBase\n \tbool ok = context->lookup_type (tyid, &ty);\n \trust_assert (ok);\n \n-\tPathProbeCandidate candidate{&function, ty};\n+\tPathProbeCandidate candidate{\n+\t  PathProbeCandidate::CandidateType::IMPL_FUNC, &function, ty,\n+\t  current_impl};\n \tcandidates.push_back (std::move (candidate));\n       }\n   }\n \n private:\n   PathProbeType (TyTy::BaseType *receiver, const HIR::PathIdentSegment &query)\n-    : TypeCheckBase (), receiver (receiver), search (query)\n+    : TypeCheckBase (), receiver (receiver), search (query),\n+      current_impl (nullptr)\n   {}\n \n   TyTy::BaseType *receiver;\n   const HIR::PathIdentSegment &search;\n   std::vector<PathProbeCandidate> candidates;\n+  HIR::ImplBlock *current_impl;\n };\n \n class ReportMultipleCandidateError : private TypeCheckBase"}]}