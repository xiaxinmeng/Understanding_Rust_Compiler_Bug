{"sha": "78187f5ad268f94b8be20660040fd08d31aeb2d2", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzgxODdmNWFkMjY4Zjk0YjhiZTIwNjYwMDQwZmQwOGQzMWFlYjJkMg==", "commit": {"author": {"name": "Jan Hubicka", "email": "jh@suse.cz", "date": "2007-07-24T14:56:37Z"}, "committer": {"name": "Jan Hubicka", "email": "hubicka@gcc.gnu.org", "date": "2007-07-24T14:56:37Z"}, "message": "caller-save.c: Include ggc.h, gt-caller-save.h\n\n\n\t* caller-save.c: Include ggc.h, gt-caller-save.h\n\t(reg_save_code, reg_restore_code): Rename to ...\n\t(cached_reg_save_code, cached_reg_restore_code): ... those.\n\t(savepat, restpat, test_reg, test_mem, saveinsn, restinsn): New.\n\t(reg_save_code, reg_restore_code): New functions.\n\t(init_caller_save): Do not intialize\n\treg_save_code/reg_restore_code tables.\n\t* Makeifle.in: (gt-caller-save.h): New.\n\nFrom-SVN: r126879", "tree": {"sha": "7f800e046ef60eecf4019599b24e99dccac9999a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7f800e046ef60eecf4019599b24e99dccac9999a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/78187f5ad268f94b8be20660040fd08d31aeb2d2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/78187f5ad268f94b8be20660040fd08d31aeb2d2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/78187f5ad268f94b8be20660040fd08d31aeb2d2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/78187f5ad268f94b8be20660040fd08d31aeb2d2/comments", "author": null, "committer": null, "parents": [{"sha": "bdcfceb443f6ad18e5a04b3c9c7f35074d0c810e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bdcfceb443f6ad18e5a04b3c9c7f35074d0c810e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bdcfceb443f6ad18e5a04b3c9c7f35074d0c810e"}], "stats": {"total": 142, "additions": 87, "deletions": 55}, "files": [{"sha": "eabfcb69639755a88f197827e47575ed40bd1fdb", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/78187f5ad268f94b8be20660040fd08d31aeb2d2/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/78187f5ad268f94b8be20660040fd08d31aeb2d2/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=78187f5ad268f94b8be20660040fd08d31aeb2d2", "patch": "@@ -1,3 +1,14 @@\n+2007-07-24  Jan Hubicka  <jh@suse.cz>\n+\n+\t* caller-save.c: Include ggc.h, gt-caller-save.h\n+\t(reg_save_code, reg_restore_code): Rename to ...\n+\t(cached_reg_save_code, cached_reg_restore_code): ... those.\n+\t(savepat, restpat, test_reg, test_mem, saveinsn, restinsn): New.\n+\t(reg_save_code, reg_restore_code): New functions.\n+\t(init_caller_save): Do not intialize\n+\treg_save_code/reg_restore_code tables.\n+\t* Makeifle.in: (gt-caller-save.h): New.\n+\n 2007-07-24  Andreas Krebbel  <krebbel1@de.ibm.com>\n \n \t* tree-ssa-ifcombine.c (ifcombine_ifandif): Use a ONE operand"}, {"sha": "62066a6c5711772bed34e056f6c1dc9eea79e94a", "filename": "gcc/Makefile.in", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/78187f5ad268f94b8be20660040fd08d31aeb2d2/gcc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/78187f5ad268f94b8be20660040fd08d31aeb2d2/gcc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FMakefile.in?ref=78187f5ad268f94b8be20660040fd08d31aeb2d2", "patch": "@@ -2700,10 +2700,12 @@ postreload-gcse.o : postreload-gcse.c $(CONFIG_H) $(SYSTEM_H) coretypes.h \\\n    $(PARAMS_H) $(TIMEVAR_H) tree-pass.h $(REAL_H) $(DBGCNT_H)\n caller-save.o : caller-save.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(RTL_H) \\\n    $(FLAGS_H) $(REGS_H) hard-reg-set.h insn-config.h $(BASIC_BLOCK_H) $(FUNCTION_H) \\\n-   addresses.h $(RECOG_H) reload.h $(EXPR_H) toplev.h $(TM_P_H) $(DF_H)\n+   addresses.h $(RECOG_H) reload.h $(EXPR_H) toplev.h $(TM_P_H) $(DF_H) \\\n+   gt-caller-save.h\n bt-load.o : bt-load.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) except.h \\\n    $(RTL_H) hard-reg-set.h $(REGS_H) $(TM_P_H) $(FIBHEAP_H) output.h $(EXPR_H) \\\n-   $(TARGET_H) $(FLAGS_H) $(INSN_ATTR_H) $(FUNCTION_H) tree-pass.h toplev.h $(DF_H)\n+   $(TARGET_H) $(FLAGS_H) $(INSN_ATTR_H) $(FUNCTION_H) tree-pass.h toplev.h \\\n+   $(DF_H) $(GGC_H)\n reorg.o : reorg.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(RTL_H) \\\n    conditions.h hard-reg-set.h $(BASIC_BLOCK_H) $(REGS_H) insn-config.h \\\n    $(INSN_ATTR_H) except.h $(RECOG_H) $(FUNCTION_H) $(FLAGS_H) output.h \\\n@@ -3039,7 +3041,7 @@ GTFILES = $(srcdir)/input.h $(srcdir)/coretypes.h \\\n   $(srcdir)/real.h $(srcdir)/varray.h $(srcdir)/insn-addr.h $(srcdir)/hwint.h \\\n   $(srcdir)/ipa-reference.h $(srcdir)/output.h $(srcdir)/cfgloop.h \\\n   $(srcdir)/cselib.h $(srcdir)/basic-block.h  $(srcdir)/cgraph.h \\\n-  $(srcdir)/reload.h \\\n+  $(srcdir)/reload.h $(srcdir)/caller-save.c \\\n   $(srcdir)/alias.c $(srcdir)/bitmap.c $(srcdir)/cselib.c $(srcdir)/cgraph.c \\\n   $(srcdir)/ipa-prop.c $(srcdir)/ipa-cp.c $(srcdir)/ipa-inline.c $(srcdir)/matrix-reorg.c \\\n   $(srcdir)/dbxout.c $(srcdir)/dwarf2out.c $(srcdir)/dwarf2asm.c \\"}, {"sha": "e2732d9a8ef3b6944a39f3491ee13452fc6e53ba", "filename": "gcc/caller-save.c", "status": "modified", "additions": 71, "deletions": 52, "changes": 123, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/78187f5ad268f94b8be20660040fd08d31aeb2d2/gcc%2Fcaller-save.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/78187f5ad268f94b8be20660040fd08d31aeb2d2/gcc%2Fcaller-save.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcaller-save.c?ref=78187f5ad268f94b8be20660040fd08d31aeb2d2", "patch": "@@ -37,6 +37,7 @@ Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA\n #include \"tm_p.h\"\n #include \"addresses.h\"\n #include \"df.h\"\n+#include \"ggc.h\"\n \n #ifndef MAX_MOVE_MAX\n #define MAX_MOVE_MAX MOVE_MAX\n@@ -69,9 +70,9 @@ static rtx\n    be recognized.  */\n \n static int\n-  reg_save_code[FIRST_PSEUDO_REGISTER][MAX_MACHINE_MODE];\n+  cached_reg_save_code[FIRST_PSEUDO_REGISTER][MAX_MACHINE_MODE];\n static int\n-  reg_restore_code[FIRST_PSEUDO_REGISTER][MAX_MACHINE_MODE];\n+  cached_reg_restore_code[FIRST_PSEUDO_REGISTER][MAX_MACHINE_MODE];\n \n /* Set of hard regs currently residing in save area (during insn scan).  */\n \n@@ -96,6 +97,70 @@ static struct insn_chain *insert_one_insn (struct insn_chain *, int, int,\n \t\t\t\t\t   rtx);\n static void add_stored_regs (rtx, rtx, void *);\n \f\n+static GTY(()) rtx savepat;\n+static GTY(()) rtx restpat;\n+static GTY(()) rtx test_reg;\n+static GTY(()) rtx test_mem;\n+static GTY(()) rtx saveinsn;\n+static GTY(()) rtx restinsn;\n+\n+/* Return the INSN_CODE used to save register REG in mode MODE.  */\n+static int\n+reg_save_code (int reg, enum machine_mode mode)\n+{\n+  bool ok;\n+  if (cached_reg_save_code[reg][mode])\n+     return cached_reg_save_code[reg][mode];\n+  if (!HARD_REGNO_MODE_OK (reg, mode))\n+     {\n+       cached_reg_save_code[reg][mode] = -1;\n+       return -1;\n+     }\n+\n+  /* Update the register number and modes of the register\n+     and memory operand.  */\n+  SET_REGNO (test_reg, reg);\n+  PUT_MODE (test_reg, mode);\n+  PUT_MODE (test_mem, mode);\n+\n+  /* Force re-recognition of the modified insns.  */\n+  INSN_CODE (saveinsn) = -1;\n+\n+  cached_reg_save_code[reg][mode] = recog_memoized (saveinsn);\n+  cached_reg_restore_code[reg][mode] = recog_memoized (restinsn);\n+\n+  /* Now extract both insns and see if we can meet their\n+     constraints.  */\n+  ok = (cached_reg_save_code[reg][mode] != -1\n+\t&& cached_reg_restore_code[reg][mode] != -1);\n+  if (ok)\n+    {\n+      extract_insn (saveinsn);\n+      ok = constrain_operands (1);\n+      extract_insn (restinsn);\n+      ok &= constrain_operands (1);\n+    }\n+\n+  if (! ok)\n+    {\n+      cached_reg_save_code[reg][mode] = -1;\n+      cached_reg_restore_code[reg][mode] = -1;\n+    }\n+  gcc_assert (cached_reg_save_code[reg][mode]);\n+  return cached_reg_save_code[reg][mode];\n+}\n+\n+/* Return the INSN_CODE used to restore register REG in mode MODE.  */\n+static int\n+reg_restore_code (int reg, enum machine_mode mode)\n+{\n+  if (cached_reg_restore_code[reg][mode])\n+     return cached_reg_restore_code[reg][mode];\n+  /* Populate our cache.  */\n+  reg_save_code (reg, mode);\n+  return cached_reg_restore_code[reg][mode];\n+}\n+\f\n /* Initialize for caller-save.\n \n    Look at all the hard registers that are used by a call and for which\n@@ -113,10 +178,6 @@ init_caller_save (void)\n   int offset;\n   rtx address;\n   int i, j;\n-  enum machine_mode mode;\n-  rtx savepat, restpat;\n-  rtx test_reg, test_mem;\n-  rtx saveinsn, restinsn;\n \n   /* First find all the registers that we need to deal with and all\n      the modes that they can have.  If we can't find a mode to use,\n@@ -193,52 +254,9 @@ init_caller_save (void)\n   saveinsn = gen_rtx_INSN (VOIDmode, 0, 0, 0, 0, 0, savepat, -1, 0);\n   restinsn = gen_rtx_INSN (VOIDmode, 0, 0, 0, 0, 0, restpat, -1, 0);\n \n-  for (i = 0; i < FIRST_PSEUDO_REGISTER; i++)\n-    for (mode = 0 ; mode < MAX_MACHINE_MODE; mode++)\n-      if (HARD_REGNO_MODE_OK (i, mode))\n-\t{\n-\t  int ok;\n-\n-\t  /* Update the register number and modes of the register\n-\t     and memory operand.  */\n-\t  SET_REGNO (test_reg, i);\n-\t  PUT_MODE (test_reg, mode);\n-\t  PUT_MODE (test_mem, mode);\n-\n-\t  /* Force re-recognition of the modified insns.  */\n-\t  INSN_CODE (saveinsn) = -1;\n-\t  INSN_CODE (restinsn) = -1;\n-\n-\t  reg_save_code[i][mode] = recog_memoized (saveinsn);\n-\t  reg_restore_code[i][mode] = recog_memoized (restinsn);\n-\n-\t  /* Now extract both insns and see if we can meet their\n-\t     constraints.  */\n-\t  ok = (reg_save_code[i][mode] != -1\n-\t\t&& reg_restore_code[i][mode] != -1);\n-\t  if (ok)\n-\t    {\n-\t      extract_insn (saveinsn);\n-\t      ok = constrain_operands (1);\n-\t      extract_insn (restinsn);\n-\t      ok &= constrain_operands (1);\n-\t    }\n-\n-\t  if (! ok)\n-\t    {\n-\t      reg_save_code[i][mode] = -1;\n-\t      reg_restore_code[i][mode] = -1;\n-\t    }\n-\t}\n-      else\n-\t{\n-\t  reg_save_code[i][mode] = -1;\n-\t  reg_restore_code[i][mode] = -1;\n-\t}\n-\n   for (i = 0; i < FIRST_PSEUDO_REGISTER; i++)\n     for (j = 1; j <= MOVE_MAX_WORDS; j++)\n-      if (reg_save_code [i][regno_save_mode[i][j]] == -1)\n+      if (reg_save_code (i,regno_save_mode[i][j]) == -1)\n \t{\n \t  regno_save_mode[i][j] = VOIDmode;\n \t  if (j == 1)\n@@ -688,7 +706,7 @@ insert_restore (struct insn_chain *chain, int before_p, int regno,\n   pat = gen_rtx_SET (VOIDmode,\n \t\t     gen_rtx_REG (GET_MODE (mem),\n \t\t\t\t  regno), mem);\n-  code = reg_restore_code[regno][GET_MODE (mem)];\n+  code = reg_restore_code (regno, GET_MODE (mem));\n   new = insert_one_insn (chain, before_p, code, pat);\n \n   /* Clear status for all registers we restored.  */\n@@ -760,7 +778,7 @@ insert_save (struct insn_chain *chain, int before_p, int regno,\n   pat = gen_rtx_SET (VOIDmode, mem,\n \t\t     gen_rtx_REG (GET_MODE (mem),\n \t\t\t\t  regno));\n-  code = reg_save_code[regno][GET_MODE (mem)];\n+  code = reg_save_code (regno, GET_MODE (mem));\n   new = insert_one_insn (chain, before_p, code, pat);\n \n   /* Set hard_regs_saved and dead_or_set for all the registers we saved.  */\n@@ -861,3 +879,4 @@ insert_one_insn (struct insn_chain *chain, int before_p, int code, rtx pat)\n   INSN_CODE (new->insn) = code;\n   return new;\n }\n+#include \"gt-caller-save.h\""}]}