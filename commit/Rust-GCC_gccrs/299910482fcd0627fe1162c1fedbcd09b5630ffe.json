{"sha": "299910482fcd0627fe1162c1fedbcd09b5630ffe", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Mjk5OTEwNDgyZmNkMDYyN2ZlMTE2MmMxZmVkYmNkMDliNTYzMGZmZQ==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2016-09-16T19:17:47Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2016-09-16T19:17:47Z"}, "message": "re PR libgcc/71744 (Concurrently throwing exceptions is not scalable)\n\n\tPR libgcc/71744\n\t* unwind-dw2-fde.c (ATOMIC_FDE_FAST_PATH): Define if __register_frame*\n\tis not the primary registry and atomics are available.\n\t(any_objects_registered): New variable.\n\t(__register_frame_info_bases, __register_frame_info_table_bases):\n\tAtomically store 1 to any_objects_registered after registering first\n\tunwind info.\n\t(_Unwind_Find_FDE): Return early if any_objects_registered is 0.\n\nFrom-SVN: r240193", "tree": {"sha": "66a335c06c85833590a8c8c17b8332a42d78e963", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/66a335c06c85833590a8c8c17b8332a42d78e963"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/299910482fcd0627fe1162c1fedbcd09b5630ffe", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/299910482fcd0627fe1162c1fedbcd09b5630ffe", "html_url": "https://github.com/Rust-GCC/gccrs/commit/299910482fcd0627fe1162c1fedbcd09b5630ffe", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/299910482fcd0627fe1162c1fedbcd09b5630ffe/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "84c08ec96a558fcb648e27f3f4a2e7532079d5bd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/84c08ec96a558fcb648e27f3f4a2e7532079d5bd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/84c08ec96a558fcb648e27f3f4a2e7532079d5bd"}], "stats": {"total": 52, "additions": 52, "deletions": 0}, "files": [{"sha": "b5c7ea4a9af1143ca9658cad521773daf9794028", "filename": "libgcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/299910482fcd0627fe1162c1fedbcd09b5630ffe/libgcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/299910482fcd0627fe1162c1fedbcd09b5630ffe/libgcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2FChangeLog?ref=299910482fcd0627fe1162c1fedbcd09b5630ffe", "patch": "@@ -1,3 +1,14 @@\n+2016-09-16  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR libgcc/71744\n+\t* unwind-dw2-fde.c (ATOMIC_FDE_FAST_PATH): Define if __register_frame*\n+\tis not the primary registry and atomics are available.\n+\t(any_objects_registered): New variable.\n+\t(__register_frame_info_bases, __register_frame_info_table_bases):\n+\tAtomically store 1 to any_objects_registered after registering first\n+\tunwind info.\n+\t(_Unwind_Find_FDE): Return early if any_objects_registered is 0.\n+\n 2016-09-09  James Greenhalgh  <james.greenhalgh@arm.com>\n \n \tPR target/63250"}, {"sha": "be82f65b916fead3429152c251d29114335359e2", "filename": "libgcc/unwind-dw2-fde.c", "status": "modified", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/299910482fcd0627fe1162c1fedbcd09b5630ffe/libgcc%2Funwind-dw2-fde.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/299910482fcd0627fe1162c1fedbcd09b5630ffe/libgcc%2Funwind-dw2-fde.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Funwind-dw2-fde.c?ref=299910482fcd0627fe1162c1fedbcd09b5630ffe", "patch": "@@ -35,6 +35,11 @@ see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n #include \"unwind-pe.h\"\n #include \"unwind-dw2-fde.h\"\n #include \"gthr.h\"\n+#else\n+#if (defined(__GTHREAD_MUTEX_INIT) || defined(__GTHREAD_MUTEX_INIT_FUNCTION)) \\\n+    && defined(__GCC_HAVE_SYNC_COMPARE_AND_SWAP_4)\n+#define ATOMIC_FDE_FAST_PATH 1\n+#endif\n #endif\n \n /* The unseen_objects list contains objects that have been registered\n@@ -43,6 +48,9 @@ see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n    by decreasing value of pc_begin.  */\n static struct object *unseen_objects;\n static struct object *seen_objects;\n+#ifdef ATOMIC_FDE_FAST_PATH\n+static int any_objects_registered;\n+#endif\n \n #ifdef __GTHREAD_MUTEX_INIT\n static __gthread_mutex_t object_mutex = __GTHREAD_MUTEX_INIT;\n@@ -96,6 +104,16 @@ __register_frame_info_bases (const void *begin, struct object *ob,\n \n   ob->next = unseen_objects;\n   unseen_objects = ob;\n+#ifdef ATOMIC_FDE_FAST_PATH\n+  /* Set flag that at least one library has registered FDEs.\n+     Use relaxed MO here, it is up to the app to ensure that the library\n+     loading/initialization happens-before using that library in other\n+     threads (in particular unwinding with that library's functions\n+     appearing in the backtraces).  Calling that library's functions\n+     without waiting for the library to initialize would be racy.  */\n+  if (!any_objects_registered)\n+    __atomic_store_n (&any_objects_registered, 1, __ATOMIC_RELAXED);\n+#endif\n \n   __gthread_mutex_unlock (&object_mutex);\n }\n@@ -140,6 +158,16 @@ __register_frame_info_table_bases (void *begin, struct object *ob,\n \n   ob->next = unseen_objects;\n   unseen_objects = ob;\n+#ifdef ATOMIC_FDE_FAST_PATH\n+  /* Set flag that at least one library has registered FDEs.\n+     Use relaxed MO here, it is up to the app to ensure that the library\n+     loading/initialization happens-before using that library in other\n+     threads (in particular unwinding with that library's functions\n+     appearing in the backtraces).  Calling that library's functions\n+     without waiting for the library to initialize would be racy.  */\n+  if (!any_objects_registered)\n+    __atomic_store_n (&any_objects_registered, 1, __ATOMIC_RELAXED);\n+#endif\n \n   __gthread_mutex_unlock (&object_mutex);\n }\n@@ -1001,6 +1029,19 @@ _Unwind_Find_FDE (void *pc, struct dwarf_eh_bases *bases)\n   struct object *ob;\n   const fde *f = NULL;\n \n+#ifdef ATOMIC_FDE_FAST_PATH\n+  /* For targets where unwind info is usually not registered through these\n+     APIs anymore, avoid taking a global lock.\n+     Use relaxed MO here, it is up to the app to ensure that the library\n+     loading/initialization happens-before using that library in other\n+     threads (in particular unwinding with that library's functions\n+     appearing in the backtraces).  Calling that library's functions\n+     without waiting for the library to initialize would be racy.  */\n+  if (__builtin_expect (!__atomic_load_n (&any_objects_registered,\n+\t\t\t\t\t  __ATOMIC_RELAXED), 1))\n+    return NULL;\n+#endif\n+\n   init_object_mutex_once ();\n   __gthread_mutex_lock (&object_mutex);\n "}]}