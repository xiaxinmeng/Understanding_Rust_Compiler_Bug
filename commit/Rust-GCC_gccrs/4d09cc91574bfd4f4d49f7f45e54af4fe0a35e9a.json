{"sha": "4d09cc91574bfd4f4d49f7f45e54af4fe0a35e9a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NGQwOWNjOTE1NzRiZmQ0ZjRkNDlmN2Y0NWU1NGFmNGZlMGEzNWU5YQ==", "commit": {"author": {"name": "Paul A. Clarke", "email": "pc@us.ibm.com", "date": "2020-09-23T19:10:19Z"}, "committer": {"name": "Paul A. Clarke", "email": "pc@us.ibm.com", "date": "2020-09-28T13:11:51Z"}, "message": "rs6000: Support _mm_insert_epi{8,32,64}\n\nAdd compatibility implementations for SSE4.1 intrinsics\n_mm_insert_epi8, _mm_insert_epi32, _mm_insert_epi64.\n\n2020-09-23  Paul A. Clarke  <pc@us.ibm.com>\n\ngcc/\n\t* config/rs6000/smmintrin.h (_mm_insert_epi8): New.\n\t(_mm_insert_epi32): New.\n\t(_mm_insert_epi64): New.", "tree": {"sha": "44cc1d3500401a8412b3b21377dbe51d2a831924", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/44cc1d3500401a8412b3b21377dbe51d2a831924"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4d09cc91574bfd4f4d49f7f45e54af4fe0a35e9a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4d09cc91574bfd4f4d49f7f45e54af4fe0a35e9a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4d09cc91574bfd4f4d49f7f45e54af4fe0a35e9a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4d09cc91574bfd4f4d49f7f45e54af4fe0a35e9a/comments", "author": {"login": "ThinkOpenly", "id": 12301795, "node_id": "MDQ6VXNlcjEyMzAxNzk1", "avatar_url": "https://avatars.githubusercontent.com/u/12301795?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ThinkOpenly", "html_url": "https://github.com/ThinkOpenly", "followers_url": "https://api.github.com/users/ThinkOpenly/followers", "following_url": "https://api.github.com/users/ThinkOpenly/following{/other_user}", "gists_url": "https://api.github.com/users/ThinkOpenly/gists{/gist_id}", "starred_url": "https://api.github.com/users/ThinkOpenly/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ThinkOpenly/subscriptions", "organizations_url": "https://api.github.com/users/ThinkOpenly/orgs", "repos_url": "https://api.github.com/users/ThinkOpenly/repos", "events_url": "https://api.github.com/users/ThinkOpenly/events{/privacy}", "received_events_url": "https://api.github.com/users/ThinkOpenly/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ThinkOpenly", "id": 12301795, "node_id": "MDQ6VXNlcjEyMzAxNzk1", "avatar_url": "https://avatars.githubusercontent.com/u/12301795?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ThinkOpenly", "html_url": "https://github.com/ThinkOpenly", "followers_url": "https://api.github.com/users/ThinkOpenly/followers", "following_url": "https://api.github.com/users/ThinkOpenly/following{/other_user}", "gists_url": "https://api.github.com/users/ThinkOpenly/gists{/gist_id}", "starred_url": "https://api.github.com/users/ThinkOpenly/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ThinkOpenly/subscriptions", "organizations_url": "https://api.github.com/users/ThinkOpenly/orgs", "repos_url": "https://api.github.com/users/ThinkOpenly/repos", "events_url": "https://api.github.com/users/ThinkOpenly/events{/privacy}", "received_events_url": "https://api.github.com/users/ThinkOpenly/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5c609842d13a4c9c6be1a10f7980a74d27daeb85", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5c609842d13a4c9c6be1a10f7980a74d27daeb85", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5c609842d13a4c9c6be1a10f7980a74d27daeb85"}], "stats": {"total": 30, "additions": 30, "deletions": 0}, "files": [{"sha": "4c0fc86e56bfe574a4ae8741e9857f008c8e3fb8", "filename": "gcc/config/rs6000/smmintrin.h", "status": "modified", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4d09cc91574bfd4f4d49f7f45e54af4fe0a35e9a/gcc%2Fconfig%2Frs6000%2Fsmmintrin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4d09cc91574bfd4f4d49f7f45e54af4fe0a35e9a/gcc%2Fconfig%2Frs6000%2Fsmmintrin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Fsmmintrin.h?ref=4d09cc91574bfd4f4d49f7f45e54af4fe0a35e9a", "patch": "@@ -42,6 +42,36 @@\n #include <altivec.h>\n #include <tmmintrin.h>\n \n+extern __inline __m128i __attribute__((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_insert_epi8 (__m128i const __A, int const __D, int const __N)\n+{\n+  __v16qi result = (__v16qi)__A;\n+\n+  result [__N & 0xf] = __D;\n+\n+  return (__m128i) result;\n+}\n+\n+extern __inline __m128i __attribute__((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_insert_epi32 (__m128i const __A, int const __D, int const __N)\n+{\n+  __v4si result = (__v4si)__A;\n+\n+  result [__N & 3] = __D;\n+\n+  return (__m128i) result;\n+}\n+\n+extern __inline __m128i __attribute__((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_insert_epi64 (__m128i const __A, long long const __D, int const __N)\n+{\n+  __v2di result = (__v2di)__A;\n+\n+  result [__N & 1] = __D;\n+\n+  return (__m128i) result;\n+}\n+\n extern __inline int __attribute__((__gnu_inline__, __always_inline__, __artificial__))\n _mm_extract_epi8 (__m128i __X, const int __N)\n {"}]}