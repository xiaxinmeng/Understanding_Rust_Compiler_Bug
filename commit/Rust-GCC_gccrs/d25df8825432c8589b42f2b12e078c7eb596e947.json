{"sha": "d25df8825432c8589b42f2b12e078c7eb596e947", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDI1ZGY4ODI1NDMyYzg1ODliNDJmMmIxMmUwNzhjN2ViNTk2ZTk0Nw==", "commit": {"author": {"name": "Alan Modra", "email": "amodra@gmail.com", "date": "2012-06-22T12:14:12Z"}, "committer": {"name": "Alan Modra", "email": "amodra@gcc.gnu.org", "date": "2012-06-22T12:14:12Z"}, "message": "rs6000.c (rs6000_pre_atomic_barrier): Pass in and return mem.\n\n\t* config/rs6000/rs6000.c (rs6000_pre_atomic_barrier): Pass in and\n\treturn mem.  Convert to indirect addressing if not indirect or\n\tindexed.  Adjust all callers.\n\nFrom-SVN: r188884", "tree": {"sha": "5e0c68a2952dfe92e169a166fc6f4e90ae1c0425", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5e0c68a2952dfe92e169a166fc6f4e90ae1c0425"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d25df8825432c8589b42f2b12e078c7eb596e947", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d25df8825432c8589b42f2b12e078c7eb596e947", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d25df8825432c8589b42f2b12e078c7eb596e947", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d25df8825432c8589b42f2b12e078c7eb596e947/comments", "author": {"login": "amodra", "id": 6006325, "node_id": "MDQ6VXNlcjYwMDYzMjU=", "avatar_url": "https://avatars.githubusercontent.com/u/6006325?v=4", "gravatar_id": "", "url": "https://api.github.com/users/amodra", "html_url": "https://github.com/amodra", "followers_url": "https://api.github.com/users/amodra/followers", "following_url": "https://api.github.com/users/amodra/following{/other_user}", "gists_url": "https://api.github.com/users/amodra/gists{/gist_id}", "starred_url": "https://api.github.com/users/amodra/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/amodra/subscriptions", "organizations_url": "https://api.github.com/users/amodra/orgs", "repos_url": "https://api.github.com/users/amodra/repos", "events_url": "https://api.github.com/users/amodra/events{/privacy}", "received_events_url": "https://api.github.com/users/amodra/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "de703cd7d41e3be0fe997df99d11c6ca6dd0df8d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/de703cd7d41e3be0fe997df99d11c6ca6dd0df8d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/de703cd7d41e3be0fe997df99d11c6ca6dd0df8d"}], "stats": {"total": 27, "additions": 22, "deletions": 5}, "files": [{"sha": "550518cb3b63d3be6e49abc4b801bdca02faa908", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d25df8825432c8589b42f2b12e078c7eb596e947/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d25df8825432c8589b42f2b12e078c7eb596e947/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=d25df8825432c8589b42f2b12e078c7eb596e947", "patch": "@@ -1,3 +1,9 @@\n+2012-06-22  Alan Modra  <amodra@gmail.com>\n+\n+\t* config/rs6000/rs6000.c (rs6000_pre_atomic_barrier): Pass in and\n+\treturn mem.  Convert to indirect addressing if not indirect or\n+\tindexed.  Adjust all callers.\n+\n 2012-06-22  Richard Guenther  <rguenther@suse.de>\n \n \t* gcov-iov.c: Include bconfig.h and system.h."}, {"sha": "6bd59090541b74f07aff767a19156c37f44fc17c", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 16, "deletions": 5, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d25df8825432c8589b42f2b12e078c7eb596e947/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d25df8825432c8589b42f2b12e078c7eb596e947/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=d25df8825432c8589b42f2b12e078c7eb596e947", "patch": "@@ -16527,9 +16527,19 @@ emit_store_conditional (enum machine_mode mode, rtx res, rtx mem, rtx val)\n \n /* Expand barriers before and after a load_locked/store_cond sequence.  */\n \n-static void\n-rs6000_pre_atomic_barrier (enum memmodel model)\n+static rtx\n+rs6000_pre_atomic_barrier (rtx mem, enum memmodel model)\n {\n+  rtx addr = XEXP (mem, 0);\n+  int strict_p = (reload_in_progress || reload_completed);\n+\n+  if (!legitimate_indirect_address_p (addr, strict_p)\n+      && !legitimate_indexed_address_p (addr, strict_p))\n+    {\n+      addr = force_reg (Pmode, addr);\n+      mem = replace_equiv_address_nv (mem, addr);\n+    }\n+\n   switch (model)\n     {\n     case MEMMODEL_RELAXED:\n@@ -16546,6 +16556,7 @@ rs6000_pre_atomic_barrier (enum memmodel model)\n     default:\n       gcc_unreachable ();\n     }\n+  return mem;\n }\n \n static void\n@@ -16684,7 +16695,7 @@ rs6000_expand_atomic_compare_and_swap (rtx operands[])\n   else if (reg_overlap_mentioned_p (retval, oldval))\n     oldval = copy_to_reg (oldval);\n \n-  rs6000_pre_atomic_barrier (mod_s);\n+  mem = rs6000_pre_atomic_barrier (mem, mod_s);\n \n   label1 = NULL_RTX;\n   if (!is_weak)\n@@ -16769,7 +16780,7 @@ rs6000_expand_atomic_exchange (rtx operands[])\n       mode = SImode;\n     }\n \n-  rs6000_pre_atomic_barrier (model);\n+  mem = rs6000_pre_atomic_barrier (mem, model);\n \n   label = gen_rtx_LABEL_REF (VOIDmode, gen_label_rtx ());\n   emit_label (XEXP (label, 0));\n@@ -16853,7 +16864,7 @@ rs6000_expand_atomic_op (enum rtx_code code, rtx mem, rtx val,\n       mode = SImode;\n     }\n \n-  rs6000_pre_atomic_barrier (model);\n+  mem = rs6000_pre_atomic_barrier (mem, model);\n \n   label = gen_label_rtx ();\n   emit_label (label);"}]}