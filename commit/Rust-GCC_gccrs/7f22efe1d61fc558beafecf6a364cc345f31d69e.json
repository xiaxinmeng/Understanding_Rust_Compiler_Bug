{"sha": "7f22efe1d61fc558beafecf6a364cc345f31d69e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2YyMmVmZTFkNjFmYzU1OGJlYWZlY2Y2YTM2NGNjMzQ1ZjMxZDY5ZQ==", "commit": {"author": {"name": "Daniel Berlin", "email": "dberlin@dberlin.org", "date": "2002-12-19T15:53:46Z"}, "committer": {"name": "Daniel Berlin", "email": "dberlin@gcc.gnu.org", "date": "2002-12-19T15:53:46Z"}, "message": "Makefile.in (OBJS): Add alloc-pool.o\n\n2002-12-18  Daniel Berlin  <dberlin@dberlin.org>\n\n\t* Makefile.in (OBJS): Add alloc-pool.o\n\t(alloc-pool.o): New object.\n\n\t* alloc-pool.c: New file.\n\t* alloc-pool.h: New file.\n\nFrom-SVN: r60312", "tree": {"sha": "44047fd11a950adb0359bc5a8cbf8cfcaf6a46b3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/44047fd11a950adb0359bc5a8cbf8cfcaf6a46b3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7f22efe1d61fc558beafecf6a364cc345f31d69e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7f22efe1d61fc558beafecf6a364cc345f31d69e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7f22efe1d61fc558beafecf6a364cc345f31d69e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7f22efe1d61fc558beafecf6a364cc345f31d69e/comments", "author": {"login": "dberlin", "id": 324715, "node_id": "MDQ6VXNlcjMyNDcxNQ==", "avatar_url": "https://avatars.githubusercontent.com/u/324715?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dberlin", "html_url": "https://github.com/dberlin", "followers_url": "https://api.github.com/users/dberlin/followers", "following_url": "https://api.github.com/users/dberlin/following{/other_user}", "gists_url": "https://api.github.com/users/dberlin/gists{/gist_id}", "starred_url": "https://api.github.com/users/dberlin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dberlin/subscriptions", "organizations_url": "https://api.github.com/users/dberlin/orgs", "repos_url": "https://api.github.com/users/dberlin/repos", "events_url": "https://api.github.com/users/dberlin/events{/privacy}", "received_events_url": "https://api.github.com/users/dberlin/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "da9701a61c66e154f085b885f317382e498f451e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/da9701a61c66e154f085b885f317382e498f451e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/da9701a61c66e154f085b885f317382e498f451e"}], "stats": {"total": 230, "additions": 226, "deletions": 4}, "files": [{"sha": "073b662e21db3aed49d23ded5e864c680ca4c56c", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7f22efe1d61fc558beafecf6a364cc345f31d69e/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7f22efe1d61fc558beafecf6a364cc345f31d69e/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=7f22efe1d61fc558beafecf6a364cc345f31d69e", "patch": "@@ -1,3 +1,11 @@\n+2002-12-18  Daniel Berlin  <dberlin@dberlin.org>\n+\n+\t* Makefile.in (OBJS): Add alloc-pool.o\n+\t(alloc-pool.o): New object.\n+\n+\t* alloc-pool.c: New file.\n+\t* alloc-pool.h: New file.\n+\n 2002-12-18  Loren James Rittle  <rittle@labs.mot.com>\n \n \t* gcc.c (validate_switches): Robustify against skipping past '\\0'.\n@@ -2263,7 +2271,6 @@ Fri Nov 15 14:54:19 CET 2002  Jan Hubicka  <jh@suse.cz>\n \t* gthr-posix.h: Fix formatting.\n \n 2002-11-12  Devang Patel <dpatel@apple.com>\n-\n \t* gcc.c (display_help): Two new options -Xpreprocessor and -Xassembler.\n \t(process_command): Same.\n \t* doc/invoke.texi: Info about these two new options."}, {"sha": "4d3a24ffdaf784a41354df74117323b9ad96fde5", "filename": "gcc/Makefile.in", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7f22efe1d61fc558beafecf6a364cc345f31d69e/gcc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7f22efe1d61fc558beafecf6a364cc345f31d69e/gcc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FMakefile.in?ref=7f22efe1d61fc558beafecf6a364cc345f31d69e", "patch": "@@ -752,7 +752,7 @@ OBJS = alias.o bb-reorder.o bitmap.o builtins.o caller-save.o calls.o\t   \\\n  genrtl.o ggc-common.o global.o graph.o gtype-desc.o\t\t\t   \\\n  haifa-sched.o hashtable.o hooks.o ifcvt.o insn-attrtab.o insn-emit.o\t   \\\n  insn-extract.o insn-opinit.o insn-output.o insn-peep.o insn-recog.o\t   \\\n- integrate.o intl.o jump.o  langhooks.o lcm.o lists.o local-alloc.o\t   \\\n+ integrate.o intl.o jump.o  langhooks.o lcm.o lists.o local-alloc.o  \t   \\\n  loop.o mbchar.o optabs.o params.o predict.o print-rtl.o print-tree.o\t   \\\n  profile.o ra.o ra-build.o ra-colorize.o ra-debug.o ra-rewrite.o\t   \\\n  real.o recog.o reg-stack.o regclass.o regmove.o regrename.o\t\t   \\\n@@ -761,7 +761,7 @@ OBJS = alias.o bb-reorder.o bitmap.o builtins.o caller-save.o calls.o\t   \\\n  sibcall.o simplify-rtx.o ssa.o ssa-ccp.o ssa-dce.o stmt.o\t\t   \\\n  stor-layout.o stringpool.o timevar.o toplev.o tracer.o tree.o tree-dump.o \\\n  tree-inline.o unroll.o varasm.o varray.o version.o vmsdbgout.o xcoffout.o \\\n- et-forest.o $(GGC) $(out_object_file) $(EXTRA_OBJS)\n+ alloc-pool.o et-forest.o $(GGC) $(out_object_file) $(EXTRA_OBJS)\n \n BACKEND = main.o libbackend.a\n \n@@ -1541,6 +1541,7 @@ doloop.o : doloop.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(RTL_H) flags.h\n unroll.o : unroll.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(RTL_H) insn-config.h \\\n    function.h $(INTEGRATE_H) $(REGS_H) $(RECOG_H) flags.h $(EXPR_H) $(LOOP_H) toplev.h \\\n    hard-reg-set.h varray.h $(BASIC_BLOCK_H) $(TM_P_H) $(PREDICT_H) $(PARAMS_H)\n+alloc-pool.o : alloc-pool.c $(CONFIG_H) $(SYSTEM_H) alloc-pool.h\n flow.o : flow.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(RTL_H) $(TREE_H) \\\n    flags.h insn-config.h $(BASIC_BLOCK_H) $(REGS_H) hard-reg-set.h output.h toplev.h \\\n    $(RECOG_H) function.h except.h $(EXPR_H) ssa.h $(GGC_H) $(TM_P_H)\n@@ -1562,7 +1563,7 @@ cfgloop.o : cfgloop.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(RTL_H) \\\n    $(BASIC_BLOCK_H) hard-reg-set.h\n dominance.o : dominance.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(RTL_H) \\\n    hard-reg-set.h $(BASIC_BLOCK_H) et-forest.h\n-et-forest.o : et-forest.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) et-forest.h\n+et-forest.o : et-forest.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) et-forest.h alloc-pool.h\n combine.o : combine.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(RTL_H) flags.h \\\n    function.h insn-config.h $(INSN_ATTR_H) $(REGS_H) $(EXPR_H) \\\n    $(BASIC_BLOCK_H) $(RECOG_H) real.h hard-reg-set.h toplev.h $(TM_P_H)"}, {"sha": "b84780aec1c7525411bf1146b55151f911ae4b42", "filename": "gcc/alloc-pool.c", "status": "added", "additions": 166, "deletions": 0, "changes": 166, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7f22efe1d61fc558beafecf6a364cc345f31d69e/gcc%2Falloc-pool.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7f22efe1d61fc558beafecf6a364cc345f31d69e/gcc%2Falloc-pool.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Falloc-pool.c?ref=7f22efe1d61fc558beafecf6a364cc345f31d69e", "patch": "@@ -0,0 +1,166 @@\n+/* Functions to support a pool of allocatable objects.\n+   Copyright (C) 1987, 1997, 1998, 1999, 2000, 2001 Free Software Foundation, Inc.\n+   Contributed by Daniel Berlin <dan@cgsoftware.com>\n+\n+This file is part of GCC.\n+\n+GCC is free software; you can redistribute it and/or modify it under\n+the terms of the GNU General Public License as published by the Free\n+Software Foundation; either version 2, or (at your option) any later\n+version.\n+\n+GCC is distributed in the hope that it will be useful, but WITHOUT ANY\n+WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GCC; see the file COPYING.  If not, write to the Free\n+Software Foundation, 59 Temple Place - Suite 330, Boston, MA\n+02111-1307, USA.  */\n+\n+#include \"libiberty.h\"\n+#include \"config.h\"\n+#include \"system.h\"\n+#include \"alloc-pool.h\"\n+\n+#define align_four(x) (((x+3) >> 2) << 2)\n+#define align_eight(x) (((x+7) >> 3) << 3)\n+\n+/* Create a pool of things of size SIZE, with NUM in each block we\n+   allocate.  */\n+\n+alloc_pool\n+create_alloc_pool (name, size, num)\n+     const char *name;\n+     size_t size;\n+     size_t num;\n+{\n+  alloc_pool pool;\n+  size_t pool_size, header_size;\n+\n+  if (!name)\n+    abort ();\n+\n+  /* Make size large enough to store the list header.  */\n+  if (size < sizeof (alloc_pool_list))\n+    size = sizeof (alloc_pool_list);\n+\n+  /* Now align the size to a multiple of 4.  */\n+  size = align_four (size);\n+\n+  /* Um, we can't really allocate 0 elements per block.  */\n+  if (num == 0)\n+    abort ();\n+\n+  /* Find the size of the pool structure, and the name.  */\n+  pool_size = sizeof (struct alloc_pool_def);\n+\n+  /* and allocate that much memory.  */\n+  pool = (alloc_pool) xmalloc (pool_size);\n+\n+  /* Now init the various pieces of our pool structure.  */\n+  pool->name = xstrdup (name);\n+  pool->elt_size = size;\n+  pool->elts_per_block = num;\n+\n+  /* List header size should be a multiple of 8 */\n+  header_size = align_eight (sizeof (struct alloc_pool_list_def));\n+\n+  pool->block_size = (size * num) + header_size;\n+  pool->free_list = NULL;\n+  pool->elts_allocated = 0;\n+  pool->elts_free = 0;\n+  pool->blocks_allocated = 0;\n+  pool->block_list = NULL;\n+\n+  return (pool);\n+}\n+\n+/* Free all memory allocated for the given memory pool.  */\n+void\n+free_alloc_pool (pool)\n+     alloc_pool pool;\n+{\n+  alloc_pool_list block, next_block;\n+\n+  if (!pool)\n+    abort ();\n+\n+  /* Free each block allocated to the pool.  */\n+  for (block = pool->block_list; block != NULL; block = next_block)\n+    {\n+      next_block = block->next;\n+      free (block);\n+    }\n+  /* Lastly, free the pool and the name.  */\n+  free (pool->name);\n+  free (pool);\n+}\n+\n+/* Allocates one element from the pool specified.  */\n+void *\n+pool_alloc (pool)\n+     alloc_pool pool;\n+{\n+  alloc_pool_list header;\n+  char *block;\n+\n+  if (!pool)\n+    abort ();\n+\n+  /* If there are no more free elements, make some more!.  */\n+  if (!pool->free_list)\n+    {\n+      size_t i;\n+      alloc_pool_list block_header;\n+\n+      /* Make the block */\n+      block = (char *) xmalloc (pool->block_size);\n+      block_header = (alloc_pool_list) block;\n+      block += align_eight (sizeof (struct alloc_pool_list_def));\n+\n+      /* Throw it on the block list */\n+      block_header->next = pool->block_list;\n+      pool->block_list = block_header;\n+\n+      /* Now put the actual block pieces onto the free list.  */\n+      for (i = 0; i < pool->elts_per_block; i++, block += pool->elt_size)\n+      {\n+        header = (alloc_pool_list) block;\n+        header->next = pool->free_list;\n+        pool->free_list = header;\n+      }\n+      /* Also update the number of elements we have free/allocated, and\n+         increment the allocated block count.  */\n+      pool->elts_allocated += pool->elts_per_block;\n+      pool->elts_free += pool->elts_per_block;\n+      pool->blocks_allocated += 1;\n+    }\n+\n+  /* Pull the first free element from the free list, and return it.  */\n+  header = pool->free_list;\n+  pool->free_list = header->next;\n+  pool->elts_free--;\n+  return ((void *) header);\n+}\n+\n+/* Puts PTR back on POOL's free list.  */\n+void\n+pool_free (pool, ptr)\n+     alloc_pool pool;\n+     void *ptr;\n+{\n+  alloc_pool_list header;\n+\n+  if (!ptr)\n+    abort ();\n+\n+  /* Check if we free more than we allocated, which is Bad (TM).  */\n+  if (pool->elts_free + 1 > pool->elts_allocated)\n+    abort ();\n+  header = (alloc_pool_list) ptr;\n+  header->next = pool->free_list;\n+  pool->free_list = header;\n+  pool->elts_free++;\n+}"}, {"sha": "6038a03c31df76c682d1b85290b0033347d9cdb1", "filename": "gcc/alloc-pool.h", "status": "added", "additions": 48, "deletions": 0, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7f22efe1d61fc558beafecf6a364cc345f31d69e/gcc%2Falloc-pool.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7f22efe1d61fc558beafecf6a364cc345f31d69e/gcc%2Falloc-pool.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Falloc-pool.h?ref=7f22efe1d61fc558beafecf6a364cc345f31d69e", "patch": "@@ -0,0 +1,48 @@\n+\n+/* Functions to support a pool of allocatable objects\n+   Copyright (C) 1997, 1998, 1999, 2000, 2001 Free Software Foundation, Inc.\n+   Contributed by Daniel Berlin <dan@cgsoftware.com>\n+This file is part of GCC.\n+\n+GCC is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GCC is distributed in the hope that it will be useful,\n+but WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+GNU General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GCC; see the file COPYING.  If not, write to\n+the Free Software Foundation, 59 Temple Place - Suite 330,\n+Boston, MA 02111-1307, USA.  */\n+#ifndef ALLOC_POOL_H\n+#define ALLOC_POOL_H\n+\n+typedef struct alloc_pool_list_def\n+{\n+  struct alloc_pool_list_def *next;\n+}\n+ *alloc_pool_list;\n+\n+typedef struct alloc_pool_def\n+{\n+  char *name;\n+  size_t elts_per_block;\n+  alloc_pool_list free_list;\n+  size_t elts_allocated;\n+  size_t elts_free;\n+  size_t blocks_allocated;\n+  alloc_pool_list block_list;\n+  size_t block_size;\n+  size_t elt_size;\n+}\n+ *alloc_pool;\n+\n+extern alloc_pool create_alloc_pool PARAMS ((const char *, size_t, size_t));\n+extern void free_alloc_pool PARAMS ((alloc_pool));\n+extern void *pool_alloc PARAMS ((alloc_pool));\n+extern void pool_free PARAMS ((alloc_pool, void *));\n+#endif"}]}