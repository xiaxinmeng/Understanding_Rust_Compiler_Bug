{"sha": "e4796f1c880f4308700c8b019e5b4494a593ce70", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTQ3OTZmMWM4ODBmNDMwODcwMGM4YjAxOWU1YjQ0OTRhNTkzY2U3MA==", "commit": {"author": {"name": "Ian Lance Taylor", "email": "ian@wasabisystems.com", "date": "2004-01-02T20:33:55Z"}, "committer": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2004-01-02T20:33:55Z"}, "message": "cp-demangle.c (d_encoding): When DMGL_PARAMS is not set...\n\n\t* cp-demangle.c (d_encoding): When DMGL_PARAMS is not set, strip\n\tCV-qualifiers from D_COMP_LOCAL_NAME right subtree.\n\t* cplus-dem.c (demangle_arm_hp_template): Set DMGL_PARAMS when\n\tdemangling template parameters.\n\t* testsuite/test-demangle.c (fail): New static function.\n\t(main): Support new options in input file: --no-params,\n\t--is-v3-ctor, and --is-v3-dtor.\n\t* testsuite/demangle-expected: Add --no-params to most tests, and\n\tadd the correct result when parameters are not demangled.  Add\n\tsome simple tests for V3 constructor/destructor recognition.\n\nFrom-SVN: r75336", "tree": {"sha": "183e17ac3dbfe84ac13438b5694f1dc0c39c96cf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/183e17ac3dbfe84ac13438b5694f1dc0c39c96cf"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e4796f1c880f4308700c8b019e5b4494a593ce70", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e4796f1c880f4308700c8b019e5b4494a593ce70", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e4796f1c880f4308700c8b019e5b4494a593ce70", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e4796f1c880f4308700c8b019e5b4494a593ce70/comments", "author": null, "committer": null, "parents": [{"sha": "3864b6fe3d4e7bdcccbcb19f2b7b5c4953738393", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3864b6fe3d4e7bdcccbcb19f2b7b5c4953738393", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3864b6fe3d4e7bdcccbcb19f2b7b5c4953738393"}], "stats": {"total": 2461, "additions": 1700, "deletions": 761}, "files": [{"sha": "ee71aa1d7c8320daff57376f08f95aa608f1bf8a", "filename": "libiberty/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e4796f1c880f4308700c8b019e5b4494a593ce70/libiberty%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e4796f1c880f4308700c8b019e5b4494a593ce70/libiberty%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2FChangeLog?ref=e4796f1c880f4308700c8b019e5b4494a593ce70", "patch": "@@ -1,3 +1,16 @@\n+2004-01-02  Ian Lance Taylor  <ian@wasabisystems.com>\n+\n+\t* cp-demangle.c (d_encoding): When DMGL_PARAMS is not set, strip\n+\tCV-qualifiers from D_COMP_LOCAL_NAME right subtree.\n+\t* cplus-dem.c (demangle_arm_hp_template): Set DMGL_PARAMS when\n+\tdemangling template parameters.\n+\t* testsuite/test-demangle.c (fail): New static function.\n+\t(main): Support new options in input file: --no-params,\n+\t--is-v3-ctor, and --is-v3-dtor.\n+\t* testsuite/demangle-expected: Add --no-params to most tests, and\n+\tadd the correct result when parameters are not demangled.  Add\n+\tsome simple tests for V3 constructor/destructor recognition.\n+\n 2003-12-25  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n \n \t* cp-demangle.c (is_ctor_or_dtor): Fix error in last change."}, {"sha": "a5d18170536b95326c7b906c6ae1fe1abc27972d", "filename": "libiberty/cp-demangle.c", "status": "modified", "additions": 18, "deletions": 1, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e4796f1c880f4308700c8b019e5b4494a593ce70/libiberty%2Fcp-demangle.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e4796f1c880f4308700c8b019e5b4494a593ce70/libiberty%2Fcp-demangle.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2Fcp-demangle.c?ref=e4796f1c880f4308700c8b019e5b4494a593ce70", "patch": "@@ -1,5 +1,5 @@\n /* Demangler for g++ V3 ABI.\n-   Copyright (C) 2003 Free Software Foundation, Inc.\n+   Copyright (C) 2003, 2004 Free Software Foundation, Inc.\n    Written by Ian Lance Taylor <ian@wasabisystems.com>.\n \n    This file is part of the libiberty library, which is part of GCC.\n@@ -1109,6 +1109,23 @@ d_encoding (di, top_level)\n \t\t || dc->type == D_COMP_VOLATILE_THIS\n \t\t || dc->type == D_COMP_CONST_THIS)\n \t    dc = d_left (dc);\n+\n+\t  /* If the top level is a D_COMP_LOCAL_NAME, then there may\n+\t     be CV-qualifiers on its right argument which really apply\n+\t     here; this happens when parsing a class which is local to\n+\t     a function.  */\n+\t  if (dc->type == D_COMP_LOCAL_NAME)\n+\t    {\n+\t      struct d_comp *dcr;\n+\n+\t      dcr = d_right (dc);\n+\t      while (dcr->type == D_COMP_RESTRICT_THIS\n+\t\t     || dcr->type == D_COMP_VOLATILE_THIS\n+\t\t     || dcr->type == D_COMP_CONST_THIS)\n+\t\tdcr = d_left (dcr);\n+\t      dc->u.s_binary.right = dcr;\n+\t    }\n+\n \t  return dc;\n \t}\n "}, {"sha": "f3c4464f184ad9973e59ffd28273e47a585f1ba7", "filename": "libiberty/cplus-dem.c", "status": "modified", "additions": 21, "deletions": 2, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e4796f1c880f4308700c8b019e5b4494a593ce70/libiberty%2Fcplus-dem.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e4796f1c880f4308700c8b019e5b4494a593ce70/libiberty%2Fcplus-dem.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2Fcplus-dem.c?ref=e4796f1c880f4308700c8b019e5b4494a593ce70", "patch": "@@ -1,6 +1,6 @@\n /* Demangler for GNU C++\n    Copyright 1989, 1991, 1994, 1995, 1996, 1997, 1998, 1999,\n-   2000, 2001 Free Software Foundation, Inc.\n+   2000, 2001, 2002, 2003, 2004 Free Software Foundation, Inc.\n    Written by James Clark (jjc@jclark.uucp)\n    Rewritten by Fred Fish (fnf@cygnus.com) for ARM and Lucid demangling\n    Modified by Satish Pai (pai@apollo.hp.com) for HP demangling\n@@ -2318,6 +2318,7 @@ demangle_arm_hp_template (work, mangled, n, declp)\n   if (HP_DEMANGLING && ((*mangled)[n] == 'X'))\n     {\n       char *start_spec_args = NULL;\n+      int hold_options;\n \n       /* First check for and omit template specialization pseudo-arguments,\n          such as in \"Spec<#1,#1.*>\" */\n@@ -2330,6 +2331,12 @@ demangle_arm_hp_template (work, mangled, n, declp)\n       string_init (&arg);\n       if (work->temp_start == -1) /* non-recursive call */\n         work->temp_start = declp->p - declp->b;\n+\n+      /* We want to unconditionally demangle parameter types in\n+\t template parameters.  */\n+      hold_options = work->options;\n+      work->options |= DMGL_PARAMS;\n+\n       string_append (declp, \"<\");\n       while (1)\n         {\n@@ -2376,17 +2383,25 @@ demangle_arm_hp_template (work, mangled, n, declp)\n       string_delete (&arg);\n       if (**mangled == '_')\n         (*mangled)++;\n+      work->options = hold_options;\n       return;\n     }\n   /* ARM template? (Also handles HP cfront extensions) */\n   else if (arm_pt (work, *mangled, n, &p, &args))\n     {\n+      int hold_options;\n       string type_str;\n \n       string_init (&arg);\n       string_appendn (declp, *mangled, p - *mangled);\n       if (work->temp_start == -1)  /* non-recursive call */\n \twork->temp_start = declp->p - declp->b;\n+\n+      /* We want to unconditionally demangle parameter types in\n+\t template parameters.  */\n+      hold_options = work->options;\n+      work->options |= DMGL_PARAMS;\n+\n       string_append (declp, \"<\");\n       /* should do error checking here */\n       while (args < e) {\n@@ -2430,7 +2445,10 @@ demangle_arm_hp_template (work, mangled, n, declp)\n \n               /* Fail if we didn't make any progress: prevent infinite loop. */\n               if (args == old_args)\n-                return;\n+\t\t{\n+\t\t  work->options = hold_options;\n+\t\t  return;\n+\t\t}\n             }\n \t  }\n \tstring_appends (declp, &arg);\n@@ -2441,6 +2459,7 @@ demangle_arm_hp_template (work, mangled, n, declp)\n       if (args >= e)\n \t--declp->p; /* remove extra comma */\n       string_append (declp, \">\");\n+      work->options = hold_options;\n     }\n   else if (n>10 && strncmp (*mangled, \"_GLOBAL_\", 8) == 0\n \t   && (*mangled)[9] == 'N'"}, {"sha": "25e88309b761df48f45403ef9cf3935b8462ac32", "filename": "libiberty/testsuite/demangle-expected", "status": "modified", "additions": 1511, "deletions": 731, "changes": 2242, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e4796f1c880f4308700c8b019e5b4494a593ce70/libiberty%2Ftestsuite%2Fdemangle-expected", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e4796f1c880f4308700c8b019e5b4494a593ce70/libiberty%2Ftestsuite%2Fdemangle-expected", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2Ftestsuite%2Fdemangle-expected?ref=e4796f1c880f4308700c8b019e5b4494a593ce70"}, {"sha": "6e00d1416d789dbbfbbed531091ec359605e652e", "filename": "libiberty/testsuite/test-demangle.c", "status": "modified", "additions": 137, "deletions": 27, "changes": 164, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e4796f1c880f4308700c8b019e5b4494a593ce70/libiberty%2Ftestsuite%2Ftest-demangle.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e4796f1c880f4308700c8b019e5b4494a593ce70/libiberty%2Ftestsuite%2Ftest-demangle.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2Ftestsuite%2Ftest-demangle.c?ref=e4796f1c880f4308700c8b019e5b4494a593ce70", "patch": "@@ -1,5 +1,5 @@\n /* Demangler test program,\n-   Copyright (C) 2002 Free Software Foundation, Inc.\n+   Copyright (C) 2002, 2003, 2004 Free Software Foundation, Inc.\n    Written by Zack Weinberg <zack@codesourcery.com\n \n    This file is part of GNU libiberty.\n@@ -80,27 +80,52 @@ getline(buf)\n   buf->alloced = alloc;\n }\n \n-/* The tester operates on a data file consisting of triples of lines:\n-   format switch\n+static void\n+fail (lineno, opts, in, out, exp)\n+     int lineno;\n+     const char *opts;\n+     const char *in;\n+     const char *out;\n+     const char *exp;\n+{\n+  printf (\"\\\n+FAIL at line %d, options %s:\\n\\\n+in:  %s\\n\\\n+out: %s\\n\\\n+exp: %s\\n\",\n+\t  lineno, opts, in, out != NULL ? out : \"(null)\", exp);\n+}\n+\n+/* The tester operates on a data file consisting of groups of lines:\n+   options\n    input to be demangled\n    expected output\n \n-   The format switch is expected to be either the empty string, a\n-   line of the form --format=<name>, or just <name> by itself.  */\n+   Supported options:\n+     --format=<name>     Sets the demangling style.\n+     --no-params         There are two lines of expected output; the first\n+                         is with DMGL_PARAMS, the second is without it.\n+     --is-v3-ctor        Calls is_gnu_v3_mangled_ctor on input; expected\n+                         output is an integer representing ctor_kind.\n+     --is-v3-dtor        Likewise, but for dtors.\n \n-#define FORMATS \"--format=\"\n-#define FORMATL (sizeof FORMATS - 1)\n+   For compatibility, just in case it matters, the options line may be\n+   empty, to mean --format=auto.  If it doesn't start with --, then it\n+   may contain only a format name.\n+*/\n \n int\n main(argc, argv)\n      int argc;\n      char **argv;\n {\n   enum demangling_styles style;\n+  int no_params;\n+  int is_v3_ctor;\n+  int is_v3_dtor;\n   struct line format;\n   struct line input;\n   struct line expect;\n-  char *fstyle;\n   char *result;\n   int failures = 0;\n   int tests = 0;\n@@ -126,20 +151,98 @@ main(argc, argv)\n \n       tests++;\n \n-      fstyle = format.data;\n-      if (!strncmp (fstyle, FORMATS, FORMATL))\n-\tfstyle += FORMATL;\n-\n-      if (fstyle[0] == '\\0')\n+      no_params = 0;\n+      is_v3_ctor = 0;\n+      is_v3_dtor = 0;\n+      if (format.data[0] == '\\0')\n \tstyle = auto_demangling;\n+      else if (format.data[0] != '-')\n+\t{\n+\t  style = cplus_demangle_name_to_style (format.data);\n+\t  if (style == unknown_demangling)\n+\t    {\n+\t      printf (\"FAIL at line %d: unknown demangling style %s\\n\",\n+\t\t      lineno, format.data);\n+\t      failures++;\n+\t      continue;\n+\t    }\n+\t}\n       else\n-\tstyle = cplus_demangle_name_to_style (fstyle);\n+\t{\n+\t  char *p;\n+\t  char *opt;\n \n-      if (style == unknown_demangling)\n+\t  p = format.data;\n+\t  while (*p != '\\0')\n+\t    {\n+\t      char c;\n+\n+\t      opt = p;\n+\t      p += strcspn (p, \" \\t=\");\n+\t      c = *p;\n+\t      *p = '\\0';\n+\t      if (strcmp (opt, \"--format\") == 0 && c == '=')\n+\t\t{\n+\t\t  char *fstyle;\n+\n+\t\t  *p = c;\n+\t\t  ++p;\n+\t\t  fstyle = p;\n+\t\t  p += strcspn (p, \" \\t\");\n+\t\t  c = *p;\n+\t\t  *p = '\\0';\n+\t\t  style = cplus_demangle_name_to_style (fstyle);\n+\t\t  if (style == unknown_demangling)\n+\t\t    {\n+\t\t      printf (\"FAIL at line %d: unknown demangling style %s\\n\",\n+\t\t\t      lineno, fstyle);\n+\t\t      failures++;\n+\t\t      continue;\n+\t\t    }\n+\t\t}\n+\t      else if (strcmp (opt, \"--no-params\") == 0)\n+\t\tno_params = 1;\n+\t      else if (strcmp (opt, \"--is-v3-ctor\") == 0)\n+\t\tis_v3_ctor = 1;\n+\t      else if (strcmp (opt, \"--is-v3-dtor\") == 0)\n+\t\tis_v3_dtor = 1;\n+\t      else\n+\t\t{\n+\t\t  printf (\"FAIL at line %d: unrecognized option %s\\n\",\n+\t\t\t  lineno, opt);\n+\t\t  failures++;\n+\t\t  continue;\n+\t\t}\n+\t      *p = c;\n+\t      p += strspn (p, \" \\t\");\n+\t    }\n+\t}\n+\n+      if (is_v3_ctor || is_v3_dtor)\n \t{\n-\t  printf (\"FAIL at line %d: unknown demangling style %s\\n\",\n-\t\t  lineno, fstyle);\n-\t  failures++;\n+\t  char buf[20];\n+\n+\t  if (is_v3_ctor)\n+\t    {\n+\t      enum gnu_v3_ctor_kinds kc;\n+\n+\t      kc = is_gnu_v3_mangled_ctor (input.data);\n+\t      sprintf (buf, \"%d\", (int) kc);\n+\t    }\n+\t  else\n+\t    {\n+\t      enum gnu_v3_dtor_kinds kd;\n+\n+\t      kd = is_gnu_v3_mangled_dtor (input.data);\n+\t      sprintf (buf, \"%d\", (int) kd);\n+\t    }\n+\n+\t  if (strcmp (buf, expect.data) != 0)\n+\t    {\n+\t      fail (lineno, format.data, input.data, buf, expect.data);\n+\t      failures++;\n+\t    }\n+\n \t  continue;\n \t}\n \n@@ -152,18 +255,25 @@ main(argc, argv)\n \t  ? strcmp (result, expect.data)\n \t  : strcmp (input.data, expect.data))\n \t{\n-\t  printf (\"\\\n-FAIL at line %d, style %s:\\n\\\n-in:  %s\\n\\\n-out: %s\\n\\\n-exp: %s\\n\",\n-\t\t   lineno, fstyle,\n-\t\t   input.data,\n-\t\t   result,\n-\t\t   expect.data);\n+\t  fail (lineno, format.data, input.data, result, expect.data);\n \t  failures++;\n \t}\n       free (result);\n+\n+      if (no_params)\n+\t{\n+\t  getline (&expect);\n+\t  result = cplus_demangle (input.data, DMGL_ANSI|DMGL_TYPES);\n+\n+\t  if (result\n+\t      ? strcmp (result, expect.data)\n+\t      : strcmp (input.data, expect.data))\n+\t    {\n+\t      fail (lineno, format.data, input.data, result, expect.data);\n+\t      failures++;\n+\t    }\n+\t  free (result);\n+\t}\n     }\n \n   free (format.data);"}]}