{"sha": "323026c7dfe23e1093e80f7db5f4851d1a867b62", "node_id": "C_kwDOANBUbNoAKDMyMzAyNmM3ZGZlMjNlMTA5M2U4MGY3ZGI1ZjQ4NTFkMWE4NjdiNjI", "commit": {"author": {"name": "Siddhesh Poyarekar", "email": "siddhesh@gotplt.org", "date": "2021-11-15T17:33:15Z"}, "committer": {"name": "Siddhesh Poyarekar", "email": "siddhesh@gotplt.org", "date": "2021-11-15T22:50:46Z"}, "message": "gimple-fold: Use ranges to simplify strncat and snprintf\n\nUse ranges for lengths and object sizes in strncat and snprintf to\ndetermine if they can be transformed into simpler operations.\n\ngcc/ChangeLog:\n\n\t* gimple-fold.c (gimple_fold_builtin_strncat): Use ranges to\n\tdetermine if it is safe to transform to strcat.\n\t(gimple_fold_builtin_snprintf): Likewise.\n\ngcc/testsuite/ChangeLog:\n\n\t* gcc.dg/fold-stringops-2.c: Define size_t.\n\t(safe1): Adjust.\n\t(safe4): New test.\n\t* gcc.dg/fold-stringops-3.c: New test.\n\nSigned-off-by: Siddhesh Poyarekar <siddhesh@gotplt.org>", "tree": {"sha": "50e43bf3d1fb56115469cc2cf6fbb859015267a3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/50e43bf3d1fb56115469cc2cf6fbb859015267a3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/323026c7dfe23e1093e80f7db5f4851d1a867b62", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/323026c7dfe23e1093e80f7db5f4851d1a867b62", "html_url": "https://github.com/Rust-GCC/gccrs/commit/323026c7dfe23e1093e80f7db5f4851d1a867b62", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/323026c7dfe23e1093e80f7db5f4851d1a867b62/comments", "author": {"login": "siddhesh", "id": 158582, "node_id": "MDQ6VXNlcjE1ODU4Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/158582?v=4", "gravatar_id": "", "url": "https://api.github.com/users/siddhesh", "html_url": "https://github.com/siddhesh", "followers_url": "https://api.github.com/users/siddhesh/followers", "following_url": "https://api.github.com/users/siddhesh/following{/other_user}", "gists_url": "https://api.github.com/users/siddhesh/gists{/gist_id}", "starred_url": "https://api.github.com/users/siddhesh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/siddhesh/subscriptions", "organizations_url": "https://api.github.com/users/siddhesh/orgs", "repos_url": "https://api.github.com/users/siddhesh/repos", "events_url": "https://api.github.com/users/siddhesh/events{/privacy}", "received_events_url": "https://api.github.com/users/siddhesh/received_events", "type": "User", "site_admin": false}, "committer": {"login": "siddhesh", "id": 158582, "node_id": "MDQ6VXNlcjE1ODU4Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/158582?v=4", "gravatar_id": "", "url": "https://api.github.com/users/siddhesh", "html_url": "https://github.com/siddhesh", "followers_url": "https://api.github.com/users/siddhesh/followers", "following_url": "https://api.github.com/users/siddhesh/following{/other_user}", "gists_url": "https://api.github.com/users/siddhesh/gists{/gist_id}", "starred_url": "https://api.github.com/users/siddhesh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/siddhesh/subscriptions", "organizations_url": "https://api.github.com/users/siddhesh/orgs", "repos_url": "https://api.github.com/users/siddhesh/repos", "events_url": "https://api.github.com/users/siddhesh/events{/privacy}", "received_events_url": "https://api.github.com/users/siddhesh/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cea4dab861bae6536dd5655a42d73f2c17f655f7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cea4dab861bae6536dd5655a42d73f2c17f655f7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cea4dab861bae6536dd5655a42d73f2c17f655f7"}], "stats": {"total": 136, "additions": 82, "deletions": 54}, "files": [{"sha": "765726cf921586ae87fc2c4ff01287f062a001fe", "filename": "gcc/gimple-fold.c", "status": "modified", "additions": 49, "deletions": 53, "changes": 102, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/323026c7dfe23e1093e80f7db5f4851d1a867b62/gcc%2Fgimple-fold.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/323026c7dfe23e1093e80f7db5f4851d1a867b62/gcc%2Fgimple-fold.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-fold.c?ref=323026c7dfe23e1093e80f7db5f4851d1a867b62", "patch": "@@ -2485,72 +2485,73 @@ gimple_fold_builtin_strncat (gimple_stmt_iterator *gsi)\n   tree dst = gimple_call_arg (stmt, 0);\n   tree src = gimple_call_arg (stmt, 1);\n   tree len = gimple_call_arg (stmt, 2);\n-\n-  const char *p = c_getstr (src);\n+  tree src_len = c_strlen (src, 1);\n \n   /* If the requested length is zero, or the src parameter string\n      length is zero, return the dst parameter.  */\n-  if (integer_zerop (len) || (p && *p == '\\0'))\n+  if (integer_zerop (len) || (src_len && integer_zerop (src_len)))\n     {\n       replace_call_with_value (gsi, dst);\n       return true;\n     }\n \n-  if (TREE_CODE (len) != INTEGER_CST || !p)\n-    return false;\n-\n-  unsigned srclen = strlen (p);\n-\n-  int cmpsrc = compare_tree_int (len, srclen);\n-\n   /* Return early if the requested len is less than the string length.\n      Warnings will be issued elsewhere later.  */\n-  if (cmpsrc < 0)\n+  if (!src_len || known_lower (stmt, len, src_len, true))\n     return false;\n \n   unsigned HOST_WIDE_INT dstsize;\n+  bool found_dstsize = compute_builtin_object_size (dst, 1, &dstsize);\n \n-  bool nowarn = warning_suppressed_p (stmt, OPT_Wstringop_overflow_);\n-\n-  if (!nowarn && compute_builtin_object_size (dst, 1, &dstsize))\n+  /* Warn on constant LEN.  */\n+  if (TREE_CODE (len) == INTEGER_CST)\n     {\n-      int cmpdst = compare_tree_int (len, dstsize);\n+      bool nowarn = warning_suppressed_p (stmt, OPT_Wstringop_overflow_);\n \n-      if (cmpdst >= 0)\n+      if (!nowarn && found_dstsize)\n \t{\n-\t  tree fndecl = gimple_call_fndecl (stmt);\n+\t  int cmpdst = compare_tree_int (len, dstsize);\n+\n+\t  if (cmpdst >= 0)\n+\t    {\n+\t      tree fndecl = gimple_call_fndecl (stmt);\n+\n+\t      /* Strncat copies (at most) LEN bytes and always appends\n+\t\t the terminating NUL so the specified bound should never\n+\t\t be equal to (or greater than) the size of the destination.\n+\t\t If it is, the copy could overflow.  */\n+\t      location_t loc = gimple_location (stmt);\n+\t      nowarn = warning_at (loc, OPT_Wstringop_overflow_,\n+\t\t\t\t   cmpdst == 0\n+\t\t\t\t   ? G_(\"%qD specified bound %E equals \"\n+\t\t\t\t\t\"destination size\")\n+\t\t\t\t   : G_(\"%qD specified bound %E exceeds \"\n+\t\t\t\t\t\"destination size %wu\"),\n+\t\t\t\t   fndecl, len, dstsize);\n+\t      if (nowarn)\n+\t\tsuppress_warning (stmt, OPT_Wstringop_overflow_);\n+\t    }\n+\t}\n \n-\t  /* Strncat copies (at most) LEN bytes and always appends\n-\t     the terminating NUL so the specified bound should never\n-\t     be equal to (or greater than) the size of the destination.\n-\t     If it is, the copy could overflow.  */\n+      if (!nowarn && TREE_CODE (src_len) == INTEGER_CST\n+\t  && tree_int_cst_compare (src_len, len) == 0)\n+\t{\n+\t  tree fndecl = gimple_call_fndecl (stmt);\n \t  location_t loc = gimple_location (stmt);\n-\t  nowarn = warning_at (loc, OPT_Wstringop_overflow_,\n-\t\t\t       cmpdst == 0\n-\t\t\t       ? G_(\"%qD specified bound %E equals \"\n-\t\t\t\t    \"destination size\")\n-\t\t\t       : G_(\"%qD specified bound %E exceeds \"\n-\t\t\t\t    \"destination size %wu\"),\n-\t\t\t       fndecl, len, dstsize);\n-\t  if (nowarn)\n+\n+\t  /* To avoid possible overflow the specified bound should also\n+\t     not be equal to the length of the source, even when the size\n+\t     of the destination is unknown (it's not an uncommon mistake\n+\t     to specify as the bound to strncpy the length of the source).  */\n+\t  if (warning_at (loc, OPT_Wstringop_overflow_,\n+\t\t\t  \"%qD specified bound %E equals source length\",\n+\t\t\t  fndecl, len))\n \t    suppress_warning (stmt, OPT_Wstringop_overflow_);\n \t}\n     }\n \n-  if (!nowarn && cmpsrc == 0)\n-    {\n-      tree fndecl = gimple_call_fndecl (stmt);\n-      location_t loc = gimple_location (stmt);\n-\n-      /* To avoid possible overflow the specified bound should also\n-\t not be equal to the length of the source, even when the size\n-\t of the destination is unknown (it's not an uncommon mistake\n-\t to specify as the bound to strncpy the length of the source).  */\n-      if (warning_at (loc, OPT_Wstringop_overflow_,\n-\t\t      \"%qD specified bound %E equals source length\",\n-\t\t      fndecl, len))\n-\tsuppress_warning (stmt, OPT_Wstringop_overflow_);\n-    }\n+  if (!known_lower (stmt, src_len, len))\n+    return false;\n \n   tree fn = builtin_decl_implicit (BUILT_IN_STRCAT);\n \n@@ -3624,10 +3625,6 @@ gimple_fold_builtin_snprintf (gimple_stmt_iterator *gsi)\n   if (gimple_call_num_args (stmt) == 4)\n     orig = gimple_call_arg (stmt, 3);\n \n-  if (!tree_fits_uhwi_p (destsize))\n-    return false;\n-  unsigned HOST_WIDE_INT destlen = tree_to_uhwi (destsize);\n-\n   /* Check whether the format is a literal string constant.  */\n   fmt_str = c_getstr (fmt);\n   if (fmt_str == NULL)\n@@ -3647,15 +3644,16 @@ gimple_fold_builtin_snprintf (gimple_stmt_iterator *gsi)\n       if (orig)\n \treturn false;\n \n+      tree len = build_int_cstu (TREE_TYPE (destsize), strlen (fmt_str));\n+\n       /* We could expand this as\n \t memcpy (str, fmt, cst - 1); str[cst - 1] = '\\0';\n \t or to\n \t memcpy (str, fmt_with_nul_at_cstm1, cst);\n \t but in the former case that might increase code size\n \t and in the latter case grow .rodata section too much.\n \t So punt for now.  */\n-      size_t len = strlen (fmt_str);\n-      if (len >= destlen)\n+      if (!known_lower (stmt, len, destsize, true))\n \treturn false;\n \n       gimple_seq stmts = NULL;\n@@ -3664,7 +3662,7 @@ gimple_fold_builtin_snprintf (gimple_stmt_iterator *gsi)\n       if (tree lhs = gimple_call_lhs (stmt))\n \t{\n \t  repl = gimple_build_assign (lhs,\n-\t\t\t\t      build_int_cst (TREE_TYPE (lhs), len));\n+\t\t\t\t      fold_convert (TREE_TYPE (lhs), len));\n \t  gimple_seq_add_stmt_without_update (&stmts, repl);\n \t  gsi_replace_with_seq_vops (gsi, stmts);\n \t  /* gsi now points at the assignment to the lhs, get a\n@@ -3695,8 +3693,6 @@ gimple_fold_builtin_snprintf (gimple_stmt_iterator *gsi)\n \treturn false;\n \n       tree orig_len = get_maxval_strlen (orig, SRK_STRLEN);\n-      if (!orig_len || TREE_CODE (orig_len) != INTEGER_CST)\n-\treturn false;\n \n       /* We could expand this as\n \t memcpy (str1, str2, cst - 1); str1[cst - 1] = '\\0';\n@@ -3705,7 +3701,7 @@ gimple_fold_builtin_snprintf (gimple_stmt_iterator *gsi)\n \t but in the former case that might increase code size\n \t and in the latter case grow .rodata section too much.\n \t So punt for now.  */\n-      if (compare_tree_int (orig_len, destlen) >= 0)\n+      if (!known_lower (stmt, orig_len, destsize, true))\n \treturn false;\n \n       /* Convert snprintf (str1, cst, \"%s\", str2) into"}, {"sha": "ac7d29eac50bf69d23b4e548eb90560610790eb7", "filename": "gcc/testsuite/gcc.dg/fold-stringops-2.c", "status": "modified", "additions": 15, "deletions": 1, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/323026c7dfe23e1093e80f7db5f4851d1a867b62/gcc%2Ftestsuite%2Fgcc.dg%2Ffold-stringops-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/323026c7dfe23e1093e80f7db5f4851d1a867b62/gcc%2Ftestsuite%2Fgcc.dg%2Ffold-stringops-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ffold-stringops-2.c?ref=323026c7dfe23e1093e80f7db5f4851d1a867b62", "patch": "@@ -1,10 +1,12 @@\n /* { dg-do compile } */\n /* { dg-options \"-O2\" } */\n \n+typedef __SIZE_TYPE__ size_t;\n+\n #define bos(__d) __builtin_object_size ((__d), 0)\n \n char *\n-safe1 (const char *src, int cond, __SIZE_TYPE__ len)\n+safe1 (const char *src, int cond, size_t len)\n {\n   char *dst;\n \n@@ -44,6 +46,18 @@ safe3 (const char *src, int cond, unsigned char len)\n   return __builtin___snprintf_chk (dst, len, 0, bos (dst), \"%s\", src);\n }\n \n+char dst[1024];\n+\n+void\n+safe4 (size_t len)\n+{\n+  len = len > sizeof (dst) - 1 ? sizeof (dst) - 1 : len;\n+  len = len < sizeof (dst) / 2 ? sizeof (dst) / 2 : len;\n+\n+  __builtin_strncat (dst, \"hello\", len);\n+}\n+\n /* { dg-final { scan-assembler-not \"__memcpy_chk\" } } */\n /* { dg-final { scan-assembler-not \"__strncpy_chk\" } } */\n /* { dg-final { scan-assembler-not \"__snprintf_chk\" } } */\n+/* { dg-final { scan-assembler-not \"strncat\" } } */"}, {"sha": "ae2efbf9967a254c1160bf334fe91efe9feb6bab", "filename": "gcc/testsuite/gcc.dg/fold-stringops-3.c", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/323026c7dfe23e1093e80f7db5f4851d1a867b62/gcc%2Ftestsuite%2Fgcc.dg%2Ffold-stringops-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/323026c7dfe23e1093e80f7db5f4851d1a867b62/gcc%2Ftestsuite%2Fgcc.dg%2Ffold-stringops-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ffold-stringops-3.c?ref=323026c7dfe23e1093e80f7db5f4851d1a867b62", "patch": "@@ -0,0 +1,18 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2\" } */\n+\n+typedef __SIZE_TYPE__ size_t;\n+\n+char dst[1024];\n+\n+void\n+safe1 (size_t len)\n+{\n+  len = len > sizeof (dst) ? sizeof (dst) : len;\n+  len = len < sizeof (dst) / 2 ? sizeof (dst) / 2 : len;\n+\n+  __builtin_snprintf (dst, len, \"hello\");\n+  __builtin_snprintf (dst + 5, len, \"%s\", \" world\");\n+}\n+\n+/* { dg-final { scan-assembler-not \"snprintf\" } } */"}]}