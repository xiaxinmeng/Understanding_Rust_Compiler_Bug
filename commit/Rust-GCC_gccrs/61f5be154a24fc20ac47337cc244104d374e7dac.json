{"sha": "61f5be154a24fc20ac47337cc244104d374e7dac", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjFmNWJlMTU0YTI0ZmMyMGFjNDczMzdjYzI0NDEwNGQzNzRlN2RhYw==", "commit": {"author": {"name": "Greg McGary", "email": "greg@mcgary.org", "date": "2000-09-06T08:27:44Z"}, "committer": {"name": "Greg McGary", "email": "gkm@gcc.gnu.org", "date": "2000-09-06T08:27:44Z"}, "message": "20000906.c: New test.\n\n\t* gcc.c-torture/20000906.c: New test.\n\t* gcc.c-torture/20000906.x: Expect failure for ix86 at `-O2'.\n\nFrom-SVN: r36186", "tree": {"sha": "962106b927a0f9a3fd56b900d8745986664e558d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/962106b927a0f9a3fd56b900d8745986664e558d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/61f5be154a24fc20ac47337cc244104d374e7dac", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/61f5be154a24fc20ac47337cc244104d374e7dac", "html_url": "https://github.com/Rust-GCC/gccrs/commit/61f5be154a24fc20ac47337cc244104d374e7dac", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/61f5be154a24fc20ac47337cc244104d374e7dac/comments", "author": null, "committer": null, "parents": [{"sha": "d3283187d5c42d05e56f5842d9a50c15e5093aed", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d3283187d5c42d05e56f5842d9a50c15e5093aed", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d3283187d5c42d05e56f5842d9a50c15e5093aed"}], "stats": {"total": 95, "additions": 95, "deletions": 0}, "files": [{"sha": "53778d8e8bc66fc4e709caeba350a6de7122cdd7", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/61f5be154a24fc20ac47337cc244104d374e7dac/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/61f5be154a24fc20ac47337cc244104d374e7dac/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=61f5be154a24fc20ac47337cc244104d374e7dac", "patch": "@@ -1,3 +1,8 @@\n+2000-09-06  Greg McGary  <greg@mcgary.org>\n+\n+\t* gcc.c-torture/20000906.c: New test.\n+\t* gcc.c-torture/20000906.x: Expect failure for ix86 at `-O2'.\n+\n 2000-09-05  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n \n \t* gcc.dg/wtr-int-type-1.c: Fix for 64-bit platforms."}, {"sha": "8665f1bcaf8ae16af4d3ea1e9bd047ffa8ca8302", "filename": "gcc/testsuite/gcc.c-torture/execute/20000906-1.c", "status": "added", "additions": 76, "deletions": 0, "changes": 76, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/61f5be154a24fc20ac47337cc244104d374e7dac/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2F20000906-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/61f5be154a24fc20ac47337cc244104d374e7dac/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2F20000906-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2F20000906-1.c?ref=61f5be154a24fc20ac47337cc244104d374e7dac", "patch": "@@ -0,0 +1,76 @@\n+/* Testcase distilled from glibc's nss_parse_service_list in nss/nsswitch.c\n+   It can't be distilled further.  Fails with `-O2' for i[3456]86.  */\n+\n+/* this simulates a bounded-pointer type.  */\n+struct ucharp { unsigned char *v, *l, *h; };\n+\n+/* this simulates bounded-pointer check prior to pointer dereference.  */\n+#define AREF(var, idx) ((((((((var).v+(idx)) < (var).l) \\\n+\t\t\t   || (((var).v+(idx)+1) > (var).h))) \\\n+\t\t\t  && (__builtin_trap (), 0)), \\\n+\t\t\t (var).v)[(idx)])\n+\n+struct list\n+{\n+  struct list *next;\n+};\n+\n+struct list *\n+alloc_list (void)\n+{\n+  static struct list l;\n+  return &l;\n+}\n+\n+int one = 1;\n+\n+void\n+foo (struct ucharp cp, struct ucharp lp, struct list **nextp)\n+{\n+  while (1)\n+    {\n+      struct list *list;\n+      while (AREF (lp, 0) && AREF (cp, AREF (lp, 0)))\n+        ++lp.v;\n+      list = alloc_list ();\n+      while (AREF (cp, AREF (lp, 0)))\n+        ++lp.v;\n+      if (AREF (lp, 0) == one)\n+\tdo\n+\t  ++lp.v;\n+\twhile (AREF (lp, 0) && AREF (cp, AREF (lp, 0)));\n+      /* The above AREF (cp, ...) fails because the pseudo created to\n+\t hold cp.v holds garbage, having never been set.\n+\t The easiest way to see the problem is to compile wiht `-O2 -da'\n+\t then look at *.09.loop.  Search for something like this:\n+\n+\t Hoisted regno 183 r/o from (mem/s:SI (reg:SI 16 argp) 10)\n+\t   Replaced reg 91, deleting init_insn (213).\n+\n+\t Now, look for the use of reg 91, which has no set.  */\n+\n+      *nextp = list;\n+      nextp = &list->next;\n+      if (!*lp.v)\n+\tbreak;\n+    }\n+}\n+\n+extern void exit (int);\n+\n+int\n+main (void)\n+{\n+  static unsigned char cp0[] = \"\\0\\0\\0\\0\";\n+  struct ucharp cp = { cp0, cp0, cp0 + sizeof (cp0) };\n+\n+  static unsigned char lp0[] = \"\\1\\1\\0\\0\";\n+  struct ucharp lp = { lp0, lp0, lp0 + sizeof (lp0) };\n+\n+  struct list list;\n+  struct list *nextp = &list;\n+\n+  foo (cp, lp, &nextp);\n+\n+  exit (0);\n+}"}, {"sha": "c567fd6cfedf28f16aad2dc99313363d551c66a0", "filename": "gcc/testsuite/gcc.c-torture/execute/20000906-1.x", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/61f5be154a24fc20ac47337cc244104d374e7dac/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2F20000906-1.x", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/61f5be154a24fc20ac47337cc244104d374e7dac/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2F20000906-1.x", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2F20000906-1.x?ref=61f5be154a24fc20ac47337cc244104d374e7dac", "patch": "@@ -0,0 +1,14 @@\n+# This only fails for `-O2', but not `-O3' or `-Os'\n+# as I had expected.   See clues in testcase source file.\n+\n+set torture_eval_before_execute {\n+\n+    set compiler_conditional_xfail_data {\n+        \"loop optimizer leaves dangling pseudo\" \\\n+\t\"i?86-*-*\" \\\n+\t{ \"-O2\" } \\\n+\t{ \"\" }\n+\t}\n+}\n+\n+return 0"}]}