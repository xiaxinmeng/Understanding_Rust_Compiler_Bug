{"sha": "631c905ac95301d1b2aa7ea640de4525941a8239", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjMxYzkwNWFjOTUzMDFkMWIyYWE3ZWE2NDBkZTQ1MjU5NDFhODIzOQ==", "commit": {"author": {"name": "Adam Nemet", "email": "anemet@caviumnetworks.com", "date": "2009-08-26T20:49:34Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2009-08-26T20:49:34Z"}, "message": "mips.exp: Replace isa(_rev)=...!...\n\ngcc/testsuite/\n2009-08-18  Adam Nemet  <anemet@caviumnetworks.com>\n\t    Richard Sandiford  <rdsandiford@googlemail.com>\n\n\t* gcc.target/mips/mips.exp: Replace isa(_rev)=...!... mechanism\n\twith \"forbid_cpu\".\n\t* gcc.target/mips/branch-1.c: Update accordingly.\n\t* gcc.target/mips/extend-1.c: Likewise.\n\t* gcc.target/mips/dmult-1.c: Likewise.  Remove redundant isa=64.\n\nCo-Authored-By: Richard Sandiford <rdsandiford@googlemail.com>\n\nFrom-SVN: r151129", "tree": {"sha": "6edcf76040159048f8c4ad2a89e513c292de428e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6edcf76040159048f8c4ad2a89e513c292de428e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/631c905ac95301d1b2aa7ea640de4525941a8239", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/631c905ac95301d1b2aa7ea640de4525941a8239", "html_url": "https://github.com/Rust-GCC/gccrs/commit/631c905ac95301d1b2aa7ea640de4525941a8239", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/631c905ac95301d1b2aa7ea640de4525941a8239/comments", "author": null, "committer": null, "parents": [{"sha": "6f5a62e9faca8d796f478f2c89f99c0e4784b4fb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6f5a62e9faca8d796f478f2c89f99c0e4784b4fb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6f5a62e9faca8d796f478f2c89f99c0e4784b4fb"}], "stats": {"total": 105, "additions": 54, "deletions": 51}, "files": [{"sha": "a91b11f02bfb4005b1cd0c56c3e8d59816916bb9", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/631c905ac95301d1b2aa7ea640de4525941a8239/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/631c905ac95301d1b2aa7ea640de4525941a8239/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=631c905ac95301d1b2aa7ea640de4525941a8239", "patch": "@@ -1,3 +1,12 @@\n+2009-08-26  Adam Nemet  <anemet@caviumnetworks.com>\n+\t    Richard Sandiford  <rdsandiford@googlemail.com>\n+\n+\t* gcc.target/mips/mips.exp: Replace isa(_rev)=...!... mechanism\n+\twith \"forbid_cpu\".\n+\t* gcc.target/mips/branch-1.c: Update accordingly.\n+\t* gcc.target/mips/extend-1.c: Likewise.\n+\t* gcc.target/mips/dmult-1.c: Likewise.  Remove redundant isa=64.\n+\n 2009-08-26  Richard Guenther  <rguenther@suse.de>\n \n \tPR middle-end/41163"}, {"sha": "62d6bbb619a46fb56da8e849919b01c40b6e2aa1", "filename": "gcc/testsuite/gcc.target/mips/branch-1.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/631c905ac95301d1b2aa7ea640de4525941a8239/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fbranch-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/631c905ac95301d1b2aa7ea640de4525941a8239/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fbranch-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fbranch-1.c?ref=631c905ac95301d1b2aa7ea640de4525941a8239", "patch": "@@ -2,7 +2,7 @@\n    but we test for \"bbit\" elsewhere.  On other targets, we should implement\n    the \"if\" statements using an \"andi\" instruction followed by a branch\n    on zero.  */\n-/* { dg-options \"-O2 isa=!octeon\" } */\n+/* { dg-options \"-O2 forbid_cpu=octeon\" } */\n \n void bar (void);\n NOMIPS16 void f1 (int x) { if (x & 4) bar (); }"}, {"sha": "517e43ed54b1bb8a5ae7130db160a9eff22642f4", "filename": "gcc/testsuite/gcc.target/mips/dmult-1.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/631c905ac95301d1b2aa7ea640de4525941a8239/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fdmult-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/631c905ac95301d1b2aa7ea640de4525941a8239/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fdmult-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fdmult-1.c?ref=631c905ac95301d1b2aa7ea640de4525941a8239", "patch": "@@ -1,4 +1,4 @@\n-/* { dg-options \"isa=64!octeon -mgp64\" } */\n+/* { dg-options \"forbid_cpu=octeon -mgp64\" } */\n /* { dg-final { scan-assembler \"\\tdmult\\t\" } } */\n /* { dg-final { scan-assembler \"\\tmflo\\t\" } } */\n /* { dg-final { scan-assembler-not \"\\tdmul\\t\" } } */"}, {"sha": "4295106866b550f65b376b79ac497d9714a65d15", "filename": "gcc/testsuite/gcc.target/mips/extend-1.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/631c905ac95301d1b2aa7ea640de4525941a8239/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fextend-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/631c905ac95301d1b2aa7ea640de4525941a8239/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fextend-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fextend-1.c?ref=631c905ac95301d1b2aa7ea640de4525941a8239", "patch": "@@ -1,4 +1,4 @@\n-/* { dg-options \"-O -mgp64 isa=!octeon\" } */\n+/* { dg-options \"-O -mgp64 forbid_cpu=octeon\" } */\n /* { dg-final { scan-assembler-times \"\\tdsll\\t\" 5 } } */\n /* { dg-final { scan-assembler-times \"\\tdsra\\t\" 5 } } */\n /* { dg-final { scan-assembler-not \"\\tsll\\t\" } } */"}, {"sha": "a7a6bd57f7484f32e1204ffcdf29db80d85b26c8", "filename": "gcc/testsuite/gcc.target/mips/mips.exp", "status": "modified", "additions": 42, "deletions": 48, "changes": 90, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/631c905ac95301d1b2aa7ea640de4525941a8239/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fmips.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/631c905ac95301d1b2aa7ea640de4525941a8239/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fmips.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fmips.exp?ref=631c905ac95301d1b2aa7ea640de4525941a8239", "patch": "@@ -137,13 +137,6 @@\n # For example, \"isa_rev>=1\" selects a MIPS32 or MIPS64 processor,\n # \"isa=4\" selects a MIPS IV processor, and so on.\n #\n-# If certain processor-specific extensions are not applicable to the\n-# test you can list them as !CPU in the isa or isa_rev options.  For\n-# example, isa=64!octeon enforces MIPS64 while avoiding octeon.  You\n-# can also use ! without an ISA value.  For example\n-# isa=!octeon!loongson2e disables octeon and loongson2e if otherwise\n-# you would compile for one of them.\n-#\n # There are also the following special pseudo-options:\n #\n #   isa=loongson\n@@ -152,6 +145,10 @@\n #   addressing=absolute\n #\tforce absolute addresses to be used\n #\n+#   forbid_cpu=REGEXP\n+#\tforbid processors that match the given regexp; choose a\n+#\tgeneric ISA instead.\n+#\n #\n # In summary:\n #\n@@ -183,7 +180,7 @@\n #\t\"-mips32r2\" or \"-mips64r2\".\n #\n #   (6) If you need to disable processor-specific extensions use\n-#\tisa=!CPU instead of forcing a generic ISA.\n+#\tforbid_cpu=REGEXP instead of forcing a generic ISA.\n #\n #\n # Terminology\n@@ -232,6 +229,7 @@ set mips_option_groups {\n     dump_pattern \"-dp\"\n     endianness \"-E(L|B)|-me(l|b)\"\n     float \"-m(hard|soft)-float\"\n+    forbid_cpu \"forbid_cpu=.*\"\n     fp \"-mfp(32|64)\"\n     gp \"-mgp(32|64)\"\n     long \"-mlong(32|64)\"\n@@ -856,60 +854,47 @@ proc mips-dg-options { args } {\n \t}\n     }\n \n+    # See whether forbid_cpu forces us to choose a new architecture.\n+    set arch [mips_option mips_base_options arch]\n+    set force_generic_isa_p [expr {\n+\t[regexp \"forbid_cpu=(.*)\" [mips_option options forbid_cpu] dummy spec]\n+\t&& [regexp -- \"^-march=$spec\\$\" $arch]\n+    }]\n+\n     # Interpret the special \"isa\" and \"isa_rev\" options.  If we have\n     # a choice of a 32-bit or a 64-bit architecture, prefer to keep\n     # the -mgp setting the same.\n     set spec [mips_option options arch]\n     if { [regexp {^[^-]} $spec] } {\n-\tset arch [mips_option mips_base_options arch]\n \tif { [string equal $spec \"isa=loongson\"] } {\n \t    if { ![regexp {^-march=loongson} $arch] } {\n \t\tset arch \"-march=loongson2f\"\n \t    }\n \t} else {\n-\t    # With ! and = the ISA value is optional.\n-\t    if { ![regexp {^(isa(?:|_rev))(=|<=|>=)([0-9]*)((?:![^!]+)*)$} \\\n-\t\t       $spec dummy prop relation value nocpus]\n-\t\t || ($value eq \"\"\n-\t\t     && ($relation ne \"=\"\n-\t\t\t || $nocpus eq \"\"))} {\n+\t    if { ![regexp {^(isa(?:|_rev))(=|<=|>=)([0-9]*)$} \\\n+\t\t       $spec dummy prop relation value nocpus] } {\n \t\terror \"Unrecognized isa specification: $spec\"\n \t    }\n-\t    if { $value ne \"\" } {\n-\t\tset current [mips_arch_info $arch $prop]\n-\t\tif { ($current < $value && ![string equal $relation \"<=\"])\n-\t\t     || ($current > $value && ![string equal $relation \">=\"])\n-\t\t     || ([mips_have_test_option_p options \"-mgp64\"]\n-\t\t\t && [mips_32bit_arch_p $arch]) } {\n-\t\t    # The current setting is out of range; it cannot\n-\t\t    # possibly be used.  Find a replacement that can.\n-\t\t    if { [string equal $prop \"isa\"] } {\n-\t\t\tset arch \"-mips$value\"\n-\t\t    } elseif { $value == 0 } {\n-\t\t\tset arch \"-mips4\"\n+\t    set current [mips_arch_info $arch $prop]\n+\t    if { $force_generic_isa_p\n+\t\t || ($current < $value && ![string equal $relation \"<=\"])\n+\t\t || ($current > $value && ![string equal $relation \">=\"])\n+\t\t || ([mips_have_test_option_p options \"-mgp64\"]\n+\t\t     && [mips_32bit_arch_p $arch]) } {\n+\t\t# The current setting is out of range; it cannot\n+\t\t# possibly be used.  Find a replacement that can.\n+\t\tif { [string equal $prop \"isa\"] } {\n+\t\t    set arch \"-mips$value\"\n+\t\t} elseif { $value == 0 } {\n+\t\t    set arch \"-mips4\"\n+\t\t} else {\n+\t\t    if { [mips_have_option_p options \"-mgp32\"] } {\n+\t\t\tset arch \"-mips32\"\n \t\t    } else {\n-\t\t\tif { [mips_have_option_p options \"-mgp32\"] } {\n-\t\t\t    set arch \"-mips32\"\n-\t\t\t} else {\n-\t\t\t    set arch \"-mips64\"\n-\t\t\t}\n-\t\t\tif { $value > 1 } {\n-\t\t\t    append arch \"r$value\"\n-\t\t\t}\n+\t\t\tset arch \"-mips64\"\n \t\t    }\n-\t\t}\n-\t    }\n-\t    # If we haven't switched to a generic ISA based on the\n-\t    # isa* value, do it here if the processor-specific\n-\t    # extension is not allowed.\n-\t    if { $nocpus ne \"\"\n-\t\t && $arch eq [mips_option mips_base_options arch] } {\n-\t\tset cpu [regsub -- {-march=} $arch \"\"]\n-\t\tif { [regexp \"!$cpu!\" \"$nocpus!\"] } {\n-\t\t    set isa_rev [mips_arch_info $arch isa_rev]\n-\t\t    set arch \"-mips[mips_arch_info $arch isa]\"\t\t\n-\t\t    if { $isa_rev > 1 } {\n-\t\t\tappend arch \"r$isa_rev\"\n+\t\t    if { $value > 1 } {\n+\t\t\tappend arch \"r$value\"\n \t\t    }\n \t\t}\n \t    }\n@@ -994,6 +979,14 @@ proc mips-dg-options { args } {\n \t    } else {\n \t\tmips_make_test_option options \"-mips64r$isa_rev\"\n \t    }\n+\t# Otherwise, if the current choice of architecture is unacceptable,\n+\t# choose the equivalent generic architecture.\n+\t} elseif { $force_generic_isa_p } {\n+\t    set arch \"-mips[mips_arch_info $arch isa]\"\n+\t    if { $isa_rev > 1 } {\n+\t\tappend arch \"r$isa_rev\"\n+\t    }\n+\t    mips_make_test_option options $arch\n \t}\n \tunset arch\n \tunset isa\n@@ -1140,6 +1133,7 @@ proc mips-dg-options { args } {\n \n     # Add all options to the dg variable.\n     set options(explicit_p,addressing) 0\n+    set options(explicit_p,forbid_cpu) 0\n     foreach { group regexp } $mips_option_groups {\n \tif { $options(explicit_p,$group) } {\n \t    append extra_tool_flags \" \" $options(option,$group)"}]}