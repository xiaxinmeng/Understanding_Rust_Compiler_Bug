{"sha": "178f9aa17efb04fe73f447763c9cab64166b1041", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTc4ZjlhYTE3ZWZiMDRmZTczZjQ0Nzc2M2M5Y2FiNjQxNjZiMTA0MQ==", "commit": {"author": {"name": "Tobias Burnus", "email": "burnus@net-b.de", "date": "2010-04-06T18:23:56Z"}, "committer": {"name": "Tobias Burnus", "email": "burnus@gcc.gnu.org", "date": "2010-04-06T18:23:56Z"}, "message": "re PR fortran/18918 (Eventually support Fortran 2008's coarrays [co-arrays])\n\n2010-04-06  Tobias Burnus  <burnus@net-b.de>\n\n        PR fortran/18918\n        * gfortran.h (gfc_array_spec): Add cotype.\n        * array.c (gfc_match_array_spec,gfc_set_array_spec): Use it\n        and defer error diagnostic.\n        * resolve.c (resolve_fl_derived): Add missing check.\n        (resolve_symbol): Add cotype/type check.\n        * parse.c (parse_derived): Fix setting of coarray_comp.\n\n2010-04-06  Tobias Burnus  <burnus@net-b.de>\n\n        PR fortran/18918\n        * gfortran.dg/coarray_4.f90: Fix test.\n        * gfortran.dg/coarray_6.f90: Add more tests.\n\nFrom-SVN: r158014", "tree": {"sha": "09851507edcb4905b8c3426e51a826c7aa3fb49c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/09851507edcb4905b8c3426e51a826c7aa3fb49c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/178f9aa17efb04fe73f447763c9cab64166b1041", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/178f9aa17efb04fe73f447763c9cab64166b1041", "html_url": "https://github.com/Rust-GCC/gccrs/commit/178f9aa17efb04fe73f447763c9cab64166b1041", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/178f9aa17efb04fe73f447763c9cab64166b1041/comments", "author": {"login": "tob2", "id": 264461, "node_id": "MDQ6VXNlcjI2NDQ2MQ==", "avatar_url": "https://avatars.githubusercontent.com/u/264461?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tob2", "html_url": "https://github.com/tob2", "followers_url": "https://api.github.com/users/tob2/followers", "following_url": "https://api.github.com/users/tob2/following{/other_user}", "gists_url": "https://api.github.com/users/tob2/gists{/gist_id}", "starred_url": "https://api.github.com/users/tob2/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tob2/subscriptions", "organizations_url": "https://api.github.com/users/tob2/orgs", "repos_url": "https://api.github.com/users/tob2/repos", "events_url": "https://api.github.com/users/tob2/events{/privacy}", "received_events_url": "https://api.github.com/users/tob2/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "d079b87fab5e8de93c897940b750286d31d5d003", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d079b87fab5e8de93c897940b750286d31d5d003", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d079b87fab5e8de93c897940b750286d31d5d003"}], "stats": {"total": 113, "additions": 68, "deletions": 45}, "files": [{"sha": "b1db67aa40d88989828954ce37bd135b8196c727", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/178f9aa17efb04fe73f447763c9cab64166b1041/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/178f9aa17efb04fe73f447763c9cab64166b1041/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=178f9aa17efb04fe73f447763c9cab64166b1041", "patch": "@@ -1,3 +1,13 @@\n+2010-04-06  Tobias Burnus  <burnus@net-b.de>\n+\n+\tPR fortran/18918\n+\t* gfortran.h (gfc_array_spec): Add cotype.\n+\t* array.c (gfc_match_array_spec,gfc_set_array_spec): Use it\n+\tand defer error diagnostic.\n+\t* resolve.c (resolve_fl_derived): Add missing check.\n+\t(resolve_symbol): Add cotype/type check.\n+\t* parse.c (parse_derived): Fix setting of coarray_comp.\n+\n 2010-04-06  Tobias Burnus  <burnus@net-b.de>\n \n \tPR fortran/18918"}, {"sha": "c291ad8ca5cdfe6b08b51bd345988206c25a0381", "filename": "gcc/fortran/array.c", "status": "modified", "additions": 10, "deletions": 36, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/178f9aa17efb04fe73f447763c9cab64166b1041/gcc%2Ffortran%2Farray.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/178f9aa17efb04fe73f447763c9cab64166b1041/gcc%2Ffortran%2Farray.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Farray.c?ref=178f9aa17efb04fe73f447763c9cab64166b1041", "patch": "@@ -342,7 +342,6 @@ match\n gfc_match_array_spec (gfc_array_spec **asp, bool match_dim, bool match_codim)\n {\n   array_type current_type;\n-  array_type coarray_type = AS_UNKNOWN;\n   gfc_array_spec *as;\n   int i;\n  \n@@ -467,31 +466,18 @@ gfc_match_array_spec (gfc_array_spec **asp, bool match_dim, bool match_codim)\n       if (current_type == AS_UNKNOWN)\n \tgoto cleanup;\n \n-      if (as->rank && as->type != AS_DEFERRED && current_type == AS_DEFERRED)\n-\t{\n-\t  gfc_error (\"Array at %C has non-deferred shape and deferred \"\n-\t\t     \"coshape\");\n-          goto cleanup;\n-\t}\n-      if (as->rank && as->type == AS_DEFERRED && current_type != AS_DEFERRED)\n-\t{\n-\t  gfc_error (\"Array at %C has deferred shape and non-deferred \"\n-\t\t     \"coshape\");\n-          goto cleanup;\n-\t}\n-\n       if (as->corank == 1)\n-\tcoarray_type = current_type;\n+\tas->cotype = current_type;\n       else\n-\tswitch (coarray_type)\n+\tswitch (as->cotype)\n \t  { /* See how current spec meshes with the existing.  */\n \t    case AS_UNKNOWN:\n \t      goto cleanup;\n \n \t    case AS_EXPLICIT:\n \t      if (current_type == AS_ASSUMED_SIZE)\n \t\t{\n-\t\t  coarray_type = AS_ASSUMED_SIZE;\n+\t\t  as->cotype = AS_ASSUMED_SIZE;\n \t\t  break;\n \t\t}\n \n@@ -518,7 +504,7 @@ gfc_match_array_spec (gfc_array_spec **asp, bool match_dim, bool match_codim)\n \n \t      if (current_type == AS_ASSUMED_SHAPE)\n \t\t{\n-\t\t  as->type = AS_ASSUMED_SHAPE;\n+\t\t  as->cotype = AS_ASSUMED_SHAPE;\n \t\t  break;\n \t\t}\n \n@@ -553,10 +539,11 @@ gfc_match_array_spec (gfc_array_spec **asp, bool match_dim, bool match_codim)\n       goto cleanup;\n     }\n \n-  if (as->rank == 0 && coarray_type == AS_ASSUMED_SIZE)\n-    as->type = AS_EXPLICIT;\n-  else if (as->rank == 0)\n-    as->type = coarray_type;\n+  if (as->cotype == AS_ASSUMED_SIZE)\n+    as->cotype = AS_EXPLICIT;\n+\n+  if (as->rank == 0)\n+    as->type = as->cotype;\n \n done:\n   if (as->rank == 0 && as->corank == 0)\n@@ -613,26 +600,13 @@ gfc_set_array_spec (gfc_symbol *sym, gfc_array_spec *as, locus *error_loc)\n       return SUCCESS;\n     }\n \n-  if (sym->as->type == AS_DEFERRED && as->type != AS_DEFERRED)\n-    {\n-      gfc_error (\"'%s' at %L has deferred shape and non-deferred coshape\",\n-\t\t sym->name, error_loc);\n-      return FAILURE;\n-    }\n-\n-  if (sym->as->type != AS_DEFERRED && as->type == AS_DEFERRED)\n-    {\n-      gfc_error (\"'%s' at %L has non-deferred shape and deferred coshape\",\n-\t\t sym->name, error_loc);\n-      return FAILURE;\n-    }\n-\n   if (as->corank)\n     {\n       /* The \"sym\" has no corank (checked via gfc_add_codimension). Thus\n \t the codimension is simply added.  */\n       gcc_assert (as->rank == 0 && sym->as->corank == 0);\n \n+      sym->as->cotype = as->cotype;\n       sym->as->corank = as->corank;\n       for (i = 0; i < as->corank; i++)\n \t{"}, {"sha": "2bf0ef856d8c16ef5348fd9900cf6fb5f643d9a8", "filename": "gcc/fortran/gfortran.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/178f9aa17efb04fe73f447763c9cab64166b1041/gcc%2Ffortran%2Fgfortran.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/178f9aa17efb04fe73f447763c9cab64166b1041/gcc%2Ffortran%2Fgfortran.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fgfortran.h?ref=178f9aa17efb04fe73f447763c9cab64166b1041", "patch": "@@ -868,7 +868,7 @@ typedef struct\n {\n   int rank;\t/* A rank of zero means that a variable is a scalar.  */\n   int corank;\n-  array_type type;\n+  array_type type, cotype;\n   struct gfc_expr *lower[GFC_MAX_DIMENSIONS], *upper[GFC_MAX_DIMENSIONS];\n \n   /* These two fields are used with the Cray Pointer extension.  */"}, {"sha": "190148c24ee1d5afef655398b5967f57691d7925", "filename": "gcc/fortran/parse.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/178f9aa17efb04fe73f447763c9cab64166b1041/gcc%2Ffortran%2Fparse.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/178f9aa17efb04fe73f447763c9cab64166b1041/gcc%2Ffortran%2Fparse.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fparse.c?ref=178f9aa17efb04fe73f447763c9cab64166b1041", "patch": "@@ -2115,7 +2115,8 @@ parse_derived (void)\n \tsym->attr.proc_pointer_comp = 1;\n \n       /* Looking for coarray components.  */\n-      if (c->attr.codimension || c->attr.coarray_comp)\n+      if (c->attr.codimension\n+\t  || (c->attr.coarray_comp && !c->attr.pointer && !c->attr.allocatable))\n \tsym->attr.coarray_comp = 1;\n \n       /* Look for private components.  */"}, {"sha": "3ec454e7b734386b39178642b65899cbdbfd53f5", "filename": "gcc/fortran/resolve.c", "status": "modified", "additions": 12, "deletions": 6, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/178f9aa17efb04fe73f447763c9cab64166b1041/gcc%2Ffortran%2Fresolve.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/178f9aa17efb04fe73f447763c9cab64166b1041/gcc%2Ffortran%2Fresolve.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fresolve.c?ref=178f9aa17efb04fe73f447763c9cab64166b1041", "patch": "@@ -10481,7 +10481,8 @@ resolve_fl_derived (gfc_symbol *sym)\n \n       /* F2008, C444.  */\n       if (c->ts.type == BT_DERIVED && c->ts.u.derived->attr.coarray_comp\n-\t  && (c->attr.codimension || c->attr.pointer || c->attr.dimension))\n+\t  && (c->attr.codimension || c->attr.pointer || c->attr.dimension\n+\t      || c->attr.allocatable))\n \t{\n \t  gfc_error (\"Component '%s' at %L with coarray component \"\n \t\t     \"shall be a nonpointer, nonallocatable scalar\",\n@@ -11319,11 +11320,6 @@ resolve_symbol (gfc_symbol *sym)\n \t}\n     }\n \n-  if (sym->attr.codimension && sym->attr.allocatable\n-      && sym->as->type != AS_DEFERRED)\n-    gfc_error (\"Allocatable coarray variable '%s' at %L must have \"\n-\t       \"deferred shape\", sym->name, &sym->declared_at);\n-\n   /* F2008, C526.  */\n   if (((sym->ts.type == BT_DERIVED && sym->ts.u.derived->attr.coarray_comp)\n        || sym->attr.codimension)\n@@ -11355,6 +11351,16 @@ resolve_symbol (gfc_symbol *sym)\n     gfc_error (\"Variable '%s' at %L is a coarray or has a coarray \"\n \t       \"component and is not ALLOCATABLE, SAVE nor a \"\n \t       \"dummy argument\", sym->name, &sym->declared_at);\n+  /* F2008, C528.  */\n+  else if (sym->attr.codimension && !sym->attr.allocatable\n+      && sym->as->cotype == AS_DEFERRED)\n+    gfc_error (\"Coarray variable '%s' at %L shall not have codimensions with \"\n+\t\t\"deferred shape\", sym->name, &sym->declared_at);\n+  else if (sym->attr.codimension && sym->attr.allocatable\n+      && (sym->as->type != AS_DEFERRED || sym->as->cotype != AS_DEFERRED))\n+    gfc_error (\"Allocatable coarray variable '%s' at %L must have \"\n+\t       \"deferred shape\", sym->name, &sym->declared_at);\n+\n \n   /* F2008, C541.  */\n   if (((sym->ts.type == BT_DERIVED && sym->ts.u.derived->attr.coarray_comp)"}, {"sha": "2e035200c5d3670cd88aa8f0244f117c4b478c7e", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/178f9aa17efb04fe73f447763c9cab64166b1041/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/178f9aa17efb04fe73f447763c9cab64166b1041/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=178f9aa17efb04fe73f447763c9cab64166b1041", "patch": "@@ -1,3 +1,9 @@\n+2010-04-06  Tobias Burnus  <burnus@net-b.de>\n+\n+\tPR fortran/18918\n+\t* gfortran.dg/coarray_4.f90: Fix test.\n+\t* gfortran.dg/coarray_6.f90: Add more tests.\n+\n 2010-04-06  Tobias Burnus  <burnus@net-b.de>\n \n \tPR fortran/18918"}, {"sha": "cb693ea2e0429d498fecda268ef35bf39170a130", "filename": "gcc/testsuite/gfortran.dg/coarray_4.f90", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/178f9aa17efb04fe73f447763c9cab64166b1041/gcc%2Ftestsuite%2Fgfortran.dg%2Fcoarray_4.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/178f9aa17efb04fe73f447763c9cab64166b1041/gcc%2Ftestsuite%2Fgfortran.dg%2Fcoarray_4.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fcoarray_4.f90?ref=178f9aa17efb04fe73f447763c9cab64166b1041", "patch": "@@ -48,7 +48,7 @@ subroutine invalid(n)\n   integer, save :: hf4(5)[n,*] ! { dg-error \"cannot have the SAVE attribute\" }\n \n   integer, allocatable :: a2[*] ! { dg-error \"must have deferred shape\" }\n-  integer, allocatable :: a3(:)[*] ! { dg-error \"deferred shape and non-deferred coshape\" }\n+  integer, allocatable :: a3(:)[*] ! { dg-error \"must have deferred shape\" }\n   integer, allocatable :: a4[*] ! { dg-error \"must have deferred shape\" }\n end subroutine invalid\n "}, {"sha": "b6d8b4952d24e53e39a27d1d96e2b2d2ef0d7010", "filename": "gcc/testsuite/gfortran.dg/coarray_6.f90", "status": "modified", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/178f9aa17efb04fe73f447763c9cab64166b1041/gcc%2Ftestsuite%2Fgfortran.dg%2Fcoarray_6.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/178f9aa17efb04fe73f447763c9cab64166b1041/gcc%2Ftestsuite%2Fgfortran.dg%2Fcoarray_6.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fcoarray_6.f90?ref=178f9aa17efb04fe73f447763c9cab64166b1041", "patch": "@@ -51,6 +51,32 @@ function func() result(func2) ! { dg-error \"shall not be a coarray or have a coa\n   type(t) :: func2\n end function func\n \n+subroutine invalid()\n+  type t\n+    integer, allocatable :: a[:]\n+  end type t\n+  type t2\n+    type(t), allocatable :: b ! { dg-error \"nonpointer, nonallocatable scalar\" }\n+  end type t2\n+  type t3\n+    type(t), pointer :: c ! { dg-error \"nonpointer, nonallocatable scalar\" }\n+  end type t3\n+  type t4\n+    type(t) :: d(4) ! { dg-error \"nonpointer, nonallocatable scalar\" }\n+  end type t4\n+end subroutine invalid\n+\n+subroutine valid(a)\n+  integer :: a(:)[4,-1:6,4:*]\n+  type t\n+    integer, allocatable :: a[:]\n+  end type t\n+  type t2\n+    type(t) :: b\n+  end type t2\n+  type(t2), save :: xt2[*]\n+end subroutine valid\n+\n program main\n   integer :: A[*] ! Valid, implicit SAVE attribute\n end program main"}]}