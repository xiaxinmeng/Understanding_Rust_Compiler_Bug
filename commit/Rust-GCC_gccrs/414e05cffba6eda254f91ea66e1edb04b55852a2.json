{"sha": "414e05cffba6eda254f91ea66e1edb04b55852a2", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDE0ZTA1Y2ZmYmE2ZWRhMjU0ZjkxZWE2NmUxZWRiMDRiNTU4NTJhMg==", "commit": {"author": {"name": "Richard Earnshaw", "email": "rearnsha@arm.com", "date": "2001-12-13T14:24:03Z"}, "committer": {"name": "Richard Earnshaw", "email": "rearnsha@gcc.gnu.org", "date": "2001-12-13T14:24:03Z"}, "message": "* collect2.c (COLLECT_SHARED_INIT_FUNC)\n(COLLECT_SHARD_FINI_FUNC): Define default values.\n(write_c_file_stat): Use them to call construtor and destructor\nfunctions in shared libraries.\n* doc/tm.texi (COLLECT_SHARED_INIT_FUNC)\n(COLLECT_SHARD_FINI_FUNC): Document them.\n* config/netbsd.h (COLLECT_SHARED_INIT_FUNC)\n(COLLECT_SHARD_FINI_FUNC): Define.\n\n* config/netbsd.h (LINK_SPEC): Don't pull in estart if creating a\nshared library.  Pass -shared through to the linker.\n* config/arm/netbsd.h (LINK_SPEC): Likewise.\n\n* config/arm/t-netbsd (TARGET_LIBGCC2_CFLAGS): Add -fpic.\n(SHLIB_EXT, SHLIB_NAME, SHLIB_SONAME, SHLIB_OBJS, SHLIB_LINK)\n(SHLIB_INSTALL): Define.\n\nFrom-SVN: r47975", "tree": {"sha": "d02bbfaf0f7f2c12f79276ee2bd6883b939f8502", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d02bbfaf0f7f2c12f79276ee2bd6883b939f8502"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/414e05cffba6eda254f91ea66e1edb04b55852a2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/414e05cffba6eda254f91ea66e1edb04b55852a2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/414e05cffba6eda254f91ea66e1edb04b55852a2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/414e05cffba6eda254f91ea66e1edb04b55852a2/comments", "author": null, "committer": null, "parents": [{"sha": "3a79cccbde4a5af128debfc5f281d7a96946e10e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3a79cccbde4a5af128debfc5f281d7a96946e10e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3a79cccbde4a5af128debfc5f281d7a96946e10e"}], "stats": {"total": 92, "additions": 85, "deletions": 7}, "files": [{"sha": "664087a4549c590428f250d69dbbd54ef2f10e98", "filename": "gcc/ChangeLog", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/414e05cffba6eda254f91ea66e1edb04b55852a2/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/414e05cffba6eda254f91ea66e1edb04b55852a2/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=414e05cffba6eda254f91ea66e1edb04b55852a2", "patch": "@@ -1,3 +1,22 @@\n+2001-12-13  Richard Earnshaw  <rearnsha@arm.com>\n+\n+\t* collect2.c (COLLECT_SHARED_INIT_FUNC)\n+\t(COLLECT_SHARD_FINI_FUNC): Define default values.\n+\t(write_c_file_stat): Use them to call construtor and destructor \n+\tfunctions in shared libraries.\n+\t* doc/tm.texi (COLLECT_SHARED_INIT_FUNC)\n+\t(COLLECT_SHARD_FINI_FUNC): Document them.\n+\t* config/netbsd.h (COLLECT_SHARED_INIT_FUNC)\n+\t(COLLECT_SHARD_FINI_FUNC): Define.\n+\n+\t* config/netbsd.h (LINK_SPEC): Don't pull in estart if creating a\n+\tshared library.  Pass -shared through to the linker.\n+\t* config/arm/netbsd.h (LINK_SPEC): Likewise.\n+\n+\t* config/arm/t-netbsd (TARGET_LIBGCC2_CFLAGS): Add -fpic.\n+\t(SHLIB_EXT, SHLIB_NAME, SHLIB_SONAME, SHLIB_OBJS, SHLIB_LINK)\n+\t(SHLIB_INSTALL): Define.\n+\n 2001-12-13  Richard Earnshaw  <rearnsha@arm.com>\n \n \t* arm.c (legitimize_pic_address): Handle LABEL_REFs in substantially"}, {"sha": "4dd08f045b1644b9becb131167e7bd7a14140226", "filename": "gcc/collect2.c", "status": "modified", "additions": 11, "deletions": 2, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/414e05cffba6eda254f91ea66e1edb04b55852a2/gcc%2Fcollect2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/414e05cffba6eda254f91ea66e1edb04b55852a2/gcc%2Fcollect2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcollect2.c?ref=414e05cffba6eda254f91ea66e1edb04b55852a2", "patch": "@@ -154,6 +154,15 @@ Software Foundation, 59 Temple Place - Suite 330, Boston, MA\n /* This must match tree.h.  */\n #define DEFAULT_INIT_PRIORITY 65535\n \n+#ifndef COLLECT_SHARED_INIT_FUNC\n+#define COLLECT_SHARED_INIT_FUNC(STREAM, FUNC) \\\n+  fprintf ((STREAM), \"void _GLOBAL__DI() {\\n\\t%s();\\n}\\n\", (FUNC))\n+#endif\n+#ifndef COLLECT_SHARED_FINI_FUNC\n+#define COLLECT_SHARED_FINI_FUNC(STREAM, FUNC) \\\n+  fprintf ((STREAM), \"void _GLOBAL__DD() {\\n\\t%s();\\n}\\n\", (FUNC))\n+#endif\n+\n #if defined (LDD_SUFFIX) || SUNOS4_SHARED_LIBRARIES\n #define SCAN_LIBRARIES\n #endif\n@@ -1944,8 +1953,8 @@ write_c_file_stat (stream, name)\n \n   if (shared_obj)\n     {\n-      fprintf (stream, \"void _GLOBAL__DI() {\\n\\t%s();\\n}\\n\", initname);\n-      fprintf (stream, \"void _GLOBAL__DD() {\\n\\t%s();\\n}\\n\", fininame);\n+      COLLECT_SHARED_INIT_FUNC(stream, initname);\n+      COLLECT_SHARED_FINI_FUNC(stream, fininame);\n     }\n }\n "}, {"sha": "74f32e805ea0aa9aa1d3fcbea2759aba28347cc5", "filename": "gcc/config/arm/netbsd.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/414e05cffba6eda254f91ea66e1edb04b55852a2/gcc%2Fconfig%2Farm%2Fnetbsd.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/414e05cffba6eda254f91ea66e1edb04b55852a2/gcc%2Fconfig%2Farm%2Fnetbsd.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Fnetbsd.h?ref=414e05cffba6eda254f91ea66e1edb04b55852a2", "patch": "@@ -67,8 +67,8 @@ Boston, MA 02111-1307, USA.  */\n /* Pass -X to the linker so that it will strip symbols starting with 'L' */\n #undef LINK_SPEC\n #define LINK_SPEC \"\\\n--X %{!nostdlib:%{!r*:%{!e*:-e start}}} -dc -dp %{R*} \\\n-%{static:-Bstatic} %{assert*} \\\n+-X %{!shared:%{!nostdlib:%{!r*:%{!e*:-e start}}} -dc -dp %{R*} \\\n+%{static:-Bstatic}} %{shared} %{assert*} \\\n \"\n \n #undef SIZE_TYPE"}, {"sha": "511b0151116c7d4826df678c0648cd85df8907fa", "filename": "gcc/config/arm/t-netbsd", "status": "modified", "additions": 18, "deletions": 1, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/414e05cffba6eda254f91ea66e1edb04b55852a2/gcc%2Fconfig%2Farm%2Ft-netbsd", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/414e05cffba6eda254f91ea66e1edb04b55852a2/gcc%2Fconfig%2Farm%2Ft-netbsd", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Ft-netbsd?ref=414e05cffba6eda254f91ea66e1edb04b55852a2", "patch": "@@ -1,8 +1,25 @@\n # Just for these, we omit the frame pointer since it makes such a big\n # difference.  It is then pointless adding debugging.\n-TARGET_LIBGCC2_CFLAGS = -fomit-frame-pointer\n+TARGET_LIBGCC2_CFLAGS = -fomit-frame-pointer -fpic\n LIBGCC2_DEBUG_CFLAGS = -g0\n \n+# Build a shared libgcc library.\n+SHLIB_EXT = .so\n+SHLIB_NAME = @shlib_base_name@.so\n+SHLIB_SONAME = @shlib_base_name@.so.1\n+SHLIB_OBJS = @shlib_objs@\n+\n+SHLIB_LINK = $(GCC_FOR_TARGET) $(LIBGCC2_CFLAGS) -shared -nodefaultlibs \\\n+\t-Wl,-soname,$(SHLIB_SONAME) \\\n+\t-o $(SHLIB_NAME) @multilib_flags@ $(SHLIB_OBJS) -lc && \\\n+\trm -f $(SHLIB_SONAME) && \\\n+\t$(LN_S) $(SHLIB_NAME) $(SHLIB_SONAME)\n+# $(slibdir) double quoted to protect it from expansion while building\n+# libgcc.mk.  We want this delayed until actual install time.\n+SHLIB_INSTALL = $(INSTALL_DATA) $(SHLIB_NAME) $$(slibdir)/$(SHLIB_SONAME); \\\n+\trm -f $$(slibdir)/$(SHLIB_NAME); \\\n+\t$(LN_S) $(SHLIB_SONAME) $$(slibdir)/$(SHLIB_NAME)\n+\n # Don't build enquire\n ENQUIRE=\n "}, {"sha": "35e671baacb8bcffefb5e8440e60a22652e97e47", "filename": "gcc/config/netbsd.h", "status": "modified", "additions": 17, "deletions": 2, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/414e05cffba6eda254f91ea66e1edb04b55852a2/gcc%2Fconfig%2Fnetbsd.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/414e05cffba6eda254f91ea66e1edb04b55852a2/gcc%2Fconfig%2Fnetbsd.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fnetbsd.h?ref=414e05cffba6eda254f91ea66e1edb04b55852a2", "patch": "@@ -54,11 +54,26 @@\n #define LIB_SPEC \"%{!p:%{!pg:-lc}}%{p:-lc_p}%{pg:-lc_p}\"\n \n /* Provide a LINK_SPEC appropriate for NetBSD.  Here we provide support\n-   for the special GCC options -static, -assert, and -nostdlib.  */\n+   for the special GCC options -shared, -static, -assert, and -nostdlib.  */\n \n #undef LINK_SPEC\n #define LINK_SPEC \\\n-  \"%{!nostdlib:%{!r*:%{!e*:-e start}}} -dc -dp %{R*} %{static:-Bstatic} %{assert*}\"\n+  \"%{!shared:%{!nostdlib:%{!r*:%{!e*:-e start}}} -dc -dp %{R*} %{static:-Bstatic}} %{shared} %{assert*}\"\n+\n+/* When building shared libraries, the initialization and finalization \n+   functions for the library are .init and .fini respectively.  */\n+\n+#define COLLECT_SHARED_INIT_FUNC(STREAM,FUNC)\t\t\t\t\\\n+  do {\t\t\t\t\t\t\t\t\t\\\n+    fprintf ((STREAM), \"void __init() __asm__ (\\\".init\\\");\");\t\t\\\n+    fprintf ((STREAM), \"void __init() {\\n\\t%s();\\n}\\n\", (FUNC));\t\\\n+  } while (0);\n+\n+#define COLLECT_SHARED_FINI_FUNC(STREAM,FUNC)\t\t\t\t\\\n+  do {\t\t\t\t\t\t\t\t\t\\\n+    fprintf ((STREAM), \"void __fini() __asm__ (\\\".fini\\\");\");\t\t\\\n+    fprintf ((STREAM), \"void __fini() {\\n\\t%s();\\n}\\n\", (FUNC));\t\\\n+  } while (0);\n \n /* This defines which switch letters take arguments. */\n #undef SWITCH_TAKES_ARG"}, {"sha": "55d38ff1dd2ff63913734db51846d8e4ad97890c", "filename": "gcc/doc/tm.texi", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/414e05cffba6eda254f91ea66e1edb04b55852a2/gcc%2Fdoc%2Ftm.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/414e05cffba6eda254f91ea66e1edb04b55852a2/gcc%2Fdoc%2Ftm.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Ftm.texi?ref=414e05cffba6eda254f91ea66e1edb04b55852a2", "patch": "@@ -6638,6 +6638,24 @@ the following symbol is an initialization routine.\n If defined, a C string constant for a switch that tells the linker that\n the following symbol is a finalization routine.\n \n+@item COLLECT_SHARED_INIT_FUNC (@var{stream}, @var{func})\n+If defined, a C statement that will write a function that can be\n+automatically called when a shared library is loaded.  The function\n+should call @var{func}, which takes no arguments.  If not defined, and\n+the object format requires an explicit initialization function, then a\n+function called @var{_GLOBAL__DI} will be generated.\n+\n+This function and the following one are used by collect2 when linking a\n+shared library that needs constructors or destructors, or has DWARF2 \n+exception tables embedded in the code.\n+\n+@item COLLECT_SHARED_FINI_FUNC (@var{stream}, @var{func})\n+If defined, a C statement that will write a function that can be\n+automatically called when a shared library is unloaded.  The function\n+should call @var{func}, which takes no arguments.  If not defined, and\n+the object format requires an explicit finalization function, then a\n+function called @var{_GLOBAL__DD} will be generated.\n+\n @item INVOKE__main\n @findex INVOKE__main\n If defined, @code{main} will call @code{__main} despite the presence of"}]}