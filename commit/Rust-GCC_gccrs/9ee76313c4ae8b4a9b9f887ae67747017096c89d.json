{"sha": "9ee76313c4ae8b4a9b9f887ae67747017096c89d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWVlNzYzMTNjNGFlOGI0YTliOWY4ODdhZTY3NzQ3MDE3MDk2Yzg5ZA==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2011-11-07T16:25:32Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2011-11-07T16:25:32Z"}, "message": "[multiple changes]\n\n2011-11-07  Yannick Moy  <moy@adacore.com>\n\n\t* sem_util.adb (Note_Possible_Modification): In Alfa mode,\n\tgenerate a reference for a modification even when the modification\n\tdoes not come from source.\n\n2011-11-07  Ed Schonberg  <schonberg@adacore.com>\n\n\t* exp_ch5.adb (Expand_Iterator_Loop): For the \"of\" iterator form,\n\tuse the indexing attributes rather than the Element function,\n\tto obtain variable references.\n\t* sem_ch4.adb (Try_Container_Indexing): Code cleanup. Use\n\tFind_Aspect rather than iterating over representation\n\titems. Improve error message.\n\t* a-cohama.adb, a-cohama.ads Update to latest RM, with two versions\n\tof Reference functions.\n\nFrom-SVN: r181093", "tree": {"sha": "b7d2c8c0616c6ae4c1b17857b182dea8d1352672", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b7d2c8c0616c6ae4c1b17857b182dea8d1352672"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9ee76313c4ae8b4a9b9f887ae67747017096c89d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9ee76313c4ae8b4a9b9f887ae67747017096c89d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9ee76313c4ae8b4a9b9f887ae67747017096c89d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9ee76313c4ae8b4a9b9f887ae67747017096c89d/comments", "author": null, "committer": null, "parents": [{"sha": "7b7a0c2bdd174e11693cbe425e2a6e9e86817d93", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7b7a0c2bdd174e11693cbe425e2a6e9e86817d93", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7b7a0c2bdd174e11693cbe425e2a6e9e86817d93"}], "stats": {"total": 131, "additions": 84, "deletions": 47}, "files": [{"sha": "c24abece38a5fadcd88a8e7a154605bc4ad5d564", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9ee76313c4ae8b4a9b9f887ae67747017096c89d/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9ee76313c4ae8b4a9b9f887ae67747017096c89d/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=9ee76313c4ae8b4a9b9f887ae67747017096c89d", "patch": "@@ -1,3 +1,20 @@\n+2011-11-07  Yannick Moy  <moy@adacore.com>\n+\n+\t* sem_util.adb (Note_Possible_Modification): In Alfa mode,\n+\tgenerate a reference for a modification even when the modification\n+\tdoes not come from source.\n+\n+2011-11-07  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* exp_ch5.adb (Expand_Iterator_Loop): For the \"of\" iterator form,\n+\tuse the indexing attributes rather than the Element function,\n+\tto obtain variable references.\n+\t* sem_ch4.adb (Try_Container_Indexing): Code cleanup. Use\n+\tFind_Aspect rather than iterating over representation\n+\titems. Improve error message.\n+\t* a-cohama.adb, a-cohama.ads Update to latest RM, with two versions\n+\tof Reference functions.\n+\n 2011-11-07  Yannick Moy  <moy@adacore.com>\n \n \t* sem_util.adb (Unique_Entity): For a parameter on a subprogram"}, {"sha": "bb72988927234e8a0895c428de49eeca75cad7b0", "filename": "gcc/ada/a-cohama.adb", "status": "modified", "additions": 26, "deletions": 4, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9ee76313c4ae8b4a9b9f887ae67747017096c89d/gcc%2Fada%2Fa-cohama.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9ee76313c4ae8b4a9b9f887ae67747017096c89d/gcc%2Fada%2Fa-cohama.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-cohama.adb?ref=9ee76313c4ae8b4a9b9f887ae67747017096c89d", "patch": "@@ -845,14 +845,36 @@ package body Ada.Containers.Hashed_Maps is\n    -- Reference --\n    ---------------\n \n-   function Constant_Reference (Container : Map; Key : Key_Type)\n-   return Constant_Reference_Type is\n+   function Constant_Reference\n+     (Container : aliased Map; Position : Cursor)\n+   return Constant_Reference_Type\n+   is\n+      pragma Unreferenced (Container);\n+   begin\n+      return (Element => Element (Position)'Unrestricted_Access);\n+   end Constant_Reference;\n+\n+   function Reference\n+     (Container : aliased in out Map; Position : Cursor)\n+   return Reference_Type\n+   is\n+      pragma Unreferenced (Container);\n+   begin\n+      return (Element => Element (Position)'Unrestricted_Access);\n+   end Reference;\n+\n+   function Constant_Reference\n+     (Container : aliased Map; Key : Key_Type)\n+   return Constant_Reference_Type\n+   is\n    begin\n       return (Element => Container.Element (Key)'Unrestricted_Access);\n    end Constant_Reference;\n \n-   function Reference (Container : Map; Key : Key_Type)\n-   return Reference_Type is\n+   function Reference\n+     (Container : aliased in out Map; Key : Key_Type)\n+   return Reference_Type\n+   is\n    begin\n       return (Element => Container.Element (Key)'Unrestricted_Access);\n    end Reference;"}, {"sha": "a13d14c2cca0af8f004227d6ec325c90abed48cb", "filename": "gcc/ada/a-cohama.ads", "status": "modified", "additions": 11, "deletions": 2, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9ee76313c4ae8b4a9b9f887ae67747017096c89d/gcc%2Fada%2Fa-cohama.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9ee76313c4ae8b4a9b9f887ae67747017096c89d/gcc%2Fada%2Fa-cohama.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-cohama.ads?ref=9ee76313c4ae8b4a9b9f887ae67747017096c89d", "patch": "@@ -311,10 +311,19 @@ package Ada.Containers.Hashed_Maps is\n    for Reference_Type'Read use Read;\n \n    function Constant_Reference\n-     (Container : Map; Key : Key_Type)    --  SHOULD BE ALIASED\n+     (Container : aliased Map; Position : Cursor)\n    return Constant_Reference_Type;\n \n-   function Reference (Container : Map; Key : Key_Type)\n+   function Reference\n+     (Container : aliased in out Map; Position : Cursor)\n+   return Reference_Type;\n+\n+   function Constant_Reference\n+     (Container : aliased Map; Key : Key_Type)\n+   return Constant_Reference_Type;\n+\n+   function Reference\n+     (Container : aliased in out Map; Key : Key_Type)\n    return Reference_Type;\n \n    procedure Iterate"}, {"sha": "fd75b158449bf180741d35948998eac7ccaa0b20", "filename": "gcc/ada/exp_ch5.adb", "status": "modified", "additions": 12, "deletions": 10, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9ee76313c4ae8b4a9b9f887ae67747017096c89d/gcc%2Fada%2Fexp_ch5.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9ee76313c4ae8b4a9b9f887ae67747017096c89d/gcc%2Fada%2Fexp_ch5.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch5.adb?ref=9ee76313c4ae8b4a9b9f887ae67747017096c89d", "patch": "@@ -3120,32 +3120,32 @@ package body Exp_Ch5 is\n                   end loop;\n \n                   --  Generate:\n-                  --    Id : Element_Type renames Pack.Element (Cursor);\n+                  --    Id : Element_Type renames Container (Cursor);\n+                  --  This assumes that the container type has an indexing\n+                  --  operation with Cursor. The check that this operation\n+                  --  exists is performed in Check_Container_Indexing.\n \n                   Decl :=\n                     Make_Object_Renaming_Declaration (Loc,\n                       Defining_Identifier => Id,\n-                      Subtype_Mark        =>\n+                      Subtype_Mark     =>\n                         New_Reference_To (Element_Type, Loc),\n-                      Name                =>\n+                      Name             =>\n                         Make_Indexed_Component (Loc,\n-                          Prefix      => Make_Selected_Component (Loc,\n-                              Prefix        => New_Reference_To (Pack, Loc),\n-                              Selector_Name =>\n-                                Make_Identifier (Loc, Chars => Name_Element)),\n+                          Prefix      => Relocate_Node (Container_Arg),\n                           Expressions =>\n                             New_List (New_Occurrence_Of (Cursor, Loc))));\n \n                   --  If the container holds controlled objects, wrap the loop\n                   --  statements and element renaming declaration with a block.\n-                  --  This ensures that the result of Element (Iterator) is\n+                  --  This ensures that the result of Element (Cusor) is\n                   --  cleaned up after each iteration of the loop.\n \n                   if Needs_Finalization (Element_Type) then\n \n                      --  Generate:\n                      --    declare\n-                     --       Id : Element_Type := Pack.Element (Iterator);\n+                     --       Id : Element_Type := Pack.Element (curosr);\n                      --    begin\n                      --       <original loop statements>\n                      --    end;\n@@ -3279,9 +3279,11 @@ package body Exp_Ch5 is\n \n             --  The Iterator is not modified in the source, but of course will\n             --  be updated in the generated code. Indicate that it is actually\n-            --  set to prevent spurious warnings.\n+            --  set to prevent spurious warnings. Ditto for the Cursor, which\n+            --  is modified indirectly in generated code.\n \n             Set_Never_Set_In_Source (Iterator, False);\n+            Set_Never_Set_In_Source (Cursor, False);\n \n             --  If the range of iteration is given by a function call that\n             --  returns a container, the finalization actions have been saved"}, {"sha": "c9e81e989053f3e8d894031f657b6f588adb91dd", "filename": "gcc/ada/sem_ch4.adb", "status": "modified", "additions": 15, "deletions": 30, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9ee76313c4ae8b4a9b9f887ae67747017096c89d/gcc%2Fada%2Fsem_ch4.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9ee76313c4ae8b4a9b9f887ae67747017096c89d/gcc%2Fada%2Fsem_ch4.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch4.adb?ref=9ee76313c4ae8b4a9b9f887ae67747017096c89d", "patch": "@@ -6427,38 +6427,20 @@ package body Sem_Ch4 is\n       Func      : Entity_Id;\n       Func_Name : Node_Id;\n       Indexing  : Node_Id;\n-      Is_Var    : Boolean;\n-      Ritem     : Node_Id;\n \n    begin\n \n       --  Check whether type has a specified indexing aspect\n \n       Func_Name := Empty;\n-      Is_Var := False;\n \n-      Ritem := First_Rep_Item (Etype (Prefix));\n-      while Present (Ritem) loop\n-         if Nkind (Ritem) = N_Aspect_Specification then\n-\n-            --  Prefer Variable_Indexing, but will settle for Constant\n-\n-            if Get_Aspect_Id (Chars (Identifier (Ritem))) =\n-                                                 Aspect_Constant_Indexing\n-            then\n-               Func_Name := Expression (Ritem);\n-\n-            elsif Get_Aspect_Id (Chars (Identifier (Ritem))) =\n-                                                 Aspect_Variable_Indexing\n-            then\n-               Func_Name :=  Expression (Ritem);\n-               Is_Var := True;\n-               exit;\n-            end if;\n-         end if;\n+      if Is_Variable (Prefix) then\n+         Func_Name := Find_Aspect (Etype (Prefix), Aspect_Variable_Indexing);\n+      end if;\n \n-         Next_Rep_Item (Ritem);\n-      end loop;\n+      if No (Func_Name) then\n+         Func_Name := Find_Aspect (Etype (Prefix), Aspect_Constant_Indexing);\n+      end if;\n \n       --  If aspect does not exist the expression is illegal. Error is\n       --  diagnosed in caller.\n@@ -6478,12 +6460,6 @@ package body Sem_Ch4 is\n          end if;\n       end if;\n \n-      if Is_Var\n-        and then not Is_Variable (Prefix)\n-      then\n-         Error_Msg_N (\"Variable indexing cannot be applied to a constant\", N);\n-      end if;\n-\n       if not Is_Overloaded (Func_Name) then\n          Func := Entity (Func_Name);\n          Indexing := Make_Function_Call (Loc,\n@@ -6526,6 +6502,7 @@ package body Sem_Ch4 is\n                Analyze_One_Call (N, It.Nam, False, Success);\n                if Success then\n                   Set_Etype (Name (N), It.Typ);\n+                  Set_Entity (Name (N), It.Nam);\n \n                   --  Add implicit dereference interpretation\n \n@@ -6540,12 +6517,20 @@ package body Sem_Ch4 is\n \n                      Next_Discriminant (Disc);\n                   end loop;\n+                  exit;\n                end if;\n                Get_Next_Interp (I, It);\n             end loop;\n          end;\n       end if;\n \n+      if Etype (N) = Any_Type then\n+         Error_Msg_NE (\"container cannot be indexed with&\", N, Etype (Expr));\n+         Rewrite (N, New_Occurrence_Of (Any_Id, Loc));\n+      else\n+         Analyze (N);\n+      end if;\n+\n       return True;\n    end Try_Container_Indexing;\n "}, {"sha": "1764da9db024b72de029add551d4075b0dee7e8c", "filename": "gcc/ada/sem_util.adb", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9ee76313c4ae8b4a9b9f887ae67747017096c89d/gcc%2Fada%2Fsem_util.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9ee76313c4ae8b4a9b9f887ae67747017096c89d/gcc%2Fada%2Fsem_util.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_util.adb?ref=9ee76313c4ae8b4a9b9f887ae67747017096c89d", "patch": "@@ -10837,7 +10837,9 @@ package body Sem_Util is\n                --  source. This excludes, for example, calls to a dispatching\n                --  assignment operation when the left-hand side is tagged.\n \n-               if Modification_Comes_From_Source then\n+               if Modification_Comes_From_Source\n+                 or else Alfa_Mode\n+               then\n                   Generate_Reference (Ent, Exp, 'm');\n \n                   --  If the target of the assignment is the bound variable"}]}