{"sha": "08b1e29a354d9a1119040558997249a62d1524d9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDhiMWUyOWEzNTRkOWExMTE5MDQwNTU4OTk3MjQ5YTYyZDE1MjRkOQ==", "commit": {"author": {"name": "Richard Sandiford", "email": "richard@codesourcery.com", "date": "2006-03-22T07:23:00Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2006-03-22T07:23:00Z"}, "message": "md.texi: Refer to i386/constraints.md instead of i386/predicates.md.\n\n\t* doc/md.texi: Refer to i386/constraints.md instead of\n\ti386/predicates.md.\n\t* config/i386/constraints.md: New file, extracted from...\n\t* config/i386/predicates.md: ...here.\n\t* config/i386/i386.md: Include constraints.md.\n\nFrom-SVN: r112280", "tree": {"sha": "b5160c4bbc692c8d938aad440285cc7ff7ccf912", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b5160c4bbc692c8d938aad440285cc7ff7ccf912"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/08b1e29a354d9a1119040558997249a62d1524d9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/08b1e29a354d9a1119040558997249a62d1524d9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/08b1e29a354d9a1119040558997249a62d1524d9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/08b1e29a354d9a1119040558997249a62d1524d9/comments", "author": null, "committer": null, "parents": [{"sha": "567b3b825767d85837c2f6e12bbe70d45a664635", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/567b3b825767d85837c2f6e12bbe70d45a664635", "html_url": "https://github.com/Rust-GCC/gccrs/commit/567b3b825767d85837c2f6e12bbe70d45a664635"}], "stats": {"total": 299, "additions": 163, "deletions": 136}, "files": [{"sha": "9ebe45478349d933ca7eccd3fb86d295dbbed48b", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/08b1e29a354d9a1119040558997249a62d1524d9/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/08b1e29a354d9a1119040558997249a62d1524d9/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=08b1e29a354d9a1119040558997249a62d1524d9", "patch": "@@ -1,3 +1,11 @@\n+2006-03-22  Richard Sandiford  <richard@codesourcery.com>\n+\n+\t* doc/md.texi: Refer to i386/constraints.md instead of\n+\ti386/predicates.md.\n+\t* config/i386/constraints.md: New file, extracted from...\n+\t* config/i386/predicates.md: ...here.\n+\t* config/i386/i386.md: Include constraints.md.\n+\n 2006-03-21  Jason Merrill  <jason@redhat.com>\n \n \t* builtins.c (expand_builtin_fork_or_exec): Fix pasto."}, {"sha": "0ab4995f3b86a60d2ae9de165a3d2ce2c764b935", "filename": "gcc/config/i386/constraints.md", "status": "added", "additions": 152, "deletions": 0, "changes": 152, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/08b1e29a354d9a1119040558997249a62d1524d9/gcc%2Fconfig%2Fi386%2Fconstraints.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/08b1e29a354d9a1119040558997249a62d1524d9/gcc%2Fconfig%2Fi386%2Fconstraints.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fconstraints.md?ref=08b1e29a354d9a1119040558997249a62d1524d9", "patch": "@@ -0,0 +1,152 @@\n+;; Constraint definitions for IA-32 and x86-64.\n+;; Copyright (C) 2006 Free Software Foundation, Inc.\n+;;\n+;; This file is part of GCC.\n+;;\n+;; GCC is free software; you can redistribute it and/or modify\n+;; it under the terms of the GNU General Public License as published by\n+;; the Free Software Foundation; either version 2, or (at your option)\n+;; any later version.\n+;;\n+;; GCC is distributed in the hope that it will be useful,\n+;; but WITHOUT ANY WARRANTY; without even the implied warranty of\n+;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+;; GNU General Public License for more details.\n+;;\n+;; You should have received a copy of the GNU General Public License\n+;; along with GCC; see the file COPYING.  If not, write to\n+;; the Free Software Foundation, 51 Franklin Street, Fifth Floor,\n+;; Boston, MA 02110-1301, USA.\n+\n+;;; Unused letters:\n+;;;     B     H           TU W   \n+;;;           h jk          vw  z\n+\n+;; Integer register constraints.\n+;; It is not necessary to define 'r' here.\n+(define_register_constraint \"R\" \"LEGACY_REGS\"\n+ \"Legacy register---the eight integer registers available on all\n+  i386 processors (@code{a}, @code{b}, @code{c}, @code{d},\n+  @code{si}, @code{di}, @code{bp}, @code{sp}).\")\n+\n+(define_register_constraint \"q\" \"TARGET_64BIT ? GENERAL_REGS : Q_REGS\"\n+ \"Any register accessible as @code{@var{r}l}.  In 32-bit mode, @code{a},\n+  @code{b}, @code{c}, and @code{d}; in 64-bit mode, any integer register.\")\n+\n+(define_register_constraint \"Q\" \"Q_REGS\"\n+ \"Any register accessible as @code{@var{r}h}: @code{a}, @code{b},\n+  @code{c}, and @code{d}.\")\n+\n+(define_register_constraint \"l\" \"INDEX_REGS\"\n+ \"@internal Any register that can be used as the index in a base+index\n+  memory access: that is, any general register except the stack pointer.\")\n+\n+(define_register_constraint \"a\" \"AREG\"\n+ \"The @code{a} register.\")\n+\n+(define_register_constraint \"b\" \"BREG\"\n+ \"The @code{b} register.\")\n+\n+(define_register_constraint \"c\" \"CREG\"\n+ \"The @code{c} register.\")\n+\n+(define_register_constraint \"d\" \"DREG\"\n+ \"The @code{d} register.\")\n+\n+(define_register_constraint \"S\" \"SIREG\"\n+ \"The @code{si} register.\")\n+\n+(define_register_constraint \"D\" \"DIREG\"\n+ \"The @code{di} register.\")\n+\n+(define_register_constraint \"A\" \"AD_REGS\"\n+ \"The @code{a} and @code{d} registers, as a pair (for instructions\n+  that return half the result in one and half in the other).\")\n+\n+;; Floating-point register constraints.\n+(define_register_constraint \"f\"\n+ \"TARGET_80387 || TARGET_FLOAT_RETURNS_IN_80387 ? FLOAT_REGS : NO_REGS\"\n+ \"Any 80387 floating-point (stack) register.\")\n+\n+(define_register_constraint \"t\"\n+ \"TARGET_80387 || TARGET_FLOAT_RETURNS_IN_80387 ? FP_TOP_REG : NO_REGS\"\n+ \"Top of 80387 floating-point stack (@code{%st(0)}).\")\n+\n+(define_register_constraint \"u\"\n+ \"TARGET_80387 || TARGET_FLOAT_RETURNS_IN_80387 ? FP_SECOND_REG : NO_REGS\"\n+ \"Second from top of 80387 floating-point stack (@code{%st(1)}).\")\n+\n+;; Vector registers (also used for plain floating point nowadays).\n+(define_register_constraint \"y\" \"TARGET_MMX ? MMX_REGS : NO_REGS\"\n+ \"Any MMX register.\")\n+\n+(define_register_constraint \"x\" \"TARGET_SSE ? SSE_REGS : NO_REGS\"\n+ \"Any SSE register.\")\n+\n+(define_register_constraint \"Y\" \"TARGET_SSE2? SSE_REGS : NO_REGS\"\n+ \"@internal Any SSE2 register.\")\n+\n+;; Integer constant constraints.\n+(define_constraint \"I\"\n+  \"Integer constant in the range 0 @dots{} 31, for 32-bit shifts.\"\n+  (and (match_code \"const_int\")\n+       (match_test \"ival >= 0 && ival <= 31\")))\n+\n+(define_constraint \"J\"\n+  \"Integer constant in the range 0 @dots{} 63, for 64-bit shifts.\"\n+  (and (match_code \"const_int\")\n+       (match_test \"ival >= 0 && ival <= 63\")))\n+\n+(define_constraint \"K\"\n+  \"Signed 8-bit integer constant.\"\n+  (and (match_code \"const_int\")\n+       (match_test \"ival >= -128 && ival <= 127\")))\n+\n+(define_constraint \"L\"\n+  \"@code{0xFF} or @code{0xFFFF}, for andsi as a zero-extending move.\"\n+  (and (match_code \"const_int\")\n+       (match_test \"ival == 0xFF || ival == 0xFFFF\")))\n+\n+(define_constraint \"M\"\n+  \"0, 1, 2, or 3 (shifts for the @code{lea} instruction).\"\n+  (and (match_code \"const_int\")\n+       (match_test \"ival >= 0 && ival <= 3\")))\n+\n+(define_constraint \"N\"\n+  \"Unsigned 8-bit integer constant (for @code{in} and @code{out} \n+   instructions).\"\n+  (and (match_code \"const_int\")\n+       (match_test \"ival >= 0 && ival <= 255\")))\n+\n+(define_constraint \"O\"\n+  \"@internal Integer constant in the range 0 @dots{} 127, for 128-bit shifts.\"\n+  (and (match_code \"const_int\")\n+       (match_test \"ival >= 0 && ival <= 127\")))\n+\n+;; Floating-point constant constraints.\n+;; We allow constants even if TARGET_80387 isn't set, because the\n+;; stack register converter may need to load 0.0 into the function\n+;; value register (top of stack).\n+(define_constraint \"G\"\n+  \"Standard 80387 floating point constant.\"\n+  (and (match_code \"const_double\")\n+       (match_test \"standard_80387_constant_p (op)\")))\n+\n+;; This can theoretically be any mode's CONST0_RTX.\n+(define_constraint \"C\"\n+  \"Standard SSE floating point constant.\"\n+  (match_test \"standard_sse_constant_p (op)\"))\n+\n+;; Constant-or-symbol-reference constraints.\n+\n+(define_constraint \"e\"\n+  \"32-bit signed integer constant, or a symbolic reference known\n+   to fit that range (for immediate operands in sign-extending x86-64\n+   instructions).\"\n+  (match_operand 0 \"x86_64_immediate_operand\"))\n+\n+(define_constraint \"Z\"\n+  \"32-bit unsigned integer constant, or a symbolic reference known\n+   to fit that range (for immediate operands in zero-extending x86-64\n+   instructions).\"\n+  (match_operand 0 \"x86_64_zext_immediate_operand\"))"}, {"sha": "827bf4e4da1da5e0881fbe1aee08a7c7461a2315", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/08b1e29a354d9a1119040558997249a62d1524d9/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/08b1e29a354d9a1119040558997249a62d1524d9/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=08b1e29a354d9a1119040558997249a62d1524d9", "patch": "@@ -475,9 +475,10 @@\n (include \"athlon.md\")\n \n \f\n-;; Operand and operator predicates\n+;; Operand and operator predicates and constraints\n \n (include \"predicates.md\")\n+(include \"constraints.md\")\n \n \f\n ;; Compare instructions."}, {"sha": "acc01eeb537b11cb0ca75393991f797d3cb7ed0e", "filename": "gcc/config/i386/predicates.md", "status": "modified", "additions": 0, "deletions": 134, "changes": 134, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/08b1e29a354d9a1119040558997249a62d1524d9/gcc%2Fconfig%2Fi386%2Fpredicates.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/08b1e29a354d9a1119040558997249a62d1524d9/gcc%2Fconfig%2Fi386%2Fpredicates.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fpredicates.md?ref=08b1e29a354d9a1119040558997249a62d1524d9", "patch": "@@ -947,137 +947,3 @@\n \n (define_predicate \"absneg_operator\"\n   (match_code \"abs,neg\"))\n-\n-;;; Constraint definitions.\n-;;; Unused letters:\n-;;;     B     H           TU W   \n-;;;           h jk          vw  z\n-\n-;; Integer register constraints.\n-;; It is not necessary to define 'r' here.\n-(define_register_constraint \"R\" \"LEGACY_REGS\"\n- \"Legacy register---the eight integer registers available on all\n-  i386 processors (@code{a}, @code{b}, @code{c}, @code{d},\n-  @code{si}, @code{di}, @code{bp}, @code{sp}).\")\n-\n-(define_register_constraint \"q\" \"TARGET_64BIT ? GENERAL_REGS : Q_REGS\"\n- \"Any register accessible as @code{@var{r}l}.  In 32-bit mode, @code{a},\n-  @code{b}, @code{c}, and @code{d}; in 64-bit mode, any integer register.\")\n-\n-(define_register_constraint \"Q\" \"Q_REGS\"\n- \"Any register accessible as @code{@var{r}h}: @code{a}, @code{b},\n-  @code{c}, and @code{d}.\")\n-\n-(define_register_constraint \"l\" \"INDEX_REGS\"\n- \"@internal Any register that can be used as the index in a base+index\n-  memory access: that is, any general register except the stack pointer.\")\n-\n-(define_register_constraint \"a\" \"AREG\"\n- \"The @code{a} register.\")\n-\n-(define_register_constraint \"b\" \"BREG\"\n- \"The @code{b} register.\")\n-\n-(define_register_constraint \"c\" \"CREG\"\n- \"The @code{c} register.\")\n-\n-(define_register_constraint \"d\" \"DREG\"\n- \"The @code{d} register.\")\n-\n-(define_register_constraint \"S\" \"SIREG\"\n- \"The @code{si} register.\")\n-\n-(define_register_constraint \"D\" \"DIREG\"\n- \"The @code{di} register.\")\n-\n-(define_register_constraint \"A\" \"AD_REGS\"\n- \"The @code{a} and @code{d} registers, as a pair (for instructions\n-  that return half the result in one and half in the other).\")\n-\n-;; Floating-point register constraints.\n-(define_register_constraint \"f\"\n- \"TARGET_80387 || TARGET_FLOAT_RETURNS_IN_80387 ? FLOAT_REGS : NO_REGS\"\n- \"Any 80387 floating-point (stack) register.\")\n-\n-(define_register_constraint \"t\"\n- \"TARGET_80387 || TARGET_FLOAT_RETURNS_IN_80387 ? FP_TOP_REG : NO_REGS\"\n- \"Top of 80387 floating-point stack (@code{%st(0)}).\")\n-\n-(define_register_constraint \"u\"\n- \"TARGET_80387 || TARGET_FLOAT_RETURNS_IN_80387 ? FP_SECOND_REG : NO_REGS\"\n- \"Second from top of 80387 floating-point stack (@code{%st(1)}).\")\n-\n-;; Vector registers (also used for plain floating point nowadays).\n-(define_register_constraint \"y\" \"TARGET_MMX ? MMX_REGS : NO_REGS\"\n- \"Any MMX register.\")\n-\n-(define_register_constraint \"x\" \"TARGET_SSE ? SSE_REGS : NO_REGS\"\n- \"Any SSE register.\")\n-\n-(define_register_constraint \"Y\" \"TARGET_SSE2? SSE_REGS : NO_REGS\"\n- \"@internal Any SSE2 register.\")\n-\n-;; Integer constant constraints.\n-(define_constraint \"I\"\n-  \"Integer constant in the range 0 @dots{} 31, for 32-bit shifts.\"\n-  (and (match_code \"const_int\")\n-       (match_test \"ival >= 0 && ival <= 31\")))\n-\n-(define_constraint \"J\"\n-  \"Integer constant in the range 0 @dots{} 63, for 64-bit shifts.\"\n-  (and (match_code \"const_int\")\n-       (match_test \"ival >= 0 && ival <= 63\")))\n-\n-(define_constraint \"K\"\n-  \"Signed 8-bit integer constant.\"\n-  (and (match_code \"const_int\")\n-       (match_test \"ival >= -128 && ival <= 127\")))\n-\n-(define_constraint \"L\"\n-  \"@code{0xFF} or @code{0xFFFF}, for andsi as a zero-extending move.\"\n-  (and (match_code \"const_int\")\n-       (match_test \"ival == 0xFF || ival == 0xFFFF\")))\n-\n-(define_constraint \"M\"\n-  \"0, 1, 2, or 3 (shifts for the @code{lea} instruction).\"\n-  (and (match_code \"const_int\")\n-       (match_test \"ival >= 0 && ival <= 3\")))\n-\n-(define_constraint \"N\"\n-  \"Unsigned 8-bit integer constant (for @code{in} and @code{out} \n-   instructions).\"\n-  (and (match_code \"const_int\")\n-       (match_test \"ival >= 0 && ival <= 255\")))\n-\n-(define_constraint \"O\"\n-  \"@internal Integer constant in the range 0 @dots{} 127, for 128-bit shifts.\"\n-  (and (match_code \"const_int\")\n-       (match_test \"ival >= 0 && ival <= 127\")))\n-\n-;; Floating-point constant constraints.\n-;; We allow constants even if TARGET_80387 isn't set, because the\n-;; stack register converter may need to load 0.0 into the function\n-;; value register (top of stack).\n-(define_constraint \"G\"\n-  \"Standard 80387 floating point constant.\"\n-  (and (match_code \"const_double\")\n-       (match_test \"standard_80387_constant_p (op)\")))\n-\n-;; This can theoretically be any mode's CONST0_RTX.\n-(define_constraint \"C\"\n-  \"Standard SSE floating point constant.\"\n-  (match_test \"standard_sse_constant_p (op)\"))\n-\n-;; Constant-or-symbol-reference constraints.\n-\n-(define_constraint \"e\"\n-  \"32-bit signed integer constant, or a symbolic reference known\n-   to fit that range (for immediate operands in sign-extending x86-64\n-   instructions).\"\n-  (match_operand 0 \"x86_64_immediate_operand\"))\n-\n-(define_constraint \"Z\"\n-  \"32-bit unsigned integer constant, or a symbolic reference known\n-   to fit that range (for immediate operands in zero-extending x86-64\n-   instructions).\"\n-  (match_operand 0 \"x86_64_zext_immediate_operand\"))"}, {"sha": "e5f379c3812cbf1dcfc2a6c9d517281ee8a441de", "filename": "gcc/doc/md.texi", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/08b1e29a354d9a1119040558997249a62d1524d9/gcc%2Fdoc%2Fmd.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/08b1e29a354d9a1119040558997249a62d1524d9/gcc%2Fdoc%2Fmd.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fmd.texi?ref=08b1e29a354d9a1119040558997249a62d1524d9", "patch": "@@ -1882,7 +1882,7 @@ A 15-bit signed integer constant.\n A positive 16-bit constant.\n @end table\n \n-@item Intel 386---@file{config/i386/predicates.md}\n+@item Intel 386---@file{config/i386/constraints.md}\n @table @code\n @item R\n Legacy register---the eight integer registers available on all"}]}