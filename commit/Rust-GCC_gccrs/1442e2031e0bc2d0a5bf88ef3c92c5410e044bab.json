{"sha": "1442e2031e0bc2d0a5bf88ef3c92c5410e044bab", "node_id": "C_kwDOANBUbNoAKDE0NDJlMjAzMWUwYmMyZDBhNWJmODhlZjNjOTJjNTQxMGUwNDRiYWI", "commit": {"author": {"name": "liuhongt", "email": "hongtao.liu@intel.com", "date": "2022-10-18T08:58:52Z"}, "committer": {"name": "liuhongt", "email": "hongtao.liu@intel.com", "date": "2022-10-19T06:09:09Z"}, "message": "Canonicalize vec_perm index to make the first index come from the first vector.\n\nFix unexpected non-canon form from gimple vector selector.\n\ngcc/ChangeLog:\n\n\tPR target/107271\n\t* config/i386/i386-expand.cc (ix86_vec_perm_index_canon): New.\n\t(expand_vec_perm_shufps_shufps): Call\n\tix86_vec_perm_index_canon\n\ngcc/testsuite/ChangeLog:\n\n\t* gcc.target/i386/pr107271.c: New test.", "tree": {"sha": "caea9f6fc394c360fb2888ac78817ecc5b21202a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/caea9f6fc394c360fb2888ac78817ecc5b21202a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1442e2031e0bc2d0a5bf88ef3c92c5410e044bab", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1442e2031e0bc2d0a5bf88ef3c92c5410e044bab", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1442e2031e0bc2d0a5bf88ef3c92c5410e044bab", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1442e2031e0bc2d0a5bf88ef3c92c5410e044bab/comments", "author": {"login": "algebra84", "id": 22926165, "node_id": "MDQ6VXNlcjIyOTI2MTY1", "avatar_url": "https://avatars.githubusercontent.com/u/22926165?v=4", "gravatar_id": "", "url": "https://api.github.com/users/algebra84", "html_url": "https://github.com/algebra84", "followers_url": "https://api.github.com/users/algebra84/followers", "following_url": "https://api.github.com/users/algebra84/following{/other_user}", "gists_url": "https://api.github.com/users/algebra84/gists{/gist_id}", "starred_url": "https://api.github.com/users/algebra84/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/algebra84/subscriptions", "organizations_url": "https://api.github.com/users/algebra84/orgs", "repos_url": "https://api.github.com/users/algebra84/repos", "events_url": "https://api.github.com/users/algebra84/events{/privacy}", "received_events_url": "https://api.github.com/users/algebra84/received_events", "type": "User", "site_admin": false}, "committer": {"login": "algebra84", "id": 22926165, "node_id": "MDQ6VXNlcjIyOTI2MTY1", "avatar_url": "https://avatars.githubusercontent.com/u/22926165?v=4", "gravatar_id": "", "url": "https://api.github.com/users/algebra84", "html_url": "https://github.com/algebra84", "followers_url": "https://api.github.com/users/algebra84/followers", "following_url": "https://api.github.com/users/algebra84/following{/other_user}", "gists_url": "https://api.github.com/users/algebra84/gists{/gist_id}", "starred_url": "https://api.github.com/users/algebra84/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/algebra84/subscriptions", "organizations_url": "https://api.github.com/users/algebra84/orgs", "repos_url": "https://api.github.com/users/algebra84/repos", "events_url": "https://api.github.com/users/algebra84/events{/privacy}", "received_events_url": "https://api.github.com/users/algebra84/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "21de009f741923bc2dcfaa80877b3725e90ab96c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/21de009f741923bc2dcfaa80877b3725e90ab96c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/21de009f741923bc2dcfaa80877b3725e90ab96c"}], "stats": {"total": 33, "additions": 33, "deletions": 0}, "files": [{"sha": "70fd82b27d44125a7efdaed364d71abf18049cc5", "filename": "gcc/config/i386/i386-expand.cc", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1442e2031e0bc2d0a5bf88ef3c92c5410e044bab/gcc%2Fconfig%2Fi386%2Fi386-expand.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1442e2031e0bc2d0a5bf88ef3c92c5410e044bab/gcc%2Fconfig%2Fi386%2Fi386-expand.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386-expand.cc?ref=1442e2031e0bc2d0a5bf88ef3c92c5410e044bab", "patch": "@@ -19604,6 +19604,22 @@ expand_vec_perm_1 (struct expand_vec_perm_d *d)\n   return false;\n }\n \n+/* Canonicalize vec_perm index to make the first index\n+   always comes from the first vector.  */\n+static void\n+ix86_vec_perm_index_canon (struct expand_vec_perm_d *d)\n+{\n+  unsigned nelt = d->nelt;\n+  if (d->perm[0] < nelt)\n+    return;\n+\n+  for (unsigned i = 0; i != nelt; i++)\n+    d->perm[i] = (d->perm[i] + nelt) % (2 * nelt);\n+\n+  std::swap (d->op0, d->op1);\n+  return;\n+}\n+\n /* A subroutine of ix86_expand_vec_perm_const_1. Try to implement D\n    in terms of a pair of shufps+ shufps/pshufd instructions.  */\n static bool\n@@ -19621,6 +19637,7 @@ expand_vec_perm_shufps_shufps (struct expand_vec_perm_d *d)\n   if (d->testing_p)\n     return true;\n \n+  ix86_vec_perm_index_canon (d);\n   for (i = 0; i < 4; ++i)\n     count += d->perm[i] > 3 ? 1 : 0;\n "}, {"sha": "fe89c9a5bef5adb4d2bfece97fec3d08f1aa0a13", "filename": "gcc/testsuite/gcc.target/i386/pr107271.c", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1442e2031e0bc2d0a5bf88ef3c92c5410e044bab/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr107271.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1442e2031e0bc2d0a5bf88ef3c92c5410e044bab/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr107271.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr107271.c?ref=1442e2031e0bc2d0a5bf88ef3c92c5410e044bab", "patch": "@@ -0,0 +1,16 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O0\" } */\n+\n+typedef int __attribute__((__vector_size__ (16))) V;\n+\n+static inline __attribute__((__always_inline__)) V\n+bar (V v128u32_0)\n+{\n+  return __builtin_shuffle ((V){}, v128u32_0, v128u32_0);\n+}\n+\n+V\n+foo (void)\n+{\n+  return bar ((V){7, 4, 4});\n+}"}]}