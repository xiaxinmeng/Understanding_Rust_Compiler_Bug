{"sha": "8e24054ba4b47f9a677d58f92c504ab744a752b8", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGUyNDA1NGJhNGI0N2Y5YTY3N2Q1OGY5MmM1MDRhYjc0NGE3NTJiOA==", "commit": {"author": {"name": "Mikael Morin", "email": "mikael@gcc.gnu.org", "date": "2011-11-03T23:56:20Z"}, "committer": {"name": "Mikael Morin", "email": "mikael@gcc.gnu.org", "date": "2011-11-03T23:56:20Z"}, "message": "trans-array.c (gfc_trans_preloop_setup): New pointers to outer dimension's ss and loop.\n\n\t* trans-array.c (gfc_trans_preloop_setup): New pointers to outer\n\tdimension's ss and loop. Use them.\n\nFrom-SVN: r180903", "tree": {"sha": "ce26542b88aff08fddf03d044b57ab889a286918", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ce26542b88aff08fddf03d044b57ab889a286918"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8e24054ba4b47f9a677d58f92c504ab744a752b8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8e24054ba4b47f9a677d58f92c504ab744a752b8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8e24054ba4b47f9a677d58f92c504ab744a752b8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8e24054ba4b47f9a677d58f92c504ab744a752b8/comments", "author": null, "committer": null, "parents": [{"sha": "d769d0df7374f5f912beb1bbbe77b1d1ac62821e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d769d0df7374f5f912beb1bbbe77b1d1ac62821e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d769d0df7374f5f912beb1bbbe77b1d1ac62821e"}], "stats": {"total": 39, "additions": 32, "deletions": 7}, "files": [{"sha": "f8a83669c98ee40a3cb7e7d0cb17e5e8885f07f2", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8e24054ba4b47f9a677d58f92c504ab744a752b8/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8e24054ba4b47f9a677d58f92c504ab744a752b8/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=8e24054ba4b47f9a677d58f92c504ab744a752b8", "patch": "@@ -1,3 +1,8 @@\n+2011-11-03  Mikael Morin  <mikael@gcc.gnu.org>\n+\n+\t* trans-array.c (gfc_trans_preloop_setup): New pointers to outer\n+\tdimension's ss and loop. Use them.\n+\n 2011-11-03  Mikael Morin  <mikael@gcc.gnu.org>\n \n \t* trans-array.c (outermost_loop): New function."}, {"sha": "3c0c11038079cfcce3b47ce68f223869b30d93e4", "filename": "gcc/fortran/trans-array.c", "status": "modified", "additions": 27, "deletions": 7, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8e24054ba4b47f9a677d58f92c504ab744a752b8/gcc%2Ffortran%2Ftrans-array.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8e24054ba4b47f9a677d58f92c504ab744a752b8/gcc%2Ffortran%2Ftrans-array.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-array.c?ref=8e24054ba4b47f9a677d58f92c504ab744a752b8", "patch": "@@ -3116,7 +3116,8 @@ gfc_trans_preloop_setup (gfc_loopinfo * loop, int dim, int flag,\n   gfc_ss_info *ss_info;\n   gfc_array_info *info;\n   gfc_ss_type ss_type;\n-  gfc_ss *ss;\n+  gfc_ss *ss, *pss;\n+  gfc_loopinfo *ploop;\n   gfc_array_ref *ar;\n   int i;\n \n@@ -3146,18 +3147,37 @@ gfc_trans_preloop_setup (gfc_loopinfo * loop, int dim, int flag,\n       else\n \tar = NULL;\n \n+      if (dim == loop->dimen - 1 && loop->parent != NULL)\n+\t{\n+\t  /* If we are in the outermost dimension of this loop, the previous\n+\t     dimension shall be in the parent loop.  */\n+\t  gcc_assert (ss->parent != NULL);\n+\n+\t  pss = ss->parent;\n+\t  ploop = loop->parent;\n+\n+\t  /* ss and ss->parent are about the same array.  */\n+\t  gcc_assert (ss_info == pss->info);\n+\t}\n+      else\n+\t{\n+\t  ploop = loop;\n+\t  pss = ss;\n+\t}\n+\n       if (dim == loop->dimen - 1)\n \ti = 0;\n       else\n \ti = dim + 1;\n \n       /* For the time being, there is no loop reordering.  */\n-      gcc_assert (i == loop->order[i]);\n-      i = loop->order[i];\n+      gcc_assert (i == ploop->order[i]);\n+      i = ploop->order[i];\n \n-      if (dim == loop->dimen - 1)\n+      if (dim == loop->dimen - 1 && loop->parent == NULL)\n \t{\n-\t  stride = gfc_conv_array_stride (info->descriptor, ss->dim[i]);\n+\t  stride = gfc_conv_array_stride (info->descriptor,\n+\t\t\t\t\t  innermost_ss (ss)->dim[i]);\n \n \t  /* Calculate the stride of the innermost loop.  Hopefully this will\n \t     allow the backend optimizers to do their stuff more effectively.\n@@ -3180,10 +3200,10 @@ gfc_trans_preloop_setup (gfc_loopinfo * loop, int dim, int flag,\n \t}\n       else\n \t/* Add the offset for the previous loop dimension.  */\n-\tadd_array_offset (pblock, loop, ss, ar, ss->dim[i], i);\n+\tadd_array_offset (pblock, ploop, ss, ar, pss->dim[i], i);\n \n       /* Remember this offset for the second loop.  */\n-      if (dim == loop->temp_dim - 1)\n+      if (dim == loop->temp_dim - 1 && loop->parent == NULL)\n         info->saved_offset = info->offset;\n     }\n }"}]}