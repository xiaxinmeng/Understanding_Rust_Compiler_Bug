{"sha": "ee6713e782d582a0fa150ed53842df0e258c028e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWU2NzEzZTc4MmQ1ODJhMGZhMTUwZWQ1Mzg0MmRmMGUyNThjMDI4ZQ==", "commit": {"author": {"name": "Tom Tromey", "email": "tromey@cygnus.com", "date": "2000-02-02T01:55:03Z"}, "committer": {"name": "Tom Tromey", "email": "tromey@gcc.gnu.org", "date": "2000-02-02T01:55:03Z"}, "message": "java-interp.h (_Jv_JNI_conversion_call): Declare.\n\n\t* include/java-interp.h (_Jv_JNI_conversion_call): Declare.\n\t* resolve.cc (ncode): Use _Jv_JNI_conversion_call when\n\tconstructing the closure if the function is native.\n\t* jni.cc (_Jv_JNI_conversion_call): Now returns `void'.  No longer\n\ta template function, #if'd out, or static.\n\tInclude <java-interp.h>.\n\nFrom-SVN: r31746", "tree": {"sha": "8cea920cda9b81eaa6f6464de2909e0016f6ec15", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8cea920cda9b81eaa6f6464de2909e0016f6ec15"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ee6713e782d582a0fa150ed53842df0e258c028e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ee6713e782d582a0fa150ed53842df0e258c028e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ee6713e782d582a0fa150ed53842df0e258c028e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ee6713e782d582a0fa150ed53842df0e258c028e/comments", "author": null, "committer": null, "parents": [{"sha": "8928191114d5e13d4649a79dea5ca0328285fb8c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8928191114d5e13d4649a79dea5ca0328285fb8c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8928191114d5e13d4649a79dea5ca0328285fb8c"}], "stats": {"total": 50, "additions": 37, "deletions": 13}, "files": [{"sha": "2723767a0ce1a406f856af69c507294144c8055d", "filename": "libjava/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee6713e782d582a0fa150ed53842df0e258c028e/libjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee6713e782d582a0fa150ed53842df0e258c028e/libjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FChangeLog?ref=ee6713e782d582a0fa150ed53842df0e258c028e", "patch": "@@ -1,5 +1,12 @@\n 2000-02-01  Tom Tromey  <tromey@cygnus.com>\n \n+\t* include/java-interp.h (_Jv_JNI_conversion_call): Declare.\n+\t* resolve.cc (ncode): Use _Jv_JNI_conversion_call when\n+\tconstructing the closure if the function is native.\n+\t* jni.cc (_Jv_JNI_conversion_call): Now returns `void'.  No longer\n+\ta template function, #if'd out, or static.\n+\tInclude <java-interp.h>.\n+\n \t* include/jni.h (class _Jv_JNIEnv): Corrected calls using `...'.\n \n \t* include/jni.h (class _Jv_JNIEnv): Added all C++ inline methods."}, {"sha": "0feab21762c61373aa89146cdd31f986aa902d31", "filename": "libjava/include/java-interp.h", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee6713e782d582a0fa150ed53842df0e258c028e/libjava%2Finclude%2Fjava-interp.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee6713e782d582a0fa150ed53842df0e258c028e/libjava%2Finclude%2Fjava-interp.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Finclude%2Fjava-interp.h?ref=ee6713e782d582a0fa150ed53842df0e258c028e", "patch": "@@ -1,6 +1,6 @@\n // java-interp.h - Header file for the bytecode interpreter.  -*- c++ -*-\n \n-/* Copyright (C) 1999  Red Hat, Inc.\n+/* Copyright (C) 1999, 2000  Red Hat, Inc.\n \n    This file is part of libgcj.\n \n@@ -121,6 +121,9 @@ class _Jv_InterpMethod {\n   friend class gnu::gcj::runtime::MethodInvocation;\n \n   friend void _Jv_PrepareClass(jclass);\n+\n+  // This function is used when making a JNI call from the interpreter.\n+  friend void _Jv_JNI_conversion_call (ffi_cif *, void *, ffi_raw *, void *);\n };\n \n class _Jv_InterpMethodInvocation {"}, {"sha": "ccf552aaf192d2396a9c3e17a06d1b9343944017", "filename": "libjava/include/jvm.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee6713e782d582a0fa150ed53842df0e258c028e/libjava%2Finclude%2Fjvm.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee6713e782d582a0fa150ed53842df0e258c028e/libjava%2Finclude%2Fjvm.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Finclude%2Fjvm.h?ref=ee6713e782d582a0fa150ed53842df0e258c028e", "patch": "@@ -204,5 +204,4 @@ extern void _Jv_ThisExecutable (const char *);\n /* Initialize JNI.  */\n extern void _Jv_JNI_Init (void);\n \n-\n #endif /* __JAVA_JVM_H__ */"}, {"sha": "cb7226150c13495e35931c72016111715c416eef", "filename": "libjava/jni.cc", "status": "modified", "additions": 19, "deletions": 10, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee6713e782d582a0fa150ed53842df0e258c028e/libjava%2Fjni.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee6713e782d582a0fa150ed53842df0e258c028e/libjava%2Fjni.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjni.cc?ref=ee6713e782d582a0fa150ed53842df0e258c028e", "patch": "@@ -45,6 +45,8 @@ details.  */\n #include <gcj/method.h>\n #include <gcj/field.h>\n \n+#include <java-interp.h>\n+\n #define ClassClass _CL_Q34java4lang5Class\n extern java::lang::Class ClassClass;\n #define ObjectClass _CL_Q34java4lang6Object\n@@ -1204,19 +1206,22 @@ _Jv_JNI_FromReflectedMethod (JNIEnv *, jobject method)\n \n // This function is the stub which is used to turn an ordinary (CNI)\n // method call into a JNI call.\n-#if 0\n-template<typename T>\n-static T\n-_Jv_JNI_conversion_call (fixme)\n+void\n+_Jv_JNI_conversion_call (ffi_cif *cif,\n+\t\t\t void *ret,\n+\t\t\t ffi_raw *args,\n+\t\t\t void *__this)\n {\n+  _Jv_InterpMethod* _this = (_Jv_InterpMethod*)__this;\n+\n   JNIEnv env;\n   _Jv_JNI_LocalFrame *frame\n     = (_Jv_JNI_LocalFrame *) alloca (sizeof (_Jv_JNI_LocalFrame)\n \t\t\t\t     + FRAME_SIZE * sizeof (jobject));\n \n   env.p = &_Jv_JNIFunctions;\n   env.ex = NULL;\n-  env.klass = FIXME;\n+  env.klass = _this->defining_class;\n   env.locals = frame;\n \n   frame->marker = true;\n@@ -1225,20 +1230,24 @@ _Jv_JNI_conversion_call (fixme)\n   for (int i = 0; i < frame->size; ++i)\n     frame->vec[i] = NULL;\n \n-  T result = FIXME_ffi_call (args);\n+  // FIXME: we should mark every reference parameter as a local.  For\n+  // now we assume a conservative GC, and we assume that the\n+  // references are on the stack somewhere.\n+\n+  ffi_raw_call (cif,\n+\t\tNULL, // FIXME: function pointer.\n+\t\tret,\n+\t\targs);\n \n   do\n     {\n-      _Jv_JNI_PopLocalFrame (&env, result);\n+      _Jv_JNI_PopLocalFrame (&env, NULL);\n     }\n   while (env.locals != frame);\n \n   if (env.ex)\n     JvThrow (env.ex);\n-\n-  return T;\n }\n-#endif\n \n \f\n "}, {"sha": "0bf6f8c580edae9a27a44d730b26d9ca3bad1698", "filename": "libjava/resolve.cc", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee6713e782d582a0fa150ed53842df0e258c028e/libjava%2Fresolve.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee6713e782d582a0fa150ed53842df0e258c028e/libjava%2Fresolve.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fresolve.cc?ref=ee6713e782d582a0fa150ed53842df0e258c028e", "patch": "@@ -1022,7 +1022,13 @@ _Jv_InterpMethod::ncode ()\n \n   args_raw_size = ffi_raw_size (&closure->cif);\n \n-  if ((self->accflags & Modifier::SYNCHRONIZED) != 0)\n+  if ((self->accflags & Modifier::NATIVE) != 0)\n+    {\n+      // FIXME: for now we assume that all native methods for\n+      // interpreted code use JNI.\n+      fun = (ffi_closure_fun) &_Jv_JNI_conversion_call;\n+    }\n+  else if ((self->accflags & Modifier::SYNCHRONIZED) != 0)\n     {\n       if (staticp)\n \tfun = (ffi_closure_fun)&_Jv_InterpMethod::run_synch_class;"}]}