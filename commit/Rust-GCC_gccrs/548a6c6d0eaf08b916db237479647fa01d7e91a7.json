{"sha": "548a6c6d0eaf08b916db237479647fa01d7e91a7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTQ4YTZjNmQwZWFmMDhiOTE2ZGIyMzc0Nzk2NDdmYTAxZDdlOTFhNw==", "commit": {"author": {"name": "Diego Novillo", "email": "dnovillo@redhat.com", "date": "2006-07-18T17:27:57Z"}, "committer": {"name": "Diego Novillo", "email": "dnovillo@gcc.gnu.org", "date": "2006-07-18T17:27:57Z"}, "message": "re PR tree-optimization/28410 (Wrong aliasing with global var grouping during call clobbering)\n\n\n\tPR 28410\n\t* tree-ssa-operands.c (access_can_touch_variable): Update\n\tcomment.\n\tReturn true if ALIAS is .GLOBAL_VAR.\n\ntestsuite/ChangeLog\n\n\tPR 28410\n\t* gcc.dg/tree-ssa/pr28410.c: New test.\n\nFrom-SVN: r115564", "tree": {"sha": "679bafddf7ab1d19e5ae8da990d4b134067ac67a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/679bafddf7ab1d19e5ae8da990d4b134067ac67a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/548a6c6d0eaf08b916db237479647fa01d7e91a7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/548a6c6d0eaf08b916db237479647fa01d7e91a7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/548a6c6d0eaf08b916db237479647fa01d7e91a7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/548a6c6d0eaf08b916db237479647fa01d7e91a7/comments", "author": null, "committer": null, "parents": [{"sha": "492b73bda96d446cb62113559f1f705c1da365f3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/492b73bda96d446cb62113559f1f705c1da365f3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/492b73bda96d446cb62113559f1f705c1da365f3"}], "stats": {"total": 48, "additions": 45, "deletions": 3}, "files": [{"sha": "435f32508eb8dee89c6948cbd9fe2d30fb27d3f4", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/548a6c6d0eaf08b916db237479647fa01d7e91a7/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/548a6c6d0eaf08b916db237479647fa01d7e91a7/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=548a6c6d0eaf08b916db237479647fa01d7e91a7", "patch": "@@ -1,3 +1,10 @@\n+2006-07-18  Diego Novillo  <dnovillo@redhat.com>\n+\n+\tPR 28410\n+\t* tree-ssa-operands.c (access_can_touch_variable): Update\n+\tcomment.\n+\tReturn true if ALIAS is .GLOBAL_VAR.\n+\n 2006-07-18  David Daney  <ddaney@avtrex.com>\n \n \t* gcc.c (display_help): Fix typo in help text."}, {"sha": "505a2adcaf4454ab2a0d18877c482277093d6c50", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/548a6c6d0eaf08b916db237479647fa01d7e91a7/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/548a6c6d0eaf08b916db237479647fa01d7e91a7/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=548a6c6d0eaf08b916db237479647fa01d7e91a7", "patch": "@@ -1,3 +1,8 @@\n+2006-07-18  Diego Novillo  <dnovillo@redhat.com>\n+\n+\tPR 28410\n+\t* gcc.dg/tree-ssa/pr28410.c: New test.\n+\n 2006-07-18  Lee Millward  <lee.millward@gmail.com>\n \n \tPR c++/28258"}, {"sha": "12f0633020e8186cef21735db103e58612db2458", "filename": "gcc/testsuite/gcc.dg/tree-ssa/pr28410.c", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/548a6c6d0eaf08b916db237479647fa01d7e91a7/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr28410.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/548a6c6d0eaf08b916db237479647fa01d7e91a7/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr28410.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr28410.c?ref=548a6c6d0eaf08b916db237479647fa01d7e91a7", "patch": "@@ -0,0 +1,26 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 --param global-var-threshold=1\" } */\n+\n+extern void abort(void);\n+struct Bar { int p; };\n+struct Foo { struct Bar *p; };\n+struct Bar p0 = { 0 };\n+struct Bar p1 = { 1 };\n+void bar(struct Foo *f)\n+{\n+  f->p = &p0;\n+}\n+int foo(struct Foo *f)\n+{\n+  f->p->p = 1;\n+  bar(f);\n+  return f->p->p;\n+}\n+int main()\n+{\n+  struct Foo f;\n+  f.p = &p1;\n+  if (foo(&f) != 0)\n+    abort ();\n+  return 0;\n+}"}, {"sha": "05637814f13151162b784d5409cfc80b9af895c3", "filename": "gcc/tree-ssa-operands.c", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/548a6c6d0eaf08b916db237479647fa01d7e91a7/gcc%2Ftree-ssa-operands.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/548a6c6d0eaf08b916db237479647fa01d7e91a7/gcc%2Ftree-ssa-operands.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-operands.c?ref=548a6c6d0eaf08b916db237479647fa01d7e91a7", "patch": "@@ -1037,9 +1037,7 @@ append_v_must_def (tree var)\n /* REF is a tree that contains the entire pointer dereference\n    expression, if available, or NULL otherwise.  ALIAS is the variable\n    we are asking if REF can access.  OFFSET and SIZE come from the\n-   memory access expression that generated this virtual operand.\n-   FOR_CLOBBER is true is this is adding a virtual operand for a call\n-   clobber.  */\n+   memory access expression that generated this virtual operand.  */\n \n static bool\n access_can_touch_variable (tree ref, tree alias, HOST_WIDE_INT offset,\n@@ -1049,6 +1047,12 @@ access_can_touch_variable (tree ref, tree alias, HOST_WIDE_INT offset,\n   unsigned HOST_WIDE_INT uoffset = (unsigned HOST_WIDE_INT) offset;\n   tree base = ref ? get_base_address (ref) : NULL;\n \n+  /* If ALIAS is .GLOBAL_VAR then the memory reference REF must be\n+     using a call-clobbered memory tag.  By definition, call-clobbered\n+     memory tags can always touch .GLOBAL_VAR.  */\n+  if (alias == global_var)\n+    return true;\n+\n   /* If ALIAS is an SFT, it can't be touched if the offset     \n      and size of the access is not overlapping with the SFT offset and\n      size.  This is only true if we are accessing through a pointer"}]}