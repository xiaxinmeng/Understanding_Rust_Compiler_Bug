{"sha": "de1ee900b045061cdc590fbbf47b46b64d296f04", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZGUxZWU5MDBiMDQ1MDYxY2RjNTkwZmJiZjQ3YjQ2YjY0ZDI5NmYwNA==", "commit": {"author": {"name": "Martin Liska", "email": "mliska@suse.cz", "date": "2019-06-10T07:42:43Z"}, "committer": {"name": "Martin Liska", "email": "marxin@gcc.gnu.org", "date": "2019-06-10T07:42:43Z"}, "message": "Add warn_unused_result attribute for memory-related functions in libiberty.\n\n2019-06-10  Martin Liska  <mliska@suse.cz>\n\n\t* ansidecl.h (ATTRIBUTE_WARN_UNUSED_RESULT): New macro.\n\t* libiberty.h (xmalloc): Use it.\n\t(xrealloc): Likewise.\n\t(xcalloc): Likewise.\n\t(xstrdup): Likewise.\n\t(xstrndup): Likewise.\n\t(xmemdup): Likewise.\n\nFrom-SVN: r272110", "tree": {"sha": "e8d8028182dfcf97662fa924b29abdf06b8a3c6a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e8d8028182dfcf97662fa924b29abdf06b8a3c6a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/de1ee900b045061cdc590fbbf47b46b64d296f04", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/de1ee900b045061cdc590fbbf47b46b64d296f04", "html_url": "https://github.com/Rust-GCC/gccrs/commit/de1ee900b045061cdc590fbbf47b46b64d296f04", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/de1ee900b045061cdc590fbbf47b46b64d296f04/comments", "author": {"login": "marxin", "id": 2658545, "node_id": "MDQ6VXNlcjI2NTg1NDU=", "avatar_url": "https://avatars.githubusercontent.com/u/2658545?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marxin", "html_url": "https://github.com/marxin", "followers_url": "https://api.github.com/users/marxin/followers", "following_url": "https://api.github.com/users/marxin/following{/other_user}", "gists_url": "https://api.github.com/users/marxin/gists{/gist_id}", "starred_url": "https://api.github.com/users/marxin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marxin/subscriptions", "organizations_url": "https://api.github.com/users/marxin/orgs", "repos_url": "https://api.github.com/users/marxin/repos", "events_url": "https://api.github.com/users/marxin/events{/privacy}", "received_events_url": "https://api.github.com/users/marxin/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "3bb0dcb6c02661bed2f8dd00052145fde3bbdecc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3bb0dcb6c02661bed2f8dd00052145fde3bbdecc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3bb0dcb6c02661bed2f8dd00052145fde3bbdecc"}], "stats": {"total": 31, "additions": 25, "deletions": 6}, "files": [{"sha": "28f4664aa557d1d8ad824e57f88dd460ce44e33b", "filename": "include/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de1ee900b045061cdc590fbbf47b46b64d296f04/include%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de1ee900b045061cdc590fbbf47b46b64d296f04/include%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/include%2FChangeLog?ref=de1ee900b045061cdc590fbbf47b46b64d296f04", "patch": "@@ -1,3 +1,13 @@\n+2019-06-10  Martin Liska  <mliska@suse.cz>\n+\n+\t* ansidecl.h (ATTRIBUTE_WARN_UNUSED_RESULT): New macro.\n+\t* libiberty.h (xmalloc): Use it.\n+\t(xrealloc): Likewise.\n+\t(xcalloc): Likewise.\n+\t(xstrdup): Likewise.\n+\t(xstrndup): Likewise.\n+\t(xmemdup): Likewise.\n+\n 2019-06-10  Martin Liska  <mliska@suse.cz>\n \n \t* ansidecl.h:"}, {"sha": "445c8c3fb583f82e6fb540e918a8fe21c5be30b8", "filename": "include/ansidecl.h", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de1ee900b045061cdc590fbbf47b46b64d296f04/include%2Fansidecl.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de1ee900b045061cdc590fbbf47b46b64d296f04/include%2Fansidecl.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/include%2Fansidecl.h?ref=de1ee900b045061cdc590fbbf47b46b64d296f04", "patch": "@@ -317,6 +317,15 @@ So instead we use the macro below and test it against specific values.  */\n #endif\n #endif\n \n+/* Attribute `warn_unused_result' was valid as of gcc 3.3.  */\n+#ifndef ATTRIBUTE_WARN_UNUSED_RESULT\n+# if GCC_VERSION >= 3003\n+#  define ATTRIBUTE_WARN_UNUSED_RESULT __attribute__ ((warn_unused_result))\n+# else\n+#  define ATTRIBUTE_WARN_UNUSED_RESULT\n+# endif\n+#endif\n+\n /* We use __extension__ in some places to suppress -pedantic warnings\n    about GCC extensions.  This feature didn't work properly before\n    gcc 2.8.  */"}, {"sha": "635519e088ae750f5363d667d80947be9997c528", "filename": "include/libiberty.h", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de1ee900b045061cdc590fbbf47b46b64d296f04/include%2Flibiberty.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de1ee900b045061cdc590fbbf47b46b64d296f04/include%2Flibiberty.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/include%2Flibiberty.h?ref=de1ee900b045061cdc590fbbf47b46b64d296f04", "patch": "@@ -310,30 +310,30 @@ extern void xmalloc_failed (size_t) ATTRIBUTE_NORETURN;\n    message to stderr (using the name set by xmalloc_set_program_name,\n    if any) and then call xexit.  */\n \n-extern void *xmalloc (size_t) ATTRIBUTE_MALLOC ATTRIBUTE_RETURNS_NONNULL ATTRIBUTE_RESULT_SIZE_1;\n+extern void *xmalloc (size_t) ATTRIBUTE_MALLOC ATTRIBUTE_RETURNS_NONNULL ATTRIBUTE_RESULT_SIZE_1 ATTRIBUTE_WARN_UNUSED_RESULT;\n \n /* Reallocate memory without fail.  This works like xmalloc.  Note,\n    realloc type functions are not suitable for attribute malloc since\n    they may return the same address across multiple calls. */\n \n-extern void *xrealloc (void *, size_t) ATTRIBUTE_RETURNS_NONNULL ATTRIBUTE_RESULT_SIZE_2;\n+extern void *xrealloc (void *, size_t) ATTRIBUTE_RETURNS_NONNULL ATTRIBUTE_RESULT_SIZE_2 ATTRIBUTE_WARN_UNUSED_RESULT;\n \n /* Allocate memory without fail and set it to zero.  This works like\n    xmalloc.  */\n \n-extern void *xcalloc (size_t, size_t) ATTRIBUTE_MALLOC ATTRIBUTE_RETURNS_NONNULL ATTRIBUTE_RESULT_SIZE_1_2;\n+extern void *xcalloc (size_t, size_t) ATTRIBUTE_MALLOC ATTRIBUTE_RETURNS_NONNULL ATTRIBUTE_RESULT_SIZE_1_2 ATTRIBUTE_WARN_UNUSED_RESULT;\n \n /* Copy a string into a memory buffer without fail.  */\n \n-extern char *xstrdup (const char *) ATTRIBUTE_MALLOC ATTRIBUTE_RETURNS_NONNULL;\n+extern char *xstrdup (const char *) ATTRIBUTE_MALLOC ATTRIBUTE_RETURNS_NONNULL ATTRIBUTE_WARN_UNUSED_RESULT;\n \n /* Copy at most N characters from string into a buffer without fail.  */\n \n-extern char *xstrndup (const char *, size_t) ATTRIBUTE_MALLOC ATTRIBUTE_RETURNS_NONNULL;\n+extern char *xstrndup (const char *, size_t) ATTRIBUTE_MALLOC ATTRIBUTE_RETURNS_NONNULL ATTRIBUTE_WARN_UNUSED_RESULT;\n \n /* Copy an existing memory buffer to a new memory buffer without fail.  */\n \n-extern void *xmemdup (const void *, size_t, size_t) ATTRIBUTE_MALLOC ATTRIBUTE_RETURNS_NONNULL;\n+extern void *xmemdup (const void *, size_t, size_t) ATTRIBUTE_MALLOC ATTRIBUTE_RETURNS_NONNULL ATTRIBUTE_WARN_UNUSED_RESULT;\n \n /* Physical memory routines.  Return values are in BYTES.  */\n extern double physmem_total (void);"}]}