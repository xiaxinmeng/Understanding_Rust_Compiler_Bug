{"sha": "04affb328c6a7e29427287c5192da38864f0dbca", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDRhZmZiMzI4YzZhN2UyOTQyNzI4N2M1MTkyZGEzODg2NGYwZGJjYQ==", "commit": {"author": {"name": "Aldy Hernandez", "email": "aldyh@redhat.com", "date": "2021-05-26T06:53:07Z"}, "committer": {"name": "Aldy Hernandez", "email": "aldyh@redhat.com", "date": "2021-06-03T15:47:54Z"}, "message": "Replace uses of determine_value_range with range_of_expr.\n\nThe expression evaluator changes to the range_query API provide\neverything determine_value_range does.  This patch replaces all uses\nwith calls into the range_query API.\n\ngcc/ChangeLog:\n\n\t* calls.c (get_size_range): Use range_of_expr instead of\n\tdetermine_value_range.\n\t* tree-affine.c (expr_to_aff_combination): Same.\n\t* tree-data-ref.c (split_constant_offset): Same.\n\t* tree-vrp.c (determine_value_range_1): Remove.\n\t(determine_value_range): Remove.\n\t* tree-vrp.h (determine_value_range): Remove.", "tree": {"sha": "7fc6ce9c8a100f5e9ab6ae297e52d3ebbfcf93c6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7fc6ce9c8a100f5e9ab6ae297e52d3ebbfcf93c6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/04affb328c6a7e29427287c5192da38864f0dbca", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/04affb328c6a7e29427287c5192da38864f0dbca", "html_url": "https://github.com/Rust-GCC/gccrs/commit/04affb328c6a7e29427287c5192da38864f0dbca", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/04affb328c6a7e29427287c5192da38864f0dbca/comments", "author": {"login": "aldyh", "id": 12937877, "node_id": "MDQ6VXNlcjEyOTM3ODc3", "avatar_url": "https://avatars.githubusercontent.com/u/12937877?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aldyh", "html_url": "https://github.com/aldyh", "followers_url": "https://api.github.com/users/aldyh/followers", "following_url": "https://api.github.com/users/aldyh/following{/other_user}", "gists_url": "https://api.github.com/users/aldyh/gists{/gist_id}", "starred_url": "https://api.github.com/users/aldyh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aldyh/subscriptions", "organizations_url": "https://api.github.com/users/aldyh/orgs", "repos_url": "https://api.github.com/users/aldyh/repos", "events_url": "https://api.github.com/users/aldyh/events{/privacy}", "received_events_url": "https://api.github.com/users/aldyh/received_events", "type": "User", "site_admin": false}, "committer": {"login": "aldyh", "id": 12937877, "node_id": "MDQ6VXNlcjEyOTM3ODc3", "avatar_url": "https://avatars.githubusercontent.com/u/12937877?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aldyh", "html_url": "https://github.com/aldyh", "followers_url": "https://api.github.com/users/aldyh/followers", "following_url": "https://api.github.com/users/aldyh/following{/other_user}", "gists_url": "https://api.github.com/users/aldyh/gists{/gist_id}", "starred_url": "https://api.github.com/users/aldyh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aldyh/subscriptions", "organizations_url": "https://api.github.com/users/aldyh/orgs", "repos_url": "https://api.github.com/users/aldyh/repos", "events_url": "https://api.github.com/users/aldyh/events{/privacy}", "received_events_url": "https://api.github.com/users/aldyh/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "caa60c12715dd9b0cbb550a45e5878214a10a2fe", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/caa60c12715dd9b0cbb550a45e5878214a10a2fe", "html_url": "https://github.com/Rust-GCC/gccrs/commit/caa60c12715dd9b0cbb550a45e5878214a10a2fe"}], "stats": {"total": 97, "additions": 23, "deletions": 74}, "files": [{"sha": "a7c78ed9c16a6622cc9682b2c3352ed01902ea73", "filename": "gcc/calls.c", "status": "modified", "additions": 11, "deletions": 10, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/04affb328c6a7e29427287c5192da38864f0dbca/gcc%2Fcalls.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/04affb328c6a7e29427287c5192da38864f0dbca/gcc%2Fcalls.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcalls.c?ref=04affb328c6a7e29427287c5192da38864f0dbca", "patch": "@@ -1276,19 +1276,20 @@ get_size_range (range_query *query, tree exp, gimple *stmt, tree range[2],\n   wide_int min, max;\n   enum value_range_kind range_type;\n \n+  if (!query)\n+    query = get_global_range_query ();\n+\n   if (integral)\n     {\n       value_range vr;\n-      if (query && query->range_of_expr (vr, exp, stmt))\n-\t{\n-\t  if (vr.undefined_p ())\n-\t    vr.set_varying (TREE_TYPE (exp));\n-\t  range_type = vr.kind ();\n-\t  min = wi::to_wide (vr.min ());\n-\t  max = wi::to_wide (vr.max ());\n-\t}\n-      else\n-\trange_type = determine_value_range (exp, &min, &max);\n+\n+      query->range_of_expr (vr, exp, stmt);\n+\n+      if (vr.undefined_p ())\n+\tvr.set_varying (TREE_TYPE (exp));\n+      range_type = vr.kind ();\n+      min = wi::to_wide (vr.min ());\n+      max = wi::to_wide (vr.max ());\n     }\n   else\n     range_type = VR_VARYING;"}, {"sha": "a65719def23e7034766d30010e5f92465db16acc", "filename": "gcc/tree-affine.c", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/04affb328c6a7e29427287c5192da38864f0dbca/gcc%2Ftree-affine.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/04affb328c6a7e29427287c5192da38864f0dbca/gcc%2Ftree-affine.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-affine.c?ref=04affb328c6a7e29427287c5192da38864f0dbca", "patch": "@@ -31,6 +31,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"gimplify.h\"\n #include \"dumpfile.h\"\n #include \"cfgexpand.h\"\n+#include \"value-query.h\"\n \n /* Extends CST as appropriate for the affine combinations COMB.  */\n \n@@ -345,11 +346,15 @@ expr_to_aff_combination (aff_tree *comb, tree_code code, tree type,\n \t       for below case:\n \t\t (T1)(X *+- CST) -> (T1)X *+- (T1)CST\n \t       if X *+- CST doesn't overflow by range information.  */\n+\t    value_range vr;\n \t    if (TYPE_UNSIGNED (itype)\n \t\t&& TYPE_OVERFLOW_WRAPS (itype)\n \t\t&& TREE_CODE (op1) == INTEGER_CST\n-\t\t&& determine_value_range (op0, &minv, &maxv) == VR_RANGE)\n+\t\t&& get_range_query (cfun)->range_of_expr (vr, op0)\n+\t\t&& vr.kind () == VR_RANGE)\n \t      {\n+\t\twide_int minv = vr.lower_bound ();\n+\t\twide_int maxv = vr.upper_bound ();\n \t\twi::overflow_type overflow = wi::OVF_NONE;\n \t\tsignop sign = UNSIGNED;\n \t\tif (icode == PLUS_EXPR)"}, {"sha": "b1f646848404c46a28f4a614fb03c6a075db26e4", "filename": "gcc/tree-data-ref.c", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/04affb328c6a7e29427287c5192da38864f0dbca/gcc%2Ftree-data-ref.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/04affb328c6a7e29427287c5192da38864f0dbca/gcc%2Ftree-data-ref.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-data-ref.c?ref=04affb328c6a7e29427287c5192da38864f0dbca", "patch": "@@ -1069,12 +1069,12 @@ split_constant_offset (tree exp, tree *var, tree *off, value_range *exp_range,\n   if (INTEGRAL_TYPE_P (type))\n     *var = fold_convert (sizetype, *var);\n   *off = ssize_int (0);\n-  if (exp_range && code != SSA_NAME)\n-    {\n-      wide_int var_min, var_max;\n-      if (determine_value_range (exp, &var_min, &var_max) == VR_RANGE)\n-\t*exp_range = value_range (type, var_min, var_max);\n-    }\n+\n+  value_range r;\n+  if (exp_range && code != SSA_NAME\n+      && get_range_query (cfun)->range_of_expr (r, exp)\n+      && !r.undefined_p ())\n+    *exp_range = r;\n }\n \n /* Expresses EXP as VAR + OFF, where OFF is a constant.  VAR has the same"}, {"sha": "b9c0e65bd989379428ca5d0fdf1a30f11c7a1ca3", "filename": "gcc/tree-vrp.c", "status": "modified", "additions": 0, "deletions": 56, "changes": 56, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/04affb328c6a7e29427287c5192da38864f0dbca/gcc%2Ftree-vrp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/04affb328c6a7e29427287c5192da38864f0dbca/gcc%2Ftree-vrp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vrp.c?ref=04affb328c6a7e29427287c5192da38864f0dbca", "patch": "@@ -4606,59 +4606,3 @@ make_pass_vrp (gcc::context *ctxt)\n {\n   return new pass_vrp (ctxt);\n }\n-\n-\n-/* Worker for determine_value_range.  */\n-\n-static void\n-determine_value_range_1 (value_range *vr, tree expr)\n-{\n-  if (BINARY_CLASS_P (expr))\n-    {\n-      value_range vr0, vr1;\n-      determine_value_range_1 (&vr0, TREE_OPERAND (expr, 0));\n-      determine_value_range_1 (&vr1, TREE_OPERAND (expr, 1));\n-      range_fold_binary_expr (vr, TREE_CODE (expr), TREE_TYPE (expr),\n-\t\t\t      &vr0, &vr1);\n-    }\n-  else if (UNARY_CLASS_P (expr))\n-    {\n-      value_range vr0;\n-      determine_value_range_1 (&vr0, TREE_OPERAND (expr, 0));\n-      range_fold_unary_expr (vr, TREE_CODE (expr), TREE_TYPE (expr),\n-\t\t\t     &vr0, TREE_TYPE (TREE_OPERAND (expr, 0)));\n-    }\n-  else if (TREE_CODE (expr) == INTEGER_CST)\n-    vr->set (expr);\n-  else\n-    {\n-      value_range r;\n-      /* For SSA names try to extract range info computed by VRP.  Otherwise\n-\t fall back to varying.  */\n-      if (TREE_CODE (expr) == SSA_NAME\n-\t  && INTEGRAL_TYPE_P (TREE_TYPE (expr))\n-\t  && get_range_query (cfun)->range_of_expr (r, expr)\n-\t  && !r.undefined_p ())\n-\t*vr = r;\n-      else\n-\tvr->set_varying (TREE_TYPE (expr));\n-    }\n-}\n-\n-/* Compute a value-range for EXPR and set it in *MIN and *MAX.  Return\n-   the determined range type.  */\n-\n-value_range_kind\n-determine_value_range (tree expr, wide_int *min, wide_int *max)\n-{\n-  value_range vr;\n-  determine_value_range_1 (&vr, expr);\n-  if (!vr.varying_p () && vr.constant_p ())\n-    {\n-      *min = wi::to_wide (vr.min ());\n-      *max = wi::to_wide (vr.max ());\n-      return vr.kind ();\n-    }\n-\n-  return VR_VARYING;\n-}"}, {"sha": "3392ecc7b2368422962bce5f2f88150ffc3eb3ba", "filename": "gcc/tree-vrp.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/04affb328c6a7e29427287c5192da38864f0dbca/gcc%2Ftree-vrp.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/04affb328c6a7e29427287c5192da38864f0dbca/gcc%2Ftree-vrp.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vrp.h?ref=04affb328c6a7e29427287c5192da38864f0dbca", "patch": "@@ -62,7 +62,6 @@ extern bool find_case_label_index (gswitch *, size_t, tree, size_t *);\n extern bool overflow_comparison_p (tree_code, tree, tree, bool, tree *);\n extern tree get_single_symbol (tree, bool *, tree *);\n extern void maybe_set_nonzero_bits (edge, tree);\n-extern value_range_kind determine_value_range (tree, wide_int *, wide_int *);\n extern wide_int masked_increment (const wide_int &val_in, const wide_int &mask,\n \t\t\t\t  const wide_int &sgnbit, unsigned int prec);\n "}]}