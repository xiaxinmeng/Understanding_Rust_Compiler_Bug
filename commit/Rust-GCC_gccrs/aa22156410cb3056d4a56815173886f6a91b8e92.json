{"sha": "aa22156410cb3056d4a56815173886f6a91b8e92", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWEyMjE1NjQxMGNiMzA1NmQ0YTU2ODE1MTczODg2ZjZhOTFiOGU5Mg==", "commit": {"author": {"name": "Sandra Loosemore", "email": "sandra@codesourcery.com", "date": "2014-04-23T02:14:42Z"}, "committer": {"name": "Sandra Loosemore", "email": "sandra@gcc.gnu.org", "date": "2014-04-23T02:14:42Z"}, "message": "nios2.md (UNSPEC_ROUND): New.\n\n2014-04-22  Sandra Loosemore  <sandra@codesourcery.com>\n\n\tgcc/\n\t* config/nios2/nios2.md (UNSPEC_ROUND): New.\n\t(lroundsfsi2): New.\n\t* config/nios2/nios2.opt (mno-custom-round, mcustom-round=): New.\n\t* config/nios2/nios2-opts.h (N2FPU_ALL_CODES): Add round.\n\t* config/nios2/nios2.c (N2F_NO_ERRNO): Define.\n\t(nios2_fpu_insn): Add entry for round.\n\t(N2FPU_NO_ERRNO_P): Define.\n\t(nios2_custom_check_insns): Add check for N2F_NO_ERRNO and\n\tflag_errno_math.\n\t* doc/invoke.texi (Nios II Options): Document -mcustom-round.\n\n\tgcc/testsuite/\n\t* gcc.target/nios2/custom-fp-conversion.c: Adjust to test that\n\tlroundf generates custom round instruction, too.\n\nFrom-SVN: r209670", "tree": {"sha": "94b327d57a1e3ba50f9368da22ed7e1625859ed1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/94b327d57a1e3ba50f9368da22ed7e1625859ed1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/aa22156410cb3056d4a56815173886f6a91b8e92", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/aa22156410cb3056d4a56815173886f6a91b8e92", "html_url": "https://github.com/Rust-GCC/gccrs/commit/aa22156410cb3056d4a56815173886f6a91b8e92", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/aa22156410cb3056d4a56815173886f6a91b8e92/comments", "author": {"login": "SandraLoosemore", "id": 104087111, "node_id": "U_kgDOBjQ-Rw", "avatar_url": "https://avatars.githubusercontent.com/u/104087111?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SandraLoosemore", "html_url": "https://github.com/SandraLoosemore", "followers_url": "https://api.github.com/users/SandraLoosemore/followers", "following_url": "https://api.github.com/users/SandraLoosemore/following{/other_user}", "gists_url": "https://api.github.com/users/SandraLoosemore/gists{/gist_id}", "starred_url": "https://api.github.com/users/SandraLoosemore/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SandraLoosemore/subscriptions", "organizations_url": "https://api.github.com/users/SandraLoosemore/orgs", "repos_url": "https://api.github.com/users/SandraLoosemore/repos", "events_url": "https://api.github.com/users/SandraLoosemore/events{/privacy}", "received_events_url": "https://api.github.com/users/SandraLoosemore/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "5f056aaaf595a8919b9365324d6807779b768c78", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5f056aaaf595a8919b9365324d6807779b768c78", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5f056aaaf595a8919b9365324d6807779b768c78"}], "stats": {"total": 66, "additions": 63, "deletions": 3}, "files": [{"sha": "38d19bdf7147461038bfb8fb1e10aa661450208a", "filename": "gcc/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aa22156410cb3056d4a56815173886f6a91b8e92/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aa22156410cb3056d4a56815173886f6a91b8e92/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=aa22156410cb3056d4a56815173886f6a91b8e92", "patch": "@@ -1,3 +1,16 @@\n+2014-04-22  Sandra Loosemore  <sandra@codesourcery.com>\n+\n+\t* config/nios2/nios2.md (UNSPEC_ROUND): New.\n+\t(lroundsfsi2): New.\n+\t* config/nios2/nios2.opt (mno-custom-round, mcustom-round=): New.\n+\t* config/nios2/nios2-opts.h (N2FPU_ALL_CODES): Add round.\n+\t* config/nios2/nios2.c (N2F_NO_ERRNO): Define.\n+\t(nios2_fpu_insn): Add entry for round.\n+\t(N2FPU_NO_ERRNO_P): Define.\n+\t(nios2_custom_check_insns): Add check for N2F_NO_ERRNO and\n+\tflag_errno_math.\n+\t* doc/invoke.texi (Nios II Options): Document -mcustom-round.\n+\n 2014-04-22  Richard Henderson  <rth@redhat.com>\n \n \t* config/aarch64/aarch64 (addti3, subti3): New expanders."}, {"sha": "c33f2e5a4e2d2c358e5bfd310293ef1e9687bc08", "filename": "gcc/config/nios2/nios2-opts.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aa22156410cb3056d4a56815173886f6a91b8e92/gcc%2Fconfig%2Fnios2%2Fnios2-opts.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aa22156410cb3056d4a56815173886f6a91b8e92/gcc%2Fconfig%2Fnios2%2Fnios2-opts.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fnios2%2Fnios2-opts.h?ref=aa22156410cb3056d4a56815173886f6a91b8e92", "patch": "@@ -42,7 +42,7 @@ along with GCC; see the file COPYING3.  If not see\n   \t\t\t\t\t\t\t\t\t\\\n   N2FPU_CODE(floatis) N2FPU_CODE(floatus)\t\t\t\t\\\n   N2FPU_CODE(floatid) N2FPU_CODE(floatud)\t\t\t\t\\\n-  N2FPU_CODE(fixsi) N2FPU_CODE(fixsu)\t\t\t\t\t\\\n+  N2FPU_CODE(round) N2FPU_CODE(fixsi) N2FPU_CODE(fixsu)\t\t\t\\\n   N2FPU_CODE(fixdi) N2FPU_CODE(fixdu)\t\t\t\t\t\\\n   N2FPU_CODE(fextsd) N2FPU_CODE(ftruncds)\t\t\t\t\\\n \t\t\t\t\t\t\t\t\t\\"}, {"sha": "548a8d2747120f507468946c12eaee623d5d08d0", "filename": "gcc/config/nios2/nios2.c", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aa22156410cb3056d4a56815173886f6a91b8e92/gcc%2Fconfig%2Fnios2%2Fnios2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aa22156410cb3056d4a56815173886f6a91b8e92/gcc%2Fconfig%2Fnios2%2Fnios2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fnios2%2Fnios2.c?ref=aa22156410cb3056d4a56815173886f6a91b8e92", "patch": "@@ -192,6 +192,7 @@ struct nios2_fpu_insn_info\n #define N2F_DFREQ         0x2\n #define N2F_UNSAFE        0x4\n #define N2F_FINITE        0x8\n+#define N2F_NO_ERRNO      0x10\n   unsigned int flags;\n   enum insn_code icode;\n   enum nios2_ftcode ftcode;\n@@ -274,6 +275,7 @@ struct nios2_fpu_insn_info nios2_fpu_insn[] =\n     N2FPU_INSN_DEF_BASE (floatus,  2, 0, floatunssisf2, (SF, UI)),\n     N2FPU_INSN_DEF_BASE (floatid,  2, 0, floatsidf2,    (DF, SI)),\n     N2FPU_INSN_DEF_BASE (floatud,  2, 0, floatunssidf2, (DF, UI)),\n+    N2FPU_INSN_DEF_BASE (round,    2, N2F_NO_ERRNO, lroundsfsi2,   (SI, SF)),\n     N2FPU_INSN_DEF_BASE (fixsi,    2, 0, fix_truncsfsi2,      (SI, SF)),\n     N2FPU_INSN_DEF_BASE (fixsu,    2, 0, fixuns_truncsfsi2,   (UI, SF)),\n     N2FPU_INSN_DEF_BASE (fixdi,    2, 0, fix_truncdfsi2,      (SI, DF)),\n@@ -298,6 +300,7 @@ struct nios2_fpu_insn_info nios2_fpu_insn[] =\n #define N2FPU_FTCODE(code) (N2FPU(code).ftcode)\n #define N2FPU_FINITE_P(code) (N2FPU(code).flags & N2F_FINITE)\n #define N2FPU_UNSAFE_P(code) (N2FPU(code).flags & N2F_UNSAFE)\n+#define N2FPU_NO_ERRNO_P(code) (N2FPU(code).flags & N2F_NO_ERRNO)\n #define N2FPU_DOUBLE_P(code) (N2FPU(code).flags & N2F_DF)\n #define N2FPU_DOUBLE_REQUIRED_P(code) (N2FPU(code).flags & N2F_DFREQ)\n \n@@ -844,6 +847,15 @@ nios2_custom_check_insns (void)\n \twarning (0, \"switch %<-mcustom-%s%> has no effect unless \"\n \t\t \"-ffinite-math-only is specified\", N2FPU_NAME (i));\n \n+  /* Warn if the user is trying to use a custom rounding instruction\n+     that won't get used without -fno-math-errno.  See\n+     expand_builtin_int_roundingfn_2 () in builtins.c.  */\n+  if (flag_errno_math)\n+    for (i = 0; i < ARRAY_SIZE (nios2_fpu_insn); i++)\n+      if (N2FPU_ENABLED_P (i) && N2FPU_NO_ERRNO_P (i))\n+\twarning (0, \"switch %<-mcustom-%s%> has no effect unless \"\n+\t\t \"-fno-math-errno is specified\", N2FPU_NAME (i));\n+\n   if (errors || custom_code_conflict)\n     fatal_error (\"conflicting use of -mcustom switches, target attributes, \"\n \t\t \"and/or __builtin_custom_ functions\");"}, {"sha": "e3a803c59b56d7c43a0bdf331cbdf5a83681cd7d", "filename": "gcc/config/nios2/nios2.md", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aa22156410cb3056d4a56815173886f6a91b8e92/gcc%2Fconfig%2Fnios2%2Fnios2.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aa22156410cb3056d4a56815173886f6a91b8e92/gcc%2Fconfig%2Fnios2%2Fnios2.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fnios2%2Fnios2.md?ref=aa22156410cb3056d4a56815173886f6a91b8e92", "patch": "@@ -70,6 +70,7 @@\n   UNSPEC_FATAN\n   UNSPEC_FEXP\n   UNSPEC_FLOG\n+  UNSPEC_ROUND\n   UNSPEC_LOAD_GOT_REGISTER\n   UNSPEC_PIC_SYM\n   UNSPEC_PIC_CALL_SYM\n@@ -585,6 +586,13 @@\n   { return nios2_fpu_insn_asm (n2fpu_fix<f><i>); }\n   [(set_attr \"type\" \"custom\")])\n \n+(define_insn \"lroundsfsi2\"\n+  [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n+        (unspec:SI [(match_operand:SF 1 \"general_operand\" \"r\")] UNSPEC_ROUND))]\n+  \"nios2_fpu_insn_enabled (n2fpu_round)\"\n+  { return nios2_fpu_insn_asm (n2fpu_round); }\n+  [(set_attr \"type\" \"custom\")])\n+\n (define_insn \"extendsfdf2\"\n   [(set (match_operand:DF 0 \"register_operand\" \"=r\")\n         (float_extend:DF (match_operand:SF 1 \"general_operand\" \"r\")))]"}, {"sha": "95aac5c665b8883647a4e6de2ad565b2f5968f19", "filename": "gcc/config/nios2/nios2.opt", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aa22156410cb3056d4a56815173886f6a91b8e92/gcc%2Fconfig%2Fnios2%2Fnios2.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aa22156410cb3056d4a56815173886f6a91b8e92/gcc%2Fconfig%2Fnios2%2Fnios2.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fnios2%2Fnios2.opt?ref=aa22156410cb3056d4a56815173886f6a91b8e92", "patch": "@@ -529,3 +529,13 @@ Do not use the fwrx custom instruction\n mcustom-fwrx=\n Target Report RejectNegative Joined UInteger Var(nios2_custom_fwrx) Init(-1)\n Integer id (N) of fwrx custom instruction\n+\n+mno-custom-round\n+Target Report RejectNegative Var(nios2_custom_round, -1)\n+Do not use the round custom instruction\n+\n+mcustom-round=\n+Target Report RejectNegative Joined UInteger Var(nios2_custom_round) Init(-1)\n+Integer id (N) of round custom instruction\n+\n+"}, {"sha": "7d039098c4dffe232ab47d4ac28388908182bc30", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aa22156410cb3056d4a56815173886f6a91b8e92/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aa22156410cb3056d4a56815173886f6a91b8e92/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=aa22156410cb3056d4a56815173886f6a91b8e92", "patch": "@@ -18485,6 +18485,12 @@ Conversion from double precision to single precision.\n Conversion from floating point to signed or unsigned integer types, with\n truncation towards zero.\n \n+@item @samp{round}\n+Conversion from single-precision floating point to signed integer,\n+rounding to the nearest integer and ties away from zero.\n+This corresponds to the @code{__builtin_lroundf} function when\n+@option{-fno-math-errno} is used.\n+\n @item @samp{floatis}, @samp{floatus}, @samp{floatid}, @samp{floatud}\n Conversion from signed or unsigned integer types to floating-point types.\n "}, {"sha": "78b0e34592d850ee8ec92efd256f24ab01697650", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aa22156410cb3056d4a56815173886f6a91b8e92/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aa22156410cb3056d4a56815173886f6a91b8e92/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=aa22156410cb3056d4a56815173886f6a91b8e92", "patch": "@@ -1,3 +1,8 @@\n+2014-04-22  Sandra Loosemore  <sandra@codesourcery.com>\n+\n+\t* gcc.target/nios2/custom-fp-conversion.c: Adjust to test that\n+\tlroundf generates custom round instruction, too.\n+\n 2014-04-22  Tobias Burnus  <burnus@net-b.de>\n \n \tPR fortran/60881"}, {"sha": "c110b1ad2f4dab7dec08c3c5478919abe9ec3010", "filename": "gcc/testsuite/gcc.target/nios2/custom-fp-conversion.c", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aa22156410cb3056d4a56815173886f6a91b8e92/gcc%2Ftestsuite%2Fgcc.target%2Fnios2%2Fcustom-fp-conversion.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aa22156410cb3056d4a56815173886f6a91b8e92/gcc%2Ftestsuite%2Fgcc.target%2Fnios2%2Fcustom-fp-conversion.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fnios2%2Fcustom-fp-conversion.c?ref=aa22156410cb3056d4a56815173886f6a91b8e92", "patch": "@@ -1,10 +1,11 @@\n /* Test generation of conversion custom instructions.  */\n \n /* { dg-do compile } */\n-/* { dg-options \"-O1 -ffinite-math-only -funsafe-math-optimizations\" } */\n+/* { dg-options \"-O1 -ffinite-math-only -funsafe-math-optimizations -fno-math-errno\" } */\n \n /* -O1 in the options is significant.  Without it FP operations may not be\n-   optimized to custom instructions.  */\n+   optimized to custom instructions.  Also, -fno-math-errno is required\n+   to inline lroundf. */\n \n #include <stdio.h> \n #include <math.h>\n@@ -25,6 +26,8 @@\n #pragma GCC target (\"custom-floatud=107\")\n #pragma GCC target (\"custom-floatus=108\")\n #pragma GCC target (\"custom-ftruncds=109\")\n+#pragma GCC target (\"custom-round=110\")\n+\n \n typedef struct data {\n   double fextsd;\n@@ -37,6 +40,7 @@ typedef struct data {\n   double floatud;\n   float floatus;\n   float ftruncds;\n+  int round;\n } data_t;\n \n void\n@@ -52,6 +56,7 @@ custom_fp (int i, unsigned u, float f, double d, data_t *out)\n   out->floatud = (double) u;\n   out->floatus = (float) u;\n   out->ftruncds = (float) d;\n+  out->round = lroundf (f);\n }\n \n /* { dg-final { scan-assembler \"custom\\\\t100, .* # fextsd .*\" } } */\n@@ -64,3 +69,4 @@ custom_fp (int i, unsigned u, float f, double d, data_t *out)\n /* { dg-final { scan-assembler \"custom\\\\t107, .* # floatud .*\" } } */\n /* { dg-final { scan-assembler \"custom\\\\t108, .* # floatus .*\" } } */\n /* { dg-final { scan-assembler \"custom\\\\t109, .* # ftruncds .*\" } } */\n+/* { dg-final { scan-assembler \"custom\\\\t110, .* # round .*\" } } */"}]}