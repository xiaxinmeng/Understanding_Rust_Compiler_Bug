{"sha": "180ee6d101f95274336595fe66d9a2935f8e5c57", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTgwZWU2ZDEwMWY5NTI3NDMzNjU5NWZlNjZkOWEyOTM1ZjhlNWM1Nw==", "commit": {"author": {"name": "Georg-Johann Lay", "email": "avr@gjlay.de", "date": "2011-10-05T11:16:10Z"}, "committer": {"name": "Georg-Johann Lay", "email": "gjl@gcc.gnu.org", "date": "2011-10-05T11:16:10Z"}, "message": "avr-protos.h (avr_out_addto_sp): New prototype.\n\n\t* config/avr/avr-protos.h (avr_out_addto_sp): New prototype.\n\t* config/avr/avr.c (avr_out_addto_sp): New function.\n\t(adjust_insn_length): Handle ADJUST_LEN_ADDTO_SP.\n\t* config/avr/avr.md (adjust_len): Add \"addto_sp\".\n\t(*movhi_sp): Remove insn.\n\t(*addhi3_sp_R_pc2, *addhi3_sp_R_pc3): Merge to *addhi3_sp_R.\n\nFrom-SVN: r179544", "tree": {"sha": "328703969c841c2bbf25b1c9df7a051801ebcf82", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/328703969c841c2bbf25b1c9df7a051801ebcf82"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/180ee6d101f95274336595fe66d9a2935f8e5c57", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/180ee6d101f95274336595fe66d9a2935f8e5c57", "html_url": "https://github.com/Rust-GCC/gccrs/commit/180ee6d101f95274336595fe66d9a2935f8e5c57", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/180ee6d101f95274336595fe66d9a2935f8e5c57/comments", "author": null, "committer": {"login": "sprintersb", "id": 8905355, "node_id": "MDQ6VXNlcjg5MDUzNTU=", "avatar_url": "https://avatars.githubusercontent.com/u/8905355?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sprintersb", "html_url": "https://github.com/sprintersb", "followers_url": "https://api.github.com/users/sprintersb/followers", "following_url": "https://api.github.com/users/sprintersb/following{/other_user}", "gists_url": "https://api.github.com/users/sprintersb/gists{/gist_id}", "starred_url": "https://api.github.com/users/sprintersb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sprintersb/subscriptions", "organizations_url": "https://api.github.com/users/sprintersb/orgs", "repos_url": "https://api.github.com/users/sprintersb/repos", "events_url": "https://api.github.com/users/sprintersb/events{/privacy}", "received_events_url": "https://api.github.com/users/sprintersb/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d3878abfccb6f6b9235bdf084f28ebe6cc1cc490", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d3878abfccb6f6b9235bdf084f28ebe6cc1cc490", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d3878abfccb6f6b9235bdf084f28ebe6cc1cc490"}], "stats": {"total": 204, "additions": 61, "deletions": 143}, "files": [{"sha": "96cac6765d482c4fee620e8c396f2ae29e6ca9c6", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/180ee6d101f95274336595fe66d9a2935f8e5c57/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/180ee6d101f95274336595fe66d9a2935f8e5c57/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=180ee6d101f95274336595fe66d9a2935f8e5c57", "patch": "@@ -1,3 +1,12 @@\n+2011-10-05  Georg-Johann Lay  <avr@gjlay.de>\n+\n+\t* config/avr/avr-protos.h (avr_out_addto_sp): New prototype.\n+\t* config/avr/avr.c (avr_out_addto_sp): New function.\n+\t(adjust_insn_length): Handle ADJUST_LEN_ADDTO_SP.\n+\t* config/avr/avr.md (adjust_len): Add \"addto_sp\".\n+\t(*movhi_sp): Remove insn.\n+\t(*addhi3_sp_R_pc2, *addhi3_sp_R_pc3): Merge to *addhi3_sp_R.\n+\n 2011-10-05  Richard Guenther  <rguenther@suse.de>\n \n \t* gimple-fold.c (gimple_fold_stmt_to_constant_1): For"}, {"sha": "a2a5dd0c04e9f0abc0122667785ff58384f1d8db", "filename": "gcc/config/avr/avr-protos.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/180ee6d101f95274336595fe66d9a2935f8e5c57/gcc%2Fconfig%2Favr%2Favr-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/180ee6d101f95274336595fe66d9a2935f8e5c57/gcc%2Fconfig%2Favr%2Favr-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Favr%2Favr-protos.h?ref=180ee6d101f95274336595fe66d9a2935f8e5c57", "patch": "@@ -83,6 +83,7 @@ extern void avr_output_addr_vec_elt (FILE *stream, int value);\n extern const char *avr_out_sbxx_branch (rtx insn, rtx operands[]);\n extern const char* avr_out_bitop (rtx, rtx*, int*);\n extern const char* avr_out_plus (rtx*, int*);\n+extern const char* avr_out_addto_sp (rtx*, int*);\n extern bool avr_popcount_each_byte (rtx, int, int);\n \n extern int extra_constraint_Q (rtx x);"}, {"sha": "c28b593a8b8cc162c8a7efd764554ed5f8850fc0", "filename": "gcc/config/avr/avr.c", "status": "modified", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/180ee6d101f95274336595fe66d9a2935f8e5c57/gcc%2Fconfig%2Favr%2Favr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/180ee6d101f95274336595fe66d9a2935f8e5c57/gcc%2Fconfig%2Favr%2Favr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Favr%2Favr.c?ref=180ee6d101f95274336595fe66d9a2935f8e5c57", "patch": "@@ -4961,6 +4961,47 @@ avr_out_bitop (rtx insn, rtx *xop, int *plen)\n   return \"\";\n }\n \n+\n+/* PLEN == NULL: Output code to add CONST_INT OP[0] to SP.\n+   PLEN != NULL: Set *PLEN to the length of that sequence.\n+   Return \"\".  */\n+\n+const char*\n+avr_out_addto_sp (rtx *op, int *plen)\n+{\n+  int pc_len = AVR_2_BYTE_PC ? 2 : 3;\n+  int addend = INTVAL (op[0]);\n+\n+  if (plen)\n+    *plen = 0;\n+\n+  if (addend < 0)\n+    {\n+      if (flag_verbose_asm || flag_print_asm_name)\n+        avr_asm_len (ASM_COMMENT_START \"SP -= %n0\", op, plen, 0);\n+  \n+      while (addend <= -pc_len)\n+        {\n+          addend += pc_len;\n+          avr_asm_len (\"rcall .\", op, plen, 1);\n+        }\n+\n+      while (addend++ < 0)\n+        avr_asm_len (\"push __zero_reg__\", op, plen, 1);\n+    }\n+  else if (addend > 0)\n+    {\n+      if (flag_verbose_asm || flag_print_asm_name)\n+        avr_asm_len (ASM_COMMENT_START \"SP += %0\", op, plen, 0);\n+\n+      while (addend-- > 0)\n+        avr_asm_len (\"pop __tmp_reg__\", op, plen, 1);\n+    }\n+\n+  return \"\";\n+}\n+\n+\n /* Create RTL split patterns for byte sized rotate expressions.  This\n   produces a series of move instructions and considers overlap situations.\n   Overlapping non-HImode operands need a scratch register.  */\n@@ -5154,6 +5195,8 @@ adjust_insn_length (rtx insn, int len)\n     case ADJUST_LEN_OUT_BITOP: avr_out_bitop (insn, op, &len); break;\n       \n     case ADJUST_LEN_OUT_PLUS: avr_out_plus (op, &len); break;\n+\n+    case ADJUST_LEN_ADDTO_SP: avr_out_addto_sp (op, &len); break;\n       \n     case ADJUST_LEN_MOV8:  output_movqi (insn, op, &len); break;\n     case ADJUST_LEN_MOV16: output_movhi (insn, op, &len); break;"}, {"sha": "f1ac95d7f00480d5754cc76ab66650b2d73e0fc8", "filename": "gcc/config/avr/avr.md", "status": "modified", "additions": 8, "deletions": 143, "changes": 151, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/180ee6d101f95274336595fe66d9a2935f8e5c57/gcc%2Fconfig%2Favr%2Favr.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/180ee6d101f95274336595fe66d9a2935f8e5c57/gcc%2Fconfig%2Favr%2Favr.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Favr%2Favr.md?ref=180ee6d101f95274336595fe66d9a2935f8e5c57", "patch": "@@ -136,7 +136,7 @@\n ;; Otherwise do special processing depending on the attribute.\n \n (define_attr \"adjust_len\"\n-  \"out_bitop, out_plus, tsthi, tstsi, compare,\n+  \"out_bitop, out_plus, addto_sp, tsthi, tstsi, compare,\n    mov8, mov16, mov32, reload_in16, reload_in32,\n    ashlqi, ashrqi, lshrqi,\n    ashlhi, ashrhi, lshrhi,\n@@ -346,15 +346,6 @@\n     }\n }\")\n \n-(define_insn \"*movhi_sp\"\n-  [(set (match_operand:HI 0 \"register_operand\" \"=q,r\")\n-        (match_operand:HI 1 \"register_operand\"  \"r,q\"))]\n-  \"((stack_register_operand(operands[0], HImode) && register_operand (operands[1], HImode))\n-    || (register_operand (operands[0], HImode) && stack_register_operand(operands[1], HImode)))\"\n-  \"* return output_movhi (insn, operands, NULL);\"\n-  [(set_attr \"length\" \"5,2\")\n-   (set_attr \"cc\" \"none,none\")])\n-\n (define_insn \"movhi_sp_r_irq_off\"\n   [(set (match_operand:HI 0 \"stack_register_operand\" \"=q\")\n         (unspec_volatile:HI [(match_operand:HI 1 \"register_operand\"  \"r\")] \n@@ -767,142 +758,16 @@\n   [(set_attr \"length\" \"2\")\n    (set_attr \"cc\" \"set_n\")])\n \n-(define_insn \"*addhi3_sp_R_pc2\"\n+(define_insn \"*addhi3_sp_R\"\n   [(set (match_operand:HI 1 \"stack_register_operand\" \"=q\")\n         (plus:HI (match_operand:HI 2 \"stack_register_operand\" \"q\")\n                  (match_operand:HI 0 \"avr_sp_immediate_operand\" \"R\")))]\n-  \"AVR_2_BYTE_PC\"\n-  \"*{\n-      if (CONST_INT_P (operands[0]))\n-        {\n-\t  switch(INTVAL (operands[0]))\n-\t    {\n-\t    case -6: \n-\t      return \\\"rcall .\\\" CR_TAB \n-\t             \\\"rcall .\\\" CR_TAB \n-\t\t     \\\"rcall .\\\";\n-\t    case -5: \n-\t      return \\\"rcall .\\\" CR_TAB \n-\t             \\\"rcall .\\\" CR_TAB \n-\t\t     \\\"push __tmp_reg__\\\";\n-\t    case -4: \n-\t      return \\\"rcall .\\\" CR_TAB \n-\t             \\\"rcall .\\\";\n-\t    case -3: \n-\t      return \\\"rcall .\\\" CR_TAB \n-\t             \\\"push __tmp_reg__\\\";\n-\t    case -2: \n-\t      return \\\"rcall .\\\";\n-\t    case -1: \n-\t      return \\\"push __tmp_reg__\\\";\n-\t    case 0: \n-\t      return \\\"\\\";\n-\t    case 1: \n-\t      return \\\"pop __tmp_reg__\\\";\n-\t    case 2: \n-\t      return \\\"pop __tmp_reg__\\\" CR_TAB \n-\t             \\\"pop __tmp_reg__\\\";\n-\t    case 3: \n-\t      return \\\"pop __tmp_reg__\\\" CR_TAB \n-\t             \\\"pop __tmp_reg__\\\" CR_TAB \n-\t\t     \\\"pop __tmp_reg__\\\";\n-\t    case 4: \n-\t      return \\\"pop __tmp_reg__\\\" CR_TAB \n-\t             \\\"pop __tmp_reg__\\\" CR_TAB \n-\t\t     \\\"pop __tmp_reg__\\\" CR_TAB \n-\t\t     \\\"pop __tmp_reg__\\\";\n-\t    case 5: \n-\t      return \\\"pop __tmp_reg__\\\" CR_TAB \n-\t             \\\"pop __tmp_reg__\\\" CR_TAB \n-\t\t     \\\"pop __tmp_reg__\\\" CR_TAB \n-\t\t     \\\"pop __tmp_reg__\\\" CR_TAB \n-\t\t     \\\"pop __tmp_reg__\\\";\n-\t    }\n-        }\n-      return \\\"bug\\\";\n-    }\"\n-  [(set (attr \"length\") \n-        (cond [(eq (const_int -6) (symbol_ref \"INTVAL (operands[0])\")) (const_int 3)\n-               (eq (const_int -5) (symbol_ref \"INTVAL (operands[0])\")) (const_int 3)\n-               (eq (const_int -4) (symbol_ref \"INTVAL (operands[0])\")) (const_int 2)\n-               (eq (const_int -3) (symbol_ref \"INTVAL (operands[0])\")) (const_int 2)\n-               (eq (const_int -2) (symbol_ref \"INTVAL (operands[0])\")) (const_int 1)\n-               (eq (const_int -1) (symbol_ref \"INTVAL (operands[0])\")) (const_int 1)\n-               (eq (const_int  0) (symbol_ref \"INTVAL (operands[0])\")) (const_int 0)\n-               (eq (const_int  1) (symbol_ref \"INTVAL (operands[0])\")) (const_int 1)\n-               (eq (const_int  2) (symbol_ref \"INTVAL (operands[0])\")) (const_int 2)\n-               (eq (const_int  3) (symbol_ref \"INTVAL (operands[0])\")) (const_int 3)\n-               (eq (const_int  4) (symbol_ref \"INTVAL (operands[0])\")) (const_int 4)\n-               (eq (const_int  5) (symbol_ref \"INTVAL (operands[0])\")) (const_int 5)]\n-               (const_int 0)))])\n-\n-(define_insn \"*addhi3_sp_R_pc3\"\n-  [(set (match_operand:HI 1 \"stack_register_operand\" \"=q\")\n-        (plus:HI (match_operand:HI 2 \"stack_register_operand\" \"q\")\n-                 (match_operand:QI 0 \"avr_sp_immediate_operand\" \"R\")))]\n-  \"AVR_3_BYTE_PC\"\n-  \"*{\n-      if (CONST_INT_P (operands[0]))\n-        {\n-\t  switch(INTVAL (operands[0]))\n-\t    {\n-\t    case -6: \n-\t      return \\\"rcall .\\\" CR_TAB \n-\t\t     \\\"rcall .\\\";\n-\t    case -5: \n-\t      return \\\"rcall .\\\" CR_TAB \n-\t             \\\"push __tmp_reg__\\\" CR_TAB \n-\t\t     \\\"push __tmp_reg__\\\";\n-\t    case -4: \n-\t      return \\\"rcall .\\\" CR_TAB \n-\t             \\\"push __tmp_reg__\\\";\n-\t    case -3: \n-\t      return \\\"rcall .\\\";\n-\t    case -2: \n-\t      return \\\"push __tmp_reg__\\\" CR_TAB \n-\t\t     \\\"push __tmp_reg__\\\";\n-\t    case -1: \n-\t      return \\\"push __tmp_reg__\\\";\n-\t    case 0: \n-\t      return \\\"\\\";\n-\t    case 1: \n-\t      return \\\"pop __tmp_reg__\\\";\n-\t    case 2: \n-\t      return \\\"pop __tmp_reg__\\\" CR_TAB \n-\t             \\\"pop __tmp_reg__\\\";\n-\t    case 3: \n-\t      return \\\"pop __tmp_reg__\\\" CR_TAB \n-\t             \\\"pop __tmp_reg__\\\" CR_TAB \n-\t\t     \\\"pop __tmp_reg__\\\";\n-\t    case 4: \n-\t      return \\\"pop __tmp_reg__\\\" CR_TAB \n-\t             \\\"pop __tmp_reg__\\\" CR_TAB \n-\t\t     \\\"pop __tmp_reg__\\\" CR_TAB \n-\t\t     \\\"pop __tmp_reg__\\\";\n-\t    case 5: \n-\t      return \\\"pop __tmp_reg__\\\" CR_TAB \n-\t             \\\"pop __tmp_reg__\\\" CR_TAB \n-\t\t     \\\"pop __tmp_reg__\\\" CR_TAB \n-\t\t     \\\"pop __tmp_reg__\\\" CR_TAB \n-\t\t     \\\"pop __tmp_reg__\\\";\n-\t    }\n-        }\n-      return \\\"bug\\\";\n-    }\"\n-  [(set (attr \"length\") \n-        (cond [(eq (const_int -6) (symbol_ref \"INTVAL (operands[0])\")) (const_int 2)\n-               (eq (const_int -5) (symbol_ref \"INTVAL (operands[0])\")) (const_int 3)\n-               (eq (const_int -4) (symbol_ref \"INTVAL (operands[0])\")) (const_int 2)\n-               (eq (const_int -3) (symbol_ref \"INTVAL (operands[0])\")) (const_int 1)\n-               (eq (const_int -2) (symbol_ref \"INTVAL (operands[0])\")) (const_int 2)\n-               (eq (const_int -1) (symbol_ref \"INTVAL (operands[0])\")) (const_int 1)\n-               (eq (const_int  0) (symbol_ref \"INTVAL (operands[0])\")) (const_int 0)\n-               (eq (const_int  1) (symbol_ref \"INTVAL (operands[0])\")) (const_int 1)\n-               (eq (const_int  2) (symbol_ref \"INTVAL (operands[0])\")) (const_int 2)\n-               (eq (const_int  3) (symbol_ref \"INTVAL (operands[0])\")) (const_int 3)\n-               (eq (const_int  4) (symbol_ref \"INTVAL (operands[0])\")) (const_int 4)\n-               (eq (const_int  5) (symbol_ref \"INTVAL (operands[0])\")) (const_int 5)]\n-               (const_int 0)))])\n+  \"\"\n+  {\n+    return avr_out_addto_sp (operands, NULL);\n+  }\n+  [(set_attr \"length\" \"5\")\n+   (set_attr \"adjust_len\" \"addto_sp\")])\n \n (define_insn \"*addhi3\"\n   [(set (match_operand:HI 0 \"register_operand\" \"=r,!w,!w,d,r,r\")"}]}