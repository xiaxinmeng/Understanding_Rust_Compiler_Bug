{"sha": "77f8682b0524f6b534b1da716ee2565757ec7b86", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzdmODY4MmIwNTI0ZjZiNTM0YjFkYTcxNmVlMjU2NTc1N2VjN2I4Ng==", "commit": {"author": {"name": "Tobias Burnus", "email": "burnus@net-b.de", "date": "2013-05-20T20:08:05Z"}, "committer": {"name": "Tobias Burnus", "email": "burnus@gcc.gnu.org", "date": "2013-05-20T20:08:05Z"}, "message": "re PR fortran/48858 (Incorrect error for same binding label on two generic interface specifics)\n\n2013-05-20  Tobias Burnus  <burnus@net-b.de>\n\n        PR fortran/48858\n        PR fortran/55465\n        * decl.c (add_global_entry): Add sym_name.\n        * parse.c (add_global_procedure): Ditto.\n        * resolve.c (resolve_bind_c_derived_types): Handle multiple decl for\n        a procedure.\n        (resolve_global_procedure): Handle gsym->ns pointing to a module.\n        * trans-decl.c (gfc_get_extern_function_decl): Ditto.\n\n2013-05-20  Tobias Burnus  <burnus@net-b.de>\n\n        PR fortran/48858\n        PR fortran/55465\n        * gfortran.dg/binding_label_tests_10_main.f03: Update dg-error.\n        * gfortran.dg/binding_label_tests_11_main.f03: Ditto.\n        * gfortran.dg/binding_label_tests_13_main.f03: Ditto.\n        * gfortran.dg/binding_label_tests_3.f03: Ditto.\n        * gfortran.dg/binding_label_tests_4.f03: Ditto.\n        * gfortran.dg/binding_label_tests_5.f03: Ditto.\n        * gfortran.dg/binding_label_tests_6.f03: Ditto.\n        * gfortran.dg/binding_label_tests_7.f03: Ditto.\n        * gfortran.dg/binding_label_tests_8.f03: Ditto.\n        * gfortran.dg/c_loc_tests_12.f03: Fix test case.\n        * gfortran.dg/binding_label_tests_24.f90: New.\n        * gfortran.dg/binding_label_tests_25.f90: New.\n\nFrom-SVN: r199120", "tree": {"sha": "fc7c0d49f2d0a4562c373f1fa4ca56994cf1ea43", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/fc7c0d49f2d0a4562c373f1fa4ca56994cf1ea43"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/77f8682b0524f6b534b1da716ee2565757ec7b86", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/77f8682b0524f6b534b1da716ee2565757ec7b86", "html_url": "https://github.com/Rust-GCC/gccrs/commit/77f8682b0524f6b534b1da716ee2565757ec7b86", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/77f8682b0524f6b534b1da716ee2565757ec7b86/comments", "author": {"login": "tob2", "id": 264461, "node_id": "MDQ6VXNlcjI2NDQ2MQ==", "avatar_url": "https://avatars.githubusercontent.com/u/264461?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tob2", "html_url": "https://github.com/tob2", "followers_url": "https://api.github.com/users/tob2/followers", "following_url": "https://api.github.com/users/tob2/following{/other_user}", "gists_url": "https://api.github.com/users/tob2/gists{/gist_id}", "starred_url": "https://api.github.com/users/tob2/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tob2/subscriptions", "organizations_url": "https://api.github.com/users/tob2/orgs", "repos_url": "https://api.github.com/users/tob2/repos", "events_url": "https://api.github.com/users/tob2/events{/privacy}", "received_events_url": "https://api.github.com/users/tob2/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "f11de7c5f898a5a613f7ccb47f999312f505f125", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f11de7c5f898a5a613f7ccb47f999312f505f125", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f11de7c5f898a5a613f7ccb47f999312f505f125"}], "stats": {"total": 346, "additions": 248, "deletions": 98}, "files": [{"sha": "7b48c4d367041c8cd124e6111546ebc6f859e659", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/77f8682b0524f6b534b1da716ee2565757ec7b86/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/77f8682b0524f6b534b1da716ee2565757ec7b86/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=77f8682b0524f6b534b1da716ee2565757ec7b86", "patch": "@@ -1,3 +1,14 @@\n+2013-05-20  Tobias Burnus  <burnus@net-b.de>\n+\n+\tPR fortran/48858\n+\tPR fortran/55465\n+\t* decl.c (add_global_entry): Add sym_name.\n+\t* parse.c (add_global_procedure): Ditto.\n+\t* resolve.c (resolve_bind_c_derived_types): Handle multiple decl for\n+\ta procedure.\n+\t(resolve_global_procedure): Handle gsym->ns pointing to a module.\n+\t* trans-decl.c (gfc_get_extern_function_decl): Ditto.\n+\n 2013-05-20  Tobias Burnus  <burnus@net-b.de>\n \n \tPR fortran/48858"}, {"sha": "6ab9cc784380487c0f65d601069e79ff27fd55e7", "filename": "gcc/fortran/decl.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/77f8682b0524f6b534b1da716ee2565757ec7b86/gcc%2Ffortran%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/77f8682b0524f6b534b1da716ee2565757ec7b86/gcc%2Ffortran%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fdecl.c?ref=77f8682b0524f6b534b1da716ee2565757ec7b86", "patch": "@@ -5375,6 +5375,7 @@ add_global_entry (const char *name, const char *binding_label, bool sub)\n       else\n \t{\n \t  s->type = type;\n+\t  s->sym_name = name;\n \t  s->where = gfc_current_locus;\n \t  s->defined = 1;\n \t  s->ns = gfc_current_ns;\n@@ -5396,6 +5397,7 @@ add_global_entry (const char *name, const char *binding_label, bool sub)\n       else\n \t{\n \t  s->type = type;\n+\t  s->sym_name = name;\n \t  s->binding_label = binding_label;\n \t  s->where = gfc_current_locus;\n \t  s->defined = 1;"}, {"sha": "a223a2cb70450ba08a33a430aba2cd26bd5d021c", "filename": "gcc/fortran/parse.c", "status": "modified", "additions": 12, "deletions": 2, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/77f8682b0524f6b534b1da716ee2565757ec7b86/gcc%2Ffortran%2Fparse.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/77f8682b0524f6b534b1da716ee2565757ec7b86/gcc%2Ffortran%2Fparse.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fparse.c?ref=77f8682b0524f6b534b1da716ee2565757ec7b86", "patch": "@@ -4359,10 +4359,15 @@ add_global_procedure (bool sub)\n       if (s->defined\n \t  || (s->type != GSYM_UNKNOWN\n \t      && s->type != (sub ? GSYM_SUBROUTINE : GSYM_FUNCTION)))\n-\tgfc_global_used(s, NULL);\n+\t{\n+\t  gfc_global_used (s, NULL);\n+\t  /* Silence follow-up errors.  */\n+\t  gfc_new_block->binding_label = NULL;\n+\t}\n       else\n \t{\n \t  s->type = sub ? GSYM_SUBROUTINE : GSYM_FUNCTION;\n+\t  s->sym_name = gfc_new_block->name;\n \t  s->where = gfc_current_locus;\n \t  s->defined = 1;\n \t  s->ns = gfc_current_ns;\n@@ -4379,10 +4384,15 @@ add_global_procedure (bool sub)\n       if (s->defined\n \t  || (s->type != GSYM_UNKNOWN\n \t      && s->type != (sub ? GSYM_SUBROUTINE : GSYM_FUNCTION)))\n-\tgfc_global_used(s, NULL);\n+\t{\n+\t  gfc_global_used (s, NULL);\n+\t  /* Silence follow-up errors.  */\n+\t  gfc_new_block->binding_label = NULL;\n+\t}\n       else\n \t{\n \t  s->type = sub ? GSYM_SUBROUTINE : GSYM_FUNCTION;\n+\t  s->sym_name = gfc_new_block->name;\n \t  s->binding_label = gfc_new_block->binding_label;\n \t  s->where = gfc_current_locus;\n \t  s->defined = 1;"}, {"sha": "74e0aa4b43220280df331c9342130fd276822920", "filename": "gcc/fortran/resolve.c", "status": "modified", "additions": 81, "deletions": 75, "changes": 156, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/77f8682b0524f6b534b1da716ee2565757ec7b86/gcc%2Ffortran%2Fresolve.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/77f8682b0524f6b534b1da716ee2565757ec7b86/gcc%2Ffortran%2Fresolve.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fresolve.c?ref=77f8682b0524f6b534b1da716ee2565757ec7b86", "patch": "@@ -2389,6 +2389,11 @@ resolve_global_procedure (gfc_symbol *sym, locus *where,\n \t}\n \n       def_sym = gsym->ns->proc_name;\n+\n+      /* This can happen if a binding name has been specified.  */\n+      if (gsym->binding_label && gsym->sym_name != def_sym->name)\n+\tgfc_find_symbol (gsym->sym_name, gsym->ns, 0, &def_sym);\n+\n       if (def_sym->attr.entry_master)\n \t{\n \t  gfc_entry_list *entry;\n@@ -10023,90 +10028,91 @@ resolve_bind_c_derived_types (gfc_symbol *derived_sym)\n \n \n /* Verify that any binding labels used in a given namespace do not collide\n-   with the names or binding labels of any global symbols.  */\n+   with the names or binding labels of any global symbols.  Multiple INTERFACE\n+   for the same procedure are permitted.  */\n \n static void\n gfc_verify_binding_labels (gfc_symbol *sym)\n {\n-  int has_error = 0;\n+  gfc_gsymbol *gsym;\n+  const char *module;\n \n-  if (sym != NULL && sym->attr.is_bind_c && sym->attr.is_iso_c == 0\n-      && sym->attr.flavor != FL_DERIVED && sym->binding_label)\n-    {\n-      gfc_gsymbol *bind_c_sym;\n+  if (!sym || !sym->attr.is_bind_c || sym->attr.is_iso_c\n+      || sym->attr.flavor == FL_DERIVED || !sym->binding_label)\n+    return;\n \n-      bind_c_sym = gfc_find_gsymbol (gfc_gsym_root, sym->binding_label);\n-      if (bind_c_sym != NULL\n-          && strcmp (bind_c_sym->name, sym->binding_label) == 0)\n-        {\n-          if (sym->attr.if_source == IFSRC_DECL\n-              && (bind_c_sym->type != GSYM_SUBROUTINE\n-                  && bind_c_sym->type != GSYM_FUNCTION)\n-              && ((sym->attr.contained == 1\n-                   && strcmp (bind_c_sym->sym_name, sym->name) != 0)\n-                  || (sym->attr.use_assoc == 1\n-                      && (strcmp (bind_c_sym->mod_name, sym->module) != 0))))\n-            {\n-              /* Make sure global procedures don't collide with anything.  */\n-              gfc_error (\"Binding label '%s' at %L collides with the global \"\n-                         \"entity '%s' at %L\", sym->binding_label,\n-                         &(sym->declared_at), bind_c_sym->name,\n-                         &(bind_c_sym->where));\n-              has_error = 1;\n-            }\n-          else if (sym->attr.contained == 0\n-                   && (sym->attr.if_source == IFSRC_IFBODY\n-                       && sym->attr.flavor == FL_PROCEDURE)\n-                   && (bind_c_sym->sym_name != NULL\n-                       && strcmp (bind_c_sym->sym_name, sym->name) != 0))\n-            {\n-              /* Make sure procedures in interface bodies don't collide.  */\n-              gfc_error (\"Binding label '%s' in interface body at %L collides \"\n-                         \"with the global entity '%s' at %L\",\n-                         sym->binding_label,\n-                         &(sym->declared_at), bind_c_sym->name,\n-                         &(bind_c_sym->where));\n-              has_error = 1;\n-            }\n-          else if (sym->attr.contained == 0\n-                   && sym->attr.if_source == IFSRC_UNKNOWN)\n-\t    if ((sym->attr.use_assoc && bind_c_sym->mod_name\n-\t\t && strcmp (bind_c_sym->mod_name, sym->module) != 0)\n-\t\t|| sym->attr.use_assoc == 0)\n-              {\n-                gfc_error (\"Binding label '%s' at %L collides with global \"\n-                           \"entity '%s' at %L\", sym->binding_label,\n-                           &(sym->declared_at), bind_c_sym->name,\n-                           &(bind_c_sym->where));\n-                has_error = 1;\n-              }\n-\n-          if (has_error != 0)\n-\t    /* Clear the binding label to prevent checking multiple times.  */\n-\t    sym->binding_label = NULL;\n-        }\n-      else if (bind_c_sym == NULL)\n-\t{\n-\t  bind_c_sym = gfc_get_gsymbol (sym->binding_label);\n-\t  bind_c_sym->where = sym->declared_at;\n-\t  bind_c_sym->sym_name = sym->name;\n+  gsym = gfc_find_gsymbol (gfc_gsym_root, sym->binding_label);\n+\n+  if (sym->module)\n+    module = sym->module;\n+  else if (sym->ns && sym->ns->proc_name\n+\t   && sym->ns->proc_name->attr.flavor == FL_MODULE)\n+    module = sym->ns->proc_name->name;\n+  else if (sym->ns && sym->ns->parent\n+\t   && sym->ns && sym->ns->parent->proc_name\n+\t   && sym->ns->parent->proc_name->attr.flavor == FL_MODULE)\n+    module = sym->ns->parent->proc_name->name;\n+  else\n+    module = NULL;\n+\n+  if (!gsym\n+      || (!gsym->defined\n+\t  && (gsym->type == GSYM_FUNCTION || gsym->type == GSYM_SUBROUTINE)))\n+    {\n+      if (!gsym)\n+\tgsym = gfc_get_gsymbol (sym->binding_label);\n+      gsym->where = sym->declared_at;\n+      gsym->sym_name = sym->name;\n+      gsym->binding_label = sym->binding_label;\n+      gsym->binding_label = sym->binding_label;\n+      gsym->ns = sym->ns;\n+      gsym->mod_name = module;\n+      if (sym->attr.function)\n+        gsym->type = GSYM_FUNCTION;\n+      else if (sym->attr.subroutine)\n+\tgsym->type = GSYM_SUBROUTINE;\n+      /* Mark as variable/procedure as defined, unless its an INTERFACE.  */\n+      gsym->defined = sym->attr.if_source != IFSRC_IFBODY;\n+      return;\n+    }\n \n-          if (sym->attr.use_assoc == 1)\n-            bind_c_sym->mod_name = sym->module;\n-          else\n-            if (sym->ns->proc_name != NULL)\n-              bind_c_sym->mod_name = sym->ns->proc_name->name;\n+  if (sym->attr.flavor == FL_VARIABLE && gsym->type != GSYM_UNKNOWN)\n+    {\n+      gfc_error (\"Variable %s with binding label %s at %L uses the same global \"\n+\t\t \"identifier as entity at %L\", sym->name,\n+\t\t sym->binding_label, &sym->declared_at, &gsym->where);\n+      /* Clear the binding label to prevent checking multiple times.  */\n+      sym->binding_label = NULL;\n \n-          if (sym->attr.contained == 0)\n-            {\n-              if (sym->attr.subroutine)\n-                bind_c_sym->type = GSYM_SUBROUTINE;\n-              else if (sym->attr.function)\n-                bind_c_sym->type = GSYM_FUNCTION;\n-            }\n-        }\n     }\n-  return;\n+  else if (sym->attr.flavor == FL_VARIABLE\n+\t   && (strcmp (module, gsym->mod_name) != 0\n+\t       || strcmp (sym->name, gsym->sym_name) != 0))\n+    {\n+      /* This can only happen if the variable is defined in a module - if it\n+\t isn't the same module, reject it.  */\n+      gfc_error (\"Variable %s from module %s with binding label %s at %L uses \"\n+\t\t \"the same global identifier as entity at %L from module %s\",\n+\t\t sym->name, module, sym->binding_label,\n+\t\t &sym->declared_at, &gsym->where, gsym->mod_name);\n+      sym->binding_label = NULL;\n+    }\n+  else if ((sym->attr.function || sym->attr.subroutine)\n+\t   && ((gsym->type != GSYM_SUBROUTINE && gsym->type != GSYM_FUNCTION)\n+\t       || (gsym->defined && sym->attr.if_source != IFSRC_IFBODY))\n+\t   && sym != gsym->ns->proc_name\n+\t   && (strcmp (gsym->sym_name, sym->name) != 0\n+\t       || module != gsym->mod_name\n+\t       || (module && strcmp (module, gsym->mod_name) != 0)))\n+    {\n+      /* Print an error if the procdure is defined multiple times; we have to\n+\t exclude references to the same procedure via module association or\n+\t multiple checks for the same procedure.  */\n+      gfc_error (\"Procedure %s with binding label %s at %L uses the same \"\n+\t\t \"global identifier as entity at %L\", sym->name,\n+\t\t sym->binding_label, &sym->declared_at, &gsym->where);\n+      sym->binding_label = NULL;\n+    }\n }\n \n "}, {"sha": "100ec18be5145f4c876897f17fd2fa6628340fec", "filename": "gcc/fortran/trans-decl.c", "status": "modified", "additions": 17, "deletions": 2, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/77f8682b0524f6b534b1da716ee2565757ec7b86/gcc%2Ffortran%2Ftrans-decl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/77f8682b0524f6b534b1da716ee2565757ec7b86/gcc%2Ffortran%2Ftrans-decl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-decl.c?ref=77f8682b0524f6b534b1da716ee2565757ec7b86", "patch": "@@ -1646,6 +1646,14 @@ gfc_get_extern_function_decl (gfc_symbol * sym)\n   gsym =  gfc_find_gsymbol (gfc_gsym_root, sym->binding_label\n \t\t\t\t\t   ? sym->binding_label : sym->name);\n \n+  if (gsym && !gsym->defined)\n+    gsym = NULL;\n+\n+  /* This can happen because of C binding.  */\n+  if (gsym && gsym->ns && gsym->ns->proc_name\n+      && gsym->ns->proc_name->attr.flavor == FL_MODULE)\n+    goto module_sym;\n+\n   if ((!sym->attr.use_assoc || sym->attr.if_source != IFSRC_DECL)\n       && !sym->backend_decl\n       && gsym && gsym->ns\n@@ -1702,12 +1710,19 @@ gfc_get_extern_function_decl (gfc_symbol * sym)\n   if (sym->module)\n     gsym =  gfc_find_gsymbol (gfc_gsym_root, sym->module);\n \n-  if (gsym && gsym->ns && gsym->type == GSYM_MODULE)\n+module_sym:\n+  if (gsym && gsym->ns\n+      && (gsym->type == GSYM_MODULE\n+\t  || (gsym->ns->proc_name && gsym->ns->proc_name->attr.flavor == FL_MODULE)))\n     {\n       gfc_symbol *s;\n \n       s = NULL;\n-      gfc_find_symbol (sym->name, gsym->ns, 0, &s);\n+      if (gsym->type == GSYM_MODULE)\n+\tgfc_find_symbol (sym->name, gsym->ns, 0, &s);\n+      else\n+\tgfc_find_symbol (gsym->sym_name, gsym->ns, 0, &s);\n+\n       if (s && s->backend_decl)\n \t{\n \t  if (sym->ts.type == BT_DERIVED || sym->ts.type == BT_CLASS)"}, {"sha": "41c2ce49dca52a2f33f0e10c3b54477239bcf0f7", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/77f8682b0524f6b534b1da716ee2565757ec7b86/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/77f8682b0524f6b534b1da716ee2565757ec7b86/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=77f8682b0524f6b534b1da716ee2565757ec7b86", "patch": "@@ -1,3 +1,20 @@\n+2013-05-20  Tobias Burnus  <burnus@net-b.de>\n+\n+\tPR fortran/48858\n+\tPR fortran/55465\n+\t* gfortran.dg/binding_label_tests_10_main.f03: Update dg-error.\n+\t* gfortran.dg/binding_label_tests_11_main.f03: Ditto.\n+\t* gfortran.dg/binding_label_tests_13_main.f03: Ditto.\n+\t* gfortran.dg/binding_label_tests_3.f03: Ditto.\n+\t* gfortran.dg/binding_label_tests_4.f03: Ditto.\n+\t* gfortran.dg/binding_label_tests_5.f03: Ditto.\n+\t* gfortran.dg/binding_label_tests_6.f03: Ditto.\n+\t* gfortran.dg/binding_label_tests_7.f03: Ditto.\n+\t* gfortran.dg/binding_label_tests_8.f03: Ditto.\n+\t* gfortran.dg/c_loc_tests_12.f03: Fix test case.\n+\t* gfortran.dg/binding_label_tests_24.f90: New.\n+\t* gfortran.dg/binding_label_tests_25.f90: New.\n+\n 2013-05-20  Tobias Burnus  <burnus@net-b.de>\n \n \tPR fortran/48858"}, {"sha": "2a4a53ba80da4a4f25f0ce98ddea2e02fbe02b73", "filename": "gcc/testsuite/gfortran.dg/binding_label_tests_10_main.f03", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/77f8682b0524f6b534b1da716ee2565757ec7b86/gcc%2Ftestsuite%2Fgfortran.dg%2Fbinding_label_tests_10_main.f03", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/77f8682b0524f6b534b1da716ee2565757ec7b86/gcc%2Ftestsuite%2Fgfortran.dg%2Fbinding_label_tests_10_main.f03", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fbinding_label_tests_10_main.f03?ref=77f8682b0524f6b534b1da716ee2565757ec7b86", "patch": "@@ -4,10 +4,10 @@\n module binding_label_tests_10_main\n   use iso_c_binding\n   implicit none\n-  integer(c_int), bind(c,name=\"c_one\") :: one ! { dg-error \"collides\" }\n+  integer(c_int), bind(c,name=\"c_one\") :: one ! { dg-error \"Variable one from module binding_label_tests_10 with binding label c_one at .1. uses the same global identifier as entity at .2. from module binding_label_tests_10_main\" }\n end module binding_label_tests_10_main\n \n program main\n-  use binding_label_tests_10 ! { dg-error \"collides\" }\n+  use binding_label_tests_10 ! { dg-error \"Variable one from module binding_label_tests_10 with binding label c_one at .1. uses the same global identifier as entity at .2. from module binding_label_tests_10_main\" }\n   use binding_label_tests_10_main\n end program main"}, {"sha": "851c32ce7cdbf5b356c94c0635374e38e17d84cc", "filename": "gcc/testsuite/gfortran.dg/binding_label_tests_11_main.f03", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/77f8682b0524f6b534b1da716ee2565757ec7b86/gcc%2Ftestsuite%2Fgfortran.dg%2Fbinding_label_tests_11_main.f03", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/77f8682b0524f6b534b1da716ee2565757ec7b86/gcc%2Ftestsuite%2Fgfortran.dg%2Fbinding_label_tests_11_main.f03", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fbinding_label_tests_11_main.f03?ref=77f8682b0524f6b534b1da716ee2565757ec7b86", "patch": "@@ -5,14 +5,14 @@ module binding_label_tests_11_main\n   use iso_c_binding, only: c_int\n   implicit none\n contains\n-  function one() bind(c, name=\"c_one\") ! { dg-error \"collides\" }\n+  function one() bind(c, name=\"c_one\") ! { dg-error \"Procedure one with binding label c_one at .1. uses the same global identifier as entity at .2.\" }\n     integer(c_int) one\n     one = 1\n   end function one\n end module binding_label_tests_11_main\n \n program main\n-  use binding_label_tests_11 ! { dg-error \"collides\" }\n+  use binding_label_tests_11 ! { dg-error \"Procedure one with binding label c_one at .1. uses the same global identifier as entity at .2.\" }\n   use binding_label_tests_11_main\n end program main\n ! { dg-final { cleanup-modules \"binding_label_tests_11\" } }"}, {"sha": "da93a8bbd87d6dd7df5911b1b3d545e888764851", "filename": "gcc/testsuite/gfortran.dg/binding_label_tests_13_main.f03", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/77f8682b0524f6b534b1da716ee2565757ec7b86/gcc%2Ftestsuite%2Fgfortran.dg%2Fbinding_label_tests_13_main.f03", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/77f8682b0524f6b534b1da716ee2565757ec7b86/gcc%2Ftestsuite%2Fgfortran.dg%2Fbinding_label_tests_13_main.f03", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fbinding_label_tests_13_main.f03?ref=77f8682b0524f6b534b1da716ee2565757ec7b86", "patch": "@@ -4,12 +4,12 @@\n ! binding_label_tests_13.mod can not be removed until after this test is done.\n module binding_label_tests_13_main\n   use, intrinsic :: iso_c_binding, only: c_int\n-  integer(c_int) :: c3 ! { dg-error \"collides\" }\n+  integer(c_int) :: c3  ! { dg-error \"Variable c3 from module binding_label_tests_13_main with binding label c3 at .1. uses the same global identifier as entity at .2. from module binding_label_tests_13\" }\n   bind(c) c3\n \n contains\n   subroutine c_sub() BIND(c, name = \"C_Sub\")\n-    use binding_label_tests_13 ! { dg-error \"collides\" }\n+    use binding_label_tests_13 ! { dg-error \"Variable c3 from module binding_label_tests_13_main with binding label c3 at .1. uses the same global identifier as entity at .2. from module binding_label_tests_13\" }\n   end subroutine c_sub\n end module binding_label_tests_13_main\n ! { dg-final { cleanup-modules \"binding_label_tests_13\" } }"}, {"sha": "56e68587037b12f23d81e5dee7a3274ce910392f", "filename": "gcc/testsuite/gfortran.dg/binding_label_tests_24.f90", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/77f8682b0524f6b534b1da716ee2565757ec7b86/gcc%2Ftestsuite%2Fgfortran.dg%2Fbinding_label_tests_24.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/77f8682b0524f6b534b1da716ee2565757ec7b86/gcc%2Ftestsuite%2Fgfortran.dg%2Fbinding_label_tests_24.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fbinding_label_tests_24.f90?ref=77f8682b0524f6b534b1da716ee2565757ec7b86", "patch": "@@ -0,0 +1,28 @@\n+! { dg-do compile }\n+!\n+! PR fortran/48858\n+! PR fortran/55465\n+!\n+! Was rejected before but it perfectly valid\n+!\n+module m\n+  interface\n+    subroutine f() bind(C, name=\"func\")\n+    end subroutine\n+  end interface\n+contains\n+  subroutine sub()\n+     call f()\n+  end subroutine\n+end module m\n+\n+module m2\n+  interface\n+    subroutine g() bind(C, name=\"func\")\n+    end subroutine\n+  end interface\n+contains\n+  subroutine sub2()\n+     call g()\n+  end subroutine\n+end module m2"}, {"sha": "0769eb05de1f8b52e54d29d4aee07c7ab099addc", "filename": "gcc/testsuite/gfortran.dg/binding_label_tests_25.f90", "status": "added", "additions": 61, "deletions": 0, "changes": 61, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/77f8682b0524f6b534b1da716ee2565757ec7b86/gcc%2Ftestsuite%2Fgfortran.dg%2Fbinding_label_tests_25.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/77f8682b0524f6b534b1da716ee2565757ec7b86/gcc%2Ftestsuite%2Fgfortran.dg%2Fbinding_label_tests_25.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fbinding_label_tests_25.f90?ref=77f8682b0524f6b534b1da716ee2565757ec7b86", "patch": "@@ -0,0 +1,61 @@\n+! { dg-do compile }\n+!\n+! PR fortran/48858\n+! PR fortran/55465\n+!\n+! Seems to be regarded as valid, even if it is doubtful\n+!\n+\n+\n+module m_odbc_if\n+  implicit none\n+\n+  interface sql_set_env_attr\n+    function sql_set_env_attr_int( input_handle,attribute,value,length ) &\n+                                   result(res) bind(C,name=\"SQLSetEnvAttr\")\n+      use, intrinsic :: iso_c_binding\n+      implicit none\n+      type(c_ptr), value :: input_handle\n+      integer(c_int), value :: attribute\n+      integer(c_int), value :: value  ! <<<< HERE: int passed by value (int with ptr address)\n+      integer(c_int), value :: length      \n+      integer(c_short) :: res\n+    end function\n+    function sql_set_env_attr_ptr( input_handle,attribute,value,length ) &\n+                                   result(res) bind(C,name=\"SQLSetEnvAttr\")\n+      use, intrinsic :: iso_c_binding\n+      implicit none\n+      type(c_ptr), value :: input_handle\n+      integer(c_int), value :: attribute\n+      type(c_ptr), value :: value ! <<< HERE: \"void *\" (pointer address)\n+      integer(c_int), value :: length      \n+      integer(c_short) :: res\n+    end function\n+  end interface\n+end module\n+\n+module graph_partitions\n+  use,intrinsic :: iso_c_binding\n+\n+  interface Cfun\n+     subroutine cfunc1 (num, array) bind(c, name=\"Cfun\")\n+       import :: c_int\n+       integer(c_int),value :: num\n+       integer(c_int)       :: array(*) ! <<< HERE: int[]\n+     end subroutine cfunc1\n+\n+     subroutine cfunf2 (num, array) bind(c, name=\"Cfun\")\n+       import :: c_int, c_ptr\n+       integer(c_int),value :: num\n+       type(c_ptr),value    :: array ! <<< HERE: void*\n+     end subroutine cfunf2\n+  end interface\n+end module graph_partitions\n+\n+program test\n+  use graph_partitions\n+  integer(c_int) :: a(100)\n+\n+  call Cfun (1, a)\n+  call Cfun (2, C_NULL_PTR)\n+end program test"}, {"sha": "429fa0b0e840f35275166f5d468e46c1f567333b", "filename": "gcc/testsuite/gfortran.dg/binding_label_tests_3.f03", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/77f8682b0524f6b534b1da716ee2565757ec7b86/gcc%2Ftestsuite%2Fgfortran.dg%2Fbinding_label_tests_3.f03", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/77f8682b0524f6b534b1da716ee2565757ec7b86/gcc%2Ftestsuite%2Fgfortran.dg%2Fbinding_label_tests_3.f03", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fbinding_label_tests_3.f03?ref=77f8682b0524f6b534b1da716ee2565757ec7b86", "patch": "@@ -2,14 +2,14 @@\n program main\n use iso_c_binding\n   interface\n-     subroutine p1(f, a1, a2, a3, a4) bind(c, name='printf') ! { dg-error \"collides\" }\n+     subroutine p1(f, a1, a2, a3, a4) bind(c, name='printf') ! Doubtful use ...\n        import :: c_ptr, c_int, c_double\n        type(c_ptr), value :: f\n        integer(c_int), value :: a1, a3\n        real(c_double), value :: a2, a4\n      end subroutine p1\n \n-     subroutine p2(f, a1, a2, a3, a4) bind(c, name='printf') ! { dg-error \"collides\" }\n+     subroutine p2(f, a1, a2, a3, a4) bind(c, name='printf') ! ... with incompatible interfaces\n        import :: c_ptr, c_int, c_double\n        type(c_ptr), value :: f\n        real(c_double), value :: a1, a3"}, {"sha": "455726e75d0fe13b186f6ec27172252c089bd03a", "filename": "gcc/testsuite/gfortran.dg/binding_label_tests_4.f03", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/77f8682b0524f6b534b1da716ee2565757ec7b86/gcc%2Ftestsuite%2Fgfortran.dg%2Fbinding_label_tests_4.f03", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/77f8682b0524f6b534b1da716ee2565757ec7b86/gcc%2Ftestsuite%2Fgfortran.dg%2Fbinding_label_tests_4.f03", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fbinding_label_tests_4.f03?ref=77f8682b0524f6b534b1da716ee2565757ec7b86", "patch": "@@ -2,7 +2,7 @@\n module A\n   use, intrinsic :: iso_c_binding\n contains\n-  subroutine pA() bind(c, name='printf') ! { dg-error \"collides\" }\n+  subroutine pA() bind(c, name='printf') ! { dg-error \"Procedure pb with binding label printf at .1. uses the same global identifier as entity at .2.\" }\n     print *, 'hello from pA'\n   end subroutine pA\n end module A\n@@ -11,7 +11,7 @@ module B\n   use, intrinsic :: iso_c_binding\n \n contains\n-  subroutine pB() bind(c, name='printf') ! { dg-error \"collides\" }\n+  subroutine pB() bind(c, name='printf') ! { dg-error \"Procedure pb with binding label printf at .1. uses the same global identifier as entity at .2.\" }\n     print *, 'hello from pB'\n   end subroutine pB\n end module B"}, {"sha": "41999b3e60dfa2b6d95a026fb36eb1d9a9c16d69", "filename": "gcc/testsuite/gfortran.dg/binding_label_tests_5.f03", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/77f8682b0524f6b534b1da716ee2565757ec7b86/gcc%2Ftestsuite%2Fgfortran.dg%2Fbinding_label_tests_5.f03", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/77f8682b0524f6b534b1da716ee2565757ec7b86/gcc%2Ftestsuite%2Fgfortran.dg%2Fbinding_label_tests_5.f03", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fbinding_label_tests_5.f03?ref=77f8682b0524f6b534b1da716ee2565757ec7b86", "patch": "@@ -3,10 +3,10 @@ module binding_label_tests_5\n   use, intrinsic :: iso_c_binding\n   \n   interface\n-     subroutine sub0() bind(c, name='c_sub') ! { dg-error \"collides\" }\n+     subroutine sub0() bind(c, name='c_sub') ! Odd declaration but perfectly valid\n      end subroutine sub0\n      \n-     subroutine sub1() bind(c, name='c_sub') ! { dg-error \"collides\" }\n+     subroutine sub1() bind(c, name='c_sub') ! Ditto.\n      end subroutine sub1\n   end interface\n end module binding_label_tests_5"}, {"sha": "d213819f20b38284aec59d9985477ef6ae945d5a", "filename": "gcc/testsuite/gfortran.dg/binding_label_tests_6.f03", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/77f8682b0524f6b534b1da716ee2565757ec7b86/gcc%2Ftestsuite%2Fgfortran.dg%2Fbinding_label_tests_6.f03", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/77f8682b0524f6b534b1da716ee2565757ec7b86/gcc%2Ftestsuite%2Fgfortran.dg%2Fbinding_label_tests_6.f03", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fbinding_label_tests_6.f03?ref=77f8682b0524f6b534b1da716ee2565757ec7b86", "patch": "@@ -1,6 +1,6 @@\n ! { dg-do compile }\n module binding_label_tests_6\n   use, intrinsic :: iso_c_binding\n-  integer(c_int), bind(c, name='my_int') :: my_f90_int_1 ! { dg-error \"collides\" }\n-  integer(c_int), bind(c, name='my_int') :: my_f90_int_2 ! { dg-error \"collides\" }\n+  integer(c_int), bind(c, name='my_int') :: my_f90_int_1 ! { dg-error \"Variable my_f90_int_2 from module binding_label_tests_6 with binding label my_int at .1. uses the same global identifier as entity at .2. from module binding_label_tests_6\" }\n+  integer(c_int), bind(c, name='my_int') :: my_f90_int_2 ! { dg-error \"Variable my_f90_int_2 from module binding_label_tests_6 with binding label my_int at .1. uses the same global identifier as entity at .2. from module binding_label_tests_6\" }\n end module binding_label_tests_6"}, {"sha": "1e261a995b87cb71c1f6ed047ad9d65e1fcc664d", "filename": "gcc/testsuite/gfortran.dg/binding_label_tests_7.f03", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/77f8682b0524f6b534b1da716ee2565757ec7b86/gcc%2Ftestsuite%2Fgfortran.dg%2Fbinding_label_tests_7.f03", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/77f8682b0524f6b534b1da716ee2565757ec7b86/gcc%2Ftestsuite%2Fgfortran.dg%2Fbinding_label_tests_7.f03", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fbinding_label_tests_7.f03?ref=77f8682b0524f6b534b1da716ee2565757ec7b86", "patch": "@@ -1,13 +1,13 @@\n ! { dg-do compile }\n module A\n   use, intrinsic :: iso_c_binding, only: c_int\n-  integer(c_int), bind(c, name='my_c_print') :: my_int ! { dg-error \"collides\" }\n+  integer(c_int), bind(c, name='my_c_print') :: my_int ! { dg-error \"Procedure my_c_print with binding label my_c_print at .1. uses the same global identifier as entity at .2.\" }\n end module A\n \n program main\n use A\n interface\n-   subroutine my_c_print() bind(c) ! { dg-error \"collides\" }\n+   subroutine my_c_print() bind(c) ! { dg-error \"Procedure my_c_print with binding label my_c_print at .1. uses the same global identifier as entity at .2.\" }\n    end subroutine my_c_print\n end interface\n "}, {"sha": "2f507b9e2334918ad07b39a93a45726dc48660b6", "filename": "gcc/testsuite/gfortran.dg/binding_label_tests_8.f03", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/77f8682b0524f6b534b1da716ee2565757ec7b86/gcc%2Ftestsuite%2Fgfortran.dg%2Fbinding_label_tests_8.f03", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/77f8682b0524f6b534b1da716ee2565757ec7b86/gcc%2Ftestsuite%2Fgfortran.dg%2Fbinding_label_tests_8.f03", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fbinding_label_tests_8.f03?ref=77f8682b0524f6b534b1da716ee2565757ec7b86", "patch": "@@ -1,9 +1,9 @@\n ! { dg-do compile }\n module binding_label_tests_8\n   use, intrinsic :: iso_c_binding, only: c_int\n-  integer(c_int), bind(c, name='my_f90_sub') :: my_c_int ! { dg-error \"collides\" }\n+  integer(c_int), bind(c, name='my_f90_sub') :: my_c_int  ! { dg-error \"Variable my_c_int with binding label my_f90_sub at .1. uses the same global identifier as entity at .2.\" }\n \n contains\n-  subroutine my_f90_sub() bind(c) ! { dg-error \"collides\" }\n+  subroutine my_f90_sub() bind(c) ! { dg-error \"Variable my_c_int with binding label my_f90_sub at .1. uses the same global identifier as entity at .2.\" }\n   end subroutine my_f90_sub\n end module binding_label_tests_8"}, {"sha": "9ebfd08ec59e31b0471d146f1b18038380e229ec", "filename": "gcc/testsuite/gfortran.dg/c_loc_tests_12.f03", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/77f8682b0524f6b534b1da716ee2565757ec7b86/gcc%2Ftestsuite%2Fgfortran.dg%2Fc_loc_tests_12.f03", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/77f8682b0524f6b534b1da716ee2565757ec7b86/gcc%2Ftestsuite%2Fgfortran.dg%2Fc_loc_tests_12.f03", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fc_loc_tests_12.f03?ref=77f8682b0524f6b534b1da716ee2565757ec7b86", "patch": "@@ -23,7 +23,7 @@ program test2\n   interface\n     subroutine sub1(argv) bind(c)\n       import\n-      type(c_ptr) :: argv\n+      type(c_ptr), intent(in) :: argv\n     end subroutine sub1\n   end interface\n   call sub1(c_loc(argv))"}]}