{"sha": "10c224a9b0780fe3ae5d83a588046887203f2285", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTBjMjI0YTliMDc4MGZlM2FlNWQ4M2E1ODgwNDY4ODcyMDNmMjI4NQ==", "commit": {"author": {"name": "Richard Guenther", "email": "rguenther@suse.de", "date": "2011-05-11T10:52:57Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2011-05-11T10:52:57Z"}, "message": "re PR middle-end/18041 (OR of two single-bit bitfields is inefficient)\n\n2011-05-11  Richard Guenther  <rguenther@suse.de>\n\n\tPR tree-optimization/18041\n\t* tree-ssa-forwprop.c (simplify_bitwise_and): Rename to ...\n\t(simplify_bitwise_binary): ... this.  Handle operand conversions\n\tby applying them to the result instead.\n\t(tree_ssa_forward_propagate_single_use_vars): Adjust.  CSE tree code.\n\n\t* gcc.dg/tree-ssa/forwprop-13.c: New testcase.\n\nFrom-SVN: r173650", "tree": {"sha": "fd9a3746cb25bbcc5e49f7019b461cb872498273", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/fd9a3746cb25bbcc5e49f7019b461cb872498273"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/10c224a9b0780fe3ae5d83a588046887203f2285", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/10c224a9b0780fe3ae5d83a588046887203f2285", "html_url": "https://github.com/Rust-GCC/gccrs/commit/10c224a9b0780fe3ae5d83a588046887203f2285", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/10c224a9b0780fe3ae5d83a588046887203f2285/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "825b27deb98d103766b049ec879ccc423707467b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/825b27deb98d103766b049ec879ccc423707467b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/825b27deb98d103766b049ec879ccc423707467b"}], "stats": {"total": 155, "additions": 116, "deletions": 39}, "files": [{"sha": "98795b8cdf908bba48cb78a83454ef0dead14f1e", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/10c224a9b0780fe3ae5d83a588046887203f2285/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/10c224a9b0780fe3ae5d83a588046887203f2285/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=10c224a9b0780fe3ae5d83a588046887203f2285", "patch": "@@ -1,3 +1,11 @@\n+2011-05-11  Richard Guenther  <rguenther@suse.de>\n+\n+\tPR tree-optimization/18041\n+\t* tree-ssa-forwprop.c (simplify_bitwise_and): Rename to ...\n+\t(simplify_bitwise_binary): ... this.  Handle operand conversions\n+\tby applying them to the result instead.\n+\t(tree_ssa_forward_propagate_single_use_vars): Adjust.  CSE tree code.\n+\n 2011-05-11  Richard Guenther  <rguenther@suse.de>\n \n \t* gimple.c (gimple_canonical_types_compatible_p): Split out"}, {"sha": "becc9781918ef3cbb9ad48faaf1256610d066c0a", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/10c224a9b0780fe3ae5d83a588046887203f2285/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/10c224a9b0780fe3ae5d83a588046887203f2285/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=10c224a9b0780fe3ae5d83a588046887203f2285", "patch": "@@ -1,3 +1,8 @@\n+2011-05-11  Richard Guenther  <rguenther@suse.de>\n+\n+\tPR tree-optimization/18041\n+\t* gcc.dg/tree-ssa/forwprop-13.c: New testcase.\n+\n 2011-05-11  Alan Modra  <amodra@gmail.com>\n \n \tPR target/47755"}, {"sha": "aab4ff6febe6192248c05ac2a7f5facebb6ac001", "filename": "gcc/testsuite/gcc.dg/tree-ssa/forwprop-13.c", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/10c224a9b0780fe3ae5d83a588046887203f2285/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fforwprop-13.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/10c224a9b0780fe3ae5d83a588046887203f2285/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fforwprop-13.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fforwprop-13.c?ref=10c224a9b0780fe3ae5d83a588046887203f2285", "patch": "@@ -0,0 +1,16 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O -fdump-tree-optimized\" } */\n+\n+struct B {\n+    unsigned bit0 : 1;\n+    unsigned bit1 : 1;\n+};\n+\n+void\n+foo (struct B *b)\n+{\n+  b->bit0 = b->bit0 | b->bit1;\n+}\n+\n+/* { dg-final { scan-tree-dump-not \"\\\\\\(unsigned\" \"optimized\" } } */\n+/* { dg-final { cleanup-tree-dump \"optimized\" } } */"}, {"sha": "02d9523886609f63f565361b176db5df24a3d46d", "filename": "gcc/tree-ssa-forwprop.c", "status": "modified", "additions": 87, "deletions": 39, "changes": 126, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/10c224a9b0780fe3ae5d83a588046887203f2285/gcc%2Ftree-ssa-forwprop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/10c224a9b0780fe3ae5d83a588046887203f2285/gcc%2Ftree-ssa-forwprop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-forwprop.c?ref=10c224a9b0780fe3ae5d83a588046887203f2285", "patch": "@@ -1612,44 +1612,90 @@ simplify_builtin_call (gimple_stmt_iterator *gsi_p, tree callee2)\n   return false;\n }\n \n-/* Run bitwise and assignments throug the folder.  If the first argument is an\n-   ssa name that is itself a result of a typecast of an ADDR_EXPR to an\n-   integer, feed the ADDR_EXPR to the folder rather than the ssa name.\n-*/\n+/* Simplify bitwise binary operations.\n+   Return true if a transformation applied, otherwise return false.  */\n \n-static void\n-simplify_bitwise_and (gimple_stmt_iterator *gsi, gimple stmt)\n+static bool\n+simplify_bitwise_binary (gimple_stmt_iterator *gsi)\n {\n-  tree res;\n+  gimple stmt = gsi_stmt (*gsi);\n   tree arg1 = gimple_assign_rhs1 (stmt);\n   tree arg2 = gimple_assign_rhs2 (stmt);\n+  enum tree_code code = gimple_assign_rhs_code (stmt);\n+  tree res;\n \n-  if (TREE_CODE (arg2) != INTEGER_CST)\n-    return;\n-\n-  if (TREE_CODE (arg1) == SSA_NAME && !SSA_NAME_IS_DEFAULT_DEF (arg1))\n+  /* If the first argument is an SSA name that is itself a result of a\n+     typecast of an ADDR_EXPR to an integer, feed the ADDR_EXPR to the\n+     folder rather than the ssa name.  */\n+  if (code == BIT_AND_EXPR\n+      && TREE_CODE (arg2) == INTEGER_CST\n+      && TREE_CODE (arg1) == SSA_NAME)\n     {\n       gimple def = SSA_NAME_DEF_STMT (arg1);\n+      tree op = arg1;\n \n-      if (gimple_assign_cast_p (def)\n-\t  && INTEGRAL_TYPE_P (gimple_expr_type (def)))\n+      /* ???  This looks bogus - the conversion could be truncating.  */\n+      if (is_gimple_assign (def)\n+\t  && CONVERT_EXPR_CODE_P (gimple_assign_rhs_code (def))\n+\t  && INTEGRAL_TYPE_P (TREE_TYPE (arg1)))\n \t{\n-\t  tree op = gimple_assign_rhs1 (def);\n+\t  tree opp = gimple_assign_rhs1 (def);\n+\t  if (TREE_CODE (opp) == ADDR_EXPR)\n+\t    op = opp;\n+\t}\n \n-\t  if (TREE_CODE (op) == ADDR_EXPR)\n-\t    arg1 = op;\n+      res = fold_binary_loc (gimple_location (stmt),\n+\t\t\t     BIT_AND_EXPR, TREE_TYPE (gimple_assign_lhs (stmt)),\n+\t\t\t     op, arg2);\n+      if (res && is_gimple_min_invariant (res))\n+\t{\n+\t  gimple_assign_set_rhs_from_tree (gsi, res);\n+\t  update_stmt (stmt);\n+\t  return true;\n \t}\n     }\n \n-  res = fold_binary_loc (gimple_location (stmt),\n-\t\t     BIT_AND_EXPR, TREE_TYPE (gimple_assign_lhs (stmt)),\n-\t\t     arg1, arg2);\n-  if (res && is_gimple_min_invariant (res))\n+  /* For bitwise binary operations apply operand conversions to the\n+     binary operation result instead of to the operands.  This allows\n+     to combine successive conversions and bitwise binary operations.  */\n+  if (TREE_CODE (arg1) == SSA_NAME\n+      && TREE_CODE (arg2) == SSA_NAME)\n     {\n-      gimple_assign_set_rhs_from_tree (gsi, res);\n-      update_stmt (stmt);\n+      gimple def_stmt1 = SSA_NAME_DEF_STMT (arg1);\n+      gimple def_stmt2 = SSA_NAME_DEF_STMT (arg2);\n+      if (is_gimple_assign (def_stmt1)\n+\t  && is_gimple_assign (def_stmt2)\n+\t  && CONVERT_EXPR_CODE_P (gimple_assign_rhs_code (def_stmt1))\n+\t  && CONVERT_EXPR_CODE_P (gimple_assign_rhs_code (def_stmt2)))\n+\t{\n+\t  tree darg1 = gimple_assign_rhs1 (def_stmt1);\n+\t  tree darg2 = gimple_assign_rhs1 (def_stmt2);\n+\t  /* Make sure that the conversion widens the operands or that it\n+\t     changes the operation to a bitfield precision.  */\n+\t  if (types_compatible_p (TREE_TYPE (darg1), TREE_TYPE (darg2))\n+\t      && ((TYPE_PRECISION (TREE_TYPE (darg1))\n+\t\t   < TYPE_PRECISION (TREE_TYPE (arg1)))\n+\t\t  || (GET_MODE_CLASS (TYPE_MODE (TREE_TYPE (arg1)))\n+\t\t      != MODE_INT)\n+\t\t  || (TYPE_PRECISION (TREE_TYPE (arg1))\n+\t\t      != GET_MODE_PRECISION (TYPE_MODE (TREE_TYPE (arg1))))))\n+\t    {\n+\t      gimple newop;\n+\t      tree tem = create_tmp_reg (TREE_TYPE (darg1),\n+\t\t\t\t\t NULL);\n+\t      newop = gimple_build_assign_with_ops (code, tem, darg1, darg2);\n+\t      tem = make_ssa_name (tem, newop);\n+\t      gimple_assign_set_lhs (newop, tem);\n+\t      gsi_insert_before (gsi, newop, GSI_SAME_STMT);\n+\t      gimple_assign_set_rhs_with_ops_1 (gsi, NOP_EXPR,\n+\t\t\t\t\t\ttem, NULL_TREE, NULL_TREE);\n+\t      update_stmt (gsi_stmt (*gsi));\n+\t      return true;\n+\t    }\n+\t}\n     }\n-  return;\n+\n+  return false;\n }\n \n \n@@ -2123,17 +2169,18 @@ tree_ssa_forward_propagate_single_use_vars (void)\n \t    {\n \t      tree lhs = gimple_assign_lhs (stmt);\n \t      tree rhs = gimple_assign_rhs1 (stmt);\n+\t      enum tree_code code = gimple_assign_rhs_code (stmt);\n \n \t      if (TREE_CODE (lhs) != SSA_NAME)\n \t\t{\n \t\t  gsi_next (&gsi);\n \t\t  continue;\n \t\t}\n \n-\t      if (gimple_assign_rhs_code (stmt) == ADDR_EXPR\n+\t      if (code == ADDR_EXPR\n \t\t  /* Handle pointer conversions on invariant addresses\n \t\t     as well, as this is valid gimple.  */\n-\t\t  || (CONVERT_EXPR_CODE_P (gimple_assign_rhs_code (stmt))\n+\t\t  || (CONVERT_EXPR_CODE_P (code)\n \t\t      && TREE_CODE (rhs) == ADDR_EXPR\n \t\t      && POINTER_TYPE_P (TREE_TYPE (lhs))))\n \t\t{\n@@ -2151,7 +2198,7 @@ tree_ssa_forward_propagate_single_use_vars (void)\n \t\t  else\n \t\t    gsi_next (&gsi);\n \t\t}\n-\t      else if (gimple_assign_rhs_code (stmt) == POINTER_PLUS_EXPR\n+\t      else if (code == POINTER_PLUS_EXPR\n \t\t       && can_propagate_from (stmt))\n \t\t{\n \t\t  if (TREE_CODE (gimple_assign_rhs2 (stmt)) == INTEGER_CST\n@@ -2183,14 +2230,14 @@ tree_ssa_forward_propagate_single_use_vars (void)\n \t\t  else\n \t\t    gsi_next (&gsi);\n \t\t}\n-\t      else if ((gimple_assign_rhs_code (stmt) == BIT_NOT_EXPR\n-\t\t        || gimple_assign_rhs_code (stmt) == NEGATE_EXPR)\n+\t      else if ((code == BIT_NOT_EXPR\n+\t\t        || code == NEGATE_EXPR)\n \t\t       && TREE_CODE (rhs) == SSA_NAME)\n \t\t{\n \t\t  simplify_not_neg_expr (&gsi);\n \t\t  gsi_next (&gsi);\n \t\t}\n-\t      else if (gimple_assign_rhs_code (stmt) == COND_EXPR)\n+\t      else if (code == COND_EXPR)\n                 {\n                   /* In this case the entire COND_EXPR is in rhs1. */\n \t\t  int did_something;\n@@ -2203,27 +2250,28 @@ tree_ssa_forward_propagate_single_use_vars (void)\n \t\t    && did_something, stmt, WARN_STRICT_OVERFLOW_CONDITIONAL);\n \t\t  gsi_next (&gsi);\n                 }\n-\t      else if (TREE_CODE_CLASS (gimple_assign_rhs_code (stmt))\n-\t\t\t\t\t== tcc_comparison)\n+\t      else if (TREE_CODE_CLASS (code) == tcc_comparison)\n \t\t{\n \t\t  if (forward_propagate_comparison (stmt))\n \t\t    cfg_changed = true;\n \t\t  gsi_next (&gsi);\n \t\t}\n-\t      else if (gimple_assign_rhs_code (stmt) == BIT_AND_EXPR)\n+\t      else if (code == BIT_AND_EXPR\n+\t\t       || code == BIT_IOR_EXPR\n+\t\t       || code == BIT_XOR_EXPR)\n \t\t{\n-\t\t  simplify_bitwise_and (&gsi, stmt);\n-\t\t  gsi_next (&gsi);\n+\t\t  if (!simplify_bitwise_binary (&gsi))\n+\t\t    gsi_next (&gsi);\n \t\t}\n-\t      else if (gimple_assign_rhs_code (stmt) == PLUS_EXPR\n-\t\t       || gimple_assign_rhs_code (stmt) == MINUS_EXPR)\n+\t      else if (code == PLUS_EXPR\n+\t\t       || code == MINUS_EXPR)\n \t\t{\n \t\t  cfg_changed |= associate_plusminus (stmt);\n \t\t  gsi_next (&gsi);\n \t\t}\n-\t      else if (CONVERT_EXPR_CODE_P (gimple_assign_rhs_code (stmt))\n-\t\t       || gimple_assign_rhs_code (stmt) == FLOAT_EXPR\n-\t\t       || gimple_assign_rhs_code (stmt) == FIX_TRUNC_EXPR)\n+\t      else if (CONVERT_EXPR_CODE_P (code)\n+\t\t       || code == FLOAT_EXPR\n+\t\t       || code == FIX_TRUNC_EXPR)\n \t\t{\n \t\t  if (!combine_conversions (&gsi))\n \t\t    gsi_next (&gsi);"}]}