{"sha": "f7df23be90f2f2d73234546a192271007c29d5cc", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjdkZjIzYmU5MGYyZjJkNzMyMzQ1NDZhMTkyMjcxMDA3YzI5ZDVjYw==", "commit": {"author": {"name": "Roger Sayle", "email": "roger@eyesopen.com", "date": "2003-06-12T12:53:01Z"}, "committer": {"name": "Roger Sayle", "email": "sayle@gcc.gnu.org", "date": "2003-06-12T12:53:01Z"}, "message": "fold-const.c (tree_expr_nonnegative_p): Add support for floating point constants, addition and multiplication.\n\n\n\t* fold-const.c (tree_expr_nonnegative_p): Add support for\n\tfloating point constants, addition and multiplication.\n\n\t* gcc.dg/builtins-21.c: New test case.\n\nFrom-SVN: r67828", "tree": {"sha": "bee1e78d630354a7ade37f1018887b2ec4c5cb43", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/bee1e78d630354a7ade37f1018887b2ec4c5cb43"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f7df23be90f2f2d73234546a192271007c29d5cc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f7df23be90f2f2d73234546a192271007c29d5cc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f7df23be90f2f2d73234546a192271007c29d5cc", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f7df23be90f2f2d73234546a192271007c29d5cc/comments", "author": null, "committer": null, "parents": [{"sha": "38b3ef8be6733c9b911cf9fac07d92d22d5b057c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/38b3ef8be6733c9b911cf9fac07d92d22d5b057c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/38b3ef8be6733c9b911cf9fac07d92d22d5b057c"}], "stats": {"total": 86, "additions": 85, "deletions": 1}, "files": [{"sha": "87d86d7217d5ce27624a8426439b93c55b2f8aa0", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f7df23be90f2f2d73234546a192271007c29d5cc/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f7df23be90f2f2d73234546a192271007c29d5cc/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=f7df23be90f2f2d73234546a192271007c29d5cc", "patch": "@@ -1,3 +1,8 @@\n+2003-06-12  Roger Sayle  <roger@eyesopen.com>\n+\n+\t* fold-const.c (tree_expr_nonnegative_p): Add support for\n+\tfloating point constants, addition and multiplication.\n+\n 2003-06-12  J\"orn Rennecke <joern.rennecke@superh.com>\n \n \t* sh.md (adddi3_compact, subdi3_compact): Add earlyclobber"}, {"sha": "b3271a2c6dadc33e4547738961e1ca913d2dcfdc", "filename": "gcc/fold-const.c", "status": "modified", "additions": 21, "deletions": 1, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f7df23be90f2f2d73234546a192271007c29d5cc/gcc%2Ffold-const.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f7df23be90f2f2d73234546a192271007c29d5cc/gcc%2Ffold-const.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffold-const.c?ref=f7df23be90f2f2d73234546a192271007c29d5cc", "patch": "@@ -8014,9 +8014,29 @@ tree_expr_nonnegative_p (t)\n \t C[LT]Z_DEFINED_VALUE_AT_ZERO is set, since what we're\n \t computing here is a user-visible property.  */\n       return 0;\n-      \n+\n     case INTEGER_CST:\n       return tree_int_cst_sgn (t) >= 0;\n+\n+    case REAL_CST:\n+      return ! REAL_VALUE_NEGATIVE (TREE_REAL_CST (t));\n+\n+    case PLUS_EXPR:\n+      return FLOAT_TYPE_P (TREE_TYPE (t))\n+\t     && tree_expr_nonnegative_p (TREE_OPERAND (t, 0))\n+\t     && tree_expr_nonnegative_p (TREE_OPERAND (t, 1));\n+\n+    case MULT_EXPR:\n+      if (FLOAT_TYPE_P (TREE_TYPE (t)))\n+\t{\n+\t  /* x * x for floating point x is always non-negative.  */\n+\t  if (operand_equal_p (TREE_OPERAND (t, 0), TREE_OPERAND (t, 1), 0))\n+\t    return 1;\n+\t  return tree_expr_nonnegative_p (TREE_OPERAND (t, 0))\n+\t\t && tree_expr_nonnegative_p (TREE_OPERAND (t, 1));\n+\t}\n+      return 0;\n+\n     case TRUNC_DIV_EXPR:\n     case CEIL_DIV_EXPR:\n     case FLOOR_DIV_EXPR:"}, {"sha": "704694ab33c69e16400192e07d17ccc1d44b067b", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f7df23be90f2f2d73234546a192271007c29d5cc/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f7df23be90f2f2d73234546a192271007c29d5cc/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=f7df23be90f2f2d73234546a192271007c29d5cc", "patch": "@@ -1,3 +1,7 @@\n+2003-06-12  Roger Sayle  <roger@eyesopen.com>\n+\n+\t* gcc.dg/builtins-21.c: New test case.\n+\n 2003-06-11  Kelley Cook  <kelleycook@wideopenwest.com>\n \n \t* lib/gcc.exp (gcc_target_compile): Put TOOL_OPTIONS at front of"}, {"sha": "38d0c4f3114675589033c70b5ba8a992b82e90fe", "filename": "gcc/testsuite/gcc.dg/builtins-21.c", "status": "added", "additions": 55, "deletions": 0, "changes": 55, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f7df23be90f2f2d73234546a192271007c29d5cc/gcc%2Ftestsuite%2Fgcc.dg%2Fbuiltins-21.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f7df23be90f2f2d73234546a192271007c29d5cc/gcc%2Ftestsuite%2Fgcc.dg%2Fbuiltins-21.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fbuiltins-21.c?ref=f7df23be90f2f2d73234546a192271007c29d5cc", "patch": "@@ -0,0 +1,55 @@\n+/* Copyright (C) 2003  Free Software Foundation.\n+\n+   Verify that built-in math function constant folding doesn't\n+   cause any problems for the compiler.\n+\n+   Written by Roger Sayle, 7th June 2003.  */\n+\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -ffast-math\" } */\n+\n+double test1(double x)\n+{\n+  return fabs(x*x);\n+}\n+\n+double test2(double x)\n+{\n+  return fabs(sqrt(x)+2.0);\n+}\n+\n+double test3(double x)\n+{\n+  return fabs(3.0*exp(x));\n+}\n+\n+float test1f(float x)\n+{\n+  return fabsf(x*x);\n+}\n+\n+float test2f(float x)\n+{\n+  return fabsf(sqrtf(x)+2.0f);\n+}\n+\n+float test3f(float x)\n+{\n+  return fabsf(3.0f*expf(x));\n+}\n+\n+long double test1l(long double x)\n+{\n+  return fabsl(x*x);\n+}\n+\n+long double test2l(long double x)\n+{\n+  return fabsl(sqrtl(x)+2.0l);\n+}\n+\n+long double test3l(long double x)\n+{\n+  return fabsl(3.0l*expl(x));\n+}\n+"}]}