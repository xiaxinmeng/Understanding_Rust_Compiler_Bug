{"sha": "13e4ba28f36817eec190fbd0dccd1f4aa99875a1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTNlNGJhMjhmMzY4MTdlZWMxOTBmYmQwZGNjZDFmNGFhOTk4NzVhMQ==", "commit": {"author": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2020-09-01T00:16:25Z"}, "committer": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2020-09-01T00:16:25Z"}, "message": "Daily bump.", "tree": {"sha": "098ad988a42e9276d1c353b8298464a61cc2288b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/098ad988a42e9276d1c353b8298464a61cc2288b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/13e4ba28f36817eec190fbd0dccd1f4aa99875a1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/13e4ba28f36817eec190fbd0dccd1f4aa99875a1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/13e4ba28f36817eec190fbd0dccd1f4aa99875a1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/13e4ba28f36817eec190fbd0dccd1f4aa99875a1/comments", "author": null, "committer": null, "parents": [{"sha": "1da918e153b60ef81686dc5cd110d8608d962c79", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1da918e153b60ef81686dc5cd110d8608d962c79", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1da918e153b60ef81686dc5cd110d8608d962c79"}], "stats": {"total": 219, "additions": 218, "deletions": 1}, "files": [{"sha": "8344212cf3757a872cb1486abb92d3b2baa0c490", "filename": "gcc/ChangeLog", "status": "modified", "additions": 58, "deletions": 0, "changes": 58, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/13e4ba28f36817eec190fbd0dccd1f4aa99875a1/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/13e4ba28f36817eec190fbd0dccd1f4aa99875a1/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=13e4ba28f36817eec190fbd0dccd1f4aa99875a1", "patch": "@@ -1,3 +1,61 @@\n+2020-08-31  Carl Love  <cel@us.ibm.com>\n+\n+\tPR target/85830\n+\t* config/rs6000/altivec.h (vec_popcntb, vec_popcnth, vec_popcntw,\n+\tvec_popcntd): Remove defines.\n+\n+2020-08-31  Marek Polacek  <polacek@redhat.com>\n+\t    Jason Merrill  <jason@redhat.com>\n+\n+\tPR c++/93529\n+\t* tree.c (build_constructor_from_vec): New.\n+\t* tree.h (build_constructor_from_vec): Declare.\n+\n+2020-08-31  Aldy Hernandez  <aldyh@redhat.com>\n+\n+\tPR tree-optimization/96818\n+\t* tree-vrp.c (find_case_label_range): Cast label range to\n+\ttype of switch operand.\n+\n+2020-08-31  liuhongt  <hongtao.liu@intel.com>\n+\n+\tPR target/96551\n+\t* config/i386/sse.md (vec_unpacku_float_hi_v16si): For vector\n+\tcompare to integer mask, don't use gen_rtx_LT, use\n+\tix86_expand_mask_vec_cmp instead.\n+\t(vec_unpacku_float_hi_v16si): Ditto.\n+\n+2020-08-31  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* tree-cfg.c (verify_gimple_switch): If the first non-default case\n+\tlabel has CASE_HIGH, verify it has the same type as CASE_LOW.\n+\n+2020-08-31  Feng Xue  <fxue@os.amperecomputing.com>\n+\n+\tPR tree-optimization/96806\n+\t* ipa-cp.c (decide_about_value): Use safe_add to avoid cost addition\n+\toverflow.\n+\n+2020-08-31  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR middle-end/54201\n+\t* varasm.c: Include alloc-pool.h.\n+\t(output_constant_pool_contents): Emit desc->mark < 0 entries as\n+\taliases.\n+\t(struct constant_descriptor_rtx_data): New type.\n+\t(constant_descriptor_rtx_data_cmp): New function.\n+\t(struct const_rtx_data_hasher): New type.\n+\t(const_rtx_data_hasher::hash, const_rtx_data_hasher::equal): New\n+\tmethods.\n+\t(optimize_constant_pool): New function.\n+\t(output_shared_constant_pool): Call it if TARGET_SUPPORTS_ALIASES.\n+\n+2020-08-31  Kewen Lin  <linkw@gcc.gnu.org>\n+\n+\t* doc/sourcebuild.texi (vect_len_load_store,\n+\tvect_partial_vectors_usage_1, vect_partial_vectors_usage_2,\n+\tvect_partial_vectors): Document.\n+\n 2020-08-30  Martin Sebor  <msebor@redhat.com>\n \n \t* builtins.c (access_ref::access_ref): Call get_size_range instead"}, {"sha": "25aba91f392c9848aeb7adb4ae18c33309c6806c", "filename": "gcc/DATESTAMP", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/13e4ba28f36817eec190fbd0dccd1f4aa99875a1/gcc%2FDATESTAMP", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/13e4ba28f36817eec190fbd0dccd1f4aa99875a1/gcc%2FDATESTAMP", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FDATESTAMP?ref=13e4ba28f36817eec190fbd0dccd1f4aa99875a1", "patch": "@@ -1 +1 @@\n-20200831\n+20200901"}, {"sha": "4d678aef54560fa967def09846835d0438c1c99d", "filename": "gcc/analyzer/ChangeLog", "status": "modified", "additions": 57, "deletions": 0, "changes": 57, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/13e4ba28f36817eec190fbd0dccd1f4aa99875a1/gcc%2Fanalyzer%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/13e4ba28f36817eec190fbd0dccd1f4aa99875a1/gcc%2Fanalyzer%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2FChangeLog?ref=13e4ba28f36817eec190fbd0dccd1f4aa99875a1", "patch": "@@ -1,3 +1,60 @@\n+2020-08-31  David Malcolm  <dmalcolm@redhat.com>\n+\n+\tPR analyzer/96798\n+\t* region-model.cc (region_model::on_call_pre): Handle\n+\tBUILT_IN_MEMSET_CHK.\n+\n+2020-08-31  David Malcolm  <dmalcolm@redhat.com>\n+\n+\t* region-model.cc (region_model::on_call_pre): Gather handling of\n+\tbuiltins and of internal fns into switch statements.  Handle\n+\t\"alloca\" and BUILT_IN_ALLOCA_WITH_ALIGN.\n+\n+2020-08-31  David Malcolm  <dmalcolm@redhat.com>\n+\n+\tPR analyzer/96860\n+\t* region.cc (decl_region::get_svalue_for_constructor): Support\n+\tapply_ctor_to_region failing.\n+\t* store.cc (binding_map::apply_ctor_to_region): Add failure\n+\thandling.\n+\t(binding_map::apply_ctor_val_to_range): Likewise.\n+\t(binding_map::apply_ctor_pair_to_child_region): Likewise.  Replace\n+\tassertion that child_base_offset is not symbolic with error\n+\thandling.\n+\t* store.h (binding_map::apply_ctor_to_region): Convert return type\n+\tfrom void to bool.\n+\t(binding_map::apply_ctor_val_to_range): Likewise.\n+\t(binding_map::apply_ctor_pair_to_child_region): Likewise.\n+\n+2020-08-31  David Malcolm  <dmalcolm@redhat.com>\n+\n+\tPR analyzer/96763\n+\t* store.cc (binding_map::apply_ctor_to_region): Handle RANGE_EXPR\n+\tby calling a new binding_map::apply_ctor_val_to_range subroutine.\n+\tSplit out the existing non-CONSTRUCTOR-handling code to a new\n+\tapply_ctor_pair_to_child_region subroutine.\n+\t(binding_map::apply_ctor_val_to_range): New.\n+\t(binding_map::apply_ctor_pair_to_child_region): New, split out\n+\tfrom binding_map::apply_ctor_to_region as noted above.\n+\t* store.h (binding_map::apply_ctor_val_to_range): New decl.\n+\t(binding_map::apply_ctor_pair_to_child_region): New decl.\n+\n+2020-08-31  David Malcolm  <dmalcolm@redhat.com>\n+\n+\tPR analyzer/96764\n+\t* region-model-manager.cc\n+\t(region_model_manager::maybe_fold_unaryop): Handle VIEW_CONVERT_EXPR.\n+\t(region_model_manager::get_or_create_cast): Move logic for\n+\treal->integer casting to...\n+\t(get_code_for_cast): ...this new function, and add logic for\n+\treal->non-integer casts.\n+\t(region_model_manager::maybe_fold_sub_svalue): Handle\n+\tVIEW_CONVERT_EXPR.\n+\t* region-model.cc\n+\t(region_model::add_any_constraints_from_gassign): Likewise.\n+\t* svalue.cc (svalue::maybe_undo_cast): Likewise.\n+\t(unaryop_svalue::dump_to_pp): Likewise.\n+\n 2020-08-26  David Malcolm  <dmalcolm@redhat.com>\n \n \tPR analyzer/94858"}, {"sha": "c9cd5a0543456ecef541cb6a8f08bf9ac03ca53f", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/13e4ba28f36817eec190fbd0dccd1f4aa99875a1/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/13e4ba28f36817eec190fbd0dccd1f4aa99875a1/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=13e4ba28f36817eec190fbd0dccd1f4aa99875a1", "patch": "@@ -1,3 +1,20 @@\n+2020-08-31  Marek Polacek  <polacek@redhat.com>\n+\t    Jason Merrill  <jason@redhat.com>\n+\n+\tPR c++/93529\n+\t* call.c (build_new_method_call_1): Use build_constructor_from_vec\n+\tinstead of build_tree_list_vec + build_constructor_from_list.\n+\t* init.c (build_new_1): Handle new char[]{\"foo\"}.  Use\n+\tbuild_constructor_from_vec instead of build_tree_list_vec +\n+\tbuild_constructor_from_list.\n+\t(build_new): Deduce the array size in new-expression if not\n+\tpresent.  Handle ()-init.  Handle initializing an array from\n+\ta string literal.\n+\t* parser.c (cp_parser_new_type_id): Leave [] alone.\n+\t(cp_parser_direct_new_declarator): Allow [].\n+\t* pt.c (type_dependent_expression_p): In a NEW_EXPR, consider\n+\tarray types whose dimension has to be deduced type-dependent.\n+\n 2020-08-27  Martin Liska  <mliska@suse.cz>\n \n \t* class.c (build_vtbl_initializer): Set exact argument of a vector"}, {"sha": "553bb98f7872048dfe474ba4b6897a9d1c2af7de", "filename": "gcc/d/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/13e4ba28f36817eec190fbd0dccd1f4aa99875a1/gcc%2Fd%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/13e4ba28f36817eec190fbd0dccd1f4aa99875a1/gcc%2Fd%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2FChangeLog?ref=13e4ba28f36817eec190fbd0dccd1f4aa99875a1", "patch": "@@ -1,3 +1,13 @@\n+2020-08-31  Iain Buclaw  <ibuclaw@gdcproject.org>\n+\n+\t* d-target.cc (Target::_init): Don't set classinfosize.\n+\t* d-tree.h (base_vtable_offset): Move under typeinfo.cc section.\n+\t* decl.cc (base_vtable_offset): Move to...\n+\t* typeinfo.cc (base_vtable_offset): ...here.  Get base offset from\n+\tinternal TypeInfo_Class type.\n+\t* intrinsics.cc (expand_intrinsic_bt): Use pointer TYPE_SIZE for\n+\tsetting bitsize value.  Build integer constants of correct type.\n+\n 2020-08-26  Iain Buclaw  <ibuclaw@gdcproject.org>\n \n \t* dmd/MERGE: Merge upstream dmd e49192807"}, {"sha": "dd1e261c50ceea5016daf3468c8bcb2e42b9077f", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 75, "deletions": 0, "changes": 75, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/13e4ba28f36817eec190fbd0dccd1f4aa99875a1/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/13e4ba28f36817eec190fbd0dccd1f4aa99875a1/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=13e4ba28f36817eec190fbd0dccd1f4aa99875a1", "patch": "@@ -1,3 +1,78 @@\n+2020-08-31  David Malcolm  <dmalcolm@redhat.com>\n+\n+\tPR analyzer/96798\n+\t* gcc.dg/analyzer/memset-1.c (test_5a): New.\n+\n+2020-08-31  David Malcolm  <dmalcolm@redhat.com>\n+\n+\tPR analyzer/96860\n+\t* gcc.dg/analyzer/pr96860-1.c: New test.\n+\t* gcc.dg/analyzer/pr96860-2.c: New test.\n+\n+2020-08-31  Marek Polacek  <polacek@redhat.com>\n+\t    Jason Merrill  <jason@redhat.com>\n+\n+\tPR c++/93529\n+\t* g++.dg/cpp0x/sfinae4.C: Adjust expected result after P1009.\n+\t* g++.dg/cpp2a/new-array1.C: New test.\n+\t* g++.dg/cpp2a/new-array2.C: New test.\n+\t* g++.dg/cpp2a/new-array3.C: New test.\n+\t* g++.dg/cpp2a/new-array4.C: New test.\n+\n+2020-08-31  David Malcolm  <dmalcolm@redhat.com>\n+\n+\tPR analyzer/96763\n+\t* g++.dg/analyzer/pr96763.C: New test.\n+\n+2020-08-31  David Malcolm  <dmalcolm@redhat.com>\n+\n+\tPR analyzer/96764\n+\t* gcc.dg/analyzer/pr96764.c: New test.\n+\n+2020-08-31  Aldy Hernandez  <aldyh@redhat.com>\n+\n+\tPR tree-optimization/96818\n+\t* g++.dg/pr96818.C: New file.\n+\t* gcc.dg/pr96818.c: New file.\n+\n+2020-08-31  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/96854\n+\t* gcc.dg/vect/pr96854.c: New testcase.\n+\n+2020-08-31  Christophe Lyon  <christophe.lyon@linaro.org>\n+\n+\t* gcc.target/aarch64/strcmpopt_6.c: Suppress -Wstringop-overread.\n+\n+2020-08-31  liuhongt  <hongtao.liu@intel.com>\n+\n+\t* gcc.target/i386/avx512f-pr96551-1.c: New test.\n+\t* gcc.target/i386/avx512f-pr96551-2.c: New test.\n+\n+2020-08-31  Feng Xue  <fxue@os.amperecomputing.com>\n+\n+\tPR tree-optimization/96806\n+\t* g++.dg/ipa/pr96806.C: New test.\n+\n+2020-08-31  Kewen Lin  <linkw@gcc.gnu.org>\n+\n+\t* gcc.dg/vect/bb-slp-pr69907.c: Adjust for partial vector usages.\n+\t* gcc.dg/vect/slp-3.c: Likewise.\n+\t* gcc.dg/vect/slp-multitypes-11.c: Likewise.\n+\t* gcc.dg/vect/slp-perm-1.c: Likewise.\n+\t* gcc.dg/vect/slp-perm-5.c: Likewise.\n+\t* gcc.dg/vect/slp-perm-6.c: Likewise.\n+\t* gcc.dg/vect/slp-perm-7.c: Likewise.\n+\t* gcc.dg/vect/slp-perm-8.c: Likewise.\n+\t* gcc.dg/vect/slp-perm-9.c: Likewise.\n+\t* gcc.dg/vect/vect-version-2.c: Likewise.\n+\t* lib/target-supports.exp (check_vect_partial_vector_usage): New\n+\tfunction.\n+\t(check_effective_target_vect_len_load_store): Likewise.\n+\t(check_effective_target_vect_partial_vectors_usage_1): Likewise.\n+\t(check_effective_target_vect_partial_vectors_usage_2): Likewise.\n+\t(check_effective_target_vect_partial_vectors): Likewise.\n+\n 2020-08-30  Martin Sebor  <msebor@redhat.com>\n \n \t* gcc.dg/Wstringop-overread-3.c: New test."}]}