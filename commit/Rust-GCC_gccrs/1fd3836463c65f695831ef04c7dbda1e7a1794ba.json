{"sha": "1fd3836463c65f695831ef04c7dbda1e7a1794ba", "node_id": "C_kwDOANBUbNoAKDFmZDM4MzY0NjNjNjVmNjk1ODMxZWYwNGM3ZGJkYTFlN2ExNzk0YmE", "commit": {"author": {"name": "Matthias Kretz", "email": "m.kretz@gsi.de", "date": "2023-02-02T11:29:33Z"}, "committer": {"name": "Matthias Kretz", "email": "m.kretz@gsi.de", "date": "2023-02-16T14:58:33Z"}, "message": "libstdc++: Fix incorrect __builtin_is_constant_evaluated calls\n\nSigned-off-by: Matthias Kretz <m.kretz@gsi.de>\n\nlibstdc++-v3/ChangeLog:\n\n\t* include/experimental/bits/simd_x86.h\n\t(_SimdImplX86::_S_not_equal_to, _SimdImplX86::_S_less)\n\t(_SimdImplX86::_S_less_equal): Do not call\n\t__builtin_is_constant_evaluated in constexpr-if.", "tree": {"sha": "f4749cf2508064342cb5ef74eb53671bc8ff1f70", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f4749cf2508064342cb5ef74eb53671bc8ff1f70"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1fd3836463c65f695831ef04c7dbda1e7a1794ba", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1fd3836463c65f695831ef04c7dbda1e7a1794ba", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1fd3836463c65f695831ef04c7dbda1e7a1794ba", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1fd3836463c65f695831ef04c7dbda1e7a1794ba/comments", "author": {"login": "mattkretz", "id": 3306474, "node_id": "MDQ6VXNlcjMzMDY0NzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3306474?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mattkretz", "html_url": "https://github.com/mattkretz", "followers_url": "https://api.github.com/users/mattkretz/followers", "following_url": "https://api.github.com/users/mattkretz/following{/other_user}", "gists_url": "https://api.github.com/users/mattkretz/gists{/gist_id}", "starred_url": "https://api.github.com/users/mattkretz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mattkretz/subscriptions", "organizations_url": "https://api.github.com/users/mattkretz/orgs", "repos_url": "https://api.github.com/users/mattkretz/repos", "events_url": "https://api.github.com/users/mattkretz/events{/privacy}", "received_events_url": "https://api.github.com/users/mattkretz/received_events", "type": "User", "site_admin": false}, "committer": {"login": "mattkretz", "id": 3306474, "node_id": "MDQ6VXNlcjMzMDY0NzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3306474?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mattkretz", "html_url": "https://github.com/mattkretz", "followers_url": "https://api.github.com/users/mattkretz/followers", "following_url": "https://api.github.com/users/mattkretz/following{/other_user}", "gists_url": "https://api.github.com/users/mattkretz/gists{/gist_id}", "starred_url": "https://api.github.com/users/mattkretz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mattkretz/subscriptions", "organizations_url": "https://api.github.com/users/mattkretz/orgs", "repos_url": "https://api.github.com/users/mattkretz/repos", "events_url": "https://api.github.com/users/mattkretz/events{/privacy}", "received_events_url": "https://api.github.com/users/mattkretz/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "07e4648b4ab86a76ab040ea18a756e388652c882", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/07e4648b4ab86a76ab040ea18a756e388652c882", "html_url": "https://github.com/Rust-GCC/gccrs/commit/07e4648b4ab86a76ab040ea18a756e388652c882"}], "stats": {"total": 21, "additions": 12, "deletions": 9}, "files": [{"sha": "dcfdc2a9496d2457af69ade7cfe8333e113e269d", "filename": "libstdc++-v3/include/experimental/bits/simd_x86.h", "status": "modified", "additions": 12, "deletions": 9, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1fd3836463c65f695831ef04c7dbda1e7a1794ba/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Fbits%2Fsimd_x86.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1fd3836463c65f695831ef04c7dbda1e7a1794ba/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Fbits%2Fsimd_x86.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Fbits%2Fsimd_x86.h?ref=1fd3836463c65f695831ef04c7dbda1e7a1794ba", "patch": "@@ -2344,15 +2344,16 @@ template <typename _Abi, typename>\n \t    else\n \t      __assert_unreachable<_Tp>();\n \t  }                                                   // }}}\n-\telse if constexpr (!__builtin_is_constant_evaluated() // {{{\n-\t\t\t   && sizeof(__x) == 8)\n+\telse if (__builtin_is_constant_evaluated())\n+\t  return _Base::_S_not_equal_to(__x, __y);\n+\telse if constexpr (sizeof(__x) == 8)\n \t  {\n \t    const auto __r128 = __vector_bitcast<_Tp, 16 / sizeof(_Tp)>(__x)\n \t\t\t\t!= __vector_bitcast<_Tp, 16 / sizeof(_Tp)>(__y);\n \t    _MaskMember<_Tp> __r64;\n \t    __builtin_memcpy(&__r64._M_data, &__r128, sizeof(__r64));\n \t    return __r64;\n-\t  } // }}}\n+\t  }\n \telse\n \t  return _Base::_S_not_equal_to(__x, __y);\n       }\n@@ -2451,15 +2452,16 @@ template <typename _Abi, typename>\n \t    else\n \t      __assert_unreachable<_Tp>();\n \t  }                                                   // }}}\n-\telse if constexpr (!__builtin_is_constant_evaluated() // {{{\n-\t\t\t   && sizeof(__x) == 8)\n+\telse if (__builtin_is_constant_evaluated())\n+\t  return _Base::_S_less(__x, __y);\n+\telse if constexpr (sizeof(__x) == 8)\n \t  {\n \t    const auto __r128 = __vector_bitcast<_Tp, 16 / sizeof(_Tp)>(__x)\n \t\t\t\t< __vector_bitcast<_Tp, 16 / sizeof(_Tp)>(__y);\n \t    _MaskMember<_Tp> __r64;\n \t    __builtin_memcpy(&__r64._M_data, &__r128, sizeof(__r64));\n \t    return __r64;\n-\t  } // }}}\n+\t  }\n \telse\n \t  return _Base::_S_less(__x, __y);\n       }\n@@ -2558,15 +2560,16 @@ template <typename _Abi, typename>\n \t    else\n \t      __assert_unreachable<_Tp>();\n \t  }                                                   // }}}\n-\telse if constexpr (!__builtin_is_constant_evaluated() // {{{\n-\t\t\t   && sizeof(__x) == 8)\n+\telse if (__builtin_is_constant_evaluated())\n+\t  return _Base::_S_less_equal(__x, __y);\n+\telse if constexpr (sizeof(__x) == 8)\n \t  {\n \t    const auto __r128 = __vector_bitcast<_Tp, 16 / sizeof(_Tp)>(__x)\n \t\t\t\t<= __vector_bitcast<_Tp, 16 / sizeof(_Tp)>(__y);\n \t    _MaskMember<_Tp> __r64;\n \t    __builtin_memcpy(&__r64._M_data, &__r128, sizeof(__r64));\n \t    return __r64;\n-\t  } // }}}\n+\t  }\n \telse\n \t  return _Base::_S_less_equal(__x, __y);\n       }"}]}