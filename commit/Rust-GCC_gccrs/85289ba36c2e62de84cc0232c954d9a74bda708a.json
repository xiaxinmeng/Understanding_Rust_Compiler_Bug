{"sha": "85289ba36c2e62de84cc0232c954d9a74bda708a", "node_id": "C_kwDOANBUbNoAKDg1Mjg5YmEzNmMyZTYyZGU4NGNjMDIzMmM5NTRkOWE3NGJkYTcwOGE", "commit": {"author": {"name": "Paul A. Clarke", "email": "pc@us.ibm.com", "date": "2021-10-21T16:21:01Z"}, "committer": {"name": "Paul A. Clarke", "email": "pc@us.ibm.com", "date": "2021-11-29T15:50:43Z"}, "message": "rs6000: Add Power10 optimization for most _mm_movemask*\n\nPower10 ISA added `vextract*` instructions which are realized in the\n`vec_extractm` instrinsic.\n\nUse `vec_extractm` for `_mm_movemask_ps`, `_mm_movemask_pd`, and\n`_mm_movemask_epi8` compatibility intrinsics, when `_ARCH_PWR10`.\n\n2021-11-29  Paul A. Clarke  <pc@us.ibm.com>\n\ngcc\n\t* config/rs6000/xmmintrin.h (_mm_movemask_ps): Use vec_extractm\n\twhen _ARCH_PWR10.\n\t* config/rs6000/emmintrin.h (_mm_movemask_pd): Likewise.\n\t(_mm_movemask_epi8): Likewise.", "tree": {"sha": "bb3219e79688decd1413717a3e9b5e88b7246cf4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/bb3219e79688decd1413717a3e9b5e88b7246cf4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/85289ba36c2e62de84cc0232c954d9a74bda708a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/85289ba36c2e62de84cc0232c954d9a74bda708a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/85289ba36c2e62de84cc0232c954d9a74bda708a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/85289ba36c2e62de84cc0232c954d9a74bda708a/comments", "author": {"login": "ThinkOpenly", "id": 12301795, "node_id": "MDQ6VXNlcjEyMzAxNzk1", "avatar_url": "https://avatars.githubusercontent.com/u/12301795?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ThinkOpenly", "html_url": "https://github.com/ThinkOpenly", "followers_url": "https://api.github.com/users/ThinkOpenly/followers", "following_url": "https://api.github.com/users/ThinkOpenly/following{/other_user}", "gists_url": "https://api.github.com/users/ThinkOpenly/gists{/gist_id}", "starred_url": "https://api.github.com/users/ThinkOpenly/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ThinkOpenly/subscriptions", "organizations_url": "https://api.github.com/users/ThinkOpenly/orgs", "repos_url": "https://api.github.com/users/ThinkOpenly/repos", "events_url": "https://api.github.com/users/ThinkOpenly/events{/privacy}", "received_events_url": "https://api.github.com/users/ThinkOpenly/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ThinkOpenly", "id": 12301795, "node_id": "MDQ6VXNlcjEyMzAxNzk1", "avatar_url": "https://avatars.githubusercontent.com/u/12301795?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ThinkOpenly", "html_url": "https://github.com/ThinkOpenly", "followers_url": "https://api.github.com/users/ThinkOpenly/followers", "following_url": "https://api.github.com/users/ThinkOpenly/following{/other_user}", "gists_url": "https://api.github.com/users/ThinkOpenly/gists{/gist_id}", "starred_url": "https://api.github.com/users/ThinkOpenly/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ThinkOpenly/subscriptions", "organizations_url": "https://api.github.com/users/ThinkOpenly/orgs", "repos_url": "https://api.github.com/users/ThinkOpenly/repos", "events_url": "https://api.github.com/users/ThinkOpenly/events{/privacy}", "received_events_url": "https://api.github.com/users/ThinkOpenly/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e2194a8b39251497d770abf3fb6ee06de6072ed9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e2194a8b39251497d770abf3fb6ee06de6072ed9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e2194a8b39251497d770abf3fb6ee06de6072ed9"}], "stats": {"total": 12, "additions": 12, "deletions": 0}, "files": [{"sha": "c4758be0e7771096c190149952e58ff3ed57b287", "filename": "gcc/config/rs6000/emmintrin.h", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/85289ba36c2e62de84cc0232c954d9a74bda708a/gcc%2Fconfig%2Frs6000%2Femmintrin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/85289ba36c2e62de84cc0232c954d9a74bda708a/gcc%2Fconfig%2Frs6000%2Femmintrin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Femmintrin.h?ref=85289ba36c2e62de84cc0232c954d9a74bda708a", "patch": "@@ -1233,6 +1233,9 @@ _mm_loadl_pd (__m128d __A, double const *__B)\n extern __inline int __attribute__((__gnu_inline__, __always_inline__, __artificial__))\n _mm_movemask_pd (__m128d  __A)\n {\n+#ifdef _ARCH_PWR10\n+  return vec_extractm ((__v2du) __A);\n+#else\n   __vector unsigned long long result;\n   static const __vector unsigned int perm_mask =\n     {\n@@ -1252,6 +1255,7 @@ _mm_movemask_pd (__m128d  __A)\n #else\n   return result[0];\n #endif\n+#endif /* !_ARCH_PWR10 */\n }\n #endif /* _ARCH_PWR8 */\n \n@@ -2030,6 +2034,9 @@ _mm_min_epu8 (__m128i __A, __m128i __B)\n extern __inline int __attribute__((__gnu_inline__, __always_inline__, __artificial__))\n _mm_movemask_epi8 (__m128i __A)\n {\n+#ifdef _ARCH_PWR10\n+  return vec_extractm ((__v16qu) __A);\n+#else\n   __vector unsigned long long result;\n   static const __vector unsigned char perm_mask =\n     {\n@@ -2046,6 +2053,7 @@ _mm_movemask_epi8 (__m128i __A)\n #else\n   return result[0];\n #endif\n+#endif /* !_ARCH_PWR10 */\n }\n #endif /* _ARCH_PWR8 */\n "}, {"sha": "4c093fd1d5ae6f3466213220681057ba987edeff", "filename": "gcc/config/rs6000/xmmintrin.h", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/85289ba36c2e62de84cc0232c954d9a74bda708a/gcc%2Fconfig%2Frs6000%2Fxmmintrin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/85289ba36c2e62de84cc0232c954d9a74bda708a/gcc%2Fconfig%2Frs6000%2Fxmmintrin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Fxmmintrin.h?ref=85289ba36c2e62de84cc0232c954d9a74bda708a", "patch": "@@ -1352,6 +1352,9 @@ _mm_storel_pi (__m64 *__P, __m128 __A)\n extern __inline int __attribute__((__gnu_inline__, __always_inline__, __artificial__))\n _mm_movemask_ps (__m128  __A)\n {\n+#ifdef _ARCH_PWR10\n+  return vec_extractm ((vector unsigned int) __A);\n+#else\n   __vector unsigned long long result;\n   static const __vector unsigned int perm_mask =\n     {\n@@ -1371,6 +1374,7 @@ _mm_movemask_ps (__m128  __A)\n #else\n   return result[0];\n #endif\n+#endif /* !_ARCH_PWR10 */\n }\n #endif /* _ARCH_PWR8 */\n "}]}