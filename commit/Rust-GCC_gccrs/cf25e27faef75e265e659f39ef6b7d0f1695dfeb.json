{"sha": "cf25e27faef75e265e659f39ef6b7d0f1695dfeb", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Y2YyNWUyN2ZhZWY3NWUyNjVlNjU5ZjM5ZWY2YjdkMGYxNjk1ZGZlYg==", "commit": {"author": {"name": "Patrick Palka", "email": "ppalka@redhat.com", "date": "2021-04-02T23:47:09Z"}, "committer": {"name": "Patrick Palka", "email": "ppalka@redhat.com", "date": "2021-04-02T23:47:09Z"}, "message": "c++: Refine check for CTAD placeholder [PR99586]\n\nIn the below testcase, during finish_compound_literal for A<B{V}>{},\ntype_uses_auto finds and returns the CTAD placeholder for B{V}, which\ntricks us into attempting CTAD on A<B{V}>{} and leads to bogus errors.\n\nAFAICT 'type' will always be a bare 'auto' in the CTAD case so we don't\nneed to look deeply to find it; checking template_placeholder_p instead\nshould suffice here.\n\ngcc/cp/ChangeLog:\n\n\tPR c++/99586\n\t* semantics.c (finish_compound_literal): Check\n\ttemplate_placeholder_p instead of type_uses_auto.\n\ngcc/testsuite/ChangeLog:\n\n\tPR c++/99586\n\t* g++.dg/cpp2a/nontype-class42.C: New test.", "tree": {"sha": "a8feac150e66d0be5bba71e19e8e2be9ca8ca20a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a8feac150e66d0be5bba71e19e8e2be9ca8ca20a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/cf25e27faef75e265e659f39ef6b7d0f1695dfeb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cf25e27faef75e265e659f39ef6b7d0f1695dfeb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cf25e27faef75e265e659f39ef6b7d0f1695dfeb", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cf25e27faef75e265e659f39ef6b7d0f1695dfeb/comments", "author": null, "committer": null, "parents": [{"sha": "2a26351b598242c2fbce95d2a0baacce0084aec6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2a26351b598242c2fbce95d2a0baacce0084aec6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2a26351b598242c2fbce95d2a0baacce0084aec6"}], "stats": {"total": 23, "additions": 15, "deletions": 8}, "files": [{"sha": "8eaaaefe2d6116d156fcdf224ad31701cedfe5db", "filename": "gcc/cp/semantics.c", "status": "modified", "additions": 7, "deletions": 8, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cf25e27faef75e265e659f39ef6b7d0f1695dfeb/gcc%2Fcp%2Fsemantics.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cf25e27faef75e265e659f39ef6b7d0f1695dfeb/gcc%2Fcp%2Fsemantics.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fsemantics.c?ref=cf25e27faef75e265e659f39ef6b7d0f1695dfeb", "patch": "@@ -3036,14 +3036,13 @@ finish_compound_literal (tree type, tree compound_literal,\n       return error_mark_node;\n     }\n \n-  if (tree anode = type_uses_auto (type))\n-    if (CLASS_PLACEHOLDER_TEMPLATE (anode))\n-      {\n-\ttype = do_auto_deduction (type, compound_literal, anode, complain,\n-\t\t\t\t  adc_variable_type);\n-\tif (type == error_mark_node)\n-\t  return error_mark_node;\n-      }\n+  if (template_placeholder_p (type))\n+    {\n+      type = do_auto_deduction (type, compound_literal, type, complain,\n+\t\t\t\tadc_variable_type);\n+      if (type == error_mark_node)\n+\treturn error_mark_node;\n+    }\n \n   /* Used to hold a copy of the compound literal in a template.  */\n   tree orig_cl = NULL_TREE;"}, {"sha": "c2e04b2820c5b433176bd49732f3d1329e7dfb7f", "filename": "gcc/testsuite/g++.dg/cpp2a/nontype-class42.C", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cf25e27faef75e265e659f39ef6b7d0f1695dfeb/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fnontype-class42.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cf25e27faef75e265e659f39ef6b7d0f1695dfeb/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fnontype-class42.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fnontype-class42.C?ref=cf25e27faef75e265e659f39ef6b7d0f1695dfeb", "patch": "@@ -0,0 +1,8 @@\n+// PR c++/99586\n+// { dg-do compile { target c++20 } }\n+\n+template <class T>\n+struct B { constexpr B(T); };\n+\n+template <auto> struct A{};\n+template <auto V> auto a = A<B{V}>{};"}]}