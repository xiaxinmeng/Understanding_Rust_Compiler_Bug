{"sha": "f92a504fdd943527687faf9557e0b39ff7fe6125", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjkyYTUwNGZkZDk0MzUyNzY4N2ZhZjk1NTdlMGIzOWZmN2ZlNjEyNQ==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2020-10-05T14:16:58Z"}, "committer": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2020-10-05T14:18:56Z"}, "message": "libstdc++: Make allocators throw bad_array_new_length on overflow [LWG 3190]\n\nstd::allocator and std::pmr::polymorphic_allocator should throw\nstd::bad_array_new_length from their allocate member functions if the\nnumber of bytes required cannot be represented in std::size_t.\n\nlibstdc++-v3/ChangeLog:\n\n\t* config/abi/pre/gnu.ver: Add new symbol.\n\t* include/bits/functexcept.h (__throw_bad_array_new_length):\n\tDeclare new function.\n\t* include/ext/malloc_allocator.h (malloc_allocator::allocate):\n\tThrow bad_array_new_length for impossible sizes (LWG 3190).\n\t* include/ext/new_allocator.h (new_allocator::allocate):\n\tLikewise.\n\t* include/std/memory_resource (polymorphic_allocator::allocate)\n\t(polymorphic_allocator::allocate_object): Use new function,\n\t__throw_bad_array_new_length.\n\t* src/c++11/functexcept.cc (__throw_bad_array_new_length):\n\tDefine.\n\t* testsuite/20_util/allocator/lwg3190.cc: New test.", "tree": {"sha": "007b6dfe3b0578c5f19eff0875b9725996def695", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/007b6dfe3b0578c5f19eff0875b9725996def695"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f92a504fdd943527687faf9557e0b39ff7fe6125", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f92a504fdd943527687faf9557e0b39ff7fe6125", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f92a504fdd943527687faf9557e0b39ff7fe6125", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f92a504fdd943527687faf9557e0b39ff7fe6125/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "717e402dbf55e7da83d4fc87641ab9e60d4846cb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/717e402dbf55e7da83d4fc87641ab9e60d4846cb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/717e402dbf55e7da83d4fc87641ab9e60d4846cb"}], "stats": {"total": 89, "additions": 82, "deletions": 7}, "files": [{"sha": "6a2b2da33f54ea57a2f279c0cf95e550a96d9208", "filename": "libstdc++-v3/config/abi/pre/gnu.ver", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f92a504fdd943527687faf9557e0b39ff7fe6125/libstdc%2B%2B-v3%2Fconfig%2Fabi%2Fpre%2Fgnu.ver", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f92a504fdd943527687faf9557e0b39ff7fe6125/libstdc%2B%2B-v3%2Fconfig%2Fabi%2Fpre%2Fgnu.ver", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fabi%2Fpre%2Fgnu.ver?ref=f92a504fdd943527687faf9557e0b39ff7fe6125", "patch": "@@ -2322,6 +2322,9 @@ GLIBCXX_3.4.29 {\n     # std::__atomic_futex_unsigned_base::_M_futex_wait_until_steady\n     _ZNSt28__atomic_futex_unsigned_base26_M_futex_wait_until_steady*;\n \n+    # std::__throw_bad_array_new_length()\n+    _ZSt28__throw_bad_array_new_lengthv;\n+\n } GLIBCXX_3.4.28;\n \n # Symbols in the support library (libsupc++) have their own tag."}, {"sha": "f6079e2a535e9121865f6a50d668832399a5964a", "filename": "libstdc++-v3/include/bits/functexcept.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f92a504fdd943527687faf9557e0b39ff7fe6125/libstdc%2B%2B-v3%2Finclude%2Fbits%2Ffunctexcept.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f92a504fdd943527687faf9557e0b39ff7fe6125/libstdc%2B%2B-v3%2Finclude%2Fbits%2Ffunctexcept.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Ffunctexcept.h?ref=f92a504fdd943527687faf9557e0b39ff7fe6125", "patch": "@@ -51,6 +51,9 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   void\n   __throw_bad_alloc(void) __attribute__((__noreturn__));\n \n+  void\n+  __throw_bad_array_new_length(void) __attribute__((__noreturn__));\n+\n   // Helper for exception objects in <typeinfo>\n   void\n   __throw_bad_cast(void) __attribute__((__noreturn__));"}, {"sha": "dd45470c4565718549a9bfd12c3258fffc986faf", "filename": "libstdc++-v3/include/ext/malloc_allocator.h", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f92a504fdd943527687faf9557e0b39ff7fe6125/libstdc%2B%2B-v3%2Finclude%2Fext%2Fmalloc_allocator.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f92a504fdd943527687faf9557e0b39ff7fe6125/libstdc%2B%2B-v3%2Finclude%2Fext%2Fmalloc_allocator.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fmalloc_allocator.h?ref=f92a504fdd943527687faf9557e0b39ff7fe6125", "patch": "@@ -102,8 +102,14 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       _Tp*\n       allocate(size_type __n, const void* = 0)\n       {\n-\tif (__n > this->_M_max_size())\n-\t  std::__throw_bad_alloc();\n+\tif (__builtin_expect(__n > this->_M_max_size(), false))\n+\t  {\n+\t    // _GLIBCXX_RESOLVE_LIB_DEFECTS\n+\t    // 3190. allocator::allocate sometimes returns too little storage\n+\t    if (__n > (std::size_t(-1) / sizeof(_Tp)))\n+\t      std::__throw_bad_array_new_length();\n+\t    std::__throw_bad_alloc();\n+\t  }\n \n \t_Tp* __ret = 0;\n #if __cpp_aligned_new"}, {"sha": "a43c8d9b6fb751fe9ac3ecc8725079f26c869ee0", "filename": "libstdc++-v3/include/ext/new_allocator.h", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f92a504fdd943527687faf9557e0b39ff7fe6125/libstdc%2B%2B-v3%2Finclude%2Fext%2Fnew_allocator.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f92a504fdd943527687faf9557e0b39ff7fe6125/libstdc%2B%2B-v3%2Finclude%2Fext%2Fnew_allocator.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fnew_allocator.h?ref=f92a504fdd943527687faf9557e0b39ff7fe6125", "patch": "@@ -102,8 +102,14 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       _GLIBCXX_NODISCARD _Tp*\n       allocate(size_type __n, const void* = static_cast<const void*>(0))\n       {\n-\tif (__n > this->_M_max_size())\n-\t  std::__throw_bad_alloc();\n+\tif (__builtin_expect(__n > this->_M_max_size(), false))\n+\t  {\n+\t    // _GLIBCXX_RESOLVE_LIB_DEFECTS\n+\t    // 3190. allocator::allocate sometimes returns too little storage\n+\t    if (__n > (std::size_t(-1) / sizeof(_Tp)))\n+\t      std::__throw_bad_array_new_length();\n+\t    std::__throw_bad_alloc();\n+\t  }\n \n #if __cpp_aligned_new\n \tif (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)"}, {"sha": "6491179a7c5fdb127730dcd3e8bab5da3715269d", "filename": "libstdc++-v3/include/std/memory_resource", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f92a504fdd943527687faf9557e0b39ff7fe6125/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fmemory_resource", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f92a504fdd943527687faf9557e0b39ff7fe6125/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fmemory_resource", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fmemory_resource?ref=f92a504fdd943527687faf9557e0b39ff7fe6125", "patch": "@@ -168,8 +168,8 @@ namespace pmr\n       allocate(size_t __n)\n       __attribute__((__returns_nonnull__))\n       {\n-\tif (__n > (__gnu_cxx::__int_traits<size_t>::__max / sizeof(_Tp)))\n-\t  _GLIBCXX_THROW_OR_ABORT(bad_array_new_length());\n+\tif ((__gnu_cxx::__int_traits<size_t>::__max / sizeof(_Tp)) < __n)\n+\t  std::__throw_bad_array_new_length();\n \treturn static_cast<_Tp*>(_M_resource->allocate(__n * sizeof(_Tp),\n \t\t\t\t\t\t       alignof(_Tp)));\n       }\n@@ -195,7 +195,7 @@ namespace pmr\n \tallocate_object(size_t __n = 1)\n \t{\n \t  if ((__gnu_cxx::__int_traits<size_t>::__max / sizeof(_Up)) < __n)\n-\t    _GLIBCXX_THROW_OR_ABORT(bad_array_new_length());\n+\t    std::__throw_bad_array_new_length();\n \t  return static_cast<_Up*>(allocate_bytes(__n * sizeof(_Up),\n \t\t\t\t\t\t  alignof(_Up)));\n \t}"}, {"sha": "b5da1746c0935a42be865a20d923c0363c231a33", "filename": "libstdc++-v3/src/c++11/functexcept.cc", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f92a504fdd943527687faf9557e0b39ff7fe6125/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B11%2Ffunctexcept.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f92a504fdd943527687faf9557e0b39ff7fe6125/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B11%2Ffunctexcept.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B11%2Ffunctexcept.cc?ref=f92a504fdd943527687faf9557e0b39ff7fe6125", "patch": "@@ -53,6 +53,10 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   __throw_bad_alloc()\n   { _GLIBCXX_THROW_OR_ABORT(bad_alloc()); }\n \n+  void\n+  __throw_bad_array_new_length()\n+  { _GLIBCXX_THROW_OR_ABORT(bad_array_new_length()); }\n+\n   void\n   __throw_bad_cast()\n   { _GLIBCXX_THROW_OR_ABORT(bad_cast()); }"}, {"sha": "955f05b22a14cfeb0deeb265138f323bdda20aba", "filename": "libstdc++-v3/testsuite/20_util/allocator/lwg3190.cc", "status": "added", "additions": 53, "deletions": 0, "changes": 53, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f92a504fdd943527687faf9557e0b39ff7fe6125/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fallocator%2Flwg3190.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f92a504fdd943527687faf9557e0b39ff7fe6125/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fallocator%2Flwg3190.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fallocator%2Flwg3190.cc?ref=f92a504fdd943527687faf9557e0b39ff7fe6125", "patch": "@@ -0,0 +1,53 @@\n+// Copyright (C) 2020 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-do run { target c++11 } }\n+\n+#include <memory>\n+#include <new>\n+#include <limits>\n+#include <testsuite_hooks.h>\n+\n+// LWG 3190. std::allocator::allocate sometimes returns too little storage\n+\n+void\n+test01()\n+{\n+  struct A { char biiiiig[1 << 16]; };\n+  std::allocator<A> a;\n+  try\n+  {\n+    std::size_t max = std::numeric_limits<std::size_t>::max() / sizeof(A);\n+    A* p = a.allocate(max + 1);\n+    throw p;\n+  }\n+#if __cplusplus >= 201103L\n+  catch (const std::bad_array_new_length&)\n+  {\n+  }\n+#endif\n+  catch (const std::bad_alloc&)\n+  {\n+    VERIFY( __cplusplus < 201103L );\n+  }\n+}\n+\n+int\n+main()\n+{\n+  test01();\n+}"}]}