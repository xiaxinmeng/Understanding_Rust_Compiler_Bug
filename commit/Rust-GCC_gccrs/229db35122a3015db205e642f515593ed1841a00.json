{"sha": "229db35122a3015db205e642f515593ed1841a00", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjI5ZGIzNTEyMmEzMDE1ZGIyMDVlNjQyZjUxNTU5M2VkMTg0MWEwMA==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2010-10-22T10:19:58Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2010-10-22T10:19:58Z"}, "message": "[multiple changes]\n\n2010-10-22  Ed Schonberg  <schonberg@adacore.com>\n\n\t* sem_util.adb (May_Be_Lvalue): An actual in a function call can be an\n\tlvalue in Ada2012, if the function has in-out parameters.\n\n2010-10-22  Robert Dewar  <dewar@adacore.com>\n\n\t* cstand.adb, einfo.adb, exp_attr.adb, sem_prag.adb, sem_vfpt.adb,\n\tsem_ch10.adb: Minor reformatting.\n\n2010-10-22  Sergey Rybin  <rybin@adacore.com>\n\n\t* gnat_ugn.texi: Remove most of the content of gnatcheck chapter.\n\n2010-10-22  Ed Schonberg  <schonberg@adacore.com>\n\n\t* sem_attr.adb: Handle indexed P'old.\n\nFrom-SVN: r165817", "tree": {"sha": "9ef7cb8b3a3114393fa1cbd08628522c8260c6ef", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9ef7cb8b3a3114393fa1cbd08628522c8260c6ef"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/229db35122a3015db205e642f515593ed1841a00", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/229db35122a3015db205e642f515593ed1841a00", "html_url": "https://github.com/Rust-GCC/gccrs/commit/229db35122a3015db205e642f515593ed1841a00", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/229db35122a3015db205e642f515593ed1841a00/comments", "author": null, "committer": null, "parents": [{"sha": "23c799b1580c919c709a8144c27b53e013cd65e7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/23c799b1580c919c709a8144c27b53e013cd65e7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/23c799b1580c919c709a8144c27b53e013cd65e7"}], "stats": {"total": 751, "additions": 76, "deletions": 675}, "files": [{"sha": "2d8f3cbbc085ff0986866f3048a07e2395009641", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/229db35122a3015db205e642f515593ed1841a00/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/229db35122a3015db205e642f515593ed1841a00/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=229db35122a3015db205e642f515593ed1841a00", "patch": "@@ -1,3 +1,21 @@\n+2010-10-22  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* sem_util.adb (May_Be_Lvalue): An actual in a function call can be an\n+\tlvalue in Ada2012, if the function has in-out parameters.\n+\n+2010-10-22  Robert Dewar  <dewar@adacore.com>\n+\n+\t* cstand.adb, einfo.adb, exp_attr.adb, sem_prag.adb, sem_vfpt.adb,\n+\tsem_ch10.adb: Minor reformatting.\n+\n+2010-10-22  Sergey Rybin  <rybin@adacore.com>\n+\n+\t* gnat_ugn.texi: Remove most of the content of gnatcheck chapter.\n+\n+2010-10-22  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* sem_attr.adb: Handle indexed P'old.\n+\n 2010-10-22  Geert Bosch  <bosch@adacore.com>\n \n \t* cstand.adb (Build_Float_Type): Set Float_Rep according to platform."}, {"sha": "ea1ecb661e8c50e7c96485338cb9787b48333d90", "filename": "gcc/ada/cstand.adb", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/229db35122a3015db205e642f515593ed1841a00/gcc%2Fada%2Fcstand.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/229db35122a3015db205e642f515593ed1841a00/gcc%2Fada%2Fcstand.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fcstand.adb?ref=229db35122a3015db205e642f515593ed1841a00", "patch": "@@ -146,7 +146,6 @@ package body CStand is\n \n       if AAMP_On_Target then\n          Set_Float_Rep (E, AAMP);\n-\n       else\n          Set_Float_Rep (E, IEEE_Binary);\n       end if;"}, {"sha": "2b6215bd79275c553f2025dea942f3dd1acb815e", "filename": "gcc/ada/einfo.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/229db35122a3015db205e642f515593ed1841a00/gcc%2Fada%2Feinfo.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/229db35122a3015db205e642f515593ed1841a00/gcc%2Fada%2Feinfo.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Feinfo.adb?ref=229db35122a3015db205e642f515593ed1841a00", "patch": "@@ -406,7 +406,6 @@ package body Einfo is\n    --    Is_Compilation_Unit             Flag149\n    --    Has_Pragma_Elaborate_Body       Flag150\n \n-   --    (unused)                        Flag151\n    --    Entry_Accepted                  Flag152\n    --    Is_Obsolescent                  Flag153\n    --    Has_Per_Object_Constraint       Flag154\n@@ -516,6 +515,7 @@ package body Einfo is\n    --    OK_To_Reference                 Flag249\n    --    Has_Predicates                  Flag250\n \n+   --    (unused)                        Flag151\n    --    (unused)                        Flag251\n    --    (unused)                        Flag252\n    --    (unused)                        Flag253"}, {"sha": "9b0d3b71c628b1bf70eb09f61ee443a075b0fce4", "filename": "gcc/ada/exp_attr.adb", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/229db35122a3015db205e642f515593ed1841a00/gcc%2Fada%2Fexp_attr.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/229db35122a3015db205e642f515593ed1841a00/gcc%2Fada%2Fexp_attr.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_attr.adb?ref=229db35122a3015db205e642f515593ed1841a00", "patch": "@@ -4773,10 +4773,10 @@ package body Exp_Attr is\n             begin\n \n                case Float_Rep (Btyp) is\n+\n                   --  For vax fpt types, call appropriate routine in special\n-                  --  vax floating point unit. We do not have to worry about\n-                  --  loads in this case, since these types have no signalling\n-                  --  NaN's.\n+                  --  vax floating point unit. No need to worry about loads in\n+                  --  this case, since these types have no signalling NaN's.\n \n                   when VAX_Native => Expand_Vax_Valid (N);\n "}, {"sha": "d4c76d5c07f64fda39db447cbfe84551a48f41c9", "filename": "gcc/ada/gnat_ugn.texi", "status": "modified", "additions": 2, "deletions": 647, "changes": 649, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/229db35122a3015db205e642f515593ed1841a00/gcc%2Fada%2Fgnat_ugn.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/229db35122a3015db205e642f515593ed1841a00/gcc%2Fada%2Fgnat_ugn.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgnat_ugn.texi?ref=229db35122a3015db205e642f515593ed1841a00", "patch": "@@ -463,15 +463,6 @@ The gnatmem Tool\n \n Verifying Properties Using gnatcheck\n \n-* Format of the Report File::\n-* General gnatcheck Switches::\n-* gnatcheck Rule Options::\n-* Adding the Results of Compiler Checks to gnatcheck Output::\n-* Project-Wide Checks::\n-* Rule exemption::\n-* Predefined Rules::\n-* Example of gnatcheck Usage::\n-\n Sample Bodies Using gnatstub\n \n * Running gnatstub::\n@@ -17246,648 +17237,12 @@ Therefore, checks can only be performed on\n legal Ada units. Moreover, when a unit depends semantically upon units located\n outside the current directory, the source search path has to be provided when\n calling @command{gnatcheck}, either through a specified project file or\n-through @command{gnatcheck} switches as described below.\n+through @command{gnatcheck} switches.\n \n A number of rules are predefined in @command{gnatcheck} and are described\n later in this chapter.\n-You can also add new rules, by modifying the @command{gnatcheck} code and\n-rebuilding the tool. In order to add a simple rule making some local checks,\n-a small amount of straightforward ASIS-based programming is usually needed.\n-\n-Project support for @command{gnatcheck} is provided by the GNAT\n-driver (see @ref{The GNAT Driver and Project Files}).\n-\n-Invoking @command{gnatcheck} on the command line has the form:\n-\n-@smallexample\n-@c $ gnatcheck @ovar{switches}  @{@var{filename}@}\n-@c       @r{[}^-files^/FILES^=@{@var{arg_list_filename}@}@r{]}\n-@c       @r{[}-cargs @var{gcc_switches}@r{]} -rules @var{rule_options}\n-@c Expanding @ovar macro inline (explanation in macro def comments)\n-$ gnatcheck @r{[}@var{switches}@r{]}  @{@var{filename}@}\n-      @r{[}^-files^/FILES^=@{@var{arg_list_filename}@}@r{]}\n-      @r{[}-cargs @var{gcc_switches}@r{]} -rules @var{rule_options}\n-@end smallexample\n-\n-@noindent\n-where\n-@itemize @bullet\n-@item\n-@var{switches} specify the general tool options\n-\n-@item\n-Each @var{filename} is the name (including the extension) of a source\n-file to process. ``Wildcards'' are allowed, and\n-the file name may contain path information.\n-\n-@item\n-Each @var{arg_list_filename} is the name (including the extension) of a text\n-file containing the names of the source files to process, separated by spaces\n-or line breaks.\n-\n-@item\n-@var{gcc_switches} is a list of switches for\n-@command{gcc}. They will be passed on to all compiler invocations made by\n-@command{gnatcheck} to generate the ASIS trees. Here you can provide\n-@option{^-I^/INCLUDE_DIRS=^} switches to form the source search path,\n-and use the @option{-gnatec} switch to set the configuration file,\n-use the @option{-gnat05} switch if sources should be compiled in\n-Ada 2005 mode etc.\n-\n-@item\n-@var{rule_options} is a list of options for controlling a set of\n-rules to be checked by @command{gnatcheck} (@pxref{gnatcheck Rule Options}).\n-@end itemize\n-\n-@noindent\n-Either a @file{@var{filename}} or an @file{@var{arg_list_filename}} must be\n-supplied.\n-\n-@menu\n-* Format of the Report File::\n-* General gnatcheck Switches::\n-* gnatcheck Rule Options::\n-* Adding the Results of Compiler Checks to gnatcheck Output::\n-* Project-Wide Checks::\n-* Rule exemption::\n-* Predefined Rules::\n-* Example of gnatcheck Usage::\n-@end menu\n-\n-@node Format of the Report File\n-@section Format of the Report File\n-@cindex Report file (for @code{gnatcheck})\n-\n-@noindent\n-The @command{gnatcheck} tool outputs on @file{stderr} all messages concerning\n-rule violations except if running in quiet mode.  It also creates a text file\n-that contains the complete report of the last gnatcheck run. By default this file\n-is named @file{^gnatcheck.out^GNATCHECK.OUT^} and it is located in the\n-current directory; the @option{^-o^/OUTPUT^} option can be used to change the\n-name and/or location of the report file. This report contains:\n-\n-@itemize @bullet\n-\n-@item general details of the @command{gnatcheck} run: date and time of the run,\n-the version of the tool that has generated this report, full parameters\n-of the  @command{gnatcheck} invocation, reference to the list of checked\n-sources and applied rules (coding standard);\n-@item summary of the run (number of checked sources and detected violations);\n-@item list of exempted coding standard violations;\n-@item list of non-exempted coding standard violations;\n-@item list of problems in the definition of exemption sections;\n-@item list of language violations (compile-time errors) detected in processed sources;\n-@end itemize\n-\n-@node General gnatcheck Switches\n-@section General @command{gnatcheck} Switches\n-\n-@noindent\n-The following switches control the general @command{gnatcheck} behavior\n-\n-@table @option\n-@c !sort!\n-@cindex @option{^-a^/ALL^} (@command{gnatcheck})\n-@item ^-a^/ALL^\n-Process all units including those with read-only ALI files such as\n-those from the GNAT Run-Time library.\n-\n-@ifclear vms\n-@ignore\n-@cindex @option{-d} (@command{gnatcheck})\n-@item -d\n-Debug mode\n-@end ignore\n-\n-@cindex @option{-dd} (@command{gnatcheck})\n-@item -dd\n-Progress indicator mode (for use in GPS).\n-@end ifclear\n-\n-@cindex @option{^-h^/HELP^} (@command{gnatcheck})\n-@item ^-h^/HELP^\n-List the predefined and user-defined rules. For more details see\n-@ref{Predefined Rules}.\n-\n-@cindex @option{^-l^/LOCS^} (@command{gnatcheck})\n-@item ^-l^/LOCS^\n-Use full source locations references in the report file. For a construct from\n-a generic instantiation a full source location is a chain from the location\n-of this construct in the generic unit to the place where this unit is\n-instantiated.\n-\n-@cindex @option{^-log^/LOG^} (@command{gnatcheck})\n-@item ^-log^/LOG^\n-Duplicate all the output sent to @file{stderr} into a log file. The log file\n-is named @file{gnatcheck.log} and is located in the current directory.\n-\n-@cindex @option{^-m^/DIAGNOSTIC_LIMIT^} (@command{gnatcheck})\n-@item ^-m@i{nnnn}^/DIAGNOSTIC_LIMIT=@i{nnnn}^\n-Maximum number of diagnostics to be sent to @file{stdout}, where @i{nnnn} is in\n-the range 0@dots{}1000;\n-the default value is 500. Zero means that there is no limitation on\n-the number of diagnostic messages to be output.\n-\n-@cindex @option{^-q^/QUIET^} (@command{gnatcheck})\n-@item ^-q^/QUIET^\n-Quiet mode. All the diagnostics about rule violations are placed in the\n-@command{gnatcheck} report file only, without duplication on @file{stdout}.\n-\n-@cindex @option{^-s^/SHORT^} (@command{gnatcheck})\n-@item ^-s^/SHORT^\n-Short format of the report file (no version information, no list of applied\n-rules, no list of checked sources is included)\n-\n-@cindex @option{^--include-file=@var{file}^/INCLUDE_FILE=@var{file}^} (@command{gnatcheck})\n-@item ^--include-file^/INCLUDE_FILE^\n-Append the content of the specified text file to the report file\n-\n-@cindex @option{^-t^/TIME^} (@command{gnatcheck})\n-@item ^-t^/TIME^\n-Print out execution time.\n-\n-@cindex @option{^-v^/VERBOSE^} (@command{gnatcheck})\n-@item ^-v^/VERBOSE^\n-Verbose mode; @command{gnatcheck} generates version information and then\n-a trace of sources being processed.\n-\n-@cindex @option{^-o ^/OUTPUT^} (@command{gnatcheck})\n-@item ^-o ^/OUTPUT=^@var{report_file}\n-Set name of report file file to @var{report_file} .\n-\n-@end table\n-\n-@node gnatcheck Rule Options\n-@section @command{gnatcheck} Rule Options\n-\n-@noindent\n-The following options control the processing performed by\n-@command{gnatcheck}.\n-\n-@table @option\n-@cindex @option{+ALL} (@command{gnatcheck})\n-@item +ALL\n-Turn all the rule checks ON.\n-\n-@cindex @option{-ALL} (@command{gnatcheck})\n-@item -ALL\n-Turn all the rule checks OFF.\n-\n-@cindex @option{+R} (@command{gnatcheck})\n-@item +R@var{rule_id}@r{[}:@var{param}@r{]}\n-Turn on the check for a specified rule with the specified parameter, if any.\n-@var{rule_id} must be the identifier of one of the currently implemented rules\n-(use @option{^-h^/HELP^} for the list of implemented rules). Rule identifiers\n-are not case-sensitive. The @var{param} item must\n-be a string representing a valid parameter(s) for the specified rule.\n-If it contains any space characters then this string must be enclosed in\n-quotation marks.\n-\n-@cindex @option{-R} (@command{gnatcheck})\n-@item -R@var{rule_id}@r{[}:@var{param}@r{]}\n-Turn off the check for a specified rule with the specified parameter, if any.\n-\n-@cindex @option{-from} (@command{gnatcheck})\n-@item -from=@var{rule_option_filename}\n-Read the rule options from the text file @var{rule_option_filename}, referred\n-to as a ``coding standard file'' below.\n-\n-@end table\n-\n-@noindent\n-The default behavior is that all the rule checks are disabled.\n-\n-A coding standard file is a text file that contains a set of rule options\n-described above.\n-@cindex Coding standard file (for @code{gnatcheck})\n-The file may contain empty lines and Ada-style comments (comment\n-lines and end-of-line comments). There can be several rule options on a\n-single line (separated by a space).\n-\n-A coding standard file may reference other coding standard files by including\n-more @option{-from=@var{rule_option_filename}}\n-options, each such option being replaced with the content of the\n-corresponding coding standard file during processing. In case a\n-cycle is detected (that is, @file{@var{rule_file_1}} reads rule options\n-from @file{@var{rule_file_2}}, and @file{@var{rule_file_2}} reads\n-(directly or indirectly) rule options from @file{@var{rule_file_1}}),\n-processing fails with an error message.\n-\n-\n-@node Adding the Results of Compiler Checks to gnatcheck Output\n-@section Adding the Results of Compiler Checks to @command{gnatcheck} Output\n-\n-@noindent\n-The @command{gnatcheck} tool can include in the generated diagnostic messages\n-and in\n-the report file the results of the checks performed by the compiler. Though\n-disabled by default, this effect may be obtained by using @option{+R} with\n-the following rule identifiers and parameters:\n-\n-@table @option\n-@item Restrictions\n-To record restrictions violations (which are performed by the compiler if the\n-pragma @code{Restrictions} or @code{Restriction_Warnings} are given),\n-use the @code{Restrictions} rule\n-with the same parameters as pragma\n-@code{Restrictions} or @code{Restriction_Warnings}.\n-\n-@item Style_Checks\n-To record compiler style checks (@pxref{Style Checking}), use the\n-@code{Style_Checks} rule.\n-This rule takes a parameter in one of the following forms:\n-@itemize\n-@item\n-@code{All_Checks},\n-which enables the standard style checks corresponding to the @option{-gnatyy}\n-GNAT style check option, or\n-\n-@item\n-a string with the same\n-structure and semantics as the @code{string_LITERAL} parameter of the\n-GNAT pragma @code{Style_Checks}\n-(for further information about this pragma,\n-@pxref{Pragma Style_Checks,,, gnat_rm, GNAT Reference Manual}).\n-@end itemize\n-\n-@noindent\n-For example, the\n-@code{+RStyle_Checks:O} rule option activates\n-the compiler style check that corresponds to\n-@code{-gnatyO} style check option.\n-\n-@item Warnings\n-To record compiler warnings (@pxref{Warning Message Control}), use the\n-@code{Warnings} rule with a parameter that is a valid\n-@i{static_string_expression} argument of the GNAT pragma @code{Warnings}\n-(for further information about this pragma,\n-@pxref{Pragma Warnings,,,gnat_rm, GNAT Reference Manual}).\n-Note that in case of gnatcheck\n-'s' parameter, that corresponds to the GNAT @option{-gnatws} option, disables\n-all the specific warnings, but not suppresses the warning mode,\n-and 'e' parameter, corresponding to @option{-gnatwe} that means\n-\"treat warnings as errors\", does not have any effect.\n-\n-@end table\n-\n-To disable a specific restriction check, use @code{-RStyle_Checks} gnatcheck\n-option with the corresponding restriction name as a parameter. @code{-R} is\n-not available for @code{Style_Checks} and @code{Warnings} options, to disable\n-warnings and style checks, use the corresponding warning and style options.\n-\n-@node Project-Wide Checks\n-@section Project-Wide Checks\n-@cindex Project-wide checks (for @command{gnatcheck})\n-\n-@noindent\n-In order to perform checks on all units of a given project, you can use\n-the GNAT driver along with the @option{-P} option:\n-@smallexample\n-   gnat check -Pproj -rules -from=my_rules\n-@end smallexample\n-\n-@noindent\n-If the project @code{proj} depends upon other projects, you can perform\n-checks on the project closure using the @option{-U} option:\n-@smallexample\n-   gnat check -Pproj -U -rules -from=my_rules\n-@end smallexample\n-\n-@noindent\n-Finally, if not all the units are relevant to a particular main\n-program in the project closure, you can perform checks for the set\n-of units needed to create a given main program (unit closure) using\n-the @option{-U} option followed by the name of the main unit:\n-@smallexample\n-   gnat check -Pproj -U main -rules -from=my_rules\n-@end smallexample\n-\n-\n-@node Rule exemption\n-@section Rule exemption\n-@cindex Rule exemption (for @command{gnatcheck})\n-\n-@noindent\n-One of the most useful applications of @command{gnatcheck} is to\n-automate the enforcement of project-specific coding standards,\n-for example in safety-critical systems where particular features\n-must be restricted in order to simplify the certification effort.\n-However, it may sometimes be appropriate to violate a coding standard rule,\n-and in such cases the rationale for the violation should be provided\n-in the source program itself so that the individuals\n-reviewing or maintaining the program can immediately understand the intent.\n-\n-The @command{gnatcheck} tool supports this practice with the notion of\n-a ``rule exemption'' covering a specific source code section. Normally\n-rule violation messages are issued both on @file{stderr}\n-and in a report file. In contrast, exempted violations are not listed on\n-@file{stderr}; thus users invoking @command{gnatcheck} interactively\n-(e.g. in its GPS interface) do not need to pay attention to known and\n-justified violations. However, exempted violations along with their\n-justification are documented in a special section of the report file that\n-@command{gnatcheck} generates.\n-\n-@menu\n-* Using pragma Annotate to Control Rule Exemption::\n-* gnatcheck Annotations Rules::\n-@end menu\n-\n-@node Using pragma Annotate to Control Rule Exemption\n-@subsection Using pragma @code{Annotate} to Control Rule Exemption\n-@cindex Using pragma Annotate to control rule exemption\n-\n-@noindent\n-Rule exemption is controlled by pragma @code{Annotate} when its first\n-argument is ``gnatcheck''. The syntax of @command{gnatcheck}'s\n-exemption control annotations is as follows:\n-\n-@smallexample @c ada\n-@group\n-pragma Annotate (gnatcheck, @i{exemption_control}, @i{Rule_Name}, [@i{justification}]);\n-\n-@i{exemption_control} ::= Exempt_On | Exempt_Off\n-\n-@i{Rule_Name}         ::= string_literal\n-\n-@i{justification}     ::= string_literal\n-@end group\n-@end smallexample\n-\n-@noindent\n-When a @command{gnatcheck} annotation has more then four arguments,\n-@command{gnatcheck} issues a warning and ignores the additional arguments.\n-If the additional arguments do not follow the syntax above,\n-@command{gnatcheck} emits a warning and ignores the annotation.\n-\n-The @i{@code{Rule_Name}} argument should be the name of some existing\n-@command{gnatcheck} rule.\n-Otherwise a warning message is generated and the pragma is\n-ignored. If @code{Rule_Name} denotes a rule that is not activated by the given\n-@command{gnatcheck} call, the pragma is ignored and no warning is issued.\n-\n-A source code section where an exemption is active for a given rule is\n-delimited by an @code{exempt_on} and @code{exempt_off} annotation pair:\n-\n-@smallexample @c ada\n-pragma Annotate (gnatcheck, Exempt_On, Rule_Name, \"justification\");\n--- source code section\n-pragma Annotate (gnatcheck, Exempt_Off, Rule_Name);\n-@end smallexample\n-\n-\n-@node gnatcheck Annotations Rules\n-@subsection @command{gnatcheck} Annotations Rules\n-@cindex @command{gnatcheck} annotations rules\n-\n-@itemize @bullet\n-\n-@item\n-An ``Exempt_Off'' annotation can only appear after a corresponding\n-``Exempt_On'' annotation.\n-\n-@item\n-Exempted source code sections are only based on the source location of the\n-annotations. Any source construct between the two\n-annotations is part of the exempted source code section.\n-\n-@item\n-Exempted source code sections for different rules are independent. They can\n-be nested or intersect with one another without limitation.\n-Creating nested or intersecting source code sections for the same rule is\n-not allowed.\n-\n-@item\n-Malformed exempted source code sections are reported by a warning, and\n-the corresponding rule exemptions are ignored.\n-\n-@item\n-When an exempted source code section does not contain at least one violation\n-of the exempted rule, a warning is emitted on @file{stderr}.\n-\n-@item\n-If an ``Exempt_On'' annotation pragma does not have a matching\n-``Exempt_Off'' annotation pragma in the same compilation unit, then the\n-exemption for the given rule is ignored and a warning is issued.\n-@end itemize\n-\n-\n-@node Predefined Rules\n-@section Predefined Rules\n-@cindex Predefined rules (for @command{gnatcheck})\n-\n-@ignore\n-@c (Jan 2007) Since the global rules are still under development and are not\n-@c documented, there is no point in explaining the difference between\n-@c global and local rules\n-@noindent\n-A rule in @command{gnatcheck} is either local or global.\n-A @emph{local rule} is a rule that applies to a well-defined section\n-of a program and that can be checked by analyzing only this section.\n-A @emph{global rule} requires analysis of some global properties of the\n-whole program (mostly related to the program call graph).\n-As of @value{NOW}, the implementation of global rules should be\n-considered to be at a preliminary stage. You can use the\n-@option{+GLOBAL} option to enable all the global rules, and the\n-@option{-GLOBAL} rule option to disable all the global rules.\n-\n-All the global rules in the list below are\n-so indicated by marking them ``GLOBAL''.\n-This +GLOBAL and -GLOBAL options are not\n-included in the list of gnatcheck options above, because at the moment they\n-are considered as a temporary debug options.\n-\n-@command{gnatcheck} performs rule checks for generic\n-instances only for global rules.  This limitation may be relaxed in a later\n-release.\n-@end ignore\n-\n-@noindent\n-The predefined rules implemented in @command{gnatcheck}\n-are described in a companion document,\n-@cite{GNATcheck Reference Manual -- Predefined Rules}.\n-The rule identifier is\n-used as a parameter of @command{gnatcheck}'s @option{+R} or @option{-R}\n-switches.\n-\n-\n-@node Example of gnatcheck Usage\n-@section Example of @command{gnatcheck} Usage\n-\n-@noindent\n-Here is a simple example. Suppose that in the current directory we have a\n-project file named @file{gnatcheck_example.gpr} with the following content:\n-\n-@smallexample @c projectfile\n-project Gnatcheck_Example is\n-\n-   for Source_Dirs use (\"src\");\n-   for Object_Dir use \"obj\";\n-   for Main use (\"main.adb\");\n-\n-   package Check is\n-      for Default_Switches (\"ada\") use (\"-rules\", \"-from=coding_standard\");\n-   end Check;\n-\n-end Gnatcheck_Example;\n-@end smallexample\n-\n-@noindent\n-And the file named @file{coding_standard} is also located in the current\n-directory and has the following content:\n \n-@smallexample\n------------------------------------------------------\n--- This is a sample gnatcheck coding standard file --\n------------------------------------------------------\n-\n---  First, turning on rules, that are directly implemented in gnatcheck\n-+RAbstract_Type_Declarations\n-+RAnonymous_Arrays\n-+RLocal_Packages\n-+RFloat_Equality_Checks\n-+REXIT_Statements_With_No_Loop_Name\n-\n---  Then, activating compiler checks of interest:\n-+RStyle_Checks:e\n---  This style check checks if a unit name is present on END keyword that\n---  is the end of the unit declaration\n-@end smallexample\n-\n-@noindent\n-And the subdirectory @file{src} contains the following Ada sources:\n-\n-@file{pack.ads}:\n-\n-@smallexample @c ada\n-package Pack is\n-   type T is abstract tagged private;\n-   procedure P (X : T) is abstract;\n-\n-   package Inner is\n-      type My_Float is digits 8;\n-      function Is_Equal (L, R : My_Float) return Boolean;\n-   end Inner;\n-private\n-   type T is abstract tagged null record;\n-end;\n-@end smallexample\n-\n-@noindent\n-@file{pack.adb}:\n-\n-@smallexample @c ada\n-package body Pack is\n-   package body Inner is\n-      function Is_Equal (L, R : My_Float) return Boolean is\n-      begin\n-         return L = R;\n-      end;\n-   end Inner;\n-end Pack;\n-@end smallexample\n-\n-@noindent\n-and @file{main.adb}\n-\n-@smallexample @c ada\n-with Pack; use Pack;\n-procedure Main is\n-\n-   pragma Annotate\n-     (gnatcheck, Exempt_On, \"Anonymous_Arrays\", \"this one is fine\");\n-   Float_Array : array (1 .. 10) of Inner.My_Float;\n-   pragma Annotate (gnatcheck, Exempt_Off, \"Anonymous_Arrays\");\n-\n-   Another_Float_Array : array (1 .. 10) of Inner.My_Float;\n-\n-   use Inner;\n-\n-   B : Boolean := False;\n-\n-begin\n-   for J in Float_Array'Range loop\n-      if Is_Equal (Float_Array (J), Another_Float_Array (J)) then\n-         B := True;\n-         exit;\n-      end if;\n-   end loop;\n-end Main;\n-@end smallexample\n-\n-@noindent\n-And suppose we call @command{gnatcheck} from the current directory using\n-the @command{gnat} driver:\n-\n-@smallexample\n-   gnat check -Pgnatcheck_example.gpr\n-@end smallexample\n-\n-@noindent\n-As a result, @command{gnatcheck} is called to check all the files from the\n-project @file{gnatcheck_example.gpr} using the coding standard defined by\n-the file @file{coding_standard}. As the result, the @command{gnatcheck}\n-report file named @file{gnatcheck.out} will be created in the current\n-directory, and it will have the following content:\n-\n-@smallexample\n-RULE CHECKING REPORT\n-\n-1. OVERVIEW\n-\n-Date and time of execution: 2009.10.28 14:17\n-Tool version: GNATCHECK (built with ASIS 2.0.R for GNAT Pro 6.3.0w (20091016))\n-Command line:\n-\n-gnatcheck -files=.../GNAT-TEMP-000004.TMP -cargs -gnatec=.../GNAT-TEMP-000003.TMP -rules -from=coding_standard\n-\n-Coding standard (applied rules):\n-   Abstract_Type_Declarations\n-   Anonymous_Arrays\n-   EXIT_Statements_With_No_Loop_Name\n-   Float_Equality_Checks\n-   Local_Packages\n-\n-   Compiler style checks: -gnatye\n-\n-Number of coding standard violations: 6\n-Number of exempted coding standard violations: 1\n-\n-2. DETECTED RULE VIOLATIONS\n-\n-2.1. NON-EXEMPTED VIOLATIONS\n-\n-Source files with non-exempted violations\n-   pack.ads\n-   pack.adb\n-   main.adb\n-\n-List of violations grouped by files, and ordered by increasing source location:\n-\n-pack.ads:2:4: declaration of abstract type\n-pack.ads:5:4: declaration of local package\n-pack.ads:10:30: declaration of abstract type\n-pack.ads:11:1: (style) \"end Pack\" required\n-pack.adb:5:19: use of equality operation for float values\n-pack.adb:6:7: (style) \"end Is_Equal\" required\n-main.adb:9:26: anonymous array type\n-main.adb:19:10: exit statement with no loop name\n-\n-2.2. EXEMPTED VIOLATIONS\n-\n-Source files with exempted violations\n-   main.adb\n-\n-List of violations grouped by files, and ordered by increasing source location:\n-\n-main.adb:6:18: anonymous array type\n-   (this one is fine)\n-\n-2.3. SOURCE FILES WITH NO VIOLATION\n-\n-   No files without violations\n-\n-END OF REPORT\n-@end smallexample\n+For full details, refer to @cite{GNATcheck Reference Manual} document.\n \n \n @c *********************************"}, {"sha": "819de42321cd3a5afe34fbf56a7f7d0874749c32", "filename": "gcc/ada/sem_attr.adb", "status": "modified", "additions": 24, "deletions": 8, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/229db35122a3015db205e642f515593ed1841a00/gcc%2Fada%2Fsem_attr.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/229db35122a3015db205e642f515593ed1841a00/gcc%2Fada%2Fsem_attr.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_attr.adb?ref=229db35122a3015db205e642f515593ed1841a00", "patch": "@@ -3645,6 +3645,23 @@ package body Sem_Attr is\n       ---------\n \n       when Attribute_Old =>\n+         --  The attribute reference is a primary. If expressions follow, the\n+         --  attribute reference is an indexable object, so rewrite the node\n+         --  accordingly.\n+\n+         if Present (E1) then\n+            Rewrite (N,\n+              Make_Indexed_Component (Loc,\n+                Prefix      =>\n+                  Make_Attribute_Reference (Loc,\n+                    Prefix         => Relocate_Node (Prefix (N)),\n+                    Attribute_Name => Name_Old),\n+                Expressions => Expressions (N)));\n+\n+            Analyze (N);\n+            return;\n+         end if;\n+\n          Check_E0;\n          Set_Etype (N, P_Type);\n \n@@ -3669,8 +3686,8 @@ package body Sem_Attr is\n             Subp : Entity_Id := Current_Subprogram;\n \n             function Process (N : Node_Id) return Traverse_Result;\n-            --  Check that N does not contain references to local variables\n-            --  or other local entities of Subp.\n+            --  Check that N does not contain references to local variables or\n+            --  other local entities of Subp.\n \n             -------------\n             -- Process --\n@@ -3706,10 +3723,10 @@ package body Sem_Attr is\n                if Present (Enclosing_Subprogram (Current_Subprogram)) then\n \n                   --  Check that there is no reference to the enclosing\n-                  --  subprogram local variables. Otherwise, we might end\n-                  --  up being called from the enclosing subprogram and thus\n-                  --  using 'Old on a local variable which is not defined\n-                  --  at entry time.\n+                  --  subprogram local variables. Otherwise, we might end up\n+                  --  being called from the enclosing subprogram and thus using\n+                  --  'Old on a local variable which is not defined at entry\n+                  --  time.\n \n                   Subp := Enclosing_Subprogram (Current_Subprogram);\n                   Check_No_Local (P);\n@@ -3755,8 +3772,7 @@ package body Sem_Attr is\n             elsif Is_Entity_Name (P)\n               and then Is_Pure (Entity (P))\n             then\n-               Error_Attr_P\n-                 (\"prefix of % attribute must not be declared pure\");\n+               Error_Attr_P (\"prefix of% attribute must not be declared pure\");\n             end if;\n          end if;\n "}, {"sha": "17c08696c0d574d5090866855a2876497490b7a6", "filename": "gcc/ada/sem_ch10.adb", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/229db35122a3015db205e642f515593ed1841a00/gcc%2Fada%2Fsem_ch10.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/229db35122a3015db205e642f515593ed1841a00/gcc%2Fada%2Fsem_ch10.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch10.adb?ref=229db35122a3015db205e642f515593ed1841a00", "patch": "@@ -2562,11 +2562,10 @@ package body Sem_Ch10 is\n                 Present (Renamed_Entity (Entity (Selector_Name (Pref))))\n               and then Entity (Selector_Name (Pref)) /= Par_Name\n             then\n-\n-            --  The prefix is a child unit that denotes a renaming\n-            --  declaration. Replace the prefix directly with the renamed\n-            --  unit, because the rest of the prefix is irrelevant to the\n-            --  visibility of the real unit.\n+            --  The prefix is a child unit that denotes a renaming declaration.\n+            --  Replace the prefix directly with the renamed unit, because the\n+            --  rest of the prefix is irrelevant to the visibility of the real\n+            --  unit.\n \n                Rewrite (Pref, New_Occurrence_Of (Par_Name, Sloc (Pref)));\n                exit;"}, {"sha": "2172f9874a570e2c72448d9814333b36cf257269", "filename": "gcc/ada/sem_prag.adb", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/229db35122a3015db205e642f515593ed1841a00/gcc%2Fada%2Fsem_prag.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/229db35122a3015db205e642f515593ed1841a00/gcc%2Fada%2Fsem_prag.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_prag.adb?ref=229db35122a3015db205e642f515593ed1841a00", "patch": "@@ -1197,16 +1197,18 @@ package body Sem_Prag is\n          Typ     : constant Entity_Id := Etype (Comp_Id);\n \n          function Inside_Generic_Body (Id : Entity_Id) return Boolean;\n-         --  Determine whether entity Id appears inside a generic body\n+         --  Determine whether entity Id appears inside a generic body.\n+         --  Shouldn't this be in a more general place ???\n \n          -------------------------\n          -- Inside_Generic_Body --\n          -------------------------\n \n          function Inside_Generic_Body (Id : Entity_Id) return Boolean is\n-            S : Entity_Id := Id;\n+            S : Entity_Id;\n \n          begin\n+            S := Id;\n             while Present (S) and then S /= Standard_Standard loop\n                if Ekind (S) = E_Generic_Package\n                  and then In_Package_Body (S)\n@@ -1338,6 +1340,7 @@ package body Sem_Prag is\n       procedure Check_First_Subtype (Arg : Node_Id) is\n          Argx : constant Node_Id := Get_Pragma_Arg (Arg);\n          Ent  : constant Entity_Id := Entity (Argx);\n+\n       begin\n          if Is_First_Subtype (Ent) then\n             null;\n@@ -2195,7 +2198,6 @@ package body Sem_Prag is\n \n             if Error_Msg_Name_1 = Name_Precondition then\n                Error_Msg_Name_1 := Name_Pre;\n-\n             elsif Error_Msg_Name_1 = Name_Postcondition then\n                Error_Msg_Name_1 := Name_Post;\n             end if;"}, {"sha": "4861fdcabda7c3b383513c91736f473cbb7e42ce", "filename": "gcc/ada/sem_util.adb", "status": "modified", "additions": 14, "deletions": 7, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/229db35122a3015db205e642f515593ed1841a00/gcc%2Fada%2Fsem_util.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/229db35122a3015db205e642f515593ed1841a00/gcc%2Fada%2Fsem_util.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_util.adb?ref=229db35122a3015db205e642f515593ed1841a00", "patch": "@@ -7897,17 +7897,24 @@ package body Sem_Util is\n          when N_Explicit_Dereference =>\n             return False;\n \n-         --  Function call arguments are never lvalues\n+         --  Positional parameter for subprogram, entry, or accept call.\n+         --  In older versions of Ada function call arguments are never\n+         --  lvalues. In Ada2012 functions can have in-out parameters.\n \n-         when N_Function_Call =>\n-            return False;\n-\n-         --  Positional parameter for procedure, entry,  or accept call\n-\n-         when N_Procedure_Call_Statement |\n+         when N_Function_Call            |\n+              N_Procedure_Call_Statement |\n               N_Entry_Call_Statement     |\n               N_Accept_Statement\n          =>\n+            if Nkind (P) = N_Function_Call\n+              and then Ada_Version < Ada_2012\n+            then\n+               return False;\n+            end if;\n+\n+            --  The following mechanism is clumsy and fragile. A single\n+            --  flag set in Resolve_Actuals would be preferable ???\n+\n             declare\n                Proc : Entity_Id;\n                Form : Entity_Id;"}, {"sha": "5ea780a39bef34ea0b052c781e08d65189abb3ed", "filename": "gcc/ada/sem_vfpt.adb", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/229db35122a3015db205e642f515593ed1841a00/gcc%2Fada%2Fsem_vfpt.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/229db35122a3015db205e642f515593ed1841a00/gcc%2Fada%2Fsem_vfpt.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_vfpt.adb?ref=229db35122a3015db205e642f515593ed1841a00", "patch": "@@ -37,6 +37,7 @@ package body Sem_VFpt is\n \n    procedure Set_D_Float (E : Entity_Id) is\n       VAXDF_Digits : constant := 9;\n+\n    begin\n       Init_Size         (Base_Type (E), 64);\n       Init_Alignment    (Base_Type (E));\n@@ -56,6 +57,7 @@ package body Sem_VFpt is\n \n    procedure Set_F_Float (E : Entity_Id) is\n       VAXFF_Digits : constant := 6;\n+\n    begin\n       Init_Size         (Base_Type (E), 32);\n       Init_Alignment    (Base_Type (E));\n@@ -75,6 +77,7 @@ package body Sem_VFpt is\n \n    procedure Set_G_Float (E : Entity_Id) is\n       VAXGF_Digits : constant := 15;\n+\n    begin\n       Init_Size         (Base_Type (E), 64);\n       Init_Alignment    (Base_Type (E));\n@@ -94,6 +97,7 @@ package body Sem_VFpt is\n \n    procedure Set_IEEE_Long (E : Entity_Id) is\n       IEEEL_Digits : constant := 15;\n+\n    begin\n       Init_Size         (Base_Type (E), 64);\n       Init_Alignment    (Base_Type (E));\n@@ -113,6 +117,7 @@ package body Sem_VFpt is\n \n    procedure Set_IEEE_Short (E : Entity_Id) is\n       IEEES_Digits : constant := 6;\n+\n    begin\n       Init_Size         (Base_Type (E), 32);\n       Init_Alignment    (Base_Type (E));"}]}