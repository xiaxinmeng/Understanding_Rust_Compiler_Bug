{"sha": "33b881ca3a5ced6c254d3570dea2282ed6a7534d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzNiODgxY2EzYTVjZWQ2YzI1NGQzNTcwZGVhMjI4MmVkNmE3NTM0ZA==", "commit": {"author": {"name": "Paolo Bonzini", "email": "bonzini@gnu.org", "date": "2006-06-08T15:40:48Z"}, "committer": {"name": "Paolo Bonzini", "email": "bonzini@gcc.gnu.org", "date": "2006-06-08T15:40:48Z"}, "message": "re PR middle-end/27733 (Large compile time regression)\n\n2006-06-08  Paolo Bonzini  <bonzini@gnu.org>\n\n\tPR middle-end/27733\n\t* expmed.c (struct alg_hash_entry): Fix type of field T\n\tto match synth_mult argument.\n\t(NUM_ALG_HASH_ENTRIES): Make it bigger for 64-bit HOST_WIDE_INT.\n\nFrom-SVN: r114488", "tree": {"sha": "fbbdd2212c6d4f150fe51ab35d8f06e6f18863fc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/fbbdd2212c6d4f150fe51ab35d8f06e6f18863fc"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/33b881ca3a5ced6c254d3570dea2282ed6a7534d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/33b881ca3a5ced6c254d3570dea2282ed6a7534d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/33b881ca3a5ced6c254d3570dea2282ed6a7534d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/33b881ca3a5ced6c254d3570dea2282ed6a7534d/comments", "author": {"login": "bonzini", "id": 42082, "node_id": "MDQ6VXNlcjQyMDgy", "avatar_url": "https://avatars.githubusercontent.com/u/42082?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bonzini", "html_url": "https://github.com/bonzini", "followers_url": "https://api.github.com/users/bonzini/followers", "following_url": "https://api.github.com/users/bonzini/following{/other_user}", "gists_url": "https://api.github.com/users/bonzini/gists{/gist_id}", "starred_url": "https://api.github.com/users/bonzini/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bonzini/subscriptions", "organizations_url": "https://api.github.com/users/bonzini/orgs", "repos_url": "https://api.github.com/users/bonzini/repos", "events_url": "https://api.github.com/users/bonzini/events{/privacy}", "received_events_url": "https://api.github.com/users/bonzini/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "313ab5ee9c2616aa6c3058cf992d2f69b52fc2db", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/313ab5ee9c2616aa6c3058cf992d2f69b52fc2db", "html_url": "https://github.com/Rust-GCC/gccrs/commit/313ab5ee9c2616aa6c3058cf992d2f69b52fc2db"}], "stats": {"total": 13, "additions": 12, "deletions": 1}, "files": [{"sha": "654c990657eac693948296862cb2c905eedd2d52", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/33b881ca3a5ced6c254d3570dea2282ed6a7534d/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/33b881ca3a5ced6c254d3570dea2282ed6a7534d/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=33b881ca3a5ced6c254d3570dea2282ed6a7534d", "patch": "@@ -1,3 +1,10 @@\n+2006-06-08  Paolo Bonzini  <bonzini@gnu.org>\n+\n+\tPR middle-end/27733\n+\t* expmed.c (struct alg_hash_entry): Fix type of field T\n+\tto match synth_mult argument.\n+\t(NUM_ALG_HASH_ENTRIES): Make it bigger for 64-bit HOST_WIDE_INT.\n+\n 2006-06-08  Maxim Kuvyrkov  <mkuvyrkov@ispras.ru>\n \n \tPR target/27863"}, {"sha": "2e8906eb7a9994f36e00e13728ec58b5a7882402", "filename": "gcc/expmed.c", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/33b881ca3a5ced6c254d3570dea2282ed6a7534d/gcc%2Fexpmed.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/33b881ca3a5ced6c254d3570dea2282ed6a7534d/gcc%2Fexpmed.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpmed.c?ref=33b881ca3a5ced6c254d3570dea2282ed6a7534d", "patch": "@@ -2395,7 +2395,7 @@ struct algorithm\n /* The entry for our multiplication cache/hash table.  */\n struct alg_hash_entry {\n   /* The number we are multiplying by.  */\n-  unsigned int t;\n+  unsigned HOST_WIDE_INT t;\n \n   /* The mode in which we are multiplying something by T.  */\n   enum machine_mode mode;\n@@ -2410,7 +2410,11 @@ struct alg_hash_entry {\n };\n \n /* The number of cache/hash entries.  */\n+#if HOST_BITS_PER_WIDE_INT == 64\n+#define NUM_ALG_HASH_ENTRIES 1031\n+#else\n #define NUM_ALG_HASH_ENTRIES 307\n+#endif\n \n /* Each entry of ALG_HASH caches alg_code for some integer.  This is\n    actually a hash table.  If we have a collision, that the older"}]}