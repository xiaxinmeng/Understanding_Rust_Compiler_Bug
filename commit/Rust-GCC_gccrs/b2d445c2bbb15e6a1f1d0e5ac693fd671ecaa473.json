{"sha": "b2d445c2bbb15e6a1f1d0e5ac693fd671ecaa473", "node_id": "C_kwDOANBUbNoAKGIyZDQ0NWMyYmJiMTVlNmExZjFkMGU1YWM2OTNmZDY3MWVjYWE0NzM", "commit": {"author": {"name": "Arthur Cohen", "email": "arthur.cohen@embecosm.com", "date": "2022-12-02T09:19:39Z"}, "committer": {"name": "Arthur Cohen", "email": "arthur.cohen@embecosm.com", "date": "2022-12-05T13:52:09Z"}, "message": "long_flag: Add env variable, remove bootstrap guards", "tree": {"sha": "d79b849967b142fddcb7859445d3a10e446158c8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d79b849967b142fddcb7859445d3a10e446158c8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b2d445c2bbb15e6a1f1d0e5ac693fd671ecaa473", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b2d445c2bbb15e6a1f1d0e5ac693fd671ecaa473", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b2d445c2bbb15e6a1f1d0e5ac693fd671ecaa473", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b2d445c2bbb15e6a1f1d0e5ac693fd671ecaa473/comments", "author": {"login": "CohenArthur", "id": 43524065, "node_id": "MDQ6VXNlcjQzNTI0MDY1", "avatar_url": "https://avatars.githubusercontent.com/u/43524065?v=4", "gravatar_id": "", "url": "https://api.github.com/users/CohenArthur", "html_url": "https://github.com/CohenArthur", "followers_url": "https://api.github.com/users/CohenArthur/followers", "following_url": "https://api.github.com/users/CohenArthur/following{/other_user}", "gists_url": "https://api.github.com/users/CohenArthur/gists{/gist_id}", "starred_url": "https://api.github.com/users/CohenArthur/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/CohenArthur/subscriptions", "organizations_url": "https://api.github.com/users/CohenArthur/orgs", "repos_url": "https://api.github.com/users/CohenArthur/repos", "events_url": "https://api.github.com/users/CohenArthur/events{/privacy}", "received_events_url": "https://api.github.com/users/CohenArthur/received_events", "type": "User", "site_admin": false}, "committer": {"login": "CohenArthur", "id": 43524065, "node_id": "MDQ6VXNlcjQzNTI0MDY1", "avatar_url": "https://avatars.githubusercontent.com/u/43524065?v=4", "gravatar_id": "", "url": "https://api.github.com/users/CohenArthur", "html_url": "https://github.com/CohenArthur", "followers_url": "https://api.github.com/users/CohenArthur/followers", "following_url": "https://api.github.com/users/CohenArthur/following{/other_user}", "gists_url": "https://api.github.com/users/CohenArthur/gists{/gist_id}", "starred_url": "https://api.github.com/users/CohenArthur/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/CohenArthur/subscriptions", "organizations_url": "https://api.github.com/users/CohenArthur/orgs", "repos_url": "https://api.github.com/users/CohenArthur/repos", "events_url": "https://api.github.com/users/CohenArthur/events{/privacy}", "received_events_url": "https://api.github.com/users/CohenArthur/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3df7703a627ed3a070c91cf2e3b92ec993684531", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3df7703a627ed3a070c91cf2e3b92ec993684531", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3df7703a627ed3a070c91cf2e3b92ec993684531"}], "stats": {"total": 23, "additions": 10, "deletions": 13}, "files": [{"sha": "21d7d4eef71656aa52e40f649692d260585eef01", "filename": "gcc/rust/Make-lang.in", "status": "modified", "additions": 3, "deletions": 8, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b2d445c2bbb15e6a1f1d0e5ac693fd671ecaa473/gcc%2Frust%2FMake-lang.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b2d445c2bbb15e6a1f1d0e5ac693fd671ecaa473/gcc%2Frust%2FMake-lang.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2FMake-lang.in?ref=b2d445c2bbb15e6a1f1d0e5ac693fd671ecaa473", "patch": "@@ -49,13 +49,6 @@ GCCRS_D_OBJS = \\\n    rust/rustspec.o \\\n    $(END)\n \n-RUST_CXXFLAGS = $(CXXFLAGS)\n-\n-# If the file exists, we're bootstrapping. Set a specific flag for the session manager.\n-ifneq ($(wildcard ../stage_current),)\n-SESSION_FLAGS = -DRUST_BOOTSTRAP_BUILD\n-endif\n-\n gccrs$(exeext): $(GCCRS_D_OBJS) $(EXTRA_GCC_OBJS) libcommon-target.a $(LIBDEPS)\n \t+$(LINKER) $(ALL_LINKERFLAGS) $(LDFLAGS) -o $@ \\\n \t  $(GCCRS_D_OBJS) $(EXTRA_GCC_OBJS) libcommon-target.a \\\n@@ -336,7 +329,9 @@ RUST_INCLUDES = -I $(srcdir)/rust \\\n CFLAGS-rust/rust-lang.o += $(RUST_INCLUDES)\n CFLAGS-rust/rust-lex.o += $(RUST_INCLUDES)\n CFLAGS-rust/rust-parse.o += $(RUST_INCLUDES)\n-CFLAGS-rust/rust-session-manager.o += $(RUST_INCLUDES) $(SESSION_FLAGS)\n+CFLAGS-rust/rust-session-manager.o += $(RUST_INCLUDES)\n+\n+RUST_CXXFLAGS = $(CXXFLAGS)\n \n # build all rust/lex files in rust folder, add cross-folder includes\n rust/%.o: rust/lex/%.cc"}, {"sha": "54660a85322d8f3ad69857c848a5e4f9115f1919", "filename": "gcc/rust/rust-session-manager.cc", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b2d445c2bbb15e6a1f1d0e5ac693fd671ecaa473/gcc%2Frust%2Frust-session-manager.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b2d445c2bbb15e6a1f1d0e5ac693fd671ecaa473/gcc%2Frust%2Frust-session-manager.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Frust-session-manager.cc?ref=b2d445c2bbb15e6a1f1d0e5ac693fd671ecaa473", "patch": "@@ -427,9 +427,8 @@ Session::handle_crate_name (const AST::Crate &parsed_crate)\n void\n Session::compile_crate (const char *filename)\n {\n-#ifdef RUST_BOOTSTRAP_BUILD\n-  // Do not emit the fatal error or require the flag for dev builds\n-  if (!flag_rust_experimental)\n+  if (!flag_rust_experimental\n+      && !std::getenv (\"GCCRS_INCOMPLETE_AND_EXPERIMENTAL_COMPILER_DO_NOT_USE\"))\n     rust_fatal_error (\n       Location (), \"%s\",\n       \"gccrs is not yet able to compile Rust code \"\n@@ -443,11 +442,12 @@ Session::compile_crate (const char *filename)\n       \"If you understand this, and understand that the binaries produced might \"\n       \"not behave accordingly, you may attempt to use gccrs in an experimental \"\n       \"manner by passing the following flag:\\n\\n\"\n-      \"`-frust-incomplete-and-experimental-compiler-do-not-use`\\n\\nFor \"\n+      \"`-frust-incomplete-and-experimental-compiler-do-not-use`\\n\\nor by \"\n+      \"defining the following environment variable (any value will \"\n+      \"do)\\n\\nGCCRS_INCOMPLETE_AND_EXPERIMENTAL_COMPILER_DO_NOT_USE\\n\\nFor\"\n       \"cargo-gccrs, this means passing\\n\\n\"\n       \"GCCRS_EXTRA_FLAGS=\\\"-frust-incomplete-and-experimental-compiler-do-not-\"\n       \"use\\\"\\n\\nas an environment variable.\");\n-#endif\n \n   RAIIFile file_wrap (filename);\n   if (!file_wrap.ok ())"}, {"sha": "287905bd544c9ec126ae08de63e1ebf4930e9868", "filename": "gcc/testsuite/lib/rust.exp", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b2d445c2bbb15e6a1f1d0e5ac693fd671ecaa473/gcc%2Ftestsuite%2Flib%2Frust.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b2d445c2bbb15e6a1f1d0e5ac693fd671ecaa473/gcc%2Ftestsuite%2Flib%2Frust.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Flib%2Frust.exp?ref=b2d445c2bbb15e6a1f1d0e5ac693fd671ecaa473", "patch": "@@ -149,6 +149,8 @@ proc rust_init { args } {\n \tlappend ALWAYS_RUSTFLAGS \"additional_flags=$TOOL_OPTIONS\"\n     }\n \n+\tlappend ALWAYS_RUSTFLAGS \"additional_flags=-frust-incomplete-and-experimental-compiler-do-not-use\"\t\n+\t\n     verbose -log \"ALWAYS_RUSTFLAGS set to $ALWAYS_RUSTFLAGS\"\n \n     set gcc_warning_prefix \"warning:\""}]}