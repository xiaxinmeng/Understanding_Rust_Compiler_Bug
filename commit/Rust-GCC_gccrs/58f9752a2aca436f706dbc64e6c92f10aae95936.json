{"sha": "58f9752a2aca436f706dbc64e6c92f10aae95936", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NThmOTc1MmEyYWNhNDM2ZjcwNmRiYzY0ZTZjOTJmMTBhYWU5NTkzNg==", "commit": {"author": {"name": "Kaveh R. Ghazi", "email": "ghazi@caip.rutgers.edu", "date": "2007-08-25T15:10:40Z"}, "committer": {"name": "Kaveh Ghazi", "email": "ghazi@gcc.gnu.org", "date": "2007-08-25T15:10:40Z"}, "message": "c-common.c (vector_types_convertible_p, [...]): Constify.\n\n\t* c-common.c (vector_types_convertible_p,\n\tdecl_with_nonnull_addr_p, c_promoting_integer_type_p,\n\tself_promoting_args_p): Constify.\n\t* c-common.h (has_c_linkage, decl_with_nonnull_addr_p,\n\tc_promoting_integer_type_p, self_promoting_args_p,\n\tanon_aggr_type_p, vector_types_convertible_p): Likewise.\n\t* c-decl.c (anon_aggr_type_p): Likewise.\n\t* * c-dump.c (dump_stmt): Likewise.\n\t* c-objc-common.c (has_c_linkage): Likewise.\n\t* c-tree.h (same_translation_unit_p): Likewise.\n\t* c-typeck.c (null_pointer_constant_p,\n\ttagged_types_tu_compatible_p, function_types_compatible_p,\n\ttype_lists_compatible_p, lvalue_or_else, lvalue_p,\n\tcomptypes_internal, struct tagged_tu_seen_cache,\n\tsame_translation_unit_p, alloc_tagged_tu_seen_cache,\n\tc_size_in_bytes): Likewise.\n\t* ggc-common.c (compare_ptr_data, hash_descriptor, eq_descriptor,\n\thash_ptr, eq_ptr): Likewise.\n\t* langhooks-def.h (lhd_decl_ok_for_sibcall,\n\tLANG_HOOKS_OMP_PRIVATIZE_BY_REFERENCE): Likewise.\n\t* langhooks.c (lhd_decl_ok_for_sibcall): Likewise.\n\t* langhooks.h (ok_for_sibcall, omp_privatize_by_reference):\n\tLikewise.\n\t* optabs.c (optab_for_tree_code): Likewise.\n\t* optabs.h (optab_for_tree_code): Likewise.\n\t* rtl.h (simplify_rtx): Likewise.\n\t* simplify-rtx.c (simplify_rtx): Likewise.\n\t* tree-dump.c (queue, queue_and_dump_index, queue_and_dump_type,\n\tdump_flag, dump_node): Likewise.\n\t* tree-dump.h (struct dump_info, dump_stmt, queue_and_dump_index,\n\tqueue_and_dump_type, dump_flag): Likewise.\n\t* tree-flow.h (vect_can_force_dr_alignment_p): Likewise.\n\t* tree-pass.h (dump_node): Likewise.\n\t* tree-vectorizer.c (vect_can_force_dr_alignment_p,\n\tsupportable_narrowing_operation): Likewise.\n\t* tree-vectorizer.h (vect_can_force_dr_alignment_p,\n\tsupportable_narrowing_operation): Likewise.\n\t* tree-vrp.c (needs_overflow_infinity, supports_overflow_infinity,\n\tis_negative_overflow_infinity, is_positive_overflow_infinity,\n\tis_overflow_infinity, vrp_val_is_max, vrp_val_is_min,\n\tnonnull_arg_p, get_value_range, vrp_operand_equal_p,\n\tupdate_value_range, add_equivalence, ssa_name_nonnegative_p,\n\tssa_name_nonzero_p, fp_predicate): Likewise.\n\t* tree.c (auto_var_in_fn_p, empty_body_p): Likewise.\n\t* tree.h (empty_body_p, auto_var_in_fn_p, ssa_name_nonzero_p,\n\tssa_name_nonnegative_p): Likewise.\n\ncp:\n\t* call.c (sufficient_parms_p): Constify.\n\t* class.c (same_signature_p): Likewise.\n\t* cp-gimplify.c (is_invisiref_parm,\n\tcxx_omp_privatize_by_reference): Likewise.\n\t* cp-objcp-common.c (has_c_linkage): Likewise.\n\t* cp-tree.h (NON_THUNK_FUNCTION_CHECK, THUNK_FUNCTION_CHECK,\n\tsufficient_parms_p, same_signature_p, copy_fn_p, move_fn_p,\n\tgrok_ctor_properties, nothrow_libfn_p, skip_artificial_parms_for,\n\tnum_artificial_parms_for, comp_template_parms,\n\ttemplate_parameter_pack_p, any_dependent_template_arguments_p,\n\tany_type_dependent_arguments_p, any_value_dependent_elements_p,\n\trepo_export_class_p, cxx_omp_privatize_by_reference, pod_type_p,\n\tzero_init_p, member_p, cp_lvalue_kind,\n\tbuiltin_valid_in_constant_expr_p, decl_anon_ns_mem_p,\n\tvarargs_function_p, is_dummy_object, special_function_kind,\n\tstring_conv_p, type_unknown_p, comp_except_specs, compparms,\n\tcomp_cv_qualification, is_bitfield_expr_with_lowered_type,\n\tunlowered_expr_type, ptr_reasonably_similar, cp_type_readonly,\n\tcp_has_mutable_p, at_least_as_qualified_p,\n\tinvalid_nonstatic_memfn_p, lvalue_or_else, lvalue_p): Likewise.\n\t* decl.c (copy_fn_p, move_fn_p, grok_ctor_properties): Likewise.\n\t* except.c (nothrow_libfn_p): Likewise.\n\t* method.c (skip_artificial_parms_for, num_artificial_parms_for):\n\tLikewise.\n\t* pt.c (comp_template_parms, template_parameter_pack_p,\n\tany_type_dependent_arguments_p, any_value_dependent_elements_p,\n\tany_dependent_template_arguments_p): Likewise.\n\t* repo.c (repo_export_class_p): Likewise.\n\t* semantics.c (anon_aggr_type_p): Likewise.\n\t* tree.c (lvalue_p_1, real_lvalue_p, lvalue_p,\n\tbuiltin_valid_in_constant_expr_p, decl_anon_ns_mem_p,\n\tvarargs_function_p, member_p, is_dummy_object, pod_type_p,\n\tzero_init_p, special_function_p): Likewise.\n\t* typeck.c (comp_array_types, type_unknown_p, comp_except_specs,\n\tcomp_array_types, at_least_as_qualified_p, comp_cv_qualification,\n\tcompparms, invalid_nonstatic_memfn_p,\n\tis_bitfield_expr_with_lowered_type, unlowered_expr_type,\n\tstring_conv_p, ptr_reasonably_similar, cp_type_readonly,\n\tcp_has_mutable_p, lvalue_or_else): Likewise.\n\nfortran:\n\t* trans-openmp.c (gfc_omp_privatize_by_reference): Constify.\n\t* trans.h (gfc_omp_privatize_by_reference): Likewise.\n\njava:\n\t* lang.c (java_decl_ok_for_sibcall): Likewise.\n\nFrom-SVN: r127799", "tree": {"sha": "3105bdbb1aedf2d08116e9eaf8cfef646a9bfb77", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3105bdbb1aedf2d08116e9eaf8cfef646a9bfb77"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/58f9752a2aca436f706dbc64e6c92f10aae95936", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/58f9752a2aca436f706dbc64e6c92f10aae95936", "html_url": "https://github.com/Rust-GCC/gccrs/commit/58f9752a2aca436f706dbc64e6c92f10aae95936", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/58f9752a2aca436f706dbc64e6c92f10aae95936/comments", "author": null, "committer": null, "parents": [{"sha": "a10dc28976522fabc4a04dc52a0289795bcea2c2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a10dc28976522fabc4a04dc52a0289795bcea2c2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a10dc28976522fabc4a04dc52a0289795bcea2c2"}], "stats": {"total": 498, "additions": 299, "deletions": 199}, "files": [{"sha": "c3b4ff9018b814e3fed207fdf6a590e860ac775e", "filename": "gcc/ChangeLog", "status": "modified", "additions": 49, "deletions": 0, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/58f9752a2aca436f706dbc64e6c92f10aae95936/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/58f9752a2aca436f706dbc64e6c92f10aae95936/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=58f9752a2aca436f706dbc64e6c92f10aae95936", "patch": "@@ -1,3 +1,52 @@\n+2007-08-25  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n+\n+\t* c-common.c (vector_types_convertible_p,\n+\tdecl_with_nonnull_addr_p, c_promoting_integer_type_p,\n+\tself_promoting_args_p): Constify.\n+\t* c-common.h (has_c_linkage, decl_with_nonnull_addr_p,\n+\tc_promoting_integer_type_p, self_promoting_args_p,\n+\tanon_aggr_type_p, vector_types_convertible_p): Likewise.\n+\t* c-decl.c (anon_aggr_type_p): Likewise.\n+\t* * c-dump.c (dump_stmt): Likewise.\n+\t* c-objc-common.c (has_c_linkage): Likewise.\n+\t* c-tree.h (same_translation_unit_p): Likewise.\n+\t* c-typeck.c (null_pointer_constant_p,\n+\ttagged_types_tu_compatible_p, function_types_compatible_p,\n+\ttype_lists_compatible_p, lvalue_or_else, lvalue_p,\n+\tcomptypes_internal, struct tagged_tu_seen_cache,\n+\tsame_translation_unit_p, alloc_tagged_tu_seen_cache,\n+\tc_size_in_bytes): Likewise.\n+\t* ggc-common.c (compare_ptr_data, hash_descriptor, eq_descriptor,\n+\thash_ptr, eq_ptr): Likewise.\n+\t* langhooks-def.h (lhd_decl_ok_for_sibcall,\n+\tLANG_HOOKS_OMP_PRIVATIZE_BY_REFERENCE): Likewise.\n+\t* langhooks.c (lhd_decl_ok_for_sibcall): Likewise.\n+\t* langhooks.h (ok_for_sibcall, omp_privatize_by_reference):\n+\tLikewise.\n+\t* optabs.c (optab_for_tree_code): Likewise.\n+\t* optabs.h (optab_for_tree_code): Likewise.\n+\t* rtl.h (simplify_rtx): Likewise.\n+\t* simplify-rtx.c (simplify_rtx): Likewise.\n+\t* tree-dump.c (queue, queue_and_dump_index, queue_and_dump_type,\n+\tdump_flag, dump_node): Likewise.\n+\t* tree-dump.h (struct dump_info, dump_stmt, queue_and_dump_index,\n+\tqueue_and_dump_type, dump_flag): Likewise.\n+\t* tree-flow.h (vect_can_force_dr_alignment_p): Likewise.\n+\t* tree-pass.h (dump_node): Likewise.\n+\t* tree-vectorizer.c (vect_can_force_dr_alignment_p,\n+\tsupportable_narrowing_operation): Likewise.\n+\t* tree-vectorizer.h (vect_can_force_dr_alignment_p,\n+\tsupportable_narrowing_operation): Likewise.\n+\t* tree-vrp.c (needs_overflow_infinity, supports_overflow_infinity,\n+\tis_negative_overflow_infinity, is_positive_overflow_infinity,\n+\tis_overflow_infinity, vrp_val_is_max, vrp_val_is_min,\n+\tnonnull_arg_p, get_value_range, vrp_operand_equal_p,\n+\tupdate_value_range, add_equivalence, ssa_name_nonnegative_p,\n+\tssa_name_nonzero_p, fp_predicate): Likewise.\n+\t* tree.c (auto_var_in_fn_p, empty_body_p): Likewise.\n+\t* tree.h (empty_body_p, auto_var_in_fn_p, ssa_name_nonzero_p,\n+\tssa_name_nonnegative_p): Likewise.\n+\n 2007-08-25  Hans Kester  <hans.kester@ellips.nl>\n \n \t* config.gcc : Add x86_64-elf target."}, {"sha": "30d381625b091152480d366e36c52f2a088a26c7", "filename": "gcc/c-common.c", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/58f9752a2aca436f706dbc64e6c92f10aae95936/gcc%2Fc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/58f9752a2aca436f706dbc64e6c92f10aae95936/gcc%2Fc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-common.c?ref=58f9752a2aca436f706dbc64e6c92f10aae95936", "patch": "@@ -1172,7 +1172,7 @@ check_main_parameter_types (tree decl)\n    in effect, emit a note telling the user about that option if such\n    a note has not previously been emitted.  */\n bool\n-vector_types_convertible_p (tree t1, tree t2, bool emit_lax_note)\n+vector_types_convertible_p (const_tree t1, const_tree t2, bool emit_lax_note)\n {\n   static bool emitted_lax_note = false;\n   bool convertible_lax;\n@@ -2896,7 +2896,7 @@ pointer_int_sum (enum tree_code resultcode, tree ptrop, tree intop)\n    NULL.  */\n \n bool\n-decl_with_nonnull_addr_p (tree expr)\n+decl_with_nonnull_addr_p (const_tree expr)\n {\n   return (DECL_P (expr)\n \t  && (TREE_CODE (expr) == PARM_DECL\n@@ -4097,7 +4097,7 @@ def_builtin_1 (enum built_in_function fncode,\n    integral promotions defined in ISO C99 6.3.1.1/2.  */\n \n bool\n-c_promoting_integer_type_p (tree t)\n+c_promoting_integer_type_p (const_tree t)\n {\n   switch (TREE_CODE (t))\n     {\n@@ -4127,9 +4127,9 @@ c_promoting_integer_type_p (tree t)\n    and none of their types is affected by default promotions.  */\n \n int\n-self_promoting_args_p (tree parms)\n+self_promoting_args_p (const_tree parms)\n {\n-  tree t;\n+  const_tree t;\n   for (t = parms; t; t = TREE_CHAIN (t))\n     {\n       tree type = TREE_VALUE (t);"}, {"sha": "5a27eec5e6f91bccb4d6d4c840fffd3c85335e1b", "filename": "gcc/c-common.h", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/58f9752a2aca436f706dbc64e6c92f10aae95936/gcc%2Fc-common.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/58f9752a2aca436f706dbc64e6c92f10aae95936/gcc%2Fc-common.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-common.h?ref=58f9752a2aca436f706dbc64e6c92f10aae95936", "patch": "@@ -319,7 +319,7 @@ extern int c_expand_decl (tree);\n extern int field_decl_cmp (const void *, const void *);\n extern void resort_sorted_fields (void *, void *, gt_pointer_operator,\n \t\t\t\t  void *);\n-extern bool has_c_linkage (tree decl);\n+extern bool has_c_linkage (const_tree decl);\n \f\n /* Switches common to the C front ends.  */\n \n@@ -677,7 +677,7 @@ extern tree c_common_unsigned_type (tree);\n extern tree c_common_signed_type (tree);\n extern tree c_common_signed_or_unsigned_type (int, tree);\n extern tree c_build_bitfield_integer_type (unsigned HOST_WIDE_INT, int);\n-extern bool decl_with_nonnull_addr_p (tree);\n+extern bool decl_with_nonnull_addr_p (const_tree);\n extern tree c_common_truthvalue_conversion (tree);\n extern void c_apply_type_quals_to_decl (int, tree);\n extern tree c_sizeof_or_alignof_type (tree, bool, int);\n@@ -731,8 +731,8 @@ extern void c_common_finish (void);\n extern void c_common_parse_file (int);\n extern alias_set_type c_common_get_alias_set (tree);\n extern void c_register_builtin_type (tree, const char*);\n-extern bool c_promoting_integer_type_p (tree);\n-extern int self_promoting_args_p (tree);\n+extern bool c_promoting_integer_type_p (const_tree);\n+extern int self_promoting_args_p (const_tree);\n extern tree strip_array_types (tree);\n extern const_tree const_strip_array_types (const_tree);\n extern tree strip_pointer_operator (tree);\n@@ -772,7 +772,7 @@ enum c_tree_code {\n \n #undef DEFTREECODE\n \n-extern int anon_aggr_type_p (tree);\n+extern int anon_aggr_type_p (const_tree);\n \n /* For a VAR_DECL that is an anonymous union, these are the various\n    sub-variables that make up the anonymous union.  */\n@@ -830,7 +830,7 @@ extern tree finish_label_address_expr (tree);\n extern tree lookup_label (tree);\n extern tree lookup_name (tree);\n \n-extern bool vector_types_convertible_p (tree t1, tree t2, bool emit_lax_note);\n+extern bool vector_types_convertible_p (const_tree t1, const_tree t2, bool emit_lax_note);\n \n extern rtx c_expand_expr (tree, rtx, enum machine_mode, int, rtx *);\n extern void c_expand_body (tree);"}, {"sha": "98489b13a3777d1ef51b065268e3490debea2d31", "filename": "gcc/c-decl.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/58f9752a2aca436f706dbc64e6c92f10aae95936/gcc%2Fc-decl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/58f9752a2aca436f706dbc64e6c92f10aae95936/gcc%2Fc-decl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-decl.c?ref=58f9752a2aca436f706dbc64e6c92f10aae95936", "patch": "@@ -6973,7 +6973,7 @@ current_stmt_tree (void)\n    C.  */\n \n int\n-anon_aggr_type_p (tree ARG_UNUSED (node))\n+anon_aggr_type_p (const_tree ARG_UNUSED (node))\n {\n   return 0;\n }"}, {"sha": "f970b39f9f8ed93d25182c8a5ec719b83feeeeb1", "filename": "gcc/c-dump.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/58f9752a2aca436f706dbc64e6c92f10aae95936/gcc%2Fc-dump.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/58f9752a2aca436f706dbc64e6c92f10aae95936/gcc%2Fc-dump.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-dump.c?ref=58f9752a2aca436f706dbc64e6c92f10aae95936", "patch": "@@ -29,7 +29,7 @@ along with GCC; see the file COPYING3.  If not see\n /* Dump information common to statements from STMT.  */\n \n void\n-dump_stmt (dump_info_p di, tree t)\n+dump_stmt (dump_info_p di, const_tree t)\n {\n   if (EXPR_HAS_LOCATION (t))\n     dump_int (di, \"line\", EXPR_LINENO (t));"}, {"sha": "274f2701c960d44a26be163fd2b1356221071164", "filename": "gcc/c-objc-common.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/58f9752a2aca436f706dbc64e6c92f10aae95936/gcc%2Fc-objc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/58f9752a2aca436f706dbc64e6c92f10aae95936/gcc%2Fc-objc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-objc-common.c?ref=58f9752a2aca436f706dbc64e6c92f10aae95936", "patch": "@@ -166,7 +166,7 @@ c_tree_printer (pretty_printer *pp, text_info *text, const char *spec,\n \n /* In C and ObjC, all decls have \"C\" linkage.  */\n bool\n-has_c_linkage (tree decl ATTRIBUTE_UNUSED)\n+has_c_linkage (const_tree decl ATTRIBUTE_UNUSED)\n {\n   return true;\n }"}, {"sha": "57b19f69857622dcde07121eaf40203c06e10c96", "filename": "gcc/c-tree.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/58f9752a2aca436f706dbc64e6c92f10aae95936/gcc%2Fc-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/58f9752a2aca436f706dbc64e6c92f10aae95936/gcc%2Fc-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-tree.h?ref=58f9752a2aca436f706dbc64e6c92f10aae95936", "patch": "@@ -543,7 +543,7 @@ extern struct c_label_context_se *label_context_stack_se;\n extern struct c_label_context_vm *label_context_stack_vm;\n \n extern tree require_complete_type (tree);\n-extern int same_translation_unit_p (tree, tree);\n+extern int same_translation_unit_p (const_tree, const_tree);\n extern int comptypes (tree, tree);\n extern bool c_vla_type_p (const_tree);\n extern bool c_mark_addressable (tree);"}, {"sha": "4d4c4d1f4e56afdbe914e914ce8daf39ec66ba4c", "filename": "gcc/c-typeck.c", "status": "modified", "additions": 22, "deletions": 22, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/58f9752a2aca436f706dbc64e6c92f10aae95936/gcc%2Fc-typeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/58f9752a2aca436f706dbc64e6c92f10aae95936/gcc%2Fc-typeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-typeck.c?ref=58f9752a2aca436f706dbc64e6c92f10aae95936", "patch": "@@ -74,12 +74,12 @@ static int missing_braces_mentioned;\n static int require_constant_value;\n static int require_constant_elements;\n \n-static bool null_pointer_constant_p (tree);\n+static bool null_pointer_constant_p (const_tree);\n static tree qualify_type (tree, tree);\n-static int tagged_types_tu_compatible_p (tree, tree);\n+static int tagged_types_tu_compatible_p (const_tree, const_tree);\n static int comp_target_types (tree, tree);\n-static int function_types_compatible_p (tree, tree);\n-static int type_lists_compatible_p (tree, tree);\n+static int function_types_compatible_p (const_tree, const_tree);\n+static int type_lists_compatible_p (const_tree, const_tree);\n static tree decl_constant_value_for_broken_optimization (tree);\n static tree lookup_field (tree, tree);\n static int convert_arguments (int, tree *, tree, tree, tree, tree);\n@@ -102,15 +102,15 @@ static void set_nonincremental_init (void);\n static void set_nonincremental_init_from_string (tree);\n static tree find_init_member (tree);\n static void readonly_error (tree, enum lvalue_use);\n-static int lvalue_or_else (tree, enum lvalue_use);\n-static int lvalue_p (tree);\n+static int lvalue_or_else (const_tree, enum lvalue_use);\n+static int lvalue_p (const_tree);\n static void record_maybe_used_decl (tree);\n-static int comptypes_internal (tree, tree);\n+static int comptypes_internal (const_tree, const_tree);\n \f\n /* Return true if EXP is a null pointer constant, false otherwise.  */\n \n static bool\n-null_pointer_constant_p (tree expr)\n+null_pointer_constant_p (const_tree expr)\n {\n   /* This should really operate on c_expr structures, but they aren't\n      yet available everywhere required.  */\n@@ -127,8 +127,8 @@ null_pointer_constant_p (tree expr)\n \n struct tagged_tu_seen_cache {\n   const struct tagged_tu_seen_cache * next;\n-  tree t1;\n-  tree t2;\n+  const_tree t1;\n+  const_tree t2;\n   /* The return value of tagged_types_tu_compatible_p if we had seen\n      these two types already.  */\n   int val;\n@@ -869,10 +869,10 @@ comptypes (tree type1, tree type2)\n    differs from comptypes, in that we don't free the seen types.  */\n \n static int\n-comptypes_internal (tree type1, tree type2)\n+comptypes_internal (const_tree type1, const_tree type2)\n {\n-  tree t1 = type1;\n-  tree t2 = type2;\n+  const_tree t1 = type1;\n+  const_tree t2 = type2;\n   int attrval, val;\n \n   /* Suppress errors caused by previously reported errors.  */\n@@ -1045,7 +1045,7 @@ comp_target_types (tree ttl, tree ttr)\n    being parsed, so if two trees have context chains ending in null,\n    they're in the same translation unit.  */\n int\n-same_translation_unit_p (tree t1, tree t2)\n+same_translation_unit_p (const_tree t1, const_tree t2)\n {\n   while (t1 && TREE_CODE (t1) != TRANSLATION_UNIT_DECL)\n     switch (TREE_CODE_CLASS (TREE_CODE (t1)))\n@@ -1077,7 +1077,7 @@ same_translation_unit_p (tree t1, tree t2)\n /* Allocate the seen two types, assuming that they are compatible. */\n \n static struct tagged_tu_seen_cache *\n-alloc_tagged_tu_seen_cache (tree t1, tree t2)\n+alloc_tagged_tu_seen_cache (const_tree t1, const_tree t2)\n {\n   struct tagged_tu_seen_cache *tu = XNEW (struct tagged_tu_seen_cache);\n   tu->next = tagged_tu_seen_base;\n@@ -1125,7 +1125,7 @@ free_all_tagged_tu_seen_up_to (const struct tagged_tu_seen_cache *tu_til)\n    rules.  */\n \n static int\n-tagged_types_tu_compatible_p (tree t1, tree t2)\n+tagged_types_tu_compatible_p (const_tree t1, const_tree t2)\n {\n   tree s1, s2;\n   bool needs_warning = false;\n@@ -1339,7 +1339,7 @@ tagged_types_tu_compatible_p (tree t1, tree t2)\n    Otherwise, the argument types must match.  */\n \n static int\n-function_types_compatible_p (tree f1, tree f2)\n+function_types_compatible_p (const_tree f1, const_tree f2)\n {\n   tree args1, args2;\n   /* 1 if no need for warning yet, 2 if warning cause has been seen.  */\n@@ -1402,7 +1402,7 @@ function_types_compatible_p (tree f1, tree f2)\n    or 2 for compatible with warning.  */\n \n static int\n-type_lists_compatible_p (tree args1, tree args2)\n+type_lists_compatible_p (const_tree args1, const_tree args2)\n {\n   /* 1 if no need for warning yet, 2 if warning cause has been seen.  */\n   int val = 1;\n@@ -1503,7 +1503,7 @@ type_lists_compatible_p (tree args1, tree args2)\n /* Compute the size to increment a pointer by.  */\n \n static tree\n-c_size_in_bytes (tree type)\n+c_size_in_bytes (const_tree type)\n {\n   enum tree_code code = TREE_CODE (type);\n \n@@ -3198,9 +3198,9 @@ build_unary_op (enum tree_code code, tree xarg, int flag)\n    Lvalues can have their address taken, unless they have C_DECL_REGISTER.  */\n \n static int\n-lvalue_p (tree ref)\n+lvalue_p (const_tree ref)\n {\n-  enum tree_code code = TREE_CODE (ref);\n+  const enum tree_code code = TREE_CODE (ref);\n \n   switch (code)\n     {\n@@ -3274,7 +3274,7 @@ readonly_error (tree arg, enum lvalue_use use)\n    how the lvalue is being used and so selects the error message.  */\n \n static int\n-lvalue_or_else (tree ref, enum lvalue_use use)\n+lvalue_or_else (const_tree ref, enum lvalue_use use)\n {\n   int win = lvalue_p (ref);\n "}, {"sha": "d073d38e152d614cbfb786f8e60e28817ca6df22", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/58f9752a2aca436f706dbc64e6c92f10aae95936/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/58f9752a2aca436f706dbc64e6c92f10aae95936/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=58f9752a2aca436f706dbc64e6c92f10aae95936", "patch": "@@ -1,3 +1,45 @@\n+2007-08-25  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n+\n+\t* call.c (sufficient_parms_p): Constify.\n+\t* class.c (same_signature_p): Likewise.\n+\t* cp-gimplify.c (is_invisiref_parm,\n+\tcxx_omp_privatize_by_reference): Likewise.\n+\t* cp-objcp-common.c (has_c_linkage): Likewise.\n+\t* cp-tree.h (NON_THUNK_FUNCTION_CHECK, THUNK_FUNCTION_CHECK,\n+\tsufficient_parms_p, same_signature_p, copy_fn_p, move_fn_p,\n+\tgrok_ctor_properties, nothrow_libfn_p, skip_artificial_parms_for,\n+\tnum_artificial_parms_for, comp_template_parms,\n+\ttemplate_parameter_pack_p, any_dependent_template_arguments_p,\n+\tany_type_dependent_arguments_p, any_value_dependent_elements_p,\n+\trepo_export_class_p, cxx_omp_privatize_by_reference, pod_type_p,\n+\tzero_init_p, member_p, cp_lvalue_kind,\n+\tbuiltin_valid_in_constant_expr_p, decl_anon_ns_mem_p,\n+\tvarargs_function_p, is_dummy_object, special_function_kind,\n+\tstring_conv_p, type_unknown_p, comp_except_specs, compparms,\n+\tcomp_cv_qualification, is_bitfield_expr_with_lowered_type,\n+\tunlowered_expr_type, ptr_reasonably_similar, cp_type_readonly,\n+\tcp_has_mutable_p, at_least_as_qualified_p,\n+\tinvalid_nonstatic_memfn_p, lvalue_or_else, lvalue_p): Likewise.\n+\t* decl.c (copy_fn_p, move_fn_p, grok_ctor_properties): Likewise.\n+\t* except.c (nothrow_libfn_p): Likewise.\n+\t* method.c (skip_artificial_parms_for, num_artificial_parms_for):\n+\tLikewise.\n+\t* pt.c (comp_template_parms, template_parameter_pack_p,\n+\tany_type_dependent_arguments_p, any_value_dependent_elements_p,\n+\tany_dependent_template_arguments_p): Likewise.\n+\t* repo.c (repo_export_class_p): Likewise.\n+\t* semantics.c (anon_aggr_type_p): Likewise.\n+\t* tree.c (lvalue_p_1, real_lvalue_p, lvalue_p,\n+\tbuiltin_valid_in_constant_expr_p, decl_anon_ns_mem_p,\n+\tvarargs_function_p, member_p, is_dummy_object, pod_type_p,\n+\tzero_init_p, special_function_p): Likewise.\n+\t* typeck.c (comp_array_types, type_unknown_p, comp_except_specs,\n+\tcomp_array_types, at_least_as_qualified_p, comp_cv_qualification,\n+\tcompparms, invalid_nonstatic_memfn_p,\n+\tis_bitfield_expr_with_lowered_type, unlowered_expr_type,\n+\tstring_conv_p, ptr_reasonably_similar, cp_type_readonly,\n+\tcp_has_mutable_p, lvalue_or_else): Likewise.\n+\n 2007-08-25  Paolo Bonzini  <bonzini@gnu.org>\n \n \t* decl.c (cp_tree_node_structure): Kill TINST_LEVEL case."}, {"sha": "4dae84a082e570f36f4bcf9b20cef9a3cb0fc52d", "filename": "gcc/cp/call.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/58f9752a2aca436f706dbc64e6c92f10aae95936/gcc%2Fcp%2Fcall.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/58f9752a2aca436f706dbc64e6c92f10aae95936/gcc%2Fcp%2Fcall.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcall.c?ref=58f9752a2aca436f706dbc64e6c92f10aae95936", "patch": "@@ -467,7 +467,7 @@ null_ptr_cst_p (tree t)\n    ellipsis.  */\n \n bool\n-sufficient_parms_p (tree parmlist)\n+sufficient_parms_p (const_tree parmlist)\n {\n   for (; parmlist && parmlist != void_list_node;\n        parmlist = TREE_CHAIN (parmlist))"}, {"sha": "4e051e3b6886869f21b27049e6b3ab8c93b1be58", "filename": "gcc/cp/class.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/58f9752a2aca436f706dbc64e6c92f10aae95936/gcc%2Fcp%2Fclass.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/58f9752a2aca436f706dbc64e6c92f10aae95936/gcc%2Fcp%2Fclass.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fclass.c?ref=58f9752a2aca436f706dbc64e6c92f10aae95936", "patch": "@@ -1774,7 +1774,7 @@ layout_vtable_decl (tree binfo, int n)\n    have the same signature.  */\n \n int\n-same_signature_p (tree fndecl, tree base_fndecl)\n+same_signature_p (const_tree fndecl, const_tree base_fndecl)\n {\n   /* One destructor overrides another if they are the same kind of\n      destructor.  */"}, {"sha": "f9d800ea388bf88c4cacf54222fc5000060a51e6", "filename": "gcc/cp/cp-gimplify.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/58f9752a2aca436f706dbc64e6c92f10aae95936/gcc%2Fcp%2Fcp-gimplify.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/58f9752a2aca436f706dbc64e6c92f10aae95936/gcc%2Fcp%2Fcp-gimplify.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-gimplify.c?ref=58f9752a2aca436f706dbc64e6c92f10aae95936", "patch": "@@ -590,7 +590,7 @@ cp_gimplify_expr (tree *expr_p, tree *pre_p, tree *post_p)\n }\n \n static inline bool\n-is_invisiref_parm (tree t)\n+is_invisiref_parm (const_tree t)\n {\n   return ((TREE_CODE (t) == PARM_DECL || TREE_CODE (t) == RESULT_DECL)\n \t  && DECL_BY_REFERENCE (t));\n@@ -928,7 +928,7 @@ cxx_omp_clause_dtor (tree clause, tree decl)\n    than the DECL itself.  */\n \n bool\n-cxx_omp_privatize_by_reference (tree decl)\n+cxx_omp_privatize_by_reference (const_tree decl)\n {\n   return is_invisiref_parm (decl);\n }"}, {"sha": "42b0054055bc5e39de08163d4de1219fa8c89100", "filename": "gcc/cp/cp-objcp-common.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/58f9752a2aca436f706dbc64e6c92f10aae95936/gcc%2Fcp%2Fcp-objcp-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/58f9752a2aca436f706dbc64e6c92f10aae95936/gcc%2Fcp%2Fcp-objcp-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-objcp-common.c?ref=58f9752a2aca436f706dbc64e6c92f10aae95936", "patch": "@@ -228,7 +228,7 @@ pop_file_scope (void)\n \n /* c-pragma.c needs to query whether a decl has extern \"C\" linkage.  */\n bool\n-has_c_linkage (tree decl)\n+has_c_linkage (const_tree decl)\n {\n   return DECL_EXTERN_C_P (decl);\n }"}, {"sha": "d196ddca1e35ae7e892ee5ce5d69b86b1336a6e1", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 40, "deletions": 40, "changes": 80, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/58f9752a2aca436f706dbc64e6c92f10aae95936/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/58f9752a2aca436f706dbc64e6c92f10aae95936/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=58f9752a2aca436f706dbc64e6c92f10aae95936", "patch": "@@ -182,14 +182,14 @@ struct diagnostic_context;\n \n #if defined ENABLE_TREE_CHECKING && (GCC_VERSION >= 2007)\n #define NON_THUNK_FUNCTION_CHECK(NODE) __extension__\t\t\t\\\n-({  const tree __t = (NODE);\t\t\t\t\t\t\\\n+({  __typeof(NODE) const __t = (NODE);\t\t\t\t\t\\\n     if (TREE_CODE (__t) != FUNCTION_DECL &&\t\t\t\t\\\n \tTREE_CODE (__t) != TEMPLATE_DECL && __t->decl_common.lang_specific\t\\\n \t&& __t->decl_common.lang_specific->decl_flags.thunk_p)\t\t\t\\\n       tree_check_failed (__t, __FILE__, __LINE__, __FUNCTION__, 0);\t\\\n     __t; })\n #define THUNK_FUNCTION_CHECK(NODE) __extension__\t\t\t\\\n-({  const tree __t = (NODE);\t\t\t\t\t\t\\\n+({  __typeof (NODE) const __t = (NODE);\t\t\t\t\t\\\n     if (TREE_CODE (__t) != FUNCTION_DECL || !__t->decl_common.lang_specific\t\\\n \t|| !__t->decl_common.lang_specific->decl_flags.thunk_p)\t\t\\\n       tree_check_failed (__t, __FILE__, __LINE__, __FUNCTION__, 0);\t\\\n@@ -4067,7 +4067,7 @@ extern tree build_addr_func\t\t\t(tree);\n extern tree build_call_a\t\t\t(tree, int, tree*);\n extern tree build_call_n\t\t\t(tree, int, ...);\n extern bool null_ptr_cst_p\t\t\t(tree);\n-extern bool sufficient_parms_p\t\t\t(tree);\n+extern bool sufficient_parms_p\t\t\t(const_tree);\n extern tree type_decays_to\t\t\t(tree);\n extern tree build_user_type_conversion\t\t(tree, tree, int);\n extern tree build_new_function_call\t\t(tree, tree, bool);\n@@ -4135,7 +4135,7 @@ extern void cxx_print_identifier\t\t(FILE *, tree, int);\n extern void cxx_print_error_function\t(struct diagnostic_context *,\n \t\t\t\t\t\t const char *);\n extern void build_self_reference\t\t(void);\n-extern int same_signature_p\t\t\t(tree, tree);\n+extern int same_signature_p\t\t\t(const_tree, const_tree);\n extern void maybe_add_class_template_decl_list\t(tree, tree, int);\n extern void unreverse_member_declarations\t(tree);\n extern void invalidate_class_lookup_cache\t(void);\n@@ -4212,11 +4212,11 @@ extern tree build_ptrmemfunc_type\t\t(tree);\n extern tree build_ptrmem_type\t\t\t(tree, tree);\n /* the grokdeclarator prototype is in decl.h */\n extern tree build_this_parm\t\t\t(tree, cp_cv_quals);\n-extern int copy_fn_p\t\t\t\t(tree);\n-extern bool move_fn_p                           (tree);\n+extern int copy_fn_p\t\t\t\t(const_tree);\n+extern bool move_fn_p                           (const_tree);\n extern tree get_scope_of_declarator\t\t(const cp_declarator *);\n extern void grok_special_member_properties\t(tree);\n-extern int grok_ctor_properties\t\t\t(tree, tree);\n+extern int grok_ctor_properties\t\t\t(const_tree, const_tree);\n extern bool grok_op_properties\t\t\t(tree, bool);\n extern tree xref_tag\t\t\t\t(enum tag_types, tree, tag_scope, bool);\n extern tree xref_tag_from_type\t\t\t(tree, tree, tag_scope);\n@@ -4318,7 +4318,7 @@ extern tree expand_start_catch_block\t\t(tree);\n extern void expand_end_catch_block\t\t(void);\n extern tree build_exc_ptr\t\t\t(void);\n extern tree build_throw\t\t\t\t(tree);\n-extern int nothrow_libfn_p\t\t\t(tree);\n+extern int nothrow_libfn_p\t\t\t(const_tree);\n extern void check_handlers\t\t\t(tree);\n extern void choose_personality_routine\t\t(enum languages);\n extern tree eh_type_info\t\t\t(tree);\n@@ -4382,8 +4382,8 @@ extern void use_thunk\t\t\t\t(tree, bool);\n extern void synthesize_method\t\t\t(tree);\n extern tree lazily_declare_fn\t\t\t(special_function_kind,\n \t\t\t\t\t\t tree);\n-extern tree skip_artificial_parms_for\t\t(tree, tree);\n-extern int num_artificial_parms_for\t\t(tree);\n+extern tree skip_artificial_parms_for\t\t(const_tree, tree);\n+extern int num_artificial_parms_for\t\t(const_tree);\n extern tree make_alias_for\t\t\t(tree, tree);\n extern tree locate_copy\t\t\t\t(tree, void *);\n extern tree locate_ctor\t\t\t\t(tree, void *);\n@@ -4426,9 +4426,9 @@ extern int more_specialized_fn\t\t\t(tree, tree, int);\n extern void do_decl_instantiation\t\t(tree, tree);\n extern void do_type_instantiation\t\t(tree, tree, tsubst_flags_t);\n extern tree instantiate_decl\t\t\t(tree, int, bool);\n-extern int comp_template_parms\t\t\t(tree, tree);\n+extern int comp_template_parms\t\t\t(const_tree, const_tree);\n extern bool uses_parameter_packs                (tree);\n-extern bool template_parameter_pack_p           (tree);\n+extern bool template_parameter_pack_p           (const_tree);\n extern tree make_pack_expansion                 (tree);\n extern bool check_for_bare_parameter_packs      (tree);\n extern int template_class_depth\t\t\t(tree);\n@@ -4450,13 +4450,13 @@ extern struct tinst_level *current_instantiation(void);\n extern tree maybe_get_template_decl_from_type_decl (tree);\n extern int processing_template_parmlist;\n extern bool dependent_type_p\t\t\t(tree);\n-extern bool any_dependent_template_arguments_p  (tree);\n+extern bool any_dependent_template_arguments_p  (const_tree);\n extern bool dependent_template_p\t\t(tree);\n extern bool dependent_template_id_p\t\t(tree, tree);\n extern bool type_dependent_expression_p\t\t(tree);\n-extern bool any_type_dependent_arguments_p      (tree);\n+extern bool any_type_dependent_arguments_p      (const_tree);\n extern bool value_dependent_expression_p\t(tree);\n-extern bool any_value_dependent_elements_p      (tree);\n+extern bool any_value_dependent_elements_p      (const_tree);\n extern tree resolve_typename_type\t\t(tree, bool);\n extern tree template_for_substitution\t\t(tree);\n extern tree build_non_dependent_expr\t\t(tree);\n@@ -4469,7 +4469,7 @@ extern struct tinst_level *outermost_tinst_level(void);\n /* in repo.c */\n extern void init_repo\t\t\t\t(void);\n extern int repo_emit_p\t\t\t\t(tree);\n-extern bool repo_export_class_p\t\t\t(tree);\n+extern bool repo_export_class_p\t\t\t(const_tree);\n extern void finish_repo\t\t\t\t(void);\n \n /* in rtti.c */\n@@ -4662,7 +4662,7 @@ extern tree cxx_omp_clause_default_ctor\t\t(tree, tree);\n extern tree cxx_omp_clause_copy_ctor\t\t(tree, tree, tree);\n extern tree cxx_omp_clause_assign_op\t\t(tree, tree, tree);\n extern tree cxx_omp_clause_dtor\t\t\t(tree, tree);\n-extern bool cxx_omp_privatize_by_reference\t(tree);\n+extern bool cxx_omp_privatize_by_reference\t(const_tree);\n extern tree baselink_for_fns                    (tree);\n extern void finish_static_assert                (tree, tree, location_t,\n                                                  bool);\n@@ -4679,15 +4679,15 @@ extern bool stabilize_init\t\t\t(tree, tree *);\n extern tree add_stmt_to_compound\t\t(tree, tree);\n extern tree cxx_maybe_build_cleanup\t\t(tree);\n extern void init_tree\t\t\t\t(void);\n-extern int pod_type_p\t\t\t\t(tree);\n+extern int pod_type_p\t\t\t\t(const_tree);\n extern bool class_tmpl_impl_spec_p\t\t(const_tree);\n-extern int zero_init_p\t\t\t\t(tree);\n+extern int zero_init_p\t\t\t\t(const_tree);\n extern tree canonical_type_variant\t\t(tree);\n extern tree copy_binfo\t\t\t\t(tree, tree, tree,\n \t\t\t\t\t\t tree *, int);\n-extern int member_p\t\t\t\t(tree);\n-extern cp_lvalue_kind real_lvalue_p\t\t(tree);\n-extern bool builtin_valid_in_constant_expr_p    (tree);\n+extern int member_p\t\t\t\t(const_tree);\n+extern cp_lvalue_kind real_lvalue_p\t\t(const_tree);\n+extern bool builtin_valid_in_constant_expr_p    (const_tree);\n extern tree build_min\t\t\t\t(enum tree_code, tree, ...);\n extern tree build_min_nt\t\t\t(enum tree_code, ...);\n extern tree build_min_non_dep\t\t\t(enum tree_code, tree, ...);\n@@ -4710,25 +4710,25 @@ extern tree array_type_nelts_top\t\t(tree);\n extern tree break_out_target_exprs\t\t(tree);\n extern tree get_type_decl\t\t\t(tree);\n extern tree decl_namespace_context\t\t(tree);\n-extern bool decl_anon_ns_mem_p\t\t\t(tree);\n+extern bool decl_anon_ns_mem_p\t\t\t(const_tree);\n extern tree lvalue_type\t\t\t\t(tree);\n extern tree error_type\t\t\t\t(tree);\n-extern int varargs_function_p\t\t\t(tree);\n+extern int varargs_function_p\t\t\t(const_tree);\n extern bool really_overloaded_fn\t\t(tree);\n extern bool cp_tree_equal\t\t\t(tree, tree);\n extern tree no_linkage_check\t\t\t(tree, bool);\n extern void debug_binfo\t\t\t\t(tree);\n extern tree build_dummy_object\t\t\t(tree);\n extern tree maybe_dummy_object\t\t\t(tree, tree *);\n-extern int is_dummy_object\t\t\t(tree);\n+extern int is_dummy_object\t\t\t(const_tree);\n extern const struct attribute_spec cxx_attribute_table[];\n extern tree make_ptrmem_cst\t\t\t(tree, tree);\n extern tree cp_build_type_attribute_variant     (tree, tree);\n extern tree cp_build_reference_type\t\t(tree, bool);\n extern tree cp_build_qualified_type_real\t(tree, int, tsubst_flags_t);\n #define cp_build_qualified_type(TYPE, QUALS) \\\n   cp_build_qualified_type_real ((TYPE), (QUALS), tf_warning_or_error)\n-extern special_function_kind special_function_p (tree);\n+extern special_function_kind special_function_p (const_tree);\n extern int count_trees\t\t\t\t(tree);\n extern int char_type_p\t\t\t\t(tree);\n extern void verify_stmt_tree\t\t\t(tree);\n@@ -4746,24 +4746,24 @@ extern tree cp_save_expr\t\t\t(tree);\n extern bool cast_valid_in_integral_constant_expression_p (tree);\n \n /* in typeck.c */\n-extern int string_conv_p\t\t\t(tree, tree, int);\n+extern int string_conv_p\t\t\t(const_tree, const_tree, int);\n extern tree cp_truthvalue_conversion\t\t(tree);\n extern tree condition_conversion\t\t(tree);\n extern tree require_complete_type\t\t(tree);\n extern tree complete_type\t\t\t(tree);\n extern tree complete_type_or_else\t\t(tree, tree);\n-extern int type_unknown_p\t\t\t(tree);\n-extern bool comp_except_specs\t\t\t(tree, tree, bool);\n+extern int type_unknown_p\t\t\t(const_tree);\n+extern bool comp_except_specs\t\t\t(const_tree, const_tree, bool);\n extern bool comptypes\t\t\t\t(tree, tree, int);\n-extern bool compparms\t\t\t\t(tree, tree);\n-extern int comp_cv_qualification\t\t(tree, tree);\n+extern bool compparms\t\t\t\t(const_tree, const_tree);\n+extern int comp_cv_qualification\t\t(const_tree, const_tree);\n extern int comp_cv_qual_signature\t\t(tree, tree);\n extern tree cxx_sizeof_or_alignof_expr\t\t(tree, enum tree_code);\n extern tree cxx_sizeof_or_alignof_type\t\t(tree, enum tree_code, bool);\n #define cxx_sizeof_nowarn(T) cxx_sizeof_or_alignof_type (T, SIZEOF_EXPR, false)\n extern tree inline_conversion\t\t\t(tree);\n-extern tree is_bitfield_expr_with_lowered_type  (tree);\n-extern tree unlowered_expr_type                 (tree);\n+extern tree is_bitfield_expr_with_lowered_type  (const_tree);\n+extern tree unlowered_expr_type                 (const_tree);\n extern tree decay_conversion\t\t\t(tree);\n extern tree build_class_member_access_expr      (tree, tree, tree, bool);\n extern tree finish_class_member_access_expr     (tree, tree, bool);\n@@ -4790,12 +4790,12 @@ extern tree convert_for_initialization\t\t(tree, tree, tree, int,\n \t\t\t\t\t\t const char *, tree, int);\n extern int comp_ptr_ttypes\t\t\t(tree, tree);\n extern bool comp_ptr_ttypes_const\t\t(tree, tree);\n-extern int ptr_reasonably_similar\t\t(tree, tree);\n+extern int ptr_reasonably_similar\t\t(const_tree, const_tree);\n extern tree build_ptrmemfunc\t\t\t(tree, tree, int, bool);\n extern int cp_type_quals\t\t\t(const_tree);\n-extern bool cp_type_readonly\t\t\t(tree);\n-extern bool cp_has_mutable_p\t\t\t(tree);\n-extern bool at_least_as_qualified_p\t\t(tree, tree);\n+extern bool cp_type_readonly\t\t\t(const_tree);\n+extern bool cp_has_mutable_p\t\t\t(const_tree);\n+extern bool at_least_as_qualified_p\t\t(const_tree, const_tree);\n extern void cp_apply_type_quals_to_decl\t\t(int, tree);\n extern tree build_ptrmemfunc1\t\t\t(tree, tree, tree);\n extern void expand_ptrmemfunc_cst\t\t(tree, tree *, tree *);\n@@ -4812,11 +4812,11 @@ extern tree build_address\t\t\t(tree);\n extern tree build_nop\t\t\t\t(tree, tree);\n extern tree non_reference\t\t\t(tree);\n extern tree lookup_anon_field\t\t\t(tree, tree);\n-extern bool invalid_nonstatic_memfn_p\t\t(tree);\n+extern bool invalid_nonstatic_memfn_p\t\t(const_tree);\n extern tree convert_member_func_to_ptr\t\t(tree, tree);\n extern tree convert_ptrmem\t\t\t(tree, tree, bool, bool);\n-extern int lvalue_or_else\t\t\t(tree, enum lvalue_use);\n-extern int lvalue_p\t\t\t\t(tree);\n+extern int lvalue_or_else\t\t\t(const_tree, enum lvalue_use);\n+extern int lvalue_p\t\t\t\t(const_tree);\n \n /* in typeck2.c */\n extern void require_complete_eh_spec_types\t(tree, tree);"}, {"sha": "f054b662c269608dee0f8827da1829fec574f011", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/58f9752a2aca436f706dbc64e6c92f10aae95936/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/58f9752a2aca436f706dbc64e6c92f10aae95936/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=58f9752a2aca436f706dbc64e6c92f10aae95936", "patch": "@@ -9204,7 +9204,7 @@ grokparms (cp_parameter_declarator *first_parm, tree *parms)\n    operator.  */\n \n int\n-copy_fn_p (tree d)\n+copy_fn_p (const_tree d)\n {\n   tree args;\n   tree arg_type;\n@@ -9260,7 +9260,7 @@ copy_fn_p (tree d)\n    operator, false otherwise.  */\n \n bool\n-move_fn_p (tree d)\n+move_fn_p (const_tree d)\n {\n   tree args;\n   tree arg_type;\n@@ -9359,7 +9359,7 @@ void grok_special_member_properties (tree decl)\n    if the class has a constructor of the form X(X).  */\n \n int\n-grok_ctor_properties (tree ctype, tree decl)\n+grok_ctor_properties (const_tree ctype, const_tree decl)\n {\n   int ctor_parm = copy_fn_p (decl);\n "}, {"sha": "b6e8eeac710169f566c2df96ef73ab8bd26fc57a", "filename": "gcc/cp/except.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/58f9752a2aca436f706dbc64e6c92f10aae95936/gcc%2Fcp%2Fexcept.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/58f9752a2aca436f706dbc64e6c92f10aae95936/gcc%2Fcp%2Fexcept.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fexcept.c?ref=58f9752a2aca436f706dbc64e6c92f10aae95936", "patch": "@@ -905,7 +905,7 @@ is_admissible_throw_operand (tree expr)\n #include \"cfns.h\"\n \n int\n-nothrow_libfn_p (tree fn)\n+nothrow_libfn_p (const_tree fn)\n {\n   tree id;\n "}, {"sha": "efb223780daaeaf43a8def77a55797b626c0fff9", "filename": "gcc/cp/method.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/58f9752a2aca436f706dbc64e6c92f10aae95936/gcc%2Fcp%2Fmethod.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/58f9752a2aca436f706dbc64e6c92f10aae95936/gcc%2Fcp%2Fmethod.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fmethod.c?ref=58f9752a2aca436f706dbc64e6c92f10aae95936", "patch": "@@ -1185,7 +1185,7 @@ lazily_declare_fn (special_function_kind sfk, tree type)\n    as there are artificial parms in FN.  */\n \n tree\n-skip_artificial_parms_for (tree fn, tree list)\n+skip_artificial_parms_for (const_tree fn, tree list)\n {\n   if (DECL_NONSTATIC_MEMBER_FUNCTION_P (fn))\n     list = TREE_CHAIN (list);\n@@ -1203,7 +1203,7 @@ skip_artificial_parms_for (tree fn, tree list)\n    artificial parms in FN.  */\n \n int\n-num_artificial_parms_for (tree fn)\n+num_artificial_parms_for (const_tree fn)\n {\n   int count = 0;\n "}, {"sha": "1bbe6cb80c6f6db917edb7cb1f25806208e4dd16", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/58f9752a2aca436f706dbc64e6c92f10aae95936/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/58f9752a2aca436f706dbc64e6c92f10aae95936/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=58f9752a2aca436f706dbc64e6c92f10aae95936", "patch": "@@ -2264,10 +2264,10 @@ check_explicit_specialization (tree declarator,\n    DECL_TEMPLATE_PARMS.  */\n \n int\n-comp_template_parms (tree parms1, tree parms2)\n+comp_template_parms (const_tree parms1, const_tree parms2)\n {\n-  tree p1;\n-  tree p2;\n+  const_tree p1;\n+  const_tree p2;\n \n   if (parms1 == parms2)\n     return 1;\n@@ -2318,7 +2318,7 @@ comp_template_parms (tree parms1, tree parms2)\n \n /* Determine whether PARM is a parameter pack.  */\n bool \n-template_parameter_pack_p (tree parm)\n+template_parameter_pack_p (const_tree parm)\n {\n   /* Determine if we have a non-type template parameter pack.  */\n   if (TREE_CODE (parm) == PARM_DECL)\n@@ -15320,7 +15320,7 @@ type_dependent_expression_p (tree expression)\n    contains a type-dependent expression.  */\n \n bool\n-any_type_dependent_arguments_p (tree args)\n+any_type_dependent_arguments_p (const_tree args)\n {\n   while (args)\n     {\n@@ -15337,7 +15337,7 @@ any_type_dependent_arguments_p (tree args)\n    expressions) contains any value-dependent expressions.  */\n \n bool\n-any_value_dependent_elements_p (tree list)\n+any_value_dependent_elements_p (const_tree list)\n {\n   for (; list; list = TREE_CHAIN (list))\n     if (value_dependent_expression_p (TREE_VALUE (list)))\n@@ -15432,7 +15432,7 @@ any_template_arguments_need_structural_equality_p (tree args)\n    any dependent arguments.  */\n \n bool\n-any_dependent_template_arguments_p (tree args)\n+any_dependent_template_arguments_p (const_tree args)\n {\n   int i;\n   int j;\n@@ -15444,7 +15444,7 @@ any_dependent_template_arguments_p (tree args)\n \n   for (i = 0; i < TMPL_ARGS_DEPTH (args); ++i)\n     {\n-      tree level = TMPL_ARGS_LEVEL (args, i + 1);\n+      const_tree level = TMPL_ARGS_LEVEL (args, i + 1);\n       for (j = 0; j < TREE_VEC_LENGTH (level); ++j)\n \tif (dependent_template_arg_p (TREE_VEC_ELT (level, j)))\n \t  return true;"}, {"sha": "624d6d7bd35f97dcfbb822413b4d0cd26cac1a24", "filename": "gcc/cp/repo.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/58f9752a2aca436f706dbc64e6c92f10aae95936/gcc%2Fcp%2Frepo.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/58f9752a2aca436f706dbc64e6c92f10aae95936/gcc%2Fcp%2Frepo.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Frepo.c?ref=58f9752a2aca436f706dbc64e6c92f10aae95936", "patch": "@@ -347,7 +347,7 @@ repo_emit_p (tree decl)\n    export from this translation unit.  */\n \n bool\n-repo_export_class_p (tree class_type)\n+repo_export_class_p (const_tree class_type)\n {\n   if (!flag_use_repository)\n     return false;"}, {"sha": "583ce33a23bad364dd45330479a1535dce78dac1", "filename": "gcc/cp/semantics.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/58f9752a2aca436f706dbc64e6c92f10aae95936/gcc%2Fcp%2Fsemantics.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/58f9752a2aca436f706dbc64e6c92f10aae95936/gcc%2Fcp%2Fsemantics.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fsemantics.c?ref=58f9752a2aca436f706dbc64e6c92f10aae95936", "patch": "@@ -436,7 +436,7 @@ add_decl_expr (tree decl)\n    declared is not an anonymous union\" [class.union].  */\n \n int\n-anon_aggr_type_p (tree node)\n+anon_aggr_type_p (const_tree node)\n {\n   return ANON_AGGR_TYPE_P (node);\n }"}, {"sha": "4ee3f886d25230235042b9b468561657048b86ea", "filename": "gcc/cp/tree.c", "status": "modified", "additions": 16, "deletions": 16, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/58f9752a2aca436f706dbc64e6c92f10aae95936/gcc%2Fcp%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/58f9752a2aca436f706dbc64e6c92f10aae95936/gcc%2Fcp%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftree.c?ref=58f9752a2aca436f706dbc64e6c92f10aae95936", "patch": "@@ -43,7 +43,7 @@ static tree build_cplus_array_type_1 (tree, tree);\n static int list_hash_eq (const void *, const void *);\n static hashval_t list_hash_pieces (tree, tree, tree);\n static hashval_t list_hash (const void *);\n-static cp_lvalue_kind lvalue_p_1 (tree, int);\n+static cp_lvalue_kind lvalue_p_1 (const_tree, int);\n static tree build_target_expr (tree, tree);\n static tree count_trees_r (tree *, int *, void *);\n static tree verify_stmt_tree_r (tree *, int *, void *);\n@@ -58,7 +58,7 @@ static tree handle_init_priority_attribute (tree *, tree, tree, int, bool *);\n    nonzero, rvalues of class type are considered lvalues.  */\n \n static cp_lvalue_kind\n-lvalue_p_1 (tree ref,\n+lvalue_p_1 (const_tree ref,\n \t    int treat_class_rvalues_as_lvalues)\n {\n   cp_lvalue_kind op1_lvalue_kind = clk_none;\n@@ -223,7 +223,7 @@ lvalue_p_1 (tree ref,\n    computes the C++ definition of lvalue.  */\n \n cp_lvalue_kind\n-real_lvalue_p (tree ref)\n+real_lvalue_p (const_tree ref)\n {\n   return lvalue_p_1 (ref,\n \t\t     /*treat_class_rvalues_as_lvalues=*/0);\n@@ -233,7 +233,7 @@ real_lvalue_p (tree ref)\n    considered lvalues.  */\n \n int\n-lvalue_p (tree ref)\n+lvalue_p (const_tree ref)\n {\n   return\n     (lvalue_p_1 (ref, /*class rvalue ok*/ 1) != clk_none);\n@@ -243,7 +243,7 @@ lvalue_p (tree ref)\n    constant-expression. */\n \n bool\n-builtin_valid_in_constant_expr_p (tree decl)\n+builtin_valid_in_constant_expr_p (const_tree decl)\n {\n   /* At present BUILT_IN_CONSTANT_P is the only builtin we're allowing\n      in constant-expressions.  We may want to add other builtins later. */\n@@ -1673,7 +1673,7 @@ decl_namespace_context (tree decl)\n    nested, or false otherwise.  */\n \n bool\n-decl_anon_ns_mem_p (tree decl)\n+decl_anon_ns_mem_p (const_tree decl)\n {\n   while (1)\n     {\n@@ -1971,9 +1971,9 @@ error_type (tree arg)\n /* Does FUNCTION use a variable-length argument list?  */\n \n int\n-varargs_function_p (tree function)\n+varargs_function_p (const_tree function)\n {\n-  tree parm = TYPE_ARG_TYPES (TREE_TYPE (function));\n+  const_tree parm = TYPE_ARG_TYPES (TREE_TYPE (function));\n   for (; parm; parm = TREE_CHAIN (parm))\n     if (TREE_VALUE (parm) == void_type_node)\n       return 0;\n@@ -1983,9 +1983,9 @@ varargs_function_p (tree function)\n /* Returns 1 if decl is a member of a class.  */\n \n int\n-member_p (tree decl)\n+member_p (const_tree decl)\n {\n-  const tree ctx = DECL_CONTEXT (decl);\n+  const_tree const ctx = DECL_CONTEXT (decl);\n   return (ctx && TYPE_P (ctx));\n }\n \n@@ -2039,7 +2039,7 @@ maybe_dummy_object (tree type, tree* binfop)\n /* Returns 1 if OB is a placeholder object, or a pointer to one.  */\n \n int\n-is_dummy_object (tree ob)\n+is_dummy_object (const_tree ob)\n {\n   if (TREE_CODE (ob) == INDIRECT_REF)\n     ob = TREE_OPERAND (ob, 0);\n@@ -2050,9 +2050,9 @@ is_dummy_object (tree ob)\n /* Returns 1 iff type T is a POD type, as defined in [basic.types].  */\n \n int\n-pod_type_p (tree t)\n+pod_type_p (const_tree t)\n {\n-  t = strip_array_types (t);\n+  t = const_strip_array_types (t);\n \n   if (t == error_mark_node)\n     return 1;\n@@ -2087,9 +2087,9 @@ class_tmpl_impl_spec_p (const_tree t)\n    zeros in it.  */\n \n int\n-zero_init_p (tree t)\n+zero_init_p (const_tree t)\n {\n-  t = strip_array_types (t);\n+  t = const_strip_array_types (t);\n \n   if (t == error_mark_node)\n     return 1;\n@@ -2420,7 +2420,7 @@ init_tree (void)\n    predicate to test whether or not DECL is a special function.  */\n \n special_function_kind\n-special_function_p (tree decl)\n+special_function_p (const_tree decl)\n {\n   /* Rather than doing all this stuff with magic names, we should\n      probably have a field of type `special_function_kind' in"}, {"sha": "e996df97f1bfcfc13d63972113920eed65d022e2", "filename": "gcc/cp/typeck.c", "status": "modified", "additions": 20, "deletions": 20, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/58f9752a2aca436f706dbc64e6c92f10aae95936/gcc%2Fcp%2Ftypeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/58f9752a2aca436f706dbc64e6c92f10aae95936/gcc%2Fcp%2Ftypeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftypeck.c?ref=58f9752a2aca436f706dbc64e6c92f10aae95936", "patch": "@@ -51,7 +51,7 @@ static tree cp_pointer_int_sum (enum tree_code, tree, tree);\n static tree rationalize_conditional_expr (enum tree_code, tree);\n static int comp_ptr_ttypes_real (tree, tree, int);\n static bool comp_except_types (tree, tree, bool);\n-static bool comp_array_types (tree, tree, bool);\n+static bool comp_array_types (const_tree, const_tree, bool);\n static tree pointer_diff (tree, tree, tree);\n static tree get_delta_difference (tree, tree, bool, bool);\n static void casts_away_constness_r (tree *, tree *);\n@@ -151,7 +151,7 @@ complete_type_or_else (tree type, tree value)\n /* Return truthvalue of whether type of EXP is instantiated.  */\n \n int\n-type_unknown_p (tree exp)\n+type_unknown_p (const_tree exp)\n {\n   return (TREE_CODE (exp) == TREE_LIST\n \t  || TREE_TYPE (exp) == unknown_type_node);\n@@ -820,10 +820,10 @@ comp_except_types (tree a, tree b, bool exact)\n    we should try to make use of that.  */\n \n bool\n-comp_except_specs (tree t1, tree t2, bool exact)\n+comp_except_specs (const_tree t1, const_tree t2, bool exact)\n {\n-  tree probe;\n-  tree base;\n+  const_tree probe;\n+  const_tree base;\n   int  length = 0;\n \n   if (t1 == t2)\n@@ -867,7 +867,7 @@ comp_except_specs (tree t1, tree t2, bool exact)\n    [] can match [size].  */\n \n static bool\n-comp_array_types (tree t1, tree t2, bool allow_redeclaration)\n+comp_array_types (const_tree t1, const_tree t2, bool allow_redeclaration)\n {\n   tree d1;\n   tree d2;\n@@ -1154,7 +1154,7 @@ comptypes (tree t1, tree t2, int strict)\n /* Returns 1 if TYPE1 is at least as qualified as TYPE2.  */\n \n bool\n-at_least_as_qualified_p (tree type1, tree type2)\n+at_least_as_qualified_p (const_tree type1, const_tree type2)\n {\n   int q1 = cp_type_quals (type1);\n   int q2 = cp_type_quals (type2);\n@@ -1167,7 +1167,7 @@ at_least_as_qualified_p (tree type1, tree type2)\n    more cv-qualified that TYPE1, and 0 otherwise.  */\n \n int\n-comp_cv_qualification (tree type1, tree type2)\n+comp_cv_qualification (const_tree type1, const_tree type2)\n {\n   int q1 = cp_type_quals (type1);\n   int q2 = cp_type_quals (type2);\n@@ -1206,9 +1206,9 @@ comp_cv_qual_signature (tree type1, tree type2)\n    element by element.  */\n \n bool\n-compparms (tree parms1, tree parms2)\n+compparms (const_tree parms1, const_tree parms2)\n {\n-  tree t1, t2;\n+  const_tree t1, t2;\n \n   /* An unspecified parmlist matches any specified parmlist\n      whose argument types don't need default promotions.  */\n@@ -1398,7 +1398,7 @@ cxx_sizeof_or_alignof_expr (tree e, enum tree_code op)\n    violates these rules.  */\n \n bool\n-invalid_nonstatic_memfn_p (tree expr)\n+invalid_nonstatic_memfn_p (const_tree expr)\n {\n   if (TREE_CODE (TREE_TYPE (expr)) == METHOD_TYPE)\n     {\n@@ -1413,7 +1413,7 @@ invalid_nonstatic_memfn_p (tree expr)\n    of the bitfield.  Otherwise, return NULL_TREE.  */\n \n tree\n-is_bitfield_expr_with_lowered_type (tree exp)\n+is_bitfield_expr_with_lowered_type (const_tree exp)\n {\n   switch (TREE_CODE (exp))\n     {\n@@ -1452,7 +1452,7 @@ is_bitfield_expr_with_lowered_type (tree exp)\n    than NULL_TREE.  */\n \n tree\n-unlowered_expr_type (tree exp)\n+unlowered_expr_type (const_tree exp)\n {\n   tree type;\n \n@@ -1633,7 +1633,7 @@ inline_conversion (tree exp)\n    decay_conversion to one.  */\n \n int\n-string_conv_p (tree totype, tree exp, int warn)\n+string_conv_p (const_tree totype, const_tree exp, int warn)\n {\n   tree t;\n \n@@ -6853,7 +6853,7 @@ comp_ptr_ttypes (tree to, tree from)\n    type or inheritance-related types, regardless of cv-quals.  */\n \n int\n-ptr_reasonably_similar (tree to, tree from)\n+ptr_reasonably_similar (const_tree to, const_tree from)\n {\n   for (; ; to = TREE_TYPE (to), from = TREE_TYPE (from))\n     {\n@@ -6927,18 +6927,18 @@ cp_type_quals (const_tree type)\n    arrays.  */\n \n bool\n-cp_type_readonly (tree type)\n+cp_type_readonly (const_tree type)\n {\n-  type = strip_array_types (type);\n+  type = const_strip_array_types (type);\n   return TYPE_READONLY (type);\n }\n \n /* Returns nonzero if the TYPE contains a mutable member.  */\n \n bool\n-cp_has_mutable_p (tree type)\n+cp_has_mutable_p (const_tree type)\n {\n-  type = strip_array_types (type);\n+  type = const_strip_array_types (type);\n \n   return CLASS_TYPE_P (type) && CLASSTYPE_HAS_MUTABLE (type);\n }\n@@ -7110,7 +7110,7 @@ non_reference (tree t)\n    how the lvalue is being used and so selects the error message.  */\n \n int\n-lvalue_or_else (tree ref, enum lvalue_use use)\n+lvalue_or_else (const_tree ref, enum lvalue_use use)\n {\n   int win = lvalue_p (ref);\n "}, {"sha": "590258a4740d679223cf5cc516c7e084658603bc", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/58f9752a2aca436f706dbc64e6c92f10aae95936/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/58f9752a2aca436f706dbc64e6c92f10aae95936/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=58f9752a2aca436f706dbc64e6c92f10aae95936", "patch": "@@ -1,3 +1,8 @@\n+2007-08-25  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n+\n+\t* trans-openmp.c (gfc_omp_privatize_by_reference): Constify.\n+\t* trans.h (gfc_omp_privatize_by_reference): Likewise.\n+\n 2007-08-24  Tobias Burnus  <burnus@net-b.de>\n \n \tPR fortran/33178"}, {"sha": "047c2b82ca522e3b5b963ecec3204fc02fdc8ecc", "filename": "gcc/fortran/trans-openmp.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/58f9752a2aca436f706dbc64e6c92f10aae95936/gcc%2Ffortran%2Ftrans-openmp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/58f9752a2aca436f706dbc64e6c92f10aae95936/gcc%2Ffortran%2Ftrans-openmp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-openmp.c?ref=58f9752a2aca436f706dbc64e6c92f10aae95936", "patch": "@@ -40,7 +40,7 @@ along with GCC; see the file COPYING3.  If not see\n    than the DECL itself.  */\n \n bool\n-gfc_omp_privatize_by_reference (tree decl)\n+gfc_omp_privatize_by_reference (const_tree decl)\n {\n   tree type = TREE_TYPE (decl);\n "}, {"sha": "48bc9fce8cb161924facf78883c9fc26a82b72a1", "filename": "gcc/fortran/trans.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/58f9752a2aca436f706dbc64e6c92f10aae95936/gcc%2Ffortran%2Ftrans.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/58f9752a2aca436f706dbc64e6c92f10aae95936/gcc%2Ffortran%2Ftrans.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans.h?ref=58f9752a2aca436f706dbc64e6c92f10aae95936", "patch": "@@ -474,7 +474,7 @@ tree gfc_truthvalue_conversion (tree);\n tree gfc_builtin_function (tree);\n \n /* In trans-openmp.c */\n-bool gfc_omp_privatize_by_reference (tree);\n+bool gfc_omp_privatize_by_reference (const_tree);\n enum omp_clause_default_kind gfc_omp_predetermined_sharing (tree);\n tree gfc_omp_clause_default_ctor (tree, tree);\n bool gfc_omp_disregard_value_expr (tree, bool);"}, {"sha": "ac7c8429fb024ea025db75345ae669e416446707", "filename": "gcc/ggc-common.c", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/58f9752a2aca436f706dbc64e6c92f10aae95936/gcc%2Fggc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/58f9752a2aca436f706dbc64e6c92f10aae95936/gcc%2Fggc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fggc-common.c?ref=58f9752a2aca436f706dbc64e6c92f10aae95936", "patch": "@@ -357,8 +357,8 @@ call_alloc (void **slot, void *state_p)\n static int\n compare_ptr_data (const void *p1_p, const void *p2_p)\n {\n-  struct ptr_data *p1 = *(struct ptr_data *const *)p1_p;\n-  struct ptr_data *p2 = *(struct ptr_data *const *)p2_p;\n+  const struct ptr_data *const p1 = *(const struct ptr_data *const *)p1_p;\n+  const struct ptr_data *const p2 = *(const struct ptr_data *const *)p2_p;\n   return (((size_t)p1->new_addr > (size_t)p2->new_addr)\n \t  - ((size_t)p1->new_addr < (size_t)p2->new_addr));\n }\n@@ -794,16 +794,16 @@ static htab_t loc_hash;\n static hashval_t\n hash_descriptor (const void *p)\n {\n-  const struct loc_descriptor *d = p;\n+  const struct loc_descriptor *const d = p;\n \n   return htab_hash_pointer (d->function) | d->line;\n }\n \n static int\n eq_descriptor (const void *p1, const void *p2)\n {\n-  const struct loc_descriptor *d = p1;\n-  const struct loc_descriptor *d2 = p2;\n+  const struct loc_descriptor *const d = p1;\n+  const struct loc_descriptor *const d2 = p2;\n \n   return (d->file == d2->file && d->line == d2->line\n \t  && d->function == d2->function);\n@@ -822,15 +822,15 @@ struct ptr_hash_entry\n static hashval_t\n hash_ptr (const void *p)\n {\n-  const struct ptr_hash_entry *d = p;\n+  const struct ptr_hash_entry *const d = p;\n \n   return htab_hash_pointer (d->ptr);\n }\n \n static int\n eq_ptr (const void *p1, const void *p2)\n {\n-  const struct ptr_hash_entry *p = p1;\n+  const struct ptr_hash_entry *const p = p1;\n \n   return (p->ptr == p2);\n }"}, {"sha": "38db65f9c24e101ceff9d183d27e96c3727cd891", "filename": "gcc/java/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/58f9752a2aca436f706dbc64e6c92f10aae95936/gcc%2Fjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/58f9752a2aca436f706dbc64e6c92f10aae95936/gcc%2Fjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2FChangeLog?ref=58f9752a2aca436f706dbc64e6c92f10aae95936", "patch": "@@ -1,3 +1,7 @@\n+2007-08-25  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n+\n+\t* lang.c (java_decl_ok_for_sibcall): Likewise.\n+\n 2007-08-21  Paul Brook  <paul@codesourcery.com>\n \t    Nathan Sidwell  <nathan@codesourcery.com>\n \t    Mark Mitchell  <mark@codesourcery.com>"}, {"sha": "3dd7017997d5e78d0bf6cfe783b86b01bf6eef49", "filename": "gcc/java/lang.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/58f9752a2aca436f706dbc64e6c92f10aae95936/gcc%2Fjava%2Flang.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/58f9752a2aca436f706dbc64e6c92f10aae95936/gcc%2Fjava%2Flang.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Flang.c?ref=58f9752a2aca436f706dbc64e6c92f10aae95936", "patch": "@@ -59,7 +59,7 @@ static int merge_init_test_initialization (void * *, void *);\n static int inline_init_test_initialization (void * *, void *);\n static bool java_dump_tree (void *, tree);\n static void dump_compound_expr (dump_info_p, tree);\n-static bool java_decl_ok_for_sibcall (tree);\n+static bool java_decl_ok_for_sibcall (const_tree);\n static tree java_get_callee_fndecl (const_tree);\n static void java_clear_binding_stack (void);\n \n@@ -894,7 +894,7 @@ java_dump_tree (void *dump_info, tree t)\n    SecurityManager.getClassContext().  */\n \n static bool\n-java_decl_ok_for_sibcall (tree decl)\n+java_decl_ok_for_sibcall (const_tree decl)\n {\n   return (decl != NULL && DECL_CONTEXT (decl) == output_class\n \t  && DECL_INLINE (decl));"}, {"sha": "4c4be49581d0c3beb32172cd54877ee7e4e8246d", "filename": "gcc/langhooks-def.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/58f9752a2aca436f706dbc64e6c92f10aae95936/gcc%2Flanghooks-def.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/58f9752a2aca436f706dbc64e6c92f10aae95936/gcc%2Flanghooks-def.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flanghooks-def.h?ref=58f9752a2aca436f706dbc64e6c92f10aae95936", "patch": "@@ -59,7 +59,7 @@ extern bool lhd_warn_unused_global_decl (const_tree);\n extern void lhd_incomplete_type_error (const_tree, const_tree);\n extern tree lhd_type_promotes_to (tree);\n extern void lhd_register_builtin_type (tree, const char *);\n-extern bool lhd_decl_ok_for_sibcall (tree);\n+extern bool lhd_decl_ok_for_sibcall (const_tree);\n extern const char *lhd_comdat_group (tree);\n extern tree lhd_expr_size (const_tree);\n extern size_t lhd_tree_size (enum tree_code);\n@@ -204,7 +204,7 @@ extern tree lhd_make_node (enum tree_code);\n #define LANG_HOOKS_WRITE_GLOBALS write_global_declarations\n #define LANG_HOOKS_DECL_OK_FOR_SIBCALL\tlhd_decl_ok_for_sibcall\n #define LANG_HOOKS_COMDAT_GROUP lhd_comdat_group\n-#define LANG_HOOKS_OMP_PRIVATIZE_BY_REFERENCE hook_bool_tree_false\n+#define LANG_HOOKS_OMP_PRIVATIZE_BY_REFERENCE hook_bool_const_tree_false\n #define LANG_HOOKS_OMP_PREDETERMINED_SHARING lhd_omp_predetermined_sharing\n #define LANG_HOOKS_OMP_DISREGARD_VALUE_EXPR hook_bool_tree_bool_false\n #define LANG_HOOKS_OMP_PRIVATE_DEBUG_CLAUSE hook_bool_tree_bool_false"}, {"sha": "2635efef6f951c08a1f6715db3fb8202c34c2082", "filename": "gcc/langhooks.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/58f9752a2aca436f706dbc64e6c92f10aae95936/gcc%2Flanghooks.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/58f9752a2aca436f706dbc64e6c92f10aae95936/gcc%2Flanghooks.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flanghooks.c?ref=58f9752a2aca436f706dbc64e6c92f10aae95936", "patch": "@@ -330,7 +330,7 @@ lhd_tree_size (enum tree_code c ATTRIBUTE_UNUSED)\n    sibcall.  */\n \n bool\n-lhd_decl_ok_for_sibcall (tree decl ATTRIBUTE_UNUSED)\n+lhd_decl_ok_for_sibcall (const_tree decl ATTRIBUTE_UNUSED)\n {\n   return true;\n }"}, {"sha": "2b3517e50729fff82b8558a2d84220a239403943", "filename": "gcc/langhooks.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/58f9752a2aca436f706dbc64e6c92f10aae95936/gcc%2Flanghooks.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/58f9752a2aca436f706dbc64e6c92f10aae95936/gcc%2Flanghooks.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flanghooks.h?ref=58f9752a2aca436f706dbc64e6c92f10aae95936", "patch": "@@ -166,7 +166,7 @@ struct lang_hooks_for_decls\n   void (*final_write_globals) (void);\n \n   /* True if this decl may be called via a sibcall.  */\n-  bool (*ok_for_sibcall) (tree);\n+  bool (*ok_for_sibcall) (const_tree);\n \n   /* Return the COMDAT group into which this DECL should be placed.\n      It is known that the DECL belongs in *some* COMDAT group when\n@@ -179,7 +179,7 @@ struct lang_hooks_for_decls\n \n   /* True if OpenMP should privatize what this DECL points to rather\n      than the DECL itself.  */\n-  bool (*omp_privatize_by_reference) (tree);\n+  bool (*omp_privatize_by_reference) (const_tree);\n \n   /* Return sharing kind if OpenMP sharing attribute of DECL is\n      predetermined, OMP_CLAUSE_DEFAULT_UNSPECIFIED otherwise.  */"}, {"sha": "4ef28aa7c2f296a3da043fe06d18a341b91aeb5c", "filename": "gcc/optabs.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/58f9752a2aca436f706dbc64e6c92f10aae95936/gcc%2Foptabs.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/58f9752a2aca436f706dbc64e6c92f10aae95936/gcc%2Foptabs.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Foptabs.c?ref=58f9752a2aca436f706dbc64e6c92f10aae95936", "patch": "@@ -256,7 +256,7 @@ widen_operand (rtx op, enum machine_mode mode, enum machine_mode oldmode,\n    or division) but probably ought to be relied on more widely\n    throughout the expander.  */\n optab\n-optab_for_tree_code (enum tree_code code, tree type)\n+optab_for_tree_code (enum tree_code code, const_tree type)\n {\n   bool trapv;\n   switch (code)"}, {"sha": "c5b4a3db41524363887a8650e3d3b678d4fcfe08", "filename": "gcc/optabs.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/58f9752a2aca436f706dbc64e6c92f10aae95936/gcc%2Foptabs.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/58f9752a2aca436f706dbc64e6c92f10aae95936/gcc%2Foptabs.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Foptabs.h?ref=58f9752a2aca436f706dbc64e6c92f10aae95936", "patch": "@@ -667,7 +667,7 @@ enum can_compare_purpose\n \n /* Return the optab used for computing the given operation on the type\n    given by the second argument.  */\n-extern optab optab_for_tree_code (enum tree_code, tree);\n+extern optab optab_for_tree_code (enum tree_code, const_tree);\n \n /* Nonzero if a compare of mode MODE can be done straightforwardly\n    (without splitting it into pieces).  */"}, {"sha": "734cd87dffd5be746391f007071c3dd821d670d5", "filename": "gcc/rtl.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/58f9752a2aca436f706dbc64e6c92f10aae95936/gcc%2Frtl.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/58f9752a2aca436f706dbc64e6c92f10aae95936/gcc%2Frtl.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frtl.h?ref=58f9752a2aca436f706dbc64e6c92f10aae95936", "patch": "@@ -1663,7 +1663,7 @@ extern rtx simplify_subreg (enum machine_mode, rtx, enum machine_mode,\n extern rtx simplify_gen_subreg (enum machine_mode, rtx, enum machine_mode,\n \t\t\t\tunsigned int);\n extern rtx simplify_replace_rtx (rtx, const_rtx, rtx);\n-extern rtx simplify_rtx (rtx);\n+extern rtx simplify_rtx (const_rtx);\n extern rtx avoid_constant_pool_reference (rtx);\n extern bool mode_signbit_p (enum machine_mode, const_rtx);\n "}, {"sha": "40337a5a197ebd6eca71deb71a7eb2a432e758e9", "filename": "gcc/simplify-rtx.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/58f9752a2aca436f706dbc64e6c92f10aae95936/gcc%2Fsimplify-rtx.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/58f9752a2aca436f706dbc64e6c92f10aae95936/gcc%2Fsimplify-rtx.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsimplify-rtx.c?ref=58f9752a2aca436f706dbc64e6c92f10aae95936", "patch": "@@ -5019,10 +5019,10 @@ simplify_gen_subreg (enum machine_mode outermode, rtx op,\n     simplification and 1 for tree simplification.  */\n \n rtx\n-simplify_rtx (rtx x)\n+simplify_rtx (const_rtx x)\n {\n-  enum rtx_code code = GET_CODE (x);\n-  enum machine_mode mode = GET_MODE (x);\n+  const enum rtx_code code = GET_CODE (x);\n+  const enum machine_mode mode = GET_MODE (x);\n \n   switch (GET_RTX_CLASS (code))\n     {"}, {"sha": "6821e363bb37de0e9f1e99782473cd71930723a2", "filename": "gcc/tree-dump.c", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/58f9752a2aca436f706dbc64e6c92f10aae95936/gcc%2Ftree-dump.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/58f9752a2aca436f706dbc64e6c92f10aae95936/gcc%2Ftree-dump.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-dump.c?ref=58f9752a2aca436f706dbc64e6c92f10aae95936", "patch": "@@ -34,7 +34,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"real.h\"\n #include \"fixed-value.h\"\n \n-static unsigned int queue (dump_info_p, tree, int);\n+static unsigned int queue (dump_info_p, const_tree, int);\n static void dump_index (dump_info_p, unsigned int);\n static void dequeue_and_dump (dump_info_p);\n static void dump_new_line (dump_info_p);\n@@ -45,7 +45,7 @@ static int dump_enable_all (int, int);\n    assigned to T.  */\n \n static unsigned int\n-queue (dump_info_p di, tree t, int flags)\n+queue (dump_info_p di, const_tree t, int flags)\n {\n   dump_queue_p dq;\n   dump_node_info_p dni;\n@@ -94,7 +94,7 @@ dump_index (dump_info_p di, unsigned int index)\n    index of T is printed.  */\n \n void\n-queue_and_dump_index (dump_info_p di, const char *field, tree t, int flags)\n+queue_and_dump_index (dump_info_p di, const char *field, const_tree t, int flags)\n {\n   unsigned int index;\n   splay_tree_node n;\n@@ -122,7 +122,7 @@ queue_and_dump_index (dump_info_p di, const char *field, tree t, int flags)\n /* Dump the type of T.  */\n \n void\n-queue_and_dump_type (dump_info_p di, tree t)\n+queue_and_dump_type (dump_info_p di, const_tree t)\n {\n   queue_and_dump_index (di, \"type\", TREE_TYPE (t), DUMP_NONE);\n }\n@@ -735,15 +735,15 @@ dequeue_and_dump (dump_info_p di)\n /* Return nonzero if FLAG has been specified for the dump, and NODE\n    is not the root node of the dump.  */\n \n-int dump_flag (dump_info_p di, int flag, tree node)\n+int dump_flag (dump_info_p di, int flag, const_tree node)\n {\n   return (di->flags & flag) && (node != di->node);\n }\n \n /* Dump T, and all its children, on STREAM.  */\n \n void\n-dump_node (tree t, int flags, FILE *stream)\n+dump_node (const_tree t, int flags, FILE *stream)\n {\n   struct dump_info di;\n   dump_queue_p dq;"}, {"sha": "30efb10d413ff48aa6dc0140cd3eaff40fab7656", "filename": "gcc/tree-dump.h", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/58f9752a2aca436f706dbc64e6c92f10aae95936/gcc%2Ftree-dump.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/58f9752a2aca436f706dbc64e6c92f10aae95936/gcc%2Ftree-dump.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-dump.h?ref=58f9752a2aca436f706dbc64e6c92f10aae95936", "patch": "@@ -58,7 +58,7 @@ struct dump_info\n   /* The stream on which to dump the information.  */\n   FILE *stream;\n   /* The original node.  */\n-  tree node;\n+  const_tree node;\n   /* User flags.  */\n   int flags;\n   /* The next unused node index.  */\n@@ -85,13 +85,13 @@ extern void dump_pointer (dump_info_p, const char *, void *);\n extern void dump_int (dump_info_p, const char *, int);\n extern void dump_string (dump_info_p, const char *);\n extern void dump_string_field (dump_info_p, const char *, const char *);\n-extern void dump_stmt (dump_info_p, tree);\n-extern void queue_and_dump_index (dump_info_p, const char *, tree, int);\n-extern void queue_and_dump_type (dump_info_p, tree);\n+extern void dump_stmt (dump_info_p, const_tree);\n+extern void queue_and_dump_index (dump_info_p, const char *, const_tree, int);\n+extern void queue_and_dump_type (dump_info_p, const_tree);\n extern void dump_function (enum tree_dump_index, tree);\n extern void dump_function_to_file (tree, FILE *, int);\n extern void debug_function (tree, int);\n-extern int dump_flag (dump_info_p, int, tree);\n+extern int dump_flag (dump_info_p, int, const_tree);\n \n extern unsigned int dump_register (const char *, const char *, const char *, \n \t\t\t\t   int, int);"}, {"sha": "248233553d4afec3d6802ba164e5c4c41cf0c93e", "filename": "gcc/tree-flow.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/58f9752a2aca436f706dbc64e6c92f10aae95936/gcc%2Ftree-flow.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/58f9752a2aca436f706dbc64e6c92f10aae95936/gcc%2Ftree-flow.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-flow.h?ref=58f9752a2aca436f706dbc64e6c92f10aae95936", "patch": "@@ -961,7 +961,7 @@ struct tree_niter_desc\n \n /* In tree-vectorizer.c */\n unsigned vectorize_loops (void);\n-extern bool vect_can_force_dr_alignment_p (tree, unsigned int);\n+extern bool vect_can_force_dr_alignment_p (const_tree, unsigned int);\n extern tree get_vectype_for_scalar_type (tree);\n \n /* In tree-ssa-phiopt.c */"}, {"sha": "fc6f1359c4d0189a2a3bbce59ebec64be47581e6", "filename": "gcc/tree-pass.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/58f9752a2aca436f706dbc64e6c92f10aae95936/gcc%2Ftree-pass.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/58f9752a2aca436f706dbc64e6c92f10aae95936/gcc%2Ftree-pass.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-pass.h?ref=58f9752a2aca436f706dbc64e6c92f10aae95936", "patch": "@@ -78,7 +78,7 @@ extern int dump_enabled_p (enum tree_dump_index);\n extern int dump_initialized_p (enum tree_dump_index);\n extern FILE *dump_begin (enum tree_dump_index, int *);\n extern void dump_end (enum tree_dump_index, FILE *);\n-extern void dump_node (tree, int, FILE *);\n+extern void dump_node (const_tree, int, FILE *);\n extern int dump_switch_p (const char *);\n extern const char *dump_flag_name (enum tree_dump_index);\n "}, {"sha": "2c525eaaa719878c520ea66135fb232d6aae43b0", "filename": "gcc/tree-vectorizer.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/58f9752a2aca436f706dbc64e6c92f10aae95936/gcc%2Ftree-vectorizer.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/58f9752a2aca436f706dbc64e6c92f10aae95936/gcc%2Ftree-vectorizer.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vectorizer.c?ref=58f9752a2aca436f706dbc64e6c92f10aae95936", "patch": "@@ -1583,7 +1583,7 @@ destroy_loop_vec_info (loop_vec_info loop_vinfo, bool clean_stmts)\n    on ALIGNMENT bit boundary.  */\n \n bool \n-vect_can_force_dr_alignment_p (tree decl, unsigned int alignment)\n+vect_can_force_dr_alignment_p (const_tree decl, unsigned int alignment)\n {\n   if (TREE_CODE (decl) != VAR_DECL)\n     return false;\n@@ -2061,7 +2061,7 @@ supportable_widening_operation (enum tree_code code, tree stmt, tree vectype,\n \n bool\n supportable_narrowing_operation (enum tree_code code,\n-\t\t\t\t tree stmt, tree vectype,\n+\t\t\t\t const_tree stmt, const_tree vectype,\n \t\t\t\t enum tree_code *code1)\n {\n   enum machine_mode vec_mode;"}, {"sha": "1dd472c3e2d1566024764454492bbdbc248e1317", "filename": "gcc/tree-vectorizer.h", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/58f9752a2aca436f706dbc64e6c92f10aae95936/gcc%2Ftree-vectorizer.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/58f9752a2aca436f706dbc64e6c92f10aae95936/gcc%2Ftree-vectorizer.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vectorizer.h?ref=58f9752a2aca436f706dbc64e6c92f10aae95936", "patch": "@@ -506,14 +506,14 @@ extern bool vect_is_simple_use (tree, loop_vec_info, tree *, tree *,\n \t\t\t\tenum vect_def_type *);\n extern bool vect_is_simple_iv_evolution (unsigned, tree, tree *, tree *);\n extern tree vect_is_simple_reduction (loop_vec_info, tree);\n-extern bool vect_can_force_dr_alignment_p (tree, unsigned int);\n+extern bool vect_can_force_dr_alignment_p (const_tree, unsigned int);\n extern enum dr_alignment_support vect_supportable_dr_alignment\n   (struct data_reference *);\n extern bool reduction_code_for_scalar_code (enum tree_code, enum tree_code *);\n extern bool supportable_widening_operation (enum tree_code, tree, tree,\n   tree *, tree *, enum tree_code *, enum tree_code *);\n-extern bool supportable_narrowing_operation (enum tree_code, tree, tree,\n-\t\t\t\t\t     enum tree_code *);\n+extern bool supportable_narrowing_operation (enum tree_code, const_tree,\n+\t\t\t\t\t     const_tree, enum tree_code *);\n \n /* Creation and deletion of loop and stmt info structs.  */\n extern loop_vec_info new_loop_vec_info (struct loop *loop);"}, {"sha": "dfb2820394895f9c38d16b2b31c27c0a4dc628bb", "filename": "gcc/tree-vrp.c", "status": "modified", "additions": 15, "deletions": 15, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/58f9752a2aca436f706dbc64e6c92f10aae95936/gcc%2Ftree-vrp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/58f9752a2aca436f706dbc64e6c92f10aae95936/gcc%2Ftree-vrp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vrp.c?ref=58f9752a2aca436f706dbc64e6c92f10aae95936", "patch": "@@ -107,7 +107,7 @@ static int *vr_phi_edge_counts;\n    TYPE_{MIN,MAX}_VALUE.  */\n \n static inline bool\n-needs_overflow_infinity (tree type)\n+needs_overflow_infinity (const_tree type)\n {\n   return INTEGRAL_TYPE_P (type) && !TYPE_OVERFLOW_WRAPS (type);\n }\n@@ -119,7 +119,7 @@ needs_overflow_infinity (tree type)\n    VARYING.  */\n \n static inline bool\n-supports_overflow_infinity (tree type)\n+supports_overflow_infinity (const_tree type)\n {\n #ifdef ENABLE_CHECKING\n   gcc_assert (needs_overflow_infinity (type));\n@@ -169,7 +169,7 @@ positive_overflow_infinity (tree type)\n /* Return whether VAL is a negative overflow infinity.  */\n \n static inline bool\n-is_negative_overflow_infinity (tree val)\n+is_negative_overflow_infinity (const_tree val)\n {\n   return (needs_overflow_infinity (TREE_TYPE (val))\n \t  && CONSTANT_CLASS_P (val)\n@@ -180,7 +180,7 @@ is_negative_overflow_infinity (tree val)\n /* Return whether VAL is a positive overflow infinity.  */\n \n static inline bool\n-is_positive_overflow_infinity (tree val)\n+is_positive_overflow_infinity (const_tree val)\n {\n   return (needs_overflow_infinity (TREE_TYPE (val))\n \t  && CONSTANT_CLASS_P (val)\n@@ -191,7 +191,7 @@ is_positive_overflow_infinity (tree val)\n /* Return whether VAL is a positive or negative overflow infinity.  */\n \n static inline bool\n-is_overflow_infinity (tree val)\n+is_overflow_infinity (const_tree val)\n {\n   return (needs_overflow_infinity (TREE_TYPE (val))\n \t  && CONSTANT_CLASS_P (val)\n@@ -229,7 +229,7 @@ avoid_overflow_infinity (tree val)\n    to the integer constant with the same value in the type.  */\n \n static inline bool\n-vrp_val_is_max (tree val)\n+vrp_val_is_max (const_tree val)\n {\n   tree type_max = TYPE_MAX_VALUE (TREE_TYPE (val));\n \n@@ -242,7 +242,7 @@ vrp_val_is_max (tree val)\n    will be true for a negative overflow infinity.  */\n \n static inline bool\n-vrp_val_is_min (tree val)\n+vrp_val_is_min (const_tree val)\n {\n   tree type_min = TYPE_MIN_VALUE (TREE_TYPE (val));\n \n@@ -256,7 +256,7 @@ vrp_val_is_min (tree val)\n    current function signature.  */\n \n static bool\n-nonnull_arg_p (tree arg)\n+nonnull_arg_p (const_tree arg)\n {\n   tree t, attrs, fntype;\n   unsigned HOST_WIDE_INT arg_num;\n@@ -462,7 +462,7 @@ set_value_range_to_undefined (value_range_t *vr)\n    return NULL.  Otherwise create an empty range if none existed for VAR.  */\n \n static value_range_t *\n-get_value_range (tree var)\n+get_value_range (const_tree var)\n {\n   value_range_t *vr;\n   tree sym;\n@@ -504,7 +504,7 @@ get_value_range (tree var)\n /* Return true, if VAL1 and VAL2 are equal values for VRP purposes.  */\n \n static inline bool\n-vrp_operand_equal_p (tree val1, tree val2)\n+vrp_operand_equal_p (const_tree val1, const_tree val2)\n {\n   if (val1 == val2)\n     return true;\n@@ -536,7 +536,7 @@ vrp_bitmap_equal_p (const_bitmap b1, const_bitmap b2)\n    is the range object associated with another SSA name.  */\n \n static inline bool\n-update_value_range (tree var, value_range_t *new_vr)\n+update_value_range (const_tree var, value_range_t *new_vr)\n {\n   value_range_t *old_vr;\n   bool is_new;\n@@ -562,7 +562,7 @@ update_value_range (tree var, value_range_t *new_vr)\n    point where equivalence processing can be turned on/off.  */\n \n static void\n-add_equivalence (bitmap *equiv, tree var)\n+add_equivalence (bitmap *equiv, const_tree var)\n {\n   unsigned ver = SSA_NAME_VERSION (var);\n   value_range_t *vr = vr_value[ver];\n@@ -1044,7 +1044,7 @@ range_includes_zero_p (value_range_t *vr)\n    false otherwise or if no value range information is available.  */\n \n bool\n-ssa_name_nonnegative_p (tree t)\n+ssa_name_nonnegative_p (const_tree t)\n {\n   value_range_t *vr = get_value_range (t);\n \n@@ -1066,7 +1066,7 @@ ssa_name_nonnegative_p (tree t)\n    false otherwise or if no value range information is available.  */\n \n bool\n-ssa_name_nonzero_p (tree t)\n+ssa_name_nonzero_p (const_tree t)\n {\n   value_range_t *vr = get_value_range (t);\n \n@@ -3252,7 +3252,7 @@ build_assert_expr_for (tree cond, tree v)\n    point values.  */\n \n static inline bool\n-fp_predicate (tree expr)\n+fp_predicate (const_tree expr)\n {\n   return (COMPARISON_CLASS_P (expr)\n \t  && FLOAT_TYPE_P (TREE_TYPE (TREE_OPERAND (expr, 0))));"}, {"sha": "febe90d5cc3ba7cf37f0373dd0a12c05ed553da2", "filename": "gcc/tree.c", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/58f9752a2aca436f706dbc64e6c92f10aae95936/gcc%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/58f9752a2aca436f706dbc64e6c92f10aae95936/gcc%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.c?ref=58f9752a2aca436f706dbc64e6c92f10aae95936", "patch": "@@ -6359,7 +6359,7 @@ get_type_static_bounds (const_tree type, mpz_t min, mpz_t max)\n    variable defined in function FN.  */\n \n bool\n-auto_var_in_fn_p (tree var, tree fn)\n+auto_var_in_fn_p (const_tree var, const_tree fn)\n {\n   return (DECL_P (var) && DECL_CONTEXT (var) == fn\n \t  && (((TREE_CODE (var) == VAR_DECL || TREE_CODE (var) == PARM_DECL)\n@@ -8642,10 +8642,10 @@ walk_tree_without_duplicates_1 (tree *tp, walk_tree_fn func, void *data,\n    empty statements.  */\n \n bool\n-empty_body_p (tree stmt)\n+empty_body_p (const_tree stmt)\n {\n-  tree_stmt_iterator i;\n-  tree body;\n+  const_tree_stmt_iterator i;\n+  const_tree body;\n \n   if (IS_EMPTY_STMT (stmt))\n     return true;\n@@ -8656,8 +8656,8 @@ empty_body_p (tree stmt)\n   else\n     return false;\n \n-  for (i = tsi_start (body); !tsi_end_p (i); tsi_next (&i))\n-    if (!empty_body_p (tsi_stmt (i)))\n+  for (i = ctsi_start (body); !ctsi_end_p (i); ctsi_next (&i))\n+    if (!empty_body_p (ctsi_stmt (i)))\n       return false;\n \n   return true;"}, {"sha": "45dd8d17890e472377abe77db01098321431c9ad", "filename": "gcc/tree.h", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/58f9752a2aca436f706dbc64e6c92f10aae95936/gcc%2Ftree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/58f9752a2aca436f706dbc64e6c92f10aae95936/gcc%2Ftree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.h?ref=58f9752a2aca436f706dbc64e6c92f10aae95936", "patch": "@@ -4606,11 +4606,11 @@ extern bool commutative_tree_code (enum tree_code);\n extern tree upper_bound_in_type (tree, tree);\n extern tree lower_bound_in_type (tree, tree);\n extern int operand_equal_for_phi_arg_p (const_tree, const_tree);\n-extern bool empty_body_p (tree);\n+extern bool empty_body_p (const_tree);\n extern tree call_expr_arg (tree, int);\n extern tree *call_expr_argp (tree, int);\n extern tree call_expr_arglist (tree);\n-extern bool auto_var_in_fn_p (tree, tree);\n+extern bool auto_var_in_fn_p (const_tree, const_tree);\n \f\n /* In stmt.c */\n \n@@ -5142,8 +5142,8 @@ extern tree tree_mem_ref_addr (tree, tree);\n extern void copy_mem_ref_info (tree, tree);\n \n /* In tree-vrp.c */\n-extern bool ssa_name_nonzero_p (tree);\n-extern bool ssa_name_nonnegative_p (tree);\n+extern bool ssa_name_nonzero_p (const_tree);\n+extern bool ssa_name_nonnegative_p (const_tree);\n \n /* In tree-object-size.c.  */\n extern void init_object_sizes (void);"}]}