{"sha": "bc49df98e8b97ae433a903486a987bd33f44d1f2", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmM0OWRmOThlOGI5N2FlNDMzYTkwMzQ4NmE5ODdiZDMzZjQ0ZDFmMg==", "commit": {"author": {"name": "Gary Dismukes", "email": "dismukes@adacore.com", "date": "2005-06-16T08:45:32Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2005-06-16T08:45:32Z"}, "message": "sem_aggr.adb (Aggregate_Constraint_Checks): Apply a conversion to the expression when the component type is an anonymous...\n\n2005-06-14  Gary Dismukes  <dismukes@adacore.com>\n\n\t* sem_aggr.adb (Aggregate_Constraint_Checks): Apply a conversion to the\n\texpression when the component type is an anonymous access type to\n\tensure that appropriate accessibility checks are done.\n\n\t* sem_ch5.adb (Analyze_Assignment): Apply a implicit conversion to the\n\texpression of an assignment when the target object is of an anonymous\n\taccess type. This ensures that required accessibility checks are done.\n\t(One_Bound): Move the check for type Universal_Integer to\n\tProcess_Bounds.\n\t(Process_Bounds): Check whether the type of the preanalyzed range is\n\tUniversal_Integer, and in that case set Typ to Integer_Type prior\n\tto setting the type of the original range and the calls to One_Bound.\n\nFrom-SVN: r101057", "tree": {"sha": "b97f9441568e799060b26257d413a9430015f467", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b97f9441568e799060b26257d413a9430015f467"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/bc49df98e8b97ae433a903486a987bd33f44d1f2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bc49df98e8b97ae433a903486a987bd33f44d1f2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bc49df98e8b97ae433a903486a987bd33f44d1f2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bc49df98e8b97ae433a903486a987bd33f44d1f2/comments", "author": {"login": "dismukes", "id": 50880541, "node_id": "MDQ6VXNlcjUwODgwNTQx", "avatar_url": "https://avatars.githubusercontent.com/u/50880541?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dismukes", "html_url": "https://github.com/dismukes", "followers_url": "https://api.github.com/users/dismukes/followers", "following_url": "https://api.github.com/users/dismukes/following{/other_user}", "gists_url": "https://api.github.com/users/dismukes/gists{/gist_id}", "starred_url": "https://api.github.com/users/dismukes/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dismukes/subscriptions", "organizations_url": "https://api.github.com/users/dismukes/orgs", "repos_url": "https://api.github.com/users/dismukes/repos", "events_url": "https://api.github.com/users/dismukes/events{/privacy}", "received_events_url": "https://api.github.com/users/dismukes/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "357ac4df50fc0c22a5cee64bee133b4f2fdfba38", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/357ac4df50fc0c22a5cee64bee133b4f2fdfba38", "html_url": "https://github.com/Rust-GCC/gccrs/commit/357ac4df50fc0c22a5cee64bee133b4f2fdfba38"}], "stats": {"total": 55, "additions": 34, "deletions": 21}, "files": [{"sha": "8c5d7f9b4ffbbe1afaa1838b24a5244e3a3b3fe4", "filename": "gcc/ada/sem_aggr.adb", "status": "modified", "additions": 10, "deletions": 6, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bc49df98e8b97ae433a903486a987bd33f44d1f2/gcc%2Fada%2Fsem_aggr.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bc49df98e8b97ae433a903486a987bd33f44d1f2/gcc%2Fada%2Fsem_aggr.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_aggr.adb?ref=bc49df98e8b97ae433a903486a987bd33f44d1f2", "patch": "@@ -468,12 +468,16 @@ package body Sem_Aggr is\n             Check_Unset_Reference (Exp);\n          end if;\n \n+      --  Ada 2005 (AI-230): Generate a conversion to an anonymous access\n+      --  component's type to force the appropriate accessibility checks.\n+\n       --  Ada 2005 (AI-231): Generate conversion to the null-excluding\n       --  type to force the corresponding run-time check\n \n       elsif Is_Access_Type (Check_Typ)\n-        and then Can_Never_Be_Null (Check_Typ)\n-        and then not Can_Never_Be_Null (Exp_Typ)\n+        and then ((Is_Local_Anonymous_Access (Check_Typ))\n+                    or else (Can_Never_Be_Null (Check_Typ)\n+                              and then not Can_Never_Be_Null (Exp_Typ)))\n       then\n          Rewrite (Exp, Convert_To (Check_Typ, Relocate_Node (Exp)));\n          Analyze_And_Resolve (Exp, Check_Typ);\n@@ -543,7 +547,7 @@ package body Sem_Aggr is\n \n                elsif Expr_Value (This_Low) /= Expr_Value (Aggr_Low (Dim)) then\n                   Set_Raises_Constraint_Error (N);\n-                  Error_Msg_N (\"Sub-aggregate low bound mismatch?\", N);\n+                  Error_Msg_N (\"sub-aggregate low bound mismatch?\", N);\n                   Error_Msg_N (\"Constraint_Error will be raised at run-time?\",\n                                N);\n                end if;\n@@ -557,7 +561,7 @@ package body Sem_Aggr is\n                  Expr_Value (This_High) /= Expr_Value (Aggr_High (Dim))\n                then\n                   Set_Raises_Constraint_Error (N);\n-                  Error_Msg_N (\"Sub-aggregate high bound mismatch?\", N);\n+                  Error_Msg_N (\"sub-aggregate high bound mismatch?\", N);\n                   Error_Msg_N (\"Constraint_Error will be raised at run-time?\",\n                                N);\n                end if;\n@@ -1301,7 +1305,7 @@ package body Sem_Aggr is\n \n          if Range_Len < Len then\n             Set_Raises_Constraint_Error (N);\n-            Error_Msg_N (\"Too many elements?\", N);\n+            Error_Msg_N (\"too many elements?\", N);\n             Error_Msg_N (\"Constraint_Error will be raised at run-time?\", N);\n          end if;\n       end Check_Length;\n@@ -1392,7 +1396,7 @@ package body Sem_Aggr is\n                   --  aggregate must not be enclosed in parentheses.\n \n                   if Paren_Count (Expr) /= 0 then\n-                     Error_Msg_N (\"No parenthesis allowed here\", Expr);\n+                     Error_Msg_N (\"no parenthesis allowed here\", Expr);\n                   end if;\n \n                   Make_String_Into_Aggregate (Expr);"}, {"sha": "6d9bcaa4ff9cbe0420d4a15be83ca8a3e6e09f55", "filename": "gcc/ada/sem_ch5.adb", "status": "modified", "additions": 24, "deletions": 15, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bc49df98e8b97ae433a903486a987bd33f44d1f2/gcc%2Fada%2Fsem_ch5.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bc49df98e8b97ae433a903486a987bd33f44d1f2/gcc%2Fada%2Fsem_ch5.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch5.adb?ref=bc49df98e8b97ae433a903486a987bd33f44d1f2", "patch": "@@ -400,6 +400,17 @@ package body Sem_Ch5 is\n          Propagate_Tag (Lhs, Rhs);\n       end if;\n \n+      --  Ada 2005 (AI-230 and AI-385): When the lhs type is an anonymous\n+      --  access type, apply an implicit conversion of the rhs to that type\n+      --  to force appropriate static and run-time accessibility checks.\n+\n+      if Ada_Version >= Ada_05\n+        and then Ekind (T1) = E_Anonymous_Access_Type\n+      then\n+         Rewrite (Rhs, Convert_To (T1, Relocate_Node (Rhs)));\n+         Analyze_And_Resolve (Rhs, T1);\n+      end if;\n+\n       --  Ada 2005 (AI-231)\n \n       if Ada_Version >= Ada_05\n@@ -1151,10 +1162,9 @@ package body Sem_Ch5 is\n            (Original_Bound : Node_Id;\n             Analyzed_Bound : Node_Id) return Node_Id\n          is\n-            Assign   : Node_Id;\n-            Id       : Entity_Id;\n-            Decl     : Node_Id;\n-            Decl_Typ : Entity_Id;\n+            Assign : Node_Id;\n+            Id     : Entity_Id;\n+            Decl   : Node_Id;\n \n          begin\n             --  If the bound is a constant or an object, no need for a\n@@ -1181,20 +1191,10 @@ package body Sem_Ch5 is\n               Make_Defining_Identifier (Loc,\n                 Chars => New_Internal_Name ('S'));\n \n-            --  If the type of the discrete range is Universal_Integer, then\n-            --  the bound's type must be resolved to Integer, so the object\n-            --  used to hold the bound must also have type Integer.\n-\n-            if Typ = Universal_Integer then\n-               Decl_Typ := Standard_Integer;\n-            else\n-               Decl_Typ := Typ;\n-            end if;\n-\n             Decl :=\n               Make_Object_Declaration (Loc,\n                 Defining_Identifier => Id,\n-                Object_Definition   => New_Occurrence_Of (Decl_Typ, Loc));\n+                Object_Definition   => New_Occurrence_Of (Typ, Loc));\n \n             Insert_Before (Parent (N), Decl);\n             Analyze (Decl);\n@@ -1224,6 +1224,15 @@ package body Sem_Ch5 is\n          Set_Parent (R_Copy, Parent (R));\n          Pre_Analyze_And_Resolve (R_Copy);\n          Typ := Etype (R_Copy);\n+\n+         --  If the type of the discrete range is Universal_Integer, then\n+         --  the bound's type must be resolved to Integer, and any object\n+         --  used to hold the bound must also have type Integer.\n+\n+         if Typ = Universal_Integer then\n+            Typ := Standard_Integer;\n+         end if;\n+\n          Set_Etype (R, Typ);\n \n          New_Lo_Bound := One_Bound (Lo, Low_Bound  (R_Copy));"}]}