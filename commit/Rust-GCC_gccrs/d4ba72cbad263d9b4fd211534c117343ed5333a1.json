{"sha": "d4ba72cbad263d9b4fd211534c117343ed5333a1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDRiYTcyY2JhZDI2M2Q5YjRmZDIxMTUzNGMxMTczNDNlZDUzMzNhMQ==", "commit": {"author": {"name": "Yannick Moy", "email": "moy@adacore.com", "date": "2019-09-17T08:02:30Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "pmderodat@gcc.gnu.org", "date": "2019-09-17T08:02:30Z"}, "message": "[Ada] Raise Constraint_Error in overflow case involving rounding\n\nFunction Scaled_Divide in s-arith runtime unit computes the combined\nmultiplication and division of its arguments ((X*Y) / Z). In a very\nspecial case where the quotient computed before rounding is 2**64-1,\nthen rounding may lead to undesirable wrap-around, leading to a computed\nquotient of 0 instead of raising Constraint_Error as expected.\n\nThis function is only called in the runtime for arithmetic operations\ninvolving fixed-point types. Rounding is performed only when the target\ntype is of a decimal fixed-point type, and the attribute 'Round of the\ntype is used to round the result of the arithmetic operation.\n\nThis fix correctly raises Constraint_Error in this special case.\n\n2019-09-17  Yannick Moy  <moy@adacore.com>\n\ngcc/ada/\n\n\t* libgnat/s-arit64.adb (Scaled_Divide): Add protection against\n\tundesirable wrap-around.\n\ngcc/testsuite/\n\n\t* gnat.dg/multfixed.adb: New testcase.\n\nFrom-SVN: r275791", "tree": {"sha": "7a0e5a8389c0d2c6332239dfe378189aa472a311", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7a0e5a8389c0d2c6332239dfe378189aa472a311"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d4ba72cbad263d9b4fd211534c117343ed5333a1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d4ba72cbad263d9b4fd211534c117343ed5333a1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d4ba72cbad263d9b4fd211534c117343ed5333a1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d4ba72cbad263d9b4fd211534c117343ed5333a1/comments", "author": {"login": "yannickmoy", "id": 859440, "node_id": "MDQ6VXNlcjg1OTQ0MA==", "avatar_url": "https://avatars.githubusercontent.com/u/859440?v=4", "gravatar_id": "", "url": "https://api.github.com/users/yannickmoy", "html_url": "https://github.com/yannickmoy", "followers_url": "https://api.github.com/users/yannickmoy/followers", "following_url": "https://api.github.com/users/yannickmoy/following{/other_user}", "gists_url": "https://api.github.com/users/yannickmoy/gists{/gist_id}", "starred_url": "https://api.github.com/users/yannickmoy/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/yannickmoy/subscriptions", "organizations_url": "https://api.github.com/users/yannickmoy/orgs", "repos_url": "https://api.github.com/users/yannickmoy/repos", "events_url": "https://api.github.com/users/yannickmoy/events{/privacy}", "received_events_url": "https://api.github.com/users/yannickmoy/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "7197e2db28f10dec509967bb1cbd2d74cb03ee7e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7197e2db28f10dec509967bb1cbd2d74cb03ee7e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7197e2db28f10dec509967bb1cbd2d74cb03ee7e"}], "stats": {"total": 41, "additions": 41, "deletions": 0}, "files": [{"sha": "9a077518eaff33cba2b265c237735d83d1f5a936", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d4ba72cbad263d9b4fd211534c117343ed5333a1/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d4ba72cbad263d9b4fd211534c117343ed5333a1/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=d4ba72cbad263d9b4fd211534c117343ed5333a1", "patch": "@@ -1,3 +1,8 @@\n+2019-09-17  Yannick Moy  <moy@adacore.com>\n+\n+\t* libgnat/s-arit64.adb (Scaled_Divide): Add protection against\n+\tundesirable wrap-around.\n+\n 2019-09-17  Yannick Moy  <moy@adacore.com>\n \n \t* libgnat/s-arit64.adb (Double_Divide): Fix two possible"}, {"sha": "6773dd8be370de04285b0d7d5ab9d6194bf81c54", "filename": "gcc/ada/libgnat/s-arit64.adb", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d4ba72cbad263d9b4fd211534c117343ed5333a1/gcc%2Fada%2Flibgnat%2Fs-arit64.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d4ba72cbad263d9b4fd211534c117343ed5333a1/gcc%2Fada%2Flibgnat%2Fs-arit64.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnat%2Fs-arit64.adb?ref=d4ba72cbad263d9b4fd211534c117343ed5333a1", "patch": "@@ -511,6 +511,14 @@ package body System.Arith_64 is\n       --  Deal with rounding case\n \n       if Round and then Ru > (Zu - Uns64'(1)) / Uns64'(2) then\n+\n+         --  Protect against wrapping around when rounding, by signaling\n+         --  an overflow when the quotient is too large.\n+\n+         if Qu = Uns64'Last then\n+            Raise_Error;\n+         end if;\n+\n          Qu := Qu + Uns64 (1);\n       end if;\n "}, {"sha": "28d5f264c2374dbe921bda945712c1985e8a1fcd", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d4ba72cbad263d9b4fd211534c117343ed5333a1/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d4ba72cbad263d9b4fd211534c117343ed5333a1/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=d4ba72cbad263d9b4fd211534c117343ed5333a1", "patch": "@@ -1,3 +1,7 @@\n+2019-09-17  Yannick Moy  <moy@adacore.com>\n+\n+\t* gnat.dg/multfixed.adb: New testcase.\n+\n 2019-09-17  Vadim Godunko  <godunko@adacore.com>\n \n \t* gnat.dg/expect3.adb: New testcase."}, {"sha": "2eca3cde7ed9a31555e1ef08d7ffb32f45bd5141", "filename": "gcc/testsuite/gnat.dg/multfixed.adb", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d4ba72cbad263d9b4fd211534c117343ed5333a1/gcc%2Ftestsuite%2Fgnat.dg%2Fmultfixed.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d4ba72cbad263d9b4fd211534c117343ed5333a1/gcc%2Ftestsuite%2Fgnat.dg%2Fmultfixed.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Fmultfixed.adb?ref=d4ba72cbad263d9b4fd211534c117343ed5333a1", "patch": "@@ -0,0 +1,24 @@\n+--  { dg-do run }\n+\n+with Ada.Exceptions; use Ada.Exceptions;\n+\n+procedure Multfixed is\n+   Z : constant := 4387648782261400837.0;\n+   type F1 is delta 1.0 / Z range 0.0 .. (2.0**63-1.0) / Z\n+     with Small => 1.0 / Z;\n+   type F2 is delta 1.0 range 0.0 .. (2.0**63-1.0)\n+     with Small => 1.0;\n+   type D is delta 1.0 digits 18;\n+\n+   X : F1 := 8914588002054909637.0 / Z;\n+   Y : F2 := 9079256848778919936.0;\n+   U : D;\n+begin\n+   U := D'Round(X * Y);\n+   raise Program_Error;\n+exception\n+   when Exc : Constraint_Error =>\n+      if Exception_Message (Exc) /= \"System.Arith_64.Raise_Error: 64-bit arithmetic overflow\" then\n+         raise Program_Error;\n+      end if;\n+end Multfixed;\n\\ No newline at end of file"}]}