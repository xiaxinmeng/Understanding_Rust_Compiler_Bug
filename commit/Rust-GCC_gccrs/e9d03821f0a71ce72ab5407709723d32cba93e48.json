{"sha": "e9d03821f0a71ce72ab5407709723d32cba93e48", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTlkMDM4MjFmMGE3MWNlNzJhYjU0MDc3MDk3MjNkMzJjYmE5M2U0OA==", "commit": {"author": {"name": "Jeff Law", "email": "law@redhat.com", "date": "2018-03-02T23:47:56Z"}, "committer": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "2018-03-02T23:47:56Z"}, "message": "reorg.c (stop_search_p): Handle DEBUG_INSN.\n\n\t* reorg.c (stop_search_p): Handle DEBUG_INSN.\n\t(redundant_insn, fill_simple_delay_slots): Likewise.\n\t(fill_slots_from_thread): Likewise.\n\t* resource.c (mark_referenced_resources): Likewise.\n\t(mark_set_resources, find_dead_or_set_registers): Likewise.\n\nFrom-SVN: r258158", "tree": {"sha": "c8020d055b81b9c937f3f09fdfaecf137394fb04", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c8020d055b81b9c937f3f09fdfaecf137394fb04"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e9d03821f0a71ce72ab5407709723d32cba93e48", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e9d03821f0a71ce72ab5407709723d32cba93e48", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e9d03821f0a71ce72ab5407709723d32cba93e48", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e9d03821f0a71ce72ab5407709723d32cba93e48/comments", "author": null, "committer": null, "parents": [{"sha": "2f03003dcc402c65fc33ac6a5d28d868a27c1fdc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2f03003dcc402c65fc33ac6a5d28d868a27c1fdc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2f03003dcc402c65fc33ac6a5d28d868a27c1fdc"}], "stats": {"total": 39, "additions": 34, "deletions": 5}, "files": [{"sha": "ef804524f4596a22b2162bd0d196bed03ec16f55", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e9d03821f0a71ce72ab5407709723d32cba93e48/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e9d03821f0a71ce72ab5407709723d32cba93e48/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=e9d03821f0a71ce72ab5407709723d32cba93e48", "patch": "@@ -1,3 +1,11 @@\n+2018-03-02  Jeff Law  <law@redhat.com>\n+\n+\t* reorg.c (stop_search_p): Handle DEBUG_INSN.\n+\t(redundant_insn, fill_simple_delay_slots): Likewise.\n+\t(fill_slots_from_thread): Likewise.\n+\t* resource.c (mark_referenced_resources): Likewise.\n+\t(mark_set_resources, find_dead_or_set_registers): Likewise.\n+\n 2018-03-02  Jakub Jelinek  <jakub@redhat.com>\n \n \t* substring-locations.h (format_warning_va): Formatting fix for"}, {"sha": "904d91ec9e8b47e177e4ce30a822810b830cfce7", "filename": "gcc/reorg.c", "status": "modified", "additions": 23, "deletions": 5, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e9d03821f0a71ce72ab5407709723d32cba93e48/gcc%2Freorg.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e9d03821f0a71ce72ab5407709723d32cba93e48/gcc%2Freorg.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Freorg.c?ref=e9d03821f0a71ce72ab5407709723d32cba93e48", "patch": "@@ -276,6 +276,7 @@ stop_search_p (rtx_insn *insn, int labels_p)\n     {\n     case NOTE:\n     case CALL_INSN:\n+    case DEBUG_INSN:\n       return 0;\n \n     case CODE_LABEL:\n@@ -1493,6 +1494,9 @@ redundant_insn (rtx insn, rtx_insn *target, const vec<rtx_insn *> &delay_list)\n       if (GET_CODE (pat) == USE || GET_CODE (pat) == CLOBBER)\n \tcontinue;\n \n+      if (GET_CODE (trial) == DEBUG_INSN)\n+\tcontinue;\n+\n       if (rtx_sequence *seq = dyn_cast <rtx_sequence *> (pat))\n \t{\n \t  /* Stop for a CALL and its delay slots because it is difficult to\n@@ -1588,6 +1592,9 @@ redundant_insn (rtx insn, rtx_insn *target, const vec<rtx_insn *> &delay_list)\n       if (GET_CODE (pat) == USE || GET_CODE (pat) == CLOBBER)\n \tcontinue;\n \n+      if (GET_CODE (trial) == DEBUG_INSN)\n+\tcontinue;\n+\n       if (rtx_sequence *seq = dyn_cast <rtx_sequence *> (pat))\n \t{\n \t  bool annul_p = false;\n@@ -2020,6 +2027,10 @@ fill_simple_delay_slots (int non_jumps_p)\n \t      if (GET_CODE (pat) == USE || GET_CODE (pat) == CLOBBER)\n \t\tcontinue;\n \n+\t      /* And DEBUG_INSNs never go into delay slots.  */\n+\t      if (GET_CODE (trial) == DEBUG_INSN)\n+\t\tcontinue;\n+\n \t      /* Check for resource conflict first, to avoid unnecessary\n \t\t splitting.  */\n \t      if (! insn_references_resource_p (trial, &set, true)\n@@ -2142,6 +2153,10 @@ fill_simple_delay_slots (int non_jumps_p)\n \t      if (GET_CODE (pat) == USE || GET_CODE (pat) == CLOBBER)\n \t\tcontinue;\n \n+\t      /* And DEBUG_INSNs do not go in delay slots.  */\n+\t      if (GET_CODE (trial) == DEBUG_INSN)\n+\t\tcontinue;\n+\n \t      /* If this already has filled delay slots, get the insn needing\n \t\t the delay slots.  */\n \t      if (GET_CODE (pat) == SEQUENCE)\n@@ -2211,8 +2226,8 @@ fill_simple_delay_slots (int non_jumps_p)\n \t      && ! can_throw_internal (trial))\n \t    {\n \t      /* See comment in relax_delay_slots about necessity of using\n-\t\t next_real_insn here.  */\n-\t      rtx_insn *new_label = next_real_insn (next_trial);\n+\t\t next_real_nondebug_insn here.  */\n+\t      rtx_insn *new_label = next_real_nondebug_insn (next_trial);\n \n \t      if (new_label != 0)\n \t\tnew_label = get_label_before (new_label, JUMP_LABEL (trial));\n@@ -2406,6 +2421,9 @@ fill_slots_from_thread (rtx_jump_insn *insn, rtx condition,\n       if (GET_CODE (pat) == USE || GET_CODE (pat) == CLOBBER)\n \tcontinue;\n \n+      if (GET_CODE (trial) == DEBUG_INSN)\n+\tcontinue;\n+\n       /* If TRIAL conflicts with the insns ahead of it, we lose.  Also,\n \t don't separate or copy insns that set and use CC0.  */\n       if (! insn_references_resource_p (trial, &set, true)\n@@ -3309,10 +3327,10 @@ relax_delay_slots (rtx_insn *first)\n \n       /* If the first insn at TARGET_LABEL is redundant with a previous\n \t insn, redirect the jump to the following insn and process again.\n-\t We use next_real_insn instead of next_active_insn so we\n+\t We use next_real_nondebug_insn instead of next_active_insn so we\n \t don't skip USE-markers, or we'll end up with incorrect\n \t liveness info.  */\n-      trial = next_real_insn (target_label);\n+      trial = next_real_nondebug_insn (target_label);\n       if (trial && GET_CODE (PATTERN (trial)) != SEQUENCE\n \t  && redundant_insn (trial, insn, vNULL)\n \t  && ! can_throw_internal (trial))\n@@ -3327,7 +3345,7 @@ relax_delay_slots (rtx_insn *first)\n \t    {\n \t      /* Insert the special USE insn and update dataflow info.\n \t\t We know \"trial\" is an insn here as it is the output of\n-\t\t next_real_insn () above.  */\n+\t\t next_real_nondebug_insn () above.  */\n \t      update_block (as_a <rtx_insn *> (trial), tmp);\n \t      \n \t      /* Now emit a label before the special USE insn, and"}, {"sha": "0822daebde724f45ef65cc6404ade62426f1700c", "filename": "gcc/resource.c", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e9d03821f0a71ce72ab5407709723d32cba93e48/gcc%2Fresource.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e9d03821f0a71ce72ab5407709723d32cba93e48/gcc%2Fresource.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fresource.c?ref=e9d03821f0a71ce72ab5407709723d32cba93e48", "patch": "@@ -212,6 +212,7 @@ mark_referenced_resources (rtx x, struct resources *res,\n     case PC:\n     case SYMBOL_REF:\n     case LABEL_REF:\n+    case DEBUG_INSN:\n       return;\n \n     case SUBREG:\n@@ -451,6 +452,7 @@ find_dead_or_set_registers (rtx_insn *target, struct resources *res,\n \n \tcase BARRIER:\n \tcase NOTE:\n+\tcase DEBUG_INSN:\n \t  continue;\n \n \tcase INSN:\n@@ -639,6 +641,7 @@ mark_set_resources (rtx x, struct resources *res, int in_dest,\n     case SYMBOL_REF:\n     case CONST:\n     case PC:\n+    case DEBUG_INSN:\n       /* These don't set any resources.  */\n       return;\n "}]}