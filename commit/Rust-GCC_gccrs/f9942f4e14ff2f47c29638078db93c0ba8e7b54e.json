{"sha": "f9942f4e14ff2f47c29638078db93c0ba8e7b54e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Zjk5NDJmNGUxNGZmMmY0N2MyOTYzODA3OGRiOTNjMGJhOGU3YjU0ZQ==", "commit": {"author": {"name": "Zack Weinberg", "email": "zack@gcc.gnu.org", "date": "2004-08-03T23:30:45Z"}, "committer": {"name": "Zack Weinberg", "email": "zack@gcc.gnu.org", "date": "2004-08-03T23:30:45Z"}, "message": "gensupport.c (init_md_reader_args_cb): Renamed from init_md_reader_args.\n\n\t* gensupport.c (init_md_reader_args_cb): Renamed from\n\tinit_md_reader_args.  Add third option, callback function for\n\tparsing program-specific options.  Add diagnosis of incorrect\n\tnumber of input files.\n\t(init_md_reader): Fold into init_md_reader_args_cb.\n\t(init_md_reader_args): Now a thin wrapper around\n\tinit_md_reader_args_cb.\n\t* gensupport.h: Update prototypes.\n\n\t* genattr.c, genattrtab.c, gencodes.c, genconfig.c, genemit.c\n\t* genextract.c, genflags.c, genopinit.c, genoutput.c, genpeep.c\n\t* genrecog.c: No need to diagnose lack of an input file;\n\tinit_md_reader_args will handle it.\n\t* genconditions.c: Likewise, and use init_md_reader_args.\n\t* genconstants.c: Likewise, and no need to call read_md_rtx.\n\nFrom-SVN: r85511", "tree": {"sha": "21207c8bff549bcb22ce42b1506218236d280593", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/21207c8bff549bcb22ce42b1506218236d280593"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f9942f4e14ff2f47c29638078db93c0ba8e7b54e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f9942f4e14ff2f47c29638078db93c0ba8e7b54e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f9942f4e14ff2f47c29638078db93c0ba8e7b54e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f9942f4e14ff2f47c29638078db93c0ba8e7b54e/comments", "author": null, "committer": null, "parents": [{"sha": "9cbe78fbeb3898ab7f59faba4f027f9fd0a1a4ee", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9cbe78fbeb3898ab7f59faba4f027f9fd0a1a4ee", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9cbe78fbeb3898ab7f59faba4f027f9fd0a1a4ee"}], "stats": {"total": 153, "additions": 65, "deletions": 88}, "files": [{"sha": "fb925f8c9c4d955f46f29ec4055897c3cf3bed39", "filename": "gcc/ChangeLog", "status": "modified", "additions": 28, "deletions": 10, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9942f4e14ff2f47c29638078db93c0ba8e7b54e/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9942f4e14ff2f47c29638078db93c0ba8e7b54e/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=f9942f4e14ff2f47c29638078db93c0ba8e7b54e", "patch": "@@ -1,3 +1,21 @@\n+2004-08-03  Zack Weinberg  <zack@codesourcery.com>\n+\n+\t* gensupport.c (init_md_reader_args_cb): Renamed from\n+\tinit_md_reader_args.  Add third option, callback function for\n+\tparsing program-specific options.  Add diagnosis of incorrect\n+\tnumber of input files.\n+\t(init_md_reader): Fold into init_md_reader_args_cb.\n+\t(init_md_reader_args): Now a thin wrapper around\n+\tinit_md_reader_args_cb.\n+\t* gensupport.h: Update prototypes.\n+\n+\t* genattr.c, genattrtab.c, gencodes.c, genconfig.c, genemit.c\n+\t* genextract.c, genflags.c, genopinit.c, genoutput.c, genpeep.c\n+\t* genrecog.c: No need to diagnose lack of an input file;\n+\tinit_md_reader_args will handle it.\n+\t* genconditions.c: Likewise, and use init_md_reader_args.\n+\t* genconstants.c: Likewise, and no need to call read_md_rtx.\n+\n 2004-08-03  Joseph S. Myers  <jsm@polyomino.org.uk>\n \n \t* c-decl.c (implicitly_declare): Diagnose incompatible implicit\n@@ -26,8 +44,8 @@\n \n 2004-08-03  Maciej W. Rozycki  <macro@linux-mips.org>\n \n-\t* aclocal.m4 (gcc_AC_FUNC_MMAP_BLACKLIST): Check for <sys/mman.h> \n-\tand mmap() explicitly instead of relying on preset autoconf cache \n+\t* aclocal.m4 (gcc_AC_FUNC_MMAP_BLACKLIST): Check for <sys/mman.h>\n+\tand mmap() explicitly instead of relying on preset autoconf cache\n \tvariables.\n \t* configure: Regenerate.\n \n@@ -42,7 +60,7 @@\n \n \t* config/i386/t-gmm_malloc: New file.\n \t* config/i386/t-pmm_malloc: Likewise.\n-\t\n+\n \t* config/i386/xmmintrin.h: Include <mm_malloc.h>.\n \n 2004-08-03  H.J. Lu  <hongjiu.lu@intel.com>\n@@ -58,7 +76,7 @@\n \n \t* config/rs6000/rs6000.c (machopic_output_stub):  Align Darwin stubs.\n \t* c-common.c: Include opts.h.\n-\t(c_common_get_alias_set): Fix check for a single input file. \n+\t(c_common_get_alias_set): Fix check for a single input file.\n \t* toplev.c: Remove current_file_decl.\n \t* tree.h: Ditto.\n \n@@ -144,9 +162,9 @@\n \t(warn_B, warn_std_ptr): Remove.\n \n 2004-08-03  Yossi Markovich <yossim@il.ibm.com>\n-            Mostafa Hagog <mustafa@il.ibm.com>\n+\t    Mostafa Hagog <mustafa@il.ibm.com>\n \n-        * config/rs6000/altivec.md (altivec_vnmsubfp): Fix wrong pattern.\n+\t* config/rs6000/altivec.md (altivec_vnmsubfp): Fix wrong pattern.\n \n 2004-08-02  Geoffrey Keating  <geoffk@apple.com>\n \n@@ -168,7 +186,7 @@\n 2004-08-02  Gabriel Dos Reis  <gdr@integrable-solutions.net>\n \n \t* vec.h (DEF_VEC_P): Add proper cast to uses of vec_o_reserve and\n-\tvec_p_reserve. \n+\tvec_p_reserve.\n \t* langhooks.h (lang_hooks::builtin_function): Rename parameter\n \tfrom \"class\" to \"bt_class\".\n \n@@ -184,7 +202,7 @@\n \t* gengtype.c (create_option): Convert initializer for option::info to\n \tappropiate type.\n \t(adjust_field_type, walk_type, write_func_for_structure,\n-\twrite_root, write_roots): Remove pointless cast. \n+\twrite_root, write_roots): Remove pointless cast.\n \n 2004-08-02  J\"orn Rennecke <joern.rennecke@superh.com>\n \n@@ -195,10 +213,10 @@\n \t* rtl.h (union rtunion_def): Have all members  start with the\n \tprefix \"rt_\".\n \t(XINT, XSTR, XEXP, XVEC, XMODE, XBITMAP, XTREE, XBBDEF, XTMPL,\n-\tX0INT, X0UINT, X0STR, X0EXP, X0VEC, X0MODE, X0BITMAP, X0TREE, \n+\tX0INT, X0UINT, X0STR, X0EXP, X0VEC, X0MODE, X0BITMAP, X0TREE,\n \tX0MEMATTR, X0BBDEF, X0REGATTR, XCINT, XCUINT, XCSTR, XCEXP,\n \tXCVEC, XCMODE, XCBITMAP, XCTREE, XCBBDEF, XC2EXP): Adjust members\n-\taccess. \n+\taccess.\n \t* gengtype.c (adjust_field_rtx_def): Likewise.\n \t* rtlanal.c (loc_mentioned_in_p): Likewise.\n "}, {"sha": "44ba0e00714ed662df8b0f385b123847b76c829c", "filename": "gcc/genattr.c", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9942f4e14ff2f47c29638078db93c0ba8e7b54e/gcc%2Fgenattr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9942f4e14ff2f47c29638078db93c0ba8e7b54e/gcc%2Fgenattr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgenattr.c?ref=f9942f4e14ff2f47c29638078db93c0ba8e7b54e", "patch": "@@ -97,9 +97,6 @@ main (int argc, char **argv)\n \n   progname = \"genattr\";\n \n-  if (argc <= 1)\n-    fatal (\"no input file name\");\n-\n   if (init_md_reader_args (argc, argv) != SUCCESS_EXIT_CODE)\n     return (FATAL_EXIT_CODE);\n "}, {"sha": "fde4933c3b0962f2b20cc187dfe9525108fd010a", "filename": "gcc/genattrtab.c", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9942f4e14ff2f47c29638078db93c0ba8e7b54e/gcc%2Fgenattrtab.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9942f4e14ff2f47c29638078db93c0ba8e7b54e/gcc%2Fgenattrtab.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgenattrtab.c?ref=f9942f4e14ff2f47c29638078db93c0ba8e7b54e", "patch": "@@ -4407,9 +4407,6 @@ main (int argc, char **argv)\n \n   progname = \"genattrtab\";\n \n-  if (argc <= 1)\n-    fatal (\"no input file name\");\n-\n   if (init_md_reader_args (argc, argv) != SUCCESS_EXIT_CODE)\n     return (FATAL_EXIT_CODE);\n "}, {"sha": "2008597791c9fe241b21ce82817b024923eed218", "filename": "gcc/gencodes.c", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9942f4e14ff2f47c29638078db93c0ba8e7b54e/gcc%2Fgencodes.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9942f4e14ff2f47c29638078db93c0ba8e7b54e/gcc%2Fgencodes.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgencodes.c?ref=f9942f4e14ff2f47c29638078db93c0ba8e7b54e", "patch": "@@ -59,9 +59,6 @@ main (int argc, char **argv)\n      direct references to CODE_FOR_xxx in C code.  */\n   insn_elision = 0;\n \n-  if (argc <= 1)\n-    fatal (\"no input file name\");\n-\n   if (init_md_reader_args (argc, argv) != SUCCESS_EXIT_CODE)\n     return (FATAL_EXIT_CODE);\n "}, {"sha": "3f05706f46c9520f26c7cd6099a14b6a107e076c", "filename": "gcc/genconditions.c", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9942f4e14ff2f47c29638078db93c0ba8e7b54e/gcc%2Fgenconditions.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9942f4e14ff2f47c29638078db93c0ba8e7b54e/gcc%2Fgenconditions.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgenconditions.c?ref=f9942f4e14ff2f47c29638078db93c0ba8e7b54e", "patch": "@@ -188,10 +188,7 @@ main (int argc, char **argv)\n \n   progname = \"genconditions\";\n \n-  if (argc <= 1)\n-    fatal (\"No input file name.\");\n-\n-  if (init_md_reader (argv[1]) != SUCCESS_EXIT_CODE)\n+  if (init_md_reader_args (argc, argv) != SUCCESS_EXIT_CODE)\n     return (FATAL_EXIT_CODE);\n \n   condition_table = htab_create (1000, hash_c_test, cmp_c_test, NULL);"}, {"sha": "6f77e984c27f6fe0f11ac0b8456b2bb5989e0e52", "filename": "gcc/genconfig.c", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9942f4e14ff2f47c29638078db93c0ba8e7b54e/gcc%2Fgenconfig.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9942f4e14ff2f47c29638078db93c0ba8e7b54e/gcc%2Fgenconfig.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgenconfig.c?ref=f9942f4e14ff2f47c29638078db93c0ba8e7b54e", "patch": "@@ -264,9 +264,6 @@ main (int argc, char **argv)\n \n   progname = \"genconfig\";\n \n-  if (argc <= 1)\n-    fatal (\"no input file name\");\n-\n   if (init_md_reader_args (argc, argv) != SUCCESS_EXIT_CODE)\n     return (FATAL_EXIT_CODE);\n "}, {"sha": "fcebc4439ca985e98d69d137c72631bf82a2238f", "filename": "gcc/genconstants.c", "status": "modified", "additions": 3, "deletions": 15, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9942f4e14ff2f47c29638078db93c0ba8e7b54e/gcc%2Fgenconstants.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9942f4e14ff2f47c29638078db93c0ba8e7b54e/gcc%2Fgenconstants.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgenconstants.c?ref=f9942f4e14ff2f47c29638078db93c0ba8e7b54e", "patch": "@@ -34,8 +34,6 @@ Boston, MA 02111-1307, USA.  */\n #include \"errors.h\"\n #include \"gensupport.h\"\n \n-static int print_md_constant (void **, void *);\n-\n /* Called via traverse_md_constants; emit a #define for\n    the current constant definition.  */\n \n@@ -52,22 +50,13 @@ print_md_constant (void **slot, void *info)\n int\n main (int argc, char **argv)\n {\n-  int dummy1, dummy2;\n-  rtx desc;\n-\n   progname = \"genconstants\";\n \n-  if (argc <= 1)\n-    fatal (\"no input file name\");\n-\n-  if (init_md_reader (argv[1]) != SUCCESS_EXIT_CODE)\n+  if (init_md_reader_args (argc, argv) != SUCCESS_EXIT_CODE)\n     return (FATAL_EXIT_CODE);\n \n-  /* Scan and discard the entire file.  This has the side effect\n-     of loading up the constants table that we wish to scan.  */\n-  do\n-    desc = read_md_rtx (&dummy1, &dummy2);\n-  while (desc);\n+  /* Initializing the MD reader has the side effect of loading up\n+     the constants table that we wish to scan.  */\n \n   puts (\"/* Generated automatically by the program `genconstants'\");\n   puts (\"   from the machine description file `md'.  */\\n\");\n@@ -83,4 +72,3 @@ main (int argc, char **argv)\n \n   return SUCCESS_EXIT_CODE;\n }\n-"}, {"sha": "e7ace350569284f07d9898544ecd59967a83a300", "filename": "gcc/genemit.c", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9942f4e14ff2f47c29638078db93c0ba8e7b54e/gcc%2Fgenemit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9942f4e14ff2f47c29638078db93c0ba8e7b54e/gcc%2Fgenemit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgenemit.c?ref=f9942f4e14ff2f47c29638078db93c0ba8e7b54e", "patch": "@@ -799,9 +799,6 @@ main (int argc, char **argv)\n \n   progname = \"genemit\";\n \n-  if (argc <= 1)\n-    fatal (\"no input file name\");\n-\n   if (init_md_reader_args (argc, argv) != SUCCESS_EXIT_CODE)\n     return (FATAL_EXIT_CODE);\n "}, {"sha": "94b38c09d2b3e00c82068a7fc1eda73d9bcc938e", "filename": "gcc/genextract.c", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9942f4e14ff2f47c29638078db93c0ba8e7b54e/gcc%2Fgenextract.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9942f4e14ff2f47c29638078db93c0ba8e7b54e/gcc%2Fgenextract.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgenextract.c?ref=f9942f4e14ff2f47c29638078db93c0ba8e7b54e", "patch": "@@ -354,9 +354,6 @@ main (int argc, char **argv)\n \n   progname = \"genextract\";\n \n-  if (argc <= 1)\n-    fatal (\"no input file name\");\n-\n   if (init_md_reader_args (argc, argv) != SUCCESS_EXIT_CODE)\n     return (FATAL_EXIT_CODE);\n "}, {"sha": "ad835bcb1e2af9ec8e98e3ede23140f329001c84", "filename": "gcc/genflags.c", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9942f4e14ff2f47c29638078db93c0ba8e7b54e/gcc%2Fgenflags.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9942f4e14ff2f47c29638078db93c0ba8e7b54e/gcc%2Fgenflags.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgenflags.c?ref=f9942f4e14ff2f47c29638078db93c0ba8e7b54e", "patch": "@@ -245,9 +245,6 @@ main (int argc, char **argv)\n      direct calls to their generators in C code.  */\n   insn_elision = 0;\n \n-  if (argc <= 1)\n-    fatal (\"no input file name\");\n-\n   if (init_md_reader_args (argc, argv) != SUCCESS_EXIT_CODE)\n     return (FATAL_EXIT_CODE);\n "}, {"sha": "23b6e28b9d428b938c71e5016a72a49a8aa1b3a9", "filename": "gcc/genopinit.c", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9942f4e14ff2f47c29638078db93c0ba8e7b54e/gcc%2Fgenopinit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9942f4e14ff2f47c29638078db93c0ba8e7b54e/gcc%2Fgenopinit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgenopinit.c?ref=f9942f4e14ff2f47c29638078db93c0ba8e7b54e", "patch": "@@ -352,9 +352,6 @@ main (int argc, char **argv)\n \n   progname = \"genopinit\";\n \n-  if (argc <= 1)\n-    fatal (\"no input file name\");\n-\n   if (init_md_reader_args (argc, argv) != SUCCESS_EXIT_CODE)\n     return (FATAL_EXIT_CODE);\n "}, {"sha": "112017d8cbded41729142c9b5c56472e11b98cf2", "filename": "gcc/genoutput.c", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9942f4e14ff2f47c29638078db93c0ba8e7b54e/gcc%2Fgenoutput.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9942f4e14ff2f47c29638078db93c0ba8e7b54e/gcc%2Fgenoutput.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgenoutput.c?ref=f9942f4e14ff2f47c29638078db93c0ba8e7b54e", "patch": "@@ -982,9 +982,6 @@ main (int argc, char **argv)\n \n   progname = \"genoutput\";\n \n-  if (argc <= 1)\n-    fatal (\"no input file name\");\n-\n   if (init_md_reader_args (argc, argv) != SUCCESS_EXIT_CODE)\n     return (FATAL_EXIT_CODE);\n "}, {"sha": "66ded4df2926cf60290b3fc9b96858823dde3295", "filename": "gcc/genpeep.c", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9942f4e14ff2f47c29638078db93c0ba8e7b54e/gcc%2Fgenpeep.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9942f4e14ff2f47c29638078db93c0ba8e7b54e/gcc%2Fgenpeep.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgenpeep.c?ref=f9942f4e14ff2f47c29638078db93c0ba8e7b54e", "patch": "@@ -359,9 +359,6 @@ main (int argc, char **argv)\n \n   progname = \"genpeep\";\n \n-  if (argc <= 1)\n-    fatal (\"no input file name\");\n-\n   if (init_md_reader_args (argc, argv) != SUCCESS_EXIT_CODE)\n     return (FATAL_EXIT_CODE);\n "}, {"sha": "f1bce6c78a5ec21403be831b899dcd14bd2b291f", "filename": "gcc/genrecog.c", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9942f4e14ff2f47c29638078db93c0ba8e7b54e/gcc%2Fgenrecog.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9942f4e14ff2f47c29638078db93c0ba8e7b54e/gcc%2Fgenrecog.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgenrecog.c?ref=f9942f4e14ff2f47c29638078db93c0ba8e7b54e", "patch": "@@ -2636,9 +2636,6 @@ main (int argc, char **argv)\n   memset (&split_tree, 0, sizeof split_tree);\n   memset (&peephole2_tree, 0, sizeof peephole2_tree);\n \n-  if (argc <= 1)\n-    fatal (\"no input file name\");\n-\n   if (init_md_reader_args (argc, argv) != SUCCESS_EXIT_CODE)\n     return (FATAL_EXIT_CODE);\n "}, {"sha": "2acfc8a3efd7d3c2e37fe46012a43f129e58f652", "filename": "gcc/gensupport.c", "status": "modified", "additions": 32, "deletions": 25, "changes": 57, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9942f4e14ff2f47c29638078db93c0ba8e7b54e/gcc%2Fgensupport.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9942f4e14ff2f47c29638078db93c0ba8e7b54e/gcc%2Fgensupport.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgensupport.c?ref=f9942f4e14ff2f47c29638078db93c0ba8e7b54e", "patch": "@@ -898,9 +898,12 @@ save_string (const char *s, int len)\n /* The entry point for initializing the reader.  */\n \n int\n-init_md_reader_args (int argc, char **argv)\n+init_md_reader_args_cb (int argc, char **argv, bool (*parse_opt)(const char *))\n {\n+  FILE *input_file;\n   int i;\n+  size_t ix;\n+  char *lastsl;\n   const char *in_fname;\n \n   max_include_len = 0;\n@@ -909,8 +912,10 @@ init_md_reader_args (int argc, char **argv)\n     {\n       if (argv[i][0] != '-')\n \t{\n-\t  if (in_fname == NULL)\n-\t    in_fname = argv[i];\n+\t  if (in_fname)\n+\t    fatal (\"too many input files\");\n+\n+\t  in_fname = argv[i];\n \t}\n       else\n \t{\n@@ -939,43 +944,38 @@ init_md_reader_args (int argc, char **argv)\n \t      }\n \t      break;\n \t    default:\n-\t      fatal (\"invalid option `%s'\", argv[i]);\n+\t      /* The program may have provided a callback so it can\n+\t\t accept its own options.  */\n+\t      if (parse_opt && parse_opt (argv[i]))\n+\t\tbreak;\n \n+\t      fatal (\"invalid option `%s'\", argv[i]);\n \t    }\n \t}\n     }\n-    return init_md_reader (in_fname);\n-}\n-\f\n-/* The entry point for initializing the reader.  */\n \n-int\n-init_md_reader (const char *filename)\n-{\n-  FILE *input_file;\n-  int c;\n-  size_t i;\n-  char *lastsl;\n+  if (!in_fname)\n+    fatal (\"no input file name\");\n \n-  lastsl = strrchr (filename, '/');\n+  lastsl = strrchr (in_fname, '/');\n   if (lastsl != NULL)\n-    base_dir = save_string (filename, lastsl - filename + 1 );\n+    base_dir = save_string (in_fname, lastsl - in_fname + 1 );\n \n-  read_rtx_filename = filename;\n-  input_file = fopen (filename, \"r\");\n+  read_rtx_filename = in_fname;\n+  input_file = fopen (in_fname, \"r\");\n   if (input_file == 0)\n     {\n-      perror (filename);\n+      perror (in_fname);\n       return FATAL_EXIT_CODE;\n     }\n \n   /* Initialize the table of insn conditions.  */\n   condition_table = htab_create (n_insn_conditions,\n \t\t\t\t hash_c_test, cmp_c_test, NULL);\n \n-  for (i = 0; i < n_insn_conditions; i++)\n-    *(htab_find_slot (condition_table, &insn_conditions[i], INSERT))\n-      = (void *) &insn_conditions[i];\n+  for (ix = 0; ix < n_insn_conditions; ix++)\n+    *(htab_find_slot (condition_table, &insn_conditions[ix], INSERT))\n+      = (void *) &insn_conditions[ix];\n \n   obstack_init (rtl_obstack);\n   errors = 0;\n@@ -986,8 +986,7 @@ init_md_reader (const char *filename)\n     {\n       rtx desc;\n       int lineno;\n-\n-      c = read_skip_spaces (input_file);\n+      int c = read_skip_spaces (input_file);\n       if (c == EOF)\n         break;\n \n@@ -1005,6 +1004,14 @@ init_md_reader (const char *filename)\n   return errors ? FATAL_EXIT_CODE : SUCCESS_EXIT_CODE;\n }\n \n+/* Programs that don't have their own options can use this entry point\n+   instead.  */\n+int\n+init_md_reader_args (int argc, char **argv)\n+{\n+  return init_md_reader_args_cb (argc, argv, 0);\n+}\n+\f\n /* The entry point for reading a single rtx from an md file.  */\n \n rtx"}, {"sha": "ea78b247d5d494645654c4f2cbfa9c0a288fc9c2", "filename": "gcc/gensupport.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9942f4e14ff2f47c29638078db93c0ba8e7b54e/gcc%2Fgensupport.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9942f4e14ff2f47c29638078db93c0ba8e7b54e/gcc%2Fgensupport.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgensupport.h?ref=f9942f4e14ff2f47c29638078db93c0ba8e7b54e", "patch": "@@ -24,8 +24,8 @@ Software Foundation, 59 Temple Place - Suite 330, Boston, MA\n struct obstack;\n extern struct obstack *rtl_obstack;\n \n+extern int init_md_reader_args_cb (int, char **, bool (*)(const char *));\n extern int init_md_reader_args (int, char **);\n-extern int init_md_reader (const char *);\n extern rtx read_md_rtx (int *, int *);\n \n extern void message_with_line (int, const char *, ...)"}]}