{"sha": "56bbfaf62ca1d53c8016e0d9e00394a5f23c047a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTZiYmZhZjYyY2ExZDUzYzgwMTZlMGQ5ZTAwMzk0YTVmMjNjMDQ3YQ==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2016-03-21T09:11:37Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2016-03-21T09:11:37Z"}, "message": "re PR tree-optimization/70288 (ICE with -O1 -fno-tree-dominator-opts)\n\n2016-03-21  Richard Biener  <rguenther@suse.de>\n\n\tPR tree-optimization/70288\n\t* tree-ssa-loop-ivcanon.c (tree_estimate_loop_size): Make sure\n\twe do not estimate unsimplified all-constant conditionals or\n\tswitches as optimized away.\n\n\t* gcc.dg/torture/pr70288-1.c: New testcase.\n\t* gcc.dg/torture/pr70288-2.c: Likewise.\n\nFrom-SVN: r234361", "tree": {"sha": "3bc1f9fdebe2a92b99d3cd21c5a25bcbdd36041f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3bc1f9fdebe2a92b99d3cd21c5a25bcbdd36041f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/56bbfaf62ca1d53c8016e0d9e00394a5f23c047a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/56bbfaf62ca1d53c8016e0d9e00394a5f23c047a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/56bbfaf62ca1d53c8016e0d9e00394a5f23c047a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/56bbfaf62ca1d53c8016e0d9e00394a5f23c047a/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "3eee49ed0d613c47ddfec85eeb7c0430ae6d2ec5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3eee49ed0d613c47ddfec85eeb7c0430ae6d2ec5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3eee49ed0d613c47ddfec85eeb7c0430ae6d2ec5"}], "stats": {"total": 94, "additions": 92, "deletions": 2}, "files": [{"sha": "2efe7ea31fa740f3b2f5bbd766684c8bc722ed4b", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/56bbfaf62ca1d53c8016e0d9e00394a5f23c047a/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/56bbfaf62ca1d53c8016e0d9e00394a5f23c047a/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=56bbfaf62ca1d53c8016e0d9e00394a5f23c047a", "patch": "@@ -1,3 +1,10 @@\n+2016-03-21  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/70288\n+\t* tree-ssa-loop-ivcanon.c (tree_estimate_loop_size): Make sure\n+\twe do not estimate unsimplified all-constant conditionals or\n+\tswitches as optimized away.\n+\n 2016-03-21  Andrey Belevantsev  <abel@ispras.ru>\n \n \tPR rtl-optimization/69102"}, {"sha": "f7ca6848fd04821ad096b6e6008e74a2ec332210", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/56bbfaf62ca1d53c8016e0d9e00394a5f23c047a/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/56bbfaf62ca1d53c8016e0d9e00394a5f23c047a/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=56bbfaf62ca1d53c8016e0d9e00394a5f23c047a", "patch": "@@ -1,3 +1,9 @@\n+2016-03-21  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/70288\n+\t* gcc.dg/torture/pr70288-1.c: New testcase.\n+\t* gcc.dg/torture/pr70288-2.c: Likewise.\n+\n 2016-03-21  Andrey Belevantsev  <abel@ispras.ru>\n \n \tPR rtl-optimization/69307"}, {"sha": "1fb049548faab61a4cf6934bbd8ed59e652b6905", "filename": "gcc/testsuite/gcc.dg/torture/pr70288-1.c", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/56bbfaf62ca1d53c8016e0d9e00394a5f23c047a/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr70288-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/56bbfaf62ca1d53c8016e0d9e00394a5f23c047a/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr70288-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr70288-1.c?ref=56bbfaf62ca1d53c8016e0d9e00394a5f23c047a", "patch": "@@ -0,0 +1,36 @@\n+/* { dg-do compile } */\n+/* { dg-require-effective-target int32plus } */\n+\n+int main()\n+{\n+  int var6 = -1267827473;\n+  do {\n+      ++var6;\n+      double s1_115[4], s2_108[4];\n+      int var8 = -161498264;\n+      do {\n+\t  ++var8;\n+\t  int var12 = 1260960076;\n+\t  for (; var12 <= 1260960080; ++var12) {\n+\t      int var13 = 1960990937;\n+\t      do {\n+\t\t  ++var13;\n+\t\t  int var14 = 2128638723;\n+\t\t  for (; var14 <= 2128638728; ++var14) {\n+\t\t      int var22 = -1141190839;\n+\t\t      do {\n+\t\t\t  ++var22;\n+\t\t\t  if (s2_108 > s1_115) {\n+\t\t\t      int var23 = -890798748;\n+\t\t\t      do {\n+\t\t\t\t  ++var23;\n+\t\t\t\t  long long e_119[4];\n+\t\t\t      } while (var23 <= -890798746);\n+\t\t\t  }\n+\t\t      } while (var22 <= -1141190829);\n+\t\t  }\n+\t      } while (var13 <= 1960990946);\n+\t  }\n+      } while (var8 <= -161498254);\n+  } while (var6 <= -1267827462);\n+}"}, {"sha": "ad90fd45887ff36bbe9e938b81f15969cd2f4f4c", "filename": "gcc/testsuite/gcc.dg/torture/pr70288-2.c", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/56bbfaf62ca1d53c8016e0d9e00394a5f23c047a/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr70288-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/56bbfaf62ca1d53c8016e0d9e00394a5f23c047a/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr70288-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr70288-2.c?ref=56bbfaf62ca1d53c8016e0d9e00394a5f23c047a", "patch": "@@ -0,0 +1,35 @@\n+/* { dg-do compile } */\n+/* { dg-require-effective-target int32plus } */\n+\n+int main()\n+{\n+  int var6 = -1267827473;\n+  do {\n+      ++var6;\n+      double s1_115[4], s2_108[4];\n+      int var8 = -161498264;\n+      do {\n+\t  ++var8;\n+\t  int var12 = 1260960076;\n+\t  for (; var12 <= 1260960080; ++var12) {\n+\t      int var13 = 1960990937;\n+\t      do {\n+\t\t  ++var13;\n+\t\t  int var14 = 2128638723;\n+\t\t  for (; var14 <= 2128638728; ++var14) {\n+\t\t      int var22 = -1141190839;\n+\t\t      do {\n+\t\t\t  ++var22;\n+\t\t\t  if (s2_108 > s1_115) {\n+\t\t\t      int var23 = -890798748;\n+\t\t\t      do {\n+\t\t\t\t  long long e_119[4];\n+\t\t\t      } while (var23 <= -890798746);\n+\t\t\t  }\n+\t\t      } while (var22 <= -1141190829);\n+\t\t  }\n+\t      } while (var13 <= 1960990946);\n+\t  }\n+      } while (var8 <= -161498254);\n+  } while (var6 <= -1267827462);\n+}"}, {"sha": "72f91b27342158ed02caffc44168a946332078c0", "filename": "gcc/tree-ssa-loop-ivcanon.c", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/56bbfaf62ca1d53c8016e0d9e00394a5f23c047a/gcc%2Ftree-ssa-loop-ivcanon.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/56bbfaf62ca1d53c8016e0d9e00394a5f23c047a/gcc%2Ftree-ssa-loop-ivcanon.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-loop-ivcanon.c?ref=56bbfaf62ca1d53c8016e0d9e00394a5f23c047a", "patch": "@@ -298,11 +298,17 @@ tree_estimate_loop_size (struct loop *loop, edge exit, edge edge_to_cancel, stru\n \t  /* Conditionals.  */\n \t  else if ((gimple_code (stmt) == GIMPLE_COND\n \t\t    && constant_after_peeling (gimple_cond_lhs (stmt), stmt, loop)\n-\t\t    && constant_after_peeling (gimple_cond_rhs (stmt), stmt, loop))\n+\t\t    && constant_after_peeling (gimple_cond_rhs (stmt), stmt, loop)\n+\t\t    /* We don't simplify all constant compares so make sure\n+\t\t       they are not both constant already.  See PR70288.  */\n+\t\t    && (! is_gimple_min_invariant (gimple_cond_lhs (stmt))\n+\t\t\t|| ! is_gimple_min_invariant (gimple_cond_rhs (stmt))))\n \t\t   || (gimple_code (stmt) == GIMPLE_SWITCH\n \t\t       && constant_after_peeling (gimple_switch_index (\n \t\t\t\t\t\t    as_a <gswitch *> (stmt)),\n-\t\t\t\t\t\t  stmt, loop)))\n+\t\t\t\t\t\t  stmt, loop)\n+\t\t       && ! is_gimple_min_invariant (gimple_switch_index (\n+\t\t\t\t\t\t       as_a <gswitch *> (stmt)))))\n \t    {\n \t      if (dump_file && (dump_flags & TDF_DETAILS))\n \t        fprintf (dump_file, \"   Constant conditional.\\n\");"}]}