{"sha": "c0a26060f6beada90faba59760b0e38916666835", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzBhMjYwNjBmNmJlYWRhOTBmYWJhNTk3NjBiMGUzODkxNjY2NjgzNQ==", "commit": {"author": {"name": "Benjamin Kosnik", "email": "bkoz@redhat.com", "date": "2001-02-28T03:20:36Z"}, "committer": {"name": "Benjamin Kosnik", "email": "bkoz@gcc.gnu.org", "date": "2001-02-28T03:20:36Z"}, "message": "basic_file.h: Include basic_file_model.h.\n\n\n2001-02-27  Benjamin Kosnik  <bkoz@redhat.com>\n\n\tlibstdc++/1886\n\t* include/bits/basic_file.h: Include basic_file_model.h.\n\t* config/c_io_libio.cc: Move to...\n\t* config/basic_file_libio.cc: Here.\n\t* config/basic_file_libio.h: New file.\n\t* config/c_io_stdio.cc: Move to...\n\t* config/basic_file_stdio.cc: Here.\n\t* config/basic_file_stdio.h: New file.\n\t* config/c_io_libio.h: Tweak.\n\t* config/c_io_stdio.h: Tweak.\n\t* src/Makefile.am (build_headers): Add basic_file_model.h.\n\t(sources): Add basic_file.cc, remove c++io.cc.\n\t* src/Makefile.in: Regenerate.\n\t* acinclude.m4 (GLIBCPP_ENABLE_CSTDIO): Add support for\n\tbasic_file_model.h and basic_file.cc.\n\t* aclocal.m4: Regenerate.\n\t* configure: Regenerate.\n\t* testsuite/27_io/filebuf.cc (test05): Add regression.\n\nFrom-SVN: r40108", "tree": {"sha": "dc192b8ecff2e02d0c91c72e2cfa3433f9b8b614", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/dc192b8ecff2e02d0c91c72e2cfa3433f9b8b614"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c0a26060f6beada90faba59760b0e38916666835", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c0a26060f6beada90faba59760b0e38916666835", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c0a26060f6beada90faba59760b0e38916666835", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c0a26060f6beada90faba59760b0e38916666835/comments", "author": null, "committer": null, "parents": [{"sha": "26029fe2fb2d3b7328336c081cc8c5aa87038a7a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/26029fe2fb2d3b7328336c081cc8c5aa87038a7a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/26029fe2fb2d3b7328336c081cc8c5aa87038a7a"}], "stats": {"total": 2919, "additions": 1774, "deletions": 1145}, "files": [{"sha": "2bbeafd9af12dfdb6ef881970c19b772570d25fb", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c0a26060f6beada90faba59760b0e38916666835/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c0a26060f6beada90faba59760b0e38916666835/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=c0a26060f6beada90faba59760b0e38916666835", "patch": "@@ -1,3 +1,24 @@\n+2001-02-27  Benjamin Kosnik  <bkoz@redhat.com>\n+\n+\tlibstdc++/1886\n+\t* include/bits/basic_file.h: Include basic_file_model.h.\n+\t* config/c_io_libio.cc: Move to...\n+\t* config/basic_file_libio.cc: Here.\n+\t* config/basic_file_libio.h: New file.\n+\t* config/c_io_stdio.cc: Move to...\n+\t* config/basic_file_stdio.cc: Here.\n+\t* config/basic_file_stdio.h: New file.\n+\t* config/c_io_libio.h: Tweak.\n+\t* config/c_io_stdio.h: Tweak.\n+\t* src/Makefile.am (build_headers): Add basic_file_model.h.\n+\t(sources): Add basic_file.cc, remove c++io.cc.\n+\t* src/Makefile.in: Regenerate.\n+\t* acinclude.m4 (GLIBCPP_ENABLE_CSTDIO): Add support for\n+\tbasic_file_model.h and basic_file.cc.\n+\t* aclocal.m4: Regenerate.\n+\t* configure: Regenerate.\n+\t* testsuite/27_io/filebuf.cc (test05): Add regression.\n+\t\n 2001-02-27  Benjamin Kosnik  <bkoz@redhat.com>\n \n \tCorrect license."}, {"sha": "d34d6403d7abd18242a43f57be01f79ba5057a71", "filename": "libstdc++-v3/Makefile.in", "status": "modified", "additions": 1, "deletions": 42, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c0a26060f6beada90faba59760b0e38916666835/libstdc%2B%2B-v3%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c0a26060f6beada90faba59760b0e38916666835/libstdc%2B%2B-v3%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FMakefile.in?ref=c0a26060f6beada90faba59760b0e38916666835", "patch": "@@ -137,48 +137,7 @@ MULTICLEAN = true\n # Work around what appears to be a GNU make bug handling MAKEFLAGS\n # values defined in terms of make variables, as is the case for CC and\n # friends when we are called from the top level Makefile.\n-AM_MAKEFLAGS = \\\n-\t\"AR_FLAGS=$(AR_FLAGS)\" \\\n-\t\"CC_FOR_BUILD=$(CC_FOR_BUILD)\" \\\n-\t\"CC_FOR_TARGET=$(CC_FOR_TARGET)\" \\\n-\t\"CFLAGS=$(CFLAGS)\" \\\n-\t\"CXXFLAGS=$(CXXFLAGS)\" \\\n-\t\"CFLAGS_FOR_BUILD=$(CFLAGS_FOR_BUILD)\" \\\n-\t\"CFLAGS_FOR_TARGET=$(CFLAGS_FOR_TARGET)\" \\\n-\t\"INSTALL=$(INSTALL)\" \\\n-\t\"INSTALL_DATA=$(INSTALL_DATA)\" \\\n-\t\"INSTALL_PROGRAM=$(INSTALL_PROGRAM)\" \\\n-\t\"INSTALL_SCRIPT=$(INSTALL_SCRIPT)\" \\\n-\t\"LDFLAGS=$(LDFLAGS)\" \\\n-\t\"LIBCFLAGS=$(LIBCFLAGS)\" \\\n-\t\"LIBCFLAGS_FOR_TARGET=$(LIBCFLAGS_FOR_TARGET)\" \\\n-\t\"MAKE=$(MAKE)\" \\\n-\t\"MAKEINFO=$(MAKEINFO) $(MAKEINFOFLAGS)\" \\\n-\t\"PICFLAG=$(PICFLAG)\" \\\n-\t\"PICFLAG_FOR_TARGET=$(PICFLAG_FOR_TARGET)\" \\\n-\t\"SHELL=$(SHELL)\" \\\n-\t\"EXPECT=$(EXPECT)\" \\\n-\t\"RUNTEST=$(RUNTEST)\" \\\n-\t\"RUNTESTFLAGS=$(RUNTESTFLAGS)\" \\\n-\t\"exec_prefix=$(exec_prefix)\" \\\n-\t\"infodir=$(infodir)\" \\\n-\t\"libdir=$(libdir)\" \\\n-\t\"includedir=$(includedir)\" \\\n-\t\"prefix=$(prefix)\" \\\n-\t\"tooldir=$(tooldir)\" \\\n-\t\"AR=$(AR)\" \\\n-\t\"AS=$(AS)\" \\\n-\t\"CC=$(CC)\" \\\n-\t\"CXX=$(CXX)\" \\\n-\t\"LD=$(LD)\" \\\n-\t\"LIBCFLAGS=$(LIBCFLAGS)\" \\\n-\t\"PICFLAG=$(PICFLAG)\" \\\n-\t\"RANLIB=$(RANLIB)\" \\\n-\t\"NM=$(NM)\" \\\n-\t\"NM_FOR_BUILD=$(NM_FOR_BUILD)\" \\\n-\t\"NM_FOR_TARGET=$(NM_FOR_TARGET)\" \\\n-\t\"DESTDIR=$(DESTDIR)\" \\\n-\t\"WERROR=$(WERROR)\" \n+AM_MAKEFLAGS =  \t\"AR_FLAGS=$(AR_FLAGS)\" \t\"CC_FOR_BUILD=$(CC_FOR_BUILD)\" \t\"CC_FOR_TARGET=$(CC_FOR_TARGET)\" \t\"CFLAGS=$(CFLAGS)\" \t\"CXXFLAGS=$(CXXFLAGS)\" \t\"CFLAGS_FOR_BUILD=$(CFLAGS_FOR_BUILD)\" \t\"CFLAGS_FOR_TARGET=$(CFLAGS_FOR_TARGET)\" \t\"INSTALL=$(INSTALL)\" \t\"INSTALL_DATA=$(INSTALL_DATA)\" \t\"INSTALL_PROGRAM=$(INSTALL_PROGRAM)\" \t\"INSTALL_SCRIPT=$(INSTALL_SCRIPT)\" \t\"LDFLAGS=$(LDFLAGS)\" \t\"LIBCFLAGS=$(LIBCFLAGS)\" \t\"LIBCFLAGS_FOR_TARGET=$(LIBCFLAGS_FOR_TARGET)\" \t\"MAKE=$(MAKE)\" \t\"MAKEINFO=$(MAKEINFO) $(MAKEINFOFLAGS)\" \t\"PICFLAG=$(PICFLAG)\" \t\"PICFLAG_FOR_TARGET=$(PICFLAG_FOR_TARGET)\" \t\"SHELL=$(SHELL)\" \t\"EXPECT=$(EXPECT)\" \t\"RUNTEST=$(RUNTEST)\" \t\"RUNTESTFLAGS=$(RUNTESTFLAGS)\" \t\"exec_prefix=$(exec_prefix)\" \t\"infodir=$(infodir)\" \t\"libdir=$(libdir)\" \t\"includedir=$(includedir)\" \t\"prefix=$(prefix)\" \t\"tooldir=$(tooldir)\" \t\"AR=$(AR)\" \t\"AS=$(AS)\" \t\"CC=$(CC)\" \t\"CXX=$(CXX)\" \t\"LD=$(LD)\" \t\"LIBCFLAGS=$(LIBCFLAGS)\" \t\"PICFLAG=$(PICFLAG)\" \t\"RANLIB=$(RANLIB)\" \t\"NM=$(NM)\" \t\"NM_FOR_BUILD=$(NM_FOR_BUILD)\" \t\"NM_FOR_TARGET=$(NM_FOR_TARGET)\" \t\"DESTDIR=$(DESTDIR)\" \t\"WERROR=$(WERROR)\" \n \n ACLOCAL_M4 = $(top_srcdir)/aclocal.m4\n CONFIG_HEADER = config.h"}, {"sha": "3f9a89021f48691c632a861327e90db465698c2a", "filename": "libstdc++-v3/acinclude.m4", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c0a26060f6beada90faba59760b0e38916666835/libstdc%2B%2B-v3%2Facinclude.m4", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c0a26060f6beada90faba59760b0e38916666835/libstdc%2B%2B-v3%2Facinclude.m4", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Facinclude.m4?ref=c0a26060f6beada90faba59760b0e38916666835", "patch": "@@ -1110,7 +1110,8 @@ AC_DEFUN(GLIBCPP_ENABLE_CSTDIO, [\n   case x${enable_cstdio_flag} in\n     xlibio)\n       CSTDIO_H=config/c_io_libio.h\n-      CSTDIO_CC=config/c_io_libio.cc\n+      BASIC_FILE_H=config/basic_file_libio.h\n+      BASIC_FILE_CC=config/basic_file_libio.cc\n       AC_MSG_RESULT(libio)\n \n       # see if we are on a system with libio native (ie, linux)\n@@ -1166,7 +1167,8 @@ AC_DEFUN(GLIBCPP_ENABLE_CSTDIO, [\n     xstdio | x | xno | xnone | xyes)\n       # default\n       CSTDIO_H=config/c_io_stdio.h\n-      CSTDIO_CC=config/c_io_stdio.cc\n+      BASIC_FILE_H=config/basic_file_stdio.h\n+      BASIC_FILE_CC=config/basic_file_stdio.cc\n       AC_MSG_RESULT(stdio)\n \n       # We're not using stdio.\n@@ -1181,7 +1183,8 @@ AC_DEFUN(GLIBCPP_ENABLE_CSTDIO, [\n       ;;\n   esac\n   AC_LINK_FILES($CSTDIO_H, include/bits/c++io.h)\n-  AC_LINK_FILES($CSTDIO_CC, src/c++io.cc)\n+  AC_LINK_FILES($BASIC_FILE_H, include/bits/basic_file_model.h)\n+  AC_LINK_FILES($BASIC_FILE_CC, src/basic_file.cc)\n \n   # 2000-08-04 bkoz hack\n   CCODECVT_C=config/c_io_libio_codecvt.c"}, {"sha": "b0312261b9d02045ebe258e39b929d1025c608be", "filename": "libstdc++-v3/aclocal.m4", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c0a26060f6beada90faba59760b0e38916666835/libstdc%2B%2B-v3%2Faclocal.m4", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c0a26060f6beada90faba59760b0e38916666835/libstdc%2B%2B-v3%2Faclocal.m4", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Faclocal.m4?ref=c0a26060f6beada90faba59760b0e38916666835", "patch": "@@ -1122,7 +1122,8 @@ AC_DEFUN(GLIBCPP_ENABLE_CSTDIO, [\n   case x${enable_cstdio_flag} in\n     xlibio)\n       CSTDIO_H=config/c_io_libio.h\n-      CSTDIO_CC=config/c_io_libio.cc\n+      BASIC_FILE_H=config/basic_file_libio.h\n+      BASIC_FILE_CC=config/basic_file_libio.cc\n       AC_MSG_RESULT(libio)\n \n       # see if we are on a system with libio native (ie, linux)\n@@ -1178,7 +1179,8 @@ AC_DEFUN(GLIBCPP_ENABLE_CSTDIO, [\n     xstdio | x | xno | xnone | xyes)\n       # default\n       CSTDIO_H=config/c_io_stdio.h\n-      CSTDIO_CC=config/c_io_stdio.cc\n+      BASIC_FILE_H=config/basic_file_stdio.h\n+      BASIC_FILE_CC=config/basic_file_stdio.cc\n       AC_MSG_RESULT(stdio)\n \n       # We're not using stdio.\n@@ -1193,7 +1195,8 @@ AC_DEFUN(GLIBCPP_ENABLE_CSTDIO, [\n       ;;\n   esac\n   AC_LINK_FILES($CSTDIO_H, include/bits/c++io.h)\n-  AC_LINK_FILES($CSTDIO_CC, src/c++io.cc)\n+  AC_LINK_FILES($BASIC_FILE_H, include/bits/basic_file_model.h)\n+  AC_LINK_FILES($BASIC_FILE_CC, src/basic_file.cc)\n \n   # 2000-08-04 bkoz hack\n   CCODECVT_C=config/c_io_libio_codecvt.c"}, {"sha": "60eb006a8474a6421b165f56450e6fe1bf461c23", "filename": "libstdc++-v3/config/basic_file_libio.cc", "status": "added", "additions": 194, "deletions": 0, "changes": 194, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c0a26060f6beada90faba59760b0e38916666835/libstdc%2B%2B-v3%2Fconfig%2Fbasic_file_libio.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c0a26060f6beada90faba59760b0e38916666835/libstdc%2B%2B-v3%2Fconfig%2Fbasic_file_libio.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fbasic_file_libio.cc?ref=c0a26060f6beada90faba59760b0e38916666835", "patch": "@@ -0,0 +1,194 @@\n+// Wrapper of C-language FILE struct -*- C++ -*-\n+\n+// Copyright (C) 2000, 2001 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// As a special exception, you may use this file as part of a free software\n+// library without restriction.  Specifically, if other files instantiate\n+// templates or use macros or inline functions from this file, or you compile\n+// this file and link it with other files to produce an executable, this\n+// file does not by itself cause the resulting executable to be covered by\n+// the GNU General Public License.  This exception does not however\n+// invalidate any other reasons why the executable file might be covered by\n+// the GNU General Public License.\n+\n+//\n+// ISO C++ 14882: 27.8  File-based streams\n+//\n+\n+#include <bits/basic_file.h>\n+\n+namespace std \n+{\n+  // __basic_file<char> definitions\n+  __basic_file<char>::__basic_file(__c_lock* __lock)\n+  {\n+#ifdef _IO_MTSAFE_IO\n+    _lock = __lock;\n+#endif\n+    // Don't set the orientation of the stream when initializing.\n+#ifdef _GLIBCPP_USE_WCHAR_T\n+    _IO_no_init(this, 0, 0, &_M_wfile, 0);\n+#else /* !defined(_GLIBCPP_USE_WCHAR_T) */\n+    _IO_no_init(this, 0, 0, NULL, 0);\n+#endif /* !defined(_GLIBCPP_USE_WCHAR_T) */\n+    _IO_JUMPS((_IO_FILE_plus *) this) = &_IO_file_jumps;\n+    _IO_file_init((_IO_FILE_plus*)this);\n+  }\n+\n+  // NB: Unused.\n+  int \n+  __basic_file<char>::overflow(int __c) \n+  { return _IO_file_overflow(this, __c); }\n+\n+  // NB: Unused.\n+  int \n+  __basic_file<char>::underflow()  \n+  { return _IO_file_underflow(this); }\n+\n+  // NB: Unused.\n+  int \n+  __basic_file<char>::uflow()  \n+  { return _IO_default_uflow(this); }\n+\n+  // NB: Unused.\n+  int \n+  __basic_file<char>::pbackfail(int __c) \n+  { return _IO_default_pbackfail(this, __c); }\n+ \n+  streamsize \n+  __basic_file<char>::xsputn(const char* __s, streamsize __n)\n+  { return _IO_file_xsputn(this, __s, __n); }\n+\n+  streamoff\n+  __basic_file<char>::seekoff(streamoff __off, ios_base::seekdir __way, \n+\t\t\t      ios_base::openmode __mode)\n+  { return _IO_file_seekoff(this, __off, __way, __mode); }\n+\n+  streamoff\n+  __basic_file<char>::seekpos(streamoff __pos, ios_base::openmode __mode)\n+  { return _IO_file_seekoff(this, __pos, ios_base::beg, __mode); }\n+\n+ // NB: Unused.\n+  streambuf* \n+  __basic_file<char>::setbuf(char* __b, int __len)\n+  { return (streambuf*) _IO_file_setbuf(this,__b, __len); }\n+\n+ int \n+  __basic_file<char>::sync()\n+  { return _IO_file_sync(this); }\n+\n+  // NB: Unused.\n+  int \n+  __basic_file<char>::doallocate() \n+  { return _IO_file_doallocate(this); }\n+\n+  // __basic_file<wchar_t> definitions\n+#ifdef _GLIBCPP_USE_WCHAR_T\n+  __basic_file<wchar_t>::__basic_file(__c_lock* __lock)\n+  {\n+#ifdef _IO_MTSAFE_IO\n+    _lock = __lock;\n+#endif\n+    // Don't set the orientation of the stream when initializing.\n+    _IO_no_init(this, 0, 0, &_M_wfile, &_IO_wfile_jumps);\n+    _IO_JUMPS((_IO_FILE_plus *) this) = &_IO_wfile_jumps;\n+    _IO_file_init((_IO_FILE_plus*)this);\n+\n+    // In addition, need to allocate the buffer...\n+    _IO_wdoallocbuf(this);\n+    // Setup initial positions for this buffer...\n+    //    if (!(_flags & _IO_NO_READS))\n+    _IO_wsetg(this, _wide_data->_IO_buf_base, _wide_data->_IO_buf_base,\n+\t      _wide_data->_IO_buf_base);\n+    //    if (!(_flags & _IO_NO_WRITES))\n+    _IO_wsetp(this, _wide_data->_IO_buf_base, _wide_data->_IO_buf_base);\n+    \n+    // Setup codecvt bits...\n+    _codecvt = &__c_libio_codecvt;\n+    \n+    // Do the same for narrow bits...\n+    if (_IO_write_base == NULL)\n+      {\n+\t_IO_doallocbuf(this);\n+\t//      if (!(_flags & _IO_NO_READS))\n+\t_IO_setg(this, _IO_buf_base, _IO_buf_base, _IO_buf_base);\n+\t//    if (!(_flags & _IO_NO_WRITES))\n+\t_IO_setp(this, _IO_buf_base, _IO_buf_base);\n+      }\n+  }\n+\n+ int \n+  __basic_file<wchar_t>::overflow(int __c) \n+  { return _IO_wfile_overflow(this, __c); }\n+\n+  int \n+  __basic_file<wchar_t>::underflow()  \n+  { return _IO_wfile_underflow(this); }\n+\n+  // NB: Unused.\n+  int \n+  __basic_file<wchar_t>::uflow()  \n+  { return _IO_wdefault_uflow(this); }\n+\n+  // NB: Unused.\n+  int \n+  __basic_file<wchar_t>::pbackfail(int __c) \n+  { return _IO_wdefault_pbackfail(this, __c); }\n+\n+  streamsize \n+  __basic_file<wchar_t>::xsputn(const wchar_t* __s, streamsize __n)\n+  { return _IO_wfile_xsputn(this, __s, __n); }\n+  \n+  streamoff\n+  __basic_file<wchar_t>::seekoff(streamoff __off, ios_base::seekdir __way, \n+\t\t\t\t ios_base::openmode __mode)\n+  { return _IO_wfile_seekoff(this, __off, __way, __mode); }\n+\n+  streamoff\n+  __basic_file<wchar_t>::seekpos(streamoff __pos, ios_base::openmode __mode)\n+  { return _IO_wfile_seekoff(this, __pos, ios_base::beg, __mode); }\n+\n+   streambuf* \n+  __basic_file<wchar_t>::setbuf(wchar_t* __b, int __len)\n+  { return (streambuf*) _IO_wfile_setbuf(this,__b, __len); }\n+\n+   int \n+  __basic_file<wchar_t>::sync()\n+  { return _IO_wfile_sync(this); }\n+\n+  int \n+  __basic_file<wchar_t>::doallocate() \n+  { return _IO_wfile_doallocate(this); }\n+#endif\n+\n+  // Need to instantiate base class here for type-info bits, etc\n+  template struct __basic_file_base<char>;\n+  template class __basic_file<char>;\n+#ifdef _GLIBCPP_USE_WCHAR_T\n+  template struct __basic_file_base<wchar_t>;\n+  template class __basic_file<wchar_t>;\n+#endif\n+}  // namespace std\n+\n+\n+\n+\n+\n+\n+"}, {"sha": "3cc4c080a8df4d5d5e1fe9b91e82668e2ef15e11", "filename": "libstdc++-v3/config/basic_file_libio.h", "status": "added", "additions": 296, "deletions": 0, "changes": 296, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c0a26060f6beada90faba59760b0e38916666835/libstdc%2B%2B-v3%2Fconfig%2Fbasic_file_libio.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c0a26060f6beada90faba59760b0e38916666835/libstdc%2B%2B-v3%2Fconfig%2Fbasic_file_libio.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fbasic_file_libio.h?ref=c0a26060f6beada90faba59760b0e38916666835", "patch": "@@ -0,0 +1,296 @@\n+// Wrapper of C-language FILE struct -*- C++ -*-\n+\n+// Copyright (C) 2000, 2001 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// As a special exception, you may use this file as part of a free software\n+// library without restriction.  Specifically, if other files instantiate\n+// templates or use macros or inline functions from this file, or you compile\n+// this file and link it with other files to produce an executable, this\n+// file does not by itself cause the resulting executable to be covered by\n+// the GNU General Public License.  This exception does not however\n+// invalidate any other reasons why the executable file might be covered by\n+// the GNU General Public License.\n+\n+//\n+// ISO C++ 14882: 27.8  File-based streams\n+//\n+\n+#include <libioP.h>\n+\n+namespace std \n+{\n+  // __basic_file<char> specializations\n+  template<>\n+    __basic_file<char>::__basic_file(__c_lock* __lock);\n+\n+  template<>\n+    int \n+    __basic_file<char>::overflow(int __c);\n+\n+  template<>\n+    int \n+    __basic_file<char>::underflow();\n+\n+  template<>\n+    int \n+    __basic_file<char>::uflow();\n+\n+  template<>\n+    int \n+    __basic_file<char>::pbackfail(int __c);\n+\n+  template<>\n+    streamsize \n+    __basic_file<char>::xsputn(const char* __s, streamsize __n);\n+\n+  template<>\n+    streamoff\n+    __basic_file<char>::seekoff(streamoff __off, ios_base::seekdir __way, \n+\t\t\t\tios_base::openmode __mode);\n+\n+  template<>\n+    streamoff\n+    __basic_file<char>::seekpos(streamoff __pos, ios_base::openmode __mode);\n+\n+  template<>\n+    streambuf* \n+    __basic_file<char>::setbuf(char* __b, int __len);\n+\n+  template<>\n+    int \n+    __basic_file<char>::sync();\n+\n+  template<>\n+    int \n+    __basic_file<char>::doallocate();\n+\n+  // __basic_file<wchar_t> specializations\n+#ifdef _GLIBCPP_USE_WCHAR_T\n+  template<>\n+    __basic_file<wchar_t>::__basic_file(__c_lock* __lock);\n+\n+  template<>\n+    int \n+    __basic_file<wchar_t>::overflow(int __c);\n+\n+  template<>\n+    int \n+    __basic_file<wchar_t>::underflow();\n+\n+  template<>\n+    int \n+    __basic_file<wchar_t>::uflow();\n+\n+  template<>\n+    int \n+    __basic_file<wchar_t>::pbackfail(int __c);\n+\n+  template<>\n+    streamsize \n+    __basic_file<wchar_t>::xsputn(const wchar_t* __s, streamsize __n);\n+\n+  template<>\n+    streamoff\n+    __basic_file<wchar_t>::seekoff(streamoff __off, ios_base::seekdir __way, \n+\t\t\t\tios_base::openmode __mode);\n+\n+  template<>\n+    streamoff\n+    __basic_file<wchar_t>::seekpos(streamoff __pos, ios_base::openmode __mode);\n+\n+  template<>\n+    streambuf* \n+    __basic_file<wchar_t>::setbuf(wchar_t* __b, int __len);\n+\n+  template<>\n+    int \n+    __basic_file<wchar_t>::sync();\n+\n+  template<>\n+    int \n+    __basic_file<wchar_t>::doallocate();\n+#endif\n+\n+  // Generic definitions for __basic_file\n+  template<typename _CharT>\n+    int \n+    __basic_file<_CharT>::get_fileno(void)\n+    { return _fileno; }\n+ \n+  template<typename _CharT>\n+    __basic_file<_CharT>::~__basic_file()\n+    { _IO_file_finish(this, 0); }\n+      \n+  template<typename _CharT>\n+    void \n+    __basic_file<_CharT>::_M_open_mode(ios_base::openmode __mode, \n+\t\t\t\t       int& __p_mode, int& __rw_mode, \n+\t\t\t\t       char* /*__c_mode*/)\n+    {  \n+#ifdef O_BINARY\n+      bool __testb = __mode & ios_base::binary;\n+#endif\n+      bool __testi = __mode & ios_base::in;\n+      bool __testo = __mode & ios_base::out;\n+      bool __testt = __mode & ios_base::trunc;\n+      bool __testa = __mode & ios_base::app;\n+      \n+      if (!__testi && __testo && !__testt && !__testa)\n+\t{\n+\t  __p_mode = O_WRONLY | O_TRUNC | O_CREAT;\n+\t  __rw_mode = _IO_NO_READS;\n+\t}\n+      if (!__testi && __testo && !__testt && __testa)\n+\t{\n+\t  __p_mode = O_WRONLY | O_APPEND | O_CREAT;\n+\t  __rw_mode = _IO_NO_READS | _IO_IS_APPENDING;\n+\t}\n+      if (!__testi && __testo && __testt && !__testa)\n+\t{\n+\t  __p_mode = O_WRONLY | O_TRUNC | O_CREAT;\n+\t  __rw_mode = _IO_NO_READS;\n+\t}\n+      if (__testi && !__testo && !__testt && !__testa)\n+\t{\n+\t  __p_mode = O_RDONLY;\n+\t  __rw_mode = _IO_NO_WRITES;\n+\t}\n+      if (__testi && __testo && !__testt && !__testa)\n+\t{\n+\t  __p_mode = O_RDWR;\n+\t  __rw_mode = 0;\n+\t}\n+      if (__testi && __testo && __testt && !__testa)\n+\t{\n+\t  __p_mode = O_RDWR | O_TRUNC | O_CREAT;\n+\t  __rw_mode = 0;\n+\t}\n+#ifdef O_BINARY\n+      if (__testb)\n+\t__p_mode |= O_BINARY;\n+#endif\t   \n+    }\n+  \n+  template<typename _CharT>\n+    __basic_file<_CharT>*\n+    __basic_file<_CharT>::sys_open(int __fd, ios_base::openmode __mode) \n+    {\n+      __basic_file* __ret = NULL;\n+      int __p_mode = 0;\n+      int __rw_mode = _IO_NO_READS + _IO_NO_WRITES; \n+      char __c_mode[4];\n+      \n+      _M_open_mode(__mode, __p_mode, __rw_mode, __c_mode);\n+\n+      if (!_IO_file_is_open(this))\n+\t{\n+\t  _fileno = __fd;\n+\t  _flags &= ~(_IO_NO_READS+_IO_NO_WRITES);\n+\t  _flags |= _IO_DELETE_DONT_CLOSE;\n+\t  _offset = _IO_pos_BAD;\n+\t  int __mask = _IO_NO_READS + _IO_NO_WRITES + _IO_IS_APPENDING;\n+\t  _IO_mask_flags(this, __rw_mode, __mask);\n+\t}\n+\n+      return __ret;\n+    }\n+  \n+  template<typename _CharT>\n+    __basic_file<_CharT>* \n+    __basic_file<_CharT>::open(const char* __name, ios_base::openmode __mode, \n+\t\t\t       int __prot)\n+    {\n+      __basic_file* __ret = NULL;\n+      int __p_mode = 0;\n+      int __rw_mode = _IO_NO_READS + _IO_NO_WRITES; \n+      char __c_mode[4];\n+\n+      _M_open_mode(__mode, __p_mode, __rw_mode, __c_mode);\n+      if (!_IO_file_is_open(this))\n+\t{\n+\t  __c_file_type* __f;\n+\t  __f = _IO_file_open(this, __name, __p_mode, __prot, __rw_mode, 0);\n+\t  __ret = __f ? this: NULL;\n+\t}\n+      return __ret;\n+    }\n+  \n+  template<typename _CharT>\n+    bool \n+    __basic_file<_CharT>::is_open() { return _fileno >= 0; }\n+  \n+  template<typename _CharT>\n+    __basic_file<_CharT>* \n+    __basic_file<_CharT>::close()\n+    { \n+      return _IO_file_close_it(this) ? static_cast<__basic_file*>(NULL) : this;\n+    }\n+ \n+  template<typename _CharT>\n+    streamsize \n+    __basic_file<_CharT>::xsgetn(_CharT* __s, streamsize __n)\n+    { return _IO_file_xsgetn(this, __s, __n); }\n+\n+  // NB: Unused.\n+  template<typename _CharT>\n+    streamsize \n+    __basic_file<_CharT>::sys_read(_CharT* __s, streamsize __n) \n+    { return _IO_file_read(this, __s, __n); }\n+\n+  // NB: Unused.    \n+  template<typename _CharT>\n+    streamsize \n+    __basic_file<_CharT>::sys_write(const _CharT* __s, streamsize __n) \n+    { return _IO_file_write(this, __s, __n); }\n+\n+  // NB: Unused.\n+  template<typename _CharT>\n+    streamoff\n+    __basic_file<_CharT>::sys_seek(streamoff __pos, ios_base::seekdir __way)\n+    { return _IO_file_seek(this, __pos, __way); }\n+  \n+  // NB: Unused.\n+  template<typename _CharT>\n+    int \n+    __basic_file<_CharT>::sys_close() \n+    { return _IO_file_close(this); }\n+\n+  // NB: Unused.\n+  template<typename _CharT>\n+    int \n+    __basic_file<_CharT>::sys_stat(void* __v) \n+    { return _IO_file_stat(this, __v); }\n+\n+  // NB: Unused.\n+  template<typename _CharT>\n+    int \n+    __basic_file<_CharT>::showmanyc() { return EOF; }\n+\n+  // NB: Unused.\n+  template<typename _CharT>\n+    void \n+    __basic_file<_CharT>::imbue(void* /*__v*/) { }\n+}  // namespace std\n+\n+\n+\n+\n+\n+\n+"}, {"sha": "0bfd1c4acf956090057c080a77f0e95aca0dc84c", "filename": "libstdc++-v3/config/basic_file_stdio.cc", "status": "added", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c0a26060f6beada90faba59760b0e38916666835/libstdc%2B%2B-v3%2Fconfig%2Fbasic_file_stdio.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c0a26060f6beada90faba59760b0e38916666835/libstdc%2B%2B-v3%2Fconfig%2Fbasic_file_stdio.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fbasic_file_stdio.cc?ref=c0a26060f6beada90faba59760b0e38916666835", "patch": "@@ -0,0 +1,42 @@\n+// Wrapper of C-language FILE struct -*- C++ -*-\n+\n+// Copyright (C) 2000, 2001 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// As a special exception, you may use this file as part of a free software\n+// library without restriction.  Specifically, if other files instantiate\n+// templates or use macros or inline functions from this file, or you compile\n+// this file and link it with other files to produce an executable, this\n+// file does not by itself cause the resulting executable to be covered by\n+// the GNU General Public License.  This exception does not however\n+// invalidate any other reasons why the executable file might be covered by\n+// the GNU General Public License.\n+\n+//\n+// ISO C++ 14882: 27.8  File-based streams\n+//\n+\n+#include <bits/basic_file.h>\n+\n+namespace std \n+{\n+  template class __basic_file<char>;\n+#ifdef _GLIBCPP_USE_WCHAR_T\n+  template class __basic_file<wchar_t>;\n+#endif\n+}  // namespace std"}, {"sha": "141373108d5fae16a5d0914e9c4a7a79ee6a87ec", "filename": "libstdc++-v3/config/basic_file_stdio.h", "status": "added", "additions": 258, "deletions": 0, "changes": 258, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c0a26060f6beada90faba59760b0e38916666835/libstdc%2B%2B-v3%2Fconfig%2Fbasic_file_stdio.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c0a26060f6beada90faba59760b0e38916666835/libstdc%2B%2B-v3%2Fconfig%2Fbasic_file_stdio.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fbasic_file_stdio.h?ref=c0a26060f6beada90faba59760b0e38916666835", "patch": "@@ -0,0 +1,258 @@\n+// Wrapper of C-language FILE struct -*- C++ -*-\n+\n+// Copyright (C) 2000, 2001 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// As a special exception, you may use this file as part of a free software\n+// library without restriction.  Specifically, if other files instantiate\n+// templates or use macros or inline functions from this file, or you compile\n+// this file and link it with other files to produce an executable, this\n+// file does not by itself cause the resulting executable to be covered by\n+// the GNU General Public License.  This exception does not however\n+// invalidate any other reasons why the executable file might be covered by\n+// the GNU General Public License.\n+\n+//\n+// ISO C++ 14882: 27.8  File-based streams\n+//\n+\n+#include <unistd.h>\n+\n+namespace std \n+{\n+  // Generic definitions for __basic_file\n+  template<typename _CharT>\n+    __basic_file<_CharT>::__basic_file(__c_lock* /*__lock*/) \n+    : _M_fileno(-1), _M_cfile(NULL) { }\n+\n+  template<typename _CharT>\n+    int \n+    __basic_file<_CharT>::get_fileno(void)\n+    { return _M_fileno; }\n+ \n+  template<typename _CharT>\n+    __basic_file<_CharT>::~__basic_file()\n+    {\n+      if (this->is_open())\n+\t{\n+\t  fflush(_M_cfile);\n+\t  this->close();\n+\t}\n+    }\n+      \n+  template<typename _CharT>\n+    void \n+    __basic_file<_CharT>::_M_open_mode(ios_base::openmode __mode, \n+\t\t\t\t       int& /*__p_mode*/, int& /*__rw_mode*/, \n+\t\t\t\t       char* __c_mode)\n+    {  \n+      bool __testb = __mode & ios_base::binary;\n+      bool __testi = __mode & ios_base::in;\n+      bool __testo = __mode & ios_base::out;\n+      bool __testt = __mode & ios_base::trunc;\n+      bool __testa = __mode & ios_base::app;\n+      \n+      if (!__testi && __testo && !__testt && !__testa)\n+\tstrcpy(__c_mode, \"w\");\n+      if (!__testi && __testo && !__testt && __testa)\n+\tstrcpy(__c_mode, \"a\");\n+      if (!__testi && __testo && __testt && !__testa)\n+\tstrcpy(__c_mode, \"w\");\n+      if (__testi && !__testo && !__testt && !__testa)\n+\tstrcpy(__c_mode, \"r\");\n+      if (__testi && __testo && !__testt && !__testa)\n+\tstrcpy(__c_mode, \"r+\");\n+      if (__testi && __testo && __testt && !__testa)\n+\tstrcpy(__c_mode, \"w+\");\n+      if (__testb)\n+\tstrcat(__c_mode, \"b\");\n+    }\n+  \n+  template<typename _CharT>\n+    __basic_file<_CharT>*\n+    __basic_file<_CharT>::sys_open(int __fd, ios_base::openmode __mode) \n+    {\n+      __basic_file* __ret = NULL;\n+      int __p_mode = 0;\n+      int __rw_mode = 0;\n+      char __c_mode[4];\n+\n+      _M_open_mode(__mode, __p_mode, __rw_mode, __c_mode);\n+\n+      int __dupfd = dup(__fd);\n+\n+      if (__dupfd != -1 && !this->is_open())\n+\t{\n+\t  if ((_M_cfile = fdopen(__dupfd, __c_mode)))\n+\t    {\n+\t      _M_fileno = __dupfd;\n+\t      __ret = this;\n+\t    }\n+\t}\n+\n+      return __ret;\n+    }\n+  \n+  template<typename _CharT>\n+    __basic_file<_CharT>* \n+    __basic_file<_CharT>::open(const char* __name, ios_base::openmode __mode, \n+\t\t\t       int /*__prot*/)\n+    {\n+      __basic_file* __ret = NULL;\n+      int __p_mode = 0;\n+      int __rw_mode = 0;\n+      char __c_mode[4];\n+      \n+      _M_open_mode(__mode, __p_mode, __rw_mode, __c_mode);\n+\n+      if (!this->is_open())\n+\t{\n+\t  if ((_M_cfile = fopen(__name, __c_mode)))\n+\t    {\n+\t      _M_fileno = fileno(_M_cfile);\n+\t      __ret = this;\n+\t    }\n+\t}\n+      return __ret;\n+    }\n+  \n+  template<typename _CharT>\n+    bool \n+    __basic_file<_CharT>::is_open() { return _M_fileno >= 0; }\n+  \n+  template<typename _CharT>\n+    __basic_file<_CharT>* \n+    __basic_file<_CharT>::close()\n+    { \n+      __basic_file* __retval = static_cast<__basic_file*>(NULL);\n+      bool __testopen = fclose(_M_cfile);\n+      if (!__testopen)\n+\t{\n+\t  __retval = this;\n+\t  _M_fileno = -1;\n+\t}  \n+      return __retval;\n+    }\n+ \n+  template<typename _CharT>\n+    streamsize \n+    __basic_file<_CharT>::xsgetn(_CharT* __s, streamsize __n)\n+    { return fread(__s, 1, __n, _M_cfile); }\n+\n+  template<typename _CharT>\n+    streamsize \n+    __basic_file<_CharT>::xsputn(const _CharT* __s, streamsize __n)\n+    { return fwrite(__s, 1, __n, _M_cfile); }\n+ \n+  template<typename _CharT>\n+    streamoff\n+    __basic_file<_CharT>::seekoff(streamoff __off, ios_base::seekdir __way, \n+\t\t\t\t  ios_base::openmode /*__mode*/)\n+    { fseek(_M_cfile, __off, __way); return ftell(_M_cfile); }\n+\n+  template<typename _CharT>\n+    streamoff\n+    __basic_file<_CharT>::seekpos(streamoff __pos, \n+\t\t\t\t  ios_base::openmode /*__mode*/)\n+    { fseek(_M_cfile, __pos, ios_base::beg); return ftell(_M_cfile); }\n+\n+  template<typename _CharT>\n+    int \n+    __basic_file<_CharT>::sync()\n+    { return fflush(_M_cfile); }\n+\n+  // NB: Unused.\n+  template<typename _CharT>\n+    int \n+    __basic_file<_CharT>::overflow(int /*__c*/) \n+    { return EOF; }\n+\n+  // NB: Unused.\n+  template<typename _CharT>\n+    int \n+    __basic_file<_CharT>::underflow()  \n+    { return EOF; } \n+\n+  // NB: Unused.\n+  template<typename _CharT>\n+    int \n+    __basic_file<_CharT>::uflow()  \n+    { return EOF; }\n+\n+  // NB: Unused.\n+  template<typename _CharT>\n+    int \n+    __basic_file<_CharT>::pbackfail(int /*__c*/) \n+    { return EOF; } \n+ \n+ // NB: Unused.\n+  template<typename _CharT>\n+    streambuf* \n+    __basic_file<_CharT>::setbuf(_CharT* /*__b*/, int /*__len*/)\n+    { return reinterpret_cast<streambuf*>(this); }\n+\n+  // NB: Unused.\n+  template<typename _CharT>\n+    int \n+    __basic_file<_CharT>::doallocate() \n+    { return EOF; }\n+\n+  // NB: Unused.\n+  template<typename _CharT>\n+    streamsize \n+    __basic_file<_CharT>::sys_read(_CharT* __s, streamsize __n) \n+    { return fread(__s, 1, __n, _M_cfile); }\n+\n+  // NB: Unused.    \n+  template<typename _CharT>\n+    streamsize \n+    __basic_file<_CharT>::sys_write(const _CharT* __s, streamsize __n) \n+    { return fwrite(__s, 1, __n, _M_cfile); }\n+\n+  // NB: Unused.\n+  template<typename _CharT>\n+    streamoff\n+    __basic_file<_CharT>::sys_seek(streamoff __pos, ios_base::seekdir __way)\n+    { \n+      fseek(_M_cfile, __pos, __way); \n+      return ftell(_M_cfile); \n+    }\n+  \n+  // NB: Unused.\n+  template<typename _CharT>\n+    int \n+    __basic_file<_CharT>::sys_close() \n+    { return fclose(_M_cfile); }\n+\n+  // NB: Unused.\n+  template<typename _CharT>\n+    int \n+    __basic_file<_CharT>::sys_stat(void* /*__v*/) \n+    { return EOF; }\n+\n+  // NB: Unused.\n+  template<typename _CharT>\n+    int \n+    __basic_file<_CharT>::showmanyc() \n+    { return EOF; }\n+\n+  // NB: Unused.\n+  template<typename _CharT>\n+    void \n+    __basic_file<_CharT>::imbue(void* /*__v*/) { }\n+}  // namespace std"}, {"sha": "9e040d7b91afa43d5219620c08d8619ba70b2b50", "filename": "libstdc++-v3/config/c_io_libio.h", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c0a26060f6beada90faba59760b0e38916666835/libstdc%2B%2B-v3%2Fconfig%2Fc_io_libio.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c0a26060f6beada90faba59760b0e38916666835/libstdc%2B%2B-v3%2Fconfig%2Fc_io_libio.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fc_io_libio.h?ref=c0a26060f6beada90faba59760b0e38916666835", "patch": "@@ -1,6 +1,6 @@\n // underlying io library  -*- C++ -*-\n \n-// Copyright (C) 2000 Free Software Foundation, Inc.\n+// Copyright (C) 2000, 2001 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -34,8 +34,8 @@\n \n #include <libio.h>\n \n-namespace std {\n-\n+namespace std \n+{\n // from fpos.h\n   typedef _IO_ssize_t \tstreamsize; // Signed integral type\n   typedef _IO_ssize_t \twstreamsize;\n@@ -103,7 +103,6 @@ namespace std {\n     static const __int_type _S_out =\t\t_IOS_OUTPUT;\n     static const __int_type _S_trunc =\t\t_IOS_TRUNC;\n   };\n-\n }\n \n #endif // _CPP_IO_LIBIO_H"}, {"sha": "a9a3fda625e04eb1fe8e79ee475531055111a6ee", "filename": "libstdc++-v3/config/c_io_stdio.h", "status": "modified", "additions": 33, "deletions": 34, "changes": 67, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c0a26060f6beada90faba59760b0e38916666835/libstdc%2B%2B-v3%2Fconfig%2Fc_io_stdio.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c0a26060f6beada90faba59760b0e38916666835/libstdc%2B%2B-v3%2Fconfig%2Fc_io_stdio.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fc_io_stdio.h?ref=c0a26060f6beada90faba59760b0e38916666835", "patch": "@@ -1,6 +1,6 @@\n // underlying io library  -*- C++ -*-\n \n-// Copyright (C) 2000 Free Software Foundation, Inc.\n+// Copyright (C) 2000, 2001 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -36,8 +36,8 @@\n #include <stddef.h>\n #include <bits/c++threads.h>\n \n-namespace std {\n-\n+namespace std \n+{\n // from fpos.h\n   typedef long  \tstreamoff;\n   typedef ptrdiff_t\tstreamsize; // Signed integral type\n@@ -59,42 +59,41 @@ namespace std {\n \n // from ios_base.h\n   struct __ios_flags\n- {\n-   typedef short __int_type;\n-\n-   static const __int_type _S_boolalpha =\t0x0001;\n-   static const __int_type _S_dec =\t\t0x0002;\n-   static const __int_type _S_fixed = \t\t0x0004;\n-   static const __int_type _S_hex =\t\t0x0008;\n-   static const __int_type _S_internal = \t0x0010;\n-   static const __int_type _S_left =   \t\t0x0020;\n-   static const __int_type _S_oct =\t\t0x0040;\n-   static const __int_type _S_right =\t\t0x0080;\n-   static const __int_type _S_scientific =\t0x0100;\n-   static const __int_type _S_showbase =       \t0x0200;\n-   static const __int_type _S_showpoint =\t0x0400;\n-   static const __int_type _S_showpos =\t\t0x0800;\n-   static const __int_type _S_skipws =\t\t0x1000;\n-   static const __int_type _S_unitbuf =\t\t0x2000;\n-   static const __int_type _S_uppercase\t=\t0x4000;\n-   static const __int_type _S_adjustfield =\t0x0020 | 0x0080 | 0x0010;\n-   static const __int_type _S_basefield =\t0x0002 | 0x0040 | 0x0008;\n-   static const __int_type _S_floatfield =\t0x0100 | 0x0004;\n+  {\n+    typedef short __int_type;\n+\n+    static const __int_type _S_boolalpha =\t0x0001;\n+    static const __int_type _S_dec =\t\t0x0002;\n+    static const __int_type _S_fixed = \t\t0x0004;\n+    static const __int_type _S_hex =\t\t0x0008;\n+    static const __int_type _S_internal = \t0x0010;\n+    static const __int_type _S_left =   \t0x0020;\n+    static const __int_type _S_oct =\t\t0x0040;\n+    static const __int_type _S_right =\t\t0x0080;\n+    static const __int_type _S_scientific =\t0x0100;\n+    static const __int_type _S_showbase =       0x0200;\n+    static const __int_type _S_showpoint =\t0x0400;\n+    static const __int_type _S_showpos =\t0x0800;\n+    static const __int_type _S_skipws =\t\t0x1000;\n+    static const __int_type _S_unitbuf =\t0x2000;\n+    static const __int_type _S_uppercase =\t0x4000;\n+    static const __int_type _S_adjustfield =\t0x0020 | 0x0080 | 0x0010;\n+    static const __int_type _S_basefield =\t0x0002 | 0x0040 | 0x0008;\n+    static const __int_type _S_floatfield =\t0x0100 | 0x0004;\n \n     // 27.4.2.1.3  Type ios_base::iostate\n-   static const __int_type _S_badbit =\t\t0x01;\n-   static const __int_type _S_eofbit =\t\t0x02;\n-   static const __int_type _S_failbit =\t\t0x04;\n+    static const __int_type _S_badbit =\t\t0x01;\n+    static const __int_type _S_eofbit =\t\t0x02;\n+    static const __int_type _S_failbit =       \t0x04;\n \n     // 27.4.2.1.4  Type openmode\n-   static const __int_type _S_app =\t\t0x01;\n-   static const __int_type _S_ate =\t\t0x02;\n-   static const __int_type _S_bin =\t\t0x04;\n-   static const __int_type _S_in =\t\t0x08;\n-   static const __int_type _S_out =\t\t0x10;\n-   static const __int_type _S_trunc =\t\t0x20;\n+    static const __int_type _S_app =\t\t0x01;\n+    static const __int_type _S_ate =\t\t0x02;\n+    static const __int_type _S_bin =\t\t0x04;\n+    static const __int_type _S_in =\t\t0x08;\n+    static const __int_type _S_out =\t\t0x10;\n+    static const __int_type _S_trunc =\t\t0x20;\n   };\n-\n }\n \n #endif // _CPP_IO_STDIO_H"}, {"sha": "ce27a81d12915f57c53688e0fcfce0e2e23d577d", "filename": "libstdc++-v3/configure", "status": "modified", "additions": 808, "deletions": 816, "changes": 1624, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c0a26060f6beada90faba59760b0e38916666835/libstdc%2B%2B-v3%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c0a26060f6beada90faba59760b0e38916666835/libstdc%2B%2B-v3%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfigure?ref=c0a26060f6beada90faba59760b0e38916666835"}, {"sha": "6d399f0904e71a78c4b593764e1154ea4b99cb03", "filename": "libstdc++-v3/include/bits/basic_file.h", "status": "modified", "additions": 50, "deletions": 53, "changes": 103, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c0a26060f6beada90faba59760b0e38916666835/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_file.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c0a26060f6beada90faba59760b0e38916666835/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_file.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_file.h?ref=c0a26060f6beada90faba59760b0e38916666835", "patch": "@@ -1,6 +1,6 @@\n // Wrapper of C-language FILE struct -*- C++ -*-\n \n-// Copyright (C) 1999, 2000 Free Software Foundation, Inc.\n+// Copyright (C) 1999, 2000, 2001 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -39,76 +39,76 @@\n #include <bits/c++config.h>\n #include <bits/std_ios.h>\n \n-namespace std {\n-\n+namespace std \n+{\n   // Ulrich is going to make some detailed comment here, explaining\n   // all this unpleasantness, providing detailed performance analysis\n   // as to why we have to do all this lame vtable hacking instead of a\n   // sane, function-based approach. This verbage will provide a clear\n   // and detailed description of the whole object-layout,\n   // vtable-swapping, sordid history of this hack.\n   template<typename _CharT>\n-  struct __basic_file_base: public __c_file_type\n-  {\n-    virtual \n-    ~__basic_file_base() { };\n+    struct __basic_file_base: public __c_file_type\n+    {\n+      virtual \n+      ~__basic_file_base() { };\n \n-    virtual int \n-    overflow(int __c = EOF) = 0;\n+      virtual int \n+      overflow(int __c = EOF) = 0;\n \n-    virtual int \n-    underflow() = 0;\n+      virtual int \n+      underflow() = 0;\n \n-    virtual int \n-    uflow() = 0;\n+      virtual int \n+      uflow() = 0;\n \n-    virtual int \n-    pbackfail(int __c) = 0;\n+      virtual int \n+      pbackfail(int __c) = 0;\n \n-    virtual streamsize \n-    xsputn(const _CharT* __s, streamsize __n) = 0;\n+      virtual streamsize \n+      xsputn(const _CharT* __s, streamsize __n) = 0;\n \n-    virtual streamsize \n-    xsgetn(_CharT* __s, streamsize __n) = 0;\n+      virtual streamsize \n+      xsgetn(_CharT* __s, streamsize __n) = 0;\n \n-    virtual streamoff\n-    seekoff(streamoff __off, ios_base::seekdir __way,\n-\t    ios_base::openmode __mode = ios_base::in | ios_base::out) = 0;\n+      virtual streamoff\n+      seekoff(streamoff __off, ios_base::seekdir __way,\n+\t      ios_base::openmode __mode = ios_base::in | ios_base::out) = 0;\n \n-    virtual streamoff\n-    seekpos(streamoff __pos, \n-\t    ios_base::openmode __mode = ios_base::in | ios_base::out) = 0;\n+      virtual streamoff\n+      seekpos(streamoff __pos, \n+\t      ios_base::openmode __mode = ios_base::in | ios_base::out) = 0;\n \n-    virtual streambuf* \n-    setbuf(_CharT* __b, int __len) = 0;\n+      virtual streambuf* \n+      setbuf(_CharT* __b, int __len) = 0;\n \n-    virtual int \n-    sync() = 0;\n+      virtual int \n+      sync() = 0;\n \n-    virtual int \n-    doallocate() = 0;\n+      virtual int \n+      doallocate() = 0;\n \n-    virtual streamsize \n-    sys_read(_CharT* __s, streamsize __n) = 0;\n+      virtual streamsize \n+      sys_read(_CharT* __s, streamsize __n) = 0;\n \n-    virtual streamsize \n-    sys_write(const _CharT* __s, streamsize __n) = 0;\n+      virtual streamsize \n+      sys_write(const _CharT* __s, streamsize __n) = 0;\n \n-    virtual streamoff\n-    sys_seek(streamoff __off, ios_base::seekdir __way) = 0;\n+      virtual streamoff\n+      sys_seek(streamoff __off, ios_base::seekdir __way) = 0;\n \n-    virtual int \n-    sys_close() = 0;\n+      virtual int \n+      sys_close() = 0;\n \n-    virtual int \n-    sys_stat(void* __v) = 0;\n+      virtual int \n+      sys_stat(void* __v) = 0;\n \n-    virtual int \n-    showmanyc() = 0;\n+      virtual int \n+      showmanyc() = 0;\n \n-    virtual void \n-    imbue(void* __v) = 0;\n-  };\n+      virtual void \n+      imbue(void* __v) = 0;\n+    };\n \n   // Some of these member functions are based on libio/filebuf.cc.\n   // Also note that the order and number of virtual functions has to precisely\n@@ -241,12 +241,9 @@ namespace std {\n     };\n } // namespace std\n \n-#endif\t/* _CPP_BASIC_FILE */\n-\n-\n-\n-\n-\n-\n+// Now include the bits that are dependant on the underlying I/O\n+// model chosen at configure time.\n+#include <bits/basic_file_model.h>\n \n+#endif\t// _CPP_BASIC_FILE\n "}, {"sha": "c93e0e0cfc45ddf4d7b6ad6f4babd830b1a5586e", "filename": "libstdc++-v3/libio/Makefile.in", "status": "modified", "additions": 5, "deletions": 12, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c0a26060f6beada90faba59760b0e38916666835/libstdc%2B%2B-v3%2Flibio%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c0a26060f6beada90faba59760b0e38916666835/libstdc%2B%2B-v3%2Flibio%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Flibio%2FMakefile.in?ref=c0a26060f6beada90faba59760b0e38916666835", "patch": "@@ -113,7 +113,7 @@ toplevel_srcdir = @toplevel_srcdir@\n AUTOMAKE_OPTIONS = 1.3 cygnus\n \n mkinstalldirs = $(SHELL) $(toplevel_srcdir)/mkinstalldirs\n-@GLIBCPP_BUILD_LIBIO_TRUE@noinst_LTLIBRARIES = @GLIBCPP_BUILD_LIBIO_TRUE@libio.la\n+@GLIBCPP_BUILD_LIBIO_TRUE@noinst_LTLIBRARIES = libio.la\n @GLIBCPP_BUILD_LIBIO_FALSE@noinst_LTLIBRARIES = \n \n # Use common includes from acinclude.m4/GLIBCPP_EXPORT_INCLUDES\n@@ -125,21 +125,14 @@ LIBSUPCXX_INCLUDES = @LIBSUPCXX_INCLUDES@\n LIBIO_INCLUDES = @LIBIO_INCLUDES@\n CSHADOW_INCLUDES = @CSHADOW_INCLUDES@\n \n-INCLUDES = \\\n-\t-nostdinc++ \\\n-\t-I$(top_builddir)/include -I$(GLIBCPP_INCLUDE_DIR) \\\n-\t$(LIBIO_INCLUDES) $(TOPLEVEL_INCLUDES)\t\n+INCLUDES =  \t-nostdinc++ \t-I$(top_builddir)/include -I$(GLIBCPP_INCLUDE_DIR) \t$(LIBIO_INCLUDES) $(TOPLEVEL_INCLUDES)\t\n \n \n-libio_headers = \\\n-        libio.h libioP.h iolibio.h\n+libio_headers =          libio.h libioP.h iolibio.h\n \n-@GLIBCPP_NEED_LIBIO_TRUE@LIBIO_SRCS = @GLIBCPP_NEED_LIBIO_TRUE@\\\n-@GLIBCPP_NEED_LIBIO_TRUE@\tfiledoalloc.c genops.c fileops.c stdfiles.c c_codecvt.c \\\n-@GLIBCPP_NEED_LIBIO_TRUE@\tiofclose.c iofopen.c \n+@GLIBCPP_NEED_LIBIO_TRUE@LIBIO_SRCS = \tfiledoalloc.c genops.c fileops.c stdfiles.c c_codecvt.c \tiofclose.c iofopen.c \n @GLIBCPP_NEED_LIBIO_FALSE@LIBIO_SRCS = \n-@GLIBCPP_NEED_WLIBIO_TRUE@LIBIO_WSRCS = @GLIBCPP_NEED_WLIBIO_TRUE@\\\n-@GLIBCPP_NEED_WLIBIO_TRUE@\twfiledoalloc.c wfileops.c wgenops.c iofwide.c\n+@GLIBCPP_NEED_WLIBIO_TRUE@LIBIO_WSRCS = \twfiledoalloc.c wfileops.c wgenops.c iofwide.c\n @GLIBCPP_NEED_WLIBIO_FALSE@LIBIO_WSRCS = \n \n EXTRA_DIST = iostreamP.h"}, {"sha": "1d38e8ed29738e1341ccd2f67cf35fdc507d8973", "filename": "libstdc++-v3/libmath/Makefile.in", "status": "modified", "additions": 5, "deletions": 13, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c0a26060f6beada90faba59760b0e38916666835/libstdc%2B%2B-v3%2Flibmath%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c0a26060f6beada90faba59760b0e38916666835/libstdc%2B%2B-v3%2Flibmath%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Flibmath%2FMakefile.in?ref=c0a26060f6beada90faba59760b0e38916666835", "patch": "@@ -116,24 +116,18 @@ mkinstalldirs = $(SHELL) $(toplevel_srcdir)/mkinstalldirs\n \n noinst_LTLIBRARIES = libmath.la\n \n-EXTRA_LONG_DOUBLE_yes = \\\n-\thypotl.c signbitl.c\n+EXTRA_LONG_DOUBLE_yes =  \thypotl.c signbitl.c\n \n \n-EXTRA_DIST = \\\n-\thypot.c hypotf.c atan2f.c expf.c \\\n-\t$(EXTRA_LONG_DOUBLE_yes) \n+EXTRA_DIST =  \thypot.c hypotf.c atan2f.c expf.c \t$(EXTRA_LONG_DOUBLE_yes) \n \n \n-libmath_la_LIBADD = \\\n-\t@LIBMATHOBJS@ \\\n-\t$(EXTRA_LONG_DOUBLE_$(USE_COMPLEX_LONG_DOUBLE)) \n+libmath_la_LIBADD =  \t@LIBMATHOBJS@ \t$(EXTRA_LONG_DOUBLE_$(USE_COMPLEX_LONG_DOUBLE)) \n \n \n libmath_la_DEPENDENCIES = $(libmath_la_LIBADD)\n \n-libmath_la_SOURCES = \\\n-\tsignbit.c signbitf.c\n+libmath_la_SOURCES =  \tsignbit.c signbitf.c\n \n \n LINK = $(LIBTOOL) --mode=link \"$(CCLD)\" $(AM_CFLAGS) $(CFLAGS) $(LDFLAGS) -o $@\n@@ -147,9 +141,7 @@ LIBSUPCXX_INCLUDES = @LIBSUPCXX_INCLUDES@\n LIBIO_INCLUDES = @LIBIO_INCLUDES@\n CSHADOW_INCLUDES = @CSHADOW_INCLUDES@\n \n-INCLUDES = \\\n-\t-I$(GLIBCPP_INCLUDE_DIR) -I$(top_builddir)/include  \\\n-\t$(TOPLEVEL_INCLUDES) \n+INCLUDES =  \t-I$(GLIBCPP_INCLUDE_DIR) -I$(top_builddir)/include  \t$(TOPLEVEL_INCLUDES) \n \n CONFIG_HEADER = ../config.h\n CONFIG_CLEAN_FILES = "}, {"sha": "d131afe05c13e372dd71336ae4568725e03c4b56", "filename": "libstdc++-v3/libsupc++/Makefile.in", "status": "modified", "additions": 8, "deletions": 36, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c0a26060f6beada90faba59760b0e38916666835/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c0a26060f6beada90faba59760b0e38916666835/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2FMakefile.in?ref=c0a26060f6beada90faba59760b0e38916666835", "patch": "@@ -130,13 +130,11 @@ OPTIMIZE_CXXFLAGS = @OPTIMIZE_CXXFLAGS@\n # These bits are all figured out from configure. Look in acinclude.m4\n # or configure.in to see how they are set. See GLIBCPP_EXPORT_FLAGS\n # NB: DEBUGFLAGS have to be at the end so that -O2 can be overridden.\n-CONFIG_CXXFLAGS = \\\n-\t@EXTRA_CXX_FLAGS@ @SECTION_FLAGS@ @CSHADOW_FLAGS@ @DEBUG_FLAGS@ \n+CONFIG_CXXFLAGS =  \t@EXTRA_CXX_FLAGS@ @SECTION_FLAGS@ @CSHADOW_FLAGS@ @DEBUG_FLAGS@ \n \n \n # Warning flags to use.\n-WARN_CXXFLAGS = \\\n-\t@WARN_FLAGS@ $(WERROR) -fdiagnostics-show-location=once\n+WARN_CXXFLAGS =  \t@WARN_FLAGS@ $(WERROR) -fdiagnostics-show-location=once\n \n \n # Use common includes from acinclude.m4/GLIBCPP_EXPORT_INCLUDES\n@@ -148,31 +146,13 @@ LIBSUPCXX_INCLUDES = @LIBSUPCXX_INCLUDES@\n LIBIO_INCLUDES = @LIBIO_INCLUDES@\n TOPLEVEL_INCLUDES = @TOPLEVEL_INCLUDES@\n \n-INCLUDES = \\\n-\t-I$(toplevel_srcdir)/gcc -I$(toplevel_srcdir)/include \\\n-\t-I$(GLIBCPP_INCLUDE_DIR) $(CSTD_INCLUDES) -I$(top_builddir)/include \\\n-\t $(LIBSUPCXX_INCLUDES)\n+INCLUDES =  \t-I$(toplevel_srcdir)/gcc -I$(toplevel_srcdir)/include \t-I$(GLIBCPP_INCLUDE_DIR) $(CSTD_INCLUDES) -I$(top_builddir)/include \t $(LIBSUPCXX_INCLUDES)\n \n \n-headers = \\\n-\texception new typeinfo cxxabi.h exception_defines.h \n+headers =  \texception new typeinfo cxxabi.h exception_defines.h \n \n \n-sources = \\\n-\tdel_op.cc \\\n-\tdel_opnt.cc \\\n-\tdel_opv.cc \\\n-\tdel_opvnt.cc \\\n-\texception_support.cc \\\n-\tnew_handler.cc \\\n-\tnew_op.cc \\\n-\tnew_opnt.cc \\\n-\tnew_opv.cc \\\n-\tnew_opvnt.cc \\\n-\tpure.cc \\\n-\ttinfo.cc \\\n-\ttinfo2.cc \\\n-\tvec.cc\n+sources =  \tdel_op.cc \tdel_opnt.cc \tdel_opv.cc \tdel_opvnt.cc \texception_support.cc \tnew_handler.cc \tnew_op.cc \tnew_opnt.cc \tnew_opv.cc \tnew_opvnt.cc \tpure.cc \ttinfo.cc \ttinfo2.cc \tvec.cc\n \n \n libsupc___la_SOURCES = $(sources)\n@@ -190,12 +170,7 @@ LIBSUPCXX_CXXFLAGS = -prefer-pic\n # set this option because CONFIG_CXXFLAGS has to be after\n # OPTIMIZE_CXXFLAGS on the compile line so that -O2 can be overridden\n # as the occasion call for it. (ie, --enable-debug)\n-AM_CXXFLAGS = \\\n-\t-fno-implicit-templates \\\n-\t$(LIBSUPCXX_CXXFLAGS) \\\n-\t$(WARN_CXXFLAGS) \\\n-\t$(OPTIMIZE_CXXFLAGS) \\\n-\t$(CONFIG_CXXFLAGS) \n+AM_CXXFLAGS =  \t-fno-implicit-templates \t$(LIBSUPCXX_CXXFLAGS) \t$(WARN_CXXFLAGS) \t$(OPTIMIZE_CXXFLAGS) \t$(CONFIG_CXXFLAGS) \n \n \n # libstdc++ libtool notes\n@@ -219,17 +194,14 @@ AM_CXXFLAGS = \\\n #\n # We have to put --tag disable-shared after --tag CXX lest things\n # CXX undo the affect of disable-shared.\n-LTCXXCOMPILE = $(LIBTOOL) --tag CXX --tag disable-shared \\\n-               --mode=compile $(CXX) $(INCLUDES) \\\n-\t       $(AM_CPPFLAGS) $(CPPFLAGS) $(CXXFLAGS) $(AM_CXXFLAGS) \n+LTCXXCOMPILE = $(LIBTOOL) --tag CXX --tag disable-shared                --mode=compile $(CXX) $(INCLUDES) \t       $(AM_CPPFLAGS) $(CPPFLAGS) $(CXXFLAGS) $(AM_CXXFLAGS) \n \n \n # 3) We have a problem when building the shared libstdc++ object if\n # the rules automake generates would be used.  We cannot allow CXX to\n # be used in libtool since this would add -lstdc++ to the link line\n # which of course is problematic at this point.\n-CXXLINK = $(LIBTOOL) --mode=link \"$(CC)\" \\\n-\t  @OPT_LDFLAGS@ @SECTION_LDFLAGS@ $(AM_CXXFLAGS) $(LDFLAGS) -o $@\n+CXXLINK = $(LIBTOOL) --mode=link \"$(CC)\" \t  @OPT_LDFLAGS@ @SECTION_LDFLAGS@ $(AM_CXXFLAGS) $(LDFLAGS) -o $@\n \n CONFIG_HEADER = ../config.h\n CONFIG_CLEAN_FILES = "}, {"sha": "33a70f31ee05e32643a8d1106b86ff5a891b2692", "filename": "libstdc++-v3/src/Makefile.am", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c0a26060f6beada90faba59760b0e38916666835/libstdc%2B%2B-v3%2Fsrc%2FMakefile.am", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c0a26060f6beada90faba59760b0e38916666835/libstdc%2B%2B-v3%2Fsrc%2FMakefile.am", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2FMakefile.am?ref=c0a26060f6beada90faba59760b0e38916666835", "patch": "@@ -21,7 +21,7 @@\n ## Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n ## USA.\n \n-## $Id: Makefile.am,v 1.73 2001/02/20 20:20:48 pme Exp $\n+## $Id: Makefile.am,v 1.74 2001/02/26 21:48:01 pme Exp $\n \n AUTOMAKE_OPTIONS = 1.3 gnits\n MAINT_CHARSET = latin1\n@@ -160,14 +160,15 @@ endif\n build_headers = \\\n \tbits/std_limits.h \\\n \tbits/c++config.h bits/c++io.h bits/c++locale.h bits/c++threads.h \\\n+\tbits/basic_file_model.h \\\n \tbits/atomicity.h bits/os_defines.h \\\n \tbits/ctype_base.h bits/ctype_noninline.h bits/ctype_inline.h \n \n sources = \\\n \tlimitsMEMBERS.cc \\\n \tstdexcept.cc functexcept.cc bitset.cc \\\n         globals.cc \\\n-\tc++io.cc ios.cc complex_io.cc strstream.cc \\\n+\tbasic_file.cc ios.cc complex_io.cc strstream.cc \\\n \tc++locale.cc locale.cc localename.cc codecvt.cc \\\n \tlocale-inst.cc stl-inst.cc misc-inst.cc valarray-inst.cc string-inst.cc\n "}, {"sha": "f60fd767a0d9fe13890a016cf598562ca8837114", "filename": "libstdc++-v3/src/Makefile.in", "status": "modified", "additions": 29, "deletions": 127, "changes": 156, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c0a26060f6beada90faba59760b0e38916666835/libstdc%2B%2B-v3%2Fsrc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c0a26060f6beada90faba59760b0e38916666835/libstdc%2B%2B-v3%2Fsrc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2FMakefile.in?ref=c0a26060f6beada90faba59760b0e38916666835", "patch": "@@ -124,13 +124,11 @@ OPTIMIZE_CXXFLAGS = @OPTIMIZE_CXXFLAGS@\n # These bits are all figured out from configure. Look in acinclude.m4\n # or configure.in to see how they are set. See GLIBCPP_EXPORT_FLAGS\n # NB: DEBUGFLAGS have to be at the end so that -O2 can be overridden.\n-CONFIG_CXXFLAGS = \\\n-\t@EXTRA_CXX_FLAGS@ @SECTION_FLAGS@ @CSHADOW_FLAGS@ @DEBUG_FLAGS@ \n+CONFIG_CXXFLAGS =  \t@EXTRA_CXX_FLAGS@ @SECTION_FLAGS@ @CSHADOW_FLAGS@ @DEBUG_FLAGS@ \n \n \n # Warning flags to use.\n-WARN_CXXFLAGS = \\\n-\t@WARN_FLAGS@ $(WERROR) -fdiagnostics-show-location=once\n+WARN_CXXFLAGS =  \t@WARN_FLAGS@ $(WERROR) -fdiagnostics-show-location=once\n \n \n # Use common includes from acinclude.m4/GLIBCPP_EXPORT_INCLUDES\n@@ -142,121 +140,35 @@ LIBSUPCXX_INCLUDES = @LIBSUPCXX_INCLUDES@\n LIBIO_INCLUDES = @LIBIO_INCLUDES@\n TOPLEVEL_INCLUDES = @TOPLEVEL_INCLUDES@\n \n-INCLUDES = \\\n-\t-nostdinc++ \\\n-\t-I$(GLIBCPP_INCLUDE_DIR) $(CSTD_INCLUDES) -I$(top_builddir)/include \\\n-\t$(LIBSUPCXX_INCLUDES) $(LIBIO_INCLUDES) $(LIBMATH_INCLUDES) \\\n-\t$(TOPLEVEL_INCLUDES)\t\n-\n-\n-base_headers = \\\n-\tbits/cpp_type_traits.h bits/char_traits.h bits/codecvt.h \\\n-\tbits/stringfwd.h bits/std_string.h bits/basic_string.h \\\n-\tbits/basic_string.tcc \\\n-\tbits/generic_shadow.h bits/std_utility.h \\\n-\tbits/std_complex.h \\\n-\tbits/valarray_array.h bits/valarray_array.tcc bits/valarray_meta.h \\\n-\tbits/std_valarray.h bits/mask_array.h bits/slice.h bits/slice_array.h \\\n-\tbits/gslice.h bits/gslice_array.h bits/indirect_array.h \\\n-\tbits/std_fstream.h bits/std_iomanip.h \\\n-\tbits/ios_base.h bits/fpos.h bits/basic_ios.h bits/basic_ios.tcc \\\n-\tbits/std_ios.h bits/std_iosfwd.h bits/std_iostream.h \\\n-\tbits/std_istream.h bits/istream.tcc bits/std_locale.h \\\n-\tbits/fstream.tcc bits/ostream.tcc bits/sbuf_iter.h bits/sstream.tcc \\\n-\tbits/std_ostream.h bits/std_sstream.h bits/std_streambuf.h \\\n-\tbits/streambuf.tcc bits/basic_file.h \\\n-\tbits/locale_facets.h bits/locale_facets.tcc bits/localefwd.h \\\n-\tbits/stl_pthread_alloc.h bits/pthread_allocimpl.h \\\n-\tbits/stl_threads.h bits/stl_iterator_base.h \\\n-\tbits/std_bitset.h bits/std_deque.h bits/std_functional.h \\\n-\tbits/std_iterator.h bits/std_list.h \\\n-\tbits/std_map.h bits/std_memory.h bits/std_numeric.h \\\n-\tbits/std_queue.h bits/std_set.h bits/std_stack.h \\\n-\tbits/std_stdexcept.h bits/functexcept.h bits/std_vector.h \\\n-\tbits/stl_algo.h bits/stl_algobase.h bits/stl_alloc.h \\\n-\tbits/stl_deque.h bits/stl_function.h \\\n-\tbits/stl_heap.h bits/stl_iterator.h bits/stl_list.h bits/stl_map.h \\\n-\tbits/stl_multimap.h bits/stl_multiset.h bits/stl_numeric.h \\\n-\tbits/stl_pair.h bits/stl_queue.h bits/stl_raw_storage_iter.h \\\n-\tbits/stl_relops.h bits/stl_set.h \\\n-\tbits/stl_stack.h bits/stl_tempbuf.h \\\n-\tbits/stl_tree.h bits/stl_uninitialized.h bits/stl_vector.h \\\n-\tbits/type_traits.h bits/std_algorithm.h \\\n-\tbits/concept_checks.h bits/container_concepts.h \\\n-\tbits/sequence_concepts.h bits/stl_construct.h\n-\n-\n-backward_headers = \\\n-\tbackward/complex.h backward/iomanip.h backward/istream.h \\\n-\tbackward/ostream.h backward/stream.h backward/streambuf.h \\\n-\tbackward/algo.h backward/algobase.h backward/alloc.h \\\n-\tbackward/bvector.h backward/defalloc.h backward/deque.h \\\n-\tbackward/function.h backward/hash_map.h backward/hash_set.h \\\n-\tbackward/hashtable.h backward/heap.h backward/iterator.h \\\n-\tbackward/list.h backward/map.h backward/multimap.h backward/new.h \\\n-\tbackward/multiset.h backward/pair.h backward/iostream.h \\\n-\tbackward/rope.h backward/set.h backward/slist.h backward/stack.h \\\n-\tbackward/tempbuf.h backward/tree.h backward/vector.h \\\n-\tbackward/fstream.h backward/strstream.h backward/strstream\n-\n-\n-ext_headers = \\\n-\text/ropeimpl.h ext/stl_rope.h \\\n-\text/stl_bvector.h ext/stl_hashtable.h ext/stl_hash_fun.h \\\n-\text/hash_map ext/hash_set ext/rope ext/slist \\\n-\text/tree ext/bvector \n-\n-\n-c_base_headers = \\\n-\tbits/std_cassert.h bits/std_cctype.h bits/std_cerrno.h \\\n-\tbits/std_cfloat.h bits/std_climits.h bits/std_clocale.h \\\n-\tbits/std_cmath.h bits/std_csetjmp.h bits/std_csignal.h \\\n-\tbits/std_cstdarg.h bits/std_cstddef.h bits/std_cstdio.h \\\n-\tbits/std_cstdlib.h bits/std_cstring.h bits/std_ctime.h \\\n-\tbits/std_cwchar.h bits/std_cwctype.h bits/cmath.tcc\n-\n-@GLIBCPP_USE_CSHADOW_TRUE@c_shadow_headers = @GLIBCPP_USE_CSHADOW_TRUE@\\\n-@GLIBCPP_USE_CSHADOW_TRUE@\tassert.h ctype.h errno.h float.h limits.h locale.h math.h setjmp.h \\\n-@GLIBCPP_USE_CSHADOW_TRUE@\tsignal.h stdarg.h stddef.h stdio.h stdlib.h string.h time.h wchar.h \\\n-@GLIBCPP_USE_CSHADOW_TRUE@\twctype.h fcntl.h libio.h iolibio.h libioP.h pthread.h iconv.h \\\n-@GLIBCPP_USE_CSHADOW_TRUE@\tfeatures.h langinfo.h \\\n-@GLIBCPP_USE_CSHADOW_TRUE@\tbits/wrap_libio.h bits/wrap_iolibio.h bits/wrap_libioP.h \\\n-@GLIBCPP_USE_CSHADOW_TRUE@\tbits/wrap_iconv.h bits/wrap_fcntl.h bits/wrap_pthread.h \\\n-@GLIBCPP_USE_CSHADOW_TRUE@\tbits/wrap_features.h bits/wrap_langinfo.h \\\n-@GLIBCPP_USE_CSHADOW_TRUE@\tsys/cdefs.h \n+INCLUDES =  \t-nostdinc++ \t-I$(GLIBCPP_INCLUDE_DIR) $(CSTD_INCLUDES) -I$(top_builddir)/include \t$(LIBSUPCXX_INCLUDES) $(LIBIO_INCLUDES) $(LIBMATH_INCLUDES) \t$(TOPLEVEL_INCLUDES)\t\n+\n+\n+base_headers =  \tbits/cpp_type_traits.h bits/char_traits.h bits/codecvt.h \tbits/stringfwd.h bits/std_string.h bits/basic_string.h \tbits/basic_string.tcc \tbits/generic_shadow.h bits/std_utility.h \tbits/std_complex.h \tbits/valarray_array.h bits/valarray_array.tcc bits/valarray_meta.h \tbits/std_valarray.h bits/mask_array.h bits/slice.h bits/slice_array.h \tbits/gslice.h bits/gslice_array.h bits/indirect_array.h \tbits/std_fstream.h bits/std_iomanip.h \tbits/ios_base.h bits/fpos.h bits/basic_ios.h bits/basic_ios.tcc \tbits/std_ios.h bits/std_iosfwd.h bits/std_iostream.h \tbits/std_istream.h bits/istream.tcc bits/std_locale.h \tbits/fstream.tcc bits/ostream.tcc bits/sbuf_iter.h bits/sstream.tcc \tbits/std_ostream.h bits/std_sstream.h bits/std_streambuf.h \tbits/streambuf.tcc bits/basic_file.h \tbits/locale_facets.h bits/locale_facets.tcc bits/localefwd.h \tbits/stl_pthread_alloc.h bits/pthread_allocimpl.h \tbits/stl_threads.h bits/stl_iterator_base.h \tbits/std_bitset.h bits/std_deque.h bits/std_functional.h \tbits/std_iterator.h bits/std_list.h \tbits/std_map.h bits/std_memory.h bits/std_numeric.h \tbits/std_queue.h bits/std_set.h bits/std_stack.h \tbits/std_stdexcept.h bits/functexcept.h bits/std_vector.h \tbits/stl_algo.h bits/stl_algobase.h bits/stl_alloc.h \tbits/stl_deque.h bits/stl_function.h \tbits/stl_heap.h bits/stl_iterator.h bits/stl_list.h bits/stl_map.h \tbits/stl_multimap.h bits/stl_multiset.h bits/stl_numeric.h \tbits/stl_pair.h bits/stl_queue.h bits/stl_raw_storage_iter.h \tbits/stl_relops.h bits/stl_set.h \tbits/stl_stack.h bits/stl_tempbuf.h \tbits/stl_tree.h bits/stl_uninitialized.h bits/stl_vector.h \tbits/type_traits.h bits/std_algorithm.h \tbits/concept_checks.h bits/container_concepts.h \tbits/sequence_concepts.h bits/stl_construct.h\n+\n+\n+backward_headers =  \tbackward/complex.h backward/iomanip.h backward/istream.h \tbackward/ostream.h backward/stream.h backward/streambuf.h \tbackward/algo.h backward/algobase.h backward/alloc.h \tbackward/bvector.h backward/defalloc.h backward/deque.h \tbackward/function.h backward/hash_map.h backward/hash_set.h \tbackward/hashtable.h backward/heap.h backward/iterator.h \tbackward/list.h backward/map.h backward/multimap.h backward/new.h \tbackward/multiset.h backward/pair.h backward/iostream.h \tbackward/rope.h backward/set.h backward/slist.h backward/stack.h \tbackward/tempbuf.h backward/tree.h backward/vector.h \tbackward/fstream.h backward/strstream.h backward/strstream\n+\n+\n+ext_headers =  \text/ropeimpl.h ext/stl_rope.h \text/stl_bvector.h ext/stl_hashtable.h ext/stl_hash_fun.h \text/hash_map ext/hash_set ext/rope ext/slist \text/tree ext/bvector \n+\n+\n+c_base_headers =  \tbits/std_cassert.h bits/std_cctype.h bits/std_cerrno.h \tbits/std_cfloat.h bits/std_climits.h bits/std_clocale.h \tbits/std_cmath.h bits/std_csetjmp.h bits/std_csignal.h \tbits/std_cstdarg.h bits/std_cstddef.h bits/std_cstdio.h \tbits/std_cstdlib.h bits/std_cstring.h bits/std_ctime.h \tbits/std_cwchar.h bits/std_cwctype.h bits/cmath.tcc\n+\n+@GLIBCPP_USE_CSHADOW_TRUE@c_shadow_headers = \tassert.h ctype.h errno.h float.h limits.h locale.h math.h setjmp.h \tsignal.h stdarg.h stddef.h stdio.h stdlib.h string.h time.h wchar.h \twctype.h fcntl.h libio.h iolibio.h libioP.h pthread.h iconv.h \tfeatures.h langinfo.h \tbits/wrap_libio.h bits/wrap_iolibio.h bits/wrap_libioP.h \tbits/wrap_iconv.h bits/wrap_fcntl.h bits/wrap_pthread.h \tbits/wrap_features.h bits/wrap_langinfo.h \tsys/cdefs.h \n @GLIBCPP_USE_CSHADOW_FALSE@c_shadow_headers = \n \n-std_headers = \\\n-\talgorithm bitset complex deque fstream functional \\\n-\tiomanip ios iosfwd iostream istream iterator limits list locale \\\n-\tmap memory numeric ostream queue set sstream stack stdexcept \\\n-\tstreambuf string utility valarray vector \\\n-\tcassert cctype cerrno cfloat climits clocale ciso646 \\\n-\tcmath csetjmp csignal cstdarg cstddef cstdio cstdlib \\\n-\tcstring ctime cwchar cwctype\n-\n-@GLIBCPP_NEED_LIBIO_TRUE@libio_headers = @GLIBCPP_NEED_LIBIO_TRUE@\\\n-@GLIBCPP_NEED_LIBIO_TRUE@\t$(top_srcdir)/libio/_G_config.h $(top_srcdir)/libio/libio.h\n+std_headers =  \talgorithm bitset complex deque fstream functional \tiomanip ios iosfwd iostream istream iterator limits list locale \tmap memory numeric ostream queue set sstream stack stdexcept \tstreambuf string utility valarray vector \tcassert cctype cerrno cfloat climits clocale ciso646 \tcmath csetjmp csignal cstdarg cstddef cstdio cstdlib \tcstring ctime cwchar cwctype\n+\n+@GLIBCPP_NEED_LIBIO_TRUE@libio_headers = \t$(top_srcdir)/libio/_G_config.h $(top_srcdir)/libio/libio.h\n @GLIBCPP_NEED_LIBIO_FALSE@libio_headers = \n \n-build_headers = \\\n-\tbits/std_limits.h \\\n-\tbits/c++config.h bits/c++io.h bits/c++locale.h bits/c++threads.h \\\n-\tbits/atomicity.h bits/os_defines.h \\\n-\tbits/ctype_base.h bits/ctype_noninline.h bits/ctype_inline.h \n+build_headers =  \tbits/std_limits.h \tbits/c++config.h bits/c++io.h bits/c++locale.h bits/c++threads.h \tbits/basic_file_model.h \tbits/atomicity.h bits/os_defines.h \tbits/ctype_base.h bits/ctype_noninline.h bits/ctype_inline.h \n \n \n-sources = \\\n-\tlimitsMEMBERS.cc \\\n-\tstdexcept.cc functexcept.cc bitset.cc \\\n-        globals.cc \\\n-\tc++io.cc ios.cc complex_io.cc strstream.cc \\\n-\tc++locale.cc locale.cc localename.cc codecvt.cc \\\n-\tlocale-inst.cc stl-inst.cc misc-inst.cc valarray-inst.cc string-inst.cc\n+sources =  \tlimitsMEMBERS.cc \tstdexcept.cc functexcept.cc bitset.cc         globals.cc \tbasic_file.cc ios.cc complex_io.cc strstream.cc \tc++locale.cc locale.cc localename.cc codecvt.cc \tlocale-inst.cc stl-inst.cc misc-inst.cc valarray-inst.cc string-inst.cc\n \n \n-wstring_sources = \\\n-\twstring-inst.cc\n+wstring_sources =  \twstring-inst.cc\n \n VPATH =  $(top_srcdir) $(top_srcdir)/src $(GLIBCPP_INCLUDE_DIR)  $(GLIBCPP_INCLUDE_DIR)/std $(C_INCLUDE_DIR)\n \n@@ -267,16 +179,13 @@ libstdc___la_SOURCES = $(sources)\n \n libinst_wstring_la_SOURCES = $(wstring_sources)\n \n-libstdc___la_LIBADD = \\\n-\t../libmath/libmath.la @libio_la@ \\\n-\t../libsupc++/libsupc++convenience.la \\\n-\t@libinst_wstring_la@\n+libstdc___la_LIBADD =  \t../libmath/libmath.la @libio_la@ \t../libsupc++/libsupc++convenience.la \t@libinst_wstring_la@\n \n \n libstdc___la_LDFLAGS = -version-info 3:0:0 -lm\n \n libstdc___la_DEPENDENCIES = $(libstdc___la_LIBADD)\n-@GLIBCPP_USE_CSHADOW_TRUE@CSHADOW_H = @GLIBCPP_USE_CSHADOW_TRUE@$(top_builddir)/stamp-cshadow\n+@GLIBCPP_USE_CSHADOW_TRUE@CSHADOW_H = $(top_builddir)/stamp-cshadow\n @GLIBCPP_USE_CSHADOW_FALSE@CSHADOW_H = \n \n # Check for various configure bits that change where the headers get installed.\n@@ -295,12 +204,7 @@ c_incdir = @C_INCLUDE_DIR@\n # set this option because CONFIG_CXXFLAGS has to be after\n # OPTIMIZE_CXXFLAGS on the compile line so that -O2 can be overridden\n # as the occasion call for it. (ie, --enable-debug)\n-AM_CXXFLAGS = \\\n-\t-fno-implicit-templates \\\n-\t$(LIBSUPCXX_CXXFLAGS) \\\n-\t$(WARN_CXXFLAGS) \\\n-\t$(OPTIMIZE_CXXFLAGS) \\\n-\t$(CONFIG_CXXFLAGS) \n+AM_CXXFLAGS =  \t-fno-implicit-templates \t$(LIBSUPCXX_CXXFLAGS) \t$(WARN_CXXFLAGS) \t$(OPTIMIZE_CXXFLAGS) \t$(CONFIG_CXXFLAGS) \n \n \n # libstdc++ libtool notes\n@@ -321,16 +225,14 @@ AM_CXXFLAGS = \\\n # correct solution is to add `--tag CXX' to LTCXXCOMPILE and maybe\n # CXXLINK, just after $(LIBTOOL), so that libtool doesn't have to\n # attempt to infer which configuration to use\n-LTCXXCOMPILE = $(LIBTOOL) --tag CXX --mode=compile $(CXX) $(INCLUDES) \\\n-\t       $(AM_CPPFLAGS) $(CPPFLAGS) $(CXXFLAGS) $(AM_CXXFLAGS) \n+LTCXXCOMPILE = $(LIBTOOL) --tag CXX --mode=compile $(CXX) $(INCLUDES) \t       $(AM_CPPFLAGS) $(CPPFLAGS) $(CXXFLAGS) $(AM_CXXFLAGS) \n \n \n # 3) We have a problem when building the shared libstdc++ object if\n # the rules automake generates would be used.  We cannot allow CXX to\n # be used in libtool since this would add -lstdc++ to the link line\n # which of course is problematic at this point.\n-CXXLINK = $(LIBTOOL) --mode=link \"$(CC)\" \\\n-\t  @OPT_LDFLAGS@ @SECTION_LDFLAGS@ $(AM_CXXFLAGS) $(LDFLAGS) -o $@\n+CXXLINK = $(LIBTOOL) --mode=link \"$(CC)\" \t  @OPT_LDFLAGS@ @SECTION_LDFLAGS@ $(AM_CXXFLAGS) $(LDFLAGS) -o $@\n \n CONFIG_HEADER = ../config.h\n CONFIG_CLEAN_FILES = \n@@ -349,7 +251,7 @@ libinst_wstring_la_LDFLAGS =\n libinst_wstring_la_LIBADD = \n libinst_wstring_la_OBJECTS =  wstring-inst.lo\n libstdc___la_OBJECTS =  limitsMEMBERS.lo stdexcept.lo functexcept.lo \\\n-bitset.lo globals.lo c++io.lo ios.lo complex_io.lo strstream.lo \\\n+bitset.lo globals.lo basic_file.lo ios.lo complex_io.lo strstream.lo \\\n c++locale.lo locale.lo localename.lo codecvt.lo locale-inst.lo \\\n stl-inst.lo misc-inst.lo valarray-inst.lo string-inst.lo\n CXXFLAGS = @CXXFLAGS@"}, {"sha": "7af086e5e71cfade713e4a528f00ad649acee98a", "filename": "libstdc++-v3/testsuite/27_io/filebuf.cc", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c0a26060f6beada90faba59760b0e38916666835/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Ffilebuf.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c0a26060f6beada90faba59760b0e38916666835/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Ffilebuf.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Ffilebuf.cc?ref=c0a26060f6beada90faba59760b0e38916666835", "patch": "@@ -524,6 +524,12 @@ bool test04()\n   return test;\n }\n \n+// test05\n+// libstdc++/1886\n+// should be able to instantiate basic_filebuf for non-standard types.\n+template class std::basic_filebuf<short, std::char_traits<short> >;\n+\n+\n int main() \n {\n   test00();"}]}