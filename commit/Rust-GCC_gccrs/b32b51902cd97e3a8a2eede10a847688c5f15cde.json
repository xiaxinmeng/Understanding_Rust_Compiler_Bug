{"sha": "b32b51902cd97e3a8a2eede10a847688c5f15cde", "node_id": "C_kwDOANBUbNoAKGIzMmI1MTkwMmNkOTdlM2E4YTJlZWRlMTBhODQ3Njg4YzVmMTVjZGU", "commit": {"author": {"name": "Justin Squirek", "email": "squirek@adacore.com", "date": "2022-02-10T23:03:00Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "derodat@adacore.com", "date": "2022-05-16T08:42:06Z"}, "message": "[Ada] Type invariant or postcondition may cause uninitialized memory reads\n\nThis patch corrects an error in the compiler whereby a function\nrequiring the generation of a postconditions procedure may cause an\nuninitialized memory read when the return type\nHas_Unconstrained_Elements or is an unconstrained array.\n\nThe error occurs because evaluation of postconditions happens within the\n\"at end\" handler when the temporary result object may go out of scope.\nThe patch modifies expansion in the above cases to evaluate\npostconditions at the point of return instead - in order to guarantee\nthe result object is valid.\n\nNote that these changes have the side effect of introducing a semantic\nbug such that functions returning types with unconstrained elements will\nhave their postconditions/return type invariants evaluated before\nfinalization. Work is currently being done to introduce wrappers which\nwill solve this problem and remove technical debt in this area.\n\ngcc/ada/\n\n\t* exp_ch7.adb (Build_Finalizer): Disable late evaluation of\n\tpostconditions for functions returning types which where\n\tHas_Unconstrained_Elements is true or are unconstrained arrays.", "tree": {"sha": "bac4fc6e0f6c81e79a4bd72b656f5e145aa73a50", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/bac4fc6e0f6c81e79a4bd72b656f5e145aa73a50"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b32b51902cd97e3a8a2eede10a847688c5f15cde", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b32b51902cd97e3a8a2eede10a847688c5f15cde", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b32b51902cd97e3a8a2eede10a847688c5f15cde", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b32b51902cd97e3a8a2eede10a847688c5f15cde/comments", "author": {"login": "AdaDoom3", "id": 3445599, "node_id": "MDQ6VXNlcjM0NDU1OTk=", "avatar_url": "https://avatars.githubusercontent.com/u/3445599?v=4", "gravatar_id": "", "url": "https://api.github.com/users/AdaDoom3", "html_url": "https://github.com/AdaDoom3", "followers_url": "https://api.github.com/users/AdaDoom3/followers", "following_url": "https://api.github.com/users/AdaDoom3/following{/other_user}", "gists_url": "https://api.github.com/users/AdaDoom3/gists{/gist_id}", "starred_url": "https://api.github.com/users/AdaDoom3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/AdaDoom3/subscriptions", "organizations_url": "https://api.github.com/users/AdaDoom3/orgs", "repos_url": "https://api.github.com/users/AdaDoom3/repos", "events_url": "https://api.github.com/users/AdaDoom3/events{/privacy}", "received_events_url": "https://api.github.com/users/AdaDoom3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pmderodat", "id": 758452, "node_id": "MDQ6VXNlcjc1ODQ1Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/758452?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pmderodat", "html_url": "https://github.com/pmderodat", "followers_url": "https://api.github.com/users/pmderodat/followers", "following_url": "https://api.github.com/users/pmderodat/following{/other_user}", "gists_url": "https://api.github.com/users/pmderodat/gists{/gist_id}", "starred_url": "https://api.github.com/users/pmderodat/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pmderodat/subscriptions", "organizations_url": "https://api.github.com/users/pmderodat/orgs", "repos_url": "https://api.github.com/users/pmderodat/repos", "events_url": "https://api.github.com/users/pmderodat/events{/privacy}", "received_events_url": "https://api.github.com/users/pmderodat/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "26bbf0e5da9af096eeddc2a79e1e0da9673b6bd2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/26bbf0e5da9af096eeddc2a79e1e0da9673b6bd2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/26bbf0e5da9af096eeddc2a79e1e0da9673b6bd2"}], "stats": {"total": 35, "additions": 27, "deletions": 8}, "files": [{"sha": "ae3663ecdf6c75d0e785f09b071f1b00fd2aa7f4", "filename": "gcc/ada/exp_ch7.adb", "status": "modified", "additions": 27, "deletions": 8, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b32b51902cd97e3a8a2eede10a847688c5f15cde/gcc%2Fada%2Fexp_ch7.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b32b51902cd97e3a8a2eede10a847688c5f15cde/gcc%2Fada%2Fexp_ch7.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch7.adb?ref=b32b51902cd97e3a8a2eede10a847688c5f15cde", "patch": "@@ -4247,14 +4247,33 @@ package body Exp_Ch7 is\n          --\n          --    Postcond_Enable := False;\n \n-         Append_To (Top_Decls,\n-           Make_Assignment_Statement (Loc,\n-             Name       =>\n-               New_Occurrence_Of\n-                 (Get_Postcond_Enabled (Def_Ent), Loc),\n-             Expression =>\n-               New_Occurrence_Of\n-                 (Standard_False, Loc)));\n+         --  Note that we do not disable early evaluation of postconditions\n+         --  for return types that are unconstrained or have unconstrained\n+         --  elements since the temporary result object could get allocated on\n+         --  the stack and be out of scope at the point where we perform late\n+         --  evaluation of postconditions - leading to uninitialized memory\n+         --  reads.\n+\n+         --  This disabling of early evaluation can lead to incorrect run-time\n+         --  semantics where functions with unconstrained elements will\n+         --  have their corresponding postconditions evaluated before\n+         --  finalization. The proper solution here is to generate a wrapper\n+         --  to capture the result instead of using multiple flags and playing\n+         --  with flags which does not even work in all cases ???\n+\n+         if not Has_Unconstrained_Elements (Etype (Def_Ent))\n+           or else (Is_Array_Type (Etype (Def_Ent))\n+                     and then not Is_Constrained (Etype (Def_Ent)))\n+         then\n+            Append_To (Top_Decls,\n+              Make_Assignment_Statement (Loc,\n+                Name       =>\n+                  New_Occurrence_Of\n+                    (Get_Postcond_Enabled (Def_Ent), Loc),\n+                Expression =>\n+                  New_Occurrence_Of\n+                    (Standard_False, Loc)));\n+         end if;\n \n          --  Add the subprogram to the list of declarations an analyze it\n "}]}