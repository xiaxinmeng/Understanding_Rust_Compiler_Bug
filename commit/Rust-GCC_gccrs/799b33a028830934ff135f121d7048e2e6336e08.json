{"sha": "799b33a028830934ff135f121d7048e2e6336e08", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Nzk5YjMzYTAyODgzMDkzNGZmMTM1ZjEyMWQ3MDQ4ZTJlNjMzNmUwOA==", "commit": {"author": {"name": "Jan Hubicka", "email": "jh@suse.cz", "date": "2003-04-08T09:14:06Z"}, "committer": {"name": "Jan Hubicka", "email": "hubicka@gcc.gnu.org", "date": "2003-04-08T09:14:06Z"}, "message": "i386.c (legitimate_pic_address_disp_p): Do not accept PLUS in the GOTOFF operand.\n\n\t* i386.c (legitimate_pic_address_disp_p): Do not accept PLUS in the\n\tGOTOFF operand.\n\t(legitimize_pic_address): Move plus outside the unspec.\n\t* i386.c (legitimate_constant_p):  Check (CONST (PLUS (UNSPEC ...\n\tfor validity.\n\nFrom-SVN: r65367", "tree": {"sha": "53175dc42d76a682109261fa884fa26d3de4a2fa", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/53175dc42d76a682109261fa884fa26d3de4a2fa"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/799b33a028830934ff135f121d7048e2e6336e08", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/799b33a028830934ff135f121d7048e2e6336e08", "html_url": "https://github.com/Rust-GCC/gccrs/commit/799b33a028830934ff135f121d7048e2e6336e08", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/799b33a028830934ff135f121d7048e2e6336e08/comments", "author": null, "committer": null, "parents": [{"sha": "3e71e0028f7a23cdc2ca07951abbb0ef1bda0689", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3e71e0028f7a23cdc2ca07951abbb0ef1bda0689", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3e71e0028f7a23cdc2ca07951abbb0ef1bda0689"}], "stats": {"total": 30, "additions": 28, "deletions": 2}, "files": [{"sha": "63bac4b9f875db8f05abcb7a4dd0befec9b93dc2", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/799b33a028830934ff135f121d7048e2e6336e08/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/799b33a028830934ff135f121d7048e2e6336e08/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=799b33a028830934ff135f121d7048e2e6336e08", "patch": "@@ -1,3 +1,11 @@\n+Tue Apr  8 11:12:07 CEST 2003  Jan Hubicka  <jh@suse.cz>\n+\n+\t* i386.c (legitimate_pic_address_disp_p): Do not accept PLUS in the\n+\tGOTOFF operand.\n+\t(legitimize_pic_address): Move plus outside the unspec.\n+\t* i386.c (legitimate_constant_p):  Check (CONST (PLUS (UNSPEC ...\n+\tfor validity.\n+\n 2003-04-08  Nathan Sidwell  <nathan@codesourcery.com>\n \n \t* gcov-io.h (gcov_save_position): Remove __inline__ from"}, {"sha": "b4c8fafd27bc163d56ad16d78d6bdb3e00250ffb", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 20, "deletions": 2, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/799b33a028830934ff135f121d7048e2e6336e08/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/799b33a028830934ff135f121d7048e2e6336e08/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=799b33a028830934ff135f121d7048e2e6336e08", "patch": "@@ -5674,6 +5674,13 @@ legitimate_constant_p (x)\n \t  && tls_symbolic_operand (XEXP (inner, 0), Pmode))\n \treturn false;\n \n+      if (GET_CODE (inner) == PLUS)\n+\t{\n+\t  if (GET_CODE (XEXP (inner, 1)) != CONST_INT)\n+\t    return false;\n+\t  inner = XEXP (inner, 0);\n+\t}\n+\n       /* Only some unspecs are valid as \"constants\".  */\n       if (GET_CODE (inner) == UNSPEC)\n \tswitch (XINT (inner, 1))\n@@ -5833,7 +5840,10 @@ legitimate_pic_address_disp_p (disp)\n \treturn false;\n       return GET_CODE (XVECEXP (disp, 0, 0)) == SYMBOL_REF;\n     case UNSPEC_GOTOFF:\n-      return local_symbolic_operand (XVECEXP (disp, 0, 0), Pmode);\n+      if (GET_CODE (XVECEXP (disp, 0, 0)) == SYMBOL_REF\n+\t  || GET_CODE (XVECEXP (disp, 0, 0)) == LABEL_REF)\n+        return local_symbolic_operand (XVECEXP (disp, 0, 0), Pmode);\n+      return false;\n     case UNSPEC_GOTTPOFF:\n     case UNSPEC_GOTNTPOFF:\n     case UNSPEC_INDNTPOFF:\n@@ -6146,7 +6156,15 @@ legitimize_pic_address (orig, reg)\n \n       if (reload_in_progress)\n \tregs_ever_live[PIC_OFFSET_TABLE_REGNUM] = 1;\n-      new = gen_rtx_UNSPEC (Pmode, gen_rtvec (1, addr), UNSPEC_GOTOFF);\n+      if (GET_CODE (addr) == CONST)\n+\taddr = XEXP (addr, 0);\n+      if (GET_CODE (addr) == PLUS)\n+\t  {\n+            new = gen_rtx_UNSPEC (Pmode, gen_rtvec (1, XEXP (addr, 0)), UNSPEC_GOTOFF);\n+\t    new = gen_rtx_PLUS (Pmode, new, XEXP (addr, 1));\n+\t  }\n+\telse\n+          new = gen_rtx_UNSPEC (Pmode, gen_rtvec (1, addr), UNSPEC_GOTOFF);\n       new = gen_rtx_CONST (Pmode, new);\n       new = gen_rtx_PLUS (Pmode, pic_offset_table_rtx, new);\n "}]}