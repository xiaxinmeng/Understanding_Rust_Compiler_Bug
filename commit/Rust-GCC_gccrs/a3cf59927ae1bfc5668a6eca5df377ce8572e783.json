{"sha": "a3cf59927ae1bfc5668a6eca5df377ce8572e783", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTNjZjU5OTI3YWUxYmZjNTY2OGE2ZWNhNWRmMzc3Y2U4NTcyZTc4Mw==", "commit": {"author": {"name": "Marek Michalkiewicz", "email": "marekm@amelek.gda.pl", "date": "2005-01-26T21:44:25Z"}, "committer": {"name": "Marek Michalkiewicz", "email": "marekm@gcc.gnu.org", "date": "2005-01-26T21:44:25Z"}, "message": "re PR target/19293 (avr-gcc crashes when using shifts with negative shift count)\n\n\tPR target/19293\n\tPR target/19329\n\t* config/avr/avr.c (notice_update_cc): Only set condition code for\n\tashrqi3 if shift count > 0.\n\t(out_shift_with_cnt): Handle shift count <= 0 as a no-op.\n\t(ashlqi3_out, ashlhi3_out, ashlsi3_out, ashrqi3_out, ashrhi3_out,\n\tashrsi3_out, lshrqi3_out, lshrhi3_out, lshrsi3_out): Handle shift\n\tcount <= 0 as a no-op, and shift count >= width by copying zero\n\tor sign bit to all bits of the result.\n\t* config/avr/avr.md (all shifts): Add alternatives for zero shift\n\tcount, with attribute \"length\" set to 0 and \"cc\" set to \"none\".\n\nFrom-SVN: r94288", "tree": {"sha": "079662416201ff8fa42edb9cf9edd2f2a0575e3d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/079662416201ff8fa42edb9cf9edd2f2a0575e3d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a3cf59927ae1bfc5668a6eca5df377ce8572e783", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a3cf59927ae1bfc5668a6eca5df377ce8572e783", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a3cf59927ae1bfc5668a6eca5df377ce8572e783", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a3cf59927ae1bfc5668a6eca5df377ce8572e783/comments", "author": null, "committer": null, "parents": [{"sha": "d487e3c10ad8ed3327106a84c27d97be497b4798", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d487e3c10ad8ed3327106a84c27d97be497b4798", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d487e3c10ad8ed3327106a84c27d97be497b4798"}], "stats": {"total": 251, "additions": 170, "deletions": 81}, "files": [{"sha": "01cfd967d788f23f5a2ecc16a91af207b9d31d0d", "filename": "gcc/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a3cf59927ae1bfc5668a6eca5df377ce8572e783/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a3cf59927ae1bfc5668a6eca5df377ce8572e783/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=a3cf59927ae1bfc5668a6eca5df377ce8572e783", "patch": "@@ -1,3 +1,17 @@\n+2005-01-26  Marek Michalkiewicz  <marekm@amelek.gda.pl>\n+\n+\tPR target/19293\n+\tPR target/19329\n+\t* config/avr/avr.c (notice_update_cc): Only set condition code for\n+\tashrqi3 if shift count > 0.\n+\t(out_shift_with_cnt): Handle shift count <= 0 as a no-op.\n+\t(ashlqi3_out, ashlhi3_out, ashlsi3_out, ashrqi3_out, ashrhi3_out,\n+\tashrsi3_out, lshrqi3_out, lshrhi3_out, lshrsi3_out): Handle shift\n+\tcount <= 0 as a no-op, and shift count >= width by copying zero\n+\tor sign bit to all bits of the result.\n+\t* config/avr/avr.md (all shifts): Add alternatives for zero shift\n+\tcount, with attribute \"length\" set to 0 and \"cc\" set to \"none\".\n+\n 2005-01-26  Aldy Hernandez  <aldyh@redhat.com>\n \n \t* doc/invoke.texi: Document -mTLS."}, {"sha": "fffb7badabe05683b4f14d294700e28e4597dba4", "filename": "gcc/config/avr/avr.c", "status": "modified", "additions": 75, "deletions": 0, "changes": 75, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a3cf59927ae1bfc5668a6eca5df377ce8572e783/gcc%2Fconfig%2Favr%2Favr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a3cf59927ae1bfc5668a6eca5df377ce8572e783/gcc%2Fconfig%2Favr%2Favr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Favr%2Favr.c?ref=a3cf59927ae1bfc5668a6eca5df377ce8572e783", "patch": "@@ -1229,6 +1229,7 @@ notice_update_cc (rtx body ATTRIBUTE_UNUSED, rtx insn)\n \t      rtx x = XEXP (src, 1);\n \n \t      if (GET_CODE (x) == CONST_INT\n+\t\t  && INTVAL (x) > 0\n \t\t  && INTVAL (x) != 6)\n \t\t{\n \t\t  cc_status.value1 = SET_DEST (set);\n@@ -2749,6 +2750,13 @@ out_shift_with_cnt (const char *template, rtx insn, rtx operands[],\n       int count = INTVAL (operands[2]);\n       int max_len = 10;  /* If larger than this, always use a loop.  */\n \n+      if (count <= 0)\n+\t{\n+\t  if (len)\n+\t    *len = 0;\n+\t  return;\n+\t}\n+\n       if (count < 8 && !scratch)\n \tuse_zero_reg = 1;\n \n@@ -2871,6 +2879,9 @@ ashlqi3_out (rtx insn, rtx operands[], int *len)\n       switch (INTVAL (operands[2]))\n \t{\n \tdefault:\n+\t  if (INTVAL (operands[2]) < 8)\n+\t    break;\n+\n \t  *len = 1;\n \t  return AS1 (clr,%0);\n \t  \n@@ -2967,6 +2978,14 @@ ashlhi3_out (rtx insn, rtx operands[], int *len)\n       \n       switch (INTVAL (operands[2]))\n \t{\n+\tdefault:\n+\t  if (INTVAL (operands[2]) < 16)\n+\t    break;\n+\n+\t  *len = 2;\n+\t  return (AS1 (clr,%B0) CR_TAB\n+\t\t  AS1 (clr,%A0));\n+\n \tcase 4:\n \t  if (optimize_size && scratch)\n \t    break;  /* 5 */\n@@ -3218,6 +3237,20 @@ ashlsi3_out (rtx insn, rtx operands[], int *len)\n       \n       switch (INTVAL (operands[2]))\n \t{\n+\tdefault:\n+\t  if (INTVAL (operands[2]) < 32)\n+\t    break;\n+\n+\t  if (AVR_ENHANCED)\n+\t    return *len = 3, (AS1 (clr,%D0) CR_TAB\n+\t\t\t      AS1 (clr,%C0) CR_TAB\n+\t\t\t      AS2 (movw,%A0,%C0));\n+\t  *len = 4;\n+\t  return (AS1 (clr,%D0) CR_TAB\n+\t\t  AS1 (clr,%C0) CR_TAB\n+\t\t  AS1 (clr,%B0) CR_TAB\n+\t\t  AS1 (clr,%A0));\n+\n \tcase 8:\n \t  {\n \t    int reg0 = true_regnum (operands[0]);\n@@ -3356,6 +3389,11 @@ ashrqi3_out (rtx insn, rtx operands[], int *len)\n \t\t  AS2 (bld,%0,0));\n \n \tdefault:\n+\t  if (INTVAL (operands[2]) < 8)\n+\t    break;\n+\n+\t  /* fall through */\n+\n \tcase 7:\n \t  *len = 2;\n \t  return (AS1 (lsl,%0) CR_TAB\n@@ -3519,6 +3557,12 @@ ashrhi3_out (rtx insn, rtx operands[], int *len)\n \t\t  AS2 (mov,%B0,%A0) CR_TAB\n \t\t  AS1 (rol,%A0));\n \n+\tdefault:\n+\t  if (INTVAL (operands[2]) < 16)\n+\t    break;\n+\n+\t  /* fall through */\n+\n \tcase 15:\n \t  return *len = 3, (AS1 (lsl,%B0)     CR_TAB\n \t\t\t    AS2 (sbc,%A0,%A0) CR_TAB\n@@ -3626,6 +3670,12 @@ ashrsi3_out (rtx insn, rtx operands[], int *len)\n \t\t\t      AS2 (mov,%B0,%D0) CR_TAB\n \t\t\t      AS2 (mov,%C0,%D0));\n \n+\tdefault:\n+\t  if (INTVAL (operands[2]) < 32)\n+\t    break;\n+\n+\t  /* fall through */\n+\n \tcase 31:\n \t  if (AVR_ENHANCED)\n \t    return *len = 4, (AS1 (lsl,%D0)     CR_TAB\n@@ -3664,6 +3714,9 @@ lshrqi3_out (rtx insn, rtx operands[], int *len)\n       switch (INTVAL (operands[2]))\n \t{\n \tdefault:\n+\t  if (INTVAL (operands[2]) < 8)\n+\t    break;\n+\n \t  *len = 1;\n \t  return AS1 (clr,%0);\n \n@@ -3758,6 +3811,14 @@ lshrhi3_out (rtx insn, rtx operands[], int *len)\n       \n       switch (INTVAL (operands[2]))\n \t{\n+\tdefault:\n+\t  if (INTVAL (operands[2]) < 16)\n+\t    break;\n+\n+\t  *len = 2;\n+\t  return (AS1 (clr,%B0) CR_TAB\n+\t\t  AS1 (clr,%A0));\n+\n \tcase 4:\n \t  if (optimize_size && scratch)\n \t    break;  /* 5 */\n@@ -4008,6 +4069,20 @@ lshrsi3_out (rtx insn, rtx operands[], int *len)\n       \n       switch (INTVAL (operands[2]))\n \t{\n+\tdefault:\n+\t  if (INTVAL (operands[2]) < 32)\n+\t    break;\n+\n+\t  if (AVR_ENHANCED)\n+\t    return *len = 3, (AS1 (clr,%D0) CR_TAB\n+\t\t\t      AS1 (clr,%C0) CR_TAB\n+\t\t\t      AS2 (movw,%A0,%C0));\n+\t  *len = 4;\n+\t  return (AS1 (clr,%D0) CR_TAB\n+\t\t  AS1 (clr,%C0) CR_TAB\n+\t\t  AS1 (clr,%B0) CR_TAB\n+\t\t  AS1 (clr,%A0));\n+\n \tcase 8:\n \t  {\n \t    int reg0 = true_regnum (operands[0]);"}, {"sha": "eaed1d89cf8aaf3d4abe0ad8809dc8f048bbdc41", "filename": "gcc/config/avr/avr.md", "status": "modified", "additions": 81, "deletions": 81, "changes": 162, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a3cf59927ae1bfc5668a6eca5df377ce8572e783/gcc%2Fconfig%2Favr%2Favr.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a3cf59927ae1bfc5668a6eca5df377ce8572e783/gcc%2Fconfig%2Favr%2Favr.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Favr%2Favr.md?ref=a3cf59927ae1bfc5668a6eca5df377ce8572e783", "patch": "@@ -1167,31 +1167,31 @@\n ;; arithmetic shift left\n \n (define_insn \"ashlqi3\"\n-  [(set (match_operand:QI 0 \"register_operand\"           \"=r,r,r,!d,r,r\")\n-\t(ashift:QI (match_operand:QI 1 \"register_operand\" \"0,0,0,0,0,0\")\n-\t\t   (match_operand:QI 2 \"general_operand\"  \"r,P,K,n,n,Qm\")))]\n+  [(set (match_operand:QI 0 \"register_operand\"           \"=r,r,r,r,!d,r,r\")\n+\t(ashift:QI (match_operand:QI 1 \"register_operand\" \"0,0,0,0,0,0,0\")\n+\t\t   (match_operand:QI 2 \"general_operand\"  \"r,L,P,K,n,n,Qm\")))]\n   \"\"\n   \"* return ashlqi3_out (insn, operands, NULL);\"\n-  [(set_attr \"length\" \"5,1,2,4,6,9\")\n-   (set_attr \"cc\" \"clobber,set_czn,set_czn,set_czn,set_czn,clobber\")])\n+  [(set_attr \"length\" \"5,0,1,2,4,6,9\")\n+   (set_attr \"cc\" \"clobber,none,set_czn,set_czn,set_czn,set_czn,clobber\")])\n \n (define_insn \"ashlhi3\"\n-  [(set (match_operand:HI 0 \"register_operand\"           \"=r,r,r,r,r,r\")\n-\t(ashift:HI (match_operand:HI 1 \"register_operand\" \"0,0,r,0,0,0\")\n-\t\t   (match_operand:QI 2 \"general_operand\"  \"r,P,O,K,n,Qm\")))]\n+  [(set (match_operand:HI 0 \"register_operand\"           \"=r,r,r,r,r,r,r\")\n+\t(ashift:HI (match_operand:HI 1 \"register_operand\" \"0,0,0,r,0,0,0\")\n+\t\t   (match_operand:QI 2 \"general_operand\"  \"r,L,P,O,K,n,Qm\")))]\n   \"\"\n   \"* return ashlhi3_out (insn, operands, NULL);\"\n-  [(set_attr \"length\" \"6,2,2,4,10,10\")\n-   (set_attr \"cc\" \"clobber,set_n,clobber,set_n,clobber,clobber\")])\n+  [(set_attr \"length\" \"6,0,2,2,4,10,10\")\n+   (set_attr \"cc\" \"clobber,none,set_n,clobber,set_n,clobber,clobber\")])\n \n (define_insn \"ashlsi3\"\n-  [(set (match_operand:SI 0 \"register_operand\"           \"=r,r,r,r,r,r\")\n-\t(ashift:SI (match_operand:SI 1 \"register_operand\" \"0,0,r,0,0,0\")\n-\t\t   (match_operand:QI 2 \"general_operand\"  \"r,P,O,K,n,Qm\")))]\n+  [(set (match_operand:SI 0 \"register_operand\"           \"=r,r,r,r,r,r,r\")\n+\t(ashift:SI (match_operand:SI 1 \"register_operand\" \"0,0,0,r,0,0,0\")\n+\t\t   (match_operand:QI 2 \"general_operand\"  \"r,L,P,O,K,n,Qm\")))]\n   \"\"\n   \"* return ashlsi3_out (insn, operands, NULL);\"\n-  [(set_attr \"length\" \"8,4,4,8,10,12\")\n-   (set_attr \"cc\" \"clobber,set_n,clobber,set_n,clobber,clobber\")])\n+  [(set_attr \"length\" \"8,0,4,4,8,10,12\")\n+   (set_attr \"cc\" \"clobber,none,set_n,clobber,set_n,clobber,clobber\")])\n \n ;; Optimize if a scratch register from LD_REGS happens to be available.\n \n@@ -1207,14 +1207,14 @@\n      FAIL;\")\n \n (define_insn \"*ashlhi3_const\"\n-  [(set (match_operand:HI 0 \"register_operand\"            \"=r,r,r,r\")\n-\t(ashift:HI (match_operand:HI 1 \"register_operand\"  \"0,r,0,0\")\n-\t\t   (match_operand:QI 2 \"const_int_operand\" \"P,O,K,n\")))\n-   (clobber (match_scratch:QI 3 \"=X,X,X,&d\"))]\n+  [(set (match_operand:HI 0 \"register_operand\"            \"=r,r,r,r,r\")\n+\t(ashift:HI (match_operand:HI 1 \"register_operand\"  \"0,0,r,0,0\")\n+\t\t   (match_operand:QI 2 \"const_int_operand\" \"L,P,O,K,n\")))\n+   (clobber (match_scratch:QI 3 \"=X,X,X,X,&d\"))]\n   \"reload_completed\"\n   \"* return ashlhi3_out (insn, operands, NULL);\"\n-  [(set_attr \"length\" \"2,2,4,10\")\n-   (set_attr \"cc\" \"set_n,clobber,set_n,clobber\")])\n+  [(set_attr \"length\" \"0,2,2,4,10\")\n+   (set_attr \"cc\" \"none,set_n,clobber,set_n,clobber\")])\n \n (define_peephole2\n   [(match_scratch:QI 3 \"d\")\n@@ -1228,44 +1228,44 @@\n      FAIL;\")\n \n (define_insn \"*ashlsi3_const\"\n-  [(set (match_operand:SI 0 \"register_operand\"            \"=r,r,r\")\n-\t(ashift:SI (match_operand:SI 1 \"register_operand\"  \"0,r,0\")\n-\t\t   (match_operand:QI 2 \"const_int_operand\" \"P,O,n\")))\n-   (clobber (match_scratch:QI 3 \"=X,X,&d\"))]\n+  [(set (match_operand:SI 0 \"register_operand\"            \"=r,r,r,r\")\n+\t(ashift:SI (match_operand:SI 1 \"register_operand\"  \"0,0,r,0\")\n+\t\t   (match_operand:QI 2 \"const_int_operand\" \"L,P,O,n\")))\n+   (clobber (match_scratch:QI 3 \"=X,X,X,&d\"))]\n   \"reload_completed\"\n   \"* return ashlsi3_out (insn, operands, NULL);\"\n-  [(set_attr \"length\" \"4,4,10\")\n-   (set_attr \"cc\" \"set_n,clobber,clobber\")])\n+  [(set_attr \"length\" \"0,4,4,10\")\n+   (set_attr \"cc\" \"none,set_n,clobber,clobber\")])\n \n ;; >> >> >> >> >> >> >> >> >> >> >> >> >> >> >> >> >> >> >> >> >> >> >> >> >>\n ;; arithmetic shift right\n \n (define_insn \"ashrqi3\"\n-  [(set (match_operand:QI 0 \"register_operand\" \"=r,r,r,r,r\")\n-\t(ashiftrt:QI (match_operand:QI 1 \"register_operand\" \"0,0,0,0,0\")\n-\t\t     (match_operand:QI 2 \"general_operand\" \"r,P,K,n,Qm\")))]\n+  [(set (match_operand:QI 0 \"register_operand\" \"=r,r,r,r,r,r\")\n+\t(ashiftrt:QI (match_operand:QI 1 \"register_operand\" \"0,0,0,0,0,0\")\n+\t\t     (match_operand:QI 2 \"general_operand\"  \"r,L,P,K,n,Qm\")))]\n   \"\"\n   \"* return ashrqi3_out (insn, operands, NULL);\"\n-  [(set_attr \"length\" \"5,1,2,5,9\")\n-   (set_attr \"cc\" \"clobber,clobber,clobber,clobber,clobber\")])\n+  [(set_attr \"length\" \"5,0,1,2,5,9\")\n+   (set_attr \"cc\" \"clobber,none,clobber,clobber,clobber,clobber\")])\n \n (define_insn \"ashrhi3\"\n-  [(set (match_operand:HI 0 \"register_operand\"             \"=r,r,r,r,r,r\")\n-\t(ashiftrt:HI (match_operand:HI 1 \"register_operand\" \"0,0,r,0,0,0\")\n-\t\t     (match_operand:QI 2 \"general_operand\"  \"r,P,O,K,n,Qm\")))]\n+  [(set (match_operand:HI 0 \"register_operand\"             \"=r,r,r,r,r,r,r\")\n+\t(ashiftrt:HI (match_operand:HI 1 \"register_operand\" \"0,0,0,r,0,0,0\")\n+\t\t     (match_operand:QI 2 \"general_operand\"  \"r,L,P,O,K,n,Qm\")))]\n   \"\"\n   \"* return ashrhi3_out (insn, operands, NULL);\"\n-  [(set_attr \"length\" \"6,2,4,4,10,10\")\n-   (set_attr \"cc\" \"clobber,clobber,set_n,clobber,clobber,clobber\")])\n+  [(set_attr \"length\" \"6,0,2,4,4,10,10\")\n+   (set_attr \"cc\" \"clobber,none,clobber,set_n,clobber,clobber,clobber\")])\n \n (define_insn \"ashrsi3\"\n-  [(set (match_operand:SI 0 \"register_operand\"             \"=r,r,r,r,r,r\")\n-\t(ashiftrt:SI (match_operand:SI 1 \"register_operand\" \"0,0,r,0,0,0\")\n-\t\t     (match_operand:QI 2 \"general_operand\"  \"r,P,O,K,n,Qm\")))]\n+  [(set (match_operand:SI 0 \"register_operand\"             \"=r,r,r,r,r,r,r\")\n+\t(ashiftrt:SI (match_operand:SI 1 \"register_operand\" \"0,0,0,r,0,0,0\")\n+\t\t     (match_operand:QI 2 \"general_operand\"  \"r,L,P,O,K,n,Qm\")))]\n   \"\"\n   \"* return ashrsi3_out (insn, operands, NULL);\"\n-  [(set_attr \"length\" \"8,4,6,8,10,12\")\n-   (set_attr \"cc\" \"clobber,clobber,set_n,clobber,clobber,clobber\")])\n+  [(set_attr \"length\" \"8,0,4,6,8,10,12\")\n+   (set_attr \"cc\" \"clobber,none,clobber,set_n,clobber,clobber,clobber\")])\n \n ;; Optimize if a scratch register from LD_REGS happens to be available.\n \n@@ -1281,14 +1281,14 @@\n      FAIL;\")\n \n (define_insn \"*ashrhi3_const\"\n-  [(set (match_operand:HI 0 \"register_operand\"              \"=r,r,r,r\")\n-\t(ashiftrt:HI (match_operand:HI 1 \"register_operand\"  \"0,r,0,0\")\n-\t\t     (match_operand:QI 2 \"const_int_operand\" \"P,O,K,n\")))\n-   (clobber (match_scratch:QI 3 \"=X,X,X,&d\"))]\n+  [(set (match_operand:HI 0 \"register_operand\"              \"=r,r,r,r,r\")\n+\t(ashiftrt:HI (match_operand:HI 1 \"register_operand\"  \"0,0,r,0,0\")\n+\t\t     (match_operand:QI 2 \"const_int_operand\" \"L,P,O,K,n\")))\n+   (clobber (match_scratch:QI 3 \"=X,X,X,X,&d\"))]\n   \"reload_completed\"\n   \"* return ashrhi3_out (insn, operands, NULL);\"\n-  [(set_attr \"length\" \"2,4,4,10\")\n-   (set_attr \"cc\" \"clobber,set_n,clobber,clobber\")])\n+  [(set_attr \"length\" \"0,2,4,4,10\")\n+   (set_attr \"cc\" \"none,clobber,set_n,clobber,clobber\")])\n \n (define_peephole2\n   [(match_scratch:QI 3 \"d\")\n@@ -1302,44 +1302,44 @@\n      FAIL;\")\n \n (define_insn \"*ashrsi3_const\"\n-  [(set (match_operand:SI 0 \"register_operand\"              \"=r,r,r\")\n-\t(ashiftrt:SI (match_operand:SI 1 \"register_operand\"  \"0,r,0\")\n-\t\t     (match_operand:QI 2 \"const_int_operand\" \"P,O,n\")))\n-   (clobber (match_scratch:QI 3 \"=X,X,&d\"))]\n+  [(set (match_operand:SI 0 \"register_operand\"              \"=r,r,r,r\")\n+\t(ashiftrt:SI (match_operand:SI 1 \"register_operand\"  \"0,0,r,0\")\n+\t\t     (match_operand:QI 2 \"const_int_operand\" \"L,P,O,n\")))\n+   (clobber (match_scratch:QI 3 \"=X,X,X,&d\"))]\n   \"reload_completed\"\n   \"* return ashrsi3_out (insn, operands, NULL);\"\n-  [(set_attr \"length\" \"4,4,10\")\n-   (set_attr \"cc\" \"clobber,set_n,clobber\")])\n+  [(set_attr \"length\" \"0,4,4,10\")\n+   (set_attr \"cc\" \"none,clobber,set_n,clobber\")])\n \n ;; >> >> >> >> >> >> >> >> >> >> >> >> >> >> >> >> >> >> >> >> >> >> >> >> >>\n ;; logical shift right\n \n (define_insn \"lshrqi3\"\n-  [(set (match_operand:QI 0 \"register_operand\"             \"=r,r,r,!d,r,r\")\n-\t(lshiftrt:QI (match_operand:QI 1 \"register_operand\" \"0,0,0,0,0,0\")\n-\t\t     (match_operand:QI 2 \"general_operand\"  \"r,P,K,n,n,Qm\")))]\n+  [(set (match_operand:QI 0 \"register_operand\"             \"=r,r,r,r,!d,r,r\")\n+\t(lshiftrt:QI (match_operand:QI 1 \"register_operand\" \"0,0,0,0,0,0,0\")\n+\t\t     (match_operand:QI 2 \"general_operand\"  \"r,L,P,K,n,n,Qm\")))]\n   \"\"\n   \"* return lshrqi3_out (insn, operands, NULL);\"\n-  [(set_attr \"length\" \"5,1,2,4,6,9\")\n-   (set_attr \"cc\" \"clobber,set_czn,set_czn,set_czn,set_czn,clobber\")])\n+  [(set_attr \"length\" \"5,0,1,2,4,6,9\")\n+   (set_attr \"cc\" \"clobber,none,set_czn,set_czn,set_czn,set_czn,clobber\")])\n \n (define_insn \"lshrhi3\"\n-  [(set (match_operand:HI 0 \"register_operand\"             \"=r,r,r,r,r,r\")\n-\t(lshiftrt:HI (match_operand:HI 1 \"register_operand\" \"0,0,r,0,0,0\")\n-\t\t     (match_operand:QI 2 \"general_operand\"  \"r,P,O,K,n,Qm\")))]\n+  [(set (match_operand:HI 0 \"register_operand\"             \"=r,r,r,r,r,r,r\")\n+\t(lshiftrt:HI (match_operand:HI 1 \"register_operand\" \"0,0,0,r,0,0,0\")\n+\t\t     (match_operand:QI 2 \"general_operand\"  \"r,L,P,O,K,n,Qm\")))]\n   \"\"\n   \"* return lshrhi3_out (insn, operands, NULL);\"\n-  [(set_attr \"length\" \"6,2,2,4,10,10\")\n-   (set_attr \"cc\" \"clobber,clobber,clobber,clobber,clobber,clobber\")])\n+  [(set_attr \"length\" \"6,0,2,2,4,10,10\")\n+   (set_attr \"cc\" \"clobber,none,clobber,clobber,clobber,clobber,clobber\")])\n \n (define_insn \"lshrsi3\"\n-  [(set (match_operand:SI 0 \"register_operand\"             \"=r,r,r,r,r,r\")\n-\t(lshiftrt:SI (match_operand:SI 1 \"register_operand\" \"0,0,r,0,0,0\")\n-\t\t     (match_operand:QI 2 \"general_operand\"  \"r,P,O,K,n,Qm\")))]\n+  [(set (match_operand:SI 0 \"register_operand\"             \"=r,r,r,r,r,r,r\")\n+\t(lshiftrt:SI (match_operand:SI 1 \"register_operand\" \"0,0,0,r,0,0,0\")\n+\t\t     (match_operand:QI 2 \"general_operand\"  \"r,L,P,O,K,n,Qm\")))]\n   \"\"\n   \"* return lshrsi3_out (insn, operands, NULL);\"\n-  [(set_attr \"length\" \"8,4,4,8,10,12\")\n-   (set_attr \"cc\" \"clobber,clobber,clobber,clobber,clobber,clobber\")])\n+  [(set_attr \"length\" \"8,0,4,4,8,10,12\")\n+   (set_attr \"cc\" \"clobber,none,clobber,clobber,clobber,clobber,clobber\")])\n \n ;; Optimize if a scratch register from LD_REGS happens to be available.\n \n@@ -1355,14 +1355,14 @@\n      FAIL;\")\n \n (define_insn \"*lshrhi3_const\"\n-  [(set (match_operand:HI 0 \"register_operand\"              \"=r,r,r,r\")\n-\t(lshiftrt:HI (match_operand:HI 1 \"register_operand\"  \"0,r,0,0\")\n-\t\t     (match_operand:QI 2 \"const_int_operand\" \"P,O,K,n\")))\n-   (clobber (match_scratch:QI 3 \"=X,X,X,&d\"))]\n+  [(set (match_operand:HI 0 \"register_operand\"              \"=r,r,r,r,r\")\n+\t(lshiftrt:HI (match_operand:HI 1 \"register_operand\"  \"0,0,r,0,0\")\n+\t\t     (match_operand:QI 2 \"const_int_operand\" \"L,P,O,K,n\")))\n+   (clobber (match_scratch:QI 3 \"=X,X,X,X,&d\"))]\n   \"reload_completed\"\n   \"* return lshrhi3_out (insn, operands, NULL);\"\n-  [(set_attr \"length\" \"2,2,4,10\")\n-   (set_attr \"cc\" \"clobber,clobber,clobber,clobber\")])\n+  [(set_attr \"length\" \"0,2,2,4,10\")\n+   (set_attr \"cc\" \"none,clobber,clobber,clobber,clobber\")])\n \n (define_peephole2\n   [(match_scratch:QI 3 \"d\")\n@@ -1376,14 +1376,14 @@\n      FAIL;\")\n \n (define_insn \"*lshrsi3_const\"\n-  [(set (match_operand:SI 0 \"register_operand\"              \"=r,r,r\")\n-\t(lshiftrt:SI (match_operand:SI 1 \"register_operand\"  \"0,r,0\")\n-\t\t     (match_operand:QI 2 \"const_int_operand\" \"P,O,n\")))\n-   (clobber (match_scratch:QI 3 \"=X,X,&d\"))]\n+  [(set (match_operand:SI 0 \"register_operand\"              \"=r,r,r,r\")\n+\t(lshiftrt:SI (match_operand:SI 1 \"register_operand\"  \"0,0,r,0\")\n+\t\t     (match_operand:QI 2 \"const_int_operand\" \"L,P,O,n\")))\n+   (clobber (match_scratch:QI 3 \"=X,X,X,&d\"))]\n   \"reload_completed\"\n   \"* return lshrsi3_out (insn, operands, NULL);\"\n-  [(set_attr \"length\" \"4,4,10\")\n-   (set_attr \"cc\" \"clobber,clobber,clobber\")])\n+  [(set_attr \"length\" \"0,4,4,10\")\n+   (set_attr \"cc\" \"none,clobber,clobber,clobber\")])\n \n ;; abs(x) abs(x) abs(x) abs(x) abs(x) abs(x) abs(x) abs(x) abs(x) abs(x) abs(x)\n ;; abs"}]}