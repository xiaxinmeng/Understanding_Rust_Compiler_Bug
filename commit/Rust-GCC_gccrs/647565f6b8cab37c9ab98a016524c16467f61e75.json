{"sha": "647565f6b8cab37c9ab98a016524c16467f61e75", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjQ3NTY1ZjZiOGNhYjM3YzlhYjk4YTAxNjUyNGMxNjQ2N2Y2MWU3NQ==", "commit": {"author": {"name": "Richard Sandiford", "email": "rdsandiford@googlemail.com", "date": "2010-07-07T21:49:29Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2010-07-07T21:49:29Z"}, "message": "gengtype.c (write_field_root): New function.\n\ngcc/\n\t* gengtype.c (write_field_root): New function.\n\t(write_root): Use it.\n\nFrom-SVN: r161937", "tree": {"sha": "ef70ba48f6e43fffcd9472c505d2167bb0b065a9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ef70ba48f6e43fffcd9472c505d2167bb0b065a9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/647565f6b8cab37c9ab98a016524c16467f61e75", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/647565f6b8cab37c9ab98a016524c16467f61e75", "html_url": "https://github.com/Rust-GCC/gccrs/commit/647565f6b8cab37c9ab98a016524c16467f61e75", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/647565f6b8cab37c9ab98a016524c16467f61e75/comments", "author": {"login": "rsandifo", "id": 4235983, "node_id": "MDQ6VXNlcjQyMzU5ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/4235983?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo", "html_url": "https://github.com/rsandifo", "followers_url": "https://api.github.com/users/rsandifo/followers", "following_url": "https://api.github.com/users/rsandifo/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo/orgs", "repos_url": "https://api.github.com/users/rsandifo/repos", "events_url": "https://api.github.com/users/rsandifo/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "1b13783702a6cf6c04d64da51ec511ce641d08d1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1b13783702a6cf6c04d64da51ec511ce641d08d1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1b13783702a6cf6c04d64da51ec511ce641d08d1"}], "stats": {"total": 57, "additions": 42, "deletions": 15}, "files": [{"sha": "2e66b9d1a2bd0e879058d516c0395d0ecdeba493", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/647565f6b8cab37c9ab98a016524c16467f61e75/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/647565f6b8cab37c9ab98a016524c16467f61e75/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=647565f6b8cab37c9ab98a016524c16467f61e75", "patch": "@@ -1,3 +1,8 @@\n+2010-07-07  Richard Sandiford  <rdsandiford@googlemail.com>\n+\n+\t* gengtype.c (write_field_root): New function.\n+\t(write_root): Use it.\n+\n 2010-07-07  Wei Guozhi  <carrot@google.com>\n \n \t* config/arm/thumb2.md (peephole2 to convert zero_extract/compare"}, {"sha": "4b6e60e19a56b6b815a0748bf239104c3b757d21", "filename": "gcc/gengtype.c", "status": "modified", "additions": 37, "deletions": 15, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/647565f6b8cab37c9ab98a016524c16467f61e75/gcc%2Fgengtype.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/647565f6b8cab37c9ab98a016524c16467f61e75/gcc%2Fgengtype.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgengtype.c?ref=647565f6b8cab37c9ab98a016524c16467f61e75", "patch": "@@ -3174,6 +3174,37 @@ finish_root_table (struct flist *flp, const char *pfx, const char *lastname,\n   }\n }\n \n+/* A subroutine of write_root for writing the roots for field FIELD_NAME,\n+   which has type FIELD_TYPE.  Parameters F to EMIT_PCH are the parameters\n+   of the caller.  */\n+\n+static void\n+write_field_root (outf_p f, pair_p v, type_p type, const char *name,\n+\t\t  int has_length, struct fileloc *line, const char *if_marked,\n+\t\t  bool emit_pch, type_p field_type, const char *field_name)\n+{\n+  /* If the field reference is relative to V, rather than to some\n+     subcomponent of V, we can mark any subarrays with a single stride.\n+     We're effectively treating the field as a global variable in its\n+     own right.  */\n+  if (type == v->type)\n+    {\n+      struct pair newv;\n+\n+      newv = *v;\n+      newv.type = field_type;\n+      newv.name = ACONCAT ((v->name, \".\", field_name, NULL));\n+      v = &newv;\n+    }\n+  /* Otherwise, any arrays nested in the structure are too complex to\n+     handle.  */\n+  else if (field_type->kind == TYPE_ARRAY)\n+    error_at_line (line, \"nested array `%s.%s' is too complex to be a root\",\n+\t\t   name, field_name);\n+  write_root (f, v, field_type, ACONCAT ((name, \".\", field_name, NULL)),\n+\t      has_length, line, if_marked, emit_pch);\n+}\n+\n /* Write out to F the table entry and any marker routines needed to\n    mark NAME as TYPE.  The original variable is V, at LINE.\n    HAS_LENGTH is nonzero iff V was a variable-length array.  IF_MARKED\n@@ -3232,27 +3263,18 @@ write_root (outf_p f, pair_p v, type_p type, const char *name, int has_length,\n \t\t    validf = ufld;\n \t\t  }\n \t\tif (validf != NULL)\n-\t\t  {\n-\t\t    char *newname;\n-\t\t    newname = xasprintf (\"%s.%s.%s\",\n-\t\t\t\t\t name, fld->name, validf->name);\n-\t\t    write_root (f, v, validf->type, newname, 0, line,\n-\t\t\t\tif_marked, emit_pch);\n-\t\t    free (newname);\n-\t\t  }\n+\t\t  write_field_root (f, v, type, name, 0, line, if_marked,\n+\t\t\t\t    emit_pch, validf->type,\n+\t\t\t\t    ACONCAT ((fld->name, \".\",\n+\t\t\t\t\t      validf->name, NULL)));\n \t      }\n \t    else if (desc)\n \t      error_at_line (line,\n \t\t     \"global `%s.%s' has `desc' option but is not union\",\n \t\t\t     name, fld->name);\n \t    else\n-\t      {\n-\t\tchar *newname;\n-\t\tnewname = xasprintf (\"%s.%s\", name, fld->name);\n-\t\twrite_root (f, v, fld->type, newname, 0, line, if_marked,\n-\t\t\t    emit_pch);\n-\t\tfree (newname);\n-\t      }\n+\t      write_field_root (f, v, type, name, 0, line, if_marked,\n+\t\t\t\temit_pch, fld->type, fld->name);\n \t  }\n       }\n       break;"}]}