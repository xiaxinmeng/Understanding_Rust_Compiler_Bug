{"sha": "9f37760abed226a27061ded75d50be803ef73a96", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWYzNzc2MGFiZWQyMjZhMjcwNjFkZWQ3NWQ1MGJlODAzZWY3M2E5Ng==", "commit": {"author": {"name": "Kyrylo Tkachov", "email": "kyrylo.tkachov@arm.com", "date": "2014-11-18T10:10:53Z"}, "committer": {"name": "Kyrylo Tkachov", "email": "ktkachov@gcc.gnu.org", "date": "2014-11-18T10:10:53Z"}, "message": "[ARM] Use std::swap instead of manually swapping\n\n\t* config/arm/arm.md (unaligned_loaddi): Use std::swap instead of\n\tmanual swapping implementation.\n\t(movcond_addsi): Likewise.\n\t* config/arm/arm.c (arm_canonicalize_comparison): Likewise.\n\t(arm_select_dominance_cc_mode): Likewise.\n\t(arm_reload_out_hi): Likewise.\n\t(gen_operands_ldrd_strd): Likewise.\n\t(output_move_double): Likewise.\n\t(arm_print_operand_address): Likewise.\n\t(thumb_output_move_mem_multiple): Likewise.\n\t(SWAP_RTX): Delete.\n\nFrom-SVN: r217701", "tree": {"sha": "b21976644eea9dd4de116ca7c082b136cc4b9fbd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b21976644eea9dd4de116ca7c082b136cc4b9fbd"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9f37760abed226a27061ded75d50be803ef73a96", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9f37760abed226a27061ded75d50be803ef73a96", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9f37760abed226a27061ded75d50be803ef73a96", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9f37760abed226a27061ded75d50be803ef73a96/comments", "author": {"login": "ktkachov-arm", "id": 74917949, "node_id": "MDQ6VXNlcjc0OTE3OTQ5", "avatar_url": "https://avatars.githubusercontent.com/u/74917949?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ktkachov-arm", "html_url": "https://github.com/ktkachov-arm", "followers_url": "https://api.github.com/users/ktkachov-arm/followers", "following_url": "https://api.github.com/users/ktkachov-arm/following{/other_user}", "gists_url": "https://api.github.com/users/ktkachov-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/ktkachov-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ktkachov-arm/subscriptions", "organizations_url": "https://api.github.com/users/ktkachov-arm/orgs", "repos_url": "https://api.github.com/users/ktkachov-arm/repos", "events_url": "https://api.github.com/users/ktkachov-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/ktkachov-arm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "bd79363ce06f60a72c83463963bf67de05b06546", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bd79363ce06f60a72c83463963bf67de05b06546", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bd79363ce06f60a72c83463963bf67de05b06546"}], "stats": {"total": 93, "additions": 32, "deletions": 61}, "files": [{"sha": "52fa23be23b4f0f5cca8e5473010b11464609b80", "filename": "gcc/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9f37760abed226a27061ded75d50be803ef73a96/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9f37760abed226a27061ded75d50be803ef73a96/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=9f37760abed226a27061ded75d50be803ef73a96", "patch": "@@ -1,3 +1,17 @@\n+2014-11-18  Kyrylo Tkachov  <kyrylo.tkachov@arm.com>\n+\n+\t* config/arm/arm.md (unaligned_loaddi): Use std::swap instead of\n+\tmanual swapping implementation.\n+\t(movcond_addsi): Likewise.\n+\t* config/arm/arm.c (arm_canonicalize_comparison): Likewise.\n+\t(arm_select_dominance_cc_mode): Likewise.\n+\t(arm_reload_out_hi): Likewise.\n+\t(gen_operands_ldrd_strd): Likewise.\n+\t(output_move_double): Likewise.\n+\t(arm_print_operand_address): Likewise.\n+\t(thumb_output_move_mem_multiple): Likewise.\n+\t(SWAP_RTX): Delete.\n+\n 2014-11-18  James Greenhalgh  <james.greenhalgh@arm.com>\n \n \t* config/arm/arm-builtins.c (CONVERT_QUALIFIERS): Delete."}, {"sha": "64494e8539281ef4610198c1b2c82c66b785e4c1", "filename": "gcc/config/arm/arm.c", "status": "modified", "additions": 14, "deletions": 49, "changes": 63, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9f37760abed226a27061ded75d50be803ef73a96/gcc%2Fconfig%2Farm%2Farm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9f37760abed226a27061ded75d50be803ef73a96/gcc%2Fconfig%2Farm%2Farm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.c?ref=9f37760abed226a27061ded75d50be803ef73a96", "patch": "@@ -4606,7 +4606,6 @@ arm_canonicalize_comparison (int *code, rtx *op0, rtx *op1,\n      for GTU/LEU in Thumb mode.  */\n   if (mode == DImode)\n     {\n-      rtx tem;\n \n       if (*code == GT || *code == LE\n \t  || (!TARGET_ARM && (*code == GTU || *code == LEU)))\n@@ -4646,9 +4645,7 @@ arm_canonicalize_comparison (int *code, rtx *op0, rtx *op1,\n \t  /* If that did not work, reverse the condition.  */\n \t  if (!op0_preserve_value)\n \t    {\n-\t      tem = *op0;\n-\t      *op0 = *op1;\n-\t      *op1 = tem;\n+\t      std::swap (*op0, *op1);\n \t      *code = (int)swap_condition ((enum rtx_code)*code);\n \t    }\n \t}\n@@ -14927,11 +14924,7 @@ arm_select_dominance_cc_mode (rtx x, rtx y, HOST_WIDE_INT cond_or)\n     return CCmode;\n \n   if (swapped)\n-    {\n-      enum rtx_code temp = cond1;\n-      cond1 = cond2;\n-      cond2 = temp;\n-    }\n+    std::swap (cond1, cond2);\n \n   switch (cond1)\n     {\n@@ -15440,11 +15433,7 @@ arm_reload_out_hi (rtx *operands)\n \t  /* Updating base_plus might destroy outval, see if we can\n \t     swap the scratch and base_plus.  */\n \t  if (!reg_overlap_mentioned_p (scratch, outval))\n-\t    {\n-\t      rtx tmp = scratch;\n-\t      scratch = base_plus;\n-\t      base_plus = tmp;\n-\t    }\n+\t    std::swap (scratch, base_plus);\n \t  else\n \t    {\n \t      rtx scratch_hi = gen_rtx_REG (HImode, REGNO (operands[2]));\n@@ -15499,11 +15488,7 @@ arm_reload_out_hi (rtx *operands)\n \t      /* Updating base_plus might destroy outval, see if we\n \t\t can swap the scratch and base_plus.  */\n \t      if (!reg_overlap_mentioned_p (scratch, outval))\n-\t\t{\n-\t\t  rtx tmp = scratch;\n-\t\t  scratch = base_plus;\n-\t\t  base_plus = tmp;\n-\t\t}\n+\t        std::swap (scratch, base_plus);\n \t      else\n \t\t{\n \t\t  rtx scratch_hi = gen_rtx_REG (HImode, REGNO (operands[2]));\n@@ -15736,8 +15721,6 @@ mem_ok_for_ldrd_strd (rtx mem, rtx *base, rtx *offset)\n   return false;\n }\n \n-#define SWAP_RTX(x,y) do { rtx tmp = x; x = y; y = tmp; } while (0)\n-\n /* Called from a peephole2 to replace two word-size accesses with a\n    single LDRD/STRD instruction.  Returns true iff we can generate a\n    new instruction sequence.  That is, both accesses use the same base\n@@ -15877,10 +15860,10 @@ gen_operands_ldrd_strd (rtx *operands, bool load,\n       offset = offsets[1];\n \n       /* Swap the instructions such that lower memory is accessed first.  */\n-      SWAP_RTX (operands[0], operands[1]);\n-      SWAP_RTX (operands[2], operands[3]);\n+      std::swap (operands[0], operands[1]);\n+      std::swap (operands[2], operands[3]);\n       if (const_store)\n-        SWAP_RTX (operands[4], operands[5]);\n+        std::swap (operands[4], operands[5]);\n     }\n   else\n     {\n@@ -15905,7 +15888,7 @@ gen_operands_ldrd_strd (rtx *operands, bool load,\n   if (load && commute)\n     {\n       /* Try reordering registers.  */\n-      SWAP_RTX (operands[0], operands[1]);\n+      std::swap (operands[0], operands[1]);\n       if (operands_ok_ldrd_strd (operands[0], operands[1], base, offset,\n                                  false, load))\n         return true;\n@@ -15934,7 +15917,7 @@ gen_operands_ldrd_strd (rtx *operands, bool load,\n       if (operands_ok_ldrd_strd (operands[1], operands[0], base, offset,\n                                   false, false))\n         {\n-          SWAP_RTX (operands[0], operands[1]);\n+          std::swap (operands[0], operands[1]);\n           return true;\n         }\n \n@@ -15965,7 +15948,6 @@ gen_operands_ldrd_strd (rtx *operands, bool load,\n \n   return false;\n }\n-#undef SWAP_RTX\n \n \n \n@@ -18111,12 +18093,9 @@ output_move_double (rtx *operands, bool emit, int *count)\n \t\t      if (reg_overlap_mentioned_p (operands[0],\n \t\t\t\t\t\t   otherops[2]))\n \t\t\t{\n-\t\t\t  rtx tmp;\n \t\t\t  /* Swap base and index registers over to\n \t\t\t     avoid a conflict.  */\n-\t\t\t  tmp = otherops[1];\n-\t\t\t  otherops[1] = otherops[2];\n-\t\t\t  otherops[2] = tmp;\n+\t\t\t  std::swap (otherops[1], otherops[2]);\n \t\t\t}\n \t\t      /* If both registers conflict, it will usually\n \t\t\t have been fixed by a splitter.  */\n@@ -22176,9 +22155,7 @@ arm_print_operand_address (FILE *stream, rtx x)\n \t      /* Ensure that BASE is a register.  */\n \t      /* (one of them must be).  */\n \t      /* Also ensure the SP is not used as in index register.  */\n-\t      rtx temp = base;\n-\t      base = index;\n-\t      index = temp;\n+\t      std::swap (base, index);\n \t    }\n \t  switch (GET_CODE (index))\n \t    {\n@@ -25351,23 +25328,11 @@ thumb_output_move_mem_multiple (int n, rtx *operands)\n \n     case 3:\n       if (REGNO (operands[4]) > REGNO (operands[5]))\n-\t{\n-\t  tmp = operands[4];\n-\t  operands[4] = operands[5];\n-\t  operands[5] = tmp;\n-\t}\n+        std::swap (operands[4], operands[5]);\n       if (REGNO (operands[5]) > REGNO (operands[6]))\n-\t{\n-\t  tmp = operands[5];\n-\t  operands[5] = operands[6];\n-\t  operands[6] = tmp;\n-\t}\n+        std::swap (operands[5], operands[6]);\n       if (REGNO (operands[4]) > REGNO (operands[5]))\n-\t{\n-\t  tmp = operands[4];\n-\t  operands[4] = operands[5];\n-\t  operands[5] = tmp;\n-\t}\n+        std::swap (operands[4], operands[5]);\n \n       output_asm_insn (\"ldmia\\t%1!, {%4, %5, %6}\", operands);\n       output_asm_insn (\"stmia\\t%0!, {%4, %5, %6}\", operands);"}, {"sha": "b9880b423010831aade0d80273b0fd92ee075c43", "filename": "gcc/config/arm/arm.md", "status": "modified", "additions": 4, "deletions": 12, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9f37760abed226a27061ded75d50be803ef73a96/gcc%2Fconfig%2Farm%2Farm.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9f37760abed226a27061ded75d50be803ef73a96/gcc%2Fconfig%2Farm%2Farm.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.md?ref=9f37760abed226a27061ded75d50be803ef73a96", "patch": "@@ -4230,12 +4230,8 @@\n        swap the order in which the loads are emitted.  */\n     if (reg_overlap_mentioned_p (operands[0], operands[1]))\n       {\n-        rtx tmp = operands[1];\n-        operands[1] = operands[3];\n-        operands[3] = tmp;\n-        tmp = operands[0];\n-        operands[0] = operands[2];\n-        operands[2] = tmp;\n+        std::swap (operands[1], operands[3]);\n+        std::swap (operands[0], operands[2]);\n       }\n   }\n   [(set_attr \"arch\" \"t2,any\")\n@@ -9339,12 +9335,8 @@\n     gcc_assert (!(mode == CCFPmode || mode == CCFPEmode));\n     if (REGNO (operands[2]) != REGNO (operands[0]))\n       rc = reverse_condition (rc);\n-    else \n-      {\n-\trtx tmp = operands[1];\n-\toperands[1] = operands[2];\n-\toperands[2] = tmp;\n-      }\n+    else\n+      std::swap (operands[1], operands[2]);\n \n     operands[6] = gen_rtx_fmt_ee (rc, VOIDmode, operands[6], const0_rtx);\n   }"}]}