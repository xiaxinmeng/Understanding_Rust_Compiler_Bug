{"sha": "229d576cde53ac4396583da3642ca969cca413d1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjI5ZDU3NmNkZTUzYWM0Mzk2NTgzZGEzNjQyY2E5NjljY2E0MTNkMQ==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2019-02-22T08:38:14Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2019-02-22T08:38:14Z"}, "message": "re PR tree-optimization/87609 (miscompilation with restrict and loop)\n\n2019-02-22  Richard Biener  <rguenther@suse.de>\n\n\tPR middle-end/87609\n\t* cfghooks.h (dependence_hash): New typedef.\n\t(struct copy_bb_data): New type.\n\t(cfg_hooks::duplicate_block): Adjust to take a copy_bb_data argument.\n\t(duplicate_block): Likewise.\n\t* cfghooks.c (duplicate_block): Pass down copy_bb_data.\n\t(copy_bbs): Create and pass down copy_bb_data.\n\t* cfgrtl.c (cfg_layout_duplicate_bb): Adjust.\n\t(rtl_duplicate_bb): Likewise.\n\t* tree-cfg.c (gimple_duplicate_bb): If the copy_bb_data arg is not NULL\n\tremap dependence info.\n\n\t* gcc.dg/torture/restrict-7.c: New testcase.\n\nFrom-SVN: r269098", "tree": {"sha": "90ee3349ab449b0ce61e8104f5c1086026142119", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/90ee3349ab449b0ce61e8104f5c1086026142119"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/229d576cde53ac4396583da3642ca969cca413d1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/229d576cde53ac4396583da3642ca969cca413d1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/229d576cde53ac4396583da3642ca969cca413d1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/229d576cde53ac4396583da3642ca969cca413d1/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "3c8b06dcc68be1ba6dbb01fbbd32ba2a337dd3b8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3c8b06dcc68be1ba6dbb01fbbd32ba2a337dd3b8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3c8b06dcc68be1ba6dbb01fbbd32ba2a337dd3b8"}], "stats": {"total": 109, "additions": 100, "deletions": 9}, "files": [{"sha": "7397b50465a418eae146218d001819c35b8ec918", "filename": "gcc/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/229d576cde53ac4396583da3642ca969cca413d1/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/229d576cde53ac4396583da3642ca969cca413d1/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=229d576cde53ac4396583da3642ca969cca413d1", "patch": "@@ -1,3 +1,17 @@\n+2019-02-22  Richard Biener  <rguenther@suse.de>\n+\n+\tPR middle-end/87609\n+\t* cfghooks.h (dependence_hash): New typedef.\n+\t(struct copy_bb_data): New type.\n+\t(cfg_hooks::duplicate_block): Adjust to take a copy_bb_data argument.\n+\t(duplicate_block): Likewise.\n+\t* cfghooks.c (duplicate_block): Pass down copy_bb_data.\n+\t(copy_bbs): Create and pass down copy_bb_data.\n+\t* cfgrtl.c (cfg_layout_duplicate_bb): Adjust.\n+\t(rtl_duplicate_bb): Likewise.\n+\t* tree-cfg.c (gimple_duplicate_bb): If the copy_bb_data arg is not NULL\n+\tremap dependence info.\n+\n 2019-02-22  Richard Biener  <rguenther@suse.de>\n \n \tPR tree-optimization/87609"}, {"sha": "a1d603a207ec7791a3101060e1126c395507ea62", "filename": "gcc/cfghooks.c", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/229d576cde53ac4396583da3642ca969cca413d1/gcc%2Fcfghooks.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/229d576cde53ac4396583da3642ca969cca413d1/gcc%2Fcfghooks.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcfghooks.c?ref=229d576cde53ac4396583da3642ca969cca413d1", "patch": "@@ -1066,7 +1066,7 @@ can_duplicate_block_p (const_basic_block bb)\n    AFTER.  */\n \n basic_block\n-duplicate_block (basic_block bb, edge e, basic_block after)\n+duplicate_block (basic_block bb, edge e, basic_block after, copy_bb_data *id)\n {\n   edge s, n;\n   basic_block new_bb;\n@@ -1082,7 +1082,7 @@ duplicate_block (basic_block bb, edge e, basic_block after)\n \n   gcc_checking_assert (can_duplicate_block_p (bb));\n \n-  new_bb = cfg_hooks->duplicate_block (bb);\n+  new_bb = cfg_hooks->duplicate_block (bb, id);\n   if (after)\n     move_block_after (new_bb, after);\n \n@@ -1337,6 +1337,7 @@ copy_bbs (basic_block *bbs, unsigned n, basic_block *new_bbs,\n   unsigned i, j;\n   basic_block bb, new_bb, dom_bb;\n   edge e;\n+  copy_bb_data id;\n \n   /* Mark the blocks to be copied.  This is used by edge creation hooks\n      to decide whether to reallocate PHI nodes capacity to avoid reallocating\n@@ -1349,7 +1350,7 @@ copy_bbs (basic_block *bbs, unsigned n, basic_block *new_bbs,\n     {\n       /* Duplicate.  */\n       bb = bbs[i];\n-      new_bb = new_bbs[i] = duplicate_block (bb, NULL, after);\n+      new_bb = new_bbs[i] = duplicate_block (bb, NULL, after, &id);\n       after = new_bb;\n       if (bb->loop_father)\n \t{"}, {"sha": "e9385c99443846df52fd92c616d5e29cbc14c3a0", "filename": "gcc/cfghooks.h", "status": "modified", "additions": 16, "deletions": 2, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/229d576cde53ac4396583da3642ca969cca413d1/gcc%2Fcfghooks.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/229d576cde53ac4396583da3642ca969cca413d1/gcc%2Fcfghooks.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcfghooks.h?ref=229d576cde53ac4396583da3642ca969cca413d1", "patch": "@@ -54,6 +54,19 @@ struct profile_record\n   bool run;\n };\n \n+typedef int_hash <unsigned short, 0> dependence_hash;\n+\n+/* Optional data for duplicate_block.   */\n+\n+struct copy_bb_data\n+{\n+  copy_bb_data() : dependence_map (NULL) {}\n+  ~copy_bb_data () { delete dependence_map; }\n+\n+  /* A map from the copied BBs dependence info cliques to\n+     equivalents in the BBs duplicated to.  */\n+  hash_map<dependence_hash, unsigned short> *dependence_map;\n+};\n \n struct cfg_hooks\n {\n@@ -112,7 +125,7 @@ struct cfg_hooks\n   bool (*can_duplicate_block_p) (const_basic_block a);\n \n   /* Duplicate block A.  */\n-  basic_block (*duplicate_block) (basic_block a);\n+  basic_block (*duplicate_block) (basic_block a, copy_bb_data *);\n \n   /* Higher level functions representable by primitive operations above if\n      we didn't have some oddities in RTL and Tree representations.  */\n@@ -227,7 +240,8 @@ extern void tidy_fallthru_edges (void);\n extern void predict_edge (edge e, enum br_predictor predictor, int probability);\n extern bool predicted_by_p (const_basic_block bb, enum br_predictor predictor);\n extern bool can_duplicate_block_p (const_basic_block);\n-extern basic_block duplicate_block (basic_block, edge, basic_block);\n+extern basic_block duplicate_block (basic_block, edge, basic_block,\n+\t\t\t\t    copy_bb_data * = NULL);\n extern bool block_ends_with_call_p (basic_block bb);\n extern bool empty_block_p (basic_block);\n extern basic_block split_block_before_cond_jump (basic_block);"}, {"sha": "08e534f2485cd2bfde214617357a06ceb2a8cb31", "filename": "gcc/cfgrtl.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/229d576cde53ac4396583da3642ca969cca413d1/gcc%2Fcfgrtl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/229d576cde53ac4396583da3642ca969cca413d1/gcc%2Fcfgrtl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcfgrtl.c?ref=229d576cde53ac4396583da3642ca969cca413d1", "patch": "@@ -4250,7 +4250,7 @@ duplicate_insn_chain (rtx_insn *from, rtx_insn *to)\n /* Create a duplicate of the basic block BB.  */\n \n static basic_block\n-cfg_layout_duplicate_bb (basic_block bb)\n+cfg_layout_duplicate_bb (basic_block bb, copy_bb_data *)\n {\n   rtx_insn *insn;\n   basic_block new_bb;\n@@ -5080,9 +5080,9 @@ rtl_can_remove_branch_p (const_edge e)\n }\n \n static basic_block\n-rtl_duplicate_bb (basic_block bb)\n+rtl_duplicate_bb (basic_block bb, copy_bb_data *id)\n {\n-  bb = cfg_layout_duplicate_bb (bb);\n+  bb = cfg_layout_duplicate_bb (bb, id);\n   bb->aux = NULL;\n   return bb;\n }"}, {"sha": "7cb6b240d0c924c50955d192ae10e2128f781a00", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/229d576cde53ac4396583da3642ca969cca413d1/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/229d576cde53ac4396583da3642ca969cca413d1/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=229d576cde53ac4396583da3642ca969cca413d1", "patch": "@@ -1,3 +1,8 @@\n+2019-02-22  Richard Biener  <rguenther@suse.de>\n+\n+\tPR middle-end/87609\n+\t* gcc.dg/torture/restrict-7.c: New testcase.\n+\n 2019-02-21  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR c++/89285"}, {"sha": "107371098b33b8547f52776c5c20fa72aa587172", "filename": "gcc/testsuite/gcc.dg/torture/restrict-7.c", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/229d576cde53ac4396583da3642ca969cca413d1/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Frestrict-7.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/229d576cde53ac4396583da3642ca969cca413d1/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Frestrict-7.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Frestrict-7.c?ref=229d576cde53ac4396583da3642ca969cca413d1", "patch": "@@ -0,0 +1,27 @@\n+/* { dg-do run } */\n+\n+extern void abort (void);\n+\n+static inline __attribute__((always_inline)) void\n+copy(int *restrict a, int *restrict b)\n+{\n+  *b = *a;\n+  *a = 7;\n+}\n+\n+void __attribute__((noinline))\n+floppy(int mat[static 2], unsigned idxs[static 3])\n+{\n+  for (int i = 0; i < 3; i++)\n+    copy(&mat[i%2], &mat[idxs[i]]);\n+}\n+\n+int main()\n+{\n+  int mat[2] = {10, 20};\n+  unsigned idxs[3] = {1, 0, 1};\n+  floppy(mat, idxs);\n+  if (mat[0] != 7 || mat[1] != 10)\n+    abort ();\n+  return 0;\n+}"}, {"sha": "eac70274c171cf3e25c7638666cf51e7464cad16", "filename": "gcc/tree-cfg.c", "status": "modified", "additions": 31, "deletions": 1, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/229d576cde53ac4396583da3642ca969cca413d1/gcc%2Ftree-cfg.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/229d576cde53ac4396583da3642ca969cca413d1/gcc%2Ftree-cfg.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-cfg.c?ref=229d576cde53ac4396583da3642ca969cca413d1", "patch": "@@ -6164,7 +6164,7 @@ gimple_can_duplicate_bb_p (const_basic_block bb ATTRIBUTE_UNUSED)\n    preserve SSA form.  */\n \n static basic_block\n-gimple_duplicate_bb (basic_block bb)\n+gimple_duplicate_bb (basic_block bb, copy_bb_data *id)\n {\n   basic_block new_bb;\n   gimple_stmt_iterator gsi_tgt;\n@@ -6228,6 +6228,36 @@ gimple_duplicate_bb (basic_block bb)\n \t      && (!VAR_P (base) || !DECL_HAS_VALUE_EXPR_P (base)))\n \t    DECL_NONSHAREABLE (base) = 1;\n \t}\n+ \n+      if (id)\n+\tfor (unsigned i = 0; i < gimple_num_ops (copy); ++i)\n+\t  {\n+\t    tree op = gimple_op (copy, i);\n+\t    if (!op)\n+\t      continue;\n+\t    if (TREE_CODE (op) == ADDR_EXPR\n+\t\t|| TREE_CODE (op) == WITH_SIZE_EXPR)\n+\t      op = TREE_OPERAND (op, 0);\n+\t    while (handled_component_p (op))\n+\t      op = TREE_OPERAND (op, 0);\n+\t    if ((TREE_CODE (op) == MEM_REF\n+\t\t || TREE_CODE (op) == TARGET_MEM_REF)\n+\t\t&& MR_DEPENDENCE_CLIQUE (op) != 0)\n+\t      {\n+\t\tif (!id->dependence_map)\n+\t\t  id->dependence_map = new hash_map<dependence_hash,\n+\t\t\t\t\t\t    unsigned short>;\n+\t\tbool existed;\n+\t\tunsigned short &newc = id->dependence_map->get_or_insert\n+\t\t    (MR_DEPENDENCE_CLIQUE (op), &existed);\n+\t\tif (!existed)\n+\t\t  {\n+\t\t    gcc_assert (MR_DEPENDENCE_CLIQUE (op) <= cfun->last_clique);\n+\t\t    newc = ++cfun->last_clique;\n+\t\t  }\n+\t\tMR_DEPENDENCE_CLIQUE (op) = newc;\n+\t      }\n+\t  }\n \n       /* Create new names for all the definitions created by COPY and\n \t add replacement mappings for each new name.  */"}]}