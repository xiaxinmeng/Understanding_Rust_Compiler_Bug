{"sha": "2cd9855d914e760f4c74ac01ad2f7e9378cd80fa", "node_id": "C_kwDOANBUbNoAKDJjZDk4NTVkOTE0ZTc2MGY0Yzc0YWMwMWFkMmY3ZTkzNzhjZDgwZmE", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2021-10-22T09:51:12Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-10-22T09:51:12Z"}, "message": "Merge #756\n\n756: Add const to enforce ownership over pointers r=philberty a=philberty\n\nThis consify's a bunch of interfaces in the code base which helps make the ownership\r\nover pointers more clear. These are building blocks from a wider cleanup of the type-checking\r\ncode to make it more readable.\r\n\r\n- BaseType::get_root\r\n- SubstitutionArgumentMappings::solve_mappings_from_receiver_for_self\r\n- Autoderef adjustments\r\n- GetUsedSubstArgs\r\n- SubstitutionArg field SubstitutionParamMapping\r\n- Backend resolve compile interface\n\nCo-authored-by: Philip Herron <philip.herron@embecosm.com>", "tree": {"sha": "7f12c08f5759feff35a0bd48cbae6a997c9a4ed5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7f12c08f5759feff35a0bd48cbae6a997c9a4ed5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2cd9855d914e760f4c74ac01ad2f7e9378cd80fa", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJhcomQCRBK7hj4Ov3rIwAARcQIAISPuYVHTWhBJ1Ljsh184apm\nNQVcKyi8pzGrsr/dztIHWBjWGvTsvzWHzhDaQNtCWJCd967xgmt10nHa0Ntb/d/k\nTF6ePcf5LjPj/IfxVXIY/DqnMWKq+vdY310ml4rc0jDGJa4MbaPUnfxwTn8Q6vxs\nfgxiiDwSh/5WX1xngppyaMINCOdIMxZqxzUE9eQoV0BdOGbzsLra0ukB+c8UDEvP\nGOeKKWVpN1QF6785rz2SJccURBgjA0vYBJHUgt4Xfp+a7TvGlzk+x9rEEZ6YqeY2\nEy3mGCug2p2h8JMVadYyZjJ1NSNWfMoxaXM7rhl8AJ0khK2OtrDti2iwsBdQL8Y=\n=HM9K\n-----END PGP SIGNATURE-----\n", "payload": "tree 7f12c08f5759feff35a0bd48cbae6a997c9a4ed5\nparent 9edda157230e0272309ca1133145984385f99e64\nparent a1b0df02414eb323dac53dc07702861a9d4b63b6\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1634896272 +0000\ncommitter GitHub <noreply@github.com> 1634896272 +0000\n\nMerge #756\n\n756: Add const to enforce ownership over pointers r=philberty a=philberty\n\nThis consify's a bunch of interfaces in the code base which helps make the ownership\r\nover pointers more clear. These are building blocks from a wider cleanup of the type-checking\r\ncode to make it more readable.\r\n\r\n- BaseType::get_root\r\n- SubstitutionArgumentMappings::solve_mappings_from_receiver_for_self\r\n- Autoderef adjustments\r\n- GetUsedSubstArgs\r\n- SubstitutionArg field SubstitutionParamMapping\r\n- Backend resolve compile interface\n\nCo-authored-by: Philip Herron <philip.herron@embecosm.com>\n"}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2cd9855d914e760f4c74ac01ad2f7e9378cd80fa", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2cd9855d914e760f4c74ac01ad2f7e9378cd80fa", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2cd9855d914e760f4c74ac01ad2f7e9378cd80fa/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9edda157230e0272309ca1133145984385f99e64", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9edda157230e0272309ca1133145984385f99e64", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9edda157230e0272309ca1133145984385f99e64"}, {"sha": "a1b0df02414eb323dac53dc07702861a9d4b63b6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a1b0df02414eb323dac53dc07702861a9d4b63b6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a1b0df02414eb323dac53dc07702861a9d4b63b6"}], "stats": {"total": 188, "additions": 96, "deletions": 92}, "files": [{"sha": "d74159809c5929f33d57cd5c56c5e8c00ecc1aa3", "filename": "gcc/rust/backend/rust-compile-base.h", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2cd9855d914e760f4c74ac01ad2f7e9378cd80fa/gcc%2Frust%2Fbackend%2Frust-compile-base.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2cd9855d914e760f4c74ac01ad2f7e9378cd80fa/gcc%2Frust%2Fbackend%2Frust-compile-base.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fbackend%2Frust-compile-base.h?ref=2cd9855d914e760f4c74ac01ad2f7e9378cd80fa", "patch": "@@ -205,14 +205,14 @@ class HIRCompileBase : public HIR::HIRVisitor\n \t\t\t      TyTy::BaseType *expected, Location locus);\n \n   Bexpression *coerce_to_dyn_object (Bexpression *compiled_ref,\n-\t\t\t\t     TyTy::BaseType *actual,\n-\t\t\t\t     TyTy::BaseType *expected,\n-\t\t\t\t     TyTy::DynamicObjectType *ty,\n+\t\t\t\t     const TyTy::BaseType *actual,\n+\t\t\t\t     const TyTy::BaseType *expected,\n+\t\t\t\t     const TyTy::DynamicObjectType *ty,\n \t\t\t\t     Location locus);\n \n   Bexpression *\n   compute_address_for_trait_item (const Resolver::TraitItemReference *ref,\n-\t\t\t\t  TyTy::BaseType *receiver);\n+\t\t\t\t  const TyTy::BaseType *receiver);\n };\n \n } // namespace Compile"}, {"sha": "fd2c0b52773af24f677c5160a8b237b53bf7f5b2", "filename": "gcc/rust/backend/rust-compile-context.h", "status": "modified", "additions": 26, "deletions": 27, "changes": 53, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2cd9855d914e760f4c74ac01ad2f7e9378cd80fa/gcc%2Frust%2Fbackend%2Frust-compile-context.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2cd9855d914e760f4c74ac01ad2f7e9378cd80fa/gcc%2Frust%2Fbackend%2Frust-compile-context.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fbackend%2Frust-compile-context.h?ref=2cd9855d914e760f4c74ac01ad2f7e9378cd80fa", "patch": "@@ -340,37 +340,36 @@ class Context\n   std::vector<::Bfunction *> func_decls;\n };\n \n-class TyTyResolveCompile : public TyTy::TyVisitor\n+class TyTyResolveCompile : public TyTy::TyConstVisitor\n {\n public:\n-  static ::Btype *compile (Context *ctx, TyTy::BaseType *ty,\n+  static ::Btype *compile (Context *ctx, const TyTy::BaseType *ty,\n \t\t\t   bool trait_object_mode = false)\n   {\n     TyTyResolveCompile compiler (ctx, trait_object_mode);\n     ty->accept_vis (compiler);\n     return compiler.translated;\n   }\n \n-  void visit (TyTy::ErrorType &) override { gcc_unreachable (); }\n+  void visit (const TyTy::ErrorType &) override { gcc_unreachable (); }\n+  void visit (const TyTy::InferType &) override { gcc_unreachable (); }\n \n-  void visit (TyTy::InferType &) override { gcc_unreachable (); }\n-\n-  void visit (TyTy::ProjectionType &type) override\n+  void visit (const TyTy::ProjectionType &type) override\n   {\n     type.get ()->accept_vis (*this);\n   }\n \n-  void visit (TyTy::PlaceholderType &type) override\n+  void visit (const TyTy::PlaceholderType &type) override\n   {\n     type.resolve ()->accept_vis (*this);\n   }\n \n-  void visit (TyTy::ParamType &param) override\n+  void visit (const TyTy::ParamType &param) override\n   {\n     param.resolve ()->accept_vis (*this);\n   }\n \n-  void visit (TyTy::FnType &type) override\n+  void visit (const TyTy::FnType &type) override\n   {\n     Backend::Btyped_identifier receiver;\n     std::vector<Backend::Btyped_identifier> parameters;\n@@ -409,7 +408,7 @@ class TyTyResolveCompile : public TyTy::TyVisitor\n \tctx->get_mappings ()->lookup_location (type.get_ref ()));\n   }\n \n-  void visit (TyTy::FnPtr &type) override\n+  void visit (const TyTy::FnPtr &type) override\n   {\n     Btype *result_type\n       = TyTyResolveCompile::compile (ctx, type.get_return_type ());\n@@ -426,15 +425,15 @@ class TyTyResolveCompile : public TyTy::TyVisitor\n       ctx->get_mappings ()->lookup_location (type.get_ref ()));\n   }\n \n-  void visit (TyTy::ADTType &type) override\n+  void visit (const TyTy::ADTType &type) override\n   {\n     if (ctx->lookup_compiled_types (type.get_ty_ref (), &translated, &type))\n       return;\n \n     std::vector<Backend::Btyped_identifier> fields;\n     for (size_t i = 0; i < type.num_fields (); i++)\n       {\n-\tTyTy::StructFieldType *field = type.get_field (i);\n+\tconst TyTy::StructFieldType *field = type.get_field (i);\n \tBtype *compiled_field_ty\n \t  = TyTyResolveCompile::compile (ctx, field->get_field_type ());\n \n@@ -460,7 +459,7 @@ class TyTyResolveCompile : public TyTy::TyVisitor\n     ctx->insert_compiled_type (type.get_ty_ref (), named_struct, &type);\n   }\n \n-  void visit (TyTy::TupleType &type) override\n+  void visit (const TyTy::TupleType &type) override\n   {\n     if (type.num_fields () == 0)\n       {\n@@ -504,71 +503,71 @@ class TyTyResolveCompile : public TyTy::TyVisitor\n     translated = named_struct;\n   }\n \n-  void visit (TyTy::ArrayType &type) override\n+  void visit (const TyTy::ArrayType &type) override\n   {\n     Btype *element_type\n       = TyTyResolveCompile::compile (ctx, type.get_element_type ());\n     translated\n       = ctx->get_backend ()->array_type (element_type, type.get_capacity ());\n   }\n \n-  void visit (TyTy::BoolType &type) override\n+  void visit (const TyTy::BoolType &type) override\n   {\n     ::Btype *compiled_type = nullptr;\n     bool ok = ctx->lookup_compiled_types (type.get_ty_ref (), &compiled_type);\n     rust_assert (ok);\n     translated = compiled_type;\n   }\n \n-  void visit (TyTy::IntType &type) override\n+  void visit (const TyTy::IntType &type) override\n   {\n     ::Btype *compiled_type = nullptr;\n     bool ok = ctx->lookup_compiled_types (type.get_ty_ref (), &compiled_type);\n     rust_assert (ok);\n     translated = compiled_type;\n   }\n \n-  void visit (TyTy::UintType &type) override\n+  void visit (const TyTy::UintType &type) override\n   {\n     ::Btype *compiled_type = nullptr;\n     bool ok = ctx->lookup_compiled_types (type.get_ty_ref (), &compiled_type);\n     rust_assert (ok);\n     translated = compiled_type;\n   }\n \n-  void visit (TyTy::FloatType &type) override\n+  void visit (const TyTy::FloatType &type) override\n   {\n     ::Btype *compiled_type = nullptr;\n     bool ok = ctx->lookup_compiled_types (type.get_ty_ref (), &compiled_type);\n     rust_assert (ok);\n     translated = compiled_type;\n   }\n \n-  void visit (TyTy::USizeType &type) override\n+  void visit (const TyTy::USizeType &type) override\n   {\n     ::Btype *compiled_type = nullptr;\n     bool ok = ctx->lookup_compiled_types (type.get_ty_ref (), &compiled_type);\n     rust_assert (ok);\n     translated = compiled_type;\n   }\n \n-  void visit (TyTy::ISizeType &type) override\n+  void visit (const TyTy::ISizeType &type) override\n   {\n     ::Btype *compiled_type = nullptr;\n     bool ok = ctx->lookup_compiled_types (type.get_ty_ref (), &compiled_type);\n     rust_assert (ok);\n     translated = compiled_type;\n   }\n \n-  void visit (TyTy::CharType &type) override\n+  void visit (const TyTy::CharType &type) override\n   {\n     ::Btype *compiled_type = nullptr;\n     bool ok = ctx->lookup_compiled_types (type.get_ty_ref (), &compiled_type);\n     rust_assert (ok);\n     translated = compiled_type;\n   }\n \n-  void visit (TyTy::ReferenceType &type) override\n+  void visit (const TyTy::ReferenceType &type) override\n   {\n     Btype *base_compiled_type\n       = TyTyResolveCompile::compile (ctx, type.get_base (), trait_object_mode);\n@@ -583,7 +582,7 @@ class TyTyResolveCompile : public TyTy::TyVisitor\n       }\n   }\n \n-  void visit (TyTy::PointerType &type) override\n+  void visit (const TyTy::PointerType &type) override\n   {\n     Btype *base_compiled_type\n       = TyTyResolveCompile::compile (ctx, type.get_base (), trait_object_mode);\n@@ -598,20 +597,20 @@ class TyTyResolveCompile : public TyTy::TyVisitor\n       }\n   }\n \n-  void visit (TyTy::StrType &type) override\n+  void visit (const TyTy::StrType &type) override\n   {\n     ::Btype *compiled_type = nullptr;\n     bool ok = ctx->lookup_compiled_types (type.get_ty_ref (), &compiled_type);\n     rust_assert (ok);\n     translated = compiled_type;\n   }\n \n-  void visit (TyTy::NeverType &) override\n+  void visit (const TyTy::NeverType &) override\n   {\n     translated = ctx->get_backend ()->unit_type ();\n   }\n \n-  void visit (TyTy::DynamicObjectType &type) override\n+  void visit (const TyTy::DynamicObjectType &type) override\n   {\n     if (trait_object_mode)\n       {\n@@ -661,7 +660,7 @@ class TyTyResolveCompile : public TyTy::TyVisitor\n     ctx->insert_compiled_type (type.get_ty_ref (), named_struct, &type);\n   }\n \n-  void visit (TyTy::ClosureType &type) override { gcc_unreachable (); }\n+  void visit (const TyTy::ClosureType &type) override { gcc_unreachable (); }\n \n private:\n   TyTyResolveCompile (Context *ctx, bool trait_object_mode)"}, {"sha": "ace5e4ce9495b4b0eb617e377cd59b853aefc7ca", "filename": "gcc/rust/backend/rust-compile-implitem.h", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2cd9855d914e760f4c74ac01ad2f7e9378cd80fa/gcc%2Frust%2Fbackend%2Frust-compile-implitem.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2cd9855d914e760f4c74ac01ad2f7e9378cd80fa/gcc%2Frust%2Fbackend%2Frust-compile-implitem.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fbackend%2Frust-compile-implitem.h?ref=2cd9855d914e760f4c74ac01ad2f7e9378cd80fa", "patch": "@@ -34,7 +34,7 @@ class CompileInherentImplItem : public HIRCompileBase\n   using Rust::Compile::HIRCompileBase::visit;\n \n public:\n-  static Bexpression *Compile (TyTy::BaseType *self, HIR::ImplItem *item,\n+  static Bexpression *Compile (const TyTy::BaseType *self, HIR::ImplItem *item,\n \t\t\t       Context *ctx, bool compile_fns,\n \t\t\t       TyTy::BaseType *concrete = nullptr,\n \t\t\t       bool is_query_mode = false,\n@@ -309,14 +309,15 @@ class CompileInherentImplItem : public HIRCompileBase\n   }\n \n private:\n-  CompileInherentImplItem (TyTy::BaseType *self, Context *ctx, bool compile_fns,\n-\t\t\t   TyTy::BaseType *concrete, Location ref_locus)\n+  CompileInherentImplItem (const TyTy::BaseType *self, Context *ctx,\n+\t\t\t   bool compile_fns, TyTy::BaseType *concrete,\n+\t\t\t   Location ref_locus)\n     : HIRCompileBase (ctx), self (self), compile_fns (compile_fns),\n       concrete (concrete), reference (ctx->get_backend ()->error_expression ()),\n       ref_locus (ref_locus)\n   {}\n \n-  TyTy::BaseType *self;\n+  const TyTy::BaseType *self;\n   bool compile_fns;\n   TyTy::BaseType *concrete;\n   Bexpression *reference;"}, {"sha": "56d3e409a8451ae74eb4bb573528b499dfdbddcc", "filename": "gcc/rust/backend/rust-compile.cc", "status": "modified", "additions": 10, "deletions": 9, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2cd9855d914e760f4c74ac01ad2f7e9378cd80fa/gcc%2Frust%2Fbackend%2Frust-compile.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2cd9855d914e760f4c74ac01ad2f7e9378cd80fa/gcc%2Frust%2Fbackend%2Frust-compile.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fbackend%2Frust-compile.cc?ref=2cd9855d914e760f4c74ac01ad2f7e9378cd80fa", "patch": "@@ -234,8 +234,8 @@ CompileExpr::visit (HIR::MethodCallExpr &expr)\n \n   if (is_dyn_dispatch)\n     {\n-      TyTy::DynamicObjectType *dyn\n-\t= static_cast<TyTy::DynamicObjectType *> (receiver->get_root ());\n+      const TyTy::DynamicObjectType *dyn\n+\t= static_cast<const TyTy::DynamicObjectType *> (receiver->get_root ());\n \n       size_t offs = 0;\n       const Resolver::TraitItemReference *ref = nullptr;\n@@ -763,8 +763,8 @@ HIRCompileBase::coercion_site (Bexpression *compiled_ref,\n   if (root_expected_kind == TyTy::TypeKind::DYNAMIC\n       && root_actual_kind != TyTy::TypeKind::DYNAMIC)\n     {\n-      TyTy::DynamicObjectType *dyn\n-\t= static_cast<TyTy::DynamicObjectType *> (expected->get_root ());\n+      const TyTy::DynamicObjectType *dyn\n+\t= static_cast<const TyTy::DynamicObjectType *> (expected->get_root ());\n       return coerce_to_dyn_object (compiled_ref, actual, expected, dyn, locus);\n     }\n \n@@ -773,9 +773,9 @@ HIRCompileBase::coercion_site (Bexpression *compiled_ref,\n \n Bexpression *\n HIRCompileBase::coerce_to_dyn_object (Bexpression *compiled_ref,\n-\t\t\t\t      TyTy::BaseType *actual,\n-\t\t\t\t      TyTy::BaseType *expected,\n-\t\t\t\t      TyTy::DynamicObjectType *ty,\n+\t\t\t\t      const TyTy::BaseType *actual,\n+\t\t\t\t      const TyTy::BaseType *expected,\n+\t\t\t\t      const TyTy::DynamicObjectType *ty,\n \t\t\t\t      Location locus)\n {\n   Btype *dynamic_object = TyTyResolveCompile::compile (ctx, ty);\n@@ -814,7 +814,7 @@ HIRCompileBase::coerce_to_dyn_object (Bexpression *compiled_ref,\n   std::vector<Resolver::Adjustment> adjustments;\n   while (e->get_kind () == TyTy::TypeKind::REF)\n     {\n-      auto r = static_cast<TyTy::ReferenceType *> (e);\n+      auto r = static_cast<const TyTy::ReferenceType *> (e);\n       e = r->get_base ();\n \n       if (r->is_mutable ())\n@@ -845,7 +845,8 @@ HIRCompileBase::coerce_to_dyn_object (Bexpression *compiled_ref,\n \n Bexpression *\n HIRCompileBase::compute_address_for_trait_item (\n-  const Resolver::TraitItemReference *trait_item_ref, TyTy::BaseType *receiver)\n+  const Resolver::TraitItemReference *trait_item_ref,\n+  const TyTy::BaseType *receiver)\n {\n   TyTy::BaseType *item_type = trait_item_ref->get_tyty ();\n   rust_assert (item_type->get_kind () == TyTy::TypeKind::FNDEF);"}, {"sha": "3604910a6255a46bd3319cf2ed7237ba83c4ed86", "filename": "gcc/rust/typecheck/rust-autoderef.h", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2cd9855d914e760f4c74ac01ad2f7e9378cd80fa/gcc%2Frust%2Ftypecheck%2Frust-autoderef.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2cd9855d914e760f4c74ac01ad2f7e9378cd80fa/gcc%2Frust%2Ftypecheck%2Frust-autoderef.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-autoderef.h?ref=2cd9855d914e760f4c74ac01ad2f7e9378cd80fa", "patch": "@@ -34,13 +34,13 @@ class Adjustment\n     DEREF_REF\n   };\n \n-  Adjustment (AdjustmentType type, TyTy::BaseType *expected)\n+  Adjustment (AdjustmentType type, const TyTy::BaseType *expected)\n     : type (type), expected (expected)\n   {}\n \n   AdjustmentType get_type () const { return type; }\n \n-  TyTy::BaseType *get_expected () const { return expected; }\n+  const TyTy::BaseType *get_expected () const { return expected; }\n \n   std::string as_string () const\n   {\n@@ -65,7 +65,7 @@ class Adjustment\n \n private:\n   AdjustmentType type;\n-  TyTy::BaseType *expected;\n+  const TyTy::BaseType *expected;\n };\n \n } // namespace Resolver"}, {"sha": "9c0cc431c2a5aaf9db09b9bd6f47bded65251207", "filename": "gcc/rust/typecheck/rust-hir-dot-operator.h", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2cd9855d914e760f4c74ac01ad2f7e9378cd80fa/gcc%2Frust%2Ftypecheck%2Frust-hir-dot-operator.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2cd9855d914e760f4c74ac01ad2f7e9378cd80fa/gcc%2Frust%2Ftypecheck%2Frust-hir-dot-operator.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-hir-dot-operator.h?ref=2cd9855d914e760f4c74ac01ad2f7e9378cd80fa", "patch": "@@ -35,10 +35,10 @@ class MethodResolution\n {\n public:\n   static PathProbeCandidate *\n-  Select (std::vector<PathProbeCandidate> &candidates, TyTy::BaseType *receiver,\n-\t  std::vector<Adjustment> &adjustments)\n+  Select (std::vector<PathProbeCandidate> &candidates,\n+\t  const TyTy::BaseType *receiver, std::vector<Adjustment> &adjustments)\n   {\n-    TyTy::BaseType *r = receiver;\n+    const TyTy::BaseType *r = receiver;\n     while (true)\n       {\n \tPathProbeCandidate *c = nullptr;\n@@ -80,7 +80,8 @@ class MethodResolution\n \t// FIXME this needs to use deref trait and fall back to unsized to\n \t// remove array syntax\n \n-\tTyTy::ReferenceType *rr = static_cast<TyTy::ReferenceType *> (r);\n+\tconst TyTy::ReferenceType *rr\n+\t  = static_cast<const TyTy::ReferenceType *> (r);\n \tr = rr->get_base ();\n \tadjustments.push_back (\n \t  Adjustment (Adjustment::AdjustmentType::DEREF_REF, r));"}, {"sha": "83fafa66ee58e436dfddf6f46611c8fc11011cd2", "filename": "gcc/rust/typecheck/rust-hir-type-check-expr.h", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2cd9855d914e760f4c74ac01ad2f7e9378cd80fa/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-expr.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2cd9855d914e760f4c74ac01ad2f7e9378cd80fa/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-expr.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-expr.h?ref=2cd9855d914e760f4c74ac01ad2f7e9378cd80fa", "patch": "@@ -219,7 +219,7 @@ class TypeCheckExpr : public TypeCheckBase\n \n     // in order to probe of the correct type paths we need the root type, which\n     // strips any references\n-    TyTy::BaseType *root = receiver_tyty->get_root ();\n+    const TyTy::BaseType *root = receiver_tyty->get_root ();\n \n     // https://doc.rust-lang.org/reference/expressions/method-call-expr.html\n     // method resolution is complex in rust once we start handling generics and\n@@ -297,7 +297,7 @@ class TypeCheckExpr : public TypeCheckBase\n \n     if (root->get_kind () == TyTy::TypeKind::ADT)\n       {\n-\tTyTy::ADTType *adt = static_cast<TyTy::ADTType *> (root);\n+\tconst TyTy::ADTType *adt = static_cast<const TyTy::ADTType *> (root);\n \tif (adt->has_substitutions () && fn->needs_substitution ())\n \t  {\n \t    // consider the case where we have:\n@@ -322,7 +322,8 @@ class TypeCheckExpr : public TypeCheckBase\n \t    auto s = fn->get_self_type ()->get_root ();\n \t    rust_assert (s->can_eq (adt, false));\n \t    rust_assert (s->get_kind () == TyTy::TypeKind::ADT);\n-\t    TyTy::ADTType *self_adt = static_cast<TyTy::ADTType *> (s);\n+\t    const TyTy::ADTType *self_adt\n+\t      = static_cast<const TyTy::ADTType *> (s);\n \n \t    // we need to grab the Self substitutions as the inherit type\n \t    // parameters for this"}, {"sha": "b7c23fb19c3d768c1d8c9abc63a934baf3af2d23", "filename": "gcc/rust/typecheck/rust-substitution-mapper.h", "status": "modified", "additions": 25, "deletions": 25, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2cd9855d914e760f4c74ac01ad2f7e9378cd80fa/gcc%2Frust%2Ftypecheck%2Frust-substitution-mapper.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2cd9855d914e760f4c74ac01ad2f7e9378cd80fa/gcc%2Frust%2Ftypecheck%2Frust-substitution-mapper.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-substitution-mapper.h?ref=2cd9855d914e760f4c74ac01ad2f7e9378cd80fa", "patch": "@@ -317,51 +317,51 @@ class SubstMapperFromExisting : public TyTy::TyVisitor\n   TyTy::BaseType *resolved;\n };\n \n-class GetUsedSubstArgs : public TyTy::TyVisitor\n+class GetUsedSubstArgs : public TyTy::TyConstVisitor\n {\n public:\n-  static TyTy::SubstitutionArgumentMappings From (TyTy::BaseType *from)\n+  static TyTy::SubstitutionArgumentMappings From (const TyTy::BaseType *from)\n   {\n     GetUsedSubstArgs mapper;\n     from->accept_vis (mapper);\n     return mapper.args;\n   }\n \n-  void visit (TyTy::FnType &type) override\n+  void visit (const TyTy::FnType &type) override\n   {\n     args = type.get_substitution_arguments ();\n   }\n \n-  void visit (TyTy::ADTType &type) override\n+  void visit (const TyTy::ADTType &type) override\n   {\n     args = type.get_substitution_arguments ();\n   }\n \n-  void visit (TyTy::ClosureType &type) override\n+  void visit (const TyTy::ClosureType &type) override\n   {\n     args = type.get_substitution_arguments ();\n   }\n \n-  void visit (TyTy::InferType &) override {}\n-  void visit (TyTy::TupleType &) override {}\n-  void visit (TyTy::FnPtr &) override {}\n-  void visit (TyTy::ArrayType &) override {}\n-  void visit (TyTy::BoolType &) override {}\n-  void visit (TyTy::IntType &) override {}\n-  void visit (TyTy::UintType &) override {}\n-  void visit (TyTy::FloatType &) override {}\n-  void visit (TyTy::USizeType &) override {}\n-  void visit (TyTy::ISizeType &) override {}\n-  void visit (TyTy::ErrorType &) override {}\n-  void visit (TyTy::CharType &) override {}\n-  void visit (TyTy::ReferenceType &) override {}\n-  void visit (TyTy::PointerType &) override {}\n-  void visit (TyTy::ParamType &) override {}\n-  void visit (TyTy::StrType &) override {}\n-  void visit (TyTy::NeverType &) override {}\n-  void visit (TyTy::PlaceholderType &) override {}\n-  void visit (TyTy::ProjectionType &) override {}\n-  void visit (TyTy::DynamicObjectType &) override {}\n+  void visit (const TyTy::InferType &) override {}\n+  void visit (const TyTy::TupleType &) override {}\n+  void visit (const TyTy::FnPtr &) override {}\n+  void visit (const TyTy::ArrayType &) override {}\n+  void visit (const TyTy::BoolType &) override {}\n+  void visit (const TyTy::IntType &) override {}\n+  void visit (const TyTy::UintType &) override {}\n+  void visit (const TyTy::FloatType &) override {}\n+  void visit (const TyTy::USizeType &) override {}\n+  void visit (const TyTy::ISizeType &) override {}\n+  void visit (const TyTy::ErrorType &) override {}\n+  void visit (const TyTy::CharType &) override {}\n+  void visit (const TyTy::ReferenceType &) override {}\n+  void visit (const TyTy::PointerType &) override {}\n+  void visit (const TyTy::ParamType &) override {}\n+  void visit (const TyTy::StrType &) override {}\n+  void visit (const TyTy::NeverType &) override {}\n+  void visit (const TyTy::PlaceholderType &) override {}\n+  void visit (const TyTy::ProjectionType &) override {}\n+  void visit (const TyTy::DynamicObjectType &) override {}\n \n private:\n   GetUsedSubstArgs () : args (TyTy::SubstitutionArgumentMappings::error ()) {}"}, {"sha": "969360eadca5b9ee34eee9ecb3070a456f840d38", "filename": "gcc/rust/typecheck/rust-tyty.cc", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2cd9855d914e760f4c74ac01ad2f7e9378cd80fa/gcc%2Frust%2Ftypecheck%2Frust-tyty.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2cd9855d914e760f4c74ac01ad2f7e9378cd80fa/gcc%2Frust%2Ftypecheck%2Frust-tyty.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-tyty.cc?ref=2cd9855d914e760f4c74ac01ad2f7e9378cd80fa", "patch": "@@ -114,13 +114,13 @@ BaseType::inherit_bounds (\n     }\n }\n \n-BaseType *\n-BaseType::get_root ()\n+const BaseType *\n+BaseType::get_root () const\n {\n-  BaseType *root = this;\n+  const BaseType *root = this;\n   while (root->get_kind () == TyTy::REF)\n     {\n-      ReferenceType *r = static_cast<ReferenceType *> (root);\n+      const ReferenceType *r = static_cast<const ReferenceType *> (root);\n       root = r->get_base ();\n     }\n   return root;\n@@ -480,14 +480,14 @@ SubstitutionRef::adjust_mappings_for_this (\n // this new substitution reference so ordering matters here\n SubstitutionArgumentMappings\n SubstitutionRef::solve_mappings_from_receiver_for_self (\n-  SubstitutionArgumentMappings &mappings)\n+  SubstitutionArgumentMappings &mappings) const\n {\n   std::vector<SubstitutionArg> resolved_mappings;\n \n   rust_assert (mappings.size () == get_num_substitutions ());\n   for (size_t i = 0; i < get_num_substitutions (); i++)\n     {\n-      SubstitutionParamMapping &param_mapping = substitutions.at (i);\n+      const SubstitutionParamMapping &param_mapping = substitutions.at (i);\n       SubstitutionArg &arg = mappings.get_mappings ().at (i);\n \n       if (param_mapping.needs_substitution ())"}, {"sha": "f726069e9db54fcf444abbbc87b49fb3ab27109f", "filename": "gcc/rust/typecheck/rust-tyty.h", "status": "modified", "additions": 8, "deletions": 7, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2cd9855d914e760f4c74ac01ad2f7e9378cd80fa/gcc%2Frust%2Ftypecheck%2Frust-tyty.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2cd9855d914e760f4c74ac01ad2f7e9378cd80fa/gcc%2Frust%2Ftypecheck%2Frust-tyty.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-tyty.h?ref=2cd9855d914e760f4c74ac01ad2f7e9378cd80fa", "patch": "@@ -337,7 +337,7 @@ class BaseType : public TypeBoundsMappings\n \t\tdebug_str ().c_str ());\n   }\n \n-  BaseType *get_root ();\n+  const BaseType *get_root () const;\n \n protected:\n   BaseType (HirId ref, HirId ty_ref, TypeKind kind,\n@@ -690,7 +690,7 @@ class SubstitutionParamMapping\n class SubstitutionArg\n {\n public:\n-  SubstitutionArg (SubstitutionParamMapping *param, BaseType *argument)\n+  SubstitutionArg (const SubstitutionParamMapping *param, BaseType *argument)\n     : param (std::move (param)), argument (argument)\n   {}\n \n@@ -707,7 +707,7 @@ class SubstitutionArg\n \n   BaseType *get_tyty () { return argument; }\n \n-  SubstitutionParamMapping *get_param_mapping () { return param; }\n+  const SubstitutionParamMapping *get_param_mapping () { return param; }\n \n   static SubstitutionArg error () { return SubstitutionArg (nullptr, nullptr); }\n \n@@ -725,7 +725,7 @@ class SubstitutionArg\n   }\n \n private:\n-  SubstitutionParamMapping *param;\n+  const SubstitutionParamMapping *param;\n   BaseType *argument;\n };\n \n@@ -761,7 +761,7 @@ class SubstitutionArgumentMappings\n   {\n     for (auto &mapping : mappings)\n       {\n-\tSubstitutionParamMapping *param = mapping.get_param_mapping ();\n+\tconst SubstitutionParamMapping *param = mapping.get_param_mapping ();\n \tconst ParamType *p = param->get_param_ty ();\n \n \tif (p->get_symbol ().compare (param_to_find->get_symbol ()) == 0)\n@@ -884,7 +884,7 @@ class SubstitutionRef\n \n   bool was_substituted () const { return !needs_substitution (); }\n \n-  SubstitutionArgumentMappings get_substitution_arguments ()\n+  SubstitutionArgumentMappings get_substitution_arguments () const\n   {\n     return used_arguments;\n   }\n@@ -943,7 +943,7 @@ class SubstitutionRef\n   // we need to figure out relevant generic arguemts for self to apply to the\n   // fntype\n   SubstitutionArgumentMappings solve_mappings_from_receiver_for_self (\n-    SubstitutionArgumentMappings &mappings);\n+    SubstitutionArgumentMappings &mappings) const;\n \n   BaseType *infer_substitions (Location locus)\n   {\n@@ -1893,6 +1893,7 @@ class ProjectionType : public BaseType, public SubstitutionRef\n     return has_substitutions ();\n   }\n \n+  const BaseType *get () const { return base; }\n   BaseType *get () { return base; }\n \n   bool contains_type_parameters () const override"}]}