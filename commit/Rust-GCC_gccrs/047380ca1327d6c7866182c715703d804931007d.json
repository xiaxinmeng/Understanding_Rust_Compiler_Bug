{"sha": "047380ca1327d6c7866182c715703d804931007d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDQ3MzgwY2ExMzI3ZDZjNzg2NjE4MmM3MTU3MDNkODA0OTMxMDA3ZA==", "commit": {"author": {"name": "Paul Eggert", "email": "eggert@gnu.org", "date": "1996-01-18T00:12:52Z"}, "committer": {"name": "Paul Eggert", "email": "eggert@gnu.org", "date": "1996-01-18T00:12:52Z"}, "message": "(PTR_INT_TYPE): Remove obsolete define to `long'.\n\n(parse_escape, parse_c_expression, eval_if_expression, get_lintcmd, do_line,\ndo_if, do_elif): Replace `long' with `HOST_WIDE_INT'.\n(trigraph_pcp): Don't assume a pointer difference fits in an int.\n\nFrom-SVN: r11060", "tree": {"sha": "8202caaf3a3a5be7e56bfa75b1d98a4c8c93a214", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8202caaf3a3a5be7e56bfa75b1d98a4c8c93a214"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/047380ca1327d6c7866182c715703d804931007d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/047380ca1327d6c7866182c715703d804931007d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/047380ca1327d6c7866182c715703d804931007d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/047380ca1327d6c7866182c715703d804931007d/comments", "author": null, "committer": null, "parents": [{"sha": "34ea783bd582e392bb7e1b7ee5435601d528ab03", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/34ea783bd582e392bb7e1b7ee5435601d528ab03", "html_url": "https://github.com/Rust-GCC/gccrs/commit/34ea783bd582e392bb7e1b7ee5435601d528ab03"}], "stats": {"total": 32, "additions": 13, "deletions": 19}, "files": [{"sha": "8c9c803c4d1d3feb8fcb13fefd315972256b50bc", "filename": "gcc/cccp.c", "status": "modified", "additions": 13, "deletions": 19, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/047380ca1327d6c7866182c715703d804931007d/gcc%2Fcccp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/047380ca1327d6c7866182c715703d804931007d/gcc%2Fcccp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcccp.c?ref=047380ca1327d6c7866182c715703d804931007d", "patch": "@@ -48,14 +48,6 @@ typedef unsigned char U_CHAR;\n #define LOCAL_INCLUDE_DIR \"/usr/local/include\"\n #endif\n \n-#if 0 /* We can't get ptrdiff_t, so I arranged not to need PTR_INT_TYPE.  */\n-#ifdef __STDC__\n-#define PTR_INT_TYPE ptrdiff_t\n-#else\n-#define PTR_INT_TYPE long\n-#endif\n-#endif /* 0 */\n-\n #include \"pcp.h\"\n \n /* By default, colon separates directories in a path.  */\n@@ -263,7 +255,8 @@ static void hack_vms_include_specification ();\n #define MIN(X,Y) ((X) < (Y) ? (X) : (Y))\n #define MAX(X,Y) ((X) > (Y) ? (X) : (Y))\n \n-/* Find the largest host integer type and set its size and type.  */\n+/* Find the largest host integer type and set its size and type.\n+   Don't blindly use `long'; on some crazy hosts it is shorter than `int'.  */\n \n #ifndef HOST_BITS_PER_WIDE_INT\n \n@@ -332,8 +325,8 @@ char *strerror ();\n #else\t/* VMS */\n char *strerror (int,...);\n #endif\n-long parse_escape PROTO((char **, long));\n-long parse_c_expression PROTO((char *));\n+HOST_WIDE_INT parse_escape PROTO((char **, HOST_WIDE_INT));\n+HOST_WIDE_INT parse_c_expression PROTO((char *));\n \n #ifndef errno\n extern int errno;\n@@ -1147,7 +1140,7 @@ static void delete_assertion PROTO((ASSERTION_HASHNODE *));\n \n static void do_once PROTO((void));\n \n-static long eval_if_expression PROTO((U_CHAR *, int));\n+static HOST_WIDE_INT eval_if_expression PROTO((U_CHAR *, int));\n static void conditional_skip PROTO((FILE_BUF *, int, enum node_type, U_CHAR *, FILE_BUF *));\n static void skip_if_group PROTO((FILE_BUF *, int, FILE_BUF *));\n static void validate_else PROTO((U_CHAR *));\n@@ -2422,7 +2415,8 @@ trigraph_pcp (buf)\n   buf->length -= fptr - bptr;\n   buf->buf[buf->length] = '\\0';\n   if (warn_trigraphs && fptr != bptr)\n-    warning_with_line (0, \"%d trigraph(s) encountered\", (fptr - bptr) / 2);\n+    warning_with_line (0, \"%lu trigraph(s) encountered\",\n+\t\t       (unsigned long) (fptr - bptr) / 2);\n }\n \f\n /* Move all backslash-newline pairs out of embarrassing places.\n@@ -2512,7 +2506,7 @@ get_lintcmd (ibp, limit, argstart, arglen, cmdlen)\n      U_CHAR **argstart;\t\t/* point to command arg */\n      int *arglen, *cmdlen;\t/* how long they are */\n {\n-  long linsize;\n+  HOST_WIDE_INT linsize;\n   register U_CHAR *numptr;\t/* temp for arg parsing */\n \n   *arglen = 0;\n@@ -6584,7 +6578,7 @@ do_line (buf, limit, op, keyword)\n       case '\\\\':\n \t{\n \t  char *bpc = (char *) bp;\n-\t  long c = parse_escape (&bpc, (long) (U_CHAR) (-1));\n+\t  HOST_WIDE_INT c = parse_escape (&bpc, (HOST_WIDE_INT) (U_CHAR) (-1));\n \t  bp = (U_CHAR *) bpc;\n \t  if (c < 0)\n \t    p--;\n@@ -6906,7 +6900,7 @@ do_if (buf, limit, op, keyword)\n      FILE_BUF *op;\n      struct directive *keyword;\n {\n-  long value;\n+  HOST_WIDE_INT value;\n   FILE_BUF *ip = &instack[indepth];\n \n   value = eval_if_expression (buf, limit - buf);\n@@ -6925,7 +6919,7 @@ do_elif (buf, limit, op, keyword)\n      FILE_BUF *op;\n      struct directive *keyword;\n {\n-  long value;\n+  HOST_WIDE_INT value;\n   FILE_BUF *ip = &instack[indepth];\n \n   if (if_stack == instack[indepth].if_stack) {\n@@ -6961,14 +6955,14 @@ do_elif (buf, limit, op, keyword)\n  * evaluate a #if expression in BUF, of length LENGTH,\n  * then parse the result as a C expression and return the value as an int.\n  */\n-static long\n+static HOST_WIDE_INT\n eval_if_expression (buf, length)\n      U_CHAR *buf;\n      int length;\n {\n   FILE_BUF temp_obuf;\n   HASHNODE *save_defined;\n-  long value;\n+  HOST_WIDE_INT value;\n \n   save_defined = install ((U_CHAR *) \"defined\", -1, T_SPEC_DEFINED,\n \t\t\t  NULL_PTR, -1);"}]}