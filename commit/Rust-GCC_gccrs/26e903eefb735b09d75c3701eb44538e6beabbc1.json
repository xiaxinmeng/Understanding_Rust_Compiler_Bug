{"sha": "26e903eefb735b09d75c3701eb44538e6beabbc1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjZlOTAzZWVmYjczNWIwOWQ3NWMzNzAxZWI0NDUzOGU2YmVhYmJjMQ==", "commit": {"author": {"name": "Bruce Korb", "email": "bkorb@gnu.org", "date": "2000-05-30T19:41:37Z"}, "committer": {"name": "Bruce Korb", "email": "korbb@gcc.gnu.org", "date": "2000-05-30T19:41:37Z"}, "message": "diff of diff does not work well, so use expected test result files\n\nFrom-SVN: r34270", "tree": {"sha": "f9fff6b66f38d9c71b9380d1bf5cca725944d4d1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f9fff6b66f38d9c71b9380d1bf5cca725944d4d1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/26e903eefb735b09d75c3701eb44538e6beabbc1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/26e903eefb735b09d75c3701eb44538e6beabbc1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/26e903eefb735b09d75c3701eb44538e6beabbc1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/26e903eefb735b09d75c3701eb44538e6beabbc1/comments", "author": {"login": "brkorb", "id": 1242936, "node_id": "MDQ6VXNlcjEyNDI5MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1242936?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brkorb", "html_url": "https://github.com/brkorb", "followers_url": "https://api.github.com/users/brkorb/followers", "following_url": "https://api.github.com/users/brkorb/following{/other_user}", "gists_url": "https://api.github.com/users/brkorb/gists{/gist_id}", "starred_url": "https://api.github.com/users/brkorb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brkorb/subscriptions", "organizations_url": "https://api.github.com/users/brkorb/orgs", "repos_url": "https://api.github.com/users/brkorb/repos", "events_url": "https://api.github.com/users/brkorb/events{/privacy}", "received_events_url": "https://api.github.com/users/brkorb/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "54ae96de89f391cd76bbd0bfab208b54e71804ec", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/54ae96de89f391cd76bbd0bfab208b54e71804ec", "html_url": "https://github.com/Rust-GCC/gccrs/commit/54ae96de89f391cd76bbd0bfab208b54e71804ec"}], "stats": {"total": 703, "additions": 703, "deletions": 0}, "files": [{"sha": "f625ed8b4bcecb2ab7c1e3a1ef52424885ef1f21", "filename": "gcc/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/26e903eefb735b09d75c3701eb44538e6beabbc1/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/26e903eefb735b09d75c3701eb44538e6beabbc1/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=26e903eefb735b09d75c3701eb44538e6beabbc1", "patch": "@@ -1,3 +1,7 @@\n+2000-05-30  Bruce Korb  <bkorb@gnu.org>\n+\n+\t* fixinc/tests/*:  Added expected result files for fixinc's make check\n+\n 2000-05-30  Richard Henderson  <rth@cygnus.com>\n \n \t* config/alpha/alpha.md (*setne_internal): Use match_operator"}, {"sha": "49754bbb6f0add784bb5f59f61ed6b52ab5d54a2", "filename": "gcc/fixinc/tests/base/X11/Intrinsic.h", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/26e903eefb735b09d75c3701eb44538e6beabbc1/gcc%2Ffixinc%2Ftests%2Fbase%2FX11%2FIntrinsic.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/26e903eefb735b09d75c3701eb44538e6beabbc1/gcc%2Ffixinc%2Ftests%2Fbase%2FX11%2FIntrinsic.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffixinc%2Ftests%2Fbase%2FX11%2FIntrinsic.h?ref=26e903eefb735b09d75c3701eb44538e6beabbc1", "patch": "@@ -0,0 +1,5 @@\n+\n+\n+#if defined( ARM_NORCROFT_HINT_CHECK )\n+p_type mumble;\n+#endif  /* ARM_NORCROFT_HINT_CHECK */"}, {"sha": "a89992b61eed00d87c3fcd7708a3be064cff1e4b", "filename": "gcc/fixinc/tests/base/X11/ShellP.h", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/26e903eefb735b09d75c3701eb44538e6beabbc1/gcc%2Ffixinc%2Ftests%2Fbase%2FX11%2FShellP.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/26e903eefb735b09d75c3701eb44538e6beabbc1/gcc%2Ffixinc%2Ftests%2Fbase%2FX11%2FShellP.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffixinc%2Ftests%2Fbase%2FX11%2FShellP.h?ref=26e903eefb735b09d75c3701eb44538e6beabbc1", "patch": "@@ -0,0 +1,12 @@\n+\n+\n+#if defined( X11_CLASS_CHECK )\n+struct {\n+#ifdef __cplusplus\n+\tchar *c_class;\n+#else\n+   char *class;\n+#endif\n+} mumble;\n+\n+#endif  /* X11_CLASS_CHECK */"}, {"sha": "033a29d235cf749ac1158baa4a50c652e2e3b7a4", "filename": "gcc/fixinc/tests/base/X11/Xmu.h", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/26e903eefb735b09d75c3701eb44538e6beabbc1/gcc%2Ffixinc%2Ftests%2Fbase%2FX11%2FXmu.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/26e903eefb735b09d75c3701eb44538e6beabbc1/gcc%2Ffixinc%2Ftests%2Fbase%2FX11%2FXmu.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffixinc%2Ftests%2Fbase%2FX11%2FXmu.h?ref=26e903eefb735b09d75c3701eb44538e6beabbc1", "patch": "@@ -0,0 +1,7 @@\n+\n+\n+#if defined( X11_SPRINTF_CHECK )\n+#ifndef __STDC__\n+extern char *\tsprintf();\n+#endif /* !defined __STDC__ */\n+#endif  /* X11_SPRINTF_CHECK */"}, {"sha": "464f2df1d44efe8fa1ea43baf79528590f070c24", "filename": "gcc/fixinc/tests/base/Xm/BaseClassI.h", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/26e903eefb735b09d75c3701eb44538e6beabbc1/gcc%2Ffixinc%2Ftests%2Fbase%2FXm%2FBaseClassI.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/26e903eefb735b09d75c3701eb44538e6beabbc1/gcc%2Ffixinc%2Ftests%2Fbase%2FXm%2FBaseClassI.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffixinc%2Ftests%2Fbase%2FXm%2FBaseClassI.h?ref=26e903eefb735b09d75c3701eb44538e6beabbc1", "patch": "@@ -0,0 +1,6 @@\n+\n+\n+#if defined( X11_CLASS_USAGE_CHECK )\n+extern mumble (int  c_class);\n+\n+#endif  /* X11_CLASS_USAGE_CHECK */"}, {"sha": "783b7181f2376d6ca2a4d91d179bf85bf6bf4c7f", "filename": "gcc/fixinc/tests/base/Xm/Traversal.h", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/26e903eefb735b09d75c3701eb44538e6beabbc1/gcc%2Ffixinc%2Ftests%2Fbase%2FXm%2FTraversal.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/26e903eefb735b09d75c3701eb44538e6beabbc1/gcc%2Ffixinc%2Ftests%2Fbase%2FXm%2FTraversal.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffixinc%2Ftests%2Fbase%2FXm%2FTraversal.h?ref=26e903eefb735b09d75c3701eb44538e6beabbc1", "patch": "@@ -0,0 +1,12 @@\n+\n+\n+#if defined( X11_NEW_CHECK )\n+struct wedge {\n+#ifdef __cplusplus\n+\tWidget\told, c_new;\n+#else\n+   Widget\told, new; /* fix the new */\n+#endif\n+};\n+extern Wedged( Widget c_new, Widget old );\n+#endif  /* X11_NEW_CHECK */"}, {"sha": "11f160f9ee96fe3852dc2ecdab468c876ffd6aeb", "filename": "gcc/fixinc/tests/base/ansi/math.h", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/26e903eefb735b09d75c3701eb44538e6beabbc1/gcc%2Ffixinc%2Ftests%2Fbase%2Fansi%2Fmath.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/26e903eefb735b09d75c3701eb44538e6beabbc1/gcc%2Ffixinc%2Ftests%2Fbase%2Fansi%2Fmath.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffixinc%2Ftests%2Fbase%2Fansi%2Fmath.h?ref=26e903eefb735b09d75c3701eb44538e6beabbc1", "patch": "@@ -0,0 +1,5 @@\n+\n+\n+#if defined( NEXT_MATH_PREFIX_CHECK )\n+extern double mumble();\n+#endif  /* NEXT_MATH_PREFIX_CHECK */"}, {"sha": "69045d7dbcef808c2026562c5cab7eb844dedef2", "filename": "gcc/fixinc/tests/base/ansi/stdlib.h", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/26e903eefb735b09d75c3701eb44538e6beabbc1/gcc%2Ffixinc%2Ftests%2Fbase%2Fansi%2Fstdlib.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/26e903eefb735b09d75c3701eb44538e6beabbc1/gcc%2Ffixinc%2Ftests%2Fbase%2Fansi%2Fstdlib.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffixinc%2Ftests%2Fbase%2Fansi%2Fstdlib.h?ref=26e903eefb735b09d75c3701eb44538e6beabbc1", "patch": "@@ -0,0 +1,5 @@\n+\n+\n+#if defined( NEXT_VOLITILE_CHECK )\n+extern void abort();\n+#endif  /* NEXT_VOLITILE_CHECK */"}, {"sha": "1a268671fb53917cc67311f851c2fee66395e25b", "filename": "gcc/fixinc/tests/base/assert.h", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/26e903eefb735b09d75c3701eb44538e6beabbc1/gcc%2Ffixinc%2Ftests%2Fbase%2Fassert.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/26e903eefb735b09d75c3701eb44538e6beabbc1/gcc%2Ffixinc%2Ftests%2Fbase%2Fassert.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffixinc%2Ftests%2Fbase%2Fassert.h?ref=26e903eefb735b09d75c3701eb44538e6beabbc1", "patch": "@@ -0,0 +1,24 @@\n+#ifndef FIXINC_BROKEN_ASSERT_STDLIB_CHECK\n+#define FIXINC_BROKEN_ASSERT_STDLIB_CHECK 1\n+\n+#ifdef __cplusplus\n+#include <stdlib.h>\n+#endif\n+#ifndef FIXINC_BROKEN_ASSERT_STDIO_CHECK\n+#define FIXINC_BROKEN_ASSERT_STDIO_CHECK 1\n+\n+#include <stdio.h>\n+\n+\n+#if defined( BROKEN_ASSERT_STDIO_CHECK )\n+extern FILE* stderr;\n+#endif  /* BROKEN_ASSERT_STDIO_CHECK */\n+\n+\n+#if defined( BROKEN_ASSERT_STDLIB_CHECK )\n+extern void exit ( int );\n+#endif  /* BROKEN_ASSERT_STDLIB_CHECK */\n+\n+#endif  /* FIXINC_BROKEN_ASSERT_STDIO_CHECK */\n+\n+#endif  /* FIXINC_BROKEN_ASSERT_STDLIB_CHECK */"}, {"sha": "4ced1e7f452d59a2f743947f626922f3dac860ea", "filename": "gcc/fixinc/tests/base/bsd/libc.h", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/26e903eefb735b09d75c3701eb44538e6beabbc1/gcc%2Ffixinc%2Ftests%2Fbase%2Fbsd%2Flibc.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/26e903eefb735b09d75c3701eb44538e6beabbc1/gcc%2Ffixinc%2Ftests%2Fbase%2Fbsd%2Flibc.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffixinc%2Ftests%2Fbase%2Fbsd%2Flibc.h?ref=26e903eefb735b09d75c3701eb44538e6beabbc1", "patch": "@@ -0,0 +1,5 @@\n+\n+\n+#if defined( NEXT_TEMPLATE_CHECK )\n+extern mumble( char *); /* fix */\n+#endif  /* NEXT_TEMPLATE_CHECK */"}, {"sha": "b394b34f3c3b4a18c82994dec5c7f108eefd5d30", "filename": "gcc/fixinc/tests/base/c_asm.h", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/26e903eefb735b09d75c3701eb44538e6beabbc1/gcc%2Ffixinc%2Ftests%2Fbase%2Fc_asm.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/26e903eefb735b09d75c3701eb44538e6beabbc1/gcc%2Ffixinc%2Ftests%2Fbase%2Fc_asm.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffixinc%2Ftests%2Fbase%2Fc_asm.h?ref=26e903eefb735b09d75c3701eb44538e6beabbc1", "patch": "@@ -0,0 +1,11 @@\n+\n+\n+#if defined( DEC_INTERN_ASM_CHECK )\n+#ifdef __DECC\n+float fasm {\n+    ... asm stuff ...\n+};\n+#pragma intrinsic( dasm )\n+#endif\n+/* END ASM TEST*/\n+#endif  /* DEC_INTERN_ASM_CHECK */"}, {"sha": "02a6af0ba213d2e17fb90d4ab5fd6c3ab93befe8", "filename": "gcc/fixinc/tests/base/curses.h", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/26e903eefb735b09d75c3701eb44538e6beabbc1/gcc%2Ffixinc%2Ftests%2Fbase%2Fcurses.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/26e903eefb735b09d75c3701eb44538e6beabbc1/gcc%2Ffixinc%2Ftests%2Fbase%2Fcurses.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffixinc%2Ftests%2Fbase%2Fcurses.h?ref=26e903eefb735b09d75c3701eb44538e6beabbc1", "patch": "@@ -0,0 +1,25 @@\n+\n+\n+#if defined( AVOID_BOOL_DEFINE_CHECK )\n+#ifndef __cplusplus\n+# define bool\t char \n+#endif\n+\n+#endif  /* AVOID_BOOL_DEFINE_CHECK */\n+\n+\n+#if defined( AVOID_BOOL_TYPE_CHECK )\n+#ifndef __cplusplus\n+typedef unsigned int\tbool \t; /* bool type */\n+#endif\n+#endif  /* AVOID_BOOL_TYPE_CHECK */\n+\n+\n+#if defined( BAD_STRUCT_TERM_CHECK )\n+struct term;\n+#endif  /* BAD_STRUCT_TERM_CHECK */\n+\n+\n+#if defined( LYNX_VOID_INT_CHECK )\n+/* curses foiled again */\n+#endif  /* LYNX_VOID_INT_CHECK */"}, {"sha": "a937d86fe6f050ae34da30cdb63332efd4a183d2", "filename": "gcc/fixinc/tests/base/fcntl.h", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/26e903eefb735b09d75c3701eb44538e6beabbc1/gcc%2Ffixinc%2Ftests%2Fbase%2Ffcntl.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/26e903eefb735b09d75c3701eb44538e6beabbc1/gcc%2Ffixinc%2Ftests%2Fbase%2Ffcntl.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffixinc%2Ftests%2Fbase%2Ffcntl.h?ref=26e903eefb735b09d75c3701eb44538e6beabbc1", "patch": "@@ -0,0 +1,5 @@\n+\n+\n+#if defined( LYNXOS_FCNTL_PROTO_CHECK )\n+extern int fcntl(int, int, ...);\n+#endif  /* LYNXOS_FCNTL_PROTO_CHECK */"}, {"sha": "2fb9ed5586d1a679a1b0284e7b40d789f0787aad", "filename": "gcc/fixinc/tests/base/hsfs/hsfs_spec.h", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/26e903eefb735b09d75c3701eb44538e6beabbc1/gcc%2Ffixinc%2Ftests%2Fbase%2Fhsfs%2Fhsfs_spec.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/26e903eefb735b09d75c3701eb44538e6beabbc1/gcc%2Ffixinc%2Ftests%2Fbase%2Fhsfs%2Fhsfs_spec.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffixinc%2Ftests%2Fbase%2Fhsfs%2Fhsfs_spec.h?ref=26e903eefb735b09d75c3701eb44538e6beabbc1", "patch": "@@ -0,0 +1,5 @@\n+\n+\n+#if defined( SUN_BOGUS_IFDEF_CHECK )\n+#if  __i386__ || __vax__ || __sun4c__\n+#endif  /* SUN_BOGUS_IFDEF_CHECK */"}, {"sha": "a1086e951cd3c27bee1262e7a5b09b49db271c56", "filename": "gcc/fixinc/tests/base/inttypes.h", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/26e903eefb735b09d75c3701eb44538e6beabbc1/gcc%2Ffixinc%2Ftests%2Fbase%2Finttypes.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/26e903eefb735b09d75c3701eb44538e6beabbc1/gcc%2Ffixinc%2Ftests%2Fbase%2Finttypes.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffixinc%2Ftests%2Fbase%2Finttypes.h?ref=26e903eefb735b09d75c3701eb44538e6beabbc1", "patch": "@@ -0,0 +1,6 @@\n+\n+\n+#if defined( HPUX11_UINT32_C_CHECK )\n+#define CONCAT_U__(__c)\t__CONCAT__(__c,u)\n+#define UINT32_C(__c) __CONCAT__(__c,ul)\n+#endif  /* HPUX11_UINT32_C_CHECK */"}, {"sha": "a645acc2656631792f1e2a437a5b0726c5c61018", "filename": "gcc/fixinc/tests/base/libgen.h", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/26e903eefb735b09d75c3701eb44538e6beabbc1/gcc%2Ffixinc%2Ftests%2Fbase%2Flibgen.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/26e903eefb735b09d75c3701eb44538e6beabbc1/gcc%2Ffixinc%2Ftests%2Fbase%2Flibgen.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffixinc%2Ftests%2Fbase%2Flibgen.h?ref=26e903eefb735b09d75c3701eb44538e6beabbc1", "patch": "@@ -0,0 +1,7 @@\n+\n+\n+#if defined( BAD_LVAL_CHECK )\n+#pragma extern_prefix \"_FOO\"\n+#define something _FOOsomething\n+#define mumble _FOOmumble\n+#endif  /* BAD_LVAL_CHECK */"}, {"sha": "5e16a49c4364d99d757397c1630e520d8fc36e9d", "filename": "gcc/fixinc/tests/base/limits.h", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/26e903eefb735b09d75c3701eb44538e6beabbc1/gcc%2Ffixinc%2Ftests%2Fbase%2Flimits.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/26e903eefb735b09d75c3701eb44538e6beabbc1/gcc%2Ffixinc%2Ftests%2Fbase%2Flimits.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffixinc%2Ftests%2Fbase%2Flimits.h?ref=26e903eefb735b09d75c3701eb44538e6beabbc1", "patch": "@@ -0,0 +1,7 @@\n+\n+\n+#if defined( LIMITS_IFNDEFS_CHECK )\n+#ifndef DBL_DIG\n+ #\tdefine\tDBL_DIG \t 0  /* somthin' */\n+#endif\n+#endif  /* LIMITS_IFNDEFS_CHECK */"}, {"sha": "8e5570e9c9c85aaadbeebf38f2f2c25e4c05af18", "filename": "gcc/fixinc/tests/base/machine/ansi.h", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/26e903eefb735b09d75c3701eb44538e6beabbc1/gcc%2Ffixinc%2Ftests%2Fbase%2Fmachine%2Fansi.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/26e903eefb735b09d75c3701eb44538e6beabbc1/gcc%2Ffixinc%2Ftests%2Fbase%2Fmachine%2Fansi.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffixinc%2Ftests%2Fbase%2Fmachine%2Fansi.h?ref=26e903eefb735b09d75c3701eb44538e6beabbc1", "patch": "@@ -0,0 +1,5 @@\n+\n+\n+#if defined( MACHINE_ANSI_H_VA_LIST_CHECK )\n+ # define _BSD_VA_LIST_\t__builtin_va_list\n+#endif  /* MACHINE_ANSI_H_VA_LIST_CHECK */"}, {"sha": "6181891ed9d67853f30820eb1cf755cbba763c6d", "filename": "gcc/fixinc/tests/base/malloc.h", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/26e903eefb735b09d75c3701eb44538e6beabbc1/gcc%2Ffixinc%2Ftests%2Fbase%2Fmalloc.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/26e903eefb735b09d75c3701eb44538e6beabbc1/gcc%2Ffixinc%2Ftests%2Fbase%2Fmalloc.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffixinc%2Ftests%2Fbase%2Fmalloc.h?ref=26e903eefb735b09d75c3701eb44538e6beabbc1", "patch": "@@ -0,0 +1,9 @@\n+\n+\n+#if defined( SUN_MALLOC_CHECK )\n+typedef void *\tmalloc_t;\n+void\tfree();\n+void*\tmalloc();\n+void*\tcalloc();\n+void*\trealloc();\n+#endif  /* SUN_MALLOC_CHECK */"}, {"sha": "9b2c80d2578ac010cfe126a4948eed7c4eb87469", "filename": "gcc/fixinc/tests/base/math.h", "status": "added", "additions": 101, "deletions": 0, "changes": 101, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/26e903eefb735b09d75c3701eb44538e6beabbc1/gcc%2Ffixinc%2Ftests%2Fbase%2Fmath.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/26e903eefb735b09d75c3701eb44538e6beabbc1/gcc%2Ffixinc%2Ftests%2Fbase%2Fmath.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffixinc%2Ftests%2Fbase%2Fmath.h?ref=26e903eefb735b09d75c3701eb44538e6beabbc1", "patch": "@@ -0,0 +1,101 @@\n+#ifndef FIXINC_SUNOS_MATHERR_DECL_CHECK\n+#define FIXINC_SUNOS_MATHERR_DECL_CHECK 1\n+\n+struct exception;\n+#ifndef FIXINC_MATH_EXCEPTION_CHECK\n+#define FIXINC_MATH_EXCEPTION_CHECK 1\n+\n+#ifdef __cplusplus\n+#define exception __math_exception\n+#endif\n+\n+\n+#if defined( BROKEN_CABS_CHECK )\n+#ifdef __STDC__\n+\n+#else\n+\n+#endif\n+ /* This is a comment\n+                         and it ends here. */\n+#endif  /* BROKEN_CABS_CHECK */\n+\n+\n+#if defined( FIX_HEADER_BREAKAGE_CHECK )\n+extern double floor(), ceil(), fmod(), fabs _PARAMS((double));\n+#endif  /* FIX_HEADER_BREAKAGE_CHECK */\n+\n+\n+#if defined( HPUX11_FABSF_CHECK )\n+#ifdef _PA_RISC\n+#ifndef __cplusplus\n+#  define fabsf(x) ((float)fabs((double)(float)(x)))\n+#endif\n+#endif\n+#endif  /* HPUX11_FABSF_CHECK */\n+\n+\n+#if defined( HPUX8_BOGUS_INLINES_CHECK )\n+extern \"C\" int abs(int);\n+\n+#endif  /* HPUX8_BOGUS_INLINES_CHECK */\n+\n+\n+#if defined( ISC_FMOD_CHECK )\n+extern double\tfmod(double, double);\n+#endif  /* ISC_FMOD_CHECK */\n+\n+\n+#if defined( M88K_BAD_HYPOT_OPT_CHECK )\n+extern double hypot();\n+/* Workaround a stupid Motorola optimization if one\n+   of x or y is 0.0 and the other is negative!  */\n+#ifdef __STDC__\n+static __inline__ double fake_hypot (double x, double y)\n+#else\n+static __inline__ double fake_hypot (x, y)\n+\tdouble x, y;\n+#endif\n+{\n+\treturn fabs (hypot (x, y));\n+}\n+#define hypot\tfake_hypot\n+#endif  /* M88K_BAD_HYPOT_OPT_CHECK */\n+\n+\n+#if defined( MATH_EXCEPTION_CHECK )\n+typedef struct exception t_math_exception;\n+#endif  /* MATH_EXCEPTION_CHECK */\n+\n+\n+#if defined( MATH_HUGE_VAL_IFNDEF_CHECK )\n+#ifndef HUGE_VAL\n+# define\tHUGE_VAL 3.4e+40\n+#endif\n+#endif  /* MATH_HUGE_VAL_IFNDEF_CHECK */\n+\n+\n+#if defined( RS6000_DOUBLE_CHECK )\n+#ifndef __cplusplus\n+extern int class();\n+#endif\n+#endif  /* RS6000_DOUBLE_CHECK */\n+\n+\n+#if defined( SUNOS_MATHERR_DECL_CHECK )\n+extern int matherr();\n+#endif  /* SUNOS_MATHERR_DECL_CHECK */\n+\n+\n+#if defined( SVR4__P_CHECK )\n+#ifndef __P\n+#define __P(a) a\n+#endif\n+#endif  /* SVR4__P_CHECK */\n+#ifdef __cplusplus\n+#undef exception\n+#endif\n+\n+#endif  /* FIXINC_MATH_EXCEPTION_CHECK */\n+\n+#endif  /* FIXINC_SUNOS_MATHERR_DECL_CHECK */"}, {"sha": "da43628a1b3980f05a49b99271c1a9707cf1a907", "filename": "gcc/fixinc/tests/base/netdnet/dnetdb.h", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/26e903eefb735b09d75c3701eb44538e6beabbc1/gcc%2Ffixinc%2Ftests%2Fbase%2Fnetdnet%2Fdnetdb.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/26e903eefb735b09d75c3701eb44538e6beabbc1/gcc%2Ffixinc%2Ftests%2Fbase%2Fnetdnet%2Fdnetdb.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffixinc%2Ftests%2Fbase%2Fnetdnet%2Fdnetdb.h?ref=26e903eefb735b09d75c3701eb44538e6beabbc1", "patch": "@@ -0,0 +1,5 @@\n+\n+\n+#if defined( NODEENT_SYNTAX_CHECK )\n+char *na_addr\t;\n+#endif  /* NODEENT_SYNTAX_CHECK */"}, {"sha": "840533ef30560979c1362e50f0a971c15235a28f", "filename": "gcc/fixinc/tests/base/netinet/ip.h", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/26e903eefb735b09d75c3701eb44538e6beabbc1/gcc%2Ffixinc%2Ftests%2Fbase%2Fnetinet%2Fip.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/26e903eefb735b09d75c3701eb44538e6beabbc1/gcc%2Ffixinc%2Ftests%2Fbase%2Fnetinet%2Fip.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffixinc%2Ftests%2Fbase%2Fnetinet%2Fip.h?ref=26e903eefb735b09d75c3701eb44538e6beabbc1", "patch": "@@ -0,0 +1,10 @@\n+\n+\n+#if defined( IP_MISSING_SEMI_CHECK )\n+struct mumble {\n+  union {\n+    int x;\n+  };\n+}; /* mumbled struct */\n+\n+#endif  /* IP_MISSING_SEMI_CHECK */"}, {"sha": "9016455b050a61f1e77eda8ead9023ba5081ee0f", "filename": "gcc/fixinc/tests/base/pixrect/memvar.h", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/26e903eefb735b09d75c3701eb44538e6beabbc1/gcc%2Ffixinc%2Ftests%2Fbase%2Fpixrect%2Fmemvar.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/26e903eefb735b09d75c3701eb44538e6beabbc1/gcc%2Ffixinc%2Ftests%2Fbase%2Fpixrect%2Fmemvar.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffixinc%2Ftests%2Fbase%2Fpixrect%2Fmemvar.h?ref=26e903eefb735b09d75c3701eb44538e6beabbc1", "patch": "@@ -0,0 +1,9 @@\n+\n+\n+#if defined( SUN_CATMACRO_CHECK )\n+#ifdef __STDC__\n+#  define CAT(a,b) a##b\n+#else\n+#define CAT(a,b)\ta/**/b\n+#endif\n+#endif  /* SUN_CATMACRO_CHECK */"}, {"sha": "6bc081b9ddefd1ba1e0ae9c522f9adbdda3abdde", "filename": "gcc/fixinc/tests/base/pthread.h", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/26e903eefb735b09d75c3701eb44538e6beabbc1/gcc%2Ffixinc%2Ftests%2Fbase%2Fpthread.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/26e903eefb735b09d75c3701eb44538e6beabbc1/gcc%2Ffixinc%2Ftests%2Fbase%2Fpthread.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffixinc%2Ftests%2Fbase%2Fpthread.h?ref=26e903eefb735b09d75c3701eb44538e6beabbc1", "patch": "@@ -0,0 +1,5 @@\n+\n+\n+#if defined( PTHREAD_PAGE_SIZE_CHECK )\n+extern int __page_size;\n+#endif  /* PTHREAD_PAGE_SIZE_CHECK */"}, {"sha": "2a1aad763e41722511f8b7ff7472f0d06b2f1368", "filename": "gcc/fixinc/tests/base/reg_types.h", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/26e903eefb735b09d75c3701eb44538e6beabbc1/gcc%2Ffixinc%2Ftests%2Fbase%2Freg_types.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/26e903eefb735b09d75c3701eb44538e6beabbc1/gcc%2Ffixinc%2Ftests%2Fbase%2Freg_types.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffixinc%2Ftests%2Fbase%2Freg_types.h?ref=26e903eefb735b09d75c3701eb44538e6beabbc1", "patch": "@@ -0,0 +1,11 @@\n+\n+\n+#if defined( OSF_NAMESPACE_A_CHECK )\n+typedef struct {\n+  int stuff, mo_suff;\n+} regex_t;\n+extern __regex_t    re;\n+extern __regoff_t   ro;\n+extern __regmatch_t rm;\n+\n+#endif  /* OSF_NAMESPACE_A_CHECK */"}, {"sha": "87f49cb91156f9f4fc517b15915596a7f2faa65f", "filename": "gcc/fixinc/tests/base/regex.h", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/26e903eefb735b09d75c3701eb44538e6beabbc1/gcc%2Ffixinc%2Ftests%2Fbase%2Fregex.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/26e903eefb735b09d75c3701eb44538e6beabbc1/gcc%2Ffixinc%2Ftests%2Fbase%2Fregex.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffixinc%2Ftests%2Fbase%2Fregex.h?ref=26e903eefb735b09d75c3701eb44538e6beabbc1", "patch": "@@ -0,0 +1,8 @@\n+\n+\n+#if defined( OSF_NAMESPACE_C_CHECK )\n+#include <reg_types.h>\n+typedef __regex_t\tregex_t;\n+typedef __regoff_t\tregoff_t;\n+typedef __regmatch_t\tregmatch_t;\n+#endif  /* OSF_NAMESPACE_C_CHECK */"}, {"sha": "02fc0b352223755796881de9eea9a38c61510262", "filename": "gcc/fixinc/tests/base/rpc/auth.h", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/26e903eefb735b09d75c3701eb44538e6beabbc1/gcc%2Ffixinc%2Ftests%2Fbase%2Frpc%2Fauth.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/26e903eefb735b09d75c3701eb44538e6beabbc1/gcc%2Ffixinc%2Ftests%2Fbase%2Frpc%2Fauth.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffixinc%2Ftests%2Fbase%2Frpc%2Fauth.h?ref=26e903eefb735b09d75c3701eb44538e6beabbc1", "patch": "@@ -0,0 +1,17 @@\n+\n+\n+#if defined( STRUCT_SOCKADDR_CHECK )\n+struct sockaddr;\n+extern AUTH* authdes_create( struct sockaddr* );\n+#endif  /* STRUCT_SOCKADDR_CHECK */\n+\n+\n+#if defined( SUN_AUTH_PROTO_CHECK )\n+struct auth_t {\n+#ifdef __cplusplus\n+    int (*name)(...); /* C++ bad */\n+#else\n+    int (*name)(); /* C++ bad */\n+#endif\n+};\n+#endif  /* SUN_AUTH_PROTO_CHECK */"}, {"sha": "1a64db358171917f7795eaeaa7cd86d6ce9c470e", "filename": "gcc/fixinc/tests/base/rpc/rpc.h", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/26e903eefb735b09d75c3701eb44538e6beabbc1/gcc%2Ffixinc%2Ftests%2Fbase%2Frpc%2Frpc.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/26e903eefb735b09d75c3701eb44538e6beabbc1/gcc%2Ffixinc%2Ftests%2Fbase%2Frpc%2Frpc.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffixinc%2Ftests%2Fbase%2Frpc%2Frpc.h?ref=26e903eefb735b09d75c3701eb44538e6beabbc1", "patch": "@@ -0,0 +1,5 @@\n+\n+\n+#if defined( NESTED_AUTH_DES_CHECK )\n+/*#include <rpc/auth_des.h> */ /* skip this */\n+#endif  /* NESTED_AUTH_DES_CHECK */"}, {"sha": "bc61af7aec04f181f01cf598a95937d6d9435c5e", "filename": "gcc/fixinc/tests/base/rpc/xdr.h", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/26e903eefb735b09d75c3701eb44538e6beabbc1/gcc%2Ffixinc%2Ftests%2Fbase%2Frpc%2Fxdr.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/26e903eefb735b09d75c3701eb44538e6beabbc1/gcc%2Ffixinc%2Ftests%2Fbase%2Frpc%2Fxdr.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffixinc%2Ftests%2Fbase%2Frpc%2Fxdr.h?ref=26e903eefb735b09d75c3701eb44538e6beabbc1", "patch": "@@ -0,0 +1,6 @@\n+\n+\n+#if defined( STRUCT_FILE_CHECK )\n+struct __file_s;\n+extern void xdrstdio_create( struct __file_s* );\n+#endif  /* STRUCT_FILE_CHECK */"}, {"sha": "52a602eae76a780b79867621ba4b44c896303ebb", "filename": "gcc/fixinc/tests/base/rpcsvc/rstat.h", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/26e903eefb735b09d75c3701eb44538e6beabbc1/gcc%2Ffixinc%2Ftests%2Fbase%2Frpcsvc%2Frstat.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/26e903eefb735b09d75c3701eb44538e6beabbc1/gcc%2Ffixinc%2Ftests%2Fbase%2Frpcsvc%2Frstat.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffixinc%2Ftests%2Fbase%2Frpcsvc%2Frstat.h?ref=26e903eefb735b09d75c3701eb44538e6beabbc1", "patch": "@@ -0,0 +1,7 @@\n+\n+\n+#if defined( STATSSWTCH_CHECK )\n+struct statswtch {\n+  int boottime;\n+};\n+#endif  /* STATSSWTCH_CHECK */"}, {"sha": "4f817885edf220032a7da1baf57f33be4df1800c", "filename": "gcc/fixinc/tests/base/rpcsvc/rusers.h", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/26e903eefb735b09d75c3701eb44538e6beabbc1/gcc%2Ffixinc%2Ftests%2Fbase%2Frpcsvc%2Frusers.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/26e903eefb735b09d75c3701eb44538e6beabbc1/gcc%2Ffixinc%2Ftests%2Fbase%2Frpcsvc%2Frusers.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffixinc%2Ftests%2Fbase%2Frpcsvc%2Frusers.h?ref=26e903eefb735b09d75c3701eb44538e6beabbc1", "patch": "@@ -0,0 +1,7 @@\n+\n+\n+#if defined( SUN_RUSERS_SEMI_CHECK )\n+struct mumble\n+  int _cnt;\n+};\n+#endif  /* SUN_RUSERS_SEMI_CHECK */"}, {"sha": "ccfce571fbb27ed2e91d8db71d65b900c3ec400e", "filename": "gcc/fixinc/tests/base/sparc/asm_linkage.h", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/26e903eefb735b09d75c3701eb44538e6beabbc1/gcc%2Ffixinc%2Ftests%2Fbase%2Fsparc%2Fasm_linkage.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/26e903eefb735b09d75c3701eb44538e6beabbc1/gcc%2Ffixinc%2Ftests%2Fbase%2Fsparc%2Fasm_linkage.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffixinc%2Ftests%2Fbase%2Fsparc%2Fasm_linkage.h?ref=26e903eefb735b09d75c3701eb44538e6beabbc1", "patch": "@@ -0,0 +1,5 @@\n+\n+\n+#if defined( KANDR_CONCAT_CHECK )\n+#define __CONCAT__(a,b) a##b\n+#endif  /* KANDR_CONCAT_CHECK */"}, {"sha": "a050aa3487b91f5a5e7e81e53e6ee8551b6e5c60", "filename": "gcc/fixinc/tests/base/stdio.h", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/26e903eefb735b09d75c3701eb44538e6beabbc1/gcc%2Ffixinc%2Ftests%2Fbase%2Fstdio.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/26e903eefb735b09d75c3701eb44538e6beabbc1/gcc%2Ffixinc%2Ftests%2Fbase%2Fstdio.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffixinc%2Ftests%2Fbase%2Fstdio.h?ref=26e903eefb735b09d75c3701eb44538e6beabbc1", "patch": "@@ -0,0 +1,35 @@\n+#ifndef FIXINC_STDIO_STDARG_H_CHECK\n+#define FIXINC_STDIO_STDARG_H_CHECK 1\n+\n+#define __need___va_list\n+#include <stdarg.h>\n+\n+\n+#if defined( ALPHA_GETOPT_CHECK )\n+extern int getopt(int, char *const[], const char *);\n+#endif  /* ALPHA_GETOPT_CHECK */\n+\n+\n+#if defined( ISC_OMITS_WITH_STDC_CHECK )\n+#if !defined(_POSIX_SOURCE) /* ? ! */\n+int foo;\n+#endif\n+#endif  /* ISC_OMITS_WITH_STDC_CHECK */\n+\n+\n+#if defined( READ_RET_TYPE_CHECK )\n+extern unsigned int fread(), fwrite();\n+extern int\tfclose(), fflush(), foo();\n+#endif  /* READ_RET_TYPE_CHECK */\n+\n+\n+#if defined( RS6000_PARAM_CHECK )\n+extern int rename(const char *_old, const char *_new);\n+#endif  /* RS6000_PARAM_CHECK */\n+\n+\n+#if defined( STDIO_STDARG_H_CHECK )\n+\n+#endif  /* STDIO_STDARG_H_CHECK */\n+\n+#endif  /* FIXINC_STDIO_STDARG_H_CHECK */"}, {"sha": "bfe76c40efdd2d068d88f31fe924ca8c92410128", "filename": "gcc/fixinc/tests/base/stdlib.h", "status": "added", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/26e903eefb735b09d75c3701eb44538e6beabbc1/gcc%2Ffixinc%2Ftests%2Fbase%2Fstdlib.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/26e903eefb735b09d75c3701eb44538e6beabbc1/gcc%2Ffixinc%2Ftests%2Fbase%2Fstdlib.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffixinc%2Ftests%2Fbase%2Fstdlib.h?ref=26e903eefb735b09d75c3701eb44538e6beabbc1", "patch": "@@ -0,0 +1,40 @@\n+\n+\n+#if defined( ARM_WCHAR_CHECK )\n+# ifndef \t _GCC_WCHAR_T /* we don't have wchar_t yet, ... */\n+#  define  _GCC_WCHAR_T  short\n+# endif /* __wchar_t */\n+#endif  /* ARM_WCHAR_CHECK */\n+\n+\n+#if defined( INT_ABORT_FREE_AND_EXIT_CHECK )\n+extern void\tabort(int);\n+extern void\tfree(void*);\n+extern void\texit(void*);\n+#endif  /* INT_ABORT_FREE_AND_EXIT_CHECK */\n+\n+\n+#if defined( NEWS_OS_RECURSION_CHECK )\n+#ifdef BOGUS_RECURSION\n+#include <stdlib.h>\n+#endif\n+#endif  /* NEWS_OS_RECURSION_CHECK */\n+\n+\n+#if defined( SVR4_GETCWD_CHECK )\n+extern char* getcwd(char *, size_t);\n+#endif  /* SVR4_GETCWD_CHECK */\n+\n+\n+#if defined( SVR4_PROFIL_CHECK )\n+profil(unsigned short *, size_t, int, unsigned int);\n+#endif  /* SVR4_PROFIL_CHECK */\n+\n+\n+#if defined( SYSZ_STDLIB_FOR_SUN_CHECK )\n+extern void *\tcalloc(size_t);\n+extern void *\tmalloc(size_t);\n+extern void *\trealloc(void*,size_t);\n+extern void *\tbsearch(void*,size_t,size_t);\n+\n+#endif  /* SYSZ_STDLIB_FOR_SUN_CHECK */"}, {"sha": "218f0187e8ae5af693ebc5ee318c13cf2e19c603", "filename": "gcc/fixinc/tests/base/strings.h", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/26e903eefb735b09d75c3701eb44538e6beabbc1/gcc%2Ffixinc%2Ftests%2Fbase%2Fstrings.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/26e903eefb735b09d75c3701eb44538e6beabbc1/gcc%2Ffixinc%2Ftests%2Fbase%2Fstrings.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffixinc%2Ftests%2Fbase%2Fstrings.h?ref=26e903eefb735b09d75c3701eb44538e6beabbc1", "patch": "@@ -0,0 +1,5 @@\n+\n+\n+#if defined( SUNOS_STRLEN_CHECK )\n+ __SIZE_TYPE__ strlen(); /* string length */\n+#endif  /* SUNOS_STRLEN_CHECK */"}, {"sha": "c7ed4374d8b87cdc6b7fa1082dcd16ee19b6bddc", "filename": "gcc/fixinc/tests/base/sundev/vuid_event.h", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/26e903eefb735b09d75c3701eb44538e6beabbc1/gcc%2Ffixinc%2Ftests%2Fbase%2Fsundev%2Fvuid_event.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/26e903eefb735b09d75c3701eb44538e6beabbc1/gcc%2Ffixinc%2Ftests%2Fbase%2Fsundev%2Fvuid_event.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffixinc%2Ftests%2Fbase%2Fsundev%2Fvuid_event.h?ref=26e903eefb735b09d75c3701eb44538e6beabbc1", "patch": "@@ -0,0 +1,5 @@\n+\n+\n+#if defined( BADQUOTE_CHECK )\n+/* does not have matched single quotes */\n+#endif  /* BADQUOTE_CHECK */"}, {"sha": "9438e04fc19ad9da3fff597045c5f3cd97df58b6", "filename": "gcc/fixinc/tests/base/sunwindow/win_lock.h", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/26e903eefb735b09d75c3701eb44538e6beabbc1/gcc%2Ffixinc%2Ftests%2Fbase%2Fsunwindow%2Fwin_lock.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/26e903eefb735b09d75c3701eb44538e6beabbc1/gcc%2Ffixinc%2Ftests%2Fbase%2Fsunwindow%2Fwin_lock.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffixinc%2Ftests%2Fbase%2Fsunwindow%2Fwin_lock.h?ref=26e903eefb735b09d75c3701eb44538e6beabbc1", "patch": "@@ -0,0 +1,7 @@\n+\n+\n+#if defined( ECD_CURSOR_CHECK )\n+#ifdef ecd_cursor\n+#error bogus\n+#endif /* ecd+cursor */\n+#endif  /* ECD_CURSOR_CHECK */"}, {"sha": "9e24ed183bd753f68eae82fc8dac91279bce0e82", "filename": "gcc/fixinc/tests/base/sym.h", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/26e903eefb735b09d75c3701eb44538e6beabbc1/gcc%2Ffixinc%2Ftests%2Fbase%2Fsym.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/26e903eefb735b09d75c3701eb44538e6beabbc1/gcc%2Ffixinc%2Ftests%2Fbase%2Fsym.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffixinc%2Ftests%2Fbase%2Fsym.h?ref=26e903eefb735b09d75c3701eb44538e6beabbc1", "patch": "@@ -0,0 +1,7 @@\n+\n+\n+#if defined( ALPHA_PARENS_CHECK )\n+#ifndef __mips64 /* bogus */\n+extern int foo;\n+#endif\n+#endif  /* ALPHA_PARENS_CHECK */"}, {"sha": "9b9b5c28adf6f72824fefab1e6aa078d5b9ce3b5", "filename": "gcc/fixinc/tests/base/sys/asm.h", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/26e903eefb735b09d75c3701eb44538e6beabbc1/gcc%2Ffixinc%2Ftests%2Fbase%2Fsys%2Fasm.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/26e903eefb735b09d75c3701eb44538e6beabbc1/gcc%2Ffixinc%2Ftests%2Fbase%2Fsys%2Fasm.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffixinc%2Ftests%2Fbase%2Fsys%2Fasm.h?ref=26e903eefb735b09d75c3701eb44538e6beabbc1", "patch": "@@ -0,0 +1,5 @@\n+\n+\n+#if defined( IRIX_ASM_APOSTROPHE_CHECK )\n+# and we are on vacation\n+#endif  /* IRIX_ASM_APOSTROPHE_CHECK */"}, {"sha": "0526efb30fa81b69616838aef8d709b684bdbc20", "filename": "gcc/fixinc/tests/base/sys/file.h", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/26e903eefb735b09d75c3701eb44538e6beabbc1/gcc%2Ffixinc%2Ftests%2Fbase%2Fsys%2Ffile.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/26e903eefb735b09d75c3701eb44538e6beabbc1/gcc%2Ffixinc%2Ftests%2Fbase%2Fsys%2Ffile.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffixinc%2Ftests%2Fbase%2Fsys%2Ffile.h?ref=26e903eefb735b09d75c3701eb44538e6beabbc1", "patch": "@@ -0,0 +1,5 @@\n+\n+\n+#if defined( HP_SYSFILE_CHECK )\n+extern void foo(struct file *, ...); /* HPUX_SOURCE - bad varargs */\n+#endif  /* HP_SYSFILE_CHECK */"}, {"sha": "273b46790bd371ea81ec56e91c50d5ed642aa227", "filename": "gcc/fixinc/tests/base/sys/limits.h", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/26e903eefb735b09d75c3701eb44538e6beabbc1/gcc%2Ffixinc%2Ftests%2Fbase%2Fsys%2Flimits.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/26e903eefb735b09d75c3701eb44538e6beabbc1/gcc%2Ffixinc%2Ftests%2Fbase%2Fsys%2Flimits.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffixinc%2Ftests%2Fbase%2Fsys%2Flimits.h?ref=26e903eefb735b09d75c3701eb44538e6beabbc1", "patch": "@@ -0,0 +1,8 @@\n+\n+\n+#if defined( NESTED_SYS_LIMITS_CHECK )\n+/*\n+#define CHILD_MAX 20  Max, Max, ... */ /*\n+#define OPEN_MAX  20  Max, Max, ... */\n+\n+#endif  /* NESTED_SYS_LIMITS_CHECK */"}, {"sha": "16403a075d8b33ba210ba789fe48f7dbca6c0a33", "filename": "gcc/fixinc/tests/base/sys/mman.h", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/26e903eefb735b09d75c3701eb44538e6beabbc1/gcc%2Ffixinc%2Ftests%2Fbase%2Fsys%2Fmman.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/26e903eefb735b09d75c3701eb44538e6beabbc1/gcc%2Ffixinc%2Ftests%2Fbase%2Fsys%2Fmman.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffixinc%2Ftests%2Fbase%2Fsys%2Fmman.h?ref=26e903eefb735b09d75c3701eb44538e6beabbc1", "patch": "@@ -0,0 +1,16 @@\n+#ifndef FIXINC_CXX_UNREADY_CHECK\n+#define FIXINC_CXX_UNREADY_CHECK 1\n+\n+#ifdef __cplusplus\n+extern \"C\" {\n+#endif\n+\n+\n+#if defined( CXX_UNREADY_CHECK )\n+extern void* malloc( size_t );\n+#endif  /* CXX_UNREADY_CHECK */\n+#ifdef __cplusplus\n+}\n+#endif\n+\n+#endif  /* FIXINC_CXX_UNREADY_CHECK */"}, {"sha": "c252d243750ca94cfa43dea95717660510fa1e1a", "filename": "gcc/fixinc/tests/base/sys/param.h", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/26e903eefb735b09d75c3701eb44538e6beabbc1/gcc%2Ffixinc%2Ftests%2Fbase%2Fsys%2Fparam.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/26e903eefb735b09d75c3701eb44538e6beabbc1/gcc%2Ffixinc%2Ftests%2Fbase%2Fsys%2Fparam.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffixinc%2Ftests%2Fbase%2Fsys%2Fparam.h?ref=26e903eefb735b09d75c3701eb44538e6beabbc1", "patch": "@@ -0,0 +1,13 @@\n+\n+\n+#if defined( AUX_ASM_CHECK )\n+#if !defined(NOINLINE) && !defined(__GNUC__) /* ain't got no inline, so we got it */\n+#endif /* NOINLINE */\n+#endif  /* AUX_ASM_CHECK */\n+\n+\n+#if defined( HPUX_MAXINT_CHECK )\n+#ifndef MAXINT\n+#define MAXINT 0x7FFFFFFF\n+#endif\n+#endif  /* HPUX_MAXINT_CHECK */"}, {"sha": "e0eab7a77512ece99726edca89dfc2cbadb626cc", "filename": "gcc/fixinc/tests/base/sys/signal.h", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/26e903eefb735b09d75c3701eb44538e6beabbc1/gcc%2Ffixinc%2Ftests%2Fbase%2Fsys%2Fsignal.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/26e903eefb735b09d75c3701eb44538e6beabbc1/gcc%2Ffixinc%2Ftests%2Fbase%2Fsys%2Fsignal.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffixinc%2Ftests%2Fbase%2Fsys%2Fsignal.h?ref=26e903eefb735b09d75c3701eb44538e6beabbc1", "patch": "@@ -0,0 +1,14 @@\n+\n+\n+#if defined( AIX_VOLATILE_CHECK )\n+typedef int sig_atomic_t;\n+#endif  /* AIX_VOLATILE_CHECK */\n+\n+\n+#if defined( SUN_SIGNAL_CHECK )\n+#ifdef __cplusplus\n+void\t(*signal(...))(...);\n+#else\n+void\t(*signal())();\n+#endif\n+#endif  /* SUN_SIGNAL_CHECK */"}, {"sha": "81942249a4b8098da1b657e22e2ea2426f2e819f", "filename": "gcc/fixinc/tests/base/sys/spinlock.h", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/26e903eefb735b09d75c3701eb44538e6beabbc1/gcc%2Ffixinc%2Ftests%2Fbase%2Fsys%2Fspinlock.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/26e903eefb735b09d75c3701eb44538e6beabbc1/gcc%2Ffixinc%2Ftests%2Fbase%2Fsys%2Fspinlock.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffixinc%2Ftests%2Fbase%2Fsys%2Fspinlock.h?ref=26e903eefb735b09d75c3701eb44538e6beabbc1", "patch": "@@ -0,0 +1,5 @@\n+\n+\n+#if defined( HP_INLINE_CHECK )\n+ # include <machine/mumble.h>\n+#endif  /* HP_INLINE_CHECK */"}, {"sha": "52d05f328df5cbcacf8efaf387a6744115f5ef5f", "filename": "gcc/fixinc/tests/base/sys/stat.h", "status": "added", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/26e903eefb735b09d75c3701eb44538e6beabbc1/gcc%2Ffixinc%2Ftests%2Fbase%2Fsys%2Fstat.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/26e903eefb735b09d75c3701eb44538e6beabbc1/gcc%2Ffixinc%2Ftests%2Fbase%2Fsys%2Fstat.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffixinc%2Ftests%2Fbase%2Fsys%2Fstat.h?ref=26e903eefb735b09d75c3701eb44538e6beabbc1", "patch": "@@ -0,0 +1,39 @@\n+\n+\n+#if defined( M88K_BAD_S_IF_CHECK )\n+#define S_ISREG(m) (((m) & S_IFMT) == S_IFREG) /* is regular? */\n+#endif  /* M88K_BAD_S_IF_CHECK */\n+\n+\n+#if defined( RS6000_FCHMOD_CHECK )\n+extern int fchmod(int, mode_t);\n+#endif  /* RS6000_FCHMOD_CHECK */\n+\n+\n+#if defined( SCO_STATIC_FUNC_CHECK )\n+#ifdef __STDC__\n+#if __cplusplus\n+extern \"C\" {\n+#endif /* __cplusplus */\n+static int\tstat(const char *__f, struct stat *__p) {\n+return __stat32(__f, __p);\n+}\n+#if __cplusplus\n+ }\n+#endif /* __cplusplus */\n+\n+#  else /* !__STDC__ */\n+#if __cplusplus\n+extern \"C\" {\n+#endif /* __cplusplus */\n+static int\tstat(__f, __p)\n+char *__f;\n+struct stat *__p;\n+{\n+return __stat32(__f, __p);\n+}\n+#if __cplusplus\n+ }\n+#endif /* __cplusplus */\n+#endif\n+#endif  /* SCO_STATIC_FUNC_CHECK */"}, {"sha": "206cf419e313a5dc964f2c1e6cd31cf97ee1b231", "filename": "gcc/fixinc/tests/base/sys/stdtypes.h", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/26e903eefb735b09d75c3701eb44538e6beabbc1/gcc%2Ffixinc%2Ftests%2Fbase%2Fsys%2Fstdtypes.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/26e903eefb735b09d75c3701eb44538e6beabbc1/gcc%2Ffixinc%2Ftests%2Fbase%2Fsys%2Fstdtypes.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffixinc%2Ftests%2Fbase%2Fsys%2Fstdtypes.h?ref=26e903eefb735b09d75c3701eb44538e6beabbc1", "patch": "@@ -0,0 +1,28 @@\n+\n+\n+#if defined( SYSZ_STDTYPES_FOR_SUN_CHECK )\n+#ifndef __SIZE_TYPE__\n+#define __SIZE_TYPE__ long unsigned int\n+#endif\n+#ifndef _GCC_SIZE_T\n+#define _GCC_SIZE_T\n+typedef __SIZE_TYPE__ size_t; /* ??? */\n+#endif\n+#ifndef __PTRDIFF_TYPE__\n+#define __PTRDIFF_TYPE__ long int\n+#endif\n+#ifndef _GCC_PTRDIFF_T\n+#define _GCC_PTRDIFF_T\n+typedef __PTRDIFF_TYPE__ ptrdiff_t; /* result of subtracting two pointers */\n+#endif\n+#ifndef __WCHAR_TYPE__\n+#define __WCHAR_TYPE__ int\n+#endif\n+#ifndef __cplusplus\n+#ifndef _GCC_WCHAR_T\n+#define _GCC_WCHAR_T\n+typedef __WCHAR_TYPE__ wchar_t; /* big enough for biggest char set */\n+#endif\n+#endif\n+\n+#endif  /* SYSZ_STDTYPES_FOR_SUN_CHECK */"}, {"sha": "86a73406e32cc6e0beae6c7c4223728adb9d0c65", "filename": "gcc/fixinc/tests/base/sys/time.h", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/26e903eefb735b09d75c3701eb44538e6beabbc1/gcc%2Ffixinc%2Ftests%2Fbase%2Fsys%2Ftime.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/26e903eefb735b09d75c3701eb44538e6beabbc1/gcc%2Ffixinc%2Ftests%2Fbase%2Fsys%2Ftime.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffixinc%2Ftests%2Fbase%2Fsys%2Ftime.h?ref=26e903eefb735b09d75c3701eb44538e6beabbc1", "patch": "@@ -0,0 +1,5 @@\n+\n+\n+#if defined( HPUX_SYSTIME_CHECK )\n+struct sigevent;\n+#endif  /* HPUX_SYSTIME_CHECK */"}, {"sha": "bb3f6efadebc63cffbaa27eb9a32bb1d9725a8fe", "filename": "gcc/fixinc/tests/base/sys/times.h", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/26e903eefb735b09d75c3701eb44538e6beabbc1/gcc%2Ffixinc%2Ftests%2Fbase%2Fsys%2Ftimes.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/26e903eefb735b09d75c3701eb44538e6beabbc1/gcc%2Ffixinc%2Ftests%2Fbase%2Fsys%2Ftimes.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffixinc%2Ftests%2Fbase%2Fsys%2Ftimes.h?ref=26e903eefb735b09d75c3701eb44538e6beabbc1", "patch": "@@ -0,0 +1,5 @@\n+\n+\n+#if defined( SCO_UTIME_CHECK )\n+extern int utime(const char *, const struct utimbuf *);\n+#endif  /* SCO_UTIME_CHECK */"}, {"sha": "9493ce06e5c3efa947a2cf35c1e99eae2f2736f6", "filename": "gcc/fixinc/tests/base/sys/types.h", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/26e903eefb735b09d75c3701eb44538e6beabbc1/gcc%2Ffixinc%2Ftests%2Fbase%2Fsys%2Ftypes.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/26e903eefb735b09d75c3701eb44538e6beabbc1/gcc%2Ffixinc%2Ftests%2Fbase%2Fsys%2Ftypes.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffixinc%2Ftests%2Fbase%2Fsys%2Ftypes.h?ref=26e903eefb735b09d75c3701eb44538e6beabbc1", "patch": "@@ -0,0 +1,17 @@\n+\n+\n+#if defined( IRIX_MULTILINE_CMNT_CHECK )\n+/* we check the type of the result */\n+// /* of the sizeof something.  This is a bad test :-( */\n+#endif  /* IRIX_MULTILINE_CMNT_CHECK */\n+\n+\n+#if defined( SYSTYPES_STDLIB_SIZE_T_CHECK )\n+#ifndef __SIZE_TYPE__\n+#define __SIZE_TYPE__ long unsigned int\n+#endif\n+#ifndef _GCC_SIZE_T\n+#define _GCC_SIZE_T\n+typedef __SIZE_TYPE__ size_t; /* size of something */\n+#endif\n+#endif  /* SYSTYPES_STDLIB_SIZE_T_CHECK */"}, {"sha": "943fe2f7dc9caf9788d644982430538d41ea1402", "filename": "gcc/fixinc/tests/base/sys/wait.h", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/26e903eefb735b09d75c3701eb44538e6beabbc1/gcc%2Ffixinc%2Ftests%2Fbase%2Fsys%2Fwait.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/26e903eefb735b09d75c3701eb44538e6beabbc1/gcc%2Ffixinc%2Ftests%2Fbase%2Fsys%2Fwait.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffixinc%2Ftests%2Fbase%2Fsys%2Fwait.h?ref=26e903eefb735b09d75c3701eb44538e6beabbc1", "patch": "@@ -0,0 +1,13 @@\n+\n+\n+#if defined( AIX_SYSWAIT_CHECK )\n+/* bos325, */\n+struct rusage;\n+extern pid_t wait3();\n+/* pid_t wait3(int *, int, struct rusage *); */\n+#endif  /* AIX_SYSWAIT_CHECK */\n+\n+\n+#if defined( NEXT_WAIT_UNION_CHECK )\n+extern pid_d wait(void*);\n+#endif  /* NEXT_WAIT_UNION_CHECK */"}, {"sha": "4af48a53f2c3ea7ce296b570bbd234a70e3940b0", "filename": "gcc/fixinc/tests/base/testing.h", "status": "added", "additions": 50, "deletions": 0, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/26e903eefb735b09d75c3701eb44538e6beabbc1/gcc%2Ffixinc%2Ftests%2Fbase%2Ftesting.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/26e903eefb735b09d75c3701eb44538e6beabbc1/gcc%2Ffixinc%2Ftests%2Fbase%2Ftesting.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffixinc%2Ftests%2Fbase%2Ftesting.h?ref=26e903eefb735b09d75c3701eb44538e6beabbc1", "patch": "@@ -0,0 +1,50 @@\n+\n+\n+#if defined( CTRL_QUOTES_DEF_CHECK )\n+#define BSD43_CTRL(n, x) ((n<<8)+x)\n+#define _CTRL(c) (c&037)\n+#endif  /* CTRL_QUOTES_DEF_CHECK */\n+\n+\n+#if defined( CTRL_QUOTES_USE_CHECK )\n+#define TCTRLFOO BSD43_CTRL('T', 1)\n+#endif  /* CTRL_QUOTES_USE_CHECK */\n+\n+\n+#if defined( IO_QUOTES_DEF_CHECK )\n+#define BSD43__IOWR(n, x) ((n<<8)+x)\n+#define _IOWN(x,y,t)  (_IOC_IN|(((t)&_IOCPARM_MASK)<<16)|(x<<8)|y)\n+#define _IO(x,y)      (x<<8|y)\n+#endif  /* IO_QUOTES_DEF_CHECK */\n+\n+\n+#if defined( IO_QUOTES_USE_CHECK )\n+#define TIOCFOO BSD43__IOWR('T', 1)\n+#define TIOCFOO \\\n+BSD43__IOWR('T', 1) /* Some are multi-line */\n+#endif  /* IO_QUOTES_USE_CHECK */\n+\n+\n+#if defined( MACHINE_NAME_CHECK )\n+/* MACH_DIFF: */\n+#if defined( __i386__ ) || defined( sparc ) || defined( vax )\n+/* no uniform test, so be careful  :-) */\n+#endif  /* MACHINE_NAME_CHECK */\n+\n+\n+#if defined( SCO_STRICT_ANSI_CHECK )\n+#if !defined(__STRICT_ANSI__) /* not standard C */\n+int foo;\n+#endif\n+#endif  /* SCO_STRICT_ANSI_CHECK */\n+\n+\n+#if defined( UNDEFINE_NULL_CHECK )\n+#ifndef NULL\r\n+#define NULL 0UL\r\n+#endif\r\n+#ifndef NULL\n+#define NULL\t((void*)0)\n+#endif\n+\n+#endif  /* UNDEFINE_NULL_CHECK */"}, {"sha": "3d4a089fed726985155e2a5c8d335b57e16c38dd", "filename": "gcc/fixinc/tests/base/time.h", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/26e903eefb735b09d75c3701eb44538e6beabbc1/gcc%2Ffixinc%2Ftests%2Fbase%2Ftime.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/26e903eefb735b09d75c3701eb44538e6beabbc1/gcc%2Ffixinc%2Ftests%2Fbase%2Ftime.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffixinc%2Ftests%2Fbase%2Ftime.h?ref=26e903eefb735b09d75c3701eb44538e6beabbc1", "patch": "@@ -0,0 +1,15 @@\n+#ifndef FIXINC_M88K_MULTI_INCL_CHECK\n+#define FIXINC_M88K_MULTI_INCL_CHECK 1\n+\n+\n+\n+#if defined( M88K_MULTI_INCL_CHECK )\n+\n+#endif  /* M88K_MULTI_INCL_CHECK */\n+\n+\n+#if defined( VXWORKS_NEEDS_VXTYPES_CHECK )\n+unsigned int\t_clocks_per_sec;\n+#endif  /* VXWORKS_NEEDS_VXTYPES_CHECK */\n+\n+#endif  /* FIXINC_M88K_MULTI_INCL_CHECK */"}, {"sha": "9a28eec5e89c71fe36e1b85f107d133225fca7df", "filename": "gcc/fixinc/tests/base/unistd.h", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/26e903eefb735b09d75c3701eb44538e6beabbc1/gcc%2Ffixinc%2Ftests%2Fbase%2Funistd.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/26e903eefb735b09d75c3701eb44538e6beabbc1/gcc%2Ffixinc%2Ftests%2Fbase%2Funistd.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffixinc%2Ftests%2Fbase%2Funistd.h?ref=26e903eefb735b09d75c3701eb44538e6beabbc1", "patch": "@@ -0,0 +1,5 @@\n+\n+\n+#if defined( ALPHA_SBRK_CHECK )\n+extern void *sbrk(ptrdiff_t increment);\n+#endif  /* ALPHA_SBRK_CHECK */"}]}