{"sha": "2f70a97992aefc22b56cbee13ccd2bb04c6aaa6f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MmY3MGE5Nzk5MmFlZmMyMmI1NmNiZWUxM2NjZDJiYjA0YzZhYWE2Zg==", "commit": {"author": {"name": "Jan Hubicka", "email": "hubicka@ucw.cz", "date": "2017-07-03T14:40:46Z"}, "committer": {"name": "Jan Hubicka", "email": "hubicka@gcc.gnu.org", "date": "2017-07-03T14:40:46Z"}, "message": "re PR rtl-optimization/81290 (ICE in update_br_prob_note)\n\n\n\tPR middle-end/81290\n\t* predict.c (force_edge_cold): Be more careful about propagation\n\tbackward.\n\t* profile-count.h (profile_probability::guessed,\n\tprofile_probability::fdo, profile_count::guessed, profile_count::fdo):\n\tNew.\n\t* tree-ssa-threadupdate.c (recompute_probabilities): Result is guessed.\n\n\t* gcc.c-torture/compile/pr81290.c: New.\n\nFrom-SVN: r249924", "tree": {"sha": "b971b49f4f54cce7db5fb1c43c9444677e53dbe9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b971b49f4f54cce7db5fb1c43c9444677e53dbe9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2f70a97992aefc22b56cbee13ccd2bb04c6aaa6f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2f70a97992aefc22b56cbee13ccd2bb04c6aaa6f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2f70a97992aefc22b56cbee13ccd2bb04c6aaa6f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2f70a97992aefc22b56cbee13ccd2bb04c6aaa6f/comments", "author": null, "committer": null, "parents": [{"sha": "d31415ba1989c3d51c536fbba6a976b527213e44", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d31415ba1989c3d51c536fbba6a976b527213e44", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d31415ba1989c3d51c536fbba6a976b527213e44"}], "stats": {"total": 91, "additions": 86, "deletions": 5}, "files": [{"sha": "8d2a79a92e1a96f5c89e7dec4c61074e112a5ed5", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2f70a97992aefc22b56cbee13ccd2bb04c6aaa6f/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2f70a97992aefc22b56cbee13ccd2bb04c6aaa6f/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=2f70a97992aefc22b56cbee13ccd2bb04c6aaa6f", "patch": "@@ -1,3 +1,13 @@\n+2017-07-02  Jan Hubicka  <hubicka@ucw.cz>\n+\n+\tPR middle-end/81290\n+\t* predict.c (force_edge_cold): Be more careful about propagation\n+\tbackward.\n+\t* profile-count.h (profile_probability::guessed,\n+\tprofile_probability::fdo, profile_count::guessed, profile_count::fdo):\n+\tNew.\n+\t* tree-ssa-threadupdate.c (recompute_probabilities): Result is guessed.\n+\n 2017-07-03  James Greenhalgh  <james.greenhalgh@arm.com>\n \n \t* doc/invoke.texi (rcpc architecture extension): Document it."}, {"sha": "2a7dbfa4d9bda2f160322eb5654171cb0febf3ba", "filename": "gcc/predict.c", "status": "modified", "additions": 14, "deletions": 3, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2f70a97992aefc22b56cbee13ccd2bb04c6aaa6f/gcc%2Fpredict.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2f70a97992aefc22b56cbee13ccd2bb04c6aaa6f/gcc%2Fpredict.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fpredict.c?ref=2f70a97992aefc22b56cbee13ccd2bb04c6aaa6f", "patch": "@@ -3962,15 +3962,26 @@ force_edge_cold (edge e, bool impossible)\n \t      e2->count.apply_scale (count_sum2, count_sum);\n \t    e2->probability /= prob_comp;\n \t  }\n-      if (current_ir_type () != IR_GIMPLE)\n+      if (current_ir_type () != IR_GIMPLE\n+\t  && e->src != ENTRY_BLOCK_PTR_FOR_FN (cfun))\n \tupdate_br_prob_note (e->src);\n     }\n   /* If all edges out of e->src are unlikely, the basic block itself\n      is unlikely.  */\n   else\n     {\n-      e->probability = profile_probability::always ();\n-      if (current_ir_type () != IR_GIMPLE)\n+      if (prob_sum == profile_probability::never ())\n+        e->probability = profile_probability::always ();\n+      else\n+\t{\n+\t  if (impossible)\n+\t    e->probability = profile_probability::never ();\n+\t  /* If BB has some edges out that are not impossible, we can not\n+\t     assume that BB itself is.  */\n+\t  impossible = false;\n+\t}\n+      if (current_ir_type () != IR_GIMPLE\n+\t  && e->src != ENTRY_BLOCK_PTR_FOR_FN (cfun))\n \tupdate_br_prob_note (e->src);\n       if (e->src->count == profile_count::zero ())\n \treturn;"}, {"sha": "aef9da3bfce9f24ce0df30ee37922fafaca96579", "filename": "gcc/profile-count.h", "status": "modified", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2f70a97992aefc22b56cbee13ccd2bb04c6aaa6f/gcc%2Fprofile-count.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2f70a97992aefc22b56cbee13ccd2bb04c6aaa6f/gcc%2Fprofile-count.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fprofile-count.h?ref=2f70a97992aefc22b56cbee13ccd2bb04c6aaa6f", "patch": "@@ -351,6 +351,22 @@ class GTY((user)) profile_probability\n       return profile_probability::always() - *this;\n     }\n \n+  /* Return THIS with quality dropped to GUESSED.  */\n+  profile_probability guessed () const\n+    {\n+      profile_probability ret = *this;\n+      ret.m_quality = profile_guessed;\n+      return ret;\n+    }\n+\n+  /* Return THIS with quality dropped to AFDO.  */\n+  profile_probability afdo () const\n+    {\n+      profile_probability ret = *this;\n+      ret.m_quality = profile_afdo;\n+      return ret;\n+    }\n+\n   profile_probability combine_with_freq (int freq1, profile_probability other,\n \t\t\t\t\t int freq2) const\n     {\n@@ -767,6 +783,22 @@ class GTY(()) profile_count\n       return ret;\n     }\n \n+  /* Return THIS with quality dropped to GUESSED.  */\n+  profile_count guessed () const\n+    {\n+      profile_count ret = *this;\n+      ret.m_quality = profile_guessed;\n+      return ret;\n+    }\n+\n+  /* Return THIS with quality dropped to AFDO.  */\n+  profile_count afdo () const\n+    {\n+      profile_count ret = *this;\n+      ret.m_quality = profile_afdo;\n+      return ret;\n+    }\n+\n   /* Return probability of event with counter THIS within event with counter\n      OVERALL.  */\n   profile_probability probability_in (const profile_count overall) const"}, {"sha": "313a939820bc70823b922ad3fa2d9e880116833e", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2f70a97992aefc22b56cbee13ccd2bb04c6aaa6f/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2f70a97992aefc22b56cbee13ccd2bb04c6aaa6f/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=2f70a97992aefc22b56cbee13ccd2bb04c6aaa6f", "patch": "@@ -1,3 +1,8 @@\n+2017-07-02  Jan Hubicka  <hubicka@ucw.cz>\n+\n+\tPR middle-end/81290\n+\t* gcc.c-torture/compile/pr81290.c: New.\n+\n 2017-07-03  Richard Biener  <rguenther@suse.de>\n \n \tPR tree-optimization/60510"}, {"sha": "1fd8b2055daede60faefef0a874f85c1d8351617", "filename": "gcc/testsuite/gcc.c-torture/compile/pr81290.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2f70a97992aefc22b56cbee13ccd2bb04c6aaa6f/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fpr81290.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2f70a97992aefc22b56cbee13ccd2bb04c6aaa6f/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fpr81290.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fpr81290.c?ref=2f70a97992aefc22b56cbee13ccd2bb04c6aaa6f", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-options \"-funroll-loops -w\" } */\n+int vz;\n+\n+void\n+ms (int sw, int cm)\n+{\n+  for (vz = 0; vz < 19; ++vz)\n+    {\n+ fx:\n+      sw *= 2;\n+    }\n+\n+  for (;;)\n+    {\n+      if (sw != 0)\n+        for (;;)\n+          {\n+          }\n+      if (1 / 0 && cm != 0)\n+        goto fx;\n+    }\n+}"}, {"sha": "235a907339970cd80092428e8aebdbb7dba37c68", "filename": "gcc/tree-ssa-threadupdate.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2f70a97992aefc22b56cbee13ccd2bb04c6aaa6f/gcc%2Ftree-ssa-threadupdate.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2f70a97992aefc22b56cbee13ccd2bb04c6aaa6f/gcc%2Ftree-ssa-threadupdate.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-threadupdate.c?ref=2f70a97992aefc22b56cbee13ccd2bb04c6aaa6f", "patch": "@@ -908,7 +908,7 @@ recompute_probabilities (basic_block bb)\n \n       /* Prevent overflow computation due to insane profiles.  */\n       if (esucc->count < bb->count)\n-\tesucc->probability = esucc->count.probability_in (bb->count);\n+\tesucc->probability = esucc->count.probability_in (bb->count).guessed ();\n       else\n \t/* Can happen with missing/guessed probabilities, since we\n \t   may determine that more is flowing along duplicated\n@@ -1051,7 +1051,8 @@ freqs_to_counts_path (struct redirection_data *rd)\n       if (ein->probability.initialized_p ())\n         ein->count = profile_count::from_gcov_type\n \t\t  (apply_probability (ein->src->frequency * REG_BR_PROB_BASE,\n-\t\t\t\t        ein->probability.to_reg_br_prob_base ()));\n+\t\t\t\t        ein->probability\n+\t\t\t\t\t  .to_reg_br_prob_base ())).guessed ();\n       else\n \t/* FIXME: this is hack; we should track uninitialized values.  */\n \tein->count = profile_count::zero ();"}]}