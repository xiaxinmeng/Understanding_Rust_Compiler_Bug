{"sha": "6dfb1059b31576930427648e03d9d06e6d68bbf0", "node_id": "C_kwDOANBUbNoAKDZkZmIxMDU5YjMxNTc2OTMwNDI3NjQ4ZTAzZDlkMDZlNmQ2OGJiZjA", "commit": {"author": {"name": "Martin Sebor", "email": "msebor@redhat.com", "date": "2021-12-06T16:52:32Z"}, "committer": {"name": "Martin Sebor", "email": "msebor@redhat.com", "date": "2021-12-09T16:51:48Z"}, "message": "Add a new dump function.\n\ngcc/ChangeLog:\n\n\t* pointer-query.cc (access_ref::dump): Define new function\n\t(pointer_query::dump): Call it.\n\t* pointer-query.h (access_ref::dump): Declare new function.", "tree": {"sha": "2b36f56f002e8b6a01e1a6f993cdf9355ed2ed52", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2b36f56f002e8b6a01e1a6f993cdf9355ed2ed52"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6dfb1059b31576930427648e03d9d06e6d68bbf0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6dfb1059b31576930427648e03d9d06e6d68bbf0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6dfb1059b31576930427648e03d9d06e6d68bbf0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6dfb1059b31576930427648e03d9d06e6d68bbf0/comments", "author": {"login": "msebor", "id": 381149, "node_id": "MDQ6VXNlcjM4MTE0OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/381149?v=4", "gravatar_id": "", "url": "https://api.github.com/users/msebor", "html_url": "https://github.com/msebor", "followers_url": "https://api.github.com/users/msebor/followers", "following_url": "https://api.github.com/users/msebor/following{/other_user}", "gists_url": "https://api.github.com/users/msebor/gists{/gist_id}", "starred_url": "https://api.github.com/users/msebor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/msebor/subscriptions", "organizations_url": "https://api.github.com/users/msebor/orgs", "repos_url": "https://api.github.com/users/msebor/repos", "events_url": "https://api.github.com/users/msebor/events{/privacy}", "received_events_url": "https://api.github.com/users/msebor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "msebor", "id": 381149, "node_id": "MDQ6VXNlcjM4MTE0OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/381149?v=4", "gravatar_id": "", "url": "https://api.github.com/users/msebor", "html_url": "https://github.com/msebor", "followers_url": "https://api.github.com/users/msebor/followers", "following_url": "https://api.github.com/users/msebor/following{/other_user}", "gists_url": "https://api.github.com/users/msebor/gists{/gist_id}", "starred_url": "https://api.github.com/users/msebor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/msebor/subscriptions", "organizations_url": "https://api.github.com/users/msebor/orgs", "repos_url": "https://api.github.com/users/msebor/repos", "events_url": "https://api.github.com/users/msebor/events{/privacy}", "received_events_url": "https://api.github.com/users/msebor/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1334d889d4adbff999fd33d5e1672ecd6bb66dd7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1334d889d4adbff999fd33d5e1672ecd6bb66dd7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1334d889d4adbff999fd33d5e1672ecd6bb66dd7"}], "stats": {"total": 120, "additions": 94, "deletions": 26}, "files": [{"sha": "e618c4d727675dd640277cc720d164f9c6e5a724", "filename": "gcc/pointer-query.cc", "status": "modified", "additions": 91, "deletions": 26, "changes": 117, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6dfb1059b31576930427648e03d9d06e6d68bbf0/gcc%2Fpointer-query.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6dfb1059b31576930427648e03d9d06e6d68bbf0/gcc%2Fpointer-query.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fpointer-query.cc?ref=6dfb1059b31576930427648e03d9d06e6d68bbf0", "patch": "@@ -1240,6 +1240,63 @@ access_ref::inform_access (access_mode mode, int ostype /* = 1 */) const\n \t    sizestr, allocfn);\n }\n \n+/* Dump *THIS to FILE.  */\n+\n+void\n+access_ref::dump (FILE *file) const\n+{\n+  for (int i = deref; i < 0; ++i)\n+    fputc ('&', file);\n+\n+  for (int i = 0; i < deref; ++i)\n+    fputc ('*', file);\n+\n+  if (gphi *phi_stmt = phi ())\n+    {\n+      fputs (\"PHI <\", file);\n+      unsigned nargs = gimple_phi_num_args (phi_stmt);\n+      for (unsigned i = 0; i != nargs; ++i)\n+\t{\n+\t  tree arg = gimple_phi_arg_def (phi_stmt, i);\n+\t  print_generic_expr (file, arg);\n+\t  if (i + 1 < nargs)\n+\t    fputs (\", \", file);\n+\t}\n+      fputc ('>', file);\n+    }\n+  else\n+    print_generic_expr (file, ref);\n+\n+  if (offrng[0] != offrng[1])\n+    fprintf (file, \" + [%lli, %lli]\",\n+\t     (long long) offrng[0].to_shwi (),\n+\t     (long long) offrng[1].to_shwi ());\n+  else if (offrng[0] != 0)\n+    fprintf (file, \" %c %lli\",\n+\t     offrng[0] < 0 ? '-' : '+',\n+\t     (long long) offrng[0].to_shwi ());\n+\n+  if (base0)\n+    fputs (\" (base0)\", file);\n+\n+  fputs (\"; size: \", file);\n+  if (sizrng[0] != sizrng[1])\n+    {\n+      offset_int maxsize = wi::to_offset (max_object_size ());\n+      if (sizrng[0] == 0 && sizrng[1] >= maxsize)\n+\tfputs (\"unknown\", file);\n+      else\n+\tfprintf (file, \"[%llu, %llu]\",\n+\t\t (unsigned long long) sizrng[0].to_uhwi (),\n+\t\t (unsigned long long) sizrng[1].to_uhwi ());\n+    }\n+  else if (sizrng[0] != 0)\n+    fprintf (file, \"%llu\",\n+\t     (unsigned long long) sizrng[0].to_uhwi ());\n+\n+  fputc ('\\n', file);\n+}\n+\n /* Set the access to at most MAXWRITE and MAXREAD bytes, and at least 1\n    when MINWRITE or MINREAD, respectively, is set.  */\n access_data::access_data (range_query *query, gimple *stmt, access_mode mode,\n@@ -1498,6 +1555,9 @@ pointer_query::flush_cache ()\n void\n pointer_query::dump (FILE *dump_file, bool contents /* = false */)\n {\n+  if (!var_cache)\n+    return;\n+\n   unsigned nused = 0, nrefs = 0;\n   unsigned nidxs = var_cache->indices.length ();\n   for (unsigned i = 0; i != nidxs; ++i)\n@@ -1558,35 +1618,40 @@ pointer_query::dump (FILE *dump_file, bool contents /* = false */)\n       else\n \tfprintf (dump_file, \"  _%u = \", ver);\n \n-      if (gphi *phi = aref.phi ())\n-\t{\n-\t  fputs (\"PHI <\", dump_file);\n-\t  unsigned nargs = gimple_phi_num_args (phi);\n-\t  for (unsigned i = 0; i != nargs; ++i)\n-\t    {\n-\t      tree arg = gimple_phi_arg_def (phi, i);\n-\t      print_generic_expr (dump_file, arg);\n-\t      if (i + 1 < nargs)\n-\t\tfputs (\", \", dump_file);\n-\t    }\n-\t  fputc ('>', dump_file);\n-\t}\n-      else\n-\tprint_generic_expr (dump_file, aref.ref);\n-\n-      if (aref.offrng[0] != aref.offrng[1])\n-\tfprintf (dump_file, \" + [%lli, %lli]\",\n-\t\t (long long) aref.offrng[0].to_shwi (),\n-\t\t (long long) aref.offrng[1].to_shwi ());\n-      else if (aref.offrng[0] != 0)\n-\tfprintf (dump_file, \" %c %lli\",\n-\t\t aref.offrng[0] < 0 ? '-' : '+',\n-\t\t (long long) aref.offrng[0].to_shwi ());\n-\n-      fputc ('\\n', dump_file);\n+      aref.dump (dump_file);\n     }\n \n   fputc ('\\n', dump_file);\n+\n+  {\n+    fputs (\"\\npointer_query cache contents (again):\\n\", dump_file);\n+\n+    tree var;\n+    unsigned i;\n+    FOR_EACH_SSA_NAME (i, var, cfun)\n+      {\n+\tif (TREE_CODE (TREE_TYPE (var)) != POINTER_TYPE)\n+\t  continue;\n+\n+\tfor (unsigned ost = 0; ost != 2; ++ost)\n+\t  {\n+\t    if (const access_ref *cache_ref = get_ref (var, ost))\n+\t      {\n+\t\tunsigned ver = SSA_NAME_VERSION (var);\n+\t\tfprintf (dump_file, \"  %u.%u: \", ver, ost);\n+\t\tif (tree name = ssa_name (ver))\n+\t\t  {\n+\t\t    print_generic_expr (dump_file, name);\n+\t\t    fputs (\" = \", dump_file);\n+\t\t  }\n+\t\telse\n+\t\t  fprintf (dump_file, \"  _%u = \", ver);\n+\n+\t\tcache_ref->dump (dump_file);\n+\t      }\n+\t  }\n+      }\n+  }\n }\n \n /* A helper of compute_objsize_r() to determine the size from an assignment"}, {"sha": "25101b75e25ceb3d626cc3474b6d58f11384539c", "filename": "gcc/pointer-query.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6dfb1059b31576930427648e03d9d06e6d68bbf0/gcc%2Fpointer-query.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6dfb1059b31576930427648e03d9d06e6d68bbf0/gcc%2Fpointer-query.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fpointer-query.h?ref=6dfb1059b31576930427648e03d9d06e6d68bbf0", "patch": "@@ -124,6 +124,9 @@ struct access_ref\n      with the given mode.  */\n   void inform_access (access_mode, int = 1) const;\n \n+  /* Dump *THIS to a file.  */\n+  void dump (FILE *) const;\n+\n   /* Reference to the accessed object(s).  */\n   tree ref;\n "}]}