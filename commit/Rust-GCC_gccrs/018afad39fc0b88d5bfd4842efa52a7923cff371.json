{"sha": "018afad39fc0b88d5bfd4842efa52a7923cff371", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDE4YWZhZDM5ZmMwYjg4ZDViZmQ0ODQyZWZhNTJhNzkyM2NmZjM3MQ==", "commit": {"author": {"name": "Ed Smith-Rowland", "email": "3dw4rd@verizon.net", "date": "2010-02-25T17:13:04Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2010-02-25T17:13:04Z"}, "message": "limits (__numeric_limits_base::max_digits10, [...]): Add.\n\n2010-02-25  Ed Smith-Rowland  <3dw4rd@verizon.net>\n\n\t* include/std/limits (__numeric_limits_base::max_digits10,\n\tnumeric_limits<>::max_digits10, numeric_limits<>::lowest): Add.\n\t* src/limits.cc: Define max_digits10.\n\t* config/abi/pre/gnu.ver: Adjust.\n\t* testsuite/18_support/numeric_limits/dr559.cc: Test max_digits10\n\tand lowest too.\n\t* testsuite/18_support/numeric_limits/lowest.cc: New.\n\t* testsuite/18_support/numeric_limits/max_digits10.cc: New.\n\nFrom-SVN: r157067", "tree": {"sha": "6d04dd4a6cc534ecc9f708196c65ef2558d9e02c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6d04dd4a6cc534ecc9f708196c65ef2558d9e02c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/018afad39fc0b88d5bfd4842efa52a7923cff371", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/018afad39fc0b88d5bfd4842efa52a7923cff371", "html_url": "https://github.com/Rust-GCC/gccrs/commit/018afad39fc0b88d5bfd4842efa52a7923cff371", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/018afad39fc0b88d5bfd4842efa52a7923cff371/comments", "author": {"login": "emsr", "id": 1936479, "node_id": "MDQ6VXNlcjE5MzY0Nzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1936479?v=4", "gravatar_id": "", "url": "https://api.github.com/users/emsr", "html_url": "https://github.com/emsr", "followers_url": "https://api.github.com/users/emsr/followers", "following_url": "https://api.github.com/users/emsr/following{/other_user}", "gists_url": "https://api.github.com/users/emsr/gists{/gist_id}", "starred_url": "https://api.github.com/users/emsr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/emsr/subscriptions", "organizations_url": "https://api.github.com/users/emsr/orgs", "repos_url": "https://api.github.com/users/emsr/repos", "events_url": "https://api.github.com/users/emsr/events{/privacy}", "received_events_url": "https://api.github.com/users/emsr/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "640f8e65484943a0bc1c2c47cdbee438fc40b8ad", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/640f8e65484943a0bc1c2c47cdbee438fc40b8ad", "html_url": "https://github.com/Rust-GCC/gccrs/commit/640f8e65484943a0bc1c2c47cdbee438fc40b8ad"}], "stats": {"total": 356, "additions": 349, "deletions": 7}, "files": [{"sha": "f66cb342386b617654ceebf4ec2012acc45b4d37", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/018afad39fc0b88d5bfd4842efa52a7923cff371/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/018afad39fc0b88d5bfd4842efa52a7923cff371/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=018afad39fc0b88d5bfd4842efa52a7923cff371", "patch": "@@ -1,3 +1,14 @@\n+2010-02-25  Ed Smith-Rowland  <3dw4rd@verizon.net>\n+\n+\t* include/std/limits (__numeric_limits_base::max_digits10,\n+\tnumeric_limits<>::max_digits10, numeric_limits<>::lowest): Add.\n+\t* src/limits.cc: Define max_digits10.\n+\t* config/abi/pre/gnu.ver: Adjust.\n+\t* testsuite/18_support/numeric_limits/dr559.cc: Test max_digits10\n+\tand lowest too.\n+\t* testsuite/18_support/numeric_limits/lowest.cc: New.\n+\t* testsuite/18_support/numeric_limits/max_digits10.cc: New.\n+\n 2010-02-25  Paolo Carlini  <paolo.carlini@oracle.com>\n \n \t* include/bits/functional_hash.h (__hash_combine): Remove."}, {"sha": "1df649911a044cdd43ff3a12995b2f3e83359217", "filename": "libstdc++-v3/config/abi/pre/gnu.ver", "status": "modified", "additions": 25, "deletions": 4, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/018afad39fc0b88d5bfd4842efa52a7923cff371/libstdc%2B%2B-v3%2Fconfig%2Fabi%2Fpre%2Fgnu.ver", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/018afad39fc0b88d5bfd4842efa52a7923cff371/libstdc%2B%2B-v3%2Fconfig%2Fabi%2Fpre%2Fgnu.ver", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fabi%2Fpre%2Fgnu.ver?ref=018afad39fc0b88d5bfd4842efa52a7923cff371", "patch": "@@ -164,7 +164,7 @@ GLIBCXX_3.4 {\n       std::_List_node_base::reverse*;\n       std::_List_node_base::transfer*;\n       std::__timepunct*;\n-      std::__numeric_limits_base*;\n+#     std::__numeric_limits_base*;\n       std::__num_base::_S_format_float*;\n       std::__num_base::_S_format_int*;\n       std::__num_base::_S_atoms_in;\n@@ -476,7 +476,15 @@ GLIBCXX_3.4 {\n     _ZNSt15time_put_byname*;\n \n     # std::numeric_limits\n-    _ZNSt14numeric_limitsI[^g]E*;\n+    _ZNSt21__numeric_limits_base[5-9]*;\n+    _ZNSt21__numeric_limits_base1[0-7][hirt]*;\n+    _ZNSt21__numeric_limits_base1[0-7]mi*;\n+    _ZNSt21__numeric_limits_base1[0-7]max_e*;\n+\n+    _ZNSt14numeric_limitsI[^g]E[5-9]*;\n+    _ZNSt14numeric_limitsI[^g]E1[0-7][hirt]*;\n+    _ZNSt14numeric_limitsI[^g]E1[0-7]mi*;\n+    _ZNSt14numeric_limitsI[^g]E1[0-7]max_e*;\n \n     # std::_Rb_tree\n     _ZSt18_Rb_tree_decrementPKSt18_Rb_tree_node_base;\n@@ -1010,8 +1018,14 @@ GLIBCXX_3.4.11 {\n     _ZSt20__throw_system_errori;\n \n     # char16_t and char32_t\n-    _ZNSt14numeric_limitsIDiE*;\n-    _ZNSt14numeric_limitsIDsE*;\n+    _ZNSt14numeric_limitsIDiE[5-9]*;\n+    _ZNSt14numeric_limitsIDsE[5-9]*;\n+    _ZNSt14numeric_limitsIDiE1[0-7][hirt]*;\n+    _ZNSt14numeric_limitsIDsE1[0-7][hirt]*;\n+    _ZNSt14numeric_limitsIDiE1[0-7]mi*;\n+    _ZNSt14numeric_limitsIDsE1[0-7]mi*;\n+    _ZNSt14numeric_limitsIDiE1[0-7]max_e*;\n+    _ZNSt14numeric_limitsIDsE1[0-7]max_e*;\n \n     # chrono\n     _ZNSt6chrono12system_clock12is_monotonicE;\n@@ -1128,8 +1142,15 @@ GLIBCXX_3.4.14 {\n     _ZNSt9__cxx199815_List_node_base9_M_unhookEv;\n     _ZNSt9__cxx199815_List_node_base10_M_reverseEv;\n     _ZNSt9__cxx199815_List_node_base11_M_transfer*;\n+\n+    # std::numeric_limits::max_digits10\n+    _ZNSt21__numeric_limits_base12max_digits10E;\n+    _ZNSt14numeric_limitsI[^g]E12max_digits10E;\n+    _ZNSt14numeric_limitsID[is]E12max_digits10E;\n+\n } GLIBCXX_3.4.13;\n \n+\n # Symbols in the support library (libsupc++) have their own tag.\n CXXABI_1.3 {\n "}, {"sha": "65b623e853d71fe5471c1a3ceb241242aade7a77", "filename": "libstdc++-v3/include/std/limits", "status": "modified", "additions": 143, "deletions": 3, "changes": 146, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/018afad39fc0b88d5bfd4842efa52a7923cff371/libstdc%2B%2B-v3%2Finclude%2Fstd%2Flimits", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/018afad39fc0b88d5bfd4842efa52a7923cff371/libstdc%2B%2B-v3%2Finclude%2Fstd%2Flimits", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Flimits?ref=018afad39fc0b88d5bfd4842efa52a7923cff371", "patch": "@@ -142,6 +142,8 @@\n #define __glibcxx_digits10(T) \\\n   (__glibcxx_digits (T) * 643 / 2136)\n \n+#define __glibcxx_max_digits10(T) \\\n+  (2 + (T) * 643 / 2136)\n \n _GLIBCXX_BEGIN_NAMESPACE(std)\n \n@@ -197,11 +199,15 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n     static const int digits = 0;\n     /** The number of base 10 digits that can be represented without change. */\n     static const int digits10 = 0;\n+#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+    /** The number of base 10 digits required to ensure that values which\n+\tdiffer are always differentiated.  */\n+    static const int max_digits10 = 0;\n+#endif\n     /** True if the type is signed.  */\n     static const bool is_signed = false;\n     /** True if the type is integer.\n-     *  Is this supposed to be <em>if the type is integral?</em>\n-    */\n+     *  Is this supposed to be <em>if the type is integral?</em>  */\n     static const bool is_integer = false;\n     /** True if the type uses an exact representation. <em>All integer types are\n         exact, but not all exact types are integer.  For example, rational and\n@@ -282,6 +288,11 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n       static _Tp min() throw() { return static_cast<_Tp>(0); }\n       /** The maximum finite value.  */\n       static _Tp max() throw() { return static_cast<_Tp>(0); }\n+#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+      /** A finite value x such that there is no other finite value y\n+       *  where y < x.  */\n+      static _Tp lowest() throw() { return static_cast<_Tp>(0); }\n+#endif\n       /** The @e machine @e epsilon:  the difference between 1 and the least\n           value greater than 1 that is representable.  */\n       static _Tp epsilon() throw() { return static_cast<_Tp>(0); }\n@@ -329,9 +340,15 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n       { return false; }\n       static bool max() throw()\n       { return true; }\n-\n+#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+      static bool lowest() throw()\n+      { return min(); }\n+#endif\n       static const int digits = 1;\n       static const int digits10 = 0;\n+#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+      static const int max_digits10 = 0;\n+#endif\n       static const bool is_signed = false;\n       static const bool is_integer = true;\n       static const bool is_exact = true;\n@@ -383,9 +400,16 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n       { return __glibcxx_min(char); }\n       static char max() throw()\n       { return __glibcxx_max(char); }\n+#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+      static char lowest() throw()\n+      { return min(); }\n+#endif\n \n       static const int digits = __glibcxx_digits (char);\n       static const int digits10 = __glibcxx_digits10 (char);\n+#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+      static const int max_digits10 = 0;\n+#endif\n       static const bool is_signed = __glibcxx_signed (char);\n       static const bool is_integer = true;\n       static const bool is_exact = true;\n@@ -434,9 +458,16 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n       { return -__SCHAR_MAX__ - 1; }\n       static signed char max() throw()\n       { return __SCHAR_MAX__; }\n+#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+      static signed char lowest() throw()\n+      { return min(); }\n+#endif\n \n       static const int digits = __glibcxx_digits (signed char);\n       static const int digits10 = __glibcxx_digits10 (signed char);\n+#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+      static const int max_digits10 = 0;\n+#endif\n       static const bool is_signed = true;\n       static const bool is_integer = true;\n       static const bool is_exact = true;\n@@ -485,9 +516,16 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n       { return 0; }\n       static unsigned char max() throw()\n       { return __SCHAR_MAX__ * 2U + 1; }\n+#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+      static unsigned char lowest() throw()\n+      { return min(); }\n+#endif\n \n       static const int digits = __glibcxx_digits (unsigned char);\n       static const int digits10 = __glibcxx_digits10 (unsigned char);\n+#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+      static const int max_digits10 = 0;\n+#endif\n       static const bool is_signed = false;\n       static const bool is_integer = true;\n       static const bool is_exact = true;\n@@ -536,9 +574,16 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n       { return __glibcxx_min (wchar_t); }\n       static wchar_t max() throw()\n       { return __glibcxx_max (wchar_t); }\n+#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+      static wchar_t lowest() throw()\n+      { return min(); }\n+#endif\n \n       static const int digits = __glibcxx_digits (wchar_t);\n       static const int digits10 = __glibcxx_digits10 (wchar_t);\n+#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+      static const int max_digits10 = 0;\n+#endif\n       static const bool is_signed = __glibcxx_signed (wchar_t);\n       static const bool is_integer = true;\n       static const bool is_exact = true;\n@@ -588,9 +633,16 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n       { return __glibcxx_min (char16_t); }\n       static char16_t max() throw()\n       { return __glibcxx_max (char16_t); }\n+#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+      static char16_t lowest() throw()\n+      { return min(); }\n+#endif\n \n       static const int digits = __glibcxx_digits (char16_t);\n       static const int digits10 = __glibcxx_digits10 (char16_t);\n+#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+      static const int max_digits10 = 0;\n+#endif\n       static const bool is_signed = __glibcxx_signed (char16_t);\n       static const bool is_integer = true;\n       static const bool is_exact = true;\n@@ -639,9 +691,16 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n       { return __glibcxx_min (char32_t); }\n       static char32_t max() throw()\n       { return __glibcxx_max (char32_t); }\n+#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+      static char32_t lowest() throw()\n+      { return min(); }\n+#endif\n \n       static const int digits = __glibcxx_digits (char32_t);\n       static const int digits10 = __glibcxx_digits10 (char32_t);\n+#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+      static const int max_digits10 = 0;\n+#endif\n       static const bool is_signed = __glibcxx_signed (char32_t);\n       static const bool is_integer = true;\n       static const bool is_exact = true;\n@@ -691,9 +750,16 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n       { return -__SHRT_MAX__ - 1; }\n       static short max() throw()\n       { return __SHRT_MAX__; }\n+#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+      static short lowest() throw()\n+      { return min(); }\n+#endif\n \n       static const int digits = __glibcxx_digits (short);\n       static const int digits10 = __glibcxx_digits10 (short);\n+#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+      static const int max_digits10 = 0;\n+#endif\n       static const bool is_signed = true;\n       static const bool is_integer = true;\n       static const bool is_exact = true;\n@@ -742,9 +808,16 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n       { return 0; }\n       static unsigned short max() throw()\n       { return __SHRT_MAX__ * 2U + 1; }\n+#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+      static unsigned short lowest() throw()\n+      { return min(); }\n+#endif\n \n       static const int digits = __glibcxx_digits (unsigned short);\n       static const int digits10 = __glibcxx_digits10 (unsigned short);\n+#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+      static const int max_digits10 = 0;\n+#endif\n       static const bool is_signed = false;\n       static const bool is_integer = true;\n       static const bool is_exact = true;\n@@ -793,9 +866,16 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n       { return -__INT_MAX__ - 1; }\n       static int max() throw()\n       { return __INT_MAX__; }\n+#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+      static int lowest() throw()\n+      { return min(); }\n+#endif\n \n       static const int digits = __glibcxx_digits (int);\n       static const int digits10 = __glibcxx_digits10 (int);\n+#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+      static const int max_digits10 = 0;\n+#endif\n       static const bool is_signed = true;\n       static const bool is_integer = true;\n       static const bool is_exact = true;\n@@ -844,9 +924,16 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n       { return 0; }\n       static unsigned int max() throw()\n       { return __INT_MAX__ * 2U + 1; }\n+#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+      static unsigned int lowest() throw()\n+      { return min(); }\n+#endif\n \n       static const int digits = __glibcxx_digits (unsigned int);\n       static const int digits10 = __glibcxx_digits10 (unsigned int);\n+#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+      static const int max_digits10 = 0;\n+#endif\n       static const bool is_signed = false;\n       static const bool is_integer = true;\n       static const bool is_exact = true;\n@@ -895,9 +982,16 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n       { return -__LONG_MAX__ - 1; }\n       static long max() throw()\n       { return __LONG_MAX__; }\n+#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+      static long lowest() throw()\n+      { return min(); }\n+#endif\n \n       static const int digits = __glibcxx_digits (long);\n       static const int digits10 = __glibcxx_digits10 (long);\n+#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+      static const int max_digits10 = 0;\n+#endif\n       static const bool is_signed = true;\n       static const bool is_integer = true;\n       static const bool is_exact = true;\n@@ -946,9 +1040,16 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n       { return 0; }\n       static unsigned long max() throw()\n       { return __LONG_MAX__ * 2UL + 1; }\n+#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+      static unsigned long lowest() throw()\n+      { return min(); }\n+#endif\n \n       static const int digits = __glibcxx_digits (unsigned long);\n       static const int digits10 = __glibcxx_digits10 (unsigned long);\n+#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+      static const int max_digits10 = 0;\n+#endif\n       static const bool is_signed = false;\n       static const bool is_integer = true;\n       static const bool is_exact = true;\n@@ -997,9 +1098,16 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n       { return -__LONG_LONG_MAX__ - 1; }\n       static long long max() throw()\n       { return __LONG_LONG_MAX__; }\n+#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+      static long long lowest() throw()\n+      { return min(); }\n+#endif\n \n       static const int digits = __glibcxx_digits (long long);\n       static const int digits10 = __glibcxx_digits10 (long long);\n+#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+      static const int max_digits10 = 0;\n+#endif\n       static const bool is_signed = true;\n       static const bool is_integer = true;\n       static const bool is_exact = true;\n@@ -1048,9 +1156,16 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n       { return 0; }\n       static unsigned long long max() throw()\n       { return __LONG_LONG_MAX__ * 2ULL + 1; }\n+#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+      static unsigned long long lowest() throw()\n+      { return min(); }\n+#endif\n \n       static const int digits = __glibcxx_digits (unsigned long long);\n       static const int digits10 = __glibcxx_digits10 (unsigned long long);\n+#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+      static const int max_digits10 = 0;\n+#endif\n       static const bool is_signed = false;\n       static const bool is_integer = true;\n       static const bool is_exact = true;\n@@ -1099,9 +1214,17 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n       { return __FLT_MIN__; }\n       static float max() throw()\n       { return __FLT_MAX__; }\n+#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+      static float lowest() throw()\n+      { return -__FLT_MAX__; }\n+#endif\n \n       static const int digits = __FLT_MANT_DIG__;\n       static const int digits10 = __FLT_DIG__;\n+#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+      static const int max_digits10\n+\t = __glibcxx_max_digits10 (__FLT_MANT_DIG__);\n+#endif\n       static const bool is_signed = true;\n       static const bool is_integer = false;\n       static const bool is_exact = false;\n@@ -1156,9 +1279,17 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n       { return __DBL_MIN__; }\n       static double max() throw()\n       { return __DBL_MAX__; }\n+#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+      static double lowest() throw()\n+      { return -__DBL_MAX__; }\n+#endif\n \n       static const int digits = __DBL_MANT_DIG__;\n       static const int digits10 = __DBL_DIG__;\n+#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+      static const int max_digits10\n+\t = __glibcxx_max_digits10 (__DBL_MANT_DIG__);\n+#endif\n       static const bool is_signed = true;\n       static const bool is_integer = false;\n       static const bool is_exact = false;\n@@ -1213,9 +1344,17 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n       { return __LDBL_MIN__; }\n       static long double max() throw()\n       { return __LDBL_MAX__; }\n+#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+      static long double lowest() throw()\n+      { return -__LDBL_MAX__; }\n+#endif\n \n       static const int digits = __LDBL_MANT_DIG__;\n       static const int digits10 = __LDBL_DIG__;\n+#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+      static const int max_digits10\n+\t = __glibcxx_max_digits10 (__LDBL_MANT_DIG__);\n+#endif\n       static const bool is_signed = true;\n       static const bool is_integer = false;\n       static const bool is_exact = false;\n@@ -1268,5 +1407,6 @@ _GLIBCXX_END_NAMESPACE\n #undef __glibcxx_max\n #undef __glibcxx_digits\n #undef __glibcxx_digits10\n+#undef __glibcxx_max_digits10\n \n #endif // _GLIBCXX_NUMERIC_LIMITS"}, {"sha": "9c953c96afd39da270a49acb091a081b2d4f36ee", "filename": "libstdc++-v3/src/limits.cc", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/018afad39fc0b88d5bfd4842efa52a7923cff371/libstdc%2B%2B-v3%2Fsrc%2Flimits.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/018afad39fc0b88d5bfd4842efa52a7923cff371/libstdc%2B%2B-v3%2Fsrc%2Flimits.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Flimits.cc?ref=018afad39fc0b88d5bfd4842efa52a7923cff371", "patch": "@@ -37,6 +37,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n   const bool __numeric_limits_base::is_specialized;\n   const int  __numeric_limits_base::digits;\n   const int  __numeric_limits_base::digits10;\n+  const int  __numeric_limits_base::max_digits10;\n   const bool __numeric_limits_base::is_signed;\n   const bool __numeric_limits_base::is_integer;\n   const bool __numeric_limits_base::is_exact;\n@@ -61,6 +62,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n   const bool numeric_limits<bool>::is_specialized;\n   const int  numeric_limits<bool>::digits;\n   const int  numeric_limits<bool>::digits10;\n+  const int  numeric_limits<bool>::max_digits10;\n   const bool numeric_limits<bool>::is_signed;\n   const bool numeric_limits<bool>::is_integer;\n   const bool numeric_limits<bool>::is_exact;\n@@ -85,6 +87,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n   const bool numeric_limits<char>::is_specialized;\n   const int  numeric_limits<char>::digits;\n   const int  numeric_limits<char>::digits10;\n+  const int  numeric_limits<char>::max_digits10;\n   const bool numeric_limits<char>::is_signed;\n   const bool numeric_limits<char>::is_integer;\n   const bool numeric_limits<char>::is_exact;\n@@ -109,6 +112,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n   const bool numeric_limits<signed char>::is_specialized;\n   const int  numeric_limits<signed char>::digits;\n   const int  numeric_limits<signed char>::digits10;\n+  const int  numeric_limits<signed char>::max_digits10;\n   const bool numeric_limits<signed char>::is_signed;\n   const bool numeric_limits<signed char>::is_integer;\n   const bool numeric_limits<signed char>::is_exact;\n@@ -133,6 +137,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n   const bool numeric_limits<unsigned char>::is_specialized;\n   const int  numeric_limits<unsigned char>::digits;\n   const int  numeric_limits<unsigned char>::digits10;\n+  const int  numeric_limits<unsigned char>::max_digits10;\n   const bool numeric_limits<unsigned char>::is_signed;\n   const bool numeric_limits<unsigned char>::is_integer;\n   const bool numeric_limits<unsigned char>::is_exact;\n@@ -159,6 +164,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n   const bool numeric_limits<wchar_t>::is_specialized;\n   const int  numeric_limits<wchar_t>::digits;\n   const int  numeric_limits<wchar_t>::digits10;\n+  const int  numeric_limits<wchar_t>::max_digits10;\n   const bool numeric_limits<wchar_t>::is_signed;\n   const bool numeric_limits<wchar_t>::is_integer;\n   const bool numeric_limits<wchar_t>::is_exact;\n@@ -184,6 +190,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n   const bool numeric_limits<short>::is_specialized;\n   const int  numeric_limits<short>::digits;\n   const int  numeric_limits<short>::digits10;\n+  const int  numeric_limits<short>::max_digits10;\n   const bool numeric_limits<short>::is_signed;\n   const bool numeric_limits<short>::is_integer;\n   const bool numeric_limits<short>::is_exact;\n@@ -208,6 +215,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n   const bool numeric_limits<unsigned short>::is_specialized;\n   const int  numeric_limits<unsigned short>::digits;\n   const int  numeric_limits<unsigned short>::digits10;\n+  const int  numeric_limits<unsigned short>::max_digits10;\n   const bool numeric_limits<unsigned short>::is_signed;\n   const bool numeric_limits<unsigned short>::is_integer;\n   const bool numeric_limits<unsigned short>::is_exact;\n@@ -232,6 +240,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n   const bool numeric_limits<int>::is_specialized;\n   const int  numeric_limits<int>::digits;\n   const int  numeric_limits<int>::digits10;\n+  const int  numeric_limits<int>::max_digits10;\n   const bool numeric_limits<int>::is_signed;\n   const bool numeric_limits<int>::is_integer;\n   const bool numeric_limits<int>::is_exact;\n@@ -256,6 +265,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n   const bool numeric_limits<unsigned int>::is_specialized;\n   const int  numeric_limits<unsigned int>::digits;\n   const int  numeric_limits<unsigned int>::digits10;\n+  const int  numeric_limits<unsigned int>::max_digits10;\n   const bool numeric_limits<unsigned int>::is_signed;\n   const bool numeric_limits<unsigned int>::is_integer;\n   const bool numeric_limits<unsigned int>::is_exact;\n@@ -280,6 +290,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n   const bool numeric_limits<long>::is_specialized;\n   const int  numeric_limits<long>::digits;\n   const int  numeric_limits<long>::digits10;\n+  const int  numeric_limits<long>::max_digits10;\n   const bool numeric_limits<long>::is_signed;\n   const bool numeric_limits<long>::is_integer;\n   const bool numeric_limits<long>::is_exact;\n@@ -304,6 +315,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n   const bool numeric_limits<unsigned long>::is_specialized;\n   const int  numeric_limits<unsigned long>::digits;\n   const int  numeric_limits<unsigned long>::digits10;\n+  const int  numeric_limits<unsigned long>::max_digits10;\n   const bool numeric_limits<unsigned long>::is_signed;\n   const bool numeric_limits<unsigned long>::is_integer;\n   const bool numeric_limits<unsigned long>::is_exact;\n@@ -328,6 +340,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n   const bool numeric_limits<long long>::is_specialized;\n   const int  numeric_limits<long long>::digits;\n   const int  numeric_limits<long long>::digits10;\n+  const int  numeric_limits<long long>::max_digits10;\n   const bool numeric_limits<long long>::is_signed;\n   const bool numeric_limits<long long>::is_integer;\n   const bool numeric_limits<long long>::is_exact;\n@@ -351,6 +364,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n   const bool numeric_limits<unsigned long long>::is_specialized;\n   const int  numeric_limits<unsigned long long>::digits;\n   const int  numeric_limits<unsigned long long>::digits10;\n+  const int  numeric_limits<unsigned long long>::max_digits10;\n   const bool numeric_limits<unsigned long long>::is_signed;\n   const bool numeric_limits<unsigned long long>::is_integer;\n   const bool numeric_limits<unsigned long long>::is_exact;\n@@ -375,6 +389,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n   const bool numeric_limits<float>::is_specialized;\n   const int  numeric_limits<float>::digits;\n   const int  numeric_limits<float>::digits10;\n+  const int  numeric_limits<float>::max_digits10;\n   const bool numeric_limits<float>::is_signed;\n   const bool numeric_limits<float>::is_integer;\n   const bool numeric_limits<float>::is_exact;\n@@ -399,6 +414,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n   const bool numeric_limits<double>::is_specialized;\n   const int  numeric_limits<double>::digits;\n   const int  numeric_limits<double>::digits10;\n+  const int  numeric_limits<double>::max_digits10;\n   const bool numeric_limits<double>::is_signed;\n   const bool numeric_limits<double>::is_integer;\n   const bool numeric_limits<double>::is_exact;\n@@ -423,6 +439,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n   const bool numeric_limits<long double>::is_specialized;\n   const int  numeric_limits<long double>::digits;\n   const int  numeric_limits<long double>::digits10;\n+  const int  numeric_limits<long double>::max_digits10;\n   const bool numeric_limits<long double>::is_signed;\n   const bool numeric_limits<long double>::is_integer;\n   const bool numeric_limits<long double>::is_exact;\n@@ -447,6 +464,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n   const bool numeric_limits<char16_t>::is_specialized;\n   const int  numeric_limits<char16_t>::digits;\n   const int  numeric_limits<char16_t>::digits10;\n+  const int  numeric_limits<char16_t>::max_digits10;\n   const bool numeric_limits<char16_t>::is_signed;\n   const bool numeric_limits<char16_t>::is_integer;\n   const bool numeric_limits<char16_t>::is_exact;\n@@ -471,6 +489,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n   const bool numeric_limits<char32_t>::is_specialized;\n   const int  numeric_limits<char32_t>::digits;\n   const int  numeric_limits<char32_t>::digits10;\n+  const int  numeric_limits<char32_t>::max_digits10;\n   const bool numeric_limits<char32_t>::is_signed;\n   const bool numeric_limits<char32_t>::is_integer;\n   const bool numeric_limits<char32_t>::is_exact;"}, {"sha": "ffe5a4ba0dc0b1a424c2612a3e51100460bbc9cb", "filename": "libstdc++-v3/testsuite/18_support/numeric_limits/dr559.cc", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/018afad39fc0b88d5bfd4842efa52a7923cff371/libstdc%2B%2B-v3%2Ftestsuite%2F18_support%2Fnumeric_limits%2Fdr559.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/018afad39fc0b88d5bfd4842efa52a7923cff371/libstdc%2B%2B-v3%2Ftestsuite%2F18_support%2Fnumeric_limits%2Fdr559.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F18_support%2Fnumeric_limits%2Fdr559.cc?ref=018afad39fc0b88d5bfd4842efa52a7923cff371", "patch": "@@ -33,8 +33,10 @@ template<typename T>\n     VERIFY( cv_limits::is_specialized == limits::is_specialized );\n     VERIFY( cv_limits::min() == limits::min() );\n     VERIFY( cv_limits::max() == limits::max() );\n+    VERIFY( cv_limits::lowest() == limits::lowest() );\n     VERIFY( cv_limits::digits == limits::digits );\n     VERIFY( cv_limits::digits10 == limits::digits10 );\n+    VERIFY( cv_limits::max_digits10 == limits::max_digits10 );\n     VERIFY( cv_limits::is_signed == limits::is_signed );\n     VERIFY( cv_limits::is_integer == limits::is_integer );\n     VERIFY( cv_limits::is_exact == limits::is_exact );"}, {"sha": "498a03bc0cc4b30ac9981126fe0762b49a93e458", "filename": "libstdc++-v3/testsuite/18_support/numeric_limits/lowest.cc", "status": "added", "additions": 82, "deletions": 0, "changes": 82, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/018afad39fc0b88d5bfd4842efa52a7923cff371/libstdc%2B%2B-v3%2Ftestsuite%2F18_support%2Fnumeric_limits%2Flowest.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/018afad39fc0b88d5bfd4842efa52a7923cff371/libstdc%2B%2B-v3%2Ftestsuite%2F18_support%2Fnumeric_limits%2Flowest.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F18_support%2Fnumeric_limits%2Flowest.cc?ref=018afad39fc0b88d5bfd4842efa52a7923cff371", "patch": "@@ -0,0 +1,82 @@\n+// { dg-options \"-std=gnu++0x\" }\n+// { dg-add-options ieee }\n+\n+// 2010-02-25  Ed Smith-Rowland\n+\n+// Copyright (C) 2010 Free Software Foundation\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// 18.2.1.1 template class numeric_limits\n+\n+#include <limits>\n+#include <type_traits>\n+#include <testsuite_hooks.h>\n+\n+template<typename T>\n+  void\n+  do_test(std::true_type)\n+  {\n+    bool test __attribute__((unused)) = true;\n+    T limits_min = std::numeric_limits<T>::min();\n+    VERIFY( std::numeric_limits<T>::lowest() == limits_min );\n+  }\n+\n+template<typename T>\n+  void\n+  do_test(std::false_type)\n+  {\n+    bool test __attribute__((unused)) = true;\n+    T limits_max = std::numeric_limits<T>::max();\n+    VERIFY( std::numeric_limits<T>::lowest() == -limits_max );\n+  }\n+\n+template<typename Tp>\n+  void\n+  do_test()\n+  { do_test<Tp>(typename std::is_integral<Tp>::type()); }\n+\n+void test01()\n+{\n+  do_test<char>();\n+  do_test<signed char>();\n+  do_test<unsigned char>();\n+  do_test<wchar_t>();\n+  do_test<char16_t>();\n+  do_test<char32_t>();\n+\n+  do_test<short>();\n+  do_test<unsigned short>();\n+\n+  do_test<int>();\n+  do_test<unsigned int>();\n+\n+  do_test<long>();\n+  do_test<unsigned long>();\n+\n+  do_test<long long>();\n+  do_test<unsigned long long>();\n+\n+  do_test<float>();\n+  do_test<double>();\n+  do_test<long double>();\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "fdce19c36cb917644087900532f43aa59e3ff95b", "filename": "libstdc++-v3/testsuite/18_support/numeric_limits/max_digits10.cc", "status": "added", "additions": 67, "deletions": 0, "changes": 67, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/018afad39fc0b88d5bfd4842efa52a7923cff371/libstdc%2B%2B-v3%2Ftestsuite%2F18_support%2Fnumeric_limits%2Fmax_digits10.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/018afad39fc0b88d5bfd4842efa52a7923cff371/libstdc%2B%2B-v3%2Ftestsuite%2F18_support%2Fnumeric_limits%2Fmax_digits10.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F18_support%2Fnumeric_limits%2Fmax_digits10.cc?ref=018afad39fc0b88d5bfd4842efa52a7923cff371", "patch": "@@ -0,0 +1,67 @@\n+// { dg-options \"-std=gnu++0x\" }\n+// { dg-add-options ieee }\n+\n+// 2010-02-25  Ed Smith-Rowland\n+\n+// Copyright (C) 2010 Free Software Foundation\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// 18.2.1.1 template class numeric_limits\n+\n+#include <limits>\n+#include <cmath>\n+#include <testsuite_hooks.h>\n+\n+void\n+test01()\n+{\n+  bool test __attribute__((unused)) = true;\n+\n+  VERIFY( std::numeric_limits<bool>::max_digits10 == 0 );\n+  VERIFY( std::numeric_limits<char>::max_digits10 == 0 );\n+  VERIFY( std::numeric_limits<signed char>::max_digits10 == 0 );\n+  VERIFY( std::numeric_limits<unsigned char>::max_digits10 == 0 );\n+  VERIFY( std::numeric_limits<wchar_t>::max_digits10 == 0 );\n+  VERIFY( std::numeric_limits<short>::max_digits10 == 0 );\n+  VERIFY( std::numeric_limits<unsigned short>::max_digits10 == 0 );\n+  VERIFY( std::numeric_limits<int>::max_digits10 == 0 );\n+  VERIFY( std::numeric_limits<unsigned int>::max_digits10 == 0 );\n+  VERIFY( std::numeric_limits<long>::max_digits10 == 0 );\n+  VERIFY( std::numeric_limits<unsigned long>::max_digits10 == 0 );\n+  VERIFY( std::numeric_limits<long long>::max_digits10 == 0 );\n+  VERIFY( std::numeric_limits<unsigned long long>::max_digits10 == 0 );\n+  VERIFY( std::numeric_limits<char16_t>::max_digits10 == 0 );\n+  VERIFY( std::numeric_limits<char32_t>::max_digits10 == 0 );\n+\n+  const int f_max_digits10 = (2 + std::numeric_limits<float>::digits\n+\t\t\t      * 643 / 2136);\n+  VERIFY( std::numeric_limits<float>::max_digits10 == f_max_digits10 );\n+\n+  const int d_max_digits10 = (2 + std::numeric_limits<double>::digits\n+\t\t\t      * 643 / 2136);\n+  VERIFY( std::numeric_limits<double>::max_digits10 == d_max_digits10 );\n+\n+  const int ld_max_digits10 = (2 + std::numeric_limits<long double>::digits\n+\t\t\t       * 643 / 2136);\n+  VERIFY( std::numeric_limits<long double>::max_digits10 == ld_max_digits10 );\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}]}