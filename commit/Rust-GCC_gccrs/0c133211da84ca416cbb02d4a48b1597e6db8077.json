{"sha": "0c133211da84ca416cbb02d4a48b1597e6db8077", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGMxMzMyMTFkYTg0Y2E0MTZjYmIwMmQ0YTQ4YjE1OTdlNmRiODA3Nw==", "commit": {"author": {"name": "Tobias Burnus", "email": "burnus@net-b.de", "date": "2012-02-17T10:51:10Z"}, "committer": {"name": "Tobias Burnus", "email": "burnus@gcc.gnu.org", "date": "2012-02-17T10:51:10Z"}, "message": "re PR translation/52232 (translatable string typos: \"conindexed\" (should be \"coindexed\"))\n\n2012-02-17  Tobias Burnus  <burnus@net-b.de>\n            Roland Stigge  <stigge@antcom.de>\n\n        PR translation/52232\n        PR translation/52234\n        PR translation/52245\n        PR translation/52246\n        PR translation/52262\n        PR translation/52273\n        * io.c (gfc_match_open): Fix typo.\n        * interface.c (compare_actual_formal): Ditto.\n        * lang.opt (freal-4-real-8, freal-4-real-16, freal-8-real-16):\n        * Ditto.\n        * match.c (alloc_opt_list, gfc_match_nullify): Ditto.\n        * check.c (gfc_check_associated, gfc_check_null): Ditto.\n\n2012-02-17  Tobias Burnus  <burnus@net-b.de>\n\n        PR translation/52232\n        PR translation/52234\n        PR translation/52245\n        PR translation/52246\n        PR translation/52262\n        PR translation/52273\n        * gfortran.dg/coarray_22.f90: Update dg-error.\n        * gfortran.dg/allocate_alloc_opt_4.f90: Ditto.\n\n\nCo-Authored-By: Roland Stigge <stigge@antcom.de>\n\nFrom-SVN: r184331", "tree": {"sha": "ad8fdc2ad0d9a5e02c6d98ba0db7ba2dcc281920", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ad8fdc2ad0d9a5e02c6d98ba0db7ba2dcc281920"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0c133211da84ca416cbb02d4a48b1597e6db8077", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0c133211da84ca416cbb02d4a48b1597e6db8077", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0c133211da84ca416cbb02d4a48b1597e6db8077", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0c133211da84ca416cbb02d4a48b1597e6db8077/comments", "author": {"login": "tob2", "id": 264461, "node_id": "MDQ6VXNlcjI2NDQ2MQ==", "avatar_url": "https://avatars.githubusercontent.com/u/264461?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tob2", "html_url": "https://github.com/tob2", "followers_url": "https://api.github.com/users/tob2/followers", "following_url": "https://api.github.com/users/tob2/following{/other_user}", "gists_url": "https://api.github.com/users/tob2/gists{/gist_id}", "starred_url": "https://api.github.com/users/tob2/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tob2/subscriptions", "organizations_url": "https://api.github.com/users/tob2/orgs", "repos_url": "https://api.github.com/users/tob2/repos", "events_url": "https://api.github.com/users/tob2/events{/privacy}", "received_events_url": "https://api.github.com/users/tob2/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "459e2649e4257c56662f5c232d49fdeef5f7bc3b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/459e2649e4257c56662f5c232d49fdeef5f7bc3b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/459e2649e4257c56662f5c232d49fdeef5f7bc3b"}], "stats": {"total": 58, "additions": 42, "deletions": 16}, "files": [{"sha": "ef54b83d876643b925f1be698517b38511964f18", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0c133211da84ca416cbb02d4a48b1597e6db8077/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0c133211da84ca416cbb02d4a48b1597e6db8077/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=0c133211da84ca416cbb02d4a48b1597e6db8077", "patch": "@@ -1,3 +1,18 @@\n+2012-02-17  Tobias Burnus  <burnus@net-b.de>\n+\t    Roland Stigge  <stigge@antcom.de>\n+\n+\tPR translation/52232\n+\tPR translation/52234\n+\tPR translation/52245\n+\tPR translation/52246\n+\tPR translation/52262\n+\tPR translation/52273\n+\t* io.c (gfc_match_open): Fix typo.\n+\t* interface.c (compare_actual_formal): Ditto.\n+\t* lang.opt (freal-4-real-8, freal-4-real-16, freal-8-real-16): Ditto.\n+\t* match.c (alloc_opt_list, gfc_match_nullify): Ditto.\n+\t* check.c (gfc_check_associated, gfc_check_null): Ditto.\n+\n 2012-02-12  Mikael Morin  <mikael@gcc.gnu.org>\n \n \tPR fortran/50981"}, {"sha": "afeb653a5a8f1f69a7d58c728abc2668286d464f", "filename": "gcc/fortran/check.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0c133211da84ca416cbb02d4a48b1597e6db8077/gcc%2Ffortran%2Fcheck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0c133211da84ca416cbb02d4a48b1597e6db8077/gcc%2Ffortran%2Fcheck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fcheck.c?ref=0c133211da84ca416cbb02d4a48b1597e6db8077", "patch": "@@ -908,7 +908,7 @@ gfc_check_associated (gfc_expr *pointer, gfc_expr *target)\n   if (attr1.pointer && gfc_is_coindexed (pointer))\n     {\n       gfc_error (\"'%s' argument of '%s' intrinsic at %L shall not be \"\n-\t\t \"conindexed\", gfc_current_intrinsic_arg[0]->name,\n+\t\t \"coindexed\", gfc_current_intrinsic_arg[0]->name,\n \t\t gfc_current_intrinsic, &pointer->where);\n       return FAILURE;\n     }\n@@ -944,7 +944,7 @@ gfc_check_associated (gfc_expr *pointer, gfc_expr *target)\n   if (attr1.pointer && gfc_is_coindexed (target))\n     {\n       gfc_error (\"'%s' argument of '%s' intrinsic at %L shall not be \"\n-\t\t \"conindexed\", gfc_current_intrinsic_arg[1]->name,\n+\t\t \"coindexed\", gfc_current_intrinsic_arg[1]->name,\n \t\t gfc_current_intrinsic, &target->where);\n       return FAILURE;\n     }\n@@ -2851,7 +2851,7 @@ gfc_check_null (gfc_expr *mold)\n   if (gfc_is_coindexed (mold))\n     {\n       gfc_error (\"'%s' argument of '%s' intrinsic at %L shall not be \"\n-\t\t \"conindexed\", gfc_current_intrinsic_arg[0]->name,\n+\t\t \"coindexed\", gfc_current_intrinsic_arg[0]->name,\n \t\t gfc_current_intrinsic, &mold->where);\n       return FAILURE;\n     }"}, {"sha": "7b5f445f208dd347f3b1c6ff9b32573c0accdd1a", "filename": "gcc/fortran/interface.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0c133211da84ca416cbb02d4a48b1597e6db8077/gcc%2Ffortran%2Finterface.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0c133211da84ca416cbb02d4a48b1597e6db8077/gcc%2Ffortran%2Finterface.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Finterface.c?ref=0c133211da84ca416cbb02d4a48b1597e6db8077", "patch": "@@ -2305,7 +2305,7 @@ compare_actual_formal (gfc_actual_arglist **ap, gfc_formal_arglist *formal,\n \t    && a->expr->ts.type == BT_CHARACTER)\n \t{\n \t  if (where)\n-\t    gfc_error (\"Actual argument argument at %L to allocatable or \"\n+\t    gfc_error (\"Actual argument at %L to allocatable or \"\n \t\t       \"pointer dummy argument '%s' must have a deferred \"\n \t\t       \"length type parameter if and only if the dummy has one\",\n \t\t       &a->expr->where, f->sym->name);\n@@ -2429,7 +2429,7 @@ compare_actual_formal (gfc_actual_arglist **ap, gfc_formal_arglist *formal,\n \t{\n \t  if (where)\n \t    gfc_error (\"Coindexed ASYNCHRONOUS or VOLATILE actual argument at \"\n-\t\t       \"at %L requires that dummy %s' has neither \"\n+\t\t       \"at %L requires that dummy '%s' has neither \"\n \t\t       \"ASYNCHRONOUS nor VOLATILE\", &a->expr->where,\n \t\t       f->sym->name);\n \t  return 0;"}, {"sha": "b7eac6c9be1988f95146917fe99a4a7f4201d301", "filename": "gcc/fortran/io.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0c133211da84ca416cbb02d4a48b1597e6db8077/gcc%2Ffortran%2Fio.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0c133211da84ca416cbb02d4a48b1597e6db8077/gcc%2Ffortran%2Fio.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fio.c?ref=0c133211da84ca416cbb02d4a48b1597e6db8077", "patch": "@@ -2016,7 +2016,7 @@ gfc_match_open (void)\n   /* Checks on the ROUND specifier.  */\n   if (open->round)\n     {\n-      if (gfc_notify_std (GFC_STD_F2003, \"Fortran F2003: ROUND= at %C \"\n+      if (gfc_notify_std (GFC_STD_F2003, \"Fortran 2003: ROUND= at %C \"\n \t  \"not allowed in Fortran 95\") == FAILURE)\n       goto cleanup;\n "}, {"sha": "56c589c6bdf0b7a1653aa8723ca160c028907438", "filename": "gcc/fortran/lang.opt", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0c133211da84ca416cbb02d4a48b1597e6db8077/gcc%2Ffortran%2Flang.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0c133211da84ca416cbb02d4a48b1597e6db8077/gcc%2Ffortran%2Flang.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Flang.opt?ref=0c133211da84ca416cbb02d4a48b1597e6db8077", "patch": "@@ -500,15 +500,15 @@ Enable range checking during compilation\n \n freal-4-real-8\n Fortran RejectNegative\n-Interpret any REAl(4) as a REAL(8)\n+Interpret any REAL(4) as a REAL(8)\n \n freal-4-real-10\n Fortran RejectNegative\n Interpret any REAL(4) as a REAL(10)\n \n freal-4-real-16\n Fortran RejectNegative\n-Interpret any REAL(4) as a REAl(16)\n+Interpret any REAL(4) as a REAL(16)\n \n freal-8-real-4\n Fortran RejectNegative\n@@ -520,7 +520,7 @@ Interpret any REAL(8) as a REAL(10)\n \n freal-8-real-16\n Fortran RejectNegative\n-Interpret any REAL(8) as a REAl(16)\n+Interpret any REAL(8) as a REAL(16)\n \n frealloc-lhs\n Fortran"}, {"sha": "14381608c907d52e6eabb89384b4202aeb16516c", "filename": "gcc/fortran/match.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0c133211da84ca416cbb02d4a48b1597e6db8077/gcc%2Ffortran%2Fmatch.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0c133211da84ca416cbb02d4a48b1597e6db8077/gcc%2Ffortran%2Fmatch.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fmatch.c?ref=0c133211da84ca416cbb02d4a48b1597e6db8077", "patch": "@@ -3661,7 +3661,7 @@ gfc_match_allocate (void)\n \n \t  if (head->next\n \t      && gfc_notify_std (GFC_STD_F2008, \"Fortran 2008: SOURCE tag at %L\"\n-\t\t\t\t \" with more than a single allocate objects\",\n+\t\t\t\t \" with more than a single allocate object\",\n \t\t\t\t &tmp->where) == FAILURE)\n \t    goto cleanup;\n \n@@ -3787,7 +3787,7 @@ gfc_match_nullify (void)\n       /* F2008, C1242.  */\n       if (gfc_is_coindexed (p))\n \t{\n-\t  gfc_error (\"Pointer object at %C shall not be conindexed\");\n+\t  gfc_error (\"Pointer object at %C shall not be coindexed\");\n \t  goto cleanup;\n \t}\n "}, {"sha": "1c813f1800239c5b7afc63dbb2da9c7277fde24d", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0c133211da84ca416cbb02d4a48b1597e6db8077/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0c133211da84ca416cbb02d4a48b1597e6db8077/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=0c133211da84ca416cbb02d4a48b1597e6db8077", "patch": "@@ -1,3 +1,14 @@\n+2012-02-17  Tobias Burnus  <burnus@net-b.de>\n+\n+\tPR translation/52232\n+\tPR translation/52234\n+\tPR translation/52245\n+\tPR translation/52246\n+\tPR translation/52262\n+\tPR translation/52273\n+\t* gfortran.dg/coarray_22.f90: Update dg-error.\n+\t* gfortran.dg/allocate_alloc_opt_4.f90: Ditto.\n+\n 2012-02-17  Rainer Orth  <ro@CeBiTec.Uni-Bielefeld.DE>\n \n \tPR target/51753"}, {"sha": "ee6c3635912dbe8d2805cf2779f1c6f0ca98c3f0", "filename": "gcc/testsuite/gfortran.dg/allocate_alloc_opt_4.f90", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0c133211da84ca416cbb02d4a48b1597e6db8077/gcc%2Ftestsuite%2Fgfortran.dg%2Fallocate_alloc_opt_4.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0c133211da84ca416cbb02d4a48b1597e6db8077/gcc%2Ftestsuite%2Fgfortran.dg%2Fallocate_alloc_opt_4.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fallocate_alloc_opt_4.f90?ref=0c133211da84ca416cbb02d4a48b1597e6db8077", "patch": "@@ -17,7 +17,7 @@ program a\n \n   allocate(integer(4) :: i(4), source=n) ! { dg-error \"conflicts with the typespec\" }\n \n-  allocate(i(4), j(n), source=n) ! { dg-error \"Fortran 2008: SOURCE tag at .1. with more than a single allocate objects\" }\n+  allocate(i(4), j(n), source=n) ! { dg-error \"Fortran 2008: SOURCE tag at .1. with more than a single allocate object\" }\n \n   allocate(x(4), source=n) ! { dg-error \"type incompatible with\" }\n "}, {"sha": "7860c3030dfb28bb90586e4119f1a3c2a5a480cc", "filename": "gcc/testsuite/gfortran.dg/coarray_22.f90", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0c133211da84ca416cbb02d4a48b1597e6db8077/gcc%2Ftestsuite%2Fgfortran.dg%2Fcoarray_22.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0c133211da84ca416cbb02d4a48b1597e6db8077/gcc%2Ftestsuite%2Fgfortran.dg%2Fcoarray_22.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fcoarray_22.f90?ref=0c133211da84ca416cbb02d4a48b1597e6db8077", "patch": "@@ -15,14 +15,14 @@\n if (associated(x%ptr)) stop 0\n if (associated(x%ptr,y%ptr)) stop 0\n \n-if (associated(x[1]%ptr)) stop 0  ! { dg-error \"shall not be conindexed\" }\n-if (associated(x%ptr,y[1]%ptr)) stop 0  ! { dg-error \"shall not be conindexed\" }\n+if (associated(x[1]%ptr)) stop 0  ! { dg-error \"shall not be coindexed\" }\n+if (associated(x%ptr,y[1]%ptr)) stop 0  ! { dg-error \"shall not be coindexed\" }\n \n nullify (x%ptr)\n-nullify (x[1]%ptr)  ! { dg-error \"shall not be conindexed\" }\n+nullify (x[1]%ptr)  ! { dg-error \"shall not be coindexed\" }\n \n x%ptr => null(x%ptr)\n-x%ptr => null(x[1]%ptr)  ! { dg-error \"shall not be conindexed\" }\n+x%ptr => null(x[1]%ptr)  ! { dg-error \"shall not be coindexed\" }\n x[1]%ptr => null(x%ptr)  ! { dg-error \"shall not have a coindex\" }\n \n allocate(x%ptr)"}]}