{"sha": "7f4c190364aeb00a399ac594d56099603323855d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2Y0YzE5MDM2NGFlYjAwYTM5OWFjNTk0ZDU2MDk5NjAzMzIzODU1ZA==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2009-04-29T10:19:14Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2009-04-29T10:19:14Z"}, "message": "[multiple changes]\n\n2009-04-29  Thomas Quinot  <quinot@adacore.com>\n\n\t* sem_elim.adb: Minor reformatting\n\n2009-04-29  Ed Schonberg  <schonberg@adacore.com>\n\n\t* exp_aggr.adb (Convert_To_Positional): if the current unit is a\n\tpredefined unit, allow arbitrary number of components in static\n\taggregate, to ensure that the same level of constant folding applies\n\tfor Ada 95 and Ada 05 versions of the file.\n\nFrom-SVN: r146944", "tree": {"sha": "2a20b57a33921a632c41cd8c70cdc6638ead147d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2a20b57a33921a632c41cd8c70cdc6638ead147d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7f4c190364aeb00a399ac594d56099603323855d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7f4c190364aeb00a399ac594d56099603323855d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7f4c190364aeb00a399ac594d56099603323855d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7f4c190364aeb00a399ac594d56099603323855d/comments", "author": null, "committer": null, "parents": [{"sha": "333748297bddb622fad377e66dc26e48e75add69", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/333748297bddb622fad377e66dc26e48e75add69", "html_url": "https://github.com/Rust-GCC/gccrs/commit/333748297bddb622fad377e66dc26e48e75add69"}], "stats": {"total": 61, "additions": 47, "deletions": 14}, "files": [{"sha": "e2eaa614f5166cd1ae74b56d43f8c38f1b8cce5d", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7f4c190364aeb00a399ac594d56099603323855d/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7f4c190364aeb00a399ac594d56099603323855d/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=7f4c190364aeb00a399ac594d56099603323855d", "patch": "@@ -1,3 +1,14 @@\n+2009-04-29  Thomas Quinot  <quinot@adacore.com>\n+\n+\t* sem_elim.adb: Minor reformatting\n+\n+2009-04-29  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* exp_aggr.adb (Convert_To_Positional): if the current unit is a\n+\tpredefined unit, allow arbitrary number of components in static\n+\taggregate, to ensure that the same level of constant folding applies\n+\tfor Ada 95 and Ada 05 versions of the file.\n+\n 2009-04-29  Ed Schonberg  <schonberg@adacore.com>\n \n \t* sem_elim.adb (Check_Eliminated): Handle new improved eliminate"}, {"sha": "7c38cba86243c5b3c2d5a76d4205898b1848daa8", "filename": "gcc/ada/exp_aggr.adb", "status": "modified", "additions": 24, "deletions": 4, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7f4c190364aeb00a399ac594d56099603323855d/gcc%2Fada%2Fexp_aggr.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7f4c190364aeb00a399ac594d56099603323855d/gcc%2Fada%2Fexp_aggr.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_aggr.adb?ref=7f4c190364aeb00a399ac594d56099603323855d", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1992-2008, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2009, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -35,6 +35,7 @@ with Exp_Ch3;  use Exp_Ch3;\n with Exp_Ch7;  use Exp_Ch7;\n with Exp_Ch9;  use Exp_Ch9;\n with Exp_Tss;  use Exp_Tss;\n+with Fname;    use Fname;\n with Freeze;   use Freeze;\n with Itypes;   use Itypes;\n with Lib;      use Lib;\n@@ -506,7 +507,7 @@ package body Exp_Aggr is\n    --    9. There cannot be any discriminated record components, since the\n    --       back end cannot handle this complex case.\n \n-   --   10. No controlled actions need to be generated for components.\n+   --   10. No controlled actions need to be generated for components\n \n    function Backend_Processing_Possible (N : Node_Id) return Boolean is\n       Typ : constant Entity_Id := Etype (N);\n@@ -3735,24 +3736,43 @@ package body Exp_Aggr is\n                            --  Check for maximum others replication. Note that\n                            --  we skip this test if either of the restrictions\n                            --  No_Elaboration_Code or No_Implicit_Loops is\n-                           --  active, or if this is a preelaborable unit.\n+                           --  active, if this is a preelaborable unit or a\n+                           --  predefined unit. This ensures that predefined\n+                           --  units get the same level of constant folding in\n+                           --  Ada 95 and Ada 05, where their categorization\n+                           --  has changed.\n \n                            declare\n                               P : constant Entity_Id :=\n                                     Cunit_Entity (Current_Sem_Unit);\n \n                            begin\n+                              --  Check if duplication OK and if so continue\n+                              --  processing.\n+\n                               if Restriction_Active (No_Elaboration_Code)\n                                 or else Restriction_Active (No_Implicit_Loops)\n                                 or else Is_Preelaborated (P)\n                                 or else (Ekind (P) = E_Package_Body\n                                           and then\n                                             Is_Preelaborated (Spec_Entity (P)))\n+                                or else\n+                                  Is_Predefined_File_Name\n+                                    (Unit_File_Name (Get_Source_Unit (P)))\n                               then\n                                  null;\n \n+                              --  If duplication not OK, then we return False\n+                              --  if the replication count is too high\n+\n                               elsif Rep_Count > Max_Others_Replicate then\n                                  return False;\n+\n+                              --  Continue on if duplication not OK, but the\n+                              --  replication count is not excessive.\n+\n+                              else\n+                                 null;\n                               end if;\n                            end;\n                         end if;\n@@ -4989,7 +5009,7 @@ package body Exp_Aggr is\n \n       --  STEP 4\n \n-      --  Look if in place aggregate expansion is possible.\n+      --  Look if in place aggregate expansion is possible\n \n       --  For object declarations we build the aggregate in place, unless\n       --  the array is bit-packed or the component is controlled."}, {"sha": "e4c99fc01b682ef9bd3ac60ffc2b3a706cc78cdf", "filename": "gcc/ada/sem_elim.adb", "status": "modified", "additions": 12, "deletions": 10, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7f4c190364aeb00a399ac594d56099603323855d/gcc%2Fada%2Fsem_elim.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7f4c190364aeb00a399ac594d56099603323855d/gcc%2Fada%2Fsem_elim.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_elim.adb?ref=7f4c190364aeb00a399ac594d56099603323855d", "patch": "@@ -286,7 +286,7 @@ package body Sem_Elim is\n                goto Continue;\n             end if;\n \n-            --  Find enclosing unit.\n+            --  Find enclosing unit\n \n             Scop := Cunit_Entity (Current_Sem_Unit);\n \n@@ -386,8 +386,8 @@ package body Sem_Elim is\n                      function Skip_Spaces return Natural;\n                      --  If Sloc_Trace (Idx) is not space character, returns\n                      --  Idx. Otherwise returns the index of the nearest\n-                     --  non-space character in Sloc_Trace to the right of\n-                     --  Idx. Returns 0 if there is no such character.\n+                     --  non-space character in Sloc_Trace to the right of Idx.\n+                     --  Returns 0 if there is no such character.\n \n                      -----------------------------\n                      -- Different_Trace_Lengths --\n@@ -441,17 +441,19 @@ package body Sem_Elim is\n                            end if;\n                         end loop;\n \n-                        --  Find last non-space before this colon. If there\n-                        --  is no space character before this colon, then\n-                        --  return False. Otherwise, End_Idx set to point to\n-                        --  this non-space character.\n+                        --  Find last non-space before this colon. If there is\n+                        --  no space character before this colon, then return\n+                        --  False. Otherwise, End_Idx is set to point to this\n+                        --  non-space character.\n \n                         End_Idx := Tmp_Idx;\n                         loop\n                            if End_Idx < Idx then\n                               return False;\n+\n                            elsif Sloc_Trace (End_Idx) /= ' ' then\n                               exit;\n+\n                            else\n                               End_Idx := End_Idx - 1;\n                            end if;\n@@ -559,8 +561,8 @@ package body Sem_Elim is\n                   end;\n                end if;\n \n-               --  If we have a Result_Type, then we must have a function\n-               --  with the proper result type\n+               --  If we have a Result_Type, then we must have a function with\n+               --  the proper result type.\n \n                if Elmt.Result_Type /= No_Name then\n                   if Ekind (E) /= E_Function\n@@ -658,7 +660,7 @@ package body Sem_Elim is\n          end if;\n       end loop;\n \n-      --  If this is an internal operation generated for a protected operation.\n+      --  If this is an internal operation generated for a protected operation,\n       --  its name does not match the source name, so just report the error.\n \n       if not Comes_From_Source (E)"}]}