{"sha": "c2f41ffd2447492ac54381162abe1aceed58812d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzJmNDFmZmQyNDQ3NDkyYWM1NDM4MTE2MmFiZTFhY2VlZDU4ODEyZA==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2015-03-14T09:55:41Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2015-03-14T09:55:41Z"}, "message": "re PR tree-optimization/65418 (vim miscompilation)\n\n\tPR tree-optimization/65418\n\t* tree-ssa-reassoc.c (extract_bit_test_mask): If there\n\tare casts in the first PLUS_EXPR operand, ensure tbias and\n\t*totallowp are in the inner type.\n\n\t* gcc.c-torture/execute/pr65418-1.c: New test.\n\t* gcc.c-torture/execute/pr65418-2.c: New test.\n\nFrom-SVN: r221434", "tree": {"sha": "0dcab7b94a93edb6c043b8c0f77d70876a60e8a2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0dcab7b94a93edb6c043b8c0f77d70876a60e8a2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c2f41ffd2447492ac54381162abe1aceed58812d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c2f41ffd2447492ac54381162abe1aceed58812d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c2f41ffd2447492ac54381162abe1aceed58812d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c2f41ffd2447492ac54381162abe1aceed58812d/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "a4b55f2a303636e3491250e1499e88454cb4ed2f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a4b55f2a303636e3491250e1499e88454cb4ed2f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a4b55f2a303636e3491250e1499e88454cb4ed2f"}], "stats": {"total": 60, "additions": 53, "deletions": 7}, "files": [{"sha": "8a387687eacf35e748d26b0ed2c41b70204512e4", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c2f41ffd2447492ac54381162abe1aceed58812d/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c2f41ffd2447492ac54381162abe1aceed58812d/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=c2f41ffd2447492ac54381162abe1aceed58812d", "patch": "@@ -1,5 +1,10 @@\n 2015-03-14  Jakub Jelinek  <jakub@redhat.com>\n \n+\tPR tree-optimization/65418\n+\t* tree-ssa-reassoc.c (extract_bit_test_mask): If there\n+\tare casts in the first PLUS_EXPR operand, ensure tbias and\n+\t*totallowp are in the inner type.\n+\n \tPR rtl-optimization/65401\n \t* combine.c (rtx_equal_for_field_assignment_p): Add widen_x\n \targument.  If true, adjust_address_nv of x with big-endian"}, {"sha": "e4a92af2dab8047bf1fb30a11144797ff38e9a7a", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c2f41ffd2447492ac54381162abe1aceed58812d/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c2f41ffd2447492ac54381162abe1aceed58812d/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=c2f41ffd2447492ac54381162abe1aceed58812d", "patch": "@@ -1,5 +1,9 @@\n 2015-03-14  Jakub Jelinek  <jakub@redhat.com>\n \n+\tPR tree-optimization/65418\n+\t* gcc.c-torture/execute/pr65418-1.c: New test.\n+\t* gcc.c-torture/execute/pr65418-2.c: New test.\n+\n \tPR rtl-optimization/65401\n \t* gcc.c-torture/execute/pr65401.c: New test.\n "}, {"sha": "54068b3b817989db2af5c08a03845afee426a397", "filename": "gcc/testsuite/gcc.c-torture/execute/pr65418-1.c", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c2f41ffd2447492ac54381162abe1aceed58812d/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fpr65418-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c2f41ffd2447492ac54381162abe1aceed58812d/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fpr65418-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fpr65418-1.c?ref=c2f41ffd2447492ac54381162abe1aceed58812d", "patch": "@@ -0,0 +1,19 @@\n+/* PR tree-optimization/65418 */\n+\n+__attribute__((noinline, noclone)) int\n+foo (int x)\n+{\n+  if (x == -216 || x == -132 || x == -218 || x == -146)\n+     return 1;\n+  return 0;\n+}\n+\n+int\n+main ()\n+{\n+  volatile int i;\n+  for (i = -230; i < -120; i++)\n+    if (foo (i) != (i == -216 || i == -132 || i == -218 || i == -146))\n+      __builtin_abort ();\n+  return 0;\n+}"}, {"sha": "9dc1c66ac62ba593a82317e2210d2e766c2327d5", "filename": "gcc/testsuite/gcc.c-torture/execute/pr65418-2.c", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c2f41ffd2447492ac54381162abe1aceed58812d/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fpr65418-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c2f41ffd2447492ac54381162abe1aceed58812d/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fpr65418-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fpr65418-2.c?ref=c2f41ffd2447492ac54381162abe1aceed58812d", "patch": "@@ -0,0 +1,19 @@\n+/* PR tree-optimization/65418 */\n+\n+__attribute__((noinline, noclone)) int\n+foo (int x)\n+{\n+  if (x == -216 || x == -211 || x == -218 || x == -205 || x == -223)\n+     return 1;\n+  return 0;\n+}\n+\n+int\n+main ()\n+{\n+  volatile int i;\n+  for (i = -230; i < -200; i++)\n+    if (foo (i) != (i == -216 || i == -211 || i == -218 || i == -205 || i == -223))\n+      __builtin_abort ();\n+  return 0;\n+}"}, {"sha": "77640e5dd53baf8d367b0a88b3e47bf8adad472f", "filename": "gcc/tree-ssa-reassoc.c", "status": "modified", "additions": 6, "deletions": 7, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c2f41ffd2447492ac54381162abe1aceed58812d/gcc%2Ftree-ssa-reassoc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c2f41ffd2447492ac54381162abe1aceed58812d/gcc%2Ftree-ssa-reassoc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-reassoc.c?ref=c2f41ffd2447492ac54381162abe1aceed58812d", "patch": "@@ -2439,26 +2439,25 @@ extract_bit_test_mask (tree exp, int prec, tree totallow, tree low, tree high,\n \t      && TREE_CODE (exp) == PLUS_EXPR\n \t      && TREE_CODE (TREE_OPERAND (exp, 1)) == INTEGER_CST)\n \t    {\n+\t      tree ret = TREE_OPERAND (exp, 0);\n+\t      STRIP_NOPS (ret);\n \t      widest_int bias\n \t        = wi::neg (wi::sext (wi::to_widest (TREE_OPERAND (exp, 1)),\n \t\t\t\t     TYPE_PRECISION (TREE_TYPE (low))));\n-\t      tree tbias = wide_int_to_tree (TREE_TYPE (low), bias);\n+\t      tree tbias = wide_int_to_tree (TREE_TYPE (ret), bias);\n \t      if (totallowp)\n \t\t{\n \t\t  *totallowp = tbias;\n-\t\t  exp = TREE_OPERAND (exp, 0);\n-\t\t  STRIP_NOPS (exp);\n-\t\t  return exp;\n+\t\t  return ret;\n \t\t}\n \t      else if (!tree_int_cst_lt (totallow, tbias))\n \t\treturn NULL_TREE;\n+\t      bias = wi::to_widest (tbias);\n \t      bias -= wi::to_widest (totallow);\n \t      if (wi::ges_p (bias, 0) && wi::lts_p (bias, prec - max))\n \t\t{\n \t\t  *mask = wi::lshift (*mask, bias);\n-\t\t  exp = TREE_OPERAND (exp, 0);\n-\t\t  STRIP_NOPS (exp);\n-\t\t  return exp;\n+\t\t  return ret;\n \t\t}\n \t    }\n \t}"}]}