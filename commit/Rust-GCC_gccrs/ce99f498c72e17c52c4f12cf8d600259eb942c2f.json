{"sha": "ce99f498c72e17c52c4f12cf8d600259eb942c2f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Y2U5OWY0OThjNzJlMTdjNTJjNGYxMmNmOGQ2MDAyNTllYjk0MmMyZg==", "commit": {"author": {"name": "Paolo Carlini", "email": "paolo.carlini@oracle.com", "date": "2010-12-17T18:32:27Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2010-12-17T18:32:27Z"}, "message": "basic_string.h (operator+(basic_string<>&&, const basic_string<>&), [...]): Add.\n\n2010-12-17  Paolo Carlini  <paolo.carlini@oracle.com>\n\n\t* include/bits/basic_string.h (operator+(basic_string<>&&,\n\tconst basic_string<>&), operator+(const basic_string<>&,\n\tbasic_string<>&&), operator+(basic_string<>&&, basic_string<>&&),\n\toperator+(const _CharT*, basic_string<>&&), operator+(_CharT,\n\tbasic_string<>&&), operator+(basic_string<>&&, const _CharT*),\n\toperator+(basic_string<>&&, _CharT)): Add.\n\t* testsuite/21_strings/basic_string/operators/char/3.cc: New.\n\t* testsuite/21_strings/basic_string/operators/wchar_t/3.cc: Likewise.\n\nFrom-SVN: r167994", "tree": {"sha": "ae1edacfc692d5e6d5db1b1f7a7cf5edd0700b52", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ae1edacfc692d5e6d5db1b1f7a7cf5edd0700b52"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ce99f498c72e17c52c4f12cf8d600259eb942c2f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ce99f498c72e17c52c4f12cf8d600259eb942c2f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ce99f498c72e17c52c4f12cf8d600259eb942c2f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ce99f498c72e17c52c4f12cf8d600259eb942c2f/comments", "author": null, "committer": null, "parents": [{"sha": "24de72dbe2e39cb87092619ce56a5f6ffb714b1a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/24de72dbe2e39cb87092619ce56a5f6ffb714b1a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/24de72dbe2e39cb87092619ce56a5f6ffb714b1a"}], "stats": {"total": 241, "additions": 241, "deletions": 0}, "files": [{"sha": "e47576f0abf8c733a6890134db68d792d7eac9fa", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ce99f498c72e17c52c4f12cf8d600259eb942c2f/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ce99f498c72e17c52c4f12cf8d600259eb942c2f/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=ce99f498c72e17c52c4f12cf8d600259eb942c2f", "patch": "@@ -1,3 +1,14 @@\n+2010-12-17  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+\t* include/bits/basic_string.h (operator+(basic_string<>&&,\n+\tconst basic_string<>&), operator+(const basic_string<>&,\n+\tbasic_string<>&&), operator+(basic_string<>&&, basic_string<>&&),\n+\toperator+(const _CharT*, basic_string<>&&), operator+(_CharT,\n+\tbasic_string<>&&), operator+(basic_string<>&&, const _CharT*),\n+\toperator+(basic_string<>&&, _CharT)): Add.\n+\t* testsuite/21_strings/basic_string/operators/char/3.cc: New.\n+\t* testsuite/21_strings/basic_string/operators/wchar_t/3.cc: Likewise.\n+\n 2010-12-17  Paolo Carlini  <paolo.carlini@oracle.com>\n \n \t* aclocal.m4: Regenerate."}, {"sha": "2fc99d52b9ca847f9833bc5c8494978ac21fd443", "filename": "libstdc++-v3/include/bits/basic_string.h", "status": "modified", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ce99f498c72e17c52c4f12cf8d600259eb942c2f/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_string.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ce99f498c72e17c52c4f12cf8d600259eb942c2f/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_string.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_string.h?ref=ce99f498c72e17c52c4f12cf8d600259eb942c2f", "patch": "@@ -2363,6 +2363,50 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n       return __str;\n     }\n \n+#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+  template<typename _CharT, typename _Traits, typename _Alloc>\n+    inline basic_string<_CharT, _Traits, _Alloc>\n+    operator+(basic_string<_CharT, _Traits, _Alloc>&& __lhs,\n+\t      const basic_string<_CharT, _Traits, _Alloc>& __rhs)\n+    { return std::move(__lhs.append(__rhs)); }\n+\n+  template<typename _CharT, typename _Traits, typename _Alloc>\n+    inline basic_string<_CharT, _Traits, _Alloc>\n+    operator+(const basic_string<_CharT, _Traits, _Alloc>& __lhs,\n+\t      basic_string<_CharT, _Traits, _Alloc>&& __rhs)\n+    { return std::move(__rhs.insert(0, __lhs)); }\n+\n+  template<typename _CharT, typename _Traits, typename _Alloc>\n+    inline basic_string<_CharT, _Traits, _Alloc>\n+    operator+(basic_string<_CharT, _Traits, _Alloc>&& __lhs,\n+\t      basic_string<_CharT, _Traits, _Alloc>&& __rhs)\n+    { return std::move(__lhs.append(__rhs)); }\n+\n+  template<typename _CharT, typename _Traits, typename _Alloc>\n+    inline basic_string<_CharT, _Traits, _Alloc>\n+    operator+(const _CharT* __lhs,\n+\t      basic_string<_CharT, _Traits, _Alloc>&& __rhs)\n+    { return std::move(__rhs.insert(0, __lhs)); }\n+\n+  template<typename _CharT, typename _Traits, typename _Alloc>\n+    inline basic_string<_CharT, _Traits, _Alloc>\n+    operator+(_CharT __lhs, basic_string<_CharT,\n+\t      _Traits, _Alloc>&& __rhs)\n+    { return std::move(__rhs.insert(0, 1, __lhs)); }\n+\n+  template<typename _CharT, typename _Traits, typename _Alloc>\n+    inline basic_string<_CharT, _Traits, _Alloc>\n+    operator+(basic_string<_CharT, _Traits, _Alloc>&& __lhs,\n+\t      const _CharT* __rhs)\n+    { return std::move(__lhs.append(__rhs)); }\n+\n+  template<typename _CharT, typename _Traits, typename _Alloc>\n+    inline basic_string<_CharT, _Traits, _Alloc>\n+    operator+(basic_string<_CharT, _Traits, _Alloc>&& __lhs,\n+\t      _CharT __rhs)\n+    { return std::move(__lhs.append(1, __rhs)); }\n+#endif\n+\n   // operator ==\n   /**\n    *  @brief  Test equivalence of two strings."}, {"sha": "6bd573fe31d8b0989abf302668784f5a09b203f5", "filename": "libstdc++-v3/testsuite/21_strings/basic_string/operators/char/3.cc", "status": "added", "additions": 93, "deletions": 0, "changes": 93, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ce99f498c72e17c52c4f12cf8d600259eb942c2f/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Foperators%2Fchar%2F3.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ce99f498c72e17c52c4f12cf8d600259eb942c2f/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Foperators%2Fchar%2F3.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Foperators%2Fchar%2F3.cc?ref=ce99f498c72e17c52c4f12cf8d600259eb942c2f", "patch": "@@ -0,0 +1,93 @@\n+// 2010-12-17  Paolo Carlini  <paolo.carlini@oracle.com>\n+//\n+// Copyright (C) 2010 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+//\n+// { dg-options \"-std=gnu++0x\" }\n+// { dg-require-string-conversions \"\" }\n+\n+#include <string>\n+#include <testsuite_hooks.h>\n+\n+void test01()\n+{\n+  bool test __attribute__((unused)) = true;\n+  using std::string;\n+\n+  VERIFY( (string(\"abc\") + string(\"def\")\n+\t   == string(\"abcdef\")) );\n+  string s1(\"abc\");\n+  VERIFY( s1 + string(\"def\") == string(\"abcdef\") );\n+  string s2(\"def\");\n+  VERIFY( string(\"abc\") + s2 == string(\"abcdef\") );\n+  VERIFY( string(\"abc\") + 'd' == string(\"abcd\") );\n+  VERIFY( string(\"abc\") + \"def\" == string(\"abcdef\") );\n+  VERIFY( 'a' + string(\"bcd\") == string(\"abcd\") );\n+  VERIFY( \"abc\" + string(\"def\") == string(\"abcdef\") );\n+\n+  VERIFY( (string(\"abcdefghij\") + string(\"klmnopqrst\")\n+\t   == string(\"abcdefghijklmnopqrst\")) );\n+  string s1l(\"abcdefghij\");\n+  VERIFY( (s1l + string(\"klmnopqrst\")\n+\t   == string(\"abcdefghijklmnopqrst\")) );\n+  string s2l(\"klmnopqrst\");\n+  VERIFY( (string(\"abcdefghij\") + s2l\n+\t   == string(\"abcdefghijklmnopqrst\")) );\n+  VERIFY( (string(\"abcdefghijklmno\") + 'p'\n+\t   == string(\"abcdefghijklmnop\")) );\n+  VERIFY( (string(\"abcdefghijklmno\") + \"pqrst\"\n+\t   == string(\"abcdefghijklmnopqrst\")) );\n+  VERIFY( ('a' + string(\"bcdefghijklmnop\")\n+\t   == string(\"abcdefghijklmnop\")) );\n+  VERIFY( (\"abcde\" + string(\"fghijklmnopqrst\")\n+\t   == string(\"abcdefghijklmnopqrst\")) );\n+\n+  VERIFY( (string(\"abcdefghijklmnopqrst\") + string(\"uvwxy\")\n+\t   == string(\"abcdefghijklmnopqrstuvwxy\")) );\n+  VERIFY( (string(\"abcde\") + string(\"fghijklmnopqrstuvwxy\")\n+\t   == string(\"abcdefghijklmnopqrstuvwxy\")) );\n+  string s1ll1(\"abcdefghijklmnopqrst\");\n+  VERIFY( (s1ll1 + string(\"uvwxy\")\n+\t   == string(\"abcdefghijklmnopqrstuvwxy\")) );\n+  string s1ll2(\"abcde\");\n+  VERIFY( (s1ll2 + string(\"fghijklmnopqrstuvwxy\")\n+\t   == string(\"abcdefghijklmnopqrstuvwxy\")) );\n+  string s2ll1(\"fghijklmnopqrstuvwxy\");\n+  VERIFY( (string(\"abcde\") + s2ll1\n+\t   == string(\"abcdefghijklmnopqrstuvwxy\")) );\n+  string s2ll2(\"uvwxy\");\n+  VERIFY( (string(\"abcdefghijklmnopqrst\") + s2ll2\n+\t   == string(\"abcdefghijklmnopqrstuvwxy\")) );\n+  VERIFY( (string(\"abcdefghijklmnopqrst\") + 'u'\n+\t   == string(\"abcdefghijklmnopqrstu\")) );\n+  VERIFY( (string(\"abcdefghijklmnopqrst\") + \"uvwxy\"\n+\t   == string(\"abcdefghijklmnopqrstuvwxy\")) );\n+  VERIFY( (string(\"abcde\") + \"fghijklmnopqrstuvwxy\"\n+\t   == string(\"abcdefghijklmnopqrstuvwxy\")) );\n+  VERIFY( ('a' + string(\"bcdefghijklmnopqrstuvwxy\")\n+\t   == string(\"abcdefghijklmnopqrstuvwxy\")) );\n+  VERIFY( (\"abcde\" + string(\"fghijklmnopqrstuvwxy\")\n+\t   == string(\"abcdefghijklmnopqrstuvwxy\")) );\n+  VERIFY( (\"abcdefghijklmnopqrst\" + string(\"uvwxy\")\n+\t   == string(\"abcdefghijklmnopqrstuvwxy\")) );\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "77915f5e34414441962ac9597fbe57f1c719a8cf", "filename": "libstdc++-v3/testsuite/21_strings/basic_string/operators/wchar_t/3.cc", "status": "added", "additions": 93, "deletions": 0, "changes": 93, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ce99f498c72e17c52c4f12cf8d600259eb942c2f/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Foperators%2Fwchar_t%2F3.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ce99f498c72e17c52c4f12cf8d600259eb942c2f/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Foperators%2Fwchar_t%2F3.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Foperators%2Fwchar_t%2F3.cc?ref=ce99f498c72e17c52c4f12cf8d600259eb942c2f", "patch": "@@ -0,0 +1,93 @@\n+// 2010-12-17  Paolo Carlini  <paolo.carlini@oracle.com>\n+//\n+// Copyright (C) 2010 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+//\n+// { dg-options \"-std=gnu++0x\" }\n+// { dg-require-string-conversions \"\" }\n+\n+#include <string>\n+#include <testsuite_hooks.h>\n+\n+void test01()\n+{\n+  bool test __attribute__((unused)) = true;\n+  using std::wstring;\n+\n+  VERIFY( (wstring(L\"abc\") + wstring(L\"def\")\n+\t   == wstring(L\"abcdef\")) );\n+  wstring s1(L\"abc\");\n+  VERIFY( s1 + wstring(L\"def\") == wstring(L\"abcdef\") );\n+  wstring s2(L\"def\");\n+  VERIFY( wstring(L\"abc\") + s2 == wstring(L\"abcdef\") );\n+  VERIFY( wstring(L\"abc\") + L'd' == wstring(L\"abcd\") );\n+  VERIFY( wstring(L\"abc\") + L\"def\" == wstring(L\"abcdef\") );\n+  VERIFY( L'a' + wstring(L\"bcd\") == wstring(L\"abcd\") );\n+  VERIFY( L\"abc\" + wstring(L\"def\") == wstring(L\"abcdef\") );\n+\n+  VERIFY( (wstring(L\"abcdefghij\") + wstring(L\"klmnopqrst\")\n+\t   == wstring(L\"abcdefghijklmnopqrst\")) );\n+  wstring s1l(L\"abcdefghij\");\n+  VERIFY( (s1l + wstring(L\"klmnopqrst\")\n+\t   == wstring(L\"abcdefghijklmnopqrst\")) );\n+  wstring s2l(L\"klmnopqrst\");\n+  VERIFY( (wstring(L\"abcdefghij\") + s2l\n+\t   == wstring(L\"abcdefghijklmnopqrst\")) );\n+  VERIFY( (wstring(L\"abcdefghijklmno\") + L'p'\n+\t   == wstring(L\"abcdefghijklmnop\")) );\n+  VERIFY( (wstring(L\"abcdefghijklmno\") + L\"pqrst\"\n+\t   == wstring(L\"abcdefghijklmnopqrst\")) );\n+  VERIFY( (L'a' + wstring(L\"bcdefghijklmnop\")\n+\t   == wstring(L\"abcdefghijklmnop\")) );\n+  VERIFY( (L\"abcde\" + wstring(L\"fghijklmnopqrst\")\n+\t   == wstring(L\"abcdefghijklmnopqrst\")) );\n+\n+  VERIFY( (wstring(L\"abcdefghijklmnopqrst\") + wstring(L\"uvwxy\")\n+\t   == wstring(L\"abcdefghijklmnopqrstuvwxy\")) );\n+  VERIFY( (wstring(L\"abcde\") + wstring(L\"fghijklmnopqrstuvwxy\")\n+\t   == wstring(L\"abcdefghijklmnopqrstuvwxy\")) );\n+  wstring s1ll1(L\"abcdefghijklmnopqrst\");\n+  VERIFY( (s1ll1 + wstring(L\"uvwxy\")\n+\t   == wstring(L\"abcdefghijklmnopqrstuvwxy\")) );\n+  wstring s1ll2(L\"abcde\");\n+  VERIFY( (s1ll2 + wstring(L\"fghijklmnopqrstuvwxy\")\n+\t   == wstring(L\"abcdefghijklmnopqrstuvwxy\")) );\n+  wstring s2ll1(L\"fghijklmnopqrstuvwxy\");\n+  VERIFY( (wstring(L\"abcde\") + s2ll1\n+\t   == wstring(L\"abcdefghijklmnopqrstuvwxy\")) );\n+  wstring s2ll2(L\"uvwxy\");\n+  VERIFY( (wstring(L\"abcdefghijklmnopqrst\") + s2ll2\n+\t   == wstring(L\"abcdefghijklmnopqrstuvwxy\")) );\n+  VERIFY( (wstring(L\"abcdefghijklmnopqrst\") + L'u'\n+\t   == wstring(L\"abcdefghijklmnopqrstu\")) );\n+  VERIFY( (wstring(L\"abcdefghijklmnopqrst\") + L\"uvwxy\"\n+\t   == wstring(L\"abcdefghijklmnopqrstuvwxy\")) );\n+  VERIFY( (wstring(L\"abcde\") + L\"fghijklmnopqrstuvwxy\"\n+\t   == wstring(L\"abcdefghijklmnopqrstuvwxy\")) );\n+  VERIFY( (L'a' + wstring(L\"bcdefghijklmnopqrstuvwxy\")\n+\t   == wstring(L\"abcdefghijklmnopqrstuvwxy\")) );\n+  VERIFY( (L\"abcde\" + wstring(L\"fghijklmnopqrstuvwxy\")\n+\t   == wstring(L\"abcdefghijklmnopqrstuvwxy\")) );\n+  VERIFY( (L\"abcdefghijklmnopqrst\" + wstring(L\"uvwxy\")\n+\t   == wstring(L\"abcdefghijklmnopqrstuvwxy\")) );\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}]}