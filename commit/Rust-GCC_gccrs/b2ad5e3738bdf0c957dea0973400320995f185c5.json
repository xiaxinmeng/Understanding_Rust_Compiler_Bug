{"sha": "b2ad5e3738bdf0c957dea0973400320995f185c5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjJhZDVlMzczOGJkZjBjOTU3ZGVhMDk3MzQwMDMyMDk5NWYxODVjNQ==", "commit": {"author": {"name": "Richard Guenther", "email": "rguenther@suse.de", "date": "2011-03-15T12:22:12Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2011-03-15T12:22:12Z"}, "message": "re PR rtl-optimization/48037 (Missed optimization: unnecessary register moves)\n\n2011-03-15  Richard Guenther  <rguenther@suse.de>\n\n\tPR tree-optimization/48037\n\t* tree-ssa.c (maybe_rewrite_mem_ref_base): Rewrite vector\n\tselects into BIT_FIELD_REFs.\n\t(non_rewritable_mem_ref_base): Check if a MEM_REF is a\n\tvector select.\n\n\t* gcc.target/i386/pr48037-1.c: New testcase.\n\nFrom-SVN: r170986", "tree": {"sha": "5a72cd150668d074636e998470b168a9e760eae5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5a72cd150668d074636e998470b168a9e760eae5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b2ad5e3738bdf0c957dea0973400320995f185c5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b2ad5e3738bdf0c957dea0973400320995f185c5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b2ad5e3738bdf0c957dea0973400320995f185c5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b2ad5e3738bdf0c957dea0973400320995f185c5/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "7ee93d4e3473e678dcabef2e09b3cc1c820968e4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7ee93d4e3473e678dcabef2e09b3cc1c820968e4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7ee93d4e3473e678dcabef2e09b3cc1c820968e4"}], "stats": {"total": 65, "additions": 57, "deletions": 8}, "files": [{"sha": "198b1b79de2c3fcac656ac12c6c7fb2dff0b7a0f", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b2ad5e3738bdf0c957dea0973400320995f185c5/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b2ad5e3738bdf0c957dea0973400320995f185c5/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=b2ad5e3738bdf0c957dea0973400320995f185c5", "patch": "@@ -1,3 +1,11 @@\n+2011-03-15  Richard Guenther  <rguenther@suse.de>\n+\n+\tPR tree-optimization/48037\n+\t* tree-ssa.c (maybe_rewrite_mem_ref_base): Rewrite vector\n+\tselects into BIT_FIELD_REFs.\n+\t(non_rewritable_mem_ref_base): Check if a MEM_REF is a\n+\tvector select.\n+\n 2011-03-15  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR tree-optimization/48129"}, {"sha": "6c209b0b354f8050a21c5b3ee0166d46f77c0272", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b2ad5e3738bdf0c957dea0973400320995f185c5/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b2ad5e3738bdf0c957dea0973400320995f185c5/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=b2ad5e3738bdf0c957dea0973400320995f185c5", "patch": "@@ -1,3 +1,8 @@\n+2011-03-15  Richard Guenther  <rguenther@suse.de>\n+\n+\tPR tree-optimization/48037\n+\t* gcc.target/i386/pr48037-1.c: New testcase.\n+\n 2011-03-15  Richard Guenther  <rguenther@suse.de>\n \n \tPR tree-optimization/41490"}, {"sha": "30c81e7171d9392985713ebb990c15f9b1949abd", "filename": "gcc/testsuite/gcc.target/i386/pr48037-1.c", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b2ad5e3738bdf0c957dea0973400320995f185c5/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr48037-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b2ad5e3738bdf0c957dea0973400320995f185c5/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr48037-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr48037-1.c?ref=b2ad5e3738bdf0c957dea0973400320995f185c5", "patch": "@@ -0,0 +1,15 @@\n+/* { dg-do compile } */\n+/* { dg-require-effective-target lp64 } */\n+/* { dg-options \"-O -fno-math-errno\" } */\n+\n+typedef double __m128d __attribute__((vector_size(16)));\n+__m128d vsqrt1 (__m128d const x)\n+{\n+  double const* __restrict__ const y = (double const*)&x;\n+  double const a = __builtin_sqrt(y[0]);\n+  double const b = __builtin_sqrt(y[1]);\n+  return (__m128d) { a, b };\n+}\n+\n+/* Verify we do not spill x to the stack.  */\n+/* { dg-final { scan-assembler-not \"%rsp\" } } */"}, {"sha": "f28e5d15c72d2f5ebc810a822b57ba6342a29a97", "filename": "gcc/tree-ssa.c", "status": "modified", "additions": 29, "deletions": 8, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b2ad5e3738bdf0c957dea0973400320995f185c5/gcc%2Ftree-ssa.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b2ad5e3738bdf0c957dea0973400320995f185c5/gcc%2Ftree-ssa.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa.c?ref=b2ad5e3738bdf0c957dea0973400320995f185c5", "patch": "@@ -1838,18 +1838,32 @@ maybe_rewrite_mem_ref_base (tree *tp)\n     tp = &TREE_OPERAND (*tp, 0);\n   if (TREE_CODE (*tp) == MEM_REF\n       && TREE_CODE (TREE_OPERAND (*tp, 0)) == ADDR_EXPR\n-      && integer_zerop (TREE_OPERAND (*tp, 1))\n       && (sym = TREE_OPERAND (TREE_OPERAND (*tp, 0), 0))\n       && DECL_P (sym)\n       && !TREE_ADDRESSABLE (sym)\n       && symbol_marked_for_renaming (sym))\n     {\n-      if (!useless_type_conversion_p (TREE_TYPE (*tp),\n-\t\t\t\t      TREE_TYPE (sym)))\n-\t*tp = build1 (VIEW_CONVERT_EXPR,\n-\t\t\tTREE_TYPE (*tp), sym);\n-      else\n-\t*tp = sym;\n+      if (TREE_CODE (TREE_TYPE (sym)) == VECTOR_TYPE\n+\t  && useless_type_conversion_p (TREE_TYPE (*tp),\n+\t\t\t\t\tTREE_TYPE (TREE_TYPE (sym)))\n+\t  && multiple_of_p (sizetype, TREE_OPERAND (*tp, 1),\n+\t\t\t    TYPE_SIZE_UNIT (TREE_TYPE (*tp))))\n+\t{\n+\t  *tp = build3 (BIT_FIELD_REF, TREE_TYPE (*tp), sym, \n+\t\t\tTYPE_SIZE (TREE_TYPE (*tp)),\n+\t\t\tint_const_binop (MULT_EXPR,\n+\t\t\t\t\t bitsize_int (BITS_PER_UNIT),\n+\t\t\t\t\t TREE_OPERAND (*tp, 1), 0));\n+\t}\n+      else if (integer_zerop (TREE_OPERAND (*tp, 1)))\n+\t{\n+\t  if (!useless_type_conversion_p (TREE_TYPE (*tp),\n+\t\t\t\t\t  TREE_TYPE (sym)))\n+\t    *tp = build1 (VIEW_CONVERT_EXPR,\n+\t\t\t  TREE_TYPE (*tp), sym);\n+\t  else\n+\t    *tp = sym;\n+\t}\n     }\n }\n \n@@ -1869,11 +1883,18 @@ non_rewritable_mem_ref_base (tree ref)\n     base = TREE_OPERAND (base, 0);\n \n   /* But watch out for MEM_REFs we cannot lower to a\n-     VIEW_CONVERT_EXPR.  */\n+     VIEW_CONVERT_EXPR or a BIT_FIELD_REF.  */\n   if (TREE_CODE (base) == MEM_REF\n       && TREE_CODE (TREE_OPERAND (base, 0)) == ADDR_EXPR)\n     {\n       tree decl = TREE_OPERAND (TREE_OPERAND (base, 0), 0);\n+      if (TREE_CODE (TREE_TYPE (decl)) == VECTOR_TYPE\n+\t  && useless_type_conversion_p (TREE_TYPE (base),\n+\t\t\t\t\tTREE_TYPE (TREE_TYPE (decl)))\n+\t  && double_int_fits_in_uhwi_p (mem_ref_offset (base))\n+\t  && multiple_of_p (sizetype, TREE_OPERAND (base, 1),\n+\t\t\t    TYPE_SIZE_UNIT (TREE_TYPE (base))))\n+\treturn NULL_TREE;\n       if (DECL_P (decl)\n \t  && (!integer_zerop (TREE_OPERAND (base, 1))\n \t      || (DECL_SIZE (decl)"}]}