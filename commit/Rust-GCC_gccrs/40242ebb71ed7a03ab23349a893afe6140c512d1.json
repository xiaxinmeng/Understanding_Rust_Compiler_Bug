{"sha": "40242ebb71ed7a03ab23349a893afe6140c512d1", "node_id": "C_kwDOANBUbNoAKDQwMjQyZWJiNzFlZDdhMDNhYjIzMzQ5YTg5M2FmZTYxNDBjNTEyZDE", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2022-06-03T08:02:56Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "derodat@adacore.com", "date": "2022-07-06T13:29:49Z"}, "message": "[Ada] Fix crash on aliased renaming of unconstrained array\n\ngcc/ada/\n\n\t* gcc-interface/decl.cc (gnat_to_gnu_entity) <E_Variable>: Create a\n\tlocal constant holding the underlying GNAT type of the object.  Do\n\tnot fiddle with the object size for an unconstrained array.", "tree": {"sha": "7f0aa218daf1d9e6de297eb74d75608d5cb3eacd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7f0aa218daf1d9e6de297eb74d75608d5cb3eacd"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/40242ebb71ed7a03ab23349a893afe6140c512d1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/40242ebb71ed7a03ab23349a893afe6140c512d1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/40242ebb71ed7a03ab23349a893afe6140c512d1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/40242ebb71ed7a03ab23349a893afe6140c512d1/comments", "author": null, "committer": {"login": "pmderodat", "id": 758452, "node_id": "MDQ6VXNlcjc1ODQ1Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/758452?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pmderodat", "html_url": "https://github.com/pmderodat", "followers_url": "https://api.github.com/users/pmderodat/followers", "following_url": "https://api.github.com/users/pmderodat/following{/other_user}", "gists_url": "https://api.github.com/users/pmderodat/gists{/gist_id}", "starred_url": "https://api.github.com/users/pmderodat/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pmderodat/subscriptions", "organizations_url": "https://api.github.com/users/pmderodat/orgs", "repos_url": "https://api.github.com/users/pmderodat/repos", "events_url": "https://api.github.com/users/pmderodat/events{/privacy}", "received_events_url": "https://api.github.com/users/pmderodat/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "940bbc4363b4cee9682a96e17fbb536f61c50c21", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/940bbc4363b4cee9682a96e17fbb536f61c50c21", "html_url": "https://github.com/Rust-GCC/gccrs/commit/940bbc4363b4cee9682a96e17fbb536f61c50c21"}], "stats": {"total": 12, "additions": 7, "deletions": 5}, "files": [{"sha": "3f6b88a72a3e82330dda5c8f4205e7dcb80eb09d", "filename": "gcc/ada/gcc-interface/decl.cc", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/40242ebb71ed7a03ab23349a893afe6140c512d1/gcc%2Fada%2Fgcc-interface%2Fdecl.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/40242ebb71ed7a03ab23349a893afe6140c512d1/gcc%2Fada%2Fgcc-interface%2Fdecl.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2Fdecl.cc?ref=40242ebb71ed7a03ab23349a893afe6140c512d1", "patch": "@@ -711,6 +711,7 @@ gnat_to_gnu_entity (Entity_Id gnat_entity, tree gnu_expr, bool definition)\n     case E_Variable:\n       {\n \tconst Entity_Id gnat_type = Etype (gnat_entity);\n+\tconst Entity_Id gnat_und_type = Underlying_Type (gnat_type);\n \t/* Always create a variable for volatile objects and variables seen\n \t   constant but with a Linker_Section pragma.  */\n \tbool const_flag\n@@ -749,7 +750,7 @@ gnat_to_gnu_entity (Entity_Id gnat_entity, tree gnu_expr, bool definition)\n \t  }\n \n \t/* Get the type after elaborating the renamed object.  */\n-\tif (foreign && Is_Descendant_Of_Address (Underlying_Type (gnat_type)))\n+\tif (foreign && Is_Descendant_Of_Address (gnat_und_type))\n \t  gnu_type = ptr_type_node;\n \telse\n \t  gnu_type = gnat_to_gnu_type (gnat_type);\n@@ -947,7 +948,7 @@ gnat_to_gnu_entity (Entity_Id gnat_entity, tree gnu_expr, bool definition)\n \t   subtype, make a type that includes the template.  We will either\n \t   allocate or create a variable of that type, see below.  */\n \tif (Is_Constr_Subt_For_UN_Aliased (gnat_type)\n-\t    && Is_Array_Type (Underlying_Type (gnat_type))\n+\t    && Is_Array_Type (gnat_und_type)\n \t    && !type_annotate_only)\n \t  {\n \t    tree gnu_array = gnat_to_gnu_type (Base_Type (gnat_type));\n@@ -996,8 +997,9 @@ gnat_to_gnu_entity (Entity_Id gnat_entity, tree gnu_expr, bool definition)\n \t/* If the object is aliased, of a constrained nominal subtype and its\n \t   size might be zero at run time, we force at least the unit size.  */\n \tif (Is_Aliased (gnat_entity)\n+\t    && Is_Constrained (gnat_type)\n \t    && !Is_Constr_Subt_For_UN_Aliased (gnat_type)\n-\t    && Is_Array_Type (Underlying_Type (gnat_type))\n+\t    && Is_Array_Type (gnat_und_type)\n \t    && !TREE_CONSTANT (gnu_object_size))\n \t  gnu_size = size_binop (MAX_EXPR, gnu_object_size, bitsize_unit_node);\n \n@@ -1246,7 +1248,7 @@ gnat_to_gnu_entity (Entity_Id gnat_entity, tree gnu_expr, bool definition)\n \t       subtype, then it can overlay only another aliased object with an\n \t       unconstrained array nominal subtype and compatible template.  */\n \t    if (Is_Constr_Subt_For_UN_Aliased (gnat_type)\n-\t\t&& Is_Array_Type (Underlying_Type (gnat_type))\n+\t\t&& Is_Array_Type (gnat_und_type)\n \t\t&& !type_annotate_only)\n \t      {\n \t\ttree rec_type = TREE_TYPE (gnu_type);\n@@ -1487,7 +1489,7 @@ gnat_to_gnu_entity (Entity_Id gnat_entity, tree gnu_expr, bool definition)\n \t   object.  Note that we have to do it this late because of the\n \t   couple of allocation adjustments that might be made above.  */\n \tif (Is_Constr_Subt_For_UN_Aliased (gnat_type)\n-\t    && Is_Array_Type (Underlying_Type (gnat_type))\n+\t    && Is_Array_Type (gnat_und_type)\n \t    && !type_annotate_only)\n \t  {\n \t    /* In case the object with the template has already been allocated"}]}