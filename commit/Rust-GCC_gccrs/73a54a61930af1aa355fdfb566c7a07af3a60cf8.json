{"sha": "73a54a61930af1aa355fdfb566c7a07af3a60cf8", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzNhNTRhNjE5MzBhZjFhYTM1NWZkZmI1NjZjN2EwN2FmM2E2MGNmOA==", "commit": {"author": {"name": "Marek Polacek", "email": "polacek@redhat.com", "date": "2019-01-27T19:54:29Z"}, "committer": {"name": "Marek Polacek", "email": "mpolacek@gcc.gnu.org", "date": "2019-01-27T19:54:29Z"}, "message": "PR c++/89024 - ICE with incomplete enum type.\n\n\t* call.c (standard_conversion): When converting an\n\tARITHMETIC_TYPE_P to an incomplete type, return NULL.\n\t\n\t* g++.dg/cpp0x/enum37.C: New test.\n\nFrom-SVN: r268320", "tree": {"sha": "08f37ac4f396d13388fd0ec1e39979593257cc50", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/08f37ac4f396d13388fd0ec1e39979593257cc50"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/73a54a61930af1aa355fdfb566c7a07af3a60cf8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/73a54a61930af1aa355fdfb566c7a07af3a60cf8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/73a54a61930af1aa355fdfb566c7a07af3a60cf8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/73a54a61930af1aa355fdfb566c7a07af3a60cf8/comments", "author": {"login": "mpolacek", "id": 10496300, "node_id": "MDQ6VXNlcjEwNDk2MzAw", "avatar_url": "https://avatars.githubusercontent.com/u/10496300?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mpolacek", "html_url": "https://github.com/mpolacek", "followers_url": "https://api.github.com/users/mpolacek/followers", "following_url": "https://api.github.com/users/mpolacek/following{/other_user}", "gists_url": "https://api.github.com/users/mpolacek/gists{/gist_id}", "starred_url": "https://api.github.com/users/mpolacek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mpolacek/subscriptions", "organizations_url": "https://api.github.com/users/mpolacek/orgs", "repos_url": "https://api.github.com/users/mpolacek/repos", "events_url": "https://api.github.com/users/mpolacek/events{/privacy}", "received_events_url": "https://api.github.com/users/mpolacek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "9faf6e70187e2a425ae2c502b8c00dded63e6460", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9faf6e70187e2a425ae2c502b8c00dded63e6460", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9faf6e70187e2a425ae2c502b8c00dded63e6460"}], "stats": {"total": 42, "additions": 42, "deletions": 0}, "files": [{"sha": "c2993db781dca6a852bca5ca29804b3398930c84", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/73a54a61930af1aa355fdfb566c7a07af3a60cf8/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/73a54a61930af1aa355fdfb566c7a07af3a60cf8/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=73a54a61930af1aa355fdfb566c7a07af3a60cf8", "patch": "@@ -1,3 +1,9 @@\n+2019-01-27  Marek Polacek  <polacek@redhat.com>\n+\n+\tPR c++/89024 - ICE with incomplete enum type.\n+\t* call.c (standard_conversion): When converting an\n+\tARITHMETIC_TYPE_P to an incomplete type, return NULL.\n+\t\n 2019-01-25  Paolo Carlini  <paolo.carlini@oracle.com>\n \n \tPR c++/88969"}, {"sha": "c74d1b4ebdf604bae4dd0100c7de5db1c15ec8c9", "filename": "gcc/cp/call.c", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/73a54a61930af1aa355fdfb566c7a07af3a60cf8/gcc%2Fcp%2Fcall.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/73a54a61930af1aa355fdfb566c7a07af3a60cf8/gcc%2Fcp%2Fcall.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcall.c?ref=73a54a61930af1aa355fdfb566c7a07af3a60cf8", "patch": "@@ -1412,6 +1412,13 @@ standard_conversion (tree to, tree from, tree expr, bool c_cast_p,\n \t     || (fcode == REAL_TYPE && !(flags & LOOKUP_NO_NON_INTEGRAL)))\n           || SCOPED_ENUM_P (from))\n \treturn NULL;\n+\n+      /* If we're parsing an enum with no fixed underlying type, we're\n+\t dealing with an incomplete type, which renders the conversion\n+\t ill-formed.  */\n+      if (!COMPLETE_TYPE_P (from))\n+\treturn NULL;\n+\n       conv = build_conv (ck_std, to, conv);\n \n       /* Give this a better rank if it's a promotion.  */"}, {"sha": "5438d4fd2563abd25d7c0d115e2b0ac235b44b0f", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/73a54a61930af1aa355fdfb566c7a07af3a60cf8/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/73a54a61930af1aa355fdfb566c7a07af3a60cf8/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=73a54a61930af1aa355fdfb566c7a07af3a60cf8", "patch": "@@ -1,3 +1,8 @@\n+2019-01-27  Marek Polacek  <polacek@redhat.com>\n+\n+\tPR c++/89024 - ICE with incomplete enum type.\n+\t* g++.dg/cpp0x/enum37.C: New test.\n+\n 2019-01-27  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* gnat.dg/opt75.adb: New test."}, {"sha": "6aa3d4015d7ddb7352a6822e49583c5d7e2adef9", "filename": "gcc/testsuite/g++.dg/cpp0x/enum37.C", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/73a54a61930af1aa355fdfb566c7a07af3a60cf8/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fenum37.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/73a54a61930af1aa355fdfb566c7a07af3a60cf8/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fenum37.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fenum37.C?ref=73a54a61930af1aa355fdfb566c7a07af3a60cf8", "patch": "@@ -0,0 +1,24 @@\n+// PR c++/89024\n+// { dg-do compile { target c++11 } }\n+\n+template <class T, class U> struct same;\n+template <class T> struct same<T,T> {};\n+\n+template<class T> T&& declval();\n+\n+template<typename _To1>\n+void __test_aux(_To1);\n+\n+template<typename _From1, typename _To1,\n+        typename = decltype(__test_aux<_To1>(declval<_From1>()))>\n+char __test(int);\n+\n+template<typename, typename>\n+int __test(...);\n+\n+enum E {\n+    x = decltype(__test<E, int>(0))(0)\n+};\n+\n+same<E,decltype(x)> s;\n+same<unsigned int,__underlying_type(E)> s2;"}]}