{"sha": "703e4f86496214e4915db898397fcd0ae1d955e0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzAzZTRmODY0OTYyMTRlNDkxNWRiODk4Mzk3ZmNkMGFlMWQ5NTVlMA==", "commit": {"author": {"name": "Thomas Schwinge", "email": "thomas@codesourcery.com", "date": "2020-10-28T10:43:49Z"}, "committer": {"name": "Thomas Schwinge", "email": "thomas@codesourcery.com", "date": "2020-11-13T21:58:57Z"}, "message": "Attach an attribute to all outlined OpenACC compute regions\n\nThis allows for making some things more explicit, later on.\n\n\tgcc/\n\t* omp-expand.c (expand_omp_target): Attach an attribute to all\n\toutlined OpenACC compute regions.\n\t* omp-offload.c (execute_oacc_device_lower): Adjust.\n\tgcc/testsuite/\n\t* c-c++-common/goacc/classify-parallel.c: Adjust.\n\t* gfortran.dg/goacc/classify-parallel.f95: Likewise.\n\t* c-c++-common/goacc/classify-serial.c: New.\n\t* gfortran.dg/goacc/classify-serial.f95: Likewise.", "tree": {"sha": "58559da48f84a9a4328c83efd091b98c251c6da3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/58559da48f84a9a4328c83efd091b98c251c6da3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/703e4f86496214e4915db898397fcd0ae1d955e0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/703e4f86496214e4915db898397fcd0ae1d955e0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/703e4f86496214e4915db898397fcd0ae1d955e0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/703e4f86496214e4915db898397fcd0ae1d955e0/comments", "author": {"login": "tschwinge", "id": 21753, "node_id": "MDQ6VXNlcjIxNzUz", "avatar_url": "https://avatars.githubusercontent.com/u/21753?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tschwinge", "html_url": "https://github.com/tschwinge", "followers_url": "https://api.github.com/users/tschwinge/followers", "following_url": "https://api.github.com/users/tschwinge/following{/other_user}", "gists_url": "https://api.github.com/users/tschwinge/gists{/gist_id}", "starred_url": "https://api.github.com/users/tschwinge/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tschwinge/subscriptions", "organizations_url": "https://api.github.com/users/tschwinge/orgs", "repos_url": "https://api.github.com/users/tschwinge/repos", "events_url": "https://api.github.com/users/tschwinge/events{/privacy}", "received_events_url": "https://api.github.com/users/tschwinge/received_events", "type": "User", "site_admin": false}, "committer": {"login": "tschwinge", "id": 21753, "node_id": "MDQ6VXNlcjIxNzUz", "avatar_url": "https://avatars.githubusercontent.com/u/21753?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tschwinge", "html_url": "https://github.com/tschwinge", "followers_url": "https://api.github.com/users/tschwinge/followers", "following_url": "https://api.github.com/users/tschwinge/following{/other_user}", "gists_url": "https://api.github.com/users/tschwinge/gists{/gist_id}", "starred_url": "https://api.github.com/users/tschwinge/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tschwinge/subscriptions", "organizations_url": "https://api.github.com/users/tschwinge/orgs", "repos_url": "https://api.github.com/users/tschwinge/repos", "events_url": "https://api.github.com/users/tschwinge/events{/privacy}", "received_events_url": "https://api.github.com/users/tschwinge/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d1ba078d9bcc3457d36ba12695cfef29eb3ca942", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d1ba078d9bcc3457d36ba12695cfef29eb3ca942", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d1ba078d9bcc3457d36ba12695cfef29eb3ca942"}], "stats": {"total": 141, "additions": 114, "deletions": 27}, "files": [{"sha": "c6ee3eb085706bbb36c396b9132e41544576d1ec", "filename": "gcc/omp-expand.c", "status": "modified", "additions": 14, "deletions": 8, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/703e4f86496214e4915db898397fcd0ae1d955e0/gcc%2Fomp-expand.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/703e4f86496214e4915db898397fcd0ae1d955e0/gcc%2Fomp-expand.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fomp-expand.c?ref=703e4f86496214e4915db898397fcd0ae1d955e0", "patch": "@@ -9284,27 +9284,33 @@ expand_omp_target (struct omp_region *region)\n   entry_bb = region->entry;\n   exit_bb = region->exit;\n \n+  if (target_kind == GF_OMP_TARGET_KIND_OACC_KERNELS)\n+    mark_loops_in_oacc_kernels_region (region->entry, region->exit);\n+\n+  /* Going on, all OpenACC compute constructs are mapped to\n+     'BUILT_IN_GOACC_PARALLEL', and get their compute regions outlined.\n+     To distinguish between them, we attach attributes.  */\n   switch (target_kind)\n     {\n+    case GF_OMP_TARGET_KIND_OACC_PARALLEL:\n+      DECL_ATTRIBUTES (child_fn)\n+\t= tree_cons (get_identifier (\"oacc parallel\"),\n+\t\t     NULL_TREE, DECL_ATTRIBUTES (child_fn));\n+      break;\n     case GF_OMP_TARGET_KIND_OACC_KERNELS:\n-      mark_loops_in_oacc_kernels_region (region->entry, region->exit);\n-\n-      /* Further down, all OpenACC compute constructs will be mapped to\n-\t BUILT_IN_GOACC_PARALLEL, and to distinguish between them, there\n-\t is an \"oacc kernels\" attribute set for OpenACC kernels.  */\n       DECL_ATTRIBUTES (child_fn)\n \t= tree_cons (get_identifier (\"oacc kernels\"),\n \t\t     NULL_TREE, DECL_ATTRIBUTES (child_fn));\n       break;\n     case GF_OMP_TARGET_KIND_OACC_SERIAL:\n-      /* Further down, all OpenACC compute constructs will be mapped to\n-\t BUILT_IN_GOACC_PARALLEL, and to distinguish between them, there\n-\t is an \"oacc serial\" attribute set for OpenACC serial.  */\n       DECL_ATTRIBUTES (child_fn)\n \t= tree_cons (get_identifier (\"oacc serial\"),\n \t\t     NULL_TREE, DECL_ATTRIBUTES (child_fn));\n       break;\n     default:\n+      /* Make sure we don't miss any.  */\n+      gcc_checking_assert (!(is_gimple_omp_oacc (entry_stmt)\n+\t\t\t     && is_gimple_omp_offloaded (entry_stmt)));\n       break;\n     }\n "}, {"sha": "21583433d6dd942dd9ecdc2fa37b714f4445f1bb", "filename": "gcc/omp-offload.c", "status": "modified", "additions": 36, "deletions": 15, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/703e4f86496214e4915db898397fcd0ae1d955e0/gcc%2Fomp-offload.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/703e4f86496214e4915db898397fcd0ae1d955e0/gcc%2Fomp-offload.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fomp-offload.c?ref=703e4f86496214e4915db898397fcd0ae1d955e0", "patch": "@@ -1762,12 +1762,45 @@ execute_oacc_device_lower ()\n       flag_openacc_dims = (char *)&flag_openacc_dims;\n     }\n \n+  bool is_oacc_parallel\n+    = (lookup_attribute (\"oacc parallel\",\n+\t\t\t DECL_ATTRIBUTES (current_function_decl)) != NULL);\n   bool is_oacc_kernels\n     = (lookup_attribute (\"oacc kernels\",\n \t\t\t DECL_ATTRIBUTES (current_function_decl)) != NULL);\n+  bool is_oacc_serial\n+    = (lookup_attribute (\"oacc serial\",\n+\t\t\t DECL_ATTRIBUTES (current_function_decl)) != NULL);\n+  int fn_level = oacc_fn_attrib_level (attrs);\n+  bool is_oacc_routine = (fn_level >= 0);\n+  gcc_checking_assert (is_oacc_parallel\n+\t\t       + is_oacc_kernels\n+\t\t       + is_oacc_serial\n+\t\t       + is_oacc_routine\n+\t\t       == 1);\n+\n   bool is_oacc_kernels_parallelized\n     = (lookup_attribute (\"oacc kernels parallelized\",\n \t\t\t DECL_ATTRIBUTES (current_function_decl)) != NULL);\n+  if (is_oacc_kernels_parallelized)\n+    gcc_checking_assert (is_oacc_kernels);\n+\n+  if (dump_file)\n+    {\n+      if (is_oacc_parallel)\n+\tfprintf (dump_file, \"Function is OpenACC parallel offload\\n\");\n+      else if (is_oacc_kernels)\n+\tfprintf (dump_file, \"Function is %s OpenACC kernels offload\\n\",\n+\t\t (is_oacc_kernels_parallelized\n+\t\t  ? \"parallelized\" : \"unparallelized\"));\n+      else if (is_oacc_serial)\n+\tfprintf (dump_file, \"Function is OpenACC serial offload\\n\");\n+      else if (is_oacc_routine)\n+\tfprintf (dump_file, \"Function is OpenACC routine level %d\\n\",\n+\t\t fn_level);\n+      else\n+\tgcc_unreachable ();\n+    }\n \n   /* Unparallelized OpenACC kernels constructs must get launched as 1 x 1 x 1\n      kernels, so remove the parallelism dimensions function attributes\n@@ -1780,22 +1813,10 @@ execute_oacc_device_lower ()\n \n   /* Discover, partition and process the loops.  */\n   oacc_loop *loops = oacc_loop_discovery ();\n-  int fn_level = oacc_fn_attrib_level (attrs);\n-\n-  if (dump_file)\n-    {\n-      if (fn_level >= 0)\n-\tfprintf (dump_file, \"Function is OpenACC routine level %d\\n\",\n-\t\t fn_level);\n-      else if (is_oacc_kernels)\n-\tfprintf (dump_file, \"Function is %s OpenACC kernels offload\\n\",\n-\t\t (is_oacc_kernels_parallelized\n-\t\t  ? \"parallelized\" : \"unparallelized\"));\n-      else\n-\tfprintf (dump_file, \"Function is OpenACC parallel offload\\n\");\n-    }\n \n-  unsigned outer_mask = fn_level >= 0 ? GOMP_DIM_MASK (fn_level) - 1 : 0;\n+  unsigned outer_mask = 0;\n+  if (is_oacc_routine)\n+    outer_mask = GOMP_DIM_MASK (fn_level) - 1;\n   unsigned used_mask = oacc_loop_partition (loops, outer_mask);\n   /* OpenACC kernels constructs are special: they currently don't use the\n      generic oacc_loop infrastructure and attribute/dimension processing.  */"}, {"sha": "933d7664386af38cd7705f95cc81fa8bf3cc978c", "filename": "gcc/testsuite/c-c++-common/goacc/classify-parallel.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/703e4f86496214e4915db898397fcd0ae1d955e0/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Fclassify-parallel.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/703e4f86496214e4915db898397fcd0ae1d955e0/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Fclassify-parallel.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Fclassify-parallel.c?ref=703e4f86496214e4915db898397fcd0ae1d955e0", "patch": "@@ -20,10 +20,10 @@ void PARALLEL ()\n }\n \n /* Check the offloaded function's attributes.\n-   { dg-final { scan-tree-dump-times \"(?n)__attribute__\\\\(\\\\(omp target entrypoint\\\\)\\\\)\" 1 \"ompexp\" } } */\n+   { dg-final { scan-tree-dump-times \"(?n)__attribute__\\\\(\\\\(oacc parallel, omp target entrypoint\\\\)\\\\)\" 1 \"ompexp\" } } */\n \n /* Check the offloaded function's classification and compute dimensions (will\n    always be 1 x 1 x 1 for non-offloading compilation).\n    { dg-final { scan-tree-dump-times \"(?n)Function is OpenACC parallel offload\" 1 \"oaccdevlow\" } }\n    { dg-final { scan-tree-dump-times \"(?n)Compute dimensions \\\\\\[1, 1, 1\\\\\\]\" 1 \"oaccdevlow\" } }\n-   { dg-final { scan-tree-dump-times \"(?n)__attribute__\\\\(\\\\(oacc function \\\\(1, 1, 1\\\\), omp target entrypoint\\\\)\\\\)\" 1 \"oaccdevlow\" } } */\n+   { dg-final { scan-tree-dump-times \"(?n)__attribute__\\\\(\\\\(oacc function \\\\(1, 1, 1\\\\), oacc parallel, omp target entrypoint\\\\)\\\\)\" 1 \"oaccdevlow\" } } */"}, {"sha": "94ace1b3c200910d9314663b3f55a135518da1ea", "filename": "gcc/testsuite/c-c++-common/goacc/classify-serial.c", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/703e4f86496214e4915db898397fcd0ae1d955e0/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Fclassify-serial.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/703e4f86496214e4915db898397fcd0ae1d955e0/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Fclassify-serial.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Fclassify-serial.c?ref=703e4f86496214e4915db898397fcd0ae1d955e0", "patch": "@@ -0,0 +1,29 @@\n+/* Check offloaded function's attributes and classification for OpenACC\n+   serial.  */\n+\n+/* { dg-additional-options \"-O2\" }\n+   { dg-additional-options \"-fopt-info-optimized-omp\" }\n+   { dg-additional-options \"-fdump-tree-ompexp\" }\n+   { dg-additional-options \"-fdump-tree-oaccdevlow\" } */\n+\n+#define N 1024\n+\n+extern unsigned int *__restrict a;\n+extern unsigned int *__restrict b;\n+extern unsigned int *__restrict c;\n+\n+void SERIAL ()\n+{\n+#pragma acc serial loop copyin (a[0:N], b[0:N]) copyout (c[0:N]) /* { dg-message \"optimized: assigned OpenACC gang vector loop parallelism\" } */\n+  for (unsigned int i = 0; i < N; i++)\n+    c[i] = a[i] + b[i];\n+}\n+\n+/* Check the offloaded function's attributes.\n+   { dg-final { scan-tree-dump-times \"(?n)__attribute__\\\\(\\\\(oacc serial, omp target entrypoint\\\\)\\\\)\" 1 \"ompexp\" } } */\n+\n+/* Check the offloaded function's classification and compute dimensions (will\n+   always be 1 x 1 x 1 for non-offloading compilation).\n+   { dg-final { scan-tree-dump-times \"(?n)Function is OpenACC serial offload\" 1 \"oaccdevlow\" } }\n+   { dg-final { scan-tree-dump-times \"(?n)Compute dimensions \\\\\\[1, 1, 1\\\\\\]\" 1 \"oaccdevlow\" } }\n+   { dg-final { scan-tree-dump-times \"(?n)__attribute__\\\\(\\\\(oacc function \\\\(1, 1, 1\\\\), oacc serial, omp target entrypoint\\\\)\\\\)\" 1 \"oaccdevlow\" } } */"}, {"sha": "01f06bbcc279468a271b34e44d3aae1f5f415817", "filename": "gcc/testsuite/gfortran.dg/goacc/classify-parallel.f95", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/703e4f86496214e4915db898397fcd0ae1d955e0/gcc%2Ftestsuite%2Fgfortran.dg%2Fgoacc%2Fclassify-parallel.f95", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/703e4f86496214e4915db898397fcd0ae1d955e0/gcc%2Ftestsuite%2Fgfortran.dg%2Fgoacc%2Fclassify-parallel.f95", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fgoacc%2Fclassify-parallel.f95?ref=703e4f86496214e4915db898397fcd0ae1d955e0", "patch": "@@ -22,10 +22,10 @@ program main\n end program main\n \n ! Check the offloaded function's attributes.\n-! { dg-final { scan-tree-dump-times \"(?n)__attribute__\\\\(\\\\(omp target entrypoint\\\\)\\\\)\" 1 \"ompexp\" } }\n+! { dg-final { scan-tree-dump-times \"(?n)__attribute__\\\\(\\\\(oacc parallel, omp target entrypoint\\\\)\\\\)\" 1 \"ompexp\" } }\n \n ! Check the offloaded function's classification and compute dimensions (will\n ! always be 1 x 1 x 1 for non-offloading compilation).\n ! { dg-final { scan-tree-dump-times \"(?n)Function is OpenACC parallel offload\" 1 \"oaccdevlow\" } }\n ! { dg-final { scan-tree-dump-times \"(?n)Compute dimensions \\\\\\[1, 1, 1\\\\\\]\" 1 \"oaccdevlow\" } }\n-! { dg-final { scan-tree-dump-times \"(?n)__attribute__\\\\(\\\\(oacc function \\\\(1, 1, 1\\\\), omp target entrypoint\\\\)\\\\)\" 1 \"oaccdevlow\" } }\n+! { dg-final { scan-tree-dump-times \"(?n)__attribute__\\\\(\\\\(oacc function \\\\(1, 1, 1\\\\), oacc parallel, omp target entrypoint\\\\)\\\\)\" 1 \"oaccdevlow\" } }"}, {"sha": "51061afd2c6408abd2abc85624db454f9301e5da", "filename": "gcc/testsuite/gfortran.dg/goacc/classify-serial.f95", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/703e4f86496214e4915db898397fcd0ae1d955e0/gcc%2Ftestsuite%2Fgfortran.dg%2Fgoacc%2Fclassify-serial.f95", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/703e4f86496214e4915db898397fcd0ae1d955e0/gcc%2Ftestsuite%2Fgfortran.dg%2Fgoacc%2Fclassify-serial.f95", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fgoacc%2Fclassify-serial.f95?ref=703e4f86496214e4915db898397fcd0ae1d955e0", "patch": "@@ -0,0 +1,31 @@\n+! Check offloaded function's attributes and classification for OpenACC\n+! serial.\n+\n+! { dg-additional-options \"-O2\" }\n+! { dg-additional-options \"-fopt-info-optimized-omp\" }\n+! { dg-additional-options \"-fdump-tree-ompexp\" }\n+! { dg-additional-options \"-fdump-tree-oaccdevlow\" }\n+\n+program main\n+  implicit none\n+  integer, parameter :: n = 1024\n+  integer, dimension (0:n-1) :: a, b, c\n+  integer :: i\n+\n+  call setup(a, b)\n+\n+  !$acc serial loop copyin (a(0:n-1), b(0:n-1)) copyout (c(0:n-1)) ! { dg-message \"optimized: assigned OpenACC gang vector loop parallelism\" }\n+  do i = 0, n - 1\n+     c(i) = a(i) + b(i)\n+  end do\n+  !$acc end serial loop\n+end program main\n+\n+! Check the offloaded function's attributes.\n+! { dg-final { scan-tree-dump-times \"(?n)__attribute__\\\\(\\\\(oacc serial, omp target entrypoint\\\\)\\\\)\" 1 \"ompexp\" } }\n+\n+! Check the offloaded function's classification and compute dimensions (will\n+! always be 1 x 1 x 1 for non-offloading compilation).\n+! { dg-final { scan-tree-dump-times \"(?n)Function is OpenACC serial offload\" 1 \"oaccdevlow\" } }\n+! { dg-final { scan-tree-dump-times \"(?n)Compute dimensions \\\\\\[1, 1, 1\\\\\\]\" 1 \"oaccdevlow\" } }\n+! { dg-final { scan-tree-dump-times \"(?n)__attribute__\\\\(\\\\(oacc function \\\\(1, 1, 1\\\\), oacc serial, omp target entrypoint\\\\)\\\\)\" 1 \"oaccdevlow\" } }"}]}