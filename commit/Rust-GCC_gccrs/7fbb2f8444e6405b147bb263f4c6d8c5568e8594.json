{"sha": "7fbb2f8444e6405b147bb263f4c6d8c5568e8594", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2ZiYjJmODQ0NGU2NDA1YjE0N2JiMjYzZjRjNmQ4YzU1NjhlODU5NA==", "commit": {"author": {"name": "David S. Miller", "email": "davem@redhat.com", "date": "2001-09-04T10:43:46Z"}, "committer": {"name": "David S. Miller", "email": "davem@gcc.gnu.org", "date": "2001-09-04T10:43:46Z"}, "message": "Cleanup redundant and unused insn attributes.\n\n2001-09-04  David S. Miller  <davem@redhat.com>\n\n\tCleanup redundant and unused insn attributes.\n\t* config/sparc/sparc.md (define_attr \"insn\"): Kill address, unary,\n\tbinary, and move.  Mark ialu as default.\n\t(commented out define_function_unit \"alu\"): Kill.\n\t(define_attr \"use_clobbered\"): Kill.\n\t(whole file): Kill address insn type references.  Replace\n\tall unary/binary/move references with ialu.\n\t* config/sparc/sparc.c (whole file): Kill TYPE_ADDRESS\n\treferences.  Replace TYPE_{UNARY,BINARY,MOVE} references with\n\tTYPE_IALU.\n\nFrom-SVN: r45371", "tree": {"sha": "2939ed4fe8f83d7971bde278ba4c4baa62795aae", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2939ed4fe8f83d7971bde278ba4c4baa62795aae"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7fbb2f8444e6405b147bb263f4c6d8c5568e8594", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7fbb2f8444e6405b147bb263f4c6d8c5568e8594", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7fbb2f8444e6405b147bb263f4c6d8c5568e8594", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7fbb2f8444e6405b147bb263f4c6d8c5568e8594/comments", "author": null, "committer": null, "parents": [{"sha": "f7df2b9d5e7fe305058662e09b46badfe5eec0db", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f7df2b9d5e7fe305058662e09b46badfe5eec0db", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f7df2b9d5e7fe305058662e09b46badfe5eec0db"}], "stats": {"total": 192, "additions": 73, "deletions": 119}, "files": [{"sha": "aeae63645419a2eeac914be37665a3bf3a086cce", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7fbb2f8444e6405b147bb263f4c6d8c5568e8594/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7fbb2f8444e6405b147bb263f4c6d8c5568e8594/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=7fbb2f8444e6405b147bb263f4c6d8c5568e8594", "patch": "@@ -2,6 +2,17 @@\n \n \t* config/sparc/sparc.md (define_splits): Kill constraints.\n \n+\tCleanup redundant and unused insn attributes.\n+\t* config/sparc/sparc.md (define_attr \"insn\"): Kill address, unary,\n+\tbinary, and move.  Mark ialu as default.\n+\t(commented out define_function_unit \"alu\"): Kill.\n+\t(define_attr \"use_clobbered\"): Kill.\n+\t(whole file): Kill address insn type references.  Replace\n+\tall unary/binary/move references with ialu.\n+\t* config/sparc/sparc.c (whole file): Kill TYPE_ADDRESS\n+\treferences.  Replace TYPE_{UNARY,BINARY,MOVE} references with\n+\tTYPE_IALU.\n+\t\n 2001-09-03  Jakub Jelinek  <jakub@redhat.com>\n \n \t* loop.c (express_from_1): Fix CONSTANT_P(a) case."}, {"sha": "9f51d989e5c9a6fbc81d2619df79a4af1e526517", "filename": "gcc/config/sparc/sparc.c", "status": "modified", "additions": 5, "deletions": 9, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7fbb2f8444e6405b147bb263f4c6d8c5568e8594/gcc%2Fconfig%2Fsparc%2Fsparc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7fbb2f8444e6405b147bb263f4c6d8c5568e8594/gcc%2Fconfig%2Fsparc%2Fsparc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsparc.c?ref=7fbb2f8444e6405b147bb263f4c6d8c5568e8594", "patch": "@@ -7286,8 +7286,7 @@ ultrasparc_adjust_cost (insn, link, dep_insn, cost)\n \t     or the cycle after an instruction which writes any\n \t     integer register.  Model this as cost 2 for dependent\n \t     instructions.  */\n-\t  if ((dep_type == TYPE_IALU || dep_type == TYPE_UNARY\n-\t       || dep_type == TYPE_BINARY)\n+\t  if (dep_type == TYPE_IALU\n \t      && cost < 2)\n \t    return 2;\n \t  /* Otherwise check as for integer conditional moves. */\n@@ -7428,8 +7427,7 @@ ultra_code_from_mask (type_mask)\n \t\t\tTMASK (TYPE_SIBCALL) |\n \t\t\tTMASK (TYPE_UNCOND_BRANCH)))\n     return IEU1;\n-  else if (type_mask & (TMASK (TYPE_IALU) | TMASK (TYPE_BINARY) |\n-\t\t\tTMASK (TYPE_MOVE) | TMASK (TYPE_UNARY)))\n+  else if (type_mask & TMASK (TYPE_IALU))\n     return IEUN;\n   else if (type_mask & (TMASK (TYPE_LOAD) | TMASK (TYPE_SLOAD) |\n \t\t\tTMASK (TYPE_STORE) | TMASK (TYPE_FPLOAD) |\n@@ -7906,7 +7904,7 @@ ultrasparc_sched_reorder (dump, sched_verbose, ready, n_ready)\n       {\n \t/* If the pipeline is (still) empty and we have any single\n \t   group insns, get them out now as this is a good time.  */\n-\trtx *ip = ultra_find_type ((TMASK (TYPE_RETURN) | TMASK (TYPE_ADDRESS) |\n+\trtx *ip = ultra_find_type ((TMASK (TYPE_RETURN) |\n \t\t\t\t    TMASK (TYPE_IMUL) | TMASK (TYPE_CMOVE) |\n \t\t\t\t    TMASK (TYPE_MULTI) | TMASK (TYPE_MISC)),\n \t\t\t\t   ready, this_insn);\n@@ -7960,8 +7958,7 @@ ultrasparc_sched_reorder (dump, sched_verbose, ready, n_ready)\n     if ((up->free_slot_mask & 0x7) != 0\n \t&& up->num_ieu_insns < 2)\n       {\n-\trtx *ip = ultra_find_type ((TMASK (TYPE_IALU) | TMASK (TYPE_BINARY) |\n-\t\t\t\t    TMASK (TYPE_MOVE) | TMASK (TYPE_UNARY) |\n+\trtx *ip = ultra_find_type ((TMASK (TYPE_IALU) |\n \t\t\t\t    (up->contents[IEU1] == 0 ? TMASK (TYPE_COMPARE) : 0)),\n \t\t\t\t   ready, this_insn);\n \tif (ip)\n@@ -7982,8 +7979,7 @@ ultrasparc_sched_reorder (dump, sched_verbose, ready, n_ready)\n \t&& up->num_ieu_insns < 2)\n       {\n \trtx *ip;\n-\tint tmask = (TMASK (TYPE_IALU) | TMASK (TYPE_BINARY) |\n-\t\t     TMASK (TYPE_MOVE) | TMASK (TYPE_UNARY));\n+\tint tmask = TMASK (TYPE_IALU);\n \n \tif (!up->contents[IEU1])\n \t  tmask |= TMASK (TYPE_COMPARE);"}, {"sha": "6c7b7fe6aa09c5659167116f44b4cf35a46bb694", "filename": "gcc/config/sparc/sparc.md", "status": "modified", "additions": 57, "deletions": 110, "changes": 167, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7fbb2f8444e6405b147bb263f4c6d8c5568e8594/gcc%2Fconfig%2Fsparc%2Fsparc.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7fbb2f8444e6405b147bb263f4c6d8c5568e8594/gcc%2Fconfig%2Fsparc%2Fsparc.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsparc.md?ref=7fbb2f8444e6405b147bb263f4c6d8c5568e8594", "patch": "@@ -80,23 +80,11 @@\n   (cond [(symbol_ref \"TARGET_ARCH64\") (const_string \"arch64bit\")]\n \t(const_string \"arch32bit\"))))\n \n-;; Insn type.  Used to default other attribute values.\n-\n-;; type \"unary\" insns have one input operand (1) and one output operand (0)\n-;; type \"binary\" insns have two input operands (1,2) and one output (0)\n-;; type \"compare\" insns have one or two input operands (0,1) and no output\n-;; type \"call_no_delay_slot\" is a call followed by an unimp instruction.\n+;; Insn type.\n \n (define_attr \"type\"\n-  \"move,unary,binary,compare,load,sload,store,ialu,shift,uncond_branch,branch,call,sibcall,call_no_delay_slot,return,address,imul,fpload,fpstore,fp,fpmove,fpcmove,fpcmp,fpmul,fpdivs,fpdivd,fpsqrts,fpsqrtd,cmove,multi,misc\"\n-  (const_string \"binary\"))\n-\n-;; Set true if insn uses call-clobbered intermediate register.\n-(define_attr \"use_clobbered\" \"false,true\"\n-  (if_then_else (and (eq_attr \"type\" \"address\")\n-\t\t     (match_operand 0 \"clobbered_register\" \"\"))\n-\t \t(const_string \"true\")\n-\t\t(const_string \"false\")))\n+  \"ialu,compare,shift,load,sload,store,uncond_branch,branch,call,sibcall,call_no_delay_slot,return,imul,fpload,fpstore,fp,fpmove,fpcmove,fpcmp,fpmul,fpdivs,fpdivd,fpsqrts,fpsqrtd,cmove,multi,misc\"\n+  (const_string \"ialu\"))\n \n ;; Length (in # of insns).\n (define_attr \"length\" \"\"\n@@ -108,16 +96,14 @@\n \t (if_then_else (match_operand 0 \"symbolic_memory_operand\" \"\")\n \t\t       (const_int 2) (const_int 1))\n \n-\t (eq_attr \"type\" \"address\") (const_int 2)\n-\n-\t (eq_attr \"type\" \"binary\")\n+\t (eq_attr \"type\" \"ialu\")\n \t (if_then_else (ior (match_operand 2 \"arith_operand\" \"\")\n \t\t\t    (match_operand 2 \"arith_double_operand\" \"\"))\n \t\t       (const_int 1) (const_int 3))\n \n \t (eq_attr \"type\" \"multi\") (const_int 2)\n \n-\t (eq_attr \"type\" \"move,unary\")\n+\t (eq_attr \"type\" \"ialu\")\n \t (if_then_else (ior (match_operand 1 \"arith_operand\" \"\")\n \t\t\t    (match_operand 1 \"arith_double_operand\" \"\"))\n \t\t       (const_int 1) (const_int 2))]\n@@ -135,10 +121,6 @@\n \t \t(const_string \"false\")\n \t (eq_attr \"type\" \"load,fpload,store,fpstore\")\n \t \t(if_then_else (eq_attr \"length\" \"1\")\n-\t\t\t      (const_string \"true\")\n-\t\t\t      (const_string \"false\"))\n-\t (eq_attr \"type\" \"address\")\n-\t \t(if_then_else (eq_attr \"use_clobbered\" \"false\")\n \t\t\t      (const_string \"true\")\n \t\t\t      (const_string \"false\"))]\n \t(if_then_else (eq_attr \"length\" \"1\")\n@@ -161,7 +143,7 @@\n   (symbol_ref \"eligible_for_return_delay (insn)\"))\n \n (define_attr \"in_return_delay\" \"false,true\"\n-  (if_then_else (and (and (and (eq_attr \"type\" \"move,load,sload,store,binary,ialu\")\n+  (if_then_else (and (and (and (eq_attr \"type\" \"ialu,load,sload,store\")\n \t\t\t       (eq_attr \"length\" \"1\"))\n \t\t\t  (eq_attr \"leaf_function\" \"false\"))\n \t\t     (eq_attr \"eligible_for_return_delay\" \"false\"))\n@@ -222,9 +204,6 @@\n ;; On the sparclite, integer multiply takes 1, 3, or 5 cycles depending on\n ;; the inputs.\n \n-;; (define_function_unit \"alu\" 1 0\n-;;  (eq_attr \"type\" \"unary,binary,move,address\") 1 0)\n-\n ;; ---- cypress CY7C602 scheduling:\n ;; Memory with load-delay of 1 (i.e., 2 cycle load).\n \n@@ -459,7 +438,7 @@\n \n (define_function_unit \"ieuN\" 2 0\n   (and (eq_attr \"cpu\" \"ultrasparc\")\n-    (eq_attr \"type\" \"ialu,binary,move,unary,shift,compare,call,sibcall,call_no_delay_slot,uncond_branch\"))\n+    (eq_attr \"type\" \"ialu,shift,compare,call,sibcall,call_no_delay_slot,uncond_branch\"))\n   1 1)\n \n (define_function_unit \"ieu0\" 1 0\n@@ -1157,8 +1136,7 @@\n    (clobber (reg:CC 100))]\n   \"TARGET_ARCH64\"\n   \"#\"\n-  [(set_attr \"type\" \"unary\")\n-   (set_attr \"length\" \"2\")])\n+  [(set_attr \"length\" \"2\")])\n \n (define_split\n   [(set (match_operand:DI 0 \"register_operand\" \"\")\n@@ -1287,8 +1265,7 @@\n    (clobber (reg:CC 100))]\n   \"TARGET_ARCH64\"\n   \"#\"\n-  [(set_attr \"type\" \"unary\")\n-   (set_attr \"length\" \"2\")])\n+  [(set_attr \"length\" \"2\")])\n \n (define_split\n   [(set (match_operand:DI 0 \"register_operand\" \"\")\n@@ -2094,7 +2071,7 @@\n ;;   [(set (match_operand 0 \"register_operand\" \"=r\") (pc))]\n ;;   \"TARGET_V9\"\n ;;   \"rd\\\\t%%pc, %0\"\n-;;   [(set_attr \"type\" \"move\")])\n+;;   [(set_attr \"type\" \"misc\")])\n \n \f\n ;; Move instructions\n@@ -2165,7 +2142,7 @@\n    mov\\\\t%1, %0\n    ldub\\\\t%1, %0\n    stb\\\\t%r1, %0\"\n-  [(set_attr \"type\" \"move,load,store\")\n+  [(set_attr \"type\" \"*,load,store\")\n    (set_attr \"length\" \"1\")])\n \n (define_expand \"movhi\"\n@@ -2229,8 +2206,7 @@\n \t(match_operand:HI 1 \"const64_high_operand\" \"\"))]\n   \"TARGET_ARCH64\"\n   \"sethi\\\\t%%hi(%a1), %0\"\n-  [(set_attr \"type\" \"move\")\n-   (set_attr \"length\" \"1\")])\n+  [(set_attr \"length\" \"1\")])\n \n (define_insn \"*movhi_insn\"\n   [(set (match_operand:HI 0 \"nonimmediate_operand\" \"=r,r,r,m\")\n@@ -2242,7 +2218,7 @@\n    sethi\\\\t%%hi(%a1), %0\n    lduh\\\\t%1, %0\n    sth\\\\t%r1, %0\"\n-  [(set_attr \"type\" \"move,move,load,store\")\n+  [(set_attr \"type\" \"*,*,load,store\")\n    (set_attr \"length\" \"1\")])\n \n ;; We always work with constants here.\n@@ -2334,8 +2310,7 @@\n \t(match_operand:SI 1 \"const64_high_operand\" \"\"))]\n   \"TARGET_ARCH64\"\n   \"sethi\\\\t%%hi(%a1), %0\"\n-  [(set_attr \"type\" \"move\")\n-   (set_attr \"length\" \"1\")])\n+  [(set_attr \"length\" \"1\")])\n \n (define_insn \"*movsi_insn\"\n   [(set (match_operand:SI 0 \"nonimmediate_operand\" \"=r,f,r,r,r,f,m,m,d\")\n@@ -2352,7 +2327,7 @@\n    st\\\\t%r1, %0\n    st\\\\t%1, %0\n    fzeros\\\\t%0\"\n-  [(set_attr \"type\" \"move,fpmove,move,move,load,fpload,store,fpstore,fpmove\")\n+  [(set_attr \"type\" \"*,fpmove,*,*,load,fpload,store,fpstore,fpmove\")\n    (set_attr \"length\" \"1\")])\n \n (define_insn \"*movsi_lo_sum\"\n@@ -2369,8 +2344,7 @@\n \t(high:SI (match_operand:SI 1 \"immediate_operand\" \"in\")))]\n   \"\"\n   \"sethi\\\\t%%hi(%a1), %0\"\n-  [(set_attr \"type\" \"move\")\n-   (set_attr \"length\" \"1\")])\n+  [(set_attr \"length\" \"1\")])\n \n ;; The next two patterns must wrap the SYMBOL_REF in an UNSPEC\n ;; so that CSE won't optimize the address computation away.\n@@ -2388,8 +2362,7 @@\n         (high:SI (unspec:SI [(match_operand 1 \"\" \"\")] 0)))]\n   \"flag_pic && check_pic (1)\"\n   \"sethi\\\\t%%hi(%a1), %0\"\n-  [(set_attr \"type\" \"move\")\n-   (set_attr \"length\" \"1\")])\n+  [(set_attr \"length\" \"1\")])\n \n (define_expand \"movsi_pic_label_ref\"\n   [(set (match_dup 3) (high:SI\n@@ -2424,8 +2397,7 @@\n \t\t    (match_operand:SI 2 \"\" \"\")] 5)))]\n   \"flag_pic\"\n   \"sethi\\\\t%%hi(%a2-(%a1-.)), %0\"\n-  [(set_attr \"type\" \"move\")\n-   (set_attr \"length\" \"1\")])\n+  [(set_attr \"length\" \"1\")])\n \n (define_insn \"*movsi_lo_sum_pic_label_ref\"\n   [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n@@ -2561,8 +2533,7 @@\n   \"(TARGET_ARCH64\n     && HOST_BITS_PER_WIDE_INT != 64)\"\n   \"mov\\\\t%1, %0\"\n-  [(set_attr \"type\" \"move\")\n-   (set_attr \"length\" \"1\")])\n+  [(set_attr \"length\" \"1\")])\n \n ;; This is needed to show CSE exactly which bits are set\n ;; in a 64-bit register by sethi instructions.\n@@ -2571,8 +2542,7 @@\n \t(match_operand:DI 1 \"const64_high_operand\" \"\"))]\n   \"TARGET_ARCH64\"\n   \"sethi\\\\t%%hi(%a1), %0\"\n-  [(set_attr \"type\" \"move\")\n-   (set_attr \"length\" \"1\")])\n+  [(set_attr \"length\" \"1\")])\n \n (define_insn \"*movdi_insn_sp64_novis\"\n   [(set (match_operand:DI 0 \"nonimmediate_operand\" \"=r,r,r,r,m,?e,?e,?m\")\n@@ -2589,7 +2559,7 @@\n    fmovd\\\\t%1, %0\n    ldd\\\\t%1, %0\n    std\\\\t%1, %0\"\n-  [(set_attr \"type\" \"move,move,move,load,store,fpmove,fpload,fpstore\")\n+  [(set_attr \"type\" \"*,*,*,load,store,fpmove,fpload,fpstore\")\n    (set_attr \"length\" \"1\")])\n \n (define_insn \"*movdi_insn_sp64_vis\"\n@@ -2608,7 +2578,7 @@\n    ldd\\\\t%1, %0\n    std\\\\t%1, %0\n    fzero\\\\t%0\"\n-  [(set_attr \"type\" \"move,move,move,load,store,fpmove,fpload,fpstore,fpmove\")\n+  [(set_attr \"type\" \"*,*,*,load,store,fpmove,fpload,fpstore,fpmove\")\n    (set_attr \"length\" \"1\")])\n \n (define_expand \"movdi_pic_label_ref\"\n@@ -2644,8 +2614,7 @@\n                       (match_operand:DI 2 \"\" \"\")] 5)))]\n   \"TARGET_ARCH64 && flag_pic\"\n   \"sethi\\\\t%%hi(%a2-(%a1-.)), %0\"\n-  [(set_attr \"type\" \"move\")\n-   (set_attr \"length\" \"1\")])\n+  [(set_attr \"length\" \"1\")])\n \n (define_insn \"*movdi_lo_sum_pic_label_ref\"\n   [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n@@ -2674,24 +2643,21 @@\n         (high:DI (unspec:DI [(match_operand 1 \"\" \"\")] 0)))]\n   \"TARGET_ARCH64 && flag_pic && check_pic (1)\"\n   \"sethi\\\\t%%hi(%a1), %0\"\n-  [(set_attr \"type\" \"move\")\n-   (set_attr \"length\" \"1\")])\n+  [(set_attr \"length\" \"1\")])\n \n (define_insn \"*sethi_di_medlow_embmedany_pic\"\n   [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n         (high:DI (match_operand:DI 1 \"sp64_medium_pic_operand\" \"\")))]\n   \"(TARGET_CM_MEDLOW || TARGET_CM_EMBMEDANY) && check_pic (1)\"\n   \"sethi\\\\t%%hi(%a1), %0\"\n-  [(set_attr \"type\" \"move\")\n-   (set_attr \"length\" \"1\")])\n+  [(set_attr \"length\" \"1\")])\n \n (define_insn \"*sethi_di_medlow\"\n   [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n         (high:DI (match_operand:DI 1 \"symbolic_operand\" \"\")))]\n   \"TARGET_CM_MEDLOW && check_pic (1)\"\n   \"sethi\\\\t%%hi(%a1), %0\"\n-  [(set_attr \"type\" \"move\")\n-   (set_attr \"length\" \"1\")])\n+  [(set_attr \"length\" \"1\")])\n \n (define_insn \"*losum_di_medlow\"\n   [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n@@ -2707,17 +2673,15 @@\n         (high:DI (unspec:DI [(match_operand:DI 1 \"symbolic_operand\" \"\")] 6)))]\n   \"TARGET_CM_MEDMID\"\n   \"sethi\\\\t%%h44(%a1), %0\"\n-  [(set_attr \"type\" \"move\")\n-   (set_attr \"length\" \"1\")])\n+  [(set_attr \"length\" \"1\")])\n \n (define_insn \"setm44\"\n   [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n         (lo_sum:DI (match_operand:DI 1 \"register_operand\" \"r\")\n                    (unspec:DI [(match_operand:DI 2 \"symbolic_operand\" \"\")] 7)))]\n   \"TARGET_CM_MEDMID\"\n   \"or\\\\t%1, %%m44(%a2), %0\"\n-  [(set_attr \"type\" \"move\")\n-   (set_attr \"length\" \"1\")])\n+  [(set_attr \"length\" \"1\")])\n \n (define_insn \"setl44\"\n   [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n@@ -2733,16 +2697,14 @@\n         (high:DI (unspec:DI [(match_operand:DI 1 \"symbolic_operand\" \"\")] 9)))]\n   \"TARGET_CM_MEDANY\"\n   \"sethi\\\\t%%hh(%a1), %0\"\n-  [(set_attr \"type\" \"move\")\n-   (set_attr \"length\" \"1\")])\n+  [(set_attr \"length\" \"1\")])\n \n (define_insn \"setlm\"\n   [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n         (high:DI (unspec:DI [(match_operand:DI 1 \"symbolic_operand\" \"\")] 10)))]\n   \"TARGET_CM_MEDANY\"\n   \"sethi\\\\t%%lm(%a1), %0\"\n-  [(set_attr \"type\" \"move\")\n-   (set_attr \"length\" \"1\")])\n+  [(set_attr \"length\" \"1\")])\n \n (define_insn \"sethm\"\n   [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n@@ -2767,8 +2729,7 @@\n         (high:DI (unspec:DI [(match_operand:DI 1 \"data_segment_operand\" \"\")] 11)))]\n   \"TARGET_CM_EMBMEDANY && check_pic (1)\"\n   \"sethi\\\\t%%hi(%a1), %0\"\n-  [(set_attr \"type\" \"move\")\n-   (set_attr \"length\" \"1\")])\n+  [(set_attr \"length\" \"1\")])\n \n (define_insn \"embmedany_losum\"\n   [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n@@ -2791,16 +2752,14 @@\n         (high:DI (unspec:DI [(match_operand:DI 1 \"text_segment_operand\" \"\")] 13)))]\n   \"TARGET_CM_EMBMEDANY && check_pic (1)\"\n   \"sethi\\\\t%%uhi(%a1), %0\"\n-  [(set_attr \"type\" \"move\")\n-   (set_attr \"length\" \"1\")])\n+  [(set_attr \"length\" \"1\")])\n \n (define_insn \"embmedany_texthi\"\n   [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n         (high:DI (unspec:DI [(match_operand:DI 1 \"text_segment_operand\" \"\")] 14)))]\n   \"TARGET_CM_EMBMEDANY && check_pic (1)\"\n   \"sethi\\\\t%%hi(%a1), %0\"\n-  [(set_attr \"type\" \"move\")\n-   (set_attr \"length\" \"1\")])\n+  [(set_attr \"length\" \"1\")])\n \n (define_insn \"embmedany_textulo\"\n   [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n@@ -3038,7 +2997,7 @@\n       abort();\n     }\n }\"\n-  [(set_attr \"type\" \"fpmove,move,move,move,*,load,fpload,fpstore,store\")\n+  [(set_attr \"type\" \"fpmove,*,*,*,*,load,fpload,fpstore,store\")\n    (set_attr \"length\" \"1\")])\n \n (define_insn \"*movsf_insn_vis\"\n@@ -3087,7 +3046,7 @@\n       abort();\n     }\n }\"\n-  [(set_attr \"type\" \"fpmove,fpmove,move,move,move,*,load,fpload,fpstore,store\")\n+  [(set_attr \"type\" \"fpmove,fpmove,*,*,*,*,load,fpload,fpstore,store\")\n    (set_attr \"length\" \"1\")])\n \n ;; Exactly the same as above, except that all `f' cases are deleted.\n@@ -3134,7 +3093,7 @@\n       abort();\n     }\n }\"\n-  [(set_attr \"type\" \"move,move,move,*,load,store\")\n+  [(set_attr \"type\" \"*,*,*,*,load,store\")\n    (set_attr \"length\" \"1\")])\n \n (define_insn \"*movsf_lo_sum\"\n@@ -3169,8 +3128,7 @@\n   operands[1] = GEN_INT (i);\n   return \\\"sethi\\\\t%%hi(%1), %0\\\";\n }\"\n-  [(set_attr \"type\" \"move\")\n-   (set_attr \"length\" \"1\")])\n+  [(set_attr \"length\" \"1\")])\n \n (define_split\n   [(set (match_operand:SF 0 \"register_operand\" \"\")\n@@ -3431,7 +3389,7 @@\n   ldx\\\\t%1, %0\n   stx\\\\t%r1, %0\n   #\"\n-  [(set_attr \"type\" \"fpmove,load,store,move,load,store,*\")\n+  [(set_attr \"type\" \"fpmove,load,store,*,load,store,*\")\n    (set_attr \"length\" \"1,1,1,1,1,1,2\")])\n \n ;; We have available both v9 double floats and 64-bit\n@@ -3454,7 +3412,7 @@\n   ldx\\\\t%1, %0\n   stx\\\\t%r1, %0\n   #\"\n-  [(set_attr \"type\" \"fpmove,fpmove,load,store,move,load,store,*\")\n+  [(set_attr \"type\" \"fpmove,fpmove,load,store,*,load,store,*\")\n    (set_attr \"length\" \"1,1,1,1,1,1,1,2\")])\n \n (define_insn \"*movdf_no_e_insn_sp64\"\n@@ -3469,7 +3427,7 @@\n   mov\\\\t%1, %0\n   ldx\\\\t%1, %0\n   stx\\\\t%r1, %0\"\n-  [(set_attr \"type\" \"move,load,store\")\n+  [(set_attr \"type\" \"*,load,store\")\n    (set_attr \"length\" \"1\")])\n \n (define_split\n@@ -4600,7 +4558,7 @@\n   \"@\n    and\\\\t%1, 0xff, %0\n    ldub\\\\t%1, %0\"\n-  [(set_attr \"type\" \"unary,load\")\n+  [(set_attr \"type\" \"ialu,load\")\n    (set_attr \"length\" \"1\")])\n \n (define_expand \"zero_extendqisi2\"\n@@ -4616,7 +4574,7 @@\n   \"@\n    and\\\\t%1, 0xff, %0\n    ldub\\\\t%1, %0\"\n-  [(set_attr \"type\" \"unary,load\")\n+  [(set_attr \"type\" \"ialu,load\")\n    (set_attr \"length\" \"1\")])\n \n (define_expand \"zero_extendqidi2\"\n@@ -4632,7 +4590,7 @@\n   \"@\n    and\\\\t%1, 0xff, %0\n    ldub\\\\t%1, %0\"\n-  [(set_attr \"type\" \"unary,load\")\n+  [(set_attr \"type\" \"ialu,load\")\n    (set_attr \"length\" \"1\")])\n \n (define_expand \"zero_extendhidi2\"\n@@ -4691,8 +4649,7 @@\n         (zero_extend:DI (match_operand:SI 1 \"register_operand\" \"r\")))]\n   \"! TARGET_ARCH64\"\n   \"#\"\n-  [(set_attr \"type\" \"unary\")\n-   (set_attr \"length\" \"2\")])\n+  [(set_attr \"length\" \"2\")])\n \n (define_split\n   [(set (match_operand:DI 0 \"register_operand\" \"\")\n@@ -5691,8 +5648,7 @@\n \t\t (ltu:SI (reg:CC_NOOV 100) (const_int 0))))]\n   \"\"\n   \"addx\\\\t%1, %2, %0\"\n-  [(set_attr \"type\" \"unary\")\n-   (set_attr \"length\" \"1\")])\n+  [(set_attr \"length\" \"1\")])\n \n (define_insn \"*addx_extend_sp32\"\n   [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n@@ -5701,8 +5657,7 @@\n                                  (ltu:SI (reg:CC_NOOV 100) (const_int 0)))))]\n   \"! TARGET_ARCH64\"\n   \"#\"\n-  [(set_attr \"type\" \"unary\")\n-   (set_attr \"length\" \"2\")])\n+  [(set_attr \"length\" \"2\")])\n \n (define_split\n   [(set (match_operand:DI 0 \"register_operand\" \"\")\n@@ -5753,8 +5708,7 @@\n                                   (ltu:SI (reg:CC_NOOV 100) (const_int 0)))))]\n   \"! TARGET_ARCH64\"\n   \"#\"\n-  [(set_attr \"type\" \"unary\")\n-   (set_attr \"length\" \"2\")])\n+  [(set_attr \"length\" \"2\")])\n \n (define_split\n   [(set (match_operand:DI 0 \"register_operand\" \"\")\n@@ -5802,8 +5756,7 @@\n \t\t (match_operand:DI 2 \"arith_double_operand\" \"rHI\")))]\n   \"TARGET_ARCH64\"\n   \"add\\\\t%1, %2, %0\"\n-  [(set_attr \"type\" \"binary\")\n-   (set_attr \"length\" \"1\")])\n+  [(set_attr \"length\" \"1\")])\n \n (define_expand \"addsi3\"\n   [(set (match_operand:SI 0 \"register_operand\" \"=r,d\")\n@@ -6006,8 +5959,7 @@\n \t\t  (match_operand:DI 2 \"arith_double_operand\" \"rHI\")))]\n   \"TARGET_ARCH64\"\n   \"sub\\\\t%1, %2, %0\"\n-  [(set_attr \"type\" \"binary\")\n-   (set_attr \"length\" \"1\")])\n+  [(set_attr \"length\" \"1\")])\n \n (define_expand \"subsi3\"\n   [(set (match_operand:SI 0 \"register_operand\" \"=r,d\")\n@@ -7293,8 +7245,7 @@\n    (clobber (reg:CC 100))]\n   \"TARGET_ARCH32\"\n   \"#\"\n-  [(set_attr \"type\" \"unary\")\n-   (set_attr \"length\" \"2\")])\n+  [(set_attr \"length\" \"2\")])\n \n (define_split\n   [(set (match_operand:DI 0 \"register_operand\" \"\")\n@@ -7318,16 +7269,14 @@\n \t(neg:DI (match_operand:DI 1 \"register_operand\" \"r\")))]\n   \"TARGET_ARCH64\"\n   \"sub\\\\t%%g0, %1, %0\"\n-  [(set_attr \"type\" \"unary\")\n-   (set_attr \"length\" \"1\")])\n+  [(set_attr \"length\" \"1\")])\n \n (define_insn \"negsi2\"\n   [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n         (neg:SI (match_operand:SI 1 \"arith_operand\" \"rI\")))]\n   \"\"\n   \"sub\\\\t%%g0, %1, %0\"\n-  [(set_attr \"type\" \"unary\")\n-   (set_attr \"length\" \"1\")])\n+  [(set_attr \"length\" \"1\")])\n \n (define_insn \"*cmp_cc_neg\"\n   [(set (reg:CC_NOOV 100)\n@@ -7384,7 +7333,7 @@\n   \"@\n    #\n    fnot1\\\\t%1, %0\"\n-  [(set_attr \"type\" \"unary,fp\")\n+  [(set_attr \"type\" \"*,fp\")\n    (set_attr \"length\" \"2,1\")])\n \n (define_split\n@@ -7413,7 +7362,7 @@\n   \"@\n    xnor\\\\t%%g0, %1, %0\n    fnot1\\\\t%1, %0\"\n-  [(set_attr \"type\" \"unary,fp\")\n+  [(set_attr \"type\" \"*,fp\")\n    (set_attr \"length\" \"1\")])\n \n (define_insn \"one_cmplsi2\"\n@@ -7423,7 +7372,7 @@\n   \"@\n   xnor\\\\t%%g0, %1, %0\n   fnot1s\\\\t%1, %0\"\n-  [(set_attr \"type\" \"unary,fp\")\n+  [(set_attr \"type\" \"*,fp\")\n    (set_attr \"length\" \"1,1\")])\n \n (define_insn \"*cmp_cc_not\"\n@@ -8090,8 +8039,7 @@\n                    (const_int 1)))]\n   \"\"\n   \"add\\\\t%1, %1, %0\"\n-  [(set_attr \"type\" \"binary\")\n-   (set_attr \"length\" \"1\")])\n+  [(set_attr \"length\" \"1\")])\n \n (define_expand \"ashldi3\"\n   [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n@@ -8117,8 +8065,7 @@\n \t\t   (const_int 1)))]\n   \"TARGET_ARCH64\"\n   \"add\\\\t%1, %1, %0\"\n-  [(set_attr \"type\" \"binary\")\n-   (set_attr \"length\" \"1\")])\n+  [(set_attr \"length\" \"1\")])\n \n (define_insn \"*ashldi3_sp64\"\n   [(set (match_operand:DI 0 \"register_operand\" \"=r\")"}]}