{"sha": "ad6922b03b0aba8010936394b535acce99f2f66d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWQ2OTIyYjAzYjBhYmE4MDEwOTM2Mzk0YjUzNWFjY2U5OWYyZjY2ZA==", "commit": {"author": {"name": "Wilco Dijkstra", "email": "wdijkstr@arm.com", "date": "2016-10-25T10:25:28Z"}, "committer": {"name": "Wilco Dijkstra", "email": "wilco@gcc.gnu.org", "date": "2016-10-25T10:25:28Z"}, "message": "With -fpu=neon DI mode shifts are expanded after reload.\n\nWith -fpu=neon DI mode shifts are expanded after reload.  DI mode registers can \neither fully or partially overlap on both ARM and Thumb-2.  However the shift\nexpansion code can only deal with the full overlap case, and generates incorrect\ncode for partial overlaps.  The fix is to add new variants that support either\nfull overlap or no overlap.\n\n    gcc/\n\tPR target/78041\n\t* config/arm/neon.md (ashldi3_neon): Add \"r 0 i\" and \"&r r i\" variants.\n\tRemove partial overlap check for shift by 1.\n\t(ashldi3_neon): Likewise.\n    testsuite/\n\t* gcc.target/arm/pr78041.c: New test.\n\nFrom-SVN: r241508", "tree": {"sha": "05acfd94ea6d1113b72ad3ad54100f21c975fa09", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/05acfd94ea6d1113b72ad3ad54100f21c975fa09"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ad6922b03b0aba8010936394b535acce99f2f66d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ad6922b03b0aba8010936394b535acce99f2f66d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ad6922b03b0aba8010936394b535acce99f2f66d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ad6922b03b0aba8010936394b535acce99f2f66d/comments", "author": null, "committer": null, "parents": [{"sha": "84c20253961be6a343a8fbe3ec14cd46752b4427", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/84c20253961be6a343a8fbe3ec14cd46752b4427", "html_url": "https://github.com/Rust-GCC/gccrs/commit/84c20253961be6a343a8fbe3ec14cd46752b4427"}], "stats": {"total": 80, "additions": 58, "deletions": 22}, "files": [{"sha": "aaf07f436d7a834a6a3af1e65ec1aeb7e553b58d", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad6922b03b0aba8010936394b535acce99f2f66d/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad6922b03b0aba8010936394b535acce99f2f66d/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=ad6922b03b0aba8010936394b535acce99f2f66d", "patch": "@@ -1,3 +1,10 @@\n+2016-10-25  Wilco Dijkstra  <wdijkstr@arm.com>\n+\n+\tPR target/78041\n+\t* config/arm/neon.md (ashldi3_neon): Add \"r 0 i\" and \"&r r i\" variants.\n+\tRemove partial overlap check for shift by 1.\n+\t(ashldi3_neon): Likewise.\n+\n 2016-10-25  Thomas Preud'homme  <thomas.preudhomme@arm.com>\n \n \t* config/arm/constraints.md (Q constraint): Document its use for"}, {"sha": "59316de004107913c1db0951ced4d584999fc099", "filename": "gcc/config/arm/neon.md", "status": "modified", "additions": 26, "deletions": 22, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad6922b03b0aba8010936394b535acce99f2f66d/gcc%2Fconfig%2Farm%2Fneon.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad6922b03b0aba8010936394b535acce99f2f66d/gcc%2Fconfig%2Farm%2Fneon.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Fneon.md?ref=ad6922b03b0aba8010936394b535acce99f2f66d", "patch": "@@ -1143,12 +1143,12 @@\n )\n \n (define_insn_and_split \"ashldi3_neon\"\n-  [(set (match_operand:DI 0 \"s_register_operand\"\t    \"= w, w,?&r,?r, ?w,w\")\n-\t(ashift:DI (match_operand:DI 1 \"s_register_operand\" \" 0w, w, 0r, r, 0w,w\")\n-\t\t   (match_operand:SI 2 \"general_operand\"    \"rUm, i,  r, i,rUm,i\")))\n-   (clobber (match_scratch:SI 3\t\t\t\t    \"= X, X,?&r, X,  X,X\"))\n-   (clobber (match_scratch:SI 4\t\t\t\t    \"= X, X,?&r, X,  X,X\"))\n-   (clobber (match_scratch:DI 5\t\t\t\t    \"=&w, X,  X, X, &w,X\"))\n+  [(set (match_operand:DI 0 \"s_register_operand\"\t    \"= w, w,?&r,?r,?&r, ?w,w\")\n+\t(ashift:DI (match_operand:DI 1 \"s_register_operand\" \" 0w, w, 0r, 0,  r, 0w,w\")\n+\t\t   (match_operand:SI 2 \"general_operand\"    \"rUm, i,  r, i,  i,rUm,i\")))\n+   (clobber (match_scratch:SI 3\t\t\t\t    \"= X, X,?&r, X,  X,  X,X\"))\n+   (clobber (match_scratch:SI 4\t\t\t\t    \"= X, X,?&r, X,  X,  X,X\"))\n+   (clobber (match_scratch:DI 5\t\t\t\t    \"=&w, X,  X, X,  X, &w,X\"))\n    (clobber (reg:CC_C CC_REGNUM))]\n   \"TARGET_NEON\"\n   \"#\"\n@@ -1180,9 +1180,11 @@\n       }\n     else\n       {\n-\tif (operands[2] == CONST1_RTX (SImode)\n-\t    && (!reg_overlap_mentioned_p (operands[0], operands[1])\n-\t\t|| REGNO (operands[0]) == REGNO (operands[1])))\n+\t/* The shift expanders support either full overlap or no overlap.  */\n+\tgcc_assert (!reg_overlap_mentioned_p (operands[0], operands[1])\n+\t\t    || REGNO (operands[0]) == REGNO (operands[1]));\n+\n+\tif (operands[2] == CONST1_RTX (SImode))\n \t  /* This clobbers CC.  */\n \t  emit_insn (gen_arm_ashldi3_1bit (operands[0], operands[1]));\n \telse\n@@ -1191,8 +1193,8 @@\n       }\n     DONE;\n   }\"\n-  [(set_attr \"arch\" \"neon_for_64bits,neon_for_64bits,*,*,avoid_neon_for_64bits,avoid_neon_for_64bits\")\n-   (set_attr \"opt\" \"*,*,speed,speed,*,*\")\n+  [(set_attr \"arch\" \"neon_for_64bits,neon_for_64bits,*,*,*,avoid_neon_for_64bits,avoid_neon_for_64bits\")\n+   (set_attr \"opt\" \"*,*,speed,speed,speed,*,*\")\n    (set_attr \"type\" \"multiple\")]\n )\n \n@@ -1241,12 +1243,12 @@\n ;; ashrdi3_neon\n ;; lshrdi3_neon\n (define_insn_and_split \"<shift>di3_neon\"\n-  [(set (match_operand:DI 0 \"s_register_operand\"\t     \"= w, w,?&r,?r,?w,?w\")\n-\t(RSHIFTS:DI (match_operand:DI 1 \"s_register_operand\" \" 0w, w, 0r, r,0w, w\")\n-\t\t    (match_operand:SI 2 \"reg_or_int_operand\" \"  r, i,  r, i, r, i\")))\n-   (clobber (match_scratch:SI 3\t\t\t\t     \"=2r, X, &r, X,2r, X\"))\n-   (clobber (match_scratch:SI 4\t\t\t\t     \"= X, X, &r, X, X, X\"))\n-   (clobber (match_scratch:DI 5\t\t\t\t     \"=&w, X,  X, X,&w, X\"))\n+  [(set (match_operand:DI 0 \"s_register_operand\"\t     \"= w, w,?&r,?r,?&r,?w,?w\")\n+\t(RSHIFTS:DI (match_operand:DI 1 \"s_register_operand\" \" 0w, w, 0r, 0,  r,0w, w\")\n+\t\t    (match_operand:SI 2 \"reg_or_int_operand\" \"  r, i,  r, i,  i, r, i\")))\n+   (clobber (match_scratch:SI 3\t\t\t\t     \"=2r, X, &r, X,  X,2r, X\"))\n+   (clobber (match_scratch:SI 4\t\t\t\t     \"= X, X, &r, X,  X, X, X\"))\n+   (clobber (match_scratch:DI 5\t\t\t\t     \"=&w, X,  X, X, X,&w, X\"))\n    (clobber (reg:CC CC_REGNUM))]\n   \"TARGET_NEON\"\n   \"#\"\n@@ -1282,9 +1284,11 @@\n       }\n     else\n       {\n-\tif (operands[2] == CONST1_RTX (SImode)\n-\t    && (!reg_overlap_mentioned_p (operands[0], operands[1])\n-\t\t|| REGNO (operands[0]) == REGNO (operands[1])))\n+\t/* The shift expanders support either full overlap or no overlap.  */\n+\tgcc_assert (!reg_overlap_mentioned_p (operands[0], operands[1])\n+\t\t    || REGNO (operands[0]) == REGNO (operands[1]));\n+\n+\tif (operands[2] == CONST1_RTX (SImode))\n \t  /* This clobbers CC.  */\n \t  emit_insn (gen_arm_<shift>di3_1bit (operands[0], operands[1]));\n \telse\n@@ -1295,8 +1299,8 @@\n \n     DONE;\n   }\"\n-  [(set_attr \"arch\" \"neon_for_64bits,neon_for_64bits,*,*,avoid_neon_for_64bits,avoid_neon_for_64bits\")\n-   (set_attr \"opt\" \"*,*,speed,speed,*,*\")\n+  [(set_attr \"arch\" \"neon_for_64bits,neon_for_64bits,*,*,*,avoid_neon_for_64bits,avoid_neon_for_64bits\")\n+   (set_attr \"opt\" \"*,*,speed,speed,speed,*,*\")\n    (set_attr \"type\" \"multiple\")]\n )\n "}, {"sha": "02d8ac6303d44941a0573ffdc5cc8eb695309cf4", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad6922b03b0aba8010936394b535acce99f2f66d/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad6922b03b0aba8010936394b535acce99f2f66d/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=ad6922b03b0aba8010936394b535acce99f2f66d", "patch": "@@ -1,3 +1,8 @@\n+2016-10-25  Wilco Dijkstra  <wdijkstr@arm.com>\n+\n+\tPR target/78041\n+\t* gcc.target/arm/pr78041.c: New test.\n+\n 2016-10-25  Jakub Jelinek  <jakub@redhat.com>\n \n \t* g++.dg/cpp1z/launder1.C: New test."}, {"sha": "340ab5cb433b28ca7d47e236fee93581e7c195c4", "filename": "gcc/testsuite/gcc.target/arm/pr78041.c", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad6922b03b0aba8010936394b535acce99f2f66d/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fpr78041.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad6922b03b0aba8010936394b535acce99f2f66d/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fpr78041.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fpr78041.c?ref=ad6922b03b0aba8010936394b535acce99f2f66d", "patch": "@@ -0,0 +1,20 @@\n+/* { dg-require-effective-target arm_thumb2_ok } */\n+/* { dg-require-effective-target arm_neon_ok } */\n+/* { dg-options \"-fno-inline -mthumb -O1 -mfpu=neon -w\" } */\n+\n+extern void abort (void);\n+\n+register long long x asm (\"r1\");\n+\n+long long f (void)\n+{\n+  return x << 5;\n+}\n+\n+int main ()\n+{\n+  x = 0x0100000001;\n+  if (f () != 0x2000000020)\n+    abort ();\n+  return 0;\n+}"}]}