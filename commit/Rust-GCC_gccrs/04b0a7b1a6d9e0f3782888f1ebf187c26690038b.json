{"sha": "04b0a7b1a6d9e0f3782888f1ebf187c26690038b", "node_id": "C_kwDOANBUbNoAKDA0YjBhN2IxYTZkOWUwZjM3ODI4ODhmMWViZjE4N2MyNjY5MDAzOGI", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2023-03-29T11:49:24Z"}, "committer": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2023-03-30T11:15:52Z"}, "message": "tree-optimization/107561 - reduce -Wstringop-overflow false positives\n\nThe following tells pointer-query to prefer a zero size when we\nare querying for the size range for a write into an object we've\ndetermined is of zero size.  That avoids diagnostics about really\nvarying size arguments that just get a meaningful range for example\nbecause they are multiplied by an element size.\n\nI've adjusted only one call to get_size_range since that's what\nI have a testcase for.\n\n\tPR tree-optimization/107561\n\t* gimple-ssa-warn-access.cc (get_size_range): Add flags\n\targument and pass it on.\n\t(check_access): When querying for the size range pass\n\tSR_ALLOW_ZERO when the known destination size is zero.\n\n\t* g++.dg/pr71488.C: Remove XFAILed bogus diagnostic again.\n\t* g++.dg/warn/Warray-bounds-16.C: Likewise.", "tree": {"sha": "e175add0da49b97bf51dd7c8d743cc652e99ed95", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e175add0da49b97bf51dd7c8d743cc652e99ed95"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/04b0a7b1a6d9e0f3782888f1ebf187c26690038b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/04b0a7b1a6d9e0f3782888f1ebf187c26690038b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/04b0a7b1a6d9e0f3782888f1ebf187c26690038b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/04b0a7b1a6d9e0f3782888f1ebf187c26690038b/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1d0ba4467dd9cad11eb9ff547442e3ce6292b892", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1d0ba4467dd9cad11eb9ff547442e3ce6292b892", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1d0ba4467dd9cad11eb9ff547442e3ce6292b892"}], "stats": {"total": 21, "additions": 13, "deletions": 8}, "files": [{"sha": "b3de4b779245e326a053e18e01b3e5e5c1d74efb", "filename": "gcc/gimple-ssa-warn-access.cc", "status": "modified", "additions": 13, "deletions": 6, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/04b0a7b1a6d9e0f3782888f1ebf187c26690038b/gcc%2Fgimple-ssa-warn-access.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/04b0a7b1a6d9e0f3782888f1ebf187c26690038b/gcc%2Fgimple-ssa-warn-access.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-ssa-warn-access.cc?ref=04b0a7b1a6d9e0f3782888f1ebf187c26690038b", "patch": "@@ -1198,10 +1198,10 @@ warn_for_access (location_t loc, tree func, tree expr, int opt,\n \n static void\n get_size_range (range_query *query, tree bound, gimple *stmt, tree range[2],\n-\t\tconst offset_int bndrng[2])\n+\t\tint flags, const offset_int bndrng[2])\n {\n   if (bound)\n-    get_size_range (query, bound, stmt, range);\n+    get_size_range (query, bound, stmt, range, flags);\n \n   if (!bndrng || (bndrng[0] == 0 && bndrng[1] == HOST_WIDE_INT_M1U))\n     return;\n@@ -1347,7 +1347,12 @@ check_access (GimpleOrTree exp, tree dstwrite,\n   /* Set RANGE to that of DSTWRITE if non-null, bounded by PAD->DST_BNDRNG\n      if valid.  */\n   gimple *stmt = pad ? pad->stmt : nullptr;\n-  get_size_range (rvals, dstwrite, stmt, range, pad ? pad->dst_bndrng : NULL);\n+  get_size_range (rvals, dstwrite, stmt, range,\n+\t\t  /* If the destination has known zero size prefer a zero\n+\t\t     size range to avoid false positives if that's a\n+\t\t     possibility.  */\n+\t\t  integer_zerop (dstsize) ? SR_ALLOW_ZERO : 0,\n+\t\t  pad ? pad->dst_bndrng : NULL);\n \n   tree func = get_callee_fndecl (exp);\n   /* Read vs write access by built-ins can be determined from the const\n@@ -1442,7 +1447,8 @@ check_access (GimpleOrTree exp, tree dstwrite,\n     {\n       /* Set RANGE to that of MAXREAD, bounded by PAD->SRC_BNDRNG if\n \t PAD is nonnull and BNDRNG is valid.  */\n-      get_size_range (rvals, maxread, stmt, range, pad ? pad->src_bndrng : NULL);\n+      get_size_range (rvals, maxread, stmt, range, 0,\n+\t\t      pad ? pad->src_bndrng : NULL);\n \n       location_t loc = get_location (exp);\n       tree size = dstsize;\n@@ -1489,7 +1495,8 @@ check_access (GimpleOrTree exp, tree dstwrite,\n     {\n       /* Set RANGE to that of MAXREAD, bounded by PAD->SRC_BNDRNG if\n \t PAD is nonnull and BNDRNG is valid.  */\n-      get_size_range (rvals, maxread, stmt, range, pad ? pad->src_bndrng : NULL);\n+      get_size_range (rvals, maxread, stmt, range, 0,\n+\t\t      pad ? pad->src_bndrng : NULL);\n       /* Set OVERREAD for reads starting just past the end of an object.  */\n       overread = pad->src.sizrng[1] - pad->src.offrng[0] < pad->src_bndrng[0];\n       range[0] = wide_int_to_tree (sizetype, pad->src_bndrng[0]);\n@@ -2679,7 +2686,7 @@ pass_waccess::check_strncmp (gcall *stmt)\n   /* Determine the range of the bound first and bail if it fails; it's\n      cheaper than computing the size of the objects.  */\n   tree bndrng[2] = { NULL_TREE, NULL_TREE };\n-  get_size_range (m_ptr_qry.rvals, bound, stmt, bndrng, adata1.src_bndrng);\n+  get_size_range (m_ptr_qry.rvals, bound, stmt, bndrng, 0, adata1.src_bndrng);\n   if (!bndrng[0] || integer_zerop (bndrng[0]))\n     return;\n "}, {"sha": "ffe30f1afeb1ac576c38f11af9f4462e6cbf65a2", "filename": "gcc/testsuite/g++.dg/pr71488.C", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/04b0a7b1a6d9e0f3782888f1ebf187c26690038b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fpr71488.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/04b0a7b1a6d9e0f3782888f1ebf187c26690038b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fpr71488.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fpr71488.C?ref=04b0a7b1a6d9e0f3782888f1ebf187c26690038b", "patch": "@@ -3,7 +3,6 @@\n // { dg-options \"-O3 -std=c++11\" }\n // { dg-additional-options \"-msse4\" { target sse4_runtime } }\n // { dg-require-effective-target c++11 }\n-// { dg-bogus \"size 0 overflows\" \"pr107561\" { xfail *-*-* } 0 }\n \n #include <valarray>\n "}, {"sha": "89cbadb91c7b91fb8422624ec2454d0e60768b77", "filename": "gcc/testsuite/g++.dg/warn/Warray-bounds-16.C", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/04b0a7b1a6d9e0f3782888f1ebf187c26690038b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWarray-bounds-16.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/04b0a7b1a6d9e0f3782888f1ebf187c26690038b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWarray-bounds-16.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWarray-bounds-16.C?ref=04b0a7b1a6d9e0f3782888f1ebf187c26690038b", "patch": "@@ -20,7 +20,6 @@ struct S\n \n     for (int i = 0; i < m; i++)\n       new (p + i) int (); /* { dg-bogus \"bounds\" \"pr102690\" { xfail *-*-* } } */\n-    // { dg-bogus \"size 0 overflows\" \"pr107561\" { xfail ilp32 } .-1 }\n   }\n };\n "}]}