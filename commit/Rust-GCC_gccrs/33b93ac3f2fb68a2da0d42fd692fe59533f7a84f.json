{"sha": "33b93ac3f2fb68a2da0d42fd692fe59533f7a84f", "node_id": "C_kwDOANBUbNoAKDMzYjkzYWMzZjJmYjY4YTJkYTBkNDJmZDY5MmZlNTk1MzNmN2E4NGY", "commit": {"author": {"name": "Kyrylo Tkachov", "email": "kyrylo.tkachov@arm.com", "date": "2022-10-06T11:09:28Z"}, "committer": {"name": "Kyrylo Tkachov", "email": "kyrylo.tkachov@arm.com", "date": "2022-10-06T11:09:28Z"}, "message": "aarch64: Remove redundant zero-extends with LDAR\n\nLike other loads in AArch64, the LDARB,LDARH,LDAR instructions clear out the top part of their\ndestination register and we can thus avoid having to explicitly zero-extend it.\nWe were missing a combine pattern that this patch adds.\n\nFor one of the examples in the testcase we generated:\nload_uint8_t_ext_uint16_t:\n        adrp    x0, .LANCHOR0\n        add     x0, x0, :lo12:.LANCHOR0\n        ldarb   w0, [x0]\n        and     w0, w0, 255\n        ret\n\nbut now generate:\nload_uint8_t_ext_uint16_t:\n        adrp    x0, .LANCHOR0\n        add     x0, x0, :lo12:.LANCHOR0\n        ldarb   w0, [x0]\n        ret\n\nBootstrapped and tested on aarch64-none-linux-gnu.\n\ngcc/ChangeLog:\n\n\t* config/aarch64/atomics.md (*atomic_load<ALLX:mode>_zext<SD_HSDI:mode>):\n\tNew pattern.\n\ngcc/testsuite/ChangeLog:\n\n\t* gcc.target/aarch64/ldar_2.c: New test.", "tree": {"sha": "3fa7370fdc7bf579f8f7c1869cd52a9636e08cbf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3fa7370fdc7bf579f8f7c1869cd52a9636e08cbf"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/33b93ac3f2fb68a2da0d42fd692fe59533f7a84f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/33b93ac3f2fb68a2da0d42fd692fe59533f7a84f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/33b93ac3f2fb68a2da0d42fd692fe59533f7a84f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/33b93ac3f2fb68a2da0d42fd692fe59533f7a84f/comments", "author": {"login": "ktkachov-arm", "id": 74917949, "node_id": "MDQ6VXNlcjc0OTE3OTQ5", "avatar_url": "https://avatars.githubusercontent.com/u/74917949?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ktkachov-arm", "html_url": "https://github.com/ktkachov-arm", "followers_url": "https://api.github.com/users/ktkachov-arm/followers", "following_url": "https://api.github.com/users/ktkachov-arm/following{/other_user}", "gists_url": "https://api.github.com/users/ktkachov-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/ktkachov-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ktkachov-arm/subscriptions", "organizations_url": "https://api.github.com/users/ktkachov-arm/orgs", "repos_url": "https://api.github.com/users/ktkachov-arm/repos", "events_url": "https://api.github.com/users/ktkachov-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/ktkachov-arm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ktkachov-arm", "id": 74917949, "node_id": "MDQ6VXNlcjc0OTE3OTQ5", "avatar_url": "https://avatars.githubusercontent.com/u/74917949?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ktkachov-arm", "html_url": "https://github.com/ktkachov-arm", "followers_url": "https://api.github.com/users/ktkachov-arm/followers", "following_url": "https://api.github.com/users/ktkachov-arm/following{/other_user}", "gists_url": "https://api.github.com/users/ktkachov-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/ktkachov-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ktkachov-arm/subscriptions", "organizations_url": "https://api.github.com/users/ktkachov-arm/orgs", "repos_url": "https://api.github.com/users/ktkachov-arm/repos", "events_url": "https://api.github.com/users/ktkachov-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/ktkachov-arm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "badd1ac23d24664b2258b1db4d49f37a3f60ccca", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/badd1ac23d24664b2258b1db4d49f37a3f60ccca", "html_url": "https://github.com/Rust-GCC/gccrs/commit/badd1ac23d24664b2258b1db4d49f37a3f60ccca"}], "stats": {"total": 44, "additions": 44, "deletions": 0}, "files": [{"sha": "bc95f6d9d15f190a3e33704b4def2860d5f339bd", "filename": "gcc/config/aarch64/atomics.md", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/33b93ac3f2fb68a2da0d42fd692fe59533f7a84f/gcc%2Fconfig%2Faarch64%2Fatomics.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/33b93ac3f2fb68a2da0d42fd692fe59533f7a84f/gcc%2Fconfig%2Faarch64%2Fatomics.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Fatomics.md?ref=33b93ac3f2fb68a2da0d42fd692fe59533f7a84f", "patch": "@@ -640,6 +640,23 @@\n   }\n )\n \n+(define_insn \"*atomic_load<ALLX:mode>_zext<SD_HSDI:mode>\"\n+  [(set (match_operand:SD_HSDI 0 \"register_operand\" \"=r\")\n+\t(zero_extend:SD_HSDI\n+\t  (unspec_volatile:ALLX\n+\t    [(match_operand:ALLX 1 \"aarch64_sync_memory_operand\" \"Q\")\n+\t     (match_operand:SI 2 \"const_int_operand\")]\t\t\t;; model\n+\t   UNSPECV_LDA)))]\n+  \"GET_MODE_SIZE (<SD_HSDI:MODE>mode) > GET_MODE_SIZE (<ALLX:MODE>mode)\"\n+  {\n+    enum memmodel model = memmodel_from_int (INTVAL (operands[2]));\n+    if (is_mm_relaxed (model) || is_mm_consume (model) || is_mm_release (model))\n+      return \"ldr<ALLX:atomic_sfx>\\t%<ALLX:w>0, %1\";\n+    else\n+      return \"ldar<ALLX:atomic_sfx>\\t%<ALLX:w>0, %1\";\n+  }\n+)\n+\n (define_insn \"atomic_load<mode>\"\n   [(set (match_operand:ALLI 0 \"register_operand\" \"=r\")\n     (unspec_volatile:ALLI"}, {"sha": "60b0717271c32d1fcc87358cfbaf2ed6f23fa382", "filename": "gcc/testsuite/gcc.target/aarch64/ldar_2.c", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/33b93ac3f2fb68a2da0d42fd692fe59533f7a84f/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fldar_2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/33b93ac3f2fb68a2da0d42fd692fe59533f7a84f/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fldar_2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fldar_2.c?ref=33b93ac3f2fb68a2da0d42fd692fe59533f7a84f", "patch": "@@ -0,0 +1,27 @@\n+/* Test that the zero-extending patterns for LDAR are used.  */\n+/* { dg-do compile } */\n+/* { dg-options \"-O2\" } */\n+\n+#include <stdint.h>\n+\n+uint8_t v_uint8_t;\n+uint16_t v_uint16_t;\n+uint32_t v_uint32_t;\n+uint64_t v_uint64_t;\n+\n+#define FUNC(FROM, TO)\t\t\t\t\t\t\\\n+TO\t\t\t\t\t\t\t\t\\\n+load_##FROM##_ext_##TO (void)\t\t\t\t\t\\\n+{\t\t\t\t\t\t\t\t\\\n+  return __atomic_load_n (&v_##FROM, __ATOMIC_ACQUIRE);\t\t\\\n+}\n+\n+FUNC (uint8_t, uint16_t)\n+FUNC (uint8_t, uint32_t)\n+FUNC (uint8_t, uint64_t)\n+FUNC (uint16_t, uint32_t)\n+FUNC (uint16_t, uint64_t)\n+FUNC (uint32_t, uint64_t)\n+\n+/* { dg-final { scan-assembler-not {and\\tw[0-9+], w[0-9]+, 255} } } */\n+/* { dg-final { scan-assembler-not {uxtw\\tx[0-9+], w[0-9]+} } } */"}]}