{"sha": "048bf48b3e6a40ca22a289af249093fc28a2974a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDQ4YmY0OGIzZTZhNDBjYTIyYTI4OWFmMjQ5MDkzZmMyOGEyOTc0YQ==", "commit": {"author": {"name": "Jan Hubicka", "email": "jh@suse.cz", "date": "2009-05-02T11:00:59Z"}, "committer": {"name": "Jan Hubicka", "email": "hubicka@gcc.gnu.org", "date": "2009-05-02T11:00:59Z"}, "message": "tree-ssa-coalesce.c (coalesce_cost): Do not take ciritical parameter; update callers.\n\n\t* tree-ssa-coalesce.c (coalesce_cost): Do not take ciritical\n\tparameter; update callers.\n\t(coalesce_cost_edge): EH edges are costier because they needs splitting\n\teven if not critical and even more costier when there are multiple\n\tEH predecestors.\n\nFrom-SVN: r147057", "tree": {"sha": "635d63ac043fefcacd2fa26336dd86826db91f20", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/635d63ac043fefcacd2fa26336dd86826db91f20"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/048bf48b3e6a40ca22a289af249093fc28a2974a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/048bf48b3e6a40ca22a289af249093fc28a2974a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/048bf48b3e6a40ca22a289af249093fc28a2974a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/048bf48b3e6a40ca22a289af249093fc28a2974a/comments", "author": null, "committer": null, "parents": [{"sha": "d5c5f9ab077a5388740a188014b73c8dc80f248b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d5c5f9ab077a5388740a188014b73c8dc80f248b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d5c5f9ab077a5388740a188014b73c8dc80f248b"}], "stats": {"total": 51, "additions": 40, "deletions": 11}, "files": [{"sha": "a177b816c714ae793995f32ca88d63cc5287ce43", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/048bf48b3e6a40ca22a289af249093fc28a2974a/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/048bf48b3e6a40ca22a289af249093fc28a2974a/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=048bf48b3e6a40ca22a289af249093fc28a2974a", "patch": "@@ -1,3 +1,11 @@\n+2009-05-02  Jan Hubicka  <jh@suse.cz>\n+\n+\t* tree-ssa-coalesce.c (coalesce_cost): Do not take ciritical\n+\tparameter; update callers.\n+\t(coalesce_cost_edge): EH edges are costier because they needs splitting\n+\teven if not critical and even more costier when there are multiple\n+\tEH predecestors.\n+\n 2009-05-02  Jan Hubicka  <jh@suse.cz>\n \n \t* except.c (remove_eh_handler_and_replace): Handle updating after"}, {"sha": "ec26a5dc959efbb079b8de30db8d4dc010819798", "filename": "gcc/tree-ssa-coalesce.c", "status": "modified", "additions": 32, "deletions": 11, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/048bf48b3e6a40ca22a289af249093fc28a2974a/gcc%2Ftree-ssa-coalesce.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/048bf48b3e6a40ca22a289af249093fc28a2974a/gcc%2Ftree-ssa-coalesce.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-coalesce.c?ref=048bf48b3e6a40ca22a289af249093fc28a2974a", "patch": "@@ -71,11 +71,10 @@ typedef struct coalesce_list_d\n #define MUST_COALESCE_COST\tINT_MAX\n \n \n-/* Return cost of execution of copy instruction with FREQUENCY\n-   possibly on CRITICAL edge and in HOT basic block.  */\n+/* Return cost of execution of copy instruction with FREQUENCY.  */\n \n static inline int\n-coalesce_cost (int frequency, bool optimize_for_size, bool critical)\n+coalesce_cost (int frequency, bool optimize_for_size)\n {\n   /* Base costs on BB frequencies bounded by 1.  */\n   int cost = frequency;\n@@ -86,9 +85,6 @@ coalesce_cost (int frequency, bool optimize_for_size, bool critical)\n   if (optimize_for_size)\n     cost = 1;\n \n-  /* Inserting copy on critical edge costs more than inserting it elsewhere.  */\n-  if (critical)\n-    cost *= 2;\n   return cost;\n }\n \n@@ -98,7 +94,7 @@ coalesce_cost (int frequency, bool optimize_for_size, bool critical)\n static inline int \n coalesce_cost_bb (basic_block bb)\n {\n-  return coalesce_cost (bb->frequency, optimize_bb_for_size_p (bb), false);\n+  return coalesce_cost (bb->frequency, optimize_bb_for_size_p (bb));\n }\n \n \n@@ -107,12 +103,38 @@ coalesce_cost_bb (basic_block bb)\n static inline int \n coalesce_cost_edge (edge e)\n {\n+  int mult = 1;\n+\n+  /* Inserting copy on critical edge costs more than inserting it elsewhere.  */\n+  if (EDGE_CRITICAL_P (e))\n+    mult = 2;\n   if (e->flags & EDGE_ABNORMAL)\n     return MUST_COALESCE_COST;\n+  if (e->flags & EDGE_EH)\n+    {\n+      edge e2;\n+      edge_iterator ei;\n+      FOR_EACH_EDGE (e2, ei, e->dest->preds)\n+\tif (e2 != e)\n+\t  {\n+\t    /* Putting code on EH edge that leads to BB\n+\t       with multiple predecestors imply splitting of\n+\t       edge too.  */\n+\t    if (mult < 2)\n+\t      mult = 2;\n+\t    /* If there are multiple EH predecestors, we\n+\t       also copy EH regions and produce separate\n+\t       landing pad.  This is expensive.  */\n+\t    if (e2->flags & EDGE_EH)\n+\t      {\n+\t        mult = 5;\n+\t        break;\n+\t      }\n+\t  }\n+    }\n \n   return coalesce_cost (EDGE_FREQUENCY (e), \n-\t\t\toptimize_edge_for_size_p (e), \n-\t\t\tEDGE_CRITICAL_P (e));\n+\t\t\toptimize_edge_for_size_p (e)) * mult;\n }\n \n \n@@ -1094,8 +1116,7 @@ create_outofssa_var_map (coalesce_list_p cl, bitmap used_in_copy)\n \t\t    if (SSA_NAME_VAR (outputs[match]) == SSA_NAME_VAR (input))\n \t\t      {\n \t\t\tcost = coalesce_cost (REG_BR_PROB_BASE, \n-\t\t\t\t\t      optimize_bb_for_size_p (bb),\n-\t\t\t\t\t      false);\n+\t\t\t\t\t      optimize_bb_for_size_p (bb));\n \t\t\tadd_coalesce (cl, v1, v2, cost);\n \t\t\tbitmap_set_bit (used_in_copy, v1);\n \t\t\tbitmap_set_bit (used_in_copy, v2);"}]}