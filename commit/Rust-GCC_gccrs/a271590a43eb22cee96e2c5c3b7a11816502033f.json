{"sha": "a271590a43eb22cee96e2c5c3b7a11816502033f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTI3MTU5MGE0M2ViMjJjZWU5NmUyYzVjM2I3YTExODE2NTAyMDMzZg==", "commit": {"author": {"name": "Paolo Carlini", "email": "paolo.carlini@oracle.com", "date": "2011-09-24T09:55:01Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2011-09-24T09:55:01Z"}, "message": "re PR c++/44267 (SFINAE does not handle down static_cast over virtual inheritance)\n\n/cp\n2011-09-24  Paolo Carlini  <paolo.carlini@oracle.com>\n\n\tPR c++/44267\n\t* class.c (build_base_path): Add a tsubst_flags_t parameter.\n\t(convert_to_base): Adjust call.\n\t* typeck.c (build_class_member_access_expr,\n\tget_member_function_from_ptrfunc, build_static_cast_1): Likewise.\n\t* init.c (dfs_initialize_vtbl_ptrs, emit_mem_initializers): Likewise.\n\t* method.c (do_build_copy_constructor, do_build_copy_assign): Likewise.\n\t* rtti.c (build_dynamic_cast_1): Likewise.\n\t* typeck2.c (build_scoped_ref, build_m_component_ref): Likewise.\n\t* call.c (build_over_call, build_special_member_call): Likewise.\n\t* cvt.c (cp_convert_to_pointer, convert_to_pointer_force,\n\tbuild_up_reference): Likewise.\n\t* cp-tree.h (build_base_path): Adjust declaration.\n\n/testsuite\n2011-09-24  Paolo Carlini  <paolo.carlini@oracle.com>\n\n\tPR c++/44267\n\t* g++.dg/template/sfinae28.C: New.\n\nFrom-SVN: r179141", "tree": {"sha": "37a53ad2a2bb447786b15d918c7a248400241fa4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/37a53ad2a2bb447786b15d918c7a248400241fa4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a271590a43eb22cee96e2c5c3b7a11816502033f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a271590a43eb22cee96e2c5c3b7a11816502033f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a271590a43eb22cee96e2c5c3b7a11816502033f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a271590a43eb22cee96e2c5c3b7a11816502033f/comments", "author": null, "committer": null, "parents": [{"sha": "ee02baae96517c43f9045fe2cb8f89605bbed1bb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ee02baae96517c43f9045fe2cb8f89605bbed1bb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ee02baae96517c43f9045fe2cb8f89605bbed1bb"}], "stats": {"total": 126, "additions": 92, "deletions": 34}, "files": [{"sha": "76000170a49b1c0a6f153e5c7269ca75aee94994", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a271590a43eb22cee96e2c5c3b7a11816502033f/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a271590a43eb22cee96e2c5c3b7a11816502033f/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=a271590a43eb22cee96e2c5c3b7a11816502033f", "patch": "@@ -1,3 +1,19 @@\n+2011-09-24  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+\tPR c++/44267\n+\t* class.c (build_base_path): Add a tsubst_flags_t parameter.\n+\t(convert_to_base): Adjust call.\n+\t* typeck.c (build_class_member_access_expr,\n+\tget_member_function_from_ptrfunc, build_static_cast_1): Likewise.\n+\t* init.c (dfs_initialize_vtbl_ptrs, emit_mem_initializers): Likewise.\n+\t* method.c (do_build_copy_constructor, do_build_copy_assign): Likewise.\n+\t* rtti.c (build_dynamic_cast_1): Likewise.\n+\t* typeck2.c (build_scoped_ref, build_m_component_ref): Likewise.\n+\t* call.c (build_over_call, build_special_member_call): Likewise.\n+\t* cvt.c (cp_convert_to_pointer, convert_to_pointer_force,\n+\tbuild_up_reference): Likewise.\n+\t* cp-tree.h (build_base_path): Adjust declaration.\n+\n 2011-09-23  Jason Merrill  <jason@redhat.com>\n \n \tCore 253 - allow const objects with no initializer or"}, {"sha": "8c99f7a5440abe6540231bd0546408d3855abfe7", "filename": "gcc/cp/call.c", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a271590a43eb22cee96e2c5c3b7a11816502033f/gcc%2Fcp%2Fcall.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a271590a43eb22cee96e2c5c3b7a11816502033f/gcc%2Fcp%2Fcall.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcall.c?ref=a271590a43eb22cee96e2c5c3b7a11816502033f", "patch": "@@ -6449,7 +6449,7 @@ build_over_call (struct z_candidate *cand, int flags, tsubst_flags_t complain)\n       converted_arg = build_base_path (PLUS_EXPR,\n \t\t\t\t       arg,\n \t\t\t\t       cand->conversion_path,\n-\t\t\t\t       1);\n+\t\t\t\t       1, complain);\n       /* Check that the base class is accessible.  */\n       if (!accessible_base_p (TREE_TYPE (argtype),\n \t\t\t      BINFO_TYPE (cand->conversion_path), true))\n@@ -6462,7 +6462,7 @@ build_over_call (struct z_candidate *cand, int flags, tsubst_flags_t complain)\n       base_binfo = lookup_base (TREE_TYPE (TREE_TYPE (converted_arg)),\n \t\t\t\tTREE_TYPE (parmtype), ba_unique, NULL);\n       converted_arg = build_base_path (PLUS_EXPR, converted_arg,\n-\t\t\t\t       base_binfo, 1);\n+\t\t\t\t       base_binfo, 1, complain);\n \n       argarray[j++] = converted_arg;\n       parm = TREE_CHAIN (parm);\n@@ -6706,7 +6706,8 @@ build_over_call (struct z_candidate *cand, int flags, tsubst_flags_t complain)\n       if (TREE_DEPRECATED (fn))\n \twarn_deprecated_use (fn, NULL_TREE);\n \n-      argarray[0] = build_base_path (PLUS_EXPR, argarray[0], binfo, 1);\n+      argarray[0] = build_base_path (PLUS_EXPR, argarray[0], binfo, 1,\n+\t\t\t\t     complain);\n       if (TREE_SIDE_EFFECTS (argarray[0]))\n \targarray[0] = save_expr (argarray[0]);\n       t = build_pointer_type (TREE_TYPE (fn));\n@@ -6916,7 +6917,7 @@ build_special_member_call (tree instance, tree name, VEC(tree,gc) **args,\n \t    /* However, for assignment operators, we must convert\n \t       dynamically if the base is virtual.  */\n \t    instance = build_base_path (PLUS_EXPR, instance,\n-\t\t\t\t\tbinfo, /*nonnull=*/1);\n+\t\t\t\t\tbinfo, /*nonnull=*/1, complain);\n \t}\n     }\n "}, {"sha": "acfe3f23afae60d561c77b23ee6cc4c28c29ebdf", "filename": "gcc/cp/class.c", "status": "modified", "additions": 13, "deletions": 11, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a271590a43eb22cee96e2c5c3b7a11816502033f/gcc%2Fcp%2Fclass.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a271590a43eb22cee96e2c5c3b7a11816502033f/gcc%2Fcp%2Fclass.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fclass.c?ref=a271590a43eb22cee96e2c5c3b7a11816502033f", "patch": "@@ -235,7 +235,8 @@ tree\n build_base_path (enum tree_code code,\n \t\t tree expr,\n \t\t tree binfo,\n-\t\t int nonnull)\n+\t\t int nonnull,\n+\t\t tsubst_flags_t complain)\n {\n   tree v_binfo = NULL_TREE;\n   tree d_binfo = NULL_TREE;\n@@ -276,14 +277,16 @@ build_base_path (enum tree_code code,\n \n   if (code == MINUS_EXPR && v_binfo)\n     {\n-      error (\"cannot convert from base %qT to derived type %qT via virtual base %qT\",\n-\t     BINFO_TYPE (binfo), BINFO_TYPE (d_binfo), BINFO_TYPE (v_binfo));\n+      if (complain & tf_error)\n+\terror (\"cannot convert from base %qT to derived type %qT via \"\n+\t       \"virtual base %qT\", BINFO_TYPE (binfo), BINFO_TYPE (d_binfo),\n+\t       BINFO_TYPE (v_binfo));\n       return error_mark_node;\n     }\n \n   if (!want_pointer)\n     /* This must happen before the call to save_expr.  */\n-    expr = cp_build_addr_expr (expr, tf_warning_or_error);\n+    expr = cp_build_addr_expr (expr, complain);\n   else\n     expr = mark_rvalue_use (expr);\n \n@@ -341,7 +344,7 @@ build_base_path (enum tree_code code,\n \t interesting to the optimizers anyway.  */\n       && !has_empty)\n     {\n-      expr = cp_build_indirect_ref (expr, RO_NULL, tf_warning_or_error);\n+      expr = cp_build_indirect_ref (expr, RO_NULL, complain);\n       expr = build_simple_base_path (expr, binfo);\n       if (want_pointer)\n \texpr = build_address (expr);\n@@ -366,19 +369,18 @@ build_base_path (enum tree_code code,\n \t  t = TREE_TYPE (TYPE_VFIELD (current_class_type));\n \t  t = build_pointer_type (t);\n \t  v_offset = convert (t, current_vtt_parm);\n-\t  v_offset = cp_build_indirect_ref (v_offset, RO_NULL, \n-                                            tf_warning_or_error);\n+\t  v_offset = cp_build_indirect_ref (v_offset, RO_NULL, complain);\n \t}\n       else\n \tv_offset = build_vfield_ref (cp_build_indirect_ref (expr, RO_NULL,\n-                                                            tf_warning_or_error),\n+                                                            complain),\n \t\t\t\t     TREE_TYPE (TREE_TYPE (expr)));\n \n       v_offset = fold_build_pointer_plus (v_offset, BINFO_VPTR_FIELD (v_binfo));\n       v_offset = build1 (NOP_EXPR,\n \t\t\t build_pointer_type (ptrdiff_type_node),\n \t\t\t v_offset);\n-      v_offset = cp_build_indirect_ref (v_offset, RO_NULL, tf_warning_or_error);\n+      v_offset = cp_build_indirect_ref (v_offset, RO_NULL, complain);\n       TREE_CONSTANT (v_offset) = 1;\n \n       offset = convert_to_integer (ptrdiff_type_node,\n@@ -418,7 +420,7 @@ build_base_path (enum tree_code code,\n     null_test = NULL;\n \n   if (!want_pointer)\n-    expr = cp_build_indirect_ref (expr, RO_NULL, tf_warning_or_error);\n+    expr = cp_build_indirect_ref (expr, RO_NULL, complain);\n \n  out:\n   if (null_test)\n@@ -523,7 +525,7 @@ convert_to_base (tree object, tree type, bool check_access, bool nonnull,\n   if (!binfo || binfo == error_mark_node)\n     return error_mark_node;\n \n-  return build_base_path (PLUS_EXPR, object, binfo, nonnull);\n+  return build_base_path (PLUS_EXPR, object, binfo, nonnull, complain);\n }\n \n /* EXPR is an expression with unqualified class type.  BASE is a base"}, {"sha": "f2c921192beb372ccef7775291288c4791d5fa3b", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a271590a43eb22cee96e2c5c3b7a11816502033f/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a271590a43eb22cee96e2c5c3b7a11816502033f/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=a271590a43eb22cee96e2c5c3b7a11816502033f", "patch": "@@ -4790,7 +4790,7 @@ extern void validate_conversion_obstack\t\t(void);\n /* in class.c */\n extern tree build_vfield_ref\t\t\t(tree, tree);\n extern tree build_base_path\t\t\t(enum tree_code, tree,\n-\t\t\t\t\t\t tree, int);\n+\t\t\t\t\t\t tree, int, tsubst_flags_t);\n extern tree convert_to_base\t\t\t(tree, tree, bool, bool,\n \t\t\t\t\t\t tsubst_flags_t);\n extern tree convert_to_base_statically\t\t(tree, tree);"}, {"sha": "3e618d320adc4042a28d492182b4cc558f4b31c6", "filename": "gcc/cp/cvt.c", "status": "modified", "additions": 8, "deletions": 5, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a271590a43eb22cee96e2c5c3b7a11816502033f/gcc%2Fcp%2Fcvt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a271590a43eb22cee96e2c5c3b7a11816502033f/gcc%2Fcp%2Fcvt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcvt.c?ref=a271590a43eb22cee96e2c5c3b7a11816502033f", "patch": "@@ -1,7 +1,7 @@\n /* Language-level data type conversion for GNU C++.\n    Copyright (C) 1987, 1988, 1992, 1993, 1994, 1995, 1996, 1997, 1998,\n-   1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010\n-   Free Software Foundation, Inc.\n+   1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010,\n+   2011 Free Software Foundation, Inc.\n    Hacked by Michael Tiemann (tiemann@cygnus.com)\n \n This file is part of GCC.\n@@ -157,7 +157,8 @@ cp_convert_to_pointer (tree type, tree expr)\n \t  if (binfo || same_p)\n \t    {\n \t      if (binfo)\n-\t\texpr = build_base_path (code, expr, binfo, 0);\n+\t\texpr = build_base_path (code, expr, binfo, 0,\n+\t\t\t\t\ttf_warning_or_error);\n \t      /* Add any qualifier conversions.  */\n \t      return build_nop (type, expr);\n \t    }\n@@ -275,7 +276,8 @@ convert_to_pointer_force (tree type, tree expr)\n \t    return error_mark_node;\n \t  if (binfo)\n \t    {\n-\t      expr = build_base_path (code, expr, binfo, 0);\n+\t      expr = build_base_path (code, expr, binfo, 0,\n+\t\t\t\t      tf_warning_or_error);\n \t      if (expr == error_mark_node)\n \t\t return error_mark_node;\n \t      /* Add any qualifier conversions.  */\n@@ -341,7 +343,8 @@ build_up_reference (tree type, tree arg, int flags, tree decl)\n \treturn error_mark_node;\n       if (binfo == NULL_TREE)\n \treturn error_not_base_type (target_type, argtype);\n-      rval = build_base_path (PLUS_EXPR, rval, binfo, 1);\n+      rval = build_base_path (PLUS_EXPR, rval, binfo, 1,\n+\t\t\t      tf_warning_or_error);\n     }\n   else\n     rval"}, {"sha": "ac3221e30d0b74d7af365e1b81a11e274e0d193b", "filename": "gcc/cp/init.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a271590a43eb22cee96e2c5c3b7a11816502033f/gcc%2Fcp%2Finit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a271590a43eb22cee96e2c5c3b7a11816502033f/gcc%2Fcp%2Finit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Finit.c?ref=a271590a43eb22cee96e2c5c3b7a11816502033f", "patch": "@@ -100,7 +100,8 @@ dfs_initialize_vtbl_ptrs (tree binfo, void *data)\n     {\n       tree base_ptr = TREE_VALUE ((tree) data);\n \n-      base_ptr = build_base_path (PLUS_EXPR, base_ptr, binfo, /*nonnull=*/1);\n+      base_ptr = build_base_path (PLUS_EXPR, base_ptr, binfo, /*nonnull=*/1,\n+\t\t\t\t  tf_warning_or_error);\n \n       expand_virtual_init (binfo, base_ptr);\n     }\n@@ -963,7 +964,7 @@ emit_mem_initializers (tree mem_inits)\n \t  tree base_addr;\n \n \t  base_addr = build_base_path (PLUS_EXPR, current_class_ptr,\n-\t\t\t\t       subobject, 1);\n+\t\t\t\t       subobject, 1, tf_warning_or_error);\n \t  expand_aggr_init_1 (subobject, NULL_TREE,\n \t\t\t      cp_build_indirect_ref (base_addr, RO_NULL,\n                                                      tf_warning_or_error),"}, {"sha": "88bb2a9ef21cffb561ca60c6bc10369b45ee0e34", "filename": "gcc/cp/method.c", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a271590a43eb22cee96e2c5c3b7a11816502033f/gcc%2Fcp%2Fmethod.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a271590a43eb22cee96e2c5c3b7a11816502033f/gcc%2Fcp%2Fmethod.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fmethod.c?ref=a271590a43eb22cee96e2c5c3b7a11816502033f", "patch": "@@ -516,7 +516,8 @@ do_build_copy_constructor (tree fndecl)\n       for (vbases = CLASSTYPE_VBASECLASSES (current_class_type), i = 0;\n \t   VEC_iterate (tree, vbases, i, binfo); i++)\n \t{\n-\t  init = build_base_path (PLUS_EXPR, parm, binfo, 1);\n+\t  init = build_base_path (PLUS_EXPR, parm, binfo, 1,\n+\t\t\t\t  tf_warning_or_error);\n \t  if (move_p)\n \t    init = move (init);\n \t  member_init_list\n@@ -531,7 +532,8 @@ do_build_copy_constructor (tree fndecl)\n \t  if (BINFO_VIRTUAL_P (base_binfo))\n \t    continue;\n \n-\t  init = build_base_path (PLUS_EXPR, parm, base_binfo, 1);\n+\t  init = build_base_path (PLUS_EXPR, parm, base_binfo, 1,\n+\t\t\t\t  tf_warning_or_error);\n \t  if (move_p)\n \t    init = move (init);\n \t  member_init_list\n@@ -624,7 +626,8 @@ do_build_copy_assign (tree fndecl)\n \n \t  /* We must convert PARM directly to the base class\n \t     explicitly since the base class may be ambiguous.  */\n-\t  converted_parm = build_base_path (PLUS_EXPR, parm, base_binfo, 1);\n+\t  converted_parm = build_base_path (PLUS_EXPR, parm, base_binfo, 1,\n+\t\t\t\t\t    tf_warning_or_error);\n \t  if (move_p)\n \t    converted_parm = move (converted_parm);\n \t  /* Call the base class assignment operator.  */"}, {"sha": "818b8d0eee4ca30b289d5ce3135548fb19fadf31", "filename": "gcc/cp/rtti.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a271590a43eb22cee96e2c5c3b7a11816502033f/gcc%2Fcp%2Frtti.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a271590a43eb22cee96e2c5c3b7a11816502033f/gcc%2Fcp%2Frtti.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Frtti.c?ref=a271590a43eb22cee96e2c5c3b7a11816502033f", "patch": "@@ -1,6 +1,6 @@\n /* RunTime Type Identification\n    Copyright (C) 1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004,\n-   2005, 2006, 2007, 2008, 2009, 2010\n+   2005, 2006, 2007, 2008, 2009, 2010, 2011\n    Free Software Foundation, Inc.\n    Mostly written by Jason Merrill (jason@cygnus.com).\n \n@@ -616,7 +616,7 @@ build_dynamic_cast_1 (tree type, tree expr, tsubst_flags_t complain)\n     if (binfo)\n       {\n \texpr = build_base_path (PLUS_EXPR, convert_from_reference (expr),\n-\t\t\t\tbinfo, 0);\n+\t\t\t\tbinfo, 0, complain);\n \tif (TREE_CODE (exprtype) == POINTER_TYPE)\n \t  expr = rvalue (expr);\n \treturn expr;"}, {"sha": "955e37a28893d596c9e05defa8b252ac3ab7234a", "filename": "gcc/cp/typeck.c", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a271590a43eb22cee96e2c5c3b7a11816502033f/gcc%2Fcp%2Ftypeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a271590a43eb22cee96e2c5c3b7a11816502033f/gcc%2Fcp%2Ftypeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftypeck.c?ref=a271590a43eb22cee96e2c5c3b7a11816502033f", "patch": "@@ -2221,7 +2221,7 @@ build_class_member_access_expr (tree object, tree member,\n \n \t  /* Convert to the base.  */\n \t  object = build_base_path (PLUS_EXPR, object, binfo,\n-\t\t\t\t    /*nonnull=*/1);\n+\t\t\t\t    /*nonnull=*/1, complain);\n \t  /* If we found the base successfully then we should be able\n \t     to convert to it successfully.  */\n \t  gcc_assert (object != error_mark_node);\n@@ -3073,7 +3073,7 @@ get_member_function_from_ptrfunc (tree *instance_ptrptr, tree function)\n \t  basetype = lookup_base (TREE_TYPE (TREE_TYPE (instance_ptr)),\n \t\t\t\t  basetype, ba_check, NULL);\n \t  instance_ptr = build_base_path (PLUS_EXPR, instance_ptr, basetype,\n-\t\t\t\t\t  1);\n+\t\t\t\t\t  1, tf_warning_or_error);\n \t  if (instance_ptr == error_mark_node)\n \t    return error_mark_node;\n \t}\n@@ -5772,7 +5772,7 @@ build_static_cast_1 (tree type, tree expr, bool c_cast_p,\n       /* Convert from \"B*\" to \"D*\".  This function will check that \"B\"\n \t is not a virtual base of \"D\".  */\n       expr = build_base_path (MINUS_EXPR, build_address (expr),\n-\t\t\t      base, /*nonnull=*/false);\n+\t\t\t      base, /*nonnull=*/false, complain);\n       /* Convert the pointer to a reference -- but then remember that\n \t there are no expressions with reference type in C++.\n \n@@ -5874,7 +5874,8 @@ build_static_cast_1 (tree type, tree expr, bool c_cast_p,\n       base = lookup_base (TREE_TYPE (type), TREE_TYPE (intype),\n \t\t\t  c_cast_p ? ba_unique : ba_check,\n \t\t\t  NULL);\n-      expr = build_base_path (MINUS_EXPR, expr, base, /*nonnull=*/false);\n+      expr = build_base_path (MINUS_EXPR, expr, base, /*nonnull=*/false,\n+\t\t\t      complain);\n       return cp_fold_convert(type, expr);\n     }\n "}, {"sha": "96b95c2b5cebd395ccd37b3890229ed273ace4b5", "filename": "gcc/cp/typeck2.c", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a271590a43eb22cee96e2c5c3b7a11816502033f/gcc%2Fcp%2Ftypeck2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a271590a43eb22cee96e2c5c3b7a11816502033f/gcc%2Fcp%2Ftypeck2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftypeck2.c?ref=a271590a43eb22cee96e2c5c3b7a11816502033f", "patch": "@@ -1398,7 +1398,8 @@ build_scoped_ref (tree datum, tree basetype, tree* binfo_p)\n     }\n \n   *binfo_p = binfo;\n-  return build_base_path (PLUS_EXPR, datum, binfo, 1);\n+  return build_base_path (PLUS_EXPR, datum, binfo, 1,\n+\t\t\t  tf_warning_or_error);\n }\n \n /* Build a reference to an object specified by the C++ `->' operator.\n@@ -1565,7 +1566,8 @@ build_m_component_ref (tree datum, tree component)\n \n       /* Convert object to the correct base.  */\n       if (binfo)\n-\tdatum = build_base_path (PLUS_EXPR, datum, binfo, 1);\n+\tdatum = build_base_path (PLUS_EXPR, datum, binfo, 1,\n+\t\t\t\t tf_warning_or_error);\n \n       /* Build an expression for \"object + offset\" where offset is the\n \t value stored in the pointer-to-data-member.  */"}, {"sha": "c5175faf4bc47779aa710df073f73e491ca058d2", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a271590a43eb22cee96e2c5c3b7a11816502033f/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a271590a43eb22cee96e2c5c3b7a11816502033f/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=a271590a43eb22cee96e2c5c3b7a11816502033f", "patch": "@@ -1,3 +1,8 @@\n+2011-09-24  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+\tPR c++/44267\n+\t* g++.dg/template/sfinae28.C: New.\n+\n 2011-09-23  Ian Lance Taylor  <iant@google.com>\n \n \t* go.test/go-test.exp (errchk): Handle more cases of getting"}, {"sha": "1bd9c2cd3f1da1e06f14d2b504fd3c5d57e67a1d", "filename": "gcc/testsuite/g++.dg/template/sfinae28.C", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a271590a43eb22cee96e2c5c3b7a11816502033f/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fsfinae28.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a271590a43eb22cee96e2c5c3b7a11816502033f/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fsfinae28.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fsfinae28.C?ref=a271590a43eb22cee96e2c5c3b7a11816502033f", "patch": "@@ -0,0 +1,24 @@\n+// Origin: PR c++/44267\n+\n+struct B {};\n+struct D : B {};\n+struct VD : virtual B {};\n+\n+template <class T> T create();\n+\n+typedef char one[1];\n+typedef char two[2];\n+\n+template <class D, class B>\n+one& f(char (*)[sizeof(static_cast<D>(create<B>()))]);\n+\n+template <class D, class B>\n+two& f(...);\n+\n+int main()\n+{\n+   f<D*, int>(0);\n+   f<D*, B*>(0);\n+   f<VD*, B*>(0);\n+   return 0;\n+}"}]}