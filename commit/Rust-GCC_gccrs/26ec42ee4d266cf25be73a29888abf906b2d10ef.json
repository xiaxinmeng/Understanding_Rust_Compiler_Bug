{"sha": "26ec42ee4d266cf25be73a29888abf906b2d10ef", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjZlYzQyZWU0ZDI2NmNmMjViZTczYTI5ODg4YWJmOTA2YjJkMTBlZg==", "commit": {"author": {"name": "Neil Booth", "email": "neil@daikokuya.demon.co.uk", "date": "2001-01-28T11:22:23Z"}, "committer": {"name": "Neil Booth", "email": "neil@gcc.gnu.org", "date": "2001-01-28T11:22:23Z"}, "message": "cpphash.c (_cpp_cleanup_hashtable, [...]): Don't set fe_value.\n\n        * cpphash.c (_cpp_cleanup_hashtable, _cpp_lookup_with_hash)\n        : Don't set fe_value.\n        * cpplib.h (AVOID_LPASTE): New flag.\n        (struct cpp_hashnode): Remove fe_value.\n        * cpplex.c (cpp_avoid_paste): Don't paste '.' with a number.\n        * cppmacro.c (builtin_macro): Don't set flags here.\n        (replace_args): Set AVOID_LPASTE flag on first token of an\n        argument, and the token following it.\n        (cpp_get_token): Set AVOID_LPASTE flag on first token of a\n        macro expansion, and on the token following it.  Do it for\n        builtins too.\n        * cppmain.c (scan_buffer): Avoid pasting only flagged tokens.\n\nFrom-SVN: r39318", "tree": {"sha": "1d89d6c0190e47c079ba3aba7080beb23ee2e05a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1d89d6c0190e47c079ba3aba7080beb23ee2e05a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/26ec42ee4d266cf25be73a29888abf906b2d10ef", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/26ec42ee4d266cf25be73a29888abf906b2d10ef", "html_url": "https://github.com/Rust-GCC/gccrs/commit/26ec42ee4d266cf25be73a29888abf906b2d10ef", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/26ec42ee4d266cf25be73a29888abf906b2d10ef/comments", "author": null, "committer": null, "parents": [{"sha": "6001735ea0da3d5d89a8f249a79fc8198ff28513", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6001735ea0da3d5d89a8f249a79fc8198ff28513", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6001735ea0da3d5d89a8f249a79fc8198ff28513"}], "stats": {"total": 62, "additions": 41, "deletions": 21}, "files": [{"sha": "90f2f0685176624f37e89d3a9e1a270083f5e25b", "filename": "gcc/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/26ec42ee4d266cf25be73a29888abf906b2d10ef/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/26ec42ee4d266cf25be73a29888abf906b2d10ef/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=26ec42ee4d266cf25be73a29888abf906b2d10ef", "patch": "@@ -1,3 +1,18 @@\n+2001-01-28  Neil Booth  <neil@daikokuya.demon.co.uk>\n+\n+        * cpphash.c (_cpp_cleanup_hashtable, _cpp_lookup_with_hash)\n+        : Don't set fe_value.\n+        * cpplib.h (AVOID_LPASTE): New flag. \n+        (struct cpp_hashnode): Remove fe_value.\n+        * cpplex.c (cpp_avoid_paste): Don't paste '.' with a number.\n+        * cppmacro.c (builtin_macro): Don't set flags here.\n+        (replace_args): Set AVOID_LPASTE flag on first token of an\n+        argument, and the token following it.\n+        (cpp_get_token): Set AVOID_LPASTE flag on first token of a\n+        macro expansion, and on the token following it.  Do it for\n+        builtins too.\n+        * cppmain.c (scan_buffer): Avoid pasting only flagged tokens.\n+\n 2001-01-27  Richard Henderson  <rth@redhat.com>\n \n \t* config/alpha/t-ieee: Remove multilibbing."}, {"sha": "d4c9e376dd959206a032ed4bbfc61441eedbf980", "filename": "gcc/cpphash.c", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/26ec42ee4d266cf25be73a29888abf906b2d10ef/gcc%2Fcpphash.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/26ec42ee4d266cf25be73a29888abf906b2d10ef/gcc%2Fcpphash.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcpphash.c?ref=26ec42ee4d266cf25be73a29888abf906b2d10ef", "patch": "@@ -73,10 +73,7 @@ _cpp_cleanup_hashtable (pfile)\n   do\n     {\n       if (*p)\n-\t{\n-\t  _cpp_free_definition (*p);\n-\t  (*p)->fe_value = 0;  /* expose the node to GC */\n-\t}\n+\t_cpp_free_definition (*p);\n     }\n   while (++p < limit);\n \n@@ -169,7 +166,6 @@ _cpp_lookup_with_hash (pfile, len, hash)\n   entry = entries[index];\n   entry->type = NT_VOID;\n   entry->flags = 0;\n-  entry->fe_value = 0;\n   entry->directive_index = 0;\n   entry->arg_index = 0;\n   entry->length = len;"}, {"sha": "f9431f812fd489df55b14aa4d756fe7cbf6cad06", "filename": "gcc/cpplex.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/26ec42ee4d266cf25be73a29888abf906b2d10ef/gcc%2Fcpplex.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/26ec42ee4d266cf25be73a29888abf906b2d10ef/gcc%2Fcpplex.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcpplex.c?ref=26ec42ee4d266cf25be73a29888abf906b2d10ef", "patch": "@@ -1656,7 +1656,7 @@ cpp_avoid_paste (pfile, token1, token2)\n     case CPP_OR:\treturn c == '|';\n     case CPP_COLON:\treturn c == ':' || c == '>';\n     case CPP_DEREF:\treturn c == '*';\n-    case CPP_DOT:\treturn c == '.' || c == '%';\n+    case CPP_DOT:\treturn c == '.' || c == '%' || b == CPP_NUMBER;\n     case CPP_HASH:\treturn c == '#' || c == '%'; /* Digraph form.  */\n     case CPP_NAME:\treturn ((b == CPP_NUMBER\n \t\t\t\t && name_p (pfile, &token2->val.str))"}, {"sha": "9d0b8e253fb4c940cc3ee7933315122650b1ea05", "filename": "gcc/cpplib.h", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/26ec42ee4d266cf25be73a29888abf906b2d10ef/gcc%2Fcpplib.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/26ec42ee4d266cf25be73a29888abf906b2d10ef/gcc%2Fcpplib.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcpplib.h?ref=26ec42ee4d266cf25be73a29888abf906b2d10ef", "patch": "@@ -166,6 +166,7 @@ struct cpp_string\n #define PASTE_LEFT\t(1 << 3) /* If on LHS of a ## operator.  */\n #define NAMED_OP\t(1 << 4) /* C++ named operators.  */\n #define NO_EXPAND\t(1 << 5) /* Do not macro-expand this token.  */\n+#define AVOID_LPASTE\t(1 << 6) /* Check left for accidental pastes.  */\n \n /* A preprocessing token.  This has been carefully packed and should\n    occupy 12 bytes on 32-bit hosts and 16 bytes on 64-bit hosts.  */\n@@ -487,8 +488,6 @@ struct cpp_hashnode\n     enum cpp_ttype operator;\t\t/* Code for a named operator.  */\n     enum builtin_type builtin;\t\t/* Code for a builtin macro.  */\n   } value;\n-\n-  union tree_node *fe_value;\t\t/* Front end value.  */\n };\n \n /* Call this first to get a handle to pass to other functions.  */"}, {"sha": "aea7e5dab6d43a4e61796f91e84cc49d23c8614f", "filename": "gcc/cppmacro.c", "status": "modified", "additions": 21, "deletions": 11, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/26ec42ee4d266cf25be73a29888abf906b2d10ef/gcc%2Fcppmacro.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/26ec42ee4d266cf25be73a29888abf906b2d10ef/gcc%2Fcppmacro.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcppmacro.c?ref=26ec42ee4d266cf25be73a29888abf906b2d10ef", "patch": "@@ -146,7 +146,6 @@ builtin_macro (pfile, token)\n      cpp_reader *pfile;\n      cpp_token *token;\n {\n-  unsigned char flags = token->flags & PREV_WHITE;\n   cpp_hashnode *node = token->val.node;\n \n   switch (node->value.builtin)\n@@ -220,8 +219,6 @@ builtin_macro (pfile, token)\n       cpp_ice (pfile, \"invalid builtin macro \\\"%s\\\"\", node->name);\n       break;\n     }\n-\n-  token->flags = flags;\n }\n \n /* Used by cpperror.c to obtain the correct line and column to report\n@@ -671,13 +668,13 @@ enter_macro_context (pfile, node)\n       list.limit = macro->expansion + macro->count;\n     }\n \n+  /* Only push a macro context for non-empty replacement lists.  */\n   if (list.first != list.limit)\n     {\n-      /* Push its context.  */\n       context = next_context (pfile);\n       context->list = list;\n       context->macro = macro;\n-\n+      \n       /* Disable the macro within its expansion.  */\n       macro->disabled = 1;\n     }\n@@ -712,6 +709,7 @@ replace_args (pfile, macro, args, list)\n      macro_arg *args;\n      struct toklist *list;\n {\n+  unsigned char flags = 0;\n   unsigned int i, total;\n   const cpp_token *src, *limit;\n   cpp_token *dest;\n@@ -804,11 +802,20 @@ replace_args (pfile, macro, args, list)\n \t    /* The last token gets the PASTE_LEFT of the CPP_MACRO_ARG.  */\n \t    dest[count - 1].flags |= src->flags & PASTE_LEFT;\n \n+\t    dest[0].flags |= AVOID_LPASTE;\n \t    dest += count;\n \t  }\n+\n+\t/* The token after the argument must avoid an accidental paste.  */\n+\tflags = AVOID_LPASTE;\n       }\n     else\n-      *dest++ = *src;\n+      {\n+\t*dest = *src;\n+\tdest->flags |= flags;\n+\tdest++;\n+\tflags = 0;\n+      }\n \n   list->limit = dest;\n \n@@ -913,8 +920,6 @@ cpp_get_token (pfile, token)\n       else if (context->list.first != context->list.limit)\n \t{\n \t  *token = *context->list.first++;\n-\t  token->flags |= flags;\n-\t  flags = 0;\n \t  /* PASTE_LEFT tokens can only appear in macro expansions.  */\n \t  if (token->flags & PASTE_LEFT)\n \t    paste_all_tokens (pfile, token);\n@@ -923,6 +928,8 @@ cpp_get_token (pfile, token)\n \t{\n \t  if (context->macro)\n \t    {\n+\t      /* Avoid accidental paste at the end of a macro.  */\n+\t      flags |= AVOID_LPASTE;\n \t      _cpp_pop_context (pfile);\n \t      continue;\n \t    }\n@@ -932,6 +939,8 @@ cpp_get_token (pfile, token)\n \t  return;\n \t}\n \n+      token->flags |= flags;\n+      flags = 0;\n       if (token->type != CPP_NAME)\n \tbreak;\n \n@@ -945,15 +954,16 @@ cpp_get_token (pfile, token)\n \t  /* Macros invalidate controlling macros.  */\n \t  pfile->mi_state = MI_FAILED;\n \n+\t  /* Remember PREV_WHITE and avoid an accidental paste.  */\n+\t  flags = (token->flags & PREV_WHITE) | AVOID_LPASTE;\n+\n \t  if (node->flags & NODE_BUILTIN)\n \t    {\n \t      builtin_macro (pfile, token);\n+\t      token->flags = flags;\n \t      break;\n \t    }\n \n-\t  /* Merge PREV_WHITE of tokens.  */\n-\t  flags = token->flags & PREV_WHITE;\n-\n \t  if (node->value.macro->disabled)\n \t    token->flags |= NO_EXPAND;\n \t  else if (enter_macro_context (pfile, node))"}, {"sha": "13bbbdd3c4feddfc871c6556b8d8e4c88b769a0d", "filename": "gcc/cppmain.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/26ec42ee4d266cf25be73a29888abf906b2d10ef/gcc%2Fcppmain.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/26ec42ee4d266cf25be73a29888abf906b2d10ef/gcc%2Fcppmain.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcppmain.c?ref=26ec42ee4d266cf25be73a29888abf906b2d10ef", "patch": "@@ -235,8 +235,8 @@ scan_buffer (pfile)\n \t\t}\n \t    }\n \t  else if (print.printed\n-\t\t   && ! (token->flags & PREV_WHITE)\n-\t\t   && options->lang != CLK_ASM\n+\t\t   && (token->flags & (PREV_WHITE | AVOID_LPASTE))\n+\t\t       == AVOID_LPASTE\n \t\t   && cpp_avoid_paste (pfile, &tokens[1 - index], token))\n \t    token->flags |= PREV_WHITE;\n "}]}