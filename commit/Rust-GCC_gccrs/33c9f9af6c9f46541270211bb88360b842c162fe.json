{"sha": "33c9f9af6c9f46541270211bb88360b842c162fe", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzNjOWY5YWY2YzlmNDY1NDEyNzAyMTFiYjg4MzYwYjg0MmMxNjJmZQ==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2014-07-30T14:49:38Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2014-07-30T14:49:38Z"}, "message": "[multiple changes]\n\n2014-07-30  Ed Schonberg  <schonberg@adacore.com>\n\n\t* sem_ch13.adb (Analyze_Aspect_Specifications): Default_Value and\n\tDefault_Component_Value can only be specified for scalar type or\n\tarrays of scalar types respectively.  This legality check must\n\tbe performed at the point the aspect is analyzed, in order to\n\treject aspect specifications that apply to a partial view.\n\n2014-07-30  Thomas Quinot  <quinot@adacore.com>\n\n\t* freeze.adb: Minor reformatting.\n\n2014-07-30  Robert Dewar  <dewar@adacore.com>\n\n\t* exp_attr.adb (Expand_Attribute, case First/Last): Don't expand in\n\tcodepeer mode.\n\nFrom-SVN: r213289", "tree": {"sha": "4b828cf64b882dd7dcfccf5bf6a443d7b1c2a70f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4b828cf64b882dd7dcfccf5bf6a443d7b1c2a70f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/33c9f9af6c9f46541270211bb88360b842c162fe", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/33c9f9af6c9f46541270211bb88360b842c162fe", "html_url": "https://github.com/Rust-GCC/gccrs/commit/33c9f9af6c9f46541270211bb88360b842c162fe", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/33c9f9af6c9f46541270211bb88360b842c162fe/comments", "author": null, "committer": null, "parents": [{"sha": "21de9325dd7965f66607f6e4deca052fab06924e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/21de9325dd7965f66607f6e4deca052fab06924e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/21de9325dd7965f66607f6e4deca052fab06924e"}], "stats": {"total": 120, "additions": 79, "deletions": 41}, "files": [{"sha": "2fda6e88e4c17ecf3b6389d0471d9ad97d520ca5", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/33c9f9af6c9f46541270211bb88360b842c162fe/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/33c9f9af6c9f46541270211bb88360b842c162fe/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=33c9f9af6c9f46541270211bb88360b842c162fe", "patch": "@@ -1,3 +1,20 @@\n+2014-07-30  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* sem_ch13.adb (Analyze_Aspect_Specifications): Default_Value and\n+\tDefault_Component_Value can only be specified for scalar type or\n+\tarrays of scalar types respectively.  This legality check must\n+\tbe performed at the point the aspect is analyzed, in order to\n+\treject aspect specifications that apply to a partial view.\n+\n+2014-07-30  Thomas Quinot  <quinot@adacore.com>\n+\n+\t* freeze.adb: Minor reformatting.\n+\n+2014-07-30  Robert Dewar  <dewar@adacore.com>\n+\n+\t* exp_attr.adb (Expand_Attribute, case First/Last): Don't expand in\n+\tcodepeer mode.\n+\n 2014-07-30  Ed Schonberg  <schonberg@adacore.com>\n \n \t* freeze.adb (Check_Expression_Function): At the freeze point"}, {"sha": "b121fce43a0cfe38bf4217a55d5f91f6f3d0dddb", "filename": "gcc/ada/exp_attr.adb", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/33c9f9af6c9f46541270211bb88360b842c162fe/gcc%2Fada%2Fexp_attr.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/33c9f9af6c9f46541270211bb88360b842c162fe/gcc%2Fada%2Fexp_attr.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_attr.adb?ref=33c9f9af6c9f46541270211bb88360b842c162fe", "patch": "@@ -2884,9 +2884,11 @@ package body Exp_Attr is\n          --  For scalar type, if low bound is a reference to an entity, just\n          --  replace with a direct reference. Note that we can only have a\n          --  reference to a constant entity at this stage, anything else would\n-         --  have already been rewritten.\n+         --  have already been rewritten. We do not do this rewriting if we\n+         --  are in CodePeer mode, since CodePeer prefers to see the explicit\n+         --  First attribute reference.\n \n-         elsif Is_Scalar_Type (Ptyp) then\n+         elsif Is_Scalar_Type (Ptyp) and then not CodePeer_Mode then\n             declare\n                Lo : constant Node_Id := Type_Low_Bound (Ptyp);\n             begin\n@@ -3560,9 +3562,11 @@ package body Exp_Attr is\n          --  For scalar type, if low bound is a reference to an entity, just\n          --  replace with a direct reference. Note that we can only have a\n          --  reference to a constant entity at this stage, anything else would\n-         --  have already been rewritten.\n+         --  have already been rewritten. We do not do this rewriting if we\n+         --  are in CodePeer mode, since CodePeer prefers to see the explicit\n+         --  Last attribute reference.\n \n-         elsif Is_Scalar_Type (Ptyp) then\n+         elsif Is_Scalar_Type (Ptyp) and then not CodePeer_Mode then\n             declare\n                Hi : constant Node_Id := Type_High_Bound (Ptyp);\n             begin"}, {"sha": "5864dfceb0d41b3fa864d1e6018ec1f8541464ad", "filename": "gcc/ada/freeze.adb", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/33c9f9af6c9f46541270211bb88360b842c162fe/gcc%2Fada%2Ffreeze.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/33c9f9af6c9f46541270211bb88360b842c162fe/gcc%2Fada%2Ffreeze.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Ffreeze.adb?ref=33c9f9af6c9f46541270211bb88360b842c162fe", "patch": "@@ -108,8 +108,8 @@ package body Freeze is\n    procedure Check_Expression_Function (N : Node_Id; Nam : Entity_Id);\n    --  When an expression function is frozen by a use of it, the expression\n    --  itself is frozen. Check that the expression does not include references\n-   --  to deferred constants without completion.  We report this at the\n-   --  freeze point of the function, to provide a better error message.\n+   --  to deferred constants without completion. We report this at the freeze\n+   --  point of the function, to provide a better error message.\n \n    procedure Check_Strict_Alignment (E : Entity_Id);\n    --  E is a base type. If E is tagged or has a component that is aliased"}, {"sha": "614329914e55214c5aa607b2fad5871665790bac", "filename": "gcc/ada/sem_ch13.adb", "status": "modified", "additions": 52, "deletions": 35, "changes": 87, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/33c9f9af6c9f46541270211bb88360b842c162fe/gcc%2Fada%2Fsem_ch13.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/33c9f9af6c9f46541270211bb88360b842c162fe/gcc%2Fada%2Fsem_ch13.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch13.adb?ref=33c9f9af6c9f46541270211bb88360b842c162fe", "patch": "@@ -2618,10 +2618,28 @@ package body Sem_Ch13 is\n                --  Case 3a: The aspects listed below don't correspond to\n                --  pragmas/attributes but do require delayed analysis.\n \n-               --  Default_Value, Default_Component_Value\n+               --  Default_Value can only apply to a scalar type\n+\n+               when Aspect_Default_Value =>\n+                  if not Is_Scalar_Type (E) then\n+                     Error_Msg_N\n+                       (\"aspect Default_Value must apply to a scalar_Type\", N);\n+                  end if;\n+\n+                  Aitem := Empty;\n+\n+               --  Default_Component_Value can only apply to an array type\n+               --  with scalar components.\n+\n+               when Aspect_Default_Component_Value =>\n+                  if not (Is_Array_Type (E)\n+                            and then\n+                          Is_Scalar_Type (Component_Type (E)))\n+                  then\n+                     Error_Msg_N (\"aspect Default_Component_Value can only \"\n+                       & \"apply to an array of scalar components\", N);\n+                  end if;\n \n-               when Aspect_Default_Value           |\n-                    Aspect_Default_Component_Value =>\n                   Aitem := Empty;\n \n                --  Case 3b: The aspects listed below don't correspond to\n@@ -2692,7 +2710,7 @@ package body Sem_Ch13 is\n                   --  or precondition error).\n \n                   --  We do not do this for Pre'Class, since we have to put\n-                  --  these conditions together in a complex OR expression\n+                  --  these conditions together in a complex OR expression.\n \n                   --  We do not do this in ASIS mode, as ASIS relies on the\n                   --  original node representing the complete expression, when\n@@ -2716,7 +2734,7 @@ package body Sem_Ch13 is\n \n                   --  Build the precondition/postcondition pragma\n \n-                  --  Add note about why we do NOT need Copy_Tree here ???\n+                  --  Add note about why we do NOT need Copy_Tree here???\n \n                   Make_Aitem_Pragma\n                     (Pragma_Argument_Associations => New_List (\n@@ -2776,9 +2794,9 @@ package body Sem_Ch13 is\n                   end if;\n \n                   --  Make pragma expressions refer to the original aspect\n-                  --  expressions through the Original_Node link. This is\n-                  --  used in semantic analysis for ASIS mode, so that the\n-                  --  original expression also gets analyzed.\n+                  --  expressions through the Original_Node link. This is used\n+                  --  in semantic analysis for ASIS mode, so that the original\n+                  --  expression also gets analyzed.\n \n                   Comp_Expr := First (Expressions (Expr));\n                   while Present (Comp_Expr) loop\n@@ -2885,8 +2903,8 @@ package body Sem_Ch13 is\n                      end if;\n \n                      --  In older versions of Ada the corresponding pragmas\n-                     --  specified a Convention. In Ada 2012 the convention\n-                     --  is specified as a separate aspect, and it is optional,\n+                     --  specified a Convention. In Ada 2012 the convention is\n+                     --  specified as a separate aspect, and it is optional,\n                      --  given that it defaults to Convention_Ada. The code\n                      --  that verifed that there was a matching convention\n                      --  is now obsolete.\n@@ -2947,8 +2965,8 @@ package body Sem_Ch13 is\n                            Pragma_Name                  => Nam);\n                      end;\n \n-                  --  Cases where we do not delay, includes all cases where\n-                  --  the expression is missing other than the above cases.\n+                  --  Cases where we do not delay, includes all cases where the\n+                  --  expression is missing other than the above cases.\n \n                   elsif not Delay_Required or else No (Expr) then\n                      Make_Aitem_Pragma\n@@ -2997,8 +3015,8 @@ package body Sem_Ch13 is\n                                End_Label            => Empty));\n                         end if;\n \n-                        --  Create a pragma and put it at the start of the\n-                        --  task definition for the task type declaration.\n+                        --  Create a pragma and put it at the start of the task\n+                        --  definition for the task type declaration.\n \n                         Make_Aitem_Pragma\n                           (Pragma_Argument_Associations => New_List (\n@@ -3033,10 +3051,10 @@ package body Sem_Ch13 is\n             --  In the context of a compilation unit, we directly put the\n             --  pragma in the Pragmas_After list of the N_Compilation_Unit_Aux\n             --  node (no delay is required here) except for aspects on a\n-            --  subprogram body (see below) and a generic package, for which\n-            --  we need to introduce the pragma before building the generic\n-            --  copy (see sem_ch12), and for package instantiations, where\n-            --  the library unit pragmas are better handled early.\n+            --  subprogram body (see below) and a generic package, for which we\n+            --  need to introduce the pragma before building the generic copy\n+            --  (see sem_ch12), and for package instantiations, where the\n+            --  library unit pragmas are better handled early.\n \n             if Nkind (Parent (N)) = N_Compilation_Unit\n               and then (Present (Aitem) or else Is_Boolean_Aspect (Aspect))\n@@ -3233,12 +3251,12 @@ package body Sem_Ch13 is\n \n       FOnly : Boolean := False;\n       --  Reset to True for subtype specific attribute (Alignment, Size)\n-      --  and for stream attributes, i.e. those cases where in the call\n-      --  to Rep_Item_Too_Late, FOnly is set True so that only the freezing\n-      --  rules are checked. Note that the case of stream attributes is not\n-      --  clear from the RM, but see AI95-00137. Also, the RM seems to\n-      --  disallow Storage_Size for derived task types, but that is also\n-      --  clearly unintentional.\n+      --  and for stream attributes, i.e. those cases where in the call to\n+      --  Rep_Item_Too_Late, FOnly is set True so that only the freezing rules\n+      --  are checked. Note that the case of stream attributes is not clear\n+      --  from the RM, but see AI95-00137. Also, the RM seems to disallow\n+      --  Storage_Size for derived task types, but that is also clearly\n+      --  unintentional.\n \n       procedure Analyze_Stream_TSS_Definition (TSS_Nam : TSS_Name_Type);\n       --  Common processing for 'Read, 'Write, 'Input and 'Output attribute\n@@ -3321,9 +3339,8 @@ package body Sem_Ch13 is\n                Typ := Etype (F);\n \n                --  If the attribute specification comes from an aspect\n-               --  specification for a class-wide stream, the parameter\n-               --  must be a class-wide type of the entity to which the\n-               --  aspect applies.\n+               --  specification for a class-wide stream, the parameter must be\n+               --  a class-wide type of the entity to which the aspect applies.\n \n                if From_Aspect_Specification (N)\n                  and then Class_Present (Parent (N))\n@@ -3336,8 +3353,8 @@ package body Sem_Ch13 is\n                Typ := Etype (Subp);\n             end if;\n \n-            --  Verify that the prefix of the attribute and the local name\n-            --  for the type of the formal match.\n+            --  Verify that the prefix of the attribute and the local name for\n+            --  the type of the formal match.\n \n             if Base_Type (Typ) /= Base_Type (Ent)\n               or else Present ((Next_Formal (F)))\n@@ -3709,8 +3726,8 @@ package body Sem_Ch13 is\n \n    begin\n       --  The following code is a defense against recursion. Not clear that\n-      --  this can happen legitimately, but perhaps some error situations\n-      --  can cause it, and we did see this recursion during testing.\n+      --  this can happen legitimately, but perhaps some error situations can\n+      --  cause it, and we did see this recursion during testing.\n \n       if Analyzed (N) then\n          return;\n@@ -3760,10 +3777,10 @@ package body Sem_Ch13 is\n                return;\n \n             --  The following should not be ignored, because in the first place\n-            --  they are reasonably portable, and should not cause problems in\n-            --  compiling code from another target, and also they do affect\n-            --  legality, e.g. failing to provide a stream attribute for a\n-            --  type may make a program illegal.\n+            --  they are reasonably portable, and should not cause problems\n+            --  in compiling code from another target, and also they do affect\n+            --  legality, e.g. failing to provide a stream attribute for a type\n+            --  may make a program illegal.\n \n             when Attribute_External_Tag        |\n                  Attribute_Input               |"}]}