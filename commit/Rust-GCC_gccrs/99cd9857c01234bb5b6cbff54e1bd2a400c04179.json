{"sha": "99cd9857c01234bb5b6cbff54e1bd2a400c04179", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTljZDk4NTdjMDEyMzRiYjViNmNiZmY1NGUxYmQyYTQwMGMwNDE3OQ==", "commit": {"author": {"name": "Marek Polacek", "email": "polacek@redhat.com", "date": "2016-04-13T16:00:52Z"}, "committer": {"name": "Marek Polacek", "email": "mpolacek@gcc.gnu.org", "date": "2016-04-13T16:00:52Z"}, "message": "re PR c/70436 (-Wparentheses missing ambiguous else warning)\n\n\tPR c/70436\n\t* c-parser.c (c_parser_statement_after_labels): Add IF_P argument and\n\tadjust callers.\n\t(c_parser_statement): Likewise.\n\t(c_parser_c99_block_statement): Likewise.\n\t(c_parser_while_statement): Likewise.\n\t(c_parser_for_statement): Likewise.\n\t(c_parser_if_body): Don't set IF_P here.\n\t(c_parser_if_statement): Add IF_P argument.  Set IF_P here.  Warn\n\tabout dangling else here.\n\t* c-tree.h (c_finish_if_stmt): Adjust declaration.\n\t* c-typeck.c (c_finish_if_stmt): Remove NESTED_IF parameter.  Don't\n\twarn about dangling else here.\n\n\t* testsuite/gcc.dg/Wparentheses-12.c: New test.\n\t* testsuite/gcc.dg/Wparentheses-13.c: New test.\n\nFrom-SVN: r234949", "tree": {"sha": "7962ab3337ef28f108f4429418332c990368a28b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7962ab3337ef28f108f4429418332c990368a28b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/99cd9857c01234bb5b6cbff54e1bd2a400c04179", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/99cd9857c01234bb5b6cbff54e1bd2a400c04179", "html_url": "https://github.com/Rust-GCC/gccrs/commit/99cd9857c01234bb5b6cbff54e1bd2a400c04179", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/99cd9857c01234bb5b6cbff54e1bd2a400c04179/comments", "author": {"login": "mpolacek", "id": 10496300, "node_id": "MDQ6VXNlcjEwNDk2MzAw", "avatar_url": "https://avatars.githubusercontent.com/u/10496300?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mpolacek", "html_url": "https://github.com/mpolacek", "followers_url": "https://api.github.com/users/mpolacek/followers", "following_url": "https://api.github.com/users/mpolacek/following{/other_user}", "gists_url": "https://api.github.com/users/mpolacek/gists{/gist_id}", "starred_url": "https://api.github.com/users/mpolacek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mpolacek/subscriptions", "organizations_url": "https://api.github.com/users/mpolacek/orgs", "repos_url": "https://api.github.com/users/mpolacek/repos", "events_url": "https://api.github.com/users/mpolacek/events{/privacy}", "received_events_url": "https://api.github.com/users/mpolacek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "5267cfcc82d1ea904335486e476c4945ad4da6e7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5267cfcc82d1ea904335486e476c4945ad4da6e7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5267cfcc82d1ea904335486e476c4945ad4da6e7"}], "stats": {"total": 383, "additions": 306, "deletions": 77}, "files": [{"sha": "4b21d528f80c1ebf83d69d520e97ed1413e9669e", "filename": "gcc/c/ChangeLog", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/99cd9857c01234bb5b6cbff54e1bd2a400c04179/gcc%2Fc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/99cd9857c01234bb5b6cbff54e1bd2a400c04179/gcc%2Fc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2FChangeLog?ref=99cd9857c01234bb5b6cbff54e1bd2a400c04179", "patch": "@@ -1,3 +1,19 @@\n+2016-04-13  Marek Polacek  <polacek@redhat.com>\n+\n+\tPR c/70436\n+\t* c-parser.c (c_parser_statement_after_labels): Add IF_P argument and\n+\tadjust callers.\n+\t(c_parser_statement): Likewise.\n+\t(c_parser_c99_block_statement): Likewise.\n+\t(c_parser_while_statement): Likewise.\n+\t(c_parser_for_statement): Likewise.\n+\t(c_parser_if_body): Don't set IF_P here.\n+\t(c_parser_if_statement): Add IF_P argument.  Set IF_P here.  Warn\n+\tabout dangling else here.\n+\t* c-tree.h (c_finish_if_stmt): Adjust declaration.\n+\t* c-typeck.c (c_finish_if_stmt): Remove NESTED_IF parameter.  Don't\n+\twarn about dangling else here.\n+\n 2016-04-04  Marek Polacek  <polacek@redhat.com>\n \n \tPR c/70307"}, {"sha": "d37c6917b32852f7b7a8e5306e52631ade339592", "filename": "gcc/c/c-parser.c", "status": "modified", "additions": 79, "deletions": 40, "changes": 119, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/99cd9857c01234bb5b6cbff54e1bd2a400c04179/gcc%2Fc%2Fc-parser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/99cd9857c01234bb5b6cbff54e1bd2a400c04179/gcc%2Fc%2Fc-parser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2Fc-parser.c?ref=99cd9857c01234bb5b6cbff54e1bd2a400c04179", "patch": "@@ -1301,13 +1301,14 @@ static void c_parser_initval (c_parser *, struct c_expr *,\n static tree c_parser_compound_statement (c_parser *);\n static void c_parser_compound_statement_nostart (c_parser *);\n static void c_parser_label (c_parser *);\n-static void c_parser_statement (c_parser *);\n-static void c_parser_statement_after_labels (c_parser *, vec<tree> * = NULL);\n-static void c_parser_if_statement (c_parser *, vec<tree> *);\n+static void c_parser_statement (c_parser *, bool *);\n+static void c_parser_statement_after_labels (c_parser *, bool *,\n+\t\t\t\t\t     vec<tree> * = NULL);\n+static void c_parser_if_statement (c_parser *, bool *, vec<tree> *);\n static void c_parser_switch_statement (c_parser *);\n-static void c_parser_while_statement (c_parser *, bool);\n+static void c_parser_while_statement (c_parser *, bool, bool *);\n static void c_parser_do_statement (c_parser *, bool);\n-static void c_parser_for_statement (c_parser *, bool);\n+static void c_parser_for_statement (c_parser *, bool, bool *);\n static tree c_parser_asm_statement (c_parser *);\n static tree c_parser_asm_operands (c_parser *);\n static tree c_parser_asm_goto_operands (c_parser *);\n@@ -4853,7 +4854,7 @@ c_parser_compound_statement_nostart (c_parser *parser)\n \t  last_label = false;\n \t  last_stmt = true;\n \t  mark_valid_location_for_stdc_pragma (false);\n-\t  c_parser_statement_after_labels (parser);\n+\t  c_parser_statement_after_labels (parser, NULL);\n \t}\n \n       parser->error = false;\n@@ -5095,25 +5096,35 @@ c_parser_label (c_parser *parser)\n    statement:\n      transaction-statement\n      transaction-cancel-statement\n-*/\n+\n+   IF_P is used to track whether there's a (possibly labeled) if statement\n+   which is not enclosed in braces and has an else clause.  This is used to\n+   implement -Wparentheses.  */\n \n static void\n-c_parser_statement (c_parser *parser)\n+c_parser_statement (c_parser *parser, bool *if_p)\n {\n   c_parser_all_labels (parser);\n-  c_parser_statement_after_labels (parser);\n+  c_parser_statement_after_labels (parser, if_p, NULL);\n }\n \n /* Parse a statement, other than a labeled statement.  CHAIN is a vector\n-   of if-else-if conditions.  */\n+   of if-else-if conditions.\n+\n+   IF_P is used to track whether there's a (possibly labeled) if statement\n+   which is not enclosed in braces and has an else clause.  This is used to\n+   implement -Wparentheses.  */\n \n static void\n-c_parser_statement_after_labels (c_parser *parser, vec<tree> *chain)\n+c_parser_statement_after_labels (c_parser *parser, bool *if_p,\n+\t\t\t\t vec<tree> *chain)\n {\n   location_t loc = c_parser_peek_token (parser)->location;\n   tree stmt = NULL_TREE;\n   bool in_if_block = parser->in_if_block;\n   parser->in_if_block = false;\n+  if (if_p != NULL)\n+    *if_p = false;\n   switch (c_parser_peek_token (parser)->type)\n     {\n     case CPP_OPEN_BRACE:\n@@ -5123,19 +5134,19 @@ c_parser_statement_after_labels (c_parser *parser, vec<tree> *chain)\n       switch (c_parser_peek_token (parser)->keyword)\n \t{\n \tcase RID_IF:\n-\t  c_parser_if_statement (parser, chain);\n+\t  c_parser_if_statement (parser, if_p, chain);\n \t  break;\n \tcase RID_SWITCH:\n \t  c_parser_switch_statement (parser);\n \t  break;\n \tcase RID_WHILE:\n-\t  c_parser_while_statement (parser, false);\n+\t  c_parser_while_statement (parser, false, if_p);\n \t  break;\n \tcase RID_DO:\n \t  c_parser_do_statement (parser, false);\n \t  break;\n \tcase RID_FOR:\n-\t  c_parser_for_statement (parser, false);\n+\t  c_parser_for_statement (parser, false, if_p);\n \t  break;\n \tcase RID_CILK_FOR:\n \t  if (!flag_cilkplus)\n@@ -5321,14 +5332,18 @@ c_parser_paren_condition (c_parser *parser)\n   return cond;\n }\n \n-/* Parse a statement which is a block in C99.  */\n+/* Parse a statement which is a block in C99.\n+\n+   IF_P is used to track whether there's a (possibly labeled) if statement\n+   which is not enclosed in braces and has an else clause.  This is used to\n+   implement -Wparentheses.  */\n \n static tree\n-c_parser_c99_block_statement (c_parser *parser)\n+c_parser_c99_block_statement (c_parser *parser, bool *if_p)\n {\n   tree block = c_begin_compound_stmt (flag_isoc99);\n   location_t loc = c_parser_peek_token (parser)->location;\n-  c_parser_statement (parser);\n+  c_parser_statement (parser, if_p);\n   return c_end_compound_stmt (loc, block, flag_isoc99);\n }\n \n@@ -5338,7 +5353,11 @@ c_parser_c99_block_statement (c_parser *parser)\n    we handle an empty body specially for the sake of -Wempty-body\n    warnings, and (d) we call parser_compound_statement directly\n    because c_parser_statement_after_labels resets\n-   parser->in_if_block.  */\n+   parser->in_if_block.\n+\n+   IF_P is used to track whether there's a (possibly labeled) if statement\n+   which is not enclosed in braces and has an else clause.  This is used to\n+   implement -Wparentheses.  */\n \n static tree\n c_parser_if_body (c_parser *parser, bool *if_p,\n@@ -5350,7 +5369,6 @@ c_parser_if_body (c_parser *parser, bool *if_p,\n     = get_token_indent_info (c_parser_peek_token (parser));\n \n   c_parser_all_labels (parser);\n-  *if_p = c_parser_next_token_is_keyword (parser, RID_IF);\n   if (c_parser_next_token_is (parser, CPP_SEMICOLON))\n     {\n       location_t loc = c_parser_peek_token (parser)->location;\n@@ -5363,7 +5381,7 @@ c_parser_if_body (c_parser *parser, bool *if_p,\n   else if (c_parser_next_token_is (parser, CPP_OPEN_BRACE))\n     add_stmt (c_parser_compound_statement (parser));\n   else\n-    c_parser_statement_after_labels (parser);\n+    c_parser_statement_after_labels (parser, if_p);\n \n   token_indent_info next_tinfo\n     = get_token_indent_info (c_parser_peek_token (parser));\n@@ -5397,7 +5415,7 @@ c_parser_else_body (c_parser *parser, const token_indent_info &else_tinfo,\n       c_parser_consume_token (parser);\n     }\n   else\n-    c_parser_statement_after_labels (parser, chain);\n+    c_parser_statement_after_labels (parser, NULL, chain);\n \n   token_indent_info next_tinfo\n     = get_token_indent_info (c_parser_peek_token (parser));\n@@ -5412,15 +5430,18 @@ c_parser_else_body (c_parser *parser, const token_indent_info &else_tinfo,\n      if ( expression ) statement\n      if ( expression ) statement else statement\n \n-  CHAIN is a vector of if-else-if conditions.  */\n+   CHAIN is a vector of if-else-if conditions.\n+   IF_P is used to track whether there's a (possibly labeled) if statement\n+   which is not enclosed in braces and has an else clause.  This is used to\n+   implement -Wparentheses.  */\n \n static void\n-c_parser_if_statement (c_parser *parser, vec<tree> *chain)\n+c_parser_if_statement (c_parser *parser, bool *if_p, vec<tree> *chain)\n {\n   tree block;\n   location_t loc;\n   tree cond;\n-  bool first_if = false;\n+  bool nested_if = false;\n   tree first_body, second_body;\n   bool in_if_block;\n   tree if_stmt;\n@@ -5439,7 +5460,7 @@ c_parser_if_statement (c_parser *parser, vec<tree> *chain)\n     }\n   in_if_block = parser->in_if_block;\n   parser->in_if_block = true;\n-  first_body = c_parser_if_body (parser, &first_if, if_tinfo);\n+  first_body = c_parser_if_body (parser, &nested_if, if_tinfo);\n   parser->in_if_block = in_if_block;\n \n   if (warn_duplicated_cond)\n@@ -5470,10 +5491,22 @@ c_parser_if_statement (c_parser *parser, vec<tree> *chain)\n \t    }\n \t}\n       second_body = c_parser_else_body (parser, else_tinfo, chain);\n+      /* Set IF_P to true to indicate that this if statement has an\n+\t else clause.  This may trigger the Wparentheses warning\n+\t below when we get back up to the parent if statement.  */\n+      if (if_p != NULL)\n+\t*if_p = true;\n     }\n   else\n     {\n       second_body = NULL_TREE;\n+\n+      /* Diagnose an ambiguous else if if-then-else is nested inside\n+\t if-then.  */\n+      if (nested_if)\n+\twarning_at (loc, OPT_Wparentheses,\n+\t\t    \"suggest explicit braces to avoid ambiguous %<else%>\");\n+\n       if (warn_duplicated_cond)\n \t{\n \t  /* This if statement does not have an else clause.  We don't\n@@ -5482,7 +5515,7 @@ c_parser_if_statement (c_parser *parser, vec<tree> *chain)\n \t  chain = NULL;\n \t}\n     }\n-  c_finish_if_stmt (loc, cond, first_body, second_body, first_if);\n+  c_finish_if_stmt (loc, cond, first_body, second_body);\n   if_stmt = c_end_compound_stmt (loc, block, flag_isoc99);\n \n   /* If the if statement contains array notations, then we expand them.  */\n@@ -5533,7 +5566,7 @@ c_parser_switch_statement (c_parser *parser)\n   c_start_case (switch_loc, switch_cond_loc, expr, explicit_cast_p);\n   save_break = c_break_label;\n   c_break_label = NULL_TREE;\n-  body = c_parser_c99_block_statement (parser);\n+  body = c_parser_c99_block_statement (parser, NULL/*if??*/);\n   c_finish_case (body, ce.original_type);\n   if (c_break_label)\n     {\n@@ -5550,10 +5583,13 @@ c_parser_switch_statement (c_parser *parser)\n \n    while-statement:\n       while (expression) statement\n-*/\n+\n+   IF_P is used to track whether there's a (possibly labeled) if statement\n+   which is not enclosed in braces and has an else clause.  This is used to\n+   implement -Wparentheses.  */\n \n static void\n-c_parser_while_statement (c_parser *parser, bool ivdep)\n+c_parser_while_statement (c_parser *parser, bool ivdep, bool *if_p)\n {\n   tree block, cond, body, save_break, save_cont;\n   location_t loc;\n@@ -5580,7 +5616,7 @@ c_parser_while_statement (c_parser *parser, bool ivdep)\n   token_indent_info body_tinfo\n     = get_token_indent_info (c_parser_peek_token (parser));\n \n-  body = c_parser_c99_block_statement (parser);\n+  body = c_parser_c99_block_statement (parser, if_p);\n   c_finish_loop (loc, cond, NULL, body, c_break_label, c_cont_label, true);\n   add_stmt (c_end_compound_stmt (loc, block, flag_isoc99));\n \n@@ -5615,7 +5651,7 @@ c_parser_do_statement (c_parser *parser, bool ivdep)\n   c_break_label = NULL_TREE;\n   save_cont = c_cont_label;\n   c_cont_label = NULL_TREE;\n-  body = c_parser_c99_block_statement (parser);\n+  body = c_parser_c99_block_statement (parser, NULL);\n   c_parser_require_keyword (parser, RID_WHILE, \"expected %<while%>\");\n   new_break = c_break_label;\n   c_break_label = save_break;\n@@ -5690,10 +5726,13 @@ c_parser_do_statement (c_parser *parser, bool ivdep)\n    like the beginning of the for-statement, and we can tell it is a\n    foreach-statement only because the initial declaration or\n    expression is terminated by 'in' instead of ';'.\n-*/\n+\n+   IF_P is used to track whether there's a (possibly labeled) if statement\n+   which is not enclosed in braces and has an else clause.  This is used to\n+   implement -Wparentheses.  */\n \n static void\n-c_parser_for_statement (c_parser *parser, bool ivdep)\n+c_parser_for_statement (c_parser *parser, bool ivdep, bool *if_p)\n {\n   tree block, cond, incr, save_break, save_cont, body;\n   /* The following are only used when parsing an ObjC foreach statement.  */\n@@ -5869,7 +5908,7 @@ c_parser_for_statement (c_parser *parser, bool ivdep)\n   token_indent_info body_tinfo\n     = get_token_indent_info (c_parser_peek_token (parser));\n \n-  body = c_parser_c99_block_statement (parser);\n+  body = c_parser_c99_block_statement (parser, if_p);\n \n   if (is_foreach_statement)\n     objc_finish_foreach_loop (loc, object_expression, collection_expression, body, c_break_label, c_cont_label);\n@@ -10118,9 +10157,9 @@ c_parser_pragma (c_parser *parser, enum pragma_context context)\n \t  return false;\n \t}\n       if (c_parser_next_token_is_keyword (parser, RID_FOR))\n-\tc_parser_for_statement (parser, true);\n+\tc_parser_for_statement (parser, true, NULL);\n       else if (c_parser_next_token_is_keyword (parser, RID_WHILE))\n-\tc_parser_while_statement (parser, true);\n+\tc_parser_while_statement (parser, true, NULL);\n       else\n \tc_parser_do_statement (parser, true);\n       return false;\n@@ -13441,7 +13480,7 @@ static tree\n c_parser_omp_structured_block (c_parser *parser)\n {\n   tree stmt = push_stmt_list ();\n-  c_parser_statement (parser);\n+  c_parser_statement (parser, NULL);\n   return pop_stmt_list (stmt);\n }\n \n@@ -14843,7 +14882,7 @@ c_parser_omp_for_loop (location_t loc, c_parser *parser, enum tree_code code,\n       add_stmt (c_end_compound_stmt (here, stmt, true));\n     }\n   else\n-    add_stmt (c_parser_c99_block_statement (parser));\n+    add_stmt (c_parser_c99_block_statement (parser, NULL));\n   if (c_cont_label)\n     {\n       tree t = build1 (LABEL_EXPR, void_type_node, c_cont_label);\n@@ -15397,7 +15436,7 @@ c_parser_omp_parallel (location_t loc, c_parser *parser,\n     }\n \n   block = c_begin_omp_parallel ();\n-  c_parser_statement (parser);\n+  c_parser_statement (parser, NULL);\n   stmt = c_finish_omp_parallel (loc, clauses, block);\n \n   return stmt;\n@@ -15458,7 +15497,7 @@ c_parser_omp_task (location_t loc, c_parser *parser)\n \t\t\t\t      \"#pragma omp task\");\n \n   block = c_begin_omp_task ();\n-  c_parser_statement (parser);\n+  c_parser_statement (parser, NULL);\n   return c_finish_omp_task (loc, clauses, block);\n }\n "}, {"sha": "d5592077524e4f64eb30e487c63400abb063d21e", "filename": "gcc/c/c-tree.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/99cd9857c01234bb5b6cbff54e1bd2a400c04179/gcc%2Fc%2Fc-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/99cd9857c01234bb5b6cbff54e1bd2a400c04179/gcc%2Fc%2Fc-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2Fc-tree.h?ref=99cd9857c01234bb5b6cbff54e1bd2a400c04179", "patch": "@@ -641,7 +641,7 @@ extern tree build_asm_stmt (tree, tree);\n extern int c_types_compatible_p (tree, tree);\n extern tree c_begin_compound_stmt (bool);\n extern tree c_end_compound_stmt (location_t, tree, bool);\n-extern void c_finish_if_stmt (location_t, tree, tree, tree, bool);\n+extern void c_finish_if_stmt (location_t, tree, tree, tree);\n extern void c_finish_loop (location_t, tree, tree, tree, tree, tree, bool);\n extern tree c_begin_stmt_expr (void);\n extern tree c_finish_stmt_expr (location_t, tree);"}, {"sha": "9a1499428d4e8eb10dc570e94012c36acae60a2d", "filename": "gcc/c/c-typeck.c", "status": "modified", "additions": 2, "deletions": 36, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/99cd9857c01234bb5b6cbff54e1bd2a400c04179/gcc%2Fc%2Fc-typeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/99cd9857c01234bb5b6cbff54e1bd2a400c04179/gcc%2Fc%2Fc-typeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2Fc-typeck.c?ref=99cd9857c01234bb5b6cbff54e1bd2a400c04179", "patch": "@@ -9974,12 +9974,11 @@ c_finish_case (tree body, tree type)\n \f\n /* Emit an if statement.  IF_LOCUS is the location of the 'if'.  COND,\n    THEN_BLOCK and ELSE_BLOCK are expressions to be used; ELSE_BLOCK\n-   may be null.  NESTED_IF is true if THEN_BLOCK contains another IF\n-   statement, and was not surrounded with parenthesis.  */\n+   may be null.  */\n \n void\n c_finish_if_stmt (location_t if_locus, tree cond, tree then_block,\n-\t\t  tree else_block, bool nested_if)\n+\t\t  tree else_block)\n {\n   tree stmt;\n \n@@ -10011,39 +10010,6 @@ c_finish_if_stmt (location_t if_locus, tree cond, tree then_block,\n \t  return;\n \t}\n     }\n-  /* Diagnose an ambiguous else if if-then-else is nested inside if-then.  */\n-  if (warn_parentheses && nested_if && else_block == NULL)\n-    {\n-      tree inner_if = then_block;\n-\n-      /* We know from the grammar productions that there is an IF nested\n-\t within THEN_BLOCK.  Due to labels and c99 conditional declarations,\n-\t it might not be exactly THEN_BLOCK, but should be the last\n-\t non-container statement within.  */\n-      while (1)\n-\tswitch (TREE_CODE (inner_if))\n-\t  {\n-\t  case COND_EXPR:\n-\t    goto found;\n-\t  case BIND_EXPR:\n-\t    inner_if = BIND_EXPR_BODY (inner_if);\n-\t    break;\n-\t  case STATEMENT_LIST:\n-\t    inner_if = expr_last (then_block);\n-\t    break;\n-\t  case TRY_FINALLY_EXPR:\n-\t  case TRY_CATCH_EXPR:\n-\t    inner_if = TREE_OPERAND (inner_if, 0);\n-\t    break;\n-\t  default:\n-\t    gcc_unreachable ();\n-\t  }\n-    found:\n-\n-      if (COND_EXPR_ELSE (inner_if))\n-\t warning_at (if_locus, OPT_Wparentheses,\n-\t\t     \"suggest explicit braces to avoid ambiguous %<else%>\");\n-    }\n \n   stmt = build3 (COND_EXPR, void_type_node, cond, then_block, else_block);\n   SET_EXPR_LOCATION (stmt, if_locus);"}, {"sha": "6edb320c4e2bd65a8f1171db985f791b762ed621", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/99cd9857c01234bb5b6cbff54e1bd2a400c04179/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/99cd9857c01234bb5b6cbff54e1bd2a400c04179/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=99cd9857c01234bb5b6cbff54e1bd2a400c04179", "patch": "@@ -1,3 +1,9 @@\n+2016-04-13  Marek Polacek  <polacek@redhat.com>\n+\n+\tPR c/70436\n+\t* testsuite/gcc.dg/Wparentheses-12.c: New test.\n+\t* testsuite/gcc.dg/Wparentheses-13.c: New test.\n+\n 2016-04-13  Ilya Enkovich  <ilya.enkovich@intel.com>\n \n \t* gcc.target/i386/avx512bw-kunpckdq-2.c: New test."}, {"sha": "7832415f1ed706a8ea1631eeba6270bb83ace7ce", "filename": "gcc/testsuite/gcc.dg/Wparentheses-12.c", "status": "added", "additions": 135, "deletions": 0, "changes": 135, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/99cd9857c01234bb5b6cbff54e1bd2a400c04179/gcc%2Ftestsuite%2Fgcc.dg%2FWparentheses-12.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/99cd9857c01234bb5b6cbff54e1bd2a400c04179/gcc%2Ftestsuite%2Fgcc.dg%2FWparentheses-12.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2FWparentheses-12.c?ref=99cd9857c01234bb5b6cbff54e1bd2a400c04179", "patch": "@@ -0,0 +1,135 @@\n+/* PR c/70436  */\n+/* { dg-options \"-Wparentheses\" }  */\n+\n+int a, b, c;\n+void bar (void);\n+void baz (void);\n+\n+void\n+foo (void)\n+{\n+  int i, j;\n+\n+  if (a) /* { dg-warning \"ambiguous\" }  */\n+    for (;;)\n+      if (b)\n+        bar ();\n+      else\n+        baz ();\n+\n+  if (a) /* { dg-warning \"ambiguous\" }  */\n+    while (1)\n+      if (b)\n+        bar ();\n+      else\n+        baz ();\n+\n+  if (a) /* { dg-warning \"ambiguous\" }  */\n+    while (1)\n+      for (;;)\n+        if (b)\n+          bar ();\n+        else\n+          baz ();\n+\n+  if (a) /* { dg-warning \"ambiguous\" }  */\n+    while (1)\n+      while (1)\n+        if (b)\n+          bar ();\n+  else\n+    baz ();\n+\n+  if (a) /* { dg-warning \"ambiguous\" }  */\n+    for (i = 0; i < 10; i++)\n+      for (j = 0; j < 10; j++)\n+        if (b)\n+          bar ();\n+  else\n+    baz ();\n+\n+  if (a)\n+    for (i = 0; i < 10; i++)\n+      if (b) /* { dg-warning \"ambiguous\" }  */\n+        for (j = 0; j < 10; j++)\n+          if (c)\n+            bar ();\n+      else\n+        baz ();\n+\n+  if (a) /* { dg-warning \"ambiguous\" }  */\n+    for (i = 0; i < 10; i++)\n+      if (b)\n+        for (j = 0; j < 10; j++)\n+          if (c)\n+            bar ();\n+          else\n+            baz ();\n+  else\n+    bar ();\n+\n+  if (a) /* { dg-warning \"ambiguous\" }  */\n+    for (;;)\n+      if (b)\n+        while (1)\n+          if (a)\n+            bar ();\n+          else\n+            baz ();\n+      else\n+        bar ();\n+\n+  if (a) /* { dg-warning \"ambiguous\" }  */\n+    for (;;)\n+      if (b)\n+        while (1)\n+          {\n+            if (a) { bar (); } else { baz (); }\n+          }\n+      else\n+        bar ();\n+\n+  if (a)\n+    for (;;)\n+      if (b)\n+        bar ();\n+      else\n+        baz ();\n+  else bar ();\n+\n+  if (a)\n+    while (1)\n+      if (b)\n+        bar ();\n+      else\n+        baz ();\n+  else bar ();\n+\n+  if (a)\n+    for (;;)\n+      {\n+        if (b)\n+          bar ();\n+        else\n+          baz ();\n+      }\n+\n+  if (a)\n+    {\n+      for (;;)\n+        if (b)\n+          bar ();\n+    }\n+  else baz ();\n+\n+  if (a)\n+    do\n+      if (b) bar (); else baz ();\n+    while (b);\n+\n+  if (a)\n+    do\n+      if (b) bar ();\n+    while (b);\n+  else baz ();\n+}"}, {"sha": "9837ba566d9e2a9a3ef8e4efe50a946f60082d3c", "filename": "gcc/testsuite/gcc.dg/Wparentheses-13.c", "status": "added", "additions": 67, "deletions": 0, "changes": 67, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/99cd9857c01234bb5b6cbff54e1bd2a400c04179/gcc%2Ftestsuite%2Fgcc.dg%2FWparentheses-13.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/99cd9857c01234bb5b6cbff54e1bd2a400c04179/gcc%2Ftestsuite%2Fgcc.dg%2FWparentheses-13.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2FWparentheses-13.c?ref=99cd9857c01234bb5b6cbff54e1bd2a400c04179", "patch": "@@ -0,0 +1,67 @@\n+/* PR c/70436  */\n+/* { dg-options \"-Wparentheses\" }  */\n+\n+int a, b, c;\n+void bar (int);\n+\n+void\n+foo (void)\n+{\n+  if (a) /* { dg-warning \"ambiguous\" }  */\n+    if (b)\n+      {\n+\tif (c)\n+\t  bar (0);\n+      }\n+    else\n+      bar (1);\n+\n+  if (a > 0)\n+    if (a > 1)\n+      if (a > 2)\n+\tif (a > 3)\n+\t  if (a > 4)\n+\t    if (a > 5) /* { dg-warning \"ambiguous\" }  */\n+\t      if (a > 6)\n+\t\twhile (1)\n+\t\t  bar (0);\n+  else\n+    bar (1);\n+\n+  if (a) /* { dg-warning \"ambiguous\" }  */\n+    if (b)\n+      switch (c);\n+    else\n+      bar (1);\n+\n+  switch (a)\n+  {\n+  default:\n+    if (b) /* { dg-warning \"ambiguous\" }  */\n+      if (c)\n+\tfor (;;)\n+          bar (0);\n+    else\n+      bar (1);\n+  }\n+\n+  if (a) /* { dg-warning \"ambiguous\" }  */\n+  if (a)\n+    {\n+      bar (2);\n+    }\n+  else\n+    bar (3);\n+\n+  if (a)\n+    do if (b) bar (4); while (1);\n+  else bar (5);\n+\n+  do\n+    {\n+      if (a)\n+        if (b) /* { dg-warning \"ambiguous\" }  */\n+         if (c) for (;;) bar (6);\n+     else bar (7);\n+    } while (0);\n+}"}]}