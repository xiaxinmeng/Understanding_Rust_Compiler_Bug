{"sha": "03a231f7521b62a593fd7a4ce7067102288bd28f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDNhMjMxZjc1MjFiNjJhNTkzZmQ3YTRjZTcwNjcxMDIyODhiZDI4Zg==", "commit": {"author": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2013-11-14T20:15:04Z"}, "committer": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2013-11-14T20:15:04Z"}, "message": "runtime: Add netpoll code that uses select.\n\nRequired for Solaris support.\n\nFrom-SVN: r204817", "tree": {"sha": "8d7245531a5a7415aca8d276ddcd1dde96652404", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8d7245531a5a7415aca8d276ddcd1dde96652404"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/03a231f7521b62a593fd7a4ce7067102288bd28f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/03a231f7521b62a593fd7a4ce7067102288bd28f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/03a231f7521b62a593fd7a4ce7067102288bd28f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/03a231f7521b62a593fd7a4ce7067102288bd28f/comments", "author": null, "committer": null, "parents": [{"sha": "7d608db296739dfbbb9dfa65d796b82691158e53", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7d608db296739dfbbb9dfa65d796b82691158e53", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7d608db296739dfbbb9dfa65d796b82691158e53"}], "stats": {"total": 329, "additions": 270, "deletions": 59}, "files": [{"sha": "052cded183b65cbdf32eeedcc9a97d7863c0e312", "filename": "libgo/Makefile.am", "status": "modified", "additions": 5, "deletions": 26, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/03a231f7521b62a593fd7a4ce7067102288bd28f/libgo%2FMakefile.am", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/03a231f7521b62a593fd7a4ce7067102288bd28f/libgo%2FMakefile.am", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2FMakefile.am?ref=03a231f7521b62a593fd7a4ce7067102288bd28f", "patch": "@@ -413,12 +413,12 @@ endif\n endif\n \n if LIBGO_IS_LINUX\n-runtime_netpoll_files = netpoll.c runtime/netpoll_epoll.c\n+runtime_netpoll_files = runtime/netpoll_epoll.c\n else\n-if LIBGO_IS_DARWIN\n-runtime_netpoll_files = netpoll.c runtime/netpoll_kqueue.c\n+if LIBGO_IS_SOLARIS\n+runtime_netpoll_files = runtime/netpoll_select.c\n else\n-runtime_netpoll_files = runtime/netpoll_stub.c\n+runtime_netpoll_files = runtime/netpoll_kqueue.c\n endif\n endif\n \n@@ -515,6 +515,7 @@ runtime_files = \\\n \tmalloc.c \\\n \tmap.c \\\n \tmprof.c \\\n+\tnetpoll.c \\\n \treflect.c \\\n \truntime1.c \\\n \tsema.c \\\n@@ -670,26 +671,6 @@ go_mime_files = \\\n \tgo/mime/type.go \\\n \tgo/mime/type_unix.go\n \n-if LIBGO_IS_RTEMS\n-go_net_fd_os_file = go/net/fd_select.go\n-go_net_newpollserver_file = go/net/newpollserver_rtems.go\n-else # !LIBGO_IS_RTEMS\n-if LIBGO_IS_LINUX\n-go_net_fd_os_file =\n-go_net_newpollserver_file =\n-else # !LIBGO_IS_LINUX && !LIBGO_IS_RTEMS\n-if LIBGO_IS_NETBSD\n-go_net_fd_os_file =\n-go_net_newpollserver_file =\n-else # !LIBGO_IS_NETBSD && !LIBGO_IS_LINUX && !LIBGO_IS_RTEMS\n-# By default use select with pipes.  Most systems should have\n-# something better.\n-go_net_fd_os_file = go/net/fd_select.go\n-go_net_newpollserver_file =\n-endif # !LIBGO_IS_NETBSD\n-endif # !LIBGO_IS_LINUX\n-endif # !LIBGO_IS_RTEMS\n-\n if LIBGO_IS_LINUX\n go_net_cgo_file = go/net/cgo_linux.go\n go_net_sock_file = go/net/sock_linux.go\n@@ -787,10 +768,8 @@ go_net_files = \\\n \tgo/net/dnsclient_unix.go \\\n \tgo/net/dnsconfig_unix.go \\\n \tgo/net/dnsmsg.go \\\n-\t$(go_net_newpollserver_file) \\\n \tgo/net/fd_mutex.go \\\n \tgo/net/fd_unix.go \\\n-\t$(go_net_fd_os_file) \\\n \tgo/net/file_unix.go \\\n \tgo/net/hosts.go \\\n \tgo/net/interface.go \\"}, {"sha": "e633b60ecf37550a9f70bfc7dc040b5d8fbdd388", "filename": "libgo/Makefile.in", "status": "modified", "additions": 18, "deletions": 31, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/03a231f7521b62a593fd7a4ce7067102288bd28f/libgo%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/03a231f7521b62a593fd7a4ce7067102288bd28f/libgo%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2FMakefile.in?ref=03a231f7521b62a593fd7a4ce7067102288bd28f", "patch": "@@ -179,12 +179,9 @@ libgo_la_DEPENDENCIES = $(am__DEPENDENCIES_2) \\\n @LIBGO_IS_LINUX_TRUE@am__objects_1 = lock_futex.lo thread-linux.lo\n @HAVE_SYS_MMAN_H_FALSE@am__objects_2 = mem_posix_memalign.lo\n @HAVE_SYS_MMAN_H_TRUE@am__objects_2 = mem.lo\n-@LIBGO_IS_DARWIN_FALSE@@LIBGO_IS_LINUX_FALSE@am__objects_3 =  \\\n-@LIBGO_IS_DARWIN_FALSE@@LIBGO_IS_LINUX_FALSE@\tnetpoll_stub.lo\n-@LIBGO_IS_DARWIN_TRUE@@LIBGO_IS_LINUX_FALSE@am__objects_3 =  \\\n-@LIBGO_IS_DARWIN_TRUE@@LIBGO_IS_LINUX_FALSE@\tnetpoll.lo \\\n-@LIBGO_IS_DARWIN_TRUE@@LIBGO_IS_LINUX_FALSE@\tnetpoll_kqueue.lo\n-@LIBGO_IS_LINUX_TRUE@am__objects_3 = netpoll.lo netpoll_epoll.lo\n+@LIBGO_IS_LINUX_FALSE@@LIBGO_IS_SOLARIS_FALSE@am__objects_3 = netpoll_kqueue.lo\n+@LIBGO_IS_LINUX_FALSE@@LIBGO_IS_SOLARIS_TRUE@am__objects_3 = netpoll_select.lo\n+@LIBGO_IS_LINUX_TRUE@am__objects_3 = netpoll_epoll.lo\n @LIBGO_IS_RTEMS_TRUE@am__objects_4 = rtems-task-variable-add.lo\n @LIBGO_IS_DARWIN_FALSE@@LIBGO_IS_FREEBSD_FALSE@@LIBGO_IS_IRIX_FALSE@@LIBGO_IS_LINUX_FALSE@@LIBGO_IS_NETBSD_FALSE@@LIBGO_IS_SOLARIS_FALSE@am__objects_5 = getncpu-none.lo\n @LIBGO_IS_DARWIN_FALSE@@LIBGO_IS_FREEBSD_FALSE@@LIBGO_IS_IRIX_FALSE@@LIBGO_IS_LINUX_FALSE@@LIBGO_IS_NETBSD_TRUE@@LIBGO_IS_SOLARIS_FALSE@am__objects_5 = getncpu-bsd.lo\n@@ -220,8 +217,9 @@ am__objects_6 = go-append.lo go-assert.lo go-assert-interface.lo \\\n \tmfinal.lo mfixalloc.lo mgc0.lo mheap.lo msize.lo \\\n \t$(am__objects_3) panic.lo parfor.lo print.lo proc.lo \\\n \truntime.lo signal_unix.lo thread.lo yield.lo $(am__objects_4) \\\n-\tiface.lo malloc.lo map.lo mprof.lo reflect.lo runtime1.lo \\\n-\tsema.lo sigqueue.lo string.lo time.lo $(am__objects_5)\n+\tiface.lo malloc.lo map.lo mprof.lo netpoll.lo reflect.lo \\\n+\truntime1.lo sema.lo sigqueue.lo string.lo time.lo \\\n+\t$(am__objects_5)\n am_libgo_la_OBJECTS = $(am__objects_6)\n libgo_la_OBJECTS = $(am_libgo_la_OBJECTS)\n libgo_la_LINK = $(LIBTOOL) --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) \\\n@@ -752,9 +750,9 @@ toolexeclibgounicode_DATA = \\\n @LIBGO_IS_DARWIN_FALSE@@LIBGO_IS_IRIX_TRUE@@LIBGO_IS_LINUX_FALSE@runtime_getncpu_file = runtime/getncpu-irix.c\n @LIBGO_IS_DARWIN_TRUE@@LIBGO_IS_LINUX_FALSE@runtime_getncpu_file = runtime/getncpu-bsd.c\n @LIBGO_IS_LINUX_TRUE@runtime_getncpu_file = runtime/getncpu-linux.c\n-@LIBGO_IS_DARWIN_FALSE@@LIBGO_IS_LINUX_FALSE@runtime_netpoll_files = runtime/netpoll_stub.c\n-@LIBGO_IS_DARWIN_TRUE@@LIBGO_IS_LINUX_FALSE@runtime_netpoll_files = netpoll.c runtime/netpoll_kqueue.c\n-@LIBGO_IS_LINUX_TRUE@runtime_netpoll_files = netpoll.c runtime/netpoll_epoll.c\n+@LIBGO_IS_LINUX_FALSE@@LIBGO_IS_SOLARIS_FALSE@runtime_netpoll_files = runtime/netpoll_kqueue.c\n+@LIBGO_IS_LINUX_FALSE@@LIBGO_IS_SOLARIS_TRUE@runtime_netpoll_files = runtime/netpoll_select.c\n+@LIBGO_IS_LINUX_TRUE@runtime_netpoll_files = runtime/netpoll_epoll.c\n runtime_files = \\\n \truntime/go-append.c \\\n \truntime/go-assert.c \\\n@@ -848,6 +846,7 @@ runtime_files = \\\n \tmalloc.c \\\n \tmap.c \\\n \tmprof.c \\\n+\tnetpoll.c \\\n \treflect.c \\\n \truntime1.c \\\n \tsema.c \\\n@@ -962,16 +961,6 @@ go_mime_files = \\\n \tgo/mime/type.go \\\n \tgo/mime/type_unix.go\n \n-# By default use select with pipes.  Most systems should have\n-# something better.\n-@LIBGO_IS_LINUX_FALSE@@LIBGO_IS_NETBSD_FALSE@@LIBGO_IS_RTEMS_FALSE@go_net_fd_os_file = go/net/fd_select.go\n-@LIBGO_IS_LINUX_FALSE@@LIBGO_IS_NETBSD_TRUE@@LIBGO_IS_RTEMS_FALSE@go_net_fd_os_file = \n-@LIBGO_IS_LINUX_TRUE@@LIBGO_IS_RTEMS_FALSE@go_net_fd_os_file = \n-@LIBGO_IS_RTEMS_TRUE@go_net_fd_os_file = go/net/fd_select.go\n-@LIBGO_IS_LINUX_FALSE@@LIBGO_IS_NETBSD_FALSE@@LIBGO_IS_RTEMS_FALSE@go_net_newpollserver_file = \n-@LIBGO_IS_LINUX_FALSE@@LIBGO_IS_NETBSD_TRUE@@LIBGO_IS_RTEMS_FALSE@go_net_newpollserver_file = \n-@LIBGO_IS_LINUX_TRUE@@LIBGO_IS_RTEMS_FALSE@go_net_newpollserver_file = \n-@LIBGO_IS_RTEMS_TRUE@go_net_newpollserver_file = go/net/newpollserver_rtems.go\n @LIBGO_IS_FREEBSD_FALSE@@LIBGO_IS_IRIX_FALSE@@LIBGO_IS_LINUX_FALSE@@LIBGO_IS_NETBSD_FALSE@@LIBGO_IS_SOLARIS_FALSE@go_net_cgo_file = go/net/cgo_bsd.go\n @LIBGO_IS_FREEBSD_FALSE@@LIBGO_IS_IRIX_FALSE@@LIBGO_IS_LINUX_FALSE@@LIBGO_IS_NETBSD_TRUE@@LIBGO_IS_SOLARIS_FALSE@go_net_cgo_file = go/net/cgo_netbsd.go\n @LIBGO_IS_FREEBSD_TRUE@@LIBGO_IS_IRIX_FALSE@@LIBGO_IS_LINUX_FALSE@@LIBGO_IS_SOLARIS_FALSE@go_net_cgo_file = go/net/cgo_bsd.go\n@@ -1019,10 +1008,8 @@ go_net_files = \\\n \tgo/net/dnsclient_unix.go \\\n \tgo/net/dnsconfig_unix.go \\\n \tgo/net/dnsmsg.go \\\n-\t$(go_net_newpollserver_file) \\\n \tgo/net/fd_mutex.go \\\n \tgo/net/fd_unix.go \\\n-\t$(go_net_fd_os_file) \\\n \tgo/net/file_unix.go \\\n \tgo/net/hosts.go \\\n \tgo/net/interface.go \\\n@@ -2483,7 +2470,7 @@ distclean-compile:\n @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/netpoll.Plo@am__quote@\n @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/netpoll_epoll.Plo@am__quote@\n @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/netpoll_kqueue.Plo@am__quote@\n-@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/netpoll_stub.Plo@am__quote@\n+@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/netpoll_select.Plo@am__quote@\n @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/panic.Plo@am__quote@\n @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/parfor.Plo@am__quote@\n @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/print.Plo@am__quote@\n@@ -3111,20 +3098,20 @@ msize.lo: runtime/msize.c\n @AMDEP_TRUE@@am__fastdepCC_FALSE@\tDEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) @AMDEPBACKSLASH@\n @am__fastdepCC_FALSE@\t$(LIBTOOL)  --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o msize.lo `test -f 'runtime/msize.c' || echo '$(srcdir)/'`runtime/msize.c\n \n-netpoll_stub.lo: runtime/netpoll_stub.c\n-@am__fastdepCC_TRUE@\t$(LIBTOOL)  --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT netpoll_stub.lo -MD -MP -MF $(DEPDIR)/netpoll_stub.Tpo -c -o netpoll_stub.lo `test -f 'runtime/netpoll_stub.c' || echo '$(srcdir)/'`runtime/netpoll_stub.c\n-@am__fastdepCC_TRUE@\t$(am__mv) $(DEPDIR)/netpoll_stub.Tpo $(DEPDIR)/netpoll_stub.Plo\n-@AMDEP_TRUE@@am__fastdepCC_FALSE@\tsource='runtime/netpoll_stub.c' object='netpoll_stub.lo' libtool=yes @AMDEPBACKSLASH@\n-@AMDEP_TRUE@@am__fastdepCC_FALSE@\tDEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) @AMDEPBACKSLASH@\n-@am__fastdepCC_FALSE@\t$(LIBTOOL)  --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o netpoll_stub.lo `test -f 'runtime/netpoll_stub.c' || echo '$(srcdir)/'`runtime/netpoll_stub.c\n-\n netpoll_kqueue.lo: runtime/netpoll_kqueue.c\n @am__fastdepCC_TRUE@\t$(LIBTOOL)  --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT netpoll_kqueue.lo -MD -MP -MF $(DEPDIR)/netpoll_kqueue.Tpo -c -o netpoll_kqueue.lo `test -f 'runtime/netpoll_kqueue.c' || echo '$(srcdir)/'`runtime/netpoll_kqueue.c\n @am__fastdepCC_TRUE@\t$(am__mv) $(DEPDIR)/netpoll_kqueue.Tpo $(DEPDIR)/netpoll_kqueue.Plo\n @AMDEP_TRUE@@am__fastdepCC_FALSE@\tsource='runtime/netpoll_kqueue.c' object='netpoll_kqueue.lo' libtool=yes @AMDEPBACKSLASH@\n @AMDEP_TRUE@@am__fastdepCC_FALSE@\tDEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) @AMDEPBACKSLASH@\n @am__fastdepCC_FALSE@\t$(LIBTOOL)  --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o netpoll_kqueue.lo `test -f 'runtime/netpoll_kqueue.c' || echo '$(srcdir)/'`runtime/netpoll_kqueue.c\n \n+netpoll_select.lo: runtime/netpoll_select.c\n+@am__fastdepCC_TRUE@\t$(LIBTOOL)  --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT netpoll_select.lo -MD -MP -MF $(DEPDIR)/netpoll_select.Tpo -c -o netpoll_select.lo `test -f 'runtime/netpoll_select.c' || echo '$(srcdir)/'`runtime/netpoll_select.c\n+@am__fastdepCC_TRUE@\t$(am__mv) $(DEPDIR)/netpoll_select.Tpo $(DEPDIR)/netpoll_select.Plo\n+@AMDEP_TRUE@@am__fastdepCC_FALSE@\tsource='runtime/netpoll_select.c' object='netpoll_select.lo' libtool=yes @AMDEPBACKSLASH@\n+@AMDEP_TRUE@@am__fastdepCC_FALSE@\tDEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) @AMDEPBACKSLASH@\n+@am__fastdepCC_FALSE@\t$(LIBTOOL)  --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o netpoll_select.lo `test -f 'runtime/netpoll_select.c' || echo '$(srcdir)/'`runtime/netpoll_select.c\n+\n netpoll_epoll.lo: runtime/netpoll_epoll.c\n @am__fastdepCC_TRUE@\t$(LIBTOOL)  --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT netpoll_epoll.lo -MD -MP -MF $(DEPDIR)/netpoll_epoll.Tpo -c -o netpoll_epoll.lo `test -f 'runtime/netpoll_epoll.c' || echo '$(srcdir)/'`runtime/netpoll_epoll.c\n @am__fastdepCC_TRUE@\t$(am__mv) $(DEPDIR)/netpoll_epoll.Tpo $(DEPDIR)/netpoll_epoll.Plo"}, {"sha": "e1a5be9991920cc6351c0391d31be28447e90785", "filename": "libgo/runtime/malloc.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/03a231f7521b62a593fd7a4ce7067102288bd28f/libgo%2Fruntime%2Fmalloc.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/03a231f7521b62a593fd7a4ce7067102288bd28f/libgo%2Fruntime%2Fmalloc.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fruntime%2Fmalloc.h?ref=03a231f7521b62a593fd7a4ce7067102288bd28f", "patch": "@@ -515,3 +515,4 @@ void\truntime_memorydump(void);\n \n void\truntime_proc_scan(void (*)(Obj));\n void\truntime_time_scan(void (*)(Obj));\n+void\truntime_netpoll_scan(void (*)(Obj));"}, {"sha": "865f19304892da39e28e1b3811dbd51d2dfbd81c", "filename": "libgo/runtime/mgc0.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/03a231f7521b62a593fd7a4ce7067102288bd28f/libgo%2Fruntime%2Fmgc0.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/03a231f7521b62a593fd7a4ce7067102288bd28f/libgo%2Fruntime%2Fmgc0.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fruntime%2Fmgc0.c?ref=03a231f7521b62a593fd7a4ce7067102288bd28f", "patch": "@@ -1491,6 +1491,7 @@ addroots(void)\n \truntime_proc_scan(addroot);\n \truntime_MProf_Mark(addroot);\n \truntime_time_scan(addroot);\n+\truntime_netpoll_scan(addroot);\n \n \t// MSpan.types\n \tallspans = runtime_mheap.allspans;"}, {"sha": "2acbca32322151c38ae30106c22fecac2801d2fb", "filename": "libgo/runtime/netpoll_epoll.c", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/03a231f7521b62a593fd7a4ce7067102288bd28f/libgo%2Fruntime%2Fnetpoll_epoll.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/03a231f7521b62a593fd7a4ce7067102288bd28f/libgo%2Fruntime%2Fnetpoll_epoll.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fruntime%2Fnetpoll_epoll.c?ref=03a231f7521b62a593fd7a4ce7067102288bd28f", "patch": "@@ -11,6 +11,7 @@\n \n #include \"runtime.h\"\n #include \"defs.h\"\n+#include \"malloc.h\"\n \n #ifndef EPOLLRDHUP\n #define EPOLLRDHUP 0x2000\n@@ -156,3 +157,9 @@ runtime_netpoll(bool block)\n \t\tgoto retry;\n \treturn gp;\n }\n+\n+void\n+runtime_netpoll_scan(void (*addroot)(Obj))\n+{\n+\tUSED(addroot);\n+}"}, {"sha": "5d3f85617b6d1325d9c7aa61563bd14b9946c493", "filename": "libgo/runtime/netpoll_kqueue.c", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/03a231f7521b62a593fd7a4ce7067102288bd28f/libgo%2Fruntime%2Fnetpoll_kqueue.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/03a231f7521b62a593fd7a4ce7067102288bd28f/libgo%2Fruntime%2Fnetpoll_kqueue.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fruntime%2Fnetpoll_kqueue.c?ref=03a231f7521b62a593fd7a4ce7067102288bd28f", "patch": "@@ -5,8 +5,8 @@\n // +build darwin dragonfly freebsd netbsd openbsd\n \n #include \"runtime.h\"\n-#include \"defs_GOOS_GOARCH.h\"\n-#include \"os_GOOS.h\"\n+#include \"defs.h\"\n+#include \"malloc.h\"\n \n // Integrated network poller (kqueue-based implementation).\n \n@@ -102,3 +102,9 @@ runtime_netpoll(bool block)\n \t\tgoto retry;\n \treturn gp;\n }\n+\n+void\n+runtime_netpoll_scan(void (*addroot)(Obj))\n+{\n+\tUSED(addroot);\n+}"}, {"sha": "c330f28418fcddb849a8d0436ada033148308be6", "filename": "libgo/runtime/netpoll_select.c", "status": "added", "additions": 223, "deletions": 0, "changes": 223, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/03a231f7521b62a593fd7a4ce7067102288bd28f/libgo%2Fruntime%2Fnetpoll_select.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/03a231f7521b62a593fd7a4ce7067102288bd28f/libgo%2Fruntime%2Fnetpoll_select.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fruntime%2Fnetpoll_select.c?ref=03a231f7521b62a593fd7a4ce7067102288bd28f", "patch": "@@ -0,0 +1,223 @@\n+// Copyright 2013 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+// +build solaris\n+\n+#include \"config.h\"\n+\n+#include <errno.h>\n+#include <sys/times.h>\n+#include <sys/types.h>\n+#include <unistd.h>\n+#include <fcntl.h>\n+\n+#ifdef HAVE_SYS_SELECT_H\n+#include <sys/select.h>\n+#endif\n+\n+#include \"runtime.h\"\n+#include \"malloc.h\"\n+\n+static Lock selectlock;\n+static int rdwake;\n+static int wrwake;\n+static fd_set fds;\n+static PollDesc **data;\n+static int allocated;\n+\n+void\n+runtime_netpollinit(void)\n+{\n+\tint p[2];\n+\tint fl;\n+\n+\tFD_ZERO(&fds);\n+\tallocated = 128;\n+\tdata = runtime_mallocgc(allocated * sizeof(PollDesc *), 0,\n+\t\t\t\tFlagNoScan|FlagNoProfiling|FlagNoInvokeGC);\n+\n+\tif(pipe(p) < 0)\n+\t\truntime_throw(\"netpollinit: failed to create pipe\");\n+\trdwake = p[0];\n+\twrwake = p[1];\n+\n+\tfl = fcntl(rdwake, F_GETFL);\n+\tif(fl < 0)\n+\t\truntime_throw(\"netpollinit: fcntl failed\");\n+\tfl |= O_NONBLOCK;\n+\tif(fcntl(rdwake, F_SETFL, fl))\n+\t\t runtime_throw(\"netpollinit: fcntl failed\");\n+\tfcntl(rdwake, F_SETFD, FD_CLOEXEC);\n+\n+\tfl = fcntl(wrwake, F_GETFL);\n+\tif(fl < 0)\n+\t\truntime_throw(\"netpollinit: fcntl failed\");\n+\tfl |= O_NONBLOCK;\n+\tif(fcntl(wrwake, F_SETFL, fl))\n+\t\t runtime_throw(\"netpollinit: fcntl failed\");\n+\tfcntl(wrwake, F_SETFD, FD_CLOEXEC);\n+\n+\tFD_SET(rdwake, &fds);\n+}\n+\n+int32\n+runtime_netpollopen(uintptr fd, PollDesc *pd)\n+{\n+\tbyte b;\n+\n+\truntime_lock(&selectlock);\n+\n+\tif((int)fd >= allocated) {\n+\t\tint c;\n+\t\tPollDesc **n;\n+\n+\t\tc = allocated;\n+\n+\t\truntime_unlock(&selectlock);\n+\n+\t\twhile((int)fd >= c)\n+\t\t\tc *= 2;\n+\t\tn = runtime_mallocgc(c * sizeof(PollDesc *), 0,\n+\t\t\t\t     FlagNoScan|FlagNoProfiling|FlagNoInvokeGC);\n+\n+\t\truntime_lock(&selectlock);\n+\n+\t\tif(c > allocated) {\n+\t\t\t__builtin_memcpy(n, data, allocated * sizeof(PollDesc *));\n+\t\t\tallocated = c;\n+\t\t\tdata = n;\n+\t\t}\n+\t}\n+\tFD_SET(fd, &fds);\n+\tdata[fd] = pd;\n+\n+\truntime_unlock(&selectlock);\n+\n+\tb = 0;\n+\twrite(wrwake, &b, sizeof b);\n+\n+\treturn 0;\n+}\n+\n+int32\n+runtime_netpollclose(uintptr fd)\n+{\n+\tbyte b;\n+\n+\truntime_lock(&selectlock);\n+\n+\tFD_CLR(fd, &fds);\n+\tdata[fd] = nil;\n+\n+\truntime_unlock(&selectlock);\n+\n+\tb = 0;\n+\twrite(wrwake, &b, sizeof b);\n+\n+\treturn 0;\n+}\n+\n+G*\n+runtime_netpoll(bool block)\n+{\n+\tfd_set rfds, wfds, efds, tfds;\n+\tstruct timeval timeout;\n+\tstruct timeval *pt;\n+\tint max, c, i;\n+\tG *gp;\n+\tint32 mode;\n+\tbyte b;\n+\tstruct stat st;\n+\n+ retry:\n+\truntime_lock(&selectlock);\n+\n+\tmax = allocated;\n+\n+\tif(max == 0) {\n+\t\truntime_unlock(&selectlock);\n+\t\treturn nil;\n+\t}\n+\n+\t__builtin_memcpy(&rfds, &fds, sizeof fds);\n+\n+\truntime_unlock(&selectlock);\n+\n+\t__builtin_memcpy(&wfds, &rfds, sizeof fds);\n+\tFD_CLR(rdwake, &wfds);\n+\t__builtin_memcpy(&efds, &wfds, sizeof fds);\n+\n+\t__builtin_memcpy(&tfds, &wfds, sizeof fds);\n+\n+\t__builtin_memset(&timeout, 0, sizeof timeout);\n+\tpt = &timeout;\n+\tif(block)\n+\t\tpt = nil;\n+\n+\tc = select(max, &rfds, &wfds, &efds, pt);\n+\tif(c < 0) {\n+\t\tif(errno == EBADF) {\n+\t\t\t// Some file descriptor has been closed.\n+\t\t\t// Check each one, and treat each closed\n+\t\t\t// descriptor as ready for read/write.\n+\t\t\tc = 0;\n+\t\t\tFD_ZERO(&rfds);\n+\t\t\tFD_ZERO(&wfds);\n+\t\t\tFD_ZERO(&efds);\n+\t\t\tfor(i = 0; i < max; i++) {\n+\t\t\t\tif(FD_ISSET(i, &tfds)\n+\t\t\t\t   && fstat(i, &st) < 0\n+\t\t\t\t   && errno == EBADF) {\n+\t\t\t\t\tFD_SET(i, &rfds);\n+\t\t\t\t\tFD_SET(i, &wfds);\n+\t\t\t\t\tc += 2;\n+\t\t\t\t}\n+\t\t\t}\n+\t\t}\n+\t\telse {\n+\t\t\tif(errno != EINTR)\n+\t\t\t\truntime_printf(\"runtime: select failed with %d\\n\", errno);\n+\t\t\tgoto retry;\n+\t\t}\n+\t}\n+\tgp = nil;\n+\tfor(i = 0; i < max && c > 0; i++) {\n+\t\tmode = 0;\n+\t\tif(FD_ISSET(i, &rfds)) {\n+\t\t\tmode += 'r';\n+\t\t\t--c;\n+\t\t}\n+\t\tif(FD_ISSET(i, &wfds)) {\n+\t\t\tmode += 'w';\n+\t\t\t--c;\n+\t\t}\n+\t\tif(FD_ISSET(i, &efds)) {\n+\t\t\tmode = 'r' + 'w';\n+\t\t\t--c;\n+\t\t}\n+\t\tif(i == rdwake) {\n+\t\t\twhile(read(rdwake, &b, sizeof b) > 0)\n+\t\t\t\t;\n+\t\t\tcontinue;\n+\t\t}\n+\t\tif(mode) {\n+\t\t\tPollDesc *pd;\n+\n+\t\t\truntime_lock(&selectlock);\n+\t\t\tpd = data[i];\n+\t\t\truntime_unlock(&selectlock);\n+\t\t\tif(pd != nil)\n+\t\t\t\truntime_netpollready(&gp, pd, mode);\n+\t\t}\n+\t}\n+\tif(block && gp == nil)\n+\t\tgoto retry;\n+\treturn gp;\n+}\n+\n+void\n+runtime_netpoll_scan(void (*addroot)(Obj))\n+{\n+\taddroot((Obj){(byte*)&data, sizeof data, 0});\n+}"}, {"sha": "a88c9f5b9c2d4bd1bfb7ece1370818ef70177af6", "filename": "libgo/runtime/netpoll_stub.c", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/03a231f7521b62a593fd7a4ce7067102288bd28f/libgo%2Fruntime%2Fnetpoll_stub.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/03a231f7521b62a593fd7a4ce7067102288bd28f/libgo%2Fruntime%2Fnetpoll_stub.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fruntime%2Fnetpoll_stub.c?ref=03a231f7521b62a593fd7a4ce7067102288bd28f", "patch": "@@ -5,6 +5,7 @@\n // +build plan9\n \n #include \"runtime.h\"\n+#include \"malloc.h\"\n \n // Polls for ready network connections.\n // Returns list of goroutines that become runnable.\n@@ -16,3 +17,9 @@ runtime_netpoll(bool block)\n \tUSED(block);\n \treturn nil;\n }\n+\n+void\n+runtime_netpoll_scan(void (*addroot)(Obj))\n+{\n+\tUSED(addroot);\n+}"}]}