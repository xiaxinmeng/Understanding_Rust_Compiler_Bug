{"sha": "6ee2c06c47a905b11ee5b674710df187126203bc", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmVlMmMwNmM0N2E5MDViMTFlZTViNjc0NzEwZGYxODcxMjYyMDNiYw==", "commit": {"author": {"name": "SimplyTheOther", "email": "simplytheother@gmail.com", "date": "2020-12-13T07:47:32Z"}, "committer": {"name": "SimplyTheOther", "email": "simplytheother@gmail.com", "date": "2020-12-13T07:47:32Z"}, "message": "Attempt to fix array parsing errors", "tree": {"sha": "255f82f294ec703fe6b53e6413e4c1f449f5911e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/255f82f294ec703fe6b53e6413e4c1f449f5911e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6ee2c06c47a905b11ee5b674710df187126203bc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6ee2c06c47a905b11ee5b674710df187126203bc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6ee2c06c47a905b11ee5b674710df187126203bc", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6ee2c06c47a905b11ee5b674710df187126203bc/comments", "author": {"login": "SimplyTheOther", "id": 19371469, "node_id": "MDQ6VXNlcjE5MzcxNDY5", "avatar_url": "https://avatars.githubusercontent.com/u/19371469?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SimplyTheOther", "html_url": "https://github.com/SimplyTheOther", "followers_url": "https://api.github.com/users/SimplyTheOther/followers", "following_url": "https://api.github.com/users/SimplyTheOther/following{/other_user}", "gists_url": "https://api.github.com/users/SimplyTheOther/gists{/gist_id}", "starred_url": "https://api.github.com/users/SimplyTheOther/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SimplyTheOther/subscriptions", "organizations_url": "https://api.github.com/users/SimplyTheOther/orgs", "repos_url": "https://api.github.com/users/SimplyTheOther/repos", "events_url": "https://api.github.com/users/SimplyTheOther/events{/privacy}", "received_events_url": "https://api.github.com/users/SimplyTheOther/received_events", "type": "User", "site_admin": false}, "committer": {"login": "SimplyTheOther", "id": 19371469, "node_id": "MDQ6VXNlcjE5MzcxNDY5", "avatar_url": "https://avatars.githubusercontent.com/u/19371469?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SimplyTheOther", "html_url": "https://github.com/SimplyTheOther", "followers_url": "https://api.github.com/users/SimplyTheOther/followers", "following_url": "https://api.github.com/users/SimplyTheOther/following{/other_user}", "gists_url": "https://api.github.com/users/SimplyTheOther/gists{/gist_id}", "starred_url": "https://api.github.com/users/SimplyTheOther/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SimplyTheOther/subscriptions", "organizations_url": "https://api.github.com/users/SimplyTheOther/orgs", "repos_url": "https://api.github.com/users/SimplyTheOther/repos", "events_url": "https://api.github.com/users/SimplyTheOther/events{/privacy}", "received_events_url": "https://api.github.com/users/SimplyTheOther/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e21c9fe1657303605efeacd4890430e7d40c4c3c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e21c9fe1657303605efeacd4890430e7d40c4c3c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e21c9fe1657303605efeacd4890430e7d40c4c3c"}], "stats": {"total": 39, "additions": 34, "deletions": 5}, "files": [{"sha": "1ad0cf95d7f80501602a313c3c1081591bd00dc4", "filename": "gcc/rust/ast/rust-ast.h", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ee2c06c47a905b11ee5b674710df187126203bc/gcc%2Frust%2Fast%2Frust-ast.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ee2c06c47a905b11ee5b674710df187126203bc/gcc%2Frust%2Fast%2Frust-ast.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fast%2Frust-ast.h?ref=6ee2c06c47a905b11ee5b674710df187126203bc", "patch": "@@ -473,9 +473,9 @@ struct Attribute\n   std::string as_string () const;\n \n   // TODO: does this require visitor pattern as not polymorphic?\n-\n-  // Maybe change to const-reference in future\n-  SimplePath get_path () const { return path; }\n+  \n+  const SimplePath &get_path () const { return path; }\n+  SimplePath &get_path () { return path; }\n \n   // Call to parse attribute body to meta item syntax.\n   void parse_attr_to_meta_item ();"}, {"sha": "2cae0f9fbf57761b0082c1067b6b25c7a3da0185", "filename": "gcc/rust/ast/rust-macro.h", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ee2c06c47a905b11ee5b674710df187126203bc/gcc%2Frust%2Fast%2Frust-macro.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ee2c06c47a905b11ee5b674710df187126203bc/gcc%2Frust%2Fast%2Frust-macro.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fast%2Frust-macro.h?ref=6ee2c06c47a905b11ee5b674710df187126203bc", "patch": "@@ -318,6 +318,9 @@ class MacroRulesDefinition : public MacroItem\n   std::vector<Attribute> &get_outer_attrs () { return outer_attrs; }\n   const std::vector<Attribute> &get_outer_attrs () const { return outer_attrs; }\n \n+  std::vector<MacroRule> &get_macro_rules () { return rules; }\n+  const std::vector<MacroRule> &get_macro_rules () const { return rules; }\n+\n protected:\n   /* Use covariance to implement clone function as returning this object rather\n    * than base */\n@@ -355,6 +358,9 @@ class MacroInvocation : public TypeNoBounds,\n   void mark_for_strip () override { path = SimplePath::create_empty (); }\n   bool is_marked_for_strip () const override { return path.is_empty (); }\n \n+  const SimplePath &get_path () const { return path; }\n+  SimplePath &get_path () { return path; }\n+\n protected:\n   /* Use covariance to implement clone function as returning this object rather\n    * than base */"}, {"sha": "4f288366cc8aa903af52559ca58a411aebafcac0", "filename": "gcc/rust/expand/rust-macro-expand.cc", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ee2c06c47a905b11ee5b674710df187126203bc/gcc%2Frust%2Fexpand%2Frust-macro-expand.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ee2c06c47a905b11ee5b674710df187126203bc/gcc%2Frust%2Fexpand%2Frust-macro-expand.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fexpand%2Frust-macro-expand.cc?ref=6ee2c06c47a905b11ee5b674710df187126203bc", "patch": "@@ -3291,6 +3291,25 @@ MacroExpander::expand_invoc (std::unique_ptr<AST::MacroInvocation> &invoc)\n \t  - derive or legacy derive - \"token-based\" vs \"AST-based\"\n \t  - else is unreachable\n       - derive container macro - unreachable*/\n+  \n+#if 0\n+  // macro_rules macro test code\n+  auto rule_def = find_rules_def(invoc->get_path());\n+  if (rule_def != nullptr) {\n+    ASTFrag expanded = expand_decl_macro(invoc, rule_def);\n+    /* could make this a data structure containing vectors of exprs, patterns and types (for regular),\n+     * and then stmts and items (for semi). Except what about having an expr, then a type? Hmm. Might\n+     * have to do the \"unified base type\" thing OR just have a simulated union, and then have AST frag\n+     * be a vector of these simulated unions. */\n+\n+    // how would errors be signalled? null fragment? something else?\n+    // what about error vs just not having stuff in rules definition yet?\n+\n+    /* replace macro invocation with ast frag. actually, don't have any context here. maybe attach ast \n+     * frag to macro invocation, and then have a method above get it? Or just return the ast frag from \n+     * this method. */\n+  }\n+#endif\n }\n \n /* Determines whether any cfg predicate is false and hence item with attributes"}, {"sha": "bade40c00a9fb8d15b6d44f6db3a3cda7e3fe23c", "filename": "gcc/rust/parse/rust-parse-impl.h", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ee2c06c47a905b11ee5b674710df187126203bc/gcc%2Frust%2Fparse%2Frust-parse-impl.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ee2c06c47a905b11ee5b674710df187126203bc/gcc%2Frust%2Fparse%2Frust-parse-impl.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fparse%2Frust-parse-impl.h?ref=6ee2c06c47a905b11ee5b674710df187126203bc", "patch": "@@ -8431,6 +8431,8 @@ Parser<ManagedTokenSource>::parse_array_expr (\n \t      return nullptr;\n \t    }\n \n+    skip_token (RIGHT_SQUARE);\n+\n \t  std::unique_ptr<AST::ArrayElemsCopied> copied_array_elems (\n \t    new AST::ArrayElemsCopied (std::move (initial_expr),\n \t\t\t\t       std::move (copy_amount)));\n@@ -8447,6 +8449,8 @@ Parser<ManagedTokenSource>::parse_array_expr (\n \t  exprs.push_back (std::move (initial_expr));\n \t  exprs.shrink_to_fit ();\n \n+    skip_token (RIGHT_SQUARE);\n+\n \t  std::unique_ptr<AST::ArrayElemsValues> array_elems (\n \t    new AST::ArrayElemsValues (std::move (exprs)));\n \t  return std::unique_ptr<AST::ArrayExpr> (\n@@ -13709,8 +13713,8 @@ Parser<ManagedTokenSource>::parse_field_access_expr (\n   std::vector<AST::Attribute> outer_attrs,\n   ParseRestrictions restrictions ATTRIBUTE_UNUSED)\n {\n-  // get field name identifier (assume that this is a field access expr and not\n-  // say await)\n+  /* get field name identifier (assume that this is a field access expr and not\n+   * await, for instance) */\n   const_TokenPtr ident_tok = expect_token (IDENTIFIER);\n   Identifier ident = ident_tok->get_str ();\n "}]}