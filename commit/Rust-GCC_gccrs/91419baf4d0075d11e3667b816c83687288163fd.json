{"sha": "91419baf4d0075d11e3667b816c83687288163fd", "node_id": "C_kwDOANBUbNoAKDkxNDE5YmFmNGQwMDc1ZDExZTM2NjdiODE2YzgzNjg3Mjg4MTYzZmQ", "commit": {"author": {"name": "Haochen Gui", "email": "guihaoc@gcc.gnu.org", "date": "2021-10-19T08:28:31Z"}, "committer": {"name": "Haochen Gui", "email": "guihaoc@gcc.gnu.org", "date": "2021-10-19T08:47:22Z"}, "message": "Optimize the builtin vec_xl_sext\n\ngcc/\n\t* config/rs6000/rs6000-call.c (altivec_expand_lxvr_builtin):\n\tModify the expansion for sign extension. All extensions are done\n\twithin VSX registers.\n\ngcc/testsuite/\n\t* gcc.target/powerpc/p10_vec_xl_sext.c: New test.", "tree": {"sha": "cb996df9dbfe1d5f2d340548f84b6b8e9230390c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/cb996df9dbfe1d5f2d340548f84b6b8e9230390c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/91419baf4d0075d11e3667b816c83687288163fd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/91419baf4d0075d11e3667b816c83687288163fd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/91419baf4d0075d11e3667b816c83687288163fd", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/91419baf4d0075d11e3667b816c83687288163fd/comments", "author": null, "committer": null, "parents": [{"sha": "6b4c18b98127087d7f14062b81bc678f0589cd36", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6b4c18b98127087d7f14062b81bc678f0589cd36", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6b4c18b98127087d7f14062b81bc678f0589cd36"}], "stats": {"total": 68, "additions": 57, "deletions": 11}, "files": [{"sha": "6d8727c2bd81112519329d0d343b486dce78662d", "filename": "gcc/config/rs6000/rs6000-call.c", "status": "modified", "additions": 22, "deletions": 11, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/91419baf4d0075d11e3667b816c83687288163fd/gcc%2Fconfig%2Frs6000%2Frs6000-call.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/91419baf4d0075d11e3667b816c83687288163fd/gcc%2Fconfig%2Frs6000%2Frs6000-call.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000-call.c?ref=91419baf4d0075d11e3667b816c83687288163fd", "patch": "@@ -9959,7 +9959,7 @@ altivec_expand_lxvr_builtin (enum insn_code icode, tree exp, rtx target, bool bl\n \n   if (sign_extend)\n     {\n-      rtx discratch = gen_reg_rtx (DImode);\n+      rtx discratch = gen_reg_rtx (V2DImode);\n       rtx tiscratch = gen_reg_rtx (TImode);\n \n       /* Emit the lxvr*x insn.  */\n@@ -9968,20 +9968,31 @@ altivec_expand_lxvr_builtin (enum insn_code icode, tree exp, rtx target, bool bl\n \treturn 0;\n       emit_insn (pat);\n \n-      /* Emit a sign extension from QI,HI,WI to double (DI).  */\n-      rtx scratch = gen_lowpart (smode, tiscratch);\n+      /* Emit a sign extension from V16QI,V8HI,V4SI to V2DI.  */\n+      rtx temp1, temp2;\n       if (icode == CODE_FOR_vsx_lxvrbx)\n-\temit_insn (gen_extendqidi2 (discratch, scratch));\n+\t{\n+\t  temp1  = simplify_gen_subreg (V16QImode, tiscratch, TImode, 0);\n+\t  emit_insn (gen_vsx_sign_extend_qi_v2di (discratch, temp1));\n+\t}\n       else if (icode == CODE_FOR_vsx_lxvrhx)\n-\temit_insn (gen_extendhidi2 (discratch, scratch));\n+\t{\n+\t  temp1  = simplify_gen_subreg (V8HImode, tiscratch, TImode, 0);\n+\t  emit_insn (gen_vsx_sign_extend_hi_v2di (discratch, temp1));\n+\t}\n       else if (icode == CODE_FOR_vsx_lxvrwx)\n-\temit_insn (gen_extendsidi2 (discratch, scratch));\n-      /*  Assign discratch directly if scratch is already DI.  */\n-      if (icode == CODE_FOR_vsx_lxvrdx)\n-\tdiscratch = scratch;\n+\t{\n+\t  temp1  = simplify_gen_subreg (V4SImode, tiscratch, TImode, 0);\n+\t  emit_insn (gen_vsx_sign_extend_si_v2di (discratch, temp1));\n+\t}\n+      else if (icode == CODE_FOR_vsx_lxvrdx)\n+\tdiscratch = simplify_gen_subreg (V2DImode, tiscratch, TImode, 0);\n+      else\n+\tgcc_unreachable ();\n \n-      /* Emit the sign extension from DI (double) to TI (quad).  */\n-      emit_insn (gen_extendditi2 (target, discratch));\n+      /* Emit the sign extension from V2DI (double) to TI (quad).  */\n+      temp2 = simplify_gen_subreg (TImode, discratch, V2DImode, 0);\n+      emit_insn (gen_extendditi2_vector (target, temp2));\n \n       return target;\n     }"}, {"sha": "78e72ac542549e414ae7e345453d18add6b20a87", "filename": "gcc/testsuite/gcc.target/powerpc/p10_vec_xl_sext.c", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/91419baf4d0075d11e3667b816c83687288163fd/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fp10_vec_xl_sext.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/91419baf4d0075d11e3667b816c83687288163fd/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fp10_vec_xl_sext.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fp10_vec_xl_sext.c?ref=91419baf4d0075d11e3667b816c83687288163fd", "patch": "@@ -0,0 +1,35 @@\n+/* { dg-do compile } */\n+/* { dg-require-effective-target int128 } */\n+/* { dg-require-effective-target power10_ok } */\n+/* { dg-options \"-mdejagnu-cpu=power10 -O2\" } */\n+\n+#include <altivec.h>\n+\n+vector signed __int128\n+foo1 (signed long a, signed char *b)\n+{\n+  return vec_xl_sext (a, b);\n+}\n+\n+vector signed __int128\n+foo2 (signed long a, signed short *b)\n+{\n+  return vec_xl_sext (a, b);\n+}\n+\n+vector signed __int128\n+foo3 (signed long a, signed int *b)\n+{\n+  return vec_xl_sext (a, b);\n+}\n+\n+vector signed __int128\n+foo4 (signed long a, signed long *b)\n+{\n+  return vec_xl_sext (a, b);\n+}\n+\n+/* { dg-final { scan-assembler-times {\\mvextsd2q\\M} 4 } } */\n+/* { dg-final { scan-assembler-times {\\mvextsb2d\\M} 1 } } */\n+/* { dg-final { scan-assembler-times {\\mvextsh2d\\M} 1 } } */\n+/* { dg-final { scan-assembler-times {\\mvextsw2d\\M} 1 } } */"}]}