{"sha": "1f1ed00cba372b15053f49490d70a28ee99f2cb5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWYxZWQwMGNiYTM3MmIxNTA1M2Y0OTQ5MGQ3MGEyOGVlOTlmMmNiNQ==", "commit": {"author": {"name": "Jeffrey A Law", "email": "law@cygnus.com", "date": "1998-08-26T15:30:58Z"}, "committer": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "1998-08-26T15:30:58Z"}, "message": "haifa-sched.c (sched_analyze_insn): Only create scheduling barriers for LOOP...\n\n        * haifa-sched.c (sched_analyze_insn): Only create scheduling\n        barriers for LOOP, EH and SETJMP notes on the loop_notes list.\n\nFrom-SVN: r22005", "tree": {"sha": "3c7b669515e0d348d425a8d51b063ae78059d9e9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3c7b669515e0d348d425a8d51b063ae78059d9e9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1f1ed00cba372b15053f49490d70a28ee99f2cb5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1f1ed00cba372b15053f49490d70a28ee99f2cb5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1f1ed00cba372b15053f49490d70a28ee99f2cb5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1f1ed00cba372b15053f49490d70a28ee99f2cb5/comments", "author": null, "committer": null, "parents": [{"sha": "dbfe21241f2cd4a39b35ef393710166ad3c4b42b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dbfe21241f2cd4a39b35ef393710166ad3c4b42b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/dbfe21241f2cd4a39b35ef393710166ad3c4b42b"}], "stats": {"total": 55, "additions": 38, "deletions": 17}, "files": [{"sha": "62b3bb1676cafd9e2e7fa5f27bbc3156e5e70303", "filename": "gcc/ChangeLog", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1f1ed00cba372b15053f49490d70a28ee99f2cb5/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1f1ed00cba372b15053f49490d70a28ee99f2cb5/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=1f1ed00cba372b15053f49490d70a28ee99f2cb5", "patch": "@@ -5,6 +5,9 @@ Wed Aug 26 09:30:59 1998  Nick Clifton  <nickc@cygnus.com>\n \n Wed Aug 26 12:57:09 1998  Jeffrey A Law  (law@cygnus.com)\n \n+\t* haifa-sched.c (sched_analyze_insn): Only create scheduling\n+\tbarriers for LOOP, EH and SETJMP notes on the loop_notes list.\n+\n \t* mn10300.h (RTX_COSTS): Handle UDIV and UMOD too.\n \n Wed Aug 26 16:35:37 1998  J\"orn Rennecke <amylaar@cygnus.co.uk>"}, {"sha": "12e82d6dfaf2f786f76d4918309a68be268af9a2", "filename": "gcc/haifa-sched.c", "status": "modified", "additions": 35, "deletions": 17, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1f1ed00cba372b15053f49490d70a28ee99f2cb5/gcc%2Fhaifa-sched.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1f1ed00cba372b15053f49490d70a28ee99f2cb5/gcc%2Fhaifa-sched.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fhaifa-sched.c?ref=1f1ed00cba372b15053f49490d70a28ee99f2cb5", "patch": "@@ -3687,36 +3687,54 @@ sched_analyze_insn (x, insn, loop_notes)\n \t  sched_analyze_2 (XEXP (link, 0), insn);\n       }\n \n-  /* If there is a {LOOP,EHREGION}_{BEG,END} note in the middle of a basic block, then\n-     we must be sure that no instructions are scheduled across it.\n+  /* If there is a {LOOP,EHREGION}_{BEG,END} note in the middle of a basic\n+     block, then we must be sure that no instructions are scheduled across it.\n      Otherwise, the reg_n_refs info (which depends on loop_depth) would\n      become incorrect.  */\n \n   if (loop_notes)\n     {\n       int max_reg = max_reg_num ();\n+      int schedule_barrier_found = 0;\n       rtx link;\n \n-      for (i = 0; i < max_reg; i++)\n+      /* Update loop_notes with any notes from this insn.  Also determine\n+\t if any of the notes on the list correspond to instruction scheduling\n+\t barriers (loop, eh & setjmp notes, but not range notes.  */\n+      link = loop_notes;\n+      while (XEXP (link, 1))\n \t{\n-\t  rtx u;\n-\t  for (u = reg_last_uses[i]; u; u = XEXP (u, 1))\n-\t    add_dependence (insn, XEXP (u, 0), REG_DEP_ANTI);\n-\t  reg_last_uses[i] = 0;\n+\t  if (XINT (link, 0) == NOTE_INSN_LOOP_BEG\n+\t      || XINT (link, 0) == NOTE_INSN_LOOP_END\n+\t      || XINT (link, 0) == NOTE_INSN_EH_REGION_BEG\n+\t      || XINT (link, 0) == NOTE_INSN_EH_REGION_END\n+\t      || XINT (link, 0) == NOTE_INSN_SETJMP)\n+\t    schedule_barrier_found = 1;\n \n-\t  /* reg_last_sets[r] is now a list of insns */\n-\t  for (u = reg_last_sets[i]; u; u = XEXP (u, 1))\n-\t    add_dependence (insn, XEXP (u, 0), 0);\n+\t  link = XEXP (link, 1);\n \t}\n-      reg_pending_sets_all = 1;\n-\n-      flush_pending_lists (insn, 0);\n-\n-      link = loop_notes;\n-      while (XEXP (link, 1))\n-\tlink = XEXP (link, 1);\n       XEXP (link, 1) = REG_NOTES (insn);\n       REG_NOTES (insn) = loop_notes;\n+\n+      /* Add dependencies if a scheduling barrier was found.  */\n+      if (schedule_barrier_found)\n+\t{\n+\t  for (i = 0; i < max_reg; i++)\n+\t    {\n+\t      rtx u;\n+\t      for (u = reg_last_uses[i]; u; u = XEXP (u, 1))\n+\t\tadd_dependence (insn, XEXP (u, 0), REG_DEP_ANTI);\n+\t      reg_last_uses[i] = 0;\n+\n+\t      /* reg_last_sets[r] is now a list of insns */\n+\t      for (u = reg_last_sets[i]; u; u = XEXP (u, 1))\n+\t\tadd_dependence (insn, XEXP (u, 0), 0);\n+\t    }\n+\t  reg_pending_sets_all = 1;\n+\n+\t  flush_pending_lists (insn, 0);\n+\t}\n+\n     }\n \n   /* After reload, it is possible for an instruction to have a REG_DEAD note"}]}