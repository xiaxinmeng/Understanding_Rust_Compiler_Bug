{"sha": "0c30e0f3160716430de36f359cd120aa875dcb82", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGMzMGUwZjMxNjA3MTY0MzBkZTM2ZjM1OWNkMTIwYWE4NzVkY2I4Mg==", "commit": {"author": {"name": "Evandro Menezes", "email": "e.menezes@samsung.com", "date": "2016-02-26T23:41:53Z"}, "committer": {"name": "Evandro Menezes", "email": "evandro@gcc.gnu.org", "date": "2016-02-26T23:41:53Z"}, "message": "Rename the tuning option and related functions to enable the Newton series for the reciprocal square root to reflect its approximative characteristic.\n\ngcc/\n\t* config/aarch64/aarch64-protos.h (aarch64_emit_swrsqrt): Rename\n\tfunction to \"aarch64_emit_approx_rsqrt\".\n\t* config/aarch64/aarch64-tuning-flags.def: Rename tuning flag to\n\tAARCH64_EXTRA_TUNE_APPROX_RSQRT.\n\t* config/aarch64/aarch64.c (exynosm1_tunigs): Use new flag name.\n\t(xgene1_tunings): Likewise.\n\t(use_rsqrt_p): Likewise.\n\t(aarch64_emit_swrsqrt): Use new function name.\n\t* config/aarch64/aarch64-simd.md (aarch64_rsqrts_*): Likewise.\n\t* config/aarch64/aarch64.opt (mlow-precision-recip-sqrt): Reword the\n\ttext explaining this option.\n\t* doc/invoke.texi (-mlow-precision-recip-sqrt): Likewise.\n\nFrom-SVN: r233772", "tree": {"sha": "fd190d707411a2a565e5dc493446708ec6eccf62", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/fd190d707411a2a565e5dc493446708ec6eccf62"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0c30e0f3160716430de36f359cd120aa875dcb82", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0c30e0f3160716430de36f359cd120aa875dcb82", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0c30e0f3160716430de36f359cd120aa875dcb82", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0c30e0f3160716430de36f359cd120aa875dcb82/comments", "author": null, "committer": null, "parents": [{"sha": "20ba5f3318378eb29b15674e2ef37c6c26a1d465", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/20ba5f3318378eb29b15674e2ef37c6c26a1d465", "html_url": "https://github.com/Rust-GCC/gccrs/commit/20ba5f3318378eb29b15674e2ef37c6c26a1d465"}], "stats": {"total": 66, "additions": 41, "deletions": 25}, "files": [{"sha": "8cece6bde41797d062ee64ef905bdbd23d7a4e14", "filename": "gcc/ChangeLog", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0c30e0f3160716430de36f359cd120aa875dcb82/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0c30e0f3160716430de36f359cd120aa875dcb82/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=0c30e0f3160716430de36f359cd120aa875dcb82", "patch": "@@ -1,3 +1,23 @@\n+2016-02-26  Evandro Menezes  <e.menezes@samsung.com>\n+\n+\tRename the AArch64 tuning option and related functions to enable the\n+\tNewton series for the reciprocal square root to reflect its\n+\tapproximative characteristic.\n+\n+\tgcc/\n+\t* config/aarch64/aarch64-protos.h (aarch64_emit_swrsqrt): Rename\n+\tfunction to \"aarch64_emit_approx_rsqrt\".\n+\t* config/aarch64/aarch64-tuning-flags.def: Rename tuning flag to\n+\tAARCH64_EXTRA_TUNE_APPROX_RSQRT.\n+\t* config/aarch64/aarch64.c (exynosm1_tunigs): Use new flag name.\n+\t(xgene1_tunings): Likewise.\n+\t(use_rsqrt_p): Likewise.\n+\t(aarch64_emit_swrsqrt): Use new function name.\n+\t* config/aarch64/aarch64-simd.md (aarch64_rsqrts_*): Likewise.\n+\t* config/aarch64/aarch64.opt (mlow-precision-recip-sqrt): Reword the\n+\ttext explaining this option.\n+\t* doc/invoke.texi (-mlow-precision-recip-sqrt): Likewise.\n+\n 2016-02-26  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR target/69969"}, {"sha": "acf2062245f12e049e0a8639ab6a5d95ca842e6d", "filename": "gcc/config/aarch64/aarch64-protos.h", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0c30e0f3160716430de36f359cd120aa875dcb82/gcc%2Fconfig%2Faarch64%2Faarch64-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0c30e0f3160716430de36f359cd120aa875dcb82/gcc%2Fconfig%2Faarch64%2Faarch64-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-protos.h?ref=0c30e0f3160716430de36f359cd120aa875dcb82", "patch": "@@ -360,8 +360,7 @@ void aarch64_emit_call_insn (rtx);\n void aarch64_register_pragmas (void);\n void aarch64_relayout_simd_types (void);\n void aarch64_reset_previous_fndecl (void);\n-\n-void aarch64_emit_swrsqrt (rtx, rtx);\n+void aarch64_emit_approx_rsqrt (rtx, rtx);\n \n /* Initialize builtins for SIMD intrinsics.  */\n void init_aarch64_simd_builtins (void);\n@@ -413,9 +412,7 @@ rtx aarch64_expand_builtin (tree exp,\n \t\t\t    machine_mode mode ATTRIBUTE_UNUSED,\n \t\t\t    int ignore ATTRIBUTE_UNUSED);\n tree aarch64_builtin_decl (unsigned, bool ATTRIBUTE_UNUSED);\n-\n tree aarch64_builtin_rsqrt (unsigned int);\n-\n tree aarch64_builtin_vectorized_function (unsigned int, tree, tree);\n \n extern void aarch64_split_combinev16qi (rtx operands[3]);"}, {"sha": "bd73bce64414e8bc01732d14311d742cf28f4586", "filename": "gcc/config/aarch64/aarch64-simd.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0c30e0f3160716430de36f359cd120aa875dcb82/gcc%2Fconfig%2Faarch64%2Faarch64-simd.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0c30e0f3160716430de36f359cd120aa875dcb82/gcc%2Fconfig%2Faarch64%2Faarch64-simd.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-simd.md?ref=0c30e0f3160716430de36f359cd120aa875dcb82", "patch": "@@ -405,7 +405,7 @@\n \t\t     UNSPEC_RSQRT))]\n   \"TARGET_SIMD\"\n {\n-  aarch64_emit_swrsqrt (operands[0], operands[1]);\n+  aarch64_emit_approx_rsqrt (operands[0], operands[1]);\n   DONE;\n })\n "}, {"sha": "7e45a0c735dfbaaa8d078fd49ee178daa44ac908", "filename": "gcc/config/aarch64/aarch64-tuning-flags.def", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0c30e0f3160716430de36f359cd120aa875dcb82/gcc%2Fconfig%2Faarch64%2Faarch64-tuning-flags.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0c30e0f3160716430de36f359cd120aa875dcb82/gcc%2Fconfig%2Faarch64%2Faarch64-tuning-flags.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-tuning-flags.def?ref=0c30e0f3160716430de36f359cd120aa875dcb82", "patch": "@@ -29,5 +29,5 @@\n      AARCH64_TUNE_ to give an enum name. */\n \n AARCH64_EXTRA_TUNING_OPTION (\"rename_fma_regs\", RENAME_FMA_REGS)\n-AARCH64_EXTRA_TUNING_OPTION (\"recip_sqrt\", RECIP_SQRT)\n+AARCH64_EXTRA_TUNING_OPTION (\"approx_rsqrt\", APPROX_RSQRT)\n "}, {"sha": "801f95ab7fd6dd88a9ae44e81b980100e3dcbcf0", "filename": "gcc/config/aarch64/aarch64.c", "status": "modified", "additions": 12, "deletions": 11, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0c30e0f3160716430de36f359cd120aa875dcb82/gcc%2Fconfig%2Faarch64%2Faarch64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0c30e0f3160716430de36f359cd120aa875dcb82/gcc%2Fconfig%2Faarch64%2Faarch64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64.c?ref=0c30e0f3160716430de36f359cd120aa875dcb82", "patch": "@@ -538,7 +538,7 @@ static const struct tune_params exynosm1_tunings =\n   48,\t/* max_case_values.  */\n   64,\t/* cache_line_size.  */\n   tune_params::AUTOPREFETCHER_OFF, /* autoprefetcher_model.  */\n-  (AARCH64_EXTRA_TUNE_RECIP_SQRT) /* tune_flags.  */\n+  (AARCH64_EXTRA_TUNE_APPROX_RSQRT) /* tune_flags.  */\n };\n \n static const struct tune_params thunderx_tunings =\n@@ -586,7 +586,7 @@ static const struct tune_params xgene1_tunings =\n   0,\t/* max_case_values.  */\n   0,\t/* cache_line_size.  */\n   tune_params::AUTOPREFETCHER_OFF,\t/* autoprefetcher_model.  */\n-  (AARCH64_EXTRA_TUNE_RECIP_SQRT)\t/* tune_flags.  */\n+  (AARCH64_EXTRA_TUNE_APPROX_RSQRT)\t/* tune_flags.  */\n };\n \n /* Support for fine-grained override of the tuning structures.  */\n@@ -7460,21 +7460,21 @@ aarch64_memory_move_cost (machine_mode mode ATTRIBUTE_UNUSED,\n   return aarch64_tune_params.memmov_cost;\n }\n \n-/* Return true if it is safe and beneficial to use the rsqrt optabs to\n-   optimize 1.0/sqrt.  */\n+/* Return true if it is safe and beneficial to use the approximate rsqrt optabs\n+   to optimize 1.0/sqrt.  */\n \n static bool\n use_rsqrt_p (void)\n {\n   return (!flag_trapping_math\n \t  && flag_unsafe_math_optimizations\n \t  && ((aarch64_tune_params.extra_tuning_flags\n-\t       & AARCH64_EXTRA_TUNE_RECIP_SQRT)\n+\t       & AARCH64_EXTRA_TUNE_APPROX_RSQRT)\n \t      || flag_mrecip_low_precision_sqrt));\n }\n \n-/* Function to decide when to use\n-   reciprocal square root builtins.  */\n+/* Function to decide when to use the approximate reciprocal square root\n+   builtin.  */\n \n static tree\n aarch64_builtin_reciprocal (tree fndecl)\n@@ -7522,12 +7522,12 @@ get_rsqrts_type (machine_mode mode)\n   }\n }\n \n-/* Emit instruction sequence to compute\n-   reciprocal square root.  Use two Newton-Raphson steps\n-   for single precision and three for double precision.  */\n+/* Emit instruction sequence to compute the reciprocal square root using the\n+   Newton-Raphson series.  Iterate over the series twice for SF\n+   and thrice for DF.  */\n \n void\n-aarch64_emit_swrsqrt (rtx dst, rtx src)\n+aarch64_emit_approx_rsqrt (rtx dst, rtx src)\n {\n   machine_mode mode = GET_MODE (src);\n   gcc_assert (\n@@ -7544,6 +7544,7 @@ aarch64_emit_swrsqrt (rtx dst, rtx src)\n \n   int iterations = double_mode ? 3 : 2;\n \n+  /* Optionally iterate over the series one less time than otherwise.  */\n   if (flag_mrecip_low_precision_sqrt)\n     iterations--;\n "}, {"sha": "49ef0c64e2b05261534d445fecb1d6a8d5946f4d", "filename": "gcc/config/aarch64/aarch64.opt", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0c30e0f3160716430de36f359cd120aa875dcb82/gcc%2Fconfig%2Faarch64%2Faarch64.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0c30e0f3160716430de36f359cd120aa875dcb82/gcc%2Fconfig%2Faarch64%2Faarch64.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64.opt?ref=0c30e0f3160716430de36f359cd120aa875dcb82", "patch": "@@ -151,5 +151,5 @@ PC relative literal loads.\n \n mlow-precision-recip-sqrt\n Common Var(flag_mrecip_low_precision_sqrt) Optimization\n-When calculating a sqrt approximation, run fewer steps.\n-This reduces precision, but can result in faster computation.\n+When calculating the reciprocal square root approximation,\n+uses one less step than otherwise, thus reducing latency and precision."}, {"sha": "4b5df0b7edd03a8a969258dcf3432c73596e2968", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0c30e0f3160716430de36f359cd120aa875dcb82/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0c30e0f3160716430de36f359cd120aa875dcb82/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=0c30e0f3160716430de36f359cd120aa875dcb82", "patch": "@@ -12884,12 +12884,10 @@ corresponding flag to the linker.\n @item -mno-low-precision-recip-sqrt\n @opindex -mlow-precision-recip-sqrt\n @opindex -mno-low-precision-recip-sqrt\n-The square root estimate uses two steps instead of three for double-precision,\n-and one step instead of two for single-precision.\n-Thus reducing latency and precision.\n-This is only relevant if @option{-ffast-math} activates\n-reciprocal square root estimate instructions.\n-Which in turn depends on the target processor.\n+When calculating the reciprocal square root approximation,\n+uses one less step than otherwise, thus reducing latency and precision.\n+This is only relevant if @option{-ffast-math} enables the reciprocal square root\n+approximation, which in turn depends on the target processor.\n \n @item -march=@var{name}\n @opindex march"}]}