{"sha": "252c6f56386b674a6fb9329d928269858a2cfe35", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjUyYzZmNTYzODZiNjc0YTZmYjkzMjlkOTI4MjY5ODU4YTJjZmUzNQ==", "commit": {"author": {"name": "Andreas Krebbel", "email": "krebbel@linux.vnet.ibm.com", "date": "2017-09-26T10:33:37Z"}, "committer": {"name": "Andreas Krebbel", "email": "krebbel@gcc.gnu.org", "date": "2017-09-26T10:33:37Z"}, "message": "S/390: Add support for vec_shr\n\ngcc/ChangeLog:\n\n2017-09-26  Andreas Krebbel  <krebbel@linux.vnet.ibm.com>\n\n\t* config/s390/predicates.md (\"const_shift_by_byte_operand\"): New\n\tpredicate.\n\t* config/s390/vector.md (\"*vec_srb<mode>\"): Change modes to V_128\n\tand V16QI.\n\t(\"*vec_slb<mode>\"): New insn pattern.\n\t(\"vec_shr_<mode>\"): New expander.\n\t* config/s390/vx-builtins.md (\"vec_slb<mode>\"): Turn into expander\n\tand force the shift count operand to V16QImode.\n\t(\"vec_srb<mode>\"): Set shift count mode to V16QI.\n\nFrom-SVN: r253193", "tree": {"sha": "07a8f278e4653804d7b867a257b8c1602e7e5000", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/07a8f278e4653804d7b867a257b8c1602e7e5000"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/252c6f56386b674a6fb9329d928269858a2cfe35", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/252c6f56386b674a6fb9329d928269858a2cfe35", "html_url": "https://github.com/Rust-GCC/gccrs/commit/252c6f56386b674a6fb9329d928269858a2cfe35", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/252c6f56386b674a6fb9329d928269858a2cfe35/comments", "author": null, "committer": null, "parents": [{"sha": "da7853cc18318966aafa5a3cf48aedc4e671404d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/da7853cc18318966aafa5a3cf48aedc4e671404d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/da7853cc18318966aafa5a3cf48aedc4e671404d"}], "stats": {"total": 81, "additions": 64, "deletions": 17}, "files": [{"sha": "71339e16b42fc418ffa88ca564b56a491ed1ad83", "filename": "gcc/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/252c6f56386b674a6fb9329d928269858a2cfe35/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/252c6f56386b674a6fb9329d928269858a2cfe35/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=252c6f56386b674a6fb9329d928269858a2cfe35", "patch": "@@ -1,3 +1,15 @@\n+2017-09-26  Andreas Krebbel  <krebbel@linux.vnet.ibm.com>\n+\n+\t* config/s390/predicates.md (\"const_shift_by_byte_operand\"): New\n+\tpredicate.\n+\t* config/s390/vector.md (\"*vec_srb<mode>\"): Change modes to V_128\n+\tand V16QI.\n+\t(\"*vec_slb<mode>\"): New insn pattern.\n+\t(\"vec_shr_<mode>\"): New expander.\n+\t* config/s390/vx-builtins.md (\"vec_slb<mode>\"): Turn into expander\n+\tand force the shift count operand to V16QImode.\n+\t(\"vec_srb<mode>\"): Set shift count mode to V16QI.\n+\n 2017-09-26  Andreas Krebbel  <krebbel@linux.vnet.ibm.com>\n \n \t* config/s390/vector.md (\"vec_widen_umult_lo_<mode>\")"}, {"sha": "bbff8d856c23bc0101beb80a73c3ab3d5a4ed3b1", "filename": "gcc/config/s390/predicates.md", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/252c6f56386b674a6fb9329d928269858a2cfe35/gcc%2Fconfig%2Fs390%2Fpredicates.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/252c6f56386b674a6fb9329d928269858a2cfe35/gcc%2Fconfig%2Fs390%2Fpredicates.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Fpredicates.md?ref=252c6f56386b674a6fb9329d928269858a2cfe35", "patch": "@@ -508,3 +508,10 @@\n     }\n   return true;\n })\n+\n+(define_predicate \"const_shift_by_byte_operand\"\n+  (match_code \"const_int\")\n+{\n+  unsigned HOST_WIDE_INT val = INTVAL (op);\n+  return val <= 128 && val % 8 == 0;\n+})"}, {"sha": "e61bb88a405e7429b67cbd2750171e192d144e4a", "filename": "gcc/config/s390/vector.md", "status": "modified", "additions": 32, "deletions": 7, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/252c6f56386b674a6fb9329d928269858a2cfe35/gcc%2Fconfig%2Fs390%2Fvector.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/252c6f56386b674a6fb9329d928269858a2cfe35/gcc%2Fconfig%2Fs390%2Fvector.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Fvector.md?ref=252c6f56386b674a6fb9329d928269858a2cfe35", "patch": "@@ -980,15 +980,43 @@\n \n ; Pattern used by e.g. popcount\n (define_insn \"*vec_srb<mode>\"\n-  [(set (match_operand:V_HW 0 \"register_operand\"                    \"=v\")\n-\t(unspec:V_HW [(match_operand:V_HW 1 \"register_operand\"       \"v\")\n-\t\t      (match_operand:<tointvec> 2 \"register_operand\" \"v\")]\n-\t\t     UNSPEC_VEC_SRLB))]\n+  [(set (match_operand:V_128                0 \"register_operand\" \"=v\")\n+\t(unspec:V_128 [(match_operand:V_128 1 \"register_operand\"  \"v\")\n+\t\t       (match_operand:V16QI 2 \"register_operand\"  \"v\")]\n+\t\t   UNSPEC_VEC_SRLB))]\n   \"TARGET_VX\"\n   \"vsrlb\\t%v0,%v1,%v2\"\n   [(set_attr \"op_type\" \"VRR\")])\n \n \n+; Vector shift left by byte\n+\n+(define_insn \"*vec_slb<mode>\"\n+  [(set (match_operand:V_128                0 \"register_operand\" \"=v\")\n+\t(unspec:V_128 [(match_operand:V_128 1 \"register_operand\"  \"v\")\n+\t\t    (match_operand:V16QI    2 \"register_operand\"  \"v\")]\n+\t\t   UNSPEC_VEC_SLB))]\n+  \"TARGET_VX\"\n+  \"vslb\\t%v0,%v1,%v2\"\n+  [(set_attr \"op_type\" \"VRR\")])\n+\n+; vec_shr is defined as shift towards element 0\n+; this means it is a left shift on BE targets!\n+(define_expand \"vec_shr_<mode>\"\n+  [(set (match_dup 3)\n+\t(unspec:V16QI [(match_operand:SI 2 \"const_shift_by_byte_operand\" \"\")\n+\t\t   (const_int 7)\n+\t\t   (match_dup 3)]\n+\t\t   UNSPEC_VEC_SET))\n+   (set (match_operand:V_128 0 \"register_operand\" \"\")\n+\t(unspec:V_128 [(match_operand:V_128 1 \"register_operand\" \"\")\n+\t\t    (match_dup 3)]\n+\t\t   UNSPEC_VEC_SLB))]\n+  \"TARGET_VX\"\n+ {\n+   operands[3] = gen_reg_rtx(V16QImode);\n+ })\n+\n ; vmnb, vmnh, vmnf, vmng\n (define_insn \"smin<mode>3\"\n   [(set (match_operand:VI          0 \"register_operand\" \"=v\")\n@@ -1779,9 +1807,6 @@\n ; reduc_umin\n ; reduc_umax\n \n-; vec_shl vrep + vsl\n-; vec_shr\n-\n ; vec_pack_sfix_trunc: convert + pack ?\n ; vec_pack_ufix_trunc\n ; vec_unpacks_float_hi"}, {"sha": "4c157e32efb13dcbafa87c9be52f3492df50980f", "filename": "gcc/config/s390/vx-builtins.md", "status": "modified", "additions": 13, "deletions": 10, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/252c6f56386b674a6fb9329d928269858a2cfe35/gcc%2Fconfig%2Fs390%2Fvx-builtins.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/252c6f56386b674a6fb9329d928269858a2cfe35/gcc%2Fconfig%2Fs390%2Fvx-builtins.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Fvx-builtins.md?ref=252c6f56386b674a6fb9329d928269858a2cfe35", "patch": "@@ -1005,15 +1005,16 @@\n \n ; Vector shift left by byte\n \n-(define_insn \"vec_slb<mode>\"\n-  [(set (match_operand:V_HW 0 \"register_operand\"                    \"=v\")\n-\t(unspec:V_HW [(match_operand:V_HW 1 \"register_operand\"       \"v\")\n-\t\t      (match_operand:<tointvec> 2 \"register_operand\" \"v\")]\n+; Pattern definition in vector.md, see vec_vslb\n+(define_expand \"vec_slb<mode>\"\n+  [(set (match_operand:V_HW 0 \"register_operand\"                     \"\")\n+\t(unspec:V_HW [(match_operand:V_HW 1 \"register_operand\"       \"\")\n+\t\t      (match_operand:<tointvec> 2 \"register_operand\" \"\")]\n \t\t     UNSPEC_VEC_SLB))]\n   \"TARGET_VX\"\n-  \"vslb\\t%v0,%v1,%v2\"\n-  [(set_attr \"op_type\" \"VRR\")])\n-\n+{\n+  PUT_MODE (operands[2], V16QImode);\n+})\n \n ; Vector shift left double by byte\n \n@@ -1076,14 +1077,16 @@\n \n ; Vector shift right logical by byte\n \n-; Pattern definition in vector.md\n+; Pattern definition in vector.md, see vec_vsrb\n (define_expand \"vec_srb<mode>\"\n   [(set (match_operand:V_HW 0 \"register_operand\"                     \"\")\n \t(unspec:V_HW [(match_operand:V_HW 1 \"register_operand\"       \"\")\n \t\t      (match_operand:<tointvec> 2 \"register_operand\" \"\")]\n \t\t     UNSPEC_VEC_SRLB))]\n-  \"TARGET_VX\")\n-\n+  \"TARGET_VX\"\n+{\n+  PUT_MODE (operands[2], V16QImode);\n+})\n \n ; Vector subtract\n "}]}