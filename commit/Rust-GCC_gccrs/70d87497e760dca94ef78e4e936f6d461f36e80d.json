{"sha": "70d87497e760dca94ef78e4e936f6d461f36e80d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzBkODc0OTdlNzYwZGNhOTRlZjc4ZTRlOTM2ZjZkNDYxZjM2ZTgwZA==", "commit": {"author": {"name": "Johannes Pfau", "email": "johannespfau@gmail.com", "date": "2019-01-20T12:15:47Z"}, "committer": {"name": "Iain Buclaw", "email": "ibuclaw@gcc.gnu.org", "date": "2019-01-20T12:15:47Z"}, "message": "[D] Fix IdentityExp comparison for complex floats.\n\ngcc/d/ChangeLog:\n\n2019-01-20  Johannes Pfau  <johannespfau@gmail.com>\n\n\t* expr.cc (build_float_identity): New function.\n\t(ExprVisitor::visit(IdentityExp)): Add support for complex types.\n\ngcc/testsuite/ChangeLog:\n\n2019-01-20  Johannes Pfau  <johannespfau@gmail.com>\n\n\t* gdc.dg/runnable.d: Add tests for comparing complex types.\n\nFrom-SVN: r268103", "tree": {"sha": "7bbddd4a30ab412c00835963159a9d625f2498d0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7bbddd4a30ab412c00835963159a9d625f2498d0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/70d87497e760dca94ef78e4e936f6d461f36e80d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/70d87497e760dca94ef78e4e936f6d461f36e80d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/70d87497e760dca94ef78e4e936f6d461f36e80d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/70d87497e760dca94ef78e4e936f6d461f36e80d/comments", "author": {"login": "jpf91", "id": 583238, "node_id": "MDQ6VXNlcjU4MzIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/583238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jpf91", "html_url": "https://github.com/jpf91", "followers_url": "https://api.github.com/users/jpf91/followers", "following_url": "https://api.github.com/users/jpf91/following{/other_user}", "gists_url": "https://api.github.com/users/jpf91/gists{/gist_id}", "starred_url": "https://api.github.com/users/jpf91/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jpf91/subscriptions", "organizations_url": "https://api.github.com/users/jpf91/orgs", "repos_url": "https://api.github.com/users/jpf91/repos", "events_url": "https://api.github.com/users/jpf91/events{/privacy}", "received_events_url": "https://api.github.com/users/jpf91/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "a766ecb0d488624c0289620785ffe4e2d5cc9971", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a766ecb0d488624c0289620785ffe4e2d5cc9971", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a766ecb0d488624c0289620785ffe4e2d5cc9971"}], "stats": {"total": 64, "additions": 59, "deletions": 5}, "files": [{"sha": "f062ff8f24fc2bafe59d1bc6242efb90a777150f", "filename": "gcc/d/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/70d87497e760dca94ef78e4e936f6d461f36e80d/gcc%2Fd%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/70d87497e760dca94ef78e4e936f6d461f36e80d/gcc%2Fd%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2FChangeLog?ref=70d87497e760dca94ef78e4e936f6d461f36e80d", "patch": "@@ -1,3 +1,8 @@\n+2019-01-20  Johannes Pfau  <johannespfau@gmail.com>\n+\n+\t* expr.cc (build_float_identity): New function.\n+\t(ExprVisitor::visit(IdentityExp)): Add support for complex types.\n+\n 2019-01-16  Iain Buclaw  <ibuclaw@gdcproject.org>\n \n \tPR d/87824"}, {"sha": "a1f7c262dc8f2a93557a9b2a30d66ebaac3606a4", "filename": "gcc/d/expr.cc", "status": "modified", "additions": 28, "deletions": 5, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/70d87497e760dca94ef78e4e936f6d461f36e80d/gcc%2Fd%2Fexpr.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/70d87497e760dca94ef78e4e936f6d461f36e80d/gcc%2Fd%2Fexpr.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fexpr.cc?ref=70d87497e760dca94ef78e4e936f6d461f36e80d", "patch": "@@ -43,6 +43,20 @@ along with GCC; see the file COPYING3.  If not see\n #include \"d-tree.h\"\n \n \n+/* Build a floating-point identity comparison between T1 and T2, ignoring any\n+   excessive padding in the type.  CODE is EQ_EXPR or NE_EXPR comparison.  */\n+\n+static tree\n+build_float_identity (tree_code code, tree t1, tree t2)\n+{\n+  tree tmemcmp = builtin_decl_explicit (BUILT_IN_MEMCMP);\n+  tree size = size_int (TYPE_PRECISION (TREE_TYPE (t1)) / BITS_PER_UNIT);\n+\n+  tree result = build_call_expr (tmemcmp, 3, build_address (t1),\n+\t\t\t\t build_address (t2), size);\n+  return build_boolop (code, result, integer_zero_node);\n+}\n+\n /* Implements the visitor interface to build the GCC trees of all Expression\n    AST classes emitted from the D Front-end.\n    All visit methods accept one parameter E, which holds the frontend AST\n@@ -282,12 +296,21 @@ class ExprVisitor : public Visitor\n \ttree t1 = d_save_expr (build_expr (e->e1));\n \ttree t2 = d_save_expr (build_expr (e->e2));\n \n-\ttree tmemcmp = builtin_decl_explicit (BUILT_IN_MEMCMP);\n-\ttree size = size_int (TYPE_PRECISION (TREE_TYPE (t1)) / BITS_PER_UNIT);\n+\tif (!tb1->iscomplex ())\n+\t  this->result_ = build_float_identity (code, t1, t2);\n+\telse\n+\t  {\n+\t    /* Compare the real and imaginary parts separately.  */\n+\t    tree req = build_float_identity (code, real_part (t1),\n+\t\t\t\t\t     real_part (t2));\n+\t    tree ieq = build_float_identity (code, imaginary_part (t1),\n+\t\t\t\t\t     imaginary_part (t2));\n \n-\ttree result = build_call_expr (tmemcmp, 3, build_address (t1),\n-\t\t\t\t       build_address (t2), size);\n-\tthis->result_ = build_boolop (code, result, integer_zero_node);\n+\t    if (code == EQ_EXPR)\n+\t      this->result_ = build_boolop (TRUTH_ANDIF_EXPR, req, ieq);\n+\t    else\n+\t      this->result_ = build_boolop (TRUTH_ORIF_EXPR, req, ieq);\n+\t  }\n       }\n     else if (tb1->ty == Tstruct)\n       {"}, {"sha": "de3a3c428d220b4a14b9eaf6f0a80fc4388765aa", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/70d87497e760dca94ef78e4e936f6d461f36e80d/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/70d87497e760dca94ef78e4e936f6d461f36e80d/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=70d87497e760dca94ef78e4e936f6d461f36e80d", "patch": "@@ -1,3 +1,7 @@\n+2019-01-20  Johannes Pfau  <johannespfau@gmail.com>\n+\n+\t* gdc.dg/runnable.d: Add tests for comparing complex types.\n+\n 2019-01-20  Kewen Lin  <linkw@gcc.gnu.org>\n \n \t* gcc.target/powerpc/altivec_vld_vst_addr.c: Remove, split into "}, {"sha": "65c71e86292cb632c9a0eb91f944c4237d7d4133", "filename": "gcc/testsuite/gdc.dg/runnable.d", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/70d87497e760dca94ef78e4e936f6d461f36e80d/gcc%2Ftestsuite%2Fgdc.dg%2Frunnable.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/70d87497e760dca94ef78e4e936f6d461f36e80d/gcc%2Ftestsuite%2Fgdc.dg%2Frunnable.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgdc.dg%2Frunnable.d?ref=70d87497e760dca94ef78e4e936f6d461f36e80d", "patch": "@@ -1534,6 +1534,27 @@ void test286()\n         assert(0);\n }\n \n+/******************************************/\n+// https://bugzilla.gdcproject.org/show_bug.cgi?id=309\n+\n+void test309()\n+{\n+    creal f1 = +0.0 + 0.0i;\n+    creal f2 = +0.0 - 0.0i;\n+    creal f3 = -0.0 + 0.0i;\n+    creal f4 = +0.0 + 0.0i;\n+\n+    assert(f1 !is f2);\n+    assert(f1 !is f3);\n+    assert(f2 !is f3);\n+    assert(f1 is f4);\n+\n+    assert(!(f1 is f2));\n+    assert(!(f1 is f3));\n+    assert(!(f2 is f3));\n+    assert(!(f1 !is f4));\n+}\n+\n /******************************************/\n \n void main()\n@@ -1571,6 +1592,7 @@ void main()\n     test273();\n     test285();\n     test286();\n+    test309();\n \n     printf(\"Success!\\n\");\n }"}]}