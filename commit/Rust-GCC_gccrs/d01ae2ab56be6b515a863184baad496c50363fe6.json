{"sha": "d01ae2ab56be6b515a863184baad496c50363fe6", "node_id": "C_kwDOANBUbNoAKGQwMWFlMmFiNTZiZTZiNTE1YTg2MzE4NGJhYWQ0OTZjNTAzNjNmZTY", "commit": {"author": {"name": "Philip Herron", "email": "philip.herron@embecosm.com", "date": "2022-05-24T14:43:53Z"}, "committer": {"name": "Philip Herron", "email": "philip.herron@embecosm.com", "date": "2022-05-25T10:54:00Z"}, "message": "Remove old hack to handle type inferencing in untyped decalred bindings\n\nIn the case where you define let a; with no type to then use this binding\nand let type inferencing infer the type we used this code to implicitly\ngenerate a new type binding to the resolved node id of the the lvalue.\n\nThis was very dangerous and was always meant to be a stop gap untill we\nsupported more of type inferencing. The issue here was that we were badly\noverriting a function types within the type-context which hits an ICE\nin the method resolution code which is expecting function TyTy's within\nin order to match methods correctly.\n\nFixes #1274 #1273", "tree": {"sha": "851d3e1db5b2a050e364439ab5aaf0ca153d1d88", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/851d3e1db5b2a050e364439ab5aaf0ca153d1d88"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d01ae2ab56be6b515a863184baad496c50363fe6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d01ae2ab56be6b515a863184baad496c50363fe6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d01ae2ab56be6b515a863184baad496c50363fe6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d01ae2ab56be6b515a863184baad496c50363fe6/comments", "author": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "committer": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d09b135116f2bd56fbab054a9a0122cc6b59e06e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d09b135116f2bd56fbab054a9a0122cc6b59e06e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d09b135116f2bd56fbab054a9a0122cc6b59e06e"}], "stats": {"total": 41, "additions": 1, "deletions": 40}, "files": [{"sha": "8145c5a741b4b1c701fca8053e5890b292742fe1", "filename": "gcc/rust/typecheck/rust-hir-type-check-expr.h", "status": "modified", "additions": 1, "deletions": 40, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d01ae2ab56be6b515a863184baad496c50363fe6/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-expr.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d01ae2ab56be6b515a863184baad496c50363fe6/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-expr.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-expr.h?ref=d01ae2ab56be6b515a863184baad496c50363fe6", "patch": "@@ -384,46 +384,7 @@ class TypeCheckExpr : public TypeCheckBase\n     auto lhs = TypeCheckExpr::Resolve (expr.get_lhs (), false);\n     auto rhs = TypeCheckExpr::Resolve (expr.get_rhs (), false);\n \n-    auto result = lhs->coerce (rhs);\n-    if (result->get_kind () == TyTy::TypeKind::ERROR)\n-      return;\n-\n-    // in the case of declare first for an ADT Type:\n-    //\n-    // let a;\n-    // a = Foo{..}\n-    // let b = a.field;\n-    //\n-    // The lhs will have a TyTy of INFER and so when the declaration is\n-    // referenced it will still have an unknown type so we will fail to resolve\n-    // FieldAccessExpr\n-\n-    NodeId ast_node_id = expr.get_lhs ()->get_mappings ().get_nodeid ();\n-    NodeId ref_node_id;\n-    if (!resolver->lookup_resolved_name (ast_node_id, &ref_node_id))\n-      return;\n-\n-    Definition def;\n-    if (!resolver->lookup_definition (ref_node_id, &def))\n-      {\n-\trust_error_at (expr.get_locus (),\n-\t\t       \"assignment infer - unknown reference\");\n-\treturn;\n-      }\n-\n-    HirId ref;\n-    if (!mappings->lookup_node_to_hir (expr.get_mappings ().get_crate_num (),\n-\t\t\t\t       def.parent, &ref))\n-      {\n-\trust_error_at (expr.get_locus (),\n-\t\t       \"assignment infer - reverse lookup failure\");\n-\treturn;\n-      }\n-\n-    context->insert_type (\n-      Analysis::NodeMapping (expr.get_lhs ()->get_mappings ().get_crate_num (),\n-\t\t\t     ref_node_id, ref, UNKNOWN_LOCAL_DEFID),\n-      result->clone ());\n+    lhs->coerce (rhs);\n   }\n \n   void visit (HIR::CompoundAssignmentExpr &expr) override"}]}