{"sha": "735cb76eba6a5558d6605aa191e04c55e1ce7e98", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzM1Y2I3NmViYTZhNTU1OGQ2NjA1YWExOTFlMDRjNTVlMWNlN2U5OA==", "commit": {"author": {"name": "J\"orn Rennecke", "email": "joern.rennecke@superh.com", "date": "2003-06-16T16:23:30Z"}, "committer": {"name": "Joern Rennecke", "email": "amylaar@gcc.gnu.org", "date": "2003-06-16T16:23:30Z"}, "message": "sh.h (REG_CLASS_FROM_LETTER): Change to: (REG_CLASS_FROM_CONSTRAINT).\n\n\t* sh.h (REG_CLASS_FROM_LETTER): Change to:\n\t(REG_CLASS_FROM_CONSTRAINT).\n\t(CONST_OK_FOR_I): Rename to:\n\t(CONST_OK_FOR_I08).  Changed all users.\n\t(CONST_OK_FOR_J): Rename to:\n\t(CONST_OK_FOR_I16).  Changed all users.\n\t(CONST_OK_FOR_K): Rename to:\n\t(CONST_OK_FOR_P27).  Changed all users.\n\t(CONST_OK_FOR_L): Rename to:\n\t(CONST_OK_FOR_K08).  Changed all users.\n\t(CONST_OK_FOR_O): Rename to:\n\t(CONST_OK_FOR_I06).  Changed all users.\n\t(CONST_OK_FOR_P): Rename to:\n\t(CONST_OK_FOR_I10).  Changed all users.\n\t(CONSTRAINT_LEN, CONST_OK_FOR_I, CONST_OK_FOR_J16): Define.\n\t(CONST_OK_FOR_J, CONST_OK_FOR_K, CONST_OK_FOR_P): Likewise.\n\t(EXTRA_CONSTRAINT_A, EXTRA_CONSTRAINT_Bsc): Likewise.\n\t(EXTRA_CONSTRAINT_B, PIC_OFFSET_P, PIC_DIRECT_ADDR_P): Likewise.\n\t(EXTRA_CONSTRAINT_Cpg, EXTRA_CONSTRAINT_C): Likewise.\n\t(EXTRA_MEMORY_CONSTRAINT,(EXTRA_CONSTRAINT_Sr0): Likewise.\n\t(CONST_OK_FOR_LETTER_P): Replace with\n\t(CONST_OK_FOR_CONSTRAINT_P).\n\t(EXTRA_CONSTRAINT_S): Rename to:\n\t(EXTRA_CONSTRAINT_C16).  Changed all users.\n\t(MOVI_SHORI_BASE_OPERAND_P): Don't allow direct addresses.\n\t(EXTRA_CONSTRAINT_T): Rename to:\n\t(EXTRA_CONSTRAINT_Csy).  Changed all users.\n\t(EXTRA_CONSTRAINT_Z): Remove.\n\t(EXTRA_CONSTRAINT): Replace with:\n\t(EXTRA_CONSTRAINT_STR).\n\t(EXTRA_CONSTRAINT_U): Rename to:\n\t (EXTRA_CONSTRAINT_Z).  Changed all users.\n\t* sh.c (and_operand): Use CONST_OK_FOR_J16.\n\t* sh.md (cmpeqsi_t-1, cmpeqsi_t, adddi3_media): Use new constraints.\n\t(addsi3_media, addsi3_compact, andsi3_compact, anddi3): Likewise.\n\t(iorsi3, iordi3, xorsi3, xordi3, ashlsi3_std, ashlhi3_k): Likewise.\n\t(lshrsi3_k, movsi_i, movsi_ie, movsi_i_lowpart, movsi_media): Likewise.\n\t(movsi_media_nofpu, movqi_media, movhi_i, movhi_media): Likewise.\n\t(*movdi_i, movdi_media, movdi_media_nofpu, shori_media): Likewise.\n\t(movdf_media, movdf_media_nofpu, movv2sf_i, movv4sf_i): Likewise.\n\t(movsf_media, movsf_media_nofpu, movsi_y, beq_media): Likewise.\n\t(beq_media_i, bne_media, pt, ptb, movv8qi_i, movv2hi_i): Likewise.\n\t(movv4hi_i, movv2si_i, negcmpeqv8qi, negcmpeqv2si): Likewise.\n\t(negcmpeqv4hi, negcmpgtuv8qi, negcmpgtv2si, negcmpgtv4hi): Likewise.\n\t(mcmv, mcnvs_lw, mcnvs_wb, mcnvs_wub, mextr_rl, mextr_lr): Likewise.\n\t(mextr1, mextr2, mextr3, mextr4, mextr5, mextr6, mextr7): Likewise.\n\t(mperm_w, mperm_w_little, mperm_w_big, msad_ubq_i): Likewise.\n\t(mshards_q, mshfhi_b, mshflo_b, mshf4_b, mshf0_b, mshfhi_l): Likewise.\n\t(mshflo_l, mshf4_l, mshf0_l, mshfhi_w, mshflo_w, mshf4_w): Likewise.\n\t(mshf0_w, mshflo_w_x, mshfhi_l_di, mshfhi_l_di_rev): Likewise.\n\t(mshflo_l_di_rev, mshflo_l_di_x, concat_v2sf): Likewise.\n\t(mshflo_l_di_x_rev, subv2si3, subv4hi3, sssubv2si3): Likewise.\n\t(sssubv4hi3): Likewise.\n\t(movsf_i): Change I[08]/r to G/r.\n\t(movsf_ie): Change f/{G,H}/c/X to f/{G,H}/c/Bsc.\n\n\t* sh.c (sh_output_mi_thunk): Use CONST_OK_FOR_ADD.\n\nFrom-SVN: r68022", "tree": {"sha": "bab107ce92dbe89d2b8edf3087d69d320f63db9a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/bab107ce92dbe89d2b8edf3087d69d320f63db9a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/735cb76eba6a5558d6605aa191e04c55e1ce7e98", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/735cb76eba6a5558d6605aa191e04c55e1ce7e98", "html_url": "https://github.com/Rust-GCC/gccrs/commit/735cb76eba6a5558d6605aa191e04c55e1ce7e98", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/735cb76eba6a5558d6605aa191e04c55e1ce7e98/comments", "author": null, "committer": null, "parents": [{"sha": "0bad3b7c49882a3aa38510a406c8df9e9420439a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0bad3b7c49882a3aa38510a406c8df9e9420439a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0bad3b7c49882a3aa38510a406c8df9e9420439a"}], "stats": {"total": 651, "additions": 416, "deletions": 235}, "files": [{"sha": "36f62262c5c9593da4fb76946b8525f9298a040a", "filename": "gcc/ChangeLog", "status": "modified", "additions": 60, "deletions": 0, "changes": 60, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/735cb76eba6a5558d6605aa191e04c55e1ce7e98/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/735cb76eba6a5558d6605aa191e04c55e1ce7e98/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=735cb76eba6a5558d6605aa191e04c55e1ce7e98", "patch": "@@ -1,3 +1,63 @@\n+2003-06-16  J\"orn Rennecke <joern.rennecke@superh.com>\n+\n+\t* sh.h (REG_CLASS_FROM_LETTER): Change to:\n+\t(REG_CLASS_FROM_CONSTRAINT).\n+\t(CONST_OK_FOR_I): Rename to:\n+\t(CONST_OK_FOR_I08).  Changed all users.\n+\t(CONST_OK_FOR_J): Rename to:\n+\t(CONST_OK_FOR_I16).  Changed all users.\n+\t(CONST_OK_FOR_K): Rename to:\n+\t(CONST_OK_FOR_P27).  Changed all users.\n+\t(CONST_OK_FOR_L): Rename to:\n+\t(CONST_OK_FOR_K08).  Changed all users.\n+\t(CONST_OK_FOR_O): Rename to:\n+\t(CONST_OK_FOR_I06).  Changed all users.\n+\t(CONST_OK_FOR_P): Rename to:\n+\t(CONST_OK_FOR_I10).  Changed all users.\n+\t(CONSTRAINT_LEN, CONST_OK_FOR_I, CONST_OK_FOR_J16): Define.\n+\t(CONST_OK_FOR_J, CONST_OK_FOR_K, CONST_OK_FOR_P): Likewise.\n+\t(EXTRA_CONSTRAINT_A, EXTRA_CONSTRAINT_Bsc): Likewise.\n+\t(EXTRA_CONSTRAINT_B, PIC_OFFSET_P, PIC_DIRECT_ADDR_P): Likewise.\n+\t(EXTRA_CONSTRAINT_Cpg, EXTRA_CONSTRAINT_C): Likewise.\n+\t(EXTRA_MEMORY_CONSTRAINT,(EXTRA_CONSTRAINT_Sr0): Likewise.\n+\t(CONST_OK_FOR_LETTER_P): Replace with\n+\t(CONST_OK_FOR_CONSTRAINT_P).\n+\t(EXTRA_CONSTRAINT_S): Rename to:\n+\t(EXTRA_CONSTRAINT_C16).  Changed all users.\n+\t(MOVI_SHORI_BASE_OPERAND_P): Don't allow direct addresses.\n+\t(EXTRA_CONSTRAINT_T): Rename to:\n+\t(EXTRA_CONSTRAINT_Csy).  Changed all users.\n+\t(EXTRA_CONSTRAINT_Z): Remove.\n+\t(EXTRA_CONSTRAINT): Replace with:\n+\t(EXTRA_CONSTRAINT_STR).\n+\t(EXTRA_CONSTRAINT_U): Rename to:\n+\t (EXTRA_CONSTRAINT_Z).  Changed all users.\n+\t* sh.c (and_operand): Use CONST_OK_FOR_J16.\n+\t* sh.md (cmpeqsi_t-1, cmpeqsi_t, adddi3_media): Use new constraints.\n+\t(addsi3_media, addsi3_compact, andsi3_compact, anddi3): Likewise.\n+\t(iorsi3, iordi3, xorsi3, xordi3, ashlsi3_std, ashlhi3_k): Likewise.\n+\t(lshrsi3_k, movsi_i, movsi_ie, movsi_i_lowpart, movsi_media): Likewise.\n+\t(movsi_media_nofpu, movqi_media, movhi_i, movhi_media): Likewise.\n+\t(*movdi_i, movdi_media, movdi_media_nofpu, shori_media): Likewise.\n+\t(movdf_media, movdf_media_nofpu, movv2sf_i, movv4sf_i): Likewise.\n+\t(movsf_media, movsf_media_nofpu, movsi_y, beq_media): Likewise.\n+\t(beq_media_i, bne_media, pt, ptb, movv8qi_i, movv2hi_i): Likewise.\n+\t(movv4hi_i, movv2si_i, negcmpeqv8qi, negcmpeqv2si): Likewise.\n+\t(negcmpeqv4hi, negcmpgtuv8qi, negcmpgtv2si, negcmpgtv4hi): Likewise.\n+\t(mcmv, mcnvs_lw, mcnvs_wb, mcnvs_wub, mextr_rl, mextr_lr): Likewise.\n+\t(mextr1, mextr2, mextr3, mextr4, mextr5, mextr6, mextr7): Likewise.\n+\t(mperm_w, mperm_w_little, mperm_w_big, msad_ubq_i): Likewise.\n+\t(mshards_q, mshfhi_b, mshflo_b, mshf4_b, mshf0_b, mshfhi_l): Likewise.\n+\t(mshflo_l, mshf4_l, mshf0_l, mshfhi_w, mshflo_w, mshf4_w): Likewise.\n+\t(mshf0_w, mshflo_w_x, mshfhi_l_di, mshfhi_l_di_rev): Likewise.\n+\t(mshflo_l_di_rev, mshflo_l_di_x, concat_v2sf): Likewise.\n+\t(mshflo_l_di_x_rev, subv2si3, subv4hi3, sssubv2si3): Likewise.\n+\t(sssubv4hi3): Likewise.\n+\t(movsf_i): Change I[08]/r to G/r.\n+\t(movsf_ie): Change f/{G,H}/c/X to f/{G,H}/c/Bsc.\n+\n+\t* sh.c (sh_output_mi_thunk): Use CONST_OK_FOR_ADD.\n+\n 2003-06-16  Vladimir Makarov  <vmakarov@redhat.com>\n \n \t* config/i386/i386.c (ix86_memory_move_cost): Fix typo."}, {"sha": "69221d013e3a56a48d11bf90941bd50e01f128d8", "filename": "gcc/config/sh/sh.c", "status": "modified", "additions": 32, "deletions": 36, "changes": 68, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/735cb76eba6a5558d6605aa191e04c55e1ce7e98/gcc%2Fconfig%2Fsh%2Fsh.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/735cb76eba6a5558d6605aa191e04c55e1ce7e98/gcc%2Fconfig%2Fsh%2Fsh.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fsh.c?ref=735cb76eba6a5558d6605aa191e04c55e1ce7e98", "patch": "@@ -56,7 +56,7 @@ int code_for_indirect_jump_scratch = CODE_FOR_indirect_jump_scratch;\n \n /* These are some macros to abstract register modes.  */\n #define CONST_OK_FOR_ADD(size) \\\n-  (TARGET_SHMEDIA ? CONST_OK_FOR_P (size) : CONST_OK_FOR_I (size))\n+  (TARGET_SHMEDIA ? CONST_OK_FOR_I10 (size) : CONST_OK_FOR_I08 (size))\n #define GEN_MOV (*(TARGET_SHMEDIA64 ? gen_movdi : gen_movsi))\n #define GEN_ADD3 (*(TARGET_SHMEDIA64 ? gen_adddi3 : gen_addsi3))\n #define GEN_SUB3 (*(TARGET_SHMEDIA64 ? gen_subdi3 : gen_subsi3))\n@@ -1489,8 +1489,8 @@ andcosts (x)\n   if (TARGET_SHMEDIA)\n     {\n       if ((GET_CODE (XEXP (x, 1)) == CONST_INT\n-\t   && CONST_OK_FOR_J (INTVAL (XEXP (x, 1))))\n-\t  || EXTRA_CONSTRAINT_S (XEXP (x, 1)))\n+\t   && CONST_OK_FOR_I16 (INTVAL (XEXP (x, 1))))\n+\t  || EXTRA_CONSTRAINT_C16 (XEXP (x, 1)))\n \treturn 1;\n       else\n \treturn 2;\n@@ -1499,13 +1499,13 @@ andcosts (x)\n   /* These constants are single cycle extu.[bw] instructions.  */\n   if (i == 0xff || i == 0xffff)\n     return 1;\n-  /* Constants that can be used in an and immediate instruction is a single\n+  /* Constants that can be used in an and immediate instruction in a single\n      cycle, but this requires r0, so make it a little more expensive.  */\n-  if (CONST_OK_FOR_L (i))\n+  if (CONST_OK_FOR_K08 (i))\n     return 2;\n   /* Constants that can be loaded with a mov immediate and an and.\n      This case is probably unnecessary.  */\n-  if (CONST_OK_FOR_I (i))\n+  if (CONST_OK_FOR_I08 (i))\n     return 2;\n   /* Any other constants requires a 2 cycle pc-relative load plus an and.\n      This case is probably unnecessary.  */\n@@ -1537,11 +1537,11 @@ addsubcosts (x)\n \treturn TARGET_SHMEDIA64 ? 5 : 3;\n \n       case CONST_INT:\n-\tif (CONST_OK_FOR_J (INTVAL (XEXP (x, 1))))\n+\tif (CONST_OK_FOR_I16 (INTVAL (XEXP (x, 1))))\n           return 2;\n-\telse if (CONST_OK_FOR_J (INTVAL (XEXP (x, 1)) >> 16))\n+\telse if (CONST_OK_FOR_I16 (INTVAL (XEXP (x, 1)) >> 16))\n \t  return 3;\n-\telse if (CONST_OK_FOR_J ((INTVAL (XEXP (x, 1)) >> 16) >> 16))\n+\telse if (CONST_OK_FOR_I16 ((INTVAL (XEXP (x, 1)) >> 16) >> 16))\n \t  return 4;\n \n \t/* Fall through.  */\n@@ -1601,22 +1601,22 @@ sh_rtx_costs (x, code, outer_code, total)\n \t    *total = 0;\n \t  else if ((outer_code == IOR || outer_code == XOR\n \t            || outer_code == PLUS)\n-\t\t   && CONST_OK_FOR_P (INTVAL (x)))\n+\t\t   && CONST_OK_FOR_I10 (INTVAL (x)))\n \t    *total = 0;\n-\t  else if (CONST_OK_FOR_J (INTVAL (x)))\n+\t  else if (CONST_OK_FOR_I16 (INTVAL (x)))\n             *total = COSTS_N_INSNS (outer_code != SET);\n-\t  else if (CONST_OK_FOR_J (INTVAL (x) >> 16))\n+\t  else if (CONST_OK_FOR_I16 (INTVAL (x) >> 16))\n \t    *total = COSTS_N_INSNS (2);\n-\t  else if (CONST_OK_FOR_J ((INTVAL (x) >> 16) >> 16))\n+\t  else if (CONST_OK_FOR_I16 ((INTVAL (x) >> 16) >> 16))\n \t    *total = COSTS_N_INSNS (3);\n           else\n \t    *total = COSTS_N_INSNS (4);\n \t  return true;\n         }\n-      if (CONST_OK_FOR_I (INTVAL (x)))\n+      if (CONST_OK_FOR_I08 (INTVAL (x)))\n         *total = 0;\n       else if ((outer_code == AND || outer_code == IOR || outer_code == XOR)\n-\t       && CONST_OK_FOR_L (INTVAL (x)))\n+\t       && CONST_OK_FOR_K08 (INTVAL (x)))\n         *total = 1;\n       else\n         *total = 8;\n@@ -2034,7 +2034,7 @@ shl_and_kind (left_rtx, mask_rtx, attrp)\n     {\n       if (i > right)\n \tbreak;\n-      if (! CONST_OK_FOR_L (mask >> i))\n+      if (! CONST_OK_FOR_K08 (mask >> i))\n \tcontinue;\n       cost = (i != 0) + 2 + ext_shift_insns[left + i];\n       if (cost < best_cost)\n@@ -2051,14 +2051,14 @@ shl_and_kind (left_rtx, mask_rtx, attrp)\n     {\n       if (i > right)\n \tbreak;\n-      cost = (i != 0) + (CONST_OK_FOR_I (mask >> i) ? 2 : 3)\n+      cost = (i != 0) + (CONST_OK_FOR_I08 (mask >> i) ? 2 : 3)\n \t+ (can_ext ? ext_shift_insns : shift_insns)[left + i];\n       if (cost < best_cost)\n \t{\n \t  best = 4 - can_ext;\n \t  best_cost = cost;\n \t  best_right = i;\n-\t  best_len = cost - 1 - ! CONST_OK_FOR_I (mask >> i);\n+\t  best_len = cost - 1 - ! CONST_OK_FOR_I08 (mask >> i);\n \t}\n     }\n \n@@ -2836,8 +2836,8 @@ hi_const (src)\n /* Nonzero if the insn is a move instruction which needs to be fixed.  */\n \n /* ??? For a DImode/DFmode moves, we don't need to fix it if each half of the\n-   CONST_DOUBLE input value is CONST_OK_FOR_I.  For a SFmode move, we don't\n-   need to fix it if the input value is CONST_OK_FOR_I.  */\n+   CONST_DOUBLE input value is CONST_OK_FOR_I08.  For a SFmode move, we don't\n+   need to fix it if the input value is CONST_OK_FOR_I08.  */\n \n static int\n broken_move (insn)\n@@ -2874,7 +2874,7 @@ broken_move (insn)\n \t\t&& GET_CODE (SET_DEST (pat)) == REG\n \t\t&& FP_REGISTER_P (REGNO (SET_DEST (pat))))\n \t  && (GET_CODE (SET_SRC (pat)) != CONST_INT\n-\t      || ! CONST_OK_FOR_I (INTVAL (SET_SRC (pat)))))\n+\t      || ! CONST_OK_FOR_I08 (INTVAL (SET_SRC (pat)))))\n \treturn 1;\n     }\n \n@@ -6383,17 +6383,17 @@ arith_operand (op, mode)\n   if (TARGET_SHMEDIA)\n     {\n       /* FIXME: We should be checking whether the CONST_INT fits in a\n-\t CONST_OK_FOR_J here, but this causes reload_cse to crash when\n+\t CONST_OK_FOR_I16 here, but this causes reload_cse to crash when\n \t attempting to transform a sequence of two 64-bit sets of the\n \t same register from literal constants into a set and an add,\n \t when the difference is too wide for an add.  */\n       if (GET_CODE (op) == CONST_INT\n-\t  || EXTRA_CONSTRAINT_S (op))\n+\t  || EXTRA_CONSTRAINT_C16 (op))\n \treturn 1;\n       else\n \treturn 0;\n     }\n-  else if (GET_CODE (op) == CONST_INT && CONST_OK_FOR_I (INTVAL (op)))\n+  else if (GET_CODE (op) == CONST_INT && CONST_OK_FOR_I08 (INTVAL (op)))\n     return 1;\n \n   return 0;\n@@ -6409,7 +6409,7 @@ arith_reg_or_0_operand (op, mode)\n   if (arith_reg_operand (op, mode))\n     return 1;\n \n-  if (EXTRA_CONSTRAINT_U (op))\n+  if (EXTRA_CONSTRAINT_Z (op))\n     return 1;\n \n   return 0;\n@@ -6424,7 +6424,7 @@ shmedia_6bit_operand (op, mode)\n      enum machine_mode mode;\n {\n   return (arith_reg_operand (op, mode)\n-\t  || (GET_CODE (op) == CONST_INT && CONST_OK_FOR_O (INTVAL (op))));\n+\t  || (GET_CODE (op) == CONST_INT && CONST_OK_FOR_I06 (INTVAL (op))));\n }\n \n /* Returns 1 if OP is a valid source operand for a logical operation.  */\n@@ -6439,12 +6439,12 @@ logical_operand (op, mode)\n \n   if (TARGET_SHMEDIA)\n     {\n-      if (GET_CODE (op) == CONST_INT && CONST_OK_FOR_P (INTVAL (op)))\n+      if (GET_CODE (op) == CONST_INT && CONST_OK_FOR_I10 (INTVAL (op)))\n \treturn 1;\n       else\n \treturn 0;\n     }\n-  else if (GET_CODE (op) == CONST_INT && CONST_OK_FOR_L (INTVAL (op)))\n+  else if (GET_CODE (op) == CONST_INT && CONST_OK_FOR_K08 (INTVAL (op)))\n     return 1;\n \n   return 0;\n@@ -6462,8 +6462,7 @@ and_operand (op, mode)\n   if (TARGET_SHMEDIA\n       && mode == DImode\n       && GET_CODE (op) == CONST_INT\n-      && (INTVAL (op) == (unsigned) 0xffffffff\n-\t  || INTVAL (op) == (HOST_WIDE_INT) -1 << 32))\n+      && CONST_OK_FOR_J16 (INTVAL (op)))\n \treturn 1;\n \n   return 0;\n@@ -6738,7 +6737,7 @@ target_operand (op, mode)\n     return 0;\n \n   if ((GET_MODE (op) == DImode || GET_MODE (op) == VOIDmode)\n-      && EXTRA_CONSTRAINT_T (op))\n+      && EXTRA_CONSTRAINT_Csy (op))\n     return ! reload_completed;\n \n   return target_reg_operand (op, mode);\n@@ -8327,8 +8326,7 @@ sh_output_mi_thunk (file, thunk_fndecl, delta, vcall_offset, function)\n   int structure_value_byref = 0;\n   rtx this, this_value, sibcall, insns, funexp;\n   tree funtype = TREE_TYPE (function);\n-  int simple_add\n-    = (TARGET_SHMEDIA ? CONST_OK_FOR_J (delta) : CONST_OK_FOR_I (delta));\n+  int simple_add = CONST_OK_FOR_ADD (delta);\n   int did_load = 0;\n   rtx scratch0, scratch1, scratch2;\n \n@@ -8411,9 +8409,7 @@ sh_output_mi_thunk (file, thunk_fndecl, delta, vcall_offset, function)\n \t  emit_move_insn (scratch1, GEN_INT (vcall_offset));\n \t  offset_addr = gen_rtx_PLUS (Pmode, scratch0, scratch1);\n \t}\n-      else if (TARGET_SHMEDIA\n-\t       ? CONST_OK_FOR_J (vcall_offset)\n-\t       : CONST_OK_FOR_I (vcall_offset))\n+      else if (CONST_OK_FOR_ADD (vcall_offset))\n \t{\n \t  emit_insn (gen_add2_insn (scratch0, GEN_INT (vcall_offset)));\n \t  offset_addr = scratch0;"}, {"sha": "e5fe12cc80bd0fa906a6a7c61d6de06eb6eab0c5", "filename": "gcc/config/sh/sh.h", "status": "modified", "additions": 159, "deletions": 44, "changes": 203, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/735cb76eba6a5558d6605aa191e04c55e1ce7e98/gcc%2Fconfig%2Fsh%2Fsh.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/735cb76eba6a5558d6605aa191e04c55e1ce7e98/gcc%2Fconfig%2Fsh%2Fsh.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fsh.h?ref=735cb76eba6a5558d6605aa191e04c55e1ce7e98", "patch": "@@ -1293,46 +1293,119 @@ extern int regno_reg_class[FIRST_PSEUDO_REGISTER];\n    description.  */\n extern enum reg_class reg_class_from_letter[];\n \n-#define REG_CLASS_FROM_LETTER(C) \\\n-   ( ISLOWER (C) ? reg_class_from_letter[(C)-'a'] : NO_REGS )\n+/* We might use 'Rxx' constraints in the future for exotic reg classes.*/\n+#define REG_CLASS_FROM_CONSTRAINT(C, STR) \\\n+  (ISLOWER (C) ? reg_class_from_letter[(C)-'a'] : NO_REGS )\n \f\n+/* Overview of uppercase letter constraints:\n+   A: Addresses (constraint len == 3)\n+    Ac4: sh4 cache operations\n+    Ac5: sh5 cache operations\n+   Bxx: miscellaneous constraints\n+    Bsc: SCRATCH - for the scratch register in movsi_ie in the\n+\t fldi0 / fldi0 cases\n+   C: Constants other than only CONST_INT (constraint len == 3)\n+    C16: 16 bit constant, literal or symbolic\n+    Csy: label or symbol\n+    Cpg: non-explicit constants that can be directly loaded into a general\n+\t purpose register in PIC code.  like 's' except we don't allow\n+\t PIC_DIRECT_ADDR_P\n+   IJKLMNOP: CONT_INT constants\n+    Ixx: signed xx bit\n+    J16: 0xffffffff00000000 | 0x00000000ffffffff\n+    Kxx: unsigned xx bit\n+    M: 1\n+    N: 0\n+    P27: 1 | 2 | 8 | 16\n+   Q: pc relative load operand\n+   Rxx: reserved for exotic register classes.\n+   S: extra memory (storage) constraints (constraint len == 3)\n+    Sua: unaligned memory operations\n+   W: vector\n+   Z: zero in any mode\n+\n+   unused CONST_INT constraint letters: LO\n+   unused EXTRA_CONSTRAINT letters: D T U Y */\n+\n+#if 1 /* check that the transistion went well.  */\n+#define CONSTRAINT_LEN(C,STR) \\\n+  (((C) == 'L' || (C) == 'O' || (C) == 'D' || (C) == 'T' || (C) == 'U' \\\n+    || (C) == 'Y' \\\n+    || ((C) == 'I' && (((STR)[1] != '0' && (STR)[1] != '1') || ! isdigit ((STR)[2]))) \\\n+    || ((C) == 'B' && ((STR)[1] != 's' || (STR)[2] != 'c')) \\\n+    || ((C) == 'J' && ((STR)[1] != '1' || (STR)[2] != '6')) \\\n+    || ((C) == 'K' && ((STR)[1] != '0' || (STR)[2] != '8')) \\\n+    || ((C) == 'P' && ((STR)[1] != '2' || (STR)[2] != '7'))) \\\n+   ? -1 \\\n+   : ((C) == 'A' || (C) == 'B' || (C) == 'C' \\\n+      || (C) == 'I' || (C) == 'J' || (C) == 'K' || (C) == 'P' \\\n+      || (C) == 'R' || (C) == 'S') \\\n+   ? 3 \\\n+   : DEFAULT_CONSTRAINT_LEN ((C), (STR)))\n+#else\n+#define CONSTRAINT_LEN(C,STR) \\\n+  (((C) == 'A' || (C) == 'B' || (C) == 'C' \\\n+    || (C) == 'I' || (C) == 'J' || (C) == 'K' || (C) == 'P' \\\n+    || (C) == 'R' || (C) == 'S') \\\n+   ? 3 : DEFAULT_CONSTRAINT_LEN ((C), (STR)))\n+#endif\n+\n /* The letters I, J, K, L and M in a register constraint string\n    can be used to stand for particular ranges of immediate operands.\n    This macro defines what the ranges are.\n    C is the letter, and VALUE is a constant value.\n    Return 1 if VALUE is in the range specified by C.\n-\tI: arithmetic operand -127..128, as used in add, sub, etc\n-\tJ: arithmetic operand -32768..32767, as used in SHmedia movi and shori\n-\tK: shift operand 1,2,8 or 16\n-\tL: logical operand 0..255, as used in and, or, etc.\n+\tI08: arithmetic operand -127..128, as used in add, sub, etc\n+\tI16: arithmetic operand -32768..32767, as used in SHmedia movi and shori\n+\tP27: shift operand 1,2,8 or 16\n+\tK08: logical operand 0..255, as used in and, or, etc.\n \tM: constant 1\n \tN: constant 0\n-\tO: arithmetic operand -32..31, as used in SHmedia beqi, bnei and xori\n-\tP: arithmetic operand -512..511, as used in SHmedia andi, ori\n+\tI06: arithmetic operand -32..31, as used in SHmedia beqi, bnei and xori\n+\tI10: arithmetic operand -512..511, as used in SHmedia andi, ori\n */\n \n-#define CONST_OK_FOR_I(VALUE) (((HOST_WIDE_INT)(VALUE))>= -128 \\\n-\t\t\t       && ((HOST_WIDE_INT)(VALUE)) <= 127)\n-#define CONST_OK_FOR_J(VALUE) (((HOST_WIDE_INT)(VALUE)) >= -32768 \\\n-\t\t\t       && ((HOST_WIDE_INT)(VALUE)) <= 32767)\n-#define CONST_OK_FOR_K(VALUE) ((VALUE)==1||(VALUE)==2||(VALUE)==8||(VALUE)==16)\n-#define CONST_OK_FOR_L(VALUE) (((HOST_WIDE_INT)(VALUE))>= 0 \\\n-\t\t\t       && ((HOST_WIDE_INT)(VALUE)) <= 255)\n+#define CONST_OK_FOR_I06(VALUE) (((HOST_WIDE_INT)(VALUE)) >= -32 \\\n+\t\t\t\t && ((HOST_WIDE_INT)(VALUE)) <= 31)\n+#define CONST_OK_FOR_I08(VALUE) (((HOST_WIDE_INT)(VALUE))>= -128 \\\n+\t\t\t\t && ((HOST_WIDE_INT)(VALUE)) <= 127)\n+#define CONST_OK_FOR_I10(VALUE) (((HOST_WIDE_INT)(VALUE)) >= -512 \\\n+\t\t\t\t && ((HOST_WIDE_INT)(VALUE)) <= 511)\n+#define CONST_OK_FOR_I16(VALUE) (((HOST_WIDE_INT)(VALUE)) >= -32768 \\\n+\t\t\t\t && ((HOST_WIDE_INT)(VALUE)) <= 32767)\n+#define CONST_OK_FOR_I(VALUE, STR) \\\n+  ((STR)[1] == '0' && (STR)[2] == 6 ? CONST_OK_FOR_I06 (VALUE) \\\n+   : (STR)[1] == '0' && (STR)[2] == '8' ? CONST_OK_FOR_I08 (VALUE) \\\n+   : (STR)[1] == '1' && (STR)[2] == '0' ? CONST_OK_FOR_I10 (VALUE) \\\n+   : (STR)[1] == '1' && (STR)[2] == '6' ? CONST_OK_FOR_I16 (VALUE) \\\n+   : 0)\n+\n+#define CONST_OK_FOR_J16(VALUE) \\\n+  ((unsigned) (VALUE) == (unsigned) 0xffffffff \\\n+   || (HOST_BITS_PER_WIDE_INT >= 64 && (VALUE) == (HOST_WIDE_INT) -1 << 32))\n+#define CONST_OK_FOR_J(VALUE, STR) \\\n+  ((STR)[1] == '1' && (STR)[2] == '6' ? CONST_OK_FOR_J16 (VALUE) \\\n+   : 0)\n+\n+#define CONST_OK_FOR_K08(VALUE) (((HOST_WIDE_INT)(VALUE))>= 0 \\\n+\t\t\t\t && ((HOST_WIDE_INT)(VALUE)) <= 255)\n+#define CONST_OK_FOR_K(VALUE, STR) \\\n+  ((STR)[1] == '0' && (STR)[2] == '8' ? CONST_OK_FOR_K08 (VALUE) \\\n+   : 0)\n+#define CONST_OK_FOR_P27(VALUE) \\\n+  ((VALUE)==1||(VALUE)==2||(VALUE)==8||(VALUE)==16)\n+#define CONST_OK_FOR_P(VALUE, STR) \\\n+  ((STR)[1] == '2' && (STR)[2] == '7' ? CONST_OK_FOR_P27 (VALUE) \\\n+   : 0)\n #define CONST_OK_FOR_M(VALUE) ((VALUE)==1)\n #define CONST_OK_FOR_N(VALUE) ((VALUE)==0)\n-#define CONST_OK_FOR_O(VALUE) (((HOST_WIDE_INT)(VALUE)) >= -32 \\\n-\t\t\t       && ((HOST_WIDE_INT)(VALUE)) <= 31)\n-#define CONST_OK_FOR_P(VALUE) (((HOST_WIDE_INT)(VALUE)) >= -512 \\\n-\t\t\t       && ((HOST_WIDE_INT)(VALUE)) <= 511)\n-#define CONST_OK_FOR_LETTER_P(VALUE, C)\t\t\\\n-     ((C) == 'I' ? CONST_OK_FOR_I (VALUE)\t\\\n-    : (C) == 'J' ? CONST_OK_FOR_J (VALUE)\t\\\n-    : (C) == 'K' ? CONST_OK_FOR_K (VALUE)\t\\\n-    : (C) == 'L' ? CONST_OK_FOR_L (VALUE)\t\\\n-    : (C) == 'M' ? CONST_OK_FOR_M (VALUE)\t\\\n-    : (C) == 'N' ? CONST_OK_FOR_N (VALUE)\t\\\n-    : (C) == 'O' ? CONST_OK_FOR_O (VALUE)\t\\\n-    : (C) == 'P' ? CONST_OK_FOR_P (VALUE)\t\\\n+#define CONST_OK_FOR_CONSTRAINT_P(VALUE, C, STR)\t\\\n+     ((C) == 'I' ? CONST_OK_FOR_I ((VALUE), (STR))\t\\\n+    : (C) == 'J' ? CONST_OK_FOR_J ((VALUE), (STR))\t\\\n+    : (C) == 'K' ? CONST_OK_FOR_K ((VALUE), (STR))\t\\\n+    : (C) == 'M' ? CONST_OK_FOR_M (VALUE)\t\t\\\n+    : (C) == 'N' ? CONST_OK_FOR_N (VALUE)\t\t\\\n+    : (C) == 'P' ? CONST_OK_FOR_P ((VALUE), (STR))\t\\\n     : 0)\n \n /* Similar, but for floating constants, and defining letters G and H.\n@@ -1403,7 +1476,7 @@ extern enum reg_class reg_class_from_letter[];\n \t  || GET_CODE (X) == PLUS))\t\t\t\t\t\\\n    ? GENERAL_REGS\t\t\t\t\t\t\t\\\n    : CLASS == FPUL_REGS && immediate_operand ((X), (MODE))\t\t\\\n-   ? (GET_CODE (X) == CONST_INT && CONST_OK_FOR_I (INTVAL (X))\t\t\\\n+   ? (GET_CODE (X) == CONST_INT && CONST_OK_FOR_I08 (INTVAL (X))\t\\\n       ? GENERAL_REGS\t\t\t\t\t\t\t\\\n       : R0_REGS)\t\t\t\t\t\t\t\\\n    : (CLASS == FPSCR_REGS\t\t\t\t\t\t\\\n@@ -2300,8 +2373,19 @@ while (0)\n \t   && GET_CODE (XEXP (XEXP (XEXP ((OP), 0), 0), 0)) == LABEL_REF \\\n \t   && GET_CODE (XEXP (XEXP (XEXP ((OP), 0), 0), 1)) == CONST_INT)))\n \n-/* The `S' constraint is a 16-bit constant, literal or symbolic.  */\n-#define EXTRA_CONSTRAINT_S(OP) \\\n+/* Extra address constraints.  */\n+#define EXTRA_CONSTRAINT_A(OP, STR) 0\n+\n+/* Constraint for selecting FLDI0 or FLDI1 instruction. If the clobber\n+   operand is not SCRATCH (i.e. REG) then R0 is probably being\n+   used, hence mova is being used, hence do not select this pattern */\n+#define EXTRA_CONSTRAINT_Bsc(OP)    (GET_CODE(OP) == SCRATCH)\n+#define EXTRA_CONSTRAINT_B(OP, STR) \\\n+  ((STR)[1] == 's' && (STR)[2] == 'c' ? EXTRA_CONSTRAINT_Bsc (OP) \\\n+   : 0)\n+\n+/* The `C16' constraint is a 16-bit constant, literal or symbolic.  */\n+#define EXTRA_CONSTRAINT_C16(OP) \\\n   (GET_CODE (OP) == CONST \\\n    && GET_CODE (XEXP ((OP), 0)) == SIGN_EXTEND \\\n    && GET_MODE (XEXP ((OP), 0)) == DImode \\\n@@ -2350,6 +2434,14 @@ while (0)\n   (GET_CODE (OP) == CONST && GET_CODE (XEXP ((OP), 0)) == UNSPEC \\\n    && XINT (XEXP ((OP), 0), 1) == UNSPEC_PIC)\n \n+#define PIC_OFFSET_P(OP) \\\n+  (PIC_ADDR_P (OP) \\\n+   && GET_CODE (XVECEXP (XEXP ((OP), 0), 0, 0)) == MINUS \\\n+   && reg_mentioned_p (pc_rtx, XEXP (XVECEXP (XEXP ((OP), 0), 0, 0), 1)))\n+\n+#define PIC_DIRECT_ADDR_P(OP) \\\n+  (PIC_ADDR_P (OP) && GET_CODE (XVECEXP (XEXP ((OP), 0), 0, 0)) != MINUS)\n+\n #define NON_PIC_REFERENCE_P(OP) \\\n   (GET_CODE (OP) == LABEL_REF || GET_CODE (OP) == SYMBOL_REF \\\n    || DATALABEL_REF_P (OP) \\\n@@ -2363,14 +2455,17 @@ while (0)\n    || GOTOFF_P (OP) || PIC_ADDR_P (OP))\n \n #define MOVI_SHORI_BASE_OPERAND_P(OP) \\\n-  (flag_pic ? PIC_REFERENCE_P (OP) : NON_PIC_REFERENCE_P (OP))\n+  (flag_pic \\\n+   ? (GOT_ENTRY_P (OP) || GOTPLT_ENTRY_P (OP)  || GOTOFF_P (OP) \\\n+      || PIC_OFFSET_P (OP)) \\\n+   : NON_PIC_REFERENCE_P (OP))\n \n-/* The `T' constraint is a label or a symbol.  */\n-#define EXTRA_CONSTRAINT_T(OP) \\\n+/* The `Csy' constraint is a label or a symbol.  */\n+#define EXTRA_CONSTRAINT_Csy(OP) \\\n   (NON_PIC_REFERENCE_P (OP))\n \n /* A zero in any shape or form.  */\n-#define EXTRA_CONSTRAINT_U(OP) \\\n+#define EXTRA_CONSTRAINT_Z(OP) \\\n   ((OP) == CONST0_RTX (GET_MODE (OP)))\n \n /* Any vector constant we can handle.  */\n@@ -2381,18 +2476,38 @@ while (0)\n \t   ? sh_const_vec ((OP), VOIDmode) \\\n \t   : sh_1el_vec ((OP), VOIDmode))))\n \n-#define EXTRA_CONSTRAINT_Z(OP) \\\n-  (GET_CODE (OP) == CONST_INT \\\n-   && (INTVAL (OP) == (unsigned) 0xffffffff \\\n-       || INTVAL (OP) == (HOST_WIDE_INT) -1 << 32))\n+/* A non-explicit constant that can be loaded directly into a general purpose\n+   register.  This is like 's' except we don't allow PIC_DIRECT_ADDR_P.  */\n+#define EXTRA_CONSTRAINT_Cpg(OP) \\\n+  (CONSTANT_P (OP) \\\n+   && GET_CODE (OP) != CONST_INT \\\n+   && GET_CODE (OP) != CONST_DOUBLE \\\n+   && (!flag_pic \\\n+       || (LEGITIMATE_PIC_OPERAND_P (OP) \\\n+        && (! PIC_ADDR_P (OP) || PIC_OFFSET_P (OP)) \\\n+        && GET_CODE (OP) != LABEL_REF)))\n+#define EXTRA_CONSTRAINT_C(OP, STR) \\\n+  ((STR)[1] == '1' && (STR)[2] == '6' ? EXTRA_CONSTRAINT_C16 (OP) \\\n+   : (STR)[1] == 's' && (STR)[2] == 'y' ? EXTRA_CONSTRAINT_Csy (OP) \\\n+   : (STR)[1] == 'p' && (STR)[2] == 'g' ? EXTRA_CONSTRAINT_Cpg (OP) \\\n+   : 0)\n+\n+#define EXTRA_MEMORY_CONSTRAINT(C,STR) ((C) == 'S')\n+#define EXTRA_CONSTRAINT_Sr0(OP) \\\n+  (memory_operand((OP), GET_MODE (OP)) \\\n+   && ! refers_to_regno_p (R0_REG, R0_REG + 1, OP, (rtx *)0))\n+#define EXTRA_CONSTRAINT_S(OP, STR) \\\n+  ((STR)[1] == 'r' && (STR)[2] == '0' ? EXTRA_CONSTRAINT_Sr0 (OP) \\\n+   : 0)\n \n-#define EXTRA_CONSTRAINT(OP, C)\t\t\\\n+#define EXTRA_CONSTRAINT_STR(OP, C, STR)\t\t\\\n   ((C) == 'Q' ? EXTRA_CONSTRAINT_Q (OP)\t\\\n-   : (C) == 'S' ? EXTRA_CONSTRAINT_S (OP) \\\n-   : (C) == 'T' ? EXTRA_CONSTRAINT_T (OP) \\\n-   : (C) == 'U' ? EXTRA_CONSTRAINT_U (OP) \\\n+   : (C) == 'A' ? EXTRA_CONSTRAINT_A ((OP), (STR)) \\\n+   : (C) == 'B' ? EXTRA_CONSTRAINT_B ((OP), (STR)) \\\n+   : (C) == 'C' ? EXTRA_CONSTRAINT_C ((OP), (STR)) \\\n+   : (C) == 'S' ? EXTRA_CONSTRAINT_S ((OP), (STR)) \\\n    : (C) == 'W' ? EXTRA_CONSTRAINT_W (OP) \\\n-   : (C) == 'Z' ? EXTRA_CONSTRAINT_Z (OP) \\\n+   : (C) == 'U' ? EXTRA_CONSTRAINT_Z (OP) \\\n    : 0)\n \f\n /* GO_IF_LEGITIMATE_ADDRESS recognizes an RTL expression"}, {"sha": "f67ff56506fda58d3d556404add7b3ce89922b91", "filename": "gcc/config/sh/sh.md", "status": "modified", "additions": 165, "deletions": 155, "changes": 320, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/735cb76eba6a5558d6605aa191e04c55e1ce7e98/gcc%2Fconfig%2Fsh%2Fsh.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/735cb76eba6a5558d6605aa191e04c55e1ce7e98/gcc%2Fconfig%2Fsh%2Fsh.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fsh.md?ref=735cb76eba6a5558d6605aa191e04c55e1ce7e98", "patch": "@@ -628,7 +628,7 @@\n (define_insn \"\"\n   [(set (reg:SI T_REG)\n \t(eq:SI (and:SI (match_operand:SI 0 \"arith_reg_operand\" \"z,r\")\n-\t\t       (match_operand:SI 1 \"arith_operand\" \"L,r\"))\n+\t\t       (match_operand:SI 1 \"arith_operand\" \"K08,r\"))\n \t       (const_int 0)))]\n   \"TARGET_SH1\"\n   \"tst\t%1,%0\"\n@@ -643,7 +643,7 @@\n (define_insn \"cmpeqsi_t\"\n   [(set (reg:SI T_REG)\n \t(eq:SI (match_operand:SI 0 \"arith_reg_operand\" \"r,z,r\")\n-\t       (match_operand:SI 1 \"arith_operand\" \"N,rI,r\")))]\n+\t       (match_operand:SI 1 \"arith_operand\" \"N,rI08,r\")))]\n   \"TARGET_SH1\"\n   \"@\n \ttst\t%0,%0\n@@ -997,7 +997,7 @@\n (define_insn \"*adddi3_media\"\n   [(set (match_operand:DI 0 \"arith_reg_operand\" \"=r,r\")\n \t(plus:DI (match_operand:DI 1 \"arith_reg_operand\" \"%r,r\")\n-\t\t (match_operand:DI 2 \"arith_operand\" \"r,P\")))]\n+\t\t (match_operand:DI 2 \"arith_operand\" \"r,I10\")))]\n   \"TARGET_SHMEDIA\"\n   \"@\n \tadd\t%1, %2, %0\n@@ -1079,7 +1079,7 @@\n (define_insn \"addsi3_media\"\n   [(set (match_operand:SI 0 \"arith_reg_operand\" \"=r,r\")\n \t(plus:SI (match_operand:SI 1 \"extend_reg_operand\" \"%r,r\")\n-\t\t (match_operand:SI 2 \"arith_operand\" \"r,P\")))]\n+\t\t (match_operand:SI 2 \"arith_operand\" \"r,I10\")))]\n   \"TARGET_SHMEDIA\"\n   \"@\n \tadd.l\t%1, %2, %0\n@@ -1089,7 +1089,7 @@\n (define_insn \"*addsi3_compact\"\n   [(set (match_operand:SI 0 \"arith_reg_operand\" \"=r\")\n \t(plus:SI (match_operand:SI 1 \"arith_operand\" \"%0\")\n-\t\t (match_operand:SI 2 \"arith_operand\" \"rI\")))]\n+\t\t (match_operand:SI 2 \"arith_operand\" \"rI08\")))]\n   \"TARGET_SH1\"\n   \"add\t%2,%0\"\n   [(set_attr \"type\" \"arith\")])\n@@ -1950,7 +1950,7 @@\n (define_insn \"*andsi3_compact\"\n   [(set (match_operand:SI 0 \"arith_reg_operand\" \"=r,z\")\n \t(and:SI (match_operand:SI 1 \"arith_reg_operand\" \"%0,0\")\n-\t\t(match_operand:SI 2 \"logical_operand\" \"r,L\")))]\n+\t\t(match_operand:SI 2 \"logical_operand\" \"r,K08\")))]\n   \"TARGET_SH1\"\n   \"and\t%2,%0\"\n   [(set_attr \"type\" \"arith\")])\n@@ -1976,7 +1976,7 @@\n (define_insn_and_split \"anddi3\"\n   [(set (match_operand:DI 0 \"arith_reg_operand\" \"=r,r,r\")\n \t(and:DI (match_operand:DI 1 \"arith_reg_operand\" \"%r,r,r\")\n-\t\t(match_operand:DI 2 \"and_operand\" \"r,P,Z\")))]\n+\t\t(match_operand:DI 2 \"and_operand\" \"r,I10,J16\")))]\n   \"TARGET_SHMEDIA\"\n   \"@\n \tand\t%1, %2, %0\n@@ -2006,15 +2006,15 @@\n (define_insn \"iorsi3\"\n   [(set (match_operand:SI 0 \"arith_reg_operand\" \"=r,z\")\n \t(ior:SI (match_operand:SI 1 \"arith_reg_operand\" \"%0,0\")\n-\t\t(match_operand:SI 2 \"logical_operand\" \"r,L\")))]\n+\t\t(match_operand:SI 2 \"logical_operand\" \"r,K08\")))]\n   \"TARGET_SH1\"\n   \"or\t%2,%0\"\n   [(set_attr \"type\" \"arith\")])\n \n (define_insn \"iordi3\"\n   [(set (match_operand:DI 0 \"arith_reg_operand\" \"=r,r\")\n \t(ior:DI (match_operand:DI 1 \"arith_reg_operand\" \"%r,r\")\n-\t\t(match_operand:DI 2 \"logical_operand\" \"r,P\")))]\n+\t\t(match_operand:DI 2 \"logical_operand\" \"r,I10\")))]\n   \"TARGET_SHMEDIA\"\n   \"@\n \tor\t%1, %2, %0\n@@ -2024,15 +2024,15 @@\n (define_insn \"xorsi3\"\n   [(set (match_operand:SI 0 \"arith_reg_operand\" \"=z,r\")\n \t(xor:SI (match_operand:SI 1 \"arith_reg_operand\" \"%0,0\")\n-\t\t(match_operand:SI 2 \"logical_operand\" \"L,r\")))]\n+\t\t(match_operand:SI 2 \"logical_operand\" \"K08,r\")))]\n   \"TARGET_SH1\"\n   \"xor\t%2,%0\"\n   [(set_attr \"type\" \"arith\")])\n \n (define_insn \"xordi3\"\n   [(set (match_operand:DI 0 \"arith_reg_operand\" \"=r,r\")\n \t(xor:DI (match_operand:DI 1 \"arith_reg_operand\" \"%r,r\")\n-\t\t(match_operand:DI 2 \"shmedia_6bit_operand\" \"r,O\")))]\n+\t\t(match_operand:DI 2 \"shmedia_6bit_operand\" \"r,I06\")))]\n   \"TARGET_SHMEDIA\"\n   \"@\n \txor\t%1, %2, %0\n@@ -2224,11 +2224,11 @@\n (define_insn_and_split \"ashlsi3_std\"\n   [(set (match_operand:SI 0 \"arith_reg_operand\" \"=r,r,r,r\")\n \t(ashift:SI (match_operand:SI 1 \"arith_reg_operand\" \"0,0,0,0\")\n-\t\t   (match_operand:SI 2 \"nonmemory_operand\" \"r,M,K,?ri\")))\n+\t\t   (match_operand:SI 2 \"nonmemory_operand\" \"r,M,P27,?ri\")))\n    (clobber (match_scratch:SI 3 \"=X,X,X,&r\"))]\n   \"TARGET_SH3\n    || (TARGET_SH1 && GET_CODE (operands[2]) == CONST_INT\n-       && CONST_OK_FOR_K (INTVAL (operands[2])))\"\n+       && CONST_OK_FOR_P27 (INTVAL (operands[2])))\"\n   \"@\n    shld\t%2,%0\n    add\t%0,%0\n@@ -2237,7 +2237,7 @@\n   \"TARGET_SH3\n    && reload_completed\n    && GET_CODE (operands[2]) == CONST_INT\n-   && ! CONST_OK_FOR_K (INTVAL (operands[2]))\"\n+   && ! CONST_OK_FOR_P27 (INTVAL (operands[2]))\"\n   [(set (match_dup 3) (match_dup 2))\n    (parallel\n     [(set (match_dup 0) (ashift:SI (match_dup 1) (match_dup 3)))\n@@ -2249,8 +2249,8 @@\n (define_insn \"ashlhi3_k\"\n   [(set (match_operand:HI 0 \"arith_reg_operand\" \"=r,r\")\n \t(ashift:HI (match_operand:HI 1 \"arith_reg_operand\" \"0,0\")\n-\t\t   (match_operand:HI 2 \"const_int_operand\" \"M,K\")))]\n-  \"TARGET_SH1 && CONST_OK_FOR_K (INTVAL (operands[2]))\"\n+\t\t   (match_operand:HI 2 \"const_int_operand\" \"M,P27\")))]\n+  \"TARGET_SH1 && CONST_OK_FOR_P27 (INTVAL (operands[2]))\"\n   \"@\n \tadd\t%0,%0\n \tshll%O2\t%0\"\n@@ -2494,8 +2494,8 @@\n (define_insn \"lshrsi3_k\"\n   [(set (match_operand:SI 0 \"arith_reg_operand\" \"=r\")\n \t(lshiftrt:SI (match_operand:SI 1 \"arith_reg_operand\" \"0\")\n-\t\t     (match_operand:SI 2 \"const_int_operand\" \"K\")))]\n-  \"TARGET_SH1 && CONST_OK_FOR_K (INTVAL (operands[2]))\n+\t\t     (match_operand:SI 2 \"const_int_operand\" \"P27\")))]\n+  \"TARGET_SH1 && CONST_OK_FOR_P27 (INTVAL (operands[2]))\n    && ! CONST_OK_FOR_M (INTVAL (operands[2]))\"\n   \"shlr%O2\t%0\"\n   [(set_attr \"type\" \"arith\")])\n@@ -3385,8 +3385,10 @@\n ;; (set (subreg:SI (mem:QI (plus:SI (reg:SI SP_REG) (const_int 12)) 0) 0)\n ;; (made from (set (subreg:SI (reg:QI ###) 0) ) into T.\n (define_insn \"movsi_i\"\n-  [(set (match_operand:SI 0 \"general_movdst_operand\" \"=r,r,t,r,r,r,r,m,<,<,x,l,x,l,r\")\n-\t(match_operand:SI 1 \"general_movsrc_operand\" \"Q,rI,r,mr,x,l,t,r,x,l,r,r,>,>,i\"))]\n+  [(set (match_operand:SI 0 \"general_movdst_operand\"\n+\t    \"=r,r,t,r,r,r,r,m,<,<,x,l,x,l,r\")\n+\t(match_operand:SI 1 \"general_movsrc_operand\"\n+\t \"Q,rI08,r,mr,x,l,t,r,x,l,r,r,>,>,i\"))]\n   \"TARGET_SH1\n    && ! TARGET_SH2E\n    && (register_operand (operands[0], SImode)\n@@ -3417,8 +3419,10 @@\n ;; ??? We can't include f/f because we need the proper FPSCR setting when\n ;; TARGET_FMOVD is in effect, and mode switching is done before reload.\n (define_insn \"movsi_ie\"\n-  [(set (match_operand:SI 0 \"general_movdst_operand\" \"=r,r,t,r,r,r,r,m,<,<,x,l,x,l,y,<,r,y,r,*f,y,*f,y\")\n-\t(match_operand:SI 1 \"general_movsrc_operand\" \"Q,rI,r,mr,x,l,t,r,x,l,r,r,>,>,>,y,i,r,y,y,*f,*f,y\"))]\n+  [(set (match_operand:SI 0 \"general_movdst_operand\"\n+\t    \"=r,r,t,r,r,r,r,m,<,<,x,l,x,l,y,<,r,y,r,*f,y,*f,y\")\n+\t(match_operand:SI 1 \"general_movsrc_operand\"\n+\t \"Q,rI08,r,mr,x,l,t,r,x,l,r,r,>,>,>,y,i,r,y,y,*f,*f,y\"))]\n   \"TARGET_SH2E\n    && (register_operand (operands[0], SImode)\n        || register_operand (operands[1], SImode))\"\n@@ -3452,7 +3456,7 @@\n \n (define_insn \"movsi_i_lowpart\"\n   [(set (strict_low_part (match_operand:SI 0 \"general_movdst_operand\" \"+r,r,r,r,r,r,m,r\"))\n-\t(match_operand:SI 1 \"general_movsrc_operand\" \"Q,rI,mr,x,l,t,r,i\"))]\n+\t(match_operand:SI 1 \"general_movsrc_operand\" \"Q,rI08,mr,x,l,t,r,i\"))]\n    \"TARGET_SH1\n     && (register_operand (operands[0], SImode)\n         || register_operand (operands[1], SImode))\"\n@@ -3468,8 +3472,10 @@\n   [(set_attr \"type\" \"pcload,move,load,move,prget,move,store,pcload\")])\n \n (define_insn \"*movsi_media\"\n-  [(set (match_operand:SI 0 \"general_movdst_operand\" \"=r,r,r,r,m,f,m,f,r,f,*b,r,b\")\n-\t(match_operand:SI 1 \"general_movsrc_operand\" \"r,JS,ns,m,rU,m,f,rU,f,f,r,*b,T\"))]\n+  [(set (match_operand:SI 0 \"general_movdst_operand\"\n+\t        \"=r,r,r,r,m,f,m,f,r,f,*b,r,b\")\n+\t(match_operand:SI 1 \"general_movsrc_operand\"\n+\t \"r,I16C16,nCpg,m,rZ,m,f,rZ,f,f,r,*b,Csy\"))]\n   \"TARGET_SHMEDIA_FPU\n    && (register_operand (operands[0], SImode)\n        || sh_register_operand (operands[1], SImode))\"\n@@ -3491,8 +3497,10 @@\n    (set_attr \"length\" \"4,4,8,4,4,4,4,4,4,4,4,4,12\")])\n \n (define_insn \"*movsi_media_nofpu\"\n-  [(set (match_operand:SI 0 \"general_movdst_operand\" \"=r,r,r,r,m,*b,r,b\")\n-\t(match_operand:SI 1 \"general_movsrc_operand\" \"r,JS,ns,m,rU,r,*b,T\"))]\n+  [(set (match_operand:SI 0 \"general_movdst_operand\"\n+\t        \"=r,r,r,r,m,*b,r,b\")\n+\t(match_operand:SI 1 \"general_movsrc_operand\"\n+\t \"r,I16C16,nCpg,m,rZ,r,*b,Csy\"))]\n   \"TARGET_SHMEDIA\n    && (register_operand (operands[0], SImode)\n        || sh_register_operand (operands[1], SImode))\"\n@@ -3525,7 +3533,7 @@\n \t(match_operand:SI 1 \"immediate_operand\" \"\"))]\n   \"TARGET_SHMEDIA && reload_completed\n    && ((GET_CODE (operands[1]) == CONST_INT\n-\t&& ! CONST_OK_FOR_J (INTVAL (operands[1])))\n+\t&& ! CONST_OK_FOR_I16 (INTVAL (operands[1])))\n        || GET_CODE (operands[1]) == CONST_DOUBLE)\"\n   [(set (subreg:DI (match_dup 0) 0) (match_dup 1))])\n \n@@ -3641,7 +3649,7 @@\n \n (define_insn \"*movqi_media\"\n   [(set (match_operand:QI 0 \"general_movdst_operand\" \"=r,r,r,m\")\n-\t(match_operand:QI 1 \"general_movsrc_operand\" \"r,JS,m,rU\"))]\n+\t(match_operand:QI 1 \"general_movsrc_operand\" \"r,I16C16,m,rZ\"))]\n   \"TARGET_SHMEDIA\n    && (arith_reg_operand (operands[0], QImode)\n        || arith_reg_or_0_operand (operands[1], QImode))\"\n@@ -3676,8 +3684,8 @@\n \n /* When storing r0, we have to avoid reg+reg addressing.  */\n (define_insn \"movhi_i\"\n-  [(set (match_operand:HI 0 \"general_movdst_operand\" \"=r,r,r,r,m,r,l,r\")\n-\t(match_operand:HI 1 \"general_movsrc_operand\" \"Q,rI,m,t,r,l,r,i\"))]\n+  [(set (match_operand:HI 0 \"general_movdst_operand\"   \"=r,r,r,r,m,r,l,r\")\n+\t(match_operand:HI 1 \"general_movsrc_operand\" \"Q,rI08,m,t,r,l,r,i\"))]\n   \"TARGET_SH1\n    && (arith_reg_operand (operands[0], HImode)\n        || arith_reg_operand (operands[1], HImode))\n@@ -3697,8 +3705,8 @@\n   [(set_attr \"type\" \"pcload,move,load,move,store,move,move,pcload\")])\n \n (define_insn \"*movhi_media\"\n-  [(set (match_operand:HI 0 \"general_movdst_operand\" \"=r,r,r,r,m\")\n-\t(match_operand:HI 1 \"general_movsrc_operand\" \"r,JS,n,m,rU\"))]\n+  [(set (match_operand:HI 0 \"general_movdst_operand\"     \"=r,r,r,r,m\")\n+\t(match_operand:HI 1 \"general_movsrc_operand\" \"r,I16C16,n,m,rZ\"))]\n   \"TARGET_SHMEDIA\n    && (arith_reg_operand (operands[0], HImode)\n        || arith_reg_or_0_operand (operands[1], HImode))\"\n@@ -3714,7 +3722,7 @@\n   [(set (match_operand:HI 0 \"register_operand\" \"\")\n \t(match_operand:HI 1 \"immediate_operand\" \"\"))]\n   \"TARGET_SHMEDIA && reload_completed\n-   && ! CONST_OK_FOR_J (INTVAL (operands[1]))\"\n+   && ! CONST_OK_FOR_I16 (INTVAL (operands[1]))\"\n   [(set (subreg:DI (match_dup 0) 0) (match_dup 1))])\n \n (define_expand \"movhi\"\n@@ -3743,7 +3751,7 @@\n ;; compiled with -m2 -ml -O3 -funroll-loops\n (define_insn \"*movdi_i\"\n   [(set (match_operand:DI 0 \"general_movdst_operand\" \"=r,r,r,m,r,r,r,*!x\")\n-\t(match_operand:DI 1 \"general_movsrc_operand\" \"Q,r,m,r,I,i,x,r\"))]\n+\t(match_operand:DI 1 \"general_movsrc_operand\" \"Q,r,m,r,I08,i,x,r\"))]\n   \"TARGET_SH1\n    && (arith_reg_operand (operands[0], DImode)\n        || arith_reg_operand (operands[1], DImode))\"\n@@ -3801,8 +3809,10 @@\n }\")\n \n (define_insn \"*movdi_media\"\n-  [(set (match_operand:DI 0 \"general_movdst_operand\" \"=r,r,r,rl,m,f,m,f,r,f,*b,r,b\")\n-\t(match_operand:DI 1 \"general_movsrc_operand\" \"r,JS,iF,m,rlU,m,f,rU,f,f,r,*b,T\"))]\n+  [(set (match_operand:DI 0 \"general_movdst_operand\"\n+\t         \"=r,r,r,rl,m,f,m,f,r,f,*b,r,b\")\n+\t(match_operand:DI 1 \"general_movsrc_operand\"\n+\t \"r,I16C16,nCpgF,m,rlZ,m,f,rZ,f,f,r,*b,Csy\"))]\n   \"TARGET_SHMEDIA_FPU\n    && (register_operand (operands[0], DImode)\n        || sh_register_operand (operands[1], DImode))\"\n@@ -3825,7 +3835,7 @@\n \n (define_insn \"*movdi_media_nofpu\"\n   [(set (match_operand:DI 0 \"general_movdst_operand\" \"=r,r,r,rl,m,*b,r,b\")\n-\t(match_operand:DI 1 \"general_movsrc_operand\" \"r,JS,iF,m,rlU,r,*b,T\"))]\n+\t(match_operand:DI 1 \"general_movsrc_operand\" \"r,I16C16,nCpgF,m,rlZ,r,*b,Csy\"))]\n   \"TARGET_SHMEDIA\n    && (register_operand (operands[0], DImode)\n        || sh_register_operand (operands[1], DImode))\"\n@@ -3940,7 +3950,7 @@\n \t(match_operand:DI 1 \"immediate_operand\" \"\"))]\n   \"TARGET_SHMEDIA && reload_completed\n    && GET_CODE (operands[1]) == CONST_INT\n-   && ! CONST_OK_FOR_J (INTVAL (operands[1]))\"\n+   && ! CONST_OK_FOR_I16 (INTVAL (operands[1]))\"\n   [(set (match_dup 0) (match_dup 2))\n    (match_dup 1)]\n   \"\n@@ -3966,17 +3976,17 @@\n     {\n       /* If we can't generate the constant with a two-insn movi / shori\n \t sequence, try some other strategies.  */\n-      if (! CONST_OK_FOR_J (high))\n+      if (! CONST_OK_FOR_I16 (high))\n \t{\n \t  /* Try constant load / left shift.  We know VAL != 0.  */\n \t  val2 = val ^ (val-1);\n \t  if (val2 > 0x1ffff)\n \t    {\n \t      int trailing_zeroes = exact_log2 ((val2 >> 16) + 1) + 15;\n \n-\t      if (CONST_OK_FOR_J (val >> trailing_zeroes)\n-\t\t  || (! CONST_OK_FOR_J (high >> 16)\n-\t\t      && CONST_OK_FOR_J (val >> (trailing_zeroes + 16))))\n+\t      if (CONST_OK_FOR_I16 (val >> trailing_zeroes)\n+\t\t  || (! CONST_OK_FOR_I16 (high >> 16)\n+\t\t      && CONST_OK_FOR_I16 (val >> (trailing_zeroes + 16))))\n \t\t{\n \t\t  val2 = (HOST_WIDE_INT) val >> trailing_zeroes;\n \t\t  operands[1] = gen_ashldi3_media (operands[0], operands[0],\n@@ -3991,7 +4001,7 @@\n \t      int shift = 49 - exact_log2 (val2);\n \n \t      val2 = trunc_int_for_mode (val << shift, DImode);\n-\t      if (CONST_OK_FOR_J (val2))\n+\t      if (CONST_OK_FOR_I16 (val2))\n \t\t{\n \t\t  operands[1] = gen_lshrdi3_media (operands[0], operands[0],\n \t\t\t\t\t\t   GEN_INT (shift));\n@@ -4019,7 +4029,7 @@\n \t    }\n \t  /* Try movi / mshflo.l w/ r63.  */\n \t  val2 = val + ((HOST_WIDE_INT) -1 << 32);\n-\t  if ((HOST_WIDE_INT) val2 < 0 && CONST_OK_FOR_J (val2))\n+\t  if ((HOST_WIDE_INT) val2 < 0 && CONST_OK_FOR_I16 (val2))\n \t    {\n \t      operands[1] = gen_mshflo_l_di (operands[0], operands[0],\n \t\t\t\t\t     GEN_INT (0));\n@@ -4079,7 +4089,7 @@\n \t\t\t   (const_int 16))\n \t\t(zero_extend:DI\n \t\t (truncate:HI\n-\t\t  (match_operand:DI 2 \"immediate_operand\" \"JS,nF\")))))]\n+\t\t  (match_operand:DI 2 \"immediate_operand\" \"I16C16,nF\")))))]\n   \"TARGET_SHMEDIA\"\n   \"@\n \tshori\t%u2, %0\n@@ -4094,7 +4104,7 @@\n \n (define_insn \"movdf_media\"\n   [(set (match_operand:DF 0 \"general_movdst_operand\" \"=f,f,r,r,r,f,m,r,m\")\n-\t(match_operand:DF 1 \"general_movsrc_operand\" \"f,rU,f,r,F,m,f,m,rU\"))]\n+\t(match_operand:DF 1 \"general_movsrc_operand\" \"f,rZ,f,r,F,m,f,m,rZ\"))]\n   \"TARGET_SHMEDIA_FPU\n    && (register_operand (operands[0], DFmode)\n        || sh_register_operand (operands[1], DFmode))\"\n@@ -4112,7 +4122,7 @@\n \n (define_insn \"movdf_media_nofpu\"\n   [(set (match_operand:DF 0 \"general_movdst_operand\" \"=r,r,r,m\")\n-\t(match_operand:DF 1 \"general_movsrc_operand\" \"r,F,m,rU\"))]\n+\t(match_operand:DF 1 \"general_movsrc_operand\" \"r,F,m,rZ\"))]\n   \"TARGET_SHMEDIA\n    && (register_operand (operands[0], DFmode)\n        || sh_register_operand (operands[1], DFmode))\"\n@@ -4637,7 +4647,7 @@\n \n (define_insn_and_split \"movv2sf_i\"\n   [(set (match_operand:V2SF 0 \"general_movdst_operand\" \"=f,rf,r,m,mf\")\n-\t(match_operand:V2SF 1 \"general_operand\" \"fm,rfm?,F?,f,rfU?\"))]\n+\t(match_operand:V2SF 1 \"general_operand\" \"fm,rfm?,F?,f,rfZ?\"))]\n   \"TARGET_SHMEDIA_FPU\"\n   \"#\"\n   \"TARGET_SHMEDIA_FPU && reload_completed\"\n@@ -4704,7 +4714,7 @@\n \n (define_insn_and_split \"*movv4sf_i\"\n   [(set (match_operand:V4SF 0 \"nonimmediate_operand\" \"=f,f,m\")\n-\t(match_operand:V4SF 1 \"general_operand\" \"fU,m,fU\"))]\n+\t(match_operand:V4SF 1 \"general_operand\" \"fZ,m,fZ\"))]\n   \"TARGET_SHMEDIA_FPU\"\n   \"#\"\n   \"&& reload_completed\"\n@@ -4802,7 +4812,7 @@\n \n (define_insn \"movsf_media\"\n   [(set (match_operand:SF 0 \"general_movdst_operand\" \"=f,f,r,r,r,f,m,r,m\")\n-\t(match_operand:SF 1 \"general_movsrc_operand\" \"f,rU,f,r,F,m,f,m,rU\"))]\n+\t(match_operand:SF 1 \"general_movsrc_operand\" \"f,rZ,f,r,F,m,f,m,rZ\"))]\n   \"TARGET_SHMEDIA_FPU\n    && (register_operand (operands[0], SFmode)\n        || sh_register_operand (operands[1], SFmode))\"\n@@ -4820,7 +4830,7 @@\n \n (define_insn \"movsf_media_nofpu\"\n   [(set (match_operand:SF 0 \"general_movdst_operand\" \"=r,r,r,m\")\n-\t(match_operand:SF 1 \"general_movsrc_operand\" \"r,F,m,rU\"))]\n+\t(match_operand:SF 1 \"general_movsrc_operand\" \"r,F,m,rZ\"))]\n   \"TARGET_SHMEDIA\n    && (register_operand (operands[0], SFmode)\n        || sh_register_operand (operands[1], SFmode))\"\n@@ -4851,7 +4861,7 @@\n \n (define_insn \"movsf_i\"\n   [(set (match_operand:SF 0 \"general_movdst_operand\" \"=r,r,r,r,m,l,r\")\n-\t(match_operand:SF 1 \"general_movsrc_operand\"  \"r,I,FQ,mr,r,r,l\"))]\n+\t(match_operand:SF 1 \"general_movsrc_operand\"  \"r,G,FQ,mr,r,r,l\"))]\n   \"TARGET_SH1\n    && (! TARGET_SH2E\n        /* ??? We provide some insn so that direct_{load,store}[SFmode] get set */\n@@ -4861,7 +4871,7 @@\n        || arith_reg_operand (operands[1], SFmode))\"\n   \"@\n \tmov\t%1,%0\n-\tmov\t%1,%0\n+\tmov\t#0,%0\n \tmov.l\t%1,%0\n \tmov.l\t%1,%0\n \tmov.l\t%1,%0\n@@ -4878,7 +4888,7 @@\n \t(match_operand:SF 1 \"general_movsrc_operand\"\n \t  \"f,r,G,H,FQ,mf,f,FQ,mr,r,y,f,>,fr,y,r,y,>,y\"))\n    (use (match_operand:PSI 2 \"fpscr_operand\" \"c,c,c,c,c,c,c,c,c,c,c,c,c,c,c,c,c,c,c\"))\n-   (clobber (match_scratch:SI 3 \"=X,X,X,X,&z,X,X,X,X,X,X,X,X,y,X,X,X,X,X\"))]\n+   (clobber (match_scratch:SI 3 \"=X,X,Bsc,Bsc,&z,X,X,X,X,X,X,X,X,y,X,X,X,X,X\"))]\n \n   \"TARGET_SH2E\n    && (arith_reg_operand (operands[0], SFmode)\n@@ -4978,7 +4988,7 @@\n \n (define_insn \"*movsi_y\"\n   [(set (match_operand:SI 0 \"register_operand\" \"=y,y\")\n-\t(match_operand:SI 1 \"immediate_operand\" \"Qi,I\"))\n+\t(match_operand:SI 1 \"immediate_operand\" \"Qi,I08\"))\n    (clobber (match_scratch:SI 2 \"=&z,r\"))]\n   \"TARGET_SH2E\n    && (reload_in_progress || reload_completed)\"\n@@ -5064,7 +5074,7 @@\n (define_expand \"beq_media\"\n   [(set (pc)\n \t(if_then_else (eq (match_operand:DI 1 \"arith_reg_operand\" \"r,r\")\n-\t\t\t  (match_operand:DI 2 \"arith_operand\" \"r,O\"))\n+\t\t\t  (match_operand:DI 2 \"arith_operand\" \"r,I06\"))\n \t\t      (label_ref:DI (match_operand 0 \"\" \"\"))\n \t\t      (pc)))]\n   \"TARGET_SHMEDIA\"\n@@ -5074,7 +5084,7 @@\n   [(set (pc)\n \t(if_then_else (match_operator 3 \"equality_comparison_operator\"\n \t\t\t[(match_operand:DI 1 \"arith_reg_operand\" \"r,r\")\n-\t\t\t (match_operand:DI 2 \"arith_operand\" \"r,O\")])\n+\t\t\t (match_operand:DI 2 \"arith_operand\" \"r,I06\")])\n \t\t      (match_operand:DI 0 \"target_operand\" \"b,b\")\n \t\t      (pc)))]\n   \"TARGET_SHMEDIA\"\n@@ -5086,7 +5096,7 @@\n (define_expand \"bne_media\"\n   [(set (pc)\n \t(if_then_else (ne (match_operand:DI 1 \"arith_reg_operand\" \"r,r\")\n-\t\t\t  (match_operand:DI 2 \"arith_operand\" \"r,O\"))\n+\t\t\t  (match_operand:DI 2 \"arith_operand\" \"r,I06\"))\n \t\t      (label_ref:DI (match_operand 0 \"\" \"\"))\n \t\t      (pc)))]\n   \"TARGET_SHMEDIA\"\n@@ -6633,19 +6643,19 @@\n ;; non-branch-target registers.\n (define_insn \"*pt\"\n   [(set (match_operand:DI 0 \"target_reg_operand\" \"=b\")\n-\t(match_operand:DI 1 \"\" \"T\"))]\n+\t(match_operand:DI 1 \"\" \"Csy\"))]\n   \"TARGET_SHMEDIA && flag_pic\n-   && EXTRA_CONSTRAINT_T (operands[1])\"\n+   && EXTRA_CONSTRAINT_Csy (operands[1])\"\n   \"pt\t%1, %0\"\n   [(set_attr \"type\" \"pt_media\")\n    (set_attr \"length\" \"*\")])\n \n (define_insn \"*ptb\"\n   [(set (match_operand:DI 0 \"target_reg_operand\" \"=b\")\n-\t(const:DI (unspec:DI [(match_operand:DI 1 \"\" \"T\")]\n+\t(const:DI (unspec:DI [(match_operand:DI 1 \"\" \"Csy\")]\n \t\t\t     UNSPEC_DATALABEL)))]\n   \"TARGET_SHMEDIA && flag_pic\n-   && EXTRA_CONSTRAINT_T (operands[1])\"\n+   && EXTRA_CONSTRAINT_Csy (operands[1])\"\n   \"ptb/u\tdatalabel %1, %0\"\n   [(set_attr \"type\" \"pt_media\")\n    (set_attr \"length\" \"*\")])\n@@ -9354,7 +9364,7 @@ mov.l\\\\t1f,r0\\\\n\\\\\n \n (define_insn \"movv8qi_i\"\n   [(set (match_operand:V8QI 0 \"general_movdst_operand\" \"=r,r,r,rl,m\")\n-\t(match_operand:V8QI 1 \"general_movsrc_operand\" \"r,JSU,nW,m,rlU\"))]\n+\t(match_operand:V8QI 1 \"general_movsrc_operand\" \"r,I16C16Z,nW,m,rlZ\"))]\n   \"TARGET_SHMEDIA\n    && (register_operand (operands[0], V8QImode)\n        || sh_register_operand (operands[1], V8QImode))\"\n@@ -9446,7 +9456,7 @@ mov.l\\\\t1f,r0\\\\n\\\\\n \n (define_insn \"movv2hi_i\"\n   [(set (match_operand:V2HI 0 \"general_movdst_operand\" \"=r,r,r,rl,m\")\n-\t(match_operand:V2HI 1 \"general_movsrc_operand\" \"r,JSU,nW,m,rlU\"))]\n+\t(match_operand:V2HI 1 \"general_movsrc_operand\" \"r,I16C16Z,nW,m,rlZ\"))]\n   \"TARGET_SHMEDIA\n    && (register_operand (operands[0], V2HImode)\n        || sh_register_operand (operands[1], V2HImode))\"\n@@ -9467,7 +9477,7 @@ mov.l\\\\t1f,r0\\\\n\\\\\n \n (define_insn \"movv4hi_i\"\n   [(set (match_operand:V4HI 0 \"general_movdst_operand\" \"=r,r,r,rl,m\")\n-\t(match_operand:V4HI 1 \"general_movsrc_operand\" \"r,JSU,nW,m,rlU\"))]\n+\t(match_operand:V4HI 1 \"general_movsrc_operand\" \"r,I16C16Z,nW,m,rlZ\"))]\n   \"TARGET_SHMEDIA\n    && (register_operand (operands[0], V4HImode)\n        || sh_register_operand (operands[1], V4HImode))\"\n@@ -9488,7 +9498,7 @@ mov.l\\\\t1f,r0\\\\n\\\\\n \n (define_insn \"movv2si_i\"\n   [(set (match_operand:V2SI 0 \"general_movdst_operand\" \"=r,r,r,rl,m\")\n-\t(match_operand:V2SI 1 \"general_movsrc_operand\" \"r,JSU,nW,m,rlU\"))]\n+\t(match_operand:V2SI 1 \"general_movsrc_operand\" \"r,I16C16Z,nW,m,rlZ\"))]\n   \"TARGET_SHMEDIA\n    && (register_operand (operands[0], V2SImode)\n        || sh_register_operand (operands[1], V2SImode))\"\n@@ -9559,55 +9569,55 @@ mov.l\\\\t1f,r0\\\\n\\\\\n \n (define_insn \"negcmpeqv8qi\"\n   [(set (match_operand:V8QI 0 \"arith_reg_dest\" \"=r\")\n-\t(neg:V8QI (eq:V8QI (match_operand:V8QI 1 \"arith_reg_or_0_operand\" \"%rU\")\n-\t\t\t   (match_operand:V8QI 2 \"arith_reg_or_0_operand\" \"rU\"))))]\n+\t(neg:V8QI (eq:V8QI (match_operand:V8QI 1 \"arith_reg_or_0_operand\" \"%rZ\")\n+\t\t\t   (match_operand:V8QI 2 \"arith_reg_or_0_operand\" \"rZ\"))))]\n   \"TARGET_SHMEDIA\"\n   \"mcmpeq.b\t%N1, %N2, %0\"\n   [(set_attr \"type\" \"mcmp_media\")])\n \n (define_insn \"negcmpeqv2si\"\n   [(set (match_operand:V2SI 0 \"arith_reg_dest\" \"=r\")\n-\t(neg:V2SI (eq:V2SI (match_operand:V2SI 1 \"arith_reg_or_0_operand\" \"%rU\")\n-\t\t\t   (match_operand:V2SI 2 \"arith_reg_or_0_operand\" \"rU\"))))]\n+\t(neg:V2SI (eq:V2SI (match_operand:V2SI 1 \"arith_reg_or_0_operand\" \"%rZ\")\n+\t\t\t   (match_operand:V2SI 2 \"arith_reg_or_0_operand\" \"rZ\"))))]\n   \"TARGET_SHMEDIA\"\n   \"mcmpeq.l\t%N1, %N2, %0\"\n   [(set_attr \"type\" \"mcmp_media\")])\n \n (define_insn \"negcmpeqv4hi\"\n   [(set (match_operand:V4HI 0 \"arith_reg_dest\" \"=r\")\n-\t(neg:V4HI (eq:V4HI (match_operand:V4HI 1 \"arith_reg_or_0_operand\" \"%rU\")\n-\t\t\t   (match_operand:V4HI 2 \"arith_reg_or_0_operand\" \"rU\"))))]\n+\t(neg:V4HI (eq:V4HI (match_operand:V4HI 1 \"arith_reg_or_0_operand\" \"%rZ\")\n+\t\t\t   (match_operand:V4HI 2 \"arith_reg_or_0_operand\" \"rZ\"))))]\n   \"TARGET_SHMEDIA\"\n   \"mcmpeq.w\t%N1, %N2, %0\"\n   [(set_attr \"type\" \"mcmp_media\")])\n \n (define_insn \"negcmpgtuv8qi\"\n   [(set (match_operand:V8QI 0 \"arith_reg_dest\" \"=r\")\n-\t(neg:V8QI (gtu:V8QI (match_operand:V8QI 1 \"arith_reg_or_0_operand\" \"%rU\")\n-\t\t\t    (match_operand:V8QI 2 \"arith_reg_or_0_operand\" \"rU\"))))]\n+\t(neg:V8QI (gtu:V8QI (match_operand:V8QI 1 \"arith_reg_or_0_operand\" \"%rZ\")\n+\t\t\t    (match_operand:V8QI 2 \"arith_reg_or_0_operand\" \"rZ\"))))]\n   \"TARGET_SHMEDIA\"\n   \"mcmpgt.ub\t%N1, %N2, %0\"\n   [(set_attr \"type\" \"mcmp_media\")])\n \n (define_insn \"negcmpgtv2si\"\n   [(set (match_operand:V2SI 0 \"arith_reg_dest\" \"=r\")\n-\t(neg:V2SI (gt:V2SI (match_operand:V2SI 1 \"arith_reg_or_0_operand\" \"%rU\")\n-\t\t\t   (match_operand:V2SI 2 \"arith_reg_or_0_operand\" \"rU\"))))]\n+\t(neg:V2SI (gt:V2SI (match_operand:V2SI 1 \"arith_reg_or_0_operand\" \"%rZ\")\n+\t\t\t   (match_operand:V2SI 2 \"arith_reg_or_0_operand\" \"rZ\"))))]\n   \"TARGET_SHMEDIA\"\n   \"mcmpgt.l\t%N1, %N2, %0\"\n   [(set_attr \"type\" \"mcmp_media\")])\n \n (define_insn \"negcmpgtv4hi\"\n   [(set (match_operand:V4HI 0 \"arith_reg_dest\" \"=r\")\n-\t(neg:V4HI (gt:V4HI (match_operand:V4HI 1 \"arith_reg_or_0_operand\" \"%rU\")\n-\t\t\t   (match_operand:V4HI 2 \"arith_reg_or_0_operand\" \"rU\"))))]\n+\t(neg:V4HI (gt:V4HI (match_operand:V4HI 1 \"arith_reg_or_0_operand\" \"%rZ\")\n+\t\t\t   (match_operand:V4HI 2 \"arith_reg_or_0_operand\" \"rZ\"))))]\n   \"TARGET_SHMEDIA\"\n   \"mcmpgt.w\t%N1, %N2, %0\"\n   [(set_attr \"type\" \"mcmp_media\")])\n \n (define_insn \"mcmv\"\n   [(set (match_operand:DI 0 \"arith_reg_dest\" \"=r\")\n-\t(ior:DI (and:DI (match_operand:DI 1 \"arith_reg_or_0_operand\" \"rU\")\n+\t(ior:DI (and:DI (match_operand:DI 1 \"arith_reg_or_0_operand\" \"rZ\")\n \t\t\t(match_operand:DI 2 \"arith_reg_operand\" \"r\"))\n \t\t(and:DI (match_operand:DI 3 \"arith_reg_operand\" \"0\")\n \t\t\t(not:DI (match_dup 2)))))]\n@@ -9618,35 +9628,35 @@ mov.l\\\\t1f,r0\\\\n\\\\\n (define_insn \"mcnvs_lw\"\n   [(set (match_operand:V4HI 0 \"arith_reg_dest\" \"=r\")\n \t(vec_concat:V4HI\n-\t (ss_truncate:V2HI (match_operand:V2SI 1 \"arith_reg_or_0_operand\" \"rU\"))\n-\t (ss_truncate:V2HI (match_operand:V2SI 2 \"arith_reg_or_0_operand\" \"rU\"))))]\n+\t (ss_truncate:V2HI (match_operand:V2SI 1 \"arith_reg_or_0_operand\" \"rZ\"))\n+\t (ss_truncate:V2HI (match_operand:V2SI 2 \"arith_reg_or_0_operand\" \"rZ\"))))]\n   \"TARGET_SHMEDIA\"\n   \"mcnvs.lw\t%N1, %N2, %0\"\n   [(set_attr \"type\" \"mcmp_media\")])\n \n (define_insn \"mcnvs_wb\"\n   [(set (match_operand:V8QI 0 \"arith_reg_dest\" \"=r\")\n \t(vec_concat:V8QI\n-\t (ss_truncate:V4QI (match_operand:V4HI 1 \"arith_reg_or_0_operand\" \"rU\"))\n-\t (ss_truncate:V4QI (match_operand:V4HI 2 \"arith_reg_or_0_operand\" \"rU\"))))]\n+\t (ss_truncate:V4QI (match_operand:V4HI 1 \"arith_reg_or_0_operand\" \"rZ\"))\n+\t (ss_truncate:V4QI (match_operand:V4HI 2 \"arith_reg_or_0_operand\" \"rZ\"))))]\n   \"TARGET_SHMEDIA\"\n   \"mcnvs.wb\t%N1, %N2, %0\"\n   [(set_attr \"type\" \"mcmp_media\")])\n \n (define_insn \"mcnvs_wub\"\n   [(set (match_operand:V8QI 0 \"arith_reg_dest\" \"=r\")\n \t(vec_concat:V8QI\n-\t (us_truncate:V4QI (match_operand:V4HI 1 \"arith_reg_or_0_operand\" \"rU\"))\n-\t (us_truncate:V4QI (match_operand:V4HI 2 \"arith_reg_or_0_operand\" \"rU\"))))]\n+\t (us_truncate:V4QI (match_operand:V4HI 1 \"arith_reg_or_0_operand\" \"rZ\"))\n+\t (us_truncate:V4QI (match_operand:V4HI 2 \"arith_reg_or_0_operand\" \"rZ\"))))]\n   \"TARGET_SHMEDIA\"\n   \"mcnvs.wub\t%N1, %N2, %0\"\n   [(set_attr \"type\" \"mcmp_media\")])\n \n (define_insn \"mextr_rl\"\n   [(set (match_operand:DI 0 \"arith_reg_dest\" \"=r\")\n-\t(ior:DI (lshiftrt:DI (match_operand:DI 1 \"arith_reg_or_0_operand\" \"rU\")\n+\t(ior:DI (lshiftrt:DI (match_operand:DI 1 \"arith_reg_or_0_operand\" \"rZ\")\n \t\t\t     (match_operand:HI 3 \"mextr_bit_offset\" \"i\"))\n-\t       (ashift:DI (match_operand:DI 2 \"arith_reg_or_0_operand\" \"rU\")\n+\t       (ashift:DI (match_operand:DI 2 \"arith_reg_or_0_operand\" \"rZ\")\n \t\t\t  (match_operand:HI 4 \"mextr_bit_offset\" \"i\"))))]\n   \"TARGET_SHMEDIA && INTVAL (operands[3]) + INTVAL (operands[4]) == 64\"\n   \"*\n@@ -9661,9 +9671,9 @@ mov.l\\\\t1f,r0\\\\n\\\\\n \n (define_insn \"*mextr_lr\"\n   [(set (match_operand:DI 0 \"arith_reg_dest\" \"=r\")\n-\t(ior:DI (ashift:DI (match_operand:DI 1 \"arith_reg_or_0_operand\" \"rU\")\n+\t(ior:DI (ashift:DI (match_operand:DI 1 \"arith_reg_or_0_operand\" \"rZ\")\n \t\t\t   (match_operand:HI 3 \"mextr_bit_offset\" \"i\"))\n-\t       (lshiftrt:DI (match_operand:DI 2 \"arith_reg_or_0_operand\" \"rU\")\n+\t       (lshiftrt:DI (match_operand:DI 2 \"arith_reg_or_0_operand\" \"rZ\")\n \t\t\t    (match_operand:HI 4 \"mextr_bit_offset\" \"i\"))))]\n   \"TARGET_SHMEDIA && INTVAL (operands[3]) + INTVAL (operands[4]) == 64\"\n   \"*\n@@ -9680,8 +9690,8 @@ mov.l\\\\t1f,r0\\\\n\\\\\n ; vector then varies depending on endianness.\n (define_expand \"mextr1\"\n   [(match_operand:DI 0 \"arith_reg_dest\" \"\")\n-   (match_operand:DI 1 \"arith_reg_or_0_operand\" \"rU\")\n-   (match_operand:DI 2 \"arith_reg_or_0_operand\" \"rU\")]\n+   (match_operand:DI 1 \"arith_reg_or_0_operand\" \"rZ\")\n+   (match_operand:DI 2 \"arith_reg_or_0_operand\" \"rZ\")]\n   \"TARGET_SHMEDIA\"\n   \"\n {\n@@ -9692,8 +9702,8 @@ mov.l\\\\t1f,r0\\\\n\\\\\n \n (define_expand \"mextr2\"\n   [(match_operand:DI 0 \"arith_reg_dest\" \"\")\n-   (match_operand:DI 1 \"arith_reg_or_0_operand\" \"rU\")\n-   (match_operand:DI 2 \"arith_reg_or_0_operand\" \"rU\")]\n+   (match_operand:DI 1 \"arith_reg_or_0_operand\" \"rZ\")\n+   (match_operand:DI 2 \"arith_reg_or_0_operand\" \"rZ\")]\n   \"TARGET_SHMEDIA\"\n   \"\n {\n@@ -9704,8 +9714,8 @@ mov.l\\\\t1f,r0\\\\n\\\\\n \n (define_expand \"mextr3\"\n   [(match_operand:DI 0 \"arith_reg_dest\" \"\")\n-   (match_operand:DI 1 \"arith_reg_or_0_operand\" \"rU\")\n-   (match_operand:DI 2 \"arith_reg_or_0_operand\" \"rU\")]\n+   (match_operand:DI 1 \"arith_reg_or_0_operand\" \"rZ\")\n+   (match_operand:DI 2 \"arith_reg_or_0_operand\" \"rZ\")]\n   \"TARGET_SHMEDIA\"\n   \"\n {\n@@ -9716,8 +9726,8 @@ mov.l\\\\t1f,r0\\\\n\\\\\n \n (define_expand \"mextr4\"\n   [(match_operand:DI 0 \"arith_reg_dest\" \"\")\n-   (match_operand:DI 1 \"arith_reg_or_0_operand\" \"rU\")\n-   (match_operand:DI 2 \"arith_reg_or_0_operand\" \"rU\")]\n+   (match_operand:DI 1 \"arith_reg_or_0_operand\" \"rZ\")\n+   (match_operand:DI 2 \"arith_reg_or_0_operand\" \"rZ\")]\n   \"TARGET_SHMEDIA\"\n   \"\n {\n@@ -9728,8 +9738,8 @@ mov.l\\\\t1f,r0\\\\n\\\\\n \n (define_expand \"mextr5\"\n   [(match_operand:DI 0 \"arith_reg_dest\" \"\")\n-   (match_operand:DI 1 \"arith_reg_or_0_operand\" \"rU\")\n-   (match_operand:DI 2 \"arith_reg_or_0_operand\" \"rU\")]\n+   (match_operand:DI 1 \"arith_reg_or_0_operand\" \"rZ\")\n+   (match_operand:DI 2 \"arith_reg_or_0_operand\" \"rZ\")]\n   \"TARGET_SHMEDIA\"\n   \"\n {\n@@ -9740,8 +9750,8 @@ mov.l\\\\t1f,r0\\\\n\\\\\n \n (define_expand \"mextr6\"\n   [(match_operand:DI 0 \"arith_reg_dest\" \"\")\n-   (match_operand:DI 1 \"arith_reg_or_0_operand\" \"rU\")\n-   (match_operand:DI 2 \"arith_reg_or_0_operand\" \"rU\")]\n+   (match_operand:DI 1 \"arith_reg_or_0_operand\" \"rZ\")\n+   (match_operand:DI 2 \"arith_reg_or_0_operand\" \"rZ\")]\n   \"TARGET_SHMEDIA\"\n   \"\n {\n@@ -9752,8 +9762,8 @@ mov.l\\\\t1f,r0\\\\n\\\\\n \n (define_expand \"mextr7\"\n   [(match_operand:DI 0 \"arith_reg_dest\" \"\")\n-   (match_operand:DI 1 \"arith_reg_or_0_operand\" \"rU\")\n-   (match_operand:DI 2 \"arith_reg_or_0_operand\" \"rU\")]\n+   (match_operand:DI 1 \"arith_reg_or_0_operand\" \"rZ\")\n+   (match_operand:DI 2 \"arith_reg_or_0_operand\" \"rZ\")]\n   \"TARGET_SHMEDIA\"\n   \"\n {\n@@ -9962,7 +9972,7 @@ mov.l\\\\t1f,r0\\\\n\\\\\n (define_expand \"mperm_w\"\n   [(match_operand:V4HI 0 \"arith_reg_dest\" \"=r\")\n    (match_operand:V4HI 1 \"arith_reg_operand\" \"r\")\n-   (match_operand:QI 2 \"extend_reg_or_0_operand\" \"rU\")]\n+   (match_operand:QI 2 \"extend_reg_or_0_operand\" \"rZ\")]\n   \"TARGET_SHMEDIA\"\n   \"\n {\n@@ -9978,7 +9988,7 @@ mov.l\\\\t1f,r0\\\\n\\\\\n \t(vec_select:V4HI\n \t (match_operand:V4HI 1 \"arith_reg_operand\" \"r\")\n \t (parallel\n-\t  [(zero_extract:QI (match_operand:QI 2 \"extend_reg_or_0_operand\" \"rU\")\n+\t  [(zero_extract:QI (match_operand:QI 2 \"extend_reg_or_0_operand\" \"rZ\")\n \t\t\t    (const_int 2) (const_int 0))\n \t   (zero_extract:QI (match_dup 2) (const_int 2) (const_int 2))\n \t   (zero_extract:QI (match_dup 2) (const_int 2) (const_int 4))\n@@ -9993,7 +10003,7 @@ mov.l\\\\t1f,r0\\\\n\\\\\n \t (match_operand:V4HI 1 \"arith_reg_operand\" \"r\")\n \t (parallel\n \t  [(zero_extract:QI (not:QI (match_operand:QI 2\n-\t\t\t\t     \"extend_reg_or_0_operand\" \"rU\"))\n+\t\t\t\t     \"extend_reg_or_0_operand\" \"rZ\"))\n \t\t\t    (const_int 2) (const_int 0))\n \t   (zero_extract:QI (not:QI (match_dup 2)) (const_int 2) (const_int 2))\n \t   (zero_extract:QI (not:QI (match_dup 2)) (const_int 2) (const_int 4))\n@@ -10034,9 +10044,9 @@ mov.l\\\\t1f,r0\\\\n\\\\\n \t    (abs:DI (vec_select:DI\n \t\t     (minus:V8DI\n \t\t      (zero_extend:V8DI\n-\t\t       (match_operand:V8QI 2 \"arith_reg_or_0_operand\" \"r\"))\n+\t\t       (match_operand:V8QI 2 \"arith_reg_or_0_operand\" \"rZ\"))\n \t\t      (zero_extend:V8DI\n-\t\t       (match_operand:V8QI 3 \"arith_reg_or_0_operand\" \"r\")))\n+\t\t       (match_operand:V8QI 3 \"arith_reg_or_0_operand\" \"rZ\")))\n \t\t     (parallel [(const_int 0)]))))\n \t   (abs:DI (vec_select:DI (minus:V8DI (zero_extend:V8DI (match_dup 2))\n \t\t\t\t\t      (zero_extend:V8DI (match_dup 3)))\n@@ -10109,15 +10119,15 @@ mov.l\\\\t1f,r0\\\\n\\\\\n   [(set (match_operand:HI 0 \"arith_reg_dest\" \"=r\")\n \t(ss_truncate:HI\n \t (ashiftrt:DI (match_operand:DI 1 \"arith_reg_operand\" \"r\")\n-\t\t      (match_operand:DI 2 \"arith_reg_or_0_operand\" \"rU\"))))]\n+\t\t      (match_operand:DI 2 \"arith_reg_or_0_operand\" \"rZ\"))))]\n   \"TARGET_SHMEDIA\"\n   \"mshards.q\t%1, %N2, %0\"\n   [(set_attr \"type\" \"mcmp_media\")])\n \n (define_expand \"mshfhi_b\"\n   [(match_operand:V8QI 0 \"arith_reg_dest\" \"\")\n-   (match_operand:V8QI 1 \"arith_reg_or_0_operand\" \"rU\")\n-   (match_operand:V8QI 2 \"arith_reg_or_0_operand\" \"rU\")]\n+   (match_operand:V8QI 1 \"arith_reg_or_0_operand\" \"rZ\")\n+   (match_operand:V8QI 2 \"arith_reg_or_0_operand\" \"rZ\")]\n   \"TARGET_SHMEDIA\"\n   \"\n {\n@@ -10128,8 +10138,8 @@ mov.l\\\\t1f,r0\\\\n\\\\\n \n (define_expand \"mshflo_b\"\n   [(match_operand:V8QI 0 \"arith_reg_dest\" \"\")\n-   (match_operand:V8QI 1 \"arith_reg_or_0_operand\" \"rU\")\n-   (match_operand:V8QI 2 \"arith_reg_or_0_operand\" \"rU\")]\n+   (match_operand:V8QI 1 \"arith_reg_or_0_operand\" \"rZ\")\n+   (match_operand:V8QI 2 \"arith_reg_or_0_operand\" \"rZ\")]\n   \"TARGET_SHMEDIA\"\n   \"\n {\n@@ -10142,8 +10152,8 @@ mov.l\\\\t1f,r0\\\\n\\\\\n   [(set\n     (match_operand:V8QI 0 \"arith_reg_dest\" \"=r\")\n     (vec_select:V8QI\n-     (vec_concat:V16QI (match_operand:V8QI 1 \"arith_reg_or_0_operand\" \"rU\")\n-\t\t       (match_operand:V8QI 2 \"arith_reg_or_0_operand\" \"rU\"))\n+     (vec_concat:V16QI (match_operand:V8QI 1 \"arith_reg_or_0_operand\" \"rZ\")\n+\t\t       (match_operand:V8QI 2 \"arith_reg_or_0_operand\" \"rZ\"))\n      (parallel [(const_int 4) (const_int 12) (const_int 5) (const_int 13)\n \t\t(const_int 6) (const_int 14) (const_int 7) (const_int 15)])))]\n   \"TARGET_SHMEDIA\"\n@@ -10156,8 +10166,8 @@ mov.l\\\\t1f,r0\\\\n\\\\\n   [(set\n     (match_operand:V8QI 0 \"arith_reg_dest\" \"=r\")\n     (vec_select:V8QI\n-     (vec_concat:V16QI (match_operand:V8QI 1 \"arith_reg_or_0_operand\" \"rU\")\n-\t\t       (match_operand:V8QI 2 \"arith_reg_or_0_operand\" \"rU\"))\n+     (vec_concat:V16QI (match_operand:V8QI 1 \"arith_reg_or_0_operand\" \"rZ\")\n+\t\t       (match_operand:V8QI 2 \"arith_reg_or_0_operand\" \"rZ\"))\n      (parallel [(const_int 0) (const_int 8) (const_int 1) (const_int 9)\n \t\t(const_int 2) (const_int 10) (const_int 3) (const_int 11)])))]\n   \"TARGET_SHMEDIA\"\n@@ -10168,8 +10178,8 @@ mov.l\\\\t1f,r0\\\\n\\\\\n \n (define_expand \"mshfhi_l\"\n   [(match_operand:V2SI 0 \"arith_reg_dest\" \"\")\n-   (match_operand:V2SI 1 \"arith_reg_or_0_operand\" \"rU\")\n-   (match_operand:V2SI 2 \"arith_reg_or_0_operand\" \"rU\")]\n+   (match_operand:V2SI 1 \"arith_reg_or_0_operand\" \"rZ\")\n+   (match_operand:V2SI 2 \"arith_reg_or_0_operand\" \"rZ\")]\n   \"TARGET_SHMEDIA\"\n   \"\n {\n@@ -10180,8 +10190,8 @@ mov.l\\\\t1f,r0\\\\n\\\\\n \n (define_expand \"mshflo_l\"\n   [(match_operand:V2SI 0 \"arith_reg_dest\" \"\")\n-   (match_operand:V2SI 1 \"arith_reg_or_0_operand\" \"rU\")\n-   (match_operand:V2SI 2 \"arith_reg_or_0_operand\" \"rU\")]\n+   (match_operand:V2SI 1 \"arith_reg_or_0_operand\" \"rZ\")\n+   (match_operand:V2SI 2 \"arith_reg_or_0_operand\" \"rZ\")]\n   \"TARGET_SHMEDIA\"\n   \"\n {\n@@ -10193,8 +10203,8 @@ mov.l\\\\t1f,r0\\\\n\\\\\n (define_insn \"mshf4_l\"\n   [(set (match_operand:V2SI 0 \"arith_reg_dest\" \"=r\")\n \t(vec_select:V2SI\n-\t (vec_concat:V4SI (match_operand:V2SI 1 \"arith_reg_or_0_operand\" \"rU\")\n-\t\t\t  (match_operand:V2SI 2 \"arith_reg_or_0_operand\" \"rU\"))\n+\t (vec_concat:V4SI (match_operand:V2SI 1 \"arith_reg_or_0_operand\" \"rZ\")\n+\t\t\t  (match_operand:V2SI 2 \"arith_reg_or_0_operand\" \"rZ\"))\n \t (parallel [(const_int 1) (const_int 3)])))]\n   \"TARGET_SHMEDIA\"\n   \"* return (TARGET_LITTLE_ENDIAN\n@@ -10205,8 +10215,8 @@ mov.l\\\\t1f,r0\\\\n\\\\\n (define_insn \"mshf0_l\"\n   [(set (match_operand:V2SI 0 \"arith_reg_dest\" \"=r\")\n \t(vec_select:V2SI\n-\t (vec_concat:V4SI (match_operand:V2SI 1 \"arith_reg_or_0_operand\" \"rU\")\n-\t\t\t  (match_operand:V2SI 2 \"arith_reg_or_0_operand\" \"rU\"))\n+\t (vec_concat:V4SI (match_operand:V2SI 1 \"arith_reg_or_0_operand\" \"rZ\")\n+\t\t\t  (match_operand:V2SI 2 \"arith_reg_or_0_operand\" \"rZ\"))\n \t (parallel [(const_int 0) (const_int 2)])))]\n   \"TARGET_SHMEDIA\"\n   \"* return (TARGET_LITTLE_ENDIAN\n@@ -10216,8 +10226,8 @@ mov.l\\\\t1f,r0\\\\n\\\\\n \n (define_expand \"mshfhi_w\"\n   [(match_operand:V4HI 0 \"arith_reg_dest\" \"\")\n-   (match_operand:V4HI 1 \"arith_reg_or_0_operand\" \"rU\")\n-   (match_operand:V4HI 2 \"arith_reg_or_0_operand\" \"rU\")]\n+   (match_operand:V4HI 1 \"arith_reg_or_0_operand\" \"rZ\")\n+   (match_operand:V4HI 2 \"arith_reg_or_0_operand\" \"rZ\")]\n   \"TARGET_SHMEDIA\"\n   \"\n {\n@@ -10228,8 +10238,8 @@ mov.l\\\\t1f,r0\\\\n\\\\\n \n (define_expand \"mshflo_w\"\n   [(match_operand:V4HI 0 \"arith_reg_dest\" \"\")\n-   (match_operand:V4HI 1 \"arith_reg_or_0_operand\" \"rU\")\n-   (match_operand:V4HI 2 \"arith_reg_or_0_operand\" \"rU\")]\n+   (match_operand:V4HI 1 \"arith_reg_or_0_operand\" \"rZ\")\n+   (match_operand:V4HI 2 \"arith_reg_or_0_operand\" \"rZ\")]\n   \"TARGET_SHMEDIA\"\n   \"\n {\n@@ -10241,8 +10251,8 @@ mov.l\\\\t1f,r0\\\\n\\\\\n (define_insn \"mshf4_w\"\n   [(set (match_operand:V4HI 0 \"arith_reg_dest\" \"=r\")\n \t(vec_select:V4HI\n-\t (vec_concat:V8HI (match_operand:V4HI 1 \"arith_reg_or_0_operand\" \"rU\")\n-\t\t\t  (match_operand:V4HI 2 \"arith_reg_or_0_operand\" \"rU\"))\n+\t (vec_concat:V8HI (match_operand:V4HI 1 \"arith_reg_or_0_operand\" \"rZ\")\n+\t\t\t  (match_operand:V4HI 2 \"arith_reg_or_0_operand\" \"rZ\"))\n \t (parallel [(const_int 2) (const_int 6) (const_int 3) (const_int 7)])))]\n   \"TARGET_SHMEDIA\"\n   \"* return (TARGET_LITTLE_ENDIAN\n@@ -10253,8 +10263,8 @@ mov.l\\\\t1f,r0\\\\n\\\\\n (define_insn \"mshf0_w\"\n   [(set (match_operand:V4HI 0 \"arith_reg_dest\" \"=r\")\n \t(vec_select:V4HI\n-\t (vec_concat:V8HI (match_operand:V4HI 1 \"arith_reg_or_0_operand\" \"rU\")\n-\t\t\t  (match_operand:V4HI 2 \"arith_reg_or_0_operand\" \"rU\"))\n+\t (vec_concat:V8HI (match_operand:V4HI 1 \"arith_reg_or_0_operand\" \"rZ\")\n+\t\t\t  (match_operand:V4HI 2 \"arith_reg_or_0_operand\" \"rZ\"))\n \t (parallel [(const_int 0) (const_int 4) (const_int 1) (const_int 5)])))]\n   \"TARGET_SHMEDIA\"\n   \"* return (TARGET_LITTLE_ENDIAN\n@@ -10265,8 +10275,8 @@ mov.l\\\\t1f,r0\\\\n\\\\\n (define_insn \"mshflo_w_x\"\n   [(set (match_operand:V4HI 0 \"arith_reg_dest\" \"=r\")\n \t(vec_select:V4HI\n-\t (vec_concat:V4HI (match_operand:V2HI 1 \"extend_reg_or_0_operand\" \"rU\")\n-\t\t\t  (match_operand:V2HI 2 \"extend_reg_or_0_operand\" \"rU\"))\n+\t (vec_concat:V4HI (match_operand:V2HI 1 \"extend_reg_or_0_operand\" \"rZ\")\n+\t\t\t  (match_operand:V2HI 2 \"extend_reg_or_0_operand\" \"rZ\"))\n \t (parallel [(const_int 2) (const_int 0) (const_int 3) (const_int 1)])))]\n   \"TARGET_SHMEDIA\"\n   \"mshflo.w\t%N1, %N2, %0\"\n@@ -10275,9 +10285,9 @@ mov.l\\\\t1f,r0\\\\n\\\\\n /* These are useful to expand ANDs and as combiner patterns.  */\n (define_insn_and_split \"mshfhi_l_di\"\n   [(set (match_operand:DI 0 \"arith_reg_dest\" \"=r,f\")\n-\t(ior:DI (lshiftrt:DI (match_operand:DI 1 \"arith_reg_or_0_operand\" \"rU,f\")\n+\t(ior:DI (lshiftrt:DI (match_operand:DI 1 \"arith_reg_or_0_operand\" \"rZ,f\")\n                              (const_int 32))\n-\t\t(and:DI (match_operand:DI 2 \"arith_reg_or_0_operand\" \"rU,?f\")\n+\t\t(and:DI (match_operand:DI 2 \"arith_reg_or_0_operand\" \"rZ,?f\")\n \t\t\t(const_int -4294967296))))]\n   \"TARGET_SHMEDIA\"\n   \"@\n@@ -10298,9 +10308,9 @@ mov.l\\\\t1f,r0\\\\n\\\\\n \n (define_insn \"*mshfhi_l_di_rev\"\n   [(set (match_operand:DI 0 \"arith_reg_dest\" \"=r\")\n-\t(ior:DI (and:DI (match_operand:DI 1 \"arith_reg_or_0_operand\" \"rU\")\n+\t(ior:DI (and:DI (match_operand:DI 1 \"arith_reg_or_0_operand\" \"rZ\")\n \t\t\t(const_int -4294967296))\n-\t\t(lshiftrt:DI (match_operand:DI 2 \"arith_reg_or_0_operand\" \"rU\")\n+\t\t(lshiftrt:DI (match_operand:DI 2 \"arith_reg_or_0_operand\" \"rZ\")\n                              (const_int 32))))]\n   \"TARGET_SHMEDIA\"\n   \"mshfhi.l\t%N2, %N1, %0\"\n@@ -10327,9 +10337,9 @@ mov.l\\\\t1f,r0\\\\n\\\\\n \n (define_insn \"mshflo_l_di\"\n   [(set (match_operand:DI 0 \"arith_reg_dest\" \"=r\")\n-\t(ior:DI (and:DI (match_operand:DI 1 \"arith_reg_or_0_operand\" \"rU\")\n+\t(ior:DI (and:DI (match_operand:DI 1 \"arith_reg_or_0_operand\" \"rZ\")\n \t\t\t(const_int 4294967295))\n-\t\t(ashift:DI (match_operand:DI 2 \"arith_reg_or_0_operand\" \"rU\")\n+\t\t(ashift:DI (match_operand:DI 2 \"arith_reg_or_0_operand\" \"rZ\")\n                            (const_int 32))))]\n \t\t\t\t\n   \"TARGET_SHMEDIA\"\n@@ -10338,9 +10348,9 @@ mov.l\\\\t1f,r0\\\\n\\\\\n \n (define_insn \"*mshflo_l_di_rev\"\n   [(set (match_operand:DI 0 \"arith_reg_dest\" \"=r\")\n-\t(ior:DI (ashift:DI (match_operand:DI 1 \"arith_reg_or_0_operand\" \"rU\")\n+\t(ior:DI (ashift:DI (match_operand:DI 1 \"arith_reg_or_0_operand\" \"rZ\")\n                            (const_int 32))\n-\t\t(and:DI (match_operand:DI 2 \"arith_reg_or_0_operand\" \"rU\")\n+\t\t(and:DI (match_operand:DI 2 \"arith_reg_or_0_operand\" \"rZ\")\n \t\t\t(const_int 4294967295))))]\n \t\t\t\t\n   \"TARGET_SHMEDIA\"\n@@ -10373,8 +10383,8 @@ mov.l\\\\t1f,r0\\\\n\\\\\n (define_insn \"*mshflo_l_di_x\"\n   [(set (match_operand:DI 0 \"arith_reg_dest\" \"=r\")\n \t(ior:DI (zero_extend:DI (match_operand:SI 1 \"extend_reg_or_0_operand\"\n-\t\t\t\t \"rU\"))\n-\t\t(ashift:DI (match_operand:DI 2 \"arith_reg_or_0_operand\" \"rU\")\n+\t\t\t\t \"rZ\"))\n+\t\t(ashift:DI (match_operand:DI 2 \"arith_reg_or_0_operand\" \"rZ\")\n                            (const_int 32))))]\n \t\t\t\t\n   \"TARGET_SHMEDIA\"\n@@ -10383,9 +10393,9 @@ mov.l\\\\t1f,r0\\\\n\\\\\n \n (define_insn_and_split \"concat_v2sf\"\n   [(set (match_operand:V2SF 0 \"register_operand\" \"=r,f,f?\")\n-;;\t(vec_concat:V2SF (match_operand:SF 1 \"register_operand\" \"rU,0,f\")\n-\t(vec_concat:V2SF (match_operand:SF 1 \"register_operand\" \"rU,f,f\")\n-\t\t\t (match_operand:SF 2 \"register_operand\" \"rU,f,f\")))]\n+;;\t(vec_concat:V2SF (match_operand:SF 1 \"register_operand\" \"rZ,0,f\")\n+\t(vec_concat:V2SF (match_operand:SF 1 \"register_operand\" \"rZ,f,f\")\n+\t\t\t (match_operand:SF 2 \"register_operand\" \"rZ,f,f\")))]\n \t\t\t\t\n   \"TARGET_SHMEDIA\"\n   \"@\n@@ -10405,9 +10415,9 @@ mov.l\\\\t1f,r0\\\\n\\\\\n \n (define_insn \"*mshflo_l_di_x_rev\"\n   [(set (match_operand:DI 0 \"arith_reg_dest\" \"=r\")\n-\t(ior:DI (ashift:DI (match_operand:DI 1 \"arith_reg_or_0_operand\" \"rU\")\n+\t(ior:DI (ashift:DI (match_operand:DI 1 \"arith_reg_or_0_operand\" \"rZ\")\n                            (const_int 32))\n-\t\t(zero_extend:DI (match_operand:SI 2 \"extend_reg_or_0_operand\" \"rU\"))))]\n+\t\t(zero_extend:DI (match_operand:SI 2 \"extend_reg_or_0_operand\" \"rZ\"))))]\n \t\t\t\t\n   \"TARGET_SHMEDIA\"\n   \"mshflo.l\t%N2, %N1, %0\"\n@@ -10447,23 +10457,23 @@ mov.l\\\\t1f,r0\\\\n\\\\\n \n (define_insn \"subv2si3\"\n   [(set (match_operand:V2SI 0 \"arith_reg_dest\" \"=r\")\n-\t(minus:V2SI (match_operand:V2SI 1 \"arith_reg_or_0_operand\" \"rU\")\n+\t(minus:V2SI (match_operand:V2SI 1 \"arith_reg_or_0_operand\" \"rZ\")\n \t\t    (match_operand:V2SI 2 \"arith_reg_operand\" \"r\")))]\n   \"TARGET_SHMEDIA\"\n   \"msub.l\t%N1, %2, %0\"\n   [(set_attr \"type\" \"arith_media\")])\n \n (define_insn \"subv4hi3\"\n   [(set (match_operand:V4HI 0 \"arith_reg_dest\" \"=r\")\n-\t(minus:V4HI (match_operand:V4HI 1 \"arith_reg_or_0_operand\" \"rU\")\n+\t(minus:V4HI (match_operand:V4HI 1 \"arith_reg_or_0_operand\" \"rZ\")\n \t\t    (match_operand:V4HI 2 \"arith_reg_operand\" \"r\")))]\n   \"TARGET_SHMEDIA\"\n   \"msub.w\t%N1, %2, %0\"\n   [(set_attr \"type\" \"arith_media\")])\n \n (define_insn \"sssubv2si3\"\n   [(set (match_operand:V2SI 0 \"arith_reg_dest\" \"=r\")\n-\t(ss_minus:V2SI (match_operand:V2SI 1 \"arith_reg_or_0_operand\" \"rU\")\n+\t(ss_minus:V2SI (match_operand:V2SI 1 \"arith_reg_or_0_operand\" \"rZ\")\n \t\t       (match_operand:V2SI 2 \"arith_reg_operand\" \"r\")))]\n   \"TARGET_SHMEDIA\"\n   \"msubs.l\t%N1, %2, %0\"\n@@ -10479,7 +10489,7 @@ mov.l\\\\t1f,r0\\\\n\\\\\n \n (define_insn \"sssubv4hi3\"\n   [(set (match_operand:V4HI 0 \"arith_reg_dest\" \"=r\")\n-\t(ss_minus:V4HI (match_operand:V4HI 1 \"arith_reg_or_0_operand\" \"rU\")\n+\t(ss_minus:V4HI (match_operand:V4HI 1 \"arith_reg_or_0_operand\" \"rZ\")\n \t\t       (match_operand:V4HI 2 \"arith_reg_operand\" \"r\")))]\n   \"TARGET_SHMEDIA\"\n   \"msubs.w\t%N1, %2, %0\""}]}