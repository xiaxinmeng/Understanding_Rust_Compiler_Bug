{"sha": "6ee85b3255d638fd77ee3fe17a4e146c81545efb", "node_id": "C_kwDOANBUbNoAKDZlZTg1YjMyNTVkNjM4ZmQ3N2VlM2ZlMTdhNGUxNDZjODE1NDVlZmI", "commit": {"author": {"name": "Thomas Schwinge", "email": "thomas@codesourcery.com", "date": "2023-04-07T19:56:06Z"}, "committer": {"name": "Thomas Schwinge", "email": "thomas_schwinge@mentor.com", "date": "2023-04-07T19:56:06Z"}, "message": "Merge commit 'aee5ee35602e0098c2ae16fa2fc9c8845caf92ed~1' into HEAD", "tree": {"sha": "d9eb1d9ad375321ec838dba8f980803e47d3d986", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d9eb1d9ad375321ec838dba8f980803e47d3d986"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6ee85b3255d638fd77ee3fe17a4e146c81545efb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6ee85b3255d638fd77ee3fe17a4e146c81545efb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6ee85b3255d638fd77ee3fe17a4e146c81545efb", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6ee85b3255d638fd77ee3fe17a4e146c81545efb/comments", "author": {"login": "tschwinge", "id": 21753, "node_id": "MDQ6VXNlcjIxNzUz", "avatar_url": "https://avatars.githubusercontent.com/u/21753?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tschwinge", "html_url": "https://github.com/tschwinge", "followers_url": "https://api.github.com/users/tschwinge/followers", "following_url": "https://api.github.com/users/tschwinge/following{/other_user}", "gists_url": "https://api.github.com/users/tschwinge/gists{/gist_id}", "starred_url": "https://api.github.com/users/tschwinge/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tschwinge/subscriptions", "organizations_url": "https://api.github.com/users/tschwinge/orgs", "repos_url": "https://api.github.com/users/tschwinge/repos", "events_url": "https://api.github.com/users/tschwinge/events{/privacy}", "received_events_url": "https://api.github.com/users/tschwinge/received_events", "type": "User", "site_admin": false}, "committer": {"login": "tschwinge", "id": 21753, "node_id": "MDQ6VXNlcjIxNzUz", "avatar_url": "https://avatars.githubusercontent.com/u/21753?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tschwinge", "html_url": "https://github.com/tschwinge", "followers_url": "https://api.github.com/users/tschwinge/followers", "following_url": "https://api.github.com/users/tschwinge/following{/other_user}", "gists_url": "https://api.github.com/users/tschwinge/gists{/gist_id}", "starred_url": "https://api.github.com/users/tschwinge/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tschwinge/subscriptions", "organizations_url": "https://api.github.com/users/tschwinge/orgs", "repos_url": "https://api.github.com/users/tschwinge/repos", "events_url": "https://api.github.com/users/tschwinge/events{/privacy}", "received_events_url": "https://api.github.com/users/tschwinge/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3ccb746bbe2345814b7a950c5fbc6658f26debc8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3ccb746bbe2345814b7a950c5fbc6658f26debc8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3ccb746bbe2345814b7a950c5fbc6658f26debc8"}, {"sha": "3da77f217c8b2089ecba3eb201e727c3fcdcd19d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3da77f217c8b2089ecba3eb201e727c3fcdcd19d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3da77f217c8b2089ecba3eb201e727c3fcdcd19d"}], "stats": {"total": 6751, "additions": 5664, "deletions": 1087}, "files": [{"sha": "ec663d233851bd7d9b1e87c344afccf0e0a79417", "filename": "gcc/cgraph.cc", "status": "modified", "additions": 8, "deletions": 3, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ee85b3255d638fd77ee3fe17a4e146c81545efb/gcc%2Fcgraph.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ee85b3255d638fd77ee3fe17a4e146c81545efb/gcc%2Fcgraph.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcgraph.cc?ref=6ee85b3255d638fd77ee3fe17a4e146c81545efb", "patch": "@@ -1548,7 +1548,8 @@ cgraph_edge::redirect_call_stmt_to_callee (cgraph_edge *e)\n   else\n     {\n       if (flag_checking\n-\t  && !fndecl_built_in_p (e->callee->decl, BUILT_IN_UNREACHABLE))\n+\t  && !fndecl_built_in_p (e->callee->decl, BUILT_IN_UNREACHABLE)\n+\t  && !fndecl_built_in_p (e->callee->decl, BUILT_IN_UNREACHABLE_TRAP))\n \tipa_verify_edge_has_no_modifications (e);\n       new_stmt = e->call_stmt;\n       gimple_call_set_fndecl (new_stmt, e->callee->decl);\n@@ -1634,7 +1635,9 @@ cgraph_update_edges_for_call_stmt_node (cgraph_node *node,\n \t{\n \t  /* Keep calls marked as dead dead.  */\n \t  if (new_stmt && is_gimple_call (new_stmt) && e->callee\n-\t      && fndecl_built_in_p (e->callee->decl, BUILT_IN_UNREACHABLE))\n+\t      && (fndecl_built_in_p (e->callee->decl, BUILT_IN_UNREACHABLE)\n+\t\t  || fndecl_built_in_p (e->callee->decl,\n+\t\t\t\t\tBUILT_IN_UNREACHABLE_TRAP)))\n \t    {\n \t      cgraph_edge::set_call_stmt (node->get_edge (old_stmt),\n \t\t\t\t\t  as_a <gcall *> (new_stmt));\n@@ -3598,7 +3601,9 @@ cgraph_node::verify_node (void)\n \t  /* Optimized out calls are redirected to __builtin_unreachable.  */\n \t  && (e->count.nonzero_p ()\n \t      || ! e->callee->decl\n-\t      || !fndecl_built_in_p (e->callee->decl, BUILT_IN_UNREACHABLE))\n+\t      || !(fndecl_built_in_p (e->callee->decl, BUILT_IN_UNREACHABLE)\n+\t\t   || fndecl_built_in_p (e->callee->decl,\n+\t\t\t\t\t BUILT_IN_UNREACHABLE_TRAP)))\n \t  && count\n \t      == ENTRY_BLOCK_PTR_FOR_FN (DECL_STRUCT_FUNCTION (decl))->count\n \t  && (!e->count.ipa_p ()"}, {"sha": "4a4773ec565581ee8199bf6701c07073013ff55c", "filename": "gcc/cgraphclones.cc", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ee85b3255d638fd77ee3fe17a4e146c81545efb/gcc%2Fcgraphclones.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ee85b3255d638fd77ee3fe17a4e146c81545efb/gcc%2Fcgraphclones.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcgraphclones.cc?ref=6ee85b3255d638fd77ee3fe17a4e146c81545efb", "patch": "@@ -425,7 +425,9 @@ cgraph_node::create_clone (tree new_decl, profile_count prof_count,\n \t version.  The only exception is when the edge was proved to\n \t be unreachable during the cloning procedure.  */\n       if (!e->callee\n-\t  || !fndecl_built_in_p (e->callee->decl, BUILT_IN_UNREACHABLE))\n+\t  || !(fndecl_built_in_p (e->callee->decl, BUILT_IN_UNREACHABLE)\n+\t       || fndecl_built_in_p (e->callee->decl,\n+\t\t\t\t     BUILT_IN_UNREACHABLE_TRAP)))\n         e->redirect_callee_duplicating_thunks (new_node);\n     }\n   new_node->expand_all_artificial_thunks ();"}, {"sha": "5b70ab2075812b01d872a1bda785a1cecd0e3681", "filename": "gcc/config/riscv/iterators.md", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ee85b3255d638fd77ee3fe17a4e146c81545efb/gcc%2Fconfig%2Friscv%2Fiterators.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ee85b3255d638fd77ee3fe17a4e146c81545efb/gcc%2Fconfig%2Friscv%2Fiterators.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Friscv%2Fiterators.md?ref=6ee85b3255d638fd77ee3fe17a4e146c81545efb", "patch": "@@ -175,7 +175,9 @@\n \t\t     (gt \"\") (gtu \"u\")\n \t\t     (ge \"\") (geu \"u\")\n \t\t     (lt \"\") (ltu \"u\")\n-\t\t     (le \"\") (leu \"u\")])\n+\t\t     (le \"\") (leu \"u\")\n+\t\t     (fix \"\") (unsigned_fix \"u\")\n+\t\t     (float \"\") (unsigned_float \"u\")])\n \n ;; <su> is like <u>, but the signed form expands to \"s\" rather than \"\".\n (define_code_attr su [(sign_extend \"s\") (zero_extend \"u\")])\n@@ -204,6 +206,8 @@\n \t\t\t (mult \"mul\")\n \t\t\t (not \"one_cmpl\")\n \t\t\t (neg \"neg\")\n+\t\t\t (abs \"abs\")\n+\t\t\t (sqrt \"sqrt\")\n \t\t\t (ss_plus \"ssadd\")\n \t\t\t (us_plus \"usadd\")\n \t\t\t (ss_minus \"sssub\")\n@@ -235,6 +239,8 @@\n \t\t\t(mult \"mul\")\n \t\t\t(not \"not\")\n \t\t\t(neg \"neg\")\n+\t\t\t(abs \"abs\")\n+\t\t\t(sqrt \"sqrt\")\n \t\t\t(ss_plus \"sadd\")\n \t\t\t(us_plus \"saddu\")\n \t\t\t(ss_minus \"ssub\")"}, {"sha": "f6ed2e53453b0b7643f02ca759d0bbd556d55576", "filename": "gcc/config/riscv/riscv-vector-builtins-bases.cc", "status": "modified", "additions": 754, "deletions": 113, "changes": 867, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ee85b3255d638fd77ee3fe17a4e146c81545efb/gcc%2Fconfig%2Friscv%2Friscv-vector-builtins-bases.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ee85b3255d638fd77ee3fe17a4e146c81545efb/gcc%2Fconfig%2Friscv%2Friscv-vector-builtins-bases.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Friscv%2Friscv-vector-builtins-bases.cc?ref=6ee85b3255d638fd77ee3fe17a4e146c81545efb", "patch": "@@ -155,8 +155,11 @@ class loadstore : public function_base\n };\n \n /* Implements\n- * vadd/vsub/vand/vor/vxor/vsll/vsra/vsrl/vmin/vmax/vminu/vmaxu/vdiv/vrem/vdivu/vremu/vsadd/vsaddu/vssub/vssubu.\n- */\n+   vadd/vsub/vand/vor/vxor/vsll/vsra/vsrl/\n+   vmin/vmax/vminu/vmaxu/vdiv/vrem/vdivu/\n+   vremu/vsadd/vsaddu/vssub/vssubu\n+   vfadd/vfsub/\n+*/\n template<rtx_code CODE>\n class binop : public function_base\n {\n@@ -166,6 +169,7 @@ class binop : public function_base\n     switch (e.op_info->op)\n       {\n       case OP_TYPE_vx:\n+      case OP_TYPE_vf:\n \treturn e.use_exact_insn (code_for_pred_scalar (CODE, e.vector_mode ()));\n       case OP_TYPE_vv:\n \treturn e.use_exact_insn (code_for_pred (CODE, e.vector_mode ()));\n@@ -239,8 +243,8 @@ class vmulh : public function_base\n   }\n };\n \n-/* Implements vwadd/vwsub/vwmul.  */\n-template<rtx_code CODE1, rtx_code CODE2>\n+/* Implements vwadd/vwsub/vwmul/vfwadd/vfwsub/vfwmul.  */\n+template<rtx_code CODE1, rtx_code CODE2 = FLOAT_EXTEND>\n class widen_binop : public function_base\n {\n public:\n@@ -265,6 +269,31 @@ class widen_binop : public function_base\n       }\n   }\n };\n+template<rtx_code CODE>\n+class widen_binop<CODE, FLOAT_EXTEND> : public function_base\n+{\n+public:\n+  rtx expand (function_expander &e) const override\n+  {\n+    switch (e.op_info->op)\n+      {\n+      case OP_TYPE_vv:\n+\treturn e.use_exact_insn (\n+\t  code_for_pred_dual_widen (CODE, e.vector_mode ()));\n+      case OP_TYPE_vf:\n+\treturn e.use_exact_insn (\n+\t  code_for_pred_dual_widen_scalar (CODE, e.vector_mode ()));\n+      case OP_TYPE_wv:\n+\treturn e.use_exact_insn (\n+\t  code_for_pred_single_widen (CODE, e.vector_mode ()));\n+      case OP_TYPE_wf:\n+\treturn e.use_exact_insn (\n+\t  code_for_pred_single_widen_scalar (CODE, e.vector_mode ()));\n+      default:\n+\tgcc_unreachable ();\n+      }\n+  }\n+};\n \n /* Implements vwmulsu.  */\n class vwmulsu : public function_base\n@@ -426,7 +455,7 @@ class vncvt_x : public function_base\n   }\n };\n \n-/* Implements vmerge.  */\n+/* Implements vmerge/vfmerge.  */\n class vmerge : public function_base\n {\n public:\n@@ -439,14 +468,15 @@ class vmerge : public function_base\n       case OP_TYPE_vvm:\n \treturn e.use_exact_insn (code_for_pred_merge (e.vector_mode ()));\n       case OP_TYPE_vxm:\n+      case OP_TYPE_vfm:\n \treturn e.use_exact_insn (code_for_pred_merge_scalar (e.vector_mode ()));\n       default:\n \tgcc_unreachable ();\n       }\n   }\n };\n \n-/* Implements vmv.v.x/vmv.v.v.  */\n+/* Implements vmv.v.x/vmv.v.v/vfmv.v.f.  */\n class vmv_v : public function_base\n {\n public:\n@@ -457,6 +487,7 @@ class vmv_v : public function_base\n       case OP_TYPE_v:\n \treturn e.use_exact_insn (code_for_pred_mov (e.vector_mode ()));\n       case OP_TYPE_x:\n+      case OP_TYPE_f:\n \treturn e.use_exact_insn (code_for_pred_broadcast (e.vector_mode ()));\n       default:\n \tgcc_unreachable ();\n@@ -539,132 +570,144 @@ class icmp : public function_base\n   }\n };\n \n-/* Enumerates types of ternary operations.\n-   We have 2 types ternop:\n-     - 1. accumulator is vd:\n-        vmacc.vv vd,vs1,vs2 # vd = vs1 * vs2 + vd.\n-     - 2. accumulator is vs2:\n-        vmadd.vv vd,vs1,vs2 # vd = vs1 * vd + vs2.  */\n-enum ternop_type\n+/* Implements vmacc/vnmsac/vmadd/vnmsub.  */\n+class vmacc : public function_base\n {\n-  TERNOP_VMACC,\n-  TERNOP_VNMSAC,\n-  TERNOP_VMADD,\n-  TERNOP_VNMSUB,\n+public:\n+  bool has_merge_operand_p () const override { return false; }\n+\n+  rtx expand (function_expander &e) const override\n+  {\n+    if (e.op_info->op == OP_TYPE_vx)\n+      return e.use_ternop_insn (true,\n+\t\t\t\tcode_for_pred_mul_scalar (PLUS,\n+\t\t\t\t\t\t\t  e.vector_mode ()));\n+    if (e.op_info->op == OP_TYPE_vv)\n+      return e.use_ternop_insn (true,\n+\t\t\t\tcode_for_pred_mul (PLUS, e.vector_mode ()));\n+    gcc_unreachable ();\n+  }\n };\n \n-/* Implements vmacc/vnmsac/vmadd/vnmsub.  */\n-template<ternop_type TERNOP_TYPE>\n-class imac : public function_base\n+class vnmsac : public function_base\n {\n public:\n   bool has_merge_operand_p () const override { return false; }\n \n   rtx expand (function_expander &e) const override\n   {\n-    switch (TERNOP_TYPE)\n-      {\n-      case TERNOP_VMACC:\n-\tif (e.op_info->op == OP_TYPE_vx)\n-\t  return e.use_ternop_insn (\n-\t    true, code_for_pred_mul_scalar (PLUS, e.vector_mode ()));\n-\tif (e.op_info->op == OP_TYPE_vv)\n-\t  return e.use_ternop_insn (true,\n-\t\t\t\t    code_for_pred_mul (PLUS, e.vector_mode ()));\n-\tbreak;\n-      case TERNOP_VNMSAC:\n-\tif (e.op_info->op == OP_TYPE_vx)\n-\t  return e.use_ternop_insn (\n-\t    true, code_for_pred_mul_scalar (MINUS, e.vector_mode ()));\n-\tif (e.op_info->op == OP_TYPE_vv)\n-\t  return e.use_ternop_insn (true, code_for_pred_mul (MINUS,\n-\t\t\t\t\t\t\t     e.vector_mode ()));\n-\tbreak;\n-      case TERNOP_VMADD:\n-\tif (e.op_info->op == OP_TYPE_vx)\n-\t  return e.use_ternop_insn (\n-\t    false, code_for_pred_mul_scalar (PLUS, e.vector_mode ()));\n-\tif (e.op_info->op == OP_TYPE_vv)\n-\t  return e.use_ternop_insn (false,\n-\t\t\t\t    code_for_pred_mul (PLUS, e.vector_mode ()));\n-\tbreak;\n-      case TERNOP_VNMSUB:\n-\tif (e.op_info->op == OP_TYPE_vx)\n-\t  return e.use_ternop_insn (\n-\t    false, code_for_pred_mul_scalar (MINUS, e.vector_mode ()));\n-\tif (e.op_info->op == OP_TYPE_vv)\n-\t  return e.use_ternop_insn (false,\n-\t\t\t\t    code_for_pred_mul (MINUS,\n-\t\t\t\t\t\t       e.vector_mode ()));\n-\tbreak;\n-      default:\n-\tbreak;\n-      }\n+    if (e.op_info->op == OP_TYPE_vx)\n+      return e.use_ternop_insn (true,\n+\t\t\t\tcode_for_pred_mul_scalar (MINUS,\n+\t\t\t\t\t\t\t  e.vector_mode ()));\n+    if (e.op_info->op == OP_TYPE_vv)\n+      return e.use_ternop_insn (true,\n+\t\t\t\tcode_for_pred_mul (MINUS, e.vector_mode ()));\n     gcc_unreachable ();\n   }\n };\n \n-/* Enumerates types of widen ternary operations.\n-   We have 4 types ternop:\n-     - 1. vwmacc.\n-     - 2. vwmaccu.\n-     - 3. vwmaccsu.\n-     - 4. vwmaccus.  */\n-enum widen_ternop_type\n+class vmadd : public function_base\n {\n-  WIDEN_TERNOP_VWMACC,\n-  WIDEN_TERNOP_VWMACCU,\n-  WIDEN_TERNOP_VWMACCSU,\n-  WIDEN_TERNOP_VWMACCUS,\n+public:\n+  bool has_merge_operand_p () const override { return false; }\n+\n+  rtx expand (function_expander &e) const override\n+  {\n+    if (e.op_info->op == OP_TYPE_vx)\n+      return e.use_ternop_insn (false,\n+\t\t\t\tcode_for_pred_mul_scalar (PLUS,\n+\t\t\t\t\t\t\t  e.vector_mode ()));\n+    if (e.op_info->op == OP_TYPE_vv)\n+      return e.use_ternop_insn (false,\n+\t\t\t\tcode_for_pred_mul (PLUS, e.vector_mode ()));\n+    gcc_unreachable ();\n+  }\n+};\n+\n+class vnmsub : public function_base\n+{\n+public:\n+  bool has_merge_operand_p () const override { return false; }\n+\n+  rtx expand (function_expander &e) const override\n+  {\n+    if (e.op_info->op == OP_TYPE_vx)\n+      return e.use_ternop_insn (false,\n+\t\t\t\tcode_for_pred_mul_scalar (MINUS,\n+\t\t\t\t\t\t\t  e.vector_mode ()));\n+    if (e.op_info->op == OP_TYPE_vv)\n+      return e.use_ternop_insn (false,\n+\t\t\t\tcode_for_pred_mul (MINUS, e.vector_mode ()));\n+    gcc_unreachable ();\n+  }\n };\n \n+\n /* Implements vwmacc<su><su>.  */\n-template<widen_ternop_type WIDEN_TERNOP_TYPE>\n-class iwmac : public function_base\n+class vwmacc : public function_base\n {\n public:\n   bool has_merge_operand_p () const override { return false; }\n \n   rtx expand (function_expander &e) const override\n   {\n-    switch (WIDEN_TERNOP_TYPE)\n-      {\n-      case WIDEN_TERNOP_VWMACC:\n-\tif (e.op_info->op == OP_TYPE_vx)\n-\t  return e.use_widen_ternop_insn (\n-\t    code_for_pred_widen_mul_plus_scalar (SIGN_EXTEND,\n-\t\t\t\t\t\t e.vector_mode ()));\n-\tif (e.op_info->op == OP_TYPE_vv)\n-\t  return e.use_widen_ternop_insn (\n-\t    code_for_pred_widen_mul_plus (SIGN_EXTEND, e.vector_mode ()));\n-\tbreak;\n-      case WIDEN_TERNOP_VWMACCU:\n-\tif (e.op_info->op == OP_TYPE_vx)\n-\t  return e.use_widen_ternop_insn (\n-\t    code_for_pred_widen_mul_plus_scalar (ZERO_EXTEND,\n-\t\t\t\t\t\t e.vector_mode ()));\n-\tif (e.op_info->op == OP_TYPE_vv)\n-\t  return e.use_widen_ternop_insn (\n-\t    code_for_pred_widen_mul_plus (ZERO_EXTEND, e.vector_mode ()));\n-\tbreak;\n-      case WIDEN_TERNOP_VWMACCSU:\n-\tif (e.op_info->op == OP_TYPE_vx)\n-\t  return e.use_widen_ternop_insn (\n-\t    code_for_pred_widen_mul_plussu_scalar (e.vector_mode ()));\n-\tif (e.op_info->op == OP_TYPE_vv)\n-\t  return e.use_widen_ternop_insn (\n-\t    code_for_pred_widen_mul_plussu (e.vector_mode ()));\n-\tbreak;\n-      case WIDEN_TERNOP_VWMACCUS:\n-\treturn e.use_widen_ternop_insn (\n-\t  code_for_pred_widen_mul_plusus_scalar (e.vector_mode ()));\n-      default:\n-\tbreak;\n-      }\n+    if (e.op_info->op == OP_TYPE_vx)\n+      return e.use_widen_ternop_insn (\n+\tcode_for_pred_widen_mul_plus_scalar (SIGN_EXTEND, e.vector_mode ()));\n+    if (e.op_info->op == OP_TYPE_vv)\n+      return e.use_widen_ternop_insn (\n+\tcode_for_pred_widen_mul_plus (SIGN_EXTEND, e.vector_mode ()));\n+    gcc_unreachable ();\n+  }\n+};\n+\n+class vwmaccu : public function_base\n+{\n+public:\n+  bool has_merge_operand_p () const override { return false; }\n+\n+  rtx expand (function_expander &e) const override\n+  {\n+    if (e.op_info->op == OP_TYPE_vx)\n+      return e.use_widen_ternop_insn (\n+\tcode_for_pred_widen_mul_plus_scalar (ZERO_EXTEND, e.vector_mode ()));\n+    if (e.op_info->op == OP_TYPE_vv)\n+      return e.use_widen_ternop_insn (\n+\tcode_for_pred_widen_mul_plus (ZERO_EXTEND, e.vector_mode ()));\n     gcc_unreachable ();\n   }\n };\n \n+class vwmaccsu : public function_base\n+{\n+public:\n+  bool has_merge_operand_p () const override { return false; }\n+\n+  rtx expand (function_expander &e) const override\n+  {\n+    if (e.op_info->op == OP_TYPE_vx)\n+      return e.use_widen_ternop_insn (\n+\tcode_for_pred_widen_mul_plussu_scalar (e.vector_mode ()));\n+    if (e.op_info->op == OP_TYPE_vv)\n+      return e.use_widen_ternop_insn (\n+\tcode_for_pred_widen_mul_plussu (e.vector_mode ()));\n+    gcc_unreachable ();\n+  }\n+};\n+\n+class vwmaccus : public function_base\n+{\n+public:\n+  bool has_merge_operand_p () const override { return false; }\n+\n+  rtx expand (function_expander &e) const override\n+  {\n+    return e.use_widen_ternop_insn (\n+      code_for_pred_widen_mul_plusus_scalar (e.vector_mode ()));\n+  }\n+};\n+\n /* Implements vmand/vmnand/vmandn/vmxor/vmor/vmnor/vmorn/vmxnor  */\n template<rtx_code CODE>\n class mask_logic : public function_base\n@@ -844,6 +887,460 @@ class vid : public function_base\n   }\n };\n \n+/* Implements vfrsub/vfrdiv.  */\n+template<rtx_code CODE>\n+class reverse_binop : public function_base\n+{\n+public:\n+  rtx expand (function_expander &e) const override\n+  {\n+    return e.use_exact_insn (\n+      code_for_pred_reverse_scalar (CODE, e.vector_mode ()));\n+  }\n+};\n+\n+class vfmacc : public function_base\n+{\n+public:\n+  bool has_merge_operand_p () const override { return false; }\n+\n+  rtx expand (function_expander &e) const override\n+  {\n+    if (e.op_info->op == OP_TYPE_vf)\n+      return e.use_ternop_insn (true,\n+\t\t\t\tcode_for_pred_mul_scalar (PLUS,\n+\t\t\t\t\t\t\t  e.vector_mode ()));\n+    if (e.op_info->op == OP_TYPE_vv)\n+      return e.use_ternop_insn (true,\n+\t\t\t\tcode_for_pred_mul (PLUS, e.vector_mode ()));\n+    gcc_unreachable ();\n+  }\n+};\n+\n+class vfnmsac : public function_base\n+{\n+public:\n+  bool has_merge_operand_p () const override { return false; }\n+\n+  rtx expand (function_expander &e) const override\n+  {\n+    if (e.op_info->op == OP_TYPE_vf)\n+      return e.use_ternop_insn (true,\n+\t\t\t\tcode_for_pred_mul_scalar (MINUS,\n+\t\t\t\t\t\t\t  e.vector_mode ()));\n+    if (e.op_info->op == OP_TYPE_vv)\n+      return e.use_ternop_insn (true,\n+\t\t\t\tcode_for_pred_mul (MINUS, e.vector_mode ()));\n+    gcc_unreachable ();\n+  }\n+};\n+\n+class vfmadd : public function_base\n+{\n+public:\n+  bool has_merge_operand_p () const override { return false; }\n+\n+  rtx expand (function_expander &e) const override\n+  {\n+    if (e.op_info->op == OP_TYPE_vf)\n+      return e.use_ternop_insn (false,\n+\t\t\t\tcode_for_pred_mul_scalar (PLUS,\n+\t\t\t\t\t\t\t  e.vector_mode ()));\n+    if (e.op_info->op == OP_TYPE_vv)\n+      return e.use_ternop_insn (false,\n+\t\t\t\tcode_for_pred_mul (PLUS, e.vector_mode ()));\n+    gcc_unreachable ();\n+  }\n+};\n+\n+class vfnmsub : public function_base\n+{\n+public:\n+  bool has_merge_operand_p () const override { return false; }\n+\n+  rtx expand (function_expander &e) const override\n+  {\n+    if (e.op_info->op == OP_TYPE_vf)\n+      return e.use_ternop_insn (false,\n+\t\t\t\tcode_for_pred_mul_scalar (MINUS,\n+\t\t\t\t\t\t\t  e.vector_mode ()));\n+    if (e.op_info->op == OP_TYPE_vv)\n+      return e.use_ternop_insn (false,\n+\t\t\t\tcode_for_pred_mul (MINUS, e.vector_mode ()));\n+    gcc_unreachable ();\n+  }\n+};\n+\n+class vfnmacc : public function_base\n+{\n+public:\n+  bool has_merge_operand_p () const override { return false; }\n+\n+  rtx expand (function_expander &e) const override\n+  {\n+    if (e.op_info->op == OP_TYPE_vf)\n+      return e.use_ternop_insn (\n+\ttrue, code_for_pred_neg_mul_scalar (PLUS, e.vector_mode ()));\n+    if (e.op_info->op == OP_TYPE_vv)\n+      return e.use_ternop_insn (true,\n+\t\t\t\tcode_for_pred_neg_mul (PLUS, e.vector_mode ()));\n+    gcc_unreachable ();\n+  }\n+};\n+\n+class vfmsac : public function_base\n+{\n+public:\n+  bool has_merge_operand_p () const override { return false; }\n+\n+  rtx expand (function_expander &e) const override\n+  {\n+    if (e.op_info->op == OP_TYPE_vf)\n+      return e.use_ternop_insn (\n+\ttrue, code_for_pred_neg_mul_scalar (MINUS, e.vector_mode ()));\n+    if (e.op_info->op == OP_TYPE_vv)\n+      return e.use_ternop_insn (true, code_for_pred_neg_mul (MINUS,\n+\t\t\t\t\t\t\t     e.vector_mode ()));\n+    gcc_unreachable ();\n+  }\n+};\n+\n+class vfnmadd : public function_base\n+{\n+public:\n+  bool has_merge_operand_p () const override { return false; }\n+\n+  rtx expand (function_expander &e) const override\n+  {\n+    if (e.op_info->op == OP_TYPE_vf)\n+      return e.use_ternop_insn (\n+\tfalse, code_for_pred_neg_mul_scalar (PLUS, e.vector_mode ()));\n+    if (e.op_info->op == OP_TYPE_vv)\n+      return e.use_ternop_insn (false,\n+\t\t\t\tcode_for_pred_neg_mul (PLUS, e.vector_mode ()));\n+    gcc_unreachable ();\n+  }\n+};\n+\n+class vfmsub : public function_base\n+{\n+public:\n+  bool has_merge_operand_p () const override { return false; }\n+\n+  rtx expand (function_expander &e) const override\n+  {\n+    if (e.op_info->op == OP_TYPE_vf)\n+      return e.use_ternop_insn (\n+\tfalse, code_for_pred_neg_mul_scalar (MINUS, e.vector_mode ()));\n+    if (e.op_info->op == OP_TYPE_vv)\n+      return e.use_ternop_insn (false,\n+\t\t\t\tcode_for_pred_neg_mul (MINUS,\n+\t\t\t\t\t\t       e.vector_mode ()));\n+    gcc_unreachable ();\n+  }\n+};\n+\n+class vfwmacc : public function_base\n+{\n+public:\n+  bool has_merge_operand_p () const override { return false; }\n+\n+  rtx expand (function_expander &e) const override\n+  {\n+    if (e.op_info->op == OP_TYPE_vf)\n+      return e.use_widen_ternop_insn (\n+\tcode_for_pred_widen_mul_scalar (PLUS, e.vector_mode ()));\n+    if (e.op_info->op == OP_TYPE_vv)\n+      return e.use_widen_ternop_insn (\n+\tcode_for_pred_widen_mul (PLUS, e.vector_mode ()));\n+    gcc_unreachable ();\n+  }\n+};\n+\n+class vfwnmacc : public function_base\n+{\n+public:\n+  bool has_merge_operand_p () const override { return false; }\n+\n+  rtx expand (function_expander &e) const override\n+  {\n+    if (e.op_info->op == OP_TYPE_vf)\n+      return e.use_widen_ternop_insn (\n+\tcode_for_pred_widen_neg_mul_scalar (PLUS, e.vector_mode ()));\n+    if (e.op_info->op == OP_TYPE_vv)\n+      return e.use_widen_ternop_insn (\n+\tcode_for_pred_widen_neg_mul (PLUS, e.vector_mode ()));\n+    gcc_unreachable ();\n+  }\n+};\n+\n+class vfwmsac : public function_base\n+{\n+public:\n+  bool has_merge_operand_p () const override { return false; }\n+\n+  rtx expand (function_expander &e) const override\n+  {\n+    if (e.op_info->op == OP_TYPE_vf)\n+      return e.use_widen_ternop_insn (\n+\tcode_for_pred_widen_neg_mul_scalar (MINUS, e.vector_mode ()));\n+    if (e.op_info->op == OP_TYPE_vv)\n+      return e.use_widen_ternop_insn (\n+\tcode_for_pred_widen_neg_mul (MINUS, e.vector_mode ()));\n+    gcc_unreachable ();\n+  }\n+};\n+\n+class vfwnmsac : public function_base\n+{\n+public:\n+  bool has_merge_operand_p () const override { return false; }\n+\n+  rtx expand (function_expander &e) const override\n+  {\n+    if (e.op_info->op == OP_TYPE_vf)\n+      return e.use_widen_ternop_insn (\n+\tcode_for_pred_widen_mul_scalar (MINUS, e.vector_mode ()));\n+    if (e.op_info->op == OP_TYPE_vv)\n+      return e.use_widen_ternop_insn (\n+\tcode_for_pred_widen_mul (MINUS, e.vector_mode ()));\n+    gcc_unreachable ();\n+  }\n+};\n+\n+/* Implements vfsqrt7/vfrec7/vfclass/vfsgnj/vfsgnjn/vfsgnjx.  */\n+template<int UNSPEC>\n+class float_misc : public function_base\n+{\n+public:\n+  rtx expand (function_expander &e) const override\n+  {\n+    if (e.op_info->op == OP_TYPE_vf)\n+      return e.use_exact_insn (code_for_pred_scalar (UNSPEC, e.vector_mode ()));\n+    if (e.op_info->op == OP_TYPE_vv || e.op_info->op == OP_TYPE_v)\n+      return e.use_exact_insn (code_for_pred (UNSPEC, e.vector_mode ()));\n+    gcc_unreachable ();\n+  }\n+};\n+\n+/* Implements vmfeq/vmfne/vmflt/vmfgt/vmfle/vmfge.  */\n+template<rtx_code CODE>\n+class fcmp : public function_base\n+{\n+public:\n+  rtx expand (function_expander &e) const override\n+  {\n+    switch (e.op_info->op)\n+      {\n+\tcase OP_TYPE_vf: {\n+\t  if (CODE == EQ || CODE == NE)\n+\t    return e.use_compare_insn (CODE, code_for_pred_eqne_scalar (\n+\t\t\t\t\t       e.vector_mode ()));\n+\t  else\n+\t    return e.use_compare_insn (CODE, code_for_pred_cmp_scalar (\n+\t\t\t\t\t       e.vector_mode ()));\n+\t}\n+\tcase OP_TYPE_vv: {\n+\t  return e.use_compare_insn (CODE,\n+\t\t\t\t     code_for_pred_cmp (e.vector_mode ()));\n+\t}\n+      default:\n+\tgcc_unreachable ();\n+      }\n+  }\n+};\n+\n+/* Implements vfclass.  */\n+class vfclass : public function_base\n+{\n+public:\n+  rtx expand (function_expander &e) const override\n+  {\n+    return e.use_exact_insn (code_for_pred_class (e.arg_mode (0)));\n+  }\n+};\n+\n+/* Implements vfcvt.x.  */\n+template<int UNSPEC>\n+class vfcvt_x : public function_base\n+{\n+public:\n+  rtx expand (function_expander &e) const override\n+  {\n+    return e.use_exact_insn (code_for_pred_fcvt_x_f (UNSPEC, e.arg_mode (0)));\n+  }\n+};\n+\n+/* Implements vfcvt.rtz.x.  */\n+template<rtx_code CODE>\n+class vfcvt_rtz_x : public function_base\n+{\n+public:\n+  rtx expand (function_expander &e) const override\n+  {\n+    return e.use_exact_insn (code_for_pred (CODE, e.arg_mode (0)));\n+  }\n+};\n+\n+class vfcvt_f : public function_base\n+{\n+public:\n+  rtx expand (function_expander &e) const override\n+  {\n+    if (e.op_info->op == OP_TYPE_x_v)\n+      return e.use_exact_insn (code_for_pred (FLOAT, e.vector_mode ()));\n+    if (e.op_info->op == OP_TYPE_xu_v)\n+      return e.use_exact_insn (\n+\tcode_for_pred (UNSIGNED_FLOAT, e.vector_mode ()));\n+    gcc_unreachable ();\n+  }\n+};\n+\n+/* Implements vfwcvt.x.  */\n+template<int UNSPEC>\n+class vfwcvt_x : public function_base\n+{\n+public:\n+  rtx expand (function_expander &e) const override\n+  {\n+    return e.use_exact_insn (\n+      code_for_pred_widen_fcvt_x_f (UNSPEC, e.vector_mode ()));\n+  }\n+};\n+\n+/* Implements vfwcvt.rtz.x.  */\n+template<rtx_code CODE>\n+class vfwcvt_rtz_x : public function_base\n+{\n+public:\n+  rtx expand (function_expander &e) const override\n+  {\n+    return e.use_exact_insn (code_for_pred_widen (CODE, e.vector_mode ()));\n+  }\n+};\n+\n+class vfwcvt_f : public function_base\n+{\n+public:\n+  rtx expand (function_expander &e) const override\n+  {\n+    if (e.op_info->op == OP_TYPE_f_v)\n+      return e.use_exact_insn (code_for_pred_extend (e.vector_mode ()));\n+    if (e.op_info->op == OP_TYPE_x_v)\n+      return e.use_exact_insn (code_for_pred_widen (FLOAT, e.vector_mode ()));\n+    if (e.op_info->op == OP_TYPE_xu_v)\n+      return e.use_exact_insn (\n+\tcode_for_pred_widen (UNSIGNED_FLOAT, e.vector_mode ()));\n+    gcc_unreachable ();\n+  }\n+};\n+\n+/* Implements vfncvt.x.  */\n+template<int UNSPEC>\n+class vfncvt_x : public function_base\n+{\n+public:\n+  rtx expand (function_expander &e) const override\n+  {\n+    return e.use_exact_insn (\n+      code_for_pred_narrow_fcvt_x_f (UNSPEC, e.arg_mode (0)));\n+  }\n+};\n+\n+/* Implements vfncvt.rtz.x.  */\n+template<rtx_code CODE>\n+class vfncvt_rtz_x : public function_base\n+{\n+public:\n+  rtx expand (function_expander &e) const override\n+  {\n+    return e.use_exact_insn (code_for_pred_narrow (CODE, e.vector_mode ()));\n+  }\n+};\n+\n+class vfncvt_f : public function_base\n+{\n+public:\n+  rtx expand (function_expander &e) const override\n+  {\n+    if (e.op_info->op == OP_TYPE_f_w)\n+      return e.use_exact_insn (code_for_pred_trunc (e.vector_mode ()));\n+    if (e.op_info->op == OP_TYPE_x_w)\n+      return e.use_exact_insn (code_for_pred_narrow (FLOAT, e.arg_mode (0)));\n+    if (e.op_info->op == OP_TYPE_xu_w)\n+      return e.use_exact_insn (\n+\tcode_for_pred_narrow (UNSIGNED_FLOAT, e.arg_mode (0)));\n+    gcc_unreachable ();\n+  }\n+};\n+\n+class vfncvt_rod_f : public function_base\n+{\n+public:\n+  rtx expand (function_expander &e) const override\n+  {\n+    return e.use_exact_insn (code_for_pred_rod_trunc (e.vector_mode ()));\n+  }\n+};\n+\n+/* Implements reduction instructions.  */\n+template<rtx_code CODE>\n+class reducop : public function_base\n+{\n+public:\n+  bool apply_mask_policy_p () const override { return false; }\n+\n+  rtx expand (function_expander &e) const override\n+  {\n+    return e.use_exact_insn (\n+      code_for_pred_reduc (CODE, e.vector_mode (), e.vector_mode ()));\n+  }\n+};\n+\n+/* Implements widen reduction instructions.  */\n+template<int UNSPEC>\n+class widen_reducop : public function_base\n+{\n+public:\n+  bool apply_mask_policy_p () const override { return false; }\n+\n+  rtx expand (function_expander &e) const override\n+  {\n+    return e.use_exact_insn (code_for_pred_widen_reduc_plus (UNSPEC,\n+\t\t\t\t\t\t\t     e.vector_mode (),\n+\t\t\t\t\t\t\t     e.vector_mode ()));\n+  }\n+};\n+\n+/* Implements floating-point reduction instructions.  */\n+template<int UNSPEC>\n+class freducop : public function_base\n+{\n+public:\n+  bool apply_mask_policy_p () const override { return false; }\n+\n+  rtx expand (function_expander &e) const override\n+  {\n+    return e.use_exact_insn (\n+      code_for_pred_reduc_plus (UNSPEC, e.vector_mode (), e.vector_mode ()));\n+  }\n+};\n+\n+/* Implements widening floating-point reduction instructions.  */\n+template<int UNSPEC>\n+class widen_freducop : public function_base\n+{\n+public:\n+  bool apply_mask_policy_p () const override { return false; }\n+\n+  rtx expand (function_expander &e) const override\n+  {\n+    return e.use_exact_insn (code_for_pred_widen_reduc_plus (UNSPEC,\n+\t\t\t\t\t\t\t     e.vector_mode (),\n+\t\t\t\t\t\t\t     e.vector_mode ()));\n+  }\n+};\n+\n static CONSTEXPR const vsetvl<false> vsetvl_obj;\n static CONSTEXPR const vsetvl<true> vsetvlmax_obj;\n static CONSTEXPR const loadstore<false, LST_UNIT_STRIDE, false> vle_obj;\n@@ -921,14 +1418,14 @@ static CONSTEXPR const icmp<LTU> vmsltu_obj;\n static CONSTEXPR const icmp<GTU> vmsgtu_obj;\n static CONSTEXPR const icmp<LEU> vmsleu_obj;\n static CONSTEXPR const icmp<GEU> vmsgeu_obj;\n-static CONSTEXPR const imac<TERNOP_VMACC> vmacc_obj;\n-static CONSTEXPR const imac<TERNOP_VNMSAC> vnmsac_obj;\n-static CONSTEXPR const imac<TERNOP_VMADD> vmadd_obj;\n-static CONSTEXPR const imac<TERNOP_VNMSUB> vnmsub_obj;\n-static CONSTEXPR const iwmac<WIDEN_TERNOP_VWMACC> vwmacc_obj;\n-static CONSTEXPR const iwmac<WIDEN_TERNOP_VWMACCU> vwmaccu_obj;\n-static CONSTEXPR const iwmac<WIDEN_TERNOP_VWMACCSU> vwmaccsu_obj;\n-static CONSTEXPR const iwmac<WIDEN_TERNOP_VWMACCUS> vwmaccus_obj;\n+static CONSTEXPR const vmacc vmacc_obj;\n+static CONSTEXPR const vnmsac vnmsac_obj;\n+static CONSTEXPR const vmadd vmadd_obj;\n+static CONSTEXPR const vnmsub vnmsub_obj;\n+static CONSTEXPR const vwmacc vwmacc_obj;\n+static CONSTEXPR const vwmaccu vwmaccu_obj;\n+static CONSTEXPR const vwmaccsu vwmaccsu_obj;\n+static CONSTEXPR const vwmaccus vwmaccus_obj;\n static CONSTEXPR const binop<SS_PLUS> vsadd_obj;\n static CONSTEXPR const binop<SS_MINUS> vssub_obj;\n static CONSTEXPR const binop<US_PLUS> vsaddu_obj;\n@@ -961,6 +1458,78 @@ static CONSTEXPR const mask_misc<UNSPEC_VMSIF> vmsif_obj;\n static CONSTEXPR const mask_misc<UNSPEC_VMSOF> vmsof_obj;\n static CONSTEXPR const viota viota_obj;\n static CONSTEXPR const vid vid_obj;\n+static CONSTEXPR const binop<PLUS> vfadd_obj;\n+static CONSTEXPR const binop<MINUS> vfsub_obj;\n+static CONSTEXPR const reverse_binop<MINUS> vfrsub_obj;\n+static CONSTEXPR const widen_binop<PLUS> vfwadd_obj;\n+static CONSTEXPR const widen_binop<MINUS> vfwsub_obj;\n+static CONSTEXPR const binop<MULT> vfmul_obj;\n+static CONSTEXPR const binop<DIV> vfdiv_obj;\n+static CONSTEXPR const reverse_binop<DIV> vfrdiv_obj;\n+static CONSTEXPR const widen_binop<MULT> vfwmul_obj;\n+static CONSTEXPR const vfmacc vfmacc_obj;\n+static CONSTEXPR const vfnmsac vfnmsac_obj;\n+static CONSTEXPR const vfmadd vfmadd_obj;\n+static CONSTEXPR const vfnmsub vfnmsub_obj;\n+static CONSTEXPR const vfnmacc vfnmacc_obj;\n+static CONSTEXPR const vfmsac vfmsac_obj;\n+static CONSTEXPR const vfnmadd vfnmadd_obj;\n+static CONSTEXPR const vfmsub vfmsub_obj;\n+static CONSTEXPR const vfwmacc vfwmacc_obj;\n+static CONSTEXPR const vfwnmacc vfwnmacc_obj;\n+static CONSTEXPR const vfwmsac vfwmsac_obj;\n+static CONSTEXPR const vfwnmsac vfwnmsac_obj;\n+static CONSTEXPR const unop<SQRT> vfsqrt_obj;\n+static CONSTEXPR const float_misc<UNSPEC_VFRSQRT7> vfrsqrt7_obj;\n+static CONSTEXPR const float_misc<UNSPEC_VFREC7> vfrec7_obj;\n+static CONSTEXPR const binop<SMIN> vfmin_obj;\n+static CONSTEXPR const binop<SMAX> vfmax_obj;\n+static CONSTEXPR const float_misc<UNSPEC_VCOPYSIGN> vfsgnj_obj;\n+static CONSTEXPR const float_misc<UNSPEC_VNCOPYSIGN> vfsgnjn_obj;\n+static CONSTEXPR const float_misc<UNSPEC_VXORSIGN> vfsgnjx_obj;\n+static CONSTEXPR const unop<NEG> vfneg_obj;\n+static CONSTEXPR const unop<ABS> vfabs_obj;\n+static CONSTEXPR const fcmp<EQ> vmfeq_obj;\n+static CONSTEXPR const fcmp<NE> vmfne_obj;\n+static CONSTEXPR const fcmp<LT> vmflt_obj;\n+static CONSTEXPR const fcmp<GT> vmfgt_obj;\n+static CONSTEXPR const fcmp<LE> vmfle_obj;\n+static CONSTEXPR const fcmp<GE> vmfge_obj;\n+static CONSTEXPR const vfclass vfclass_obj;\n+static CONSTEXPR const vmerge vfmerge_obj;\n+static CONSTEXPR const vmv_v vfmv_v_obj;\n+static CONSTEXPR const vfcvt_x<UNSPEC_VFCVT> vfcvt_x_obj;\n+static CONSTEXPR const vfcvt_x<UNSPEC_UNSIGNED_VFCVT> vfcvt_xu_obj;\n+static CONSTEXPR const vfcvt_rtz_x<FIX> vfcvt_rtz_x_obj;\n+static CONSTEXPR const vfcvt_rtz_x<UNSIGNED_FIX> vfcvt_rtz_xu_obj;\n+static CONSTEXPR const vfcvt_f vfcvt_f_obj;\n+static CONSTEXPR const vfwcvt_x<UNSPEC_VFCVT> vfwcvt_x_obj;\n+static CONSTEXPR const vfwcvt_x<UNSPEC_UNSIGNED_VFCVT> vfwcvt_xu_obj;\n+static CONSTEXPR const vfwcvt_rtz_x<FIX> vfwcvt_rtz_x_obj;\n+static CONSTEXPR const vfwcvt_rtz_x<UNSIGNED_FIX> vfwcvt_rtz_xu_obj;\n+static CONSTEXPR const vfwcvt_f vfwcvt_f_obj;\n+static CONSTEXPR const vfncvt_x<UNSPEC_VFCVT> vfncvt_x_obj;\n+static CONSTEXPR const vfncvt_x<UNSPEC_UNSIGNED_VFCVT> vfncvt_xu_obj;\n+static CONSTEXPR const vfncvt_rtz_x<FIX> vfncvt_rtz_x_obj;\n+static CONSTEXPR const vfncvt_rtz_x<UNSIGNED_FIX> vfncvt_rtz_xu_obj;\n+static CONSTEXPR const vfncvt_f vfncvt_f_obj;\n+static CONSTEXPR const vfncvt_rod_f vfncvt_rod_f_obj;\n+static CONSTEXPR const reducop<PLUS> vredsum_obj;\n+static CONSTEXPR const reducop<UMAX> vredmaxu_obj;\n+static CONSTEXPR const reducop<SMAX> vredmax_obj;\n+static CONSTEXPR const reducop<UMIN> vredminu_obj;\n+static CONSTEXPR const reducop<SMIN> vredmin_obj;\n+static CONSTEXPR const reducop<AND> vredand_obj;\n+static CONSTEXPR const reducop<IOR> vredor_obj;\n+static CONSTEXPR const reducop<XOR> vredxor_obj;\n+static CONSTEXPR const widen_reducop<UNSPEC_WREDUC_SUM> vwredsum_obj;\n+static CONSTEXPR const widen_reducop<UNSPEC_WREDUC_USUM> vwredsumu_obj;\n+static CONSTEXPR const freducop<UNSPEC_UNORDERED> vfredusum_obj;\n+static CONSTEXPR const freducop<UNSPEC_ORDERED> vfredosum_obj;\n+static CONSTEXPR const reducop<SMAX> vfredmax_obj;\n+static CONSTEXPR const reducop<SMIN> vfredmin_obj;\n+static CONSTEXPR const widen_freducop<UNSPEC_UNORDERED> vfwredusum_obj;\n+static CONSTEXPR const widen_freducop<UNSPEC_ORDERED> vfwredosum_obj;\n \n /* Declare the function base NAME, pointing it to an instance\n    of class <NAME>_obj.  */\n@@ -1084,5 +1653,77 @@ BASE (vmsif)\n BASE (vmsof)\n BASE (viota)\n BASE (vid)\n+BASE (vfadd)\n+BASE (vfsub)\n+BASE (vfrsub)\n+BASE (vfwadd)\n+BASE (vfwsub)\n+BASE (vfmul)\n+BASE (vfdiv)\n+BASE (vfrdiv)\n+BASE (vfwmul)\n+BASE (vfmacc)\n+BASE (vfnmsac)\n+BASE (vfmadd)\n+BASE (vfnmsub)\n+BASE (vfnmacc)\n+BASE (vfmsac)\n+BASE (vfnmadd)\n+BASE (vfmsub)\n+BASE (vfwmacc)\n+BASE (vfwnmacc)\n+BASE (vfwmsac)\n+BASE (vfwnmsac)\n+BASE (vfsqrt)\n+BASE (vfrsqrt7)\n+BASE (vfrec7)\n+BASE (vfmin)\n+BASE (vfmax)\n+BASE (vfsgnj)\n+BASE (vfsgnjn)\n+BASE (vfsgnjx)\n+BASE (vfneg)\n+BASE (vfabs)\n+BASE (vmfeq)\n+BASE (vmfne)\n+BASE (vmflt)\n+BASE (vmfgt)\n+BASE (vmfle)\n+BASE (vmfge)\n+BASE (vfclass)\n+BASE (vfmerge)\n+BASE (vfmv_v)\n+BASE (vfcvt_x)\n+BASE (vfcvt_xu)\n+BASE (vfcvt_rtz_x)\n+BASE (vfcvt_rtz_xu)\n+BASE (vfcvt_f)\n+BASE (vfwcvt_x)\n+BASE (vfwcvt_xu)\n+BASE (vfwcvt_rtz_x)\n+BASE (vfwcvt_rtz_xu)\n+BASE (vfwcvt_f)\n+BASE (vfncvt_x)\n+BASE (vfncvt_xu)\n+BASE (vfncvt_rtz_x)\n+BASE (vfncvt_rtz_xu)\n+BASE (vfncvt_f)\n+BASE (vfncvt_rod_f)\n+BASE (vredsum)\n+BASE (vredmaxu)\n+BASE (vredmax)\n+BASE (vredminu)\n+BASE (vredmin)\n+BASE (vredand)\n+BASE (vredor)\n+BASE (vredxor)\n+BASE (vwredsum)\n+BASE (vwredsumu)\n+BASE (vfredusum)\n+BASE (vfredosum)\n+BASE (vfredmax)\n+BASE (vfredmin)\n+BASE (vfwredosum)\n+BASE (vfwredusum)\n \n } // end namespace riscv_vector"}, {"sha": "9f0e4675f81aed9620f2324b2b86c0048cd0d8a5", "filename": "gcc/config/riscv/riscv-vector-builtins-bases.h", "status": "modified", "additions": 76, "deletions": 0, "changes": 76, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ee85b3255d638fd77ee3fe17a4e146c81545efb/gcc%2Fconfig%2Friscv%2Friscv-vector-builtins-bases.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ee85b3255d638fd77ee3fe17a4e146c81545efb/gcc%2Fconfig%2Friscv%2Friscv-vector-builtins-bases.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Friscv%2Friscv-vector-builtins-bases.h?ref=6ee85b3255d638fd77ee3fe17a4e146c81545efb", "patch": "@@ -143,6 +143,82 @@ extern const function_base *const vmsif;\n extern const function_base *const vmsof;\n extern const function_base *const viota;\n extern const function_base *const vid;\n+extern const function_base *const vfadd;\n+extern const function_base *const vfadd;\n+extern const function_base *const vfsub;\n+extern const function_base *const vfsub;\n+extern const function_base *const vfrsub;\n+extern const function_base *const vfwadd;\n+extern const function_base *const vfwsub;\n+extern const function_base *const vfmul;\n+extern const function_base *const vfmul;\n+extern const function_base *const vfdiv;\n+extern const function_base *const vfdiv;\n+extern const function_base *const vfrdiv;\n+extern const function_base *const vfwmul;\n+extern const function_base *const vfmacc;\n+extern const function_base *const vfnmsac;\n+extern const function_base *const vfmadd;\n+extern const function_base *const vfnmsub;\n+extern const function_base *const vfnmacc;\n+extern const function_base *const vfmsac;\n+extern const function_base *const vfnmadd;\n+extern const function_base *const vfmsub;\n+extern const function_base *const vfwmacc;\n+extern const function_base *const vfwnmacc;\n+extern const function_base *const vfwmsac;\n+extern const function_base *const vfwnmsac;\n+extern const function_base *const vfsqrt;\n+extern const function_base *const vfrsqrt7;\n+extern const function_base *const vfrec7;\n+extern const function_base *const vfmin;\n+extern const function_base *const vfmax;\n+extern const function_base *const vfsgnj;\n+extern const function_base *const vfsgnjn;\n+extern const function_base *const vfsgnjx;\n+extern const function_base *const vfneg;\n+extern const function_base *const vfabs;\n+extern const function_base *const vmfeq;\n+extern const function_base *const vmfne;\n+extern const function_base *const vmflt;\n+extern const function_base *const vmfgt;\n+extern const function_base *const vmfle;\n+extern const function_base *const vmfge;\n+extern const function_base *const vfclass;\n+extern const function_base *const vfmerge;\n+extern const function_base *const vfmv_v;\n+extern const function_base *const vfcvt_x;\n+extern const function_base *const vfcvt_xu;\n+extern const function_base *const vfcvt_rtz_x;\n+extern const function_base *const vfcvt_rtz_xu;\n+extern const function_base *const vfcvt_f;\n+extern const function_base *const vfwcvt_x;\n+extern const function_base *const vfwcvt_xu;\n+extern const function_base *const vfwcvt_rtz_x;\n+extern const function_base *const vfwcvt_rtz_xu;\n+extern const function_base *const vfwcvt_f;\n+extern const function_base *const vfncvt_x;\n+extern const function_base *const vfncvt_xu;\n+extern const function_base *const vfncvt_rtz_x;\n+extern const function_base *const vfncvt_rtz_xu;\n+extern const function_base *const vfncvt_f;\n+extern const function_base *const vfncvt_rod_f;\n+extern const function_base *const vredsum;\n+extern const function_base *const vredmaxu;\n+extern const function_base *const vredmax;\n+extern const function_base *const vredminu;\n+extern const function_base *const vredmin;\n+extern const function_base *const vredand;\n+extern const function_base *const vredor;\n+extern const function_base *const vredxor;\n+extern const function_base *const vwredsum;\n+extern const function_base *const vwredsumu;\n+extern const function_base *const vfredusum;\n+extern const function_base *const vfredosum;\n+extern const function_base *const vfredmax;\n+extern const function_base *const vfredmin;\n+extern const function_base *const vfwredosum;\n+extern const function_base *const vfwredusum;\n }\n \n } // end namespace riscv_vector"}, {"sha": "230b76cd0f24ad8154c9a50bb34cd24fbe74d845", "filename": "gcc/config/riscv/riscv-vector-builtins-functions.def", "status": "modified", "additions": 164, "deletions": 8, "changes": 172, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ee85b3255d638fd77ee3fe17a4e146c81545efb/gcc%2Fconfig%2Friscv%2Friscv-vector-builtins-functions.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ee85b3255d638fd77ee3fe17a4e146c81545efb/gcc%2Fconfig%2Friscv%2Friscv-vector-builtins-functions.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Friscv%2Friscv-vector-builtins-functions.def?ref=6ee85b3255d638fd77ee3fe17a4e146c81545efb", "patch": "@@ -105,12 +105,12 @@ DEF_RVV_FUNCTION (vwcvt_x, alu, full_preds, i_x_x_v_ops)\n DEF_RVV_FUNCTION (vwcvtu_x, alu, full_preds, u_x_x_v_ops)\n \n // 11.3. Vector Integer Extension\n-DEF_RVV_FUNCTION (vzext, alu, full_preds, u_vf2_ops)\n-DEF_RVV_FUNCTION (vzext, alu, full_preds, u_vf4_ops)\n-DEF_RVV_FUNCTION (vzext, alu, full_preds, u_vf8_ops)\n-DEF_RVV_FUNCTION (vsext, alu, full_preds, i_vf2_ops)\n-DEF_RVV_FUNCTION (vsext, alu, full_preds, i_vf4_ops)\n-DEF_RVV_FUNCTION (vsext, alu, full_preds, i_vf8_ops)\n+DEF_RVV_FUNCTION (vzext, widen_alu, full_preds, u_vf2_ops)\n+DEF_RVV_FUNCTION (vzext, widen_alu, full_preds, u_vf4_ops)\n+DEF_RVV_FUNCTION (vzext, widen_alu, full_preds, u_vf8_ops)\n+DEF_RVV_FUNCTION (vsext, widen_alu, full_preds, i_vf2_ops)\n+DEF_RVV_FUNCTION (vsext, widen_alu, full_preds, i_vf4_ops)\n+DEF_RVV_FUNCTION (vsext, widen_alu, full_preds, i_vf8_ops)\n \n // 11.4. Vector Integer Add-with-Carry/Subtract-with-Borrow Instructions\n DEF_RVV_FUNCTION (vadc, no_mask_policy, none_tu_preds, iu_vvvm_ops)\n@@ -275,8 +275,164 @@ DEF_RVV_FUNCTION (vnclipu, narrow_alu, full_preds, u_narrow_shift_vwx_ops)\n DEF_RVV_FUNCTION (vnclip, narrow_alu, full_preds, i_narrow_shift_vwv_ops)\n DEF_RVV_FUNCTION (vnclip, narrow_alu, full_preds, i_narrow_shift_vwx_ops)\n \n-/* TODO: 13. Vector Floating-Point Instructions.  */\n-/* TODO: 14. Vector Reduction Operations.  */\n+/* 13. Vector Floating-Point Instructions.  */\n+\n+// 13.2. Vector Single-Width Floating-Point Add/Subtract Instructions\n+DEF_RVV_FUNCTION (vfadd, alu, full_preds, f_vvv_ops)\n+DEF_RVV_FUNCTION (vfadd, alu, full_preds, f_vvf_ops)\n+DEF_RVV_FUNCTION (vfsub, alu, full_preds, f_vvv_ops)\n+DEF_RVV_FUNCTION (vfsub, alu, full_preds, f_vvf_ops)\n+DEF_RVV_FUNCTION (vfrsub, alu, full_preds, f_vvf_ops)\n+\n+// 13.3. Vector Widening Floating-Point Add/Subtract Instructions\n+DEF_RVV_FUNCTION (vfwadd, widen_alu, full_preds, f_wvv_ops)\n+DEF_RVV_FUNCTION (vfwadd, widen_alu, full_preds, f_wvf_ops)\n+DEF_RVV_FUNCTION (vfwsub, widen_alu, full_preds, f_wvv_ops)\n+DEF_RVV_FUNCTION (vfwsub, widen_alu, full_preds, f_wvf_ops)\n+DEF_RVV_FUNCTION (vfwadd, widen_alu, full_preds, f_wwv_ops)\n+DEF_RVV_FUNCTION (vfwadd, widen_alu, full_preds, f_wwf_ops)\n+DEF_RVV_FUNCTION (vfwsub, widen_alu, full_preds, f_wwv_ops)\n+DEF_RVV_FUNCTION (vfwsub, widen_alu, full_preds, f_wwf_ops)\n+\n+// 13.4. Vector Single-Width Floating-Point Multiply/Divide Instructions\n+DEF_RVV_FUNCTION (vfmul, alu, full_preds, f_vvv_ops)\n+DEF_RVV_FUNCTION (vfmul, alu, full_preds, f_vvf_ops)\n+DEF_RVV_FUNCTION (vfdiv, alu, full_preds, f_vvv_ops)\n+DEF_RVV_FUNCTION (vfdiv, alu, full_preds, f_vvf_ops)\n+DEF_RVV_FUNCTION (vfrdiv, alu, full_preds, f_vvf_ops)\n+\n+// 13.5. Vector Widening Floating-Point Multiply\n+DEF_RVV_FUNCTION (vfwmul, alu, full_preds, f_wvv_ops)\n+DEF_RVV_FUNCTION (vfwmul, alu, full_preds, f_wvf_ops)\n+\n+// 13.6. Vector Single-Width Floating-Point Fused Multiply-Add Instructions\n+DEF_RVV_FUNCTION (vfmacc, alu, full_preds, f_vvvv_ops)\n+DEF_RVV_FUNCTION (vfmacc, alu, full_preds, f_vvfv_ops)\n+DEF_RVV_FUNCTION (vfnmsac, alu, full_preds, f_vvvv_ops)\n+DEF_RVV_FUNCTION (vfnmsac, alu, full_preds, f_vvfv_ops)\n+DEF_RVV_FUNCTION (vfmadd, alu, full_preds, f_vvvv_ops)\n+DEF_RVV_FUNCTION (vfmadd, alu, full_preds, f_vvfv_ops)\n+DEF_RVV_FUNCTION (vfnmsub, alu, full_preds, f_vvvv_ops)\n+DEF_RVV_FUNCTION (vfnmsub, alu, full_preds, f_vvfv_ops)\n+DEF_RVV_FUNCTION (vfnmacc, alu, full_preds, f_vvvv_ops)\n+DEF_RVV_FUNCTION (vfnmacc, alu, full_preds, f_vvfv_ops)\n+DEF_RVV_FUNCTION (vfmsac, alu, full_preds, f_vvvv_ops)\n+DEF_RVV_FUNCTION (vfmsac, alu, full_preds, f_vvfv_ops)\n+DEF_RVV_FUNCTION (vfnmadd, alu, full_preds, f_vvvv_ops)\n+DEF_RVV_FUNCTION (vfnmadd, alu, full_preds, f_vvfv_ops)\n+DEF_RVV_FUNCTION (vfmsub, alu, full_preds, f_vvvv_ops)\n+DEF_RVV_FUNCTION (vfmsub, alu, full_preds, f_vvfv_ops)\n+\n+// 13.7. Vector Widening Floating-Point Fused Multiply-Add Instructions\n+DEF_RVV_FUNCTION (vfwmacc, alu, full_preds, f_wwvv_ops)\n+DEF_RVV_FUNCTION (vfwmacc, alu, full_preds, f_wwfv_ops)\n+DEF_RVV_FUNCTION (vfwnmacc, alu, full_preds, f_wwvv_ops)\n+DEF_RVV_FUNCTION (vfwnmacc, alu, full_preds, f_wwfv_ops)\n+DEF_RVV_FUNCTION (vfwmsac, alu, full_preds, f_wwvv_ops)\n+DEF_RVV_FUNCTION (vfwmsac, alu, full_preds, f_wwfv_ops)\n+DEF_RVV_FUNCTION (vfwnmsac, alu, full_preds, f_wwvv_ops)\n+DEF_RVV_FUNCTION (vfwnmsac, alu, full_preds, f_wwfv_ops)\n+\n+// 13.8. Vector Floating-Point Square-Root Instruction\n+DEF_RVV_FUNCTION (vfsqrt, alu, full_preds, f_v_ops)\n+\n+// 13.9. Vector Floating-Point Reciprocal Square-Root Estimate Instruction\n+DEF_RVV_FUNCTION (vfrsqrt7, alu, full_preds, f_v_ops)\n+\n+// 13.10. Vector Floating-Point Reciprocal Estimate Instruction\n+DEF_RVV_FUNCTION (vfrec7, alu, full_preds, f_v_ops)\n+\n+// 13.11. Vector Floating-Point MIN/MAX Instructions\n+DEF_RVV_FUNCTION (vfmin, alu, full_preds, f_vvv_ops)\n+DEF_RVV_FUNCTION (vfmin, alu, full_preds, f_vvf_ops)\n+DEF_RVV_FUNCTION (vfmax, alu, full_preds, f_vvv_ops)\n+DEF_RVV_FUNCTION (vfmax, alu, full_preds, f_vvf_ops)\n+\n+// 13.12. Vector Floating-Point Sign-Injection Instructions\n+DEF_RVV_FUNCTION (vfsgnj, alu, full_preds, f_vvv_ops)\n+DEF_RVV_FUNCTION (vfsgnj, alu, full_preds, f_vvf_ops)\n+DEF_RVV_FUNCTION (vfsgnjn, alu, full_preds, f_vvv_ops)\n+DEF_RVV_FUNCTION (vfsgnjn, alu, full_preds, f_vvf_ops)\n+DEF_RVV_FUNCTION (vfsgnjx, alu, full_preds, f_vvv_ops)\n+DEF_RVV_FUNCTION (vfsgnjx, alu, full_preds, f_vvf_ops)\n+DEF_RVV_FUNCTION (vfneg, alu, full_preds, f_v_ops)\n+DEF_RVV_FUNCTION (vfabs, alu, full_preds, f_v_ops)\n+\n+// 13.13. Vector Floating-Point Compare Instructions\n+DEF_RVV_FUNCTION (vmfeq, return_mask, none_m_mu_preds, f_mvv_ops)\n+DEF_RVV_FUNCTION (vmfeq, return_mask, none_m_mu_preds, f_mvf_ops)\n+DEF_RVV_FUNCTION (vmfne, return_mask, none_m_mu_preds, f_mvv_ops)\n+DEF_RVV_FUNCTION (vmfne, return_mask, none_m_mu_preds, f_mvf_ops)\n+DEF_RVV_FUNCTION (vmflt, return_mask, none_m_mu_preds, f_mvv_ops)\n+DEF_RVV_FUNCTION (vmflt, return_mask, none_m_mu_preds, f_mvf_ops)\n+DEF_RVV_FUNCTION (vmfle, return_mask, none_m_mu_preds, f_mvv_ops)\n+DEF_RVV_FUNCTION (vmfle, return_mask, none_m_mu_preds, f_mvf_ops)\n+DEF_RVV_FUNCTION (vmfgt, return_mask, none_m_mu_preds, f_mvv_ops)\n+DEF_RVV_FUNCTION (vmfgt, return_mask, none_m_mu_preds, f_mvf_ops)\n+DEF_RVV_FUNCTION (vmfge, return_mask, none_m_mu_preds, f_mvv_ops)\n+DEF_RVV_FUNCTION (vmfge, return_mask, none_m_mu_preds, f_mvf_ops)\n+\n+// 13.14. Vector Floating-Point Classify Instruction\n+DEF_RVV_FUNCTION (vfclass, alu, full_preds, f_to_u_v_ops)\n+\n+// 13.15. Vector Floating-Point Merge Instruction\n+DEF_RVV_FUNCTION (vfmerge, no_mask_policy, none_tu_preds, f_vvfm_ops)\n+\n+// 13.16. Vector Floating-Point Move Instruction\n+DEF_RVV_FUNCTION (vfmv_v, move, none_tu_preds, f_f_ops)\n+\n+// 13.17. Single-Width Floating-Point/Integer Type-Convert Instructions\n+DEF_RVV_FUNCTION (vfcvt_x, alu, full_preds, f_to_i_f_v_ops)\n+DEF_RVV_FUNCTION (vfcvt_xu, alu, full_preds, f_to_u_f_v_ops)\n+DEF_RVV_FUNCTION (vfcvt_rtz_x, alu, full_preds, f_to_i_f_v_ops)\n+DEF_RVV_FUNCTION (vfcvt_rtz_xu, alu, full_preds, f_to_u_f_v_ops)\n+DEF_RVV_FUNCTION (vfcvt_f, alu, full_preds, i_to_f_x_v_ops)\n+DEF_RVV_FUNCTION (vfcvt_f, alu, full_preds, u_to_f_xu_v_ops)\n+\n+// 13.18. Widening Floating-Point/Integer Type-Convert Instructions\n+DEF_RVV_FUNCTION (vfwcvt_x, alu, full_preds, f_to_wi_f_v_ops)\n+DEF_RVV_FUNCTION (vfwcvt_xu, alu, full_preds, f_to_wu_f_v_ops)\n+DEF_RVV_FUNCTION (vfwcvt_rtz_x, alu, full_preds, f_to_wi_f_v_ops)\n+DEF_RVV_FUNCTION (vfwcvt_rtz_xu, alu, full_preds, f_to_wu_f_v_ops)\n+DEF_RVV_FUNCTION (vfwcvt_f, alu, full_preds, i_to_wf_x_v_ops)\n+DEF_RVV_FUNCTION (vfwcvt_f, alu, full_preds, u_to_wf_xu_v_ops)\n+DEF_RVV_FUNCTION (vfwcvt_f, alu, full_preds, f_to_wf_f_v_ops)\n+\n+// 13.19. Narrowing Floating-Point/Integer Type-Convert Instructions\n+DEF_RVV_FUNCTION (vfncvt_x, narrow_alu, full_preds, f_to_ni_f_w_ops)\n+DEF_RVV_FUNCTION (vfncvt_xu, narrow_alu, full_preds, f_to_nu_f_w_ops)\n+DEF_RVV_FUNCTION (vfncvt_rtz_x, narrow_alu, full_preds, f_to_ni_f_w_ops)\n+DEF_RVV_FUNCTION (vfncvt_rtz_xu, narrow_alu, full_preds, f_to_nu_f_w_ops)\n+DEF_RVV_FUNCTION (vfncvt_f, narrow_alu, full_preds, i_to_nf_x_w_ops)\n+DEF_RVV_FUNCTION (vfncvt_f, narrow_alu, full_preds, u_to_nf_xu_w_ops)\n+DEF_RVV_FUNCTION (vfncvt_f, narrow_alu, full_preds, f_to_nf_f_w_ops)\n+DEF_RVV_FUNCTION (vfncvt_rod_f, narrow_alu, full_preds, f_to_nf_f_w_ops)\n+\n+/* 14. Vector Reduction Operations.  */\n+\n+// 14.1. Vector Single-Width Integer Reduction Instructions\n+DEF_RVV_FUNCTION (vredsum, reduc_alu, no_mu_preds, iu_vs_ops)\n+DEF_RVV_FUNCTION (vredmaxu, reduc_alu, no_mu_preds, iu_vs_ops)\n+DEF_RVV_FUNCTION (vredmax, reduc_alu, no_mu_preds, iu_vs_ops)\n+DEF_RVV_FUNCTION (vredminu, reduc_alu, no_mu_preds, iu_vs_ops)\n+DEF_RVV_FUNCTION (vredmin, reduc_alu, no_mu_preds, iu_vs_ops)\n+DEF_RVV_FUNCTION (vredand, reduc_alu, no_mu_preds, iu_vs_ops)\n+DEF_RVV_FUNCTION (vredor, reduc_alu, no_mu_preds, iu_vs_ops)\n+DEF_RVV_FUNCTION (vredxor, reduc_alu, no_mu_preds, iu_vs_ops)\n+\n+// 14.2. Vector Widening Integer Reduction Instructions\n+DEF_RVV_FUNCTION (vwredsum, reduc_alu, no_mu_preds, wi_vs_ops)\n+DEF_RVV_FUNCTION (vwredsumu, reduc_alu, no_mu_preds, wu_vs_ops)\n+\n+// 14.3. Vector Single-Width Floating-Point Reduction Instructions\n+DEF_RVV_FUNCTION (vfredusum, reduc_alu, no_mu_preds, f_vs_ops)\n+DEF_RVV_FUNCTION (vfredosum, reduc_alu, no_mu_preds, f_vs_ops)\n+DEF_RVV_FUNCTION (vfredmax, reduc_alu, no_mu_preds, f_vs_ops)\n+DEF_RVV_FUNCTION (vfredmin, reduc_alu, no_mu_preds, f_vs_ops)\n+\n+// 14.4. Vector Widening Floating-Point Reduction Instructions\n+DEF_RVV_FUNCTION (vfwredosum, reduc_alu, no_mu_preds, wf_vs_ops)\n+DEF_RVV_FUNCTION (vfwredusum, reduc_alu, no_mu_preds, wf_vs_ops)\n \n /* 15. Vector Mask Instructions.  */\n "}, {"sha": "b3f5951087d7fe4733ac272b0ada5d71f9b6e11d", "filename": "gcc/config/riscv/riscv-vector-builtins-shapes.cc", "status": "modified", "additions": 36, "deletions": 17, "changes": 53, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ee85b3255d638fd77ee3fe17a4e146c81545efb/gcc%2Fconfig%2Friscv%2Friscv-vector-builtins-shapes.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ee85b3255d638fd77ee3fe17a4e146c81545efb/gcc%2Fconfig%2Friscv%2Friscv-vector-builtins-shapes.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Friscv%2Friscv-vector-builtins-shapes.cc?ref=6ee85b3255d638fd77ee3fe17a4e146c81545efb", "patch": "@@ -197,22 +197,12 @@ struct alu_def : public build_base\n \n     b.append_base_name (instance.base_name);\n \n-    /* vop<sew> --> vop<sew>_<op>. According to rvv-intrinsic-doc, _vv/_vx/_v\n-       API doesn't have OP suffix in overloaded function name, otherwise, we\n-       always append OP suffix in function name. For example, vsext_vf2.  */\n-    if (instance.op_info->op == OP_TYPE_vv || instance.op_info->op == OP_TYPE_vx\n-\t|| instance.op_info->op == OP_TYPE_v\n-\t|| instance.op_info->op == OP_TYPE_x_v)\n-      {\n-\tif (!overloaded_p)\n-\t  b.append_name (operand_suffixes[instance.op_info->op]);\n-      }\n-    else\n-      b.append_name (operand_suffixes[instance.op_info->op]);\n-\n     /* vop<sew>_<op> --> vop<sew>_<op>_<type>.  */\n     if (!overloaded_p)\n-      b.append_name (type_suffixes[instance.type.index].vector);\n+      {\n+\tb.append_name (operand_suffixes[instance.op_info->op]);\n+\tb.append_name (type_suffixes[instance.type.index].vector);\n+      }\n \n     /* According to rvv-intrinsic-doc, it does not add \"_m\" suffix\n        for vop_m C++ overloaded API.  */\n@@ -333,9 +323,9 @@ struct move_def : public build_base\n   char *get_name (function_builder &b, const function_instance &instance,\n \t\t  bool overloaded_p) const override\n   {\n-    /* vmv.v.x (PRED_none) can not be overloaded.  */\n-    if (instance.op_info->op == OP_TYPE_x && overloaded_p\n-\t&& instance.pred == PRED_TYPE_none)\n+    /* vmv.v.x/vfmv.v.f (PRED_none) can not be overloaded.  */\n+    if ((instance.op_info->op == OP_TYPE_x || instance.op_info->op == OP_TYPE_f)\n+\t&& overloaded_p && instance.pred == PRED_TYPE_none)\n       return nullptr;\n \n     b.append_base_name (instance.base_name);\n@@ -384,6 +374,34 @@ struct mask_alu_def : public build_base\n   }\n };\n \n+/* reduc_alu_def class.  */\n+struct reduc_alu_def : public build_base\n+{\n+  char *get_name (function_builder &b, const function_instance &instance,\n+\t\t  bool overloaded_p) const override\n+  {\n+    b.append_base_name (instance.base_name);\n+\n+    /* vop_<op> --> vop<sew>_<op>_<type>.  */\n+    if (!overloaded_p)\n+      {\n+\tb.append_name (operand_suffixes[instance.op_info->op]);\n+\tb.append_name (type_suffixes[instance.type.index].vector);\n+\tvector_type_index ret_type_idx\n+\t  = instance.op_info->ret.get_base_vector_type (\n+\t    builtin_types[instance.type.index].vector);\n+\tb.append_name (type_suffixes[ret_type_idx].vector);\n+      }\n+\n+    /* According to rvv-intrinsic-doc, it does not add \"_m\" suffix\n+       for vop_m C++ overloaded API.  */\n+    if (overloaded_p && instance.pred == PRED_TYPE_m)\n+      return b.finish_name ();\n+    b.append_name (predication_suffixes[instance.pred]);\n+    return b.finish_name ();\n+  }\n+};\n+\n SHAPE(vsetvl, vsetvl)\n SHAPE(vsetvl, vsetvlmax)\n SHAPE(loadstore, loadstore)\n@@ -395,5 +413,6 @@ SHAPE(return_mask, return_mask)\n SHAPE(narrow_alu, narrow_alu)\n SHAPE(move, move)\n SHAPE(mask_alu, mask_alu)\n+SHAPE(reduc_alu, reduc_alu)\n \n } // end namespace riscv_vector"}, {"sha": "85769ea024ab224eecd10871edcc051f22d16cac", "filename": "gcc/config/riscv/riscv-vector-builtins-shapes.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ee85b3255d638fd77ee3fe17a4e146c81545efb/gcc%2Fconfig%2Friscv%2Friscv-vector-builtins-shapes.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ee85b3255d638fd77ee3fe17a4e146c81545efb/gcc%2Fconfig%2Friscv%2Friscv-vector-builtins-shapes.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Friscv%2Friscv-vector-builtins-shapes.h?ref=6ee85b3255d638fd77ee3fe17a4e146c81545efb", "patch": "@@ -35,6 +35,7 @@ extern const function_shape *const return_mask;\n extern const function_shape *const narrow_alu;\n extern const function_shape *const move;\n extern const function_shape *const mask_alu;\n+extern const function_shape *const reduc_alu;\n }\n \n } // end namespace riscv_vector"}, {"sha": "a15e54c15720fad9452b690d6fd78a7cdc104f32", "filename": "gcc/config/riscv/riscv-vector-builtins-types.def", "status": "modified", "additions": 152, "deletions": 0, "changes": 152, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ee85b3255d638fd77ee3fe17a4e146c81545efb/gcc%2Fconfig%2Friscv%2Friscv-vector-builtins-types.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ee85b3255d638fd77ee3fe17a4e146c81545efb/gcc%2Fconfig%2Friscv%2Friscv-vector-builtins-types.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Friscv%2Friscv-vector-builtins-types.def?ref=6ee85b3255d638fd77ee3fe17a4e146c81545efb", "patch": "@@ -92,6 +92,65 @@ along with GCC; see the file COPYING3. If not see\n #define DEF_RVV_FULL_V_U_OPS(TYPE, REQUIRE)\n #endif\n \n+/* Use \"DEF_RVV_WEXTF_OPS\" macro include Double-Widening float which\n+   will be iterated and registered as intrinsic functions.  */\n+#ifndef DEF_RVV_WEXTF_OPS\n+#define DEF_RVV_WEXTF_OPS(TYPE, REQUIRE)\n+#endif\n+\n+/* Use \"DEF_RVV_CONVERT_I_OPS\" macro include all integer that will be converted\n+   in the float with same nunits which will be iterated and registered as\n+   intrinsic functions.  */\n+#ifndef DEF_RVV_CONVERT_I_OPS\n+#define DEF_RVV_CONVERT_I_OPS(TYPE, REQUIRE)\n+#endif\n+\n+/* Use \"DEF_RVV_CONVERT_U_OPS\" macro include all unsigned integer that will be\n+   converted in the float with same nunits which will be iterated and registered\n+   as intrinsic functions.  */\n+#ifndef DEF_RVV_CONVERT_U_OPS\n+#define DEF_RVV_CONVERT_U_OPS(TYPE, REQUIRE)\n+#endif\n+\n+/* Use \"DEF_RVV_WCONVERT_I_OPS\" macro include all integer that will be widen\n+   converted in the float with same nunits which will be iterated and registered\n+   as intrinsic functions.  */\n+#ifndef DEF_RVV_WCONVERT_I_OPS\n+#define DEF_RVV_WCONVERT_I_OPS(TYPE, REQUIRE)\n+#endif\n+\n+/* Use \"DEF_RVV_WCONVERT_U_OPS\" macro include all unsigned integer that will be\n+   widen converted in the float with same nunits which will be iterated and\n+   registered as intrinsic functions.  */\n+#ifndef DEF_RVV_WCONVERT_U_OPS\n+#define DEF_RVV_WCONVERT_U_OPS(TYPE, REQUIRE)\n+#endif\n+\n+/* Use \"DEF_RVV_WCONVERT_F_OPS\" macro include all unsigned integer that will be\n+   widen converted in the float with same nunits which will be iterated and\n+   registered as intrinsic functions.  */\n+#ifndef DEF_RVV_WCONVERT_F_OPS\n+#define DEF_RVV_WCONVERT_F_OPS(TYPE, REQUIRE)\n+#endif\n+\n+/* Use \"DEF_RVV_WI_OPS\" macro include all signed integer can be widened which\n+   will be iterated and registered as intrinsic functions.  */\n+#ifndef DEF_RVV_WI_OPS\n+#define DEF_RVV_WI_OPS(TYPE, REQUIRE)\n+#endif\n+\n+/* Use \"DEF_RVV_WU_OPS\" macro include all unsigned integer can be widened which\n+   will be iterated and registered as intrinsic functions.  */\n+#ifndef DEF_RVV_WU_OPS\n+#define DEF_RVV_WU_OPS(TYPE, REQUIRE)\n+#endif\n+\n+/* Use \"DEF_RVV_WF_OPS\" macro include all floating-point can be widened which\n+   will be iterated and registered as intrinsic functions.  */\n+#ifndef DEF_RVV_WF_OPS\n+#define DEF_RVV_WF_OPS(TYPE, REQUIRE)\n+#endif\n+\n DEF_RVV_I_OPS (vint8mf8_t, RVV_REQUIRE_ZVE64)\n DEF_RVV_I_OPS (vint8mf4_t, 0)\n DEF_RVV_I_OPS (vint8mf2_t, 0)\n@@ -264,6 +323,90 @@ DEF_RVV_FULL_V_U_OPS (vuint64m2_t, RVV_REQUIRE_FULL_V)\n DEF_RVV_FULL_V_U_OPS (vuint64m4_t, RVV_REQUIRE_FULL_V)\n DEF_RVV_FULL_V_U_OPS (vuint64m8_t, RVV_REQUIRE_FULL_V)\n \n+DEF_RVV_WEXTF_OPS (vfloat64m1_t, RVV_REQUIRE_ELEN_FP_64)\n+DEF_RVV_WEXTF_OPS (vfloat64m2_t, RVV_REQUIRE_ELEN_FP_64)\n+DEF_RVV_WEXTF_OPS (vfloat64m4_t, RVV_REQUIRE_ELEN_FP_64)\n+DEF_RVV_WEXTF_OPS (vfloat64m8_t, RVV_REQUIRE_ELEN_FP_64)\n+\n+DEF_RVV_CONVERT_I_OPS (vint32mf2_t, RVV_REQUIRE_ZVE64)\n+DEF_RVV_CONVERT_I_OPS (vint32m1_t, 0)\n+DEF_RVV_CONVERT_I_OPS (vint32m2_t, 0)\n+DEF_RVV_CONVERT_I_OPS (vint32m4_t, 0)\n+DEF_RVV_CONVERT_I_OPS (vint32m8_t, 0)\n+DEF_RVV_CONVERT_I_OPS (vint64m1_t, RVV_REQUIRE_ZVE64)\n+DEF_RVV_CONVERT_I_OPS (vint64m2_t, RVV_REQUIRE_ZVE64)\n+DEF_RVV_CONVERT_I_OPS (vint64m4_t, RVV_REQUIRE_ZVE64)\n+DEF_RVV_CONVERT_I_OPS (vint64m8_t, RVV_REQUIRE_ZVE64)\n+\n+DEF_RVV_CONVERT_U_OPS (vuint32mf2_t, RVV_REQUIRE_ZVE64)\n+DEF_RVV_CONVERT_U_OPS (vuint32m1_t, 0)\n+DEF_RVV_CONVERT_U_OPS (vuint32m2_t, 0)\n+DEF_RVV_CONVERT_U_OPS (vuint32m4_t, 0)\n+DEF_RVV_CONVERT_U_OPS (vuint32m8_t, 0)\n+DEF_RVV_CONVERT_U_OPS (vuint64m1_t, RVV_REQUIRE_ZVE64)\n+DEF_RVV_CONVERT_U_OPS (vuint64m2_t, RVV_REQUIRE_ZVE64)\n+DEF_RVV_CONVERT_U_OPS (vuint64m4_t, RVV_REQUIRE_ZVE64)\n+DEF_RVV_CONVERT_U_OPS (vuint64m8_t, RVV_REQUIRE_ZVE64)\n+\n+DEF_RVV_WCONVERT_I_OPS (vint64m1_t, RVV_REQUIRE_ELEN_FP_32 | RVV_REQUIRE_ZVE64)\n+DEF_RVV_WCONVERT_I_OPS (vint64m2_t, RVV_REQUIRE_ELEN_FP_32 | RVV_REQUIRE_ZVE64)\n+DEF_RVV_WCONVERT_I_OPS (vint64m4_t, RVV_REQUIRE_ELEN_FP_32 | RVV_REQUIRE_ZVE64)\n+DEF_RVV_WCONVERT_I_OPS (vint64m8_t, RVV_REQUIRE_ELEN_FP_32 | RVV_REQUIRE_ZVE64)\n+\n+DEF_RVV_WCONVERT_U_OPS (vuint64m1_t, RVV_REQUIRE_ELEN_FP_32 | RVV_REQUIRE_ZVE64)\n+DEF_RVV_WCONVERT_U_OPS (vuint64m2_t, RVV_REQUIRE_ELEN_FP_32 | RVV_REQUIRE_ZVE64)\n+DEF_RVV_WCONVERT_U_OPS (vuint64m4_t, RVV_REQUIRE_ELEN_FP_32 | RVV_REQUIRE_ZVE64)\n+DEF_RVV_WCONVERT_U_OPS (vuint64m8_t, RVV_REQUIRE_ELEN_FP_32 | RVV_REQUIRE_ZVE64)\n+\n+DEF_RVV_WCONVERT_F_OPS (vfloat64m1_t, RVV_REQUIRE_ELEN_FP_64)\n+DEF_RVV_WCONVERT_F_OPS (vfloat64m2_t, RVV_REQUIRE_ELEN_FP_64)\n+DEF_RVV_WCONVERT_F_OPS (vfloat64m4_t, RVV_REQUIRE_ELEN_FP_64)\n+DEF_RVV_WCONVERT_F_OPS (vfloat64m8_t, RVV_REQUIRE_ELEN_FP_64)\n+\n+DEF_RVV_WI_OPS (vint8mf8_t, RVV_REQUIRE_ZVE64)\n+DEF_RVV_WI_OPS (vint8mf4_t, 0)\n+DEF_RVV_WI_OPS (vint8mf2_t, 0)\n+DEF_RVV_WI_OPS (vint8m1_t, 0)\n+DEF_RVV_WI_OPS (vint8m2_t, 0)\n+DEF_RVV_WI_OPS (vint8m4_t, 0)\n+DEF_RVV_WI_OPS (vint8m8_t, 0)\n+DEF_RVV_WI_OPS (vint16mf4_t, RVV_REQUIRE_ZVE64)\n+DEF_RVV_WI_OPS (vint16mf2_t, 0)\n+DEF_RVV_WI_OPS (vint16m1_t, 0)\n+DEF_RVV_WI_OPS (vint16m2_t, 0)\n+DEF_RVV_WI_OPS (vint16m4_t, 0)\n+DEF_RVV_WI_OPS (vint16m8_t, 0)\n+DEF_RVV_WI_OPS (vint32mf2_t, RVV_REQUIRE_ZVE64)\n+DEF_RVV_WI_OPS (vint32m1_t, 0)\n+DEF_RVV_WI_OPS (vint32m2_t, 0)\n+DEF_RVV_WI_OPS (vint32m4_t, 0)\n+DEF_RVV_WI_OPS (vint32m8_t, 0)\n+\n+DEF_RVV_WU_OPS (vuint8mf8_t, RVV_REQUIRE_ZVE64)\n+DEF_RVV_WU_OPS (vuint8mf4_t, 0)\n+DEF_RVV_WU_OPS (vuint8mf2_t, 0)\n+DEF_RVV_WU_OPS (vuint8m1_t, 0)\n+DEF_RVV_WU_OPS (vuint8m2_t, 0)\n+DEF_RVV_WU_OPS (vuint8m4_t, 0)\n+DEF_RVV_WU_OPS (vuint8m8_t, 0)\n+DEF_RVV_WU_OPS (vuint16mf4_t, RVV_REQUIRE_ZVE64)\n+DEF_RVV_WU_OPS (vuint16mf2_t, 0)\n+DEF_RVV_WU_OPS (vuint16m1_t, 0)\n+DEF_RVV_WU_OPS (vuint16m2_t, 0)\n+DEF_RVV_WU_OPS (vuint16m4_t, 0)\n+DEF_RVV_WU_OPS (vuint16m8_t, 0)\n+DEF_RVV_WU_OPS (vuint32mf2_t, RVV_REQUIRE_ZVE64)\n+DEF_RVV_WU_OPS (vuint32m1_t, 0)\n+DEF_RVV_WU_OPS (vuint32m2_t, 0)\n+DEF_RVV_WU_OPS (vuint32m4_t, 0)\n+DEF_RVV_WU_OPS (vuint32m8_t, 0)\n+\n+DEF_RVV_WF_OPS (vfloat32mf2_t, RVV_REQUIRE_ELEN_FP_32 | RVV_REQUIRE_ZVE64)\n+DEF_RVV_WF_OPS (vfloat32m1_t, RVV_REQUIRE_ELEN_FP_32)\n+DEF_RVV_WF_OPS (vfloat32m2_t, RVV_REQUIRE_ELEN_FP_32)\n+DEF_RVV_WF_OPS (vfloat32m4_t, RVV_REQUIRE_ELEN_FP_32)\n+DEF_RVV_WF_OPS (vfloat32m8_t, RVV_REQUIRE_ELEN_FP_32)\n+\n #undef DEF_RVV_I_OPS\n #undef DEF_RVV_U_OPS\n #undef DEF_RVV_F_OPS\n@@ -276,3 +419,12 @@ DEF_RVV_FULL_V_U_OPS (vuint64m8_t, RVV_REQUIRE_FULL_V)\n #undef DEF_RVV_OEXTU_OPS\n #undef DEF_RVV_FULL_V_I_OPS\n #undef DEF_RVV_FULL_V_U_OPS\n+#undef DEF_RVV_WEXTF_OPS\n+#undef DEF_RVV_CONVERT_I_OPS\n+#undef DEF_RVV_CONVERT_U_OPS\n+#undef DEF_RVV_WCONVERT_I_OPS\n+#undef DEF_RVV_WCONVERT_U_OPS\n+#undef DEF_RVV_WCONVERT_F_OPS\n+#undef DEF_RVV_WI_OPS\n+#undef DEF_RVV_WU_OPS\n+#undef DEF_RVV_WF_OPS"}, {"sha": "2e92ece3b645f1535bcedb8d280ec11d9baac80c", "filename": "gcc/config/riscv/riscv-vector-builtins.cc", "status": "modified", "additions": 464, "deletions": 34, "changes": 498, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ee85b3255d638fd77ee3fe17a4e146c81545efb/gcc%2Fconfig%2Friscv%2Friscv-vector-builtins.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ee85b3255d638fd77ee3fe17a4e146c81545efb/gcc%2Fconfig%2Friscv%2Friscv-vector-builtins.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Friscv%2Friscv-vector-builtins.cc?ref=6ee85b3255d638fd77ee3fe17a4e146c81545efb", "patch": "@@ -133,6 +133,27 @@ static const rvv_type_info i_ops[] = {\n #include \"riscv-vector-builtins-types.def\"\n   {NUM_VECTOR_TYPES, 0}};\n \n+/* A list of all signed integer can be widened will be registered for intrinsic\n+ * functions.  */\n+static const rvv_type_info wi_ops[] = {\n+#define DEF_RVV_WI_OPS(TYPE, REQUIRE) {VECTOR_TYPE_##TYPE, REQUIRE},\n+#include \"riscv-vector-builtins-types.def\"\n+  {NUM_VECTOR_TYPES, 0}};\n+\n+/* A list of all unsigned integer can be widened will be registered for\n+ * intrinsic functions.  */\n+static const rvv_type_info wu_ops[] = {\n+#define DEF_RVV_WU_OPS(TYPE, REQUIRE) {VECTOR_TYPE_##TYPE, REQUIRE},\n+#include \"riscv-vector-builtins-types.def\"\n+  {NUM_VECTOR_TYPES, 0}};\n+\n+/* A list of all floating-point can be widened will be registered for intrinsic\n+ * functions.  */\n+static const rvv_type_info wf_ops[] = {\n+#define DEF_RVV_WF_OPS(TYPE, REQUIRE) {VECTOR_TYPE_##TYPE, REQUIRE},\n+#include \"riscv-vector-builtins-types.def\"\n+  {NUM_VECTOR_TYPES, 0}};\n+\n /* A list of all signed integer that SEW = 64 require full 'V' extension will be\n    registered for intrinsic functions.  */\n static const rvv_type_info full_v_i_ops[] = {\n@@ -147,12 +168,42 @@ static const rvv_type_info full_v_u_ops[] = {\n #include \"riscv-vector-builtins-types.def\"\n   {NUM_VECTOR_TYPES, 0}};\n \n-/* A list of all signed integer will be registered for intrinsic functions.  */\n+/* A list of all unsigned integer will be registered for intrinsic functions.  */\n static const rvv_type_info u_ops[] = {\n #define DEF_RVV_U_OPS(TYPE, REQUIRE) {VECTOR_TYPE_##TYPE, REQUIRE},\n #include \"riscv-vector-builtins-types.def\"\n   {NUM_VECTOR_TYPES, 0}};\n \n+/* A list of all signed integer will be registered for intrinsic functions.  */\n+static const rvv_type_info convert_i_ops[] = {\n+#define DEF_RVV_CONVERT_I_OPS(TYPE, REQUIRE) {VECTOR_TYPE_##TYPE, REQUIRE},\n+#include \"riscv-vector-builtins-types.def\"\n+  {NUM_VECTOR_TYPES, 0}};\n+\n+/* A list of all unsigned integer will be registered for intrinsic functions.  */\n+static const rvv_type_info convert_u_ops[] = {\n+#define DEF_RVV_CONVERT_U_OPS(TYPE, REQUIRE) {VECTOR_TYPE_##TYPE, REQUIRE},\n+#include \"riscv-vector-builtins-types.def\"\n+  {NUM_VECTOR_TYPES, 0}};\n+\n+/* A list of all signed integer will be registered for intrinsic functions.  */\n+static const rvv_type_info wconvert_i_ops[] = {\n+#define DEF_RVV_WCONVERT_I_OPS(TYPE, REQUIRE) {VECTOR_TYPE_##TYPE, REQUIRE},\n+#include \"riscv-vector-builtins-types.def\"\n+  {NUM_VECTOR_TYPES, 0}};\n+\n+/* A list of all unsigned integer will be registered for intrinsic functions. */\n+static const rvv_type_info wconvert_u_ops[] = {\n+#define DEF_RVV_WCONVERT_U_OPS(TYPE, REQUIRE) {VECTOR_TYPE_##TYPE, REQUIRE},\n+#include \"riscv-vector-builtins-types.def\"\n+  {NUM_VECTOR_TYPES, 0}};\n+\n+/* A list of all floating-point will be registered for intrinsic functions. */\n+static const rvv_type_info wconvert_f_ops[] = {\n+#define DEF_RVV_WCONVERT_F_OPS(TYPE, REQUIRE) {VECTOR_TYPE_##TYPE, REQUIRE},\n+#include \"riscv-vector-builtins-types.def\"\n+  {NUM_VECTOR_TYPES, 0}};\n+\n /* A list of all integer will be registered for intrinsic functions.  */\n static const rvv_type_info iu_ops[] = {\n #define DEF_RVV_I_OPS(TYPE, REQUIRE) {VECTOR_TYPE_##TYPE, REQUIRE},\n@@ -174,13 +225,26 @@ static const rvv_type_info b_ops[] = {\n #include \"riscv-vector-builtins-types.def\"\n   {NUM_VECTOR_TYPES, 0}};\n \n+/* A list of all float will be registered for intrinsic functions.  */\n+static const rvv_type_info f_ops[] = {\n+#define DEF_RVV_F_OPS(TYPE, REQUIRE) {VECTOR_TYPE_##TYPE, REQUIRE},\n+#include \"riscv-vector-builtins-types.def\"\n+  {NUM_VECTOR_TYPES, 0}};\n+\n /* A list of Double-Widening signed integer will be registered for intrinsic\n  * functions.  */\n static const rvv_type_info wexti_ops[] = {\n #define DEF_RVV_WEXTI_OPS(TYPE, REQUIRE) {VECTOR_TYPE_##TYPE, REQUIRE},\n #include \"riscv-vector-builtins-types.def\"\n   {NUM_VECTOR_TYPES, 0}};\n \n+/* A list of Double-Widening float will be registered for intrinsic functions.\n+ */\n+static const rvv_type_info wextf_ops[] = {\n+#define DEF_RVV_WEXTF_OPS(TYPE, REQUIRE) {VECTOR_TYPE_##TYPE, REQUIRE},\n+#include \"riscv-vector-builtins-types.def\"\n+  {NUM_VECTOR_TYPES, 0}};\n+\n /* A list of Quad-Widening signed integer will be registered for intrinsic\n  * functions.  */\n static const rvv_type_info qexti_ops[] = {\n@@ -375,6 +439,30 @@ static CONSTEXPR const rvv_arg_type_info shift_wv_args[]\n static CONSTEXPR const rvv_arg_type_info v_args[]\n   = {rvv_arg_type_info (RVV_BASE_vector), rvv_arg_type_info_end};\n \n+/* A list of args for vector_type func (vector_type, lmul1_type) function.  */\n+static CONSTEXPR const rvv_arg_type_info vs_args[]\n+  = {rvv_arg_type_info (RVV_BASE_vector),\n+     rvv_arg_type_info (RVV_BASE_lmul1_vector), rvv_arg_type_info_end};\n+\n+/* A list of args for vector_type func (vector_type, widen_lmul1_type) function.\n+ */\n+static CONSTEXPR const rvv_arg_type_info wvs_args[]\n+  = {rvv_arg_type_info (RVV_BASE_vector),\n+     rvv_arg_type_info (RVV_BASE_widen_lmul1_vector), rvv_arg_type_info_end};\n+\n+/* A list of args for vector_type func (vector_type) function.  */\n+static CONSTEXPR const rvv_arg_type_info f_v_args[]\n+  = {rvv_arg_type_info (RVV_BASE_float_vector), rvv_arg_type_info_end};\n+\n+/* A list of args for vector_type func (vector_type) function.  */\n+static CONSTEXPR const rvv_arg_type_info trunc_f_v_args[]\n+  = {rvv_arg_type_info (RVV_BASE_double_trunc_float_vector),\n+     rvv_arg_type_info_end};\n+\n+/* A list of args for vector_type func (vector_type) function.  */\n+static CONSTEXPR const rvv_arg_type_info w_v_args[]\n+  = {rvv_arg_type_info (RVV_BASE_double_trunc_vector), rvv_arg_type_info_end};\n+\n /* A list of args for vector_type func (vector_type) function.  */\n static CONSTEXPR const rvv_arg_type_info m_args[]\n   = {rvv_arg_type_info (RVV_BASE_mask), rvv_arg_type_info_end};\n@@ -479,6 +567,24 @@ static CONSTEXPR const rvv_arg_type_info vf8_args[]\n static CONSTEXPR const rvv_arg_type_info x_x_v_args[]\n   = {rvv_arg_type_info (RVV_BASE_double_trunc_vector), rvv_arg_type_info_end};\n \n+/* A list of args for vector_type func (vector_type) function.  */\n+static CONSTEXPR const rvv_arg_type_info x_v_args[]\n+  = {rvv_arg_type_info (RVV_BASE_signed_vector), rvv_arg_type_info_end};\n+\n+/* A list of args for vector_type func (vector_type) function.  */\n+static CONSTEXPR const rvv_arg_type_info xu_v_args[]\n+  = {rvv_arg_type_info (RVV_BASE_unsigned_vector), rvv_arg_type_info_end};\n+\n+/* A list of args for vector_type func (vector_type) function.  */\n+static CONSTEXPR const rvv_arg_type_info w_x_v_args[]\n+  = {rvv_arg_type_info (RVV_BASE_double_trunc_signed_vector),\n+     rvv_arg_type_info_end};\n+\n+/* A list of args for vector_type func (vector_type) function.  */\n+static CONSTEXPR const rvv_arg_type_info w_xu_v_args[]\n+  = {rvv_arg_type_info (RVV_BASE_double_trunc_unsigned_vector),\n+     rvv_arg_type_info_end};\n+\n /* A list of none preds that will be registered for intrinsic functions.  */\n static CONSTEXPR const predication_type_index none_preds[]\n   = {PRED_TYPE_none, NUM_PRED_TYPES};\n@@ -488,6 +594,10 @@ static CONSTEXPR const predication_type_index full_preds[]\n   = {PRED_TYPE_none, PRED_TYPE_m,  PRED_TYPE_tu,  PRED_TYPE_tum,\n      PRED_TYPE_tumu, PRED_TYPE_mu, NUM_PRED_TYPES};\n \n+/* vop/vop_m/vop_tu/vop_tum/ will be registered.  */\n+static CONSTEXPR const predication_type_index no_mu_preds[]\n+  = {PRED_TYPE_none, PRED_TYPE_m, PRED_TYPE_tu, PRED_TYPE_tum, NUM_PRED_TYPES};\n+\n /* vop/vop_tu will be registered.  */\n static CONSTEXPR const predication_type_index none_tu_preds[]\n   = {PRED_TYPE_none, PRED_TYPE_tu, NUM_PRED_TYPES};\n@@ -707,6 +817,22 @@ static CONSTEXPR const rvv_op_info iu_vvxv_ops\n      rvv_arg_type_info (RVV_BASE_vector), /* Return type */\n      vxv_args /* Args */};\n \n+/* A static operand information for vector_type func (vector_type, vector_type,\n+ * vector_type) function registration. */\n+static CONSTEXPR const rvv_op_info f_vvvv_ops\n+  = {f_ops,\t\t\t\t  /* Types */\n+     OP_TYPE_vv,\t\t\t  /* Suffix */\n+     rvv_arg_type_info (RVV_BASE_vector), /* Return type */\n+     vvv_args /* Args */};\n+\n+/* A static operand information for vector_type func (vector_type, scalar_type,\n+ * vector_type) function registration. */\n+static CONSTEXPR const rvv_op_info f_vvfv_ops\n+  = {f_ops,\t\t\t\t  /* Types */\n+     OP_TYPE_vf,\t\t\t  /* Suffix */\n+     rvv_arg_type_info (RVV_BASE_vector), /* Return type */\n+     vxv_args /* Args */};\n+\n /* A static operand information for vector_type func (vector_type, vector_type,\n  * mask_type) function registration. */\n static CONSTEXPR const rvv_op_info iu_vvvm_ops\n@@ -731,6 +857,14 @@ static CONSTEXPR const rvv_op_info iu_vvxm_ops\n      rvv_arg_type_info (RVV_BASE_vector), /* Return type */\n      vxm_args /* Args */};\n \n+/* A static operand information for vector_type func (vector_type, scalar_type,\n+ * mask_type) function registration. */\n+static CONSTEXPR const rvv_op_info f_vvfm_ops\n+  = {f_ops,\t\t\t\t  /* Types */\n+     OP_TYPE_vfm,\t\t\t  /* Suffix */\n+     rvv_arg_type_info (RVV_BASE_vector), /* Return type */\n+     vxm_args /* Args */};\n+\n /* A static operand information for mask_type func (vector_type, vector_type,\n  * mask_type) function registration. */\n static CONSTEXPR const rvv_op_info iu_mvvm_ops\n@@ -771,6 +905,14 @@ static CONSTEXPR const rvv_op_info u_mvv_ops\n      rvv_arg_type_info (RVV_BASE_mask), /* Return type */\n      vv_args /* Args */};\n \n+/* A static operand information for mask_type func (vector_type, vector_type)\n+ * function registration. */\n+static CONSTEXPR const rvv_op_info f_mvv_ops\n+  = {f_ops,\t\t\t\t/* Types */\n+     OP_TYPE_vv,\t\t\t/* Suffix */\n+     rvv_arg_type_info (RVV_BASE_mask), /* Return type */\n+     vv_args /* Args */};\n+\n /* A static operand information for mask_type func (vector_type, scalar_type)\n  * function registration. */\n static CONSTEXPR const rvv_op_info iu_mvx_ops\n@@ -795,6 +937,14 @@ static CONSTEXPR const rvv_op_info u_mvx_ops\n      rvv_arg_type_info (RVV_BASE_mask), /* Return type */\n      vx_args /* Args */};\n \n+/* A static operand information for mask_type func (vector_type, scalar_type)\n+ * function registration. */\n+static CONSTEXPR const rvv_op_info f_mvf_ops\n+  = {f_ops,\t\t\t\t/* Types */\n+     OP_TYPE_vf,\t\t\t/* Suffix */\n+     rvv_arg_type_info (RVV_BASE_mask), /* Return type */\n+     vx_args /* Args */};\n+\n /* A static operand information for vector_type func (vector_type, vector_type)\n  * function registration. */\n static CONSTEXPR const rvv_op_info i_vvv_ops\n@@ -811,6 +961,22 @@ static CONSTEXPR const rvv_op_info u_vvv_ops\n      rvv_arg_type_info (RVV_BASE_vector), /* Return type */\n      vv_args /* Args */};\n \n+/* A static operand information for vector_type func (vector_type, vector_type)\n+ * function registration. */\n+static CONSTEXPR const rvv_op_info f_vvv_ops\n+  = {f_ops,\t\t\t\t/* Types */\n+     OP_TYPE_vv,\t\t\t/* Suffix */\n+     rvv_arg_type_info (RVV_BASE_vector), /* Return type */\n+     vv_args /* Args */};\n+\n+/* A static operand information for vector_type func (vector_type, vector_type)\n+ * function registration. */\n+static CONSTEXPR const rvv_op_info f_vvf_ops\n+  = {f_ops,\t\t\t\t/* Types */\n+     OP_TYPE_vf,\t\t\t/* Suffix */\n+     rvv_arg_type_info (RVV_BASE_vector), /* Return type */\n+     vx_args /* Args */};\n+\n /* A static operand information for vector_type func (vector_type, vector_type)\n  * function registration. */\n static CONSTEXPR const rvv_op_info full_v_i_vvv_ops\n@@ -940,6 +1106,175 @@ static CONSTEXPR const rvv_op_info iu_v_ops\n      rvv_arg_type_info (RVV_BASE_vector), /* Return type */\n      v_args /* Args */};\n \n+/* A static operand information for vector_type func (vector_type)\n+ * function registration. */\n+static CONSTEXPR const rvv_op_info iu_vs_ops\n+  = {iu_ops,\t\t\t\t\t/* Types */\n+     OP_TYPE_vs,\t\t\t\t/* Suffix */\n+     rvv_arg_type_info (RVV_BASE_lmul1_vector), /* Return type */\n+     vs_args /* Args */};\n+\n+/* A static operand information for vector_type func (vector_type)\n+ * function registration. */\n+static CONSTEXPR const rvv_op_info f_vs_ops\n+  = {f_ops,\t\t\t\t\t/* Types */\n+     OP_TYPE_vs,\t\t\t\t/* Suffix */\n+     rvv_arg_type_info (RVV_BASE_lmul1_vector), /* Return type */\n+     vs_args /* Args */};\n+\n+/* A static operand information for vector_type func (vector_type)\n+ * function registration. */\n+static CONSTEXPR const rvv_op_info wi_vs_ops\n+  = {wi_ops,\t\t\t\t\t      /* Types */\n+     OP_TYPE_vs,\t\t\t\t      /* Suffix */\n+     rvv_arg_type_info (RVV_BASE_widen_lmul1_vector), /* Return type */\n+     wvs_args /* Args */};\n+\n+/* A static operand information for vector_type func (vector_type)\n+ * function registration. */\n+static CONSTEXPR const rvv_op_info wu_vs_ops\n+  = {wu_ops,\t\t\t\t\t      /* Types */\n+     OP_TYPE_vs,\t\t\t\t      /* Suffix */\n+     rvv_arg_type_info (RVV_BASE_widen_lmul1_vector), /* Return type */\n+     wvs_args /* Args */};\n+\n+/* A static operand information for vector_type func (vector_type)\n+ * function registration. */\n+static CONSTEXPR const rvv_op_info wf_vs_ops\n+  = {wf_ops,\t\t\t\t\t      /* Types */\n+     OP_TYPE_vs,\t\t\t\t      /* Suffix */\n+     rvv_arg_type_info (RVV_BASE_widen_lmul1_vector), /* Return type */\n+     wvs_args /* Args */};\n+\n+/* A static operand information for vector_type func (vector_type)\n+ * function registration. */\n+static CONSTEXPR const rvv_op_info f_v_ops\n+  = {f_ops,\t\t\t\t  /* Types */\n+     OP_TYPE_v,\t\t\t\t  /* Suffix */\n+     rvv_arg_type_info (RVV_BASE_vector), /* Return type */\n+     v_args /* Args */};\n+\n+/* A static operand information for vector_type func (vector_type)\n+ * function registration. */\n+static CONSTEXPR const rvv_op_info f_to_u_v_ops\n+  = {convert_u_ops,\t\t\t  /* Types */\n+     OP_TYPE_v,\t\t\t\t  /* Suffix */\n+     rvv_arg_type_info (RVV_BASE_vector), /* Return type */\n+     f_v_args /* Args */};\n+\n+/* A static operand information for vector_type func (vector_type)\n+ * function registration. */\n+static CONSTEXPR const rvv_op_info f_to_i_f_v_ops\n+  = {convert_i_ops,\t\t\t  /* Types */\n+     OP_TYPE_f_v,\t\t\t  /* Suffix */\n+     rvv_arg_type_info (RVV_BASE_vector), /* Return type */\n+     f_v_args /* Args */};\n+\n+/* A static operand information for vector_type func (vector_type)\n+ * function registration. */\n+static CONSTEXPR const rvv_op_info f_to_wi_f_v_ops\n+  = {wconvert_i_ops,\t\t\t  /* Types */\n+     OP_TYPE_f_v,\t\t\t  /* Suffix */\n+     rvv_arg_type_info (RVV_BASE_vector), /* Return type */\n+     trunc_f_v_args /* Args */};\n+\n+/* A static operand information for vector_type func (vector_type)\n+ * function registration. */\n+static CONSTEXPR const rvv_op_info f_to_ni_f_w_ops\n+  = {f_ops,\t\t\t\t\t\t      /* Types */\n+     OP_TYPE_f_w,\t\t\t\t\t      /* Suffix */\n+     rvv_arg_type_info (RVV_BASE_double_trunc_signed_vector), /* Return type */\n+     v_args /* Args */};\n+\n+/* A static operand information for vector_type func (vector_type)\n+ * function registration. */\n+static CONSTEXPR const rvv_op_info f_to_nu_f_w_ops\n+  = {f_ops,\t  /* Types */\n+     OP_TYPE_f_w, /* Suffix */\n+     rvv_arg_type_info (\n+       RVV_BASE_double_trunc_unsigned_vector), /* Return type */\n+     v_args /* Args */};\n+\n+/* A static operand information for vector_type func (vector_type)\n+ * function registration. */\n+static CONSTEXPR const rvv_op_info i_to_f_x_v_ops\n+  = {f_ops,\t\t\t\t  /* Types */\n+     OP_TYPE_x_v,\t\t\t  /* Suffix */\n+     rvv_arg_type_info (RVV_BASE_vector), /* Return type */\n+     x_v_args /* Args */};\n+\n+/* A static operand information for vector_type func (vector_type)\n+ * function registration. */\n+static CONSTEXPR const rvv_op_info u_to_f_xu_v_ops\n+  = {f_ops,\t\t\t\t  /* Types */\n+     OP_TYPE_xu_v,\t\t\t  /* Suffix */\n+     rvv_arg_type_info (RVV_BASE_vector), /* Return type */\n+     xu_v_args /* Args */};\n+\n+/* A static operand information for vector_type func (vector_type)\n+ * function registration. */\n+static CONSTEXPR const rvv_op_info i_to_wf_x_v_ops\n+  = {f_ops,\t\t\t\t  /* Types */\n+     OP_TYPE_x_v,\t\t\t  /* Suffix */\n+     rvv_arg_type_info (RVV_BASE_vector), /* Return type */\n+     w_x_v_args /* Args */};\n+\n+/* A static operand information for vector_type func (vector_type)\n+ * function registration. */\n+static CONSTEXPR const rvv_op_info u_to_wf_xu_v_ops\n+  = {f_ops,\t\t\t\t  /* Types */\n+     OP_TYPE_xu_v,\t\t\t  /* Suffix */\n+     rvv_arg_type_info (RVV_BASE_vector), /* Return type */\n+     w_xu_v_args /* Args */};\n+\n+/* A static operand information for vector_type func (vector_type)\n+ * function registration. */\n+static CONSTEXPR const rvv_op_info i_to_nf_x_w_ops\n+  = {wconvert_i_ops,\t\t\t\t\t     /* Types */\n+     OP_TYPE_x_w,\t\t\t\t\t     /* Suffix */\n+     rvv_arg_type_info (RVV_BASE_double_trunc_float_vector), /* Return type */\n+     v_args /* Args */};\n+\n+/* A static operand information for vector_type func (vector_type)\n+ * function registration. */\n+static CONSTEXPR const rvv_op_info u_to_nf_xu_w_ops\n+  = {wconvert_u_ops,\t\t\t\t\t     /* Types */\n+     OP_TYPE_xu_w,\t\t\t\t\t     /* Suffix */\n+     rvv_arg_type_info (RVV_BASE_double_trunc_float_vector), /* Return type */\n+     v_args /* Args */};\n+\n+/* A static operand information for vector_type func (vector_type)\n+ * function registration. */\n+static CONSTEXPR const rvv_op_info f_to_u_f_v_ops\n+  = {convert_u_ops,\t\t\t  /* Types */\n+     OP_TYPE_f_v,\t\t\t\t  /* Suffix */\n+     rvv_arg_type_info (RVV_BASE_vector), /* Return type */\n+     f_v_args /* Args */};\n+\n+/* A static operand information for vector_type func (vector_type)\n+ * function registration. */\n+static CONSTEXPR const rvv_op_info f_to_wu_f_v_ops\n+  = {wconvert_u_ops,\t\t\t  /* Types */\n+     OP_TYPE_f_v,\t\t\t  /* Suffix */\n+     rvv_arg_type_info (RVV_BASE_vector), /* Return type */\n+     trunc_f_v_args /* Args */};\n+\n+/* A static operand information for vector_type func (vector_type)\n+ * function registration. */\n+static CONSTEXPR const rvv_op_info f_to_wf_f_v_ops\n+  = {f_ops,\t\t\t\t  /* Types */\n+     OP_TYPE_f_v,\t\t\t  /* Suffix */\n+     rvv_arg_type_info (RVV_BASE_vector), /* Return type */\n+     w_v_args /* Args */};\n+\n+/* A static operand information for vector_type func (vector_type)\n+ * function registration. */\n+static CONSTEXPR const rvv_op_info f_to_nf_f_w_ops\n+  = {wconvert_f_ops,\t\t\t\t\t     /* Types */\n+     OP_TYPE_f_w,\t\t\t\t\t     /* Suffix */\n+     rvv_arg_type_info (RVV_BASE_double_trunc_float_vector), /* Return type */\n+     v_args /* Args */};\n+\n /* A static operand information for vector_type func (vector_type)\n  * function registration. */\n static CONSTEXPR const rvv_op_info all_v_ops\n@@ -956,6 +1291,14 @@ static CONSTEXPR const rvv_op_info iu_x_ops\n      rvv_arg_type_info (RVV_BASE_vector), /* Return type */\n      x_args /* Args */};\n \n+/* A static operand information for vector_type func (scalar_type)\n+ * function registration. */\n+static CONSTEXPR const rvv_op_info f_f_ops\n+  = {f_ops,\t\t\t/* Types */\n+     OP_TYPE_f,\t\t\t/* Suffix */\n+     rvv_arg_type_info (RVV_BASE_vector), /* Return type */\n+     x_args /* Args */};\n+\n /* A static operand information for vector_type func (double demote type)\n  * function registration. */\n static CONSTEXPR const rvv_op_info i_vf2_ops\n@@ -1012,6 +1355,14 @@ static CONSTEXPR const rvv_op_info i_wvv_ops\n      rvv_arg_type_info (RVV_BASE_vector), /* Return type */\n      wvv_args /* Args */};\n \n+/* A static operand information for vector_type func (double demote type, double\n+ * demote type) function registration. */\n+static CONSTEXPR const rvv_op_info f_wvv_ops\n+  = {wextf_ops,\t\t\t\t  /* Types */\n+     OP_TYPE_vv,\t\t\t  /* Suffix */\n+     rvv_arg_type_info (RVV_BASE_vector), /* Return type */\n+     wvv_args /* Args */};\n+\n /* A static operand information for vector_type func (vector_type, double demote\n  * type, double demote type) function registration. */\n static CONSTEXPR const rvv_op_info i_wwvv_ops\n@@ -1028,6 +1379,22 @@ static CONSTEXPR const rvv_op_info i_wwxv_ops\n      rvv_arg_type_info (RVV_BASE_vector), /* Return type */\n      wwxv_args /* Args */};\n \n+/* A static operand information for vector_type func (vector_type, double demote\n+ * type, double demote type) function registration. */\n+static CONSTEXPR const rvv_op_info f_wwvv_ops\n+  = {wextf_ops,\t\t\t\t  /* Types */\n+     OP_TYPE_vv,\t\t\t  /* Suffix */\n+     rvv_arg_type_info (RVV_BASE_vector), /* Return type */\n+     wwvv_args /* Args */};\n+\n+/* A static operand information for vector_type func (vector_type, double demote\n+ * scalar_type, double demote type) function registration. */\n+static CONSTEXPR const rvv_op_info f_wwfv_ops\n+  = {wextf_ops,\t\t\t\t  /* Types */\n+     OP_TYPE_vf,\t\t\t  /* Suffix */\n+     rvv_arg_type_info (RVV_BASE_vector), /* Return type */\n+     wwxv_args /* Args */};\n+\n /* A static operand information for vector_type func (vector_type, double demote\n  * type, double demote type) function registration. */\n static CONSTEXPR const rvv_op_info u_wwvv_ops\n@@ -1092,6 +1459,14 @@ static CONSTEXPR const rvv_op_info i_wvx_ops\n      rvv_arg_type_info (RVV_BASE_vector), /* Return type */\n      wvx_args /* Args */};\n \n+/* A static operand information for vector_type func (double demote type, double\n+ * demote scalar_type) function registration. */\n+static CONSTEXPR const rvv_op_info f_wvf_ops\n+  = {wextf_ops,\t\t\t\t  /* Types */\n+     OP_TYPE_vf,\t\t\t  /* Suffix */\n+     rvv_arg_type_info (RVV_BASE_vector), /* Return type */\n+     wvx_args /* Args */};\n+\n /* A static operand information for vector_type func (signed double demote type,\n  * unsigned double demote scalar_type) function registration. */\n static CONSTEXPR const rvv_op_info i_su_wvx_ops\n@@ -1108,6 +1483,14 @@ static CONSTEXPR const rvv_op_info i_wwv_ops\n      rvv_arg_type_info (RVV_BASE_vector), /* Return type */\n      wwv_args /* Args */};\n \n+/* A static operand information for vector_type func (vector_type, double\n+ * demote type) function registration. */\n+static CONSTEXPR const rvv_op_info f_wwv_ops\n+  = {wextf_ops,\t\t\t\t  /* Types */\n+     OP_TYPE_wv,\t\t\t  /* Suffix */\n+     rvv_arg_type_info (RVV_BASE_vector), /* Return type */\n+     wwv_args /* Args */};\n+\n /* A static operand information for vector_type func (vector_type, double\n  * demote scalar_type) function registration. */\n static CONSTEXPR const rvv_op_info i_wwx_ops\n@@ -1116,6 +1499,14 @@ static CONSTEXPR const rvv_op_info i_wwx_ops\n      rvv_arg_type_info (RVV_BASE_vector), /* Return type */\n      wwx_args /* Args */};\n \n+/* A static operand information for vector_type func (vector_type, double\n+ * demote scalar_type) function registration. */\n+static CONSTEXPR const rvv_op_info f_wwf_ops\n+  = {wextf_ops,\t\t\t\t  /* Types */\n+     OP_TYPE_wf,\t\t\t  /* Suffix */\n+     rvv_arg_type_info (RVV_BASE_vector), /* Return type */\n+     wwx_args /* Args */};\n+\n /* A static operand information for vector_type func (vector_type, double\n  * demote type) function registration. */\n static CONSTEXPR const rvv_op_info u_wwv_ops\n@@ -1388,9 +1779,12 @@ register_vector_type (vector_type_index type)\n static bool\n required_extensions_p (enum rvv_base_type type)\n {\n-  return type == RVV_BASE_vector || type == RVV_BASE_uint8_index\n-\t || type == RVV_BASE_uint16_index || type == RVV_BASE_uint32_index\n-\t || type == RVV_BASE_uint64_index;\n+  return type == RVV_BASE_uint8_index || type == RVV_BASE_uint16_index\n+\t || type == RVV_BASE_uint32_index || type == RVV_BASE_uint64_index\n+\t || type == RVV_BASE_float_vector\n+\t || type == RVV_BASE_double_trunc_float_vector\n+\t || type == RVV_BASE_double_trunc_vector\n+\t || type == RVV_BASE_widen_lmul1_vector;\n }\n \n /* Check whether all the RVV_REQUIRE_* values in REQUIRED_EXTENSIONS are\n@@ -1410,7 +1804,7 @@ check_required_extensions (const function_instance &instance)\n       enum vector_type_index vector_type\n \t= op_info->args[i].get_base_vector_type (type);\n       if (vector_type == NUM_VECTOR_TYPES)\n-\tcontinue;\n+\treturn false;\n       required_extensions |= op_info->types[vector_type].required_extensions;\n \n       /* According to RVV ISA, EEW=64 index of indexed loads/stores require\n@@ -1474,68 +1868,100 @@ get_mask_policy_for_pred (enum predication_type_index pred)\n   return gen_int_mode (get_prefer_mask_policy (), Pmode);\n }\n \n+static bool\n+unsigned_base_type_p (rvv_base_type base_type)\n+{\n+  return base_type == RVV_BASE_double_trunc_unsigned_vector\n+\t || base_type == RVV_BASE_double_trunc_unsigned_scalar\n+\t || base_type == RVV_BASE_unsigned_vector\n+\t || base_type == RVV_BASE_uint8_index\n+\t || base_type == RVV_BASE_uint16_index\n+\t || base_type == RVV_BASE_uint32_index\n+\t || base_type == RVV_BASE_uint64_index\n+\t || base_type == RVV_BASE_shift_vector;\n+}\n+\n+static machine_mode\n+get_mode_for_bitsize (poly_int64 bitsize, bool float_mode_p)\n+{\n+  if (float_mode_p)\n+    return float_mode_for_size (bitsize).require ();\n+  else\n+    return int_mode_for_size (bitsize, 0).require ();\n+}\n+\n vector_type_index\n rvv_arg_type_info::get_base_vector_type (tree type) const\n {\n   if (!type)\n     return NUM_VECTOR_TYPES;\n+\n   poly_int64 nunits = GET_MODE_NUNITS (TYPE_MODE (type));\n   machine_mode inner_mode = GET_MODE_INNER (TYPE_MODE (type));\n+  poly_int64 bitsize = GET_MODE_BITSIZE (inner_mode);\n+  poly_int64 bytesize = GET_MODE_SIZE (inner_mode);\n+\n   bool unsigned_p = TYPE_UNSIGNED (type);\n-  if (base_type == RVV_BASE_double_trunc_unsigned_vector\n-      || base_type == RVV_BASE_double_trunc_unsigned_scalar)\n+  if (unsigned_base_type_p (base_type))\n     unsigned_p = true;\n+\n   switch (base_type)\n     {\n     case RVV_BASE_mask:\n       inner_mode = E_BImode;\n       break;\n     case RVV_BASE_uint8_index:\n       inner_mode = E_QImode;\n-      unsigned_p = true;\n       break;\n     case RVV_BASE_uint16_index:\n       inner_mode = E_HImode;\n-      unsigned_p = true;\n       break;\n     case RVV_BASE_uint32_index:\n       inner_mode = E_SImode;\n-      unsigned_p = true;\n       break;\n     case RVV_BASE_uint64_index:\n       inner_mode = E_DImode;\n-      unsigned_p = true;\n       break;\n     case RVV_BASE_shift_vector:\n       inner_mode = GET_MODE_INNER (TYPE_MODE (type));\n-      unsigned_p = true;\n       break;\n     case RVV_BASE_double_trunc_vector:\n     case RVV_BASE_double_trunc_scalar:\n+      inner_mode = get_mode_for_bitsize (exact_div (bitsize, 2),\n+\t\t\t\t\t FLOAT_MODE_P (inner_mode));\n+      break;\n     case RVV_BASE_double_trunc_unsigned_vector:\n     case RVV_BASE_double_trunc_unsigned_scalar:\n-      if (inner_mode == DImode)\n-\tinner_mode = SImode;\n-      else if (inner_mode == SImode)\n-\tinner_mode = HImode;\n-      else if (inner_mode == HImode)\n-\tinner_mode = QImode;\n-      else\n-\tgcc_unreachable ();\n+    case RVV_BASE_double_trunc_signed_vector:\n+      inner_mode = int_mode_for_size (exact_div (bitsize, 2), 0).require ();\n       break;\n     case RVV_BASE_quad_trunc_vector:\n-      if (inner_mode == DImode)\n-\tinner_mode = HImode;\n-      else if (inner_mode == SImode)\n-\tinner_mode = QImode;\n-      else\n-\tgcc_unreachable ();\n+      inner_mode = get_mode_for_bitsize (exact_div (bitsize, 4),\n+\t\t\t\t\t FLOAT_MODE_P (inner_mode));\n       break;\n     case RVV_BASE_oct_trunc_vector:\n-      if (inner_mode == DImode)\n-\tinner_mode = QImode;\n-      else\n-\tgcc_unreachable ();\n+      inner_mode = get_mode_for_bitsize (exact_div (bitsize, 8),\n+\t\t\t\t\t FLOAT_MODE_P (inner_mode));\n+      break;\n+    case RVV_BASE_float_vector:\n+      inner_mode = float_mode_for_size (bitsize).require ();\n+      break;\n+    case RVV_BASE_double_trunc_float_vector:\n+      inner_mode = float_mode_for_size (exact_div (bitsize, 2)).require ();\n+      break;\n+    case RVV_BASE_signed_vector:\n+    case RVV_BASE_unsigned_vector:\n+      inner_mode = int_mode_for_mode (inner_mode).require ();\n+      break;\n+    case RVV_BASE_lmul1_vector:\n+      nunits = exact_div (BYTES_PER_RISCV_VECTOR, bytesize);\n+      break;\n+    case RVV_BASE_widen_lmul1_vector:\n+      inner_mode\n+\t= get_mode_for_bitsize (bitsize * 2, FLOAT_MODE_P (inner_mode));\n+      if (BYTES_PER_RISCV_VECTOR.coeffs[0] < (bytesize * 2).coeffs[0])\n+\treturn NUM_VECTOR_TYPES;\n+      nunits = exact_div (BYTES_PER_RISCV_VECTOR, bytesize * 2);\n       break;\n     default:\n       return NUM_VECTOR_TYPES;\n@@ -1552,7 +1978,7 @@ rvv_arg_type_info::get_base_vector_type (tree type) const\n       if (!vector_type)\n \tcontinue;\n \n-      if (GET_MODE_CLASS (TYPE_MODE (vector_type)) != MODE_VECTOR_BOOL\n+      if (GET_MODE_CLASS (TYPE_MODE (vector_type)) == MODE_VECTOR_INT\n \t  && TYPE_UNSIGNED (vector_type) != unsigned_p)\n \tcontinue;\n \n@@ -1581,9 +2007,6 @@ rvv_arg_type_info::get_tree_type (vector_type_index type_idx) const\n        type is always the signed type + 1 (They have same SEW and LMUL).\n        For example 'vuint8mf8_t' enum = 'vint8mf8_t' enum + 1.\n        Note: We dont't allow type_idx to be unsigned type.  */\n-    case RVV_BASE_unsigned_vector:\n-      gcc_assert (!TYPE_UNSIGNED (builtin_types[type_idx].vector));\n-      return builtin_types[type_idx + 1].vector;\n     case RVV_BASE_unsigned_scalar:\n       gcc_assert (!TYPE_UNSIGNED (builtin_types[type_idx].scalar));\n       return builtin_types[type_idx + 1].scalar;\n@@ -1621,8 +2044,15 @@ rvv_arg_type_info::get_tree_type (vector_type_index type_idx) const\n     case RVV_BASE_double_trunc_vector:\n     case RVV_BASE_quad_trunc_vector:\n     case RVV_BASE_oct_trunc_vector:\n+    case RVV_BASE_double_trunc_signed_vector:\n     case RVV_BASE_double_trunc_unsigned_vector:\n     case RVV_BASE_mask:\n+    case RVV_BASE_float_vector:\n+    case RVV_BASE_double_trunc_float_vector:\n+    case RVV_BASE_signed_vector:\n+    case RVV_BASE_unsigned_vector:\n+    case RVV_BASE_lmul1_vector:\n+    case RVV_BASE_widen_lmul1_vector:\n       if (get_base_vector_type (builtin_types[type_idx].vector)\n \t  != NUM_VECTOR_TYPES)\n \treturn builtin_types[get_base_vector_type ("}, {"sha": "bb672f3b449f64a328f89377f1b4eb184f158d41", "filename": "gcc/config/riscv/riscv-vector-builtins.def", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ee85b3255d638fd77ee3fe17a4e146c81545efb/gcc%2Fconfig%2Friscv%2Friscv-vector-builtins.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ee85b3255d638fd77ee3fe17a4e146c81545efb/gcc%2Fconfig%2Friscv%2Friscv-vector-builtins.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Friscv%2Friscv-vector-builtins.def?ref=6ee85b3255d638fd77ee3fe17a4e146c81545efb", "patch": "@@ -288,7 +288,11 @@ DEF_RVV_OP_TYPE (vf)\n DEF_RVV_OP_TYPE (vm)\n DEF_RVV_OP_TYPE (wf)\n DEF_RVV_OP_TYPE (vfm)\n-DEF_RVV_OP_TYPE (v_f)\n+DEF_RVV_OP_TYPE (f)\n+DEF_RVV_OP_TYPE (f_v)\n+DEF_RVV_OP_TYPE (xu_v)\n+DEF_RVV_OP_TYPE (f_w)\n+DEF_RVV_OP_TYPE (xu_w)\n \n DEF_RVV_PRED_TYPE (ta)\n DEF_RVV_PRED_TYPE (tu)"}, {"sha": "ede08c6a4805d6c29172a75b6a67e60839acb3bc", "filename": "gcc/config/riscv/riscv-vector-builtins.h", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ee85b3255d638fd77ee3fe17a4e146c81545efb/gcc%2Fconfig%2Friscv%2Friscv-vector-builtins.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ee85b3255d638fd77ee3fe17a4e146c81545efb/gcc%2Fconfig%2Friscv%2Friscv-vector-builtins.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Friscv%2Friscv-vector-builtins.h?ref=6ee85b3255d638fd77ee3fe17a4e146c81545efb", "patch": "@@ -141,6 +141,7 @@ enum rvv_base_type\n   RVV_BASE_vector,\n   RVV_BASE_scalar,\n   RVV_BASE_mask,\n+  RVV_BASE_signed_vector,\n   RVV_BASE_unsigned_vector,\n   RVV_BASE_unsigned_scalar,\n   RVV_BASE_vector_ptr,\n@@ -160,8 +161,13 @@ enum rvv_base_type\n   RVV_BASE_quad_trunc_vector,\n   RVV_BASE_oct_trunc_vector,\n   RVV_BASE_double_trunc_scalar,\n+  RVV_BASE_double_trunc_signed_vector,\n   RVV_BASE_double_trunc_unsigned_vector,\n   RVV_BASE_double_trunc_unsigned_scalar,\n+  RVV_BASE_double_trunc_float_vector,\n+  RVV_BASE_float_vector,\n+  RVV_BASE_lmul1_vector,\n+  RVV_BASE_widen_lmul1_vector,\n   NUM_BASE_TYPES\n };\n \n@@ -343,6 +349,7 @@ class function_expander : public function_call_info\n \n   machine_mode vector_mode (void) const;\n   machine_mode index_mode (void) const;\n+  machine_mode arg_mode (int) const;\n \n   rtx use_exact_insn (insn_code);\n   rtx use_contiguous_load_insn (insn_code);\n@@ -492,6 +499,13 @@ function_expander::index_mode (void) const\n   return TYPE_MODE (op_info->args[1].get_tree_type (type.index));\n }\n \n+/* Return the machine_mode of the corresponding arg type.  */\n+inline machine_mode\n+function_expander::arg_mode (int idx) const\n+{\n+  return TYPE_MODE (op_info->args[idx].get_tree_type (type.index));\n+}\n+\n /* Default implementation of function_base::call_properties, with conservatively\n    correct behavior for floating-point instructions.  */\n inline unsigned int"}, {"sha": "05924e9bbf109c9f0278e2ca6c033f52d5a2f726", "filename": "gcc/config/riscv/riscv.md", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ee85b3255d638fd77ee3fe17a4e146c81545efb/gcc%2Fconfig%2Friscv%2Friscv.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ee85b3255d638fd77ee3fe17a4e146c81545efb/gcc%2Fconfig%2Friscv%2Friscv.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Friscv%2Friscv.md?ref=6ee85b3255d638fd77ee3fe17a4e146c81545efb", "patch": "@@ -309,9 +309,9 @@\n ;; 14. Vector reduction operations\n ;; vired       vector single-width integer reduction instructions\n ;; viwred      vector widening integer reduction instructions\n-;; vfred       vector single-width floating-point un-ordered reduction instruction\n+;; vfredu      vector single-width floating-point un-ordered reduction instruction\n ;; vfredo      vector single-width floating-point ordered reduction instruction\n-;; vfwred      vector widening floating-point un-ordered reduction instruction\n+;; vfwredu      vector widening floating-point un-ordered reduction instruction\n ;; vfwredo     vector widening floating-point ordered reduction instruction\n ;; 15. Vector mask instructions\n ;; vmalu       vector mask-register logical instructions\n@@ -344,7 +344,7 @@\n    vfcmp,vfminmax,vfsgnj,vfclass,vfmerge,vfmov,\n    vfcvtitof,vfcvtftoi,vfwcvtitof,vfwcvtftoi,\n    vfwcvtftof,vfncvtitof,vfncvtftoi,vfncvtftof,\n-   vired,viwred,vfred,vfredo,vfwred,vfwredo,\n+   vired,viwred,vfredu,vfredo,vfwredu,vfwredo,\n    vmalu,vmpop,vmffs,vmsfs,vmiota,vmidx,vimovvx,vimovxv,vfmovvf,vfmovfv,\n    vislide,vislide1,vfslide1,vgather,vcompress,vmov\"\n   (cond [(eq_attr \"got\" \"load\") (const_string \"load\")"}, {"sha": "cb817abcfdec0e1a78a0b0386554e14029fb3a59", "filename": "gcc/config/riscv/vector-iterators.md", "status": "modified", "additions": 224, "deletions": 5, "changes": 229, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ee85b3255d638fd77ee3fe17a4e146c81545efb/gcc%2Fconfig%2Friscv%2Fvector-iterators.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ee85b3255d638fd77ee3fe17a4e146c81545efb/gcc%2Fconfig%2Friscv%2Fvector-iterators.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Friscv%2Fvector-iterators.md?ref=6ee85b3255d638fd77ee3fe17a4e146c81545efb", "patch": "@@ -54,6 +54,22 @@\n   UNSPEC_VMSIF\n   UNSPEC_VMSOF\n   UNSPEC_VIOTA\n+\n+  UNSPEC_VFRSQRT7\n+  UNSPEC_VFREC7\n+  UNSPEC_VFCLASS\n+\n+  UNSPEC_VCOPYSIGN\n+  UNSPEC_VNCOPYSIGN\n+  UNSPEC_VXORSIGN\n+\n+  UNSPEC_VFCVT\n+  UNSPEC_UNSIGNED_VFCVT\n+  UNSPEC_ROD\n+\n+  UNSPEC_REDUC\n+  UNSPEC_WREDUC_SUM\n+  UNSPEC_WREDUC_USUM\n ])\n \n (define_mode_iterator V [\n@@ -81,6 +97,46 @@\n   (VNx4DI \"TARGET_MIN_VLEN > 32\") (VNx8DI \"TARGET_MIN_VLEN > 32\")\n ])\n \n+(define_mode_iterator VI_ZVE32 [\n+  VNx1QI VNx2QI VNx4QI VNx8QI VNx16QI VNx32QI\n+  VNx1HI VNx2HI VNx4HI VNx8HI VNx16HI\n+  VNx1SI VNx2SI VNx4SI VNx8SI\n+])\n+\n+(define_mode_iterator VWI [\n+  VNx1QI VNx2QI VNx4QI VNx8QI VNx16QI VNx32QI (VNx64QI \"TARGET_MIN_VLEN > 32\")\n+  VNx1HI VNx2HI VNx4HI VNx8HI VNx16HI (VNx32HI \"TARGET_MIN_VLEN > 32\")\n+  VNx1SI VNx2SI VNx4SI VNx8SI (VNx16SI \"TARGET_MIN_VLEN > 32\")\n+])\n+\n+(define_mode_iterator VWI_ZVE32 [\n+  VNx1QI VNx2QI VNx4QI VNx8QI VNx16QI VNx32QI\n+  VNx1HI VNx2HI VNx4HI VNx8HI VNx16HI\n+])\n+\n+(define_mode_iterator VF [\n+  (VNx1SF \"TARGET_VECTOR_ELEN_FP_32\")\n+  (VNx2SF \"TARGET_VECTOR_ELEN_FP_32\")\n+  (VNx4SF \"TARGET_VECTOR_ELEN_FP_32\")\n+  (VNx8SF \"TARGET_VECTOR_ELEN_FP_32\")\n+  (VNx16SF \"TARGET_VECTOR_ELEN_FP_32 && TARGET_MIN_VLEN > 32\")\n+  (VNx1DF \"TARGET_VECTOR_ELEN_FP_64\")\n+  (VNx2DF \"TARGET_VECTOR_ELEN_FP_64\")\n+  (VNx4DF \"TARGET_VECTOR_ELEN_FP_64\")\n+  (VNx8DF \"TARGET_VECTOR_ELEN_FP_64\")\n+])\n+\n+(define_mode_iterator VF_ZVE32 [\n+  (VNx1SF \"TARGET_VECTOR_ELEN_FP_32\")\n+  (VNx2SF \"TARGET_VECTOR_ELEN_FP_32\")\n+  (VNx4SF \"TARGET_VECTOR_ELEN_FP_32\")\n+  (VNx8SF \"TARGET_VECTOR_ELEN_FP_32\")\n+])\n+\n+(define_mode_iterator VWF [\n+  VNx1SF VNx2SF VNx4SF VNx8SF (VNx16SF \"TARGET_MIN_VLEN > 32\")\n+])\n+\n (define_mode_iterator VFULLI [\n   VNx1QI VNx2QI VNx4QI VNx8QI VNx16QI VNx32QI (VNx64QI \"TARGET_MIN_VLEN > 32\")\n   VNx1HI VNx2HI VNx4HI VNx8HI VNx16HI (VNx32HI \"TARGET_MIN_VLEN > 32\")\n@@ -210,6 +266,20 @@\n   (VNx4DI \"TARGET_MIN_VLEN > 32\") (VNx8DI \"TARGET_MIN_VLEN > 32\")\n ])\n \n+(define_mode_iterator VWEXTF [\n+  (VNx1DF \"TARGET_VECTOR_ELEN_FP_64\")\n+  (VNx2DF \"TARGET_VECTOR_ELEN_FP_64\")\n+  (VNx4DF \"TARGET_VECTOR_ELEN_FP_64\")\n+  (VNx8DF \"TARGET_VECTOR_ELEN_FP_64\")\n+])\n+\n+(define_mode_iterator VWCONVERTI [\n+  (VNx1DI \"TARGET_MIN_VLEN > 32 && TARGET_VECTOR_ELEN_FP_32\")\n+  (VNx2DI \"TARGET_MIN_VLEN > 32 && TARGET_VECTOR_ELEN_FP_32\")\n+  (VNx4DI \"TARGET_MIN_VLEN > 32 && TARGET_VECTOR_ELEN_FP_32\")\n+  (VNx8DI \"TARGET_MIN_VLEN > 32 && TARGET_VECTOR_ELEN_FP_32\")\n+])\n+\n (define_mode_iterator VQEXTI [\n   VNx1SI VNx2SI VNx4SI VNx8SI (VNx16SI \"TARGET_MIN_VLEN > 32\")\n   (VNx1DI \"TARGET_MIN_VLEN > 32\") (VNx2DI \"TARGET_MIN_VLEN > 32\")\n@@ -266,15 +336,16 @@\n ])\n \n (define_mode_attr V_DOUBLE_TRUNC [\n-  (VNx1HI \"VNx1QI\") (VNx2HI \"VNx2QI\")  (VNx4HI \"VNx4QI\")  (VNx8HI \"VNx8QI\")  \n+  (VNx1HI \"VNx1QI\") (VNx2HI \"VNx2QI\")  (VNx4HI \"VNx4QI\")  (VNx8HI \"VNx8QI\")\n   (VNx16HI \"VNx16QI\") (VNx32HI \"VNx32QI\")\n-  (VNx1SI \"VNx1HI\") (VNx2SI \"VNx2HI\") (VNx4SI \"VNx4HI\") (VNx8SI \"VNx8HI\") \n+  (VNx1SI \"VNx1HI\") (VNx2SI \"VNx2HI\") (VNx4SI \"VNx4HI\") (VNx8SI \"VNx8HI\")\n   (VNx16SI \"VNx16HI\")\n   (VNx1DI \"VNx1SI\") (VNx2DI \"VNx2SI\") (VNx4DI \"VNx4SI\") (VNx8DI \"VNx8SI\")\n+  (VNx1DF \"VNx1SF\") (VNx2DF \"VNx2SF\") (VNx4DF \"VNx4SF\") (VNx8DF \"VNx8SF\")\n ])\n \n (define_mode_attr V_QUAD_TRUNC [\n-  (VNx1SI \"VNx1QI\") (VNx2SI \"VNx2QI\") (VNx4SI \"VNx4QI\") (VNx8SI \"VNx8QI\") \n+  (VNx1SI \"VNx1QI\") (VNx2SI \"VNx2QI\") (VNx4SI \"VNx4QI\") (VNx8SI \"VNx8QI\")\n   (VNx16SI \"VNx16QI\")\n   (VNx1DI \"VNx1HI\") (VNx2DI \"VNx2HI\")\n   (VNx4DI \"VNx4HI\") (VNx8DI \"VNx8HI\")\n@@ -284,6 +355,107 @@\n   (VNx1DI \"VNx1QI\") (VNx2DI \"VNx2QI\") (VNx4DI \"VNx4QI\") (VNx8DI \"VNx8QI\")\n ])\n \n+(define_mode_attr VCONVERT [\n+  (VNx1SF \"VNx1SI\") (VNx2SF \"VNx2SI\") (VNx4SF \"VNx4SI\") (VNx8SF \"VNx8SI\") (VNx16SF \"VNx16SI\")\n+  (VNx1DF \"VNx1DI\") (VNx2DF \"VNx2DI\") (VNx4DF \"VNx4DI\") (VNx8DF \"VNx8DI\")\n+])\n+\n+(define_mode_attr VNCONVERT [\n+  (VNx1SF \"VNx1HI\") (VNx2SF \"VNx2HI\") (VNx4SF \"VNx4HI\") (VNx8SF \"VNx8HI\") (VNx16SF \"VNx16HI\")\n+  (VNx1DI \"VNx1SF\") (VNx2DI \"VNx2SF\") (VNx4DI \"VNx4SF\") (VNx8DI \"VNx8SF\")\n+  (VNx1DF \"VNx1SI\") (VNx2DF \"VNx2SI\") (VNx4DF \"VNx4SI\") (VNx8DF \"VNx8SI\")\n+])\n+\n+(define_mode_attr VLMUL1 [\n+  (VNx1QI \"VNx8QI\") (VNx2QI \"VNx8QI\") (VNx4QI \"VNx8QI\") \n+  (VNx8QI \"VNx8QI\") (VNx16QI \"VNx8QI\") (VNx32QI \"VNx8QI\") (VNx64QI \"VNx8QI\")\n+  (VNx1HI \"VNx4HI\") (VNx2HI \"VNx4HI\") (VNx4HI \"VNx4HI\") \n+  (VNx8HI \"VNx4HI\") (VNx16HI \"VNx4HI\") (VNx32HI \"VNx4HI\")\n+  (VNx1SI \"VNx2SI\") (VNx2SI \"VNx2SI\") (VNx4SI \"VNx2SI\") \n+  (VNx8SI \"VNx2SI\") (VNx16SI \"VNx2SI\")\n+  (VNx1DI \"VNx1DI\") (VNx2DI \"VNx1DI\")\n+  (VNx4DI \"VNx1DI\") (VNx8DI \"VNx1DI\")\n+  (VNx1SF \"VNx2SF\") (VNx2SF \"VNx2SF\")\n+  (VNx4SF \"VNx2SF\") (VNx8SF \"VNx2SF\") (VNx16SF \"VNx2SF\")\n+  (VNx1DF \"VNx1DF\") (VNx2DF \"VNx1DF\")\n+  (VNx4DF \"VNx1DF\") (VNx8DF \"VNx1DF\")\n+])\n+\n+(define_mode_attr VLMUL1_ZVE32 [\n+  (VNx1QI \"VNx4QI\") (VNx2QI \"VNx4QI\") (VNx4QI \"VNx4QI\") \n+  (VNx8QI \"VNx4QI\") (VNx16QI \"VNx4QI\") (VNx32QI \"VNx4QI\")\n+  (VNx1HI \"VNx2HI\") (VNx2HI \"VNx2HI\") (VNx4HI \"VNx2HI\") \n+  (VNx8HI \"VNx2HI\") (VNx16HI \"VNx2HI\")\n+  (VNx1SI \"VNx1SI\") (VNx2SI \"VNx1SI\") (VNx4SI \"VNx1SI\") \n+  (VNx8SI \"VNx1SI\")\n+  (VNx1SF \"VNx2SF\") (VNx2SF \"VNx2SF\")\n+  (VNx4SF \"VNx2SF\") (VNx8SF \"VNx2SF\")\n+])\n+\n+(define_mode_attr VWLMUL1 [\n+  (VNx1QI \"VNx4HI\") (VNx2QI \"VNx4HI\") (VNx4QI \"VNx4HI\") \n+  (VNx8QI \"VNx4HI\") (VNx16QI \"VNx4HI\") (VNx32QI \"VNx4HI\") (VNx64QI \"VNx4HI\")\n+  (VNx1HI \"VNx2SI\") (VNx2HI \"VNx2SI\") (VNx4HI \"VNx2SI\") \n+  (VNx8HI \"VNx2SI\") (VNx16HI \"VNx2SI\") (VNx32HI \"VNx2SI\")\n+  (VNx1SI \"VNx1DI\") (VNx2SI \"VNx1DI\") (VNx4SI \"VNx1DI\") \n+  (VNx8SI \"VNx1DI\") (VNx16SI \"VNx1DI\")\n+  (VNx1SF \"VNx1DF\") (VNx2SF \"VNx1DF\")\n+  (VNx4SF \"VNx1DF\") (VNx8SF \"VNx1DF\") (VNx16SF \"VNx1DF\")\n+])\n+\n+(define_mode_attr VWLMUL1_ZVE32 [\n+  (VNx1QI \"VNx2HI\") (VNx2QI \"VNx2HI\") (VNx4QI \"VNx2HI\") \n+  (VNx8QI \"VNx2HI\") (VNx16QI \"VNx2HI\") (VNx32QI \"VNx2HI\")\n+  (VNx1HI \"VNx1SI\") (VNx2HI \"VNx1SI\") (VNx4HI \"VNx1SI\") \n+  (VNx8HI \"VNx1SI\") (VNx16HI \"VNx1SI\")\n+])\n+\n+(define_mode_attr vlmul1 [\n+  (VNx1QI \"vnx8qi\") (VNx2QI \"vnx8qi\") (VNx4QI \"vnx8qi\") \n+  (VNx8QI \"vnx8qi\") (VNx16QI \"vnx8qi\") (VNx32QI \"vnx8qi\") (VNx64QI \"vnx8qi\")\n+  (VNx1HI \"vnx4hi\") (VNx2HI \"vnx4hi\") (VNx4HI \"vnx4hi\") \n+  (VNx8HI \"vnx4hi\") (VNx16HI \"vnx4hi\") (VNx32HI \"vnx4hi\")\n+  (VNx1SI \"vnx2si\") (VNx2SI \"vnx2si\") (VNx4SI \"vnx2si\") \n+  (VNx8SI \"vnx2si\") (VNx16SI \"vnx2si\")\n+  (VNx1DI \"vnx1DI\") (VNx2DI \"vnx1DI\")\n+  (VNx4DI \"vnx1DI\") (VNx8DI \"vnx1DI\")\n+  (VNx1SF \"vnx2sf\") (VNx2SF \"vnx2sf\")\n+  (VNx4SF \"vnx2sf\") (VNx8SF \"vnx2sf\") (VNx16SF \"vnx2sf\")\n+  (VNx1DF \"vnx1df\") (VNx2DF \"vnx1df\")\n+  (VNx4DF \"vnx1df\") (VNx8DF \"vnx1df\")\n+])\n+\n+(define_mode_attr vlmul1_zve32 [\n+  (VNx1QI \"vnx4qi\") (VNx2QI \"vnx4qi\") (VNx4QI \"vnx4qi\") \n+  (VNx8QI \"vnx4qi\") (VNx16QI \"vnx4qi\") (VNx32QI \"vnx4qi\")\n+  (VNx1HI \"vnx2hi\") (VNx2HI \"vnx2hi\") (VNx4HI \"vnx2hi\") \n+  (VNx8HI \"vnx2hi\") (VNx16HI \"vnx2hi\")\n+  (VNx1SI \"vnx1si\") (VNx2SI \"vnx1si\") (VNx4SI \"vnx1si\") \n+  (VNx8SI \"vnx1si\")\n+  (VNx1SF \"vnx1sf\") (VNx2SF \"vnx1sf\")\n+  (VNx4SF \"vnx1sf\") (VNx8SF \"vnx1sf\")\n+])\n+\n+(define_mode_attr vwlmul1 [\n+  (VNx1QI \"vnx4hi\") (VNx2QI \"vnx4hi\") (VNx4QI \"vnx4hi\") \n+  (VNx8QI \"vnx4hi\") (VNx16QI \"vnx4hi\") (VNx32QI \"vnx4hi\") (VNx64QI \"vnx4hi\")\n+  (VNx1HI \"vnx2si\") (VNx2HI \"vnx2si\") (VNx4HI \"vnx2si\") \n+  (VNx8HI \"vnx2si\") (VNx16HI \"vnx2si\") (VNx32HI \"vnx2SI\")\n+  (VNx1SI \"vnx2di\") (VNx2SI \"vnx2di\") (VNx4SI \"vnx2di\") \n+  (VNx8SI \"vnx2di\") (VNx16SI \"vnx2di\")\n+  (VNx1SF \"vnx1df\") (VNx2SF \"vnx1df\")\n+  (VNx4SF \"vnx1df\") (VNx8SF \"vnx1df\") (VNx16SF \"vnx1df\")\n+])\n+\n+(define_mode_attr vwlmul1_zve32 [\n+  (VNx1QI \"vnx2hi\") (VNx2QI \"vnx2hi\") (VNx4QI \"vnx2hi\") \n+  (VNx8QI \"vnx2hi\") (VNx16QI \"vnx2hi\") (VNx32QI \"vnx2hi\")\n+  (VNx1HI \"vnx1si\") (VNx2HI \"vnx1si\") (VNx4HI \"vnx1si\") \n+  (VNx8HI \"vnx1si\") (VNx16HI \"vnx1SI\")\n+])\n+\n+(define_int_iterator WREDUC [UNSPEC_WREDUC_SUM UNSPEC_WREDUC_USUM])\n+\n (define_int_iterator ORDER [UNSPEC_ORDERED UNSPEC_UNORDERED])\n \n (define_int_iterator VMULH [UNSPEC_VMULHS UNSPEC_VMULHU UNSPEC_VMULHSU])\n@@ -300,12 +472,18 @@\n \n (define_int_iterator VMISC [UNSPEC_VMSBF UNSPEC_VMSIF UNSPEC_VMSOF])\n \n+(define_int_iterator VFMISC [UNSPEC_VFRSQRT7 UNSPEC_VFREC7])\n+\n+(define_int_iterator VFCVTS [UNSPEC_VFCVT UNSPEC_UNSIGNED_VFCVT])\n+\n (define_int_attr order [\n   (UNSPEC_ORDERED \"o\") (UNSPEC_UNORDERED \"u\")\n ])\n \n (define_int_attr v_su [(UNSPEC_VMULHS \"\") (UNSPEC_VMULHU \"u\") (UNSPEC_VMULHSU \"su\")\n-\t\t       (UNSPEC_VNCLIP \"\") (UNSPEC_VNCLIPU \"u\")])\n+\t\t       (UNSPEC_VNCLIP \"\") (UNSPEC_VNCLIPU \"u\")\n+\t\t       (UNSPEC_VFCVT \"\") (UNSPEC_UNSIGNED_VFCVT \"u\")\n+\t\t       (UNSPEC_WREDUC_SUM \"\") (UNSPEC_WREDUC_USUM \"u\")])\n (define_int_attr sat_op [(UNSPEC_VAADDU \"aaddu\") (UNSPEC_VAADD \"aadd\")\n \t\t\t (UNSPEC_VASUBU \"asubu\") (UNSPEC_VASUB \"asub\")\n \t\t\t (UNSPEC_VSMUL \"smul\") (UNSPEC_VSSRL \"ssrl\")\n@@ -316,7 +494,19 @@\n \t\t\t \t(UNSPEC_VSSRA \"vsshift\") (UNSPEC_VNCLIP \"vnclip\")\n \t\t\t\t(UNSPEC_VNCLIPU \"vnclip\")])\n \n-(define_int_attr misc_op [(UNSPEC_VMSBF \"sbf\") (UNSPEC_VMSIF \"sif\") (UNSPEC_VMSOF \"sof\")])\n+(define_int_attr misc_op [(UNSPEC_VMSBF \"sbf\") (UNSPEC_VMSIF \"sif\") (UNSPEC_VMSOF \"sof\")\n+\t\t\t  (UNSPEC_VFRSQRT7 \"rsqrt7\") (UNSPEC_VFREC7 \"rec7\")])\n+\n+(define_int_attr float_insn_type [(UNSPEC_VFRSQRT7 \"vfsqrt\") (UNSPEC_VFREC7 \"vfrecp\")])\n+\n+(define_int_iterator VCOPYSIGNS [UNSPEC_VCOPYSIGN UNSPEC_VNCOPYSIGN UNSPEC_VXORSIGN])\n+\n+(define_int_attr copysign [(UNSPEC_VCOPYSIGN \"copysign\")\n+\t\t\t   (UNSPEC_VNCOPYSIGN \"ncopysign\")\n+\t\t\t   (UNSPEC_VXORSIGN \"xorsign\")])\n+\n+(define_int_attr nx [(UNSPEC_VCOPYSIGN \"\") (UNSPEC_VNCOPYSIGN \"n\")\n+\t\t     (UNSPEC_VXORSIGN \"x\")])\n \n (define_code_iterator any_int_binop [plus minus and ior xor ashift ashiftrt lshiftrt\n   smax umax smin umin mult div udiv mod umod\n@@ -339,8 +529,26 @@\n \n (define_code_attr macc_nmsac [(plus \"macc\") (minus \"nmsac\")])\n (define_code_attr madd_nmsub [(plus \"madd\") (minus \"nmsub\")])\n+(define_code_attr nmacc_msac [(plus \"nmacc\") (minus \"msac\")])\n+(define_code_attr nmadd_msub [(plus \"nmadd\") (minus \"msub\")])\n \n (define_code_iterator and_ior [and ior])\n+\n+(define_code_iterator any_float_binop [plus mult smax smin minus div])\n+(define_code_iterator commutative_float_binop [plus mult smax smin])\n+(define_code_iterator non_commutative_float_binop [minus div])\n+(define_code_iterator any_float_unop [neg abs sqrt])\n+\n+(define_code_iterator any_fix [fix unsigned_fix])\n+(define_code_iterator any_float [float unsigned_float])\n+(define_code_iterator any_reduc [plus umax smax umin smin and ior xor])\n+(define_code_iterator any_freduc [smax smin])\n+(define_code_attr reduc [(plus \"sum\") (umax \"maxu\") (smax \"max\") (umin \"minu\")\n+\t\t\t (smin \"min\") (and \"and\") (ior \"or\") (xor \"xor\")])\n+\n+(define_code_attr fix_cvt [(fix \"fix_trunc\") (unsigned_fix \"fixuns_trunc\")])\n+(define_code_attr float_cvt [(float \"float\") (unsigned_float \"floatuns\")])\n+\n (define_code_attr ninsn [(and \"nand\") (ior \"nor\") (xor \"xnor\")])\n \n (define_code_attr binop_rhs1_predicate [\n@@ -459,6 +667,17 @@\n \t\t\t(minus \"walu\")\n \t\t\t(mult \"wmul\")])\n \n+(define_code_attr float_insn_type [\n+\t\t\t(plus \"vfalu\")\n+\t\t\t(mult \"vfmul\")\n+\t\t\t(smax \"vfminmax\")\n+\t\t\t(smin \"vfminmax\")\n+\t\t\t(minus \"vfalu\")\n+\t\t\t(div \"vfdiv\")\n+\t\t\t(neg \"vfsgnj\")\n+\t\t\t(abs \"vfsgnj\")\n+\t\t\t(sqrt \"vfsqrt\")])\n+\n ;; <binop_vi_variant_insn> expands to the insn name of binop matching constraint rhs1 is immediate.\n ;; minus is negated as vadd and ss_minus is negated as vsadd, others remain <insn>.\n (define_code_attr binop_vi_variant_insn [(ashift \"sll.vi\")"}, {"sha": "69b7cafbf17de199a38b4f6516230874da438f70", "filename": "gcc/config/riscv/vector.md", "status": "modified", "additions": 1758, "deletions": 35, "changes": 1793, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ee85b3255d638fd77ee3fe17a4e146c81545efb/gcc%2Fconfig%2Friscv%2Fvector.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ee85b3255d638fd77ee3fe17a4e146c81545efb/gcc%2Fconfig%2Friscv%2Fvector.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Friscv%2Fvector.md?ref=6ee85b3255d638fd77ee3fe17a4e146c81545efb", "patch": "@@ -48,7 +48,7 @@\n \t\t\t  vfcmp,vfminmax,vfsgnj,vfclass,vfmerge,vfmov,\\\n \t\t\t  vfcvtitof,vfcvtftoi,vfwcvtitof,vfwcvtftoi,\\\n \t\t\t  vfwcvtftof,vfncvtitof,vfncvtftoi,vfncvtftof,\\\n-\t\t\t  vired,viwred,vfred,vfredo,vfwred,vfwredo,\\\n+\t\t\t  vired,viwred,vfredu,vfredo,vfwredu,vfwredo,\\\n \t\t\t  vmalu,vmpop,vmffs,vmsfs,vmiota,vmidx,vimovvx,vimovxv,vfmovvf,vfmovfv,\\\n \t\t\t  vislide,vislide1,vfslide1,vgather,vcompress\")\n \t (const_string \"true\")]\n@@ -68,7 +68,7 @@\n \t\t\t  vfcmp,vfminmax,vfsgnj,vfclass,vfmerge,vfmov,\\\n \t\t\t  vfcvtitof,vfcvtftoi,vfwcvtitof,vfwcvtftoi,\\\n \t\t\t  vfwcvtftof,vfncvtitof,vfncvtftoi,vfncvtftof,\\\n-\t\t\t  vired,viwred,vfred,vfredo,vfwred,vfwredo,\\\n+\t\t\t  vired,viwred,vfredu,vfredo,vfwredu,vfwredo,\\\n \t\t\t  vmalu,vmpop,vmffs,vmsfs,vmiota,vmidx,vimovxv,vfmovfv,\\\n \t\t\t  vislide,vislide1,vfslide1,vgather,vcompress\")\n \t (const_string \"true\")]\n@@ -147,7 +147,12 @@\n \t\t\t  vext,viwalu,viwmul,vicalu,vnshift,\\\n \t\t\t  vimuladd,vimerge,vaalu,vsmul,vsshift,\\\n \t\t\t  vnclip,viminmax,viwmuladd,vmpop,vmffs,vmsfs,\\\n-\t\t\t  vmiota,vmidx\")\n+\t\t\t  vmiota,vmidx,vfalu,vfmul,vfminmax,vfdiv,\\\n+\t\t\t  vfwalu,vfwmul,vfsqrt,vfrecp,vfsgnj,vfcmp,\\\n+\t\t\t  vfmerge,vfcvtitof,vfcvtftoi,vfwcvtitof,\\\n+\t\t\t  vfwcvtftoi,vfwcvtftof,vfncvtitof,vfncvtftoi,\\\n+\t\t\t  vfncvtftof,vfmuladd,vfwmuladd,vfclass,vired,\n+\t\t\t  viwred,vfredu,vfredo,vfwredu,vfwredo\")\n \t   (const_int INVALID_ATTRIBUTE)\n \t (eq_attr \"mode\" \"VNx1QI,VNx1BI\")\n \t   (symbol_ref \"riscv_vector::get_ratio(E_VNx1QImode)\")\n@@ -200,20 +205,25 @@\n \t(cond [(eq_attr \"type\" \"vlde,vimov,vfmov,vldm,vlds,vmalu,vldux,vldox,vicmp,\\\n \t\t\t\tvialu,vshift,viminmax,vimul,vidiv,vsalu,vext,viwalu,\\\n \t\t\t\tviwmul,vnshift,vaalu,vsmul,vsshift,vnclip,vmsfs,\\\n-\t\t\t\tvmiota,vmidx\")\n+\t\t\t\tvmiota,vmidx,vfalu,vfmul,vfminmax,vfdiv,vfwalu,vfwmul,\\\n+\t\t\t\tvfsqrt,vfrecp,vfsgnj,vfcmp,vfcvtitof,vfcvtftoi,vfwcvtitof,\\\n+\t\t\t\tvfwcvtftoi,vfwcvtftof,vfncvtitof,vfncvtftoi,vfncvtftof,vfclass,\\\n+\t\t\t\tvired,viwred,vfredu,vfredo,vfwredu,vfwredo\")\n \t       (const_int 2)\n \n-\t       (eq_attr \"type\" \"vimerge\")\n+\t       (eq_attr \"type\" \"vimerge,vfmerge\")\n \t       (const_int 1)\n \n-\t       (eq_attr \"type\" \"vimuladd,viwmuladd\")\n+\t       (eq_attr \"type\" \"vimuladd,viwmuladd,vfmuladd,vfwmuladd\")\n \t       (const_int 5)]\n \t(const_int INVALID_ATTRIBUTE)))\n \n ;; The index of operand[] to get the avl op.\n (define_attr \"vl_op_idx\" \"\"\n   (cond [(eq_attr \"type\" \"vlde,vste,vimov,vfmov,vldm,vstm,vmalu,vsts,vstux,\\\n-\t\t\t  vstox,vext,vmsfs,vmiota\")\n+\t\t\t  vstox,vext,vmsfs,vmiota,vfsqrt,vfrecp,vfcvtitof,\\\n+\t\t\t  vfcvtftoi,vfwcvtitof,vfwcvtftoi,vfwcvtftof,vfncvtitof,\\\n+\t\t\t  vfncvtftoi,vfncvtftof,vfclass\")\n \t   (const_int 4)\n \n \t ;; If operands[3] of \"vlds\" is not vector mode, it is pred_broadcast.\n@@ -225,10 +235,11 @@\n \n \t (eq_attr \"type\" \"vldux,vldox,vialu,vshift,viminmax,vimul,vidiv,vsalu,\\\n \t\t\t  viwalu,viwmul,vnshift,vimerge,vaalu,vsmul,\\\n-\t\t\t  vsshift,vnclip\")\n+\t\t\t  vsshift,vnclip,vfalu,vfmul,vfminmax,vfdiv,vfwalu,vfwmul,\\\n+\t\t\t  vfsgnj,vfmerge,vired,viwred,vfredu,vfredo,vfwredu,vfwredo\")\n \t   (const_int 5)\n \n-\t (eq_attr \"type\" \"vicmp,vimuladd,viwmuladd\")\n+\t (eq_attr \"type\" \"vicmp,vimuladd,viwmuladd,vfcmp,vfmuladd,vfwmuladd\")\n \t   (const_int 6)\n \n \t (eq_attr \"type\" \"vmpop,vmffs,vmidx\")\n@@ -237,7 +248,9 @@\n \n ;; The tail policy op value.\n (define_attr \"ta\" \"\"\n-  (cond [(eq_attr \"type\" \"vlde,vimov,vfmov,vext,vmiota\")\n+  (cond [(eq_attr \"type\" \"vlde,vimov,vfmov,vext,vmiota,vfsqrt,vfrecp,\\\n+\t\t\t  vfcvtitof,vfcvtftoi,vfwcvtitof,vfwcvtftoi,vfwcvtftof,\\\n+\t\t\t  vfncvtitof,vfncvtftoi,vfncvtftof,vfclass\")\n \t   (symbol_ref \"riscv_vector::get_ta(operands[5])\")\n \n \t ;; If operands[3] of \"vlds\" is not vector mode, it is pred_broadcast.\n@@ -249,10 +262,12 @@\n \n \t (eq_attr \"type\" \"vldux,vldox,vialu,vshift,viminmax,vimul,vidiv,vsalu,\\\n \t\t\t  viwalu,viwmul,vnshift,vimerge,vaalu,vsmul,\\\n-\t\t\t  vsshift,vnclip\")\n+\t\t\t  vsshift,vnclip,vfalu,vfmul,vfminmax,vfdiv,\\\n+\t\t\t  vfwalu,vfwmul,vfsgnj,vfmerge,vired,viwred,vfredu,\\\n+\t\t\t  vfredo,vfwredu,vfwredo\")\n \t   (symbol_ref \"riscv_vector::get_ta(operands[6])\")\n \n-\t (eq_attr \"type\" \"vimuladd,viwmuladd\")\n+\t (eq_attr \"type\" \"vimuladd,viwmuladd,vfmuladd,vfwmuladd\")\n \t   (symbol_ref \"riscv_vector::get_ta(operands[7])\")\n \n \t (eq_attr \"type\" \"vmidx\")\n@@ -261,7 +276,9 @@\n \n ;; The mask policy op value.\n (define_attr \"ma\" \"\"\n-  (cond [(eq_attr \"type\" \"vlde,vext,vmiota\")\n+  (cond [(eq_attr \"type\" \"vlde,vext,vmiota,vfsqrt,vfrecp,vfcvtitof,vfcvtftoi,\\\n+\t\t\t  vfwcvtitof,vfwcvtftoi,vfwcvtftof,vfncvtitof,vfncvtftoi,\\\n+\t\t\t  vfncvtftof,vfclass\")\n \t   (symbol_ref \"riscv_vector::get_ma(operands[6])\")\n \n \t ;; If operands[3] of \"vlds\" is not vector mode, it is pred_broadcast.\n@@ -273,10 +290,11 @@\n \n \t (eq_attr \"type\" \"vldux,vldox,vialu,vshift,viminmax,vimul,vidiv,vsalu,\\\n \t\t\t  viwalu,viwmul,vnshift,vaalu,vsmul,vsshift,\\\n-\t\t\t  vnclip,vicmp\")\n+\t\t\t  vnclip,vicmp,vfalu,vfmul,vfminmax,vfdiv,\\\n+\t\t\t  vfwalu,vfwmul,vfsgnj,vfcmp\")\n \t   (symbol_ref \"riscv_vector::get_ma(operands[7])\")\n \n-\t (eq_attr \"type\" \"vimuladd,viwmuladd\")\n+\t (eq_attr \"type\" \"vimuladd,viwmuladd,vfmuladd,vfwmuladd\")\n \t   (symbol_ref \"riscv_vector::get_ma(operands[8])\")\n \n \t (eq_attr \"type\" \"vmsfs,vmidx\")\n@@ -285,7 +303,10 @@\n \n ;; The avl type value.\n (define_attr \"avl_type\" \"\"\n-  (cond [(eq_attr \"type\" \"vlde,vlde,vste,vimov,vimov,vimov,vfmov,vext,vimerge\")\n+  (cond [(eq_attr \"type\" \"vlde,vlde,vste,vimov,vimov,vimov,vfmov,vext,vimerge,\\\n+\t\t\t  vfsqrt,vfrecp,vfmerge,vfcvtitof,vfcvtftoi,vfwcvtitof,\\\n+\t\t\t  vfwcvtftoi,vfwcvtftof,vfncvtitof,vfncvtftoi,vfncvtftof,\\\n+\t\t\t  vfclass,vired,viwred,vfredu,vfredo,vfwredu,vfwredo\")\n \t   (symbol_ref \"INTVAL (operands[7])\")\n \t (eq_attr \"type\" \"vldm,vstm,vimov,vmalu,vmalu\")\n \t   (symbol_ref \"INTVAL (operands[5])\")\n@@ -299,12 +320,13 @@\n \n \t (eq_attr \"type\" \"vldux,vldox,vialu,vshift,viminmax,vimul,vidiv,vsalu,\\\n \t\t\t  viwalu,viwmul,vnshift,vimuladd,vaalu,vsmul,vsshift,\\\n-\t\t\t  vnclip,vicmp\")\n+\t\t\t  vnclip,vicmp,vfalu,vfmul,vfminmax,vfdiv,vfwalu,vfwmul,\\\n+\t\t\t  vfsgnj,vfcmp,vfmuladd\")\n \t   (symbol_ref \"INTVAL (operands[8])\")\n \t (eq_attr \"type\" \"vstux,vstox\")\n \t   (symbol_ref \"INTVAL (operands[5])\")\n \n-\t (eq_attr \"type\" \"vimuladd,viwmuladd\")\n+\t (eq_attr \"type\" \"vimuladd,viwmuladd,vfwmuladd\")\n \t   (symbol_ref \"INTVAL (operands[9])\")\n \n \t (eq_attr \"type\" \"vmsfs,vmidx\")\n@@ -974,32 +996,31 @@\n ;; To use LICM optimization, we postpone generation of vlse.v to split stage since\n ;; a memory access instruction can not be optimized by LICM (Loop invariant).\n (define_insn_and_split \"@pred_broadcast<mode>\"\n-  [(set (match_operand:V 0 \"register_operand\"                 \"=vr,  vr,  vr,  vr\")\n-\t(if_then_else:V\n+  [(set (match_operand:VI 0 \"register_operand\"                \"=vr,   vr,  vr\")\n+\t(if_then_else:VI\n \t  (unspec:<VM>\n-\t    [(match_operand:<VM> 1 \"vector_mask_operand\"      \" Wc1, Wc1, vm, Wc1\")\n-\t     (match_operand 4 \"vector_length_operand\"         \" rK,  rK,  rK,  rK\")\n-\t     (match_operand 5 \"const_int_operand\"             \"  i,   i,   i,   i\")\n-\t     (match_operand 6 \"const_int_operand\"             \"  i,   i,   i,   i\")\n-\t     (match_operand 7 \"const_int_operand\"             \"  i,   i,   i,   i\")\n+\t    [(match_operand:<VM> 1 \"vector_mask_operand\"      \" Wc1,  vm, Wc1\")\n+\t     (match_operand 4 \"vector_length_operand\"         \" rK,   rK,  rK\")\n+\t     (match_operand 5 \"const_int_operand\"             \"  i,    i,   i\")\n+\t     (match_operand 6 \"const_int_operand\"             \"  i,    i,   i\")\n+\t     (match_operand 7 \"const_int_operand\"             \"  i,    i,   i\")\n \t     (reg:SI VL_REGNUM)\n \t     (reg:SI VTYPE_REGNUM)] UNSPEC_VPREDICATE)\n-\t  (vec_duplicate:V\n-\t    (match_operand:<VEL> 3 \"direct_broadcast_operand\" \"  r,   f, Wdm, Wdm\"))\n-\t  (match_operand:V 2 \"vector_merge_operand\"           \"0vu, 0vu, 0vu, 0vu\")))]\n+\t  (vec_duplicate:VI\n+\t    (match_operand:<VEL> 3 \"direct_broadcast_operand\"  \"  r, Wdm, Wdm\"))\n+\t  (match_operand:VI 2 \"vector_merge_operand\"           \"0vu, 0vu, 0vu\")))]\n   \"TARGET_VECTOR\"\n   \"@\n    vmv.v.x\\t%0,%3\n-   vfmv.v.f\\t%0,%3\n    vlse<sew>.v\\t%0,%3,zero,%1.t\n    vlse<sew>.v\\t%0,%3,zero\"\n-  \"!FLOAT_MODE_P (<MODE>mode) && register_operand (operands[3], <VEL>mode)\n+  \"register_operand (operands[3], <VEL>mode)\n   && GET_MODE_BITSIZE (<VEL>mode) > GET_MODE_BITSIZE (Pmode)\"\n   [(set (match_dup 0)\n-\t(if_then_else:V (unspec:<VM> [(match_dup 1) (match_dup 4)\n+\t(if_then_else:VI (unspec:<VM> [(match_dup 1) (match_dup 4)\n \t     (match_dup 5) (match_dup 6) (match_dup 7)\n \t     (reg:SI VL_REGNUM) (reg:SI VTYPE_REGNUM)] UNSPEC_VPREDICATE)\n-\t  (vec_duplicate:V (match_dup 3))\n+\t  (vec_duplicate:VI (match_dup 3))\n \t  (match_dup 2)))]\n   {\n     gcc_assert (can_create_pseudo_p ());\n@@ -1010,7 +1031,29 @@\n     m = gen_rtx_MEM (<VEL>mode, force_reg (Pmode, XEXP (m, 0)));\n     operands[3] = m;\n   }\n-  [(set_attr \"type\" \"vimov,vfmov,vlds,vlds\")\n+  [(set_attr \"type\" \"vimov,vlds,vlds\")\n+   (set_attr \"mode\" \"<MODE>\")])\n+\n+(define_insn \"@pred_broadcast<mode>\"\n+  [(set (match_operand:VF 0 \"register_operand\"                \"=vr,   vr,  vr\")\n+\t(if_then_else:VF\n+\t  (unspec:<VM>\n+\t    [(match_operand:<VM> 1 \"vector_mask_operand\"      \" Wc1,  vm, Wc1\")\n+\t     (match_operand 4 \"vector_length_operand\"         \" rK,   rK,  rK\")\n+\t     (match_operand 5 \"const_int_operand\"             \"  i,    i,   i\")\n+\t     (match_operand 6 \"const_int_operand\"             \"  i,    i,   i\")\n+\t     (match_operand 7 \"const_int_operand\"             \"  i,    i,   i\")\n+\t     (reg:SI VL_REGNUM)\n+\t     (reg:SI VTYPE_REGNUM)] UNSPEC_VPREDICATE)\n+\t  (vec_duplicate:VF\n+\t    (match_operand:<VEL> 3 \"direct_broadcast_operand\"  \"  f, Wdm, Wdm\"))\n+\t  (match_operand:VF 2 \"vector_merge_operand\"           \"0vu, 0vu, 0vu\")))]\n+  \"TARGET_VECTOR\"\n+  \"@\n+   vfmv.v.f\\t%0,%3\n+   vlse<sew>.v\\t%0,%3,zero,%1.t\n+   vlse<sew>.v\\t%0,%3,zero\"\n+  [(set_attr \"type\" \"vfmov\")\n    (set_attr \"mode\" \"<MODE>\")])\n \n ;; -------------------------------------------------------------------------------\n@@ -3242,7 +3285,7 @@\n    (set_attr \"mode\" \"<V_DOUBLE_TRUNC>\")])\n \n ;; -------------------------------------------------------------------------------\n-;; ---- Predicated comparison operations\n+;; ---- Predicated integer comparison operations\n ;; -------------------------------------------------------------------------------\n ;; Includes:\n ;; - 11.8 Vector Integer Comparision Instructions\n@@ -4352,7 +4395,7 @@\n    (set_attr \"mode\" \"<MODE>\")])\n \n ;; -------------------------------------------------------------------------------\n-;; ---- Predicated integer ternary operations\n+;; ---- Predicated widen integer ternary operations\n ;; -------------------------------------------------------------------------------\n ;; Includes:\n ;; - 11.14 Vector Widening Integer Multiply-Add Instructions\n@@ -4667,3 +4710,1683 @@\n   \"vid.v\\t%0%p1\"\n   [(set_attr \"type\" \"vmidx\")\n    (set_attr \"mode\" \"<MODE>\")])\n+\n+;; -------------------------------------------------------------------------------\n+;; ---- Predicated floating-point binary operations\n+;; -------------------------------------------------------------------------------\n+;; Includes:\n+;; - 13.2 Vector Single-Width Floating-Point Add/Subtract Instructions\n+;; - 13.4 Vector Single-Width Floating-Point Multiply/Divide Instructions\n+;; - 13.11 Vector Floating-Point MIN/MAX Instructions\n+;; - 13.12 Vector Floating-Point Sign-Injection Instructions\n+;; -------------------------------------------------------------------------------\n+\n+(define_insn \"@pred_<optab><mode>\"\n+  [(set (match_operand:VF 0 \"register_operand\"           \"=vd, vr\")\n+\t(if_then_else:VF\n+\t  (unspec:<VM>\n+\t    [(match_operand:<VM> 1 \"vector_mask_operand\" \" vm,Wc1\")\n+\t     (match_operand 5 \"vector_length_operand\"    \" rK, rK\")\n+\t     (match_operand 6 \"const_int_operand\"        \"  i,  i\")\n+\t     (match_operand 7 \"const_int_operand\"        \"  i,  i\")\n+\t     (match_operand 8 \"const_int_operand\"        \"  i,  i\")\n+\t     (reg:SI VL_REGNUM)\n+\t     (reg:SI VTYPE_REGNUM)] UNSPEC_VPREDICATE)\n+\t  (any_float_binop:VF\n+\t    (match_operand:VF 3 \"register_operand\"       \" vr, vr\")\n+\t    (match_operand:VF 4 \"register_operand\"       \" vr, vr\"))\n+\t  (match_operand:VF 2 \"vector_merge_operand\"     \"0vu,0vu\")))]\n+  \"TARGET_VECTOR\"\n+  \"vf<insn>.vv\\t%0,%3,%4%p1\"\n+  [(set_attr \"type\" \"<float_insn_type>\")\n+   (set_attr \"mode\" \"<MODE>\")])\n+\n+(define_insn \"@pred_<optab><mode>_scalar\"\n+  [(set (match_operand:VF 0 \"register_operand\"           \"=vd, vr\")\n+\t(if_then_else:VF\n+\t  (unspec:<VM>\n+\t    [(match_operand:<VM> 1 \"vector_mask_operand\" \" vm,Wc1\")\n+\t     (match_operand 5 \"vector_length_operand\"    \" rK, rK\")\n+\t     (match_operand 6 \"const_int_operand\"        \"  i,  i\")\n+\t     (match_operand 7 \"const_int_operand\"        \"  i,  i\")\n+\t     (match_operand 8 \"const_int_operand\"        \"  i,  i\")\n+\t     (reg:SI VL_REGNUM)\n+\t     (reg:SI VTYPE_REGNUM)] UNSPEC_VPREDICATE)\n+\t  (commutative_float_binop:VF\n+\t    (vec_duplicate:VF\n+\t      (match_operand:<VEL> 4 \"register_operand\"  \"  r,  r\"))\n+\t    (match_operand:VF 3 \"register_operand\"       \" vr, vr\"))\n+\t  (match_operand:VF 2 \"vector_merge_operand\"     \"0vu,0vu\")))]\n+  \"TARGET_VECTOR\"\n+  \"vf<insn>.vf\\t%0,%3,%4%p1\"\n+  [(set_attr \"type\" \"<float_insn_type>\")\n+   (set_attr \"mode\" \"<MODE>\")])\n+\n+(define_insn \"@pred_<optab><mode>_scalar\"\n+  [(set (match_operand:VF 0 \"register_operand\"           \"=vd, vr\")\n+\t(if_then_else:VF\n+\t  (unspec:<VM>\n+\t    [(match_operand:<VM> 1 \"vector_mask_operand\" \" vm,Wc1\")\n+\t     (match_operand 5 \"vector_length_operand\"    \" rK, rK\")\n+\t     (match_operand 6 \"const_int_operand\"        \"  i,  i\")\n+\t     (match_operand 7 \"const_int_operand\"        \"  i,  i\")\n+\t     (match_operand 8 \"const_int_operand\"        \"  i,  i\")\n+\t     (reg:SI VL_REGNUM)\n+\t     (reg:SI VTYPE_REGNUM)] UNSPEC_VPREDICATE)\n+\t  (non_commutative_float_binop:VF\n+\t    (match_operand:VF 3 \"register_operand\"       \" vr, vr\")\n+\t    (vec_duplicate:VF\n+\t      (match_operand:<VEL> 4 \"register_operand\"  \"  r,  r\")))\n+\t  (match_operand:VF 2 \"vector_merge_operand\"     \"0vu,0vu\")))]\n+  \"TARGET_VECTOR\"\n+  \"vf<insn>.vf\\t%0,%3,%4%p1\"\n+  [(set_attr \"type\" \"<float_insn_type>\")\n+   (set_attr \"mode\" \"<MODE>\")])\n+\n+(define_insn \"@pred_<optab><mode>_reverse_scalar\"\n+  [(set (match_operand:VF 0 \"register_operand\"           \"=vd, vr\")\n+\t(if_then_else:VF\n+\t  (unspec:<VM>\n+\t    [(match_operand:<VM> 1 \"vector_mask_operand\" \" vm,Wc1\")\n+\t     (match_operand 5 \"vector_length_operand\"    \" rK, rK\")\n+\t     (match_operand 6 \"const_int_operand\"        \"  i,  i\")\n+\t     (match_operand 7 \"const_int_operand\"        \"  i,  i\")\n+\t     (match_operand 8 \"const_int_operand\"        \"  i,  i\")\n+\t     (reg:SI VL_REGNUM)\n+\t     (reg:SI VTYPE_REGNUM)] UNSPEC_VPREDICATE)\n+\t  (non_commutative_float_binop:VF\n+\t    (vec_duplicate:VF\n+\t      (match_operand:<VEL> 4 \"register_operand\"  \"  r,  r\"))\n+\t    (match_operand:VF 3 \"register_operand\"       \" vr, vr\"))\n+\t  (match_operand:VF 2 \"vector_merge_operand\"     \"0vu,0vu\")))]\n+  \"TARGET_VECTOR\"\n+  \"vfr<insn>.vf\\t%0,%3,%4%p1\"\n+  [(set_attr \"type\" \"<float_insn_type>\")\n+   (set_attr \"mode\" \"<MODE>\")])\n+\n+(define_insn \"@pred_<copysign><mode>\"\n+  [(set (match_operand:VF 0 \"register_operand\"           \"=vd, vr\")\n+\t(if_then_else:VF\n+\t  (unspec:<VM>\n+\t    [(match_operand:<VM> 1 \"vector_mask_operand\" \" vm,Wc1\")\n+\t     (match_operand 5 \"vector_length_operand\"    \" rK, rK\")\n+\t     (match_operand 6 \"const_int_operand\"        \"  i,  i\")\n+\t     (match_operand 7 \"const_int_operand\"        \"  i,  i\")\n+\t     (match_operand 8 \"const_int_operand\"        \"  i,  i\")\n+\t     (reg:SI VL_REGNUM)\n+\t     (reg:SI VTYPE_REGNUM)] UNSPEC_VPREDICATE)\n+\t  (unspec:VF\n+\t    [(match_operand:VF 3 \"register_operand\"       \" vr, vr\")\n+\t     (match_operand:VF 4 \"register_operand\"       \" vr, vr\")] VCOPYSIGNS)\n+\t  (match_operand:VF 2 \"vector_merge_operand\"     \"0vu,0vu\")))]\n+  \"TARGET_VECTOR\"\n+  \"vfsgnj<nx>.vv\\t%0,%3,%4%p1\"\n+  [(set_attr \"type\" \"vfsgnj\")\n+   (set_attr \"mode\" \"<MODE>\")])\n+\n+(define_insn \"@pred_<copysign><mode>_scalar\"\n+  [(set (match_operand:VF 0 \"register_operand\"           \"=vd, vr\")\n+\t(if_then_else:VF\n+\t  (unspec:<VM>\n+\t    [(match_operand:<VM> 1 \"vector_mask_operand\" \" vm,Wc1\")\n+\t     (match_operand 5 \"vector_length_operand\"    \" rK, rK\")\n+\t     (match_operand 6 \"const_int_operand\"        \"  i,  i\")\n+\t     (match_operand 7 \"const_int_operand\"        \"  i,  i\")\n+\t     (match_operand 8 \"const_int_operand\"        \"  i,  i\")\n+\t     (reg:SI VL_REGNUM)\n+\t     (reg:SI VTYPE_REGNUM)] UNSPEC_VPREDICATE)\n+\t  (unspec:VF\n+\t    [(match_operand:VF 3 \"register_operand\"      \" vr, vr\")\n+\t\t (vec_duplicate:VF\n+\t       (match_operand:<VEL> 4 \"register_operand\" \"  f,  f\"))] VCOPYSIGNS)\n+\t  (match_operand:VF 2 \"vector_merge_operand\"     \"0vu,0vu\")))]\n+  \"TARGET_VECTOR\"\n+  \"vfsgnj<nx>.vf\\t%0,%3,%4%p1\"\n+  [(set_attr \"type\" \"vfsgnj\")\n+   (set_attr \"mode\" \"<MODE>\")])\n+\n+;; -------------------------------------------------------------------------------\n+;; ---- Predicated floating-point ternary operations\n+;; -------------------------------------------------------------------------------\n+;; Includes:\n+;; - 13.6 Vector Single-Width Floating-Point Fused Multiply-Add Instructions\n+;; -------------------------------------------------------------------------------\n+\n+(define_expand \"@pred_mul_<optab><mode>\"\n+  [(set (match_operand:VF 0 \"register_operand\")\n+\t(if_then_else:VF\n+\t  (unspec:<VM>\n+\t    [(match_operand:<VM> 1 \"vector_mask_operand\")\n+\t     (match_operand 6 \"vector_length_operand\")\n+\t     (match_operand 7 \"const_int_operand\")\n+\t     (match_operand 8 \"const_int_operand\")\n+\t     (match_operand 9 \"const_int_operand\")\n+\t     (reg:SI VL_REGNUM)\n+\t     (reg:SI VTYPE_REGNUM)] UNSPEC_VPREDICATE)\n+\t  (plus_minus:VF\n+\t    (mult:VF\n+\t      (match_operand:VF 2 \"register_operand\")\n+\t      (match_operand:VF 3 \"register_operand\"))\n+\t    (match_operand:VF 4 \"register_operand\"))\n+\t  (match_operand:VF 5 \"vector_merge_operand\")))]\n+  \"TARGET_VECTOR\"\n+{\n+  /* Swap the multiplication operands if the fallback value is the\n+     second of the two.  */\n+  if (rtx_equal_p (operands[3], operands[5]))\n+    std::swap (operands[2], operands[3]);\n+})\n+\n+(define_insn \"pred_mul_<optab><mode>_undef_merge\"\n+  [(set (match_operand:VF 0 \"register_operand\"           \"=vd, vr, vd, vr, ?&vr\")\n+\t(if_then_else:VF\n+\t  (unspec:<VM>\n+\t    [(match_operand:<VM> 1 \"vector_mask_operand\" \" vm,Wc1, vm,Wc1,vmWc1\")\n+\t     (match_operand 6 \"vector_length_operand\"    \" rK, rK, rK, rK,   rK\")\n+\t     (match_operand 7 \"const_int_operand\"        \"  i,  i,  i,  i,    i\")\n+\t     (match_operand 8 \"const_int_operand\"        \"  i,  i,  i,  i,    i\")\n+\t     (match_operand 9 \"const_int_operand\"        \"  i,  i,  i,  i,    i\")\n+\t     (reg:SI VL_REGNUM)\n+\t     (reg:SI VTYPE_REGNUM)] UNSPEC_VPREDICATE)\n+\t  (plus_minus:VF\n+\t    (mult:VF\n+\t      (match_operand:VF 2 \"register_operand\"     \" %0,  0, vr, vr,   vr\")\n+\t      (match_operand:VF 3 \"register_operand\"     \" vr, vr, vr, vr,   vr\"))\n+\t    (match_operand:VF 4 \"register_operand\"       \" vr, vr,  0,  0,   vr\"))\n+\t  (match_operand:VF 5 \"vector_undef_operand\"     \" vu, vu, vu, vu,   vu\")))]\n+  \"TARGET_VECTOR\"\n+  \"@\n+   vf<madd_nmsub>.vv\\t%0,%3,%4%p1\n+   vf<madd_nmsub>.vv\\t%0,%3,%4%p1\n+   vf<macc_nmsac>.vv\\t%0,%2,%3%p1\n+   vf<macc_nmsac>.vv\\t%0,%2,%3%p1\n+   vmv.v.v\\t%0,%4\\;vf<macc_nmsac>.vv\\t%0,%2,%3%p1\"\n+  [(set_attr \"type\" \"vfmuladd\")\n+   (set_attr \"mode\" \"<MODE>\")])\n+\n+(define_insn \"*pred_<madd_nmsub><mode>\"\n+  [(set (match_operand:VF 0 \"register_operand\"           \"=vd, vr, ?&vr\")\n+\t(if_then_else:VF\n+\t  (unspec:<VM>\n+\t    [(match_operand:<VM> 1 \"vector_mask_operand\" \" vm,Wc1,vmWc1\")\n+\t     (match_operand 5 \"vector_length_operand\"    \" rK, rK,   rK\")\n+\t     (match_operand 6 \"const_int_operand\"        \"  i,  i,    i\")\n+\t     (match_operand 7 \"const_int_operand\"        \"  i,  i,    i\")\n+\t     (match_operand 8 \"const_int_operand\"        \"  i,  i,    i\")\n+\t     (reg:SI VL_REGNUM)\n+\t     (reg:SI VTYPE_REGNUM)] UNSPEC_VPREDICATE)\n+\t  (plus_minus:VF\n+\t    (mult:VF\n+\t      (match_operand:VF 2 \"register_operand\"     \"  0,  0,   vr\")\n+\t      (match_operand:VF 3 \"register_operand\"     \" vr, vr,   vr\"))\n+\t    (match_operand:VF 4 \"register_operand\"       \" vr, vr,   vr\"))\n+\t  (match_dup 2)))]\n+  \"TARGET_VECTOR\"\n+  \"@\n+   vf<madd_nmsub>.vv\\t%0,%3,%4%p1\n+   vf<madd_nmsub>.vv\\t%0,%3,%4%p1\n+   vmv.v.v\\t%0,%2\\;vf<madd_nmsub>.vv\\t%0,%3,%4%p1\"\n+  [(set_attr \"type\" \"vfmuladd\")\n+   (set_attr \"mode\" \"<MODE>\")\n+   (set_attr \"merge_op_idx\" \"4\")\n+   (set_attr \"vl_op_idx\" \"5\")\n+   (set (attr \"ta\") (symbol_ref \"riscv_vector::get_ta(operands[6])\"))\n+   (set (attr \"ma\") (symbol_ref \"riscv_vector::get_ma(operands[7])\"))\n+   (set (attr \"avl_type\") (symbol_ref \"INTVAL (operands[8])\"))])\n+\n+(define_insn \"*pred_<macc_nmsac><mode>\"\n+  [(set (match_operand:VF 0 \"register_operand\"           \"=vd, vr, ?&vr\")\n+\t(if_then_else:VF\n+\t  (unspec:<VM>\n+\t    [(match_operand:<VM> 1 \"vector_mask_operand\" \" vm,Wc1,vmWc1\")\n+\t     (match_operand 5 \"vector_length_operand\"    \" rK, rK,   rK\")\n+\t     (match_operand 6 \"const_int_operand\"        \"  i,  i,    i\")\n+\t     (match_operand 7 \"const_int_operand\"        \"  i,  i,    i\")\n+\t     (match_operand 8 \"const_int_operand\"        \"  i,  i,    i\")\n+\t     (reg:SI VL_REGNUM)\n+\t     (reg:SI VTYPE_REGNUM)] UNSPEC_VPREDICATE)\n+\t  (plus_minus:VF\n+\t    (mult:VF\n+\t      (match_operand:VF 2 \"register_operand\"     \" vr, vr,   vr\")\n+\t      (match_operand:VF 3 \"register_operand\"     \" vr, vr,   vr\"))\n+\t    (match_operand:VF 4 \"register_operand\"       \"  0,  0,   vr\"))\n+\t  (match_dup 4)))]\n+  \"TARGET_VECTOR\"\n+  \"@\n+   vf<macc_nmsac>.vv\\t%0,%2,%3%p1\n+   vf<macc_nmsac>.vv\\t%0,%2,%3%p1\n+   vmv.v.v\\t%0,%4\\;vf<macc_nmsac>.vv\\t%0,%2,%3%p1\"\n+  [(set_attr \"type\" \"vfmuladd\")\n+   (set_attr \"mode\" \"<MODE>\")\n+   (set_attr \"merge_op_idx\" \"2\")\n+   (set_attr \"vl_op_idx\" \"5\")\n+   (set (attr \"ta\") (symbol_ref \"riscv_vector::get_ta(operands[6])\"))\n+   (set (attr \"ma\") (symbol_ref \"riscv_vector::get_ma(operands[7])\"))\n+   (set (attr \"avl_type\") (symbol_ref \"INTVAL (operands[8])\"))])\n+\n+(define_insn_and_rewrite \"*pred_mul_<optab><mode>\"\n+  [(set (match_operand:VF 0 \"register_operand\"            \"=&vr, ?&vr\")\n+\t(if_then_else:VF\n+\t  (unspec:<VM>\n+\t    [(match_operand:<VM> 1 \"vector_mask_operand\" \"vmWc1,vmWc1\")\n+\t     (match_operand 6 \"vector_length_operand\"    \"   rK,   rK\")\n+\t     (match_operand 7 \"const_int_operand\"        \"    i,    i\")\n+\t     (match_operand 8 \"const_int_operand\"        \"    i,    i\")\n+\t     (match_operand 9 \"const_int_operand\"        \"    i,    i\")\n+\t     (reg:SI VL_REGNUM)\n+\t     (reg:SI VTYPE_REGNUM)] UNSPEC_VPREDICATE)\n+\t  (plus_minus:VF\n+\t    (mult:VF\n+\t      (match_operand:VF 2 \"register_operand\"     \"   vr,   vr\")\n+\t      (match_operand:VF 3 \"register_operand\"     \"   vr,   vr\"))\n+\t    (match_operand:VF 4 \"vector_arith_operand\"   \"   vr,   vr\"))\n+\t  (match_operand:VF 5 \"register_operand\"         \"    0,   vr\")))]\n+  \"TARGET_VECTOR\n+   && !rtx_equal_p (operands[2], operands[5])\n+   && !rtx_equal_p (operands[3], operands[5])\n+   && !rtx_equal_p (operands[4], operands[5])\"\n+  \"@\n+   vmv.v.v\\t%0,%4\\;vf<macc_nmsac>.vv\\t%0,%2,%3%p1\n+   #\"\n+  \"&& reload_completed\n+   && !rtx_equal_p (operands[0], operands[5])\"\n+  {\n+    emit_insn (gen_pred_merge<mode> (operands[0], RVV_VUNDEF (<MODE>mode),\n+\t\t\toperands[5], operands[4], operands[1], operands[6],\n+\t\t\toperands[7], operands[9]));\n+    operands[5] = operands[4] = operands[0];\n+  }\n+  [(set_attr \"type\" \"vfmuladd\")\n+   (set_attr \"mode\" \"<MODE>\")])\n+\n+(define_expand \"@pred_mul_<optab><mode>_scalar\"\n+  [(set (match_operand:VF 0 \"register_operand\")\n+\t(if_then_else:VF\n+\t  (unspec:<VM>\n+\t    [(match_operand:<VM> 1 \"vector_mask_operand\")\n+\t     (match_operand 6 \"vector_length_operand\")\n+\t     (match_operand 7 \"const_int_operand\")\n+\t     (match_operand 8 \"const_int_operand\")\n+\t     (match_operand 9 \"const_int_operand\")\n+\t     (reg:SI VL_REGNUM)\n+\t     (reg:SI VTYPE_REGNUM)] UNSPEC_VPREDICATE)\n+\t  (plus_minus:VF\n+\t    (mult:VF\n+\t      (vec_duplicate:VF\n+\t        (match_operand:<VEL> 2 \"register_operand\"))\n+\t      (match_operand:VF 3 \"register_operand\"))\n+\t    (match_operand:VF 4 \"register_operand\"))\n+\t  (match_operand:VF 5 \"vector_merge_operand\")))]\n+  \"TARGET_VECTOR\"\n+{})\n+\n+(define_insn \"*pred_mul_<optab><mode>_undef_merge_scalar\"\n+  [(set (match_operand:VF 0 \"register_operand\"             \"=vd, vr, vd, vr, ?&vr\")\n+\t(if_then_else:VF\n+\t  (unspec:<VM>\n+\t    [(match_operand:<VM> 1 \"vector_mask_operand\"   \" vm,Wc1, vm,Wc1,vmWc1\")\n+\t     (match_operand 6 \"vector_length_operand\"      \" rK, rK, rK, rK,   rK\")\n+\t     (match_operand 7 \"const_int_operand\"          \"  i,  i,  i,  i,    i\")\n+\t     (match_operand 8 \"const_int_operand\"          \"  i,  i,  i,  i,    i\")\n+\t     (match_operand 9 \"const_int_operand\"          \"  i,  i,  i,  i,    i\")\n+\t     (reg:SI VL_REGNUM)\n+\t     (reg:SI VTYPE_REGNUM)] UNSPEC_VPREDICATE)\n+\t  (plus_minus:VF\n+\t    (mult:VF\n+\t      (vec_duplicate:VF\n+\t        (match_operand:<VEL> 2 \"register_operand\" \"   f,  f,  f,  f,    f\"))\n+\t      (match_operand:VF 3 \"register_operand\"       \"  0,  0, vr, vr,   vr\"))\n+\t    (match_operand:VF 4 \"register_operand\"         \" vr, vr,  0,  0,   vr\"))\n+\t  (match_operand:VF 5 \"vector_undef_operand\"       \" vu, vu, vu, vu,   vu\")))]\n+  \"TARGET_VECTOR\"\n+  \"@\n+   vf<madd_nmsub>.vf\\t%0,%2,%4%p1\n+   vf<madd_nmsub>.vf\\t%0,%2,%4%p1\n+   vf<macc_nmsac>.vf\\t%0,%2,%3%p1\n+   vf<macc_nmsac>.vf\\t%0,%2,%3%p1\n+   vmv.v.v\\t%0,%4\\;vf<macc_nmsac>.vf\\t%0,%2,%3%p1\"\n+  [(set_attr \"type\" \"vfmuladd\")\n+   (set_attr \"mode\" \"<MODE>\")])\n+\n+(define_insn \"*pred_<madd_nmsub><mode>_scalar\"\n+  [(set (match_operand:VF 0 \"register_operand\"            \"=vd, vr, ?&vr\")\n+\t(if_then_else:VF\n+\t  (unspec:<VM>\n+\t    [(match_operand:<VM> 1 \"vector_mask_operand\"  \" vm,Wc1,vmWc1\")\n+\t     (match_operand 5 \"vector_length_operand\"     \" rK, rK,   rK\")\n+\t     (match_operand 6 \"const_int_operand\"         \"  i,  i,    i\")\n+\t     (match_operand 7 \"const_int_operand\"         \"  i,  i,    i\")\n+\t     (match_operand 8 \"const_int_operand\"         \"  i,  i,    i\")\n+\t     (reg:SI VL_REGNUM)\n+\t     (reg:SI VTYPE_REGNUM)] UNSPEC_VPREDICATE)\n+\t  (plus_minus:VF\n+\t    (mult:VF\n+\t      (vec_duplicate:VF\n+\t        (match_operand:<VEL> 2 \"register_operand\" \"  f,  f,   vr\"))\n+\t      (match_operand:VF 3 \"register_operand\"      \"  0,  0,   vr\"))\n+\t    (match_operand:VF 4 \"register_operand\"        \" vr, vr,   vr\"))\n+\t  (match_dup 3)))]\n+  \"TARGET_VECTOR\"\n+  \"@\n+   vf<madd_nmsub>.vf\\t%0,%2,%4%p1\n+   vf<madd_nmsub>.vf\\t%0,%2,%4%p1\n+   vmv.v.v\\t%0,%2\\;vf<madd_nmsub>.vf\\t%0,%2,%4%p1\"\n+  [(set_attr \"type\" \"vfmuladd\")\n+   (set_attr \"mode\" \"<MODE>\")\n+   (set_attr \"merge_op_idx\" \"4\")\n+   (set_attr \"vl_op_idx\" \"5\")\n+   (set (attr \"ta\") (symbol_ref \"riscv_vector::get_ta(operands[6])\"))\n+   (set (attr \"ma\") (symbol_ref \"riscv_vector::get_ma(operands[7])\"))\n+   (set (attr \"avl_type\") (symbol_ref \"INTVAL (operands[8])\"))])\n+\n+(define_insn \"*pred_<macc_nmsac><mode>_scalar\"\n+  [(set (match_operand:VF 0 \"register_operand\"            \"=vd, vr, ?&vr\")\n+\t(if_then_else:VF\n+\t  (unspec:<VM>\n+\t    [(match_operand:<VM> 1 \"vector_mask_operand\"  \" vm,Wc1,vmWc1\")\n+\t     (match_operand 5 \"vector_length_operand\"     \" rK, rK,   rK\")\n+\t     (match_operand 6 \"const_int_operand\"         \"  i,  i,    i\")\n+\t     (match_operand 7 \"const_int_operand\"         \"  i,  i,    i\")\n+\t     (match_operand 8 \"const_int_operand\"         \"  i,  i,    i\")\n+\t     (reg:SI VL_REGNUM)\n+\t     (reg:SI VTYPE_REGNUM)] UNSPEC_VPREDICATE)\n+\t  (plus_minus:VF\n+\t    (mult:VF\n+\t      (vec_duplicate:VF\n+\t        (match_operand:<VEL> 2 \"register_operand\" \"  f,  f,   vr\"))\n+\t      (match_operand:VF 3 \"register_operand\"      \" vr, vr,   vr\"))\n+\t    (match_operand:VF 4 \"register_operand\"        \"  0,  0,   vr\"))\n+\t  (match_dup 4)))]\n+  \"TARGET_VECTOR\"\n+  \"@\n+   vf<macc_nmsac>.vf\\t%0,%2,%3%p1\n+   vf<macc_nmsac>.vf\\t%0,%2,%3%p1\n+   vmv.v.v\\t%0,%4\\;vf<macc_nmsac>.vf\\t%0,%2,%3%p1\"\n+  [(set_attr \"type\" \"vfmuladd\")\n+   (set_attr \"mode\" \"<MODE>\")\n+   (set_attr \"merge_op_idx\" \"2\")\n+   (set_attr \"vl_op_idx\" \"5\")\n+   (set (attr \"ta\") (symbol_ref \"riscv_vector::get_ta(operands[6])\"))\n+   (set (attr \"ma\") (symbol_ref \"riscv_vector::get_ma(operands[7])\"))\n+   (set (attr \"avl_type\") (symbol_ref \"INTVAL (operands[8])\"))])\n+\n+(define_insn_and_rewrite \"*pred_mul_<optab><mode>_scalar\"\n+  [(set (match_operand:VF 0 \"register_operand\"            \"=&vr, ?&vr\")\n+\t(if_then_else:VF\n+\t  (unspec:<VM>\n+\t    [(match_operand:<VM> 1 \"vector_mask_operand\" \"vmWc1,vmWc1\")\n+\t     (match_operand 6 \"vector_length_operand\"    \"   rK,   rK\")\n+\t     (match_operand 7 \"const_int_operand\"        \"    i,    i\")\n+\t     (match_operand 8 \"const_int_operand\"        \"    i,    i\")\n+\t     (match_operand 9 \"const_int_operand\"        \"    i,    i\")\n+\t     (reg:SI VL_REGNUM)\n+\t     (reg:SI VTYPE_REGNUM)] UNSPEC_VPREDICATE)\n+\t  (plus_minus:VF\n+\t    (mult:VF\n+\t      (vec_duplicate:VF\n+\t        (match_operand:<VEL> 2 \"register_operand\" \"    f,   f\"))\n+\t      (match_operand:VF 3 \"register_operand\"      \"   vr,  vr\"))\n+\t    (match_operand:VF 4 \"vector_arith_operand\"    \"   vr,  vr\"))\n+\t  (match_operand:VF 5 \"register_operand\"          \"    0,  vr\")))]\n+  \"TARGET_VECTOR\n+   && !rtx_equal_p (operands[3], operands[5])\n+   && !rtx_equal_p (operands[4], operands[5])\"\n+  \"@\n+   vmv.v.v\\t%0,%4\\;vf<macc_nmsac>.vf\\t%0,%2,%3%p1\n+   #\"\n+  \"&& reload_completed\n+   && !rtx_equal_p (operands[0], operands[5])\"\n+  {\n+    emit_insn (gen_pred_merge<mode> (operands[0], RVV_VUNDEF (<MODE>mode),\n+\t\t\toperands[5], operands[4], operands[1], operands[6],\n+\t\t\toperands[7], operands[9]));\n+    operands[5] = operands[4] = operands[0];\n+  }\n+  [(set_attr \"type\" \"vfmuladd\")\n+   (set_attr \"mode\" \"<MODE>\")])\n+\n+(define_expand \"@pred_neg_mul_<optab><mode>\"\n+  [(set (match_operand:VF 0 \"register_operand\")\n+\t(if_then_else:VF\n+\t  (unspec:<VM>\n+\t    [(match_operand:<VM> 1 \"vector_mask_operand\")\n+\t     (match_operand 6 \"vector_length_operand\")\n+\t     (match_operand 7 \"const_int_operand\")\n+\t     (match_operand 8 \"const_int_operand\")\n+\t     (match_operand 9 \"const_int_operand\")\n+\t     (reg:SI VL_REGNUM)\n+\t     (reg:SI VTYPE_REGNUM)] UNSPEC_VPREDICATE)\n+\t  (neg:VF\n+\t    (plus_minus:VF\n+\t      (match_operand:VF 4 \"register_operand\")\n+\t      (mult:VF\n+\t        (match_operand:VF 2 \"register_operand\")\n+\t        (match_operand:VF 3 \"register_operand\"))))\n+\t  (match_operand:VF 5 \"vector_merge_operand\")))]\n+  \"TARGET_VECTOR\"\n+{\n+  /* Swap the multiplication operands if the fallback value is the\n+     second of the two.  */\n+  if (rtx_equal_p (operands[3], operands[5]))\n+    std::swap (operands[2], operands[3]);\n+})\n+\n+(define_insn \"pred_neg_mul_<optab><mode>_undef_merge\"\n+  [(set (match_operand:VF 0 \"register_operand\"           \"=vd, vr, vd, vr, ?&vr\")\n+\t(if_then_else:VF\n+\t  (unspec:<VM>\n+\t    [(match_operand:<VM> 1 \"vector_mask_operand\" \" vm,Wc1, vm,Wc1,vmWc1\")\n+\t     (match_operand 6 \"vector_length_operand\"    \" rK, rK, rK, rK,   rK\")\n+\t     (match_operand 7 \"const_int_operand\"        \"  i,  i,  i,  i,    i\")\n+\t     (match_operand 8 \"const_int_operand\"        \"  i,  i,  i,  i,    i\")\n+\t     (match_operand 9 \"const_int_operand\"        \"  i,  i,  i,  i,    i\")\n+\t     (reg:SI VL_REGNUM)\n+\t     (reg:SI VTYPE_REGNUM)] UNSPEC_VPREDICATE)\n+\t  (neg:VF\n+\t    (plus_minus:VF\n+\t      (match_operand:VF 4 \"register_operand\"     \" vr, vr,  0,  0,   vr\")\n+\t      (mult:VF\n+\t        (match_operand:VF 2 \"register_operand\"   \" %0,  0, vr, vr,   vr\")\n+\t        (match_operand:VF 3 \"register_operand\"   \" vr, vr, vr, vr,   vr\"))))\n+\t  (match_operand:VF 5 \"vector_undef_operand\"     \" vu, vu, vu, vu,   vu\")))]\n+  \"TARGET_VECTOR\"\n+  \"@\n+   vf<nmadd_msub>.vv\\t%0,%3,%4%p1\n+   vf<nmadd_msub>.vv\\t%0,%3,%4%p1\n+   vf<nmacc_msac>.vv\\t%0,%2,%3%p1\n+   vf<nmacc_msac>.vv\\t%0,%2,%3%p1\n+   vmv.v.v\\t%0,%4\\;vf<nmacc_msac>.vv\\t%0,%2,%3%p1\"\n+  [(set_attr \"type\" \"vfmuladd\")\n+   (set_attr \"mode\" \"<MODE>\")])\n+\n+(define_insn \"*pred_<nmadd_msub><mode>\"\n+  [(set (match_operand:VF 0 \"register_operand\"           \"=vd, vr, ?&vr\")\n+\t(if_then_else:VF\n+\t  (unspec:<VM>\n+\t    [(match_operand:<VM> 1 \"vector_mask_operand\" \" vm,Wc1,vmWc1\")\n+\t     (match_operand 5 \"vector_length_operand\"    \" rK, rK,   rK\")\n+\t     (match_operand 6 \"const_int_operand\"        \"  i,  i,    i\")\n+\t     (match_operand 7 \"const_int_operand\"        \"  i,  i,    i\")\n+\t     (match_operand 8 \"const_int_operand\"        \"  i,  i,    i\")\n+\t     (reg:SI VL_REGNUM)\n+\t     (reg:SI VTYPE_REGNUM)] UNSPEC_VPREDICATE)\n+\t  (neg:VF\n+\t    (plus_minus:VF\n+\t      (match_operand:VF 4 \"register_operand\"     \" vr, vr,   vr\")\n+\t      (mult:VF\n+\t        (match_operand:VF 2 \"register_operand\"   \"  0,  0,   vr\")\n+\t        (match_operand:VF 3 \"register_operand\"   \" vr, vr,   vr\"))))\n+\t  (match_dup 2)))]\n+  \"TARGET_VECTOR\"\n+  \"@\n+   vf<nmadd_msub>.vv\\t%0,%3,%4%p1\n+   vf<nmadd_msub>.vv\\t%0,%3,%4%p1\n+   vmv.v.v\\t%0,%2\\;vf<nmadd_msub>.vv\\t%0,%3,%4%p1\"\n+  [(set_attr \"type\" \"vfmuladd\")\n+   (set_attr \"mode\" \"<MODE>\")\n+   (set_attr \"merge_op_idx\" \"4\")\n+   (set_attr \"vl_op_idx\" \"5\")\n+   (set (attr \"ta\") (symbol_ref \"riscv_vector::get_ta(operands[6])\"))\n+   (set (attr \"ma\") (symbol_ref \"riscv_vector::get_ma(operands[7])\"))\n+   (set (attr \"avl_type\") (symbol_ref \"INTVAL (operands[8])\"))])\n+\n+(define_insn \"*pred_<nmacc_msac><mode>\"\n+  [(set (match_operand:VF 0 \"register_operand\"           \"=vd, vr, ?&vr\")\n+\t(if_then_else:VF\n+\t  (unspec:<VM>\n+\t    [(match_operand:<VM> 1 \"vector_mask_operand\" \" vm,Wc1,vmWc1\")\n+\t     (match_operand 5 \"vector_length_operand\"    \" rK, rK,   rK\")\n+\t     (match_operand 6 \"const_int_operand\"        \"  i,  i,    i\")\n+\t     (match_operand 7 \"const_int_operand\"        \"  i,  i,    i\")\n+\t     (match_operand 8 \"const_int_operand\"        \"  i,  i,    i\")\n+\t     (reg:SI VL_REGNUM)\n+\t     (reg:SI VTYPE_REGNUM)] UNSPEC_VPREDICATE)\n+\t  (neg:VF\n+\t    (plus_minus:VF\n+\t      (match_operand:VF 4 \"register_operand\"     \"  0,  0,   vr\")\n+\t      (mult:VF\n+\t        (match_operand:VF 2 \"register_operand\"   \" vr, vr,   vr\")\n+\t        (match_operand:VF 3 \"register_operand\"   \" vr, vr,   vr\"))))\n+\t  (match_dup 4)))]\n+  \"TARGET_VECTOR\"\n+  \"@\n+   vf<nmacc_msac>.vv\\t%0,%2,%3%p1\n+   vf<nmacc_msac>.vv\\t%0,%2,%3%p1\n+   vmv.v.v\\t%0,%4\\;vf<nmacc_msac>.vv\\t%0,%2,%3%p1\"\n+  [(set_attr \"type\" \"vfmuladd\")\n+   (set_attr \"mode\" \"<MODE>\")\n+   (set_attr \"merge_op_idx\" \"2\")\n+   (set_attr \"vl_op_idx\" \"5\")\n+   (set (attr \"ta\") (symbol_ref \"riscv_vector::get_ta(operands[6])\"))\n+   (set (attr \"ma\") (symbol_ref \"riscv_vector::get_ma(operands[7])\"))\n+   (set (attr \"avl_type\") (symbol_ref \"INTVAL (operands[8])\"))])\n+\n+(define_insn_and_rewrite \"*pred_neg_mul_<optab><mode>\"\n+  [(set (match_operand:VF 0 \"register_operand\"            \"=&vr, ?&vr\")\n+\t(if_then_else:VF\n+\t  (unspec:<VM>\n+\t    [(match_operand:<VM> 1 \"vector_mask_operand\" \"vmWc1,vmWc1\")\n+\t     (match_operand 6 \"vector_length_operand\"    \"   rK,   rK\")\n+\t     (match_operand 7 \"const_int_operand\"        \"    i,    i\")\n+\t     (match_operand 8 \"const_int_operand\"        \"    i,    i\")\n+\t     (match_operand 9 \"const_int_operand\"        \"    i,    i\")\n+\t     (reg:SI VL_REGNUM)\n+\t     (reg:SI VTYPE_REGNUM)] UNSPEC_VPREDICATE)\n+\t  (neg:VF\n+\t    (plus_minus:VF\n+\t      (match_operand:VF 4 \"vector_arith_operand\" \"   vr,   vr\")\n+\t      (mult:VF\n+\t        (match_operand:VF 2 \"register_operand\"   \"   vr,   vr\")\n+\t        (match_operand:VF 3 \"register_operand\"   \"   vr,   vr\"))))\n+\t  (match_operand:VF 5 \"register_operand\"         \"    0,   vr\")))]\n+  \"TARGET_VECTOR\n+   && !rtx_equal_p (operands[2], operands[5])\n+   && !rtx_equal_p (operands[3], operands[5])\n+   && !rtx_equal_p (operands[4], operands[5])\"\n+  \"@\n+   vmv.v.v\\t%0,%4\\;vf<nmacc_msac>.vv\\t%0,%2,%3%p1\n+   #\"\n+  \"&& reload_completed\n+   && !rtx_equal_p (operands[0], operands[5])\"\n+  {\n+    emit_insn (gen_pred_merge<mode> (operands[0], RVV_VUNDEF (<MODE>mode),\n+\t\t\toperands[5], operands[4], operands[1], operands[6],\n+\t\t\toperands[7], operands[9]));\n+    operands[5] = operands[4] = operands[0];\n+  }\n+  [(set_attr \"type\" \"vfmuladd\")\n+   (set_attr \"mode\" \"<MODE>\")])\n+\n+(define_expand \"@pred_neg_mul_<optab><mode>_scalar\"\n+  [(set (match_operand:VF 0 \"register_operand\")\n+\t(if_then_else:VF\n+\t  (unspec:<VM>\n+\t    [(match_operand:<VM> 1 \"vector_mask_operand\")\n+\t     (match_operand 6 \"vector_length_operand\")\n+\t     (match_operand 7 \"const_int_operand\")\n+\t     (match_operand 8 \"const_int_operand\")\n+\t     (match_operand 9 \"const_int_operand\")\n+\t     (reg:SI VL_REGNUM)\n+\t     (reg:SI VTYPE_REGNUM)] UNSPEC_VPREDICATE)\n+\t  (neg:VF\n+\t    (plus_minus:VF\n+\t      (match_operand:VF 4 \"register_operand\")\n+\t      (mult:VF\n+\t        (vec_duplicate:VF\n+\t          (match_operand:<VEL> 2 \"register_operand\"))\n+\t        (match_operand:VF 3 \"register_operand\"))))\n+\t  (match_operand:VF 5 \"vector_merge_operand\")))]\n+  \"TARGET_VECTOR\"\n+{})\n+\n+(define_insn \"*pred_neg_mul_<optab><mode>_undef_merge_scalar\"\n+  [(set (match_operand:VF 0 \"register_operand\"             \"=vd, vr, vd, vr, ?&vr\")\n+\t(if_then_else:VF\n+\t  (unspec:<VM>\n+\t    [(match_operand:<VM> 1 \"vector_mask_operand\"   \" vm,Wc1, vm,Wc1,vmWc1\")\n+\t     (match_operand 6 \"vector_length_operand\"      \" rK, rK, rK, rK,   rK\")\n+\t     (match_operand 7 \"const_int_operand\"          \"  i,  i,  i,  i,    i\")\n+\t     (match_operand 8 \"const_int_operand\"          \"  i,  i,  i,  i,    i\")\n+\t     (match_operand 9 \"const_int_operand\"          \"  i,  i,  i,  i,    i\")\n+\t     (reg:SI VL_REGNUM)\n+\t     (reg:SI VTYPE_REGNUM)] UNSPEC_VPREDICATE)\n+\t  (neg:VF\n+\t    (plus_minus:VF\n+\t      (match_operand:VF 4 \"register_operand\"         \" vr, vr,  0,  0,   vr\")\n+\t      (mult:VF\n+\t        (vec_duplicate:VF\n+\t          (match_operand:<VEL> 2 \"register_operand\"  \"  f,  f,  f,  f,    f\"))\n+\t        (match_operand:VF 3 \"register_operand\"       \"  0,  0, vr, vr,   vr\"))))\n+\t  (match_operand:VF 5 \"vector_undef_operand\"       \" vu, vu, vu, vu,   vu\")))]\n+  \"TARGET_VECTOR\"\n+  \"@\n+   vf<nmadd_msub>.vf\\t%0,%2,%4%p1\n+   vf<nmadd_msub>.vf\\t%0,%2,%4%p1\n+   vf<nmacc_msac>.vf\\t%0,%2,%3%p1\n+   vf<nmacc_msac>.vf\\t%0,%2,%3%p1\n+   vmv.v.v\\t%0,%4\\;vf<nmacc_msac>.vf\\t%0,%2,%3%p1\"\n+  [(set_attr \"type\" \"vfmuladd\")\n+   (set_attr \"mode\" \"<MODE>\")])\n+\n+(define_insn \"*pred_<nmadd_msub><mode>_scalar\"\n+  [(set (match_operand:VF 0 \"register_operand\"              \"=vd, vr, ?&vr\")\n+\t(if_then_else:VF\n+\t  (unspec:<VM>\n+\t    [(match_operand:<VM> 1 \"vector_mask_operand\"    \" vm,Wc1,vmWc1\")\n+\t     (match_operand 5 \"vector_length_operand\"       \" rK, rK,   rK\")\n+\t     (match_operand 6 \"const_int_operand\"           \"  i,  i,    i\")\n+\t     (match_operand 7 \"const_int_operand\"           \"  i,  i,    i\")\n+\t     (match_operand 8 \"const_int_operand\"           \"  i,  i,    i\")\n+\t     (reg:SI VL_REGNUM)\n+\t     (reg:SI VTYPE_REGNUM)] UNSPEC_VPREDICATE)\n+\t  (neg:VF\n+\t    (plus_minus:VF\n+\t      (match_operand:VF 4 \"register_operand\"        \" vr, vr,   vr\")\n+\t      (mult:VF\n+\t        (vec_duplicate:VF\n+\t          (match_operand:<VEL> 2 \"register_operand\" \"  f,  f,   vr\"))\n+\t        (match_operand:VF 3 \"register_operand\"      \"  0,  0,   vr\"))))\n+\t  (match_dup 3)))]\n+  \"TARGET_VECTOR\"\n+  \"@\n+   vf<nmadd_msub>.vf\\t%0,%2,%4%p1\n+   vf<nmadd_msub>.vf\\t%0,%2,%4%p1\n+   vmv.v.v\\t%0,%2\\;vf<nmadd_msub>.vf\\t%0,%2,%4%p1\"\n+  [(set_attr \"type\" \"vfmuladd\")\n+   (set_attr \"mode\" \"<MODE>\")\n+   (set_attr \"merge_op_idx\" \"4\")\n+   (set_attr \"vl_op_idx\" \"5\")\n+   (set (attr \"ta\") (symbol_ref \"riscv_vector::get_ta(operands[6])\"))\n+   (set (attr \"ma\") (symbol_ref \"riscv_vector::get_ma(operands[7])\"))\n+   (set (attr \"avl_type\") (symbol_ref \"INTVAL (operands[8])\"))])\n+\n+(define_insn \"*pred_<nmacc_msac><mode>_scalar\"\n+  [(set (match_operand:VF 0 \"register_operand\"              \"=vd, vr, ?&vr\")\n+\t(if_then_else:VF\n+\t  (unspec:<VM>\n+\t    [(match_operand:<VM> 1 \"vector_mask_operand\"    \" vm,Wc1,vmWc1\")\n+\t     (match_operand 5 \"vector_length_operand\"       \" rK, rK,   rK\")\n+\t     (match_operand 6 \"const_int_operand\"           \"  i,  i,    i\")\n+\t     (match_operand 7 \"const_int_operand\"           \"  i,  i,    i\")\n+\t     (match_operand 8 \"const_int_operand\"           \"  i,  i,    i\")\n+\t     (reg:SI VL_REGNUM)\n+\t     (reg:SI VTYPE_REGNUM)] UNSPEC_VPREDICATE)\n+\t  (neg:VF\n+\t    (plus_minus:VF\n+\t      (match_operand:VF 4 \"register_operand\"        \"  0,  0,   vr\")\n+\t      (mult:VF\n+\t        (vec_duplicate:VF\n+\t          (match_operand:<VEL> 2 \"register_operand\" \"  f,  f,   vr\"))\n+\t        (match_operand:VF 3 \"register_operand\"      \" vr, vr,   vr\"))))\n+\t  (match_dup 4)))]\n+  \"TARGET_VECTOR\"\n+  \"@\n+   vf<nmacc_msac>.vf\\t%0,%2,%3%p1\n+   vf<nmacc_msac>.vf\\t%0,%2,%3%p1\n+   vmv.v.v\\t%0,%4\\;vf<nmacc_msac>.vf\\t%0,%2,%3%p1\"\n+  [(set_attr \"type\" \"vfmuladd\")\n+   (set_attr \"mode\" \"<MODE>\")\n+   (set_attr \"merge_op_idx\" \"2\")\n+   (set_attr \"vl_op_idx\" \"5\")\n+   (set (attr \"ta\") (symbol_ref \"riscv_vector::get_ta(operands[6])\"))\n+   (set (attr \"ma\") (symbol_ref \"riscv_vector::get_ma(operands[7])\"))\n+   (set (attr \"avl_type\") (symbol_ref \"INTVAL (operands[8])\"))])\n+\n+(define_insn_and_rewrite \"*pred_neg_mul_<optab><mode>_scalar\"\n+  [(set (match_operand:VF 0 \"register_operand\"              \"=&vr, ?&vr\")\n+\t(if_then_else:VF\n+\t  (unspec:<VM>\n+\t    [(match_operand:<VM> 1 \"vector_mask_operand\"   \"vmWc1,vmWc1\")\n+\t     (match_operand 6 \"vector_length_operand\"      \"   rK,   rK\")\n+\t     (match_operand 7 \"const_int_operand\"          \"    i,    i\")\n+\t     (match_operand 8 \"const_int_operand\"          \"    i,    i\")\n+\t     (match_operand 9 \"const_int_operand\"          \"    i,    i\")\n+\t     (reg:SI VL_REGNUM)\n+\t     (reg:SI VTYPE_REGNUM)] UNSPEC_VPREDICATE)\n+\t  (neg:VF\n+\t    (plus_minus:VF\n+\t      (match_operand:VF 4 \"vector_arith_operand\"    \"   vr,  vr\")\n+\t      (mult:VF\n+\t        (vec_duplicate:VF\n+\t          (match_operand:<VEL> 2 \"register_operand\" \"    f,   f\"))\n+\t        (match_operand:VF 3 \"register_operand\"      \"   vr,  vr\"))))\n+\t  (match_operand:VF 5 \"register_operand\"            \"    0,  vr\")))]\n+  \"TARGET_VECTOR\n+   && !rtx_equal_p (operands[3], operands[5])\n+   && !rtx_equal_p (operands[4], operands[5])\"\n+  \"@\n+   vmv.v.v\\t%0,%4\\;vf<nmacc_msac>.vf\\t%0,%2,%3%p1\n+   #\"\n+  \"&& reload_completed\n+   && !rtx_equal_p (operands[0], operands[5])\"\n+  {\n+    emit_insn (gen_pred_merge<mode> (operands[0], RVV_VUNDEF (<MODE>mode),\n+\t\t\toperands[5], operands[4], operands[1], operands[6],\n+\t\t\toperands[7], operands[9]));\n+    operands[5] = operands[4] = operands[0];\n+  }\n+  [(set_attr \"type\" \"vfmuladd\")\n+   (set_attr \"mode\" \"<MODE>\")])\n+\n+;; -------------------------------------------------------------------------------\n+;; ---- Predicated floating-point unary operations\n+;; -------------------------------------------------------------------------------\n+;; Includes:\n+;; - 13.8 Vector Floating-Point Square-Root Instruction\n+;; - 13.9 Vector Floating-Point Reciprocal Square-Root Estimate Instruction\n+;; - 13.10 Vector Floating-Point Reciprocal Estimate Instruction\n+;; - 13.12 Vector Floating-Point Sign-Injection Instructions (vfneg.v/vfabs.v)\n+;; - 13.14 Vector Floating-Point Classify Instruction\n+;; -------------------------------------------------------------------------------\n+\n+(define_insn \"@pred_<optab><mode>\"\n+  [(set (match_operand:VF 0 \"register_operand\"           \"=vd, vr\")\n+\t(if_then_else:VF\n+\t  (unspec:<VM>\n+\t    [(match_operand:<VM> 1 \"vector_mask_operand\" \" vm,Wc1\")\n+\t     (match_operand 4 \"vector_length_operand\"    \" rK, rK\")\n+\t     (match_operand 5 \"const_int_operand\"        \"  i,  i\")\n+\t     (match_operand 6 \"const_int_operand\"        \"  i,  i\")\n+\t     (match_operand 7 \"const_int_operand\"        \"  i,  i\")\n+\t     (reg:SI VL_REGNUM)\n+\t     (reg:SI VTYPE_REGNUM)] UNSPEC_VPREDICATE)\n+\t  (any_float_unop:VF\n+\t    (match_operand:VF 3 \"register_operand\"       \" vr, vr\"))\n+\t  (match_operand:VF 2 \"vector_merge_operand\"     \"0vu,0vu\")))]\n+  \"TARGET_VECTOR\"\n+  \"vf<insn>.v\\t%0,%3%p1\"\n+  [(set_attr \"type\" \"<float_insn_type>\")\n+   (set_attr \"mode\" \"<MODE>\")\n+   (set_attr \"vl_op_idx\" \"4\")\n+   (set (attr \"ta\") (symbol_ref \"riscv_vector::get_ta(operands[5])\"))\n+   (set (attr \"ma\") (symbol_ref \"riscv_vector::get_ma(operands[6])\"))\n+   (set (attr \"avl_type\") (symbol_ref \"INTVAL (operands[7])\"))])\n+\n+(define_insn \"@pred_<misc_op><mode>\"\n+  [(set (match_operand:VF 0 \"register_operand\"           \"=vd, vr\")\n+\t(if_then_else:VF\n+\t  (unspec:<VM>\n+\t    [(match_operand:<VM> 1 \"vector_mask_operand\" \" vm,Wc1\")\n+\t     (match_operand 4 \"vector_length_operand\"    \" rK, rK\")\n+\t     (match_operand 5 \"const_int_operand\"        \"  i,  i\")\n+\t     (match_operand 6 \"const_int_operand\"        \"  i,  i\")\n+\t     (match_operand 7 \"const_int_operand\"        \"  i,  i\")\n+\t     (reg:SI VL_REGNUM)\n+\t     (reg:SI VTYPE_REGNUM)] UNSPEC_VPREDICATE)\n+\t  (unspec:VF\n+\t    [(match_operand:VF 3 \"register_operand\"       \" vr, vr\")] VFMISC)\n+\t  (match_operand:VF 2 \"vector_merge_operand\"     \"0vu,0vu\")))]\n+  \"TARGET_VECTOR\"\n+  \"vf<misc_op>.v\\t%0,%3%p1\"\n+  [(set_attr \"type\" \"<float_insn_type>\")\n+   (set_attr \"mode\" \"<MODE>\")])\n+\n+(define_insn \"@pred_class<mode>\"\n+  [(set (match_operand:<VCONVERT> 0 \"register_operand\"   \"=vd, vr\")\n+\t(if_then_else:<VCONVERT>\n+\t  (unspec:<VM>\n+\t    [(match_operand:<VM> 1 \"vector_mask_operand\"     \" vm,Wc1\")\n+\t     (match_operand 4 \"vector_length_operand\"        \" rK, rK\")\n+\t     (match_operand 5 \"const_int_operand\"            \"  i,  i\")\n+\t     (match_operand 6 \"const_int_operand\"            \"  i,  i\")\n+\t     (match_operand 7 \"const_int_operand\"            \"  i,  i\")\n+\t     (reg:SI VL_REGNUM)\n+\t     (reg:SI VTYPE_REGNUM)] UNSPEC_VPREDICATE)\n+\t  (unspec:<VCONVERT>\n+\t    [(match_operand:VF 3 \"register_operand\"          \" vr, vr\")] UNSPEC_VFCLASS)\n+\t  (match_operand:<VCONVERT> 2 \"vector_merge_operand\" \"0vu,0vu\")))]\n+  \"TARGET_VECTOR\"\n+  \"vfclass.v\\t%0,%3%p1\"\n+  [(set_attr \"type\" \"vfclass\")\n+   (set_attr \"mode\" \"<MODE>\")])\n+\n+;; -------------------------------------------------------------------------------\n+;; ---- Predicated floating-point widen binary operations\n+;; -------------------------------------------------------------------------------\n+;; Includes:\n+;; - 13.3 Vector Widening Floating-Point Add/Subtract Instructions\n+;; - 13.5 Vector Widening Floating-Point Multiply\n+;; -------------------------------------------------------------------------------\n+\n+;; Vector Widening Add/Subtract/Multiply.\n+(define_insn \"@pred_dual_widen_<optab><mode>\"\n+  [(set (match_operand:VWEXTF 0 \"register_operand\"                  \"=&vr\")\n+\t(if_then_else:VWEXTF\n+\t  (unspec:<VM>\n+\t    [(match_operand:<VM> 1 \"vector_mask_operand\"           \"vmWc1\")\n+\t     (match_operand 5 \"vector_length_operand\"              \"   rK\")\n+\t     (match_operand 6 \"const_int_operand\"                  \"    i\")\n+\t     (match_operand 7 \"const_int_operand\"                  \"    i\")\n+\t     (match_operand 8 \"const_int_operand\"                  \"    i\")\n+\t     (reg:SI VL_REGNUM)\n+\t     (reg:SI VTYPE_REGNUM)] UNSPEC_VPREDICATE)\n+\t  (any_widen_binop:VWEXTF\n+\t    (float_extend:VWEXTF\n+\t      (match_operand:<V_DOUBLE_TRUNC> 3 \"register_operand\" \"   vr\"))\n+\t    (float_extend:VWEXTF\n+\t      (match_operand:<V_DOUBLE_TRUNC> 4 \"register_operand\" \"   vr\")))\n+\t  (match_operand:VWEXTF 2 \"vector_merge_operand\"           \"  0vu\")))]\n+  \"TARGET_VECTOR\"\n+  \"vfw<insn>.vv\\t%0,%3,%4%p1\"\n+  [(set_attr \"type\" \"vf<widen_binop_insn_type>\")\n+   (set_attr \"mode\" \"<V_DOUBLE_TRUNC>\")])\n+\n+(define_insn \"@pred_dual_widen_<optab><mode>_scalar\"\n+  [(set (match_operand:VWEXTF 0 \"register_operand\"                  \"=&vr\")\n+\t(if_then_else:VWEXTF\n+\t  (unspec:<VM>\n+\t    [(match_operand:<VM> 1 \"vector_mask_operand\"           \"vmWc1\")\n+\t     (match_operand 5 \"vector_length_operand\"              \"   rK\")\n+\t     (match_operand 6 \"const_int_operand\"                  \"    i\")\n+\t     (match_operand 7 \"const_int_operand\"                  \"    i\")\n+\t     (match_operand 8 \"const_int_operand\"                  \"    i\")\n+\t     (reg:SI VL_REGNUM)\n+\t     (reg:SI VTYPE_REGNUM)] UNSPEC_VPREDICATE)\n+\t  (any_widen_binop:VWEXTF\n+\t    (float_extend:VWEXTF\n+\t      (match_operand:<V_DOUBLE_TRUNC> 3 \"register_operand\" \"   vr\"))\n+\t    (float_extend:VWEXTF\n+\t      (vec_duplicate:<V_DOUBLE_TRUNC>\n+\t\t(match_operand:<VSUBEL> 4 \"register_operand\"       \"    f\"))))\n+\t  (match_operand:VWEXTF 2 \"vector_merge_operand\"           \"  0vu\")))]\n+  \"TARGET_VECTOR\"\n+  \"vfw<insn>.vf\\t%0,%3,%4%p1\"\n+  [(set_attr \"type\" \"vf<widen_binop_insn_type>\")\n+   (set_attr \"mode\" \"<V_DOUBLE_TRUNC>\")])\n+\n+(define_insn \"@pred_single_widen_<plus_minus:optab><mode>\"\n+  [(set (match_operand:VWEXTF 0 \"register_operand\"                  \"=&vr\")\n+\t(if_then_else:VWEXTF\n+\t  (unspec:<VM>\n+\t    [(match_operand:<VM> 1 \"vector_mask_operand\"           \"vmWc1\")\n+\t     (match_operand 5 \"vector_length_operand\"              \"   rK\")\n+\t     (match_operand 6 \"const_int_operand\"                  \"    i\")\n+\t     (match_operand 7 \"const_int_operand\"                  \"    i\")\n+\t     (match_operand 8 \"const_int_operand\"                  \"    i\")\n+\t     (reg:SI VL_REGNUM)\n+\t     (reg:SI VTYPE_REGNUM)] UNSPEC_VPREDICATE)\n+\t  (plus_minus:VWEXTF\n+\t    (match_operand:VWEXTF 3 \"register_operand\"             \"   vr\")\n+\t    (float_extend:VWEXTF\n+\t      (match_operand:<V_DOUBLE_TRUNC> 4 \"register_operand\" \"   vr\")))\n+\t  (match_operand:VWEXTF 2 \"vector_merge_operand\"           \"  0vu\")))]\n+  \"TARGET_VECTOR\"\n+  \"vfw<insn>.wv\\t%0,%3,%4%p1\"\n+  [(set_attr \"type\" \"vf<widen_binop_insn_type>\")\n+   (set_attr \"mode\" \"<V_DOUBLE_TRUNC>\")])\n+\n+(define_insn \"@pred_single_widen_<plus_minus:optab><mode>_scalar\"\n+  [(set (match_operand:VWEXTF 0 \"register_operand\"                  \"=&vr\")\n+\t(if_then_else:VWEXTF\n+\t  (unspec:<VM>\n+\t    [(match_operand:<VM> 1 \"vector_mask_operand\"           \"vmWc1\")\n+\t     (match_operand 5 \"vector_length_operand\"              \"   rK\")\n+\t     (match_operand 6 \"const_int_operand\"                  \"    i\")\n+\t     (match_operand 7 \"const_int_operand\"                  \"    i\")\n+\t     (match_operand 8 \"const_int_operand\"                  \"    i\")\n+\t     (reg:SI VL_REGNUM)\n+\t     (reg:SI VTYPE_REGNUM)] UNSPEC_VPREDICATE)\n+\t  (plus_minus:VWEXTF\n+\t    (match_operand:VWEXTF 3 \"register_operand\"             \"   vr\")\n+\t    (float_extend:VWEXTF\n+\t      (vec_duplicate:<V_DOUBLE_TRUNC>\n+\t\t(match_operand:<VSUBEL> 4 \"register_operand\"       \"    f\"))))\n+\t  (match_operand:VWEXTF 2 \"vector_merge_operand\"           \"  0vu\")))]\n+  \"TARGET_VECTOR\"\n+  \"vfw<insn>.wf\\t%0,%3,%4%p1\"\n+  [(set_attr \"type\" \"vf<widen_binop_insn_type>\")\n+   (set_attr \"mode\" \"<V_DOUBLE_TRUNC>\")])\n+\n+;; -------------------------------------------------------------------------------\n+;; ---- Predicated widen floating-point ternary operations\n+;; -------------------------------------------------------------------------------\n+;; Includes:\n+;; - 13.7 Vector Widening Floating-Point Fused Multiply-Add Instructions\n+;; -------------------------------------------------------------------------------\n+\n+(define_insn \"@pred_widen_mul_<optab><mode>\"\n+  [(set (match_operand:VWEXTF 0 \"register_operand\"                    \"=&vr\")\n+\t(if_then_else:VWEXTF\n+\t  (unspec:<VM>\n+\t    [(match_operand:<VM> 1 \"vector_mask_operand\"             \"vmWc1\")\n+\t     (match_operand 6 \"vector_length_operand\"                \"   rK\")\n+\t     (match_operand 7 \"const_int_operand\"                    \"    i\")\n+\t     (match_operand 8 \"const_int_operand\"                    \"    i\")\n+\t     (match_operand 9 \"const_int_operand\"                    \"    i\")\n+\t     (reg:SI VL_REGNUM)\n+\t     (reg:SI VTYPE_REGNUM)] UNSPEC_VPREDICATE)\n+\t  (plus_minus:VWEXTF\n+\t    (match_operand:VWEXTF 2 \"register_operand\"               \"    0\")\n+\t    (mult:VWEXTF\n+\t      (float_extend:VWEXTF\n+\t        (match_operand:<V_DOUBLE_TRUNC> 3 \"register_operand\" \"   vr\"))\n+\t      (float_extend:VWEXTF\n+\t        (match_operand:<V_DOUBLE_TRUNC> 4 \"register_operand\" \"   vr\"))))\n+\t  (match_operand:VWEXTF 5 \"vector_merge_operand\"             \"  0vu\")))]\n+  \"TARGET_VECTOR\"\n+  \"vfw<macc_nmsac>.vv\\t%0,%3,%4%p1\"\n+  [(set_attr \"type\" \"vfwmuladd\")\n+   (set_attr \"mode\" \"<V_DOUBLE_TRUNC>\")])\n+\n+(define_insn \"@pred_widen_mul_<optab><mode>_scalar\"\n+  [(set (match_operand:VWEXTF 0 \"register_operand\"                    \"=&vr\")\n+\t(if_then_else:VWEXTF\n+\t  (unspec:<VM>\n+\t    [(match_operand:<VM> 1 \"vector_mask_operand\"             \"vmWc1\")\n+\t     (match_operand 6 \"vector_length_operand\"                \"   rK\")\n+\t     (match_operand 7 \"const_int_operand\"                    \"    i\")\n+\t     (match_operand 8 \"const_int_operand\"                    \"    i\")\n+\t     (match_operand 9 \"const_int_operand\"                    \"    i\")\n+\t     (reg:SI VL_REGNUM)\n+\t     (reg:SI VTYPE_REGNUM)] UNSPEC_VPREDICATE)\n+\t  (plus_minus:VWEXTF\n+\t    (match_operand:VWEXTF 2 \"register_operand\"               \"    0\")\n+\t    (mult:VWEXTF\n+\t      (float_extend:VWEXTF\n+\t        (vec_duplicate:<V_DOUBLE_TRUNC>\n+\t          (match_operand:<VSUBEL> 3 \"register_operand\"       \"    r\")))\n+\t      (float_extend:VWEXTF\n+\t        (match_operand:<V_DOUBLE_TRUNC> 4 \"register_operand\" \"   vr\"))))\n+\t  (match_operand:VWEXTF 5 \"vector_merge_operand\"             \"  0vu\")))]\n+  \"TARGET_VECTOR\"\n+  \"vfw<macc_nmsac>.vf\\t%0,%3,%4%p1\"\n+  [(set_attr \"type\" \"vfwmuladd\")\n+   (set_attr \"mode\" \"<V_DOUBLE_TRUNC>\")])\n+\n+(define_insn \"@pred_widen_neg_mul_<optab><mode>\"\n+  [(set (match_operand:VWEXTF 0 \"register_operand\"                      \"=&vr\")\n+\t(if_then_else:VWEXTF\n+\t  (unspec:<VM>\n+\t    [(match_operand:<VM> 1 \"vector_mask_operand\"               \"vmWc1\")\n+\t     (match_operand 6 \"vector_length_operand\"                  \"   rK\")\n+\t     (match_operand 7 \"const_int_operand\"                      \"    i\")\n+\t     (match_operand 8 \"const_int_operand\"                      \"    i\")\n+\t     (match_operand 9 \"const_int_operand\"                      \"    i\")\n+\t     (reg:SI VL_REGNUM)\n+\t     (reg:SI VTYPE_REGNUM)] UNSPEC_VPREDICATE)\n+\t  (neg:VWEXTF\n+\t    (plus_minus:VWEXTF\n+\t      (match_operand:VWEXTF 2 \"register_operand\"               \"    0\")\n+\t      (mult:VWEXTF\n+\t        (float_extend:VWEXTF\n+\t          (match_operand:<V_DOUBLE_TRUNC> 3 \"register_operand\" \"   vr\"))\n+\t        (float_extend:VWEXTF\n+\t          (match_operand:<V_DOUBLE_TRUNC> 4 \"register_operand\" \"   vr\")))))\n+\t  (match_operand:VWEXTF 5 \"vector_merge_operand\"               \"  0vu\")))]\n+  \"TARGET_VECTOR\"\n+  \"vfw<nmacc_msac>.vv\\t%0,%3,%4%p1\"\n+  [(set_attr \"type\" \"vfwmuladd\")\n+   (set_attr \"mode\" \"<V_DOUBLE_TRUNC>\")])\n+\n+(define_insn \"@pred_widen_neg_mul_<optab><mode>_scalar\"\n+  [(set (match_operand:VWEXTF 0 \"register_operand\"                      \"=&vr\")\n+\t(if_then_else:VWEXTF\n+\t  (unspec:<VM>\n+\t    [(match_operand:<VM> 1 \"vector_mask_operand\"               \"vmWc1\")\n+\t     (match_operand 6 \"vector_length_operand\"                  \"   rK\")\n+\t     (match_operand 7 \"const_int_operand\"                      \"    i\")\n+\t     (match_operand 8 \"const_int_operand\"                      \"    i\")\n+\t     (match_operand 9 \"const_int_operand\"                      \"    i\")\n+\t     (reg:SI VL_REGNUM)\n+\t     (reg:SI VTYPE_REGNUM)] UNSPEC_VPREDICATE)\n+\t  (neg:VWEXTF\n+\t    (plus_minus:VWEXTF\n+\t      (match_operand:VWEXTF 2 \"register_operand\"               \"    0\")\n+\t      (mult:VWEXTF\n+\t        (float_extend:VWEXTF\n+\t          (vec_duplicate:<V_DOUBLE_TRUNC>\n+\t            (match_operand:<VSUBEL> 3 \"register_operand\"       \"    r\")))\n+\t        (float_extend:VWEXTF\n+\t          (match_operand:<V_DOUBLE_TRUNC> 4 \"register_operand\" \"   vr\")))))\n+\t  (match_operand:VWEXTF 5 \"vector_merge_operand\"               \"  0vu\")))]\n+  \"TARGET_VECTOR\"\n+  \"vfw<nmacc_msac>.vf\\t%0,%3,%4%p1\"\n+  [(set_attr \"type\" \"vfwmuladd\")\n+   (set_attr \"mode\" \"<V_DOUBLE_TRUNC>\")])\n+\n+;; -------------------------------------------------------------------------------\n+;; ---- Predicated floating-point comparison operations\n+;; -------------------------------------------------------------------------------\n+;; Includes:\n+;; - 13.13 Vector Floating-Point Compare Instructions\n+;; -------------------------------------------------------------------------------\n+\n+(define_expand \"@pred_cmp<mode>\"\n+  [(set (match_operand:<VM> 0 \"register_operand\")\n+\t(if_then_else:<VM>\n+\t  (unspec:<VM>\n+\t    [(match_operand:<VM> 1 \"vector_mask_operand\")\n+\t     (match_operand 6 \"vector_length_operand\")\n+\t     (match_operand 7 \"const_int_operand\")\n+\t     (match_operand 8 \"const_int_operand\")\n+\t     (reg:SI VL_REGNUM)\n+\t     (reg:SI VTYPE_REGNUM)] UNSPEC_VPREDICATE)\n+\t  (match_operator:<VM> 3 \"signed_order_operator\"\n+\t     [(match_operand:VF 4 \"register_operand\")\n+\t      (match_operand:VF 5 \"register_operand\")])\n+\t  (match_operand:<VM> 2 \"vector_merge_operand\")))]\n+  \"TARGET_VECTOR\"\n+  {})\n+\n+;; We don't use early-clobber for LMUL <= 1 to get better codegen.\n+(define_insn \"*pred_cmp<mode>\"\n+  [(set (match_operand:<VM> 0 \"register_operand\"                \"=vr\")\n+\t(if_then_else:<VM>\n+\t  (unspec:<VM>\n+\t    [(match_operand:<VM> 1 \"vector_mask_operand\"      \"vmWc1\")\n+\t     (match_operand 6 \"vector_length_operand\"         \"   rK\")\n+\t     (match_operand 7 \"const_int_operand\"             \"    i\")\n+\t     (match_operand 8 \"const_int_operand\"             \"    i\")\n+\t     (reg:SI VL_REGNUM)\n+\t     (reg:SI VTYPE_REGNUM)] UNSPEC_VPREDICATE)\n+\t  (match_operator:<VM> 3 \"signed_order_operator\"\n+\t     [(match_operand:VF 4 \"register_operand\"          \"   vr\")\n+\t      (match_operand:VF 5 \"register_operand\"          \"   vr\")])\n+\t  (match_operand:<VM> 2 \"vector_merge_operand\"        \"  0vu\")))]\n+  \"TARGET_VECTOR && known_le (GET_MODE_SIZE (<MODE>mode), BYTES_PER_RISCV_VECTOR)\"\n+  \"vmf%B3.vv\\t%0,%4,%5%p1\"\n+  [(set_attr \"type\" \"vfcmp\")\n+   (set_attr \"mode\" \"<MODE>\")])\n+\n+;; We use early-clobber for source LMUL > dest LMUL.\n+(define_insn \"*pred_cmp<mode>_narrow\"\n+  [(set (match_operand:<VM> 0 \"register_operand\"               \"=&vr\")\n+\t(if_then_else:<VM>\n+\t  (unspec:<VM>\n+\t    [(match_operand:<VM> 1 \"vector_mask_operand\"      \"vmWc1\")\n+\t     (match_operand 6 \"vector_length_operand\"         \"   rK\")\n+\t     (match_operand 7 \"const_int_operand\"             \"    i\")\n+\t     (match_operand 8 \"const_int_operand\"             \"    i\")\n+\t     (reg:SI VL_REGNUM)\n+\t     (reg:SI VTYPE_REGNUM)] UNSPEC_VPREDICATE)\n+\t  (match_operator:<VM> 3 \"signed_order_operator\"\n+\t     [(match_operand:VF 4 \"register_operand\"          \"   vr\")\n+\t      (match_operand:VF 5 \"register_operand\"          \"   vr\")])\n+\t  (match_operand:<VM> 2 \"vector_merge_operand\"        \"  0vu\")))]\n+  \"TARGET_VECTOR && known_gt (GET_MODE_SIZE (<MODE>mode), BYTES_PER_RISCV_VECTOR)\"\n+  \"vmf%B3.vv\\t%0,%4,%5%p1\"\n+  [(set_attr \"type\" \"vfcmp\")\n+   (set_attr \"mode\" \"<MODE>\")])\n+\n+(define_expand \"@pred_cmp<mode>_scalar\"\n+  [(set (match_operand:<VM> 0 \"register_operand\")\n+\t(if_then_else:<VM>\n+\t  (unspec:<VM>\n+\t    [(match_operand:<VM> 1 \"vector_mask_operand\")\n+\t     (match_operand 6 \"vector_length_operand\")\n+\t     (match_operand 7 \"const_int_operand\")\n+\t     (match_operand 8 \"const_int_operand\")\n+\t     (reg:SI VL_REGNUM)\n+\t     (reg:SI VTYPE_REGNUM)] UNSPEC_VPREDICATE)\n+\t  (match_operator:<VM> 3 \"signed_order_operator\"\n+\t     [(match_operand:VF 4 \"register_operand\")\n+\t      (vec_duplicate:VF\n+\t        (match_operand:<VEL> 5 \"register_operand\"))])\n+\t  (match_operand:<VM> 2 \"vector_merge_operand\")))]\n+  \"TARGET_VECTOR\"\n+  {})\n+\n+;; We don't use early-clobber for LMUL <= 1 to get better codegen.\n+(define_insn \"*pred_cmp<mode>_scalar\"\n+  [(set (match_operand:<VM> 0 \"register_operand\"                \"=vr\")\n+\t(if_then_else:<VM>\n+\t  (unspec:<VM>\n+\t    [(match_operand:<VM> 1 \"vector_mask_operand\"      \"vmWc1\")\n+\t     (match_operand 6 \"vector_length_operand\"         \"   rK\")\n+\t     (match_operand 7 \"const_int_operand\"             \"    i\")\n+\t     (match_operand 8 \"const_int_operand\"             \"    i\")\n+\t     (reg:SI VL_REGNUM)\n+\t     (reg:SI VTYPE_REGNUM)] UNSPEC_VPREDICATE)\n+\t  (match_operator:<VM> 3 \"signed_order_operator\"\n+\t     [(match_operand:VF 4 \"register_operand\"          \"   vr\")\n+\t      (vec_duplicate:VF\n+\t        (match_operand:<VEL> 5 \"register_operand\"     \"    r\"))])\n+\t  (match_operand:<VM> 2 \"vector_merge_operand\"        \"  0vu\")))]\n+  \"TARGET_VECTOR && known_le (GET_MODE_SIZE (<MODE>mode), BYTES_PER_RISCV_VECTOR)\"\n+  \"vmf%B3.vf\\t%0,%4,%5%p1\"\n+  [(set_attr \"type\" \"vfcmp\")\n+   (set_attr \"mode\" \"<MODE>\")])\n+\n+;; We use early-clobber for source LMUL > dest LMUL.\n+(define_insn \"*pred_cmp<mode>_scalar_narrow\"\n+  [(set (match_operand:<VM> 0 \"register_operand\"               \"=&vr\")\n+\t(if_then_else:<VM>\n+\t  (unspec:<VM>\n+\t    [(match_operand:<VM> 1 \"vector_mask_operand\"      \"vmWc1\")\n+\t     (match_operand 6 \"vector_length_operand\"         \"   rK\")\n+\t     (match_operand 7 \"const_int_operand\"             \"    i\")\n+\t     (match_operand 8 \"const_int_operand\"             \"    i\")\n+\t     (reg:SI VL_REGNUM)\n+\t     (reg:SI VTYPE_REGNUM)] UNSPEC_VPREDICATE)\n+\t  (match_operator:<VM> 3 \"signed_order_operator\"\n+\t     [(match_operand:VF 4 \"register_operand\"          \"   vr\")\n+\t      (vec_duplicate:VF\n+\t        (match_operand:<VEL> 5 \"register_operand\"     \"    r\"))])\n+\t  (match_operand:<VM> 2 \"vector_merge_operand\"        \"  0vu\")))]\n+  \"TARGET_VECTOR && known_gt (GET_MODE_SIZE (<MODE>mode), BYTES_PER_RISCV_VECTOR)\"\n+  \"vmf%B3.vf\\t%0,%4,%5%p1\"\n+  [(set_attr \"type\" \"vfcmp\")\n+   (set_attr \"mode\" \"<MODE>\")])\n+\n+(define_expand \"@pred_eqne<mode>_scalar\"\n+  [(set (match_operand:<VM> 0 \"register_operand\")\n+\t(if_then_else:<VM>\n+\t  (unspec:<VM>\n+\t    [(match_operand:<VM> 1 \"vector_mask_operand\")\n+\t     (match_operand 6 \"vector_length_operand\")\n+\t     (match_operand 7 \"const_int_operand\")\n+\t     (match_operand 8 \"const_int_operand\")\n+\t     (reg:SI VL_REGNUM)\n+\t     (reg:SI VTYPE_REGNUM)] UNSPEC_VPREDICATE)\n+\t  (match_operator:<VM> 3 \"equality_operator\"\n+\t     [(vec_duplicate:VF\n+\t        (match_operand:<VEL> 5 \"register_operand\"))\n+\t      (match_operand:VF 4 \"register_operand\")])\n+\t  (match_operand:<VM> 2 \"vector_merge_operand\")))]\n+  \"TARGET_VECTOR\"\n+  {})\n+\n+;; We don't use early-clobber for LMUL <= 1 to get better codegen.\n+(define_insn \"*pred_eqne<mode>_scalar\"\n+  [(set (match_operand:<VM> 0 \"register_operand\"                \"=vr\")\n+\t(if_then_else:<VM>\n+\t  (unspec:<VM>\n+\t    [(match_operand:<VM> 1 \"vector_mask_operand\"      \"vmWc1\")\n+\t     (match_operand 6 \"vector_length_operand\"         \"   rK\")\n+\t     (match_operand 7 \"const_int_operand\"             \"    i\")\n+\t     (match_operand 8 \"const_int_operand\"             \"    i\")\n+\t     (reg:SI VL_REGNUM)\n+\t     (reg:SI VTYPE_REGNUM)] UNSPEC_VPREDICATE)\n+\t  (match_operator:<VM> 3 \"equality_operator\"\n+\t     [(vec_duplicate:VF\n+\t        (match_operand:<VEL> 5 \"register_operand\"     \"    r\"))\n+\t      (match_operand:VF 4 \"register_operand\"          \"   vr\")])\n+\t  (match_operand:<VM> 2 \"vector_merge_operand\"        \"  0vu\")))]\n+  \"TARGET_VECTOR && known_le (GET_MODE_SIZE (<MODE>mode), BYTES_PER_RISCV_VECTOR)\"\n+  \"vmf%B3.vf\\t%0,%4,%5%p1\"\n+  [(set_attr \"type\" \"vfcmp\")\n+   (set_attr \"mode\" \"<MODE>\")])\n+\n+;; We use early-clobber for source LMUL > dest LMUL.\n+(define_insn \"*pred_eqne<mode>_scalar_narrow\"\n+  [(set (match_operand:<VM> 0 \"register_operand\"               \"=&vr\")\n+\t(if_then_else:<VM>\n+\t  (unspec:<VM>\n+\t    [(match_operand:<VM> 1 \"vector_mask_operand\"      \"vmWc1\")\n+\t     (match_operand 6 \"vector_length_operand\"         \"   rK\")\n+\t     (match_operand 7 \"const_int_operand\"             \"    i\")\n+\t     (match_operand 8 \"const_int_operand\"             \"    i\")\n+\t     (reg:SI VL_REGNUM)\n+\t     (reg:SI VTYPE_REGNUM)] UNSPEC_VPREDICATE)\n+\t  (match_operator:<VM> 3 \"equality_operator\"\n+\t     [(vec_duplicate:VF\n+\t        (match_operand:<VEL> 5 \"register_operand\"     \"    r\"))\n+\t      (match_operand:VF 4 \"register_operand\"          \"   vr\")])\n+\t  (match_operand:<VM> 2 \"vector_merge_operand\"        \"  0vu\")))]\n+  \"TARGET_VECTOR && known_gt (GET_MODE_SIZE (<MODE>mode), BYTES_PER_RISCV_VECTOR)\"\n+  \"vmf%B3.vf\\t%0,%4,%5%p1\"\n+  [(set_attr \"type\" \"vfcmp\")\n+   (set_attr \"mode\" \"<MODE>\")])\n+\n+;; -------------------------------------------------------------------------------\n+;; ---- Predicated floating-point merge\n+;; -------------------------------------------------------------------------------\n+;; Includes:\n+;; - 13.15 Vector Floating-Point Merge Instruction\n+;; -------------------------------------------------------------------------------\n+\n+(define_insn \"@pred_merge<mode>_scalar\"\n+  [(set (match_operand:VF 0 \"register_operand\"      \"=vd\")\n+    (if_then_else:VF\n+      (match_operand:<VM> 4 \"register_operand\"      \" vm\")\n+      (if_then_else:VF\n+        (unspec:<VM>\n+          [(match_dup 4)\n+           (match_operand 5 \"vector_length_operand\" \" rK\")\n+           (match_operand 6 \"const_int_operand\"     \"  i\")\n+           (match_operand 7 \"const_int_operand\"     \"  i\")\n+           (reg:SI VL_REGNUM)\n+           (reg:SI VTYPE_REGNUM)] UNSPEC_VPREDICATE)\n+        (vec_duplicate:VF\n+          (match_operand:<VEL> 3 \"register_operand\" \"  f\"))\n+        (match_operand:VF 2 \"register_operand\"      \" vr\"))\n+      (match_operand:VF 1 \"vector_merge_operand\"    \"0vu\")))]\n+  \"TARGET_VECTOR\"\n+  \"vfmerge.vfm\\t%0,%2,%3,%4\"\n+  [(set_attr \"type\" \"vfmerge\")\n+   (set_attr \"mode\" \"<MODE>\")])\n+\n+;; -------------------------------------------------------------------------------\n+;; ---- Predicated floating-point conversions\n+;; -------------------------------------------------------------------------------\n+;; Includes:\n+;; - 13.17 Single-Width Floating-Point/Integer Type-Convert Instructions\n+;; -------------------------------------------------------------------------------\n+\n+(define_insn \"@pred_fcvt_x<v_su>_f<mode>\"\n+  [(set (match_operand:<VCONVERT> 0 \"register_operand\"       \"=vd, vr\")\n+\t(if_then_else:<VCONVERT>\n+\t  (unspec:<VM>\n+\t    [(match_operand:<VM> 1 \"vector_mask_operand\"     \" vm,Wc1\")\n+\t     (match_operand 4 \"vector_length_operand\"        \" rK, rK\")\n+\t     (match_operand 5 \"const_int_operand\"            \"  i,  i\")\n+\t     (match_operand 6 \"const_int_operand\"            \"  i,  i\")\n+\t     (match_operand 7 \"const_int_operand\"            \"  i,  i\")\n+\t     (reg:SI VL_REGNUM)\n+\t     (reg:SI VTYPE_REGNUM)] UNSPEC_VPREDICATE)\n+\t  (unspec:<VCONVERT>\n+\t     [(match_operand:VF 3 \"register_operand\"         \" vr, vr\")] VFCVTS)\n+\t  (match_operand:<VCONVERT> 2 \"vector_merge_operand\" \"0vu,0vu\")))]\n+  \"TARGET_VECTOR\"\n+  \"vfcvt.x<v_su>.f.v\\t%0,%3%p1\"\n+  [(set_attr \"type\" \"vfcvtftoi\")\n+   (set_attr \"mode\" \"<MODE>\")])\n+\n+(define_insn \"@pred_<fix_cvt><mode>\"\n+  [(set (match_operand:<VCONVERT> 0 \"register_operand\"       \"=vd, vr\")\n+\t(if_then_else:<VCONVERT>\n+\t  (unspec:<VM>\n+\t    [(match_operand:<VM> 1 \"vector_mask_operand\"     \" vm,Wc1\")\n+\t     (match_operand 4 \"vector_length_operand\"        \" rK, rK\")\n+\t     (match_operand 5 \"const_int_operand\"            \"  i,  i\")\n+\t     (match_operand 6 \"const_int_operand\"            \"  i,  i\")\n+\t     (match_operand 7 \"const_int_operand\"            \"  i,  i\")\n+\t     (reg:SI VL_REGNUM)\n+\t     (reg:SI VTYPE_REGNUM)] UNSPEC_VPREDICATE)\n+\t  (any_fix:<VCONVERT>\n+\t     (match_operand:VF 3 \"register_operand\"          \" vr, vr\"))\n+\t  (match_operand:<VCONVERT> 2 \"vector_merge_operand\" \"0vu,0vu\")))]\n+  \"TARGET_VECTOR\"\n+  \"vfcvt.rtz.x<u>.f.v\\t%0,%3%p1\"\n+  [(set_attr \"type\" \"vfcvtftoi\")\n+   (set_attr \"mode\" \"<MODE>\")])\n+\n+(define_insn \"@pred_<float_cvt><mode>\"\n+  [(set (match_operand:VF 0 \"register_operand\"              \"=vd, vr\")\n+\t(if_then_else:VF\n+\t  (unspec:<VM>\n+\t    [(match_operand:<VM> 1 \"vector_mask_operand\"    \" vm,Wc1\")\n+\t     (match_operand 4 \"vector_length_operand\"       \" rK, rK\")\n+\t     (match_operand 5 \"const_int_operand\"           \"  i,  i\")\n+\t     (match_operand 6 \"const_int_operand\"           \"  i,  i\")\n+\t     (match_operand 7 \"const_int_operand\"           \"  i,  i\")\n+\t     (reg:SI VL_REGNUM)\n+\t     (reg:SI VTYPE_REGNUM)] UNSPEC_VPREDICATE)\n+\t  (any_float:VF\n+\t     (match_operand:<VCONVERT> 3 \"register_operand\" \" vr, vr\"))\n+\t  (match_operand:VF 2 \"vector_merge_operand\"        \"0vu,0vu\")))]\n+  \"TARGET_VECTOR\"\n+  \"vfcvt.f.x<u>.v\\t%0,%3%p1\"\n+  [(set_attr \"type\" \"vfcvtitof\")\n+   (set_attr \"mode\" \"<MODE>\")])\n+\n+;; -------------------------------------------------------------------------------\n+;; ---- Predicated floating-point widen conversions\n+;; -------------------------------------------------------------------------------\n+;; Includes:\n+;; - 13.18 Widening Floating-Point/Integer Type-Convert Instructions\n+;; -------------------------------------------------------------------------------\n+\n+(define_insn \"@pred_widen_fcvt_x<v_su>_f<mode>\"\n+  [(set (match_operand:VWCONVERTI 0 \"register_operand\"         \"=&vr\")\n+\t(if_then_else:VWCONVERTI\n+\t  (unspec:<VM>\n+\t    [(match_operand:<VM> 1 \"vector_mask_operand\"      \"vmWc1\")\n+\t     (match_operand 4 \"vector_length_operand\"         \"   rK\")\n+\t     (match_operand 5 \"const_int_operand\"             \"    i\")\n+\t     (match_operand 6 \"const_int_operand\"             \"    i\")\n+\t     (match_operand 7 \"const_int_operand\"             \"    i\")\n+\t     (reg:SI VL_REGNUM)\n+\t     (reg:SI VTYPE_REGNUM)] UNSPEC_VPREDICATE)\n+\t  (unspec:VWCONVERTI\n+\t     [(match_operand:<VNCONVERT> 3 \"register_operand\" \"   vr\")] VFCVTS)\n+\t  (match_operand:VWCONVERTI 2 \"vector_merge_operand\"  \"  0vu\")))]\n+  \"TARGET_VECTOR\"\n+  \"vfwcvt.x<v_su>.f.v\\t%0,%3%p1\"\n+  [(set_attr \"type\" \"vfwcvtftoi\")\n+   (set_attr \"mode\" \"<VNCONVERT>\")])\n+\n+(define_insn \"@pred_widen_<fix_cvt><mode>\"\n+  [(set (match_operand:VWCONVERTI 0 \"register_operand\"        \"=&vr\")\n+\t(if_then_else:VWCONVERTI\n+\t  (unspec:<VM>\n+\t    [(match_operand:<VM> 1 \"vector_mask_operand\"     \"vmWc1\")\n+\t     (match_operand 4 \"vector_length_operand\"        \"   rK\")\n+\t     (match_operand 5 \"const_int_operand\"            \"    i\")\n+\t     (match_operand 6 \"const_int_operand\"            \"    i\")\n+\t     (match_operand 7 \"const_int_operand\"            \"    i\")\n+\t     (reg:SI VL_REGNUM)\n+\t     (reg:SI VTYPE_REGNUM)] UNSPEC_VPREDICATE)\n+\t  (any_fix:VWCONVERTI\n+\t     (match_operand:<VNCONVERT> 3 \"register_operand\" \"   vr\"))\n+\t  (match_operand:VWCONVERTI 2 \"vector_merge_operand\" \"  0vu\")))]\n+  \"TARGET_VECTOR\"\n+  \"vfwcvt.rtz.x<u>.f.v\\t%0,%3%p1\"\n+  [(set_attr \"type\" \"vfwcvtftoi\")\n+   (set_attr \"mode\" \"<VNCONVERT>\")])\n+\n+(define_insn \"@pred_widen_<float_cvt><mode>\"\n+  [(set (match_operand:VF 0 \"register_operand\"                \"=&vr\")\n+\t(if_then_else:VF\n+\t  (unspec:<VM>\n+\t    [(match_operand:<VM> 1 \"vector_mask_operand\"     \"vmWc1\")\n+\t     (match_operand 4 \"vector_length_operand\"        \"   rK\")\n+\t     (match_operand 5 \"const_int_operand\"            \"    i\")\n+\t     (match_operand 6 \"const_int_operand\"            \"    i\")\n+\t     (match_operand 7 \"const_int_operand\"            \"    i\")\n+\t     (reg:SI VL_REGNUM)\n+\t     (reg:SI VTYPE_REGNUM)] UNSPEC_VPREDICATE)\n+\t  (any_float:VF\n+\t     (match_operand:<VNCONVERT> 3 \"register_operand\" \"   vr\"))\n+\t  (match_operand:VF 2 \"vector_merge_operand\"         \"  0vu\")))]\n+  \"TARGET_VECTOR\"\n+  \"vfwcvt.f.x<u>.v\\t%0,%3%p1\"\n+  [(set_attr \"type\" \"vfwcvtitof\")\n+   (set_attr \"mode\" \"<VNCONVERT>\")])\n+\n+(define_insn \"@pred_extend<mode>\"\n+  [(set (match_operand:VWEXTF 0 \"register_operand\"                 \"=&vr\")\n+\t(if_then_else:VWEXTF\n+\t  (unspec:<VM>\n+\t    [(match_operand:<VM> 1 \"vector_mask_operand\"          \"vmWc1\")\n+\t     (match_operand 4 \"vector_length_operand\"             \"   rK\")\n+\t     (match_operand 5 \"const_int_operand\"                 \"    i\")\n+\t     (match_operand 6 \"const_int_operand\"                 \"    i\")\n+\t     (match_operand 7 \"const_int_operand\"                 \"    i\")\n+\t     (reg:SI VL_REGNUM)\n+\t     (reg:SI VTYPE_REGNUM)] UNSPEC_VPREDICATE)\n+\t  (float_extend:VWEXTF\n+\t     (match_operand:<V_DOUBLE_TRUNC> 3 \"register_operand\" \"   vr\"))\n+\t  (match_operand:VWEXTF 2 \"vector_merge_operand\"          \"  0vu\")))]\n+  \"TARGET_VECTOR\"\n+  \"vfwcvt.f.f.v\\t%0,%3%p1\"\n+  [(set_attr \"type\" \"vfwcvtftof\")\n+   (set_attr \"mode\" \"<V_DOUBLE_TRUNC>\")])\n+\n+;; -------------------------------------------------------------------------------\n+;; ---- Predicated floating-point narrow conversions\n+;; -------------------------------------------------------------------------------\n+;; Includes:\n+;; - 13.19 Narrowing Floating-Point/Integer Type-Convert Instructions\n+;; -------------------------------------------------------------------------------\n+\n+(define_insn \"@pred_narrow_fcvt_x<v_su>_f<mode>\"\n+  [(set (match_operand:<VNCONVERT> 0 \"register_operand\"        \"=vd, vr, ?&vr\")\n+\t(if_then_else:<VNCONVERT>\n+\t  (unspec:<VM>\n+\t    [(match_operand:<VM> 1 \"vector_mask_operand\"       \" vm,Wc1,vmWc1\")\n+\t     (match_operand 4 \"vector_length_operand\"          \" rK, rK,   rK\")\n+\t     (match_operand 5 \"const_int_operand\"              \"  i,  i,    i\")\n+\t     (match_operand 6 \"const_int_operand\"              \"  i,  i,    i\")\n+\t     (match_operand 7 \"const_int_operand\"              \"  i,  i,    i\")\n+\t     (reg:SI VL_REGNUM)\n+\t     (reg:SI VTYPE_REGNUM)] UNSPEC_VPREDICATE)\n+\t  (unspec:<VNCONVERT>\n+\t     [(match_operand:VF 3 \"register_operand\"           \"  0,  0,   vr\")] VFCVTS)\n+\t  (match_operand:<VNCONVERT> 2 \"vector_merge_operand\"  \"0vu,0vu,  0vu\")))]\n+  \"TARGET_VECTOR\"\n+  \"vfncvt.x<v_su>.f.w\\t%0,%3%p1\"\n+  [(set_attr \"type\" \"vfncvtftoi\")\n+   (set_attr \"mode\" \"<VNCONVERT>\")])\n+\n+(define_insn \"@pred_narrow_<fix_cvt><mode>\"\n+  [(set (match_operand:<VNCONVERT> 0 \"register_operand\"        \"=vd, vr, ?&vr\")\n+\t(if_then_else:<VNCONVERT>\n+\t  (unspec:<VM>\n+\t    [(match_operand:<VM> 1 \"vector_mask_operand\"      \"  vm,Wc1,vmWc1\")\n+\t     (match_operand 4 \"vector_length_operand\"         \"  rK, rK,   rK\")\n+\t     (match_operand 5 \"const_int_operand\"             \"   i,  i,    i\")\n+\t     (match_operand 6 \"const_int_operand\"             \"   i,  i,    i\")\n+\t     (match_operand 7 \"const_int_operand\"             \"   i,  i,    i\")\n+\t     (reg:SI VL_REGNUM)\n+\t     (reg:SI VTYPE_REGNUM)] UNSPEC_VPREDICATE)\n+\t  (any_fix:<VNCONVERT>\n+\t     (match_operand:VF 3 \"register_operand\"           \"   0,  0,   vr\"))\n+\t  (match_operand:<VNCONVERT> 2 \"vector_merge_operand\" \" 0vu,0vu,  0vu\")))]\n+  \"TARGET_VECTOR\"\n+  \"vfncvt.rtz.x<u>.f.w\\t%0,%3%p1\"\n+  [(set_attr \"type\" \"vfncvtftoi\")\n+   (set_attr \"mode\" \"<VNCONVERT>\")])\n+\n+(define_insn \"@pred_narrow_<float_cvt><mode>\"\n+  [(set (match_operand:<VNCONVERT> 0 \"register_operand\"       \"=vd, vr, ?&vr\")\n+\t(if_then_else:<VNCONVERT>\n+\t  (unspec:<VM>\n+\t    [(match_operand:<VM> 1 \"vector_mask_operand\"      \" vm,Wc1,vmWc1\")\n+\t     (match_operand 4 \"vector_length_operand\"         \" rK, rK,   rK\")\n+\t     (match_operand 5 \"const_int_operand\"             \"  i,  i,    i\")\n+\t     (match_operand 6 \"const_int_operand\"             \"  i,  i,    i\")\n+\t     (match_operand 7 \"const_int_operand\"             \"  i,  i,    i\")\n+\t     (reg:SI VL_REGNUM)\n+\t     (reg:SI VTYPE_REGNUM)] UNSPEC_VPREDICATE)\n+\t  (any_float:<VNCONVERT>\n+\t     (match_operand:VWCONVERTI 3 \"register_operand\"   \"  0,  0,   vr\"))\n+\t  (match_operand:<VNCONVERT> 2 \"vector_merge_operand\" \"0vu,0vu,  0vu\")))]\n+  \"TARGET_VECTOR\"\n+  \"vfncvt.f.x<u>.w\\t%0,%3%p1\"\n+  [(set_attr \"type\" \"vfncvtitof\")\n+   (set_attr \"mode\" \"<VNCONVERT>\")])\n+\n+(define_insn \"@pred_trunc<mode>\"\n+  [(set (match_operand:<V_DOUBLE_TRUNC> 0 \"register_operand\"       \"=vd, vr, ?&vr\")\n+\t(if_then_else:<V_DOUBLE_TRUNC>\n+\t  (unspec:<VM>\n+\t    [(match_operand:<VM> 1 \"vector_mask_operand\"           \" vm,Wc1,vmWc1\")\n+\t     (match_operand 4 \"vector_length_operand\"              \" rK, rK,   rK\")\n+\t     (match_operand 5 \"const_int_operand\"                  \"  i,  i,    i\")\n+\t     (match_operand 6 \"const_int_operand\"                  \"  i,  i,    i\")\n+\t     (match_operand 7 \"const_int_operand\"                  \"  i,  i,    i\")\n+\t     (reg:SI VL_REGNUM)\n+\t     (reg:SI VTYPE_REGNUM)] UNSPEC_VPREDICATE)\n+\t  (float_truncate:<V_DOUBLE_TRUNC>\n+\t     (match_operand:VWEXTF 3 \"register_operand\"            \"  0,  0,   vr\"))\n+\t  (match_operand:<V_DOUBLE_TRUNC> 2 \"vector_merge_operand\" \"0vu,0vu,  0vu\")))]\n+  \"TARGET_VECTOR\"\n+  \"vfncvt.f.f.w\\t%0,%3%p1\"\n+  [(set_attr \"type\" \"vfncvtftof\")\n+   (set_attr \"mode\" \"<V_DOUBLE_TRUNC>\")])\n+\n+(define_insn \"@pred_rod_trunc<mode>\"\n+  [(set (match_operand:<V_DOUBLE_TRUNC> 0 \"register_operand\"       \"=vd, vr, ?&vr\")\n+\t(if_then_else:<V_DOUBLE_TRUNC>\n+\t  (unspec:<VM>\n+\t    [(match_operand:<VM> 1 \"vector_mask_operand\"           \" vm,Wc1,vmWc1\")\n+\t     (match_operand 4 \"vector_length_operand\"              \" rK, rK,   rK\")\n+\t     (match_operand 5 \"const_int_operand\"                  \"  i,  i,    i\")\n+\t     (match_operand 6 \"const_int_operand\"                  \"  i,  i,    i\")\n+\t     (match_operand 7 \"const_int_operand\"                  \"  i,  i,    i\")\n+\t     (reg:SI VL_REGNUM)\n+\t     (reg:SI VTYPE_REGNUM)] UNSPEC_VPREDICATE)\n+\t  (unspec:<V_DOUBLE_TRUNC>\n+\t    [(float_truncate:<V_DOUBLE_TRUNC>\n+\t       (match_operand:VWEXTF 3 \"register_operand\"            \"  0,  0,   vr\"))] UNSPEC_ROD)\n+\t  (match_operand:<V_DOUBLE_TRUNC> 2 \"vector_merge_operand\" \"0vu,0vu,  0vu\")))]\n+  \"TARGET_VECTOR\"\n+  \"vfncvt.rod.f.f.w\\t%0,%3%p1\"\n+  [(set_attr \"type\" \"vfncvtftof\")\n+   (set_attr \"mode\" \"<V_DOUBLE_TRUNC>\")])\n+\n+;; -------------------------------------------------------------------------------\n+;; ---- Predicated reduction operations\n+;; -------------------------------------------------------------------------------\n+;; Includes:\n+;; - 14.1 Vector Single-Width Integer Reduction Instructions\n+;; - 14.2 Vector Widening Integer Reduction Instructions\n+;; - 14.3 Vector Single-Width Floating-Point Reduction Instructions\n+;; - 14.4 Vector Widening Floating-Point Reduction Instructions\n+;; -------------------------------------------------------------------------------\n+\n+;; For reduction operations, we should have seperate patterns for\n+;; TARGET_MIN_VLEN == 32 and TARGET_MIN_VLEN > 32.\n+;; Since reduction need LMUL = 1 scalar operand as the input operand\n+;; and they are different.\n+;; For example, The LMUL = 1 corresponding mode of VNx16QImode is VNx4QImode\n+;; for -march=rv*zve32* wheras VNx8QImode for -march=rv*zve64*\n+(define_insn \"@pred_reduc_<reduc><mode><vlmul1>\"\n+  [(set (match_operand:<VLMUL1> 0 \"register_operand\"          \"=vd, vr\")\n+\t(unspec:<VLMUL1>\n+\t  [(unspec:<VM>\n+\t     [(match_operand:<VM> 1 \"vector_mask_operand\"     \" vm,Wc1\")\n+\t      (match_operand 5 \"vector_length_operand\"        \" rK, rK\")\n+\t      (match_operand 6 \"const_int_operand\"            \"  i,  i\")\n+\t      (match_operand 7 \"const_int_operand\"            \"  i,  i\")\n+\t      (reg:SI VL_REGNUM)\n+\t      (reg:SI VTYPE_REGNUM)] UNSPEC_VPREDICATE)\n+\t   (any_reduc:VI\n+\t     (vec_duplicate:VI\n+\t       (vec_select:<VEL>\n+\t         (match_operand:<VLMUL1> 4 \"register_operand\" \" vr, vr\")\n+\t         (parallel [(const_int 0)])))\n+\t     (match_operand:VI 3 \"register_operand\"           \" vr, vr\"))\n+\t   (match_operand:<VLMUL1> 2 \"vector_merge_operand\"   \"0vu,0vu\")] UNSPEC_REDUC))]\n+  \"TARGET_VECTOR && TARGET_MIN_VLEN > 32\"\n+  \"vred<reduc>.vs\\t%0,%3,%4%p1\"\n+  [(set_attr \"type\" \"vired\")\n+   (set_attr \"mode\" \"<MODE>\")])\n+\n+(define_insn \"@pred_reduc_<reduc><mode><vlmul1_zve32>\"\n+  [(set (match_operand:<VLMUL1_ZVE32> 0 \"register_operand\"          \"=vd, vr\")\n+\t(unspec:<VLMUL1_ZVE32>\n+\t  [(unspec:<VM>\n+\t     [(match_operand:<VM> 1 \"vector_mask_operand\"           \" vm,Wc1\")\n+\t      (match_operand 5 \"vector_length_operand\"              \" rK, rK\")\n+\t      (match_operand 6 \"const_int_operand\"                  \"  i,  i\")\n+\t      (match_operand 7 \"const_int_operand\"                  \"  i,  i\")\n+\t      (reg:SI VL_REGNUM)\n+\t      (reg:SI VTYPE_REGNUM)] UNSPEC_VPREDICATE)\n+\t   (any_reduc:VI_ZVE32\n+\t     (vec_duplicate:VI_ZVE32\n+\t       (vec_select:<VEL>\n+\t         (match_operand:<VLMUL1_ZVE32> 4 \"register_operand\" \" vr, vr\")\n+\t         (parallel [(const_int 0)])))\n+\t     (match_operand:VI_ZVE32 3 \"register_operand\"           \" vr, vr\"))\n+\t   (match_operand:<VLMUL1_ZVE32> 2 \"vector_merge_operand\"   \"0vu,0vu\")] UNSPEC_REDUC))]\n+  \"TARGET_VECTOR && TARGET_MIN_VLEN == 32\"\n+  \"vred<reduc>.vs\\t%0,%3,%4%p1\"\n+  [(set_attr \"type\" \"vired\")\n+   (set_attr \"mode\" \"<MODE>\")])\n+\n+(define_insn \"@pred_widen_reduc_plus<v_su><mode><vwlmul1>\"\n+  [(set (match_operand:<VWLMUL1> 0 \"register_operand\"           \"=&vr\")\n+\t(unspec:<VWLMUL1>\n+\t  [(unspec:<VM>\n+\t     [(match_operand:<VM> 1 \"vector_mask_operand\"      \"vmWc1\")\n+\t      (match_operand 5 \"vector_length_operand\"         \"   rK\")\n+\t      (match_operand 6 \"const_int_operand\"             \"    i\")\n+\t      (match_operand 7 \"const_int_operand\"             \"    i\")\n+\t      (reg:SI VL_REGNUM)\n+\t      (reg:SI VTYPE_REGNUM)] UNSPEC_VPREDICATE)\n+\t   (match_operand:VWI 3 \"register_operand\"             \"   vr\")\n+\t   (match_operand:<VWLMUL1> 4 \"register_operand\"       \"   vr\")\n+\t   (match_operand:<VWLMUL1> 2 \"vector_merge_operand\"   \"  0vu\")] WREDUC))]\n+  \"TARGET_VECTOR && TARGET_MIN_VLEN > 32\"\n+  \"vwredsum<v_su>.vs\\t%0,%3,%4%p1\"\n+  [(set_attr \"type\" \"viwred\")\n+   (set_attr \"mode\" \"<MODE>\")])\n+\n+(define_insn \"@pred_widen_reduc_plus<v_su><mode><vwlmul1_zve32>\"\n+  [(set (match_operand:<VWLMUL1_ZVE32> 0 \"register_operand\"           \"=&vr\")\n+\t(unspec:<VWLMUL1_ZVE32>\n+\t  [(unspec:<VM>\n+\t     [(match_operand:<VM> 1 \"vector_mask_operand\"            \"vmWc1\")\n+\t      (match_operand 5 \"vector_length_operand\"               \"   rK\")\n+\t      (match_operand 6 \"const_int_operand\"                   \"    i\")\n+\t      (match_operand 7 \"const_int_operand\"                   \"    i\")\n+\t      (reg:SI VL_REGNUM)\n+\t      (reg:SI VTYPE_REGNUM)] UNSPEC_VPREDICATE)\n+\t   (match_operand:VWI_ZVE32 3 \"register_operand\"             \"   vr\")\n+\t   (match_operand:<VWLMUL1_ZVE32> 4 \"register_operand\"       \"   vr\")\n+\t   (match_operand:<VWLMUL1_ZVE32> 2 \"vector_merge_operand\"   \"  0vu\")] WREDUC))]\n+  \"TARGET_VECTOR && TARGET_MIN_VLEN == 32\"\n+  \"vwredsum<v_su>.vs\\t%0,%3,%4%p1\"\n+  [(set_attr \"type\" \"viwred\")\n+   (set_attr \"mode\" \"<MODE>\")])\n+\n+(define_insn \"@pred_reduc_<reduc><mode><vlmul1>\"\n+  [(set (match_operand:<VLMUL1> 0 \"register_operand\"          \"=vd, vr\")\n+\t(unspec:<VLMUL1>\n+\t  [(unspec:<VM>\n+\t     [(match_operand:<VM> 1 \"vector_mask_operand\"      \" vm,Wc1\")\n+\t      (match_operand 5 \"vector_length_operand\"         \" rK, rK\")\n+\t      (match_operand 6 \"const_int_operand\"             \"  i,  i\")\n+\t      (match_operand 7 \"const_int_operand\"             \"  i,  i\")\n+\t      (reg:SI VL_REGNUM)\n+\t      (reg:SI VTYPE_REGNUM)] UNSPEC_VPREDICATE)\n+\t   (any_freduc:VF\n+\t     (vec_duplicate:VF\n+\t       (vec_select:<VEL>\n+\t         (match_operand:<VLMUL1> 4 \"register_operand\" \" vr, vr\")\n+\t         (parallel [(const_int 0)])))\n+\t     (match_operand:VF 3 \"register_operand\"           \" vr, vr\"))\n+\t   (match_operand:<VLMUL1> 2 \"vector_merge_operand\"   \"0vu,0vu\")] UNSPEC_REDUC))]\n+  \"TARGET_VECTOR && TARGET_MIN_VLEN > 32\"\n+  \"vfred<reduc>.vs\\t%0,%3,%4%p1\"\n+  [(set_attr \"type\" \"vfredu\")\n+   (set_attr \"mode\" \"<MODE>\")])\n+\n+(define_insn \"@pred_reduc_<reduc><mode><vlmul1_zve32>\"\n+  [(set (match_operand:<VLMUL1_ZVE32> 0 \"register_operand\"          \"=vd, vr\")\n+\t(unspec:<VLMUL1_ZVE32>\n+\t  [(unspec:<VM>\n+\t     [(match_operand:<VM> 1 \"vector_mask_operand\"           \" vm,Wc1\")\n+\t      (match_operand 5 \"vector_length_operand\"              \" rK, rK\")\n+\t      (match_operand 6 \"const_int_operand\"                  \"  i,  i\")\n+\t      (match_operand 7 \"const_int_operand\"                  \"  i,  i\")\n+\t      (reg:SI VL_REGNUM)\n+\t      (reg:SI VTYPE_REGNUM)] UNSPEC_VPREDICATE)\n+\t   (any_freduc:VF_ZVE32\n+\t     (vec_duplicate:VF_ZVE32\n+\t       (vec_select:<VEL>\n+\t         (match_operand:<VLMUL1_ZVE32> 4 \"register_operand\" \" vr, vr\")\n+\t         (parallel [(const_int 0)])))\n+\t     (match_operand:VF_ZVE32 3 \"register_operand\"           \" vr, vr\"))\n+\t   (match_operand:<VLMUL1_ZVE32> 2 \"vector_merge_operand\"   \"0vu,0vu\")] UNSPEC_REDUC))]\n+  \"TARGET_VECTOR && TARGET_MIN_VLEN == 32\"\n+  \"vfred<reduc>.vs\\t%0,%3,%4%p1\"\n+  [(set_attr \"type\" \"vfredu\")\n+   (set_attr \"mode\" \"<MODE>\")])\n+\n+(define_insn \"@pred_reduc_plus<order><mode><vlmul1>\"\n+  [(set (match_operand:<VLMUL1> 0 \"register_operand\"          \"=vd, vr\")\n+\t(unspec:<VLMUL1>\n+\t  [(unspec:<VLMUL1>\n+\t    [(unspec:<VM>\n+\t       [(match_operand:<VM> 1 \"vector_mask_operand\"      \" vm,Wc1\")\n+\t        (match_operand 5 \"vector_length_operand\"         \" rK, rK\")\n+\t        (match_operand 6 \"const_int_operand\"             \"  i,  i\")\n+\t        (match_operand 7 \"const_int_operand\"             \"  i,  i\")\n+\t        (reg:SI VL_REGNUM)\n+\t        (reg:SI VTYPE_REGNUM)] UNSPEC_VPREDICATE)\n+\t     (plus:VF\n+\t       (vec_duplicate:VF\n+\t         (vec_select:<VEL>\n+\t           (match_operand:<VLMUL1> 4 \"register_operand\" \" vr, vr\")\n+\t           (parallel [(const_int 0)])))\n+\t       (match_operand:VF 3 \"register_operand\"           \" vr, vr\"))\n+\t     (match_operand:<VLMUL1> 2 \"vector_merge_operand\"   \"0vu,0vu\")] UNSPEC_REDUC)] ORDER))]\n+  \"TARGET_VECTOR && TARGET_MIN_VLEN > 32\"\n+  \"vfred<order>sum.vs\\t%0,%3,%4%p1\"\n+  [(set_attr \"type\" \"vfred<order>\")\n+   (set_attr \"mode\" \"<MODE>\")])\n+\n+(define_insn \"@pred_reduc_plus<order><mode><vlmul1_zve32>\"\n+  [(set (match_operand:<VLMUL1_ZVE32> 0 \"register_operand\"          \"=vd, vr\")\n+\t(unspec:<VLMUL1_ZVE32>\n+\t  [(unspec:<VLMUL1_ZVE32>\n+\t    [(unspec:<VM>\n+\t       [(match_operand:<VM> 1 \"vector_mask_operand\"           \" vm,Wc1\")\n+\t        (match_operand 5 \"vector_length_operand\"              \" rK, rK\")\n+\t        (match_operand 6 \"const_int_operand\"                  \"  i,  i\")\n+\t        (match_operand 7 \"const_int_operand\"                  \"  i,  i\")\n+\t        (reg:SI VL_REGNUM)\n+\t        (reg:SI VTYPE_REGNUM)] UNSPEC_VPREDICATE)\n+\t     (plus:VF_ZVE32\n+\t       (vec_duplicate:VF_ZVE32\n+\t         (vec_select:<VEL>\n+\t           (match_operand:<VLMUL1_ZVE32> 4 \"register_operand\" \" vr, vr\")\n+\t           (parallel [(const_int 0)])))\n+\t       (match_operand:VF_ZVE32 3 \"register_operand\"           \" vr, vr\"))\n+\t     (match_operand:<VLMUL1_ZVE32> 2 \"vector_merge_operand\"   \"0vu,0vu\")] UNSPEC_REDUC)] ORDER))]\n+  \"TARGET_VECTOR && TARGET_MIN_VLEN == 32\"\n+  \"vfred<order>sum.vs\\t%0,%3,%4%p1\"\n+  [(set_attr \"type\" \"vfred<order>\")\n+   (set_attr \"mode\" \"<MODE>\")])\n+\n+(define_insn \"@pred_widen_reduc_plus<order><mode><vwlmul1>\"\n+  [(set (match_operand:<VWLMUL1> 0 \"register_operand\"             \"=&vr\")\n+\t(unspec:<VWLMUL1>\n+\t  [(unspec:<VWLMUL1>\n+\t    [(unspec:<VM>\n+\t       [(match_operand:<VM> 1 \"vector_mask_operand\"      \"vmWc1\")\n+\t        (match_operand 5 \"vector_length_operand\"         \"   rK\")\n+\t        (match_operand 6 \"const_int_operand\"             \"    i\")\n+\t        (match_operand 7 \"const_int_operand\"             \"    i\")\n+\t        (reg:SI VL_REGNUM)\n+\t        (reg:SI VTYPE_REGNUM)] UNSPEC_VPREDICATE)\n+\t     (match_operand:VWF 3 \"register_operand\"             \"   vr\")\n+\t     (match_operand:<VWLMUL1> 4 \"register_operand\"       \"   vr\")\n+\t     (match_operand:<VWLMUL1> 2 \"vector_merge_operand\"   \"  0vu\")] UNSPEC_WREDUC_SUM)] ORDER))]\n+  \"TARGET_VECTOR && TARGET_MIN_VLEN > 32\"\n+  \"vfwred<order>sum.vs\\t%0,%3,%4%p1\"\n+  [(set_attr \"type\" \"vfwred<order>\")\n+   (set_attr \"mode\" \"<MODE>\")])"}, {"sha": "6e81dc05e0e0714256759b0594816df451415a2d", "filename": "gcc/internal-fn.cc", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ee85b3255d638fd77ee3fe17a4e146c81545efb/gcc%2Finternal-fn.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ee85b3255d638fd77ee3fe17a4e146c81545efb/gcc%2Finternal-fn.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Finternal-fn.cc?ref=6ee85b3255d638fd77ee3fe17a4e146c81545efb", "patch": "@@ -4521,3 +4521,10 @@ void\n expand_ASSUME (internal_fn, gcall *)\n {\n }\n+\n+void\n+expand_MASK_CALL (internal_fn, gcall *)\n+{\n+  /* This IFN should only exist between ifcvt and vect passes.  */\n+  gcc_unreachable ();\n+}"}, {"sha": "7fe742c2ae713e7152ab05cfdfba86e4e0aa3456", "filename": "gcc/internal-fn.def", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ee85b3255d638fd77ee3fe17a4e146c81545efb/gcc%2Finternal-fn.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ee85b3255d638fd77ee3fe17a4e146c81545efb/gcc%2Finternal-fn.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Finternal-fn.def?ref=6ee85b3255d638fd77ee3fe17a4e146c81545efb", "patch": "@@ -461,6 +461,9 @@ DEF_INTERNAL_FN (SPACESHIP, ECF_CONST | ECF_LEAF | ECF_NOTHROW, NULL)\n DEF_INTERNAL_FN (ASSUME, ECF_CONST | ECF_LEAF | ECF_NOTHROW\n \t\t\t | ECF_LOOPING_CONST_OR_PURE, NULL)\n \n+/* For if-conversion of inbranch SIMD clones.  */\n+DEF_INTERNAL_FN (MASK_CALL, ECF_NOVOPS, NULL)\n+\n #undef DEF_INTERNAL_INT_FN\n #undef DEF_INTERNAL_FLT_FN\n #undef DEF_INTERNAL_FLT_FLOATN_FN"}, {"sha": "08922ed4254898f5fffca3f33973e96ed9ce772f", "filename": "gcc/internal-fn.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ee85b3255d638fd77ee3fe17a4e146c81545efb/gcc%2Finternal-fn.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ee85b3255d638fd77ee3fe17a4e146c81545efb/gcc%2Finternal-fn.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Finternal-fn.h?ref=6ee85b3255d638fd77ee3fe17a4e146c81545efb", "patch": "@@ -244,6 +244,7 @@ extern void expand_SHUFFLEVECTOR (internal_fn, gcall *);\n extern void expand_SPACESHIP (internal_fn, gcall *);\n extern void expand_TRAP (internal_fn, gcall *);\n extern void expand_ASSUME (internal_fn, gcall *);\n+extern void expand_MASK_CALL (internal_fn, gcall *);\n \n extern bool vectorized_internal_fn_supported_p (internal_fn, tree);\n "}, {"sha": "03ff86e7d188cd8eb30d5d971c5c9bbc7d64543f", "filename": "gcc/omp-simd-clone.cc", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ee85b3255d638fd77ee3fe17a4e146c81545efb/gcc%2Fomp-simd-clone.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ee85b3255d638fd77ee3fe17a4e146c81545efb/gcc%2Fomp-simd-clone.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fomp-simd-clone.cc?ref=6ee85b3255d638fd77ee3fe17a4e146c81545efb", "patch": "@@ -942,6 +942,7 @@ simd_clone_adjust_argument_types (struct cgraph_node *node)\n \t}\n       sc->args[i].orig_type = base_type;\n       sc->args[i].arg_type = SIMD_CLONE_ARG_TYPE_MASK;\n+      sc->args[i].vector_type = adj.type;\n     }\n \n   if (node->definition)"}, {"sha": "974c8303f711651b5a249a3d8f714da82ecc1104", "filename": "gcc/testsuite/g++.dg/ipa/pr106258.C", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ee85b3255d638fd77ee3fe17a4e146c81545efb/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fipa%2Fpr106258.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ee85b3255d638fd77ee3fe17a4e146c81545efb/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fipa%2Fpr106258.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fipa%2Fpr106258.C?ref=6ee85b3255d638fd77ee3fe17a4e146c81545efb", "patch": "@@ -0,0 +1,5 @@\n+// PR middle-end/106258\n+// { dg-do compile { target c++11 } }\n+// { dg-options \"-O2 -funreachable-traps\" }\n+\n+#include \"ipa-sra-4.C\""}, {"sha": "ce9a6dad1b7882665a2e97e1eb327268f0fbe8e2", "filename": "gcc/testsuite/gcc.dg/vect/vect-simd-clone-16.c", "status": "added", "additions": 89, "deletions": 0, "changes": 89, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ee85b3255d638fd77ee3fe17a4e146c81545efb/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-simd-clone-16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ee85b3255d638fd77ee3fe17a4e146c81545efb/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-simd-clone-16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-simd-clone-16.c?ref=6ee85b3255d638fd77ee3fe17a4e146c81545efb", "patch": "@@ -0,0 +1,89 @@\n+/* { dg-require-effective-target vect_simd_clones } */\n+/* { dg-additional-options \"-fopenmp-simd\" } */\n+/* { dg-additional-options \"-mavx\" { target avx_runtime } } */\n+\n+/* Test that simd inbranch clones work correctly.  */\n+\n+#ifndef TYPE\n+#define TYPE int\n+#endif\n+\n+/* A simple function that will be cloned.  */\n+#pragma omp declare simd\n+TYPE __attribute__((noinline))\n+foo (TYPE a)\n+{\n+  return a + 1;\n+}\n+\n+/* Check that \"inbranch\" clones are called correctly.  */\n+\n+void __attribute__((noipa))\n+masked (TYPE * __restrict a, TYPE * __restrict b, int size)\n+{\n+  #pragma omp simd\n+  for (int i = 0; i < size; i++)\n+    b[i] = a[i]<1 ? foo(a[i]) : a[i];\n+}\n+\n+/* Check that \"inbranch\" works when there might be unrolling.  */\n+\n+void __attribute__((noipa))\n+masked_fixed (TYPE * __restrict a, TYPE * __restrict b)\n+{\n+  #pragma omp simd\n+  for (int i = 0; i < 128; i++)\n+    b[i] = a[i]<1 ? foo(a[i]) : a[i];\n+}\n+\n+/* Validate the outputs.  */\n+\n+void\n+check_masked (TYPE *b, int size)\n+{\n+  for (int i = 0; i < size; i++)\n+    if (((TYPE)i < 1 && b[i] != (TYPE)(i + 1))\n+\t|| ((TYPE)i >= 1 && b[i] != (TYPE)i))\n+      {\n+\t__builtin_printf (\"error at %d\\n\", i);\n+\t__builtin_exit (1);\n+      }\n+}\n+\n+int\n+main ()\n+{\n+  TYPE a[1024];\n+  TYPE b[1024];\n+\n+  for (int i = 0; i < 1024; i++)\n+    a[i] = i;\n+\n+  masked_fixed (a, b);\n+  check_masked (b, 128);\n+\n+  /* Test various sizes to cover machines with different vectorization\n+     factors.  */\n+  for (int size = 8; size <= 1024; size *= 2)\n+    {\n+      masked (a, b, size);\n+      check_masked (b, size);\n+    }\n+\n+  /* Test sizes that might exercise the partial vector code-path.  */\n+  for (int size = 8; size <= 1024; size *= 2)\n+    {\n+      masked (a, b, size-4);\n+      check_masked (b, size-4);\n+    }\n+\n+  return 0;\n+}\n+\n+/* Ensure the the in-branch simd clones are used on targets that support them.\n+   Some targets use another call for the epilogue loops.  */\n+/* { dg-final { scan-tree-dump-times {[\\n\\r] [^\\n]* = foo\\.simdclone} 2 \"vect\" { target { ! aarch64*-*-* } } } } */\n+/* { dg-final { scan-tree-dump-times {[\\n\\r] [^\\n]* = foo\\.simdclone} 3 \"vect\" { target aarch64*-*-* } } } */\n+\n+/* The LTO test produces two dump files and we scan the wrong one.  */\n+/* { dg-skip-if \"\" { *-*-* } { \"-flto\" } { \"\" } } */"}, {"sha": "af543b6573de28354f5f11088e73ac7770a33587", "filename": "gcc/testsuite/gcc.dg/vect/vect-simd-clone-16b.c", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ee85b3255d638fd77ee3fe17a4e146c81545efb/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-simd-clone-16b.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ee85b3255d638fd77ee3fe17a4e146c81545efb/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-simd-clone-16b.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-simd-clone-16b.c?ref=6ee85b3255d638fd77ee3fe17a4e146c81545efb", "patch": "@@ -0,0 +1,14 @@\n+/* { dg-require-effective-target vect_simd_clones } */\n+/* { dg-additional-options \"-fopenmp-simd\" } */\n+/* { dg-additional-options \"-mavx\" { target avx_runtime } } */\n+\n+#define TYPE float\n+#include \"vect-simd-clone-16.c\"\n+\n+/* Ensure the the in-branch simd clones are used on targets that support them.\n+   Some targets use another call for the epilogue loops.  */\n+/* { dg-final { scan-tree-dump-times {[\\n\\r] [^\\n]* = foo\\.simdclone} 2 \"vect\" { target { ! { avx_runtime || aarch64*-*-* } } } } } */\n+/* { dg-final { scan-tree-dump-times {[\\n\\r] [^\\n]* = foo\\.simdclone} 3 \"vect\" { target { avx_runtime || aarch64*-*-* } } } } */\n+\n+/* The LTO test produces two dump files and we scan the wrong one.  */\n+/* { dg-skip-if \"\" { *-*-* } { \"-flto\" } { \"\" } } */"}, {"sha": "677548a943923fb9e82e2cdf992de2f61fa27cce", "filename": "gcc/testsuite/gcc.dg/vect/vect-simd-clone-16c.c", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ee85b3255d638fd77ee3fe17a4e146c81545efb/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-simd-clone-16c.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ee85b3255d638fd77ee3fe17a4e146c81545efb/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-simd-clone-16c.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-simd-clone-16c.c?ref=6ee85b3255d638fd77ee3fe17a4e146c81545efb", "patch": "@@ -0,0 +1,17 @@\n+/* { dg-require-effective-target vect_simd_clones } */\n+/* { dg-additional-options \"-fopenmp-simd\" } */\n+/* { dg-additional-options \"-mavx\" { target avx_runtime } } */\n+\n+#define TYPE short\n+#include \"vect-simd-clone-16.c\"\n+\n+/* Ensure the the in-branch simd clones are used on targets that support them.\n+   Some targets use another call for the epilogue loops.  */\n+/* { dg-final { scan-tree-dump-times {[\\n\\r] [^\\n]* = foo\\.simdclone} 2 \"vect\" { target { ! { x86_64*-*-* || { i686*-*-* || aarch64*-*-* } } } } } } */\n+/* { dg-final { scan-tree-dump-times {[\\n\\r] [^\\n]* = foo\\.simdclone} 3 \"vect\" { target { aarch64*-*-* } } } } */\n+\n+/* x86_64 fails to use in-branch clones for TYPE=short.  */\n+/* { dg-final { scan-tree-dump-times {[\\n\\r] [^\\n]* = foo\\.simdclone} 0 \"vect\" { target x86_64*-*-* i686*-*-* } } } */\n+\n+/* The LTO test produces two dump files and we scan the wrong one.  */\n+/* { dg-skip-if \"\" { *-*-* } { \"-flto\" } { \"\" } } */"}, {"sha": "a9ae9932b309c90b2f57089a1d188ca4815c5800", "filename": "gcc/testsuite/gcc.dg/vect/vect-simd-clone-16d.c", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ee85b3255d638fd77ee3fe17a4e146c81545efb/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-simd-clone-16d.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ee85b3255d638fd77ee3fe17a4e146c81545efb/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-simd-clone-16d.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-simd-clone-16d.c?ref=6ee85b3255d638fd77ee3fe17a4e146c81545efb", "patch": "@@ -0,0 +1,17 @@\n+/* { dg-require-effective-target vect_simd_clones } */\n+/* { dg-additional-options \"-fopenmp-simd\" } */\n+/* { dg-additional-options \"-mavx\" { target avx_runtime } } */\n+\n+#define TYPE char\n+#include \"vect-simd-clone-16.c\"\n+\n+/* Ensure the the in-branch simd clones are used on targets that support them.\n+   Some targets use another call for the epilogue loops.  */\n+/* { dg-final { scan-tree-dump-times {[\\n\\r] [^\\n]* = foo\\.simdclone} 2 \"vect\" { target { ! { x86_64*-*-* || { i686*-*-* || aarch64*-*-* } } } } } } */\n+/* { dg-final { scan-tree-dump-times {[\\n\\r] [^\\n]* = foo\\.simdclone} 3 \"vect\" { target { aarch64*-*-* } } } } */\n+\n+/* x86_64 fails to use in-branch clones for TYPE=char.  */\n+/* { dg-final { scan-tree-dump-times {[\\n\\r] [^\\n]* = foo\\.simdclone} 0 \"vect\" { target x86_64*-*-* i686*-*-* } } } */\n+\n+/* The LTO test produces two dump files and we scan the wrong one.  */\n+/* { dg-skip-if \"\" { *-*-* } { \"-flto\" } { \"\" } } */"}, {"sha": "c8b482bf2e70a211f250724ba71148681731070f", "filename": "gcc/testsuite/gcc.dg/vect/vect-simd-clone-16e.c", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ee85b3255d638fd77ee3fe17a4e146c81545efb/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-simd-clone-16e.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ee85b3255d638fd77ee3fe17a4e146c81545efb/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-simd-clone-16e.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-simd-clone-16e.c?ref=6ee85b3255d638fd77ee3fe17a4e146c81545efb", "patch": "@@ -0,0 +1,16 @@\n+/* { dg-require-effective-target vect_simd_clones } */\n+/* { dg-additional-options \"-fopenmp-simd\" } */\n+/* { dg-additional-options \"-mavx\" { target avx_runtime } } */\n+\n+#define TYPE double\n+#include \"vect-simd-clone-16.c\"\n+\n+/* Ensure the the in-branch simd clones are used on targets that support them.\n+   Some targets use another call for the epilogue loops.\n+   Some targets use pairs of vectors and do twice the calls.  */\n+/* { dg-final { scan-tree-dump-times {[\\n\\r] [^\\n]* = foo\\.simdclone} 2 \"vect\" { target { { ! avx_runtime } && { ! { i686*-*-* && { ! lp64 } } } } } } } */\n+/* { dg-final { scan-tree-dump-times {[\\n\\r] [^\\n]* = foo\\.simdclone} 3 \"vect\" { target { avx_runtime && { ! { i686*-*-* && { ! lp64 } } } } } } } */\n+/* { dg-final { scan-tree-dump-times {[\\n\\r] [^\\n]* = foo\\.simdclone} 4 \"vect\" { target { i686*-*-* && { ! lp64 } } } } } */\n+\n+/* The LTO test produces two dump files and we scan the wrong one.  */\n+/* { dg-skip-if \"\" { *-*-* } { \"-flto\" } { \"\" } } */"}, {"sha": "f42ac082678b2ce7b69ee5117653c30c21d47b52", "filename": "gcc/testsuite/gcc.dg/vect/vect-simd-clone-16f.c", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ee85b3255d638fd77ee3fe17a4e146c81545efb/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-simd-clone-16f.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ee85b3255d638fd77ee3fe17a4e146c81545efb/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-simd-clone-16f.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-simd-clone-16f.c?ref=6ee85b3255d638fd77ee3fe17a4e146c81545efb", "patch": "@@ -0,0 +1,14 @@\n+/* { dg-require-effective-target vect_simd_clones } */\n+/* { dg-additional-options \"-fopenmp-simd\" } */\n+/* { dg-additional-options \"-mavx\" { target avx_runtime } } */\n+\n+#define TYPE __INT64_TYPE__\n+#include \"vect-simd-clone-16.c\"\n+\n+/* Ensure the the in-branch simd clones are used on targets that support them.\n+   Some targets use pairs of vectors and do twice the calls.  */\n+/* { dg-final { scan-tree-dump-times {[\\n\\r] [^\\n]* = foo\\.simdclone} 2 \"vect\" { target { ! { i686*-*-* && { ! lp64 } } } } } } */\n+/* { dg-final { scan-tree-dump-times {[\\n\\r] [^\\n]* = foo\\.simdclone} 4 \"vect\" { target { i686*-*-* && { ! lp64 } } } } } */\n+\n+/* The LTO test produces two dump files and we scan the wrong one.  */\n+/* { dg-skip-if \"\" { *-*-* } { \"-flto\" } { \"\" } } */"}, {"sha": "756225e4306f16c745e7ec6b119804e803084ffe", "filename": "gcc/testsuite/gcc.dg/vect/vect-simd-clone-17.c", "status": "added", "additions": 89, "deletions": 0, "changes": 89, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ee85b3255d638fd77ee3fe17a4e146c81545efb/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-simd-clone-17.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ee85b3255d638fd77ee3fe17a4e146c81545efb/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-simd-clone-17.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-simd-clone-17.c?ref=6ee85b3255d638fd77ee3fe17a4e146c81545efb", "patch": "@@ -0,0 +1,89 @@\n+/* { dg-require-effective-target vect_simd_clones } */\n+/* { dg-additional-options \"-fopenmp-simd\" } */\n+/* { dg-additional-options \"-mavx\" { target avx_runtime } } */\n+\n+/* Test that simd inbranch clones work correctly.  */\n+\n+#ifndef TYPE\n+#define TYPE int\n+#endif\n+\n+/* A simple function that will be cloned.  */\n+#pragma omp declare simd uniform(b)\n+TYPE __attribute__((noinline))\n+foo (TYPE a, TYPE b)\n+{\n+  return a + b;\n+}\n+\n+/* Check that \"inbranch\" clones are called correctly.  */\n+\n+void __attribute__((noipa))\n+masked (TYPE * __restrict a, TYPE * __restrict b, int size)\n+{\n+  #pragma omp simd\n+  for (int i = 0; i < size; i++)\n+    b[i] = a[i]<1 ? foo(a[i], 1) : a[i];\n+}\n+\n+/* Check that \"inbranch\" works when there might be unrolling.  */\n+\n+void __attribute__((noipa))\n+masked_fixed (TYPE * __restrict a, TYPE * __restrict b)\n+{\n+  #pragma omp simd\n+  for (int i = 0; i < 128; i++)\n+    b[i] = a[i]<1 ? foo(a[i], 1) : a[i];\n+}\n+\n+/* Validate the outputs.  */\n+\n+void\n+check_masked (TYPE *b, int size)\n+{\n+  for (int i = 0; i < size; i++)\n+    if (((TYPE)i < 1 && b[i] != (TYPE)(i + 1))\n+\t|| ((TYPE)i >= 1 && b[i] != (TYPE)i))\n+      {\n+\t__builtin_printf (\"error at %d\\n\", i);\n+\t__builtin_exit (1);\n+      }\n+}\n+\n+int\n+main ()\n+{\n+  TYPE a[1024];\n+  TYPE b[1024];\n+\n+  for (int i = 0; i < 1024; i++)\n+    a[i] = i;\n+\n+  masked_fixed (a, b);\n+  check_masked (b, 128);\n+\n+  /* Test various sizes to cover machines with different vectorization\n+     factors.  */\n+  for (int size = 8; size <= 1024; size *= 2)\n+    {\n+      masked (a, b, size);\n+      check_masked (b, size);\n+    }\n+\n+  /* Test sizes that might exercise the partial vector code-path.  */\n+  for (int size = 8; size <= 1024; size *= 2)\n+    {\n+      masked (a, b, size-4);\n+      check_masked (b, size-4);\n+    }\n+\n+  return 0;\n+}\n+\n+/* Ensure the the in-branch simd clones are used on targets that support them.\n+   Some targets use another call for the epilogue loops.  */\n+/* { dg-final { scan-tree-dump-times {[\\n\\r] [^\\n]* = foo\\.simdclone} 2 \"vect\" { target { ! aarch64*-*-* } } } } */\n+/* { dg-final { scan-tree-dump-times {[\\n\\r] [^\\n]* = foo\\.simdclone} 3 \"vect\" { target aarch64*-*-* } } } */\n+\n+/* The LTO test produces two dump files and we scan the wrong one.  */\n+/* { dg-skip-if \"\" { *-*-* } { \"-flto\" } { \"\" } } */"}, {"sha": "8731c26864480dbef2e565131e488cb5e5c4a93b", "filename": "gcc/testsuite/gcc.dg/vect/vect-simd-clone-17b.c", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ee85b3255d638fd77ee3fe17a4e146c81545efb/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-simd-clone-17b.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ee85b3255d638fd77ee3fe17a4e146c81545efb/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-simd-clone-17b.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-simd-clone-17b.c?ref=6ee85b3255d638fd77ee3fe17a4e146c81545efb", "patch": "@@ -0,0 +1,14 @@\n+/* { dg-require-effective-target vect_simd_clones } */\n+/* { dg-additional-options \"-fopenmp-simd\" } */\n+/* { dg-additional-options \"-mavx\" { target avx_runtime } } */\n+\n+#define TYPE float\n+#include \"vect-simd-clone-17.c\"\n+\n+/* Ensure the the in-branch simd clones are used on targets that support them.\n+   Some targets use another call for the epilogue loops.  */\n+/* { dg-final { scan-tree-dump-times {[\\n\\r] [^\\n]* = foo\\.simdclone} 2 \"vect\" { target { ! { avx_runtime || aarch64*-*-* } } } } } */\n+/* { dg-final { scan-tree-dump-times {[\\n\\r] [^\\n]* = foo\\.simdclone} 3 \"vect\" { target { avx_runtime || aarch64*-*-* } } } } */\n+\n+/* The LTO test produces two dump files and we scan the wrong one.  */\n+/* { dg-skip-if \"\" { *-*-* } { \"-flto\" } { \"\" } } */"}, {"sha": "6683d1a9cbf3547813bbdc9a3ded17c8ef6d0ed6", "filename": "gcc/testsuite/gcc.dg/vect/vect-simd-clone-17c.c", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ee85b3255d638fd77ee3fe17a4e146c81545efb/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-simd-clone-17c.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ee85b3255d638fd77ee3fe17a4e146c81545efb/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-simd-clone-17c.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-simd-clone-17c.c?ref=6ee85b3255d638fd77ee3fe17a4e146c81545efb", "patch": "@@ -0,0 +1,17 @@\n+/* { dg-require-effective-target vect_simd_clones } */\n+/* { dg-additional-options \"-fopenmp-simd\" } */\n+/* { dg-additional-options \"-mavx\" { target avx_runtime } } */\n+\n+#define TYPE short\n+#include \"vect-simd-clone-17.c\"\n+ \n+/* Ensure the the in-branch simd clones are used on targets that support them.\n+   Some targets use another call for the epilogue loops.  */\n+/* { dg-final { scan-tree-dump-times {[\\n\\r] [^\\n]* = foo\\.simdclone} 2 \"vect\" { target { ! { x86_64*-*-* || { i686*-*-* || aarch64*-*-* } } } } } } */\n+/* { dg-final { scan-tree-dump-times {[\\n\\r] [^\\n]* = foo\\.simdclone} 3 \"vect\" { target { aarch64*-*-* } } } } */\n+\n+/* x86_64 fails to use in-branch clones for TYPE=short.  */\n+/* { dg-final { scan-tree-dump-times {[\\n\\r] [^\\n]* = foo\\.simdclone} 0 \"vect\" { target x86_64*-*-* i686*-*-* } } } */\n+\n+/* The LTO test produces two dump files and we scan the wrong one.  */\n+/* { dg-skip-if \"\" { *-*-* } { \"-flto\" } { \"\" } } */"}, {"sha": "d38bde6d85ea02c917bdb6a2ff094e14b39217bf", "filename": "gcc/testsuite/gcc.dg/vect/vect-simd-clone-17d.c", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ee85b3255d638fd77ee3fe17a4e146c81545efb/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-simd-clone-17d.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ee85b3255d638fd77ee3fe17a4e146c81545efb/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-simd-clone-17d.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-simd-clone-17d.c?ref=6ee85b3255d638fd77ee3fe17a4e146c81545efb", "patch": "@@ -0,0 +1,17 @@\n+/* { dg-require-effective-target vect_simd_clones } */\n+/* { dg-additional-options \"-fopenmp-simd -fdump-tree-optimized\" } */\n+/* { dg-additional-options \"-mavx\" { target avx_runtime } } */\n+\n+#define TYPE char\n+#include \"vect-simd-clone-17.c\"\n+\n+/* Ensure the the in-branch simd clones are used on targets that support them.\n+   Some targets use another call for the epilogue loops.  */\n+/* { dg-final { scan-tree-dump-times {[\\n\\r] [^\\n]* = foo\\.simdclone} 2 \"vect\" { target { ! { x86_64*-*-* || { i686*-*-* || aarch64*-*-* } } } } } } */\n+/* { dg-final { scan-tree-dump-times {[\\n\\r] [^\\n]* = foo\\.simdclone} 3 \"vect\" { target { aarch64*-*-* } } } } */\n+\n+/* x86_64 fails to use in-branch clones for TYPE=char.  */\n+/* { dg-final { scan-tree-dump-times {[\\n\\r] [^\\n]* = foo\\.simdclone} 0 \"vect\" { target x86_64*-*-* i686*-*-* } } } */\n+\n+/* The LTO test produces two dump files and we scan the wrong one.  */\n+/* { dg-skip-if \"\" { *-*-* } { \"-flto\" } { \"\" } } */"}, {"sha": "f2a428c62c1cd10eb0e9d79d39edeadfda8b8fd1", "filename": "gcc/testsuite/gcc.dg/vect/vect-simd-clone-17e.c", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ee85b3255d638fd77ee3fe17a4e146c81545efb/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-simd-clone-17e.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ee85b3255d638fd77ee3fe17a4e146c81545efb/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-simd-clone-17e.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-simd-clone-17e.c?ref=6ee85b3255d638fd77ee3fe17a4e146c81545efb", "patch": "@@ -0,0 +1,16 @@\n+/* { dg-require-effective-target vect_simd_clones } */\n+/* { dg-additional-options \"-fopenmp-simd -fdump-tree-optimized\" } */\n+/* { dg-additional-options \"-mavx\" { target avx_runtime } } */\n+\n+#define TYPE double\n+#include \"vect-simd-clone-17.c\"\n+\n+/* Ensure the the in-branch simd clones are used on targets that support them.\n+   Some targets use another call for the epilogue loops.\n+   Some targets use pairs of vectors and do twice the calls.  */\n+/* { dg-final { scan-tree-dump-times {[\\n\\r] [^\\n]* = foo\\.simdclone} 2 \"vect\" { target { { ! avx_runtime } && { ! { i686*-*-* && { ! lp64 } } } } } } } */\n+/* { dg-final { scan-tree-dump-times {[\\n\\r] [^\\n]* = foo\\.simdclone} 3 \"vect\" { target { avx_runtime && { ! { i686*-*-* && { ! lp64 } } } } } } } */\n+/* { dg-final { scan-tree-dump-times {[\\n\\r] [^\\n]* = foo\\.simdclone} 4 \"vect\" { target { i686*-*-* && { ! lp64 } } } } } */\n+\n+/* The LTO test produces two dump files and we scan the wrong one.  */\n+/* { dg-skip-if \"\" { *-*-* } { \"-flto\" } { \"\" } } */"}, {"sha": "cd05dec9632a130cbc917369278c452c3ac90b58", "filename": "gcc/testsuite/gcc.dg/vect/vect-simd-clone-17f.c", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ee85b3255d638fd77ee3fe17a4e146c81545efb/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-simd-clone-17f.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ee85b3255d638fd77ee3fe17a4e146c81545efb/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-simd-clone-17f.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-simd-clone-17f.c?ref=6ee85b3255d638fd77ee3fe17a4e146c81545efb", "patch": "@@ -0,0 +1,14 @@\n+/* { dg-require-effective-target vect_simd_clones } */\n+/* { dg-additional-options \"-fopenmp-simd -fdump-tree-optimized\" } */\n+/* { dg-additional-options \"-mavx\" { target avx_runtime } } */\n+\n+#define TYPE __INT64_TYPE__\n+#include \"vect-simd-clone-17.c\"\n+\n+/* Ensure the the in-branch simd clones are used on targets that support them.\n+   Some targets use pairs of vectors and do twice the calls.  */\n+/* { dg-final { scan-tree-dump-times {[\\n\\r] [^\\n]* = foo\\.simdclone} 2 \"vect\" { target { ! { i686*-*-* && { ! lp64 } } } } } } */\n+/* { dg-final { scan-tree-dump-times {[\\n\\r] [^\\n]* = foo\\.simdclone} 4 \"vect\" { target { i686*-*-* && { ! lp64 } } } } } */\n+\n+/* The LTO test produces two dump files and we scan the wrong one.  */\n+/* { dg-skip-if \"\" { *-*-* } { \"-flto\" } { \"\" } } */"}, {"sha": "febf9fdf85ee0be63f242311f402bf377386a1e7", "filename": "gcc/testsuite/gcc.dg/vect/vect-simd-clone-18.c", "status": "added", "additions": 89, "deletions": 0, "changes": 89, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ee85b3255d638fd77ee3fe17a4e146c81545efb/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-simd-clone-18.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ee85b3255d638fd77ee3fe17a4e146c81545efb/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-simd-clone-18.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-simd-clone-18.c?ref=6ee85b3255d638fd77ee3fe17a4e146c81545efb", "patch": "@@ -0,0 +1,89 @@\n+/* { dg-require-effective-target vect_simd_clones } */\n+/* { dg-additional-options \"-fopenmp-simd\" } */\n+/* { dg-additional-options \"-mavx\" { target avx_runtime } } */\n+\n+/* Test that simd inbranch clones work correctly.  */\n+\n+#ifndef TYPE\n+#define TYPE int\n+#endif\n+\n+/* A simple function that will be cloned.  */\n+#pragma omp declare simd uniform(b)\n+TYPE __attribute__((noinline))\n+foo (TYPE b, TYPE a)\n+{\n+  return a + b;\n+}\n+\n+/* Check that \"inbranch\" clones are called correctly.  */\n+\n+void __attribute__((noipa))\n+masked (TYPE * __restrict a, TYPE * __restrict b, int size)\n+{\n+  #pragma omp simd\n+  for (int i = 0; i < size; i++)\n+    b[i] = a[i]<1 ? foo(1, a[i]) : a[i];\n+}\n+\n+/* Check that \"inbranch\" works when there might be unrolling.  */\n+\n+void __attribute__((noipa))\n+masked_fixed (TYPE * __restrict a, TYPE * __restrict b)\n+{\n+  #pragma omp simd\n+  for (int i = 0; i < 128; i++)\n+    b[i] = a[i]<1 ? foo(1, a[i]) : a[i];\n+}\n+\n+/* Validate the outputs.  */\n+\n+void\n+check_masked (TYPE *b, int size)\n+{\n+  for (int i = 0; i < size; i++)\n+    if (((TYPE)i < 1 && b[i] != (TYPE)(i + 1))\n+\t|| ((TYPE)i >= 1 && b[i] != (TYPE)i))\n+      {\n+\t__builtin_printf (\"error at %d\\n\", i);\n+\t__builtin_exit (1);\n+      }\n+}\n+\n+int\n+main ()\n+{\n+  TYPE a[1024];\n+  TYPE b[1024];\n+\n+  for (int i = 0; i < 1024; i++)\n+    a[i] = i;\n+\n+  masked_fixed (a, b);\n+  check_masked (b, 128);\n+\n+  /* Test various sizes to cover machines with different vectorization\n+     factors.  */\n+  for (int size = 8; size <= 1024; size *= 2)\n+    {\n+      masked (a, b, size);\n+      check_masked (b, size);\n+    }\n+\n+  /* Test sizes that might exercise the partial vector code-path.  */\n+  for (int size = 8; size <= 1024; size *= 2)\n+    {\n+      masked (a, b, size-4);\n+      check_masked (b, size-4);\n+    }\n+\n+  return 0;\n+}\n+\n+/* Ensure the the in-branch simd clones are used on targets that support them.\n+   Some targets use another call for the epilogue loops.  */\n+/* { dg-final { scan-tree-dump-times {[\\n\\r] [^\\n]* = foo\\.simdclone} 2 \"vect\" { target { ! aarch64*-*-* } } } } */\n+/* { dg-final { scan-tree-dump-times {[\\n\\r] [^\\n]* = foo\\.simdclone} 3 \"vect\" { target aarch64*-*-* } } } */\n+\n+/* The LTO test produces two dump files and we scan the wrong one.  */\n+/* { dg-skip-if \"\" { *-*-* } { \"-flto\" } { \"\" } } */"}, {"sha": "120993e517a8e7b565b459d1d89c9cb6aa7c4dd0", "filename": "gcc/testsuite/gcc.dg/vect/vect-simd-clone-18b.c", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ee85b3255d638fd77ee3fe17a4e146c81545efb/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-simd-clone-18b.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ee85b3255d638fd77ee3fe17a4e146c81545efb/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-simd-clone-18b.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-simd-clone-18b.c?ref=6ee85b3255d638fd77ee3fe17a4e146c81545efb", "patch": "@@ -0,0 +1,14 @@\n+/* { dg-require-effective-target vect_simd_clones } */\n+/* { dg-additional-options \"-fopenmp-simd\" } */\n+/* { dg-additional-options \"-mavx\" { target avx_runtime } } */\n+\n+#define TYPE float\n+#include \"vect-simd-clone-18.c\"\n+\n+/* Ensure the the in-branch simd clones are used on targets that support them.\n+   Some targets use another call for the epilogue loops.  */\n+/* { dg-final { scan-tree-dump-times {[\\n\\r] [^\\n]* = foo\\.simdclone} 2 \"vect\" { target { ! { avx_runtime || aarch64*-*-* } } } } } */\n+/* { dg-final { scan-tree-dump-times {[\\n\\r] [^\\n]* = foo\\.simdclone} 3 \"vect\" { target { avx_runtime || aarch64*-*-* } } } } */\n+\n+/* The LTO test produces two dump files and we scan the wrong one.  */\n+/* { dg-skip-if \"\" { *-*-* } { \"-flto\" } { \"\" } } */"}, {"sha": "0d1fc6de4e4ab6e23e3a1b8ac781b595af74b9a0", "filename": "gcc/testsuite/gcc.dg/vect/vect-simd-clone-18c.c", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ee85b3255d638fd77ee3fe17a4e146c81545efb/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-simd-clone-18c.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ee85b3255d638fd77ee3fe17a4e146c81545efb/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-simd-clone-18c.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-simd-clone-18c.c?ref=6ee85b3255d638fd77ee3fe17a4e146c81545efb", "patch": "@@ -0,0 +1,17 @@\n+/* { dg-require-effective-target vect_simd_clones } */\n+/* { dg-additional-options \"-fopenmp-simd\" } */\n+/* { dg-additional-options \"-mavx\" { target avx_runtime } } */\n+\n+#define TYPE short\n+#include \"vect-simd-clone-18.c\"\n+\n+/* Ensure the the in-branch simd clones are used on targets that support them.\n+   Some targets use another call for the epilogue loops.  */\n+/* { dg-final { scan-tree-dump-times {[\\n\\r] [^\\n]* = foo\\.simdclone} 2 \"vect\" { target { ! { x86_64*-*-* || { i686*-*-* || aarch64*-*-* } } } } } } */\n+/* { dg-final { scan-tree-dump-times {[\\n\\r] [^\\n]* = foo\\.simdclone} 3 \"vect\" { target { aarch64*-*-* } } } } */\n+\n+/* x86_64 fails to use in-branch clones for TYPE=short.  */\n+/* { dg-final { scan-tree-dump-times {[\\n\\r] [^\\n]* = foo\\.simdclone} 0 \"vect\" { target x86_64*-*-* i686*-*-* } } } */\n+\n+/* The LTO test produces two dump files and we scan the wrong one.  */\n+/* { dg-skip-if \"\" { *-*-* } { \"-flto\" } { \"\" } } */"}, {"sha": "1e6c028fc473519ffde282a8ddff9136f26771d5", "filename": "gcc/testsuite/gcc.dg/vect/vect-simd-clone-18d.c", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ee85b3255d638fd77ee3fe17a4e146c81545efb/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-simd-clone-18d.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ee85b3255d638fd77ee3fe17a4e146c81545efb/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-simd-clone-18d.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-simd-clone-18d.c?ref=6ee85b3255d638fd77ee3fe17a4e146c81545efb", "patch": "@@ -0,0 +1,17 @@\n+/* { dg-require-effective-target vect_simd_clones } */\n+/* { dg-additional-options \"-fopenmp-simd\" } */\n+/* { dg-additional-options \"-mavx\" { target avx_runtime } } */\n+\n+#define TYPE char\n+#include \"vect-simd-clone-18.c\"\n+\n+/* Ensure the the in-branch simd clones are used on targets that support them.\n+   Some targets use another call for the epilogue loops.  */\n+/* { dg-final { scan-tree-dump-times {[\\n\\r] [^\\n]* = foo\\.simdclone} 2 \"vect\" { target { ! { x86_64*-*-* || { i686*-*-* || aarch64*-*-* } } } } } } */\n+/* { dg-final { scan-tree-dump-times {[\\n\\r] [^\\n]* = foo\\.simdclone} 3 \"vect\" { target { aarch64*-*-* } } } } */\n+\n+/* x86_64 fails to use in-branch clones for TYPE=char.  */\n+/* { dg-final { scan-tree-dump-times {[\\n\\r] [^\\n]* = foo\\.simdclone} 0 \"vect\" { target x86_64*-*-* i686*-*-* } } } */\n+\n+/* The LTO test produces two dump files and we scan the wrong one.  */\n+/* { dg-skip-if \"\" { *-*-* } { \"-flto\" } { \"\" } } */"}, {"sha": "9d20e52cb9a44bd1d2a5e07e01d70850623545f4", "filename": "gcc/testsuite/gcc.dg/vect/vect-simd-clone-18e.c", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ee85b3255d638fd77ee3fe17a4e146c81545efb/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-simd-clone-18e.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ee85b3255d638fd77ee3fe17a4e146c81545efb/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-simd-clone-18e.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-simd-clone-18e.c?ref=6ee85b3255d638fd77ee3fe17a4e146c81545efb", "patch": "@@ -0,0 +1,16 @@\n+/* { dg-require-effective-target vect_simd_clones } */\n+/* { dg-additional-options \"-fopenmp-simd\" } */\n+/* { dg-additional-options \"-mavx\" { target avx_runtime } } */\n+\n+#define TYPE double\n+#include \"vect-simd-clone-18.c\"\n+\n+/* Ensure the the in-branch simd clones are used on targets that support them.\n+   Some targets use another call for the epilogue loops.\n+   Some targets use pairs of vectors and do twice the calls.  */\n+/* { dg-final { scan-tree-dump-times {[\\n\\r] [^\\n]* = foo\\.simdclone} 2 \"vect\" { target { { ! avx_runtime } && { ! { i686*-*-* && { ! lp64 } } } } } } } */\n+/* { dg-final { scan-tree-dump-times {[\\n\\r] [^\\n]* = foo\\.simdclone} 3 \"vect\" { target { avx_runtime && { ! { i686*-*-* && { ! lp64 } } } } } } } */\n+/* { dg-final { scan-tree-dump-times {[\\n\\r] [^\\n]* = foo\\.simdclone} 4 \"vect\" { target { i686*-*-* && { ! lp64 } } } } } */\n+\n+/* The LTO test produces two dump files and we scan the wrong one.  */\n+/* { dg-skip-if \"\" { *-*-* } { \"-flto\" } { \"\" } } */"}, {"sha": "09ee7ff60fdb19c4d460a08494b5e354b413ba1d", "filename": "gcc/testsuite/gcc.dg/vect/vect-simd-clone-18f.c", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ee85b3255d638fd77ee3fe17a4e146c81545efb/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-simd-clone-18f.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ee85b3255d638fd77ee3fe17a4e146c81545efb/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-simd-clone-18f.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-simd-clone-18f.c?ref=6ee85b3255d638fd77ee3fe17a4e146c81545efb", "patch": "@@ -0,0 +1,14 @@\n+/* { dg-require-effective-target vect_simd_clones } */\n+/* { dg-additional-options \"-fopenmp-simd\" } */\n+/* { dg-additional-options \"-mavx\" { target avx_runtime } } */\n+\n+#define TYPE __INT64_TYPE__\n+#include \"vect-simd-clone-18.c\"\n+\n+/* Ensure the the in-branch simd clones are used on targets that support them.\n+   Some targets use pairs of vectors and do twice the calls.  */\n+/* { dg-final { scan-tree-dump-times {[\\n\\r] [^\\n]* = foo\\.simdclone} 2 \"vect\" { target { ! { i686*-*-* && { ! lp64 } } } } } } */\n+/* { dg-final { scan-tree-dump-times {[\\n\\r] [^\\n]* = foo\\.simdclone} 4 \"vect\" { target { i686*-*-* && { ! lp64 } } } } } */\n+\n+/* The LTO test produces two dump files and we scan the wrong one.  */\n+/* { dg-skip-if \"\" { *-*-* } { \"-flto\" } { \"\" } } */"}, {"sha": "fa049db5b93254f00a2b402c86f72fafd605cc64", "filename": "gcc/testsuite/gcc.target/riscv/_Float16-zhinxmin-1.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ee85b3255d638fd77ee3fe17a4e146c81545efb/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2F_Float16-zhinxmin-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ee85b3255d638fd77ee3fe17a4e146c81545efb/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2F_Float16-zhinxmin-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2F_Float16-zhinxmin-1.c?ref=6ee85b3255d638fd77ee3fe17a4e146c81545efb", "patch": "@@ -5,6 +5,6 @@ _Float16 foo1 (_Float16 a, _Float16 b)\n {\n     /* { dg-final { scan-assembler-not \"fmv.h\" } } */\n     /* { dg-final { scan-assembler-not \"fmv.s\" } } */\n-    /* { dg-final { scan-assembler-times \"mv\" 1 } } */\n+    /* { dg-final { scan-assembler-times \"mv\\ta0\" 1 } } */\n     return b;\n }"}, {"sha": "5ff07da1146b7b9bf2e6c244cb0a2890a55372a1", "filename": "gcc/testsuite/gcc.target/riscv/rvv/base/ternop_vv_constraint-3.c", "status": "added", "additions": 83, "deletions": 0, "changes": 83, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ee85b3255d638fd77ee3fe17a4e146c81545efb/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fternop_vv_constraint-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ee85b3255d638fd77ee3fe17a4e146c81545efb/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fternop_vv_constraint-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fternop_vv_constraint-3.c?ref=6ee85b3255d638fd77ee3fe17a4e146c81545efb", "patch": "@@ -0,0 +1,83 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32d -O3\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n+#include \"riscv_vector.h\"\n+\n+/*\n+** f1:\n+**\tvsetivli\\tzero,4,e32,m1,ta,ma\n+**\tvle32\\.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**\tvle32\\.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**\tvfma[c-d][c-d]\\.vv\\tv[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\n+**\tvfma[c-d][c-d]\\.vv\\tv[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\n+**\tvfma[c-d][c-d]\\.vv\\tv[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\n+**\tvfma[c-d][c-d]\\.vv\\tv[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\n+**\tvfma[c-d][c-d]\\.vv\\tv[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\n+**\tvse32\\.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**\tret\n+*/\n+void f1 (void * in, void * in2, void *out)\n+{\n+    vfloat32m1_t v = __riscv_vle32_v_f32m1 (in, 4);\n+    vfloat32m1_t v2 = __riscv_vle32_v_f32m1 (in2, 4);\n+    vfloat32m1_t v3 = __riscv_vfmacc_vv_f32m1 (v, v2, v2, 4);\n+    vfloat32m1_t v4 = __riscv_vfmacc_vv_f32m1(v3, v2, v2, 4);\n+    v4 = __riscv_vfmacc_vv_f32m1 (v4, v2, v2, 4);\n+    v4 = __riscv_vfmacc_vv_f32m1 (v4, v2, v2, 4);\n+    v4 = __riscv_vfmacc_vv_f32m1 (v4, v2, v2, 4);\n+    __riscv_vse32_v_f32m1 (out, v4, 4);\n+}\n+\n+/*\n+** f2:\n+**\tvsetivli\\tzero,4,e32,m1,tu,ma\n+**\tvle32\\.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**\tvle32\\.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**\tvfma[c-d][c-d]\\.vv\\tv[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\n+**\tvfma[c-d][c-d]\\.vv\\tv[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\n+**\tvfma[c-d][c-d]\\.vv\\tv[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\n+**\tvfma[c-d][c-d]\\.vv\\tv[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\n+**\tvfma[c-d][c-d]\\.vv\\tv[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\n+**\tvse32\\.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**\tret\n+*/\n+void f2 (void * in, void * in2, void *out)\n+{\n+    vfloat32m1_t v = __riscv_vle32_v_f32m1 (in, 4);\n+    vfloat32m1_t v2 = __riscv_vle32_v_f32m1 (in2, 4);\n+    vfloat32m1_t v3 = __riscv_vfmacc_vv_f32m1_tu (v, v2, v2, 4);\n+    vfloat32m1_t v4 = __riscv_vfmacc_vv_f32m1_tu(v3, v2, v2, 4);\n+    v4 = __riscv_vfmacc_vv_f32m1_tu (v4, v2, v2, 4);\n+    v4 = __riscv_vfmacc_vv_f32m1_tu (v4, v2, v2, 4);\n+    v4 = __riscv_vfmacc_vv_f32m1_tu (v4, v2, v2, 4);\n+    __riscv_vse32_v_f32m1 (out, v4, 4);\n+}\n+\n+/*\n+** f3:\n+**\tvsetivli\\tzero,4,e32,m1,ta,ma\n+**\tvlm\\.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**\tvle32\\.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**\tvle32\\.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**\tvfma[c-d][c-d]\\.vv\\tv[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,v0.t\n+**\tvfma[c-d][c-d]\\.vv\\tv[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,v0.t\n+**\tvfma[c-d][c-d]\\.vv\\tv[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,v0.t\n+**\tvfma[c-d][c-d]\\.vv\\tv[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,v0.t\n+**\tvfma[c-d][c-d]\\.vv\\tv[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,v0.t\n+**\tvse32\\.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**\tret\n+*/\n+void f3 (void * in, void * in2, void * in3, void *out)\n+{\n+    vbool32_t m = __riscv_vlm_v_b32 (in3, 4);\n+    vfloat32m1_t v = __riscv_vle32_v_f32m1 (in, 4);\n+    vfloat32m1_t v2 = __riscv_vle32_v_f32m1 (in2, 4);\n+    vfloat32m1_t v3 = __riscv_vfmacc_vv_f32m1_m (m, v, v2, v2, 4);\n+    vfloat32m1_t v4 = __riscv_vfmacc_vv_f32m1_m(m, v3, v2, v2, 4);\n+    v4 = __riscv_vfmacc_vv_f32m1_m (m, v4, v2, v2, 4);\n+    v4 = __riscv_vfmacc_vv_f32m1_m (m, v4, v2, v2, 4);\n+    v4 = __riscv_vfmacc_vv_f32m1_m (m, v4, v2, v2, 4);\n+    __riscv_vse32_v_f32m1 (out, v4, 4);\n+}\n+\n+/* { dg-final { scan-assembler-not {vmv} } } */"}, {"sha": "c280d97824ff22b2af1006e8c2175aa34d71c7f8", "filename": "gcc/testsuite/gcc.target/riscv/rvv/base/ternop_vv_constraint-4.c", "status": "added", "additions": 83, "deletions": 0, "changes": 83, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ee85b3255d638fd77ee3fe17a4e146c81545efb/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fternop_vv_constraint-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ee85b3255d638fd77ee3fe17a4e146c81545efb/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fternop_vv_constraint-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fternop_vv_constraint-4.c?ref=6ee85b3255d638fd77ee3fe17a4e146c81545efb", "patch": "@@ -0,0 +1,83 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32d -O3\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n+#include \"riscv_vector.h\"\n+\n+/*\n+** f1:\n+**\tvsetivli\\tzero,4,e32,m1,ta,ma\n+**\tvle32\\.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**\tvle32\\.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**\tvfma[c-d][c-d]\\.vv\\tv[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\n+**\tvfma[c-d][c-d]\\.vv\\tv[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\n+**\tvfma[c-d][c-d]\\.vv\\tv[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\n+**\tvfma[c-d][c-d]\\.vv\\tv[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\n+**\tvfma[c-d][c-d]\\.vv\\tv[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\n+**\tvse32\\.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**\tret\n+*/\n+void f1 (void * in, void * in2, void *out)\n+{\n+    vfloat32m1_t v = __riscv_vle32_v_f32m1 (in, 4);\n+    vfloat32m1_t v2 = __riscv_vle32_v_f32m1 (in2, 4);\n+    vfloat32m1_t v3 = __riscv_vfmadd_vv_f32m1 (v, v2, v2, 4);\n+    vfloat32m1_t v4 = __riscv_vfmadd_vv_f32m1(v3, v2, v2, 4);\n+    v4 = __riscv_vfmadd_vv_f32m1 (v4, v2, v2, 4);\n+    v4 = __riscv_vfmadd_vv_f32m1 (v4, v2, v2, 4);\n+    v4 = __riscv_vfmadd_vv_f32m1 (v4, v2, v2, 4);\n+    __riscv_vse32_v_f32m1 (out, v4, 4);\n+}\n+\n+/*\n+** f2:\n+**\tvsetivli\\tzero,4,e32,m1,tu,ma\n+**\tvle32\\.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**\tvle32\\.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**\tvfma[c-d][c-d]\\.vv\\tv[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\n+**\tvfma[c-d][c-d]\\.vv\\tv[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\n+**\tvfma[c-d][c-d]\\.vv\\tv[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\n+**\tvfma[c-d][c-d]\\.vv\\tv[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\n+**\tvfma[c-d][c-d]\\.vv\\tv[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\n+**\tvse32\\.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**\tret\n+*/\n+void f2 (void * in, void * in2, void *out)\n+{\n+    vfloat32m1_t v = __riscv_vle32_v_f32m1 (in, 4);\n+    vfloat32m1_t v2 = __riscv_vle32_v_f32m1 (in2, 4);\n+    vfloat32m1_t v3 = __riscv_vfmadd_vv_f32m1_tu (v, v2, v2, 4);\n+    vfloat32m1_t v4 = __riscv_vfmadd_vv_f32m1_tu(v3, v2, v2, 4);\n+    v4 = __riscv_vfmadd_vv_f32m1_tu (v4, v2, v2, 4);\n+    v4 = __riscv_vfmadd_vv_f32m1_tu (v4, v2, v2, 4);\n+    v4 = __riscv_vfmadd_vv_f32m1_tu (v4, v2, v2, 4);\n+    __riscv_vse32_v_f32m1 (out, v4, 4);\n+}\n+\n+/*\n+** f3:\n+**\tvsetivli\\tzero,4,e32,m1,ta,ma\n+**\tvlm\\.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**\tvle32\\.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**\tvle32\\.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**\tvfma[c-d][c-d]\\.vv\\tv[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,v0.t\n+**\tvfma[c-d][c-d]\\.vv\\tv[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,v0.t\n+**\tvfma[c-d][c-d]\\.vv\\tv[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,v0.t\n+**\tvfma[c-d][c-d]\\.vv\\tv[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,v0.t\n+**\tvfma[c-d][c-d]\\.vv\\tv[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,v0.t\n+**\tvse32\\.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**\tret\n+*/\n+void f3 (void * in, void * in2, void * in3, void *out)\n+{\n+    vbool32_t m = __riscv_vlm_v_b32 (in3, 4);\n+    vfloat32m1_t v = __riscv_vle32_v_f32m1 (in, 4);\n+    vfloat32m1_t v2 = __riscv_vle32_v_f32m1 (in2, 4);\n+    vfloat32m1_t v3 = __riscv_vfmadd_vv_f32m1_m (m, v, v2, v2, 4);\n+    vfloat32m1_t v4 = __riscv_vfmadd_vv_f32m1_m(m, v3, v2, v2, 4);\n+    v4 = __riscv_vfmadd_vv_f32m1_m (m, v4, v2, v2, 4);\n+    v4 = __riscv_vfmadd_vv_f32m1_m (m, v4, v2, v2, 4);\n+    v4 = __riscv_vfmadd_vv_f32m1_m (m, v4, v2, v2, 4);\n+    __riscv_vse32_v_f32m1 (out, v4, 4);\n+}\n+\n+/* { dg-final { scan-assembler-not {vmv} } } */"}, {"sha": "1f71aa867c209e5b9eac8e9ba4370b0d660accba", "filename": "gcc/testsuite/gcc.target/riscv/rvv/base/ternop_vv_constraint-5.c", "status": "added", "additions": 83, "deletions": 0, "changes": 83, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ee85b3255d638fd77ee3fe17a4e146c81545efb/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fternop_vv_constraint-5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ee85b3255d638fd77ee3fe17a4e146c81545efb/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fternop_vv_constraint-5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fternop_vv_constraint-5.c?ref=6ee85b3255d638fd77ee3fe17a4e146c81545efb", "patch": "@@ -0,0 +1,83 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32d -O3\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n+#include \"riscv_vector.h\"\n+\n+/*\n+** f1:\n+**\tvsetivli\\tzero,4,e32,m1,ta,ma\n+**\tvle32\\.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**\tvle32\\.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**\tvfnma[c-d][c-d]\\.vv\\tv[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\n+**\tvfnma[c-d][c-d]\\.vv\\tv[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\n+**\tvfnma[c-d][c-d]\\.vv\\tv[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\n+**\tvfnma[c-d][c-d]\\.vv\\tv[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\n+**\tvfnma[c-d][c-d]\\.vv\\tv[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\n+**\tvse32\\.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**\tret\n+*/\n+void f1 (void * in, void * in2, void *out)\n+{\n+    vfloat32m1_t v = __riscv_vle32_v_f32m1 (in, 4);\n+    vfloat32m1_t v2 = __riscv_vle32_v_f32m1 (in2, 4);\n+    vfloat32m1_t v3 = __riscv_vfnmacc_vv_f32m1 (v, v2, v2, 4);\n+    vfloat32m1_t v4 = __riscv_vfnmacc_vv_f32m1(v3, v2, v2, 4);\n+    v4 = __riscv_vfnmacc_vv_f32m1 (v4, v2, v2, 4);\n+    v4 = __riscv_vfnmacc_vv_f32m1 (v4, v2, v2, 4);\n+    v4 = __riscv_vfnmacc_vv_f32m1 (v4, v2, v2, 4);\n+    __riscv_vse32_v_f32m1 (out, v4, 4);\n+}\n+\n+/*\n+** f2:\n+**\tvsetivli\\tzero,4,e32,m1,tu,ma\n+**\tvle32\\.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**\tvle32\\.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**\tvfnma[c-d][c-d]\\.vv\\tv[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\n+**\tvfnma[c-d][c-d]\\.vv\\tv[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\n+**\tvfnma[c-d][c-d]\\.vv\\tv[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\n+**\tvfnma[c-d][c-d]\\.vv\\tv[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\n+**\tvfnma[c-d][c-d]\\.vv\\tv[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\n+**\tvse32\\.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**\tret\n+*/\n+void f2 (void * in, void * in2, void *out)\n+{\n+    vfloat32m1_t v = __riscv_vle32_v_f32m1 (in, 4);\n+    vfloat32m1_t v2 = __riscv_vle32_v_f32m1 (in2, 4);\n+    vfloat32m1_t v3 = __riscv_vfnmacc_vv_f32m1_tu (v, v2, v2, 4);\n+    vfloat32m1_t v4 = __riscv_vfnmacc_vv_f32m1_tu(v3, v2, v2, 4);\n+    v4 = __riscv_vfnmacc_vv_f32m1_tu (v4, v2, v2, 4);\n+    v4 = __riscv_vfnmacc_vv_f32m1_tu (v4, v2, v2, 4);\n+    v4 = __riscv_vfnmacc_vv_f32m1_tu (v4, v2, v2, 4);\n+    __riscv_vse32_v_f32m1 (out, v4, 4);\n+}\n+\n+/*\n+** f3:\n+**\tvsetivli\\tzero,4,e32,m1,ta,ma\n+**\tvlm\\.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**\tvle32\\.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**\tvle32\\.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**\tvfnma[c-d][c-d]\\.vv\\tv[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,v0.t\n+**\tvfnma[c-d][c-d]\\.vv\\tv[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,v0.t\n+**\tvfnma[c-d][c-d]\\.vv\\tv[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,v0.t\n+**\tvfnma[c-d][c-d]\\.vv\\tv[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,v0.t\n+**\tvfnma[c-d][c-d]\\.vv\\tv[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,v0.t\n+**\tvse32\\.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**\tret\n+*/\n+void f3 (void * in, void * in2, void * in3, void *out)\n+{\n+    vbool32_t m = __riscv_vlm_v_b32 (in3, 4);\n+    vfloat32m1_t v = __riscv_vle32_v_f32m1 (in, 4);\n+    vfloat32m1_t v2 = __riscv_vle32_v_f32m1 (in2, 4);\n+    vfloat32m1_t v3 = __riscv_vfnmacc_vv_f32m1_m (m, v, v2, v2, 4);\n+    vfloat32m1_t v4 = __riscv_vfnmacc_vv_f32m1_m(m, v3, v2, v2, 4);\n+    v4 = __riscv_vfnmacc_vv_f32m1_m (m, v4, v2, v2, 4);\n+    v4 = __riscv_vfnmacc_vv_f32m1_m (m, v4, v2, v2, 4);\n+    v4 = __riscv_vfnmacc_vv_f32m1_m (m, v4, v2, v2, 4);\n+    __riscv_vse32_v_f32m1 (out, v4, 4);\n+}\n+\n+/* { dg-final { scan-assembler-not {vmv} } } */"}, {"sha": "2d2ed66143439302b0c1c2a33aa231b798b9c9df", "filename": "gcc/testsuite/gcc.target/riscv/rvv/base/ternop_vv_constraint-6.c", "status": "added", "additions": 83, "deletions": 0, "changes": 83, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ee85b3255d638fd77ee3fe17a4e146c81545efb/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fternop_vv_constraint-6.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ee85b3255d638fd77ee3fe17a4e146c81545efb/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fternop_vv_constraint-6.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fternop_vv_constraint-6.c?ref=6ee85b3255d638fd77ee3fe17a4e146c81545efb", "patch": "@@ -0,0 +1,83 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32d -O3\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n+#include \"riscv_vector.h\"\n+\n+/*\n+** f1:\n+**\tvsetivli\\tzero,4,e32,m1,ta,ma\n+**\tvle32\\.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**\tvle32\\.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**\tvfnma[c-d][c-d]\\.vv\\tv[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\n+**\tvfnma[c-d][c-d]\\.vv\\tv[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\n+**\tvfnma[c-d][c-d]\\.vv\\tv[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\n+**\tvfnma[c-d][c-d]\\.vv\\tv[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\n+**\tvfnma[c-d][c-d]\\.vv\\tv[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\n+**\tvse32\\.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**\tret\n+*/\n+void f1 (void * in, void * in2, void *out)\n+{\n+    vfloat32m1_t v = __riscv_vle32_v_f32m1 (in, 4);\n+    vfloat32m1_t v2 = __riscv_vle32_v_f32m1 (in2, 4);\n+    vfloat32m1_t v3 = __riscv_vfnmadd_vv_f32m1 (v, v2, v2, 4);\n+    vfloat32m1_t v4 = __riscv_vfnmadd_vv_f32m1(v3, v2, v2, 4);\n+    v4 = __riscv_vfnmadd_vv_f32m1 (v4, v2, v2, 4);\n+    v4 = __riscv_vfnmadd_vv_f32m1 (v4, v2, v2, 4);\n+    v4 = __riscv_vfnmadd_vv_f32m1 (v4, v2, v2, 4);\n+    __riscv_vse32_v_f32m1 (out, v4, 4);\n+}\n+\n+/*\n+** f2:\n+**\tvsetivli\\tzero,4,e32,m1,tu,ma\n+**\tvle32\\.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**\tvle32\\.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**\tvfnma[c-d][c-d]\\.vv\\tv[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\n+**\tvfnma[c-d][c-d]\\.vv\\tv[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\n+**\tvfnma[c-d][c-d]\\.vv\\tv[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\n+**\tvfnma[c-d][c-d]\\.vv\\tv[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\n+**\tvfnma[c-d][c-d]\\.vv\\tv[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\n+**\tvse32\\.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**\tret\n+*/\n+void f2 (void * in, void * in2, void *out)\n+{\n+    vfloat32m1_t v = __riscv_vle32_v_f32m1 (in, 4);\n+    vfloat32m1_t v2 = __riscv_vle32_v_f32m1 (in2, 4);\n+    vfloat32m1_t v3 = __riscv_vfnmadd_vv_f32m1_tu (v, v2, v2, 4);\n+    vfloat32m1_t v4 = __riscv_vfnmadd_vv_f32m1_tu(v3, v2, v2, 4);\n+    v4 = __riscv_vfnmadd_vv_f32m1_tu (v4, v2, v2, 4);\n+    v4 = __riscv_vfnmadd_vv_f32m1_tu (v4, v2, v2, 4);\n+    v4 = __riscv_vfnmadd_vv_f32m1_tu (v4, v2, v2, 4);\n+    __riscv_vse32_v_f32m1 (out, v4, 4);\n+}\n+\n+/*\n+** f3:\n+**\tvsetivli\\tzero,4,e32,m1,ta,ma\n+**\tvlm\\.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**\tvle32\\.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**\tvle32\\.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**\tvfnma[c-d][c-d]\\.vv\\tv[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,v0.t\n+**\tvfnma[c-d][c-d]\\.vv\\tv[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,v0.t\n+**\tvfnma[c-d][c-d]\\.vv\\tv[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,v0.t\n+**\tvfnma[c-d][c-d]\\.vv\\tv[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,v0.t\n+**\tvfnma[c-d][c-d]\\.vv\\tv[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,v0.t\n+**\tvse32\\.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**\tret\n+*/\n+void f3 (void * in, void * in2, void * in3, void *out)\n+{\n+    vbool32_t m = __riscv_vlm_v_b32 (in3, 4);\n+    vfloat32m1_t v = __riscv_vle32_v_f32m1 (in, 4);\n+    vfloat32m1_t v2 = __riscv_vle32_v_f32m1 (in2, 4);\n+    vfloat32m1_t v3 = __riscv_vfnmadd_vv_f32m1_m (m, v, v2, v2, 4);\n+    vfloat32m1_t v4 = __riscv_vfnmadd_vv_f32m1_m(m, v3, v2, v2, 4);\n+    v4 = __riscv_vfnmadd_vv_f32m1_m (m, v4, v2, v2, 4);\n+    v4 = __riscv_vfnmadd_vv_f32m1_m (m, v4, v2, v2, 4);\n+    v4 = __riscv_vfnmadd_vv_f32m1_m (m, v4, v2, v2, 4);\n+    __riscv_vse32_v_f32m1 (out, v4, 4);\n+}\n+\n+/* { dg-final { scan-assembler-not {vmv} } } */"}, {"sha": "82e14734056d7bbe8a7ba7e17b2b33a6f2491aac", "filename": "gcc/testsuite/gcc.target/riscv/rvv/base/ternop_vx_constraint-8.c", "status": "added", "additions": 71, "deletions": 0, "changes": 71, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ee85b3255d638fd77ee3fe17a4e146c81545efb/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fternop_vx_constraint-8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ee85b3255d638fd77ee3fe17a4e146c81545efb/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fternop_vx_constraint-8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fternop_vx_constraint-8.c?ref=6ee85b3255d638fd77ee3fe17a4e146c81545efb", "patch": "@@ -0,0 +1,71 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32d -O3\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n+#include \"riscv_vector.h\"\n+\n+/*\n+** f1:\n+**\tvsetivli\\tzero,4,e32,m1,tu,ma\n+**\tvle32\\.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**\tvle32\\.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**\tvfma[c-d][c-d]\\.vf\\tv[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\n+**\tvfma[c-d][c-d]\\.vf\\tv[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\n+**\tvse32\\.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**\tret\n+*/\n+void f1 (void * in, void * in2, void *out, float x)\n+{\n+    vfloat32m1_t v = __riscv_vle32_v_f32m1 (in, 4);\n+    vfloat32m1_t v2 = __riscv_vle32_v_f32m1 (in2, 4);\n+    vfloat32m1_t v3 = __riscv_vfmacc_vf_f32m1 (v, x, v2, 4);\n+    vfloat32m1_t v4 = __riscv_vfmacc_vf_f32m1_tu (v3, x, v2, 4);\n+    __riscv_vse32_v_f32m1 (out, v4, 4);\n+}\n+\n+/*\n+** f2:\n+**\tvsetvli\\t[a-x0-9]+,zero,e8,mf4,ta,ma\n+**\tvlm.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**\tvsetivli\\tzero,4,e32,m1,tu,ma\n+**\tvle32.v\\tv[0-9]+,0\\([a-x0-9]+\\),v0.t\n+**\tvle32.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**\tvfma[c-d][c-d]\\.vf\\tv[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\n+**\tvfma[c-d][c-d]\\.vf\\tv[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\n+**\tvse32.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**\tret\n+*/\n+void f2 (void * in, void * in2, void *out, float x)\n+{\n+    vbool32_t mask = *(vbool32_t*)in;\n+    asm volatile (\"\":::\"memory\");\n+    vfloat32m1_t v = __riscv_vle32_v_f32m1 (in, 4);\n+    vfloat32m1_t v2 = __riscv_vle32_v_f32m1_m (mask, in2, 4);\n+    vfloat32m1_t v3 = __riscv_vfmacc_vf_f32m1 (v, x, v2, 4);\n+    vfloat32m1_t v4 = __riscv_vfmacc_vf_f32m1_tu (v3, x, v2, 4);\n+    __riscv_vse32_v_f32m1 (out, v4, 4);\n+}\n+\n+/*\n+** f3:\n+**\tvsetvli\\t[a-x0-9]+,zero,e8,mf4,ta,ma\n+**\tvlm.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**\tvsetivli\\tzero,4,e32,m1,tu,mu\n+**\tvle32.v\\tv[0-9]+,0\\([a-x0-9]+\\),v0.t\n+**\tvle32.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**\tvfma[c-d][c-d]\\.vf\\tv[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\n+**\tvfma[c-d][c-d]\\.vf\\tv[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,v0.t\n+**\tvse32.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**\tret\n+*/\n+void f3 (void * in, void * in2, void *out, float x)\n+{\n+    vbool32_t mask = *(vbool32_t*)in;\n+    asm volatile (\"\":::\"memory\");\n+    vfloat32m1_t v = __riscv_vle32_v_f32m1 (in, 4);\n+    vfloat32m1_t v2 = __riscv_vle32_v_f32m1_m (mask, in2, 4);\n+    vfloat32m1_t v3 = __riscv_vfmacc_vf_f32m1 (v, x, v2, 4);\n+    vfloat32m1_t v4 = __riscv_vfmacc_vf_f32m1_tumu (mask, v3, x, v2, 4);\n+    __riscv_vse32_v_f32m1 (out, v4, 4);\n+}\n+\n+/* { dg-final { scan-assembler-not {vmv} } } */"}, {"sha": "1beed49d9ac2019c64874b5b96e5d4b67d72e809", "filename": "gcc/testsuite/gcc.target/riscv/rvv/base/ternop_vx_constraint-9.c", "status": "added", "additions": 71, "deletions": 0, "changes": 71, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ee85b3255d638fd77ee3fe17a4e146c81545efb/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fternop_vx_constraint-9.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ee85b3255d638fd77ee3fe17a4e146c81545efb/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fternop_vx_constraint-9.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fternop_vx_constraint-9.c?ref=6ee85b3255d638fd77ee3fe17a4e146c81545efb", "patch": "@@ -0,0 +1,71 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32d -O3\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n+#include \"riscv_vector.h\"\n+\n+/*\n+** f1:\n+**\tvsetivli\\tzero,4,e32,m1,tu,ma\n+**\tvle32\\.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**\tvle32\\.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**\tvfnma[c-d][c-d]\\.vf\\tv[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\n+**\tvfnma[c-d][c-d]\\.vf\\tv[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\n+**\tvse32\\.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**\tret\n+*/\n+void f1 (void * in, void * in2, void *out, float x)\n+{\n+    vfloat32m1_t v = __riscv_vle32_v_f32m1 (in, 4);\n+    vfloat32m1_t v2 = __riscv_vle32_v_f32m1 (in2, 4);\n+    vfloat32m1_t v3 = __riscv_vfnmacc_vf_f32m1 (v, x, v2, 4);\n+    vfloat32m1_t v4 = __riscv_vfnmacc_vf_f32m1_tu (v3, x, v2, 4);\n+    __riscv_vse32_v_f32m1 (out, v4, 4);\n+}\n+\n+/*\n+** f2:\n+**\tvsetvli\\t[a-x0-9]+,zero,e8,mf4,ta,ma\n+**\tvlm.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**\tvsetivli\\tzero,4,e32,m1,tu,ma\n+**\tvle32.v\\tv[0-9]+,0\\([a-x0-9]+\\),v0.t\n+**\tvle32.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**\tvfnma[c-d][c-d]\\.vf\\tv[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\n+**\tvfnma[c-d][c-d]\\.vf\\tv[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\n+**\tvse32.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**\tret\n+*/\n+void f2 (void * in, void * in2, void *out, float x)\n+{\n+    vbool32_t mask = *(vbool32_t*)in;\n+    asm volatile (\"\":::\"memory\");\n+    vfloat32m1_t v = __riscv_vle32_v_f32m1 (in, 4);\n+    vfloat32m1_t v2 = __riscv_vle32_v_f32m1_m (mask, in2, 4);\n+    vfloat32m1_t v3 = __riscv_vfnmacc_vf_f32m1 (v, x, v2, 4);\n+    vfloat32m1_t v4 = __riscv_vfnmacc_vf_f32m1_tu (v3, x, v2, 4);\n+    __riscv_vse32_v_f32m1 (out, v4, 4);\n+}\n+\n+/*\n+** f3:\n+**\tvsetvli\\t[a-x0-9]+,zero,e8,mf4,ta,ma\n+**\tvlm.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**\tvsetivli\\tzero,4,e32,m1,tu,mu\n+**\tvle32.v\\tv[0-9]+,0\\([a-x0-9]+\\),v0.t\n+**\tvle32.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**\tvfnma[c-d][c-d]\\.vf\\tv[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\n+**\tvfnma[c-d][c-d]\\.vf\\tv[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,v0.t\n+**\tvse32.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**\tret\n+*/\n+void f3 (void * in, void * in2, void *out, float x)\n+{\n+    vbool32_t mask = *(vbool32_t*)in;\n+    asm volatile (\"\":::\"memory\");\n+    vfloat32m1_t v = __riscv_vle32_v_f32m1 (in, 4);\n+    vfloat32m1_t v2 = __riscv_vle32_v_f32m1_m (mask, in2, 4);\n+    vfloat32m1_t v3 = __riscv_vfnmacc_vf_f32m1 (v, x, v2, 4);\n+    vfloat32m1_t v4 = __riscv_vfnmacc_vf_f32m1_tumu (mask, v3, x, v2, 4);\n+    __riscv_vse32_v_f32m1 (out, v4, 4);\n+}\n+\n+/* { dg-final { scan-assembler-not {vmv} } } */"}, {"sha": "7bad3fb9a3f8120fd0b628796b2e716e856c8549", "filename": "gcc/testsuite/gcc.target/riscv/rvv/vsetvl/avl_multiple-1.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ee85b3255d638fd77ee3fe17a4e146c81545efb/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Favl_multiple-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ee85b3255d638fd77ee3fe17a4e146c81545efb/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Favl_multiple-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Favl_multiple-1.c?ref=6ee85b3255d638fd77ee3fe17a4e146c81545efb", "patch": "@@ -32,4 +32,4 @@ void f (void * restrict in, void * restrict out, int n, int cond)\n     }\n }\n \n-/* { dg-final { scan-assembler-times {\\.L[0-9]+\\:\\s+vle8\\.v\\s+v[0-9]+,\\s*0\\s*\\([a-x0-9]+\\)} 1 { target { no-opts \"-O0\" no-opts \"-Os\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */\n+/* { dg-final { scan-assembler-times {\\.L[0-9]+\\:\\s+vle8\\.v\\s+v[0-9]+,\\s*0\\s*\\([a-x0-9]+\\)} 1 { target { no-opts \"-O0\" no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */"}, {"sha": "77adaa7d07354344bb252050e77cdec19d4e4548", "filename": "gcc/testsuite/gcc.target/riscv/rvv/vsetvl/avl_multiple-10.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ee85b3255d638fd77ee3fe17a4e146c81545efb/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Favl_multiple-10.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ee85b3255d638fd77ee3fe17a4e146c81545efb/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Favl_multiple-10.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Favl_multiple-10.c?ref=6ee85b3255d638fd77ee3fe17a4e146c81545efb", "patch": "@@ -70,4 +70,4 @@ void f (void * restrict in, void * restrict out, int l, int n, int m, int cond)\n     }\n }\n \n-/* { dg-final { scan-assembler-times {\\.L[0-9]+\\:\\s+add\\s+\\s*[a-x0-9]+,\\s*[a-x0-9]+,\\s*[a-x0-9]+\\s+vle8\\.v\\s+v[0-9]+,\\s*0\\s*\\([a-x0-9]+\\)} 1 { target { no-opts \"-O0\" no-opts \"-Os\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */\n+/* { dg-final { scan-assembler-times {\\.L[0-9]+\\:\\s+add\\s+\\s*[a-x0-9]+,\\s*[a-x0-9]+,\\s*[a-x0-9]+\\s+vle8\\.v\\s+v[0-9]+,\\s*0\\s*\\([a-x0-9]+\\)} 1 { target { no-opts \"-O0\" no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */"}, {"sha": "06cae83ef1e7528772cb1992be7ac76b76aa6d00", "filename": "gcc/testsuite/gcc.target/riscv/rvv/vsetvl/avl_multiple-11.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ee85b3255d638fd77ee3fe17a4e146c81545efb/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Favl_multiple-11.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ee85b3255d638fd77ee3fe17a4e146c81545efb/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Favl_multiple-11.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Favl_multiple-11.c?ref=6ee85b3255d638fd77ee3fe17a4e146c81545efb", "patch": "@@ -36,5 +36,5 @@ void f (void * restrict in, void * restrict out, int n, int cond)\n }\n \n /* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */\n-/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\" no-opts \"-Os\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */\n-/* { dg-final { scan-assembler-times {vsetvli} 2 { target { no-opts \"-O0\" no-opts \"-Os\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\" no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli} 2 { target { no-opts \"-O0\" no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */"}, {"sha": "c94c38710a485f4d2704bfef754c146ad365b905", "filename": "gcc/testsuite/gcc.target/riscv/rvv/vsetvl/avl_multiple-12.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ee85b3255d638fd77ee3fe17a4e146c81545efb/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Favl_multiple-12.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ee85b3255d638fd77ee3fe17a4e146c81545efb/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Favl_multiple-12.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Favl_multiple-12.c?ref=6ee85b3255d638fd77ee3fe17a4e146c81545efb", "patch": "@@ -35,5 +35,5 @@ void f (void * restrict in, void * restrict out, int n, int cond)\n     }\n }\n \n-/* { dg-final { scan-assembler-times {\\.L[0-9]+\\:\\s+vle8\\.v\\s+v[0-9]+,\\s*0\\s*\\([a-x0-9]+\\)} 1 { target { no-opts \"-O0\" no-opts \"-Os\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */\n+/* { dg-final { scan-assembler-times {\\.L[0-9]+\\:\\s+vle8\\.v\\s+v[0-9]+,\\s*0\\s*\\([a-x0-9]+\\)} 1 { target { no-opts \"-O0\" no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */\n "}, {"sha": "41674f4f557dec158df1f09cb3e6424e33b9e609", "filename": "gcc/testsuite/gcc.target/riscv/rvv/vsetvl/avl_multiple-13.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ee85b3255d638fd77ee3fe17a4e146c81545efb/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Favl_multiple-13.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ee85b3255d638fd77ee3fe17a4e146c81545efb/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Favl_multiple-13.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Favl_multiple-13.c?ref=6ee85b3255d638fd77ee3fe17a4e146c81545efb", "patch": "@@ -43,4 +43,4 @@ void f (void * restrict in, void * restrict out, int n, int cond)\n     }\n }\n \n-/* { dg-final { scan-assembler-times {\\.L[0-9]+\\:\\s+vle8\\.v\\s+v[0-9]+,\\s*0\\s*\\([a-x0-9]+\\)} 2 { target { no-opts \"-O0\" no-opts \"-Os\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */\n+/* { dg-final { scan-assembler-times {\\.L[0-9]+\\:\\s+vle8\\.v\\s+v[0-9]+,\\s*0\\s*\\([a-x0-9]+\\)} 2 { target { no-opts \"-O0\" no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */"}, {"sha": "10be734dd9b2faa300d277a34f0980d8525dddb7", "filename": "gcc/testsuite/gcc.target/riscv/rvv/vsetvl/avl_multiple-14.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ee85b3255d638fd77ee3fe17a4e146c81545efb/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Favl_multiple-14.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ee85b3255d638fd77ee3fe17a4e146c81545efb/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Favl_multiple-14.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Favl_multiple-14.c?ref=6ee85b3255d638fd77ee3fe17a4e146c81545efb", "patch": "@@ -63,4 +63,4 @@ void f (void * restrict in, void * restrict out, int n, int m, int cond, int con\n       __riscv_vse8_v_i8mf8 (out + i + 200, v2, vl2);\n     }\n }\n-/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]} 2 { target { no-opts \"-O0\" no-opts \"-Os\" no-opts \"-O1\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]} 2 { target { no-opts \"-O0\" no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-O1\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */"}, {"sha": "2e2eb3efce2156dca881e5faab7ed32d827df8c6", "filename": "gcc/testsuite/gcc.target/riscv/rvv/vsetvl/avl_multiple-15.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ee85b3255d638fd77ee3fe17a4e146c81545efb/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Favl_multiple-15.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ee85b3255d638fd77ee3fe17a4e146c81545efb/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Favl_multiple-15.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Favl_multiple-15.c?ref=6ee85b3255d638fd77ee3fe17a4e146c81545efb", "patch": "@@ -64,4 +64,4 @@ void f (void * restrict in, void * restrict out, int n, int m, int cond, int con\n     }\n }\n \n-/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]} 2 { target { no-opts \"-O0\" no-opts \"-Os\" no-opts \"-O1\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]} 2 { target { no-opts \"-O0\" no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-O1\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */"}, {"sha": "777d9095d3779a5b9d6d972738e559f430a3d180", "filename": "gcc/testsuite/gcc.target/riscv/rvv/vsetvl/avl_multiple-16.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ee85b3255d638fd77ee3fe17a4e146c81545efb/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Favl_multiple-16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ee85b3255d638fd77ee3fe17a4e146c81545efb/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Favl_multiple-16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Favl_multiple-16.c?ref=6ee85b3255d638fd77ee3fe17a4e146c81545efb", "patch": "@@ -64,4 +64,4 @@ void f (void * restrict in, void * restrict out, int n, int m, int cond, int con\n     }\n }\n \n-/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*tu,\\s*m[au]} 2 { target { no-opts \"-O0\" no-opts \"-Os\" no-opts \"-O1\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*tu,\\s*m[au]} 2 { target { no-opts \"-O0\" no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-O1\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */"}, {"sha": "0f0370d056c77f1c20c39df2214853f5b569a7d6", "filename": "gcc/testsuite/gcc.target/riscv/rvv/vsetvl/avl_multiple-2.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ee85b3255d638fd77ee3fe17a4e146c81545efb/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Favl_multiple-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ee85b3255d638fd77ee3fe17a4e146c81545efb/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Favl_multiple-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Favl_multiple-2.c?ref=6ee85b3255d638fd77ee3fe17a4e146c81545efb", "patch": "@@ -31,5 +31,5 @@ void f (void * restrict in, void * restrict out, int n, int cond)\n     }\n }\n \n-/* { dg-final { scan-assembler-times {\\.L[0-9]+\\:\\s+vle8\\.v\\s+v[0-9]+,\\s*0\\s*\\([a-x0-9]+\\)} 1 { target { no-opts \"-O0\" no-opts \"-Os\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */\n+/* { dg-final { scan-assembler-times {\\.L[0-9]+\\:\\s+vle8\\.v\\s+v[0-9]+,\\s*0\\s*\\([a-x0-9]+\\)} 1 { target { no-opts \"-O0\" no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */\n /* { dg-final { scan-assembler {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]} { target { no-opts \"-O0\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */"}, {"sha": "43f272f267cead3b9264d31c2e4dd093e4d6f6c7", "filename": "gcc/testsuite/gcc.target/riscv/rvv/vsetvl/avl_multiple-3.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ee85b3255d638fd77ee3fe17a4e146c81545efb/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Favl_multiple-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ee85b3255d638fd77ee3fe17a4e146c81545efb/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Favl_multiple-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Favl_multiple-3.c?ref=6ee85b3255d638fd77ee3fe17a4e146c81545efb", "patch": "@@ -36,4 +36,4 @@ void f (void * restrict in, void * restrict out, int l, int n, int m, int cond)\n   }\n }\n \n-/* { dg-final { scan-assembler-times {\\.L[0-9]+\\:\\s+vle8\\.v\\s+v[0-9]+,\\s*0\\s*\\([a-x0-9]+\\)} 1 { target { no-opts \"-O0\" no-opts \"-Os\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */\n+/* { dg-final { scan-assembler-times {\\.L[0-9]+\\:\\s+vle8\\.v\\s+v[0-9]+,\\s*0\\s*\\([a-x0-9]+\\)} 1 { target { no-opts \"-O0\" no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */"}, {"sha": "c1f3cfc44bad80c4af85cf9ef7535fb791568573", "filename": "gcc/testsuite/gcc.target/riscv/rvv/vsetvl/avl_multiple-4.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ee85b3255d638fd77ee3fe17a4e146c81545efb/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Favl_multiple-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ee85b3255d638fd77ee3fe17a4e146c81545efb/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Favl_multiple-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Favl_multiple-4.c?ref=6ee85b3255d638fd77ee3fe17a4e146c81545efb", "patch": "@@ -35,4 +35,4 @@ void f (void * restrict in, void * restrict out, int l, int n, int m, int cond)\n   }\n }\n \n-/* { dg-final { scan-assembler-times {\\.L[0-9]+\\:\\s+vle8\\.v\\s+v[0-9]+,\\s*0\\s*\\([a-x0-9]+\\)} 1 { target { no-opts \"-O0\" no-opts \"-Os\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */\n+/* { dg-final { scan-assembler-times {\\.L[0-9]+\\:\\s+vle8\\.v\\s+v[0-9]+,\\s*0\\s*\\([a-x0-9]+\\)} 1 { target { no-opts \"-O0\" no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */"}, {"sha": "c1d1986528c769b40bed37162b78d6bb976fdda2", "filename": "gcc/testsuite/gcc.target/riscv/rvv/vsetvl/avl_multiple-7.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ee85b3255d638fd77ee3fe17a4e146c81545efb/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Favl_multiple-7.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ee85b3255d638fd77ee3fe17a4e146c81545efb/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Favl_multiple-7.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Favl_multiple-7.c?ref=6ee85b3255d638fd77ee3fe17a4e146c81545efb", "patch": "@@ -37,4 +37,4 @@ void f (void * restrict in, void * restrict out, int l, int n, int m, int cond)\n   }\n }\n \n-/* { dg-final { scan-assembler {add\\s+\\s*[a-x0-9]+,\\s*[a-x0-9]+,\\s*[a-x0-9]+\\s+vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]} { target { no-opts \"-O0\" no-opts \"-O1\" no-opts \"-Os\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */\n+/* { dg-final { scan-assembler {add\\s+\\s*[a-x0-9]+,\\s*[a-x0-9]+,\\s*[a-x0-9]+\\s+vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]} { target { no-opts \"-O0\" no-opts \"-O1\" no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */"}, {"sha": "7ccb712417415baec77237f8b6232608adf26b2d", "filename": "gcc/testsuite/gcc.target/riscv/rvv/vsetvl/avl_multiple-8.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ee85b3255d638fd77ee3fe17a4e146c81545efb/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Favl_multiple-8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ee85b3255d638fd77ee3fe17a4e146c81545efb/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Favl_multiple-8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Favl_multiple-8.c?ref=6ee85b3255d638fd77ee3fe17a4e146c81545efb", "patch": "@@ -36,4 +36,4 @@ void f (void * restrict in, void * restrict out, int l, int n, int m, int cond)\n   }\n }\n \n-/* { dg-final { scan-assembler {add\\s+\\s*[a-x0-9]+,\\s*[a-x0-9]+,\\s*[a-x0-9]+\\s+vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]} { target { no-opts \"-O0\" no-opts \"-O1\" no-opts \"-Os\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */\n+/* { dg-final { scan-assembler {add\\s+\\s*[a-x0-9]+,\\s*[a-x0-9]+,\\s*[a-x0-9]+\\s+vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]} { target { no-opts \"-O0\" no-opts \"-O1\" no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */"}, {"sha": "803c6961e31b2628724002f23f3d59dff465f39b", "filename": "gcc/testsuite/gcc.target/riscv/rvv/vsetvl/avl_multiple-9.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ee85b3255d638fd77ee3fe17a4e146c81545efb/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Favl_multiple-9.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ee85b3255d638fd77ee3fe17a4e146c81545efb/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Favl_multiple-9.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Favl_multiple-9.c?ref=6ee85b3255d638fd77ee3fe17a4e146c81545efb", "patch": "@@ -71,4 +71,4 @@ void f (void * restrict in, void * restrict out, int l, int n, int m, int cond)\n     }\n }\n \n-/* { dg-final { scan-assembler-times {\\.L[0-9]+\\:\\s+add\\s+\\s*[a-x0-9]+,\\s*[a-x0-9]+,\\s*[a-x0-9]+\\s+vle8\\.v\\s+v[0-9]+,\\s*0\\s*\\([a-x0-9]+\\)} 1 { target { no-opts \"-O0\" no-opts \"-Os\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */\n+/* { dg-final { scan-assembler-times {\\.L[0-9]+\\:\\s+add\\s+\\s*[a-x0-9]+,\\s*[a-x0-9]+,\\s*[a-x0-9]+\\s+vle8\\.v\\s+v[0-9]+,\\s*0\\s*\\([a-x0-9]+\\)} 1 { target { no-opts \"-O0\" no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */"}, {"sha": "83f7f1da49f159951d3fbff5f7436738f04ccbce", "filename": "gcc/testsuite/gcc.target/riscv/rvv/vsetvl/avl_single-1.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ee85b3255d638fd77ee3fe17a4e146c81545efb/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Favl_single-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ee85b3255d638fd77ee3fe17a4e146c81545efb/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Favl_single-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Favl_single-1.c?ref=6ee85b3255d638fd77ee3fe17a4e146c81545efb", "patch": "@@ -12,6 +12,6 @@ void f (void * restrict in, void * restrict out, int n, int vl)\n     }\n }\n \n-/* { dg-final { scan-assembler-times {\\.L[0-9]+\\:\\s+vle8\\.v\\s+v[0-9]+,\\s*0\\s*\\([a-x0-9]+\\)} 1 { target { no-opts \"-O0\" no-opts \"-Os\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */\n+/* { dg-final { scan-assembler-times {\\.L[0-9]+\\:\\s+vle8\\.v\\s+v[0-9]+,\\s*0\\s*\\([a-x0-9]+\\)} 1 { target { no-opts \"-O0\" no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */\n /* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */\n /* { dg-final { scan-assembler-times {vsetvli} 1 { target { no-opts \"-O0\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */"}, {"sha": "01fc236114cdeb56b76d4fc9092aa69abaca2a59", "filename": "gcc/testsuite/gcc.target/riscv/rvv/vsetvl/avl_single-10.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ee85b3255d638fd77ee3fe17a4e146c81545efb/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Favl_single-10.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ee85b3255d638fd77ee3fe17a4e146c81545efb/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Favl_single-10.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Favl_single-10.c?ref=6ee85b3255d638fd77ee3fe17a4e146c81545efb", "patch": "@@ -17,5 +17,5 @@ void f (void * restrict in, void * restrict out, int n)\n }\n \n /* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */\n-/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\" no-opts \"-Os\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */\n-/* { dg-final { scan-assembler-times {vsetvli} 2 { target { no-opts \"-O0\" no-opts \"-Os\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\" no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli} 2 { target { no-opts \"-O0\" no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */"}, {"sha": "3cb776eaefbd78e34dabd0a9f5087e916ec72942", "filename": "gcc/testsuite/gcc.target/riscv/rvv/vsetvl/avl_single-11.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ee85b3255d638fd77ee3fe17a4e146c81545efb/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Favl_single-11.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ee85b3255d638fd77ee3fe17a4e146c81545efb/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Favl_single-11.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Favl_single-11.c?ref=6ee85b3255d638fd77ee3fe17a4e146c81545efb", "patch": "@@ -16,6 +16,6 @@ void f (void * restrict in, void * restrict out, int n)\n     }\n }\n \n-/* { dg-final { scan-assembler-times {\\.L[0-9]+\\:\\s+vle8\\.v\\s+v[0-9]+,\\s*0\\s*\\([a-x0-9]+\\)} 1 { target { no-opts \"-O0\" no-opts \"-Os\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */\n+/* { dg-final { scan-assembler-times {\\.L[0-9]+\\:\\s+vle8\\.v\\s+v[0-9]+,\\s*0\\s*\\([a-x0-9]+\\)} 1 { target { no-opts \"-O0\" no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */\n /* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*tu,\\s*m[au]} 1 { target { no-opts \"-O0\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */\n /* { dg-final { scan-assembler-times {vsetvli} 1 { target { no-opts \"-O0\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */"}, {"sha": "6b0ff255298a556403654142bb5aa15e9b9a6199", "filename": "gcc/testsuite/gcc.target/riscv/rvv/vsetvl/avl_single-13.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ee85b3255d638fd77ee3fe17a4e146c81545efb/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Favl_single-13.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ee85b3255d638fd77ee3fe17a4e146c81545efb/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Favl_single-13.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Favl_single-13.c?ref=6ee85b3255d638fd77ee3fe17a4e146c81545efb", "patch": "@@ -24,5 +24,5 @@ void f (int8_t * restrict in, int8_t * restrict out, int n, int cond)\n     }\n }\n \n-/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*tu,\\s*m[au]} 1 { target { no-opts \"-O0\" no-opts \"-Os\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */\n-/* { dg-final { scan-assembler-times {vsetvli} 1 { target { no-opts \"-O0\" no-opts \"-Os\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*tu,\\s*m[au]} 1 { target { no-opts \"-O0\" no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli} 1 { target { no-opts \"-O0\" no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */"}, {"sha": "b3a1d46b3c023e7da2da06939a81832423521f36", "filename": "gcc/testsuite/gcc.target/riscv/rvv/vsetvl/avl_single-14.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ee85b3255d638fd77ee3fe17a4e146c81545efb/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Favl_single-14.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ee85b3255d638fd77ee3fe17a4e146c81545efb/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Favl_single-14.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Favl_single-14.c?ref=6ee85b3255d638fd77ee3fe17a4e146c81545efb", "patch": "@@ -23,5 +23,5 @@ void f (int8_t * restrict in, int8_t * restrict out, int n, int cond)\n     }\n }\n \n-/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*tu,\\s*m[au]} 1 { target { no-opts \"-O0\" no-opts \"-Os\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */\n-/* { dg-final { scan-assembler-times {vsetvli} 1 { target { no-opts \"-O0\" no-opts \"-Os\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*tu,\\s*m[au]} 1 { target { no-opts \"-O0\" no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli} 1 { target { no-opts \"-O0\" no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */"}, {"sha": "d15499b3bf6664207acbc0ce50b426259908b2a7", "filename": "gcc/testsuite/gcc.target/riscv/rvv/vsetvl/avl_single-16.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ee85b3255d638fd77ee3fe17a4e146c81545efb/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Favl_single-16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ee85b3255d638fd77ee3fe17a4e146c81545efb/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Favl_single-16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Favl_single-16.c?ref=6ee85b3255d638fd77ee3fe17a4e146c81545efb", "patch": "@@ -28,5 +28,5 @@ void f (int8_t * restrict in, int8_t * restrict out, int n, int m, int cond)\n   }\n }\n \n-/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*tu,\\s*mu} 1 { target { no-opts \"-O0\" no-opts \"-Os\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*tu,\\s*mu} 1 { target { no-opts \"-O0\" no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */\n /* { dg-final { scan-assembler-times {vsetvli} 2 { target { no-opts \"-O0\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */"}, {"sha": "4108dd30cd228047561667ed92f98892202b2106", "filename": "gcc/testsuite/gcc.target/riscv/rvv/vsetvl/avl_single-2.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ee85b3255d638fd77ee3fe17a4e146c81545efb/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Favl_single-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ee85b3255d638fd77ee3fe17a4e146c81545efb/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Favl_single-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Favl_single-2.c?ref=6ee85b3255d638fd77ee3fe17a4e146c81545efb", "patch": "@@ -12,7 +12,7 @@ void f (void * restrict in, void * restrict out, int n, size_t vl)\n     }\n }\n \n-/* { dg-final { scan-assembler-times {\\.L[0-9]+\\:\\s+vle8\\.v\\s+v[0-9]+,\\s*0\\s*\\([a-x0-9]+\\)} 1 { target { no-opts \"-O0\" no-opts \"-Os\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */\n+/* { dg-final { scan-assembler-times {\\.L[0-9]+\\:\\s+vle8\\.v\\s+v[0-9]+,\\s*0\\s*\\([a-x0-9]+\\)} 1 { target { no-opts \"-O0\" no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */\n /* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */\n /* { dg-final { scan-assembler-times {slli} 1 { target { no-opts \"-O0\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */\n /* { dg-final { scan-assembler-times {vsetvli} 1 { target { no-opts \"-O0\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */"}, {"sha": "708f04b46be448a81fd3fe5e3c6251de9ec64dad", "filename": "gcc/testsuite/gcc.target/riscv/rvv/vsetvl/avl_single-23.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ee85b3255d638fd77ee3fe17a4e146c81545efb/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Favl_single-23.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ee85b3255d638fd77ee3fe17a4e146c81545efb/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Favl_single-23.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Favl_single-23.c?ref=6ee85b3255d638fd77ee3fe17a4e146c81545efb", "patch": "@@ -29,6 +29,6 @@ void f (int8_t * restrict in, int8_t * restrict out, int n, int m, int cond)\n \n /* { dg-final { scan-assembler {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]} { target { no-opts \"-O0\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */\n /* { dg-final { scan-assembler {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*tu,\\s*mu} { target { no-opts \"-O0\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */\n-/* { dg-final { scan-assembler-times {vsetvli} 4 { target { no-opts \"-O0\" no-opts \"-Os\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli} 4 { target { no-opts \"-O0\" no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */\n /* { dg-final { scan-assembler-times {li\\s+[a-x0-9]+,101} 1 { target { no-opts \"-O0\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */\n /* { dg-final { scan-assembler-times {li\\s+[a-x0-9]+,102} 1 { target { no-opts \"-O0\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */"}, {"sha": "22004dab18c4d7d802b6127a737bf0eefd635597", "filename": "gcc/testsuite/gcc.target/riscv/rvv/vsetvl/avl_single-27.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ee85b3255d638fd77ee3fe17a4e146c81545efb/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Favl_single-27.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ee85b3255d638fd77ee3fe17a4e146c81545efb/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Favl_single-27.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Favl_single-27.c?ref=6ee85b3255d638fd77ee3fe17a4e146c81545efb", "patch": "@@ -32,5 +32,5 @@ void f2 (int8_t * restrict in, int8_t * restrict out, int n, int m, unsigned con\n     }\n }\n \n-/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*tu,\\s*mu} 2 { target { no-opts \"-O0\" no-opts \"-Os\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */\n-/* { dg-final { scan-assembler-times {vsetvli} 3 { target { no-opts \"-O0\" no-opts \"-Os\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*tu,\\s*mu} 2 { target { no-opts \"-O0\" no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli} 3 { target { no-opts \"-O0\" no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */"}, {"sha": "136dcb483caec4f595f4b93695e3600fda4ea190", "filename": "gcc/testsuite/gcc.target/riscv/rvv/vsetvl/avl_single-3.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ee85b3255d638fd77ee3fe17a4e146c81545efb/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Favl_single-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ee85b3255d638fd77ee3fe17a4e146c81545efb/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Favl_single-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Favl_single-3.c?ref=6ee85b3255d638fd77ee3fe17a4e146c81545efb", "patch": "@@ -13,7 +13,7 @@ void f (void * restrict in, void * restrict out, int n, size_t vl)\n     }\n }\n \n-/* { dg-final { scan-assembler-times {\\.L[0-9]+\\:\\s+vle8\\.v\\s+v[0-9]+,\\s*0\\s*\\([a-x0-9]+\\)} 1 { target { no-opts \"-O0\" no-opts \"-Os\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */\n+/* { dg-final { scan-assembler-times {\\.L[0-9]+\\:\\s+vle8\\.v\\s+v[0-9]+,\\s*0\\s*\\([a-x0-9]+\\)} 1 { target { no-opts \"-O0\" no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */\n /* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */\n /* { dg-final { scan-assembler-times {slli} 1 { target { no-opts \"-O0\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */\n /* { dg-final { scan-assembler-times {vsetvli} 1 { target { no-opts \"-O0\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */"}, {"sha": "687d84dcf8ca6ab61fe1c24903643676da4d9a64", "filename": "gcc/testsuite/gcc.target/riscv/rvv/vsetvl/avl_single-30.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ee85b3255d638fd77ee3fe17a4e146c81545efb/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Favl_single-30.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ee85b3255d638fd77ee3fe17a4e146c81545efb/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Favl_single-30.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Favl_single-30.c?ref=6ee85b3255d638fd77ee3fe17a4e146c81545efb", "patch": "@@ -25,5 +25,5 @@ void f (int8_t * restrict in, int8_t * restrict out, int n, int m, unsigned cond\n     }\n }\n \n-/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*tu,\\s*mu} 2 { target { no-opts \"-O0\" no-opts \"-Os\" no-opts \"-O1\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*tu,\\s*mu} 2 { target { no-opts \"-O0\" no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-O1\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */\n /* { dg-final { scan-assembler-times {vsetvli} 3 { target { no-opts \"-O0\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */"}, {"sha": "34f1cd43a21421302068db1821d8c8ab7e0eefa7", "filename": "gcc/testsuite/gcc.target/riscv/rvv/vsetvl/avl_single-38.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ee85b3255d638fd77ee3fe17a4e146c81545efb/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Favl_single-38.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ee85b3255d638fd77ee3fe17a4e146c81545efb/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Favl_single-38.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Favl_single-38.c?ref=6ee85b3255d638fd77ee3fe17a4e146c81545efb", "patch": "@@ -51,7 +51,7 @@ void f2 (int8_t * restrict in, int8_t * restrict out, int n, int m, unsigned con\n     }\n }\n \n-/* { dg-final { scan-assembler-times {vsetivli\\s+zero,22,\\s*e32,\\s*mf2,\\s*tu,\\s*mu} 2 { target { no-opts \"-O0\" no-opts \"-O1\" no-opts \"-Os\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */\n-/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*tu,\\s*mu} 2 { target { no-opts \"-O0\" no-opts \"-O1\" no-opts \"-Os\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */\n-/* { dg-final { scan-assembler-times {vsetvli} 4 { target { no-opts \"-O0\" no-opts \"-Os\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */\n-/* { dg-final { scan-assembler-times {vsetivli} 2 { target { no-opts \"-O0\" no-opts \"-Os\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,22,\\s*e32,\\s*mf2,\\s*tu,\\s*mu} 2 { target { no-opts \"-O0\" no-opts \"-O1\" no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*tu,\\s*mu} 2 { target { no-opts \"-O0\" no-opts \"-O1\" no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli} 4 { target { no-opts \"-O0\" no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetivli} 2 { target { no-opts \"-O0\" no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */"}, {"sha": "51c1f8319ec348329db3eec61395cfe8eb66bed9", "filename": "gcc/testsuite/gcc.target/riscv/rvv/vsetvl/avl_single-4.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ee85b3255d638fd77ee3fe17a4e146c81545efb/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Favl_single-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ee85b3255d638fd77ee3fe17a4e146c81545efb/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Favl_single-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Favl_single-4.c?ref=6ee85b3255d638fd77ee3fe17a4e146c81545efb", "patch": "@@ -16,6 +16,6 @@ void f (void * restrict in, void * restrict out, int l, int n, int m, size_t vl)\n   }\n }\n \n-/* { dg-final { scan-assembler-times {\\.L[0-9]+\\:\\s+vle8\\.v\\s+v[0-9]+,\\s*0\\s*\\([a-x0-9]+\\)} 1 { target { no-opts \"-O0\" no-opts \"-Os\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */\n+/* { dg-final { scan-assembler-times {\\.L[0-9]+\\:\\s+vle8\\.v\\s+v[0-9]+,\\s*0\\s*\\([a-x0-9]+\\)} 1 { target { no-opts \"-O0\" no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */\n /* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */\n /* { dg-final { scan-assembler-times {vsetvli} 1 { target { no-opts \"-O0\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */"}, {"sha": "29ce79a4c06dcdb93901439f6788d9ea0af0230d", "filename": "gcc/testsuite/gcc.target/riscv/rvv/vsetvl/avl_single-41.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ee85b3255d638fd77ee3fe17a4e146c81545efb/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Favl_single-41.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ee85b3255d638fd77ee3fe17a4e146c81545efb/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Favl_single-41.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Favl_single-41.c?ref=6ee85b3255d638fd77ee3fe17a4e146c81545efb", "patch": "@@ -15,5 +15,5 @@ void f (int8_t *base, int8_t *out, size_t m, size_t n) {\n   }\n }\n \n-/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*tu,\\s*m[au]} 1 { target { no-opts \"-O0\" no-opts \"-O1\" no-opts \"-Os\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*tu,\\s*m[au]} 1 { target { no-opts \"-O0\" no-opts \"-O1\" no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */\n /* { dg-final { scan-assembler-times {vsetvli} 1 { target { no-opts \"-O0\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */"}, {"sha": "5e66bc4dbb6178ed0d4e2fb7d9984397b31f8da1", "filename": "gcc/testsuite/gcc.target/riscv/rvv/vsetvl/avl_single-42.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ee85b3255d638fd77ee3fe17a4e146c81545efb/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Favl_single-42.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ee85b3255d638fd77ee3fe17a4e146c81545efb/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Favl_single-42.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Favl_single-42.c?ref=6ee85b3255d638fd77ee3fe17a4e146c81545efb", "patch": "@@ -12,4 +12,4 @@ void f (int8_t *base, int8_t *out, size_t m, size_t n) {\n     }\n   }\n }\n-/* { dg-final { scan-assembler {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*tu,\\s*m[au]\\s+\\.L[0-9]+\\:\\s+vle8\\.v\\s+v[0-9]+,\\s*0\\s*\\([a-x0-9]+\\)} { target { no-opts \"-O0\" no-opts \"-O1\" no-opts \"-Os\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */\n+/* { dg-final { scan-assembler {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*tu,\\s*m[au]\\s+\\.L[0-9]+\\:\\s+vle8\\.v\\s+v[0-9]+,\\s*0\\s*\\([a-x0-9]+\\)} { target { no-opts \"-O0\" no-opts \"-O1\" no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */"}, {"sha": "1523d4bd7b61ea74729a3e102492ad13dbdbd613", "filename": "gcc/testsuite/gcc.target/riscv/rvv/vsetvl/avl_single-43.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ee85b3255d638fd77ee3fe17a4e146c81545efb/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Favl_single-43.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ee85b3255d638fd77ee3fe17a4e146c81545efb/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Favl_single-43.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Favl_single-43.c?ref=6ee85b3255d638fd77ee3fe17a4e146c81545efb", "patch": "@@ -11,6 +11,6 @@ void f(int8_t *base, int8_t *out, size_t vl, size_t m) {\n   }\n }\n \n-/* { dg-final { scan-assembler-times {\\.L[0-9]+\\:\\s+vle8\\.v\\s+v[0-9]+,\\s*0\\s*\\([a-x0-9]+\\),v0\\.t} 1 { target { no-opts \"-O0\" no-opts \"-Os\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */\n+/* { dg-final { scan-assembler-times {\\.L[0-9]+\\:\\s+vle8\\.v\\s+v[0-9]+,\\s*0\\s*\\([a-x0-9]+\\),v0\\.t} 1 { target { no-opts \"-O0\" no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */\n /* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*t[au],\\s*mu} 1 { target { no-opts \"-O0\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */\n /* { dg-final { scan-assembler-times {vsetvli} 2 { target { no-opts \"-O0\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */"}, {"sha": "443758d7793cf3c2437bcdd8f151f14afcca7f8c", "filename": "gcc/testsuite/gcc.target/riscv/rvv/vsetvl/avl_single-44.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ee85b3255d638fd77ee3fe17a4e146c81545efb/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Favl_single-44.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ee85b3255d638fd77ee3fe17a4e146c81545efb/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Favl_single-44.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Favl_single-44.c?ref=6ee85b3255d638fd77ee3fe17a4e146c81545efb", "patch": "@@ -15,4 +15,4 @@ void f(int8_t *base, int8_t *out, size_t vl, size_t m) {\n   }\n }\n \n-/* { dg-final { scan-assembler-times {vsetvli} 2 { target { no-opts \"-O0\" no-opts \"-Os\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli} 2 { target { no-opts \"-O0\" no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */"}, {"sha": "0ff82266bea1904cb4ec3ad76cab2b32fc2c4957", "filename": "gcc/testsuite/gcc.target/riscv/rvv/vsetvl/avl_single-45.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ee85b3255d638fd77ee3fe17a4e146c81545efb/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Favl_single-45.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ee85b3255d638fd77ee3fe17a4e146c81545efb/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Favl_single-45.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Favl_single-45.c?ref=6ee85b3255d638fd77ee3fe17a4e146c81545efb", "patch": "@@ -14,6 +14,6 @@ void foo1_7(int8_t *base, int8_t *out, size_t vl, size_t m, size_t n, size_t o,\n   }\n }\n \n-/* { dg-final { scan-assembler-times {\\.L[0-9]+\\:\\s+vle8\\.v\\s+v[0-9]+,\\s*0\\s*\\([a-x0-9]+\\)} 1 { target { no-opts \"-O0\" no-opts \"-Os\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */\n+/* { dg-final { scan-assembler-times {\\.L[0-9]+\\:\\s+vle8\\.v\\s+v[0-9]+,\\s*0\\s*\\([a-x0-9]+\\)} 1 { target { no-opts \"-O0\" no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */\n /* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*tu,\\s*m[au]} 1 { target { no-opts \"-O0\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */\n /* { dg-final { scan-assembler-times {vsetvli} 1 { target { no-opts \"-O0\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */"}, {"sha": "a1f4b70d4b47af490d3584f910c5fdd4b046082d", "filename": "gcc/testsuite/gcc.target/riscv/rvv/vsetvl/avl_single-48.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ee85b3255d638fd77ee3fe17a4e146c81545efb/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Favl_single-48.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ee85b3255d638fd77ee3fe17a4e146c81545efb/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Favl_single-48.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Favl_single-48.c?ref=6ee85b3255d638fd77ee3fe17a4e146c81545efb", "patch": "@@ -28,5 +28,5 @@ void f (int8_t * restrict in, int8_t * restrict out, int n, int n2)\n   }\n }\n \n-/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*tu,\\s*m[au]} 2 { target { no-opts \"-O0\" no-opts \"-Os\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */\n-/* { dg-final { scan-assembler-times {vsetvli} 2 { target { no-opts \"-O0\" no-opts \"-Os\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*tu,\\s*m[au]} 2 { target { no-opts \"-O0\" no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli} 2 { target { no-opts \"-O0\" no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */"}, {"sha": "aa3b93777cfbf97be715892023d04a4e4aa64af0", "filename": "gcc/testsuite/gcc.target/riscv/rvv/vsetvl/avl_single-5.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ee85b3255d638fd77ee3fe17a4e146c81545efb/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Favl_single-5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ee85b3255d638fd77ee3fe17a4e146c81545efb/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Favl_single-5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Favl_single-5.c?ref=6ee85b3255d638fd77ee3fe17a4e146c81545efb", "patch": "@@ -13,6 +13,6 @@ void f (void * restrict in, void * restrict out, int n, int vl)\n     }\n }\n \n-/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]\\s+vle8\\.v\\s+v[0-9]+,\\s*0\\s*\\([a-x0-9]+\\)} 1 { target { no-opts \"-O0\" no-opts \"-Os\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]\\s+vle8\\.v\\s+v[0-9]+,\\s*0\\s*\\([a-x0-9]+\\)} 1 { target { no-opts \"-O0\" no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */\n /* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */\n /* { dg-final { scan-assembler-times {vsetvli} 1 { target { no-opts \"-O0\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */"}, {"sha": "1ee2ce3e71a46b101402d8951cd8872e3d603fb3", "filename": "gcc/testsuite/gcc.target/riscv/rvv/vsetvl/avl_single-50.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ee85b3255d638fd77ee3fe17a4e146c81545efb/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Favl_single-50.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ee85b3255d638fd77ee3fe17a4e146c81545efb/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Favl_single-50.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Favl_single-50.c?ref=6ee85b3255d638fd77ee3fe17a4e146c81545efb", "patch": "@@ -18,6 +18,6 @@ void f(void *base, void *out, void *mask_in, size_t m) {\n     }\n   }\n }\n-/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*tu,\\s*mu} 1 { target { no-opts \"-O0\" no-opts \"-O1\" no-opts \"-Os\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*tu,\\s*mu} 1 { target { no-opts \"-O0\" no-opts \"-O1\" no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */\n /* { dg-final { scan-assembler-times {vsetvli} 2 { target { no-opts \"-O0\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */\n "}, {"sha": "dc0da57e1eb0dbd8aa43e658fa416be94a139242", "filename": "gcc/testsuite/gcc.target/riscv/rvv/vsetvl/avl_single-51.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ee85b3255d638fd77ee3fe17a4e146c81545efb/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Favl_single-51.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ee85b3255d638fd77ee3fe17a4e146c81545efb/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Favl_single-51.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Favl_single-51.c?ref=6ee85b3255d638fd77ee3fe17a4e146c81545efb", "patch": "@@ -21,5 +21,5 @@ void f(void *base, void *out, void *mask_in, size_t m, size_t n) {\n   }\n }\n \n-/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*tu,\\s*mu} 1 { target { no-opts \"-O0\" no-opts \"-O1\" no-opts \"-Os\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*tu,\\s*mu} 1 { target { no-opts \"-O0\" no-opts \"-O1\" no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */\n /* { dg-final { scan-assembler-times {vsetvli} 2 { target { no-opts \"-O0\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */"}, {"sha": "7a8163925f852979273295e98850b97e7188186b", "filename": "gcc/testsuite/gcc.target/riscv/rvv/vsetvl/avl_single-6.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ee85b3255d638fd77ee3fe17a4e146c81545efb/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Favl_single-6.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ee85b3255d638fd77ee3fe17a4e146c81545efb/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Favl_single-6.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Favl_single-6.c?ref=6ee85b3255d638fd77ee3fe17a4e146c81545efb", "patch": "@@ -18,5 +18,5 @@ void f (void * restrict in, void * restrict out, int l, int n, int m, size_t vl)\n }\n \n /* { dg-final { scan-assembler-times {vsetvli} 1 { target { no-opts \"-O0\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */\n-/* { dg-final { scan-assembler-times {add\\s+\\s*[a-x0-9]+,\\s*[a-x0-9]+,\\s*[a-x0-9]+\\s+vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\" no-opts \"-Os\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */\n+/* { dg-final { scan-assembler-times {add\\s+\\s*[a-x0-9]+,\\s*[a-x0-9]+,\\s*[a-x0-9]+\\s+vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\" no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */\n /* { dg-final { scan-assembler-times {add\\s+\\s*[a-x0-9]+,\\s*[a-x0-9]+,\\s*[a-x0-9]+\\s+li\\s+[a-x0-9]+,0\\s+vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\" no-opts \"-O1\" no-opts \"-O2\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */"}, {"sha": "1ccd23462ec067c077ce592280cc7e4f4200c998", "filename": "gcc/testsuite/gcc.target/riscv/rvv/vsetvl/avl_single-65.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ee85b3255d638fd77ee3fe17a4e146c81545efb/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Favl_single-65.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ee85b3255d638fd77ee3fe17a4e146c81545efb/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Favl_single-65.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Favl_single-65.c?ref=6ee85b3255d638fd77ee3fe17a4e146c81545efb", "patch": "@@ -29,5 +29,5 @@ void f (int8_t * restrict in, int8_t * restrict out, int n, int n2)\n   }\n }\n \n-/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*tu,\\s*m[au]} 3 { target { no-opts \"-O0\" no-opts \"-O1\" no-opts \"-Os\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */\n-/* { dg-final { scan-assembler-times {vsetvli} 3 { target { no-opts \"-O0\" no-opts \"-O1\" no-opts \"-Os\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*tu,\\s*m[au]} 3 { target { no-opts \"-O0\" no-opts \"-O1\" no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli} 3 { target { no-opts \"-O0\" no-opts \"-O1\" no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */"}, {"sha": "77b1d2ac1e4db9cf1d3b4d04732882038c6a3d31", "filename": "gcc/testsuite/gcc.target/riscv/rvv/vsetvl/avl_single-66.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ee85b3255d638fd77ee3fe17a4e146c81545efb/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Favl_single-66.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ee85b3255d638fd77ee3fe17a4e146c81545efb/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Favl_single-66.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Favl_single-66.c?ref=6ee85b3255d638fd77ee3fe17a4e146c81545efb", "patch": "@@ -17,5 +17,5 @@ void f2 (void * restrict in, void * restrict out, int l, int n, int m, size_t vl\n   }\n }\n \n-/* { dg-final { scan-assembler-times {add\\s+\\s*[a-x0-9]+,\\s*[a-x0-9]+,\\s*[a-x0-9]+\\s+vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\" no-opts \"-O1\" no-opts \"-Os\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */\n+/* { dg-final { scan-assembler-times {add\\s+\\s*[a-x0-9]+,\\s*[a-x0-9]+,\\s*[a-x0-9]+\\s+vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\" no-opts \"-O1\" no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */\n /* { dg-final { scan-assembler-times {vsetvli} 1 { target { no-opts \"-O0\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */"}, {"sha": "8890c32020ef764d2addc0faf1610be242481236", "filename": "gcc/testsuite/gcc.target/riscv/rvv/vsetvl/avl_single-67.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ee85b3255d638fd77ee3fe17a4e146c81545efb/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Favl_single-67.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ee85b3255d638fd77ee3fe17a4e146c81545efb/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Favl_single-67.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Favl_single-67.c?ref=6ee85b3255d638fd77ee3fe17a4e146c81545efb", "patch": "@@ -21,7 +21,7 @@ void f2 (void * restrict in, void * restrict out, int l, int n, int m)\n   }\n }\n \n-/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]} 3 { target { no-opts \"-O0\" no-opts \"-Os\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */\n-/* { dg-final { scan-assembler-times {vsetvli} 3 { target { no-opts \"-O0\" no-opts \"-Os\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */\n-/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*tu,\\s*m[au]} 1 { target { no-opts \"-O0\" no-opts \"-Os\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */\n-/* { dg-final { scan-assembler-times {addi\\s+[a-x0-9]+,\\s*[a-x0-9]+,\\s*44} 1 { target { no-opts \"-O0\" no-opts \"-Os\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]} 3 { target { no-opts \"-O0\" no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli} 3 { target { no-opts \"-O0\" no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*tu,\\s*m[au]} 1 { target { no-opts \"-O0\" no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */\n+/* { dg-final { scan-assembler-times {addi\\s+[a-x0-9]+,\\s*[a-x0-9]+,\\s*44} 1 { target { no-opts \"-O0\" no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */"}, {"sha": "0a4855a2eea2cd62f6585a2207a72655be8798a5", "filename": "gcc/testsuite/gcc.target/riscv/rvv/vsetvl/avl_single-68.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ee85b3255d638fd77ee3fe17a4e146c81545efb/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Favl_single-68.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ee85b3255d638fd77ee3fe17a4e146c81545efb/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Favl_single-68.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Favl_single-68.c?ref=6ee85b3255d638fd77ee3fe17a4e146c81545efb", "patch": "@@ -21,6 +21,6 @@ void f2 (void * restrict in, void * restrict out, int l, int n, int m)\n   }\n }\n \n-/* { dg-final { scan-assembler-times {vsetvli} 1 { target { no-opts \"-O0\" no-opts \"-Os\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */\n-/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*tu,\\s*m[au]} 1 { target { no-opts \"-O0\" no-opts \"-Os\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */\n-/* { dg-final { scan-assembler-times {addi\\s+[a-x0-9]+,\\s*[a-x0-9]+,\\s*44} 1 { target { no-opts \"-O0\" no-opts \"-Os\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli} 1 { target { no-opts \"-O0\" no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*tu,\\s*m[au]} 1 { target { no-opts \"-O0\" no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */\n+/* { dg-final { scan-assembler-times {addi\\s+[a-x0-9]+,\\s*[a-x0-9]+,\\s*44} 1 { target { no-opts \"-O0\" no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */"}, {"sha": "37707b00488dd82a6d1a39bb49b480a31db61c0f", "filename": "gcc/testsuite/gcc.target/riscv/rvv/vsetvl/avl_single-69.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ee85b3255d638fd77ee3fe17a4e146c81545efb/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Favl_single-69.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ee85b3255d638fd77ee3fe17a4e146c81545efb/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Favl_single-69.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Favl_single-69.c?ref=6ee85b3255d638fd77ee3fe17a4e146c81545efb", "patch": "@@ -36,5 +36,5 @@ void f (int8_t * restrict in, int8_t * restrict out, int l, int n, int m, size_t\n   }\n }\n \n-/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\" no-opts \"-Os\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */\n-/* { dg-final { scan-assembler-times {vsetvli} 1 { target { no-opts \"-O0\" no-opts \"-Os\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\" no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli} 1 { target { no-opts \"-O0\" no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */"}, {"sha": "c066510336ad196d4f93c4af47d5fd7a87175bb8", "filename": "gcc/testsuite/gcc.target/riscv/rvv/vsetvl/avl_single-70.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ee85b3255d638fd77ee3fe17a4e146c81545efb/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Favl_single-70.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ee85b3255d638fd77ee3fe17a4e146c81545efb/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Favl_single-70.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Favl_single-70.c?ref=6ee85b3255d638fd77ee3fe17a4e146c81545efb", "patch": "@@ -42,5 +42,5 @@ void f (int8_t * restrict in, int8_t * restrict out, int l, int n, int m, size_t\n   }\n }\n \n-/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*tu,\\s*m[au]} 2 { target { no-opts \"-O0\" no-opts \"-O1\" no-opts \"-Os\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */\n-/* { dg-final { scan-assembler-times {vsetvli} 2 { target { no-opts \"-O0\" no-opts \"-O1\" no-opts \"-Os\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*tu,\\s*m[au]} 2 { target { no-opts \"-O0\" no-opts \"-O1\" no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli} 2 { target { no-opts \"-O0\" no-opts \"-O1\" no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */"}, {"sha": "8409d06796a516c72fc776166a9deb5b409b9354", "filename": "gcc/testsuite/gcc.target/riscv/rvv/vsetvl/avl_single-71.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ee85b3255d638fd77ee3fe17a4e146c81545efb/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Favl_single-71.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ee85b3255d638fd77ee3fe17a4e146c81545efb/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Favl_single-71.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Favl_single-71.c?ref=6ee85b3255d638fd77ee3fe17a4e146c81545efb", "patch": "@@ -50,5 +50,5 @@ void f (int8_t * restrict in, int8_t * restrict out, int l, int n, int m, size_t\n   }\n }\n \n-/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*tu,\\s*m[au]} 3 { target { no-opts \"-O0\" no-opts \"-O1\" no-opts \"-Os\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */\n-/* { dg-final { scan-assembler-times {vsetvli} 3 { target { no-opts \"-O0\" no-opts \"-O1\" no-opts \"-Os\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*tu,\\s*m[au]} 3 { target { no-opts \"-O0\" no-opts \"-O1\" no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli} 3 { target { no-opts \"-O0\" no-opts \"-O1\" no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */"}, {"sha": "53d4500c8cf733e217b85097ddce4af825859831", "filename": "gcc/testsuite/gcc.target/riscv/rvv/vsetvl/avl_single-73.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ee85b3255d638fd77ee3fe17a4e146c81545efb/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Favl_single-73.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ee85b3255d638fd77ee3fe17a4e146c81545efb/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Favl_single-73.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Favl_single-73.c?ref=6ee85b3255d638fd77ee3fe17a4e146c81545efb", "patch": "@@ -21,5 +21,5 @@ void f (int8_t * restrict in, int8_t * restrict out, int n, int cond, size_t vl,\n     }\n }\n \n-/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]} 2 { target { no-opts \"-O0\" no-opts \"-O1\" no-opts \"-Os\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */\n-/* { dg-final { scan-assembler-times {vsetvli} 2 { target { no-opts \"-O0\" no-opts \"-O1\" no-opts \"-Os\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]} 2 { target { no-opts \"-O0\" no-opts \"-O1\" no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli} 2 { target { no-opts \"-O0\" no-opts \"-O1\" no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */"}, {"sha": "ff540ec792db629b476e8c28d27dbfac4041a802", "filename": "gcc/testsuite/gcc.target/riscv/rvv/vsetvl/avl_single-74.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ee85b3255d638fd77ee3fe17a4e146c81545efb/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Favl_single-74.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ee85b3255d638fd77ee3fe17a4e146c81545efb/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Favl_single-74.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Favl_single-74.c?ref=6ee85b3255d638fd77ee3fe17a4e146c81545efb", "patch": "@@ -23,5 +23,5 @@ void f (int8_t * restrict in, int8_t * restrict out, int n, int cond, size_t vl,\n     }\n }\n \n-/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]} 2 { target { no-opts \"-O0\" no-opts \"-O1\" no-opts \"-Os\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */\n-/* { dg-final { scan-assembler-times {vsetvli} 2 { target { no-opts \"-O0\" no-opts \"-O1\" no-opts \"-Os\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]} 2 { target { no-opts \"-O0\" no-opts \"-O1\" no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli} 2 { target { no-opts \"-O0\" no-opts \"-O1\" no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */"}, {"sha": "c85f186518bb68241d6f68d260e89dd6a2e95d0f", "filename": "gcc/testsuite/gcc.target/riscv/rvv/vsetvl/avl_single-75.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ee85b3255d638fd77ee3fe17a4e146c81545efb/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Favl_single-75.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ee85b3255d638fd77ee3fe17a4e146c81545efb/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Favl_single-75.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Favl_single-75.c?ref=6ee85b3255d638fd77ee3fe17a4e146c81545efb", "patch": "@@ -23,5 +23,5 @@ void f (int8_t * restrict in, int8_t * restrict out, int n, int cond, size_t vl,\n       __riscv_vse8_v_i8mf8 (out + i + 100, v2, vl);\n     }\n }\n-/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]} 2 { target { no-opts \"-O0\" no-opts \"-O1\" no-opts \"-Os\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */\n-/* { dg-final { scan-assembler-times {vsetvli} 2 { target { no-opts \"-O0\" no-opts \"-O1\" no-opts \"-Os\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]} 2 { target { no-opts \"-O0\" no-opts \"-O1\" no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli} 2 { target { no-opts \"-O0\" no-opts \"-O1\" no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */"}, {"sha": "1eb7546166abc526289a2247b3a0496f50f81dab", "filename": "gcc/testsuite/gcc.target/riscv/rvv/vsetvl/avl_single-8.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ee85b3255d638fd77ee3fe17a4e146c81545efb/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Favl_single-8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ee85b3255d638fd77ee3fe17a4e146c81545efb/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Favl_single-8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Favl_single-8.c?ref=6ee85b3255d638fd77ee3fe17a4e146c81545efb", "patch": "@@ -13,6 +13,6 @@ void f (void * restrict in, void * restrict out, int n)\n     }\n }\n \n-/* { dg-final { scan-assembler-times {\\.L[0-9]+\\:\\s+vle8\\.v\\s+v[0-9]+,\\s*0\\s*\\([a-x0-9]+\\)} 1 { target { no-opts \"-O0\" no-opts \"-Os\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */\n+/* { dg-final { scan-assembler-times {\\.L[0-9]+\\:\\s+vle8\\.v\\s+v[0-9]+,\\s*0\\s*\\([a-x0-9]+\\)} 1 { target { no-opts \"-O0\" no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */\n /* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */\n /* { dg-final { scan-assembler-times {vsetvli} 1 { target { no-opts \"-O0\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */"}, {"sha": "3fa7cf3bcbe3a07fa1cab28bf04c343523f574da", "filename": "gcc/testsuite/gcc.target/riscv/rvv/vsetvl/imm_bb_prop-2.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ee85b3255d638fd77ee3fe17a4e146c81545efb/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fimm_bb_prop-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ee85b3255d638fd77ee3fe17a4e146c81545efb/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fimm_bb_prop-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fimm_bb_prop-2.c?ref=6ee85b3255d638fd77ee3fe17a4e146c81545efb", "patch": "@@ -26,4 +26,4 @@ void f (int8_t * restrict in, int8_t * restrict out, int n, int n2)\n }\n \n /* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*9,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */\n-/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*5,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\" no-opts \"-Os\" no-opts \"-O1\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*5,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\" no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-O1\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */"}, {"sha": "dbe6c67ee87b1681e3f6430a93f276a2a4762532", "filename": "gcc/testsuite/gcc.target/riscv/rvv/vsetvl/imm_bb_prop-3.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ee85b3255d638fd77ee3fe17a4e146c81545efb/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fimm_bb_prop-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ee85b3255d638fd77ee3fe17a4e146c81545efb/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fimm_bb_prop-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fimm_bb_prop-3.c?ref=6ee85b3255d638fd77ee3fe17a4e146c81545efb", "patch": "@@ -19,4 +19,4 @@ void f(void *base, void *out, void *mask_in, size_t vl, size_t m) {\n   }\n }\n \n-/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*4,\\s*e8,\\s*mf8,\\s*tu,\\s*mu} 1 { target { no-opts \"-O0\" no-opts \"-O1\" no-opts \"-Os\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*4,\\s*e8,\\s*mf8,\\s*tu,\\s*mu} 1 { target { no-opts \"-O0\" no-opts \"-O1\" no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */"}, {"sha": "4fbeffb8b5433a366ebf395dc067e041442d70dc", "filename": "gcc/testsuite/gcc.target/riscv/rvv/vsetvl/imm_bb_prop-4.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ee85b3255d638fd77ee3fe17a4e146c81545efb/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fimm_bb_prop-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ee85b3255d638fd77ee3fe17a4e146c81545efb/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fimm_bb_prop-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fimm_bb_prop-4.c?ref=6ee85b3255d638fd77ee3fe17a4e146c81545efb", "patch": "@@ -21,5 +21,5 @@ void f(void *base, void *out, void *mask_in, size_t vl, size_t m, size_t n) {\n   }\n }\n \n-/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*4,\\s*e8,\\s*mf8,\\s*tu,\\s*mu} 1 { target { no-opts \"-O0\" no-opts \"-O1\" no-opts \"-Os\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*4,\\s*e8,\\s*mf8,\\s*tu,\\s*mu} 1 { target { no-opts \"-O0\" no-opts \"-O1\" no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */\n "}, {"sha": "0262ff1cb3c930a6bf7d0c0797f922cb62184fdd", "filename": "gcc/testsuite/gcc.target/riscv/rvv/vsetvl/imm_conflict-4.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ee85b3255d638fd77ee3fe17a4e146c81545efb/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fimm_conflict-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ee85b3255d638fd77ee3fe17a4e146c81545efb/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fimm_conflict-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fimm_conflict-4.c?ref=6ee85b3255d638fd77ee3fe17a4e146c81545efb", "patch": "@@ -30,7 +30,7 @@ void f (void * restrict in, void * restrict out, int n, int cond)\n   }\n }\n \n-/* { dg-final { scan-assembler {vsetivli\\s+zero,\\s*5,\\s*e8,\\s*mf8,\\s*tu,\\s*m[au]} { target { no-opts \"-O0\" no-opts \"-O1\" no-opts \"-Os\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */\n-/* { dg-final { scan-assembler {vsetivli\\s+zero,\\s*19,\\s*e32,\\s*m1,\\s*t[au],\\s*m[au]} { target { no-opts \"-O0\" no-opts \"-O1\" no-opts \"-Os\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */\n-/* { dg-final { scan-assembler {vsetivli\\s+zero,\\s*8,\\s*e32,\\s*m1,\\s*t[au],\\s*m[au]} { target { no-opts \"-O0\" no-opts \"-O1\" no-opts \"-Os\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */\n-/* { dg-final { scan-assembler {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]} { target { no-opts \"-O0\" no-opts \"-O1\" no-opts \"-Os\"  no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler {vsetivli\\s+zero,\\s*5,\\s*e8,\\s*mf8,\\s*tu,\\s*m[au]} { target { no-opts \"-O0\" no-opts \"-O1\" no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */\n+/* { dg-final { scan-assembler {vsetivli\\s+zero,\\s*19,\\s*e32,\\s*m1,\\s*t[au],\\s*m[au]} { target { no-opts \"-O0\" no-opts \"-O1\" no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */\n+/* { dg-final { scan-assembler {vsetivli\\s+zero,\\s*8,\\s*e32,\\s*m1,\\s*t[au],\\s*m[au]} { target { no-opts \"-O0\" no-opts \"-O1\" no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */\n+/* { dg-final { scan-assembler {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]} { target { no-opts \"-O0\" no-opts \"-O1\" no-opts \"-Os\" no-opts \"-Oz\"  no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */"}, {"sha": "9b5917e15055649d53ba5abf9bc0c610c82a4a76", "filename": "gcc/testsuite/gcc.target/riscv/rvv/vsetvl/imm_conflict-5.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ee85b3255d638fd77ee3fe17a4e146c81545efb/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fimm_conflict-5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ee85b3255d638fd77ee3fe17a4e146c81545efb/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fimm_conflict-5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fimm_conflict-5.c?ref=6ee85b3255d638fd77ee3fe17a4e146c81545efb", "patch": "@@ -37,7 +37,7 @@ void f (void * restrict in, void * restrict out, int n, int cond)\n   }\n }\n \n-/* { dg-final { scan-assembler {vsetivli\\s+zero,\\s*5,\\s*e8,\\s*mf8,\\s*tu,\\s*m[au]} { target { no-opts \"-O0\" no-opts \"-O1\" no-opts \"-Os\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */\n-/* { dg-final { scan-assembler {vsetivli\\s+zero,\\s*19,\\s*e32,\\s*m1,\\s*t[au],\\s*m[au]} { target { no-opts \"-O0\" no-opts \"-O1\" no-opts \"-Os\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */\n-/* { dg-final { scan-assembler {vsetivli\\s+zero,\\s*8,\\s*e32,\\s*m1,\\s*t[au],\\s*m[au]} { target { no-opts \"-O0\" no-opts \"-O1\" no-opts \"-Os\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */\n-/* { dg-final { scan-assembler {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]} { target { no-opts \"-O0\" no-opts \"-O1\" no-opts \"-Os\"  no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler {vsetivli\\s+zero,\\s*5,\\s*e8,\\s*mf8,\\s*tu,\\s*m[au]} { target { no-opts \"-O0\" no-opts \"-O1\" no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */\n+/* { dg-final { scan-assembler {vsetivli\\s+zero,\\s*19,\\s*e32,\\s*m1,\\s*t[au],\\s*m[au]} { target { no-opts \"-O0\" no-opts \"-O1\" no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */\n+/* { dg-final { scan-assembler {vsetivli\\s+zero,\\s*8,\\s*e32,\\s*m1,\\s*t[au],\\s*m[au]} { target { no-opts \"-O0\" no-opts \"-O1\" no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */\n+/* { dg-final { scan-assembler {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]} { target { no-opts \"-O0\" no-opts \"-O1\" no-opts \"-Os\" no-opts \"-Oz\"  no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */"}, {"sha": "bca708906e02a833a87d305897bd27e52ed96e40", "filename": "gcc/testsuite/gcc.target/riscv/rvv/vsetvl/imm_loop_invariant-12.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ee85b3255d638fd77ee3fe17a4e146c81545efb/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fimm_loop_invariant-12.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ee85b3255d638fd77ee3fe17a4e146c81545efb/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fimm_loop_invariant-12.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fimm_loop_invariant-12.c?ref=6ee85b3255d638fd77ee3fe17a4e146c81545efb", "patch": "@@ -23,6 +23,6 @@ void f (void * restrict in, void * restrict out, int n)\n     }\n }\n \n-/* { dg-final { scan-assembler-times {\\.L[0-9]+\\:\\s+vle8\\.v\\s+v[0-9]+,\\s*0\\s*\\([a-x0-9]+\\)} 1 { target { no-opts \"-O0\" no-opts \"-Os\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */\n+/* { dg-final { scan-assembler-times {\\.L[0-9]+\\:\\s+vle8\\.v\\s+v[0-9]+,\\s*0\\s*\\([a-x0-9]+\\)} 1 { target { no-opts \"-O0\" no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */\n /* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*4,\\s*e8,\\s*mf8,\\s*tu,\\s*m[au]} 1 { target { no-opts \"-O0\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */\n /* { dg-final { scan-assembler-times {vsetivli} 1 { target { no-opts \"-O0\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */"}, {"sha": "21cd0298e2432b8079e7c085660c65d45ca8f2c5", "filename": "gcc/testsuite/gcc.target/riscv/rvv/vsetvl/imm_loop_invariant-13.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ee85b3255d638fd77ee3fe17a4e146c81545efb/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fimm_loop_invariant-13.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ee85b3255d638fd77ee3fe17a4e146c81545efb/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fimm_loop_invariant-13.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fimm_loop_invariant-13.c?ref=6ee85b3255d638fd77ee3fe17a4e146c81545efb", "patch": "@@ -24,7 +24,7 @@ void f (void * restrict in, void * restrict out, void * restrict mask_in, int n)\n     }\n }\n \n-/* { dg-final { scan-assembler-times {\\.L[0-9]+\\:\\s+vle16\\.v\\s+v[0-9]+,\\s*0\\s*\\([a-x0-9]+\\),\\s*v0.t} 1 { target { no-opts \"-O0\" no-opts \"-Os\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */\n+/* { dg-final { scan-assembler-times {\\.L[0-9]+\\:\\s+vle16\\.v\\s+v[0-9]+,\\s*0\\s*\\([a-x0-9]+\\),\\s*v0.t} 1 { target { no-opts \"-O0\" no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */\n /* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*4,\\s*e16,\\s*mf4,\\s*tu,\\s*m[au]} 1 { target { no-opts \"-O0\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */\n /* { dg-final { scan-assembler-times {vsetivli} 1 { target { no-opts \"-O0\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */\n /* { dg-final { scan-assembler-times {vsetvli} 1 { target { no-opts \"-O0\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */"}, {"sha": "834328db017e2a4ce2eee27b4764698944074e07", "filename": "gcc/testsuite/gcc.target/riscv/rvv/vsetvl/imm_loop_invariant-14.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ee85b3255d638fd77ee3fe17a4e146c81545efb/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fimm_loop_invariant-14.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ee85b3255d638fd77ee3fe17a4e146c81545efb/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fimm_loop_invariant-14.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fimm_loop_invariant-14.c?ref=6ee85b3255d638fd77ee3fe17a4e146c81545efb", "patch": "@@ -25,7 +25,7 @@ void f (void * restrict in, void * restrict out, void * restrict mask_in, int n)\n     }\n }\n \n-/* { dg-final { scan-assembler-times {\\.L[0-9]+\\:\\s+vle16\\.v\\s+v[0-9]+,\\s*0\\s*\\([a-x0-9]+\\),\\s*v0.t} 1 { target { no-opts \"-O0\" no-opts \"-Os\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */\n+/* { dg-final { scan-assembler-times {\\.L[0-9]+\\:\\s+vle16\\.v\\s+v[0-9]+,\\s*0\\s*\\([a-x0-9]+\\),\\s*v0.t} 1 { target { no-opts \"-O0\" no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */\n /* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*4,\\s*e16,\\s*mf2,\\s*tu,\\s*mu} 1 { target { no-opts \"-O0\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */\n /* { dg-final { scan-assembler-times {vsetivli} 2 { target { no-opts \"-O0\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */\n /* { dg-final { scan-assembler-times {vsetvli} 1 { target { no-opts \"-O0\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */"}, {"sha": "e535f8dab0cad13bdd8e25b373b706facc8ca36e", "filename": "gcc/testsuite/gcc.target/riscv/rvv/vsetvl/imm_loop_invariant-15.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ee85b3255d638fd77ee3fe17a4e146c81545efb/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fimm_loop_invariant-15.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ee85b3255d638fd77ee3fe17a4e146c81545efb/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fimm_loop_invariant-15.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fimm_loop_invariant-15.c?ref=6ee85b3255d638fd77ee3fe17a4e146c81545efb", "patch": "@@ -25,7 +25,7 @@ void f (void * restrict in, void * restrict out, void * restrict mask_in, int n)\n     }\n }\n \n-/* { dg-final { scan-assembler-times {\\.L[0-9]+\\:\\s+vle16\\.v\\s+v[0-9]+,\\s*0\\s*\\([a-x0-9]+\\),\\s*v0.t} 1 { target { no-opts \"-O0\" no-opts \"-Os\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */\n+/* { dg-final { scan-assembler-times {\\.L[0-9]+\\:\\s+vle16\\.v\\s+v[0-9]+,\\s*0\\s*\\([a-x0-9]+\\),\\s*v0.t} 1 { target { no-opts \"-O0\" no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */\n /* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*4,\\s*e16,\\s*mf2,\\s*t[au],\\s*mu} 1 { target { no-opts \"-O0\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */\n /* { dg-final { scan-assembler-times {vsetivli} 2 { target { no-opts \"-O0\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */\n /* { dg-final { scan-assembler-times {vsetvli} 1 { target { no-opts \"-O0\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */"}, {"sha": "b4dee19fd8bca5b8b708190f1c515e4ee03fc9dc", "filename": "gcc/testsuite/gcc.target/riscv/rvv/vsetvl/imm_loop_invariant-16.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ee85b3255d638fd77ee3fe17a4e146c81545efb/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fimm_loop_invariant-16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ee85b3255d638fd77ee3fe17a4e146c81545efb/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fimm_loop_invariant-16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fimm_loop_invariant-16.c?ref=6ee85b3255d638fd77ee3fe17a4e146c81545efb", "patch": "@@ -23,7 +23,7 @@ void f (void * restrict in, void * restrict out, void * restrict mask_in, int n)\n     }\n }\n \n-/* { dg-final { scan-assembler-times {\\.L[0-9]+\\:\\s+vle16\\.v\\s+v[0-9]+,\\s*0\\s*\\([a-x0-9]+\\),\\s*v0.t} 1 { target { no-opts \"-O0\" no-opts \"-Os\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */\n+/* { dg-final { scan-assembler-times {\\.L[0-9]+\\:\\s+vle16\\.v\\s+v[0-9]+,\\s*0\\s*\\([a-x0-9]+\\),\\s*v0.t} 1 { target { no-opts \"-O0\" no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */\n /* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*4,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */\n /* { dg-final { scan-assembler-times {vsetivli} 1 { target { no-opts \"-O0\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */\n /* { dg-final { scan-assembler-times {vsetvli} 1 { target { no-opts \"-O0\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */"}, {"sha": "7adf9aaf9973409dbc6a544eccc90050c9c7097d", "filename": "gcc/testsuite/gcc.target/riscv/rvv/vsetvl/imm_switch-5.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ee85b3255d638fd77ee3fe17a4e146c81545efb/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fimm_switch-5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ee85b3255d638fd77ee3fe17a4e146c81545efb/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fimm_switch-5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fimm_switch-5.c?ref=6ee85b3255d638fd77ee3fe17a4e146c81545efb", "patch": "@@ -25,5 +25,5 @@ void f (void * restrict in, void * restrict out, int n)\n     }\n }\n \n-/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*5,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\" no-opts \"-Os\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */\n-/* { dg-final { scan-assembler-times {\\.L[0-9]+\\:\\s+vsetivli\\s+zero,\\s*7,\\s*e16,\\s*mf4,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\" no-opts \"-Os\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*5,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\" no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */\n+/* { dg-final { scan-assembler-times {\\.L[0-9]+\\:\\s+vsetivli\\s+zero,\\s*7,\\s*e16,\\s*mf4,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\" no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */"}, {"sha": "e4f379d4ff729388292c0ad382e5e2825e379b34", "filename": "gcc/testsuite/gcc.target/riscv/rvv/vsetvl/imm_switch-6.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ee85b3255d638fd77ee3fe17a4e146c81545efb/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fimm_switch-6.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ee85b3255d638fd77ee3fe17a4e146c81545efb/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fimm_switch-6.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fimm_switch-6.c?ref=6ee85b3255d638fd77ee3fe17a4e146c81545efb", "patch": "@@ -25,6 +25,6 @@ void f (void * restrict in, void * restrict out, int n)\n     }\n }\n \n-/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*5,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\" no-opts \"-Os\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */\n-/* { dg-final { scan-assembler-times {\\.L[0-9]+\\:\\s+vsetivli\\s+zero,\\s*5,\\s*e16,\\s*mf4,\\s*t[au],\\s*m[au]\\s+\\.L[0-9]+} 1 { target { no-opts \"-O0\" no-opts \"-Os\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*5,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\" no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */\n+/* { dg-final { scan-assembler-times {\\.L[0-9]+\\:\\s+vsetivli\\s+zero,\\s*5,\\s*e16,\\s*mf4,\\s*t[au],\\s*m[au]\\s+\\.L[0-9]+} 1 { target { no-opts \"-O0\" no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */\n "}, {"sha": "8b67dcc216c49d7a687b330ac54d0093740cbf6e", "filename": "gcc/testsuite/gcc.target/riscv/rvv/vsetvl/imm_switch-7.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ee85b3255d638fd77ee3fe17a4e146c81545efb/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fimm_switch-7.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ee85b3255d638fd77ee3fe17a4e146c81545efb/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fimm_switch-7.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fimm_switch-7.c?ref=6ee85b3255d638fd77ee3fe17a4e146c81545efb", "patch": "@@ -24,6 +24,6 @@ void f (void * restrict in, void * restrict out, int n)\n     }\n }\n \n-/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*5,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\" no-opts \"-Os\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */\n-/* { dg-final { scan-assembler-times {\\.L[0-9]+\\:\\s+vsetivli\\s+zero,\\s*5,\\s*e16,\\s*mf4,\\s*t[au],\\s*m[au]\\s+\\.L[0-9]+} 1 { target { no-opts \"-O0\" no-opts \"-Os\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */\n-/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*8,\\s*e16,\\s*mf2,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\" no-opts \"-Os\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*5,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\" no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */\n+/* { dg-final { scan-assembler-times {\\.L[0-9]+\\:\\s+vsetivli\\s+zero,\\s*5,\\s*e16,\\s*mf4,\\s*t[au],\\s*m[au]\\s+\\.L[0-9]+} 1 { target { no-opts \"-O0\" no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*8,\\s*e16,\\s*mf2,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\" no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */"}, {"sha": "4a1ef3ce5e98a54de08f210c7112af1c62f67627", "filename": "gcc/testsuite/gcc.target/riscv/rvv/vsetvl/imm_switch-8.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ee85b3255d638fd77ee3fe17a4e146c81545efb/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fimm_switch-8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ee85b3255d638fd77ee3fe17a4e146c81545efb/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fimm_switch-8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fimm_switch-8.c?ref=6ee85b3255d638fd77ee3fe17a4e146c81545efb", "patch": "@@ -31,5 +31,5 @@ void f (void * restrict in, void * restrict out, int * restrict out2, int n)\n     }\n }\n \n-/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*5,\\s*e8,\\s*mf8,\\s*tu,\\s*m[au]} 1 { target { no-opts \"-O0\" no-opts \"-O1\" no-opts \"-Os\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */\n-/* { dg-final { scan-assembler-times {vsetivli} 1 { target { no-opts \"-O0\" no-opts \"-O1\" no-opts \"-Os\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*5,\\s*e8,\\s*mf8,\\s*tu,\\s*m[au]} 1 { target { no-opts \"-O0\" no-opts \"-O1\" no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetivli} 1 { target { no-opts \"-O0\" no-opts \"-O1\" no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */"}, {"sha": "3825aea16f1574421876e7fbeaf7012446386cba", "filename": "gcc/testsuite/gcc.target/riscv/rvv/vsetvl/imm_switch-9.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ee85b3255d638fd77ee3fe17a4e146c81545efb/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fimm_switch-9.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ee85b3255d638fd77ee3fe17a4e146c81545efb/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fimm_switch-9.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fimm_switch-9.c?ref=6ee85b3255d638fd77ee3fe17a4e146c81545efb", "patch": "@@ -41,7 +41,7 @@ void f (void * restrict in, void * restrict out, void * restrict mask_in, int n,\n     }\n }\n \n-/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\" no-opts \"-O1\" no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n-/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*5,\\s*e16,\\s*mf4,\\s*tu,\\s*mu} 1 { target { no-opts \"-O0\" no-opts \"-O1\" no-opts \"-Os\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */\n-/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*5,\\s*e32,\\s*mf2,\\s*tu,\\s*m[au]} 1 { target { no-opts \"-O0\" no-opts \"-O1\" no-opts \"-Os\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\" no-opts \"-O1\" no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*5,\\s*e16,\\s*mf4,\\s*tu,\\s*mu} 1 { target { no-opts \"-O0\" no-opts \"-O1\" no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*5,\\s*e32,\\s*mf2,\\s*tu,\\s*m[au]} 1 { target { no-opts \"-O0\" no-opts \"-O1\" no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */\n "}, {"sha": "b0c40e8a0cb22ffb5164424555ee296e305673ca", "filename": "gcc/testsuite/gcc.target/riscv/rvv/vsetvl/vlmax_back_prop-1.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ee85b3255d638fd77ee3fe17a4e146c81545efb/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_back_prop-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ee85b3255d638fd77ee3fe17a4e146c81545efb/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_back_prop-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_back_prop-1.c?ref=6ee85b3255d638fd77ee3fe17a4e146c81545efb", "patch": "@@ -31,6 +31,6 @@ void f (void * restrict in, void * restrict out, int n, int cond)\n   }\n }\n \n-/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n-/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*zero,\\s*e16,\\s*mf4,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n-/* { dg-final { scan-assembler-times {vsetvli} 2 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*zero,\\s*e16,\\s*mf4,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli} 2 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */"}, {"sha": "d1713ba803dd30d8d7731e29c44fac5ba681f10d", "filename": "gcc/testsuite/gcc.target/riscv/rvv/vsetvl/vlmax_back_prop-10.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ee85b3255d638fd77ee3fe17a4e146c81545efb/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_back_prop-10.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ee85b3255d638fd77ee3fe17a4e146c81545efb/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_back_prop-10.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_back_prop-10.c?ref=6ee85b3255d638fd77ee3fe17a4e146c81545efb", "patch": "@@ -54,6 +54,6 @@ void f (int32_t * restrict in, int32_t * restrict out, int n, int cond, int cond\n   }\n }\n \n-/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n-/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*zero,\\s*e16,\\s*mf4,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\" no-opts \"-O1\" no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n-/* { dg-final { scan-assembler-times {vsetvli} 2 { target { no-opts \"-O0\" no-opts \"-O1\" no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*zero,\\s*e16,\\s*mf4,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\" no-opts \"-O1\" no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli} 2 { target { no-opts \"-O0\" no-opts \"-O1\" no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */"}, {"sha": "627debf7d6343a13dba136447e367e68a9dae00b", "filename": "gcc/testsuite/gcc.target/riscv/rvv/vsetvl/vlmax_back_prop-11.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ee85b3255d638fd77ee3fe17a4e146c81545efb/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_back_prop-11.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ee85b3255d638fd77ee3fe17a4e146c81545efb/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_back_prop-11.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_back_prop-11.c?ref=6ee85b3255d638fd77ee3fe17a4e146c81545efb", "patch": "@@ -58,6 +58,6 @@ void f (int32_t * restrict in, int32_t * restrict out, int n, int cond, int cond\n   }\n }\n \n-/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n-/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*zero,\\s*e16,\\s*mf4,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\"  no-opts \"-O1\" no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n-/* { dg-final { scan-assembler-times {vsetvli} 2 { target { no-opts \"-O0\" no-opts \"-O1\" no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*zero,\\s*e16,\\s*mf4,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\"  no-opts \"-O1\" no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli} 2 { target { no-opts \"-O0\" no-opts \"-O1\" no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */"}, {"sha": "192f1f313f79f26f37dddfa95f5a2af76253d45d", "filename": "gcc/testsuite/gcc.target/riscv/rvv/vsetvl/vlmax_back_prop-12.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ee85b3255d638fd77ee3fe17a4e146c81545efb/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_back_prop-12.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ee85b3255d638fd77ee3fe17a4e146c81545efb/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_back_prop-12.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_back_prop-12.c?ref=6ee85b3255d638fd77ee3fe17a4e146c81545efb", "patch": "@@ -58,7 +58,7 @@ void f (int32_t * restrict in, int32_t * restrict out, int n, int cond, int cond\n   }\n }\n \n-/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e16,\\s*mf4,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" no-opts \"-flto\" } } } } */\n-/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf2,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\" no-opts \"-O1\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" no-opts \"-flto\" } } } } */\n-/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\" no-opts \"-O1\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" no-opts \"-flto\" } } } } */\n-/* { dg-final { scan-assembler-times {vsetvli} 3 { target { no-opts \"-O0\" no-opts \"-O1\" no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" no-opts \"-flto\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e16,\\s*mf4,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-funroll-loops\" no-opts \"-g\" no-opts \"-flto\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf2,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\" no-opts \"-O1\"  no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-funroll-loops\" no-opts \"-g\" no-opts \"-flto\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\" no-opts \"-O1\"  no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-funroll-loops\" no-opts \"-g\" no-opts \"-flto\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli} 3 { target { no-opts \"-O0\" no-opts \"-O1\" no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-funroll-loops\" no-opts \"-g\" no-opts \"-flto\" } } } } */"}, {"sha": "50c4fbd2a9afabbb0992bea9df1f03ea2987b284", "filename": "gcc/testsuite/gcc.target/riscv/rvv/vsetvl/vlmax_back_prop-13.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ee85b3255d638fd77ee3fe17a4e146c81545efb/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_back_prop-13.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ee85b3255d638fd77ee3fe17a4e146c81545efb/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_back_prop-13.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_back_prop-13.c?ref=6ee85b3255d638fd77ee3fe17a4e146c81545efb", "patch": "@@ -58,7 +58,7 @@ void f (int32_t * restrict in, int32_t * restrict out, int n, int cond, int cond\n   }\n }\n \n-/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf2,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\" no-opts \"-O1\" no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" no-opts \"-flto\" } } } } */\n-/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e16,\\s*m1,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\" no-opts \"-O1\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" no-opts \"-flto\" } } } } */\n-/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\" no-opts \"-O1\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" no-opts \"-flto\" } } } } */\n-/* { dg-final { scan-assembler-times {vsetvli} 3 { target { no-opts \"-O0\" no-opts \"-O1\" no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" no-opts \"-flto\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf2,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\" no-opts \"-O1\" no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-funroll-loops\" no-opts \"-g\" no-opts \"-flto\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e16,\\s*m1,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\" no-opts \"-O1\"  no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-funroll-loops\" no-opts \"-g\" no-opts \"-flto\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\" no-opts \"-O1\"  no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-funroll-loops\" no-opts \"-g\" no-opts \"-flto\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli} 3 { target { no-opts \"-O0\" no-opts \"-O1\" no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-funroll-loops\" no-opts \"-g\" no-opts \"-flto\" } } } } */"}, {"sha": "efb45ff7105e679b9857f76c2e5409ba333a4779", "filename": "gcc/testsuite/gcc.target/riscv/rvv/vsetvl/vlmax_back_prop-14.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ee85b3255d638fd77ee3fe17a4e146c81545efb/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_back_prop-14.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ee85b3255d638fd77ee3fe17a4e146c81545efb/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_back_prop-14.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_back_prop-14.c?ref=6ee85b3255d638fd77ee3fe17a4e146c81545efb", "patch": "@@ -53,6 +53,6 @@ void f (int32_t * restrict in, int32_t * restrict out, int n, int cond)\n     *(vint16mf4_t*)(out + i + 700) = v;\n   }\n }\n-/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\" no-opts \"-O1\" no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n-/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*zero,\\s*e16,\\s*mf4,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\" no-opts \"-O1\" no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n-/* { dg-final { scan-assembler-times {vsetvli} 2 { target { no-opts \"-O0\"  no-opts \"-O1\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\" no-opts \"-O1\" no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*zero,\\s*e16,\\s*mf4,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\" no-opts \"-O1\" no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli} 2 { target { no-opts \"-O0\"  no-opts \"-O1\"  no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */"}, {"sha": "d0d9ec9fdf153e8ee450bb0c0ce8540b581fe273", "filename": "gcc/testsuite/gcc.target/riscv/rvv/vsetvl/vlmax_back_prop-15.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ee85b3255d638fd77ee3fe17a4e146c81545efb/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_back_prop-15.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ee85b3255d638fd77ee3fe17a4e146c81545efb/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_back_prop-15.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_back_prop-15.c?ref=6ee85b3255d638fd77ee3fe17a4e146c81545efb", "patch": "@@ -138,6 +138,6 @@ void f (int32_t * restrict in, int32_t * restrict out, int n, int cond)\n     *(vint16mf4_t*)(out + i + 700) = v;\n   }\n }\n-/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\"  no-opts \"-O1\" no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n-/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*zero,\\s*e16,\\s*mf4,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\"  no-opts \"-O1\" no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n-/* { dg-final { scan-assembler-times {vsetvli} 2 { target { no-opts \"-O0\"  no-opts \"-O1\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\"  no-opts \"-O1\" no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*zero,\\s*e16,\\s*mf4,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\"  no-opts \"-O1\" no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli} 2 { target { no-opts \"-O0\"  no-opts \"-O1\"  no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */"}, {"sha": "b0e23b9a4c3d83667e451b8297db47e2cf457eeb", "filename": "gcc/testsuite/gcc.target/riscv/rvv/vsetvl/vlmax_back_prop-16.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ee85b3255d638fd77ee3fe17a4e146c81545efb/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_back_prop-16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ee85b3255d638fd77ee3fe17a4e146c81545efb/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_back_prop-16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_back_prop-16.c?ref=6ee85b3255d638fd77ee3fe17a4e146c81545efb", "patch": "@@ -50,5 +50,5 @@ void f (int32_t * restrict in, int32_t * restrict out, int n, int cond)\n   }\n }\n \n-/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*zero,\\s*e16,\\s*mf4,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\"  no-opts \"-O1\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" no-opts \"-flto\" } } } } */\n-/* { dg-final { scan-assembler-times {vsetvli} 3 { target { no-opts \"-O0\"  no-opts \"-O1\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*zero,\\s*e16,\\s*mf4,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\"  no-opts \"-O1\"  no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-funroll-loops\" no-opts \"-g\" no-opts \"-flto\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli} 3 { target { no-opts \"-O0\"  no-opts \"-O1\"  no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */"}, {"sha": "52f61b2afa43146c66095f239e04ed1450d3b1fd", "filename": "gcc/testsuite/gcc.target/riscv/rvv/vsetvl/vlmax_back_prop-17.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ee85b3255d638fd77ee3fe17a4e146c81545efb/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_back_prop-17.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ee85b3255d638fd77ee3fe17a4e146c81545efb/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_back_prop-17.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_back_prop-17.c?ref=6ee85b3255d638fd77ee3fe17a4e146c81545efb", "patch": "@@ -54,6 +54,6 @@ void f (int32_t * restrict in, int32_t * restrict out, int n, int cond)\n   }\n }\n \n-/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\" no-opts \"-O1\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n-/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*zero,\\s*e16,\\s*mf4,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\" no-opts \"-O1\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n-/* { dg-final { scan-assembler-times {vsetvli} 2 { target { no-opts \"-O0\"  no-opts \"-O1\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\" no-opts \"-O1\"  no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*zero,\\s*e16,\\s*mf4,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\" no-opts \"-O1\"  no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli} 2 { target { no-opts \"-O0\"  no-opts \"-O1\"  no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */"}, {"sha": "82d06f9e07a07159d4687bab3078539ff7868aa5", "filename": "gcc/testsuite/gcc.target/riscv/rvv/vsetvl/vlmax_back_prop-18.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ee85b3255d638fd77ee3fe17a4e146c81545efb/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_back_prop-18.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ee85b3255d638fd77ee3fe17a4e146c81545efb/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_back_prop-18.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_back_prop-18.c?ref=6ee85b3255d638fd77ee3fe17a4e146c81545efb", "patch": "@@ -52,7 +52,7 @@ void f (int32_t * restrict in, int32_t * restrict out, int n, int cond)\n   }\n }\n \n-/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\" no-opts \"-O1\" no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n-/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\" no-opts \"-O1\" no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n-/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*zero,\\s*e16,\\s*mf4,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\" no-opts \"-O1\" no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n-/* { dg-final { scan-assembler-times {vsetvli} 3 { target { no-opts \"-O0\"  no-opts \"-O1\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\" no-opts \"-O1\" no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\" no-opts \"-O1\" no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*zero,\\s*e16,\\s*mf4,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\" no-opts \"-O1\" no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli} 3 { target { no-opts \"-O0\"  no-opts \"-O1\"  no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */"}, {"sha": "604597d6b226f9988e19526cf0b3389d19f15664", "filename": "gcc/testsuite/gcc.target/riscv/rvv/vsetvl/vlmax_back_prop-19.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ee85b3255d638fd77ee3fe17a4e146c81545efb/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_back_prop-19.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ee85b3255d638fd77ee3fe17a4e146c81545efb/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_back_prop-19.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_back_prop-19.c?ref=6ee85b3255d638fd77ee3fe17a4e146c81545efb", "patch": "@@ -43,6 +43,6 @@ void f (int32_t * restrict in, int32_t * restrict out, int n, int cond)\n   }\n }\n \n-/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*zero,\\s*e16,\\s*mf4,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n-/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]} 2 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n-/* { dg-final { scan-assembler-times {vsetvli} 3 { target { no-opts \"-O0\"  no-opts \"-O1\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*zero,\\s*e16,\\s*mf4,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]} 2 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli} 3 { target { no-opts \"-O0\"  no-opts \"-O1\"  no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */"}, {"sha": "a09f50439249bf4c4f407d9d6dd02a570ee6fa62", "filename": "gcc/testsuite/gcc.target/riscv/rvv/vsetvl/vlmax_back_prop-2.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ee85b3255d638fd77ee3fe17a4e146c81545efb/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_back_prop-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ee85b3255d638fd77ee3fe17a4e146c81545efb/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_back_prop-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_back_prop-2.c?ref=6ee85b3255d638fd77ee3fe17a4e146c81545efb", "patch": "@@ -45,6 +45,6 @@ void f (int32_t * restrict in, int32_t * restrict out, int n, int cond)\n     *(vint16mf4_t*)(out + i + 700) = v;\n   }\n }\n-/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n-/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*zero,\\s*e16,\\s*mf4,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n-/* { dg-final { scan-assembler-times {vsetvli} 2 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*zero,\\s*e16,\\s*mf4,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli} 2 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */"}, {"sha": "52f61b2afa43146c66095f239e04ed1450d3b1fd", "filename": "gcc/testsuite/gcc.target/riscv/rvv/vsetvl/vlmax_back_prop-20.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ee85b3255d638fd77ee3fe17a4e146c81545efb/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_back_prop-20.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ee85b3255d638fd77ee3fe17a4e146c81545efb/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_back_prop-20.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_back_prop-20.c?ref=6ee85b3255d638fd77ee3fe17a4e146c81545efb", "patch": "@@ -54,6 +54,6 @@ void f (int32_t * restrict in, int32_t * restrict out, int n, int cond)\n   }\n }\n \n-/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\" no-opts \"-O1\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n-/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*zero,\\s*e16,\\s*mf4,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\" no-opts \"-O1\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n-/* { dg-final { scan-assembler-times {vsetvli} 2 { target { no-opts \"-O0\"  no-opts \"-O1\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\" no-opts \"-O1\"  no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*zero,\\s*e16,\\s*mf4,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\" no-opts \"-O1\"  no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli} 2 { target { no-opts \"-O0\"  no-opts \"-O1\"  no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */"}, {"sha": "9018deb917cbad19e61a4c218de2d10a9dae4ccb", "filename": "gcc/testsuite/gcc.target/riscv/rvv/vsetvl/vlmax_back_prop-21.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ee85b3255d638fd77ee3fe17a4e146c81545efb/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_back_prop-21.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ee85b3255d638fd77ee3fe17a4e146c81545efb/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_back_prop-21.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_back_prop-21.c?ref=6ee85b3255d638fd77ee3fe17a4e146c81545efb", "patch": "@@ -45,6 +45,6 @@ void f (int32_t * restrict in, int32_t * restrict out, int n, int cond)\n   }\n }\n \n-/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\" no-opts \"-O1\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n-/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*zero,\\s*e16,\\s*mf4,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\" no-opts \"-O1\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n-/* { dg-final { scan-assembler-times {vsetvli} 2 { target { no-opts \"-O0\"  no-opts \"-O1\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\" no-opts \"-O1\"  no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*zero,\\s*e16,\\s*mf4,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\" no-opts \"-O1\"  no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli} 2 { target { no-opts \"-O0\"  no-opts \"-O1\"  no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */"}, {"sha": "6b773e0946ec42505db32a357b9b92a914a8aa8f", "filename": "gcc/testsuite/gcc.target/riscv/rvv/vsetvl/vlmax_back_prop-22.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ee85b3255d638fd77ee3fe17a4e146c81545efb/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_back_prop-22.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ee85b3255d638fd77ee3fe17a4e146c81545efb/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_back_prop-22.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_back_prop-22.c?ref=6ee85b3255d638fd77ee3fe17a4e146c81545efb", "patch": "@@ -52,7 +52,7 @@ void f (int32_t * restrict in, int32_t * restrict out, int n, int cond)\n   }\n }\n \n-/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\" no-opts \"-O1\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n-/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*zero,\\s*e16,\\s*mf4,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\" no-opts \"-O1\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n-/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\" no-opts \"-O1\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n-/* { dg-final { scan-assembler-times {vsetvli} 3 { target { no-opts \"-O0\"  no-opts \"-O1\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\" no-opts \"-O1\"  no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*zero,\\s*e16,\\s*mf4,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\" no-opts \"-O1\"  no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\" no-opts \"-O1\"  no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli} 3 { target { no-opts \"-O0\"  no-opts \"-O1\"  no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */"}, {"sha": "91e75b068c4707e8718432ed0da0b73e40ec6d77", "filename": "gcc/testsuite/gcc.target/riscv/rvv/vsetvl/vlmax_back_prop-23.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ee85b3255d638fd77ee3fe17a4e146c81545efb/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_back_prop-23.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ee85b3255d638fd77ee3fe17a4e146c81545efb/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_back_prop-23.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_back_prop-23.c?ref=6ee85b3255d638fd77ee3fe17a4e146c81545efb", "patch": "@@ -35,7 +35,7 @@ void f (int32_t * restrict in, int32_t * restrict out, int n, int cond)\n   }\n }\n \n-/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\" no-opts \"-O1\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n-/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\" no-opts \"-O1\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n-/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*zero,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\" no-opts \"-O1\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n-/* { dg-final { scan-assembler-times {vsetvli} 4 { target { no-opts \"-O0\"  no-opts \"-O1\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\" no-opts \"-O1\"  no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\" no-opts \"-O1\"  no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*zero,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\" no-opts \"-O1\"  no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli} 4 { target { no-opts \"-O0\"  no-opts \"-O1\"  no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */"}, {"sha": "bc98e5f8269f08756bc9dab51bd6b532129ca6a4", "filename": "gcc/testsuite/gcc.target/riscv/rvv/vsetvl/vlmax_back_prop-24.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ee85b3255d638fd77ee3fe17a4e146c81545efb/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_back_prop-24.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ee85b3255d638fd77ee3fe17a4e146c81545efb/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_back_prop-24.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_back_prop-24.c?ref=6ee85b3255d638fd77ee3fe17a4e146c81545efb", "patch": "@@ -35,7 +35,7 @@ void f (int32_t * restrict in, int32_t * restrict out, int n, int cond)\n   }\n }\n \n-/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\" no-opts \"-O1\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n-/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\" no-opts \"-O1\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n-/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*zero,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\" no-opts \"-O1\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n-/* { dg-final { scan-assembler-times {vsetvli} 3 { target { no-opts \"-O0\"  no-opts \"-O1\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\" no-opts \"-O1\"  no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\" no-opts \"-O1\"  no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*zero,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\" no-opts \"-O1\"  no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli} 3 { target { no-opts \"-O0\"  no-opts \"-O1\"  no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */"}, {"sha": "0a10827daf515b844bb254f121268b10081af1f0", "filename": "gcc/testsuite/gcc.target/riscv/rvv/vsetvl/vlmax_back_prop-25.c", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ee85b3255d638fd77ee3fe17a4e146c81545efb/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_back_prop-25.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ee85b3255d638fd77ee3fe17a4e146c81545efb/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_back_prop-25.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_back_prop-25.c?ref=6ee85b3255d638fd77ee3fe17a4e146c81545efb", "patch": "@@ -88,9 +88,9 @@ void f (void * restrict in, void * restrict out, int n, int cond)\n   }\n }\n \n-/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*zero,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]} 4 { target { no-opts \"-O0\" no-opts \"-O1\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n-/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*zero,\\s*e16,\\s*mf4,\\s*t[au],\\s*m[au]} 2 { target { no-opts \"-O0\" no-opts \"-O1\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n-/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*zero,\\s*e64,\\s*m1,\\s*t[au],\\s*m[au]} 2 { target { no-opts \"-O0\" no-opts \"-O1\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n-/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]} 10 { target { no-opts \"-O0\" no-opts \"-O1\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n-/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*zero,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]} 2 { target { no-opts \"-O0\" no-opts \"-O1\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n-/* { dg-final { scan-assembler-times {vsetvli} 20 { target { no-opts \"-O0\"  no-opts \"-O1\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*zero,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]} 4 { target { no-opts \"-O0\" no-opts \"-O1\"  no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*zero,\\s*e16,\\s*mf4,\\s*t[au],\\s*m[au]} 2 { target { no-opts \"-O0\" no-opts \"-O1\"  no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*zero,\\s*e64,\\s*m1,\\s*t[au],\\s*m[au]} 2 { target { no-opts \"-O0\" no-opts \"-O1\"  no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]} 10 { target { no-opts \"-O0\" no-opts \"-O1\"  no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*zero,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]} 2 { target { no-opts \"-O0\" no-opts \"-O1\"  no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli} 20 { target { no-opts \"-O0\"  no-opts \"-O1\"  no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */"}, {"sha": "a654075139864300db3246139114196d7f32256f", "filename": "gcc/testsuite/gcc.target/riscv/rvv/vsetvl/vlmax_back_prop-26.c", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ee85b3255d638fd77ee3fe17a4e146c81545efb/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_back_prop-26.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ee85b3255d638fd77ee3fe17a4e146c81545efb/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_back_prop-26.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_back_prop-26.c?ref=6ee85b3255d638fd77ee3fe17a4e146c81545efb", "patch": "@@ -80,10 +80,10 @@ void f (void * restrict in, void * restrict out, int n, int cond)\n   }\n }\n \n-/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*zero,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]} 3 { target { no-opts \"-O0\" no-opts \"-O1\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n-/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*zero,\\s*e16,\\s*mf4,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\" no-opts \"-O1\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n-/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*zero,\\s*e64,\\s*m1,\\s*t[au],\\s*m[au]} 2 { target { no-opts \"-O0\" no-opts \"-O1\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n-/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*zero,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]} 2 { target { no-opts \"-O0\" no-opts \"-O1\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n-/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e16,\\s*mf4,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\" no-opts \"-O1\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n-/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]} 8 { target { no-opts \"-O0\" no-opts \"-O1\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n-/* { dg-final { scan-assembler-times {vsetvli} 17 { target { no-opts \"-O0\"  no-opts \"-O1\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*zero,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]} 3 { target { no-opts \"-O0\" no-opts \"-O1\"  no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*zero,\\s*e16,\\s*mf4,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\" no-opts \"-O1\"  no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*zero,\\s*e64,\\s*m1,\\s*t[au],\\s*m[au]} 2 { target { no-opts \"-O0\" no-opts \"-O1\"  no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*zero,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]} 2 { target { no-opts \"-O0\" no-opts \"-O1\"  no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e16,\\s*mf4,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\" no-opts \"-O1\"  no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]} 8 { target { no-opts \"-O0\" no-opts \"-O1\"  no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli} 17 { target { no-opts \"-O0\"  no-opts \"-O1\"  no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */"}, {"sha": "f2391145cfcdb2fbce9df628cd4eb9a5724384bc", "filename": "gcc/testsuite/gcc.target/riscv/rvv/vsetvl/vlmax_back_prop-27.c", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ee85b3255d638fd77ee3fe17a4e146c81545efb/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_back_prop-27.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ee85b3255d638fd77ee3fe17a4e146c81545efb/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_back_prop-27.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_back_prop-27.c?ref=6ee85b3255d638fd77ee3fe17a4e146c81545efb", "patch": "@@ -38,14 +38,14 @@ void f (void * restrict in, void * restrict out, void * restrict in2, void * res\n   }\n }\n \n-/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]} 2 { target { no-opts \"-O0\" no-opts \"-O1\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n-/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf4,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\" no-opts \"-O1\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n-/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf2,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\" no-opts \"-O1\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n-/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*m8,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\" no-opts \"-O1\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n-/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*m4,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\" no-opts \"-O1\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n-/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*m2,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\" no-opts \"-O1\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n-/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*m1,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\" no-opts \"-O1\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]} 2 { target { no-opts \"-O0\" no-opts \"-O1\"  no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf4,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\" no-opts \"-O1\"  no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf2,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\" no-opts \"-O1\"  no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*m8,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\" no-opts \"-O1\"  no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*m4,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\" no-opts \"-O1\"  no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*m2,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\" no-opts \"-O1\"  no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*m1,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\" no-opts \"-O1\"  no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n \n-/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*zero,\\s*e16,\\s*mf4,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\" no-opts \"-O1\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n-/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\" no-opts \"-O1\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n-/* { dg-final { scan-assembler-times {vsetvli} 10 { target { no-opts \"-O0\"  no-opts \"-O1\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*zero,\\s*e16,\\s*mf4,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\" no-opts \"-O1\"  no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\" no-opts \"-O1\"  no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli} 10 { target { no-opts \"-O0\"  no-opts \"-O1\"  no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */"}, {"sha": "464457c6284ae85fef09362735e02852e37b439c", "filename": "gcc/testsuite/gcc.target/riscv/rvv/vsetvl/vlmax_back_prop-28.c", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ee85b3255d638fd77ee3fe17a4e146c81545efb/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_back_prop-28.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ee85b3255d638fd77ee3fe17a4e146c81545efb/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_back_prop-28.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_back_prop-28.c?ref=6ee85b3255d638fd77ee3fe17a4e146c81545efb", "patch": "@@ -40,15 +40,15 @@ void f (void * restrict in, void * restrict out, void * restrict in2, void * res\n   }\n }\n \n-/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]} 2 { target { no-opts \"-O0\" no-opts \"-O1\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n-/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf4,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\" no-opts \"-O1\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n-/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf2,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\" no-opts \"-O1\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n-/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*m8,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\" no-opts \"-O1\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n-/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*m4,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\" no-opts \"-O1\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n-/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*m2,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\" no-opts \"-O1\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n-/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*m1,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\" no-opts \"-O1\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]} 2 { target { no-opts \"-O0\" no-opts \"-O1\"  no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf4,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\" no-opts \"-O1\"  no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf2,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\" no-opts \"-O1\"  no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*m8,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\" no-opts \"-O1\"  no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*m4,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\" no-opts \"-O1\"  no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*m2,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\" no-opts \"-O1\"  no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*m1,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\" no-opts \"-O1\"  no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n \n-/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*zero,\\s*e16,\\s*mf4,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\" no-opts \"-O1\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n-/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\" no-opts \"-O1\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n-/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*zero,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\" no-opts \"-O1\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n-/* { dg-final { scan-assembler-times {vsetvli} 11 { target { no-opts \"-O0\"  no-opts \"-O1\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*zero,\\s*e16,\\s*mf4,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\" no-opts \"-O1\"  no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\" no-opts \"-O1\"  no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*zero,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\" no-opts \"-O1\"  no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli} 11 { target { no-opts \"-O0\"  no-opts \"-O1\"  no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */"}, {"sha": "2a20b3281ec3dbec7ea89aee4e37022a02b8a418", "filename": "gcc/testsuite/gcc.target/riscv/rvv/vsetvl/vlmax_back_prop-29.c", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ee85b3255d638fd77ee3fe17a4e146c81545efb/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_back_prop-29.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ee85b3255d638fd77ee3fe17a4e146c81545efb/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_back_prop-29.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_back_prop-29.c?ref=6ee85b3255d638fd77ee3fe17a4e146c81545efb", "patch": "@@ -40,15 +40,15 @@ void f (void * restrict in, void * restrict out, void * restrict in2, void * res\n   }\n }\n \n-/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]} 2 { target { no-opts \"-O0\" no-opts \"-O1\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n-/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf4,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\" no-opts \"-O1\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n-/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf2,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\" no-opts \"-O1\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n-/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*m8,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\" no-opts \"-O1\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n-/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*m4,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\" no-opts \"-O1\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n-/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*m2,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\" no-opts \"-O1\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n-/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*m1,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\" no-opts \"-O1\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]} 2 { target { no-opts \"-O0\" no-opts \"-O1\"  no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf4,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\" no-opts \"-O1\"  no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf2,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\" no-opts \"-O1\"  no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*m8,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\" no-opts \"-O1\"  no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*m4,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\" no-opts \"-O1\"  no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*m2,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\" no-opts \"-O1\"  no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*m1,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\" no-opts \"-O1\"  no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n \n-/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*zero,\\s*e16,\\s*mf4,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\" no-opts \"-O1\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n-/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\" no-opts \"-O1\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n-/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*zero,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\" no-opts \"-O1\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n-/* { dg-final { scan-assembler-times {vsetvli} 11 { target { no-opts \"-O0\"  no-opts \"-O1\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*zero,\\s*e16,\\s*mf4,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\" no-opts \"-O1\"  no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\" no-opts \"-O1\"  no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*zero,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\" no-opts \"-O1\"  no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli} 11 { target { no-opts \"-O0\"  no-opts \"-O1\"  no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */"}, {"sha": "a16c5f506347217c5b5a383b0ae1190864c2eda9", "filename": "gcc/testsuite/gcc.target/riscv/rvv/vsetvl/vlmax_back_prop-3.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ee85b3255d638fd77ee3fe17a4e146c81545efb/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_back_prop-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ee85b3255d638fd77ee3fe17a4e146c81545efb/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_back_prop-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_back_prop-3.c?ref=6ee85b3255d638fd77ee3fe17a4e146c81545efb", "patch": "@@ -41,7 +41,7 @@ void f (int32_t * restrict in, int32_t * restrict out, int n, int cond)\n     *(vint16mf4_t*)(out + i + 700) = v;\n   }\n }\n-/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\" no-opts \"-O1\" no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n-/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*zero,\\s*e16,\\s*mf4,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\"  no-opts \"-O1\" no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n-/* { dg-final { scan-assembler-times {vsetvli} 2 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\" no-opts \"-O1\" no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*zero,\\s*e16,\\s*mf4,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\"  no-opts \"-O1\" no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli} 2 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n "}, {"sha": "227ceed0ffb09768113aa4f5cfd5e11a43219dfc", "filename": "gcc/testsuite/gcc.target/riscv/rvv/vsetvl/vlmax_back_prop-30.c", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ee85b3255d638fd77ee3fe17a4e146c81545efb/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_back_prop-30.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ee85b3255d638fd77ee3fe17a4e146c81545efb/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_back_prop-30.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_back_prop-30.c?ref=6ee85b3255d638fd77ee3fe17a4e146c81545efb", "patch": "@@ -32,13 +32,13 @@ void f (void * restrict in, void * restrict out, void * restrict in2, void * res\n     }\n }\n \n-/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]} 2 { target { no-opts \"-O0\" no-opts \"-O1\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n-/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*zero,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\" no-opts \"-O1\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n-/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf4,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\" no-opts \"-O1\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n-/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf2,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\" no-opts \"-O1\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n-/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*m8,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\" no-opts \"-O1\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n-/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*m4,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\" no-opts \"-O1\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n-/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*m2,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\" no-opts \"-O1\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n-/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*m1,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\" no-opts \"-O1\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]} 2 { target { no-opts \"-O0\" no-opts \"-O1\"  no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*zero,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\" no-opts \"-O1\"  no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf4,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\" no-opts \"-O1\"  no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf2,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\" no-opts \"-O1\"  no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*m8,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\" no-opts \"-O1\"  no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*m4,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\" no-opts \"-O1\"  no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*m2,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\" no-opts \"-O1\"  no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*m1,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\" no-opts \"-O1\"  no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n \n-/* { dg-final { scan-assembler-times {vsetvli} 9 { target { no-opts \"-O0\"  no-opts \"-O1\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli} 9 { target { no-opts \"-O0\"  no-opts \"-O1\"  no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */"}, {"sha": "0632eacc999f800df03c88b65b6ed72c2886a826", "filename": "gcc/testsuite/gcc.target/riscv/rvv/vsetvl/vlmax_back_prop-31.c", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ee85b3255d638fd77ee3fe17a4e146c81545efb/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_back_prop-31.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ee85b3255d638fd77ee3fe17a4e146c81545efb/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_back_prop-31.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_back_prop-31.c?ref=6ee85b3255d638fd77ee3fe17a4e146c81545efb", "patch": "@@ -32,15 +32,15 @@ void f (void * restrict in, void * restrict out, void * restrict in2, void * res\n     }\n }\n \n-/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*zero,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\" no-opts \"-O1\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n-/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf4,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\" no-opts \"-O1\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n-/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf2,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\" no-opts \"-O1\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n-/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*m8,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\" no-opts \"-O1\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n-/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*m4,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\" no-opts \"-O1\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n-/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*m2,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\" no-opts \"-O1\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n-/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*m1,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\" no-opts \"-O1\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*zero,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\" no-opts \"-O1\"  no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf4,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\" no-opts \"-O1\"  no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf2,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\" no-opts \"-O1\"  no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*m8,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\" no-opts \"-O1\"  no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*m4,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\" no-opts \"-O1\"  no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*m2,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\" no-opts \"-O1\"  no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*m1,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\" no-opts \"-O1\"  no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n \n-/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\" no-opts \"-O1\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n-/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e16,\\s*mf4,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\" no-opts \"-O1\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\" no-opts \"-O1\"  no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e16,\\s*mf4,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\" no-opts \"-O1\"  no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n \n-/* { dg-final { scan-assembler-times {vsetvli} 9 { target { no-opts \"-O0\"  no-opts \"-O1\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli} 9 { target { no-opts \"-O0\"  no-opts \"-O1\"  no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */"}, {"sha": "dfae53197861ae7ae2382f08757b8e0b0f5ce5a2", "filename": "gcc/testsuite/gcc.target/riscv/rvv/vsetvl/vlmax_back_prop-32.c", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ee85b3255d638fd77ee3fe17a4e146c81545efb/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_back_prop-32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ee85b3255d638fd77ee3fe17a4e146c81545efb/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_back_prop-32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_back_prop-32.c?ref=6ee85b3255d638fd77ee3fe17a4e146c81545efb", "patch": "@@ -32,15 +32,15 @@ void f (void * restrict in, void * restrict out, void * restrict in2, void * res\n     }\n }\n \n-/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf4,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\" no-opts \"-O1\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n-/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf2,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\" no-opts \"-O1\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n-/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*m8,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\" no-opts \"-O1\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n-/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*m4,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\" no-opts \"-O1\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n-/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*m2,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\" no-opts \"-O1\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n-/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*m1,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\" no-opts \"-O1\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf4,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\" no-opts \"-O1\"  no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf2,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\" no-opts \"-O1\"  no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*m8,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\" no-opts \"-O1\"  no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*m4,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\" no-opts \"-O1\"  no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*m2,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\" no-opts \"-O1\"  no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*m1,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\" no-opts \"-O1\"  no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n \n-/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e16,\\s*mf4,\\s*t[au],\\s*m[au]\\s+\\.L[0-9]:+} 1 { target { no-opts \"-O0\" no-opts \"-O1\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n-/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\" no-opts \"-O1\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e16,\\s*mf4,\\s*t[au],\\s*m[au]\\s+\\.L[0-9]:+} 1 { target { no-opts \"-O0\" no-opts \"-O1\"  no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\" no-opts \"-O1\"  no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n \n-/* { dg-final { scan-assembler-times {vsetvli} 8 { target { no-opts \"-O0\"  no-opts \"-O1\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli} 8 { target { no-opts \"-O0\"  no-opts \"-O1\"  no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n "}, {"sha": "aa01648565778fe5e60202b9157bada69deeeeff", "filename": "gcc/testsuite/gcc.target/riscv/rvv/vsetvl/vlmax_back_prop-33.c", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ee85b3255d638fd77ee3fe17a4e146c81545efb/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_back_prop-33.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ee85b3255d638fd77ee3fe17a4e146c81545efb/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_back_prop-33.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_back_prop-33.c?ref=6ee85b3255d638fd77ee3fe17a4e146c81545efb", "patch": "@@ -32,14 +32,14 @@ void f (void * restrict in, void * restrict out, void * restrict in2, void * res\n     }\n }\n \n-/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf4,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\" no-opts \"-O1\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n-/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf2,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\" no-opts \"-O1\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n-/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*m8,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\" no-opts \"-O1\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n-/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*m4,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\" no-opts \"-O1\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n-/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*m2,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\" no-opts \"-O1\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n-/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*m1,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\" no-opts \"-O1\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf4,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\" no-opts \"-O1\"  no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf2,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\" no-opts \"-O1\"  no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*m8,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\" no-opts \"-O1\"  no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*m4,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\" no-opts \"-O1\"  no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*m2,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\" no-opts \"-O1\"  no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*m1,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\" no-opts \"-O1\"  no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n \n-/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e16,\\s*mf4,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\" no-opts \"-O1\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n-/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\" no-opts \"-O1\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e16,\\s*mf4,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\" no-opts \"-O1\"  no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\" no-opts \"-O1\"  no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n \n-/* { dg-final { scan-assembler-times {vsetvli} 8 { target { no-opts \"-O0\"  no-opts \"-O1\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli} 8 { target { no-opts \"-O0\"  no-opts \"-O1\"  no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */"}, {"sha": "6feecdfe959656f3358fc548f0188677151c6949", "filename": "gcc/testsuite/gcc.target/riscv/rvv/vsetvl/vlmax_back_prop-34.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ee85b3255d638fd77ee3fe17a4e146c81545efb/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_back_prop-34.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ee85b3255d638fd77ee3fe17a4e146c81545efb/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_back_prop-34.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_back_prop-34.c?ref=6ee85b3255d638fd77ee3fe17a4e146c81545efb", "patch": "@@ -41,5 +41,5 @@ void f (int32_t * restrict in, int32_t * restrict out, int32_t * restrict in2, i\n     }\n }\n \n-/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\" no-opts \"-O1\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n-/* { dg-final { scan-assembler-times {vsetvli} 1 { target { no-opts \"-O0\"  no-opts \"-O1\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\" no-opts \"-O1\"  no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli} 1 { target { no-opts \"-O0\"  no-opts \"-O1\"  no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */"}, {"sha": "e0b5fbb403c53ec3650b1ad07d57079aa0a97c5c", "filename": "gcc/testsuite/gcc.target/riscv/rvv/vsetvl/vlmax_back_prop-35.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ee85b3255d638fd77ee3fe17a4e146c81545efb/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_back_prop-35.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ee85b3255d638fd77ee3fe17a4e146c81545efb/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_back_prop-35.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_back_prop-35.c?ref=6ee85b3255d638fd77ee3fe17a4e146c81545efb", "patch": "@@ -34,5 +34,5 @@ void f (int32_t * restrict in, int32_t * restrict out, int32_t * restrict in2, i\n     }\n }\n \n-/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\" no-opts \"-O1\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n-/* { dg-final { scan-assembler-times {vsetvli} 1 { target { no-opts \"-O0\"  no-opts \"-O1\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\" no-opts \"-O1\"  no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli} 1 { target { no-opts \"-O0\"  no-opts \"-O1\"  no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */"}, {"sha": "a6009b74101d5d14d4cdc4e950fde6b52a65d801", "filename": "gcc/testsuite/gcc.target/riscv/rvv/vsetvl/vlmax_back_prop-36.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ee85b3255d638fd77ee3fe17a4e146c81545efb/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_back_prop-36.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ee85b3255d638fd77ee3fe17a4e146c81545efb/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_back_prop-36.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_back_prop-36.c?ref=6ee85b3255d638fd77ee3fe17a4e146c81545efb", "patch": "@@ -42,6 +42,6 @@ void f (int32_t * restrict in, int32_t * restrict out, int32_t * restrict in2, i\n     }\n }\n \n-/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]\\s+\\.L[0-9]+:} 1 { target { no-opts \"-O0\" no-opts \"-O1\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n-/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\" no-opts \"-O1\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n-/* { dg-final { scan-assembler-times {vsetvli} 2 { target { no-opts \"-O0\"  no-opts \"-O1\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]\\s+\\.L[0-9]+:} 1 { target { no-opts \"-O0\" no-opts \"-O1\"  no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\" no-opts \"-O1\"  no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli} 2 { target { no-opts \"-O0\"  no-opts \"-O1\"  no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */"}, {"sha": "3625f04b76379aa7617b0ff42012bdc599ba5a56", "filename": "gcc/testsuite/gcc.target/riscv/rvv/vsetvl/vlmax_back_prop-37.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ee85b3255d638fd77ee3fe17a4e146c81545efb/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_back_prop-37.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ee85b3255d638fd77ee3fe17a4e146c81545efb/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_back_prop-37.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_back_prop-37.c?ref=6ee85b3255d638fd77ee3fe17a4e146c81545efb", "patch": "@@ -36,6 +36,6 @@ void f (int32_t * restrict in, int32_t * restrict out, int32_t * restrict in2, i\n     }\n }\n \n-/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\" no-opts \"-O1\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n-/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\" no-opts \"-O1\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n-/* { dg-final { scan-assembler-times {vsetvli} 2 { target { no-opts \"-O0\"  no-opts \"-O1\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\" no-opts \"-O1\"  no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\" no-opts \"-O1\"  no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli} 2 { target { no-opts \"-O0\"  no-opts \"-O1\"  no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */"}, {"sha": "cae22dd5164e28904cf89a2298ca5cd5e72fe96e", "filename": "gcc/testsuite/gcc.target/riscv/rvv/vsetvl/vlmax_back_prop-38.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ee85b3255d638fd77ee3fe17a4e146c81545efb/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_back_prop-38.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ee85b3255d638fd77ee3fe17a4e146c81545efb/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_back_prop-38.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_back_prop-38.c?ref=6ee85b3255d638fd77ee3fe17a4e146c81545efb", "patch": "@@ -67,7 +67,7 @@ void f (int32_t * restrict in, int32_t * restrict out, int32_t * restrict in2, i\n }\n \n \n-/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]} 2 { target { no-opts \"-O0\" no-opts \"-O1\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n-/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e16,\\s*mf4,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\" no-opts \"-O1\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n-/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*zero,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\" no-opts \"-O1\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n-/* { dg-final { scan-assembler-times {vsetvli} 4 { target { no-opts \"-O0\"  no-opts \"-O1\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]} 2 { target { no-opts \"-O0\" no-opts \"-O1\"  no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e16,\\s*mf4,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\" no-opts \"-O1\"  no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*zero,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\" no-opts \"-O1\"  no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli} 4 { target { no-opts \"-O0\"  no-opts \"-O1\"  no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */"}, {"sha": "9fca90c2c8bb05b9ed7701b4196451a6c6decd47", "filename": "gcc/testsuite/gcc.target/riscv/rvv/vsetvl/vlmax_back_prop-39.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ee85b3255d638fd77ee3fe17a4e146c81545efb/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_back_prop-39.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ee85b3255d638fd77ee3fe17a4e146c81545efb/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_back_prop-39.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_back_prop-39.c?ref=6ee85b3255d638fd77ee3fe17a4e146c81545efb", "patch": "@@ -16,5 +16,5 @@ void foo5_3 (int32_t * restrict in, int32_t * restrict out, size_t n, int cond)\n     }\n }\n \n-/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf2,\\s*t[au],\\s*m[au]\\s+j\\s+\\.L[0-9]+} 1 { target { no-opts \"-O0\" no-opts \"-O1\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n-/* { dg-final { scan-assembler-times {vsetvli} 1 { target { no-opts \"-O0\"  no-opts \"-O1\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf2,\\s*t[au],\\s*m[au]\\s+j\\s+\\.L[0-9]+} 1 { target { no-opts \"-O0\" no-opts \"-O1\"  no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli} 1 { target { no-opts \"-O0\"  no-opts \"-O1\"  no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */"}, {"sha": "fd2ba4470e6f4d4f05c3dd04653cf099c3c753ed", "filename": "gcc/testsuite/gcc.target/riscv/rvv/vsetvl/vlmax_back_prop-4.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ee85b3255d638fd77ee3fe17a4e146c81545efb/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_back_prop-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ee85b3255d638fd77ee3fe17a4e146c81545efb/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_back_prop-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_back_prop-4.c?ref=6ee85b3255d638fd77ee3fe17a4e146c81545efb", "patch": "@@ -98,7 +98,7 @@ void f (int32_t * restrict in, int32_t * restrict out, int n, int cond)\n     *(vint16mf4_t*)(out + i + 700) = v;\n   }\n }\n-/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\" no-opts \"-O1\" no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n-/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*zero,\\s*e16,\\s*mf4,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\"  no-opts \"-O1\" no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n-/* { dg-final { scan-assembler-times {vsetvli} 2 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\" no-opts \"-O1\" no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*zero,\\s*e16,\\s*mf4,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\"  no-opts \"-O1\" no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli} 2 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n "}, {"sha": "c3acdea23fb70a86d09e6c547c6ffcedea82e357", "filename": "gcc/testsuite/gcc.target/riscv/rvv/vsetvl/vlmax_back_prop-40.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ee85b3255d638fd77ee3fe17a4e146c81545efb/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_back_prop-40.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ee85b3255d638fd77ee3fe17a4e146c81545efb/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_back_prop-40.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_back_prop-40.c?ref=6ee85b3255d638fd77ee3fe17a4e146c81545efb", "patch": "@@ -18,5 +18,5 @@ void foo5_4 (int32_t * restrict in, int32_t * restrict out, size_t n, size_t m,\n     }\n }\n \n-/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf2,\\s*t[au],\\s*m[au]\\s+\\.L[0-9]+} 1 { target { no-opts \"-O0\" no-opts \"-O1\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n-/* { dg-final { scan-assembler-times {vsetvli} 1 { target { no-opts \"-O0\"  no-opts \"-O1\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf2,\\s*t[au],\\s*m[au]\\s+\\.L[0-9]+} 1 { target { no-opts \"-O0\" no-opts \"-O1\"  no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli} 1 { target { no-opts \"-O0\"  no-opts \"-O1\"  no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */"}, {"sha": "d8a6aa268398518e75485cdb11d12c7beab6b279", "filename": "gcc/testsuite/gcc.target/riscv/rvv/vsetvl/vlmax_back_prop-41.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ee85b3255d638fd77ee3fe17a4e146c81545efb/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_back_prop-41.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ee85b3255d638fd77ee3fe17a4e146c81545efb/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_back_prop-41.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_back_prop-41.c?ref=6ee85b3255d638fd77ee3fe17a4e146c81545efb", "patch": "@@ -22,5 +22,5 @@ void foo5_5 (int32_t * restrict in, int32_t * restrict out, size_t n, size_t m,\n     }\n }\n \n-/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf2,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\" no-opts \"-O1\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n-/* { dg-final { scan-assembler-times {vsetvli} 1 { target { no-opts \"-O0\"  no-opts \"-O1\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf2,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\" no-opts \"-O1\"  no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli} 1 { target { no-opts \"-O0\"  no-opts \"-O1\"  no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */"}, {"sha": "739d4bcfe0cc981505a2c665d370f218ad72e84c", "filename": "gcc/testsuite/gcc.target/riscv/rvv/vsetvl/vlmax_back_prop-42.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ee85b3255d638fd77ee3fe17a4e146c81545efb/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_back_prop-42.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ee85b3255d638fd77ee3fe17a4e146c81545efb/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_back_prop-42.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_back_prop-42.c?ref=6ee85b3255d638fd77ee3fe17a4e146c81545efb", "patch": "@@ -21,6 +21,6 @@ void foo5_6 (int32_t * restrict in, int32_t * restrict out, size_t n, size_t m,\n     }\n }\n \n-/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf2,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\" no-opts \"-O1\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n-/* { dg-final { scan-assembler-times {vsetvli} 1 { target { no-opts \"-O0\"  no-opts \"-O1\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf2,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\" no-opts \"-O1\"  no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli} 1 { target { no-opts \"-O0\"  no-opts \"-O1\"  no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n "}, {"sha": "f8e2c4da433be54cd03c28e8f089ab23c7569f08", "filename": "gcc/testsuite/gcc.target/riscv/rvv/vsetvl/vlmax_back_prop-43.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ee85b3255d638fd77ee3fe17a4e146c81545efb/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_back_prop-43.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ee85b3255d638fd77ee3fe17a4e146c81545efb/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_back_prop-43.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_back_prop-43.c?ref=6ee85b3255d638fd77ee3fe17a4e146c81545efb", "patch": "@@ -23,5 +23,5 @@ void foo5_3 (int32_t * restrict in, int32_t * restrict out, size_t n, int cond)\n     }\n }\n \n-/* { dg-final { scan-assembler-times {vsetvli} 1 { target { no-opts \"-O0\"  no-opts \"-O1\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli} 1 { target { no-opts \"-O0\"  no-opts \"-O1\"  no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n "}, {"sha": "e5239be1e3282988b1a71a853f86b4ddb2e9eb27", "filename": "gcc/testsuite/gcc.target/riscv/rvv/vsetvl/vlmax_back_prop-44.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ee85b3255d638fd77ee3fe17a4e146c81545efb/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_back_prop-44.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ee85b3255d638fd77ee3fe17a4e146c81545efb/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_back_prop-44.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_back_prop-44.c?ref=6ee85b3255d638fd77ee3fe17a4e146c81545efb", "patch": "@@ -25,4 +25,4 @@ void foo5_4 (int32_t * restrict in, int32_t * restrict out, size_t n, size_t m,\n     }\n }\n \n-/* { dg-final { scan-assembler-times {vsetvli} 1 { target { no-opts \"-O0\"  no-opts \"-O1\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli} 1 { target { no-opts \"-O0\"  no-opts \"-O1\"  no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */"}, {"sha": "f6ddacc8f8eaeb707dc33840c39f90e044d23fd0", "filename": "gcc/testsuite/gcc.target/riscv/rvv/vsetvl/vlmax_back_prop-45.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ee85b3255d638fd77ee3fe17a4e146c81545efb/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_back_prop-45.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ee85b3255d638fd77ee3fe17a4e146c81545efb/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_back_prop-45.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_back_prop-45.c?ref=6ee85b3255d638fd77ee3fe17a4e146c81545efb", "patch": "@@ -30,5 +30,5 @@ void foo5_5 (int32_t * restrict in, int32_t * restrict out, size_t n, size_t m,\n     }\n }\n \n-/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]\\s+j\\s+\\.L[0-9]+} 1 { target { no-opts \"-O0\" no-opts \"-O1\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n-/* { dg-final { scan-assembler-times {vsetvli} 1 { target { no-opts \"-O0\"  no-opts \"-O1\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]\\s+j\\s+\\.L[0-9]+} 1 { target { no-opts \"-O0\" no-opts \"-O1\"  no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli} 1 { target { no-opts \"-O0\"  no-opts \"-O1\"  no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */"}, {"sha": "ca64d4953ea6bb9dfb709bd23c3952417c18385c", "filename": "gcc/testsuite/gcc.target/riscv/rvv/vsetvl/vlmax_back_prop-46.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ee85b3255d638fd77ee3fe17a4e146c81545efb/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_back_prop-46.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ee85b3255d638fd77ee3fe17a4e146c81545efb/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_back_prop-46.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_back_prop-46.c?ref=6ee85b3255d638fd77ee3fe17a4e146c81545efb", "patch": "@@ -28,5 +28,5 @@ void foo5_6 (int32_t * restrict in, int32_t * restrict out, size_t n, size_t m,\n     }\n }\n \n-/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\" no-opts \"-O1\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n-/* { dg-final { scan-assembler-times {vsetvli} 1 { target { no-opts \"-O0\"  no-opts \"-O1\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\" no-opts \"-O1\"  no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli} 1 { target { no-opts \"-O0\"  no-opts \"-O1\"  no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */"}, {"sha": "e98596fa01c2a9a9f7a3ab3756914145f06d39a9", "filename": "gcc/testsuite/gcc.target/riscv/rvv/vsetvl/vlmax_back_prop-6.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ee85b3255d638fd77ee3fe17a4e146c81545efb/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_back_prop-6.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ee85b3255d638fd77ee3fe17a4e146c81545efb/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_back_prop-6.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_back_prop-6.c?ref=6ee85b3255d638fd77ee3fe17a4e146c81545efb", "patch": "@@ -150,6 +150,6 @@ void f (int32_t * restrict in, int32_t * restrict out, int n, int cond)\n     *(vint16mf4_t*)(out + i + 700) = v;\n   }\n }\n-/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n-/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*zero,\\s*e16,\\s*mf4,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\" no-opts \"-O1\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n-/* { dg-final { scan-assembler-times {vsetvli} 2 { target { no-opts \"-O0\" no-opts \"-O1\" no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*zero,\\s*e16,\\s*mf4,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\" no-opts \"-O1\"  no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli} 2 { target { no-opts \"-O0\" no-opts \"-O1\" no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */"}, {"sha": "b508abd9076d75f14396527787fedf0adadce1bd", "filename": "gcc/testsuite/gcc.target/riscv/rvv/vsetvl/vlmax_back_prop-7.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ee85b3255d638fd77ee3fe17a4e146c81545efb/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_back_prop-7.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ee85b3255d638fd77ee3fe17a4e146c81545efb/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_back_prop-7.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_back_prop-7.c?ref=6ee85b3255d638fd77ee3fe17a4e146c81545efb", "patch": "@@ -38,6 +38,6 @@ void f (int32_t * restrict in, int32_t * restrict out, int n, int cond)\n   }\n }\n \n-/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n-/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*zero,\\s*e16,\\s*mf4,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\" no-opts \"-O1\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n-/* { dg-final { scan-assembler-times {vsetvli} 2 { target { no-opts \"-O0\" no-opts \"-O1\" no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*zero,\\s*e16,\\s*mf4,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\" no-opts \"-O1\"  no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli} 2 { target { no-opts \"-O0\" no-opts \"-O1\" no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */"}, {"sha": "dd4797bd65334a725132285060103411d66280e9", "filename": "gcc/testsuite/gcc.target/riscv/rvv/vsetvl/vlmax_back_prop-8.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ee85b3255d638fd77ee3fe17a4e146c81545efb/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_back_prop-8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ee85b3255d638fd77ee3fe17a4e146c81545efb/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_back_prop-8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_back_prop-8.c?ref=6ee85b3255d638fd77ee3fe17a4e146c81545efb", "patch": "@@ -144,6 +144,6 @@ void f (int32_t * restrict in, int32_t * restrict out, int n, int cond)\n     *(vint16mf4_t*)(out + i + 700) = v;\n   }\n }\n-/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\"  no-opts \"-O1\" no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n-/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*zero,\\s*e16,\\s*mf4,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\" no-opts \"-O1\" no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n-/* { dg-final { scan-assembler-times {vsetvli} 2 { target { no-opts \"-O0\" no-opts \"-O1\" no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\"  no-opts \"-O1\" no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*zero,\\s*e16,\\s*mf4,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\" no-opts \"-O1\" no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli} 2 { target { no-opts \"-O0\" no-opts \"-O1\" no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */"}, {"sha": "4f31d1420898c82895a506e90e3d7d377ce59895", "filename": "gcc/testsuite/gcc.target/riscv/rvv/vsetvl/vlmax_back_prop-9.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ee85b3255d638fd77ee3fe17a4e146c81545efb/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_back_prop-9.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ee85b3255d638fd77ee3fe17a4e146c81545efb/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_back_prop-9.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_back_prop-9.c?ref=6ee85b3255d638fd77ee3fe17a4e146c81545efb", "patch": "@@ -38,7 +38,7 @@ void f (int32_t * restrict in, int32_t * restrict out, int n, int cond)\n   }\n }\n \n-/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n-/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*zero,\\s*e16,\\s*mf4,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\" no-opts \"-O1\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n-/* { dg-final { scan-assembler-times {vsetvli} 2 { target { no-opts \"-O0\" no-opts \"-O1\" no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*zero,\\s*e16,\\s*mf4,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\" no-opts \"-O1\"  no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli} 2 { target { no-opts \"-O0\" no-opts \"-O1\" no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n "}, {"sha": "24958def604f859d36157bfc5315557e7a2880ce", "filename": "gcc/testsuite/gcc.target/riscv/rvv/vsetvl/vlmax_bb_prop-1.c", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ee85b3255d638fd77ee3fe17a4e146c81545efb/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_bb_prop-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ee85b3255d638fd77ee3fe17a4e146c81545efb/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_bb_prop-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_bb_prop-1.c?ref=6ee85b3255d638fd77ee3fe17a4e146c81545efb", "patch": "@@ -171,12 +171,12 @@ void f6 (int8_t * restrict in, int8_t * restrict out, int n)\n   }\n }\n \n-/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]} 3 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" no-opts \"-O2\" } } } } */\n-/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf4,\\s*t[au],\\s*m[au]} 3 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" no-opts \"-O2\" } } } } */\n-/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf2,\\s*t[au],\\s*m[au]} 3 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" no-opts \"-O2\" } } } } */\n-/* { dg-final { scan-assembler-times {add\\ta[0-7],a[0-7],a[0-7]\\s+\\.L[0-9][0-9]\\:\\s+vle8\\.v\\s+(?:v[0-9]|v[1-2][0-9]|v3[0-1]),0\\s*\\([a-x0-9]+\\)} 3 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" no-opts \"-O2\" } } } } */\n-/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e16,\\s*mf4,\\s*t[au],\\s*m[au]} 3 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" no-opts \"-O2\" } } } } */\n-/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e16,\\s*mf2,\\s*t[au],\\s*m[au]} 3 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" no-opts \"-O2\" } } } } */\n-/* { dg-final { scan-assembler-times {add\\ta[0-7],a[0-7],a[0-7]\\s+\\.L[0-9][0-9]\\:\\s+vle16\\.v\\s+(?:v[0-9]|v[1-2][0-9]|v3[0-1]),0\\s*\\([a-x0-9]+\\)} 2 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" no-opts \"-O2\" } } } } */\n-/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]} 3 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" no-opts \"-O2\" } } } } */\n-/* { dg-final { scan-assembler-times {add\\ta[0-7],a[0-7],a[0-7]\\s+\\.L[0-9][0-9]\\:\\s+vle32\\.v\\s+(?:v[0-9]|v[1-2][0-9]|v3[0-1]),0\\s*\\([a-x0-9]+\\)} 1 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" no-opts \"-O2\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]} 3 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-funroll-loops\" no-opts \"-g\" no-opts \"-O2\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf4,\\s*t[au],\\s*m[au]} 3 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-funroll-loops\" no-opts \"-g\" no-opts \"-O2\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf2,\\s*t[au],\\s*m[au]} 3 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-funroll-loops\" no-opts \"-g\" no-opts \"-O2\" } } } } */\n+/* { dg-final { scan-assembler-times {add\\ta[0-7],a[0-7],a[0-7]\\s+\\.L[0-9][0-9]\\:\\s+vle8\\.v\\s+(?:v[0-9]|v[1-2][0-9]|v3[0-1]),0\\s*\\([a-x0-9]+\\)} 3 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-funroll-loops\" no-opts \"-g\" no-opts \"-O2\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e16,\\s*mf4,\\s*t[au],\\s*m[au]} 3 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-funroll-loops\" no-opts \"-g\" no-opts \"-O2\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e16,\\s*mf2,\\s*t[au],\\s*m[au]} 3 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-funroll-loops\" no-opts \"-g\" no-opts \"-O2\" } } } } */\n+/* { dg-final { scan-assembler-times {add\\ta[0-7],a[0-7],a[0-7]\\s+\\.L[0-9][0-9]\\:\\s+vle16\\.v\\s+(?:v[0-9]|v[1-2][0-9]|v3[0-1]),0\\s*\\([a-x0-9]+\\)} 2 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-funroll-loops\" no-opts \"-g\" no-opts \"-O2\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]} 3 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-funroll-loops\" no-opts \"-g\" no-opts \"-O2\" } } } } */\n+/* { dg-final { scan-assembler-times {add\\ta[0-7],a[0-7],a[0-7]\\s+\\.L[0-9][0-9]\\:\\s+vle32\\.v\\s+(?:v[0-9]|v[1-2][0-9]|v3[0-1]),0\\s*\\([a-x0-9]+\\)} 1 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-funroll-loops\" no-opts \"-g\" no-opts \"-O2\" } } } } */"}, {"sha": "cf6470cea0d30b283b63f64d2f3482ba41fcf382", "filename": "gcc/testsuite/gcc.target/riscv/rvv/vsetvl/vlmax_bb_prop-10.c", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ee85b3255d638fd77ee3fe17a4e146c81545efb/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_bb_prop-10.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ee85b3255d638fd77ee3fe17a4e146c81545efb/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_bb_prop-10.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_bb_prop-10.c?ref=6ee85b3255d638fd77ee3fe17a4e146c81545efb", "patch": "@@ -219,12 +219,12 @@ void f6 (int8_t * restrict in, int8_t * restrict out, int n)\n   }\n }\n \n-/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]} 3 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" no-opts \"-O1\" } } } } */\n-/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf4,\\s*t[au],\\s*m[au]} 3 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" no-opts \"-O1\" } } } } */\n-/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf2,\\s*t[au],\\s*m[au]} 3 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" no-opts \"-O1\" } } } } */\n-/* { dg-final { scan-assembler-times {add\\ta[0-7],a[0-7],a[0-7]\\s+\\.L[0-9][0-9]\\:\\s+vle8\\.v\\s+(?:v[0-9]|v[1-2][0-9]|v3[0-1]),0\\s*\\([a-x0-9]+\\)} 3 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" no-opts \"-O1\" } } } } */\n-/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e16,\\s*mf4,\\s*t[au],\\s*m[au]} 3 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" no-opts \"-O1\" } } } } */\n-/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e16,\\s*mf2,\\s*t[au],\\s*m[au]} 3 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" no-opts \"-O1\" } } } } */\n-/* { dg-final { scan-assembler-times {add\\ta[0-7],a[0-7],a[0-7]\\s+\\.L[0-9][0-9]\\:\\s+vle16\\.v\\s+(?:v[0-9]|v[1-2][0-9]|v3[0-1]),0\\s*\\([a-x0-9]+\\)} 2 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" no-opts \"-O1\" } } } } */\n-/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]} 3 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" no-opts \"-O1\" } } } } */\n-/* { dg-final { scan-assembler-times {add\\ta[0-7],a[0-7],a[0-7]\\s+\\.L[0-9][0-9][0-9]\\:\\s+vle32\\.v\\s+(?:v[0-9]|v[1-2][0-9]|v3[0-1]),0\\s*\\([a-x0-9]+\\)} 1 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" no-opts \"-O1\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]} 3 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-funroll-loops\" no-opts \"-g\" no-opts \"-O1\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf4,\\s*t[au],\\s*m[au]} 3 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-funroll-loops\" no-opts \"-g\" no-opts \"-O1\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf2,\\s*t[au],\\s*m[au]} 3 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-funroll-loops\" no-opts \"-g\" no-opts \"-O1\" } } } } */\n+/* { dg-final { scan-assembler-times {add\\ta[0-7],a[0-7],a[0-7]\\s+\\.L[0-9][0-9]\\:\\s+vle8\\.v\\s+(?:v[0-9]|v[1-2][0-9]|v3[0-1]),0\\s*\\([a-x0-9]+\\)} 3 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-funroll-loops\" no-opts \"-g\" no-opts \"-O1\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e16,\\s*mf4,\\s*t[au],\\s*m[au]} 3 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-funroll-loops\" no-opts \"-g\" no-opts \"-O1\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e16,\\s*mf2,\\s*t[au],\\s*m[au]} 3 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-funroll-loops\" no-opts \"-g\" no-opts \"-O1\" } } } } */\n+/* { dg-final { scan-assembler-times {add\\ta[0-7],a[0-7],a[0-7]\\s+\\.L[0-9][0-9]\\:\\s+vle16\\.v\\s+(?:v[0-9]|v[1-2][0-9]|v3[0-1]),0\\s*\\([a-x0-9]+\\)} 2 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-funroll-loops\" no-opts \"-g\" no-opts \"-O1\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]} 3 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-funroll-loops\" no-opts \"-g\" no-opts \"-O1\" } } } } */\n+/* { dg-final { scan-assembler-times {add\\ta[0-7],a[0-7],a[0-7]\\s+\\.L[0-9][0-9][0-9]\\:\\s+vle32\\.v\\s+(?:v[0-9]|v[1-2][0-9]|v3[0-1]),0\\s*\\([a-x0-9]+\\)} 1 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-funroll-loops\" no-opts \"-g\" no-opts \"-O1\" } } } } */"}, {"sha": "4e2a717197b97e31f964a33ae716f6cee6f04c0e", "filename": "gcc/testsuite/gcc.target/riscv/rvv/vsetvl/vlmax_bb_prop-11.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ee85b3255d638fd77ee3fe17a4e146c81545efb/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_bb_prop-11.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ee85b3255d638fd77ee3fe17a4e146c81545efb/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_bb_prop-11.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_bb_prop-11.c?ref=6ee85b3255d638fd77ee3fe17a4e146c81545efb", "patch": "@@ -39,5 +39,5 @@ void f (int8_t * restrict in, int8_t * restrict out, int n)\n   }\n }\n \n-/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]} 3 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n-/* { dg-final { scan-assembler-times {add\\ta[0-7],a[0-7],a[0-7]\\s+\\.L[0-9][0-9]\\:\\s+vle32\\.v\\s+(?:v[0-9]|v[1-2][0-9]|v3[0-1]),0\\s*\\([a-x0-9]+\\)} 1 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]} 3 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {add\\ta[0-7],a[0-7],a[0-7]\\s+\\.L[0-9][0-9]\\:\\s+vle32\\.v\\s+(?:v[0-9]|v[1-2][0-9]|v3[0-1]),0\\s*\\([a-x0-9]+\\)} 1 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */"}, {"sha": "026b40944c5c79ca7d4ff5c70b7f5f4b7c9acb9a", "filename": "gcc/testsuite/gcc.target/riscv/rvv/vsetvl/vlmax_bb_prop-12.c", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ee85b3255d638fd77ee3fe17a4e146c81545efb/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_bb_prop-12.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ee85b3255d638fd77ee3fe17a4e146c81545efb/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_bb_prop-12.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_bb_prop-12.c?ref=6ee85b3255d638fd77ee3fe17a4e146c81545efb", "patch": "@@ -255,12 +255,12 @@ void f7 (int8_t * restrict in, int8_t * restrict out, int n)\n   }\n }\n \n-/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]} 3 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" no-opts \"-O1\" no-opts \"-O1\" } } } } */\n-/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf4,\\s*t[au],\\s*m[au]} 3 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" no-opts \"-O1\" no-opts \"-O1\" } } } } */\n-/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf2,\\s*t[au],\\s*m[au]} 3 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" no-opts \"-O1\" no-opts \"-O1\" } } } } */\n-/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*m1,\\s*t[au],\\s*m[au]} 3 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" no-opts \"-O1\" no-opts \"-O1\" } } } } */\n-/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*m2,\\s*t[au],\\s*m[au]} 3 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" no-opts \"-O1\" no-opts \"-O1\" } } } } */\n-/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*m4,\\s*t[au],\\s*m[au]} 3 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" no-opts \"-O1\" no-opts \"-O1\" } } } } */\n-/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*m8,\\s*t[au],\\s*m[au]} 3 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" no-opts \"-O1\" no-opts \"-O1\" } } } } */\n-/* { dg-final { scan-assembler-times {add\\ta[0-7],a[0-7],a[0-7]\\s+\\.L[0-9][0-9]\\:\\s+vlm\\.v\\s+(?:v[0-9]|v[1-2][0-9]|v3[0-1]),0\\s*\\([a-x0-9]+\\)} 5 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" no-opts \"-O1\" no-opts \"-O1\" } } } } */\n-/* { dg-final { scan-assembler-times {add\\ta[0-7],a[0-7],a[0-7]\\s+\\.L[0-9][0-9][0-9]\\:\\s+vlm\\.v\\s+(?:v[0-9]|v[1-2][0-9]|v3[0-1]),0\\s*\\([a-x0-9]+\\)} 2 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" no-opts \"-O1\" no-opts \"-O1\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]} 3 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-funroll-loops\" no-opts \"-g\" no-opts \"-O1\" no-opts \"-O1\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf4,\\s*t[au],\\s*m[au]} 3 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-funroll-loops\" no-opts \"-g\" no-opts \"-O1\" no-opts \"-O1\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf2,\\s*t[au],\\s*m[au]} 3 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-funroll-loops\" no-opts \"-g\" no-opts \"-O1\" no-opts \"-O1\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*m1,\\s*t[au],\\s*m[au]} 3 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-funroll-loops\" no-opts \"-g\" no-opts \"-O1\" no-opts \"-O1\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*m2,\\s*t[au],\\s*m[au]} 3 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-funroll-loops\" no-opts \"-g\" no-opts \"-O1\" no-opts \"-O1\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*m4,\\s*t[au],\\s*m[au]} 3 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-funroll-loops\" no-opts \"-g\" no-opts \"-O1\" no-opts \"-O1\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*m8,\\s*t[au],\\s*m[au]} 3 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-funroll-loops\" no-opts \"-g\" no-opts \"-O1\" no-opts \"-O1\" } } } } */\n+/* { dg-final { scan-assembler-times {add\\ta[0-7],a[0-7],a[0-7]\\s+\\.L[0-9][0-9]\\:\\s+vlm\\.v\\s+(?:v[0-9]|v[1-2][0-9]|v3[0-1]),0\\s*\\([a-x0-9]+\\)} 5 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-funroll-loops\" no-opts \"-g\" no-opts \"-O1\" no-opts \"-O1\" } } } } */\n+/* { dg-final { scan-assembler-times {add\\ta[0-7],a[0-7],a[0-7]\\s+\\.L[0-9][0-9][0-9]\\:\\s+vlm\\.v\\s+(?:v[0-9]|v[1-2][0-9]|v3[0-1]),0\\s*\\([a-x0-9]+\\)} 2 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-funroll-loops\" no-opts \"-g\" no-opts \"-O1\" no-opts \"-O1\" } } } } */"}, {"sha": "76e360519f6f9af2abb76f0fbdb663023dff8788", "filename": "gcc/testsuite/gcc.target/riscv/rvv/vsetvl/vlmax_bb_prop-13.c", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ee85b3255d638fd77ee3fe17a4e146c81545efb/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_bb_prop-13.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ee85b3255d638fd77ee3fe17a4e146c81545efb/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_bb_prop-13.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_bb_prop-13.c?ref=6ee85b3255d638fd77ee3fe17a4e146c81545efb", "patch": "@@ -207,9 +207,9 @@ void f6 (int8_t * restrict in, int8_t * restrict out, int n)\n   }\n }\n \n-/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]} 3 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n-/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf4,\\s*t[au],\\s*m[au]} 3 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n-/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf2,\\s*t[au],\\s*m[au]} 3 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n-/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e16,\\s*mf4,\\s*t[au],\\s*m[au]} 3 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n-/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e16,\\s*mf2,\\s*t[au],\\s*m[au]} 3 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n-/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]} 3 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]} 3 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf4,\\s*t[au],\\s*m[au]} 3 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf2,\\s*t[au],\\s*m[au]} 3 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e16,\\s*mf4,\\s*t[au],\\s*m[au]} 3 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e16,\\s*mf2,\\s*t[au],\\s*m[au]} 3 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]} 3 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */"}, {"sha": "3e5e88744fe5dc1895493626adb2d4b1bef5997f", "filename": "gcc/testsuite/gcc.target/riscv/rvv/vsetvl/vlmax_bb_prop-14.c", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ee85b3255d638fd77ee3fe17a4e146c81545efb/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_bb_prop-14.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ee85b3255d638fd77ee3fe17a4e146c81545efb/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_bb_prop-14.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_bb_prop-14.c?ref=6ee85b3255d638fd77ee3fe17a4e146c81545efb", "patch": "@@ -207,9 +207,9 @@ void f6 (int8_t * restrict in, int8_t * restrict out, int n)\n   }\n }\n \n-/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]} 3 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n-/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf4,\\s*t[au],\\s*m[au]} 3 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n-/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf2,\\s*t[au],\\s*m[au]} 3 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n-/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e16,\\s*mf4,\\s*t[au],\\s*m[au]} 3 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n-/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e16,\\s*mf2,\\s*t[au],\\s*m[au]} 3 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n-/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]} 3 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]} 3 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf4,\\s*t[au],\\s*m[au]} 3 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf2,\\s*t[au],\\s*m[au]} 3 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e16,\\s*mf4,\\s*t[au],\\s*m[au]} 3 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e16,\\s*mf2,\\s*t[au],\\s*m[au]} 3 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]} 3 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */"}, {"sha": "b66df6addbf104acb07b4630f0fb4a48f91d8814", "filename": "gcc/testsuite/gcc.target/riscv/rvv/vsetvl/vlmax_bb_prop-15.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ee85b3255d638fd77ee3fe17a4e146c81545efb/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_bb_prop-15.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ee85b3255d638fd77ee3fe17a4e146c81545efb/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_bb_prop-15.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_bb_prop-15.c?ref=6ee85b3255d638fd77ee3fe17a4e146c81545efb", "patch": "@@ -37,4 +37,4 @@ void f (int8_t * restrict in, int8_t * restrict out, int n)\n   }\n }\n \n-/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]} 3 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]} 3 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */"}, {"sha": "1b33c17ee2fd80a7c51059535b4c8b7d265931eb", "filename": "gcc/testsuite/gcc.target/riscv/rvv/vsetvl/vlmax_bb_prop-16.c", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ee85b3255d638fd77ee3fe17a4e146c81545efb/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_bb_prop-16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ee85b3255d638fd77ee3fe17a4e146c81545efb/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_bb_prop-16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_bb_prop-16.c?ref=6ee85b3255d638fd77ee3fe17a4e146c81545efb", "patch": "@@ -241,10 +241,10 @@ void f7 (int8_t * restrict in, int8_t * restrict out, int n)\n   }\n }\n \n-/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]} 3 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" no-opts \"-O1\" } } } } */\n-/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf4,\\s*t[au],\\s*m[au]} 3 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" no-opts \"-O1\" } } } } */\n-/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf2,\\s*t[au],\\s*m[au]} 3 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" no-opts \"-O1\" } } } } */\n-/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*m1,\\s*t[au],\\s*m[au]} 3 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" no-opts \"-O1\" } } } } */\n-/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*m2,\\s*t[au],\\s*m[au]} 3 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" no-opts \"-O1\" } } } } */\n-/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*m4,\\s*t[au],\\s*m[au]} 3 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" no-opts \"-O1\" } } } } */\n-/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*m8,\\s*t[au],\\s*m[au]} 3 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" no-opts \"-O1\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]} 3 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-funroll-loops\" no-opts \"-g\" no-opts \"-O1\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf4,\\s*t[au],\\s*m[au]} 3 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-funroll-loops\" no-opts \"-g\" no-opts \"-O1\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf2,\\s*t[au],\\s*m[au]} 3 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-funroll-loops\" no-opts \"-g\" no-opts \"-O1\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*m1,\\s*t[au],\\s*m[au]} 3 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-funroll-loops\" no-opts \"-g\" no-opts \"-O1\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*m2,\\s*t[au],\\s*m[au]} 3 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-funroll-loops\" no-opts \"-g\" no-opts \"-O1\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*m4,\\s*t[au],\\s*m[au]} 3 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-funroll-loops\" no-opts \"-g\" no-opts \"-O1\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*m8,\\s*t[au],\\s*m[au]} 3 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-funroll-loops\" no-opts \"-g\" no-opts \"-O1\" } } } } */"}, {"sha": "b5b31fdb5939994800e079ece35c71f10d803388", "filename": "gcc/testsuite/gcc.target/riscv/rvv/vsetvl/vlmax_bb_prop-17.c", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ee85b3255d638fd77ee3fe17a4e146c81545efb/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_bb_prop-17.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ee85b3255d638fd77ee3fe17a4e146c81545efb/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_bb_prop-17.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_bb_prop-17.c?ref=6ee85b3255d638fd77ee3fe17a4e146c81545efb", "patch": "@@ -165,13 +165,13 @@ void f6 (int * restrict in, int * restrict out, int n, int cond)\n     }\n }\n \n-/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]} 2 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n-/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf4,\\s*t[au],\\s*m[au]} 2 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n-/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf2,\\s*t[au],\\s*m[au]} 2 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n-/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e16,\\s*mf4,\\s*t[au],\\s*m[au]} 2 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n-/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e16,\\s*mf2,\\s*t[au],\\s*m[au]} 2 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n-/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]} 2 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n-/* { dg-final { scan-assembler-times {add\\ta[0-7],a[0-7],a[0-7]\\s+\\.L[0-9]\\:\\s+vle8\\.v\\s+(?:v[0-9]|v[1-2][0-9]|v3[0-1]),0\\s*\\([a-x0-9]+\\)} 1 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n-/* { dg-final { scan-assembler-times {add\\ta[0-7],a[0-7],a[0-7]\\s+\\.L[0-9][0-9]\\:\\s+vle8\\.v\\s+(?:v[0-9]|v[1-2][0-9]|v3[0-1]),0\\s*\\([a-x0-9]+\\)} 2 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n-/* { dg-final { scan-assembler-times {add\\ta[0-7],a[0-7],a[0-7]\\s+\\.L[0-9][0-9]\\:\\s+vle16\\.v\\s+(?:v[0-9]|v[1-2][0-9]|v3[0-1]),0\\s*\\([a-x0-9]+\\)} 2 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n-/* { dg-final { scan-assembler-times {add\\ta[0-7],a[0-7],a[0-7]\\s+\\.L[0-9][0-9]\\:\\s+vle32\\.v\\s+(?:v[0-9]|v[1-2][0-9]|v3[0-1]),0\\s*\\([a-x0-9]+\\)} 1 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]} 2 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf4,\\s*t[au],\\s*m[au]} 2 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf2,\\s*t[au],\\s*m[au]} 2 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e16,\\s*mf4,\\s*t[au],\\s*m[au]} 2 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e16,\\s*mf2,\\s*t[au],\\s*m[au]} 2 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]} 2 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {add\\ta[0-7],a[0-7],a[0-7]\\s+\\.L[0-9]\\:\\s+vle8\\.v\\s+(?:v[0-9]|v[1-2][0-9]|v3[0-1]),0\\s*\\([a-x0-9]+\\)} 1 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {add\\ta[0-7],a[0-7],a[0-7]\\s+\\.L[0-9][0-9]\\:\\s+vle8\\.v\\s+(?:v[0-9]|v[1-2][0-9]|v3[0-1]),0\\s*\\([a-x0-9]+\\)} 2 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {add\\ta[0-7],a[0-7],a[0-7]\\s+\\.L[0-9][0-9]\\:\\s+vle16\\.v\\s+(?:v[0-9]|v[1-2][0-9]|v3[0-1]),0\\s*\\([a-x0-9]+\\)} 2 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {add\\ta[0-7],a[0-7],a[0-7]\\s+\\.L[0-9][0-9]\\:\\s+vle32\\.v\\s+(?:v[0-9]|v[1-2][0-9]|v3[0-1]),0\\s*\\([a-x0-9]+\\)} 1 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */"}, {"sha": "d2ec69a76f8452bc863f527e03b211cbf712e76b", "filename": "gcc/testsuite/gcc.target/riscv/rvv/vsetvl/vlmax_bb_prop-18.c", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ee85b3255d638fd77ee3fe17a4e146c81545efb/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_bb_prop-18.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ee85b3255d638fd77ee3fe17a4e146c81545efb/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_bb_prop-18.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_bb_prop-18.c?ref=6ee85b3255d638fd77ee3fe17a4e146c81545efb", "patch": "@@ -165,13 +165,13 @@ void f6 (int * restrict in, int * restrict out, int n, int cond)\n     }\n }\n \n-/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]} 2 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n-/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf4,\\s*t[au],\\s*m[au]} 2 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n-/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf2,\\s*t[au],\\s*m[au]} 2 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n-/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e16,\\s*mf4,\\s*t[au],\\s*m[au]} 2 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n-/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e16,\\s*mf2,\\s*t[au],\\s*m[au]} 2 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n-/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]} 2 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n-/* { dg-final { scan-assembler-times {add\\ta[0-7],a[0-7],a[0-7]\\s+\\.L[0-9]\\:\\s+vle8\\.v\\s+(?:v[0-9]|v[1-2][0-9]|v3[0-1]),0\\s*\\([a-x0-9]+\\)} 1 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n-/* { dg-final { scan-assembler-times {add\\ta[0-7],a[0-7],a[0-7]\\s+\\.L[0-9][0-9]\\:\\s+vle8\\.v\\s+(?:v[0-9]|v[1-2][0-9]|v3[0-1]),0\\s*\\([a-x0-9]+\\)} 2 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n-/* { dg-final { scan-assembler-times {add\\ta[0-7],a[0-7],a[0-7]\\s+\\.L[0-9][0-9]\\:\\s+vle16\\.v\\s+(?:v[0-9]|v[1-2][0-9]|v3[0-1]),0\\s*\\([a-x0-9]+\\)} 2 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n-/* { dg-final { scan-assembler-times {add\\ta[0-7],a[0-7],a[0-7]\\s+\\.L[0-9][0-9]\\:\\s+vle32\\.v\\s+(?:v[0-9]|v[1-2][0-9]|v3[0-1]),0\\s*\\([a-x0-9]+\\)} 1 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]} 2 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf4,\\s*t[au],\\s*m[au]} 2 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf2,\\s*t[au],\\s*m[au]} 2 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e16,\\s*mf4,\\s*t[au],\\s*m[au]} 2 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e16,\\s*mf2,\\s*t[au],\\s*m[au]} 2 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]} 2 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {add\\ta[0-7],a[0-7],a[0-7]\\s+\\.L[0-9]\\:\\s+vle8\\.v\\s+(?:v[0-9]|v[1-2][0-9]|v3[0-1]),0\\s*\\([a-x0-9]+\\)} 1 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {add\\ta[0-7],a[0-7],a[0-7]\\s+\\.L[0-9][0-9]\\:\\s+vle8\\.v\\s+(?:v[0-9]|v[1-2][0-9]|v3[0-1]),0\\s*\\([a-x0-9]+\\)} 2 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {add\\ta[0-7],a[0-7],a[0-7]\\s+\\.L[0-9][0-9]\\:\\s+vle16\\.v\\s+(?:v[0-9]|v[1-2][0-9]|v3[0-1]),0\\s*\\([a-x0-9]+\\)} 2 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {add\\ta[0-7],a[0-7],a[0-7]\\s+\\.L[0-9][0-9]\\:\\s+vle32\\.v\\s+(?:v[0-9]|v[1-2][0-9]|v3[0-1]),0\\s*\\([a-x0-9]+\\)} 1 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */"}, {"sha": "9fdc8aee6a152d27165dd7a0249f4da9f66920c3", "filename": "gcc/testsuite/gcc.target/riscv/rvv/vsetvl/vlmax_bb_prop-19.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ee85b3255d638fd77ee3fe17a4e146c81545efb/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_bb_prop-19.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ee85b3255d638fd77ee3fe17a4e146c81545efb/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_bb_prop-19.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_bb_prop-19.c?ref=6ee85b3255d638fd77ee3fe17a4e146c81545efb", "patch": "@@ -30,5 +30,5 @@ void f6 (int * restrict in, int * restrict out, int n, int cond)\n     }\n }\n \n-/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]} 2 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n-/* { dg-final { scan-assembler-times {add\\ta[0-7],a[0-7],a[0-7]\\s+\\.L[0-9]\\:\\s+vle32\\.v\\s+(?:v[0-9]|v[1-2][0-9]|v3[0-1]),0\\s*\\([a-x0-9]+\\)} 1 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]} 2 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {add\\ta[0-7],a[0-7],a[0-7]\\s+\\.L[0-9]\\:\\s+vle32\\.v\\s+(?:v[0-9]|v[1-2][0-9]|v3[0-1]),0\\s*\\([a-x0-9]+\\)} 1 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */"}, {"sha": "e61eb40b7c5ce775e7e4350ddd67b3ae20e2668d", "filename": "gcc/testsuite/gcc.target/riscv/rvv/vsetvl/vlmax_bb_prop-2.c", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ee85b3255d638fd77ee3fe17a4e146c81545efb/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_bb_prop-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ee85b3255d638fd77ee3fe17a4e146c81545efb/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_bb_prop-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_bb_prop-2.c?ref=6ee85b3255d638fd77ee3fe17a4e146c81545efb", "patch": "@@ -171,12 +171,12 @@ void f6 (int8_t * restrict in, int8_t * restrict out, int n)\n   }\n }\n \n-/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]} 3 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" no-opts \"-O2\" no-opts \"-O1\" } } } } */\n-/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf4,\\s*t[au],\\s*m[au]} 3 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" no-opts \"-O2\" no-opts \"-O1\" } } } } */\n-/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf2,\\s*t[au],\\s*m[au]} 3 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" no-opts \"-O2\" no-opts \"-O1\" } } } } */\n-/* { dg-final { scan-assembler-times {add\\ta[0-7],a[0-7],a[0-7]\\s+\\.L[0-9][0-9]\\:\\s+vle8\\.v\\s+(?:v[0-9]|v[1-2][0-9]|v3[0-1]),0\\s*\\([a-x0-9]+\\)} 3 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" no-opts \"-O2\" no-opts \"-O1\" } } } } */\n-/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e16,\\s*mf4,\\s*t[au],\\s*m[au]} 3 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" no-opts \"-O2\" no-opts \"-O1\" } } } } */\n-/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e16,\\s*mf2,\\s*t[au],\\s*m[au]} 3 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" no-opts \"-O2\" no-opts \"-O1\" } } } } */\n-/* { dg-final { scan-assembler-times {add\\ta[0-7],a[0-7],a[0-7]\\s+\\.L[0-9][0-9]\\:\\s+vle16\\.v\\s+(?:v[0-9]|v[1-2][0-9]|v3[0-1]),0\\s*\\([a-x0-9]+\\)} 2 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" no-opts \"-O2\" no-opts \"-O1\" } } } } */\n-/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]} 3 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" no-opts \"-O2\" no-opts \"-O1\" } } } } */\n-/* { dg-final { scan-assembler-times {add\\ta[0-7],a[0-7],a[0-7]\\s+\\.L[0-9][0-9]\\:\\s+vle32\\.v\\s+(?:v[0-9]|v[1-2][0-9]|v3[0-1]),0\\s*\\([a-x0-9]+\\)} 1 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" no-opts \"-O2\" no-opts \"-O1\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]} 3 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-funroll-loops\" no-opts \"-g\" no-opts \"-O2\" no-opts \"-O1\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf4,\\s*t[au],\\s*m[au]} 3 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-funroll-loops\" no-opts \"-g\" no-opts \"-O2\" no-opts \"-O1\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf2,\\s*t[au],\\s*m[au]} 3 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-funroll-loops\" no-opts \"-g\" no-opts \"-O2\" no-opts \"-O1\" } } } } */\n+/* { dg-final { scan-assembler-times {add\\ta[0-7],a[0-7],a[0-7]\\s+\\.L[0-9][0-9]\\:\\s+vle8\\.v\\s+(?:v[0-9]|v[1-2][0-9]|v3[0-1]),0\\s*\\([a-x0-9]+\\)} 3 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-funroll-loops\" no-opts \"-g\" no-opts \"-O2\" no-opts \"-O1\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e16,\\s*mf4,\\s*t[au],\\s*m[au]} 3 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-funroll-loops\" no-opts \"-g\" no-opts \"-O2\" no-opts \"-O1\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e16,\\s*mf2,\\s*t[au],\\s*m[au]} 3 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-funroll-loops\" no-opts \"-g\" no-opts \"-O2\" no-opts \"-O1\" } } } } */\n+/* { dg-final { scan-assembler-times {add\\ta[0-7],a[0-7],a[0-7]\\s+\\.L[0-9][0-9]\\:\\s+vle16\\.v\\s+(?:v[0-9]|v[1-2][0-9]|v3[0-1]),0\\s*\\([a-x0-9]+\\)} 2 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-funroll-loops\" no-opts \"-g\" no-opts \"-O2\" no-opts \"-O1\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]} 3 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-funroll-loops\" no-opts \"-g\" no-opts \"-O2\" no-opts \"-O1\" } } } } */\n+/* { dg-final { scan-assembler-times {add\\ta[0-7],a[0-7],a[0-7]\\s+\\.L[0-9][0-9]\\:\\s+vle32\\.v\\s+(?:v[0-9]|v[1-2][0-9]|v3[0-1]),0\\s*\\([a-x0-9]+\\)} 1 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-funroll-loops\" no-opts \"-g\" no-opts \"-O2\" no-opts \"-O1\" } } } } */"}, {"sha": "e4caff3f9d158a0474bf4cf0328387b30713d62b", "filename": "gcc/testsuite/gcc.target/riscv/rvv/vsetvl/vlmax_bb_prop-20.c", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ee85b3255d638fd77ee3fe17a4e146c81545efb/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_bb_prop-20.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ee85b3255d638fd77ee3fe17a4e146c81545efb/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_bb_prop-20.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_bb_prop-20.c?ref=6ee85b3255d638fd77ee3fe17a4e146c81545efb", "patch": "@@ -192,12 +192,12 @@ void f7 (int * restrict in, int * restrict out, int n, int cond)\n     }\n }\n \n-/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]} 2 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n-/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf4,\\s*t[au],\\s*m[au]} 2 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n-/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf2,\\s*t[au],\\s*m[au]} 2 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n-/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*m1,\\s*t[au],\\s*m[au]} 2 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n-/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*m2,\\s*t[au],\\s*m[au]} 2 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n-/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*m4,\\s*t[au],\\s*m[au]} 2 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n-/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*m8,\\s*t[au],\\s*m[au]} 2 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n-/* { dg-final { scan-assembler-times {add\\ta[0-7],a[0-7],a[0-7]\\s+\\.L[0-9]\\:\\s+vlm\\.v\\s+(?:v[0-9]|v[1-2][0-9]|v3[0-1]),0\\s*\\([a-x0-9]+\\)} 1 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n-/* { dg-final { scan-assembler-times {add\\ta[0-7],a[0-7],a[0-7]\\s+\\.L[0-9][0-9]\\:\\s+vlm\\.v\\s+(?:v[0-9]|v[1-2][0-9]|v3[0-1]),0\\s*\\([a-x0-9]+\\)} 6 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]} 2 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf4,\\s*t[au],\\s*m[au]} 2 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf2,\\s*t[au],\\s*m[au]} 2 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*m1,\\s*t[au],\\s*m[au]} 2 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*m2,\\s*t[au],\\s*m[au]} 2 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*m4,\\s*t[au],\\s*m[au]} 2 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*m8,\\s*t[au],\\s*m[au]} 2 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {add\\ta[0-7],a[0-7],a[0-7]\\s+\\.L[0-9]\\:\\s+vlm\\.v\\s+(?:v[0-9]|v[1-2][0-9]|v3[0-1]),0\\s*\\([a-x0-9]+\\)} 1 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {add\\ta[0-7],a[0-7],a[0-7]\\s+\\.L[0-9][0-9]\\:\\s+vlm\\.v\\s+(?:v[0-9]|v[1-2][0-9]|v3[0-1]),0\\s*\\([a-x0-9]+\\)} 6 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */"}, {"sha": "26f115c5cf4ff8e9f82cb5f9b08dfee96dfe9f53", "filename": "gcc/testsuite/gcc.target/riscv/rvv/vsetvl/vlmax_bb_prop-21.c", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ee85b3255d638fd77ee3fe17a4e146c81545efb/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_bb_prop-21.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ee85b3255d638fd77ee3fe17a4e146c81545efb/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_bb_prop-21.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_bb_prop-21.c?ref=6ee85b3255d638fd77ee3fe17a4e146c81545efb", "patch": "@@ -141,15 +141,15 @@ void f6 (int * restrict in, int * restrict out, int n, int cond)\n     }\n }\n \n-/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]} 3 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n-/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf4,\\s*t[au],\\s*m[au]} 3 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n-/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf2,\\s*t[au],\\s*m[au]} 3 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n-/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e16,\\s*mf4,\\s*t[au],\\s*m[au]} 3 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n-/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e16,\\s*mf2,\\s*t[au],\\s*m[au]} 3 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n-/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]} 3 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n-/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]\\s+\\.L[0-9]\\:} 1 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n-/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf4,\\s*t[au],\\s*m[au]\\s+\\.L[0-9][0-9]\\:} 1 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n-/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf2,\\s*t[au],\\s*m[au]\\s+\\.L[0-9][0-9]\\:} 1 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n-/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e16,\\s*mf4,\\s*t[au],\\s*m[au]\\s+\\.L[0-9][0-9]\\:} 1 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n-/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e16,\\s*mf2,\\s*t[au],\\s*m[au]\\s+\\.L[0-9][0-9]\\:} 1 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n-/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]\\s+\\.L[0-9][0-9]\\:} 1 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]} 3 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf4,\\s*t[au],\\s*m[au]} 3 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf2,\\s*t[au],\\s*m[au]} 3 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e16,\\s*mf4,\\s*t[au],\\s*m[au]} 3 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e16,\\s*mf2,\\s*t[au],\\s*m[au]} 3 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]} 3 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]\\s+\\.L[0-9]\\:} 1 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf4,\\s*t[au],\\s*m[au]\\s+\\.L[0-9][0-9]\\:} 1 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf2,\\s*t[au],\\s*m[au]\\s+\\.L[0-9][0-9]\\:} 1 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e16,\\s*mf4,\\s*t[au],\\s*m[au]\\s+\\.L[0-9][0-9]\\:} 1 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e16,\\s*mf2,\\s*t[au],\\s*m[au]\\s+\\.L[0-9][0-9]\\:} 1 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]\\s+\\.L[0-9][0-9]\\:} 1 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */"}, {"sha": "6fb81c518b2cc98b8f14b07fcca7776ab5991a3c", "filename": "gcc/testsuite/gcc.target/riscv/rvv/vsetvl/vlmax_bb_prop-22.c", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ee85b3255d638fd77ee3fe17a4e146c81545efb/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_bb_prop-22.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ee85b3255d638fd77ee3fe17a4e146c81545efb/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_bb_prop-22.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_bb_prop-22.c?ref=6ee85b3255d638fd77ee3fe17a4e146c81545efb", "patch": "@@ -141,15 +141,15 @@ void f6 (int * restrict in, int * restrict out, int n, int cond)\n     }\n }\n \n-/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]} 3 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n-/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf4,\\s*t[au],\\s*m[au]} 3 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n-/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf2,\\s*t[au],\\s*m[au]} 3 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n-/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e16,\\s*mf4,\\s*t[au],\\s*m[au]} 3 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n-/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e16,\\s*mf2,\\s*t[au],\\s*m[au]} 3 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n-/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]} 3 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n-/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]\\s+\\.L[0-9]\\:} 1 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n-/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf4,\\s*t[au],\\s*m[au]\\s+\\.L[0-9][0-9]\\:} 1 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n-/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf2,\\s*t[au],\\s*m[au]\\s+\\.L[0-9][0-9]\\:} 1 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n-/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e16,\\s*mf4,\\s*t[au],\\s*m[au]\\s+\\.L[0-9][0-9]\\:} 1 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n-/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e16,\\s*mf2,\\s*t[au],\\s*m[au]\\s+\\.L[0-9][0-9]\\:} 1 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n-/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]\\s+\\.L[0-9][0-9]\\:} 1 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]} 3 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf4,\\s*t[au],\\s*m[au]} 3 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf2,\\s*t[au],\\s*m[au]} 3 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e16,\\s*mf4,\\s*t[au],\\s*m[au]} 3 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e16,\\s*mf2,\\s*t[au],\\s*m[au]} 3 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]} 3 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]\\s+\\.L[0-9]\\:} 1 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf4,\\s*t[au],\\s*m[au]\\s+\\.L[0-9][0-9]\\:} 1 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf2,\\s*t[au],\\s*m[au]\\s+\\.L[0-9][0-9]\\:} 1 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e16,\\s*mf4,\\s*t[au],\\s*m[au]\\s+\\.L[0-9][0-9]\\:} 1 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e16,\\s*mf2,\\s*t[au],\\s*m[au]\\s+\\.L[0-9][0-9]\\:} 1 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]\\s+\\.L[0-9][0-9]\\:} 1 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */"}, {"sha": "728761d21dc4f062880b118960e1296028722d20", "filename": "gcc/testsuite/gcc.target/riscv/rvv/vsetvl/vlmax_bb_prop-23.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ee85b3255d638fd77ee3fe17a4e146c81545efb/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_bb_prop-23.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ee85b3255d638fd77ee3fe17a4e146c81545efb/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_bb_prop-23.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_bb_prop-23.c?ref=6ee85b3255d638fd77ee3fe17a4e146c81545efb", "patch": "@@ -26,5 +26,5 @@ void f (int * restrict in, int * restrict out, int n, int cond)\n     }\n }\n \n-/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]} 3 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n-/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]\\s+\\.L[0-9]\\:} 1 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]} 3 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]\\s+\\.L[0-9]\\:} 1 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */"}, {"sha": "8dbcccdebe36209c6092d6ebcc6e7dc54330a751", "filename": "gcc/testsuite/gcc.target/riscv/rvv/vsetvl/vlmax_bb_prop-24.c", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ee85b3255d638fd77ee3fe17a4e146c81545efb/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_bb_prop-24.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ee85b3255d638fd77ee3fe17a4e146c81545efb/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_bb_prop-24.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_bb_prop-24.c?ref=6ee85b3255d638fd77ee3fe17a4e146c81545efb", "patch": "@@ -164,17 +164,17 @@ void f7 (int * restrict in, int * restrict out, int n, int cond)\n     }\n }\n \n-/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]} 3 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n-/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf4,\\s*t[au],\\s*m[au]} 3 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n-/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf2,\\s*t[au],\\s*m[au]} 3 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n-/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*m1,\\s*t[au],\\s*m[au]} 3 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n-/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*m2,\\s*t[au],\\s*m[au]} 3 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n-/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*m4,\\s*t[au],\\s*m[au]} 3 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n-/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*m8,\\s*t[au],\\s*m[au]} 3 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n-/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]\\s+\\.L[0-9]\\:} 1 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n-/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf4,\\s*t[au],\\s*m[au]\\s+\\.L[0-9][0-9]\\:} 1 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n-/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf2,\\s*t[au],\\s*m[au]\\s+\\.L[0-9][0-9]\\:} 1 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n-/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*m1,\\s*t[au],\\s*m[au]\\s+\\.L[0-9][0-9]\\:} 1 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n-/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*m2,\\s*t[au],\\s*m[au]\\s+\\.L[0-9][0-9]\\:} 1 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n-/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*m4,\\s*t[au],\\s*m[au]\\s+\\.L[0-9][0-9]\\:} 1 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n-/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*m8,\\s*t[au],\\s*m[au]\\s+\\.L[0-9][0-9]\\:} 1 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]} 3 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf4,\\s*t[au],\\s*m[au]} 3 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf2,\\s*t[au],\\s*m[au]} 3 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*m1,\\s*t[au],\\s*m[au]} 3 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*m2,\\s*t[au],\\s*m[au]} 3 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*m4,\\s*t[au],\\s*m[au]} 3 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*m8,\\s*t[au],\\s*m[au]} 3 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]\\s+\\.L[0-9]\\:} 1 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf4,\\s*t[au],\\s*m[au]\\s+\\.L[0-9][0-9]\\:} 1 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf2,\\s*t[au],\\s*m[au]\\s+\\.L[0-9][0-9]\\:} 1 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*m1,\\s*t[au],\\s*m[au]\\s+\\.L[0-9][0-9]\\:} 1 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*m2,\\s*t[au],\\s*m[au]\\s+\\.L[0-9][0-9]\\:} 1 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*m4,\\s*t[au],\\s*m[au]\\s+\\.L[0-9][0-9]\\:} 1 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*m8,\\s*t[au],\\s*m[au]\\s+\\.L[0-9][0-9]\\:} 1 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */"}, {"sha": "1dee56d1f8b04e8c0ec55ec2864d7e40eb14cae9", "filename": "gcc/testsuite/gcc.target/riscv/rvv/vsetvl/vlmax_bb_prop-25.c", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ee85b3255d638fd77ee3fe17a4e146c81545efb/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_bb_prop-25.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ee85b3255d638fd77ee3fe17a4e146c81545efb/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_bb_prop-25.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_bb_prop-25.c?ref=6ee85b3255d638fd77ee3fe17a4e146c81545efb", "patch": "@@ -563,10 +563,10 @@ void f7 (int8_t * restrict in, int8_t * restrict out, int n)\n   }\n }\n \n-/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]} 3 { target { no-opts \"-O0\" no-opts \"-O1\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n-/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf4,\\s*t[au],\\s*m[au]} 3 { target { no-opts \"-O0\" no-opts \"-O1\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n-/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf2,\\s*t[au],\\s*m[au]} 3 { target { no-opts \"-O0\" no-opts \"-O1\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n-/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*m1,\\s*t[au],\\s*m[au]} 3 { target { no-opts \"-O0\" no-opts \"-O1\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n-/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*m2,\\s*t[au],\\s*m[au]} 3 { target { no-opts \"-O0\" no-opts \"-O1\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n-/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*m4,\\s*t[au],\\s*m[au]} 3 { target { no-opts \"-O0\" no-opts \"-O1\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n-/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*m8,\\s*t[au],\\s*m[au]} 3 { target { no-opts \"-O0\" no-opts \"-O1\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]} 3 { target { no-opts \"-O0\" no-opts \"-O1\"  no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf4,\\s*t[au],\\s*m[au]} 3 { target { no-opts \"-O0\" no-opts \"-O1\"  no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf2,\\s*t[au],\\s*m[au]} 3 { target { no-opts \"-O0\" no-opts \"-O1\"  no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*m1,\\s*t[au],\\s*m[au]} 3 { target { no-opts \"-O0\" no-opts \"-O1\"  no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*m2,\\s*t[au],\\s*m[au]} 3 { target { no-opts \"-O0\" no-opts \"-O1\"  no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*m4,\\s*t[au],\\s*m[au]} 3 { target { no-opts \"-O0\" no-opts \"-O1\"  no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*m8,\\s*t[au],\\s*m[au]} 3 { target { no-opts \"-O0\" no-opts \"-O1\"  no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */"}, {"sha": "8547d4a35a7581e1dcce65c9cc62fe9cac1482d1", "filename": "gcc/testsuite/gcc.target/riscv/rvv/vsetvl/vlmax_bb_prop-26.c", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ee85b3255d638fd77ee3fe17a4e146c81545efb/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_bb_prop-26.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ee85b3255d638fd77ee3fe17a4e146c81545efb/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_bb_prop-26.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_bb_prop-26.c?ref=6ee85b3255d638fd77ee3fe17a4e146c81545efb", "patch": "@@ -483,10 +483,10 @@ void f6 (int8_t * restrict in, int8_t * restrict out, int n)\n   }\n }\n \n-/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]} 3 { target { no-opts \"-O0\" no-opts \"-O1\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n-/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf4,\\s*t[au],\\s*m[au]} 3 { target { no-opts \"-O0\" no-opts \"-O1\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n-/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf2,\\s*t[au],\\s*m[au]} 3 { target { no-opts \"-O0\" no-opts \"-O1\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n-/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e16,\\s*mf4,\\s*t[au],\\s*m[au]} 3 { target { no-opts \"-O0\" no-opts \"-O1\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n-/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e16,\\s*mf2,\\s*t[au],\\s*m[au]} 3 { target { no-opts \"-O0\" no-opts \"-O1\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n-/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]} 3 { target { no-opts \"-O0\" no-opts \"-O1\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]} 3 { target { no-opts \"-O0\" no-opts \"-O1\"  no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf4,\\s*t[au],\\s*m[au]} 3 { target { no-opts \"-O0\" no-opts \"-O1\"  no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf2,\\s*t[au],\\s*m[au]} 3 { target { no-opts \"-O0\" no-opts \"-O1\"  no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e16,\\s*mf4,\\s*t[au],\\s*m[au]} 3 { target { no-opts \"-O0\" no-opts \"-O1\"  no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e16,\\s*mf2,\\s*t[au],\\s*m[au]} 3 { target { no-opts \"-O0\" no-opts \"-O1\"  no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]} 3 { target { no-opts \"-O0\" no-opts \"-O1\"  no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n "}, {"sha": "5240fe33c2f8bf218e3b57efa6a1d40b28142b6a", "filename": "gcc/testsuite/gcc.target/riscv/rvv/vsetvl/vlmax_bb_prop-27.c", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ee85b3255d638fd77ee3fe17a4e146c81545efb/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_bb_prop-27.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ee85b3255d638fd77ee3fe17a4e146c81545efb/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_bb_prop-27.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_bb_prop-27.c?ref=6ee85b3255d638fd77ee3fe17a4e146c81545efb", "patch": "@@ -483,9 +483,9 @@ void f6 (int8_t * restrict in, int8_t * restrict out, int n)\n   }\n }\n \n-/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]} 3 { target { no-opts \"-O0\" no-opts \"-O1\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n-/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf4,\\s*t[au],\\s*m[au]} 3 { target { no-opts \"-O0\" no-opts \"-O1\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n-/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf2,\\s*t[au],\\s*m[au]} 3 { target { no-opts \"-O0\" no-opts \"-O1\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n-/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e16,\\s*mf4,\\s*t[au],\\s*m[au]} 3 { target { no-opts \"-O0\" no-opts \"-O1\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n-/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e16,\\s*mf2,\\s*t[au],\\s*m[au]} 3 { target { no-opts \"-O0\" no-opts \"-O1\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n-/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]} 3 { target { no-opts \"-O0\" no-opts \"-O1\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]} 3 { target { no-opts \"-O0\" no-opts \"-O1\"  no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf4,\\s*t[au],\\s*m[au]} 3 { target { no-opts \"-O0\" no-opts \"-O1\"  no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf2,\\s*t[au],\\s*m[au]} 3 { target { no-opts \"-O0\" no-opts \"-O1\"  no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e16,\\s*mf4,\\s*t[au],\\s*m[au]} 3 { target { no-opts \"-O0\" no-opts \"-O1\"  no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e16,\\s*mf2,\\s*t[au],\\s*m[au]} 3 { target { no-opts \"-O0\" no-opts \"-O1\"  no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]} 3 { target { no-opts \"-O0\" no-opts \"-O1\"  no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */"}, {"sha": "f0e1ada628666f6c9fa9c8138b02a34502065956", "filename": "gcc/testsuite/gcc.target/riscv/rvv/vsetvl/vlmax_bb_prop-28.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ee85b3255d638fd77ee3fe17a4e146c81545efb/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_bb_prop-28.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ee85b3255d638fd77ee3fe17a4e146c81545efb/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_bb_prop-28.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_bb_prop-28.c?ref=6ee85b3255d638fd77ee3fe17a4e146c81545efb", "patch": "@@ -83,4 +83,4 @@ void f6 (int8_t * restrict in, int8_t * restrict out, int n)\n   }\n }\n \n-/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]} 3 { target { no-opts \"-O0\" no-opts \"-O1\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]} 3 { target { no-opts \"-O0\" no-opts \"-O1\"  no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */"}, {"sha": "ca57ecad7cfd95f9d61a93753ff7fddef203cf73", "filename": "gcc/testsuite/gcc.target/riscv/rvv/vsetvl/vlmax_bb_prop-3.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ee85b3255d638fd77ee3fe17a4e146c81545efb/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_bb_prop-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ee85b3255d638fd77ee3fe17a4e146c81545efb/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_bb_prop-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_bb_prop-3.c?ref=6ee85b3255d638fd77ee3fe17a4e146c81545efb", "patch": "@@ -31,5 +31,5 @@ void f (int8_t * restrict in, int8_t * restrict out, int n)\n   }\n }\n \n-/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]} 3 { target { no-opts \"-O0\" no-opts \"-O1\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n-/* { dg-final { scan-assembler-times {add\\ta[0-7],a[0-7],a[0-7]\\s+\\.L[0-9][0-9]\\:\\s+vle32\\.v\\s+(?:v[0-9]|v[1-2][0-9]|v3[0-1]),0\\s*\\([a-x0-9]+\\)} 1 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]} 3 { target { no-opts \"-O0\" no-opts \"-O1\"  no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {add\\ta[0-7],a[0-7],a[0-7]\\s+\\.L[0-9][0-9]\\:\\s+vle32\\.v\\s+(?:v[0-9]|v[1-2][0-9]|v3[0-1]),0\\s*\\([a-x0-9]+\\)} 1 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */"}, {"sha": "fc6161edbbafa6a889ddd7cec6da4c08085856d1", "filename": "gcc/testsuite/gcc.target/riscv/rvv/vsetvl/vlmax_bb_prop-4.c", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ee85b3255d638fd77ee3fe17a4e146c81545efb/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_bb_prop-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ee85b3255d638fd77ee3fe17a4e146c81545efb/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_bb_prop-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_bb_prop-4.c?ref=6ee85b3255d638fd77ee3fe17a4e146c81545efb", "patch": "@@ -199,12 +199,12 @@ void f7 (int8_t * restrict in, int8_t * restrict out, int n)\n   }\n }\n \n-/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]} 3 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" no-opts \"-O2\" } } } } */\n-/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf4,\\s*t[au],\\s*m[au]} 3 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" no-opts \"-O2\" } } } } */\n-/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf2,\\s*t[au],\\s*m[au]} 3 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" no-opts \"-O2\" } } } } */\n-/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*m1,\\s*t[au],\\s*m[au]} 3 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" no-opts \"-O2\" } } } } */\n-/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*m2,\\s*t[au],\\s*m[au]} 3 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" no-opts \"-O2\" } } } } */\n-/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*m4,\\s*t[au],\\s*m[au]} 3 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" no-opts \"-O2\" } } } } */\n-/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*m8,\\s*t[au],\\s*m[au]} 3 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" no-opts \"-O2\" } } } } */\n-/* { dg-final { scan-assembler-times {add\\ta[0-7],a[0-7],a[0-7]\\s+\\.L[0-9][0-9]\\:\\s+vlm\\.v\\s+(?:v[0-9]|v[1-2][0-9]|v3[0-1]),0\\s*\\([a-x0-9]+\\)} 6 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" no-opts \"-O2\" } } } } */\n-/* { dg-final { scan-assembler-times {add\\ta[0-7],a[0-7],a[0-7]\\s+\\.L[0-9][0-9][0-9]\\:\\s+vlm\\.v\\s+(?:v[0-9]|v[1-2][0-9]|v3[0-1]),0\\s*\\([a-x0-9]+\\)} 1 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" no-opts \"-O2\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]} 3 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-funroll-loops\" no-opts \"-g\" no-opts \"-O2\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf4,\\s*t[au],\\s*m[au]} 3 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-funroll-loops\" no-opts \"-g\" no-opts \"-O2\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf2,\\s*t[au],\\s*m[au]} 3 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-funroll-loops\" no-opts \"-g\" no-opts \"-O2\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*m1,\\s*t[au],\\s*m[au]} 3 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-funroll-loops\" no-opts \"-g\" no-opts \"-O2\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*m2,\\s*t[au],\\s*m[au]} 3 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-funroll-loops\" no-opts \"-g\" no-opts \"-O2\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*m4,\\s*t[au],\\s*m[au]} 3 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-funroll-loops\" no-opts \"-g\" no-opts \"-O2\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*m8,\\s*t[au],\\s*m[au]} 3 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-funroll-loops\" no-opts \"-g\" no-opts \"-O2\" } } } } */\n+/* { dg-final { scan-assembler-times {add\\ta[0-7],a[0-7],a[0-7]\\s+\\.L[0-9][0-9]\\:\\s+vlm\\.v\\s+(?:v[0-9]|v[1-2][0-9]|v3[0-1]),0\\s*\\([a-x0-9]+\\)} 6 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-funroll-loops\" no-opts \"-g\" no-opts \"-O2\" } } } } */\n+/* { dg-final { scan-assembler-times {add\\ta[0-7],a[0-7],a[0-7]\\s+\\.L[0-9][0-9][0-9]\\:\\s+vlm\\.v\\s+(?:v[0-9]|v[1-2][0-9]|v3[0-1]),0\\s*\\([a-x0-9]+\\)} 1 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-funroll-loops\" no-opts \"-g\" no-opts \"-O2\" } } } } */"}, {"sha": "de84f9ea32bdfb86d10035531a10a8c42eff953b", "filename": "gcc/testsuite/gcc.target/riscv/rvv/vsetvl/vlmax_bb_prop-5.c", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ee85b3255d638fd77ee3fe17a4e146c81545efb/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_bb_prop-5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ee85b3255d638fd77ee3fe17a4e146c81545efb/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_bb_prop-5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_bb_prop-5.c?ref=6ee85b3255d638fd77ee3fe17a4e146c81545efb", "patch": "@@ -153,15 +153,15 @@ void f6 (int8_t * restrict in, int8_t * restrict out, int n)\n   }\n }\n \n-/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]} 3 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" no-opts \"-O1\" } } } } */\n-/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf4,\\s*t[au],\\s*m[au]} 3 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" no-opts \"-O1\" } } } } */\n-/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf2,\\s*t[au],\\s*m[au]} 3 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" no-opts \"-O1\" } } } } */\n-/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]\\s+\\.L[0-9]+\\:} 1 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" no-opts \"-O1\" } } } } */\n-/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf4,\\s*t[au],\\s*m[au]\\s+\\.L[0-9]+\\:} 1 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" no-opts \"-O1\" } } } } */\n-/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf2,\\s*t[au],\\s*m[au]\\s+\\.L[0-9]+\\:} 1 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" no-opts \"-O1\" } } } } */\n-/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e16,\\s*mf4,\\s*t[au],\\s*m[au]} 3 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" no-opts \"-O1\" } } } } */\n-/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e16,\\s*mf2,\\s*t[au],\\s*m[au]} 3 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" no-opts \"-O1\" } } } } */\n-/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e16,\\s*mf4,\\s*t[au],\\s*m[au]\\s+\\.L[0-9]+\\:} 1 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" no-opts \"-O1\" } } } } */\n-/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e16,\\s*mf2,\\s*t[au],\\s*m[au]\\s+\\.L[0-9]+\\:} 1 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" no-opts \"-O1\" } } } } */\n-/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]} 3 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" no-opts \"-O1\" } } } } */\n-/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]\\s+\\.L[0-9]+\\:} 1 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" no-opts \"-O1\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]} 3 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-funroll-loops\" no-opts \"-g\" no-opts \"-O1\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf4,\\s*t[au],\\s*m[au]} 3 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-funroll-loops\" no-opts \"-g\" no-opts \"-O1\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf2,\\s*t[au],\\s*m[au]} 3 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-funroll-loops\" no-opts \"-g\" no-opts \"-O1\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]\\s+\\.L[0-9]+\\:} 1 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-funroll-loops\" no-opts \"-g\" no-opts \"-O1\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf4,\\s*t[au],\\s*m[au]\\s+\\.L[0-9]+\\:} 1 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-funroll-loops\" no-opts \"-g\" no-opts \"-O1\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf2,\\s*t[au],\\s*m[au]\\s+\\.L[0-9]+\\:} 1 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-funroll-loops\" no-opts \"-g\" no-opts \"-O1\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e16,\\s*mf4,\\s*t[au],\\s*m[au]} 3 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-funroll-loops\" no-opts \"-g\" no-opts \"-O1\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e16,\\s*mf2,\\s*t[au],\\s*m[au]} 3 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-funroll-loops\" no-opts \"-g\" no-opts \"-O1\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e16,\\s*mf4,\\s*t[au],\\s*m[au]\\s+\\.L[0-9]+\\:} 1 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-funroll-loops\" no-opts \"-g\" no-opts \"-O1\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e16,\\s*mf2,\\s*t[au],\\s*m[au]\\s+\\.L[0-9]+\\:} 1 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-funroll-loops\" no-opts \"-g\" no-opts \"-O1\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]} 3 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-funroll-loops\" no-opts \"-g\" no-opts \"-O1\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]\\s+\\.L[0-9]+\\:} 1 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-funroll-loops\" no-opts \"-g\" no-opts \"-O1\" } } } } */"}, {"sha": "9054d86122d0d1e1f4ebb7541772cb4c1a28b04e", "filename": "gcc/testsuite/gcc.target/riscv/rvv/vsetvl/vlmax_bb_prop-6.c", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ee85b3255d638fd77ee3fe17a4e146c81545efb/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_bb_prop-6.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ee85b3255d638fd77ee3fe17a4e146c81545efb/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_bb_prop-6.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_bb_prop-6.c?ref=6ee85b3255d638fd77ee3fe17a4e146c81545efb", "patch": "@@ -153,15 +153,15 @@ void f6 (int8_t * restrict in, int8_t * restrict out, int n)\n   }\n }\n \n-/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]} 3 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" no-opts \"-O1\" } } } } */\n-/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf4,\\s*t[au],\\s*m[au]} 3 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" no-opts \"-O1\" } } } } */\n-/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf2,\\s*t[au],\\s*m[au]} 3 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" no-opts \"-O1\" } } } } */\n-/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]\\s+\\.L[0-9]+\\:} 1 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" no-opts \"-O1\" } } } } */\n-/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf4,\\s*t[au],\\s*m[au]\\s+\\.L[0-9]+\\:} 1 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" no-opts \"-O1\" } } } } */\n-/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf2,\\s*t[au],\\s*m[au]\\s+\\.L[0-9]+\\:} 1 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" no-opts \"-O1\" } } } } */\n-/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e16,\\s*mf4,\\s*t[au],\\s*m[au]} 3 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" no-opts \"-O1\" } } } } */\n-/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e16,\\s*mf2,\\s*t[au],\\s*m[au]} 3 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" no-opts \"-O1\" } } } } */\n-/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e16,\\s*mf4,\\s*t[au],\\s*m[au]\\s+\\.L[0-9]+\\:} 1 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" no-opts \"-O1\" } } } } */\n-/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e16,\\s*mf2,\\s*t[au],\\s*m[au]\\s+\\.L[0-9]+\\:} 1 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" no-opts \"-O1\" } } } } */\n-/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]} 3 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" no-opts \"-O1\" } } } } */\n-/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]\\s+\\.L[0-9]+\\:} 1 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" no-opts \"-O1\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]} 3 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-funroll-loops\" no-opts \"-g\" no-opts \"-O1\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf4,\\s*t[au],\\s*m[au]} 3 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-funroll-loops\" no-opts \"-g\" no-opts \"-O1\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf2,\\s*t[au],\\s*m[au]} 3 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-funroll-loops\" no-opts \"-g\" no-opts \"-O1\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]\\s+\\.L[0-9]+\\:} 1 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-funroll-loops\" no-opts \"-g\" no-opts \"-O1\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf4,\\s*t[au],\\s*m[au]\\s+\\.L[0-9]+\\:} 1 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-funroll-loops\" no-opts \"-g\" no-opts \"-O1\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf2,\\s*t[au],\\s*m[au]\\s+\\.L[0-9]+\\:} 1 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-funroll-loops\" no-opts \"-g\" no-opts \"-O1\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e16,\\s*mf4,\\s*t[au],\\s*m[au]} 3 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-funroll-loops\" no-opts \"-g\" no-opts \"-O1\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e16,\\s*mf2,\\s*t[au],\\s*m[au]} 3 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-funroll-loops\" no-opts \"-g\" no-opts \"-O1\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e16,\\s*mf4,\\s*t[au],\\s*m[au]\\s+\\.L[0-9]+\\:} 1 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-funroll-loops\" no-opts \"-g\" no-opts \"-O1\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e16,\\s*mf2,\\s*t[au],\\s*m[au]\\s+\\.L[0-9]+\\:} 1 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-funroll-loops\" no-opts \"-g\" no-opts \"-O1\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]} 3 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-funroll-loops\" no-opts \"-g\" no-opts \"-O1\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]\\s+\\.L[0-9]+\\:} 1 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-funroll-loops\" no-opts \"-g\" no-opts \"-O1\" } } } } */"}, {"sha": "8265b5ed2e167f999da8bf81d49c1130146c98fd", "filename": "gcc/testsuite/gcc.target/riscv/rvv/vsetvl/vlmax_bb_prop-7.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ee85b3255d638fd77ee3fe17a4e146c81545efb/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_bb_prop-7.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ee85b3255d638fd77ee3fe17a4e146c81545efb/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_bb_prop-7.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_bb_prop-7.c?ref=6ee85b3255d638fd77ee3fe17a4e146c81545efb", "patch": "@@ -28,5 +28,5 @@ void f (int8_t * restrict in, int8_t * restrict out, int n)\n   }\n }\n \n-/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]} 3 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" no-opts \"-O1\" } } } } */\n-/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]\\s+\\.L[0-9]+\\:} 1 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" no-opts \"-O1\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]} 3 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-funroll-loops\" no-opts \"-g\" no-opts \"-O1\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]\\s+\\.L[0-9]+\\:} 1 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-funroll-loops\" no-opts \"-g\" no-opts \"-O1\" } } } } */"}, {"sha": "516153094e8e8455250155cdbbabcc702feaa841", "filename": "gcc/testsuite/gcc.target/riscv/rvv/vsetvl/vlmax_bb_prop-8.c", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ee85b3255d638fd77ee3fe17a4e146c81545efb/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_bb_prop-8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ee85b3255d638fd77ee3fe17a4e146c81545efb/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_bb_prop-8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_bb_prop-8.c?ref=6ee85b3255d638fd77ee3fe17a4e146c81545efb", "patch": "@@ -178,17 +178,17 @@ void f7 (int8_t * restrict in, int8_t * restrict out, int n)\n   }\n }\n \n-/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]} 3 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" no-opts \"-O1\" } } } } */\n-/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf4,\\s*t[au],\\s*m[au]} 3 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" no-opts \"-O1\" } } } } */\n-/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf2,\\s*t[au],\\s*m[au]} 3 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" no-opts \"-O1\" } } } } */\n-/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*m1,\\s*t[au],\\s*m[au]} 3 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" no-opts \"-O1\" } } } } */\n-/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*m2,\\s*t[au],\\s*m[au]} 3 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" no-opts \"-O1\" } } } } */\n-/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*m4,\\s*t[au],\\s*m[au]} 3 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" no-opts \"-O1\" } } } } */\n-/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*m8,\\s*t[au],\\s*m[au]} 3 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" no-opts \"-O1\" } } } } */\n-/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]\\s+\\.L[0-9]+\\:} 1 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" no-opts \"-O1\" } } } } */\n-/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf4,\\s*t[au],\\s*m[au]\\s+\\.L[0-9]+\\:} 1 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" no-opts \"-O1\" } } } } */\n-/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf2,\\s*t[au],\\s*m[au]\\s+\\.L[0-9]+\\:} 1 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" no-opts \"-O1\" } } } } */\n-/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*m1,\\s*t[au],\\s*m[au]\\s+\\.L[0-9]+\\:} 1 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" no-opts \"-O1\" } } } } */\n-/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*m2,\\s*t[au],\\s*m[au]\\s+\\.L[0-9]+\\:} 1 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" no-opts \"-O1\" } } } } */\n-/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*m4,\\s*t[au],\\s*m[au]\\s+\\.L[0-9]+\\:} 1 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" no-opts \"-O1\" } } } } */\n-/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*m8,\\s*t[au],\\s*m[au]\\s+\\.L[0-9]+\\:} 1 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" no-opts \"-O1\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]} 3 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-funroll-loops\" no-opts \"-g\" no-opts \"-O1\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf4,\\s*t[au],\\s*m[au]} 3 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-funroll-loops\" no-opts \"-g\" no-opts \"-O1\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf2,\\s*t[au],\\s*m[au]} 3 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-funroll-loops\" no-opts \"-g\" no-opts \"-O1\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*m1,\\s*t[au],\\s*m[au]} 3 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-funroll-loops\" no-opts \"-g\" no-opts \"-O1\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*m2,\\s*t[au],\\s*m[au]} 3 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-funroll-loops\" no-opts \"-g\" no-opts \"-O1\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*m4,\\s*t[au],\\s*m[au]} 3 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-funroll-loops\" no-opts \"-g\" no-opts \"-O1\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*m8,\\s*t[au],\\s*m[au]} 3 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-funroll-loops\" no-opts \"-g\" no-opts \"-O1\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]\\s+\\.L[0-9]+\\:} 1 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-funroll-loops\" no-opts \"-g\" no-opts \"-O1\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf4,\\s*t[au],\\s*m[au]\\s+\\.L[0-9]+\\:} 1 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-funroll-loops\" no-opts \"-g\" no-opts \"-O1\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf2,\\s*t[au],\\s*m[au]\\s+\\.L[0-9]+\\:} 1 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-funroll-loops\" no-opts \"-g\" no-opts \"-O1\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*m1,\\s*t[au],\\s*m[au]\\s+\\.L[0-9]+\\:} 1 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-funroll-loops\" no-opts \"-g\" no-opts \"-O1\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*m2,\\s*t[au],\\s*m[au]\\s+\\.L[0-9]+\\:} 1 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-funroll-loops\" no-opts \"-g\" no-opts \"-O1\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*m4,\\s*t[au],\\s*m[au]\\s+\\.L[0-9]+\\:} 1 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-funroll-loops\" no-opts \"-g\" no-opts \"-O1\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*m8,\\s*t[au],\\s*m[au]\\s+\\.L[0-9]+\\:} 1 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-funroll-loops\" no-opts \"-g\" no-opts \"-O1\" } } } } */"}, {"sha": "a01b39184047fe3d3816292decbfce64f4196dbd", "filename": "gcc/testsuite/gcc.target/riscv/rvv/vsetvl/vlmax_bb_prop-9.c", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ee85b3255d638fd77ee3fe17a4e146c81545efb/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_bb_prop-9.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ee85b3255d638fd77ee3fe17a4e146c81545efb/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_bb_prop-9.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_bb_prop-9.c?ref=6ee85b3255d638fd77ee3fe17a4e146c81545efb", "patch": "@@ -219,12 +219,12 @@ void f6 (int8_t * restrict in, int8_t * restrict out, int n)\n   }\n }\n \n-/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]} 3 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" no-opts \"-O1\" } } } } */\n-/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf4,\\s*t[au],\\s*m[au]} 3 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" no-opts \"-O1\" } } } } */\n-/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf2,\\s*t[au],\\s*m[au]} 3 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" no-opts \"-O1\" } } } } */\n-/* { dg-final { scan-assembler-times {add\\ta[0-7],a[0-7],a[0-7]\\s+\\.L[0-9][0-9]\\:\\s+vle8\\.v\\s+(?:v[0-9]|v[1-2][0-9]|v3[0-1]),0\\s*\\([a-x0-9]+\\)} 3 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" no-opts \"-O1\" } } } } */\n-/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e16,\\s*mf4,\\s*t[au],\\s*m[au]} 3 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" no-opts \"-O1\" } } } } */\n-/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e16,\\s*mf2,\\s*t[au],\\s*m[au]} 3 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" no-opts \"-O1\" } } } } */\n-/* { dg-final { scan-assembler-times {add\\ta[0-7],a[0-7],a[0-7]\\s+\\.L[0-9][0-9]\\:\\s+vle16\\.v\\s+(?:v[0-9]|v[1-2][0-9]|v3[0-1]),0\\s*\\([a-x0-9]+\\)} 2 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" no-opts \"-O1\" } } } } */\n-/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]} 3 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" no-opts \"-O1\" } } } } */\n-/* { dg-final { scan-assembler-times {add\\ta[0-7],a[0-7],a[0-7]\\s+\\.L[0-9][0-9][0-9]\\:\\s+vle32\\.v\\s+(?:v[0-9]|v[1-2][0-9]|v3[0-1]),0\\s*\\([a-x0-9]+\\)} 1 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" no-opts \"-O1\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]} 3 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-funroll-loops\" no-opts \"-g\" no-opts \"-O1\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf4,\\s*t[au],\\s*m[au]} 3 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-funroll-loops\" no-opts \"-g\" no-opts \"-O1\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf2,\\s*t[au],\\s*m[au]} 3 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-funroll-loops\" no-opts \"-g\" no-opts \"-O1\" } } } } */\n+/* { dg-final { scan-assembler-times {add\\ta[0-7],a[0-7],a[0-7]\\s+\\.L[0-9][0-9]\\:\\s+vle8\\.v\\s+(?:v[0-9]|v[1-2][0-9]|v3[0-1]),0\\s*\\([a-x0-9]+\\)} 3 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-funroll-loops\" no-opts \"-g\" no-opts \"-O1\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e16,\\s*mf4,\\s*t[au],\\s*m[au]} 3 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-funroll-loops\" no-opts \"-g\" no-opts \"-O1\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e16,\\s*mf2,\\s*t[au],\\s*m[au]} 3 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-funroll-loops\" no-opts \"-g\" no-opts \"-O1\" } } } } */\n+/* { dg-final { scan-assembler-times {add\\ta[0-7],a[0-7],a[0-7]\\s+\\.L[0-9][0-9]\\:\\s+vle16\\.v\\s+(?:v[0-9]|v[1-2][0-9]|v3[0-1]),0\\s*\\([a-x0-9]+\\)} 2 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-funroll-loops\" no-opts \"-g\" no-opts \"-O1\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]} 3 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-funroll-loops\" no-opts \"-g\" no-opts \"-O1\" } } } } */\n+/* { dg-final { scan-assembler-times {add\\ta[0-7],a[0-7],a[0-7]\\s+\\.L[0-9][0-9][0-9]\\:\\s+vle32\\.v\\s+(?:v[0-9]|v[1-2][0-9]|v3[0-1]),0\\s*\\([a-x0-9]+\\)} 1 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-funroll-loops\" no-opts \"-g\" no-opts \"-O1\" } } } } */"}, {"sha": "3441b1f06b762754eabcd063b5e71afd42ffc8d0", "filename": "gcc/testsuite/gcc.target/riscv/rvv/vsetvl/vlmax_call-1.c", "status": "modified", "additions": 15, "deletions": 15, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ee85b3255d638fd77ee3fe17a4e146c81545efb/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_call-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ee85b3255d638fd77ee3fe17a4e146c81545efb/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_call-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_call-1.c?ref=6ee85b3255d638fd77ee3fe17a4e146c81545efb", "patch": "@@ -222,18 +222,18 @@ int f7 (int8_t * restrict in, int8_t * restrict out, int n)\n \n }\n \n-/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]} 5 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n-/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]\\s+\\.L[0-9]\\:\\s+vlm\\.v\\s+(?:v[0-9]|v[1-2][0-9]|v3[0-1]),0\\s*\\([a-x0-9]+\\)} 5 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n-/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf4,\\s*t[au],\\s*m[au]} 5 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n-/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf4,\\s*t[au],\\s*m[au]\\s+\\.L[0-9][0-9]\\:\\s+vlm\\.v\\s+(?:v[0-9]|v[1-2][0-9]|v3[0-1]),0\\s*\\([a-x0-9]+\\)} 5 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n-/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf2,\\s*t[au],\\s*m[au]} 5 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n-/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf2,\\s*t[au],\\s*m[au]\\s+\\.L[0-9][0-9]\\:\\s+vlm\\.v\\s+(?:v[0-9]|v[1-2][0-9]|v3[0-1]),0\\s*\\([a-x0-9]+\\)} 5 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n-/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*m1,\\s*t[au],\\s*m[au]} 5 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n-/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*m1,\\s*t[au],\\s*m[au]\\s+\\.L[0-9][0-9]\\:\\s+vlm\\.v\\s+(?:v[0-9]|v[1-2][0-9]|v3[0-1]),0\\s*\\([a-x0-9]+\\)} 5 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n-/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*m2,\\s*t[au],\\s*m[au]} 5 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n-/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*m2,\\s*t[au],\\s*m[au]\\s+\\.L[0-9][0-9]\\:\\s+vlm\\.v\\s+(?:v[0-9]|v[1-2][0-9]|v3[0-1]),0\\s*\\([a-x0-9]+\\)} 5 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n-/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*m4,\\s*t[au],\\s*m[au]} 5 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n-/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*m4,\\s*t[au],\\s*m[au]\\s+\\.L[0-9][0-9]\\:\\s+vlm\\.v\\s+(?:v[0-9]|v[1-2][0-9]|v3[0-1]),0\\s*\\([a-x0-9]+\\)} 5 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n-/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*m8,\\s*t[au],\\s*m[au]} 5 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n-/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*m8,\\s*t[au],\\s*m[au]\\s+\\.L[0-9][0-9]\\:\\s+vlm\\.v\\s+(?:v[0-9]|v[1-2][0-9]|v3[0-1]),0\\s*\\([a-x0-9]+\\)} 1 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n-/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*m8,\\s*t[au],\\s*m[au]\\s+\\.L[0-9][0-9][0-9]\\:\\s+vlm\\.v\\s+(?:v[0-9]|v[1-2][0-9]|v3[0-1]),0\\s*\\([a-x0-9]+\\)} 4 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]} 5 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]\\s+\\.L[0-9]\\:\\s+vlm\\.v\\s+(?:v[0-9]|v[1-2][0-9]|v3[0-1]),0\\s*\\([a-x0-9]+\\)} 5 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf4,\\s*t[au],\\s*m[au]} 5 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf4,\\s*t[au],\\s*m[au]\\s+\\.L[0-9][0-9]\\:\\s+vlm\\.v\\s+(?:v[0-9]|v[1-2][0-9]|v3[0-1]),0\\s*\\([a-x0-9]+\\)} 5 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf2,\\s*t[au],\\s*m[au]} 5 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf2,\\s*t[au],\\s*m[au]\\s+\\.L[0-9][0-9]\\:\\s+vlm\\.v\\s+(?:v[0-9]|v[1-2][0-9]|v3[0-1]),0\\s*\\([a-x0-9]+\\)} 5 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*m1,\\s*t[au],\\s*m[au]} 5 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*m1,\\s*t[au],\\s*m[au]\\s+\\.L[0-9][0-9]\\:\\s+vlm\\.v\\s+(?:v[0-9]|v[1-2][0-9]|v3[0-1]),0\\s*\\([a-x0-9]+\\)} 5 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*m2,\\s*t[au],\\s*m[au]} 5 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*m2,\\s*t[au],\\s*m[au]\\s+\\.L[0-9][0-9]\\:\\s+vlm\\.v\\s+(?:v[0-9]|v[1-2][0-9]|v3[0-1]),0\\s*\\([a-x0-9]+\\)} 5 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*m4,\\s*t[au],\\s*m[au]} 5 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*m4,\\s*t[au],\\s*m[au]\\s+\\.L[0-9][0-9]\\:\\s+vlm\\.v\\s+(?:v[0-9]|v[1-2][0-9]|v3[0-1]),0\\s*\\([a-x0-9]+\\)} 5 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*m8,\\s*t[au],\\s*m[au]} 5 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*m8,\\s*t[au],\\s*m[au]\\s+\\.L[0-9][0-9]\\:\\s+vlm\\.v\\s+(?:v[0-9]|v[1-2][0-9]|v3[0-1]),0\\s*\\([a-x0-9]+\\)} 1 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*m8,\\s*t[au],\\s*m[au]\\s+\\.L[0-9][0-9][0-9]\\:\\s+vlm\\.v\\s+(?:v[0-9]|v[1-2][0-9]|v3[0-1]),0\\s*\\([a-x0-9]+\\)} 4 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */"}, {"sha": "da560972a0e6e2960d853f15ed76a3a04ff24425", "filename": "gcc/testsuite/gcc.target/riscv/rvv/vsetvl/vlmax_call-2.c", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ee85b3255d638fd77ee3fe17a4e146c81545efb/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_call-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ee85b3255d638fd77ee3fe17a4e146c81545efb/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_call-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_call-2.c?ref=6ee85b3255d638fd77ee3fe17a4e146c81545efb", "patch": "@@ -191,17 +191,17 @@ void f6 (int8_t * restrict in, int8_t * restrict out, int n)\n \n }\n \n-/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]} 5 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n-/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]\\s+\\.L[0-9]\\:\\s+vle8\\.v\\s+(?:v[0-9]|v[1-2][0-9]|v3[0-1]),0\\s*\\([a-x0-9]+\\)} 5 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n-/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf4,\\s*t[au],\\s*m[au]} 5 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n-/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf4,\\s*t[au],\\s*m[au]\\s+\\.L[0-9][0-9]\\:\\s+vle8\\.v\\s+(?:v[0-9]|v[1-2][0-9]|v3[0-1]),0\\s*\\([a-x0-9]+\\)} 5 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n-/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf2,\\s*t[au],\\s*m[au]} 5 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n-/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf2,\\s*t[au],\\s*m[au]\\s+\\.L[0-9][0-9]\\:\\s+vle8\\.v\\s+(?:v[0-9]|v[1-2][0-9]|v3[0-1]),0\\s*\\([a-x0-9]+\\)} 5 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n-\n-/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e16,\\s*mf4,\\s*t[au],\\s*m[au]} 5 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n-/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e16,\\s*mf4,\\s*t[au],\\s*m[au]\\s+\\.L[0-9][0-9]\\:\\s+vle16\\.v\\s+(?:v[0-9]|v[1-2][0-9]|v3[0-1]),0\\s*\\([a-x0-9]+\\)} 5 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n-/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e16,\\s*mf2,\\s*t[au],\\s*m[au]} 5 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n-/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e16,\\s*mf2,\\s*t[au],\\s*m[au]\\s+\\.L[0-9][0-9]\\:\\s+vle16\\.v\\s+(?:v[0-9]|v[1-2][0-9]|v3[0-1]),0\\s*\\([a-x0-9]+\\)} 5 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n-\n-/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]} 5 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n-/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]\\s+\\.L[0-9][0-9]\\:\\s+vle32\\.v\\s+(?:v[0-9]|v[1-2][0-9]|v3[0-1]),0\\s*\\([a-x0-9]+\\)} 5 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]} 5 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]\\s+\\.L[0-9]\\:\\s+vle8\\.v\\s+(?:v[0-9]|v[1-2][0-9]|v3[0-1]),0\\s*\\([a-x0-9]+\\)} 5 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf4,\\s*t[au],\\s*m[au]} 5 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf4,\\s*t[au],\\s*m[au]\\s+\\.L[0-9][0-9]\\:\\s+vle8\\.v\\s+(?:v[0-9]|v[1-2][0-9]|v3[0-1]),0\\s*\\([a-x0-9]+\\)} 5 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf2,\\s*t[au],\\s*m[au]} 5 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf2,\\s*t[au],\\s*m[au]\\s+\\.L[0-9][0-9]\\:\\s+vle8\\.v\\s+(?:v[0-9]|v[1-2][0-9]|v3[0-1]),0\\s*\\([a-x0-9]+\\)} 5 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e16,\\s*mf4,\\s*t[au],\\s*m[au]} 5 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e16,\\s*mf4,\\s*t[au],\\s*m[au]\\s+\\.L[0-9][0-9]\\:\\s+vle16\\.v\\s+(?:v[0-9]|v[1-2][0-9]|v3[0-1]),0\\s*\\([a-x0-9]+\\)} 5 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e16,\\s*mf2,\\s*t[au],\\s*m[au]} 5 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e16,\\s*mf2,\\s*t[au],\\s*m[au]\\s+\\.L[0-9][0-9]\\:\\s+vle16\\.v\\s+(?:v[0-9]|v[1-2][0-9]|v3[0-1]),0\\s*\\([a-x0-9]+\\)} 5 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]} 5 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]\\s+\\.L[0-9][0-9]\\:\\s+vle32\\.v\\s+(?:v[0-9]|v[1-2][0-9]|v3[0-1]),0\\s*\\([a-x0-9]+\\)} 5 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */"}, {"sha": "748f54e391c30dfa448dce9317f76131aa53ecac", "filename": "gcc/testsuite/gcc.target/riscv/rvv/vsetvl/vlmax_call-3.c", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ee85b3255d638fd77ee3fe17a4e146c81545efb/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_call-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ee85b3255d638fd77ee3fe17a4e146c81545efb/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_call-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_call-3.c?ref=6ee85b3255d638fd77ee3fe17a4e146c81545efb", "patch": "@@ -191,17 +191,17 @@ void f6 (int8_t * restrict in, int8_t * restrict out, int n)\n \n }\n \n-/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]} 5 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n-/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]\\s+\\.L[0-9]\\:\\s+vle8\\.v\\s+(?:v[0-9]|v[1-2][0-9]|v3[0-1]),0\\s*\\([a-x0-9]+\\)} 5 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n-/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf4,\\s*t[au],\\s*m[au]} 5 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n-/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf4,\\s*t[au],\\s*m[au]\\s+\\.L[0-9][0-9]\\:\\s+vle8\\.v\\s+(?:v[0-9]|v[1-2][0-9]|v3[0-1]),0\\s*\\([a-x0-9]+\\)} 5 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n-/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf2,\\s*t[au],\\s*m[au]} 5 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n-/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf2,\\s*t[au],\\s*m[au]\\s+\\.L[0-9][0-9]\\:\\s+vle8\\.v\\s+(?:v[0-9]|v[1-2][0-9]|v3[0-1]),0\\s*\\([a-x0-9]+\\)} 5 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n-\n-/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e16,\\s*mf4,\\s*t[au],\\s*m[au]} 5 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n-/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e16,\\s*mf4,\\s*t[au],\\s*m[au]\\s+\\.L[0-9][0-9]\\:\\s+vle16\\.v\\s+(?:v[0-9]|v[1-2][0-9]|v3[0-1]),0\\s*\\([a-x0-9]+\\)} 5 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n-/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e16,\\s*mf2,\\s*t[au],\\s*m[au]} 5 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n-/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e16,\\s*mf2,\\s*t[au],\\s*m[au]\\s+\\.L[0-9][0-9]\\:\\s+vle16\\.v\\s+(?:v[0-9]|v[1-2][0-9]|v3[0-1]),0\\s*\\([a-x0-9]+\\)} 5 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n-\n-/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]} 5 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n-/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]\\s+\\.L[0-9][0-9]\\:\\s+vle32\\.v\\s+(?:v[0-9]|v[1-2][0-9]|v3[0-1]),0\\s*\\([a-x0-9]+\\)} 5 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]} 5 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]\\s+\\.L[0-9]\\:\\s+vle8\\.v\\s+(?:v[0-9]|v[1-2][0-9]|v3[0-1]),0\\s*\\([a-x0-9]+\\)} 5 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf4,\\s*t[au],\\s*m[au]} 5 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf4,\\s*t[au],\\s*m[au]\\s+\\.L[0-9][0-9]\\:\\s+vle8\\.v\\s+(?:v[0-9]|v[1-2][0-9]|v3[0-1]),0\\s*\\([a-x0-9]+\\)} 5 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf2,\\s*t[au],\\s*m[au]} 5 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf2,\\s*t[au],\\s*m[au]\\s+\\.L[0-9][0-9]\\:\\s+vle8\\.v\\s+(?:v[0-9]|v[1-2][0-9]|v3[0-1]),0\\s*\\([a-x0-9]+\\)} 5 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e16,\\s*mf4,\\s*t[au],\\s*m[au]} 5 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e16,\\s*mf4,\\s*t[au],\\s*m[au]\\s+\\.L[0-9][0-9]\\:\\s+vle16\\.v\\s+(?:v[0-9]|v[1-2][0-9]|v3[0-1]),0\\s*\\([a-x0-9]+\\)} 5 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e16,\\s*mf2,\\s*t[au],\\s*m[au]} 5 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e16,\\s*mf2,\\s*t[au],\\s*m[au]\\s+\\.L[0-9][0-9]\\:\\s+vle16\\.v\\s+(?:v[0-9]|v[1-2][0-9]|v3[0-1]),0\\s*\\([a-x0-9]+\\)} 5 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]} 5 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]\\s+\\.L[0-9][0-9]\\:\\s+vle32\\.v\\s+(?:v[0-9]|v[1-2][0-9]|v3[0-1]),0\\s*\\([a-x0-9]+\\)} 5 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */"}, {"sha": "164c44a7eafea1629a557ae86d148ebb559d28d0", "filename": "gcc/testsuite/gcc.target/riscv/rvv/vsetvl/vlmax_call-4.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ee85b3255d638fd77ee3fe17a4e146c81545efb/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_call-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ee85b3255d638fd77ee3fe17a4e146c81545efb/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_call-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_call-4.c?ref=6ee85b3255d638fd77ee3fe17a4e146c81545efb", "patch": "@@ -35,5 +35,5 @@ void f6 (int8_t * restrict in, int8_t * restrict out, int n)\n   }\n }\n \n-/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]} 5 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n-/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]\\s+\\.L[0-9]\\:\\s+vle32\\.v\\s+(?:v[0-9]|v[1-2][0-9]|v3[0-1]),0\\s*\\([a-x0-9]+\\)} 5 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]} 5 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]\\s+\\.L[0-9]\\:\\s+vle32\\.v\\s+(?:v[0-9]|v[1-2][0-9]|v3[0-1]),0\\s*\\([a-x0-9]+\\)} 5 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */"}, {"sha": "6ca0d175b9a6413c96304208d44fd58771f3c4c5", "filename": "gcc/testsuite/gcc.target/riscv/rvv/vsetvl/vlmax_complex_loop-1.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ee85b3255d638fd77ee3fe17a4e146c81545efb/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_complex_loop-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ee85b3255d638fd77ee3fe17a4e146c81545efb/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_complex_loop-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_complex_loop-1.c?ref=6ee85b3255d638fd77ee3fe17a4e146c81545efb", "patch": "@@ -49,4 +49,4 @@ void f (int32_t * restrict in, int32_t * restrict out, size_t n, size_t m, int c\n     }\n }\n \n-/* { dg-final { scan-assembler-times {vsetvli} 1 { target { no-opts \"-O0\"  no-opts \"-O1\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli} 1 { target { no-opts \"-O0\"  no-opts \"-O1\"  no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */"}, {"sha": "2c436d8ce0cdde5dc5e7e3a5e3dd4584d70c8ee4", "filename": "gcc/testsuite/gcc.target/riscv/rvv/vsetvl/vlmax_complex_loop-2.c", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ee85b3255d638fd77ee3fe17a4e146c81545efb/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_complex_loop-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ee85b3255d638fd77ee3fe17a4e146c81545efb/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_complex_loop-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_complex_loop-2.c?ref=6ee85b3255d638fd77ee3fe17a4e146c81545efb", "patch": "@@ -49,8 +49,8 @@ void f (int32_t * restrict in, int32_t * restrict out, size_t n, size_t m, int c\n     }\n }\n \n-/* { dg-final { scan-assembler-times {vsetvli} 5 { target { no-opts \"-O0\"  no-opts \"-O1\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n-/* { dg-final { scan-assembler-not {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]} { target { no-opts \"-O0\" no-opts \"-O1\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n-/* { dg-final { scan-assembler {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]} { target { no-opts \"-O0\" no-opts \"-O1\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n-/* { dg-final { scan-assembler {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e16,\\s*mf2,\\s*t[au],\\s*m[au]} { target { no-opts \"-O0\" no-opts \"-O1\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n-/* { dg-final { scan-assembler {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*m8,\\s*t[au],\\s*m[au]} { target { no-opts \"-O0\" no-opts \"-O1\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli} 5 { target { no-opts \"-O0\"  no-opts \"-O1\"  no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-not {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]} { target { no-opts \"-O0\" no-opts \"-O1\"  no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]} { target { no-opts \"-O0\" no-opts \"-O1\"  no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e16,\\s*mf2,\\s*t[au],\\s*m[au]} { target { no-opts \"-O0\" no-opts \"-O1\"  no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*m8,\\s*t[au],\\s*m[au]} { target { no-opts \"-O0\" no-opts \"-O1\"  no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */"}, {"sha": "bb75c509ffd20095821ce66791f26ee08c104f2a", "filename": "gcc/testsuite/gcc.target/riscv/rvv/vsetvl/vlmax_conflict-1.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ee85b3255d638fd77ee3fe17a4e146c81545efb/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_conflict-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ee85b3255d638fd77ee3fe17a4e146c81545efb/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_conflict-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_conflict-1.c?ref=6ee85b3255d638fd77ee3fe17a4e146c81545efb", "patch": "@@ -17,7 +17,7 @@ void f (int32_t * restrict in, int32_t * restrict out, size_t n, size_t cond, si\n     }\n }\n \n-/* { dg-final { scan-assembler-times {vsetvli} 3 { target { no-opts \"-O0\" no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n-/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]\\s+\\.L[0-9]+\\:} 1 { target { no-opts \"-O0\" no-opts \"-O1\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n-/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]\\s+j\\s+\\.L[0-9]+} 1 { target { no-opts \"-O0\" no-opts \"-O1\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n-/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*m8,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\" no-opts \"-O1\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli} 3 { target { no-opts \"-O0\" no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]\\s+\\.L[0-9]+\\:} 1 { target { no-opts \"-O0\" no-opts \"-O1\"  no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]\\s+j\\s+\\.L[0-9]+} 1 { target { no-opts \"-O0\" no-opts \"-O1\"  no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*m8,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\" no-opts \"-O1\"  no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */"}, {"sha": "30de699d32ea03968e347d021b48ffb8095429de", "filename": "gcc/testsuite/gcc.target/riscv/rvv/vsetvl/vlmax_conflict-10.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ee85b3255d638fd77ee3fe17a4e146c81545efb/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_conflict-10.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ee85b3255d638fd77ee3fe17a4e146c81545efb/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_conflict-10.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_conflict-10.c?ref=6ee85b3255d638fd77ee3fe17a4e146c81545efb", "patch": "@@ -24,4 +24,4 @@ void f (int32_t * restrict in, int32_t * restrict out, size_t n, size_t m, size_\n     }\n }\n \n-/* { dg-final { scan-assembler-times {vsetvli} 5 { target { no-opts \"-O0\"  no-opts \"-O1\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli} 5 { target { no-opts \"-O0\"  no-opts \"-O1\"  no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */"}, {"sha": "653aba8a1980c390e88a69a80069c50b5bbfa70b", "filename": "gcc/testsuite/gcc.target/riscv/rvv/vsetvl/vlmax_conflict-11.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ee85b3255d638fd77ee3fe17a4e146c81545efb/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_conflict-11.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ee85b3255d638fd77ee3fe17a4e146c81545efb/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_conflict-11.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_conflict-11.c?ref=6ee85b3255d638fd77ee3fe17a4e146c81545efb", "patch": "@@ -19,6 +19,6 @@ void f (int32_t * restrict in, int32_t * restrict out, size_t n, size_t m, size_\n   }\n }\n \n-/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\" no-opts \"-O1\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n-/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*zero,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\" no-opts \"-O1\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n-/* { dg-final { scan-assembler-times {vsetvli} 2 { target { no-opts \"-O0\"  no-opts \"-O1\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\" no-opts \"-O1\"  no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*zero,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\" no-opts \"-O1\"  no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli} 2 { target { no-opts \"-O0\"  no-opts \"-O1\"  no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */"}, {"sha": "fb20a547d47b52aff3a49607f36f3ff317a11f9f", "filename": "gcc/testsuite/gcc.target/riscv/rvv/vsetvl/vlmax_conflict-12.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ee85b3255d638fd77ee3fe17a4e146c81545efb/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_conflict-12.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ee85b3255d638fd77ee3fe17a4e146c81545efb/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_conflict-12.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_conflict-12.c?ref=6ee85b3255d638fd77ee3fe17a4e146c81545efb", "patch": "@@ -35,5 +35,5 @@ void f2 (int32_t * restrict in, int32_t * restrict in2, int32_t * restrict out,\n     }\n }\n \n-/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\" no-opts \"-O1\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n-/* { dg-final { scan-assembler-times {vsetvli} 1 { target { no-opts \"-O0\"  no-opts \"-O1\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\" no-opts \"-O1\"  no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli} 1 { target { no-opts \"-O0\"  no-opts \"-O1\"  no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */"}, {"sha": "72f49f3e53f71f074236d0f0675f1154f0ca9bd4", "filename": "gcc/testsuite/gcc.target/riscv/rvv/vsetvl/vlmax_conflict-2.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ee85b3255d638fd77ee3fe17a4e146c81545efb/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_conflict-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ee85b3255d638fd77ee3fe17a4e146c81545efb/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_conflict-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_conflict-2.c?ref=6ee85b3255d638fd77ee3fe17a4e146c81545efb", "patch": "@@ -17,7 +17,7 @@ void f (int32_t * restrict in, int32_t * restrict out, size_t n, size_t cond, si\n     }\n }\n \n-/* { dg-final { scan-assembler-times {vsetvli} 3 { target { no-opts \"-O0\" no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n-/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*m8,\\s*t[au],\\s*m[au]\\s+\\.L[0-9]+} 1 { target { no-opts \"-O0\" no-opts \"-O1\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n-/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*m8,\\s*t[au],\\s*m[au]\\s+j\\s+\\.L[0-9]+} 1 { target { no-opts \"-O0\" no-opts \"-O1\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n-/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\" no-opts \"-O1\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli} 3 { target { no-opts \"-O0\" no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*m8,\\s*t[au],\\s*m[au]\\s+\\.L[0-9]+} 1 { target { no-opts \"-O0\" no-opts \"-O1\"  no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*m8,\\s*t[au],\\s*m[au]\\s+j\\s+\\.L[0-9]+} 1 { target { no-opts \"-O0\" no-opts \"-O1\"  no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\" no-opts \"-O1\"  no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */"}, {"sha": "a5ffd27b3df0b1a1f611309078581fbca7ed2008", "filename": "gcc/testsuite/gcc.target/riscv/rvv/vsetvl/vlmax_conflict-3.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ee85b3255d638fd77ee3fe17a4e146c81545efb/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_conflict-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ee85b3255d638fd77ee3fe17a4e146c81545efb/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_conflict-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_conflict-3.c?ref=6ee85b3255d638fd77ee3fe17a4e146c81545efb", "patch": "@@ -26,5 +26,5 @@ void f2 (int32_t * restrict in, int32_t * restrict in2, int32_t * restrict out,\n     }\n }\n \n-/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\" no-opts \"-O1\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n-/* { dg-final { scan-assembler-times {vsetvli} 1 { target { no-opts \"-O0\"  no-opts \"-O1\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\" no-opts \"-O1\"  no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli} 1 { target { no-opts \"-O0\"  no-opts \"-O1\"  no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */"}, {"sha": "b0ca3942d42df92e3d06da411b298d1530d48d50", "filename": "gcc/testsuite/gcc.target/riscv/rvv/vsetvl/vlmax_conflict-4.c", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ee85b3255d638fd77ee3fe17a4e146c81545efb/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_conflict-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ee85b3255d638fd77ee3fe17a4e146c81545efb/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_conflict-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_conflict-4.c?ref=6ee85b3255d638fd77ee3fe17a4e146c81545efb", "patch": "@@ -21,9 +21,9 @@ void f (int32_t * restrict in, int32_t * restrict out, size_t n, size_t cond, si\n }\n \n \n-/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\" no-opts \"-O1\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n-/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\" no-opts \"-O1\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n-/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*m8,\\s*t[au],\\s*m[au]} 3 { target { no-opts \"-O0\" no-opts \"-O1\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n-/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*m8,\\s*t[au],\\s*m[au]\\s+\\.L[0-9]:+} 1 { target { no-opts \"-O0\" no-opts \"-O1\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n-/* { dg-final { scan-assembler-times {vsetvli} 5 { target { no-opts \"-O0\"  no-opts \"-O1\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\" no-opts \"-O1\"  no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\" no-opts \"-O1\"  no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*m8,\\s*t[au],\\s*m[au]} 3 { target { no-opts \"-O0\" no-opts \"-O1\"  no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*m8,\\s*t[au],\\s*m[au]\\s+\\.L[0-9]:+} 1 { target { no-opts \"-O0\" no-opts \"-O1\"  no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli} 5 { target { no-opts \"-O0\"  no-opts \"-O1\"  no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n "}, {"sha": "efba512269f69f06b10350c35fd9246285013a91", "filename": "gcc/testsuite/gcc.target/riscv/rvv/vsetvl/vlmax_conflict-5.c", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ee85b3255d638fd77ee3fe17a4e146c81545efb/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_conflict-5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ee85b3255d638fd77ee3fe17a4e146c81545efb/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_conflict-5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_conflict-5.c?ref=6ee85b3255d638fd77ee3fe17a4e146c81545efb", "patch": "@@ -23,10 +23,10 @@ void f (int32_t * restrict in, int32_t * restrict out, size_t n, size_t cond, si\n     }\n }\n \n-/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e16,\\s*mf2,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\" no-opts \"-O1\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n-/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\" no-opts \"-O1\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n-/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\" no-opts \"-O1\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n-/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*m8,\\s*t[au],\\s*m[au]} 4 { target { no-opts \"-O0\" no-opts \"-O1\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n-/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*m8,\\s*t[au],\\s*m[au]\\s+\\.L[0-9]:+} 1 { target { no-opts \"-O0\" no-opts \"-O1\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n-/* { dg-final { scan-assembler-times {vsetvli} 7 { target { no-opts \"-O0\"  no-opts \"-O1\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e16,\\s*mf2,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\" no-opts \"-O1\"  no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\" no-opts \"-O1\"  no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\" no-opts \"-O1\"  no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*m8,\\s*t[au],\\s*m[au]} 4 { target { no-opts \"-O0\" no-opts \"-O1\"  no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*m8,\\s*t[au],\\s*m[au]\\s+\\.L[0-9]:+} 1 { target { no-opts \"-O0\" no-opts \"-O1\"  no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli} 7 { target { no-opts \"-O0\"  no-opts \"-O1\"  no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n "}, {"sha": "01396ef1c1b39a0b475de326a8d38713dd76cf9f", "filename": "gcc/testsuite/gcc.target/riscv/rvv/vsetvl/vlmax_conflict-6.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ee85b3255d638fd77ee3fe17a4e146c81545efb/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_conflict-6.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ee85b3255d638fd77ee3fe17a4e146c81545efb/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_conflict-6.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_conflict-6.c?ref=6ee85b3255d638fd77ee3fe17a4e146c81545efb", "patch": "@@ -19,7 +19,7 @@ void f (int32_t * in, int32_t * out, int n, int cond)\n   }\n }\n \n-/* { dg-final { scan-assembler-times {\\.L[0-9]+:\\s+vle8\\.v} 1 { target { no-opts \"-O0\" no-opts \"-O1\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n-/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e16,\\s*mf2,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\" no-opts \"-O1\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n-/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\" no-opts \"-O1\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n-/* { dg-final { scan-assembler-times {vsetvli} 3 { target { no-opts \"-O0\"  no-opts \"-O1\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {\\.L[0-9]+:\\s+vle8\\.v} 1 { target { no-opts \"-O0\" no-opts \"-O1\"  no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e16,\\s*mf2,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\" no-opts \"-O1\"  no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\" no-opts \"-O1\"  no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli} 3 { target { no-opts \"-O0\"  no-opts \"-O1\"  no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */"}, {"sha": "60ad108666f801788982e4c09e1db7ba3d9fff00", "filename": "gcc/testsuite/gcc.target/riscv/rvv/vsetvl/vlmax_conflict-7.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ee85b3255d638fd77ee3fe17a4e146c81545efb/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_conflict-7.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ee85b3255d638fd77ee3fe17a4e146c81545efb/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_conflict-7.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_conflict-7.c?ref=6ee85b3255d638fd77ee3fe17a4e146c81545efb", "patch": "@@ -20,6 +20,6 @@ void f (int32_t * restrict in, int32_t * restrict out, size_t n, size_t cond, si\n     }\n }\n \n-/* { dg-final { scan-assembler-times {vsetvli} 4 { target { no-opts \"-O0\"  no-opts \"-O1\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n-/* { dg-final { scan-assembler-times {j\\s+\\.L[0-9]+\\s+\\.L[0-9]+:\\s+vlm\\.v} 1 { target { no-opts \"-O0\" no-opts \"-O1\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n-/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*m8,\\s*t[au],\\s*m[au]} 3 { target { no-opts \"-O0\" no-opts \"-O1\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli} 4 { target { no-opts \"-O0\"  no-opts \"-O1\"  no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {j\\s+\\.L[0-9]+\\s+\\.L[0-9]+:\\s+vlm\\.v} 1 { target { no-opts \"-O0\" no-opts \"-O1\"  no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*m8,\\s*t[au],\\s*m[au]} 3 { target { no-opts \"-O0\" no-opts \"-O1\"  no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */"}, {"sha": "7b9574cc332d8b3accb9634559b21dfe3ad1ead1", "filename": "gcc/testsuite/gcc.target/riscv/rvv/vsetvl/vlmax_conflict-8.c", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ee85b3255d638fd77ee3fe17a4e146c81545efb/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_conflict-8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ee85b3255d638fd77ee3fe17a4e146c81545efb/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_conflict-8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_conflict-8.c?ref=6ee85b3255d638fd77ee3fe17a4e146c81545efb", "patch": "@@ -20,8 +20,8 @@ void f (int32_t * restrict in, int32_t * restrict out, size_t n, size_t cond, si\n     }\n }\n \n-/* { dg-final { scan-assembler-times {vsetvli} 5 { target { no-opts \"-O0\"  no-opts \"-O1\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n-/* { dg-final { scan-assembler-times {j\\s+\\.L[0-9]+\\s+\\.L[0-9]+:\\s+vlm\\.v} 1 { target { no-opts \"-O0\" no-opts \"-O1\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n-/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*m8,\\s*t[au],\\s*m[au]} 3 { target { no-opts \"-O0\" no-opts \"-O1\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n-/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\" no-opts \"-O1\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n-/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e16,\\s*mf2,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\" no-opts \"-O1\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli} 5 { target { no-opts \"-O0\"  no-opts \"-O1\"  no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {j\\s+\\.L[0-9]+\\s+\\.L[0-9]+:\\s+vlm\\.v} 1 { target { no-opts \"-O0\" no-opts \"-O1\"  no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*m8,\\s*t[au],\\s*m[au]} 3 { target { no-opts \"-O0\" no-opts \"-O1\"  no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\" no-opts \"-O1\"  no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e16,\\s*mf2,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\" no-opts \"-O1\"  no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */"}, {"sha": "bc52e5a88c0ca850e63ec6fd442bc58f2e160c01", "filename": "gcc/testsuite/gcc.target/riscv/rvv/vsetvl/vlmax_conflict-9.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ee85b3255d638fd77ee3fe17a4e146c81545efb/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_conflict-9.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ee85b3255d638fd77ee3fe17a4e146c81545efb/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_conflict-9.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_conflict-9.c?ref=6ee85b3255d638fd77ee3fe17a4e146c81545efb", "patch": "@@ -24,4 +24,4 @@ void f (int32_t * restrict in, int32_t * restrict out, size_t n, size_t m, size_\n     }\n }\n \n-/* { dg-final { scan-assembler-times {vsetvli} 7 { target { no-opts \"-O0\"  no-opts \"-O1\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli} 7 { target { no-opts \"-O0\"  no-opts \"-O1\"  no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */"}, {"sha": "429d4942d75842a0eea364b811165e1addbc95bb", "filename": "gcc/testsuite/gcc.target/riscv/rvv/vsetvl/vlmax_miss_default-1.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ee85b3255d638fd77ee3fe17a4e146c81545efb/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_miss_default-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ee85b3255d638fd77ee3fe17a4e146c81545efb/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_miss_default-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_miss_default-1.c?ref=6ee85b3255d638fd77ee3fe17a4e146c81545efb", "patch": "@@ -28,5 +28,5 @@ void f (void * restrict in, void * restrict out, int n, int cond)\n     }\n }\n \n-/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]} 4 { target { no-opts \"-O0\"   no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]} 4 { target { no-opts \"-O0\"   no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n "}, {"sha": "2fe6605bc1bb8205e5c48efcd52e1ce597d2c448", "filename": "gcc/testsuite/gcc.target/riscv/rvv/vsetvl/vlmax_miss_default-10.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ee85b3255d638fd77ee3fe17a4e146c81545efb/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_miss_default-10.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ee85b3255d638fd77ee3fe17a4e146c81545efb/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_miss_default-10.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_miss_default-10.c?ref=6ee85b3255d638fd77ee3fe17a4e146c81545efb", "patch": "@@ -28,4 +28,4 @@ void f (void * restrict in, void * restrict out, int n, int cond)\n     }\n }\n \n-/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e16,\\s*mf2,\\s*t[au],\\s*m[au]} 4 { target { no-opts \"-O0\"   no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e16,\\s*mf2,\\s*t[au],\\s*m[au]} 4 { target { no-opts \"-O0\"   no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */"}, {"sha": "3c45894489494391c77b8c5acdca627ea0fe7706", "filename": "gcc/testsuite/gcc.target/riscv/rvv/vsetvl/vlmax_miss_default-11.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ee85b3255d638fd77ee3fe17a4e146c81545efb/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_miss_default-11.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ee85b3255d638fd77ee3fe17a4e146c81545efb/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_miss_default-11.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_miss_default-11.c?ref=6ee85b3255d638fd77ee3fe17a4e146c81545efb", "patch": "@@ -28,5 +28,5 @@ void f (void * restrict in, void * restrict out, int n, int cond)\n     }\n }\n \n-/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]} 4 { target { no-opts \"-O0\"   no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]} 4 { target { no-opts \"-O0\"   no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n "}, {"sha": "2f2f0893d87d375206e4c45e5741f7cf595391ec", "filename": "gcc/testsuite/gcc.target/riscv/rvv/vsetvl/vlmax_miss_default-12.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ee85b3255d638fd77ee3fe17a4e146c81545efb/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_miss_default-12.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ee85b3255d638fd77ee3fe17a4e146c81545efb/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_miss_default-12.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_miss_default-12.c?ref=6ee85b3255d638fd77ee3fe17a4e146c81545efb", "patch": "@@ -28,5 +28,5 @@ void f (void * restrict in, void * restrict out, int n, int cond)\n     }\n }\n \n-/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]} 4 { target { no-opts \"-O0\"   no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]} 4 { target { no-opts \"-O0\"   no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n "}, {"sha": "8774155aa95d141d3f6c7fe4abf1f2a94d4b87db", "filename": "gcc/testsuite/gcc.target/riscv/rvv/vsetvl/vlmax_miss_default-13.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ee85b3255d638fd77ee3fe17a4e146c81545efb/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_miss_default-13.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ee85b3255d638fd77ee3fe17a4e146c81545efb/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_miss_default-13.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_miss_default-13.c?ref=6ee85b3255d638fd77ee3fe17a4e146c81545efb", "patch": "@@ -28,5 +28,5 @@ void f (void * restrict in, void * restrict out, int n, int cond)\n     }\n }\n \n-/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]} 4 { target { no-opts \"-O0\"   no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]} 4 { target { no-opts \"-O0\"   no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n "}, {"sha": "8004854327a948b26d2b389a0e62a6691589c35f", "filename": "gcc/testsuite/gcc.target/riscv/rvv/vsetvl/vlmax_miss_default-14.c", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ee85b3255d638fd77ee3fe17a4e146c81545efb/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_miss_default-14.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ee85b3255d638fd77ee3fe17a4e146c81545efb/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_miss_default-14.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_miss_default-14.c?ref=6ee85b3255d638fd77ee3fe17a4e146c81545efb", "patch": "@@ -172,12 +172,12 @@ void f7 (void * restrict in, void * restrict out, int n, int cond)\n     }\n }\n \n-/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]} 4 { target { no-opts \"-O0\"   no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n-/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf4,\\s*t[au],\\s*m[au]} 4 { target { no-opts \"-O0\"   no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n-/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf2,\\s*t[au],\\s*m[au]} 4 { target { no-opts \"-O0\"   no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n-/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*m1,\\s*t[au],\\s*m[au]} 4 { target { no-opts \"-O0\"   no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n-/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*m2,\\s*t[au],\\s*m[au]} 4 { target { no-opts \"-O0\"   no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n-/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*m4,\\s*t[au],\\s*m[au]} 4 { target { no-opts \"-O0\"   no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n-/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*m8,\\s*t[au],\\s*m[au]} 4 { target { no-opts \"-O0\"   no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]} 4 { target { no-opts \"-O0\"   no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf4,\\s*t[au],\\s*m[au]} 4 { target { no-opts \"-O0\"   no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf2,\\s*t[au],\\s*m[au]} 4 { target { no-opts \"-O0\"   no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*m1,\\s*t[au],\\s*m[au]} 4 { target { no-opts \"-O0\"   no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*m2,\\s*t[au],\\s*m[au]} 4 { target { no-opts \"-O0\"   no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*m4,\\s*t[au],\\s*m[au]} 4 { target { no-opts \"-O0\"   no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*m8,\\s*t[au],\\s*m[au]} 4 { target { no-opts \"-O0\"   no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n \n "}, {"sha": "9e8f8018a86804e526450bafa4cd650d6ba50e48", "filename": "gcc/testsuite/gcc.target/riscv/rvv/vsetvl/vlmax_miss_default-15.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ee85b3255d638fd77ee3fe17a4e146c81545efb/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_miss_default-15.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ee85b3255d638fd77ee3fe17a4e146c81545efb/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_miss_default-15.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_miss_default-15.c?ref=6ee85b3255d638fd77ee3fe17a4e146c81545efb", "patch": "@@ -34,5 +34,5 @@ void f (void * restrict in, void * restrict out, int n, int cond)\n     }\n }\n \n-/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]} 4 { target { no-opts \"-O0\"   no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n-/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]\\s+\\.L[0-9]\\:} 1 { target { no-opts \"-O0\"   no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]} 4 { target { no-opts \"-O0\"   no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]\\s+\\.L[0-9]\\:} 1 { target { no-opts \"-O0\"   no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */"}, {"sha": "204fe958c450090e2fc26e3e4196f87fa1d42f24", "filename": "gcc/testsuite/gcc.target/riscv/rvv/vsetvl/vlmax_miss_default-16.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ee85b3255d638fd77ee3fe17a4e146c81545efb/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_miss_default-16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ee85b3255d638fd77ee3fe17a4e146c81545efb/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_miss_default-16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_miss_default-16.c?ref=6ee85b3255d638fd77ee3fe17a4e146c81545efb", "patch": "@@ -34,5 +34,5 @@ void f (void * restrict in, void * restrict out, int n, int cond)\n     }\n }\n \n-/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]} 4 { target { no-opts \"-O0\"   no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n-/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]\\s+\\.L[0-9]\\:} 1 { target { no-opts \"-O0\"   no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]} 4 { target { no-opts \"-O0\"   no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]\\s+\\.L[0-9]\\:} 1 { target { no-opts \"-O0\"   no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */"}, {"sha": "0868c0102f4dab4a3a3fbb65cb83e4d05b9754d2", "filename": "gcc/testsuite/gcc.target/riscv/rvv/vsetvl/vlmax_miss_default-17.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ee85b3255d638fd77ee3fe17a4e146c81545efb/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_miss_default-17.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ee85b3255d638fd77ee3fe17a4e146c81545efb/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_miss_default-17.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_miss_default-17.c?ref=6ee85b3255d638fd77ee3fe17a4e146c81545efb", "patch": "@@ -34,5 +34,5 @@ void f (void * restrict in, void * restrict out, int n, int cond)\n     }\n }\n \n-/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf4,\\s*t[au],\\s*m[au]} 4 { target { no-opts \"-O0\"   no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n-/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf4,\\s*t[au],\\s*m[au]\\s+\\.L[0-9]\\:} 1 { target { no-opts \"-O0\"   no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf4,\\s*t[au],\\s*m[au]} 4 { target { no-opts \"-O0\"   no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf4,\\s*t[au],\\s*m[au]\\s+\\.L[0-9]\\:} 1 { target { no-opts \"-O0\"   no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */"}, {"sha": "44e170bbda1c18cfa75cfc24678454e9a0552753", "filename": "gcc/testsuite/gcc.target/riscv/rvv/vsetvl/vlmax_miss_default-18.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ee85b3255d638fd77ee3fe17a4e146c81545efb/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_miss_default-18.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ee85b3255d638fd77ee3fe17a4e146c81545efb/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_miss_default-18.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_miss_default-18.c?ref=6ee85b3255d638fd77ee3fe17a4e146c81545efb", "patch": "@@ -34,5 +34,5 @@ void f (void * restrict in, void * restrict out, int n, int cond)\n     }\n }\n \n-/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf4,\\s*t[au],\\s*m[au]} 4 { target { no-opts \"-O0\"   no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n-/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf4,\\s*t[au],\\s*m[au]\\s+\\.L[0-9]\\:} 1 { target { no-opts \"-O0\"   no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf4,\\s*t[au],\\s*m[au]} 4 { target { no-opts \"-O0\"   no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf4,\\s*t[au],\\s*m[au]\\s+\\.L[0-9]\\:} 1 { target { no-opts \"-O0\"   no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */"}, {"sha": "80bd0081b24be896eb9b8dcbb274435a0d39b9fc", "filename": "gcc/testsuite/gcc.target/riscv/rvv/vsetvl/vlmax_miss_default-19.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ee85b3255d638fd77ee3fe17a4e146c81545efb/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_miss_default-19.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ee85b3255d638fd77ee3fe17a4e146c81545efb/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_miss_default-19.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_miss_default-19.c?ref=6ee85b3255d638fd77ee3fe17a4e146c81545efb", "patch": "@@ -34,5 +34,5 @@ void f (void * restrict in, void * restrict out, int n, int cond)\n     }\n }\n \n-/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf2,\\s*t[au],\\s*m[au]} 4 { target { no-opts \"-O0\"   no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n-/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf2,\\s*t[au],\\s*m[au]\\s+\\.L[0-9]\\:} 1 { target { no-opts \"-O0\"   no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf2,\\s*t[au],\\s*m[au]} 4 { target { no-opts \"-O0\"   no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf2,\\s*t[au],\\s*m[au]\\s+\\.L[0-9]\\:} 1 { target { no-opts \"-O0\"   no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */"}, {"sha": "9cdaa0649fae17bb3c55734c4688f748c0ac39d6", "filename": "gcc/testsuite/gcc.target/riscv/rvv/vsetvl/vlmax_miss_default-2.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ee85b3255d638fd77ee3fe17a4e146c81545efb/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_miss_default-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ee85b3255d638fd77ee3fe17a4e146c81545efb/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_miss_default-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_miss_default-2.c?ref=6ee85b3255d638fd77ee3fe17a4e146c81545efb", "patch": "@@ -28,5 +28,5 @@ void f (void * restrict in, void * restrict out, int n, int cond)\n     }\n }\n \n-/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]} 4 { target { no-opts \"-O0\"   no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]} 4 { target { no-opts \"-O0\"   no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n "}, {"sha": "55171805a7ed5219eb5195778026d3ae95c0d58f", "filename": "gcc/testsuite/gcc.target/riscv/rvv/vsetvl/vlmax_miss_default-20.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ee85b3255d638fd77ee3fe17a4e146c81545efb/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_miss_default-20.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ee85b3255d638fd77ee3fe17a4e146c81545efb/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_miss_default-20.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_miss_default-20.c?ref=6ee85b3255d638fd77ee3fe17a4e146c81545efb", "patch": "@@ -34,5 +34,5 @@ void f (void * restrict in, void * restrict out, int n, int cond)\n     }\n }\n \n-/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf2,\\s*t[au],\\s*m[au]} 4 { target { no-opts \"-O0\"   no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n-/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf2,\\s*t[au],\\s*m[au]\\s+\\.L[0-9]\\:} 1 { target { no-opts \"-O0\"   no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf2,\\s*t[au],\\s*m[au]} 4 { target { no-opts \"-O0\"   no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf2,\\s*t[au],\\s*m[au]\\s+\\.L[0-9]\\:} 1 { target { no-opts \"-O0\"   no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */"}, {"sha": "26190478d5d44945f79271f2bdf40c0e07ada8cc", "filename": "gcc/testsuite/gcc.target/riscv/rvv/vsetvl/vlmax_miss_default-21.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ee85b3255d638fd77ee3fe17a4e146c81545efb/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_miss_default-21.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ee85b3255d638fd77ee3fe17a4e146c81545efb/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_miss_default-21.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_miss_default-21.c?ref=6ee85b3255d638fd77ee3fe17a4e146c81545efb", "patch": "@@ -34,5 +34,5 @@ void f (void * restrict in, void * restrict out, int n, int cond)\n     }\n }\n \n-/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e16,\\s*mf4,\\s*t[au],\\s*m[au]} 4 { target { no-opts \"-O0\"   no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n-/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e16,\\s*mf4,\\s*t[au],\\s*m[au]\\s+\\.L[0-9]\\:} 1 { target { no-opts \"-O0\"   no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e16,\\s*mf4,\\s*t[au],\\s*m[au]} 4 { target { no-opts \"-O0\"   no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e16,\\s*mf4,\\s*t[au],\\s*m[au]\\s+\\.L[0-9]\\:} 1 { target { no-opts \"-O0\"   no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */"}, {"sha": "d5e8728b42b783da44d007e93d5f9d0be149725f", "filename": "gcc/testsuite/gcc.target/riscv/rvv/vsetvl/vlmax_miss_default-22.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ee85b3255d638fd77ee3fe17a4e146c81545efb/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_miss_default-22.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ee85b3255d638fd77ee3fe17a4e146c81545efb/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_miss_default-22.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_miss_default-22.c?ref=6ee85b3255d638fd77ee3fe17a4e146c81545efb", "patch": "@@ -34,5 +34,5 @@ void f (void * restrict in, void * restrict out, int n, int cond)\n     }\n }\n \n-/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e16,\\s*mf4,\\s*t[au],\\s*m[au]} 4 { target { no-opts \"-O0\"   no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n-/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e16,\\s*mf4,\\s*t[au],\\s*m[au]\\s+\\.L[0-9]\\:} 1 { target { no-opts \"-O0\"   no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e16,\\s*mf4,\\s*t[au],\\s*m[au]} 4 { target { no-opts \"-O0\"   no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e16,\\s*mf4,\\s*t[au],\\s*m[au]\\s+\\.L[0-9]\\:} 1 { target { no-opts \"-O0\"   no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */"}, {"sha": "19bfd58b8680f79d6fea716981345e5db6e73493", "filename": "gcc/testsuite/gcc.target/riscv/rvv/vsetvl/vlmax_miss_default-23.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ee85b3255d638fd77ee3fe17a4e146c81545efb/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_miss_default-23.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ee85b3255d638fd77ee3fe17a4e146c81545efb/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_miss_default-23.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_miss_default-23.c?ref=6ee85b3255d638fd77ee3fe17a4e146c81545efb", "patch": "@@ -34,5 +34,5 @@ void f (void * restrict in, void * restrict out, int n, int cond)\n     }\n }\n \n-/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e16,\\s*mf2,\\s*t[au],\\s*m[au]} 4 { target { no-opts \"-O0\"   no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n-/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e16,\\s*mf2,\\s*t[au],\\s*m[au]\\s+\\.L[0-9]\\:} 1 { target { no-opts \"-O0\"   no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e16,\\s*mf2,\\s*t[au],\\s*m[au]} 4 { target { no-opts \"-O0\"   no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e16,\\s*mf2,\\s*t[au],\\s*m[au]\\s+\\.L[0-9]\\:} 1 { target { no-opts \"-O0\"   no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */"}, {"sha": "2f13d2cc62dc5bfb05661258e147cad9271355f9", "filename": "gcc/testsuite/gcc.target/riscv/rvv/vsetvl/vlmax_miss_default-24.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ee85b3255d638fd77ee3fe17a4e146c81545efb/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_miss_default-24.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ee85b3255d638fd77ee3fe17a4e146c81545efb/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_miss_default-24.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_miss_default-24.c?ref=6ee85b3255d638fd77ee3fe17a4e146c81545efb", "patch": "@@ -34,5 +34,5 @@ void f (void * restrict in, void * restrict out, int n, int cond)\n     }\n }\n \n-/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e16,\\s*mf2,\\s*t[au],\\s*m[au]} 4 { target { no-opts \"-O0\"   no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n-/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e16,\\s*mf2,\\s*t[au],\\s*m[au]\\s+\\.L[0-9]\\:} 1 { target { no-opts \"-O0\"   no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e16,\\s*mf2,\\s*t[au],\\s*m[au]} 4 { target { no-opts \"-O0\"   no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e16,\\s*mf2,\\s*t[au],\\s*m[au]\\s+\\.L[0-9]\\:} 1 { target { no-opts \"-O0\"   no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */"}, {"sha": "32a8edb0097859061f41b2706418803e3016665a", "filename": "gcc/testsuite/gcc.target/riscv/rvv/vsetvl/vlmax_miss_default-25.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ee85b3255d638fd77ee3fe17a4e146c81545efb/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_miss_default-25.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ee85b3255d638fd77ee3fe17a4e146c81545efb/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_miss_default-25.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_miss_default-25.c?ref=6ee85b3255d638fd77ee3fe17a4e146c81545efb", "patch": "@@ -34,5 +34,5 @@ void f (void * restrict in, void * restrict out, int n, int cond)\n     }\n }\n \n-/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]} 4 { target { no-opts \"-O0\"   no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n-/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]\\s+\\.L[0-9]\\:} 1 { target { no-opts \"-O0\"   no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]} 4 { target { no-opts \"-O0\"   no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]\\s+\\.L[0-9]\\:} 1 { target { no-opts \"-O0\"   no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */"}, {"sha": "897c1ab31bcdaf5e7b41038da5ff7bcde87dbfdf", "filename": "gcc/testsuite/gcc.target/riscv/rvv/vsetvl/vlmax_miss_default-26.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ee85b3255d638fd77ee3fe17a4e146c81545efb/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_miss_default-26.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ee85b3255d638fd77ee3fe17a4e146c81545efb/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_miss_default-26.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_miss_default-26.c?ref=6ee85b3255d638fd77ee3fe17a4e146c81545efb", "patch": "@@ -34,5 +34,5 @@ void f (void * restrict in, void * restrict out, int n, int cond)\n     }\n }\n \n-/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]} 4 { target { no-opts \"-O0\"   no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n-/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]\\s+\\.L[0-9]\\:} 1 { target { no-opts \"-O0\"   no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]} 4 { target { no-opts \"-O0\"   no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]\\s+\\.L[0-9]\\:} 1 { target { no-opts \"-O0\"   no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */"}, {"sha": "2ba5e282f3236ecb5ca8079a185dbfb9b0265dc0", "filename": "gcc/testsuite/gcc.target/riscv/rvv/vsetvl/vlmax_miss_default-27.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ee85b3255d638fd77ee3fe17a4e146c81545efb/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_miss_default-27.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ee85b3255d638fd77ee3fe17a4e146c81545efb/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_miss_default-27.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_miss_default-27.c?ref=6ee85b3255d638fd77ee3fe17a4e146c81545efb", "patch": "@@ -34,5 +34,5 @@ void f (void * restrict in, void * restrict out, int n, int cond)\n     }\n }\n \n-/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]} 4 { target { no-opts \"-O0\"   no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n-/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]\\s+\\.L[0-9]\\:} 1 { target { no-opts \"-O0\"   no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]} 4 { target { no-opts \"-O0\"   no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]\\s+\\.L[0-9]\\:} 1 { target { no-opts \"-O0\"   no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */"}, {"sha": "d56d264d0c25d790d021997b50ac126c146c4c69", "filename": "gcc/testsuite/gcc.target/riscv/rvv/vsetvl/vlmax_miss_default-28.c", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ee85b3255d638fd77ee3fe17a4e146c81545efb/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_miss_default-28.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ee85b3255d638fd77ee3fe17a4e146c81545efb/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_miss_default-28.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_miss_default-28.c?ref=6ee85b3255d638fd77ee3fe17a4e146c81545efb", "patch": "@@ -213,19 +213,19 @@ void f7 (void * restrict in, void * restrict out, int n, int cond)\n       *(vbool1_t*)(out + i) = v;\n     }\n }\n-/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]} 4 { target { no-opts \"-O0\"   no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n-/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf4,\\s*t[au],\\s*m[au]} 4 { target { no-opts \"-O0\"   no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n-/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf2,\\s*t[au],\\s*m[au]} 4 { target { no-opts \"-O0\"   no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n-/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*m1,\\s*t[au],\\s*m[au]} 4 { target { no-opts \"-O0\"   no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n-/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*m2,\\s*t[au],\\s*m[au]} 4 { target { no-opts \"-O0\"   no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n-/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*m4,\\s*t[au],\\s*m[au]} 4 { target { no-opts \"-O0\"   no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n-/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*m8,\\s*t[au],\\s*m[au]} 4 { target { no-opts \"-O0\"   no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]} 4 { target { no-opts \"-O0\"   no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf4,\\s*t[au],\\s*m[au]} 4 { target { no-opts \"-O0\"   no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf2,\\s*t[au],\\s*m[au]} 4 { target { no-opts \"-O0\"   no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*m1,\\s*t[au],\\s*m[au]} 4 { target { no-opts \"-O0\"   no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*m2,\\s*t[au],\\s*m[au]} 4 { target { no-opts \"-O0\"   no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*m4,\\s*t[au],\\s*m[au]} 4 { target { no-opts \"-O0\"   no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*m8,\\s*t[au],\\s*m[au]} 4 { target { no-opts \"-O0\"   no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n \n-/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]\\s+\\.L[0-9]+\\:} 1 { target { no-opts \"-O0\"   no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n-/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf4,\\s*t[au],\\s*m[au]\\s+\\.L[0-9]+\\:} 1 { target { no-opts \"-O0\"   no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n-/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf2,\\s*t[au],\\s*m[au]\\s+\\.L[0-9]+\\:} 1 { target { no-opts \"-O0\"   no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n-/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*m1,\\s*t[au],\\s*m[au]\\s+\\.L[0-9]+\\:} 1 { target { no-opts \"-O0\"   no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n-/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*m2,\\s*t[au],\\s*m[au]\\s+\\.L[0-9]+\\:} 1 { target { no-opts \"-O0\"   no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n-/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*m4,\\s*t[au],\\s*m[au]\\s+\\.L[0-9]+\\:} 1 { target { no-opts \"-O0\"   no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n-/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*m8,\\s*t[au],\\s*m[au]\\s+\\.L[0-9]+\\:} 1 { target { no-opts \"-O0\"   no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]\\s+\\.L[0-9]+\\:} 1 { target { no-opts \"-O0\"   no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf4,\\s*t[au],\\s*m[au]\\s+\\.L[0-9]+\\:} 1 { target { no-opts \"-O0\"   no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf2,\\s*t[au],\\s*m[au]\\s+\\.L[0-9]+\\:} 1 { target { no-opts \"-O0\"   no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*m1,\\s*t[au],\\s*m[au]\\s+\\.L[0-9]+\\:} 1 { target { no-opts \"-O0\"   no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*m2,\\s*t[au],\\s*m[au]\\s+\\.L[0-9]+\\:} 1 { target { no-opts \"-O0\"   no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*m4,\\s*t[au],\\s*m[au]\\s+\\.L[0-9]+\\:} 1 { target { no-opts \"-O0\"   no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*m8,\\s*t[au],\\s*m[au]\\s+\\.L[0-9]+\\:} 1 { target { no-opts \"-O0\"   no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n "}, {"sha": "f3183426873da417dbab373424fb67f481a71de5", "filename": "gcc/testsuite/gcc.target/riscv/rvv/vsetvl/vlmax_miss_default-3.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ee85b3255d638fd77ee3fe17a4e146c81545efb/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_miss_default-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ee85b3255d638fd77ee3fe17a4e146c81545efb/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_miss_default-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_miss_default-3.c?ref=6ee85b3255d638fd77ee3fe17a4e146c81545efb", "patch": "@@ -28,5 +28,5 @@ void f (void * restrict in, void * restrict out, int n, int cond)\n     }\n }\n \n-/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf4,\\s*t[au],\\s*m[au]} 4 { target { no-opts \"-O0\"   no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf4,\\s*t[au],\\s*m[au]} 4 { target { no-opts \"-O0\"   no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n "}, {"sha": "4cf5a00319e1e08b9e346ad8570a195c01cd9122", "filename": "gcc/testsuite/gcc.target/riscv/rvv/vsetvl/vlmax_miss_default-4.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ee85b3255d638fd77ee3fe17a4e146c81545efb/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_miss_default-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ee85b3255d638fd77ee3fe17a4e146c81545efb/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_miss_default-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_miss_default-4.c?ref=6ee85b3255d638fd77ee3fe17a4e146c81545efb", "patch": "@@ -28,5 +28,5 @@ void f (void * restrict in, void * restrict out, int n, int cond)\n     }\n }\n \n-/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf4,\\s*t[au],\\s*m[au]} 4 { target { no-opts \"-O0\"   no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf4,\\s*t[au],\\s*m[au]} 4 { target { no-opts \"-O0\"   no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n "}, {"sha": "f708e4a5732e3c34e414bed837b85a87e02b8f1f", "filename": "gcc/testsuite/gcc.target/riscv/rvv/vsetvl/vlmax_miss_default-5.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ee85b3255d638fd77ee3fe17a4e146c81545efb/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_miss_default-5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ee85b3255d638fd77ee3fe17a4e146c81545efb/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_miss_default-5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_miss_default-5.c?ref=6ee85b3255d638fd77ee3fe17a4e146c81545efb", "patch": "@@ -28,5 +28,5 @@ void f (void * restrict in, void * restrict out, int n, int cond)\n     }\n }\n \n-/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf2,\\s*t[au],\\s*m[au]} 4 { target { no-opts \"-O0\"   no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf2,\\s*t[au],\\s*m[au]} 4 { target { no-opts \"-O0\"   no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n "}, {"sha": "f3dbffb8ebc2be80ff28b43309e6413b79895dcc", "filename": "gcc/testsuite/gcc.target/riscv/rvv/vsetvl/vlmax_miss_default-6.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ee85b3255d638fd77ee3fe17a4e146c81545efb/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_miss_default-6.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ee85b3255d638fd77ee3fe17a4e146c81545efb/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_miss_default-6.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_miss_default-6.c?ref=6ee85b3255d638fd77ee3fe17a4e146c81545efb", "patch": "@@ -28,5 +28,5 @@ void f (void * restrict in, void * restrict out, int n, int cond)\n     }\n }\n \n-/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf2,\\s*t[au],\\s*m[au]} 4 { target { no-opts \"-O0\"   no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf2,\\s*t[au],\\s*m[au]} 4 { target { no-opts \"-O0\"   no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n "}, {"sha": "6e2689698be8dc93a277e5fcdea8de0376e0756d", "filename": "gcc/testsuite/gcc.target/riscv/rvv/vsetvl/vlmax_miss_default-7.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ee85b3255d638fd77ee3fe17a4e146c81545efb/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_miss_default-7.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ee85b3255d638fd77ee3fe17a4e146c81545efb/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_miss_default-7.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_miss_default-7.c?ref=6ee85b3255d638fd77ee3fe17a4e146c81545efb", "patch": "@@ -28,5 +28,5 @@ void f (void * restrict in, void * restrict out, int n, int cond)\n     }\n }\n \n-/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e16,\\s*mf4,\\s*t[au],\\s*m[au]} 4 { target { no-opts \"-O0\"   no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e16,\\s*mf4,\\s*t[au],\\s*m[au]} 4 { target { no-opts \"-O0\"   no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n "}, {"sha": "6dde53e517b6c273bf0071709e871d5186a8c7bf", "filename": "gcc/testsuite/gcc.target/riscv/rvv/vsetvl/vlmax_miss_default-8.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ee85b3255d638fd77ee3fe17a4e146c81545efb/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_miss_default-8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ee85b3255d638fd77ee3fe17a4e146c81545efb/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_miss_default-8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_miss_default-8.c?ref=6ee85b3255d638fd77ee3fe17a4e146c81545efb", "patch": "@@ -28,5 +28,5 @@ void f (void * restrict in, void * restrict out, int n, int cond)\n     }\n }\n \n-/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e16,\\s*mf4,\\s*t[au],\\s*m[au]} 4 { target { no-opts \"-O0\" no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e16,\\s*mf4,\\s*t[au],\\s*m[au]} 4 { target { no-opts \"-O0\" no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n "}, {"sha": "903c46cbbbfa0d75d9b35b795a585f8691e14eee", "filename": "gcc/testsuite/gcc.target/riscv/rvv/vsetvl/vlmax_miss_default-9.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ee85b3255d638fd77ee3fe17a4e146c81545efb/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_miss_default-9.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ee85b3255d638fd77ee3fe17a4e146c81545efb/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_miss_default-9.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_miss_default-9.c?ref=6ee85b3255d638fd77ee3fe17a4e146c81545efb", "patch": "@@ -28,5 +28,5 @@ void f (void * restrict in, void * restrict out, int n, int cond)\n     }\n }\n \n-/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e16,\\s*mf2,\\s*t[au],\\s*m[au]} 4 { target { no-opts \"-O0\"   no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e16,\\s*mf2,\\s*t[au],\\s*m[au]} 4 { target { no-opts \"-O0\"   no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n "}, {"sha": "9dc7392556a160ca6ff919f31b78e9d13468cc1a", "filename": "gcc/testsuite/gcc.target/riscv/rvv/vsetvl/vlmax_phi-1.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ee85b3255d638fd77ee3fe17a4e146c81545efb/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_phi-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ee85b3255d638fd77ee3fe17a4e146c81545efb/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_phi-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_phi-1.c?ref=6ee85b3255d638fd77ee3fe17a4e146c81545efb", "patch": "@@ -33,5 +33,5 @@ void f (void * restrict in, void * restrict out, int n, int cond)\n     }\n }\n \n-/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]} 4 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" no-opts \"-flto\" } } } } */\n-/* { dg-final { scan-assembler-times {ble\\t[a-x0-9]+,zero,\\.L[0-9]+\\s*\\.L[0-9]+\\:\\s*vle8\\.v\\s+v[0-9]+,0\\([a-x0-9]+\\)} 1 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" no-opts \"-flto\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]} 4 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-funroll-loops\" no-opts \"-g\" no-opts \"-flto\" } } } } */\n+/* { dg-final { scan-assembler-times {ble\\t[a-x0-9]+,zero,\\.L[0-9]+\\s*\\.L[0-9]+\\:\\s*vle8\\.v\\s+v[0-9]+,0\\([a-x0-9]+\\)} 1 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-funroll-loops\" no-opts \"-g\" no-opts \"-flto\" } } } } */"}, {"sha": "e132c036e7d42052e95b2e018a061dc03f152ddf", "filename": "gcc/testsuite/gcc.target/riscv/rvv/vsetvl/vlmax_phi-10.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ee85b3255d638fd77ee3fe17a4e146c81545efb/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_phi-10.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ee85b3255d638fd77ee3fe17a4e146c81545efb/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_phi-10.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_phi-10.c?ref=6ee85b3255d638fd77ee3fe17a4e146c81545efb", "patch": "@@ -33,5 +33,5 @@ void f (void * restrict in, void * restrict out, int n, int cond)\n     }\n }\n \n-/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e16,\\s*mf2,\\s*t[au],\\s*m[au]} 4 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" no-opts \"-flto\" } } } } */\n-/* { dg-final { scan-assembler-times {ble\\t[a-x0-9]+,zero,.L[0-9]+\\s*\\.L[0-9]+\\:\\s*vle16\\.v\\s+v[0-9]+,0\\([a-x0-9]+\\)} 1 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" no-opts \"-flto\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e16,\\s*mf2,\\s*t[au],\\s*m[au]} 4 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-funroll-loops\" no-opts \"-g\" no-opts \"-flto\" } } } } */\n+/* { dg-final { scan-assembler-times {ble\\t[a-x0-9]+,zero,.L[0-9]+\\s*\\.L[0-9]+\\:\\s*vle16\\.v\\s+v[0-9]+,0\\([a-x0-9]+\\)} 1 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-funroll-loops\" no-opts \"-g\" no-opts \"-flto\" } } } } */"}, {"sha": "10eb69a676e823f4f7d9ab187d81d876420fca04", "filename": "gcc/testsuite/gcc.target/riscv/rvv/vsetvl/vlmax_phi-11.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ee85b3255d638fd77ee3fe17a4e146c81545efb/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_phi-11.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ee85b3255d638fd77ee3fe17a4e146c81545efb/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_phi-11.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_phi-11.c?ref=6ee85b3255d638fd77ee3fe17a4e146c81545efb", "patch": "@@ -33,5 +33,5 @@ void f (void * restrict in, void * restrict out, int n, int cond)\n     }\n }\n \n-/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]} 4 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" no-opts \"-flto\" } } } } */\n-/* { dg-final { scan-assembler-times {ble\\t[a-x0-9]+,zero,.L[0-9]+\\s*\\.L[0-9]+\\:\\s*vle32\\.v\\s+v[0-9]+,0\\([a-x0-9]+\\)} 1 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" no-opts \"-flto\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]} 4 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-funroll-loops\" no-opts \"-g\" no-opts \"-flto\" } } } } */\n+/* { dg-final { scan-assembler-times {ble\\t[a-x0-9]+,zero,.L[0-9]+\\s*\\.L[0-9]+\\:\\s*vle32\\.v\\s+v[0-9]+,0\\([a-x0-9]+\\)} 1 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-funroll-loops\" no-opts \"-g\" no-opts \"-flto\" } } } } */"}, {"sha": "fb13306a13ba1607aec6ab74564f8ab15af9c160", "filename": "gcc/testsuite/gcc.target/riscv/rvv/vsetvl/vlmax_phi-12.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ee85b3255d638fd77ee3fe17a4e146c81545efb/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_phi-12.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ee85b3255d638fd77ee3fe17a4e146c81545efb/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_phi-12.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_phi-12.c?ref=6ee85b3255d638fd77ee3fe17a4e146c81545efb", "patch": "@@ -33,5 +33,5 @@ void f (void * restrict in, void * restrict out, int n, int cond)\n     }\n }\n \n-/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]} 4 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" no-opts \"-flto\" } } } } */\n-/* { dg-final { scan-assembler-times {ble\\t[a-x0-9]+,zero,.L[0-9]+\\s*\\.L[0-9]+\\:\\s*vle32\\.v\\s+v[0-9]+,0\\([a-x0-9]+\\)} 1 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" no-opts \"-flto\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]} 4 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-funroll-loops\" no-opts \"-g\" no-opts \"-flto\" } } } } */\n+/* { dg-final { scan-assembler-times {ble\\t[a-x0-9]+,zero,.L[0-9]+\\s*\\.L[0-9]+\\:\\s*vle32\\.v\\s+v[0-9]+,0\\([a-x0-9]+\\)} 1 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-funroll-loops\" no-opts \"-g\" no-opts \"-flto\" } } } } */"}, {"sha": "bfa51c0188e5df2daf511f011b70f74520d27950", "filename": "gcc/testsuite/gcc.target/riscv/rvv/vsetvl/vlmax_phi-13.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ee85b3255d638fd77ee3fe17a4e146c81545efb/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_phi-13.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ee85b3255d638fd77ee3fe17a4e146c81545efb/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_phi-13.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_phi-13.c?ref=6ee85b3255d638fd77ee3fe17a4e146c81545efb", "patch": "@@ -33,5 +33,5 @@ void f (void * restrict in, void * restrict out, int n, int cond)\n     }\n }\n \n-/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]} 4 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" no-opts \"-flto\" } } } } */\n-/* { dg-final { scan-assembler-times {ble\\t[a-x0-9]+,zero,.L[0-9]+\\s*\\.L[0-9]+\\:\\s*vle32\\.v\\s+v[0-9]+,0\\([a-x0-9]+\\)} 1 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" no-opts \"-flto\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]} 4 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-funroll-loops\" no-opts \"-g\" no-opts \"-flto\" } } } } */\n+/* { dg-final { scan-assembler-times {ble\\t[a-x0-9]+,zero,.L[0-9]+\\s*\\.L[0-9]+\\:\\s*vle32\\.v\\s+v[0-9]+,0\\([a-x0-9]+\\)} 1 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-funroll-loops\" no-opts \"-g\" no-opts \"-flto\" } } } } */"}, {"sha": "402ec1bbccd2eaa6e0b237540d7872d24f86a759", "filename": "gcc/testsuite/gcc.target/riscv/rvv/vsetvl/vlmax_phi-14.c", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ee85b3255d638fd77ee3fe17a4e146c81545efb/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_phi-14.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ee85b3255d638fd77ee3fe17a4e146c81545efb/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_phi-14.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_phi-14.c?ref=6ee85b3255d638fd77ee3fe17a4e146c81545efb", "patch": "@@ -207,11 +207,11 @@ void f7 (void * restrict in, void * restrict out, int n, int cond)\n     }\n }\n \n-/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]} 4 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" no-opts \"-flto\" } } } } */\n-/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf4,\\s*t[au],\\s*m[au]} 4 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" no-opts \"-flto\" } } } } */\n-/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf2,\\s*t[au],\\s*m[au]} 4 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" no-opts \"-flto\" } } } } */\n-/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*m1,\\s*t[au],\\s*m[au]} 4 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" no-opts \"-flto\" } } } } */\n-/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*m2,\\s*t[au],\\s*m[au]} 4 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" no-opts \"-flto\" } } } } */\n-/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*m4,\\s*t[au],\\s*m[au]} 4 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" no-opts \"-flto\" } } } } */\n-/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*m8,\\s*t[au],\\s*m[au]} 4 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" no-opts \"-flto\" } } } } */\n-/* { dg-final { scan-assembler-times {ble\\t[a-x0-9]+,zero,.L[0-9]+\\s+\\.L[0-9]+\\:\\s+vlm\\.v\\s+v[0-9]+,0\\([a-x0-9]+\\)} 7 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" no-opts \"-flto\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]} 4 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-funroll-loops\" no-opts \"-g\" no-opts \"-flto\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf4,\\s*t[au],\\s*m[au]} 4 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-funroll-loops\" no-opts \"-g\" no-opts \"-flto\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf2,\\s*t[au],\\s*m[au]} 4 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-funroll-loops\" no-opts \"-g\" no-opts \"-flto\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*m1,\\s*t[au],\\s*m[au]} 4 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-funroll-loops\" no-opts \"-g\" no-opts \"-flto\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*m2,\\s*t[au],\\s*m[au]} 4 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-funroll-loops\" no-opts \"-g\" no-opts \"-flto\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*m4,\\s*t[au],\\s*m[au]} 4 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-funroll-loops\" no-opts \"-g\" no-opts \"-flto\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*m8,\\s*t[au],\\s*m[au]} 4 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-funroll-loops\" no-opts \"-g\" no-opts \"-flto\" } } } } */\n+/* { dg-final { scan-assembler-times {ble\\t[a-x0-9]+,zero,.L[0-9]+\\s+\\.L[0-9]+\\:\\s+vlm\\.v\\s+v[0-9]+,0\\([a-x0-9]+\\)} 7 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-funroll-loops\" no-opts \"-g\" no-opts \"-flto\" } } } } */"}, {"sha": "1389c162f3647aa64955551f1e08a461bb02d6f2", "filename": "gcc/testsuite/gcc.target/riscv/rvv/vsetvl/vlmax_phi-15.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ee85b3255d638fd77ee3fe17a4e146c81545efb/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_phi-15.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ee85b3255d638fd77ee3fe17a4e146c81545efb/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_phi-15.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_phi-15.c?ref=6ee85b3255d638fd77ee3fe17a4e146c81545efb", "patch": "@@ -36,5 +36,5 @@ void f (void * restrict in, void * restrict out, int n, int cond)\n     }\n }\n \n-/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]} 4 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" no-opts \"-flto\" } } } } */\n-/* { dg-final { scan-assembler-times {ble\\t[a-x0-9]+,zero,.L[0-9]+\\s*\\.L[0-9]+\\:\\s*vle8\\.v\\s+v[0-9]+,0\\([a-x0-9]+\\)} 1 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" no-opts \"-flto\"  } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]} 4 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-funroll-loops\" no-opts \"-g\" no-opts \"-flto\" } } } } */\n+/* { dg-final { scan-assembler-times {ble\\t[a-x0-9]+,zero,.L[0-9]+\\s*\\.L[0-9]+\\:\\s*vle8\\.v\\s+v[0-9]+,0\\([a-x0-9]+\\)} 1 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-funroll-loops\" no-opts \"-g\" no-opts \"-flto\"  } } } } */"}, {"sha": "5e3dd66493153d65a4d0b8f20f71742a9f9dce30", "filename": "gcc/testsuite/gcc.target/riscv/rvv/vsetvl/vlmax_phi-16.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ee85b3255d638fd77ee3fe17a4e146c81545efb/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_phi-16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ee85b3255d638fd77ee3fe17a4e146c81545efb/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_phi-16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_phi-16.c?ref=6ee85b3255d638fd77ee3fe17a4e146c81545efb", "patch": "@@ -36,5 +36,5 @@ void f (void * restrict in, void * restrict out, int n, int cond)\n     }\n }\n \n-/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]} 4 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" no-opts \"-flto\"  } } } } */\n-/* { dg-final { scan-assembler-times {ble\\t[a-x0-9]+,zero,.L[0-9]+\\s*\\.L[0-9]+\\:\\s*vle8\\.v\\s+v[0-9]+,0\\([a-x0-9]+\\)} 1 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" no-opts \"-flto\"  } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]} 4 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-funroll-loops\" no-opts \"-g\" no-opts \"-flto\"  } } } } */\n+/* { dg-final { scan-assembler-times {ble\\t[a-x0-9]+,zero,.L[0-9]+\\s*\\.L[0-9]+\\:\\s*vle8\\.v\\s+v[0-9]+,0\\([a-x0-9]+\\)} 1 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-funroll-loops\" no-opts \"-g\" no-opts \"-flto\"  } } } } */"}, {"sha": "0de0549c19fc75e7e9737e1283a2d1e13559c09b", "filename": "gcc/testsuite/gcc.target/riscv/rvv/vsetvl/vlmax_phi-17.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ee85b3255d638fd77ee3fe17a4e146c81545efb/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_phi-17.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ee85b3255d638fd77ee3fe17a4e146c81545efb/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_phi-17.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_phi-17.c?ref=6ee85b3255d638fd77ee3fe17a4e146c81545efb", "patch": "@@ -36,5 +36,5 @@ void f (void * restrict in, void * restrict out, int n, int cond)\n     }\n }\n \n-/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf4,\\s*t[au],\\s*m[au]} 4 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" no-opts \"-flto\"  } } } } */\n-/* { dg-final { scan-assembler-times {ble\\t[a-x0-9]+,zero,.L[0-9]+\\s*\\.L[0-9]+\\:\\s*vle8\\.v\\s+v[0-9]+,0\\([a-x0-9]+\\)} 1 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" no-opts \"-flto\"  } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf4,\\s*t[au],\\s*m[au]} 4 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-funroll-loops\" no-opts \"-g\" no-opts \"-flto\"  } } } } */\n+/* { dg-final { scan-assembler-times {ble\\t[a-x0-9]+,zero,.L[0-9]+\\s*\\.L[0-9]+\\:\\s*vle8\\.v\\s+v[0-9]+,0\\([a-x0-9]+\\)} 1 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-funroll-loops\" no-opts \"-g\" no-opts \"-flto\"  } } } } */"}, {"sha": "e76f934b8fe457b283f349786b11d3ddc33af7e4", "filename": "gcc/testsuite/gcc.target/riscv/rvv/vsetvl/vlmax_phi-18.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ee85b3255d638fd77ee3fe17a4e146c81545efb/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_phi-18.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ee85b3255d638fd77ee3fe17a4e146c81545efb/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_phi-18.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_phi-18.c?ref=6ee85b3255d638fd77ee3fe17a4e146c81545efb", "patch": "@@ -36,5 +36,5 @@ void f (void * restrict in, void * restrict out, int n, int cond)\n     }\n }\n \n-/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf4,\\s*t[au],\\s*m[au]} 4 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" no-opts \"-flto\"  } } } } */\n-/* { dg-final { scan-assembler-times {ble\\t[a-x0-9]+,zero,.L[0-9]+\\s*\\.L[0-9]+\\:\\s*vle8\\.v\\s+v[0-9]+,0\\([a-x0-9]+\\)} 1 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" no-opts \"-flto\"  } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf4,\\s*t[au],\\s*m[au]} 4 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-funroll-loops\" no-opts \"-g\" no-opts \"-flto\"  } } } } */\n+/* { dg-final { scan-assembler-times {ble\\t[a-x0-9]+,zero,.L[0-9]+\\s*\\.L[0-9]+\\:\\s*vle8\\.v\\s+v[0-9]+,0\\([a-x0-9]+\\)} 1 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-funroll-loops\" no-opts \"-g\" no-opts \"-flto\"  } } } } */"}, {"sha": "c544b9b9d14a00bdaa7e8a1b4d0d5242b58a4bdd", "filename": "gcc/testsuite/gcc.target/riscv/rvv/vsetvl/vlmax_phi-19.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ee85b3255d638fd77ee3fe17a4e146c81545efb/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_phi-19.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ee85b3255d638fd77ee3fe17a4e146c81545efb/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_phi-19.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_phi-19.c?ref=6ee85b3255d638fd77ee3fe17a4e146c81545efb", "patch": "@@ -36,5 +36,5 @@ void f (void * restrict in, void * restrict out, int n, int cond)\n     }\n }\n \n-/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf2,\\s*t[au],\\s*m[au]} 4 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" no-opts \"-flto\"   } } } } */\n-/* { dg-final { scan-assembler-times {ble\\t[a-x0-9]+,zero,.L[0-9]+\\s+\\.L[0-9]+\\:\\s+vle8\\.v\\s+v[0-9]+,0\\([a-x0-9]+\\)} 1 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" no-opts \"-flto\"   } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf2,\\s*t[au],\\s*m[au]} 4 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-funroll-loops\" no-opts \"-g\" no-opts \"-flto\"   } } } } */\n+/* { dg-final { scan-assembler-times {ble\\t[a-x0-9]+,zero,.L[0-9]+\\s+\\.L[0-9]+\\:\\s+vle8\\.v\\s+v[0-9]+,0\\([a-x0-9]+\\)} 1 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-funroll-loops\" no-opts \"-g\" no-opts \"-flto\"   } } } } */"}, {"sha": "7caccee722693dc9e2959c9db11831a9f56433c2", "filename": "gcc/testsuite/gcc.target/riscv/rvv/vsetvl/vlmax_phi-2.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ee85b3255d638fd77ee3fe17a4e146c81545efb/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_phi-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ee85b3255d638fd77ee3fe17a4e146c81545efb/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_phi-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_phi-2.c?ref=6ee85b3255d638fd77ee3fe17a4e146c81545efb", "patch": "@@ -33,5 +33,5 @@ void f (void * restrict in, void * restrict out, int n, int cond)\n     }\n }\n \n-/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]} 4 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\"  no-opts \"-flto\" } } } } */\n-/* { dg-final { scan-assembler-times {ble\\t[a-x0-9]+,zero,.L[0-9]+\\s*\\.L[0-9]+\\:\\s*vle8\\.v\\s+v[0-9]+,0\\([a-x0-9]+\\)} 1 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" no-opts \"-flto\"  } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]} 4 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-funroll-loops\" no-opts \"-g\"  no-opts \"-flto\" } } } } */\n+/* { dg-final { scan-assembler-times {ble\\t[a-x0-9]+,zero,.L[0-9]+\\s*\\.L[0-9]+\\:\\s*vle8\\.v\\s+v[0-9]+,0\\([a-x0-9]+\\)} 1 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-funroll-loops\" no-opts \"-g\" no-opts \"-flto\"  } } } } */"}, {"sha": "5a3c986ade111ea60ff471911d82e972cf969bbe", "filename": "gcc/testsuite/gcc.target/riscv/rvv/vsetvl/vlmax_phi-20.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ee85b3255d638fd77ee3fe17a4e146c81545efb/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_phi-20.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ee85b3255d638fd77ee3fe17a4e146c81545efb/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_phi-20.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_phi-20.c?ref=6ee85b3255d638fd77ee3fe17a4e146c81545efb", "patch": "@@ -36,5 +36,5 @@ void f (void * restrict in, void * restrict out, int n, int cond)\n     }\n }\n \n-/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf2,\\s*t[au],\\s*m[au]} 4 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" no-opts \"-flto\" } } } } */\n-/* { dg-final { scan-assembler-times {ble\\t[a-x0-9]+,zero,.L[0-9]+\\s+\\.L[0-9]+\\:\\s+vle8\\.v\\s+v[0-9]+,0\\([a-x0-9]+\\)} 1 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" no-opts \"-flto\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf2,\\s*t[au],\\s*m[au]} 4 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-funroll-loops\" no-opts \"-g\" no-opts \"-flto\" } } } } */\n+/* { dg-final { scan-assembler-times {ble\\t[a-x0-9]+,zero,.L[0-9]+\\s+\\.L[0-9]+\\:\\s+vle8\\.v\\s+v[0-9]+,0\\([a-x0-9]+\\)} 1 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-funroll-loops\" no-opts \"-g\" no-opts \"-flto\" } } } } */"}, {"sha": "5ef9c607038136272a4b049099d04740dd65fa35", "filename": "gcc/testsuite/gcc.target/riscv/rvv/vsetvl/vlmax_phi-21.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ee85b3255d638fd77ee3fe17a4e146c81545efb/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_phi-21.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ee85b3255d638fd77ee3fe17a4e146c81545efb/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_phi-21.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_phi-21.c?ref=6ee85b3255d638fd77ee3fe17a4e146c81545efb", "patch": "@@ -36,5 +36,5 @@ void f (void * restrict in, void * restrict out, int n, int cond)\n     }\n }\n \n-/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e16,\\s*mf4,\\s*t[au],\\s*m[au]} 4 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" no-opts \"-flto\" } } } } */\n-/* { dg-final { scan-assembler-times {ble\\t[a-x0-9]+,zero,.L[0-9]+\\s+\\.L[0-9]+\\:\\s+vle16\\.v\\s+v[0-9]+,0\\([a-x0-9]+\\)} 1 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" no-opts \"-flto\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e16,\\s*mf4,\\s*t[au],\\s*m[au]} 4 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-funroll-loops\" no-opts \"-g\" no-opts \"-flto\" } } } } */\n+/* { dg-final { scan-assembler-times {ble\\t[a-x0-9]+,zero,.L[0-9]+\\s+\\.L[0-9]+\\:\\s+vle16\\.v\\s+v[0-9]+,0\\([a-x0-9]+\\)} 1 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-funroll-loops\" no-opts \"-g\" no-opts \"-flto\" } } } } */"}, {"sha": "46621b04b9e34891162cf7cf10bfbfcf0e5ee735", "filename": "gcc/testsuite/gcc.target/riscv/rvv/vsetvl/vlmax_phi-22.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ee85b3255d638fd77ee3fe17a4e146c81545efb/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_phi-22.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ee85b3255d638fd77ee3fe17a4e146c81545efb/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_phi-22.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_phi-22.c?ref=6ee85b3255d638fd77ee3fe17a4e146c81545efb", "patch": "@@ -36,5 +36,5 @@ void f (void * restrict in, void * restrict out, int n, int cond)\n     }\n }\n \n-/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e16,\\s*mf4,\\s*t[au],\\s*m[au]} 4 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" no-opts \"-flto\"  } } } } */\n-/* { dg-final { scan-assembler-times {ble\\t[a-x0-9]+,zero,.L[0-9]+\\s*\\.L[0-9]+\\:\\s*vle16\\.v\\s+v[0-9]+,0\\([a-x0-9]+\\)} 1 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" no-opts \"-flto\"  } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e16,\\s*mf4,\\s*t[au],\\s*m[au]} 4 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-funroll-loops\" no-opts \"-g\" no-opts \"-flto\"  } } } } */\n+/* { dg-final { scan-assembler-times {ble\\t[a-x0-9]+,zero,.L[0-9]+\\s*\\.L[0-9]+\\:\\s*vle16\\.v\\s+v[0-9]+,0\\([a-x0-9]+\\)} 1 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-funroll-loops\" no-opts \"-g\" no-opts \"-flto\"  } } } } */"}, {"sha": "50e484677f0b84e151724f46f25a430b3476112b", "filename": "gcc/testsuite/gcc.target/riscv/rvv/vsetvl/vlmax_phi-23.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ee85b3255d638fd77ee3fe17a4e146c81545efb/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_phi-23.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ee85b3255d638fd77ee3fe17a4e146c81545efb/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_phi-23.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_phi-23.c?ref=6ee85b3255d638fd77ee3fe17a4e146c81545efb", "patch": "@@ -36,5 +36,5 @@ void f (void * restrict in, void * restrict out, int n, int cond)\n     }\n }\n \n-/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e16,\\s*mf2,\\s*t[au],\\s*m[au]} 4 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" no-opts \"-flto\"  } } } } */\n-/* { dg-final { scan-assembler-times {ble\\t[a-x0-9]+,zero,.L[0-9]+\\s*\\.L[0-9]+\\:\\s*vle16\\.v\\s+v[0-9]+,0\\([a-x0-9]+\\)} 1 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" no-opts \"-flto\"  } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e16,\\s*mf2,\\s*t[au],\\s*m[au]} 4 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-funroll-loops\" no-opts \"-g\" no-opts \"-flto\"  } } } } */\n+/* { dg-final { scan-assembler-times {ble\\t[a-x0-9]+,zero,.L[0-9]+\\s*\\.L[0-9]+\\:\\s*vle16\\.v\\s+v[0-9]+,0\\([a-x0-9]+\\)} 1 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-funroll-loops\" no-opts \"-g\" no-opts \"-flto\"  } } } } */"}, {"sha": "3d8bdbc1ef00707b10d0bc8b2cc3cf9a475e6f49", "filename": "gcc/testsuite/gcc.target/riscv/rvv/vsetvl/vlmax_phi-24.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ee85b3255d638fd77ee3fe17a4e146c81545efb/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_phi-24.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ee85b3255d638fd77ee3fe17a4e146c81545efb/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_phi-24.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_phi-24.c?ref=6ee85b3255d638fd77ee3fe17a4e146c81545efb", "patch": "@@ -36,5 +36,5 @@ void f (void * restrict in, void * restrict out, int n, int cond)\n     }\n }\n \n-/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e16,\\s*mf2,\\s*t[au],\\s*m[au]} 4 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" no-opts \"-flto\"  } } } } */\n-/* { dg-final { scan-assembler-times {ble\\t[a-x0-9]+,zero,.L[0-9]+\\s*\\.L[0-9]+\\:\\s*vle16\\.v\\s+v[0-9]+,0\\([a-x0-9]+\\)} 1 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" no-opts \"-flto\"  } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e16,\\s*mf2,\\s*t[au],\\s*m[au]} 4 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-funroll-loops\" no-opts \"-g\" no-opts \"-flto\"  } } } } */\n+/* { dg-final { scan-assembler-times {ble\\t[a-x0-9]+,zero,.L[0-9]+\\s*\\.L[0-9]+\\:\\s*vle16\\.v\\s+v[0-9]+,0\\([a-x0-9]+\\)} 1 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-funroll-loops\" no-opts \"-g\" no-opts \"-flto\"  } } } } */"}, {"sha": "c4ffa48fccd18477fc6c86f5682a208824c17a67", "filename": "gcc/testsuite/gcc.target/riscv/rvv/vsetvl/vlmax_phi-25.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ee85b3255d638fd77ee3fe17a4e146c81545efb/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_phi-25.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ee85b3255d638fd77ee3fe17a4e146c81545efb/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_phi-25.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_phi-25.c?ref=6ee85b3255d638fd77ee3fe17a4e146c81545efb", "patch": "@@ -36,5 +36,5 @@ void f (void * restrict in, void * restrict out, int n, int cond)\n     }\n }\n \n-/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]} 4 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" no-opts \"-flto\"  } } } } */\n-/* { dg-final { scan-assembler-times {ble\\t[a-x0-9]+,zero,.L[0-9]+\\s*\\.L[0-9]+\\:\\s*vle32\\.v\\s+v[0-9]+,0\\([a-x0-9]+\\)} 1 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" no-opts \"-flto\"  } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]} 4 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-funroll-loops\" no-opts \"-g\" no-opts \"-flto\"  } } } } */\n+/* { dg-final { scan-assembler-times {ble\\t[a-x0-9]+,zero,.L[0-9]+\\s*\\.L[0-9]+\\:\\s*vle32\\.v\\s+v[0-9]+,0\\([a-x0-9]+\\)} 1 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-funroll-loops\" no-opts \"-g\" no-opts \"-flto\"  } } } } */"}, {"sha": "ee4be66b3601ccf80e9622c2860d686ef5a91c58", "filename": "gcc/testsuite/gcc.target/riscv/rvv/vsetvl/vlmax_phi-26.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ee85b3255d638fd77ee3fe17a4e146c81545efb/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_phi-26.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ee85b3255d638fd77ee3fe17a4e146c81545efb/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_phi-26.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_phi-26.c?ref=6ee85b3255d638fd77ee3fe17a4e146c81545efb", "patch": "@@ -36,5 +36,5 @@ void f (void * restrict in, void * restrict out, int n, int cond)\n     }\n }\n \n-/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]} 4 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" no-opts \"-flto\"  } } } } */\n-/* { dg-final { scan-assembler-times {ble\\t[a-x0-9]+,zero,.L[0-9]+\\s*\\.L[0-9]+\\:\\s*vle32\\.v\\s+v[0-9]+,0\\([a-x0-9]+\\)} 1 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" no-opts \"-flto\"  } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]} 4 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-funroll-loops\" no-opts \"-g\" no-opts \"-flto\"  } } } } */\n+/* { dg-final { scan-assembler-times {ble\\t[a-x0-9]+,zero,.L[0-9]+\\s*\\.L[0-9]+\\:\\s*vle32\\.v\\s+v[0-9]+,0\\([a-x0-9]+\\)} 1 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-funroll-loops\" no-opts \"-g\" no-opts \"-flto\"  } } } } */"}, {"sha": "d521e427b881671d1b846ccf7fc55fe0ddb7e87c", "filename": "gcc/testsuite/gcc.target/riscv/rvv/vsetvl/vlmax_phi-27.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ee85b3255d638fd77ee3fe17a4e146c81545efb/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_phi-27.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ee85b3255d638fd77ee3fe17a4e146c81545efb/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_phi-27.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_phi-27.c?ref=6ee85b3255d638fd77ee3fe17a4e146c81545efb", "patch": "@@ -36,5 +36,5 @@ void f (void * restrict in, void * restrict out, int n, int cond)\n     }\n }\n \n-/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]} 4 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" no-opts \"-flto\"  } } } } */\n-/* { dg-final { scan-assembler-times {ble\\t[a-x0-9]+,zero,.L[0-9]+\\s*\\.L[0-9]+\\:\\s*vle32\\.v\\s+v[0-9]+,0\\([a-x0-9]+\\)} 1 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" no-opts \"-flto\"  } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]} 4 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-funroll-loops\" no-opts \"-g\" no-opts \"-flto\"  } } } } */\n+/* { dg-final { scan-assembler-times {ble\\t[a-x0-9]+,zero,.L[0-9]+\\s*\\.L[0-9]+\\:\\s*vle32\\.v\\s+v[0-9]+,0\\([a-x0-9]+\\)} 1 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-funroll-loops\" no-opts \"-g\" no-opts \"-flto\"  } } } } */"}, {"sha": "f215ac5ffba6bdf7a318d887312d5609f7879186", "filename": "gcc/testsuite/gcc.target/riscv/rvv/vsetvl/vlmax_phi-28.c", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ee85b3255d638fd77ee3fe17a4e146c81545efb/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_phi-28.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ee85b3255d638fd77ee3fe17a4e146c81545efb/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_phi-28.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_phi-28.c?ref=6ee85b3255d638fd77ee3fe17a4e146c81545efb", "patch": "@@ -227,11 +227,11 @@ void f7 (void * restrict in, void * restrict out, int n, int cond)\n       *(vbool1_t*)(out + i) = v;\n     }\n }\n-/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]} 4 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" no-opts \"-flto\"  } } } } */\n-/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf4,\\s*t[au],\\s*m[au]} 4 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" no-opts \"-flto\"  } } } } */\n-/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf2,\\s*t[au],\\s*m[au]} 4 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" no-opts \"-flto\"  } } } } */\n-/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*m1,\\s*t[au],\\s*m[au]} 4 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" no-opts \"-flto\"  } } } } */\n-/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*m2,\\s*t[au],\\s*m[au]} 4 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" no-opts \"-flto\"  } } } } */\n-/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*m4,\\s*t[au],\\s*m[au]} 4 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" no-opts \"-flto\"  } } } } */\n-/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*m8,\\s*t[au],\\s*m[au]} 4 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" no-opts \"-flto\"  } } } } */\n-/* { dg-final { scan-assembler-times {ble\\t[a-x0-9]+,zero,.L[0-9]+\\s*\\.L[0-9]+\\:\\s*vlm\\.v\\s*v[0-9]+,0\\([a-x0-9]+\\)} 7 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" no-opts \"-flto\"  } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]} 4 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-funroll-loops\" no-opts \"-g\" no-opts \"-flto\"  } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf4,\\s*t[au],\\s*m[au]} 4 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-funroll-loops\" no-opts \"-g\" no-opts \"-flto\"  } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf2,\\s*t[au],\\s*m[au]} 4 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-funroll-loops\" no-opts \"-g\" no-opts \"-flto\"  } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*m1,\\s*t[au],\\s*m[au]} 4 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-funroll-loops\" no-opts \"-g\" no-opts \"-flto\"  } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*m2,\\s*t[au],\\s*m[au]} 4 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-funroll-loops\" no-opts \"-g\" no-opts \"-flto\"  } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*m4,\\s*t[au],\\s*m[au]} 4 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-funroll-loops\" no-opts \"-g\" no-opts \"-flto\"  } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*m8,\\s*t[au],\\s*m[au]} 4 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-funroll-loops\" no-opts \"-g\" no-opts \"-flto\"  } } } } */\n+/* { dg-final { scan-assembler-times {ble\\t[a-x0-9]+,zero,.L[0-9]+\\s*\\.L[0-9]+\\:\\s*vlm\\.v\\s*v[0-9]+,0\\([a-x0-9]+\\)} 7 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-funroll-loops\" no-opts \"-g\" no-opts \"-flto\"  } } } } */"}, {"sha": "3121f43384038367abeabf6765fa16eb1ca06bea", "filename": "gcc/testsuite/gcc.target/riscv/rvv/vsetvl/vlmax_phi-3.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ee85b3255d638fd77ee3fe17a4e146c81545efb/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_phi-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ee85b3255d638fd77ee3fe17a4e146c81545efb/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_phi-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_phi-3.c?ref=6ee85b3255d638fd77ee3fe17a4e146c81545efb", "patch": "@@ -33,5 +33,5 @@ void f (void * restrict in, void * restrict out, int n, int cond)\n     }\n }\n \n-/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf4,\\s*t[au],\\s*m[au]} 4 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\"   no-opts \"-flto\" } } } } */\n-/* { dg-final { scan-assembler-times {ble\\t[a-x0-9]+,zero,.L[0-9]+\\s*\\.L[0-9]+\\:\\s*vle8\\.v\\s+v[0-9]+,0\\([a-x0-9]+\\)} 1 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\"   no-opts \"-flto\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf4,\\s*t[au],\\s*m[au]} 4 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-funroll-loops\" no-opts \"-g\"   no-opts \"-flto\" } } } } */\n+/* { dg-final { scan-assembler-times {ble\\t[a-x0-9]+,zero,.L[0-9]+\\s*\\.L[0-9]+\\:\\s*vle8\\.v\\s+v[0-9]+,0\\([a-x0-9]+\\)} 1 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-funroll-loops\" no-opts \"-g\"   no-opts \"-flto\" } } } } */"}, {"sha": "1009517c60916432e489172ecc8f84bc3b0e2845", "filename": "gcc/testsuite/gcc.target/riscv/rvv/vsetvl/vlmax_phi-4.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ee85b3255d638fd77ee3fe17a4e146c81545efb/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_phi-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ee85b3255d638fd77ee3fe17a4e146c81545efb/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_phi-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_phi-4.c?ref=6ee85b3255d638fd77ee3fe17a4e146c81545efb", "patch": "@@ -33,5 +33,5 @@ void f (void * restrict in, void * restrict out, int n, int cond)\n     }\n }\n \n-/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf4,\\s*t[au],\\s*m[au]} 4 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\"  no-opts \"-flto\"  } } } } */\n-/* { dg-final { scan-assembler-times {ble\\t[a-x0-9]+,zero,.L[0-9]+\\s*\\.L[0-9]+\\:\\s*vle8\\.v\\s+v[0-9]+,0\\([a-x0-9]+\\)} 1 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\"  no-opts \"-flto\"  } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf4,\\s*t[au],\\s*m[au]} 4 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-funroll-loops\" no-opts \"-g\"  no-opts \"-flto\"  } } } } */\n+/* { dg-final { scan-assembler-times {ble\\t[a-x0-9]+,zero,.L[0-9]+\\s*\\.L[0-9]+\\:\\s*vle8\\.v\\s+v[0-9]+,0\\([a-x0-9]+\\)} 1 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-funroll-loops\" no-opts \"-g\"  no-opts \"-flto\"  } } } } */"}, {"sha": "7c8e5d3d859589254d3edc3e110db851da049b2e", "filename": "gcc/testsuite/gcc.target/riscv/rvv/vsetvl/vlmax_phi-5.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ee85b3255d638fd77ee3fe17a4e146c81545efb/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_phi-5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ee85b3255d638fd77ee3fe17a4e146c81545efb/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_phi-5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_phi-5.c?ref=6ee85b3255d638fd77ee3fe17a4e146c81545efb", "patch": "@@ -33,5 +33,5 @@ void f (void * restrict in, void * restrict out, int n, int cond)\n     }\n }\n \n-/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf2,\\s*t[au],\\s*m[au]} 4 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" no-opts \"-flto\" } } } } */\n-/* { dg-final { scan-assembler-times {ble\\t[a-x0-9]+,zero,.L[0-9]+\\s*\\.L[0-9]+\\:\\s*vle8\\.v\\s+v[0-9]+,0\\([a-x0-9]+\\)} 1 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" no-opts \"-flto\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf2,\\s*t[au],\\s*m[au]} 4 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-funroll-loops\" no-opts \"-g\" no-opts \"-flto\" } } } } */\n+/* { dg-final { scan-assembler-times {ble\\t[a-x0-9]+,zero,.L[0-9]+\\s*\\.L[0-9]+\\:\\s*vle8\\.v\\s+v[0-9]+,0\\([a-x0-9]+\\)} 1 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-funroll-loops\" no-opts \"-g\" no-opts \"-flto\" } } } } */"}, {"sha": "35bb54eaef129b7951b3f9aa2cacaf4c9f8d5524", "filename": "gcc/testsuite/gcc.target/riscv/rvv/vsetvl/vlmax_phi-6.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ee85b3255d638fd77ee3fe17a4e146c81545efb/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_phi-6.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ee85b3255d638fd77ee3fe17a4e146c81545efb/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_phi-6.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_phi-6.c?ref=6ee85b3255d638fd77ee3fe17a4e146c81545efb", "patch": "@@ -33,5 +33,5 @@ void f (void * restrict in, void * restrict out, int n, int cond)\n     }\n }\n \n-/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf2,\\s*t[au],\\s*m[au]} 4 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" no-opts \"-flto\" } } } } */\n-/* { dg-final { scan-assembler-times {ble\\t[a-x0-9]+,zero,.L[0-9]+\\s*\\.L[0-9]+\\:\\s*vle8\\.v\\s+v[0-9]+,0\\([a-x0-9]+\\)} 1 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" no-opts \"-flto\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf2,\\s*t[au],\\s*m[au]} 4 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-funroll-loops\" no-opts \"-g\" no-opts \"-flto\" } } } } */\n+/* { dg-final { scan-assembler-times {ble\\t[a-x0-9]+,zero,.L[0-9]+\\s*\\.L[0-9]+\\:\\s*vle8\\.v\\s+v[0-9]+,0\\([a-x0-9]+\\)} 1 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-funroll-loops\" no-opts \"-g\" no-opts \"-flto\" } } } } */"}, {"sha": "1d766651ce64fef5a35e20340c6605a62d02bff2", "filename": "gcc/testsuite/gcc.target/riscv/rvv/vsetvl/vlmax_phi-7.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ee85b3255d638fd77ee3fe17a4e146c81545efb/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_phi-7.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ee85b3255d638fd77ee3fe17a4e146c81545efb/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_phi-7.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_phi-7.c?ref=6ee85b3255d638fd77ee3fe17a4e146c81545efb", "patch": "@@ -33,5 +33,5 @@ void f (void * restrict in, void * restrict out, int n, int cond)\n     }\n }\n \n-/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e16,\\s*mf4,\\s*t[au],\\s*m[au]} 4 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" no-opts \"-flto\" } } } } */\n-/* { dg-final { scan-assembler-times {ble\\t[a-x0-9]+,zero,.L[0-9]+\\s*\\.L[0-9]+\\:\\s*vle16\\.v\\s+v[0-9]+,0\\([a-x0-9]+\\)} 1 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" no-opts \"-flto\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e16,\\s*mf4,\\s*t[au],\\s*m[au]} 4 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-funroll-loops\" no-opts \"-g\" no-opts \"-flto\" } } } } */\n+/* { dg-final { scan-assembler-times {ble\\t[a-x0-9]+,zero,.L[0-9]+\\s*\\.L[0-9]+\\:\\s*vle16\\.v\\s+v[0-9]+,0\\([a-x0-9]+\\)} 1 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-funroll-loops\" no-opts \"-g\" no-opts \"-flto\" } } } } */"}, {"sha": "8c401140e8250ba36c6f9227c5a20eff90680246", "filename": "gcc/testsuite/gcc.target/riscv/rvv/vsetvl/vlmax_phi-8.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ee85b3255d638fd77ee3fe17a4e146c81545efb/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_phi-8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ee85b3255d638fd77ee3fe17a4e146c81545efb/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_phi-8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_phi-8.c?ref=6ee85b3255d638fd77ee3fe17a4e146c81545efb", "patch": "@@ -33,5 +33,5 @@ void f (void * restrict in, void * restrict out, int n, int cond)\n     }\n }\n \n-/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e16,\\s*mf4,\\s*t[au],\\s*m[au]} 4 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" no-opts \"-flto\" } } } } */\n-/* { dg-final { scan-assembler-times {ble\\t[a-x0-9]+,zero,.L[0-9]+\\s*\\.L[0-9]+\\:\\s*vle16\\.v\\s+v[0-9]+,0\\([a-x0-9]+\\)} 1 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" no-opts \"-flto\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e16,\\s*mf4,\\s*t[au],\\s*m[au]} 4 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-funroll-loops\" no-opts \"-g\" no-opts \"-flto\" } } } } */\n+/* { dg-final { scan-assembler-times {ble\\t[a-x0-9]+,zero,.L[0-9]+\\s*\\.L[0-9]+\\:\\s*vle16\\.v\\s+v[0-9]+,0\\([a-x0-9]+\\)} 1 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-funroll-loops\" no-opts \"-g\" no-opts \"-flto\" } } } } */"}, {"sha": "c6f9c0904cf1a5d8c2001767100db3b2dd0fc2b0", "filename": "gcc/testsuite/gcc.target/riscv/rvv/vsetvl/vlmax_phi-9.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ee85b3255d638fd77ee3fe17a4e146c81545efb/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_phi-9.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ee85b3255d638fd77ee3fe17a4e146c81545efb/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_phi-9.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_phi-9.c?ref=6ee85b3255d638fd77ee3fe17a4e146c81545efb", "patch": "@@ -33,5 +33,5 @@ void f (void * restrict in, void * restrict out, int n, int cond)\n     }\n }\n \n-/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e16,\\s*mf2,\\s*t[au],\\s*m[au]} 4 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" no-opts \"-flto\" } } } } */\n-/* { dg-final { scan-assembler-times {ble\\t[a-x0-9]+,zero,.L[0-9]+\\s*\\.L[0-9]+\\:\\s*vle16\\.v\\s+v[0-9]+,0\\([a-x0-9]+\\)} 1 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" no-opts \"-flto\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e16,\\s*mf2,\\s*t[au],\\s*m[au]} 4 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-funroll-loops\" no-opts \"-g\" no-opts \"-flto\" } } } } */\n+/* { dg-final { scan-assembler-times {ble\\t[a-x0-9]+,zero,.L[0-9]+\\s*\\.L[0-9]+\\:\\s*vle16\\.v\\s+v[0-9]+,0\\([a-x0-9]+\\)} 1 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-funroll-loops\" no-opts \"-g\" no-opts \"-flto\" } } } } */"}, {"sha": "d5f27c614bdd858446a4fb9949245be624ebe2a2", "filename": "gcc/testsuite/gcc.target/riscv/rvv/vsetvl/vlmax_single_block-17.c", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ee85b3255d638fd77ee3fe17a4e146c81545efb/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_single_block-17.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ee85b3255d638fd77ee3fe17a4e146c81545efb/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_single_block-17.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_single_block-17.c?ref=6ee85b3255d638fd77ee3fe17a4e146c81545efb", "patch": "@@ -21,12 +21,12 @@ void foo7 (void * restrict in, void * restrict out)\n   *(vbool64_t*)(out + 7) = v7;\n }\n \n-/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\" no-opts \"-O1\"  no-opts \"-Os\" } } } } */\n-/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf4,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\" no-opts \"-O1\"  no-opts \"-Os\" } } } } */\n-/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf2,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\" no-opts \"-O1\"  no-opts \"-Os\" } } } } */\n-/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*m1,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\" no-opts \"-O1\"  no-opts \"-Os\" } } } } */\n-/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*m2,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\" no-opts \"-O1\"  no-opts \"-Os\" } } } } */\n-/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*m4,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\" no-opts \"-O1\"  no-opts \"-Os\" } } } } */\n-/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*m8,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\" no-opts \"-O1\"  no-opts \"-Os\" } } } } */\n-/* { dg-final { scan-assembler-times {vlm\\.v\\s+(?:v[0-9]|v[1-2][0-9]|v3[0-1]),0\\s*\\([a-x0-9]+\\)} 7 { target { no-opts \"-O0\" no-opts \"-O1\"  no-opts \"-Os\" } } } } */\n-/* { dg-final { scan-assembler-times {vsm\\.v\\s+(?:v[0-9]|v[1-2][0-9]|v3[0-1]),0\\s*\\([a-x0-9]+\\)} 7 { target { no-opts \"-O0\" no-opts \"-O1\"  no-opts \"-Os\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\" no-opts \"-O1\"  no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-Og -g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf4,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\" no-opts \"-O1\"  no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-Og -g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf2,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\" no-opts \"-O1\"  no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-Og -g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*m1,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\" no-opts \"-O1\"  no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-Og -g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*m2,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\" no-opts \"-O1\"  no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-Og -g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*m4,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\" no-opts \"-O1\"  no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-Og -g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*m8,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\" no-opts \"-O1\"  no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-Og -g\" } } } } */\n+/* { dg-final { scan-assembler-times {vlm\\.v\\s+(?:v[0-9]|v[1-2][0-9]|v3[0-1]),0\\s*\\([a-x0-9]+\\)} 7 { target { no-opts \"-O0\" no-opts \"-O1\"  no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-Og -g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsm\\.v\\s+(?:v[0-9]|v[1-2][0-9]|v3[0-1]),0\\s*\\([a-x0-9]+\\)} 7 { target { no-opts \"-O0\" no-opts \"-O1\"  no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-Og -g\" } } } } */"}, {"sha": "c676b6b7aefd126a6046034eaa9fe34ef14a1ef7", "filename": "gcc/testsuite/gcc.target/riscv/rvv/vsetvl/vlmax_single_block-18.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ee85b3255d638fd77ee3fe17a4e146c81545efb/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_single_block-18.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ee85b3255d638fd77ee3fe17a4e146c81545efb/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_single_block-18.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_single_block-18.c?ref=6ee85b3255d638fd77ee3fe17a4e146c81545efb", "patch": "@@ -26,7 +26,7 @@ void f (void * restrict in, void * restrict out)\n   *(vint8mf2_t*)(out + 7) = v7;\n }\n \n-/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\" no-opts \"-O1\"  no-opts \"-Os\" } } } } */\n-/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf4,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\" no-opts \"-O1\"  no-opts \"-Os\" } } } } */\n-/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf2,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\" no-opts \"-O1\"  no-opts \"-Os\" } } } } */\n-/* { dg-final { scan-assembler-times {vsetvli} 3 { target { no-opts \"-O0\" no-opts \"-O1\"  no-opts \"-Os\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\" no-opts \"-O1\"  no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-Og -g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf4,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\" no-opts \"-O1\"  no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-Og -g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf2,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\" no-opts \"-O1\"  no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-Og -g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli} 3 { target { no-opts \"-O0\" no-opts \"-O1\"  no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-Og -g\" } } } } */"}, {"sha": "11f1da32200590d0dd371aebdea10e5fb71cff64", "filename": "gcc/testsuite/gcc.target/riscv/rvv/vsetvl/vlmax_single_block-19.c", "status": "modified", "additions": 16, "deletions": 16, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ee85b3255d638fd77ee3fe17a4e146c81545efb/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_single_block-19.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ee85b3255d638fd77ee3fe17a4e146c81545efb/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_single_block-19.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_single_block-19.c?ref=6ee85b3255d638fd77ee3fe17a4e146c81545efb", "patch": "@@ -81,25 +81,25 @@ void f (void * restrict in, void * restrict out)\n   *(vint16m8_t*)(out + 30) = v30;\n }\n \n-/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e16,\\s*mf4,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\" no-opts \"-O1\"  no-opts \"-Os\" no-opts \"-O2\" } } } } */\n-/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*zero,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\" no-opts \"-O1\"  no-opts \"-Os\" no-opts \"-O2\" } } } } */\n-/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*zero,\\s*e64,\\s*m1,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\" no-opts \"-O1\"  no-opts \"-Os\" no-opts \"-O2\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e16,\\s*mf4,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\" no-opts \"-O1\"  no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-O2\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*zero,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\" no-opts \"-O1\"  no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-O2\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*zero,\\s*e64,\\s*m1,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\" no-opts \"-O1\"  no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-O2\" } } } } */\n \n-/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e16,\\s*mf2,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\" no-opts \"-O1\"  no-opts \"-Os\" no-opts \"-O2\" } } } } */\n-/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*zero,\\s*e32,\\s*m1,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\" no-opts \"-O1\"  no-opts \"-Os\" no-opts \"-O2\" } } } } */\n-/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*zero,\\s*e64,\\s*m2,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\" no-opts \"-O1\"  no-opts \"-Os\" no-opts \"-O2\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e16,\\s*mf2,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\" no-opts \"-O1\"  no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-O2\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*zero,\\s*e32,\\s*m1,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\" no-opts \"-O1\"  no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-O2\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*zero,\\s*e64,\\s*m2,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\" no-opts \"-O1\"  no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-O2\" } } } } */\n \n-/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e16,\\s*m1,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\" no-opts \"-O1\"  no-opts \"-Os\" no-opts \"-O2\" } } } } */\n-/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*zero,\\s*e32,\\s*m2,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\" no-opts \"-O1\"  no-opts \"-Os\" no-opts \"-O2\" } } } } */\n-/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*zero,\\s*e64,\\s*m4,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\" no-opts \"-O1\"  no-opts \"-Os\" no-opts \"-O2\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e16,\\s*m1,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\" no-opts \"-O1\"  no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-O2\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*zero,\\s*e32,\\s*m2,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\" no-opts \"-O1\"  no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-O2\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*zero,\\s*e64,\\s*m4,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\" no-opts \"-O1\"  no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-O2\" } } } } */\n \n-/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e16,\\s*m2,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\" no-opts \"-O1\"  no-opts \"-Os\" no-opts \"-O2\" } } } } */\n-/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*zero,\\s*e32,\\s*m4,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\" no-opts \"-O1\"  no-opts \"-Os\" no-opts \"-O2\" } } } } */\n-/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*zero,\\s*e64,\\s*m8,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\" no-opts \"-O1\"  no-opts \"-Os\" no-opts \"-O2\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e16,\\s*m2,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\" no-opts \"-O1\"  no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-O2\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*zero,\\s*e32,\\s*m4,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\" no-opts \"-O1\"  no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-O2\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*zero,\\s*e64,\\s*m8,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\" no-opts \"-O1\"  no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-O2\" } } } } */\n \n-/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e16,\\s*m4,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\" no-opts \"-O1\"  no-opts \"-Os\" no-opts \"-O2\" } } } } */\n-/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*zero,\\s*e32,\\s*m8,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\" no-opts \"-O1\"  no-opts \"-Os\" no-opts \"-O2\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e16,\\s*m4,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\" no-opts \"-O1\"  no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-O2\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*zero,\\s*e32,\\s*m8,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\" no-opts \"-O1\"  no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-O2\" } } } } */\n \n-/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e16,\\s*m8,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\" no-opts \"-O1\"  no-opts \"-Os\" no-opts \"-O2\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e16,\\s*m8,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\" no-opts \"-O1\"  no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-O2\" } } } } */\n \n-/* { dg-final { scan-assembler-times {vsetvli} 15 { target { no-opts \"-O0\" no-opts \"-O1\"  no-opts \"-Os\" no-opts \"-O2\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli} 15 { target { no-opts \"-O0\" no-opts \"-O1\"  no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-O2\" } } } } */"}, {"sha": "15b10e6bac603655d1375f2207234e2fe1c69708", "filename": "gcc/testsuite/gcc.target/riscv/rvv/vsetvl/vlmax_single_vtype-1.c", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ee85b3255d638fd77ee3fe17a4e146c81545efb/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_single_vtype-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ee85b3255d638fd77ee3fe17a4e146c81545efb/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_single_vtype-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_single_vtype-1.c?ref=6ee85b3255d638fd77ee3fe17a4e146c81545efb", "patch": "@@ -69,18 +69,18 @@ void foo7 (void * restrict in, void * restrict out, int n)\n     }\n }\n \n-/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]\\s+\\.L[0-9]\\:\\s+vlm\\.v\\s+(?:v[0-9]|v[1-2][0-9]|v3[0-1]),0\\s*\\([a-x0-9]+\\)} 1 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n-/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf4,\\s*t[au],\\s*m[au]\\s+\\.L[0-9]\\:\\s+vlm\\.v\\s+(?:v[0-9]|v[1-2][0-9]|v3[0-1]),0\\s*\\([a-x0-9]+\\)} 1 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n-/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf2,\\s*t[au],\\s*m[au]\\s+\\.L[0-9][0-9]\\:\\s+vlm\\.v\\s+(?:v[0-9]|v[1-2][0-9]|v3[0-1]),0\\s*\\([a-x0-9]+\\)} 1 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n-/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*m1,\\s*t[au],\\s*m[au]\\s+\\.L[0-9][0-9]\\:\\s+vlm\\.v\\s+(?:v[0-9]|v[1-2][0-9]|v3[0-1]),0\\s*\\([a-x0-9]+\\)} 1 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n-/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*m2,\\s*t[au],\\s*m[au]\\s+\\.L[0-9][0-9]\\:\\s+vlm\\.v\\s+(?:v[0-9]|v[1-2][0-9]|v3[0-1]),0\\s*\\([a-x0-9]+\\)} 1 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n-/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*m4,\\s*t[au],\\s*m[au]\\s+\\.L[0-9][0-9]\\:\\s+vlm\\.v\\s+(?:v[0-9]|v[1-2][0-9]|v3[0-1]),0\\s*\\([a-x0-9]+\\)} 1 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n-/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*m8,\\s*t[au],\\s*m[au]\\s+\\.L[0-9][0-9]\\:\\s+vlm\\.v\\s+(?:v[0-9]|v[1-2][0-9]|v3[0-1]),0\\s*\\([a-x0-9]+\\)} 1 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]\\s+\\.L[0-9]\\:\\s+vlm\\.v\\s+(?:v[0-9]|v[1-2][0-9]|v3[0-1]),0\\s*\\([a-x0-9]+\\)} 1 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf4,\\s*t[au],\\s*m[au]\\s+\\.L[0-9]\\:\\s+vlm\\.v\\s+(?:v[0-9]|v[1-2][0-9]|v3[0-1]),0\\s*\\([a-x0-9]+\\)} 1 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf2,\\s*t[au],\\s*m[au]\\s+\\.L[0-9][0-9]\\:\\s+vlm\\.v\\s+(?:v[0-9]|v[1-2][0-9]|v3[0-1]),0\\s*\\([a-x0-9]+\\)} 1 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*m1,\\s*t[au],\\s*m[au]\\s+\\.L[0-9][0-9]\\:\\s+vlm\\.v\\s+(?:v[0-9]|v[1-2][0-9]|v3[0-1]),0\\s*\\([a-x0-9]+\\)} 1 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*m2,\\s*t[au],\\s*m[au]\\s+\\.L[0-9][0-9]\\:\\s+vlm\\.v\\s+(?:v[0-9]|v[1-2][0-9]|v3[0-1]),0\\s*\\([a-x0-9]+\\)} 1 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*m4,\\s*t[au],\\s*m[au]\\s+\\.L[0-9][0-9]\\:\\s+vlm\\.v\\s+(?:v[0-9]|v[1-2][0-9]|v3[0-1]),0\\s*\\([a-x0-9]+\\)} 1 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*m8,\\s*t[au],\\s*m[au]\\s+\\.L[0-9][0-9]\\:\\s+vlm\\.v\\s+(?:v[0-9]|v[1-2][0-9]|v3[0-1]),0\\s*\\([a-x0-9]+\\)} 1 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n \n-/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n-/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf4,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n-/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf2,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n-/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*m1,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n-/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*m2,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n-/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*m4,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n-/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*m8,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf4,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf2,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*m1,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*m2,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*m4,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*m8,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */"}, {"sha": "823e50a2f094a52daa0d4cb8ee5699a9b706e0bc", "filename": "gcc/testsuite/gcc.target/riscv/rvv/vsetvl/vlmax_single_vtype-2.c", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ee85b3255d638fd77ee3fe17a4e146c81545efb/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_single_vtype-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ee85b3255d638fd77ee3fe17a4e146c81545efb/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_single_vtype-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_single_vtype-2.c?ref=6ee85b3255d638fd77ee3fe17a4e146c81545efb", "patch": "@@ -33,10 +33,10 @@ void foo3 (void * restrict in, void * restrict out, int n)\n     }\n }\n \n-/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]\\s+\\.L[0-9]\\:\\s+vle8\\.v\\s+(?:v[0-9]|v[1-2][0-9]|v3[0-1]),0\\s*\\([a-x0-9]+\\)} 1 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n-/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf4,\\s*t[au],\\s*m[au]\\s+\\.L[0-9]\\:\\s+vle8\\.v\\s+(?:v[0-9]|v[1-2][0-9]|v3[0-1]),0\\s*\\([a-x0-9]+\\)} 1 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n-/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf2,\\s*t[au],\\s*m[au]\\s+\\.L[0-9][0-9]\\:\\s+vle8\\.v\\s+(?:v[0-9]|v[1-2][0-9]|v3[0-1]),0\\s*\\([a-x0-9]+\\)} 1 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]\\s+\\.L[0-9]\\:\\s+vle8\\.v\\s+(?:v[0-9]|v[1-2][0-9]|v3[0-1]),0\\s*\\([a-x0-9]+\\)} 1 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf4,\\s*t[au],\\s*m[au]\\s+\\.L[0-9]\\:\\s+vle8\\.v\\s+(?:v[0-9]|v[1-2][0-9]|v3[0-1]),0\\s*\\([a-x0-9]+\\)} 1 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf2,\\s*t[au],\\s*m[au]\\s+\\.L[0-9][0-9]\\:\\s+vle8\\.v\\s+(?:v[0-9]|v[1-2][0-9]|v3[0-1]),0\\s*\\([a-x0-9]+\\)} 1 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n \n-/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n-/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf4,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n-/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf2,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf4,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf2,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */"}, {"sha": "1dac01c678f49825e98a6fbd1b21232993cc6806", "filename": "gcc/testsuite/gcc.target/riscv/rvv/vsetvl/vlmax_single_vtype-3.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ee85b3255d638fd77ee3fe17a4e146c81545efb/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_single_vtype-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ee85b3255d638fd77ee3fe17a4e146c81545efb/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_single_vtype-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_single_vtype-3.c?ref=6ee85b3255d638fd77ee3fe17a4e146c81545efb", "patch": "@@ -33,6 +33,6 @@ void foo3 (void * restrict in, void * restrict out, int n)\n     }\n }\n \n-/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]\\s+\\.L[0-9]\\:\\s+vle8\\.v\\s+(?:v[0-9]|v[1-2][0-9]|v3[0-1]),0\\s*\\([a-x0-9]+\\)} 1 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n-/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf4,\\s*t[au],\\s*m[au]\\s+\\.L[0-9]\\:\\s+vle8\\.v\\s+(?:v[0-9]|v[1-2][0-9]|v3[0-1]),0\\s*\\([a-x0-9]+\\)} 1 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n-/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf2,\\s*t[au],\\s*m[au]\\s+\\.L[0-9][0-9]\\:\\s+vle8\\.v\\s+(?:v[0-9]|v[1-2][0-9]|v3[0-1]),0\\s*\\([a-x0-9]+\\)} 1 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]\\s+\\.L[0-9]\\:\\s+vle8\\.v\\s+(?:v[0-9]|v[1-2][0-9]|v3[0-1]),0\\s*\\([a-x0-9]+\\)} 1 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf4,\\s*t[au],\\s*m[au]\\s+\\.L[0-9]\\:\\s+vle8\\.v\\s+(?:v[0-9]|v[1-2][0-9]|v3[0-1]),0\\s*\\([a-x0-9]+\\)} 1 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf2,\\s*t[au],\\s*m[au]\\s+\\.L[0-9][0-9]\\:\\s+vle8\\.v\\s+(?:v[0-9]|v[1-2][0-9]|v3[0-1]),0\\s*\\([a-x0-9]+\\)} 1 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */"}, {"sha": "05321bf68b167e9fa1972e00ae0fa81204a98af2", "filename": "gcc/testsuite/gcc.target/riscv/rvv/vsetvl/vlmax_single_vtype-4.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ee85b3255d638fd77ee3fe17a4e146c81545efb/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_single_vtype-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ee85b3255d638fd77ee3fe17a4e146c81545efb/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_single_vtype-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_single_vtype-4.c?ref=6ee85b3255d638fd77ee3fe17a4e146c81545efb", "patch": "@@ -24,8 +24,8 @@ void foo3 (void * restrict in, void * restrict out, int n)\n     }\n }\n \n-/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e16,\\s*mf2,\\s*t[au],\\s*m[au]\\s+\\.L[0-9]\\:\\s+vle16\\.v\\s+(?:v[0-9]|v[1-2][0-9]|v3[0-1]),0\\s*\\([a-x0-9]+\\)} 1 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n-/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e16,\\s*mf4,\\s*t[au],\\s*m[au]\\s+\\.L[0-9]\\:\\s+vle16\\.v\\s+(?:v[0-9]|v[1-2][0-9]|v3[0-1]),0\\s*\\([a-x0-9]+\\)} 1 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e16,\\s*mf2,\\s*t[au],\\s*m[au]\\s+\\.L[0-9]\\:\\s+vle16\\.v\\s+(?:v[0-9]|v[1-2][0-9]|v3[0-1]),0\\s*\\([a-x0-9]+\\)} 1 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e16,\\s*mf4,\\s*t[au],\\s*m[au]\\s+\\.L[0-9]\\:\\s+vle16\\.v\\s+(?:v[0-9]|v[1-2][0-9]|v3[0-1]),0\\s*\\([a-x0-9]+\\)} 1 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n \n-/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e16,\\s*mf2,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n-/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e16,\\s*mf4,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e16,\\s*mf2,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e16,\\s*mf4,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */"}, {"sha": "016ad75ac426d61926bffd22869efaad8d3af0b9", "filename": "gcc/testsuite/gcc.target/riscv/rvv/vsetvl/vlmax_single_vtype-5.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ee85b3255d638fd77ee3fe17a4e146c81545efb/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_single_vtype-5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ee85b3255d638fd77ee3fe17a4e146c81545efb/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_single_vtype-5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_single_vtype-5.c?ref=6ee85b3255d638fd77ee3fe17a4e146c81545efb", "patch": "@@ -24,8 +24,8 @@ void foo3 (void * restrict in, void * restrict out, int n)\n     }\n }\n \n-/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e16,\\s*mf4,\\s*t[au],\\s*m[au]\\s+\\.L[0-9]\\:\\s+vle16\\.v\\s+(?:v[0-9]|v[1-2][0-9]|v3[0-1]),0\\s*\\([a-x0-9]+\\)} 1 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n-/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e16,\\s*mf2,\\s*t[au],\\s*m[au]\\s+\\.L[0-9]\\:\\s+vle16\\.v\\s+(?:v[0-9]|v[1-2][0-9]|v3[0-1]),0\\s*\\([a-x0-9]+\\)} 1 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e16,\\s*mf4,\\s*t[au],\\s*m[au]\\s+\\.L[0-9]\\:\\s+vle16\\.v\\s+(?:v[0-9]|v[1-2][0-9]|v3[0-1]),0\\s*\\([a-x0-9]+\\)} 1 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e16,\\s*mf2,\\s*t[au],\\s*m[au]\\s+\\.L[0-9]\\:\\s+vle16\\.v\\s+(?:v[0-9]|v[1-2][0-9]|v3[0-1]),0\\s*\\([a-x0-9]+\\)} 1 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n \n-/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e16,\\s*mf4,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n-/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e16,\\s*mf2,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e16,\\s*mf4,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e16,\\s*mf2,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */"}, {"sha": "f96b8c5774507e049103d9a83afa2f9b82b0b83c", "filename": "gcc/testsuite/gcc.target/riscv/rvv/vsetvl/vlmax_single_vtype-6.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ee85b3255d638fd77ee3fe17a4e146c81545efb/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_single_vtype-6.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ee85b3255d638fd77ee3fe17a4e146c81545efb/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_single_vtype-6.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_single_vtype-6.c?ref=6ee85b3255d638fd77ee3fe17a4e146c81545efb", "patch": "@@ -14,5 +14,5 @@ void foo2 (void * restrict in, void * restrict out, int n)\n       *(vint32mf2_t*)(out + i) = v;\n     }\n }\n-/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]\\s+\\.L[0-9]\\:\\s+vle32\\.v\\s+(?:v[0-9]|v[1-2][0-9]|v3[0-1]),0\\s*\\([a-x0-9]+\\)} 1 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n-/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]\\s+\\.L[0-9]\\:\\s+vle32\\.v\\s+(?:v[0-9]|v[1-2][0-9]|v3[0-1]),0\\s*\\([a-x0-9]+\\)} 1 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */"}, {"sha": "c20e7b87016a5ff32d1d40d6ab25f1a00db3476a", "filename": "gcc/testsuite/gcc.target/riscv/rvv/vsetvl/vlmax_single_vtype-7.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ee85b3255d638fd77ee3fe17a4e146c81545efb/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_single_vtype-7.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ee85b3255d638fd77ee3fe17a4e146c81545efb/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_single_vtype-7.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_single_vtype-7.c?ref=6ee85b3255d638fd77ee3fe17a4e146c81545efb", "patch": "@@ -14,5 +14,5 @@ void foo2 (void * restrict in, void * restrict out, int n)\n       *(vuint32mf2_t*)(out + i) = v;\n     }\n }\n-/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]\\s+\\.L[0-9]\\:\\s+vle32\\.v\\s+(?:v[0-9]|v[1-2][0-9]|v3[0-1]),0\\s*\\([a-x0-9]+\\)} 1 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n-/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]\\s+\\.L[0-9]\\:\\s+vle32\\.v\\s+(?:v[0-9]|v[1-2][0-9]|v3[0-1]),0\\s*\\([a-x0-9]+\\)} 1 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */"}, {"sha": "ca6b7fe0951a5e2d35c25564ec7a5c5ea2030bc4", "filename": "gcc/testsuite/gcc.target/riscv/rvv/vsetvl/vlmax_single_vtype-8.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ee85b3255d638fd77ee3fe17a4e146c81545efb/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_single_vtype-8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ee85b3255d638fd77ee3fe17a4e146c81545efb/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_single_vtype-8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_single_vtype-8.c?ref=6ee85b3255d638fd77ee3fe17a4e146c81545efb", "patch": "@@ -14,5 +14,5 @@ void foo2 (void * restrict in, void * restrict out, int n)\n       *(vfloat32mf2_t*)(out + i) = v;\n     }\n }\n-/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]\\s+\\.L[0-9]\\:\\s+vle32\\.v\\s+(?:v[0-9]|v[1-2][0-9]|v3[0-1]),0\\s*\\([a-x0-9]+\\)} 1 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n-/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]\\s+\\.L[0-9]\\:\\s+vle32\\.v\\s+(?:v[0-9]|v[1-2][0-9]|v3[0-1]),0\\s*\\([a-x0-9]+\\)} 1 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */"}, {"sha": "eebc6c0862e8080d589c3ccc53e61d8e56e3d397", "filename": "gcc/testsuite/gcc.target/riscv/rvv/vsetvl/vlmax_switch_vtype-1.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ee85b3255d638fd77ee3fe17a4e146c81545efb/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_switch_vtype-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ee85b3255d638fd77ee3fe17a4e146c81545efb/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_switch_vtype-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_switch_vtype-1.c?ref=6ee85b3255d638fd77ee3fe17a4e146c81545efb", "patch": "@@ -22,5 +22,5 @@ void f (void * restrict in, void * restrict out, int n)\n     }\n }\n \n-/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\"  no-opts \"-O1\"  no-opts \"-Os\" no-opts \"-flto\" no-opts \"-g\" } } } } */\n-/* { dg-final { scan-assembler-times {vsetvli} 1 { target { no-opts \"-O0\" no-opts \"-funroll-loops\" no-opts \"-Os\" no-opts \"-flto\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\"  no-opts \"-O1\"  no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-flto\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli} 1 { target { no-opts \"-O0\" no-opts \"-funroll-loops\" no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-flto\" no-opts \"-g\" } } } } */"}, {"sha": "204058a43bce57014978c22bc5dc856f0fa301d8", "filename": "gcc/testsuite/gcc.target/riscv/rvv/vsetvl/vlmax_switch_vtype-10.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ee85b3255d638fd77ee3fe17a4e146c81545efb/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_switch_vtype-10.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ee85b3255d638fd77ee3fe17a4e146c81545efb/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_switch_vtype-10.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_switch_vtype-10.c?ref=6ee85b3255d638fd77ee3fe17a4e146c81545efb", "patch": "@@ -41,6 +41,6 @@ void foo (int8_t * restrict in, int8_t * restrict out, int n, int cond)\n     }\n }\n \n-/* { dg-final { scan-assembler-times {vsetvli} 9 { target { no-opts \"-O0\" no-opts \"-O1\" no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" no-opts \"-flto\" } } } } */\n-/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]} 3 { target { no-opts \"-O0\" no-opts \"-O1\" no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n-/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e16,\\s*mf2,\\s*t[au],\\s*m[au]} 2 { target { no-opts \"-O0\" no-opts \"-O1\" no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli} 9 { target { no-opts \"-O0\" no-opts \"-O1\" no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-funroll-loops\" no-opts \"-g\" no-opts \"-flto\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]} 3 { target { no-opts \"-O0\" no-opts \"-O1\" no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e16,\\s*mf2,\\s*t[au],\\s*m[au]} 2 { target { no-opts \"-O0\" no-opts \"-O1\" no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */"}, {"sha": "99cf3bd583e07a374e3f6a343fe0127d6aa60f5b", "filename": "gcc/testsuite/gcc.target/riscv/rvv/vsetvl/vlmax_switch_vtype-11.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ee85b3255d638fd77ee3fe17a4e146c81545efb/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_switch_vtype-11.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ee85b3255d638fd77ee3fe17a4e146c81545efb/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_switch_vtype-11.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_switch_vtype-11.c?ref=6ee85b3255d638fd77ee3fe17a4e146c81545efb", "patch": "@@ -52,4 +52,4 @@ void foo (int8_t * restrict in, int8_t * restrict out, int n, int cond1, int con\n     }\n }\n \n-/* { dg-final { scan-assembler-times {vsetvli} 7 { target { no-opts \"-O0\" no-opts \"-O1\" no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli} 7 { target { no-opts \"-O0\" no-opts \"-O1\" no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */"}, {"sha": "b79758527b7a8dd903fc89525d98701f854f2e68", "filename": "gcc/testsuite/gcc.target/riscv/rvv/vsetvl/vlmax_switch_vtype-12.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ee85b3255d638fd77ee3fe17a4e146c81545efb/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_switch_vtype-12.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ee85b3255d638fd77ee3fe17a4e146c81545efb/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_switch_vtype-12.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_switch_vtype-12.c?ref=6ee85b3255d638fd77ee3fe17a4e146c81545efb", "patch": "@@ -51,5 +51,5 @@ void foo (int8_t * restrict in, int8_t * restrict out, int n, int cond1, int con\n       *(vint16mf4_t*)(out + 30000) = v;\n     }\n }\n-/* { dg-final { scan-assembler-times {vsetvli} 9 { target { no-opts \"-O0\" no-opts \"-O1\" no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli} 9 { target { no-opts \"-O0\" no-opts \"-O1\" no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n "}, {"sha": "29b850832f29e2e06232e8196d8db9047e11cc73", "filename": "gcc/testsuite/gcc.target/riscv/rvv/vsetvl/vlmax_switch_vtype-13.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ee85b3255d638fd77ee3fe17a4e146c81545efb/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_switch_vtype-13.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ee85b3255d638fd77ee3fe17a4e146c81545efb/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_switch_vtype-13.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_switch_vtype-13.c?ref=6ee85b3255d638fd77ee3fe17a4e146c81545efb", "patch": "@@ -12,6 +12,6 @@ void f (void * restrict in, void * restrict out, int n)\n   *(vint16mf4_t*)(out + 2) = v2;\n }\n \n-/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\"  no-opts \"-O1\" no-opts \"-Os\" no-opts \"-flto\" no-opts \"-g\" } } } } */\n-/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*zero,\\s*e16,\\s*mf4,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\"  no-opts \"-O1\" no-opts \"-Os\" no-opts \"-flto\" no-opts \"-g\" } } } } */\n-/* { dg-final { scan-assembler-times {vsetvli} 2 { target { no-opts \"-O0\" no-opts \"-funroll-loops\" no-opts \"-Os\" no-opts \"-flto\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\"  no-opts \"-O1\" no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-flto\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*zero,\\s*e16,\\s*mf4,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\"  no-opts \"-O1\" no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-flto\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli} 2 { target { no-opts \"-O0\" no-opts \"-funroll-loops\" no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-flto\" no-opts \"-g\" } } } } */"}, {"sha": "f416a231f0e0c9591c569022183bdc19d2e44921", "filename": "gcc/testsuite/gcc.target/riscv/rvv/vsetvl/vlmax_switch_vtype-14.c", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ee85b3255d638fd77ee3fe17a4e146c81545efb/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_switch_vtype-14.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ee85b3255d638fd77ee3fe17a4e146c81545efb/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_switch_vtype-14.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_switch_vtype-14.c?ref=6ee85b3255d638fd77ee3fe17a4e146c81545efb", "patch": "@@ -32,8 +32,8 @@ void f (void * restrict in, void * restrict out, int32_t * a, int32_t * b, int n\n   }\n }\n \n-/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e16,\\s*mf4,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\"  no-opts \"-funroll-loops\" no-opts \"-O1\" no-opts \"-Os\" no-opts \"-flto\" no-opts \"-g\" } } } } */\n-/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*zero,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\" no-opts \"-funroll-loops\" no-opts \"-O1\" no-opts \"-Os\" no-opts \"-flto\" no-opts \"-g\" } } } } */\n-/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*zero,\\s*e64,\\s*m1,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\"  no-opts \"-funroll-loops\" no-opts \"-O1\" no-opts \"-Os\" no-opts \"-flto\" no-opts \"-g\" } } } } */\n-/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*zero,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\"  no-opts \"-funroll-loops\" no-opts \"-O1\" no-opts \"-Os\" no-opts \"-flto\" no-opts \"-g\" } } } } */\n-/* { dg-final { scan-assembler-times {vsetvli} 4 { target { no-opts \"-O0\" no-opts \"-funroll-loops\" no-opts \"-Os\" no-opts \"-flto\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e16,\\s*mf4,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\"  no-opts \"-funroll-loops\" no-opts \"-O1\" no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-flto\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*zero,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\" no-opts \"-funroll-loops\" no-opts \"-O1\" no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-flto\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*zero,\\s*e64,\\s*m1,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\"  no-opts \"-funroll-loops\" no-opts \"-O1\" no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-flto\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*zero,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\"  no-opts \"-funroll-loops\" no-opts \"-O1\" no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-flto\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli} 4 { target { no-opts \"-O0\" no-opts \"-funroll-loops\" no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-flto\" no-opts \"-g\" } } } } */"}, {"sha": "a39b48ccb9986cb791d625b488ac57996aa33be6", "filename": "gcc/testsuite/gcc.target/riscv/rvv/vsetvl/vlmax_switch_vtype-15.c", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ee85b3255d638fd77ee3fe17a4e146c81545efb/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_switch_vtype-15.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ee85b3255d638fd77ee3fe17a4e146c81545efb/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_switch_vtype-15.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_switch_vtype-15.c?ref=6ee85b3255d638fd77ee3fe17a4e146c81545efb", "patch": "@@ -44,9 +44,9 @@ void f (void * restrict in, void * restrict out, int32_t * a, int32_t * b, int n\n   }\n }\n \n-/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e16,\\s*mf4,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\"  no-opts \"-funroll-loops\" no-opts \"-O1\" no-opts \"-Os\" no-opts \"-flto\" no-opts \"-g\" } } } } */\n-/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*zero,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]} 2 { target { no-opts \"-O0\" no-opts \"-funroll-loops\" no-opts \"-O1\" no-opts \"-Os\" no-opts \"-flto\" no-opts \"-g\" } } } } */\n-/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e16,\\s*mf2,\\s*t[au],\\s*m[au]} 2 { target { no-opts \"-O0\"  no-opts \"-funroll-loops\" no-opts \"-O1\" no-opts \"-Os\" no-opts \"-flto\" no-opts \"-g\" } } } } */\n-/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e64,\\s*m1,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\"  no-opts \"-funroll-loops\" no-opts \"-O1\" no-opts \"-Os\" no-opts \"-flto\" no-opts \"-g\" } } } } */\n-/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\"  no-opts \"-funroll-loops\" no-opts \"-O1\" no-opts \"-Os\" no-opts \"-flto\" no-opts \"-g\" } } } } */\n-/* { dg-final { scan-assembler-times {vsetvli} 7 { target { no-opts \"-O0\" no-opts \"-funroll-loops\" no-opts \"-Os\" no-opts \"-flto\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e16,\\s*mf4,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\"  no-opts \"-funroll-loops\" no-opts \"-O1\" no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-flto\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*zero,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]} 2 { target { no-opts \"-O0\" no-opts \"-funroll-loops\" no-opts \"-O1\" no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-flto\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e16,\\s*mf2,\\s*t[au],\\s*m[au]} 2 { target { no-opts \"-O0\"  no-opts \"-funroll-loops\" no-opts \"-O1\" no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-flto\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e64,\\s*m1,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\"  no-opts \"-funroll-loops\" no-opts \"-O1\" no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-flto\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\"  no-opts \"-funroll-loops\" no-opts \"-O1\" no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-flto\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli} 7 { target { no-opts \"-O0\" no-opts \"-funroll-loops\" no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-flto\" no-opts \"-g\" } } } } */"}, {"sha": "1ab92df0fdca87890f949ed0aabb4f9381381256", "filename": "gcc/testsuite/gcc.target/riscv/rvv/vsetvl/vlmax_switch_vtype-16.c", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ee85b3255d638fd77ee3fe17a4e146c81545efb/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_switch_vtype-16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ee85b3255d638fd77ee3fe17a4e146c81545efb/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_switch_vtype-16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_switch_vtype-16.c?ref=6ee85b3255d638fd77ee3fe17a4e146c81545efb", "patch": "@@ -51,10 +51,10 @@ void f (void * restrict in, void * restrict out, int32_t * a, int32_t * b, int n\n   }\n }\n \n-/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e16,\\s*mf4,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\"  no-opts \"-funroll-loops\" no-opts \"-O1\" no-opts \"-Os\" no-opts \"-flto\" no-opts \"-g\" } } } } */\n-/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*zero,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]} 2 { target { no-opts \"-O0\" no-opts \"-funroll-loops\" no-opts \"-O1\" no-opts \"-Os\" no-opts \"-flto\" no-opts \"-g\" } } } } */\n-/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e16,\\s*mf2,\\s*t[au],\\s*m[au]} 2 { target { no-opts \"-O0\"  no-opts \"-funroll-loops\" no-opts \"-O1\" no-opts \"-Os\" no-opts \"-flto\" no-opts \"-g\" } } } } */\n-/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e64,\\s*m1,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\"  no-opts \"-funroll-loops\" no-opts \"-O1\" no-opts \"-Os\" no-opts \"-flto\" no-opts \"-g\" } } } } */\n-/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*zero,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\"  no-opts \"-funroll-loops\" no-opts \"-O1\" no-opts \"-Os\" no-opts \"-flto\" no-opts \"-g\" } } } } */\n-/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]} 3 { target { no-opts \"-O0\"  no-opts \"-funroll-loops\" no-opts \"-O1\" no-opts \"-Os\" no-opts \"-flto\" no-opts \"-g\" } } } } */\n-/* { dg-final { scan-assembler-times {vsetvli} 10 { target { no-opts \"-O0\" no-opts \"-O1\" no-opts \"-funroll-loops\" no-opts \"-Os\" no-opts \"-flto\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e16,\\s*mf4,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\"  no-opts \"-funroll-loops\" no-opts \"-O1\" no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-flto\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*zero,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]} 2 { target { no-opts \"-O0\" no-opts \"-funroll-loops\" no-opts \"-O1\" no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-flto\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e16,\\s*mf2,\\s*t[au],\\s*m[au]} 2 { target { no-opts \"-O0\"  no-opts \"-funroll-loops\" no-opts \"-O1\" no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-flto\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e64,\\s*m1,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\"  no-opts \"-funroll-loops\" no-opts \"-O1\" no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-flto\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*zero,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\"  no-opts \"-funroll-loops\" no-opts \"-O1\" no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-flto\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]} 3 { target { no-opts \"-O0\"  no-opts \"-funroll-loops\" no-opts \"-O1\" no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-flto\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli} 10 { target { no-opts \"-O0\" no-opts \"-O1\" no-opts \"-funroll-loops\" no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-flto\" no-opts \"-g\" } } } } */"}, {"sha": "1702885796a91d603fdf8db8ca15bd2aebdaa966", "filename": "gcc/testsuite/gcc.target/riscv/rvv/vsetvl/vlmax_switch_vtype-2.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ee85b3255d638fd77ee3fe17a4e146c81545efb/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_switch_vtype-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ee85b3255d638fd77ee3fe17a4e146c81545efb/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_switch_vtype-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_switch_vtype-2.c?ref=6ee85b3255d638fd77ee3fe17a4e146c81545efb", "patch": "@@ -22,5 +22,5 @@ void f (void * restrict in, void * restrict out, int n)\n     }\n }\n \n-/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\"  no-opts \"-O1\" no-opts \"-Os\" no-opts \"-flto\" no-opts \"-g\" } } } } */\n-/* { dg-final { scan-assembler-times {vsetvli} 1 { target { no-opts \"-O0\" no-opts \"-funroll-loops\" no-opts \"-Os\" no-opts \"-flto\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\"  no-opts \"-O1\" no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-flto\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli} 1 { target { no-opts \"-O0\" no-opts \"-funroll-loops\" no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-flto\" no-opts \"-g\" } } } } */"}, {"sha": "00b883f2f38ab079140504f2d7481e3b57e968ef", "filename": "gcc/testsuite/gcc.target/riscv/rvv/vsetvl/vlmax_switch_vtype-3.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ee85b3255d638fd77ee3fe17a4e146c81545efb/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_switch_vtype-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ee85b3255d638fd77ee3fe17a4e146c81545efb/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_switch_vtype-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_switch_vtype-3.c?ref=6ee85b3255d638fd77ee3fe17a4e146c81545efb", "patch": "@@ -22,4 +22,4 @@ void f (void * restrict in, void * restrict out, int n)\n     }\n }\n \n-/* { dg-final { scan-assembler-times {vsetvli} 2 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-flto\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli} 2 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-flto\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */"}, {"sha": "ce30f3aac69e7e9ad79a4b497e195173d29c41fc", "filename": "gcc/testsuite/gcc.target/riscv/rvv/vsetvl/vlmax_switch_vtype-4.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ee85b3255d638fd77ee3fe17a4e146c81545efb/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_switch_vtype-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ee85b3255d638fd77ee3fe17a4e146c81545efb/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_switch_vtype-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_switch_vtype-4.c?ref=6ee85b3255d638fd77ee3fe17a4e146c81545efb", "patch": "@@ -16,5 +16,5 @@ void f (void * restrict in, void * restrict out, int n)\n     }\n }\n \n-/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e16,\\s*mf2,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\"  no-opts \"-O1\"  no-opts \"-Os\" no-opts \"-flto\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */\n-/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]} 2 { target { no-opts \"-O0\"  no-opts \"-O1\"  no-opts \"-Os\" no-opts \"-flto\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e16,\\s*mf2,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\"  no-opts \"-O1\"  no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-flto\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]} 2 { target { no-opts \"-O0\"  no-opts \"-O1\"  no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-flto\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */"}, {"sha": "ce30f3aac69e7e9ad79a4b497e195173d29c41fc", "filename": "gcc/testsuite/gcc.target/riscv/rvv/vsetvl/vlmax_switch_vtype-5.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ee85b3255d638fd77ee3fe17a4e146c81545efb/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_switch_vtype-5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ee85b3255d638fd77ee3fe17a4e146c81545efb/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_switch_vtype-5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_switch_vtype-5.c?ref=6ee85b3255d638fd77ee3fe17a4e146c81545efb", "patch": "@@ -16,5 +16,5 @@ void f (void * restrict in, void * restrict out, int n)\n     }\n }\n \n-/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e16,\\s*mf2,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\"  no-opts \"-O1\"  no-opts \"-Os\" no-opts \"-flto\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */\n-/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]} 2 { target { no-opts \"-O0\"  no-opts \"-O1\"  no-opts \"-Os\" no-opts \"-flto\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e16,\\s*mf2,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\"  no-opts \"-O1\"  no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-flto\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]} 2 { target { no-opts \"-O0\"  no-opts \"-O1\"  no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-flto\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */"}, {"sha": "f7e354314b5a8638875bebe19a64b8569cf86633", "filename": "gcc/testsuite/gcc.target/riscv/rvv/vsetvl/vlmax_switch_vtype-6.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ee85b3255d638fd77ee3fe17a4e146c81545efb/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_switch_vtype-6.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ee85b3255d638fd77ee3fe17a4e146c81545efb/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_switch_vtype-6.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_switch_vtype-6.c?ref=6ee85b3255d638fd77ee3fe17a4e146c81545efb", "patch": "@@ -29,5 +29,5 @@ void foo (void * restrict in, void * restrict out, int n)\n     }\n }\n \n-/* { dg-final { scan-assembler-times {vsetvli} 7 { target { no-opts \"-O0\" no-opts \"-O1\" no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n-/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]} 2 { target { no-opts \"-O0\" no-opts \"-O1\" no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli} 7 { target { no-opts \"-O0\" no-opts \"-O1\" no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]} 2 { target { no-opts \"-O0\" no-opts \"-O1\" no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */"}, {"sha": "28c017d6130fc0e40c70d4815521f0260fed1671", "filename": "gcc/testsuite/gcc.target/riscv/rvv/vsetvl/vlmax_switch_vtype-7.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ee85b3255d638fd77ee3fe17a4e146c81545efb/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_switch_vtype-7.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ee85b3255d638fd77ee3fe17a4e146c81545efb/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_switch_vtype-7.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_switch_vtype-7.c?ref=6ee85b3255d638fd77ee3fe17a4e146c81545efb", "patch": "@@ -39,5 +39,5 @@ void foo (int8_t * restrict in, int8_t * restrict out, int n)\n     }\n }\n \n-/* { dg-final { scan-assembler-times {vsetvli} 7 { target { no-opts \"-O0\" no-opts \"-O1\" no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n-/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]} 2 { target { no-opts \"-O0\" no-opts \"-O1\" no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli} 7 { target { no-opts \"-O0\" no-opts \"-O1\" no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]} 2 { target { no-opts \"-O0\" no-opts \"-O1\" no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */"}, {"sha": "06bb695f7d12ac5b88810e7906c6ae732099d335", "filename": "gcc/testsuite/gcc.target/riscv/rvv/vsetvl/vlmax_switch_vtype-8.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ee85b3255d638fd77ee3fe17a4e146c81545efb/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_switch_vtype-8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ee85b3255d638fd77ee3fe17a4e146c81545efb/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_switch_vtype-8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_switch_vtype-8.c?ref=6ee85b3255d638fd77ee3fe17a4e146c81545efb", "patch": "@@ -40,6 +40,6 @@ void foo (int8_t * restrict in, int8_t * restrict out, int n, int cond)\n       *(vint32mf2_t*)(out + i + 700) = v6;\n     }\n }\n-/* { dg-final { scan-assembler-times {vsetvli} 7 { target { no-opts \"-O0\" no-opts \"-O1\" no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n-/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]} 2 { target { no-opts \"-O0\" no-opts \"-O1\" no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n-/* { dg-final { scan-assembler-not {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e16\\s*mf4,\\s*t[au],\\s*m[au]} { target { no-opts \"-O0\" no-opts \"-O1\" no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli} 7 { target { no-opts \"-O0\" no-opts \"-O1\" no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]} 2 { target { no-opts \"-O0\" no-opts \"-O1\" no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-not {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e16\\s*mf4,\\s*t[au],\\s*m[au]} { target { no-opts \"-O0\" no-opts \"-O1\" no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */"}, {"sha": "06bb695f7d12ac5b88810e7906c6ae732099d335", "filename": "gcc/testsuite/gcc.target/riscv/rvv/vsetvl/vlmax_switch_vtype-9.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ee85b3255d638fd77ee3fe17a4e146c81545efb/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_switch_vtype-9.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ee85b3255d638fd77ee3fe17a4e146c81545efb/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_switch_vtype-9.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_switch_vtype-9.c?ref=6ee85b3255d638fd77ee3fe17a4e146c81545efb", "patch": "@@ -40,6 +40,6 @@ void foo (int8_t * restrict in, int8_t * restrict out, int n, int cond)\n       *(vint32mf2_t*)(out + i + 700) = v6;\n     }\n }\n-/* { dg-final { scan-assembler-times {vsetvli} 7 { target { no-opts \"-O0\" no-opts \"-O1\" no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n-/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]} 2 { target { no-opts \"-O0\" no-opts \"-O1\" no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n-/* { dg-final { scan-assembler-not {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e16\\s*mf4,\\s*t[au],\\s*m[au]} { target { no-opts \"-O0\" no-opts \"-O1\" no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli} 7 { target { no-opts \"-O0\" no-opts \"-O1\" no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]} 2 { target { no-opts \"-O0\" no-opts \"-O1\" no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-not {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e16\\s*mf4,\\s*t[au],\\s*m[au]} { target { no-opts \"-O0\" no-opts \"-O1\" no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */"}, {"sha": "e0c6588b1db1c8c8d178db27f6fcca08fc9109ed", "filename": "gcc/testsuite/gcc.target/riscv/rvv/vsetvl/vsetvl-16.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ee85b3255d638fd77ee3fe17a4e146c81545efb/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvsetvl-16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ee85b3255d638fd77ee3fe17a4e146c81545efb/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvsetvl-16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvsetvl-16.c?ref=6ee85b3255d638fd77ee3fe17a4e146c81545efb", "patch": "@@ -16,5 +16,5 @@ void f(int8_t *base, int8_t *out, size_t vl, size_t m) {\n   }\n }\n \n-/* { dg-final { scan-assembler-times {vsetvli} 3 { target { no-opts \"-O0\" no-opts \"-Os\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli} 3 { target { no-opts \"-O0\" no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */\n /* { dg-final { scan-assembler-times {slli\\s+[a-x0-9]+,\\s*[a-x0-9]+,\\s*10} 1 { target { no-opts \"-O0\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */"}, {"sha": "0c5da5e640c6ec1d64af323e336dd778f50656c3", "filename": "gcc/testsuite/gcc.target/riscv/rvv/vsetvl/vsetvl-2.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ee85b3255d638fd77ee3fe17a4e146c81545efb/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvsetvl-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ee85b3255d638fd77ee3fe17a4e146c81545efb/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvsetvl-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvsetvl-2.c?ref=6ee85b3255d638fd77ee3fe17a4e146c81545efb", "patch": "@@ -17,4 +17,4 @@ void f(int8_t *base, int8_t *out, size_t vl, size_t m) {\n }\n \n /* { dg-final { scan-assembler-times {slli\\s+[a-x0-9]+,\\s*[a-x0-9]+,\\s*10} 1 { target { no-opts \"-O0\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */\n-/* { dg-final { scan-assembler-times {vsetvli} 3 { target { no-opts \"-O0\" no-opts \"-Os\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli} 3 { target { no-opts \"-O0\" no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */"}, {"sha": "f995e04aacc1436aee1eee6fc883dedf6ff696dd", "filename": "gcc/testsuite/gcc.target/riscv/rvv/vsetvl/vsetvl-3.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ee85b3255d638fd77ee3fe17a4e146c81545efb/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvsetvl-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ee85b3255d638fd77ee3fe17a4e146c81545efb/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvsetvl-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvsetvl-3.c?ref=6ee85b3255d638fd77ee3fe17a4e146c81545efb", "patch": "@@ -18,4 +18,4 @@ void f(int8_t *base, int8_t *out, size_t vl, size_t m) {\n }\n \n /* { dg-final { scan-assembler-times {slli\\s+[a-x0-9]+,\\s*[a-x0-9]+,\\s*10} 1 { target { no-opts \"-O0\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */\n-/* { dg-final { scan-assembler-times {vsetvli} 3 { target { no-opts \"-O0\" no-opts \"-Os\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli} 3 { target { no-opts \"-O0\" no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */"}, {"sha": "41639317d0506a2c88e8784cdd91c91f831674cd", "filename": "gcc/testsuite/gcc.target/riscv/rvv/vsetvl/vsetvl-4.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ee85b3255d638fd77ee3fe17a4e146c81545efb/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvsetvl-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ee85b3255d638fd77ee3fe17a4e146c81545efb/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvsetvl-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvsetvl-4.c?ref=6ee85b3255d638fd77ee3fe17a4e146c81545efb", "patch": "@@ -18,4 +18,4 @@ void f(int8_t *base, int8_t *out, size_t vl, size_t m) {\n }\n \n /* { dg-final { scan-assembler-times {slli\\s+[a-x0-9]+,\\s*[a-x0-9]+,\\s*10} 1 { target { no-opts \"-O0\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */\n-/* { dg-final { scan-assembler-times {vsetvli} 2 { target { no-opts \"-O0\" no-opts \"-Os\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli} 2 { target { no-opts \"-O0\" no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */"}, {"sha": "e84e32b25094619a83e4faf6c7137eaf56befe92", "filename": "gcc/testsuite/gcc.target/riscv/rvv/vsetvl/vsetvl-5.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ee85b3255d638fd77ee3fe17a4e146c81545efb/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvsetvl-5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ee85b3255d638fd77ee3fe17a4e146c81545efb/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvsetvl-5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvsetvl-5.c?ref=6ee85b3255d638fd77ee3fe17a4e146c81545efb", "patch": "@@ -12,6 +12,6 @@ void foo(int32_t *in1, int32_t *in2, int32_t *in3, int32_t *out, size_t n, size_\n   }\n }\n \n-/* { dg-final { scan-assembler-times {\\.L[0-9]+\\:\\s+vle32\\.v\\s+v[0-9]+,\\s*0\\s*\\([a-x0-9]+\\)} 1 { target { no-opts \"-O0\" no-opts \"-Os\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */\n+/* { dg-final { scan-assembler-times {\\.L[0-9]+\\:\\s+vle32\\.v\\s+v[0-9]+,\\s*0\\s*\\([a-x0-9]+\\)} 1 { target { no-opts \"-O0\" no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */\n /* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*tu,\\s*m[au]} 1 { target { no-opts \"-O0\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */\n /* { dg-final { scan-assembler-times {vsetvli} 1 { target { no-opts \"-O0\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */"}, {"sha": "fb7abdeb96865b724d881f053eb3d5aca5ad6c23", "filename": "gcc/testsuite/gcc.target/riscv/rvv/vsetvl/vsetvl-6.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ee85b3255d638fd77ee3fe17a4e146c81545efb/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvsetvl-6.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ee85b3255d638fd77ee3fe17a4e146c81545efb/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvsetvl-6.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvsetvl-6.c?ref=6ee85b3255d638fd77ee3fe17a4e146c81545efb", "patch": "@@ -17,6 +17,6 @@ void foo(int32_t *in1, int32_t *in2, int32_t *in3, int32_t *out, size_t n, size_\n   }\n }\n \n-/* { dg-final { scan-assembler-times {\\.L[0-9]+\\:\\s+vle32\\.v\\s+v[0-9]+,\\s*0\\s*\\([a-x0-9]+\\)} 2 { target { no-opts \"-O0\" no-opts \"-Os\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */\n+/* { dg-final { scan-assembler-times {\\.L[0-9]+\\:\\s+vle32\\.v\\s+v[0-9]+,\\s*0\\s*\\([a-x0-9]+\\)} 2 { target { no-opts \"-O0\" no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */\n /* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*tu,\\s*m[au]} 1 { target { no-opts \"-O0\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */\n-/* { dg-final { scan-assembler-times {vsetvli} 1 { target { no-opts \"-O0\" no-opts \"-Os\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli} 1 { target { no-opts \"-O0\" no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */"}, {"sha": "5fa2f2bc29476719eda027bdcbf7d797e156a9dc", "filename": "gcc/testsuite/gcc.target/riscv/rvv/vsetvl/vsetvl-7.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ee85b3255d638fd77ee3fe17a4e146c81545efb/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvsetvl-7.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ee85b3255d638fd77ee3fe17a4e146c81545efb/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvsetvl-7.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvsetvl-7.c?ref=6ee85b3255d638fd77ee3fe17a4e146c81545efb", "patch": "@@ -12,6 +12,6 @@ void foo(int32_t *in1, int32_t *in2, int32_t *in3, int32_t *out, size_t n, size_\n   }\n }\n \n-/* { dg-final { scan-assembler-times {\\.L[0-9]+\\:\\s+vle32\\.v\\s+v[0-9]+,\\s*0\\s*\\([a-x0-9]+\\)} 1 { target { no-opts \"-O0\" no-opts \"-Os\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */\n+/* { dg-final { scan-assembler-times {\\.L[0-9]+\\:\\s+vle32\\.v\\s+v[0-9]+,\\s*0\\s*\\([a-x0-9]+\\)} 1 { target { no-opts \"-O0\" no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */\n /* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*tu,\\s*m[au]} 1 { target { no-opts \"-O0\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */\n /* { dg-final { scan-assembler-times {vsetvli} 1 { target { no-opts \"-O0\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */"}, {"sha": "55cc770cfde799d91818bc2c26c3a28ff0b5cf17", "filename": "gcc/testsuite/gcc.target/riscv/rvv/vsetvl/vsetvl-8.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ee85b3255d638fd77ee3fe17a4e146c81545efb/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvsetvl-8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ee85b3255d638fd77ee3fe17a4e146c81545efb/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvsetvl-8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvsetvl-8.c?ref=6ee85b3255d638fd77ee3fe17a4e146c81545efb", "patch": "@@ -17,6 +17,6 @@ void foo(int32_t *in1, int32_t *in2, int32_t *in3, int32_t *out, size_t n, size_\n   }\n }\n \n-/* { dg-final { scan-assembler-times {\\.L[0-9]+\\:\\s+vle32\\.v\\s+v[0-9]+,\\s*0\\s*\\([a-x0-9]+\\)} 2 { target { no-opts \"-O0\" no-opts \"-Os\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */\n+/* { dg-final { scan-assembler-times {\\.L[0-9]+\\:\\s+vle32\\.v\\s+v[0-9]+,\\s*0\\s*\\([a-x0-9]+\\)} 2 { target { no-opts \"-O0\" no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */\n /* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*tu,\\s*m[au]} 1 { target { no-opts \"-O0\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */\n-/* { dg-final { scan-assembler-times {vsetvli} 1 { target { no-opts \"-O0\" no-opts \"-Os\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli} 1 { target { no-opts \"-O0\" no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */"}, {"sha": "96f169079500dfdf94a61c6c6fe693f178eefeeb", "filename": "gcc/testsuite/gcc.target/riscv/rvv/vsetvl/vsetvlmax-1.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ee85b3255d638fd77ee3fe17a4e146c81545efb/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvsetvlmax-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ee85b3255d638fd77ee3fe17a4e146c81545efb/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvsetvlmax-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvsetvlmax-1.c?ref=6ee85b3255d638fd77ee3fe17a4e146c81545efb", "patch": "@@ -12,6 +12,6 @@ void foo(int32_t *in1, int32_t *in2, int32_t *in3, int32_t *out, size_t n) {\n   }\n }\n \n-/* { dg-final { scan-assembler-times {\\.L[0-9]+\\:\\s+vle32\\.v\\s+v[0-9]+,\\s*0\\s*\\([a-x0-9]+\\)} 1 { target { no-opts \"-O0\" no-opts \"-Os\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */\n+/* { dg-final { scan-assembler-times {\\.L[0-9]+\\:\\s+vle32\\.v\\s+v[0-9]+,\\s*0\\s*\\([a-x0-9]+\\)} 1 { target { no-opts \"-O0\" no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */\n /* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e32,\\s*m1,\\s*tu,\\s*m[au]} 1 { target { no-opts \"-O0\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */\n /* { dg-final { scan-assembler-times {vsetvli} 1 { target { no-opts \"-O0\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */"}, {"sha": "ae1db0a905fa7cda5f3e86fc476325caa2011057", "filename": "gcc/testsuite/gcc.target/riscv/rvv/vsetvl/vsetvlmax-14.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ee85b3255d638fd77ee3fe17a4e146c81545efb/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvsetvlmax-14.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ee85b3255d638fd77ee3fe17a4e146c81545efb/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvsetvlmax-14.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvsetvlmax-14.c?ref=6ee85b3255d638fd77ee3fe17a4e146c81545efb", "patch": "@@ -13,6 +13,6 @@ void f(int8_t *base, int8_t *out, size_t vl, size_t m) {\n   }\n }\n \n-/* { dg-final { scan-assembler-times {\\.L[0-9]+\\:\\s+vle8\\.v\\s+v[0-9]+,\\s*0\\s*\\([a-x0-9]+\\)} 1 { target { no-opts \"-O0\" no-opts \"-Os\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */\n+/* { dg-final { scan-assembler-times {\\.L[0-9]+\\:\\s+vle8\\.v\\s+v[0-9]+,\\s*0\\s*\\([a-x0-9]+\\)} 1 { target { no-opts \"-O0\" no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */\n /* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf8,\\s*tu,\\s*m[au]} 1 { target { no-opts \"-O0\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */\n /* { dg-final { scan-assembler-times {vsetvli} 1 { target { no-opts \"-O0\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */\n\\ No newline at end of file"}, {"sha": "e34e2c99e889b903084e5ef2702fff94a675a044", "filename": "gcc/testsuite/gcc.target/riscv/rvv/vsetvl/vsetvlmax-18.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ee85b3255d638fd77ee3fe17a4e146c81545efb/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvsetvlmax-18.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ee85b3255d638fd77ee3fe17a4e146c81545efb/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvsetvlmax-18.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvsetvlmax-18.c?ref=6ee85b3255d638fd77ee3fe17a4e146c81545efb", "patch": "@@ -16,4 +16,4 @@ void f(int8_t *base, int8_t *out, size_t vl, size_t m, size_t n) {\n   }\n }\n \n-/* { dg-final { scan-assembler-times {vsetvli} 4 { target { no-opts \"-O0\" no-opts \"-Os\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli} 4 { target { no-opts \"-O0\" no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */"}, {"sha": "a7a8406374da420fc0425cc9fb5d633f5bce6262", "filename": "gcc/tree-if-conv.cc", "status": "modified", "additions": 38, "deletions": 3, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ee85b3255d638fd77ee3fe17a4e146c81545efb/gcc%2Ftree-if-conv.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ee85b3255d638fd77ee3fe17a4e146c81545efb/gcc%2Ftree-if-conv.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-if-conv.cc?ref=6ee85b3255d638fd77ee3fe17a4e146c81545efb", "patch": "@@ -123,6 +123,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"tree-ssa-dse.h\"\n #include \"tree-vectorizer.h\"\n #include \"tree-eh.h\"\n+#include \"cgraph.h\"\n \n /* For lang_hooks.types.type_for_mode.  */\n #include \"langhooks.h\"\n@@ -1063,7 +1064,8 @@ if_convertible_gimple_assign_stmt_p (gimple *stmt,\n    A statement is if-convertible if:\n    - it is an if-convertible GIMPLE_ASSIGN,\n    - it is a GIMPLE_LABEL or a GIMPLE_COND,\n-   - it is builtins call.  */\n+   - it is builtins call,\n+   - it is a call to a function with a SIMD clone.  */\n \n static bool\n if_convertible_stmt_p (gimple *stmt, vec<data_reference_p> refs)\n@@ -1083,13 +1085,23 @@ if_convertible_stmt_p (gimple *stmt, vec<data_reference_p> refs)\n \ttree fndecl = gimple_call_fndecl (stmt);\n \tif (fndecl)\n \t  {\n+\t    /* We can vectorize some builtins and functions with SIMD\n+\t       \"inbranch\" clones.  */\n \t    int flags = gimple_call_flags (stmt);\n+\t    struct cgraph_node *node = cgraph_node::get (fndecl);\n \t    if ((flags & ECF_CONST)\n \t\t&& !(flags & ECF_LOOPING_CONST_OR_PURE)\n-\t\t/* We can only vectorize some builtins at the moment,\n-\t\t   so restrict if-conversion to those.  */\n \t\t&& fndecl_built_in_p (fndecl))\n \t      return true;\n+\t    if (node && node->simd_clones != NULL)\n+\t      /* Ensure that at least one clone can be \"inbranch\".  */\n+\t      for (struct cgraph_node *n = node->simd_clones; n != NULL;\n+\t\t   n = n->simdclone->next_clone)\n+\t\tif (n->simdclone->inbranch)\n+\t\t  {\n+\t\t    need_to_predicate = true;\n+\t\t    return true;\n+\t\t  }\n \t  }\n \treturn false;\n       }\n@@ -2613,6 +2625,29 @@ predicate_statements (loop_p loop)\n \t      gimple_assign_set_rhs1 (stmt, ifc_temp_var (type, rhs, &gsi));\n \t      update_stmt (stmt);\n \t    }\n+\n+\t  /* Convert functions that have a SIMD clone to IFN_MASK_CALL.  This\n+\t     will cause the vectorizer to match the \"in branch\" clone variants,\n+\t     and serves to build the mask vector in a natural way.  */\n+\t  gcall *call = dyn_cast <gcall *> (gsi_stmt (gsi));\n+\t  if (call && !gimple_call_internal_p (call))\n+\t    {\n+\t      tree orig_fn = gimple_call_fn (call);\n+\t      int orig_nargs = gimple_call_num_args (call);\n+\t      auto_vec<tree> args;\n+\t      args.safe_push (orig_fn);\n+\t      for (int i = 0; i < orig_nargs; i++)\n+\t\targs.safe_push (gimple_call_arg (call, i));\n+\t      args.safe_push (cond);\n+\n+\t      /* Replace the call with a IFN_MASK_CALL that has the extra\n+\t\t condition parameter. */\n+\t      gcall *new_call = gimple_build_call_internal_vec (IFN_MASK_CALL,\n+\t\t\t\t\t\t\t\targs);\n+\t      gimple_call_set_lhs (new_call, gimple_call_lhs (call));\n+\t      gsi_replace (&gsi, new_call, true);\n+\t    }\n+\n \t  lhs = gimple_get_lhs (gsi_stmt (gsi));\n \t  if (lhs && TREE_CODE (lhs) == SSA_NAME)\n \t    ssa_names.add (lhs);"}, {"sha": "ab7af0ea3b8b5029433913f6ba8d9c8511e723c1", "filename": "gcc/tree-vect-loop.cc", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ee85b3255d638fd77ee3fe17a4e146c81545efb/gcc%2Ftree-vect-loop.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ee85b3255d638fd77ee3fe17a4e146c81545efb/gcc%2Ftree-vect-loop.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-loop.cc?ref=6ee85b3255d638fd77ee3fe17a4e146c81545efb", "patch": "@@ -2125,6 +2125,14 @@ vect_get_datarefs_in_loop (loop_p loop, basic_block *bbs,\n \t    if (is_gimple_call (stmt) && loop->safelen)\n \t      {\n \t\ttree fndecl = gimple_call_fndecl (stmt), op;\n+\t\tif (fndecl == NULL_TREE\n+\t\t    && gimple_call_internal_p (stmt, IFN_MASK_CALL))\n+\t\t  {\n+\t\t    fndecl = gimple_call_arg (stmt, 0);\n+\t\t    gcc_checking_assert (TREE_CODE (fndecl) == ADDR_EXPR);\n+\t\t    fndecl = TREE_OPERAND (fndecl, 0);\n+\t\t    gcc_checking_assert (TREE_CODE (fndecl) == FUNCTION_DECL);\n+\t\t  }\n \t\tif (fndecl != NULL_TREE)\n \t\t  {\n \t\t    cgraph_node *node = cgraph_node::get (fndecl);"}, {"sha": "9e5ffbe252e66e706a1dbe80705faa9c54ea61f9", "filename": "gcc/tree-vect-stmts.cc", "status": "modified", "additions": 123, "deletions": 29, "changes": 152, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ee85b3255d638fd77ee3fe17a4e146c81545efb/gcc%2Ftree-vect-stmts.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ee85b3255d638fd77ee3fe17a4e146c81545efb/gcc%2Ftree-vect-stmts.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-stmts.cc?ref=6ee85b3255d638fd77ee3fe17a4e146c81545efb", "patch": "@@ -4004,13 +4004,23 @@ vectorizable_simd_clone_call (vec_info *vinfo, stmt_vec_info stmt_info,\n   size_t i, nargs;\n   tree lhs, rtype, ratype;\n   vec<constructor_elt, va_gc> *ret_ctor_elts = NULL;\n+  int arg_offset = 0;\n \n   /* Is STMT a vectorizable call?   */\n   gcall *stmt = dyn_cast <gcall *> (stmt_info->stmt);\n   if (!stmt)\n     return false;\n \n   fndecl = gimple_call_fndecl (stmt);\n+  if (fndecl == NULL_TREE\n+      && gimple_call_internal_p (stmt, IFN_MASK_CALL))\n+    {\n+      fndecl = gimple_call_arg (stmt, 0);\n+      gcc_checking_assert (TREE_CODE (fndecl) == ADDR_EXPR);\n+      fndecl = TREE_OPERAND (fndecl, 0);\n+      gcc_checking_assert (TREE_CODE (fndecl) == FUNCTION_DECL);\n+      arg_offset = 1;\n+    }\n   if (fndecl == NULL_TREE)\n     return false;\n \n@@ -4041,7 +4051,7 @@ vectorizable_simd_clone_call (vec_info *vinfo, stmt_vec_info stmt_info,\n     return false;\n \n   /* Process function arguments.  */\n-  nargs = gimple_call_num_args (stmt);\n+  nargs = gimple_call_num_args (stmt) - arg_offset;\n \n   /* Bail out if the function has zero arguments.  */\n   if (nargs == 0)\n@@ -4059,7 +4069,7 @@ vectorizable_simd_clone_call (vec_info *vinfo, stmt_vec_info stmt_info,\n       thisarginfo.op = NULL_TREE;\n       thisarginfo.simd_lane_linear = false;\n \n-      op = gimple_call_arg (stmt, i);\n+      op = gimple_call_arg (stmt, i + arg_offset);\n       if (!vect_is_simple_use (op, vinfo, &thisarginfo.dt,\n \t\t\t       &thisarginfo.vectype)\n \t  || thisarginfo.dt == vect_uninitialized_def)\n@@ -4074,16 +4084,7 @@ vectorizable_simd_clone_call (vec_info *vinfo, stmt_vec_info stmt_info,\n \t  || thisarginfo.dt == vect_external_def)\n \tgcc_assert (thisarginfo.vectype == NULL_TREE);\n       else\n-\t{\n-\t  gcc_assert (thisarginfo.vectype != NULL_TREE);\n-\t  if (VECTOR_BOOLEAN_TYPE_P (thisarginfo.vectype))\n-\t    {\n-\t      if (dump_enabled_p ())\n-\t\tdump_printf_loc (MSG_MISSED_OPTIMIZATION, vect_location,\n-\t\t\t\t \"vector mask arguments are not supported\\n\");\n-\t      return false;\n-\t    }\n-\t}\n+\tgcc_assert (thisarginfo.vectype != NULL_TREE);\n \n       /* For linear arguments, the analyze phase should have saved\n \t the base and step in STMT_VINFO_SIMD_CLONE_INFO.  */\n@@ -4176,17 +4177,14 @@ vectorizable_simd_clone_call (vec_info *vinfo, stmt_vec_info stmt_info,\n \tif (target_badness < 0)\n \t  continue;\n \tthis_badness += target_badness * 512;\n-\t/* FORNOW: Have to add code to add the mask argument.  */\n-\tif (n->simdclone->inbranch)\n-\t  continue;\n \tfor (i = 0; i < nargs; i++)\n \t  {\n \t    switch (n->simdclone->args[i].arg_type)\n \t      {\n \t      case SIMD_CLONE_ARG_TYPE_VECTOR:\n \t\tif (!useless_type_conversion_p\n \t\t\t(n->simdclone->args[i].orig_type,\n-\t\t\t TREE_TYPE (gimple_call_arg (stmt, i))))\n+\t\t\t TREE_TYPE (gimple_call_arg (stmt, i + arg_offset))))\n \t\t  i = -1;\n \t\telse if (arginfo[i].dt == vect_constant_def\n \t\t\t || arginfo[i].dt == vect_external_def\n@@ -4216,7 +4214,7 @@ vectorizable_simd_clone_call (vec_info *vinfo, stmt_vec_info stmt_info,\n \t\ti = -1;\n \t\tbreak;\n \t      case SIMD_CLONE_ARG_TYPE_MASK:\n-\t\tgcc_unreachable ();\n+\t\tbreak;\n \t      }\n \t    if (i == (size_t) -1)\n \t      break;\n@@ -4242,18 +4240,55 @@ vectorizable_simd_clone_call (vec_info *vinfo, stmt_vec_info stmt_info,\n     return false;\n \n   for (i = 0; i < nargs; i++)\n-    if ((arginfo[i].dt == vect_constant_def\n-\t || arginfo[i].dt == vect_external_def)\n-\t&& bestn->simdclone->args[i].arg_type == SIMD_CLONE_ARG_TYPE_VECTOR)\n-      {\n-\ttree arg_type = TREE_TYPE (gimple_call_arg (stmt, i));\n-\targinfo[i].vectype = get_vectype_for_scalar_type (vinfo, arg_type,\n-\t\t\t\t\t\t\t  slp_node);\n-\tif (arginfo[i].vectype == NULL\n-\t    || !constant_multiple_p (bestn->simdclone->simdlen,\n-\t\t\t\t     simd_clone_subparts (arginfo[i].vectype)))\n+    {\n+      if ((arginfo[i].dt == vect_constant_def\n+\t   || arginfo[i].dt == vect_external_def)\n+\t  && bestn->simdclone->args[i].arg_type == SIMD_CLONE_ARG_TYPE_VECTOR)\n+\t{\n+\t  tree arg_type = TREE_TYPE (gimple_call_arg (stmt, i + arg_offset));\n+\t  arginfo[i].vectype = get_vectype_for_scalar_type (vinfo, arg_type,\n+\t\t\t\t\t\t\t    slp_node);\n+\t  if (arginfo[i].vectype == NULL\n+\t      || !constant_multiple_p (bestn->simdclone->simdlen,\n+\t\t\t\t       simd_clone_subparts (arginfo[i].vectype)))\n+\t    return false;\n+\t}\n+\n+      if (bestn->simdclone->args[i].arg_type == SIMD_CLONE_ARG_TYPE_VECTOR\n+\t  && VECTOR_BOOLEAN_TYPE_P (bestn->simdclone->args[i].vector_type))\n+\t{\n+\t  if (dump_enabled_p ())\n+\t    dump_printf_loc (MSG_MISSED_OPTIMIZATION, vect_location,\n+\t\t\t     \"vector mask arguments are not supported.\\n\");\n \t  return false;\n-      }\n+\t}\n+\n+      if (bestn->simdclone->args[i].arg_type == SIMD_CLONE_ARG_TYPE_MASK\n+\t  && bestn->simdclone->mask_mode == VOIDmode\n+\t  && (simd_clone_subparts (bestn->simdclone->args[i].vector_type)\n+\t      != simd_clone_subparts (arginfo[i].vectype)))\n+\t{\n+\t  /* FORNOW we only have partial support for vector-type masks that\n+\t     can't hold all of simdlen. */\n+\t  if (dump_enabled_p ())\n+\t    dump_printf_loc (MSG_MISSED_OPTIMIZATION,\n+\t\t\t     vect_location,\n+\t\t\t     \"in-branch vector clones are not yet\"\n+\t\t\t     \" supported for mismatched vector sizes.\\n\");\n+\t  return false;\n+\t}\n+      if (bestn->simdclone->args[i].arg_type == SIMD_CLONE_ARG_TYPE_MASK\n+\t  && bestn->simdclone->mask_mode != VOIDmode)\n+\t{\n+\t  /* FORNOW don't support integer-type masks.  */\n+\t  if (dump_enabled_p ())\n+\t    dump_printf_loc (MSG_MISSED_OPTIMIZATION,\n+\t\t\t     vect_location,\n+\t\t\t     \"in-branch vector clones are not yet\"\n+\t\t\t     \" supported for integer mask modes.\\n\");\n+\t  return false;\n+\t}\n+    }\n \n   fndecl = bestn->decl;\n   nunits = bestn->simdclone->simdlen;\n@@ -4343,7 +4378,7 @@ vectorizable_simd_clone_call (vec_info *vinfo, stmt_vec_info stmt_info,\n \t{\n \t  unsigned int k, l, m, o;\n \t  tree atype;\n-\t  op = gimple_call_arg (stmt, i);\n+\t  op = gimple_call_arg (stmt, i + arg_offset);\n \t  switch (bestn->simdclone->args[i].arg_type)\n \t    {\n \t    case SIMD_CLONE_ARG_TYPE_VECTOR:\n@@ -4442,6 +4477,65 @@ vectorizable_simd_clone_call (vec_info *vinfo, stmt_vec_info stmt_info,\n \t\t    }\n \t\t}\n \t      break;\n+\t    case SIMD_CLONE_ARG_TYPE_MASK:\n+\t      atype = bestn->simdclone->args[i].vector_type;\n+\t      if (bestn->simdclone->mask_mode != VOIDmode)\n+\t\t{\n+\t\t  /* FORNOW: this is disabled above.  */\n+\t\t  gcc_unreachable ();\n+\t\t}\n+\t      else\n+\t\t{\n+\t\t  tree elt_type = TREE_TYPE (atype);\n+\t\t  tree one = fold_convert (elt_type, integer_one_node);\n+\t\t  tree zero = fold_convert (elt_type, integer_zero_node);\n+\t\t  o = vector_unroll_factor (nunits,\n+\t\t\t\t\t    simd_clone_subparts (atype));\n+\t\t  for (m = j * o; m < (j + 1) * o; m++)\n+\t\t    {\n+\t\t      if (simd_clone_subparts (atype)\n+\t\t\t  < simd_clone_subparts (arginfo[i].vectype))\n+\t\t\t{\n+\t\t\t  /* The mask type has fewer elements than simdlen.  */\n+\n+\t\t\t  /* FORNOW */\n+\t\t\t  gcc_unreachable ();\n+\t\t\t}\n+\t\t      else if (simd_clone_subparts (atype)\n+\t\t\t       == simd_clone_subparts (arginfo[i].vectype))\n+\t\t\t{\n+\t\t\t  /* The SIMD clone function has the same number of\n+\t\t\t     elements as the current function.  */\n+\t\t\t  if (m == 0)\n+\t\t\t    {\n+\t\t\t      vect_get_vec_defs_for_operand (vinfo, stmt_info,\n+\t\t\t\t\t\t\t     o * ncopies,\n+\t\t\t\t\t\t\t     op,\n+\t\t\t\t\t\t\t     &vec_oprnds[i]);\n+\t\t\t      vec_oprnds_i[i] = 0;\n+\t\t\t    }\n+\t\t\t  vec_oprnd0 = vec_oprnds[i][vec_oprnds_i[i]++];\n+\t\t\t  vec_oprnd0\n+\t\t\t    = build3 (VEC_COND_EXPR, atype, vec_oprnd0,\n+\t\t\t\t      build_vector_from_val (atype, one),\n+\t\t\t\t      build_vector_from_val (atype, zero));\n+\t\t\t  gassign *new_stmt\n+\t\t\t    = gimple_build_assign (make_ssa_name (atype),\n+\t\t\t\t\t\t   vec_oprnd0);\n+\t\t\t  vect_finish_stmt_generation (vinfo, stmt_info,\n+\t\t\t\t\t\t       new_stmt, gsi);\n+\t\t\t  vargs.safe_push (gimple_assign_lhs (new_stmt));\n+\t\t\t}\n+\t\t      else\n+\t\t\t{\n+\t\t\t  /* The mask type has more elements than simdlen.  */\n+\n+\t\t\t  /* FORNOW */\n+\t\t\t  gcc_unreachable ();\n+\t\t\t}\n+\t\t    }\n+\t\t}\n+\t      break;\n \t    case SIMD_CLONE_ARG_TYPE_UNIFORM:\n \t      vargs.safe_push (op);\n \t      break;"}]}