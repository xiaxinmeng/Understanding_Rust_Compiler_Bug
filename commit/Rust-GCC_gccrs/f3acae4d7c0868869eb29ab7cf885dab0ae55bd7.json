{"sha": "f3acae4d7c0868869eb29ab7cf885dab0ae55bd7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjNhY2FlNGQ3YzA4Njg4NjllYjI5YWI3Y2Y4ODVkYWIwYWU1NWJkNw==", "commit": {"author": {"name": "Richard Stallman", "email": "rms@gnu.org", "date": "1993-02-12T07:36:00Z"}, "committer": {"name": "Richard Stallman", "email": "rms@gnu.org", "date": "1993-02-12T07:36:00Z"}, "message": "(yylex): For wide char constant, use wchar_type_node.\n\nSwallow any preprocessing number as a (possibly erroneous) number.\n\nFrom-SVN: r3464", "tree": {"sha": "5313bcfd427bc4dd7cc8666b8eb9ef018024feb7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5313bcfd427bc4dd7cc8666b8eb9ef018024feb7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f3acae4d7c0868869eb29ab7cf885dab0ae55bd7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f3acae4d7c0868869eb29ab7cf885dab0ae55bd7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f3acae4d7c0868869eb29ab7cf885dab0ae55bd7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f3acae4d7c0868869eb29ab7cf885dab0ae55bd7/comments", "author": null, "committer": null, "parents": [{"sha": "aee3a549b0ef027b81642ff57a9e72e7cb49f591", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/aee3a549b0ef027b81642ff57a9e72e7cb49f591", "html_url": "https://github.com/Rust-GCC/gccrs/commit/aee3a549b0ef027b81642ff57a9e72e7cb49f591"}], "stats": {"total": 17, "additions": 12, "deletions": 5}, "files": [{"sha": "043e67c0cf93bf9f63989a7a39585151d3334bd6", "filename": "gcc/c-lex.c", "status": "modified", "additions": 12, "deletions": 5, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f3acae4d7c0868869eb29ab7cf885dab0ae55bd7/gcc%2Fc-lex.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f3acae4d7c0868869eb29ab7cf885dab0ae55bd7/gcc%2Fc-lex.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-lex.c?ref=f3acae4d7c0868869eb29ab7cf885dab0ae55bd7", "patch": "@@ -1279,7 +1279,7 @@ yylex ()\n \t\t  }\n \t\telse if (base <= 10)\n \t\t  {\n-\t\t    if ((c&~040) == 'E')\n+\t\t    if (c == 'e' || c == 'E')\n \t\t      {\n \t\t\tbase = 10;\n \t\t\tfloatflag = AFTER_POINT;\n@@ -1411,7 +1411,9 @@ yylex ()\n \t\tbreak;\n \t      }\n \t    /* Note: garbage_chars is -1 if first char is *not* garbage.  */\n-\t    while (isalnum (c))\n+\t    while (isalnum (c) || c == '.' || c == '_'\n+\t\t   || (!flag_traditional && (c == '+' || c == '-')\n+\t\t       && (p[-1] == 'e' || p[-1] == 'E')))\n \t      {\n \t\tif (p >= token_buffer + maxtoken - 3)\n \t\t  p = extend_token_buffer (p);\n@@ -1459,10 +1461,14 @@ yylex ()\n \t\t  }\n \t\telse\n \t\t  {\n-\t\t    if (isalnum (c))\n+\t\t    if (isalnum (c) || c == '.' || c == '_'\n+\t\t\t|| (!flag_traditional && (c == '+' || c == '-')\n+\t\t\t    && (p[-1] == 'e' || p[-1] == 'E')))\n \t\t      {\n \t\t\terror (\"garbage at end of number\");\n-\t\t\twhile (isalnum (c))\n+\t\t\twhile (isalnum (c) || c == '.' || c == '_'\n+\t\t\t       || (!flag_traditional && (c == '+' || c == '-')\n+\t\t\t\t   && (p[-1] == 'e' || p[-1] == 'E')))\n \t\t\t  {\n \t\t\t    if (p >= token_buffer + maxtoken - 3)\n \t\t\t      p = extend_token_buffer (p);\n@@ -1702,6 +1708,7 @@ yylex ()\n \t\t= build_int_2 (result | ~((unsigned HOST_WIDE_INT) ~0\n \t\t\t\t\t  >> (HOST_BITS_PER_WIDE_INT - num_bits)),\n \t\t\t       -1);\n+\t    TREE_TYPE (yylval.ttype) = integer_type_node;\n \t  }\n \telse\n \t  {\n@@ -1722,9 +1729,9 @@ yylex ()\n \t      }\n #endif\n \t    yylval.ttype = build_int_2 (result, 0);\n+\t    TREE_TYPE (yylval.ttype) = wchar_type_node;\n \t  }\n \n-\tTREE_TYPE (yylval.ttype) = integer_type_node;\n \tvalue = CONSTANT;\n \tbreak;\n       }"}]}