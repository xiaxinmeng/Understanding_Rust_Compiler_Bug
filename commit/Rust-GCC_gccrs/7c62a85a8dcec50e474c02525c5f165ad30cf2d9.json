{"sha": "7c62a85a8dcec50e474c02525c5f165ad30cf2d9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2M2MmE4NWE4ZGNlYzUwZTQ3NGMwMjUyNWM1ZjE2NWFkMzBjZjJkOQ==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2011-08-05T15:08:15Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2011-08-05T15:08:15Z"}, "message": "[multiple changes]\n\n2011-08-05  Pascal Obry  <obry@adacore.com>\n\n\t* a-iteint.ads: Fix copyright year.\n\n2011-08-05  Thomas Quinot  <quinot@adacore.com>\n\n\t* par_sco.adb (Traverse_Declarations_Or_Statements): Do not generate a\n\tstatement SCO for a USE clause or a representation clause.\n\n2011-08-05  Yannick Moy  <moy@adacore.com>\n\n\t* lib-xref-alfa.adb (Collect_ALFA): generate the proper relation\n\tbetween body and spec for stub.\n\t(Detect_And_Add_ALFA_Scope): take into account subprogram stub\n\t* lib-xref.adb (Enclosing_Subprogram_Or_Package): in the case of a\n\tpragma precondition or postcondition, for which the enclosing\n\tsubprogram or package in the AST is not the desired one, return empty.\n\nFrom-SVN: r177450", "tree": {"sha": "737eee92b2b21ab528f2d75e8945e71bb4885eb4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/737eee92b2b21ab528f2d75e8945e71bb4885eb4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7c62a85a8dcec50e474c02525c5f165ad30cf2d9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7c62a85a8dcec50e474c02525c5f165ad30cf2d9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7c62a85a8dcec50e474c02525c5f165ad30cf2d9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7c62a85a8dcec50e474c02525c5f165ad30cf2d9/comments", "author": null, "committer": null, "parents": [{"sha": "e49208a9cb1d63270a57c501eb94cce668d2c750", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e49208a9cb1d63270a57c501eb94cce668d2c750", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e49208a9cb1d63270a57c501eb94cce668d2c750"}], "stats": {"total": 62, "additions": 54, "deletions": 8}, "files": [{"sha": "217b56da6eb6fc81c53b03423b5e0d57afc51acf", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7c62a85a8dcec50e474c02525c5f165ad30cf2d9/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7c62a85a8dcec50e474c02525c5f165ad30cf2d9/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=7c62a85a8dcec50e474c02525c5f165ad30cf2d9", "patch": "@@ -1,3 +1,21 @@\n+2011-08-05  Pascal Obry  <obry@adacore.com>\n+\n+\t* a-iteint.ads: Fix copyright year.\n+\n+2011-08-05  Thomas Quinot  <quinot@adacore.com>\n+\n+\t* par_sco.adb (Traverse_Declarations_Or_Statements): Do not generate a\n+\tstatement SCO for a USE clause or a representation clause.\n+\n+2011-08-05  Yannick Moy  <moy@adacore.com>\n+\n+\t* lib-xref-alfa.adb (Collect_ALFA): generate the proper relation\n+\tbetween body and spec for stub.\n+\t(Detect_And_Add_ALFA_Scope): take into account subprogram stub\n+\t* lib-xref.adb (Enclosing_Subprogram_Or_Package): in the case of a\n+\tpragma precondition or postcondition, for which the enclosing\n+\tsubprogram or package in the AST is not the desired one, return empty.\n+\n 2011-08-05  Thomas Quinot  <quinot@adacore.com>\n \n \t* g-expect.adb: Minor reformatting."}, {"sha": "935cb2d120896dbd4a394ad6a9eb24324028e96d", "filename": "gcc/ada/a-iteint.ads", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7c62a85a8dcec50e474c02525c5f165ad30cf2d9/gcc%2Fada%2Fa-iteint.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7c62a85a8dcec50e474c02525c5f165ad30cf2d9/gcc%2Fada%2Fa-iteint.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-iteint.ads?ref=7c62a85a8dcec50e474c02525c5f165ad30cf2d9", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 S p e c                                  --\n --                                                                          --\n---          Copyright (C) 2004-2011, Free Software Foundation, Inc.         --\n+--             Copyright (C) 2011, Free Software Foundation, Inc.           --\n --                                                                          --\n -- This specification is derived from the Ada Reference Manual for use with --\n -- GNAT. The copyright notice above, and the license provisions that follow --"}, {"sha": "526fdb79360e4d22b7d4e918f914d8291973e156", "filename": "gcc/ada/lib-xref-alfa.adb", "status": "modified", "additions": 9, "deletions": 4, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7c62a85a8dcec50e474c02525c5f165ad30cf2d9/gcc%2Fada%2Flib-xref-alfa.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7c62a85a8dcec50e474c02525c5f165ad30cf2d9/gcc%2Fada%2Flib-xref-alfa.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flib-xref-alfa.adb?ref=7c62a85a8dcec50e474c02525c5f165ad30cf2d9", "patch": "@@ -845,6 +845,9 @@ package body ALFA is\n                if Present (Body_Entity) then\n                   if Nkind (Body_Entity) = N_Defining_Program_Unit_Name then\n                      Body_Entity := Parent (Body_Entity);\n+                  elsif Nkind (Body_Entity) = N_Subprogram_Body_Stub then\n+                     Body_Entity :=\n+                       Proper_Body (Unit (Library_Unit (Body_Entity)));\n                   end if;\n \n                   Spec_Entity := Corresponding_Spec (Body_Entity);\n@@ -874,10 +877,12 @@ package body ALFA is\n \n    procedure Detect_And_Add_ALFA_Scope (N : Node_Id) is\n    begin\n-      if Nkind_In (N, N_Subprogram_Declaration,\n-                      N_Subprogram_Body,\n-                      N_Package_Declaration,\n-                      N_Package_Body)\n+      if Nkind_In (N,\n+                   N_Subprogram_Declaration,\n+                   N_Subprogram_Body,\n+                   N_Subprogram_Body_Stub,\n+                   N_Package_Declaration,\n+                   N_Package_Body)\n       then\n          Add_ALFA_Scope (N);\n       end if;"}, {"sha": "8e607644a86e519bd3911d3bc56cdae127241951", "filename": "gcc/ada/lib-xref.adb", "status": "modified", "additions": 15, "deletions": 1, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7c62a85a8dcec50e474c02525c5f165ad30cf2d9/gcc%2Fada%2Flib-xref.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7c62a85a8dcec50e474c02525c5f165ad30cf2d9/gcc%2Fada%2Flib-xref.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flib-xref.adb?ref=7c62a85a8dcec50e474c02525c5f165ad30cf2d9", "patch": "@@ -129,7 +129,7 @@ package body Lib.Xref is\n    -------------------------------------\n \n    function Enclosing_Subprogram_Or_Package (N : Node_Id) return Entity_Id is\n-      Result         : Entity_Id;\n+      Result : Entity_Id;\n \n    begin\n       --  If N is the defining identifier for a subprogram, then return the\n@@ -167,6 +167,20 @@ package body Lib.Xref is\n                Result := Defining_Unit_Name (Specification (Result));\n                exit;\n \n+            --  The enclosing subprogram for a pre- or postconditions should be\n+            --  the subprogram to which the pragma is attached. This is not\n+            --  always the case in the AST, as the pragma may be declared after\n+            --  the declaration of the subprogram. Return Empty in this case.\n+\n+            when N_Pragma =>\n+               if Get_Pragma_Id (Result) = Pragma_Precondition\n+                 or else Get_Pragma_Id (Result) = Pragma_Postcondition\n+               then\n+                  return Empty;\n+               else\n+                  Result := Parent (Result);\n+               end if;\n+\n             when others =>\n                Result := Parent (Result);\n          end case;"}, {"sha": "e4407f2963bb7ef9f7ee06becfb9e33c772903a3", "filename": "gcc/ada/par_sco.adb", "status": "modified", "additions": 11, "deletions": 2, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7c62a85a8dcec50e474c02525c5f165ad30cf2d9/gcc%2Fada%2Fpar_sco.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7c62a85a8dcec50e474c02525c5f165ad30cf2d9/gcc%2Fada%2Fpar_sco.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fpar_sco.adb?ref=7c62a85a8dcec50e474c02525c5f165ad30cf2d9", "patch": "@@ -1483,7 +1483,8 @@ package body Par_SCO is\n \n                when others =>\n \n-                  --  Determine required type character code\n+                  --  Determine required type character code, or ASCII.NUL if\n+                  --  no SCO should be generated for this node.\n \n                   declare\n                      Typ : Character;\n@@ -1505,11 +1506,19 @@ package body Par_SCO is\n                         when N_Generic_Instantiation         =>\n                            Typ := 'i';\n \n+                        when\n+                          N_Representation_Clause            |\n+                          N_Use_Package_Clause               |\n+                          N_Use_Type_Clause                  =>\n+                           Typ := ASCII.NUL;\n+\n                         when others                          =>\n                            Typ := ' ';\n                      end case;\n \n-                     Extend_Statement_Sequence (N, Typ);\n+                     if Typ /= ASCII.NUL then\n+                        Extend_Statement_Sequence (N, Typ);\n+                     end if;\n                   end;\n \n                   --  Process any embedded decisions"}]}