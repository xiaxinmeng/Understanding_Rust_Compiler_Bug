{"sha": "bd769c83256714df9ed384c4ce63e37bd0ffac62", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmQ3NjljODMyNTY3MTRkZjllZDM4NGM0Y2U2M2UzN2JkMGZmYWM2Mg==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2015-06-01T08:41:30Z"}, "committer": {"name": "Eric Botcazou", "email": "ebotcazou@gcc.gnu.org", "date": "2015-06-01T08:41:30Z"}, "message": "decl.c (gnat_to_gnu_entity): For a definition of a type coming from a limited_with...\n\n\t* gcc-interface/decl.c (gnat_to_gnu_entity) <E_Incomplete_Type>: For a\n\tdefinition of a type coming from a limited_with, get to the full view\n\tif it is not in the main code unit.\n\nFrom-SVN: r223919", "tree": {"sha": "dc7fc44be39b5f4067e5fcb36e19b514e68f85d6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/dc7fc44be39b5f4067e5fcb36e19b514e68f85d6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/bd769c83256714df9ed384c4ce63e37bd0ffac62", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bd769c83256714df9ed384c4ce63e37bd0ffac62", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bd769c83256714df9ed384c4ce63e37bd0ffac62", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bd769c83256714df9ed384c4ce63e37bd0ffac62/comments", "author": null, "committer": null, "parents": [{"sha": "2b50232a5df3dd82d389c4dbcd48940e308605e4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2b50232a5df3dd82d389c4dbcd48940e308605e4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2b50232a5df3dd82d389c4dbcd48940e308605e4"}], "stats": {"total": 19, "additions": 16, "deletions": 3}, "files": [{"sha": "fe91cc4a4606e1e285b34f989203fdebcd0641d9", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bd769c83256714df9ed384c4ce63e37bd0ffac62/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bd769c83256714df9ed384c4ce63e37bd0ffac62/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=bd769c83256714df9ed384c4ce63e37bd0ffac62", "patch": "@@ -1,3 +1,9 @@\n+2015-06-01  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* gcc-interface/decl.c (gnat_to_gnu_entity) <E_Incomplete_Type>: For a\n+\tdefinition of a type coming from a limited_with, get to the full view\n+\tif it is not in the main code unit.\n+\n 2015-06-01  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* gcc-interface/utils.c (create_var_decl_1): If an assembler name is"}, {"sha": "35930e0bfe0258c7e4251dc80a3650c6604f91f4", "filename": "gcc/ada/gcc-interface/decl.c", "status": "modified", "additions": 10, "deletions": 3, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bd769c83256714df9ed384c4ce63e37bd0ffac62/gcc%2Fada%2Fgcc-interface%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bd769c83256714df9ed384c4ce63e37bd0ffac62/gcc%2Fada%2Fgcc-interface%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2Fdecl.c?ref=bd769c83256714df9ed384c4ce63e37bd0ffac62", "patch": "@@ -4638,13 +4638,15 @@ gnat_to_gnu_entity (Entity_Id gnat_entity, tree gnu_expr, int definition)\n     case E_Record_Type_With_Private:\n     case E_Record_Subtype_With_Private:\n       {\n+\tbool is_from_limited_with\n+\t  = (IN (kind, Incomplete_Kind) && From_Limited_With (gnat_entity));\n \t/* Get the \"full view\" of this entity.  If this is an incomplete\n \t   entity from a limited with, treat its non-limited view as the\n \t   full view.  Otherwise, use either the full view or the underlying\n \t   full view, whichever is present.  This is used in all the tests\n \t   below.  */\n \tEntity_Id full_view\n-\t  = (IN (kind, Incomplete_Kind) && From_Limited_With (gnat_entity))\n+\t  = is_from_limited_with\n \t    ? Non_Limited_View (gnat_entity)\n \t    : Present (Full_View (gnat_entity))\n \t      ? Full_View (gnat_entity)\n@@ -4680,10 +4682,15 @@ gnat_to_gnu_entity (Entity_Id gnat_entity, tree gnu_expr, int definition)\n \n \t/* Otherwise, if we are not defining the type now, get the type\n \t   from the full view.  But always get the type from the full view\n-\t   for define on use types, since otherwise we won't see them!  */\n+\t   for define on use types, since otherwise we won't see them.\n+\t   Likewise if this is a non-limited view not declared in the main\n+\t   unit, which can happen for incomplete formal types instantiated\n+\t   on a type coming from a limited_with clause.  */\n \telse if (!definition\n \t\t || (Is_Itype (full_view) && No (Freeze_Node (gnat_entity)))\n-\t\t || (Is_Itype (gnat_entity) && No (Freeze_Node (full_view))))\n+\t\t || (Is_Itype (gnat_entity) && No (Freeze_Node (full_view)))\n+\t\t || (is_from_limited_with\n+\t\t     && !In_Extended_Main_Code_Unit (full_view)))\n \t  {\n \t    gnu_decl = gnat_to_gnu_entity (full_view, NULL_TREE, 0);\n \t    maybe_present = true;"}]}