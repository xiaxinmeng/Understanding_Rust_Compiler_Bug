{"sha": "3af4bd89433b88aa8b04e0b9cb4868a0f41db962", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2FmNGJkODk0MzNiODhhYThiMDRlMGI5Y2I0ODY4YTBmNDFkYjk2Mg==", "commit": {"author": {"name": "Jan Hubicka", "email": "hubicka@freesoft.cz", "date": "1999-04-17T21:13:53Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "1999-04-17T21:13:53Z"}, "message": "i386.c (i386_preferred_stack_boundary_string): New global variable.\n\n        * i386.c (i386_preferred_stack_boundary_string): New global variable.\n        (i386_preferred_stack_boundary): New global variable.\n        (override_functions): Set it.  Tidy option setting code.\n        * i386.h (TARGET_OPTIONS): New command line option.\n        (i386_preferred_stack_boundary_string): Declare it.\n        (i386_preferred_stack_boundary): Likewise.\n        (PREFERRED_STACK_BOUNDARY): Use i386_preferred_stack_boundary.\n\nFrom-SVN: r26527", "tree": {"sha": "a48f5a498c066f4f4f4b2006a1f5fa3a2e2981ae", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a48f5a498c066f4f4f4b2006a1f5fa3a2e2981ae"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3af4bd89433b88aa8b04e0b9cb4868a0f41db962", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3af4bd89433b88aa8b04e0b9cb4868a0f41db962", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3af4bd89433b88aa8b04e0b9cb4868a0f41db962", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3af4bd89433b88aa8b04e0b9cb4868a0f41db962/comments", "author": null, "committer": null, "parents": [{"sha": "73fe76e49623a713bdf92a7c009cbf6e5227871e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/73fe76e49623a713bdf92a7c009cbf6e5227871e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/73fe76e49623a713bdf92a7c009cbf6e5227871e"}], "stats": {"total": 124, "additions": 87, "deletions": 37}, "files": [{"sha": "ae4dd94ee9035c2ad9ac29fd2844edb4fef2860c", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3af4bd89433b88aa8b04e0b9cb4868a0f41db962/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3af4bd89433b88aa8b04e0b9cb4868a0f41db962/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=3af4bd89433b88aa8b04e0b9cb4868a0f41db962", "patch": "@@ -1,3 +1,13 @@\n+Sat Apr 17 21:10:10 1999  Jan Hubicka <hubicka@freesoft.cz>\n+\n+        * i386.c (i386_preferred_stack_boundary_string): New global variable.\n+        (i386_preferred_stack_boundary): New global variable.\n+        (override_functions): Set it.  Tidy option setting code.\n+        * i386.h (TARGET_OPTIONS): New command line option.\n+        (i386_preferred_stack_boundary_string): Declare it.\n+        (i386_preferred_stack_boundary): Likewise.\n+        (PREFERRED_STACK_BOUNDARY): Use i386_preferred_stack_boundary.\n+\n Sat Apr 17 19:22:38 1999  Jan Hubicka <hubicka@freesoft.cz>\n \n \t* i386.c (k6_cost): Take into account the decoding time."}, {"sha": "dab03008ac23241b6481a41687618eeeed55f737", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 39, "deletions": 27, "changes": 66, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3af4bd89433b88aa8b04e0b9cb4868a0f41db962/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3af4bd89433b88aa8b04e0b9cb4868a0f41db962/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=3af4bd89433b88aa8b04e0b9cb4868a0f41db962", "patch": "@@ -203,6 +203,12 @@ char *i386_align_loops_string;\n /* Power of two alignment for non-loop jumps. */\n char *i386_align_jumps_string;\n \n+/* Power of two alignment for stack boundary in bytes.  */\n+char *i386_preferred_stack_boundary_string;\n+\n+/* Preferred alignment for stack boundary in bits.  */\n+int i386_preferred_stack_boundary;\n+\n /* Values 1-5: see jump.c */\n int i386_branch_cost;\n char *i386_branch_cost_string;\n@@ -239,16 +245,16 @@ override_options ()\n       struct processor_costs *cost; /* Processor costs */\n       int target_enable;\t/* Target flags to enable.  */\n       int target_disable;\t/* Target flags to disable.  */\n-    } processor_target_table[]\n-      = {{PROCESSOR_I386_STRING, PROCESSOR_I386, &i386_cost, 0, 0},\n-\t   {PROCESSOR_I486_STRING, PROCESSOR_I486, &i486_cost, 0, 0},\n-\t   {PROCESSOR_I586_STRING, PROCESSOR_PENTIUM, &pentium_cost, 0, 0},\n-\t   {PROCESSOR_PENTIUM_STRING, PROCESSOR_PENTIUM, &pentium_cost, 0, 0},\n-\t   {PROCESSOR_I686_STRING, PROCESSOR_PENTIUMPRO, &pentiumpro_cost,\n-\t      0, 0},\n-\t   {PROCESSOR_PENTIUMPRO_STRING, PROCESSOR_PENTIUMPRO,\n-\t      &pentiumpro_cost, 0, 0},\n-      \t   {PROCESSOR_K6_STRING, PROCESSOR_K6, &k6_cost, 0, 0}};\n+    } processor_target_table[] = {\n+      {PROCESSOR_I386_STRING, PROCESSOR_I386, &i386_cost, 0, 0},\n+      {PROCESSOR_I486_STRING, PROCESSOR_I486, &i486_cost, 0, 0},\n+      {PROCESSOR_I586_STRING, PROCESSOR_PENTIUM, &pentium_cost, 0, 0},\n+      {PROCESSOR_PENTIUM_STRING, PROCESSOR_PENTIUM, &pentium_cost, 0, 0},\n+      {PROCESSOR_I686_STRING, PROCESSOR_PENTIUMPRO, &pentiumpro_cost, 0, 0},\n+      {PROCESSOR_PENTIUMPRO_STRING, PROCESSOR_PENTIUMPRO,\n+       &pentiumpro_cost, 0, 0},\n+      {PROCESSOR_K6_STRING, PROCESSOR_K6, &k6_cost, 0, 0}\n+    };\n \n   int ptt_size = sizeof (processor_target_table) / sizeof (struct ptt);\n \n@@ -346,56 +352,62 @@ override_options ()\n   def_align = (TARGET_486) ? 4 : 2;\n \n   /* Validate -malign-loops= value, or provide default.  */\n+#ifdef ASM_OUTPUT_MAX_SKIP_ALIGN\n+  i386_align_loops = 4;\n+#else\n+  i386_align_loops = 2;\n+#endif\n   if (i386_align_loops_string)\n     {\n       i386_align_loops = atoi (i386_align_loops_string);\n       if (i386_align_loops < 0 || i386_align_loops > MAX_CODE_ALIGN)\n \tfatal (\"-malign-loops=%d is not between 0 and %d\",\n \t       i386_align_loops, MAX_CODE_ALIGN);\n     }\n-  else\n+\n+  /* Validate -malign-jumps= value, or provide default.  */\n #ifdef ASM_OUTPUT_MAX_SKIP_ALIGN\n-    i386_align_loops = 4;\n+  i386_align_jumps = 4;\n #else\n-    i386_align_loops = 2;\n+  i386_align_jumps = def_align;\n #endif\n-\n-  /* Validate -malign-jumps= value, or provide default.  */\n   if (i386_align_jumps_string)\n     {\n       i386_align_jumps = atoi (i386_align_jumps_string);\n       if (i386_align_jumps < 0 || i386_align_jumps > MAX_CODE_ALIGN)\n \tfatal (\"-malign-jumps=%d is not between 0 and %d\",\n \t       i386_align_jumps, MAX_CODE_ALIGN);\n     }\n-  else\n-#ifdef ASM_OUTPUT_MAX_SKIP_ALIGN\n-    i386_align_jumps = 4;\n-#else\n-    i386_align_jumps = def_align;\n-#endif\n \n   /* Validate -malign-functions= value, or provide default. */\n+  i386_align_funcs = def_align;\n   if (i386_align_funcs_string)\n     {\n       i386_align_funcs = atoi (i386_align_funcs_string);\n       if (i386_align_funcs < 0 || i386_align_funcs > MAX_CODE_ALIGN)\n \tfatal (\"-malign-functions=%d is not between 0 and %d\",\n \t       i386_align_funcs, MAX_CODE_ALIGN);\n     }\n-  else\n-    i386_align_funcs = def_align;\n+\n+  /* Validate -mpreferred_stack_boundary= value, or provide default.\n+     The default of 128 bits is for Pentium III's SSE __m128.  */\n+  i386_preferred_stack_boundary = 128;\n+  if (i386_preferred_stack_boundary_string)\n+    {\n+      i = atoi (i386_preferred_stack_boundary_string);\n+      if (i < 2 || i > 31)\n+\tfatal (\"-mpreferred_stack_boundary=%d is not between 2 and 31\", i);\n+      i386_preferred_stack_boundary = (1 << i) * BITS_PER_UNIT;\n+    }\n \n   /* Validate -mbranch-cost= value, or provide default. */\n+  i386_branch_cost = 1;\n   if (i386_branch_cost_string)\n     {\n       i386_branch_cost = atoi (i386_branch_cost_string);\n       if (i386_branch_cost < 0 || i386_branch_cost > 5)\n-\tfatal (\"-mbranch-cost=%d is not between 0 and 5\",\n-\t       i386_branch_cost);\n+\tfatal (\"-mbranch-cost=%d is not between 0 and 5\", i386_branch_cost);\n     }\n-  else\n-    i386_branch_cost = 1;\n \n   /* Keep nonleaf frame pointers.  */\n   if (TARGET_OMIT_LEAF_FRAME_POINTER)"}, {"sha": "6b0045922efe751c57b160872f5fcf82f5281510", "filename": "gcc/config/i386/i386.h", "status": "modified", "additions": 11, "deletions": 9, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3af4bd89433b88aa8b04e0b9cb4868a0f41db962/gcc%2Fconfig%2Fi386%2Fi386.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3af4bd89433b88aa8b04e0b9cb4868a0f41db962/gcc%2Fconfig%2Fi386%2Fi386.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.h?ref=3af4bd89433b88aa8b04e0b9cb4868a0f41db962", "patch": "@@ -182,10 +182,10 @@ extern const int x86_double_with_add;\n   { \"hard-float\",\t\t MASK_80387, \"Use hardware fp\" },\t\\\n   { \"soft-float\",\t\t-MASK_80387, \"Do not use hardware fp\" },\\\n   { \"no-soft-float\",\t\t MASK_80387, \"Use hardware fp\" },\t\\\n-  { \"386\",\t\t\t 0, \"Optimize for i80386\" },\t\t\\\n-  { \"486\",\t\t\t 0, \"Optimize for i80486\" },\t\t\\\n-  { \"pentium\",\t\t\t 0, \"Optimize for Pentium\" },\t\t\\\n-  { \"pentiumpro\",\t\t 0, \"Optimize for Pentium Pro, Pentium II\" },\\\n+  { \"386\",\t\t\t 0, \"Same as -mcpu=i386\" },\t\t\\\n+  { \"486\",\t\t\t 0, \"Same as -mcpu=i486\" },\t\t\\\n+  { \"pentium\",\t\t\t 0, \"Same as -mcpu=pentium\" },\t\t\\\n+  { \"pentiumpro\",\t\t 0, \"Same as -mcpu=pentiumpro\" },\t\\\n   { \"rtd\",\t\t\t MASK_RTD, \"Alternate calling convention\" },\\\n   { \"no-rtd\",\t\t\t-MASK_RTD, \"Use normal calling convention\" },\\\n   { \"align-double\",\t\t MASK_ALIGN_DOUBLE, \"Align some doubles on dword boundary\" },\\\n@@ -265,6 +265,7 @@ extern int ix86_arch;\n   { \"align-loops=\",\t&i386_align_loops_string, \"Loop code aligned to this power of 2\" }, \\\n   { \"align-jumps=\",\t&i386_align_jumps_string, \"Jump targets are aligned to this power of 2\" }, \\\n   { \"align-functions=\",\t&i386_align_funcs_string, \"Function starts are aligned to this power of 2\" }, \\\n+  { \"preferred-stack-boundary=\", &i386_preferred_stack_boundary_string, \"Attempt to keep stack aligned to this power of 2\" }, \\\n   { \"branch-cost=\",\t&i386_branch_cost_string, \"Branches are this expensive (1-5, arbitrary units)\" },\t\t\t\\\n   SUBTARGET_OPTIONS\t\t\t\t\t\t\t\\\n }\n@@ -407,13 +408,12 @@ extern int ix86_arch;\n /* Allocation boundary (in *bits*) for storing arguments in argument list.  */\n #define PARM_BOUNDARY 32\n \n-/* Boundary (in *bits*) on which stack pointer should be aligned.  */\n+/* Boundary (in *bits*) on which the stack pointer must be aligned.  */\n #define STACK_BOUNDARY 32\n \n-/* We want to keep the stack aligned to 128 bits when possible, for the\n-   benefit of doubles and SSE __m128.  But the compiler can not rely on\n-   the stack having this alignment.*/\n-#define PREFERRED_STACK_BOUNDARY 128\n+/* Boundary (in *bits*) on which the stack pointer preferrs to be\n+   aligned; the compiler cannot rely on having this alignment.  */\n+#define PREFERRED_STACK_BOUNDARY i386_preferred_stack_boundary\n \n /* Allocation boundary (in *bits*) for the code of a function.\n    For i486, we get better performance by aligning to a cache\n@@ -2781,11 +2781,13 @@ extern char *i386_regparm_string;\t\t/* # registers to use to pass args */\n extern char *i386_align_loops_string;\t\t/* power of two alignment for loops */\n extern char *i386_align_jumps_string;\t\t/* power of two alignment for non-loop jumps */\n extern char *i386_align_funcs_string;\t\t/* power of two alignment for functions */\n+extern char *i386_preferred_stack_boundary_string;/* power of two alignment for stack boundary */\n extern char *i386_branch_cost_string;\t\t/* values 1-5: see jump.c */\n extern int i386_regparm;\t\t\t/* i386_regparm_string as a number */\n extern int i386_align_loops;\t\t\t/* power of two alignment for loops */\n extern int i386_align_jumps;\t\t\t/* power of two alignment for non-loop jumps */\n extern int i386_align_funcs;\t\t\t/* power of two alignment for functions */\n+extern int i386_preferred_stack_boundary;\t/* preferred stack boundary alignment in bits */\n extern int i386_branch_cost;\t\t\t/* values 1-5: see jump.c */\n extern char *hi_reg_name[];\t\t\t/* names for 16 bit regs */\n extern char *qi_reg_name[];\t\t\t/* names for 8 bit regs (low) */"}, {"sha": "9a7ebb1259241d8a86470cd9ea81b14eb0549520", "filename": "gcc/invoke.texi", "status": "modified", "additions": 27, "deletions": 1, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3af4bd89433b88aa8b04e0b9cb4868a0f41db962/gcc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3af4bd89433b88aa8b04e0b9cb4868a0f41db962/gcc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Finvoke.texi?ref=3af4bd89433b88aa8b04e0b9cb4868a0f41db962", "patch": "@@ -342,7 +342,7 @@ in the following sections.\n -mno-wide-multiply  -mrtd  -malign-double\n -mreg-alloc=@var{list}  -mregparm=@var{num}\n -malign-jumps=@var{num}  -malign-loops=@var{num}\n--malign-functions=@var{num}\n+-malign-functions=@var{num} -mpreferred_stack_boundary=@var{num}\n \n @emph{HPPA Options}\n -mbig-switch  -mdisable-fpregs  -mdisable-indexing  \n@@ -5172,6 +5172,32 @@ If @samp{-malign-functions} is not specified, the default is 2 if optimizing\n for a 386, and 4 if optimizing for a 486.\n @end table\n \n+@item -mpreferred-stack-boundary=@var{num}\n+Attempt to keep the stack boundary aligned to a 2 raised to @var{num}\n+byte boundary.  If @samp{-mpreferred-stack-boundary} is not specified,\n+the default is 4 (16 bytes or 128 bits).\n+\n+The stack is required to be aligned on a 4 byte boundary.  On Pentium\n+and PentiumPro, @code{double} and @code{long double} values should be\n+aligned to an 8 byte boundary (see @samp{-malign-double}) or suffer\n+significant run time performance penalties.  On Pentium III, the\n+Streaming SIMD Extention (SSE) data type @code{__m128} suffers similar\n+penalties if it is not 16 byte aligned.\n+\n+To ensure proper alignment of this values on the stack, the stack boundary\n+must be as aligned as that required by any value stored on the stack. \n+Further, every function must be generated such that it keeps the stack\n+aligned.  Thus calling a function compiled with a higher preferred\n+stack boundary from a function compiled with a lower preferred stack\n+boundary will most likely misalign the stack.  It is recommended that\n+libraries that use callbacks always use the default setting.\n+\n+This extra alignment does consume extra stack space.  Code that is sensitive\n+to stack space usage, such as embedded systems and operating system kernels,\n+may want to reduce the preferred alignment to\n+@samp{-mpreferred-stack-boundary=2}.\n+@end table\n+\n @node HPPA Options\n @subsection HPPA Options\n @cindex HPPA Options"}]}