{"sha": "19501406265320dcca6c6a6619850f2dd9ad6bed", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTk1MDE0MDYyNjUzMjBkY2NhNmM2YTY2MTk4NTBmMmRkOWFkNmJlZA==", "commit": {"author": {"name": "Paolo Carlini", "email": "paolo.carlini@oracle.com", "date": "2010-02-05T17:19:10Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2010-02-05T17:19:10Z"}, "message": "future (swap(packaged_task<>&, packaged_task<>&), [...]): Add; minor formatting fixes.\n\n2010-02-05  Paolo Carlini  <paolo.carlini@oracle.com>\n\n\t* include/std/future (swap(packaged_task<>&, packaged_task<>&),\n\tswap(promise<>&, promise<>&)): Add; minor formatting fixes.\n\t* testsuite/30_threads/packaged_task/cons/assign_neg.cc: Adjust\n\tdg-error line number.\n\t* testsuite/30_threads/packaged_task/cons/copy_neg.cc: Likewise.\n\t* testsuite/30_threads/promise/cons/assign_neg.cc: Likewise.\n\t* testsuite/30_threads/promise/cons/copy_neg.cc: Likewise.\n\nFrom-SVN: r156522", "tree": {"sha": "b59bad895348e3dc54fee9c772a766551878bc2d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b59bad895348e3dc54fee9c772a766551878bc2d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/19501406265320dcca6c6a6619850f2dd9ad6bed", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/19501406265320dcca6c6a6619850f2dd9ad6bed", "html_url": "https://github.com/Rust-GCC/gccrs/commit/19501406265320dcca6c6a6619850f2dd9ad6bed", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/19501406265320dcca6c6a6619850f2dd9ad6bed/comments", "author": null, "committer": null, "parents": [{"sha": "6561cdf60840b0f6f098f1fecb86ebee663cac71", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6561cdf60840b0f6f098f1fecb86ebee663cac71", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6561cdf60840b0f6f098f1fecb86ebee663cac71"}], "stats": {"total": 106, "additions": 69, "deletions": 37}, "files": [{"sha": "5468a0eb456dada1ce8e99e4d88570a80057c0a1", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/19501406265320dcca6c6a6619850f2dd9ad6bed/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/19501406265320dcca6c6a6619850f2dd9ad6bed/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=19501406265320dcca6c6a6619850f2dd9ad6bed", "patch": "@@ -1,3 +1,13 @@\n+2010-02-05  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+\t* include/std/future (swap(packaged_task<>&, packaged_task<>&),\n+\tswap(promise<>&, promise<>&)): Add; minor formatting fixes.\n+\t* testsuite/30_threads/packaged_task/cons/assign_neg.cc: Adjust\n+\tdg-error line number.\n+\t* testsuite/30_threads/packaged_task/cons/copy_neg.cc: Likewise.\n+\t* testsuite/30_threads/promise/cons/assign_neg.cc: Likewise.\n+\t* testsuite/30_threads/promise/cons/copy_neg.cc: Likewise.\n+\n 2010-02-05  Paolo Carlini  <paolo.carlini@oracle.com>\n \n \t* include/bits/stl_algobase.h (struct __iter_base): Rename to"}, {"sha": "b7b244988ac91f80bd0996cee80c73a29dc58802", "filename": "libstdc++-v3/include/std/future", "status": "modified", "additions": 51, "deletions": 29, "changes": 80, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/19501406265320dcca6c6a6619850f2dd9ad6bed/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ffuture", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/19501406265320dcca6c6a6619850f2dd9ad6bed/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ffuture", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ffuture?ref=19501406265320dcca6c6a6619850f2dd9ad6bed", "patch": "@@ -1,6 +1,6 @@\n // <future> -*- C++ -*-\n \n-// Copyright (C) 2009 Free Software Foundation, Inc.\n+// Copyright (C) 2009, 2010 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -799,17 +799,20 @@ namespace std\n \n   // Now we can define the protected __basic_future constructors.\n   template<typename _Res>\n-    __basic_future<_Res>::__basic_future(const shared_future<_Res>& __sf)\n+    inline __basic_future<_Res>::\n+    __basic_future(const shared_future<_Res>& __sf)\n     : _M_state(__sf._M_state)\n     { }\n \n   template<typename _Res>\n-    __basic_future<_Res>::__basic_future(shared_future<_Res>&& __sf)\n+    inline __basic_future<_Res>::\n+    __basic_future(shared_future<_Res>&& __sf)\n     : _M_state(std::move(__sf._M_state))\n     { }\n \n   template<typename _Res>\n-    __basic_future<_Res>::__basic_future(future<_Res>&& __uf)\n+    inline __basic_future<_Res>::\n+    __basic_future(future<_Res>&& __uf)\n     : _M_state(std::move(__uf._M_state))\n     { }\n \n@@ -828,12 +831,13 @@ namespace std\n \n     public:\n       promise()\n-      : _M_future(std::make_shared<_State>()), _M_storage(new _Res_type())\n+      : _M_future(std::make_shared<_State>()),\n+\t_M_storage(new _Res_type())\n       { }\n \n       promise(promise&& __rhs)\n       : _M_future(std::move(__rhs._M_future)),\n-      _M_storage(std::move(__rhs._M_storage))\n+\t_M_storage(std::move(__rhs._M_storage))\n       { }\n \n       // TODO: needs allocator_arg_t\n@@ -898,6 +902,11 @@ namespace std\n       }\n     };\n \n+  template<typename _Res>\n+    inline void\n+    swap(promise<_Res>& __x, promise<_Res>& __y)\n+    { __x.swap(__y); }\n+\n   /// Partial specialization for promise<R&>\n   template<typename _Res>\n     class promise<_Res&>\n@@ -912,7 +921,8 @@ namespace std\n \n     public:\n       promise()\n-      : _M_future(std::make_shared<_State>()), _M_storage(new _Res_type())\n+      : _M_future(std::make_shared<_State>()),\n+\t_M_storage(new _Res_type())\n       { }\n \n       promise(promise&& __rhs)\n@@ -995,7 +1005,7 @@ namespace std\n \n       promise(promise&& __rhs)\n       : _M_future(std::move(__rhs._M_future)),\n-      _M_storage(std::move(__rhs._M_storage))\n+\t_M_storage(std::move(__rhs._M_storage))\n       { }\n \n \n@@ -1087,11 +1097,14 @@ namespace std\n     {\n       typename _StateT::_Ptr_type operator()()\n       {\n-        __try {\n-          _M_state->_M_result->_M_set(_M_fn());\n-        } __catch(...) {\n-          _M_state->_M_result->_M_error = current_exception();\n-        }\n+        __try\n+\t  {\n+\t    _M_state->_M_result->_M_set(_M_fn());\n+\t  }\n+\t__catch(...)\n+\t  {\n+\t    _M_state->_M_result->_M_error = current_exception();\n+\t  }\n         return std::move(_M_state->_M_result);\n       }\n       _StateT*                  _M_state;\n@@ -1103,12 +1116,15 @@ namespace std\n     {\n       typename _StateT::_Ptr_type operator()()\n       {\n-        __try {\n-          _M_fn();\n-        } __catch(...) {\n-          _M_state->_M_result->_M_error = current_exception();\n-        }\n-        return std::move(_M_state->_M_result);\n+        __try\n+\t  {\n+\t    _M_fn();\n+\t  }\n+\t__catch(...)\n+\t  {\n+\t    _M_state->_M_result->_M_error = current_exception();\n+\t  }\n+\treturn std::move(_M_state->_M_result);\n       }\n       _StateT*                  _M_state;\n       std::function<void()>     _M_fn;\n@@ -1245,6 +1261,12 @@ namespace std\n       }\n     };\n \n+  template<typename _Res, typename... _ArgTypes>\n+    void inline\n+    swap(packaged_task<_Res(_ArgTypes...)>& __x,\n+\t packaged_task<_Res(_ArgTypes...)>& __y)\n+    { __x.swap(__y); }\n+ \n   template<typename _Res>\n     class __future_base::_Deferred_state : public __future_base::_State\n     {\n@@ -1280,7 +1302,7 @@ namespace std\n       explicit \n       _Async_state(std::function<_Res()>&& __fn)\n       : _M_result(new _Result<_Res>()), _M_fn(std::move(__fn)),\n-      _M_thread(mem_fn(&_Async_state::_M_do_run), this)\n+\t_M_thread(mem_fn(&_Async_state::_M_do_run), this)\n       { }\n \n       ~_Async_state() { _M_thread.join(); }\n@@ -1306,17 +1328,17 @@ namespace std\n       typedef typename _Fn::result_type result_type;\n       std::shared_ptr<__future_base::_State> __state;\n       if (__policy == launch::async)\n-      {\n-        typedef typename __future_base::_Async_state<result_type> _State;\n-        __state = std::make_shared<_State>(std::bind<result_type>(\n+\t{\n+\t  typedef typename __future_base::_Async_state<result_type> _State;\n+\t  __state = std::make_shared<_State>(std::bind<result_type>(\n               std::forward<_Fn>(__fn), std::forward<_Args>(__args)...));\n-      }\n+\t}\n       else\n-      {\n-        typedef typename __future_base::_Deferred_state<result_type> _State;\n-        __state = std::make_shared<_State>(std::bind<result_type>(\n+\t{\n+\t  typedef typename __future_base::_Deferred_state<result_type> _State;\n+\t  __state = std::make_shared<_State>(std::bind<result_type>(\n               std::forward<_Fn>(__fn), std::forward<_Args>(__args)...));\n-      }\n+\t}\n       return future<result_type>(__state);\n     }\n \n@@ -1325,7 +1347,7 @@ namespace std\n     async(_Fn&& __fn, _Args&&... __args)\n     {\n       return async(launch::any, std::forward<_Fn>(__fn),\n-          std::forward<_Args>(__args)...);\n+\t\t   std::forward<_Args>(__args)...);\n     }\n \n #endif // _GLIBCXX_HAS_GTHREADS && _GLIBCXX_USE_C99_STDINT_TR1"}, {"sha": "69cfdd32aaede794f7667304c0519851c847ec64", "filename": "libstdc++-v3/testsuite/30_threads/packaged_task/cons/assign_neg.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/19501406265320dcca6c6a6619850f2dd9ad6bed/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fpackaged_task%2Fcons%2Fassign_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/19501406265320dcca6c6a6619850f2dd9ad6bed/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fpackaged_task%2Fcons%2Fassign_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fpackaged_task%2Fcons%2Fassign_neg.cc?ref=19501406265320dcca6c6a6619850f2dd9ad6bed", "patch": "@@ -4,7 +4,7 @@\n // { dg-require-gthreads \"\" }\n // { dg-require-atomic-builtins \"\" }\n \n-// Copyright (C) 2009 Free Software Foundation, Inc.\n+// Copyright (C) 2009, 2010 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -33,4 +33,4 @@ void test01()\n }\n \n // { dg-error \"used here\" \"\" { target *-*-* } 32 }\n-// { dg-error \"deleted function\" \"\" { target *-*-* } 1209 }\n+// { dg-error \"deleted function\" \"\" { target *-*-* } 1225 }"}, {"sha": "b3fbdbcff3b78222fae3b006902b94b5adb188c9", "filename": "libstdc++-v3/testsuite/30_threads/packaged_task/cons/copy_neg.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/19501406265320dcca6c6a6619850f2dd9ad6bed/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fpackaged_task%2Fcons%2Fcopy_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/19501406265320dcca6c6a6619850f2dd9ad6bed/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fpackaged_task%2Fcons%2Fcopy_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fpackaged_task%2Fcons%2Fcopy_neg.cc?ref=19501406265320dcca6c6a6619850f2dd9ad6bed", "patch": "@@ -4,7 +4,7 @@\n // { dg-require-gthreads \"\" }\n // { dg-require-atomic-builtins \"\" }\n \n-// Copyright (C) 2009 Free Software Foundation, Inc.\n+// Copyright (C) 2009, 2010 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -32,4 +32,4 @@ void test01()\n }\n \n // { dg-error \"used here\" \"\" { target *-*-* } 31 }\n-// { dg-error \"deleted function\" \"\" { target *-*-* } 1208 }\n+// { dg-error \"deleted function\" \"\" { target *-*-* } 1224 }"}, {"sha": "a52ceae701948f1fa58e4f016a9ebd6ba3fefe29", "filename": "libstdc++-v3/testsuite/30_threads/promise/cons/assign_neg.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/19501406265320dcca6c6a6619850f2dd9ad6bed/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fpromise%2Fcons%2Fassign_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/19501406265320dcca6c6a6619850f2dd9ad6bed/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fpromise%2Fcons%2Fassign_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fpromise%2Fcons%2Fassign_neg.cc?ref=19501406265320dcca6c6a6619850f2dd9ad6bed", "patch": "@@ -4,7 +4,7 @@\n // { dg-require-gthreads \"\" }\n // { dg-require-atomic-builtins \"\" }\n \n-// Copyright (C) 2009 Free Software Foundation, Inc.\n+// Copyright (C) 2009, 2010 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -33,4 +33,4 @@ void test01()\n }\n \n // { dg-error \"used here\" \"\" { target *-*-* } 32 }\n-// { dg-error \"deleted function\" \"\" { target *-*-* } 864 }\n+// { dg-error \"deleted function\" \"\" { target *-*-* } 868 }"}, {"sha": "22d44cef3417fb75ccf58e7f4bb1e3ab7377f5f1", "filename": "libstdc++-v3/testsuite/30_threads/promise/cons/copy_neg.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/19501406265320dcca6c6a6619850f2dd9ad6bed/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fpromise%2Fcons%2Fcopy_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/19501406265320dcca6c6a6619850f2dd9ad6bed/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fpromise%2Fcons%2Fcopy_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fpromise%2Fcons%2Fcopy_neg.cc?ref=19501406265320dcca6c6a6619850f2dd9ad6bed", "patch": "@@ -4,7 +4,7 @@\n // { dg-require-gthreads \"\" }\n // { dg-require-atomic-builtins \"\" }\n \n-// Copyright (C) 2009 Free Software Foundation, Inc.\n+// Copyright (C) 2009, 2010 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -32,4 +32,4 @@ void test01()\n }\n \n // { dg-error \"used here\" \"\" { target *-*-* } 31 }\n-// { dg-error \"deleted function\" \"\" { target *-*-* } 848 }\n+// { dg-error \"deleted function\" \"\" { target *-*-* } 852 }"}]}