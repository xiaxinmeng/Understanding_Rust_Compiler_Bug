{"sha": "7f445b5d6116000f1a6527f2164836cbc7c01dee", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2Y0NDViNWQ2MTE2MDAwZjFhNjUyN2YyMTY0ODM2Y2JjN2MwMWRlZQ==", "commit": {"author": {"name": "Alex Coplan", "email": "alex.coplan@arm.com", "date": "2020-11-12T10:03:21Z"}, "committer": {"name": "Alex Coplan", "email": "alex.coplan@arm.com", "date": "2020-11-12T10:03:21Z"}, "message": "aarch64: Fix SVE2 BCAX pattern [PR97730]\n\nThis patch adds a missing not to the SVE2 BCAX (Bitwise clear and\nexclusive or) pattern, fixing the PR. Since SVE doesn't have an\nunpredicated not instruction, we need to use a (vacuously) predicated\nnot here.\n\nTo ensure that the predicate is instantiated correctly (to all 1s) for\nthe intrinsics, we pull out a separate expander from the define_insn.\n\nFrom the ISA reference [1]:\n> Bitwise AND elements of the second source vector with the\n> corresponding inverted elements of the third source vector, then\n> exclusive OR the results with corresponding elements of the first\n> source vector.\n\n[1] : https://developer.arm.com/docs/ddi0602/g/a64-sve-instructions-alphabetic-order/bcax-bitwise-clear-and-exclusive-or\n\ngcc/ChangeLog:\n\n\tPR target/97730\n\t* config/aarch64/aarch64-sve2.md (@aarch64_sve2_bcax<mode>):\n\tChange to define_expand, add missing (trivially-predicated) not\n\trtx to fix wrong code bug.\n\t(*aarch64_sve2_bcax<mode>): New.\n\ngcc/testsuite/ChangeLog:\n\n\tPR target/97730\n\t* gcc.target/aarch64/sve2/bcax_1.c (OP): Add missing bitwise not\n\tto match correct bcax semantics.\n\t* gcc.dg/vect/pr97730.c: New test.", "tree": {"sha": "ee704c64d0e9d354585837dc07517422054bf1d2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ee704c64d0e9d354585837dc07517422054bf1d2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7f445b5d6116000f1a6527f2164836cbc7c01dee", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7f445b5d6116000f1a6527f2164836cbc7c01dee", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7f445b5d6116000f1a6527f2164836cbc7c01dee", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7f445b5d6116000f1a6527f2164836cbc7c01dee/comments", "author": {"login": "acoplan-arm", "id": 86676934, "node_id": "MDQ6VXNlcjg2Njc2OTM0", "avatar_url": "https://avatars.githubusercontent.com/u/86676934?v=4", "gravatar_id": "", "url": "https://api.github.com/users/acoplan-arm", "html_url": "https://github.com/acoplan-arm", "followers_url": "https://api.github.com/users/acoplan-arm/followers", "following_url": "https://api.github.com/users/acoplan-arm/following{/other_user}", "gists_url": "https://api.github.com/users/acoplan-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/acoplan-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/acoplan-arm/subscriptions", "organizations_url": "https://api.github.com/users/acoplan-arm/orgs", "repos_url": "https://api.github.com/users/acoplan-arm/repos", "events_url": "https://api.github.com/users/acoplan-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/acoplan-arm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "acoplan-arm", "id": 86676934, "node_id": "MDQ6VXNlcjg2Njc2OTM0", "avatar_url": "https://avatars.githubusercontent.com/u/86676934?v=4", "gravatar_id": "", "url": "https://api.github.com/users/acoplan-arm", "html_url": "https://github.com/acoplan-arm", "followers_url": "https://api.github.com/users/acoplan-arm/followers", "following_url": "https://api.github.com/users/acoplan-arm/following{/other_user}", "gists_url": "https://api.github.com/users/acoplan-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/acoplan-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/acoplan-arm/subscriptions", "organizations_url": "https://api.github.com/users/acoplan-arm/orgs", "repos_url": "https://api.github.com/users/acoplan-arm/repos", "events_url": "https://api.github.com/users/acoplan-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/acoplan-arm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "64326bb428ac750ec3b0f56c06dfb98277cd41b5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/64326bb428ac750ec3b0f56c06dfb98277cd41b5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/64326bb428ac750ec3b0f56c06dfb98277cd41b5"}], "stats": {"total": 45, "additions": 41, "deletions": 4}, "files": [{"sha": "12dc9aaac554c2b4e3d1a76d4298f61e27c53724", "filename": "gcc/config/aarch64/aarch64-sve2.md", "status": "modified", "additions": 28, "deletions": 3, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7f445b5d6116000f1a6527f2164836cbc7c01dee/gcc%2Fconfig%2Faarch64%2Faarch64-sve2.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7f445b5d6116000f1a6527f2164836cbc7c01dee/gcc%2Fconfig%2Faarch64%2Faarch64-sve2.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-sve2.md?ref=7f445b5d6116000f1a6527f2164836cbc7c01dee", "patch": "@@ -786,17 +786,42 @@\n ;; -------------------------------------------------------------------------\n \n ;; Unpredicated exclusive OR of AND.\n-(define_insn \"@aarch64_sve2_bcax<mode>\"\n+(define_expand \"@aarch64_sve2_bcax<mode>\"\n+  [(set (match_operand:SVE_FULL_I 0 \"register_operand\")\n+\t(xor:SVE_FULL_I\n+\t  (and:SVE_FULL_I\n+\t    (unspec:SVE_FULL_I\n+\t      [(match_dup 4)\n+\t       (not:SVE_FULL_I\n+\t\t (match_operand:SVE_FULL_I 3 \"register_operand\"))]\n+\t      UNSPEC_PRED_X)\n+\t    (match_operand:SVE_FULL_I 2 \"register_operand\"))\n+\t  (match_operand:SVE_FULL_I 1 \"register_operand\")))]\n+  \"TARGET_SVE2\"\n+  {\n+    operands[4] = CONSTM1_RTX (<VPRED>mode);\n+  }\n+)\n+\n+(define_insn_and_rewrite \"*aarch64_sve2_bcax<mode>\"\n   [(set (match_operand:SVE_FULL_I 0 \"register_operand\" \"=w, ?&w\")\n \t(xor:SVE_FULL_I\n \t  (and:SVE_FULL_I\n-\t    (match_operand:SVE_FULL_I 2 \"register_operand\" \"w, w\")\n-\t    (match_operand:SVE_FULL_I 3 \"register_operand\" \"w, w\"))\n+\t    (unspec:SVE_FULL_I\n+\t      [(match_operand 4)\n+\t       (not:SVE_FULL_I\n+\t\t (match_operand:SVE_FULL_I 3 \"register_operand\" \"w, w\"))]\n+\t      UNSPEC_PRED_X)\n+\t    (match_operand:SVE_FULL_I 2 \"register_operand\" \"w, w\"))\n \t  (match_operand:SVE_FULL_I 1 \"register_operand\" \"0, w\")))]\n   \"TARGET_SVE2\"\n   \"@\n   bcax\\t%0.d, %0.d, %2.d, %3.d\n   movprfx\\t%0, %1\\;bcax\\t%0.d, %0.d, %2.d, %3.d\"\n+  \"&& !CONSTANT_P (operands[4])\"\n+  {\n+    operands[4] = CONSTM1_RTX (<VPRED>mode);\n+  }\n   [(set_attr \"movprfx\" \"*,yes\")]\n )\n "}, {"sha": "af4bca448798b50344c4246a68ae9e36c2ae48a7", "filename": "gcc/testsuite/gcc.dg/vect/pr97730.c", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7f445b5d6116000f1a6527f2164836cbc7c01dee/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fpr97730.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7f445b5d6116000f1a6527f2164836cbc7c01dee/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fpr97730.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fpr97730.c?ref=7f445b5d6116000f1a6527f2164836cbc7c01dee", "patch": "@@ -0,0 +1,12 @@\n+/* { dg-additional-options \"-O1\" } */\n+unsigned b = 0xce8e5a48, c = 0xb849691a;\n+unsigned a[8080];\n+int main() {\n+  a[0] = b;\n+  c = c;\n+  unsigned f = 0xb1e8;\n+  for (int h = 0; h < 5; h++)\n+    a[h] = (b & c) ^ f;\n+  if (a[0] != 0x8808f9e0)\n+    __builtin_abort();\n+}"}, {"sha": "7c31afc4f1958de20fcae5aabd4d6f2fe3dd6ee0", "filename": "gcc/testsuite/gcc.target/aarch64/sve2/bcax_1.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7f445b5d6116000f1a6527f2164836cbc7c01dee/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve2%2Fbcax_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7f445b5d6116000f1a6527f2164836cbc7c01dee/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve2%2Fbcax_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve2%2Fbcax_1.c?ref=7f445b5d6116000f1a6527f2164836cbc7c01dee", "patch": "@@ -1,7 +1,7 @@\n /* { dg-do compile } */\n /* { dg-options \"-O2 -ftree-vectorize -fdump-tree-vect-details --save-temps\" } */\n \n-#define OP(x,y,z) ((x) ^ ((y) & (z)))\n+#define OP(x,y,z) ((x) ^ (~(y) & (z)))\n \n #include \"bitsel_1.c\"\n "}]}