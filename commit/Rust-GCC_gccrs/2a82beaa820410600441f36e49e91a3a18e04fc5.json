{"sha": "2a82beaa820410600441f36e49e91a3a18e04fc5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MmE4MmJlYWE4MjA0MTA2MDA0NDFmMzZlNDllOTFhM2ExOGUwNGZjNQ==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2019-04-01T07:16:38Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2019-04-01T07:16:38Z"}, "message": "re PR c/71598 (Wrong optimization with aliasing enums)\n\n2019-04-01  Richard Biener  <rguenther@suse.de>\n\n\tPR c/71598\n\t* gimple.c: Include langhooks.h.\n\t(gimple_get_alias_set): Treat enumeral types as the underlying\n\tinteger type.\n\n\tc/\n\t* c-tree.h (c_get_alias_set): Declare.\n\t* c-objc-common.h (LANG_HOOKS_GET_ALIAS_SET): Use c_get_alias_set.\n\t* c-objc-common.c (c_get_alias_set): Treat enumeral types\n\tas the underlying integer type.\n\n\t* gcc.dg/torture/pr71598-1.c: New testcase.\n\t* gcc.dg/torture/pr71598-2.c: Likewise.\n\t* gcc.dg/torture/pr71598-3.c: Likewise.\n\nFrom-SVN: r270052", "tree": {"sha": "490cacb54993cc607e3f50a0411bec1e99e8f8b3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/490cacb54993cc607e3f50a0411bec1e99e8f8b3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2a82beaa820410600441f36e49e91a3a18e04fc5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2a82beaa820410600441f36e49e91a3a18e04fc5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2a82beaa820410600441f36e49e91a3a18e04fc5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2a82beaa820410600441f36e49e91a3a18e04fc5/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "acf8e57ae2ee28123fc04ce26635963751851824", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/acf8e57ae2ee28123fc04ce26635963751851824", "html_url": "https://github.com/Rust-GCC/gccrs/commit/acf8e57ae2ee28123fc04ce26635963751851824"}], "stats": {"total": 144, "additions": 143, "deletions": 1}, "files": [{"sha": "6982daaab18aab1817e24078a3e2ce75d843c735", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a82beaa820410600441f36e49e91a3a18e04fc5/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a82beaa820410600441f36e49e91a3a18e04fc5/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=2a82beaa820410600441f36e49e91a3a18e04fc5", "patch": "@@ -1,3 +1,10 @@\n+2019-04-01  Richard Biener  <rguenther@suse.de>\n+\n+\tPR c/71598\n+\t* gimple.c: Include langhooks.h.\n+\t(gimple_get_alias_set): Treat enumeral types as the underlying\n+\tinteger type.\n+\n 2019-03-29  Kugan Vivekanandarajah  <kuganv@linaro.org>\n \t    Eric Botcazou  <ebotcazou@adacore.com>\n "}, {"sha": "076a9a26501c0c87645c29092473a9a881c52975", "filename": "gcc/c/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a82beaa820410600441f36e49e91a3a18e04fc5/gcc%2Fc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a82beaa820410600441f36e49e91a3a18e04fc5/gcc%2Fc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2FChangeLog?ref=2a82beaa820410600441f36e49e91a3a18e04fc5", "patch": "@@ -1,3 +1,11 @@\n+2019-04-01  Richard Biener  <rguenther@suse.de>\n+\n+\tPR c/71598\n+\t* c-tree.h (c_get_alias_set): Declare.\n+\t* c-objc-common.h (LANG_HOOKS_GET_ALIAS_SET): Use c_get_alias_set.\n+\t* c-objc-common.c (c_get_alias_set): Treat enumeral types\n+\tas the underlying integer type.\n+\n 2019-03-19  Martin Sebor  <msebor@redhat.com>\n \n \tPR tree-optimization/89688"}, {"sha": "2b76737a74a58b0df49086ae1fcebeb517652857", "filename": "gcc/c/c-objc-common.c", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a82beaa820410600441f36e49e91a3a18e04fc5/gcc%2Fc%2Fc-objc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a82beaa820410600441f36e49e91a3a18e04fc5/gcc%2Fc%2Fc-objc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2Fc-objc-common.c?ref=2a82beaa820410600441f36e49e91a3a18e04fc5", "patch": "@@ -265,3 +265,22 @@ c_vla_unspec_p (tree x, tree fn ATTRIBUTE_UNUSED)\n {\n   return c_vla_type_p (x);\n }\n+\n+/* Special routine to get the alias set of T for C.  */\n+\n+alias_set_type\n+c_get_alias_set (tree t)\n+{\n+  /* Allow aliasing between enumeral types and the underlying\n+     integer type.  This is required since those are compatible types.  */\n+  if (TREE_CODE (t) == ENUMERAL_TYPE)\n+    {\n+      tree t1 = c_common_type_for_size (tree_to_uhwi (TYPE_SIZE (t)),\n+\t\t\t\t\t/* short-cut commoning to signed\n+\t\t\t\t\t   type.  */\n+\t\t\t\t\tfalse);\n+      return get_alias_set (t1);\n+    }\n+\n+  return c_common_get_alias_set (t);\n+}"}, {"sha": "f5e820420f6b0c6322230c727ba612d95b826f5d", "filename": "gcc/c/c-objc-common.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a82beaa820410600441f36e49e91a3a18e04fc5/gcc%2Fc%2Fc-objc-common.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a82beaa820410600441f36e49e91a3a18e04fc5/gcc%2Fc%2Fc-objc-common.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2Fc-objc-common.h?ref=2a82beaa820410600441f36e49e91a3a18e04fc5", "patch": "@@ -43,7 +43,7 @@ along with GCC; see the file COPYING3.  If not see\n #undef LANG_HOOKS_POST_OPTIONS\n #define LANG_HOOKS_POST_OPTIONS c_common_post_options\n #undef LANG_HOOKS_GET_ALIAS_SET\n-#define LANG_HOOKS_GET_ALIAS_SET c_common_get_alias_set\n+#define LANG_HOOKS_GET_ALIAS_SET c_get_alias_set\n #undef LANG_HOOKS_PARSE_FILE\n #define LANG_HOOKS_PARSE_FILE c_common_parse_file\n #undef LANG_HOOKS_FINISH_INCOMPLETE_DECL"}, {"sha": "9393f6d15454a44dd5183ca20f4d805e61008af8", "filename": "gcc/c/c-tree.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a82beaa820410600441f36e49e91a3a18e04fc5/gcc%2Fc%2Fc-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a82beaa820410600441f36e49e91a3a18e04fc5/gcc%2Fc%2Fc-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2Fc-tree.h?ref=2a82beaa820410600441f36e49e91a3a18e04fc5", "patch": "@@ -623,6 +623,7 @@ extern bool c_missing_noreturn_ok_p (tree);\n extern bool c_warn_unused_global_decl (const_tree);\n extern void c_initialize_diagnostics (diagnostic_context *);\n extern bool c_vla_unspec_p (tree x, tree fn);\n+extern alias_set_type c_get_alias_set (tree);\n \n /* in c-typeck.c */\n extern int in_alignof;"}, {"sha": "8fae60fb848b60317e46532f8672f9fa7d4b2ad8", "filename": "gcc/gimple.c", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a82beaa820410600441f36e49e91a3a18e04fc5/gcc%2Fgimple.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a82beaa820410600441f36e49e91a3a18e04fc5/gcc%2Fgimple.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple.c?ref=2a82beaa820410600441f36e49e91a3a18e04fc5", "patch": "@@ -44,6 +44,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"stringpool.h\"\n #include \"attribs.h\"\n #include \"asan.h\"\n+#include \"langhooks.h\"\n \n \n /* All the tuples have their operand vector (if present) at the very bottom\n@@ -2587,6 +2588,16 @@ gimple_get_alias_set (tree t)\n \treturn get_alias_set (t1);\n     }\n \n+  /* Allow aliasing between enumeral types and the underlying\n+     integer type.  This is required for C since those are\n+     compatible types.  */\n+  else if (TREE_CODE (t) == ENUMERAL_TYPE)\n+    {\n+      tree t1 = lang_hooks.types.type_for_size (tree_to_uhwi (TYPE_SIZE (t)),\n+\t\t\t\t\t\tfalse /* short-cut above */);\n+      return get_alias_set (t1);\n+    }\n+\n   return -1;\n }\n "}, {"sha": "a6ac581f74484ee695c53062aeae392a50316b89", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a82beaa820410600441f36e49e91a3a18e04fc5/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a82beaa820410600441f36e49e91a3a18e04fc5/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=2a82beaa820410600441f36e49e91a3a18e04fc5", "patch": "@@ -1,3 +1,10 @@\n+2019-04-01  Richard Biener  <rguenther@suse.de>\n+\n+\tPR c/71598\n+\t* gcc.dg/torture/pr71598-1.c: New testcase.\n+\t* gcc.dg/torture/pr71598-2.c: Likewise.\n+\t* gcc.dg/torture/pr71598-3.c: Likewise.\n+\n 2019-03-31  Marek Polacek  <polacek@redhat.com>\n \n \tPR c++/89852 - ICE with C++11 functional cast with { }."}, {"sha": "7dfcb3d80d616e2bf521a8788f99810e17280335", "filename": "gcc/testsuite/gcc.dg/torture/pr71598-1.c", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a82beaa820410600441f36e49e91a3a18e04fc5/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr71598-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a82beaa820410600441f36e49e91a3a18e04fc5/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr71598-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr71598-1.c?ref=2a82beaa820410600441f36e49e91a3a18e04fc5", "patch": "@@ -0,0 +1,21 @@\n+/* { dg-do run } */\n+/* { dg-additional-options \"-fno-short-enums\" } */\n+\n+enum e1 { c1 };\n+\n+__attribute__((noinline,noclone))\n+int f(enum e1 *p, unsigned *q)\n+{\n+  *p = c1;\n+  *q = 2;\n+  return *p;\n+}\n+\n+int main()\n+{\n+  unsigned x;\n+\n+  if (f(&x, &x) != 2)\n+    __builtin_abort();\n+  return 0;\n+}"}, {"sha": "f140287d0a502279253007372c8323128f5face0", "filename": "gcc/testsuite/gcc.dg/torture/pr71598-2.c", "status": "added", "additions": 47, "deletions": 0, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a82beaa820410600441f36e49e91a3a18e04fc5/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr71598-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a82beaa820410600441f36e49e91a3a18e04fc5/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr71598-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr71598-2.c?ref=2a82beaa820410600441f36e49e91a3a18e04fc5", "patch": "@@ -0,0 +1,47 @@\n+/* { dg-do run } */\n+/* { dg-additional-options \"-fshort-enums\" } */\n+\n+enum e1 { c1 = -__INT_MAX__ };\n+\n+__attribute__((noinline,noclone))\n+int f(enum e1 *p, signed int *q)\n+{\n+  *p = c1;\n+  *q = 2;\n+  return *p;\n+}\n+\n+enum e2 { c2 = __SHRT_MAX__ + 1};\n+\n+__attribute__((noinline,noclone))\n+int g(enum e2 *p, unsigned short *q)\n+{\n+  *p = c2;\n+  *q = 2;\n+  return *p;\n+}\n+\n+enum e3 { c3 = __SCHAR_MAX__ };\n+\n+__attribute__((noinline,noclone))\n+int h(enum e3 *p, unsigned char *q)\n+{\n+  *p = c3;\n+  *q = 2;\n+  return *p;\n+}\n+\n+int main()\n+{\n+  signed x;\n+  unsigned short y;\n+  unsigned char z;\n+\n+  if (f(&x, &x) != 2)\n+    __builtin_abort();\n+  if (g(&y, &y) != 2)\n+    __builtin_abort();\n+  if (h(&z, &z) != 2)\n+    __builtin_abort();\n+  return 0;\n+}"}, {"sha": "0b4b842133f68c8107721837e70912fb4b6fe420", "filename": "gcc/testsuite/gcc.dg/torture/pr71598-3.c", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a82beaa820410600441f36e49e91a3a18e04fc5/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr71598-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a82beaa820410600441f36e49e91a3a18e04fc5/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr71598-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr71598-3.c?ref=2a82beaa820410600441f36e49e91a3a18e04fc5", "patch": "@@ -0,0 +1,21 @@\n+/* { dg-do run } */\n+\n+enum e1 { A, B };\n+enum e2 { C, D };\n+\n+__attribute__((noinline,noclone))\n+enum e1 f(unsigned int *p)\n+{\n+  *(enum e1 *)p = A;\n+  *(enum e2 *)p = D;\n+  return *(enum e1 *)p;\n+}\n+\n+int main()\n+{\n+  unsigned int storage;\n+\n+  if (f(&storage) != B)\n+    __builtin_abort();\n+  return 0;\n+}"}]}