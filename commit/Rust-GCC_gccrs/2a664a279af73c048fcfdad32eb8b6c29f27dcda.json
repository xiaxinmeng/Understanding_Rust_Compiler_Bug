{"sha": "2a664a279af73c048fcfdad32eb8b6c29f27dcda", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MmE2NjRhMjc5YWY3M2MwNDhmY2ZkYWQzMmViOGI2YzI5ZjI3ZGNkYQ==", "commit": {"author": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2014-12-10T00:56:00Z"}, "committer": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2014-12-10T00:56:00Z"}, "message": "compiler: Don't track fields in compiler-generated hash and eq funcs.\n\nAlso, lower field tracking calls.\n\nFrom-SVN: r218554", "tree": {"sha": "41c86ea0b9ab3c207438f31685ae732770add85d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/41c86ea0b9ab3c207438f31685ae732770add85d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2a664a279af73c048fcfdad32eb8b6c29f27dcda", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2a664a279af73c048fcfdad32eb8b6c29f27dcda", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2a664a279af73c048fcfdad32eb8b6c29f27dcda", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2a664a279af73c048fcfdad32eb8b6c29f27dcda/comments", "author": null, "committer": null, "parents": [{"sha": "9131b50960c20488a255ede40a3ebd3ed6b6bd82", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9131b50960c20488a255ede40a3ebd3ed6b6bd82", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9131b50960c20488a255ede40a3ebd3ed6b6bd82"}], "stats": {"total": 23, "additions": 23, "deletions": 0}, "files": [{"sha": "0916adc3f3eec6047edfce0d433b0441f4802205", "filename": "gcc/go/gofrontend/expressions.cc", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a664a279af73c048fcfdad32eb8b6c29f27dcda/gcc%2Fgo%2Fgofrontend%2Fexpressions.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a664a279af73c048fcfdad32eb8b6c29f27dcda/gcc%2Fgo%2Fgofrontend%2Fexpressions.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Fexpressions.cc?ref=2a664a279af73c048fcfdad32eb8b6c29f27dcda", "patch": "@@ -10729,6 +10729,10 @@ Field_reference_expression::do_lower(Gogo* gogo, Named_object* function,\n   if (field->tag().find(\"go:\\\"track\\\"\") == std::string::npos)\n     return this;\n \n+  // References from functions generated by the compiler don't count.\n+  if (function->func_value()->is_type_specific_function())\n+    return this;\n+\n   // We have found a reference to a tracked field.  Build a call to\n   // the runtime function __go_fieldtrack with a string that describes\n   // the field.  FIXME: We should only call this once per referenced\n@@ -10785,6 +10789,7 @@ Field_reference_expression::do_lower(Gogo* gogo, Named_object* function,\n   e = Expression::make_unary(OPERATOR_AND, e, loc);\n \n   Expression* call = Runtime::make_call(Runtime::FIELDTRACK, loc, 1, e);\n+  gogo->lower_expression(function, inserter, &call);\n   inserter->insert(Statement::make_statement(call, false));\n \n   // Put this function, and the global variable we just created, into"}, {"sha": "d7f4437d4f473e201f0e38f0ba56c50b2890ddca", "filename": "gcc/go/gofrontend/gogo.cc", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a664a279af73c048fcfdad32eb8b6c29f27dcda/gcc%2Fgo%2Fgofrontend%2Fgogo.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a664a279af73c048fcfdad32eb8b6c29f27dcda/gcc%2Fgo%2Fgofrontend%2Fgogo.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Fgogo.cc?ref=2a664a279af73c048fcfdad32eb8b6c29f27dcda", "patch": "@@ -4433,6 +4433,7 @@ Function::Function(Function_type* type, Function* enclosing, Block* block,\n     is_sink_(false), results_are_named_(false), nointerface_(false),\n     is_unnamed_type_stub_method_(false), calls_recover_(false),\n     is_recover_thunk_(false), has_recover_thunk_(false),\n+    calls_defer_retaddr_(false), is_type_specific_function_(false),\n     in_unique_section_(false)\n {\n }"}, {"sha": "a75ae4b9542d025d7e410254f307f23be6ac193f", "filename": "gcc/go/gofrontend/gogo.h", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a664a279af73c048fcfdad32eb8b6c29f27dcda/gcc%2Fgo%2Fgofrontend%2Fgogo.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a664a279af73c048fcfdad32eb8b6c29f27dcda/gcc%2Fgo%2Fgofrontend%2Fgogo.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Fgogo.h?ref=2a664a279af73c048fcfdad32eb8b6c29f27dcda", "patch": "@@ -1071,6 +1071,18 @@ class Function\n   set_calls_defer_retaddr()\n   { this->calls_defer_retaddr_ = true; }\n \n+  // Whether this is a type hash or equality function created by the\n+  // compiler.\n+  bool\n+  is_type_specific_function()\n+  { return this->is_type_specific_function_; }\n+\n+  // Record that this function is a type hash or equality function\n+  // created by the compiler.\n+  void\n+  set_is_type_specific_function()\n+  { this->is_type_specific_function_ = true; }\n+\n   // Mark the function as going into a unique section.\n   void\n   set_in_unique_section()\n@@ -1199,6 +1211,9 @@ class Function\n   // True if this is a thunk built for a defer statement that calls\n   // the __go_set_defer_retaddr runtime function.\n   bool calls_defer_retaddr_ : 1;\n+  // True if this is a function built by the compiler to as a hash or\n+  // equality function for some type.\n+  bool is_type_specific_function_ : 1;\n   // True if this function should be put in a unique section.  This is\n   // turned on for field tracking.\n   bool in_unique_section_ : 1;"}, {"sha": "6533cd46ea2977a27b2110cefb1a6f68eb86e646", "filename": "gcc/go/gofrontend/types.cc", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a664a279af73c048fcfdad32eb8b6c29f27dcda/gcc%2Fgo%2Fgofrontend%2Ftypes.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a664a279af73c048fcfdad32eb8b6c29f27dcda/gcc%2Fgo%2Fgofrontend%2Ftypes.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Ftypes.cc?ref=2a664a279af73c048fcfdad32eb8b6c29f27dcda", "patch": "@@ -1805,6 +1805,7 @@ Type::write_specific_type_functions(Gogo* gogo, Named_type* name,\n \n   Named_object* hash_fn = gogo->start_function(hash_name, hash_fntype, false,\n \t\t\t\t\t       bloc);\n+  hash_fn->func_value()->set_is_type_specific_function();\n   gogo->start_block(bloc);\n \n   if (name != NULL && name->real_type()->named_type() != NULL)\n@@ -1825,6 +1826,7 @@ Type::write_specific_type_functions(Gogo* gogo, Named_type* name,\n \n   Named_object *equal_fn = gogo->start_function(equal_name, equal_fntype,\n \t\t\t\t\t\tfalse, bloc);\n+  equal_fn->func_value()->set_is_type_specific_function();\n   gogo->start_block(bloc);\n \n   if (name != NULL && name->real_type()->named_type() != NULL)"}]}