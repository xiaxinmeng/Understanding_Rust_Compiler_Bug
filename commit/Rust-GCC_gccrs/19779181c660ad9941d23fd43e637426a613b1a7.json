{"sha": "19779181c660ad9941d23fd43e637426a613b1a7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTk3NzkxODFjNjYwYWQ5OTQxZDIzZmQ0M2U2Mzc0MjZhNjEzYjFhNw==", "commit": {"author": {"name": "Nathan Froyd", "email": "froydnj@codesourcery.com", "date": "2010-11-24T23:37:33Z"}, "committer": {"name": "Nathan Froyd", "email": "froydnj@gcc.gnu.org", "date": "2010-11-24T23:37:33Z"}, "message": "targhooks.c (default_except_unwind_info): Remove MUST_USE_SJLJ_EXCEPTIONS case.\n\n\t* targhooks.c (default_except_unwind_info): Remove\n\tMUST_USE_SJLJ_EXCEPTIONS case.\n\t* config/h8300/h8300.h (MUST_USE_SJLJ_EXCEPTIONS): Delete.\n\t* config/h8300/h8300.c (TARGET_EXCEPT_UNWIND_INFO): Define.\n\t* doc/tm.texi.in (MUST_USE_SJLJ_EXCEPTIONS): Delete.\n\t* doc/tm.texi: Regenerate.\n\t* system.h (MUST_USE_SJLJ_EXCEPTIONS): Poison.\n\nFrom-SVN: r167131", "tree": {"sha": "b2349d4d5104f6147f26cf5386aefd4ba0d08ff6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b2349d4d5104f6147f26cf5386aefd4ba0d08ff6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/19779181c660ad9941d23fd43e637426a613b1a7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/19779181c660ad9941d23fd43e637426a613b1a7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/19779181c660ad9941d23fd43e637426a613b1a7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/19779181c660ad9941d23fd43e637426a613b1a7/comments", "author": null, "committer": null, "parents": [{"sha": "a3c1f9efdb3a8507adba00fe24d67b7df7e3c54f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a3c1f9efdb3a8507adba00fe24d67b7df7e3c54f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a3c1f9efdb3a8507adba00fe24d67b7df7e3c54f"}], "stats": {"total": 39, "additions": 15, "deletions": 24}, "files": [{"sha": "a637c6c93368409f729f097fdab0838b9a0589b7", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/19779181c660ad9941d23fd43e637426a613b1a7/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/19779181c660ad9941d23fd43e637426a613b1a7/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=19779181c660ad9941d23fd43e637426a613b1a7", "patch": "@@ -1,3 +1,13 @@\n+2010-11-24  Nathan Froyd  <froydnj@codesourcery.com>\n+\n+\t* targhooks.c (default_except_unwind_info): Remove\n+\tMUST_USE_SJLJ_EXCEPTIONS case.\n+\t* config/h8300/h8300.h (MUST_USE_SJLJ_EXCEPTIONS): Delete.\n+\t* config/h8300/h8300.c (TARGET_EXCEPT_UNWIND_INFO): Define.\n+\t* doc/tm.texi.in (MUST_USE_SJLJ_EXCEPTIONS): Delete.\n+\t* doc/tm.texi: Regenerate.\n+\t* system.h (MUST_USE_SJLJ_EXCEPTIONS): Poison.\n+\n 2010-11-24  Nathan Froyd  <froydnj@codesourcery.com>\n \n \t* cppbuiltin.c (define_builtin_macros_for_type_sizes): Define"}, {"sha": "31aa54cca9b1b1b2a4a2834e25736aaa8a0670b3", "filename": "gcc/config/h8300/h8300.c", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/19779181c660ad9941d23fd43e637426a613b1a7/gcc%2Fconfig%2Fh8300%2Fh8300.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/19779181c660ad9941d23fd43e637426a613b1a7/gcc%2Fconfig%2Fh8300%2Fh8300.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fh8300%2Fh8300.c?ref=19779181c660ad9941d23fd43e637426a613b1a7", "patch": "@@ -5975,4 +5975,7 @@ h8300_trampoline_init (rtx m_tramp, tree fndecl, rtx cxt)\n #undef TARGET_OPTION_OPTIMIZATION_TABLE\n #define TARGET_OPTION_OPTIMIZATION_TABLE h8300_option_optimization_table\n \n+#undef TARGET_EXCEPT_UNWIND_INFO\n+#define TARGET_EXCEPT_UNWIND_INFO sjlj_except_unwind_info\n+\n struct gcc_target targetm = TARGET_INITIALIZER;"}, {"sha": "589b70f89a7392dc036c8b83008b93284dd2af96", "filename": "gcc/config/h8300/h8300.h", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/19779181c660ad9941d23fd43e637426a613b1a7/gcc%2Fconfig%2Fh8300%2Fh8300.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/19779181c660ad9941d23fd43e637426a613b1a7/gcc%2Fconfig%2Fh8300%2Fh8300.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fh8300%2Fh8300.h?ref=19779181c660ad9941d23fd43e637426a613b1a7", "patch": "@@ -125,10 +125,8 @@ extern const char * const *h8_reg_names;\n #define TARGET_DEFAULT (MASK_QUICKCALL)\n #endif\n \n-/* We want dwarf2 info available to gdb...  */\n+/* We want dwarf2 info available to gdb.  */\n #define DWARF2_DEBUGGING_INFO        1\n-/* ... but we don't actually support full dwarf2 EH.  */\n-#define MUST_USE_SJLJ_EXCEPTIONS 1\n \n /* The return address is pushed on the stack.  */\n #define INCOMING_RETURN_ADDR_RTX   gen_rtx_MEM (Pmode, gen_rtx_REG (Pmode, STACK_POINTER_REGNUM))"}, {"sha": "6cb25072c13640ec43881f2fc57417cc5a61f60d", "filename": "gcc/doc/tm.texi", "status": "modified", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/19779181c660ad9941d23fd43e637426a613b1a7/gcc%2Fdoc%2Ftm.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/19779181c660ad9941d23fd43e637426a613b1a7/gcc%2Fdoc%2Ftm.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Ftm.texi?ref=19779181c660ad9941d23fd43e637426a613b1a7", "patch": "@@ -8888,13 +8888,6 @@ This variable should be set to @code{true} if the target ABI requires unwinding\n tables even when exceptions are not used.\n @end deftypevr\n \n-@defmac MUST_USE_SJLJ_EXCEPTIONS\n-This macro need only be defined if @code{DWARF2_UNWIND_INFO} is\n-runtime-variable.  In that case, @file{except.h} cannot correctly\n-determine the corresponding definition of @code{MUST_USE_SJLJ_EXCEPTIONS},\n-so the target must provide it directly.\n-@end defmac\n-\n @defmac DONT_USE_BUILTIN_SETJMP\n Define this macro to 1 if the @code{setjmp}/@code{longjmp}-based scheme\n should use the @code{setjmp}/@code{longjmp} functions from the C library"}, {"sha": "1e4432bce59386b1a5e9c87e104aa1f85cadcba0", "filename": "gcc/doc/tm.texi.in", "status": "modified", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/19779181c660ad9941d23fd43e637426a613b1a7/gcc%2Fdoc%2Ftm.texi.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/19779181c660ad9941d23fd43e637426a613b1a7/gcc%2Fdoc%2Ftm.texi.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Ftm.texi.in?ref=19779181c660ad9941d23fd43e637426a613b1a7", "patch": "@@ -8858,13 +8858,6 @@ This variable should be set to @code{true} if the target ABI requires unwinding\n tables even when exceptions are not used.\n @end deftypevr\n \n-@defmac MUST_USE_SJLJ_EXCEPTIONS\n-This macro need only be defined if @code{DWARF2_UNWIND_INFO} is\n-runtime-variable.  In that case, @file{except.h} cannot correctly\n-determine the corresponding definition of @code{MUST_USE_SJLJ_EXCEPTIONS},\n-so the target must provide it directly.\n-@end defmac\n-\n @defmac DONT_USE_BUILTIN_SETJMP\n Define this macro to 1 if the @code{setjmp}/@code{longjmp}-based scheme\n should use the @code{setjmp}/@code{longjmp} functions from the C library"}, {"sha": "41e865744e9dc9539c568b68d0151e92d007bf00", "filename": "gcc/system.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/19779181c660ad9941d23fd43e637426a613b1a7/gcc%2Fsystem.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/19779181c660ad9941d23fd43e637426a613b1a7/gcc%2Fsystem.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsystem.h?ref=19779181c660ad9941d23fd43e637426a613b1a7", "patch": "@@ -786,7 +786,7 @@ extern void fancy_abort (const char *, int, const char *) ATTRIBUTE_NORETURN;\n \tSWITCH_CURTAILS_COMPILATION SWITCH_TAKES_ARG WORD_SWITCH_TAKES_ARG \\\n \tTARGET_OPTION_TRANSLATE_TABLE HANDLE_PRAGMA_PACK_PUSH_POP\t   \\\n \tHANDLE_SYSV_PRAGMA HANDLE_PRAGMA_WEAK CONDITIONAL_REGISTER_USAGE   \\\n-\tFUNCTION_ARG_BOUNDARY\n+\tFUNCTION_ARG_BOUNDARY MUST_USE_SJLJ_EXCEPTIONS\n \n /* Hooks that are no longer used.  */\n  #pragma GCC poison LANG_HOOKS_FUNCTION_MARK LANG_HOOKS_FUNCTION_FREE\t\\"}, {"sha": "f55fa8519d8a82d746362de000690f2b1707d5f2", "filename": "gcc/targhooks.c", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/19779181c660ad9941d23fd43e637426a613b1a7/gcc%2Ftarghooks.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/19779181c660ad9941d23fd43e637426a613b1a7/gcc%2Ftarghooks.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftarghooks.c?ref=19779181c660ad9941d23fd43e637426a613b1a7", "patch": "@@ -1311,12 +1311,6 @@ default_debug_unwind_info (void)\n enum unwind_info_type\n default_except_unwind_info (void)\n {\n-  /* ??? Change the one user to the hook, then poison this.  */\n-#ifdef MUST_USE_SJLJ_EXCEPTIONS\n-  if (MUST_USE_SJLJ_EXCEPTIONS)\n-    return UI_SJLJ;\n-#endif\n-\n   /* Obey the configure switch to turn on sjlj exceptions.  */\n #ifdef CONFIG_SJLJ_EXCEPTIONS\n   if (CONFIG_SJLJ_EXCEPTIONS)"}]}