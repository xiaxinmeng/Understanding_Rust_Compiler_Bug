{"sha": "f7fe97da3633ca6a5e611956b09f87bf078d1c77", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjdmZTk3ZGEzNjMzY2E2YTVlNjExOTU2YjA5Zjg3YmYwNzhkMWM3Nw==", "commit": {"author": {"name": "Tom Tromey", "email": "tromey@redhat.com", "date": "2003-08-01T03:02:00Z"}, "committer": {"name": "Tom Tromey", "email": "tromey@gcc.gnu.org", "date": "2003-08-01T03:02:00Z"}, "message": "re PR libgcj/11737 (java.io.ObjectOutputStream.writeObject does not work with HashMap)\n\n\tFix for PR libgcj/11737:\n\t* java/io/ObjectOutputStream.java (getMethod): Make method\n\taccessible.\n\t(getField): Likewise.\n\t(writeObject): Use getMethod.\n\tImport PrivilegedAction and AccessController.\n\t(callWriteMethod): Don't check whether m is null.  Catch\n\tNoSuchMethodException.\n\nFrom-SVN: r70035", "tree": {"sha": "c15a4dc8e5e055180dc8b8d0127d77d609e250ad", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c15a4dc8e5e055180dc8b8d0127d77d609e250ad"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f7fe97da3633ca6a5e611956b09f87bf078d1c77", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f7fe97da3633ca6a5e611956b09f87bf078d1c77", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f7fe97da3633ca6a5e611956b09f87bf078d1c77", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f7fe97da3633ca6a5e611956b09f87bf078d1c77/comments", "author": null, "committer": null, "parents": [{"sha": "3c260e1d978952822869eac25f9ded0a82d75563", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3c260e1d978952822869eac25f9ded0a82d75563", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3c260e1d978952822869eac25f9ded0a82d75563"}], "stats": {"total": 63, "additions": 50, "deletions": 13}, "files": [{"sha": "573b9836ee3205dfcc4629754cea99a0290291ba", "filename": "libjava/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f7fe97da3633ca6a5e611956b09f87bf078d1c77/libjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f7fe97da3633ca6a5e611956b09f87bf078d1c77/libjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FChangeLog?ref=f7fe97da3633ca6a5e611956b09f87bf078d1c77", "patch": "@@ -1,5 +1,14 @@\n 2003-07-31  Tom Tromey  <tromey@redhat.com>\n \n+\tFix for PR libgcj/11737:\n+\t* java/io/ObjectOutputStream.java (getMethod): Make method\n+\taccessible.\n+\t(getField): Likewise.\n+\t(writeObject): Use getMethod.\n+\tImport PrivilegedAction and AccessController.\n+\t(callWriteMethod): Don't check whether m is null.  Catch\n+\tNoSuchMethodException.\n+\n \t* java/awt/geom/Arc2D.java (getBounds2D): Implement.\n \t(containsAngle): Likewise.\n \t(getStartPoint): Rewrote."}, {"sha": "49cb636ee0df9dcc4bab9b319b4853d4cefe7d01", "filename": "libjava/java/io/ObjectOutputStream.java", "status": "modified", "additions": 41, "deletions": 13, "changes": 54, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f7fe97da3633ca6a5e611956b09f87bf078d1c77/libjava%2Fjava%2Fio%2FObjectOutputStream.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f7fe97da3633ca6a5e611956b09f87bf078d1c77/libjava%2Fjava%2Fio%2FObjectOutputStream.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fio%2FObjectOutputStream.java?ref=f7fe97da3633ca6a5e611956b09f87bf078d1c77", "patch": "@@ -42,6 +42,8 @@\n import java.lang.reflect.Field;\n import java.lang.reflect.Method;\n import java.lang.reflect.InvocationTargetException;\n+import java.security.PrivilegedAction;\n+import java.security.AccessController;\n import java.util.Hashtable;\n \n import gnu.java.io.ObjectIdentityWrapper;\n@@ -240,10 +242,11 @@ public final void writeObject (Object obj) throws IOException\n \t\t    try\n \t\t      {\n \t\t\tClass classArgs[] = {};\n-\t\t\tm = obj.getClass ().getDeclaredMethod (\"writeReplace\",\n-\t\t\t\t\t\t\t       classArgs);\n-\t\t\t// m can't be null by definition since an exception would\n-\t\t\t// have been thrown so a check for null is not needed.\n+\t\t\tm = getMethod(obj.getClass(), \"writeReplace\",\n+\t\t\t\t      classArgs);\n+\t\t\t// m can't be null by definition since an\n+\t\t\t// exception would have been thrown so a check\n+\t\t\t// for null is not needed.\n \t\t\tobj = m.invoke (obj, new Object[] {});\n \t\t      }\n \t\t    catch (NoSuchMethodException ignore)\n@@ -993,7 +996,8 @@ public void write (ObjectOutput out) throws IOException\n \tprivate void checkType (ObjectStreamField field, char type)\n \t  throws IllegalArgumentException\n \t{\n-\t  if (TypeSignature.getEncodingOfClass (field.getType ()).charAt (0) != type)\n+\t  if (TypeSignature.getEncodingOfClass (field.getType ()).charAt (0)\n+\t      != type)\n \t    throw new IllegalArgumentException ();\n \t}\n       };\n@@ -1200,11 +1204,13 @@ private void callWriteMethod (Object obj, ObjectStreamClass osc) throws IOExcept\n       {\n \tClass classArgs[] = {ObjectOutputStream.class};\n \tMethod m = getMethod (klass, \"writeObject\", classArgs);\n-\tif (m == null)\n-\t  return;\n \tObject args[] = {this};\n \tm.invoke (obj, args);\t\n       }\n+    catch (NoSuchMethodException nsme)\n+      {\n+\t// Nothing.\n+      }\n     catch (InvocationTargetException x)\n       {\n         /* Rethrow if possible. */\n@@ -1239,7 +1245,8 @@ private boolean getBooleanField (Object obj, Class klass, String field_name)\n       }    \n   }\n \n-  private byte getByteField (Object obj, Class klass, String field_name) throws IOException\n+  private byte getByteField (Object obj, Class klass, String field_name)\n+    throws IOException\n   {\n     try\n       {\n@@ -1253,7 +1260,8 @@ private byte getByteField (Object obj, Class klass, String field_name) throws IO\n       }    \n   }\n \n-  private char getCharField (Object obj, Class klass, String field_name) throws IOException\n+  private char getCharField (Object obj, Class klass, String field_name)\n+    throws IOException\n   {\n     try\n       {\n@@ -1297,7 +1305,8 @@ private float getFloatField (Object obj, Class klass, String field_name)\n       }    \n   }\n \n-  private int getIntField (Object obj, Class klass, String field_name) throws IOException\n+  private int getIntField (Object obj, Class klass, String field_name)\n+    throws IOException\n   {\n     try\n       {\n@@ -1311,7 +1320,8 @@ private int getIntField (Object obj, Class klass, String field_name) throws IOEx\n       }    \n   }\n \n-  private long getLongField (Object obj, Class klass, String field_name) throws IOException\n+  private long getLongField (Object obj, Class klass, String field_name)\n+    throws IOException\n   {\n     try\n       {\n@@ -1359,13 +1369,31 @@ private Object getObjectField (Object obj, Class klass, String field_name,\n   private static Field getField (Class klass, String name)\n     throws java.lang.NoSuchFieldException\n   {\n-    return klass.getDeclaredField(name);\n+    final Field f = klass.getDeclaredField(name);\n+    AccessController.doPrivileged(new PrivilegedAction()\n+      {\n+\tpublic Object run()\n+\t{\n+\t  f.setAccessible(true);\n+\t  return null;\n+\t}\n+      });\n+    return f;\n   }\n \n   private static Method getMethod (Class klass, String name, Class[] args)\n     throws java.lang.NoSuchMethodException\n   {\n-    return klass.getDeclaredMethod(name, args);\n+    final Method m = klass.getDeclaredMethod(name, args);\n+    AccessController.doPrivileged(new PrivilegedAction()\n+      {\n+\tpublic Object run()\n+\t{\n+\t  m.setAccessible(true);\n+\t  return null;\n+\t}\n+      });\n+    return m;\n   }\n \n   // this value comes from 1.2 spec, but is used in 1.1 as well"}]}