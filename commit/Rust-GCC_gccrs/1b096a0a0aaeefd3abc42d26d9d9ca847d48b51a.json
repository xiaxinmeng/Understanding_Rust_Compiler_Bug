{"sha": "1b096a0a0aaeefd3abc42d26d9d9ca847d48b51a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWIwOTZhMGEwYWFlZWZkM2FiYzQyZDI2ZDlkOWNhODQ3ZDQ4YjUxYQ==", "commit": {"author": {"name": "Daniel Berlin", "email": "dberlin@dberlin.org", "date": "2004-09-29T23:08:32Z"}, "committer": {"name": "Daniel Berlin", "email": "dberlin@gcc.gnu.org", "date": "2004-09-29T23:08:32Z"}, "message": "tree.h (INDIRECT_REF_P): New macro.\n\n2004-09-29  Daniel Berlin  <dberlin@dberlin.org>\n\n\t* tree.h (INDIRECT_REF_P): New macro.\n\t* alias.c (get_alias_set): Use it\n\t(nonoverlapping_memrefs_p): Ditto.\n\t* emit-rtl.c (mem_expr_equal_p): Ditto.\n\t(set_mem_attributes_minus_bitpos): Ditto.\n\t(is_gimple_addressable): Ditto.\n\t(get_base_address): Ditto.\n\t* tree-ssa-alias.c (find_ptr_derefernece): Ditto.\n\t* tree-ssa-dce.c (mark_stmt_if_obviously_necessary): Ditto.\n\t* tree-ssa-dom.c (record_equivalences_from_stmt): Ditto.\n\t* tree-ssa-loop-im.c (is_call_clobbered_ref): Ditto.\n\t* tree-ssa-loop-ivopts.c (find_interesting_uses_address): Ditto.\n\t(add_address_candidates): Ditto.\n\t(rewrite_address_base): Ditto.\n\nFrom-SVN: r88309", "tree": {"sha": "1291df77c817a5ac3f1c96beb9ff5195eaaae9ec", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1291df77c817a5ac3f1c96beb9ff5195eaaae9ec"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1b096a0a0aaeefd3abc42d26d9d9ca847d48b51a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1b096a0a0aaeefd3abc42d26d9d9ca847d48b51a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1b096a0a0aaeefd3abc42d26d9d9ca847d48b51a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1b096a0a0aaeefd3abc42d26d9d9ca847d48b51a/comments", "author": {"login": "dberlin", "id": 324715, "node_id": "MDQ6VXNlcjMyNDcxNQ==", "avatar_url": "https://avatars.githubusercontent.com/u/324715?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dberlin", "html_url": "https://github.com/dberlin", "followers_url": "https://api.github.com/users/dberlin/followers", "following_url": "https://api.github.com/users/dberlin/following{/other_user}", "gists_url": "https://api.github.com/users/dberlin/gists{/gist_id}", "starred_url": "https://api.github.com/users/dberlin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dberlin/subscriptions", "organizations_url": "https://api.github.com/users/dberlin/orgs", "repos_url": "https://api.github.com/users/dberlin/repos", "events_url": "https://api.github.com/users/dberlin/events{/privacy}", "received_events_url": "https://api.github.com/users/dberlin/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "2a7cd6864b2ee3f851acce01c8fd95ea28087137", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2a7cd6864b2ee3f851acce01c8fd95ea28087137", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2a7cd6864b2ee3f851acce01c8fd95ea28087137"}], "stats": {"total": 72, "additions": 36, "deletions": 36}, "files": [{"sha": "de736348ede45f32e60830988a3738a827e20e76", "filename": "gcc/ChangeLog", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1b096a0a0aaeefd3abc42d26d9d9ca847d48b51a/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1b096a0a0aaeefd3abc42d26d9d9ca847d48b51a/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=1b096a0a0aaeefd3abc42d26d9d9ca847d48b51a", "patch": "@@ -1,3 +1,20 @@\n+2004-09-29  Daniel Berlin  <dberlin@dberlin.org>\n+\n+\t* tree.h (INDIRECT_REF_P): New macro.\n+\t* alias.c (get_alias_set): Use it\n+\t(nonoverlapping_memrefs_p): Ditto.\n+\t* emit-rtl.c (mem_expr_equal_p): Ditto.\n+\t(set_mem_attributes_minus_bitpos): Ditto.\n+\t(is_gimple_addressable): Ditto.\n+\t(get_base_address): Ditto.\n+\t* tree-ssa-alias.c (find_ptr_derefernece): Ditto.\n+\t* tree-ssa-dce.c (mark_stmt_if_obviously_necessary): Ditto.\n+\t* tree-ssa-dom.c (record_equivalences_from_stmt): Ditto.\n+\t* tree-ssa-loop-im.c (is_call_clobbered_ref): Ditto.\n+\t* tree-ssa-loop-ivopts.c (find_interesting_uses_address): Ditto.\n+\t(add_address_candidates): Ditto.\n+\t(rewrite_address_base): Ditto.\n+\n 2004-09-30  Ben Elliston  <bje@au.ibm.com>\n \n \t* tree-flow.h (struct bb_ann_d): Remove num_preds member."}, {"sha": "9155791d1d84f14be0adf47a2c9ef651bcff83a8", "filename": "gcc/alias.c", "status": "modified", "additions": 3, "deletions": 9, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1b096a0a0aaeefd3abc42d26d9d9ca847d48b51a/gcc%2Falias.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1b096a0a0aaeefd3abc42d26d9d9ca847d48b51a/gcc%2Falias.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Falias.c?ref=1b096a0a0aaeefd3abc42d26d9d9ca847d48b51a", "patch": "@@ -450,9 +450,7 @@ get_alias_set (tree t)\n \t}\n \n       /* Check for accesses through restrict-qualified pointers.  */\n-      if (TREE_CODE (inner) == INDIRECT_REF\n-\t  || TREE_CODE (inner) == ALIGN_INDIRECT_REF\n-\t  || TREE_CODE (inner) == MISALIGNED_INDIRECT_REF)\n+      if (INDIRECT_REF_P (inner))\n \t{\n \t  tree decl = find_base_decl (TREE_OPERAND (inner, 0));\n \n@@ -2008,9 +2006,7 @@ nonoverlapping_memrefs_p (rtx x, rtx y)\n       moffsetx = adjust_offset_for_component_ref (exprx, moffsetx);\n       exprx = t;\n     }\n-  else if (TREE_CODE (exprx) == INDIRECT_REF\n-\t   || TREE_CODE (exprx) == ALIGN_INDIRECT_REF\n-\t   || TREE_CODE (exprx) == MISALIGNED_INDIRECT_REF)\n+  else if (INDIRECT_REF_P (exprx))\n     {\n       exprx = TREE_OPERAND (exprx, 0);\n       if (flag_argument_noalias < 2\n@@ -2027,9 +2023,7 @@ nonoverlapping_memrefs_p (rtx x, rtx y)\n       moffsety = adjust_offset_for_component_ref (expry, moffsety);\n       expry = t;\n     }\n-  else if (TREE_CODE (expry) == INDIRECT_REF\n-           || TREE_CODE (expry) == ALIGN_INDIRECT_REF\n-           || TREE_CODE (expry) == MISALIGNED_INDIRECT_REF)\n+  else if (INDIRECT_REF_P (expry))\n     {\n       expry = TREE_OPERAND (expry, 0);\n       if (flag_argument_noalias < 2"}, {"sha": "01d87764bda26f0a96286aca16078d5726ee1b14", "filename": "gcc/emit-rtl.c", "status": "modified", "additions": 3, "deletions": 9, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1b096a0a0aaeefd3abc42d26d9d9ca847d48b51a/gcc%2Femit-rtl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1b096a0a0aaeefd3abc42d26d9d9ca847d48b51a/gcc%2Femit-rtl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Femit-rtl.c?ref=1b096a0a0aaeefd3abc42d26d9d9ca847d48b51a", "patch": "@@ -1485,9 +1485,7 @@ mem_expr_equal_p (tree expr1, tree expr2)\n       && mem_expr_equal_p (TREE_OPERAND (expr1, 1), /* field decl */\n \t\t\t   TREE_OPERAND (expr2, 1));\n   \n-  if (TREE_CODE (expr1) == INDIRECT_REF\n-      || TREE_CODE (expr1) == ALIGN_INDIRECT_REF\n-      || TREE_CODE (expr1) == MISALIGNED_INDIRECT_REF)\n+  if (INDIRECT_REF_P (expr1))\n     return mem_expr_equal_p (TREE_OPERAND (expr1, 0),\n \t\t\t     TREE_OPERAND (expr2, 0));\n \n@@ -1685,9 +1683,7 @@ set_mem_attributes_minus_bitpos (rtx ref, tree t, int objectp,\n \t\t the size we got from the type?  */\n \t    }\n \t  else if (flag_argument_noalias > 1\n-\t\t   && (TREE_CODE (t2) == INDIRECT_REF \n-\t\t       || TREE_CODE (t2) == ALIGN_INDIRECT_REF\n-\t\t       || TREE_CODE (t2) == MISALIGNED_INDIRECT_REF)\t\n+\t\t   && (INDIRECT_REF_P (t2))\n \t\t   && TREE_CODE (TREE_OPERAND (t2, 0)) == PARM_DECL)\n \t    {\n \t      expr = t2;\n@@ -1698,9 +1694,7 @@ set_mem_attributes_minus_bitpos (rtx ref, tree t, int objectp,\n       /* If this is a Fortran indirect argument reference, record the\n \t parameter decl.  */\n       else if (flag_argument_noalias > 1\n-\t       && (TREE_CODE (t) == INDIRECT_REF\n-\t\t   || TREE_CODE (t) == ALIGN_INDIRECT_REF\n-\t\t   || TREE_CODE (t) == MISALIGNED_INDIRECT_REF)\n+\t       && (INDIRECT_REF_P (t))\n \t       && TREE_CODE (TREE_OPERAND (t, 0)) == PARM_DECL)\n \t{\n \t  expr = t;"}, {"sha": "82b82a43fed3c8b00385924c1f2786e8ffbc02b5", "filename": "gcc/tree-gimple.c", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1b096a0a0aaeefd3abc42d26d9d9ca847d48b51a/gcc%2Ftree-gimple.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1b096a0a0aaeefd3abc42d26d9d9ca847d48b51a/gcc%2Ftree-gimple.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-gimple.c?ref=1b096a0a0aaeefd3abc42d26d9d9ca847d48b51a", "patch": "@@ -170,9 +170,8 @@ is_gimple_addressable (tree t)\n   return (is_gimple_id (t) || handled_component_p (t)\n \t  || TREE_CODE (t) == REALPART_EXPR\n \t  || TREE_CODE (t) == IMAGPART_EXPR\n-\t  || TREE_CODE (t) == INDIRECT_REF\n-\t  || TREE_CODE (t) == ALIGN_INDIRECT_REF\n-\t  || TREE_CODE (t) == MISALIGNED_INDIRECT_REF);\n+\t  || INDIRECT_REF_P (t));\n+\n }\n \n /* Return true if T is function invariant.  Or rather a restricted\n@@ -412,9 +411,7 @@ get_base_address (tree t)\n   if (SSA_VAR_P (t)\n       || TREE_CODE (t) == STRING_CST\n       || TREE_CODE (t) == CONSTRUCTOR\n-      || TREE_CODE (t) == MISALIGNED_INDIRECT_REF\n-      || TREE_CODE (t) == ALIGN_INDIRECT_REF\n-      || TREE_CODE (t) == INDIRECT_REF)\n+      || INDIRECT_REF_P (t))\n     return t;\n   else\n     return NULL_TREE;"}, {"sha": "f214e8ae4d841f2933a2f7685571a8f2507d74c5", "filename": "gcc/tree-ssa-alias.c", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1b096a0a0aaeefd3abc42d26d9d9ca847d48b51a/gcc%2Ftree-ssa-alias.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1b096a0a0aaeefd3abc42d26d9d9ca847d48b51a/gcc%2Ftree-ssa-alias.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-alias.c?ref=1b096a0a0aaeefd3abc42d26d9d9ca847d48b51a", "patch": "@@ -503,9 +503,7 @@ find_ptr_dereference (tree *tp, int *walk_subtrees ATTRIBUTE_UNUSED, void *data)\n {\n   tree ptr = (tree) data;\n \n-  if ((TREE_CODE (*tp) == INDIRECT_REF\n-       || TREE_CODE (*tp) == ALIGN_INDIRECT_REF\n-       || TREE_CODE (*tp) == MISALIGNED_INDIRECT_REF)\n+  if (INDIRECT_REF_P (*tp)\n       && TREE_OPERAND (*tp, 0) == ptr)\n     return *tp;\n "}, {"sha": "341b76830408321191a766bd9c2c4d5c1473ae11", "filename": "gcc/tree-ssa-dce.c", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1b096a0a0aaeefd3abc42d26d9d9ca847d48b51a/gcc%2Ftree-ssa-dce.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1b096a0a0aaeefd3abc42d26d9d9ca847d48b51a/gcc%2Ftree-ssa-dce.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-dce.c?ref=1b096a0a0aaeefd3abc42d26d9d9ca847d48b51a", "patch": "@@ -425,9 +425,7 @@ mark_stmt_if_obviously_necessary (tree stmt, bool aggressive)\n \t  if (is_global_var (lhs))\n \t    mark_stmt_necessary (stmt, true);\n \t}\n-      else if (TREE_CODE (lhs) == INDIRECT_REF\n-\t       || TREE_CODE (lhs) == ALIGN_INDIRECT_REF\n-\t       || TREE_CODE (lhs) == MISALIGNED_INDIRECT_REF)\n+      else if (INDIRECT_REF_P (lhs))\n \t{\n \t  tree ptr = TREE_OPERAND (lhs, 0);\n \t  struct ptr_info_def *pi = SSA_NAME_PTR_INFO (ptr);"}, {"sha": "7e522d93736fa2ba479cef6943b14e1dee775b0d", "filename": "gcc/tree-ssa-dom.c", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1b096a0a0aaeefd3abc42d26d9d9ca847d48b51a/gcc%2Ftree-ssa-dom.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1b096a0a0aaeefd3abc42d26d9d9ca847d48b51a/gcc%2Ftree-ssa-dom.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-dom.c?ref=1b096a0a0aaeefd3abc42d26d9d9ca847d48b51a", "patch": "@@ -2435,9 +2435,7 @@ record_equivalences_from_stmt (tree stmt,\n \t  t = TREE_OPERAND (t, 0);\n \n \t/* Now see if this is a pointer dereference.  */\n-\tif (TREE_CODE (t) == INDIRECT_REF\n-\t    || TREE_CODE (t) == ALIGN_INDIRECT_REF\n-\t    || TREE_CODE (t) == MISALIGNED_INDIRECT_REF)\n+\tif (INDIRECT_REF_P (t))\n           {\n \t    tree op = TREE_OPERAND (t, 0);\n "}, {"sha": "27bc1c01d9520dd57546dfaa10fc04985513ec9b", "filename": "gcc/tree-ssa-loop-im.c", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1b096a0a0aaeefd3abc42d26d9d9ca847d48b51a/gcc%2Ftree-ssa-loop-im.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1b096a0a0aaeefd3abc42d26d9d9ca847d48b51a/gcc%2Ftree-ssa-loop-im.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-loop-im.c?ref=1b096a0a0aaeefd3abc42d26d9d9ca847d48b51a", "patch": "@@ -1114,9 +1114,7 @@ is_call_clobbered_ref (tree ref)\n   if (DECL_P (base))\n     return is_call_clobbered (base);\n \n-  if (TREE_CODE (base) == INDIRECT_REF\n-      || TREE_CODE (base) == ALIGN_INDIRECT_REF\n-      || TREE_CODE (base) == MISALIGNED_INDIRECT_REF)\n+  if (INDIRECT_REF_P (base))\n     {\n       /* Check whether the alias tags associated with the pointer\n \t are call clobbered.  */"}, {"sha": "3814fda2eb18b6a9a48435eb3c166b311e72f0be", "filename": "gcc/tree.h", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1b096a0a0aaeefd3abc42d26d9d9ca847d48b51a/gcc%2Ftree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1b096a0a0aaeefd3abc42d26d9d9ca847d48b51a/gcc%2Ftree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.h?ref=1b096a0a0aaeefd3abc42d26d9d9ca847d48b51a", "patch": "@@ -96,6 +96,12 @@ extern const enum tree_code_class tree_code_type[];\n #define DECL_P(CODE)\\\n         (TREE_CODE_CLASS (TREE_CODE (CODE)) == tcc_declaration)\n \n+/* Nonzero if CODE represents a INDIRECT_REF.  */\n+#define INDIRECT_REF_P(CODE)\\\n+  (TREE_CODE (CODE) == INDIRECT_REF \\\n+   || TREE_CODE (CODE) == MISALIGNED_INDIRECT_REF \\\n+   || TREE_CODE (CODE) == ALIGN_INDIRECT_REF)\n+\n /* Nonzero if CODE represents a reference.  */\n \n #define REFERENCE_CLASS_P(CODE)\\"}]}