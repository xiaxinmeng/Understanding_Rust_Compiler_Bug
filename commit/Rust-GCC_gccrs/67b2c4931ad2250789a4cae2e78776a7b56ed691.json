{"sha": "67b2c4931ad2250789a4cae2e78776a7b56ed691", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjdiMmM0OTMxYWQyMjUwNzg5YTRjYWUyZTc4Nzc2YTdiNTZlZDY5MQ==", "commit": {"author": {"name": "Richard Sandiford", "email": "rdsandiford@googlemail.com", "date": "2011-08-31T21:08:51Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2011-08-31T21:08:51Z"}, "message": "i386.md: Use (match_test ...) for attribute tests.\n\ngcc/\n\t* config/i386/i386.md: Use (match_test ...) for attribute tests.\n\t* config/i386/mmx.md: Likewise.\n\t* config/i386/sse.md: Likewise.\n\t* config/i386/predicates.md (call_insn_operand): Use\n\t(not (match_test \"...\")) instead of (match_test \"!...\")\n\t* config/i386/constraints.md (w): Likewise.\n\nFrom-SVN: r178389", "tree": {"sha": "ed98a2e7853b556d8e106755c2c5c76f344788d8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ed98a2e7853b556d8e106755c2c5c76f344788d8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/67b2c4931ad2250789a4cae2e78776a7b56ed691", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/67b2c4931ad2250789a4cae2e78776a7b56ed691", "html_url": "https://github.com/Rust-GCC/gccrs/commit/67b2c4931ad2250789a4cae2e78776a7b56ed691", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/67b2c4931ad2250789a4cae2e78776a7b56ed691/comments", "author": {"login": "rsandifo", "id": 4235983, "node_id": "MDQ6VXNlcjQyMzU5ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/4235983?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo", "html_url": "https://github.com/rsandifo", "followers_url": "https://api.github.com/users/rsandifo/followers", "following_url": "https://api.github.com/users/rsandifo/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo/orgs", "repos_url": "https://api.github.com/users/rsandifo/repos", "events_url": "https://api.github.com/users/rsandifo/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "0c0d395770c75e5bf509fbe70828f907f13a4a91", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0c0d395770c75e5bf509fbe70828f907f13a4a91", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0c0d395770c75e5bf509fbe70828f907f13a4a91"}], "stats": {"total": 345, "additions": 150, "deletions": 195}, "files": [{"sha": "71155e2b5435e9836343adf8535ae347823a2ea8", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/67b2c4931ad2250789a4cae2e78776a7b56ed691/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/67b2c4931ad2250789a4cae2e78776a7b56ed691/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=67b2c4931ad2250789a4cae2e78776a7b56ed691", "patch": "@@ -1,3 +1,12 @@\n+2011-08-31  Richard Sandiford  <rdsandiford@googlemail.com>\n+\n+\t* config/i386/i386.md: Use (match_test ...) for attribute tests.\n+\t* config/i386/mmx.md: Likewise.\n+\t* config/i386/sse.md: Likewise.\n+\t* config/i386/predicates.md (call_insn_operand): Use\n+\t(not (match_test \"...\")) instead of (match_test \"!...\")\n+\t* config/i386/constraints.md (w): Likewise.\n+\n 2011-08-31  Richard Sandiford  <rdsandiford@googlemail.com>\n \n \t* doc/md.texi: Describe the use of match_tests in attribute tests."}, {"sha": "bef5b30b013150d386952ed85f0601893972be45", "filename": "gcc/config/i386/constraints.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/67b2c4931ad2250789a4cae2e78776a7b56ed691/gcc%2Fconfig%2Fi386%2Fconstraints.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/67b2c4931ad2250789a4cae2e78776a7b56ed691/gcc%2Fconfig%2Fi386%2Fconstraints.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fconstraints.md?ref=67b2c4931ad2250789a4cae2e78776a7b56ed691", "patch": "@@ -124,7 +124,7 @@\n \n (define_constraint \"w\"\n   \"@internal Call memory operand.\"\n-  (and (match_test \"!TARGET_X32\")\n+  (and (not (match_test \"TARGET_X32\"))\n        (match_operand 0 \"memory_operand\")))\n \n ;; Integer constant constraints."}, {"sha": "37491ae4a7e5ae83633773510d267ec7e04bfdb3", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 110, "deletions": 162, "changes": 272, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/67b2c4931ad2250789a4cae2e78776a7b56ed691/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/67b2c4931ad2250789a4cae2e78776a7b56ed691/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=67b2c4931ad2250789a4cae2e78776a7b56ed691", "patch": "@@ -490,18 +490,16 @@\n \n ;; Set when REX opcode prefix is used.\n (define_attr \"prefix_rex\" \"\"\n-  (cond [(eq (symbol_ref \"TARGET_64BIT\") (const_int 0))\n+  (cond [(not (match_test \"TARGET_64BIT\"))\n \t   (const_int 0)\n \t (and (eq_attr \"mode\" \"DI\")\n \t      (and (eq_attr \"type\" \"!push,pop,call,callv,leave,ibr\")\n \t\t   (eq_attr \"unit\" \"!mmx\")))\n \t   (const_int 1)\n \t (and (eq_attr \"mode\" \"QI\")\n-\t      (ne (symbol_ref \"x86_extended_QIreg_mentioned_p (insn)\")\n-\t\t  (const_int 0)))\n+\t      (match_test \"x86_extended_QIreg_mentioned_p (insn)\"))\n \t   (const_int 1)\n-\t (ne (symbol_ref \"x86_extended_reg_mentioned_p (insn)\")\n-\t     (const_int 0))\n+\t (match_test \"x86_extended_reg_mentioned_p (insn)\")\n \t   (const_int 1)\n \t (and (eq_attr \"type\" \"imovx\")\n \t      (match_operand:QI 1 \"ext_QIreg_operand\" \"\"))\n@@ -551,7 +549,7 @@\n \t (eq_attr \"unit\" \"i387\")\n \t   (const_int 0)\n          (and (eq_attr \"type\" \"incdec\")\n-\t      (and (eq (symbol_ref \"TARGET_64BIT\") (const_int 0))\n+\t      (and (not (match_test \"TARGET_64BIT\"))\n \t\t   (ior (match_operand:SI 1 \"register_operand\" \"\")\n \t\t\t(match_operand:HI 1 \"register_operand\" \"\"))))\n \t   (const_int 0)\n@@ -597,7 +595,7 @@\n \t\t       (attr \"length_address\")))\n \t (ior (eq_attr \"prefix\" \"vex\")\n \t      (and (eq_attr \"prefix\" \"maybe_vex\")\n-\t\t    (ne (symbol_ref \"TARGET_AVX\") (const_int 0))))\n+\t\t   (match_test \"TARGET_AVX\")))\n \t   (plus (attr \"length_vex\")\n \t\t (plus (attr \"length_immediate\")\n \t\t       (plus (attr \"modrm\")\n@@ -1927,16 +1925,13 @@\n    (set (attr \"mode\")\n    \t(cond [(eq_attr \"alternative\" \"2,3\")\n \t\t (if_then_else\n-\t\t   (ne (symbol_ref \"optimize_function_for_size_p (cfun)\")\n-\t\t       (const_int 0))\n+\t\t   (match_test \"optimize_function_for_size_p (cfun)\")\n \t\t   (const_string \"V4SF\")\n \t\t   (const_string \"TI\"))\n \t       (eq_attr \"alternative\" \"4\")\n \t\t (if_then_else\n-\t\t   (ior (ne (symbol_ref \"TARGET_SSE_TYPELESS_STORES\")\n-\t\t\t    (const_int 0))\n-\t\t\t(ne (symbol_ref \"optimize_function_for_size_p (cfun)\")\n-\t\t\t    (const_int 0)))\n+\t\t   (ior (match_test \"TARGET_SSE_TYPELESS_STORES\")\n+\t\t\t(match_test \"optimize_function_for_size_p (cfun)\"))\n \t\t   (const_string \"V4SF\")\n \t\t   (const_string \"TI\"))]\n \t       (const_string \"DI\")))])\n@@ -1985,13 +1980,11 @@\n   [(set_attr \"type\" \"sselog1,ssemov,ssemov\")\n    (set_attr \"prefix\" \"maybe_vex\")\n    (set (attr \"mode\")\n-\t(cond [(ior (eq (symbol_ref \"TARGET_SSE2\") (const_int 0))\n-\t\t    (ne (symbol_ref \"optimize_function_for_size_p (cfun)\")\n-\t\t\t(const_int 0)))\n+\t(cond [(ior (not (match_test \"TARGET_SSE2\"))\n+\t\t    (match_test \"optimize_function_for_size_p (cfun)\"))\n \t\t (const_string \"V4SF\")\n \t       (and (eq_attr \"alternative\" \"2\")\n-\t\t    (ne (symbol_ref \"TARGET_SSE_TYPELESS_STORES\")\n-\t\t\t(const_int 0)))\n+\t\t    (match_test \"TARGET_SSE_TYPELESS_STORES\"))\n \t\t (const_string \"V4SF\")]\n \t      (const_string \"TI\")))])\n \n@@ -2308,11 +2301,11 @@\n \t      (const_string \"DI\")\n \t    (eq_attr \"alternative\" \"6,7\")\n \t      (if_then_else\n-\t        (eq (symbol_ref \"TARGET_SSE2\") (const_int 0))\n+\t        (not (match_test \"TARGET_SSE2\"))\n \t        (const_string \"V4SF\")\n \t        (const_string \"TI\"))\n \t    (and (eq_attr \"alternative\" \"8,9,10,11\")\n-\t         (eq (symbol_ref \"TARGET_SSE2\") (const_int 0)))\n+\t         (not (match_test \"TARGET_SSE2\")))\n \t      (const_string \"SF\")\n \t   ]\n \t   (const_string \"SI\")))])\n@@ -2336,20 +2329,16 @@\n     }\n }\n   [(set (attr \"type\")\n-     (cond [(ne (symbol_ref \"optimize_function_for_size_p (cfun)\")\n-\t\t(const_int 0))\n+     (cond [(match_test \"optimize_function_for_size_p (cfun)\")\n \t      (const_string \"imov\")\n \t    (and (eq_attr \"alternative\" \"0\")\n-\t\t (ior (eq (symbol_ref \"TARGET_PARTIAL_REG_STALL\")\n-\t\t\t  (const_int 0))\n-\t\t      (eq (symbol_ref \"TARGET_HIMODE_MATH\")\n-\t\t\t  (const_int 0))))\n+\t\t (ior (not (match_test \"TARGET_PARTIAL_REG_STALL\"))\n+\t\t      (not (match_test \"TARGET_HIMODE_MATH\"))))\n \t      (const_string \"imov\")\n \t    (and (eq_attr \"alternative\" \"1,2\")\n \t\t (match_operand:HI 1 \"aligned_operand\" \"\"))\n \t      (const_string \"imov\")\n-\t    (and (ne (symbol_ref \"TARGET_MOVX\")\n-\t\t     (const_int 0))\n+\t    (and (match_test \"TARGET_MOVX\")\n \t\t (eq_attr \"alternative\" \"0,2\"))\n \t      (const_string \"imovx\")\n \t   ]\n@@ -2361,10 +2350,8 @@\n \t\t  (match_operand:HI 1 \"aligned_operand\" \"\"))\n \t       (const_string \"SI\")\n \t     (and (eq_attr \"alternative\" \"0\")\n-\t\t  (ior (eq (symbol_ref \"TARGET_PARTIAL_REG_STALL\")\n-\t\t\t   (const_int 0))\n-\t\t       (eq (symbol_ref \"TARGET_HIMODE_MATH\")\n-\t\t\t   (const_int 0))))\n+\t\t  (ior (not (match_test \"TARGET_PARTIAL_REG_STALL\"))\n+\t\t       (not (match_test \"TARGET_HIMODE_MATH\"))))\n \t       (const_string \"SI\")\n \t    ]\n \t    (const_string \"HI\")))])\n@@ -2400,19 +2387,15 @@\n      (cond [(and (eq_attr \"alternative\" \"5\")\n \t\t (not (match_operand:QI 1 \"aligned_operand\" \"\")))\n \t      (const_string \"imovx\")\n-\t    (ne (symbol_ref \"optimize_function_for_size_p (cfun)\")\n-\t\t(const_int 0))\n+\t    (match_test \"optimize_function_for_size_p (cfun)\")\n \t      (const_string \"imov\")\n \t    (and (eq_attr \"alternative\" \"3\")\n-\t\t (ior (eq (symbol_ref \"TARGET_PARTIAL_REG_STALL\")\n-\t\t\t  (const_int 0))\n-\t\t      (eq (symbol_ref \"TARGET_QIMODE_MATH\")\n-\t\t\t  (const_int 0))))\n+\t\t (ior (not (match_test \"TARGET_PARTIAL_REG_STALL\"))\n+\t\t      (not (match_test \"TARGET_QIMODE_MATH\"))))\n \t      (const_string \"imov\")\n \t    (eq_attr \"alternative\" \"3,5\")\n \t      (const_string \"imovx\")\n-\t    (and (ne (symbol_ref \"TARGET_MOVX\")\n-\t\t     (const_int 0))\n+\t    (and (match_test \"TARGET_MOVX\")\n \t\t (eq_attr \"alternative\" \"2\"))\n \t      (const_string \"imovx\")\n \t   ]\n@@ -2426,20 +2409,15 @@\n \t       (const_string \"SI\")\n \t     (and (eq_attr \"type\" \"imov\")\n \t\t  (and (eq_attr \"alternative\" \"0,1\")\n-\t\t       (and (ne (symbol_ref \"TARGET_PARTIAL_REG_DEPENDENCY\")\n-\t\t\t\t(const_int 0))\n-\t\t\t    (and (eq (symbol_ref \"optimize_function_for_size_p (cfun)\")\n-\t\t\t\t     (const_int 0))\n-\t\t\t\t (eq (symbol_ref \"TARGET_PARTIAL_REG_STALL\")\n-\t\t\t\t     (const_int 0))))))\n+\t\t       (and (match_test \"TARGET_PARTIAL_REG_DEPENDENCY\")\n+\t\t\t    (and (not (match_test \"optimize_function_for_size_p (cfun)\"))\n+\t\t\t\t (not (match_test \"TARGET_PARTIAL_REG_STALL\"))))))\n \t       (const_string \"SI\")\n \t     ;; Avoid partial register stalls when not using QImode arithmetic\n \t     (and (eq_attr \"type\" \"imov\")\n \t\t  (and (eq_attr \"alternative\" \"0,1\")\n-\t\t       (and (ne (symbol_ref \"TARGET_PARTIAL_REG_STALL\")\n-\t\t\t\t(const_int 0))\n-\t\t\t    (eq (symbol_ref \"TARGET_QIMODE_MATH\")\n-\t\t\t\t(const_int 0)))))\n+\t\t       (and (match_test \"TARGET_PARTIAL_REG_STALL\")\n+\t\t\t    (not (match_test \"TARGET_QIMODE_MATH\")))))\n \t       (const_string \"SI\")\n \t   ]\n \t   (const_string \"QI\")))])\n@@ -2579,8 +2557,7 @@\n }\n   [(set (attr \"type\")\n      (if_then_else (ior (not (match_operand:QI 0 \"QIreg_operand\" \"\"))\n-\t\t\t(ne (symbol_ref \"TARGET_MOVX\")\n-\t\t\t    (const_int 0)))\n+\t\t\t(match_test \"TARGET_MOVX\"))\n \t(const_string \"imovx\")\n \t(const_string \"imov\")))\n    (set (attr \"mode\")\n@@ -2606,8 +2583,7 @@\n   [(set (attr \"type\")\n      (if_then_else (and (match_operand:QI 0 \"register_operand\" \"\")\n \t\t\t(ior (not (match_operand:QI 0 \"QIreg_operand\" \"\"))\n-\t\t\t     (ne (symbol_ref \"TARGET_MOVX\")\n-\t\t\t\t (const_int 0))))\n+\t\t\t     (match_test \"TARGET_MOVX\")))\n \t(const_string \"imovx\")\n \t(const_string \"imov\")))\n    (set (attr \"mode\")\n@@ -2643,8 +2619,7 @@\n }\n   [(set (attr \"type\")\n      (if_then_else (ior (not (match_operand:QI 0 \"QIreg_operand\" \"\"))\n-\t\t\t(ne (symbol_ref \"TARGET_MOVX\")\n-\t\t\t    (const_int 0)))\n+\t\t\t(match_test \"TARGET_MOVX\"))\n \t(const_string \"imovx\")\n \t(const_string \"imov\")))\n    (set (attr \"mode\")\n@@ -2671,8 +2646,7 @@\n   [(set (attr \"type\")\n      (if_then_else (and (match_operand:QI 0 \"register_operand\" \"\")\n \t\t\t(ior (not (match_operand:QI 0 \"QIreg_operand\" \"\"))\n-\t\t\t     (ne (symbol_ref \"TARGET_MOVX\")\n-\t\t\t\t (const_int 0))))\n+\t\t\t     (match_test \"TARGET_MOVX\")))\n \t(const_string \"imovx\")\n \t(const_string \"imov\")))\n    (set (attr \"mode\")\n@@ -2937,16 +2911,13 @@\n    (set (attr \"mode\")\n         (cond [(eq_attr \"alternative\" \"0,2\")\n \t\t (if_then_else\n-\t\t   (ne (symbol_ref \"optimize_function_for_size_p (cfun)\")\n-\t\t       (const_int 0))\n+\t\t   (match_test \"optimize_function_for_size_p (cfun)\")\n \t\t   (const_string \"V4SF\")\n \t\t   (const_string \"TI\"))\n \t       (eq_attr \"alternative\" \"1\")\n \t\t (if_then_else\n-\t\t   (ior (ne (symbol_ref \"TARGET_SSE_TYPELESS_STORES\")\n-\t\t\t    (const_int 0))\n-\t\t\t(ne (symbol_ref \"optimize_function_for_size_p (cfun)\")\n-\t\t\t    (const_int 0)))\n+\t\t   (ior (match_test \"TARGET_SSE_TYPELESS_STORES\")\n+\t\t\t(match_test \"optimize_function_for_size_p (cfun)\"))\n \t\t   (const_string \"V4SF\")\n \t\t   (const_string \"TI\"))]\n \t       (const_string \"DI\")))])\n@@ -3084,11 +3055,9 @@\n \n \t       /* xorps is one byte shorter.  */\n \t       (eq_attr \"alternative\" \"7\")\n-\t\t (cond [(ne (symbol_ref \"optimize_function_for_size_p (cfun)\")\n-\t\t\t    (const_int 0))\n+\t\t (cond [(match_test \"optimize_function_for_size_p (cfun)\")\n \t\t\t  (const_string \"V4SF\")\n-\t\t\t(ne (symbol_ref \"TARGET_SSE_LOAD0_BY_PXOR\")\n-\t\t\t    (const_int 0))\n+\t\t\t(match_test \"TARGET_SSE_LOAD0_BY_PXOR\")\n \t\t\t  (const_string \"TI\")\n \t\t       ]\n \t\t       (const_string \"V2DF\"))\n@@ -3100,11 +3069,9 @@\n \t\t  movaps encodes one byte shorter.  */\n \t       (eq_attr \"alternative\" \"8\")\n \t\t (cond\n-\t\t   [(ne (symbol_ref \"optimize_function_for_size_p (cfun)\")\n-\t\t        (const_int 0))\n+\t\t   [(match_test \"optimize_function_for_size_p (cfun)\")\n \t\t      (const_string \"V4SF\")\n-\t\t    (ne (symbol_ref \"TARGET_SSE_PARTIAL_REG_DEPENDENCY\")\n-\t\t        (const_int 0))\n+\t\t    (match_test \"TARGET_SSE_PARTIAL_REG_DEPENDENCY\")\n \t\t      (const_string \"V2DF\")\n \t\t   ]\n \t\t   (const_string \"DF\"))\n@@ -3113,8 +3080,7 @@\n \t\t  of register.  */\n \t       (eq_attr \"alternative\" \"9\")\n \t\t (if_then_else\n-\t\t   (ne (symbol_ref \"TARGET_SSE_SPLIT_REGS\")\n-\t\t       (const_int 0))\n+\t\t   (match_test \"TARGET_SSE_SPLIT_REGS\")\n \t\t   (const_string \"V1DF\")\n \t\t   (const_string \"DF\"))\n \t      ]\n@@ -3208,19 +3174,17 @@\n \t\t (const_string \"SI\")\n \n \t       /* For SSE1, we have many fewer alternatives.  */\n-\t       (eq (symbol_ref \"TARGET_SSE2\") (const_int 0))\n+\t       (not (match_test \"TARGET_SSE2\"))\n \t\t (if_then_else\n \t\t   (eq_attr \"alternative\" \"5,6,9,10\")\n \t\t   (const_string \"V4SF\")\n \t\t   (const_string \"V2SF\"))\n \n \t       /* xorps is one byte shorter.  */\n \t       (eq_attr \"alternative\" \"5,9\")\n-\t\t (cond [(ne (symbol_ref \"optimize_function_for_size_p (cfun)\")\n-\t\t\t    (const_int 0))\n+\t\t (cond [(match_test \"optimize_function_for_size_p (cfun)\")\n \t\t\t  (const_string \"V4SF\")\n-\t\t\t(ne (symbol_ref \"TARGET_SSE_LOAD0_BY_PXOR\")\n-\t\t\t    (const_int 0))\n+\t\t\t(match_test \"TARGET_SSE_LOAD0_BY_PXOR\")\n \t\t\t  (const_string \"TI\")\n \t\t       ]\n \t\t       (const_string \"V2DF\"))\n@@ -3232,11 +3196,9 @@\n \t\t  movaps encodes one byte shorter.  */\n \t       (eq_attr \"alternative\" \"6,10\")\n \t\t (cond\n-\t\t   [(ne (symbol_ref \"optimize_function_for_size_p (cfun)\")\n-\t\t        (const_int 0))\n+\t\t   [(match_test \"optimize_function_for_size_p (cfun)\")\n \t\t      (const_string \"V4SF\")\n-\t\t    (ne (symbol_ref \"TARGET_SSE_PARTIAL_REG_DEPENDENCY\")\n-\t\t        (const_int 0))\n+\t\t    (match_test \"TARGET_SSE_PARTIAL_REG_DEPENDENCY\")\n \t\t      (const_string \"V2DF\")\n \t\t   ]\n \t\t   (const_string \"DF\"))\n@@ -3245,8 +3207,7 @@\n \t\t  of register.  */\n \t       (eq_attr \"alternative\" \"7,11\")\n \t\t (if_then_else\n-\t\t   (ne (symbol_ref \"TARGET_SSE_SPLIT_REGS\")\n-\t\t       (const_int 0))\n+\t\t   (match_test \"TARGET_SSE_SPLIT_REGS\")\n \t\t   (const_string \"V1DF\")\n \t\t   (const_string \"DF\"))\n \t      ]\n@@ -3321,12 +3282,9 @@\n \t\t (const_string \"SI\")\n \t       (eq_attr \"alternative\" \"5\")\n \t\t (if_then_else\n-\t\t   (and (and (ne (symbol_ref \"TARGET_SSE_LOAD0_BY_PXOR\")\n-\t\t\t    \t (const_int 0))\n-\t\t\t     (ne (symbol_ref \"TARGET_SSE2\")\n-\t\t\t\t (const_int 0)))\n-\t\t\t(eq (symbol_ref \"optimize_function_for_size_p (cfun)\")\n-\t\t\t    (const_int 0)))\n+\t\t   (and (and (match_test \"TARGET_SSE_LOAD0_BY_PXOR\")\n+\t\t\t     (match_test \"TARGET_SSE2\"))\n+\t\t\t(not (match_test \"optimize_function_for_size_p (cfun)\")))\n \t\t   (const_string \"TI\")\n \t\t   (const_string \"V4SF\"))\n \t       /* For architectures resolving dependencies on\n@@ -3341,10 +3299,8 @@\n \t\t  to avoid problems on using packed logical operations.  */\n \t       (eq_attr \"alternative\" \"6\")\n \t\t (if_then_else\n-\t\t   (ior (ne (symbol_ref \"TARGET_SSE_PARTIAL_REG_DEPENDENCY\")\n-\t\t\t    (const_int 0))\n-\t\t\t(ne (symbol_ref \"TARGET_SSE_SPLIT_REGS\")\n-\t\t\t    (const_int 0)))\n+\t\t   (ior (match_test \"TARGET_SSE_PARTIAL_REG_DEPENDENCY\")\n+\t\t\t(match_test \"TARGET_SSE_SPLIT_REGS\"))\n \t\t   (const_string \"V4SF\")\n \t\t   (const_string \"SF\"))\n \t       (eq_attr \"alternative\" \"11\")\n@@ -4962,7 +4918,7 @@\n    (set (attr \"prefix_rex\")\n      (if_then_else\n        (and (eq_attr \"prefix\" \"maybe_vex\")\n-\t    (ne (symbol_ref \"<SWI48x:MODE>mode == DImode\") (const_int 0)))\n+\t    (match_test \"<SWI48x:MODE>mode == DImode\"))\n        (const_string \"1\")\n        (const_string \"*\")))\n    (set_attr \"unit\" \"i387,*,*\")\n@@ -4987,7 +4943,7 @@\n    (set (attr \"prefix_rex\")\n      (if_then_else\n        (and (eq_attr \"prefix\" \"maybe_vex\")\n-\t    (ne (symbol_ref \"<SWI48x:MODE>mode == DImode\") (const_int 0)))\n+\t    (match_test \"<SWI48x:MODE>mode == DImode\"))\n        (const_string \"1\")\n        (const_string \"*\")))\n    (set_attr \"athlon_decode\" \"*,direct\")\n@@ -5182,7 +5138,7 @@\n    (set (attr \"prefix_rex\")\n      (if_then_else\n        (and (eq_attr \"prefix\" \"maybe_vex\")\n-\t    (ne (symbol_ref \"<SWI48x:MODE>mode == DImode\") (const_int 0)))\n+\t    (match_test \"<SWI48x:MODE>mode == DImode\"))\n        (const_string \"1\")\n        (const_string \"*\")))\n    (set_attr \"athlon_decode\" \"double,direct\")\n@@ -5217,7 +5173,7 @@\n    (set (attr \"prefix_rex\")\n      (if_then_else\n        (and (eq_attr \"prefix\" \"maybe_vex\")\n-\t    (ne (symbol_ref \"<SWI48x:MODE>mode == DImode\") (const_int 0)))\n+\t    (match_test \"<SWI48x:MODE>mode == DImode\"))\n        (const_string \"1\")\n        (const_string \"*\")))\n    (set_attr \"athlon_decode\" \"direct\")\n@@ -7751,7 +7707,7 @@\n    (set (attr \"prefix_rex\")\n      (if_then_else\n        (and (eq_attr \"type\" \"imovx\")\n-\t    (and (ne (symbol_ref \"INTVAL (operands[2]) == 0xff\") (const_int 0))\n+\t    (and (match_test \"INTVAL (operands[2]) == 0xff\")\n \t\t (match_operand 1 \"ext_QIreg_operand\" \"\")))\n        (const_string \"1\")\n        (const_string \"*\")))\n@@ -7795,7 +7751,7 @@\n    (set (attr \"prefix_rex\")\n      (if_then_else\n        (and (eq_attr \"type\" \"imovx\")\n-\t    (and (ne (symbol_ref \"INTVAL (operands[2]) == 0xff\") (const_int 0))\n+\t    (and (match_test \"INTVAL (operands[2]) == 0xff\")\n \t\t (match_operand 1 \"ext_QIreg_operand\" \"\")))\n        (const_string \"1\")\n        (const_string \"*\")))\n@@ -9130,8 +9086,7 @@\n \t      (const_string \"lea\")\n \t    (eq_attr \"alternative\" \"2\")\n \t      (const_string \"ishiftx\")\n-            (and (and (ne (symbol_ref \"TARGET_DOUBLE_WITH_ADD\")\n-\t\t          (const_int 0))\n+            (and (and (match_test \"TARGET_DOUBLE_WITH_ADD\")\n \t\t      (match_operand 0 \"register_operand\" \"\"))\n \t\t (match_operand 2 \"const1_operand\" \"\"))\n \t      (const_string \"alu\")\n@@ -9142,8 +9097,8 @@\n        (ior (eq_attr \"type\" \"alu\")\n \t    (and (eq_attr \"type\" \"ishift\")\n \t\t (and (match_operand 2 \"const1_operand\" \"\")\n-\t\t      (ne (symbol_ref \"TARGET_SHIFT1 || optimize_function_for_size_p (cfun)\")\n-\t\t\t  (const_int 0)))))\n+\t\t      (ior (match_test \"TARGET_SHIFT1\")\n+\t\t\t   (match_test \"optimize_function_for_size_p (cfun)\")))))\n        (const_string \"0\")\n        (const_string \"*\")))\n    (set_attr \"mode\" \"<MODE>\")])\n@@ -9201,8 +9156,7 @@\n \t      (const_string \"lea\")\n \t    (eq_attr \"alternative\" \"2\")\n \t      (const_string \"ishiftx\")\n-            (and (ne (symbol_ref \"TARGET_DOUBLE_WITH_ADD\")\n-\t\t     (const_int 0))\n+            (and (match_test \"TARGET_DOUBLE_WITH_ADD\")\n \t\t (match_operand 2 \"const1_operand\" \"\"))\n \t      (const_string \"alu\")\n \t   ]\n@@ -9212,8 +9166,8 @@\n        (ior (eq_attr \"type\" \"alu\")\n \t    (and (eq_attr \"type\" \"ishift\")\n \t\t (and (match_operand 2 \"const1_operand\" \"\")\n-\t\t      (ne (symbol_ref \"TARGET_SHIFT1 || optimize_function_for_size_p (cfun)\")\n-\t\t\t  (const_int 0)))))\n+\t\t      (ior (match_test \"TARGET_SHIFT1\")\n+\t\t\t   (match_test \"optimize_function_for_size_p (cfun)\")))))\n        (const_string \"0\")\n        (const_string \"*\")))\n    (set_attr \"mode\" \"SI\")])\n@@ -9257,8 +9211,7 @@\n   [(set (attr \"type\")\n      (cond [(eq_attr \"alternative\" \"1\")\n \t      (const_string \"lea\")\n-            (and (and (ne (symbol_ref \"TARGET_DOUBLE_WITH_ADD\")\n-\t\t          (const_int 0))\n+            (and (and (match_test \"TARGET_DOUBLE_WITH_ADD\")\n \t\t      (match_operand 0 \"register_operand\" \"\"))\n \t\t (match_operand 2 \"const1_operand\" \"\"))\n \t      (const_string \"alu\")\n@@ -9269,8 +9222,8 @@\n        (ior (eq_attr \"type\" \"alu\")\n \t    (and (eq_attr \"type\" \"ishift\")\n \t\t (and (match_operand 2 \"const1_operand\" \"\")\n-\t\t      (ne (symbol_ref \"TARGET_SHIFT1 || optimize_function_for_size_p (cfun)\")\n-\t\t\t  (const_int 0)))))\n+\t\t      (ior (match_test \"TARGET_SHIFT1\")\n+\t\t\t   (match_test \"optimize_function_for_size_p (cfun)\")))))\n        (const_string \"0\")\n        (const_string \"*\")))\n    (set_attr \"mode\" \"HI,SI\")])\n@@ -9316,8 +9269,7 @@\n   [(set (attr \"type\")\n      (cond [(eq_attr \"alternative\" \"2\")\n \t      (const_string \"lea\")\n-            (and (and (ne (symbol_ref \"TARGET_DOUBLE_WITH_ADD\")\n-\t\t          (const_int 0))\n+            (and (and (match_test \"TARGET_DOUBLE_WITH_ADD\")\n \t\t      (match_operand 0 \"register_operand\" \"\"))\n \t\t (match_operand 2 \"const1_operand\" \"\"))\n \t      (const_string \"alu\")\n@@ -9328,8 +9280,8 @@\n        (ior (eq_attr \"type\" \"alu\")\n \t    (and (eq_attr \"type\" \"ishift\")\n \t\t (and (match_operand 2 \"const1_operand\" \"\")\n-\t\t      (ne (symbol_ref \"TARGET_SHIFT1 || optimize_function_for_size_p (cfun)\")\n-\t\t\t  (const_int 0)))))\n+\t\t      (ior (match_test \"TARGET_SHIFT1\")\n+\t\t\t   (match_test \"optimize_function_for_size_p (cfun)\")))))\n        (const_string \"0\")\n        (const_string \"*\")))\n    (set_attr \"mode\" \"QI,SI,SI\")])\n@@ -9360,8 +9312,7 @@\n     }\n }\n   [(set (attr \"type\")\n-     (cond [(and (and (ne (symbol_ref \"TARGET_DOUBLE_WITH_ADD\")\n-\t\t          (const_int 0))\n+     (cond [(and (and (match_test \"TARGET_DOUBLE_WITH_ADD\")\n \t\t      (match_operand 0 \"register_operand\" \"\"))\n \t\t (match_operand 1 \"const1_operand\" \"\"))\n \t      (const_string \"alu\")\n@@ -9372,8 +9323,8 @@\n        (ior (eq_attr \"type\" \"alu\")\n \t    (and (eq_attr \"type\" \"ishift1\")\n \t\t (and (match_operand 1 \"const1_operand\" \"\")\n-\t\t      (ne (symbol_ref \"TARGET_SHIFT1 || optimize_function_for_size_p (cfun)\")\n-\t\t\t  (const_int 0)))))\n+\t\t      (ior (match_test \"TARGET_SHIFT1\")\n+\t\t\t   (match_test \"optimize_function_for_size_p (cfun)\")))))\n        (const_string \"0\")\n        (const_string \"*\")))\n    (set_attr \"mode\" \"QI\")])\n@@ -9457,8 +9408,7 @@\n     }\n }\n   [(set (attr \"type\")\n-     (cond [(and (and (ne (symbol_ref \"TARGET_DOUBLE_WITH_ADD\")\n-\t\t          (const_int 0))\n+     (cond [(and (and (match_test \"TARGET_DOUBLE_WITH_ADD\")\n \t\t      (match_operand 0 \"register_operand\" \"\"))\n \t\t (match_operand 2 \"const1_operand\" \"\"))\n \t      (const_string \"alu\")\n@@ -9469,8 +9419,8 @@\n        (ior (eq_attr \"type\" \"alu\")\n \t    (and (eq_attr \"type\" \"ishift\")\n \t\t (and (match_operand 2 \"const1_operand\" \"\")\n-\t\t      (ne (symbol_ref \"TARGET_SHIFT1 || optimize_function_for_size_p (cfun)\")\n-\t\t\t  (const_int 0)))))\n+\t\t      (ior (match_test \"TARGET_SHIFT1\")\n+\t\t\t   (match_test \"optimize_function_for_size_p (cfun)\")))))\n        (const_string \"0\")\n        (const_string \"*\")))\n    (set_attr \"mode\" \"<MODE>\")])\n@@ -9507,8 +9457,7 @@\n     }\n }\n   [(set (attr \"type\")\n-     (cond [(and (ne (symbol_ref \"TARGET_DOUBLE_WITH_ADD\")\n-\t\t     (const_int 0))\n+     (cond [(and (match_test \"TARGET_DOUBLE_WITH_ADD\")\n \t\t (match_operand 2 \"const1_operand\" \"\"))\n \t      (const_string \"alu\")\n \t   ]\n@@ -9518,8 +9467,8 @@\n        (ior (eq_attr \"type\" \"alu\")\n \t    (and (eq_attr \"type\" \"ishift\")\n \t\t (and (match_operand 2 \"const1_operand\" \"\")\n-\t\t      (ne (symbol_ref \"TARGET_SHIFT1 || optimize_function_for_size_p (cfun)\")\n-\t\t\t  (const_int 0)))))\n+\t\t      (ior (match_test \"TARGET_SHIFT1\")\n+\t\t\t   (match_test \"optimize_function_for_size_p (cfun)\")))))\n        (const_string \"0\")\n        (const_string \"*\")))\n    (set_attr \"mode\" \"SI\")])\n@@ -9553,8 +9502,7 @@\n     }\n }\n   [(set (attr \"type\")\n-     (cond [(and (and (ne (symbol_ref \"TARGET_DOUBLE_WITH_ADD\")\n-\t\t          (const_int 0))\n+     (cond [(and (and (match_test \"TARGET_DOUBLE_WITH_ADD\")\n \t\t      (match_operand 0 \"register_operand\" \"\"))\n \t\t (match_operand 2 \"const1_operand\" \"\"))\n \t      (const_string \"alu\")\n@@ -9565,8 +9513,8 @@\n        (ior (eq_attr \"type\" \"alu\")\n \t    (and (eq_attr \"type\" \"ishift\")\n \t\t (and (match_operand 2 \"const1_operand\" \"\")\n-\t\t      (ne (symbol_ref \"TARGET_SHIFT1 || optimize_function_for_size_p (cfun)\")\n-\t\t\t  (const_int 0)))))\n+\t\t      (ior (match_test \"TARGET_SHIFT1\")\n+\t\t\t   (match_test \"optimize_function_for_size_p (cfun)\")))))\n        (const_string \"0\")\n        (const_string \"*\")))\n    (set_attr \"mode\" \"<MODE>\")])\n@@ -9784,8 +9732,8 @@\n    (set (attr \"length_immediate\")\n      (if_then_else\n        (and (match_operand 2 \"const1_operand\" \"\")\n-\t    (ne (symbol_ref \"TARGET_SHIFT1 || optimize_function_for_size_p (cfun)\")\n-\t\t(const_int 0)))\n+\t    (ior (match_test \"TARGET_SHIFT1\")\n+\t\t (match_test \"optimize_function_for_size_p (cfun)\")))\n        (const_string \"0\")\n        (const_string \"*\")))\n    (set_attr \"mode\" \"<MODE>\")])\n@@ -9837,8 +9785,8 @@\n    (set (attr \"length_immediate\")\n      (if_then_else\n        (and (match_operand 2 \"const1_operand\" \"\")\n-\t    (ne (symbol_ref \"TARGET_SHIFT1 || optimize_function_for_size_p (cfun)\")\n-\t\t(const_int 0)))\n+\t    (ior (match_test \"TARGET_SHIFT1\")\n+\t\t (match_test \"optimize_function_for_size_p (cfun)\")))\n        (const_string \"0\")\n        (const_string \"*\")))\n    (set_attr \"mode\" \"SI\")])\n@@ -9873,8 +9821,8 @@\n    (set (attr \"length_immediate\")\n      (if_then_else\n        (and (match_operand 2 \"const1_operand\" \"\")\n-\t    (ne (symbol_ref \"TARGET_SHIFT1 || optimize_function_for_size_p (cfun)\")\n-\t\t(const_int 0)))\n+\t    (ior (match_test \"TARGET_SHIFT1\")\n+\t\t (match_test \"optimize_function_for_size_p (cfun)\")))\n        (const_string \"0\")\n        (const_string \"*\")))\n    (set_attr \"mode\" \"<MODE>\")])\n@@ -9899,8 +9847,8 @@\n    (set (attr \"length_immediate\")\n      (if_then_else\n        (and (match_operand 1 \"const1_operand\" \"\")\n-\t    (ne (symbol_ref \"TARGET_SHIFT1 || optimize_function_for_size_p (cfun)\")\n-\t\t(const_int 0)))\n+\t    (ior (match_test \"TARGET_SHIFT1\")\n+\t\t (match_test \"optimize_function_for_size_p (cfun)\")))\n        (const_string \"0\")\n        (const_string \"*\")))\n    (set_attr \"mode\" \"QI\")])\n@@ -9934,8 +9882,8 @@\n    (set (attr \"length_immediate\")\n      (if_then_else\n        (and (match_operand 2 \"const1_operand\" \"\")\n-\t    (ne (symbol_ref \"TARGET_SHIFT1 || optimize_function_for_size_p (cfun)\")\n-\t\t(const_int 0)))\n+\t    (ior (match_test \"TARGET_SHIFT1\")\n+\t\t (match_test \"optimize_function_for_size_p (cfun)\")))\n        (const_string \"0\")\n        (const_string \"*\")))\n    (set_attr \"mode\" \"<MODE>\")])\n@@ -9966,8 +9914,8 @@\n    (set (attr \"length_immediate\")\n      (if_then_else\n        (and (match_operand 2 \"const1_operand\" \"\")\n-\t    (ne (symbol_ref \"TARGET_SHIFT1 || optimize_function_for_size_p (cfun)\")\n-\t\t(const_int 0)))\n+\t    (ior (match_test \"TARGET_SHIFT1\")\n+\t\t (match_test \"optimize_function_for_size_p (cfun)\")))\n        (const_string \"0\")\n        (const_string \"*\")))\n    (set_attr \"mode\" \"SI\")])\n@@ -9996,8 +9944,8 @@\n    (set (attr \"length_immediate\")\n      (if_then_else\n        (and (match_operand 2 \"const1_operand\" \"\")\n-\t    (ne (symbol_ref \"TARGET_SHIFT1 || optimize_function_for_size_p (cfun)\")\n-\t\t(const_int 0)))\n+\t    (ior (match_test \"TARGET_SHIFT1\")\n+\t\t (match_test \"optimize_function_for_size_p (cfun)\")))\n        (const_string \"0\")\n        (const_string \"*\")))\n    (set_attr \"mode\" \"<MODE>\")])\n@@ -10165,8 +10113,8 @@\n      (if_then_else\n        (and (eq_attr \"type\" \"rotate\")\n \t    (and (match_operand 2 \"const1_operand\" \"\")\n-\t\t (ne (symbol_ref \"TARGET_SHIFT1 || optimize_function_for_size_p (cfun)\")\n-\t\t     (const_int 0))))\n+\t\t (ior (match_test \"TARGET_SHIFT1\")\n+\t\t      (match_test \"optimize_function_for_size_p (cfun)\"))))\n        (const_string \"0\")\n        (const_string \"*\")))\n    (set_attr \"mode\" \"<MODE>\")])\n@@ -10231,8 +10179,8 @@\n      (if_then_else\n        (and (eq_attr \"type\" \"rotate\")\n \t    (and (match_operand 2 \"const1_operand\" \"\")\n-\t\t (ne (symbol_ref \"TARGET_SHIFT1 || optimize_function_for_size_p (cfun)\")\n-\t\t     (const_int 0))))\n+\t\t (ior (match_test \"TARGET_SHIFT1\")\n+\t\t      (match_test \"optimize_function_for_size_p (cfun)\"))))\n        (const_string \"0\")\n        (const_string \"*\")))\n    (set_attr \"mode\" \"SI\")])\n@@ -10279,8 +10227,8 @@\n    (set (attr \"length_immediate\")\n      (if_then_else\n        (and (match_operand 2 \"const1_operand\" \"\")\n-\t    (ne (symbol_ref \"TARGET_SHIFT1 || optimize_function_for_size_p (cfun)\")\n-\t\t(const_int 0)))\n+\t    (ior (match_test \"TARGET_SHIFT1\")\n+\t\t (match_test \"optimize_function_for_size_p (cfun)\")))\n        (const_string \"0\")\n        (const_string \"*\")))\n    (set_attr \"mode\" \"<MODE>\")])\n@@ -10305,8 +10253,8 @@\n    (set (attr \"length_immediate\")\n      (if_then_else\n        (and (match_operand 1 \"const1_operand\" \"\")\n-\t    (ne (symbol_ref \"TARGET_SHIFT1 || optimize_function_for_size_p (cfun)\")\n-\t\t(const_int 0)))\n+\t    (ior (match_test \"TARGET_SHIFT1\")\n+\t\t (match_test \"optimize_function_for_size_p (cfun)\")))\n        (const_string \"0\")\n        (const_string \"*\")))\n    (set_attr \"mode\" \"QI\")])\n@@ -15781,7 +15729,7 @@\n    (set_attr \"memory\" \"both\")\n    (set (attr \"prefix_rex\")\n \t(if_then_else\n-\t  (ne (symbol_ref \"<P:MODE>mode == DImode\") (const_int 0))\n+\t  (match_test \"<P:MODE>mode == DImode\")\n \t  (const_string \"0\")\n \t  (const_string \"*\")))\n    (set_attr \"mode\" \"QI\")])\n@@ -15957,7 +15905,7 @@\n    (set_attr \"memory\" \"store\")\n    (set (attr \"prefix_rex\")\n \t(if_then_else\n-\t  (ne (symbol_ref \"<P:MODE>mode == DImode\") (const_int 0))\n+\t  (match_test \"<P:MODE>mode == DImode\")\n \t  (const_string \"0\")\n \t  (const_string \"*\")))\n    (set_attr \"mode\" \"QI\")])\n@@ -16023,7 +15971,7 @@\n    (set_attr \"memory\" \"store\")\n    (set (attr \"prefix_rex\")\n \t(if_then_else\n-\t  (ne (symbol_ref \"<P:MODE>mode == DImode\") (const_int 0))\n+\t  (match_test \"<P:MODE>mode == DImode\")\n \t  (const_string \"0\")\n \t  (const_string \"*\")))\n    (set_attr \"mode\" \"QI\")])\n@@ -16143,7 +16091,7 @@\n    (set_attr \"mode\" \"QI\")\n    (set (attr \"prefix_rex\")\n \t(if_then_else\n-\t  (ne (symbol_ref \"<P:MODE>mode == DImode\") (const_int 0))\n+\t  (match_test \"<P:MODE>mode == DImode\")\n \t  (const_string \"0\")\n \t  (const_string \"*\")))\n    (set_attr \"prefix_rep\" \"1\")])\n@@ -16183,7 +16131,7 @@\n    (set_attr \"mode\" \"QI\")\n    (set (attr \"prefix_rex\")\n \t(if_then_else\n-\t  (ne (symbol_ref \"<P:MODE>mode == DImode\") (const_int 0))\n+\t  (match_test \"<P:MODE>mode == DImode\")\n \t  (const_string \"0\")\n \t  (const_string \"*\")))\n    (set_attr \"prefix_rep\" \"1\")])\n@@ -16224,7 +16172,7 @@\n    (set_attr \"mode\" \"QI\")\n    (set (attr \"prefix_rex\")\n \t(if_then_else\n-\t  (ne (symbol_ref \"<P:MODE>mode == DImode\") (const_int 0))\n+\t  (match_test \"<P:MODE>mode == DImode\")\n \t  (const_string \"0\")\n \t  (const_string \"*\")))\n    (set_attr \"prefix_rep\" \"1\")])\n@@ -16651,7 +16599,7 @@\n }\n   [(set (attr \"type\")\n \t(cond [(and (eq_attr \"alternative\" \"0\")\n-\t\t    (eq (symbol_ref \"TARGET_OPT_AGU\") (const_int 0)))\n+\t\t    (not (match_test \"TARGET_OPT_AGU\")))\n \t\t (const_string \"alu\")\n \t       (match_operand:<MODE> 2 \"const0_operand\" \"\")\n \t\t (const_string \"imov\")"}, {"sha": "21f2c94eddeac7e72451b630750f0911fd9d4736", "filename": "gcc/config/i386/mmx.md", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/67b2c4931ad2250789a4cae2e78776a7b56ed691/gcc%2Fconfig%2Fi386%2Fmmx.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/67b2c4931ad2250789a4cae2e78776a7b56ed691/gcc%2Fconfig%2Fi386%2Fmmx.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fmmx.md?ref=67b2c4931ad2250789a4cae2e78776a7b56ed691", "patch": "@@ -159,13 +159,13 @@\n      (if_then_else\n        (ior (eq_attr \"alternative\" \"4,5\")\n \t    (and (eq_attr \"alternative\" \"7\")\n-\t\t (eq (symbol_ref \"TARGET_AVX\") (const_int 0))))\n+\t\t (not (match_test \"TARGET_AVX\"))))\n        (const_string \"1\")\n        (const_string \"*\")))\n    (set (attr \"prefix_data16\")\n      (if_then_else\n        (and (eq_attr \"alternative\" \"8\")\n-\t    (eq (symbol_ref \"TARGET_AVX\") (const_int 0)))\n+\t    (not (match_test \"TARGET_AVX\")))\n        (const_string \"1\")\n        (const_string \"*\")))\n    (set (attr \"prefix\")\n@@ -224,7 +224,7 @@\n    (set (attr \"length_vex\")\n      (if_then_else\n        (and (eq_attr \"alternative\" \"12,13\")\n-\t    (ne (symbol_ref \"TARGET_AVX\") (const_int 0)))\n+\t    (match_test \"TARGET_AVX\"))\n        (const_string \"4\")\n        (const_string \"*\")))\n    (set (attr \"prefix\")\n@@ -1563,7 +1563,8 @@\n   [(set_attr \"type\" \"mmxshft\")\n    (set (attr \"prefix_extra\")\n      (if_then_else\n-       (eq (symbol_ref \"(TARGET_SSE || TARGET_3DNOW_A)\") (const_int 0))\n+       (not (ior (match_test \"TARGET_SSE\")\n+\t\t (match_test \"TARGET_3DNOW_A\")))\n        (const_string \"1\")\n        (const_string \"*\")))\n    (set_attr \"mode\" \"DI\")])"}, {"sha": "89cc8a75b55e8ac9d98419659248ffe8f12e33d1", "filename": "gcc/config/i386/predicates.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/67b2c4931ad2250789a4cae2e78776a7b56ed691/gcc%2Fconfig%2Fi386%2Fpredicates.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/67b2c4931ad2250789a4cae2e78776a7b56ed691/gcc%2Fconfig%2Fi386%2Fpredicates.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fpredicates.md?ref=67b2c4931ad2250789a4cae2e78776a7b56ed691", "patch": "@@ -565,7 +565,7 @@\n (define_predicate \"call_insn_operand\"\n   (ior (match_operand 0 \"constant_call_address_operand\")\n        (match_operand 0 \"call_register_no_elim_operand\")\n-       (and (match_test \"!TARGET_X32\")\n+       (and (not (match_test \"TARGET_X32\"))\n \t    (match_operand 0 \"memory_operand\"))))\n \n ;; Similarly, but for tail calls, in which we cannot allow memory references."}, {"sha": "3678ea824ec159b1cd39e27b155eaff61a6efb34", "filename": "gcc/config/i386/sse.md", "status": "modified", "additions": 24, "deletions": 27, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/67b2c4931ad2250789a4cae2e78776a7b56ed691/gcc%2Fconfig%2Fi386%2Fsse.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/67b2c4931ad2250789a4cae2e78776a7b56ed691/gcc%2Fconfig%2Fi386%2Fsse.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fsse.md?ref=67b2c4931ad2250789a4cae2e78776a7b56ed691", "patch": "@@ -397,15 +397,12 @@\n   [(set_attr \"type\" \"sselog1,ssemov,ssemov\")\n    (set_attr \"prefix\" \"maybe_vex\")\n    (set (attr \"mode\")\n-\t(cond [(ne (symbol_ref \"TARGET_AVX\") (const_int 0))\n+\t(cond [(match_test \"TARGET_AVX\")\n \t\t (const_string \"<sseinsnmode>\")\n-\t       (ior (ior\n-\t\t      (ne (symbol_ref \"optimize_function_for_size_p (cfun)\")\n-\t\t\t  (const_int 0))\n-\t\t      (eq (symbol_ref \"TARGET_SSE2\") (const_int 0)))\n+\t       (ior (ior (match_test \"optimize_function_for_size_p (cfun)\")\n+\t\t\t (not (match_test \"TARGET_SSE2\")))\n \t\t    (and (eq_attr \"alternative\" \"2\")\n-\t\t\t (ne (symbol_ref \"TARGET_SSE_TYPELESS_STORES\")\n-\t\t\t     (const_int 0))))\n+\t\t\t (match_test \"TARGET_SSE_TYPELESS_STORES\")))\n \t\t (const_string \"V4SF\")\n \t       (eq (const_string \"<MODE>mode\") (const_string \"V4SFmode\"))\n \t\t (const_string \"V4SF\")\n@@ -548,7 +545,7 @@\n    (set_attr \"movu\" \"1\")\n    (set (attr \"prefix_data16\")\n      (if_then_else\n-       (ne (symbol_ref \"TARGET_AVX\") (const_int 0))\n+       (match_test \"TARGET_AVX\")\n      (const_string \"*\")\n      (const_string \"1\")))\n    (set_attr \"prefix\" \"maybe_vex\")\n@@ -564,12 +561,12 @@\n    (set_attr \"movu\" \"1\")\n    (set (attr \"prefix_data16\")\n      (if_then_else\n-       (ne (symbol_ref \"TARGET_AVX\") (const_int 0))\n+       (match_test \"TARGET_AVX\")\n      (const_string \"*\")\n      (const_string \"0\")))\n    (set (attr \"prefix_rep\")\n      (if_then_else\n-       (ne (symbol_ref \"TARGET_AVX\") (const_int 0))\n+       (match_test \"TARGET_AVX\")\n      (const_string \"*\")\n      (const_string \"1\")))\n    (set_attr \"prefix\" \"maybe_vex\")\n@@ -604,7 +601,7 @@\n   [(set_attr \"type\" \"ssecvt\")\n    (set (attr \"prefix_data16\")\n      (if_then_else\n-       (ne (symbol_ref \"TARGET_AVX\") (const_int 0))\n+       (match_test \"TARGET_AVX\")\n      (const_string \"*\")\n      (const_string \"1\")))\n    (set_attr \"prefix\" \"maybe_vex\")\n@@ -2247,7 +2244,7 @@\n   [(set_attr \"type\" \"ssecvt\")\n    (set (attr \"prefix_data16\")\n      (if_then_else\n-       (ne (symbol_ref \"TARGET_AVX\") (const_int 0))\n+       (match_test \"TARGET_AVX\")\n      (const_string \"*\")\n      (const_string \"1\")))\n    (set_attr \"prefix\" \"maybe_vex\")\n@@ -2270,12 +2267,12 @@\n   [(set_attr \"type\" \"ssecvt\")\n    (set (attr \"prefix_rep\")\n      (if_then_else\n-       (ne (symbol_ref \"TARGET_AVX\") (const_int 0))\n+       (match_test \"TARGET_AVX\")\n      (const_string \"*\")\n      (const_string \"1\")))\n    (set (attr \"prefix_data16\")\n      (if_then_else\n-       (ne (symbol_ref \"TARGET_AVX\") (const_int 0))\n+       (match_test \"TARGET_AVX\")\n      (const_string \"*\")\n      (const_string \"0\")))\n    (set_attr \"prefix_data16\" \"0\")\n@@ -4411,7 +4408,7 @@\n    (set (attr \"prefix_data16\")\n      (if_then_else\n        (and (eq_attr \"alternative\" \"0\")\n-\t    (eq (symbol_ref \"TARGET_AVX\") (const_int 0)))\n+\t    (not (match_test \"TARGET_AVX\")))\n        (const_string \"1\")\n        (const_string \"*\")))\n    (set_attr \"prefix\" \"maybe_vex,orig,vex,*,*,*\")\n@@ -4641,7 +4638,7 @@\n    (set (attr \"prefix_data16\")\n      (if_then_else\n        (and (eq_attr \"alternative\" \"2,4\")\n-\t    (eq (symbol_ref \"TARGET_AVX\") (const_int 0)))\n+\t    (not (match_test \"TARGET_AVX\")))\n        (const_string \"1\")\n        (const_string \"*\")))\n    (set_attr \"length_immediate\" \"*,*,*,*,*,1,*,*,*\")\n@@ -6320,11 +6317,11 @@\n        (const_string \"*\")))\n    (set_attr \"prefix\" \"orig,vex\")\n    (set (attr \"mode\")\n-     (cond [(ne (symbol_ref \"TARGET_AVX2\") (const_int 0))\n+     (cond [(match_test \"TARGET_AVX2\")\n \t      (const_string \"OI\")\n-\t    (ne (symbol_ref \"GET_MODE_SIZE (<MODE>mode) > 128\") (const_int 0))\n+\t    (match_test \"GET_MODE_SIZE (<MODE>mode) > 128\")\n \t      (const_string \"V8SF\")\n-\t    (ne (symbol_ref \"TARGET_SSE2\") (const_int 0))\n+\t    (match_test \"TARGET_SSE2\")\n \t      (const_string \"TI\")\n \t   ]\n \t   (const_string \"V4SF\")))])\n@@ -6396,11 +6393,11 @@\n        (const_string \"*\")))\n    (set_attr \"prefix\" \"orig,vex\")\n    (set (attr \"mode\")\n-     (cond [(ne (symbol_ref \"TARGET_AVX2\") (const_int 0))\n+     (cond [(match_test \"TARGET_AVX2\")\n \t      (const_string \"OI\")\n-\t    (ne (symbol_ref \"GET_MODE_SIZE (<MODE>mode) > 128\") (const_int 0))\n+\t    (match_test \"GET_MODE_SIZE (<MODE>mode) > 128\")\n \t      (const_string \"V8SF\")\n-\t    (ne (symbol_ref \"TARGET_SSE2\") (const_int 0))\n+\t    (match_test \"TARGET_SSE2\")\n \t      (const_string \"TI\")\n \t   ]\n \t   (const_string \"V4SF\")))])\n@@ -6813,19 +6810,19 @@\n    (set_attr \"type\" \"sselog\")\n    (set (attr \"prefix_rex\")\n      (if_then_else\n-       (and (eq (symbol_ref \"TARGET_AVX\") (const_int 0))\n+       (and (not (match_test \"TARGET_AVX\"))\n \t    (eq (const_string \"<MODE>mode\") (const_string \"V2DImode\")))\n        (const_string \"1\")\n        (const_string \"*\")))\n    (set (attr \"prefix_data16\")\n      (if_then_else\n-       (and (eq (symbol_ref \"TARGET_AVX\") (const_int 0))\n+       (and (not (match_test \"TARGET_AVX\"))\n \t    (eq (const_string \"<MODE>mode\") (const_string \"V8HImode\")))\n        (const_string \"1\")\n        (const_string \"*\")))\n    (set (attr \"prefix_extra\")\n      (if_then_else\n-       (and (eq (symbol_ref \"TARGET_AVX\") (const_int 0))\n+       (and (not (match_test \"TARGET_AVX\"))\n \t    (eq (const_string \"<MODE>mode\") (const_string \"V8HImode\")))\n        (const_string \"*\")\n        (const_string \"1\")))\n@@ -7495,7 +7492,7 @@\n    (set (attr \"prefix_rex\")\n      (if_then_else\n        (and (eq_attr \"alternative\" \"0,3\")\n-\t    (eq (symbol_ref \"TARGET_AVX\") (const_int 0)))\n+\t    (not (match_test \"TARGET_AVX\")))\n        (const_string \"1\")\n        (const_string \"*\")))\n    (set_attr \"prefix_extra\" \"1,1,*,*,*,*,*,*,*\")\n@@ -9709,7 +9706,7 @@\n   [(set_attr \"type\" \"ssecvt\")\n    (set (attr \"prefix_data16\")\n      (if_then_else\n-       (ne (symbol_ref \"TARGET_AVX\") (const_int 0))\n+       (match_test \"TARGET_AVX\")\n      (const_string \"*\")\n      (const_string \"1\")))\n    (set_attr \"prefix_extra\" \"1\")"}]}