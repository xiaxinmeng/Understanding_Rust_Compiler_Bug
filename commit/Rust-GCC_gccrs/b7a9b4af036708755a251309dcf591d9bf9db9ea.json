{"sha": "b7a9b4af036708755a251309dcf591d9bf9db9ea", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjdhOWI0YWYwMzY3MDg3NTVhMjUxMzA5ZGNmNTkxZDliZjlkYjllYQ==", "commit": {"author": {"name": "Fernando Nasser", "email": "fnasser@redhat.com", "date": "2004-01-05T21:18:06Z"}, "committer": {"name": "Fernando Nasser", "email": "fnasser@gcc.gnu.org", "date": "2004-01-05T21:18:06Z"}, "message": "Choice.java (add): Leave posting of ItemEvents to peer.\n\n2004-01-05  Fernando Nasser  <fnasser@redhat.com>\n\n        * java/awt/Choice.java (add): Leave posting of ItemEvents to peer.\n        (insert): Ditto.\n        (remove): Ditto.  Also, Check for valid argument.\n        (removeAll): Use peer interface method.\n        * gnu/java/awt/peer/gtk/GtkChoicePeer.java (nativeAdd): New name for\n        native add function.\n        (nativeRemove): New name for native remove function.\n        (getHistory): New native function.\n        (constructor): Generate ItemEvent.\n        (add): Ditto, if selection is changed.\n        (remove): Ditto, ditto.\n        (removeAll): Add implementation.\n        (handleEvent): Remove.  Dead code.\n        (choicePostItemEvent): Add comment.\n        * jni/gtk-peer/gnu_java_awt_peer_gtk_GtkChoicePeer.c\n        (Java_gnu_java_awt_peer_gtk_GtkChoicePeer_append): Add comments.\n        (Java_gnu_java_awt_peer_gtk_GtkChoicePeer_add): Rename to...\n        (Java_gnu_java_awt_peer_gtk_GtkChoicePeer_nativeAdd): New name.  Add\n        comments and fix condition to change selection.\n        (Java_gnu_java_awt_peer_gtk_GtkChoicePeer_remove): Rename to...\n        (Java_gnu_java_awt_peer_gtk_GtkChoicePeer_nativeRemove): New name.  Add\n        remove all capability.\n        (Java_gnu_java_awt_peer_gtk_GtkChoicePeer_getHistory): New function.\n        (item_activate): Add cast to remove compiler warning.\n\nFrom-SVN: r75443", "tree": {"sha": "3b896cc9aa5303dfe9b469323979c8ef4746d208", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3b896cc9aa5303dfe9b469323979c8ef4746d208"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b7a9b4af036708755a251309dcf591d9bf9db9ea", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b7a9b4af036708755a251309dcf591d9bf9db9ea", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b7a9b4af036708755a251309dcf591d9bf9db9ea", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b7a9b4af036708755a251309dcf591d9bf9db9ea/comments", "author": {"login": "fnasser", "id": 326533, "node_id": "MDQ6VXNlcjMyNjUzMw==", "avatar_url": "https://avatars.githubusercontent.com/u/326533?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fnasser", "html_url": "https://github.com/fnasser", "followers_url": "https://api.github.com/users/fnasser/followers", "following_url": "https://api.github.com/users/fnasser/following{/other_user}", "gists_url": "https://api.github.com/users/fnasser/gists{/gist_id}", "starred_url": "https://api.github.com/users/fnasser/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fnasser/subscriptions", "organizations_url": "https://api.github.com/users/fnasser/orgs", "repos_url": "https://api.github.com/users/fnasser/repos", "events_url": "https://api.github.com/users/fnasser/events{/privacy}", "received_events_url": "https://api.github.com/users/fnasser/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "b17fc9eb2572616887716bd7ec21219b2be83e3b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b17fc9eb2572616887716bd7ec21219b2be83e3b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b17fc9eb2572616887716bd7ec21219b2be83e3b"}], "stats": {"total": 230, "additions": 156, "deletions": 74}, "files": [{"sha": "c5556a9626d0ea323394c9490372fffa1b8f4be3", "filename": "libjava/ChangeLog", "status": "modified", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b7a9b4af036708755a251309dcf591d9bf9db9ea/libjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b7a9b4af036708755a251309dcf591d9bf9db9ea/libjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FChangeLog?ref=b7a9b4af036708755a251309dcf591d9bf9db9ea", "patch": "@@ -1,3 +1,30 @@\n+2004-01-05  Fernando Nasser  <fnasser@redhat.com>\n+\n+\t* java/awt/Choice.java (add): Leave posting of ItemEvents to peer.\n+\t(insert): Ditto.\n+\t(remove): Ditto.  Also, Check for valid argument.\n+\t(removeAll): Use peer interface method.\n+\t* gnu/java/awt/peer/gtk/GtkChoicePeer.java (nativeAdd): New name for\n+\tnative add function.\n+\t(nativeRemove): New name for native remove function.\n+\t(getHistory): New native function.\n+\t(constructor): Generate ItemEvent.\n+\t(add): Ditto, if selection is changed.\n+\t(remove): Ditto, ditto.\n+\t(removeAll): Add implementation.\n+\t(handleEvent): Remove.  Dead code.\n+\t(choicePostItemEvent): Add comment.\n+\t* jni/gtk-peer/gnu_java_awt_peer_gtk_GtkChoicePeer.c\n+\t(Java_gnu_java_awt_peer_gtk_GtkChoicePeer_append): Add comments.\n+\t(Java_gnu_java_awt_peer_gtk_GtkChoicePeer_add): Rename to...\n+\t(Java_gnu_java_awt_peer_gtk_GtkChoicePeer_nativeAdd): New name.  Add\n+\tcomments and fix condition to change selection.\n+\t(Java_gnu_java_awt_peer_gtk_GtkChoicePeer_remove): Rename to...\n+\t(Java_gnu_java_awt_peer_gtk_GtkChoicePeer_nativeRemove): New name.  Add\n+\tremove all capability.\n+\t(Java_gnu_java_awt_peer_gtk_GtkChoicePeer_getHistory): New function.\n+\t(item_activate): Add cast to remove compiler warning.\n+\n 2004-01-05  Thomas Fitzsimmons  <fitzsim@redhat.com>\n \n \t* gnu/java/awt/peer/gtk/GtkComponentPeer.java,"}, {"sha": "a03a410508ce12988e0f526c0c7c03cf45320788", "filename": "libjava/gnu/java/awt/peer/gtk/GtkChoicePeer.java", "status": "modified", "additions": 50, "deletions": 15, "changes": 65, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b7a9b4af036708755a251309dcf591d9bf9db9ea/libjava%2Fgnu%2Fjava%2Fawt%2Fpeer%2Fgtk%2FGtkChoicePeer.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b7a9b4af036708755a251309dcf591d9bf9db9ea/libjava%2Fgnu%2Fjava%2Fawt%2Fpeer%2Fgtk%2FGtkChoicePeer.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fgnu%2Fjava%2Fawt%2Fpeer%2Fgtk%2FGtkChoicePeer.java?ref=b7a9b4af036708755a251309dcf591d9bf9db9ea", "patch": "@@ -38,15 +38,14 @@\n \n package gnu.java.awt.peer.gtk;\n \n+import java.awt.AWTEvent;\n import java.awt.Choice;\n import java.awt.event.ItemEvent;\n import java.awt.peer.ChoicePeer;\n \n public class GtkChoicePeer extends GtkComponentPeer\n   implements ChoicePeer\n {\n-  native void create ();\n-\n   public GtkChoicePeer (Choice c)\n   {\n     super (c);\n@@ -59,35 +58,71 @@ public GtkChoicePeer (Choice c)\n \t  items[i] = c.getItem (i);\n \t  \n \tappend (items);\n+\n+        // Must set our state before notifying listeners\n+\t((Choice) awtComponent).select (c.getItem (0));\n+\tpostItemEvent (c.getItem (0), ItemEvent.SELECTED);\n       }\n   }\n \n+  native void create ();\n+\n   native void append (String items[]);\n+  native int getHistory ();\n+  native void nativeAdd (String item, int index);\n+  native void nativeRemove (int index);\n \n-  native public void add (String item, int index);\n-  native public void remove (int index);\n   native public void select (int position);\n  \n-  public void removeAll () { }\n-  \n-  public void addItem (String item, int position)\n+  public void add (String item, int index)\n   {\n-    add (item, position);\n+    int before = getHistory();\n+    \n+    nativeAdd (item, index);\n+    \n+    /* Generate an ItemEvent if we added the first one or\n+       if we inserted at or before the currently selected item. */\n+    if ((before < 0) || (before >= index))\n+      {\n+        // Must set our state before notifying listeners\n+\t((Choice) awtComponent).select (((Choice) awtComponent).getItem (0));\n+        postItemEvent (((Choice) awtComponent).getItem (0), ItemEvent.SELECTED);\n+      }\n+  }\n+\n+  public void remove (int index)\n+  {\n+    int before = getHistory();\n+    int after;\n+    \n+    nativeRemove (index);\n+    after = getHistory();\n+    \n+    /* Generate an ItemEvent if we are removing the currently selected item\n+       and there are at least one item left. */\n+    if ((before == index) && (after >= 0))\n+      {\n+        // Must set our state before notifying listeners\n+\t((Choice) awtComponent).select (((Choice) awtComponent).getItem (0));\n+        postItemEvent (((Choice) awtComponent).getItem (0), ItemEvent.SELECTED);\n+      }\n+  }\n+\n+  public void removeAll ()\n+  {\n+    nativeRemove (-1);\n   }\n   \n-  /*\n-  public void handleEvent (AWTEvent event)\n+  public void addItem (String item, int position)\n   {\n-    if (event instanceof ItemEvent)\n-      ((Choice) awtComponent).select ((String) ((ItemEvent)event).getItem ());\n-    super.handleEvent (event);\n+    add (item, position);\n   }\n-  */\n \n   protected void choicePostItemEvent (String label, int stateChange)\n   {\n+    // Must set our state before notifying listeners\n     if (stateChange == ItemEvent.SELECTED)\n       ((Choice) awtComponent).select (label);\n-    super.postItemEvent (label, stateChange);\n+    postItemEvent (label, stateChange);\n   }\n }"}, {"sha": "d1f601f777d055e979815fb659f0d3ddc33312ca", "filename": "libjava/java/awt/Choice.java", "status": "modified", "additions": 9, "deletions": 49, "changes": 58, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b7a9b4af036708755a251309dcf591d9bf9db9ea/libjava%2Fjava%2Fawt%2FChoice.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b7a9b4af036708755a251309dcf591d9bf9db9ea/libjava%2Fjava%2Fawt%2FChoice.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fawt%2FChoice.java?ref=b7a9b4af036708755a251309dcf591d9bf9db9ea", "patch": "@@ -169,17 +169,6 @@ public Choice()\n       ChoicePeer cp = (ChoicePeer) peer;\n       cp.add (item, i);\n     }\n-\n-  if (i == 0)\n-  {\n-    selectedIndex = 0;\n-    // We must generate an ItemEvent here\n-    Toolkit.getDefaultToolkit().getSystemEventQueue().postEvent (\n-      new ItemEvent ((ItemSelectable)this, \n-                     ItemEvent.ITEM_STATE_CHANGED,\n-                     getItem(0),\n-                     ItemEvent.SELECTED));\n-  }\n }\n \n /*************************************************************************/\n@@ -229,17 +218,6 @@ public Choice()\n       ChoicePeer cp = (ChoicePeer) peer;\n       cp.add (item, index);\n     }\n-\n-  if (getItemCount () == 1 || selectedIndex >= index)\n-  {\n-    select (0);\n-    // We must generate an ItemEvent here\n-    Toolkit.getDefaultToolkit().getSystemEventQueue().postEvent (\n-      new ItemEvent ((ItemSelectable)this, \n-                     ItemEvent.ITEM_STATE_CHANGED,\n-                     getItem(0),\n-                     ItemEvent.SELECTED));\n-  }\n }\n \n /*************************************************************************/\n@@ -273,6 +251,9 @@ public Choice()\n public synchronized void\n remove(int index)\n {\n+  if ((index < 0) || (index > getItemCount()))\n+    throw new IllegalArgumentException(\"Bad index: \" + index);\n+\n   pItems.removeElementAt(index);\n \n   if (peer != null)\n@@ -281,17 +262,7 @@ public Choice()\n       cp.remove (index);\n     }\n \n-  if ((index == selectedIndex) && (getItemCount() > 0))\n-  {\n-    select (0);\n-    // We must generate an ItemEvent here\n-    Toolkit.getDefaultToolkit().getSystemEventQueue().postEvent (\n-      new ItemEvent ((ItemSelectable)this, \n-                     ItemEvent.ITEM_STATE_CHANGED,\n-                     getItem(0),\n-                     ItemEvent.SELECTED));\n-  }\n-  else if (selectedIndex > index)\n+  if (selectedIndex > index)\n     --selectedIndex;\n }\n \n@@ -303,26 +274,15 @@ else if (selectedIndex > index)\n public synchronized void\n removeAll()\n {\n-  int count = getItemCount();\n-\n-  if (count <= 0)\n+  if (getItemCount() <= 0)\n     return;\n   \n-  ChoicePeer cp = (ChoicePeer) peer;\n-\n-  // Select the first item to prevent an spurious ItemEvent to be generated\n-  if (cp != null)\n-    {\n-      cp.select (0);\n-      selectedIndex = 0; // Just to keep consistent\n-    }\n+  pItems.removeAllElements ();\n \n-  for (int i = (count - 1); i >= 0; i--)\n+  if (peer != null)\n     {\n-      // Always remove the last to avoid generation of ItemEvents.\n-      pItems.removeElementAt(i);\n-      if (cp != null)\n-        cp.remove (i);\n+      ChoicePeer cp = (ChoicePeer) peer;\n+      cp.removeAll ();\n     }\n \n   selectedIndex = -1;"}, {"sha": "cc586a022d203de258a6ab60671dccfb18e93cc8", "filename": "libjava/jni/gtk-peer/gnu_java_awt_peer_gtk_GtkChoicePeer.c", "status": "modified", "additions": 70, "deletions": 10, "changes": 80, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b7a9b4af036708755a251309dcf591d9bf9db9ea/libjava%2Fjni%2Fgtk-peer%2Fgnu_java_awt_peer_gtk_GtkChoicePeer.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b7a9b4af036708755a251309dcf591d9bf9db9ea/libjava%2Fjni%2Fgtk-peer%2Fgnu_java_awt_peer_gtk_GtkChoicePeer.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjni%2Fgtk-peer%2Fgnu_java_awt_peer_gtk_GtkChoicePeer.c?ref=b7a9b4af036708755a251309dcf591d9bf9db9ea", "patch": "@@ -85,9 +85,11 @@ Java_gnu_java_awt_peer_gtk_GtkChoicePeer_append\n   ptr = NSA_GET_PTR (env, obj);\n \n   gdk_threads_enter ();\n+\n   menu = GTK_MENU (gtk_option_menu_get_menu (GTK_OPTION_MENU (ptr)));\n \n-  if (!gtk_container_children (GTK_CONTAINER (menu)))\n+  /* Are we adding the first element? */\n+  if (gtk_option_menu_get_history (GTK_OPTION_MENU (ptr)) < 0)\n       need_set_history = 1;\n \n   count = (*env)->GetArrayLength (env, items);\n@@ -110,38 +112,47 @@ Java_gnu_java_awt_peer_gtk_GtkChoicePeer_append\n \n       (*env)->ReleaseStringUTFChars (env, item, label);\n     }\n-  \n+\n+  /* If we just added the first element select it. */  \n   if (need_set_history)\n     gtk_option_menu_set_history (GTK_OPTION_MENU (ptr), 0);\n \n   gdk_threads_leave ();\n }\n \n JNIEXPORT void JNICALL \n-Java_gnu_java_awt_peer_gtk_GtkChoicePeer_add \n+Java_gnu_java_awt_peer_gtk_GtkChoicePeer_nativeAdd \n   (JNIEnv *env, jobject obj, jstring item, jint index)\n {\n   void *ptr;\n   const char *label;\n   GtkWidget *menu, *menuitem;\n+  int current;\n   int need_set_history = 0;\n \n   ptr = NSA_GET_PTR (env, obj);\n   \n   label = (*env)->GetStringUTFChars (env, item, 0);      \n \n   gdk_threads_enter ();\n-  menu = gtk_option_menu_get_menu (GTK_OPTION_MENU (ptr));\n+  \n+  current = gtk_option_menu_get_history (GTK_OPTION_MENU (ptr));\n \n-  if (!gtk_container_children (GTK_CONTAINER (menu)))\n+  /* Are we adding the first element or below or at the currently\n+     selected one? */\n+  if ((current < 0) || (current >= index))\n       need_set_history = 1;\n \n+  menu = gtk_option_menu_get_menu (GTK_OPTION_MENU (ptr));\n   menuitem = gtk_menu_item_new_with_label (label);\n   gtk_menu_insert (GTK_MENU (menu), menuitem, index);\n   gtk_widget_show (menuitem);\n \n   connect_choice_item_selectable_hook (env, obj, GTK_ITEM (menuitem), label);\n \n+  /* If we just added the first element select it.\n+     If we added at of below the currently selected position make\n+     the first item the selected one. */  \n   if (need_set_history)\n     gtk_option_menu_set_history (GTK_OPTION_MENU (ptr), 0);\n \n@@ -151,23 +162,54 @@ Java_gnu_java_awt_peer_gtk_GtkChoicePeer_add\n }\n \n JNIEXPORT void JNICALL \n-Java_gnu_java_awt_peer_gtk_GtkChoicePeer_remove \n+Java_gnu_java_awt_peer_gtk_GtkChoicePeer_nativeRemove \n   (JNIEnv *env, jobject obj, jint index)\n {\n   void *ptr;\n   GtkContainer *menu;\n   GtkWidget *menuitem;\n   GList *children;\n+  int need_set_history = 0;\n+  int i, from, to;\n \n   ptr = NSA_GET_PTR (env, obj);\n \n   gdk_threads_enter ();\n \n   menu = GTK_CONTAINER (gtk_option_menu_get_menu (GTK_OPTION_MENU (ptr)));\n   children = gtk_container_children (menu);\n-  menuitem = GTK_WIDGET (g_list_nth (children, index)->data);\n-  gtk_container_remove (menu, menuitem);\n-  gtk_widget_destroy (menuitem);\n+\n+  if (index == -1)\n+    {\n+      /* Remove all elements (removeAll) */\n+      from = g_list_length (children) - 1;\n+      to = 0;\n+\n+      /* Select the first item to prevent spurious activate signals */\n+      gtk_option_menu_set_history (GTK_OPTION_MENU (ptr), 0);\n+    }\n+  else\n+    {\n+      /* Remove the specific index element */\n+      from = index;\n+      to = index;\n+\n+      /* Are we removing the currently selected element? */\n+      if (gtk_option_menu_get_history (GTK_OPTION_MENU (ptr)) == index)\n+        need_set_history = 1;\n+    }\n+\n+  for (i = from; i >= to; i--)\n+    {\n+      menuitem = GTK_WIDGET (g_list_nth (children, i)->data);\n+      gtk_container_remove (menu, menuitem);\n+      gtk_widget_destroy (menuitem);\n+    }\n+\n+  /* If we just removed the currently selected element and there are\n+     still elements left in the list, make the first item the selected one. */  \n+  if (need_set_history && gtk_container_children (menu))\n+    gtk_option_menu_set_history (GTK_OPTION_MENU (ptr), 0);\n \n   gdk_threads_leave ();\n }\n@@ -185,6 +227,24 @@ Java_gnu_java_awt_peer_gtk_GtkChoicePeer_select\n   gdk_threads_leave ();\n }\n \n+JNIEXPORT jint JNICALL \n+Java_gnu_java_awt_peer_gtk_GtkChoicePeer_getHistory \n+  (JNIEnv *env, jobject obj)\n+{\n+  void *ptr;\n+  int index;\n+\n+  ptr = NSA_GET_PTR (env, obj);\n+\n+  gdk_threads_enter ();\n+\n+  index = gtk_option_menu_get_history (GTK_OPTION_MENU (ptr));\n+\n+  gdk_threads_leave ();\n+\n+  return index;\n+}\n+\n static void\n item_activate (GtkItem *item __attribute__((unused)),\n \t       struct item_event_hook_info *ie)\n@@ -205,7 +265,7 @@ item_removed (gpointer data,\n {\n   struct item_event_hook_info *ie = data;\n \n-  free (ie->label);\n+  free ((void *) ie->label);\n   free (ie);\n }\n "}]}