{"sha": "25332d2325c720f584444c3858efdb85b8a3c06a", "node_id": "C_kwDOANBUbNoAKDI1MzMyZDIzMjVjNzIwZjU4NDQ0NGMzODU4ZWZkYjg1YjhhM2MwNmE", "commit": {"author": {"name": "Richard Sandiford", "email": "richard.sandiford@arm.com", "date": "2022-02-16T10:21:13Z"}, "committer": {"name": "Richard Sandiford", "email": "richard.sandiford@arm.com", "date": "2022-02-16T10:21:13Z"}, "message": "aarch64: Extend PR100056 patterns to +\n\npr100056.c contains things like:\n\n    int\n    or_shift_u3a (unsigned i)\n    {\n      i &= 7;\n      return i | (i << 11);\n    }\n\nAfter g:96146e61cd7aee62c21c2845916ec42152918ab7, the preferred\ngimple representation of this is a multiplication:\n\n  i_2 = i_1(D) & 7;\n  _5 = i_2 * 2049;\n\nExpand then open-codes the multiplication back to individual shifts,\nbut (of course) it uses + rather than | to combine the shifts.\nThis means that we end up with the RTL equivalent of:\n\n  i + (i << 11)\n\nI wondered about canonicalising the + to | (*back* to | in this case)\nwhen the operands have no set bits in common and when one of the\noperands is &, | or ^, but that didn't seem to be a popular idea when\nI asked on IRC.  The feeling seemed to be that + is inherently simpler\nthan |, so we shouldn't be \u201csimplifying\u201d the other way.\n\nThis patch therefore adjusts the PR100056 patterns to handle +\nas well as |, in cases where the operands are provably disjoint.\n\nFor:\n\n    int\n    or_shift_u8 (unsigned char i)\n    {\n      return i | (i << 11);\n    }\n\nthe instructions:\n\n    2: r95:SI=zero_extend(x0:QI)\n      REG_DEAD x0:QI\n    7: r98:SI=r95:SI<<0xb\n\nare combined into:\n\n    (parallel [\n        (set (reg:SI 98)\n             (and:SI (ashift:SI (reg:SI 0 x0 [ i ])\n                                (const_int 11 [0xb]))\n                     (const_int 522240 [0x7f800])))\n        (set (reg/v:SI 95 [ i ])\n             (zero_extend:SI (reg:QI 0 x0 [ i ])))\n    ])\n\nwhich fails to match, but which is then split into its individual\n(independent) sets.  Later the zero_extend is combined with the add\nto get an ADD UXTB:\n\n    (set (reg:SI 99)\n         (plus:SI (zero_extend:SI (reg:QI 0 x0 [ i ]))\n                  (reg:SI 98)))\n\nThis means that there is never a 3-insn combo to match the split\nagainst.  The end result is therefore:\n\n        ubfiz   w1, w0, 11, 8\n        add     w0, w1, w0, uxtb\n\nThis is a bit redundant, since it's doing the zero_extend twice.\nIt is at least 2 instructions though, rather than the 3 that we\nhad before the original patch for PR100056.  or_shift_u8_asm is\naffected similarly.\n\nThe net effect is that we do still have 2 UBFIZs, but we're at\nleast back down to 2 instructions per function, as for GCC 11.\nI think that's good enough for now.\n\nThere are probably other instructions that should be extended\nto support + as well as | (e.g. the EXTR ones), but those aren't\nregressions and so are GCC 13 material.\n\ngcc/\n\tPR target/100056\n\t* config/aarch64/iterators.md (LOGICAL_OR_PLUS): New iterator.\n\t* config/aarch64/aarch64.md: Extend the PR100056 patterns\n\tto handle plus in the same way as ior, if the operands have\n\tno set bits in common.\n\ngcc/testsuite/\n\tPR target/100056\n\t* gcc.target/aarch64/pr100056.c: XFAIL the original UBFIZ test\n\tand instead expect two UBFIZs + two ADD UXTBs.", "tree": {"sha": "6603464d80870189693a11a876a0a48ae6d808fd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6603464d80870189693a11a876a0a48ae6d808fd"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/25332d2325c720f584444c3858efdb85b8a3c06a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/25332d2325c720f584444c3858efdb85b8a3c06a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/25332d2325c720f584444c3858efdb85b8a3c06a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/25332d2325c720f584444c3858efdb85b8a3c06a/comments", "author": {"login": "rsandifo-arm", "id": 28043039, "node_id": "MDQ6VXNlcjI4MDQzMDM5", "avatar_url": "https://avatars.githubusercontent.com/u/28043039?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo-arm", "html_url": "https://github.com/rsandifo-arm", "followers_url": "https://api.github.com/users/rsandifo-arm/followers", "following_url": "https://api.github.com/users/rsandifo-arm/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo-arm/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo-arm/orgs", "repos_url": "https://api.github.com/users/rsandifo-arm/repos", "events_url": "https://api.github.com/users/rsandifo-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo-arm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rsandifo-arm", "id": 28043039, "node_id": "MDQ6VXNlcjI4MDQzMDM5", "avatar_url": "https://avatars.githubusercontent.com/u/28043039?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo-arm", "html_url": "https://github.com/rsandifo-arm", "followers_url": "https://api.github.com/users/rsandifo-arm/followers", "following_url": "https://api.github.com/users/rsandifo-arm/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo-arm/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo-arm/orgs", "repos_url": "https://api.github.com/users/rsandifo-arm/repos", "events_url": "https://api.github.com/users/rsandifo-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo-arm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d75691877c4a7521a995d2601021fcaf30f65d94", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d75691877c4a7521a995d2601021fcaf30f65d94", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d75691877c4a7521a995d2601021fcaf30f65d94"}], "stats": {"total": 40, "additions": 29, "deletions": 11}, "files": [{"sha": "590918464b88724819b8a78c6622fe8fe20d7ece", "filename": "gcc/config/aarch64/aarch64.md", "status": "modified", "additions": 23, "deletions": 10, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/25332d2325c720f584444c3858efdb85b8a3c06a/gcc%2Fconfig%2Faarch64%2Faarch64.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/25332d2325c720f584444c3858efdb85b8a3c06a/gcc%2Fconfig%2Faarch64%2Faarch64.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64.md?ref=25332d2325c720f584444c3858efdb85b8a3c06a", "patch": "@@ -4558,7 +4558,7 @@\n \n (define_split\n   [(set (match_operand:GPI 0 \"register_operand\")\n-\t(LOGICAL:GPI\n+\t(LOGICAL_OR_PLUS:GPI\n \t  (and:GPI (ashift:GPI (match_operand:GPI 1 \"register_operand\")\n \t\t\t       (match_operand:QI 2 \"aarch64_shift_imm_<mode>\"))\n \t\t   (match_operand:GPI 3 \"const_int_operand\"))\n@@ -4571,16 +4571,23 @@\n \t   && REGNO (operands[1]) == REGNO (operands[4])))\n    && (trunc_int_for_mode (GET_MODE_MASK (GET_MODE (operands[4]))\n \t\t\t   << INTVAL (operands[2]), <MODE>mode)\n-       == INTVAL (operands[3]))\"\n+       == INTVAL (operands[3]))\n+   && (<CODE> != PLUS\n+       || (GET_MODE_MASK (GET_MODE (operands[4]))\n+\t   & INTVAL (operands[3])) == 0)\"\n   [(set (match_dup 5) (zero_extend:GPI (match_dup 4)))\n-   (set (match_dup 0) (LOGICAL:GPI (ashift:GPI (match_dup 5) (match_dup 2))\n-\t\t\t\t   (match_dup 5)))]\n-  \"operands[5] = gen_reg_rtx (<MODE>mode);\"\n+   (set (match_dup 0) (match_dup 6))]\n+  {\n+    operands[5] = gen_reg_rtx (<MODE>mode);\n+    rtx shift = gen_rtx_ASHIFT (<MODE>mode, operands[5], operands[2]);\n+    rtx_code new_code = (<CODE> == PLUS ? IOR : <CODE>);\n+    operands[6] = gen_rtx_fmt_ee (new_code, <MODE>mode, shift, operands[5]);\n+  }\n )\n \n (define_split\n   [(set (match_operand:GPI 0 \"register_operand\")\n-\t(LOGICAL:GPI\n+\t(LOGICAL_OR_PLUS:GPI\n \t  (and:GPI (ashift:GPI (match_operand:GPI 1 \"register_operand\")\n \t\t\t       (match_operand:QI 2 \"aarch64_shift_imm_<mode>\"))\n \t\t   (match_operand:GPI 4 \"const_int_operand\"))\n@@ -4589,11 +4596,17 @@\n    && pow2_or_zerop (UINTVAL (operands[3]) + 1)\n    && (trunc_int_for_mode (UINTVAL (operands[3])\n \t\t\t   << INTVAL (operands[2]), <MODE>mode)\n-       == INTVAL (operands[4]))\"\n+       == INTVAL (operands[4]))\n+   && (<CODE> != PLUS\n+       || (INTVAL (operands[4]) & INTVAL (operands[3])) == 0)\"\n   [(set (match_dup 5) (and:GPI (match_dup 1) (match_dup 3)))\n-   (set (match_dup 0) (LOGICAL:GPI (ashift:GPI (match_dup 5) (match_dup 2))\n-\t\t\t\t   (match_dup 5)))]\n-  \"operands[5] = gen_reg_rtx (<MODE>mode);\"\n+   (set (match_dup 0) (match_dup 6))]\n+  {\n+    operands[5] = gen_reg_rtx (<MODE>mode);\n+    rtx shift = gen_rtx_ASHIFT (<MODE>mode, operands[5], operands[2]);\n+    rtx_code new_code = (<CODE> == PLUS ? IOR : <CODE>);\n+    operands[6] = gen_rtx_fmt_ee (new_code, <MODE>mode, shift, operands[5]);\n+  }\n )\n \n (define_split"}, {"sha": "e72fdf35a82e596844bbdbbcb23a13f763aac775", "filename": "gcc/config/aarch64/iterators.md", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/25332d2325c720f584444c3858efdb85b8a3c06a/gcc%2Fconfig%2Faarch64%2Fiterators.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/25332d2325c720f584444c3858efdb85b8a3c06a/gcc%2Fconfig%2Faarch64%2Fiterators.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Fiterators.md?ref=25332d2325c720f584444c3858efdb85b8a3c06a", "patch": "@@ -2122,6 +2122,9 @@\n ;; Code iterator for logical operations\n (define_code_iterator LOGICAL [and ior xor])\n \n+;; LOGICAL with plus, for when | gets converted to +.\n+(define_code_iterator LOGICAL_OR_PLUS [and ior xor plus])\n+\n ;; LOGICAL without AND.\n (define_code_iterator LOGICAL_OR [ior xor])\n "}, {"sha": "70499772d2857ccc5d05cdda28587ff0ae6b65b3", "filename": "gcc/testsuite/gcc.target/aarch64/pr100056.c", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/25332d2325c720f584444c3858efdb85b8a3c06a/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fpr100056.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/25332d2325c720f584444c3858efdb85b8a3c06a/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fpr100056.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fpr100056.c?ref=25332d2325c720f584444c3858efdb85b8a3c06a", "patch": "@@ -1,7 +1,9 @@\n /* PR target/100056 */\n /* { dg-do compile } */\n /* { dg-options \"-O2\" } */\n-/* { dg-final { scan-assembler-not {\\t[us]bfiz\\tw[0-9]+, w[0-9]+, 11} } } */\n+/* { dg-final { scan-assembler-not {\\t[us]bfiz\\tw[0-9]+, w[0-9]+, 11} { xfail *-*-* } } } */\n+/* { dg-final { scan-assembler-times {\\t[us]bfiz\\tw[0-9]+, w[0-9]+, 11} 2 } } */\n+/* { dg-final { scan-assembler-times {\\tadd\\tw[0-9]+, w[0-9]+, w[0-9]+, uxtb\\n} 2 } } */\n \n int\n or_shift_u8 (unsigned char i)"}]}