{"sha": "80d3417b69d86224e46c15a3ee0692de0bc2195f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODBkMzQxN2I2OWQ4NjIyNGU0NmMxNWEzZWUwNjkyZGUwYmMyMTk1Zg==", "commit": {"author": {"name": "Ian Bolton", "email": "ian.bolton@arm.com", "date": "2014-04-22T09:50:33Z"}, "committer": {"name": "Ian Bolton", "email": "ibolton@gcc.gnu.org", "date": "2014-04-22T09:50:33Z"}, "message": "AArch32 Support ORN for DIMode\n\n[gcc]\n\t* config/arm/thumb2.md (*iordi_notdi_di): New pattern.\n\t(*iordi_notzesidi_di): Likewise.\n\t(*iordi_notsesidi_di): Likewise.\n\n[gcc/testsuite]\n\t* gcc.target/arm/iordi_notdi-1.c: New test.\n\nFrom-SVN: r209613", "tree": {"sha": "f9c2866b717dc22f9804182f8ee1daf06f0b69b9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f9c2866b717dc22f9804182f8ee1daf06f0b69b9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/80d3417b69d86224e46c15a3ee0692de0bc2195f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/80d3417b69d86224e46c15a3ee0692de0bc2195f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/80d3417b69d86224e46c15a3ee0692de0bc2195f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/80d3417b69d86224e46c15a3ee0692de0bc2195f/comments", "author": null, "committer": null, "parents": [{"sha": "46fbb3ebaee00772935fff931e2edf31f10306e4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/46fbb3ebaee00772935fff931e2edf31f10306e4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/46fbb3ebaee00772935fff931e2edf31f10306e4"}], "stats": {"total": 137, "additions": 137, "deletions": 0}, "files": [{"sha": "67f3589a246718ca35ed81e52ec8bb905c4b8bfc", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/80d3417b69d86224e46c15a3ee0692de0bc2195f/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/80d3417b69d86224e46c15a3ee0692de0bc2195f/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=80d3417b69d86224e46c15a3ee0692de0bc2195f", "patch": "@@ -1,3 +1,9 @@\n+2014-04-22  Ian Bolton  <ian.bolton@arm.com>\n+\n+\t* config/arm/thumb2.md (*iordi_notdi_di): New pattern.\n+\t(*iordi_notzesidi_di): Likewise.\n+\t(*iordi_notsesidi_di): Likewise.\n+\n 2014-04-22  Ian Bolton  <ian.bolton@arm.com>\n \n \t* config/arm/arm-protos.h (tune_params): New struct members."}, {"sha": "467c619b65de03bf7b0a2114785121ac95b8e8d8", "filename": "gcc/config/arm/thumb2.md", "status": "modified", "additions": 73, "deletions": 0, "changes": 73, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/80d3417b69d86224e46c15a3ee0692de0bc2195f/gcc%2Fconfig%2Farm%2Fthumb2.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/80d3417b69d86224e46c15a3ee0692de0bc2195f/gcc%2Fconfig%2Farm%2Fthumb2.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Fthumb2.md?ref=80d3417b69d86224e46c15a3ee0692de0bc2195f", "patch": "@@ -1370,6 +1370,79 @@\n    (set_attr \"type\" \"alu_reg\")]\n )\n \n+; Constants for op 2 will never be given to these patterns.\n+(define_insn_and_split \"*iordi_notdi_di\"\n+  [(set (match_operand:DI 0 \"s_register_operand\" \"=&r,&r\")\n+\t(ior:DI (not:DI (match_operand:DI 1 \"s_register_operand\" \"0,r\"))\n+\t\t(match_operand:DI 2 \"s_register_operand\" \"r,0\")))]\n+  \"TARGET_THUMB2\"\n+  \"#\"\n+  \"TARGET_THUMB2 && reload_completed\"\n+  [(set (match_dup 0) (ior:SI (not:SI (match_dup 1)) (match_dup 2)))\n+   (set (match_dup 3) (ior:SI (not:SI (match_dup 4)) (match_dup 5)))]\n+  \"\n+  {\n+    operands[3] = gen_highpart (SImode, operands[0]);\n+    operands[0] = gen_lowpart (SImode, operands[0]);\n+    operands[4] = gen_highpart (SImode, operands[1]);\n+    operands[1] = gen_lowpart (SImode, operands[1]);\n+    operands[5] = gen_highpart (SImode, operands[2]);\n+    operands[2] = gen_lowpart (SImode, operands[2]);\n+  }\"\n+  [(set_attr \"length\" \"8\")\n+   (set_attr \"predicable\" \"yes\")\n+   (set_attr \"predicable_short_it\" \"no\")\n+   (set_attr \"type\" \"multiple\")]\n+)\n+\n+(define_insn_and_split \"*iordi_notzesidi_di\"\n+  [(set (match_operand:DI 0 \"s_register_operand\" \"=&r,&r\")\n+\t(ior:DI (not:DI (zero_extend:DI\n+\t\t\t (match_operand:SI 2 \"s_register_operand\" \"r,r\")))\n+\t\t(match_operand:DI 1 \"s_register_operand\" \"0,?r\")))]\n+  \"TARGET_THUMB2\"\n+  \"#\"\n+  ; (not (zero_extend...)) means operand0 will always be 0xffffffff\n+  \"TARGET_THUMB2 && reload_completed\"\n+  [(set (match_dup 0) (ior:SI (not:SI (match_dup 2)) (match_dup 1)))\n+   (set (match_dup 3) (const_int -1))]\n+  \"\n+  {\n+    operands[3] = gen_highpart (SImode, operands[0]);\n+    operands[0] = gen_lowpart (SImode, operands[0]);\n+    operands[1] = gen_lowpart (SImode, operands[1]);\n+  }\"\n+  [(set_attr \"length\" \"4,8\")\n+   (set_attr \"predicable\" \"yes\")\n+   (set_attr \"predicable_short_it\" \"no\")\n+   (set_attr \"type\" \"multiple\")]\n+)\n+\n+(define_insn_and_split \"*iordi_notsesidi_di\"\n+  [(set (match_operand:DI 0 \"s_register_operand\" \"=&r,&r\")\n+\t(ior:DI (not:DI (sign_extend:DI\n+\t\t\t (match_operand:SI 2 \"s_register_operand\" \"r,r\")))\n+\t\t(match_operand:DI 1 \"s_register_operand\" \"0,r\")))]\n+  \"TARGET_THUMB2\"\n+  \"#\"\n+  \"TARGET_THUMB2 && reload_completed\"\n+  [(set (match_dup 0) (ior:SI (not:SI (match_dup 2)) (match_dup 1)))\n+   (set (match_dup 3) (ior:SI (not:SI\n+\t\t\t\t(ashiftrt:SI (match_dup 2) (const_int 31)))\n+\t\t\t       (match_dup 4)))]\n+  \"\n+  {\n+    operands[3] = gen_highpart (SImode, operands[0]);\n+    operands[0] = gen_lowpart (SImode, operands[0]);\n+    operands[4] = gen_highpart (SImode, operands[1]);\n+    operands[1] = gen_lowpart (SImode, operands[1]);\n+  }\"\n+  [(set_attr \"length\" \"8\")\n+   (set_attr \"predicable\" \"yes\")\n+   (set_attr \"predicable_short_it\" \"no\")\n+   (set_attr \"type\" \"multiple\")]\n+)\n+\n (define_insn \"*orsi_notsi_si\"\n   [(set (match_operand:SI 0 \"s_register_operand\" \"=r\")\n \t(ior:SI (not:SI (match_operand:SI 2 \"s_register_operand\" \"r\"))"}, {"sha": "8fa06114854349355064bc3df045cbe2bc8253e5", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/80d3417b69d86224e46c15a3ee0692de0bc2195f/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/80d3417b69d86224e46c15a3ee0692de0bc2195f/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=80d3417b69d86224e46c15a3ee0692de0bc2195f", "patch": "@@ -1,3 +1,7 @@\n+2014-04-22  Ian Bolton  <ian.bolton@arm.com>\n+\n+\t* gcc.target/arm/iordi_notdi-1.c: New test.\n+\n 2014-04-22  Alex Velenko  <Alex.Velenko@arm.com>\n \n \t* gcc.target/aarch64/vrnd_f64_1.c : New file."}, {"sha": "cda9c0e2ff6da9f7d9b1e16ab9ab69fb3ba84627", "filename": "gcc/testsuite/gcc.target/arm/iordi_notdi-1.c", "status": "added", "additions": 54, "deletions": 0, "changes": 54, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/80d3417b69d86224e46c15a3ee0692de0bc2195f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fiordi_notdi-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/80d3417b69d86224e46c15a3ee0692de0bc2195f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fiordi_notdi-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fiordi_notdi-1.c?ref=80d3417b69d86224e46c15a3ee0692de0bc2195f", "patch": "@@ -0,0 +1,54 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -fno-inline --save-temps\" } */\n+\n+extern void abort (void);\n+\n+typedef long long s64int;\n+typedef int s32int;\n+typedef unsigned long long u64int;\n+typedef unsigned int u32int;\n+\n+s64int\n+iordi_notdi (s64int a, s64int b)\n+{\n+  return (a | ~b);\n+}\n+\n+s64int\n+iordi_notzesidi (s64int a, u32int b)\n+{\n+  return (a | ~(u64int) b);\n+}\n+\n+s64int\n+iordi_notsesidi (s64int a, s32int b)\n+{\n+  return (a | ~(s64int) b);\n+}\n+\n+int main ()\n+{\n+  s64int a64 = 0xdeadbeef00000000ll;\n+  s64int b64 = 0x000000004f4f0112ll;\n+\n+  u32int c32 = 0x01124f4f;\n+  s32int d32 = 0xabbaface;\n+\n+  s64int z = iordi_notdi (a64, b64);\n+  if (z != 0xffffffffb0b0feedll)\n+    abort ();\n+\n+  z = iordi_notzesidi (a64, c32);\n+  if (z != 0xfffffffffeedb0b0ll)\n+    abort ();\n+\n+  z = iordi_notsesidi (a64, d32);\n+  if (z != 0xdeadbeef54450531ll)\n+    abort ();\n+\n+  return 0;\n+}\n+\n+/* { dg-final { scan-assembler-times \"orn\\t\" 5 { target arm_thumb2 } } } */\n+\n+/* { dg-final { cleanup-saved-temps } } */"}]}