{"sha": "c0e22534e4977ab263f6ae40b70d8bd76334665c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzBlMjI1MzRlNDk3N2FiMjYzZjZhZTQwYjcwZDhiZDc2MzM0NjY1Yw==", "commit": {"author": {"name": "Nathan Sidwell", "email": "nathan@codesourcery.com", "date": "2005-10-14T12:55:33Z"}, "committer": {"name": "Nathan Sidwell", "email": "nathan@gcc.gnu.org", "date": "2005-10-14T12:55:33Z"}, "message": "re PR c++/22551 ([ICE] in tree_low_cst, at tree.c:3843)\n\n.:\tPR c++/22551\n\t* c-common.c (c_add_case_label): Clear LOW_VALUE and HIGH_VALUE's\n\toverflow flags.  Refactor some conditionals.\ntestsuite:\n\tPR c++/22551\n\t* g++.dg/other/switch2.C: New.\n\nFrom-SVN: r105405", "tree": {"sha": "95318492904cbe890293b0e21d33b89a4257665b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/95318492904cbe890293b0e21d33b89a4257665b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c0e22534e4977ab263f6ae40b70d8bd76334665c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c0e22534e4977ab263f6ae40b70d8bd76334665c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c0e22534e4977ab263f6ae40b70d8bd76334665c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c0e22534e4977ab263f6ae40b70d8bd76334665c/comments", "author": null, "committer": null, "parents": [{"sha": "771c0562b56432ea64558329688a8281bc1e9996", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/771c0562b56432ea64558329688a8281bc1e9996", "html_url": "https://github.com/Rust-GCC/gccrs/commit/771c0562b56432ea64558329688a8281bc1e9996"}], "stats": {"total": 62, "additions": 50, "deletions": 12}, "files": [{"sha": "b1746e5bdfd0127aa1e34aaf5ea1b98b2f21e6fd", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c0e22534e4977ab263f6ae40b70d8bd76334665c/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c0e22534e4977ab263f6ae40b70d8bd76334665c/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=c0e22534e4977ab263f6ae40b70d8bd76334665c", "patch": "@@ -1,3 +1,9 @@\n+2005-10-14  Nathan Sidwell  <nathan@codesourcery.com>\n+\n+\tPR c++/22551\n+\t* c-common.c (c_add_case_label): Clear LOW_VALUE and HIGH_VALUE's\n+\toverflow flags.  Refactor some conditionals.\n+\n 2005-10-13  Andrew Pinski  <pinskia@physics.uc.edu>\n \n \tPR tree-opt/21304"}, {"sha": "c5ba85e3d0a25caa7907528bd2ac4885ce9bfe9b", "filename": "gcc/c-common.c", "status": "modified", "additions": 19, "deletions": 12, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c0e22534e4977ab263f6ae40b70d8bd76334665c/gcc%2Fc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c0e22534e4977ab263f6ae40b70d8bd76334665c/gcc%2Fc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-common.c?ref=c0e22534e4977ab263f6ae40b70d8bd76334665c", "patch": "@@ -3588,25 +3588,32 @@ c_add_case_label (splay_tree cases, tree cond, tree orig_type,\n     {\n       low_value = check_case_value (low_value);\n       low_value = convert_and_check (type, low_value);\n+      if (low_value == error_mark_node)\n+\tgoto error_out;\n+      /* Do not propagate any overflow information past this point.\n+\t It is safe to just clear the flags, as any constants with\n+\t them set will not be shared.  */\n+      TREE_CONSTANT_OVERFLOW (low_value) = TREE_OVERFLOW (low_value) = 0;\n     }\n   if (high_value)\n     {\n       high_value = check_case_value (high_value);\n       high_value = convert_and_check (type, high_value);\n+      if (high_value == error_mark_node)\n+\tgoto error_out;\n+      TREE_CONSTANT_OVERFLOW (high_value) = TREE_OVERFLOW (high_value) = 0;\n     }\n \n-  /* If an error has occurred, bail out now.  */\n-  if (low_value == error_mark_node || high_value == error_mark_node)\n-    goto error_out;\n-\n-  /* If the LOW_VALUE and HIGH_VALUE are the same, then this isn't\n-     really a case range, even though it was written that way.  Remove\n-     the HIGH_VALUE to simplify later processing.  */\n-  if (tree_int_cst_equal (low_value, high_value))\n-    high_value = NULL_TREE;\n-  if (low_value && high_value\n-      && !tree_int_cst_lt (low_value, high_value))\n-    warning (0, \"empty range specified\");\n+  if (low_value && high_value)\n+    {\n+      /* If the LOW_VALUE and HIGH_VALUE are the same, then this isn't\n+         really a case range, even though it was written that way.\n+         Remove the HIGH_VALUE to simplify later processing.  */\n+      if (tree_int_cst_equal (low_value, high_value))\n+\thigh_value = NULL_TREE;\n+      else if (!tree_int_cst_lt (low_value, high_value))\n+\twarning (0, \"empty range specified\");\n+    }\n \n   /* See if the case is in range of the type of the original testing\n      expression.  If both low_value and high_value are out of range,"}, {"sha": "a0ee3a0baf4dd0a34c259f55dae2d2f0017037bb", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c0e22534e4977ab263f6ae40b70d8bd76334665c/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c0e22534e4977ab263f6ae40b70d8bd76334665c/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=c0e22534e4977ab263f6ae40b70d8bd76334665c", "patch": "@@ -1,5 +1,8 @@\n 2005-10-14  Nathan Sidwell  <nathan@codesourcery.com>\n \n+\tPR c++/22551\n+\t* g++.dg/other/switch2.C: New.\n+\n \tPR c++/23984\n \t* g++.dg/init/ctor7.C: New.\n "}, {"sha": "a2352c0acbc9c8ed5bc106ae253cc4e4ee32f274", "filename": "gcc/testsuite/g++.dg/other/switch2.C", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c0e22534e4977ab263f6ae40b70d8bd76334665c/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Fswitch2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c0e22534e4977ab263f6ae40b70d8bd76334665c/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Fswitch2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Fswitch2.C?ref=c0e22534e4977ab263f6ae40b70d8bd76334665c", "patch": "@@ -0,0 +1,22 @@\n+// Copyright (C) 2005 Free Software Foundation, Inc.\n+// Contributed by Nathan Sidwell 13 Oct 2005 <nathan@codesourcery.com>\n+\n+// PR 22551:ICE\n+// Origin:  Johnny Casey <emailwastefilter-bugzillagccorg@yahoo.com>\n+\n+const int B = 0x80000000;\n+\n+#define b(x) (B + x)\n+\n+\n+int Foo (int error)\n+{\n+  switch (error)\n+  {\n+  case b (1): return 0; // { dg-error \"overflow\" \"\" }\n+  case b (2): return 0; // { dg-error \"overflow\" \"\" }\n+  case b (3): return 0; // { dg-error \"overflow\" \"\" }\n+  case b (4): return 0; // { dg-error \"overflow\" \"\" }\n+  case b (5): return 0; // { dg-error \"overflow\" \"\" }\n+ }\n+}"}]}