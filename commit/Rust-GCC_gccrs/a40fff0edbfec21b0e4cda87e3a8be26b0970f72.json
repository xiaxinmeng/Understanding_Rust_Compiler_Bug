{"sha": "a40fff0edbfec21b0e4cda87e3a8be26b0970f72", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTQwZmZmMGVkYmZlYzIxYjBlNGNkYTg3ZTNhOGJlMjZiMDk3MGY3Mg==", "commit": {"author": {"name": "Benjamin Kosnik", "email": "bkoz@gcc.gnu.org", "date": "2008-12-02T04:55:54Z"}, "committer": {"name": "Benjamin Kosnik", "email": "bkoz@gcc.gnu.org", "date": "2008-12-02T04:55:54Z"}, "message": "re PR libstdc++/38080 (dead links in libstdc++ headers)\n\n2008-12-01  Benjamin Kosnik  <bkoz@redhat.com>\n\n\tPR libstdc++/38080\n\t* include/std/iostream: Correct URL.\n\t* include/std/streambuf: Same.\n\t* include/std/bitset: Same.\n\t* include/std/iosfwd: Same.\n\t* include/std/fstream: Same.\n\t* include/std/istream: Same.\n\t* include/std/ostream: Same.\n\t* include/std/sstream: Same.\n\t* include/bits/basic_ios.h: Same.\n\t* include/bits/stl_map.h: Same.\n\t* include/bits/stl_set.h: Same.\n\t* include/bits/stl_multimap.h: Same.\n\t* include/bits/ios_base.h: Same.\n\t* include/bits/stl_multiset.h: Same.\n\t* include/bits/char_traits.h: Same.\n\t* include/bits/stl_relops.h: Same.\n\t* testsuite/27_io/ios_base/cons/assign_neg.cc: Adjust line numbers.\n\t* testsuite/27_io/ios_base/cons/copy_neg.cc: Ditto.\n\nFrom-SVN: r142344", "tree": {"sha": "850e64ca3e5a8917a1182c4ba48f41f334963131", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/850e64ca3e5a8917a1182c4ba48f41f334963131"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a40fff0edbfec21b0e4cda87e3a8be26b0970f72", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a40fff0edbfec21b0e4cda87e3a8be26b0970f72", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a40fff0edbfec21b0e4cda87e3a8be26b0970f72", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a40fff0edbfec21b0e4cda87e3a8be26b0970f72/comments", "author": null, "committer": null, "parents": [{"sha": "e03dd84a0dc2b8a3b9a2c042c6eae1b7492a12b4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e03dd84a0dc2b8a3b9a2c042c6eae1b7492a12b4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e03dd84a0dc2b8a3b9a2c042c6eae1b7492a12b4"}], "stats": {"total": 230, "additions": 124, "deletions": 106}, "files": [{"sha": "ee5100f546c1e7e189b7d7896df2785efe0901f7", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 88, "deletions": 66, "changes": 154, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a40fff0edbfec21b0e4cda87e3a8be26b0970f72/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a40fff0edbfec21b0e4cda87e3a8be26b0970f72/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=a40fff0edbfec21b0e4cda87e3a8be26b0970f72", "patch": "@@ -1,3 +1,25 @@\n+2008-12-01  Benjamin Kosnik  <bkoz@redhat.com>\n+\n+\tPR libstdc++/38080\n+\t* include/std/iostream: Correct URL.\n+\t* include/std/streambuf: Same.\n+\t* include/std/bitset: Same.\n+\t* include/std/iosfwd: Same.\n+\t* include/std/fstream: Same.\n+\t* include/std/istream: Same.\n+\t* include/std/ostream: Same.\n+\t* include/std/sstream: Same.\n+\t* include/bits/basic_ios.h: Same.\n+\t* include/bits/stl_map.h: Same.\n+\t* include/bits/stl_set.h: Same.\n+\t* include/bits/stl_multimap.h: Same.\n+\t* include/bits/ios_base.h: Same.\n+\t* include/bits/stl_multiset.h: Same.\n+\t* include/bits/char_traits.h: Same.\n+\t* include/bits/stl_relops.h: Same.\n+\t* testsuite/27_io/ios_base/cons/assign_neg.cc: Adjust line numbers.\n+\t* testsuite/27_io/ios_base/cons/copy_neg.cc: Ditto.\n+\n 2008-11-26  Janis Johnson  <janis187@us.ibm.com>\n \n \tPR testsuite/28870\n@@ -125,45 +147,45 @@\n \t(_Fwd_list_node<>): Likewise.\n \t(_Fwd_list_iterator<>): Likewise.\n \t(_Fwd_list_const_iterator<>): Likewise.\n-\t(_Fwd_list_node_base::_M_next, _M_transfer_after, _M_reverse_after): \n+\t(_Fwd_list_node_base::_M_next, _M_transfer_after, _M_reverse_after):\n \tUse _Alloc<_Tp>::pointer.\n \t(_Fwd_list_iterator<>::_M_node): Use _Node_base::_Pointer.\n-\t(_Fwd_list_base<>::_M_get_node, _M_create_node, _M_create_node, \n+\t(_Fwd_list_base<>::_M_get_node, _M_create_node, _M_create_node,\n \t_M_insert_after, _M_put_node, _M_erase_after): Likewise.\n \t(_Fwd_list_const_iterator<>::_M_node): use _Node_base::_Const_pointer.\n \t(forward_list<>): Use __static_pointer_cast in place of static_cast,\n \tand __const_pointer_cast in place of const_cast.\n \t* include/bits/forward_list.tcc\n-\t(_Fwd_list_node<>::_M_sort_after): Using _Pointer typedefs in place \n+\t(_Fwd_list_node<>::_M_sort_after): Using _Pointer typedefs in place\n \tof standard pointers, __static_pointer_cast in place of static_cast.\n \t(_Fwd_list_base<>::_Fwd_list_base, _M_insert_after, _M_erase_after):\n \tLikewise.\n-\t(forward_list<>::_M_initialize_dispatch, _M_fill_initialize, \n+\t(forward_list<>::_M_initialize_dispatch, _M_fill_initialize,\n \tsplice_after, remove, remove_if, merge): Likewise.\n \t* testsuite/23_containers/forward_list/ext_pointer/modifiers/1.cc: New.\n-\t* testsuite/23_containers/forward_list/ext_pointer/modifiers/2.cc: \n+\t* testsuite/23_containers/forward_list/ext_pointer/modifiers/2.cc:\n \tLikewise.\n-\t* testsuite/23_containers/forward_list/ext_pointer/modifiers/3.cc: \n+\t* testsuite/23_containers/forward_list/ext_pointer/modifiers/3.cc:\n \tLikewise.\n-\t* testsuite/23_containers/forward_list/ext_pointer/modifiers/4.cc: \n+\t* testsuite/23_containers/forward_list/ext_pointer/modifiers/4.cc:\n \tLikewise.\n-\t* testsuite/23_containers/forward_list/ext_pointer/modifiers/5.cc: \n+\t* testsuite/23_containers/forward_list/ext_pointer/modifiers/5.cc:\n \tLikewise.\n-\t* testsuite/23_containers/forward_list/ext_pointer/operations/1.cc: \n+\t* testsuite/23_containers/forward_list/ext_pointer/operations/1.cc:\n \tLikewise.\n-\t* testsuite/23_containers/forward_list/ext_pointer/operations/2.cc: \n+\t* testsuite/23_containers/forward_list/ext_pointer/operations/2.cc:\n \tLikewise.\n-\t* testsuite/23_containers/forward_list/ext_pointer/operations/3.cc: \n+\t* testsuite/23_containers/forward_list/ext_pointer/operations/3.cc:\n \tLikewise.\n-\t* testsuite/23_containers/forward_list/ext_pointer/operations/4.cc: \n+\t* testsuite/23_containers/forward_list/ext_pointer/operations/4.cc:\n \tLikewise.\n-\t* testsuite/23_containers/forward_list/ext_pointer/operations/5.cc: \n+\t* testsuite/23_containers/forward_list/ext_pointer/operations/5.cc:\n \tLikewise.\n-\t* testsuite/23_containers/forward_list/ext_pointer/operations/6.cc: \n+\t* testsuite/23_containers/forward_list/ext_pointer/operations/6.cc:\n \tLikewise.\n-\t* testsuite/23_containers/forward_list/ext_pointer/operations/7.cc: \n+\t* testsuite/23_containers/forward_list/ext_pointer/operations/7.cc:\n \tLikewise.\n-\t* testsuite/23_containers/forward_list/ext_pointer/requirements/1.cc: \n+\t* testsuite/23_containers/forward_list/ext_pointer/requirements/1.cc:\n \tLikewise.\n \t* testsuite/23_containers/forward_list/ext_pointer/requirements/\n \texplicit_instantiation/1.cc: Likewise.\n@@ -196,7 +218,7 @@\n \t* include/precompiled/extc++.h: Likewise.\n \t* include/Makefile.in: Regenerate.\n \t* testsuite/ext/ext_pointer/1.cc: New.\n-\t* testsuite/ext/ext_pointer/1_neg.cc: Likewise.\t\n+\t* testsuite/ext/ext_pointer/1_neg.cc: Likewise.\n \t* testsuite/23_containers/vector/ext_pointer/citerators.cc: New.\n \t* testsuite/23_containers/vector/ext_pointer/data_access.cc: Likewise.\n \t* testsuite/23_containers/vector/ext_pointer/resize.cc: Likewise.\n@@ -274,35 +296,35 @@\n \n 2008-11-01  Jonathan Wakely  <jwakely.gcc@gmail.com>\n \n-        * include/bits/shared_ptr.h: Update comparisons to match WP.\n-        (_Sp_counted_ptr): Make copy and assignment members deleted.\n-        (_Sp_counted_deleter): Remove private copy and assignment members.\n-        (__shared_count::_M_less,__weak_count::_M_less,operator<): Replace\n-        friend operator< with overloaded _M_less member functions to allow\n-        comparison with either shared_count or weak_count.\n-        (__shared_ptr::_M_less,__weak_ptr::_M_less): Replace with...\n-        (__shared_ptr::owner_before,__weak_ptr::owner_before): New overloads\n-        for ownership-based ordering.\n-        (operator<(__shared_ptr,__shared_ptr)): Compare stored pointers,\n-        make non-friend.\n-        (operator==(__shared_ptr,__shared_ptr)): Make non-friend.\n-        (operator!=(__shared_ptr,__shared_ptr)): Likewise.\n-        (less<__shared_ptr<>>,less<shared_ptr<>>,_Sp_less): Explicitly call\n-        pointer specialization.\n-        (__weak_ptr::operator<,weak_ptr::operator<=,weak_ptr::operator>,\n-        weak_ptr::operator>=): Remove operator< and delete all comparisons.\n-        (_Sp_owner_less,owner_less): Predicate for ownership-based ordering.\n-        (operator<(shared_ptr,shared_ptr): Overload for derived shared_ptr.\n-        (operator==(shared_ptr,shared_ptr): Likewise.\n-        (operator!=(shared_ptr,shared_ptr): Likewise.\n-        (swap(shared_ptr,shared_ptr)): Fix parameter types.\n-        (swap(weak_ptr,weak_ptr)): Add missing overload.\n-        * testsuite/20_util/owner_less/cmp.cc: New.\n-        * testsuite/20_util/shared_ptr/comparison/cmp.cc: Test other ops.\n-        * testsuite/20_util/shared_ptr/comparison/less.cc: New.\n-        * testsuite/20_util/shared_ptr/observers/owner_before.cc: New.\n-        * testsuite/20_util/weak_ptr/observers/owner_before.cc: New.\n-        * testsuite/20_util/weak_ptr/comparison/cmp_neg.cc: New.\n+\t* include/bits/shared_ptr.h: Update comparisons to match WP.\n+\t(_Sp_counted_ptr): Make copy and assignment members deleted.\n+\t(_Sp_counted_deleter): Remove private copy and assignment members.\n+\t(__shared_count::_M_less,__weak_count::_M_less,operator<): Replace\n+\tfriend operator< with overloaded _M_less member functions to allow\n+\tcomparison with either shared_count or weak_count.\n+\t(__shared_ptr::_M_less,__weak_ptr::_M_less): Replace with...\n+\t(__shared_ptr::owner_before,__weak_ptr::owner_before): New overloads\n+\tfor ownership-based ordering.\n+\t(operator<(__shared_ptr,__shared_ptr)): Compare stored pointers,\n+\tmake non-friend.\n+\t(operator==(__shared_ptr,__shared_ptr)): Make non-friend.\n+\t(operator!=(__shared_ptr,__shared_ptr)): Likewise.\n+\t(less<__shared_ptr<>>,less<shared_ptr<>>,_Sp_less): Explicitly call\n+\tpointer specialization.\n+\t(__weak_ptr::operator<,weak_ptr::operator<=,weak_ptr::operator>,\n+\tweak_ptr::operator>=): Remove operator< and delete all comparisons.\n+\t(_Sp_owner_less,owner_less): Predicate for ownership-based ordering.\n+\t(operator<(shared_ptr,shared_ptr): Overload for derived shared_ptr.\n+\t(operator==(shared_ptr,shared_ptr): Likewise.\n+\t(operator!=(shared_ptr,shared_ptr): Likewise.\n+\t(swap(shared_ptr,shared_ptr)): Fix parameter types.\n+\t(swap(weak_ptr,weak_ptr)): Add missing overload.\n+\t* testsuite/20_util/owner_less/cmp.cc: New.\n+\t* testsuite/20_util/shared_ptr/comparison/cmp.cc: Test other ops.\n+\t* testsuite/20_util/shared_ptr/comparison/less.cc: New.\n+\t* testsuite/20_util/shared_ptr/observers/owner_before.cc: New.\n+\t* testsuite/20_util/weak_ptr/observers/owner_before.cc: New.\n+\t* testsuite/20_util/weak_ptr/comparison/cmp_neg.cc: New.\n \n 2008-10-31  Paolo Carlini  <paolo.carlini@oracle.com>\n \n@@ -331,7 +353,7 @@\n \n \tPR libstdc++/37522\n \t* config/os/mingw32/os_defines.h: Define _GLIBCXX_HAVE_BROKEN_VSWPRINTF\n-\t* include/bits/basic_string.h: Guard string conversions with \n+\t* include/bits/basic_string.h: Guard string conversions with\n \t!defined(_GLIBCXX_HAVE_BROKEN_VSWPRINTF) too.\n \t* testsuite/lib/libstdc++.exp (check_v3_target_string_conversions):\n \tNew.\n@@ -382,7 +404,7 @@\n \t* include/std/system_error (is_error_code_enum): Specialize for errc.\n \t(error_category::error_category): Defaulted and protected.\n \t(error_category::~error_category): New, virtual.\n-\t(error_category::error_category(const error_category&), \n+\t(error_category::error_category(const error_category&),\n \terror_category::operator=(const error_category&)): Deleted.\n \t(get_system_category, get_posix_category): Remove (DR 890).\n \t(system_category): External linkage (DR 890).\n@@ -391,11 +413,11 @@\n \t(error_code::error_code<>(_ErrorCodeEnum)): Use generic_category.\n \t(error_code::clear, error_code::operator=<>(_ErrorCodeEnum)): Forward to\n \terror_code::assign, use generic_category.\n-\t(error_condition::error_condition, \n-\terror_condition::error_condition<>(_ErrorConditionEnum)): Use \n+\t(error_condition::error_condition,\n+\terror_condition::error_condition<>(_ErrorConditionEnum)): Use\n \tgeneric_category.\n-\t(error_condition::clear, \n-\terror_condition::operator=<>(_ErrorConditionEnum)): Forward to \n+\t(error_condition::clear,\n+\terror_condition::operator=<>(_ErrorConditionEnum)): Forward to\n \terror_code::assign, use generic_category.\n \t(make_error_code, make_error_condition): Define in namespace std.\n \t* include/std/mutex (unique_lock<>::lock, unique_lock<>::try_lock,\n@@ -412,21 +434,21 @@\n \t* config/os/generic/error_constants.h (posix_errno): Rename to errc, use\n \tenum class type. Fix spelling.\n \t* config/os/mingw32/error_constants.h (posix_errno): Likewise.\n-\t* testsuite/19_diagnostics/error_code/cons/1.cc: Use errc and \n+\t* testsuite/19_diagnostics/error_code/cons/1.cc: Use errc and\n \tgeneric_category.\n \t* testsuite/19_diagnostics/error_code/operators/bool.cc: Use errc.\n \t* testsuite/19_diagnostics/error_code/operators/equal.cc: Likewise.\n \t* testsuite/19_diagnostics/error_code/operators/not_equal.cc: Likewise.\n-\t* testsuite/19_diagnostics/error_category/cons/copy_neg.cc: Update \n+\t* testsuite/19_diagnostics/error_category/cons/copy_neg.cc: Update\n \tdg-error line numbers.\n-\t* testsuite/19_diagnostics/error_condition/cons/1.cc: Use \n+\t* testsuite/19_diagnostics/error_condition/cons/1.cc: Use\n \tgeneric_category.\n \t* testsuite/19_diagnostics/error_condition/operators/bool.cc: Use errc.\n \t* testsuite/19_diagnostics/error_condition/operators/equal.cc: Likewise.\n-\t* testsuite/19_diagnostics/error_condition/operators/not_equal.cc: \n+\t* testsuite/19_diagnostics/error_condition/operators/not_equal.cc:\n \tLikewise.\n \t* testsuite/19_diagnostics/headers/system_error/errc_std_c++0x.cc: New.\n-\t* testsuite/19_diagnostics/headers/system_error/types_std_c++0x.cc: \n+\t* testsuite/19_diagnostics/headers/system_error/types_std_c++0x.cc:\n \tRemove using tests since errc is not a namespace.\n \t* testsuite/19_diagnostics/system_error/cons-1.cc: Use errc.\n \t* testsuite/19_diagnostics/system_error/what-4.cc: Likewise.\n@@ -435,7 +457,7 @@\n \t* testsuite/27_io/basic_ostream/inserters_other/char/error_code.cc:\n \tLikewise.\n \t* testsuite/30_threads/unique_lock/locking/2.cc: Likewise.\n-\t\n+\n 2008-10-20  Paolo Carlini  <paolo.carlini@oracle.com>\n \n \t* include/tr1_impl/hashtable_policy.h (_Hash_node<>::_Hash_node<>\n@@ -499,7 +521,7 @@\n \t* include/bits/forward_list.h: Factor list construction to dispatch\n \troutines.\n \t* include/bits/forward_list.tcc: Likewise.\n-\t* testsuite/23_containers/forward_list/modifiers/2.cc: \n+\t* testsuite/23_containers/forward_list/modifiers/2.cc:\n \n 2008-10-16  Paolo Carlini  <paolo.carlini@oracle.com>\n \n@@ -630,7 +652,7 @@\n \t(operator<<(basic_ostream<>&, const error_code&)): Define here.\n \t* include/std/ostream (operator<<(basic_ostream<>&,\n \tconst error_code&)): Do not define here.\n-\t* testsuite/19_diagnostics/error_condition/cons/1.cc: New.\t\n+\t* testsuite/19_diagnostics/error_condition/cons/1.cc: New.\n \t* testsuite/19_diagnostics/error_condition/operators/bool.cc: Likewise.\n \t* testsuite/19_diagnostics/error_condition/operators/bool_neg.cc:\n \tLikewise.\n@@ -647,10 +669,10 @@\n \t* testsuite/util/testsuite_hooks.cc: Avoid uninitialized warning.\n \n 2008-10-10  Chris Fairles  <cfairles@gcc.gnu.org>\n-  \n-\t* testsuite/20_util/duration/cons/1.cc: Remove invalid check of \n+\n+\t* testsuite/20_util/duration/cons/1.cc: Remove invalid check of\n \tuninitialized duration.\n-        \n+\n 2008-10-08  Bob Walters  <bob.s.walters@gmail.com>\n \n \t* include/bits/stl_vector.h (_Vector_base<>::_Vector_impl::_M_start,\n@@ -689,7 +711,7 @@\n \n 2008-09-30  Chris Fairles  <cfairles@gcc.gnu.org>\n \n-\t* include/std/tuple (tuple<>::swap): Implement swap for tuple as per \n+\t* include/std/tuple (tuple<>::swap): Implement swap for tuple as per\n \tDR 522 [Ready].\n \t* testsuite/20_util/tuple/swap.cc: New.\n \n@@ -732,9 +754,9 @@\n \t* testsuite/30_threads/recursive_timed_mutex/cons/assign_neg.cc:\n \tLikewise.\n \t* testsuite/30_threads/recursive_timed_mutex/cons/copy_neg.cc: Likewise.\n-\t\n+\n 2008-09-26  Peter O'Gorman  <pogma@thewrittenword.com>\n-            Steve Ellcey  <sje@cup.hp.com>\n+\t    Steve Ellcey  <sje@cup.hp.com>\n \n \t* configure: Regenerate for new libtool.\n \t* aclocal.m4: Ditto."}, {"sha": "3b1052b26a18f267f2713c3ec90b252db9185be8", "filename": "libstdc++-v3/include/bits/basic_ios.h", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a40fff0edbfec21b0e4cda87e3a8be26b0970f72/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_ios.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a40fff0edbfec21b0e4cda87e3a8be26b0970f72/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_ios.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_ios.h?ref=a40fff0edbfec21b0e4cda87e3a8be26b0970f72", "patch": "@@ -398,7 +398,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n        *  with this stream, calls that buffer's @c pubimbue(loc).\n        *\n        *  Additional l10n notes are at\n-       *  http://gcc.gnu.org/onlinedocs/libstdc++/22_locale/howto.html\n+       *  http://gcc.gnu.org/onlinedocs/libstdc++/manual/localization.html\n       */\n       locale\n       imbue(const locale& __loc);\n@@ -418,7 +418,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n        *  @endcode\n        *\n        *  Additional l10n notes are at\n-       *  http://gcc.gnu.org/onlinedocs/libstdc++/22_locale/howto.html\n+       *  http://gcc.gnu.org/onlinedocs/libstdc++/manual/localization.html\n       */\n       char\n       narrow(char_type __c, char __dfault) const\n@@ -437,7 +437,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n        *  @endcode\n        *\n        *  Additional l10n notes are at\n-       *  http://gcc.gnu.org/onlinedocs/libstdc++/22_locale/howto.html\n+       *  http://gcc.gnu.org/onlinedocs/libstdc++/manual/localization.html\n       */\n       char_type\n       widen(char __c) const"}, {"sha": "5c0c914b9f97fcfd209398b807166e7189d9af59", "filename": "libstdc++-v3/include/bits/char_traits.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a40fff0edbfec21b0e4cda87e3a8be26b0970f72/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fchar_traits.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a40fff0edbfec21b0e4cda87e3a8be26b0970f72/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fchar_traits.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fchar_traits.h?ref=a40fff0edbfec21b0e4cda87e3a8be26b0970f72", "patch": "@@ -87,7 +87,7 @@ _GLIBCXX_BEGIN_NAMESPACE(__gnu_cxx)\n    *  may not be specialized for fundamental types, but classes in\n    *  namespace __gnu_cxx may be.\n    *\n-   *  See http://gcc.gnu.org/onlinedocs/libstdc++/21_strings/howto.html#5\n+   *  See http://gcc.gnu.org/onlinedocs/libstdc++/manual/bk01pt05ch13s03.html\n    *  for advice on how to make use of this class for \"unusual\" character\n    *  types. Also, check out include/ext/pod_char_traits.h.  \n    */\n@@ -228,7 +228,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n    *  __gnu_cxx::char_traits, it is possible to achieve a more\n    *  appropriate definition by specializing __gnu_cxx::char_traits.\n    *\n-   *  See http://gcc.gnu.org/onlinedocs/libstdc++/21_strings/howto.html#5\n+   *  See http://gcc.gnu.org/onlinedocs/libstdc++/manual/bk01pt05ch13s03.html\n    *  for advice on how to make use of this class for \"unusual\" character\n    *  types. Also, check out include/ext/pod_char_traits.h.\n   */"}, {"sha": "db040b8626369be91bfb0fa4e33d4ee7b499fa82", "filename": "libstdc++-v3/include/bits/ios_base.h", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a40fff0edbfec21b0e4cda87e3a8be26b0970f72/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fios_base.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a40fff0edbfec21b0e4cda87e3a8be26b0970f72/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fios_base.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fios_base.h?ref=a40fff0edbfec21b0e4cda87e3a8be26b0970f72", "patch": "@@ -223,7 +223,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n       failure(const string& __str) throw();\n \n       // This declaration is not useless:\n-      // http://gcc.gnu.org/onlinedocs/gcc-3.0.2/gcc_6.html#SEC118\n+      // http://gcc.gnu.org/onlinedocs/gcc-4.3.2/gcc/Vague-Linkage.html\n       virtual\n       ~failure() throw();\n \n@@ -376,8 +376,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n \n     /// Perform input and output in binary mode (as opposed to text mode).\n     /// This is probably not what you think it is; see\n-    /// http://gcc.gnu.org/onlinedocs/libstdc++/27_io/howto.html#3 and\n-    /// http://gcc.gnu.org/onlinedocs/libstdc++/27_io/howto.html#7 for more.\n+    /// http://gcc.gnu.org/onlinedocs/libstdc++/manual/bk01pt11ch27s02.html\n     static const openmode binary =\t_S_bin;\n \n     /// Open for input.  Default for @c ifstream and fstream.\n@@ -671,7 +670,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n      *  The synchronization referred to is @e only that between the standard\n      *  C facilities (e.g., stdout) and the standard C++ objects (e.g.,\n      *  cout).  User-declared streams are unaffected.  See\n-     *  http://gcc.gnu.org/onlinedocs/libstdc++/27_io/howto.html#8 for more.\n+     *  http://gcc.gnu.org/onlinedocs/libstdc++/manual/bk01pt11ch28s02.html\n     */\n     static bool\n     sync_with_stdio(bool __sync = true);"}, {"sha": "a456ea99751234ce834a27df5525c27704d7294d", "filename": "libstdc++-v3/include/bits/stl_map.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a40fff0edbfec21b0e4cda87e3a8be26b0970f72/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_map.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a40fff0edbfec21b0e4cda87e3a8be26b0970f72/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_map.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_map.h?ref=a40fff0edbfec21b0e4cda87e3a8be26b0970f72", "patch": "@@ -536,7 +536,7 @@ _GLIBCXX_BEGIN_NESTED_NAMESPACE(std, _GLIBCXX_STD_D)\n        *  cause no gains in efficiency.\n        *\n        *  See\n-       *  http://gcc.gnu.org/onlinedocs/libstdc++/23_containers/howto.html#4\n+       *  http://gcc.gnu.org/onlinedocs/libstdc++/manual/bk01pt07ch17.html\n        *  for more on \"hinting\".\n        *\n        *  Insertion requires logarithmic time (if the hint is not taken)."}, {"sha": "af6460052ee5eaca26bcfe00d8859a67b326ff65", "filename": "libstdc++-v3/include/bits/stl_multimap.h", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a40fff0edbfec21b0e4cda87e3a8be26b0970f72/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_multimap.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a40fff0edbfec21b0e4cda87e3a8be26b0970f72/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_multimap.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_multimap.h?ref=a40fff0edbfec21b0e4cda87e3a8be26b0970f72", "patch": "@@ -458,8 +458,8 @@ _GLIBCXX_BEGIN_NESTED_NAMESPACE(std, _GLIBCXX_STD_D)\n        *  improve the performance of the insertion process.  A bad hint would\n        *  cause no gains in efficiency.\n        *\n-       *  See http://gcc.gnu.org/onlinedocs/libstdc++/23_containers/howto.html#4\n-       *  for more on \"hinting\".\n+       *  For more on \"hinting,\" see:\n+       *  http://gcc.gnu.org/onlinedocs/libstdc++/manual/bk01pt07ch17.html\n        *\n        *  Insertion requires logarithmic time (if the hint is not taken).\n        */\n@@ -468,7 +468,8 @@ _GLIBCXX_BEGIN_NESTED_NAMESPACE(std, _GLIBCXX_STD_D)\n       { return _M_t._M_insert_equal_(__position, __x); }\n \n       /**\n-       *  @brief A template function that attempts to insert a range of elements.\n+       *  @brief A template function that attempts to insert a range\n+       *  of elements.\n        *  @param  first  Iterator pointing to the start of the range to be\n        *                 inserted.\n        *  @param  last  Iterator pointing to the end of the range."}, {"sha": "3721d99d44aa5fb0983d375aab8551f8b562732a", "filename": "libstdc++-v3/include/bits/stl_multiset.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a40fff0edbfec21b0e4cda87e3a8be26b0970f72/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_multiset.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a40fff0edbfec21b0e4cda87e3a8be26b0970f72/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_multiset.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_multiset.h?ref=a40fff0edbfec21b0e4cda87e3a8be26b0970f72", "patch": "@@ -420,7 +420,7 @@ _GLIBCXX_BEGIN_NESTED_NAMESPACE(std, _GLIBCXX_STD_D)\n        *  improve the performance of the insertion process.  A bad hint would\n        *  cause no gains in efficiency.\n        *\n-       *  See http://gcc.gnu.org/onlinedocs/libstdc++/23_containers/howto.html#4\n+       *  See http://gcc.gnu.org/onlinedocs/libstdc++/manual/bk01pt07ch17.html\n        *  for more on \"hinting\".\n        *\n        *  Insertion requires logarithmic time (if the hint is not taken)."}, {"sha": "be93cc65a34384a0f2c8779b7cf6dec954e1a1d9", "filename": "libstdc++-v3/include/bits/stl_relops.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a40fff0edbfec21b0e4cda87e3a8be26b0970f72/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_relops.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a40fff0edbfec21b0e4cda87e3a8be26b0970f72/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_relops.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_relops.h?ref=a40fff0edbfec21b0e4cda87e3a8be26b0970f72", "patch": "@@ -60,8 +60,8 @@\n  *  Inclusion of this file has been removed from\n  *  all of the other STL headers for safety reasons, except std_utility.h.\n  *  For more information, see the thread of about twenty messages starting\n- *  with http://gcc.gnu.org/ml/libstdc++/2001-01/msg00223.html , or the\n- *  FAQ at http://gcc.gnu.org/onlinedocs/libstdc++/faq/index.html#4_4 .\n+ *  with http://gcc.gnu.org/ml/libstdc++/2001-01/msg00223.html, or\n+ *  http://gcc.gnu.org/onlinedocs/libstdc++/faq.html#faq.ambiguous_overloads\n  *\n  *  Short summary:  the rel_ops operators should be avoided for the present.\n  */"}, {"sha": "8ea0a5970ac4fa00df361bc05c9f2ca672432a65", "filename": "libstdc++-v3/include/bits/stl_set.h", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a40fff0edbfec21b0e4cda87e3a8be26b0970f72/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_set.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a40fff0edbfec21b0e4cda87e3a8be26b0970f72/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_set.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_set.h?ref=a40fff0edbfec21b0e4cda87e3a8be26b0970f72", "patch": "@@ -432,17 +432,18 @@ _GLIBCXX_BEGIN_NESTED_NAMESPACE(std, _GLIBCXX_STD_D)\n        *  potentially improve the performance of the insertion process.  A bad\n        *  hint would cause no gains in efficiency.\n        *\n-       *  See http://gcc.gnu.org/onlinedocs/libstdc++/23_containers/howto.html#4\n-       *  for more on \"hinting\".\n-       *\n+       *  For more on \"hinting\", see:\n+       *  http://gcc.gnu.org/onlinedocs/libstdc++/manual/bk01pt07ch17.html\n+       *  \n        *  Insertion requires logarithmic time (if the hint is not taken).\n        */\n       iterator\n       insert(iterator __position, const value_type& __x)\n       { return _M_t._M_insert_unique_(__position, __x); }\n \n       /**\n-       *  @brief A template function that attempts to insert a range of elements.\n+       *  @brief A template function that attempts to insert a range\n+       *  of elements.\n        *  @param  first  Iterator pointing to the start of the range to be\n        *                 inserted.\n        *  @param  last  Iterator pointing to the end of the range."}, {"sha": "67dfd6945517b64a21fccffc6d5d7b28b9489646", "filename": "libstdc++-v3/include/std/bitset", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a40fff0edbfec21b0e4cda87e3a8be26b0970f72/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fbitset", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a40fff0edbfec21b0e4cda87e3a8be26b0970f72/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fbitset", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fbitset?ref=a40fff0edbfec21b0e4cda87e3a8be26b0970f72", "patch": "@@ -634,7 +634,8 @@ _GLIBCXX_BEGIN_NESTED_NAMESPACE(std, _GLIBCXX_STD_D)\n    *     }\n    *  @endcode\n    *\n-   *  Also see http://gcc.gnu.org/onlinedocs/libstdc++/ext/sgiexts.html#ch23\n+   *  Also see:\n+   *  http://gcc.gnu.org/onlinedocs/libstdc++/manual/bk01pt12ch33s02.html\n    *  for a description of extensions.\n    *\n    *  Most of the actual code isn't contained in %bitset<> itself, but in the"}, {"sha": "46b630702a967739c5b8627f656370e207ae7d88", "filename": "libstdc++-v3/include/std/fstream", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a40fff0edbfec21b0e4cda87e3a8be26b0970f72/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ffstream", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a40fff0edbfec21b0e4cda87e3a8be26b0970f72/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ffstream", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ffstream?ref=a40fff0edbfec21b0e4cda87e3a8be26b0970f72", "patch": "@@ -325,7 +325,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n        *  If no file has been opened, and both @a s and @a n are zero, then\n        *  the stream becomes unbuffered.  Otherwise, @c s is used as a\n        *  buffer; see\n-       *  http://gcc.gnu.org/onlinedocs/libstdc++/27_io/howto.html#2\n+       *  http://gcc.gnu.org/onlinedocs/libstdc++/manual/bk01pt11ch25s02.html\n        *  for more.\n       */\n       virtual __streambuf_type*"}, {"sha": "6f8129ec1ed8ae612720509a5c2d04f3218eef19", "filename": "libstdc++-v3/include/std/iosfwd", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a40fff0edbfec21b0e4cda87e3a8be26b0970f72/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fiosfwd", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a40fff0edbfec21b0e4cda87e3a8be26b0970f72/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fiosfwd", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fiosfwd?ref=a40fff0edbfec21b0e4cda87e3a8be26b0970f72", "patch": "@@ -125,7 +125,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n    *  themselves (e.g., \"class ostream;\") is not valid ISO C++.\n    *\n    *  For more specific declarations, see\n-   *  http://gcc.gnu.org/onlinedocs/libstdc++/27_io/howto.html#10\n+   *  http://gcc.gnu.org/onlinedocs/libstdc++/manual/bk01pt11ch24.html\n    *\n    *  @{\n   */"}, {"sha": "5f2f23f1df0cef319f5e497dd6fa5bc2bd015a37", "filename": "libstdc++-v3/include/std/iostream", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a40fff0edbfec21b0e4cda87e3a8be26b0970f72/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fiostream", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a40fff0edbfec21b0e4cda87e3a8be26b0970f72/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fiostream", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fiostream?ref=a40fff0edbfec21b0e4cda87e3a8be26b0970f72", "patch": "@@ -1,6 +1,6 @@\n // Standard iostream objects -*- C++ -*-\n \n-// Copyright (C) 1997, 1998, 1999, 2001, 2002, 2005\n+// Copyright (C) 1997, 1998, 1999, 2001, 2002, 2005, 2008\n // Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n@@ -52,8 +52,8 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n    *\n    *  The &lt;iostream&gt; header declares the eight <em>standard stream\n    *  objects</em>.  For other declarations, see\n-   *  http://gcc.gnu.org/onlinedocs/libstdc++/27_io/howto.html#10 and the\n-   *  @link s27_2_iosfwd I/O forward declarations @endlink\n+   *  http://gcc.gnu.org/onlinedocs/libstdc++/manual/bk01pt11ch24.html\n+   *  and the @link s27_2_iosfwd I/O forward declarations @endlink\n    *\n    *  They are required by default to cooperate with the global C library's\n    *  @c FILE streams, and to be available during program startup and"}, {"sha": "8b87c73fc1bddcbb8b895183dba132f64eb0ff7d", "filename": "libstdc++-v3/include/std/istream", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a40fff0edbfec21b0e4cda87e3a8be26b0970f72/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fistream", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a40fff0edbfec21b0e4cda87e3a8be26b0970f72/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fistream", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fistream?ref=a40fff0edbfec21b0e4cda87e3a8be26b0970f72", "patch": "@@ -630,10 +630,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n    *  Objects of this class are created before all of the standard\n    *  extractors are run.  It is responsible for \"exception-safe prefix and\n    *  suffix operations,\" although only prefix actions are currently required\n-   *  by the standard.  Additional actions may be added by the\n-   *  implementation, and we list them in\n-   *  http://gcc.gnu.org/onlinedocs/libstdc++/17_intro/howto.html#5\n-   *  under [27.6] notes.\n+   *  by the standard. \n   */\n   template<typename _CharT, typename _Traits>\n     class basic_istream<_CharT, _Traits>::sentry"}, {"sha": "93a7d6ede31aa694281eb7962425f455d3b7df5e", "filename": "libstdc++-v3/include/std/ostream", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a40fff0edbfec21b0e4cda87e3a8be26b0970f72/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fostream", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a40fff0edbfec21b0e4cda87e3a8be26b0970f72/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fostream", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fostream?ref=a40fff0edbfec21b0e4cda87e3a8be26b0970f72", "patch": "@@ -375,10 +375,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n    *\n    *  Objects of this class are created before all of the standard\n    *  inserters are run.  It is responsible for \"exception-safe prefix and\n-   *  suffix operations.\"  Additional actions may be added by the\n-   *  implementation, and we list them in\n-   *  http://gcc.gnu.org/onlinedocs/libstdc++/17_intro/howto.html#5\n-   *  under [27.6] notes.\n+   *  suffix operations.\" \n   */\n   template <typename _CharT, typename _Traits>\n     class basic_ostream<_CharT, _Traits>::sentry"}, {"sha": "6d3366bbfd2ecd5ad8ba7fc1d9c9433a6ea6190d", "filename": "libstdc++-v3/include/std/sstream", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a40fff0edbfec21b0e4cda87e3a8be26b0970f72/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fsstream", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a40fff0edbfec21b0e4cda87e3a8be26b0970f72/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fsstream", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fsstream?ref=a40fff0edbfec21b0e4cda87e3a8be26b0970f72", "patch": "@@ -193,7 +193,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n        *\n        *  If no buffer has already been created, and both @a s and @a n are\n        *  non-zero, then @c s is used as a buffer; see\n-       *  http://gcc.gnu.org/onlinedocs/libstdc++/27_io/howto.html#2\n+       *  http://gcc.gnu.org/onlinedocs/libstdc++/manual/bk01pt11ch25s02.html\n        *  for more.\n       */\n       virtual __streambuf_type*"}, {"sha": "c7ff5bf0675c493ccc4cc90f7ec88e0b4444def8", "filename": "libstdc++-v3/include/std/streambuf", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a40fff0edbfec21b0e4cda87e3a8be26b0970f72/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fstreambuf", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a40fff0edbfec21b0e4cda87e3a8be26b0970f72/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fstreambuf", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fstreambuf?ref=a40fff0edbfec21b0e4cda87e3a8be26b0970f72", "patch": "@@ -563,8 +563,8 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n        *\n        *  Each derived class provides its own appropriate behavior.  See\n        *  the next-to-last paragraph of \n-       *  http://gcc.gnu.org/onlinedocs/libstdc++/27_io/howto.html#2 for\n-       *  more on this function.\n+       *  http://gcc.gnu.org/onlinedocs/libstdc++/manual/bk01pt11ch25s02.html\n+       *  for more on this function.\n        *\n        *  @note  Base class version does nothing, returns @c this.\n       */\n@@ -660,7 +660,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n        *\n        *  A functioning input streambuf can be created by overriding only\n        *  this function (no buffer area will be used).  For an example, see\n-       *  http://gcc.gnu.org/onlinedocs/libstdc++/27_io/howto.html#6\n+       *  http://gcc.gnu.org/onlinedocs/libstdc++/manual/bk01pt11ch25.html\n        *\n        *  @note  Base class version does nothing, returns eof().\n       */"}, {"sha": "1cfa6efc00423e543fcb6f0a65b79eab1609d667", "filename": "libstdc++-v3/testsuite/27_io/ios_base/cons/assign_neg.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a40fff0edbfec21b0e4cda87e3a8be26b0970f72/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fios_base%2Fcons%2Fassign_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a40fff0edbfec21b0e4cda87e3a8be26b0970f72/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fios_base%2Fcons%2Fassign_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fios_base%2Fcons%2Fassign_neg.cc?ref=a40fff0edbfec21b0e4cda87e3a8be26b0970f72", "patch": "@@ -43,5 +43,5 @@ void test01()\n }\n // { dg-error \"synthesized\" \"\" { target *-*-* } 42 } \n // { dg-error \"within this context\" \"\" { target *-*-* } 35 } \n-// { dg-error \"is private\" \"\" { target *-*-* } 794 } \n+// { dg-error \"is private\" \"\" { target *-*-* } 793 } \n // { dg-error \"operator=\" \"\" { target *-*-* } 0 } "}, {"sha": "01300ab530d1768b7c8e7ee9a58a8e51810a9f09", "filename": "libstdc++-v3/testsuite/27_io/ios_base/cons/copy_neg.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a40fff0edbfec21b0e4cda87e3a8be26b0970f72/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fios_base%2Fcons%2Fcopy_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a40fff0edbfec21b0e4cda87e3a8be26b0970f72/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fios_base%2Fcons%2Fcopy_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fios_base%2Fcons%2Fcopy_neg.cc?ref=a40fff0edbfec21b0e4cda87e3a8be26b0970f72", "patch": "@@ -43,5 +43,5 @@ void test02()\n }\n // { dg-error \"within this context\" \"\" { target *-*-* } 36 } \n // { dg-error \"synthesized\" \"\" { target *-*-* } 42 } \n-// { dg-error \"is private\" \"\" { target *-*-* } 791 } \n+// { dg-error \"is private\" \"\" { target *-*-* } 790 } \n // { dg-error \"copy constructor\" \"\" { target *-*-* } 0 } "}]}