{"sha": "1fb0f8924f59decc2198de591d7fe80319419814", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWZiMGY4OTI0ZjU5ZGVjYzIxOThkZTU5MWQ3ZmU4MDMxOTQxOTgxNA==", "commit": {"author": {"name": "Paul A. Clarke", "email": "pc@us.ibm.com", "date": "2018-10-09T20:25:57Z"}, "committer": {"name": "Paul Clarke", "email": "pc@gcc.gnu.org", "date": "2018-10-09T20:25:57Z"}, "message": "This is a follow-on to earlier commits for adding compatibility implementations of x86 intrinsics for PPC64LE.\n\nThis is a follow-on to earlier commits for adding compatibility\nimplementations of x86 intrinsics for PPC64LE.  This is the first of\ntwo patches.  This patch adds 11 of the 13 x86 intrinsics from\n<pmmintrin.h> (\"SSE3\").  (Patch 2/2 adds tests for these intrinsics,\nand briefly describes the tests performed.)\n\nImplementations are relatively straightforward, with occasional\nextra effort for vector element ordering.\n\nNot implemented are _mm_wait and _mm_monitor, as there are no\ndirect or trivial analogs in the POWER ISA.\n\n./gcc/ChangeLog:\n2018-10-05  Paul A. Clarke  <pc@us.ibm.com>\n\n\t* config.gcc (powerpc*-*-*): Add pmmintrin.h to extra_headers.\n\t* config/rs6000/pmmintrin.h: New file.\n\nFrom-SVN: r264991", "tree": {"sha": "3ef4fa645f24904018b8391b0d3a466c7c0f9dc5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3ef4fa645f24904018b8391b0d3a466c7c0f9dc5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1fb0f8924f59decc2198de591d7fe80319419814", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1fb0f8924f59decc2198de591d7fe80319419814", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1fb0f8924f59decc2198de591d7fe80319419814", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1fb0f8924f59decc2198de591d7fe80319419814/comments", "author": {"login": "ThinkOpenly", "id": 12301795, "node_id": "MDQ6VXNlcjEyMzAxNzk1", "avatar_url": "https://avatars.githubusercontent.com/u/12301795?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ThinkOpenly", "html_url": "https://github.com/ThinkOpenly", "followers_url": "https://api.github.com/users/ThinkOpenly/followers", "following_url": "https://api.github.com/users/ThinkOpenly/following{/other_user}", "gists_url": "https://api.github.com/users/ThinkOpenly/gists{/gist_id}", "starred_url": "https://api.github.com/users/ThinkOpenly/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ThinkOpenly/subscriptions", "organizations_url": "https://api.github.com/users/ThinkOpenly/orgs", "repos_url": "https://api.github.com/users/ThinkOpenly/repos", "events_url": "https://api.github.com/users/ThinkOpenly/events{/privacy}", "received_events_url": "https://api.github.com/users/ThinkOpenly/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "af2d2d135a3374fb8cbd04f027683b0cbb868d88", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/af2d2d135a3374fb8cbd04f027683b0cbb868d88", "html_url": "https://github.com/Rust-GCC/gccrs/commit/af2d2d135a3374fb8cbd04f027683b0cbb868d88"}], "stats": {"total": 168, "additions": 168, "deletions": 0}, "files": [{"sha": "6dfc2ef75e9ce283093f56f7305a7d114d29a07c", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1fb0f8924f59decc2198de591d7fe80319419814/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1fb0f8924f59decc2198de591d7fe80319419814/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=1fb0f8924f59decc2198de591d7fe80319419814", "patch": "@@ -1,3 +1,8 @@\n+2018-10-09  Paul A. Clarke  <pc@us.ibm.com>\n+\n+\t* config.gcc (powerpc*-*-*): Add pmmintrin.h to extra_headers.\n+\t* config/rs6000/pmmintrin.h: New file.\n+\n 2018-10-09  Eric Botcazou  <ebotcazou@adacore.com>\n \n \tPR tree-optimization/86659"}, {"sha": "8521f7d556e925e74e78e8087929075fa47626d7", "filename": "gcc/config.gcc", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1fb0f8924f59decc2198de591d7fe80319419814/gcc%2Fconfig.gcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1fb0f8924f59decc2198de591d7fe80319419814/gcc%2Fconfig.gcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig.gcc?ref=1fb0f8924f59decc2198de591d7fe80319419814", "patch": "@@ -484,6 +484,7 @@ powerpc*-*-*)\n \textra_headers=\"${extra_headers} bmi2intrin.h bmiintrin.h\"\n \textra_headers=\"${extra_headers} xmmintrin.h mm_malloc.h emmintrin.h\"\n \textra_headers=\"${extra_headers} mmintrin.h x86intrin.h\"\n+\textra_headers=\"${extra_headers} pmmintrin.h\"\n \textra_headers=\"${extra_headers} ppu_intrinsics.h spu2vmx.h vec_types.h si2vmx.h\"\n \textra_headers=\"${extra_headers} amo.h\"\n \tcase x$with_cpu in"}, {"sha": "8cdd0565f9b0b71a5eac01575e92d9f9184dd699", "filename": "gcc/config/rs6000/pmmintrin.h", "status": "added", "additions": 162, "deletions": 0, "changes": 162, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1fb0f8924f59decc2198de591d7fe80319419814/gcc%2Fconfig%2Frs6000%2Fpmmintrin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1fb0f8924f59decc2198de591d7fe80319419814/gcc%2Fconfig%2Frs6000%2Fpmmintrin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Fpmmintrin.h?ref=1fb0f8924f59decc2198de591d7fe80319419814", "patch": "@@ -0,0 +1,162 @@\n+/* Copyright (C) 2003-2018 Free Software Foundation, Inc.\n+\n+   This file is part of GCC.\n+\n+   GCC is free software; you can redistribute it and/or modify\n+   it under the terms of the GNU General Public License as published by\n+   the Free Software Foundation; either version 3, or (at your option)\n+   any later version.\n+\n+   GCC is distributed in the hope that it will be useful,\n+   but WITHOUT ANY WARRANTY; without even the implied warranty of\n+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+   GNU General Public License for more details.\n+\n+   Under Section 7 of GPL version 3, you are granted additional\n+   permissions described in the GCC Runtime Library Exception, version\n+   3.1, as published by the Free Software Foundation.\n+\n+   You should have received a copy of the GNU General Public License and\n+   a copy of the GCC Runtime Library Exception along with this program;\n+   see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n+   <http://www.gnu.org/licenses/>.  */\n+\n+/* Implemented from the specification included in the Intel C++ Compiler\n+   User Guide and Reference, version 9.0.  */\n+\n+#ifndef NO_WARN_X86_INTRINSICS\n+/* This header is distributed to simplify porting x86_64 code that\n+   makes explicit use of Intel intrinsics to powerpc64le.\n+   It is the user's responsibility to determine if the results are\n+   acceptable and make additional changes as necessary.\n+   Note that much code that uses Intel intrinsics can be rewritten in\n+   standard C or GNU C extensions, which are more portable and better\n+   optimized across multiple targets.\n+\n+   In the specific case of X86 SSE3 intrinsics, the PowerPC VMX/VSX ISA\n+   is a good match for most SIMD operations.  However the Horizontal\n+   add/sub requires the data pairs be permuted into a separate\n+   registers with vertical even/odd alignment for the operation.\n+   And the addsub operation requires the sign of only the even numbered\n+   elements be flipped (xored with -0.0).\n+   For larger blocks of code using these intrinsic implementations,\n+   the compiler be should be able to schedule instructions to avoid\n+   additional latency.\n+\n+   In the specific case of the monitor and mwait instructions there are\n+   no direct equivalent in the PowerISA at this time.  So those\n+   intrinsics are not implemented.  */\n+#error \"Please read comment above.  Use -DNO_WARN_X86_INTRINSICS to disable this warning.\"\n+#endif\n+\n+#ifndef _PMMINTRIN_H_INCLUDED\n+#define _PMMINTRIN_H_INCLUDED\n+\n+/* We need definitions from the SSE2 and SSE header files*/\n+#include <emmintrin.h>\n+\n+extern __inline __m128 __attribute__((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_addsub_ps (__m128 __X, __m128 __Y)\n+{\n+  const __v4sf even_n0 = {-0.0, 0.0, -0.0, 0.0};\n+  __v4sf even_neg_Y = vec_xor(__Y, even_n0);\n+  return (__m128) vec_add (__X, even_neg_Y);\n+}\n+\n+extern __inline __m128d __attribute__((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_addsub_pd (__m128d __X, __m128d __Y)\n+{\n+  const __v2df even_n0 = {-0.0, 0.0};\n+  __v2df even_neg_Y = vec_xor(__Y, even_n0);\n+  return (__m128d) vec_add (__X, even_neg_Y);\n+}\n+\n+extern __inline __m128 __attribute__((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_hadd_ps (__m128 __X, __m128 __Y)\n+{\n+  __vector unsigned char xform2 = {\n+    #ifdef __LITTLE_ENDIAN__\n+      0x00, 0x01, 0x02, 0x03,  0x08, 0x09, 0x0A, 0x0B,  0x10, 0x11, 0x12, 0x13,  0x18, 0x19, 0x1A, 0x1B\n+    #elif __BIG_ENDIAN__\n+      0x14, 0x15, 0x16, 0x17,  0x1C, 0x1D, 0x1E, 0x1F,  0x04, 0x05, 0x06, 0x07,  0x0C, 0x0D, 0x0E, 0x0F\n+    #endif\n+    };\n+  __vector unsigned char xform1 = {\n+    #ifdef __LITTLE_ENDIAN__\n+      0x04, 0x05, 0x06, 0x07,  0x0C, 0x0D, 0x0E, 0x0F,  0x14, 0x15, 0x16, 0x17,  0x1C, 0x1D, 0x1E, 0x1F\n+    #elif __BIG_ENDIAN__\n+      0x10, 0x11, 0x12, 0x13,  0x18, 0x19, 0x1A, 0x1B,  0x00, 0x01, 0x02, 0x03,  0x08, 0x09, 0x0A, 0x0B\n+    #endif\n+    };\n+  return (__m128) vec_add (vec_perm ((__v4sf) __X, (__v4sf) __Y, xform2),\n+\t\t\t   vec_perm ((__v4sf) __X, (__v4sf) __Y, xform1));\n+}\n+\n+extern __inline __m128 __attribute__((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_hsub_ps (__m128 __X, __m128 __Y)\n+{\n+  __vector unsigned char xform2 = {\n+    #ifdef __LITTLE_ENDIAN__\n+      0x00, 0x01, 0x02, 0x03,  0x08, 0x09, 0x0A, 0x0B,  0x10, 0x11, 0x12, 0x13,  0x18, 0x19, 0x1A, 0x1B\n+    #elif __BIG_ENDIAN__\n+      0x14, 0x15, 0x16, 0x17,  0x1C, 0x1D, 0x1E, 0x1F,  0x04, 0x05, 0x06, 0x07,  0x0C, 0x0D, 0x0E, 0x0F\n+    #endif\n+    };\n+  __vector unsigned char xform1 = {\n+    #ifdef __LITTLE_ENDIAN__\n+      0x04, 0x05, 0x06, 0x07,  0x0C, 0x0D, 0x0E, 0x0F,  0x14, 0x15, 0x16, 0x17,  0x1C, 0x1D, 0x1E, 0x1F\n+    #elif __BIG_ENDIAN__\n+      0x10, 0x11, 0x12, 0x13,  0x18, 0x19, 0x1A, 0x1B,  0x00, 0x01, 0x02, 0x03,  0x08, 0x09, 0x0A, 0x0B\n+    #endif\n+    };\n+  return (__m128) vec_sub (vec_perm ((__v4sf) __X, (__v4sf) __Y, xform2),\n+\t\t\t   vec_perm ((__v4sf) __X, (__v4sf) __Y, xform1));\n+}\n+\n+extern __inline __m128d __attribute__((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_hadd_pd (__m128d __X, __m128d __Y)\n+{\n+  return (__m128d) vec_add (vec_mergeh ((__v2df) __X, (__v2df)__Y),\n+\t\t\t\t  vec_mergel ((__v2df) __X, (__v2df)__Y));\n+}\n+\n+extern __inline __m128d __attribute__((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_hsub_pd (__m128d __X, __m128d __Y)\n+{\n+  return (__m128d) vec_sub (vec_mergeh ((__v2df) __X, (__v2df)__Y),\n+\t\t\t    vec_mergel ((__v2df) __X, (__v2df)__Y));\n+}\n+\n+extern __inline __m128 __attribute__((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_movehdup_ps (__m128 __X)\n+{\n+  return (__m128)vec_mergeo ((__v4su)__X, (__v4su)__X);\n+}\n+\n+extern __inline __m128 __attribute__((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_moveldup_ps (__m128 __X)\n+{\n+  return (__m128)vec_mergee ((__v4su)__X, (__v4su)__X);\n+}\n+\n+extern __inline __m128d __attribute__((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_loaddup_pd (double const *__P)\n+{\n+  return (__m128d) vec_splats (*__P);\n+}\n+\n+extern __inline __m128d __attribute__((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_movedup_pd (__m128d __X)\n+{\n+  return _mm_shuffle_pd (__X, __X, _MM_SHUFFLE2 (0,0));\n+}\n+\n+extern __inline __m128i __attribute__((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_lddqu_si128 (__m128i const *__P)\n+{\n+  return (__m128i) (vec_vsx_ld(0, (signed int const *)__P));\n+}\n+\n+/* POWER8 / POWER9 have no equivalent for _mm_monitor nor _mm_wait.  */\n+\n+#endif /* _PMMINTRIN_H_INCLUDED */"}]}