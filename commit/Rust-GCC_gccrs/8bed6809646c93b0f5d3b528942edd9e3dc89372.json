{"sha": "8bed6809646c93b0f5d3b528942edd9e3dc89372", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGJlZDY4MDk2NDZjOTNiMGY1ZDNiNTI4OTQyZWRkOWUzZGM4OTM3Mg==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2012-11-26T13:56:23Z"}, "committer": {"name": "Eric Botcazou", "email": "ebotcazou@gcc.gnu.org", "date": "2012-11-26T13:56:23Z"}, "message": "tree.h (DECL_RESTRICTED_P): Delete.\n\n\t* tree.h (DECL_RESTRICTED_P): Delete.\n\t(DECL_READ_P): Add comment.\n\t(DECL_NONSHAREABLE): Likewise.\n\t(TYPE_NO_FORCE_BLK): Fix comment.\n\t(struct tree_decl_common): Remove decl_restricted_flag, add decl_flag_3.\n\t* tree-emutls.c (new_emutls_decl): Do not deal with DECL_RESTRICTED_P.\n\t* tree-streamer-in.c (unpack_ts_decl_common_value_fields): Likewise.\n\t* tree-streamer-out.c (pack_ts_decl_common_value_fields): Likewise.\nfortran/\n\t* trans-decl.c (gfc_finish_var_decl): Do not set DECL_RESTRICTED_P.\n\n\t* alias.c (nonoverlapping_component_refs_p): Fix thinko.\n\nFrom-SVN: r193815", "tree": {"sha": "e46a6aeae9ebea5d891d766baa6784291c02d937", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e46a6aeae9ebea5d891d766baa6784291c02d937"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8bed6809646c93b0f5d3b528942edd9e3dc89372", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8bed6809646c93b0f5d3b528942edd9e3dc89372", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8bed6809646c93b0f5d3b528942edd9e3dc89372", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8bed6809646c93b0f5d3b528942edd9e3dc89372/comments", "author": null, "committer": null, "parents": [{"sha": "e3f9361d493097a0bc70f131feafad0f89867d6e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e3f9361d493097a0bc70f131feafad0f89867d6e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e3f9361d493097a0bc70f131feafad0f89867d6e"}], "stats": {"total": 71, "additions": 30, "deletions": 41}, "files": [{"sha": "1ff798fd254d58d6bbd9d55e120421197e25a037", "filename": "gcc/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8bed6809646c93b0f5d3b528942edd9e3dc89372/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8bed6809646c93b0f5d3b528942edd9e3dc89372/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=8bed6809646c93b0f5d3b528942edd9e3dc89372", "patch": "@@ -1,3 +1,16 @@\n+2012-11-26  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* tree.h (DECL_RESTRICTED_P): Delete.\n+\t(DECL_READ_P): Add comment.\n+\t(DECL_NONSHAREABLE): Likewise.\n+\t(TYPE_NO_FORCE_BLK): Fix comment.\n+\t(struct tree_decl_common): Remove decl_restricted_flag, add decl_flag_3.\n+\t* tree-emutls.c (new_emutls_decl): Do not deal with DECL_RESTRICTED_P.\n+\t* tree-streamer-in.c (unpack_ts_decl_common_value_fields): Likewise.\n+\t* tree-streamer-out.c (pack_ts_decl_common_value_fields): Likewise.\n+\n+\t* alias.c (nonoverlapping_component_refs_p): Fix thinko.\n+\n 2012-11-26  Kyrylo Tkachov  <kyrylo.tkachov@arm.com>\n \n \t* doc/sourcebuild.texi: Document arm_v8_vfp_ok."}, {"sha": "15fd7f3180426560cbaf1340a031537f08f4bc8d", "filename": "gcc/alias.c", "status": "modified", "additions": 2, "deletions": 12, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8bed6809646c93b0f5d3b528942edd9e3dc89372/gcc%2Falias.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8bed6809646c93b0f5d3b528942edd9e3dc89372/gcc%2Falias.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Falias.c?ref=8bed6809646c93b0f5d3b528942edd9e3dc89372", "patch": "@@ -2237,19 +2237,9 @@ nonoverlapping_component_refs_p (const_rtx rtlx, const_rtx rtly)\n \n     found:\n       /* If we're left with accessing different fields of a structure, then no\n-\t possible overlap, unless they are both true bitfields, i.e. bitfields\n-\t for which the size isn't a multiple of the (memory) unit.  */\n+\t possible overlap, unless they are both bitfields.  */\n       if (TREE_CODE (typex) == RECORD_TYPE && fieldx != fieldy)\n-\t{\n-\t  if (!DECL_BIT_FIELD (fieldx) || !DECL_BIT_FIELD (fieldy))\n-\t    return true;\n-\n-\t  if ((tree_low_cst (DECL_SIZE (fieldx), 1) % BITS_PER_UNIT) == 0\n-\t      || (tree_low_cst (DECL_SIZE (fieldy), 1) % BITS_PER_UNIT) == 0)\n-\t    return true;\n-\n-\t  return false;\n-\t}\n+\treturn !(DECL_BIT_FIELD (fieldx) && DECL_BIT_FIELD (fieldy));\n \n       /* The comparison on the current field failed.  If we're accessing\n \t a very nested structure, look at the next outer level.  */"}, {"sha": "2aa8d60e1f1e1a22fd34b6c053c1da9b97e18a40", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8bed6809646c93b0f5d3b528942edd9e3dc89372/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8bed6809646c93b0f5d3b528942edd9e3dc89372/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=8bed6809646c93b0f5d3b528942edd9e3dc89372", "patch": "@@ -1,3 +1,7 @@\n+2012-11-26  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* trans-decl.c (gfc_finish_var_decl): Do not set DECL_RESTRICTED_P.\n+\n 2012-11-26  Janus Weil  <janus@gcc.gnu.org>\n \n \tPR fortran/54997"}, {"sha": "3bee1781d643a613a69b92b1c883245059a9222d", "filename": "gcc/fortran/trans-decl.c", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8bed6809646c93b0f5d3b528942edd9e3dc89372/gcc%2Ffortran%2Ftrans-decl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8bed6809646c93b0f5d3b528942edd9e3dc89372/gcc%2Ffortran%2Ftrans-decl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-decl.c?ref=8bed6809646c93b0f5d3b528942edd9e3dc89372", "patch": "@@ -611,12 +611,6 @@ gfc_finish_var_decl (tree decl, gfc_symbol * sym)\n   if (sym->attr.threadprivate\n       && (TREE_STATIC (decl) || DECL_EXTERNAL (decl)))\n     DECL_TLS_MODEL (decl) = decl_default_tls_model (decl);\n-\n-  if (!sym->attr.target\n-      && !sym->attr.pointer\n-      && !sym->attr.cray_pointee\n-      && !sym->attr.proc_pointer)\n-    DECL_RESTRICTED_P (decl) = 1;\n }\n \n "}, {"sha": "8731b24719635b1b0cfae9f9045cdf0b081c292f", "filename": "gcc/tree-emutls.c", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8bed6809646c93b0f5d3b528942edd9e3dc89372/gcc%2Ftree-emutls.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8bed6809646c93b0f5d3b528942edd9e3dc89372/gcc%2Ftree-emutls.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-emutls.c?ref=8bed6809646c93b0f5d3b528942edd9e3dc89372", "patch": "@@ -296,7 +296,6 @@ new_emutls_decl (tree decl, tree alias_of)\n   DECL_WEAK (to) = DECL_WEAK (decl);\n   DECL_VISIBILITY (to) = DECL_VISIBILITY (decl);\n   DECL_VISIBILITY_SPECIFIED (to) = DECL_VISIBILITY_SPECIFIED (decl);\n-  DECL_RESTRICTED_P (to) = DECL_RESTRICTED_P (decl);\n   DECL_DLLIMPORT_P (to) = DECL_DLLIMPORT_P (decl);\n \n   DECL_ATTRIBUTES (to) = targetm.merge_decl_attributes (decl, to);"}, {"sha": "73dc73cf3837ce63b872c7e73a1be86b8a86dfba", "filename": "gcc/tree-streamer-in.c", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8bed6809646c93b0f5d3b528942edd9e3dc89372/gcc%2Ftree-streamer-in.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8bed6809646c93b0f5d3b528942edd9e3dc89372/gcc%2Ftree-streamer-in.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-streamer-in.c?ref=8bed6809646c93b0f5d3b528942edd9e3dc89372", "patch": "@@ -236,7 +236,6 @@ unpack_ts_decl_common_value_fields (struct bitpack_d *bp, tree expr)\n       if (TREE_CODE (expr) == VAR_DECL\n \t  || TREE_CODE (expr) == PARM_DECL)\n \tDECL_HAS_VALUE_EXPR_P (expr) = (unsigned) bp_unpack_value (bp, 1);\n-      DECL_RESTRICTED_P (expr) = (unsigned) bp_unpack_value (bp, 1);\n     }\n }\n "}, {"sha": "525426c6d20dbecf1176bbe7ad5c8eeca065d723", "filename": "gcc/tree-streamer-out.c", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8bed6809646c93b0f5d3b528942edd9e3dc89372/gcc%2Ftree-streamer-out.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8bed6809646c93b0f5d3b528942edd9e3dc89372/gcc%2Ftree-streamer-out.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-streamer-out.c?ref=8bed6809646c93b0f5d3b528942edd9e3dc89372", "patch": "@@ -202,7 +202,6 @@ pack_ts_decl_common_value_fields (struct bitpack_d *bp, tree expr)\n       if (TREE_CODE (expr) == VAR_DECL\n \t  || TREE_CODE (expr) == PARM_DECL)\n \tbp_pack_value (bp, DECL_HAS_VALUE_EXPR_P (expr), 1);\n-      bp_pack_value (bp, DECL_RESTRICTED_P (expr), 1);\n     }\n }\n "}, {"sha": "9f17253fbf8613b4de7fc0258cc770728192f5ac", "filename": "gcc/tree.h", "status": "modified", "additions": 11, "deletions": 20, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8bed6809646c93b0f5d3b528942edd9e3dc89372/gcc%2Ftree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8bed6809646c93b0f5d3b528942edd9e3dc89372/gcc%2Ftree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.h?ref=8bed6809646c93b0f5d3b528942edd9e3dc89372", "patch": "@@ -1321,18 +1321,13 @@ extern void omp_clause_range_check_failed (const_tree, const char *, int,\n   (TREE_CHECK3 (NODE, VAR_DECL, PARM_DECL, \\\n \t\tRESULT_DECL)->decl_common.decl_by_reference_flag)\n \n-/* In a RESULT_DECL, PARM_DECL and VAR_DECL, means that this decl\n-   can be used as restricted tag to disambiguate against other restrict\n-   pointers.  Used by fortran to capture something like non-addressability\n-   (which it isn't really because the middle-end does take addresses of\n-   such variables).  */\n-#define DECL_RESTRICTED_P(NODE) \\\n-  (TREE_CHECK3 (NODE, VAR_DECL, PARM_DECL, \\\n-\t\tRESULT_DECL)->decl_common.decl_restricted_flag)\n-\n+/* In VAR_DECL and PARM_DECL, set when the decl has been used except for\n+   being set.  */\n #define DECL_READ_P(NODE) \\\n   (TREE_CHECK2 (NODE, VAR_DECL, PARM_DECL)->decl_common.decl_read_flag)\n \n+/* In VAR_DECL or RESULT_DECL, set when significant code movement precludes\n+   attempting to share the stack slot with some other variable.  */\n #define DECL_NONSHAREABLE(NODE) \\\n   (TREE_CHECK2 (NODE, VAR_DECL, \\\n \t\tRESULT_DECL)->decl_common.decl_nonshareable_flag)\n@@ -2195,8 +2190,8 @@ extern enum machine_mode vector_type_mode (const_tree);\n    get one debug info record for them.  */\n #define TYPE_STUB_DECL(NODE) (TREE_CHAIN (TYPE_CHECK (NODE)))\n \n-/* In a RECORD_TYPE, UNION_TYPE or QUAL_UNION_TYPE, it means the type\n-   has BLKmode only because it lacks the alignment requirement for\n+/* In a RECORD_TYPE, UNION_TYPE, QUAL_UNION_TYPE or ARRAY_TYPE, it means\n+   the type has BLKmode only because it lacks the alignment required for\n    its size.  */\n #define TYPE_NO_FORCE_BLK(NODE) \\\n   (TYPE_CHECK (NODE)->type_common.no_force_blk_flag)\n@@ -2848,26 +2843,22 @@ struct GTY(()) tree_decl_common {\n      In VAR_DECL, PARM_DECL and RESULT_DECL, this is\n      DECL_HAS_VALUE_EXPR_P.  */\n   unsigned decl_flag_2 : 1;\n+  /* 1 bit unused.  */\n+  unsigned decl_flag_3 : 1;\n   /* Logically, these two would go in a theoretical base shared by var and\n      parm decl. */\n   unsigned gimple_reg_flag : 1;\n   /* In VAR_DECL, PARM_DECL and RESULT_DECL, this is DECL_BY_REFERENCE.  */\n   unsigned decl_by_reference_flag : 1;\n-  /* In VAR_DECL, PARM_DECL and RESULT_DECL, this is DECL_RESTRICTED_P.  */\n-  unsigned decl_restricted_flag : 1;\n-\n-  /* In VAR_DECL and PARM_DECL set when the decl has been used except for\n-     being set.  */\n+  /* In a VAR_DECL and PARM_DECL, this is DECL_READ_P.  */\n   unsigned decl_read_flag : 1;\n-\n-  /* In VAR_DECL or RESULT_DECL set when significant code movement precludes\n-     attempting to share the stack slot with some other variable.  */\n+  /* In a VAR_DECL or RESULT_DECL, this is DECL_NONSHAREABLE.  */\n   unsigned decl_nonshareable_flag : 1;\n \n   /* DECL_OFFSET_ALIGN, used only for FIELD_DECLs.  */\n   unsigned int off_align : 8;\n \n-  /* 24-bits unused.  */\n+  /* 24 bits unused.  */\n \n   /* DECL_ALIGN.  It should have the same size as TYPE_ALIGN.  */\n   unsigned int align;"}]}