{"sha": "bd2726e0ca52721f244e7683d7a56f9049f26434", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmQyNzI2ZTBjYTUyNzIxZjI0NGU3NjgzZDdhNTZmOTA0OWYyNjQzNA==", "commit": {"author": {"name": "Phil Edwards", "email": "pme@gcc.gnu.org", "date": "2003-02-26T00:02:16Z"}, "committer": {"name": "Phil Edwards", "email": "pme@gcc.gnu.org", "date": "2003-02-26T00:02:16Z"}, "message": "Intro.3: Update with new (proper) names.\n\n2003-02-25  Phil Edwards  <pme@gcc.gnu.org>\n\n\t* docs/doxygen/Intro.3:  Update with new (proper) names.\n\t* docs/doxygen/TODO:  Update.\n\t* docs/doxygen/run_doxygen:  More comments, fix up man pages.\n\tFake entries for standard typedefs.\n\t* docs/doxygen/user.cfg.in:  Turn INLINE_INHERITED_MEMB back on.\n\t* docs/html/documentation.html:  Top-level man page is now called\n\tC++Intro.\n\t* include/std/std_limits.h:  Doxygenate.\n\nFrom-SVN: r63433", "tree": {"sha": "2b79d12cb906cd2627030881c85a05482b0dbdd8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2b79d12cb906cd2627030881c85a05482b0dbdd8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/bd2726e0ca52721f244e7683d7a56f9049f26434", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bd2726e0ca52721f244e7683d7a56f9049f26434", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bd2726e0ca52721f244e7683d7a56f9049f26434", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bd2726e0ca52721f244e7683d7a56f9049f26434/comments", "author": null, "committer": null, "parents": [{"sha": "fc943f55426024c7cb2e43d24dd90c2b2e103f70", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fc943f55426024c7cb2e43d24dd90c2b2e103f70", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fc943f55426024c7cb2e43d24dd90c2b2e103f70"}], "stats": {"total": 197, "additions": 170, "deletions": 27}, "files": [{"sha": "94410751b8cb75c53a134e7c96263a4a026cddfa", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bd2726e0ca52721f244e7683d7a56f9049f26434/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bd2726e0ca52721f244e7683d7a56f9049f26434/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=bd2726e0ca52721f244e7683d7a56f9049f26434", "patch": "@@ -1,3 +1,14 @@\n+2003-02-25  Phil Edwards  <pme@gcc.gnu.org>\n+\n+\t* docs/doxygen/Intro.3:  Update with new (proper) names.\n+\t* docs/doxygen/TODO:  Update.\n+\t* docs/doxygen/run_doxygen:  More comments, fix up man pages.\n+\tFake entries for standard typedefs.\n+\t* docs/doxygen/user.cfg.in:  Turn INLINE_INHERITED_MEMB back on.\n+\t* docs/html/documentation.html:  Top-level man page is now called\n+\tC++Intro.\n+\t* include/std/std_limits.h:  Doxygenate.\n+\n 2003-02-25  Scott Snyder  <snyder@fnal.gov>\n \n \tPR libstdc++/9811"}, {"sha": "26b62512147186ffaefa56c5cbd84271efb7854f", "filename": "libstdc++-v3/docs/doxygen/Intro.3", "status": "modified", "additions": 8, "deletions": 9, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bd2726e0ca52721f244e7683d7a56f9049f26434/libstdc%2B%2B-v3%2Fdocs%2Fdoxygen%2FIntro.3", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bd2726e0ca52721f244e7683d7a56f9049f26434/libstdc%2B%2B-v3%2Fdocs%2Fdoxygen%2FIntro.3", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdocs%2Fdoxygen%2FIntro.3?ref=bd2726e0ca52721f244e7683d7a56f9049f26434", "patch": "@@ -1,8 +1,8 @@\n .\\\" t\n .\\\" This man page is released under the FDL as part of libstdc++-v3.\n-.TH Intro 3 \"27 March 2002\" \"GNU libstdc++-v3\" \"Standard C++ Library\"\n+.TH C++Intro 3 \"25 Febuary 2003\" \"GNU libstdc++-v3\" \"Standard C++ Library\"\n .SH NAME\n-Intro \\- Introduction to the GNU libstdc++-v3 man pages\n+C++Intro \\- Introduction to the GNU libstdc++-v3 man pages\n .SH DESCRIPTION\n This man page serves as a brief introduction to the GNU implementation of\n the Standard C++ Library.  For a better introduction and more complete\n@@ -12,10 +12,10 @@ homepage listed at the end.\n .P\n All standard library entities are declared within\n .I namespace std\n-and have manual entries beginning with \"std_\".  For example, to see\n+and have manual entries beginning with \"std::\".  For example, to see\n documentation of the template class\n .I std::vector\n-one would use \"man std_vector\".  Some entities do not have a separate man\n+one would use \"man std::vector\".  Some entities do not have a separate man\n page; for those see the main listing in \"man Namespace_Std\".\n .P\n All the man pages are automatically generated by Doxygen.  For more\n@@ -37,7 +37,7 @@ Binder_functors\tFunctors which \"remember\" an argument.\n Comparison_functors\tFunctors wrapping built-in comparisons.\n Containers\tAn introduction to container classes.\n Func_ptr_functors\tFunctors for use with pointers to functions.\n-Intro\tThis page.\n+C++Intro\tThis page.\n Intro_functors\tAn introduction to function objects, or functors.\n Iterator_types\tProgramatically distinguishing iterators/pointers.\n Logical_functors\tFunctors wrapping the Boolean operations.\n@@ -112,10 +112,9 @@ need to know about it, but it can be useful.  See FAQ 2.5.\n .TP\n .I libstdc++.so[.N]\n The library implementation in shared object form.  This will be used in\n-preference to the static archive form by default.  Currently N will either\n-start with 3 or with 4, but your system vendor may change the name as they\n-see fit.  If N is in the 2.x series, then you are looking at the old\n-libstdc++-v2 library, which we do not maintain.\n+preference to the static archive form by default.  N will be a number equal\n+to or greater than 3.  If N is in the 2.x series, then you are looking at\n+the old libstdc++-v2 library, which we do not maintain.\n .TP\n .I libstdc++.la\n .TP"}, {"sha": "3c89590778090cce7a06686ed46d57a0a948a406", "filename": "libstdc++-v3/docs/doxygen/TODO", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bd2726e0ca52721f244e7683d7a56f9049f26434/libstdc%2B%2B-v3%2Fdocs%2Fdoxygen%2FTODO", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bd2726e0ca52721f244e7683d7a56f9049f26434/libstdc%2B%2B-v3%2Fdocs%2Fdoxygen%2FTODO", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdocs%2Fdoxygen%2FTODO?ref=bd2726e0ca52721f244e7683d7a56f9049f26434", "patch": "@@ -19,11 +19,12 @@ entity to the generated TODO page.\n -----------------------------------------------------------\n \n c17             FINISHED (Nothing in Clause 17 \"exists\" in terms of code.)\n-c18             <limits>, Note A\n+c18             FINISHED, Note A\n c19             Note A\n c20             Note A\n-c21             Untouched, Note B\n-c22             Untouched\n+c21             Untouched (top-level class note for basic_string done),\n+                Note B\n+c22             Untouched; see docs/html/22_locale/*\n c23             See doxygroups.cc and Note B.  Notes on what invalidates\n                 iterators need to be added.  std::list-specific memfns need\n                 to be filled out."}, {"sha": "5813b31e85065d7905fcaab09208203ccb0952da", "filename": "libstdc++-v3/docs/doxygen/run_doxygen", "status": "modified", "additions": 40, "deletions": 3, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bd2726e0ca52721f244e7683d7a56f9049f26434/libstdc%2B%2B-v3%2Fdocs%2Fdoxygen%2Frun_doxygen", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bd2726e0ca52721f244e7683d7a56f9049f26434/libstdc%2B%2B-v3%2Fdocs%2Fdoxygen%2Frun_doxygen", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdocs%2Fdoxygen%2Frun_doxygen?ref=bd2726e0ca52721f244e7683d7a56f9049f26434", "patch": "@@ -1,7 +1,7 @@\n #!/bin/sh\n \n # Runs doxygen and massages the output files.\n-# Copyright (C) 2001, 2002 Free Software Foundation, Inc.\n+# Copyright (C) 2001, 2002, 2003 Free Software Foundation, Inc.\n #\n # Synopsis:  run_doxygen --mode=[user|maint|man]  v3srcdir  v3builddir\n #\n@@ -154,6 +154,11 @@ test $do_html = yes && {\n       -e \"s=@DATE@=${DATEtext}=\" \\\n       ${srcdir}/docs/doxygen/mainpage.html > ${outdir}/html_${mode}/index.html\n   cd ${outdir}/html_${mode}\n+  # The following bit of line noise changes annoying\n+  #   std::foo < typename _Ugly1, typename _Ugly2, .... _DefaultUgly17 >\n+  # to user-friendly\n+  #   std::foo\n+  # in the major \"Compound List\" page.\n   sed -e 's=\\(::[[:alnum:]_]*\\)&lt; .* &gt;=\\1=' annotated.html > annstrip.html\n   mv annstrip.html annotated.html\n   cp ${srcdir}/docs/doxygen/tables.html tables.html\n@@ -231,7 +236,40 @@ a\\\n     mv TEMP $f\n done\n \n-cp ${srcdir}/docs/doxygen/Intro.3 .\n+# Also, break this (generated) line up.  It's ugly as sin.\n+problematic=`grep -l '[^^]Definition at line' *.3`\n+for f in $problematic; do\n+    sed 's/Definition at line/\\\n+.PP\\\n+&/'  $f > TEMP\n+    mv TEMP $f\n+done\n+\n+cp ${srcdir}/docs/doxygen/Intro.3 C++Intro.3\n+\n+# Why didn't I do this at the start?  Were rabid weasels eating my brain?\n+# Who the fsck would \"man std_vector\" when the class isn't named that?\n+for f in std_*; do\n+    newname=`echo $f | sed 's/^std_/std::/'`\n+    mv $f $newname\n+done\n+for f in __gnu_cxx_*; do\n+    newname=`echo $f | sed 's/^__gnu_cxx_/__gnu_cxx::/'`\n+    mv $f $newname\n+done\n+for f in *__policy_*; do\n+    newname=`echo $f | sed 's/__policy_/__policy::/'`\n+    mv $f $newname\n+done\n+\n+# Also, for some reason, typedefs don't get their own man pages.  Sigh.\n+for f in ios streambuf istream ostream iostream stringbuf \\\n+         istringstream ostringstream stringstream filebuf ifstream \\\n+         ofstream fstream string;\n+do\n+    echo \".so man3/std::basic_${f}.3\" > std::${f}.3\n+    echo \".so man3/std::basic_${f}.3\" > std::w${f}.3\n+done\n \n echo ::\n echo :: Man pages in ${outdir}/man\n@@ -243,4 +281,3 @@ echo ::\n exit 0\n \n # vim:ts=4:et:\n-"}, {"sha": "f785f2b808f3826848baf504ce220a10a91e1078", "filename": "libstdc++-v3/docs/doxygen/user.cfg.in", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bd2726e0ca52721f244e7683d7a56f9049f26434/libstdc%2B%2B-v3%2Fdocs%2Fdoxygen%2Fuser.cfg.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bd2726e0ca52721f244e7683d7a56f9049f26434/libstdc%2B%2B-v3%2Fdocs%2Fdoxygen%2Fuser.cfg.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdocs%2Fdoxygen%2Fuser.cfg.in?ref=bd2726e0ca52721f244e7683d7a56f9049f26434", "patch": "@@ -127,7 +127,7 @@ ALWAYS_DETAILED_SEC    = YES\n # ordinary class members. Constructors, destructors and assignment operators of \n # the base classes will not be shown.\n \n-INLINE_INHERITED_MEMB  = NO\n+INLINE_INHERITED_MEMB  = YES\n # pedwards -- this is useful, but ch27 gets huge\n \n # If the FULL_PATH_NAMES tag is set to YES then Doxygen will prepend the full "}, {"sha": "f63a3f777363313609e74c8063d13501af64f7a4", "filename": "libstdc++-v3/docs/html/documentation.html", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bd2726e0ca52721f244e7683d7a56f9049f26434/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2Fdocumentation.html", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bd2726e0ca52721f244e7683d7a56f9049f26434/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2Fdocumentation.html", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2Fdocumentation.html?ref=bd2726e0ca52721f244e7683d7a56f9049f26434", "patch": "@@ -84,9 +84,8 @@ <h2><a name=\"4\">Source-Level Documentation</a></h2>\n    libstdc++-html-*/index.html into a browser.  Feedback (and\n    additional documentation!) is welcome.\n </p>\n-<p>\n- In addition, an initial set of man pages are also available in the\n- same place as the HTML collections.  Start with Intro(3).\n+<p>In addition, an initial set of man pages are also available in the\n+   same place as the HTML collections.  Start with C++Intro(3).\n </p>\n \n "}, {"sha": "eaf3c8663da2dc425b62fafd861aa0f92a935c44", "filename": "libstdc++-v3/include/std/std_limits.h", "status": "modified", "additions": 104, "deletions": 8, "changes": 112, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bd2726e0ca52721f244e7683d7a56f9049f26434/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fstd_limits.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bd2726e0ca52721f244e7683d7a56f9049f26434/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fstd_limits.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fstd_limits.h?ref=bd2726e0ca52721f244e7683d7a56f9049f26434", "patch": "@@ -149,66 +149,162 @@\n \n namespace std\n {\n+  /**\n+   *  @brief Describes the rounding style for floating-point types.\n+   *\n+   *  This is used in the std::numeric_limits class.\n+  */\n   enum float_round_style\n   {\n-    round_indeterminate       = -1,\n-    round_toward_zero         = 0,\n-    round_to_nearest          = 1,\n-    round_toward_infinity     = 2,\n-    round_toward_neg_infinity = 3\n+    round_indeterminate       = -1,    ///< Self-explanatory.\n+    round_toward_zero         = 0,     ///< Self-explanatory.\n+    round_to_nearest          = 1,     ///< To the nearest representable value.\n+    round_toward_infinity     = 2,     ///< Self-explanatory.\n+    round_toward_neg_infinity = 3      ///< Self-explanatory.\n   };\n \n+  /**\n+   *  @brief Describes the denormalization for floating-point types.\n+   *\n+   *  These values represent the presence or absence of a variable number\n+   *  of exponent bits.  This type is used in the std::numeric_limits class.\n+  */\n   enum float_denorm_style\n   {\n+    /// Indeterminate at compile time whether denormalized values are allowed.\n     denorm_indeterminate = -1,\n+    /// The type does not allow denormalized values.\n     denorm_absent        = 0,\n+    /// The type allows denormalized values.\n     denorm_present       = 1\n   };\n \n-  //\n-  // The primary class traits\n-  //\n+  /**\n+   *  @brief Part of std::numeric_limits.\n+   *\n+   *  The @c static @c const members are usable as integral constant\n+   *  expressions.\n+   *\n+   *  @note This is a seperate class for purposes of efficiency; you\n+   *        should only access these members as part of an instantiation\n+   *        of the std::numeric_limits class.\n+  */\n   struct __numeric_limits_base\n   {\n+    /** This will be true for all fundamental types (which have\n+        specializations), and false for everything else.  */\n     static const bool is_specialized = false;\n \n+    /** The number of @c radix digits that be represented without change:  for\n+        integer types, the number of non-sign bits in the mantissa; for\n+        floating types, the number of @c radix digits in the mantissa.  */\n     static const int digits = 0;\n+    /** The number of base 10 digits that can be represented without change. */\n     static const int digits10 = 0;\n+    /** True if the type is signed.  */\n     static const bool is_signed = false;\n+    /** True if the type is integer.\n+     *  @if maint\n+     *  Is this supposed to be \"if the type is integral\"?\n+     *  @endif\n+    */\n     static const bool is_integer = false;\n+    /** True if the type uses an exact representation.  \"All integer types are\n+        exact, but not all exact types are integer.  For example, rational and\n+        fixed-exponent representations are exact but not integer.\"\n+        [18.2.1.2]/15  */\n     static const bool is_exact = false;\n+    /** For integer types, specifies the base of the representation.  For\n+        floating types, specifies the base of the exponent representation.  */\n     static const int radix = 0;\n \n+    /** The minimum negative integer such that @c radix raised to the power of\n+        (one less than that integer) is a normalized floating point number.  */\n     static const int min_exponent = 0;\n+    /** The minimum negative integer such that 10 raised to that power is in\n+        the range of normalized floating point numbers.  */\n     static const int min_exponent10 = 0;\n+    /** The maximum positive integer such that @c radix raised to the power of\n+        (one less than that integer) is a representable finite floating point\n+\tnumber.  */\n     static const int max_exponent = 0;\n+    /** The maximum positive integer such that 10 raised to that power is in\n+        the range of representable finite floating point numbers.  */\n     static const int max_exponent10 = 0;\n \n+    /** True if the type has a representation for positive infinity.  */\n     static const bool has_infinity = false;\n+    /** True if the type has a representation for a quiet (non-signaling)\n+        \"Not a Number.\"  */\n     static const bool has_quiet_NaN = false;\n+    /** True if the type has a representation for a signaling\n+        \"Not a Number.\"  */\n     static const bool has_signaling_NaN = false;\n+    /** See std::float_denorm_style for more information.  */\n     static const float_denorm_style has_denorm = denorm_absent;\n+    /** \"True if loss of accuracy is detected as a denormalization loss,\n+        rather than as an inexact result.\" [18.2.1.2]/42  */\n     static const bool has_denorm_loss = false;\n \n+    /** True if-and-only-if the type adheres to the IEC 559 standard, also\n+        known as IEEE 754.  (Only makes sense for floating point types.)  */\n     static const bool is_iec559 = false;\n+    /** \"True if the set of values representable by the type is finite.   All\n+        built-in types are bounded, this member would be false for arbitrary\n+\tprecision types.\" [18.2.1.2]/54  */\n     static const bool is_bounded = false;\n+    /** True if the type is @e modulo, that is, if it is possible to add two\n+        positive numbers and have a result that wraps around to a third number\n+        that is less.  Typically false for floating types, true for unsigned\n+        integers, and true for signed integers.  */\n     static const bool is_modulo = false;\n \n+    /** True if trapping is implemented for this type.  */\n     static const bool traps = false;\n+    /** True if tinyness is detected before rounding.  (see IEC 559)  */\n     static const bool tinyness_before = false;\n+    /** See std::float_round_style for more information.  This is only\n+        meaningful for floating types; integer types will all be\n+\tround_toward_zero.  */\n     static const float_round_style round_style = round_toward_zero;\n   };\n \n+  /**\n+   *  @brief Properties of fundamental types.\n+   *\n+   *  This class allows a program to obtain information about the\n+   *  representation of a fundamental type on a given platform.  For\n+   *  non-fundamental types, the functions will return 0 and the data\n+   *  members will all be @c false.\n+   *\n+   *  @if maint\n+   *  _GLIBCPP_RESOLVE_LIB_DEFECTS:  DRs 201 and 184 (hi Gaby!) are\n+   *  noted, but not incorporated in this documented (yet).\n+   *  @endif\n+  */\n   template<typename _Tp>\n     struct numeric_limits : public __numeric_limits_base\n     {\n+      /** The minimum finite value, or for floating types with\n+          denormalization, the minimum positive normalized value.  */\n       static _Tp min() throw() { return static_cast<_Tp>(0); }\n+      /** The maximum finite value.  */\n       static _Tp max() throw() { return static_cast<_Tp>(0); }\n+      /** The @e machine @e epsilon:  the difference between 1 and the least\n+          value greater than 1 that is representable.  */\n       static _Tp epsilon() throw() { return static_cast<_Tp>(0); }\n+      /** The maximum rounding error measurement (see LIA-1).  */\n       static _Tp round_error() throw() { return static_cast<_Tp>(0); }\n+      /** The representation of positive infinity, if @c has_infinity.  */\n       static _Tp infinity() throw()  { return static_cast<_Tp>(0); }\n+      /** The representation of a quiet \"Not a Number,\" if @c has_quiet_NaN. */\n       static _Tp quiet_NaN() throw() { return static_cast<_Tp>(0); }\n+      /** The representation of a signaling \"Not a Number,\" if\n+          @c has_signaling_NaN. */\n       static _Tp signaling_NaN() throw() { return static_cast<_Tp>(0); }\n+      /** The minimum positive denormalized value.  For types where\n+          @c has_denorm is false, this is the minimum positive normalized\n+\t  value.  */\n       static _Tp denorm_min() throw() { return static_cast<_Tp>(0); }\n     };\n "}]}