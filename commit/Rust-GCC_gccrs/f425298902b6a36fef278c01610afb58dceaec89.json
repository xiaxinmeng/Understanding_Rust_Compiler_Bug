{"sha": "f425298902b6a36fef278c01610afb58dceaec89", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjQyNTI5ODkwMmI2YTM2ZmVmMjc4YzAxNjEwYWZiNThkY2VhZWM4OQ==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2015-05-27T20:52:55Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2015-05-27T20:52:55Z"}, "message": "decl.c (warn_extern_redeclared_static): Use the location of newdecl in diagnostics, not input_location.\n\n\t* decl.c (warn_extern_redeclared_static): Use the location of\n\tnewdecl in diagnostics, not input_location.\n\t(validate_constexpr_redeclaration): Likewise.\n\t(check_redeclaration_no_default_args): Likewise.\n\t(duplicate_decls): Likewise.\n\t(check_redeclaration_exception_specification): Likewise.\n\tChange second diagnostic to inform.\n\nFrom-SVN: r223777", "tree": {"sha": "8269ddf1d0aef464dcc47583931bb7f030cbb742", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8269ddf1d0aef464dcc47583931bb7f030cbb742"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f425298902b6a36fef278c01610afb58dceaec89", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f425298902b6a36fef278c01610afb58dceaec89", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f425298902b6a36fef278c01610afb58dceaec89", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f425298902b6a36fef278c01610afb58dceaec89/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "929614bf0e95a91e48fd892956fabc68dcfbd58d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/929614bf0e95a91e48fd892956fabc68dcfbd58d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/929614bf0e95a91e48fd892956fabc68dcfbd58d"}], "stats": {"total": 78, "additions": 46, "deletions": 32}, "files": [{"sha": "72dd0eab5bbf75a446c4317c4bbe1b9d3a9b95d3", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f425298902b6a36fef278c01610afb58dceaec89/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f425298902b6a36fef278c01610afb58dceaec89/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=f425298902b6a36fef278c01610afb58dceaec89", "patch": "@@ -1,3 +1,13 @@\n+2015-05-27  Jason Merrill  <jason@redhat.com>\n+\n+\t* decl.c (warn_extern_redeclared_static): Use the location of\n+\tnewdecl in diagnostics, not input_location.\n+\t(validate_constexpr_redeclaration): Likewise.\n+\t(check_redeclaration_no_default_args): Likewise.\n+\t(duplicate_decls): Likewise.\n+\t(check_redeclaration_exception_specification): Likewise.\n+\tChange second diagnostic to inform.\n+\n 2015-05-24  Nathan Sidwell  <nathan@acm.org>\n \n \tPR c++/66243"}, {"sha": "420c7f40065eecffe7ba933ce39ce70d2596f4c2", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 18, "deletions": 18, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f425298902b6a36fef278c01610afb58dceaec89/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f425298902b6a36fef278c01610afb58dceaec89/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=f425298902b6a36fef278c01610afb58dceaec89", "patch": "@@ -1181,7 +1181,7 @@ warn_extern_redeclared_static (tree newdecl, tree olddecl)\n       && DECL_ARTIFICIAL (olddecl))\n     return;\n \n-  if (permerror (input_location,\n+  if (permerror (DECL_SOURCE_LOCATION (newdecl),\n \t\t \"%qD was declared %<extern%> and later %<static%>\", newdecl))\n     inform (input_location, \"previous declaration of %q+D\", olddecl);\n }\n@@ -1218,9 +1218,9 @@ check_redeclaration_exception_specification (tree new_decl,\n       && flag_exceptions\n       && !comp_except_specs (new_exceptions, old_exceptions, ce_normal))\n     {\n-      error (\"declaration of %qF has a different exception specifier\",\n+      error (\"declaration of %q+F has a different exception specifier\",\n \t     new_decl);\n-      error (\"from previous declaration %q+F\", old_decl);\n+      inform (0, \"from previous declaration %q+F\", old_decl);\n     }\n }\n \n@@ -1254,7 +1254,7 @@ validate_constexpr_redeclaration (tree old_decl, tree new_decl)\n \t  && DECL_TEMPLATE_SPECIALIZATION (new_decl))\n \treturn true;\n \n-      error (\"redeclaration %qD differs in %<constexpr%>\", new_decl);\n+      error (\"redeclaration %q+D differs in %<constexpr%>\", new_decl);\n       error (\"from previous declaration %q+D\", old_decl);\n       return false;\n     }\n@@ -1276,7 +1276,7 @@ check_redeclaration_no_default_args (tree decl)\n     if (TREE_PURPOSE (t))\n       {\n \tpermerror (input_location,\n-\t\t   \"redeclaration of %q#D may not have default \"\n+\t\t   \"redeclaration of %q+#D may not have default \"\n \t\t   \"arguments\", decl);\n \treturn;\n       }\n@@ -1394,10 +1394,10 @@ duplicate_decls (tree newdecl, tree olddecl, bool newdecl_is_friend)\n \t  /* If the built-in is not ansi, then programs can override\n \t     it even globally without an error.  */\n \t  else if (! DECL_BUILT_IN (olddecl))\n-\t    warning (0, \"library function %q#D redeclared as non-function %q#D\",\n+\t    warning (0, \"library function %q#D redeclared as non-function %q+#D\",\n \t\t     olddecl, newdecl);\n \t  else\n-\t    error (\"declaration of %q#D conflicts with built-in \"\n+\t    error (\"declaration of %q+#D conflicts with built-in \"\n \t\t   \"declaration %q#D\", newdecl, olddecl);\n \t  return NULL_TREE;\n \t}\n@@ -1457,7 +1457,7 @@ duplicate_decls (tree newdecl, tree olddecl, bool newdecl_is_friend)\n \t      /* A near match; override the builtin.  */\n \n \t      if (TREE_PUBLIC (newdecl))\n-\t\twarning (0, \"new declaration %q#D ambiguates built-in \"\n+\t\twarning (0, \"new declaration %q+#D ambiguates built-in \"\n \t\t\t \"declaration %q#D\", newdecl, olddecl);\n \t      else\n \t\twarning (OPT_Wshadow, \n@@ -1571,7 +1571,7 @@ duplicate_decls (tree newdecl, tree olddecl, bool newdecl_is_friend)\n \t  if (TREE_CODE (DECL_TEMPLATE_RESULT (olddecl)) == TYPE_DECL\n \t      || TREE_CODE (DECL_TEMPLATE_RESULT (newdecl)) == TYPE_DECL)\n \t    {\n-\t      error (\"conflicting declaration of template %q#D\", newdecl);\n+\t      error (\"conflicting declaration of template %q+#D\", newdecl);\n \t      inform (DECL_SOURCE_LOCATION (olddecl),\n \t\t      \"previous declaration %q#D\", olddecl);\n \t      return error_mark_node;\n@@ -1587,7 +1587,7 @@ duplicate_decls (tree newdecl, tree olddecl, bool newdecl_is_friend)\n \t\t   && same_type_p (TREE_TYPE (TREE_TYPE (newdecl)),\n \t\t\t\t   TREE_TYPE (TREE_TYPE (olddecl))))\n \t    {\n-\t      error (\"ambiguating new declaration %q#D\", newdecl);\n+\t      error (\"ambiguating new declaration %q+#D\", newdecl);\n \t      inform (DECL_SOURCE_LOCATION (olddecl),\n \t\t      \"old declaration %q#D\", olddecl);\n \t    }\n@@ -1597,7 +1597,7 @@ duplicate_decls (tree newdecl, tree olddecl, bool newdecl_is_friend)\n \t{\n \t  if (DECL_EXTERN_C_P (newdecl) && DECL_EXTERN_C_P (olddecl))\n \t    {\n-\t      error (\"conflicting declaration of C function %q#D\",\n+\t      error (\"conflicting declaration of C function %q+#D\",\n \t\t     newdecl);\n \t      inform (DECL_SOURCE_LOCATION (olddecl),\n \t\t      \"previous declaration %q#D\", olddecl);\n@@ -1610,7 +1610,7 @@ duplicate_decls (tree newdecl, tree olddecl, bool newdecl_is_friend)\n \t\t   && compparms (TYPE_ARG_TYPES (TREE_TYPE (newdecl)),\n \t\t\t      TYPE_ARG_TYPES (TREE_TYPE (olddecl))))\n \t    {\n-\t      error (\"ambiguating new declaration of %q#D\", newdecl);\n+\t      error (\"ambiguating new declaration of %q+#D\", newdecl);\n \t      inform (DECL_SOURCE_LOCATION (olddecl),\n \t\t      \"old declaration %q#D\", olddecl);\n               return error_mark_node;\n@@ -1620,7 +1620,7 @@ duplicate_decls (tree newdecl, tree olddecl, bool newdecl_is_friend)\n \t}\n       else\n \t{\n-\t  error (\"conflicting declaration %q#D\", newdecl);\n+\t  error (\"conflicting declaration %q+#D\", newdecl);\n \t  inform (DECL_SOURCE_LOCATION (olddecl),\n \t\t  \"previous declaration as %q#D\", olddecl);\n \t  return error_mark_node;\n@@ -1674,7 +1674,7 @@ duplicate_decls (tree newdecl, tree olddecl, bool newdecl_is_friend)\n \t A namespace-name defined at global scope shall not be\n \t declared as the name of any other entity in any global scope\n \t of the program.  */\n-      error (\"conflicting declaration of namespace %qD\", newdecl);\n+      error (\"conflicting declaration of namespace %q+D\", newdecl);\n       inform (DECL_SOURCE_LOCATION (olddecl),\n \t      \"previous declaration of namespace %qD here\", olddecl);\n       return error_mark_node;\n@@ -1699,7 +1699,7 @@ duplicate_decls (tree newdecl, tree olddecl, bool newdecl_is_friend)\n \t{\n \t  /* Prototype decl follows defn w/o prototype.  */\n \t  if (warning_at (DECL_SOURCE_LOCATION (newdecl), 0,\n-\t\t\t  \"prototype specified for %q#D\", newdecl))\n+\t\t\t  \"prototype specified for %q+#D\", newdecl))\n \t    inform (DECL_SOURCE_LOCATION (olddecl),\n \t\t    \"previous non-prototype definition here\");\n \t}\n@@ -1740,7 +1740,7 @@ duplicate_decls (tree newdecl, tree olddecl, bool newdecl_is_friend)\n \t    }\n \t  else\n \t    {\n-\t      error (\"conflicting declaration of %q#D with %qL linkage\",\n+\t      error (\"conflicting declaration of %q+#D with %qL linkage\",\n \t\t     newdecl, DECL_LANGUAGE (newdecl));\n \t      inform (DECL_SOURCE_LOCATION (olddecl),\n \t\t      \"previous declaration with %qL linkage\",\n@@ -1853,7 +1853,7 @@ duplicate_decls (tree newdecl, tree olddecl, bool newdecl_is_friend)\n \t      || DECL_TEMPLATE_SPECIALIZATION (olddecl)))\n \t{\n \t  if (warning (OPT_Wredundant_decls,\n-\t\t       \"redundant redeclaration of %qD in same scope\",\n+\t\t       \"redundant redeclaration of %q+D in same scope\",\n \t\t       newdecl))\n \t    inform (DECL_SOURCE_LOCATION (olddecl),\n \t\t    \"previous declaration of %qD\", olddecl);\n@@ -1864,7 +1864,7 @@ duplicate_decls (tree newdecl, tree olddecl, bool newdecl_is_friend)\n \t{\n \t  if (DECL_DELETED_FN (newdecl))\n \t    {\n-\t      error (\"deleted definition of %qD\", newdecl);\n+\t      error (\"deleted definition of %q+D\", newdecl);\n \t      inform (DECL_SOURCE_LOCATION (olddecl),\n \t\t      \"previous declaration of %qD\", olddecl);\n \t    }"}, {"sha": "14bb2829fb573c71086286098f2bd8c6794fb125", "filename": "gcc/testsuite/g++.dg/cpp0x/noexcept02.C", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f425298902b6a36fef278c01610afb58dceaec89/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fnoexcept02.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f425298902b6a36fef278c01610afb58dceaec89/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fnoexcept02.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fnoexcept02.C?ref=f425298902b6a36fef278c01610afb58dceaec89", "patch": "@@ -10,7 +10,7 @@ void f();\n \n SA(!noexcept(f()));\n \n-void g() throw (int);\t\t// { dg-error \"previous declaration\" }\n+void g() throw (int);\t\t// { dg-message \"previous declaration\" }\n void g() noexcept(false);\t// { dg-error \"different exception\" }\n void g();\n \n@@ -20,7 +20,7 @@ void h() throw();\n void h() noexcept;\n \n template <class T>\n-void g (T) noexcept(noexcept(T())); // { dg-error \"previous declaration\" }\n+void g (T) noexcept(noexcept(T())); // { dg-message \"previous declaration\" }\n template <class T>\n void g (T) noexcept(noexcept(T(0))); // { dg-error \"different exception\" }\n "}, {"sha": "c76032e38351d297298f1c6c73c5b22ea01746ad", "filename": "gcc/testsuite/g++.dg/eh/spec8.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f425298902b6a36fef278c01610afb58dceaec89/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Feh%2Fspec8.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f425298902b6a36fef278c01610afb58dceaec89/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Feh%2Fspec8.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Feh%2Fspec8.C?ref=f425298902b6a36fef278c01610afb58dceaec89", "patch": "@@ -2,7 +2,7 @@\n \n struct exception {};\n \n-template <typename T> void foo() throw(exception); // { dg-error \"declaration\" }\n+template <typename T> void foo() throw(exception); // { dg-message \"declaration\" }\n template <typename T> void foo(); // { dg-error \"exception\" }\n \n struct bar"}, {"sha": "2683718a0de4d343b790715499f8ddda4b5614e1", "filename": "gcc/testsuite/g++.dg/ext/attrib51.C", "status": "added", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f425298902b6a36fef278c01610afb58dceaec89/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fattrib51.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f425298902b6a36fef278c01610afb58dceaec89/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fattrib51.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fattrib51.C?ref=f425298902b6a36fef278c01610afb58dceaec89", "patch": "@@ -0,0 +1,4 @@\n+#define FOO __attribute__ (())\t// { dg-bogus \"\" }\n+\n+void f() throw();\t\t// { dg-message \"\" }\n+void f() FOO;\t\t\t// { dg-error \"\" }"}, {"sha": "37ea51ea845007226cd1ef73e104c78c4da481c5", "filename": "gcc/testsuite/g++.dg/other/error3.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f425298902b6a36fef278c01610afb58dceaec89/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Ferror3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f425298902b6a36fef278c01610afb58dceaec89/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Ferror3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Ferror3.C?ref=f425298902b6a36fef278c01610afb58dceaec89", "patch": "@@ -1,5 +1,5 @@\n // Test for proper error message formatting; the throw() should go inside\n // the parens, as below.\n \n-void (*g() throw())();\t\t// { dg-error \"g\\\\(\\\\) throw\" \"\" }\n+void (*g() throw())();\t\t// { dg-message \"g\\\\(\\\\) throw\" \"\" }\n void (*g())();\t\t\t// { dg-error \"\" \"\" }"}, {"sha": "8d3dc63b7308f5e4a389c5cb0bbc5d45e2f65251", "filename": "gcc/testsuite/g++.dg/template/error36.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f425298902b6a36fef278c01610afb58dceaec89/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Ferror36.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f425298902b6a36fef278c01610afb58dceaec89/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Ferror36.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Ferror36.C?ref=f425298902b6a36fef278c01610afb58dceaec89", "patch": "@@ -2,7 +2,7 @@\n \n template <typename T>\n class foo {\n-    void bar() throw(int); // { dg-error \"throw \\\\(int\\\\)\" }\n+    void bar() throw(int); // { dg-message \"throw \\\\(int\\\\)\" }\n };\n \n template <>"}, {"sha": "7aa474b12ab8722d826a8f09b555c999a2098a4e", "filename": "gcc/testsuite/g++.old-deja/g++.eh/spec6.C", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f425298902b6a36fef278c01610afb58dceaec89/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.eh%2Fspec6.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f425298902b6a36fef278c01610afb58dceaec89/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.eh%2Fspec6.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.eh%2Fspec6.C?ref=f425298902b6a36fef278c01610afb58dceaec89", "patch": "@@ -43,32 +43,32 @@ void baz3() throw(Int, char){}       // typedefs are the same type ...\n void baz4() throw(int, Int, char);   // ... so this is a duplicate\n void baz4() throw(Int, char){}\n \n-void fna() throw(int, char);  // { dg-error \"\" } to previous declaration\n+void fna() throw(int, char);  // { dg-message \"\" } to previous declaration\n void fna() throw(int const, char);  // { dg-error \"\" } declaration  different exceptions // ERROR - to previous declaration\n void fna() throw(int){}       // { dg-error \"\" } declaration  different exceptions\n \n-void fnb() throw(int, char);  // { dg-error \"\" } to previous declaration\n+void fnb() throw(int, char);  // { dg-message \"\" } to previous declaration\n void fnb() throw(char){}      // { dg-error \"\" } declaration  different exceptions\n \n-void fnc() throw(int, char);  // { dg-error \"\" } to previous declaration\n+void fnc() throw(int, char);  // { dg-message \"\" } to previous declaration\n void fnc() throw(char, int, float){}  // { dg-error \"\" } declaration  different exceptions\n \n-void fnd() throw();           // { dg-error \"\" } to previous declaration\n+void fnd() throw();           // { dg-message \"\" } to previous declaration\n void fnd() throw(char){}      // { dg-error \"\" } declaration  different exceptions\n \n-void fne() throw(char);       // { dg-error \"\" } to previous declaration\n+void fne() throw(char);       // { dg-message \"\" } to previous declaration\n void fne() throw(){}          // { dg-error \"\" } declaration  different exceptions\n \n-void fnf();                   // { dg-error \"\" } to previous declaration\n+void fnf();                   // { dg-message \"\" } to previous declaration\n void fnf() throw(char){}      // { dg-error \"\" } declaration  different exceptions\n \n-void fng() throw(char);       // { dg-error \"\" } to previous declaration\n+void fng() throw(char);       // { dg-message \"\" } to previous declaration\n void fng(){}                  // { dg-error \"\" } declaration  different exceptions\n \n-void fnh() throw(int, char);  // { dg-error \"\" } to previous declaration\n+void fnh() throw(int, char);  // { dg-message \"\" } to previous declaration\n void fnh() throw(int, float){}   // { dg-error \"\" } declaration  different exceptions\n \n-void fni() throw(int, char);  // { dg-error \"\" } to previous declaration\n+void fni() throw(int, char);  // { dg-message \"\" } to previous declaration\n void fni() throw(float, char){}  // { dg-error \"\" } declaration  different exceptions\n \n // [except.spec] 3, virtual function overriders shall throw a subset of the"}]}