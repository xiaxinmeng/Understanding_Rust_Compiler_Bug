{"sha": "80ed2a6471a39dd95192a334789fd63d5efd2e8a", "node_id": "C_kwDOANBUbNoAKDgwZWQyYTY0NzFhMzlkZDk1MTkyYTMzNDc4OWZkNjNkNWVmZDJlOGE", "commit": {"author": {"name": "Andrew Pinski", "email": "apinski@marvell.com", "date": "2023-03-23T02:10:11Z"}, "committer": {"name": "Andrew Pinski", "email": "apinski@marvell.com", "date": "2023-03-23T17:24:59Z"}, "message": "c: [PR84900] cast of compound literal does not cause the code to become a non-lvalue\n\nThe problem here is after r0-92187-g2ec5deb5c3146c, maybe_lvalue_p would\nreturn false for compound literals which causes non_lvalue_loc not\nto wrap the expression with a NON_LVALUE_EXPR unlike before when it\nreturn true as it returns true for all language specific tree codes.\n\nThis fixes that oversight and fixes the testcase to have the cast as\na non-lvalue.\n\nCommitted to the trunk as obvious after a bootstrap/test on x86_64-linux-gnu.\n\n\tPR c/84900\n\ngcc/ChangeLog:\n\n\t* fold-const.cc (maybe_lvalue_p): Treat COMPOUND_LITERAL_EXPR\n\tas a lvalue.\n\ngcc/testsuite/ChangeLog:\n\n\t* gcc.dg/compound-literal-cast-lvalue-1.c: New test.", "tree": {"sha": "2681dc02319228dd54f6f5bdec4655fae109d255", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2681dc02319228dd54f6f5bdec4655fae109d255"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/80ed2a6471a39dd95192a334789fd63d5efd2e8a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/80ed2a6471a39dd95192a334789fd63d5efd2e8a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/80ed2a6471a39dd95192a334789fd63d5efd2e8a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/80ed2a6471a39dd95192a334789fd63d5efd2e8a/comments", "author": {"login": "apinski-cavium", "id": 6335315, "node_id": "MDQ6VXNlcjYzMzUzMTU=", "avatar_url": "https://avatars.githubusercontent.com/u/6335315?v=4", "gravatar_id": "", "url": "https://api.github.com/users/apinski-cavium", "html_url": "https://github.com/apinski-cavium", "followers_url": "https://api.github.com/users/apinski-cavium/followers", "following_url": "https://api.github.com/users/apinski-cavium/following{/other_user}", "gists_url": "https://api.github.com/users/apinski-cavium/gists{/gist_id}", "starred_url": "https://api.github.com/users/apinski-cavium/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/apinski-cavium/subscriptions", "organizations_url": "https://api.github.com/users/apinski-cavium/orgs", "repos_url": "https://api.github.com/users/apinski-cavium/repos", "events_url": "https://api.github.com/users/apinski-cavium/events{/privacy}", "received_events_url": "https://api.github.com/users/apinski-cavium/received_events", "type": "User", "site_admin": false}, "committer": {"login": "apinski-cavium", "id": 6335315, "node_id": "MDQ6VXNlcjYzMzUzMTU=", "avatar_url": "https://avatars.githubusercontent.com/u/6335315?v=4", "gravatar_id": "", "url": "https://api.github.com/users/apinski-cavium", "html_url": "https://github.com/apinski-cavium", "followers_url": "https://api.github.com/users/apinski-cavium/followers", "following_url": "https://api.github.com/users/apinski-cavium/following{/other_user}", "gists_url": "https://api.github.com/users/apinski-cavium/gists{/gist_id}", "starred_url": "https://api.github.com/users/apinski-cavium/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/apinski-cavium/subscriptions", "organizations_url": "https://api.github.com/users/apinski-cavium/orgs", "repos_url": "https://api.github.com/users/apinski-cavium/repos", "events_url": "https://api.github.com/users/apinski-cavium/events{/privacy}", "received_events_url": "https://api.github.com/users/apinski-cavium/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5ededfa5b23781c3be6fcf6bb373418aa8bd6541", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5ededfa5b23781c3be6fcf6bb373418aa8bd6541", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5ededfa5b23781c3be6fcf6bb373418aa8bd6541"}], "stats": {"total": 10, "additions": 10, "deletions": 0}, "files": [{"sha": "5b9982e36511ca1678e90f4c91525fae9a84c91e", "filename": "gcc/fold-const.cc", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/80ed2a6471a39dd95192a334789fd63d5efd2e8a/gcc%2Ffold-const.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/80ed2a6471a39dd95192a334789fd63d5efd2e8a/gcc%2Ffold-const.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffold-const.cc?ref=80ed2a6471a39dd95192a334789fd63d5efd2e8a", "patch": "@@ -2646,6 +2646,7 @@ maybe_lvalue_p (const_tree x)\n   case LABEL_DECL:\n   case FUNCTION_DECL:\n   case SSA_NAME:\n+  case COMPOUND_LITERAL_EXPR:\n \n   case COMPONENT_REF:\n   case MEM_REF:"}, {"sha": "729bae2431650d7ba87b50808de82416cebd866e", "filename": "gcc/testsuite/gcc.dg/compound-literal-cast-lvalue-1.c", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/80ed2a6471a39dd95192a334789fd63d5efd2e8a/gcc%2Ftestsuite%2Fgcc.dg%2Fcompound-literal-cast-lvalue-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/80ed2a6471a39dd95192a334789fd63d5efd2e8a/gcc%2Ftestsuite%2Fgcc.dg%2Fcompound-literal-cast-lvalue-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcompound-literal-cast-lvalue-1.c?ref=80ed2a6471a39dd95192a334789fd63d5efd2e8a", "patch": "@@ -0,0 +1,9 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-std=c99\" } */\n+/* PR c/84900; casts from compound literals\n+   were not considered a non-lvalue. */\n+\n+int main() {\n+        int *p = &(int) (int) {0}; /* { dg-error \"lvalue\" } */\n+        return 0;\n+}"}]}