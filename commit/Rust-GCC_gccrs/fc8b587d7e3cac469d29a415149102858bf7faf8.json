{"sha": "fc8b587d7e3cac469d29a415149102858bf7faf8", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmM4YjU4N2Q3ZTNjYWM0NjlkMjlhNDE1MTQ5MTAyODU4YmY3ZmFmOA==", "commit": {"author": {"name": "Wilco Dijkstra", "email": "wdijkstr@arm.com", "date": "2015-05-14T13:35:30Z"}, "committer": {"name": "Jiong Wang", "email": "jiwang@gcc.gnu.org", "date": "2015-05-14T13:35:30Z"}, "message": "[AArch64] Use conditional negate for abs\n\n2015-05-14  Wilco Dijkstra  <wdijkstr@arm.com>\n\n      gcc/\n\t* config/aarch64/aarch64.md (absdi2): Optimize abs expansion.\n\t(csneg3<mode>_insn): Enable expansion of pattern.\n\n      gcc/testsuite/\n\t* gcc.target/aarch64/abs_1.c (abs64): Update test for new abs expansion.\n\t(abs64_in_dreg): Likewise.\n\nFrom-SVN: r223197", "tree": {"sha": "c03c9f9fd75cd041254db4fe8ec2a0848e8726ab", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c03c9f9fd75cd041254db4fe8ec2a0848e8726ab"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/fc8b587d7e3cac469d29a415149102858bf7faf8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fc8b587d7e3cac469d29a415149102858bf7faf8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fc8b587d7e3cac469d29a415149102858bf7faf8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fc8b587d7e3cac469d29a415149102858bf7faf8/comments", "author": null, "committer": null, "parents": [{"sha": "a0c4531ccf06e9381083421e9e7c2bdf89aa7f13", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a0c4531ccf06e9381083421e9e7c2bdf89aa7f13", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a0c4531ccf06e9381083421e9e7c2bdf89aa7f13"}], "stats": {"total": 47, "additions": 19, "deletions": 28}, "files": [{"sha": "ba35c777c7f2251bc4ebe7427698a586de92d6c0", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fc8b587d7e3cac469d29a415149102858bf7faf8/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fc8b587d7e3cac469d29a415149102858bf7faf8/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=fc8b587d7e3cac469d29a415149102858bf7faf8", "patch": "@@ -1,3 +1,8 @@\n+2015-05-14  Wilco Dijkstra  <wdijkstr@arm.com>\n+\n+\t* config/aarch64/aarch64.md (absdi2): Optimize abs expansion.\n+\t(csneg3<mode>_insn): Enable expansion of pattern.\n+\n 2015-05-14  Nick Clifton  <nickc@redhat.com>\n \n \t* config/rl78/rl78.c (rl78_select_section): Select the correct"}, {"sha": "4817fae5d32268a8666544c48ec135375c8c2236", "filename": "gcc/config/aarch64/aarch64.md", "status": "modified", "additions": 7, "deletions": 25, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fc8b587d7e3cac469d29a415149102858bf7faf8/gcc%2Fconfig%2Faarch64%2Faarch64.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fc8b587d7e3cac469d29a415149102858bf7faf8/gcc%2Fconfig%2Faarch64%2Faarch64.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64.md?ref=fc8b587d7e3cac469d29a415149102858bf7faf8", "patch": "@@ -2182,34 +2182,16 @@\n   [(set_attr \"type\" \"alu_ext\")]\n )\n \n-(define_insn_and_split \"absdi2\"\n-  [(set (match_operand:DI 0 \"register_operand\" \"=&r,w\")\n-\t(abs:DI (match_operand:DI 1 \"register_operand\" \"r,w\")))]\n+(define_expand \"abs<mode>2\"\n+  [(match_operand:GPI 0 \"register_operand\" \"\")\n+   (match_operand:GPI 1 \"register_operand\" \"\")]\n   \"\"\n-  \"@\n-   #\n-   abs\\\\t%d0, %d1\"\n-  \"reload_completed\n-   && GP_REGNUM_P (REGNO (operands[0]))\n-   && GP_REGNUM_P (REGNO (operands[1]))\"\n-  [(const_int 0)]\n   {\n-    emit_insn (gen_rtx_SET (operands[0],\n-\t\t\t    gen_rtx_XOR (DImode,\n-\t\t\t\t\t gen_rtx_ASHIFTRT (DImode,\n-\t\t\t\t\t\t\t   operands[1],\n-\t\t\t\t\t\t\t   GEN_INT (63)),\n-\t\t\t\t\t operands[1])));\n-    emit_insn (gen_rtx_SET (operands[0],\n-\t\t\t    gen_rtx_MINUS (DImode,\n-\t\t\t\t\t   operands[0],\n-\t\t\t\t\t   gen_rtx_ASHIFTRT (DImode,\n-\t\t\t\t\t\t\t     operands[1],\n-\t\t\t\t\t\t\t     GEN_INT (63)))));\n+    rtx ccreg = aarch64_gen_compare_reg (LT, operands[1], const0_rtx);\n+    rtx x = gen_rtx_LT (VOIDmode, ccreg, const0_rtx);\n+    emit_insn (gen_csneg3<mode>_insn (operands[0], x, operands[1], operands[1]));\n     DONE;\n   }\n-  [(set_attr \"type\" \"alu_sreg\")\n-   (set_attr \"simd\" \"no,yes\")]\n )\n \n (define_insn \"neg<mode>2\"\n@@ -2888,7 +2870,7 @@\n   [(set_attr \"type\" \"csel\")]\n )\n \n-(define_insn \"*csneg3<mode>_insn\"\n+(define_insn \"csneg3<mode>_insn\"\n   [(set (match_operand:GPI 0 \"register_operand\" \"=r\")\n         (if_then_else:GPI\n \t  (match_operand 1 \"aarch64_comparison_operation\" \"\")"}, {"sha": "504dc075ef18dfde3327fe73b711b73909e137c9", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fc8b587d7e3cac469d29a415149102858bf7faf8/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fc8b587d7e3cac469d29a415149102858bf7faf8/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=fc8b587d7e3cac469d29a415149102858bf7faf8", "patch": "@@ -1,3 +1,8 @@\n+2015-05-14  Wilco Dijkstra  <wdijkstr@arm.com>\n+\n+\t* gcc.target/aarch64/abs_1.c (abs64): Update test for new abs expansion.\n+\t(abs64_in_dreg): Likewise.\n+\n 2015-05-14  Marek Polacek  <polacek@redhat.com>\n \n \tPR c/66066"}, {"sha": "11f1095199c7156ad0e071177bab7804e16b5074", "filename": "gcc/testsuite/gcc.target/aarch64/abs_1.c", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fc8b587d7e3cac469d29a415149102858bf7faf8/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fabs_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fc8b587d7e3cac469d29a415149102858bf7faf8/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fabs_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fabs_1.c?ref=fc8b587d7e3cac469d29a415149102858bf7faf8", "patch": "@@ -7,15 +7,14 @@ extern void abort (void);\n long long\n abs64 (long long a)\n {\n-  /* { dg-final { scan-assembler \"eor\\t\" } } */\n-  /* { dg-final { scan-assembler \"sub\\t\" } } */\n+  /* { dg-final { scan-assembler \"csneg\\t\" } } */\n   return llabs (a);\n }\n \n long long\n abs64_in_dreg (long long a)\n {\n-  /* { dg-final { scan-assembler \"abs\\td\\[0-9\\]+, d\\[0-9\\]+\" } } */\n+  /* { dg-final { scan-assembler \"csneg\\t\" } } */\n   register long long x asm (\"d8\") = a;\n   register long long y asm (\"d9\");\n   asm volatile (\"\" : : \"w\" (x));"}]}