{"sha": "fe4552f4aa8a2a96a58bd2c2d4db8a41bee97936", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmU0NTUyZjRhYThhMmE5NmE1OGJkMmMyZDRkYjhhNDFiZWU5NzkzNg==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2014-02-20T13:46:15Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2014-02-20T13:46:15Z"}, "message": "[multiple changes]\n\n2014-02-20  Robert Dewar  <dewar@adacore.com>\n\n\t* a-crbtgk.adb, a-cihama.adb, a-coinve.adb, a-ciorse.adb, a-crbtgo.adb,\n\ta-cidlli.adb, a-cimutr.adb, a-cihase.adb, a-cohama.adb, a-coorse.adb,\n\ta-chtgke.adb, a-chtgop.adb, a-comutr.adb, a-ciorma.adb, a-cobove.adb,\n\ta-convec.adb, a-cohase.adb, a-chtgbk.adb, a-chtgbo.adb: Minor\n\treformatting.\n\n2014-02-20  Bob Duff  <duff@adacore.com>\n\n\t* s-os_lib.ads: Minor: Remove incorrect comment.\n\n2014-02-20  Robert Dewar  <dewar@adacore.com>\n\n\t* sem_elab.adb (Check_Elab_Assign): Clearer warning message.\n\n2014-02-20  Vincent Celier  <celier@adacore.com>\n\n\t* gnat_rm.texi: Minor syntax error fix.\n\n2014-02-20  Ed Schonberg  <schonberg@adacore.com>\n\n\t* a-cborma.adb (Assign): When creating a node without a specified\n\telement, insert an uninitialized element in the map, because\n\tthe instance may provide an element type with a default\n\tinitialization, e.g a scalar with a Default_Value aspect.\n\t* a-cbhama.adb (Assign_Key): Remove useless Allocate procedure.\n\t(Insert): In the version without explicit element, provide an\n\tuninitialized element, as above.\n\t* a-cbdlli.adb (Append): In the version without explicit element,\n\tprovide an uninitalized element, as above.\n\t(Allocate): Remove unused version.\n\nFrom-SVN: r207945", "tree": {"sha": "e4cb8c593b1d1ed9ddb71de7b3a687023bdc39ba", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e4cb8c593b1d1ed9ddb71de7b3a687023bdc39ba"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/fe4552f4aa8a2a96a58bd2c2d4db8a41bee97936", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fe4552f4aa8a2a96a58bd2c2d4db8a41bee97936", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fe4552f4aa8a2a96a58bd2c2d4db8a41bee97936", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fe4552f4aa8a2a96a58bd2c2d4db8a41bee97936/comments", "author": null, "committer": null, "parents": [{"sha": "3730c4a046da49313042333a265c63567eb127d9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3730c4a046da49313042333a265c63567eb127d9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3730c4a046da49313042333a265c63567eb127d9"}], "stats": {"total": 236, "additions": 141, "deletions": 95}, "files": [{"sha": "7f51998895523e439c31301b7dda9812a342c259", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fe4552f4aa8a2a96a58bd2c2d4db8a41bee97936/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fe4552f4aa8a2a96a58bd2c2d4db8a41bee97936/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=fe4552f4aa8a2a96a58bd2c2d4db8a41bee97936", "patch": "@@ -1,3 +1,32 @@\n+2014-02-20  Robert Dewar  <dewar@adacore.com>\n+\n+\t* a-crbtgk.adb, a-cihama.adb, a-coinve.adb, a-ciorse.adb, a-crbtgo.adb,\n+\ta-cidlli.adb, a-cimutr.adb, a-cihase.adb, a-cohama.adb, a-coorse.adb,\n+\ta-chtgke.adb, a-chtgop.adb, a-comutr.adb, a-ciorma.adb, a-cobove.adb,\n+\ta-convec.adb, a-cohase.adb, a-chtgbk.adb, a-chtgbo.adb: Minor\n+\treformatting.\n+\n+2014-02-20  Bob Duff  <duff@adacore.com>\n+\n+\t* s-os_lib.ads: Minor: Remove incorrect comment.\n+\n+2014-02-20  Robert Dewar  <dewar@adacore.com>\n+\n+\t* sem_elab.adb (Check_Elab_Assign): Clearer warning message.\n+\n+2014-02-20  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* a-cborma.adb (Assign): When creating a node without a specified\n+\telement, insert an uninitialized element in the map, because\n+\tthe instance may provide an element type with a default\n+\tinitialization, e.g a scalar with a Default_Value aspect.\n+\t* a-cbhama.adb (Assign_Key): Remove useless Allocate procedure.\n+\t(Insert): In the version without explicit element, provide an\n+\tuninitialized element, as above.\n+\t* a-cbdlli.adb (Append): In the version without explicit element,\n+\tprovide an uninitalized element, as above.\n+\t(Allocate): Remove unused version.\n+\n 2014-02-20  Robert Dewar  <dewar@adacore.com>\n \n \t* sem_elab.adb: Minor code reorganization (use Nkind_In)."}, {"sha": "51e98bc40ed40334c589a1e651e53051ef540292", "filename": "gcc/ada/a-cbdlli.adb", "status": "modified", "additions": 8, "deletions": 55, "changes": 63, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fe4552f4aa8a2a96a58bd2c2d4db8a41bee97936/gcc%2Fada%2Fa-cbdlli.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fe4552f4aa8a2a96a58bd2c2d4db8a41bee97936/gcc%2Fada%2Fa-cbdlli.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-cbdlli.adb?ref=fe4552f4aa8a2a96a58bd2c2d4db8a41bee97936", "patch": "@@ -40,10 +40,6 @@ package body Ada.Containers.Bounded_Doubly_Linked_Lists is\n       New_Item  : Element_Type;\n       New_Node  : out Count_Type);\n \n-   procedure Allocate\n-     (Container : in out List;\n-      New_Node  : out Count_Type);\n-\n    procedure Allocate\n      (Container : in out List;\n       Stream    : not null access Root_Stream_Type'Class;\n@@ -218,26 +214,6 @@ package body Ada.Containers.Bounded_Doubly_Linked_Lists is\n       end if;\n    end Allocate;\n \n-   procedure Allocate\n-     (Container : in out List;\n-      New_Node  : out Count_Type)\n-   is\n-      N : Node_Array renames Container.Nodes;\n-\n-   begin\n-      if Container.Free >= 0 then\n-         New_Node := Container.Free;\n-         Container.Free := N (New_Node).Next;\n-\n-      else\n-         --  As explained above, a negative free store value means that the\n-         --  links for the nodes in the free store have not been initialized.\n-\n-         New_Node := abs Container.Free;\n-         Container.Free := Container.Free - 1;\n-      end if;\n-   end Allocate;\n-\n    ------------\n    -- Append --\n    ------------\n@@ -1145,40 +1121,17 @@ package body Ada.Containers.Bounded_Doubly_Linked_Lists is\n       Position  : out Cursor;\n       Count     : Count_Type := 1)\n    is\n-      New_Node : Count_Type;\n+      New_Item : Element_Type;  --  Default initialized.\n+      pragma Warnings (Off, New_Item);\n \n    begin\n-      if Before.Container /= null then\n-         if Before.Container /= Container'Unrestricted_Access then\n-            raise Program_Error with\n-              \"Before cursor designates wrong list\";\n-         end if;\n-\n-         pragma Assert (Vet (Before), \"bad cursor in Insert\");\n-      end if;\n-\n-      if Count = 0 then\n-         Position := Before;\n-         return;\n-      end if;\n-\n-      if Container.Length > Container.Capacity - Count then\n-         raise Constraint_Error with \"new length exceeds capacity\";\n-      end if;\n-\n-      if Container.Busy > 0 then\n-         raise Program_Error with\n-           \"attempt to tamper with cursors (list is busy)\";\n-      end if;\n-\n-      Allocate (Container, New_Node => New_Node);\n-      Insert_Internal (Container, Before.Node, New_Node);\n-      Position := Cursor'(Container'Unchecked_Access, New_Node);\n+      --  There is no explicit element provided, but in an instance the\n+      --  element type may be a scalar with a Default_Value aspect, or a\n+      --  composite type with such a scalar component, so  we insert the\n+      --  specified number of possibly initialized elements at the given\n+      --  position.\n \n-      for Index in Count_Type'(2) .. Count loop\n-         Allocate (Container, New_Node => New_Node);\n-         Insert_Internal (Container, Before.Node, New_Node);\n-      end loop;\n+      Insert (Container, Before, New_Item, Position, Count);\n    end Insert;\n \n    ---------------------"}, {"sha": "88f9fa19058d6c6bf2ee234ba501a0bb50fca7c4", "filename": "gcc/ada/a-cbhama.adb", "status": "modified", "additions": 9, "deletions": 5, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fe4552f4aa8a2a96a58bd2c2d4db8a41bee97936/gcc%2Fada%2Fa-cbhama.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fe4552f4aa8a2a96a58bd2c2d4db8a41bee97936/gcc%2Fada%2Fa-cbhama.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-cbhama.adb?ref=fe4552f4aa8a2a96a58bd2c2d4db8a41bee97936", "patch": "@@ -556,15 +556,19 @@ package body Ada.Containers.Bounded_Hashed_Maps is\n       -----------------\n \n       procedure Assign_Key (Node : in out Node_Type) is\n+         New_Item : Element_Type;\n+         pragma Warnings (Off, New_Item);\n+         --  Default-initialized element (ok to reference, see below)\n+\n       begin\n          Node.Key := Key;\n \n-         --  Note that we do not also assign the element component of the node\n-         --  here, because this version of Insert does not accept an element\n-         --  parameter.\n+         --  There is no explicit element provided, but in an instance the\n+         --  element type may be a scalar with a Default_Value aspect, or\n+         --  a composite type with such a scalar component, so we insert\n+         --  a possibly initialized element under the given key.\n \n-         --  Node.Element := New_Item;\n-         --  What is this deleted code about???\n+         Node.Element := New_Item;\n       end Assign_Key;\n \n       --------------"}, {"sha": "1639998e8459721684eb7f5178d3eedc31fc6f63", "filename": "gcc/ada/a-cborma.adb", "status": "modified", "additions": 10, "deletions": 11, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fe4552f4aa8a2a96a58bd2c2d4db8a41bee97936/gcc%2Fada%2Fa-cborma.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fe4552f4aa8a2a96a58bd2c2d4db8a41bee97936/gcc%2Fada%2Fa-cborma.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-cborma.adb?ref=fe4552f4aa8a2a96a58bd2c2d4db8a41bee97936", "patch": "@@ -826,20 +826,19 @@ package body Ada.Containers.Bounded_Ordered_Maps is\n       ------------\n \n       procedure Assign (Node : in out Node_Type) is\n+         New_Item : Element_Type;\n+         pragma Warnings (Off, New_Item);\n+         --  Default-initialized element (ok to reference, see below)\n+\n       begin\n          Node.Key := Key;\n \n-         --  Were this insertion operation to accept an element parameter, this\n-         --  is the point where the element value would be used, to update the\n-         --  element component of the new node. However, this insertion\n-         --  operation is special, in the sense that it does not accept an\n-         --  element parameter. Rather, this version of Insert allocates a node\n-         --  (inserting it among the active nodes of the container in the\n-         --  normal way, with the node's position being determined by the Key),\n-         --  and passes back a cursor designating the node. It is then up to\n-         --  the caller to assign a value to the node's element.\n-\n-         --  Node.Element := New_Item;\n+         --  There is no explicit element provided, but in an instance the\n+         --  element type may be a scalar with a Default_Value aspect, or\n+         --  a composite type with such a scalar component, so we insert\n+         --  a possibly initialized element under the given key.\n+\n+         Node.Element := New_Item;\n       end Assign;\n \n       --------------"}, {"sha": "941da83a49375442f077801468591cd9194e55af", "filename": "gcc/ada/a-chtgbk.adb", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fe4552f4aa8a2a96a58bd2c2d4db8a41bee97936/gcc%2Fada%2Fa-chtgbk.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fe4552f4aa8a2a96a58bd2c2d4db8a41bee97936/gcc%2Fada%2Fa-chtgbk.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-chtgbk.adb?ref=fe4552f4aa8a2a96a58bd2c2d4db8a41bee97936", "patch": "@@ -53,6 +53,7 @@ package body Ada.Containers.Hash_Tables.Generic_Bounded_Keys is\n       L := L - 1;\n \n       return Result;\n+\n    exception\n       when others =>\n          B := B - 1;\n@@ -84,6 +85,7 @@ package body Ada.Containers.Hash_Tables.Generic_Bounded_Keys is\n       L := L - 1;\n \n       return Result;\n+\n    exception\n       when others =>\n          B := B - 1;\n@@ -285,6 +287,7 @@ package body Ada.Containers.Hash_Tables.Generic_Bounded_Keys is\n       declare\n          B : Natural renames HT.Busy;\n          L : Natural renames HT.Lock;\n+\n       begin\n          B := B + 1;\n          L := L + 1;\n@@ -293,6 +296,7 @@ package body Ada.Containers.Hash_Tables.Generic_Bounded_Keys is\n \n          B := B - 1;\n          L := L - 1;\n+\n       exception\n          when others =>\n             B := B - 1;"}, {"sha": "c455741fae88ca635f4d1f67b74f6a79e70c43a6", "filename": "gcc/ada/a-chtgbo.adb", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fe4552f4aa8a2a96a58bd2c2d4db8a41bee97936/gcc%2Fada%2Fa-chtgbo.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fe4552f4aa8a2a96a58bd2c2d4db8a41bee97936/gcc%2Fada%2Fa-chtgbo.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-chtgbo.adb?ref=fe4552f4aa8a2a96a58bd2c2d4db8a41bee97936", "patch": "@@ -54,6 +54,7 @@ package body Ada.Containers.Hash_Tables.Generic_Bounded_Operations is\n       L := L - 1;\n \n       return Result;\n+\n    exception\n       when others =>\n          B := B - 1;\n@@ -378,6 +379,7 @@ package body Ada.Containers.Hash_Tables.Generic_Bounded_Operations is\n          L_Node := Next (L.Nodes (L_Node));\n \n          if L_Node = 0 then\n+\n             --  We have exhausted the nodes in this bucket\n \n             if N = 0 then\n@@ -402,6 +404,7 @@ package body Ada.Containers.Hash_Tables.Generic_Bounded_Operations is\n       LR := LR - 1;\n \n       return Result;\n+\n    exception\n       when others =>\n          BL := BL - 1;"}, {"sha": "df7821d74b915741eeb3716306e2e2a855a0de3f", "filename": "gcc/ada/a-chtgke.adb", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fe4552f4aa8a2a96a58bd2c2d4db8a41bee97936/gcc%2Fada%2Fa-chtgke.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fe4552f4aa8a2a96a58bd2c2d4db8a41bee97936/gcc%2Fada%2Fa-chtgke.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-chtgke.adb?ref=fe4552f4aa8a2a96a58bd2c2d4db8a41bee97936", "patch": "@@ -53,6 +53,7 @@ package body Ada.Containers.Hash_Tables.Generic_Keys is\n       L := L - 1;\n \n       return Result;\n+\n    exception\n       when others =>\n          B := B - 1;\n@@ -84,6 +85,7 @@ package body Ada.Containers.Hash_Tables.Generic_Keys is\n       L := L - 1;\n \n       return Result;\n+\n    exception\n       when others =>\n          B := B - 1;\n@@ -269,6 +271,7 @@ package body Ada.Containers.Hash_Tables.Generic_Keys is\n       declare\n          B : Natural renames HT.Busy;\n          L : Natural renames HT.Lock;\n+\n       begin\n          B := B + 1;\n          L := L + 1;\n@@ -277,6 +280,7 @@ package body Ada.Containers.Hash_Tables.Generic_Keys is\n \n          B := B - 1;\n          L := L - 1;\n+\n       exception\n          when others =>\n             B := B - 1;"}, {"sha": "4227c8f44832d4c47ee47451736f0f1340080d21", "filename": "gcc/ada/a-chtgop.adb", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fe4552f4aa8a2a96a58bd2c2d4db8a41bee97936/gcc%2Fada%2Fa-chtgop.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fe4552f4aa8a2a96a58bd2c2d4db8a41bee97936/gcc%2Fada%2Fa-chtgop.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-chtgop.adb?ref=fe4552f4aa8a2a96a58bd2c2d4db8a41bee97936", "patch": "@@ -145,6 +145,7 @@ package body Ada.Containers.Hash_Tables.Generic_Operations is\n       L := L - 1;\n \n       return Result;\n+\n    exception\n       when others =>\n          B := B - 1;\n@@ -411,6 +412,7 @@ package body Ada.Containers.Hash_Tables.Generic_Operations is\n       LR := LR - 1;\n \n       return Result;\n+\n    exception\n       when others =>\n          BL := BL - 1;\n@@ -738,12 +740,14 @@ package body Ada.Containers.Hash_Tables.Generic_Operations is\n                   pragma Assert (L > 0);\n                   L := L - 1;\n                end loop;\n+\n             exception\n                when others =>\n+\n                   --  If there's an error computing a hash value during a\n-                  --  rehash, then AI-302 says the nodes \"become lost.\"  The\n+                  --  rehash, then AI-302 says the nodes \"become lost.\" The\n                   --  issue is whether to actually deallocate these lost nodes,\n-                  --  since they might be designated by extant cursors.  Here\n+                  --  since they might be designated by extant cursors. Here\n                   --  we decide to deallocate the nodes, since it's better to\n                   --  solve real problems (storage consumption) rather than\n                   --  imaginary ones (the user might, or might not, dereference"}, {"sha": "f1fc3d3beb28aee62ee4e85da619ec155508dc36", "filename": "gcc/ada/a-cidlli.adb", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fe4552f4aa8a2a96a58bd2c2d4db8a41bee97936/gcc%2Fada%2Fa-cidlli.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fe4552f4aa8a2a96a58bd2c2d4db8a41bee97936/gcc%2Fada%2Fa-cidlli.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-cidlli.adb?ref=fe4552f4aa8a2a96a58bd2c2d4db8a41bee97936", "patch": "@@ -609,6 +609,7 @@ package body Ada.Containers.Indefinite_Doubly_Linked_Lists is\n          when others =>\n             B := B - 1;\n             L := L - 1;\n+\n             raise;\n       end;\n    end Find;\n@@ -746,6 +747,7 @@ package body Ada.Containers.Indefinite_Doubly_Linked_Lists is\n          when others =>\n             B := B - 1;\n             L := L - 1;\n+\n             raise;\n       end Is_Sorted;\n \n@@ -945,10 +947,12 @@ package body Ada.Containers.Indefinite_Doubly_Linked_Lists is\n \n             B := B - 1;\n             L := L - 1;\n+\n          exception\n             when others =>\n                B := B - 1;\n                L := L - 1;\n+\n                raise;\n          end;\n \n@@ -1753,6 +1757,7 @@ package body Ada.Containers.Indefinite_Doubly_Linked_Lists is\n          when others =>\n             B := B - 1;\n             L := L - 1;\n+\n             raise;\n       end;\n    end Reverse_Find;"}, {"sha": "7f9978935d965e6496a64ac344c0833a3591e286", "filename": "gcc/ada/a-cihama.adb", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fe4552f4aa8a2a96a58bd2c2d4db8a41bee97936/gcc%2Fada%2Fa-cihama.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fe4552f4aa8a2a96a58bd2c2d4db8a41bee97936/gcc%2Fada%2Fa-cihama.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-cihama.adb?ref=fe4552f4aa8a2a96a58bd2c2d4db8a41bee97936", "patch": "@@ -308,11 +308,9 @@ package body Ada.Containers.Indefinite_Hashed_Maps is\n    function Copy_Node (Node : Node_Access) return Node_Access is\n       K : Key_Access := new Key_Type'(Node.Key.all);\n       E : Element_Access;\n-\n    begin\n       E := new Element_Type'(Node.Element.all);\n       return new Node_Type'(K, E, null);\n-\n    exception\n       when others =>\n          Free_Key (K);\n@@ -603,6 +601,7 @@ package body Ada.Containers.Indefinite_Hashed_Maps is\n \n       begin\n          Free_Key (X.Key);\n+\n       exception\n          when others =>\n             X.Key := null;\n@@ -623,7 +622,6 @@ package body Ada.Containers.Indefinite_Hashed_Maps is\n       exception\n          when others =>\n             X.Element := null;\n-\n             Deallocate (X);\n             raise;\n       end;\n@@ -979,10 +977,12 @@ package body Ada.Containers.Indefinite_Hashed_Maps is\n \n          begin\n             Process (K, E);\n+\n          exception\n             when others =>\n                L := L - 1;\n                B := B - 1;\n+\n                raise;\n          end;\n "}, {"sha": "87c4ac47d5c975dfe45a9006d36f091a9458bbe7", "filename": "gcc/ada/a-cihase.adb", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fe4552f4aa8a2a96a58bd2c2d4db8a41bee97936/gcc%2Fada%2Fa-cihase.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fe4552f4aa8a2a96a58bd2c2d4db8a41bee97936/gcc%2Fada%2Fa-cihase.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-cihase.adb?ref=fe4552f4aa8a2a96a58bd2c2d4db8a41bee97936", "patch": "@@ -471,6 +471,7 @@ package body Ada.Containers.Indefinite_Hashed_Sets is\n \n                begin\n                   Bucket := new Node_Type'(Tgt, Bucket);\n+\n                exception\n                   when others =>\n                      Free_Element (Tgt);\n@@ -485,6 +486,7 @@ package body Ada.Containers.Indefinite_Hashed_Sets is\n \n       begin\n          Iterate (Left.HT);\n+\n       exception\n          when others =>\n             HT_Ops.Free_Hash_Table (Buckets);\n@@ -774,6 +776,7 @@ package body Ada.Containers.Indefinite_Hashed_Sets is\n \n       begin\n          Free_Element (X.Element);\n+\n       exception\n          when others =>\n             X.Element := null;\n@@ -1021,6 +1024,7 @@ package body Ada.Containers.Indefinite_Hashed_Sets is\n \n                begin\n                   Bucket := new Node_Type'(Tgt, Bucket);\n+\n                exception\n                   when others =>\n                      Free_Element (Tgt);\n@@ -1035,6 +1039,7 @@ package body Ada.Containers.Indefinite_Hashed_Sets is\n \n       begin\n          Iterate (Left.HT);\n+\n       exception\n          when others =>\n             HT_Ops.Free_Hash_Table (Buckets);\n@@ -1753,6 +1758,7 @@ package body Ada.Containers.Indefinite_Hashed_Sets is\n \n       begin\n          Iterate (Right_HT);\n+\n       exception\n          when others =>\n             HT_Ops.Free_Hash_Table (Buckets);\n@@ -1916,6 +1922,7 @@ package body Ada.Containers.Indefinite_Hashed_Sets is\n \n          L := L - 1;\n          B := B - 1;\n+\n       exception\n          when others =>\n             L := L - 1;\n@@ -1991,6 +1998,7 @@ package body Ada.Containers.Indefinite_Hashed_Sets is\n \n          LL := LL - 1;\n          LB := LB - 1;\n+\n       exception\n          when others =>\n             RL := RL - 1;\n@@ -2426,10 +2434,12 @@ package body Ada.Containers.Indefinite_Hashed_Sets is\n                Indx := HT_Ops.Index (HT, Position.Node);\n                Process (E);\n                Eq := Equivalent_Keys (K, Key (E));\n+\n             exception\n                when others =>\n                   L := L - 1;\n                   B := B - 1;\n+\n                   raise;\n             end;\n "}, {"sha": "2405a172eb8da0e13548653fa24316c7791c9600", "filename": "gcc/ada/a-cimutr.adb", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fe4552f4aa8a2a96a58bd2c2d4db8a41bee97936/gcc%2Fada%2Fa-cimutr.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fe4552f4aa8a2a96a58bd2c2d4db8a41bee97936/gcc%2Fada%2Fa-cimutr.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-cimutr.adb?ref=fe4552f4aa8a2a96a58bd2c2d4db8a41bee97936", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 2004-2012, Free Software Foundation, Inc.         --\n+--          Copyright (C) 2004-2013, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -2746,6 +2746,7 @@ package body Ada.Containers.Indefinite_Multiway_Trees is\n          when others =>\n             L := L - 1;\n             B := B - 1;\n+\n             raise;\n       end;\n    end Update_Element;"}, {"sha": "d62f6076ca012ba8baee41f9c4fab0f0a5e0bde3", "filename": "gcc/ada/a-ciorma.adb", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fe4552f4aa8a2a96a58bd2c2d4db8a41bee97936/gcc%2Fada%2Fa-ciorma.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fe4552f4aa8a2a96a58bd2c2d4db8a41bee97936/gcc%2Fada%2Fa-ciorma.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-ciorma.adb?ref=fe4552f4aa8a2a96a58bd2c2d4db8a41bee97936", "patch": "@@ -455,6 +455,7 @@ package body Ada.Containers.Indefinite_Ordered_Maps is\n                             Color   => Source.Color,\n                             Key     => K,\n                             Element => E);\n+\n    exception\n       when others =>\n          Free_Key (K);\n@@ -966,6 +967,7 @@ package body Ada.Containers.Indefinite_Ordered_Maps is\n \n       begin\n          Local_Iterate (Container.Tree);\n+\n       exception\n          when others =>\n             B := B - 1;\n@@ -1305,7 +1307,6 @@ package body Ada.Containers.Indefinite_Ordered_Maps is\n          declare\n             K : Key_Type renames Position.Node.Key.all;\n             E : Element_Type renames Position.Node.Element.all;\n-\n          begin\n             Process (K, E);\n          exception\n@@ -1683,10 +1684,8 @@ package body Ada.Containers.Indefinite_Ordered_Maps is\n          declare\n             K : Key_Type renames Position.Node.Key.all;\n             E : Element_Type renames Position.Node.Element.all;\n-\n          begin\n             Process (K, E);\n-\n          exception\n             when others =>\n                L := L - 1;"}, {"sha": "b79d27e8b1553b0bec614a0e915c4580f571bf06", "filename": "gcc/ada/a-ciorse.adb", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fe4552f4aa8a2a96a58bd2c2d4db8a41bee97936/gcc%2Fada%2Fa-ciorse.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fe4552f4aa8a2a96a58bd2c2d4db8a41bee97936/gcc%2Fada%2Fa-ciorse.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-ciorse.adb?ref=fe4552f4aa8a2a96a58bd2c2d4db8a41bee97936", "patch": "@@ -440,6 +440,7 @@ package body Ada.Containers.Indefinite_Ordered_Sets is\n                             Right   => null,\n                             Color   => Source.Color,\n                             Element => Element);\n+\n    exception\n       when others =>\n          Free_Element (Element);\n@@ -1908,6 +1909,7 @@ package body Ada.Containers.Indefinite_Ordered_Sets is\n          when others =>\n             L := L - 1;\n             B := B - 1;\n+\n             raise;\n       end;\n \n@@ -1960,6 +1962,7 @@ package body Ada.Containers.Indefinite_Ordered_Sets is\n             when others =>\n                L := L - 1;\n                B := B - 1;\n+\n                raise;\n          end;\n "}, {"sha": "28f6f4dd9ac50461a3c37372af7f7dcc2383402e", "filename": "gcc/ada/a-cobove.adb", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fe4552f4aa8a2a96a58bd2c2d4db8a41bee97936/gcc%2Fada%2Fa-cobove.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fe4552f4aa8a2a96a58bd2c2d4db8a41bee97936/gcc%2Fada%2Fa-cobove.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-cobove.adb?ref=fe4552f4aa8a2a96a58bd2c2d4db8a41bee97936", "patch": "@@ -785,6 +785,7 @@ package body Ada.Containers.Bounded_Vectors is\n          when others =>\n             B := B - 1;\n             L := L - 1;\n+\n             raise;\n       end;\n    end Find;\n@@ -827,6 +828,7 @@ package body Ada.Containers.Bounded_Vectors is\n       when others =>\n          B := B - 1;\n          L := L - 1;\n+\n          raise;\n    end Find_Index;\n \n@@ -937,6 +939,7 @@ package body Ada.Containers.Bounded_Vectors is\n             when others =>\n                B := B - 1;\n                L := L - 1;\n+\n                raise;\n          end;\n       end Is_Sorted;\n@@ -1096,6 +1099,7 @@ package body Ada.Containers.Bounded_Vectors is\n             when others =>\n                B := B - 1;\n                L := L - 1;\n+\n                raise;\n          end;\n       end Sort;\n@@ -2492,10 +2496,12 @@ package body Ada.Containers.Bounded_Vectors is\n          else\n             return Cursor'(Container'Unrestricted_Access, Result);\n          end if;\n+\n       exception\n          when others =>\n             B := B - 1;\n             L := L - 1;\n+\n             raise;\n       end;\n    end Reverse_Find;\n@@ -2541,6 +2547,7 @@ package body Ada.Containers.Bounded_Vectors is\n       when others =>\n          B := B - 1;\n          L := L - 1;\n+\n          raise;\n    end Reverse_Find_Index;\n "}, {"sha": "70e7758c9d83d3b3d31e05e016b692fd0a46b826", "filename": "gcc/ada/a-cohama.adb", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fe4552f4aa8a2a96a58bd2c2d4db8a41bee97936/gcc%2Fada%2Fa-cohama.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fe4552f4aa8a2a96a58bd2c2d4db8a41bee97936/gcc%2Fada%2Fa-cohama.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-cohama.adb?ref=fe4552f4aa8a2a96a58bd2c2d4db8a41bee97936", "patch": "@@ -887,7 +887,6 @@ package body Ada.Containers.Hashed_Maps is\n          declare\n             K : Key_Type renames Position.Node.Key;\n             E : Element_Type renames Position.Node.Element;\n-\n          begin\n             Process (K, E);\n          exception\n@@ -1134,10 +1133,8 @@ package body Ada.Containers.Hashed_Maps is\n          declare\n             K : Key_Type renames Position.Node.Key;\n             E : Element_Type renames Position.Node.Element;\n-\n          begin\n             Process (K, E);\n-\n          exception\n             when others =>\n                L := L - 1;"}, {"sha": "129ad6a71206fccdf38ece7d5f19468fd68764ae", "filename": "gcc/ada/a-cohase.adb", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fe4552f4aa8a2a96a58bd2c2d4db8a41bee97936/gcc%2Fada%2Fa-cohase.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fe4552f4aa8a2a96a58bd2c2d4db8a41bee97936/gcc%2Fada%2Fa-cohase.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-cohase.adb?ref=fe4552f4aa8a2a96a58bd2c2d4db8a41bee97936", "patch": "@@ -1208,7 +1208,6 @@ package body Ada.Containers.Hashed_Sets is\n      return Node_Access\n    is\n       Node : Node_Access := new Node_Type;\n-\n    begin\n       Element_Type'Read (Stream, Node.Element);\n       return Node;\n@@ -1522,6 +1521,7 @@ package body Ada.Containers.Hashed_Sets is\n \n       begin\n          Iterate (Left_HT);\n+\n       exception\n          when others =>\n             HT_Ops.Free_Hash_Table (Buckets);\n@@ -1563,6 +1563,7 @@ package body Ada.Containers.Hashed_Sets is\n \n       begin\n          Iterate (Right_HT);\n+\n       exception\n          when others =>\n             HT_Ops.Free_Hash_Table (Buckets);\n@@ -1718,6 +1719,7 @@ package body Ada.Containers.Hashed_Sets is\n \n          L := L - 1;\n          B := B - 1;\n+\n       exception\n          when others =>\n             L := L - 1;\n@@ -1785,6 +1787,7 @@ package body Ada.Containers.Hashed_Sets is\n \n          LL := LL - 1;\n          LB := LB - 1;\n+\n       exception\n          when others =>\n             RL := RL - 1;"}, {"sha": "3234f5ec87a034e763342c3d18bd1cfc59e5bcb3", "filename": "gcc/ada/a-coinve.adb", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fe4552f4aa8a2a96a58bd2c2d4db8a41bee97936/gcc%2Fada%2Fa-coinve.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fe4552f4aa8a2a96a58bd2c2d4db8a41bee97936/gcc%2Fada%2Fa-coinve.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-coinve.adb?ref=fe4552f4aa8a2a96a58bd2c2d4db8a41bee97936", "patch": "@@ -543,6 +543,7 @@ package body Ada.Containers.Indefinite_Vectors is\n       LR := LR - 1;\n \n       return Result;\n+\n    exception\n       when others =>\n          BL := BL - 1;\n@@ -1280,6 +1281,7 @@ package body Ada.Containers.Indefinite_Vectors is\n       when others =>\n          B := B - 1;\n          L := L - 1;\n+\n          raise;\n    end Find_Index;\n \n@@ -1421,6 +1423,7 @@ package body Ada.Containers.Indefinite_Vectors is\n             when others =>\n                B := B - 1;\n                L := L - 1;\n+\n                raise;\n          end;\n       end Is_Sorted;\n@@ -1599,6 +1602,7 @@ package body Ada.Containers.Indefinite_Vectors is\n             when others =>\n                B := B - 1;\n                L := L - 1;\n+\n                raise;\n          end;\n       end Sort;"}, {"sha": "01e7e1c809cbdf51ad0de256f8651b03ac96d18e", "filename": "gcc/ada/a-comutr.adb", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fe4552f4aa8a2a96a58bd2c2d4db8a41bee97936/gcc%2Fada%2Fa-comutr.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fe4552f4aa8a2a96a58bd2c2d4db8a41bee97936/gcc%2Fada%2Fa-comutr.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-comutr.adb?ref=fe4552f4aa8a2a96a58bd2c2d4db8a41bee97936", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 2004-2012, Free Software Foundation, Inc.         --\n+--          Copyright (C) 2004-2013, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -1934,6 +1934,7 @@ package body Ada.Containers.Multiway_Trees is\n          when others =>\n             L := L - 1;\n             B := B - 1;\n+\n             raise;\n       end;\n    end Query_Element;\n@@ -2723,6 +2724,7 @@ package body Ada.Containers.Multiway_Trees is\n          when others =>\n             L := L - 1;\n             B := B - 1;\n+\n             raise;\n       end;\n    end Update_Element;"}, {"sha": "ef4d75494df2d5b149bf62df88bab2d4eddf82fc", "filename": "gcc/ada/a-convec.adb", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fe4552f4aa8a2a96a58bd2c2d4db8a41bee97936/gcc%2Fada%2Fa-convec.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fe4552f4aa8a2a96a58bd2c2d4db8a41bee97936/gcc%2Fada%2Fa-convec.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-convec.adb?ref=fe4552f4aa8a2a96a58bd2c2d4db8a41bee97936", "patch": "@@ -943,6 +943,7 @@ package body Ada.Containers.Vectors is\n          when others =>\n             B := B - 1;\n             L := L - 1;\n+\n             raise;\n       end;\n    end Find;\n@@ -985,6 +986,7 @@ package body Ada.Containers.Vectors is\n       when others =>\n          B := B - 1;\n          L := L - 1;\n+\n          raise;\n    end Find_Index;\n \n@@ -1095,6 +1097,7 @@ package body Ada.Containers.Vectors is\n             when others =>\n                B := B - 1;\n                L := L - 1;\n+\n                raise;\n          end;\n       end Is_Sorted;\n@@ -1257,6 +1260,7 @@ package body Ada.Containers.Vectors is\n             when others =>\n                B := B - 1;\n                L := L - 1;\n+\n                raise;\n          end;\n       end Sort;\n@@ -3288,6 +3292,7 @@ package body Ada.Containers.Vectors is\n          when others =>\n             B := B - 1;\n             L := L - 1;\n+\n             raise;\n       end;\n    end Reverse_Find;\n@@ -3333,6 +3338,7 @@ package body Ada.Containers.Vectors is\n       when others =>\n          B := B - 1;\n          L := L - 1;\n+\n          raise;\n    end Reverse_Find_Index;\n "}, {"sha": "675b40fcc39e6b07200c450167ab13dcf7ab829c", "filename": "gcc/ada/a-coorse.adb", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fe4552f4aa8a2a96a58bd2c2d4db8a41bee97936/gcc%2Fada%2Fa-coorse.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fe4552f4aa8a2a96a58bd2c2d4db8a41bee97936/gcc%2Fada%2Fa-coorse.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-coorse.adb?ref=fe4552f4aa8a2a96a58bd2c2d4db8a41bee97936", "patch": "@@ -1742,6 +1742,7 @@ package body Ada.Containers.Ordered_Sets is\n          when others =>\n             L := L - 1;\n             B := B - 1;\n+\n             raise;\n       end;\n \n@@ -1783,6 +1784,7 @@ package body Ada.Containers.Ordered_Sets is\n             when others =>\n                L := L - 1;\n                B := B - 1;\n+\n                raise;\n          end;\n "}, {"sha": "ae8dd7c6c7aee2f33f6d723677fd4f70907fd9d0", "filename": "gcc/ada/a-crbtgk.adb", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fe4552f4aa8a2a96a58bd2c2d4db8a41bee97936/gcc%2Fada%2Fa-crbtgk.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fe4552f4aa8a2a96a58bd2c2d4db8a41bee97936/gcc%2Fada%2Fa-crbtgk.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-crbtgk.adb?ref=fe4552f4aa8a2a96a58bd2c2d4db8a41bee97936", "patch": "@@ -77,6 +77,7 @@ package body Ada.Containers.Red_Black_Trees.Generic_Keys is\n       when others =>\n          B := B - 1;\n          L := L - 1;\n+\n          raise;\n    end Ceiling;\n \n@@ -136,6 +137,7 @@ package body Ada.Containers.Red_Black_Trees.Generic_Keys is\n       when others =>\n          B := B - 1;\n          L := L - 1;\n+\n          raise;\n    end Find;\n \n@@ -183,6 +185,7 @@ package body Ada.Containers.Red_Black_Trees.Generic_Keys is\n       when others =>\n          B := B - 1;\n          L := L - 1;\n+\n          raise;\n    end Floor;\n \n@@ -252,6 +255,7 @@ package body Ada.Containers.Red_Black_Trees.Generic_Keys is\n          when others =>\n             L := L - 1;\n             B := B - 1;\n+\n             raise;\n       end;\n \n@@ -297,6 +301,7 @@ package body Ada.Containers.Red_Black_Trees.Generic_Keys is\n          when others =>\n             L := L - 1;\n             B := B - 1;\n+\n             raise;\n       end;\n \n@@ -374,6 +379,7 @@ package body Ada.Containers.Red_Black_Trees.Generic_Keys is\n             when others =>\n                L := L - 1;\n                B := B - 1;\n+\n                raise;\n          end;\n \n@@ -419,6 +425,7 @@ package body Ada.Containers.Red_Black_Trees.Generic_Keys is\n          when others =>\n             L := L - 1;\n             B := B - 1;\n+\n             raise;\n       end;\n \n@@ -445,6 +452,7 @@ package body Ada.Containers.Red_Black_Trees.Generic_Keys is\n             when others =>\n                L := L - 1;\n                B := B - 1;\n+\n                raise;\n          end;\n \n@@ -483,6 +491,7 @@ package body Ada.Containers.Red_Black_Trees.Generic_Keys is\n          when others =>\n             L := L - 1;\n             B := B - 1;\n+\n             raise;\n       end;\n \n@@ -509,6 +518,7 @@ package body Ada.Containers.Red_Black_Trees.Generic_Keys is\n             when others =>\n                L := L - 1;\n                B := B - 1;\n+\n                raise;\n          end;\n "}, {"sha": "a75f069acb7b5a9309e7aa57d3dcb4f44a068463", "filename": "gcc/ada/a-crbtgo.adb", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fe4552f4aa8a2a96a58bd2c2d4db8a41bee97936/gcc%2Fada%2Fa-crbtgo.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fe4552f4aa8a2a96a58bd2c2d4db8a41bee97936/gcc%2Fada%2Fa-crbtgo.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-crbtgo.adb?ref=fe4552f4aa8a2a96a58bd2c2d4db8a41bee97936", "patch": "@@ -598,6 +598,7 @@ package body Ada.Containers.Red_Black_Trees.Generic_Operations is\n       end loop;\n \n       return Target_Root;\n+\n    exception\n       when others =>\n          Delete_Tree (Target_Root);"}, {"sha": "4de43932dbee5a8fc26a7ad579db8beb8aedad5e", "filename": "gcc/ada/gnat_rm.texi", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fe4552f4aa8a2a96a58bd2c2d4db8a41bee97936/gcc%2Fada%2Fgnat_rm.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fe4552f4aa8a2a96a58bd2c2d4db8a41bee97936/gcc%2Fada%2Fgnat_rm.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgnat_rm.texi?ref=fe4552f4aa8a2a96a58bd2c2d4db8a41bee97936", "patch": "@@ -7381,7 +7381,7 @@ pragma Warnings (On | Off, LOCAL_NAME [,REASON]);\n pragma Warnings (static_string_EXPRESSION [,REASON]);\n pragma Warnings (On | Off, static_string_EXPRESSION [,REASON]);\n \n-REASON ::= Reason => STRING_LITERAL {& STRING_LITERAL}\n+REASON ::= Reason => STRING_LITERAL @{& STRING_LITERAL@}\n @end smallexample\n \n @noindent"}, {"sha": "32a006eac565b186b47f03d821a9996858223595", "filename": "gcc/ada/s-os_lib.ads", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fe4552f4aa8a2a96a58bd2c2d4db8a41bee97936/gcc%2Fada%2Fs-os_lib.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fe4552f4aa8a2a96a58bd2c2d4db8a41bee97936/gcc%2Fada%2Fs-os_lib.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-os_lib.ads?ref=fe4552f4aa8a2a96a58bd2c2d4db8a41bee97936", "patch": "@@ -802,10 +802,8 @@ package System.OS_Lib is\n    --  Similar to the procedure above, but saves the output of the command to\n    --  a file with the name Output_File.\n    --\n-   --  Success is set to True if the command is executed and its output\n-   --  successfully written to the file. Invalid_Pid is returned if the output\n-   --  file could not be created or if the program could not be spawned\n-   --  successfully.\n+   --  Invalid_Pid is returned if the output file could not be created or if\n+   --  the program could not be spawned successfully.\n    --\n    --  Spawning processes from tasking programs is not recommended. See\n    --  \"NOTE: Spawn in tasking programs\" below."}, {"sha": "87db5eee60df074c6507fedeb619fc4aa0d31809", "filename": "gcc/ada/sem_elab.adb", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fe4552f4aa8a2a96a58bd2c2d4db8a41bee97936/gcc%2Fada%2Fsem_elab.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fe4552f4aa8a2a96a58bd2c2d4db8a41bee97936/gcc%2Fada%2Fsem_elab.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_elab.adb?ref=fe4552f4aa8a2a96a58bd2c2d4db8a41bee97936", "patch": "@@ -1717,13 +1717,11 @@ package body Sem_Elab is\n             Error_Msg_Sloc := Sloc (Ent);\n \n             Error_Msg_NE\n-              (\"??elaboration code may access& before it is initialized\",\n+              (\"??& can be accessed by clients before this initialization\",\n                N, Ent);\n             Error_Msg_NE\n-              (\"\\??suggest adding pragma Elaborate_Body to spec of &\",\n-               N, Scop);\n-            Error_Msg_N\n-              (\"\\??or an explicit initialization could be added #\", N);\n+              (\"\\??add Elaborate_Body to spec to ensure & is initialized\",\n+               N, Ent);\n          end if;\n \n          if not All_Errors_Mode then"}]}