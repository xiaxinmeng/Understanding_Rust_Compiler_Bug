{"sha": "8a731f44bfba5ef4a13845e42d781c30abd99a33", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGE3MzFmNDRiZmJhNWVmNGExMzg0NWU0MmQ3ODFjMzBhYmQ5OWEzMw==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2018-06-28T07:43:36Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2018-06-28T07:43:36Z"}, "message": "dwarf2out.c (gen_subprogram_die): Always re-use DIEs with an DW_AT_abstract_origin attribute.\n\n2018-06-28  Richard Biener  <rguenther@suse.de>\n\n\t* dwarf2out.c (gen_subprogram_die): Always re-use DIEs with an\n\tDW_AT_abstract_origin attribute.\n\nFrom-SVN: r262213", "tree": {"sha": "4ca6ef8ccff84a14d7894331d8d8f31c431dfa72", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4ca6ef8ccff84a14d7894331d8d8f31c431dfa72"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8a731f44bfba5ef4a13845e42d781c30abd99a33", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8a731f44bfba5ef4a13845e42d781c30abd99a33", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8a731f44bfba5ef4a13845e42d781c30abd99a33", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8a731f44bfba5ef4a13845e42d781c30abd99a33/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "1aabb71d1331430965794be43f01d0e42e1351e3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1aabb71d1331430965794be43f01d0e42e1351e3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1aabb71d1331430965794be43f01d0e42e1351e3"}], "stats": {"total": 40, "additions": 24, "deletions": 16}, "files": [{"sha": "e5567914e8f3ebab72899501997cc085e35932c3", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8a731f44bfba5ef4a13845e42d781c30abd99a33/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8a731f44bfba5ef4a13845e42d781c30abd99a33/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=8a731f44bfba5ef4a13845e42d781c30abd99a33", "patch": "@@ -1,3 +1,8 @@\n+2018-06-28  Richard Biener  <rguenther@suse.de>\n+\n+\t* dwarf2out.c (gen_subprogram_die): Always re-use DIEs with an\n+\tDW_AT_abstract_origin attribute.\n+\n 2018-06-28  Martin Liska  <mliska@suse.cz>\n \n \t* tree-switch-conversion.c (jump_table_cluster::can_be_handled):"}, {"sha": "bcd47c8363bf0a278c9aff995b1f8b27faf774c5", "filename": "gcc/dwarf2out.c", "status": "modified", "additions": 19, "deletions": 16, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8a731f44bfba5ef4a13845e42d781c30abd99a33/gcc%2Fdwarf2out.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8a731f44bfba5ef4a13845e42d781c30abd99a33/gcc%2Fdwarf2out.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdwarf2out.c?ref=8a731f44bfba5ef4a13845e42d781c30abd99a33", "patch": "@@ -22780,33 +22780,36 @@ gen_subprogram_die (tree decl, dw_die_ref context_die)\n \t apply; we just use the old DIE.  */\n       expanded_location s = expand_location (DECL_SOURCE_LOCATION (decl));\n       struct dwarf_file_data * file_index = lookup_filename (s.file);\n-      if ((is_cu_die (old_die->die_parent)\n-\t   /* This condition fixes the inconsistency/ICE with the\n-\t      following Fortran test (or some derivative thereof) while\n-\t      building libgfortran:\n-\n-\t\t module some_m\n-\t\t contains\n-\t\t    logical function funky (FLAG)\n-\t\t      funky = .true.\n-\t\t   end function\n-\t\t end module\n-\t   */\n-\t   || (old_die->die_parent\n-\t       && old_die->die_parent->die_tag == DW_TAG_module)\n-\t   || context_die == NULL)\n+      if (((is_cu_die (old_die->die_parent)\n+\t    /* This condition fixes the inconsistency/ICE with the\n+\t       following Fortran test (or some derivative thereof) while\n+\t       building libgfortran:\n+\n+\t\t  module some_m\n+\t\t  contains\n+\t\t     logical function funky (FLAG)\n+\t\t       funky = .true.\n+\t\t    end function\n+\t\t  end module\n+\t     */\n+\t    || (old_die->die_parent\n+\t\t&& old_die->die_parent->die_tag == DW_TAG_module)\n+\t    || context_die == NULL)\n \t   && (DECL_ARTIFICIAL (decl)\n \t       /* The location attributes may be in the abstract origin\n \t\t  which in the case of LTO might be not available to\n \t\t  look at.  */\n-\t       || get_AT (old_die, DW_AT_abstract_origin)\n \t       || (get_AT_file (old_die, DW_AT_decl_file) == file_index\n \t\t   && (get_AT_unsigned (old_die, DW_AT_decl_line)\n \t\t       == (unsigned) s.line)\n \t\t   && (!debug_column_info\n \t\t       || s.column == 0\n \t\t       || (get_AT_unsigned (old_die, DW_AT_decl_column)\n \t\t\t   == (unsigned) s.column)))))\n+\t  /* With LTO if there's an abstract instance for\n+\t     the old DIE, this is a concrete instance and\n+\t     thus re-use the DIE.  */\n+\t  || get_AT (old_die, DW_AT_abstract_origin))\n \t{\n \t  subr_die = old_die;\n "}]}