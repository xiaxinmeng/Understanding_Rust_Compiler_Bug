{"sha": "45abaea89ceed7cbd6128a841605430da841064a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDVhYmFlYTg5Y2VlZDdjYmQ2MTI4YTg0MTYwNTQzMGRhODQxMDY0YQ==", "commit": {"author": {"name": "Nathan Sidwell", "email": "nathan@codesourcery.com", "date": "2001-02-12T15:09:01Z"}, "committer": {"name": "Nathan Sidwell", "email": "nathan@gcc.gnu.org", "date": "2001-02-12T15:09:01Z"}, "message": "typeck2.c (process_init_constructor): Check TREE_HAS_CONSTRUCTOR before issuing missing init warning.\n\ncp:\n\t* typeck2.c (process_init_constructor): Check\n\tTREE_HAS_CONSTRUCTOR before issuing missing init warning.\ntestsuite:\n\t* g++.old-deja/g++.other/warn5.C: New test.\n\nFrom-SVN: r39605", "tree": {"sha": "0d5298e54361908d84bce2abc0fb538a541408a9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0d5298e54361908d84bce2abc0fb538a541408a9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/45abaea89ceed7cbd6128a841605430da841064a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/45abaea89ceed7cbd6128a841605430da841064a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/45abaea89ceed7cbd6128a841605430da841064a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/45abaea89ceed7cbd6128a841605430da841064a/comments", "author": null, "committer": null, "parents": [{"sha": "996065b44049d0e525f3e28794868fdaee722f3f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/996065b44049d0e525f3e28794868fdaee722f3f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/996065b44049d0e525f3e28794868fdaee722f3f"}], "stats": {"total": 43, "additions": 39, "deletions": 4}, "files": [{"sha": "e2c1a8842106a6c76da2b072a6ce05519ba15390", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/45abaea89ceed7cbd6128a841605430da841064a/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/45abaea89ceed7cbd6128a841605430da841064a/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=45abaea89ceed7cbd6128a841605430da841064a", "patch": "@@ -1,3 +1,8 @@\n+2001-02-12  Nathan Sidwell  <nathan@codesourcery.com>\n+\n+\t* typeck2.c (process_init_constructor): Check\n+\tTREE_HAS_CONSTRUCTOR before issuing missing init warning.\n+\n 2001-02-12  Nathan Sidwell  <nathan@codesourcery.com>\n \n \t* pt.c (maybe_adjust_types_for_deduction, DEDUCE_ORDER case):"}, {"sha": "1538944ab5cecdcf9815fffaaaee22368e37d876", "filename": "gcc/cp/typeck2.c", "status": "modified", "additions": 11, "deletions": 4, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/45abaea89ceed7cbd6128a841605430da841064a/gcc%2Fcp%2Ftypeck2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/45abaea89ceed7cbd6128a841605430da841064a/gcc%2Fcp%2Ftypeck2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftypeck2.c?ref=45abaea89ceed7cbd6128a841605430da841064a", "patch": "@@ -814,12 +814,18 @@ process_init_constructor (type, init, elts)\n \t\tnext1 = build_functional_cast (TREE_TYPE (field),\n \t\t\t\t\t       NULL_TREE);\n \t      else\n-\t\tnext1 = build (CONSTRUCTOR, NULL_TREE, NULL_TREE,\n-\t\t\t       NULL_TREE);\n+\t        {\n+\t\t  next1 = build (CONSTRUCTOR, NULL_TREE, NULL_TREE,\n+\t\t\t         NULL_TREE);\n+                  if (init)\n+                    TREE_HAS_CONSTRUCTOR (next1)\n+                       = TREE_HAS_CONSTRUCTOR (init);\n+                }\n \t      next1 = digest_init (TREE_TYPE (field), next1, 0);\n \n \t      /* Warn when some struct elements are implicitly initialized.  */\n-\t      if (extra_warnings)\n+\t      if (extra_warnings\n+\t          && (!init || TREE_HAS_CONSTRUCTOR (init)))\n \t\tcp_warning (\"missing initializer for member `%D'\", field);\n \t    }\n \t  else\n@@ -835,7 +841,8 @@ process_init_constructor (type, init, elts)\n \n \t      /* Warn when some struct elements are implicitly initialized\n \t\t to zero.  */\n-\t      if (extra_warnings)\n+\t      if (extra_warnings\n+\t          && (!init || TREE_HAS_CONSTRUCTOR (init)))\n \t\tcp_warning (\"missing initializer for member `%D'\", field);\n \n \t      /* The default zero-initialization is fine for us; don't"}, {"sha": "739250652acdfd2fb59ed36df22da51b541a0437", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/45abaea89ceed7cbd6128a841605430da841064a/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/45abaea89ceed7cbd6128a841605430da841064a/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=45abaea89ceed7cbd6128a841605430da841064a", "patch": "@@ -1,3 +1,7 @@\n+2001-02-12  Nathan Sidwell  <nathan@codesourcery.com>\n+\n+\t* g++.old-deja/g++.other/warn5.C: New test.\n+\n 2001-02-12  Nathan Sidwell  <nathan@codesourcery.com>\n \n \t* g++.old-deja/g++.pt/spec40.C: New test."}, {"sha": "4c17dc664068230f9ca029af64d6bb3af969bfe9", "filename": "gcc/testsuite/g++.old-deja/g++.other/warn5.C", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/45abaea89ceed7cbd6128a841605430da841064a/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.other%2Fwarn5.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/45abaea89ceed7cbd6128a841605430da841064a/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.other%2Fwarn5.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.other%2Fwarn5.C?ref=45abaea89ceed7cbd6128a841605430da841064a", "patch": "@@ -0,0 +1,19 @@\n+// Special g++ Options: -W \n+// Build don't link:\n+// \n+// Copyright (C) 2000 Free Software Foundation, Inc.\n+// Contributed by Nathan Sidwell 6 Febs 2001 <nathan@codesourcery.com>\n+\n+// Bug 1765. We gave bogus warning on default initializer.\n+\n+struct X\n+{\n+  int i;\n+};\n+\n+X *foo ()\n+{\n+  return new X ();  // gets bogus warning\n+}\n+\n+X x = {};           // WARNING - missing initializer"}]}