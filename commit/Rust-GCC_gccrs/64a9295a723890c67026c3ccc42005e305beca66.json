{"sha": "64a9295a723890c67026c3ccc42005e305beca66", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjRhOTI5NWE3MjM4OTBjNjcwMjZjM2NjYzQyMDA1ZTMwNWJlY2E2Ng==", "commit": {"author": {"name": "Paolo Bonzini", "email": "bonzini@gnu.org", "date": "2004-07-01T08:02:34Z"}, "committer": {"name": "Paolo Bonzini", "email": "bonzini@gcc.gnu.org", "date": "2004-07-01T08:02:34Z"}, "message": "builtins.c (fold_builtin_classify): New.\n\ngcc/ChangeLog:\n2004-07-01  Paolo Bonzini  <bonzini@gnu.org>\n\n\t* builtins.c (fold_builtin_classify): New.\n\t(fold_builtin_unordered_cmp): Fix commentary.\n\t(fold_builtin): Use it.\n\t* builtins.def: Define builtins for isnan,\n\tisnanf, isnanl, finite, finitef, finitel,\n\tisinf, isinff, isinfl.\n\ngcc/testsuite/ChangeLog:\n2004-07-01  Paolo Bonzini  <bonzini@gnu.org>\n\n\t* gcc.dg/builtins-43.c: New.\n\t* gcc.dg/builtins-44.c: New.\n\t* gcc.dg/builtins-45.c: New.\n\nFrom-SVN: r83960", "tree": {"sha": "a36dd2e20b0d8ec8ec87600ce7b3f20a3c5ce3a2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a36dd2e20b0d8ec8ec87600ce7b3f20a3c5ce3a2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/64a9295a723890c67026c3ccc42005e305beca66", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/64a9295a723890c67026c3ccc42005e305beca66", "html_url": "https://github.com/Rust-GCC/gccrs/commit/64a9295a723890c67026c3ccc42005e305beca66", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/64a9295a723890c67026c3ccc42005e305beca66/comments", "author": {"login": "bonzini", "id": 42082, "node_id": "MDQ6VXNlcjQyMDgy", "avatar_url": "https://avatars.githubusercontent.com/u/42082?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bonzini", "html_url": "https://github.com/bonzini", "followers_url": "https://api.github.com/users/bonzini/followers", "following_url": "https://api.github.com/users/bonzini/following{/other_user}", "gists_url": "https://api.github.com/users/bonzini/gists{/gist_id}", "starred_url": "https://api.github.com/users/bonzini/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bonzini/subscriptions", "organizations_url": "https://api.github.com/users/bonzini/orgs", "repos_url": "https://api.github.com/users/bonzini/repos", "events_url": "https://api.github.com/users/bonzini/events{/privacy}", "received_events_url": "https://api.github.com/users/bonzini/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "1ea463a273df44816d63c3f96292341668a88ef0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1ea463a273df44816d63c3f96292341668a88ef0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1ea463a273df44816d63c3f96292341668a88ef0"}], "stats": {"total": 290, "additions": 285, "deletions": 5}, "files": [{"sha": "3e42262f5a392c565295af0012cb8dd2fb1aa88b", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/64a9295a723890c67026c3ccc42005e305beca66/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/64a9295a723890c67026c3ccc42005e305beca66/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=64a9295a723890c67026c3ccc42005e305beca66", "patch": "@@ -1,3 +1,12 @@\n+2004-07-01  Paolo Bonzini  <bonzini@gnu.org>\n+\n+\t* builtins.c (fold_builtin_classify): New.\n+\t(fold_builtin_unordered_cmp): Fix commentary.\n+\t(fold_builtin): Use it.\n+\t* builtins.def: Define builtins for isnan,\n+\tisnanf, isnanl, finite, finitef, finitel,\n+\tisinf, isinff, isinfl.\n+\n 2004-07-01  Richard Henderson  <rth@redhat.com>\n \n \t* function.h (struct function): Remove dont_emit_block_notes."}, {"sha": "3155c61186753a56a78f81c6396c30b1bec6f8fb", "filename": "gcc/builtins.c", "status": "modified", "additions": 106, "deletions": 5, "changes": 111, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/64a9295a723890c67026c3ccc42005e305beca66/gcc%2Fbuiltins.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/64a9295a723890c67026c3ccc42005e305beca66/gcc%2Fbuiltins.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbuiltins.c?ref=64a9295a723890c67026c3ccc42005e305beca66", "patch": "@@ -7611,12 +7611,98 @@ fold_builtin_abs (tree arglist, tree type)\n   return fold (build1 (ABS_EXPR, type, arg));\n }\n \n+/* Fold a call to __builtin_isnan(), __builtin_isinf, __builtin_finite.\n+   EXP is the CALL_EXPR for the call.  */\n+\n+static tree\n+fold_builtin_classify (tree exp, int builtin_index)\n+{\n+  tree fndecl = get_callee_fndecl (exp);\n+  tree arglist = TREE_OPERAND (exp, 1);\n+  tree type = TREE_TYPE (TREE_TYPE (fndecl));\n+  tree arg;\n+  REAL_VALUE_TYPE r;\n+\n+  if (!validate_arglist (arglist, REAL_TYPE, VOID_TYPE))\n+    {\n+      /* Check that we have exactly one argument.  */\n+      if (arglist == 0)\n+\t{\n+\t  error (\"too few arguments to function `%s'\",\n+\t\t IDENTIFIER_POINTER (DECL_NAME (fndecl)));\n+\t  return error_mark_node;\n+\t}\n+      else if (TREE_CHAIN (arglist) != 0)\n+\t{\n+\t  error (\"too many arguments to function `%s'\",\n+\t\t IDENTIFIER_POINTER (DECL_NAME (fndecl)));\n+\t  return error_mark_node;\n+\t}\n+      else\n+\t{\n+\t  error (\"non-floating-point argument to function `%s'\",\n+\t\t IDENTIFIER_POINTER (DECL_NAME (fndecl)));\n+\t  return error_mark_node;\n+\t}\n+    }\n+\n+  arg = TREE_VALUE (arglist);\n+  switch (builtin_index)\n+    {\n+    case BUILT_IN_ISINF:\n+      if (!MODE_HAS_INFINITIES (TYPE_MODE (TREE_TYPE (arg))))\n+        return omit_one_operand (type, integer_zero_node, arg);\n+\n+      if (TREE_CODE (arg) == REAL_CST)\n+\t{\n+\t  r = TREE_REAL_CST (arg);\n+\t  if (real_isinf (&r))\n+\t    return real_compare (GT_EXPR, &r, &dconst0)\n+\t\t   ? integer_one_node : integer_minus_one_node;\n+\t  else\n+\t    return integer_zero_node;\n+\t}\n+\n+      return NULL_TREE;\n+\n+    case BUILT_IN_ISFINITE:\n+      if (!MODE_HAS_NANS (TYPE_MODE (TREE_TYPE (arg)))\n+          && !MODE_HAS_INFINITIES (TYPE_MODE (TREE_TYPE (arg))))\n+        return omit_one_operand (type, integer_zero_node, arg);\n+\n+      if (TREE_CODE (arg) == REAL_CST)\n+\t{\n+\t  r = TREE_REAL_CST (arg);\n+\t  return real_isinf (&r) || real_isnan (&r)\n+\t\t ? integer_zero_node : integer_one_node;\n+\t}\n+\n+      return NULL_TREE;\n+\n+    case BUILT_IN_ISNAN:\n+      if (!MODE_HAS_NANS (TYPE_MODE (TREE_TYPE (arg))))\n+        return omit_one_operand (type, integer_zero_node, arg);\n+\n+      if (TREE_CODE (arg) == REAL_CST)\n+\t{\n+\t  r = TREE_REAL_CST (arg);\n+\t  return real_isnan (&r) ? integer_one_node : integer_zero_node;\n+\t}\n+\n+      arg = builtin_save_expr (arg);\n+      return fold (build2 (UNORDERED_EXPR, type, arg, arg));\n+\n+    default:\n+      abort ();\n+    }\n+}\n+\n /* Fold a call to an unordered comparison function such as\n-   __builtin_isgreater().  ARGLIST is the funtion's argument list\n-   and TYPE is the functions return type.  UNORDERED_CODE and\n-   ORDERED_CODE are comparison codes that give the opposite of\n-   the desired result.  UNORDERED_CODE is used for modes that can\n-   hold NaNs and ORDERED_CODE is used for the rest.  */\n+   __builtin_isgreater().  EXP is the CALL_EXPR for the call.\n+   UNORDERED_CODE and ORDERED_CODE are comparison codes that give\n+   the opposite of the desired result.  UNORDERED_CODE is used\n+   for modes that can hold NaNs and ORDERED_CODE is used for\n+   the rest.  */\n \n static tree\n fold_builtin_unordered_cmp (tree exp,\n@@ -8247,6 +8333,21 @@ fold_builtin_1 (tree exp)\n     case BUILT_IN_COPYSIGNL:\n       return fold_builtin_copysign (arglist, type);\n \n+    case BUILT_IN_FINITE:\n+    case BUILT_IN_FINITEF:\n+    case BUILT_IN_FINITEL:\n+      return fold_builtin_classify (exp, BUILT_IN_FINITE);\n+\n+    case BUILT_IN_ISINF:\n+    case BUILT_IN_ISINFF:\n+    case BUILT_IN_ISINFL:\n+      return fold_builtin_classify (exp, BUILT_IN_ISINF);\n+\n+    case BUILT_IN_ISNAN:\n+    case BUILT_IN_ISNANF:\n+    case BUILT_IN_ISNANL:\n+      return fold_builtin_classify (exp, BUILT_IN_ISNAN);\n+\n     case BUILT_IN_ISGREATER:\n       return fold_builtin_unordered_cmp (exp, UNLE_EXPR, LE_EXPR);\n     case BUILT_IN_ISGREATEREQUAL:"}, {"sha": "bd8a6308a3cb3af4ab7b9c227f7254ffbc023dfe", "filename": "gcc/builtins.def", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/64a9295a723890c67026c3ccc42005e305beca66/gcc%2Fbuiltins.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/64a9295a723890c67026c3ccc42005e305beca66/gcc%2Fbuiltins.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbuiltins.def?ref=64a9295a723890c67026c3ccc42005e305beca66", "patch": "@@ -571,6 +571,15 @@ DEF_GCC_BUILTIN        (BUILT_IN_FROB_RETURN_ADDR, \"frob_return_addr\", BT_FN_PTR\n DEF_EXT_LIB_BUILTIN    (BUILT_IN_GETTEXT, \"gettext\", BT_FN_STRING_CONST_STRING, ATTR_FORMAT_ARG_1)\n DEF_C99_BUILTIN        (BUILT_IN_IMAXABS, \"imaxabs\", BT_FN_INTMAX_INTMAX, ATTR_CONST_NOTHROW_LIST)\n DEF_GCC_BUILTIN        (BUILT_IN_INIT_DWARF_REG_SIZES, \"init_dwarf_reg_size_table\", BT_FN_VOID_PTR, ATTR_NULL)\n+DEF_EXT_LIB_BUILTIN    (BUILT_IN_FINITE, \"finite\", BT_FN_INT_DOUBLE, ATTR_CONST_NOTHROW_LIST)\n+DEF_EXT_LIB_BUILTIN    (BUILT_IN_FINITEF, \"finitef\", BT_FN_INT_FLOAT, ATTR_CONST_NOTHROW_LIST)\n+DEF_EXT_LIB_BUILTIN    (BUILT_IN_FINITEL, \"finitel\", BT_FN_INT_LONGDOUBLE, ATTR_CONST_NOTHROW_LIST)\n+DEF_C99_C90RES_BUILTIN (BUILT_IN_ISINF, \"isinf\", BT_FN_INT_VAR, ATTR_CONST_NOTHROW_LIST)\n+DEF_EXT_LIB_BUILTIN    (BUILT_IN_ISINFF, \"isinff\", BT_FN_INT_FLOAT, ATTR_CONST_NOTHROW_LIST)\n+DEF_EXT_LIB_BUILTIN    (BUILT_IN_ISINFL, \"isinfl\", BT_FN_INT_LONGDOUBLE, ATTR_CONST_NOTHROW_LIST)\n+DEF_C99_C90RES_BUILTIN (BUILT_IN_ISNAN, \"isnan\", BT_FN_INT_VAR, ATTR_CONST_NOTHROW_LIST)\n+DEF_EXT_LIB_BUILTIN    (BUILT_IN_ISNANF, \"isnanf\", BT_FN_INT_FLOAT, ATTR_CONST_NOTHROW_LIST)\n+DEF_EXT_LIB_BUILTIN    (BUILT_IN_ISNANL, \"isnanl\", BT_FN_INT_LONGDOUBLE, ATTR_CONST_NOTHROW_LIST)\n DEF_GCC_BUILTIN        (BUILT_IN_ISGREATER, \"isgreater\", BT_FN_INT_VAR, ATTR_CONST_NOTHROW_LIST)\n DEF_GCC_BUILTIN        (BUILT_IN_ISGREATEREQUAL, \"isgreaterequal\", BT_FN_INT_VAR, ATTR_CONST_NOTHROW_LIST)\n DEF_GCC_BUILTIN        (BUILT_IN_ISLESS, \"isless\", BT_FN_INT_VAR, ATTR_CONST_NOTHROW_LIST)"}, {"sha": "77ab7222a3bdc50406ed42d257c7b0249ec8c20c", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/64a9295a723890c67026c3ccc42005e305beca66/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/64a9295a723890c67026c3ccc42005e305beca66/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=64a9295a723890c67026c3ccc42005e305beca66", "patch": "@@ -1,3 +1,9 @@\n+2004-07-01  Paolo Bonzini  <bonzini@gnu.org>\n+\n+\t* gcc.dg/builtins-43.c: New.\n+\t* gcc.dg/builtins-44.c: New.\n+\t* gcc.dg/builtins-45.c: New.\n+\n 2004-06-26  Geoffrey Keating  <geoffk@apple.com>\n \t    Andreas Tobler  <a.tobler@schweiz.ch>\n "}, {"sha": "d174f7a90bb05a283ae9c2acbfc75dd41addded5", "filename": "gcc/testsuite/gcc.dg/builtins-43.c", "status": "added", "additions": 53, "deletions": 0, "changes": 53, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/64a9295a723890c67026c3ccc42005e305beca66/gcc%2Ftestsuite%2Fgcc.dg%2Fbuiltins-43.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/64a9295a723890c67026c3ccc42005e305beca66/gcc%2Ftestsuite%2Fgcc.dg%2Fbuiltins-43.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fbuiltins-43.c?ref=64a9295a723890c67026c3ccc42005e305beca66", "patch": "@@ -0,0 +1,53 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O1 -fno-trapping-math -fdump-tree-generic -fdump-tree-optimized\" } */\n+  \n+extern void f(int);\n+extern void link_error ();\n+\n+extern float x;\n+extern double y;\n+extern long double z;\n+\n+int\n+main ()\n+{\n+  double nan = __builtin_nan (\"\");\n+  float nanf = __builtin_nanf (\"\");\n+  long double nanl = __builtin_nanl (\"\");\n+\n+  if (!__builtin_isnan (nan))\n+    link_error ();\n+  if (!__builtin_isnan (nanf))\n+    link_error ();\n+  if (!__builtin_isnanf (nanf))\n+    link_error ();\n+  if (!__builtin_isnan (nanl))\n+    link_error ();\n+  if (!__builtin_isnanl (nanl))\n+    link_error ();\n+\n+  if (__builtin_isnan (4.0))\n+    link_error ();\n+  if (__builtin_isnan (4.0))\n+    link_error ();\n+  if (__builtin_isnanf (4.0))\n+    link_error ();\n+  if (__builtin_isnan (4.0))\n+    link_error ();\n+  if (__builtin_isnanl (4.0))\n+    link_error ();\n+\n+  f (__builtin_isnan (x));\n+  f (__builtin_isnan (y));\n+  f (__builtin_isnanf (y));\n+  f (__builtin_isnan (z));\n+  f (__builtin_isnanl (z));\n+}\n+\n+\n+/* Check that all instances of __builtin_isnan were folded.  */\n+/* { dg-final { scan-tree-dump-times \"isnan\" 0 \"generic\" } } */\n+\n+/* Check that all instances of link_error were subject to DCE.  */\n+/* { dg-final { scan-tree-dump-times \"link_error\" 0 \"optimized\" } } */\n+"}, {"sha": "2f5a3e1064c8724398e11c36c55d7a2ce3e8ed17", "filename": "gcc/testsuite/gcc.dg/builtins-44.c", "status": "added", "additions": 55, "deletions": 0, "changes": 55, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/64a9295a723890c67026c3ccc42005e305beca66/gcc%2Ftestsuite%2Fgcc.dg%2Fbuiltins-44.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/64a9295a723890c67026c3ccc42005e305beca66/gcc%2Ftestsuite%2Fgcc.dg%2Fbuiltins-44.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fbuiltins-44.c?ref=64a9295a723890c67026c3ccc42005e305beca66", "patch": "@@ -0,0 +1,55 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O1 -fno-trapping-math -fdump-tree-optimized\" } */\n+  \n+extern void f(int);\n+extern void link_error ();\n+\n+extern float x;\n+extern double y;\n+extern long double z;\n+\n+int\n+main ()\n+{\n+  double pinf = __builtin_inf ();\n+  float pinff = __builtin_inff ();\n+  long double pinfl = __builtin_infl ();\n+\n+  if (__builtin_isinf (pinf) != 1)\n+    link_error ();\n+  if (__builtin_isinf (pinff) != 1)\n+    link_error ();\n+  if (__builtin_isinff (pinff) != 1)\n+    link_error ();\n+  if (__builtin_isinf (pinfl) != 1)\n+    link_error ();\n+  if (__builtin_isinfl (pinfl) != 1)\n+    link_error ();\n+\n+  if (__builtin_isinf (-pinf) != -1)\n+    link_error ();\n+  if (__builtin_isinf (-pinff) != -1)\n+    link_error ();\n+  if (__builtin_isinff (-pinff) != -1)\n+    link_error ();\n+  if (__builtin_isinf (-pinfl) != -1)\n+    link_error ();\n+  if (__builtin_isinfl (-pinfl) != -1)\n+    link_error ();\n+\n+  if (__builtin_isinf (4.0))\n+    link_error ();\n+  if (__builtin_isinf (4.0))\n+    link_error ();\n+  if (__builtin_isinff (4.0))\n+    link_error ();\n+  if (__builtin_isinf (4.0))\n+    link_error ();\n+  if (__builtin_isinfl (4.0))\n+    link_error ();\n+}\n+\n+\n+/* Check that all instances of link_error were subject to DCE.  */\n+/* { dg-final { scan-tree-dump-times \"link_error\" 0 \"optimized\" } } */\n+"}, {"sha": "967fba4afe4eda665de1548b0ff581d698859425", "filename": "gcc/testsuite/gcc.dg/builtins-45.c", "status": "added", "additions": 47, "deletions": 0, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/64a9295a723890c67026c3ccc42005e305beca66/gcc%2Ftestsuite%2Fgcc.dg%2Fbuiltins-45.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/64a9295a723890c67026c3ccc42005e305beca66/gcc%2Ftestsuite%2Fgcc.dg%2Fbuiltins-45.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fbuiltins-45.c?ref=64a9295a723890c67026c3ccc42005e305beca66", "patch": "@@ -0,0 +1,47 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O1 -fno-trapping-math -fdump-tree-optimized\" } */\n+  \n+extern void f(int);\n+extern void link_error ();\n+\n+extern float x;\n+extern double y;\n+extern long double z;\n+\n+int\n+main ()\n+{\n+  double nan = __builtin_nan (\"\");\n+  float nanf = __builtin_nanf (\"\");\n+  long double nanl = __builtin_nanl (\"\");\n+\n+  double pinf = __builtin_inf ();\n+  float pinff = __builtin_inff ();\n+  long double pinfl = __builtin_infl ();\n+\n+  if (__builtin_finite (pinf))\n+    link_error ();\n+  if (__builtin_finitef (pinff))\n+    link_error ();\n+  if (__builtin_finitel (pinfl))\n+    link_error ();\n+\n+  if (__builtin_finite (nan))\n+    link_error ();\n+  if (__builtin_finitef (nanf))\n+    link_error ();\n+  if (__builtin_finitel (nanl))\n+    link_error ();\n+\n+  if (!__builtin_finite (4.0))\n+    link_error ();\n+  if (!__builtin_finitef (4.0))\n+    link_error ();\n+  if (!__builtin_finitel (4.0))\n+    link_error ();\n+}\n+\n+\n+/* Check that all instances of link_error were subject to DCE.  */\n+/* { dg-final { scan-tree-dump-times \"link_error\" 0 \"optimized\" } } */\n+"}]}