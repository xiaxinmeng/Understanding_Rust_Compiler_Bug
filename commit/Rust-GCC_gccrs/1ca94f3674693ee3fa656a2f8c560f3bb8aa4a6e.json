{"sha": "1ca94f3674693ee3fa656a2f8c560f3bb8aa4a6e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWNhOTRmMzY3NDY5M2VlM2ZhNjU2YTJmOGM1NjBmM2JiOGFhNGE2ZQ==", "commit": {"author": {"name": "Bill Schmidt", "email": "wschmidt@linux.vnet.ibm.com", "date": "2016-09-01T14:43:55Z"}, "committer": {"name": "William Schmidt", "email": "wschmidt@gcc.gnu.org", "date": "2016-09-01T14:43:55Z"}, "message": "re PR target/72827 (gnat bootstrap broken on powerpc64le-linux-gnu)\n\n2016-09-01  Bill Schmidt  <wschmidt@linux.vnet.ibm.com>\n\t    Michael Meissner <meissner@linux.vnet.ibm.com>\n\n\tPR target/72827\n\t* config/rs6000/rs6000.c (rs6000_legitimize_address): Avoid\n\treg+reg addressing for TImode.\n\t(rs6000_legitimate_address_p): Only allow register indirect\n\taddressing for TImode, even without TARGET_QUAD_MEMORY.\n\n\nCo-Authored-By: Michael Meissner <meissner@linux.vnet.ibm.com>\n\nFrom-SVN: r239938", "tree": {"sha": "e22b92f2589ee7abe2232371b29b35a4ac90bfec", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e22b92f2589ee7abe2232371b29b35a4ac90bfec"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1ca94f3674693ee3fa656a2f8c560f3bb8aa4a6e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1ca94f3674693ee3fa656a2f8c560f3bb8aa4a6e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1ca94f3674693ee3fa656a2f8c560f3bb8aa4a6e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1ca94f3674693ee3fa656a2f8c560f3bb8aa4a6e/comments", "author": {"login": "wschmidt-ibm", "id": 5520937, "node_id": "MDQ6VXNlcjU1MjA5Mzc=", "avatar_url": "https://avatars.githubusercontent.com/u/5520937?v=4", "gravatar_id": "", "url": "https://api.github.com/users/wschmidt-ibm", "html_url": "https://github.com/wschmidt-ibm", "followers_url": "https://api.github.com/users/wschmidt-ibm/followers", "following_url": "https://api.github.com/users/wschmidt-ibm/following{/other_user}", "gists_url": "https://api.github.com/users/wschmidt-ibm/gists{/gist_id}", "starred_url": "https://api.github.com/users/wschmidt-ibm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/wschmidt-ibm/subscriptions", "organizations_url": "https://api.github.com/users/wschmidt-ibm/orgs", "repos_url": "https://api.github.com/users/wschmidt-ibm/repos", "events_url": "https://api.github.com/users/wschmidt-ibm/events{/privacy}", "received_events_url": "https://api.github.com/users/wschmidt-ibm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "2a99de7b1ebe7b38e756dc736b59a684a8d87e1d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2a99de7b1ebe7b38e756dc736b59a684a8d87e1d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2a99de7b1ebe7b38e756dc736b59a684a8d87e1d"}], "stats": {"total": 25, "additions": 19, "deletions": 6}, "files": [{"sha": "53335d916fe12aecca3213f92e196aa1f0ddb909", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1ca94f3674693ee3fa656a2f8c560f3bb8aa4a6e/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1ca94f3674693ee3fa656a2f8c560f3bb8aa4a6e/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=1ca94f3674693ee3fa656a2f8c560f3bb8aa4a6e", "patch": "@@ -1,3 +1,12 @@\n+2016-09-01  Bill Schmidt  <wschmidt@linux.vnet.ibm.com>\n+\t    Michael Meissner <meissner@linux.vnet.ibm.com>\n+\n+\tPR target/72827\n+\t* config/rs6000/rs6000.c (rs6000_legitimize_address): Avoid\n+\treg+reg addressing for TImode.\n+\t(rs6000_legitimate_address_p): Only allow register indirect\n+\taddressing for TImode, even without TARGET_QUAD_MEMORY.\n+\n 2016-09-01  Richard Biener  <rguenther@suse.de>\n \n \tPR middle-end/77436"}, {"sha": "557009f8099736960e4a7371104543def9d00bb9", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 10, "deletions": 6, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1ca94f3674693ee3fa656a2f8c560f3bb8aa4a6e/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1ca94f3674693ee3fa656a2f8c560f3bb8aa4a6e/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=1ca94f3674693ee3fa656a2f8c560f3bb8aa4a6e", "patch": "@@ -8409,7 +8409,7 @@ rs6000_legitimize_address (rtx x, rtx oldx ATTRIBUTE_UNUSED,\n \t pointer, so it works with both GPRs and VSX registers.  */\n       /* Make sure both operands are registers.  */\n       else if (GET_CODE (x) == PLUS\n-\t       && (mode != TImode || !TARGET_QUAD_MEMORY))\n+\t       && (mode != TImode || !TARGET_VSX_TIMODE))\n \treturn gen_rtx_PLUS (Pmode,\n \t\t\t     force_reg (Pmode, XEXP (x, 0)),\n \t\t\t     force_reg (Pmode, XEXP (x, 1)));\n@@ -9418,12 +9418,16 @@ rs6000_legitimate_address_p (machine_mode mode, rtx x, bool reg_ok_strict)\n \treturn 1;\n     }\n \n-  /* For TImode, if we have load/store quad and TImode in VSX registers, only\n-     allow register indirect addresses.  This will allow the values to go in\n-     either GPRs or VSX registers without reloading.  The vector types would\n-     tend to go into VSX registers, so we allow REG+REG, while TImode seems\n+  /* For TImode, if we have TImode in VSX registers, only allow register\n+     indirect addresses.  This will allow the values to go in either GPRs\n+     or VSX registers without reloading.  The vector types would tend to\n+     go into VSX registers, so we allow REG+REG, while TImode seems\n      somewhat split, in that some uses are GPR based, and some VSX based.  */\n-  if (mode == TImode && TARGET_QUAD_MEMORY && TARGET_VSX_TIMODE)\n+  /* FIXME: We could loosen this by changing the following to\n+       if (mode == TImode && TARGET_QUAD_MEMORY && TARGET_VSX_TIMODE)\n+     but currently we cannot allow REG+REG addressing for TImode.  See\n+     PR72827 for complete details on how this ends up hoodwinking DSE.  */\n+  if (mode == TImode && TARGET_VSX_TIMODE)\n     return 0;\n   /* If not REG_OK_STRICT (before reload) let pass any stack offset.  */\n   if (! reg_ok_strict"}]}