{"sha": "9915b1c916b1e6aa0fb7aa738dcc217f5f69b8ef", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTkxNWIxYzkxNmIxZTZhYTBmYjdhYTczOGRjYzIxN2Y1ZjY5YjhlZg==", "commit": {"author": {"name": "Manuel L\u00f3pez-Ib\u00e1\u00f1ez", "email": "manu@gcc.gnu.org", "date": "2015-09-22T09:14:04Z"}, "committer": {"name": "Manuel L\u00f3pez-Ib\u00e1\u00f1ez", "email": "manu@gcc.gnu.org", "date": "2015-09-22T09:14:04Z"}, "message": "[PATCH tree-inline] Do not say \"called from here\" with UNKNOWN_LOCATION\n\nIn https://sourceware.org/ml/libc-alpha/2014-12/msg00300.html, we give a\n\"called from here\" note without actually having a location, which looks\nstrange. I haven't been able to generate such a testcase. If this happens,\ntry to at least point to the current function being called. If that location is\nalso unknown, skip the extra note.\n\ngcc/ChangeLog:\n\n2015-09-22  Manuel L\u00f3pez-Ib\u00e1\u00f1ez  <manu@gcc.gnu.org>\n\n\t* tree-inline.c (expand_call_inline): Use inform for extra note.\n\tDo not give a note with UNKNOWN_LOCATION.\n\tReplace input_location with gimple_location (stmt).\n\tUse true/false instead of TRUE/FALSE.\n\ngcc/testsuite/ChangeLog:\n\n2015-09-22  Manuel L\u00f3pez-Ib\u00e1\u00f1ez  <manu@gcc.gnu.org>\n\n\t* gcc.target/i386/inline_error.c (int bar): Use dg-message for note.\n\t* gcc.target/i386/pr57756.c (static __inline int caller): Likewise.\n\t* gcc.target/i386/pr59789.c (f1): Likewise.\n\t* gcc.target/i386/intrinsics_5.c (__m128i foo): Likewise.\n\t* gcc.target/i386/intrinsics_6.c: Likewise.\n\t* gcc.dg/winline-5.c (int t): Likewise.\n\t* gcc.dg/winline-9.c (t): Likewise.\n\t* gcc.dg/always_inline2.c (q): Likewise.\n\t* gcc.dg/winline-2.c (inline int t): Likewise.\n\t* gcc.dg/winline-6.c: Likewise.\n\t* gcc.dg/winline-10.c (void g): Likewise.\n\t* gcc.dg/pr49243.c (void parse): Likewise.\n\t* gcc.dg/always_inline3.c (q2): Likewise.\n\t* gcc.dg/winline-3.c: Likewise.\n\t* gcc.dg/winline-7.c (inline void *t): Likewise.\n\nFrom-SVN: r227997", "tree": {"sha": "7df1c9f98b7f095c49e9697bdb59518dd553790d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7df1c9f98b7f095c49e9697bdb59518dd553790d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9915b1c916b1e6aa0fb7aa738dcc217f5f69b8ef", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9915b1c916b1e6aa0fb7aa738dcc217f5f69b8ef", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9915b1c916b1e6aa0fb7aa738dcc217f5f69b8ef", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9915b1c916b1e6aa0fb7aa738dcc217f5f69b8ef/comments", "author": null, "committer": null, "parents": [{"sha": "50b4b446bb3894b6b8a830554009bd9cbdb8009a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/50b4b446bb3894b6b8a830554009bd9cbdb8009a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/50b4b446bb3894b6b8a830554009bd9cbdb8009a"}], "stats": {"total": 88, "additions": 61, "deletions": 27}, "files": [{"sha": "86b5c21f5014865236561db0a923967834629dc9", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9915b1c916b1e6aa0fb7aa738dcc217f5f69b8ef/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9915b1c916b1e6aa0fb7aa738dcc217f5f69b8ef/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=9915b1c916b1e6aa0fb7aa738dcc217f5f69b8ef", "patch": "@@ -1,3 +1,10 @@\n+2015-09-22  Manuel L\u00f3pez-Ib\u00e1\u00f1ez  <manu@gcc.gnu.org>\n+\n+\t* tree-inline.c (expand_call_inline): Use inform for extra note.\n+\tDo not give a note with UNKNOWN_LOCATION.\n+\tReplace input_location with gimple_location (stmt).\n+\tUse true/false instead of TRUE/FALSE.\n+\n 2015-09-22  Tom de Vries  <tom@codesourcery.com>\n \n \tPR tree-optimization/67666"}, {"sha": "e5c415e3b7d3e6c8305c28d23b7d7d3629174c6c", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9915b1c916b1e6aa0fb7aa738dcc217f5f69b8ef/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9915b1c916b1e6aa0fb7aa738dcc217f5f69b8ef/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=9915b1c916b1e6aa0fb7aa738dcc217f5f69b8ef", "patch": "@@ -1,3 +1,21 @@\n+2015-09-22  Manuel L\u00f3pez-Ib\u00e1\u00f1ez  <manu@gcc.gnu.org>\n+\n+\t* gcc.target/i386/inline_error.c (int bar): Use dg-message for note.\n+\t* gcc.target/i386/pr57756.c (static __inline int caller): Likewise.\n+\t* gcc.target/i386/pr59789.c (f1): Likewise.\n+\t* gcc.target/i386/intrinsics_5.c (__m128i foo): Likewise.\n+\t* gcc.target/i386/intrinsics_6.c: Likewise.\n+\t* gcc.dg/winline-5.c (int t): Likewise.\n+\t* gcc.dg/winline-9.c (t): Likewise.\n+\t* gcc.dg/always_inline2.c (q): Likewise.\n+\t* gcc.dg/winline-2.c (inline int t): Likewise.\n+\t* gcc.dg/winline-6.c: Likewise.\n+\t* gcc.dg/winline-10.c (void g): Likewise.\n+\t* gcc.dg/pr49243.c (void parse): Likewise.\n+\t* gcc.dg/always_inline3.c (q2): Likewise.\n+\t* gcc.dg/winline-3.c: Likewise.\n+\t* gcc.dg/winline-7.c (inline void *t): Likewise.\n+\n 2015-09-22  Tom de Vries  <tom@codesourcery.com>\n \n \tPR tree-optimization/67666"}, {"sha": "89b439f4eb2a6e97fc24232b5cc390720794b103", "filename": "gcc/testsuite/gcc.dg/always_inline2.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9915b1c916b1e6aa0fb7aa738dcc217f5f69b8ef/gcc%2Ftestsuite%2Fgcc.dg%2Falways_inline2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9915b1c916b1e6aa0fb7aa738dcc217f5f69b8ef/gcc%2Ftestsuite%2Fgcc.dg%2Falways_inline2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Falways_inline2.c?ref=9915b1c916b1e6aa0fb7aa738dcc217f5f69b8ef", "patch": "@@ -4,5 +4,5 @@ inline __attribute__ ((always_inline)) void t(void); /* { dg-error \"body not ava\n void\n q(void)\n {\n-  t(); \t\t\t\t/* { dg-error \"called from here\" } */\n+  t(); \t\t\t\t/* { dg-message \"called from here\" } */\n }"}, {"sha": "1bd2b6d57fedb388e7c52ae263601f505b11ff51", "filename": "gcc/testsuite/gcc.dg/always_inline3.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9915b1c916b1e6aa0fb7aa738dcc217f5f69b8ef/gcc%2Ftestsuite%2Fgcc.dg%2Falways_inline3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9915b1c916b1e6aa0fb7aa738dcc217f5f69b8ef/gcc%2Ftestsuite%2Fgcc.dg%2Falways_inline3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Falways_inline3.c?ref=9915b1c916b1e6aa0fb7aa738dcc217f5f69b8ef", "patch": "@@ -6,6 +6,6 @@ q2(void) /* { dg-error \"recursive inlining\" } */\n {\n   if (do_something_evil ())\n     return;\n-  q2(); \t\t\t/* { dg-error \"called from here\" } */\n+  q2(); \t\t\t/* { dg-message \"called from here\" } */\n   q2(); /* With -O2 we don't warn here, it is eliminated by tail recursion.  */\n }"}, {"sha": "78ac226aa2492815b197c073ea27ecc3800c7f5f", "filename": "gcc/testsuite/gcc.dg/pr49243.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9915b1c916b1e6aa0fb7aa738dcc217f5f69b8ef/gcc%2Ftestsuite%2Fgcc.dg%2Fpr49243.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9915b1c916b1e6aa0fb7aa738dcc217f5f69b8ef/gcc%2Ftestsuite%2Fgcc.dg%2Fpr49243.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr49243.c?ref=9915b1c916b1e6aa0fb7aa738dcc217f5f69b8ef", "patch": "@@ -20,6 +20,6 @@ static inline int wrapper(const char **s_ptr) /* { dg-warning \"(inlining failed|\n void parse(const char *data)\n {\n     const char *s = data;\n-    if (!(wrapper(&s) == -1 && (s - data) == 1)) /* { dg-warning \"called from here\" } */\n+    if (!(wrapper(&s) == -1 && (s - data) == 1)) /* { dg-message \"called from here\" } */\n \t__builtin_abort();\n }"}, {"sha": "b781bc6f6562b5f522dfbcc21cbcf13a849c383f", "filename": "gcc/testsuite/gcc.dg/winline-10.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9915b1c916b1e6aa0fb7aa738dcc217f5f69b8ef/gcc%2Ftestsuite%2Fgcc.dg%2Fwinline-10.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9915b1c916b1e6aa0fb7aa738dcc217f5f69b8ef/gcc%2Ftestsuite%2Fgcc.dg%2Fwinline-10.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fwinline-10.c?ref=9915b1c916b1e6aa0fb7aa738dcc217f5f69b8ef", "patch": "@@ -11,7 +11,7 @@ inline void f (x)\t/* { dg-warning \"inlining .* mismatched arg\" \"\" } */\n \n void g (struct s x)\n {\n-  f (x); \t\t/* { dg-warning \"called from here\" \"\" } */\n+  f (x); \t\t/* { dg-message \"called from here\" } */\n }\n \n void f (int x);\t\t/* { dg-warning \"follows non-prototype definition\" } */"}, {"sha": "f4f7cc48104aff56bdb6087223d35e069e195db1", "filename": "gcc/testsuite/gcc.dg/winline-2.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9915b1c916b1e6aa0fb7aa738dcc217f5f69b8ef/gcc%2Ftestsuite%2Fgcc.dg%2Fwinline-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9915b1c916b1e6aa0fb7aa738dcc217f5f69b8ef/gcc%2Ftestsuite%2Fgcc.dg%2Fwinline-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fwinline-2.c?ref=9915b1c916b1e6aa0fb7aa738dcc217f5f69b8ef", "patch": "@@ -4,5 +4,5 @@\n inline int q(void);\t\t /* { dg-warning \"body not available\" \"\" } */\n inline int t(void)\n {\n-\treturn q();\t\t /* { dg-warning \"called from here\" \"\" } */\n+\treturn q();\t\t /* { dg-message \"called from here\" } */\n }"}, {"sha": "6c5d6ae544045f05148af9825b5e9a536c9fdb1e", "filename": "gcc/testsuite/gcc.dg/winline-3.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9915b1c916b1e6aa0fb7aa738dcc217f5f69b8ef/gcc%2Ftestsuite%2Fgcc.dg%2Fwinline-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9915b1c916b1e6aa0fb7aa738dcc217f5f69b8ef/gcc%2Ftestsuite%2Fgcc.dg%2Fwinline-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fwinline-3.c?ref=9915b1c916b1e6aa0fb7aa738dcc217f5f69b8ef", "patch": "@@ -17,5 +17,5 @@ inline int q(void) /* { dg-warning \"max-inline-insns-single\" \"\" } */\n }\n inline int t (void)\n {\n-\treturn q ();\t\t /* { dg-warning \"called from here\" \"\" } */\n+\treturn q ();\t\t /* { dg-message \"called from here\" } */\n }"}, {"sha": "a587e969ad2dda59c1f9a5d4aa15343ffdd226ea", "filename": "gcc/testsuite/gcc.dg/winline-5.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9915b1c916b1e6aa0fb7aa738dcc217f5f69b8ef/gcc%2Ftestsuite%2Fgcc.dg%2Fwinline-5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9915b1c916b1e6aa0fb7aa738dcc217f5f69b8ef/gcc%2Ftestsuite%2Fgcc.dg%2Fwinline-5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fwinline-5.c?ref=9915b1c916b1e6aa0fb7aa738dcc217f5f69b8ef", "patch": "@@ -17,5 +17,5 @@ inline int q(void) /* { dg-warning \"inline-unit-growth\" } */\n }\n int t (void)\n {\n-\treturn q ();\t\t /* { dg-warning \"called from here\" } */\n+\treturn q ();\t\t /* { dg-message \"called from here\" } */\n }"}, {"sha": "9e89976cffda65a944f837a3123a64dada706214", "filename": "gcc/testsuite/gcc.dg/winline-6.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9915b1c916b1e6aa0fb7aa738dcc217f5f69b8ef/gcc%2Ftestsuite%2Fgcc.dg%2Fwinline-6.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9915b1c916b1e6aa0fb7aa738dcc217f5f69b8ef/gcc%2Ftestsuite%2Fgcc.dg%2Fwinline-6.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fwinline-6.c?ref=9915b1c916b1e6aa0fb7aa738dcc217f5f69b8ef", "patch": "@@ -17,5 +17,5 @@ inline int q(void) /* { dg-warning \"large-function-growth\" } */\n }\n inline int t (void)\n {\n-\treturn q () + 1;\t /* { dg-warning \"called from here\" } */\n+\treturn q () + 1;\t /* { dg-message \"called from here\" } */\n }"}, {"sha": "34deca42592dfc5a33c0fa8fe4f24fe3d967f024", "filename": "gcc/testsuite/gcc.dg/winline-7.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9915b1c916b1e6aa0fb7aa738dcc217f5f69b8ef/gcc%2Ftestsuite%2Fgcc.dg%2Fwinline-7.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9915b1c916b1e6aa0fb7aa738dcc217f5f69b8ef/gcc%2Ftestsuite%2Fgcc.dg%2Fwinline-7.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fwinline-7.c?ref=9915b1c916b1e6aa0fb7aa738dcc217f5f69b8ef", "patch": "@@ -11,5 +11,5 @@ inline void *q (void) /* { dg-warning \"(function not inlinable|alloca)\" } */\n }\n inline void *t (void)\n {\n-\treturn q ();\t\t /* { dg-warning \"called from here\" } */\n+\treturn q ();\t\t /* { dg-message \"called from here\" } */\n }"}, {"sha": "f97a76494c5b4151f384c0812cb84bdb885299cb", "filename": "gcc/testsuite/gcc.dg/winline-9.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9915b1c916b1e6aa0fb7aa738dcc217f5f69b8ef/gcc%2Ftestsuite%2Fgcc.dg%2Fwinline-9.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9915b1c916b1e6aa0fb7aa738dcc217f5f69b8ef/gcc%2Ftestsuite%2Fgcc.dg%2Fwinline-9.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fwinline-9.c?ref=9915b1c916b1e6aa0fb7aa738dcc217f5f69b8ef", "patch": "@@ -22,5 +22,5 @@ t()\n   if (a)\n     aa();\n   if (b)\n-    bb(); \t\t\t/* { dg-warning \"called from here\" \"\" } */\n+    bb(); \t\t\t/* { dg-message \"called from here\" } */\n }"}, {"sha": "18e506631ebffde0e8b85f7a157f4931c45417fe", "filename": "gcc/testsuite/gcc.target/i386/inline_error.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9915b1c916b1e6aa0fb7aa738dcc217f5f69b8ef/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Finline_error.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9915b1c916b1e6aa0fb7aa738dcc217f5f69b8ef/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Finline_error.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Finline_error.c?ref=9915b1c916b1e6aa0fb7aa738dcc217f5f69b8ef", "patch": "@@ -9,5 +9,5 @@ foo () /* { dg-error \"inlining failed in call to always_inline .* target specifi\n \n int bar()\n {\n-  return foo (); /* { dg-error \"called from here\" } */\n+  return foo (); /* { dg-message \"called from here\" } */\n }"}, {"sha": "6fd71741fe6e4efcef93071510c079a5f2286740", "filename": "gcc/testsuite/gcc.target/i386/intrinsics_5.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9915b1c916b1e6aa0fb7aa738dcc217f5f69b8ef/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fintrinsics_5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9915b1c916b1e6aa0fb7aa738dcc217f5f69b8ef/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fintrinsics_5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fintrinsics_5.c?ref=9915b1c916b1e6aa0fb7aa738dcc217f5f69b8ef", "patch": "@@ -10,7 +10,7 @@\n \n __m128i foo(__m128i *V)\n {\n-    return _mm_stream_load_si128(V); /* { dg-error \"called from here\" } */\n+    return _mm_stream_load_si128(V); /* { dg-message \"called from here\" } */\n }\n \n /* { dg-prune-output \".*inlining failed.*\" }  */"}, {"sha": "e58673980638b2ae90ad891906decee599627944", "filename": "gcc/testsuite/gcc.target/i386/intrinsics_6.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9915b1c916b1e6aa0fb7aa738dcc217f5f69b8ef/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fintrinsics_6.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9915b1c916b1e6aa0fb7aa738dcc217f5f69b8ef/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fintrinsics_6.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fintrinsics_6.c?ref=9915b1c916b1e6aa0fb7aa738dcc217f5f69b8ef", "patch": "@@ -10,7 +10,7 @@\n \n __m128i foo(__m128i *V)\n {\n-    return _mm_stream_load_si128(V); /* { dg-error \"called from here\" } */\n+    return _mm_stream_load_si128(V); /* { dg-message \"called from here\" } */\n }\n \n /* { dg-prune-output \".*inlining failed.*\" }  */"}, {"sha": "25c565c879a2cf4305faa04853d001f08890d597", "filename": "gcc/testsuite/gcc.target/i386/pr57756.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9915b1c916b1e6aa0fb7aa738dcc217f5f69b8ef/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr57756.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9915b1c916b1e6aa0fb7aa738dcc217f5f69b8ef/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr57756.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr57756.c?ref=9915b1c916b1e6aa0fb7aa738dcc217f5f69b8ef", "patch": "@@ -11,7 +11,7 @@ __inline int callee () /* { dg-error \"inlining failed in call to always_inline\"\n __attribute__((target(\"sse\")))\n static __inline int caller ()\n {\n-  return callee(); /* { dg-error \"called from here\" }  */\n+  return callee(); /* { dg-message \"called from here\" }  */\n }\n \n int main ()"}, {"sha": "d320578f75eaa3b1bb5f34157d03cd4e66f2db38", "filename": "gcc/testsuite/gcc.target/i386/pr59789.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9915b1c916b1e6aa0fb7aa738dcc217f5f69b8ef/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr59789.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9915b1c916b1e6aa0fb7aa738dcc217f5f69b8ef/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr59789.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr59789.c?ref=9915b1c916b1e6aa0fb7aa738dcc217f5f69b8ef", "patch": "@@ -18,5 +18,5 @@ _mm_set_epi32 (int __q3, int __q2, int __q1, int __q0) /* { dg-error \"target spe\n __m128i\n f1(void)\n { /* { dg-message \"warning: SSE vector return without SSE enabled changes the ABI\" } */\n-  return _mm_set_epi32 (0, 0, 0, 0); /* { dg-error \"called from here\" } */\n+  return _mm_set_epi32 (0, 0, 0, 0); /* { dg-message \"called from here\" } */\n }"}, {"sha": "b7874668fb370eb0f6bbef0a9e6a755bc1dfe09f", "filename": "gcc/tree-inline.c", "status": "modified", "additions": 21, "deletions": 12, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9915b1c916b1e6aa0fb7aa738dcc217f5f69b8ef/gcc%2Ftree-inline.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9915b1c916b1e6aa0fb7aa738dcc217f5f69b8ef/gcc%2Ftree-inline.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-inline.c?ref=9915b1c916b1e6aa0fb7aa738dcc217f5f69b8ef", "patch": "@@ -4384,21 +4384,19 @@ expand_call_inline (basic_block bb, gimple *stmt, copy_body_data *id)\n   tree return_slot;\n   tree modify_dest;\n   tree return_bounds = NULL;\n-  location_t saved_location;\n   struct cgraph_edge *cg_edge;\n   cgraph_inline_failed_t reason;\n   basic_block return_block;\n   edge e;\n   gimple_stmt_iterator gsi, stmt_gsi;\n-  bool successfully_inlined = FALSE;\n+  bool successfully_inlined = false;\n   bool purge_dead_abnormal_edges;\n   gcall *call_stmt;\n   unsigned int i;\n \n-  /* Set input_location here so we get the right instantiation context\n-     if we call instantiate_decl from inlinable_function_p.  */\n-  /* FIXME: instantiate_decl isn't called by inlinable_function_p.  */\n-  saved_location = input_location;\n+  /* The gimplifier uses input_location in too many places, such as\n+     internal_get_tmp_var ().  */\n+  location_t saved_location = input_location;\n   input_location = gimple_location (stmt);\n \n   /* From here on, we're only interested in CALL_EXPRs.  */\n@@ -4454,7 +4452,11 @@ expand_call_inline (basic_block bb, gimple *stmt, copy_body_data *id)\n \t{\n \t  error (\"inlining failed in call to always_inline %q+F: %s\", fn,\n \t\t cgraph_inline_failed_string (reason));\n-\t  error (\"called from here\");\n+\t  if (gimple_location (stmt) != UNKNOWN_LOCATION)\n+\t    inform (gimple_location (stmt), \"called from here\");\n+\t  else if (DECL_SOURCE_LOCATION (cfun->decl) != UNKNOWN_LOCATION)\n+\t    inform (DECL_SOURCE_LOCATION (cfun->decl),\n+                   \"called from this function\");\n \t}\n       else if (warn_inline\n \t       && DECL_DECLARED_INLINE_P (fn)\n@@ -4467,9 +4469,15 @@ expand_call_inline (basic_block bb, gimple *stmt, copy_body_data *id)\n \t       /* Avoid warnings during early inline pass. */\n \t       && symtab->global_info_ready)\n \t{\n-\t  warning (OPT_Winline, \"inlining failed in call to %q+F: %s\",\n-\t\t   fn, _(cgraph_inline_failed_string (reason)));\n-\t  warning (OPT_Winline, \"called from here\");\n+\t  if (warning (OPT_Winline, \"inlining failed in call to %q+F: %s\",\n+\t\t       fn, _(cgraph_inline_failed_string (reason))))\n+\t    {\n+\t      if (gimple_location (stmt) != UNKNOWN_LOCATION)\n+\t\tinform (gimple_location (stmt), \"called from here\");\n+\t      else if (DECL_SOURCE_LOCATION (cfun->decl) != UNKNOWN_LOCATION)\n+\t\tinform (DECL_SOURCE_LOCATION (cfun->decl),\n+                       \"called from this function\");\n+\t    }\n \t}\n       goto egress;\n     }\n@@ -4534,7 +4542,8 @@ expand_call_inline (basic_block bb, gimple *stmt, copy_body_data *id)\n     {\n       id->block = make_node (BLOCK);\n       BLOCK_ABSTRACT_ORIGIN (id->block) = fn;\n-      BLOCK_SOURCE_LOCATION (id->block) = LOCATION_LOCUS (input_location);\n+      BLOCK_SOURCE_LOCATION (id->block) \n+\t= LOCATION_LOCUS (gimple_location (stmt));\n       prepend_lexical_block (gimple_block (stmt), id->block);\n     }\n \n@@ -4799,7 +4808,7 @@ expand_call_inline (basic_block bb, gimple *stmt, copy_body_data *id)\n   cg_edge->callee->remove ();\n \n   id->block = NULL_TREE;\n-  successfully_inlined = TRUE;\n+  successfully_inlined = true;\n \n  egress:\n   input_location = saved_location;"}]}