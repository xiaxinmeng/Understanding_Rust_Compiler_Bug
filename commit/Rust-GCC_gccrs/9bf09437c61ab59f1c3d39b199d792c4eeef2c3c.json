{"sha": "9bf09437c61ab59f1c3d39b199d792c4eeef2c3c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWJmMDk0MzdjNjFhYjU5ZjFjM2QzOWIxOTlkNzkyYzRlZWVmMmMzYw==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@cygnus.com", "date": "1998-06-22T22:53:33Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "1998-06-22T22:53:33Z"}, "message": "* gcc.c (handle_braces): Recognize | between options as an or.\n\nFrom-SVN: r20664", "tree": {"sha": "a8d3342c1f4875b00c954c85679d9ed9de38951e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a8d3342c1f4875b00c954c85679d9ed9de38951e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9bf09437c61ab59f1c3d39b199d792c4eeef2c3c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9bf09437c61ab59f1c3d39b199d792c4eeef2c3c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9bf09437c61ab59f1c3d39b199d792c4eeef2c3c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9bf09437c61ab59f1c3d39b199d792c4eeef2c3c/comments", "author": null, "committer": null, "parents": [{"sha": "e31ca113dd343c17631761a2888cbdd0aa606bf7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e31ca113dd343c17631761a2888cbdd0aa606bf7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e31ca113dd343c17631761a2888cbdd0aa606bf7"}], "stats": {"total": 92, "additions": 60, "deletions": 32}, "files": [{"sha": "178ad7f596dd02898d2bcabad6896c304bb5afb2", "filename": "gcc/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9bf09437c61ab59f1c3d39b199d792c4eeef2c3c/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9bf09437c61ab59f1c3d39b199d792c4eeef2c3c/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=9bf09437c61ab59f1c3d39b199d792c4eeef2c3c", "patch": "@@ -1,3 +1,7 @@\n+Mon Jun 22 22:21:46 1998  Richard Henderson  <rth@cygnus.com>\n+\n+\t* gcc.c (handle_braces): Recognize | between options as an or.\n+\n Mon Jun 22 23:13:47 1998  John Wehle  (john@feith.com)\n \n \t* i386.md (exception_receiver): Define."}, {"sha": "3fd700aa707f240510237575e190b8d85b9c9173", "filename": "gcc/gcc.c", "status": "modified", "additions": 56, "deletions": 32, "changes": 88, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9bf09437c61ab59f1c3d39b199d792c4eeef2c3c/gcc%2Fgcc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9bf09437c61ab59f1c3d39b199d792c4eeef2c3c/gcc%2Fgcc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgcc.c?ref=9bf09437c61ab59f1c3d39b199d792c4eeef2c3c", "patch": "@@ -363,6 +363,8 @@ or with constant text in a single argument.\n  %{|!S:X} like %{!S:X}, but if there is an S switch, substitute `-'.\n  %{.S:X} substitutes X, but only if processing a file with suffix S.\n  %{!.S:X} substitutes X, but only if NOT processing a file with suffix S.\n+ %{S|P:X} substitutes X if either -S or -P was given to CC.  This may be\n+\t  combined with ! and . as above binding stronger than the OR.\n  %(Spec) processes a specification defined in a specs file as *Spec:\n  %[Spec] as above, but put __ around -D arguments\n \n@@ -376,8 +378,9 @@ constructs.  If another value of -O or the negated form of a -f, -m, or\n value is ignored, except with {S*} where S is just one letter; this\n passes all matching options.\n \n-The character | is used to indicate that a command should be piped to\n-the following command, but only if -pipe is specified.\n+The character | at the beginning of the predicate text is used to indicate\n+that a command should be piped to the following command, but only if -pipe\n+is specified.\n \n Note that it is built into CC which switches take arguments and which\n do not.  You might think it would be useful to generalize this to\n@@ -4056,11 +4059,10 @@ static char *\n handle_braces (p)\n      register char *p;\n {\n-  register char *q;\n-  char *filter;\n+  char *filter, *body = NULL, *endbody;\n   int pipe_p = 0;\n-  int negate = 0;\n-  int suffix = 0;\n+  int negate;\n+  int suffix;\n   int include_blanks = 1;\n \n   if (*p == '^')\n@@ -4073,6 +4075,9 @@ handle_braces (p)\n        This is used in %{|!pipe:...}.  */\n     pipe_p = 1, ++p;\n \n+next_member:\n+  negate = suffix = 0;\n+\n   if (*p == '!')\n     /* A `!' after the open-brace negates the condition:\n        succeed if the specified switch is not present.  */\n@@ -4089,39 +4094,49 @@ handle_braces (p)\n     }\n \n   filter = p;\n-  while (*p != ':' && *p != '}') p++;\n-  if (*p != '}')\n+  while (*p != ':' && *p != '}' && *p != '|') p++;\n+\n+  if (*p == '|' && pipe_p)\n+    abort ();\n+\n+  if (!body)\n     {\n-      register int count = 1;\n-      q = p + 1;\n-      while (count > 0)\n-\t{\n-\t  if (*q == '{')\n-\t    count++;\n-\t  else if (*q == '}')\n-\t    count--;\n-\t  else if (*q == 0)\n-\t    abort ();\n-\t  q++;\n+      if (*p != '}')\n+        {\n+\t  register int count = 1;\n+\t  register char *q = p;\n+\n+\t  while (*q++ != ':') continue;\n+\t  body = q;\n+\t  \n+\t  while (count > 0)\n+\t    {\n+\t      if (*q == '{')\n+\t        count++;\n+\t      else if (*q == '}')\n+\t        count--;\n+\t      else if (*q == 0)\n+\t        abort ();\n+\t      q++;\n+\t    }\n+\t  endbody = q;\n \t}\n+      else\n+\tbody = p, endbody = p+1;\n     }\n-  else\n-    q = p + 1;\n \n   if (suffix)\n     {\n       int found = (input_suffix != 0\n \t\t   && strlen (input_suffix) == p - filter\n \t\t   && strncmp (input_suffix, filter, p - filter) == 0);\n \n-      if (p[0] == '}')\n+      if (body[0] == '}')\n \tabort ();\n \n       if (negate != found\n-\t  && do_spec_1 (save_string (p + 1, q - p - 2), 0, NULL_PTR) < 0)\n+\t  && do_spec_1 (save_string (body, endbody-body-1), 0, NULL_PTR) < 0)\n \treturn 0;\n-\n-      return q;\n     }\n   else if (p[-1] == '*' && p[0] == '}')\n     {\n@@ -4144,11 +4159,11 @@ handle_braces (p)\n       if (p[-1] == '*' && !negate)\n \t{\n \t  int substitution;\n-\t  char *r = p;\n+\t  char *r = body;\n \n \t  /* First see whether we have %*.  */\n \t  substitution = 0;\n-\t  while (r < q)\n+\t  while (r < endbody)\n \t    {\n \t      if (*r == '%' && r[1] == '*')\n \t\tsubstitution = 1;\n@@ -4162,7 +4177,7 @@ handle_braces (p)\n \t\t in the text that follows the colon.  */\n \n \t      unsigned hard_match_len = p - filter - 1;\n-\t      char *string = save_string (p + 1, q - p - 2);\n+\t      char *string = save_string (body, endbody - body - 1);\n \n \t      for (i = 0; i < n_switches; i++)\n \t\tif (!strncmp (switches[i].part1, filter, hard_match_len)\n@@ -4173,7 +4188,10 @@ handle_braces (p)\n \t\t    give_switch (i, 1, 1);\n \t\t  }\n \n-\t      return q;\n+\t      /* We didn't match.  Try again.  */\n+\t      if (*p++ == '|')\n+\t\tgoto next_member;\n+\t      return endbody;\n \t    }\n \t}\n \n@@ -4207,7 +4225,7 @@ handle_braces (p)\n \t    }\n \t}\n \n-      /* If it is as desired (present for %{s...}, absent for %{-s...})\n+      /* If it is as desired (present for %{s...}, absent for %{!s...})\n \t then substitute either the switch or the specified\n \t conditional text.  */\n       if (present != negate)\n@@ -4218,7 +4236,8 @@ handle_braces (p)\n \t    }\n \t  else\n \t    {\n-\t      if (do_spec_1 (save_string (p + 1, q - p - 2), 0, NULL_PTR) < 0)\n+\t      if (do_spec_1 (save_string (body, endbody - body - 1),\n+\t\t\t     0, NULL_PTR) < 0)\n \t\treturn 0;\n \t    }\n \t}\n@@ -4227,10 +4246,15 @@ handle_braces (p)\n \t  /* Here if a %{|...} conditional fails: output a minus sign,\n \t     which means \"standard output\" or \"standard input\".  */\n \t  do_spec_1 (\"-\", 0, NULL_PTR);\n+\t  return endbody;\n \t}\n     }\n \n-  return q;\n+  /* We didn't match; try again.  */\n+  if (*p++ == '|')\n+    goto next_member;\n+\n+  return endbody;\n }\n \f\n /* Return 0 iff switch number SWITCHNUM is obsoleted by a later switch"}]}