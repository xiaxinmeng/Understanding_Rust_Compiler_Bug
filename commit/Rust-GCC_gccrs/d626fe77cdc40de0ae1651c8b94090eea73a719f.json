{"sha": "d626fe77cdc40de0ae1651c8b94090eea73a719f", "node_id": "C_kwDOANBUbNoAKGQ2MjZmZTc3Y2RjNDBkZTBhZTE2NTFjOGI5NDA5MGVlYTczYTcxOWY", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2021-11-08T14:21:08Z"}, "committer": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2021-11-08T15:19:35Z"}, "message": "Fix spurious valgrind errors in irred loop verification\n\nThe sbitmap bitmap_{set,clear}_bit changes trigger spurious\nuninit value use reportings from valgrind since we now\nread the old value before setting/clearing a bit so\nverify_loop_structures optimization to not clear the sbitmap is reported.\n\nFixed by using a temporary BB flag which should also be more\nefficient in terms of cache re-use.\n\n2021-11-08  Richard Biener  <rguenther@suse.de>\n\n\t* cfgloop.c (verify_loop_structure): Use a temporary BB flag\n\tinstead of an sbitmap to cache irreducible state.", "tree": {"sha": "3117b191c52919853de93a8adb9a5d7869506928", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3117b191c52919853de93a8adb9a5d7869506928"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d626fe77cdc40de0ae1651c8b94090eea73a719f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d626fe77cdc40de0ae1651c8b94090eea73a719f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d626fe77cdc40de0ae1651c8b94090eea73a719f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d626fe77cdc40de0ae1651c8b94090eea73a719f/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "18546941ae4c56cd9240d2dc2ca2806e01eb6fb7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/18546941ae4c56cd9240d2dc2ca2806e01eb6fb7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/18546941ae4c56cd9240d2dc2ca2806e01eb6fb7"}], "stats": {"total": 23, "additions": 11, "deletions": 12}, "files": [{"sha": "20c24c13c365a2298431fe8d2d077d7b7155e14e", "filename": "gcc/cfgloop.c", "status": "modified", "additions": 11, "deletions": 12, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d626fe77cdc40de0ae1651c8b94090eea73a719f/gcc%2Fcfgloop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d626fe77cdc40de0ae1651c8b94090eea73a719f/gcc%2Fcfgloop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcfgloop.c?ref=d626fe77cdc40de0ae1651c8b94090eea73a719f", "patch": "@@ -1567,19 +1567,17 @@ verify_loop_structure (void)\n   /* Check irreducible loops.  */\n   if (loops_state_satisfies_p (LOOPS_HAVE_MARKED_IRREDUCIBLE_REGIONS))\n     {\n-      auto_edge_flag saved_irr_mask (cfun);\n-      /* Record old info.  */\n-      auto_sbitmap irreds (last_basic_block_for_fn (cfun));\n+      auto_edge_flag saved_edge_irr (cfun);\n+      auto_bb_flag saved_bb_irr (cfun);\n+      /* Save old info.  */\n       FOR_EACH_BB_FN (bb, cfun)\n \t{\n \t  edge_iterator ei;\n \t  if (bb->flags & BB_IRREDUCIBLE_LOOP)\n-\t    bitmap_set_bit (irreds, bb->index);\n-\t  else\n-\t    bitmap_clear_bit (irreds, bb->index);\n+\t    bb->flags |= saved_bb_irr;\n \t  FOR_EACH_EDGE (e, ei, bb->succs)\n \t    if (e->flags & EDGE_IRREDUCIBLE_LOOP)\n-\t      e->flags |= saved_irr_mask;\n+\t      e->flags |= saved_edge_irr;\n \t}\n \n       /* Recount it.  */\n@@ -1591,34 +1589,35 @@ verify_loop_structure (void)\n \t  edge_iterator ei;\n \n \t  if ((bb->flags & BB_IRREDUCIBLE_LOOP)\n-\t      && !bitmap_bit_p (irreds, bb->index))\n+\t      && !(bb->flags & saved_bb_irr))\n \t    {\n \t      error (\"basic block %d should be marked irreducible\", bb->index);\n \t      err = 1;\n \t    }\n \t  else if (!(bb->flags & BB_IRREDUCIBLE_LOOP)\n-\t      && bitmap_bit_p (irreds, bb->index))\n+\t\t   && (bb->flags & saved_bb_irr))\n \t    {\n \t      error (\"basic block %d should not be marked irreducible\", bb->index);\n \t      err = 1;\n \t    }\n+\t  bb->flags &= ~saved_bb_irr;\n \t  FOR_EACH_EDGE (e, ei, bb->succs)\n \t    {\n \t      if ((e->flags & EDGE_IRREDUCIBLE_LOOP)\n-\t\t  && !(e->flags & saved_irr_mask))\n+\t\t  && !(e->flags & saved_edge_irr))\n \t\t{\n \t\t  error (\"edge from %d to %d should be marked irreducible\",\n \t\t\t e->src->index, e->dest->index);\n \t\t  err = 1;\n \t\t}\n \t      else if (!(e->flags & EDGE_IRREDUCIBLE_LOOP)\n-\t\t       && (e->flags & saved_irr_mask))\n+\t\t       && (e->flags & saved_edge_irr))\n \t\t{\n \t\t  error (\"edge from %d to %d should not be marked irreducible\",\n \t\t\t e->src->index, e->dest->index);\n \t\t  err = 1;\n \t\t}\n-\t      e->flags &= ~saved_irr_mask;\n+\t      e->flags &= ~saved_edge_irr;\n \t    }\n \t}\n     }"}]}