{"sha": "ee58b02f1160548513a3d00a04acbad93c423b3f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWU1OGIwMmYxMTYwNTQ4NTEzYTNkMDBhMDRhY2JhZDkzYzQyM2IzZg==", "commit": {"author": {"name": "Thomas Schwinge", "email": "thomas@codesourcery.com", "date": "2017-05-12T08:42:31Z"}, "committer": {"name": "Thomas Schwinge", "email": "tschwinge@gcc.gnu.org", "date": "2017-05-12T08:42:31Z"}, "message": "Test cases to check OpenACC offloaded function's attributes and classification\n\n\tgcc/testsuite/\n\t* c-c++-common/goacc/classify-kernels-unparallelized.c: New file.\n\t* c-c++-common/goacc/classify-kernels.c: Likewise.\n\t* c-c++-common/goacc/classify-parallel.c: Likewise.\n\t* c-c++-common/goacc/classify-routine.c: Likewise.\n\t* gfortran.dg/goacc/classify-kernels-unparallelized.f95: Likewise.\n\t* gfortran.dg/goacc/classify-kernels.f95: Likewise.\n\t* gfortran.dg/goacc/classify-parallel.f95: Likewise.\n\t* gfortran.dg/goacc/classify-routine.f95: Likewise.\n\nFrom-SVN: r247953", "tree": {"sha": "6bc7c61ce6276f7025a60b9ba17118b8e2ccc226", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6bc7c61ce6276f7025a60b9ba17118b8e2ccc226"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ee58b02f1160548513a3d00a04acbad93c423b3f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ee58b02f1160548513a3d00a04acbad93c423b3f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ee58b02f1160548513a3d00a04acbad93c423b3f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ee58b02f1160548513a3d00a04acbad93c423b3f/comments", "author": {"login": "tschwinge", "id": 21753, "node_id": "MDQ6VXNlcjIxNzUz", "avatar_url": "https://avatars.githubusercontent.com/u/21753?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tschwinge", "html_url": "https://github.com/tschwinge", "followers_url": "https://api.github.com/users/tschwinge/followers", "following_url": "https://api.github.com/users/tschwinge/following{/other_user}", "gists_url": "https://api.github.com/users/tschwinge/gists{/gist_id}", "starred_url": "https://api.github.com/users/tschwinge/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tschwinge/subscriptions", "organizations_url": "https://api.github.com/users/tschwinge/orgs", "repos_url": "https://api.github.com/users/tschwinge/repos", "events_url": "https://api.github.com/users/tschwinge/events{/privacy}", "received_events_url": "https://api.github.com/users/tschwinge/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "9ef6dfbaf26a6f17f7edadc7d6e69a1d2a35d3be", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9ef6dfbaf26a6f17f7edadc7d6e69a1d2a35d3be", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9ef6dfbaf26a6f17f7edadc7d6e69a1d2a35d3be"}], "stats": {"total": 280, "additions": 280, "deletions": 0}, "files": [{"sha": "5ed40a5e2e42ae7b789e1e69f8394fa52fbd4ce1", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee58b02f1160548513a3d00a04acbad93c423b3f/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee58b02f1160548513a3d00a04acbad93c423b3f/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=ee58b02f1160548513a3d00a04acbad93c423b3f", "patch": "@@ -1,3 +1,14 @@\n+2017-05-12  Thomas Schwinge  <thomas@codesourcery.com>\n+\n+\t* c-c++-common/goacc/classify-kernels-unparallelized.c: New file.\n+\t* c-c++-common/goacc/classify-kernels.c: Likewise.\n+\t* c-c++-common/goacc/classify-parallel.c: Likewise.\n+\t* c-c++-common/goacc/classify-routine.c: Likewise.\n+\t* gfortran.dg/goacc/classify-kernels-unparallelized.f95: Likewise.\n+\t* gfortran.dg/goacc/classify-kernels.f95: Likewise.\n+\t* gfortran.dg/goacc/classify-parallel.f95: Likewise.\n+\t* gfortran.dg/goacc/classify-routine.f95: Likewise.\n+\n 2017-05-11  Nathan Sidwell  <nathan@acm.org>\n \n \t* lib/gcc-dg.exp (schedule-cleanups): Add lang dump capability."}, {"sha": "a76351c2b8fa9bf6dba1d358dae2dec77e948899", "filename": "gcc/testsuite/c-c++-common/goacc/classify-kernels-unparallelized.c", "status": "added", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee58b02f1160548513a3d00a04acbad93c423b3f/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Fclassify-kernels-unparallelized.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee58b02f1160548513a3d00a04acbad93c423b3f/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Fclassify-kernels-unparallelized.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Fclassify-kernels-unparallelized.c?ref=ee58b02f1160548513a3d00a04acbad93c423b3f", "patch": "@@ -0,0 +1,39 @@\n+/* Check offloaded function's attributes and classification for unparallelized\n+   OpenACC kernels.  */\n+\n+/* { dg-additional-options \"-O2\" }\n+   { dg-additional-options \"-fdump-tree-ompexp\" }\n+   { dg-additional-options \"-fdump-tree-parloops1-all\" }\n+   { dg-additional-options \"-fdump-tree-oaccdevlow\" } */\n+\n+#define N 1024\n+\n+extern unsigned int *__restrict a;\n+extern unsigned int *__restrict b;\n+extern unsigned int *__restrict c;\n+\n+/* An \"extern\"al mapping of loop iterations/array indices makes the loop\n+   unparallelizable.  */\n+extern unsigned int f (unsigned int);\n+\n+void KERNELS ()\n+{\n+#pragma acc kernels copyin (a[0:N], b[0:N]) copyout (c[0:N])\n+  for (unsigned int i = 0; i < N; i++)\n+    c[i] = a[f (i)] + b[f (i)];\n+}\n+\n+/* Check the offloaded function's attributes.\n+   { dg-final { scan-tree-dump-times \"(?n)__attribute__\\\\(\\\\(omp target entrypoint\\\\)\\\\)\" 1 \"ompexp\" } } */\n+\n+/* Check that exactly one OpenACC kernels construct is analyzed, and that it\n+   can't be parallelized.\n+   { dg-final { scan-tree-dump-times \"FAILED:\" 1 \"parloops1\" } }\n+   { dg-final { scan-tree-dump-times \"(?n)__attribute__\\\\(\\\\(oacc function \\\\(, , \\\\), omp target entrypoint\\\\)\\\\)\" 1 \"parloops1\" } }\n+   { dg-final { scan-tree-dump-not \"SUCCESS: may be parallelized\" \"parloops1\" } } */\n+\n+/* Check the offloaded function's classification and compute dimensions (will\n+   always be 1 x 1 x 1 for non-offloading compilation).\n+   { dg-final { scan-tree-dump-times \"(?n)Function is kernels offload\" 1 \"oaccdevlow\" } }\n+   { dg-final { scan-tree-dump-times \"(?n)Compute dimensions \\\\\\[1, 1, 1\\\\\\]\" 1 \"oaccdevlow\" } }\n+   { dg-final { scan-tree-dump-times \"(?n)__attribute__\\\\(\\\\(oacc function \\\\(1, 1, 1\\\\), omp target entrypoint\\\\)\\\\)\" 1 \"oaccdevlow\" } } */"}, {"sha": "199a73e2a3da7e391e2710635e46578a45e08b28", "filename": "gcc/testsuite/c-c++-common/goacc/classify-kernels.c", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee58b02f1160548513a3d00a04acbad93c423b3f/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Fclassify-kernels.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee58b02f1160548513a3d00a04acbad93c423b3f/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Fclassify-kernels.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Fclassify-kernels.c?ref=ee58b02f1160548513a3d00a04acbad93c423b3f", "patch": "@@ -0,0 +1,35 @@\n+/* Check offloaded function's attributes and classification for OpenACC\n+   kernels.  */\n+\n+/* { dg-additional-options \"-O2\" }\n+   { dg-additional-options \"-fdump-tree-ompexp\" }\n+   { dg-additional-options \"-fdump-tree-parloops1-all\" }\n+   { dg-additional-options \"-fdump-tree-oaccdevlow\" } */\n+\n+#define N 1024\n+\n+extern unsigned int *__restrict a;\n+extern unsigned int *__restrict b;\n+extern unsigned int *__restrict c;\n+\n+void KERNELS ()\n+{\n+#pragma acc kernels copyin (a[0:N], b[0:N]) copyout (c[0:N])\n+  for (unsigned int i = 0; i < N; i++)\n+    c[i] = a[i] + b[i];\n+}\n+\n+/* Check the offloaded function's attributes.\n+   { dg-final { scan-tree-dump-times \"(?n)__attribute__\\\\(\\\\(omp target entrypoint\\\\)\\\\)\" 1 \"ompexp\" } } */\n+\n+/* Check that exactly one OpenACC kernels construct is analyzed, and that it\n+   can be parallelized.\n+   { dg-final { scan-tree-dump-times \"SUCCESS: may be parallelized\" 1 \"parloops1\" } }\n+   { dg-final { scan-tree-dump-times \"(?n)__attribute__\\\\(\\\\(oacc function \\\\(0, , \\\\), omp target entrypoint\\\\)\\\\)\" 1 \"parloops1\" } }\n+   { dg-final { scan-tree-dump-not \"FAILED:\" \"parloops1\" } } */\n+\n+/* Check the offloaded function's classification and compute dimensions (will\n+   always be 1 x 1 x 1 for non-offloading compilation).\n+   { dg-final { scan-tree-dump-times \"(?n)Function is kernels offload\" 1 \"oaccdevlow\" } }\n+   { dg-final { scan-tree-dump-times \"(?n)Compute dimensions \\\\\\[1, 1, 1\\\\\\]\" 1 \"oaccdevlow\" } }\n+   { dg-final { scan-tree-dump-times \"(?n)__attribute__\\\\(\\\\(oacc function \\\\(1, 1, 1\\\\), omp target entrypoint\\\\)\\\\)\" 1 \"oaccdevlow\" } } */"}, {"sha": "9d48c1bf9d61ddbabc689da8e63cb153abab3d19", "filename": "gcc/testsuite/c-c++-common/goacc/classify-parallel.c", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee58b02f1160548513a3d00a04acbad93c423b3f/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Fclassify-parallel.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee58b02f1160548513a3d00a04acbad93c423b3f/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Fclassify-parallel.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Fclassify-parallel.c?ref=ee58b02f1160548513a3d00a04acbad93c423b3f", "patch": "@@ -0,0 +1,28 @@\n+/* Check offloaded function's attributes and classification for OpenACC\n+   parallel.  */\n+\n+/* { dg-additional-options \"-O2\" }\n+   { dg-additional-options \"-fdump-tree-ompexp\" }\n+   { dg-additional-options \"-fdump-tree-oaccdevlow\" } */\n+\n+#define N 1024\n+\n+extern unsigned int *__restrict a;\n+extern unsigned int *__restrict b;\n+extern unsigned int *__restrict c;\n+\n+void PARALLEL ()\n+{\n+#pragma acc parallel loop copyin (a[0:N], b[0:N]) copyout (c[0:N])\n+  for (unsigned int i = 0; i < N; i++)\n+    c[i] = a[i] + b[i];\n+}\n+\n+/* Check the offloaded function's attributes.\n+   { dg-final { scan-tree-dump-times \"(?n)__attribute__\\\\(\\\\(omp target entrypoint\\\\)\\\\)\" 1 \"ompexp\" } } */\n+\n+/* Check the offloaded function's classification and compute dimensions (will\n+   always be 1 x 1 x 1 for non-offloading compilation).\n+   { dg-final { scan-tree-dump-times \"(?n)Function is parallel offload\" 1 \"oaccdevlow\" } }\n+   { dg-final { scan-tree-dump-times \"(?n)Compute dimensions \\\\\\[1, 1, 1\\\\\\]\" 1 \"oaccdevlow\" } }\n+   { dg-final { scan-tree-dump-times \"(?n)__attribute__\\\\(\\\\(oacc function \\\\(1, 1, 1\\\\), omp target entrypoint\\\\)\\\\)\" 1 \"oaccdevlow\" } } */"}, {"sha": "72b02c21028d4e358f3510ae46958e541bdf54c7", "filename": "gcc/testsuite/c-c++-common/goacc/classify-routine.c", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee58b02f1160548513a3d00a04acbad93c423b3f/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Fclassify-routine.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee58b02f1160548513a3d00a04acbad93c423b3f/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Fclassify-routine.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Fclassify-routine.c?ref=ee58b02f1160548513a3d00a04acbad93c423b3f", "patch": "@@ -0,0 +1,30 @@\n+/* Check offloaded function's attributes and classification for OpenACC\n+   routine.  */\n+\n+/* { dg-additional-options \"-O2\" }\n+   { dg-additional-options \"-fdump-tree-ompexp\" }\n+   { dg-additional-options \"-fdump-tree-oaccdevlow\" } */\n+\n+#define N 1024\n+\n+extern unsigned int *__restrict a;\n+extern unsigned int *__restrict b;\n+extern unsigned int *__restrict c;\n+#pragma acc declare copyin (a, b) create (c)\n+\n+#pragma acc routine worker\n+void ROUTINE ()\n+{\n+#pragma acc loop\n+  for (unsigned int i = 0; i < N; i++)\n+    c[i] = a[i] + b[i];\n+}\n+\n+/* Check the offloaded function's attributes.\n+   { dg-final { scan-tree-dump-times \"(?n)__attribute__\\\\(\\\\(omp declare target, oacc function \\\\(0 1, 1 0, 1 0\\\\)\\\\)\\\\)\" 1 \"ompexp\" } } */\n+\n+/* Check the offloaded function's classification and compute dimensions (will\n+   always be 1 x 1 x 1 for non-offloading compilation).\n+   { dg-final { scan-tree-dump-times \"(?n)Function is routine level 1\" 1 \"oaccdevlow\" } }\n+   { dg-final { scan-tree-dump-times \"(?n)Compute dimensions \\\\\\[1, 1, 1\\\\\\]\" 1 \"oaccdevlow\" } }\n+   { dg-final { scan-tree-dump-times \"(?n)__attribute__\\\\(\\\\(oacc function \\\\(0 1, 1 1, 1 1\\\\), omp declare target, oacc function \\\\(0 1, 1 0, 1 0\\\\)\\\\)\\\\)\" 1 \"oaccdevlow\" } } */"}, {"sha": "fd46d0d506c2346a4f6565820cf2f2a860bfd804", "filename": "gcc/testsuite/gfortran.dg/goacc/classify-kernels-unparallelized.f95", "status": "added", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee58b02f1160548513a3d00a04acbad93c423b3f/gcc%2Ftestsuite%2Fgfortran.dg%2Fgoacc%2Fclassify-kernels-unparallelized.f95", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee58b02f1160548513a3d00a04acbad93c423b3f/gcc%2Ftestsuite%2Fgfortran.dg%2Fgoacc%2Fclassify-kernels-unparallelized.f95", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fgoacc%2Fclassify-kernels-unparallelized.f95?ref=ee58b02f1160548513a3d00a04acbad93c423b3f", "patch": "@@ -0,0 +1,41 @@\n+! Check offloaded function's attributes and classification for unparallelized\n+! OpenACC kernels.\n+\n+! { dg-additional-options \"-O2\" }\n+! { dg-additional-options \"-fdump-tree-ompexp\" }\n+! { dg-additional-options \"-fdump-tree-parloops1-all\" }\n+! { dg-additional-options \"-fdump-tree-oaccdevlow\" }\n+\n+program main\n+  implicit none\n+  integer, parameter :: n = 1024\n+  integer, dimension (0:n-1) :: a, b, c\n+  integer :: i\n+\n+  ! An \"external\" mapping of loop iterations/array indices makes the loop\n+  ! unparallelizable.\n+  integer, external :: f\n+\n+  call setup(a, b)\n+\n+  !$acc kernels copyin (a(0:n-1), b(0:n-1)) copyout (c(0:n-1))\n+  do i = 0, n - 1\n+     c(i) = a(f (i)) + b(f (i))\n+  end do\n+  !$acc end kernels\n+end program main\n+\n+! Check the offloaded function's attributes.\n+! { dg-final { scan-tree-dump-times \"(?n)__attribute__\\\\(\\\\(omp target entrypoint\\\\)\\\\)\" 1 \"ompexp\" } }\n+\n+! Check that exactly one OpenACC kernels construct is analyzed, and that it\n+! can't be parallelized.\n+! { dg-final { scan-tree-dump-times \"FAILED:\" 1 \"parloops1\" } }\n+! { dg-final { scan-tree-dump-times \"(?n)__attribute__\\\\(\\\\(oacc function \\\\(, , \\\\), omp target entrypoint\\\\)\\\\)\" 1 \"parloops1\" } }\n+! { dg-final { scan-tree-dump-not \"SUCCESS: may be parallelized\" \"parloops1\" } }\n+\n+! Check the offloaded function's classification and compute dimensions (will\n+! always be 1 x 1 x 1 for non-offloading compilation).\n+! { dg-final { scan-tree-dump-times \"(?n)Function is kernels offload\" 1 \"oaccdevlow\" } }\n+! { dg-final { scan-tree-dump-times \"(?n)Compute dimensions \\\\\\[1, 1, 1\\\\\\]\" 1 \"oaccdevlow\" } }\n+! { dg-final { scan-tree-dump-times \"(?n)__attribute__\\\\(\\\\(oacc function \\\\(1, 1, 1\\\\), omp target entrypoint\\\\)\\\\)\" 1 \"oaccdevlow\" } }"}, {"sha": "053d27c2a72475cc4cfc3281094c30006dce452b", "filename": "gcc/testsuite/gfortran.dg/goacc/classify-kernels.f95", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee58b02f1160548513a3d00a04acbad93c423b3f/gcc%2Ftestsuite%2Fgfortran.dg%2Fgoacc%2Fclassify-kernels.f95", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee58b02f1160548513a3d00a04acbad93c423b3f/gcc%2Ftestsuite%2Fgfortran.dg%2Fgoacc%2Fclassify-kernels.f95", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fgoacc%2Fclassify-kernels.f95?ref=ee58b02f1160548513a3d00a04acbad93c423b3f", "patch": "@@ -0,0 +1,37 @@\n+! Check offloaded function's attributes and classification for OpenACC\n+! kernels.\n+\n+! { dg-additional-options \"-O2\" }\n+! { dg-additional-options \"-fdump-tree-ompexp\" }\n+! { dg-additional-options \"-fdump-tree-parloops1-all\" }\n+! { dg-additional-options \"-fdump-tree-oaccdevlow\" }\n+\n+program main\n+  implicit none\n+  integer, parameter :: n = 1024\n+  integer, dimension (0:n-1) :: a, b, c\n+  integer :: i\n+\n+  call setup(a, b)\n+\n+  !$acc kernels copyin (a(0:n-1), b(0:n-1)) copyout (c(0:n-1))\n+  do i = 0, n - 1\n+     c(i) = a(i) + b(i)\n+  end do\n+  !$acc end kernels\n+end program main\n+\n+! Check the offloaded function's attributes.\n+! { dg-final { scan-tree-dump-times \"(?n)__attribute__\\\\(\\\\(omp target entrypoint\\\\)\\\\)\" 1 \"ompexp\" } }\n+\n+! Check that exactly one OpenACC kernels construct is analyzed, and that it\n+! can be parallelized.\n+! { dg-final { scan-tree-dump-times \"SUCCESS: may be parallelized\" 1 \"parloops1\" } }\n+! { dg-final { scan-tree-dump-times \"(?n)__attribute__\\\\(\\\\(oacc function \\\\(0, , \\\\), omp target entrypoint\\\\)\\\\)\" 1 \"parloops1\" } }\n+! { dg-final { scan-tree-dump-not \"FAILED:\" \"parloops1\" } }\n+\n+! Check the offloaded function's classification and compute dimensions (will\n+! always be 1 x 1 x 1 for non-offloading compilation).\n+! { dg-final { scan-tree-dump-times \"(?n)Function is kernels offload\" 1 \"oaccdevlow\" } }\n+! { dg-final { scan-tree-dump-times \"(?n)Compute dimensions \\\\\\[1, 1, 1\\\\\\]\" 1 \"oaccdevlow\" } }\n+! { dg-final { scan-tree-dump-times \"(?n)__attribute__\\\\(\\\\(oacc function \\\\(1, 1, 1\\\\), omp target entrypoint\\\\)\\\\)\" 1 \"oaccdevlow\" } }"}, {"sha": "087ff48f94f11b8ca4ef007c9d024e595326e6c2", "filename": "gcc/testsuite/gfortran.dg/goacc/classify-parallel.f95", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee58b02f1160548513a3d00a04acbad93c423b3f/gcc%2Ftestsuite%2Fgfortran.dg%2Fgoacc%2Fclassify-parallel.f95", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee58b02f1160548513a3d00a04acbad93c423b3f/gcc%2Ftestsuite%2Fgfortran.dg%2Fgoacc%2Fclassify-parallel.f95", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fgoacc%2Fclassify-parallel.f95?ref=ee58b02f1160548513a3d00a04acbad93c423b3f", "patch": "@@ -0,0 +1,30 @@\n+! Check offloaded function's attributes and classification for OpenACC\n+! parallel.\n+\n+! { dg-additional-options \"-O2\" }\n+! { dg-additional-options \"-fdump-tree-ompexp\" }\n+! { dg-additional-options \"-fdump-tree-oaccdevlow\" }\n+\n+program main\n+  implicit none\n+  integer, parameter :: n = 1024\n+  integer, dimension (0:n-1) :: a, b, c\n+  integer :: i\n+\n+  call setup(a, b)\n+\n+  !$acc parallel loop copyin (a(0:n-1), b(0:n-1)) copyout (c(0:n-1))\n+  do i = 0, n - 1\n+     c(i) = a(i) + b(i)\n+  end do\n+  !$acc end parallel loop\n+end program main\n+\n+! Check the offloaded function's attributes.\n+! { dg-final { scan-tree-dump-times \"(?n)__attribute__\\\\(\\\\(omp target entrypoint\\\\)\\\\)\" 1 \"ompexp\" } }\n+\n+! Check the offloaded function's classification and compute dimensions (will\n+! always be 1 x 1 x 1 for non-offloading compilation).\n+! { dg-final { scan-tree-dump-times \"(?n)Function is parallel offload\" 1 \"oaccdevlow\" } }\n+! { dg-final { scan-tree-dump-times \"(?n)Compute dimensions \\\\\\[1, 1, 1\\\\\\]\" 1 \"oaccdevlow\" } }\n+! { dg-final { scan-tree-dump-times \"(?n)__attribute__\\\\(\\\\(oacc function \\\\(1, 1, 1\\\\), omp target entrypoint\\\\)\\\\)\" 1 \"oaccdevlow\" } }"}, {"sha": "319d76780792bb376f8d496e211448f60eee3a36", "filename": "gcc/testsuite/gfortran.dg/goacc/classify-routine.f95", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee58b02f1160548513a3d00a04acbad93c423b3f/gcc%2Ftestsuite%2Fgfortran.dg%2Fgoacc%2Fclassify-routine.f95", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee58b02f1160548513a3d00a04acbad93c423b3f/gcc%2Ftestsuite%2Fgfortran.dg%2Fgoacc%2Fclassify-routine.f95", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fgoacc%2Fclassify-routine.f95?ref=ee58b02f1160548513a3d00a04acbad93c423b3f", "patch": "@@ -0,0 +1,29 @@\n+! Check offloaded function's attributes and classification for OpenACC\n+! routine.\n+\n+! { dg-additional-options \"-O2\" }\n+! { dg-additional-options \"-fdump-tree-ompexp\" }\n+! { dg-additional-options \"-fdump-tree-oaccdevlow\" }\n+\n+subroutine ROUTINE\n+  !$acc routine worker\n+  integer, parameter :: n = 1024\n+  integer, dimension (0:n-1) :: a, b, c\n+  integer :: i\n+\n+  call setup(a, b)\n+\n+  !$acc loop\n+  do i = 0, n - 1\n+     c(i) = a(i) + b(i)\n+  end do\n+end subroutine ROUTINE\n+\n+! Check the offloaded function's attributes.\n+! { dg-final { scan-tree-dump-times \"(?n)__attribute__\\\\(\\\\(omp declare target, oacc function \\\\(0 0, 1 0, 1 0\\\\)\\\\)\\\\)\" 1 \"ompexp\" } }\n+\n+! Check the offloaded function's classification and compute dimensions (will\n+! always be 1 x 1 x 1 for non-offloading compilation).\n+! { dg-final { scan-tree-dump-times \"(?n)Function is routine level 1\" 1 \"oaccdevlow\" } }\n+! { dg-final { scan-tree-dump-times \"(?n)Compute dimensions \\\\\\[1, 1, 1\\\\\\]\" 1 \"oaccdevlow\" } }\n+! { dg-final { scan-tree-dump-times \"(?n)__attribute__\\\\(\\\\(oacc function \\\\(0 1, 1 1, 1 1\\\\), omp declare target, oacc function \\\\(0 0, 1 0, 1 0\\\\)\\\\)\\\\)\" 1 \"oaccdevlow\" } }"}]}