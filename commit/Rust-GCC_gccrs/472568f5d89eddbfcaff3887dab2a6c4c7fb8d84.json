{"sha": "472568f5d89eddbfcaff3887dab2a6c4c7fb8d84", "node_id": "C_kwDOANBUbNoAKDQ3MjU2OGY1ZDg5ZWRkYmZjYWZmMzg4N2RhYjJhNmM0YzdmYjhkODQ", "commit": {"author": {"name": "Haochen Jiang", "email": "haochen.jiang@intel.com", "date": "2021-12-24T05:55:06Z"}, "committer": {"name": "liuhongt", "email": "hongtao.liu@intel.com", "date": "2021-12-28T08:58:27Z"}, "message": "Fix tdpbf16ps testcase\n\ngcc/testsuite/ChangeLog:\n\n\t* gcc.target/i386/amx-check.h (check_float_tile_register):\n\tNew check function for float to prevent precision loss.\n\t* gcc.target/i386/amxbf16-dpbf16ps-2.c: Correct the type convert\n\tand byte offset. Use the new check function.", "tree": {"sha": "9c06f95b028f1c007d9f1c2652586a5ab69b4317", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9c06f95b028f1c007d9f1c2652586a5ab69b4317"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/472568f5d89eddbfcaff3887dab2a6c4c7fb8d84", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/472568f5d89eddbfcaff3887dab2a6c4c7fb8d84", "html_url": "https://github.com/Rust-GCC/gccrs/commit/472568f5d89eddbfcaff3887dab2a6c4c7fb8d84", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/472568f5d89eddbfcaff3887dab2a6c4c7fb8d84/comments", "author": {"login": "jianghc724", "id": 10798680, "node_id": "MDQ6VXNlcjEwNzk4Njgw", "avatar_url": "https://avatars.githubusercontent.com/u/10798680?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jianghc724", "html_url": "https://github.com/jianghc724", "followers_url": "https://api.github.com/users/jianghc724/followers", "following_url": "https://api.github.com/users/jianghc724/following{/other_user}", "gists_url": "https://api.github.com/users/jianghc724/gists{/gist_id}", "starred_url": "https://api.github.com/users/jianghc724/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jianghc724/subscriptions", "organizations_url": "https://api.github.com/users/jianghc724/orgs", "repos_url": "https://api.github.com/users/jianghc724/repos", "events_url": "https://api.github.com/users/jianghc724/events{/privacy}", "received_events_url": "https://api.github.com/users/jianghc724/received_events", "type": "User", "site_admin": false}, "committer": {"login": "algebra84", "id": 22926165, "node_id": "MDQ6VXNlcjIyOTI2MTY1", "avatar_url": "https://avatars.githubusercontent.com/u/22926165?v=4", "gravatar_id": "", "url": "https://api.github.com/users/algebra84", "html_url": "https://github.com/algebra84", "followers_url": "https://api.github.com/users/algebra84/followers", "following_url": "https://api.github.com/users/algebra84/following{/other_user}", "gists_url": "https://api.github.com/users/algebra84/gists{/gist_id}", "starred_url": "https://api.github.com/users/algebra84/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/algebra84/subscriptions", "organizations_url": "https://api.github.com/users/algebra84/orgs", "repos_url": "https://api.github.com/users/algebra84/repos", "events_url": "https://api.github.com/users/algebra84/events{/privacy}", "received_events_url": "https://api.github.com/users/algebra84/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d1e111daee511e9831e6f8c4253170c8b21885cd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d1e111daee511e9831e6f8c4253170c8b21885cd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d1e111daee511e9831e6f8c4253170c8b21885cd"}], "stats": {"total": 53, "additions": 41, "deletions": 12}, "files": [{"sha": "434b0e59703f774efceb6c87373947a1b3dc8ab6", "filename": "gcc/testsuite/gcc.target/i386/amx-check.h", "status": "modified", "additions": 21, "deletions": 2, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/472568f5d89eddbfcaff3887dab2a6c4c7fb8d84/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Famx-check.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/472568f5d89eddbfcaff3887dab2a6c4c7fb8d84/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Famx-check.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Famx-check.h?ref=472568f5d89eddbfcaff3887dab2a6c4c7fb8d84", "patch": "@@ -139,8 +139,27 @@ int check_tile_register (__tile* ref, __tile* target)\n \n   for (i = 0; i < rows; i++)\n     for (j = 0; j < colsb; j++)\n-\tif (ref->buf[i * colsb + j] != target->buf[i * colsb + j])\n-\t    return 0;\n+      if (ref->buf[i * colsb + j] != target->buf[i * colsb + j])\n+\treturn 0;\n+\n+  return 1;\n+}\n+\n+/* Compare float tile register value with __tile variable */\n+int check_float_tile_register (__tile* ref, __tile* target)\n+{\n+  /* Tile register should be stored from tmm to\n+     memory and compare with emulation results. */\n+  int rows = target->rows;\n+  int colsb = target->colsb / 4;\n+  int i, j;\n+  uint32_t *ref_buf = (uint32_t *) ref->buf;\n+  uint32_t *target_buf = (uint32_t *) target->buf;\n+\n+  for (i = 0; i < rows; i++)\n+    for (j = 0; j < colsb; j++)\n+      if (abs(ref_buf[i * colsb + j] - target_buf[i * colsb + j]) > 1)\n+\treturn 0;\n \n   return 1;\n }"}, {"sha": "b00bc13ec7883c8d3d15912d6aa62c450e72153b", "filename": "gcc/testsuite/gcc.target/i386/amxbf16-dpbf16ps-2.c", "status": "modified", "additions": 20, "deletions": 10, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/472568f5d89eddbfcaff3887dab2a6c4c7fb8d84/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Famxbf16-dpbf16ps-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/472568f5d89eddbfcaff3887dab2a6c4c7fb8d84/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Famxbf16-dpbf16ps-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Famxbf16-dpbf16ps-2.c?ref=472568f5d89eddbfcaff3887dab2a6c4c7fb8d84", "patch": "@@ -12,15 +12,25 @@ void test_amx_bf16_dpbf16ps ();\n /* Transformation functions between bf16/float */\n static uint16_t make_bf16 (float f)\n {\n-  uint32_t u = (uint32_t)f;\n-  u = (u >> 16) & 0xffff;\n-  return (uint16_t)u;\n+  union\n+  {\n+    float f;\n+    uint32_t u;\n+  } fu;\n+  fu.f = f;\n+  fu.u = (fu.u >> 16) & 0xffff;\n+  return (uint16_t) fu.u;\n }\n \n static float make_f32 (uint16_t bf)\n {\n-  uint32_t u = (uint32_t)(bf << 16);\n-  return (float)u;\n+  union\n+  {\n+    float f;\n+    uint32_t u;\n+  } fu;\n+  fu.u = (uint32_t) bf << 16;\n+  return fu.f;\n }\n \n /* Init tile buffer with bf16 pairs */\n@@ -54,10 +64,10 @@ void calc_matrix_dpbf16ps (__tile *dst, __tile *src1, __tile *src2)\n \tfor (t = 0; t < 2; t+=2)\n \t  {    \n \t    dst_buf[i * N + k] += \n-\t      (make_f32(src1_buf[i * 4 * N + 4 * j + t]) *\n-\t      make_f32(src2_buf[j * 4 * K + 4 * k + t])) +\n-\t      (make_f32(src1_buf[i * 4 * N + 4 * j + t + 1]) *\n-\t      make_f32(src2_buf[j * 4 * K + 4 * k + t + 1]));\n+\t      (make_f32(src1_buf[i * 2 * N + 2 * j + t]) *\n+\t      make_f32(src2_buf[j * 2 * K + 2 * k + t])) +\n+\t      (make_f32(src1_buf[i * 2 * N + 2 * j + t + 1]) *\n+\t      make_f32(src2_buf[j * 2 * K + 2 * k + t + 1]));\n \t  }\n \n }\n@@ -80,6 +90,6 @@ void test_amx_bf16_dpbf16ps ()\n   _tile_dpbf16ps (1, 2, 3);\n   _tile_stored (1, dst_ref.buf, _STRIDE);\n \n-  if (!check_tile_register (&dst_ref, &dst))\n+  if (!check_float_tile_register (&dst_ref, &dst))\n         abort();\n }"}]}