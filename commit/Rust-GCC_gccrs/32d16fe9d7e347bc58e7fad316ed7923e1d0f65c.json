{"sha": "32d16fe9d7e347bc58e7fad316ed7923e1d0f65c", "node_id": "C_kwDOANBUbNoAKDMyZDE2ZmU5ZDdlMzQ3YmM1OGU3ZmFkMzE2ZWQ3OTIzZTFkMGY2NWM", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2022-11-19T08:26:44Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2022-11-19T08:26:44Z"}, "message": "c++: Implement C++23 P2647R1 - Permitting static constexpr variables in constexpr functions\n\nThe following patch implements this paper.\nPer further discussions it is implemented for C++23 only, so isn't\ntreated as a DR, e.g. because the part of the standard the paper is\nchanging didn't even exist in C++20.\nAnd we gave up on trying to implement it as a pedwarn rather than\nerror for C++20 and older, because of implicit constexpr lambdas or\n-fimplicit-constexpr reasons.\nFor C++20 and older, the only change is that passing through\ndefinitions of static or thread_local vars usable in constant expressions\nis now accepted in statement expressions if they aren't inside of constexpr\nor consteval functions.\n\n2022-11-19  Jakub Jelinek  <jakub@redhat.com>\n\ngcc/c-family/\n\t* c-cppbuiltin.cc (c_cpp_builtins): Bump __cpp_constexpr\n\tvalue from 202207L to 202211L.\ngcc/cp/\n\t* constexpr.cc (cxx_eval_constant_expression): Implement C++23\n\tP2647R1 - Permitting static constexpr variables in constexpr functions.\n\tAllow DECL_EXPRs of decl_constant_var_p static or thread_local vars.\n\t(potential_constant_expression_1): Similarly, except use\n\tdecl_maybe_constant_var_p instead of decl_constant_var_p if\n\tprocessing_template_decl.\ngcc/testsuite/\n\t* g++.dg/cpp23/constexpr-nonlit17.C: New test.\n\t* g++.dg/cpp23/constexpr-nonlit18.C: New test.\n\t* g++.dg/cpp23/feat-cxx2b.C: Adjust expected __cpp_constexpr\n\tvalue.\n\t* g++.dg/ext/stmtexpr19.C: Don't expect an error.\n\t* g++.dg/ext/stmtexpr25.C: New test.", "tree": {"sha": "e590f605c52120dec6d2d39361ca7c02c9c883f4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e590f605c52120dec6d2d39361ca7c02c9c883f4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/32d16fe9d7e347bc58e7fad316ed7923e1d0f65c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/32d16fe9d7e347bc58e7fad316ed7923e1d0f65c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/32d16fe9d7e347bc58e7fad316ed7923e1d0f65c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/32d16fe9d7e347bc58e7fad316ed7923e1d0f65c/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2efb237ffc68ec9bb17982434f5941bfa14f8b50", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2efb237ffc68ec9bb17982434f5941bfa14f8b50", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2efb237ffc68ec9bb17982434f5941bfa14f8b50"}], "stats": {"total": 94, "additions": 88, "deletions": 6}, "files": [{"sha": "333f3e138d611cff55610a952e21405617a237ed", "filename": "gcc/c-family/c-cppbuiltin.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/32d16fe9d7e347bc58e7fad316ed7923e1d0f65c/gcc%2Fc-family%2Fc-cppbuiltin.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/32d16fe9d7e347bc58e7fad316ed7923e1d0f65c/gcc%2Fc-family%2Fc-cppbuiltin.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-cppbuiltin.cc?ref=32d16fe9d7e347bc58e7fad316ed7923e1d0f65c", "patch": "@@ -1074,7 +1074,7 @@ c_cpp_builtins (cpp_reader *pfile)\n \t  /* Set feature test macros for C++23.  */\n \t  cpp_define (pfile, \"__cpp_size_t_suffix=202011L\");\n \t  cpp_define (pfile, \"__cpp_if_consteval=202106L\");\n-\t  cpp_define (pfile, \"__cpp_constexpr=202207L\");\n+\t  cpp_define (pfile, \"__cpp_constexpr=202211L\");\n \t  cpp_define (pfile, \"__cpp_multidimensional_subscript=202211L\");\n \t  cpp_define (pfile, \"__cpp_named_character_escapes=202207L\");\n \t  cpp_define (pfile, \"__cpp_static_call_operator=202207L\");"}, {"sha": "0b43ae4ece3648ed50a988bc1f50d51c87292296", "filename": "gcc/cp/constexpr.cc", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/32d16fe9d7e347bc58e7fad316ed7923e1d0f65c/gcc%2Fcp%2Fconstexpr.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/32d16fe9d7e347bc58e7fad316ed7923e1d0f65c/gcc%2Fcp%2Fconstexpr.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fconstexpr.cc?ref=32d16fe9d7e347bc58e7fad316ed7923e1d0f65c", "patch": "@@ -7124,7 +7124,8 @@ cxx_eval_constant_expression (const constexpr_ctx *ctx, tree t,\n \t    && (TREE_STATIC (r)\n \t\t|| (CP_DECL_THREAD_LOCAL_P (r) && !DECL_REALLY_EXTERN (r)))\n \t    /* Allow __FUNCTION__ etc.  */\n-\t    && !DECL_ARTIFICIAL (r))\n+\t    && !DECL_ARTIFICIAL (r)\n+\t    && !decl_constant_var_p (r))\n \t  {\n \t    if (!ctx->quiet)\n \t      {\n@@ -9630,7 +9631,10 @@ potential_constant_expression_1 (tree t, bool want_rval, bool strict, bool now,\n \n     case DECL_EXPR:\n       tmp = DECL_EXPR_DECL (t);\n-      if (VAR_P (tmp) && !DECL_ARTIFICIAL (tmp))\n+      if (VAR_P (tmp) && !DECL_ARTIFICIAL (tmp)\n+\t  && (processing_template_decl\n+\t      ? !decl_maybe_constant_var_p (tmp)\n+\t      : !decl_constant_var_p (tmp)))\n \t{\n \t  if (CP_DECL_THREAD_LOCAL_P (tmp) && !DECL_REALLY_EXTERN (tmp))\n \t    {"}, {"sha": "a4c78bb43ef123bb95713388718517d3ff4194ca", "filename": "gcc/testsuite/g++.dg/cpp23/constexpr-nonlit17.C", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/32d16fe9d7e347bc58e7fad316ed7923e1d0f65c/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp23%2Fconstexpr-nonlit17.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/32d16fe9d7e347bc58e7fad316ed7923e1d0f65c/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp23%2Fconstexpr-nonlit17.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp23%2Fconstexpr-nonlit17.C?ref=32d16fe9d7e347bc58e7fad316ed7923e1d0f65c", "patch": "@@ -0,0 +1,12 @@\n+// P2647R1 - Permitting static constexpr variables in constexpr functions\n+// { dg-do compile { target c++23 } }\n+\n+constexpr char\n+test ()\n+{\n+  static const int x = 5;\n+  static constexpr char c[] = \"Hello World\";\n+  return *(c + x);\n+}\n+\n+static_assert (test () == ' ');"}, {"sha": "8e230ef3bc3ab4c6809e59f28e4c52a628eddbe3", "filename": "gcc/testsuite/g++.dg/cpp23/constexpr-nonlit18.C", "status": "added", "additions": 49, "deletions": 0, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/32d16fe9d7e347bc58e7fad316ed7923e1d0f65c/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp23%2Fconstexpr-nonlit18.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/32d16fe9d7e347bc58e7fad316ed7923e1d0f65c/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp23%2Fconstexpr-nonlit18.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp23%2Fconstexpr-nonlit18.C?ref=32d16fe9d7e347bc58e7fad316ed7923e1d0f65c", "patch": "@@ -0,0 +1,49 @@\n+// P2647R1 - Permitting static constexpr variables in constexpr functions\n+// { dg-do compile { target c++14 } }\n+\n+constexpr int\n+f1 (int x)\n+{\n+  if (x)\n+    throw 1;\n+  return 0;\n+}\n+\n+constexpr int\n+f2 ()\n+{\n+  static const int a = f1 (1);\t\t// { dg-error \"'a' defined 'static' in 'constexpr' function only available with\" \"\" { target c++20_down } }\n+  return 0;\n+}\n+\n+constexpr int\n+f3 ()\n+{\n+  static const int a = 5;\t\t// { dg-error \"'a' defined 'static' in 'constexpr' function only available with\" \"\" { target c++20_down } }\n+  return 0;\n+}\n+\n+constexpr int\n+f4 ()\t\t\t\t\t// { dg-message \"declared here\" \"\" { target c++20_down } }\n+{\t\t\t\t\t// { dg-message \"is not usable as a 'constexpr' function because:\" \"\" { target c++23 } .-1 }\n+  static const int a = f1 (1);\t\t// { dg-error \"'a' defined 'static' in 'constexpr' function only available with\" \"\" { target c++20_down } }\n+  return 0;\t\t\t\t// { dg-error \"'a' defined 'static' in 'constexpr' context\" \"\" { target c++23 } .-1 }\n+}\n+\n+constexpr int a4 = f4 ();\t\t// { dg-error \"called in a constant expression\" }\n+\n+constexpr int\n+f5 ()\n+{\n+  static const int a = f1 (0);\t\t// { dg-error \"'a' defined 'static' in 'constexpr' function only available with\" \"\" { target c++20_down } }\n+  return 0;\n+}\n+\n+constexpr int\n+f6 ()\n+{\n+  static const int a = f1 (0);\t\t// { dg-error \"'a' defined 'static' in 'constexpr' function only available with\" \"\" { target c++20_down } }\n+  return 0;\n+}\n+\n+constexpr int a6 = f6 ();\t\t// { dg-error \"called in a constant expression\" \"\" { target c++20_down } }"}, {"sha": "6f4f6bcaad0dc0ea8ff85690fe0220c64db55fca", "filename": "gcc/testsuite/g++.dg/cpp23/feat-cxx2b.C", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/32d16fe9d7e347bc58e7fad316ed7923e1d0f65c/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp23%2Ffeat-cxx2b.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/32d16fe9d7e347bc58e7fad316ed7923e1d0f65c/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp23%2Ffeat-cxx2b.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp23%2Ffeat-cxx2b.C?ref=32d16fe9d7e347bc58e7fad316ed7923e1d0f65c", "patch": "@@ -134,8 +134,8 @@\n \n #ifndef __cpp_constexpr\n #  error \"__cpp_constexpr\"\n-#elif __cpp_constexpr != 202207\n-#  error \"__cpp_constexpr != 202207\"\n+#elif __cpp_constexpr != 202211\n+#  error \"__cpp_constexpr != 202211\"\n #endif\n \n #ifndef __cpp_decltype_auto"}, {"sha": "be395b690659e197580d1995b30e573ffecf345d", "filename": "gcc/testsuite/g++.dg/ext/stmtexpr19.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/32d16fe9d7e347bc58e7fad316ed7923e1d0f65c/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fstmtexpr19.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/32d16fe9d7e347bc58e7fad316ed7923e1d0f65c/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fstmtexpr19.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fstmtexpr19.C?ref=32d16fe9d7e347bc58e7fad316ed7923e1d0f65c", "patch": "@@ -8,7 +8,7 @@ const test* setup()\n {\n   static constexpr test atest =\n     {\n-      ({ static const int inner = 123; &inner; }) // { dg-error \"static\" }\n+      ({ static const int inner = 123; &inner; })\n     };\n \n   return &atest;"}, {"sha": "79c40fc61c43774bdb500e45cc9961acc17100ac", "filename": "gcc/testsuite/g++.dg/ext/stmtexpr25.C", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/32d16fe9d7e347bc58e7fad316ed7923e1d0f65c/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fstmtexpr25.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/32d16fe9d7e347bc58e7fad316ed7923e1d0f65c/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fstmtexpr25.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fstmtexpr25.C?ref=32d16fe9d7e347bc58e7fad316ed7923e1d0f65c", "patch": "@@ -0,0 +1,17 @@\n+// PR c++/81073\n+// { dg-options \"\" }\n+// { dg-do compile { target c++11 } }\n+\n+struct test { const int *addr; };\n+\n+const test* setup()\n+{\n+  static constexpr test atest =\n+    {\n+      ({ static const int inner = (throw 1, 1); &inner; }) // { dg-error \"static\" \"\" }\n+    };\n+\n+  return &atest;\n+}\n+\n+int main(){}"}]}