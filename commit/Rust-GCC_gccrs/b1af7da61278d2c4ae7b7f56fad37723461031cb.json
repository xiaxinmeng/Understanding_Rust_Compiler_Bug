{"sha": "b1af7da61278d2c4ae7b7f56fad37723461031cb", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjFhZjdkYTYxMjc4ZDJjNGFlN2I3ZjU2ZmFkMzc3MjM0NjEwMzFjYg==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2015-05-27T10:31:11Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2015-05-27T10:31:11Z"}, "message": "tree-vect-stmts.c (vectorizable_load): Initialize slp_perm earlier and remove ??? comment.\n\n2015-05-27  Richard Biener  <rguenther@suse.de>\n\n\t* tree-vect-stmts.c (vectorizable_load): Initialize slp_perm\n\tearlier and remove ??? comment.\n\t(vect_analyze_stmt): If we are analyzing a pure SLP stmt\n\tand got called from loop analysis bail out.  Always pass the SLP\n\tnode to the vectorizable_* functions.\n\t* tree-vect-loop.c (vect_analyze_loop_operations): Remove\n\tthe premature SLP check here.\n\t* tree-vect-slp.c (vect_detect_hybrid_slp_stmts): Dump hybrid\n\tdetected SLP stmts.\n\t(vect_detect_hybrid_slp_1): Likewise.\n\nFrom-SVN: r223743", "tree": {"sha": "40d2e77b7b6d01756dc06079d1b3fc6376445cac", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/40d2e77b7b6d01756dc06079d1b3fc6376445cac"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b1af7da61278d2c4ae7b7f56fad37723461031cb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b1af7da61278d2c4ae7b7f56fad37723461031cb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b1af7da61278d2c4ae7b7f56fad37723461031cb", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b1af7da61278d2c4ae7b7f56fad37723461031cb/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "d4cecb1341384edd198ca175e3561410afb6fe44", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d4cecb1341384edd198ca175e3561410afb6fe44", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d4cecb1341384edd198ca175e3561410afb6fe44"}], "stats": {"total": 107, "additions": 67, "deletions": 40}, "files": [{"sha": "ffde59c1584c3a288e0fe3e61d3394e4e2b53117", "filename": "gcc/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b1af7da61278d2c4ae7b7f56fad37723461031cb/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b1af7da61278d2c4ae7b7f56fad37723461031cb/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=b1af7da61278d2c4ae7b7f56fad37723461031cb", "patch": "@@ -1,3 +1,16 @@\n+2015-05-27  Richard Biener  <rguenther@suse.de>\n+\n+\t* tree-vect-stmts.c (vectorizable_load): Initialize slp_perm\n+\tearlier and remove ??? comment.\n+\t(vect_analyze_stmt): If we are analyzing a pure SLP stmt\n+\tand got called from loop analysis bail out.  Always pass the SLP\n+\tnode to the vectorizable_* functions.\n+\t* tree-vect-loop.c (vect_analyze_loop_operations): Remove\n+\tthe premature SLP check here.\n+\t* tree-vect-slp.c (vect_detect_hybrid_slp_stmts): Dump hybrid\n+\tdetected SLP stmts.\n+\t(vect_detect_hybrid_slp_1): Likewise.\n+\n 2015-05-26  Jeff Law  <law@redhat.com>\n \n \t* combine.c (find_split_point): Verify that the shift count is a"}, {"sha": "b93685e816040c1a513c9770eb613279c38a1226", "filename": "gcc/tree-vect-loop.c", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b1af7da61278d2c4ae7b7f56fad37723461031cb/gcc%2Ftree-vect-loop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b1af7da61278d2c4ae7b7f56fad37723461031cb/gcc%2Ftree-vect-loop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-loop.c?ref=b1af7da61278d2c4ae7b7f56fad37723461031cb", "patch": "@@ -1556,11 +1556,6 @@ vect_analyze_loop_operations (loop_vec_info loop_vinfo)\n \t   gsi_next (&si))\n         {\n           gimple stmt = gsi_stmt (si);\n-\t  if (STMT_SLP_TYPE (vinfo_for_stmt (stmt)))\n-\t    {\n-\t      need_to_vectorize = true;\n-\t      continue;\n-\t    }\n \t  if (!gimple_clobber_p (stmt)\n \t      && !vect_analyze_stmt (stmt, &need_to_vectorize, NULL))\n \t    return false;"}, {"sha": "214c96c79441dc4acca6c93a6aaba283b299900b", "filename": "gcc/tree-vect-slp.c", "status": "modified", "additions": 16, "deletions": 2, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b1af7da61278d2c4ae7b7f56fad37723461031cb/gcc%2Ftree-vect-slp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b1af7da61278d2c4ae7b7f56fad37723461031cb/gcc%2Ftree-vect-slp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-slp.c?ref=b1af7da61278d2c4ae7b7f56fad37723461031cb", "patch": "@@ -2027,7 +2027,14 @@ vect_detect_hybrid_slp_stmts (slp_tree node, unsigned i, slp_vect_type stype)\n     }\n \n   if (stype == hybrid)\n-    STMT_SLP_TYPE (stmt_vinfo) = hybrid;\n+    {\n+      if (dump_enabled_p ())\n+\t{\n+\t  dump_printf_loc (MSG_NOTE, vect_location, \"marking hybrid: \");\n+\t  dump_gimple_stmt (MSG_NOTE, TDF_SLIM, stmt, 0);\n+\t}\n+      STMT_SLP_TYPE (stmt_vinfo) = hybrid;\n+    }\n \n   FOR_EACH_VEC_ELT (SLP_TREE_CHILDREN (node), j, child)\n     if (child)\n@@ -2051,7 +2058,14 @@ vect_detect_hybrid_slp_1 (tree *tp, int *, void *data)\n       gimple def_stmt = SSA_NAME_DEF_STMT (*tp);\n       if (flow_bb_inside_loop_p (loopp, gimple_bb (def_stmt))\n \t  && PURE_SLP_STMT (vinfo_for_stmt (def_stmt)))\n-\tSTMT_SLP_TYPE (vinfo_for_stmt (def_stmt)) = hybrid;\n+\t{\n+\t  if (dump_enabled_p ())\n+\t    {\n+\t      dump_printf_loc (MSG_NOTE, vect_location, \"marking hybrid: \");\n+\t      dump_gimple_stmt (MSG_NOTE, TDF_SLIM, def_stmt, 0);\n+\t    }\n+\t  STMT_SLP_TYPE (vinfo_for_stmt (def_stmt)) = hybrid;\n+\t}\n     }\n \n   return NULL_TREE;"}, {"sha": "06a59cb39959e73cce68344c2822d18f47cfc17b", "filename": "gcc/tree-vect-stmts.c", "status": "modified", "additions": 38, "deletions": 33, "changes": 71, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b1af7da61278d2c4ae7b7f56fad37723461031cb/gcc%2Ftree-vect-stmts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b1af7da61278d2c4ae7b7f56fad37723461031cb/gcc%2Ftree-vect-stmts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-stmts.c?ref=b1af7da61278d2c4ae7b7f56fad37723461031cb", "patch": "@@ -5940,6 +5940,9 @@ vectorizable_load (gimple stmt, gimple_stmt_iterator *gsi, gimple *vec_stmt,\n \t  return false;\n \t}\n \n+      if (slp && SLP_TREE_LOAD_PERMUTATION (slp_node).exists ())\n+\tslp_perm = true;\n+\n       group_size = GROUP_SIZE (vinfo_for_stmt (first_stmt));\n       if (!slp\n \t  && !PURE_SLP_STMT (stmt_info)\n@@ -6004,10 +6007,7 @@ vectorizable_load (gimple stmt, gimple_stmt_iterator *gsi, gimple *vec_stmt,\n \t   && (slp || PURE_SLP_STMT (stmt_info)))\n \t  && (group_size > nunits\n \t      || nunits % group_size != 0\n-\t      /* ???  During analysis phase we are not called with the\n-\t         slp node/instance we are in so whether we'll end up\n-\t\t with a permutation we don't know.  Still we don't\n-\t\t support load permutations.  */\n+\t      /* We don't support load permutations.  */\n \t      || slp_perm))\n \t{\n \t  dump_printf_loc (MSG_MISSED_OPTIMIZATION, vect_location,\n@@ -6402,8 +6402,6 @@ vectorizable_load (gimple stmt, gimple_stmt_iterator *gsi, gimple *vec_stmt,\n \t{\n \t  grouped_load = false;\n \t  vec_num = SLP_TREE_NUMBER_OF_VEC_STMTS (slp_node);\n-          if (SLP_TREE_LOAD_PERMUTATION (slp_node).exists ())\n-            slp_perm = true;\n \t  group_gap = GROUP_GAP (vinfo_for_stmt (first_stmt));\n     \t}\n       else\n@@ -7371,33 +7369,40 @@ vect_analyze_stmt (gimple stmt, bool *need_to_vectorize, slp_tree node)\n       *need_to_vectorize = true;\n     }\n \n-   ok = true;\n-   if (!bb_vinfo\n-       && (STMT_VINFO_RELEVANT_P (stmt_info)\n-           || STMT_VINFO_DEF_TYPE (stmt_info) == vect_reduction_def))\n-      ok = (vectorizable_simd_clone_call (stmt, NULL, NULL, NULL)\n-\t    || vectorizable_conversion (stmt, NULL, NULL, NULL)\n-            || vectorizable_shift (stmt, NULL, NULL, NULL)\n-            || vectorizable_operation (stmt, NULL, NULL, NULL)\n-            || vectorizable_assignment (stmt, NULL, NULL, NULL)\n-            || vectorizable_load (stmt, NULL, NULL, NULL, NULL)\n-\t    || vectorizable_call (stmt, NULL, NULL, NULL)\n-            || vectorizable_store (stmt, NULL, NULL, NULL)\n-            || vectorizable_reduction (stmt, NULL, NULL, NULL)\n-            || vectorizable_condition (stmt, NULL, NULL, NULL, 0, NULL));\n-    else\n-      {\n-        if (bb_vinfo)\n-\t  ok = (vectorizable_simd_clone_call (stmt, NULL, NULL, node)\n-\t\t|| vectorizable_conversion (stmt, NULL, NULL, node)\n-\t\t|| vectorizable_shift (stmt, NULL, NULL, node)\n-                || vectorizable_operation (stmt, NULL, NULL, node)\n-                || vectorizable_assignment (stmt, NULL, NULL, node)\n-                || vectorizable_load (stmt, NULL, NULL, node, NULL)\n-\t\t|| vectorizable_call (stmt, NULL, NULL, node)\n-                || vectorizable_store (stmt, NULL, NULL, node)\n-                || vectorizable_condition (stmt, NULL, NULL, NULL, 0, node));\n-      }\n+  if (PURE_SLP_STMT (stmt_info) && !node)\n+    {\n+      dump_printf_loc (MSG_NOTE, vect_location,\n+\t\t       \"handled only by SLP analysis\\n\");\n+      return true;\n+    }\n+\n+  ok = true;\n+  if (!bb_vinfo\n+      && (STMT_VINFO_RELEVANT_P (stmt_info)\n+\t  || STMT_VINFO_DEF_TYPE (stmt_info) == vect_reduction_def))\n+    ok = (vectorizable_simd_clone_call (stmt, NULL, NULL, node)\n+\t  || vectorizable_conversion (stmt, NULL, NULL, node)\n+\t  || vectorizable_shift (stmt, NULL, NULL, node)\n+\t  || vectorizable_operation (stmt, NULL, NULL, node)\n+\t  || vectorizable_assignment (stmt, NULL, NULL, node)\n+\t  || vectorizable_load (stmt, NULL, NULL, node, NULL)\n+\t  || vectorizable_call (stmt, NULL, NULL, node)\n+\t  || vectorizable_store (stmt, NULL, NULL, node)\n+\t  || vectorizable_reduction (stmt, NULL, NULL, node)\n+\t  || vectorizable_condition (stmt, NULL, NULL, NULL, 0, node));\n+  else\n+    {\n+      if (bb_vinfo)\n+\tok = (vectorizable_simd_clone_call (stmt, NULL, NULL, node)\n+\t      || vectorizable_conversion (stmt, NULL, NULL, node)\n+\t      || vectorizable_shift (stmt, NULL, NULL, node)\n+\t      || vectorizable_operation (stmt, NULL, NULL, node)\n+\t      || vectorizable_assignment (stmt, NULL, NULL, node)\n+\t      || vectorizable_load (stmt, NULL, NULL, node, NULL)\n+\t      || vectorizable_call (stmt, NULL, NULL, node)\n+\t      || vectorizable_store (stmt, NULL, NULL, node)\n+\t      || vectorizable_condition (stmt, NULL, NULL, NULL, 0, node));\n+    }\n \n   if (!ok)\n     {"}]}