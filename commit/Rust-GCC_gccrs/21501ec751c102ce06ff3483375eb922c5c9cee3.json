{"sha": "21501ec751c102ce06ff3483375eb922c5c9cee3", "node_id": "C_kwDOANBUbNoAKDIxNTAxZWM3NTFjMTAyY2UwNmZmMzQ4MzM3NWViOTIyYzVjOWNlZTM", "commit": {"author": {"name": "David Malcolm", "email": "dmalcolm@redhat.com", "date": "2022-11-16T13:23:02Z"}, "committer": {"name": "David Malcolm", "email": "dmalcolm@redhat.com", "date": "2022-11-16T13:23:02Z"}, "message": "analyzer: use known_function to simplify region_model::on_call_{pre,post}\n\nReplace lots of repeated checks against strings with a hash_map lookup.\nAdd some missing type-checking for handling known functions (e.g. checks\nfor pointer types).\n\ngcc/analyzer/ChangeLog:\n\t* analyzer.h (known_function::matches_call_types_p): New vfunc.\n\t(known_function::impl_call_pre): Provide base implementation.\n\t(known_function::impl_call_post): New vfunc.\n\t(register_known_functions): New.\n\t* engine.cc (impl_run_checkers): Call register_known_functions.\n\t* region-model-impl-calls.cc (region_model::impl_call_accept):\n\tConvert to...\n\t(class known_function_accept): ...this.\n\t(region_model::impl_call_bind): Convert to...\n\t(class known_function_bind): ...this.\n\t(region_model::impl_call_connect): Convert to...\n\t(class known_function_connect): ...this.\n\t(region_model::impl_call_listen): Convert to...\n\t(class known_function_listen): ...this.\n\t(region_model::impl_call_socket): Convert to...\n\t(class known_function_socket): ...this.\n\t(register_known_functions): New.\n\t* region-model.cc (region_model::on_call_pre): Remove special\n\tcase for \"bind\" in favor of the known_function-handling dispatch.\n\tAdd call to known_function::matches_call_types_p to latter.\n\t(region_model::on_call_post): Remove special cases for \"accept\",\n\t\"bind\", \"connect\", \"listen\", and \"socket\" in favor of dispatch\n\tto known_function::impl_call_post.\n\t* region-model.h (region_model::impl_call_accept): Delete decl.\n\t(region_model::impl_call_bind): Delete decl.\n\t(region_model::impl_call_connect): Delete decl.\n\t(region_model::impl_call_listen): Delete decl.\n\t(region_model::impl_call_socket): Delete decl.\n\t* sm-fd.cc: Update comments.\n\ngcc/testsuite/ChangeLog:\n\t* gcc.dg/plugin/analyzer_kernel_plugin.c\n\t(copy_across_boundary_fn::matches_call_types_p): New.\n\t* gcc.dg/plugin/analyzer_known_fns_plugin.c\n\t(known_function_returns_42::matches_call_types_p): New.\n\t(known_function_attempt_to_copy::matches_call_types_p): New.\n\nSigned-off-by: David Malcolm <dmalcolm@redhat.com>", "tree": {"sha": "0f45bb9fc21e68aed8356683b6ce1fd5b418c0b3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0f45bb9fc21e68aed8356683b6ce1fd5b418c0b3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/21501ec751c102ce06ff3483375eb922c5c9cee3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/21501ec751c102ce06ff3483375eb922c5c9cee3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/21501ec751c102ce06ff3483375eb922c5c9cee3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/21501ec751c102ce06ff3483375eb922c5c9cee3/comments", "author": {"login": "davidmalcolm", "id": 1553248, "node_id": "MDQ6VXNlcjE1NTMyNDg=", "avatar_url": "https://avatars.githubusercontent.com/u/1553248?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidmalcolm", "html_url": "https://github.com/davidmalcolm", "followers_url": "https://api.github.com/users/davidmalcolm/followers", "following_url": "https://api.github.com/users/davidmalcolm/following{/other_user}", "gists_url": "https://api.github.com/users/davidmalcolm/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidmalcolm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidmalcolm/subscriptions", "organizations_url": "https://api.github.com/users/davidmalcolm/orgs", "repos_url": "https://api.github.com/users/davidmalcolm/repos", "events_url": "https://api.github.com/users/davidmalcolm/events{/privacy}", "received_events_url": "https://api.github.com/users/davidmalcolm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "davidmalcolm", "id": 1553248, "node_id": "MDQ6VXNlcjE1NTMyNDg=", "avatar_url": "https://avatars.githubusercontent.com/u/1553248?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidmalcolm", "html_url": "https://github.com/davidmalcolm", "followers_url": "https://api.github.com/users/davidmalcolm/followers", "following_url": "https://api.github.com/users/davidmalcolm/following{/other_user}", "gists_url": "https://api.github.com/users/davidmalcolm/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidmalcolm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidmalcolm/subscriptions", "organizations_url": "https://api.github.com/users/davidmalcolm/orgs", "repos_url": "https://api.github.com/users/davidmalcolm/repos", "events_url": "https://api.github.com/users/davidmalcolm/events{/privacy}", "received_events_url": "https://api.github.com/users/davidmalcolm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3685aed8ef34b7bb500cf92b5913a4092d6f55be", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3685aed8ef34b7bb500cf92b5913a4092d6f55be", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3685aed8ef34b7bb500cf92b5913a4092d6f55be"}], "stats": {"total": 253, "additions": 154, "deletions": 99}, "files": [{"sha": "99a1d0690d5362602fb5c4badb91b2128bba7580", "filename": "gcc/analyzer/analyzer.h", "status": "modified", "additions": 12, "deletions": 2, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/21501ec751c102ce06ff3483375eb922c5c9cee3/gcc%2Fanalyzer%2Fanalyzer.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/21501ec751c102ce06ff3483375eb922c5c9cee3/gcc%2Fanalyzer%2Fanalyzer.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2Fanalyzer.h?ref=21501ec751c102ce06ff3483375eb922c5c9cee3", "patch": "@@ -228,15 +228,25 @@ extern location_t get_stmt_location (const gimple *stmt, function *fun);\n extern bool compat_types_p (tree src_type, tree dst_type);\n \n /* Abstract base class for simulating the behavior of known functions,\n-   supplied by plugins.  */\n+   supplied by the core of the analyzer, or by plugins.  */\n \n class known_function\n {\n public:\n   virtual ~known_function () {}\n-  virtual void impl_call_pre (const call_details &cd) const = 0;\n+  virtual bool matches_call_types_p (const call_details &cd) const = 0;\n+  virtual void impl_call_pre (const call_details &) const\n+  {\n+    return;\n+  }\n+  virtual void impl_call_post (const call_details &) const\n+  {\n+    return;\n+  }\n };\n \n+extern void register_known_functions (known_function_manager &mgr);\n+\n /* Passed by pointer to PLUGIN_ANALYZER_INIT callbacks.  */\n \n class plugin_analyzer_init_iface"}, {"sha": "fe2b9c69221fe257e0ca4e512a09a29e7d651091", "filename": "gcc/analyzer/engine.cc", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/21501ec751c102ce06ff3483375eb922c5c9cee3/gcc%2Fanalyzer%2Fengine.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/21501ec751c102ce06ff3483375eb922c5c9cee3/gcc%2Fanalyzer%2Fengine.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2Fengine.cc?ref=21501ec751c102ce06ff3483375eb922c5c9cee3", "patch": "@@ -6073,6 +6073,8 @@ impl_run_checkers (logger *logger)\n   auto_delete_vec <state_machine> checkers;\n   make_checkers (checkers, logger);\n \n+  register_known_functions (*eng.get_known_function_manager ());\n+\n   plugin_analyzer_init_impl data (&checkers,\n \t\t\t\t  eng.get_known_function_manager (),\n \t\t\t\t  logger);"}, {"sha": "7a039c75c03ea1a3d65f0575fcae2ce5bed122ee", "filename": "gcc/analyzer/region-model-impl-calls.cc", "status": "modified", "additions": 107, "deletions": 55, "changes": 162, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/21501ec751c102ce06ff3483375eb922c5c9cee3/gcc%2Fanalyzer%2Fregion-model-impl-calls.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/21501ec751c102ce06ff3483375eb922c5c9cee3/gcc%2Fanalyzer%2Fregion-model-impl-calls.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2Fregion-model-impl-calls.cc?ref=21501ec751c102ce06ff3483375eb922c5c9cee3", "patch": "@@ -407,10 +407,10 @@ region_model::impl_call_analyzer_get_unknown_ptr (const call_details &cd)\n   cd.maybe_set_lhs (ptr_sval);\n }\n \n-/* Handle the on_call_post part of \"accept\".  */\n+/* Handle calls to \"accept\".\n+   See e.g. https://man7.org/linux/man-pages/man3/accept.3p.html  */\n \n-void\n-region_model::impl_call_accept (const call_details &cd)\n+class known_function_accept : public known_function\n {\n   class outcome_of_accept : public succeed_or_fail_call_info\n   {\n@@ -428,20 +428,28 @@ region_model::impl_call_accept (const call_details &cd)\n     }\n   };\n \n-  /* Body of region_model::impl_call_accept.  */\n-  if (cd.get_ctxt ())\n-    {\n-      cd.get_ctxt ()->bifurcate (make_unique<outcome_of_accept> (cd, false));\n-      cd.get_ctxt ()->bifurcate (make_unique<outcome_of_accept> (cd, true));\n-      cd.get_ctxt ()->terminate_path ();\n-    }\n-}\n+  bool matches_call_types_p (const call_details &cd) const final override\n+  {\n+    return cd.num_args () == 3;\n+  }\n+\n+  void impl_call_post (const call_details &cd) const final override\n+  {\n+    if (cd.get_ctxt ())\n+      {\n+\tcd.get_ctxt ()->bifurcate (make_unique<outcome_of_accept> (cd, false));\n+\tcd.get_ctxt ()->bifurcate (make_unique<outcome_of_accept> (cd, true));\n+\tcd.get_ctxt ()->terminate_path ();\n+      }\n+  }\n+};\n \n-/* Handle the on_call_post part of \"bind\".  */\n+/* Handle calls to \"bind\".\n+   See e.g. https://man7.org/linux/man-pages/man3/bind.3p.html  */\n \n-void\n-region_model::impl_call_bind (const call_details &cd)\n+class known_function_bind : public known_function\n {\n+public:\n   class outcome_of_bind : public succeed_or_fail_call_info\n   {\n   public:\n@@ -458,14 +466,21 @@ region_model::impl_call_bind (const call_details &cd)\n     }\n   };\n \n-  /* Body of region_model::impl_call_bind.  */\n-  if (cd.get_ctxt ())\n-    {\n-      cd.get_ctxt ()->bifurcate (make_unique<outcome_of_bind> (cd, false));\n-      cd.get_ctxt ()->bifurcate (make_unique<outcome_of_bind> (cd, true));\n-      cd.get_ctxt ()->terminate_path ();\n-    }\n-}\n+  bool matches_call_types_p (const call_details &cd) const final override\n+  {\n+    return cd.num_args () == 3;\n+  }\n+\n+  void impl_call_post (const call_details &cd) const final override\n+  {\n+    if (cd.get_ctxt ())\n+      {\n+\tcd.get_ctxt ()->bifurcate (make_unique<outcome_of_bind> (cd, false));\n+\tcd.get_ctxt ()->bifurcate (make_unique<outcome_of_bind> (cd, true));\n+\tcd.get_ctxt ()->terminate_path ();\n+      }\n+  }\n+};\n \n /* Handle the on_call_pre part of \"__builtin_expect\" etc.  */\n \n@@ -501,11 +516,12 @@ region_model::impl_call_calloc (const call_details &cd)\n     }\n }\n \n-/* Handle the on_call_post part of \"connect\".  */\n+/* Handle calls to \"connect\".\n+   See e.g. https://man7.org/linux/man-pages/man3/connect.3p.html  */\n \n-void\n-region_model::impl_call_connect (const call_details &cd)\n+class known_function_connect : public known_function\n {\n+public:\n   class outcome_of_connect : public succeed_or_fail_call_info\n   {\n   public:\n@@ -522,14 +538,22 @@ region_model::impl_call_connect (const call_details &cd)\n     }\n   };\n \n-  /* Body of region_model::impl_call_connect.  */\n-  if (cd.get_ctxt ())\n-    {\n-      cd.get_ctxt ()->bifurcate (make_unique<outcome_of_connect> (cd, false));\n-      cd.get_ctxt ()->bifurcate (make_unique<outcome_of_connect> (cd, true));\n-      cd.get_ctxt ()->terminate_path ();\n-    }\n-}\n+  bool matches_call_types_p (const call_details &cd) const final override\n+  {\n+    return (cd.num_args () == 3\n+\t    && POINTER_TYPE_P (cd.get_arg_type (1)));\n+  }\n+\n+  void impl_call_post (const call_details &cd) const final override\n+  {\n+    if (cd.get_ctxt ())\n+      {\n+\tcd.get_ctxt ()->bifurcate (make_unique<outcome_of_connect> (cd, false));\n+\tcd.get_ctxt ()->bifurcate (make_unique<outcome_of_connect> (cd, true));\n+\tcd.get_ctxt ()->terminate_path ();\n+      }\n+  }\n+};\n \n /* Handle the on_call_pre part of \"__errno_location\".  */\n \n@@ -633,10 +657,10 @@ region_model::impl_call_free (const call_details &cd)\n     }\n }\n \n-/* Handle the on_call_post part of \"listen\".  */\n+/* Handle calls to \"listen\".\n+   See e.g. https://man7.org/linux/man-pages/man3/listen.3p.html  */\n \n-void\n-region_model::impl_call_listen (const call_details &cd)\n+class known_function_listen : public known_function\n {\n   class outcome_of_listen : public succeed_or_fail_call_info\n   {\n@@ -654,14 +678,21 @@ region_model::impl_call_listen (const call_details &cd)\n     }\n   };\n \n-  /* Body of region_model::impl_call_listen.  */\n-  if (cd.get_ctxt ())\n-    {\n-      cd.get_ctxt ()->bifurcate (make_unique<outcome_of_listen> (cd, false));\n-      cd.get_ctxt ()->bifurcate (make_unique<outcome_of_listen> (cd, true));\n-      cd.get_ctxt ()->terminate_path ();\n-    }\n-}\n+  bool matches_call_types_p (const call_details &cd) const final override\n+  {\n+    return cd.num_args () == 2;\n+  }\n+\n+  void impl_call_post (const call_details &cd) const final override\n+  {\n+    if (cd.get_ctxt ())\n+      {\n+\tcd.get_ctxt ()->bifurcate (make_unique<outcome_of_listen> (cd, false));\n+\tcd.get_ctxt ()->bifurcate (make_unique<outcome_of_listen> (cd, true));\n+\tcd.get_ctxt ()->terminate_path ();\n+      }\n+  }\n+};\n \n /* Handle the on_call_pre part of \"malloc\".  */\n \n@@ -1175,11 +1206,12 @@ region_model::impl_call_realloc (const call_details &cd)\n     }\n }\n \n-/* Handle the on_call_post part of \"socket\".  */\n+/* Handle calls to \"socket\".\n+   See e.g. https://man7.org/linux/man-pages/man3/socket.3p.html  */\n \n-void\n-region_model::impl_call_socket (const call_details &cd)\n+class known_function_socket : public known_function\n {\n+public:\n   class outcome_of_socket : public succeed_or_fail_call_info\n   {\n   public:\n@@ -1196,14 +1228,21 @@ region_model::impl_call_socket (const call_details &cd)\n     }\n   };\n \n-  /* Body of region_model::impl_call_socket.  */\n-  if (cd.get_ctxt ())\n-    {\n-      cd.get_ctxt ()->bifurcate (make_unique<outcome_of_socket> (cd, false));\n-      cd.get_ctxt ()->bifurcate (make_unique<outcome_of_socket> (cd, true));\n-      cd.get_ctxt ()->terminate_path ();\n-    }\n-}\n+  bool matches_call_types_p (const call_details &cd) const final override\n+  {\n+    return cd.num_args () == 3;\n+  }\n+\n+  void impl_call_post (const call_details &cd) const final override\n+  {\n+    if (cd.get_ctxt ())\n+      {\n+\tcd.get_ctxt ()->bifurcate (make_unique<outcome_of_socket> (cd, false));\n+\tcd.get_ctxt ()->bifurcate (make_unique<outcome_of_socket> (cd, true));\n+\tcd.get_ctxt ()->terminate_path ();\n+      }\n+  }\n+};\n \n /* Handle the on_call_post part of \"strchr\" and \"__builtin_strchr\".  */\n \n@@ -1339,6 +1378,19 @@ region_model::impl_deallocation_call (const call_details &cd)\n   impl_call_free (cd);\n }\n \n+/* Add instances to MGR of known functions supported by the core of the\n+   analyzer (as opposed to plugins).  */\n+\n+void\n+register_known_functions (known_function_manager &mgr)\n+{\n+  mgr.add (\"accept\", make_unique<known_function_accept> ());\n+  mgr.add (\"bind\", make_unique<known_function_bind> ());\n+  mgr.add (\"connect\", make_unique<known_function_connect> ());\n+  mgr.add (\"listen\", make_unique<known_function_listen> ());\n+  mgr.add (\"socket\", make_unique<known_function_socket> ());\n+}\n+\n } // namespace ana\n \n #endif /* #if ENABLE_ANALYZER */"}, {"sha": "e16f66bbbc39c89b0489e003eea5e343f667541f", "filename": "gcc/analyzer/region-model.cc", "status": "modified", "additions": 13, "deletions": 32, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/21501ec751c102ce06ff3483375eb922c5c9cee3/gcc%2Fanalyzer%2Fregion-model.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/21501ec751c102ce06ff3483375eb922c5c9cee3/gcc%2Fanalyzer%2Fregion-model.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2Fregion-model.cc?ref=21501ec751c102ce06ff3483375eb922c5c9cee3", "patch": "@@ -2293,11 +2293,6 @@ region_model::on_call_pre (const gcall *call, region_model_context *ctxt,\n \t  impl_call_realloc (cd);\n \t  return false;\n \t}\n-      else if (is_named_call_p (callee_fndecl, \"bind\", call, 3))\n-\t{\n-\t  /* Handle in \"on_call_post\".  */\n-\t  return false;\n-\t}\n       else if (is_named_call_p (callee_fndecl, \"__errno_location\", call, 0))\n \t{\n \t  impl_call_errno_location (cd);\n@@ -2383,8 +2378,11 @@ region_model::on_call_pre (const gcall *call, region_model_context *ctxt,\n \t}\n       else if (const known_function *kf = get_known_function (callee_fndecl))\n \t{\n-\t  kf->impl_call_pre (cd);\n-\t  return false;\n+\t  if (kf->matches_call_types_p (cd))\n+\t    {\n+\t      kf->impl_call_pre (cd);\n+\t      return false;\n+\t    }\n \t}\n       else if (!fndecl_has_gimple_body_p (callee_fndecl)\n \t       && (!(callee_fndecl_flags & (ECF_CONST | ECF_PURE)))\n@@ -2427,43 +2425,26 @@ region_model::on_call_post (const gcall *call,\n \t  impl_call_operator_delete (cd);\n \t  return;\n \t}\n-      else if (is_named_call_p (callee_fndecl, \"accept\", call, 3))\n-\t{\n-\t  impl_call_accept (cd);\n-\t  return;\n-\t}\n-      else if (is_named_call_p (callee_fndecl, \"bind\", call, 3))\n-\t{\n-\t  impl_call_bind (cd);\n-\t  return;\n-\t}\n-      else if (is_named_call_p (callee_fndecl, \"connect\", call, 3))\n-\t{\n-\t  impl_call_connect (cd);\n-\t  return;\n-\t}\n-      else if (is_named_call_p (callee_fndecl, \"listen\", call, 2))\n-\t{\n-\t  impl_call_listen (cd);\n-\t  return;\n-\t}\n       else if (is_pipe_call_p (callee_fndecl, \"pipe\", call, 1)\n \t       || is_pipe_call_p (callee_fndecl, \"pipe2\", call, 2))\n \t{\n \t  impl_call_pipe (cd);\n \t  return;\n \t}\n-      else if (is_named_call_p (callee_fndecl, \"socket\", call, 3))\n-\t{\n-\t  impl_call_socket (cd);\n-\t  return;\n-\t}\n       else if (is_named_call_p (callee_fndecl, \"strchr\", call, 2)\n \t       && POINTER_TYPE_P (cd.get_arg_type (0)))\n \t{\n \t  impl_call_strchr (cd);\n \t  return;\n \t}\n+      else if (const known_function *kf = get_known_function (callee_fndecl))\n+\t{\n+\t  if (kf->matches_call_types_p (cd))\n+\t    {\n+\t      kf->impl_call_post (cd);\n+\t      return;\n+\t    }\n+\t}\n       /* Was this fndecl referenced by\n \t __attribute__((malloc(FOO)))?  */\n       if (lookup_attribute (\"*dealloc\", DECL_ATTRIBUTES (callee_fndecl)))"}, {"sha": "bf06271c626fecd64af3f69cc5803869f46ff64a", "filename": "gcc/analyzer/region-model.h", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/21501ec751c102ce06ff3483375eb922c5c9cee3/gcc%2Fanalyzer%2Fregion-model.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/21501ec751c102ce06ff3483375eb922c5c9cee3/gcc%2Fanalyzer%2Fregion-model.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2Fregion-model.h?ref=21501ec751c102ce06ff3483375eb922c5c9cee3", "patch": "@@ -338,7 +338,6 @@ class region_model\n   void purge_state_involving (const svalue *sval, region_model_context *ctxt);\n \n   /* Specific handling for on_call_pre.  */\n-  void impl_call_accept (const call_details &cd);\n   void impl_call_alloca (const call_details &cd);\n   void impl_call_analyzer_describe (const gcall *call,\n \t\t\t\t    region_model_context *ctxt);\n@@ -350,24 +349,20 @@ class region_model\n   void impl_call_analyzer_eval (const gcall *call,\n \t\t\t\tregion_model_context *ctxt);\n   void impl_call_analyzer_get_unknown_ptr (const call_details &cd);\n-  void impl_call_bind (const call_details &cd);\n   void impl_call_builtin_expect (const call_details &cd);\n   void impl_call_calloc (const call_details &cd);\n-  void impl_call_connect (const call_details &cd);\n   void impl_call_errno_location (const call_details &cd);\n   bool impl_call_error (const call_details &cd, unsigned min_args,\n \t\t\tbool *out_terminate_path);\n   void impl_call_fgets (const call_details &cd);\n   void impl_call_fread (const call_details &cd);\n   void impl_call_free (const call_details &cd);\n-  void impl_call_listen (const call_details &cd);\n   void impl_call_malloc (const call_details &cd);\n   void impl_call_memcpy (const call_details &cd);\n   void impl_call_memset (const call_details &cd);\n   void impl_call_pipe (const call_details &cd);\n   void impl_call_putenv (const call_details &cd);\n   void impl_call_realloc (const call_details &cd);\n-  void impl_call_socket (const call_details &cd);\n   void impl_call_strchr (const call_details &cd);\n   void impl_call_strcpy (const call_details &cd);\n   void impl_call_strlen (const call_details &cd);"}, {"sha": "1f479b6b38cdf5bf864fba63744f3310c8931632", "filename": "gcc/analyzer/sm-fd.cc", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/21501ec751c102ce06ff3483375eb922c5c9cee3/gcc%2Fanalyzer%2Fsm-fd.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/21501ec751c102ce06ff3483375eb922c5c9cee3/gcc%2Fanalyzer%2Fsm-fd.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2Fsm-fd.cc?ref=21501ec751c102ce06ff3483375eb922c5c9cee3", "patch": "@@ -2249,7 +2249,7 @@ region_model::mark_as_valid_fd (const svalue *sval, region_model_context *ctxt)\n }\n \n /* Specialcase hook for handling \"socket\", for use by\n-   region_model::impl_call_socket::outcome_of_socket::update_model.  */\n+   known_function_socket::outcome_of_socket::update_model.  */\n \n bool\n region_model::on_socket (const call_details &cd, bool successful)\n@@ -2267,7 +2267,7 @@ region_model::on_socket (const call_details &cd, bool successful)\n }\n \n /* Specialcase hook for handling \"bind\", for use by\n-   region_model::impl_call_bind::outcome_of_bind::update_model.  */\n+   known_function_bind::outcome_of_bind::update_model.  */\n \n bool\n region_model::on_bind (const call_details &cd, bool successful)\n@@ -2285,7 +2285,7 @@ region_model::on_bind (const call_details &cd, bool successful)\n }\n \n /* Specialcase hook for handling \"listen\", for use by\n-   region_model::impl_call_listen::outcome_of_listen::update_model.  */\n+   known_function_listen::outcome_of_listen::update_model.  */\n \n bool\n region_model::on_listen (const call_details &cd, bool successful)\n@@ -2303,7 +2303,7 @@ region_model::on_listen (const call_details &cd, bool successful)\n }\n \n /* Specialcase hook for handling \"accept\", for use by\n-   region_model::impl_call_accept::outcome_of_accept::update_model.  */\n+   known_function_accept::outcome_of_accept::update_model.  */\n \n bool\n region_model::on_accept (const call_details &cd, bool successful)\n@@ -2321,7 +2321,7 @@ region_model::on_accept (const call_details &cd, bool successful)\n }\n \n /* Specialcase hook for handling \"connect\", for use by\n-   region_model::impl_call_connect::outcome_of_connect::update_model.  */\n+   known_function_connect::outcome_of_connect::update_model.  */\n \n bool\n region_model::on_connect (const call_details &cd, bool successful)"}, {"sha": "b424337aad17357760eaac51b31190af3c2a8422", "filename": "gcc/testsuite/gcc.dg/plugin/analyzer_kernel_plugin.c", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/21501ec751c102ce06ff3483375eb922c5c9cee3/gcc%2Ftestsuite%2Fgcc.dg%2Fplugin%2Fanalyzer_kernel_plugin.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/21501ec751c102ce06ff3483375eb922c5c9cee3/gcc%2Ftestsuite%2Fgcc.dg%2Fplugin%2Fanalyzer_kernel_plugin.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fplugin%2Fanalyzer_kernel_plugin.c?ref=21501ec751c102ce06ff3483375eb922c5c9cee3", "patch": "@@ -58,6 +58,11 @@ class copy_across_boundary_fn : public known_function\n   virtual bool untrusted_source_p () const = 0;\n   virtual bool untrusted_destination_p () const = 0;\n \n+  bool matches_call_types_p (const call_details &cd) const final override\n+  {\n+    return cd.num_args () == 3;\n+  }\n+\n   void impl_call_pre (const call_details &cd) const final override\n   {\n     region_model_manager *mgr = cd.get_manager ();"}, {"sha": "1435b383674a3cfe73c4287d1976210125f8736c", "filename": "gcc/testsuite/gcc.dg/plugin/analyzer_known_fns_plugin.c", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/21501ec751c102ce06ff3483375eb922c5c9cee3/gcc%2Ftestsuite%2Fgcc.dg%2Fplugin%2Fanalyzer_known_fns_plugin.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/21501ec751c102ce06ff3483375eb922c5c9cee3/gcc%2Ftestsuite%2Fgcc.dg%2Fplugin%2Fanalyzer_known_fns_plugin.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fplugin%2Fanalyzer_known_fns_plugin.c?ref=21501ec751c102ce06ff3483375eb922c5c9cee3", "patch": "@@ -55,6 +55,11 @@ namespace ana {\n class known_function_returns_42 : public known_function\n {\n public:\n+  bool matches_call_types_p (const call_details &) const final override\n+  {\n+    return true;\n+  }\n+\n   void impl_call_pre (const call_details &cd) const final override\n   {\n     if (cd.get_lhs_type ())\n@@ -115,6 +120,11 @@ class known_function_attempt_to_copy : public known_function\n     }\n   };\n \n+  bool matches_call_types_p (const call_details &cd) const\n+  {\n+    return cd.num_args () == 3;\n+  }\n+\n   void impl_call_pre (const call_details &cd) const final override\n   {\n     region_model_manager *mgr = cd.get_manager ();"}]}