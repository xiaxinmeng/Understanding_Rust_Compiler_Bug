{"sha": "ff3225e75cb196c53e8cd7491759a111c44878f9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmYzMjI1ZTc1Y2IxOTZjNTNlOGNkNzQ5MTc1OWExMTFjNDQ4NzhmOQ==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1994-03-14T10:09:19Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1994-03-14T10:09:19Z"}, "message": "(build_binary_op, pop_init_level, output_pending_init_elements): Call\ntree_int_cst_sgn.\n\nFrom-SVN: r6776", "tree": {"sha": "7cf0c2eef1f973f7e48d31233e01f1b8fc265a78", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7cf0c2eef1f973f7e48d31233e01f1b8fc265a78"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ff3225e75cb196c53e8cd7491759a111c44878f9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ff3225e75cb196c53e8cd7491759a111c44878f9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ff3225e75cb196c53e8cd7491759a111c44878f9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ff3225e75cb196c53e8cd7491759a111c44878f9/comments", "author": null, "committer": null, "parents": [{"sha": "6aa10371a56f91774a606507b1a65ceae8eccdbc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6aa10371a56f91774a606507b1a65ceae8eccdbc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6aa10371a56f91774a606507b1a65ceae8eccdbc"}], "stats": {"total": 19, "additions": 10, "deletions": 9}, "files": [{"sha": "e8e970b423683fbdc101622e51438e9abef19e06", "filename": "gcc/c-typeck.c", "status": "modified", "additions": 10, "deletions": 9, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ff3225e75cb196c53e8cd7491759a111c44878f9/gcc%2Fc-typeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ff3225e75cb196c53e8cd7491759a111c44878f9/gcc%2Fc-typeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-typeck.c?ref=ff3225e75cb196c53e8cd7491759a111c44878f9", "patch": "@@ -2037,7 +2037,7 @@ build_binary_op (code, orig_op0, orig_op1, convert_p)\n \t{\n \t  if (TREE_CODE (op1) == INTEGER_CST)\n \t    {\n-\t      if (tree_int_cst_lt (op1, integer_zero_node))\n+\t      if (tree_int_cst_sgn (op1) < 0)\n \t\twarning (\"right shift count is negative\");\n \t      else\n \t\t{\n@@ -2069,7 +2069,7 @@ build_binary_op (code, orig_op0, orig_op1, convert_p)\n \t{\n \t  if (TREE_CODE (op1) == INTEGER_CST)\n \t    {\n-\t      if (tree_int_cst_lt (op1, integer_zero_node))\n+\t      if (tree_int_cst_sgn (op1) < 0)\n \t\twarning (\"left shift count is negative\");\n \t      else if (TREE_INT_CST_HIGH (op1) != 0\n \t\t       || ((unsigned HOST_WIDE_INT) TREE_INT_CST_LOW (op1)\n@@ -2097,7 +2097,7 @@ build_binary_op (code, orig_op0, orig_op1, convert_p)\n \t{\n \t  if (TREE_CODE (op1) == INTEGER_CST)\n \t    {\n-\t      if (tree_int_cst_lt (op1, integer_zero_node))\n+\t      if (tree_int_cst_sgn (op1) < 0)\n \t\twarning (\"shift count is negative\");\n \t      else if (TREE_INT_CST_HIGH (op1) != 0\n \t\t       || ((unsigned HOST_WIDE_INT) TREE_INT_CST_LOW (op1)\n@@ -5397,9 +5397,10 @@ pop_init_level (implicit)\n \t      TREE_TYPE (maxindex) = TYPE_DOMAIN (constructor_type);\n \n \t      if (pedantic\n-\t\t  && tree_int_cst_lt (TYPE_MAX_VALUE (TYPE_DOMAIN (constructor_type)),\n-\t\t\t\t      integer_zero_node))\n-\t\terror_with_decl (constructor_decl, \"zero-size array `%s'\");\n+\t\t  && (tree_int_cst_sgn (TYPE_MAX_VALUE (TYPE_DOMAIN (constructor_type)))\n+\t\t      <= 0))\n+\t\terror_with_decl (constructor_decl,\n+\t\t\t\t \"zero or negative array size `%s'\");\n \t      layout_type (constructor_type);\n \t      size = int_size_in_bytes (constructor_type);\n \t      pop_obstacks ();\n@@ -5736,16 +5737,16 @@ output_pending_init_elements (all)\n \t  if (tree_int_cst_equal (TREE_PURPOSE (tail),\n \t\t\t\t  constructor_unfilled_index))\n \t    {\n-\t      output_init_element (TREE_VALUE (tail), TREE_TYPE (constructor_type),\n+\t      output_init_element (TREE_VALUE (tail),\n+\t\t\t\t   TREE_TYPE (constructor_type),\n \t\t\t\t   constructor_unfilled_index, 0);\n \t      goto retry;\n \t    }\n \t  else if (tree_int_cst_lt (TREE_PURPOSE (tail),\n \t\t\t\t    constructor_unfilled_index))\n \t    ;\n \t  else if (next == 0\n-\t\t   || tree_int_cst_lt (TREE_PURPOSE (tail),\n-\t\t\t\t\t  next))\n+\t\t   || tree_int_cst_lt (TREE_PURPOSE (tail), next))\n \t    next = TREE_PURPOSE (tail);\n \t}\n       else if (TREE_CODE (constructor_type) == RECORD_TYPE"}]}