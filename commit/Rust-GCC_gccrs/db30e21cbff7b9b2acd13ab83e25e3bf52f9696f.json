{"sha": "db30e21cbff7b9b2acd13ab83e25e3bf52f9696f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZGIzMGUyMWNiZmY3YjliMmFjZDEzYWI4M2UyNWUzYmY1MmY5Njk2Zg==", "commit": {"author": {"name": "Joseph Myers", "email": "joseph@codesourcery.com", "date": "2015-02-01T00:29:54Z"}, "committer": {"name": "Joseph Myers", "email": "jsm28@gcc.gnu.org", "date": "2015-02-01T00:29:54Z"}, "message": "Always pass 0 or option number to gfc_warning*.\n\nSimilar to the issue with fatal_error that I fixed in\n<https://gcc.gnu.org/ml/gcc-patches/2015-01/msg02690.html>, the\noverloads of gfc_warning and gfc_warning_now (with and without a first\nargument for an option number) also break gcc.pot regeneration because\nxgettext expects the translated string argument to be in a fixed\nposition for a given function name.  This patch applies the\ncorresponding fix of always passing a first argument (option number or\n0), just like the core diagnostic functions warning and warning_at,\nand removing the problem overloads without it.\n\nBootstrapped with no regressions on x86_64-unknown-linux-gnu.\n\n\t* error.c (gfc_warning (const char *, ...), gfc_warning_now (const\n\tchar *, ...)): Remove functions.\n\t* gfortran.h (gfc_warning (const char *, ...), gfc_warning_now\n\t(const char *, ...)): Remove declarations.\n\t* arith.c, check.c, data.c, decl.c, frontend-passes.c,\n\tinterface.c, intrinsic.c, io.c, matchexp.c, module.c, openmp.c,\n\toptions.c, parse.c, primary.c, resolve.c, scanner.c, symbol.c,\n\ttrans-common.c, trans-const.c, trans-stmt.c: All callers of\n\tgfc_warning and gfc_warning_now changed to pass 0 or option number\n\tas first argument.\n\nFrom-SVN: r220313", "tree": {"sha": "fad3fc076df76ea6f97827a7d37d80fc03eb5bbe", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/fad3fc076df76ea6f97827a7d37d80fc03eb5bbe"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/db30e21cbff7b9b2acd13ab83e25e3bf52f9696f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/db30e21cbff7b9b2acd13ab83e25e3bf52f9696f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/db30e21cbff7b9b2acd13ab83e25e3bf52f9696f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/db30e21cbff7b9b2acd13ab83e25e3bf52f9696f/comments", "author": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "35fa7aa7371d5415398c995b518b543ccc2d29c6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/35fa7aa7371d5415398c995b518b543ccc2d29c6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/35fa7aa7371d5415398c995b518b543ccc2d29c6"}], "stats": {"total": 228, "additions": 109, "deletions": 119}, "files": [{"sha": "7e455ef80d8b552f4d360b142e40db8ce61ee580", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/db30e21cbff7b9b2acd13ab83e25e3bf52f9696f/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/db30e21cbff7b9b2acd13ab83e25e3bf52f9696f/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=db30e21cbff7b9b2acd13ab83e25e3bf52f9696f", "patch": "@@ -1,3 +1,16 @@\n+2015-02-01  Joseph Myers  <joseph@codesourcery.com>\n+\n+\t* error.c (gfc_warning (const char *, ...), gfc_warning_now (const\n+\tchar *, ...)): Remove functions.\n+\t* gfortran.h (gfc_warning (const char *, ...), gfc_warning_now\n+\t(const char *, ...)): Remove declarations.\n+\t* arith.c, check.c, data.c, decl.c, frontend-passes.c,\n+\tinterface.c, intrinsic.c, io.c, matchexp.c, module.c, openmp.c,\n+\toptions.c, parse.c, primary.c, resolve.c, scanner.c, symbol.c,\n+\ttrans-common.c, trans-const.c, trans-stmt.c: All callers of\n+\tgfc_warning and gfc_warning_now changed to pass 0 or option number\n+\tas first argument.\n+\n 2015-01-30  Joseph Myers  <joseph@codesourcery.com>\n \n \t* f95-lang.c, gfortranspec.c, trans-const.c, trans-expr.c: All"}, {"sha": "b9c25c10e8915a36192a9b616cd38014bcab44e1", "filename": "gcc/fortran/arith.c", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/db30e21cbff7b9b2acd13ab83e25e3bf52f9696f/gcc%2Ffortran%2Farith.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/db30e21cbff7b9b2acd13ab83e25e3bf52f9696f/gcc%2Ffortran%2Farith.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Farith.c?ref=db30e21cbff7b9b2acd13ab83e25e3bf52f9696f", "patch": "@@ -551,7 +551,7 @@ check_result (arith rc, gfc_expr *x, gfc_expr *r, gfc_expr **rp)\n \n   if (val == ARITH_ASYMMETRIC)\n     {\n-      gfc_warning (gfc_arith_error (val), &x->where);\n+      gfc_warning (0, gfc_arith_error (val), &x->where);\n       val = ARITH_OK;\n     }\n \n@@ -1966,7 +1966,7 @@ gfc_int2int (gfc_expr *src, int kind)\n     {\n       if (rc == ARITH_ASYMMETRIC)\n \t{\n-\t  gfc_warning (gfc_arith_error (rc), &src->where);\n+\t  gfc_warning (0, gfc_arith_error (rc), &src->where);\n \t}\n       else\n \t{\n@@ -2280,7 +2280,8 @@ hollerith2representation (gfc_expr *result, gfc_expr *src)\n \n   if (src_len > result_len)\n     {\n-      gfc_warning (\"The Hollerith constant at %L is too long to convert to %qs\",\n+      gfc_warning (0,\n+\t\t   \"The Hollerith constant at %L is too long to convert to %qs\",\n \t\t   &src->where, gfc_typename(&result->ts));\n     }\n "}, {"sha": "3be4fb11e243f151e8369c997cb6bb0dba1be735", "filename": "gcc/fortran/check.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/db30e21cbff7b9b2acd13ab83e25e3bf52f9696f/gcc%2Ffortran%2Fcheck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/db30e21cbff7b9b2acd13ab83e25e3bf52f9696f/gcc%2Ffortran%2Fcheck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fcheck.c?ref=db30e21cbff7b9b2acd13ab83e25e3bf52f9696f", "patch": "@@ -5089,7 +5089,7 @@ gfc_check_transfer (gfc_expr *source, gfc_expr *mold, gfc_expr *size)\n     return true;\n \n   if (source_size < result_size)\n-    gfc_warning (\"Intrinsic TRANSFER at %L has partly undefined result: \"\n+    gfc_warning (0, \"Intrinsic TRANSFER at %L has partly undefined result: \"\n \t\t \"source size %ld < result size %ld\", &source->where,\n \t\t (long) source_size, (long) result_size);\n "}, {"sha": "4fd84e4b41531943dbbc2936f89b7725a89d32ec", "filename": "gcc/fortran/data.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/db30e21cbff7b9b2acd13ab83e25e3bf52f9696f/gcc%2Ffortran%2Fdata.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/db30e21cbff7b9b2acd13ab83e25e3bf52f9696f/gcc%2Ffortran%2Fdata.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fdata.c?ref=db30e21cbff7b9b2acd13ab83e25e3bf52f9696f", "patch": "@@ -164,7 +164,7 @@ create_character_initializer (gfc_expr *init, gfc_typespec *ts,\n \n   if (len > end - start)\n     {\n-      gfc_warning_now (\"Initialization string starting at %L was \"\n+      gfc_warning_now (0, \"Initialization string starting at %L was \"\n \t\t       \"truncated to fit the variable (%d/%d)\",\n \t\t       &rvalue->where, end - start, len);\n       len = end - start;"}, {"sha": "40d851c5f5c7c5102c914f130bf2dd1b88d36889", "filename": "gcc/fortran/decl.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/db30e21cbff7b9b2acd13ab83e25e3bf52f9696f/gcc%2Ffortran%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/db30e21cbff7b9b2acd13ab83e25e3bf52f9696f/gcc%2Ffortran%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fdecl.c?ref=db30e21cbff7b9b2acd13ab83e25e3bf52f9696f", "patch": "@@ -2299,7 +2299,7 @@ gfc_match_kind_spec (gfc_typespec *ts, bool kind_expr_only)\n   if (ts->f90_type != BT_UNKNOWN && ts->f90_type != ts->type\n       && !((ts->f90_type == BT_REAL && ts->type == BT_COMPLEX)\n \t   || (ts->f90_type == BT_COMPLEX && ts->type == BT_REAL)))\n-    gfc_warning_now (\"C kind type parameter is for type %s but type at %L \"\n+    gfc_warning_now (0, \"C kind type parameter is for type %s but type at %L \"\n \t\t     \"is %s\", gfc_basic_typename (ts->f90_type), &where,\n \t\t     gfc_basic_typename (ts->type));\n \n@@ -3318,7 +3318,7 @@ gfc_match_import (void)\n \n \t  if (gfc_find_symtree (gfc_current_ns->sym_root, name))\n \t    {\n-\t      gfc_warning (\"%qs is already IMPORTed from host scoping unit \"\n+\t      gfc_warning (0, \"%qs is already IMPORTed from host scoping unit \"\n \t\t\t   \"at %C\", name);\n \t      goto next_item;\n \t    }\n@@ -4156,7 +4156,7 @@ verify_bind_c_sym (gfc_symbol *tmp_sym, gfc_typespec *ts,\n       && tmp_sym->binding_label)\n       /* Use gfc_warning_now because we won't say that the symbol fails\n \t just because of this.\t*/\n-      gfc_warning_now (\"Symbol %qs at %L is marked PRIVATE but has been \"\n+      gfc_warning_now (0, \"Symbol %qs at %L is marked PRIVATE but has been \"\n \t\t       \"given the binding label %qs\", tmp_sym->name,\n \t\t       &(tmp_sym->declared_at), tmp_sym->binding_label);\n \n@@ -6625,7 +6625,7 @@ cray_pointer_decl (void)\n \t  return MATCH_ERROR;\n \t}\n       else if (cptr->ts.kind < gfc_index_integer_kind)\n-\tgfc_warning (\"Cray pointer at %C has %d bytes of precision;\"\n+\tgfc_warning (0, \"Cray pointer at %C has %d bytes of precision;\"\n \t\t     \" memory addresses require %d bytes\",\n \t\t     cptr->ts.kind, gfc_index_integer_kind);\n "}, {"sha": "da0eb8f664e9ec6fd3afe4998861b02919ff0613", "filename": "gcc/fortran/error.c", "status": "modified", "additions": 0, "deletions": 31, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/db30e21cbff7b9b2acd13ab83e25e3bf52f9696f/gcc%2Ffortran%2Ferror.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/db30e21cbff7b9b2acd13ab83e25e3bf52f9696f/gcc%2Ffortran%2Ferror.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ferror.c?ref=db30e21cbff7b9b2acd13ab83e25e3bf52f9696f", "patch": "@@ -904,17 +904,6 @@ gfc_warning (int opt, const char *gmsgid, ...)\n   return ret;\n }\n \n-bool\n-gfc_warning (const char *gmsgid, ...)\n-{\n-  va_list argp;\n-\n-  va_start (argp, gmsgid);\n-  bool ret = gfc_warning (0, gmsgid, argp);\n-  va_end (argp);\n-  return ret;\n-}\n-\n \n /* Whether, for a feature included in a given standard set (GFC_STD_*),\n    we should issue an error or a warning, or be quiet.  */\n@@ -1257,26 +1246,6 @@ gfc_warning_now (int opt, const char *gmsgid, ...)\n   return ret;\n }\n \n-/* Immediate warning (i.e. do not buffer the warning).  */\n-/* This function uses the common diagnostics, but does not support\n-   two locations; when being used in scanner.c, ensure that the location\n-   is properly setup. Otherwise, use gfc_warning_now_1.   */\n-\n-bool\n-gfc_warning_now (const char *gmsgid, ...)\n-{\n-  va_list argp;\n-  diagnostic_info diagnostic;\n-  bool ret;\n-\n-  va_start (argp, gmsgid);\n-  diagnostic_set_info (&diagnostic, gmsgid, &argp, UNKNOWN_LOCATION,\n-\t\t       DK_WARNING);\n-  ret = report_diagnostic (&diagnostic);\n-  va_end (argp);\n-  return ret;\n-}\n-\n \n /* Immediate error (i.e. do not buffer).  */\n /* This function uses the common diagnostics, but does not support"}, {"sha": "446ef196e2c422510f34559fcfabee6cf412a749", "filename": "gcc/fortran/frontend-passes.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/db30e21cbff7b9b2acd13ab83e25e3bf52f9696f/gcc%2Ffortran%2Ffrontend-passes.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/db30e21cbff7b9b2acd13ab83e25e3bf52f9696f/gcc%2Ffortran%2Ffrontend-passes.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ffrontend-passes.c?ref=db30e21cbff7b9b2acd13ab83e25e3bf52f9696f", "patch": "@@ -678,10 +678,10 @@ do_warn_function_elimination (gfc_expr *e)\n   if (e->expr_type != EXPR_FUNCTION)\n     return;\n   if (e->value.function.esym)\n-    gfc_warning (\"Removing call to function %qs at %L\",\n+    gfc_warning (0, \"Removing call to function %qs at %L\",\n \t\t e->value.function.esym->name, &(e->where));\n   else if (e->value.function.isym)\n-    gfc_warning (\"Removing call to function %qs at %L\",\n+    gfc_warning (0, \"Removing call to function %qs at %L\",\n \t\t e->value.function.isym->name, &(e->where));\n }\n /* Callback function for the code walker for doing common function"}, {"sha": "6b9f7dd02a63397bf67a1982f0642c8f4d217a57", "filename": "gcc/fortran/gfortran.h", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/db30e21cbff7b9b2acd13ab83e25e3bf52f9696f/gcc%2Ffortran%2Fgfortran.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/db30e21cbff7b9b2acd13ab83e25e3bf52f9696f/gcc%2Ffortran%2Fgfortran.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fgfortran.h?ref=db30e21cbff7b9b2acd13ab83e25e3bf52f9696f", "patch": "@@ -2646,10 +2646,8 @@ void gfc_buffer_error (bool);\n const char *gfc_print_wide_char (gfc_char_t);\n \n void gfc_warning_1 (const char *, ...) ATTRIBUTE_GCC_GFC(1,2);\n-bool gfc_warning (const char *, ...) ATTRIBUTE_GCC_GFC(1,2);\n bool gfc_warning (int opt, const char *, ...) ATTRIBUTE_GCC_GFC(2,3);\n void gfc_warning_now_1 (const char *, ...) ATTRIBUTE_GCC_GFC(1,2);\n-bool gfc_warning_now (const char *, ...) ATTRIBUTE_GCC_GFC(1,2);\n bool gfc_warning_now (int opt, const char *, ...) ATTRIBUTE_GCC_GFC(2,3);\n \n void gfc_clear_warning (void);"}, {"sha": "320eb01809ab19cd472bb7d1000fded64871adf1", "filename": "gcc/fortran/interface.c", "status": "modified", "additions": 12, "deletions": 10, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/db30e21cbff7b9b2acd13ab83e25e3bf52f9696f/gcc%2Ffortran%2Finterface.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/db30e21cbff7b9b2acd13ab83e25e3bf52f9696f/gcc%2Ffortran%2Finterface.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Finterface.c?ref=db30e21cbff7b9b2acd13ab83e25e3bf52f9696f", "patch": "@@ -1178,7 +1178,7 @@ check_dummy_characteristics (gfc_symbol *s1, gfc_symbol *s2,\n \n \tcase -2:\n \t  /* FIXME: Implement a warning for this case.\n-\t  gfc_warning (\"Possible character length mismatch in argument %qs\",\n+\t  gfc_warning (0, \"Possible character length mismatch in argument %qs\",\n \t\t       s1->name);*/\n \t  break;\n \n@@ -1237,7 +1237,7 @@ check_dummy_characteristics (gfc_symbol *s1, gfc_symbol *s2,\n \n \t      case -2:\n \t\t/* FIXME: Implement a warning for this case.\n-\t\tgfc_warning (\"Possible shape mismatch in argument %qs\",\n+\t\tgfc_warning (0, \"Possible shape mismatch in argument %qs\",\n \t\t\t    s1->name);*/\n \t\tbreak;\n \n@@ -1398,7 +1398,7 @@ check_result_characteristics (gfc_symbol *s1, gfc_symbol *s2,\n \n \t      case -2:\n \t\t/* FIXME: Implement a warning for this case.\n-\t\tgfc_warning (\"Possible shape mismatch in return value\");*/\n+\t\tgfc_warning (0, \"Possible shape mismatch in return value\");*/\n \t\tbreak;\n \n \t      case 0:\n@@ -1660,11 +1660,11 @@ check_interface1 (gfc_interface *p, gfc_interface *q0,\n \t\t\t p->sym->name, q->sym->name, interface_name,\n \t\t\t &p->where);\n \t    else if (!p->sym->attr.use_assoc && q->sym->attr.use_assoc)\n-\t      gfc_warning (\"Ambiguous interfaces %qs and %qs in %s at %L\",\n+\t      gfc_warning (0, \"Ambiguous interfaces %qs and %qs in %s at %L\",\n \t\t\t   p->sym->name, q->sym->name, interface_name,\n \t\t\t   &p->where);\n \t    else\n-\t      gfc_warning (\"Although not referenced, %qs has ambiguous \"\n+\t      gfc_warning (0, \"Although not referenced, %qs has ambiguous \"\n \t\t\t   \"interfaces at %L\", interface_name, &p->where);\n \t    return 1;\n \t  }\n@@ -2705,14 +2705,16 @@ compare_actual_formal (gfc_actual_arglist **ap, gfc_formal_arglist *formal,\n \t\t\tf->sym->ts.u.cl->length->value.integer) != 0))\n \t {\n \t   if (where && (f->sym->attr.pointer || f->sym->attr.allocatable))\n-\t     gfc_warning (\"Character length mismatch (%ld/%ld) between actual \"\n+\t     gfc_warning (0,\n+\t\t\t  \"Character length mismatch (%ld/%ld) between actual \"\n \t\t\t  \"argument and pointer or allocatable dummy argument \"\n \t\t\t  \"%qs at %L\",\n \t\t\t  mpz_get_si (a->expr->ts.u.cl->length->value.integer),\n \t\t\t  mpz_get_si (f->sym->ts.u.cl->length->value.integer),\n \t\t\t  f->sym->name, &a->expr->where);\n \t   else if (where)\n-\t     gfc_warning (\"Character length mismatch (%ld/%ld) between actual \"\n+\t     gfc_warning (0,\n+\t\t\t  \"Character length mismatch (%ld/%ld) between actual \"\n \t\t\t  \"argument and assumed-shape dummy argument %qs \"\n \t\t\t  \"at %L\",\n \t\t\t  mpz_get_si (a->expr->ts.u.cl->length->value.integer),\n@@ -2743,12 +2745,12 @@ compare_actual_formal (gfc_actual_arglist **ap, gfc_formal_arglist *formal,\n \t  && f->sym->attr.flavor != FL_PROCEDURE)\n \t{\n \t  if (a->expr->ts.type == BT_CHARACTER && !f->sym->as && where)\n-\t    gfc_warning (\"Character length of actual argument shorter \"\n+\t    gfc_warning (0, \"Character length of actual argument shorter \"\n \t\t\t \"than of dummy argument %qs (%lu/%lu) at %L\",\n \t\t\t f->sym->name, actual_size, formal_size,\n \t\t\t &a->expr->where);\n           else if (where)\n-\t    gfc_warning (\"Actual argument contains too few \"\n+\t    gfc_warning (0, \"Actual argument contains too few \"\n \t\t\t \"elements for dummy argument %qs (%lu/%lu) at %L\",\n \t\t\t f->sym->name, actual_size, formal_size,\n \t\t\t &a->expr->where);\n@@ -3184,7 +3186,7 @@ check_some_aliasing (gfc_formal_arglist *f, gfc_actual_arglist *a)\n \t      || (f1_intent == INTENT_OUT && f2_intent == INTENT_IN)\n \t      || (f1_intent == INTENT_OUT && f2_intent == INTENT_OUT))\n \t    {\n-\t      gfc_warning (\"Same actual argument associated with INTENT(%s) \"\n+\t      gfc_warning (0, \"Same actual argument associated with INTENT(%s) \"\n \t\t\t   \"argument %qs and INTENT(%s) argument %qs at %L\",\n \t\t\t   gfc_intent_string (f1_intent), p[i].f->sym->name,\n \t\t\t   gfc_intent_string (f2_intent), p[j].f->sym->name,"}, {"sha": "a958f8ec9d12e07a954c4b642dbf2eee0f75c58d", "filename": "gcc/fortran/intrinsic.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/db30e21cbff7b9b2acd13ab83e25e3bf52f9696f/gcc%2Ffortran%2Fintrinsic.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/db30e21cbff7b9b2acd13ab83e25e3bf52f9696f/gcc%2Ffortran%2Fintrinsic.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fintrinsic.c?ref=db30e21cbff7b9b2acd13ab83e25e3bf52f9696f", "patch": "@@ -4316,7 +4316,7 @@ gfc_check_intrinsic_standard (const gfc_intrinsic_sym* isym,\n     {\n       /* Do only print a warning if not a GNU extension.  */\n       if (!silent && isym->standard != GFC_STD_GNU)\n-\tgfc_warning (\"Intrinsic %qs (is %s) is used at %L\",\n+\tgfc_warning (0, \"Intrinsic %qs (is %s) is used at %L\",\n \t\t     isym->name, _(symstd_msg), &where);\n \n       return true;\n@@ -4617,7 +4617,7 @@ gfc_convert_type_warn (gfc_expr *expr, gfc_typespec *ts, int eflag, int wflag)\n   /* At this point, a conversion is necessary. A warning may be needed.  */\n   if ((gfc_option.warn_std & sym->standard) != 0)\n     {\n-      gfc_warning_now (\"Extension: Conversion from %s to %s at %L\",\n+      gfc_warning_now (0, \"Extension: Conversion from %s to %s at %L\",\n \t\t       gfc_typename (&from_ts), gfc_typename (ts),\n \t\t       &expr->where);\n     }"}, {"sha": "7ba6b092e983593d17609c93ad3862f59d76b76a", "filename": "gcc/fortran/io.c", "status": "modified", "additions": 14, "deletions": 12, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/db30e21cbff7b9b2acd13ab83e25e3bf52f9696f/gcc%2Ffortran%2Fio.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/db30e21cbff7b9b2acd13ab83e25e3bf52f9696f/gcc%2Ffortran%2Fio.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fio.c?ref=db30e21cbff7b9b2acd13ab83e25e3bf52f9696f", "patch": "@@ -165,7 +165,7 @@ next_char (gfc_instring in_string)\n \tgfc_current_locus = old_locus;\n \n       if (!(gfc_option.allow_std & GFC_STD_GNU) && !inhibit_warnings)\n-\tgfc_warning (\"Extension: backslash character at %C\");\n+\tgfc_warning (0, \"Extension: backslash character at %C\");\n     }\n \n   if (mode == MODE_COPY)\n@@ -201,7 +201,7 @@ next_char_not_space (bool *error)\n       if (c == '\\t')\n \t{\n \t  if (gfc_option.allow_std & GFC_STD_GNU)\n-\t    gfc_warning (\"Extension: Tab character in format at %C\");\n+\t    gfc_warning (0, \"Extension: Tab character in format at %C\");\n \t  else\n \t    {\n \t      gfc_error (\"Extension: Tab character in format at %C\");\n@@ -681,7 +681,7 @@ check_format (bool is_input)\n \treturn false;\n       if (t != FMT_RPAREN || level > 0)\n \t{\n-\t  gfc_warning (\"$ should be the last specifier in format at %L\",\n+\t  gfc_warning (0, \"$ should be the last specifier in format at %L\",\n \t\t       &format_locus);\n \t  goto optional_comma_1;\n \t}\n@@ -779,7 +779,7 @@ check_format (bool is_input)\n \t  case WARNING:\n \t    if (mode != MODE_FORMAT)\n \t      format_locus.nextc += format_string_pos;\n-\t    gfc_warning (\"Extension: Missing positive width after L \"\n+\t    gfc_warning (0, \"Extension: Missing positive width after L \"\n \t\t\t \"descriptor at %L\", &format_locus);\n \t    saved_token = t;\n \t    break;\n@@ -874,7 +874,7 @@ check_format (bool is_input)\n               goto fail;\n \t    }\n \t  else\n-\t    gfc_warning (\"Period required in format \"\n+\t    gfc_warning (0, \"Period required in format \"\n \t\t\t \"specifier %s at %L\", token_to_string (t),\n \t\t\t  &format_locus);\n \t  /* If we go to finished, we need to unwind this\n@@ -946,7 +946,7 @@ check_format (bool is_input)\n \t    }\n \t  if (mode != MODE_FORMAT)\n \t    format_locus.nextc += format_string_pos;\n-\t  gfc_warning (\"Period required in format specifier at %L\",\n+\t  gfc_warning (0, \"Period required in format specifier at %L\",\n \t\t       &format_locus);\n \t  saved_token = t;\n \t  break;\n@@ -968,7 +968,7 @@ check_format (bool is_input)\n \t{\n \t  if (mode != MODE_FORMAT)\n \t    format_locus.nextc += format_string_pos;\n-\t  gfc_warning (\"The H format specifier at %L is\"\n+\t  gfc_warning (0, \"The H format specifier at %L is\"\n \t\t       \" a Fortran 95 deleted feature\", &format_locus);\n \t}\n       if (mode == MODE_STRING)\n@@ -1173,7 +1173,8 @@ check_format_string (gfc_expr *e, bool is_input)\n       if (e->value.character.string[i] != ' ')\n         {\n           format_locus.nextc += format_length + 1; \n-          gfc_warning (\"Extraneous characters in format at %L\", &format_locus); \n+          gfc_warning (0,\n+\t\t       \"Extraneous characters in format at %L\", &format_locus); \n           break;\n         }\n   return rv;\n@@ -1720,7 +1721,7 @@ compare_to_allowed_values (const char *specifier, const char *allowed[],\n \n \tif (n == WARNING || (warn && n == ERROR))\n \t  {\n-\t    gfc_warning (\"Fortran 2003: %s specifier in %s statement at %C \"\n+\t    gfc_warning (0, \"Fortran 2003: %s specifier in %s statement at %C \"\n \t\t\t \"has value %qs\", specifier, statement,\n \t\t\t allowed_f2003[i]);\n \t    return 1;\n@@ -1747,7 +1748,7 @@ compare_to_allowed_values (const char *specifier, const char *allowed[],\n \n \tif (n == WARNING || (warn && n == ERROR))\n \t  {\n-\t    gfc_warning (\"Extension: %s specifier in %s statement at %C \"\n+\t    gfc_warning (0, \"Extension: %s specifier in %s statement at %C \"\n \t\t\t \"has value %qs\", specifier, statement,\n \t\t\t allowed_gnu[i]);\n \t    return 1;\n@@ -1768,7 +1769,8 @@ compare_to_allowed_values (const char *specifier, const char *allowed[],\n   if (warn)\n     {\n       char *s = gfc_widechar_to_char (value, -1);\n-      gfc_warning (\"%s specifier in %s statement at %C has invalid value %qs\",\n+      gfc_warning (0,\n+\t\t   \"%s specifier in %s statement at %C has invalid value %qs\",\n \t\t   specifier, statement, s);\n       free (s);\n       return 1;\n@@ -2047,7 +2049,7 @@ gfc_match_open (void)\n #define warn_or_error(...) \\\n { \\\n   if (warn) \\\n-    gfc_warning (__VA_ARGS__); \\\n+    gfc_warning (0, __VA_ARGS__); \\\n   else \\\n     { \\\n       gfc_error (__VA_ARGS__); \\"}, {"sha": "02f43a04db19ac08b7e8305a5982777a08efd656", "filename": "gcc/fortran/matchexp.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/db30e21cbff7b9b2acd13ab83e25e3bf52f9696f/gcc%2Ffortran%2Fmatchexp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/db30e21cbff7b9b2acd13ab83e25e3bf52f9696f/gcc%2Ffortran%2Fmatchexp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fmatchexp.c?ref=db30e21cbff7b9b2acd13ab83e25e3bf52f9696f", "patch": "@@ -321,7 +321,7 @@ match_ext_mult_operand (gfc_expr **result)\n       return MATCH_ERROR;\n     }\n   else\n-    gfc_warning (\"Extension: Unary operator following \"\n+    gfc_warning (0, \"Extension: Unary operator following \"\n \t\t \"arithmetic operator (use parentheses) at %C\");\n \n   m = match_ext_mult_operand (&e);\n@@ -430,7 +430,7 @@ match_ext_add_operand (gfc_expr **result)\n       return MATCH_ERROR;\n     }\n   else\n-    gfc_warning (\"Extension: Unary operator following \"\n+    gfc_warning (0, \"Extension: Unary operator following \"\n \t\t\"arithmetic operator (use parentheses) at %C\");\n \n   m = match_ext_add_operand (&e);"}, {"sha": "df612ae953a54662219937ac64c6ba148082c774", "filename": "gcc/fortran/module.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/db30e21cbff7b9b2acd13ab83e25e3bf52f9696f/gcc%2Ffortran%2Fmodule.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/db30e21cbff7b9b2acd13ab83e25e3bf52f9696f/gcc%2Ffortran%2Fmodule.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fmodule.c?ref=db30e21cbff7b9b2acd13ab83e25e3bf52f9696f", "patch": "@@ -6491,7 +6491,7 @@ use_iso_fortran_env_module (void)\n \n \t      if ((flag_default_integer || flag_default_real)\n \t\t  && symbol[i].id == ISOFORTRANENV_NUMERIC_STORAGE_SIZE)\n-\t\tgfc_warning_now (\"Use of the NUMERIC_STORAGE_SIZE named \"\n+\t\tgfc_warning_now (0, \"Use of the NUMERIC_STORAGE_SIZE named \"\n \t\t\t\t \"constant from intrinsic module \"\n \t\t\t\t \"ISO_FORTRAN_ENV at %L is incompatible with \"\n \t\t\t\t \"option %qs\", &u->where,\n@@ -6558,7 +6558,8 @@ use_iso_fortran_env_module (void)\n \n \t  if ((flag_default_integer || flag_default_real)\n \t      && symbol[i].id == ISOFORTRANENV_NUMERIC_STORAGE_SIZE)\n-\t    gfc_warning_now (\"Use of the NUMERIC_STORAGE_SIZE named constant \"\n+\t    gfc_warning_now (0,\n+\t\t\t     \"Use of the NUMERIC_STORAGE_SIZE named constant \"\n \t\t\t     \"from intrinsic module ISO_FORTRAN_ENV at %C is \"\n \t\t\t     \"incompatible with option %s\",\n \t\t\t     flag_default_integer"}, {"sha": "21de6072cc2f55af6b89bb13c9f8a42444ef8977", "filename": "gcc/fortran/openmp.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/db30e21cbff7b9b2acd13ab83e25e3bf52f9696f/gcc%2Ffortran%2Fopenmp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/db30e21cbff7b9b2acd13ab83e25e3bf52f9696f/gcc%2Ffortran%2Fopenmp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fopenmp.c?ref=db30e21cbff7b9b2acd13ab83e25e3bf52f9696f", "patch": "@@ -2638,7 +2638,7 @@ resolve_oacc_positive_int_expr (gfc_expr *expr, const char *clause)\n   resolve_oacc_scalar_int_expr (expr, clause);\n   if (expr->expr_type == EXPR_CONSTANT && expr->ts.type == BT_INTEGER\n       && mpz_sgn(expr->value.integer) <= 0)\n-    gfc_warning (\"INTEGER expression of %s clause at %L must be positive\",\n+    gfc_warning (0, \"INTEGER expression of %s clause at %L must be positive\",\n \t\t     clause, &expr->where);\n }\n "}, {"sha": "60473dd2376110d077422eaffec68b1baff8eea3", "filename": "gcc/fortran/options.c", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/db30e21cbff7b9b2acd13ab83e25e3bf52f9696f/gcc%2Ffortran%2Foptions.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/db30e21cbff7b9b2acd13ab83e25e3bf52f9696f/gcc%2Ffortran%2Foptions.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Foptions.c?ref=db30e21cbff7b9b2acd13ab83e25e3bf52f9696f", "patch": "@@ -300,7 +300,7 @@ gfc_post_options (const char **pfilename)\n       if (gfc_current_form == FORM_UNKNOWN)\n \t{\n \t  gfc_current_form = FORM_FREE;\n-\t  gfc_warning_now (\"Reading file %qs as free form\", \n+\t  gfc_warning_now (0, \"Reading file %qs as free form\", \n \t\t\t   (filename[0] == '\\0') ? \"<stdin>\" : filename);\n \t}\n     }\n@@ -310,10 +310,10 @@ gfc_post_options (const char **pfilename)\n   if (gfc_current_form == FORM_FREE)\n     {\n       if (gfc_option.flag_d_lines == 0)\n-\tgfc_warning_now (\"%<-fd-lines-as-comments%> has no effect \"\n+\tgfc_warning_now (0, \"%<-fd-lines-as-comments%> has no effect \"\n \t\t\t   \"in free form\");\n       else if (gfc_option.flag_d_lines == 1)\n-\tgfc_warning_now (\"%<-fd-lines-as-code%> has no effect in free form\");\n+\tgfc_warning_now (0, \"%<-fd-lines-as-code%> has no effect in free form\");\n \n       if (warn_line_truncation == -1)\n \t  warn_line_truncation = 1;\n@@ -344,18 +344,18 @@ gfc_post_options (const char **pfilename)\n \n   if (!flag_automatic && flag_max_stack_var_size != -2\n       && flag_max_stack_var_size != 0)\n-    gfc_warning_now (\"Flag %<-fno-automatic%> overwrites %<-fmax-stack-var-size=%d%>\",\n+    gfc_warning_now (0, \"Flag %<-fno-automatic%> overwrites %<-fmax-stack-var-size=%d%>\",\n \t\t     flag_max_stack_var_size);\n   else if (!flag_automatic && flag_recursive)\n-    gfc_warning_now (\"Flag %<-fno-automatic%> overwrites %<-frecursive%>\");\n+    gfc_warning_now (0, \"Flag %<-fno-automatic%> overwrites %<-frecursive%>\");\n   else if (!flag_automatic && flag_openmp)\n-    gfc_warning_now (\"Flag %<-fno-automatic%> overwrites %<-frecursive%> implied by \"\n+    gfc_warning_now (0, \"Flag %<-fno-automatic%> overwrites %<-frecursive%> implied by \"\n \t\t     \"%<-fopenmp%>\");\n   else if (flag_max_stack_var_size != -2 && flag_recursive)\n-    gfc_warning_now (\"Flag %<-frecursive%> overwrites %<-fmax-stack-var-size=%d%>\",\n+    gfc_warning_now (0, \"Flag %<-frecursive%> overwrites %<-fmax-stack-var-size=%d%>\",\n \t\t     flag_max_stack_var_size);\n   else if (flag_max_stack_var_size != -2 && flag_openmp)\n-    gfc_warning_now (\"Flag %<-fmax-stack-var-size=%d%> overwrites %<-frecursive%> \"\n+    gfc_warning_now (0, \"Flag %<-fmax-stack-var-size=%d%> overwrites %<-frecursive%> \"\n \t\t     \"implied by %<-fopenmp%>\", flag_max_stack_var_size);\n \n   /* Implement -frecursive as -fmax-stack-var-size=-1.  */"}, {"sha": "2c7c554d367e63618625c68777329ce4ec5419fe", "filename": "gcc/fortran/parse.c", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/db30e21cbff7b9b2acd13ab83e25e3bf52f9696f/gcc%2Ffortran%2Fparse.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/db30e21cbff7b9b2acd13ab83e25e3bf52f9696f/gcc%2Ffortran%2Fparse.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fparse.c?ref=db30e21cbff7b9b2acd13ab83e25e3bf52f9696f", "patch": "@@ -973,7 +973,7 @@ next_free (void)\n \n \t  if (gfc_match_eos () == MATCH_YES)\n \t    {\n-\t      gfc_warning_now (\"Ignoring statement label in empty statement \"\n+\t      gfc_warning_now (0, \"Ignoring statement label in empty statement \"\n \t\t\t       \"at %L\", &label_locus);\n \t      gfc_free_st_label (gfc_statement_label);\n \t      gfc_statement_label = NULL;\n@@ -1178,7 +1178,7 @@ next_fixed (void)\n   if (digit_flag)\n     {\n       if (label == 0)\n-\tgfc_warning_now (\"Zero is not a valid statement label at %C\");\n+\tgfc_warning_now (0, \"Zero is not a valid statement label at %C\");\n       else\n \t{\n \t  /* We've found a valid statement label.  */\n@@ -1234,7 +1234,7 @@ next_fixed (void)\n \n blank_line:\n   if (digit_flag)\n-    gfc_warning_now (\"Ignoring statement label in empty statement at %L\",\n+    gfc_warning_now (0, \"Ignoring statement label in empty statement at %L\",\n \t\t     &label_locus);\n     \n   gfc_current_locus.lb->truncated = 0;\n@@ -2683,7 +2683,7 @@ parse_derived (void)\n \t    }\n \n \t  if (gfc_current_block ()->attr.sequence)\n-\t    gfc_warning (\"SEQUENCE attribute at %C already specified in \"\n+\t    gfc_warning (0, \"SEQUENCE attribute at %C already specified in \"\n \t\t\t \"TYPE statement\");\n \n \t  if (seen_sequence)\n@@ -4345,7 +4345,7 @@ parse_oacc_loop (gfc_statement acc_st)\n \n   st = next_statement ();\n   if (st == ST_OACC_END_LOOP)\n-    gfc_warning (\"Redundant !$ACC END LOOP at %C\");\n+    gfc_warning (0, \"Redundant !$ACC END LOOP at %C\");\n   if ((acc_st == ST_OACC_PARALLEL_LOOP && st == ST_OACC_END_PARALLEL_LOOP) ||\n       (acc_st == ST_OACC_KERNELS_LOOP && st == ST_OACC_END_KERNELS_LOOP) ||\n       (acc_st == ST_OACC_LOOP && st == ST_OACC_END_LOOP))"}, {"sha": "67a7f8a99b3ad37bf1744e280ae690e06b79631e", "filename": "gcc/fortran/primary.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/db30e21cbff7b9b2acd13ab83e25e3bf52f9696f/gcc%2Ffortran%2Fprimary.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/db30e21cbff7b9b2acd13ab83e25e3bf52f9696f/gcc%2Ffortran%2Fprimary.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fprimary.c?ref=db30e21cbff7b9b2acd13ab83e25e3bf52f9696f", "patch": "@@ -865,7 +865,7 @@ next_string_char (gfc_char_t delimiter, int *ret)\n \tgfc_current_locus = old_locus;\n \n       if (!(gfc_option.allow_std & GFC_STD_GNU) && !inhibit_warnings)\n-\tgfc_warning (\"Extension: backslash character at %C\");\n+\tgfc_warning (0, \"Extension: backslash character at %C\");\n     }\n \n   if (c != delimiter)"}, {"sha": "bb4240446bf83f18a09abd4114379b10cb5ddbec", "filename": "gcc/fortran/resolve.c", "status": "modified", "additions": 20, "deletions": 19, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/db30e21cbff7b9b2acd13ab83e25e3bf52f9696f/gcc%2Ffortran%2Fresolve.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/db30e21cbff7b9b2acd13ab83e25e3bf52f9696f/gcc%2Ffortran%2Fresolve.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fresolve.c?ref=db30e21cbff7b9b2acd13ab83e25e3bf52f9696f", "patch": "@@ -1728,7 +1728,7 @@ resolve_procedure_expression (gfc_expr* expr)\n   /* A non-RECURSIVE procedure that is used as procedure expression within its\n      own body is in danger of being called recursively.  */\n   if (is_illegal_recursion (sym, gfc_current_ns))\n-    gfc_warning (\"Non-RECURSIVE procedure %qs at %L is possibly calling\"\n+    gfc_warning (0, \"Non-RECURSIVE procedure %qs at %L is possibly calling\"\n \t\t \" itself recursively.  Declare it RECURSIVE or use\"\n \t\t \" %<-frecursive%>\", sym->name, &expr->where);\n \n@@ -2120,7 +2120,7 @@ resolve_elemental_actual (gfc_expr *expr, gfc_code *c)\n \t  && (set_by_optional || arg->expr->rank != rank)\n \t  && !(isym && isym->id == GFC_ISYM_CONVERSION))\n \t{\n-\t  gfc_warning (\"%qs at %L is an array and OPTIONAL; IF IT IS \"\n+\t  gfc_warning (0, \"%qs at %L is an array and OPTIONAL; IF IT IS \"\n \t\t       \"MISSING, it cannot be the actual argument of an \"\n \t\t       \"ELEMENTAL procedure unless there is a non-optional \"\n \t\t       \"argument with the same rank (12.4.1.5)\",\n@@ -3631,7 +3631,7 @@ resolve_operator (gfc_expr *e)\n \t\t  else\n \t\t    msg = \"Inequality comparison for %s at %L\";\n \n-\t\t  gfc_warning (msg, gfc_typename (&op1->ts), &op1->where);\n+\t\t  gfc_warning (0, msg, gfc_typename (&op1->ts), &op1->where);\n \t\t}\n \t    }\n \n@@ -3964,12 +3964,12 @@ check_dimension (int i, gfc_array_ref *ar, gfc_array_spec *as)\n       if (compare_bound (ar->start[i], as->lower[i]) == CMP_LT)\n \t{\n \t  if (i < as->rank)\n-\t    gfc_warning (\"Array reference at %L is out of bounds \"\n+\t    gfc_warning (0, \"Array reference at %L is out of bounds \"\n \t\t\t \"(%ld < %ld) in dimension %d\", &ar->c_where[i],\n \t\t\t mpz_get_si (ar->start[i]->value.integer),\n \t\t\t mpz_get_si (as->lower[i]->value.integer), i+1);\n \t  else\n-\t    gfc_warning (\"Array reference at %L is out of bounds \"\n+\t    gfc_warning (0, \"Array reference at %L is out of bounds \"\n \t\t\t \"(%ld < %ld) in codimension %d\", &ar->c_where[i],\n \t\t\t mpz_get_si (ar->start[i]->value.integer),\n \t\t\t mpz_get_si (as->lower[i]->value.integer),\n@@ -3979,12 +3979,12 @@ check_dimension (int i, gfc_array_ref *ar, gfc_array_spec *as)\n       if (compare_bound (ar->start[i], as->upper[i]) == CMP_GT)\n \t{\n \t  if (i < as->rank)\n-\t    gfc_warning (\"Array reference at %L is out of bounds \"\n+\t    gfc_warning (0, \"Array reference at %L is out of bounds \"\n \t\t\t \"(%ld > %ld) in dimension %d\", &ar->c_where[i],\n \t\t\t mpz_get_si (ar->start[i]->value.integer),\n \t\t\t mpz_get_si (as->upper[i]->value.integer), i+1);\n \t  else\n-\t    gfc_warning (\"Array reference at %L is out of bounds \"\n+\t    gfc_warning (0, \"Array reference at %L is out of bounds \"\n \t\t\t \"(%ld > %ld) in codimension %d\", &ar->c_where[i],\n \t\t\t mpz_get_si (ar->start[i]->value.integer),\n \t\t\t mpz_get_si (as->upper[i]->value.integer),\n@@ -4021,15 +4021,15 @@ check_dimension (int i, gfc_array_ref *ar, gfc_array_spec *as)\n \t  {\n \t    if (compare_bound (AR_START, as->lower[i]) == CMP_LT)\n \t      {\n-\t\tgfc_warning (\"Lower array reference at %L is out of bounds \"\n+\t\tgfc_warning (0, \"Lower array reference at %L is out of bounds \"\n \t\t       \"(%ld < %ld) in dimension %d\", &ar->c_where[i],\n \t\t       mpz_get_si (AR_START->value.integer),\n \t\t       mpz_get_si (as->lower[i]->value.integer), i+1);\n \t\treturn true;\n \t      }\n \t    if (compare_bound (AR_START, as->upper[i]) == CMP_GT)\n \t      {\n-\t\tgfc_warning (\"Lower array reference at %L is out of bounds \"\n+\t\tgfc_warning (0, \"Lower array reference at %L is out of bounds \"\n \t\t       \"(%ld > %ld) in dimension %d\", &ar->c_where[i],\n \t\t       mpz_get_si (AR_START->value.integer),\n \t\t       mpz_get_si (as->upper[i]->value.integer), i+1);\n@@ -4045,7 +4045,7 @@ check_dimension (int i, gfc_array_ref *ar, gfc_array_spec *as)\n \t  {\n \t    if (compare_bound_mpz_t (as->lower[i], last_value) == CMP_GT)\n \t      {\n-\t\tgfc_warning (\"Upper array reference at %L is out of bounds \"\n+\t\tgfc_warning (0, \"Upper array reference at %L is out of bounds \"\n \t\t       \"(%ld < %ld) in dimension %d\", &ar->c_where[i],\n \t\t       mpz_get_si (last_value),\n \t\t       mpz_get_si (as->lower[i]->value.integer), i+1);\n@@ -4054,7 +4054,7 @@ check_dimension (int i, gfc_array_ref *ar, gfc_array_spec *as)\n \t      }\n \t    if (compare_bound_mpz_t (as->upper[i], last_value) == CMP_LT)\n \t      {\n-\t\tgfc_warning (\"Upper array reference at %L is out of bounds \"\n+\t\tgfc_warning (0, \"Upper array reference at %L is out of bounds \"\n \t\t       \"(%ld > %ld) in dimension %d\", &ar->c_where[i],\n \t\t       mpz_get_si (last_value),\n \t\t       mpz_get_si (as->upper[i]->value.integer), i+1);\n@@ -7195,7 +7195,7 @@ resolve_allocate_deallocate (gfc_code *code, const char *fcn)\n   if (errmsg)\n     {\n       if (!stat)\n-\tgfc_warning (\"ERRMSG at %L is useless without a STAT tag\",\n+\tgfc_warning (0, \"ERRMSG at %L is useless without a STAT tag\",\n \t\t     &errmsg->where);\n \n       gfc_check_vardef_context (errmsg, false, false, false,\n@@ -7643,15 +7643,15 @@ resolve_select (gfc_code *code, bool select_type)\n \t  if (cp->low\n \t      && gfc_check_integer_range (cp->low->value.integer,\n \t\t\t\t\t  case_expr->ts.kind) != ARITH_OK)\n-\t    gfc_warning (\"Expression in CASE statement at %L is \"\n+\t    gfc_warning (0, \"Expression in CASE statement at %L is \"\n \t\t\t \"not in the range of %s\", &cp->low->where,\n \t\t\t gfc_typename (&case_expr->ts));\n \n \t  if (cp->high\n \t      && cp->low != cp->high\n \t      && gfc_check_integer_range (cp->high->value.integer,\n \t\t\t\t\t  case_expr->ts.kind) != ARITH_OK)\n-\t    gfc_warning (\"Expression in CASE statement at %L is \"\n+\t    gfc_warning (0, \"Expression in CASE statement at %L is \"\n \t\t\t \"not in the range of %s\", &cp->high->where,\n \t\t\t gfc_typename (&case_expr->ts));\n \t}\n@@ -8653,7 +8653,8 @@ resolve_branch (gfc_st_label *label, gfc_code *code)\n \n   if (code->here == label)\n     {\n-      gfc_warning (\"Branch at %L may result in an infinite loop\", &code->loc);\n+      gfc_warning (0,\n+\t\t   \"Branch at %L may result in an infinite loop\", &code->loc);\n       return;\n     }\n \n@@ -8860,7 +8861,7 @@ gfc_resolve_assign_in_forall (gfc_code *code, int nvar, gfc_expr **var_expr)\n \t     assignment.  Emit a warning rather than an error because the\n \t     mask could be resolving this problem.  */\n \t  if (!find_forall_index (code->expr1, forall_index, 0))\n-\t    gfc_warning (\"The FORALL with index %qs is not used on the \"\n+\t    gfc_warning (0, \"The FORALL with index %qs is not used on the \"\n \t\t\t \"left side of the assignment at %L and so might \"\n \t\t\t \"cause multiple assignment to this object\",\n \t\t\t var_expr[n]->symtree->name, &code->expr1->where);\n@@ -9702,7 +9703,7 @@ generate_component_assignments (gfc_code **code, gfc_namespace *ns)\n \t\t\t\t      (*code)->expr1->rank ? 1 : 0);\n   if (depth > 1)\n     {\n-      gfc_warning (\"TODO: type-bound defined assignment(s) at %L not \"\n+      gfc_warning (0, \"TODO: type-bound defined assignment(s) at %L not \"\n \t\t   \"done because multiple part array references would \"\n \t\t   \"occur in intermediate expressions.\", &(*code)->loc);\n       return;\n@@ -14344,12 +14345,12 @@ warn_unused_fortran_label (gfc_st_label *label)\n   switch (label->referenced)\n     {\n     case ST_LABEL_UNKNOWN:\n-      gfc_warning (\"Label %d at %L defined but not used\", label->value,\n+      gfc_warning (0, \"Label %d at %L defined but not used\", label->value,\n \t\t   &label->where);\n       break;\n \n     case ST_LABEL_BAD_TARGET:\n-      gfc_warning (\"Label %d at %L defined but cannot be used\",\n+      gfc_warning (0, \"Label %d at %L defined but cannot be used\",\n \t\t   label->value, &label->where);\n       break;\n "}, {"sha": "4389880b3b7f989d0ee3eda853036657b0b6671e", "filename": "gcc/fortran/scanner.c", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/db30e21cbff7b9b2acd13ab83e25e3bf52f9696f/gcc%2Ffortran%2Fscanner.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/db30e21cbff7b9b2acd13ab83e25e3bf52f9696f/gcc%2Ffortran%2Fscanner.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fscanner.c?ref=db30e21cbff7b9b2acd13ab83e25e3bf52f9696f", "patch": "@@ -327,7 +327,7 @@ add_path_to_list (gfc_directorylist **list, const char *path,\n   if (stat (q, &st))\n     {\n       if (errno != ENOENT)\n-\tgfc_warning_now (\"Include directory %qs: %s\", path,\n+\tgfc_warning_now (0, \"Include directory %qs: %s\", path,\n \t\t\t xstrerror(errno));\n       else if (warn)\n \tgfc_warning_now (OPT_Wmissing_include_dirs,\n@@ -336,7 +336,7 @@ add_path_to_list (gfc_directorylist **list, const char *path,\n     }\n   else if (!S_ISDIR (st.st_mode))\n     {\n-      gfc_warning_now (\"%qs is not a directory\", path);\n+      gfc_warning_now (0, \"%qs is not a directory\", path);\n       return;\n     }\n \n@@ -739,7 +739,7 @@ skip_oacc_attribute (locus start, locus old_loc, bool continue_flag)\n \t}\n       else\n \t{\n-\t  gfc_warning_now (\"!$ACC at %C starts a commented \"\n+\t  gfc_warning_now (0, \"!$ACC at %C starts a commented \"\n \t\t\t   \"line as it neither is followed \"\n \t\t\t   \"by a space nor is a \"\n \t\t\t   \"continuation line\");\n@@ -779,7 +779,7 @@ skip_omp_attribute (locus start, locus old_loc, bool continue_flag)\n \t}\n       else\n \t{\n-\t  gfc_warning_now (\"!$OMP at %C starts a commented \"\n+\t  gfc_warning_now (0, \"!$OMP at %C starts a commented \"\n \t\t\t   \"line as it neither is followed \"\n \t\t\t   \"by a space nor is a \"\n \t\t\t   \"continuation line\");\n@@ -1306,7 +1306,7 @@ gfc_next_char_literal (gfc_instring in_string)\n \t  if (++continue_count == gfc_option.max_continue_free)\n \t    {\n \t      if (gfc_notification_std (GFC_STD_GNU) || pedantic)\n-\t\tgfc_warning (\"Limit of %d continuations exceeded in \"\n+\t\tgfc_warning (0, \"Limit of %d continuations exceeded in \"\n \t\t\t     \"statement at %C\", gfc_option.max_continue_free);\n \t    }\n \t}\n@@ -1477,7 +1477,7 @@ gfc_next_char_literal (gfc_instring in_string)\n \t  if (++continue_count == gfc_option.max_continue_fixed)\n \t    {\n \t      if (gfc_notification_std (GFC_STD_GNU) || pedantic)\n-\t\tgfc_warning (\"Limit of %d continuations exceeded in \"\n+\t\tgfc_warning (0, \"Limit of %d continuations exceeded in \"\n \t\t\t     \"statement at %C\",\n \t\t\t     gfc_option.max_continue_fixed);\n \t    }\n@@ -1718,7 +1718,7 @@ load_line (FILE *input, gfc_char_t **pbuf, int *pbuflen, const int *first_char)\n \t\tgfc_error_now (\"%<&%> not allowed by itself in line %d\",\n \t\t\t       current_line);\n \t      else\n-\t\tgfc_warning_now (\"%<&%> not allowed by itself in line %d\",\n+\t\tgfc_warning_now (0, \"%<&%> not allowed by itself in line %d\",\n \t\t\t\t current_line);\n \t    }\n \t  break;"}, {"sha": "32eea2141be71bbeaa4921b58a03a859ecd47a61", "filename": "gcc/fortran/symbol.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/db30e21cbff7b9b2acd13ab83e25e3bf52f9696f/gcc%2Ffortran%2Fsymbol.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/db30e21cbff7b9b2acd13ab83e25e3bf52f9696f/gcc%2Ffortran%2Fsymbol.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fsymbol.c?ref=db30e21cbff7b9b2acd13ab83e25e3bf52f9696f", "patch": "@@ -3874,7 +3874,7 @@ verify_bind_c_derived_type (gfc_symbol *derived_sym)\n   */\n   if (curr_comp == NULL)\n     {\n-      gfc_warning (\"Derived type %qs with BIND(C) attribute at %L is empty, \"\n+      gfc_warning (0, \"Derived type %qs with BIND(C) attribute at %L is empty, \"\n \t\t   \"and may be inaccessible by the C companion processor\",\n \t\t   derived_sym->name, &(derived_sym->declared_at));\n       derived_sym->ts.is_c_interop = 1;"}, {"sha": "8064d89187097675c3b24ff2e61c2d710517a873", "filename": "gcc/fortran/trans-common.c", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/db30e21cbff7b9b2acd13ab83e25e3bf52f9696f/gcc%2Ffortran%2Ftrans-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/db30e21cbff7b9b2acd13ab83e25e3bf52f9696f/gcc%2Ffortran%2Ftrans-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-common.c?ref=db30e21cbff7b9b2acd13ab83e25e3bf52f9696f", "patch": "@@ -407,7 +407,7 @@ build_common_decl (gfc_common_head *com, tree union_type, bool is_init)\n \t blank common blocks may be of different sizes.  */\n       if (!tree_int_cst_equal (DECL_SIZE_UNIT (decl), size)\n \t  && strcmp (com->name, BLANK_COMMON_NAME))\n-\tgfc_warning (\"Named COMMON block %qs at %L shall be of the \"\n+\tgfc_warning (0, \"Named COMMON block %qs at %L shall be of the \"\n \t\t     \"same size as elsewhere (%lu vs %lu bytes)\", com->name,\n \t\t     &com->where,\n \t\t     (unsigned long) TREE_INT_CST_LOW (size),\n@@ -1146,12 +1146,14 @@ translate_common (gfc_common_head *common, gfc_symbol *var_list)\n \t      if (warn_align_commons)\n \t\t{\n \t\t  if (strcmp (common->name, BLANK_COMMON_NAME))\n-\t\t    gfc_warning (\"Padding of %d bytes required before %qs in \"\n+\t\t    gfc_warning (0,\n+\t\t\t\t \"Padding of %d bytes required before %qs in \"\n \t\t\t\t \"COMMON %qs at %L; reorder elements or use \"\n \t\t\t\t \"-fno-align-commons\", (int)offset,\n \t\t\t\t s->sym->name, common->name, &common->where);\n \t\t  else\n-\t\t    gfc_warning (\"Padding of %d bytes required before %qs in \"\n+\t\t    gfc_warning (0,\n+\t\t\t\t \"Padding of %d bytes required before %qs in \"\n \t\t\t\t \"COMMON at %L; reorder elements or use \"\n \t\t\t\t \"-fno-align-commons\", (int)offset,\n \t\t\t\t s->sym->name, &common->where);"}, {"sha": "764634495220d082c8b9f1355537c5f9b959ba20", "filename": "gcc/fortran/trans-const.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/db30e21cbff7b9b2acd13ab83e25e3bf52f9696f/gcc%2Ffortran%2Ftrans-const.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/db30e21cbff7b9b2acd13ab83e25e3bf52f9696f/gcc%2Ffortran%2Ftrans-const.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-const.c?ref=db30e21cbff7b9b2acd13ab83e25e3bf52f9696f", "patch": "@@ -332,7 +332,7 @@ gfc_conv_constant_to_tree (gfc_expr * expr)\n \t\t\tgfc_build_string_const (expr->representation.length,\n \t\t\t\t\t\texpr->representation.string));\n \t  if (!integer_zerop (tmp) && !integer_onep (tmp))\n-\t    gfc_warning (\"Assigning value other than 0 or 1 to LOGICAL\"\n+\t    gfc_warning (0, \"Assigning value other than 0 or 1 to LOGICAL\"\n \t\t\t \" has undefined result at %L\", &expr->where);\n \t  return fold_convert (gfc_get_logical_type (expr->ts.kind), tmp);\n \t}"}, {"sha": "96e5abd6bed3b0b06d1d22840c3d959034a9b261", "filename": "gcc/fortran/trans-stmt.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/db30e21cbff7b9b2acd13ab83e25e3bf52f9696f/gcc%2Ffortran%2Ftrans-stmt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/db30e21cbff7b9b2acd13ab83e25e3bf52f9696f/gcc%2Ffortran%2Ftrans-stmt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-stmt.c?ref=db30e21cbff7b9b2acd13ab83e25e3bf52f9696f", "patch": "@@ -550,7 +550,8 @@ gfc_trans_return (gfc_code * code)\n       result = gfc_get_fake_result_decl (NULL, 0);\n       if (!result)\n \t{\n-\t  gfc_warning (\"An alternate return at %L without a * dummy argument\",\n+\t  gfc_warning (0,\n+\t\t       \"An alternate return at %L without a * dummy argument\",\n \t\t       &code->expr1->where);\n \t  return gfc_generate_return ();\n \t}"}]}