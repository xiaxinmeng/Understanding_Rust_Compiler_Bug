{"sha": "597cdf4f4354fce6b418f8d628a8a0f5ea778e34", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTk3Y2RmNGY0MzU0ZmNlNmI0MThmOGQ2MjhhOGEwZjVlYTc3OGUzNA==", "commit": {"author": {"name": "Joseph Myers", "email": "joseph@codesourcery.com", "date": "2004-11-25T11:13:38Z"}, "committer": {"name": "Joseph Myers", "email": "jsm28@gcc.gnu.org", "date": "2004-11-25T11:13:38Z"}, "message": "darwin.h (SUBTARGET_OVERRIDE_OPTIONS): Use %qs instead of `%s' in diagnostic.\n\n\t* config/rs6000/darwin.h (SUBTARGET_OVERRIDE_OPTIONS): Use %qs\n\tinstead of `%s' in diagnostic.\n\ncp:\n\t* g++spec.c, lex.c: Avoid ` as left quote in diagnostics.\n\nfortran:\n\t* f95-lang.c, gfortranspec.c, trans-decl.c: Avoid ` as left quote\n\tin diagnostics.\n\njava:\n\t* gjavah.c, jcf-dump.c, jv-scan.c, jvspec.c: Avoid ` as left quote\n\tin diagnostics.\n\nFrom-SVN: r91282", "tree": {"sha": "67160e01dfbb1e6dc24efedebabe3742b5e5cbe4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/67160e01dfbb1e6dc24efedebabe3742b5e5cbe4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/597cdf4f4354fce6b418f8d628a8a0f5ea778e34", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/597cdf4f4354fce6b418f8d628a8a0f5ea778e34", "html_url": "https://github.com/Rust-GCC/gccrs/commit/597cdf4f4354fce6b418f8d628a8a0f5ea778e34", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/597cdf4f4354fce6b418f8d628a8a0f5ea778e34/comments", "author": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cc175e7c89539b0b55ef73c0ba9c7a6e062cc0d4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cc175e7c89539b0b55ef73c0ba9c7a6e062cc0d4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cc175e7c89539b0b55ef73c0ba9c7a6e062cc0d4"}], "stats": {"total": 79, "additions": 49, "deletions": 30}, "files": [{"sha": "d62972baa6085c832f7da97dba8f7e638924b5c6", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/597cdf4f4354fce6b418f8d628a8a0f5ea778e34/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/597cdf4f4354fce6b418f8d628a8a0f5ea778e34/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=597cdf4f4354fce6b418f8d628a8a0f5ea778e34", "patch": "@@ -1,3 +1,8 @@\n+2004-11-25  Joseph S. Myers  <joseph@codesourcery.com>\n+\n+\t* config/rs6000/darwin.h (SUBTARGET_OVERRIDE_OPTIONS): Use %qs\n+\tinstead of `%s' in diagnostic.\n+\n 2004-11-25  Nathan Sidwell  <nathan@codesourcery.com>\n \n \t* basic-block.h (OBSTACK_ALLOC_REG_SET): Adjust."}, {"sha": "64e8ea3ee483892683860d246bfc82e80b775c8e", "filename": "gcc/config/rs6000/darwin.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/597cdf4f4354fce6b418f8d628a8a0f5ea778e34/gcc%2Fconfig%2Frs6000%2Fdarwin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/597cdf4f4354fce6b418f8d628a8a0f5ea778e34/gcc%2Fconfig%2Frs6000%2Fdarwin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Fdarwin.h?ref=597cdf4f4354fce6b418f8d628a8a0f5ea778e34", "patch": "@@ -103,7 +103,7 @@ do {\t\t\t\t\t\t\t\t\t\\\n \twhile (base[-1] != 'm') base--;\t\t\t\t\t\\\n \t\t\t\t\t\t\t\t\t\\\n \tif (*darwin_fix_and_continue_switch != '\\0')\t\t\t\\\n-\t  error (\"invalid option `%s'\", base);\t\t\t\t\\\n+\t  error (\"invalid option %qs\", base);\t\t\t\t\\\n \tdarwin_fix_and_continue = (base[0] != 'n');\t\t\t\\\n       }\t\t\t\t\t\t\t\t\t\\\n   }\t\t\t\t\t\t\t\t\t\\"}, {"sha": "1b89a1d3ba4e2087c170d292648815f4f332c2b6", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/597cdf4f4354fce6b418f8d628a8a0f5ea778e34/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/597cdf4f4354fce6b418f8d628a8a0f5ea778e34/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=597cdf4f4354fce6b418f8d628a8a0f5ea778e34", "patch": "@@ -1,3 +1,7 @@\n+2004-11-25  Joseph S. Myers  <joseph@codesourcery.com>\n+\n+\t* g++spec.c, lex.c: Avoid ` as left quote in diagnostics.\n+\n 2004-11-24  Mark Mitchell  <mark@codesourcery.com>\n \n \tPR c++/17473"}, {"sha": "2210ccc1eac30bebebf52c3869e7adf2cb089ff2", "filename": "gcc/cp/g++spec.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/597cdf4f4354fce6b418f8d628a8a0f5ea778e34/gcc%2Fcp%2Fg%2B%2Bspec.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/597cdf4f4354fce6b418f8d628a8a0f5ea778e34/gcc%2Fcp%2Fg%2B%2Bspec.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fg%2B%2Bspec.c?ref=597cdf4f4354fce6b418f8d628a8a0f5ea778e34", "patch": "@@ -235,7 +235,7 @@ lang_specific_driver (int *in_argc, const char *const **in_argv,\n     }\n \n   if (quote)\n-    fatal (\"argument to `%s' missing\\n\", quote);\n+    fatal (\"argument to '%s' missing\\n\", quote);\n \n   /* If we know we don't have to do anything, bail now.  */\n   if (! added && library <= 0)"}, {"sha": "6074fef9ea10b6ffba422ac6456f3e688a4fcad1", "filename": "gcc/cp/lex.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/597cdf4f4354fce6b418f8d628a8a0f5ea778e34/gcc%2Fcp%2Flex.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/597cdf4f4354fce6b418f8d628a8a0f5ea778e34/gcc%2Fcp%2Flex.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Flex.c?ref=597cdf4f4354fce6b418f8d628a8a0f5ea778e34", "patch": "@@ -616,8 +616,8 @@ unqualified_fn_lookup_error (tree name)\n \t  static bool hint;\n \t  if (!hint)\n \t    {\n-\t      error (\"(if you use `-fpermissive', G++ will accept your code, \"\n-\t\t     \"but allowing the use of an undeclared name is \"\n+\t      error (\"(if you use %<-fpermissive%>, G++ will accept your \"\n+\t\t     \"code, but allowing the use of an undeclared name is \"\n \t\t     \"deprecated)\");\n \t      hint = true;\n \t    }"}, {"sha": "967cc47d8e92f8273266f729073bd5eb0c865e6c", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/597cdf4f4354fce6b418f8d628a8a0f5ea778e34/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/597cdf4f4354fce6b418f8d628a8a0f5ea778e34/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=597cdf4f4354fce6b418f8d628a8a0f5ea778e34", "patch": "@@ -1,3 +1,8 @@\n+2004-11-25  Joseph S. Myers  <joseph@codesourcery.com>\n+\n+\t* f95-lang.c, gfortranspec.c, trans-decl.c: Avoid ` as left quote\n+\tin diagnostics.\n+\n 2004-11-24  Steven Bosscher  <stevenb@suse.de>\n \n \t* options.c (gfc_post_options): Don't clear flag_inline_functions."}, {"sha": "f32b786b1610226a435bcdfce27fb3ec50350108", "filename": "gcc/fortran/f95-lang.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/597cdf4f4354fce6b418f8d628a8a0f5ea778e34/gcc%2Ffortran%2Ff95-lang.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/597cdf4f4354fce6b418f8d628a8a0f5ea778e34/gcc%2Ffortran%2Ff95-lang.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ff95-lang.c?ref=597cdf4f4354fce6b418f8d628a8a0f5ea778e34", "patch": "@@ -620,18 +620,18 @@ gfc_mark_addressable (tree exp)\n \t    if (TREE_PUBLIC (x))\n \t      {\n \t\terror\n-\t\t  (\"global register variable `%s' used in nested function\",\n+\t\t  (\"global register variable %qs used in nested function\",\n \t\t   IDENTIFIER_POINTER (DECL_NAME (x)));\n \t\treturn false;\n \t      }\n-\t    pedwarn (\"register variable `%s' used in nested function\",\n+\t    pedwarn (\"register variable %qs used in nested function\",\n \t\t     IDENTIFIER_POINTER (DECL_NAME (x)));\n \t  }\n \telse if (DECL_REGISTER (x) && !TREE_ADDRESSABLE (x))\n \t  {\n \t    if (TREE_PUBLIC (x))\n \t      {\n-\t\terror (\"address of global register variable `%s' requested\",\n+\t\terror (\"address of global register variable %qs requested\",\n \t\t       IDENTIFIER_POINTER (DECL_NAME (x)));\n \t\treturn true;\n \t      }\n@@ -649,7 +649,7 @@ gfc_mark_addressable (tree exp)\n \t      }\n #endif\n \n-\t    pedwarn (\"address of register variable `%s' requested\",\n+\t    pedwarn (\"address of register variable %qs requested\",\n \t\t     IDENTIFIER_POINTER (DECL_NAME (x)));\n \t  }\n "}, {"sha": "573d3232c0b0e8a4244117faf2b1f5efbea484b3", "filename": "gcc/fortran/gfortranspec.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/597cdf4f4354fce6b418f8d628a8a0f5ea778e34/gcc%2Ffortran%2Fgfortranspec.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/597cdf4f4354fce6b418f8d628a8a0f5ea778e34/gcc%2Ffortran%2Fgfortranspec.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fgfortranspec.c?ref=597cdf4f4354fce6b418f8d628a8a0f5ea778e34", "patch": "@@ -228,7 +228,7 @@ append_arg (const char *arg)\n     }\n \n   if (g77_newargc == newargsize)\n-    fatal (\"overflowed output arg list for `%s'\", arg);\n+    fatal (\"overflowed output arg list for '%s'\", arg);\n \n   g77_newargv[g77_newargc++] = arg;\n }\n@@ -372,7 +372,7 @@ For more information about these matters, see the file named COPYING\\n\\\n       if (i + skip < argc)\n \ti += skip;\n       else\n-\tfatal (\"argument to `%s' missing\", argv[i]);\n+\tfatal (\"argument to '%s' missing\", argv[i]);\n     }\n \n   if ((n_outfiles != 0) && (n_infiles == 0))"}, {"sha": "2f16acc19da1cf56488628acb95d858d2450c282", "filename": "gcc/fortran/trans-decl.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/597cdf4f4354fce6b418f8d628a8a0f5ea778e34/gcc%2Ffortran%2Ftrans-decl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/597cdf4f4354fce6b418f8d628a8a0f5ea778e34/gcc%2Ffortran%2Ftrans-decl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-decl.c?ref=597cdf4f4354fce6b418f8d628a8a0f5ea778e34", "patch": "@@ -2091,12 +2091,12 @@ generate_local_decl (gfc_symbol * sym)\n       if (sym->attr.referenced)\n         gfc_get_symbol_decl (sym);\n       else if (sym->attr.dummy && warn_unused_parameter)\n-            warning (\"unused parameter `%s'\", sym->name);\n+            warning (\"unused parameter %qs\", sym->name);\n       /* Warn for unused variables, but not if they're inside a common\n \t block or are use-associated.  */\n       else if (warn_unused_variable\n \t       && !(sym->attr.in_common || sym->attr.use_assoc))\n-\twarning (\"unused variable `%s'\", sym->name); \n+\twarning (\"unused variable %qs\", sym->name); \n     }\n }\n "}, {"sha": "ce06a29633e6d9b31b6b80df06e5f0164f2ad289", "filename": "gcc/java/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/597cdf4f4354fce6b418f8d628a8a0f5ea778e34/gcc%2Fjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/597cdf4f4354fce6b418f8d628a8a0f5ea778e34/gcc%2Fjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2FChangeLog?ref=597cdf4f4354fce6b418f8d628a8a0f5ea778e34", "patch": "@@ -1,3 +1,8 @@\n+2004-11-25  Joseph S. Myers  <joseph@codesourcery.com>\n+\n+\t* gjavah.c, jcf-dump.c, jv-scan.c, jvspec.c: Avoid ` as left quote\n+\tin diagnostics.\n+\n 2004-11-24  Richard Henderson  <rth@redhat.com>\n \n \t* verify-glue.c (vfy_init_name, vfy_clinit_name, vfy_object_type,"}, {"sha": "1f25ce62610c19251670ec08fee492a27f705d9b", "filename": "gcc/java/gjavah.c", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/597cdf4f4354fce6b418f8d628a8a0f5ea778e34/gcc%2Fjava%2Fgjavah.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/597cdf4f4354fce6b418f8d628a8a0f5ea778e34/gcc%2Fjava%2Fgjavah.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fgjavah.c?ref=597cdf4f4354fce6b418f8d628a8a0f5ea778e34", "patch": "@@ -888,7 +888,7 @@ print_method_info (FILE *stream, JCF* jcf, int name_index, int sig_index,\n \t{\n \t  /* FIXME: i18n bug here.  Order of prints should not be\n \t     fixed.  */\n-\t  fprintf (stderr, _(\"ignored method `\"));\n+\t  fprintf (stderr, _(\"ignored method '\"));\n \t  jcf_print_utf8 (stderr, str, length);\n \t  fprintf (stderr, _(\"' marked virtual\\n\"));\n \t  found_error = 1;\n@@ -1471,7 +1471,7 @@ print_c_decl (FILE* stream, JCF* jcf, int name_index, int signature_index,\n \t  next = decode_signature_piece (stream, str, limit, &need_space);\n \t  if (! next)\n \t    {\n-\t      error (\"unparseable signature: `%s'\", str0);\n+\t      error (\"unparseable signature: '%s'\", str0);\n \t      return;\n \t    }\n \t}\n@@ -1573,7 +1573,7 @@ print_full_cxx_name (FILE* stream, JCF* jcf, int name_index,\n \t  next = decode_signature_piece (stream, str, limit, &need_space);\n \t  if (! next)\n \t    {\n-\t      error (\"unparseable signature: `%s'\", str0);\n+\t      error (\"unparseable signature: '%s'\", str0);\n \t      return;\n \t    }\n \t  \n@@ -1648,7 +1648,7 @@ print_stub_or_jni (FILE* stream, JCF* jcf, int name_index,\n \t  next = decode_signature_piece (stream, str, limit, &need_space);\n \t  if (! next)\n \t    {\n-\t      error (\"unparseable signature: `%s'\", str0);\n+\t      error (\"unparseable signature: '%s'\", str0);\n \t      return;\n \t    }\n \t}\n@@ -2319,7 +2319,7 @@ static const struct option options[] =\n static void\n usage (void)\n {\n-  fprintf (stderr, _(\"Try `gcjh --help' for more information.\\n\"));\n+  fprintf (stderr, _(\"Try 'gcjh --help' for more information.\\n\"));\n   exit (1);\n }\n \n@@ -2333,7 +2333,7 @@ help (void)\n   printf (\"\\n\");\n   printf (_(\"  -add TEXT               Insert TEXT into class body\\n\"));\n   printf (_(\"  -append TEXT            Insert TEXT after class declaration\\n\"));\n-  printf (_(\"  -friend TEXT            Insert TEXT as `friend' declaration\\n\"));\n+  printf (_(\"  -friend TEXT            Insert TEXT as 'friend' declaration\\n\"));\n   printf (_(\"  -prepend TEXT           Insert TEXT before start of class\\n\"));\n   printf (\"\\n\");\n   printf (_(\"  --classpath PATH        Set path to find .class files\\n\"));\n@@ -2477,7 +2477,7 @@ main (int argc, char** argv)\n \t  break;\n \n \tcase OPT_MG:\n-\t  error (\"`-MG' option is unimplemented\");\n+\t  error (\"'-MG' option is unimplemented\");\n \t  exit (1);\n \n \tcase OPT_MD:"}, {"sha": "93d640f05bc840e9ad90b4e46da5bf6121218ccd", "filename": "gcc/java/jcf-dump.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/597cdf4f4354fce6b418f8d628a8a0f5ea778e34/gcc%2Fjava%2Fjcf-dump.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/597cdf4f4354fce6b418f8d628a8a0f5ea778e34/gcc%2Fjava%2Fjcf-dump.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fjcf-dump.c?ref=597cdf4f4354fce6b418f8d628a8a0f5ea778e34", "patch": "@@ -882,7 +882,7 @@ static const struct option options[] =\n static void\n usage (void)\n {\n-  fprintf (stderr, _(\"Try `jcf-dump --help' for more information.\\n\"));\n+  fprintf (stderr, _(\"Try 'jcf-dump --help' for more information.\\n\"));\n   exit (1);\n }\n \n@@ -892,7 +892,7 @@ help (void)\n   printf (_(\"Usage: jcf-dump [OPTION]... CLASS...\\n\\n\"));\n   printf (_(\"Display contents of a class file in readable form.\\n\\n\"));\n   printf (_(\"  -c                      Disassemble method bodies\\n\"));\n-  printf (_(\"  --javap                 Generate output in `javap' format\\n\"));\n+  printf (_(\"  --javap                 Generate output in 'javap' format\\n\"));\n   printf (\"\\n\");\n   printf (_(\"  --classpath PATH        Set path to find .class files\\n\"));\n   printf (_(\"  -IDIR                   Append directory to class path\\n\"));"}, {"sha": "3c55d5961563b2f81ccca353631a94bee3c11b82", "filename": "gcc/java/jv-scan.c", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/597cdf4f4354fce6b418f8d628a8a0f5ea778e34/gcc%2Fjava%2Fjv-scan.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/597cdf4f4354fce6b418f8d628a8a0f5ea778e34/gcc%2Fjava%2Fjv-scan.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fjv-scan.c?ref=597cdf4f4354fce6b418f8d628a8a0f5ea778e34", "patch": "@@ -96,7 +96,7 @@ static const struct option options[] =\n static void\n usage (void)\n {\n-  fprintf (stderr, _(\"Try `jv-scan --help' for more information.\\n\"));\n+  fprintf (stderr, _(\"Try 'jv-scan --help' for more information.\\n\"));\n   exit (1);\n }\n \n@@ -108,7 +108,7 @@ help (void)\n   printf (_(\"  --no-assert             Don't recognize the assert keyword\\n\"));\n   printf (_(\"  --complexity            Print cyclomatic complexity of input file\\n\"));\n   printf (_(\"  --encoding NAME         Specify encoding of input file\\n\"));\n-  printf (_(\"  --print-main            Print name of class containing `main'\\n\"));\n+  printf (_(\"  --print-main            Print name of class containing 'main'\\n\"));\n   printf (_(\"  --list-class            List all classes defined in file\\n\"));\n   printf (_(\"  --list-filename         Print input filename when listing class names\\n\"));\n   printf (_(\"  -o FILE                 Set output file name\\n\"));\n@@ -210,10 +210,10 @@ main (int argc, char **argv)\n   /* Check on bad usage */\n   if (flag_find_main + flag_dump_class + flag_complexity > 1)\n     fatal_error\n-      (\"only one of `--print-main', `--list-class', and `--complexity' allowed\");\n+      (\"only one of '--print-main', '--list-class', and '--complexity' allowed\");\n \n   if (output_file && !(out = fopen (output_file, \"w\")))\n-    fatal_error (\"can't open output file `%s'\", output_file);\n+    fatal_error (\"can't open output file '%s'\", output_file);\n \n   ft = ftell (out);\n \n@@ -248,7 +248,7 @@ main (int argc, char **argv)\n \t    reset_report ();\n \t  }\n \telse\n-\t  fatal_error (\"file not found `%s'\", argv [i]);\n+\t  fatal_error (\"file not found '%s'\", argv [i]);\n       }\n \n   /* Flush and close */"}, {"sha": "479916b7d659fba75108028a731cff18b48b063c", "filename": "gcc/java/jvspec.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/597cdf4f4354fce6b418f8d628a8a0f5ea778e34/gcc%2Fjava%2Fjvspec.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/597cdf4f4354fce6b418f8d628a8a0f5ea778e34/gcc%2Fjava%2Fjvspec.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fjvspec.c?ref=597cdf4f4354fce6b418f8d628a8a0f5ea778e34", "patch": "@@ -414,13 +414,13 @@ lang_specific_driver (int *in_argc, const char *const **in_argv,\n     }\n \n   if (quote)\n-    fatal (\"argument to `%s' missing\\n\", quote);\n+    fatal (\"argument to '%s' missing\\n\", quote);\n \n   if (saw_D && ! main_class_name)\n-    fatal (\"can't specify `-D' without `--main'\\n\");\n+    fatal (\"can't specify '-D' without '--main'\\n\");\n \n   if (main_class_name && ! verify_class_name (main_class_name))\n-    fatal (\"`%s' is not a valid class name\", main_class_name);\n+    fatal (\"'%s' is not a valid class name\", main_class_name);\n \n   num_args = argc + added;\n   if (saw_resource)\n@@ -531,7 +531,7 @@ lang_specific_driver (int *in_argc, const char *const **in_argv,\n       if (strncmp (argv[i], \"-fmain=\", 7) == 0)\n \t{\n \t  if (! will_link)\n-\t    fatal (\"cannot specify `main' class when not linking\");\n+\t    fatal (\"cannot specify 'main' class when not linking\");\n \t  --j;\n \t  continue;\n \t}"}]}