{"sha": "1a408d072445bf265b5253db191c6a8bb8cc241d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWE0MDhkMDcyNDQ1YmYyNjViNTI1M2RiMTkxYzZhOGJiOGNjMjQxZA==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@yorick.cygnus.com", "date": "1998-09-04T01:43:58Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "1998-09-04T01:43:58Z"}, "message": "decl2.c (import_export_vtable): Always make artificials comdat.\n\n\t* decl2.c (import_export_vtable): Always make artificials comdat.\n\t(import_export_decl): Likewise.\n\t* pt.c (mark_decl_instantiated): Likewise.\n\nFrom-SVN: r22230", "tree": {"sha": "099820fe5676e2fb643da24199144057dd74fa85", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/099820fe5676e2fb643da24199144057dd74fa85"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1a408d072445bf265b5253db191c6a8bb8cc241d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1a408d072445bf265b5253db191c6a8bb8cc241d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1a408d072445bf265b5253db191c6a8bb8cc241d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1a408d072445bf265b5253db191c6a8bb8cc241d/comments", "author": null, "committer": null, "parents": [{"sha": "71827aaacc89337bdbcb24e8bc6998954d5a2483", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/71827aaacc89337bdbcb24e8bc6998954d5a2483", "html_url": "https://github.com/Rust-GCC/gccrs/commit/71827aaacc89337bdbcb24e8bc6998954d5a2483"}], "stats": {"total": 31, "additions": 21, "deletions": 10}, "files": [{"sha": "656af650508fe986371622c157ed449c769294de", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a408d072445bf265b5253db191c6a8bb8cc241d/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a408d072445bf265b5253db191c6a8bb8cc241d/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=1a408d072445bf265b5253db191c6a8bb8cc241d", "patch": "@@ -1,3 +1,9 @@\n+1998-09-03  Jason Merrill  <jason@yorick.cygnus.com>\n+\n+\t* decl2.c (import_export_vtable): Always make artificials comdat.\n+\t(import_export_decl): Likewise.\n+\t* pt.c (mark_decl_instantiated): Likewise.\n+\n 1998-09-03  Mark Mitchell  <mark@markmitchell.com>\n \n \t* cp-tree.h (finish_globally_qualified_member_call_expr):"}, {"sha": "9cb7d5b2c2682129d015ebcabe858d2f003763d0", "filename": "gcc/cp/NEWS", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a408d072445bf265b5253db191c6a8bb8cc241d/gcc%2Fcp%2FNEWS", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a408d072445bf265b5253db191c6a8bb8cc241d/gcc%2Fcp%2FNEWS", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FNEWS?ref=1a408d072445bf265b5253db191c6a8bb8cc241d", "patch": "@@ -1,4 +1,4 @@\n-*** Changes since EGCS 1.0:\n+*** Changes in EGCS 1.1:\n \n * Namespaces are fully supported.  The library has not yet been converted \n   to use namespace std, however, and the old std-faking code is still on by"}, {"sha": "c01bda29c432cae2b6b492f86ebeb25654c9f74c", "filename": "gcc/cp/decl2.c", "status": "modified", "additions": 10, "deletions": 8, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a408d072445bf265b5253db191c6a8bb8cc241d/gcc%2Fcp%2Fdecl2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a408d072445bf265b5253db191c6a8bb8cc241d/gcc%2Fcp%2Fdecl2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl2.c?ref=1a408d072445bf265b5253db191c6a8bb8cc241d", "patch": "@@ -2555,10 +2555,9 @@ import_export_vtable (decl, type, final)\n       DECL_EXTERNAL (decl) = ! CLASSTYPE_VTABLE_NEEDS_WRITING (type);\n       DECL_INTERFACE_KNOWN (decl) = 1;\n \n-      /* For WIN32 we also want to put explicit instantiations in\n-\t linkonce sections.  */\n-      if (CLASSTYPE_EXPLICIT_INSTANTIATION (type))\n-\tmaybe_make_one_only (decl);\n+      /* Always make vtables weak.  */\n+      if (flag_weak)\n+\tcomdat_linkage (decl);\n     }\n   else\n     {\n@@ -2873,6 +2872,10 @@ import_export_decl (decl)\n \t  DECL_NOT_REALLY_EXTERN (decl)\n \t    = ! (CLASSTYPE_INTERFACE_ONLY (ctype)\n \t\t || (DECL_THIS_INLINE (decl) && ! flag_implement_inlines));\n+\n+\t  /* Always make artificials weak.  */\n+\t  if (DECL_ARTIFICIAL (decl) && flag_weak)\n+\t    comdat_linkage (decl);\n \t}\n       else\n \tcomdat_linkage (decl);\n@@ -2894,10 +2897,9 @@ import_export_decl (decl)\n \t    = ! (CLASSTYPE_INTERFACE_ONLY (ctype)\n \t\t || (DECL_THIS_INLINE (decl) && ! flag_implement_inlines));\n \n-\t  /* For WIN32 we also want to put explicit instantiations in\n-\t     linkonce sections.  */\n-\t  if (CLASSTYPE_EXPLICIT_INSTANTIATION (ctype))\n-\t    maybe_make_one_only (decl);\n+\t  /* Always make artificials weak.  */\n+\t  if (flag_weak)\n+\t    comdat_linkage (decl);\n \t}\n       else if (TYPE_BUILT_IN (ctype) && ctype == TYPE_MAIN_VARIANT (ctype))\n \tDECL_NOT_REALLY_EXTERN (decl) = 0;"}, {"sha": "d2251e8282fd8af3a257d07a60db0a8f37d64b84", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a408d072445bf265b5253db191c6a8bb8cc241d/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a408d072445bf265b5253db191c6a8bb8cc241d/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=1a408d072445bf265b5253db191c6a8bb8cc241d", "patch": "@@ -7202,9 +7202,12 @@ mark_decl_instantiated (result, extern_p)\n       DECL_INTERFACE_KNOWN (result) = 1;\n       DECL_NOT_REALLY_EXTERN (result) = 1;\n \n+      /* Always make artificials weak.  */\n+      if (DECL_ARTIFICIAL (result) && flag_weak)\n+\tcomdat_linkage (result);\n       /* For WIN32 we also want to put explicit instantiations in\n \t linkonce sections.  */\n-      if (TREE_PUBLIC (result))\n+      else if (TREE_PUBLIC (result))\n \tmaybe_make_one_only (result);\n     }\n   else if (TREE_CODE (result) == FUNCTION_DECL)"}]}