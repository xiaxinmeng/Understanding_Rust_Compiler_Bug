{"sha": "d626200a86646ffd7997d5eb50f5754781a0e6bf", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDYyNjIwMGE4NjY0NmZmZDc5OTdkNWViNTBmNTc1NDc4MWEwZTZiZg==", "commit": {"author": {"name": "Jeffrey A Law", "email": "law@cygnus.com", "date": "1999-03-09T01:09:52Z"}, "committer": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "1999-03-09T01:09:52Z"}, "message": "i386.md (zero_extendhisi2): Split into an expander and anonymous pattern.\n\n        * i386.md (zero_extendhisi2): Split into an expander and anonymous\n        pattern.  Add new anonymous pattern for use when optimizing for\n        size or for the PPro.\n        (zero_extendqihi2, zero_extendqisi2): Likewise.\n\nFrom-SVN: r25650", "tree": {"sha": "b2df591ecc5bcbff690915a28ca58a8ca9283688", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b2df591ecc5bcbff690915a28ca58a8ca9283688"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d626200a86646ffd7997d5eb50f5754781a0e6bf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d626200a86646ffd7997d5eb50f5754781a0e6bf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d626200a86646ffd7997d5eb50f5754781a0e6bf", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d626200a86646ffd7997d5eb50f5754781a0e6bf/comments", "author": null, "committer": null, "parents": [{"sha": "4abcd5db62d810f681a13131e93efc1dfc2e58e2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4abcd5db62d810f681a13131e93efc1dfc2e58e2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4abcd5db62d810f681a13131e93efc1dfc2e58e2"}], "stats": {"total": 59, "additions": 53, "deletions": 6}, "files": [{"sha": "b8cdfdfc1f6d28ce60fc8841c32773288d5f3b3c", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d626200a86646ffd7997d5eb50f5754781a0e6bf/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d626200a86646ffd7997d5eb50f5754781a0e6bf/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=d626200a86646ffd7997d5eb50f5754781a0e6bf", "patch": "@@ -1,3 +1,10 @@\n+Tue Mar  9 02:08:17 1999  Jeffrey A Law  (law@cygnus.com)\n+\n+\t* i386.md (zero_extendhisi2): Split into an expander and anonymous\n+\tpattern.  Add new anonymous pattern for use when optimizing for\n+\tsize or for the PPro.\n+\t(zero_extendqihi2, zero_extendqisi2): Likewise.\n+\n Mon Mar  8 23:43:47 1999  Richard Henderson  <rth@cygnus.com>\n \n \t* haifa-sched.c (sched_analyze_1): Fix last change -- add clobber"}, {"sha": "8c3f4153dbc37f8bcfeecdcea8e44e3f70f7d262", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 46, "deletions": 6, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d626200a86646ffd7997d5eb50f5754781a0e6bf/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d626200a86646ffd7997d5eb50f5754781a0e6bf/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=d626200a86646ffd7997d5eb50f5754781a0e6bf", "patch": "@@ -1789,10 +1789,25 @@\n ;;- zero extension instructions\n ;; See comments by `andsi' for when andl is faster than movzx.\n \n-(define_insn \"zero_extendhisi2\"\n+(define_expand \"zero_extendhisi2\"\n+  [(set (match_operand:SI 0 \"register_operand\" \"\")\n+\t(zero_extend:SI (match_operand:HI 1 \"nonimmediate_operand\" \"\")))]\n+  \"\"\n+  \"\")\n+\n+;; When optimizing for the PPro/PII or code size, always use movzwl.\n+;; We want to use a different pattern so we can use different constraints\n+;; than the generic pattern.\n+(define_insn \"\"\n+  [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n+\t(zero_extend:SI (match_operand:HI 1 \"nonimmediate_operand\" \"rm\")))]\n+  \"(optimize_size || (int)ix86_cpu == (int)PROCESSOR_PENTIUMPRO)\"\n+  \"* return AS2 (movz%W0%L0,%1,%0);\")\n+\n+(define_insn \"\"\n   [(set (match_operand:SI 0 \"register_operand\" \"=r,&r,?r\")\n \t(zero_extend:SI (match_operand:HI 1 \"nonimmediate_operand\" \"0,rm,rm\")))]\n-  \"\"\n+  \"! (optimize_size || (int)ix86_cpu == (int)PROCESSOR_PENTIUMPRO)\"\n   \"*\n   {\n   rtx xops[2];\n@@ -1853,10 +1868,23 @@\n \t       (const_int 65535)))]\n   \"operands[2] = gen_rtx_REG (HImode, true_regnum (operands[0]));\")\n \n-(define_insn \"zero_extendqihi2\"\n+(define_expand \"zero_extendqihi2\"\n+  [(set (match_operand:HI 0 \"register_operand\" \"\")\n+\t(zero_extend:HI (match_operand:QI 1 \"nonimmediate_operand\" \"\")))]\n+  \"\"\n+  \"\")\n+\n+(define_insn \"\"\n+  [(set (match_operand:HI 0 \"register_operand\" \"=r\")\n+\t(zero_extend:HI (match_operand:QI 1 \"nonimmediate_operand\" \"qm\")))]\n+  \"optimize_size || (int)ix86_cpu == (int)PROCESSOR_PENTIUMPRO\"\n+\n+  \"*  return AS2 (movz%B0%W0,%1,%0);\")\n+\n+(define_insn \"\"\n   [(set (match_operand:HI 0 \"register_operand\" \"=q,&q,?r\")\n \t(zero_extend:HI (match_operand:QI 1 \"nonimmediate_operand\" \"0,qm,qm\")))]\n-  \"\"\n+  \"! (optimize_size || (int)ix86_cpu == (int)PROCESSOR_PENTIUMPRO)\"\n   \"*\n   {\n   rtx xops[2];\n@@ -1934,10 +1962,22 @@\n     FAIL;\n   operands[2] = gen_rtx_REG (HImode, REGNO (operands[1]));\")\n \n-(define_insn \"zero_extendqisi2\"\n+(define_expand \"zero_extendqisi2\"\n+  [(set (match_operand:SI 0 \"register_operand\" \"\")\n+\t(zero_extend:SI (match_operand:QI 1 \"nonimmediate_operand\" \"\")))]\n+  \"\"\n+  \"\")\n+\n+(define_insn \"\"\n+  [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n+\t(zero_extend:SI (match_operand:QI 1 \"nonimmediate_operand\" \"qm\")))]\n+  \"optimize_size || (int)ix86_cpu == (int)PROCESSOR_PENTIUMPRO\"\n+  \"* return AS2 (movz%B0%L0,%1,%0);\")\n+\n+(define_insn \"\"\n   [(set (match_operand:SI 0 \"register_operand\" \"=q,&q,?r\")\n \t(zero_extend:SI (match_operand:QI 1 \"nonimmediate_operand\" \"0,qm,qm\")))]\n-  \"\"\n+  \"! (optimize_size || (int)ix86_cpu == (int)PROCESSOR_PENTIUMPRO)\"\n   \"*\n   {\n   rtx xops[2];"}]}