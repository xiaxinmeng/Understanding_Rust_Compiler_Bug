{"sha": "5391cf07be7117c2df605acbfad31a4f9c6b7a65", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTM5MWNmMDdiZTcxMTdjMmRmNjA1YWNiZmFkMzFhNGY5YzZiN2E2NQ==", "commit": {"author": {"name": "Christophe Lyon", "email": "christophe.lyon@linaro.org", "date": "2020-11-25T11:08:48Z"}, "committer": {"name": "Christophe Lyon", "email": "christophe.lyon@linaro.org", "date": "2020-12-14T10:47:29Z"}, "message": "arm: Auto-vectorization for MVE: vbic\n\nThis patch enables MVE vbic instructions for auto-vectorization.  MVE\nvbicq insns in mve.md are modified to use 'and not' instead of unspec\nexpression.\n\n2020-12-11  Christophe Lyon  <christophe.lyon@linaro.org>\n\n\tgcc/\n\t* config/arm/iterators.md (supf): Remove VBICQ_S and VBICQ_U.\n\t(VBICQ): Remove.\n\t* config/arm/mve.md (mve_vbicq_u<mode>): New entry for vbic\n\tinstruction using expression and not.\n\t(mve_vbicq_s<mode>): New expander.\n\t(mve_vbicq_f<mode>): Replace use of unspec by 'and not'.\n\t* config/arm/unspecs.md (VBICQ_S, VBICQ_U, VBICQ_F): Remove.\n\n\tgcc/testsuite/\n\t* gcc.target/arm/simd/mve-vbic.c: Add tests for vbic.", "tree": {"sha": "b4fbdcb16763006118f5bd81565e6013a0c59484", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b4fbdcb16763006118f5bd81565e6013a0c59484"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5391cf07be7117c2df605acbfad31a4f9c6b7a65", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5391cf07be7117c2df605acbfad31a4f9c6b7a65", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5391cf07be7117c2df605acbfad31a4f9c6b7a65", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5391cf07be7117c2df605acbfad31a4f9c6b7a65/comments", "author": null, "committer": null, "parents": [{"sha": "434fb3b6cc7d4a8d9d07c7e0052a89093953c8c0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/434fb3b6cc7d4a8d9d07c7e0052a89093953c8c0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/434fb3b6cc7d4a8d9d07c7e0052a89093953c8c0"}], "stats": {"total": 94, "additions": 81, "deletions": 13}, "files": [{"sha": "26351e0ed8e0e8fde2427fc450576e41581ddb0a", "filename": "gcc/config/arm/iterators.md", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5391cf07be7117c2df605acbfad31a4f9c6b7a65/gcc%2Fconfig%2Farm%2Fiterators.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5391cf07be7117c2df605acbfad31a4f9c6b7a65/gcc%2Fconfig%2Farm%2Fiterators.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Fiterators.md?ref=5391cf07be7117c2df605acbfad31a4f9c6b7a65", "patch": "@@ -1232,7 +1232,7 @@\n \t\t       (VADDLVQ_P_U \"u\") (VCMPNEQ_U \"u\") (VCMPNEQ_S \"s\")\n \t\t       (VABDQ_M_S \"s\") (VABDQ_M_U \"u\") (VABDQ_S \"s\")\n \t\t       (VABDQ_U \"u\") (VADDQ_N_S \"s\") (VADDQ_N_U \"u\")\n-\t\t       (VADDVQ_P_S \"s\")\t(VADDVQ_P_U \"u\") (VBICQ_S \"s\") (VBICQ_U \"u\")\n+\t\t       (VADDVQ_P_S \"s\")\t(VADDVQ_P_U \"u\")\n \t\t       (VBRSRQ_N_S \"s\") (VBRSRQ_N_U \"u\") (VCADDQ_ROT270_S \"s\")\n \t\t       (VCADDQ_ROT270_U \"u\") (VCADDQ_ROT90_S \"s\")\n \t\t       (VCMPEQQ_S \"s\") (VCMPEQQ_U \"u\") (VCADDQ_ROT90_U \"u\")\n@@ -1500,7 +1500,6 @@\n (define_int_iterator VADDQ_N [VADDQ_N_S VADDQ_N_U])\n (define_int_iterator VADDVAQ [VADDVAQ_S VADDVAQ_U])\n (define_int_iterator VADDVQ_P [VADDVQ_P_U VADDVQ_P_S])\n-(define_int_iterator VBICQ [VBICQ_S VBICQ_U])\n (define_int_iterator VBRSRQ_N [VBRSRQ_N_U VBRSRQ_N_S])\n (define_int_iterator VCADDQ_ROT270 [VCADDQ_ROT270_S VCADDQ_ROT270_U])\n (define_int_iterator VCADDQ_ROT90 [VCADDQ_ROT90_U VCADDQ_ROT90_S])"}, {"sha": "0505537e2062bdacb97e339c81304ff5411d8164", "filename": "gcc/config/arm/mve.md", "status": "modified", "additions": 15, "deletions": 8, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5391cf07be7117c2df605acbfad31a4f9c6b7a65/gcc%2Fconfig%2Farm%2Fmve.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5391cf07be7117c2df605acbfad31a4f9c6b7a65/gcc%2Fconfig%2Farm%2Fmve.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Fmve.md?ref=5391cf07be7117c2df605acbfad31a4f9c6b7a65", "patch": "@@ -922,18 +922,26 @@\n ;;\n ;; [vbicq_s, vbicq_u])\n ;;\n-(define_insn \"mve_vbicq_<supf><mode>\"\n+(define_insn \"mve_vbicq_u<mode>\"\n   [\n    (set (match_operand:MVE_2 0 \"s_register_operand\" \"=w\")\n-\t(unspec:MVE_2 [(match_operand:MVE_2 1 \"s_register_operand\" \"w\")\n-\t\t       (match_operand:MVE_2 2 \"s_register_operand\" \"w\")]\n-\t VBICQ))\n+\t(and:MVE_2 (not:MVE_2 (match_operand:MVE_2 2 \"s_register_operand\" \"w\"))\n+\t\t\t      (match_operand:MVE_2 1 \"s_register_operand\" \"w\")))\n   ]\n   \"TARGET_HAVE_MVE\"\n-  \"vbic %q0, %q1, %q2\"\n+  \"vbic\\t%q0, %q1, %q2\"\n   [(set_attr \"type\" \"mve_move\")\n ])\n \n+(define_expand \"mve_vbicq_s<mode>\"\n+  [\n+   (set (match_operand:MVE_2 0 \"s_register_operand\")\n+\t(and:MVE_2 (not:MVE_2 (match_operand:MVE_2 2 \"s_register_operand\"))\n+\t\t   (match_operand:MVE_2 1 \"s_register_operand\")))\n+  ]\n+  \"TARGET_HAVE_MVE\"\n+)\n+\n ;;\n ;; [vbrsrq_n_u, vbrsrq_n_s])\n ;;\n@@ -2066,9 +2074,8 @@\n (define_insn \"mve_vbicq_f<mode>\"\n   [\n    (set (match_operand:MVE_0 0 \"s_register_operand\" \"=w\")\n-\t(unspec:MVE_0 [(match_operand:MVE_0 1 \"s_register_operand\" \"w\")\n-\t\t       (match_operand:MVE_0 2 \"s_register_operand\" \"w\")]\n-\t VBICQ_F))\n+\t(and:MVE_0 (not:MVE_0 (match_operand:MVE_0 1 \"s_register_operand\" \"w\"))\n+\t\t\t      (match_operand:MVE_0 2 \"s_register_operand\" \"w\")))\n   ]\n   \"TARGET_HAVE_MVE && TARGET_HAVE_MVE_FLOAT\"\n   \"vbic %q0, %q1, %q2\""}, {"sha": "8a4389a57c363e7264af5774b0c1011a6d083938", "filename": "gcc/config/arm/unspecs.md", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5391cf07be7117c2df605acbfad31a4f9c6b7a65/gcc%2Fconfig%2Farm%2Funspecs.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5391cf07be7117c2df605acbfad31a4f9c6b7a65/gcc%2Fconfig%2Farm%2Funspecs.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Funspecs.md?ref=5391cf07be7117c2df605acbfad31a4f9c6b7a65", "patch": "@@ -601,7 +601,6 @@\n   VADDQ_N_S\n   VADDVAQ_S\n   VADDVQ_P_S\n-  VBICQ_S\n   VBRSRQ_N_S\n   VCADDQ_ROT270_S\n   VCADDQ_ROT90_S\n@@ -645,7 +644,6 @@\n   VADDQ_N_U\n   VADDVAQ_U\n   VADDVQ_P_U\n-  VBICQ_U\n   VBRSRQ_N_U\n   VCADDQ_ROT270_U\n   VCADDQ_ROT90_U\n@@ -715,7 +713,6 @@\n   VABDQ_M_U\n   VABDQ_F\n   VADDQ_N_F\n-  VBICQ_F\n   VCADDQ_ROT270_F\n   VCADDQ_ROT90_F\n   VCMPEQQ_F"}, {"sha": "c9a64c671bef94d1486cd7c97296822619758de8", "filename": "gcc/testsuite/gcc.target/arm/simd/mve-vbic.c", "status": "added", "additions": 65, "deletions": 0, "changes": 65, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5391cf07be7117c2df605acbfad31a4f9c6b7a65/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fsimd%2Fmve-vbic.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5391cf07be7117c2df605acbfad31a4f9c6b7a65/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fsimd%2Fmve-vbic.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fsimd%2Fmve-vbic.c?ref=5391cf07be7117c2df605acbfad31a4f9c6b7a65", "patch": "@@ -0,0 +1,65 @@\n+/* { dg-do assemble } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O3\" } */\n+\n+#include <stdint.h>\n+\n+#define FUNC(SIGN, TYPE, BITS, NB, OP, NAME)\t\t\t\t\\\n+  void test_ ## NAME ##_ ## SIGN ## BITS ## x ## NB (TYPE##BITS##_t * __restrict__ dest, TYPE##BITS##_t *a, TYPE##BITS##_t *b) { \\\n+    int i;\t\t\t\t\t\t\t\t\\\n+    for (i=0; i<NB; i++) {\t\t\t\t\t\t\\\n+      dest[i] = a[i] OP b[i];\t\t\t\t\t\t\\\n+    }\t\t\t\t\t\t\t\t\t\\\n+}\n+\n+#define FUNC_IMM(SIGN, TYPE, BITS, NB, OP, NAME)\t\t\t\t\\\n+  void test_ ## NAME ##_ ## SIGN ## BITS ## x ## NB (TYPE##BITS##_t * __restrict__ dest, TYPE##BITS##_t *a) { \\\n+    int i;\t\t\t\t\t\t\t\t\\\n+    for (i=0; i<NB; i++) {\t\t\t\t\t\t\\\n+      dest[i] = a[i] OP 1;\t\t\t\t\t\t\\\n+    }\t\t\t\t\t\t\t\t\t\\\n+}\n+\n+/* 64-bit vectors.  */\n+FUNC(s, int, 32, 2, & ~ , vbic)\n+FUNC(u, uint, 32, 2, & ~ , vbic)\n+FUNC(s, int, 16, 4, & ~ , vbic)\n+FUNC(u, uint, 16, 4, & ~ , vbic)\n+FUNC(s, int, 8, 8, & ~ , vbic)\n+FUNC(u, uint, 8, 8, & ~ , vbic)\n+\n+/* 128-bit vectors.  */\n+FUNC(s, int, 32, 4, & ~ , vbic)\n+FUNC(u, uint, 32, 4, & ~ , vbic)\n+FUNC(s, int, 16, 8, & ~ , vbic)\n+FUNC(u, uint, 16, 8, & ~ , vbic)\n+FUNC(s, int, 8, 16, & ~ , vbic)\n+FUNC(u, uint, 8, 16, & ~ , vbic)\n+\n+/* 64-bit vectors.  */\n+FUNC_IMM(s, int, 32, 2, & ~, vbicimm)\n+FUNC_IMM(u, uint, 32, 2, & ~, vbicimm)\n+FUNC_IMM(s, int, 16, 4, & ~, vbicimm)\n+FUNC_IMM(u, uint, 16, 4, & ~, vbicimm)\n+FUNC_IMM(s, int, 8, 8, & ~, vbicimm)\n+FUNC_IMM(u, uint, 8, 8, & ~, vbicimm)\n+\n+/* 128-bit vectors.  */\n+FUNC_IMM(s, int, 32, 4, & ~, vbicimm)\n+FUNC_IMM(u, uint, 32, 4, & ~, vbicimm)\n+FUNC_IMM(s, int, 16, 8, & ~, vbicimm)\n+FUNC_IMM(u, uint, 16, 8, & ~, vbicimm)\n+FUNC_IMM(s, int, 8, 16, & ~, vbicimm)\n+FUNC_IMM(u, uint, 8, 16, & ~, vbicimm)\n+\n+/* MVE has only 128-bit vectors, so we can vectorize only half of the\n+   functions above.  */\n+/* We emit vand.i[16|32] qX, #XX for the first four versions of the\n+   128-bit vector vbicimm tests.  */\n+/* For some reason, we do not generate the immediate version for\n+   int8x16 and uint8x16, we still use vldr to load the vector of\n+   immediates.  */\n+/* { dg-final { scan-assembler-times {vbic\\tq[0-9]+, q[0-9]+, q[0-9]+} 6 } } */\n+/* { dg-final { scan-assembler-times {vand.i[0-9]+\\tq[0-9]+} 4 } } */\n+/* { dg-final { scan-assembler-times {vand\\tq[0-9]+, q[0-9]+, q[0-9]+} 2 } } */"}]}