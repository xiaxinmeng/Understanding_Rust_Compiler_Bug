{"sha": "db256f9bef8c376e9d88e8f32ce94a03b6d105ee", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZGIyNTZmOWJlZjhjMzc2ZTlkODhlOGYzMmNlOTRhMDNiNmQxMDVlZQ==", "commit": {"author": {"name": "Matthias Kretz", "email": "kretz@kde.org", "date": "2021-02-03T15:49:29Z"}, "committer": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2021-02-03T15:49:29Z"}, "message": "libstdc++: Support -mlong-double-64 on PPC\n\nlibstdc++-v3/ChangeLog:\n\n\t* include/experimental/bits/simd.h: Let __intrinsic_type<long\n\tdouble, N> be valid if sizeof(long double) == sizeof(double) and\n\tuse a __vector double as member type.", "tree": {"sha": "abc40ba0da11205f3f78d50239e0d443bae52a9a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/abc40ba0da11205f3f78d50239e0d443bae52a9a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/db256f9bef8c376e9d88e8f32ce94a03b6d105ee", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/db256f9bef8c376e9d88e8f32ce94a03b6d105ee", "html_url": "https://github.com/Rust-GCC/gccrs/commit/db256f9bef8c376e9d88e8f32ce94a03b6d105ee", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/db256f9bef8c376e9d88e8f32ce94a03b6d105ee/comments", "author": {"login": "mattkretz", "id": 3306474, "node_id": "MDQ6VXNlcjMzMDY0NzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3306474?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mattkretz", "html_url": "https://github.com/mattkretz", "followers_url": "https://api.github.com/users/mattkretz/followers", "following_url": "https://api.github.com/users/mattkretz/following{/other_user}", "gists_url": "https://api.github.com/users/mattkretz/gists{/gist_id}", "starred_url": "https://api.github.com/users/mattkretz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mattkretz/subscriptions", "organizations_url": "https://api.github.com/users/mattkretz/orgs", "repos_url": "https://api.github.com/users/mattkretz/repos", "events_url": "https://api.github.com/users/mattkretz/events{/privacy}", "received_events_url": "https://api.github.com/users/mattkretz/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4f22942841edabbdda8a15b172a5c143da7bdafe", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4f22942841edabbdda8a15b172a5c143da7bdafe", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4f22942841edabbdda8a15b172a5c143da7bdafe"}], "stats": {"total": 11, "additions": 8, "deletions": 3}, "files": [{"sha": "477af86fd5e94b8e34ce11ba6cec2f7e80be3488", "filename": "libstdc++-v3/include/experimental/bits/simd.h", "status": "modified", "additions": 8, "deletions": 3, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/db256f9bef8c376e9d88e8f32ce94a03b6d105ee/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Fbits%2Fsimd.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/db256f9bef8c376e9d88e8f32ce94a03b6d105ee/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Fbits%2Fsimd.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Fbits%2Fsimd.h?ref=db256f9bef8c376e9d88e8f32ce94a03b6d105ee", "patch": "@@ -2285,7 +2285,9 @@ template <typename _Tp, size_t _Bytes>\n   struct __intrinsic_type<_Tp, _Bytes,\n \t\t\t  enable_if_t<__is_vectorizable_v<_Tp> && _Bytes <= 16>>\n   {\n-    static_assert(!is_same_v<_Tp, long double>,\n+    static constexpr bool _S_is_ldouble = is_same_v<_Tp, long double>;\n+    // allow _Tp == long double with -mlong-double-64\n+    static_assert(!(_S_is_ldouble && sizeof(long double) > sizeof(double)),\n \t\t  \"no __intrinsic_type support for long double on PPC\");\n #ifndef __VSX__\n     static_assert(!is_same_v<_Tp, double>,\n@@ -2297,8 +2299,11 @@ template <typename _Tp, size_t _Bytes>\n       \"no __intrinsic_type support for integers larger than 4 Bytes \"\n       \"on PPC w/o POWER8 vectors\");\n #endif\n-    using type = typename __intrinsic_type_impl<conditional_t<\n-      is_floating_point_v<_Tp>, _Tp, __int_for_sizeof_t<_Tp>>>::type;\n+    using type =\n+      typename __intrinsic_type_impl<\n+\t\t conditional_t<is_floating_point_v<_Tp>,\n+\t\t\t       conditional_t<_S_is_ldouble, double, _Tp>,\n+\t\t\t       __int_for_sizeof_t<_Tp>>>::type;\n   };\n #endif // __ALTIVEC__\n "}]}