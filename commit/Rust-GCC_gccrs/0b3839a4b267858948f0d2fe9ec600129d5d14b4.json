{"sha": "0b3839a4b267858948f0d2fe9ec600129d5d14b4", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGIzODM5YTRiMjY3ODU4OTQ4ZjBkMmZlOWVjNjAwMTI5ZDVkMTRiNA==", "commit": {"author": {"name": "Richard Sandiford", "email": "richard.sandiford@arm.com", "date": "2019-07-07T09:49:24Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2019-07-07T09:49:24Z"}, "message": "PR91068: Fix MIPS fallout from IRA matched operand changes\n\nPR91068 is a case in which we have (ignoring non-LRA alternatives):\n\n  [(set (match_operand:SI 0 \"register_operand\" \"=l,d?\")\n\t(plus:SI (mult:SI (match_operand:SI 1 \"register_operand\" \"d,d\")\n\t\t\t  (match_operand:SI 2 \"register_operand\" \"d,d\"))\n\t\t (match_operand:SI 3 \"register_operand\" \"0,d\")))\n   (clobber (match_scratch:SI 4 \"=X,l\"))\n   (clobber (match_scratch:SI 5 \"=X,&d\"))]\n\nwhere the first alternative is one instruction but the second is two.\nThis is very similar to the case that my recent IRA patches were\nsupposed to help.  The crucial difference is that the cheap\nalternative requires a single-register class while the expensive\nalternative uses general registers.\n\nThis makes a difference when one of operand 0 or 3 can naturally be\nallocated to LO but the other can't.  If IRA makes that allocation,\nboth alternatives require one reload of equal cost and so the first\nalternative clearly wins.\n\nHowever, if we say that tying operands 0 and 3 saves the cost of a full\nmove, then all other things being equal, IRA will prefer to allocate\nboth registers to the same GPR.  The registers will then naturally\nfit the second alternative.\n\nThis has a more drastic effect in the MIPS case than it should because\nusing the GPR alternative is much more expensive there than it appears\nto the RA.  But that's really a separate problem and something we were\nable to live with before my IRA patch.\n\nWhat makes tying less useful here is the fact that the tied register is\na single-register class.  I think in those circumstances it's better not\nto use tied operands at all and instead use \"l\" for the inputs.\nAllocating the input to LO, and allocating the output to LO, then depend\nnaturally on class costs.  If we decide to allocate at least one of them\nto LO, we'll use the cheap alternative, otherwise we'll (correctly) use\nthe expensive alternative.  This effectively restores the situation\nbefore my IRA patch, but this time making the preference on the input\nregister more explicit.\n\nI originally wrote the patterns in the early days of IRA, and certainly\nwell before LRA.  I think they were largely influened by reload rather\nthan RA proper (see the comment above *mul_acc_si, which is all about\nthe reload behaviour).  LRA copes with the two-\"l\" case just fine.\n\nThe patch may well cause problems for -mno-lra, but I think we should\ncull that option anyway.\n\n2019-07-07  Richard Sandiford  <richard.sandiford@arm.com>\n\ngcc/\n\tPR target/91068\n\t* config/mips/mips.md (*mul_acc_si, *mul_acc_si_r3900, *macc)\n\t(*msac, *msac_using_macc, *mul_sub_si): Use \"l\" for input operands\n\tinstead of matching them to \"l\" output operands.\n\nFrom-SVN: r273175", "tree": {"sha": "8549c48729f1df6eff4867d6cbf9281337bce0a2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8549c48729f1df6eff4867d6cbf9281337bce0a2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0b3839a4b267858948f0d2fe9ec600129d5d14b4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0b3839a4b267858948f0d2fe9ec600129d5d14b4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0b3839a4b267858948f0d2fe9ec600129d5d14b4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0b3839a4b267858948f0d2fe9ec600129d5d14b4/comments", "author": {"login": "rsandifo-arm", "id": 28043039, "node_id": "MDQ6VXNlcjI4MDQzMDM5", "avatar_url": "https://avatars.githubusercontent.com/u/28043039?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo-arm", "html_url": "https://github.com/rsandifo-arm", "followers_url": "https://api.github.com/users/rsandifo-arm/followers", "following_url": "https://api.github.com/users/rsandifo-arm/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo-arm/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo-arm/orgs", "repos_url": "https://api.github.com/users/rsandifo-arm/repos", "events_url": "https://api.github.com/users/rsandifo-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo-arm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "f40ce450f3c4b1cfd0a7e9c68e0c2a60d04b2a03", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f40ce450f3c4b1cfd0a7e9c68e0c2a60d04b2a03", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f40ce450f3c4b1cfd0a7e9c68e0c2a60d04b2a03"}], "stats": {"total": 19, "additions": 13, "deletions": 6}, "files": [{"sha": "802cdb8e91d89ffaa1b2babc80d6e7e7cb8f4e70", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0b3839a4b267858948f0d2fe9ec600129d5d14b4/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0b3839a4b267858948f0d2fe9ec600129d5d14b4/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=0b3839a4b267858948f0d2fe9ec600129d5d14b4", "patch": "@@ -1,3 +1,10 @@\n+2019-07-07  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\tPR target/91068\n+\t* config/mips/mips.md (*mul_acc_si, *mul_acc_si_r3900, *macc)\n+\t(*msac, *msac_using_macc, *mul_sub_si): Use \"l\" for input operands\n+\tinstead of matching them to \"l\" output operands.\n+\n 2019-07-07  Richard Sandiford  <richard.sandiford@arm.com>\n \n \t* config/mips/mips.c (mips_split_move): Zero-initialize addr"}, {"sha": "e17b1d522f0c15a90671aabf6f70a72476d96dda", "filename": "gcc/config/mips/mips.md", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0b3839a4b267858948f0d2fe9ec600129d5d14b4/gcc%2Fconfig%2Fmips%2Fmips.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0b3839a4b267858948f0d2fe9ec600129d5d14b4/gcc%2Fconfig%2Fmips%2Fmips.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.md?ref=0b3839a4b267858948f0d2fe9ec600129d5d14b4", "patch": "@@ -1749,7 +1749,7 @@\n   [(set (match_operand:SI 0 \"register_operand\" \"=l*?*?,l,d?\")\n \t(plus:SI (mult:SI (match_operand:SI 1 \"register_operand\" \"d,d,d\")\n \t\t\t  (match_operand:SI 2 \"register_operand\" \"d,d,d\"))\n-\t\t (match_operand:SI 3 \"register_operand\" \"0,0,d\")))\n+\t\t (match_operand:SI 3 \"register_operand\" \"l,l,d\")))\n    (clobber (match_scratch:SI 4 \"=X,X,l\"))\n    (clobber (match_scratch:SI 5 \"=X,X,&d\"))]\n   \"GENERATE_MADD_MSUB && !TARGET_MIPS16\"\n@@ -1778,7 +1778,7 @@\n   [(set (match_operand:SI 0 \"register_operand\" \"=l*?*?,l,d*?,d?\")\n \t(plus:SI (mult:SI (match_operand:SI 1 \"register_operand\" \"d,d,d,d\")\n \t\t\t  (match_operand:SI 2 \"register_operand\" \"d,d,d,d\"))\n-\t\t (match_operand:SI 3 \"register_operand\" \"0,0,l,d\")))\n+\t\t (match_operand:SI 3 \"register_operand\" \"l,l,l,d\")))\n    (clobber (match_scratch:SI 4 \"=X,X,3,l\"))\n    (clobber (match_scratch:SI 5 \"=X,X,X,&d\"))]\n   \"TARGET_MIPS3900 && !TARGET_MIPS16\"\n@@ -1822,7 +1822,7 @@\n   [(set (match_operand:SI 0 \"register_operand\" \"=l,d\")\n \t(plus:SI (mult:SI (match_operand:SI 1 \"register_operand\" \"d,d\")\n \t\t\t  (match_operand:SI 2 \"register_operand\" \"d,d\"))\n-\t\t (match_operand:SI 3 \"register_operand\" \"0,l\")))\n+\t\t (match_operand:SI 3 \"register_operand\" \"l,l\")))\n    (clobber (match_scratch:SI 4 \"=X,3\"))]\n   \"ISA_HAS_MACC\"\n {\n@@ -1842,7 +1842,7 @@\n \n (define_insn \"*msac\"\n   [(set (match_operand:SI 0 \"register_operand\" \"=l,d\")\n-        (minus:SI (match_operand:SI 1 \"register_operand\" \"0,l\")\n+        (minus:SI (match_operand:SI 1 \"register_operand\" \"l,l\")\n                   (mult:SI (match_operand:SI 2 \"register_operand\" \"d,d\")\n                            (match_operand:SI 3 \"register_operand\" \"d,d\"))))\n    (clobber (match_scratch:SI 4 \"=X,1\"))]\n@@ -1862,7 +1862,7 @@\n ;; An msac-like instruction implemented using negation and a macc.\n (define_insn_and_split \"*msac_using_macc\"\n   [(set (match_operand:SI 0 \"register_operand\" \"=l,d\")\n-        (minus:SI (match_operand:SI 1 \"register_operand\" \"0,l\")\n+        (minus:SI (match_operand:SI 1 \"register_operand\" \"l,l\")\n                   (mult:SI (match_operand:SI 2 \"register_operand\" \"d,d\")\n                            (match_operand:SI 3 \"register_operand\" \"d,d\"))))\n    (clobber (match_scratch:SI 4 \"=X,1\"))\n@@ -2005,7 +2005,7 @@\n ;; See the comment above *mul_add_si for details.\n (define_insn \"*mul_sub_si\"\n   [(set (match_operand:SI 0 \"register_operand\" \"=l*?*?,l,d?\")\n-        (minus:SI (match_operand:SI 1 \"register_operand\" \"0,0,d\")\n+        (minus:SI (match_operand:SI 1 \"register_operand\" \"l,l,d\")\n                   (mult:SI (match_operand:SI 2 \"register_operand\" \"d,d,d\")\n                            (match_operand:SI 3 \"register_operand\" \"d,d,d\"))))\n    (clobber (match_scratch:SI 4 \"=X,X,l\"))"}]}