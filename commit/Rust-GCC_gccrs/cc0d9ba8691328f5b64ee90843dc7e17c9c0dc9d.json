{"sha": "cc0d9ba8691328f5b64ee90843dc7e17c9c0dc9d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Y2MwZDliYTg2OTEzMjhmNWI2NGVlOTA4NDNkYzdlMTdjOWMwZGM5ZA==", "commit": {"author": {"name": "David Edelsohn", "email": "edelsohn@gnu.org", "date": "1999-09-22T22:27:58Z"}, "committer": {"name": "David Edelsohn", "email": "dje@gcc.gnu.org", "date": "1999-09-22T22:27:58Z"}, "message": "rs6000.c (expand_block_move): DImode loads and stores require word-aligned displacements.\n\n\t* rs6000.c (expand_block_move): DImode loads and stores require\n\tword-aligned displacements.  Increment address registers with\n\tadddi3 on 64-bit platform.  Use TARGET_POWERPC64 not TARGET_64BIT.\n\nFrom-SVN: r29606", "tree": {"sha": "c8ad48c04db0ddf20118a950b42398ad7d706003", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c8ad48c04db0ddf20118a950b42398ad7d706003"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/cc0d9ba8691328f5b64ee90843dc7e17c9c0dc9d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cc0d9ba8691328f5b64ee90843dc7e17c9c0dc9d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cc0d9ba8691328f5b64ee90843dc7e17c9c0dc9d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cc0d9ba8691328f5b64ee90843dc7e17c9c0dc9d/comments", "author": null, "committer": null, "parents": [{"sha": "405f63da1c335254a9f4c27bde94d7be7340524c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/405f63da1c335254a9f4c27bde94d7be7340524c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/405f63da1c335254a9f4c27bde94d7be7340524c"}], "stats": {"total": 186, "additions": 132, "deletions": 54}, "files": [{"sha": "938079ec405b56090465b745e9e6f6a4a58437b5", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cc0d9ba8691328f5b64ee90843dc7e17c9c0dc9d/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cc0d9ba8691328f5b64ee90843dc7e17c9c0dc9d/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=cc0d9ba8691328f5b64ee90843dc7e17c9c0dc9d", "patch": "@@ -1,3 +1,9 @@\n+Wed Sep 22 17:55:31 1999  David Edelsohn  <edelsohn@gnu.org>\n+\n+\t* rs6000.c (expand_block_move): DImode loads and stores require\n+\tword-aligned displacements.  Increment address registers with\n+\tadddi3 on 64-bit platform.  Use TARGET_POWERPC64 not TARGET_64BIT.\n+\n Wed Sep 22 17:35:55 1999  Michael Meissner  <meissner@cygnus.com>\n \n \t* dwarf2out.c (base_type_die): Use the name __unknown__ if there"}, {"sha": "a4c173ddff6949f01a2177ae988cbe9b0be3c690", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 126, "deletions": 54, "changes": 180, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cc0d9ba8691328f5b64ee90843dc7e17c9c0dc9d/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cc0d9ba8691328f5b64ee90843dc7e17c9c0dc9d/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=cc0d9ba8691328f5b64ee90843dc7e17c9c0dc9d", "patch": "@@ -2073,7 +2073,7 @@ expand_block_move (operands)\n   int move_bytes;\n \n   /* If this is not a fixed size move, just call memcpy */\n-  if (!constp)\n+  if (! constp)\n     return 0;\n \n   /* Anything to move? */\n@@ -2088,7 +2088,7 @@ expand_block_move (operands)\n       if (bytes > 4*8)\n \treturn 0;\n     }\n-  else if (!STRICT_ALIGNMENT)\n+  else if (! STRICT_ALIGNMENT)\n     {\n       if (bytes > 4*8)\n \treturn 0;\n@@ -2105,89 +2105,134 @@ expand_block_move (operands)\n       for ( ; bytes > 0; bytes -= move_bytes)\n \t{\n \t  if (bytes > 24\t\t/* move up to 32 bytes at a time */\n-\t      && !fixed_regs[5]\n-\t      && !fixed_regs[6]\n-\t      && !fixed_regs[7]\n-\t      && !fixed_regs[8]\n-\t      && !fixed_regs[9]\n-\t      && !fixed_regs[10]\n-\t      && !fixed_regs[11]\n-\t      && !fixed_regs[12])\n+\t      && ! fixed_regs[5]\n+\t      && ! fixed_regs[6]\n+\t      && ! fixed_regs[7]\n+\t      && ! fixed_regs[8]\n+\t      && ! fixed_regs[9]\n+\t      && ! fixed_regs[10]\n+\t      && ! fixed_regs[11]\n+\t      && ! fixed_regs[12])\n \t    {\n \t      move_bytes = (bytes > 32) ? 32 : bytes;\n-\t      emit_insn (gen_movstrsi_8reg (expand_block_move_mem (BLKmode, dest_reg, orig_dest),\n-\t\t\t\t\t    expand_block_move_mem (BLKmode, src_reg, orig_src),\n-\t\t\t\t\t    GEN_INT ((move_bytes == 32) ? 0 : move_bytes),\n+\t      emit_insn (gen_movstrsi_8reg (expand_block_move_mem (BLKmode,\n+\t\t\t\t\t\t\t\t   dest_reg,\n+\t\t\t\t\t\t\t\t   orig_dest),\n+\t\t\t\t\t    expand_block_move_mem (BLKmode,\n+\t\t\t\t\t\t\t\t   src_reg,\n+\t\t\t\t\t\t\t\t   orig_src),\n+\t\t\t\t\t    GEN_INT ((move_bytes == 32)\n+\t\t\t\t\t\t     ? 0 : move_bytes),\n \t\t\t\t\t    align_rtx));\n \t    }\n \t  else if (bytes > 16\t/* move up to 24 bytes at a time */\n-\t\t   && !fixed_regs[7]\n-\t\t   && !fixed_regs[8]\n-\t\t   && !fixed_regs[9]\n-\t\t   && !fixed_regs[10]\n-\t\t   && !fixed_regs[11]\n-\t\t   && !fixed_regs[12])\n+\t\t   && ! fixed_regs[7]\n+\t\t   && ! fixed_regs[8]\n+\t\t   && ! fixed_regs[9]\n+\t\t   && ! fixed_regs[10]\n+\t\t   && ! fixed_regs[11]\n+\t\t   && ! fixed_regs[12])\n \t    {\n \t      move_bytes = (bytes > 24) ? 24 : bytes;\n-\t      emit_insn (gen_movstrsi_6reg (expand_block_move_mem (BLKmode, dest_reg, orig_dest),\n-\t\t\t\t\t    expand_block_move_mem (BLKmode, src_reg, orig_src),\n+\t      emit_insn (gen_movstrsi_6reg (expand_block_move_mem (BLKmode,\n+\t\t\t\t\t\t\t\t   dest_reg,\n+\t\t\t\t\t\t\t\t   orig_dest),\n+\t\t\t\t\t    expand_block_move_mem (BLKmode,\n+\t\t\t\t\t\t\t\t   src_reg,\n+\t\t\t\t\t\t\t\t   orig_src),\n \t\t\t\t\t    GEN_INT (move_bytes),\n \t\t\t\t\t    align_rtx));\n \t    }\n \t  else if (bytes > 8\t/* move up to 16 bytes at a time */\n-\t\t   && !fixed_regs[9]\n-\t\t   && !fixed_regs[10]\n-\t\t   && !fixed_regs[11]\n-\t\t   && !fixed_regs[12])\n+\t\t   && ! fixed_regs[9]\n+\t\t   && ! fixed_regs[10]\n+\t\t   && ! fixed_regs[11]\n+\t\t   && ! fixed_regs[12])\n \t    {\n \t      move_bytes = (bytes > 16) ? 16 : bytes;\n-\t      emit_insn (gen_movstrsi_4reg (expand_block_move_mem (BLKmode, dest_reg, orig_dest),\n-\t\t\t\t\t    expand_block_move_mem (BLKmode, src_reg, orig_src),\n+\t      emit_insn (gen_movstrsi_4reg (expand_block_move_mem (BLKmode,\n+\t\t\t\t\t\t\t\t   dest_reg,\n+\t\t\t\t\t\t\t\t   orig_dest),\n+\t\t\t\t\t    expand_block_move_mem (BLKmode,\n+\t\t\t\t\t\t\t\t   src_reg,\n+\t\t\t\t\t\t\t\t   orig_src),\n \t\t\t\t\t    GEN_INT (move_bytes),\n \t\t\t\t\t    align_rtx));\n \t    }\n-\t  else if (bytes > 4 && !TARGET_64BIT)\n+\t  else if (bytes > 4 && ! TARGET_POWERPC64)\n \t    {\t\t\t/* move up to 8 bytes at a time */\n \t      move_bytes = (bytes > 8) ? 8 : bytes;\n-\t      emit_insn (gen_movstrsi_2reg (expand_block_move_mem (BLKmode, dest_reg, orig_dest),\n-\t\t\t\t\t    expand_block_move_mem (BLKmode, src_reg, orig_src),\n+\t      emit_insn (gen_movstrsi_2reg (expand_block_move_mem (BLKmode,\n+\t\t\t\t\t\t\t\t   dest_reg,\n+\t\t\t\t\t\t\t\t   orig_dest),\n+\t\t\t\t\t    expand_block_move_mem (BLKmode,\n+\t\t\t\t\t\t\t\t   src_reg,\n+\t\t\t\t\t\t\t\t   orig_src),\n \t\t\t\t\t    GEN_INT (move_bytes),\n \t\t\t\t\t    align_rtx));\n \t    }\n-\t  else if (bytes >= 4 && (align >= 4 || !STRICT_ALIGNMENT))\n+\t  else if (bytes >= 4 && (align >= 4 || ! STRICT_ALIGNMENT))\n \t    {\t\t\t/* move 4 bytes */\n \t      move_bytes = 4;\n \t      tmp_reg = gen_reg_rtx (SImode);\n-\t      emit_move_insn (tmp_reg, expand_block_move_mem (SImode, src_reg, orig_src));\n-\t      emit_move_insn (expand_block_move_mem (SImode, dest_reg, orig_dest), tmp_reg);\n+\t      emit_move_insn (tmp_reg,\n+\t\t\t      expand_block_move_mem (SImode,\n+\t\t\t\t\t\t     src_reg, orig_src));\n+\t      emit_move_insn (expand_block_move_mem (SImode,\n+\t\t\t\t\t\t     dest_reg, orig_dest),\n+\t\t\t      tmp_reg);\n \t    }\n-\t  else if (bytes == 2 && (align >= 2 || !STRICT_ALIGNMENT))\n+\t  else if (bytes == 2 && (align >= 2 || ! STRICT_ALIGNMENT))\n \t    {\t\t\t/* move 2 bytes */\n \t      move_bytes = 2;\n \t      tmp_reg = gen_reg_rtx (HImode);\n-\t      emit_move_insn (tmp_reg, expand_block_move_mem (HImode, src_reg, orig_src));\n-\t      emit_move_insn (expand_block_move_mem (HImode, dest_reg, orig_dest), tmp_reg);\n+\t      emit_move_insn (tmp_reg,\n+\t\t\t      expand_block_move_mem (HImode,\n+\t\t\t\t\t\t     src_reg, orig_src));\n+\t      emit_move_insn (expand_block_move_mem (HImode,\n+\t\t\t\t\t\t     dest_reg, orig_dest),\n+\t\t\t      tmp_reg);\n \t    }\n \t  else if (bytes == 1)\t/* move 1 byte */\n \t    {\n \t      move_bytes = 1;\n \t      tmp_reg = gen_reg_rtx (QImode);\n-\t      emit_move_insn (tmp_reg, expand_block_move_mem (QImode, src_reg, orig_src));\n-\t      emit_move_insn (expand_block_move_mem (QImode, dest_reg, orig_dest), tmp_reg);\n+\t      emit_move_insn (tmp_reg,\n+\t\t\t      expand_block_move_mem (QImode,\n+\t\t\t\t\t\t     src_reg, orig_src));\n+\t      emit_move_insn (expand_block_move_mem (QImode,\n+\t\t\t\t\t\t     dest_reg, orig_dest),\n+\t\t\t      tmp_reg);\n \t    }\n \t  else\n \t    {\t\t\t/* move up to 4 bytes at a time */\n \t      move_bytes = (bytes > 4) ? 4 : bytes;\n-\t      emit_insn (gen_movstrsi_1reg (expand_block_move_mem (BLKmode, dest_reg, orig_dest),\n-\t\t\t\t\t    expand_block_move_mem (BLKmode, src_reg, orig_src),\n+\t      emit_insn (gen_movstrsi_1reg (expand_block_move_mem (BLKmode,\n+\t\t\t\t\t\t\t\t   dest_reg,\n+\t\t\t\t\t\t\t\t   orig_dest),\n+\t\t\t\t\t    expand_block_move_mem (BLKmode,\n+\t\t\t\t\t\t\t\t   src_reg,\n+\t\t\t\t\t\t\t\t   orig_src),\n \t\t\t\t\t    GEN_INT (move_bytes),\n \t\t\t\t\t    align_rtx));\n \t    }\n \n \t  if (bytes > move_bytes)\n \t    {\n-\t      emit_insn (gen_addsi3 (src_reg, src_reg, GEN_INT (move_bytes)));\n-\t      emit_insn (gen_addsi3 (dest_reg, dest_reg, GEN_INT (move_bytes)));\n+\t      if (! TARGET_POWERPC64)\n+\t\t{\n+\t\t  emit_insn (gen_addsi3 (src_reg, src_reg,\n+\t\t\t\t\t GEN_INT (move_bytes)));\n+\t\t  emit_insn (gen_addsi3 (dest_reg, dest_reg,\n+\t\t\t\t\t GEN_INT (move_bytes)));\n+\t\t}\n+\t      else\n+\t\t{\n+\t\t  emit_insn (gen_adddi3 (src_reg, src_reg,\n+\t\t\t\t\t GEN_INT (move_bytes)));\n+\t\t  emit_insn (gen_adddi3 (dest_reg, dest_reg,\n+\t\t\t\t\t GEN_INT (move_bytes)));\n+\t\t}\n \t    }\n \t}\n     }\n@@ -2209,34 +2254,61 @@ expand_block_move (operands)\n \t      dest_addr = plus_constant (dest_reg, offset);\n \t    }\n \n-\t  /* Generate the appropriate load and store, saving the stores for later */\n-\t  if (bytes >= 8 && TARGET_64BIT && (align >= 8 || !STRICT_ALIGNMENT))\n+\t  /* Generate the appropriate load and store, saving the stores\n+\t     for later.  */\n+\t  if (bytes >= 8 && TARGET_POWERPC64\n+\t      /* 64-bit loads and stores require word-aligned displacements. */\n+\t      && (align >= 8 || (! STRICT_ALIGNMENT && align >= 4)))\n \t    {\n \t      move_bytes = 8;\n \t      tmp_reg = gen_reg_rtx (DImode);\n-\t      emit_insn (gen_movdi (tmp_reg, expand_block_move_mem (DImode, src_addr, orig_src)));\n-\t      stores[ num_reg++ ] = gen_movdi (expand_block_move_mem (DImode, dest_addr, orig_dest), tmp_reg);\n+\t      emit_insn (gen_movdi (tmp_reg,\n+\t\t\t\t    expand_block_move_mem (DImode,\n+\t\t\t\t\t\t\t   src_addr,\n+\t\t\t\t\t\t\t   orig_src)));\n+\t      stores[num_reg++] = gen_movdi (expand_block_move_mem (DImode,\n+\t\t\t\t\t\t\t\t    dest_addr,\n+\t\t\t\t\t\t\t\t    orig_dest),\n+\t\t\t\t\t     tmp_reg);\n \t    }\n-\t  else if (bytes >= 4 && (align >= 4 || !STRICT_ALIGNMENT))\n+\t  else if (bytes >= 4 && (align >= 4 || ! STRICT_ALIGNMENT))\n \t    {\n \t      move_bytes = 4;\n \t      tmp_reg = gen_reg_rtx (SImode);\n-\t      emit_insn (gen_movsi (tmp_reg, expand_block_move_mem (SImode, src_addr, orig_src)));\n-\t      stores[ num_reg++ ] = gen_movsi (expand_block_move_mem (SImode, dest_addr, orig_dest), tmp_reg);\n+\t      emit_insn (gen_movsi (tmp_reg,\n+\t\t\t\t    expand_block_move_mem (SImode,\n+\t\t\t\t\t\t\t   src_addr,\n+\t\t\t\t\t\t\t   orig_src)));\n+\t      stores[num_reg++] = gen_movsi (expand_block_move_mem (SImode,\n+\t\t\t\t\t\t\t\t    dest_addr,\n+\t\t\t\t\t\t\t\t    orig_dest),\n+\t\t\t\t\t     tmp_reg);\n \t    }\n-\t  else if (bytes >= 2 && (align >= 2 || !STRICT_ALIGNMENT))\n+\t  else if (bytes >= 2 && (align >= 2 || ! STRICT_ALIGNMENT))\n \t    {\n \t      move_bytes = 2;\n \t      tmp_reg = gen_reg_rtx (HImode);\n-\t      emit_insn (gen_movsi (tmp_reg, expand_block_move_mem (HImode, src_addr, orig_src)));\n-\t      stores[ num_reg++ ] = gen_movhi (expand_block_move_mem (HImode, dest_addr, orig_dest), tmp_reg);\n+\t      emit_insn (gen_movsi (tmp_reg,\n+\t\t\t\t    expand_block_move_mem (HImode,\n+\t\t\t\t\t\t\t   src_addr,\n+\t\t\t\t\t\t\t   orig_src)));\n+\t      stores[num_reg++] = gen_movhi (expand_block_move_mem (HImode,\n+\t\t\t\t\t\t\t\t    dest_addr,\n+\t\t\t\t\t\t\t\t    orig_dest),\n+\t\t\t\t\t     tmp_reg);\n \t    }\n \t  else\n \t    {\n \t      move_bytes = 1;\n \t      tmp_reg = gen_reg_rtx (QImode);\n-\t      emit_insn (gen_movsi (tmp_reg, expand_block_move_mem (QImode, src_addr, orig_src)));\n-\t      stores[ num_reg++ ] = gen_movqi (expand_block_move_mem (QImode, dest_addr, orig_dest), tmp_reg);\n+\t      emit_insn (gen_movsi (tmp_reg,\n+\t\t\t\t    expand_block_move_mem (QImode,\n+\t\t\t\t\t\t\t   src_addr,\n+\t\t\t\t\t\t\t   orig_src)));\n+\t      stores[num_reg++] = gen_movqi (expand_block_move_mem (QImode,\n+\t\t\t\t\t\t\t\t    dest_addr,\n+\t\t\t\t\t\t\t\t    orig_dest),\n+\t\t\t\t\t       tmp_reg);\n \t    }\n \n \t  if (num_reg >= MAX_MOVE_REG)"}]}