{"sha": "43842b395a48d1d576a9b6ceabe5c71f658b6d09", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDM4NDJiMzk1YTQ4ZDFkNTc2YTliNmNlYWJlNWM3MWY2NThiNmQwOQ==", "commit": {"author": {"name": "Michael Meissner", "email": "meissner@linux.vnet.ibm.com", "date": "2018-05-11T22:47:03Z"}, "committer": {"name": "Michael Meissner", "email": "meissner@gcc.gnu.org", "date": "2018-05-11T22:47:03Z"}, "message": "rs6000.md (mov<mode>_softfloat, FMOVE32): Reformat alternatives and attributes so it is easier to identify which...\n\n2018-05-11  Michael Meissner  <meissner@linux.vnet.ibm.com>\n\n\t* config/rs6000/rs6000.md (mov<mode>_softfloat, FMOVE32):\n\tReformat alternatives and attributes so it is easier to identify\n\twhich constraints/attributes go with which instruction.\n\t(mov<mode>_hardfloat32, FMOVE64): Likewise.\n\t(mov<mode>_softfloat32, FMOVE64): Likewise.\n\t(mov<mode>_hardfloat64, FMOVE64): Likewise.\n\t(mov<mode>_softfloat64, FMOVE64): Likewise.\n\nFrom-SVN: r260190", "tree": {"sha": "d85a74bae3e5aeaa89d2b939dbb7b1bab21f5ffa", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d85a74bae3e5aeaa89d2b939dbb7b1bab21f5ffa"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/43842b395a48d1d576a9b6ceabe5c71f658b6d09", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/43842b395a48d1d576a9b6ceabe5c71f658b6d09", "html_url": "https://github.com/Rust-GCC/gccrs/commit/43842b395a48d1d576a9b6ceabe5c71f658b6d09", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/43842b395a48d1d576a9b6ceabe5c71f658b6d09/comments", "author": null, "committer": null, "parents": [{"sha": "8132af9db3e2bf5a4f39cb48b6e3fd8f4045ec9f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8132af9db3e2bf5a4f39cb48b6e3fd8f4045ec9f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8132af9db3e2bf5a4f39cb48b6e3fd8f4045ec9f"}], "stats": {"total": 125, "additions": 106, "deletions": 19}, "files": [{"sha": "92dc3f4f68ffff8e2f74a3ade98d7aa743e7cf7f", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/43842b395a48d1d576a9b6ceabe5c71f658b6d09/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/43842b395a48d1d576a9b6ceabe5c71f658b6d09/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=43842b395a48d1d576a9b6ceabe5c71f658b6d09", "patch": "@@ -1,3 +1,13 @@\n+2018-05-11  Michael Meissner  <meissner@linux.vnet.ibm.com>\n+\n+\t* config/rs6000/rs6000.md (mov<mode>_softfloat, FMOVE32):\n+\tReformat alternatives and attributes so it is easier to identify\n+\twhich constraints/attributes go with which instruction.\n+\t(mov<mode>_hardfloat32, FMOVE64): Likewise.\n+\t(mov<mode>_softfloat32, FMOVE64): Likewise.\n+\t(mov<mode>_hardfloat64, FMOVE64): Likewise.\n+\t(mov<mode>_softfloat64, FMOVE64): Likewise.\n+\n 2018-05-11  Kelvin Nilsen  <kelvin@gcc.gnu.org>\n \n \t* doc/extend.texi (PowerPC Built-in Functions): Rename this"}, {"sha": "b249a1f1ca7206114b02263efb8c05b85f878d44", "filename": "gcc/config/rs6000/rs6000.md", "status": "modified", "additions": 96, "deletions": 19, "changes": 115, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/43842b395a48d1d576a9b6ceabe5c71f658b6d09/gcc%2Fconfig%2Frs6000%2Frs6000.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/43842b395a48d1d576a9b6ceabe5c71f658b6d09/gcc%2Fconfig%2Frs6000%2Frs6000.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.md?ref=43842b395a48d1d576a9b6ceabe5c71f658b6d09", "patch": "@@ -7154,9 +7154,17 @@\n \t\"load,       fpload,    store,     fpstore,   mffgpr,    mftgpr,\n \t fpsimple,   *,         mtjmpr,    mfjmpr,    *\")])\n \n+;;\tMR           MT%0       MF%0       LWZ        STW        LI\n+;;\tLIS          G-const.   F/n-const  NOP\n (define_insn \"*mov<mode>_softfloat\"\n-  [(set (match_operand:FMOVE32 0 \"nonimmediate_operand\" \"=r,cl,r,r,m,r,r,r,r,*h\")\n-\t(match_operand:FMOVE32 1 \"input_operand\" \"r,r,h,m,r,I,L,G,Fn,0\"))]\n+  [(set (match_operand:FMOVE32 0 \"nonimmediate_operand\"\n+\t\"=r,         cl,        r,         r,         m,         r,\n+          r,         r,         r,         *h\")\n+\n+\t(match_operand:FMOVE32 1 \"input_operand\"\n+\t \"r,         r,         h,         m,         r,         I,\n+          L,         G,         Fn,        0\"))]\n+\n   \"(gpc_reg_operand (operands[0], <MODE>mode)\n    || gpc_reg_operand (operands[1], <MODE>mode))\n    && TARGET_SOFT_FLOAT\"\n@@ -7171,8 +7179,13 @@\n    #\n    #\n    nop\"\n-  [(set_attr \"type\" \"*,mtjmpr,mfjmpr,load,store,*,*,*,*,*\")\n-   (set_attr \"length\" \"4,4,4,4,4,4,4,4,8,4\")])\n+  [(set_attr \"type\"\n+\t\"*,          mtjmpr,    mfjmpr,    load,      store,     *,\n+         *,          *,         *,         *\")\n+\n+   (set_attr \"length\"\n+\t\"4,          4,         4,         4,         4,         4,\n+         4,          4,         8,         4\")])\n \n ;; Like movsf, but adjust a SI value to be used in a SF context, i.e.\n ;; (set (reg:SF ...) (subreg:SF (reg:SI ...) 0))\n@@ -7335,9 +7348,22 @@\n ;; If we have FPR registers, rs6000_emit_move has moved all constants to memory,\n ;; except for 0.0 which can be created on VSX with an xor instruction.\n \n+;;           STFD         LFD         FMR         LXSD        STXSD\n+;;           LXSD         STXSD       XXLOR       XXLXOR      GPR<-0\n+;;           LWZ          STW         MR\n+\n+\n (define_insn \"*mov<mode>_hardfloat32\"\n-  [(set (match_operand:FMOVE64 0 \"nonimmediate_operand\" \"=m,d,d,<f64_p9>,wY,<f64_av>,Z,<f64_vsx>,<f64_vsx>,!r,Y,r,!r\")\n-\t(match_operand:FMOVE64 1 \"input_operand\" \"d,m,d,wY,<f64_p9>,Z,<f64_av>,<f64_vsx>,<zero_fp>,<zero_fp>,r,Y,r\"))]\n+  [(set (match_operand:FMOVE64 0 \"nonimmediate_operand\"\n+            \"=m,          d,          d,          <f64_p9>,   wY,\n+              <f64_av>,   Z,          <f64_vsx>,  <f64_vsx>,  !r,\n+              Y,          r,          !r\")\n+\n+\t(match_operand:FMOVE64 1 \"input_operand\"\n+             \"d,          m,          d,          wY,         <f64_p9>,\n+              Z,          <f64_av>,   <f64_vsx>,  <zero_fp>,  <zero_fp>,\n+              r,          Y,          r\"))]\n+\n   \"! TARGET_POWERPC64 && TARGET_HARD_FLOAT\n    && (gpc_reg_operand (operands[0], <MODE>mode)\n        || gpc_reg_operand (operands[1], <MODE>mode))\"\n@@ -7355,25 +7381,57 @@\n    #\n    #\n    #\"\n-  [(set_attr \"type\" \"fpstore,fpload,fpsimple,fpload,fpstore,fpload,fpstore,veclogical,veclogical,two,store,load,two\")\n+  [(set_attr \"type\"\n+            \"fpstore,     fpload,     fpsimple,   fpload,     fpstore,\n+             fpload,      fpstore,    veclogical, veclogical, two,\n+             store,       load,       two\")\n+\n    (set_attr \"size\" \"64\")\n-   (set_attr \"length\" \"4,4,4,4,4,4,4,4,4,8,8,8,8\")])\n+   (set_attr \"length\"\n+            \"4,           4,          4,          4,          4,\n+             4,           4,          4,          4,          8,\n+             8,           8,          8\")])\n+\n+;;           STW      LWZ     MR      G-const H-const F-const\n \n (define_insn \"*mov<mode>_softfloat32\"\n-  [(set (match_operand:FMOVE64 0 \"nonimmediate_operand\" \"=Y,r,r,r,r,r\")\n-\t(match_operand:FMOVE64 1 \"input_operand\" \"r,Y,r,G,H,F\"))]\n+  [(set (match_operand:FMOVE64 0 \"nonimmediate_operand\"\n+           \"=Y,       r,      r,      r,      r,      r\")\n+\n+\t(match_operand:FMOVE64 1 \"input_operand\"\n+            \"r,       Y,      r,      G,      H,      F\"))]\n+\n   \"!TARGET_POWERPC64\n    && (gpc_reg_operand (operands[0], <MODE>mode)\n        || gpc_reg_operand (operands[1], <MODE>mode))\"\n   \"#\"\n-  [(set_attr \"type\" \"store,load,two,*,*,*\")\n-   (set_attr \"length\" \"8,8,8,8,12,16\")])\n+  [(set_attr \"type\"\n+            \"store,   load,   two,    *,      *,      *\")\n+\n+   (set_attr \"length\"\n+             \"8,      8,      8,      8,      12,     16\")])\n \n ; ld/std require word-aligned displacements -> 'Y' constraint.\n ; List Y->r and r->Y before r->r for reload.\n+\n+;;           STFD         LFD         FMR         LXSD        STXSD\n+;;           LXSDX        STXSDX      XXLOR       XXLXOR      LI 0\n+;;           STD          LD          MR          MT{CTR,LR}  MF{CTR,LR}\n+;;           NOP          MFTGPR      MFFGPR      MFVSRD      MTVSRD\n+\n (define_insn \"*mov<mode>_hardfloat64\"\n-  [(set (match_operand:FMOVE64 0 \"nonimmediate_operand\" \"=m,d,d,<f64_p9>,wY,<f64_av>,Z,<f64_vsx>,<f64_vsx>,!r,Y,r,!r,*c*l,!r,*h,r,wg,r,<f64_dm>\")\n-\t(match_operand:FMOVE64 1 \"input_operand\" \"d,m,d,wY,<f64_p9>,Z,<f64_av>,<f64_vsx>,<zero_fp>,<zero_fp>,r,Y,r,r,h,0,wg,r,<f64_dm>,r\"))]\n+  [(set (match_operand:FMOVE64 0 \"nonimmediate_operand\"\n+           \"=m,           d,          d,          <f64_p9>,   wY,\n+             <f64_av>,    Z,          <f64_vsx>,  <f64_vsx>,  !r,\n+             Y,           r,          !r,         *c*l,       !r,\n+            *h,           r,          wg,         r,          <f64_dm>\")\n+\n+\t(match_operand:FMOVE64 1 \"input_operand\"\n+            \"d,           m,          d,          wY,         <f64_p9>,\n+             Z,           <f64_av>,   <f64_vsx>,  <zero_fp>,  <zero_fp>,\n+             r,           Y,          r,          r,          h,\n+             0,           wg,         r,          <f64_dm>,   r\"))]\n+\n   \"TARGET_POWERPC64 && TARGET_HARD_FLOAT\n    && (gpc_reg_operand (operands[0], <MODE>mode)\n        || gpc_reg_operand (operands[1], <MODE>mode))\"\n@@ -7398,13 +7456,27 @@\n    mffgpr %0,%1\n    mfvsrd %0,%x1\n    mtvsrd %x0,%1\"\n-  [(set_attr \"type\" \"fpstore,fpload,fpsimple,fpload,fpstore,fpload,fpstore,veclogical,veclogical,integer,store,load,*,mtjmpr,mfjmpr,*,mftgpr,mffgpr,mftgpr,mffgpr\")\n+  [(set_attr \"type\"\n+            \"fpstore,     fpload,     fpsimple,   fpload,     fpstore,\n+             fpload,      fpstore,    veclogical, veclogical, integer,\n+             store,       load,       *,          mtjmpr,     mfjmpr,\n+             *,           mftgpr,     mffgpr,     mftgpr,    mffgpr\")\n+\n    (set_attr \"size\" \"64\")\n    (set_attr \"length\" \"4\")])\n \n+;;           STD      LD       MR      MT<SPR> MF<SPR> G-const\n+;;           H-const  F-const  Special\n+\n (define_insn \"*mov<mode>_softfloat64\"\n-  [(set (match_operand:FMOVE64 0 \"nonimmediate_operand\" \"=Y,r,r,cl,r,r,r,r,*h\")\n-\t(match_operand:FMOVE64 1 \"input_operand\" \"r,Y,r,r,h,G,H,F,0\"))]\n+  [(set (match_operand:FMOVE64 0 \"nonimmediate_operand\"\n+           \"=Y,       r,      r,      cl,     r,      r,\n+             r,       r,      *h\")\n+\n+\t(match_operand:FMOVE64 1 \"input_operand\"\n+            \"r,       Y,      r,      r,      h,      G,\n+             H,       F,      0\"))]\n+\n   \"TARGET_POWERPC64 && TARGET_SOFT_FLOAT\n    && (gpc_reg_operand (operands[0], <MODE>mode)\n        || gpc_reg_operand (operands[1], <MODE>mode))\"\n@@ -7418,8 +7490,13 @@\n    #\n    #\n    nop\"\n-  [(set_attr \"type\" \"store,load,*,mtjmpr,mfjmpr,*,*,*,*\")\n-   (set_attr \"length\" \"4,4,4,4,4,8,12,16,4\")])\n+  [(set_attr \"type\"\n+            \"store,   load,   *,      mtjmpr, mfjmpr, *,\n+             *,       *,      *\")\n+\n+   (set_attr \"length\"\n+            \"4,       4,      4,      4,      4,      8,\n+             12,      16,     4\")])\n \f\n (define_expand \"mov<mode>\"\n   [(set (match_operand:FMOVE128 0 \"general_operand\")"}]}