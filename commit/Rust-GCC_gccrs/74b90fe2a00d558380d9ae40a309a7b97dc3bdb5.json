{"sha": "74b90fe2a00d558380d9ae40a309a7b97dc3bdb5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzRiOTBmZTJhMDBkNTU4MzgwZDlhZTQwYTMwOWE3Yjk3ZGMzYmRiNQ==", "commit": {"author": {"name": "John David Anglin", "email": "dave.anglin@nrc-cnrc.gc.ca", "date": "2010-10-11T16:52:12Z"}, "committer": {"name": "John David Anglin", "email": "danglin@gcc.gnu.org", "date": "2010-10-11T16:52:12Z"}, "message": "re PR middle-end/45862 (SUPPORTS_WEAK is documented as a C expression, used as a compile time constant)\n\n\tPR middle-end/45862\n\t* doc/tm.texi.in (SUPPORTS_WEAK): Update.\n\t(TARGET_SUPPORTS_WEAK): New.\n\t* doc/tm.texi: Regenerate.\n\t* defaults.h (SUPPORTS_WEAK): Update comment.\n\t(TARGET_SUPPORTS_WEAK): New.\n\t* dwarf2asm.c (USE_LINKONCE_INDIRECT): Update define.\n\t* varasm.c (assemble_external): Use TARGET_SUPPORTS_WEAK instead of\n\tSUPPORTS_WEAK.\n\t(merge_weak, declare_weak, do_assemble_alias, supports_one_only,\n\tmake_decl_one_only): Likewise.\n\t* config/pa/som.h (SUPPORTS_WEAK): Rename defines to\n\tTARGET_SUPPORTS_WEAK.\n\t(SUPPORTS_ONE_ONLY, MAKE_DECL_ONE_ONLY): Use TARGET_SUPPORTS_WEAK\n\tinstead of SUPPORTS_WEAK.\n\nFrom-SVN: r165319", "tree": {"sha": "591e6322718efbd38a18ee5189259cb088b8b372", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/591e6322718efbd38a18ee5189259cb088b8b372"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/74b90fe2a00d558380d9ae40a309a7b97dc3bdb5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/74b90fe2a00d558380d9ae40a309a7b97dc3bdb5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/74b90fe2a00d558380d9ae40a309a7b97dc3bdb5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/74b90fe2a00d558380d9ae40a309a7b97dc3bdb5/comments", "author": null, "committer": null, "parents": [{"sha": "2861cfa1eb2f58ba3b9d987e552b0d34ed9fa9c6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2861cfa1eb2f58ba3b9d987e552b0d34ed9fa9c6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2861cfa1eb2f58ba3b9d987e552b0d34ed9fa9c6"}], "stats": {"total": 89, "additions": 66, "deletions": 23}, "files": [{"sha": "0a6120cc5901014f28e7b5ff7f5dd275fb97b04e", "filename": "gcc/ChangeLog", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/74b90fe2a00d558380d9ae40a309a7b97dc3bdb5/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/74b90fe2a00d558380d9ae40a309a7b97dc3bdb5/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=74b90fe2a00d558380d9ae40a309a7b97dc3bdb5", "patch": "@@ -1,3 +1,21 @@\n+2010-10-11  John David Anglin  <dave.anglin@nrc-cnrc.gc.ca>\n+\n+\tPR middle-end/45862\n+\t* doc/tm.texi.in (SUPPORTS_WEAK): Update.\n+\t(TARGET_SUPPORTS_WEAK): New.\n+\t* doc/tm.texi: Regenerate.\n+\t* defaults.h (SUPPORTS_WEAK): Update comment.\n+\t(TARGET_SUPPORTS_WEAK): New.\n+\t* dwarf2asm.c (USE_LINKONCE_INDIRECT): Update define.\n+\t* varasm.c (assemble_external): Use TARGET_SUPPORTS_WEAK instead of\n+\tSUPPORTS_WEAK.\n+\t(merge_weak, declare_weak, do_assemble_alias, supports_one_only,\n+\tmake_decl_one_only): Likewise.\n+\t* config/pa/som.h (SUPPORTS_WEAK): Rename defines to\n+\tTARGET_SUPPORTS_WEAK.\n+\t(SUPPORTS_ONE_ONLY, MAKE_DECL_ONE_ONLY): Use TARGET_SUPPORTS_WEAK\n+\tinstead of SUPPORTS_WEAK.\n+\n 2010-10-11  Rainer Orth  <ro@CeBiTec.Uni-Bielefeld.DE>\n \n \t* config/sparc/gmon-sol2.c: Don't include coretypes.h, tm.h."}, {"sha": "c8f77d490a6b6307efa437637e3ac4d56d109309", "filename": "gcc/config/pa/som.h", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/74b90fe2a00d558380d9ae40a309a7b97dc3bdb5/gcc%2Fconfig%2Fpa%2Fsom.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/74b90fe2a00d558380d9ae40a309a7b97dc3bdb5/gcc%2Fconfig%2Fpa%2Fsom.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Fsom.h?ref=74b90fe2a00d558380d9ae40a309a7b97dc3bdb5", "patch": "@@ -272,11 +272,13 @@ do {\t\t\t\t\t\t\\\n #define ALWAYS_STRIP_DOTDOT 1\n \n /* If GAS supports weak, we can support weak when we have working linker\n-   support for secondary definitions and are generating code for GAS.  */\n+   support for secondary definitions and are generating code for GAS.\n+   This is primarily for one-only support as SOM doesn't allow undefined\n+   weak symbols.  */\n #ifdef HAVE_GAS_WEAK\n-#define SUPPORTS_WEAK (TARGET_SOM_SDEF && TARGET_GAS)\n+#define TARGET_SUPPORTS_WEAK (TARGET_SOM_SDEF && TARGET_GAS)\n #else\n-#define SUPPORTS_WEAK 0\n+#define TARGET_SUPPORTS_WEAK 0\n #endif\n \n /* CVS GAS as of 4/28/04 supports a comdat parameter for the .nsubspa\n@@ -289,7 +291,7 @@ do {\t\t\t\t\t\t\\\n #endif\n \n /* We can support one only if we support weak or comdat.  */\n-#define SUPPORTS_ONE_ONLY (SUPPORTS_WEAK || SUPPORTS_SOM_COMDAT)\n+#define SUPPORTS_ONE_ONLY (TARGET_SUPPORTS_WEAK || SUPPORTS_SOM_COMDAT)\n \n /* We use DECL_COMMON for uninitialized one-only variables as we don't\n    have linkonce .bss.  We use SOM secondary definitions or comdat for\n@@ -300,7 +302,7 @@ do {\t\t\t\t\t\t\\\n         && (DECL_INITIAL (DECL) == 0\t\t\t\t\t\\\n             || DECL_INITIAL (DECL) == error_mark_node))\t\t\t\\\n       DECL_COMMON (DECL) = 1;\t\t\t\t\t\t\\\n-    else if (SUPPORTS_WEAK)\t\t\t\t\t\t\\\n+    else if (TARGET_SUPPORTS_WEAK)\t\t\t\t\t\\\n       DECL_WEAK (DECL) = 1;\t\t\t\t\t\t\\\n   } while (0)\n "}, {"sha": "88585726c7c8b4019b2011642e1cdc6dfda90f1d", "filename": "gcc/defaults.h", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/74b90fe2a00d558380d9ae40a309a7b97dc3bdb5/gcc%2Fdefaults.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/74b90fe2a00d558380d9ae40a309a7b97dc3bdb5/gcc%2Fdefaults.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdefaults.h?ref=74b90fe2a00d558380d9ae40a309a7b97dc3bdb5", "patch": "@@ -286,7 +286,8 @@ see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n #endif\n #endif\n \n-/* This determines whether or not we support weak symbols.  */\n+/* This determines whether or not we support weak symbols.  SUPPORTS_WEAK\n+   must be a preprocessor constant.  */\n #ifndef SUPPORTS_WEAK\n #if defined (ASM_WEAKEN_LABEL) || defined (ASM_WEAKEN_DECL)\n #define SUPPORTS_WEAK 1\n@@ -295,6 +296,12 @@ see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n #endif\n #endif\n \n+/* This determines whether or not we support weak symbols during target\n+   code generation.  TARGET_SUPPORTS_WEAK can be any valid C expression.  */\n+#ifndef TARGET_SUPPORTS_WEAK\n+#define TARGET_SUPPORTS_WEAK (SUPPORTS_WEAK)\n+#endif\n+\n /* This determines whether or not we support the discriminator\n    attribute in the .loc directive.  */\n #ifndef SUPPORTS_DISCRIMINATOR"}, {"sha": "298b3b9862abe4e165f2af1db519b03e0f7b20e0", "filename": "gcc/doc/tm.texi", "status": "modified", "additions": 12, "deletions": 4, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/74b90fe2a00d558380d9ae40a309a7b97dc3bdb5/gcc%2Fdoc%2Ftm.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/74b90fe2a00d558380d9ae40a309a7b97dc3bdb5/gcc%2Fdoc%2Ftm.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Ftm.texi?ref=74b90fe2a00d558380d9ae40a309a7b97dc3bdb5", "patch": "@@ -7923,13 +7923,21 @@ declaration of @code{name}.\n @end defmac\n \n @defmac SUPPORTS_WEAK\n-A C expression which evaluates to true if the target supports weak symbols.\n+A preprocessor constant expression which evaluates to true if the target\n+supports weak symbols.\n \n If you don't define this macro, @file{defaults.h} provides a default\n definition.  If either @code{ASM_WEAKEN_LABEL} or @code{ASM_WEAKEN_DECL}\n-is defined, the default definition is @samp{1}; otherwise, it is\n-@samp{0}.  Define this macro if you want to control weak symbol support\n-with a compiler flag such as @option{-melf}.\n+is defined, the default definition is @samp{1}; otherwise, it is @samp{0}.\n+@end defmac\n+\n+@defmac TARGET_SUPPORTS_WEAK\n+A C expression which evaluates to true if the target supports weak symbols.\n+\n+If you don't define this macro, @file{defaults.h} provides a default\n+definition.  The default definition is @samp{(SUPPORTS_WEAK)}.  Define\n+this macro if you want to control weak symbol support with a compiler\n+flag such as @option{-melf}.\n @end defmac\n \n @defmac MAKE_DECL_ONE_ONLY (@var{decl})"}, {"sha": "c97b514ee4632eff40014d2eab0e71ff3e0701b4", "filename": "gcc/doc/tm.texi.in", "status": "modified", "additions": 12, "deletions": 4, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/74b90fe2a00d558380d9ae40a309a7b97dc3bdb5/gcc%2Fdoc%2Ftm.texi.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/74b90fe2a00d558380d9ae40a309a7b97dc3bdb5/gcc%2Fdoc%2Ftm.texi.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Ftm.texi.in?ref=74b90fe2a00d558380d9ae40a309a7b97dc3bdb5", "patch": "@@ -7909,13 +7909,21 @@ declaration of @code{name}.\n @end defmac\n \n @defmac SUPPORTS_WEAK\n-A C expression which evaluates to true if the target supports weak symbols.\n+A preprocessor constant expression which evaluates to true if the target\n+supports weak symbols.\n \n If you don't define this macro, @file{defaults.h} provides a default\n definition.  If either @code{ASM_WEAKEN_LABEL} or @code{ASM_WEAKEN_DECL}\n-is defined, the default definition is @samp{1}; otherwise, it is\n-@samp{0}.  Define this macro if you want to control weak symbol support\n-with a compiler flag such as @option{-melf}.\n+is defined, the default definition is @samp{1}; otherwise, it is @samp{0}.\n+@end defmac\n+\n+@defmac TARGET_SUPPORTS_WEAK\n+A C expression which evaluates to true if the target supports weak symbols.\n+\n+If you don't define this macro, @file{defaults.h} provides a default\n+definition.  The default definition is @samp{(SUPPORTS_WEAK)}.  Define\n+this macro if you want to control weak symbol support with a compiler\n+flag such as @option{-melf}.\n @end defmac\n \n @defmac MAKE_DECL_ONE_ONLY (@var{decl})"}, {"sha": "eefc29fd9a365b24fa2e6c0c4feb4ff0e462bed0", "filename": "gcc/dwarf2asm.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/74b90fe2a00d558380d9ae40a309a7b97dc3bdb5/gcc%2Fdwarf2asm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/74b90fe2a00d558380d9ae40a309a7b97dc3bdb5/gcc%2Fdwarf2asm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdwarf2asm.c?ref=74b90fe2a00d558380d9ae40a309a7b97dc3bdb5", "patch": "@@ -798,8 +798,8 @@ static GTY((param1_is (char *), param2_is (tree))) splay_tree indirect_pool;\n \n static GTY(()) int dw2_const_labelno;\n \n-#if defined(HAVE_GAS_HIDDEN) && defined(SUPPORTS_ONE_ONLY)\n-# define USE_LINKONCE_INDIRECT 1\n+#if defined(HAVE_GAS_HIDDEN)\n+# define USE_LINKONCE_INDIRECT (SUPPORTS_ONE_ONLY)\n #else\n # define USE_LINKONCE_INDIRECT 0\n #endif"}, {"sha": "03e25ddd4512c4fe15064b173d51e4b8f4804c08", "filename": "gcc/varasm.c", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/74b90fe2a00d558380d9ae40a309a7b97dc3bdb5/gcc%2Fvarasm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/74b90fe2a00d558380d9ae40a309a7b97dc3bdb5/gcc%2Fvarasm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvarasm.c?ref=74b90fe2a00d558380d9ae40a309a7b97dc3bdb5", "patch": "@@ -2053,7 +2053,7 @@ assemble_external (tree decl ATTRIBUTE_UNUSED)\n   /* We want to output annotation for weak and external symbols at\n      very last to check if they are references or not.  */\n \n-  if (SUPPORTS_WEAK\n+  if (TARGET_SUPPORTS_WEAK\n       && DECL_WEAK (decl)\n       /* TREE_STATIC is a weird and abused creature which is not\n \t generally the right test for whether an entity has been\n@@ -5027,7 +5027,7 @@ merge_weak (tree newdecl, tree olddecl)\n {\n   if (DECL_WEAK (newdecl) == DECL_WEAK (olddecl))\n     {\n-      if (DECL_WEAK (newdecl) && SUPPORTS_WEAK)\n+      if (DECL_WEAK (newdecl) && TARGET_SUPPORTS_WEAK)\n         {\n           tree *pwd;\n           /* We put the NEWDECL on the weak_decls list at some point\n@@ -5064,7 +5064,7 @@ merge_weak (tree newdecl, tree olddecl)\n \twarning (0, \"weak declaration of %q+D after first use results \"\n                  \"in unspecified behavior\", newdecl);\n \n-      if (SUPPORTS_WEAK)\n+      if (TARGET_SUPPORTS_WEAK)\n \t{\n \t  /* We put the NEWDECL on the weak_decls list at some point.\n \t     Replace it with the OLDDECL.  */\n@@ -5098,7 +5098,7 @@ declare_weak (tree decl)\n     error (\"weak declaration of %q+D must be public\", decl);\n   else if (TREE_CODE (decl) == FUNCTION_DECL && TREE_ASM_WRITTEN (decl))\n     error (\"weak declaration of %q+D must precede definition\", decl);\n-  else if (!SUPPORTS_WEAK)\n+  else if (!TARGET_SUPPORTS_WEAK)\n     warning (0, \"weak declaration of %q+D not supported\", decl);\n \n   mark_weak (decl);\n@@ -5344,7 +5344,7 @@ do_assemble_alias (tree decl, tree target)\n \t\t\t  IDENTIFIER_POINTER (DECL_ASSEMBLER_NAME (decl)),\n \t\t\t  IDENTIFIER_POINTER (target));\n #else\n-      if (!SUPPORTS_WEAK)\n+      if (!TARGET_SUPPORTS_WEAK)\n \t{\n \t  error_at (DECL_SOURCE_LOCATION (decl),\n \t\t    \"weakref is not supported in this configuration\");\n@@ -5636,7 +5636,7 @@ supports_one_only (void)\n {\n   if (SUPPORTS_ONE_ONLY)\n     return 1;\n-  return SUPPORTS_WEAK;\n+  return TARGET_SUPPORTS_WEAK;\n }\n \n /* Set up DECL as a public symbol that can be defined in multiple\n@@ -5662,7 +5662,7 @@ make_decl_one_only (tree decl, tree comdat_group)\n     DECL_COMMON (decl) = 1;\n   else\n     {\n-      gcc_assert (SUPPORTS_WEAK);\n+      gcc_assert (TARGET_SUPPORTS_WEAK);\n       DECL_WEAK (decl) = 1;\n     }\n }"}]}