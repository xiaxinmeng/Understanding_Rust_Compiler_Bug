{"sha": "75791cee29f5b566cb14a227fcbb0eaeaa78bfe5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzU3OTFjZWUyOWY1YjU2NmNiMTRhMjI3ZmNiYjBlYWVhYTc4YmZlNQ==", "commit": {"author": {"name": "Tom Wood", "email": "wood@gnu.org", "date": "1992-04-29T10:28:21Z"}, "committer": {"name": "Tom Wood", "email": "wood@gnu.org", "date": "1992-04-29T10:28:21Z"}, "message": "*** empty log message ***\n\nFrom-SVN: r858", "tree": {"sha": "754419a509752a8986e0886fb434bacb03130a97", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/754419a509752a8986e0886fb434bacb03130a97"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/75791cee29f5b566cb14a227fcbb0eaeaa78bfe5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/75791cee29f5b566cb14a227fcbb0eaeaa78bfe5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/75791cee29f5b566cb14a227fcbb0eaeaa78bfe5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/75791cee29f5b566cb14a227fcbb0eaeaa78bfe5/comments", "author": null, "committer": null, "parents": [{"sha": "15c55bb68c826664761707cf18c56e960a3e9749", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/15c55bb68c826664761707cf18c56e960a3e9749", "html_url": "https://github.com/Rust-GCC/gccrs/commit/15c55bb68c826664761707cf18c56e960a3e9749"}], "stats": {"total": 40, "additions": 29, "deletions": 11}, "files": [{"sha": "72d86ce1b41678b46d8ff2bd4bf35d5246056021", "filename": "gcc/dwarfout.c", "status": "modified", "additions": 29, "deletions": 11, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/75791cee29f5b566cb14a227fcbb0eaeaa78bfe5/gcc%2Fdwarfout.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/75791cee29f5b566cb14a227fcbb0eaeaa78bfe5/gcc%2Fdwarfout.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdwarfout.c?ref=75791cee29f5b566cb14a227fcbb0eaeaa78bfe5", "patch": "@@ -1563,7 +1563,7 @@ data_member_location_attribute (decl)\n      it into a member-style AT_location descriptor, but that'll be\n      tough to do.  -- rfg  */\n \n-  if (TREE_CODE (bitpos) != CONST_INT)\n+  if (TREE_CODE (bitpos) != INTEGER_CST)\n     return;\n \n   ASM_OUTPUT_DWARF_ATTRIBUTE (asm_out_file, AT_location);\n@@ -1608,8 +1608,7 @@ data_member_location_attribute (decl)\n      this minor annoyance.\n   */\n \n-  if ((GET_MODE_ALIGNMENT (mode_for_size (containing_object_size_in_bits))\n-       != containing_object_size_in_bits)\n+  if ((GET_MODE_ALIGNMENT (TYPE_MODE (type)) != containing_object_size_in_bits)\n       && (DECL_BIT_FIELD_TYPE (type) != NULL))\n     warning_with_decl (decl, \"debugging info won't necessarily be reliable\");\n \n@@ -1773,8 +1772,11 @@ inline void\n name_attribute (name_string)\n      register char *name_string;\n {\n-  ASM_OUTPUT_DWARF_ATTRIBUTE (asm_out_file, AT_name);\n-  ASM_OUTPUT_DWARF_STRING (asm_out_file, name_string);\n+  if (name_string && *name_string)\n+    {\n+      ASM_OUTPUT_DWARF_ATTRIBUTE (asm_out_file, AT_name);\n+      ASM_OUTPUT_DWARF_STRING (asm_out_file, name_string);\n+    }\n }\n \n inline void\n@@ -2064,8 +2066,7 @@ bit_offset_attribute (decl)\n   */\n \n #if 0\n-  if (GET_MODE_ALIGNMENT (mode_for_size (containing_object_size_in_bits))\n-       != containing_object_size_in_bits)\n+  if (GET_MODE_ALIGNMENT (TYPE_MODE (type)) != containing_object_size_in_bits)\n     warning_with_decl (decl, \"debugging info won't necessarily be reliable\");\n #endif\n \n@@ -2297,11 +2298,9 @@ src_coords_attribute (src_fileno, src_lineno)\n      register unsigned src_fileno;\n      register unsigned src_lineno;\n {\n-#ifdef DWARF_DECL_COORDINATES\n   ASM_OUTPUT_DWARF_ATTRIBUTE (asm_out_file, AT_src_coords);\n   ASM_OUTPUT_DWARF_DATA2 (asm_out_file, src_fileno);\n   ASM_OUTPUT_DWARF_DATA2 (asm_out_file, src_lineno);\n-#endif\n }\n \n /************************* end of attributes *****************************/\n@@ -2320,8 +2319,27 @@ name_and_src_coords_attributes (decl)\n   if (decl_name && IDENTIFIER_POINTER (decl_name))\n     {\n       name_attribute (IDENTIFIER_POINTER (decl_name));\n-      src_coords_attribute (lookup_filename (DECL_SOURCE_FILE (decl)),\n-\t\t\t    DECL_SOURCE_LINE (decl));\n+#ifdef DWARF_DECL_COORDINATES\n+      {\n+\tregister unsigned file_index;\n+\n+\t/* This is annoying, but we have to pop out of the .debug section\n+\t   for a moment while we call `lookup_filename' because calling it\n+\t   may cause a temporary switch into the .debug_sfnames section and\n+\t   most svr4 assemblers are not smart enough be be able to nest\n+\t   section switches to any depth greater than one.  Note that we\n+\t   also can't skirt this issue by delaying all output to the\n+\t   .debug_sfnames section unit the end of compilation because that\n+\t   would cause us to have inter-section forward references and\n+\t   Fred Fish sez that m68k/svr4 assemblers botch those.  */\n+\n+\tASM_OUTPUT_POP_SECTION (asm_out_file);\n+\tfile_index = lookup_filename (DECL_SOURCE_FILE (decl));\n+\tASM_OUTPUT_PUSH_SECTION (asm_out_file, DEBUG_SECTION);\n+\n+        src_coords_attribute (file_index, DECL_SOURCE_LINE (decl));\n+      }\n+#endif\n     }\n }\n "}]}