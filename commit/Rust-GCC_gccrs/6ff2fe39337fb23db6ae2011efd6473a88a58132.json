{"sha": "6ff2fe39337fb23db6ae2011efd6473a88a58132", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmZmMmZlMzkzMzdmYjIzZGI2YWUyMDExZWZkNjQ3M2E4OGE1ODEzMg==", "commit": {"author": {"name": "Kaveh R. Ghazi", "email": "ghazi@caip.rutgers.edu", "date": "2003-01-09T23:13:02Z"}, "committer": {"name": "Kaveh Ghazi", "email": "ghazi@gcc.gnu.org", "date": "2003-01-09T23:13:02Z"}, "message": "expr.c, [...]: Don't rely on the `DEFUN', `AND' or `__STDC__' macros.\n\n\t* expr.c, gjavah.c, javaop.h, jcf-dump.c, jcf-io.c, jcf-reader.c,\n\tjcf-write.c, jcf.h, jv-scan.c: Don't rely on the `DEFUN', `AND' or\n\t`__STDC__' macros.\n\nFrom-SVN: r61131", "tree": {"sha": "760b52810f3536e2b65c087bfc4d987320a2c3c1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/760b52810f3536e2b65c087bfc4d987320a2c3c1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6ff2fe39337fb23db6ae2011efd6473a88a58132", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6ff2fe39337fb23db6ae2011efd6473a88a58132", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6ff2fe39337fb23db6ae2011efd6473a88a58132", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6ff2fe39337fb23db6ae2011efd6473a88a58132/comments", "author": null, "committer": null, "parents": [{"sha": "b3339cf7a7bcf36a45d78484eef1edf32626a933", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b3339cf7a7bcf36a45d78484eef1edf32626a933", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b3339cf7a7bcf36a45d78484eef1edf32626a933"}], "stats": {"total": 216, "additions": 69, "deletions": 147}, "files": [{"sha": "eb1f9bd4ba8d27eecdf6af10a3025782c44f55d6", "filename": "gcc/java/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ff2fe39337fb23db6ae2011efd6473a88a58132/gcc%2Fjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ff2fe39337fb23db6ae2011efd6473a88a58132/gcc%2Fjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2FChangeLog?ref=6ff2fe39337fb23db6ae2011efd6473a88a58132", "patch": "@@ -1,5 +1,9 @@\n 2003-01-09  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n \n+\t* expr.c, gjavah.c, javaop.h, jcf-dump.c, jcf-io.c, jcf-reader.c,\n+\tjcf-write.c, jcf.h, jv-scan.c: Don't rely on the `DEFUN', `AND' or\n+\t`__STDC__' macros.\n+\n \t* jv-scan.c, parse.y: Remove VPARAMS, VA_OPEN, VA_FIXEDARG and\n \tVA_CLOSE.\n "}, {"sha": "7980a464225a251c5ce1d141e1ea1880ee80fcd2", "filename": "gcc/java/expr.c", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ff2fe39337fb23db6ae2011efd6473a88a58132/gcc%2Fjava%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ff2fe39337fb23db6ae2011efd6473a88a58132/gcc%2Fjava%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fexpr.c?ref=6ff2fe39337fb23db6ae2011efd6473a88a58132", "patch": "@@ -2678,7 +2678,6 @@ note_instructions (jcf, method)\n   jint INT_temp;\n \n #undef RET /* Defined by config/i386/i386.h */\n-#undef AND /* Causes problems with opcodes for iand and land. */\n #undef PTR\n #define BCODE byte_ops\n #define BYTE_type_node byte_type_node"}, {"sha": "32aa5f1cb4c4d39a9a335b5b6866c848e9835a6f", "filename": "gcc/java/gjavah.c", "status": "modified", "additions": 19, "deletions": 34, "changes": 53, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ff2fe39337fb23db6ae2011efd6473a88a58132/gcc%2Fjava%2Fgjavah.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ff2fe39337fb23db6ae2011efd6473a88a58132/gcc%2Fjava%2Fgjavah.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fgjavah.c?ref=6ff2fe39337fb23db6ae2011efd6473a88a58132", "patch": "@@ -313,8 +313,7 @@ jni_print_char (stream, ch)\n    string, an error results.  */\n \n static void\n-DEFUN(print_name, (stream, jcf, name_index),\n-      FILE* stream AND JCF* jcf AND int name_index)\n+print_name (FILE* stream, JCF* jcf, int name_index)\n {\n   if (JPOOL_TAG (jcf, name_index) != CONSTANT_Utf8)\n     {\n@@ -688,9 +687,8 @@ print_field_name (stream, jcf, name_index, flags)\n }\n \n static void\n-DEFUN(print_field_info, (stream, jcf, name_index, sig_index, flags),\n-      FILE *stream AND JCF* jcf\n-      AND int name_index AND int sig_index AND JCF_u2 flags)\n+print_field_info (FILE *stream, JCF* jcf, int name_index, int sig_index,\n+\t\t  JCF_u2 flags)\n {\n   char *override = NULL;\n \n@@ -797,9 +795,8 @@ DEFUN(print_field_info, (stream, jcf, name_index, sig_index, flags),\n \n \n static void\n-DEFUN(print_method_info, (stream, jcf, name_index, sig_index, flags),\n-      FILE *stream AND JCF* jcf\n-      AND int name_index AND int sig_index AND JCF_u2 flags)\n+print_method_info (FILE *stream, JCF* jcf, int name_index, int sig_index,\n+\t\t   JCF_u2 flags)\n {\n   const unsigned char *str;\n   int length, is_init = 0;\n@@ -1378,11 +1375,8 @@ decode_signature_piece (stream, signature, limit, need_space)\n }\n \n static void\n-DEFUN(print_c_decl, (stream, jcf, name_index, signature_index, is_init,\n-\t\t     name_override, flags),\n-      FILE* stream AND JCF* jcf\n-      AND int name_index AND int signature_index\n-      AND int is_init AND const char *name_override AND int flags)\n+print_c_decl (FILE* stream, JCF* jcf, int name_index, int signature_index,\n+\t      int is_init, const char *name_override, int flags)\n {\n   if (JPOOL_TAG (jcf, signature_index) != CONSTANT_Utf8)\n     {\n@@ -1436,11 +1430,9 @@ DEFUN(print_c_decl, (stream, jcf, name_index, signature_index, is_init,\n \n /* Print the unqualified method name followed by the signature. */\n static void\n-DEFUN(print_full_cxx_name, (stream, jcf, name_index, signature_index,\n-\t\t\t    is_init, name_override, flags),\n-      FILE* stream AND JCF* jcf\n-      AND int name_index AND int signature_index AND int is_init \n-      AND const char *name_override AND int flags)\n+print_full_cxx_name (FILE* stream, JCF* jcf, int name_index,\n+\t\t     int signature_index, int is_init,\n+\t\t     const char *name_override, int flags)\n {\n   int length = JPOOL_UTF_LENGTH (jcf, signature_index);\n   const unsigned char *str0 = JPOOL_UTF_DATA (jcf, signature_index);\n@@ -1529,11 +1521,9 @@ DEFUN(print_full_cxx_name, (stream, jcf, name_index, signature_index,\n \n /* This is a helper for print_stub_or_jni.  */\n static void\n-DEFUN (print_name_for_stub_or_jni, (stream, jcf, name_index, signature_index,\n-\t\t\t\t    is_init, name_override, flags),\n-       FILE *stream AND JCF *jcf\n-       AND int name_index AND int signature_index\n-       AND int is_init AND const char *name_override AND int flags)\n+print_name_for_stub_or_jni (FILE *stream, JCF *jcf, int name_index,\n+\t\t\t    int signature_index, int is_init,\n+\t\t\t    const char *name_override, int flags)\n {\n   const char *const prefix = flag_jni ? \"Java_\" : \"\";\n   print_cxx_classname (stream, prefix, jcf, jcf->this_class, 1);\n@@ -1544,11 +1534,9 @@ DEFUN (print_name_for_stub_or_jni, (stream, jcf, name_index, signature_index,\n }\n \n static void\n-DEFUN(print_stub_or_jni, (stream, jcf, name_index, signature_index, is_init,\n-\t\t\t  name_override, flags),\n-      FILE* stream AND JCF* jcf\n-      AND int name_index AND int signature_index\n-      AND int is_init AND const char *name_override AND int flags)\n+print_stub_or_jni (FILE* stream, JCF* jcf, int name_index,\n+\t\t   int signature_index, int is_init,\n+\t\t   const char *name_override, int flags)\n {\n   if (JPOOL_TAG (jcf, signature_index) != CONSTANT_Utf8)\n     {\n@@ -1629,8 +1617,7 @@ DEFUN(print_stub_or_jni, (stream, jcf, name_index, signature_index, is_init,\n }\n \n static void\n-DEFUN(print_mangled_classname, (stream, jcf, prefix, index),\n-      FILE *stream AND JCF *jcf AND const char *prefix AND int index)\n+print_mangled_classname (FILE *stream, JCF *jcf, const char *prefix, int index)\n {\n   int name_index = JPOOL_USHORT1 (jcf, index);\n   fputs (prefix, stream);\n@@ -1965,8 +1952,7 @@ print_class_decls (out, jcf, self)\n \f\n \n static void\n-DEFUN(process_file, (jcf, out),\n-      JCF *jcf AND FILE *out)\n+process_file (JCF *jcf, FILE *out)\n {\n   int code, i;\n   uint32 field_start, method_end, method_start;\n@@ -2314,8 +2300,7 @@ version ()\n }\n \n int\n-DEFUN(main, (argc, argv),\n-      int argc AND char** argv)\n+main (int argc, char** argv)\n {\n   JCF jcf;\n   int argi;"}, {"sha": "e9157015ad2cf405f5359522c745b826fb3fbf7f", "filename": "gcc/java/javaop.h", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ff2fe39337fb23db6ae2011efd6473a88a58132/gcc%2Fjava%2Fjavaop.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ff2fe39337fb23db6ae2011efd6473a88a58132/gcc%2Fjava%2Fjavaop.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fjavaop.h?ref=6ff2fe39337fb23db6ae2011efd6473a88a58132", "patch": "@@ -49,11 +49,7 @@ typedef unsigned int32\tuint32;\n #endif\n \n typedef uint16\t\t\tjchar;\n-#ifdef __STDC__\n typedef\tsigned char\t\tjbyte;\n-#else\n-typedef\tchar\t\t\tjbyte;\n-#endif\n typedef int16                   jshort;\n typedef int32                   jint;\n typedef int64                   jlong;"}, {"sha": "afe472fa8442102146016aed37ca5cb2507f2d82", "filename": "gcc/java/jcf-dump.c", "status": "modified", "additions": 14, "deletions": 27, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ff2fe39337fb23db6ae2011efd6473a88a58132/gcc%2Fjava%2Fjcf-dump.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ff2fe39337fb23db6ae2011efd6473a88a58132/gcc%2Fjava%2Fjcf-dump.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fjcf-dump.c?ref=6ff2fe39337fb23db6ae2011efd6473a88a58132", "patch": "@@ -111,8 +111,7 @@ static void print_exception_table PARAMS ((struct JCF *,\n #define PRINT_SIGNATURE_ARGS_ONLY 2\n \n static int\n-DEFUN(utf8_equal_string, (jcf, index, value),\n-      JCF *jcf AND int index AND const char * value)\n+utf8_equal_string (JCF *jcf, int index, const char * value)\n {\n   if (CPOOL_INDEX_IN_RANGE (&jcf->cpool, index)\n       && JPOOL_TAG (jcf, index) == CONSTANT_Utf8)\n@@ -346,8 +345,7 @@ DEFUN(utf8_equal_string, (jcf, index, value),\n #include \"javaop.h\"\n \n static void\n-DEFUN(print_constant_ref, (stream, jcf, index),\n-      FILE *stream AND JCF *jcf AND int index)\n+print_constant_ref (FILE *stream, JCF *jcf, int index)\n {\n   fprintf (stream, \"#%d=<\", index);\n   if (index <= 0 || index >= JPOOL_SIZE(jcf))\n@@ -362,8 +360,7 @@ DEFUN(print_constant_ref, (stream, jcf, index),\n    or 'm' (method flags). */\n \n static void\n-DEFUN (print_access_flags, (stream, flags, context),\n-       FILE *stream AND uint16 flags AND char context)\n+print_access_flags (FILE *stream, uint16 flags, char context)\n {\n   if (flags & ACC_PUBLIC) fprintf (stream, \" public\");\n   if (flags & ACC_PRIVATE) fprintf (stream, \" private\");\n@@ -387,8 +384,7 @@ DEFUN (print_access_flags, (stream, flags, context),\n \n \n static void\n-DEFUN(print_name, (stream, jcf, name_index),\n-      FILE* stream AND JCF* jcf AND int name_index)\n+print_name (FILE* stream, JCF* jcf, int name_index)\n {\n   if (JPOOL_TAG (jcf, name_index) != CONSTANT_Utf8)\n     fprintf (stream, \"<not a UTF8 constant>\");\n@@ -401,8 +397,7 @@ DEFUN(print_name, (stream, jcf, name_index),\n    print it tersely, otherwise more verbosely. */\n \n static void\n-DEFUN(print_constant_terse, (out, jcf, index, expected),\n-      FILE *out AND JCF *jcf AND int index AND int expected)\n+print_constant_terse (FILE *out, JCF *jcf, int index, int expected)\n {\n   if (! CPOOL_INDEX_IN_RANGE (&jcf->cpool, index))\n     fprintf (out, \"<constant pool index %d not in range>\", index);\n@@ -422,8 +417,7 @@ DEFUN(print_constant_terse, (out, jcf, index, expected),\n    If verbosity==2, add more descriptive text. */\n \n static void\n-DEFUN(print_constant, (out, jcf, index, verbosity),\n-      FILE *out AND JCF *jcf AND int index AND int verbosity)\n+print_constant (FILE *out, JCF *jcf, int index, int verbosity)\n {\n   int j, n;\n   jlong num;\n@@ -579,8 +573,7 @@ DEFUN(print_constant, (out, jcf, index, verbosity),\n }\n \n static void\n-DEFUN(print_constant_pool, (jcf),\n-      JCF *jcf)\n+print_constant_pool (JCF *jcf)\n {\n   int i;\n   for (i = 1; i < JPOOL_SIZE(jcf); i++)\n@@ -595,8 +588,8 @@ DEFUN(print_constant_pool, (jcf),\n }\n \n static void\n-DEFUN(print_signature_type, (stream, ptr, limit),\n-     FILE* stream AND const unsigned char **ptr AND const unsigned char *limit)\n+print_signature_type (FILE* stream, const unsigned char **ptr,\n+\t\t      const unsigned char *limit)\n {\n   int array_size;\n   if ((*ptr) >= limit)\n@@ -657,8 +650,7 @@ DEFUN(print_signature_type, (stream, ptr, limit),\n }\n \n static void\n-DEFUN(print_signature, (stream, jcf, signature_index, int options),\n-      FILE* stream AND JCF *jcf AND int signature_index AND int options)\n+print_signature (FILE* stream, JCF *jcf, int signature_index, int options)\n {\n   if (JPOOL_TAG (jcf, signature_index) != CONSTANT_Utf8)\n     print_constant_terse (out, jcf, signature_index, CONSTANT_Utf8);\n@@ -704,8 +696,7 @@ DEFUN(print_signature, (stream, jcf, signature_index, int options),\n \n \n static void\n-DEFUN(print_exception_table, (jcf, entries, count),\n-      JCF *jcf AND const unsigned char *entries AND int count)\n+print_exception_table (JCF *jcf, const unsigned char *entries, int count)\n {\n   /* Print exception table. */\n   int i = count;\n@@ -736,8 +727,7 @@ DEFUN(print_exception_table, (jcf, entries, count),\n #include \"jcf-reader.c\"\n \n static void\n-DEFUN(process_class, (jcf),\n-      JCF *jcf)\n+process_class (JCF *jcf)\n {\n   int code;\n   if (jcf_parse_preamble (jcf) != 0)\n@@ -849,8 +839,7 @@ version ()\n }\n \n int\n-DEFUN(main, (argc, argv),\n-      int argc AND char** argv)\n+main (int argc, char** argv)\n {\n   JCF jcf[1];\n   int argi, opt;\n@@ -1069,10 +1058,8 @@ DEFUN(main, (argc, argv),\n \f\n \n static void\n-DEFUN(disassemble_method, (jcf, byte_ops, len),\n-      JCF* jcf AND const unsigned char *byte_ops AND int len)\n+disassemble_method (JCF* jcf, const unsigned char *byte_ops, int len)\n {\n-#undef AND /* Causes problems with opcodes for iand and land. */\n #undef PTR\n   int PC;\n   int i;"}, {"sha": "d2e779337d4b239dd8e294fd231a5e96d0111b7d", "filename": "gcc/java/jcf-io.c", "status": "modified", "additions": 23, "deletions": 43, "changes": 66, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ff2fe39337fb23db6ae2011efd6473a88a58132/gcc%2Fjava%2Fjcf-io.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ff2fe39337fb23db6ae2011efd6473a88a58132/gcc%2Fjava%2Fjcf-io.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fjcf-io.c?ref=6ff2fe39337fb23db6ae2011efd6473a88a58132", "patch": "@@ -48,8 +48,7 @@ The Free Software Foundation is independent of Sun Microsystems, Inc.  */\n #endif\n \n int\n-DEFUN(jcf_unexpected_eof, (jcf, count),\n-      JCF *jcf AND int count ATTRIBUTE_UNUSED)\n+jcf_unexpected_eof (JCF *jcf, int count ATTRIBUTE_UNUSED)\n {\n   if (jcf->filename)\n     fprintf (stderr, \"Premature end of .class file %s.\\n\", jcf->filename);\n@@ -59,8 +58,7 @@ DEFUN(jcf_unexpected_eof, (jcf, count),\n }\n \n void\n-DEFUN(jcf_trim_old_input, (jcf),\n-      JCF *jcf)\n+jcf_trim_old_input (JCF *jcf)\n {\n   int count = jcf->read_ptr - jcf->buffer;\n   if (count > 0)\n@@ -72,8 +70,7 @@ DEFUN(jcf_trim_old_input, (jcf),\n }\n \n int\n-DEFUN(jcf_filbuf_from_stdio, (jcf, count),\n-      JCF *jcf AND int count)\n+jcf_filbuf_from_stdio (JCF *jcf, int count)\n {\n   FILE *file = (FILE*) (jcf->read_state);\n   if (count > jcf->buffer_end - jcf->read_ptr)\n@@ -108,8 +105,7 @@ struct ZipFile *SeenZipFiles = NULL;\n */\n \n ZipFile *\n-DEFUN(opendir_in_zip, (zipfile, is_system),\n-      const char *zipfile AND int is_system)\n+opendir_in_zip (const char *zipfile, int is_system)\n {\n   struct ZipFile* zipf;\n   char magic [4];\n@@ -154,9 +150,8 @@ DEFUN(opendir_in_zip, (zipfile, is_system),\n */\n \n int\n-DEFUN(open_in_zip, (jcf, zipfile, zipmember, is_system),\n-      JCF *jcf AND const char *zipfile AND const char *zipmember\n-      AND int is_system)\n+open_in_zip (JCF *jcf, const char *zipfile, const char *zipmember,\n+\t     int is_system)\n {\n   ZipDirectory *zipd;\n   int i, len;\n@@ -189,8 +184,7 @@ DEFUN(open_in_zip, (jcf, zipfile, zipmember, is_system),\n /* Read data from zip archive member. */\n \n int\n-DEFUN(read_zip_member, (jcf, zipd, zipf),\n-      JCF *jcf AND  ZipDirectory *zipd AND ZipFile *zipf)\n+read_zip_member (JCF *jcf,  ZipDirectory *zipd, ZipFile *zipf)\n {\n \t  jcf->filbuf = jcf_unexpected_eof;\n \t  jcf->zipd = (void *)zipd;\n@@ -237,8 +231,7 @@ DEFUN(read_zip_member, (jcf, zipd, zipf),\n }\n \n const char *\n-DEFUN(open_class, (filename, jcf, fd, dep_name),\n-      const char *filename AND JCF *jcf AND int fd AND const char *dep_name)\n+open_class (const char *filename, JCF *jcf, int fd, const char *dep_name)\n {\n   if (jcf)\n     {\n@@ -273,8 +266,7 @@ DEFUN(open_class, (filename, jcf, fd, dep_name),\n \n \n const char *\n-DEFUN(find_classfile, (filename, jcf, dep_name),\n-      char *filename AND JCF *jcf AND const char *dep_name)\n+find_classfile (char *filename, JCF *jcf, const char *dep_name)\n {\n   int fd = open (filename, O_RDONLY | O_BINARY);\n   if (fd < 0)\n@@ -289,8 +281,7 @@ DEFUN(find_classfile, (filename, jcf, dep_name),\n    dirent **).  */\n \n static int\n-DEFUN(compare_path, (key, entry),\n-      const void *key AND const void *entry)\n+compare_path (const void *key, const void *entry)\n {\n   return strcmp ((const char *) key, \n \t\t (*((const struct dirent **) entry))->d_name);\n@@ -299,8 +290,7 @@ DEFUN(compare_path, (key, entry),\n /* Returns nonzero if ENTRY names a .java or .class file.  */\n \n static int\n-DEFUN(java_or_class_file, (entry),\n-      const struct dirent *entry)\n+java_or_class_file (const struct dirent *entry)\n {\n   const char *base = basename (entry->d_name);\n   return (fnmatch (\"*.java\", base, 0) == 0 || \n@@ -325,8 +315,7 @@ typedef struct memoized_dirlist_entry\n    name.  */\n \n static int\n-DEFUN(memoized_dirlist_lookup_eq, (entry, key),\n-      const void *entry AND const void *key)\n+memoized_dirlist_lookup_eq (const void *entry, const void *key)\n {\n   return strcmp ((const char *) key,\n \t\t ((const memoized_dirlist_entry *) entry)->dir) == 0;\n@@ -343,8 +332,7 @@ static htab_t memoized_dirlists;\n    know that it cannot succeed.  FILENAME and BUF are as for stat.  */\n \n static int\n-DEFUN(caching_stat, (filename, buf),\n-      char *filename AND struct stat *buf)\n+caching_stat (char *filename, struct stat *buf)\n {\n #if JCF_USE_SCANDIR\n   char *sep;\n@@ -410,8 +398,7 @@ DEFUN(caching_stat, (filename, buf),\n    stored in TABLE_ENTRY (also a char *).  */\n \n static int\n-DEFUN(memoized_class_lookup_eq, (table_entry, classname),\n-      const void *table_entry AND const void *classname)\n+memoized_class_lookup_eq (const void *table_entry, const void *classname)\n {\n   return strcmp ((const char *)classname, (const char *)table_entry) == 0;\n }\n@@ -430,9 +417,8 @@ static htab_t memoized_class_lookups;\n    file. */\n \n const char *\n-DEFUN(find_class, (classname, classname_length, jcf, source_ok),\n-      const char *classname AND int classname_length AND JCF *jcf AND int source_ok)\n-\n+find_class (const char *classname, int classname_length, JCF *jcf,\n+\t    int source_ok)\n {\n   int fd;\n   int i, k, java = -1, class = -1;\n@@ -596,8 +582,7 @@ DEFUN(find_class, (classname, classname_length, jcf, source_ok),\n }\n \n void\n-DEFUN(jcf_print_char, (stream, ch),\n-      FILE *stream AND int ch)\n+jcf_print_char (FILE *stream, int ch)\n {\n   switch (ch)\n     {\n@@ -628,8 +613,7 @@ DEFUN(jcf_print_char, (stream, ch),\n /* Print UTF8 string at STR of length LENGTH bytes to STREAM. */\n \n void\n-DEFUN(jcf_print_utf8, (stream, str, length),\n-      FILE *stream AND register const unsigned char *str AND int length)\n+jcf_print_utf8 (FILE *stream, register const unsigned char *str, int length)\n {\n   const unsigned char * limit = str + length;\n   while (str < limit)\n@@ -647,9 +631,8 @@ DEFUN(jcf_print_utf8, (stream, str, length),\n /* Same as jcf_print_utf8, but print IN_CHAR as OUT_CHAR. */\n \n void\n-DEFUN(jcf_print_utf8_replace, (stream, str, length, in_char, out_char),\n-      FILE *stream AND const unsigned char *str AND int length\n-      AND int in_char AND int out_char)\n+jcf_print_utf8_replace (FILE *stream, const unsigned char *str, int length,\n+\t\t\tint in_char, int out_char)\n {\n   const unsigned char *limit = str + length;\n   while (str < limit)\n@@ -671,8 +654,7 @@ DEFUN(jcf_print_utf8_replace, (stream, str, length, in_char, out_char),\n    any classes, fields, or methods are valid.*/\n \n int\n-DEFUN(verify_constant_pool, (jcf),\n-      JCF *jcf)\n+verify_constant_pool (JCF *jcf)\n {\n   int i, n;\n   for (i = 1; i < JPOOL_SIZE (jcf); i++)\n@@ -721,8 +703,7 @@ DEFUN(verify_constant_pool, (jcf),\n }\n \n void\n-DEFUN(format_uint, (buffer, value, base),\n-      char *buffer AND uint64 value AND int base)\n+format_uint (char *buffer, uint64 value, int base)\n {\n #define WRITE_BUF_SIZE (4 + sizeof(uint64) * 8)\n   char buf[WRITE_BUF_SIZE];\n@@ -746,8 +727,7 @@ DEFUN(format_uint, (buffer, value, base),\n }\n \n void\n-DEFUN(format_int, (buffer, value, base),\n-      char *buffer AND jlong value AND int base)\n+format_int (char *buffer, jlong value, int base)\n {\n   uint64 abs_value;\n   if (value < 0)"}, {"sha": "6514a0e23d47d14aa12c04a3f4e1d28fdc8a21b5", "filename": "gcc/java/jcf-reader.c", "status": "modified", "additions": 8, "deletions": 16, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ff2fe39337fb23db6ae2011efd6473a88a58132/gcc%2Fjava%2Fjcf-reader.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ff2fe39337fb23db6ae2011efd6473a88a58132/gcc%2Fjava%2Fjcf-reader.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fjcf-reader.c?ref=6ff2fe39337fb23db6ae2011efd6473a88a58132", "patch": "@@ -108,8 +108,7 @@ skip_attribute (jcf, number_of_attribute)\n #endif\n \n static int\n-DEFUN(get_attribute, (jcf),\n-      JCF *jcf)\n+get_attribute (JCF *jcf)\n {\n   uint16 attribute_name = (JCF_FILL (jcf, 6), JCF_readu2 (jcf));\n   uint32 attribute_length = JCF_readu4 (jcf);\n@@ -241,8 +240,7 @@ DEFUN(get_attribute, (jcf),\n \n /* Read and handle the pre-amble. */\n static int\n-DEFUN(jcf_parse_preamble, (jcf),\n-      JCF* jcf)\n+jcf_parse_preamble (JCF* jcf)\n {\n   uint32 magic = (JCF_FILL (jcf, 8), JCF_readu4 (jcf));\n   uint16 minor_version ATTRIBUTE_UNUSED = JCF_readu2 (jcf);\n@@ -262,8 +260,7 @@ DEFUN(jcf_parse_preamble, (jcf),\n    Return -2 if a bad cross-reference (index of other constant) was seen.\n */\n static int\n-DEFUN(jcf_parse_constant_pool, (jcf),\n-      JCF* jcf)\n+jcf_parse_constant_pool (JCF* jcf)\n {\n   int i, n;\n   JPOOL_SIZE (jcf) = (JCF_FILL (jcf, 2), JCF_readu2 (jcf));\n@@ -328,8 +325,7 @@ DEFUN(jcf_parse_constant_pool, (jcf),\n /* Read various class flags and numbers. */\n \n static void\n-DEFUN(jcf_parse_class, (jcf),\n-      JCF* jcf)\n+jcf_parse_class (JCF* jcf)\n {\n   int i;\n   uint16 interfaces_count;\n@@ -357,8 +353,7 @@ DEFUN(jcf_parse_class, (jcf),\n \n /* Read fields. */\n static int\n-DEFUN(jcf_parse_fields, (jcf),\n-      JCF* jcf)\n+jcf_parse_fields (JCF* jcf)\n {\n   int i, j;\n   uint16 fields_count;\n@@ -397,8 +392,7 @@ DEFUN(jcf_parse_fields, (jcf),\n /* Read methods. */\n \n static int\n-DEFUN(jcf_parse_one_method, (jcf),\n-      JCF* jcf)\n+jcf_parse_one_method (JCF* jcf)\n {\n   int i;\n   uint16 access_flags = (JCF_FILL (jcf, 8), JCF_readu2 (jcf));\n@@ -421,8 +415,7 @@ DEFUN(jcf_parse_one_method, (jcf),\n }\n \n static int\n-DEFUN(jcf_parse_methods, (jcf),\n-      JCF* jcf)\n+jcf_parse_methods (JCF* jcf)\n {\n   int i;\n   uint16 methods_count;\n@@ -445,8 +438,7 @@ DEFUN(jcf_parse_methods, (jcf),\n \n /* Read attributes. */\n static int\n-DEFUN(jcf_parse_final_attributes, (jcf),\n-      JCF *jcf)\n+jcf_parse_final_attributes (JCF *jcf)\n {\n   int i;\n   uint16 attributes_count = (JCF_FILL (jcf, 2), JCF_readu2 (jcf));"}, {"sha": "aa4366a0da9556d2572886cbf4c4bb75ce481e76", "filename": "gcc/java/jcf-write.c", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ff2fe39337fb23db6ae2011efd6473a88a58132/gcc%2Fjava%2Fjcf-write.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ff2fe39337fb23db6ae2011efd6473a88a58132/gcc%2Fjava%2Fjcf-write.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fjcf-write.c?ref=6ff2fe39337fb23db6ae2011efd6473a88a58132", "patch": "@@ -31,7 +31,6 @@ The Free Software Foundation is independent of Sun Microsystems, Inc.  */\n #include \"real.h\"\n #include \"java-tree.h\"\n #include \"obstack.h\"\n-#undef AND\n #include \"rtl.h\"\n #include \"flags.h\"\n #include \"java-opcodes.h\""}, {"sha": "63f5871ded4c3cdc9864d72d02671751af3aec33", "filename": "gcc/java/jcf.h", "status": "modified", "additions": 0, "deletions": 19, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ff2fe39337fb23db6ae2011efd6473a88a58132/gcc%2Fjava%2Fjcf.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ff2fe39337fb23db6ae2011efd6473a88a58132/gcc%2Fjava%2Fjcf.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fjcf.h?ref=6ff2fe39337fb23db6ae2011efd6473a88a58132", "patch": "@@ -28,25 +28,6 @@ The Free Software Foundation is independent of Sun Microsystems, Inc.  */\n #ifndef GCC_JCF_H\n #define GCC_JCF_H\n #include \"javaop.h\"\n-#ifndef DEFUN\n-#if defined (__STDC__)\n-#define AND             ,\n-#define PTR             void *\n-#define DEFUN(name, arglist, args)      name(args)\n-#else\n-#define PTR             char *\n-#define AND             ;\n-#define DEFUN(name, arglist, args)      name arglist args;\n-#endif\n-#endif /* !DEFUN */\n-\n-#ifndef PARAMS\n-#if defined (__STDC__)\n-#define PARAMS (paramlist)    paramlist\n-#else\n-#define PARAMS (paramlist)    ()\n-#endif\n-#endif\n \n #ifndef JCF_u4\n #define JCF_u4 unsigned long"}, {"sha": "4d13451258ca8e660f74e8323159b10806cd058d", "filename": "gcc/java/jv-scan.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ff2fe39337fb23db6ae2011efd6473a88a58132/gcc%2Fjava%2Fjv-scan.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ff2fe39337fb23db6ae2011efd6473a88a58132/gcc%2Fjava%2Fjv-scan.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fjv-scan.c?ref=6ff2fe39337fb23db6ae2011efd6473a88a58132", "patch": "@@ -134,8 +134,7 @@ version ()\n \n /* jc1-lite main entry point */\n int\n-DEFUN (main, (argc, argv),\n-       int argc AND char **argv)\n+main (int argc, char **argv)\n {\n   int i = 1;\n   const char *output_file = NULL;"}]}