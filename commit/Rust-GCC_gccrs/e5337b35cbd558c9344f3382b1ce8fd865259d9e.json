{"sha": "e5337b35cbd558c9344f3382b1ce8fd865259d9e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTUzMzdiMzVjYmQ1NThjOTM0NGYzMzgyYjFjZThmZDg2NTI1OWQ5ZQ==", "commit": {"author": {"name": "Andrew Pinski", "email": "apinski@cavium.com", "date": "2012-07-22T05:55:47Z"}, "committer": {"name": "Andrew Pinski", "email": "pinskia@gcc.gnu.org", "date": "2012-07-22T05:55:47Z"}, "message": "vrp72.c: New test.\n\n2012-07-21  Andrew Pinski  <apinski@cavium.com>\n\n\t*  gcc.dg/tree-ssa/vrp72.c: New test.\n\t*  gcc.dg/tree-ssa/vrp73.c: New test.\n\t*  gcc.dg/tree-ssa/vrp74.c: New test.\n\t*  gcc.dg/tree-ssa/vrp75.c: New test.\n\nFrom-SVN: r189753", "tree": {"sha": "46e2d43fa646de22dc522e1e492f875f47581cdf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/46e2d43fa646de22dc522e1e492f875f47581cdf"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e5337b35cbd558c9344f3382b1ce8fd865259d9e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e5337b35cbd558c9344f3382b1ce8fd865259d9e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e5337b35cbd558c9344f3382b1ce8fd865259d9e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e5337b35cbd558c9344f3382b1ce8fd865259d9e/comments", "author": {"login": "apinski-cavium", "id": 6335315, "node_id": "MDQ6VXNlcjYzMzUzMTU=", "avatar_url": "https://avatars.githubusercontent.com/u/6335315?v=4", "gravatar_id": "", "url": "https://api.github.com/users/apinski-cavium", "html_url": "https://github.com/apinski-cavium", "followers_url": "https://api.github.com/users/apinski-cavium/followers", "following_url": "https://api.github.com/users/apinski-cavium/following{/other_user}", "gists_url": "https://api.github.com/users/apinski-cavium/gists{/gist_id}", "starred_url": "https://api.github.com/users/apinski-cavium/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/apinski-cavium/subscriptions", "organizations_url": "https://api.github.com/users/apinski-cavium/orgs", "repos_url": "https://api.github.com/users/apinski-cavium/repos", "events_url": "https://api.github.com/users/apinski-cavium/events{/privacy}", "received_events_url": "https://api.github.com/users/apinski-cavium/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "40287ad370cbfadd18e6e4e93375c79596d2776d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/40287ad370cbfadd18e6e4e93375c79596d2776d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/40287ad370cbfadd18e6e4e93375c79596d2776d"}], "stats": {"total": 121, "additions": 121, "deletions": 0}, "files": [{"sha": "2731f8d26e3ebdd95aa3ca967bbbfdd38c5621aa", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e5337b35cbd558c9344f3382b1ce8fd865259d9e/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e5337b35cbd558c9344f3382b1ce8fd865259d9e/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=e5337b35cbd558c9344f3382b1ce8fd865259d9e", "patch": "@@ -1,3 +1,10 @@\n+2012-07-21  Andrew Pinski  <apinski@cavium.com>\n+\n+\t*  gcc.dg/tree-ssa/vrp72.c: New test.\n+\t*  gcc.dg/tree-ssa/vrp73.c: New test.\n+\t*  gcc.dg/tree-ssa/vrp74.c: New test.\n+\t*  gcc.dg/tree-ssa/vrp75.c: New test.\n+\n 2012-07-21  Andrew Pinski  <apinski@cavium.com>\n \n \t* gcc.dg/tree-ssa/alias-21.c: New testcase."}, {"sha": "67c7602e378f95ee63d5d82ba1a05a24ee32043f", "filename": "gcc/testsuite/gcc.dg/tree-ssa/vrp72.c", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e5337b35cbd558c9344f3382b1ce8fd865259d9e/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fvrp72.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e5337b35cbd558c9344f3382b1ce8fd865259d9e/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fvrp72.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fvrp72.c?ref=e5337b35cbd558c9344f3382b1ce8fd865259d9e", "patch": "@@ -0,0 +1,30 @@\n+/* { dg-options \"-O2\" } */\n+\n+typedef unsigned long long uint64_t;\n+\n+static inline void cvmx_write64_uint64(uint64_t addr, uint64_t val)\n+{\n+  *(volatile uint64_t *)(long)addr = val;\n+};\n+static inline uint64_t cvmx_read64_uint64(uint64_t addr)\n+{\n+  return *(volatile uint64_t *)(long)addr;\n+};\n+\n+static inline void cvmx_write_csr(uint64_t csr_addr, uint64_t val)\n+{\n+    cvmx_write64_uint64 (csr_addr, val);\n+    if ((csr_addr >> 40) != 0x800118)\n+      linker_error ();\n+}\n+\n+int uart;\n+\n+int\n+main ()\n+{\n+  cvmx_write_csr (((((uint64_t) 2LL) << 62)\n+\t\t   | (0x0001180000000808ull+((uart&0xff)*1024))),\n+\t\t  0xfff);\n+  return 0;\n+}"}, {"sha": "48e7805fa071152ffffaf3bac378f689db5e6d55", "filename": "gcc/testsuite/gcc.dg/tree-ssa/vrp73.c", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e5337b35cbd558c9344f3382b1ce8fd865259d9e/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fvrp73.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e5337b35cbd558c9344f3382b1ce8fd865259d9e/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fvrp73.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fvrp73.c?ref=e5337b35cbd558c9344f3382b1ce8fd865259d9e", "patch": "@@ -0,0 +1,30 @@\n+/* { dg-options \"-O2\" } */\n+\n+typedef unsigned long long uint64_t;\n+\n+static inline void cvmx_write64_uint64(uint64_t addr, uint64_t val)\n+{\n+  *(volatile uint64_t *)(long)addr = val;\n+};\n+static inline uint64_t cvmx_read64_uint64(uint64_t addr)\n+{\n+  return *(volatile uint64_t *)(long)addr;\n+};\n+\n+static inline void cvmx_write_csr(uint64_t csr_addr, uint64_t val)\n+{\n+    cvmx_write64_uint64 (csr_addr, val);\n+    if ((csr_addr >> 40) == 0x800118)\n+      linker_error ();\n+}\n+\n+int dest_core, src_core;\n+\n+int\n+main ()\n+{\n+  cvmx_write_csr ((((((uint64_t)2LL) << 62)\n+\t\t    | ((0x0001070000000600ull+((dest_core&0xff)*8))))),\n+\t\t  1ull << src_core);\n+  return 0;\n+}"}, {"sha": "b15186fea0ba045179d54a23e6fc01f9394ccdc4", "filename": "gcc/testsuite/gcc.dg/tree-ssa/vrp74.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e5337b35cbd558c9344f3382b1ce8fd865259d9e/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fvrp74.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e5337b35cbd558c9344f3382b1ce8fd865259d9e/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fvrp74.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fvrp74.c?ref=e5337b35cbd558c9344f3382b1ce8fd865259d9e", "patch": "@@ -0,0 +1,23 @@\n+/* { dg-options \"-O2\" } */\n+\n+void abort (void);\n+void exit (int);\n+\n+__attribute__ ((noinline)) void\n+f (unsigned long long i)\n+{\n+  if (i <= 0x1000000000000000ull)\n+    {\n+      unsigned long long j = i | 0x1000000000000000ull;\n+      if (j == 0x1100000000000000ull)\n+\texit (0);\n+    }\n+}\n+\n+int\n+main ()\n+{\n+  f (0x0100000000000000ull);\n+  abort ();\n+}\n+"}, {"sha": "91fd3f71bd54fd302601a7e6646f6edfeb54f101", "filename": "gcc/testsuite/gcc.dg/tree-ssa/vrp75.c", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e5337b35cbd558c9344f3382b1ce8fd865259d9e/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fvrp75.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e5337b35cbd558c9344f3382b1ce8fd865259d9e/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fvrp75.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fvrp75.c?ref=e5337b35cbd558c9344f3382b1ce8fd865259d9e", "patch": "@@ -0,0 +1,31 @@\n+/* { dg-options \"-O2\" } */\n+\n+typedef unsigned long long uint64_t;\n+\n+static inline void cvmx_write64_uint64(uint64_t addr, uint64_t val)\n+{\n+  *(volatile uint64_t *)(long)addr = val;\n+};\n+static inline uint64_t cvmx_read64_uint64(uint64_t addr)\n+{\n+  return *(volatile uint64_t *)(long)addr;\n+};\n+static inline void cvmx_write_csr(uint64_t csr_addr, uint64_t val)\n+{\n+    cvmx_write64_uint64 (csr_addr, val);\n+    if ((csr_addr >> 40) != 0x800118)\n+      linker_error ();\n+}\n+\n+int interface;\n+int idx;\n+\n+int\n+main ()\n+{\n+    cvmx_write_csr((((((uint64_t) 2LL) << 62)\n+\t\t     | ((0x0001180008000208ull\n+\t\t\t + (((idx)&3)*2048)\n+\t\t\t + (((interface)&1)*0x8000000ull))))), 1);\n+  return 0;\n+}"}]}