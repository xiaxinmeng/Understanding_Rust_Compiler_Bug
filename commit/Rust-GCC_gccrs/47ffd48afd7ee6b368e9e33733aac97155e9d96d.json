{"sha": "47ffd48afd7ee6b368e9e33733aac97155e9d96d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDdmZmQ0OGFmZDdlZTZiMzY4ZTllMzM3MzNhYWM5NzE1NWU5ZDk2ZA==", "commit": {"author": {"name": "Stan Shebs", "email": "shebs@apple.com", "date": "2001-12-28T23:33:57Z"}, "committer": {"name": "Stan Shebs", "email": "shebs@gcc.gnu.org", "date": "2001-12-28T23:33:57Z"}, "message": "objc-torture.exp: Resync with c-torture.exp.\n\n\t* lib/objc-torture.exp: Resync with c-torture.exp.\n\t* lib/objc.exp: Load standard libraries.\n\nFrom-SVN: r48357", "tree": {"sha": "fe7ee545653c1959dea68f43abd3918a206059ee", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/fe7ee545653c1959dea68f43abd3918a206059ee"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/47ffd48afd7ee6b368e9e33733aac97155e9d96d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/47ffd48afd7ee6b368e9e33733aac97155e9d96d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/47ffd48afd7ee6b368e9e33733aac97155e9d96d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/47ffd48afd7ee6b368e9e33733aac97155e9d96d/comments", "author": null, "committer": null, "parents": [{"sha": "51a56a7d474daf301f46324da38208835a524f2c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/51a56a7d474daf301f46324da38208835a524f2c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/51a56a7d474daf301f46324da38208835a524f2c"}], "stats": {"total": 259, "additions": 128, "deletions": 131}, "files": [{"sha": "a0c6375bc5b2d2d2bbfc2d880c2b1b0e42c0af1a", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/47ffd48afd7ee6b368e9e33733aac97155e9d96d/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/47ffd48afd7ee6b368e9e33733aac97155e9d96d/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=47ffd48afd7ee6b368e9e33733aac97155e9d96d", "patch": "@@ -1,3 +1,8 @@\n+2001-12-28  Stan Shebs  <shebs@apple.com>\n+\n+\t* lib/objc-torture.exp: Resync with c-torture.exp.\n+\t* lib/objc.exp: Load standard libraries.\n+\n 2001-12-28  Jakub Jelinek  <jakub@redhat.com>\n \n \t* gcc.dg/gnu89-init-1.c: Adjust for the new behaviour, add some"}, {"sha": "fbde5ec94efaa0417fb7851b1ec5e4226c52f54a", "filename": "gcc/testsuite/lib/objc-torture.exp", "status": "modified", "additions": 119, "deletions": 131, "changes": 250, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/47ffd48afd7ee6b368e9e33733aac97155e9d96d/gcc%2Ftestsuite%2Flib%2Fobjc-torture.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/47ffd48afd7ee6b368e9e33733aac97155e9d96d/gcc%2Ftestsuite%2Flib%2Fobjc-torture.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Flib%2Fobjc-torture.exp?ref=47ffd48afd7ee6b368e9e33733aac97155e9d96d", "patch": "@@ -1,30 +1,46 @@\n-# Copyright (C) 1992, 1993, 1994, 1995, 1996, 1997 Free Software Foundation, Inc.\n+# Copyright (C) 1992-1998, 1999, 2000 Free Software Foundation, Inc.\n \n # This program is free software; you can redistribute it and/or modify\n # it under the terms of the GNU General Public License as published by\n # the Free Software Foundation; either version 2 of the License, or\n # (at your option) any later version.\n-# \n+#\n # This program is distributed in the hope that it will be useful,\n # but WITHOUT ANY WARRANTY; without even the implied warranty of\n # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n # GNU General Public License for more details.\n-# \n+#\n # You should have received a copy of the GNU General Public License\n # along with this program; if not, write to the Free Software\n # Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.\n \n # Please email any bugs, comments, and/or additions to this file to:\n-# bug-dejagnu.prep.ai.mit.edu\n+# bug-dejagnu@gnu.org.\n \n # This file was written by Rob Savoye. (rob@cygnus.com)\n \n+load_lib file-format.exp\n+\n # The default option list can be overridden by\n # TORTURE_OPTIONS=\"{ { list1 } ... { listN } }\"\n \n if ![info exists TORTURE_OPTIONS] {\n-    # FIXME: We should test -g at least once.\n-    set TORTURE_OPTIONS [list { -O }]\n+    # It is theoretically beneficial to group all of the O2/O3 options together,\n+    # as in many cases the compiler will generate identical executables for\n+    # all of them--and the objc-torture testsuite will skip testing identical\n+    # executables multiple times.\n+    # Also note that -finline-functions is explicitly included in one of the\n+    # items below, even though -O3 is also specified, because some ports may\n+    # choose to disable inlining functions by default, even when optimizing.\n+    set TORTURE_OPTIONS [list \\\n+\t{ -O0 } \\\n+\t{ -O1 } \\\n+\t{ -O2 } \\\n+\t{ -O3 -fomit-frame-pointer } \\\n+\t{ -O3 -fomit-frame-pointer -funroll-loops } \\\n+\t{ -O3 -fomit-frame-pointer -funroll-all-loops -finline-functions } \\\n+\t{ -O3 -g } \\\n+\t{ -Os } ]\n }\n \n \n@@ -40,7 +56,7 @@ foreach option $TORTURE_OPTIONS {\n }\n \n #\n-# objc-torture-compile -- runs the Tege C-torture test\n+# objc-torture-compile -- runs the Tege OBJC-torture test\n #\n # SRC is the full pathname of the testcase.\n # OPTION is the specific compiler flag we're testing (eg: -O2).\n@@ -65,53 +81,10 @@ proc objc-torture-compile { src option } {\n \n     # Run the compiler and analyze the results.\n     set options \"\"\n-    lappend options \"additional_flags=-w $option\"\n+    lappend options \"additional_flags=-w $option -I${srcdir}/../../libobjc\"\n \n     set comp_output [objc_target_compile \"$src\" \"$output\" object $options];\n-    \n-    # Set a few common compiler messages.\n-    set fatal_signal \"*Obj-C*: Internal compiler error: program*got fatal signal\"\n- \n-    if [string match \"$fatal_signal 6\" $comp_output] then {\n-\tobjc_fail $testcase \"Got Signal 6, $option\"\n-\tremote_file build delete $output\n-\treturn\n-    }\n-\n-    if [string match \"$fatal_signal 11\" $comp_output] then {\n-\tobjc_fail $testcase \"Got Signal 11, $option\"\n-\tremote_file build delete $output\n-\treturn\n-    }\n-\n-    # We shouldn't get these because of -w, but just in case.\n-    if [string match \"*Obj-C*:*warning:*\" $comp_output] then {\n-\twarning \"$testcase: (with warnings) $option\"\n-\tsend_log \"$comp_output\\n\"\n-\tunresolved \"$testcase, $option\"\n-\tremote_file build delete $output\n-\treturn\n-    }\n-\n-    set comp_output [prune_warnings $comp_output]\n-\n-    set unsupported_message [objc_check_unsupported_p $comp_output]\n-    if { $unsupported_message != \"\" } {\n-\tunsupported \"$testcase: $unsupported_message\"\n-\tremote_file build delete $output\n-\treturn\n-    }\n-\n-    # remove any leftover LF/CR to make sure any output is legit\n-    regsub -all -- \"\\[\\r\\n\\]*\" $comp_output \"\" comp_output\n-    # If any message remains, we fail.\n-    if ![string match \"\" $comp_output] then {\n-\tobjc_fail $testcase $option\n-\tremote_file build delete $output\n-\treturn\n-    }\n-\n-    objc_pass $testcase $option\n+    objc_check_compile $testcase $option $output $comp_output\n     remote_file build delete $output\n }\n \n@@ -120,29 +93,32 @@ proc objc-torture-compile { src option } {\n #\n # SRC is the full pathname of the testcase.\n #\n-# If the testcase has an associated .cexp file, we source that to run the\n-# test instead.  We use .cexp instead of .exp so that the testcase is still\n-# controlled by the main .exp driver (this is useful when one wants to only\n-# run the compile.exp tests for example - one need only pass compile.exp to\n-# dejagnu, and not compile.exp, foo1.exp, foo2.exp, etc.).\n+# If the testcase has an associated .x file, we source that to run the\n+# test instead.  We use .x so that we don't lengthen the existing filename\n+# to more than 14 chars.\n #\n-proc objc-torture-execute { src } {\n-    global tmpdir tool srcdir output \n+proc objc-torture-execute { src args } {\n+    global tmpdir tool srcdir output compiler_conditional_xfail_data\n \n+    if { [llength $args] > 0 } {\n+\tset additional_flags [lindex $args 0];\n+    } else {\n+\tset additional_flags \"\";\n+    }\n     # Check for alternate driver.\n-    if [file exists [file rootname $src].cexp] {\n-\tverbose \"Using alternate driver [file rootname [file tail $src]].cexp\" 2\n+    if [file exists [file rootname $src].x] {\n+\tverbose \"Using alternate driver [file rootname [file tail $src]].x\" 2\n \tset done_p 0\n-\tcatch \"set done_p \\[source [file rootname $src].cexp\\]\"\n+\tcatch \"set done_p \\[source [file rootname $src].x\\]\"\n \tif { $done_p } {\n \t    return\n \t}\n     }\n-   \n+\n     # Look for a loop within the source code - if we don't find one,\n     # don't pass -funroll[-all]-loops.\n     global torture_with_loops torture_without_loops\n-    if [expr [search_for $src \"do *\\[0-9\\]\"]+[search_for $src \"end *do\"]] then {\n+    if [expr [search_for $src \"for*(\"]+[search_for $src \"while*(\"]] then {\n \tset option_list $torture_with_loops\n     } else {\n \tset option_list $torture_without_loops\n@@ -159,85 +135,95 @@ proc objc-torture-execute { src } {\n \tset testcase \"[file tail [file dirname $src]]/[file tail $src]\"\n     }\n \n+    set count 0;\n+    set oldstatus \"foo\";\n     foreach option $option_list {\n-\t# torture_{compile,execute}_xfail are set by the .cexp script\n+\tif { $count > 0 } {\n+\t    set oldexec $execname;\n+\t}\n+\tset execname \"${executable}${count}\";\n+\tincr count;\n+\n+\t# torture_{compile,execute}_xfail are set by the .x script\n \t# (if present)\n \tif [info exists torture_compile_xfail] {\n \t    setup_xfail $torture_compile_xfail\n \t}\n-\tremote_file build delete $executable\n+\n+\t# torture_execute_before_{compile,execute} can be set by the .x script\n+\t# (if present)\n+\tif [info exists torture_eval_before_compile] {\n+            set ignore_me [eval $torture_eval_before_compile]\n+\t}\n+\n+\tremote_file build delete $execname;\n \tverbose \"Testing $testcase, $option\" 1\n \n \tset options \"\"\n \tlappend options \"additional_flags=-w $option -I${srcdir}/../../libobjc\"\n-\tset comp_output [objc_target_compile \"$src\" \"$executable\" executable $options];\n-\n-\t# Set a few common compiler messages.\n-\tset fatal_signal \"*Obj-C*: Internal compiler error: program*got fatal signal\"\n-\t\n-\tif [string match \"$fatal_signal 6\" $comp_output] then {\n-\t    objc_fail $testcase \"Got Signal 6, $option\"\n-\t    remote_file build delete $executable\n-\t    continue\n+\tif { $additional_flags != \"\" } {\n+\t    lappend options \"additional_flags=$additional_flags\";\n \t}\n-\t\n-\tif [string match \"$fatal_signal 11\" $comp_output] then {\n-\t    objc_fail $testcase \"Got Signal 11, $option\"\n-\t    remote_file build delete $executable\n-\t    continue\n-\t}\n-\t\n-\t# We shouldn't get these because of -w, but just in case.\n-\tif [string match \"*Obj-C*:*warning:*\" $comp_output] then {\n-\t    warning \"$testcase: (with warnings) $option\"\n-\t    send_log \"$comp_output\\n\"\n-\t    unresolved \"$testcase, $option\"\n-\t    remote_file build delete $executable\n-\t    continue\n-\t}\n-\t\n-\tset comp_output [prune_warnings $comp_output]\n-\t\n-\tset unsupported_message [objc_check_unsupported_p $comp_output]\n+\tset comp_output [objc_target_compile \"$src\" \"${execname}\" executable $options];\n \n-\tif { $unsupported_message != \"\" } {\n-\t    unsupported \"$testcase: $unsupported_message\"\n+\tif ![objc_check_compile \"$testcase compilation\" $option $execname $comp_output] {\n+\t    unresolved \"$testcase execution, $option\"\n+\t    remote_file build delete $execname\n \t    continue\n-\t} elseif ![file exists $executable] {\n-\t    if ![is3way] {\n-\t\tfail \"$testcase compilation, $option\"\n-\t\tuntested \"$testcase execution, $option\"\n-\t\tcontinue\n-\t    } else {\n-\t\t# FIXME: since we can't test for the existance of a remote\n-\t\t# file without short of doing an remote file list, we assume\n-\t\t# that since we got no output, it must have compiled.\n-\t\tpass \"$testcase compilation, $option\"\t\t\n-\t    }\n-\t} else {\n-\t    pass \"$testcase compilation, $option\"\n \t}\n \n \t# See if this source file uses \"long long\" types, if it does, and\n \t# no_long_long is set, skip execution of the test.\n \tif [target_info exists no_long_long] then {\n-\t    if [expr [search_for $src \"integer\\*8\"]] then {\n-\t\tuntested \"$testcase execution, $option\"\n+\t    if [expr [search_for $src \"long long\"]] then {\n+\t\tunsupported \"$testcase execution, $option\"\n \t\tcontinue\n \t    }\n \t}\n \n \tif [info exists torture_execute_xfail] {\n \t    setup_xfail $torture_execute_xfail\n \t}\n-\t\n-\tset result [objc_load \"$executable\" \"\" \"\"]\n-\tset status [lindex $result 0];\n-\tset output [lindex $result 1];\n-        if { $status == \"pass\" } {\n-\t    remote_file build delete $executable\n+\n+\tif [info exists torture_eval_before_execute] {\n+            set ignore_me [eval $torture_eval_before_execute]\n+\t}\n+\n+\n+\t# Sometimes we end up creating identical executables for two\n+\t# consecutive sets of different of compiler options.\n+\t#\n+\t# In such cases we know the result of this test will be identical\n+\t# to the result of the last test.\n+\t#\n+\t# So in cases where the time to load and run/simulate the test\n+\t# is relatively high, compare the two binaries and avoid rerunning\n+\t# tests if the executables are identical.\n+\t#\n+\t# Do not do this for native testing since the cost to load/execute\n+\t# the test is fairly small and the comparison step actually slows\n+\t# the entire process down because it usually does not \"hit\".\n+\tset skip 0;\n+\tif { ![isnative] && [info exists oldexec] } {\n+\t    if { [remote_file build cmp $oldexec $execname] == 0 } {\n+\t\tset skip 1;\n+\t    }\n+\t}\n+\tif { $skip == 0 } {\n+\t    set result [objc_load \"$execname\" \"\" \"\"]\n+\t    set status [lindex $result 0];\n+\t    set output [lindex $result 1];\n+\t}\n+        if { $oldstatus == \"pass\" } {\n+\t    remote_file build delete $oldexec;\n         }\n \t$status \"$testcase execution, $option\"\n+\tset oldstatus $status;\n+    }\n+    if [info exists status] {\n+\tif { $status == \"pass\" } {\n+\t    remote_file build delete $execname;\n+\t}\n     }\n }\n \n@@ -247,8 +233,7 @@ proc objc-torture-execute { src } {\n proc search_for { file pattern } {\n     set fd [open $file r]\n     while { [gets $fd cur_line]>=0 } {\n-\tset lower [string tolower $cur_line]\n-\tif [regexp \"$pattern\" $lower] then {\n+\tif [string match \"*$pattern*\" $cur_line] then {\n \t    close $fd\n \t    return 1\n \t}\n@@ -264,14 +249,12 @@ proc search_for { file pattern } {\n # SRC is the full pathname of the testcase, or just a file name in which case\n # we prepend $srcdir/$subdir.\n #\n-# If the testcase has an associated .cexp file, we source that to run the\n-# test instead.  We use .cexp instead of .exp so that the testcase is still\n-# controlled by the main .exp driver (this is useful when one wants to only\n-# run the compile.exp tests for example - one need only pass compile.exp to\n-# dejagnu, and not compile.exp, foo1.exp, foo2.exp, etc.).\n+# If the testcase has an associated .x file, we source that to run the\n+# test instead.  We use .x so that we don't lengthen the existing filename\n+# to more than 14 chars.\n #\n proc objc-torture { args } {\n-    global srcdir subdir\n+    global srcdir subdir compiler_conditional_xfail_data\n \n     set src [lindex $args 0];\n     if { [llength $args] > 1 } {\n@@ -286,31 +269,36 @@ proc objc-torture { args } {\n     }\n \n     # Check for alternate driver.\n-    if [file exists [file rootname $src].cexp] {\n-\tverbose \"Using alternate driver [file rootname [file tail $src]].cexp\" 2\n+    if [file exists [file rootname $src].x] {\n+\tverbose \"Using alternate driver [file rootname [file tail $src]].x\" 2\n \tset done_p 0\n-\tcatch \"set done_p \\[source [file rootname $src].cexp\\]\"\n+\tcatch \"set done_p \\[source [file rootname $src].x\\]\"\n \tif { $done_p } {\n \t    return\n \t}\n     }\n-   \n+\n     # Look for a loop within the source code - if we don't find one,\n     # don't pass -funroll[-all]-loops.\n     global torture_with_loops torture_without_loops\n-    if [expr [search_for $src \"do *\\[0-9\\]\"]+[search_for $src \"end *do\"]] then {\n+    if [expr [search_for $src \"for*(\"]+[search_for $src \"while*(\"]] then {\n \tset option_list $torture_with_loops\n     } else {\n \tset option_list $torture_without_loops\n     }\n \n     # loop through all the options\n     foreach option $option_list {\n-\t# torture_compile_xfail is set by the .cexp script (if present)\n+\t# torture_compile_xfail is set by the .x script (if present)\n \tif [info exists torture_compile_xfail] {\n \t    setup_xfail $torture_compile_xfail\n \t}\n \n+\t# torture_execute_before_compile is set by the .x script (if present)\n+\tif [info exists torture_eval_before_compile] {\n+            set ignore_me [eval $torture_eval_before_compile]\n+\t}\n+\n \tobjc-torture-compile $src \"$option $options\"\n     }\n }"}, {"sha": "7bd03cacf8274686a625e66b50ce22a60b9f94da", "filename": "gcc/testsuite/lib/objc.exp", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/47ffd48afd7ee6b368e9e33733aac97155e9d96d/gcc%2Ftestsuite%2Flib%2Fobjc.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/47ffd48afd7ee6b368e9e33733aac97155e9d96d/gcc%2Ftestsuite%2Flib%2Fobjc.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Flib%2Fobjc.exp?ref=47ffd48afd7ee6b368e9e33733aac97155e9d96d", "patch": "@@ -25,6 +25,10 @@\n # They are also used by the various testsuites to define the environment:\n # where to find stdio.h, libc.a, etc.\n \n+load_lib libgloss.exp\n+load_lib prune.exp\n+load_lib gcc-defs.exp\n+\n #\n # OBJC_UNDER_TEST is the compiler under test.\n #"}]}