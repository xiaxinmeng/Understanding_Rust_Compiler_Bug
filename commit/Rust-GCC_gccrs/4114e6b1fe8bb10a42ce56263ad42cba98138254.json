{"sha": "4114e6b1fe8bb10a42ce56263ad42cba98138254", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDExNGU2YjFmZThiYjEwYTQyY2U1NjI2M2FkNDJjYmE5ODEzODI1NA==", "commit": {"author": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2016-07-22T00:21:51Z"}, "committer": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2016-07-22T00:21:51Z"}, "message": "compiler: fix check for duplicate declaration\n    \n    The compiler check that issued a duplicate declaration error for\n        a, a, a := 1, 2, 3\n    was incorrectly issuing an error for\n        a, a, a = 1, 2, 3\n    While this is not particularly useful, it is valid Go.\n    \n    Test is https://golang.org/cl/25143.\n    \n    Reviewed-on: https://go-review.googlesource.com/25144\n\nFrom-SVN: r238618", "tree": {"sha": "a405735df12d959f1ef82e43673d94e0e33d96aa", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a405735df12d959f1ef82e43673d94e0e33d96aa"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4114e6b1fe8bb10a42ce56263ad42cba98138254", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4114e6b1fe8bb10a42ce56263ad42cba98138254", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4114e6b1fe8bb10a42ce56263ad42cba98138254", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4114e6b1fe8bb10a42ce56263ad42cba98138254/comments", "author": null, "committer": null, "parents": [{"sha": "a94aa329b4782892799592f149878d1f3bf10d51", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a94aa329b4782892799592f149878d1f3bf10d51", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a94aa329b4782892799592f149878d1f3bf10d51"}], "stats": {"total": 13, "additions": 10, "deletions": 3}, "files": [{"sha": "7e8d9d4b4418eb77915d87f365c0cd1d187b4055", "filename": "gcc/go/gofrontend/MERGE", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4114e6b1fe8bb10a42ce56263ad42cba98138254/gcc%2Fgo%2Fgofrontend%2FMERGE", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4114e6b1fe8bb10a42ce56263ad42cba98138254/gcc%2Fgo%2Fgofrontend%2FMERGE", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2FMERGE?ref=4114e6b1fe8bb10a42ce56263ad42cba98138254", "patch": "@@ -1,4 +1,4 @@\n-5ea5c078829ae83bccb598772fff7c1a04e23e65\n+4c88f31a83ca28963d29d6dc9fcdb2e9b093610c\n \n The first line of this file holds the git revision number of the last\n merge done from the gofrontend repository."}, {"sha": "d9f20401defbdcfd1e9ee6f06070ef8e8d5bfbc4", "filename": "gcc/go/gofrontend/parse.cc", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4114e6b1fe8bb10a42ce56263ad42cba98138254/gcc%2Fgo%2Fgofrontend%2Fparse.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4114e6b1fe8bb10a42ce56263ad42cba98138254/gcc%2Fgo%2Fgofrontend%2Fparse.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Fparse.cc?ref=4114e6b1fe8bb10a42ce56263ad42cba98138254", "patch": "@@ -2106,6 +2106,8 @@ Parse::simple_var_decl_or_assignment(const std::string& name,\n \n   std::set<std::string> uniq_idents;\n   uniq_idents.insert(name);\n+  std::string dup_name;\n+  Location dup_loc;\n \n   // We've seen one identifier.  If we see a comma now, this could be\n   // \"a, *p = 1, 2\".\n@@ -2145,8 +2147,10 @@ Parse::simple_var_decl_or_assignment(const std::string& name,\n \t  id = this->gogo_->pack_hidden_name(id, is_id_exported);\n \t  ins = uniq_idents.insert(id);\n \t  if (!ins.second && !Gogo::is_sink_name(id))\n-\t    error_at(id_location, \"multiple assignments to %s\",\n-\t\t     Gogo::message_name(id).c_str());\n+\t    {\n+\t      dup_name = Gogo::message_name(id);\n+\t      dup_loc = id_location;\n+\t    }\n \t  til.push_back(Typed_identifier(id, NULL, location));\n \t}\n \n@@ -2182,6 +2186,9 @@ Parse::simple_var_decl_or_assignment(const std::string& name,\n   go_assert(this->peek_token()->is_op(OPERATOR_COLONEQ));\n   const Token* token = this->advance_token();\n \n+  if (!dup_name.empty())\n+    error_at(dup_loc, \"multiple assignments to %s\", dup_name.c_str());\n+\n   if (p_range_clause != NULL && token->is_keyword(KEYWORD_RANGE))\n     {\n       this->range_clause_decl(&til, p_range_clause);"}]}