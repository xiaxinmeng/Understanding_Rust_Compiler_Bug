{"sha": "7467c975b3b98bd471bc375a2722dc81acc24931", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzQ2N2M5NzViM2I5OGJkNDcxYmMzNzVhMjcyMmRjODFhY2MyNDkzMQ==", "commit": {"author": {"name": "Joern Rennecke", "email": "amylaar@gcc.gnu.org", "date": "1999-11-11T14:36:30Z"}, "committer": {"name": "Joern Rennecke", "email": "amylaar@gcc.gnu.org", "date": "1999-11-11T14:36:30Z"}, "message": "Removed obsolete comment.\n\nFrom-SVN: r30488", "tree": {"sha": "204ff94dc55fc72fa3343be03a67e7e5fdd0dce3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/204ff94dc55fc72fa3343be03a67e7e5fdd0dce3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7467c975b3b98bd471bc375a2722dc81acc24931", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7467c975b3b98bd471bc375a2722dc81acc24931", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7467c975b3b98bd471bc375a2722dc81acc24931", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7467c975b3b98bd471bc375a2722dc81acc24931/comments", "author": null, "committer": null, "parents": [{"sha": "665853dc7a0c101f40e112eec3a7122dc7add26a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/665853dc7a0c101f40e112eec3a7122dc7add26a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/665853dc7a0c101f40e112eec3a7122dc7add26a"}], "stats": {"total": 8, "additions": 0, "deletions": 8}, "files": [{"sha": "46f29a069c77dafbeae8aa0f01e0634a44e74a96", "filename": "gcc/reload.c", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7467c975b3b98bd471bc375a2722dc81acc24931/gcc%2Freload.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7467c975b3b98bd471bc375a2722dc81acc24931/gcc%2Freload.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Freload.c?ref=7467c975b3b98bd471bc375a2722dc81acc24931", "patch": "@@ -4699,14 +4699,6 @@ find_reloads_address (mode, memrefloc, ad, loc, opnum, type, ind_levels, insn)\n      that the index needs a reload and find_reloads_address_1 will take care\n      of it.\n \n-     There is still a case when we might generate an extra reload,\n-     however.  In certain cases eliminate_regs will return a MEM for a REG\n-     (see the code there for details).  In those cases, memory_address_p\n-     applied to our address will return 0 so we will think that our offset\n-     must be too large.  But it might indeed be valid and the only problem\n-     is that a MEM is present where a REG should be.  This case should be\n-     very rare and there doesn't seem to be any way to avoid it.\n-\n      If we decide to do something here, it must be that\n      `double_reg_address_ok' is true and that this address rtl was made by\n      eliminate_regs.  We generate a reload of the fp/sp/ap + constant and"}]}