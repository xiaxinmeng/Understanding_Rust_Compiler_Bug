{"sha": "9855448d2240ff1e81395ea45fb7820aacc58038", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTg1NTQ0OGQyMjQwZmYxZTgxMzk1ZWE0NWZiNzgyMGFhY2M1ODAzOA==", "commit": {"author": {"name": "Jerry DeLisle", "email": "jvdelisle@gcc.gnu.org", "date": "2006-04-17T02:33:51Z"}, "committer": {"name": "Jerry DeLisle", "email": "jvdelisle@gcc.gnu.org", "date": "2006-04-17T02:33:51Z"}, "message": "re PR fortran/27138 (gfortran: read(*,*) myInt advances only one character on error)\n\n2006-04-14  Jerry DeLisle  <jvdelisle@gcc.gnu.org>\n\n\tPR libgfortran/27138\n\t* io/list_read.c (eat_line): New function.\n\t(parse_repeat): Use new function and free_saved.\n\t(read_logical): Same.\n\t(read_integer): Use new function.\n\t(parse_real): Use nml_bad_return and new function.\n\t(read_complex): Use new function and free_saved.\n\t(read_real): Same.\n\nFrom-SVN: r112999", "tree": {"sha": "0fe585a7085a7f9c87845982bda7cc878bcd0894", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0fe585a7085a7f9c87845982bda7cc878bcd0894"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9855448d2240ff1e81395ea45fb7820aacc58038", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9855448d2240ff1e81395ea45fb7820aacc58038", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9855448d2240ff1e81395ea45fb7820aacc58038", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9855448d2240ff1e81395ea45fb7820aacc58038/comments", "author": null, "committer": null, "parents": [{"sha": "b12cbf2cc559fa466b854d89bc4069d7282a881f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b12cbf2cc559fa466b854d89bc4069d7282a881f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b12cbf2cc559fa466b854d89bc4069d7282a881f"}], "stats": {"total": 52, "additions": 44, "deletions": 8}, "files": [{"sha": "160188d9c2e7176f30685b926b0623fca182a054", "filename": "libgfortran/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9855448d2240ff1e81395ea45fb7820aacc58038/libgfortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9855448d2240ff1e81395ea45fb7820aacc58038/libgfortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2FChangeLog?ref=9855448d2240ff1e81395ea45fb7820aacc58038", "patch": "@@ -1,3 +1,14 @@\n+2006-04-14  Jerry DeLisle  <jvdelisle@gcc.gnu.org>\n+\n+\tPR libgfortran/27138\n+\t* io/list_read.c (eat_line): New function.\n+\t(parse_repeat): Use new function and free_saved.\n+\t(read_logical): Same.\n+\t(read_integer): Use new function.\n+\t(parse_real): Use nml_bad_return and new function.\n+\t(read_complex): Use new function and free_saved.\n+\t(read_real): Same.\n+\n 2006-04-12  Jerry DeLisle  <jvdelisle@gcc.gnu.org>\n \n \tPR libgfortran/26766"}, {"sha": "0d1969b53484e0721361d59efb65237ceebc13b9", "filename": "libgfortran/io/list_read.c", "status": "modified", "additions": 33, "deletions": 8, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9855448d2240ff1e81395ea45fb7820aacc58038/libgfortran%2Fio%2Flist_read.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9855448d2240ff1e81395ea45fb7820aacc58038/libgfortran%2Fio%2Flist_read.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fio%2Flist_read.c?ref=9855448d2240ff1e81395ea45fb7820aacc58038", "patch": "@@ -375,6 +375,21 @@ finish_separator (st_parameter_dt *dtp)\n     }\n }\n \n+\n+/* This function reads characters through to the end of the current line and\n+   just ignores them.  */\n+\n+static void\n+eat_line (st_parameter_dt *dtp)\n+{\n+  char c;\n+  if (!is_internal_unit (dtp))\n+    do\n+      c = next_char (dtp);\n+    while (c != '\\n');\n+}\n+\n+\n /* This function is needed to catch bad conversions so that namelist can\n    attempt to see if dtp->u.p.saved_string contains a new object name rather\n    than a bad value.  */\n@@ -534,9 +549,11 @@ parse_repeat (st_parameter_dt *dtp)\n   return 0;\n \n  bad_repeat:\n+\n+  eat_line (dtp);\n+  free_saved (dtp);\n   st_sprintf (message, \"Bad repeat count in item %d of list input\",\n \t      dtp->u.p.item_count);\n-\n   generate_error (&dtp->common, ERROR_READ_VALUE, message);\n   return 1;\n }\n@@ -550,8 +567,6 @@ parse_repeat (st_parameter_dt *dtp)\n static void\n l_push_char (st_parameter_dt *dtp, char c)\n {\n-  char *new;\n-\n   if (dtp->u.p.line_buffer == NULL)\n     {\n       dtp->u.p.line_buffer = get_mem (SCRATCH_SIZE);\n@@ -677,9 +692,12 @@ read_logical (st_parameter_dt *dtp, int length)\n   if (nml_bad_return (dtp, c))\n     return;\n \n+  eat_line (dtp);\n+  free_saved (dtp);\n+  if (dtp->u.p.line_buffer != NULL)\n+    free_mem (dtp->u.p.line_buffer);\n   st_sprintf (message, \"Bad logical value while reading item %d\",\n \t      dtp->u.p.item_count);\n-\n   generate_error (&dtp->common, ERROR_READ_VALUE, message);\n   return;\n \n@@ -805,9 +823,9 @@ read_integer (st_parameter_dt *dtp, int length)\n \n   if (nml_bad_return (dtp, c))\n     return;\n-\n+  \n+  eat_line (dtp);\n   free_saved (dtp);\n-\n   st_sprintf (message, \"Bad integer for item %d in list input\",\n \t      dtp->u.p.item_count);\n   generate_error (&dtp->common, ERROR_READ_VALUE, message);\n@@ -1085,6 +1103,11 @@ parse_real (st_parameter_dt *dtp, void *buffer, int length)\n   return m;\n \n  bad:\n+\n+  if (nml_bad_return (dtp, c))\n+    return 0;\n+\n+  eat_line (dtp);\n   free_saved (dtp);\n   st_sprintf (message, \"Bad floating point number for item %d\",\n \t      dtp->u.p.item_count);\n@@ -1167,9 +1190,10 @@ read_complex (st_parameter_dt *dtp, int kind, size_t size)\n   if (nml_bad_return (dtp, c))\n     return;\n \n+  eat_line (dtp);\n+  free_saved (dtp);\n   st_sprintf (message, \"Bad complex value in item %d of list input\",\n \t      dtp->u.p.item_count);\n-\n   generate_error (&dtp->common, ERROR_READ_VALUE, message);\n }\n \n@@ -1381,9 +1405,10 @@ read_real (st_parameter_dt *dtp, int length)\n   if (nml_bad_return (dtp, c))\n     return;\n \n+  eat_line (dtp);\n+  free_saved (dtp);\n   st_sprintf (message, \"Bad real number in item %d of list input\",\n \t      dtp->u.p.item_count);\n-\n   generate_error (&dtp->common, ERROR_READ_VALUE, message);\n }\n "}]}