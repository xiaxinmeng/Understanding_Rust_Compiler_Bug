{"sha": "3981fbb65a43dff3a81ebc32c94d6f86bb4f9783", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Mzk4MWZiYjY1YTQzZGZmM2E4MWViYzMyYzk0ZDZmODZiYjRmOTc4Mw==", "commit": {"author": {"name": "Richard Sandiford", "email": "richard.sandiford@linaro.org", "date": "2017-09-05T19:57:47Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2017-09-05T19:57:47Z"}, "message": "Make targetm.get_mask_mode return an opt_mode\n\n...for consistency with mode_for_vector.\n\n2017-09-05  Richard Sandiford  <richard.sandiford@linaro.org>\n\ngcc/\n\t* target.def (get_mask_mode): Change return type to opt_mode.\n\tExpand commentary.\n\t* doc/tm.texi: Regenerate.\n\t* targhooks.h (default_get_mask_mode): Return an opt_mode.\n\t* targhooks.c (default_get_mask_mode): Likewise.\n\t* config/i386/i386.c (ix86_get_mask_mode): Likewise.\n\t* optabs-query.c (can_vec_mask_load_store_p): Update use of\n\ttargetm.get_mask_mode.\n\t* tree.c (build_truth_vector_type): Likewise.\n\nFrom-SVN: r251731", "tree": {"sha": "8affdf594e34f746a57a31d85951478c8b5be805", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8affdf594e34f746a57a31d85951478c8b5be805"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3981fbb65a43dff3a81ebc32c94d6f86bb4f9783", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3981fbb65a43dff3a81ebc32c94d6f86bb4f9783", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3981fbb65a43dff3a81ebc32c94d6f86bb4f9783", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3981fbb65a43dff3a81ebc32c94d6f86bb4f9783/comments", "author": null, "committer": null, "parents": [{"sha": "9da15d4097fa2fde5c2a5f1681db8fd04488a563", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9da15d4097fa2fde5c2a5f1681db8fd04488a563", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9da15d4097fa2fde5c2a5f1681db8fd04488a563"}], "stats": {"total": 83, "additions": 50, "deletions": 33}, "files": [{"sha": "f521a27e46d96fbcbf9104c2e1bed9a05ccb0eb2", "filename": "gcc/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3981fbb65a43dff3a81ebc32c94d6f86bb4f9783/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3981fbb65a43dff3a81ebc32c94d6f86bb4f9783/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=3981fbb65a43dff3a81ebc32c94d6f86bb4f9783", "patch": "@@ -1,3 +1,15 @@\n+2017-09-05  Richard Sandiford  <richard.sandiford@linaro.org>\n+\n+\t* target.def (get_mask_mode): Change return type to opt_mode.\n+\tExpand commentary.\n+\t* doc/tm.texi: Regenerate.\n+\t* targhooks.h (default_get_mask_mode): Return an opt_mode.\n+\t* targhooks.c (default_get_mask_mode): Likewise.\n+\t* config/i386/i386.c (ix86_get_mask_mode): Likewise.\n+\t* optabs-query.c (can_vec_mask_load_store_p): Update use of\n+\ttargetm.get_mask_mode.\n+\t* tree.c (build_truth_vector_type): Likewise.\n+\n 2017-09-05  Richard Sandiford  <richard.sandiford@linaro.org>\n \n \t* machmode.h (mode_for_vector): Return an opt_mode."}, {"sha": "4e93cc1043b0b588106f01063c34f9290506369f", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3981fbb65a43dff3a81ebc32c94d6f86bb4f9783/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3981fbb65a43dff3a81ebc32c94d6f86bb4f9783/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=3981fbb65a43dff3a81ebc32c94d6f86bb4f9783", "patch": "@@ -51714,7 +51714,7 @@ ix86_autovectorize_vector_sizes (void)\n \n /* Implemenation of targetm.vectorize.get_mask_mode.  */\n \n-static machine_mode\n+static opt_machine_mode\n ix86_get_mask_mode (unsigned nunits, unsigned vector_size)\n {\n   unsigned elem_size = vector_size / nunits;\n@@ -51732,7 +51732,7 @@ ix86_get_mask_mode (unsigned nunits, unsigned vector_size)\n \n   gcc_assert (elem_size * nunits == vector_size);\n \n-  return mode_for_vector (elem_mode, nunits).else_blk ();\n+  return mode_for_vector (elem_mode, nunits);\n }\n \n \f"}, {"sha": "c29d249d0d547cec35e0375811b24e3a9d9bff31", "filename": "gcc/doc/tm.texi", "status": "modified", "additions": 10, "deletions": 4, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3981fbb65a43dff3a81ebc32c94d6f86bb4f9783/gcc%2Fdoc%2Ftm.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3981fbb65a43dff3a81ebc32c94d6f86bb4f9783/gcc%2Fdoc%2Ftm.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Ftm.texi?ref=3981fbb65a43dff3a81ebc32c94d6f86bb4f9783", "patch": "@@ -5820,10 +5820,16 @@ mode returned by @code{TARGET_VECTORIZE_PREFERRED_SIMD_MODE}.\n The default is zero which means to not iterate over other vector sizes.\n @end deftypefn\n \n-@deftypefn {Target Hook} machine_mode TARGET_VECTORIZE_GET_MASK_MODE (unsigned @var{nunits}, unsigned @var{length})\n-This hook returns mode to be used for a mask to be used for a vector\n-of specified @var{length} with @var{nunits} elements.  By default an integer\n-vector mode of a proper size is returned.\n+@deftypefn {Target Hook} opt_machine_mode TARGET_VECTORIZE_GET_MASK_MODE (unsigned @var{nunits}, unsigned @var{length})\n+A vector mask is a value that holds one boolean result for every element\n+in a vector.  This hook returns the machine mode that should be used to\n+represent such a mask when the vector in question is @var{length} bytes\n+long and contains @var{nunits} elements.  The hook returns an empty\n+@code{opt_machine_mode} if no such mode exists.\n+\n+The default implementation returns the mode of an integer vector that\n+is @var{length} bytes long and that contains @var{nunits} elements,\n+if such a mode exists.\n @end deftypefn\n \n @deftypefn {Target Hook} {void *} TARGET_VECTORIZE_INIT_COST (struct loop *@var{loop_info})"}, {"sha": "81b1bd9ca683ecf4fafdde914d6e4b9312ce8862", "filename": "gcc/optabs-query.c", "status": "modified", "additions": 7, "deletions": 12, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3981fbb65a43dff3a81ebc32c94d6f86bb4f9783/gcc%2Foptabs-query.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3981fbb65a43dff3a81ebc32c94d6f86bb4f9783/gcc%2Foptabs-query.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Foptabs-query.c?ref=3981fbb65a43dff3a81ebc32c94d6f86bb4f9783", "patch": "@@ -531,12 +531,9 @@ can_vec_mask_load_store_p (machine_mode mode,\n   if (!VECTOR_MODE_P (vmode))\n     return false;\n \n-  mask_mode = targetm.vectorize.get_mask_mode (GET_MODE_NUNITS (vmode),\n-\t\t\t\t\t       GET_MODE_SIZE (vmode));\n-  if (mask_mode == VOIDmode)\n-    return false;\n-\n-  if (convert_optab_handler (op, vmode, mask_mode) != CODE_FOR_nothing)\n+  if ((targetm.vectorize.get_mask_mode\n+       (GET_MODE_NUNITS (vmode), GET_MODE_SIZE (vmode)).exists (&mask_mode))\n+      && convert_optab_handler (op, vmode, mask_mode) != CODE_FOR_nothing)\n     return true;\n \n   vector_sizes = targetm.vectorize.autovectorize_vector_sizes ();\n@@ -548,12 +545,10 @@ can_vec_mask_load_store_p (machine_mode mode,\n \tcontinue;\n       unsigned int nunits = cur / GET_MODE_SIZE (smode);\n       if (mode_for_vector (smode, nunits).exists (&vmode)\n-\t  && VECTOR_MODE_P (vmode))\n-\t{\n-\t  mask_mode = targetm.vectorize.get_mask_mode (nunits, cur);\n-\t  if (convert_optab_handler (op, vmode, mask_mode) != CODE_FOR_nothing)\n-\t    return true;\n-\t}\n+\t  && VECTOR_MODE_P (vmode)\n+\t  && targetm.vectorize.get_mask_mode (nunits, cur).exists (&mask_mode)\n+\t  && convert_optab_handler (op, vmode, mask_mode) != CODE_FOR_nothing)\n+\treturn true;\n     }\n   return false;\n }"}, {"sha": "110300cb58c9ca9ea1841a3708124b55db31ec57", "filename": "gcc/target.def", "status": "modified", "additions": 10, "deletions": 4, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3981fbb65a43dff3a81ebc32c94d6f86bb4f9783/gcc%2Ftarget.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3981fbb65a43dff3a81ebc32c94d6f86bb4f9783/gcc%2Ftarget.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftarget.def?ref=3981fbb65a43dff3a81ebc32c94d6f86bb4f9783", "patch": "@@ -1877,10 +1877,16 @@ The default is zero which means to not iterate over other vector sizes.\",\n /* Function to get a target mode for a vector mask.  */\n DEFHOOK\n (get_mask_mode,\n- \"This hook returns mode to be used for a mask to be used for a vector\\n\\\n-of specified @var{length} with @var{nunits} elements.  By default an integer\\n\\\n-vector mode of a proper size is returned.\",\n- machine_mode,\n+ \"A vector mask is a value that holds one boolean result for every element\\n\\\n+in a vector.  This hook returns the machine mode that should be used to\\n\\\n+represent such a mask when the vector in question is @var{length} bytes\\n\\\n+long and contains @var{nunits} elements.  The hook returns an empty\\n\\\n+@code{opt_machine_mode} if no such mode exists.\\n\\\n+\\n\\\n+The default implementation returns the mode of an integer vector that\\n\\\n+is @var{length} bytes long and that contains @var{nunits} elements,\\n\\\n+if such a mode exists.\",\n+ opt_machine_mode,\n  (unsigned nunits, unsigned length),\n  default_get_mask_mode)\n "}, {"sha": "cbc15abea5f35ba70da603c991d44d6a98180fc1", "filename": "gcc/targhooks.c", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3981fbb65a43dff3a81ebc32c94d6f86bb4f9783/gcc%2Ftarghooks.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3981fbb65a43dff3a81ebc32c94d6f86bb4f9783/gcc%2Ftarghooks.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftarghooks.c?ref=3981fbb65a43dff3a81ebc32c94d6f86bb4f9783", "patch": "@@ -1200,7 +1200,7 @@ default_autovectorize_vector_sizes (void)\n \n /* By defaults a vector of integers is used as a mask.  */\n \n-machine_mode\n+opt_machine_mode\n default_get_mask_mode (unsigned nunits, unsigned vector_size)\n {\n   unsigned elem_size = vector_size / nunits;\n@@ -1210,12 +1210,12 @@ default_get_mask_mode (unsigned nunits, unsigned vector_size)\n \n   gcc_assert (elem_size * nunits == vector_size);\n \n-  if (!mode_for_vector (elem_mode, nunits).exists (&vector_mode)\n-      || !VECTOR_MODE_P (vector_mode)\n-      || !targetm.vector_mode_supported_p (vector_mode))\n-    vector_mode = BLKmode;\n+  if (mode_for_vector (elem_mode, nunits).exists (&vector_mode)\n+      && VECTOR_MODE_P (vector_mode)\n+      && targetm.vector_mode_supported_p (vector_mode))\n+    return vector_mode;\n \n-  return vector_mode;\n+  return opt_machine_mode ();\n }\n \n /* By default, the cost model accumulates three separate costs (prologue,"}, {"sha": "5178086606159fd51f6b275c700c929b40774d91", "filename": "gcc/targhooks.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3981fbb65a43dff3a81ebc32c94d6f86bb4f9783/gcc%2Ftarghooks.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3981fbb65a43dff3a81ebc32c94d6f86bb4f9783/gcc%2Ftarghooks.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftarghooks.h?ref=3981fbb65a43dff3a81ebc32c94d6f86bb4f9783", "patch": "@@ -102,7 +102,7 @@ default_builtin_support_vector_misalignment (machine_mode mode,\n \t\t\t\t\t     int, bool);\n extern machine_mode default_preferred_simd_mode (scalar_mode mode);\n extern unsigned int default_autovectorize_vector_sizes (void);\n-extern machine_mode default_get_mask_mode (unsigned, unsigned);\n+extern opt_machine_mode default_get_mask_mode (unsigned, unsigned);\n extern void *default_init_cost (struct loop *);\n extern unsigned default_add_stmt_cost (void *, int, enum vect_cost_for_stmt,\n \t\t\t\t       struct _stmt_vec_info *, int,"}, {"sha": "7a70eb7760d55a431d6c72ffb9d7564178a08302", "filename": "gcc/tree.c", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3981fbb65a43dff3a81ebc32c94d6f86bb4f9783/gcc%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3981fbb65a43dff3a81ebc32c94d6f86bb4f9783/gcc%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.c?ref=3981fbb65a43dff3a81ebc32c94d6f86bb4f9783", "patch": "@@ -10243,10 +10243,8 @@ build_vector_type (tree innertype, int nunits)\n tree\n build_truth_vector_type (unsigned nunits, unsigned vector_size)\n {\n-  machine_mode mask_mode = targetm.vectorize.get_mask_mode (nunits,\n-\t\t\t\t\t\t\t    vector_size);\n-\n-  gcc_assert (mask_mode != VOIDmode);\n+  machine_mode mask_mode\n+    = targetm.vectorize.get_mask_mode (nunits, vector_size).else_blk ();\n \n   unsigned HOST_WIDE_INT vsize;\n   if (mask_mode == BLKmode)"}]}