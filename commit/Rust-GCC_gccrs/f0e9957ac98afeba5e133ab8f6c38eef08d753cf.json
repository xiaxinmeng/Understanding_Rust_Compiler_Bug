{"sha": "f0e9957ac98afeba5e133ab8f6c38eef08d753cf", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjBlOTk1N2FjOThhZmViYTVlMTMzYWI4ZjZjMzhlZWYwOGQ3NTNjZg==", "commit": {"author": {"name": "Roger Sayle", "email": "roger@eyesopen.com", "date": "2003-09-02T23:03:45Z"}, "committer": {"name": "Roger Sayle", "email": "sayle@gcc.gnu.org", "date": "2003-09-02T23:03:45Z"}, "message": "expr.c (expand_expr): The code following both_summands performs the same task as simplify_gen_binary.\n\n\n\t* expr.c (expand_expr): The code following both_summands performs\n\tthe same task as simplify_gen_binary.  Replace all gotos to\n\tboth_summands with a call to simplify_gen_binary and delete the\n\tnow unused label.\n\nFrom-SVN: r71006", "tree": {"sha": "2e97529b04b25d18eb4edd9f11c9f481d6e3f688", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2e97529b04b25d18eb4edd9f11c9f481d6e3f688"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f0e9957ac98afeba5e133ab8f6c38eef08d753cf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f0e9957ac98afeba5e133ab8f6c38eef08d753cf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f0e9957ac98afeba5e133ab8f6c38eef08d753cf", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f0e9957ac98afeba5e133ab8f6c38eef08d753cf/comments", "author": null, "committer": null, "parents": [{"sha": "5220823f534e9aa003b9fdccba45628d1db0ba08", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5220823f534e9aa003b9fdccba45628d1db0ba08", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5220823f534e9aa003b9fdccba45628d1db0ba08"}], "stats": {"total": 69, "additions": 14, "deletions": 55}, "files": [{"sha": "abd91f21f46cb13e1971abb53e6483bd634419d7", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f0e9957ac98afeba5e133ab8f6c38eef08d753cf/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f0e9957ac98afeba5e133ab8f6c38eef08d753cf/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=f0e9957ac98afeba5e133ab8f6c38eef08d753cf", "patch": "@@ -1,3 +1,10 @@\n+2003-09-02  Roger Sayle  <roger@eyesopen.com>\n+\n+\t* expr.c (expand_expr): The code following both_summands performs\n+\tthe same task as simplify_gen_binary.  Replace all gotos to\n+\tboth_summands with a call to simplify_gen_binary and delete the\n+\tnow unused label.\n+\n 2003-09-02  Jason Merrill  <jason@redhat.com>\n \n \tPR c++/7327"}, {"sha": "489aba4b496b47a65b2f5712d156791d4efe871d", "filename": "gcc/expr.c", "status": "modified", "additions": 7, "deletions": 55, "changes": 62, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f0e9957ac98afeba5e133ab8f6c38eef08d753cf/gcc%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f0e9957ac98afeba5e133ab8f6c38eef08d753cf/gcc%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpr.c?ref=f0e9957ac98afeba5e133ab8f6c38eef08d753cf", "patch": "@@ -8110,11 +8110,11 @@ expand_expr (tree exp, rtx target, enum machine_mode tmode, enum expand_modifier\n \t\t{\n \t\t  op1 = expand_expr (TREE_OPERAND (exp, 1), NULL_RTX,\n \t\t\t\t     VOIDmode, modifier);\n-\t\t  /* Don't go to both_summands if modifier\n-\t\t     says it's not right to return a PLUS.  */\n-\t\t  if (modifier != EXPAND_SUM && modifier != EXPAND_INITIALIZER)\n-\t\t    goto binop2;\n-\t\t  goto both_summands;\n+\t\t  /* Return a PLUS if modifier says it's OK.  */\n+\t\t  if (modifier == EXPAND_SUM\n+\t\t      || modifier == EXPAND_INITIALIZER)\n+\t\t    return simplify_gen_binary (PLUS, mode, op0, op1);\n+\t\t  goto binop2;\n \t\t}\n \t      /* Use immed_double_const to ensure that the constant is\n \t\t truncated according to the mode of OP1, then sign extended\n@@ -8161,55 +8161,7 @@ expand_expr (tree exp, rtx target, enum machine_mode tmode, enum expand_modifier\n \t\t\t   VOIDmode, modifier);\n       else\n \top1 = op0;\n-\n-      /* We come here from MINUS_EXPR when the second operand is a\n-         constant.  */\n-    both_summands:\n-      /* Make sure any term that's a sum with a constant comes last.  */\n-      if (GET_CODE (op0) == PLUS\n-\t  && CONSTANT_P (XEXP (op0, 1)))\n-\t{\n-\t  temp = op0;\n-\t  op0 = op1;\n-\t  op1 = temp;\n-\t}\n-      /* If adding to a sum including a constant,\n-\t associate it to put the constant outside.  */\n-      if (GET_CODE (op1) == PLUS\n-\t  && CONSTANT_P (XEXP (op1, 1)))\n-\t{\n-\t  rtx constant_term = const0_rtx;\n-\n-\t  temp = simplify_binary_operation (PLUS, mode, XEXP (op1, 0), op0);\n-\t  if (temp != 0)\n-\t    op0 = temp;\n-\t  /* Ensure that MULT comes first if there is one.  */\n-\t  else if (GET_CODE (op0) == MULT)\n-\t    op0 = gen_rtx_PLUS (mode, op0, XEXP (op1, 0));\n-\t  else\n-\t    op0 = gen_rtx_PLUS (mode, XEXP (op1, 0), op0);\n-\n-\t  /* Let's also eliminate constants from op0 if possible.  */\n-\t  op0 = eliminate_constant_term (op0, &constant_term);\n-\n-\t  /* CONSTANT_TERM and XEXP (op1, 1) are known to be constant, so\n-\t     their sum should be a constant.  Form it into OP1, since the\n-\t     result we want will then be OP0 + OP1.  */\n-\n-\t  temp = simplify_binary_operation (PLUS, mode, constant_term,\n-\t\t\t\t\t    XEXP (op1, 1));\n-\t  if (temp != 0)\n-\t    op1 = temp;\n-\t  else\n-\t    op1 = gen_rtx_PLUS (mode, constant_term, XEXP (op1, 1));\n-\t}\n-\n-      /* Put a constant term last and put a multiplication first.  */\n-      if (CONSTANT_P (op0) || GET_CODE (op1) == MULT)\n-\ttemp = op1, op1 = op0, op0 = temp;\n-\n-      temp = simplify_binary_operation (PLUS, mode, op0, op1);\n-      return temp ? temp : gen_rtx_PLUS (mode, op0, op1);\n+      return simplify_gen_binary (PLUS, mode, op0, op1);\n \n     case MINUS_EXPR:\n       /* For initializers, we are allowed to return a MINUS of two\n@@ -8256,7 +8208,7 @@ expand_expr (tree exp, rtx target, enum machine_mode tmode, enum expand_modifier\n       if (GET_CODE (op1) == CONST_INT)\n \t{\n \t  op1 = negate_rtx (mode, op1);\n-\t  goto both_summands;\n+\t  return simplify_gen_binary (PLUS, mode, op0, op1);\n \t}\n \n       goto binop2;"}]}