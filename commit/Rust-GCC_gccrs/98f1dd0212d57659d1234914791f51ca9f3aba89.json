{"sha": "98f1dd0212d57659d1234914791f51ca9f3aba89", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OThmMWRkMDIxMmQ1NzY1OWQxMjM0OTE0NzkxZjUxY2E5ZjNhYmE4OQ==", "commit": {"author": {"name": "Andrew Pinski", "email": "apinski@marvell.com", "date": "2021-09-03T02:12:29Z"}, "committer": {"name": "Andrew Pinski", "email": "apinski@marvell.com", "date": "2021-09-03T16:56:33Z"}, "message": "Fix some GC issues in the aarch64 back-end.\n\nI got some ICEs in my latest testsing while running the libstdc++ testsuite.\nI had noticed the problem was connected to types and had just touched the\nbuiltins code but nothing which could have caused this and I looked for\nsome types/variables that were not being marked with GTY.\n\nOK? Bootstrapped and tested on aarch64-linux-gnu with no regressions.\n\ngcc/ChangeLog:\n\n\t* config/aarch64/aarch64-builtins.c (struct aarch64_simd_type_info):\n\tMark with GTY.\n\t(aarch64_simd_types): Likewise.\n\t(aarch64_simd_intOI_type_node): Likewise.\n\t(aarch64_simd_intCI_type_node): Likewise.\n\t(aarch64_simd_intXI_type_node): Likewise.\n\t* config/aarch64/aarch64.h (aarch64_fp16_type_node): Likewise.\n\t(aarch64_fp16_ptr_type_node): Likewise.\n\t(aarch64_bf16_type_node): Likewise.\n\t(aarch64_bf16_ptr_type_node): Likewise.", "tree": {"sha": "8ce216d799ae9659b30532133e67b2f65443c48c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8ce216d799ae9659b30532133e67b2f65443c48c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/98f1dd0212d57659d1234914791f51ca9f3aba89", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/98f1dd0212d57659d1234914791f51ca9f3aba89", "html_url": "https://github.com/Rust-GCC/gccrs/commit/98f1dd0212d57659d1234914791f51ca9f3aba89", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/98f1dd0212d57659d1234914791f51ca9f3aba89/comments", "author": {"login": "apinski-cavium", "id": 6335315, "node_id": "MDQ6VXNlcjYzMzUzMTU=", "avatar_url": "https://avatars.githubusercontent.com/u/6335315?v=4", "gravatar_id": "", "url": "https://api.github.com/users/apinski-cavium", "html_url": "https://github.com/apinski-cavium", "followers_url": "https://api.github.com/users/apinski-cavium/followers", "following_url": "https://api.github.com/users/apinski-cavium/following{/other_user}", "gists_url": "https://api.github.com/users/apinski-cavium/gists{/gist_id}", "starred_url": "https://api.github.com/users/apinski-cavium/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/apinski-cavium/subscriptions", "organizations_url": "https://api.github.com/users/apinski-cavium/orgs", "repos_url": "https://api.github.com/users/apinski-cavium/repos", "events_url": "https://api.github.com/users/apinski-cavium/events{/privacy}", "received_events_url": "https://api.github.com/users/apinski-cavium/received_events", "type": "User", "site_admin": false}, "committer": {"login": "apinski-cavium", "id": 6335315, "node_id": "MDQ6VXNlcjYzMzUzMTU=", "avatar_url": "https://avatars.githubusercontent.com/u/6335315?v=4", "gravatar_id": "", "url": "https://api.github.com/users/apinski-cavium", "html_url": "https://github.com/apinski-cavium", "followers_url": "https://api.github.com/users/apinski-cavium/followers", "following_url": "https://api.github.com/users/apinski-cavium/following{/other_user}", "gists_url": "https://api.github.com/users/apinski-cavium/gists{/gist_id}", "starred_url": "https://api.github.com/users/apinski-cavium/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/apinski-cavium/subscriptions", "organizations_url": "https://api.github.com/users/apinski-cavium/orgs", "repos_url": "https://api.github.com/users/apinski-cavium/repos", "events_url": "https://api.github.com/users/apinski-cavium/events{/privacy}", "received_events_url": "https://api.github.com/users/apinski-cavium/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8af8abfbbace49e6e5e9413d4e661533437106a0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8af8abfbbace49e6e5e9413d4e661533437106a0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8af8abfbbace49e6e5e9413d4e661533437106a0"}], "stats": {"total": 18, "additions": 9, "deletions": 9}, "files": [{"sha": "eef9fc0f4440d7db359e53a7b4e21e48cf2a65f4", "filename": "gcc/config/aarch64/aarch64-builtins.c", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/98f1dd0212d57659d1234914791f51ca9f3aba89/gcc%2Fconfig%2Faarch64%2Faarch64-builtins.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/98f1dd0212d57659d1234914791f51ca9f3aba89/gcc%2Fconfig%2Faarch64%2Faarch64-builtins.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-builtins.c?ref=98f1dd0212d57659d1234914791f51ca9f3aba89", "patch": "@@ -593,7 +593,7 @@ enum aarch64_simd_type\n };\n #undef ENTRY\n \n-struct aarch64_simd_type_info\n+struct GTY(()) aarch64_simd_type_info\n {\n   enum aarch64_simd_type type;\n \n@@ -625,14 +625,14 @@ struct aarch64_simd_type_info\n \n #define ENTRY(E, M, Q, G)  \\\n   {E, \"__\" #E, #G \"__\" #E, NULL_TREE, NULL_TREE, E_##M##mode, qualifier_##Q},\n-static struct aarch64_simd_type_info aarch64_simd_types [] = {\n+static GTY(()) struct aarch64_simd_type_info aarch64_simd_types [] = {\n #include \"aarch64-simd-builtin-types.def\"\n };\n #undef ENTRY\n \n-static tree aarch64_simd_intOI_type_node = NULL_TREE;\n-static tree aarch64_simd_intCI_type_node = NULL_TREE;\n-static tree aarch64_simd_intXI_type_node = NULL_TREE;\n+static GTY(()) tree aarch64_simd_intOI_type_node = NULL_TREE;\n+static GTY(()) tree aarch64_simd_intCI_type_node = NULL_TREE;\n+static GTY(()) tree aarch64_simd_intXI_type_node = NULL_TREE;\n \n /* The user-visible __fp16 type, and a pointer to that type.  Used\n    across the back-end.  */"}, {"sha": "a5ba6c240372100a8998ac6a873f1f67728a700e", "filename": "gcc/config/aarch64/aarch64.h", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/98f1dd0212d57659d1234914791f51ca9f3aba89/gcc%2Fconfig%2Faarch64%2Faarch64.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/98f1dd0212d57659d1234914791f51ca9f3aba89/gcc%2Fconfig%2Faarch64%2Faarch64.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64.h?ref=98f1dd0212d57659d1234914791f51ca9f3aba89", "patch": "@@ -1262,13 +1262,13 @@ extern const char *host_detect_local_cpu (int argc, const char **argv);\n \n /* This type is the user-visible __fp16, and a pointer to that type.  We\n    need it in many places in the backend.  Defined in aarch64-builtins.c.  */\n-extern tree aarch64_fp16_type_node;\n-extern tree aarch64_fp16_ptr_type_node;\n+extern GTY(()) tree aarch64_fp16_type_node;\n+extern GTY(()) tree aarch64_fp16_ptr_type_node;\n \n /* This type is the user-visible __bf16, and a pointer to that type.  Defined\n    in aarch64-builtins.c.  */\n-extern tree aarch64_bf16_type_node;\n-extern tree aarch64_bf16_ptr_type_node;\n+extern GTY(()) tree aarch64_bf16_type_node;\n+extern GTY(()) tree aarch64_bf16_ptr_type_node;\n \n /* The generic unwind code in libgcc does not initialize the frame pointer.\n    So in order to unwind a function using a frame pointer, the very first"}]}