{"sha": "4009f2e7f047aafc40fc9a27d884497e87ae0c05", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDAwOWYyZTdmMDQ3YWFmYzQwZmM5YTI3ZDg4NDQ5N2U4N2FlMGMwNQ==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2007-11-19T21:35:13Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2007-11-19T21:35:13Z"}, "message": "PR debug/29436, c/32326\n\n        PR debug/29436, c/32326\n        * tree.c (build_type_attribute_qual_variant): Refuse to make\n        a distinct copy of a struct/enum type.  Use build_distinct_type_copy.\n        * doc/extend.texi (Type Attributes): Don't encourage people to add\n        attributes to struct/enum types in a typedef.  Fix\n        transparent_union example.\n\n        * tree-inline.c (remap_type_1): Remove code that's redundant with\n        remap_type.\n        (build_duplicate_type): Set id.copy_decl.\n        * c-common.c (handle_transparent_union_attribute): Simplify logic.\n\nFrom-SVN: r130297", "tree": {"sha": "1d16dbdc75464cebb92ce8862847635b43953c3f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1d16dbdc75464cebb92ce8862847635b43953c3f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4009f2e7f047aafc40fc9a27d884497e87ae0c05", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4009f2e7f047aafc40fc9a27d884497e87ae0c05", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4009f2e7f047aafc40fc9a27d884497e87ae0c05", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4009f2e7f047aafc40fc9a27d884497e87ae0c05/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "4d4447b56b603b0786a0de3601ba45618dc6816c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4d4447b56b603b0786a0de3601ba45618dc6816c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4d4447b56b603b0786a0de3601ba45618dc6816c"}], "stats": {"total": 87, "additions": 44, "deletions": 43}, "files": [{"sha": "15bd247d5b23ca01fe3b93dda5c288b7c063ccd1", "filename": "gcc/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4009f2e7f047aafc40fc9a27d884497e87ae0c05/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4009f2e7f047aafc40fc9a27d884497e87ae0c05/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=4009f2e7f047aafc40fc9a27d884497e87ae0c05", "patch": "@@ -1,3 +1,17 @@\n+2007-11-19  Jason Merrill  <jason@redhat.com>\n+\n+\tPR debug/29436, c/32326\n+\t* tree.c (build_type_attribute_qual_variant): Refuse to make\n+\ta distinct copy of a struct/enum type.  Use build_distinct_type_copy.\n+\t* doc/extend.texi (Type Attributes): Don't encourage people to add\n+\tattributes to struct/enum types in a typedef.  Fix\n+\ttransparent_union example.\n+\n+\t* tree-inline.c (remap_type_1): Remove code that's redundant with\n+\tremap_type.\n+\t(build_duplicate_type): Set id.copy_decl.\n+\t* c-common.c (handle_transparent_union_attribute): Simplify logic.\n+\n 2007-11-19  Peter Bergner  <bergner@vnet.ibm.com>\n \n \t* config/rs6000/rs6000.c (invalid_e500_subreg,"}, {"sha": "edc9b2c17fb356590a6b03c171fd4b2222ee7735", "filename": "gcc/c-common.c", "status": "modified", "additions": 4, "deletions": 12, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4009f2e7f047aafc40fc9a27d884497e87ae0c05/gcc%2Fc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4009f2e7f047aafc40fc9a27d884497e87ae0c05/gcc%2Fc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-common.c?ref=4009f2e7f047aafc40fc9a27d884497e87ae0c05", "patch": "@@ -5007,21 +5007,13 @@ handle_transparent_union_attribute (tree *node, tree name,\n \t\t\t\t    tree ARG_UNUSED (args), int flags,\n \t\t\t\t    bool *no_add_attrs)\n {\n-  tree type = NULL;\n+  tree type;\n \n   *no_add_attrs = true;\n \n-  if (DECL_P (*node))\n-    {\n-      if (TREE_CODE (*node) != TYPE_DECL)\n-\tgoto ignored;\n-      node = &TREE_TYPE (*node);\n-      type = *node;\n-    }\n-  else if (TYPE_P (*node))\n-    type = *node;\n-  else\n-    goto ignored;\n+  if (TREE_CODE (*node) == TYPE_DECL)\n+    node = &TREE_TYPE (*node);\n+  type = *node;\n \n   if (TREE_CODE (type) == UNION_TYPE)\n     {"}, {"sha": "c86052e2959318e378735aea04602da5586fd5c8", "filename": "gcc/doc/extend.texi", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4009f2e7f047aafc40fc9a27d884497e87ae0c05/gcc%2Fdoc%2Fextend.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4009f2e7f047aafc40fc9a27d884497e87ae0c05/gcc%2Fdoc%2Fextend.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fextend.texi?ref=4009f2e7f047aafc40fc9a27d884497e87ae0c05", "patch": "@@ -3938,8 +3938,9 @@ attributes in header files without being concerned about a possible\n macro of the same name.  For example, you may use @code{__aligned__}\n instead of @code{aligned}.\n \n-You may specify type attributes either in a @code{typedef} declaration\n-or in an enum, struct or union type declaration or definition.\n+You may specify type attributes in an enum, struct or union type\n+declaration or definition, or for other types in a @code{typedef}\n+declaration.\n \n For an enum, struct or union type, you may specify attributes either\n between the enum, struct or union tag and the name of the type, or\n@@ -4098,11 +4099,11 @@ less useful.  Instead, @code{<sys/wait.h>} might define the interface\n as follows:\n \n @smallexample\n-typedef union\n+typedef union __attribute__ ((__transparent_union__))\n   @{\n     int *__ip;\n     union wait *__up;\n-  @} wait_status_ptr_t __attribute__ ((__transparent_union__));\n+  @} wait_status_ptr_t;\n \n pid_t wait (wait_status_ptr_t);\n @end smallexample"}, {"sha": "39c010d91e68cbb457ee1d03b00c2fde769a2e99", "filename": "gcc/testsuite/gcc.c-torture/execute/mayalias-2.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4009f2e7f047aafc40fc9a27d884497e87ae0c05/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fmayalias-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4009f2e7f047aafc40fc9a27d884497e87ae0c05/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fmayalias-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fmayalias-2.c?ref=4009f2e7f047aafc40fc9a27d884497e87ae0c05", "patch": "@@ -1,5 +1,4 @@\n-struct S { short x; };\n-typedef struct S __attribute__((__may_alias__)) test;\n+typedef struct __attribute__((__may_alias__)) { short x; } test;\n \n int f() {\n   int a=10;"}, {"sha": "53bd07ab19afeb4a877b4ceb1337a2f6588e1c37", "filename": "gcc/testsuite/gcc.c-torture/execute/mayalias-3.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4009f2e7f047aafc40fc9a27d884497e87ae0c05/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fmayalias-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4009f2e7f047aafc40fc9a27d884497e87ae0c05/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fmayalias-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fmayalias-3.c?ref=4009f2e7f047aafc40fc9a27d884497e87ae0c05", "patch": "@@ -1,5 +1,4 @@\n-struct S { short x; };\n-typedef struct S __attribute__((__may_alias__)) test;\n+typedef struct __attribute__((__may_alias__)) { short x; } test;\n \n test *p;\n "}, {"sha": "da52d6c82e2c98d63dbd2de2de88529faf0ffd2c", "filename": "gcc/tree-inline.c", "status": "modified", "additions": 1, "deletions": 16, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4009f2e7f047aafc40fc9a27d884497e87ae0c05/gcc%2Ftree-inline.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4009f2e7f047aafc40fc9a27d884497e87ae0c05/gcc%2Ftree-inline.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-inline.c?ref=4009f2e7f047aafc40fc9a27d884497e87ae0c05", "patch": "@@ -273,24 +273,8 @@ remap_decl (tree decl, copy_body_data *id)\n static tree\n remap_type_1 (tree type, copy_body_data *id)\n {\n-  tree *node;\n   tree new, t;\n \n-  if (type == NULL)\n-    return type;\n-\n-  /* See if we have remapped this type.  */\n-  node = (tree *) pointer_map_contains (id->decl_map, type);\n-  if (node)\n-    return *node;\n-\n-  /* The type only needs remapping if it's variably modified.  */\n-  if (! variably_modified_type_p (type, id->src_fn))\n-    {\n-      insert_decl_map (id, type, type);\n-      return type;\n-    }\n-\n   /* We do need a copy.  build and register it now.  If this is a pointer or\n      reference type, remap the designated type and make a new pointer or\n      reference type.  */\n@@ -3593,6 +3577,7 @@ build_duplicate_type (tree type)\n   id.dst_fn = current_function_decl;\n   id.src_cfun = cfun;\n   id.decl_map = pointer_map_create ();\n+  id.copy_decl = copy_decl_no_change;\n \n   type = remap_type_1 (type, &id);\n "}, {"sha": "9c6547480b7f006817a77633b396e8c2e6c0d69b", "filename": "gcc/tree.c", "status": "modified", "additions": 18, "deletions": 7, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4009f2e7f047aafc40fc9a27d884497e87ae0c05/gcc%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4009f2e7f047aafc40fc9a27d884497e87ae0c05/gcc%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.c?ref=4009f2e7f047aafc40fc9a27d884497e87ae0c05", "patch": "@@ -3666,15 +3666,26 @@ build_type_attribute_qual_variant (tree ttype, tree attribute, int quals)\n       tree ntype;\n       enum tree_code code = TREE_CODE (ttype);\n \n-      ntype = copy_node (ttype);\n+      /* Building a distinct copy of a tagged type is inappropriate; it\n+\t causes breakage in code that expects there to be a one-to-one\n+\t relationship between a struct and its fields.\n+\t build_duplicate_type is another solution (as used in\n+\t handle_transparent_union_attribute), but that doesn't play well\n+\t with the stronger C++ type identity model.  */\n+      if (TREE_CODE (ttype) == RECORD_TYPE\n+\t  || TREE_CODE (ttype) == UNION_TYPE\n+\t  || TREE_CODE (ttype) == QUAL_UNION_TYPE\n+\t  || TREE_CODE (ttype) == ENUMERAL_TYPE)\n+\t{\n+\t  warning (OPT_Wattributes,\n+\t\t   \"ignoring attributes applied to %qT after definition\",\n+\t\t   TYPE_MAIN_VARIANT (ttype));\n+\t  return build_qualified_type (ttype, quals);\n+\t}\n \n-      TYPE_POINTER_TO (ntype) = 0;\n-      TYPE_REFERENCE_TO (ntype) = 0;\n-      TYPE_ATTRIBUTES (ntype) = attribute;\n+      ntype = build_distinct_type_copy (ttype);\n \n-      /* Create a new main variant of TYPE.  */\n-      TYPE_MAIN_VARIANT (ntype) = ntype;\n-      TYPE_NEXT_VARIANT (ntype) = 0;\n+      TYPE_ATTRIBUTES (ntype) = attribute;\n       set_type_quals (ntype, TYPE_UNQUALIFIED);\n \n       hashcode = iterative_hash_object (code, hashcode);"}]}