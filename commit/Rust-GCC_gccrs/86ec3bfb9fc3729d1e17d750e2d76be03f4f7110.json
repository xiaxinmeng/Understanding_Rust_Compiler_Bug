{"sha": "86ec3bfb9fc3729d1e17d750e2d76be03f4f7110", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODZlYzNiZmI5ZmMzNzI5ZDFlMTdkNzUwZTJkNzZiZTAzZjRmNzExMA==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2016-07-07T13:20:30Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2016-07-07T13:20:30Z"}, "message": "[multiple changes]\n\n2016-07-07  Ed Schonberg  <schonberg@adacore.com>\n\n\t* exp_ch6.adb (Expand_Internal_Init_Call): Subsidiary procedure\n\tto Expand_Protected_ Subprogram_Call, to handle properly a\n\tcall to a protected function that provides the initialization\n\texpression for a private component of the same protected type.\n\t* sem_ch9.adb (Analyze_Protected_Definition): Layout must be\n\tapplied to itypes generated for a private operation of a protected\n\ttype that has a formal of an anonymous access to subprogram,\n\tbecause these itypes have no freeze nodes and are frozen in place.\n\t* sem_ch4.adb (Analyze_Selected_Component): If prefix is a\n\tprotected type and it is not a current instance, do not examine\n\tthe first private component of the type.\n\n2016-07-07  Arnaud Charlet  <charlet@adacore.com>\n\n\t* exp_imgv.adb, g-dynhta.adb, s-regexp.adb, s-fatgen.adb, s-poosiz.adb:\n\tMinor removal of extra whitespace.\n\t* einfo.ads: minor removal of repeated \"as\" in comment\n\n2016-07-07  Vadim Godunko  <godunko@adacore.com>\n\n\t* adaint.c: Complete previous change.\n\nFrom-SVN: r238117", "tree": {"sha": "5f9cb4cf824f99f62768c9f881adcfe0418ff120", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5f9cb4cf824f99f62768c9f881adcfe0418ff120"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/86ec3bfb9fc3729d1e17d750e2d76be03f4f7110", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/86ec3bfb9fc3729d1e17d750e2d76be03f4f7110", "html_url": "https://github.com/Rust-GCC/gccrs/commit/86ec3bfb9fc3729d1e17d750e2d76be03f4f7110", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/86ec3bfb9fc3729d1e17d750e2d76be03f4f7110/comments", "author": null, "committer": null, "parents": [{"sha": "0640c7d139ea91870c378de96cab14d708517593", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0640c7d139ea91870c378de96cab14d708517593", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0640c7d139ea91870c378de96cab14d708517593"}], "stats": {"total": 152, "additions": 123, "deletions": 29}, "files": [{"sha": "f7fa41d5f6590cc7a7690c8063fbcd78d2606e17", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/86ec3bfb9fc3729d1e17d750e2d76be03f4f7110/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/86ec3bfb9fc3729d1e17d750e2d76be03f4f7110/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=86ec3bfb9fc3729d1e17d750e2d76be03f4f7110", "patch": "@@ -1,3 +1,27 @@\n+2016-07-07  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* exp_ch6.adb (Expand_Internal_Init_Call): Subsidiary procedure\n+\tto Expand_Protected_ Subprogram_Call, to handle properly a\n+\tcall to a protected function that provides the initialization\n+\texpression for a private component of the same protected type.\n+\t* sem_ch9.adb (Analyze_Protected_Definition): Layout must be\n+\tapplied to itypes generated for a private operation of a protected\n+\ttype that has a formal of an anonymous access to subprogram,\n+\tbecause these itypes have no freeze nodes and are frozen in place.\n+\t* sem_ch4.adb (Analyze_Selected_Component): If prefix is a\n+\tprotected type and it is not a current instance, do not examine\n+\tthe first private component of the type.\n+\n+2016-07-07  Arnaud Charlet  <charlet@adacore.com>\n+\n+\t* exp_imgv.adb, g-dynhta.adb, s-regexp.adb, s-fatgen.adb, s-poosiz.adb:\n+\tMinor removal of extra whitespace.\n+\t* einfo.ads: minor removal of repeated \"as\" in comment\n+\n+2016-07-07  Vadim Godunko  <godunko@adacore.com>\n+\n+\t* adaint.c: Complete previous change.\n+\n 2016-07-07  Vadim Godunko  <godunko@adacore.com>\n \n \t* adainit.h, adainit.c (__gnat_is_read_accessible_file): New"}, {"sha": "67bdad3e8c52c58f7b6c1d74fd1091db5e6a5ecc", "filename": "gcc/ada/adaint.c", "status": "modified", "additions": 21, "deletions": 4, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/86ec3bfb9fc3729d1e17d750e2d76be03f4f7110/gcc%2Fada%2Fadaint.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/86ec3bfb9fc3729d1e17d750e2d76be03f4f7110/gcc%2Fada%2Fadaint.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fadaint.c?ref=86ec3bfb9fc3729d1e17d750e2d76be03f4f7110", "patch": "@@ -1919,7 +1919,16 @@ __gnat_is_read_accessible_file (char *name)\n \n    S2WSC (wname, name, GNAT_MAX_PATH_LEN + 2);\n \n-   return !_access (wname, 4);\n+   return !_waccess (wname, 4);\n+\n+#elif defined (__vxworks)\n+   int fd;\n+\n+   if (fd = open (name, O_RDONLY, 0) < 0)\n+     return 0;\n+   close (fd);\n+   return 1;\n+\n #else\n    return !access (name, R_OK);\n #endif\n@@ -1983,7 +1992,16 @@ __gnat_is_write_accessible_file (char *name)\n \n    S2WSC (wname, name, GNAT_MAX_PATH_LEN + 2);\n \n-   return !_access (wname, 2);\n+   return !_waccess (wname, 2);\n+\n+#elif defined (__vxworks)\n+   int fd;\n+\n+   if (fd = open (name, O_WRONLY, 0) < 0)\n+     return 0;\n+   close (fd);\n+   return 1;\n+\n #else\n    return !access (name, W_OK);\n #endif\n@@ -3291,7 +3309,6 @@ __gnat_kill (int pid, int sig, int close ATTRIBUTE_UNUSED)\n void __gnat_killprocesstree (int pid, int sig_num)\n {\n #if defined(_WIN32)\n-  HANDLE hWnd;\n   PROCESSENTRY32 pe;\n \n   memset(&pe, 0, sizeof(PROCESSENTRY32));\n@@ -3315,7 +3332,7 @@ void __gnat_killprocesstree (int pid, int sig_num)\n \n       while (bContinue)\n         {\n-          if (pe.th32ParentProcessID == (int)pid)\n+          if (pe.th32ParentProcessID == (DWORD)pid)\n             __gnat_killprocesstree (pe.th32ProcessID, sig_num);\n \n           bContinue = Process32Next (hSnap, &pe);"}, {"sha": "1085862f9b60f8fe85db34c294ad85d72388f617", "filename": "gcc/ada/einfo.ads", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/86ec3bfb9fc3729d1e17d750e2d76be03f4f7110/gcc%2Fada%2Feinfo.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/86ec3bfb9fc3729d1e17d750e2d76be03f4f7110/gcc%2Fada%2Feinfo.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Feinfo.ads?ref=86ec3bfb9fc3729d1e17d750e2d76be03f4f7110", "patch": "@@ -5502,7 +5502,7 @@ package Einfo is\n \n    --  The following list of access functions applies to all entities for\n    --  types and subtypes. References to this list appear subsequently as\n-   --  as \"(plus type attributes)\" for each appropriate Entity_Kind.\n+   --  \"(plus type attributes)\" for each appropriate Entity_Kind.\n \n    --    Associated_Node_For_Itype           (Node8)\n    --    Class_Wide_Type                     (Node9)"}, {"sha": "a14274c4a98c80e9cd4c63992aff501ffffe7b21", "filename": "gcc/ada/exp_ch6.adb", "status": "modified", "additions": 44, "deletions": 3, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/86ec3bfb9fc3729d1e17d750e2d76be03f4f7110/gcc%2Fada%2Fexp_ch6.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/86ec3bfb9fc3729d1e17d750e2d76be03f4f7110/gcc%2Fada%2Fexp_ch6.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch6.adb?ref=86ec3bfb9fc3729d1e17d750e2d76be03f4f7110", "patch": "@@ -5945,13 +5945,44 @@ package body Exp_Ch6 is\n    is\n       Rec   : Node_Id;\n \n+      procedure Expand_Internal_Init_Call;\n+      --  A call to an operation of the type may occur in the initialization\n+      --  of a private component. In that case the prefix of the call is an\n+      --  entity name and the call is treated as internal even though it\n+      --  appears in code outside of the protected type.\n+\n       procedure Freeze_Called_Function;\n       --  If it is a function call it can appear in elaboration code and\n       --  the called entity must be frozen before the call. This must be\n       --  done before the call is expanded, as the expansion may rewrite it\n       --  to something other than a call (e.g. a temporary initialized in a\n       --  transient block).\n \n+      -------------------------------\n+      -- Expand_Internal_Init_Call --\n+      -------------------------------\n+\n+      procedure Expand_Internal_Init_Call is\n+      begin\n+         --  If the context is a protected object (rather than a protected\n+         --  type) the call itself is bound to raise program_error because\n+         --  the protected body will not have been elaborated yet. This is\n+         --  diagnosed subsequently in Sem_Elab.\n+\n+         Freeze_Called_Function;\n+\n+         --  The target of the internal call is the first formal of the\n+         --  enclosing initialization procedure.\n+\n+         Rec := New_Occurrence_Of (First_Formal (Current_Scope), Sloc (N));\n+         Build_Protected_Subprogram_Call (N,\n+           Name     => Name (N),\n+           Rec      => Rec,\n+           External => False);\n+         Analyze (N);\n+         Resolve (N, Etype (Subp));\n+      end Expand_Internal_Init_Call;\n+\n       ----------------------------\n       -- Freeze_Called_Function --\n       ----------------------------\n@@ -5975,14 +6006,24 @@ package body Exp_Ch6 is\n       --  case this must be handled as an inter-object call.\n \n       if not In_Open_Scopes (Scop)\n-        or else not Is_Entity_Name (Name (N))\n+          or else (not Is_Entity_Name (Name (N)))\n       then\n          if Nkind (Name (N)) = N_Selected_Component then\n             Rec := Prefix (Name (N));\n \n-         else\n-            pragma Assert (Nkind (Name (N)) = N_Indexed_Component);\n+         elsif Nkind (Name (N)) = N_Indexed_Component then\n             Rec := Prefix (Prefix (Name (N)));\n+\n+         else\n+            --  If the context is the initialization procedure for a protected\n+            --  type, the call is legal because the called entity must be a\n+            --  function of that enclosing type, and this is treated as an\n+            --  internal call.\n+\n+            pragma Assert (Is_Entity_Name (Name (N))\n+                             and then Inside_Init_Proc);\n+            Expand_Internal_Init_Call;\n+            return;\n          end if;\n \n          Freeze_Called_Function;"}, {"sha": "e4a07f7074e130ead66a680852708a7ce04da100", "filename": "gcc/ada/exp_imgv.adb", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/86ec3bfb9fc3729d1e17d750e2d76be03f4f7110/gcc%2Fada%2Fexp_imgv.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/86ec3bfb9fc3729d1e17d750e2d76be03f4f7110/gcc%2Fada%2Fexp_imgv.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_imgv.adb?ref=86ec3bfb9fc3729d1e17d750e2d76be03f4f7110", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 2001-2014, Free Software Foundation, Inc.         --\n+--          Copyright (C) 2001-2016, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -694,7 +694,7 @@ package body Exp_Imgv is\n \n             if Ttyp = Standard_Integer_8 then\n                Func := RE_Value_Enumeration_8;\n-            elsif Ttyp = Standard_Integer_16  then\n+            elsif Ttyp = Standard_Integer_16 then\n                Func := RE_Value_Enumeration_16;\n             else\n                Func := RE_Value_Enumeration_32;\n@@ -1278,7 +1278,7 @@ package body Exp_Imgv is\n             when Normal =>\n                if Ttyp = Standard_Integer_8 then\n                   XX := RE_Width_Enumeration_8;\n-               elsif Ttyp = Standard_Integer_16  then\n+               elsif Ttyp = Standard_Integer_16 then\n                   XX := RE_Width_Enumeration_16;\n                else\n                   XX := RE_Width_Enumeration_32;\n@@ -1287,7 +1287,7 @@ package body Exp_Imgv is\n             when Wide =>\n                if Ttyp = Standard_Integer_8 then\n                   XX := RE_Wide_Width_Enumeration_8;\n-               elsif Ttyp = Standard_Integer_16  then\n+               elsif Ttyp = Standard_Integer_16 then\n                   XX := RE_Wide_Width_Enumeration_16;\n                else\n                   XX := RE_Wide_Width_Enumeration_32;\n@@ -1296,7 +1296,7 @@ package body Exp_Imgv is\n             when Wide_Wide =>\n                if Ttyp = Standard_Integer_8 then\n                   XX := RE_Wide_Wide_Width_Enumeration_8;\n-               elsif Ttyp = Standard_Integer_16  then\n+               elsif Ttyp = Standard_Integer_16 then\n                   XX := RE_Wide_Wide_Width_Enumeration_16;\n                else\n                   XX := RE_Wide_Wide_Width_Enumeration_32;"}, {"sha": "10931cc7d25c78dc95a3a0ed6b1ccc856aea3f27", "filename": "gcc/ada/g-dynhta.adb", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/86ec3bfb9fc3729d1e17d750e2d76be03f4f7110/gcc%2Fada%2Fg-dynhta.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/86ec3bfb9fc3729d1e17d750e2d76be03f4f7110/gcc%2Fada%2Fg-dynhta.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fg-dynhta.adb?ref=86ec3bfb9fc3729d1e17d750e2d76be03f4f7110", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---                     Copyright (C) 2002-2015, AdaCore                     --\n+--                     Copyright (C) 2002-2016, AdaCore                     --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -57,8 +57,8 @@ package body GNAT.Dynamic_HTables is\n       -- Get --\n       ---------\n \n-      function  Get (T : Instance; K : Key) return Elmt_Ptr is\n-         Elmt  : Elmt_Ptr;\n+      function Get (T : Instance; K : Key) return Elmt_Ptr is\n+         Elmt : Elmt_Ptr;\n \n       begin\n          if T = null then\n@@ -224,7 +224,7 @@ package body GNAT.Dynamic_HTables is\n       -- Get --\n       ---------\n \n-      function  Get (T : Instance; K : Key) return Element is\n+      function Get (T : Instance; K : Key) return Element is\n          Tmp : Elmt_Ptr;\n \n       begin"}, {"sha": "c2185e07328c4ce05069a1f0ba13b5c988525453", "filename": "gcc/ada/s-fatgen.adb", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/86ec3bfb9fc3729d1e17d750e2d76be03f4f7110/gcc%2Fada%2Fs-fatgen.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/86ec3bfb9fc3729d1e17d750e2d76be03f4f7110/gcc%2Fada%2Fs-fatgen.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-fatgen.adb?ref=86ec3bfb9fc3729d1e17d750e2d76be03f4f7110", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1992-2015, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2016, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -84,7 +84,7 @@ package body System.Fat_Gen is\n    --  the sign of the exponent. The absolute value of Frac is in the range\n    --  0.0 <= Frac < 1.0. If Frac = 0.0 or -0.0, then Expo is always zero.\n \n-   function Gradual_Scaling  (Adjustment : UI) return T;\n+   function Gradual_Scaling (Adjustment : UI) return T;\n    --  Like Scaling with a first argument of 1.0, but returns the smallest\n    --  denormal rather than zero when the adjustment is smaller than\n    --  Machine_Emin. Used for Succ and Pred.\n@@ -368,7 +368,7 @@ package body System.Fat_Gen is\n       Result := Truncation (abs X);\n       Tail   := abs X - Result;\n \n-      if Tail >= 0.5  then\n+      if Tail >= 0.5 then\n          Result := Result + 1.0;\n       end if;\n \n@@ -553,7 +553,7 @@ package body System.Fat_Gen is\n       Result := Truncation (abs X);\n       Tail   := abs X - Result;\n \n-      if Tail >= 0.5  then\n+      if Tail >= 0.5 then\n          Result := Result + 1.0;\n       end if;\n \n@@ -775,7 +775,7 @@ package body System.Fat_Gen is\n       Result := Truncation (Abs_X);\n       Tail   := Abs_X - Result;\n \n-      if Tail > 0.5  then\n+      if Tail > 0.5 then\n          Result := Result + 1.0;\n \n       elsif Tail = 0.5 then"}, {"sha": "da3a0c5594cc94d4c326c4ea7666dee7f685ab3d", "filename": "gcc/ada/s-poosiz.adb", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/86ec3bfb9fc3729d1e17d750e2d76be03f4f7110/gcc%2Fada%2Fs-poosiz.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/86ec3bfb9fc3729d1e17d750e2d76be03f4f7110/gcc%2Fada%2Fs-poosiz.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-poosiz.adb?ref=86ec3bfb9fc3729d1e17d750e2d76be03f4f7110", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1992-2015, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2016, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -148,7 +148,7 @@ package body System.Pool_Size is\n    -- Initialize --\n    ----------------\n \n-   procedure Initialize  (Pool : in out Stack_Bounded_Pool) is\n+   procedure Initialize (Pool : in out Stack_Bounded_Pool) is\n \n       --  Define the appropriate alignment for allocations. This is the\n       --  maximum of the requested alignment, and the alignment required\n@@ -180,7 +180,7 @@ package body System.Pool_Size is\n    -- Storage_Size --\n    ------------------\n \n-   function  Storage_Size\n+   function Storage_Size\n      (Pool : Stack_Bounded_Pool) return SSE.Storage_Count\n    is\n    begin"}, {"sha": "e9faa1cc6b2493343098924260c1ea33e1a2db57", "filename": "gcc/ada/s-regexp.adb", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/86ec3bfb9fc3729d1e17d750e2d76be03f4f7110/gcc%2Fada%2Fs-regexp.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/86ec3bfb9fc3729d1e17d750e2d76be03f4f7110/gcc%2Fada%2Fs-regexp.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-regexp.adb?ref=86ec3bfb9fc3729d1e17d750e2d76be03f4f7110", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---                     Copyright (C) 1999-2015, AdaCore                     --\n+--                     Copyright (C) 1999-2016, AdaCore                     --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -551,7 +551,7 @@ package body System.Regexp is\n                     (\"Incorrect character ']' in regular expression\", J);\n \n                when '\\' =>\n-                  if J < S'Last  then\n+                  if J < S'Last then\n                      J := J + 1;\n                      Add_In_Map (S (J));\n "}, {"sha": "5c0f4f66c0cd9149b5e5d2919622987058d4e51a", "filename": "gcc/ada/sem_ch4.adb", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/86ec3bfb9fc3729d1e17d750e2d76be03f4f7110/gcc%2Fada%2Fsem_ch4.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/86ec3bfb9fc3729d1e17d750e2d76be03f4f7110/gcc%2Fada%2Fsem_ch4.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch4.adb?ref=86ec3bfb9fc3729d1e17d750e2d76be03f4f7110", "patch": "@@ -4804,8 +4804,14 @@ package body Sem_Ch4 is\n          In_Scope := In_Open_Scopes (Prefix_Type);\n \n          while Present (Comp) loop\n+            --  Do not examine private operations of the type if not within\n+            --  its scope.\n+\n             if Chars (Comp) = Chars (Sel) then\n-               if Is_Overloadable (Comp) then\n+               if Is_Overloadable (Comp)\n+                 and then (In_Scope\n+                            or else Comp /= First_Private_Entity (Type_To_Use))\n+               then\n                   Add_One_Interp (Sel, Comp, Etype (Comp));\n \n                   --  If the prefix is tagged, the correct interpretation may"}, {"sha": "8297db8fe7448c6bca2099cbe0529a7e0910ce92", "filename": "gcc/ada/sem_ch9.adb", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/86ec3bfb9fc3729d1e17d750e2d76be03f4f7110/gcc%2Fada%2Fsem_ch9.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/86ec3bfb9fc3729d1e17d750e2d76be03f4f7110/gcc%2Fada%2Fsem_ch9.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch9.adb?ref=86ec3bfb9fc3729d1e17d750e2d76be03f4f7110", "patch": "@@ -1875,7 +1875,9 @@ package body Sem_Ch9 is\n       --  composite types with inner components, we traverse recursively\n       --  the private components of the protected type, and indicate that\n       --  all itypes within are frozen. This ensures that no freeze nodes\n-      --  will be generated for them.\n+      --  will be generated for them. In the case of itypes that are access\n+      --  types we need to complete their representation by calling layout,\n+      --  which would otherwise be invoked when freezing a type.\n       --\n       --  On the other hand, components of the corresponding record are\n       --  frozen (or receive itype references) as for other records.\n@@ -1903,6 +1905,10 @@ package body Sem_Ch9 is\n                Set_Has_Delayed_Freeze (Comp, False);\n                Set_Is_Frozen (Comp);\n \n+               if Is_Access_Type (Comp) then\n+                  Layout_Type (Comp);\n+               end if;\n+\n                if Is_Record_Type (Comp)\n                  or else Is_Protected_Type (Comp)\n                then"}]}