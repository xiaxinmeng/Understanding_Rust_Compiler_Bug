{"sha": "bba61d403d05202deb698b352a4faef3feb1f04d", "node_id": "C_kwDOANBUbNoAKGJiYTYxZDQwM2QwNTIwMmRlYjY5OGIzNTJhNGZhZWYzZmViMWYwNGQ", "commit": {"author": {"name": "Tom de Vries", "email": "tdevries@suse.de", "date": "2022-01-27T14:03:59Z"}, "committer": {"name": "Tom de Vries", "email": "tdevries@suse.de", "date": "2022-02-01T18:28:57Z"}, "message": "[nvptx] Add bar.warp.sync\n\nOn a GT 1030 (sm_61), with driver version 470.94 I run into:\n...\nFAIL: libgomp.oacc-c/../libgomp.oacc-c-c++-common/parallel-dims.c \\\n  -DACC_DEVICE_TYPE_nvidia=1 -DACC_MEM_SHARED=0 -foffload=nvptx-none \\\n  -O2 execution test\n...\nwhich minimizes to the same test-case as listed in commit \"[nvptx] Update\ndefault ptx isa to 6.3\".\n\nThe first divergent branch looks like:\n...\n  {\n    .reg .u32 %x;\n    mov.u32 %x,%tid.x;\n    setp.ne.u32 %r59,%x,0;\n  }\n  @ %r59 bra $L15;\n  mov.u64 %r48,%ar0;\n  mov.u32 %r22,2;\n  ld.u64 %r53,[%r48];\n  mov.u32 %r55,%r22;\n  mov.u32 %r54,1;\n $L15:\n...\nand when inspecting the generated SASS, the branch is not setup as a divergent\nbranch, but instead as a regular branch.\n\nThis causes us to execute a shfl.sync insn in divergent mode, which is likely\nto cause trouble given a remark in the ptx isa version 6.3, which mentions\nthat for .target sm_6x or below, all threads must excute the same\nshfl.sync instruction in convergence.\n\nFix this by placing a \"bar.warp.sync 0xffffffff\" at the desired convergence\npoint (in the example above, after $L15).\n\nTested on x86_64 with nvptx accelerator.\n\ngcc/ChangeLog:\n\n2022-01-31  Tom de Vries  <tdevries@suse.de>\n\n\t* config/nvptx/nvptx.cc (nvptx_single): Use nvptx_warpsync.\n\t* config/nvptx/nvptx.md (define_c_enum \"unspecv\"): Add\n\tUNSPECV_WARPSYNC.\n\t(define_insn \"nvptx_warpsync\"): New define_insn.", "tree": {"sha": "9cd5df78b7fdb39765d24988310979b11fc54d23", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9cd5df78b7fdb39765d24988310979b11fc54d23"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/bba61d403d05202deb698b352a4faef3feb1f04d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bba61d403d05202deb698b352a4faef3feb1f04d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bba61d403d05202deb698b352a4faef3feb1f04d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bba61d403d05202deb698b352a4faef3feb1f04d/comments", "author": {"login": "vries", "id": 4057235, "node_id": "MDQ6VXNlcjQwNTcyMzU=", "avatar_url": "https://avatars.githubusercontent.com/u/4057235?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vries", "html_url": "https://github.com/vries", "followers_url": "https://api.github.com/users/vries/followers", "following_url": "https://api.github.com/users/vries/following{/other_user}", "gists_url": "https://api.github.com/users/vries/gists{/gist_id}", "starred_url": "https://api.github.com/users/vries/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vries/subscriptions", "organizations_url": "https://api.github.com/users/vries/orgs", "repos_url": "https://api.github.com/users/vries/repos", "events_url": "https://api.github.com/users/vries/events{/privacy}", "received_events_url": "https://api.github.com/users/vries/received_events", "type": "User", "site_admin": false}, "committer": {"login": "vries", "id": 4057235, "node_id": "MDQ6VXNlcjQwNTcyMzU=", "avatar_url": "https://avatars.githubusercontent.com/u/4057235?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vries", "html_url": "https://github.com/vries", "followers_url": "https://api.github.com/users/vries/followers", "following_url": "https://api.github.com/users/vries/following{/other_user}", "gists_url": "https://api.github.com/users/vries/gists{/gist_id}", "starred_url": "https://api.github.com/users/vries/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vries/subscriptions", "organizations_url": "https://api.github.com/users/vries/orgs", "repos_url": "https://api.github.com/users/vries/repos", "events_url": "https://api.github.com/users/vries/events{/privacy}", "received_events_url": "https://api.github.com/users/vries/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8ff0669f6d1d6126b7c010da02fa6532abb5e1ca", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8ff0669f6d1d6126b7c010da02fa6532abb5e1ca", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8ff0669f6d1d6126b7c010da02fa6532abb5e1ca"}], "stats": {"total": 14, "additions": 14, "deletions": 0}, "files": [{"sha": "1b91990ca1fd7153d684f73effa395af641eac0f", "filename": "gcc/config/nvptx/nvptx.cc", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bba61d403d05202deb698b352a4faef3feb1f04d/gcc%2Fconfig%2Fnvptx%2Fnvptx.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bba61d403d05202deb698b352a4faef3feb1f04d/gcc%2Fconfig%2Fnvptx%2Fnvptx.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fnvptx%2Fnvptx.cc?ref=bba61d403d05202deb698b352a4faef3feb1f04d", "patch": "@@ -4598,6 +4598,7 @@ nvptx_single (unsigned mask, basic_block from, basic_block to)\n   rtx_insn *neuter_start = NULL;\n   rtx_insn *worker_label = NULL, *vector_label = NULL;\n   rtx_insn *worker_jump = NULL, *vector_jump = NULL;\n+  rtx_insn *warp_sync = NULL;\n   for (mode = GOMP_DIM_WORKER; mode <= GOMP_DIM_VECTOR; mode++)\n     if (GOMP_DIM_MASK (mode) & skip_mask)\n       {\n@@ -4630,11 +4631,15 @@ nvptx_single (unsigned mask, basic_block from, basic_block to)\n \tif (tail_branch)\n \t  {\n \t    label_insn = emit_label_before (label, before);\n+\t    if (TARGET_PTX_6_0 && mode == GOMP_DIM_VECTOR)\n+\t      warp_sync = emit_insn_after (gen_nvptx_warpsync (), label_insn);\n \t    before = label_insn;\n \t  }\n \telse\n \t  {\n \t    label_insn = emit_label_after (label, tail);\n+\t    if (TARGET_PTX_6_0 && mode == GOMP_DIM_VECTOR)\n+\t      warp_sync = emit_insn_after (gen_nvptx_warpsync (), label_insn);\n \t    if ((mode == GOMP_DIM_VECTOR || mode == GOMP_DIM_WORKER)\n \t\t&& CALL_P (tail) && find_reg_note (tail, REG_NORETURN, NULL))\n \t      emit_insn_after (gen_exit (), label_insn);\n@@ -4702,6 +4707,8 @@ nvptx_single (unsigned mask, basic_block from, basic_block to)\n \t\t setp.ne.u32 %rcond,%rcondu32,0;\n \t  */\n \t  rtx_insn *label = PREV_INSN (tail);\n+\t  if (label == warp_sync)\n+\t    label = PREV_INSN (label);\n \t  gcc_assert (label && LABEL_P (label));\n \t  rtx tmp = gen_reg_rtx (BImode);\n \t  emit_insn_before (gen_movbi (tmp, const0_rtx),"}, {"sha": "b4c7cd6e56d1831378a652ad5b09440b59244d1a", "filename": "gcc/config/nvptx/nvptx.md", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bba61d403d05202deb698b352a4faef3feb1f04d/gcc%2Fconfig%2Fnvptx%2Fnvptx.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bba61d403d05202deb698b352a4faef3feb1f04d/gcc%2Fconfig%2Fnvptx%2Fnvptx.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fnvptx%2Fnvptx.md?ref=bba61d403d05202deb698b352a4faef3feb1f04d", "patch": "@@ -56,6 +56,7 @@\n    UNSPECV_CAS\n    UNSPECV_XCHG\n    UNSPECV_BARSYNC\n+   UNSPECV_WARPSYNC\n    UNSPECV_MEMBAR\n    UNSPECV_MEMBAR_CTA\n    UNSPECV_MEMBAR_GL\n@@ -1978,6 +1979,12 @@\n   }\n   [(set_attr \"predicable\" \"false\")])\n \n+(define_insn \"nvptx_warpsync\"\n+  [(unspec_volatile [(const_int 0)] UNSPECV_WARPSYNC)]\n+  \"TARGET_PTX_6_0\"\n+  \"\\\\tbar.warp.sync\\\\t0xffffffff;\"\n+  [(set_attr \"predicable\" \"false\")])\n+\n (define_expand \"memory_barrier\"\n   [(set (match_dup 0)\n \t(unspec_volatile:BLK [(match_dup 0)] UNSPECV_MEMBAR))]"}]}