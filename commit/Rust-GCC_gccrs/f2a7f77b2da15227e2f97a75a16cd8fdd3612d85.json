{"sha": "f2a7f77b2da15227e2f97a75a16cd8fdd3612d85", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjJhN2Y3N2IyZGExNTIyN2UyZjk3YTc1YTE2Y2Q4ZmRkMzYxMmQ4NQ==", "commit": {"author": {"name": "Jeff Law", "email": "law@redhat.com", "date": "2017-11-09T23:04:20Z"}, "committer": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "2017-11-09T23:04:20Z"}, "message": "tree-vrp.c (vrp_prop): Move class to earlier point in the file.\n\n\t* tree-vrp.c (vrp_prop): Move class to earlier point in the file.\n\t(vrp_folder): Likewise.\n\nFrom-SVN: r254612", "tree": {"sha": "5a231d399f1655ae9f60242dc971a503f9eb4d27", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5a231d399f1655ae9f60242dc971a503f9eb4d27"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f2a7f77b2da15227e2f97a75a16cd8fdd3612d85", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f2a7f77b2da15227e2f97a75a16cd8fdd3612d85", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f2a7f77b2da15227e2f97a75a16cd8fdd3612d85", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f2a7f77b2da15227e2f97a75a16cd8fdd3612d85/comments", "author": null, "committer": null, "parents": [{"sha": "51308fc3b6cb2d73b52eed78b431a8fd7223c00d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/51308fc3b6cb2d73b52eed78b431a8fd7223c00d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/51308fc3b6cb2d73b52eed78b431a8fd7223c00d"}], "stats": {"total": 31, "additions": 17, "deletions": 14}, "files": [{"sha": "9b93a8520998ed7d4b0d6003ea471f0606f57d91", "filename": "gcc/ChangeLog", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f2a7f77b2da15227e2f97a75a16cd8fdd3612d85/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f2a7f77b2da15227e2f97a75a16cd8fdd3612d85/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=f2a7f77b2da15227e2f97a75a16cd8fdd3612d85", "patch": "@@ -1,5 +1,8 @@\n 2017-11-09  Jeff Law  <law@redhat.com>\n \n+\t* tree-vrp.c (vrp_prop): Move class to earlier point in the file.\n+\t(vrp_folder): Likewise.\n+\n \t* tree-vrp.c (set_value_range): Do not reference vrp_equiv_obstack.\n \tGet it from the existing bitmap instead.\n \t(vrp_intersect_ranges_1): Likewise."}, {"sha": "fc9ad4adebe890e9389f3ccdc297a146178be00f", "filename": "gcc/tree-vrp.c", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f2a7f77b2da15227e2f97a75a16cd8fdd3612d85/gcc%2Ftree-vrp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f2a7f77b2da15227e2f97a75a16cd8fdd3612d85/gcc%2Ftree-vrp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vrp.c?ref=f2a7f77b2da15227e2f97a75a16cd8fdd3612d85", "patch": "@@ -6635,6 +6635,13 @@ insert_range_assertions (void)\n   BITMAP_FREE (need_assert_for);\n }\n \n+class vrp_prop : public ssa_propagation_engine\n+{\n+ public:\n+  enum ssa_prop_result visit_stmt (gimple *, edge *, tree *) FINAL OVERRIDE;\n+  enum ssa_prop_result visit_phi (gphi *) FINAL OVERRIDE;\n+};\n+\n /* Checks one ARRAY_REF in REF, located at LOCUS. Ignores flexible arrays\n    and \"struct\" hacks. If VRP can determine that the\n    array subscript is a constant, check if it is outside valid\n@@ -8066,13 +8073,6 @@ extract_range_from_stmt (gimple *stmt, edge *taken_edge_p,\n     vrp_visit_switch_stmt (as_a <gswitch *> (stmt), taken_edge_p);\n }\n \n-class vrp_prop : public ssa_propagation_engine\n-{\n- public:\n-  enum ssa_prop_result visit_stmt (gimple *, edge *, tree *) FINAL OVERRIDE;\n-  enum ssa_prop_result visit_phi (gphi *) FINAL OVERRIDE;\n-};\n-\n /* Evaluate statement STMT.  If the statement produces a useful range,\n    return SSA_PROP_INTERESTING and record the SSA name with the\n    interesting range into *OUTPUT_P.\n@@ -10450,6 +10450,13 @@ simplify_stmt_using_ranges (gimple_stmt_iterator *gsi)\n   return false;\n }\n \n+class vrp_folder : public substitute_and_fold_engine\n+{\n+ public:\n+  tree get_value (tree) FINAL OVERRIDE;\n+  bool fold_stmt (gimple_stmt_iterator *) FINAL OVERRIDE;\n+};\n+\n /* If the statement pointed by SI has a predicate whose value can be\n    computed using the value range information computed by VRP, compute\n    its value and return true.  Otherwise, return false.  */\n@@ -10512,13 +10519,6 @@ fold_predicate_in (gimple_stmt_iterator *si)\n   return false;\n }\n \n-class vrp_folder : public substitute_and_fold_engine\n-{\n- public:\n-  tree get_value (tree) FINAL OVERRIDE;\n-  bool fold_stmt (gimple_stmt_iterator *) FINAL OVERRIDE;\n-};\n-\n /* Callback for substitute_and_fold folding the stmt at *SI.  */\n \n bool"}]}