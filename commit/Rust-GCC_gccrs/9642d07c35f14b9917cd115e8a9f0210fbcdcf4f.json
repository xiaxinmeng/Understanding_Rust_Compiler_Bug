{"sha": "9642d07c35f14b9917cd115e8a9f0210fbcdcf4f", "node_id": "C_kwDOANBUbNoAKDk2NDJkMDdjMzVmMTRiOTkxN2NkMTE1ZThhOWYwMjEwZmJjZGNmNGY", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2022-06-16T12:37:06Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2022-06-16T12:37:36Z"}, "message": "match.pd: Improve y == MIN || x < y optimization [PR105983]\n\nOn the following testcase, we only optimize bar where this optimization\nis performed at GENERIC folding time, but on GIMPLE it doesn't trigger\nanymore, as we actually don't see\n  (bit_and (ne @1 min_value) (ge @0 @1))\nbut\n  (bit_and (ne @1 min_value) (le @1 @0))\ngenmatch handles :c modifier not just on commutative operations, but\nalso comparisons and in that case it means it swaps the comparison.\n\n2022-06-16  Jakub Jelinek  <jakub@redhat.com>\n\n\tPR tree-optimization/105983\n\t* match.pd (y == XXX_MIN || x < y -> x <= y - 1,\n\ty != XXX_MIN && x >= y -> x > y - 1): Use :cs instead of :s\n\ton non-equality comparisons.\n\n\t* gcc.dg/tree-ssa/pr105983.c: New test.", "tree": {"sha": "b6044081dc305a37c466d1858594ca8479dcb46b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b6044081dc305a37c466d1858594ca8479dcb46b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9642d07c35f14b9917cd115e8a9f0210fbcdcf4f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9642d07c35f14b9917cd115e8a9f0210fbcdcf4f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9642d07c35f14b9917cd115e8a9f0210fbcdcf4f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9642d07c35f14b9917cd115e8a9f0210fbcdcf4f/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "74e6a40335765077e235269f19d2d9905d0d9e44", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/74e6a40335765077e235269f19d2d9905d0d9e44", "html_url": "https://github.com/Rust-GCC/gccrs/commit/74e6a40335765077e235269f19d2d9905d0d9e44"}], "stats": {"total": 21, "additions": 19, "deletions": 2}, "files": [{"sha": "3e9572e4c9cbc276a374cffc9747a019ff824e0b", "filename": "gcc/match.pd", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9642d07c35f14b9917cd115e8a9f0210fbcdcf4f/gcc%2Fmatch.pd", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9642d07c35f14b9917cd115e8a9f0210fbcdcf4f/gcc%2Fmatch.pd", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fmatch.pd?ref=9642d07c35f14b9917cd115e8a9f0210fbcdcf4f", "patch": "@@ -2460,14 +2460,14 @@ DEFINE_INT_AND_FLOAT_ROUND_FN (RINT)\n \n /* y == XXX_MIN || x < y --> x <= y - 1 */\n (simplify\n- (bit_ior:c (eq:s @1 min_value) (lt:s @0 @1))\n+ (bit_ior:c (eq:s @1 min_value) (lt:cs @0 @1))\n   (if (INTEGRAL_TYPE_P (TREE_TYPE (@1))\n        && TYPE_OVERFLOW_WRAPS (TREE_TYPE (@1)))\n   (le @0 (minus @1 { build_int_cst (TREE_TYPE (@1), 1); }))))\n \n /* y != XXX_MIN && x >= y --> x > y - 1 */\n (simplify\n- (bit_and:c (ne:s @1 min_value) (ge:s @0 @1))\n+ (bit_and:c (ne:s @1 min_value) (ge:cs @0 @1))\n   (if (INTEGRAL_TYPE_P (TREE_TYPE (@1))\n        && TYPE_OVERFLOW_WRAPS (TREE_TYPE (@1)))\n   (gt @0 (minus @1 { build_int_cst (TREE_TYPE (@1), 1); }))))"}, {"sha": "46418c25d1f29e27c8efde31e934b95122053f18", "filename": "gcc/testsuite/gcc.dg/tree-ssa/pr105983.c", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9642d07c35f14b9917cd115e8a9f0210fbcdcf4f/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr105983.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9642d07c35f14b9917cd115e8a9f0210fbcdcf4f/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr105983.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr105983.c?ref=9642d07c35f14b9917cd115e8a9f0210fbcdcf4f", "patch": "@@ -0,0 +1,17 @@\n+/* PR tree-optimization/105983 */\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 --param=logical-op-non-short-circuit=1 -fdump-tree-optimized\" } */\n+/* { dg-final { scan-tree-dump-not \" != 0;\" \"optimized\" } } */\n+/* { dg-final { scan-tree-dump-not \" & \" \"optimized\" } } */\n+\n+int\n+foo (unsigned a, unsigned b)\n+{\n+  return b != 0 && a >= b;\n+}\n+\n+int\n+bar (unsigned a, unsigned b)\n+{\n+  return b != 0 & a >= b;\n+}"}]}