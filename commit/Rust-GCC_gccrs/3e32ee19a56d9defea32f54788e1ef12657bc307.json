{"sha": "3e32ee19a56d9defea32f54788e1ef12657bc307", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2UzMmVlMTlhNTZkOWRlZmVhMzJmNTQ3ODhlMWVmMTI2NTdiYzMwNw==", "commit": {"author": {"name": "Nathan Sidwell", "email": "nathan@gcc.gnu.org", "date": "2015-09-28T19:37:33Z"}, "committer": {"name": "Nathan Sidwell", "email": "nathan@gcc.gnu.org", "date": "2015-09-28T19:37:33Z"}, "message": "gomp-constants.h (GOMP_VERSION_NVIDIA_PTX): Increment.\n\n\tinlude/\n\t* gomp-constants.h (GOMP_VERSION_NVIDIA_PTX): Increment.\n\t(GOMP_DIM_GANG, GOMP_DIM_WORKER, GOMP_DIM_VECTOR, GOMP_DIM_MAX,\n\tGOMP_DIM_MASK): New.\n\t(GOMP_LAUNCH_DIM, GOMP_LAUNCH_ASYNC, GOMP_LAUNCH_WAIT): New.\n\t(GOMP_LAUNCH_CODE_SHIFT, GOMP_LAUNCH_DEVICE_SHIFT,\n\tGOMP_LAUNCH_OP_SHIFT): New.\n\t(GOMP_LAUNCH_PACK, GOMP_LAUNCH_CODE, GOMP_LAUNCH_DEVICE,\n\tGOMP_LAUNCH_OP): New.\n\t(GOMP_LAUNCH_OP_MAX): New.\n\n\tlibgomp/\n\t* libgomp.h (acc_dispatch_t): Replace separate geometry args with\n\tarray.\n\t* libgomp.map (GOACC_parallel_keyed): New.\n\t* oacc-parallel.c (goacc_wait): Take pointer to va_list.  Adjust\n\tall callers.\n\t(GOACC_parallel_keyed): New interface.  Lose geometry arguments\n\tand take keyed varargs list.  Adjust call to exec_func.\n\t(GOACC_parallel): Force host fallback.\n\t* libgomp_g.h (GOACC_parallel): Remove.\n\t(GOACC_parallel_keyed): Declare.\n\t* plugin/plugin-nvptx.c (struct targ_fn_launch): New struct.\n\t(stuct targ_gn_descriptor): Replace name field with launch field.\n\t(nvptx_exec): Lose separate geometry args, take array.  Process\n\tdynamic dimensions and adjust.\n\t(struct nvptx_tdata): Replace fn_names field with fn_descs.\n\t(GOMP_OFFLOAD_load_image): Adjust for change in function table\n\tdata.\n\t(GOMP_OFFLOAD_openacc_parallel): Adjust for change in dimension\n\tpassing.\n\t* oacc-host.c (host_openacc_exec): Adjust for change in dimension\n\tpassing.\n\n\tgcc/\n\t* config/nvptx/nvptx.c: Include omp-low.h and gomp-constants.h.\n\t(nvptx_record_offload_symbol): Record function execution geometry.\n\t* config/nvptx/mkoffload.c (process): Include launch geometry in\n\tfunction data.\n\t* omp-low.c (oacc_launch_pack): New.\n\t(replace_oacc_fn_attrib): New.\n\t(set_oacc_fn_attrib): New.\n\t(get_oacc_fn_attrib): New.\n\t(expand_omp_target): Create keyed varargs for GOACC_parallel call\n\tgeneration.\n\t* omp-low.h (get_oacc_fn_attrib): Declare.\n\t* builtin-types.def (DEF_FUNCTION_TyPE_VAR_6): New.\n\t(DEF_FUNCTION_TYPE_VAR_11): Delete.\n\t* tree.h (OMP_CLAUSE_EXPR): New.\n\t* omp-builtins.def (BUILT_IN_GOACC_PARALLEL): Change target fn name.\n\n\tgcc/lto/\n\t* lto-lang.c (DEF_FUNCTION_TYPE_VAR_6): New.\n\t(DEF_FUNCTION_TYPE_VAR_11): Delete.\n\n\tgcc/c-family/\n\t* c-common.c (DEF_FUNCTION_TYPE_VAR_6): New.\n\t(DEF_FUNCTION_TYPE_VAR_11): Delete.\n\n\tgcc/fortran/\n\t* f95-lang.c (DEF_FUNCTION_TYPE_VAR_6): New.\n\t(DEF_FUNCTION_TYPE_VAR_11): Delete.\n\t* types.def (DEF_FUNCTION_TYPE_VAR_6): New.\n\t(DEF_FUNCTION_TYPE_VAR_11): Delete.\n\n\tgcc/ada/\n\t* gcc-interface/utils.c (DEF_FUNCTION_TYPE_VAR_6): Define\n\nFrom-SVN: r228220", "tree": {"sha": "82bea03a2a53289a91a90b899f03a9be503a60df", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/82bea03a2a53289a91a90b899f03a9be503a60df"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3e32ee19a56d9defea32f54788e1ef12657bc307", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3e32ee19a56d9defea32f54788e1ef12657bc307", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3e32ee19a56d9defea32f54788e1ef12657bc307", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3e32ee19a56d9defea32f54788e1ef12657bc307/comments", "author": null, "committer": null, "parents": [{"sha": "4e671509d92cd4dc7d28d7bb92e46092afcd7370", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4e671509d92cd4dc7d28d7bb92e46092afcd7370", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4e671509d92cd4dc7d28d7bb92e46092afcd7370"}], "stats": {"total": 697, "additions": 504, "deletions": 193}, "files": [{"sha": "7fa651799b0067431382a92919e505175d93d88b", "filename": "gcc/ChangeLog", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3e32ee19a56d9defea32f54788e1ef12657bc307/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3e32ee19a56d9defea32f54788e1ef12657bc307/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=3e32ee19a56d9defea32f54788e1ef12657bc307", "patch": "@@ -1,3 +1,21 @@\n+2015-09-28  Nathan Sidwell  <nathan@codesourcery.com>\n+\n+\t* config/nvptx/nvptx.c: Include omp-low.h and gomp-constants.h.\n+\t(nvptx_record_offload_symbol): Record function execution geometry.\n+\t* config/nvptx/mkoffload.c (process): Include launch geometry in\n+\tfunction data.\n+\t* omp-low.c (oacc_launch_pack): New.\n+\t(replace_oacc_fn_attrib): New.\n+\t(set_oacc_fn_attrib): New.\n+\t(get_oacc_fn_attrib): New.\n+\t(expand_omp_target): Create keyed varargs for GOACC_parallel call\n+\tgeneration.\n+\t* omp-low.h (get_oacc_fn_attrib): Declare.\n+\t* builtin-types.def (DEF_FUNCTION_TyPE_VAR_6): New.\n+\t(DEF_FUNCTION_TYPE_VAR_11): Delete.\n+\t* tree.h (OMP_CLAUSE_EXPR): New.\n+\t* omp-builtins.def (BUILT_IN_GOACC_PARALLEL): Change target fn name.\n+\n 2015-09-28  Aditya Kumar  <aditya.k7@samsung.com>\n             Sebastian Pop  <s.pop@samsung.com>\n "}, {"sha": "efb2d3a93b23c5b0dfe85859b0b1e42efeabc10a", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3e32ee19a56d9defea32f54788e1ef12657bc307/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3e32ee19a56d9defea32f54788e1ef12657bc307/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=3e32ee19a56d9defea32f54788e1ef12657bc307", "patch": "@@ -1,3 +1,7 @@\n+2015-09-28  Tom de Vries  <tom@codesourcery.com>\n+\n+\t* gcc-interface/utils.c (DEF_FUNCTION_TYPE_VAR_6): Define\n+\n 2015-09-17  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* gcc-interface/trans.c (emit_check): Do not touch TREE_SIDE_EFFECTS."}, {"sha": "672b910b26fa36b824f88deb5fc868075972a907", "filename": "gcc/ada/gcc-interface/utils.c", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3e32ee19a56d9defea32f54788e1ef12657bc307/gcc%2Fada%2Fgcc-interface%2Futils.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3e32ee19a56d9defea32f54788e1ef12657bc307/gcc%2Fada%2Fgcc-interface%2Futils.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2Futils.c?ref=3e32ee19a56d9defea32f54788e1ef12657bc307", "patch": "@@ -5376,6 +5376,8 @@ enum c_builtin_type\n #define DEF_FUNCTION_TYPE_VAR_4(NAME, RETURN, ARG1, ARG2, ARG3, ARG4) NAME,\n #define DEF_FUNCTION_TYPE_VAR_5(NAME, RETURN, ARG1, ARG2, ARG3, ARG4, ARG5) \\\n \t\t\t\tNAME,\n+#define DEF_FUNCTION_TYPE_VAR_6(NAME, RETURN, ARG1, ARG2, ARG3, ARG4, ARG5, \\\n+\t\t\t\tARG6) NAME,\n #define DEF_FUNCTION_TYPE_VAR_7(NAME, RETURN, ARG1, ARG2, ARG3, ARG4, ARG5, \\\n \t\t\t\tARG6, ARG7) NAME,\n #define DEF_FUNCTION_TYPE_VAR_11(NAME, RETURN, ARG1, ARG2, ARG3, ARG4, ARG5, \\\n@@ -5398,6 +5400,7 @@ enum c_builtin_type\n #undef DEF_FUNCTION_TYPE_VAR_3\n #undef DEF_FUNCTION_TYPE_VAR_4\n #undef DEF_FUNCTION_TYPE_VAR_5\n+#undef DEF_FUNCTION_TYPE_VAR_6\n #undef DEF_FUNCTION_TYPE_VAR_7\n #undef DEF_FUNCTION_TYPE_VAR_11\n #undef DEF_POINTER_TYPE\n@@ -5505,6 +5508,9 @@ install_builtin_function_types (void)\n   def_fn_type (ENUM, RETURN, 1, 4, ARG1, ARG2, ARG3, ARG4);\n #define DEF_FUNCTION_TYPE_VAR_5(ENUM, RETURN, ARG1, ARG2, ARG3, ARG4, ARG5) \\\n   def_fn_type (ENUM, RETURN, 1, 5, ARG1, ARG2, ARG3, ARG4, ARG5);\n+#define DEF_FUNCTION_TYPE_VAR_6(ENUM, RETURN, ARG1, ARG2, ARG3, ARG4, ARG5, \\\n+\t\t\t\tARG6)\t\t\t\t\\\n+  def_fn_type (ENUM, RETURN, 1, 6, ARG1, ARG2, ARG3, ARG4, ARG5, ARG6);\n #define DEF_FUNCTION_TYPE_VAR_7(ENUM, RETURN, ARG1, ARG2, ARG3, ARG4, ARG5, \\\n \t\t\t\tARG6, ARG7)\t\t\t\t\\\n   def_fn_type (ENUM, RETURN, 1, 7, ARG1, ARG2, ARG3, ARG4, ARG5, ARG6, ARG7);\n@@ -5533,6 +5539,7 @@ install_builtin_function_types (void)\n #undef DEF_FUNCTION_TYPE_VAR_3\n #undef DEF_FUNCTION_TYPE_VAR_4\n #undef DEF_FUNCTION_TYPE_VAR_5\n+#undef DEF_FUNCTION_TYPE_VAR_6\n #undef DEF_FUNCTION_TYPE_VAR_7\n #undef DEF_FUNCTION_TYPE_VAR_11\n #undef DEF_POINTER_TYPE"}, {"sha": "9d20dcc3d82c8d2081d93511f87ff241e7bcf90b", "filename": "gcc/builtin-types.def", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3e32ee19a56d9defea32f54788e1ef12657bc307/gcc%2Fbuiltin-types.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3e32ee19a56d9defea32f54788e1ef12657bc307/gcc%2Fbuiltin-types.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbuiltin-types.def?ref=3e32ee19a56d9defea32f54788e1ef12657bc307", "patch": "@@ -590,15 +590,14 @@ DEF_FUNCTION_TYPE_VAR_5 (BT_FN_INT_STRING_SIZE_INT_SIZE_CONST_STRING_VAR,\n DEF_FUNCTION_TYPE_VAR_5 (BT_FN_INT_INT_INT_INT_INT_INT_VAR,\n \t\t\t BT_INT, BT_INT, BT_INT, BT_INT, BT_INT, BT_INT)\n \n+DEF_FUNCTION_TYPE_VAR_6 (BT_FN_VOID_INT_OMPFN_SIZE_PTR_PTR_PTR_VAR,\n+\t\t\t BT_VOID, BT_INT, BT_PTR_FN_VOID_PTR, BT_SIZE,\n+\t\t\t BT_PTR, BT_PTR, BT_PTR)\n+\n DEF_FUNCTION_TYPE_VAR_7 (BT_FN_VOID_INT_SIZE_PTR_PTR_PTR_INT_INT_VAR,\n \t\t\t BT_VOID, BT_INT, BT_SIZE, BT_PTR, BT_PTR,\n \t\t\t BT_PTR, BT_INT, BT_INT)\n \n-DEF_FUNCTION_TYPE_VAR_11 (BT_FN_VOID_INT_OMPFN_SIZE_PTR_PTR_PTR_INT_INT_INT_INT_INT_VAR,\n-\t\t\t  BT_VOID, BT_INT, BT_PTR_FN_VOID_PTR, BT_SIZE,\n-\t\t\t  BT_PTR, BT_PTR, BT_PTR, BT_INT, BT_INT, BT_INT,\n-\t\t\t  BT_INT, BT_INT)\n-\n DEF_POINTER_TYPE (BT_PTR_FN_VOID_VAR, BT_FN_VOID_VAR)\n DEF_FUNCTION_TYPE_3 (BT_FN_PTR_PTR_FN_VOID_VAR_PTR_SIZE,\n \t\t     BT_PTR, BT_PTR_FN_VOID_VAR, BT_PTR, BT_SIZE)"}, {"sha": "769f74a76873c68b2c461a8322260c1b5c39a800", "filename": "gcc/c-family/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3e32ee19a56d9defea32f54788e1ef12657bc307/gcc%2Fc-family%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3e32ee19a56d9defea32f54788e1ef12657bc307/gcc%2Fc-family%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2FChangeLog?ref=3e32ee19a56d9defea32f54788e1ef12657bc307", "patch": "@@ -1,3 +1,8 @@\n+2015-09-28  Nathan Sidwell  <nathan@codesourcery.com>\n+\n+\t* c-common.c (DEF_FUNCTION_TYPE_VAR_6): New.\n+\t(DEF_FUNCTION_TYPE_VAR_11): Delete.\n+\n 2015-09-25  Marek Polacek  <polacek@redhat.com>\n \n \t* c-ubsan.c (ubsan_instrument_division): Remove unnecessary code."}, {"sha": "e5395272ec30b0eb28a4eafc17f7398a3fafff8c", "filename": "gcc/c-family/c-common.c", "status": "modified", "additions": 7, "deletions": 8, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3e32ee19a56d9defea32f54788e1ef12657bc307/gcc%2Fc-family%2Fc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3e32ee19a56d9defea32f54788e1ef12657bc307/gcc%2Fc-family%2Fc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-common.c?ref=3e32ee19a56d9defea32f54788e1ef12657bc307", "patch": "@@ -5548,10 +5548,10 @@ enum c_builtin_type\n #define DEF_FUNCTION_TYPE_VAR_4(NAME, RETURN, ARG1, ARG2, ARG3, ARG4) NAME,\n #define DEF_FUNCTION_TYPE_VAR_5(NAME, RETURN, ARG1, ARG2, ARG3, ARG4, ARG5) \\\n \t\t\t\tNAME,\n+#define DEF_FUNCTION_TYPE_VAR_6(NAME, RETURN, ARG1, ARG2, ARG3, ARG4, ARG5, \\\n+\t\t\t\tARG6) NAME,\n #define DEF_FUNCTION_TYPE_VAR_7(NAME, RETURN, ARG1, ARG2, ARG3, ARG4, ARG5, \\\n \t\t\t\tARG6, ARG7) NAME,\n-#define DEF_FUNCTION_TYPE_VAR_11(NAME, RETURN, ARG1, ARG2, ARG3, ARG4, ARG5, \\\n-\t\t\t\t ARG6, ARG7, ARG8, ARG9, ARG10, ARG11) NAME,\n #define DEF_POINTER_TYPE(NAME, TYPE) NAME,\n #include \"builtin-types.def\"\n #undef DEF_PRIMITIVE_TYPE\n@@ -5570,8 +5570,8 @@ enum c_builtin_type\n #undef DEF_FUNCTION_TYPE_VAR_3\n #undef DEF_FUNCTION_TYPE_VAR_4\n #undef DEF_FUNCTION_TYPE_VAR_5\n+#undef DEF_FUNCTION_TYPE_VAR_6\n #undef DEF_FUNCTION_TYPE_VAR_7\n-#undef DEF_FUNCTION_TYPE_VAR_11\n #undef DEF_POINTER_TYPE\n   BT_LAST\n };\n@@ -5664,13 +5664,12 @@ c_define_builtins (tree va_list_ref_type_node, tree va_list_arg_type_node)\n   def_fn_type (ENUM, RETURN, 1, 4, ARG1, ARG2, ARG3, ARG4);\n #define DEF_FUNCTION_TYPE_VAR_5(ENUM, RETURN, ARG1, ARG2, ARG3, ARG4, ARG5) \\\n   def_fn_type (ENUM, RETURN, 1, 5, ARG1, ARG2, ARG3, ARG4, ARG5);\n+#define DEF_FUNCTION_TYPE_VAR_6(ENUM, RETURN, ARG1, ARG2, ARG3, ARG4, ARG5, \\\n+\t\t\t\tARG6) \\\n+  def_fn_type (ENUM, RETURN, 1, 6, ARG1, ARG2, ARG3, ARG4, ARG5, ARG6);\n #define DEF_FUNCTION_TYPE_VAR_7(ENUM, RETURN, ARG1, ARG2, ARG3, ARG4, ARG5, \\\n \t\t\t\tARG6, ARG7)\t\t\t\t\\\n   def_fn_type (ENUM, RETURN, 1, 7, ARG1, ARG2, ARG3, ARG4, ARG5, ARG6, ARG7);\n-#define DEF_FUNCTION_TYPE_VAR_11(ENUM, RETURN, ARG1, ARG2, ARG3, ARG4, ARG5, \\\n-\t\t\t\t ARG6, ARG7, ARG8, ARG9, ARG10, ARG11) \\\n-  def_fn_type (ENUM, RETURN, 1, 11, ARG1, ARG2, ARG3, ARG4, ARG5, ARG6,      \\\n-\t       ARG7, ARG8, ARG9, ARG10, ARG11);\n #define DEF_POINTER_TYPE(ENUM, TYPE) \\\n   builtin_types[(int) ENUM] = build_pointer_type (builtin_types[(int) TYPE]);\n \n@@ -5692,8 +5691,8 @@ c_define_builtins (tree va_list_ref_type_node, tree va_list_arg_type_node)\n #undef DEF_FUNCTION_TYPE_VAR_3\n #undef DEF_FUNCTION_TYPE_VAR_4\n #undef DEF_FUNCTION_TYPE_VAR_5\n+#undef DEF_FUNCTION_TYPE_VAR_6\n #undef DEF_FUNCTION_TYPE_VAR_7\n-#undef DEF_FUNCTION_TYPE_VAR_11\n #undef DEF_POINTER_TYPE\n   builtin_types[(int) BT_LAST] = NULL_TREE;\n "}, {"sha": "e0ff8fcc4ec5ad68982cb5d2da0b1d12c37233ab", "filename": "gcc/config/nvptx/mkoffload.c", "status": "modified", "additions": 15, "deletions": 9, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3e32ee19a56d9defea32f54788e1ef12657bc307/gcc%2Fconfig%2Fnvptx%2Fmkoffload.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3e32ee19a56d9defea32f54788e1ef12657bc307/gcc%2Fconfig%2Fnvptx%2Fmkoffload.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fnvptx%2Fmkoffload.c?ref=3e32ee19a56d9defea32f54788e1ef12657bc307", "patch": "@@ -842,6 +842,8 @@ process (FILE *in, FILE *out)\n {\n   const char *input = read_file (in);\n   Token *tok = tokenize (input);\n+  const char *comma;\n+  id_map const *id;\n \n   do\n     tok = parse_file (tok);\n@@ -853,21 +855,25 @@ process (FILE *in, FILE *out)\n   write_stmts (out, rev_stmts (fns));\n   fprintf (out, \";\\n\\n\");\n \n-  fprintf (out, \"static const char *const var_mappings[] = {\\n\");\n-  for (id_map *id = var_ids; id; id = id->next)\n-    fprintf (out, \"\\t\\\"%s\\\"%s\\n\", id->ptx_name, id->next ? \",\" : \"\");\n-  fprintf (out, \"};\\n\\n\");\n-  fprintf (out, \"static const char *const func_mappings[] = {\\n\");\n-  for (id_map *id = func_ids; id; id = id->next)\n-    fprintf (out, \"\\t\\\"%s\\\"%s\\n\", id->ptx_name, id->next ? \",\" : \"\");\n-  fprintf (out, \"};\\n\\n\");\n+  fprintf (out, \"static const char *const var_mappings[] = {\");\n+  for (comma = \"\", id = var_ids; id; comma = \",\", id = id->next)\n+    fprintf (out, \"%s\\n\\t%s\", comma, id->ptx_name);\n+  fprintf (out, \"\\n};\\n\\n\");\n+\n+  fprintf (out, \"static const struct nvptx_fn {\\n\"\n+\t   \"  const char *name;\\n\"\n+\t   \"  unsigned short dim[3];\\n\"\n+\t   \"} func_mappings[] = {\\n\");\n+  for (comma = \"\", id = func_ids; id; comma = \",\", id = id->next)\n+    fprintf (out, \"%s\\n\\t{%s}\", comma, id->ptx_name);\n+  fprintf (out, \"\\n};\\n\\n\");\n \n   fprintf (out,\n \t   \"static const struct nvptx_tdata {\\n\"\n \t   \"  const char *ptx_src;\\n\"\n \t   \"  const char *const *var_names;\\n\"\n \t   \"  __SIZE_TYPE__ var_num;\\n\"\n-\t   \"  const char *const *fn_names;\\n\"\n+\t   \"  const struct nvptx_fn *fn_names;\\n\"\n \t   \"  __SIZE_TYPE__ fn_num;\\n\"\n \t   \"} target_data = {\\n\"\n \t   \"  ptx_code,\\n\""}, {"sha": "0569a199265b8834c801821e50319357a93046c0", "filename": "gcc/config/nvptx/nvptx.c", "status": "modified", "additions": 47, "deletions": 3, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3e32ee19a56d9defea32f54788e1ef12657bc307/gcc%2Fconfig%2Fnvptx%2Fnvptx.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3e32ee19a56d9defea32f54788e1ef12657bc307/gcc%2Fconfig%2Fnvptx%2Fnvptx.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fnvptx%2Fnvptx.c?ref=3e32ee19a56d9defea32f54788e1ef12657bc307", "patch": "@@ -56,6 +56,8 @@\n #include \"cfgrtl.h\"\n #include \"stor-layout.h\"\n #include \"builtins.h\"\n+#include \"omp-low.h\"\n+#include \"gomp-constants.h\"\n \n /* This file should be included last.  */\n #include \"target-def.h\"\n@@ -2066,9 +2068,51 @@ nvptx_vector_alignment (const_tree type)\n static void\n nvptx_record_offload_symbol (tree decl)\n {\n-  fprintf (asm_out_file, \"//:%s_MAP %s\\n\",\n-\t   TREE_CODE (decl) == VAR_DECL ? \"VAR\" : \"FUNC\",\n-\t   IDENTIFIER_POINTER (DECL_ASSEMBLER_NAME (decl)));\n+  switch (TREE_CODE (decl))\n+    {\n+    case VAR_DECL:\n+      fprintf (asm_out_file, \"//:VAR_MAP \\\"%s\\\"\\n\",\n+\t       IDENTIFIER_POINTER (DECL_ASSEMBLER_NAME (decl)));\n+      break;\n+\n+    case FUNCTION_DECL:\n+      {\n+\ttree attr = get_oacc_fn_attrib (decl);\n+\ttree dims = NULL_TREE;\n+\tunsigned ix;\n+\n+\tif (attr)\n+\t  dims = TREE_VALUE (attr);\n+\tfprintf (asm_out_file, \"//:FUNC_MAP \\\"%s\\\"\",\n+\t\t IDENTIFIER_POINTER (DECL_ASSEMBLER_NAME (decl)));\n+\n+\tfor (ix = 0; ix != GOMP_DIM_MAX; ix++)\n+\t  {\n+\t    int size = 1;\n+\n+\t    /* TODO: This check can go away once the dimension default\n+\t       machinery is merged to trunk.  */\n+\t    if (dims)\n+\t      {\n+\t\ttree dim = TREE_VALUE (dims);\n+\n+\t\tif (dim)\n+\t\t  size = TREE_INT_CST_LOW (dim);\n+\n+\t\tgcc_assert (!TREE_PURPOSE (dims));\n+\t\tdims = TREE_CHAIN (dims);\n+\t      }\n+\t    \n+\t    fprintf (asm_out_file, \", %#x\", size);\n+\t  }\n+\t\n+\tfprintf (asm_out_file, \"\\n\");\n+      }\n+      break;\n+  \n+    default:\n+      gcc_unreachable ();\n+    }\n }\n \n /* Implement TARGET_ASM_FILE_START.  Write the kinds of things ptxas expects"}, {"sha": "5159b8b43269f9074318dd1fb412d9b1b2385103", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3e32ee19a56d9defea32f54788e1ef12657bc307/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3e32ee19a56d9defea32f54788e1ef12657bc307/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=3e32ee19a56d9defea32f54788e1ef12657bc307", "patch": "@@ -1,3 +1,10 @@\n+2015-09-28  Nathan Sidwell  <nathan@codesourcery.com>\n+\n+\t* f95-lang.c (DEF_FUNCTION_TYPE_VAR_6): New.\n+\t(DEF_FUNCTION_TYPE_VAR_11): Delete.\n+\t* types.def (DEF_FUNCTION_TYPE_VAR_6): New.\n+\t(DEF_FUNCTION_TYPE_VAR_11): Delete.\n+\n 2015-09-26  Mikael Morin  <mikael@gcc.gnu.org>\n \n \tPR fortran/67721"}, {"sha": "0bcfb3f61f62f36c8ca850e7e82dfb93e7b9d781", "filename": "gcc/fortran/f95-lang.c", "status": "modified", "additions": 8, "deletions": 13, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3e32ee19a56d9defea32f54788e1ef12657bc307/gcc%2Ffortran%2Ff95-lang.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3e32ee19a56d9defea32f54788e1ef12657bc307/gcc%2Ffortran%2Ff95-lang.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ff95-lang.c?ref=3e32ee19a56d9defea32f54788e1ef12657bc307", "patch": "@@ -635,10 +635,10 @@ gfc_init_builtin_functions (void)\n \t\t\t    ARG6, ARG7, ARG8) NAME,\n #define DEF_FUNCTION_TYPE_VAR_0(NAME, RETURN) NAME,\n #define DEF_FUNCTION_TYPE_VAR_2(NAME, RETURN, ARG1, ARG2) NAME,\n+#define DEF_FUNCTION_TYPE_VAR_6(NAME, RETURN, ARG1, ARG2, ARG3, ARG4, ARG5, \\\n+\t\t\t\t ARG6) NAME,\n #define DEF_FUNCTION_TYPE_VAR_7(NAME, RETURN, ARG1, ARG2, ARG3, ARG4, ARG5, \\\n \t\t\t\tARG6, ARG7) NAME,\n-#define DEF_FUNCTION_TYPE_VAR_11(NAME, RETURN, ARG1, ARG2, ARG3, ARG4, ARG5, \\\n-\t\t\t\t ARG6, ARG7, ARG8, ARG9, ARG10, ARG11) NAME,\n #define DEF_POINTER_TYPE(NAME, TYPE) NAME,\n #include \"types.def\"\n #undef DEF_PRIMITIVE_TYPE\n@@ -653,8 +653,8 @@ gfc_init_builtin_functions (void)\n #undef DEF_FUNCTION_TYPE_8\n #undef DEF_FUNCTION_TYPE_VAR_0\n #undef DEF_FUNCTION_TYPE_VAR_2\n+#undef DEF_FUNCTION_TYPE_VAR_6\n #undef DEF_FUNCTION_TYPE_VAR_7\n-#undef DEF_FUNCTION_TYPE_VAR_11\n #undef DEF_POINTER_TYPE\n     BT_LAST\n   };\n@@ -1096,8 +1096,8 @@ gfc_init_builtin_functions (void)\n \t\t\t\t\tbuiltin_types[(int) ARG1],     \t\\\n \t\t\t\t\tbuiltin_types[(int) ARG2],     \t\\\n \t\t\t\t\tNULL_TREE);\n-#define DEF_FUNCTION_TYPE_VAR_7(ENUM, RETURN, ARG1, ARG2, ARG3, ARG4, ARG5, \\\n-\t\t\t\tARG6, ARG7)\t\t\t\t\\\n+#define DEF_FUNCTION_TYPE_VAR_6(ENUM, RETURN, ARG1, ARG2, ARG3, ARG4, ARG5, \\\n+\t\t\t\tARG6)\t\\\n   builtin_types[(int) ENUM]\t\t\t\t\t\t\\\n     = build_varargs_function_type_list (builtin_types[(int) RETURN],   \t\\\n \t\t\t\t\tbuiltin_types[(int) ARG1],     \t\\\n@@ -1106,10 +1106,9 @@ gfc_init_builtin_functions (void)\n \t\t\t\t\tbuiltin_types[(int) ARG4],\t\\\n \t\t\t\t\tbuiltin_types[(int) ARG5],\t\\\n \t\t\t\t\tbuiltin_types[(int) ARG6],\t\\\n-\t\t\t\t\tbuiltin_types[(int) ARG7],\t\\\n \t\t\t\t\tNULL_TREE);\n-#define DEF_FUNCTION_TYPE_VAR_11(ENUM, RETURN, ARG1, ARG2, ARG3, ARG4, ARG5, \\\n-\t\t\t\t ARG6, ARG7, ARG8, ARG9, ARG10, ARG11)\t\\\n+#define DEF_FUNCTION_TYPE_VAR_7(ENUM, RETURN, ARG1, ARG2, ARG3, ARG4, ARG5, \\\n+\t\t\t\tARG6, ARG7)\t\t\t\t\\\n   builtin_types[(int) ENUM]\t\t\t\t\t\t\\\n     = build_varargs_function_type_list (builtin_types[(int) RETURN],   \t\\\n \t\t\t\t\tbuiltin_types[(int) ARG1],     \t\\\n@@ -1119,10 +1118,6 @@ gfc_init_builtin_functions (void)\n \t\t\t\t\tbuiltin_types[(int) ARG5],\t\\\n \t\t\t\t\tbuiltin_types[(int) ARG6],\t\\\n \t\t\t\t\tbuiltin_types[(int) ARG7],\t\\\n-\t\t\t\t\tbuiltin_types[(int) ARG8],\t\\\n-\t\t\t\t\tbuiltin_types[(int) ARG9],\t\\\n-\t\t\t\t\tbuiltin_types[(int) ARG10],\t\\\n-\t\t\t\t\tbuiltin_types[(int) ARG11],\t\\\n \t\t\t\t\tNULL_TREE);\n #define DEF_POINTER_TYPE(ENUM, TYPE)\t\t\t\\\n   builtin_types[(int) ENUM]\t\t\t\t\\\n@@ -1140,8 +1135,8 @@ gfc_init_builtin_functions (void)\n #undef DEF_FUNCTION_TYPE_8\n #undef DEF_FUNCTION_TYPE_VAR_0\n #undef DEF_FUNCTION_TYPE_VAR_2\n+#undef DEF_FUNCTION_TYPE_VAR_6\n #undef DEF_FUNCTION_TYPE_VAR_7\n-#undef DEF_FUNCTION_TYPE_VAR_11\n #undef DEF_POINTER_TYPE\n   builtin_types[(int) BT_LAST] = NULL_TREE;\n "}, {"sha": "c460b59400d883c1f908cfc18e691914277157b6", "filename": "gcc/fortran/types.def", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3e32ee19a56d9defea32f54788e1ef12657bc307/gcc%2Ffortran%2Ftypes.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3e32ee19a56d9defea32f54788e1ef12657bc307/gcc%2Ffortran%2Ftypes.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftypes.def?ref=3e32ee19a56d9defea32f54788e1ef12657bc307", "patch": "@@ -219,7 +219,6 @@ DEF_FUNCTION_TYPE_VAR_7 (BT_FN_VOID_INT_SIZE_PTR_PTR_PTR_INT_INT_VAR,\n \t\t\t BT_VOID, BT_INT, BT_SIZE, BT_PTR, BT_PTR,\n \t\t\t BT_PTR, BT_INT, BT_INT)\n \n-DEF_FUNCTION_TYPE_VAR_11 (BT_FN_VOID_INT_OMPFN_SIZE_PTR_PTR_PTR_INT_INT_INT_INT_INT_VAR,\n+DEF_FUNCTION_TYPE_VAR_6 (BT_FN_VOID_INT_OMPFN_SIZE_PTR_PTR_PTR_VAR,\n \t\t\t  BT_VOID, BT_INT, BT_PTR_FN_VOID_PTR, BT_SIZE,\n-\t\t\t  BT_PTR, BT_PTR, BT_PTR, BT_INT, BT_INT, BT_INT,\n-\t\t\t  BT_INT, BT_INT)\n+\t\t\t  BT_PTR, BT_PTR, BT_PTR)"}, {"sha": "265f5f81564df8302bd1f179c136941e42b26eac", "filename": "gcc/lto/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3e32ee19a56d9defea32f54788e1ef12657bc307/gcc%2Flto%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3e32ee19a56d9defea32f54788e1ef12657bc307/gcc%2Flto%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flto%2FChangeLog?ref=3e32ee19a56d9defea32f54788e1ef12657bc307", "patch": "@@ -1,3 +1,8 @@\n+2015-09-28  Nathan Sidwell  <nathan@codesourcery.com>\n+\n+\t* lto-lang.c (DEF_FUNCTION_TYPE_VAR_6): New.\n+\t(DEF_FUNCTION_TYPE_VAR_11): Delete.\n+\n 2015-08-31  Richard Biener  <rguenther@suse.de>\n \n \t* lto.c (compare_tree_sccs_1): Compare DECL_ABSTRACT_ORIGIN."}, {"sha": "67ccf57f708f06ab718b900e371027524589db2d", "filename": "gcc/lto/lto-lang.c", "status": "modified", "additions": 7, "deletions": 8, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3e32ee19a56d9defea32f54788e1ef12657bc307/gcc%2Flto%2Flto-lang.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3e32ee19a56d9defea32f54788e1ef12657bc307/gcc%2Flto%2Flto-lang.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flto%2Flto-lang.c?ref=3e32ee19a56d9defea32f54788e1ef12657bc307", "patch": "@@ -160,10 +160,10 @@ enum lto_builtin_type\n #define DEF_FUNCTION_TYPE_VAR_4(NAME, RETURN, ARG1, ARG2, ARG3, ARG4) NAME,\n #define DEF_FUNCTION_TYPE_VAR_5(NAME, RETURN, ARG1, ARG2, ARG3, ARG4, ARG6) \\\n \t\t\t\tNAME,\n+#define DEF_FUNCTION_TYPE_VAR_6(NAME, RETURN, ARG1, ARG2, ARG3, ARG4, ARG5, \\\n+\t\t\t\t ARG6) NAME,\n #define DEF_FUNCTION_TYPE_VAR_7(NAME, RETURN, ARG1, ARG2, ARG3, ARG4, ARG5, \\\n \t\t\t\tARG6, ARG7) NAME,\n-#define DEF_FUNCTION_TYPE_VAR_11(NAME, RETURN, ARG1, ARG2, ARG3, ARG4, ARG5, \\\n-\t\t\t\t ARG6, ARG7, ARG8, ARG9, ARG10, ARG11) NAME,\n #define DEF_POINTER_TYPE(NAME, TYPE) NAME,\n #include \"builtin-types.def\"\n #undef DEF_PRIMITIVE_TYPE\n@@ -182,8 +182,8 @@ enum lto_builtin_type\n #undef DEF_FUNCTION_TYPE_VAR_3\n #undef DEF_FUNCTION_TYPE_VAR_4\n #undef DEF_FUNCTION_TYPE_VAR_5\n+#undef DEF_FUNCTION_TYPE_VAR_6\n #undef DEF_FUNCTION_TYPE_VAR_7\n-#undef DEF_FUNCTION_TYPE_VAR_11\n #undef DEF_POINTER_TYPE\n   BT_LAST\n };\n@@ -668,13 +668,12 @@ lto_define_builtins (tree va_list_ref_type_node ATTRIBUTE_UNUSED,\n   def_fn_type (ENUM, RETURN, 1, 4, ARG1, ARG2, ARG3, ARG4);\n #define DEF_FUNCTION_TYPE_VAR_5(ENUM, RETURN, ARG1, ARG2, ARG3, ARG4, ARG5) \\\n   def_fn_type (ENUM, RETURN, 1, 5, ARG1, ARG2, ARG3, ARG4, ARG5);\n+#define DEF_FUNCTION_TYPE_VAR_6(ENUM, RETURN, ARG1, ARG2, ARG3, ARG4, ARG5, \\\n+\t\t\t\t ARG6)\t\\\n+  def_fn_type (ENUM, RETURN, 1, 6, ARG1, ARG2, ARG3, ARG4, ARG5, ARG6);\n #define DEF_FUNCTION_TYPE_VAR_7(ENUM, RETURN, ARG1, ARG2, ARG3, ARG4, ARG5, \\\n \t\t\t\tARG6, ARG7)\t\t\t\t\\\n   def_fn_type (ENUM, RETURN, 1, 7, ARG1, ARG2, ARG3, ARG4, ARG5, ARG6, ARG7);\n-#define DEF_FUNCTION_TYPE_VAR_11(ENUM, RETURN, ARG1, ARG2, ARG3, ARG4, ARG5, \\\n-\t\t\t\t ARG6, ARG7, ARG8, ARG9, ARG10, ARG11)\t\\\n-  def_fn_type (ENUM, RETURN, 1, 11, ARG1, ARG2, ARG3, ARG4, ARG5, ARG6,\t\\\n-\t       ARG7, ARG8, ARG9, ARG10, ARG11);\n #define DEF_POINTER_TYPE(ENUM, TYPE) \\\n   builtin_types[(int) ENUM] = build_pointer_type (builtin_types[(int) TYPE]);\n \n@@ -696,8 +695,8 @@ lto_define_builtins (tree va_list_ref_type_node ATTRIBUTE_UNUSED,\n #undef DEF_FUNCTION_TYPE_VAR_3\n #undef DEF_FUNCTION_TYPE_VAR_4\n #undef DEF_FUNCTION_TYPE_VAR_5\n+#undef DEF_FUNCTION_TYPE_VAR_6\n #undef DEF_FUNCTION_TYPE_VAR_7\n-#undef DEF_FUNCTION_TYPE_VAR_11\n #undef DEF_POINTER_TYPE\n   builtin_types[(int) BT_LAST] = NULL_TREE;\n "}, {"sha": "d09bdb69ece41aeb5e87a2b4ad024ecd43707ba8", "filename": "gcc/omp-builtins.def", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3e32ee19a56d9defea32f54788e1ef12657bc307/gcc%2Fomp-builtins.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3e32ee19a56d9defea32f54788e1ef12657bc307/gcc%2Fomp-builtins.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fomp-builtins.def?ref=3e32ee19a56d9defea32f54788e1ef12657bc307", "patch": "@@ -38,8 +38,8 @@ DEF_GOACC_BUILTIN (BUILT_IN_GOACC_DATA_END, \"GOACC_data_end\",\n DEF_GOACC_BUILTIN (BUILT_IN_GOACC_ENTER_EXIT_DATA, \"GOACC_enter_exit_data\",\n \t\t   BT_FN_VOID_INT_SIZE_PTR_PTR_PTR_INT_INT_VAR,\n \t\t   ATTR_NOTHROW_LIST)\n-DEF_GOACC_BUILTIN (BUILT_IN_GOACC_PARALLEL, \"GOACC_parallel\",\n-\t\t   BT_FN_VOID_INT_OMPFN_SIZE_PTR_PTR_PTR_INT_INT_INT_INT_INT_VAR,\n+DEF_GOACC_BUILTIN (BUILT_IN_GOACC_PARALLEL, \"GOACC_parallel_keyed\",\n+\t\t   BT_FN_VOID_INT_OMPFN_SIZE_PTR_PTR_PTR_VAR,\n \t\t   ATTR_NOTHROW_LIST)\n DEF_GOACC_BUILTIN (BUILT_IN_GOACC_UPDATE, \"GOACC_update\",\n \t\t   BT_FN_VOID_INT_SIZE_PTR_PTR_PTR_INT_INT_VAR,"}, {"sha": "8bcad08eb1b115ba6a03ee7df2fb2c82352d0b21", "filename": "gcc/omp-low.c", "status": "modified", "additions": 166, "deletions": 63, "changes": 229, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3e32ee19a56d9defea32f54788e1ef12657bc307/gcc%2Fomp-low.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3e32ee19a56d9defea32f54788e1ef12657bc307/gcc%2Fomp-low.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fomp-low.c?ref=3e32ee19a56d9defea32f54788e1ef12657bc307", "patch": "@@ -82,7 +82,6 @@ along with GCC; see the file COPYING3.  If not see\n #include \"lto-section-names.h\"\n #include \"gomp-constants.h\"\n \n-\n /* Lowering of OMP parallel and workshare constructs proceeds in two\n    phases.  The first phase scans the function looking for OMP statements\n    and then for variables that must be replaced to satisfy data sharing\n@@ -8869,6 +8868,110 @@ expand_omp_atomic (struct omp_region *region)\n }\n \n \n+/* Encode an oacc launc argument.  This matches the GOMP_LAUNCH_PACK\n+   macro on gomp-constants.h.  We do not check for overflow.  */\n+\n+static tree\n+oacc_launch_pack (unsigned code, tree device, unsigned op)\n+{\n+  tree res;\n+  \n+  res = build_int_cst (unsigned_type_node, GOMP_LAUNCH_PACK (code, 0, op));\n+  if (device)\n+    {\n+      device = fold_build2 (LSHIFT_EXPR, unsigned_type_node,\n+\t\t\t    device, build_int_cst (unsigned_type_node,\n+\t\t\t\t\t\t   GOMP_LAUNCH_DEVICE_SHIFT));\n+      res = fold_build2 (BIT_IOR_EXPR, unsigned_type_node, res, device);\n+    }\n+  return res;\n+}\n+\n+/* Look for compute grid dimension clauses and convert to an attribute\n+   attached to FN.  This permits the target-side code to (a) massage\n+   the dimensions, (b) emit that data and (c) optimize.  Non-constant\n+   dimensions are pushed onto ARGS.\n+\n+   The attribute value is a TREE_LIST.  A set of dimensions is\n+   represented as a list of INTEGER_CST.  Those that are runtime\n+   expres are represented as an INTEGER_CST of zero.\n+\n+   TOOO. Normally the attribute will just contain a single such list.  If\n+   however it contains a list of lists, this will represent the use of\n+   device_type.  Each member of the outer list is an assoc list of\n+   dimensions, keyed by the device type.  The first entry will be the\n+   default.  Well, that's the plan.  */\n+\n+#define OACC_FN_ATTRIB \"oacc function\"\n+\n+/* Replace any existing oacc fn attribute with updated dimensions.  */\n+\n+void\n+replace_oacc_fn_attrib (tree fn, tree dims)\n+{\n+  tree ident = get_identifier (OACC_FN_ATTRIB);\n+  tree attribs = DECL_ATTRIBUTES (fn);\n+\n+  /* If we happen to be present as the first attrib, drop it.  */\n+  if (attribs && TREE_PURPOSE (attribs) == ident)\n+    attribs = TREE_CHAIN (attribs);\n+  DECL_ATTRIBUTES (fn) = tree_cons (ident, dims, attribs);\n+}\n+\n+/* Scan CLAUSES for launch dimensions and attach them to the oacc\n+   function attribute.  Push any that are non-constant onto the ARGS\n+   list, along with an appropriate GOMP_LAUNCH_DIM tag.  */\n+\n+static void\n+set_oacc_fn_attrib (tree fn, tree clauses, vec<tree> *args)\n+{\n+  /* Must match GOMP_DIM ordering.  */\n+  static const omp_clause_code ids[]\n+    = { OMP_CLAUSE_NUM_GANGS, OMP_CLAUSE_NUM_WORKERS,\n+\tOMP_CLAUSE_VECTOR_LENGTH };\n+  unsigned ix;\n+  tree dims[GOMP_DIM_MAX];\n+  tree attr = NULL_TREE;\n+  unsigned non_const = 0;\n+\n+  for (ix = GOMP_DIM_MAX; ix--;)\n+    {\n+      tree clause = find_omp_clause (clauses, ids[ix]);\n+      tree dim = NULL_TREE;\n+\n+      if (clause)\n+\tdim = OMP_CLAUSE_EXPR (clause, ids[ix]);\n+      dims[ix] = dim;\n+      if (dim && TREE_CODE (dim) != INTEGER_CST)\n+\t{\n+\t  dim = integer_zero_node;\n+\t  non_const |= GOMP_DIM_MASK (ix);\n+\t}\n+      attr = tree_cons (NULL_TREE, dim, attr);\n+    }\n+\n+  replace_oacc_fn_attrib (fn, attr);\n+\n+  if (non_const)\n+    {\n+      /* Push a dynamic argument set.  */\n+      args->safe_push (oacc_launch_pack (GOMP_LAUNCH_DIM,\n+\t\t\t\t\t NULL_TREE, non_const));\n+      for (unsigned ix = 0; ix != GOMP_DIM_MAX; ix++)\n+\tif (non_const & GOMP_DIM_MASK (ix))\n+\t  args->safe_push (dims[ix]);\n+    }\n+}\n+\n+/* Retrieve the oacc function attrib and return it.  Non-oacc\n+   functions will return NULL.  */\n+\n+tree\n+get_oacc_fn_attrib (tree fn)\n+{\n+  return lookup_attribute (OACC_FN_ATTRIB, DECL_ATTRIBUTES (fn));\n+}\n+\n /* Expand the GIMPLE_OMP_TARGET starting at REGION.  */\n \n static void\n@@ -8889,10 +8992,10 @@ expand_omp_target (struct omp_region *region)\n   offloaded = is_gimple_omp_offloaded (entry_stmt);\n   switch (gimple_omp_target_kind (entry_stmt))\n     {\n-    case GF_OMP_TARGET_KIND_REGION:\n-    case GF_OMP_TARGET_KIND_UPDATE:\n     case GF_OMP_TARGET_KIND_OACC_PARALLEL:\n     case GF_OMP_TARGET_KIND_OACC_KERNELS:\n+    case GF_OMP_TARGET_KIND_REGION:\n+    case GF_OMP_TARGET_KIND_UPDATE:\n     case GF_OMP_TARGET_KIND_OACC_UPDATE:\n     case GF_OMP_TARGET_KIND_OACC_ENTER_EXIT_DATA:\n       data_region = false;\n@@ -9224,6 +9327,7 @@ expand_omp_target (struct omp_region *region)\n     }\n \n   gimple *g;\n+  bool tagging = false;\n   /* The maximum number used by any start_ix, without varargs.  */\n   auto_vec<tree, 11> args;\n   args.quick_push (device);\n@@ -9259,88 +9363,87 @@ expand_omp_target (struct omp_region *region)\n       break;\n     case BUILT_IN_GOACC_PARALLEL:\n       {\n-\ttree t_num_gangs, t_num_workers, t_vector_length;\n-\n-\t/* Default values for num_gangs, num_workers, and vector_length.  */\n-\tt_num_gangs = t_num_workers = t_vector_length\n-\t  = fold_convert_loc (gimple_location (entry_stmt),\n-\t\t\t      integer_type_node, integer_one_node);\n-\t/* ..., but if present, use the value specified by the respective\n-\t   clause, making sure that are of the correct type.  */\n-\tc = find_omp_clause (clauses, OMP_CLAUSE_NUM_GANGS);\n-\tif (c)\n-\t  t_num_gangs = fold_convert_loc (OMP_CLAUSE_LOCATION (c),\n-\t\t\t\t\t  integer_type_node,\n-\t\t\t\t\t  OMP_CLAUSE_NUM_GANGS_EXPR (c));\n-\tc = find_omp_clause (clauses, OMP_CLAUSE_NUM_WORKERS);\n-\tif (c)\n-\t  t_num_workers = fold_convert_loc (OMP_CLAUSE_LOCATION (c),\n-\t\t\t\t\t    integer_type_node,\n-\t\t\t\t\t    OMP_CLAUSE_NUM_WORKERS_EXPR (c));\n-\tc = find_omp_clause (clauses, OMP_CLAUSE_VECTOR_LENGTH);\n-\tif (c)\n-\t  t_vector_length = fold_convert_loc (OMP_CLAUSE_LOCATION (c),\n-\t\t\t\t\t      integer_type_node,\n-\t\t\t\t\t      OMP_CLAUSE_VECTOR_LENGTH_EXPR (c));\n-\targs.quick_push (t_num_gangs);\n-\targs.quick_push (t_num_workers);\n-\targs.quick_push (t_vector_length);\n+\tset_oacc_fn_attrib (child_fn, clauses, &args);\n+\ttagging = true;\n       }\n       /* FALLTHRU */\n     case BUILT_IN_GOACC_ENTER_EXIT_DATA:\n     case BUILT_IN_GOACC_UPDATE:\n       {\n-\ttree t_async;\n-\tint t_wait_idx;\n-\n-\t/* Default values for t_async.  */\n-\tt_async = fold_convert_loc (gimple_location (entry_stmt),\n-\t\t\t\t    integer_type_node,\n-\t\t\t\t    build_int_cst (integer_type_node,\n-\t\t\t\t\t\t   GOMP_ASYNC_SYNC));\n-\t/* ..., but if present, use the value specified by the respective\n+\ttree t_async = NULL_TREE;\n+\n+\t/* If present, use the value specified by the respective\n \t   clause, making sure that is of the correct type.  */\n \tc = find_omp_clause (clauses, OMP_CLAUSE_ASYNC);\n \tif (c)\n \t  t_async = fold_convert_loc (OMP_CLAUSE_LOCATION (c),\n \t\t\t\t      integer_type_node,\n \t\t\t\t      OMP_CLAUSE_ASYNC_EXPR (c));\n-\n-\targs.quick_push (t_async);\n-\t/* Save the index, and... */\n-\tt_wait_idx = args.length ();\n-\t/* ... push a default value.  */\n-\targs.quick_push (fold_convert_loc (gimple_location (entry_stmt),\n-\t\t\t\t\t   integer_type_node,\n-\t\t\t\t\t   integer_zero_node));\n-\tc = find_omp_clause (clauses, OMP_CLAUSE_WAIT);\n-\tif (c)\n+\telse if (!tagging)\n+\t  /* Default values for t_async.  */\n+\t  t_async = fold_convert_loc (gimple_location (entry_stmt),\n+\t\t\t\t      integer_type_node,\n+\t\t\t\t      build_int_cst (integer_type_node,\n+\t\t\t\t\t\t     GOMP_ASYNC_SYNC));\n+\tif (tagging && t_async)\n \t  {\n-\t    int n = 0;\n+\t    unsigned HOST_WIDE_INT i_async;\n \n-\t    for (; c; c = OMP_CLAUSE_CHAIN (c))\n+\t    if (TREE_CODE (t_async) == INTEGER_CST)\n \t      {\n-\t\tif (OMP_CLAUSE_CODE (c) == OMP_CLAUSE_WAIT)\n-\t\t  {\n-\t\t    args.safe_push (fold_convert_loc (OMP_CLAUSE_LOCATION (c),\n-\t\t\t\t\t\t      integer_type_node,\n-\t\t\t\t\t\t      OMP_CLAUSE_WAIT_EXPR (c)));\n-\t\t    n++;\n-\t\t  }\n+\t\t/* See if we can pack the async arg in to the tag's\n+\t\t   operand.  */\n+\t\ti_async = TREE_INT_CST_LOW (t_async);\n+\n+\t\tif (i_async < GOMP_LAUNCH_OP_MAX)\n+\t\t  t_async = NULL_TREE;\n \t      }\n+\t    if (t_async)\n+\t      i_async = GOMP_LAUNCH_OP_MAX;\n+\t    args.safe_push (oacc_launch_pack\n+\t\t\t    (GOMP_LAUNCH_ASYNC, NULL_TREE, i_async));\n+\t  }\n+\tif (t_async)\n+\t  args.safe_push (t_async);\n \n-\t    /* Now that we know the number, replace the default value.  */\n-\t    args.ordered_remove (t_wait_idx);\n-\t    args.quick_insert (t_wait_idx,\n-\t\t\t       fold_convert_loc (gimple_location (entry_stmt),\n-\t\t\t\t\t\t integer_type_node,\n-\t\t\t\t\t\t build_int_cst (integer_type_node, n)));\n+\t/* Save the argument index, and ... */\n+\tunsigned t_wait_idx = args.length ();\n+\tunsigned num_waits = 0;\n+\tc = find_omp_clause (clauses, OMP_CLAUSE_WAIT);\n+\tif (!tagging || c)\n+\t  /* ... push a placeholder.  */\n+\t  args.safe_push (integer_zero_node);\n+\n+\tfor (; c; c = OMP_CLAUSE_CHAIN (c))\n+\t  if (OMP_CLAUSE_CODE (c) == OMP_CLAUSE_WAIT)\n+\t    {\n+\t      args.safe_push (fold_convert_loc (OMP_CLAUSE_LOCATION (c),\n+\t\t\t\t\t\tinteger_type_node,\n+\t\t\t\t\t\tOMP_CLAUSE_WAIT_EXPR (c)));\n+\t      num_waits++;\n+\t    }\n+\n+\tif (!tagging || num_waits)\n+\t  {\n+\t    tree len;\n+\n+\t    /* Now that we know the number, update the placeholder.  */\n+\t    if (tagging)\n+\t      len = oacc_launch_pack (GOMP_LAUNCH_WAIT, NULL_TREE, num_waits);\n+\t    else\n+\t      len = build_int_cst (integer_type_node, num_waits);\n+\t    len = fold_convert_loc (gimple_location (entry_stmt),\n+\t\t\t\t    unsigned_type_node, len);\n+\t    args[t_wait_idx] = len;\n \t  }\n       }\n       break;\n     default:\n       gcc_unreachable ();\n     }\n+  if (tagging)\n+    /*  Push terminal marker - zero.  */\n+    args.safe_push (oacc_launch_pack (0, NULL_TREE, 0));\n \n   g = gimple_build_call_vec (builtin_decl_explicit (start_ix), args);\n   gimple_set_location (g, gimple_location (entry_stmt));"}, {"sha": "4730815bba3fd7f501c4dedf7923a6ebfdade982", "filename": "gcc/omp-low.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3e32ee19a56d9defea32f54788e1ef12657bc307/gcc%2Fomp-low.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3e32ee19a56d9defea32f54788e1ef12657bc307/gcc%2Fomp-low.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fomp-low.h?ref=3e32ee19a56d9defea32f54788e1ef12657bc307", "patch": "@@ -29,6 +29,7 @@ extern tree omp_reduction_init_op (location_t, enum tree_code, tree);\n extern tree omp_reduction_init (tree, tree);\n extern bool make_gimple_omp_edges (basic_block, struct omp_region **, int *);\n extern void omp_finish_file (void);\n+extern tree get_oacc_fn_attrib (tree);\n \n extern GTY(()) vec<tree, va_gc> *offload_funcs;\n extern GTY(()) vec<tree, va_gc> *offload_vars;"}, {"sha": "35c72b661b379afd0ee86c87811daeaca548a566", "filename": "gcc/tree.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3e32ee19a56d9defea32f54788e1ef12657bc307/gcc%2Ftree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3e32ee19a56d9defea32f54788e1ef12657bc307/gcc%2Ftree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.h?ref=3e32ee19a56d9defea32f54788e1ef12657bc307", "patch": "@@ -1,3 +1,4 @@\n+\n /* Definitions for the ubiquitous 'tree' type for GNU compilers.\n    Copyright (C) 1989-2015 Free Software Foundation, Inc.\n \n@@ -1369,6 +1370,8 @@ extern void protected_set_expr_location (tree, location_t);\n   OMP_CLAUSE_OPERAND (OMP_CLAUSE_SUBCODE_CHECK (NODE, OMP_CLAUSE_SCHEDULE), 0)\n \n /* OpenACC clause expressions  */\n+#define OMP_CLAUSE_EXPR(NODE, CLAUSE) \\\n+  OMP_CLAUSE_OPERAND (OMP_CLAUSE_SUBCODE_CHECK (NODE, CLAUSE), 0)\n #define OMP_CLAUSE_GANG_EXPR(NODE) \\\n   OMP_CLAUSE_OPERAND ( \\\n     OMP_CLAUSE_SUBCODE_CHECK (NODE, OMP_CLAUSE_GANG), 0)"}, {"sha": "e8fca1e39535b7944dd58e110bc8c788fb16c3e4", "filename": "include/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3e32ee19a56d9defea32f54788e1ef12657bc307/include%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3e32ee19a56d9defea32f54788e1ef12657bc307/include%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/include%2FChangeLog?ref=3e32ee19a56d9defea32f54788e1ef12657bc307", "patch": "@@ -1,3 +1,15 @@\n+2015-09-28  Nathan Sidwell  <nathan@codesourcery.com>\n+\n+\t* gomp-constants.h (GOMP_VERSION_NVIDIA_PTX): Increment.\n+\t(GOMP_DIM_GANG, GOMP_DIM_WORKER, GOMP_DIM_VECTOR, GOMP_DIM_MAX,\n+\tGOMP_DIM_MASK): New.\n+\t(GOMP_LAUNCH_DIM, GOMP_LAUNCH_ASYNC, GOMP_LAUNCH_WAIT): New.\n+\t(GOMP_LAUNCH_CODE_SHIFT, GOMP_LAUNCH_DEVICE_SHIFT,\n+\tGOMP_LAUNCH_OP_SHIFT): New.\n+\t(GOMP_LAUNCH_PACK, GOMP_LAUNCH_CODE, GOMP_LAUNCH_DEVICE,\n+\tGOMP_LAUNCH_OP): New.\n+\t(GOMP_LAUNCH_OP_MAX): New.\n+\n 2015-08-24  Nathan Sidwell  <nathan@codesourcery.com>\n \n \t* gomp-constants.h (GOMP_VERSION, GOMP_VERSION_NVIDIA_PTX,"}, {"sha": "228d93391a04ebe5062c5976948b9030170f17cf", "filename": "include/gomp-constants.h", "status": "modified", "additions": 23, "deletions": 1, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3e32ee19a56d9defea32f54788e1ef12657bc307/include%2Fgomp-constants.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3e32ee19a56d9defea32f54788e1ef12657bc307/include%2Fgomp-constants.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/include%2Fgomp-constants.h?ref=3e32ee19a56d9defea32f54788e1ef12657bc307", "patch": "@@ -115,11 +115,33 @@ enum gomp_map_kind\n \n /* Versions of libgomp and device-specific plugins.  */\n #define GOMP_VERSION\t0\n-#define GOMP_VERSION_NVIDIA_PTX 0\n+#define GOMP_VERSION_NVIDIA_PTX 1\n #define GOMP_VERSION_INTEL_MIC 0\n \n #define GOMP_VERSION_PACK(LIB, DEV) (((LIB) << 16) | (DEV))\n #define GOMP_VERSION_LIB(PACK) (((PACK) >> 16) & 0xffff)\n #define GOMP_VERSION_DEV(PACK) ((PACK) & 0xffff)\n \n+#define GOMP_DIM_GANG\t0\n+#define GOMP_DIM_WORKER\t1\n+#define GOMP_DIM_VECTOR\t2\n+#define GOMP_DIM_MAX\t3\n+#define GOMP_DIM_MASK(X) (1u << (X))\n+\n+/* Varadic launch arguments.  End of list is marked by a zero.  */\n+#define GOMP_LAUNCH_DIM\t\t1  /* Launch dimensions, op = mask */\n+#define GOMP_LAUNCH_ASYNC\t2  /* Async, op = cst val if not MAX  */\n+#define GOMP_LAUNCH_WAIT\t3  /* Waits, op = num waits.  */\n+#define GOMP_LAUNCH_CODE_SHIFT\t28\n+#define GOMP_LAUNCH_DEVICE_SHIFT 16\n+#define GOMP_LAUNCH_OP_SHIFT 0\n+#define GOMP_LAUNCH_PACK(CODE,DEVICE,OP)\t\\\n+  (((CODE) << GOMP_LAUNCH_CODE_SHIFT)\t\t\\\n+   | ((DEVICE) << GOMP_LAUNCH_DEVICE_SHIFT)\t\\\n+   | ((OP) << GOMP_LAUNCH_OP_SHIFT))\n+#define GOMP_LAUNCH_CODE(X) (((X) >> GOMP_LAUNCH_CODE_SHIFT) & 0xf)\n+#define GOMP_LAUNCH_DEVICE(X) (((X) >> GOMP_LAUNCH_DEVICE_SHIFT) & 0xfff)\n+#define GOMP_LAUNCH_OP(X) (((X) >> GOMP_LAUNCH_OP_SHIFT) & 0xffff)\n+#define GOMP_LAUNCH_OP_MAX 0xffff\n+\n #endif"}, {"sha": "7c1b20f8d0f6df9d645a3888727a5e5374d58f0f", "filename": "libgomp/ChangeLog", "status": "modified", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3e32ee19a56d9defea32f54788e1ef12657bc307/libgomp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3e32ee19a56d9defea32f54788e1ef12657bc307/libgomp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2FChangeLog?ref=3e32ee19a56d9defea32f54788e1ef12657bc307", "patch": "@@ -1,3 +1,27 @@\n+2015-09-28  Nathan Sidwell  <nathan@codesourcery.com>\n+\n+\t* libgomp.h (acc_dispatch_t): Replace separate geometry args with\n+\tarray.\n+\t* libgomp.map (GOACC_parallel_keyed): New.\n+\t* oacc-parallel.c (goacc_wait): Take pointer to va_list.  Adjust\n+\tall callers.\n+\t(GOACC_parallel_keyed): New interface.  Lose geometry arguments\n+\tand take keyed varargs list.  Adjust call to exec_func.\n+\t(GOACC_parallel): Force host fallback.\n+\t* libgomp_g.h (GOACC_parallel): Remove.\n+\t(GOACC_parallel_keyed): Declare.\n+\t* plugin/plugin-nvptx.c (struct targ_fn_launch): New struct.\n+\t(stuct targ_gn_descriptor): Replace name field with launch field.\n+\t(nvptx_exec): Lose separate geometry args, take array.  Process\n+\tdynamic dimensions and adjust.\n+\t(struct nvptx_tdata): Replace fn_names field with fn_descs.\n+\t(GOMP_OFFLOAD_load_image): Adjust for change in function table\n+\tdata.\n+\t(GOMP_OFFLOAD_openacc_parallel): Adjust for change in dimension\n+\tpassing.\n+\t* oacc-host.c (host_openacc_exec): Adjust for change in dimension\n+\tpassing.\n+\n 2015-09-22  Chung-Lin Tang  <cltang@codesourcery.com>\n \n \tPR libgomp/67141"}, {"sha": "04262c4ab28fe58c5e39f2fff069796b79f99558", "filename": "libgomp/libgomp.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3e32ee19a56d9defea32f54788e1ef12657bc307/libgomp%2Flibgomp.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3e32ee19a56d9defea32f54788e1ef12657bc307/libgomp%2Flibgomp.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Flibgomp.h?ref=3e32ee19a56d9defea32f54788e1ef12657bc307", "patch": "@@ -695,7 +695,7 @@ typedef struct acc_dispatch_t\n \n   /* Execute.  */\n   void (*exec_func) (void (*) (void *), size_t, void **, void **, size_t *,\n-\t\t     unsigned short *, int, int, int, int, void *);\n+\t\t     unsigned short *, int, unsigned *, void *);\n \n   /* Async cleanup callback registration.  */\n   void (*register_async_cleanup_func) (void *);"}, {"sha": "3b3e0c2ac733c84e9bc125a45e2941271633100e", "filename": "libgomp/libgomp.map", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3e32ee19a56d9defea32f54788e1ef12657bc307/libgomp%2Flibgomp.map", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3e32ee19a56d9defea32f54788e1ef12657bc307/libgomp%2Flibgomp.map", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Flibgomp.map?ref=3e32ee19a56d9defea32f54788e1ef12657bc307", "patch": "@@ -332,6 +332,11 @@ GOACC_2.0 {\n \tGOACC_get_num_threads;\n };\n \n+GOACC_2.0.1 {\n+  global:\n+\tGOACC_parallel_keyed;\n+} GOACC_2.0;\n+\n GOMP_PLUGIN_1.0 {\n   global:\n \tGOMP_PLUGIN_malloc;"}, {"sha": "e7f4effaf4813f8ee6ef7074156942039627484c", "filename": "libgomp/libgomp_g.h", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3e32ee19a56d9defea32f54788e1ef12657bc307/libgomp%2Flibgomp_g.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3e32ee19a56d9defea32f54788e1ef12657bc307/libgomp%2Flibgomp_g.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Flibgomp_g.h?ref=3e32ee19a56d9defea32f54788e1ef12657bc307", "patch": "@@ -222,9 +222,8 @@ extern void GOACC_data_start (int, size_t, void **, size_t *,\n extern void GOACC_data_end (void);\n extern void GOACC_enter_exit_data (int, size_t, void **,\n \t\t\t\t   size_t *, unsigned short *, int, int, ...);\n-extern void GOACC_parallel (int, void (*) (void *), size_t,\n-\t\t\t    void **, size_t *, unsigned short *, int, int, int,\n-\t\t\t    int, int, ...);\n+extern void GOACC_parallel_keyd (int, void (*) (void *), size_t,\n+\t\t\t          void **, size_t *, unsigned short *, ...);\n extern void GOACC_update (int, size_t, void **, size_t *,\n \t\t\t  unsigned short *, int, int, ...);\n extern void GOACC_wait (int, int, ...);"}, {"sha": "8e4ba04b465abe2d337814b393be11474e7634ee", "filename": "libgomp/oacc-host.c", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3e32ee19a56d9defea32f54788e1ef12657bc307/libgomp%2Foacc-host.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3e32ee19a56d9defea32f54788e1ef12657bc307/libgomp%2Foacc-host.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Foacc-host.c?ref=3e32ee19a56d9defea32f54788e1ef12657bc307", "patch": "@@ -137,10 +137,8 @@ host_openacc_exec (void (*fn) (void *),\n \t\t   void **devaddrs __attribute__ ((unused)),\n \t\t   size_t *sizes __attribute__ ((unused)),\n \t\t   unsigned short *kinds __attribute__ ((unused)),\n-\t\t   int num_gangs __attribute__ ((unused)),\n-\t\t   int num_workers __attribute__ ((unused)),\n-\t\t   int vector_length __attribute__ ((unused)),\n \t\t   int async __attribute__ ((unused)),\n+\t\t   unsigned *dims __attribute ((unused)),\n \t\t   void *targ_mem_desc __attribute__ ((unused)))\n {\n   fn (hostaddrs);"}, {"sha": "e31bc0a7bc6304d5a7a4cd41c93c6a6715d0370d", "filename": "libgomp/oacc-parallel.c", "status": "modified", "additions": 82, "deletions": 32, "changes": 114, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3e32ee19a56d9defea32f54788e1ef12657bc307/libgomp%2Foacc-parallel.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3e32ee19a56d9defea32f54788e1ef12657bc307/libgomp%2Foacc-parallel.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Foacc-parallel.c?ref=3e32ee19a56d9defea32f54788e1ef12657bc307", "patch": "@@ -49,14 +49,18 @@ find_pset (int pos, size_t mapnum, unsigned short *kinds)\n   return kind == GOMP_MAP_TO_PSET;\n }\n \n-static void goacc_wait (int async, int num_waits, va_list ap);\n+static void goacc_wait (int async, int num_waits, va_list *ap);\n+\n+\n+/* Launch a possibly offloaded function on DEVICE.  FN is the host fn\n+   address.  MAPNUM, HOSTADDRS, SIZES & KINDS  describe the memory\n+   blocks to be copied to/from the device.  Varadic arguments are\n+   keyed optional parameters terminated with a zero.  */\n \n void\n-GOACC_parallel (int device, void (*fn) (void *),\n-\t\tsize_t mapnum, void **hostaddrs, size_t *sizes,\n-\t\tunsigned short *kinds,\n-\t\tint num_gangs, int num_workers, int vector_length,\n-\t\tint async, int num_waits, ...)\n+GOACC_parallel_keyed (int device, void (*fn) (void *),\n+\t\t      size_t mapnum, void **hostaddrs, size_t *sizes,\n+\t\t      unsigned short *kinds, ...)\n {\n   bool host_fallback = device == GOMP_DEVICE_HOST_FALLBACK;\n   va_list ap;\n@@ -68,22 +72,16 @@ GOACC_parallel (int device, void (*fn) (void *),\n   struct splay_tree_key_s k;\n   splay_tree_key tgt_fn_key;\n   void (*tgt_fn);\n-\n-  if (num_gangs != 1)\n-    gomp_fatal (\"num_gangs (%d) different from one is not yet supported\",\n-\t\tnum_gangs);\n-  if (num_workers != 1)\n-    gomp_fatal (\"num_workers (%d) different from one is not yet supported\",\n-\t\tnum_workers);\n+  int async = GOMP_ASYNC_SYNC;\n+  unsigned dims[GOMP_DIM_MAX];\n+  unsigned tag;\n \n #ifdef HAVE_INTTYPES_H\n-  gomp_debug (0, \"%s: mapnum=%\"PRIu64\", hostaddrs=%p, size=%p, kinds=%p, \"\n-\t\t \"async = %d\\n\",\n-\t      __FUNCTION__, (uint64_t) mapnum, hostaddrs, sizes, kinds, async);\n+  gomp_debug (0, \"%s: mapnum=%\"PRIu64\", hostaddrs=%p, size=%p, kinds=%p\\n\",\n+\t      __FUNCTION__, (uint64_t) mapnum, hostaddrs, sizes, kinds);\n #else\n-  gomp_debug (0, \"%s: mapnum=%lu, hostaddrs=%p, sizes=%p, kinds=%p, async=%d\\n\",\n-\t      __FUNCTION__, (unsigned long) mapnum, hostaddrs, sizes, kinds,\n-\t      async);\n+  gomp_debug (0, \"%s: mapnum=%lu, hostaddrs=%p, sizes=%p, kinds=%p\\n\",\n+\t      __FUNCTION__, (unsigned long) mapnum, hostaddrs, sizes, kinds);\n #endif\n   goacc_lazy_initialize ();\n \n@@ -105,12 +103,51 @@ GOACC_parallel (int device, void (*fn) (void *),\n       return;\n     }\n \n-  if (num_waits)\n+  va_start (ap, kinds);\n+  /* TODO: This will need amending when device_type is implemented.  */\n+  while ((tag = va_arg (ap, unsigned)) != 0)\n     {\n-      va_start (ap, num_waits);\n-      goacc_wait (async, num_waits, ap);\n-      va_end (ap);\n+      if (GOMP_LAUNCH_DEVICE (tag))\n+\tgomp_fatal (\"device_type '%d' offload parameters, libgomp is too old\",\n+\t\t    GOMP_LAUNCH_DEVICE (tag));\n+\n+      switch (GOMP_LAUNCH_CODE (tag))\n+\t{\n+\tcase GOMP_LAUNCH_DIM:\n+\t  {\n+\t    unsigned mask = GOMP_LAUNCH_OP (tag);\n+\n+\t    for (i = 0; i != GOMP_DIM_MAX; i++)\n+\t      if (mask & GOMP_DIM_MASK (i))\n+\t\tdims[i] = va_arg (ap, unsigned);\n+\t  }\n+\t  break;\n+\n+\tcase GOMP_LAUNCH_ASYNC:\n+\t  {\n+\t    /* Small constant values are encoded in the operand.  */\n+\t    async = GOMP_LAUNCH_OP (tag);\n+\n+\t    if (async == GOMP_LAUNCH_OP_MAX)\n+\t      async = va_arg (ap, unsigned);\n+\t    break;\n+\t  }\n+\n+\tcase GOMP_LAUNCH_WAIT:\n+\t  {\n+\t    unsigned num_waits = GOMP_LAUNCH_OP (tag);\n+\n+\t    if (num_waits)\n+\t      goacc_wait (async, num_waits, &ap);\n+\t    break;\n+\t  }\n+\n+\tdefault:\n+\t  gomp_fatal (\"unrecognized offload code '%d',\"\n+\t\t      \" libgomp is too old\", GOMP_LAUNCH_CODE (tag));\n+\t}\n     }\n+  va_end (ap);\n   \n   acc_dev->openacc.async_set_async_func (async);\n \n@@ -138,9 +175,8 @@ GOACC_parallel (int device, void (*fn) (void *),\n     devaddrs[i] = (void *) (tgt->list[i]->tgt->tgt_start\n \t\t\t    + tgt->list[i]->tgt_offset);\n \n-  acc_dev->openacc.exec_func (tgt_fn, mapnum, hostaddrs, devaddrs, sizes, kinds,\n-\t\t\t      num_gangs, num_workers, vector_length, async,\n-\t\t\t      tgt);\n+  acc_dev->openacc.exec_func (tgt_fn, mapnum, hostaddrs, devaddrs, sizes,\n+\t\t\t      kinds, async, dims, tgt);\n \n   /* If running synchronously, unmap immediately.  */\n   if (async < acc_async_noval)\n@@ -154,6 +190,20 @@ GOACC_parallel (int device, void (*fn) (void *),\n   acc_dev->openacc.async_set_async_func (acc_async_sync);\n }\n \n+/* Legacy entry point, only provide host execution.  */\n+\n+void\n+GOACC_parallel (int device, void (*fn) (void *),\n+\t\tsize_t mapnum, void **hostaddrs, size_t *sizes,\n+\t\tunsigned short *kinds,\n+\t\tint num_gangs, int num_workers, int vector_length,\n+\t\tint async, int num_waits, ...)\n+{\n+  goacc_save_and_set_bind (acc_device_host);\n+  fn (hostaddrs);\n+  goacc_restore_bind ();\n+}\n+\n void\n GOACC_data_start (int device, size_t mapnum,\n \t\t  void **hostaddrs, size_t *sizes, unsigned short *kinds)\n@@ -230,7 +280,7 @@ GOACC_enter_exit_data (int device, size_t mapnum,\n       va_list ap;\n \n       va_start (ap, num_waits);\n-      goacc_wait (async, num_waits, ap);\n+      goacc_wait (async, num_waits, &ap);\n       va_end (ap);\n     }\n \n@@ -344,15 +394,15 @@ GOACC_enter_exit_data (int device, size_t mapnum,\n }\n \n static void\n-goacc_wait (int async, int num_waits, va_list ap)\n+goacc_wait (int async, int num_waits, va_list *ap)\n {\n   struct goacc_thread *thr = goacc_thread ();\n   struct gomp_device_descr *acc_dev = thr->dev;\n \n   while (num_waits--)\n     {\n-      int qid = va_arg (ap, int);\n-\n+      int qid = va_arg (*ap, int);\n+      \n       if (acc_async_test (qid))\n \tcontinue;\n \n@@ -389,7 +439,7 @@ GOACC_update (int device, size_t mapnum,\n       va_list ap;\n \n       va_start (ap, num_waits);\n-      goacc_wait (async, num_waits, ap);\n+      goacc_wait (async, num_waits, &ap);\n       va_end (ap);\n     }\n \n@@ -430,7 +480,7 @@ GOACC_wait (int async, int num_waits, ...)\n       va_list ap;\n \n       va_start (ap, num_waits);\n-      goacc_wait (async, num_waits, ap);\n+      goacc_wait (async, num_waits, &ap);\n       va_end (ap);\n     }\n   else if (async == acc_async_sync)"}, {"sha": "0c4e1afb50ce1acbf97429b32abcd00f454d779d", "filename": "libgomp/plugin/plugin-nvptx.c", "status": "modified", "additions": 46, "deletions": 39, "changes": 85, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3e32ee19a56d9defea32f54788e1ef12657bc307/libgomp%2Fplugin%2Fplugin-nvptx.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3e32ee19a56d9defea32f54788e1ef12657bc307/libgomp%2Fplugin%2Fplugin-nvptx.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Fplugin%2Fplugin-nvptx.c?ref=3e32ee19a56d9defea32f54788e1ef12657bc307", "patch": "@@ -282,12 +282,20 @@ map_push (struct ptx_stream *s, int async, size_t size, void **h, void **d)\n   return;\n }\n \n+/* Target data function launch information.  */\n+\n+struct targ_fn_launch\n+{\n+  const char *fn;\n+  unsigned short dim[3];\n+};\n+\n /* Descriptor of a loaded function.  */\n \n struct targ_fn_descriptor\n {\n   CUfunction fn;\n-  const char *name;\n+  const struct targ_fn_launch *launch;\n };\n \n /* A loaded PTX image.  */\n@@ -929,8 +937,8 @@ event_add (enum ptx_event_type type, CUevent *e, void *h)\n \n void\n nvptx_exec (void (*fn), size_t mapnum, void **hostaddrs, void **devaddrs,\n-\t  size_t *sizes, unsigned short *kinds, int num_gangs, int num_workers,\n-\t  int vector_length, int async, void *targ_mem_desc)\n+\t    size_t *sizes, unsigned short *kinds, int async, unsigned *dims,\n+\t    void *targ_mem_desc)\n {\n   struct targ_fn_descriptor *targ_fn = (struct targ_fn_descriptor *) fn;\n   CUfunction function;\n@@ -939,7 +947,6 @@ nvptx_exec (void (*fn), size_t mapnum, void **hostaddrs, void **devaddrs,\n   struct ptx_stream *dev_str;\n   void *kargs[1];\n   void *hp, *dp;\n-  unsigned int nthreads_in_block;\n   struct nvptx_thread *nvthd = nvptx_thread ();\n   const char *maybe_abort_msg = \"(perhaps abort was called)\";\n \n@@ -948,6 +955,20 @@ nvptx_exec (void (*fn), size_t mapnum, void **hostaddrs, void **devaddrs,\n   dev_str = select_stream_for_async (async, pthread_self (), false, NULL);\n   assert (dev_str == nvthd->current_stream);\n \n+  /* Initialize the launch dimensions.  Typically this is constant,\n+     provided by the device compiler, but we must permit runtime\n+     values.  */\n+  for (i = 0; i != 3; i++)\n+    if (targ_fn->launch->dim[i])\n+      dims[i] = targ_fn->launch->dim[i];\n+\n+  if (dims[GOMP_DIM_GANG] != 1)\n+    GOMP_PLUGIN_fatal (\"non-unity num_gangs (%d) not supported\",\n+\t\t       dims[GOMP_DIM_GANG]);\n+  if (dims[GOMP_DIM_WORKER] != 1)\n+    GOMP_PLUGIN_fatal (\"non-unity num_workers (%d) not supported\",\n+\t\t       dims[GOMP_DIM_WORKER]);\n+\n   /* This reserves a chunk of a pre-allocated page of memory mapped on both\n      the host and the device. HP is a host pointer to the new chunk, and DP is\n      the corresponding device pointer.  */\n@@ -965,35 +986,21 @@ nvptx_exec (void (*fn), size_t mapnum, void **hostaddrs, void **devaddrs,\n   if (r != CUDA_SUCCESS)\n     GOMP_PLUGIN_fatal (\"cuMemcpy failed: %s\", cuda_error (r));\n \n-  GOMP_PLUGIN_debug (0, \"  %s: kernel %s: launch\\n\", __FUNCTION__, targ_fn->name);\n+  GOMP_PLUGIN_debug (0, \"  %s: kernel %s: launch\"\n+\t\t     \" gangs=%u, workers=%u, vectors=%u\\n\",\n+\t\t     __FUNCTION__, targ_fn->launch->fn,\n+\t\t     dims[0], dims[1], dims[2]);\n \n   // OpenACC\t\tCUDA\n   //\n-  // num_gangs\t\tblocks\n-  // num_workers\twarps (where a warp is equivalent to 32 threads)\n-  // vector length\tthreads\n-  //\n-\n-  /* The openacc vector_length clause 'determines the vector length to use for\n-     vector or SIMD operations'.  The question is how to map this to CUDA.\n-\n-     In CUDA, the warp size is the vector length of a CUDA device.  However, the\n-     CUDA interface abstracts away from that, and only shows us warp size\n-     indirectly in maximum number of threads per block, which is a product of\n-     warp size and the number of hyperthreads of a multiprocessor.\n-\n-     We choose to map openacc vector_length directly onto the number of threads\n-     in a block, in the x dimension.  This is reflected in gcc code generation\n-     that uses ThreadIdx.x to access vector elements.\n-\n-     Attempting to use an openacc vector_length of more than the maximum number\n-     of threads per block will result in a cuda error.  */\n-  nthreads_in_block = vector_length;\n+  // num_gangs\t\tnctaid.x\n+  // num_workers\tntid.y\n+  // vector length\tntid.x\n \n   kargs[0] = &dp;\n   r = cuLaunchKernel (function,\n-\t\t      num_gangs, 1, 1,\n-\t\t      nthreads_in_block, 1, 1,\n+\t\t      dims[GOMP_DIM_GANG], 1, 1,\n+\t\t      dims[GOMP_DIM_VECTOR], dims[GOMP_DIM_WORKER], 1,\n \t\t      0, dev_str->stream, kargs, 0);\n   if (r != CUDA_SUCCESS)\n     GOMP_PLUGIN_fatal (\"cuLaunchKernel error: %s\", cuda_error (r));\n@@ -1039,7 +1046,7 @@ nvptx_exec (void (*fn), size_t mapnum, void **hostaddrs, void **devaddrs,\n #endif\n \n   GOMP_PLUGIN_debug (0, \"  %s: kernel %s: finished\\n\", __FUNCTION__,\n-\t\t     targ_fn->name);\n+\t\t     targ_fn->launch->fn);\n \n #ifndef DISABLE_ASYNC\n   if (async < acc_async_noval)\n@@ -1567,7 +1574,7 @@ typedef struct nvptx_tdata\n   const char *const *var_names;\n   size_t var_num;\n \n-  const char *const *fn_names;\n+  const struct targ_fn_launch *fn_descs;\n   size_t fn_num;\n } nvptx_tdata_t;\n \n@@ -1588,7 +1595,8 @@ GOMP_OFFLOAD_load_image (int ord, unsigned version, const void *target_data,\n \t\t\t struct addr_pair **target_table)\n {\n   CUmodule module;\n-  const char *const *fn_names, *const *var_names;\n+  const char *const *var_names;\n+  const struct targ_fn_launch *fn_descs;\n   unsigned int fn_entries, var_entries, i, j;\n   CUresult r;\n   struct targ_fn_descriptor *targ_fns;\n@@ -1617,7 +1625,7 @@ GOMP_OFFLOAD_load_image (int ord, unsigned version, const void *target_data,\n   var_entries = img_header->var_num;\n   var_names = img_header->var_names;\n   fn_entries = img_header->fn_num;\n-  fn_names = img_header->fn_names;\n+  fn_descs = img_header->fn_descs;\n \n   targ_tbl = GOMP_PLUGIN_malloc (sizeof (struct addr_pair)\n \t\t\t\t * (fn_entries + var_entries));\n@@ -1640,12 +1648,12 @@ GOMP_OFFLOAD_load_image (int ord, unsigned version, const void *target_data,\n     {\n       CUfunction function;\n \n-      r = cuModuleGetFunction (&function, module, fn_names[i]);\n+      r = cuModuleGetFunction (&function, module, fn_descs[i].fn);\n       if (r != CUDA_SUCCESS)\n \tGOMP_PLUGIN_fatal (\"cuModuleGetFunction error: %s\", cuda_error (r));\n \n       targ_fns->fn = function;\n-      targ_fns->name = (const char *) fn_names[i];\n+      targ_fns->launch = &fn_descs[i];\n \n       targ_tbl->start = (uintptr_t) targ_fns;\n       targ_tbl->end = targ_tbl->start + 1;\n@@ -1724,13 +1732,12 @@ void (*device_run) (int n, void *fn_ptr, void *vars) = NULL;\n \n void\n GOMP_OFFLOAD_openacc_parallel (void (*fn) (void *), size_t mapnum,\n-\t\t\t       void **hostaddrs, void **devaddrs, size_t *sizes,\n-\t\t\t       unsigned short *kinds, int num_gangs,\n-\t\t\t       int num_workers, int vector_length, int async,\n-\t\t\t       void *targ_mem_desc)\n+\t\t\t       void **hostaddrs, void **devaddrs,\n+\t\t\t       size_t *sizes, unsigned short *kinds,\n+\t\t\t       int async, unsigned *dims, void *targ_mem_desc)\n {\n-  nvptx_exec (fn, mapnum, hostaddrs, devaddrs, sizes, kinds, num_gangs,\n-\t    num_workers, vector_length, async, targ_mem_desc);\n+  nvptx_exec (fn, mapnum, hostaddrs, devaddrs, sizes, kinds,\n+\t      async, dims, targ_mem_desc);\n }\n \n void"}]}