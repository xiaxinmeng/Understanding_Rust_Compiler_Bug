{"sha": "aab6194d0898f5c592708fe2d44a14046b4d9097", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWFiNjE5NGQwODk4ZjVjNTkyNzA4ZmUyZDQ0YTE0MDQ2YjRkOTA5Nw==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2020-09-16T11:06:34Z"}, "committer": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2020-09-16T15:42:51Z"}, "message": "Fix pessimization in EH cleanup pass\n\nThis restores the post-order traversal done by cleanup_all_empty_eh in\norder to eliminate empty landing pads and also contains a small tweak\nto the line debug info to avoid a problematic inheritance for coverage\nmeasurement.\n\ngcc/ChangeLog:\n\t* tree-eh.c (lower_try_finally_dup_block): Backward propagate slocs\n\tto stack restore builtin calls.\n\t(cleanup_all_empty_eh): Do again a post-order traversal of the EH\n\tregion tree.\n\ngcc/testsuite/ChangeLog:\n\t* gnat.dg/concat4.adb: New test.", "tree": {"sha": "e8cbe88c94b858475d9c3d28b8062b08fdf68afd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e8cbe88c94b858475d9c3d28b8062b08fdf68afd"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/aab6194d0898f5c592708fe2d44a14046b4d9097", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/aab6194d0898f5c592708fe2d44a14046b4d9097", "html_url": "https://github.com/Rust-GCC/gccrs/commit/aab6194d0898f5c592708fe2d44a14046b4d9097", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/aab6194d0898f5c592708fe2d44a14046b4d9097/comments", "author": null, "committer": null, "parents": [{"sha": "7d1be939e0fbc5ce63ba17db3d20ccc39ac17527", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7d1be939e0fbc5ce63ba17db3d20ccc39ac17527", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7d1be939e0fbc5ce63ba17db3d20ccc39ac17527"}], "stats": {"total": 39, "additions": 32, "deletions": 7}, "files": [{"sha": "fe3f4ed836e0ad83c8302c0920fc0e53fc37cae8", "filename": "gcc/testsuite/gnat.dg/concat4.adb", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aab6194d0898f5c592708fe2d44a14046b4d9097/gcc%2Ftestsuite%2Fgnat.dg%2Fconcat4.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aab6194d0898f5c592708fe2d44a14046b4d9097/gcc%2Ftestsuite%2Fgnat.dg%2Fconcat4.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Fconcat4.adb?ref=aab6194d0898f5c592708fe2d44a14046b4d9097", "patch": "@@ -0,0 +1,17 @@\n+-- { dg-do compile }\n+\n+with Ada.Text_IO; use Ada.Text_IO;\n+\n+procedure Concat4 (X : Integer) is\n+   Ximg : constant String := Integer'Image (X);\n+begin\n+   if X > 0 then\n+      Put_Line (Ximg & \" is Positive\");\n+   elsif X < 0 then\n+      Put_Line (Ximg & \" is Negative\");\n+   else\n+      Put_Line (Ximg & \" is Null\");\n+   end if;\n+end;\n+\n+-- { dg-final { scan-assembler-not \"_Unwind_Resume\" } }"}, {"sha": "1376b82c2af221acb508abde3c6a4a01f996f8cb", "filename": "gcc/tree-eh.c", "status": "modified", "additions": 15, "deletions": 7, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aab6194d0898f5c592708fe2d44a14046b4d9097/gcc%2Ftree-eh.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aab6194d0898f5c592708fe2d44a14046b4d9097/gcc%2Ftree-eh.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-eh.c?ref=aab6194d0898f5c592708fe2d44a14046b4d9097", "patch": "@@ -899,23 +899,26 @@ lower_try_finally_dup_block (gimple_seq seq, struct leh_state *outer_state,\n   gtry *region = NULL;\n   gimple_seq new_seq;\n   gimple_stmt_iterator gsi;\n+  location_t last_loc = UNKNOWN_LOCATION;\n \n   new_seq = copy_gimple_seq_and_replace_locals (seq);\n \n-  for (gsi = gsi_start (new_seq); !gsi_end_p (gsi); gsi_next (&gsi))\n+  for (gsi = gsi_last (new_seq); !gsi_end_p (gsi); gsi_prev (&gsi))\n     {\n       gimple *stmt = gsi_stmt (gsi);\n       /* We duplicate __builtin_stack_restore at -O0 in the hope of eliminating\n-\t it on the EH paths.  When it is not eliminated, make it transparent in\n-\t the debug info.  */\n+\t it on the EH paths.  When it is not eliminated, give it the next\n+\t location in the sequence or make it transparent in the debug info.  */\n       if (gimple_call_builtin_p (stmt, BUILT_IN_STACK_RESTORE))\n-\tgimple_set_location (stmt, UNKNOWN_LOCATION);\n+\tgimple_set_location (stmt, last_loc);\n       else if (LOCATION_LOCUS (gimple_location (stmt)) == UNKNOWN_LOCATION)\n \t{\n \t  tree block = gimple_block (stmt);\n \t  gimple_set_location (stmt, loc);\n \t  gimple_set_block (stmt, block);\n \t}\n+      else\n+\tlast_loc = gimple_location (stmt);\n     }\n \n   if (outer_state->tf)\n@@ -4751,16 +4754,21 @@ cleanup_all_empty_eh (void)\n   eh_landing_pad lp;\n   int i;\n \n-  /* Ideally we'd walk the region tree and process LPs inner to outer\n-     to avoid quadraticness in EH redirection.  Walking the LP array\n-     in reverse seems to be an approximation of that.  */\n+  /* The post-order traversal may lead to quadraticness in the redirection\n+     of incoming EH edges from inner LPs, so first try to walk the region\n+     tree from inner to outer LPs in order to eliminate these edges.  */\n   for (i = vec_safe_length (cfun->eh->lp_array) - 1; i >= 1; --i)\n     {\n       lp = (*cfun->eh->lp_array)[i];\n       if (lp)\n \tchanged |= cleanup_empty_eh (lp);\n     }\n \n+  /* Now do the post-order traversal to eliminate outer empty LPs.  */\n+  for (i = 1; vec_safe_iterate (cfun->eh->lp_array, i, &lp); ++i)\n+    if (lp)\n+      changed |= cleanup_empty_eh (lp);\n+\n   return changed;\n }\n "}]}