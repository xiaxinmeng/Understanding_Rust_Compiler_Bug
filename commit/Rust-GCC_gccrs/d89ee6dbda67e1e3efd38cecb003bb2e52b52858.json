{"sha": "d89ee6dbda67e1e3efd38cecb003bb2e52b52858", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDg5ZWU2ZGJkYTY3ZTFlM2VmZDM4Y2VjYjAwM2JiMmU1MmI1Mjg1OA==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2016-12-10T08:01:17Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2016-12-10T08:01:17Z"}, "message": "re PR sanitizer/78708 ([ASAN][LTO] ICE in expand_ASAN_MARK, at internal-fn.c:380 - when compiling but not linking with ASAN)\n\n\tPR sanitizer/78708\n\t* lto-streamer-in.c (input_function): In addition to debug stmts\n\twithout -g, remove IFN_*SAN_* calls if corresponding flag_sanitize\n\tbit is not enabled.\n\nFrom-SVN: r243514", "tree": {"sha": "91c4ebe2cfe5c929b6d00b17de216d017d23dbfe", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/91c4ebe2cfe5c929b6d00b17de216d017d23dbfe"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d89ee6dbda67e1e3efd38cecb003bb2e52b52858", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d89ee6dbda67e1e3efd38cecb003bb2e52b52858", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d89ee6dbda67e1e3efd38cecb003bb2e52b52858", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d89ee6dbda67e1e3efd38cecb003bb2e52b52858/comments", "author": null, "committer": null, "parents": [{"sha": "991dde0a4fe8b15b8edecd0028b1c8c795d0891c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/991dde0a4fe8b15b8edecd0028b1c8c795d0891c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/991dde0a4fe8b15b8edecd0028b1c8c795d0891c"}], "stats": {"total": 59, "additions": 55, "deletions": 4}, "files": [{"sha": "93f4556e39f2179de0a712a0e5bdf8c21a62bb95", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d89ee6dbda67e1e3efd38cecb003bb2e52b52858/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d89ee6dbda67e1e3efd38cecb003bb2e52b52858/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=d89ee6dbda67e1e3efd38cecb003bb2e52b52858", "patch": "@@ -1,3 +1,10 @@\n+2016-12-10  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR sanitizer/78708\n+\t* lto-streamer-in.c (input_function): In addition to debug stmts\n+\twithout -g, remove IFN_*SAN_* calls if corresponding flag_sanitize\n+\tbit is not enabled.\n+\n 2016-12-09  Bill Schmidt  <wschmidt@linux.vnet.ibm.com>\n \n \t* config/rs6000/rs6000-passes.def: New file.\n@@ -10,8 +17,8 @@\n 2016-12-09  Kugan Vivekanandarajah  <kuganv@linaro.org>\n \n \tPR ipa/78721\n-\t* ipa-cp.c (propagate_vr_accross_jump_function): drop_tree_overflow\n-\tafter fold_convert.\n+\t* ipa-cp.c (propagate_vr_accross_jump_function): Call\n+\tdrop_tree_overflow after fold_convert.\n \n 2016-12-09  Jakub Jelinek  <jakub@redhat.com>\n "}, {"sha": "862e15664728c94947b6d1805a6b276bb9b402b9", "filename": "gcc/lto-streamer-in.c", "status": "modified", "additions": 46, "deletions": 2, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d89ee6dbda67e1e3efd38cecb003bb2e52b52858/gcc%2Flto-streamer-in.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d89ee6dbda67e1e3efd38cecb003bb2e52b52858/gcc%2Flto-streamer-in.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flto-streamer-in.c?ref=d89ee6dbda67e1e3efd38cecb003bb2e52b52858", "patch": "@@ -1110,15 +1110,59 @@ input_function (tree fn_decl, struct data_in *data_in,\n       while (!gsi_end_p (bsi))\n \t{\n \t  gimple *stmt = gsi_stmt (bsi);\n+\t  bool remove = false;\n \t  /* If we're recompiling LTO objects with debug stmts but\n \t     we're not supposed to have debug stmts, remove them now.\n \t     We can't remove them earlier because this would cause uid\n \t     mismatches in fixups, but we can do it at this point, as\n-\t     long as debug stmts don't require fixups.  */\n-\t  if (!MAY_HAVE_DEBUG_STMTS && !flag_wpa && is_gimple_debug (stmt))\n+\t     long as debug stmts don't require fixups.\n+\t     Similarly remove all IFN_*SAN_* internal calls   */\n+\t  if (!flag_wpa)\n+\t    {\n+\t      if (!MAY_HAVE_DEBUG_STMTS && is_gimple_debug (stmt))\n+\t\tremove = true;\n+\t      if (is_gimple_call (stmt)\n+\t\t  && gimple_call_internal_p (stmt))\n+\t\t{\n+\t\t  switch (gimple_call_internal_fn (stmt))\n+\t\t    {\n+\t\t    case IFN_UBSAN_NULL:\n+\t\t      if ((flag_sanitize\n+\t\t\t  & (SANITIZE_NULL | SANITIZE_ALIGNMENT)) == 0)\n+\t\t\tremove = true;\n+\t\t      break;\n+\t\t    case IFN_UBSAN_BOUNDS:\n+\t\t      if ((flag_sanitize & SANITIZE_BOUNDS) == 0)\n+\t\t\tremove = true;\n+\t\t      break;\n+\t\t    case IFN_UBSAN_VPTR:\n+\t\t      if ((flag_sanitize & SANITIZE_VPTR) == 0)\n+\t\t\tremove = true;\n+\t\t      break;\n+\t\t    case IFN_UBSAN_OBJECT_SIZE:\n+\t\t      if ((flag_sanitize & SANITIZE_OBJECT_SIZE) == 0)\n+\t\t\tremove = true;\n+\t\t      break;\n+\t\t    case IFN_ASAN_MARK:\n+\t\t      if ((flag_sanitize & SANITIZE_ADDRESS) == 0)\n+\t\t\tremove = true;\n+\t\t      break;\n+\t\t    case IFN_TSAN_FUNC_EXIT:\n+\t\t      if ((flag_sanitize & SANITIZE_THREAD) == 0)\n+\t\t\tremove = true;\n+\t\t      break;\n+\t\t    default:\n+\t\t      break;\n+\t\t    }\n+\t\t  gcc_assert (!remove || gimple_call_lhs (stmt) == NULL_TREE);\n+\t\t}\n+\t    }\n+\t  if (remove)\n \t    {\n \t      gimple_stmt_iterator gsi = bsi;\n \t      gsi_next (&bsi);\n+\t      unlink_stmt_vdef (stmt);\n+\t      release_defs (stmt);\n \t      gsi_remove (&gsi, true);\n \t    }\n \t  else"}]}