{"sha": "c16f21c7cf97ce48967e42d3b5d22ea169a9c2c8", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzE2ZjIxYzdjZjk3Y2U0ODk2N2U0MmQzYjVkMjJlYTE2OWE5YzJjOA==", "commit": {"author": {"name": "liuhongt", "email": "hongtao.liu@intel.com", "date": "2021-08-04T10:43:22Z"}, "committer": {"name": "liuhongt", "email": "hongtao.liu@intel.com", "date": "2021-08-05T01:11:35Z"}, "message": "Support cond_{xor,ior,and} for vector integer mode under AVX512.\n\ngcc/ChangeLog:\n\n\t* config/i386/sse.md (cond_<code><mode>): New expander.\n\ngcc/testsuite/ChangeLog:\n\n\t* gcc.target/i386/cond_op_anylogic_d-1.c: New test.\n\t* gcc.target/i386/cond_op_anylogic_d-2.c: New test.\n\t* gcc.target/i386/cond_op_anylogic_q-1.c: New test.\n\t* gcc.target/i386/cond_op_anylogic_q-2.c: New test.", "tree": {"sha": "82bfff3e5fadc7fc146b2c96fd85ca775e9fbe46", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/82bfff3e5fadc7fc146b2c96fd85ca775e9fbe46"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c16f21c7cf97ce48967e42d3b5d22ea169a9c2c8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c16f21c7cf97ce48967e42d3b5d22ea169a9c2c8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c16f21c7cf97ce48967e42d3b5d22ea169a9c2c8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c16f21c7cf97ce48967e42d3b5d22ea169a9c2c8/comments", "author": {"login": "algebra84", "id": 22926165, "node_id": "MDQ6VXNlcjIyOTI2MTY1", "avatar_url": "https://avatars.githubusercontent.com/u/22926165?v=4", "gravatar_id": "", "url": "https://api.github.com/users/algebra84", "html_url": "https://github.com/algebra84", "followers_url": "https://api.github.com/users/algebra84/followers", "following_url": "https://api.github.com/users/algebra84/following{/other_user}", "gists_url": "https://api.github.com/users/algebra84/gists{/gist_id}", "starred_url": "https://api.github.com/users/algebra84/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/algebra84/subscriptions", "organizations_url": "https://api.github.com/users/algebra84/orgs", "repos_url": "https://api.github.com/users/algebra84/repos", "events_url": "https://api.github.com/users/algebra84/events{/privacy}", "received_events_url": "https://api.github.com/users/algebra84/received_events", "type": "User", "site_admin": false}, "committer": {"login": "algebra84", "id": 22926165, "node_id": "MDQ6VXNlcjIyOTI2MTY1", "avatar_url": "https://avatars.githubusercontent.com/u/22926165?v=4", "gravatar_id": "", "url": "https://api.github.com/users/algebra84", "html_url": "https://github.com/algebra84", "followers_url": "https://api.github.com/users/algebra84/followers", "following_url": "https://api.github.com/users/algebra84/following{/other_user}", "gists_url": "https://api.github.com/users/algebra84/gists{/gist_id}", "starred_url": "https://api.github.com/users/algebra84/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/algebra84/subscriptions", "organizations_url": "https://api.github.com/users/algebra84/orgs", "repos_url": "https://api.github.com/users/algebra84/repos", "events_url": "https://api.github.com/users/algebra84/events{/privacy}", "received_events_url": "https://api.github.com/users/algebra84/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f7aa81892eb54bc040ee6f7fd6134d800a5ee89c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f7aa81892eb54bc040ee6f7fd6134d800a5ee89c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f7aa81892eb54bc040ee6f7fd6134d800a5ee89c"}], "stats": {"total": 149, "additions": 149, "deletions": 0}, "files": [{"sha": "a46a23735477cdbe922819e59252d11ecb9aaaa7", "filename": "gcc/config/i386/sse.md", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c16f21c7cf97ce48967e42d3b5d22ea169a9c2c8/gcc%2Fconfig%2Fi386%2Fsse.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c16f21c7cf97ce48967e42d3b5d22ea169a9c2c8/gcc%2Fconfig%2Fi386%2Fsse.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fsse.md?ref=c16f21c7cf97ce48967e42d3b5d22ea169a9c2c8", "patch": "@@ -14063,6 +14063,24 @@\n   DONE;\n })\n \n+(define_expand \"cond_<code><mode>\"\n+  [(set (match_operand:VI48_AVX512VL 0 \"register_operand\")\n+\t(vec_merge:VI48_AVX512VL\n+\t  (any_logic:VI48_AVX512VL\n+\t    (match_operand:VI48_AVX512VL 2 \"vector_operand\")\n+\t    (match_operand:VI48_AVX512VL 3 \"vector_operand\"))\n+\t  (match_operand:VI48_AVX512VL 4 \"nonimm_or_0_operand\")\n+\t  (match_operand:<avx512fmaskmode> 1 \"register_operand\")))]\n+  \"TARGET_AVX512F\"\n+{\n+  emit_insn (gen_<code><mode>3_mask (operands[0],\n+\t\t\t\t     operands[2],\n+\t\t\t\t     operands[3],\n+\t\t\t\t     operands[4],\n+\t\t\t\t     operands[1]));\n+  DONE;\n+})\n+\n (define_insn \"<mask_codefor><code><mode>3<mask_name>\"\n   [(set (match_operand:VI48_AVX_AVX512F 0 \"register_operand\" \"=x,x,v\")\n \t(any_logic:VI48_AVX_AVX512F"}, {"sha": "8951f4a3a278bb5998e3f1cbf154c3b4d792ff85", "filename": "gcc/testsuite/gcc.target/i386/cond_op_anylogic_d-1.c", "status": "added", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c16f21c7cf97ce48967e42d3b5d22ea169a9c2c8/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fcond_op_anylogic_d-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c16f21c7cf97ce48967e42d3b5d22ea169a9c2c8/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fcond_op_anylogic_d-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fcond_op_anylogic_d-1.c?ref=c16f21c7cf97ce48967e42d3b5d22ea169a9c2c8", "patch": "@@ -0,0 +1,38 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -march=skylake-avx512 -fdump-tree-optimized\" } */\n+/* { dg-final { scan-tree-dump \".COND_AND\" \"optimized\" } } */\n+/* { dg-final { scan-tree-dump \".COND_XOR\" \"optimized\" } } */\n+/* { dg-final { scan-tree-dump \".COND_IOR\" \"optimized\" } } */\n+/* { dg-final { scan-assembler-times \"vpxord\"  1 } } */\n+/* { dg-final { scan-assembler-times \"vpord\"  1 } } */\n+/* { dg-final { scan-assembler-times \"vpandd\"  1 } } */\n+\n+typedef int int32;\n+typedef unsigned int uint32;\n+typedef long long int64;\n+typedef unsigned long long uint64;\n+\n+#ifndef NUM\n+#define NUM 800\n+#endif\n+#ifndef TYPE\n+#define TYPE int\n+#endif\n+\n+TYPE a[NUM], b[NUM], c[NUM], d[NUM], e[NUM], j[NUM];\n+\n+#define BIN(OPNAME, OP)\t\t\t\t\\\n+  void\t\t\t\t\t\t\\\n+  __attribute__ ((noipa,optimize (\"O3\")))\t\\\n+  foo_##OPNAME ()\t\t\t\t\\\n+  {\t\t\t\t\t\t\\\n+    for (int i = 0; i != NUM; i++)\t\t\\\n+      if (b[i] < c[i])\t\t\t\t\\\n+\ta[i] = d[i] OP e[i];\t\t\t\\\n+      else\t\t\t\t\t\\\n+\ta[i] = d[i] - e[i];\t\t\t\\\n+  }\n+\n+BIN (and, &);\n+BIN (ior, |);\n+BIN (xor, ^);"}, {"sha": "23ca4120cf20c617f0785367fcd3fb1979908be8", "filename": "gcc/testsuite/gcc.target/i386/cond_op_anylogic_d-2.c", "status": "added", "additions": 78, "deletions": 0, "changes": 78, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c16f21c7cf97ce48967e42d3b5d22ea169a9c2c8/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fcond_op_anylogic_d-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c16f21c7cf97ce48967e42d3b5d22ea169a9c2c8/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fcond_op_anylogic_d-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fcond_op_anylogic_d-2.c?ref=c16f21c7cf97ce48967e42d3b5d22ea169a9c2c8", "patch": "@@ -0,0 +1,78 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -mavx512vl -mprefer-vector-width=256\" } */\n+/* { dg-require-effective-target avx512vl } */\n+\n+#define AVX512VL\n+#ifndef CHECK\n+#define CHECK \"avx512f-helper.h\"\n+#endif\n+\n+#include CHECK\n+\n+#include \"cond_op_anylogic_d-1.c\"\n+#define BINO2(OPNAME, OP)\t\t\t\\\n+  void\t\t\t\t\t\t\\\n+  __attribute__ ((noipa,optimize (\"O2\")))\t\\\n+  foo_o2_##OPNAME ()\t\t\t\t\\\n+  {\t\t\t\t\t\t\\\n+    for (int i = 0; i != NUM; i++)\t\t\\\n+      if (b[i] < c[i])\t\t\t\t\\\n+\tj[i] = d[i] OP e[i];\t\t\t\\\n+      else\t\t\t\t\t\\\n+\tj[i] = d[i] - e[i];\t\t\t\\\n+  }\n+\n+BINO2 (and, &);\n+BINO2 (ior, |);\n+BINO2 (xor, ^);\n+\n+static void\n+test_256 (void)\n+{\n+  int sign = -1;\n+  for (int i = 0; i != NUM; i++)\n+    {\n+      a[i] = 0;\n+      d[i] = i * 2;\n+      e[i] = i * i * 3 - i * 9 + 153;\n+      b[i] = i * 83;\n+      c[i] = b[i] + sign;\n+      sign *= -1;\n+      j[i] = 1;\n+    }\n+  foo_and ();\n+  foo_o2_and ();\n+  for (int i = 0; i != NUM; i++)\n+    {\n+      if (a[i] != j[i])\n+\tabort ();\n+      a[i] = 0;\n+      b[i] = 1;\n+    }\n+\n+  foo_xor ();\n+  foo_o2_xor ();\n+  for (int i = 0; i != NUM; i++)\n+    {\n+      if (a[i] != j[i])\n+  \tabort ();\n+      a[i] = 0;\n+      j[i] = 1;\n+    }\n+\n+  foo_ior ();\n+  foo_o2_ior ();\n+  for (int i = 0; i != NUM; i++)\n+    {\n+      if (a[i] != j[i])\n+  \tabort ();\n+      a[i] = 0;\n+      j[i] = 1;\n+    }\n+}\n+\n+static void\n+test_128 ()\n+{\n+  \n+}"}, {"sha": "cb4770113ad38aae9eb131f3e3cc04abd7204ab3", "filename": "gcc/testsuite/gcc.target/i386/cond_op_anylogic_q-1.c", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c16f21c7cf97ce48967e42d3b5d22ea169a9c2c8/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fcond_op_anylogic_q-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c16f21c7cf97ce48967e42d3b5d22ea169a9c2c8/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fcond_op_anylogic_q-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fcond_op_anylogic_q-1.c?ref=c16f21c7cf97ce48967e42d3b5d22ea169a9c2c8", "patch": "@@ -0,0 +1,10 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -march=skylake-avx512 -DTYPE=int64 -fdump-tree-optimized\" } */\n+/* { dg-final { scan-tree-dump \".COND_AND\" \"optimized\" } } */\n+/* { dg-final { scan-tree-dump \".COND_XOR\" \"optimized\" } } */\n+/* { dg-final { scan-tree-dump \".COND_IOR\" \"optimized\" } } */\n+/* { dg-final { scan-assembler-times \"vpxorq\"  1 } } */\n+/* { dg-final { scan-assembler-times \"vporq\"  1 } } */\n+/* { dg-final { scan-assembler-times \"vpandq\"  1 } } */\n+\n+#include \"cond_op_anylogic_d-1.c\""}, {"sha": "709babf271e3cee18ffa7b081f5f2a33339a6c7b", "filename": "gcc/testsuite/gcc.target/i386/cond_op_anylogic_q-2.c", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c16f21c7cf97ce48967e42d3b5d22ea169a9c2c8/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fcond_op_anylogic_q-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c16f21c7cf97ce48967e42d3b5d22ea169a9c2c8/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fcond_op_anylogic_q-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fcond_op_anylogic_q-2.c?ref=c16f21c7cf97ce48967e42d3b5d22ea169a9c2c8", "patch": "@@ -0,0 +1,5 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -mavx512vl -mprefer-vector-width=256 -DTYPE=int64\" } */\n+/* { dg-require-effective-target avx512vl } */\n+\n+#include \"cond_op_anylogic_d-2.c\""}]}