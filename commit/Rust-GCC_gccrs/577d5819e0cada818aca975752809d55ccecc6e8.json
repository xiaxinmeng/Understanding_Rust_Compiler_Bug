{"sha": "577d5819e0cada818aca975752809d55ccecc6e8", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTc3ZDU4MTllMGNhZGE4MThhY2E5NzU3NTI4MDlkNTVjY2VjYzZlOA==", "commit": {"author": {"name": "Jonathan Wright", "email": "jonathan.wright@arm.com", "date": "2021-05-16T12:01:47Z"}, "committer": {"name": "Jonathan Wright", "email": "jonathan.wright@arm.com", "date": "2021-05-19T13:45:17Z"}, "message": "aarch64: Use an expander for quad-word vec_pack_trunc pattern\n\nThe existing vec_pack_trunc RTL pattern emits an opaque two-\ninstruction assembly code sequence that prevents proper instruction\nscheduling. This commit changes the pattern to an expander that emits\nindividual xtn and xtn2 instructions.\n\nThis commit also consolidates the duplicate truncation patterns.\n\ngcc/ChangeLog:\n\n2021-05-17  Jonathan Wright  <jonathan.wright@arm.com>\n\n\t* config/aarch64/aarch64-simd.md (aarch64_simd_vec_pack_trunc_<mode>):\n\tRemove as duplicate of...\n\t(aarch64_xtn<mode>): This.\n\t(aarch64_xtn2<mode>_le): Move position in file.\n\t(aarch64_xtn2<mode>_be): Move position in file.\n\t(aarch64_xtn2<mode>): Move position in file.\n\t(vec_pack_trunc_<mode>): Define as an expander.", "tree": {"sha": "b8b80ff13cf38f91bd09424932030b966db01c11", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b8b80ff13cf38f91bd09424932030b966db01c11"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/577d5819e0cada818aca975752809d55ccecc6e8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/577d5819e0cada818aca975752809d55ccecc6e8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/577d5819e0cada818aca975752809d55ccecc6e8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/577d5819e0cada818aca975752809d55ccecc6e8/comments", "author": {"login": "jwright-arm", "id": 31624044, "node_id": "MDQ6VXNlcjMxNjI0MDQ0", "avatar_url": "https://avatars.githubusercontent.com/u/31624044?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwright-arm", "html_url": "https://github.com/jwright-arm", "followers_url": "https://api.github.com/users/jwright-arm/followers", "following_url": "https://api.github.com/users/jwright-arm/following{/other_user}", "gists_url": "https://api.github.com/users/jwright-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwright-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwright-arm/subscriptions", "organizations_url": "https://api.github.com/users/jwright-arm/orgs", "repos_url": "https://api.github.com/users/jwright-arm/repos", "events_url": "https://api.github.com/users/jwright-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/jwright-arm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwright-arm", "id": 31624044, "node_id": "MDQ6VXNlcjMxNjI0MDQ0", "avatar_url": "https://avatars.githubusercontent.com/u/31624044?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwright-arm", "html_url": "https://github.com/jwright-arm", "followers_url": "https://api.github.com/users/jwright-arm/followers", "following_url": "https://api.github.com/users/jwright-arm/following{/other_user}", "gists_url": "https://api.github.com/users/jwright-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwright-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwright-arm/subscriptions", "organizations_url": "https://api.github.com/users/jwright-arm/orgs", "repos_url": "https://api.github.com/users/jwright-arm/repos", "events_url": "https://api.github.com/users/jwright-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/jwright-arm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a680be25aa3da89c2d94dba3f76e1e1d2d81e756", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a680be25aa3da89c2d94dba3f76e1e1d2d81e756", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a680be25aa3da89c2d94dba3f76e1e1d2d81e756"}], "stats": {"total": 113, "additions": 56, "deletions": 57}, "files": [{"sha": "447b5575f2f5adbad4957e90787a4954af644b20", "filename": "gcc/config/aarch64/aarch64-simd.md", "status": "modified", "additions": 56, "deletions": 57, "changes": 113, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/577d5819e0cada818aca975752809d55ccecc6e8/gcc%2Fconfig%2Faarch64%2Faarch64-simd.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/577d5819e0cada818aca975752809d55ccecc6e8/gcc%2Fconfig%2Faarch64%2Faarch64-simd.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-simd.md?ref=577d5819e0cada818aca975752809d55ccecc6e8", "patch": "@@ -1691,14 +1691,51 @@\n ;; Narrowing operations.\n \n ;; For doubles.\n-(define_insn \"aarch64_simd_vec_pack_trunc_<mode>\"\n- [(set (match_operand:<VNARROWQ> 0 \"register_operand\" \"=w\")\n-       (truncate:<VNARROWQ> (match_operand:VQN 1 \"register_operand\" \"w\")))]\n- \"TARGET_SIMD\"\n- \"xtn\\\\t%0.<Vntype>, %1.<Vtype>\"\n+\n+(define_insn \"aarch64_xtn<mode>\"\n+  [(set (match_operand:<VNARROWQ> 0 \"register_operand\" \"=w\")\n+\t(truncate:<VNARROWQ> (match_operand:VQN 1 \"register_operand\" \"w\")))]\n+  \"TARGET_SIMD\"\n+  \"xtn\\\\t%0.<Vntype>, %1.<Vtype>\"\n   [(set_attr \"type\" \"neon_shift_imm_narrow_q\")]\n )\n \n+(define_insn \"aarch64_xtn2<mode>_le\"\n+  [(set (match_operand:<VNARROWQ2> 0 \"register_operand\" \"=w\")\n+\t(vec_concat:<VNARROWQ2>\n+\t  (match_operand:<VNARROWQ> 1 \"register_operand\" \"0\")\n+\t  (truncate:<VNARROWQ> (match_operand:VQN 2 \"register_operand\" \"w\"))))]\n+  \"TARGET_SIMD && !BYTES_BIG_ENDIAN\"\n+  \"xtn2\\t%0.<V2ntype>, %2.<Vtype>\"\n+  [(set_attr \"type\" \"neon_shift_imm_narrow_q\")]\n+)\n+\n+(define_insn \"aarch64_xtn2<mode>_be\"\n+  [(set (match_operand:<VNARROWQ2> 0 \"register_operand\" \"=w\")\n+\t(vec_concat:<VNARROWQ2>\n+\t  (truncate:<VNARROWQ> (match_operand:VQN 2 \"register_operand\" \"w\"))\n+\t  (match_operand:<VNARROWQ> 1 \"register_operand\" \"0\")))]\n+  \"TARGET_SIMD && BYTES_BIG_ENDIAN\"\n+  \"xtn2\\t%0.<V2ntype>, %2.<Vtype>\"\n+  [(set_attr \"type\" \"neon_shift_imm_narrow_q\")]\n+)\n+\n+(define_expand \"aarch64_xtn2<mode>\"\n+  [(match_operand:<VNARROWQ2> 0 \"register_operand\")\n+   (match_operand:<VNARROWQ> 1 \"register_operand\")\n+   (truncate:<VNARROWQ> (match_operand:VQN 2 \"register_operand\"))]\n+  \"TARGET_SIMD\"\n+  {\n+    if (BYTES_BIG_ENDIAN)\n+      emit_insn (gen_aarch64_xtn2<mode>_be (operands[0], operands[1],\n+\t\t\t\t\t     operands[2]));\n+    else\n+      emit_insn (gen_aarch64_xtn2<mode>_le (operands[0], operands[1],\n+\t\t\t\t\t     operands[2]));\n+    DONE;\n+  }\n+)\n+\n (define_expand \"vec_pack_trunc_<mode>\"\n  [(match_operand:<VNARROWD> 0 \"register_operand\")\n   (match_operand:VDN 1 \"register_operand\")\n@@ -1711,7 +1748,7 @@\n \n   emit_insn (gen_move_lo_quad_<Vdbl> (tempreg, operands[lo]));\n   emit_insn (gen_move_hi_quad_<Vdbl> (tempreg, operands[hi]));\n-  emit_insn (gen_aarch64_simd_vec_pack_trunc_<Vdbl> (operands[0], tempreg));\n+  emit_insn (gen_aarch64_xtn<Vdbl> (operands[0], tempreg));\n   DONE;\n })\n \n@@ -1901,20 +1938,25 @@\n \n ;; For quads.\n \n-(define_insn \"vec_pack_trunc_<mode>\"\n- [(set (match_operand:<VNARROWQ2> 0 \"register_operand\" \"=&w\")\n+(define_expand \"vec_pack_trunc_<mode>\"\n+ [(set (match_operand:<VNARROWQ2> 0 \"register_operand\")\n        (vec_concat:<VNARROWQ2>\n-\t (truncate:<VNARROWQ> (match_operand:VQN 1 \"register_operand\" \"w\"))\n-\t (truncate:<VNARROWQ> (match_operand:VQN 2 \"register_operand\" \"w\"))))]\n+\t (truncate:<VNARROWQ> (match_operand:VQN 1 \"register_operand\"))\n+\t (truncate:<VNARROWQ> (match_operand:VQN 2 \"register_operand\"))))]\n  \"TARGET_SIMD\"\n  {\n+   rtx tmpreg = gen_reg_rtx (<VNARROWQ>mode);\n+   int lo = BYTES_BIG_ENDIAN ? 2 : 1;\n+   int hi = BYTES_BIG_ENDIAN ? 1 : 2;\n+\n+   emit_insn (gen_aarch64_xtn<mode> (tmpreg, operands[lo]));\n+\n    if (BYTES_BIG_ENDIAN)\n-     return \"xtn\\\\t%0.<Vntype>, %2.<Vtype>\\;xtn2\\\\t%0.<V2ntype>, %1.<Vtype>\";\n+     emit_insn (gen_aarch64_xtn2<mode>_be (operands[0], tmpreg, operands[hi]));\n    else\n-     return \"xtn\\\\t%0.<Vntype>, %1.<Vtype>\\;xtn2\\\\t%0.<V2ntype>, %2.<Vtype>\";\n+     emit_insn (gen_aarch64_xtn2<mode>_le (operands[0], tmpreg, operands[hi]));\n+   DONE;\n  }\n-  [(set_attr \"type\" \"multiple\")\n-   (set_attr \"length\" \"8\")]\n )\n \n ;; Widening operations.\n@@ -8570,13 +8612,6 @@\n   \"\"\n )\n \n-(define_expand \"aarch64_xtn<mode>\"\n-  [(set (match_operand:<VNARROWQ> 0 \"register_operand\" \"=w\")\n-\t(truncate:<VNARROWQ> (match_operand:VQN 1 \"register_operand\" \"w\")))]\n-  \"TARGET_SIMD\"\n-  \"\"\n-)\n-\n ;; Truncate a 128-bit integer vector to a 64-bit vector.\n (define_insn \"trunc<mode><Vnarrowq>2\"\n   [(set (match_operand:<VNARROWQ> 0 \"register_operand\" \"=w\")\n@@ -8586,42 +8621,6 @@\n   [(set_attr \"type\" \"neon_shift_imm_narrow_q\")]\n )\n \n-(define_insn \"aarch64_xtn2<mode>_le\"\n-  [(set (match_operand:<VNARROWQ2> 0 \"register_operand\" \"=w\")\n-\t(vec_concat:<VNARROWQ2>\n-\t  (match_operand:<VNARROWQ> 1 \"register_operand\" \"0\")\n-\t  (truncate:<VNARROWQ> (match_operand:VQN 2 \"register_operand\" \"w\"))))]\n-  \"TARGET_SIMD && !BYTES_BIG_ENDIAN\"\n-  \"xtn2\\t%0.<V2ntype>, %2.<Vtype>\"\n-  [(set_attr \"type\" \"neon_shift_imm_narrow_q\")]\n-)\n-\n-(define_insn \"aarch64_xtn2<mode>_be\"\n-  [(set (match_operand:<VNARROWQ2> 0 \"register_operand\" \"=w\")\n-\t(vec_concat:<VNARROWQ2>\n-\t  (truncate:<VNARROWQ> (match_operand:VQN 2 \"register_operand\" \"w\"))\n-\t  (match_operand:<VNARROWQ> 1 \"register_operand\" \"0\")))]\n-  \"TARGET_SIMD && BYTES_BIG_ENDIAN\"\n-  \"xtn2\\t%0.<V2ntype>, %2.<Vtype>\"\n-  [(set_attr \"type\" \"neon_shift_imm_narrow_q\")]\n-)\n-\n-(define_expand \"aarch64_xtn2<mode>\"\n-  [(match_operand:<VNARROWQ2> 0 \"register_operand\")\n-   (match_operand:<VNARROWQ> 1 \"register_operand\")\n-   (truncate:<VNARROWQ> (match_operand:VQN 2 \"register_operand\"))]\n-  \"TARGET_SIMD\"\n-  {\n-    if (BYTES_BIG_ENDIAN)\n-      emit_insn (gen_aarch64_xtn2<mode>_be (operands[0], operands[1],\n-\t\t\t\t\t     operands[2]));\n-    else\n-      emit_insn (gen_aarch64_xtn2<mode>_le (operands[0], operands[1],\n-\t\t\t\t\t     operands[2]));\n-    DONE;\n-  }\n-)\n-\n (define_insn \"aarch64_bfdot<mode>\"\n   [(set (match_operand:VDQSF 0 \"register_operand\" \"=w\")\n \t(plus:VDQSF"}]}