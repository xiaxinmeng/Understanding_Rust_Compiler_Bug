{"sha": "2678bf2fb5f35ed07b8df3b03c9d54c2b656a96b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjY3OGJmMmZiNWYzNWVkMDdiOGRmM2IwM2M5ZDU0YzJiNjU2YTk2Yg==", "commit": {"author": {"name": "Will Schmidt", "email": "will_schmidt@vnet.ibm.com", "date": "2017-09-25T14:17:05Z"}, "committer": {"name": "Will Schmidt", "email": "willschm@gcc.gnu.org", "date": "2017-09-25T14:17:05Z"}, "message": "fold-vec-st-char.c: New.\n\n[gcc/testsuite]\n\n2017-09-25  Will Schmidt  <will_schmidt@vnet.ibm.com>\n\n    * gcc.target/powerpc/fold-vec-st-char.c: New.\n    * gcc.target/powerpc/fold-vec-st-double.c: New.\n    * gcc.target/powerpc/fold-vec-st-float.c: New.\n    * gcc.target/powerpc/fold-vec-st-int.c: New.\n    * gcc.target/powerpc/fold-vec-st-longlong.c: New.\n    * gcc.target/powerpc/fold-vec-st-pixel.c: New.\n    * gcc.target/powerpc/fold-vec-st-short.c: New.\n\nFrom-SVN: r253151", "tree": {"sha": "6b1ce49a128bcb518c4b4f3257725deeede37168", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6b1ce49a128bcb518c4b4f3257725deeede37168"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2678bf2fb5f35ed07b8df3b03c9d54c2b656a96b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2678bf2fb5f35ed07b8df3b03c9d54c2b656a96b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2678bf2fb5f35ed07b8df3b03c9d54c2b656a96b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2678bf2fb5f35ed07b8df3b03c9d54c2b656a96b/comments", "author": {"login": "willschm", "id": 44359, "node_id": "MDQ6VXNlcjQ0MzU5", "avatar_url": "https://avatars.githubusercontent.com/u/44359?v=4", "gravatar_id": "", "url": "https://api.github.com/users/willschm", "html_url": "https://github.com/willschm", "followers_url": "https://api.github.com/users/willschm/followers", "following_url": "https://api.github.com/users/willschm/following{/other_user}", "gists_url": "https://api.github.com/users/willschm/gists{/gist_id}", "starred_url": "https://api.github.com/users/willschm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/willschm/subscriptions", "organizations_url": "https://api.github.com/users/willschm/orgs", "repos_url": "https://api.github.com/users/willschm/repos", "events_url": "https://api.github.com/users/willschm/events{/privacy}", "received_events_url": "https://api.github.com/users/willschm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "f39b92e2c485be81ec154d2986495305d5926688", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f39b92e2c485be81ec154d2986495305d5926688", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f39b92e2c485be81ec154d2986495305d5926688"}], "stats": {"total": 390, "additions": 390, "deletions": 0}, "files": [{"sha": "ff6e5df441c219d9e686ec9d4ec9232292fb3068", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2678bf2fb5f35ed07b8df3b03c9d54c2b656a96b/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2678bf2fb5f35ed07b8df3b03c9d54c2b656a96b/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=2678bf2fb5f35ed07b8df3b03c9d54c2b656a96b", "patch": "@@ -1,3 +1,13 @@\n+2017-09-25  Will Schmidt  <will_schmidt@vnet.ibm.com>\n+\n+\t* gcc.target/powerpc/fold-vec-st-char.c: New.\n+\t* gcc.target/powerpc/fold-vec-st-double.c: New.\n+\t* gcc.target/powerpc/fold-vec-st-float.c: New.\n+\t* gcc.target/powerpc/fold-vec-st-int.c: New.\n+\t* gcc.target/powerpc/fold-vec-st-longlong.c: New.\n+\t* gcc.target/powerpc/fold-vec-st-pixel.c: New.\n+\t* gcc.target/powerpc/fold-vec-st-short.c: New.\n+\n 2017-09-25  Pierre-Marie de Rodat  <derodat@adacore.com>\n \n \t* g++.dg/pr82155.C: New testcase."}, {"sha": "4c4582780c22ec2b3efae2bef539de18ede27e78", "filename": "gcc/testsuite/gcc.target/powerpc/fold-vec-st-char.c", "status": "added", "additions": 94, "deletions": 0, "changes": 94, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2678bf2fb5f35ed07b8df3b03c9d54c2b656a96b/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ffold-vec-st-char.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2678bf2fb5f35ed07b8df3b03c9d54c2b656a96b/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ffold-vec-st-char.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ffold-vec-st-char.c?ref=2678bf2fb5f35ed07b8df3b03c9d54c2b656a96b", "patch": "@@ -0,0 +1,94 @@\n+/* Verify that overloaded built-ins for vec_st* with char\n+   inputs produce the right code.  */\n+\n+/* { dg-do compile } */\n+/* { dg-require-effective-target powerpc_altivec_ok } */\n+/* { dg-options \"-maltivec -O2\" } */\n+\n+#include <altivec.h>\n+\n+void\n+testst_1 (vector signed char vsc1, int i1, vector signed char * vscp)\n+{\n+\treturn vec_st(vsc1, i1, vscp);\n+}\n+\n+void\n+testst_2 (vector signed char vsc1, int i1, signed char * scp)\n+{\n+\treturn vec_st(vsc1, i1, scp);\n+}\n+\n+void\n+testst_3 (vector unsigned char vuc1, int i1, vector unsigned char * vscp)\n+{\n+\treturn vec_st(vuc1, i1, vscp);\n+}\n+\n+void\n+testst_4 (vector unsigned char vuc1, int i1, unsigned char * scp)\n+{\n+\treturn vec_st(vuc1, i1, scp);\n+}\n+\n+void\n+testst_5 (vector bool char vbc1, int i1, vector bool char * vbcp)\n+{\n+\treturn vec_st(vbc1, i1, vbcp);\n+}\n+\n+void\n+testst_6 (vector bool char vbc1, int i1, unsigned char * vucp)\n+{\n+\treturn vec_st(vbc1, i1, vucp);\n+}\n+\n+void\n+testst_7 (vector bool char vbc1, int i1, signed char * vscp)\n+{\n+\treturn vec_st(vbc1, i1, vscp);\n+}\n+\n+void\n+testst_cst1 (vector signed char vsc1, int i1, vector signed char * vscp)\n+{\n+\treturn vec_st(vsc1, 12, vscp);\n+}\n+\n+void\n+testst_cst2 (vector signed char vsc1, int i1, signed char * scp)\n+{\n+\treturn vec_st(vsc1, 16, scp);\n+}\n+\n+void\n+testst_cst3 (vector unsigned char vuc1, int i1, vector unsigned char * vscp)\n+{\n+\treturn vec_st(vuc1, 20, vscp);\n+}\n+\n+void\n+testst_cst4 (vector unsigned char vuc1, int i1, unsigned char * scp)\n+{\n+\treturn vec_st(vuc1, 24, scp);\n+}\n+\n+void\n+testst_cst5 (vector bool char vbc1, int i1, vector bool char * vbcp)\n+{\n+\treturn vec_st(vbc1, 28, vbcp);\n+}\n+\n+void\n+testst_cst6 (vector bool char vbc1, int i1, unsigned char * vucp)\n+{\n+\treturn vec_st(vbc1, 32, vucp);\n+}\n+\n+void\n+testst_cst7 (vector bool char vbc1, int i1, signed char * vscp)\n+{\n+\treturn vec_st(vbc1, 36, vscp);\n+}\n+\n+/* { dg-final { scan-assembler-times {\\mstvx\\M} 14 } } */"}, {"sha": "100caf486c7c0fdda716f7320bc86a0c5e8edbca", "filename": "gcc/testsuite/gcc.target/powerpc/fold-vec-st-double.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2678bf2fb5f35ed07b8df3b03c9d54c2b656a96b/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ffold-vec-st-double.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2678bf2fb5f35ed07b8df3b03c9d54c2b656a96b/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ffold-vec-st-double.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ffold-vec-st-double.c?ref=2678bf2fb5f35ed07b8df3b03c9d54c2b656a96b", "patch": "@@ -0,0 +1,22 @@\n+/* Verify that overloaded built-ins for vec_st with \n+   double inputs produce the right code.  */\n+\n+/* { dg-do compile } */\n+/* { dg-require-effective-target powerpc_vsx_ok } */\n+/* { dg-options \"-mvsx -O2\" } */\n+\n+#include <altivec.h>\n+\n+void\n+testst_1 (vector double vd1, int i1, vector double * vdp)\n+{\n+\treturn vec_st(vd1, i1, vdp);\n+}\n+\n+void\n+testst_cst1 (vector double vd1, int i1, vector double * vdp)\n+{\n+\treturn vec_st(vd1, 12, vdp);\n+}\n+\n+/* { dg-final { scan-assembler-times {\\mstvx\\M}  2 } } */"}, {"sha": "5a8fc6670a6953af40ffe76f5d704bfd7cd799dc", "filename": "gcc/testsuite/gcc.target/powerpc/fold-vec-st-float.c", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2678bf2fb5f35ed07b8df3b03c9d54c2b656a96b/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ffold-vec-st-float.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2678bf2fb5f35ed07b8df3b03c9d54c2b656a96b/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ffold-vec-st-float.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ffold-vec-st-float.c?ref=2678bf2fb5f35ed07b8df3b03c9d54c2b656a96b", "patch": "@@ -0,0 +1,34 @@\n+/* Verify that overloaded built-ins for vec_st with float\n+   inputs produce the right code.  */\n+\n+/* { dg-do compile } */\n+/* { dg-require-effective-target powerpc_altivec_ok } */\n+/* { dg-options \"-maltivec -O2\" } */\n+\n+#include <altivec.h>\n+\n+void\n+testst_1 (vector float vf1, int i1, vector float * vfp)\n+{\n+\treturn vec_st(vf1, i1, vfp);\n+}\n+\n+void\n+testst_2 (vector float vf1, int i1, float * fp)\n+{\n+\treturn vec_st(vf1, i1, fp);\n+}\n+\n+void\n+testst_cst1 (vector float vf1, int i1, vector float * vfp)\n+{\n+\treturn vec_st(vf1, 16, vfp);\n+}\n+\n+void\n+testst_cst2 (vector float vf1, int i1, float * fp)\n+{\n+\treturn vec_st(vf1, 24, fp);\n+}\n+\n+/* { dg-final { scan-assembler-times {\\mstvx\\M}  4 } } */"}, {"sha": "4db35f0dd945c2686c4ab3d603499e5aa5bfde50", "filename": "gcc/testsuite/gcc.target/powerpc/fold-vec-st-int.c", "status": "added", "additions": 84, "deletions": 0, "changes": 84, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2678bf2fb5f35ed07b8df3b03c9d54c2b656a96b/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ffold-vec-st-int.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2678bf2fb5f35ed07b8df3b03c9d54c2b656a96b/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ffold-vec-st-int.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ffold-vec-st-int.c?ref=2678bf2fb5f35ed07b8df3b03c9d54c2b656a96b", "patch": "@@ -0,0 +1,84 @@\n+/* Verify that overloaded built-ins for vec_st* with int\n+   inputs produce the right code.  */\n+\n+/* { dg-do compile } */\n+/* { dg-require-effective-target powerpc_altivec_ok } */\n+/* { dg-options \"-maltivec -O2\" } */\n+\n+#include <altivec.h>\n+// void vec_st (vector signed int, int, vector signed int *);\n+\n+void\n+testst_1 (vector signed int vsi1, int i1, vector signed int * vsip)\n+{\n+\treturn vec_st(vsi1, i1, vsip);\n+}\n+void\n+testst_2 (vector signed int vsi1, int i1, signed int * sip)\n+{\n+\treturn vec_st(vsi1, i1, sip);\n+}\n+void\n+testst_3 (vector unsigned int vui1, int i1, vector unsigned int * vsip)\n+{\n+\treturn vec_st(vui1, i1, vsip);\n+}\n+void\n+testst_4 (vector unsigned int vui1, int i1, unsigned int * sip)\n+{\n+\treturn vec_st(vui1, i1, sip);\n+}\n+void\n+testst_5 (vector bool int vbi1, int i1, vector bool int * vbip)\n+{\n+\treturn vec_st(vbi1, i1, vbip);\n+}\n+void\n+testst_6 (vector bool int vbi1, int i1, unsigned int * vuip)\n+{\n+\treturn vec_st(vbi1, i1, vuip);\n+}\n+void\n+testst_7 (vector bool int vbi1, int i1, signed int * vsip)\n+{\n+\treturn vec_st(vbi1, i1, vsip);\n+}\n+\n+void\n+testst_cst1 (vector signed int vsi1, int i1, vector signed int * vsip)\n+{\n+\treturn vec_st(vsi1, 12, vsip);\n+}\n+void\n+testst_cst2 (vector signed int vsi1, int i1, signed int * sip)\n+{\n+\treturn vec_st(vsi1, 16, sip);\n+}\n+void\n+testst_cst3 (vector unsigned int vui1, int i1, vector unsigned int * vsip)\n+{\n+\treturn vec_st(vui1, 20, vsip);\n+}\n+void\n+testst_cst4 (vector unsigned int vui1, int i1, unsigned int * sip)\n+{\n+\treturn vec_st(vui1, 24, sip);\n+}\n+void\n+testst_cst5 (vector bool int vbi1, int i1, vector bool int * vbip)\n+{\n+\treturn vec_st(vbi1, 28, vbip);\n+}\n+void\n+testst_cst6 (vector bool int vbi1, int i1, unsigned int * vuip)\n+{\n+\treturn vec_st(vbi1, 32, vuip);\n+}\n+void\n+testst_cst7 (vector bool int vbi1, int i1, signed int * vsip)\n+{\n+\treturn vec_st(vbi1, 36, vsip);\n+}\n+\n+/* { dg-final { scan-assembler-times {\\mstvx\\M}  14 } } */\n+"}, {"sha": "a33f64e37270f752d5c34d710f1def7a01903bb0", "filename": "gcc/testsuite/gcc.target/powerpc/fold-vec-st-longlong.c", "status": "added", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2678bf2fb5f35ed07b8df3b03c9d54c2b656a96b/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ffold-vec-st-longlong.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2678bf2fb5f35ed07b8df3b03c9d54c2b656a96b/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ffold-vec-st-longlong.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ffold-vec-st-longlong.c?ref=2678bf2fb5f35ed07b8df3b03c9d54c2b656a96b", "patch": "@@ -0,0 +1,41 @@\n+/* Verify that overloaded built-ins for vec_st* with long long\n+   inputs produce the right code.  */\n+\n+/* { dg-do compile { target lp64 } } */\n+/* { dg-require-effective-target powerpc_p8vector_ok } */\n+/* { dg-options \"-mpower8-vector -O2\" } */\n+\n+#include <altivec.h>\n+\n+void\n+testst_1 (vector signed long long vsll1, int i1, vector signed long long * vsllp)\n+{\n+\treturn vec_st(vsll1, i1, vsllp);\n+}\n+void\n+testst_3 (vector unsigned long long vull1, int i1, vector unsigned long long * vsllp)\n+{\n+\treturn vec_st(vull1, i1, vsllp);\n+}\n+void\n+testst_5 (vector bool long long vbll1, int i1, vector bool long long * vbllp)\n+{\n+\treturn vec_st(vbll1, i1, vbllp);\n+}\n+void\n+testst_cst1 (vector signed long long vsll1, int i1, vector signed long long * vsllp)\n+{\n+\treturn vec_st(vsll1, 12, vsllp);\n+}\n+void\n+testst_cst3 (vector unsigned long long vull1, int i1, vector unsigned long long * vsllp)\n+{\n+\treturn vec_st(vull1, 24, vsllp);\n+}\n+void\n+testst_cst5 (vector bool long long vbll1, int i1, vector bool long long * vbllp)\n+{\n+\treturn vec_st(vbll1, 36, vbllp);\n+}\n+\n+/* { dg-final { scan-assembler-times {\\mstvx\\M}  6 } } */"}, {"sha": "5b95cc73d8dd2a6c019ff6d0c97787e7a49dac71", "filename": "gcc/testsuite/gcc.target/powerpc/fold-vec-st-pixel.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2678bf2fb5f35ed07b8df3b03c9d54c2b656a96b/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ffold-vec-st-pixel.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2678bf2fb5f35ed07b8df3b03c9d54c2b656a96b/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ffold-vec-st-pixel.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ffold-vec-st-pixel.c?ref=2678bf2fb5f35ed07b8df3b03c9d54c2b656a96b", "patch": "@@ -0,0 +1,22 @@\n+/* Verify that overloaded built-ins for vec_st* with pixel\n+   inputs produce the right code.  */\n+\n+/* { dg-do compile } */\n+/* { dg-require-effective-target powerpc_vsx_ok } */\n+/* { dg-options \"-mvsx -O2\" } */\n+\n+#include <altivec.h>\n+\n+void\n+testst_1 (vector pixel vp1, int i1, vector pixel * vpp)\n+{\n+\treturn vec_st(vp1, i1, vpp);\n+}\n+\n+void\n+testst_cst1 (vector pixel vp1, int i1, vector pixel * vpp)\n+{\n+\treturn vec_st(vp1, 12, vpp);\n+}\n+\n+/* { dg-final { scan-assembler-times {\\mstvx\\M}  2 } } */"}, {"sha": "ba8397eef263d5a6ded67bc662fde787cb452676", "filename": "gcc/testsuite/gcc.target/powerpc/fold-vec-st-short.c", "status": "added", "additions": 83, "deletions": 0, "changes": 83, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2678bf2fb5f35ed07b8df3b03c9d54c2b656a96b/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ffold-vec-st-short.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2678bf2fb5f35ed07b8df3b03c9d54c2b656a96b/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ffold-vec-st-short.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ffold-vec-st-short.c?ref=2678bf2fb5f35ed07b8df3b03c9d54c2b656a96b", "patch": "@@ -0,0 +1,83 @@\n+/* Verify that overloaded built-ins for vec_st* with short\n+   inputs produce the right code.  */\n+\n+/* { dg-do compile } */\n+/* { dg-require-effective-target powerpc_altivec_ok } */\n+/* { dg-options \"-maltivec -O2\" } */\n+\n+#include <altivec.h>\n+// vector signed short vec_ld (int, const vector signed short *);\n+// void vec_st (vector signed short, int, vector signed short *);\n+\n+void\n+testst_1 (vector signed short vss1, int i1, vector signed short * vssp)\n+{\n+\treturn vec_st(vss1, i1, vssp);\n+}\n+void\n+testst_2 (vector signed short vss1, int i1, signed short * ssp)\n+{\n+\treturn vec_st(vss1, i1, ssp);\n+}\n+void\n+testst_3 (vector unsigned short vus1, int i1, vector unsigned short * vusp)\n+{\n+\treturn vec_st(vus1, i1, vusp);\n+}\n+void\n+testst_4 (vector unsigned short vus1, int i1, unsigned short * usp)\n+{\n+\treturn vec_st(vus1, i1, usp);\n+}\n+void\n+testst_5 (vector bool short vbs1, int i1, vector bool short * vbsp)\n+{\n+\treturn vec_st(vbs1, i1, vbsp);\n+}\n+void\n+testst_6 (vector bool short vbs1, int i1, unsigned short * vusp)\n+{\n+\treturn vec_st(vbs1, i1, vusp);\n+}\n+void\n+testst_7 (vector bool short vbs1, int i1, signed short * vssp)\n+{\n+\treturn vec_st(vbs1, i1, vssp);\n+}\n+void\n+testst_cst1 (vector signed short vss1, int i1, vector signed short * vssp)\n+{\n+\treturn vec_st(vss1, 12, vssp);\n+}\n+void\n+testst_cst2 (vector signed short vss1, int i1, signed short * ssp)\n+{\n+\treturn vec_st(vss1, 16, ssp);\n+}\n+void\n+testst_cst3 (vector unsigned short vus1, int i1, vector unsigned short * vusp)\n+{\n+\treturn vec_st(vus1, 20, vusp);\n+}\n+void\n+testst_cst4 (vector unsigned short vus1, int i1, unsigned short * usp)\n+{\n+\treturn vec_st(vus1, 24, usp);\n+}\n+void\n+testst_cst5 (vector bool short vbs1, int i1, vector bool short * vbsp)\n+{\n+\treturn vec_st(vbs1, 28, vbsp);\n+}\n+void\n+testst_cst6 (vector bool short vbs1, int i1, unsigned short * vusp)\n+{\n+\treturn vec_st(vbs1, 32, vusp);\n+}\n+void\n+testst_cst7 (vector bool short vbs1, int i1, signed short * vssp)\n+{\n+\treturn vec_st(vbs1, 36, vssp);\n+}\n+\n+/* { dg-final { scan-assembler-times {\\mstvx\\M} 14} } */"}]}