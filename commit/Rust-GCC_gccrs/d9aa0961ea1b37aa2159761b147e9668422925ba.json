{"sha": "d9aa0961ea1b37aa2159761b147e9668422925ba", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDlhYTA5NjFlYTFiMzdhYTIxNTk3NjFiMTQ3ZTk2Njg0MjI5MjViYQ==", "commit": {"author": {"name": "Tom de Vries", "email": "tdevries@suse.de", "date": "2018-12-28T03:43:41Z"}, "committer": {"name": "Tom de Vries", "email": "vries@gcc.gnu.org", "date": "2018-12-28T03:43:41Z"}, "message": "[libbacktrace] Simplify memory management in build_address_map\n\nIn the main loop in build_address_map, we first read the abbrevs into a local\nvariable abbrevs, and then allocate the corresponding unit, after which we assign\nthe abbrevs to the unit.  This results in dedicated free-upon-failure\nhandling for the variable, and extra code to make sure that free-upon-failure\ndoesn't trigger once the unit has taken ownership of the abbrevs.\n\nSimplify this by reversing the order of abbrev reading and unit allocation,\nand eliminating the abbrevs local variable.\n\nBootstrapped and reg-tested on x86_64.\n\n2018-12-28  Tom de Vries  <tdevries@suse.de>\n\n\t* dwarf.c (build_address_map): Simplify by removing local variable\n\tabbrevs.\n\nFrom-SVN: r267444", "tree": {"sha": "d8f22fb7f9f03de37f2adc91fb45badba377d6b3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d8f22fb7f9f03de37f2adc91fb45badba377d6b3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d9aa0961ea1b37aa2159761b147e9668422925ba", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d9aa0961ea1b37aa2159761b147e9668422925ba", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d9aa0961ea1b37aa2159761b147e9668422925ba", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d9aa0961ea1b37aa2159761b147e9668422925ba/comments", "author": {"login": "vries", "id": 4057235, "node_id": "MDQ6VXNlcjQwNTcyMzU=", "avatar_url": "https://avatars.githubusercontent.com/u/4057235?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vries", "html_url": "https://github.com/vries", "followers_url": "https://api.github.com/users/vries/followers", "following_url": "https://api.github.com/users/vries/following{/other_user}", "gists_url": "https://api.github.com/users/vries/gists{/gist_id}", "starred_url": "https://api.github.com/users/vries/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vries/subscriptions", "organizations_url": "https://api.github.com/users/vries/orgs", "repos_url": "https://api.github.com/users/vries/repos", "events_url": "https://api.github.com/users/vries/events{/privacy}", "received_events_url": "https://api.github.com/users/vries/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "40b8d3b2536246b7449b6c7ce7a972537e5f11e1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/40b8d3b2536246b7449b6c7ce7a972537e5f11e1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/40b8d3b2536246b7449b6c7ce7a972537e5f11e1"}], "stats": {"total": 25, "additions": 13, "deletions": 12}, "files": [{"sha": "ee31ef0dd5e5f8f6b9542d822e6bd55f0c985b40", "filename": "libbacktrace/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d9aa0961ea1b37aa2159761b147e9668422925ba/libbacktrace%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d9aa0961ea1b37aa2159761b147e9668422925ba/libbacktrace%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libbacktrace%2FChangeLog?ref=d9aa0961ea1b37aa2159761b147e9668422925ba", "patch": "@@ -1,3 +1,8 @@\n+2018-12-28  Tom de Vries  <tdevries@suse.de>\n+\n+\t* dwarf.c (build_address_map): Simplify by removing local variable\n+\tabbrevs.\n+\n 2018-12-28  Ian Lance Taylor  <iant@golang.org>\n \t    Tom de Vries  <tdevries@suse.de>\n "}, {"sha": "7ef99bdd7f2a6ef5007ad61f351289445e47abf0", "filename": "libbacktrace/dwarf.c", "status": "modified", "additions": 8, "deletions": 12, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d9aa0961ea1b37aa2159761b147e9668422925ba/libbacktrace%2Fdwarf.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d9aa0961ea1b37aa2159761b147e9668422925ba/libbacktrace%2Fdwarf.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libbacktrace%2Fdwarf.c?ref=d9aa0961ea1b37aa2159761b147e9668422925ba", "patch": "@@ -1432,7 +1432,6 @@ build_address_map (struct backtrace_state *state, uintptr_t base_address,\n \t\t   void *data, struct unit_addrs_vector *addrs)\n {\n   struct dwarf_buf info;\n-  struct abbrevs abbrevs;\n   struct backtrace_vector units;\n   size_t units_count;\n   size_t i;\n@@ -1457,7 +1456,6 @@ build_address_map (struct backtrace_state *state, uintptr_t base_address,\n   memset (&units, 0, sizeof units);\n   units_count = 0;\n \n-  memset (&abbrevs, 0, sizeof abbrevs);\n   while (info.left > 0)\n     {\n       const unsigned char *unit_data_start;\n@@ -1488,13 +1486,6 @@ build_address_map (struct backtrace_state *state, uintptr_t base_address,\n \t  goto fail;\n \t}\n \n-      abbrev_offset = read_offset (&unit_buf, is_dwarf64);\n-      if (!read_abbrevs (state, abbrev_offset, dwarf_abbrev, dwarf_abbrev_size,\n-\t\t\t is_bigendian, error_callback, data, &abbrevs))\n-\tgoto fail;\n-\n-      addrsize = read_byte (&unit_buf);\n-\n       pu = ((struct unit **)\n \t    backtrace_vector_grow (state, sizeof (struct unit *),\n \t\t\t\t   error_callback, data, &units));\n@@ -1509,6 +1500,14 @@ build_address_map (struct backtrace_state *state, uintptr_t base_address,\n       *pu = u;\n       ++units_count;\n \n+      memset (&u->abbrevs, 0, sizeof u->abbrevs);\n+      abbrev_offset = read_offset (&unit_buf, is_dwarf64);\n+      if (!read_abbrevs (state, abbrev_offset, dwarf_abbrev, dwarf_abbrev_size,\n+\t\t\t is_bigendian, error_callback, data, &u->abbrevs))\n+\tgoto fail;\n+\n+      addrsize = read_byte (&unit_buf);\n+\n       u->unit_data = unit_buf.buf;\n       u->unit_data_len = unit_buf.left;\n       u->unit_data_offset = unit_buf.buf - unit_data_start;\n@@ -1519,8 +1518,6 @@ build_address_map (struct backtrace_state *state, uintptr_t base_address,\n       u->comp_dir = NULL;\n       u->abs_filename = NULL;\n       u->lineoff = 0;\n-      u->abbrevs = abbrevs;\n-      memset (&abbrevs, 0, sizeof abbrevs);\n \n       /* The actual line number mappings will be read as needed.  */\n       u->lines = NULL;\n@@ -1559,7 +1556,6 @@ build_address_map (struct backtrace_state *state, uintptr_t base_address,\n \t}\n       backtrace_vector_free (state, &units, error_callback, data);\n     }\n-  free_abbrevs (state, &abbrevs, error_callback, data);\n   if (addrs->count > 0)\n     {\n       backtrace_vector_free (state, &addrs->vec, error_callback, data);"}]}