{"sha": "0c3068e0068c5850939c83c6719e8905db0342b1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGMzMDY4ZTAwNjhjNTg1MDkzOWM4M2M2NzE5ZTg5MDVkYjAzNDJiMQ==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2015-01-22T09:25:22Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2015-01-22T09:25:22Z"}, "message": "ipa-inline.c (can_inline_edge_p): Disable inlining of edges with IL incompatible options.\n\n2015-01-22  Richard Biener  <rguenther@suse.de>\n\n\t* ipa-inline.c (can_inline_edge_p): Disable inlining of edges\n\twith IL incompatible options.  Properly honor user optimize\n\tattributes.\n\nFrom-SVN: r219989", "tree": {"sha": "aee50b2d3af85d215c9b2c8b549d88150943d16f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/aee50b2d3af85d215c9b2c8b549d88150943d16f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0c3068e0068c5850939c83c6719e8905db0342b1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0c3068e0068c5850939c83c6719e8905db0342b1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0c3068e0068c5850939c83c6719e8905db0342b1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0c3068e0068c5850939c83c6719e8905db0342b1/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "cce93c76bac0718cd084410797c38734b5649156", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cce93c76bac0718cd084410797c38734b5649156", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cce93c76bac0718cd084410797c38734b5649156"}], "stats": {"total": 65, "additions": 55, "deletions": 10}, "files": [{"sha": "520b03de580d96f53d7a3534688dd43f1cf11051", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0c3068e0068c5850939c83c6719e8905db0342b1/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0c3068e0068c5850939c83c6719e8905db0342b1/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=0c3068e0068c5850939c83c6719e8905db0342b1", "patch": "@@ -1,3 +1,9 @@\n+2015-01-22  Richard Biener  <rguenther@suse.de>\n+\n+\t* ipa-inline.c (can_inline_edge_p): Disable inlining of edges\n+\twith IL incompatible options.  Properly honor user optimize\n+\tattributes.\n+\n 2015-01-21  Segher Boessenkool  <segher@kernel.crashing.org>\n \n \tPR rtl-optimization/64682"}, {"sha": "da1afc690472f7c19f3938a5f1e5d5908c095c61", "filename": "gcc/ipa-inline.c", "status": "modified", "additions": 49, "deletions": 10, "changes": 59, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0c3068e0068c5850939c83c6719e8905db0342b1/gcc%2Fipa-inline.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0c3068e0068c5850939c83c6719e8905db0342b1/gcc%2Fipa-inline.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-inline.c?ref=0c3068e0068c5850939c83c6719e8905db0342b1", "patch": "@@ -404,17 +404,56 @@ can_inline_edge_p (struct cgraph_edge *e, bool report,\n      optimization attribute.  */\n   else if (caller_tree != callee_tree)\n     {\n-      /* gcc.dg/pr43564.c.  Look at forced inline even in -O0.  */\n-      if (DECL_DISREGARD_INLINE_LIMITS (callee->decl))\n+      /* There are some options that change IL semantics which means\n+         we cannot inline in these cases for correctness reason.\n+\t Not even for always_inline declared functions.  */\n+      /* Strictly speaking only when the callee contains signed integer\n+         math where overflow is undefined.  */\n+      if ((opt_for_fn (e->caller->decl, flag_strict_overflow)\n+\t   != opt_for_fn (e->caller->decl, flag_strict_overflow))\n+\t  || (opt_for_fn (e->caller->decl, flag_wrapv)\n+\t      != opt_for_fn (e->caller->decl, flag_wrapv))\n+\t  || (opt_for_fn (e->caller->decl, flag_trapv)\n+\t      != opt_for_fn (e->caller->decl, flag_trapv))\n+\t  /* Strictly speaking only when the callee contains memory\n+\t     accesses that are not using alias-set zero anyway.  */\n+\t  || (opt_for_fn (e->caller->decl, flag_strict_aliasing)\n+\t      != opt_for_fn (e->caller->decl, flag_strict_aliasing))\n+\t  /* Strictly speaking only when the callee uses FP math.  */\n+\t  || (opt_for_fn (e->caller->decl, flag_rounding_math)\n+\t      != opt_for_fn (e->caller->decl, flag_rounding_math))\n+\t  || (opt_for_fn (e->caller->decl, flag_trapping_math)\n+\t      != opt_for_fn (e->caller->decl, flag_trapping_math))\n+\t  || (opt_for_fn (e->caller->decl, flag_unsafe_math_optimizations)\n+\t      != opt_for_fn (e->caller->decl, flag_unsafe_math_optimizations))\n+\t  || (opt_for_fn (e->caller->decl, flag_finite_math_only)\n+\t      != opt_for_fn (e->caller->decl, flag_finite_math_only))\n+\t  || (opt_for_fn (e->caller->decl, flag_signaling_nans)\n+\t      != opt_for_fn (e->caller->decl, flag_signaling_nans))\n+\t  || (opt_for_fn (e->caller->decl, flag_cx_limited_range)\n+\t      != opt_for_fn (e->caller->decl, flag_cx_limited_range))\n+\t  || (opt_for_fn (e->caller->decl, flag_signed_zeros)\n+\t      != opt_for_fn (e->caller->decl, flag_signed_zeros))\n+\t  || (opt_for_fn (e->caller->decl, flag_associative_math)\n+\t      != opt_for_fn (e->caller->decl, flag_associative_math))\n+\t  || (opt_for_fn (e->caller->decl, flag_reciprocal_math)\n+\t      != opt_for_fn (e->caller->decl, flag_reciprocal_math))\n+\t  /* Strictly speaking only when the callee contains function\n+\t     calls that may end up setting errno.  */\n+\t  || (opt_for_fn (e->caller->decl, flag_errno_math)\n+\t      != opt_for_fn (e->caller->decl, flag_errno_math)))\n+\t{\n+\t  e->inline_failed = CIF_OPTIMIZATION_MISMATCH;\n+\t  inlinable = false;\n+\t}\n+      /* gcc.dg/pr43564.c.  Apply user-forced inline even at -O0.  */\n+      else if (DECL_DISREGARD_INLINE_LIMITS (callee->decl)\n+\t       && lookup_attribute (\"always_inline\",\n+\t\t\t\t    DECL_ATTRIBUTES (callee->decl)))\n \t;\n-      /* When user added an attribute, honnor it.  */\n-      else if ((lookup_attribute (\"optimize\", DECL_ATTRIBUTES (caller->decl))\n-\t\t|| lookup_attribute (\"optimize\",\n-\t\t\t\t     DECL_ATTRIBUTES (callee->decl)))\n-\t       && ((opt_for_fn (caller->decl, optimize)\n-\t\t   > opt_for_fn (callee->decl, optimize))\n-\t\t   || (opt_for_fn (caller->decl, optimize_size)\n-\t\t       != opt_for_fn (callee->decl, optimize_size))))\n+      /* When user added an attribute to the callee honor it.  */\n+      else if (lookup_attribute (\"optimize\", DECL_ATTRIBUTES (callee->decl))\n+\t       && opts_for_fn (caller->decl) != opts_for_fn (callee->decl))\n \t{\n \t  e->inline_failed = CIF_OPTIMIZATION_MISMATCH;\n \t  inlinable = false;"}]}