{"sha": "e4f0f84d56bccc7ffcbf2ba7def8bcc7cb921b6b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTRmMGY4NGQ1NmJjY2M3ZmZjYmYyYmE3ZGVmOGJjYzdjYjkyMWI2Yg==", "commit": {"author": {"name": "Tejas Belagod", "email": "tejas.belagod@arm.com", "date": "2013-07-12T12:50:23Z"}, "committer": {"name": "Tejas Belagod", "email": "belagod@gcc.gnu.org", "date": "2013-07-12T12:50:23Z"}, "message": "2013-07-12  Tejas Belagod  <tejas.belagod@arm.com>\n\ngcc/\n\t* config/aarch64/aarch64-protos.h\n\t(aarch64_simd_immediate_valid_for_move): Remove.\n\t* config/aarch64/aarch64.c (simd_immediate_info): New member.\n\t(aarch64_simd_valid_immediate): Recognize idioms for shifting ones\n\tcases.\n\t(aarch64_output_simd_mov_immediate): Print the correct shift specifier.\n\ntestsuite/\n\n\t* gcc.target/aarch64/vect-movi.c: New.\n\nFrom-SVN: r200922", "tree": {"sha": "ff20b173f361cd44a121b3f749dea4ffff591d4f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ff20b173f361cd44a121b3f749dea4ffff591d4f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e4f0f84d56bccc7ffcbf2ba7def8bcc7cb921b6b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e4f0f84d56bccc7ffcbf2ba7def8bcc7cb921b6b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e4f0f84d56bccc7ffcbf2ba7def8bcc7cb921b6b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e4f0f84d56bccc7ffcbf2ba7def8bcc7cb921b6b/comments", "author": {"login": "tejas-belagod-arm", "id": 92718852, "node_id": "U_kgDOBYbHBA", "avatar_url": "https://avatars.githubusercontent.com/u/92718852?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tejas-belagod-arm", "html_url": "https://github.com/tejas-belagod-arm", "followers_url": "https://api.github.com/users/tejas-belagod-arm/followers", "following_url": "https://api.github.com/users/tejas-belagod-arm/following{/other_user}", "gists_url": "https://api.github.com/users/tejas-belagod-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/tejas-belagod-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tejas-belagod-arm/subscriptions", "organizations_url": "https://api.github.com/users/tejas-belagod-arm/orgs", "repos_url": "https://api.github.com/users/tejas-belagod-arm/repos", "events_url": "https://api.github.com/users/tejas-belagod-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/tejas-belagod-arm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "dd4afcc2f0b8edde8373be1eed2215bdd39b6d4e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dd4afcc2f0b8edde8373be1eed2215bdd39b6d4e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/dd4afcc2f0b8edde8373be1eed2215bdd39b6d4e"}], "stats": {"total": 117, "additions": 101, "deletions": 16}, "files": [{"sha": "bf75708f585f30fddbd59fd98e8a61b691fbaba4", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e4f0f84d56bccc7ffcbf2ba7def8bcc7cb921b6b/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e4f0f84d56bccc7ffcbf2ba7def8bcc7cb921b6b/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=e4f0f84d56bccc7ffcbf2ba7def8bcc7cb921b6b", "patch": "@@ -1,3 +1,12 @@\n+2013-07-12  Tejas Belagod  <tejas.belagod@arm.com>\n+\n+\t* config/aarch64/aarch64-protos.h\n+\t(aarch64_simd_immediate_valid_for_move): Remove.\n+\t* config/aarch64/aarch64.c (simd_immediate_info): New member.\n+\t(aarch64_simd_valid_immediate): Recognize idioms for shifting ones\n+\tcases.\n+\t(aarch64_output_simd_mov_immediate): Print the correct shift specifier.\n+\n 2013-07-11  Steve Ellcey  <sellcey@mips.com>\n \n \t* config/mips/mips.c (mips_conditional_register_usage): Do not"}, {"sha": "e749cc136ddbe380cfd5c2f59e146cb75ede9c3e", "filename": "gcc/config/aarch64/aarch64-protos.h", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e4f0f84d56bccc7ffcbf2ba7def8bcc7cb921b6b/gcc%2Fconfig%2Faarch64%2Faarch64-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e4f0f84d56bccc7ffcbf2ba7def8bcc7cb921b6b/gcc%2Fconfig%2Faarch64%2Faarch64-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-protos.h?ref=e4f0f84d56bccc7ffcbf2ba7def8bcc7cb921b6b", "patch": "@@ -204,9 +204,6 @@ int aarch64_asm_preferred_eh_data_format (int, int);\n int aarch64_hard_regno_mode_ok (unsigned, enum machine_mode);\n int aarch64_hard_regno_nregs (unsigned, enum machine_mode);\n int aarch64_simd_attr_length_move (rtx);\n-int aarch64_simd_immediate_valid_for_move (rtx, enum machine_mode, rtx *,\n-\t\t\t\t\t   int *, unsigned char *, int *,\n-\t\t\t\t\t   int *);\n int aarch64_uxt_size (int, HOST_WIDE_INT);\n rtx aarch64_final_eh_return_addr (void);\n rtx aarch64_legitimize_reload_address (rtx *, enum machine_mode, int, int, int);"}, {"sha": "025975c34984b3d758acc681f48309c4defe2a9e", "filename": "gcc/config/aarch64/aarch64.c", "status": "modified", "additions": 14, "deletions": 13, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e4f0f84d56bccc7ffcbf2ba7def8bcc7cb921b6b/gcc%2Fconfig%2Faarch64%2Faarch64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e4f0f84d56bccc7ffcbf2ba7def8bcc7cb921b6b/gcc%2Fconfig%2Faarch64%2Faarch64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64.c?ref=e4f0f84d56bccc7ffcbf2ba7def8bcc7cb921b6b", "patch": "@@ -95,6 +95,7 @@ struct simd_immediate_info\n   int shift;\n   int element_width;\n   bool mvn;\n+  bool msl;\n };\n \n /* The current code model.  */\n@@ -6437,16 +6438,16 @@ aarch64_simd_valid_immediate (rtx op, enum machine_mode mode, bool inverse,\n       CHECK (2, 16, 11, bytes[i] == 0xff && bytes[i + 1] == bytes[1], 8, 1);\n \n       CHECK (4, 32, 12, bytes[i] == 0xff && bytes[i + 1] == bytes[1]\n-\t     && bytes[i + 2] == 0 && bytes[i + 3] == 0, 0, 0);\n+\t     && bytes[i + 2] == 0 && bytes[i + 3] == 0, 8, 0);\n \n       CHECK (4, 32, 13, bytes[i] == 0 && bytes[i + 1] == bytes[1]\n-\t     && bytes[i + 2] == 0xff && bytes[i + 3] == 0xff, 0, 1);\n+\t     && bytes[i + 2] == 0xff && bytes[i + 3] == 0xff, 8, 1);\n \n       CHECK (4, 32, 14, bytes[i] == 0xff && bytes[i + 1] == 0xff\n-\t     && bytes[i + 2] == bytes[2] && bytes[i + 3] == 0, 0, 0);\n+\t     && bytes[i + 2] == bytes[2] && bytes[i + 3] == 0, 16, 0);\n \n       CHECK (4, 32, 15, bytes[i] == 0 && bytes[i + 1] == 0\n-\t     && bytes[i + 2] == bytes[2] && bytes[i + 3] == 0xff, 0, 1);\n+\t     && bytes[i + 2] == bytes[2] && bytes[i + 3] == 0xff, 16, 1);\n \n       CHECK (1, 8, 16, bytes[i] == bytes[0], 0, 0);\n \n@@ -6455,12 +6456,7 @@ aarch64_simd_valid_immediate (rtx op, enum machine_mode mode, bool inverse,\n     }\n   while (0);\n \n-  /* TODO: Currently the assembler cannot handle types 12 to 15.\n-     And there is no way to specify cmode through the compiler.\n-     Disable them till there is support in the assembler.  */\n-  if (immtype == -1\n-      || (immtype >= 12 && immtype <= 15)\n-      || immtype == 18)\n+  if (immtype == -1)\n     return false;\n \n   if (info)\n@@ -6471,6 +6467,9 @@ aarch64_simd_valid_immediate (rtx op, enum machine_mode mode, bool inverse,\n \n       unsigned HOST_WIDE_INT imm = 0;\n \n+      if (immtype >= 12 && immtype <= 15)\n+\tinfo->msl = true;\n+\n       /* Un-invert bytes of recognized vector, if necessary.  */\n       if (invmask != 0)\n         for (i = 0; i < idx; i++)\n@@ -7403,10 +7402,11 @@ aarch64_output_simd_mov_immediate (rtx const_vector,\n   bool is_valid;\n   static char templ[40];\n   const char *mnemonic;\n+  const char *shift_op;\n   unsigned int lane_count = 0;\n   char element_char;\n \n-  struct simd_immediate_info info;\n+  struct simd_immediate_info info = { NULL_RTX, 0, 0, false, false };\n \n   /* This will return true to show const_vector is legal for use as either\n      a AdvSIMD MOVI instruction (or, implicitly, MVNI) immediate.  It will\n@@ -7442,14 +7442,15 @@ aarch64_output_simd_mov_immediate (rtx const_vector,\n     }\n \n   mnemonic = info.mvn ? \"mvni\" : \"movi\";\n+  shift_op = info.msl ? \"msl\" : \"lsl\";\n \n   if (lane_count == 1)\n     snprintf (templ, sizeof (templ), \"%s\\t%%d0, \" HOST_WIDE_INT_PRINT_HEX,\n \t      mnemonic, UINTVAL (info.value));\n   else if (info.shift)\n     snprintf (templ, sizeof (templ), \"%s\\t%%0.%d%c, \" HOST_WIDE_INT_PRINT_HEX\n-\t      \", lsl %d\", mnemonic, lane_count, element_char,\n-\t      UINTVAL (info.value), info.shift);\n+\t      \", %s %d\", mnemonic, lane_count, element_char,\n+\t      UINTVAL (info.value), shift_op, info.shift);\n   else\n     snprintf (templ, sizeof (templ), \"%s\\t%%0.%d%c, \" HOST_WIDE_INT_PRINT_HEX,\n \t      mnemonic, lane_count, element_char, UINTVAL (info.value));"}, {"sha": "061a8427258b161a550d0225e8487e3a5df0809a", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e4f0f84d56bccc7ffcbf2ba7def8bcc7cb921b6b/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e4f0f84d56bccc7ffcbf2ba7def8bcc7cb921b6b/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=e4f0f84d56bccc7ffcbf2ba7def8bcc7cb921b6b", "patch": "@@ -1,3 +1,7 @@\n+2013-07-12  Tejas Belagod  <tejas.belagod@arm.com>\n+\n+\t* gcc.target/aarch64/vect-movi.c: New.\n+\n 2013-07-11  Sriraman Tallam  <tmsriram@google.com>\n \n \tPR target/57362"}, {"sha": "59a0bd5cc54045e2c0641f591b7ea2a7adf46076", "filename": "gcc/testsuite/gcc.target/aarch64/vect-movi.c", "status": "added", "additions": 74, "deletions": 0, "changes": 74, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e4f0f84d56bccc7ffcbf2ba7def8bcc7cb921b6b/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fvect-movi.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e4f0f84d56bccc7ffcbf2ba7def8bcc7cb921b6b/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fvect-movi.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fvect-movi.c?ref=e4f0f84d56bccc7ffcbf2ba7def8bcc7cb921b6b", "patch": "@@ -0,0 +1,74 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O3 --save-temps -fno-inline\" } */\n+\n+extern void abort (void);\n+\n+#define N 16\n+\n+static void\n+movi_msl8 (int *__restrict a)\n+{\n+  int i;\n+\n+  /* { dg-final { scan-assembler \"movi\\\\tv\\[0-9\\]+\\.4s, 0xab, msl 8\" } } */\n+  for (i = 0; i < N; i++)\n+    a[i] = 0xabff;\n+}\n+\n+static void\n+movi_msl16 (int *__restrict a)\n+{\n+  int i;\n+\n+  /* { dg-final { scan-assembler \"movi\\\\tv\\[0-9\\]+\\.4s, 0xab, msl 16\" } } */\n+  for (i = 0; i < N; i++)\n+    a[i] = 0xabffff;\n+}\n+\n+static void\n+mvni_msl8 (int *__restrict a)\n+{\n+  int i;\n+\n+  /* { dg-final { scan-assembler \"mvni\\\\tv\\[0-9\\]+\\.4s, 0xab, msl 8\" } } */\n+  for (i = 0; i < N; i++)\n+    a[i] = 0xffff5400;\n+}\n+\n+static void\n+mvni_msl16 (int *__restrict a)\n+{\n+  int i;\n+\n+  /* { dg-final { scan-assembler \"mvni\\\\tv\\[0-9\\]+\\.4s, 0xab, msl 16\" } } */\n+  for (i = 0; i < N; i++)\n+    a[i] = 0xff540000;\n+}\n+\n+int\n+main (void)\n+{\n+  int a[N] = { 0 };\n+  int i;\n+\n+#define CHECK_ARRAY(a, val)\t\\\n+  for (i = 0; i < N; i++)\t\\\n+    if (a[i] != val)\t\t\\\n+      abort ();\n+\n+  movi_msl8 (a);\n+  CHECK_ARRAY (a, 0xabff);\n+\n+  movi_msl16 (a);\n+  CHECK_ARRAY (a, 0xabffff);\n+\n+  mvni_msl8 (a);\n+  CHECK_ARRAY (a, 0xffff5400);\n+\n+  mvni_msl16 (a);\n+  CHECK_ARRAY (a, 0xff540000);\n+\n+  return 0;\n+}\n+\n+/* { dg-final { cleanup-saved-temps } } */"}]}