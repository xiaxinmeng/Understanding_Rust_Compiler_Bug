{"sha": "296433e1a9e3c644fec1f1805dd595555683d9a0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Mjk2NDMzZTFhOWUzYzY0NGZlYzFmMTgwNWRkNTk1NTU1NjgzZDlhMA==", "commit": {"author": {"name": "Kaveh R. Ghazi", "email": "ghazi@caip.rutgers.edu", "date": "1998-06-22T05:23:33Z"}, "committer": {"name": "Kaveh Ghazi", "email": "ghazi@gcc.gnu.org", "date": "1998-06-22T05:23:33Z"}, "message": "Warning fixes:\n\n        * Makefile.in (varasm.o): Depend on sdbout.h.\n        (sdbout.o): Depend on toplev.h.\n        * collect2.c (scan_prog_file): Cast fprintf argument to `long' and\n        use %ld specifier.\n        * final.c (shorten_branches): Cast first arg of `bzero' to char *.\n        * genextract.c (main): When creating insn-extract.c, mark variable\n        `i' with ATTRIBUTE_UNUSED.\n        * genpeep.c (main): When creating insn-peep.c, mark variables\n        `insn', `x' and `pat' with ATTRIBUTE_UNUSED.\n        * objc/init.c (__objc_tree_print): Wrap function definition in\n        macro `DEBUG'.\n        * objc/objc-act.c (encode_array): Cast sprintf argument to `long'\n        and use %ld specifier.\n        (adorn_decl): Likewise, twice.\n\nFrom-SVN: r20650", "tree": {"sha": "279c567a607717883b54fd2f58e33c32342072aa", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/279c567a607717883b54fd2f58e33c32342072aa"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/296433e1a9e3c644fec1f1805dd595555683d9a0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/296433e1a9e3c644fec1f1805dd595555683d9a0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/296433e1a9e3c644fec1f1805dd595555683d9a0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/296433e1a9e3c644fec1f1805dd595555683d9a0/comments", "author": null, "committer": null, "parents": [{"sha": "9aea9eec602af941a5134cd3548e80c42b1b362a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9aea9eec602af941a5134cd3548e80c42b1b362a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9aea9eec602af941a5134cd3548e80c42b1b362a"}], "stats": {"total": 58, "additions": 42, "deletions": 16}, "files": [{"sha": "9484006f0ddbb2386fba161597bce0cf413eb0ac", "filename": "gcc/ChangeLog", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/296433e1a9e3c644fec1f1805dd595555683d9a0/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/296433e1a9e3c644fec1f1805dd595555683d9a0/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=296433e1a9e3c644fec1f1805dd595555683d9a0", "patch": "@@ -1,3 +1,26 @@\n+Mon Jun 22 08:18:46 1998  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n+\n+\t* Makefile.in (varasm.o): Depend on sdbout.h.\n+\t(sdbout.o): Depend on toplev.h.\n+\n+\t* collect2.c (scan_prog_file): Cast fprintf argument to `long' and\n+\tuse %ld specifier.\n+\n+\t* final.c (shorten_branches): Cast first arg of `bzero' to char *.\n+\n+\t* genextract.c (main): When creating insn-extract.c, mark variable\n+\t`i' with ATTRIBUTE_UNUSED.\n+\n+\t* genpeep.c (main): When creating insn-peep.c, mark variables\n+\t`insn', `x' and `pat' with ATTRIBUTE_UNUSED.\n+\n+\t* objc/init.c (__objc_tree_print): Wrap function definition in\n+\tmacro `DEBUG'.\n+\n+\t* objc/objc-act.c (encode_array): Cast sprintf argument to `long'\n+\tand use %ld specifier.\n+\t(adorn_decl): Likewise, twice.\n+\n Sun Jun 21 17:05:34 1998  Dave Love  <d.love@dl.ac.uk>\n \n \t* Makefile.in (install-info): Use install-info program if"}, {"sha": "1ab4d0d465d3427280b5e137959b66bddc23203f", "filename": "gcc/Makefile.in", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/296433e1a9e3c644fec1f1805dd595555683d9a0/gcc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/296433e1a9e3c644fec1f1805dd595555683d9a0/gcc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FMakefile.in?ref=296433e1a9e3c644fec1f1805dd595555683d9a0", "patch": "@@ -1372,7 +1372,7 @@ rtlanal.o : rtlanal.c $(CONFIG_H) system.h $(RTL_H)\n \n varasm.o : varasm.c $(CONFIG_H) system.h $(TREE_H) $(RTL_H) flags.h \\\n    function.h defaults.h insn-codes.h expr.h hard-reg-set.h regs.h \\\n-   xcoffout.h output.h c-pragma.h toplev.h except.h dbxout.h\n+   xcoffout.h output.h c-pragma.h toplev.h except.h dbxout.h sdbout.h\n function.o : function.c $(CONFIG_H) system.h $(RTL_H) $(TREE_H) flags.h \\\n    function.h insn-flags.h insn-codes.h expr.h regs.h hard-reg-set.h \\\n    insn-config.h $(RECOG_H) output.h toplev.h except.h\n@@ -1398,7 +1398,7 @@ dbxout.o : dbxout.c $(CONFIG_H) system.h $(TREE_H) $(RTL_H) flags.h regs.h \\\n    toplev.h\n sdbout.o : sdbout.c $(CONFIG_H) system.h $(TREE_H) $(RTL_H) flags.h except.h \\\n    function.h expr.h output.h hard-reg-set.h regs.h defaults.h real.h \\\n-   insn-config.h obstack.h xcoffout.h c-pragma.h sdbout.h insn-codes.h\n+   insn-config.h obstack.h xcoffout.h c-pragma.h sdbout.h insn-codes.h toplev.h\n dwarfout.o : dwarfout.c $(CONFIG_H) system.h $(TREE_H) $(RTL_H) dwarf.h \\\n    flags.h insn-config.h reload.h output.h defaults.h toplev.h dwarfout.h\n dwarf2out.o : dwarf2out.c $(CONFIG_H) system.h $(TREE_H) $(RTL_H) dwarf2.h \\"}, {"sha": "6c4933debe3bb49263f1582ba783b520fdb8ad1a", "filename": "gcc/collect2.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/296433e1a9e3c644fec1f1805dd595555683d9a0/gcc%2Fcollect2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/296433e1a9e3c644fec1f1805dd595555683d9a0/gcc%2Fcollect2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcollect2.c?ref=296433e1a9e3c644fec1f1805dd595555683d9a0", "patch": "@@ -2828,8 +2828,8 @@ scan_prog_file (prog_name, which_pass)\n #else\n \t\t      if (debug)\n \t\t\tfprintf (stderr,\n-\t\t\t\t \"\\tiss = %5d, value = %5d, index = %5d, name = %s\\n\",\n-\t\t\t\t symbol.iss, symbol.value, symbol.index, name);\n+\t\t\t\t \"\\tiss = %5d, value = %5ld, index = %5d, name = %s\\n\",\n+\t\t\t\t symbol.iss, (long) symbol.value, symbol.index, name);\n #endif\n \t\t    }\n #ifdef COLLECT_EXPORT_LIST"}, {"sha": "ca6c22037d8720aa03d8535cd695807ea592acdc", "filename": "gcc/final.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/296433e1a9e3c644fec1f1805dd595555683d9a0/gcc%2Ffinal.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/296433e1a9e3c644fec1f1805dd595555683d9a0/gcc%2Ffinal.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffinal.c?ref=296433e1a9e3c644fec1f1805dd595555683d9a0", "patch": "@@ -1028,7 +1028,7 @@ shorten_branches (first)\n   min_labelno = get_first_label_num ();\n   label_align = (struct label_alignment *) xmalloc (\n     (max_labelno - min_labelno + 1) * sizeof (struct label_alignment));\n-  bzero (label_align,\n+  bzero ((char *) label_align,\n     (max_labelno - min_labelno + 1) * sizeof (struct label_alignment));\n \n   uid_shuid = (int *) xmalloc (max_uid * sizeof *uid_shuid);"}, {"sha": "c06a74ca639df697699218b1f8af3a038e8d4c17", "filename": "gcc/genextract.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/296433e1a9e3c644fec1f1805dd595555683d9a0/gcc%2Fgenextract.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/296433e1a9e3c644fec1f1805dd595555683d9a0/gcc%2Fgenextract.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgenextract.c?ref=296433e1a9e3c644fec1f1805dd595555683d9a0", "patch": "@@ -480,7 +480,7 @@ from the machine description file `md'.  */\\n\\n\");\n   printf (\"  register rtx *ro = recog_operand;\\n\");\n   printf (\"  register rtx **ro_loc = recog_operand_loc;\\n\");\n   printf (\"  rtx pat = PATTERN (insn);\\n\");\n-  printf (\"  int i;\\n\\n\");\n+  printf (\"  int i ATTRIBUTE_UNUSED;\\n\\n\");\n   printf (\"  switch (INSN_CODE (insn))\\n\");\n   printf (\"    {\\n\");\n   printf (\"    case -1:\\n\");"}, {"sha": "ab65df7b5afb324f6105dd34046d0d962b8ab38e", "filename": "gcc/genpeep.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/296433e1a9e3c644fec1f1805dd595555683d9a0/gcc%2Fgenpeep.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/296433e1a9e3c644fec1f1805dd595555683d9a0/gcc%2Fgenpeep.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgenpeep.c?ref=296433e1a9e3c644fec1f1805dd595555683d9a0", "patch": "@@ -481,7 +481,7 @@ from the machine description file `md'.  */\\n\\n\");\n   printf (\"#define operands peep_operand\\n\\n\");\n \n   printf (\"rtx\\npeephole (ins1)\\n     rtx ins1;\\n{\\n\");\n-  printf (\"  rtx insn, x, pat;\\n\\n\");\n+  printf (\"  rtx insn ATTRIBUTE_UNUSED, x ATTRIBUTE_UNUSED, pat ATTRIBUTE_UNUSED;\\n\\n\");\n \n   /* Early out: no peepholes for insns followed by barriers.  */\n   printf (\"  if (NEXT_INSN (ins1)\\n\");"}, {"sha": "f1fea8123186370aee124ba5d8714bfb9b5e49bf", "filename": "gcc/objc/init.c", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/296433e1a9e3c644fec1f1805dd595555683d9a0/gcc%2Fobjc%2Finit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/296433e1a9e3c644fec1f1805dd595555683d9a0/gcc%2Fobjc%2Finit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fobjc%2Finit.c?ref=296433e1a9e3c644fec1f1805dd595555683d9a0", "patch": "@@ -59,7 +59,7 @@ static void __objc_class_add_protocols (Class, struct objc_protocol_list*);\n    or a category is loaded into the runtime.  This may e.g. help a\n    dynamic loader determine the classes that have been loaded when\n    an object file is dynamically linked in */\n-void (*_objc_load_callback)(Class class, Category* category) = 0; /* !T:SAFE */\n+void (*_objc_load_callback)(Class class, Category* category); /* !T:SAFE */\n \n /* Is all categories/classes resolved? */\n BOOL __objc_dangling_categories = NO;           /* !T:UNUSED */\n@@ -280,6 +280,7 @@ objc_postorder_traverse (objc_class_tree *tree,\n }\n \n /* Used to print a tree class hierarchy. */\n+#ifdef DEBUG\n static void\n __objc_tree_print (objc_class_tree *tree, int level)\n {\n@@ -289,6 +290,7 @@ __objc_tree_print (objc_class_tree *tree, int level)\n     printf (\"  \");\n   printf (\"%s\\n\", tree->class->name);\n }\n+#endif\n \n /* Walks on a linked list of methods in the reverse order and executes all\n    the methods corresponding to `op' selector. Walking in the reverse order\n@@ -381,7 +383,7 @@ __objc_force_linking (void)\n /* Run through the statics list, removing modules as soon as all its statics\n    have been initialized.  */\n static void\n-objc_init_statics ()\n+objc_init_statics (void)\n {\n   struct objc_list **cell = &uninitialized_statics;\n   struct objc_static_instances **statics_in_module;"}, {"sha": "9f40371190920027f679cc31bada8e9205e3deed", "filename": "gcc/objc/objc-act.c", "status": "modified", "additions": 8, "deletions": 7, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/296433e1a9e3c644fec1f1805dd595555683d9a0/gcc%2Fobjc%2Fobjc-act.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/296433e1a9e3c644fec1f1805dd595555683d9a0/gcc%2Fobjc%2Fobjc-act.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fobjc%2Fobjc-act.c?ref=296433e1a9e3c644fec1f1805dd595555683d9a0", "patch": "@@ -6557,9 +6557,9 @@ encode_array (type, curtype, format)\n       return;\n     }\n \n-  sprintf (buffer, \"[%d\",\n-\t   (TREE_INT_CST_LOW (an_int_cst)\n-\t    / TREE_INT_CST_LOW (TYPE_SIZE (array_of))));\n+  sprintf (buffer, \"[%ld\",\n+\t   (long) (TREE_INT_CST_LOW (an_int_cst)\n+\t\t   / TREE_INT_CST_LOW (TYPE_SIZE (array_of))));\n \n   obstack_grow (&util_obstack, buffer, strlen (buffer));\n   encode_type (array_of, curtype, format);\n@@ -7361,7 +7361,8 @@ adorn_decl (decl, str)\n       tree an_int_cst = TREE_OPERAND (decl, 1);\n \n       if (an_int_cst && TREE_CODE (an_int_cst) == INTEGER_CST)\n-\tsprintf (str + strlen (str), \"[%d]\", TREE_INT_CST_LOW (an_int_cst));\n+\tsprintf (str + strlen (str), \"[%ld]\",\n+\t\t (long) TREE_INT_CST_LOW (an_int_cst));\n       else\n \tstrcat (str, \"[]\");\n     }\n@@ -7372,9 +7373,9 @@ adorn_decl (decl, str)\n       tree array_of = TREE_TYPE (decl);\n \n       if (an_int_cst && TREE_CODE (an_int_cst) == INTEGER_TYPE)\n-\tsprintf (str + strlen (str), \"[%d]\",\n-\t\t (TREE_INT_CST_LOW (an_int_cst)\n-\t\t  / TREE_INT_CST_LOW (TYPE_SIZE (array_of))));\n+\tsprintf (str + strlen (str), \"[%ld]\",\n+\t\t (long) (TREE_INT_CST_LOW (an_int_cst)\n+\t\t\t / TREE_INT_CST_LOW (TYPE_SIZE (array_of))));\n       else\n \tstrcat (str, \"[]\");\n     }"}]}