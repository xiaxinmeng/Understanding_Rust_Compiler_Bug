{"sha": "0587cef3d7962a8b0f44779589ba2920dd3d71e5", "node_id": "C_kwDOANBUbNoAKDA1ODdjZWYzZDc5NjJhOGIwZjQ0Nzc5NTg5YmEyOTIwZGQzZDcxZTU", "commit": {"author": {"name": "Lewis Hyatt", "email": "lhyatt@gmail.com", "date": "2022-07-09T20:12:21Z"}, "committer": {"name": "Lewis Hyatt", "email": "lhyatt@gmail.com", "date": "2022-07-10T20:50:03Z"}, "message": "c: Fix location for _Pragma tokens [PR97498]\n\nThe handling of #pragma GCC diagnostic uses input_location, which is not always\nas precise as needed; in particular the relative location of some tokens and a\n_Pragma directive will crucially determine whether a given diagnostic is enabled\nor suppressed in the desired way. PR97498 shows how the C frontend ends up with\ninput_location pointing to the beginning of the line containing a _Pragma()\ndirective, resulting in the wrong behavior if the diagnostic to be modified\npertains to some tokens found earlier on the same line. This patch fixes that by\naddressing two issues:\n\n    a) libcpp was not assigning a valid location to the CPP_PRAGMA token\n    generated by the _Pragma directive.\n    b) C frontend was not setting input_location to something reasonable.\n\nWith this change, the C frontend is able to change input_location to point to\nthe _Pragma token as needed.\n\nThis is just a two-line fix (one for each of a) and b)), the testsuite changes\nwere needed only because the location on the tested warnings has been somewhat\nimproved, so the tests need to look for the new locations.\n\ngcc/c/ChangeLog:\n\n\tPR preprocessor/97498\n\t* c-parser.cc (c_parser_pragma): Set input_location to the\n\tlocation of the pragma, rather than the start of the line.\n\nlibcpp/ChangeLog:\n\n\tPR preprocessor/97498\n\t* directives.cc (destringize_and_run): Override the location of\n\tthe CPP_PRAGMA token from a _Pragma directive to the location of\n\tthe expansion point, as is done for the tokens lexed from it.\n\ngcc/testsuite/ChangeLog:\n\n\tPR preprocessor/97498\n\t* c-c++-common/pr97498.c: New test.\n\t* c-c++-common/gomp/pragma-3.c: Adapt for improved warning locations.\n\t* c-c++-common/gomp/pragma-5.c: Likewise.\n\t* gcc.dg/pragma-message.c: Likewise.\n\nlibgomp/ChangeLog:\n\n\t* testsuite/libgomp.oacc-c-c++-common/reduction-5.c: Adapt for\n\timproved warning locations.\n\t* testsuite/libgomp.oacc-c-c++-common/vred2d-128.c: Likewise.", "tree": {"sha": "f768f6dddbb87c656e25bf4be25095bb42c299b2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f768f6dddbb87c656e25bf4be25095bb42c299b2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0587cef3d7962a8b0f44779589ba2920dd3d71e5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0587cef3d7962a8b0f44779589ba2920dd3d71e5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0587cef3d7962a8b0f44779589ba2920dd3d71e5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0587cef3d7962a8b0f44779589ba2920dd3d71e5/comments", "author": null, "committer": null, "parents": [{"sha": "4ebbf3906895bcb40d7ff2729cf46deae66bc268", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4ebbf3906895bcb40d7ff2729cf46deae66bc268", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4ebbf3906895bcb40d7ff2729cf46deae66bc268"}], "stats": {"total": 46, "additions": 28, "deletions": 18}, "files": [{"sha": "92049d1a101da86db8b000ac676b30c63e5947b3", "filename": "gcc/c/c-parser.cc", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0587cef3d7962a8b0f44779589ba2920dd3d71e5/gcc%2Fc%2Fc-parser.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0587cef3d7962a8b0f44779589ba2920dd3d71e5/gcc%2Fc%2Fc-parser.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2Fc-parser.cc?ref=0587cef3d7962a8b0f44779589ba2920dd3d71e5", "patch": "@@ -12397,6 +12397,7 @@ c_parser_pragma (c_parser *parser, enum pragma_context context, bool *if_p)\n   unsigned int id;\n   const char *construct = NULL;\n \n+  input_location = c_parser_peek_token (parser)->location;\n   id = c_parser_peek_token (parser)->pragma_kind;\n   gcc_assert (id != PRAGMA_NONE);\n "}, {"sha": "ae18e9b888613adde69fbb583f64f13abe29f7b6", "filename": "gcc/testsuite/c-c++-common/gomp/pragma-3.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0587cef3d7962a8b0f44779589ba2920dd3d71e5/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgomp%2Fpragma-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0587cef3d7962a8b0f44779589ba2920dd3d71e5/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgomp%2Fpragma-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgomp%2Fpragma-3.c?ref=0587cef3d7962a8b0f44779589ba2920dd3d71e5", "patch": "@@ -1,13 +1,14 @@\n /* { dg-additional-options \"-fdump-tree-original\" }  */\n /* PR preprocessor/103165  */\n \n-#define inner(...) #__VA_ARGS__ ; _Pragma(\"omp error severity(warning) message (\\\"Test\\\") at(compilation)\")\n+#define inner(...) #__VA_ARGS__ ; _Pragma(\"omp error severity(warning) message (\\\"Test\\\") at(compilation)\") /* { dg-line inner_location } */\n #define outer(...) inner(__VA_ARGS__)\n \n void\n f (void)\n {\n-  const char *str = outer(inner(1,2));  /* { dg-warning \"'pragma omp error' encountered: Test\" } */\n+  const char *str = outer(inner(1,2));\n+  /* { dg-warning \"'pragma omp error' encountered: Test\" \"inner expansion\" { target *-*-* } inner_location } */\n }\n \n #if 0"}, {"sha": "8124f701502365d1416a02ed4e262ef428336d16", "filename": "gcc/testsuite/c-c++-common/gomp/pragma-5.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0587cef3d7962a8b0f44779589ba2920dd3d71e5/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgomp%2Fpragma-5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0587cef3d7962a8b0f44779589ba2920dd3d71e5/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgomp%2Fpragma-5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgomp%2Fpragma-5.c?ref=0587cef3d7962a8b0f44779589ba2920dd3d71e5", "patch": "@@ -1,13 +1,14 @@\n /* { dg-additional-options \"-fdump-tree-original\" }  */\n /* PR preprocessor/103165  */\n \n-#define inner(...) #__VA_ARGS__ ; _Pragma   (\t\"   omp\t\terror severity   (warning)\tmessage (\\\"Test\\\") at(compilation)\" )\n+#define inner(...) #__VA_ARGS__ ; _Pragma   (\t\"   omp\t\terror severity   (warning)\tmessage (\\\"Test\\\") at(compilation)\" ) /* { dg-line inner_location } */\n #define outer(...) inner(__VA_ARGS__)\n \n void\n f (void)\n {\n-  const char *str = outer(inner(1,2));  /* { dg-warning \"'pragma omp error' encountered: Test\" } */\n+  const char *str = outer(inner(1,2));\n+  /* { dg-warning \"'pragma omp error' encountered: Test\" \"inner expansion\" { target *-*-* } inner_location } */\n }\n \n #if 0"}, {"sha": "f5fa420415b25cb65545024ba63c3f91b6eb5757", "filename": "gcc/testsuite/c-c++-common/pr97498.c", "status": "added", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0587cef3d7962a8b0f44779589ba2920dd3d71e5/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fpr97498.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0587cef3d7962a8b0f44779589ba2920dd3d71e5/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fpr97498.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fpr97498.c?ref=0587cef3d7962a8b0f44779589ba2920dd3d71e5", "patch": "@@ -0,0 +1,4 @@\n+/* { dg-do compile } */\n+/* { dg-additional-options \"-Wunused-function\" } */\n+#pragma GCC diagnostic ignored \"-Wunused-function\"\n+static void f() {} _Pragma(\"GCC diagnostic error \\\"-Wunused-function\\\"\") /* { dg-bogus \"-Wunused-function\" } */"}, {"sha": "1b7cf09de0aac144a77e8c67a196cb25dda7c4d4", "filename": "gcc/testsuite/gcc.dg/pragma-message.c", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0587cef3d7962a8b0f44779589ba2920dd3d71e5/gcc%2Ftestsuite%2Fgcc.dg%2Fpragma-message.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0587cef3d7962a8b0f44779589ba2920dd3d71e5/gcc%2Ftestsuite%2Fgcc.dg%2Fpragma-message.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpragma-message.c?ref=0587cef3d7962a8b0f44779589ba2920dd3d71e5", "patch": "@@ -42,9 +42,11 @@\n #pragma message (\"Okay \" THREE)  /* { dg-message \"Okay 3\" } */\n \n /* Create a TODO() that prints a message on compilation.  */\n-#define DO_PRAGMA(x) _Pragma (#x)\n-#define TODO(x) DO_PRAGMA(message (\"TODO - \" #x))\n-TODO(Okay 4)                     /* { dg-message \"TODO - Okay 4\" } */\n+#define DO_PRAGMA(x) _Pragma (#x) /* { dg-line pragma_loc1 } */\n+#define TODO(x) DO_PRAGMA(message (\"TODO - \" #x)) /* { dg-line pragma_loc2 } */\n+TODO(Okay 4) /* { dg-message \"in expansion of macro 'TODO'\" } */\n+/* { dg-message \"TODO - Okay 4\" \"test4.1\" { target *-*-* } pragma_loc1 } */\n+/* { dg-message \"in expansion of macro 'DO_PRAGMA'\" \"test4.2\" { target *-*-* } pragma_loc2 } */\n \n #if 0\n #pragma message (\"Not printed\")"}, {"sha": "4104d5166e2282805ab722b5758e39cdf73ceb21", "filename": "libcpp/directives.cc", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0587cef3d7962a8b0f44779589ba2920dd3d71e5/libcpp%2Fdirectives.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0587cef3d7962a8b0f44779589ba2920dd3d71e5/libcpp%2Fdirectives.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2Fdirectives.cc?ref=0587cef3d7962a8b0f44779589ba2920dd3d71e5", "patch": "@@ -1930,6 +1930,7 @@ destringize_and_run (cpp_reader *pfile, const cpp_string *in,\n       maxcount = 50;\n       toks = XNEWVEC (cpp_token, maxcount);\n       toks[0] = pfile->directive_result;\n+      toks[0].src_loc = expansion_loc;\n \n       do\n \t{"}, {"sha": "16aa0dd4ac12fde9cde414cd6009bc47dd50c574", "filename": "libgomp/testsuite/libgomp.oacc-c-c++-common/reduction-5.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0587cef3d7962a8b0f44779589ba2920dd3d71e5/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Freduction-5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0587cef3d7962a8b0f44779589ba2920dd3d71e5/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Freduction-5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Freduction-5.c?ref=0587cef3d7962a8b0f44779589ba2920dd3d71e5", "patch": "@@ -12,7 +12,7 @@\n \n const int n = 100;\n \n-#define DO_PRAGMA(x) _Pragma (#x)\n+#define DO_PRAGMA(x) _Pragma (#x) /* { dg-line pragma_loc } */\n \n #define check_reduction(gwv_par, gwv_loop)\t\t\\\n   {\t\t\t\t\t\t\t\\\n@@ -46,7 +46,7 @@ main (void)\n   /* Nvptx targets require a vector_length or 32 in to allow spinlocks with\n      gangs.  */\n   check_reduction (num_workers (nw) vector_length (vl), worker);\n-  /* { dg-warning \"region is vector partitioned but does not contain vector partitioned code\" \"\" { target *-*-* } .-1 } */\n+  /* { dg-warning \"region is vector partitioned but does not contain vector partitioned code\" \"test1\" { target *-*-* } pragma_loc } */\n   check_reduction (vector_length (vl), vector);\n   check_reduction (num_gangs (ng) num_workers (nw) vector_length (vl), gang\n \t\t   worker vector);"}, {"sha": "84e6d51670bb051011cf5c9a5f073e0d197ab7ad", "filename": "libgomp/testsuite/libgomp.oacc-c-c++-common/vred2d-128.c", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0587cef3d7962a8b0f44779589ba2920dd3d71e5/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Fvred2d-128.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0587cef3d7962a8b0f44779589ba2920dd3d71e5/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Fvred2d-128.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Fvred2d-128.c?ref=0587cef3d7962a8b0f44779589ba2920dd3d71e5", "patch": "@@ -17,7 +17,7 @@ int a1[n], a2[n];\n   void name ()\t\t\t\t\t\\\n   {\t\t\t\t\t\t\\\n   long i, j, t1, t2, t3; /* { dg-line vars } */\t\\\n-  _Pragma(outer)\t\t\t\t\\\n+  _Pragma(outer) /* { dg-line outer } */\t\\\n   for (i = 0; i < n; i++)\t\t\t\\\n     {\t\t\t\t\t\t\\\n       t1 = 0;\t\t\t\t\t\\\n@@ -40,44 +40,44 @@ int a1[n], a2[n];\n \n gentest (test1, \"acc parallel loop gang vector_length (128) firstprivate (t1, t2)\",\n \t \"acc loop vector reduction(+:t1) reduction(-:t2)\")\n-/* { dg-warning {'t1' is used uninitialized} {} { target *-*-* } .-1 }\n+/* { dg-warning {'t1' is used uninitialized} {} { target *-*-* } outer }\n    { dg-note {'t1' was declared here} {} { target *-*-* } vars }\n    { dg-note {in expansion of macro 'gentest'} {} { target { ! offloading_enabled } } .-4 }\n      TODO See PR101551 for 'offloading_enabled' differences.  */\n-/* { dg-warning {'t2' is used uninitialized} {} { target *-*-* } .-5 }\n+/* { dg-warning {'t2' is used uninitialized} {} { target *-*-* } outer }\n    { dg-note {'t2' was declared here} {} { target *-*-* } vars }\n    { DUP_dg-note {in expansion of macro 'gentest'} {} { target { ! offloading_enabled } } .-8 }\n      TODO See PR101551 for 'offloading_enabled' differences.  */\n \n gentest (test2, \"acc parallel loop gang vector_length (128) firstprivate (t1, t2)\",\n \t \"acc loop worker vector reduction(+:t1) reduction(-:t2)\")\n-/* { dg-warning {'t1' is used uninitialized} {} { target *-*-* } .-1 }\n+/* { DUPdg-warning {'t1' is used uninitialized} {} { target *-*-* } outer }\n    { DUP_dg-note {'t1' was declared here} {} { target *-*-* } vars }\n    { dg-note {in expansion of macro 'gentest'} {} { target { ! offloading_enabled } } .-4 }\n      TODO See PR101551 for 'offloading_enabled' differences.  */\n-/* { dg-warning {'t2' is used uninitialized} {} { target *-*-* } .-5 }\n+/* { DUPdg-warning {'t2' is used uninitialized} {} { target *-*-* } outer }\n    { DUP_dg-note {'t2' was declared here} {} { target *-*-* } vars }\n    { DUP_dg-note {in expansion of macro 'gentest'} {} { target { ! offloading_enabled } } .-8 }\n      TODO See PR101551 for 'offloading_enabled' differences.  */\n \n gentest (test3, \"acc parallel loop gang worker vector_length (128) firstprivate (t1, t2)\",\n \t \"acc loop vector reduction(+:t1) reduction(-:t2)\")\n-/* { dg-warning {'t1' is used uninitialized} {} { target *-*-* } .-1 }\n+/* { DUPdg-warning {'t1' is used uninitialized} {} { target *-*-* } outer }\n    { DUP_dg-note {'t1' was declared here} {} { target *-*-* } vars }\n    { dg-note {in expansion of macro 'gentest'} {} { target { ! offloading_enabled } } .-4 }\n      TODO See PR101551 for 'offloading_enabled' differences.  */\n-/* { dg-warning {'t2' is used uninitialized} {} { target *-*-* } .-5 }\n+/* { DUPdg-warning {'t2' is used uninitialized} {} { target *-*-* } outer }\n    { DUP_dg-note {'t2' was declared here} {} { target *-*-* } vars }\n    { DUP_dg-note {in expansion of macro 'gentest'} {} { target { ! offloading_enabled } } .-8 }\n      TODO See PR101551 for 'offloading_enabled' differences.  */\n \n gentest (test4, \"acc parallel loop firstprivate (t1, t2)\",\n \t \"acc loop reduction(+:t1) reduction(-:t2)\")\n-/* { dg-warning {'t1' is used uninitialized} {} { target *-*-* } .-1 }\n+/* { DUPdg-warning {'t1' is used uninitialized} {} { target *-*-* } outer }\n    { DUP_dg-note {'t1' was declared here} {} { target *-*-* } vars }\n    { dg-note {in expansion of macro 'gentest'} {} { target { ! offloading_enabled } } .-4 }\n      TODO See PR101551 for 'offloading_enabled' differences.  */\n-/* { dg-warning {'t2' is used uninitialized} {} { target *-*-* } .-5 }\n+/* { DUPdg-warning {'t2' is used uninitialized} {} { target *-*-* } outer }\n    { DUP_dg-note {'t2' was declared here} {} { target *-*-* } vars }\n    { DUP_dg-note {in expansion of macro 'gentest'} {} { target { ! offloading_enabled } } .-8 }\n      TODO See PR101551 for 'offloading_enabled' differences.  */"}]}