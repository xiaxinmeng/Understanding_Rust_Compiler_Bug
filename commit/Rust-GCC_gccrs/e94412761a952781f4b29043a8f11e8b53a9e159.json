{"sha": "e94412761a952781f4b29043a8f11e8b53a9e159", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTk0NDEyNzYxYTk1Mjc4MWY0YjI5MDQzYThmMTFlOGI1M2E5ZTE1OQ==", "commit": {"author": {"name": "David Edelsohn", "email": "edelsohn@gnu.org", "date": "2005-06-10T01:11:43Z"}, "committer": {"name": "David Edelsohn", "email": "dje@gcc.gnu.org", "date": "2005-06-10T01:11:43Z"}, "message": "rs6000.md (eq): Convert to define_insn_and_split.\n\n        * config/rs6000/rs6000.md (eq): Convert to define_insn_and_split.\n        * config/rs6000/predicates.md (scc_eq_operand): New.\n\nFrom-SVN: r100812", "tree": {"sha": "d50d952af6b4e2eec66f9c95e310e3d0c2bf1edf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d50d952af6b4e2eec66f9c95e310e3d0c2bf1edf"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e94412761a952781f4b29043a8f11e8b53a9e159", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e94412761a952781f4b29043a8f11e8b53a9e159", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e94412761a952781f4b29043a8f11e8b53a9e159", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e94412761a952781f4b29043a8f11e8b53a9e159/comments", "author": null, "committer": null, "parents": [{"sha": "192a18c8f4ef0ae63747a939ef7dbf18f42412ae", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/192a18c8f4ef0ae63747a939ef7dbf18f42412ae", "html_url": "https://github.com/Rust-GCC/gccrs/commit/192a18c8f4ef0ae63747a939ef7dbf18f42412ae"}], "stats": {"total": 203, "additions": 69, "deletions": 134}, "files": [{"sha": "d41db885477cfc6c34686530f4c67122c8141ec6", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e94412761a952781f4b29043a8f11e8b53a9e159/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e94412761a952781f4b29043a8f11e8b53a9e159/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=e94412761a952781f4b29043a8f11e8b53a9e159", "patch": "@@ -1,3 +1,8 @@\n+2005-06-09  David Edelsohn  <edelsohn@gnu.org>\n+\n+\t* config/rs6000/rs6000.md (eq): Convert to define_insn_and_split.\n+\t* config/rs6000/predicates.md (scc_eq_operand): New.\n+\n 2005-06-09  Kaz Kojima  <kkojima@gcc.gnu.org>\n \n \t* config/sh/sh.md (mextr_rl): Set buffer size properly."}, {"sha": "a2daf8711b6184989cab417ffe4c47596e8a0faf", "filename": "gcc/config/rs6000/predicates.md", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e94412761a952781f4b29043a8f11e8b53a9e159/gcc%2Fconfig%2Frs6000%2Fpredicates.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e94412761a952781f4b29043a8f11e8b53a9e159/gcc%2Fconfig%2Frs6000%2Fpredicates.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Fpredicates.md?ref=e94412761a952781f4b29043a8f11e8b53a9e159", "patch": "@@ -551,6 +551,11 @@\n \t (match_operand 0 \"gpc_reg_operand\")\n \t (match_operand 0 \"logical_operand\"))))\n \n+;; Return 1 if the operand is either a logical operand or a short cint operand.\n+(define_predicate \"scc_eq_operand\"\n+  (ior (match_operand 0 \"logical_operand\")\n+       (match_operand 0 \"short_cint_operand\")))\n+\n ;; Return 1 if the operand is a general non-special register or memory operand.\n (define_predicate \"reg_or_mem_operand\"\n   (if_then_else (match_code \"mem\")"}, {"sha": "2f3331b2c9c3f1faaed97e7209f6ec5ff2bb92e0", "filename": "gcc/config/rs6000/rs6000.md", "status": "modified", "additions": 59, "deletions": 134, "changes": 193, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e94412761a952781f4b29043a8f11e8b53a9e159/gcc%2Fconfig%2Frs6000%2Frs6000.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e94412761a952781f4b29043a8f11e8b53a9e159/gcc%2Fconfig%2Frs6000%2Frs6000.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.md?ref=e94412761a952781f4b29043a8f11e8b53a9e159", "patch": "@@ -11468,153 +11468,78 @@\n ;; otherwise won't accept constants.  We do this because it is faster than\n ;; the cmp/mfcr sequence we would otherwise generate.\n \n-(define_insn \"\"\n-  [(set (match_operand:SI 0 \"gpc_reg_operand\" \"=r,r,r,r,r\")\n-\t(eq:SI (match_operand:SI 1 \"gpc_reg_operand\" \"%r,r,r,r,r\")\n-\t       (match_operand:SI 2 \"reg_or_cint_operand\" \"r,O,K,L,I\")))\n-   (clobber (match_scratch:SI 3 \"=r,X,r,r,r\"))]\n-  \"TARGET_32BIT\"\n-  \"@\n-   xor %0,%1,%2\\;{sfi|subfic} %3,%0,0\\;{ae|adde} %0,%3,%0\n-   #\n-   {xoril|xori} %0,%1,%b2\\;{sfi|subfic} %3,%0,0\\;{ae|adde} %0,%3,%0\n-   {xoriu|xoris} %0,%1,%u2\\;{sfi|subfic} %3,%0,0\\;{ae|adde} %0,%3,%0\n-   {sfi|subfic} %0,%1,%2\\;{sfi|subfic} %3,%0,0\\;{ae|adde} %0,%3,%0\"\n-  [(set_attr \"type\" \"three,two,three,three,three\")\n-   (set_attr \"length\" \"12,8,12,12,12\")])\n+(define_mode_attr scc_eq_op2 [(SI \"rKLI\")\n+\t\t\t      (DI \"rKJI\")])\n \n-(define_insn \"\"\n-  [(set (match_operand:DI 0 \"gpc_reg_operand\" \"=r,r,r,r,r\")\n-\t(eq:DI (match_operand:DI 1 \"gpc_reg_operand\" \"%r,r,r,r,r\")\n-\t       (match_operand:DI 2 \"reg_or_cint_operand\" \"r,O,K,J,I\")))\n-   (clobber (match_scratch:DI 3 \"=r,X,r,r,r\"))]\n-  \"TARGET_64BIT\"\n-  \"@\n-   xor %0,%1,%2\\;subfic %3,%0,0\\;adde %0,%3,%0\n-   #\n-   xori %0,%1,%b2\\;subfic %3,%0,0\\;adde %0,%3,%0\n-   xoris %0,%1,%u2\\;subfic %3,%0,0\\;adde %0,%3,%0\n-   subfic %0,%1,%2\\;subfic %3,%0,0\\;adde %0,%3,%0\"\n-  [(set_attr \"type\" \"three,two,three,three,three\")\n-   (set_attr \"length\" \"12,8,12,12,12\")])\n-\n-(define_split\n-  [(set (match_operand:GPR 0 \"gpc_reg_operand\" \"\")\n-\t(eq:GPR (match_operand:GPR 1 \"gpc_reg_operand\" \"\")\n-\t       (match_operand:GPR 2 \"zero_constant\" \"\")))\n-   (clobber (match_scratch:GPR 3 \"\"))]\n+(define_insn_and_split \"*eq<mode>\"\n+  [(set (match_operand:GPR 0 \"gpc_reg_operand\" \"=r\")\n+\t(eq:GPR (match_operand:GPR 1 \"gpc_reg_operand\" \"r\")\n+\t\t(match_operand:GPR 2 \"scc_eq_operand\" \"<scc_eq_op2>\")))\n+   (clobber (match_scratch:GPR 3 \"=r\"))\n+   (clobber (match_scratch:GPR 4 \"=r\"))]\n   \"\"\n-  [(set (match_dup 0)\n-\t(clz:GPR (match_dup 1)))\n+  \"#\"\n+  \"reload_completed\"\n+  [(set (match_dup 3)\n+\t(clz:GPR (match_dup 4)))\n    (set (match_dup 0)\n-\t(lshiftrt:GPR (match_dup 0) (match_dup 4)))]\n+\t(lshiftrt:GPR (match_dup 3) (match_dup 5)))]\n   {\n-    operands[4] = GEN_INT (exact_log2 (GET_MODE_BITSIZE (<MODE>mode)));\n-  })\n-\n-(define_insn \"\"\n-  [(set (match_operand:CC 4 \"cc_reg_operand\" \"=x,x,x,x,x,?y,?y,?y,?y,?y\")\n-\t(compare:CC\n-\t (eq:SI (match_operand:SI 1 \"gpc_reg_operand\" \"%r,r,r,r,r,r,r,r,r,r\")\n-\t\t(match_operand:SI 2 \"reg_or_cint_operand\" \"r,O,K,L,I,r,O,K,L,I\"))\n-\t (const_int 0)))\n-   (set (match_operand:SI 0 \"gpc_reg_operand\" \"=r,r,r,r,r,r,r,r,r,r\")\n-\t(eq:SI (match_dup 1) (match_dup 2)))\n-   (clobber (match_scratch:SI 3 \"=r,X,r,r,r,r,X,r,r,r\"))]\n-  \"TARGET_32BIT\"\n-  \"@\n-   xor %0,%1,%2\\;{sfi|subfic} %3,%0,0\\;{ae.|adde.} %0,%3,%0\n-   #\n-   {xoril|xori} %0,%1,%b2\\;{sfi|subfic} %3,%0,0\\;{ae.|adde.} %0,%3,%0\n-   {xoriu|xoris} %0,%1,%u2\\;{sfi|subfic} %3,%0,0\\;{ae.|adde.} %0,%3,%0\n-   {sfi|subfic} %0,%1,%2\\;{sfi|subfic} %3,%0,0\\;{ae.|adde.} %0,%3,%0\n-   #\n-   #\n-   #\n-   #\n-   #\"\n-  [(set_attr \"type\" \"compare\")\n-   (set_attr \"length\" \"12,8,12,12,12,16,12,16,16,16\")])\n-\n-(define_split\n-  [(set (match_operand:CC 4 \"cc_reg_not_cr0_operand\" \"\")\n-\t(compare:CC\n-\t (eq:SI (match_operand:SI 1 \"gpc_reg_operand\" \"\")\n-\t\t(match_operand:SI 2 \"reg_or_cint_operand\" \"\"))\n-\t (const_int 0)))\n-   (set (match_operand:SI 0 \"gpc_reg_operand\" \"\")\n-\t(eq:SI (match_dup 1) (match_dup 2)))\n-   (clobber (match_scratch:SI 3 \"\"))]\n-  \"TARGET_32BIT && reload_completed\"\n-  [(parallel [(set (match_dup 0)\n-\t(eq:SI (match_dup 1) (match_dup 2)))\n-   (clobber (match_dup 3))])\n-   (set (match_dup 4)\n-\t(compare:CC (match_dup 0)\n-\t\t    (const_int 0)))]\n-  \"\")\n-\n-(define_insn \"\"\n-  [(set (match_operand:CC 4 \"cc_reg_operand\" \"=x,x,x,x,x,?y,?y,?y,?y,?y\")\n-\t(compare:CC\n-\t (eq:DI (match_operand:DI 1 \"gpc_reg_operand\" \"%r,r,r,r,r,r,r,r,r,r\")\n-\t\t(match_operand:DI 2 \"reg_or_cint_operand\" \"r,O,K,J,I,r,O,K,J,I\"))\n-\t (const_int 0)))\n-   (set (match_operand:DI 0 \"gpc_reg_operand\" \"=r,r,r,r,r,r,r,r,r,r\")\n-\t(eq:DI (match_dup 1) (match_dup 2)))\n-   (clobber (match_scratch:DI 3 \"=r,X,r,r,r,r,X,r,r,r\"))]\n-  \"TARGET_64BIT\"\n-  \"@\n-   xor %0,%1,%2\\;subfic %3,%0,0\\;adde. %0,%3,%0\n-   #\n-   xori %0,%1,%b2\\;subfic %3,%0,0\\;adde. %0,%3,%0\n-   xoris %0,%1,%u2\\;subfic %3,%0,0\\;adde. %0,%3,%0\n-   subfic %0,%1,%2\\;subfic %3,%0,0\\;adde. %0,%3,%0\n-   #\n-   #\n-   #\n-   #\n-   #\"\n-  [(set_attr \"type\" \"compare\")\n-   (set_attr \"length\" \"12,8,12,12,12,16,12,16,16,16\")])\n+    if (GET_CODE (operands[2]) != CONST_INT || INTVAL (operands[2]) != 0)\n+      {\n+\tif (logical_operand (operands[2], <MODE>mode))\n+\t  emit_insn (gen_rtx_SET (VOIDmode, operands[4],\n+\t\t\t\t  gen_rtx_XOR (<MODE>mode,\n+\t\t\t\t\t       operands[1], operands[2])));\n+\telse\n+\t  emit_insn (gen_rtx_SET (VOIDmode, operands[4],\n+\t\t\t\t  gen_rtx_PLUS (<MODE>mode, operands[1],\n+\t\t\t\t\t\tnegate_rtx (<MODE>mode,\n+\t\t\t\t\t\t\t    operands[2]))));\n+      }\n+    else\n+      operands[4] = operands[1];\n \n-(define_split\n-  [(set (match_operand:CC 4 \"cc_reg_not_cr0_operand\" \"\")\n-\t(compare:CC\n-\t (eq:DI (match_operand:DI 1 \"gpc_reg_operand\" \"\")\n-\t\t(match_operand:DI 2 \"reg_or_cint_operand\" \"\"))\n-\t (const_int 0)))\n-   (set (match_operand:DI 0 \"gpc_reg_operand\" \"\")\n-\t(eq:DI (match_dup 1) (match_dup 2)))\n-   (clobber (match_scratch:DI 3 \"\"))]\n-  \"TARGET_64BIT && reload_completed\"\n-  [(parallel [(set (match_dup 0)\n-\t(eq:DI (match_dup 1) (match_dup 2)))\n-   (clobber (match_dup 3))])\n-   (set (match_dup 4)\n-\t(compare:CC (match_dup 0)\n-\t\t    (const_int 0)))]\n-  \"\")\n+    operands[5] = GEN_INT (exact_log2 (GET_MODE_BITSIZE (<MODE>mode)));\n+  })\n \n-(define_split\n-  [(set (match_operand:CC 4 \"cc_reg_operand\" \"\")\n+(define_insn_and_split \"*eq<mode>_compare\"\n+  [(set (match_operand:CC 5 \"cc_reg_operand\" \"=y\")\n \t(compare:CC\n-\t (eq:GPR (match_operand:GPR 1 \"gpc_reg_operand\" \"\")\n-\t\t (match_operand:GPR 2 \"zero_constant\" \"\"))\n+\t (eq:GPR (match_operand:GPR 1 \"gpc_reg_operand\" \"=r\")\n+\t\t (match_operand:GPR 2 \"scc_eq_operand\" \"<scc_eq_op2>\"))\n \t (const_int 0)))\n-   (set (match_operand:GPR 0 \"gpc_reg_operand\" \"\")\n+   (set (match_operand:GPR 0 \"gpc_reg_operand\" \"=r\")\n \t(eq:GPR (match_dup 1) (match_dup 2)))\n-   (clobber (match_scratch:GPR 3 \"\"))]\n+   (clobber (match_scratch:GPR 3 \"=r\"))\n+   (clobber (match_scratch:GPR 4 \"=r\"))]\n   \"\"\n-  [(set (match_dup 0)\n-\t(clz:GPR (match_dup 1)))\n-   (parallel [(set (match_dup 4)\n-\t\t   (compare:CC (lshiftrt:GPR (match_dup 0) (match_dup 5))\n+  \"#\"\n+  \"reload_completed\"\n+  [(set (match_dup 3)\n+\t(clz:GPR (match_dup 4)))\n+   (parallel [(set (match_dup 5)\n+\t\t   (compare:CC (lshiftrt:GPR (match_dup 3) (match_dup 6))\n \t\t\t       (const_int 0)))\n \t      (set (match_dup 0)\n-\t\t   (lshiftrt:GPR (match_dup 0) (match_dup 5)))])]\n+\t\t   (lshiftrt:GPR (match_dup 3) (match_dup 6)))])]\n   {\n-    operands[5] = GEN_INT (exact_log2 (GET_MODE_BITSIZE (<MODE>mode)));\n+    if (GET_CODE (operands[2]) != CONST_INT || INTVAL (operands[2]) != 0)\n+      {\n+\tif (logical_operand (operands[2], <MODE>mode))\n+\t  emit_insn (gen_rtx_SET (VOIDmode, operands[4],\n+\t\t\t\t  gen_rtx_XOR (<MODE>mode,\n+\t\t\t\t\t       operands[1], operands[2])));\n+\telse\n+\t  emit_insn (gen_rtx_SET (VOIDmode, operands[4],\n+\t\t\t\t  gen_rtx_PLUS (<MODE>mode, operands[1],\n+\t\t\t\t\t\tnegate_rtx (<MODE>mode,\n+\t\t\t\t\t\t\t    operands[2]))));\n+      }\n+    else\n+      operands[4] = operands[1];\n+\n+    operands[6] = GEN_INT (exact_log2 (GET_MODE_BITSIZE (<MODE>mode)));\n   })\n \n ;; We have insns of the form shown by the first define_insn below.  If"}]}