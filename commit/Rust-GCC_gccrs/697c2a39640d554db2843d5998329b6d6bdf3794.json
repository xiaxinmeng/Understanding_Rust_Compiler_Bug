{"sha": "697c2a39640d554db2843d5998329b6d6bdf3794", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Njk3YzJhMzk2NDBkNTU0ZGIyODQzZDU5OTgzMjliNmQ2YmRmMzc5NA==", "commit": {"author": {"name": "Phil Edwards", "email": "pme@sourceware.cygnus.com", "date": "2000-08-23T04:38:42Z"}, "committer": {"name": "Phil Edwards", "email": "pme@gcc.gnu.org", "date": "2000-08-23T04:38:42Z"}, "message": "acconfig.h: _GLIBCPP_USING_THREADS and some workaround types added.\n\n2000-08-23  Phil Edwards  <pme@sourceware.cygnus.com>\n\n\t* acconfig.h:  _GLIBCPP_USING_THREADS and some workaround types added.\n\t* acinclude.m4:  New macro, GLIBCPP_ENABLE_WCHAR.  Set the threads\n\t  definition as well, and some minor spelling/spacing fixes.  If\n\t  building libio, check for certain typedefs.\n\t* libio/_G_config.h:  Wrap _IO_MTSAFE_IO in _GLIBCPP_USING_THREADS.\n\t  Conditionally define _LARGEFILE64_SOURCE, otherwise the 64-bit types\n\t  will never be there.\n\t* libio/libio.h:  In the null case, _IO_lock_t can't just be void.\n\t* src/string-inst.cc:  Use _GLIBCPP_USE_WCHAR_T.\n\n\t* configure.in:  Update the cache a bit more often.\n\n\t* mkcheck.in:  For check-install, also need to -I the testsuite dir.\n\nFrom-SVN: r35901", "tree": {"sha": "f867b8cb73e2b2f16074ed72a4597cf7d87f6b3d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f867b8cb73e2b2f16074ed72a4597cf7d87f6b3d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/697c2a39640d554db2843d5998329b6d6bdf3794", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/697c2a39640d554db2843d5998329b6d6bdf3794", "html_url": "https://github.com/Rust-GCC/gccrs/commit/697c2a39640d554db2843d5998329b6d6bdf3794", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/697c2a39640d554db2843d5998329b6d6bdf3794/comments", "author": null, "committer": null, "parents": [{"sha": "55efb413f8db156d8419aa6ca65d8e0b35e3ff60", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/55efb413f8db156d8419aa6ca65d8e0b35e3ff60", "html_url": "https://github.com/Rust-GCC/gccrs/commit/55efb413f8db156d8419aa6ca65d8e0b35e3ff60"}], "stats": {"total": 2920, "additions": 1725, "deletions": 1195}, "files": [{"sha": "1d056c41ad3e1a05ab00640111ffc4473319c9d3", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/697c2a39640d554db2843d5998329b6d6bdf3794/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/697c2a39640d554db2843d5998329b6d6bdf3794/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=697c2a39640d554db2843d5998329b6d6bdf3794", "patch": "@@ -1,3 +1,19 @@\n+2000-08-23  Phil Edwards  <pme@sourceware.cygnus.com>\n+\n+\t* acconfig.h:  _GLIBCPP_USING_THREADS and some workaround types added.\n+\t* acinclude.m4:  New macro, GLIBCPP_ENABLE_WCHAR.  Set the threads\n+\t  definition as well, and some minor spelling/spacing fixes.  If\n+\t  building libio, check for certain typedefs.\n+\t* libio/_G_config.h:  Wrap _IO_MTSAFE_IO in _GLIBCPP_USING_THREADS.\n+\t  Conditionally define _LARGEFILE64_SOURCE, otherwise the 64-bit types\n+\t  will never be there.\n+\t* libio/libio.h:  In the null case, _IO_lock_t can't just be void.\n+\t* src/string-inst.cc:  Use _GLIBCPP_USE_WCHAR_T.\n+\n+\t* configure.in:  Update the cache a bit more often.\n+\n+\t* mkcheck.in:  For check-install, also need to -I the testsuite dir.\n+\n 2000-08-22  Benjamin Kosnik  <bkoz@purist.soma.redhat.com>\n \n \t* src/locale-inst.cc: Add codecvt<unicode_t, wchar_t,"}, {"sha": "da3b00410c871f7d5c11b5d51d8a4e61f39ca9ab", "filename": "libstdc++-v3/acconfig.h", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/697c2a39640d554db2843d5998329b6d6bdf3794/libstdc%2B%2B-v3%2Facconfig.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/697c2a39640d554db2843d5998329b6d6bdf3794/libstdc%2B%2B-v3%2Facconfig.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Facconfig.h?ref=697c2a39640d554db2843d5998329b6d6bdf3794", "patch": "@@ -69,6 +69,24 @@\n // Define if modf is present in <math.h>\n #undef HAVE_MODF\n \n+// Define if multiple threads are to be taken into account.\n+#undef _GLIBCPP_USING_THREADS\n+\n+// Define to some workaround if not directly available.\n+#undef off64_t\n+\n+// Define to some workaround if not directly available.\n+#undef __off_t\n+\n+// Define to some workaround if not directly available.\n+#undef __off64_t\n+\n+// Define to some workaround if not directly available.\n+#undef __ssize_t\n+\n+// Define to regular stat if not directly supported.\n+#undef stat64\n+\n // @BOTTOM@\n //\n // Systems that have certain non-standard functions prefixed with an"}, {"sha": "0aa791d5ca100e6316e44d9d8a4fc3cc5ec7a395", "filename": "libstdc++-v3/acinclude.m4", "status": "modified", "additions": 170, "deletions": 105, "changes": 275, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/697c2a39640d554db2843d5998329b6d6bdf3794/libstdc%2B%2B-v3%2Facinclude.m4", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/697c2a39640d554db2843d5998329b6d6bdf3794/libstdc%2B%2B-v3%2Facinclude.m4", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Facinclude.m4?ref=697c2a39640d554db2843d5998329b6d6bdf3794", "patch": "@@ -131,9 +131,11 @@ LIB_AC_PROG_CXX\n   # fails, because we are probably configuring with a cross compiler\n   # which cant create executables.  So we include AC_EXEEXT to keep\n   # automake happy, but we dont execute it, since we dont care about\n-  # the result.\n+  # the result.  We must, however, execute something else to prevent sh\n+  # from complaining about an empty body.\n   if false; then\n     AC_EXEEXT\n+    :\n   fi\n \n   # configure.host sets the following important variables\n@@ -893,93 +895,102 @@ AC_DEFUN(GLIBCPP_CHECK_CTYPE, [\n dnl\n dnl Check to see if this target can enable the wchar_t parts of libstdc++.\n dnl\n-dnl Define _GLIBCPP_USE_WCHAR_T if all the bits are found \n-dnl Define _GLIBCPP_NEED_MBSTATE_T if mbstate_t is not in wchar.h\n+dnl Define _GLIBCPP_USE_WCHAR_T if all the bits are found.\n+dnl Define _GLIBCPP_NEED_MBSTATE_T if mbstate_t is not in wchar.h.\n+dnl\n+dnl All of the above depends on --enable-wchar (the default).\n dnl\n dnl GLIBCPP_CHECK_WCHAR_T_SUPPORT\n AC_DEFUN(GLIBCPP_CHECK_WCHAR_T_SUPPORT, [\n \n-  dnl Sanity check for existence of ISO C9X headers for extended encoding.\n-  AC_CHECK_HEADER(wchar.h, ac_has_wchar_h=yes, ac_has_wchar_h=no)\n-  AC_CHECK_HEADER(wctype.h, ac_has_wctype_h=yes, ac_has_wctype_h=no)\n-\t\n-  dnl Only continue checking if the ISO C9X headers exist.\n-  if test x\"$ac_has_wchar_h\" = xyes && test x\"$ac_has_wctype_h\" = xyes; then\n-\n-    dnl Test wchar.h for mbstate_t, which is needed for char_traits and others.\n-    AC_MSG_CHECKING([for mbstate_t])\n-    AC_TRY_COMPILE([#include <wchar.h>],\n-    [mbstate_t teststate;], \n-    use_native_mbstatet=yes, use_native_mbstatet=no)\n-    AC_MSG_RESULT($use_native_mbstatet)\n-    if test x\"$use_native_mbstatet\" = xno; then\n-      AC_DEFINE(_GLIBCPP_NEED_MBSTATE_T)\n-    fi\n-  \n-    dnl Test wchar.h for WCHAR_MIN, WCHAR_MAX, which is needed before\n-    dnl numeric_limits can instantiate type_traits<wchar_t>\n-    AC_MSG_CHECKING([for WCHAR_MIN and WCHAR_MAX])\n-    AC_TRY_COMPILE([#include <wchar.h>],\n-    [int i = WCHAR_MIN; int j = WCHAR_MAX;], \n-    has_wchar_minmax=yes, has_wchar_minmax=no)\n-    AC_MSG_RESULT($has_wchar_minmax)\n-  \n-    dnl Test wchar.h for WEOF, which is what we use to determine whether\n-    dnl to specialize for char_traits<wchar_t> or not.\n-    AC_MSG_CHECKING([for WEOF])\n-    AC_TRY_COMPILE([\n-      #include <wchar.h>\n-      #include <stddef.h>],\n-    [wint_t i = WEOF;],\n-    has_weof=yes, has_weof=no)\n-    AC_MSG_RESULT($has_weof)\n-\n-    dnl Tests for wide character functions used in char_traits<wchar_t>.\n-    AC_CHECK_FUNCS(wcslen wmemchr wmemcmp wmemcpy wmemmove wmemset \\\n-    wcsrtombs mbsrtowcs, ac_wfuncs=yes, ac_wfuncs=no)\n-\n-    AC_MSG_CHECKING([for ISO C9X wchar_t support])\n-    if test x\"$has_weof\" = xyes && test x\"$has_wchar_minmax\" = xyes \\\n-       && test x\"$ac_wfuncs\" = xyes; then\n-      ac_isoC9X_wchar_t=yes\n-    else\n-      ac_isoC9X_wchar_t=no\n-    fi\n-    AC_MSG_RESULT($ac_isoC9X_wchar_t)\n-\n-    dnl Use iconv for wchar_t to char conversions. As such, check for \n-    dnl X/Open Portability Guide, version 2 features (XPG2).\n-    AC_CHECK_HEADER(iconv.h, ac_has_iconv_h=yes, ac_has_iconv_h=no)\n-    AC_CHECK_HEADER(langinfo.h, ac_has_langinfo_h=yes, ac_has_langinfo_h=no)\n-    AC_CHECK_FUNCS(iconv_open iconv_close iconv nl_langinfo, \\\n-    ac_XPG2funcs=yes, ac_XPG2funcs=no)\n-\n-    AC_MSG_CHECKING([for XPG2 wchar_t support])\n-    if test x\"$ac_has_iconv_h\" = xyes && test x\"$ac_has_langinfo_h\" = xyes \\\n-       && test x\"$ac_XPG2funcs\" = xyes; then\n-      ac_XPG2_wchar_t=yes\n-    else\n-      ac_XPG2_wchar_t=no\n-    fi\n-    AC_MSG_RESULT($ac_XPG2_wchar_t)\n-\n-    dnl At the moment, only enable wchar_t specializations if all the\n-    dnl above support is present.\n-    AC_MSG_CHECKING([for enabled wchar_t specializations])\n-    if test x\"$ac_isoC9X_wchar_t\" = xyes \\\n-       && test x\"$ac_XPG2_wchar_t\" = xyes; then\n-      libinst_wstring_la=\"libinst-wstring.la\"\n-      AC_DEFINE(_GLIBCPP_USE_WCHAR_T)\n-      AC_MSG_RESULT(\"yes\")\n-    else\n-      libinst_wstring_la=\"\"\n-      AC_MSG_RESULT(\"no\")\n-    fi\n-    AC_SUBST(libinst_wstring_la)\n+  AC_MSG_CHECKING([if wide character support is requested])\n+  GLIBCPP_ENABLE_WCHAR([yes])\n+  AC_MSG_RESULT($enable_wchar)\n+  if test x\"$enable_wchar\" = xyes; then\n+\n+   dnl Sanity check for existence of ISO C9X headers for extended encoding.\n+   AC_CHECK_HEADER(wchar.h, ac_has_wchar_h=yes, ac_has_wchar_h=no)\n+   AC_CHECK_HEADER(wctype.h, ac_has_wctype_h=yes, ac_has_wctype_h=no)\n+ \t\n+   dnl Only continue checking if the ISO C9X headers exist.\n+   if test x\"$ac_has_wchar_h\" = xyes && test x\"$ac_has_wctype_h\" = xyes; then\n+ \n+     dnl Test wchar.h for mbstate_t, which is needed for char_traits and others.\n+     AC_MSG_CHECKING([for mbstate_t])\n+     AC_TRY_COMPILE([#include <wchar.h>],\n+     [mbstate_t teststate;], \n+     use_native_mbstatet=yes, use_native_mbstatet=no)\n+     AC_MSG_RESULT($use_native_mbstatet)\n+     if test x\"$use_native_mbstatet\" = xno; then\n+       AC_DEFINE(_GLIBCPP_NEED_MBSTATE_T)\n+     fi\n+   \n+     dnl Test wchar.h for WCHAR_MIN, WCHAR_MAX, which is needed before\n+     dnl numeric_limits can instantiate type_traits<wchar_t>\n+     AC_MSG_CHECKING([for WCHAR_MIN and WCHAR_MAX])\n+     AC_TRY_COMPILE([#include <wchar.h>],\n+     [int i = WCHAR_MIN; int j = WCHAR_MAX;], \n+     has_wchar_minmax=yes, has_wchar_minmax=no)\n+     AC_MSG_RESULT($has_wchar_minmax)\n+   \n+     dnl Test wchar.h for WEOF, which is what we use to determine whether\n+     dnl to specialize for char_traits<wchar_t> or not.\n+     AC_MSG_CHECKING([for WEOF])\n+     AC_TRY_COMPILE([\n+       #include <wchar.h>\n+       #include <stddef.h>],\n+     [wint_t i = WEOF;],\n+     has_weof=yes, has_weof=no)\n+     AC_MSG_RESULT($has_weof)\n+ \n+     dnl Tests for wide character functions used in char_traits<wchar_t>.\n+     AC_CHECK_FUNCS(wcslen wmemchr wmemcmp wmemcpy wmemmove wmemset \\\n+     wcsrtombs mbsrtowcs, ac_wfuncs=yes, ac_wfuncs=no)\n+ \n+     AC_MSG_CHECKING([for ISO C9X wchar_t support])\n+     if test x\"$has_weof\" = xyes && test x\"$has_wchar_minmax\" = xyes \\\n+        && test x\"$ac_wfuncs\" = xyes; then\n+       ac_isoC9X_wchar_t=yes\n+     else\n+       ac_isoC9X_wchar_t=no\n+     fi\n+     AC_MSG_RESULT($ac_isoC9X_wchar_t)\n+ \n+     dnl Use iconv for wchar_t to char conversions. As such, check for \n+     dnl X/Open Portability Guide, version 2 features (XPG2).\n+     AC_CHECK_HEADER(iconv.h, ac_has_iconv_h=yes, ac_has_iconv_h=no)\n+     AC_CHECK_HEADER(langinfo.h, ac_has_langinfo_h=yes, ac_has_langinfo_h=no)\n+     AC_CHECK_FUNCS(iconv_open iconv_close iconv nl_langinfo, \\\n+     ac_XPG2funcs=yes, ac_XPG2funcs=no)\n+ \n+     AC_MSG_CHECKING([for XPG2 wchar_t support])\n+     if test x\"$ac_has_iconv_h\" = xyes && test x\"$ac_has_langinfo_h\" = xyes \\\n+        && test x\"$ac_XPG2funcs\" = xyes; then\n+       ac_XPG2_wchar_t=yes\n+     else\n+       ac_XPG2_wchar_t=no\n+     fi\n+     AC_MSG_RESULT($ac_XPG2_wchar_t)\n+ \n+     dnl At the moment, only enable wchar_t specializations if all the\n+     dnl above support is present.\n+     AC_MSG_CHECKING([for enabled wchar_t specializations])\n+     if test x\"$ac_isoC9X_wchar_t\" = xyes \\\n+        && test x\"$ac_XPG2_wchar_t\" = xyes; then\n+       libinst_wstring_la=\"libinst-wstring.la\"\n+       AC_DEFINE(_GLIBCPP_USE_WCHAR_T)\n+       AC_MSG_RESULT(\"yes\")\n+     else\n+       libinst_wstring_la=\"\"\n+       AC_MSG_RESULT(\"no\")\n+     fi\n+     AC_SUBST(libinst_wstring_la)\n+ \n+   else\n+     AC_MSG_WARN([<wchar.h> not found])\n+     AC_DEFINE(_GLIBCPP_NEED_MBSTATE_T)\n+   fi\n \n-  else\n-    AC_MSG_WARN([<wchar.h> not found])\n-    AC_DEFINE(_GLIBCPP_NEED_MBSTATE_T)\n   fi\n ])\n \n@@ -1192,6 +1203,8 @@ dnl Check for which I/O library to use:  libio, or something specific.\n dnl\n dnl GLIBCPP_ENABLE_CSTDIO\n dnl --enable-cstdio=libio sets config/c_io_libio.h and friends\n+dnl --enable-cstdio=wince sets config/c_io_wince.h and friends, but those\n+dnl                                    need to be written by somebody.\n dnl \n dnl default is libio\n dnl\n@@ -1203,11 +1216,12 @@ AC_DEFUN(GLIBCPP_ENABLE_CSTDIO, [\n   if test x$enable_cstdio = xno; then\n     enable_cstdio=libio\n   fi,\n-     enable_cstdio=libio)\n+     enable_cstdio=libio\n+  )\n \n   enable_cstdio_flag=$enable_cstdio\n \n-  dnl Check if a valid thread package\n+  dnl Check if a valid I/O package\n   case x${enable_cstdio_flag} in\n     xlibio | x | xno | xnone | xyes)\n       # default\n@@ -1224,31 +1238,31 @@ AC_DEFUN(GLIBCPP_ENABLE_CSTDIO, [\n       if test x$has_libio = x\"yes\"; then\n         case \"$target\" in\n           *-*-linux*)\n-  \t    AC_MSG_CHECKING([for glibc version >= 2.2])\n-  \t    AC_EGREP_CPP([ok], [\n-\t    #include <features.h>\n-  \t    #if __GLIBC__ > 2 || (__GLIBC__ == 2 && __GLIBC_MINOR__ >= 2) \n-    \t\tok\n-  \t    #endif\n-  \t    ], glibc_satisfactory=yes, glibc_satisfactory=no)\n-  \t    AC_MSG_RESULT($glibc_satisfactory)\n-\t    ;;\n+              AC_MSG_CHECKING([for glibc version >= 2.2])\n+              AC_EGREP_CPP([ok], [\n+            #include <features.h>\n+              #if __GLIBC__ > 2 || (__GLIBC__ == 2 && __GLIBC_MINOR__ >= 2) \n+                    ok\n+              #endif\n+              ], glibc_satisfactory=yes, glibc_satisfactory=no)\n+              AC_MSG_RESULT($glibc_satisfactory)\n+            ;;\n         esac\n \n-  \tif test x$glibc_satisfactory = x\"yes\"; then\n-\t  need_libio=no\n-\t  need_xtra_libio=no\n-      \t  need_wlibio=no\t\n-      \telse\n-\t  need_libio=yes\n-\t  need_xtra_libio=yes\n+        if test x$glibc_satisfactory = x\"yes\"; then\n+          need_libio=no\n+          need_xtra_libio=no\n+          need_wlibio=no        \n+        else\n+          need_libio=yes\n+          need_xtra_libio=yes\n           # bkoz XXX need to add checks to enable this\n           need_wlibio=yes\n-\tfi\n+        fi\n \n       # Using libio, but <libio.h> doesn't exist on the target system. . .\n       else\n-\tneed_libio=yes\n+        need_libio=yes\n         need_xtra_libio=no\n         # bkoz XXX need to add checks to enable this\n         need_wlibio=no\n@@ -1274,7 +1288,26 @@ AC_DEFUN(GLIBCPP_ENABLE_CSTDIO, [\n   CCODECVT_C=config/c_io_libio_codecvt.c\n   AC_LINK_FILES($CCODECVT_C, libio/c_codecvt.c)\n   # 2000-08-04 bkoz hack\n-\t\n+\n+  # 2000-08-22 pme kludge -- if building libio, then probably need these\n+  #   typedefs which are used in _G_config.h\n+  if test $need_libio = yes; then\n+    AC_CHECK_TYPE(__off_t,off_t)\n+    # off64_t should already be there, but just in case...\n+    AC_CHECK_TYPE(off64_t,off_t)\n+    AC_CHECK_TYPE(__off64_t,off64_t)\n+    AC_CHECK_TYPE(__ssize_t,ssize_t)\n+    AC_TRY_COMPILE([#include <sys/types.h>\n+                    #include <sys/stat.h>],\n+                   [struct stat64 s;],\n+                   , dnl Nothing need be done if it's present\n+                   [dnl Not entirely comfortable with this\n+                    AC_DEFINE(stat64,stat)\n+                   ]\n+    )\n+  fi\n+  # 2000-08-22 pme kludge\n+\n   AM_CONDITIONAL(GLIBCPP_NEED_LIBIO, test \"$need_libio\" = yes)\n   AM_CONDITIONAL(GLIBCPP_NEED_XTRA_LIBIO, test \"$need_xtra_libio\" = yes)\n   AM_CONDITIONAL(GLIBCPP_NEED_WLIBIO, test \"$need_wlibio\" = yes)\n@@ -1371,6 +1404,9 @@ AC_DEFUN(GLIBCPP_ENABLE_THREADS, [\n   AC_SUBST(THREADOBJS)\n   AC_SUBST(THREADSPEC)\n   AC_LINK_FILES(config/$THREADH, bits/c++threads.h)\n+  if test \"$THREADS\" != none; then\n+     AC_DEFINE(_GLIBCPP_USING_THREADS)\n+  fi\n ])\n \n \n@@ -1582,6 +1618,7 @@ dnl string, '#' otherwise\n   AC_SUBST(ifGNUmake)\n ])\n \n+\n sinclude(../libtool.m4)\n dnl The lines below arrange for aclocal not to bring an installed\n dnl libtool.m4 into aclocal.m4, while still arranging for automake to\n@@ -1590,4 +1627,32 @@ ifelse(,,,[AC_SUBST(LIBTOOL)\n AC_DEFUN([AM_PROG_LIBTOOL])\n AC_DEFUN([AC_LIBTOOL_DLOPEN])\n AC_DEFUN([AC_PROG_LD])\n-])\n\\ No newline at end of file\n+])\n+\n+\n+dnl\n+dnl Check whether the user wants wide character support.\n+dnl\n+dnl GLIBCPP_ENABLE_WCHAR\n+dnl --enable-wchar [does stuff].\n+dnl --disable-wchar [does not do stuff].\n+dnl  +  Usage:  GLIBCPP_ENABLE_WCHAR[(DEFAULT)]\n+dnl       Where DEFAULT is either `yes' or `no'.  If ommitted, it\n+dnl       defaults to `no'.\n+AC_DEFUN(GLIBCPP_ENABLE_WCHAR, [dnl\n+define([GLIBCPP_ENABLE_WCHAR_DEFAULT], ifelse($1, yes, yes, no))dnl\n+AC_ARG_ENABLE(wchar,\n+changequote(<<, >>)dnl\n+<<  --enable-wchar          turns on wide character support [default=>>GLIBCPP_ENABLE_WCHAR_DEFAULT],\n+changequote([, ])dnl\n+[case \"$enableval\" in\n+ yes) enable_wchar=yes ;;\n+ no)  enable_wchar=no ;;\n+ *)   AC_MSG_ERROR([Unknown argument to enable/disable wchar]) ;;\n+ esac],\n+enable_wchar=GLIBCPP_ENABLE_WCHAR_DEFAULT)dnl\n+dnl We don't set things in the external files; other configure tests will\n+dnl use $enable_wchar (\"yes\"/\"no\") for their own work.\n+])\n+\n+"}, {"sha": "1d967b095d4ed4ae6eb27923256321694b2b3eb7", "filename": "libstdc++-v3/config.h.in", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/697c2a39640d554db2843d5998329b6d6bdf3794/libstdc%2B%2B-v3%2Fconfig.h.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/697c2a39640d554db2843d5998329b6d6bdf3794/libstdc%2B%2B-v3%2Fconfig.h.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig.h.in?ref=697c2a39640d554db2843d5998329b6d6bdf3794", "patch": "@@ -3,6 +3,9 @@\n /* Define if you have a working `mmap' system call.  */\n #undef HAVE_MMAP\n \n+/* Define if you have the ANSI C header files.  */\n+#undef STDC_HEADERS\n+\n // Include support for 'long long' and 'unsigned long long'.\n #undef _GLIBCPP_USE_LONG_LONG\n \n@@ -72,6 +75,24 @@\n // Define if modf is present in <math.h>\n #undef HAVE_MODF\n \n+// Define if multiple threads are to be taken into account.\n+#undef _GLIBCPP_USING_THREADS\n+\n+// Define to some workaround if not directly available.\n+#undef off64_t\n+\n+// Define to some workaround if not directly available.\n+#undef __off_t\n+\n+// Define to some workaround if not directly available.\n+#undef __off64_t\n+\n+// Define to some workaround if not directly available.\n+#undef __ssize_t\n+\n+// Define to regular stat if not directly supported.\n+#undef stat64\n+\n /* Define if you have the _acosf function.  */\n #undef HAVE__ACOSF\n "}, {"sha": "eff9b5f8dc5de2697bfb14567b9c7ee1e44eca0d", "filename": "libstdc++-v3/configure", "status": "modified", "additions": 1488, "deletions": 1086, "changes": 2574, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/697c2a39640d554db2843d5998329b6d6bdf3794/libstdc%2B%2B-v3%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/697c2a39640d554db2843d5998329b6d6bdf3794/libstdc%2B%2B-v3%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfigure?ref=697c2a39640d554db2843d5998329b6d6bdf3794"}, {"sha": "2f394259a52312f1e7a04a6832c78c24918209f1", "filename": "libstdc++-v3/configure.in", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/697c2a39640d554db2843d5998329b6d6bdf3794/libstdc%2B%2B-v3%2Fconfigure.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/697c2a39640d554db2843d5998329b6d6bdf3794/libstdc%2B%2B-v3%2Fconfigure.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfigure.in?ref=697c2a39640d554db2843d5998329b6d6bdf3794", "patch": "@@ -28,6 +28,8 @@ AM_CONFIG_HEADER(config.h)\n GLIBCPP_CHECK_COMPILER_VERSION\n GLIBCPP_CHECK_CPU\n \n+AC_CACHE_SAVE\n+\n # Enable all the crazy c++ stuff.\n GLIBCPP_ENABLE_DEBUG\n GLIBCPP_ENABLE_CSTDIO\n@@ -116,6 +118,7 @@ else\n   GLIBCPP_CHECK_MATH_SUPPORT\n   GLIBCPP_CHECK_COMPLEX_MATH_SUPPORT\n   GLIBCPP_CHECK_COMPLEX_MATH_COMPILER_SUPPORT\n+  AC_CACHE_SAVE\n   GLIBCPP_CHECK_WCHAR_T_SUPPORT\n   GLIBCPP_CHECK_CTYPE\n "}, {"sha": "1319c4b898f339b2c2b963798ecc496369adc15d", "filename": "libstdc++-v3/libio/_G_config.h", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/697c2a39640d554db2843d5998329b6d6bdf3794/libstdc%2B%2B-v3%2Flibio%2F_G_config.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/697c2a39640d554db2843d5998329b6d6bdf3794/libstdc%2B%2B-v3%2Flibio%2F_G_config.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Flibio%2F_G_config.h?ref=697c2a39640d554db2843d5998329b6d6bdf3794", "patch": "@@ -6,11 +6,16 @@\n \n #ifndef _LIBC\n # include <bits/c++config.h>\n-# define _IO_MTSAFE_IO\n+# ifdef _GLIBCPP_USING_THREADS\n+#  define _IO_MTSAFE_IO\n+# endif\n #endif\n \n /* Define types for libio in terms of the standard internal type names.  */\n \n+#ifndef _LARGEFILE64_SOURCE\n+# define _LARGEFILE64_SOURCE\n+#endif\n #include <sys/types.h>\n #define __need_size_t\n #define __need_wchar_t"}, {"sha": "f3ef36bf6f1f4afcb7f42ac7a74d9f43d144b6c5", "filename": "libstdc++-v3/libio/libio.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/697c2a39640d554db2843d5998329b6d6bdf3794/libstdc%2B%2B-v3%2Flibio%2Flibio.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/697c2a39640d554db2843d5998329b6d6bdf3794/libstdc%2B%2B-v3%2Flibio%2Flibio.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Flibio%2Flibio.h?ref=697c2a39640d554db2843d5998329b6d6bdf3794", "patch": "@@ -164,7 +164,7 @@ struct _IO_jump_t;  struct _IO_FILE;\n /*# include <comthread.h>*/\n # endif\n #else\n-typedef void _IO_lock_t;\n+typedef void* _IO_lock_t;\n #endif\n \n "}, {"sha": "ee9cb1cf28c40cc86491bf96f18cf51b837b6809", "filename": "libstdc++-v3/mkcheck.in", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/697c2a39640d554db2843d5998329b6d6bdf3794/libstdc%2B%2B-v3%2Fmkcheck.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/697c2a39640d554db2843d5998329b6d6bdf3794/libstdc%2B%2B-v3%2Fmkcheck.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fmkcheck.in?ref=697c2a39640d554db2843d5998329b6d6bdf3794", "patch": "@@ -57,7 +57,7 @@ fi\n if [ $WHICH != \"1\" ]; then\n   INC_PATH=\"@CSHADOWFLAGS@ -I$BUILD_DIR -I$BUILD_DIR/libio -I$SRC_DIR/@ctype_include_dir@ -I$SRC_DIR/@cpu_include_dir@  -I$SRC_DIR/std -I$SRC_DIR -I$SRC_DIR/libio -I$SRC_DIR/testsuite\"\n elif [ $WHICH -eq 1 ]; then\n-  INC_PATH=\"\"\n+  INC_PATH=\"-I$SRC_DIR/testsuite\"\n fi\n \n if [ $WHICH -eq 2 ]; then"}, {"sha": "b97ee3be7c80e8fc065d2308b309ae755dc0ffc4", "filename": "libstdc++-v3/src/string-inst.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/697c2a39640d554db2843d5998329b6d6bdf3794/libstdc%2B%2B-v3%2Fsrc%2Fstring-inst.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/697c2a39640d554db2843d5998329b6d6bdf3794/libstdc%2B%2B-v3%2Fsrc%2Fstring-inst.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Fstring-inst.cc?ref=697c2a39640d554db2843d5998329b6d6bdf3794", "patch": "@@ -209,7 +209,7 @@ namespace std\n       const char* __ret = strchr(__beg, __c); \n       return (__ret ? __ret : __end);\n     }\n-#else\n+#elif defined(_GLIBCPP_USE_WCHAR_T)\n   template<>\n     const wchar_t* \n     wstring::_S_find(const wchar_t* __beg, const wchar_t* __end, wchar_t __c)"}]}