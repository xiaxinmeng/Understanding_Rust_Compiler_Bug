{"sha": "079632de497a58a78971b8fc35cf3a52148857d1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDc5NjMyZGU0OTdhNThhNzg5NzFiOGZjMzVjZjNhNTIxNDg4NTdkMQ==", "commit": {"author": {"name": "Tom Tromey", "email": "tromey@adacore.com", "date": "2020-05-29T16:46:57Z"}, "committer": {"name": "Tom Tromey", "email": "tromey@adacore.com", "date": "2020-06-03T12:19:06Z"}, "message": "Prefer simple case changes in spelling suggestions\n\nI got this error message when editing gcc and recompiling:\n\n../../gcc/gcc/ada/gcc-interface/decl.c:7714:39: error: \u2018DWARF_GNAT_ENCODINGS_all\u2019 was not declared in this scope; did you mean \u2018DWARF_GNAT_ENCODINGS_GDB\u2019?\n 7714 |     = debug_info && gnat_encodings == DWARF_GNAT_ENCODINGS_all;\n      |                                       ^~~~~~~~~~~~~~~~~~~~~~~~\n      |                                       DWARF_GNAT_ENCODINGS_GDB\n\nThis suggestion could be improved -- what happened here is that I\nfailed to upper-case the word, and DWARF_GNAT_ENCODINGS_ALL was the\ncorrect spelling.\n\nThis patch changes gcc's spell checker to prefer simple case changes\nwhen possible.\n\nI tested this using the self-tests.  A new self-test is also included.\n\ngcc/ChangeLog:\n\n\t* spellcheck.c (CASE_COST): New define.\n\t(BASE_COST): New define.\n\t(get_edit_distance): Recognize case changes.\n\t(get_edit_distance_cutoff): Update.\n\t(test_edit_distances): Update.\n\t(get_old_cutoff): Update.\n\t(test_find_closest_string): Add case sensitivity test.", "tree": {"sha": "909af8a4618bd7412f5a1274c3b39d7ab973bca9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/909af8a4618bd7412f5a1274c3b39d7ab973bca9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/079632de497a58a78971b8fc35cf3a52148857d1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/079632de497a58a78971b8fc35cf3a52148857d1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/079632de497a58a78971b8fc35cf3a52148857d1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/079632de497a58a78971b8fc35cf3a52148857d1/comments", "author": {"login": "tromey", "id": 1557670, "node_id": "MDQ6VXNlcjE1NTc2NzA=", "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tromey", "html_url": "https://github.com/tromey", "followers_url": "https://api.github.com/users/tromey/followers", "following_url": "https://api.github.com/users/tromey/following{/other_user}", "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}", "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tromey/subscriptions", "organizations_url": "https://api.github.com/users/tromey/orgs", "repos_url": "https://api.github.com/users/tromey/repos", "events_url": "https://api.github.com/users/tromey/events{/privacy}", "received_events_url": "https://api.github.com/users/tromey/received_events", "type": "User", "site_admin": false}, "committer": {"login": "tromey", "id": 1557670, "node_id": "MDQ6VXNlcjE1NTc2NzA=", "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tromey", "html_url": "https://github.com/tromey", "followers_url": "https://api.github.com/users/tromey/followers", "following_url": "https://api.github.com/users/tromey/following{/other_user}", "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}", "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tromey/subscriptions", "organizations_url": "https://api.github.com/users/tromey/orgs", "repos_url": "https://api.github.com/users/tromey/repos", "events_url": "https://api.github.com/users/tromey/events{/privacy}", "received_events_url": "https://api.github.com/users/tromey/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f05c84ac139ccd5398542369aad2b5ff3059ced4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f05c84ac139ccd5398542369aad2b5ff3059ced4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f05c84ac139ccd5398542369aad2b5ff3059ced4"}], "stats": {"total": 122, "additions": 79, "deletions": 43}, "files": [{"sha": "9f7351f364f6195ab0b062f86a72860a2dd9ec78", "filename": "gcc/spellcheck.c", "status": "modified", "additions": 79, "deletions": 43, "changes": 122, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/079632de497a58a78971b8fc35cf3a52148857d1/gcc%2Fspellcheck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/079632de497a58a78971b8fc35cf3a52148857d1/gcc%2Fspellcheck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fspellcheck.c?ref=079632de497a58a78971b8fc35cf3a52148857d1", "patch": "@@ -25,14 +25,22 @@ along with GCC; see the file COPYING3.  If not see\n #include \"spellcheck.h\"\n #include \"selftest.h\"\n \n+/* Cost of a case transformation.  */\n+#define CASE_COST 1\n+\n+/* Cost of another kind of edit.  */\n+#define BASE_COST 2\n+\n /* Get the edit distance between the two strings: the minimal\n    number of edits that are needed to change one string into another,\n    where edits can be one-character insertions, removals, or substitutions,\n    or transpositions of two adjacent characters (counting as one \"edit\").\n \n-   This implementation uses the Wagner-Fischer algorithm for the\n-   Damerau-Levenshtein distance; specifically, the \"optimal string alignment\n-   distance\" or \"restricted edit distance\" variant.  */\n+   This implementation uses a modified variant of the Wagner-Fischer\n+   algorithm for the Damerau-Levenshtein distance; specifically, the\n+   \"optimal string alignment distance\" or \"restricted edit distance\"\n+   variant.  This implementation has been further modified to take\n+   case into account.  */\n \n edit_distance_t\n get_edit_distance (const char *s, int len_s,\n@@ -47,9 +55,9 @@ get_edit_distance (const char *s, int len_s,\n     }\n \n   if (len_s == 0)\n-    return len_t;\n+    return BASE_COST * len_t;\n   if (len_t == 0)\n-    return len_s;\n+    return BASE_COST * len_s;\n \n   /* We effectively build a matrix where each (i, j) contains the\n      distance between the prefix strings s[0:j] and t[0:i].\n@@ -67,7 +75,7 @@ get_edit_distance (const char *s, int len_s,\n   /* The first row is for the case of an empty target string, which\n      we can reach by deleting every character in the source string.  */\n   for (int i = 0; i < len_s + 1; i++)\n-    v_one_ago[i] = i;\n+    v_one_ago[i] = i * BASE_COST;\n \n   /* Build successive rows.  */\n   for (int i = 0; i < len_t; i++)\n@@ -83,21 +91,28 @@ get_edit_distance (const char *s, int len_s,\n       /* The initial column is for the case of an empty source string; we\n \t can reach prefixes of the target string of length i\n \t by inserting i characters.  */\n-      v_next[0] = i + 1;\n+      v_next[0] = (i + 1) * BASE_COST;\n \n       /* Build the rest of the row by considering neighbors to\n \t the north, west and northwest.  */\n       for (int j = 0; j < len_s; j++)\n \t{\n-\t  edit_distance_t cost = (s[j] == t[i] ? 0 : 1);\n-\t  edit_distance_t deletion     = v_next[j] + 1;\n-\t  edit_distance_t insertion    = v_one_ago[j + 1] + 1;\n+\t  edit_distance_t cost;\n+\n+\t  if (s[j] == t[i])\n+\t    cost = 0;\n+\t  else if (TOLOWER (s[j]) == TOLOWER (t[i]))\n+\t    cost = CASE_COST;\n+\t  else\n+\t    cost = BASE_COST;\n+\t  edit_distance_t deletion     = v_next[j] + BASE_COST;\n+\t  edit_distance_t insertion    = v_one_ago[j + 1] + BASE_COST;\n \t  edit_distance_t substitution = v_one_ago[j] + cost;\n \t  edit_distance_t cheapest = MIN (deletion, insertion);\n \t  cheapest = MIN (cheapest, substitution);\n \t  if (i > 0 && j > 0 && s[j] == t[i - 1] && s[j - 1] == t[i])\n \t    {\n-\t      edit_distance_t transposition = v_two_ago[j - 1] + 1;\n+\t      edit_distance_t transposition = v_two_ago[j - 1] + BASE_COST;\n \t      cheapest = MIN (cheapest, transposition);\n \t    }\n \t  v_next[j + 1] = cheapest;\n@@ -185,11 +200,11 @@ get_edit_distance_cutoff (size_t goal_len, size_t candidate_len)\n   /* If the lengths are close, then round down.  */\n   if (max_length - min_length <= 1)\n     /* ...but allow an edit distance of at least 1.  */\n-    return MAX (max_length / 3, 1);\n+    return BASE_COST * MAX (max_length / 3, 1);\n \n   /* Otherwise, round up (thus giving a little extra leeway to some cases\n      involving insertions/deletions).  */\n-  return (max_length + 2) / 3;\n+  return BASE_COST * (max_length + 2) / 3;\n }\n \n #if CHECKING_P\n@@ -228,47 +243,50 @@ test_get_edit_distance_both_ways (const char *a, const char *b,\n static void\n test_edit_distances ()\n {\n-  test_get_edit_distance_both_ways (\"\", \"nonempty\", strlen (\"nonempty\"));\n-  test_get_edit_distance_both_ways (\"saturday\", \"sunday\", 3);\n-  test_get_edit_distance_both_ways (\"foo\", \"m_foo\", 2);\n-  test_get_edit_distance_both_ways (\"hello_world\", \"HelloWorld\", 3);\n+  test_get_edit_distance_both_ways (\"\", \"nonempty\",\n+\t\t\t\t    BASE_COST * strlen (\"nonempty\"));\n+  test_get_edit_distance_both_ways (\"saturday\", \"sunday\",\n+\t\t\t\t    BASE_COST * 3);\n+  test_get_edit_distance_both_ways (\"foo\", \"m_foo\", BASE_COST * 2);\n+  test_get_edit_distance_both_ways (\"hello_world\", \"HelloWorld\", 4);\n   test_get_edit_distance_both_ways\n-    (\"the quick brown fox jumps over the lazy dog\", \"dog\", 40);\n+    (\"the quick brown fox jumps over the lazy dog\", \"dog\", BASE_COST * 40);\n   test_get_edit_distance_both_ways\n     (\"the quick brown fox jumps over the lazy dog\",\n      \"the quick brown dog jumps over the lazy fox\",\n-     4);\n+     BASE_COST * 4);\n   test_get_edit_distance_both_ways\n     (\"Lorem ipsum dolor sit amet, consectetur adipiscing elit,\",\n      \"All your base are belong to us\",\n-     44);\n+     BASE_COST * 44);\n   test_get_edit_distance_both_ways (\"foo\", \"FOO\", 3);\n-  test_get_edit_distance_both_ways (\"fee\", \"deed\", 2);\n-  test_get_edit_distance_both_ways (\"coorzd1\", \"coordx1\", 2);\n-  test_get_edit_distance_both_ways (\"assert\", \"sqrt\", 3);\n-  test_get_edit_distance_both_ways (\"PATH_MAX\", \"INT8_MAX\", 3);\n-  test_get_edit_distance_both_ways (\"time\", \"nice\", 2);\n-  test_get_edit_distance_both_ways (\"bar\", \"carg\", 2);\n+  test_get_edit_distance_both_ways (\"fee\", \"deed\", BASE_COST * 2);\n+  test_get_edit_distance_both_ways (\"coorzd1\", \"coordx1\", BASE_COST * 2);\n+  test_get_edit_distance_both_ways (\"assert\", \"sqrt\", BASE_COST * 3);\n+  test_get_edit_distance_both_ways (\"PATH_MAX\", \"INT8_MAX\", BASE_COST * 3);\n+  test_get_edit_distance_both_ways (\"time\", \"nice\", BASE_COST * 2);\n+  test_get_edit_distance_both_ways (\"bar\", \"carg\", BASE_COST * 2);\n   test_get_edit_distance_both_ways (\"gtk_widget_show_all\",\n-\t\t\t\t    \"GtkWidgetShowAll\", 7);\n-  test_get_edit_distance_both_ways (\"m_bar\", \"bar\", 2);\n-  test_get_edit_distance_both_ways (\"MACRO\", \"MACRAME\", 3);\n-  test_get_edit_distance_both_ways (\"ab\", \"ac\", 1);\n-  test_get_edit_distance_both_ways (\"ab\", \"a\", 1);\n-  test_get_edit_distance_both_ways (\"a\", \"b\", 1);\n-  test_get_edit_distance_both_ways (\"nanl\", \"name\", 2);\n-  test_get_edit_distance_both_ways (\"char\", \"bar\", 2);\n-  test_get_edit_distance_both_ways (\"-optimize\", \"fsanitize\", 5);\n-  test_get_edit_distance_both_ways (\"__DATE__\", \"__i386__\", 4);\n+\t\t\t\t    \"GtkWidgetShowAll\", 10);\n+  test_get_edit_distance_both_ways (\"m_bar\", \"bar\", BASE_COST * 2);\n+  test_get_edit_distance_both_ways (\"MACRO\", \"MACRAME\", BASE_COST * 3);\n+  test_get_edit_distance_both_ways (\"ab\", \"ac\", BASE_COST * 1);\n+  test_get_edit_distance_both_ways (\"ab\", \"a\", BASE_COST * 1);\n+  test_get_edit_distance_both_ways (\"a\", \"b\", BASE_COST * 1);\n+  test_get_edit_distance_both_ways (\"nanl\", \"name\", BASE_COST * 2);\n+  test_get_edit_distance_both_ways (\"char\", \"bar\", BASE_COST * 2);\n+  test_get_edit_distance_both_ways (\"-optimize\", \"fsanitize\", BASE_COST * 5);\n+  test_get_edit_distance_both_ways (\"__DATE__\", \"__i386__\", BASE_COST * 4);\n \n   /* Examples where transposition helps.  */\n-  test_get_edit_distance_both_ways (\"ab\", \"ba\", 1);\n-  test_get_edit_distance_both_ways (\"ba\", \"abc\", 2);\n-  test_get_edit_distance_both_ways (\"coorzd1\", \"coordz1\", 1);\n+  test_get_edit_distance_both_ways (\"ab\", \"ba\", BASE_COST * 1);\n+  test_get_edit_distance_both_ways (\"ba\", \"abc\", BASE_COST * 2);\n+  test_get_edit_distance_both_ways (\"coorzd1\", \"coordz1\", BASE_COST * 1);\n   test_get_edit_distance_both_ways (\"abcdefghijklmnopqrstuvwxyz\",\n-\t\t\t\t    \"bacdefghijklmnopqrstuvwxzy\", 2);\n-  test_get_edit_distance_both_ways (\"saturday\", \"sundya\", 4);\n-  test_get_edit_distance_both_ways (\"signed\", \"singed\", 1);\n+\t\t\t\t    \"bacdefghijklmnopqrstuvwxzy\",\n+\t\t\t\t    BASE_COST * 2);\n+  test_get_edit_distance_both_ways (\"saturday\", \"sundya\", BASE_COST * 4);\n+  test_get_edit_distance_both_ways (\"signed\", \"singed\", BASE_COST * 1);\n }\n \n /* Subroutine of test_get_edit_distance_cutoff, for emulating the\n@@ -277,7 +295,7 @@ test_edit_distances ()\n static edit_distance_t\n get_old_cutoff (size_t goal_len, size_t candidate_len)\n {\n-  return MAX (goal_len, candidate_len) / 2;\n+  return BASE_COST * MAX (goal_len, candidate_len) / 2;\n }\n \n /* Verify that the cutoff for \"meaningfulness\" of suggestions is at least as\n@@ -428,6 +446,24 @@ test_find_closest_string ()\n   candidates.safe_push(\"coordy1\");\n   candidates.safe_push(\"coordz1\");\n   ASSERT_STREQ (\"coordz1\", find_closest_string (\"coorzd1\", &candidates));\n+\n+  candidates.truncate (0);\n+  candidates.safe_push (\"DWARF_GNAT_ENCODINGS_GDB\");\n+  candidates.safe_push (\"DWARF_GNAT_ENCODINGS_ALL\");\n+  candidates.safe_push (\"DWARF_GNAT_ENCODINGS_MINIMAL\");\n+  ASSERT_STREQ (\"DWARF_GNAT_ENCODINGS_ALL\",\n+\t\tfind_closest_string (\"DWARF_GNAT_ENCODINGS_all\",\n+\t\t\t\t     &candidates));\n+\n+  /* The same as the previous test, but with a different order of\n+     candidates.  */\n+  candidates.truncate (0);\n+  candidates.safe_push (\"DWARF_GNAT_ENCODINGS_ALL\");\n+  candidates.safe_push (\"DWARF_GNAT_ENCODINGS_GDB\");\n+  candidates.safe_push (\"DWARF_GNAT_ENCODINGS_MINIMAL\");\n+  ASSERT_STREQ (\"DWARF_GNAT_ENCODINGS_ALL\",\n+\t\tfind_closest_string (\"DWARF_GNAT_ENCODINGS_all\",\n+\t\t\t\t     &candidates));\n }\n \n /* Test data for test_metric_conditions.  */"}]}