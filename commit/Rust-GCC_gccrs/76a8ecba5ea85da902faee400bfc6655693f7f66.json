{"sha": "76a8ecba5ea85da902faee400bfc6655693f7f66", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzZhOGVjYmE1ZWE4NWRhOTAyZmFlZTQwMGJmYzY2NTU2OTNmN2Y2Ng==", "commit": {"author": {"name": "Gabriel Dos Reis", "email": "gdr@nerim.net", "date": "2002-07-29T23:42:26Z"}, "committer": {"name": "Gabriel Dos Reis", "email": "gdr@gcc.gnu.org", "date": "2002-07-29T23:42:26Z"}, "message": "c-pretty-print.h (struct c_pretty_print_info): Add new member.\n\n2002-07-30  Gabriel Dos Reis  <gdr@nerim.net>\n\n\t* c-pretty-print.h (struct c_pretty_print_info): Add new member.\n\t(pp_initializer): New macro.\n\t(pp_c_initializer): Declare.\n\t* c-pretty-print.c (pp_c_primary_expression): HAndle TARGET_EXPR.\n\t(pp_c_initializer): Define.\n\t(pp_c_initializer_list): New function.\n\t(pp_c_postfix_expression): Handle ABS_EXPR, COMPLEX_CST,\n\tVECTOR_CST, CONSTRUCTOR.\n\t(pp_c_unary_expression): Handle CONJ_EXPR, REALPART_EXPR,\n\tIMAGPART_EXPR.\n\t(pp_c_cast_expression): Handle FLOAT_EXPR.\n\t(pp_c_assignment_expression): Handle INIT_EXPR.\n\t(pp_c_expression): Update.\n\nFrom-SVN: r55856", "tree": {"sha": "a67eb8f135709d66336afb808605367450bbc6ac", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a67eb8f135709d66336afb808605367450bbc6ac"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/76a8ecba5ea85da902faee400bfc6655693f7f66", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/76a8ecba5ea85da902faee400bfc6655693f7f66", "html_url": "https://github.com/Rust-GCC/gccrs/commit/76a8ecba5ea85da902faee400bfc6655693f7f66", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/76a8ecba5ea85da902faee400bfc6655693f7f66/comments", "author": null, "committer": null, "parents": [{"sha": "61fd68b4c37dbc49eb5d8ab983e3f3b6bff43f1a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/61fd68b4c37dbc49eb5d8ab983e3f3b6bff43f1a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/61fd68b4c37dbc49eb5d8ab983e3f3b6bff43f1a"}], "stats": {"total": 168, "additions": 162, "deletions": 6}, "files": [{"sha": "fcf64205c171a46dd2fa6a1b0d23caea5673ad70", "filename": "gcc/ChangeLog", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/76a8ecba5ea85da902faee400bfc6655693f7f66/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/76a8ecba5ea85da902faee400bfc6655693f7f66/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=76a8ecba5ea85da902faee400bfc6655693f7f66", "patch": "@@ -1,3 +1,19 @@\n+2002-07-30  Gabriel Dos Reis  <gdr@nerim.net>\n+\n+\t* c-pretty-print.h (struct c_pretty_print_info): Add new member.\n+\t(pp_initializer): New macro.\n+\t(pp_c_initializer): Declare.\n+\t* c-pretty-print.c (pp_c_primary_expression): HAndle TARGET_EXPR.\n+\t(pp_c_initializer): Define.\n+\t(pp_c_initializer_list): New function.\n+\t(pp_c_postfix_expression): Handle ABS_EXPR, COMPLEX_CST,\n+\tVECTOR_CST, CONSTRUCTOR.\n+\t(pp_c_unary_expression): Handle CONJ_EXPR, REALPART_EXPR,\n+\tIMAGPART_EXPR. \n+\t(pp_c_cast_expression): Handle FLOAT_EXPR.\n+\t(pp_c_assignment_expression): Handle INIT_EXPR.\n+\t(pp_c_expression): Update.\n+\n 2002-07-30  Neil Booth  <neil@daikokuya.co.uk>\n \n \t* objc/objc-act.c (objc_init): Return immediately if filename"}, {"sha": "20a8003777618d0725719fda27d78764e8dfd787", "filename": "gcc/c-pretty-print.c", "status": "modified", "additions": 143, "deletions": 6, "changes": 149, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/76a8ecba5ea85da902faee400bfc6655693f7f66/gcc%2Fc-pretty-print.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/76a8ecba5ea85da902faee400bfc6655693f7f66/gcc%2Fc-pretty-print.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-pretty-print.c?ref=76a8ecba5ea85da902faee400bfc6655693f7f66", "patch": "@@ -35,6 +35,9 @@ static void pp_c_string_literal    PARAMS ((c_pretty_print_info *, tree));\n \n static void pp_c_primary_expression PARAMS ((c_pretty_print_info *, tree));\n \n+/* postfix-expression  */\n+static void pp_c_initializer_list PARAMS ((c_pretty_print_info *, tree));\n+\n static void pp_c_unary_expression PARAMS ((c_pretty_print_info *, tree));\n static void pp_c_multiplicative_expression PARAMS ((c_pretty_print_info *,\n \t\t\t\t\t\t    tree));\n@@ -316,6 +319,22 @@ pp_c_primary_expression (ppi, e)\n       pp_c_literal (ppi, e);\n       break;\n \n+    case TARGET_EXPR:\n+      pp_c_left_paren (ppi);\n+      pp_c_identifier (ppi, \"__builtin_memcpy\");\n+      pp_c_left_paren (ppi);\n+      pp_ampersand (ppi);\n+      pp_c_primary_expression (ppi, TREE_OPERAND (e, 0));\n+      pp_separate_with (ppi, ',');\n+      pp_ampersand (ppi);\n+      pp_initializer (ppi, TREE_OPERAND (e, 1));\n+      if (TREE_OPERAND (e, 2))\n+\t{\n+\t  pp_separate_with (ppi, ',');\n+\t  pp_c_expression (ppi, TREE_OPERAND (e, 2));\n+\t}\n+      pp_c_right_paren (ppi);\n+\n     default:\n       /*  Make sure this call won't cause any infinite loop. */\n       pp_c_left_paren (ppi);\n@@ -325,6 +344,65 @@ pp_c_primary_expression (ppi, e)\n     }\n }\n \n+/* Print out a C initializer -- also support C compound-literals.  */\n+void\n+pp_c_initializer (ppi, e)\n+     c_pretty_print_info *ppi;\n+     tree e;\n+{\n+  if (TREE_CODE (e) == CONSTRUCTOR)\n+    {\n+      enum tree_code code = TREE_CODE (TREE_TYPE (e));\n+      if (code == RECORD_TYPE || code == UNION_TYPE || code == ARRAY_TYPE)\n+\t{\n+\t  pp_left_brace (ppi);\n+\t  pp_c_initializer_list (ppi, e);\n+\t  pp_right_brace (ppi);\n+\t}\n+      else\n+\tpp_unsupported_tree (ppi, TREE_OPERAND (e, 1));\n+    }\n+  else\n+    pp_assignment_expression (ppi, e);\n+}\n+\n+static void\n+pp_c_initializer_list (ppi, e)\n+     c_pretty_print_info *ppi;\n+     tree e;\n+{\n+  tree type = TREE_TYPE (e);\n+  const enum tree_code code = TREE_CODE (type);\n+\n+  if (code == RECORD_TYPE || code == UNION_TYPE || code == ARRAY_TYPE)\n+    {\n+      tree init = TREE_OPERAND (e, 1);\n+      for (; init != NULL_TREE; init = TREE_CHAIN (init))\n+\t{\n+\t  if (code == RECORD_TYPE || code == UNION_TYPE)\n+\t    {\n+\t      pp_dot (ppi);\n+\t      pp_c_primary_expression (ppi, TREE_PURPOSE (init));\n+\t    }\n+\t  else\n+\t    {\n+\t      pp_c_left_bracket (ppi);\n+\t      if (TREE_PURPOSE (init))\n+\t\tpp_c_literal (ppi, TREE_PURPOSE (init));\n+\t      pp_c_right_bracket (ppi);\n+\t    }\n+\t  pp_c_whitespace (ppi);\n+\t  pp_equal (ppi);\n+\t  pp_c_whitespace (ppi);\n+\t  pp_initializer (ppi, TREE_VALUE (init));\n+\t  if (TREE_CHAIN (init))\n+\t    pp_separate_with (ppi, ',');\n+\t}\n+    }\n+  else\n+    pp_unsupported_tree (ppi, type);\n+}\n+\n void\n pp_c_postfix_expression (ppi, e)\n      c_pretty_print_info *ppi;\n@@ -353,6 +431,13 @@ pp_c_postfix_expression (ppi, e)\n       pp_c_right_paren (ppi);\n       break;\n \n+    case ABS_EXPR:\n+      pp_c_identifier (ppi, \"abs\");\n+      pp_c_left_paren (ppi);\n+      pp_c_expression (ppi, TREE_OPERAND (e, 0));\n+      pp_c_right_paren (ppi);\n+      break;\n+\n     case COMPONENT_REF:\n       {\n \ttree object = TREE_OPERAND (e, 0);\n@@ -370,10 +455,34 @@ pp_c_postfix_expression (ppi, e)\n       }\n       break;\n \n-    case CONSTRUCTOR:\n     case COMPLEX_CST:\n     case VECTOR_CST:\n-      pp_unsupported_tree (ppi, e);\n+    case COMPLEX_EXPR:\n+      pp_c_left_paren (ppi);\n+      pp_type_id (ppi, TREE_TYPE (e));\n+      pp_c_right_paren (ppi);\n+      pp_left_brace (ppi);\n+      \n+      if (code == COMPLEX_CST)\n+\t{\n+\t  pp_c_expression (ppi, TREE_REALPART (e));\n+\t  pp_separate_with (ppi, ',');\n+\t  pp_c_expression (ppi, TREE_IMAGPART (e));\n+\t}\n+      else if (code == VECTOR_CST)\n+\tpp_c_expression_list (ppi, TREE_VECTOR_CST_ELTS (e));\n+      else if (code == COMPLEX_EXPR)\n+\t{\n+\t  pp_c_expression (ppi, TREE_OPERAND (e, 0));\n+\t  pp_separate_with (ppi, ',');\n+\t  pp_c_expression (ppi, TREE_OPERAND (e, 1));\n+\t}\n+      \n+      pp_right_brace (ppi);\n+      break;\n+\n+    case CONSTRUCTOR:\n+      pp_initializer (ppi, e);\n       break;\n \n     default:\n@@ -416,13 +525,14 @@ pp_c_unary_expression (ppi, e)\n     case NEGATE_EXPR:\n     case BIT_NOT_EXPR:\n     case TRUTH_NOT_EXPR:\n+    case CONJ_EXPR:\n       if (code == ADDR_EXPR)\n \tpp_ampersand (ppi);\n       else if (code == INDIRECT_REF)\n \tpp_star (ppi);\n       else if (code == NEGATE_EXPR)\n \tpp_minus (ppi);\n-      else if (code == BIT_NOT_EXPR)\n+      else if (code == BIT_NOT_EXPR || code == CONJ_EXPR)\n \tpp_complement (ppi);\n       else if (code == TRUTH_NOT_EXPR)\n \tpp_exclamation (ppi);\n@@ -443,6 +553,13 @@ pp_c_unary_expression (ppi, e)\n \tpp_c_unary_expression (ppi, TREE_OPERAND (e, 0));\n       break;\n \n+    case REALPART_EXPR:\n+    case IMAGPART_EXPR:\n+      pp_c_identifier (ppi, code == REALPART_EXPR ? \"__real__\" : \"__imag__\");\n+      pp_c_whitespace (ppi);\n+      pp_unary_expression (ppi, TREE_OPERAND (e, 0));\n+      break;\n+      \n     default:\n       pp_postfix_expression (ppi, e);\n       break;\n@@ -454,7 +571,7 @@ pp_c_cast_expression (ppi, e)\n      c_pretty_print_info *ppi;\n      tree e;\n {\n-  if (TREE_CODE (e) == CONVERT_EXPR)\n+  if (TREE_CODE (e) == CONVERT_EXPR || TREE_CODE (e) == FLOAT_EXPR)\n     {\n       pp_c_left_paren (ppi);\n       pp_type_id (ppi, TREE_TYPE (e));\n@@ -710,7 +827,7 @@ pp_c_assignment_expression (ppi, e)\n      c_pretty_print_info *ppi;\n      tree e;\n {\n-  if (TREE_CODE (e) == MODIFY_EXPR)\n+  if (TREE_CODE (e) == MODIFY_EXPR || TREE_CODE (e) == INIT_EXPR)\n     {\n       pp_c_unary_expression (ppi, TREE_OPERAND (e, 0));\n       pp_c_maybe_whitespace (ppi);\n@@ -750,6 +867,7 @@ pp_c_expression (ppi, e)\n     case FIELD_DECL:\n     case LABEL_DECL:\n     case ERROR_MARK:\n+    case TARGET_EXPR:\n       pp_c_primary_expression (ppi, e);\n       break;\n \n@@ -758,13 +876,31 @@ pp_c_expression (ppi, e)\n     case ARRAY_REF:\n     case CALL_EXPR:\n     case COMPONENT_REF:\n-    case CONSTRUCTOR:\n     case COMPLEX_CST:\n     case VECTOR_CST:\n+    case ABS_EXPR:\n+    case CONSTRUCTOR:\n+    case COMPLEX_EXPR:\n       pp_c_postfix_expression (ppi, e);\n       break;\n \n+    case CONJ_EXPR:\n+    case ADDR_EXPR:\n+    case INDIRECT_REF:\n+    case NEGATE_EXPR:\n+    case BIT_NOT_EXPR:\n+    case TRUTH_NOT_EXPR:\n+    case PREINCREMENT_EXPR:\n+    case PREDECREMENT_EXPR:\n+    case SIZEOF_EXPR:\n+    case ALIGNOF_EXPR:\n+    case REALPART_EXPR:\n+    case IMAGPART_EXPR:\n+      pp_c_unary_expression (ppi, e);\n+      break;\n+\n     case CONVERT_EXPR:\n+    case FLOAT_EXPR:\n       pp_c_cast_expression (ppi, e);\n       break;\n \n@@ -811,6 +947,7 @@ pp_c_expression (ppi, e)\n       break;\n \n     case MODIFY_EXPR:\n+    case INIT_EXPR:\n       pp_c_assignment_expression (ppi, e);\n       break;\n "}, {"sha": "53ff32fd688344ec256128af77d53a0a09260cf2", "filename": "gcc/c-pretty-print.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/76a8ecba5ea85da902faee400bfc6655693f7f66/gcc%2Fc-pretty-print.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/76a8ecba5ea85da902faee400bfc6655693f7f66/gcc%2Fc-pretty-print.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-pretty-print.h?ref=76a8ecba5ea85da902faee400bfc6655693f7f66", "patch": "@@ -53,6 +53,7 @@ struct c_pretty_print_info\n   c_pretty_print_fn primary_expression;\n   c_pretty_print_fn postfix_expression;\n   c_pretty_print_fn unary_expression;\n+  c_pretty_print_fn initializer;\n   c_pretty_print_fn multiplicative_expression;\n   c_pretty_print_fn conditional_expression;\n   c_pretty_print_fn assignment_expression;\n@@ -115,6 +116,7 @@ struct c_pretty_print_info\n #define pp_primary_expression(PPI, E)     (*(PPI)->primary_expression) (PPI, E)\n #define pp_postfix_expression(PPI, E)     (*(PPI)->postfix_expression) (PPI, E)\n #define pp_unary_expression(PPI, E)       (*(PPI)->unary_expression) (PPI, E)\n+#define pp_initializer(PPI, E)            (*(PPI)->initializer) (PPI, E)\n #define pp_multiplicative_expression(PPI, E)\\\n    (*(PPI)->multiplicative_expression) (PPI, E)\n #define pp_conditional_expession(PPI, E)  \\\n@@ -136,4 +138,5 @@ void pp_c_logical_or_expression PARAMS ((c_pretty_print_info *, tree));\n void pp_c_expression_list PARAMS ((c_pretty_print_info *, tree));\n void pp_c_cast_expression PARAMS ((c_pretty_print_info *, tree));\n void pp_c_postfix_expression PARAMS ((c_pretty_print_info *, tree));\n+void pp_c_initializer PARAMS ((c_pretty_print_info *, tree));\n void pp_c_literal PARAMS ((c_pretty_print_info *, tree));"}]}