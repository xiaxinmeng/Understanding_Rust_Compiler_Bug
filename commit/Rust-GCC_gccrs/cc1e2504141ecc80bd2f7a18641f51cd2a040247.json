{"sha": "cc1e2504141ecc80bd2f7a18641f51cd2a040247", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Y2MxZTI1MDQxNDFlY2M4MGJkMmY3YTE4NjQxZjUxY2QyYTA0MDI0Nw==", "commit": {"author": {"name": "Paolo Carlini", "email": "paolo.carlini@oracle.com", "date": "2009-11-01T00:35:40Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2009-11-01T00:35:40Z"}, "message": "chrono (struct __common_rep_type): New.\n\n2009-10-31  Paolo Carlini  <paolo.carlini@oracle.com>\n\n\t* include/std/chrono (struct __common_rep_type): New.\n\t(duration_cast(const duration<>&),\n\tduration<>::duration(const _Rep2&),\n\tduration<>::duration(const duration<>&),\n\toperator*(const duration<>&, const _Rep2&),\n\toperator*(const _Rep1&, const duration<>&),\n\toperator/(const duration<>&, const _Rep2&),\n\ttime_point_cast(const time_point<>&)): Implement resolution of\n\tDR 1177 ([Ready] in Santa Cruz), change to not participate to\n\toverload resolution if the constraints are not met. \n\t* testsuite/20_util/duration/cons/1_neg.cc: Adjust dg-errors.\n\t* testsuite/20_util/duration/cons/dr974.cc: Likewise.\n\t* testsuite/20_util/duration/requirements/typedefs_neg1.cc: Adjust\n\tdg-error line numbers.\n\t* testsuite/20_util/duration/requirements/typedefs_neg2.cc: Likewise.\n\t* testsuite/20_util/duration/requirements/typedefs_neg3.cc: Likewise.\n\nFrom-SVN: r153787", "tree": {"sha": "8ddb01cd153663677b0905e4f55d5fe270042891", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8ddb01cd153663677b0905e4f55d5fe270042891"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/cc1e2504141ecc80bd2f7a18641f51cd2a040247", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cc1e2504141ecc80bd2f7a18641f51cd2a040247", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cc1e2504141ecc80bd2f7a18641f51cd2a040247", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cc1e2504141ecc80bd2f7a18641f51cd2a040247/comments", "author": null, "committer": null, "parents": [{"sha": "5645baec40c7355fd4b085f3b1ab526c36173176", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5645baec40c7355fd4b085f3b1ab526c36173176", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5645baec40c7355fd4b085f3b1ab526c36173176"}], "stats": {"total": 112, "additions": 64, "deletions": 48}, "files": [{"sha": "91d2a598ee5ff83aa713401e4a6b83356ff09b15", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cc1e2504141ecc80bd2f7a18641f51cd2a040247/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cc1e2504141ecc80bd2f7a18641f51cd2a040247/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=cc1e2504141ecc80bd2f7a18641f51cd2a040247", "patch": "@@ -1,3 +1,22 @@\n+2009-10-31  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+\t* include/std/chrono (struct __common_rep_type): New.\n+\t(duration_cast(const duration<>&),\n+\tduration<>::duration(const _Rep2&),\n+\tduration<>::duration(const duration<>&),\n+\toperator*(const duration<>&, const _Rep2&),\n+\toperator*(const _Rep1&, const duration<>&),\n+\toperator/(const duration<>&, const _Rep2&),\n+\ttime_point_cast(const time_point<>&)): Implement resolution of\n+\tDR 1177 ([Ready] in Santa Cruz), change to not participate to\n+\toverload resolution if the constraints are not met. \n+\t* testsuite/20_util/duration/cons/1_neg.cc: Adjust dg-errors.\n+\t* testsuite/20_util/duration/cons/dr974.cc: Likewise.\n+\t* testsuite/20_util/duration/requirements/typedefs_neg1.cc: Adjust\n+\tdg-error line numbers.\n+\t* testsuite/20_util/duration/requirements/typedefs_neg2.cc: Likewise.\n+\t* testsuite/20_util/duration/requirements/typedefs_neg3.cc: Likewise.\n+\n 2009-10-31  Gerald Pfeifer  <gerald@pfeifer.com>\n \n \t* doc/xml/manual/intro.xml: Refer to our bugs page instead of"}, {"sha": "e80ec13c09391d786b4aad2bf5a76a8c49beafe8", "filename": "libstdc++-v3/include/std/chrono", "status": "modified", "additions": 38, "deletions": 33, "changes": 71, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cc1e2504141ecc80bd2f7a18641f51cd2a040247/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fchrono", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cc1e2504141ecc80bd2f7a18641f51cd2a040247/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fchrono", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fchrono?ref=cc1e2504141ecc80bd2f7a18641f51cd2a040247", "patch": "@@ -138,9 +138,20 @@ namespace std\n           }\n       };\n \n+    template<typename _Tp>\n+      struct __is_duration\n+      : std::false_type\n+      { };\n+\n+    template<typename _Rep, typename _Period>\n+      struct __is_duration<duration<_Rep, _Period>>\n+      : std::true_type\n+      { };\n+\n     /// duration_cast\n     template<typename _ToDuration, typename _Rep, typename _Period>\n-      inline _ToDuration\n+      inline typename enable_if<__is_duration<_ToDuration>::value,\n+\t\t\t\t_ToDuration>::type\n       duration_cast(const duration<_Rep, _Period>& __d)\n       {\n         typedef typename\n@@ -175,16 +186,6 @@ namespace std\n         { return numeric_limits<_Rep>::min(); }\n       };\n \n-    template<typename _Tp>\n-      struct __is_duration\n-      : std::false_type\n-      { };\n-\n-    template<typename _Rep, typename _Period>\n-      struct __is_duration<duration<_Rep, _Period>>\n-      : std::true_type\n-      { };\n-\n     template<typename T>\n       struct __is_ratio\n       : std::false_type\n@@ -210,25 +211,19 @@ namespace std\n         // 20.8.3.1 construction / copy / destroy\n \tduration() = default;\n \n-        template<typename _Rep2>\n+        template<typename _Rep2, typename = typename\n+\t       enable_if<is_convertible<_Rep2, rep>::value\n+\t\t\t && (treat_as_floating_point<rep>::value\n+\t\t\t     || !treat_as_floating_point<_Rep2>::value)>::type>\n           explicit duration(const _Rep2& __rep)\n-          : __r(static_cast<rep>(__rep))\n-          {\n-            static_assert(is_convertible<_Rep2,rep>::value \n-\t\t\t  && (treat_as_floating_point<rep>::value \n-\t\t\t      || !treat_as_floating_point<_Rep2>::value),\n-\t      \"cannot construct integral duration with floating point type\");\n-          }\n+          : __r(static_cast<rep>(__rep)) { }\n \n-        template<typename _Rep2, typename _Period2>\n+        template<typename _Rep2, typename _Period2, typename = typename\n+\t       enable_if<treat_as_floating_point<rep>::value \n+\t\t\t || (ratio_divide<_Period2, period>::type::den == 1\n+\t\t\t     && !treat_as_floating_point<_Rep2>::value)>::type>\n           duration(const duration<_Rep2, _Period2>& __d)\n-          : __r(duration_cast<duration>(__d).count())\n-          {\n-            static_assert(treat_as_floating_point<rep>::value == true \n-\t\t\t  || (ratio_divide<_Period2, period>::type::den == 1\n-\t\t\t      && !treat_as_floating_point<_Rep2>::value), \n-              \"the resulting duration is not exactly representable\");\n-          }\n+          : __r(duration_cast<duration>(__d).count()) { }\n \n \t~duration() = default;\n \tduration(const duration&) = default;\n@@ -359,21 +354,30 @@ namespace std\n         return __ct(__lhs) -= __rhs;\n       }\n \n+    template<typename _Rep1, typename _Rep2, bool =\n+\t     is_convertible<_Rep2,\n+\t\t\t    typename common_type<_Rep1, _Rep2>::type>::value>\n+      struct __common_rep_type { };\n+\n+    template<typename _Rep1, typename _Rep2>\n+      struct __common_rep_type<_Rep1, _Rep2, true>\n+      { typedef typename common_type<_Rep1, _Rep2>::type type; };     \n+\n     template<typename _Rep1, typename _Period, typename _Rep2>\n-      inline duration<typename common_type<_Rep1, _Rep2>::type, _Period>\n+      inline duration<typename __common_rep_type<_Rep1, _Rep2>::type, _Period>\n       operator*(const duration<_Rep1, _Period>& __d, const _Rep2& __s)\n       {\n         typedef typename common_type<_Rep1, _Rep2>::type __cr;\n         return duration<__cr, _Period>(__d) *= __s;\n       }\n \n     template<typename _Rep1, typename _Period, typename _Rep2>\n-      inline duration<typename common_type<_Rep1, _Rep2>::type, _Period>\n-      operator*(const _Rep2& __s, const duration<_Rep1, _Period>& __d)\n+      inline duration<typename __common_rep_type<_Rep2, _Rep1>::type, _Period>\n+      operator*(const _Rep1& __s, const duration<_Rep2, _Period>& __d)\n       { return __d * __s; }\n  \n     template<typename _Rep1, typename _Period, typename _Rep2>\n-      inline duration<typename common_type<_Rep1, typename\n+      inline duration<typename __common_rep_type<_Rep1, typename\n \tenable_if<!__is_duration<_Rep2>::value, _Rep2>::type>::type, _Period>\n       operator/(const duration<_Rep1, _Period>& __d, const _Rep2& __s)\n       {\n@@ -394,7 +398,7 @@ namespace std\n \n     // DR 934.\n     template<typename _Rep1, typename _Period, typename _Rep2>\n-      inline duration<typename common_type<_Rep1, typename\n+      inline duration<typename __common_rep_type<_Rep1, typename\n \tenable_if<!__is_duration<_Rep2>::value, _Rep2>::type>::type, _Period>\n       operator%(const duration<_Rep1, _Period>& __d, const _Rep2& __s)\n       {\n@@ -541,7 +545,8 @@ namespace std\n   \n     /// time_point_cast\n     template<typename _ToDuration, typename _Clock, typename _Duration>\n-      inline time_point<_Clock, _ToDuration> \n+      inline typename enable_if<__is_duration<_ToDuration>::value,\n+\t\t\t\ttime_point<_Clock, _ToDuration>>::type\n       time_point_cast(const time_point<_Clock, _Duration>& __t)\n       {\n         return time_point<_Clock, _ToDuration>("}, {"sha": "56b4e4f413e5894df217964d9af1851fd96efa81", "filename": "libstdc++-v3/testsuite/20_util/duration/cons/1_neg.cc", "status": "modified", "additions": 3, "deletions": 7, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cc1e2504141ecc80bd2f7a18641f51cd2a040247/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fduration%2Fcons%2F1_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cc1e2504141ecc80bd2f7a18641f51cd2a040247/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fduration%2Fcons%2F1_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fduration%2Fcons%2F1_neg.cc?ref=cc1e2504141ecc80bd2f7a18641f51cd2a040247", "patch": "@@ -26,7 +26,7 @@\n void\n test01()\n {\n-  std::chrono::duration<int> d1(1.0);\n+  std::chrono::duration<int> d1(1.0); // { dg-error \"no matching\" }\n }\n \n void\n@@ -35,11 +35,7 @@ test02()\n   using namespace std::chrono;\n   \n   duration<int, std::micro> d2(8);\n-  duration<int, std::milli> d2_copy(d2);\n+  duration<int, std::milli> d2_copy(d2); // { dg-error \"no matching\" }\n }\n \n-// { dg-error \"instantiated from here\" \"\" { target *-*-* } 29 }\n-// { dg-error \"instantiated from here\" \"\" { target *-*-* } 38 }\n-// { dg-error \"not exactly representable\" \"\" { target *-*-* } 227 }\n-// { dg-error \"integral duration with floating point\" \"\" { target *-*-* } 217 }\n-// { dg-excess-errors \"In instantiation of\" }\n+// { dg-excess-errors \"candidates are\" }"}, {"sha": "4466d30097a2e00ae52930b90e54610a41d8ad29", "filename": "libstdc++-v3/testsuite/20_util/duration/cons/dr974.cc", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cc1e2504141ecc80bd2f7a18641f51cd2a040247/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fduration%2Fcons%2Fdr974.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cc1e2504141ecc80bd2f7a18641f51cd2a040247/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fduration%2Fcons%2Fdr974.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fduration%2Fcons%2Fdr974.cc?ref=cc1e2504141ecc80bd2f7a18641f51cd2a040247", "patch": "@@ -29,9 +29,5 @@ void test01()\n   using namespace std::chrono;\n \n   duration<double> d(3.5);\n-  duration<int> i = d;  // implicit truncation, should not compile\n+  duration<int> i = d;  // { dg-error \"conversion\" }\n }\n-\n-// { dg-error \"instantiated from here\" \"\" { target *-*-* } 32 }\n-// { dg-error \"not exactly representable\" \"\" { target *-*-* } 227 }\n-// { dg-excess-errors \"In instantiation of\" }"}, {"sha": "297b5cb690da8144308fdf7f452c57ede56f2076", "filename": "libstdc++-v3/testsuite/20_util/duration/requirements/typedefs_neg1.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cc1e2504141ecc80bd2f7a18641f51cd2a040247/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fduration%2Frequirements%2Ftypedefs_neg1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cc1e2504141ecc80bd2f7a18641f51cd2a040247/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fduration%2Frequirements%2Ftypedefs_neg1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fduration%2Frequirements%2Ftypedefs_neg1.cc?ref=cc1e2504141ecc80bd2f7a18641f51cd2a040247", "patch": "@@ -31,6 +31,6 @@ void test01()\n   test_type d;\n }\n \n-// { dg-error \"rep cannot be a duration\" \"\" { target *-*-* } 202 }\n+// { dg-error \"rep cannot be a duration\" \"\" { target *-*-* } 203 }\n // { dg-error \"instantiated from here\" \"\" { target *-*-* } 31 }\n // { dg-excess-errors \"In instantiation of\" }"}, {"sha": "b83bf494db513cbf65b41f1a28887f576ba97e06", "filename": "libstdc++-v3/testsuite/20_util/duration/requirements/typedefs_neg2.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cc1e2504141ecc80bd2f7a18641f51cd2a040247/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fduration%2Frequirements%2Ftypedefs_neg2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cc1e2504141ecc80bd2f7a18641f51cd2a040247/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fduration%2Frequirements%2Ftypedefs_neg2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fduration%2Frequirements%2Ftypedefs_neg2.cc?ref=cc1e2504141ecc80bd2f7a18641f51cd2a040247", "patch": "@@ -32,6 +32,6 @@ void test01()\n   test_type d;\n }\n \n-// { dg-error \"must be a specialization of ratio\" \"\" { target *-*-* } 203 }\n+// { dg-error \"must be a specialization of ratio\" \"\" { target *-*-* } 204 }\n // { dg-error \"instantiated from here\" \"\" { target *-*-* } 32 }\n // { dg-excess-errors \"In instantiation of\" }"}, {"sha": "b4224401d4747bfece39944aa279f9acfdf757a6", "filename": "libstdc++-v3/testsuite/20_util/duration/requirements/typedefs_neg3.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cc1e2504141ecc80bd2f7a18641f51cd2a040247/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fduration%2Frequirements%2Ftypedefs_neg3.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cc1e2504141ecc80bd2f7a18641f51cd2a040247/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fduration%2Frequirements%2Ftypedefs_neg3.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fduration%2Frequirements%2Ftypedefs_neg3.cc?ref=cc1e2504141ecc80bd2f7a18641f51cd2a040247", "patch": "@@ -33,6 +33,6 @@ void test01()\n   test_type d;\n }\n \n-// { dg-error \"period must be positive\" \"\" { target *-*-* } 205 }\n+// { dg-error \"period must be positive\" \"\" { target *-*-* } 206 }\n // { dg-error \"instantiated from here\" \"\" { target *-*-* } 33 }\n // { dg-excess-errors \"In instantiation of\" }"}]}