{"sha": "883259c6d3071d35451cd34353191565bc4cee34", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODgzMjU5YzZkMzA3MWQzNTQ1MWNkMzQzNTMxOTE1NjViYzRjZWUzNA==", "commit": {"author": {"name": "Roger Sayle", "email": "roger@eyesopen.com", "date": "2006-08-22T12:42:41Z"}, "committer": {"name": "Roger Sayle", "email": "sayle@gcc.gnu.org", "date": "2006-08-22T12:42:41Z"}, "message": "i386.c (ix86_value_regno): Don't return FIRST_MMX_REG if !TARGET_MMX...\n\n\n\t* config/i386/i386.c (ix86_value_regno): Don't return FIRST_MMX_REG\n\tif !TARGET_MMX, and don't return FIRST_SSE_REG if !TARGET_SSE.\n\nFrom-SVN: r116321", "tree": {"sha": "6e7c1102b7427b165b152c76374ec903a367ef5a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6e7c1102b7427b165b152c76374ec903a367ef5a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/883259c6d3071d35451cd34353191565bc4cee34", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/883259c6d3071d35451cd34353191565bc4cee34", "html_url": "https://github.com/Rust-GCC/gccrs/commit/883259c6d3071d35451cd34353191565bc4cee34", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/883259c6d3071d35451cd34353191565bc4cee34/comments", "author": null, "committer": null, "parents": [{"sha": "173c3aa1f43840ee822431971f3d448dea0775c6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/173c3aa1f43840ee822431971f3d448dea0775c6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/173c3aa1f43840ee822431971f3d448dea0775c6"}], "stats": {"total": 17, "additions": 12, "deletions": 5}, "files": [{"sha": "136ba9dd9d21d334716118e81da933babb5b5d07", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/883259c6d3071d35451cd34353191565bc4cee34/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/883259c6d3071d35451cd34353191565bc4cee34/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=883259c6d3071d35451cd34353191565bc4cee34", "patch": "@@ -1,3 +1,8 @@\n+2006-08-22  Roger Sayle  <roger@eyesopen.com>\n+\n+\t* config/i386/i386.c (ix86_value_regno): Don't return FIRST_MMX_REG\n+\tif !TARGET_MMX, and don't return FIRST_SSE_REG if !TARGET_SSE.\n+\n 2006-08-21  Jason Merrill  <jason@redhat.com>\n \n \tPR c++/27115"}, {"sha": "5161ddaa693ce7ba3611301a584cb59afcdab813", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/883259c6d3071d35451cd34353191565bc4cee34/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/883259c6d3071d35451cd34353191565bc4cee34/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=883259c6d3071d35451cd34353191565bc4cee34", "patch": "@@ -3980,14 +3980,16 @@ ix86_value_regno (enum machine_mode mode, tree func, tree fntype)\n   gcc_assert (!TARGET_64BIT);\n \n   /* 8-byte vector modes in %mm0. See ix86_return_in_memory for where\n-     we prevent this case when mmx is not available.  */\n-  if ((VECTOR_MODE_P (mode) && GET_MODE_SIZE (mode) == 8))\n-    return FIRST_MMX_REG;\n+     we normally prevent this case when mmx is not available.  However\n+     some ABIs may require the result to be returned like DImode.  */\n+  if (VECTOR_MODE_P (mode) && GET_MODE_SIZE (mode) == 8)\n+    return TARGET_MMX ? FIRST_MMX_REG : 0;\n \n   /* 16-byte vector modes in %xmm0.  See ix86_return_in_memory for where\n-     we prevent this case when sse is not available.  */\n+     we prevent this case when sse is not available.  However some ABIs\n+     may require the result to be returned like integer TImode.  */\n   if (mode == TImode || (VECTOR_MODE_P (mode) && GET_MODE_SIZE (mode) == 16))\n-    return FIRST_SSE_REG;\n+    return TARGET_SSE ? FIRST_SSE_REG : 0;\n \n   /* Decimal floating point values can go in %eax, unlike other float modes.  */\n   if (DECIMAL_FLOAT_MODE_P (mode))"}]}