{"sha": "71d7dc6cd09b603bcc58d5d1747a86eb498bb147", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzFkN2RjNmNkMDliNjAzYmNjNThkNWQxNzQ3YTg2ZWI0OThiYjE0Nw==", "commit": {"author": {"name": "Harald Anlauf", "email": "anlauf@gmx.de", "date": "2021-05-27T11:58:26Z"}, "committer": {"name": "Harald Anlauf", "email": "anlauf@gmx.de", "date": "2021-05-27T11:58:26Z"}, "message": "Fortran: Fix erroneous \"pointer argument is not associated\" runtime error\n\nFor CLASS arrays we need to use the CLASS data attributes to determine\nwhich runtime check to generate.\n\ngcc/fortran/ChangeLog:\n\n\tPR fortran/100602\n\t* trans-intrinsic.c (gfc_conv_intrinsic_size): Use CLASS data\n\tattributes for CLASS arrays for generation of runtime error.\n\ngcc/testsuite/ChangeLog:\n\n\tPR fortran/100602\n\t* gfortran.dg/pointer_check_14.f90: New test.", "tree": {"sha": "13bd2be3d3a67a82d3833dcdee0ced06ca7a50d6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/13bd2be3d3a67a82d3833dcdee0ced06ca7a50d6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/71d7dc6cd09b603bcc58d5d1747a86eb498bb147", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/71d7dc6cd09b603bcc58d5d1747a86eb498bb147", "html_url": "https://github.com/Rust-GCC/gccrs/commit/71d7dc6cd09b603bcc58d5d1747a86eb498bb147", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/71d7dc6cd09b603bcc58d5d1747a86eb498bb147/comments", "author": {"login": "harald-anlauf", "id": 90786862, "node_id": "MDQ6VXNlcjkwNzg2ODYy", "avatar_url": "https://avatars.githubusercontent.com/u/90786862?v=4", "gravatar_id": "", "url": "https://api.github.com/users/harald-anlauf", "html_url": "https://github.com/harald-anlauf", "followers_url": "https://api.github.com/users/harald-anlauf/followers", "following_url": "https://api.github.com/users/harald-anlauf/following{/other_user}", "gists_url": "https://api.github.com/users/harald-anlauf/gists{/gist_id}", "starred_url": "https://api.github.com/users/harald-anlauf/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/harald-anlauf/subscriptions", "organizations_url": "https://api.github.com/users/harald-anlauf/orgs", "repos_url": "https://api.github.com/users/harald-anlauf/repos", "events_url": "https://api.github.com/users/harald-anlauf/events{/privacy}", "received_events_url": "https://api.github.com/users/harald-anlauf/received_events", "type": "User", "site_admin": false}, "committer": {"login": "harald-anlauf", "id": 90786862, "node_id": "MDQ6VXNlcjkwNzg2ODYy", "avatar_url": "https://avatars.githubusercontent.com/u/90786862?v=4", "gravatar_id": "", "url": "https://api.github.com/users/harald-anlauf", "html_url": "https://github.com/harald-anlauf", "followers_url": "https://api.github.com/users/harald-anlauf/followers", "following_url": "https://api.github.com/users/harald-anlauf/following{/other_user}", "gists_url": "https://api.github.com/users/harald-anlauf/gists{/gist_id}", "starred_url": "https://api.github.com/users/harald-anlauf/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/harald-anlauf/subscriptions", "organizations_url": "https://api.github.com/users/harald-anlauf/orgs", "repos_url": "https://api.github.com/users/harald-anlauf/repos", "events_url": "https://api.github.com/users/harald-anlauf/events{/privacy}", "received_events_url": "https://api.github.com/users/harald-anlauf/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9d3a953ec4d2695e9a6bfa5f22655e2aea47a973", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9d3a953ec4d2695e9a6bfa5f22655e2aea47a973", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9d3a953ec4d2695e9a6bfa5f22655e2aea47a973"}], "stats": {"total": 37, "additions": 36, "deletions": 1}, "files": [{"sha": "98fa28d28c4219d7bcbd4ac67bbe3b5249948524", "filename": "gcc/fortran/trans-intrinsic.c", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/71d7dc6cd09b603bcc58d5d1747a86eb498bb147/gcc%2Ffortran%2Ftrans-intrinsic.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/71d7dc6cd09b603bcc58d5d1747a86eb498bb147/gcc%2Ffortran%2Ftrans-intrinsic.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-intrinsic.c?ref=71d7dc6cd09b603bcc58d5d1747a86eb498bb147", "patch": "@@ -8004,7 +8004,14 @@ gfc_conv_intrinsic_size (gfc_se * se, gfc_expr * expr)\n       tree temp;\n       tree cond;\n \n-      attr = sym ? sym->attr : gfc_expr_attr (e);\n+      if (e->symtree->n.sym && IS_CLASS_ARRAY (e->symtree->n.sym))\n+\t{\n+\t  attr = CLASS_DATA (e->symtree->n.sym)->attr;\n+\t  attr.pointer = attr.class_pointer;\n+\t}\n+      else\n+\tattr = gfc_expr_attr (e);\n+\n       if (attr.allocatable)\n \tmsg = xasprintf (\"Allocatable argument '%s' is not allocated\",\n \t\t\t e->symtree->n.sym->name);"}, {"sha": "8ef6b3611fa65d8d7fa2ea81769cc932f6f82243", "filename": "gcc/testsuite/gfortran.dg/pointer_check_14.f90", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/71d7dc6cd09b603bcc58d5d1747a86eb498bb147/gcc%2Ftestsuite%2Fgfortran.dg%2Fpointer_check_14.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/71d7dc6cd09b603bcc58d5d1747a86eb498bb147/gcc%2Ftestsuite%2Fgfortran.dg%2Fpointer_check_14.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fpointer_check_14.f90?ref=71d7dc6cd09b603bcc58d5d1747a86eb498bb147", "patch": "@@ -0,0 +1,28 @@\n+! { dg-do run }\n+! { dg-options \"-fcheck=pointer -fdump-tree-original\" }\n+! PR100602 - Erroneous \"pointer argument is not associated\" runtime error\n+\n+module m\n+  type :: T\n+  end type\n+contains\n+  subroutine f(this)\n+    class(T), intent(in)  :: this(:)\n+    class(T), allocatable :: ca(:)\n+    class(T), pointer     :: cp(:)\n+    if (size (this) == 0) return\n+    write(*,*) size (this)\n+    stop 1\n+    write(*,*) size (ca) ! Check #1\n+    write(*,*) size (cp) ! Check #2\n+  end subroutine f\n+end module\n+\n+program main\n+  use m\n+  call f([T::])\n+end program\n+\n+! { dg-final { scan-tree-dump-times \"_gfortran_runtime_error_at\" 2 \"original\" } }\n+! { dg-final { scan-tree-dump-times \"Allocatable argument .*ca\" 1 \"original\" } }\n+! { dg-final { scan-tree-dump-times \"Pointer argument .*cp\" 1 \"original\" } }"}]}