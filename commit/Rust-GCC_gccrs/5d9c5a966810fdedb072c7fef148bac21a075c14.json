{"sha": "5d9c5a966810fdedb072c7fef148bac21a075c14", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWQ5YzVhOTY2ODEwZmRlZGIwNzJjN2ZlZjE0OGJhYzIxYTA3NWMxNA==", "commit": {"author": {"name": "William Schmidt", "email": "wschmidt@gcc.gnu.org", "date": "2018-10-21T23:30:51Z"}, "committer": {"name": "William Schmidt", "email": "wschmidt@gcc.gnu.org", "date": "2018-10-21T23:30:51Z"}, "message": "emmintrin.h (_mm_movemask_pd): Replace __vector __m64 with __vector unsigned long long for compatibility.\n\n2018-10-21  Bill Schmidt  <wschmidt@linux.ibm.com>\n\t    Jinsong Ji  <jji@us.ibm.com>\n\n\t* config/rs6000/emmintrin.h (_mm_movemask_pd): Replace __vector\n\t__m64 with __vector unsigned long long for compatibility.\n\t(_mm_movemask_epi8): Likewise.\n\t* config/rs6000/xmmintrin.h (_mm_cvtps_pi32): Likewise.\n\t(_mm_cvttps_pi32): Likewise.\n\t(_mm_cvtpi32_ps): Likewise.\n\t(_mm_cvtps_pi16): Likewise.\n\t(_mm_loadh_pi): Likewise.\n\t(_mm_storeh_pi): Likewise.\n\t(_mm_movehl_ps): Likewise.\n\t(_mm_movelh_ps): Likewise.\n\t(_mm_loadl_pi): Likewise.\n\t(_mm_storel_pi): Likewise.\n\t(_mm_movemask_ps): Likewise.\n\t(_mm_shuffle_pi16): Likewise.\n\nFrom-SVN: r265362", "tree": {"sha": "02bb2e4f09c9e0f8c499f45bd5b54cef1b3ed2b7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/02bb2e4f09c9e0f8c499f45bd5b54cef1b3ed2b7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5d9c5a966810fdedb072c7fef148bac21a075c14", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5d9c5a966810fdedb072c7fef148bac21a075c14", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5d9c5a966810fdedb072c7fef148bac21a075c14", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5d9c5a966810fdedb072c7fef148bac21a075c14/comments", "author": null, "committer": null, "parents": [{"sha": "9d165ca698cc8c75306e4e99044274775fb04033", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9d165ca698cc8c75306e4e99044274775fb04033", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9d165ca698cc8c75306e4e99044274775fb04033"}], "stats": {"total": 58, "additions": 32, "deletions": 26}, "files": [{"sha": "bae3f13ab2d99f753be0737556b1a79c56eab37d", "filename": "gcc/config/rs6000/emmintrin.h", "status": "modified", "additions": 8, "deletions": 6, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5d9c5a966810fdedb072c7fef148bac21a075c14/gcc%2Fconfig%2Frs6000%2Femmintrin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5d9c5a966810fdedb072c7fef148bac21a075c14/gcc%2Fconfig%2Frs6000%2Femmintrin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Femmintrin.h?ref=5d9c5a966810fdedb072c7fef148bac21a075c14", "patch": "@@ -1228,7 +1228,7 @@ _mm_loadl_pd (__m128d __A, double const *__B)\n extern __inline int __attribute__((__gnu_inline__, __always_inline__, __artificial__))\n _mm_movemask_pd (__m128d  __A)\n {\n-  __vector __m64 result;\n+  __vector unsigned long long result;\n   static const __vector unsigned int perm_mask =\n     {\n #ifdef __LITTLE_ENDIAN__\n@@ -1238,8 +1238,9 @@ _mm_movemask_pd (__m128d  __A)\n #endif\n     };\n \n-  result = (__vector __m64) vec_vbpermq ((__vector unsigned char) __A,\n-\t\t\t\t\t (__vector unsigned char) perm_mask);\n+  result = ((__vector unsigned long long)\n+\t    vec_vbpermq ((__vector unsigned char) __A,\n+\t\t\t (__vector unsigned char) perm_mask));\n \n #ifdef __LITTLE_ENDIAN__\n   return result[1];\n@@ -2012,7 +2013,7 @@ _mm_min_epu8 (__m128i __A, __m128i __B)\n extern __inline int __attribute__((__gnu_inline__, __always_inline__, __artificial__))\n _mm_movemask_epi8 (__m128i __A)\n {\n-  __vector __m64 result;\n+  __vector unsigned long long result;\n   static const __vector unsigned char perm_mask =\n     {\n #ifdef __LITTLE_ENDIAN__\n@@ -2024,8 +2025,9 @@ _mm_movemask_epi8 (__m128i __A)\n #endif\n     };\n \n-  result = (__vector __m64) vec_vbpermq ((__vector unsigned char) __A,\n-\t\t\t\t\t (__vector unsigned char) perm_mask);\n+  result = ((__vector unsigned long long)\n+\t    vec_vbpermq ((__vector unsigned char) __A,\n+\t\t\t (__vector unsigned char) perm_mask));\n \n #ifdef __LITTLE_ENDIAN__\n   return result[1];"}, {"sha": "742b8a8f6613f1e7a9f5adb174eb96fc25dc08ab", "filename": "gcc/config/rs6000/xmmintrin.h", "status": "modified", "additions": 24, "deletions": 20, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5d9c5a966810fdedb072c7fef148bac21a075c14/gcc%2Fconfig%2Frs6000%2Fxmmintrin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5d9c5a966810fdedb072c7fef148bac21a075c14/gcc%2Fconfig%2Frs6000%2Fxmmintrin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Fxmmintrin.h?ref=5d9c5a966810fdedb072c7fef148bac21a075c14", "patch": "@@ -985,12 +985,12 @@ _mm_cvtps_pi32 (__m128 __A)\n {\n   /* Splat two lower SPFP values to both halves.  */\n   __v4sf temp, rounded;\n-  __vector __m64 result;\n+  __vector unsigned long long result;\n \n   /* Splat two lower SPFP values to both halves.  */\n   temp = (__v4sf) vec_splat ((__vector long long)__A, 0);\n   rounded = vec_rint(temp);\n-  result = (__vector __m64) vec_cts (rounded, 0);\n+  result = (__vector unsigned long long) vec_cts (rounded, 0);\n \n   return ((__m64) __builtin_unpack_vector_int128 ((__vector __int128)result, 0));\n }\n@@ -1043,11 +1043,11 @@ extern __inline __m64 __attribute__((__gnu_inline__, __always_inline__, __artifi\n _mm_cvttps_pi32 (__m128 __A)\n {\n   __v4sf temp;\n-  __vector __m64 result;\n+  __vector unsigned long long result;\n \n   /* Splat two lower SPFP values to both halves.  */\n   temp = (__v4sf) vec_splat ((__vector long long)__A, 0);\n-  result = (__vector __m64) vec_cts (temp, 0);\n+  result = (__vector unsigned long long) vec_cts (temp, 0);\n \n   return ((__m64) __builtin_unpack_vector_int128 ((__vector __int128)result, 0));\n }\n@@ -1103,8 +1103,9 @@ _mm_cvtpi32_ps (__m128        __A, __m64        __B)\n   vm1 = (__vector signed int) __builtin_pack_vector_int128 (__B, __B);\n   vf1 = (__vector float) vec_ctf (vm1, 0);\n \n-  return ((__m128) (__vector __m64)\n-    { ((__vector __m64)vf1) [0], ((__vector __m64)__A) [1]});\n+  return ((__m128) (__vector unsigned long long)\n+    { ((__vector unsigned long long)vf1) [0],\n+\t((__vector unsigned long long)__A) [1]});\n }\n \n extern __inline __m128 __attribute__((__gnu_inline__, __always_inline__, __artificial__))\n@@ -1201,11 +1202,11 @@ _mm_cvtps_pi16(__m128 __A)\n {\n   __v4sf rounded;\n   __vector signed int temp;\n-  __vector __m64 result;\n+  __vector unsigned long long result;\n \n   rounded = vec_rint(__A);\n   temp = vec_cts (rounded, 0);\n-  result = (__vector __m64) vec_pack (temp, temp);\n+  result = (__vector unsigned long long) vec_pack (temp, temp);\n \n   return ((__m64) __builtin_unpack_vector_int128 ((__vector __int128)result, 0));\n }\n@@ -1282,8 +1283,8 @@ _mm_unpacklo_ps (__m128 __A, __m128 __B)\n extern __inline __m128 __attribute__((__gnu_inline__, __always_inline__, __artificial__))\n _mm_loadh_pi (__m128 __A, __m64 const *__P)\n {\n-  __vector __m64 __a = (__vector __m64)__A;\n-  __vector __m64 __p = vec_splats(*__P);\n+  __vector unsigned long long __a = (__vector unsigned long long)__A;\n+  __vector unsigned long long __p = vec_splats(*__P);\n   __a [1] = __p [1];\n \n   return (__m128)__a;\n@@ -1293,7 +1294,7 @@ _mm_loadh_pi (__m128 __A, __m64 const *__P)\n extern __inline void __attribute__((__gnu_inline__, __always_inline__, __artificial__))\n _mm_storeh_pi (__m64 *__P, __m128 __A)\n {\n-  __vector __m64 __a = (__vector __m64) __A;\n+  __vector unsigned long long __a = (__vector unsigned long long) __A;\n \n   *__P = __a[1];\n }\n@@ -1302,23 +1303,25 @@ _mm_storeh_pi (__m64 *__P, __m128 __A)\n extern __inline __m128 __attribute__((__gnu_inline__, __always_inline__, __artificial__))\n _mm_movehl_ps (__m128 __A, __m128 __B)\n {\n-  return (__m128) vec_mergel ((__vector __m64)__B, (__vector __m64)__A);\n+  return (__m128) vec_mergel ((__vector unsigned long long)__B,\n+\t\t\t      (__vector unsigned long long)__A);\n }\n \n /* Moves the lower two values of B into the upper two values of A.  */\n extern __inline __m128 __attribute__((__gnu_inline__, __always_inline__, __artificial__))\n _mm_movelh_ps (__m128 __A, __m128 __B)\n {\n-  return (__m128) vec_mergeh ((__vector __m64)__A, (__vector __m64)__B);\n+  return (__m128) vec_mergeh ((__vector unsigned long long)__A,\n+\t\t\t      (__vector unsigned long long)__B);\n }\n \n /* Sets the lower two SPFP values with 64-bits of data loaded from P;\n    the upper two values are passed through from A.  */\n extern __inline __m128 __attribute__((__gnu_inline__, __always_inline__, __artificial__))\n _mm_loadl_pi (__m128 __A, __m64 const *__P)\n {\n-  __vector __m64 __a = (__vector __m64)__A;\n-  __vector __m64 __p = vec_splats(*__P);\n+  __vector unsigned long long __a = (__vector unsigned long long)__A;\n+  __vector unsigned long long __p = vec_splats(*__P);\n   __a [0] = __p [0];\n \n   return (__m128)__a;\n@@ -1328,7 +1331,7 @@ _mm_loadl_pi (__m128 __A, __m64 const *__P)\n extern __inline void __attribute__((__gnu_inline__, __always_inline__, __artificial__))\n _mm_storel_pi (__m64 *__P, __m128 __A)\n {\n-  __vector __m64 __a = (__vector __m64) __A;\n+  __vector unsigned long long __a = (__vector unsigned long long) __A;\n \n   *__P = __a[0];\n }\n@@ -1340,7 +1343,7 @@ _mm_storel_pi (__m64 *__P, __m128 __A)\n extern __inline int __attribute__((__gnu_inline__, __always_inline__, __artificial__))\n _mm_movemask_ps (__m128  __A)\n {\n-  __vector __m64 result;\n+  __vector unsigned long long result;\n   static const __vector unsigned int perm_mask =\n     {\n #ifdef __LITTLE_ENDIAN__\n@@ -1350,8 +1353,9 @@ _mm_movemask_ps (__m128  __A)\n #endif\n     };\n \n-  result = (__vector __m64) vec_vbpermq ((__vector unsigned char) __A,\n-\t\t\t\t\t (__vector unsigned char) perm_mask);\n+  result = ((__vector unsigned long long)\n+\t    vec_vbpermq ((__vector unsigned char) __A,\n+\t\t\t (__vector unsigned char) perm_mask));\n \n #ifdef __LITTLE_ENDIAN__\n   return result[1];\n@@ -1619,7 +1623,7 @@ _mm_shuffle_pi16 (__m64 __A, int const __N)\n #endif\n     };\n   __m64_union t;\n-  __vector __m64 a, p, r;\n+  __vector unsigned long long a, p, r;\n \n #ifdef __LITTLE_ENDIAN__\n   t.as_short[0] = permute_selectors[element_selector_10];"}]}