{"sha": "4a7da9b55397ecac9f71f3b4f3020ba242ee385c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NGE3ZGE5YjU1Mzk3ZWNhYzlmNzFmM2I0ZjMwMjBiYTI0MmVlMzg1Yw==", "commit": {"author": {"name": "Michael Hayes", "email": "mhayes@cygnus.com", "date": "2000-10-18T10:10:38Z"}, "committer": {"name": "Michael Hayes", "email": "m.hayes@gcc.gnu.org", "date": "2000-10-18T10:10:38Z"}, "message": "basic-block.h (struct loop): Delete fields pre_header_root and pre_header_trace and replace with...\n\n\t* basic-block.h (struct loop): Delete fields pre_header_root\n\tand pre_header_trace and replace with pre_header_edges\n\tand num_pre_header_edges.\n\t* flow.c (flow_loop_dump): Dump pre_header_edges.\n\t(flow_loops_free): Free pre_header_edges.\n\t(flow_loop_pre_header_scan): Calculate pre_header_edges.\n\nFrom-SVN: r36934", "tree": {"sha": "272f90028f7da21af93c7b1200feddb5dd5c0ecb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/272f90028f7da21af93c7b1200feddb5dd5c0ecb"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4a7da9b55397ecac9f71f3b4f3020ba242ee385c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4a7da9b55397ecac9f71f3b4f3020ba242ee385c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4a7da9b55397ecac9f71f3b4f3020ba242ee385c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4a7da9b55397ecac9f71f3b4f3020ba242ee385c/comments", "author": null, "committer": null, "parents": [{"sha": "42c10750911b52ea95101f93eb29803c9064a420", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/42c10750911b52ea95101f93eb29803c9064a420", "html_url": "https://github.com/Rust-GCC/gccrs/commit/42c10750911b52ea95101f93eb29803c9064a420"}], "stats": {"total": 67, "additions": 44, "deletions": 23}, "files": [{"sha": "1345e5fb510fefcd9d46f3d4592c275547f2f037", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4a7da9b55397ecac9f71f3b4f3020ba242ee385c/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4a7da9b55397ecac9f71f3b4f3020ba242ee385c/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=4a7da9b55397ecac9f71f3b4f3020ba242ee385c", "patch": "@@ -1,3 +1,12 @@\n+2000-10-18  Michael Hayes  <mhayes@cygnus.com>\n+\n+\t* basic-block.h (struct loop): Delete fields pre_header_root\n+\tand pre_header_trace and replace with pre_header_edges\n+\tand num_pre_header_edges.\n+\t* flow.c (flow_loop_dump): Dump pre_header_edges.\n+\t(flow_loops_free): Free pre_header_edges.\n+\t(flow_loop_pre_header_scan): Calculate pre_header_edges.\n+\n 2000-10-18  Gerald Pfeifer  <pfeifer@dbai.tuwien.ac.at>\n \n \t* contrib.texi: Update references to steering committee members"}, {"sha": "04177ebbda22a16d5e3d63d01778298cb93c205f", "filename": "gcc/basic-block.h", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4a7da9b55397ecac9f71f3b4f3020ba242ee385c/gcc%2Fbasic-block.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4a7da9b55397ecac9f71f3b4f3020ba242ee385c/gcc%2Fbasic-block.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbasic-block.h?ref=4a7da9b55397ecac9f71f3b4f3020ba242ee385c", "patch": "@@ -276,11 +276,13 @@ struct loop\n   /* Basic block of loop pre-header or NULL if it does not exist.  */\n   basic_block pre_header;\n \n-  /* Root node of pre_header extended basic block.  */\n-  basic_block pre_header_root;\n+  /* Array of edges along the pre-header extended basic block trace. \n+     The source of the first edge is the root node of pre-header\n+     extended basic block, if it exists.  */\n+  edge *pre_header_edges;\n \n-  /* Bitmap of blocks of trace from pre_header root to pre_header.  */\n-  sbitmap pre_header_trace;\n+  /* Number of edges along the pre_header extended basic block trace.  */\n+  int num_pre_header_edges;\n \n   /* The first block in the loop.  This is not necessarily the same as\n      the loop header.  */"}, {"sha": "d286f91e2b3465695012a9bb1e6dceda3ffa8579", "filename": "gcc/flow.c", "status": "modified", "additions": 29, "deletions": 19, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4a7da9b55397ecac9f71f3b4f3020ba242ee385c/gcc%2Fflow.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4a7da9b55397ecac9f71f3b4f3020ba242ee385c/gcc%2Fflow.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fflow.c?ref=4a7da9b55397ecac9f71f3b4f3020ba242ee385c", "patch": "@@ -7409,12 +7409,9 @@ flow_loop_dump (loop, file, loop_dump_aux, verbose)\n \t   loop->depth, loop->level,\n \t   (long) (loop->outer ? loop->outer->num : -1));\n \n-  if (loop->pre_header_root)\n-    fprintf (file, \";;  pre-header root %d\\n\", \n-\t     loop->pre_header_root->index);\n-  if (loop->pre_header_trace)\n-    flow_nodes_print (\";;  pre-header trace\", loop->pre_header_trace,\n-\t\t      file);\n+  if (loop->pre_header_edges)\n+    flow_edge_list_print (\";;  pre-header edges\", loop->pre_header_edges,\n+\t\t\t  loop->num_pre_header_edges, file);\n   flow_edge_list_print (\";;  entry edges\", loop->entry_edges,\n \t\t\tloop->num_entries, file);\n   fprintf (file, \";;  %d\", loop->num_nodes);\n@@ -7505,8 +7502,8 @@ flow_loops_free (loops)\n \t{\n \t  struct loop *loop = &loops->array[i];\n \n-\t  if (loop->pre_header_trace)\n-\t    sbitmap_free (loop->pre_header_trace);\n+\t  if (loop->pre_header_edges)\n+\t    free (loop->pre_header_edges);\n \t  if (loop->nodes)\n \t    sbitmap_free (loop->nodes);\n \t  if (loop->entry_edges)\n@@ -7888,35 +7885,48 @@ flow_dfs_compute_reverse_finish (data)\n \n \n /* Find the root node of the loop pre-header extended basic block and\n-   the blocks along the trace from the root node to the loop header.  */\n+   the edges along the trace from the root node to the loop header.  */\n \n static void\n flow_loop_pre_header_scan (loop)\n      struct loop *loop;\n {\n+  int num = 0;\n   basic_block ebb;\n \n+  loop->num_pre_header_edges = 0;\n+\n   if (loop->num_entries != 1)\n      return;\n \n-  /* Find pre_header root note and trace from root node to pre_header.  */\n-  loop->pre_header_trace = sbitmap_alloc (n_basic_blocks);\n-  sbitmap_zero (loop->pre_header_trace);\n-  \n   ebb = loop->entry_edges[0]->src;\n \n   if (ebb != ENTRY_BLOCK_PTR)\n     {\n-      SET_BIT (loop->pre_header_trace, ebb->index);\n-      while (ebb->pred->src != ENTRY_BLOCK_PTR\n-\t     && ! ebb->pred->pred_next)\n+      edge e;\n+\n+      /* Count number of edges along trace from loop header to\n+\t root of pre-header extended basic block.  Usually this is\n+\t only one or two edges. */\n+      num++;\n+      while (ebb->pred->src != ENTRY_BLOCK_PTR && ! ebb->pred->pred_next)\n \t{\n \t  ebb = ebb->pred->src;\n-\t  SET_BIT (loop->pre_header_trace, ebb->index);\n+\t  num++;\n+\t}\n+\n+      loop->pre_header_edges = (edge *) xmalloc (num * sizeof (edge *));\n+      loop->num_pre_header_edges = num;\n+\n+      /* Store edges in order that they are followed.   The source\n+\t of the first edge is the root node of the pre-header extended\n+\t basic block and the destination of the last last edge is\n+\t the loop header.  */\n+      for (e = loop->entry_edges[0]; num; e = e->src->pred)\n+\t{\n+\t  loop->pre_header_edges[--num] = e;\n \t}\n     }\n-  \n-  loop->pre_header_root = ebb;\n }\n \n "}]}