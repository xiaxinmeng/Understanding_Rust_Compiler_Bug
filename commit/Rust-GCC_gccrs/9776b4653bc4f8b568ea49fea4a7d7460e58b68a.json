{"sha": "9776b4653bc4f8b568ea49fea4a7d7460e58b68a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTc3NmI0NjUzYmM0ZjhiNTY4ZWE0OWZlYTRhN2Q3NDYwZTU4YjY4YQ==", "commit": {"author": {"name": "Ilya Leoshkevich", "email": "iii@linux.ibm.com", "date": "2020-11-26T01:16:17Z"}, "committer": {"name": "Ilya Leoshkevich", "email": "iii@linux.ibm.com", "date": "2020-12-02T18:10:34Z"}, "message": "IBM Z: Use llihf and oilf to load large immediates into GPRs\n\nCurrently GCC loads large immediates into GPRs from the literal pool,\nwhich is not as efficient as loading two halves with llihf and oilf.\n\ngcc/ChangeLog:\n\n2020-11-30  Ilya Leoshkevich  <iii@linux.ibm.com>\n\n\t* config/s390/s390-protos.h (s390_const_int_pool_entry_p): New\n\tfunction.\n\t* config/s390/s390.c (s390_const_int_pool_entry_p): New\n\tfunction.\n\t* config/s390/s390.md: Add define_peephole2 that produces llihf\n\tand oilf.\n\ngcc/testsuite/ChangeLog:\n\n2020-11-30  Ilya Leoshkevich  <iii@linux.ibm.com>\n\n\t* gcc.target/s390/load-imm64-1.c: New test.\n\t* gcc.target/s390/load-imm64-2.c: New test.", "tree": {"sha": "1e8b52acac44cb703e3ac313aee0f255c0bcb810", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1e8b52acac44cb703e3ac313aee0f255c0bcb810"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9776b4653bc4f8b568ea49fea4a7d7460e58b68a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9776b4653bc4f8b568ea49fea4a7d7460e58b68a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9776b4653bc4f8b568ea49fea4a7d7460e58b68a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9776b4653bc4f8b568ea49fea4a7d7460e58b68a/comments", "author": {"login": "iii-i", "id": 45998171, "node_id": "MDQ6VXNlcjQ1OTk4MTcx", "avatar_url": "https://avatars.githubusercontent.com/u/45998171?v=4", "gravatar_id": "", "url": "https://api.github.com/users/iii-i", "html_url": "https://github.com/iii-i", "followers_url": "https://api.github.com/users/iii-i/followers", "following_url": "https://api.github.com/users/iii-i/following{/other_user}", "gists_url": "https://api.github.com/users/iii-i/gists{/gist_id}", "starred_url": "https://api.github.com/users/iii-i/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/iii-i/subscriptions", "organizations_url": "https://api.github.com/users/iii-i/orgs", "repos_url": "https://api.github.com/users/iii-i/repos", "events_url": "https://api.github.com/users/iii-i/events{/privacy}", "received_events_url": "https://api.github.com/users/iii-i/received_events", "type": "User", "site_admin": false}, "committer": {"login": "iii-i", "id": 45998171, "node_id": "MDQ6VXNlcjQ1OTk4MTcx", "avatar_url": "https://avatars.githubusercontent.com/u/45998171?v=4", "gravatar_id": "", "url": "https://api.github.com/users/iii-i", "html_url": "https://github.com/iii-i", "followers_url": "https://api.github.com/users/iii-i/followers", "following_url": "https://api.github.com/users/iii-i/following{/other_user}", "gists_url": "https://api.github.com/users/iii-i/gists{/gist_id}", "starred_url": "https://api.github.com/users/iii-i/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/iii-i/subscriptions", "organizations_url": "https://api.github.com/users/iii-i/orgs", "repos_url": "https://api.github.com/users/iii-i/repos", "events_url": "https://api.github.com/users/iii-i/events{/privacy}", "received_events_url": "https://api.github.com/users/iii-i/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cf4425558359e7a6b0ba4d953b85384e1c686260", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cf4425558359e7a6b0ba4d953b85384e1c686260", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cf4425558359e7a6b0ba4d953b85384e1c686260"}], "stats": {"total": 83, "additions": 83, "deletions": 0}, "files": [{"sha": "eb10c3f4bbb61d56621e94768922261f3bf0b40a", "filename": "gcc/config/s390/s390-protos.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9776b4653bc4f8b568ea49fea4a7d7460e58b68a/gcc%2Fconfig%2Fs390%2Fs390-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9776b4653bc4f8b568ea49fea4a7d7460e58b68a/gcc%2Fconfig%2Fs390%2Fs390-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Fs390-protos.h?ref=9776b4653bc4f8b568ea49fea4a7d7460e58b68a", "patch": "@@ -135,6 +135,7 @@ extern void s390_split_access_reg (rtx, rtx *, rtx *);\n extern void print_operand_address (FILE *, rtx);\n extern void print_operand (FILE *, rtx, int);\n extern void s390_output_pool_entry (rtx, machine_mode, unsigned int);\n+extern bool s390_const_int_pool_entry_p (rtx, HOST_WIDE_INT *);\n extern int s390_label_align (rtx_insn *);\n extern int s390_agen_dep_p (rtx_insn *, rtx_insn *);\n extern rtx_insn *s390_load_got (void);"}, {"sha": "fb48102559d0bde326670a64631389ae21131d7b", "filename": "gcc/config/s390/s390.c", "status": "modified", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9776b4653bc4f8b568ea49fea4a7d7460e58b68a/gcc%2Fconfig%2Fs390%2Fs390.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9776b4653bc4f8b568ea49fea4a7d7460e58b68a/gcc%2Fconfig%2Fs390%2Fs390.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Fs390.c?ref=9776b4653bc4f8b568ea49fea4a7d7460e58b68a", "patch": "@@ -9400,6 +9400,37 @@ s390_output_pool_entry (rtx exp, machine_mode mode, unsigned int align)\n     }\n }\n \n+/* Return true if MEM refers to an integer constant in the literal pool.  If\n+   VAL is not nullptr, then also fill it with the constant's value.  */\n+\n+bool\n+s390_const_int_pool_entry_p (rtx mem, HOST_WIDE_INT *val)\n+{\n+  /* Try to match the following:\n+     - (mem (unspec [(symbol_ref) (reg)] UNSPEC_LTREF)).\n+     - (mem (symbol_ref)).  */\n+\n+  if (!MEM_P (mem))\n+    return false;\n+\n+  rtx addr = XEXP (mem, 0);\n+  rtx sym;\n+  if (GET_CODE (addr) == UNSPEC && XINT (addr, 1) == UNSPEC_LTREF)\n+    sym = XVECEXP (addr, 0, 0);\n+  else\n+    sym = addr;\n+\n+  if (!SYMBOL_REF_P (sym) || !CONSTANT_POOL_ADDRESS_P (sym))\n+    return false;\n+\n+  rtx val_rtx = get_pool_constant (sym);\n+  if (!CONST_INT_P (val_rtx))\n+    return false;\n+\n+  if (val != nullptr)\n+    *val = INTVAL (val_rtx);\n+  return true;\n+}\n \n /* Return an RTL expression representing the value of the return address\n    for the frame COUNT steps up from the current frame.  FRAME is the"}, {"sha": "d4cfbdf6732776ebabebf22bda8f31a56dc22ddd", "filename": "gcc/config/s390/s390.md", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9776b4653bc4f8b568ea49fea4a7d7460e58b68a/gcc%2Fconfig%2Fs390%2Fs390.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9776b4653bc4f8b568ea49fea4a7d7460e58b68a/gcc%2Fconfig%2Fs390%2Fs390.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Fs390.md?ref=9776b4653bc4f8b568ea49fea4a7d7460e58b68a", "patch": "@@ -2116,6 +2116,29 @@\n   [(set (match_dup 0) (plus:DI (match_dup 1) (match_dup 2)))]\n   \"\")\n \n+; Split loading of 64-bit constants into GPRs into llihf + oilf -\n+; counterintuitively, using oilf is faster than iilf.  oilf clobbers\n+; cc, so cc must be dead.\n+(define_peephole2\n+  [(set (match_operand:DI 0 \"register_operand\" \"\")\n+\t(match_operand:DI 1 \"memory_operand\" \"\"))]\n+  \"TARGET_64BIT\n+   && TARGET_EXTIMM\n+   && GENERAL_REG_P (operands[0])\n+   && s390_const_int_pool_entry_p (operands[1], nullptr)\n+   && peep2_reg_dead_p (1, gen_rtx_REG (CCmode, CC_REGNUM))\"\n+  [(set (match_dup 0) (match_dup 2))\n+   (parallel\n+    [(set (match_dup 0) (ior:DI (match_dup 0) (match_dup 3)))\n+     (clobber (reg:CC CC_REGNUM))])]\n+{\n+  HOST_WIDE_INT val;\n+  bool ok = s390_const_int_pool_entry_p (operands[1], &val);\n+  gcc_assert (ok);\n+  operands[2] = GEN_INT (val & 0xFFFFFFFF00000000ULL);\n+  operands[3] = GEN_INT (val & 0x00000000FFFFFFFFULL);\n+})\n+\n ;\n ; movsi instruction pattern(s).\n ;"}, {"sha": "03d17f5909688f1adb73c3e4ce926f1f0a209803", "filename": "gcc/testsuite/gcc.target/s390/load-imm64-1.c", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9776b4653bc4f8b568ea49fea4a7d7460e58b68a/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fload-imm64-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9776b4653bc4f8b568ea49fea4a7d7460e58b68a/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fload-imm64-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fload-imm64-1.c?ref=9776b4653bc4f8b568ea49fea4a7d7460e58b68a", "patch": "@@ -0,0 +1,14 @@\n+/* Test that large 64-bit constants are loaded with llihf + oilf when lgrl is\n+   not available.  */\n+\n+/* { dg-do compile } */\n+/* { dg-options \"-O3 -march=z9-109\" } */\n+\n+unsigned long\n+magic (void)\n+{\n+  return 0x3f08c5392f756cd;\n+}\n+\n+/* { dg-final { scan-assembler-times {\\n\\tllihf\\t} 1 { target lp64 } } } */\n+/* { dg-final { scan-assembler-times {\\n\\toilf\\t} 1 { target lp64 } } } */"}, {"sha": "ee0ff3b0a9148085dc048fdc7da6e64daba39854", "filename": "gcc/testsuite/gcc.target/s390/load-imm64-2.c", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9776b4653bc4f8b568ea49fea4a7d7460e58b68a/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fload-imm64-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9776b4653bc4f8b568ea49fea4a7d7460e58b68a/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fload-imm64-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fload-imm64-2.c?ref=9776b4653bc4f8b568ea49fea4a7d7460e58b68a", "patch": "@@ -0,0 +1,14 @@\n+/* Test that large 64-bit constants are loaded with llihf + oilf when lgrl is\n+   available.  */\n+\n+/* { dg-do compile } */\n+/* { dg-options \"-O3 -march=z10\" } */\n+\n+unsigned long\n+magic (void)\n+{\n+  return 0x3f08c5392f756cd;\n+}\n+\n+/* { dg-final { scan-assembler-times {\\n\\tllihf\\t} 1 { target lp64 } } } */\n+/* { dg-final { scan-assembler-times {\\n\\toilf\\t} 1 { target lp64 } } } */"}]}