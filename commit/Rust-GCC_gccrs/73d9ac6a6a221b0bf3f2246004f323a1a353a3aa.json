{"sha": "73d9ac6a6a221b0bf3f2246004f323a1a353a3aa", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzNkOWFjNmE2YTIyMWIwYmYzZjIyNDYwMDRmMzIzYTFhMzUzYTNhYQ==", "commit": {"author": {"name": "Ian Bolton", "email": "ian.bolton@arm.com", "date": "2014-05-13T09:28:35Z"}, "committer": {"name": "Ian Bolton", "email": "ibolton@gcc.gnu.org", "date": "2014-05-13T09:28:35Z"}, "message": "Implement HARD_REGNO_CALLER_SAVE_MODE for AArch64\n\n\t* config/aarch64/aarch64-protos.h\n\t(aarch64_hard_regno_caller_save_mode): New prototype.\n\t* config/aarch64/aarch64.c (aarch64_hard_regno_caller_save_mode):\n\tNew function.\n\t* config/aarch64/aarch64.h (HARD_REGNO_CALLER_SAVE_MODE): New macro.\n\nFrom-SVN: r210355", "tree": {"sha": "2441230c424dd28fb13caed593fb77641d774ccf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2441230c424dd28fb13caed593fb77641d774ccf"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/73d9ac6a6a221b0bf3f2246004f323a1a353a3aa", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/73d9ac6a6a221b0bf3f2246004f323a1a353a3aa", "html_url": "https://github.com/Rust-GCC/gccrs/commit/73d9ac6a6a221b0bf3f2246004f323a1a353a3aa", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/73d9ac6a6a221b0bf3f2246004f323a1a353a3aa/comments", "author": null, "committer": null, "parents": [{"sha": "06b906021422980e8b9b7aea0509d24e94777a19", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/06b906021422980e8b9b7aea0509d24e94777a19", "html_url": "https://github.com/Rust-GCC/gccrs/commit/06b906021422980e8b9b7aea0509d24e94777a19"}], "stats": {"total": 33, "additions": 33, "deletions": 0}, "files": [{"sha": "8352d09f314ee3b4d4c4e3f30173e15387b807e5", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/73d9ac6a6a221b0bf3f2246004f323a1a353a3aa/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/73d9ac6a6a221b0bf3f2246004f323a1a353a3aa/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=73d9ac6a6a221b0bf3f2246004f323a1a353a3aa", "patch": "@@ -1,3 +1,11 @@\n+2014-05-13  Ian Bolton  <ian.bolton@arm.com>\n+\n+\t* config/aarch64/aarch64-protos.h\n+\t(aarch64_hard_regno_caller_save_mode): New prototype.\n+\t* config/aarch64/aarch64.c (aarch64_hard_regno_caller_save_mode):\n+\tNew function.\n+\t* config/aarch64/aarch64.h (HARD_REGNO_CALLER_SAVE_MODE): New macro.\n+\n 2014-05-13  Christian Bruel  <christian.bruel@st.com>\n \n \t* target.def (mode_switching): New hook vector."}, {"sha": "7cf7d9f92e71fbe81d6283d13678d6675626be0d", "filename": "gcc/config/aarch64/aarch64-protos.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/73d9ac6a6a221b0bf3f2246004f323a1a353a3aa/gcc%2Fconfig%2Faarch64%2Faarch64-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/73d9ac6a6a221b0bf3f2246004f323a1a353a3aa/gcc%2Fconfig%2Faarch64%2Faarch64-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-protos.h?ref=73d9ac6a6a221b0bf3f2246004f323a1a353a3aa", "patch": "@@ -202,6 +202,8 @@ enum aarch64_symbol_type aarch64_classify_symbol (rtx,\n enum aarch64_symbol_type aarch64_classify_tls_symbol (rtx);\n enum reg_class aarch64_regno_regclass (unsigned);\n int aarch64_asm_preferred_eh_data_format (int, int);\n+enum machine_mode aarch64_hard_regno_caller_save_mode (unsigned, unsigned,\n+\t\t\t\t\t\t       enum machine_mode);\n int aarch64_hard_regno_mode_ok (unsigned, enum machine_mode);\n int aarch64_hard_regno_nregs (unsigned, enum machine_mode);\n int aarch64_simd_attr_length_move (rtx);"}, {"sha": "fabd6a9808561f81c0454d6e82f91cf78e5dbf7c", "filename": "gcc/config/aarch64/aarch64.c", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/73d9ac6a6a221b0bf3f2246004f323a1a353a3aa/gcc%2Fconfig%2Faarch64%2Faarch64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/73d9ac6a6a221b0bf3f2246004f323a1a353a3aa/gcc%2Fconfig%2Faarch64%2Faarch64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64.c?ref=73d9ac6a6a221b0bf3f2246004f323a1a353a3aa", "patch": "@@ -424,6 +424,24 @@ aarch64_hard_regno_mode_ok (unsigned regno, enum machine_mode mode)\n   return 0;\n }\n \n+/* Implement HARD_REGNO_CALLER_SAVE_MODE.  */\n+enum machine_mode\n+aarch64_hard_regno_caller_save_mode (unsigned regno, unsigned nregs,\n+\t\t\t\t     enum machine_mode mode)\n+{\n+  /* Handle modes that fit within single registers.  */\n+  if (nregs == 1 && GET_MODE_SIZE (mode) <= 16)\n+    {\n+      if (GET_MODE_SIZE (mode) >= 4)\n+        return mode;\n+      else\n+        return SImode;\n+    }\n+  /* Fall back to generic for multi-reg and very large modes.  */\n+  else\n+    return choose_hard_reg_mode (regno, nregs, false);\n+}\n+\n /* Return true if calls to DECL should be treated as\n    long-calls (ie called via a register).  */\n static bool"}, {"sha": "0574593ed09d4471924999b2dabe3105fae2409b", "filename": "gcc/config/aarch64/aarch64.h", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/73d9ac6a6a221b0bf3f2246004f323a1a353a3aa/gcc%2Fconfig%2Faarch64%2Faarch64.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/73d9ac6a6a221b0bf3f2246004f323a1a353a3aa/gcc%2Fconfig%2Faarch64%2Faarch64.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64.h?ref=73d9ac6a6a221b0bf3f2246004f323a1a353a3aa", "patch": "@@ -824,6 +824,11 @@ do {\t\t\t\t\t\t\t\t\t     \\\n \n #define SHIFT_COUNT_TRUNCATED !TARGET_SIMD\n \n+/* Choose appropriate mode for caller saves, so we do the minimum\n+   required size of load/store.  */\n+#define HARD_REGNO_CALLER_SAVE_MODE(REGNO, NREGS, MODE) \\\n+  aarch64_hard_regno_caller_save_mode ((REGNO), (NREGS), (MODE))\n+\n /* Callee only saves lower 64-bits of a 128-bit register.  Tell the\n    compiler the callee clobbers the top 64-bits when restoring the\n    bottom 64-bits.  */"}]}