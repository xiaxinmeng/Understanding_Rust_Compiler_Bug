{"sha": "f37230f0b482fc057ba2dc7d9fbdb2bec90ba19e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjM3MjMwZjBiNDgyZmMwNTdiYTJkYzdkOWZiZGIyYmVjOTBiYTE5ZQ==", "commit": {"author": {"name": "Jason Merrill", "email": "merrill@gnu.org", "date": "1996-10-18T06:23:23Z"}, "committer": {"name": "Jason Merrill", "email": "merrill@gnu.org", "date": "1996-10-18T06:23:23Z"}, "message": "tweak\n\nFrom-SVN: r12976", "tree": {"sha": "888b5bcd64a14bf54c40ae5a6f8e15f8b242b678", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/888b5bcd64a14bf54c40ae5a6f8e15f8b242b678"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f37230f0b482fc057ba2dc7d9fbdb2bec90ba19e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f37230f0b482fc057ba2dc7d9fbdb2bec90ba19e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f37230f0b482fc057ba2dc7d9fbdb2bec90ba19e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f37230f0b482fc057ba2dc7d9fbdb2bec90ba19e/comments", "author": null, "committer": null, "parents": [{"sha": "29a5d7cc71660aac996e336a4733e9d8ef2b7f9b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/29a5d7cc71660aac996e336a4733e9d8ef2b7f9b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/29a5d7cc71660aac996e336a4733e9d8ef2b7f9b"}], "stats": {"total": 168, "additions": 112, "deletions": 56}, "files": [{"sha": "9d8b6c6b1151dc036e474feb523a48d30386e0c9", "filename": "gcc/dwarf2out.c", "status": "modified", "additions": 65, "deletions": 52, "changes": 117, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f37230f0b482fc057ba2dc7d9fbdb2bec90ba19e/gcc%2Fdwarf2out.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f37230f0b482fc057ba2dc7d9fbdb2bec90ba19e/gcc%2Fdwarf2out.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdwarf2out.c?ref=f37230f0b482fc057ba2dc7d9fbdb2bec90ba19e", "patch": "@@ -637,6 +637,7 @@ static void decls_for_scope ();\n static void gen_decl_die ();\n static unsigned lookup_filename ();\n static int constant_size PROTO((long unsigned));\n+static enum dwarf_form value_format PROTO((dw_val_ref));\n \n /* Definitions of defaults for assembler-dependent names of various\n    pseudo-ops and section names.\n@@ -2775,14 +2776,8 @@ build_abbrev_table (die)\n \t      while (a_attr != NULL && d_attr != NULL)\n \t\t{\n \t\t  if ((a_attr->dw_attr != d_attr->dw_attr)\n-\t\t      || (a_attr->dw_attr_val.val_class\n-\t\t\t  != d_attr->dw_attr_val.val_class)\n-\t\t      || (a_attr->dw_attr_val.val_class\n-\t\t\t  == dw_val_class_unsigned_const\n-\t\t\t  && (constant_size (a_attr->dw_attr_val\n-\t\t\t\t\t     .v.val_unsigned)\n-\t\t\t      != constant_size (d_attr->dw_attr_val\n-\t\t\t\t\t\t.v.val_unsigned))))\n+\t\t      || (value_format (&a_attr->dw_attr_val)\n+\t\t\t  != value_format (&d_attr->dw_attr_val)))\n \t\t    {\n \t\t      break;\n \t\t    }\n@@ -2979,6 +2974,17 @@ size_of_loc_descr (loc)\n   return size;\n }\n \n+/* Return the size of a series of location descriptors.  */\n+static unsigned long\n+size_of_locs (loc)\n+     register dw_loc_descr_ref loc;\n+{\n+  register unsigned long size = 0;\n+  for (; loc != NULL; loc = loc->dw_loc_next)\n+    size += size_of_loc_descr (loc);\n+  return size;\n+}\n+\n /* Return the power-of-two number of bytes necessary to represent VALUE.  */\n static int\n constant_size (value)\n@@ -3015,13 +3021,14 @@ size_of_die (die)\n \t  size += PTR_SIZE;\n \t  break;\n \tcase dw_val_class_loc:\n-\t  /* Block length.  */\n-\t  size += 2;\n-\t  for (loc = a->dw_attr_val.v.val_loc; loc != NULL;\n-\t       loc = loc->dw_loc_next)\n-\t    {\n-\t      size += size_of_loc_descr (loc);\n-\t    }\n+\t  {\n+\t    register unsigned long lsize\n+\t      = size_of_locs (a->dw_attr_val.v.val_loc);\n+\n+\t    /* Block length.  */\n+\t    size += constant_size (lsize);\n+\t    size += lsize;\n+\t  }\n \t  break;\n \tcase dw_val_class_const:\n \t  size += 4;\n@@ -3321,63 +3328,64 @@ output_sleb128 (value)\n   while (more);\n }\n \n-/* Output the encoding of an attribute value.  */\n-static void\n-output_value_format (v)\n+/* Select the encoding of an attribute value.  */\n+static enum dwarf_form\n+value_format (v)\n      dw_val_ref v;\n {\n-  enum dwarf_form form;\n   switch (v->val_class)\n     {\n     case dw_val_class_addr:\n-      form = DW_FORM_addr;\n-      break;\n+      return DW_FORM_addr;\n     case dw_val_class_loc:\n-      form = DW_FORM_block2;\n-      break;\n+      switch (constant_size (size_of_locs (v->v.val_loc)))\n+\t{\n+\tcase 1:\n+\t  return DW_FORM_block1;\n+\tcase 2:\n+\t  return DW_FORM_block2;\n+\tdefault:\n+\t  abort ();\n+\t}\n     case dw_val_class_const:\n-      form = DW_FORM_data4;\n-      break;\n+      return DW_FORM_data4;\n     case dw_val_class_unsigned_const:\n       switch (constant_size (v->v.val_unsigned))\n \t{\n \tcase 1:\n-\t  form = DW_FORM_data1;\n-\t  break;\n+\t  return DW_FORM_data1;\n \tcase 2:\n-\t  form = DW_FORM_data2;\n-\t  break;\n+\t  return DW_FORM_data2;\n \tcase 4:\n-\t  form = DW_FORM_data4;\n-\t  break;\n+\t  return DW_FORM_data4;\n \tdefault:\n \t  abort ();\n \t}\n-      break;\n     case dw_val_class_double_const:\n-      form = DW_FORM_data8;\n-      break;\n+      return DW_FORM_data8;\n     case dw_val_class_flag:\n-      form = DW_FORM_flag;\n-      break;\n+      return DW_FORM_flag;\n     case dw_val_class_die_ref:\n-      form = DW_FORM_ref;\n-      break;\n+      return DW_FORM_ref;\n     case dw_val_class_fde_ref:\n-      form = DW_FORM_data;\n-      break;\n+      return DW_FORM_data;\n     case dw_val_class_lbl_id:\n-      form = DW_FORM_addr;\n-      break;\n+      return DW_FORM_addr;\n     case dw_val_class_section_offset:\n-      form = DW_FORM_data;\n-      break;\n+      return DW_FORM_data;\n     case dw_val_class_str:\n-      form = DW_FORM_string;\n-      break;\n+      return DW_FORM_string;\n     default:\n       abort ();\n     }\n+}\n+\n+/* Output the encoding of an attribute value.  */\n+static void\n+output_value_format (v)\n+     dw_val_ref v;\n+{\n+  enum dwarf_form form = value_format (v);\n   output_uleb128 (form);\n   if (flag_verbose_asm)\n     {\n@@ -3604,14 +3612,19 @@ output_die (die)\n \t\t\t\t       a->dw_attr_val.v.val_addr);\n \t  break;\n \tcase dw_val_class_loc:\n-\t  size = 0;\n-\t  for (loc = a->dw_attr_val.v.val_loc; loc != NULL;\n-\t       loc = loc->dw_loc_next)\n+\t  size = size_of_locs (a->dw_attr_val.v.val_loc);\n+\t  /* Output the block length for this list of location operations.  */\n+\t  switch (constant_size (size))\n \t    {\n-\t      size += size_of_loc_descr (loc);\n+\t    case 1:\n+\t      ASM_OUTPUT_DWARF_DATA1 (asm_out_file, size);\n+\t      break;\n+\t    case 2:\n+\t      ASM_OUTPUT_DWARF_DATA2 (asm_out_file, size);\n+\t      break;\n+\t    default:\n+\t      abort ();\n \t    }\n-\t  /* Output the block length for this list of location operations.  */\n-\t  ASM_OUTPUT_DWARF_DATA2 (asm_out_file, size);\n \t  if (flag_verbose_asm)\n \t    {\n \t      fprintf (asm_out_file, \"\\t%s %s\","}, {"sha": "c1ea559665aabb8d06e6a12d7690d16b053a7d1c", "filename": "gcc/dwarfout.c", "status": "modified", "additions": 47, "deletions": 4, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f37230f0b482fc057ba2dc7d9fbdb2bec90ba19e/gcc%2Fdwarfout.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f37230f0b482fc057ba2dc7d9fbdb2bec90ba19e/gcc%2Fdwarfout.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdwarfout.c?ref=f37230f0b482fc057ba2dc7d9fbdb2bec90ba19e", "patch": "@@ -2077,13 +2077,18 @@ location_attribute (rtl)\n    (See the `bit_offset_attribute' function below.)  */\n \n static void\n-data_member_location_attribute (decl)\n-     register tree decl;\n+data_member_location_attribute (t)\n+     register tree t;\n {\n-  register unsigned object_offset_in_bytes = field_byte_offset (decl);\n+  register unsigned object_offset_in_bytes;\n   char begin_label[MAX_ARTIFICIAL_LABEL_BYTES];\n   char end_label[MAX_ARTIFICIAL_LABEL_BYTES];\n \n+  if (TREE_CODE (t) == TREE_VEC)\n+    object_offset_in_bytes = TREE_INT_CST_LOW (BINFO_OFFSET (t));\n+  else\n+    object_offset_in_bytes = field_byte_offset (t);\n+\n   ASM_OUTPUT_DWARF_ATTRIBUTE (asm_out_file, AT_location);\n   sprintf (begin_label, LOC_BEGIN_LABEL_FMT, current_dienum);\n   sprintf (end_label, LOC_END_LABEL_FMT, current_dienum);\n@@ -3579,6 +3584,33 @@ output_string_type_die (arg)\n   string_length_attribute (TYPE_MAX_VALUE (TYPE_DOMAIN (type)));\n }\n \n+static void\n+output_inheritance_die (arg)\n+     register void *arg;\n+{\n+  register tree binfo = arg;\n+\n+  ASM_OUTPUT_DWARF_TAG (asm_out_file, TAG_inheritance);\n+  sibling_attribute ();\n+  type_attribute (BINFO_TYPE (binfo), 0, 0);\n+  data_member_location_attribute (binfo);\n+  if (TREE_VIA_VIRTUAL (binfo))\n+    {\n+      ASM_OUTPUT_DWARF_ATTRIBUTE (asm_out_file, AT_virtual);\n+      ASM_OUTPUT_DWARF_STRING (asm_out_file, \"\");\n+    }\n+  if (TREE_VIA_PUBLIC (binfo))\n+    {\n+      ASM_OUTPUT_DWARF_ATTRIBUTE (asm_out_file, AT_public);\n+      ASM_OUTPUT_DWARF_STRING (asm_out_file, \"\");\n+    }\n+  else if (TREE_VIA_PROTECTED (binfo))\n+    {\n+      ASM_OUTPUT_DWARF_ATTRIBUTE (asm_out_file, AT_protected);\n+      ASM_OUTPUT_DWARF_STRING (asm_out_file, \"\");\n+    }\n+}  \n+\n static void\n output_structure_type_die (arg)\n      register void *arg;\n@@ -4184,10 +4216,21 @@ output_type (type, containing_scope)\n \n \tif (TYPE_SIZE (type))\n \t  {\n+\t    /* First output info about the base classes.  */\n+\t    if (TYPE_BINFO (type) && TYPE_BINFO_BASETYPES (type))\n+\t      {\n+\t\tregister tree bases = TYPE_BINFO_BASETYPES (type);\n+\t\tregister int n_bases = TREE_VEC_LENGTH (bases);\n+\t\tregister int i;\n+\n+\t\tfor (i = 0; i < n_bases; i++)\n+\t\t  output_die (output_inheritance_die, TREE_VEC_ELT (bases, i));\n+\t      }\n+\n \t    {\n \t      register tree normal_member;\n \n-\t      /* First output info about the data members and type members.  */\n+\t      /* Now output info about the data members and type members.  */\n \n \t      for (normal_member = TYPE_FIELDS (type);\n \t\t   normal_member;"}]}