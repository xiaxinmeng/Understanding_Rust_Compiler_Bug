{"sha": "74e6a40335765077e235269f19d2d9905d0d9e44", "node_id": "C_kwDOANBUbNoAKDc0ZTZhNDAzMzU3NjUwNzdlMjM1MjY5ZjE5ZDJkOTkwNWQwZDllNDQ", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2022-06-16T12:36:04Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2022-06-16T12:36:04Z"}, "message": "match.pd: Fix up __builtin_mul_overflow_p signed type optimization [PR105984]\n\nEarlier in the simplification pattern, we require that @0 has compatible\ntype to the type of IMAGPART_EXPR, but for @1 which is a non-zero constant\nall we require is that it the constant fits into that type.\nLater the code checks if the constant is negative, because when min / max\nvalues are divided by negative divisor, lo will be higher than hi.\nIn the following testcase, @1 has unsigned char type, while @0 has\nint type, so @1 which is 254 is wi::neg_p and we were swapping lo and hi,\neven when @1 cast to int isn't negative.\n\nWe could use tree_int_cst_sgn (@1) < 0 as the check instead and it would\nwork both for narrower types of @1 and even same or wider ones, but\nI've noticed we probably don't want to call fold_convert (TREE_TYPE (@0), @1)\ntwice and when we save that result in a temporary, we can just use wi::neg_p\non that temporary.\n\n2022-06-16  Jakub Jelinek  <jakub@redhat.com>\n\n\tPR tree-optimization/105984\n\t* match.pd (__builtin_mul_overflow_p (x, cst, (stype) 0) ->\n\tx > stype_max / cst || x < stype_min / cst): fold_convert @1\n\tto TREE_TYPE (@0) just once and test for negative divisor\n\talso on that folded constant instead of on @1.\n\n\t* gcc.c-torture/execute/pr105984.c: New test.", "tree": {"sha": "ff4bd2c8879911ed600cae6471b90129599d2c96", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ff4bd2c8879911ed600cae6471b90129599d2c96"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/74e6a40335765077e235269f19d2d9905d0d9e44", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/74e6a40335765077e235269f19d2d9905d0d9e44", "html_url": "https://github.com/Rust-GCC/gccrs/commit/74e6a40335765077e235269f19d2d9905d0d9e44", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/74e6a40335765077e235269f19d2d9905d0d9e44/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6a27c430468cb85454b19cef881a1422580657ff", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6a27c430468cb85454b19cef881a1422580657ff", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6a27c430468cb85454b19cef881a1422580657ff"}], "stats": {"total": 28, "additions": 23, "deletions": 5}, "files": [{"sha": "ae5dc820fa5d9ff9ea2a9b1a6c05d60070a47212", "filename": "gcc/match.pd", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/74e6a40335765077e235269f19d2d9905d0d9e44/gcc%2Fmatch.pd", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/74e6a40335765077e235269f19d2d9905d0d9e44/gcc%2Fmatch.pd", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fmatch.pd?ref=74e6a40335765077e235269f19d2d9905d0d9e44", "patch": "@@ -6076,16 +6076,15 @@ DEFINE_INT_AND_FLOAT_ROUND_FN (RINT)\n       (convert (eq @0 { TYPE_MIN_VALUE (TREE_TYPE (@0)); }))\n       (with\n        {\n+\t tree div = fold_convert (TREE_TYPE (@0), @1);\n \t tree lo = int_const_binop (TRUNC_DIV_EXPR,\n-\t\t\t\t    TYPE_MIN_VALUE (TREE_TYPE (@0)),\n-\t\t\t\t    fold_convert (TREE_TYPE (@0), @1));\n+\t\t\t\t    TYPE_MIN_VALUE (TREE_TYPE (@0)), div);\n \t tree hi = int_const_binop (TRUNC_DIV_EXPR,\n-\t\t\t\t    TYPE_MAX_VALUE (TREE_TYPE (@0)),\n-\t\t\t\t    fold_convert (TREE_TYPE (@0), @1));\n+\t\t\t\t    TYPE_MAX_VALUE (TREE_TYPE (@0)), div);\n \t tree etype = range_check_type (TREE_TYPE (@0));\n \t if (etype)\n \t   {\n-\t     if (wi::neg_p (wi::to_wide (@1)))\n+\t     if (wi::neg_p (wi::to_wide (div)))\n \t       std::swap (lo, hi);\n \t     lo = fold_convert (etype, lo);\n \t     hi = fold_convert (etype, hi);"}, {"sha": "9143b3d3e7ed3461756c7aec1a1d9dfad94b506f", "filename": "gcc/testsuite/gcc.c-torture/execute/pr105984.c", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/74e6a40335765077e235269f19d2d9905d0d9e44/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fpr105984.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/74e6a40335765077e235269f19d2d9905d0d9e44/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fpr105984.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fpr105984.c?ref=74e6a40335765077e235269f19d2d9905d0d9e44", "patch": "@@ -0,0 +1,19 @@\n+/* PR tree-optimization/105984 */\n+\n+unsigned long long g;\n+\n+static inline unsigned long long\n+foo (unsigned char c)\n+{\n+  g -= __builtin_mul_overflow_p (4, (unsigned char) ~c, 0);\n+  return g;\n+}\n+\n+int\n+main ()\n+{\n+  unsigned long long x = foo (1);\n+  if (x != 0)\n+    __builtin_abort ();\n+  return 0;\n+}"}]}