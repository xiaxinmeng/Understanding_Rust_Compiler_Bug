{"sha": "9afc914809ca90d03a9a8f53c439ebf4c62cf544", "node_id": "C_kwDOANBUbNoAKDlhZmM5MTQ4MDljYTkwZDAzYTlhOGY1M2M0MzllYmY0YzYyY2Y1NDQ", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2023-01-14T15:41:58Z"}, "committer": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2023-01-14T16:59:58Z"}, "message": "libstdc++: Fix ostream insertion operators for calendar types\n\nlibstdc++-v3/ChangeLog:\n\n\t* include/bits/chrono_io.h (operator<<): Fix syntax errors.\n\t* testsuite/std/time/month_day/io.cc: New test.\n\t* testsuite/std/time/month_day_last/io.cc: New test.\n\t* testsuite/std/time/month_weekday/io.cc: New test.\n\t* testsuite/std/time/month_weekday_last/io.cc: New test.\n\t* testsuite/std/time/weekday_indexed/io.cc: New test.\n\t* testsuite/std/time/weekday_last/io.cc: New test.\n\t* testsuite/std/time/year_month/io.cc: New test.\n\t* testsuite/std/time/year_month_day_last/io.cc: New test.\n\t* testsuite/std/time/year_month_weekday/io.cc: New test.\n\t* testsuite/std/time/year_month_weekday_last/io.cc: New test.", "tree": {"sha": "df197ff1229ee01f5c9c2e81041d3da139fbec9c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/df197ff1229ee01f5c9c2e81041d3da139fbec9c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9afc914809ca90d03a9a8f53c439ebf4c62cf544", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9afc914809ca90d03a9a8f53c439ebf4c62cf544", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9afc914809ca90d03a9a8f53c439ebf4c62cf544", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9afc914809ca90d03a9a8f53c439ebf4c62cf544/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e176c031f02d01623b697c3c78c85cebb0506e87", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e176c031f02d01623b697c3c78c85cebb0506e87", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e176c031f02d01623b697c3c78c85cebb0506e87"}], "stats": {"total": 342, "additions": 332, "deletions": 10}, "files": [{"sha": "87caa30b83ae03583db647809af3913abf3a3138", "filename": "libstdc++-v3/include/bits/chrono_io.h", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9afc914809ca90d03a9a8f53c439ebf4c62cf544/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fchrono_io.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9afc914809ca90d03a9a8f53c439ebf4c62cf544/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fchrono_io.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fchrono_io.h?ref=9afc914809ca90d03a9a8f53c439ebf4c62cf544", "patch": "@@ -2134,7 +2134,7 @@ namespace chrono\n       // either \"{:L}[{}]\" or \"{:L}[{} is not a valid index]\". The {:L} spec\n       // means to format the weekday using ostringstream, so just do that.\n       basic_stringstream<_CharT> __os2;\n-      __os2.imbue(__os.getloc);\n+      __os2.imbue(__os.getloc());\n       __os2 << __wdi.weekday();\n       const auto __i = __wdi.index();\n       if constexpr (is_same_v<_CharT, char>)\n@@ -2157,7 +2157,7 @@ namespace chrono\n     {\n       // As above, just write straight to a stringstream, as if by \"{:L}[last]\"\n       basic_stringstream<_CharT> __os2;\n-      __os2.imbue(__os.getloc);\n+      __os2.imbue(__os.getloc());\n       __os2 << __wdl.weekday() << _GLIBCXX_WIDEN(\"[last]\");\n       __os << __os2.view();\n       return __os;\n@@ -2169,7 +2169,7 @@ namespace chrono\n     {\n       // As above, just write straight to a stringstream, as if by \"{:L}/{}\"\n       basic_stringstream<_CharT> __os2;\n-      __os2.imbue(__os.getloc);\n+      __os2.imbue(__os.getloc());\n       __os2 << __md.month();\n       if constexpr (is_same_v<_CharT, char>)\n \t__os2 << '/';\n@@ -2189,7 +2189,7 @@ namespace chrono\n     {\n       // As above, just write straight to a stringstream, as if by \"{:L}/last\"\n       basic_stringstream<_CharT> __os2;\n-      __os2.imbue(__os.getloc);\n+      __os2.imbue(__os.getloc());\n       __os2 << __mdl.month();\n       if constexpr (is_same_v<_CharT, char>)\n \t__os2 << \"/last\";\n@@ -2206,7 +2206,7 @@ namespace chrono\n     {\n       // As above, just write straight to a stringstream, as if by \"{:L}/{:L}\"\n       basic_stringstream<_CharT> __os2;\n-      __os2.imbue(__os.getloc);\n+      __os2.imbue(__os.getloc());\n       __os2 << __mwd.month();\n       if constexpr (is_same_v<_CharT, char>)\n \t__os2 << '/';\n@@ -2224,7 +2224,7 @@ namespace chrono\n     {\n       // As above, just write straight to a stringstream, as if by \"{:L}/{:L}\"\n       basic_stringstream<_CharT> __os2;\n-      __os2.imbue(__os.getloc);\n+      __os2.imbue(__os.getloc());\n       __os2 << __mwdl.month();\n       if constexpr (is_same_v<_CharT, char>)\n \t__os2 << '/';\n@@ -2241,7 +2241,7 @@ namespace chrono\n     {\n       // As above, just write straight to a stringstream, as if by \"{}/{:L}\"\n       basic_stringstream<_CharT> __os2;\n-      __os2.imbue(__os.getloc);\n+      __os2.imbue(__os.getloc());\n       __os2 << __ym.year();\n       if constexpr (is_same_v<_CharT, char>)\n \t__os2 << '/';\n@@ -2277,7 +2277,7 @@ namespace chrono\n     {\n       // As above, just write straight to a stringstream, as if by \"{}/{:L}\"\n       basic_stringstream<_CharT> __os2;\n-      __os2.imbue(__os.getloc);\n+      __os2.imbue(__os.getloc());\n       __os2 << __ymdl.year();\n       if constexpr (is_same_v<_CharT, char>)\n \t__os2 << '/';\n@@ -2296,7 +2296,7 @@ namespace chrono\n       // As above, just write straight to a stringstream, as if by\n       // \"{}/{:L}/{:L}\"\n       basic_stringstream<_CharT> __os2;\n-      __os2.imbue(__os.getloc);\n+      __os2.imbue(__os.getloc());\n       _CharT __slash;\n       if constexpr (is_same_v<_CharT, char>)\n \t__slash = '/';\n@@ -2316,7 +2316,7 @@ namespace chrono\n       // As above, just write straight to a stringstream, as if by\n       // \"{}/{:L}/{:L}\"\n       basic_stringstream<_CharT> __os2;\n-      __os2.imbue(__os.getloc);\n+      __os2.imbue(__os.getloc());\n       _CharT __slash;\n       if constexpr (is_same_v<_CharT, char>)\n \t__slash = '/';"}, {"sha": "454231dd72430eab6eb16914541de54088ecc757", "filename": "libstdc++-v3/testsuite/std/time/month_day/io.cc", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9afc914809ca90d03a9a8f53c439ebf4c62cf544/libstdc%2B%2B-v3%2Ftestsuite%2Fstd%2Ftime%2Fmonth_day%2Fio.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9afc914809ca90d03a9a8f53c439ebf4c62cf544/libstdc%2B%2B-v3%2Ftestsuite%2Fstd%2Ftime%2Fmonth_day%2Fio.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fstd%2Ftime%2Fmonth_day%2Fio.cc?ref=9afc914809ca90d03a9a8f53c439ebf4c62cf544", "patch": "@@ -0,0 +1,30 @@\n+// { dg-options \"-std=gnu++20\" }\n+// { dg-do run { target c++20 } }\n+// { dg-require-namedlocale \"fr_FR.ISO8859-15\" }\n+\n+#include <chrono>\n+#include <sstream>\n+#include <testsuite_hooks.h>\n+\n+void\n+test_ostream()\n+{\n+  using std::ostringstream;\n+  using namespace std::chrono;\n+\n+  ostringstream ss;\n+  ss << January/14 << ' ' << February/30 << ' ' << March/34;\n+  VERIFY( ss.str() == \"Jan/14 Feb/30 Mar/34 is not a valid day\" );\n+\n+  ss.str(\"\");\n+  ss.imbue(std::locale(ISO_8859(15,fr_FR)));\n+  ss << July/27;\n+  VERIFY( ss.str() == \"juil./27\" );\n+}\n+\n+int main()\n+{\n+  test_ostream();\n+  // TODO: test_format();\n+  // TODO: test_parse();\n+}"}, {"sha": "6bd95d9d524c491eea8fec75cac716e1090fc009", "filename": "libstdc++-v3/testsuite/std/time/month_day_last/io.cc", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9afc914809ca90d03a9a8f53c439ebf4c62cf544/libstdc%2B%2B-v3%2Ftestsuite%2Fstd%2Ftime%2Fmonth_day_last%2Fio.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9afc914809ca90d03a9a8f53c439ebf4c62cf544/libstdc%2B%2B-v3%2Ftestsuite%2Fstd%2Ftime%2Fmonth_day_last%2Fio.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fstd%2Ftime%2Fmonth_day_last%2Fio.cc?ref=9afc914809ca90d03a9a8f53c439ebf4c62cf544", "patch": "@@ -0,0 +1,30 @@\n+// { dg-options \"-std=gnu++20\" }\n+// { dg-do run { target c++20 } }\n+// { dg-require-namedlocale \"fr_FR.ISO8859-15\" }\n+\n+#include <chrono>\n+#include <sstream>\n+#include <testsuite_hooks.h>\n+\n+void\n+test_ostream()\n+{\n+  using std::ostringstream;\n+  using namespace std::chrono;\n+\n+  ostringstream ss;\n+  ss << January/last << ' ' << February/last << ' ' << March/last;\n+  VERIFY( ss.str() == \"Jan/last Feb/last Mar/last\" );\n+\n+  ss.str(\"\");\n+  ss.imbue(std::locale(ISO_8859(15,fr_FR)));\n+  ss << July/last;\n+  VERIFY( ss.str() == \"juil./last\" );\n+}\n+\n+int main()\n+{\n+  test_ostream();\n+  // TODO: test_format();\n+  // TODO: test_parse();\n+}"}, {"sha": "a62f84a16aa4941709ab5dd165c9c69a8f8239ea", "filename": "libstdc++-v3/testsuite/std/time/month_weekday/io.cc", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9afc914809ca90d03a9a8f53c439ebf4c62cf544/libstdc%2B%2B-v3%2Ftestsuite%2Fstd%2Ftime%2Fmonth_weekday%2Fio.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9afc914809ca90d03a9a8f53c439ebf4c62cf544/libstdc%2B%2B-v3%2Ftestsuite%2Fstd%2Ftime%2Fmonth_weekday%2Fio.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fstd%2Ftime%2Fmonth_weekday%2Fio.cc?ref=9afc914809ca90d03a9a8f53c439ebf4c62cf544", "patch": "@@ -0,0 +1,31 @@\n+// { dg-options \"-std=gnu++20\" }\n+// { dg-do run { target c++20 } }\n+// { dg-require-namedlocale \"fr_FR.ISO8859-15\" }\n+\n+#include <chrono>\n+#include <sstream>\n+#include <testsuite_hooks.h>\n+\n+void\n+test_ostream()\n+{\n+  using std::ostringstream;\n+  using namespace std::chrono;\n+\n+  ostringstream ss;\n+  ss << January/Saturday[2] << ' ' << February/Monday[5] << ' '\n+    << March/Sunday[8];\n+  VERIFY( ss.str() == \"Jan/Sat[2] Feb/Mon[5] Mar/Sun[8 is not a valid index]\" );\n+\n+  ss.str(\"\");\n+  ss.imbue(std::locale(ISO_8859(15,fr_FR)));\n+  ss << July/Thursday[4];\n+  VERIFY( ss.str() == \"juil./jeu.[4]\" );\n+}\n+\n+int main()\n+{\n+  test_ostream();\n+  // TODO: test_format();\n+  // TODO: test_parse();\n+}"}, {"sha": "f69cc187ce8134204228bd17f83511d4af061032", "filename": "libstdc++-v3/testsuite/std/time/month_weekday_last/io.cc", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9afc914809ca90d03a9a8f53c439ebf4c62cf544/libstdc%2B%2B-v3%2Ftestsuite%2Fstd%2Ftime%2Fmonth_weekday_last%2Fio.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9afc914809ca90d03a9a8f53c439ebf4c62cf544/libstdc%2B%2B-v3%2Ftestsuite%2Fstd%2Ftime%2Fmonth_weekday_last%2Fio.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fstd%2Ftime%2Fmonth_weekday_last%2Fio.cc?ref=9afc914809ca90d03a9a8f53c439ebf4c62cf544", "patch": "@@ -0,0 +1,31 @@\n+// { dg-options \"-std=gnu++20\" }\n+// { dg-do run { target c++20 } }\n+// { dg-require-namedlocale \"fr_FR.ISO8859-15\" }\n+\n+#include <chrono>\n+#include <sstream>\n+#include <testsuite_hooks.h>\n+\n+void\n+test_ostream()\n+{\n+  using std::ostringstream;\n+  using namespace std::chrono;\n+\n+  ostringstream ss;\n+  ss << January/Saturday[last] << ' ' << February/Monday[last] << ' '\n+    << March/weekday(9)[last];\n+  VERIFY( ss.str() == \"Jan/Sat[last] Feb/Mon[last] Mar/9 is not a valid weekday[last]\" );\n+\n+  ss.str(\"\");\n+  ss.imbue(std::locale(ISO_8859(15,fr_FR)));\n+  ss << July/Thursday[last];\n+  VERIFY( ss.str() == \"juil./jeu.[last]\" );\n+}\n+\n+int main()\n+{\n+  test_ostream();\n+  // TODO: test_format();\n+  // TODO: test_parse();\n+}"}, {"sha": "cdb91f4ba1131c5ae35e38e8690ffcf229a8940c", "filename": "libstdc++-v3/testsuite/std/time/weekday_indexed/io.cc", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9afc914809ca90d03a9a8f53c439ebf4c62cf544/libstdc%2B%2B-v3%2Ftestsuite%2Fstd%2Ftime%2Fweekday_indexed%2Fio.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9afc914809ca90d03a9a8f53c439ebf4c62cf544/libstdc%2B%2B-v3%2Ftestsuite%2Fstd%2Ftime%2Fweekday_indexed%2Fio.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fstd%2Ftime%2Fweekday_indexed%2Fio.cc?ref=9afc914809ca90d03a9a8f53c439ebf4c62cf544", "patch": "@@ -0,0 +1,30 @@\n+// { dg-options \"-std=gnu++20\" }\n+// { dg-do run { target c++20 } }\n+// { dg-require-namedlocale \"fr_FR.ISO8859-15\" }\n+\n+#include <chrono>\n+#include <sstream>\n+#include <testsuite_hooks.h>\n+\n+void\n+test_ostream()\n+{\n+  using std::ostringstream;\n+  using namespace std::chrono;\n+\n+  ostringstream ss;\n+  ss << Monday[2] << ' ' << Wednesday[5] << ' ' << Friday[13];\n+  VERIFY( ss.str() == \"Mon[2] Wed[5] Fri[13 is not a valid index]\" );\n+\n+  ss.str(\"\");\n+  ss.imbue(std::locale(ISO_8859(15,fr_FR)));\n+  ss << Saturday[1];\n+  VERIFY( ss.str() == \"sam.[1]\" );\n+}\n+\n+int main()\n+{\n+  test_ostream();\n+  // TODO: test_format();\n+  // TODO: test_parse();\n+}"}, {"sha": "b81830f8f68fa91e4eb0626f53abd0c8c318c8b5", "filename": "libstdc++-v3/testsuite/std/time/weekday_last/io.cc", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9afc914809ca90d03a9a8f53c439ebf4c62cf544/libstdc%2B%2B-v3%2Ftestsuite%2Fstd%2Ftime%2Fweekday_last%2Fio.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9afc914809ca90d03a9a8f53c439ebf4c62cf544/libstdc%2B%2B-v3%2Ftestsuite%2Fstd%2Ftime%2Fweekday_last%2Fio.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fstd%2Ftime%2Fweekday_last%2Fio.cc?ref=9afc914809ca90d03a9a8f53c439ebf4c62cf544", "patch": "@@ -0,0 +1,30 @@\n+// { dg-options \"-std=gnu++20\" }\n+// { dg-do run { target c++20 } }\n+// { dg-require-namedlocale \"fr_FR.ISO8859-15\" }\n+\n+#include <chrono>\n+#include <sstream>\n+#include <testsuite_hooks.h>\n+\n+void\n+test_ostream()\n+{\n+  using std::ostringstream;\n+  using namespace std::chrono;\n+\n+  ostringstream ss;\n+  ss << Monday[last] << ' ' << Wednesday[last] << ' ' << weekday(9)[last];\n+  VERIFY( ss.str() == \"Mon[last] Wed[last] 9 is not a valid weekday[last]\" );\n+\n+  ss.str(\"\");\n+  ss.imbue(std::locale(ISO_8859(15,fr_FR)));\n+  ss << Saturday[last];\n+  VERIFY( ss.str() == \"sam.[last]\" );\n+}\n+\n+int main()\n+{\n+  test_ostream();\n+  // TODO: test_format();\n+  // TODO: test_parse();\n+}"}, {"sha": "8c0eb9b657948343f92aa58cf9018581c3fe2e2a", "filename": "libstdc++-v3/testsuite/std/time/year_month/io.cc", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9afc914809ca90d03a9a8f53c439ebf4c62cf544/libstdc%2B%2B-v3%2Ftestsuite%2Fstd%2Ftime%2Fyear_month%2Fio.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9afc914809ca90d03a9a8f53c439ebf4c62cf544/libstdc%2B%2B-v3%2Ftestsuite%2Fstd%2Ftime%2Fyear_month%2Fio.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fstd%2Ftime%2Fyear_month%2Fio.cc?ref=9afc914809ca90d03a9a8f53c439ebf4c62cf544", "patch": "@@ -0,0 +1,30 @@\n+// { dg-options \"-std=gnu++20\" }\n+// { dg-do run { target c++20 } }\n+// { dg-require-namedlocale \"fr_FR.ISO8859-15\" }\n+\n+#include <chrono>\n+#include <sstream>\n+#include <testsuite_hooks.h>\n+\n+void\n+test_ostream()\n+{\n+  using std::ostringstream;\n+  using namespace std::chrono;\n+\n+  ostringstream ss;\n+  ss << 2023y/January << ' ' << 2023y/month(13);\n+  VERIFY( ss.str() == \"2023/Jan 2023/13 is not a valid month\" );\n+\n+  ss.str(\"\");\n+  ss.imbue(std::locale(ISO_8859(15,fr_FR)));\n+  ss << 2023y/July;\n+  VERIFY( ss.str() == \"2023/juil.\" );\n+}\n+\n+int main()\n+{\n+  test_ostream();\n+  // TODO: test_format();\n+  // TODO: test_parse();\n+}"}, {"sha": "cb60f078c7e29e1e4890646819d8ec81aa2deb34", "filename": "libstdc++-v3/testsuite/std/time/year_month_day_last/io.cc", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9afc914809ca90d03a9a8f53c439ebf4c62cf544/libstdc%2B%2B-v3%2Ftestsuite%2Fstd%2Ftime%2Fyear_month_day_last%2Fio.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9afc914809ca90d03a9a8f53c439ebf4c62cf544/libstdc%2B%2B-v3%2Ftestsuite%2Fstd%2Ftime%2Fyear_month_day_last%2Fio.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fstd%2Ftime%2Fyear_month_day_last%2Fio.cc?ref=9afc914809ca90d03a9a8f53c439ebf4c62cf544", "patch": "@@ -0,0 +1,30 @@\n+// { dg-options \"-std=gnu++20\" }\n+// { dg-do run { target c++20 } }\n+// { dg-require-namedlocale \"fr_FR.ISO8859-15\" }\n+\n+#include <chrono>\n+#include <sstream>\n+#include <testsuite_hooks.h>\n+\n+void\n+test_ostream()\n+{\n+  using std::ostringstream;\n+  using namespace std::chrono;\n+\n+  ostringstream ss;\n+  ss << 2023y/January/last << ' ' << 2023y/month(13)/last;\n+  VERIFY( ss.str() == \"2023/Jan/last 2023/13 is not a valid month/last\" );\n+\n+  ss.str(\"\");\n+  ss.imbue(std::locale(ISO_8859(15,fr_FR)));\n+  ss << 2023y/July/last;\n+  VERIFY( ss.str() == \"2023/juil./last\" );\n+}\n+\n+int main()\n+{\n+  test_ostream();\n+  // TODO: test_format();\n+  // TODO: test_parse();\n+}"}, {"sha": "530429ff1297433723696bed83dd5824694b2952", "filename": "libstdc++-v3/testsuite/std/time/year_month_weekday/io.cc", "status": "added", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9afc914809ca90d03a9a8f53c439ebf4c62cf544/libstdc%2B%2B-v3%2Ftestsuite%2Fstd%2Ftime%2Fyear_month_weekday%2Fio.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9afc914809ca90d03a9a8f53c439ebf4c62cf544/libstdc%2B%2B-v3%2Ftestsuite%2Fstd%2Ftime%2Fyear_month_weekday%2Fio.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fstd%2Ftime%2Fyear_month_weekday%2Fio.cc?ref=9afc914809ca90d03a9a8f53c439ebf4c62cf544", "patch": "@@ -0,0 +1,42 @@\n+// { dg-options \"-std=gnu++20\" }\n+// { dg-do run { target c++20 } }\n+// { dg-require-namedlocale \"fr_FR.ISO8859-15\" }\n+\n+#include <chrono>\n+#include <sstream>\n+#include <testsuite_hooks.h>\n+\n+void\n+test_ostream()\n+{\n+  using std::ostringstream;\n+  using namespace std::chrono;\n+\n+  ostringstream ss;\n+  ss << 2023y/January/Saturday[2];\n+  VERIFY( ss.str() == \"2023/Jan/Sat[2]\" );\n+  ss.clear();\n+  ss.str(\"\");\n+  ss << 2023y/month(13)/Monday[1];\n+  VERIFY( ss.str() == \"2023/13 is not a valid month/Mon[1]\" );\n+  ss.clear();\n+  ss.str(\"\");\n+  ss << 2023y/December/weekday(9)[5];\n+  VERIFY( ss.str() == \"2023/Dec/9 is not a valid weekday[5]\" );\n+  ss.clear();\n+  ss.str(\"\");\n+  ss << 2023y/December/Monday[6];\n+  VERIFY( ss.str() == \"2023/Dec/Mon[6 is not a valid index]\" );\n+\n+  ss.str(\"\");\n+  ss.imbue(std::locale(ISO_8859(15,fr_FR)));\n+  ss << 2023y/July/Thursday[2];\n+  VERIFY( ss.str() == \"2023/juil./jeu.[2]\" );\n+}\n+\n+int main()\n+{\n+  test_ostream();\n+  // TODO: test_format();\n+  // TODO: test_parse();\n+}"}, {"sha": "f6aff52f7eb8bceb7763cc0b907d377c6bf31165", "filename": "libstdc++-v3/testsuite/std/time/year_month_weekday_last/io.cc", "status": "added", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9afc914809ca90d03a9a8f53c439ebf4c62cf544/libstdc%2B%2B-v3%2Ftestsuite%2Fstd%2Ftime%2Fyear_month_weekday_last%2Fio.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9afc914809ca90d03a9a8f53c439ebf4c62cf544/libstdc%2B%2B-v3%2Ftestsuite%2Fstd%2Ftime%2Fyear_month_weekday_last%2Fio.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fstd%2Ftime%2Fyear_month_weekday_last%2Fio.cc?ref=9afc914809ca90d03a9a8f53c439ebf4c62cf544", "patch": "@@ -0,0 +1,38 @@\n+// { dg-options \"-std=gnu++20\" }\n+// { dg-do run { target c++20 } }\n+// { dg-require-namedlocale \"fr_FR.ISO8859-15\" }\n+\n+#include <chrono>\n+#include <sstream>\n+#include <testsuite_hooks.h>\n+\n+void\n+test_ostream()\n+{\n+  using std::ostringstream;\n+  using namespace std::chrono;\n+\n+  ostringstream ss;\n+  ss << 2023y/January/Monday[last];\n+  VERIFY( ss.str() == \"2023/Jan/Mon[last]\" );\n+  ss.clear();\n+  ss.str(\"\");\n+  ss << 2023y/month(13)/Monday[last];\n+  VERIFY( ss.str() == \"2023/13 is not a valid month/Mon[last]\" );\n+  ss.clear();\n+  ss.str(\"\");\n+  ss << 2023y/December/weekday(9)[last];\n+  VERIFY( ss.str() == \"2023/Dec/9 is not a valid weekday[last]\" );\n+\n+  ss.str(\"\");\n+  ss.imbue(std::locale(ISO_8859(15,fr_FR)));\n+  ss << 2023y/July/Thursday[last];\n+  VERIFY( ss.str() == \"2023/juil./jeu.[last]\" );\n+}\n+\n+int main()\n+{\n+  test_ostream();\n+  // TODO: test_format();\n+  // TODO: test_parse();\n+}"}]}