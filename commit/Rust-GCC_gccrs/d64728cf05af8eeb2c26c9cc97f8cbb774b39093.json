{"sha": "d64728cf05af8eeb2c26c9cc97f8cbb774b39093", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDY0NzI4Y2YwNWFmOGVlYjJjMjZjOWNjOTdmOGNiYjc3NGIzOTA5Mw==", "commit": {"author": {"name": "Anatoly Sokolov", "email": "aesok@post.ru", "date": "2009-11-30T21:38:46Z"}, "committer": {"name": "Anatoly Sokolov", "email": "aesok@gcc.gnu.org", "date": "2009-11-30T21:38:46Z"}, "message": "sh.c (sh_promote_prototypes): Make static.\n\n\t* config/sh/sh.c (sh_promote_prototypes): Make static.\n\t(sh_function_value, sh_libcall_value, sh_function_value_regno_p): New\n\tfunctions.\n\t(TARGET_FUNCTION_VALUE, TARGET_LIBCALL_VALUE): Declare.\n\t* config/sh/sh.h: (FUNCTION_VALUE_REGNO_P): Redefine, use\n\tsh_function_value_regno_p.\n\t(FUNCTION_VALUE, LIBCALL_VALUE): Remove.\n\t* config/sh/sh-protos.h (sh_function_value_regno_p): Declare.\n\t(sh_promote_prototypes) : Remove.\n\nFrom-SVN: r154842", "tree": {"sha": "df34bc368011bb905fd3aa7aa99e7bc62cf10268", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/df34bc368011bb905fd3aa7aa99e7bc62cf10268"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d64728cf05af8eeb2c26c9cc97f8cbb774b39093", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d64728cf05af8eeb2c26c9cc97f8cbb774b39093", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d64728cf05af8eeb2c26c9cc97f8cbb774b39093", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d64728cf05af8eeb2c26c9cc97f8cbb774b39093/comments", "author": null, "committer": null, "parents": [{"sha": "6e15674ae2fd1bf9fdd546cc34a60a5940acec6e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6e15674ae2fd1bf9fdd546cc34a60a5940acec6e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6e15674ae2fd1bf9fdd546cc34a60a5940acec6e"}], "stats": {"total": 103, "additions": 70, "deletions": 33}, "files": [{"sha": "417e4b6a664c809af4578a84339ab4bab29a6d79", "filename": "gcc/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d64728cf05af8eeb2c26c9cc97f8cbb774b39093/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d64728cf05af8eeb2c26c9cc97f8cbb774b39093/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=d64728cf05af8eeb2c26c9cc97f8cbb774b39093", "patch": "@@ -1,3 +1,15 @@\n+2009-11-30  Anatoly Sokolov  <aesok@post.ru>\n+\n+\t* config/sh/sh.c (sh_promote_prototypes): Make static.\n+\t(sh_function_value, sh_libcall_value, sh_function_value_regno_p): New\n+\tfunctions.\n+\t(TARGET_FUNCTION_VALUE, TARGET_LIBCALL_VALUE): Declare.\n+\t* config/sh/sh.h: (FUNCTION_VALUE_REGNO_P): Redefine, use\n+\tsh_function_value_regno_p.\n+\t(FUNCTION_VALUE, LIBCALL_VALUE): Remove.\n+\t* config/sh/sh-protos.h (sh_function_value_regno_p): Declare.\n+\t(sh_promote_prototypes) : Remove.\n+\n 2009-11-30  Julian Brown  <julian@codesourcery.com>\n \n \t* config/arm/arm.h (PREFERRED_RELOAD_CLASS): Don't restrict Thumb-2"}, {"sha": "7335efcd0a163ac76e5322a934807b5833381994", "filename": "gcc/config/sh/sh-protos.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d64728cf05af8eeb2c26c9cc97f8cbb774b39093/gcc%2Fconfig%2Fsh%2Fsh-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d64728cf05af8eeb2c26c9cc97f8cbb774b39093/gcc%2Fconfig%2Fsh%2Fsh-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fsh-protos.h?ref=d64728cf05af8eeb2c26c9cc97f8cbb774b39093", "patch": "@@ -163,7 +163,7 @@ extern rtx sh_function_arg (CUMULATIVE_ARGS *, enum machine_mode, tree, int);\n extern void sh_function_arg_advance (CUMULATIVE_ARGS *, enum machine_mode, tree, int);\n extern int sh_pass_in_reg_p (CUMULATIVE_ARGS *, enum machine_mode, tree);\n extern void sh_init_cumulative_args (CUMULATIVE_ARGS *, tree, rtx, tree, signed int, enum machine_mode);\n-extern bool sh_promote_prototypes (const_tree);\n+extern bool sh_function_value_regno_p (const unsigned int);\n extern rtx sh_dwarf_register_span (rtx);\n \n extern rtx replace_n_hard_rtx (rtx, rtx *, int , int);"}, {"sha": "5fe752eac2009af12b569708ee7cacf5cbbb6d53", "filename": "gcc/config/sh/sh.c", "status": "modified", "additions": 56, "deletions": 1, "changes": 57, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d64728cf05af8eeb2c26c9cc97f8cbb774b39093/gcc%2Fconfig%2Fsh%2Fsh.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d64728cf05af8eeb2c26c9cc97f8cbb774b39093/gcc%2Fconfig%2Fsh%2Fsh.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fsh.c?ref=d64728cf05af8eeb2c26c9cc97f8cbb774b39093", "patch": "@@ -251,6 +251,8 @@ static struct save_entry_s *sh5_schedule_saves (HARD_REG_SET *,\n \t\t\t\t\t\tstruct save_schedule_s *, int);\n \n static rtx sh_struct_value_rtx (tree, int);\n+static rtx sh_function_value (const_tree, const_tree, bool);\n+static rtx sh_libcall_value (enum machine_mode, const_rtx);\n static bool sh_return_in_memory (const_tree, const_tree);\n static rtx sh_builtin_saveregs (void);\n static void sh_setup_incoming_varargs (CUMULATIVE_ARGS *, enum machine_mode, tree, int *, int);\n@@ -259,6 +261,7 @@ static bool sh_pretend_outgoing_varargs_named (CUMULATIVE_ARGS *);\n static tree sh_build_builtin_va_list (void);\n static void sh_va_start (tree, rtx);\n static tree sh_gimplify_va_arg_expr (tree, tree, gimple_seq *, gimple_seq *);\n+static bool sh_promote_prototypes (const_tree);\n static enum machine_mode sh_promote_function_mode (const_tree type,\n \t\t\t\t\t\t   enum machine_mode,\n \t\t\t\t\t\t   int *punsignedp,\n@@ -451,6 +454,10 @@ static const struct attribute_spec sh_attribute_table[] =\n #undef TARGET_PROMOTE_FUNCTION_MODE\n #define TARGET_PROMOTE_FUNCTION_MODE sh_promote_function_mode\n \n+#undef TARGET_FUNCTION_VALUE\n+#define TARGET_FUNCTION_VALUE sh_function_value\n+#undef TARGET_LIBCALL_VALUE\n+#define TARGET_LIBCALL_VALUE sh_libcall_value\n #undef TARGET_STRUCT_VALUE_RTX\n #define TARGET_STRUCT_VALUE_RTX sh_struct_value_rtx\n #undef TARGET_RETURN_IN_MEMORY\n@@ -7947,7 +7954,7 @@ sh_promote_function_mode (const_tree type, enum machine_mode mode,\n     return mode;\n }\n \n-bool\n+static bool\n sh_promote_prototypes (const_tree type)\n {\n   if (TARGET_HITACHI)\n@@ -8306,6 +8313,54 @@ sh_struct_value_rtx (tree fndecl, int incoming ATTRIBUTE_UNUSED)\n   return gen_rtx_REG (Pmode, 2);\n }\n \n+/* Worker function for TARGET_FUNCTION_VALUE.\n+\n+   For the SH, this is like LIBCALL_VALUE, except that we must change the\n+   mode like PROMOTE_MODE does.\n+   ??? PROMOTE_MODE is ignored for non-scalar types.  The set of types\n+   tested here has to be kept in sync with the one in explow.c:promote_mode.\n+*/\n+\n+static rtx\n+sh_function_value (const_tree valtype,\n+\t\t   const_tree fn_decl_or_type,\n+\t\t   bool outgoing ATTRIBUTE_UNUSED)\n+{\n+  if (fn_decl_or_type\n+      && !DECL_P (fn_decl_or_type))\n+    fn_decl_or_type = NULL;\n+\n+  return gen_rtx_REG (\n+\t   ((GET_MODE_CLASS (TYPE_MODE (valtype)) == MODE_INT\n+\t     && GET_MODE_SIZE (TYPE_MODE (valtype)) < 4\n+\t     && (TREE_CODE (valtype) == INTEGER_TYPE\n+\t\t || TREE_CODE (valtype) == ENUMERAL_TYPE\n+\t\t || TREE_CODE (valtype) == BOOLEAN_TYPE\n+\t\t || TREE_CODE (valtype) == REAL_TYPE\n+\t\t || TREE_CODE (valtype) == OFFSET_TYPE))\n+\t    && sh_promote_prototypes (fn_decl_or_type)\n+\t    ? (TARGET_SHMEDIA64 ? DImode : SImode) : TYPE_MODE (valtype)),\n+\t   BASE_RETURN_VALUE_REG (TYPE_MODE (valtype)));\n+}\n+\n+/* Worker function for TARGET_LIBCALL_VALUE.  */\n+\n+static rtx\n+sh_libcall_value (enum machine_mode mode, const_rtx fun ATTRIBUTE_UNUSED)\n+{\n+  return gen_rtx_REG (mode, BASE_RETURN_VALUE_REG (mode));\n+}\n+\n+/* Worker function for FUNCTION_VALUE_REGNO_P.  */\n+\n+bool\n+sh_function_value_regno_p (const unsigned int regno)\n+{\n+  return ((regno) == FIRST_RET_REG \n+\t  || (TARGET_SH2E && (regno) == FIRST_FP_RET_REG)\n+\t  || (TARGET_SHMEDIA_FPU && (regno) == FIRST_FP_RET_REG));\n+}\n+\n /* Worker function for TARGET_RETURN_IN_MEMORY.  */\n \n static bool"}, {"sha": "697138f57ce8b3ad8a9941b248cd77214e6a441c", "filename": "gcc/config/sh/sh.h", "status": "modified", "additions": 1, "deletions": 31, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d64728cf05af8eeb2c26c9cc97f8cbb774b39093/gcc%2Fconfig%2Fsh%2Fsh.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d64728cf05af8eeb2c26c9cc97f8cbb774b39093/gcc%2Fconfig%2Fsh%2Fsh.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fsh.h?ref=d64728cf05af8eeb2c26c9cc97f8cbb774b39093", "patch": "@@ -1453,37 +1453,7 @@ extern enum reg_class regno_reg_class[FIRST_PSEUDO_REGISTER];\n    ? FIRST_FP_PARM_REG\t\t\t\t\t\\\n    : FIRST_PARM_REG)\n \n-/* Define how to find the value returned by a function.\n-   VALTYPE is the data type of the value (as a tree).\n-   If the precise function being called is known, FUNC is its FUNCTION_DECL;\n-   otherwise, FUNC is 0.\n-   For the SH, this is like LIBCALL_VALUE, except that we must change the\n-   mode like PROMOTE_MODE does.\n-   ??? PROMOTE_MODE is ignored for non-scalar types.  The set of types\n-   tested here has to be kept in sync with the one in explow.c:promote_mode.  */\n-\n-#define FUNCTION_VALUE(VALTYPE, FUNC)\t\t\t\t\t\\\n-  gen_rtx_REG (\t\t\t\t\t\t\t\t\\\n-\t   ((GET_MODE_CLASS (TYPE_MODE (VALTYPE)) == MODE_INT\t\t\\\n-\t     && GET_MODE_SIZE (TYPE_MODE (VALTYPE)) < 4                 \\\n-\t     && (TREE_CODE (VALTYPE) == INTEGER_TYPE\t\t\t\\\n-\t\t || TREE_CODE (VALTYPE) == ENUMERAL_TYPE\t\t\\\n-\t\t || TREE_CODE (VALTYPE) == BOOLEAN_TYPE\t\t\t\\\n-\t\t || TREE_CODE (VALTYPE) == REAL_TYPE\t\t\t\\\n-\t\t || TREE_CODE (VALTYPE) == OFFSET_TYPE))\t\t\\\n-             && sh_promote_prototypes (FUNC)\t\t\t\t\\\n-\t    ? (TARGET_SHMEDIA64 ? DImode : SImode) : TYPE_MODE (VALTYPE)), \\\n-\t   BASE_RETURN_VALUE_REG (TYPE_MODE (VALTYPE)))\n-\n-/* Define how to find the value returned by a library function\n-   assuming the value has mode MODE.  */\n-#define LIBCALL_VALUE(MODE) \\\n-  gen_rtx_REG ((MODE), BASE_RETURN_VALUE_REG (MODE));\n-\n-/* 1 if N is a possible register number for a function value.  */\n-#define FUNCTION_VALUE_REGNO_P(REGNO) \\\n-  ((REGNO) == FIRST_RET_REG || (TARGET_SH2E && (REGNO) == FIRST_FP_RET_REG) \\\n-   || (TARGET_SHMEDIA_FPU && (REGNO) == FIRST_FP_RET_REG))\n+#define FUNCTION_VALUE_REGNO_P(REGNO) sh_function_value_regno_p (REGNO)\n \n /* 1 if N is a possible register number for function argument passing.  */\n /* ??? There are some callers that pass REGNO as int, and others that pass"}]}