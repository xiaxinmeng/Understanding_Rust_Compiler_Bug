{"sha": "fbd5f73b3e4b1f00827aa3e87dbbd9af2c844a91", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmJkNWY3M2IzZTRiMWYwMDgyN2FhM2U4N2RiYmQ5YWYyYzg0NGE5MQ==", "commit": {"author": {"name": "Benjamin Kosnik", "email": "bkoz@purist.soma.redhat.com", "date": "2000-06-30T02:47:19Z"}, "committer": {"name": "Benjamin Kosnik", "email": "bkoz@gcc.gnu.org", "date": "2000-06-30T02:47:19Z"}, "message": "ostream_manip.cc (test02): Add tests.\n\n\n2000-06-29  Benjamin Kosnik  <bkoz@purist.soma.redhat.com>\n\n\t* testsuite/27_io/ostream_manip.cc (test02): Add tests.\n\t* bits/ostream.tcc: Tweak.\n\t* bits/std_fstream.h (basic_filebuf::setbuf): Reset\n\t_M_buf_size_opt too.\n\t* bits/std_streambuf.h (basic_streambuf::~basic_streambuf): Zero\n\tout _M_buf_size_opt.\n\t* bits/std_sstream.h (basic_stringbuf::_M_init_stringbuf): Set\n\t_M_buf_size_opt out here.\n\t* bits/char_traits.h (char_traits::eos): Non standard member\n\tfunction, uglify to __eos. Return char_type().\n\t* bits/std_ostream.h: Change.\n\n\t* testsuite/27_io/ostream_seeks.cc: New file.\n\t* testsuite/27_io/ostream_seeks-1.tst: New file.\n\t* testsuite/27_io/istream_unformatted.cc (main): Move test04 and\n\ttest05 to...\n\t* testsuite/27_io/istream_seeks.cc: New file.\n\nFrom-SVN: r34801", "tree": {"sha": "4061e3da52a412dae7d8d126bbf11c8a38f4f88d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4061e3da52a412dae7d8d126bbf11c8a38f4f88d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/fbd5f73b3e4b1f00827aa3e87dbbd9af2c844a91", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fbd5f73b3e4b1f00827aa3e87dbbd9af2c844a91", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fbd5f73b3e4b1f00827aa3e87dbbd9af2c844a91", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fbd5f73b3e4b1f00827aa3e87dbbd9af2c844a91/comments", "author": null, "committer": null, "parents": [{"sha": "cf1b2274578dcca43e32ebaf91c2f7ac054d7cec", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cf1b2274578dcca43e32ebaf91c2f7ac054d7cec", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cf1b2274578dcca43e32ebaf91c2f7ac054d7cec"}], "stats": {"total": 836, "additions": 613, "deletions": 223}, "files": [{"sha": "e6025c7a877ad3b5251a9ce7d62dbe400afdfe0c", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fbd5f73b3e4b1f00827aa3e87dbbd9af2c844a91/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fbd5f73b3e4b1f00827aa3e87dbbd9af2c844a91/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=fbd5f73b3e4b1f00827aa3e87dbbd9af2c844a91", "patch": "@@ -17,7 +17,13 @@\n \t* bits/char_traits.h (char_traits::eos): Non standard member\n \tfunction, uglify to __eos. Return char_type().\n \t* bits/std_ostream.h: Change.\n-\t\n+\n+\t* testsuite/27_io/ostream_seeks.cc (test01): New file.\n+\t* testsuite/27_io/ostream_seeks-1.tst: New file.\n+\t* testsuite/27_io/istream_unformatted.cc (main): Move test04 and\n+\ttest05 to...\n+\t* testsuite/27_io/istream_seeks.cc: New file.\n+\n 2000-06-29  Branko Cibej  <branko.cibej@hermes.si>\n \n         * bits/std_memory.h (auto_ptr_ref): Reworked and defined only if"}, {"sha": "4a506f2dec3b11758f8c77d2362bc440a8f426a1", "filename": "libstdc++-v3/testsuite/27_io/istream_seeks.cc", "status": "added", "additions": 299, "deletions": 0, "changes": 299, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fbd5f73b3e4b1f00827aa3e87dbbd9af2c844a91/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fistream_seeks.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fbd5f73b3e4b1f00827aa3e87dbbd9af2c844a91/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fistream_seeks.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fistream_seeks.cc?ref=fbd5f73b3e4b1f00827aa3e87dbbd9af2c844a91", "patch": "@@ -0,0 +1,299 @@\n+// 2000-06-29 bkoz\n+\n+// Copyright (C) 2000 Free Software Foundation\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 27.6.1.3 unformatted input functions\n+// NB: ostream has a particular \"seeks\" category. Adopt this for istreams too.\n+\n+#include <istream>\n+#include <sstream>\n+#include <fstream>\n+#ifdef DEBUG_ASSERT\n+  #include <assert.h>\n+#endif\n+\n+\n+bool test01()\n+{\n+  using namespace std;\n+  typedef ios::pos_type pos_type;\n+\n+  bool test = true;\n+  const char str_lit01[] = \"testsuite/istream_unformatted-1.tst\";\n+\n+  // in\n+  // test default ctors leave things in the same positions...\n+  istringstream ist1;\n+  pos_type p3 = ist1.tellg();\n+\n+  ifstream ifs1;\n+  pos_type p4 = ifs1.tellg();\n+\n+  test &= p3 == p4;\n+\n+  // in\n+  // test ctors leave things in the same positions...\n+  istringstream ist2(\"bob_marley:kaya\");\n+  p3 = ist2.tellg();\n+\n+  ifstream ifs2(str_lit01);\n+  p4 = ifs2.tellg();\n+\n+  test &= p3 == p4;\n+\n+#ifdef DEBUG_ASSERT\n+  assert(test);\n+#endif\n+\n+  return test;\n+}\n+\n+// fstreams\n+void test04(void)\n+{\n+  bool test = true;\n+  std::istream::pos_type pos01, pos02, pos03, pos04, pos05, pos06;\n+  std::ios_base::iostate state01, state02;\n+  const char str_lit01[] = \"testsuite/istream_unformatted-1.txt\";\n+  const char str_lit02[] = \"testsuite/istream_unformatted-2.txt\";\n+  std::ifstream if01(str_lit01, std::ios_base::in | std::ios_base::out);\n+  std::ifstream if02(str_lit01, std::ios_base::in);\n+  std::ifstream if03(str_lit02, std::ios_base::out | std::ios_base::trunc); \n+  test &= if01.good();\n+  test &= if02.good();\n+  test &= if03.good();\n+\n+  std::istream is01(if01.rdbuf());\n+  std::istream is02(if02.rdbuf());\n+  std::istream is03(if03.rdbuf());\n+\n+  // pos_type tellg()\n+  // in | out\n+  pos01 = is01.tellg();\n+  pos02 = is01.tellg();\n+  test &= pos01 == pos02;\n+  //  test &= istream::pos_type(0) != pos01; //depricated\n+\n+  // in\n+  pos03 = is02.tellg();\n+  pos04 = is02.tellg();\n+  test &= pos03 == pos04;\n+  //  test &= istream::pos_type(0) != pos03; //depricated\n+\n+  // out\n+  pos05 = is03.tellg();\n+  pos06 = is03.tellg();\n+  test &= pos05 == pos06;\n+  //  test &= istream::pos_type(0) != pos01; //depricated\n+\n+  // istream& seekg(pos_type)\n+  // istream& seekg(off_type, ios_base::seekdir)\n+\n+  // cur \n+  // NB: see library issues list 136. It's the v-3 interp that seekg\n+  // only sets the input buffer, or else istreams with buffers that\n+  // have _M_mode == ios_base::out will fail to have consistency\n+  // between seekg and tellg.\n+  state01 = is01.rdstate();\n+  is01.seekg(10, std::ios_base::cur);\n+  state02 = is01.rdstate();\n+  pos01 = is01.tellg(); \n+  test &= pos01 == pos02 + 10; \n+  test &= state01 == state02;\n+  pos02 = is01.tellg(); \n+  test &= pos02 == pos01; \n+\n+  state01 = is02.rdstate();\n+  is02.seekg(10, std::ios_base::cur);\n+  state02 = is02.rdstate();\n+  pos03 = is02.tellg(); \n+  test &= pos03 == pos04 + 10; \n+  test &= state01 == state02;\n+  pos04 = is02.tellg(); \n+  test &= pos03 == pos04; \n+\n+  state01 = is03.rdstate();\n+  is03.seekg(10, std::ios_base::cur);\n+  state02 = is03.rdstate();\n+  pos05 = is03.tellg(); \n+  test &= pos05 == pos06 + 10; \n+  test &= state01 == state02;\n+  pos06 = is03.tellg(); \n+  test &= pos05 == pos06; \n+\n+  // beg\n+  state01 = is01.rdstate();\n+  is01.seekg(20, std::ios_base::beg);\n+  state02 = is01.rdstate();\n+  pos01 = is01.tellg(); \n+  test &= pos01 == pos02 + 10; \n+  test &= state01 == state02;\n+  pos02 = is01.tellg(); \n+  test &= pos02 == pos01; \n+\n+  state01 = is02.rdstate();\n+  is02.seekg(20, std::ios_base::beg);\n+  state02 = is02.rdstate();\n+  pos03 = is02.tellg(); \n+  test &= pos03 == pos04 + 10; \n+  test &= state01 == state02;\n+  pos04 = is02.tellg(); \n+  test &= pos03 == pos04; \n+\n+  state01 = is03.rdstate();\n+  is03.seekg(20, std::ios_base::beg);\n+  state02 = is03.rdstate();\n+  pos05 = is03.tellg(); \n+  test &= pos05 == pos06 + 10;\n+  test &= state01 == state02;\n+  pos06 = is03.tellg(); \n+  test &= pos05 == pos06; \n+\n+#ifdef DEBUG_ASSERT\n+  assert(test);\n+#endif\n+}\n+\n+// stringstreams\n+void test05(void)\n+{\n+  bool test = true;\n+  std::istream::pos_type pos01, pos02, pos03, pos04, pos05, pos06;\n+  std::ios_base::iostate state01, state02;\n+  const char str_lit01[] = \"testsuite/istream_unformatted-1.tst\";\n+  std::ifstream if01(str_lit01);\n+  std::ifstream if02(str_lit01);\n+  std::ifstream if03(str_lit01);\n+  test &= if01.good();\n+  test &= if02.good();\n+  test &= if03.good();\n+\n+  std::stringbuf strbuf01(std::ios_base::in | std::ios_base::out);\n+  if01 >> &strbuf01; \n+  // initialize stringbufs that are ios_base::out\n+  std::stringbuf strbuf03(strbuf01.str(), std::ios_base::out);\n+  // initialize stringbufs that are ios_base::in\n+  std::stringbuf strbuf02(strbuf01.str(), std::ios_base::in);\n+\n+  std::istream is01(&strbuf01);\n+  std::istream is02(&strbuf02);\n+  std::istream is03(&strbuf03);\n+\n+  // pos_type tellg()\n+  // in | out\n+  pos01 = is01.tellg();\n+  pos02 = is01.tellg();\n+  test &= pos01 == pos02;\n+  // test &= istream::pos_type(0) != pos01; // deprecated\n+\n+  // in\n+  pos03 = is02.tellg();\n+  pos04 = is02.tellg();\n+  test &= pos03 == pos04;\n+  //  test &= istream::pos_type(0) != pos03; // deprecated\n+\n+  // out\n+  pos05 = is03.tellg();\n+  pos06 = is03.tellg();\n+  test &= pos05 == pos06;\n+  //  test &= istream::pos_type(0) != pos01; //deprecated\n+\n+  // istream& seekg(pos_type)\n+  // istream& seekg(off_type, ios_base::seekdir)\n+\n+  // cur \n+  // NB: see library issues list 136. It's the v-3 interp that seekg\n+  // only sets the input buffer, or else istreams with buffers that\n+  // have _M_mode == ios_base::out will fail to have consistency\n+  // between seekg and tellg.\n+  state01 = is01.rdstate();\n+  is01.seekg(10, std::ios_base::cur);\n+  state02 = is01.rdstate();\n+  pos01 = is01.tellg(); \n+  test &= pos01 == pos02 + 10; \n+  test &= state01 == state02;\n+  pos02 = is01.tellg(); \n+  test &= pos02 == pos01; \n+\n+  state01 = is02.rdstate();\n+  is02.seekg(10, std::ios_base::cur);\n+  state02 = is02.rdstate();\n+  pos03 = is02.tellg(); \n+  test &= pos03 == pos04 + 10; \n+  test &= state01 == state02;\n+  pos04 = is02.tellg(); \n+  test &= pos03 == pos04; \n+\n+  state01 = is03.rdstate();\n+  is03.seekg(10, std::ios_base::cur);\n+  state02 = is03.rdstate();\n+  pos05 = is03.tellg(); \n+  test &= pos05 == pos06; // as only out buffer \n+  test &= state01 == state02;\n+  pos06 = is03.tellg(); \n+  test &= pos05 == pos06; \n+\n+  // beg\n+  state01 = is01.rdstate();\n+  is01.seekg(20, std::ios_base::beg);\n+  state02 = is01.rdstate();\n+  pos01 = is01.tellg(); \n+  test &= pos01 == pos02 + 10; \n+  test &= state01 == state02;\n+  pos02 = is01.tellg(); \n+  test &= pos02 == pos01; \n+\n+  state01 = is02.rdstate();\n+  is02.seekg(20, std::ios_base::beg);\n+  state02 = is02.rdstate();\n+  pos03 = is02.tellg(); \n+  test &= pos03 == pos04 + 10; \n+  test &= state01 == state02;\n+  pos04 = is02.tellg(); \n+  test &= pos03 == pos04; \n+\n+  state01 = is03.rdstate();\n+  is03.seekg(20, std::ios_base::beg);\n+  state02 = is03.rdstate();\n+  pos05 = is03.tellg(); \n+  test &= pos05 == pos06; // as only out buffer \n+  test &= state01 == state02;\n+  pos06 = is03.tellg(); \n+  test &= pos05 == pos06; \n+\n+#ifdef DEBUG_ASSERT\n+  assert(test);\n+#endif\n+}\n+\n+int main()\n+{\n+  test01();\n+  test04();\n+  test05();\n+  return 0;\n+}\n+\n+\n+\n+\n+\n+\n+\n+"}, {"sha": "59f40eb2e5a82f8cb548fa96d6f34564444ed3db", "filename": "libstdc++-v3/testsuite/27_io/istream_unformatted.cc", "status": "modified", "additions": 3, "deletions": 222, "changes": 225, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fbd5f73b3e4b1f00827aa3e87dbbd9af2c844a91/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fistream_unformatted.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fbd5f73b3e4b1f00827aa3e87dbbd9af2c844a91/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fistream_unformatted.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fistream_unformatted.cc?ref=fbd5f73b3e4b1f00827aa3e87dbbd9af2c844a91", "patch": "@@ -1,6 +1,6 @@\n // 1999-08-11 bkoz\n \n-// Copyright (C) 1999 Free Software Foundation\n+// Copyright (C) 1999, 2000 Free Software Foundation\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -27,7 +27,6 @@\n   #include <assert.h>\n #endif\n \n-\n bool test01() {\n \n   typedef std::ios::traits_type traits_type;\n@@ -317,224 +316,6 @@ bool test03(void)\n   return test;\n }\n \n-// fstreams\n-void test04(void)\n-{\n-  bool test = true;\n-  std::istream::pos_type pos01, pos02, pos03, pos04, pos05, pos06;\n-  std::ios_base::iostate state01, state02;\n-  const char str_lit01[] = \"testsuite/istream_unformatted-1.txt\";\n-  const char str_lit02[] = \"testsuite/istream_unformatted-2.txt\";\n-  std::ifstream if01(str_lit01, std::ios_base::in | std::ios_base::out);\n-  std::ifstream if02(str_lit01, std::ios_base::in);\n-  std::ifstream if03(str_lit02, std::ios_base::out | std::ios_base::trunc); \n-  test &= if01.good();\n-  test &= if02.good();\n-  test &= if03.good();\n-\n-  std::istream is01(if01.rdbuf());\n-  std::istream is02(if02.rdbuf());\n-  std::istream is03(if03.rdbuf());\n-\n-  // pos_type tellg()\n-  // in | out\n-  pos01 = is01.tellg();\n-  pos02 = is01.tellg();\n-  test &= pos01 == pos02;\n-  //  test &= istream::pos_type(0) != pos01; //depricated\n-\n-  // in\n-  pos03 = is02.tellg();\n-  pos04 = is02.tellg();\n-  test &= pos03 == pos04;\n-  //  test &= istream::pos_type(0) != pos03; //depricated\n-\n-  // out\n-  pos05 = is03.tellg();\n-  pos06 = is03.tellg();\n-  test &= pos05 == pos06;\n-  //  test &= istream::pos_type(0) != pos01; //depricated\n-\n-  // istream& seekg(pos_type)\n-  // istream& seekg(off_type, ios_base::seekdir)\n-\n-  // cur \n-  // NB: see library issues list 136. It's the v-3 interp that seekg\n-  // only sets the input buffer, or else istreams with buffers that\n-  // have _M_mode == ios_base::out will fail to have consistency\n-  // between seekg and tellg.\n-  state01 = is01.rdstate();\n-  is01.seekg(10, std::ios_base::cur);\n-  state02 = is01.rdstate();\n-  pos01 = is01.tellg(); \n-  test &= pos01 == pos02 + 10; \n-  test &= state01 == state02;\n-  pos02 = is01.tellg(); \n-  test &= pos02 == pos01; \n-\n-  state01 = is02.rdstate();\n-  is02.seekg(10, std::ios_base::cur);\n-  state02 = is02.rdstate();\n-  pos03 = is02.tellg(); \n-  test &= pos03 == pos04 + 10; \n-  test &= state01 == state02;\n-  pos04 = is02.tellg(); \n-  test &= pos03 == pos04; \n-\n-  state01 = is03.rdstate();\n-  is03.seekg(10, std::ios_base::cur);\n-  state02 = is03.rdstate();\n-  pos05 = is03.tellg(); \n-  test &= pos05 == pos06 + 10; \n-  test &= state01 == state02;\n-  pos06 = is03.tellg(); \n-  test &= pos05 == pos06; \n-\n-  // beg\n-  state01 = is01.rdstate();\n-  is01.seekg(20, std::ios_base::beg);\n-  state02 = is01.rdstate();\n-  pos01 = is01.tellg(); \n-  test &= pos01 == pos02 + 10; \n-  test &= state01 == state02;\n-  pos02 = is01.tellg(); \n-  test &= pos02 == pos01; \n-\n-  state01 = is02.rdstate();\n-  is02.seekg(20, std::ios_base::beg);\n-  state02 = is02.rdstate();\n-  pos03 = is02.tellg(); \n-  test &= pos03 == pos04 + 10; \n-  test &= state01 == state02;\n-  pos04 = is02.tellg(); \n-  test &= pos03 == pos04; \n-\n-  state01 = is03.rdstate();\n-  is03.seekg(20, std::ios_base::beg);\n-  state02 = is03.rdstate();\n-  pos05 = is03.tellg(); \n-  test &= pos05 == pos06 + 10;\n-  test &= state01 == state02;\n-  pos06 = is03.tellg(); \n-  test &= pos05 == pos06; \n-\n-#ifdef DEBUG_ASSERT\n-  assert(test);\n-#endif\n-}\n-\n-// stringstreams\n-void test05(void)\n-{\n-  bool test = true;\n-  std::istream::pos_type pos01, pos02, pos03, pos04, pos05, pos06;\n-  std::ios_base::iostate state01, state02;\n-  const char str_lit01[] = \"testsuite/istream_unformatted-1.tst\";\n-  std::ifstream if01(str_lit01);\n-  std::ifstream if02(str_lit01);\n-  std::ifstream if03(str_lit01);\n-  test &= if01.good();\n-  test &= if02.good();\n-  test &= if03.good();\n-\n-  std::stringbuf strbuf01(std::ios_base::in | std::ios_base::out);\n-  if01 >> &strbuf01; \n-  // initialize stringbufs that are ios_base::out\n-  std::stringbuf strbuf03(strbuf01.str(), std::ios_base::out);\n-  // initialize stringbufs that are ios_base::in\n-  std::stringbuf strbuf02(strbuf01.str(), std::ios_base::in);\n-\n-  std::istream is01(&strbuf01);\n-  std::istream is02(&strbuf02);\n-  std::istream is03(&strbuf03);\n-\n-  // pos_type tellg()\n-  // in | out\n-  pos01 = is01.tellg();\n-  pos02 = is01.tellg();\n-  test &= pos01 == pos02;\n-  // test &= istream::pos_type(0) != pos01; // deprecated\n-\n-  // in\n-  pos03 = is02.tellg();\n-  pos04 = is02.tellg();\n-  test &= pos03 == pos04;\n-  //  test &= istream::pos_type(0) != pos03; // deprecated\n-\n-  // out\n-  pos05 = is03.tellg();\n-  pos06 = is03.tellg();\n-  test &= pos05 == pos06;\n-  //  test &= istream::pos_type(0) != pos01; //deprecated\n-\n-  // istream& seekg(pos_type)\n-  // istream& seekg(off_type, ios_base::seekdir)\n-\n-  // cur \n-  // NB: see library issues list 136. It's the v-3 interp that seekg\n-  // only sets the input buffer, or else istreams with buffers that\n-  // have _M_mode == ios_base::out will fail to have consistency\n-  // between seekg and tellg.\n-  state01 = is01.rdstate();\n-  is01.seekg(10, std::ios_base::cur);\n-  state02 = is01.rdstate();\n-  pos01 = is01.tellg(); \n-  test &= pos01 == pos02 + 10; \n-  test &= state01 == state02;\n-  pos02 = is01.tellg(); \n-  test &= pos02 == pos01; \n-\n-  state01 = is02.rdstate();\n-  is02.seekg(10, std::ios_base::cur);\n-  state02 = is02.rdstate();\n-  pos03 = is02.tellg(); \n-  test &= pos03 == pos04 + 10; \n-  test &= state01 == state02;\n-  pos04 = is02.tellg(); \n-  test &= pos03 == pos04; \n-\n-  state01 = is03.rdstate();\n-  is03.seekg(10, std::ios_base::cur);\n-  state02 = is03.rdstate();\n-  pos05 = is03.tellg(); \n-  test &= pos05 == pos06; // as only out buffer \n-  test &= state01 == state02;\n-  pos06 = is03.tellg(); \n-  test &= pos05 == pos06; \n-\n-  // beg\n-  state01 = is01.rdstate();\n-  is01.seekg(20, std::ios_base::beg);\n-  state02 = is01.rdstate();\n-  pos01 = is01.tellg(); \n-  test &= pos01 == pos02 + 10; \n-  test &= state01 == state02;\n-  pos02 = is01.tellg(); \n-  test &= pos02 == pos01; \n-\n-  state01 = is02.rdstate();\n-  is02.seekg(20, std::ios_base::beg);\n-  state02 = is02.rdstate();\n-  pos03 = is02.tellg(); \n-  test &= pos03 == pos04 + 10; \n-  test &= state01 == state02;\n-  pos04 = is02.tellg(); \n-  test &= pos03 == pos04; \n-\n-  state01 = is03.rdstate();\n-  is03.seekg(20, std::ios_base::beg);\n-  state02 = is03.rdstate();\n-  pos05 = is03.tellg(); \n-  test &= pos05 == pos06; // as only out buffer \n-  test &= state01 == state02;\n-  pos06 = is03.tellg(); \n-  test &= pos05 == pos06; \n-\n-#ifdef DEBUG_ASSERT\n-  assert(test);\n-#endif\n-}\n-\n // http://sourceware.cygnus.com/ml/libstdc++/2000-q1/msg00177.html\n void test06()\n {\n@@ -569,8 +350,6 @@ int main()\n   test01();\n   test02();\n   test03();\n-  test04();\n-  test05();\n   test06();\n   return 0;\n }\n@@ -580,3 +359,5 @@ int main()\n \n \n \n+\n+"}, {"sha": "e69de29bb2d1d6434b8b29ae775ad8c2e48c5391", "filename": "libstdc++-v3/testsuite/27_io/ostream_seeks-1.tst", "status": "added", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fbd5f73b3e4b1f00827aa3e87dbbd9af2c844a91/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fostream_seeks-1.tst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fbd5f73b3e4b1f00827aa3e87dbbd9af2c844a91/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fostream_seeks-1.tst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fostream_seeks-1.tst?ref=fbd5f73b3e4b1f00827aa3e87dbbd9af2c844a91"}, {"sha": "4963d586aec92566cb720fa88c7fdb10054faeba", "filename": "libstdc++-v3/testsuite/27_io/ostream_seeks.cc", "status": "added", "additions": 304, "deletions": 0, "changes": 304, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fbd5f73b3e4b1f00827aa3e87dbbd9af2c844a91/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fostream_seeks.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fbd5f73b3e4b1f00827aa3e87dbbd9af2c844a91/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fostream_seeks.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fostream_seeks.cc?ref=fbd5f73b3e4b1f00827aa3e87dbbd9af2c844a91", "patch": "@@ -0,0 +1,304 @@\n+// 2000-06-29 bkoz\n+\n+// Copyright (C) 2000 Free Software Foundation\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 27.6.2.4 basic_ostream seek members\n+\n+#include <ostream>\n+#include <sstream>\n+#include <fstream>\n+#ifdef DEBUG_ASSERT\n+  #include <assert.h>\n+#endif\n+\n+\n+bool test01()\n+{\n+  using namespace std;\n+  typedef ios::pos_type pos_type;\n+\n+  bool test = true;\n+  const char str_lit01[] = \"testsuite/ostream_seeks-1.txt\";\n+\n+  // out\n+  // test default ctors leave things in the same positions...\n+  ostringstream ost1;\n+  pos_type p1 = ost1.tellp();\n+\n+  ofstream ofs1;\n+  pos_type p2 = ofs1.tellp();\n+\n+  test &= p1 == p2;\n+\n+  // out\n+  // test ctors leave things in the same positions...\n+  ostringstream ost2(\"bob_marley:kaya\");\n+  p1 = ost2.tellp();\n+\n+  ofstream ofs2(str_lit01);\n+  p2 = ofs2.tellp();\n+ \n+  test &= p1 == p2;\n+\n+#ifdef DEBUG_ASSERT\n+  assert(test);\n+#endif\n+\n+  return test;\n+}\n+\n+#if 0\n+// XXX FIX ME\n+// basically this is the istreams_seeks.cc code. We need to fix it up\n+// for ostreams......\n+\n+// fstreams\n+void test04(void)\n+{\n+  bool test = true;\n+  std::istream::pos_type pos01, pos02, pos03, pos04, pos05, pos06;\n+  std::ios_base::iostate state01, state02;\n+  const char str_lit01[] = \"testsuite/istream_unformatted-1.txt\";\n+  const char str_lit02[] = \"testsuite/istream_unformatted-2.txt\";\n+  std::ifstream if01(str_lit01, std::ios_base::in | std::ios_base::out);\n+  std::ifstream if02(str_lit01, std::ios_base::in);\n+  std::ifstream if03(str_lit02, std::ios_base::out | std::ios_base::trunc); \n+  test &= if01.good();\n+  test &= if02.good();\n+  test &= if03.good();\n+\n+  std::istream is01(if01.rdbuf());\n+  std::istream is02(if02.rdbuf());\n+  std::istream is03(if03.rdbuf());\n+\n+  // pos_type tellp()\n+  // in | out\n+  pos01 = is01.tellp();\n+  pos02 = is01.tellp();\n+  test &= pos01 == pos02;\n+  //  test &= istream::pos_type(0) != pos01; //depricated\n+\n+  // in\n+  pos03 = is02.tellp();\n+  pos04 = is02.tellp();\n+  test &= pos03 == pos04;\n+  //  test &= istream::pos_type(0) != pos03; //depricated\n+\n+  // out\n+  pos05 = is03.tellp();\n+  pos06 = is03.tellp();\n+  test &= pos05 == pos06;\n+  //  test &= istream::pos_type(0) != pos01; //depricated\n+\n+  // istream& seekg(pos_type)\n+  // istream& seekg(off_type, ios_base::seekdir)\n+\n+  // cur \n+  // NB: see library issues list 136. It's the v-3 interp that seekg\n+  // only sets the input buffer, or else istreams with buffers that\n+  // have _M_mode == ios_base::out will fail to have consistency\n+  // between seekg and tellp.\n+  state01 = is01.rdstate();\n+  is01.seekg(10, std::ios_base::cur);\n+  state02 = is01.rdstate();\n+  pos01 = is01.tellp(); \n+  test &= pos01 == pos02 + 10; \n+  test &= state01 == state02;\n+  pos02 = is01.tellp(); \n+  test &= pos02 == pos01; \n+\n+  state01 = is02.rdstate();\n+  is02.seekg(10, std::ios_base::cur);\n+  state02 = is02.rdstate();\n+  pos03 = is02.tellp(); \n+  test &= pos03 == pos04 + 10; \n+  test &= state01 == state02;\n+  pos04 = is02.tellp(); \n+  test &= pos03 == pos04; \n+\n+  state01 = is03.rdstate();\n+  is03.seekg(10, std::ios_base::cur);\n+  state02 = is03.rdstate();\n+  pos05 = is03.tellp(); \n+  test &= pos05 == pos06 + 10; \n+  test &= state01 == state02;\n+  pos06 = is03.tellp(); \n+  test &= pos05 == pos06; \n+\n+  // beg\n+  state01 = is01.rdstate();\n+  is01.seekg(20, std::ios_base::beg);\n+  state02 = is01.rdstate();\n+  pos01 = is01.tellp(); \n+  test &= pos01 == pos02 + 10; \n+  test &= state01 == state02;\n+  pos02 = is01.tellp(); \n+  test &= pos02 == pos01; \n+\n+  state01 = is02.rdstate();\n+  is02.seekg(20, std::ios_base::beg);\n+  state02 = is02.rdstate();\n+  pos03 = is02.tellp(); \n+  test &= pos03 == pos04 + 10; \n+  test &= state01 == state02;\n+  pos04 = is02.tellp(); \n+  test &= pos03 == pos04; \n+\n+  state01 = is03.rdstate();\n+  is03.seekg(20, std::ios_base::beg);\n+  state02 = is03.rdstate();\n+  pos05 = is03.tellp(); \n+  test &= pos05 == pos06 + 10;\n+  test &= state01 == state02;\n+  pos06 = is03.tellp(); \n+  test &= pos05 == pos06; \n+\n+#ifdef DEBUG_ASSERT\n+  assert(test);\n+#endif\n+}\n+\n+// stringstreams\n+void test05(void)\n+{\n+  bool test = true;\n+  std::istream::pos_type pos01, pos02, pos03, pos04, pos05, pos06;\n+  std::ios_base::iostate state01, state02;\n+  const char str_lit01[] = \"testsuite/istream_unformatted-1.tst\";\n+  std::ifstream if01(str_lit01);\n+  std::ifstream if02(str_lit01);\n+  std::ifstream if03(str_lit01);\n+  test &= if01.good();\n+  test &= if02.good();\n+  test &= if03.good();\n+\n+  std::stringbuf strbuf01(std::ios_base::in | std::ios_base::out);\n+  if01 >> &strbuf01; \n+  // initialize stringbufs that are ios_base::out\n+  std::stringbuf strbuf03(strbuf01.str(), std::ios_base::out);\n+  // initialize stringbufs that are ios_base::in\n+  std::stringbuf strbuf02(strbuf01.str(), std::ios_base::in);\n+\n+  std::istream is01(&strbuf01);\n+  std::istream is02(&strbuf02);\n+  std::istream is03(&strbuf03);\n+\n+  // pos_type tellp()\n+  // in | out\n+  pos01 = is01.tellp();\n+  pos02 = is01.tellp();\n+  test &= pos01 == pos02;\n+  // test &= istream::pos_type(0) != pos01; // deprecated\n+\n+  // in\n+  pos03 = is02.tellp();\n+  pos04 = is02.tellp();\n+  test &= pos03 == pos04;\n+  //  test &= istream::pos_type(0) != pos03; // deprecated\n+\n+  // out\n+  pos05 = is03.tellp();\n+  pos06 = is03.tellp();\n+  test &= pos05 == pos06;\n+  //  test &= istream::pos_type(0) != pos01; //deprecated\n+\n+  // istream& seekg(pos_type)\n+  // istream& seekg(off_type, ios_base::seekdir)\n+\n+  // cur \n+  // NB: see library issues list 136. It's the v-3 interp that seekg\n+  // only sets the input buffer, or else istreams with buffers that\n+  // have _M_mode == ios_base::out will fail to have consistency\n+  // between seekg and tellp.\n+  state01 = is01.rdstate();\n+  is01.seekg(10, std::ios_base::cur);\n+  state02 = is01.rdstate();\n+  pos01 = is01.tellp(); \n+  test &= pos01 == pos02 + 10; \n+  test &= state01 == state02;\n+  pos02 = is01.tellp(); \n+  test &= pos02 == pos01; \n+\n+  state01 = is02.rdstate();\n+  is02.seekg(10, std::ios_base::cur);\n+  state02 = is02.rdstate();\n+  pos03 = is02.tellp(); \n+  test &= pos03 == pos04 + 10; \n+  test &= state01 == state02;\n+  pos04 = is02.tellp(); \n+  test &= pos03 == pos04; \n+\n+  state01 = is03.rdstate();\n+  is03.seekg(10, std::ios_base::cur);\n+  state02 = is03.rdstate();\n+  pos05 = is03.tellp(); \n+  test &= pos05 == pos06; // as only out buffer \n+  test &= state01 == state02;\n+  pos06 = is03.tellp(); \n+  test &= pos05 == pos06; \n+\n+  // beg\n+  state01 = is01.rdstate();\n+  is01.seekg(20, std::ios_base::beg);\n+  state02 = is01.rdstate();\n+  pos01 = is01.tellp(); \n+  test &= pos01 == pos02 + 10; \n+  test &= state01 == state02;\n+  pos02 = is01.tellp(); \n+  test &= pos02 == pos01; \n+\n+  state01 = is02.rdstate();\n+  is02.seekg(20, std::ios_base::beg);\n+  state02 = is02.rdstate();\n+  pos03 = is02.tellp(); \n+  test &= pos03 == pos04 + 10; \n+  test &= state01 == state02;\n+  pos04 = is02.tellp(); \n+  test &= pos03 == pos04; \n+\n+  state01 = is03.rdstate();\n+  is03.seekg(20, std::ios_base::beg);\n+  state02 = is03.rdstate();\n+  pos05 = is03.tellp(); \n+  test &= pos05 == pos06; // as only out buffer \n+  test &= state01 == state02;\n+  pos06 = is03.tellp(); \n+  test &= pos05 == pos06; \n+\n+#ifdef DEBUG_ASSERT\n+  assert(test);\n+#endif\n+}\n+#endif // XXX\n+\n+int main()\n+{\n+  test01();\n+  //  test04();\n+  //  test05();\n+  return 0;\n+}\n+\n+\n+\n+\n+\n+\n+\n+"}]}