{"sha": "d43e0b7d97d527f3913f692d19748e66f5b9ff22", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDQzZTBiN2Q5N2Q1MjdmMzkxM2Y2OTJkMTk3NDhlNjZmNWI5ZmYyMg==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@vlsi1.ultra.nyu.edu", "date": "2001-11-16T02:26:42Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "2001-11-16T02:26:42Z"}, "message": "expr.c (store_field): Pass tree instead of max size; callers changed.\n\n\t* expr.c (store_field): Pass tree instead of max size; callers changed.\n\tChange handling of alignment.\n\tOnly copy to_rtx if is TARGET.\n\t(expand_expr_unaligned): Delete; callers now use expand_expr.\n\t(emit_cmp_insn): No longer take ALIGN parm; all callers changed.\n\t(expand_assignment): Change handling of alignment.\n\tOnly copy to_rtx if was original.\n\t(get_inner_reference): No longer return alginment; callers changed.\n\t(expand_expr, case COMPONENT_REF): Change handling of alignment.\n\t(expand_expr, case ADDR_EXPR): Make copy if not sufficiently aligned.\n\t(compare_from_rtx): Delete ALIGN parm; all callers changed.\n\t(do_compare_rtx_and_jump): Likewise.\n\t* expr.h: Reflect above changes.\n\t* tree.h: Likewise.\n\t* dwarf2out.c (loc_descriptor_from_tree): Remove ALIGN parameter\n\tto get_inner_reference.\n\t* builtins.c: Remove ALIGN parm in call to emit_cmp_and_jump_insns.\n\t* doloop.c, except.c, explow.c, loop.c, stmt.c, unroll.c: Likewise.\n\t* optabs.c: Likewise.\n\t(prepare_cmp_insn): Now static; remove ALIGN parm.  Callers changed.\n\t(emit_cmp_and_jump_insns): Remove ALIGN parm; all callers changed.\n\t* expmed.c: Remove ALIGN arg from calls to compare_from_rtx,\n\tcompare_rtx_and_jump, and emit_cmp_jump_insns.\n\t* fold-const.c: Remove PALIGN in calls to get_inner_reference.\n\t* function.c (assign_stack_temp_for_type): No longer static.\n\t* optabs.h (emit_cmp_insn): Remove ALIGN parm.\n\t(prepare_cmp_insn): Delete declaration.\n\t* rtl.h (assign_stack_temp_for_type): Add declaration.\n\t* config/alpha/alpha.c, config/d30v/d30v.c: Reflect above changes.\n\t* config/clipper/clipper.c, config/h8300/h8300.c: Likewise.\n\t* config/i386/i386.c,config/mips/mips.c: Likewise.\n\t* config/i860/i860.c, config/ia64/ia64.c: Likewise.\n\t* config/rs6000/rs6000.c, config/sh/sh.c: Likewise.\n\t* alias.c (nonoverlapping_memrefs): Use REGNO_PTR_FRAME_P.\n\t* emit-rtl.c (change_address): Fix typo in default alignment.\n\t(adjust_address_1): Use mode of NEW, not MODE, when setting size.\n\t* expr.c (highest_pow2_factor, case WITH_RECORD_EXPR): New case.\n\t* rtl.h (REGNO_PTR_FRAME_P): New macro.\n\n\t* expr.c (store_field): Pass tree instead of max size; callers changed.\n\tChange handling of alignment.\n\tOnly copy to_rtx if is TARGET.\n\t(expand_expr_unaligned): Delete; callers now use expand_expr.\n\t(emit_cmp_insn): No longer take ALIGN parm; all callers changed.\n\t(expand_assignment): Change handling of alignment.\n\tOnly copy to_rtx if was original.\n\t(get_inner_reference): No longer return alginment; callers changed.\n\t(expand_expr, case COMPONENT_REF): Change handling of alignment.\n\t(expand_expr, case ADDR_EXPR): Make copy if not sufficiently aligned.\n\t(compare_from_rtx): Delete ALIGN parm; all callers changed.\n\t(do_compare_rtx_and_jump): Likewise.\n\t* expr.h: Reflect above changes.\n\t* tree.h: Likewise.\n\t* dwarf2out.c (loc_descriptor_from_tree): Remove ALIGN parameter\n\tto get_inner_reference.\n\t* except.c: Remove ALIGN parameter in call to emit_cmp_and_jump_insns.\n\t* explow.c: Likewise.\n\t* loop.c: Likewise.\n\t* optabs.c: Likewise.\n\t(prepare_cmp_insn): Now static; remove ALIGN parm.  Callers changed.\n\t(emit_cmp_and_jump_insns): Remove ALIGN parm; all callers changed.\n\t* fold-const.c: Remove PALIGN in calls to get_inner_reference.\n\t* function.c (assign_stack_temp_for_type): No longer static.\n\t* optabs.h (emit_cmp_insn): Remove ALIGN parm.\n\t(prepare_cmp_insn): Delete declaration.\n\t* rtl.h (assign_stack_temp_for_type): Add declaration.\n\t* config/d30v/d30v.c: Reflect above changes.\n\t* config/i860/i860.c, config/ia64/ia64.c: Likewise.\n\t* config/rs6000/rs6000.c, config/sh/sh.c: Likewise.\n\t* ada/trans.c, ada/utils2.c: Remove PALIGN parameter to\n\tget_inner_reference.\n\nFrom-SVN: r47078", "tree": {"sha": "559b4a2b278854a13608de391b2050da30ac4881", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/559b4a2b278854a13608de391b2050da30ac4881"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d43e0b7d97d527f3913f692d19748e66f5b9ff22", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d43e0b7d97d527f3913f692d19748e66f5b9ff22", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d43e0b7d97d527f3913f692d19748e66f5b9ff22", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d43e0b7d97d527f3913f692d19748e66f5b9ff22/comments", "author": null, "committer": null, "parents": [{"sha": "f50e7a2d92218d935970483c33c61c8566840f6b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f50e7a2d92218d935970483c33c61c8566840f6b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f50e7a2d92218d935970483c33c61c8566840f6b"}], "stats": {"total": 138, "additions": 66, "deletions": 72}, "files": [{"sha": "f056fef71b4aa316b0a74db9e28e5311febb04e0", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d43e0b7d97d527f3913f692d19748e66f5b9ff22/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d43e0b7d97d527f3913f692d19748e66f5b9ff22/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=d43e0b7d97d527f3913f692d19748e66f5b9ff22", "patch": "@@ -29,18 +29,21 @@ Thu Nov 15 17:57:48 2001  Richard Kenner  <kenner@vlsi1.ultra.nyu.edu>\n \t* tree.h: Likewise.\n \t* dwarf2out.c (loc_descriptor_from_tree): Remove ALIGN parameter\n \tto get_inner_reference.\n-\t* except.c: Remove ALIGN parameter in call to emit_cmp_and_jump_insns.\n-\t* explow.c: Likewise.\n-\t* loop.c: Likewise.\n+\t* builtins.c: Remove ALIGN parm in call to emit_cmp_and_jump_insns.\n+\t* doloop.c, except.c, explow.c, loop.c, stmt.c, unroll.c: Likewise.\n \t* optabs.c: Likewise.\n \t(prepare_cmp_insn): Now static; remove ALIGN parm.  Callers changed.\n \t(emit_cmp_and_jump_insns): Remove ALIGN parm; all callers changed.\n+\t* expmed.c: Remove ALIGN arg from calls to compare_from_rtx,\n+\tcompare_rtx_and_jump, and emit_cmp_jump_insns.\n \t* fold-const.c: Remove PALIGN in calls to get_inner_reference.\n \t* function.c (assign_stack_temp_for_type): No longer static.\n \t* optabs.h (emit_cmp_insn): Remove ALIGN parm.\n \t(prepare_cmp_insn): Delete declaration.\n \t* rtl.h (assign_stack_temp_for_type): Add declaration.\n-\t* config/d30v/d30v.c: Reflect above changes.\n+\t* config/alpha/alpha.c, config/d30v/d30v.c: Reflect above changes.\n+\t* config/clipper/clipper.c, config/h8300/h8300.c: Likewise.\n+\t* config/i386/i386.c,config/mips/mips.c: Likewise.\n \t* config/i860/i860.c, config/ia64/ia64.c: Likewise.\n \t* config/rs6000/rs6000.c, config/sh/sh.c: Likewise.\n "}, {"sha": "65d19e27f792e5e14a317bdbff457c1bc670c0bc", "filename": "gcc/builtins.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d43e0b7d97d527f3913f692d19748e66f5b9ff22/gcc%2Fbuiltins.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d43e0b7d97d527f3913f692d19748e66f5b9ff22/gcc%2Fbuiltins.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbuiltins.c?ref=d43e0b7d97d527f3913f692d19748e66f5b9ff22", "patch": "@@ -1462,7 +1462,7 @@ expand_builtin_mathfn (exp, target, subtarget)\n       /* Test the result; if it is NaN, set errno=EDOM because\n \t the argument was not in the domain.  */\n       emit_cmp_and_jump_insns (target, target, EQ, 0, GET_MODE (target),\n-\t\t\t       0, 0, lab1);\n+\t\t\t       0, lab1);\n \n #ifdef TARGET_EDOM\n \t{"}, {"sha": "ca9c0e7ee9a60fbba89ac76d37a6f0c4e97da521", "filename": "gcc/config/alpha/alpha.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d43e0b7d97d527f3913f692d19748e66f5b9ff22/gcc%2Fconfig%2Falpha%2Falpha.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d43e0b7d97d527f3913f692d19748e66f5b9ff22/gcc%2Fconfig%2Falpha%2Falpha.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Falpha.c?ref=d43e0b7d97d527f3913f692d19748e66f5b9ff22", "patch": "@@ -2538,8 +2538,7 @@ alpha_emit_floatuns (operands)\n   i1 = gen_reg_rtx (DImode);\n   f0 = gen_reg_rtx (mode);\n \n-  emit_cmp_and_jump_insns (in, const0_rtx, LT, const0_rtx, DImode, 0,\n-\t\t\t   8, neglab);\n+  emit_cmp_and_jump_insns (in, const0_rtx, LT, const0_rtx, DImode, 0, neglab);\n \n   emit_insn (gen_rtx_SET (VOIDmode, out, gen_rtx_FLOAT (mode, in)));\n   emit_jump_insn (gen_jump (donelab));"}, {"sha": "c2002a05d40962be46a9da6b18daeb399eb063c0", "filename": "gcc/config/clipper/clipper.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d43e0b7d97d527f3913f692d19748e66f5b9ff22/gcc%2Fconfig%2Fclipper%2Fclipper.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d43e0b7d97d527f3913f692d19748e66f5b9ff22/gcc%2Fconfig%2Fclipper%2Fclipper.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fclipper%2Fclipper.c?ref=d43e0b7d97d527f3913f692d19748e66f5b9ff22", "patch": "@@ -616,7 +616,7 @@ clipper_va_arg (valist, type)\n \t\t\t\t\t    OPTAB_LIB_WIDEN),\n \t\t\t       GEN_INT (2), GE, const0_rtx,\n \t\t\t       TYPE_MODE (TREE_TYPE (num_field)),\n-\t\t\t       TREE_UNSIGNED (num_field), 0, false_label);\n+\t\t\t       TREE_UNSIGNED (num_field), false_label);\n \n       inreg = fold (build (MULT_EXPR, integer_type_node, num_field,\n \t\t\t   build_int_2 (2, 0)));"}, {"sha": "c78b84f3895788f3e24830d364924e1b245e749c", "filename": "gcc/config/h8300/h8300.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d43e0b7d97d527f3913f692d19748e66f5b9ff22/gcc%2Fconfig%2Fh8300%2Fh8300.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d43e0b7d97d527f3913f692d19748e66f5b9ff22/gcc%2Fconfig%2Fh8300%2Fh8300.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fh8300%2Fh8300.c?ref=d43e0b7d97d527f3913f692d19748e66f5b9ff22", "patch": "@@ -2839,8 +2839,8 @@ expand_a_rotate (code, operands)\n \n       /* If the rotate amount is less than or equal to 0,\n \t we go out of the loop.  */\n-      emit_cmp_and_jump_insns (rotate_amount, GEN_INT (0),\n-\t\t\t       LE, NULL_RTX, QImode, 0, 0, end_label);\n+      emit_cmp_and_jump_insns (rotate_amount, GEN_INT (0), LE, NULL_RTX,\n+\t\t\t       QImode, 0, end_label);\n \n       /* Initialize the loop counter.  */\n       emit_move_insn (counter, rotate_amount);\n@@ -2857,8 +2857,8 @@ expand_a_rotate (code, operands)\n \n       /* If the loop counter is non-zero, we go back to the beginning\n \t of the loop.  */\n-      emit_cmp_and_jump_insns (counter, GEN_INT (0),\n-\t\t\t       NE, NULL_RTX, QImode, 1, 0, start_label);\n+      emit_cmp_and_jump_insns (counter, GEN_INT (0), NE, NULL_RTX, QImode, 1,\n+\t\t\t       start_label);\n \n       emit_label (end_label);\n     }"}, {"sha": "887f8c4dda0482cdce41632705fd5fa14fe4546f", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 16, "deletions": 16, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d43e0b7d97d527f3913f692d19748e66f5b9ff22/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d43e0b7d97d527f3913f692d19748e66f5b9ff22/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=d43e0b7d97d527f3913f692d19748e66f5b9ff22", "patch": "@@ -2444,7 +2444,7 @@ ix86_va_arg (valist, type)\n \t\t\t\t   (gpr, NULL_RTX, SImode, EXPAND_NORMAL),\n \t\t\t\t   GEN_INT ((REGPARM_MAX - needed_intregs +\n \t\t\t\t\t     1) * 8), GE, const1_rtx, SImode,\n-\t\t\t\t   1, 1, lab_false);\n+\t\t\t\t   1, lab_false);\n \t}\n       if (needed_sseregs)\n \t{\n@@ -2453,7 +2453,7 @@ ix86_va_arg (valist, type)\n \t\t\t\t   GEN_INT ((SSE_REGPARM_MAX -\n \t\t\t\t\t     needed_sseregs + 1) * 16 +\n \t\t\t\t\t    REGPARM_MAX * 8), GE, const1_rtx,\n-\t\t\t\t   SImode, 1, 1, lab_false);\n+\t\t\t\t   SImode, 1, lab_false);\n \t}\n \n       /* Compute index to start of area used for integer regs.  */\n@@ -8971,7 +8971,7 @@ ix86_expand_aligntest (variable, value)\n   else\n     emit_insn (gen_andsi3 (tmpcount, variable, GEN_INT (value)));\n   emit_cmp_and_jump_insns (tmpcount, const0_rtx, EQ, 0, GET_MODE (variable),\n-\t\t\t   1, 0, label);\n+\t\t\t   1, label);\n   return label;\n }\n \n@@ -9138,7 +9138,7 @@ ix86_expand_movstr (dst, src, count_exp, align_exp)\n \t{\n \t  label = gen_label_rtx ();\n \t  emit_cmp_and_jump_insns (countreg, GEN_INT (UNITS_PER_WORD - 1),\n-\t\t\t\t   LEU, 0, counter_mode, 1, 0, label);\n+\t\t\t\t   LEU, 0, counter_mode, 1, label);\n \t}\n       if (align <= 1)\n \t{\n@@ -9334,7 +9334,7 @@ ix86_expand_clrstr (src, count_exp, align_exp)\n \t{\n \t  label = gen_label_rtx ();\n \t  emit_cmp_and_jump_insns (countreg, GEN_INT (UNITS_PER_WORD - 1),\n-\t\t\t\t   LEU, 0, counter_mode, 1, 0, label);\n+\t\t\t\t   LEU, 0, counter_mode, 1, label);\n \t}\n       if (align <= 1)\n \t{\n@@ -9540,11 +9540,11 @@ ix86_expand_strlensi_unroll_1 (out, align_rtx)\n \t\t\t\t    NULL_RTX, 0, OPTAB_WIDEN);\n \n \t  emit_cmp_and_jump_insns (align_rtx, const0_rtx, EQ, NULL,\n-\t\t\t\t   Pmode, 1, 0, align_4_label);\n+\t\t\t\t   Pmode, 1, align_4_label);\n \t  emit_cmp_and_jump_insns (align_rtx, GEN_INT (2), EQ, NULL,\n-\t\t\t\t   Pmode, 1, 0, align_2_label);\n+\t\t\t\t   Pmode, 1, align_2_label);\n \t  emit_cmp_and_jump_insns (align_rtx, GEN_INT (2), GTU, NULL,\n-\t\t\t\t   Pmode, 1, 0, align_3_label);\n+\t\t\t\t   Pmode, 1, align_3_label);\n \t}\n       else\n         {\n@@ -9555,7 +9555,7 @@ ix86_expand_strlensi_unroll_1 (out, align_rtx)\n \t\t\t\t    NULL_RTX, 0, OPTAB_WIDEN);\n \n \t  emit_cmp_and_jump_insns (align_rtx, const0_rtx, EQ, NULL,\n-\t\t\t\t   Pmode, 1, 0, align_4_label);\n+\t\t\t\t   Pmode, 1, align_4_label);\n         }\n \n       mem = gen_rtx_MEM (QImode, out);\n@@ -9564,7 +9564,7 @@ ix86_expand_strlensi_unroll_1 (out, align_rtx)\n \n       /* Compare the first n unaligned byte on a byte per byte basis.  */\n       emit_cmp_and_jump_insns (mem, const0_rtx, EQ, NULL,\n-\t\t\t       QImode, 1, 0, end_0_label);\n+\t\t\t       QImode, 1, end_0_label);\n \n       /* Increment the address.  */\n       if (TARGET_64BIT)\n@@ -9577,8 +9577,8 @@ ix86_expand_strlensi_unroll_1 (out, align_rtx)\n \t{\n \t  emit_label (align_2_label);\n \n-\t  emit_cmp_and_jump_insns (mem, const0_rtx, EQ, NULL,\n-\t\t\t\t   QImode, 1, 0, end_0_label);\n+\t  emit_cmp_and_jump_insns (mem, const0_rtx, EQ, NULL, QImode, 1,\n+\t\t\t\t   end_0_label);\n \n \t  if (TARGET_64BIT)\n \t    emit_insn (gen_adddi3 (out, out, const1_rtx));\n@@ -9588,8 +9588,8 @@ ix86_expand_strlensi_unroll_1 (out, align_rtx)\n \t  emit_label (align_3_label);\n \t}\n \n-      emit_cmp_and_jump_insns (mem, const0_rtx, EQ, NULL,\n-\t\t\t       QImode, 1, 0, end_0_label);\n+      emit_cmp_and_jump_insns (mem, const0_rtx, EQ, NULL, QImode, 1,\n+\t\t\t       end_0_label);\n \n       if (TARGET_64BIT)\n \temit_insn (gen_adddi3 (out, out, const1_rtx));\n@@ -9618,8 +9618,8 @@ ix86_expand_strlensi_unroll_1 (out, align_rtx)\n   emit_insn (gen_andsi3 (tmpreg, tmpreg,\n \t\t\t GEN_INT (trunc_int_for_mode\n \t\t\t\t  (0x80808080, SImode))));\n-  emit_cmp_and_jump_insns (tmpreg, const0_rtx, EQ, 0,\n-\t\t\t   SImode, 1, 0, align_4_label);\n+  emit_cmp_and_jump_insns (tmpreg, const0_rtx, EQ, 0, SImode, 1,\n+\t\t\t   align_4_label);\n \n   if (TARGET_CMOVE)\n     {"}, {"sha": "eb97c76e5797006481b87e1b18dc058fc0e97c96", "filename": "gcc/config/mips/mips.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d43e0b7d97d527f3913f692d19748e66f5b9ff22/gcc%2Fconfig%2Fmips%2Fmips.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d43e0b7d97d527f3913f692d19748e66f5b9ff22/gcc%2Fconfig%2Fmips%2Fmips.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.c?ref=d43e0b7d97d527f3913f692d19748e66f5b9ff22", "patch": "@@ -4590,8 +4590,8 @@ mips_va_arg (valist, type)\n \t  /* Emit code to branch if foff == 0.  */\n           r = expand_expr (foff, NULL_RTX, TYPE_MODE (TREE_TYPE (foff)),\n \t     \tEXPAND_NORMAL);\n-          emit_cmp_and_jump_insns (r, const0_rtx, EQ,\n-\t\tconst1_rtx, GET_MODE (r), 1, 1, lab_false);\n+          emit_cmp_and_jump_insns (r, const0_rtx, EQ, const1_rtx, GET_MODE (r),\n+\t\t\t\t   1, lab_false);\n \n           /* Emit code for addr_rtx = ftop - foff */\n           t = build (MINUS_EXPR, TREE_TYPE (ftop), ftop, foff );\n@@ -4657,8 +4657,8 @@ mips_va_arg (valist, type)\n \t  /* Emit code to branch if goff == 0.  */\n           r = expand_expr (goff, NULL_RTX, TYPE_MODE (TREE_TYPE (goff)),\n \t     \tEXPAND_NORMAL);\n-          emit_cmp_and_jump_insns (r, const0_rtx, EQ,\n-\t\tconst1_rtx, GET_MODE (r), 1, 1, lab_false);\n+          emit_cmp_and_jump_insns (r, const0_rtx, EQ, const1_rtx, GET_MODE (r),\n+\t\t\t\t   1, lab_false);\n \n           /* Emit code for addr_rtx = gtop - goff.  */\n           t = build (MINUS_EXPR, TREE_TYPE (gtop), gtop, goff);"}, {"sha": "2b1317f900afb59ca9451f095463a36a3c927fce", "filename": "gcc/doloop.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d43e0b7d97d527f3913f692d19748e66f5b9ff22/gcc%2Fdoloop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d43e0b7d97d527f3913f692d19748e66f5b9ff22/gcc%2Fdoloop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoloop.c?ref=d43e0b7d97d527f3913f692d19748e66f5b9ff22", "patch": "@@ -1,5 +1,5 @@\n /* Perform doloop optimizations\n-   Copyright (C) 1999, 2000 Free Software Foundation, Inc.\n+   Copyright (C) 1999, 2000, 2001 Free Software Foundation, Inc.\n    Contributed by Michael P. Hayes (m.hayes@elec.canterbury.ac.nz)\n \n This file is part of GCC.\n@@ -628,7 +628,7 @@ doloop_modify_runtime (loop, iterations_max,\n \t  limit = abs_inc * (loop_info->unroll_number - 1);\n \t  emit_cmp_and_jump_insns (extra, GEN_INT (limit),\n \t\t\t\t   limit == 0 ? EQ : LEU, NULL_RTX,\n-\t\t\t\t   GET_MODE (extra), 0, 0, label);\n+\t\t\t\t   GET_MODE (extra), 0, label);\n \t  JUMP_LABEL (get_last_insn ()) = label;\n \t  LABEL_NUSES (label)++;\n \n@@ -671,7 +671,7 @@ doloop_modify_runtime (loop, iterations_max,\n \t  label = gen_label_rtx();\n \t  emit_cmp_and_jump_insns (copy_rtx (initial_value),\n \t\t\t\t   copy_rtx (loop_info->comparison_value),\n-\t\t\t\t   comparison_code, NULL_RTX, mode, 0, 0,\n+\t\t\t\t   comparison_code, NULL_RTX, mode, 0,\n \t\t\t\t   label);\n \t  JUMP_LABEL (get_last_insn ()) = label;\n \t  LABEL_NUSES (label)++;"}, {"sha": "3879725487da92c0ef576eb5bb3490f4a1c753e8", "filename": "gcc/expmed.c", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d43e0b7d97d527f3913f692d19748e66f5b9ff22/gcc%2Fexpmed.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d43e0b7d97d527f3913f692d19748e66f5b9ff22/gcc%2Fexpmed.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpmed.c?ref=d43e0b7d97d527f3913f692d19748e66f5b9ff22", "patch": "@@ -4329,7 +4329,7 @@ emit_store_flag (target, code, op0, op1, mode, unsignedp, normalizep)\n       last = get_last_insn ();\n \n       comparison\n-\t= compare_from_rtx (op0, op1, code, unsignedp, mode, NULL_RTX, 0);\n+\t= compare_from_rtx (op0, op1, code, unsignedp, mode, NULL_RTX);\n       if (GET_CODE (comparison) == CONST_INT)\n \treturn (comparison == const0_rtx ? const0_rtx\n \t\t: normalizep == 1 ? const1_rtx\n@@ -4629,7 +4629,7 @@ emit_store_flag_force (target, code, op0, op1, mode, unsignedp, normalizep)\n \n   emit_move_insn (target, const1_rtx);\n   label = gen_label_rtx ();\n-  do_compare_rtx_and_jump (op0, op1, code, unsignedp, mode, NULL_RTX, 0,\n+  do_compare_rtx_and_jump (op0, op1, code, unsignedp, mode, NULL_RTX,\n \t\t\t   NULL_RTX, label);\n \n   emit_move_insn (target, const0_rtx);\n@@ -4704,7 +4704,5 @@ do_cmp_and_jump (arg1, arg2, op, mode, label)\n       emit_label (label2);\n     }\n   else\n-    {\n-      emit_cmp_and_jump_insns (arg1, arg2, op, NULL_RTX, mode, 0, 0, label);\n-    }\n+    emit_cmp_and_jump_insns (arg1, arg2, op, NULL_RTX, mode, 0, label);\n }"}, {"sha": "52ae097800f9b01f7ed67b78ffe2b87d58245852", "filename": "gcc/stmt.c", "status": "modified", "additions": 21, "deletions": 27, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d43e0b7d97d527f3913f692d19748e66f5b9ff22/gcc%2Fstmt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d43e0b7d97d527f3913f692d19748e66f5b9ff22/gcc%2Fstmt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fstmt.c?ref=d43e0b7d97d527f3913f692d19748e66f5b9ff22", "patch": "@@ -2197,9 +2197,7 @@ expand_expr_stmt (exp)\n \t  emit_cmp_and_jump_insns (last_expr_value, last_expr_value, EQ,\n \t\t\t\t   expand_expr (TYPE_SIZE (last_expr_type),\n \t\t\t\t\t\tNULL_RTX, VOIDmode, 0),\n-\t\t\t\t   BLKmode, 0,\n-\t\t\t\t   TYPE_ALIGN (last_expr_type) / BITS_PER_UNIT,\n-\t\t\t\t   lab);\n+\t\t\t\t   BLKmode, 0, lab);\n \t  emit_label (lab);\n \t}\n     }\n@@ -5645,20 +5643,16 @@ do_jump_if_equal (op1, op2, label, unsignedp)\n      rtx op1, op2, label;\n      int unsignedp;\n {\n-  if (GET_CODE (op1) == CONST_INT\n-      && GET_CODE (op2) == CONST_INT)\n+  if (GET_CODE (op1) == CONST_INT && GET_CODE (op2) == CONST_INT)\n     {\n       if (INTVAL (op1) == INTVAL (op2))\n \temit_jump (label);\n     }\n   else\n-    {\n-      enum machine_mode mode = GET_MODE (op1);\n-      if (mode == VOIDmode)\n-\tmode = GET_MODE (op2);\n-      emit_cmp_and_jump_insns (op1, op2, EQ, NULL_RTX, mode, unsignedp,\n-\t\t\t       0, label);\n-    }\n+    emit_cmp_and_jump_insns (op1, op2, EQ, NULL_RTX,\n+\t\t\t     (GET_MODE (op1) == VOIDmode\n+\t\t\t     ? GET_MODE (op2) : GET_MODE (op1)),\n+\t\t\t     unsignedp, label);\n }\n \f\n /* Not all case values are encountered equally.  This function\n@@ -6101,7 +6095,7 @@ emit_case_nodes (index, node, default_label, index_type)\n \t\t\t\t\texpand_expr (node->high, NULL_RTX,\n \t\t\t\t\t\t     VOIDmode, 0),\n \t\t\t\t\tunsignedp),\n-\t\t\t\t       GT, NULL_RTX, mode, unsignedp, 0,\n+\t\t\t\t       GT, NULL_RTX, mode, unsignedp,\n \t\t\t\t       label_rtx (node->right->code_label));\n \t      emit_case_nodes (index, node->left, default_label, index_type);\n \t    }\n@@ -6114,7 +6108,7 @@ emit_case_nodes (index, node, default_label, index_type)\n \t\t\t\t\texpand_expr (node->high, NULL_RTX,\n \t\t\t\t\t\t     VOIDmode, 0),\n \t\t\t\t\tunsignedp),\n-\t\t\t\t       LT, NULL_RTX, mode, unsignedp, 0,\n+\t\t\t\t       LT, NULL_RTX, mode, unsignedp,\n \t\t\t\t       label_rtx (node->left->code_label));\n \t      emit_case_nodes (index, node->right, default_label, index_type);\n \t    }\n@@ -6133,7 +6127,7 @@ emit_case_nodes (index, node, default_label, index_type)\n \t\t\t\t\texpand_expr (node->high, NULL_RTX,\n \t\t\t\t\t\t     VOIDmode, 0),\n \t\t\t\t\tunsignedp),\n-\t\t\t\t       GT, NULL_RTX, mode, unsignedp, 0,\n+\t\t\t\t       GT, NULL_RTX, mode, unsignedp,\n \t\t\t\t       label_rtx (test_label));\n \n \t      /* Value must be on the left.\n@@ -6168,7 +6162,7 @@ emit_case_nodes (index, node, default_label, index_type)\n \t\t\t\t\t    expand_expr (node->high, NULL_RTX,\n \t\t\t\t\t\t\t VOIDmode, 0),\n \t\t\t\t\t    unsignedp),\n-\t\t\t\t\t   LT, NULL_RTX, mode, unsignedp, 0,\n+\t\t\t\t\t   LT, NULL_RTX, mode, unsignedp,\n \t\t\t\t\t   default_label);\n \t\t}\n \n@@ -6201,7 +6195,7 @@ emit_case_nodes (index, node, default_label, index_type)\n \t\t\t\t\t    expand_expr (node->high, NULL_RTX,\n \t\t\t\t\t\t\t VOIDmode, 0),\n \t\t\t\t\t    unsignedp),\n-\t\t\t\t\t   GT, NULL_RTX, mode, unsignedp, 0,\n+\t\t\t\t\t   GT, NULL_RTX, mode, unsignedp,\n \t\t\t\t\t   default_label);\n \t\t}\n \n@@ -6244,7 +6238,7 @@ emit_case_nodes (index, node, default_label, index_type)\n \t\t\t\t      expand_expr (node->high, NULL_RTX,\n \t\t\t\t\t\t   VOIDmode, 0),\n \t\t\t\t      unsignedp),\n-\t\t\t\t     GT, NULL_RTX, mode, unsignedp, 0,\n+\t\t\t\t     GT, NULL_RTX, mode, unsignedp,\n \t\t\t\t     label_rtx (node->right->code_label));\n \t  else\n \t    {\n@@ -6258,7 +6252,7 @@ emit_case_nodes (index, node, default_label, index_type)\n \t\t\t\t\texpand_expr (node->high, NULL_RTX,\n \t\t\t\t\t\t     VOIDmode, 0),\n \t\t\t\t\tunsignedp),\n-\t\t\t\t       GT, NULL_RTX, mode, unsignedp, 0,\n+\t\t\t\t       GT, NULL_RTX, mode, unsignedp,\n \t\t\t\t       label_rtx (test_label));\n \t    }\n \n@@ -6270,7 +6264,7 @@ emit_case_nodes (index, node, default_label, index_type)\n \t\t\t\t    expand_expr (node->low, NULL_RTX,\n \t\t\t\t\t\t VOIDmode, 0),\n \t\t\t\t    unsignedp),\n-\t\t\t\t   GE, NULL_RTX, mode, unsignedp, 0,\n+\t\t\t\t   GE, NULL_RTX, mode, unsignedp,\n \t\t\t\t   label_rtx (node->code_label));\n \n \t  /* Handle the left-hand subtree.  */\n@@ -6301,7 +6295,7 @@ emit_case_nodes (index, node, default_label, index_type)\n \t\t\t\t\texpand_expr (node->low, NULL_RTX,\n \t\t\t\t\t\t     VOIDmode, 0),\n \t\t\t\t\tunsignedp),\n-\t\t\t\t       LT, NULL_RTX, mode, unsignedp, 0,\n+\t\t\t\t       LT, NULL_RTX, mode, unsignedp,\n \t\t\t\t       default_label);\n \t    }\n \n@@ -6313,7 +6307,7 @@ emit_case_nodes (index, node, default_label, index_type)\n \t\t\t\t    expand_expr (node->high, NULL_RTX,\n \t\t\t\t\t\t VOIDmode, 0),\n \t\t\t\t    unsignedp),\n-\t\t\t\t   LE, NULL_RTX, mode, unsignedp, 0,\n+\t\t\t\t   LE, NULL_RTX, mode, unsignedp,\n \t\t\t\t   label_rtx (node->code_label));\n \n \t  emit_case_nodes (index, node->right, default_label, index_type);\n@@ -6331,7 +6325,7 @@ emit_case_nodes (index, node, default_label, index_type)\n \t\t\t\t\texpand_expr (node->high, NULL_RTX,\n \t\t\t\t\t\t     VOIDmode, 0),\n \t\t\t\t\tunsignedp),\n-\t\t\t\t       GT, NULL_RTX, mode, unsignedp, 0,\n+\t\t\t\t       GT, NULL_RTX, mode, unsignedp,\n \t\t\t\t       default_label);\n \t    }\n \n@@ -6343,7 +6337,7 @@ emit_case_nodes (index, node, default_label, index_type)\n \t\t\t\t    expand_expr (node->low, NULL_RTX,\n \t\t\t\t\t\t VOIDmode, 0),\n \t\t\t\t    unsignedp),\n-\t\t\t\t   GE, NULL_RTX, mode, unsignedp, 0,\n+\t\t\t\t   GE, NULL_RTX, mode, unsignedp,\n \t\t\t\t   label_rtx (node->code_label));\n \n \t  emit_case_nodes (index, node->left, default_label, index_type);\n@@ -6365,7 +6359,7 @@ emit_case_nodes (index, node, default_label, index_type)\n \t\t\t\t\texpand_expr (node->high, NULL_RTX,\n \t\t\t\t\t\t     VOIDmode, 0),\n \t\t\t\t\tunsignedp),\n-\t\t\t\t       GT, NULL_RTX, mode, unsignedp, 0,\n+\t\t\t\t       GT, NULL_RTX, mode, unsignedp,\n \t\t\t\t       default_label);\n \t    }\n \n@@ -6377,7 +6371,7 @@ emit_case_nodes (index, node, default_label, index_type)\n \t\t\t\t\texpand_expr (node->low, NULL_RTX,\n \t\t\t\t\t\t     VOIDmode, 0),\n \t\t\t\t\tunsignedp),\n-\t\t\t\t       LT, NULL_RTX, mode, unsignedp, 0,\n+\t\t\t\t       LT, NULL_RTX, mode, unsignedp,\n \t\t\t\t       default_label);\n \t    }\n \t  else if (!low_bound && !high_bound)\n@@ -6399,7 +6393,7 @@ emit_case_nodes (index, node, default_label, index_type)\n \t\t\t\t       NULL_RTX, mode, 0);\n \t\t\t\t\n \t      emit_cmp_and_jump_insns (new_index, new_bound, GT, NULL_RTX,\n-\t\t\t\t       mode, 1, 0, default_label);\n+\t\t\t\t       mode, 1, default_label);\n \t    }\n \n \t  emit_jump (label_rtx (node->code_label));"}, {"sha": "9a9d432dd11127325a10f7089a86a459a2f05aac", "filename": "gcc/unroll.c", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d43e0b7d97d527f3913f692d19748e66f5b9ff22/gcc%2Funroll.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d43e0b7d97d527f3913f692d19748e66f5b9ff22/gcc%2Funroll.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Funroll.c?ref=d43e0b7d97d527f3913f692d19748e66f5b9ff22", "patch": "@@ -962,8 +962,9 @@ unroll_loop (loop, insn_count, strength_reduce_p)\n \t    {\n \t      emit_cmp_and_jump_insns (initial_value, final_value,\n \t\t\t\t       neg_inc ? LE : GE,\n-\t\t\t\t       NULL_RTX, mode, 0, 0, labels[1]);\n-\t      predict_insn_def (get_last_insn (), PRED_LOOP_CONDITION, NOT_TAKEN);\n+\t\t\t\t       NULL_RTX, mode, 0, labels[1]);\n+\t      predict_insn_def (get_last_insn (), PRED_LOOP_CONDITION,\n+\t\t\t\tNOT_TAKEN);\n \t      JUMP_LABEL (get_last_insn ()) = labels[1];\n \t      LABEL_NUSES (labels[1])++;\n \t    }\n@@ -1005,8 +1006,7 @@ unroll_loop (loop, insn_count, strength_reduce_p)\n \t\t}\n \n \t      emit_cmp_and_jump_insns (diff, GEN_INT (abs_inc * cmp_const),\n-\t\t\t\t       cmp_code, NULL_RTX, mode, 0, 0,\n-\t\t\t\t       labels[i]);\n+\t\t\t\t       cmp_code, NULL_RTX, mode, 0, labels[i]);\n \t      JUMP_LABEL (get_last_insn ()) = labels[i];\n \t      LABEL_NUSES (labels[i])++;\n \t      predict_insn (get_last_insn (), PRED_LOOP_PRECONDITIONING,\n@@ -1039,7 +1039,7 @@ unroll_loop (loop, insn_count, strength_reduce_p)\n \t\t}\n \n \t      emit_cmp_and_jump_insns (diff, GEN_INT (cmp_const), cmp_code,\n-\t\t\t\t       NULL_RTX, mode, 0, 0, labels[0]);\n+\t\t\t\t       NULL_RTX, mode, 0, labels[0]);\n \t      JUMP_LABEL (get_last_insn ()) = labels[0];\n \t      LABEL_NUSES (labels[0])++;\n \t    }"}]}