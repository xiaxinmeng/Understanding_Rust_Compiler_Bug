{"sha": "74c177cbbd9e450b9c8d5fddc3635bb75eaf65ab", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzRjMTc3Y2JiZDllNDUwYjljOGQ1ZmRkYzM2MzViYjc1ZWFmNjVhYg==", "commit": {"author": {"name": "Thomas Koenig", "email": "tkoenig@gcc.gnu.org", "date": "2007-11-20T21:57:04Z"}, "committer": {"name": "Thomas Koenig", "email": "tkoenig@gcc.gnu.org", "date": "2007-11-20T21:57:04Z"}, "message": "re PR fortran/32770 ([Meta-bug] -fdefault-integer-8 issues)\n\n2007-11-20  Thomas Koenig  <tkoenig@gcc.gnu.org>\n\n\tPR fortran/32770\n\t* gfortran.dg/record_marker_1.f90:  Explicitly set kinds\n\tso test passes with -frecord-marker=8.\n\t* gfortran.dg/integer_exponentiation_1.f90:  Likewise.\n\t* gfortran.dg/integer_exponentiation_2.f90:  Likewise.\n\t* gfortran.dg/integer_exponentiation_3.F90:  Likewise.\n\t* gfortran.dg/integer_exponentiation_5.F90:  Likewise.\n\t* gfortrand.dg/modulo_1.f90:  Likewise.\n\nFrom-SVN: r130322", "tree": {"sha": "48734cb82fda31c3d2e9f65f29c62990bb4f3667", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/48734cb82fda31c3d2e9f65f29c62990bb4f3667"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/74c177cbbd9e450b9c8d5fddc3635bb75eaf65ab", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/74c177cbbd9e450b9c8d5fddc3635bb75eaf65ab", "html_url": "https://github.com/Rust-GCC/gccrs/commit/74c177cbbd9e450b9c8d5fddc3635bb75eaf65ab", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/74c177cbbd9e450b9c8d5fddc3635bb75eaf65ab/comments", "author": null, "committer": null, "parents": [{"sha": "d8538159f1bccf61f14676b8a905aa7006ac5126", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d8538159f1bccf61f14676b8a905aa7006ac5126", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d8538159f1bccf61f14676b8a905aa7006ac5126"}], "stats": {"total": 62, "additions": 37, "deletions": 25}, "files": [{"sha": "bd293d102283c91982c8aad623760c0723f4133b", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/74c177cbbd9e450b9c8d5fddc3635bb75eaf65ab/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/74c177cbbd9e450b9c8d5fddc3635bb75eaf65ab/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=74c177cbbd9e450b9c8d5fddc3635bb75eaf65ab", "patch": "@@ -1,3 +1,14 @@\n+2007-11-20  Thomas Koenig  <tkoenig@gcc.gnu.org>\n+\n+\tPR fortran/32770\n+\t* gfortran.dg/record_marker_1.f90:  Explicitly set kinds\n+\tso test passes with -frecord-marker=8.\n+\t* gfortran.dg/integer_exponentiation_1.f90:  Likewise.\n+\t* gfortran.dg/integer_exponentiation_2.f90:  Likewise.\n+\t* gfortran.dg/integer_exponentiation_3.F90:  Likewise.\n+\t* gfortran.dg/integer_exponentiation_5.F90:  Likewise.\n+\t* gfortrand.dg/modulo_1.f90:  Likewise.\n+\n 2007-11-20  Richard Sandiford  <rsandifo@nildram.co.uk>\n \n \t* lib/target-supports.exp (check_effective_target_mips_soft_float):"}, {"sha": "bed7c6ab02a34383f5aabb6d23d25d8e81134224", "filename": "gcc/testsuite/gfortran.dg/integer_exponentiation_1.f90", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/74c177cbbd9e450b9c8d5fddc3635bb75eaf65ab/gcc%2Ftestsuite%2Fgfortran.dg%2Finteger_exponentiation_1.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/74c177cbbd9e450b9c8d5fddc3635bb75eaf65ab/gcc%2Ftestsuite%2Fgfortran.dg%2Finteger_exponentiation_1.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Finteger_exponentiation_1.f90?ref=74c177cbbd9e450b9c8d5fddc3635bb75eaf65ab", "patch": "@@ -2,5 +2,5 @@\n ! PR 30981 - this used to go into an endless loop during execution.\n program test\n   a = 3.0\n-  b = a**(-2147483647-1) ! { dg-warning \"Integer outside symmetric range\" }\n+  b = a**(-2147483647_4-1_4) ! { dg-warning \"Integer outside symmetric range\" }\n end program test"}, {"sha": "55d00ba28b87d65dec2ad0cef10ecf1560eee091", "filename": "gcc/testsuite/gfortran.dg/integer_exponentiation_2.f90", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/74c177cbbd9e450b9c8d5fddc3635bb75eaf65ab/gcc%2Ftestsuite%2Fgfortran.dg%2Finteger_exponentiation_2.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/74c177cbbd9e450b9c8d5fddc3635bb75eaf65ab/gcc%2Ftestsuite%2Fgfortran.dg%2Finteger_exponentiation_2.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Finteger_exponentiation_2.f90?ref=74c177cbbd9e450b9c8d5fddc3635bb75eaf65ab", "patch": "@@ -22,10 +22,11 @@ subroutine run_me(a, i, z)\n   call check_equal_i (i**2, i*i)\n   call check_equal_i (i**3, i*(i**2))\n \n-  call check_equal_i (int(i**0_8,kind=4), 1)\n-  call check_equal_i (int(i**1_8,kind=4), i)\n-  call check_equal_i (int(i**2_8,kind=4), i*i)\n-  call check_equal_i (int(i**3_8,kind=4), i*i*i)\n+  ! i has default integer kind.\n+  call check_equal_i (int(i**0_8,kind=kind(i)), 1)\n+  call check_equal_i (int(i**1_8,kind=kind(i)), i)\n+  call check_equal_i (int(i**2_8,kind=kind(i)), i*i)\n+  call check_equal_i (int(i**3_8,kind=kind(i)), i*i*i)\n \n   call check_equal_r (a**0.0, 1.0)\n   call check_equal_r (a**1.0, a)"}, {"sha": "3d95fb102cc8245c4ee5ead0a4bb9aa5aecece71", "filename": "gcc/testsuite/gfortran.dg/integer_exponentiation_3.F90", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/74c177cbbd9e450b9c8d5fddc3635bb75eaf65ab/gcc%2Ftestsuite%2Fgfortran.dg%2Finteger_exponentiation_3.F90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/74c177cbbd9e450b9c8d5fddc3635bb75eaf65ab/gcc%2Ftestsuite%2Fgfortran.dg%2Finteger_exponentiation_3.F90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Finteger_exponentiation_3.F90?ref=74c177cbbd9e450b9c8d5fddc3635bb75eaf65ab", "patch": "@@ -82,9 +82,9 @@ program test\n   TEST(1_8,0_8,i8)\n   TEST(-1,0,i4)\n   TEST(-1_8,0_8,i8)\n-  TEST(huge(0),0,i4)\n+  TEST(huge(0_4),0,i4)\n   TEST(huge(0_8),0_8,i8)\n-  TEST(-huge(0)-1,0,i4)\n+  TEST(-huge(0_4)-1,0,i4)\n   TEST(-huge(0_8)-1_8,0_8,i8)\n \n   TEST(1,1,i4)\n@@ -164,7 +164,7 @@ program test\n   TEST(2.0,-3_8,r4)\n \n   TEST(nearest(1.0,-1.0),0,r4)\n-  TEST(nearest(1.0,-1.0),huge(0),r4) ! { dg-warning \"Arithmetic underflow\" }\n+  TEST(nearest(1.0,-1.0),huge(0_4),r4) ! { dg-warning \"Arithmetic underflow\" }\n   TEST(nearest(1.0,-1.0),0_8,r4)\n   TEST(nearest(1.0_8,-1.0),huge(0_8),r8) ! { dg-warning \"Arithmetic underflow\" }\n "}, {"sha": "07127c6aa4e61549425a1038e0bb7c0a6c86633c", "filename": "gcc/testsuite/gfortran.dg/integer_exponentiation_5.F90", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/74c177cbbd9e450b9c8d5fddc3635bb75eaf65ab/gcc%2Ftestsuite%2Fgfortran.dg%2Finteger_exponentiation_5.F90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/74c177cbbd9e450b9c8d5fddc3635bb75eaf65ab/gcc%2Ftestsuite%2Fgfortran.dg%2Finteger_exponentiation_5.F90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Finteger_exponentiation_5.F90?ref=74c177cbbd9e450b9c8d5fddc3635bb75eaf65ab", "patch": "@@ -65,7 +65,7 @@ program test\n   TEST(3_8,43_8,i8)\n   TEST(-3_8,43_8,i8)\n \n-  TEST(17_8,int(huge(0),kind=8)+1,i8)\n+  TEST(17_8,int(huge(0_4),kind=8)+1,i8)\n \n !!!!! REAL BASE !!!!!\n   TEST(0.0,-1,r4)"}, {"sha": "52c3b0966b74c03e1110f0e40ae77ca94e53e8d7", "filename": "gcc/testsuite/gfortran.dg/modulo_1.f90", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/74c177cbbd9e450b9c8d5fddc3635bb75eaf65ab/gcc%2Ftestsuite%2Fgfortran.dg%2Fmodulo_1.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/74c177cbbd9e450b9c8d5fddc3635bb75eaf65ab/gcc%2Ftestsuite%2Fgfortran.dg%2Fmodulo_1.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fmodulo_1.f90?ref=74c177cbbd9e450b9c8d5fddc3635bb75eaf65ab", "patch": "@@ -1,6 +1,6 @@\n ! { dg-do compile }\n ! PR fortran/23912\n-  integer i4\n+  integer(kind=4) i4\n   integer(kind=8) i8\n \n   i4 = modulo(i4,i8) ! { dg-warning \"Extension\" }"}, {"sha": "5bcfbc611a5fdd3b7fd6620bd705218c0d3450ee", "filename": "gcc/testsuite/gfortran.dg/record_marker_1.f90", "status": "modified", "additions": 15, "deletions": 15, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/74c177cbbd9e450b9c8d5fddc3635bb75eaf65ab/gcc%2Ftestsuite%2Fgfortran.dg%2Frecord_marker_1.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/74c177cbbd9e450b9c8d5fddc3635bb75eaf65ab/gcc%2Ftestsuite%2Fgfortran.dg%2Frecord_marker_1.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Frecord_marker_1.f90?ref=74c177cbbd9e450b9c8d5fddc3635bb75eaf65ab", "patch": "@@ -3,36 +3,36 @@\n \n program main\n   implicit none\n-  integer :: i1, i2, i3\n+  integer(kind=4) :: i1, i2, i3\n \n   open(15,form=\"UNFORMATTED\")\n-  write (15) 1\n+  write (15) 1_4\n   close (15)\n   open (15,form=\"UNFORMATTED\",access=\"DIRECT\",recl=4)\n-  i1 = 1\n-  i2 = 2\n-  i3 = 3\n+  i1 = 1_4\n+  i2 = 2_4\n+  i3 = 3_4\n   read (15,rec=1) i1\n   read (15,rec=2) i2\n   read (15,rec=3) i3\n   close (15, status=\"DELETE\")\n-  if (i1 /= 4) call abort\n-  if (i2 /= 1) call abort\n-  if (i3 /= 4) call abort\n+  if (i1 /= 4_4) call abort\n+  if (i2 /= 1_4) call abort\n+  if (i3 /= 4_4) call abort\n \n   open(15,form=\"UNFORMATTED\",convert=\"SWAP\")\n-  write (15) 1\n+  write (15) 1_4\n   close (15)\n   open (15,form=\"UNFORMATTED\",access=\"DIRECT\",convert=\"SWAP\",recl=4)\n-  i1 = 1\n-  i2 = 2\n-  i3 = 3\n+  i1 = 1_4\n+  i2 = 2_4\n+  i3 = 3_4\n   read (15,rec=1) i1\n   read (15,rec=2) i2\n   read (15,rec=3) i3\n   close(15,status=\"DELETE\")\n-  if (i1 /= 4) call abort\n-  if (i2 /= 1) call abort\n-  if (i3 /= 4) call abort\n+  if (i1 /= 4_4) call abort\n+  if (i2 /= 1_4) call abort\n+  if (i3 /= 4_4) call abort\n \n end program main"}]}