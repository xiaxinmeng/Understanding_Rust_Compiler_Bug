{"sha": "1f838355766df4673e245f7bc17479919effa8ff", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWY4MzgzNTU3NjZkZjQ2NzNlMjQ1ZjdiYzE3NDc5OTE5ZWZmYThmZg==", "commit": {"author": {"name": "Kazu Hirata", "email": "kazu@cs.umass.edu", "date": "2004-11-13T21:11:04Z"}, "committer": {"name": "Kazu Hirata", "email": "kazu@gcc.gnu.org", "date": "2004-11-13T21:11:04Z"}, "message": "c-cppbuiltin.c, [...]: Fix comment typos.\n\n\t* c-cppbuiltin.c, cgraph.c, domwalk.h, except.c, gimplify.c,\n\tlambda-code.c, postreload.c, predict.c, tree-sra.c,\n\ttree-ssa-loop-manip.c, tree.c: Fix comment typos.\n\nFrom-SVN: r90596", "tree": {"sha": "ad31c07f0c92ca9821135e839011bb0784c3173f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ad31c07f0c92ca9821135e839011bb0784c3173f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1f838355766df4673e245f7bc17479919effa8ff", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1f838355766df4673e245f7bc17479919effa8ff", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1f838355766df4673e245f7bc17479919effa8ff", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1f838355766df4673e245f7bc17479919effa8ff/comments", "author": null, "committer": null, "parents": [{"sha": "e28d0cfbfb126fd6d89fbc7459c9d94c89554f55", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e28d0cfbfb126fd6d89fbc7459c9d94c89554f55", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e28d0cfbfb126fd6d89fbc7459c9d94c89554f55"}], "stats": {"total": 26, "additions": 15, "deletions": 11}, "files": [{"sha": "ef8f5357e35bc8dd355d54c4413558bcf33cc573", "filename": "gcc/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1f838355766df4673e245f7bc17479919effa8ff/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1f838355766df4673e245f7bc17479919effa8ff/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=1f838355766df4673e245f7bc17479919effa8ff", "patch": "@@ -3,6 +3,10 @@\n \t* bitmap.c, bitmap.h, expmed.c, tree-cfg.c: Fix comment\n \tformatting.\n \n+\t* c-cppbuiltin.c, cgraph.c, domwalk.h, except.c, gimplify.c,\n+\tlambda-code.c, postreload.c, predict.c, tree-sra.c,\n+\ttree-ssa-loop-manip.c, tree.c: Fix comment typos.\n+\n 2004-11-13  Kelley Cook  <kcook@gcc.gnu.org>\n \n \t* doc/install.texi (automake): Correctly document that everything now "}, {"sha": "cedf9e7a46e3e1fb3d3d266e5bbbfca3ba72e435", "filename": "gcc/c-cppbuiltin.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1f838355766df4673e245f7bc17479919effa8ff/gcc%2Fc-cppbuiltin.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1f838355766df4673e245f7bc17479919effa8ff/gcc%2Fc-cppbuiltin.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-cppbuiltin.c?ref=1f838355766df4673e245f7bc17479919effa8ff", "patch": "@@ -347,7 +347,7 @@ c_cpp_builtins (cpp_reader *pfile)\n        different from system to system.  */\n     builtin_define_with_int_value (\"__GXX_ABI_VERSION\", 999999);\n   else if (flag_abi_version == 1)\n-    /* Due to an historical accident, this version had the value\n+    /* Due to a historical accident, this version had the value\n        \"102\".  */\n     builtin_define_with_int_value (\"__GXX_ABI_VERSION\", 102);\n   else"}, {"sha": "8a570b394a1ac6a7748adb630a345da046aec9f3", "filename": "gcc/cgraph.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1f838355766df4673e245f7bc17479919effa8ff/gcc%2Fcgraph.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1f838355766df4673e245f7bc17479919effa8ff/gcc%2Fcgraph.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcgraph.c?ref=1f838355766df4673e245f7bc17479919effa8ff", "patch": "@@ -44,7 +44,7 @@ The callgraph:\n \n     The callgraph at the moment does not represent indirect calls or calls\n     from other compilation unit.  Flag NEEDED is set for each node that may\n-    be accessed in such a invisible way and it shall be considered an\n+    be accessed in such an invisible way and it shall be considered an\n     entry point to the callgraph.\n \n     Intraprocedural information:"}, {"sha": "fbf549bbd9842ad0dc2cc5ca2c10c12f9d538a00", "filename": "gcc/domwalk.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1f838355766df4673e245f7bc17479919effa8ff/gcc%2Fdomwalk.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1f838355766df4673e245f7bc17479919effa8ff/gcc%2Fdomwalk.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdomwalk.h?ref=1f838355766df4673e245f7bc17479919effa8ff", "patch": "@@ -55,7 +55,7 @@ struct dom_walk_data\n   /* Function to call before the statement walk occurring before the\n      recursive walk of the dominator children. \n \n-     This typically initializes an block local data and pushes that\n+     This typically initializes a block local data and pushes that\n      data onto BLOCK_DATA_STACK.  */\n   void (*before_dom_children_before_stmts) (struct dom_walk_data *,\n \t\t\t\t\t    basic_block);"}, {"sha": "c399eb11f7d715906853373bcada5ce9f3cb20a9", "filename": "gcc/except.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1f838355766df4673e245f7bc17479919effa8ff/gcc%2Fexcept.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1f838355766df4673e245f7bc17479919effa8ff/gcc%2Fexcept.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexcept.c?ref=1f838355766df4673e245f7bc17479919effa8ff", "patch": "@@ -1304,7 +1304,7 @@ emit_to_new_bb_before (rtx seq, rtx insn)\n   edge e;\n   edge_iterator ei;\n \n-  /* If there happens to be an fallthru edge (possibly created by cleanup_cfg\n+  /* If there happens to be a fallthru edge (possibly created by cleanup_cfg\n      call), we don't want it to go into newly created landing pad or other EH \n      construct.  */\n   for (ei = ei_start (BLOCK_FOR_INSN (insn)->preds); (e = ei_safe_edge (ei)); )"}, {"sha": "669ec9f127d842d6edad6254ec9a2dd0caf98959", "filename": "gcc/gimplify.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1f838355766df4673e245f7bc17479919effa8ff/gcc%2Fgimplify.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1f838355766df4673e245f7bc17479919effa8ff/gcc%2Fgimplify.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimplify.c?ref=1f838355766df4673e245f7bc17479919effa8ff", "patch": "@@ -724,7 +724,7 @@ unshare_expr (tree expr)\n   return expr;\n }\n \n-/* A terser interface for building a representation of a exception\n+/* A terser interface for building a representation of an exception\n    specification.  */\n \n tree"}, {"sha": "08f963e534b29e71de9020d7eca5c0dadbd53636", "filename": "gcc/lambda-code.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1f838355766df4673e245f7bc17479919effa8ff/gcc%2Flambda-code.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1f838355766df4673e245f7bc17479919effa8ff/gcc%2Flambda-code.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flambda-code.c?ref=1f838355766df4673e245f7bc17479919effa8ff", "patch": "@@ -53,7 +53,7 @@\n \n  A loop iteration space represents the points traversed by the loop.  A point in the\n  iteration space can be represented by a vector of size <loop depth>.  You can\n- therefore represent the iteration space as a integral combinations of a set\n+ therefore represent the iteration space as an integral combinations of a set\n  of basis vectors. \n \n  A loop iteration space is dense if every integer point between the loop"}, {"sha": "14dc71268837ed7b8723863ee358e09fd65e702e", "filename": "gcc/postreload.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1f838355766df4673e245f7bc17479919effa8ff/gcc%2Fpostreload.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1f838355766df4673e245f7bc17479919effa8ff/gcc%2Fpostreload.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fpostreload.c?ref=1f838355766df4673e245f7bc17479919effa8ff", "patch": "@@ -427,7 +427,7 @@ reload_cse_simplify_operands (rtx insn, rtx testreg)\n \t     extension.  Punt on this for now.  */\n \t  if (! set)\n \t    continue;\n-\t  /* If the destination is a also MEM or a STRICT_LOW_PART, no\n+\t  /* If the destination is also a MEM or a STRICT_LOW_PART, no\n \t     extension applies.\n \t     Also, if there is an explicit extension, we don't have to\n \t     worry about an implicit one.  */"}, {"sha": "944a5565f22c688929e23b179b2bf2f6aa742a0e", "filename": "gcc/predict.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1f838355766df4673e245f7bc17479919effa8ff/gcc%2Fpredict.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1f838355766df4673e245f7bc17479919effa8ff/gcc%2Fpredict.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fpredict.c?ref=1f838355766df4673e245f7bc17479919effa8ff", "patch": "@@ -919,7 +919,7 @@ expr_expected_value (tree expr, bitmap visited)\n \n \t      /* If this PHI has itself as an argument, we cannot\n \t\t determine the string length of this argument.  However,\n-\t\t if we can find a expected constant value for the other\n+\t\t if we can find an expected constant value for the other\n \t\t PHI args then we can still be sure that this is\n \t\t likely a constant.  So be optimistic and just\n \t\t continue with the next argument.  */"}, {"sha": "91314a5c83d2a0bb86f3d8c6357f4836f50aa8ea", "filename": "gcc/tree-sra.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1f838355766df4673e245f7bc17479919effa8ff/gcc%2Ftree-sra.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1f838355766df4673e245f7bc17479919effa8ff/gcc%2Ftree-sra.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-sra.c?ref=1f838355766df4673e245f7bc17479919effa8ff", "patch": "@@ -620,7 +620,7 @@ struct sra_walk_fns\n };\n \n #ifdef ENABLE_CHECKING\n-/* Invoked via walk_tree, if *TP contains an candidate decl, return it.  */\n+/* Invoked via walk_tree, if *TP contains a candidate decl, return it.  */\n \n static tree\n sra_find_candidate_decl (tree *tp, int *walk_subtrees,"}, {"sha": "22324949e9bfa5e248076117475929fc9e7cc4e0", "filename": "gcc/tree-ssa-loop-manip.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1f838355766df4673e245f7bc17479919effa8ff/gcc%2Ftree-ssa-loop-manip.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1f838355766df4673e245f7bc17479919effa8ff/gcc%2Ftree-ssa-loop-manip.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-loop-manip.c?ref=1f838355766df4673e245f7bc17479919effa8ff", "patch": "@@ -681,7 +681,7 @@ lv_adjust_loop_header_phi (basic_block first, basic_block second,\n \n /* Adjust entry edge for lv.\n    \n-  e is a incoming edge. \n+  e is an incoming edge. \n \n   --- edge e ---- > [second_head]\n "}, {"sha": "a05dab73f73b1dd29c62d4344c131bfabe5a5649", "filename": "gcc/tree.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1f838355766df4673e245f7bc17479919effa8ff/gcc%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1f838355766df4673e245f7bc17479919effa8ff/gcc%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.c?ref=1f838355766df4673e245f7bc17479919effa8ff", "patch": "@@ -4054,7 +4054,7 @@ associative_tree_code (enum tree_code code)\n   return false;\n }\n \n-/* Return true if CODE represents an commutative tree code.  Otherwise\n+/* Return true if CODE represents a commutative tree code.  Otherwise\n    return false.  */\n bool\n commutative_tree_code (enum tree_code code)"}]}