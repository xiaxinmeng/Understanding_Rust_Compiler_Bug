{"sha": "f1e18725591f12da43d0bb1a6ff93de9ee08b059", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjFlMTg3MjU1OTFmMTJkYTQzZDBiYjFhNmZmOTNkZTllZTA4YjA1OQ==", "commit": {"author": {"name": "Ian Lance Taylor", "email": "iant@google.com", "date": "2013-07-24T18:25:51Z"}, "committer": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2013-07-24T18:25:51Z"}, "message": "go-gcc.cc (Gcc_backend::non_zero_size_type): If a struct has a fields...\n\n\t* go-gcc.cc (Gcc_backend::non_zero_size_type): If a struct has a\n\tfields, recreate those fields with the first one with a non-zero\n\tsize.\n\nFrom-SVN: r201222", "tree": {"sha": "1e8d7d89f596b2528c8896b9976241413c2fcade", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1e8d7d89f596b2528c8896b9976241413c2fcade"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f1e18725591f12da43d0bb1a6ff93de9ee08b059", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f1e18725591f12da43d0bb1a6ff93de9ee08b059", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f1e18725591f12da43d0bb1a6ff93de9ee08b059", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f1e18725591f12da43d0bb1a6ff93de9ee08b059/comments", "author": null, "committer": null, "parents": [{"sha": "08d22f9b41e46aba888e694f380e78d05c4321a2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/08d22f9b41e46aba888e694f380e78d05c4321a2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/08d22f9b41e46aba888e694f380e78d05c4321a2"}], "stats": {"total": 55, "additions": 41, "deletions": 14}, "files": [{"sha": "db9d4443ac9a07986eb8df477acf7dc7780659ff", "filename": "gcc/go/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f1e18725591f12da43d0bb1a6ff93de9ee08b059/gcc%2Fgo%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f1e18725591f12da43d0bb1a6ff93de9ee08b059/gcc%2Fgo%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2FChangeLog?ref=f1e18725591f12da43d0bb1a6ff93de9ee08b059", "patch": "@@ -1,3 +1,9 @@\n+2013-07-24  Ian Lance Taylor  <iant@google.com>\n+\n+\t* go-gcc.cc (Gcc_backend::non_zero_size_type): If a struct has a\n+\tfields, recreate those fields with the first one with a non-zero\n+\tsize.\n+\n 2013-07-23  Ian Lance Taylor  <iant@google.com>\n \n \t* go-backend.c: Don't #include \"rtl.h\"."}, {"sha": "27c756e5496bc0122c0bdf75db8f2a0649e6691e", "filename": "gcc/go/go-gcc.cc", "status": "modified", "additions": 35, "deletions": 14, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f1e18725591f12da43d0bb1a6ff93de9ee08b059/gcc%2Fgo%2Fgo-gcc.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f1e18725591f12da43d0bb1a6ff93de9ee08b059/gcc%2Fgo%2Fgo-gcc.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgo-gcc.cc?ref=f1e18725591f12da43d0bb1a6ff93de9ee08b059", "patch": "@@ -1242,20 +1242,41 @@ Gcc_backend::non_zero_size_type(tree type)\n   switch (TREE_CODE(type))\n     {\n     case RECORD_TYPE:\n-      {\n-\tif (go_non_zero_struct == NULL_TREE)\n-\t  {\n-\t    type = make_node(RECORD_TYPE);\n-\t    tree field = build_decl(UNKNOWN_LOCATION, FIELD_DECL,\n-\t\t\t\t    get_identifier(\"dummy\"),\n-\t\t\t\t    boolean_type_node);\n-\t    DECL_CONTEXT(field) = type;\n-\t    TYPE_FIELDS(type) = field;\n-\t    layout_type(type);\n-\t    go_non_zero_struct = type;\n-\t  }\n-\treturn go_non_zero_struct;\n-      }\n+      if (TYPE_FIELDS(type) != NULL_TREE)\n+\t{\n+\t  tree ns = make_node(RECORD_TYPE);\n+\t  tree field_trees = NULL_TREE;\n+\t  tree *pp = &field_trees;\n+\t  for (tree field = TYPE_FIELDS(type);\n+\t       field != NULL_TREE;\n+\t       field = DECL_CHAIN(field))\n+\t    {\n+\t      tree ft = TREE_TYPE(field);\n+\t      if (field == TYPE_FIELDS(type))\n+\t\tft = non_zero_size_type(ft);\n+\t      tree f = build_decl(DECL_SOURCE_LOCATION(field), FIELD_DECL,\n+\t\t\t\t  DECL_NAME(field), ft);\n+\t      DECL_CONTEXT(f) = ns;\n+\t      *pp = f;\n+\t      pp = &DECL_CHAIN(f);\n+\t    }\n+\t  TYPE_FIELDS(ns) = field_trees;\n+\t  layout_type(ns);\n+\t  return ns;\n+\t}\n+\n+      if (go_non_zero_struct == NULL_TREE)\n+\t{\n+\t  type = make_node(RECORD_TYPE);\n+\t  tree field = build_decl(UNKNOWN_LOCATION, FIELD_DECL,\n+\t\t\t\t  get_identifier(\"dummy\"),\n+\t\t\t\t  boolean_type_node);\n+\t  DECL_CONTEXT(field) = type;\n+\t  TYPE_FIELDS(type) = field;\n+\t  layout_type(type);\n+\t  go_non_zero_struct = type;\n+\t}\n+      return go_non_zero_struct;\n \n     case ARRAY_TYPE:\n       {"}]}