{"sha": "8ec3e357d4b4bcccdf592d266004c1462ee5e96f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGVjM2UzNTdkNGI0YmNjY2RmNTkyZDI2NjAwNGMxNDYyZWU1ZTk2Zg==", "commit": {"author": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2008-03-13T10:50:12Z"}, "committer": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2008-03-13T10:50:12Z"}, "message": "Revert my previous commit.\n\nFrom-SVN: r133167", "tree": {"sha": "8973839a94b8d01865e0fe10ff0ab8d5224b7b62", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8973839a94b8d01865e0fe10ff0ab8d5224b7b62"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8ec3e357d4b4bcccdf592d266004c1462ee5e96f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8ec3e357d4b4bcccdf592d266004c1462ee5e96f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8ec3e357d4b4bcccdf592d266004c1462ee5e96f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8ec3e357d4b4bcccdf592d266004c1462ee5e96f/comments", "author": null, "committer": null, "parents": [{"sha": "8a6c843029229e6d289b1a0f31eedbceb3f73d62", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8a6c843029229e6d289b1a0f31eedbceb3f73d62", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8a6c843029229e6d289b1a0f31eedbceb3f73d62"}], "stats": {"total": 86, "additions": 26, "deletions": 60}, "files": [{"sha": "2fa006f4dcd3f3ae138fd436cefa403046648b65", "filename": "gcc/ChangeLog", "status": "modified", "additions": 0, "deletions": 16, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8ec3e357d4b4bcccdf592d266004c1462ee5e96f/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8ec3e357d4b4bcccdf592d266004c1462ee5e96f/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=8ec3e357d4b4bcccdf592d266004c1462ee5e96f", "patch": "@@ -1,19 +1,3 @@\n-2008-03-13  Uros Bizjak  <ubizjak@gmail.com>\n-\n-\tPR target/35553\n-\t* config/i386/i386.h (TARGET_CPU_CPP_BUILTINS): Define\n-\t__SSE_USE_INLINED_FUNC__ when using -flag-keep-inline-functions\n-\ttogether with optimization.\n-\t* config/i386/xmmintrin.h: Use __SSE_USE_INLINED_FUNC__ instead of\n-\t__OPTIMIZE__ to choose between inlined intrinsic SSE function having\n-\timmediate arguments and its equivalent macro definition.\n-\t* config/i386/bmintrin.h: Ditto.\n-\t* config/i386/smmintrin.h: Ditto.\n-\t* config/i386/tmmintrin.h: Ditto.\n-\t* config/i386/mmintrin-common.h: Ditto.\n-\t* config/i386/ammintrin.h: Ditto.\n-\t* config/i386/emmintrin.h: Ditto.\n-\n 2008-03-13  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR middle-end/35185"}, {"sha": "1351ebd915501b671819e62ba3864727beee94f0", "filename": "gcc/config/i386/ammintrin.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8ec3e357d4b4bcccdf592d266004c1462ee5e96f/gcc%2Fconfig%2Fi386%2Fammintrin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8ec3e357d4b4bcccdf592d266004c1462ee5e96f/gcc%2Fconfig%2Fi386%2Fammintrin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fammintrin.h?ref=8ec3e357d4b4bcccdf592d266004c1462ee5e96f", "patch": "@@ -55,7 +55,7 @@ _mm_extract_si64 (__m128i __X, __m128i __Y)\n   return (__m128i) __builtin_ia32_extrq ((__v2di) __X, (__v16qi) __Y);\n }\n \n-#ifdef __SSE_USE_INLINED_FUNC__\n+#ifdef __OPTIMIZE__\n static __inline __m128i __attribute__((__always_inline__, __artificial__))\n _mm_extracti_si64 (__m128i __X, unsigned const int __I, unsigned const int __L)\n {\n@@ -73,7 +73,7 @@ _mm_insert_si64 (__m128i __X,__m128i __Y)\n   return (__m128i) __builtin_ia32_insertq ((__v2di)__X, (__v2di)__Y);\n }\n \n-#ifdef __SSE_USE_INLINED_FUNC__\n+#ifdef __OPTIMIZE__\n static __inline __m128i __attribute__((__always_inline__, __artificial__))\n _mm_inserti_si64(__m128i __X, __m128i __Y, unsigned const int __I, unsigned const int __L)\n {"}, {"sha": "4254d0fc17c14c71f33bd2e4ac4497b62daadcc8", "filename": "gcc/config/i386/bmmintrin.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8ec3e357d4b4bcccdf592d266004c1462ee5e96f/gcc%2Fconfig%2Fi386%2Fbmmintrin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8ec3e357d4b4bcccdf592d266004c1462ee5e96f/gcc%2Fconfig%2Fi386%2Fbmmintrin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fbmmintrin.h?ref=8ec3e357d4b4bcccdf592d266004c1462ee5e96f", "patch": "@@ -350,7 +350,7 @@ _mm_rot_epi64(__m128i __A,  __m128i __B)\n \n \n /* Rotates - Immediate form */\n-#ifdef __SSE_USE_INLINED_FUNC__\n+#ifdef __OPTIMIZE__\n static __inline __m128i __attribute__((__always_inline__, __artificial__))\n _mm_roti_epi8(__m128i __A, const int __B)\n {"}, {"sha": "c5bbe8bf82ad265f9b262fd784d0975f7580ac20", "filename": "gcc/config/i386/emmintrin.h", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8ec3e357d4b4bcccdf592d266004c1462ee5e96f/gcc%2Fconfig%2Fi386%2Femmintrin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8ec3e357d4b4bcccdf592d266004c1462ee5e96f/gcc%2Fconfig%2Fi386%2Femmintrin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Femmintrin.h?ref=8ec3e357d4b4bcccdf592d266004c1462ee5e96f", "patch": "@@ -880,7 +880,7 @@ _mm_cvtss_sd (__m128d __A, __m128 __B)\n   return (__m128d)__builtin_ia32_cvtss2sd ((__v2df) __A, (__v4sf)__B);\n }\n \n-#ifdef __SSE_USE_INLINED_FUNC__\n+#ifdef __OPTIMIZE__\n static __inline __m128d __attribute__((__always_inline__, __artificial__))\n _mm_shuffle_pd(__m128d __A, __m128d __B, const int __mask)\n {\n@@ -1144,7 +1144,7 @@ _mm_srai_epi32 (__m128i __A, int __B)\n   return (__m128i)__builtin_ia32_psradi128 ((__v4si)__A, __B);\n }\n \n-#ifdef __SSE_USE_INLINED_FUNC__\n+#ifdef __OPTIMIZE__\n static __inline __m128i __attribute__((__always_inline__, __artificial__))\n _mm_srli_si128 (__m128i __A, const int __N)\n {\n@@ -1307,7 +1307,7 @@ _mm_cmpgt_epi32 (__m128i __A, __m128i __B)\n   return (__m128i)__builtin_ia32_pcmpgtd128 ((__v4si)__A, (__v4si)__B);\n }\n \n-#ifdef __SSE_USE_INLINED_FUNC__\n+#ifdef __OPTIMIZE__\n static __inline int __attribute__((__always_inline__, __artificial__))\n _mm_extract_epi16 (__m128i const __A, int const __N)\n {\n@@ -1363,7 +1363,7 @@ _mm_mulhi_epu16 (__m128i __A, __m128i __B)\n   return (__m128i)__builtin_ia32_pmulhuw128 ((__v8hi)__A, (__v8hi)__B);\n }\n \n-#ifdef __SSE_USE_INLINED_FUNC__\n+#ifdef __OPTIMIZE__\n static __inline __m128i __attribute__((__always_inline__, __artificial__))\n _mm_shufflehi_epi16 (__m128i __A, const int __mask)\n {"}, {"sha": "98cb72ac9215979de6abc5067f74c67681fe067c", "filename": "gcc/config/i386/i386.h", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8ec3e357d4b4bcccdf592d266004c1462ee5e96f/gcc%2Fconfig%2Fi386%2Fi386.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8ec3e357d4b4bcccdf592d266004c1462ee5e96f/gcc%2Fconfig%2Fi386%2Fi386.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.h?ref=8ec3e357d4b4bcccdf592d266004c1462ee5e96f", "patch": "@@ -691,11 +691,6 @@ extern const char *host_detect_local_cpu (int argc, const char **argv);\n \tbuiltin_define (\"__SSE_MATH__\");\t\t\t\\\n       if (TARGET_SSE_MATH && TARGET_SSE2)\t\t\t\\\n \tbuiltin_define (\"__SSE2_MATH__\");\t\t\t\\\n-\t\t\t\t\t\t\t\t\\\n-      /* Use inlined intrinsic SSE function having immediate\t\\\n-\t arguments instead of a macro definition.  */\t\t\\\n-      if (optimize && !flag_keep_inline_functions)\t\t\\\n-\tbuiltin_define (\"__SSE_USE_INLINED_FUNC__\");\t\t\\\n     }\t\t\t\t\t\t\t\t\\\n   while (0)\n "}, {"sha": "3be83335f296eb1ad73db600241a4af0e21281e6", "filename": "gcc/config/i386/mmintrin-common.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8ec3e357d4b4bcccdf592d266004c1462ee5e96f/gcc%2Fconfig%2Fi386%2Fmmintrin-common.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8ec3e357d4b4bcccdf592d266004c1462ee5e96f/gcc%2Fconfig%2Fi386%2Fmmintrin-common.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fmmintrin-common.h?ref=8ec3e357d4b4bcccdf592d266004c1462ee5e96f", "patch": "@@ -92,7 +92,7 @@ _mm_testnzc_si128 (__m128i __M, __m128i __V)\n \n /* Packed/scalar double precision floating point rounding.  */\n \n-#ifdef __SSE_USE_INLINED_FUNC__\n+#ifdef __OPTIMIZE__\n static __inline __m128d __attribute__((__always_inline__, __artificial__))\n _mm_round_pd (__m128d __V, const int __M)\n {\n@@ -117,7 +117,7 @@ _mm_round_sd(__m128d __D, __m128d __V, const int __M)\n \n /* Packed/scalar single precision floating point rounding.  */\n \n-#ifdef __SSE_USE_INLINED_FUNC__\n+#ifdef __OPTIMIZE__\n static __inline __m128 __attribute__((__always_inline__, __artificial__))\n _mm_round_ps (__m128 __V, const int __M)\n {"}, {"sha": "08bfd107232ea347a8e29087ab9fe08b41a72555", "filename": "gcc/config/i386/smmintrin.h", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8ec3e357d4b4bcccdf592d266004c1462ee5e96f/gcc%2Fconfig%2Fi386%2Fsmmintrin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8ec3e357d4b4bcccdf592d266004c1462ee5e96f/gcc%2Fconfig%2Fi386%2Fsmmintrin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fsmmintrin.h?ref=8ec3e357d4b4bcccdf592d266004c1462ee5e96f", "patch": "@@ -44,7 +44,7 @@\n /* Integer blend instructions - select data from 2 sources using\n    constant/variable mask.  */\n \n-#ifdef __SSE_USE_INLINED_FUNC__\n+#ifdef __OPTIMIZE__\n static __inline __m128i __attribute__((__always_inline__, __artificial__))\n _mm_blend_epi16 (__m128i __X, __m128i __Y, const int __M)\n {\n@@ -69,7 +69,7 @@ _mm_blendv_epi8 (__m128i __X, __m128i __Y, __m128i __M)\n /* Single precision floating point blend instructions - select data\n    from 2 sources using constant/variable mask.  */\n \n-#ifdef __SSE_USE_INLINED_FUNC__\n+#ifdef __OPTIMIZE__\n static __inline __m128 __attribute__((__always_inline__, __artificial__))\n _mm_blend_ps (__m128 __X, __m128 __Y, const int __M)\n {\n@@ -94,7 +94,7 @@ _mm_blendv_ps (__m128 __X, __m128 __Y, __m128 __M)\n /* Double precision floating point blend instructions - select data\n    from 2 sources using constant/variable mask.  */\n \n-#ifdef __SSE_USE_INLINED_FUNC__\n+#ifdef __OPTIMIZE__\n static __inline __m128d __attribute__((__always_inline__, __artificial__))\n _mm_blend_pd (__m128d __X, __m128d __Y, const int __M)\n {\n@@ -119,7 +119,7 @@ _mm_blendv_pd (__m128d __X, __m128d __Y, __m128d __M)\n /* Dot product instructions with mask-defined summing and zeroing parts\n    of result.  */\n \n-#ifdef __SSE_USE_INLINED_FUNC__\n+#ifdef __OPTIMIZE__\n static __inline __m128 __attribute__((__always_inline__, __artificial__))\n _mm_dp_ps (__m128 __X, __m128 __Y, const int __M)\n {\n@@ -224,7 +224,7 @@ _mm_mul_epi32 (__m128i __X, __m128i __Y)\n    index, the bits [5-4] define D index, and bits [3-0] define\n    zeroing mask for D.  */\n \n-#ifdef __SSE_USE_INLINED_FUNC__\n+#ifdef __OPTIMIZE__\n static __inline __m128 __attribute__((__always_inline__, __artificial__))\n _mm_insert_ps (__m128 __D, __m128 __S, const int __N)\n {\n@@ -244,7 +244,7 @@ _mm_insert_ps (__m128 __D, __m128 __S, const int __N)\n /* Extract binary representation of single precision float from packed\n    single precision array element of X selected by index N.  */\n \n-#ifdef __SSE_USE_INLINED_FUNC__\n+#ifdef __OPTIMIZE__\n static __inline int __attribute__((__always_inline__, __artificial__))\n _mm_extract_ps (__m128 __X, const int __N)\n {\n@@ -277,7 +277,7 @@ _mm_extract_ps (__m128 __X, const int __N)\n /* Insert integer, S, into packed integer array element of D\n    selected by index N.  */\n \n-#ifdef __SSE_USE_INLINED_FUNC__\n+#ifdef __OPTIMIZE__\n static __inline __m128i __attribute__((__always_inline__, __artificial__))\n _mm_insert_epi8 (__m128i __D, int __S, const int __N)\n {\n@@ -319,7 +319,7 @@ _mm_insert_epi64 (__m128i __D, long long __S, const int __N)\n /* Extract integer from packed integer array element of X selected by\n    index N.  */\n \n-#ifdef __SSE_USE_INLINED_FUNC__\n+#ifdef __OPTIMIZE__\n static __inline int __attribute__((__always_inline__, __artificial__))\n _mm_extract_epi8 (__m128i __X, const int __N)\n {\n@@ -447,7 +447,7 @@ _mm_packus_epi32 (__m128i __X, __m128i __Y)\n    byte integers in the first 2 operands.  Starting offsets within\n    operands are determined by the 3rd mask operand.  */\n \n-#ifdef __SSE_USE_INLINED_FUNC__\n+#ifdef __OPTIMIZE__\n static __inline __m128i __attribute__((__always_inline__, __artificial__))\n _mm_mpsadbw_epu8 (__m128i __X, __m128i __Y, const int __M)\n {\n@@ -497,7 +497,7 @@ _mm_stream_load_si128 (__m128i *__X)\n \n /* Intrinsics for text/string processing.  */\n \n-#ifdef __SSE_USE_INLINED_FUNC__\n+#ifdef __OPTIMIZE__\n static __inline __m128i __attribute__((__always_inline__, __artificial__))\n _mm_cmpistrm (__m128i __X, __m128i __Y, const int __M)\n {\n@@ -550,7 +550,7 @@ _mm_cmpestri (__m128i __X, int __LX, __m128i __Y, int __LY, const int __M)\n /* Intrinsics for text/string processing and reading values of\n    EFlags.  */\n \n-#ifdef __SSE_USE_INLINED_FUNC__\n+#ifdef __OPTIMIZE__\n static __inline int __attribute__((__always_inline__, __artificial__))\n _mm_cmpistra (__m128i __X, __m128i __Y, const int __M)\n {"}, {"sha": "0e6a0d49e6f0a59a4b487cd794ad7aaf3d94512f", "filename": "gcc/config/i386/tmmintrin.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8ec3e357d4b4bcccdf592d266004c1462ee5e96f/gcc%2Fconfig%2Fi386%2Ftmmintrin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8ec3e357d4b4bcccdf592d266004c1462ee5e96f/gcc%2Fconfig%2Fi386%2Ftmmintrin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Ftmmintrin.h?ref=8ec3e357d4b4bcccdf592d266004c1462ee5e96f", "patch": "@@ -181,7 +181,7 @@ _mm_sign_pi32 (__m64 __X, __m64 __Y)\n   return (__m64) __builtin_ia32_psignd ((__v2si)__X, (__v2si)__Y);\n }\n \n-#ifdef __SSE_USE_INLINED_FUNC__\n+#ifdef __OPTIMIZE__\n static __inline __m128i __attribute__((__always_inline__, __artificial__))\n _mm_alignr_epi8(__m128i __X, __m128i __Y, const int __N)\n {"}, {"sha": "cfe55ef28e8dfeae1c382c87636e0394e84905bc", "filename": "gcc/config/i386/xmmintrin.h", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8ec3e357d4b4bcccdf592d266004c1462ee5e96f/gcc%2Fconfig%2Fi386%2Fxmmintrin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8ec3e357d4b4bcccdf592d266004c1462ee5e96f/gcc%2Fconfig%2Fi386%2Fxmmintrin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fxmmintrin.h?ref=8ec3e357d4b4bcccdf592d266004c1462ee5e96f", "patch": "@@ -716,7 +716,7 @@ _mm_cvtps_pi8(__m128 __A)\n }\n \n /* Selects four specific SPFP values from A and B based on MASK.  */\n-#ifdef __SSE_USE_INLINED_FUNC__\n+#ifdef __OPTIMIZE__\n static __inline __m128 __attribute__((__always_inline__, __artificial__))\n _mm_shuffle_ps (__m128 __A, __m128 __B, int const __mask)\n {\n@@ -992,7 +992,7 @@ _mm_move_ss (__m128 __A, __m128 __B)\n }\n \n /* Extracts one of the four words of A.  The selector N must be immediate.  */\n-#ifdef __SSE_USE_INLINED_FUNC__\n+#ifdef __OPTIMIZE__\n static __inline int __attribute__((__always_inline__, __artificial__))\n _mm_extract_pi16 (__m64 const __A, int const __N)\n {\n@@ -1013,7 +1013,7 @@ _m_pextrw (__m64 const __A, int const __N)\n \n /* Inserts word D into one of four words of A.  The selector N must be\n    immediate.  */\n-#ifdef __SSE_USE_INLINED_FUNC__\n+#ifdef __OPTIMIZE__\n static __inline __m64 __attribute__((__always_inline__, __artificial__))\n _mm_insert_pi16 (__m64 const __A, int const __D, int const __N)\n {\n@@ -1114,7 +1114,7 @@ _m_pmulhuw (__m64 __A, __m64 __B)\n \n /* Return a combination of the four 16-bit values in A.  The selector\n    must be an immediate.  */\n-#ifdef __SSE_USE_INLINED_FUNC__\n+#ifdef __OPTIMIZE__\n static __inline __m64 __attribute__((__always_inline__, __artificial__))\n _mm_shuffle_pi16 (__m64 __A, int const __N)\n {\n@@ -1191,7 +1191,7 @@ _m_psadbw (__m64 __A, __m64 __B)\n \n /* Loads one cache line from address P to a location \"closer\" to the\n    processor.  The selector I specifies the type of prefetch operation.  */\n-#ifdef __SSE_USE_INLINED_FUNC__\n+#ifdef __OPTIMIZE__\n static __inline void __attribute__((__always_inline__, __artificial__))\n _mm_prefetch (const void *__P, enum _mm_hint __I)\n {"}, {"sha": "4467bb9adef03fbc97e2a28456b5d695035a1626", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8ec3e357d4b4bcccdf592d266004c1462ee5e96f/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8ec3e357d4b4bcccdf592d266004c1462ee5e96f/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=8ec3e357d4b4bcccdf592d266004c1462ee5e96f", "patch": "@@ -1,8 +1,3 @@\n-2008-03-13  Uros Bizjak  <ubizjak@gmail.com>\n-\n-\tPR target/35553\n-\t* g++.dg/other/i386-3.C: New test.\n-\n 2008-03-13  Paolo Bonzini  <bonzini@gnu.org>\n \n \tPR tree-opt/35422"}, {"sha": "8ebc74e628cf6ab148823fe2eb8b5483515e79ac", "filename": "gcc/testsuite/g++.dg/other/i386-3.C", "status": "removed", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8a6c843029229e6d289b1a0f31eedbceb3f73d62/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Fi386-3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8a6c843029229e6d289b1a0f31eedbceb3f73d62/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Fi386-3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Fi386-3.C?ref=8a6c843029229e6d289b1a0f31eedbceb3f73d62", "patch": "@@ -1,8 +0,0 @@\n-/* Test that {,x,e,p,t,s,a,b}mmintrin.h, mm3dnow.h and mm_malloc.h are\n-   usable with -O -fkeep-inline-functions.  */\n-/* { dg-do compile { target i?86-*-* x86_64-*-* } } */\n-/* { dg-options \"-O -fkeep-inline-functions -march=k8 -m3dnow -msse4 -msse5\" } */\n-\n-#include <bmmintrin.h>\n-#include <smmintrin.h>\n-#include <mm3dnow.h>"}]}