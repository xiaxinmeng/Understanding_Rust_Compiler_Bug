{"sha": "7a5e4956cc026cba54159d5c764486ac4151db85", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2E1ZTQ5NTZjYzAyNmNiYTU0MTU5ZDVjNzY0NDg2YWM0MTUxZGI4NQ==", "commit": {"author": {"name": "Cesar Philippidis", "email": "cesar@codesourcery.com", "date": "2015-11-06T02:03:48Z"}, "committer": {"name": "Cesar Philippidis", "email": "cesar@gcc.gnu.org", "date": "2015-11-06T02:03:48Z"}, "message": "gimplify.c (gimplify_scan_omp_clauses): Add support for OMP_CLAUSE_TILE.\n\n\tgcc/\n\t* gimplify.c (gimplify_scan_omp_clauses): Add support for\n\tOMP_CLAUSE_TILE.  Update handling of OMP_CLAUSE_INDEPENDENT.\n\t(gimplify_adjust_omp_clauses): Likewise.\n\t* omp-low.c (scan_sharing_clauses): Add support for OMP_CLAUSE_TILE.\n\t* tree-core.h (enum omp_clause_code): Add OMP_CLAUSE_TILE.\n\t* tree-pretty-print.c (dump_omp_clause): Handle OMP_CLAUSE_TILE.\n\t* tree.c (omp_clause_num_ops): Add an entry for OMP_CLAUSE_TILE.\n\t(omp_clause_code_name): Likewise.\n\t(walk_tree_1): Handle OMP_CLAUSE_TILE.\n\t* tree.h (OMP_TILE_LIST): New macro.\n\n\tgcc/c-family/\n\t* c-omp.c (c_oacc_split_loop_clauses): Make TILE, GANG, WORKER, VECTOR,\n\tAUTO, SEQ, INDEPENDENT and PRIVATE loop clauses.  Associate REDUCTION\n\tclauses with parallel and kernels and loops.\n\t* c-pragma.h (enum pragma_omp_clause): Add entries for\n\tPRAGMA_OACC_CLAUSE_{INDEPENDENT,TILE,DEFAULT}.\n\t* pt.c (tsubst_omp_clauses): Add support for OMP_CLAUSE_{NUM_GANGS,\n\tNUM_WORKERS,VECTOR_LENGTH,GANG,WORKER,VECTOR,ASYNC,WAIT,TILE,AUTO,\n\tINDEPENDENT,SEQ}. \n\t(tsubst_expr): Add support for OMP_CLAUSE_{KERNELS,PARALLEL,LOOP}.\n\n\tgcc/c/\n\t* c-parser.c (c_parser_omp_clause_name): Add support for\n\tPRAGMA_OACC_CLAUSE_INDEPENDENT and PRAGMA_OACC_CLAUSE_TILE.\n\t(c_parser_omp_clause_default): Add is_oacc argument. Handle\n\tdefault(none) in OpenACC.\n\t(c_parser_oacc_shape_clause): Allow pointer variables as gang static\n\targuments.\n\t(c_parser_oacc_clause_tile): New function.\n\t(c_parser_oacc_all_clauses): Add support for OMP_CLAUSE_DEFAULT,\n\tOMP_CLAUSE_INDEPENDENT and OMP_CLAUSE_TILE.\n\t(OACC_LOOP_CLAUSE_MASK): Add PRAGMA_OACC_CLAUSE_{PRIVATE,INDEPENDENT,\n\tTILE}.\n\t(OACC_KERNELS_MASK): Add PRAGMA_OACC_CLAUSE_DEFAULT.\n\t(OACC_PARALLEL_MASK): Add PRAGMA_OACC_CLAUSE_{DEFAULT,PRIVATE,\n\tFIRSTPRIVATE}.\n\t(c_parser_omp_all_clauses): Update call to c_parser_omp_clause_default.\n\t(c_parser_oacc_update): Update the error message for missing clauses.\n\t* c-typeck.c (c_finish_omp_clauses): Add support for OMP_CLAUSE_TILE\n\tand OMP_CLAUSE_INDEPENDENT.\n\n\tgcc/cp/\n\t* parser.c (cp_parser_omp_clause_name): Add support for\n\tPRAGMA_OACC_CLAUSE_INDEPENDENT and PRAGMA_OACC_CLAUSE_TILE.\n\t(cp_parser_oacc_shape_clause): Allow pointer variables as gang static\n\targuments.\n\t(cp_parser_oacc_clause_tile): New function.\n\t(cp_parser_omp_clause_default): Add is_oacc argument. Handle\n\tdefault(none) in OpenACC.\n\t(cp_parser_oacc_all_clauses): Add support for\n\t(cp_parser_omp_all_clauses): Update call to\n\tcp_parser_omp_clause_default.\n\tPRAGMA_OACC_CLAUSE_{DEFAULT,INDEPENDENT,TILE,PRIVATE,FIRSTPRIVATE}.\n\t(OACC_LOOP_CLAUSE_MASK): Add PRAGMA_OACC_CLAUSE_{PRIVATE,INDEPENDENT,\n\tTILE}.\n\t(OACC_KERNELS_MASK): Add PRAGMA_OACC_CLAUSE_DEFAULT.\n\t(OACC_PARALLEL_MASK): Add PRAGMA_OACC_CLAUSE_{DEFAULT,PRIVATE,\n\tFIRSTPRIVATE}.\n\t(cp_parser_oacc_update): Update the error message for missing clauses.\n\t* semantics.c (finish_omp_clauses): Add support for\n\tOMP_CLAUSE_INDEPENDENT and OMP_CLAUSE_TILE.\n\n\tgcc/fortran/\n\t* openmp.c (gfc_match_omp_clauses): Update support for the tile\n\tand default clauses in OpenACC.\n\t(gfc_match_oacc_update): Error when data clauses are supplied.\n\t(oacc_compatible_clauses): Delete.\n\t(resolve_omp_clauses): Give special care for OpenACC reductions.\n\tAlso update error reporting for the tile clause.\n\t(resolve_oacc_loop_blocks): Update error reporting for the tile clause.\n\t* trans-openmp.c (gfc_trans_omp_clauses): Update OMP_CLAUSE_SEQ. Add\n\tOMP_CLAUSE_{AUTO,TILE} and add support the the gang static argument.\n\t(gfc_trans_oacc_combined_directive): Update the list of clauses which\n\tare split to acc loops.\n\n\tgcc/testsuite/\n\t* c-c++-common/goacc/combined-directives.c: New test.\n\t* c-c++-common/goacc/loop-clauses.c: New test.\n\t* c-c++-common/goacc/tile.c: New test.\n\t* c-c++-common/goacc/loop-shape.c: Add test for pointer variable\n\tas gang static arguments.\n\t* c-c++-common/goacc/update-1.c: Adjust expected error message.\n\t* g++.dg/goacc/template.C: New test.\n\t* gfortran.dg/goacc/combined-directives.f90: New test.\n\t* gfortran.dg/goacc/default.f95: New test.\n\t* gfortran.dg/goacc/default_none.f95: New test.\n\t* gfortran.dg/goacc/firstprivate-1.f95: New test.\n\t* gfortran.dg/goacc/gang-static.f95: New test.\n\t* gfortran.dg/goacc/kernels-loop-inner.f95: New test.\n\t* gfortran.dg/goacc/kernels-loops-adjacent.f95: New test.\n\t* gfortran.dg/goacc/list.f95: Update test.\n\t* gfortran.dg/goacc/loop-2.f95: Likewise.\n\t* gfortran.dg/goacc/loop-4.f95: New test.\n\t* gfortran.dg/goacc/loop-5.f95: New test.\n\t* gfortran.dg/goacc/loop-6.f95: New test.\n\t* gfortran.dg/goacc/loop-tree-1.f90: Update test.\n\t* gfortran.dg/goacc/multi-clause.f90: New test.\n\t* gfortran.dg/goacc/parallel-tree.f95: Update test.\n\t* gfortran.dg/goacc/update.f95: New test.\n\n\nCo-Authored-By: James Norris <jnorris@codesourcery.com>\nCo-Authored-By: Nathan Sidwell <nathan@codesourcery.com>\nCo-Authored-By: Thomas Schwinge <thomas@codesourcery.com>\nCo-Authored-By: Tom de Vries <tom@codesourcery.com>\n\nFrom-SVN: r229832", "tree": {"sha": "2f50525608c6a6a2a595620ad902d2efc85ab031", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2f50525608c6a6a2a595620ad902d2efc85ab031"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7a5e4956cc026cba54159d5c764486ac4151db85", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7a5e4956cc026cba54159d5c764486ac4151db85", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7a5e4956cc026cba54159d5c764486ac4151db85", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7a5e4956cc026cba54159d5c764486ac4151db85/comments", "author": {"login": "cesarjp", "id": 4576177, "node_id": "MDQ6VXNlcjQ1NzYxNzc=", "avatar_url": "https://avatars.githubusercontent.com/u/4576177?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cesarjp", "html_url": "https://github.com/cesarjp", "followers_url": "https://api.github.com/users/cesarjp/followers", "following_url": "https://api.github.com/users/cesarjp/following{/other_user}", "gists_url": "https://api.github.com/users/cesarjp/gists{/gist_id}", "starred_url": "https://api.github.com/users/cesarjp/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cesarjp/subscriptions", "organizations_url": "https://api.github.com/users/cesarjp/orgs", "repos_url": "https://api.github.com/users/cesarjp/repos", "events_url": "https://api.github.com/users/cesarjp/events{/privacy}", "received_events_url": "https://api.github.com/users/cesarjp/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "906f9ad995368b4891186c07ed3c5c2fd5f53bea", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/906f9ad995368b4891186c07ed3c5c2fd5f53bea", "html_url": "https://github.com/Rust-GCC/gccrs/commit/906f9ad995368b4891186c07ed3c5c2fd5f53bea"}], "stats": {"total": 1938, "additions": 1840, "deletions": 98}, "files": [{"sha": "f01e8ec12630c12ab133c1136e90c6149b209d51", "filename": "gcc/ChangeLog", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a5e4956cc026cba54159d5c764486ac4151db85/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a5e4956cc026cba54159d5c764486ac4151db85/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=7a5e4956cc026cba54159d5c764486ac4151db85", "patch": "@@ -1,3 +1,19 @@\n+2015-11-05  Cesar Philippidis  <cesar@codesourcery.com>\n+\t    Thomas Schwinge  <thomas@codesourcery.com>\n+\t    James Norris  <jnorris@codesourcery.com>\n+\n+\n+\t* gimplify.c (gimplify_scan_omp_clauses): Add support for\n+\tOMP_CLAUSE_TILE.  Update handling of OMP_CLAUSE_INDEPENDENT.\n+\t(gimplify_adjust_omp_clauses): Likewise.\n+\t* omp-low.c (scan_sharing_clauses): Add support for OMP_CLAUSE_TILE.\n+\t* tree-core.h (enum omp_clause_code): Add OMP_CLAUSE_TILE.\n+\t* tree-pretty-print.c (dump_omp_clause): Handle OMP_CLAUSE_TILE.\n+\t* tree.c (omp_clause_num_ops): Add an entry for OMP_CLAUSE_TILE.\n+\t(omp_clause_code_name): Likewise.\n+\t(walk_tree_1): Handle OMP_CLAUSE_TILE.\n+\t* tree.h (OMP_TILE_LIST): New macro.\n+\n 2015-11-05  Martin Sebor  <msebor@redhat.com>\n \n \tPR c++/67942"}, {"sha": "cc9a6420407eb92158de8308512f470f52d3964a", "filename": "gcc/c-family/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a5e4956cc026cba54159d5c764486ac4151db85/gcc%2Fc-family%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a5e4956cc026cba54159d5c764486ac4151db85/gcc%2Fc-family%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2FChangeLog?ref=7a5e4956cc026cba54159d5c764486ac4151db85", "patch": "@@ -1,3 +1,17 @@\n+2015-11-05  Cesar Philippidis  <cesar@codesourcery.com>\n+\t    Thomas Schwinge  <thomas@codesourcery.com>\n+\t    James Norris  <jnorris@codesourcery.com>\n+\n+\t* c-omp.c (c_oacc_split_loop_clauses): Make TILE, GANG, WORKER, VECTOR,\n+\tAUTO, SEQ, INDEPENDENT and PRIVATE loop clauses.  Associate REDUCTION\n+\tclauses with parallel and kernels and loops.\n+\t* c-pragma.h (enum pragma_omp_clause): Add entries for\n+\tPRAGMA_OACC_CLAUSE_{INDEPENDENT,TILE,DEFAULT}.\n+\t* pt.c (tsubst_omp_clauses): Add support for OMP_CLAUSE_{NUM_GANGS,\n+\tNUM_WORKERS,VECTOR_LENGTH,GANG,WORKER,VECTOR,ASYNC,WAIT,TILE,AUTO,\n+\tINDEPENDENT,SEQ}.\n+\t(tsubst_expr): Add support for OMP_CLAUSE_{KERNELS,PARALLEL,LOOP}.\n+\n 2015-11-05  Martin Sebor  <msebor@redhat.com>\n \n \tPR c++/67942"}, {"sha": "3e93b590fdb47506c989eafa71f00c6e3c49f127", "filename": "gcc/c-family/c-omp.c", "status": "modified", "additions": 17, "deletions": 2, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a5e4956cc026cba54159d5c764486ac4151db85/gcc%2Fc-family%2Fc-omp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a5e4956cc026cba54159d5c764486ac4151db85/gcc%2Fc-family%2Fc-omp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-omp.c?ref=7a5e4956cc026cba54159d5c764486ac4151db85", "patch": "@@ -867,7 +867,7 @@ c_omp_check_loop_iv_exprs (location_t stmt_loc, tree declv, tree decl,\n tree\n c_oacc_split_loop_clauses (tree clauses, tree *not_loop_clauses)\n {\n-  tree next, loop_clauses;\n+  tree next, loop_clauses, t;\n \n   loop_clauses = *not_loop_clauses = NULL_TREE;\n   for (; clauses ; clauses = next)\n@@ -876,12 +876,27 @@ c_oacc_split_loop_clauses (tree clauses, tree *not_loop_clauses)\n \n       switch (OMP_CLAUSE_CODE (clauses))\n         {\n+\t  /* Loop clauses.  */\n \tcase OMP_CLAUSE_COLLAPSE:\n-\tcase OMP_CLAUSE_REDUCTION:\n+\tcase OMP_CLAUSE_TILE:\n+\tcase OMP_CLAUSE_GANG:\n+\tcase OMP_CLAUSE_WORKER:\n+\tcase OMP_CLAUSE_VECTOR:\n+\tcase OMP_CLAUSE_AUTO:\n+\tcase OMP_CLAUSE_SEQ:\n+\tcase OMP_CLAUSE_INDEPENDENT:\n+\tcase OMP_CLAUSE_PRIVATE:\n \t  OMP_CLAUSE_CHAIN (clauses) = loop_clauses;\n \t  loop_clauses = clauses;\n \t  break;\n \n+\t  /* Reductions belong in both constructs.  */\n+\tcase OMP_CLAUSE_REDUCTION:\n+\t  t = copy_node (clauses);\n+\t  OMP_CLAUSE_CHAIN (t) = loop_clauses;\n+\t  loop_clauses = t;\n+\n+\t  /* Parallel/kernels clauses.  */\n \tdefault:\n \t  OMP_CLAUSE_CHAIN (clauses) = *not_loop_clauses;\n \t  *not_loop_clauses = clauses;"}, {"sha": "953c4e31d04cf22657a3f7cf8d928ee33f927e2e", "filename": "gcc/c-family/c-pragma.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a5e4956cc026cba54159d5c764486ac4151db85/gcc%2Fc-family%2Fc-pragma.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a5e4956cc026cba54159d5c764486ac4151db85/gcc%2Fc-family%2Fc-pragma.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-pragma.h?ref=7a5e4956cc026cba54159d5c764486ac4151db85", "patch": "@@ -153,6 +153,7 @@ enum pragma_omp_clause {\n   PRAGMA_OACC_CLAUSE_DEVICEPTR,\n   PRAGMA_OACC_CLAUSE_GANG,\n   PRAGMA_OACC_CLAUSE_HOST,\n+  PRAGMA_OACC_CLAUSE_INDEPENDENT,\n   PRAGMA_OACC_CLAUSE_NUM_GANGS,\n   PRAGMA_OACC_CLAUSE_NUM_WORKERS,\n   PRAGMA_OACC_CLAUSE_PRESENT,\n@@ -162,13 +163,15 @@ enum pragma_omp_clause {\n   PRAGMA_OACC_CLAUSE_PRESENT_OR_CREATE,\n   PRAGMA_OACC_CLAUSE_SELF,\n   PRAGMA_OACC_CLAUSE_SEQ,\n+  PRAGMA_OACC_CLAUSE_TILE,\n   PRAGMA_OACC_CLAUSE_VECTOR,\n   PRAGMA_OACC_CLAUSE_VECTOR_LENGTH,\n   PRAGMA_OACC_CLAUSE_WAIT,\n   PRAGMA_OACC_CLAUSE_WORKER,\n   PRAGMA_OACC_CLAUSE_COLLAPSE = PRAGMA_OMP_CLAUSE_COLLAPSE,\n   PRAGMA_OACC_CLAUSE_COPYIN = PRAGMA_OMP_CLAUSE_COPYIN,\n   PRAGMA_OACC_CLAUSE_DEVICE = PRAGMA_OMP_CLAUSE_DEVICE,\n+  PRAGMA_OACC_CLAUSE_DEFAULT = PRAGMA_OMP_CLAUSE_DEFAULT,\n   PRAGMA_OACC_CLAUSE_FIRSTPRIVATE = PRAGMA_OMP_CLAUSE_FIRSTPRIVATE,\n   PRAGMA_OACC_CLAUSE_IF = PRAGMA_OMP_CLAUSE_IF,\n   PRAGMA_OACC_CLAUSE_PRIVATE = PRAGMA_OMP_CLAUSE_PRIVATE,"}, {"sha": "c734a81f45ccc9b34c931312783290b50bd737bf", "filename": "gcc/c/ChangeLog", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a5e4956cc026cba54159d5c764486ac4151db85/gcc%2Fc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a5e4956cc026cba54159d5c764486ac4151db85/gcc%2Fc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2FChangeLog?ref=7a5e4956cc026cba54159d5c764486ac4151db85", "patch": "@@ -1,3 +1,26 @@\n+2015-11-05  Cesar Philippidis  <cesar@codesourcery.com>\n+\t    Thomas Schwinge  <thomas@codesourcery.com>\n+\t    James Norris  <jnorris@codesourcery.com>\n+\n+\t* c-parser.c (c_parser_omp_clause_name): Add support for\n+\tPRAGMA_OACC_CLAUSE_INDEPENDENT and PRAGMA_OACC_CLAUSE_TILE.\n+\t(c_parser_omp_clause_default): Add is_oacc argument. Handle\n+\tdefault(none) in OpenACC.\n+\t(c_parser_oacc_shape_clause): Allow pointer variables as gang static\n+\targuments.\n+\t(c_parser_oacc_clause_tile): New function.\n+\t(c_parser_oacc_all_clauses): Add support for OMP_CLAUSE_DEFAULT,\n+\tOMP_CLAUSE_INDEPENDENT and OMP_CLAUSE_TILE.\n+\t(OACC_LOOP_CLAUSE_MASK): Add PRAGMA_OACC_CLAUSE_{PRIVATE,INDEPENDENT,\n+\tTILE}.\n+\t(OACC_KERNELS_MASK): Add PRAGMA_OACC_CLAUSE_DEFAULT.\n+\t(OACC_PARALLEL_MASK): Add PRAGMA_OACC_CLAUSE_{DEFAULT,PRIVATE,\n+\tFIRSTPRIVATE}.\n+\t(c_parser_omp_all_clauses): Update call to c_parser_omp_clause_default.\n+\t(c_parser_oacc_update): Update the error message for missing clauses.\n+\t* c-typeck.c (c_finish_omp_clauses): Add support for OMP_CLAUSE_TILE\n+\tand OMP_CLAUSE_INDEPENDENT.\n+\n 2015-11-05  Marek Polacek  <polacek@redhat.com>\n \n \tPR c/68090"}, {"sha": "23d0107eaf79573742cb81b173d4fe25d2a686ed", "filename": "gcc/c/c-parser.c", "status": "modified", "additions": 114, "deletions": 9, "changes": 123, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a5e4956cc026cba54159d5c764486ac4151db85/gcc%2Fc%2Fc-parser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a5e4956cc026cba54159d5c764486ac4151db85/gcc%2Fc%2Fc-parser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2Fc-parser.c?ref=7a5e4956cc026cba54159d5c764486ac4151db85", "patch": "@@ -10008,6 +10008,8 @@ c_parser_omp_clause_name (c_parser *parser)\n \tcase 'i':\n \t  if (!strcmp (\"inbranch\", p))\n \t    result = PRAGMA_OMP_CLAUSE_INBRANCH;\n+\t  else if (!strcmp (\"independent\", p))\n+\t    result = PRAGMA_OACC_CLAUSE_INDEPENDENT;\n \t  else if (!strcmp (\"is_device_ptr\", p))\n \t    result = PRAGMA_OMP_CLAUSE_IS_DEVICE_PTR;\n \t  break;\n@@ -10104,6 +10106,8 @@ c_parser_omp_clause_name (c_parser *parser)\n \t    result = PRAGMA_OMP_CLAUSE_THREAD_LIMIT;\n \t  else if (!strcmp (\"threads\", p))\n \t    result = PRAGMA_OMP_CLAUSE_THREADS;\n+\t  else if (!strcmp (\"tile\", p))\n+\t    result = PRAGMA_OACC_CLAUSE_TILE;\n \t  else if (!strcmp (\"to\", p))\n \t    result = PRAGMA_OMP_CLAUSE_TO;\n \t  break;\n@@ -10541,10 +10545,13 @@ c_parser_omp_clause_copyprivate (c_parser *parser, tree list)\n }\n \n /* OpenMP 2.5:\n-   default ( shared | none ) */\n+   default ( shared | none )\n+\n+   OpenACC 2.0:\n+   default (none) */\n \n static tree\n-c_parser_omp_clause_default (c_parser *parser, tree list)\n+c_parser_omp_clause_default (c_parser *parser, tree list, bool is_oacc)\n {\n   enum omp_clause_default_kind kind = OMP_CLAUSE_DEFAULT_UNSPECIFIED;\n   location_t loc = c_parser_peek_token (parser)->location;\n@@ -10565,7 +10572,7 @@ c_parser_omp_clause_default (c_parser *parser, tree list)\n \t  break;\n \n \tcase 's':\n-\t  if (strcmp (\"shared\", p) != 0)\n+\t  if (strcmp (\"shared\", p) != 0 || is_oacc)\n \t    goto invalid_kind;\n \t  kind = OMP_CLAUSE_DEFAULT_SHARED;\n \t  break;\n@@ -10579,7 +10586,10 @@ c_parser_omp_clause_default (c_parser *parser, tree list)\n   else\n     {\n     invalid_kind:\n-      c_parser_error (parser, \"expected %<none%> or %<shared%>\");\n+      if (is_oacc)\n+\tc_parser_error (parser, \"expected %<none%>\");\n+      else\n+\tc_parser_error (parser, \"expected %<none%> or %<shared%>\");\n     }\n   c_parser_skip_until_found (parser, CPP_CLOSE_PAREN, \"expected %<)%>\");\n \n@@ -11236,7 +11246,10 @@ c_parser_oacc_shape_clause (c_parser *parser, omp_clause_code kind,\n \t\t}\n \n \t      /* Check for the '*' argument.  */\n-\t      if (c_parser_next_token_is (parser, CPP_MULT))\n+\t      if (c_parser_next_token_is (parser, CPP_MULT)\n+\t\t  && (c_parser_peek_2nd_token (parser)->type == CPP_COMMA\n+\t\t      || c_parser_peek_2nd_token (parser)->type\n+\t\t         == CPP_CLOSE_PAREN))\n \t\t{\n \t\t  c_parser_consume_token (parser);\n \t\t  ops[idx] = integer_minus_one_node;\n@@ -11378,6 +11391,79 @@ c_parser_oacc_clause_async (c_parser *parser, tree list)\n   return list;\n }\n \n+/* OpenACC 2.0:\n+   tile ( size-expr-list ) */\n+\n+static tree\n+c_parser_oacc_clause_tile (c_parser *parser, tree list)\n+{\n+  tree c, expr = error_mark_node;\n+  location_t loc, expr_loc;\n+  tree tile = NULL_TREE;\n+\n+  check_no_duplicate_clause (list, OMP_CLAUSE_TILE, \"tile\");\n+\n+  loc = c_parser_peek_token (parser)->location;\n+  if (!c_parser_require (parser, CPP_OPEN_PAREN, \"expected %<(%>\"))\n+    return list;\n+\n+  do\n+    {\n+      if (c_parser_next_token_is (parser, CPP_MULT)\n+\t  && (c_parser_peek_2nd_token (parser)->type == CPP_COMMA\n+\t      || c_parser_peek_2nd_token (parser)->type == CPP_CLOSE_PAREN))\n+\t{\n+\t  c_parser_consume_token (parser);\n+\t  expr = integer_minus_one_node;\n+\t}\n+      else\n+\t{\n+\t  expr_loc = c_parser_peek_token (parser)->location;\n+\t  expr = c_parser_expr_no_commas (parser, NULL).value;\n+\n+\t  if (expr == error_mark_node)\n+\t    {\n+\t      c_parser_skip_until_found (parser, CPP_CLOSE_PAREN,\n+\t\t\t\t\t \"expected %<)%>\");\n+\t      return list;\n+\t    }\n+\n+\t  if (!INTEGRAL_TYPE_P (TREE_TYPE (expr)))\n+\t    {\n+\t      c_parser_error (parser, \"%<tile%> value must be integral\");\n+\t      return list;\n+\t    }\n+\n+\t  mark_exp_read (expr);\n+\t  expr = c_fully_fold (expr, false, NULL);\n+\n+\t  /* Attempt to statically determine when expr isn't positive.  */\n+\t  c = fold_build2_loc (expr_loc, LE_EXPR, boolean_type_node, expr,\n+\t\t\t       build_int_cst (TREE_TYPE (expr), 0));\n+\t  protected_set_expr_location (c, expr_loc);\n+\t  if (c == boolean_true_node)\n+\t    {\n+\t      warning_at (expr_loc, 0,\"%<tile%> value must be positive\");\n+\t      expr = integer_one_node;\n+\t    }\n+\t}\n+\n+      tile = tree_cons (NULL_TREE, expr, tile);\n+      if (c_parser_next_token_is (parser, CPP_COMMA))\n+\tc_parser_consume_token (parser);\n+    }\n+  while (c_parser_next_token_is_not (parser, CPP_CLOSE_PAREN));\n+\n+  /* Consume the trailing ')'.  */\n+  c_parser_consume_token (parser);\n+\n+  c = build_omp_clause (loc, OMP_CLAUSE_TILE);\n+  tile = nreverse (tile);\n+  OMP_CLAUSE_TILE_LIST (c) = tile;\n+  OMP_CLAUSE_CHAIN (c) = list;\n+  return c;\n+}\n+\n /* OpenACC:\n    wait ( int-expr-list ) */\n \n@@ -12605,6 +12691,10 @@ c_parser_oacc_all_clauses (c_parser *parser, omp_clause_mask mask,\n \t  clauses = c_parser_oacc_data_clause (parser, c_kind, clauses);\n \t  c_name = \"delete\";\n \t  break;\n+\tcase PRAGMA_OMP_CLAUSE_DEFAULT:\n+\t  clauses = c_parser_omp_clause_default (parser, clauses, true);\n+\t  c_name = \"default\";\n+\t  break;\n \tcase PRAGMA_OACC_CLAUSE_DEVICE:\n \t  clauses = c_parser_oacc_data_clause (parser, c_kind, clauses);\n \t  c_name = \"device\";\n@@ -12630,6 +12720,11 @@ c_parser_oacc_all_clauses (c_parser *parser, omp_clause_mask mask,\n \t  clauses = c_parser_omp_clause_if (parser, clauses, false);\n \t  c_name = \"if\";\n \t  break;\n+\tcase PRAGMA_OACC_CLAUSE_INDEPENDENT:\n+\t  clauses = c_parser_oacc_simple_clause (parser, OMP_CLAUSE_INDEPENDENT,\n+\t\t\t\t\t\tclauses);\n+\t  c_name = \"independent\";\n+\t  break;\n \tcase PRAGMA_OACC_CLAUSE_NUM_GANGS:\n \t  clauses = c_parser_omp_clause_num_gangs (parser, clauses);\n \t  c_name = \"num_gangs\";\n@@ -12675,6 +12770,10 @@ c_parser_oacc_all_clauses (c_parser *parser, omp_clause_mask mask,\n \t\t\t\t\t\tclauses);\n \t  c_name = \"seq\";\n \t  break;\n+\tcase PRAGMA_OACC_CLAUSE_TILE:\n+\t  clauses = c_parser_oacc_clause_tile (parser, clauses);\n+\t  c_name = \"tile\";\n+\t  break;\n \tcase PRAGMA_OACC_CLAUSE_VECTOR:\n \t  c_name = \"vector\";\n \t  clauses = c_parser_oacc_shape_clause (parser, OMP_CLAUSE_VECTOR,\n@@ -12756,7 +12855,7 @@ c_parser_omp_all_clauses (c_parser *parser, omp_clause_mask mask,\n \t  c_name = \"copyprivate\";\n \t  break;\n \tcase PRAGMA_OMP_CLAUSE_DEFAULT:\n-\t  clauses = c_parser_omp_clause_default (parser, clauses);\n+\t  clauses = c_parser_omp_clause_default (parser, clauses, false);\n \t  c_name = \"default\";\n \t  break;\n \tcase PRAGMA_OMP_CLAUSE_FIRSTPRIVATE:\n@@ -13169,13 +13268,15 @@ c_parser_oacc_enter_exit_data (c_parser *parser, bool enter)\n \n #define OACC_LOOP_CLAUSE_MASK\t\t\t\t\t\t\\\n \t( (OMP_CLAUSE_MASK_1 << PRAGMA_OACC_CLAUSE_COLLAPSE)\t\t\\\n+\t| (OMP_CLAUSE_MASK_1 << PRAGMA_OACC_CLAUSE_PRIVATE)\t\t\\\n+\t| (OMP_CLAUSE_MASK_1 << PRAGMA_OACC_CLAUSE_REDUCTION)\t\t\\\n \t| (OMP_CLAUSE_MASK_1 << PRAGMA_OACC_CLAUSE_GANG)\t\t\\\n \t| (OMP_CLAUSE_MASK_1 << PRAGMA_OACC_CLAUSE_WORKER)\t\t\\\n \t| (OMP_CLAUSE_MASK_1 << PRAGMA_OACC_CLAUSE_VECTOR)\t\t\\\n \t| (OMP_CLAUSE_MASK_1 << PRAGMA_OACC_CLAUSE_AUTO)\t\t\\\n+\t| (OMP_CLAUSE_MASK_1 << PRAGMA_OACC_CLAUSE_INDEPENDENT) \t\\\n \t| (OMP_CLAUSE_MASK_1 << PRAGMA_OACC_CLAUSE_SEQ)\t\t\t\\\n-\t| (OMP_CLAUSE_MASK_1 << PRAGMA_OACC_CLAUSE_REDUCTION) )\n-\n+\t| (OMP_CLAUSE_MASK_1 << PRAGMA_OACC_CLAUSE_TILE) )\n static tree\n c_parser_oacc_loop (location_t loc, c_parser *parser, char *p_name,\n \t\t    omp_clause_mask mask, tree *cclauses)\n@@ -13220,6 +13321,7 @@ c_parser_oacc_loop (location_t loc, c_parser *parser, char *p_name,\n \t| (OMP_CLAUSE_MASK_1 << PRAGMA_OACC_CLAUSE_COPYIN)\t\t\\\n \t| (OMP_CLAUSE_MASK_1 << PRAGMA_OACC_CLAUSE_COPYOUT)\t\t\\\n \t| (OMP_CLAUSE_MASK_1 << PRAGMA_OACC_CLAUSE_CREATE)\t\t\\\n+\t| (OMP_CLAUSE_MASK_1 << PRAGMA_OACC_CLAUSE_DEFAULT)\t\t\\\n \t| (OMP_CLAUSE_MASK_1 << PRAGMA_OACC_CLAUSE_DEVICEPTR)\t\t\\\n \t| (OMP_CLAUSE_MASK_1 << PRAGMA_OACC_CLAUSE_IF)\t\t\t\\\n \t| (OMP_CLAUSE_MASK_1 << PRAGMA_OACC_CLAUSE_PRESENT)\t\t\\\n@@ -13235,8 +13337,11 @@ c_parser_oacc_loop (location_t loc, c_parser *parser, char *p_name,\n \t| (OMP_CLAUSE_MASK_1 << PRAGMA_OACC_CLAUSE_COPYIN)\t\t\\\n \t| (OMP_CLAUSE_MASK_1 << PRAGMA_OACC_CLAUSE_COPYOUT)\t\t\\\n \t| (OMP_CLAUSE_MASK_1 << PRAGMA_OACC_CLAUSE_CREATE)\t\t\\\n+\t| (OMP_CLAUSE_MASK_1 << PRAGMA_OACC_CLAUSE_DEFAULT)\t\t\\\n \t| (OMP_CLAUSE_MASK_1 << PRAGMA_OACC_CLAUSE_DEVICEPTR)\t\t\\\n \t| (OMP_CLAUSE_MASK_1 << PRAGMA_OACC_CLAUSE_IF)\t\t\t\\\n+\t| (OMP_CLAUSE_MASK_1 << PRAGMA_OACC_CLAUSE_PRIVATE)\t\t\\\n+\t| (OMP_CLAUSE_MASK_1 << PRAGMA_OACC_CLAUSE_FIRSTPRIVATE)\t\\\n \t| (OMP_CLAUSE_MASK_1 << PRAGMA_OACC_CLAUSE_NUM_GANGS)\t\t\\\n \t| (OMP_CLAUSE_MASK_1 << PRAGMA_OACC_CLAUSE_NUM_WORKERS)\t\t\\\n \t| (OMP_CLAUSE_MASK_1 << PRAGMA_OACC_CLAUSE_PRESENT)\t\t\\\n@@ -13318,7 +13423,7 @@ c_parser_oacc_update (c_parser *parser)\n     {\n       error_at (loc,\n \t\t\"%<#pragma acc update%> must contain at least one \"\n-\t\t\"%<device%> or %<host/self%> clause\");\n+\t\t\"%<device%> or %<host%> or %<self%> clause\");\n       return;\n     }\n "}, {"sha": "33f5ead829f5c65331b97190b167a993e39b2372", "filename": "gcc/c/c-typeck.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a5e4956cc026cba54159d5c764486ac4151db85/gcc%2Fc%2Fc-typeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a5e4956cc026cba54159d5c764486ac4151db85/gcc%2Fc%2Fc-typeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2Fc-typeck.c?ref=7a5e4956cc026cba54159d5c764486ac4151db85", "patch": "@@ -13011,10 +13011,12 @@ c_finish_omp_clauses (tree clauses, bool is_omp, bool declare_simd)\n \tcase OMP_CLAUSE_ASYNC:\n \tcase OMP_CLAUSE_WAIT:\n \tcase OMP_CLAUSE_AUTO:\n+\tcase OMP_CLAUSE_INDEPENDENT:\n \tcase OMP_CLAUSE_SEQ:\n \tcase OMP_CLAUSE_GANG:\n \tcase OMP_CLAUSE_WORKER:\n \tcase OMP_CLAUSE_VECTOR:\n+\tcase OMP_CLAUSE_TILE:\n \t  pc = &OMP_CLAUSE_CHAIN (c);\n \t  continue;\n "}, {"sha": "e780c868b623c88106d853a378e60096600463f6", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a5e4956cc026cba54159d5c764486ac4151db85/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a5e4956cc026cba54159d5c764486ac4151db85/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=7a5e4956cc026cba54159d5c764486ac4151db85", "patch": "@@ -1,3 +1,27 @@\n+2015-11-05  Cesar Philippidis  <cesar@codesourcery.com>\n+\t    Thomas Schwinge  <thomas@codesourcery.com>\n+\t    James Norris  <jnorris@codesourcery.com>\n+\n+\t* parser.c (cp_parser_omp_clause_name): Add support for\n+\tPRAGMA_OACC_CLAUSE_INDEPENDENT and PRAGMA_OACC_CLAUSE_TILE.\n+\t(cp_parser_oacc_shape_clause): Allow pointer variables as gang static\n+\targuments.\n+\t(cp_parser_oacc_clause_tile): New function.\n+\t(cp_parser_omp_clause_default): Add is_oacc argument. Handle\n+\tdefault(none) in OpenACC.\n+\t(cp_parser_oacc_all_clauses): Add support for\n+\t(cp_parser_omp_all_clauses): Update call to\n+\tcp_parser_omp_clause_default.\n+\tPRAGMA_OACC_CLAUSE_{DEFAULT,INDEPENDENT,TILE,PRIVATE,FIRSTPRIVATE}.\n+\t(OACC_LOOP_CLAUSE_MASK): Add PRAGMA_OACC_CLAUSE_{PRIVATE,INDEPENDENT,\n+\tTILE}.\n+\t(OACC_KERNELS_MASK): Add PRAGMA_OACC_CLAUSE_DEFAULT.\n+\t(OACC_PARALLEL_MASK): Add PRAGMA_OACC_CLAUSE_{DEFAULT,PRIVATE,\n+\tFIRSTPRIVATE}.\n+\t(cp_parser_oacc_update): Update the error message for missing clauses.\n+\t* semantics.c (finish_omp_clauses): Add support for\n+\tOMP_CLAUSE_INDEPENDENT and OMP_CLAUSE_TILE.\n+\n 2015-11-05  Martin Sebor  <msebor@redhat.com>\n \n \tPR c++/67942"}, {"sha": "c6f57297e72bbd02a06bed6a76022064d9331e60", "filename": "gcc/cp/parser.c", "status": "modified", "additions": 99, "deletions": 8, "changes": 107, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a5e4956cc026cba54159d5c764486ac4151db85/gcc%2Fcp%2Fparser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a5e4956cc026cba54159d5c764486ac4151db85/gcc%2Fcp%2Fparser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparser.c?ref=7a5e4956cc026cba54159d5c764486ac4151db85", "patch": "@@ -29125,6 +29125,8 @@ cp_parser_omp_clause_name (cp_parser *parser)\n \tcase 'i':\n \t  if (!strcmp (\"inbranch\", p))\n \t    result = PRAGMA_OMP_CLAUSE_INBRANCH;\n+\t  else if (!strcmp (\"independent\", p))\n+\t    result = PRAGMA_OACC_CLAUSE_INDEPENDENT;\n \t  else if (!strcmp (\"is_device_ptr\", p))\n \t    result = PRAGMA_OMP_CLAUSE_IS_DEVICE_PTR;\n \t  break;\n@@ -29219,6 +29221,8 @@ cp_parser_omp_clause_name (cp_parser *parser)\n \t    result = PRAGMA_OMP_CLAUSE_THREAD_LIMIT;\n \t  else if (!strcmp (\"threads\", p))\n \t    result = PRAGMA_OMP_CLAUSE_THREADS;\n+\t  else if (!strcmp (\"tile\", p))\n+\t    result = PRAGMA_OACC_CLAUSE_TILE;\n \t  else if (!strcmp (\"to\", p))\n \t    result = PRAGMA_OMP_CLAUSE_TO;\n \t  break;\n@@ -29684,7 +29688,10 @@ cp_parser_oacc_shape_clause (cp_parser *parser, omp_clause_code kind,\n \t\t}\n \n \t      /* Check for the '*' argument.  */\n-\t      if (cp_lexer_next_token_is (lexer, CPP_MULT))\n+\t      if (cp_lexer_next_token_is (lexer, CPP_MULT)\n+\t\t  && (cp_lexer_nth_token_is (parser->lexer, 2, CPP_COMMA)\n+\t\t      || cp_lexer_nth_token_is (parser->lexer, 2,\n+\t\t\t\t\t\tCPP_CLOSE_PAREN)))\n \t\t{\n \t\t  cp_lexer_consume_token (lexer);\n \t\t  ops[idx] = integer_minus_one_node;\n@@ -29752,6 +29759,52 @@ cp_parser_oacc_shape_clause (cp_parser *parser, omp_clause_code kind,\n   return list;\n }\n \n+/* OpenACC 2.0:\n+   tile ( size-expr-list ) */\n+\n+static tree\n+cp_parser_oacc_clause_tile (cp_parser *parser, location_t clause_loc, tree list)\n+{\n+  tree c, expr = error_mark_node;\n+  tree tile = NULL_TREE;\n+\n+  check_no_duplicate_clause (list, OMP_CLAUSE_TILE, \"tile\", clause_loc);\n+\n+  if (!cp_parser_require (parser, CPP_OPEN_PAREN, RT_OPEN_PAREN))\n+    return list;\n+\n+  do\n+    {\n+      if (cp_lexer_next_token_is (parser->lexer, CPP_MULT)\n+\t  && (cp_lexer_nth_token_is (parser->lexer, 2, CPP_COMMA)\n+\t      || cp_lexer_nth_token_is (parser->lexer, 2, CPP_CLOSE_PAREN)))\n+\t{\n+\t  cp_lexer_consume_token (parser->lexer);\n+\t  expr = integer_minus_one_node;\n+\t}\n+      else\n+\texpr = cp_parser_assignment_expression (parser, NULL, false, false);\n+\n+      if (expr == error_mark_node)\n+\treturn list;\n+\n+      tile = tree_cons (NULL_TREE, expr, tile);\n+\n+      if (cp_lexer_next_token_is (parser->lexer, CPP_COMMA))\n+\tcp_lexer_consume_token (parser->lexer);\n+    }\n+  while (cp_lexer_next_token_is_not (parser->lexer, CPP_CLOSE_PAREN));\n+\n+  /* Consume the trailing ')'.  */\n+  cp_lexer_consume_token (parser->lexer);\n+\n+  c = build_omp_clause (clause_loc, OMP_CLAUSE_TILE);\n+  tile = nreverse (tile);\n+  OMP_CLAUSE_TILE_LIST (c) = tile;\n+  OMP_CLAUSE_CHAIN (c) = list;\n+  return c;\n+}\n+\n /* OpenACC 2.0\n    Parse wait clause or directive parameters.  */\n \n@@ -29859,10 +29912,14 @@ cp_parser_omp_clause_collapse (cp_parser *parser, tree list, location_t location\n }\n \n /* OpenMP 2.5:\n-   default ( shared | none ) */\n+   default ( shared | none )\n+\n+   OpenACC 2.0\n+   default (none) */\n \n static tree\n-cp_parser_omp_clause_default (cp_parser *parser, tree list, location_t location)\n+cp_parser_omp_clause_default (cp_parser *parser, tree list,\n+\t\t\t      location_t location, bool is_oacc)\n {\n   enum omp_clause_default_kind kind = OMP_CLAUSE_DEFAULT_UNSPECIFIED;\n   tree c;\n@@ -29883,7 +29940,7 @@ cp_parser_omp_clause_default (cp_parser *parser, tree list, location_t location)\n \t  break;\n \n \tcase 's':\n-\t  if (strcmp (\"shared\", p) != 0)\n+\t  if (strcmp (\"shared\", p) != 0 || is_oacc)\n \t    goto invalid_kind;\n \t  kind = OMP_CLAUSE_DEFAULT_SHARED;\n \t  break;\n@@ -29897,7 +29954,10 @@ cp_parser_omp_clause_default (cp_parser *parser, tree list, location_t location)\n   else\n     {\n     invalid_kind:\n-      cp_parser_error (parser, \"expected %<none%> or %<shared%>\");\n+      if (is_oacc)\n+\tcp_parser_error (parser, \"expected %<none%>\");\n+      else\n+\tcp_parser_error (parser, \"expected %<none%> or %<shared%>\");\n     }\n \n   if (!cp_parser_require (parser, CPP_CLOSE_PAREN, RT_CLOSE_PAREN))\n@@ -31444,6 +31504,10 @@ cp_parser_oacc_all_clauses (cp_parser *parser, omp_clause_mask mask,\n \t  clauses = cp_parser_oacc_data_clause (parser, c_kind, clauses);\n \t  c_name = \"delete\";\n \t  break;\n+\tcase PRAGMA_OMP_CLAUSE_DEFAULT:\n+\t  clauses = cp_parser_omp_clause_default (parser, clauses, here, true);\n+\t  c_name = \"default\";\n+\t  break;\n \tcase PRAGMA_OACC_CLAUSE_DEVICE:\n \t  clauses = cp_parser_oacc_data_clause (parser, c_kind, clauses);\n \t  c_name = \"device\";\n@@ -31452,6 +31516,11 @@ cp_parser_oacc_all_clauses (cp_parser *parser, omp_clause_mask mask,\n \t  clauses = cp_parser_oacc_data_clause_deviceptr (parser, clauses);\n \t  c_name = \"deviceptr\";\n \t  break;\n+\tcase PRAGMA_OACC_CLAUSE_FIRSTPRIVATE:\n+\t  clauses = cp_parser_omp_var_list (parser, OMP_CLAUSE_FIRSTPRIVATE,\n+\t\t\t\t\t    clauses);\n+\t  c_name = \"firstprivate\";\n+\t  break;\n \tcase PRAGMA_OACC_CLAUSE_GANG:\n \t  c_name = \"gang\";\n \t  clauses = cp_parser_oacc_shape_clause (parser, OMP_CLAUSE_GANG,\n@@ -31465,6 +31534,12 @@ cp_parser_oacc_all_clauses (cp_parser *parser, omp_clause_mask mask,\n \t  clauses = cp_parser_omp_clause_if (parser, clauses, here, false);\n \t  c_name = \"if\";\n \t  break;\n+\tcase PRAGMA_OACC_CLAUSE_INDEPENDENT:\n+\t  clauses = cp_parser_oacc_simple_clause (parser,\n+\t\t\t\t\t\t  OMP_CLAUSE_INDEPENDENT,\n+\t\t\t\t\t\t  clauses, here);\n+\t  c_name = \"independent\";\n+\t  break;\n \tcase PRAGMA_OACC_CLAUSE_NUM_GANGS:\n \t  code = OMP_CLAUSE_NUM_GANGS;\n \t  c_name = \"num_gangs\";\n@@ -31497,6 +31572,11 @@ cp_parser_oacc_all_clauses (cp_parser *parser, omp_clause_mask mask,\n \t  clauses = cp_parser_oacc_data_clause (parser, c_kind, clauses);\n \t  c_name = \"present_or_create\";\n \t  break;\n+\tcase PRAGMA_OACC_CLAUSE_PRIVATE:\n+\t  clauses = cp_parser_omp_var_list (parser, OMP_CLAUSE_PRIVATE,\n+\t\t\t\t\t    clauses);\n+\t  c_name = \"private\";\n+\t  break;\n \tcase PRAGMA_OACC_CLAUSE_REDUCTION:\n \t  clauses = cp_parser_omp_clause_reduction (parser, clauses);\n \t  c_name = \"reduction\";\n@@ -31510,6 +31590,10 @@ cp_parser_oacc_all_clauses (cp_parser *parser, omp_clause_mask mask,\n \t\t\t\t\t\t clauses, here);\n \t  c_name = \"seq\";\n \t  break;\n+\tcase PRAGMA_OACC_CLAUSE_TILE:\n+\t  clauses = cp_parser_oacc_clause_tile (parser, here, clauses);\n+\t  c_name = \"tile\";\n+\t  break;\n \tcase PRAGMA_OACC_CLAUSE_VECTOR:\n \t  c_name = \"vector\";\n \t  clauses = cp_parser_oacc_shape_clause (parser, OMP_CLAUSE_VECTOR,\n@@ -31598,7 +31682,7 @@ cp_parser_omp_all_clauses (cp_parser *parser, omp_clause_mask mask,\n \t  break;\n \tcase PRAGMA_OMP_CLAUSE_DEFAULT:\n \t  clauses = cp_parser_omp_clause_default (parser, clauses,\n-\t\t\t\t\t\t  token->location);\n+\t\t\t\t\t\t  token->location, false);\n \t  c_name = \"default\";\n \t  break;\n \tcase PRAGMA_OMP_CLAUSE_FINAL:\n@@ -34493,12 +34577,15 @@ cp_parser_oacc_enter_exit_data (cp_parser *parser, cp_token *pragma_tok,\n \n #define OACC_LOOP_CLAUSE_MASK\t\t\t\t\t\t\\\n \t( (OMP_CLAUSE_MASK_1 << PRAGMA_OACC_CLAUSE_COLLAPSE)\t\t\\\n+\t| (OMP_CLAUSE_MASK_1 << PRAGMA_OACC_CLAUSE_PRIVATE)\t\t\\\n+\t| (OMP_CLAUSE_MASK_1 << PRAGMA_OACC_CLAUSE_REDUCTION)\t\t\\\n \t| (OMP_CLAUSE_MASK_1 << PRAGMA_OACC_CLAUSE_GANG)\t\t\\\n \t| (OMP_CLAUSE_MASK_1 << PRAGMA_OACC_CLAUSE_VECTOR)\t\t\\\n \t| (OMP_CLAUSE_MASK_1 << PRAGMA_OACC_CLAUSE_WORKER)\t\t\\\n \t| (OMP_CLAUSE_MASK_1 << PRAGMA_OACC_CLAUSE_AUTO)\t\t\\\n+\t| (OMP_CLAUSE_MASK_1 << PRAGMA_OACC_CLAUSE_INDEPENDENT)\t\t\\\n \t| (OMP_CLAUSE_MASK_1 << PRAGMA_OACC_CLAUSE_SEQ)\t\t\t\\\n-\t| (OMP_CLAUSE_MASK_1 << PRAGMA_OACC_CLAUSE_REDUCTION) )\n+\t| (OMP_CLAUSE_MASK_1 << PRAGMA_OACC_CLAUSE_TILE))\n \n static tree\n cp_parser_oacc_loop (cp_parser *parser, cp_token *pragma_tok, char *p_name,\n@@ -34543,6 +34630,7 @@ cp_parser_oacc_loop (cp_parser *parser, cp_token *pragma_tok, char *p_name,\n \t| (OMP_CLAUSE_MASK_1 << PRAGMA_OACC_CLAUSE_COPYIN)\t\t\\\n \t| (OMP_CLAUSE_MASK_1 << PRAGMA_OACC_CLAUSE_COPYOUT)\t\t\\\n \t| (OMP_CLAUSE_MASK_1 << PRAGMA_OACC_CLAUSE_CREATE)\t\t\\\n+\t| (OMP_CLAUSE_MASK_1 << PRAGMA_OACC_CLAUSE_DEFAULT)\t\t\\\n \t| (OMP_CLAUSE_MASK_1 << PRAGMA_OACC_CLAUSE_DEVICEPTR)\t\t\\\n \t| (OMP_CLAUSE_MASK_1 << PRAGMA_OACC_CLAUSE_IF)\t\t\t\\\n \t| (OMP_CLAUSE_MASK_1 << PRAGMA_OACC_CLAUSE_PRESENT)\t\t\\\n@@ -34558,7 +34646,9 @@ cp_parser_oacc_loop (cp_parser *parser, cp_token *pragma_tok, char *p_name,\n \t| (OMP_CLAUSE_MASK_1 << PRAGMA_OACC_CLAUSE_COPYIN)\t\t\\\n \t| (OMP_CLAUSE_MASK_1 << PRAGMA_OACC_CLAUSE_COPYOUT)\t\t\\\n \t| (OMP_CLAUSE_MASK_1 << PRAGMA_OACC_CLAUSE_CREATE)\t\t\\\n+\t| (OMP_CLAUSE_MASK_1 << PRAGMA_OACC_CLAUSE_DEFAULT)\t\t\\\n \t| (OMP_CLAUSE_MASK_1 << PRAGMA_OACC_CLAUSE_DEVICEPTR)\t\t\\\n+\t| (OMP_CLAUSE_MASK_1 << PRAGMA_OACC_CLAUSE_FIRSTPRIVATE)       \t\\\n \t| (OMP_CLAUSE_MASK_1 << PRAGMA_OACC_CLAUSE_IF)\t\t\t\\\n \t| (OMP_CLAUSE_MASK_1 << PRAGMA_OACC_CLAUSE_NUM_GANGS)\t\t\\\n \t| (OMP_CLAUSE_MASK_1 << PRAGMA_OACC_CLAUSE_NUM_WORKERS)\t\t\\\n@@ -34567,6 +34657,7 @@ cp_parser_oacc_loop (cp_parser *parser, cp_token *pragma_tok, char *p_name,\n \t| (OMP_CLAUSE_MASK_1 << PRAGMA_OACC_CLAUSE_PRESENT_OR_COPYIN)\t\\\n \t| (OMP_CLAUSE_MASK_1 << PRAGMA_OACC_CLAUSE_PRESENT_OR_COPYOUT)\t\\\n \t| (OMP_CLAUSE_MASK_1 << PRAGMA_OACC_CLAUSE_PRESENT_OR_CREATE)   \\\n+\t| (OMP_CLAUSE_MASK_1 << PRAGMA_OACC_CLAUSE_PRIVATE)\t\t\\\n \t| (OMP_CLAUSE_MASK_1 << PRAGMA_OACC_CLAUSE_REDUCTION)\t\t\\\n \t| (OMP_CLAUSE_MASK_1 << PRAGMA_OACC_CLAUSE_VECTOR_LENGTH)       \\\n \t| (OMP_CLAUSE_MASK_1 << PRAGMA_OACC_CLAUSE_WAIT) )\n@@ -34642,7 +34733,7 @@ cp_parser_oacc_update (cp_parser *parser, cp_token *pragma_tok)\n     {\n       error_at (pragma_tok->location,\n \t\t\"%<#pragma acc update%> must contain at least one \"\n-\t\t\"%<device%> or %<host/self%> clause\");\n+\t\t\"%<device%> or %<host%> or %<self%> clause\");\n       return NULL_TREE;\n     }\n "}, {"sha": "45eda3a6d72a71ea41ed3a1409ffefd6ed608335", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 49, "deletions": 2, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a5e4956cc026cba54159d5c764486ac4151db85/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a5e4956cc026cba54159d5c764486ac4151db85/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=7a5e4956cc026cba54159d5c764486ac4151db85", "patch": "@@ -14395,6 +14395,13 @@ tsubst_omp_clauses (tree clauses, bool declare_simd, bool allow_fields,\n \tcase OMP_CLAUSE_PRIORITY:\n \tcase OMP_CLAUSE_ORDERED:\n \tcase OMP_CLAUSE_HINT:\n+\tcase OMP_CLAUSE_NUM_GANGS:\n+\tcase OMP_CLAUSE_NUM_WORKERS:\n+\tcase OMP_CLAUSE_VECTOR_LENGTH:\n+\tcase OMP_CLAUSE_WORKER:\n+\tcase OMP_CLAUSE_VECTOR:\n+\tcase OMP_CLAUSE_ASYNC:\n+\tcase OMP_CLAUSE_WAIT:\n \t  OMP_CLAUSE_OPERAND (nc, 0)\n \t    = tsubst_expr (OMP_CLAUSE_OPERAND (oc, 0), args, complain, \n \t\t\t   in_decl, /*integral_constant_expression_p=*/false);\n@@ -14419,6 +14426,7 @@ tsubst_omp_clauses (tree clauses, bool declare_simd, bool allow_fields,\n \t    = tsubst_omp_clause_decl (OMP_CLAUSE_DECL (oc), args, complain,\n \t\t\t\t      in_decl);\n \t  break;\n+\tcase OMP_CLAUSE_GANG:\n \tcase OMP_CLAUSE_ALIGNED:\n \t  OMP_CLAUSE_DECL (nc)\n \t    = tsubst_omp_clause_decl (OMP_CLAUSE_DECL (oc), args, complain,\n@@ -14461,6 +14469,22 @@ tsubst_omp_clauses (tree clauses, bool declare_simd, bool allow_fields,\n \tcase OMP_CLAUSE_THREADS:\n \tcase OMP_CLAUSE_SIMD:\n \tcase OMP_CLAUSE_DEFAULTMAP:\n+\tcase OMP_CLAUSE_INDEPENDENT:\n+\tcase OMP_CLAUSE_AUTO:\n+\tcase OMP_CLAUSE_SEQ:\n+\t  break;\n+\tcase OMP_CLAUSE_TILE:\n+\t  {\n+\t    tree lnc, loc;\n+\t    for (lnc = OMP_CLAUSE_TILE_LIST (nc),\n+\t\t   loc = OMP_CLAUSE_TILE_LIST (oc);\n+\t\t loc;\n+\t\t loc = TREE_CHAIN (loc), lnc = TREE_CHAIN (lnc))\n+\t      {\n+\t\tTREE_VALUE (lnc) = tsubst_expr (TREE_VALUE (loc), args,\n+\t\t\t\t\t\tcomplain, in_decl, false);\n+\t      }\n+\t  }\n \t  break;\n \tdefault:\n \t  gcc_unreachable ();\n@@ -15231,6 +15255,15 @@ tsubst_expr (tree t, tree args, tsubst_flags_t complain, tree in_decl,\n       }\n       break;\n \n+    case OACC_KERNELS:\n+    case OACC_PARALLEL:\n+      tmp = tsubst_omp_clauses (OMP_CLAUSES (t), false, false, args, complain,\n+\t\t\t\tin_decl);\n+      stmt = begin_omp_parallel ();\n+      RECUR (OMP_BODY (t));\n+      finish_omp_construct (TREE_CODE (t), stmt, tmp);\n+      break;\n+\n     case OMP_PARALLEL:\n       r = push_omp_privatization_clauses (OMP_PARALLEL_COMBINED (t));\n       tmp = tsubst_omp_clauses (OMP_PARALLEL_CLAUSES (t), false, true,\n@@ -15261,6 +15294,7 @@ tsubst_expr (tree t, tree args, tsubst_flags_t complain, tree in_decl,\n     case CILK_FOR:\n     case OMP_DISTRIBUTE:\n     case OMP_TASKLOOP:\n+    case OACC_LOOP:\n       {\n \ttree clauses, body, pre_body;\n \ttree declv = NULL_TREE, initv = NULL_TREE, condv = NULL_TREE;\n@@ -15269,7 +15303,8 @@ tsubst_expr (tree t, tree args, tsubst_flags_t complain, tree in_decl,\n \tint i;\n \n \tr = push_omp_privatization_clauses (OMP_FOR_INIT (t) == NULL_TREE);\n-\tclauses = tsubst_omp_clauses (OMP_FOR_CLAUSES (t), false, true,\n+\tclauses = tsubst_omp_clauses (OMP_FOR_CLAUSES (t), false,\n+\t\t\t\t      TREE_CODE (t) != OACC_LOOP,\n \t\t\t\t      args, complain, in_decl);\n \tif (OMP_FOR_INIT (t) != NULL_TREE)\n \t  {\n@@ -15339,9 +15374,11 @@ tsubst_expr (tree t, tree args, tsubst_flags_t complain, tree in_decl,\n       pop_omp_privatization_clauses (r);\n       break;\n \n+    case OACC_DATA:\n     case OMP_TARGET_DATA:\n     case OMP_TARGET:\n-      tmp = tsubst_omp_clauses (OMP_CLAUSES (t), false, true,\n+      tmp = tsubst_omp_clauses (OMP_CLAUSES (t), false,\n+\t\t\t\tTREE_CODE (t) != OACC_DATA,\n \t\t\t\targs, complain, in_decl);\n       keep_next_level (true);\n       stmt = begin_omp_structured_block ();\n@@ -15395,6 +15432,16 @@ tsubst_expr (tree t, tree args, tsubst_flags_t complain, tree in_decl,\n       add_stmt (t);\n       break;\n \n+    case OACC_ENTER_DATA:\n+    case OACC_EXIT_DATA:\n+    case OACC_UPDATE:\n+      tmp = tsubst_omp_clauses (OMP_STANDALONE_CLAUSES (t), false, false,\n+\t\t\t\targs, complain, in_decl);\n+      t = copy_node (t);\n+      OMP_STANDALONE_CLAUSES (t) = tmp;\n+      add_stmt (t);\n+      break;\n+\n     case OMP_ORDERED:\n       tmp = tsubst_omp_clauses (OMP_ORDERED_CLAUSES (t), false, true,\n \t\t\t\targs, complain, in_decl);"}, {"sha": "7702a418b5b7f0de53d32617aa5ff5f8774e97d5", "filename": "gcc/cp/semantics.c", "status": "modified", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a5e4956cc026cba54159d5c764486ac4151db85/gcc%2Fcp%2Fsemantics.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a5e4956cc026cba54159d5c764486ac4151db85/gcc%2Fcp%2Fsemantics.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fsemantics.c?ref=7a5e4956cc026cba54159d5c764486ac4151db85", "patch": "@@ -6855,9 +6855,47 @@ finish_omp_clauses (tree clauses, bool allow_fields, bool declare_simd)\n \tcase OMP_CLAUSE_DEFAULTMAP:\n \tcase OMP_CLAUSE__CILK_FOR_COUNT_:\n \tcase OMP_CLAUSE_AUTO:\n+\tcase OMP_CLAUSE_INDEPENDENT:\n \tcase OMP_CLAUSE_SEQ:\n \t  break;\n \n+\tcase OMP_CLAUSE_TILE:\n+\t  for (tree list = OMP_CLAUSE_TILE_LIST (c); !remove && list;\n+\t       list = TREE_CHAIN (list))\n+\t    {\n+\t      t = TREE_VALUE (list);\n+\n+\t      if (t == error_mark_node)\n+\t\tremove = true;\n+\t      else if (!type_dependent_expression_p (t)\n+\t\t       && !INTEGRAL_TYPE_P (TREE_TYPE (t)))\n+\t\t{\n+\t\t  error (\"%<tile%> value must be integral\");\n+\t\t  remove = true;\n+\t\t}\n+\t      else\n+\t\t{\n+\t\t  t = mark_rvalue_use (t);\n+\t\t  if (!processing_template_decl)\n+\t\t    {\n+\t\t      t = maybe_constant_value (t);\n+\t\t      if (TREE_CODE (t) == INTEGER_CST\n+\t\t\t  && tree_int_cst_sgn (t) != 1\n+\t\t\t  && t != integer_minus_one_node)\n+\t\t\t{\n+\t\t\t  warning_at (OMP_CLAUSE_LOCATION (c), 0,\n+\t\t\t\t      \"%<tile%> value must be positive\");\n+\t\t\t  t = integer_one_node;\n+\t\t\t}\n+\t\t    }\n+\t\t  t = fold_build_cleanup_point_expr (TREE_TYPE (t), t);\n+\t\t}\n+\n+\t\t/* Update list item.  */\n+\t      TREE_VALUE (list) = t;\n+\t    }\n+\t  break;\n+\n \tcase OMP_CLAUSE_ORDERED:\n \t  ordered_seen = true;\n \t  break;"}, {"sha": "bd3fa7647a50a4d7bef065cf539aa49fc4bcafe7", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a5e4956cc026cba54159d5c764486ac4151db85/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a5e4956cc026cba54159d5c764486ac4151db85/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=7a5e4956cc026cba54159d5c764486ac4151db85", "patch": "@@ -1,3 +1,17 @@\n+2015-11-05  Cesar Philippidis  <cesar@codesourcery.com>\n+\n+\t* openmp.c (gfc_match_omp_clauses): Update support for the tile\n+\tand default clauses in OpenACC.\n+\t(gfc_match_oacc_update): Error when data clauses are supplied.\n+\t(oacc_compatible_clauses): Delete.\n+\t(resolve_omp_clauses): Give special care for OpenACC reductions.\n+\tAlso update error reporting for the tile clause.\n+\t(resolve_oacc_loop_blocks): Update error reporting for the tile clause.\n+\t* trans-openmp.c (gfc_trans_omp_clauses): Update OMP_CLAUSE_SEQ. Add\n+\tOMP_CLAUSE_{AUTO,TILE} and add support the the gang static argument.\n+\t(gfc_trans_oacc_combined_directive): Update the list of clauses which\n+\tare split to acc loops.\n+\n 2015-11-05  Jakub Jelinek  <jakub@redhat.com>\n \n \t* types.def (BT_FN_VOID_INT_OMPFN_SIZE_PTR_PTR_PTR_UINT_PTR): Remove."}, {"sha": "a7c7a1927e31624b93a995fcb9b68d2450596380", "filename": "gcc/fortran/openmp.c", "status": "modified", "additions": 51, "deletions": 50, "changes": 101, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a5e4956cc026cba54159d5c764486ac4151db85/gcc%2Ffortran%2Fopenmp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a5e4956cc026cba54159d5c764486ac4151db85/gcc%2Ffortran%2Fopenmp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fopenmp.c?ref=7a5e4956cc026cba54159d5c764486ac4151db85", "patch": "@@ -703,6 +703,7 @@ gfc_match_omp_clauses (gfc_omp_clauses **cp, uint64_t mask,\n \t\t\t\t       OMP_MAP_FORCE_FROM))\n \tcontinue;\n       if ((mask & OMP_CLAUSE_TILE)\n+\t  && !c->tile_list\n \t  && match_oacc_expr_list (\"tile (\", &c->tile_list, true) == MATCH_YES)\n \tcontinue;\n       if ((mask & OMP_CLAUSE_SEQ) && !c->seq\n@@ -856,12 +857,14 @@ gfc_match_omp_clauses (gfc_omp_clauses **cp, uint64_t mask,\n       if ((mask & OMP_CLAUSE_DEFAULT)\n \t  && c->default_sharing == OMP_DEFAULT_UNKNOWN)\n \t{\n-\t  if (gfc_match (\"default ( shared )\") == MATCH_YES)\n+\t  if (gfc_match (\"default ( none )\") == MATCH_YES)\n+\t    c->default_sharing = OMP_DEFAULT_NONE;\n+\t  else if (openacc)\n+\t    /* c->default_sharing = OMP_DEFAULT_UNKNOWN */;\n+\t  else if (gfc_match (\"default ( shared )\") == MATCH_YES)\n \t    c->default_sharing = OMP_DEFAULT_SHARED;\n \t  else if (gfc_match (\"default ( private )\") == MATCH_YES)\n \t    c->default_sharing = OMP_DEFAULT_PRIVATE;\n-\t  else if (gfc_match (\"default ( none )\") == MATCH_YES)\n-\t    c->default_sharing = OMP_DEFAULT_NONE;\n \t  else if (gfc_match (\"default ( firstprivate )\") == MATCH_YES)\n \t    c->default_sharing = OMP_DEFAULT_FIRSTPRIVATE;\n \t  if (c->default_sharing != OMP_DEFAULT_UNKNOWN)\n@@ -1304,10 +1307,19 @@ match\n gfc_match_oacc_update (void)\n {\n   gfc_omp_clauses *c;\n+  locus here = gfc_current_locus;\n+\n   if (gfc_match_omp_clauses (&c, OACC_UPDATE_CLAUSES, false, false, true)\n       != MATCH_YES)\n     return MATCH_ERROR;\n \n+  if (!c->lists[OMP_LIST_MAP])\n+    {\n+      gfc_error (\"%<acc update%> must contain at least one \"\n+\t\t \"%<device%> or %<host%> or %<self%> clause at %L\", &here);\n+      return MATCH_ERROR;\n+    }\n+\n   new_st.op = EXEC_OACC_UPDATE;\n   new_st.ext.omp_clauses = c;\n   return MATCH_YES;\n@@ -2846,30 +2858,6 @@ resolve_omp_udr_clause (gfc_omp_namelist *n, gfc_namespace *ns,\n   return copy;\n }\n \n-/* Returns true if clause in list 'list' is compatible with any of\n-   of the clauses in lists [0..list-1].  E.g., a reduction variable may\n-   appear in both reduction and private clauses, so this function\n-   will return true in this case.  */\n-\n-static bool\n-oacc_compatible_clauses (gfc_omp_clauses *clauses, int list,\n-\t\t\t   gfc_symbol *sym, bool openacc)\n-{\n-  gfc_omp_namelist *n;\n-\n-  if (!openacc)\n-    return false;\n-\n-  if (list != OMP_LIST_REDUCTION)\n-    return false;\n-\n-  for (n = clauses->lists[OMP_LIST_FIRST]; n; n = n->next)\n-    if (n->sym == sym)\n-      return true;\n-\n-  return false;\n-}\n-\n /* OpenMP directive resolving routines.  */\n \n static void\n@@ -2975,11 +2963,11 @@ resolve_omp_clauses (gfc_code *code, gfc_omp_clauses *omp_clauses,\n \t&& list != OMP_LIST_DEPEND\n \t&& (list != OMP_LIST_MAP || openacc)\n \t&& list != OMP_LIST_FROM\n-\t&& list != OMP_LIST_TO)\n+\t&& list != OMP_LIST_TO\n+\t&& (list != OMP_LIST_REDUCTION || !openacc))\n       for (n = omp_clauses->lists[list]; n; n = n->next)\n \t{\n-\t  if (n->sym->mark && !oacc_compatible_clauses (omp_clauses, list,\n-\t\t\t\t\t\t\tn->sym, openacc))\n+\t  if (n->sym->mark)\n \t    gfc_error (\"Symbol %qs present on multiple clauses at %L\",\n \t\t       n->sym->name, &n->where);\n \t  else\n@@ -3028,6 +3016,22 @@ resolve_omp_clauses (gfc_code *code, gfc_omp_clauses *omp_clauses,\n \tn->sym->mark = 1;\n     }\n \n+  /* OpenACC reductions.  */\n+  if (openacc)\n+    {\n+      for (n = omp_clauses->lists[OMP_LIST_REDUCTION]; n; n = n->next)\n+\tn->sym->mark = 0;\n+\n+      for (n = omp_clauses->lists[OMP_LIST_REDUCTION]; n; n = n->next)\n+\t{\n+\t  if (n->sym->mark)\n+\t    gfc_error (\"Symbol %qs present on multiple clauses at %L\",\n+\t\t       n->sym->name, &n->where);\n+\t  else\n+\t    n->sym->mark = 1;\n+\t}\n+    }\n+  \n   for (n = omp_clauses->lists[OMP_LIST_TO]; n; n = n->next)\n     n->sym->mark = 0;\n   for (n = omp_clauses->lists[OMP_LIST_FROM]; n; n = n->next)\n@@ -4528,22 +4532,8 @@ resolve_oacc_loop_blocks (gfc_code *code)\n       if (code->ext.omp_clauses->vector)\n \tgfc_error (\"Clause AUTO conflicts with VECTOR at %L\", &code->loc);\n     }\n-  if (!code->ext.omp_clauses->tile_list)\n-    {\n-      if (code->ext.omp_clauses->gang)\n-\t{\n-\t  if (code->ext.omp_clauses->worker)\n-\t    gfc_error (\"Clause GANG conflicts with WORKER at %L\", &code->loc);\n-\t  if (code->ext.omp_clauses->vector)\n-\t    gfc_error (\"Clause GANG conflicts with VECTOR at %L\", &code->loc);\n-\t}\n-      if (code->ext.omp_clauses->worker)\n-\tif (code->ext.omp_clauses->vector)\n-\t  gfc_error (\"Clause WORKER conflicts with VECTOR at %L\", &code->loc);\n-    }\n-  else if (code->ext.omp_clauses->gang\n-\t   && code->ext.omp_clauses->worker\n-\t   && code->ext.omp_clauses->vector)\n+  if (code->ext.omp_clauses->tile_list && code->ext.omp_clauses->gang\n+      && code->ext.omp_clauses->worker && code->ext.omp_clauses->vector)\n     gfc_error (\"Tiled loop cannot be parallelized across gangs, workers and \"\n \t       \"vectors at the same time at %L\", &code->loc);\n \n@@ -4564,10 +4554,21 @@ resolve_oacc_loop_blocks (gfc_code *code)\n \t{\n \t  num++;\n \t  if (el->expr == NULL)\n-\t    continue;\n-\t  resolve_oacc_positive_int_expr (el->expr, \"TILE\");\n-\t  if (el->expr->expr_type != EXPR_CONSTANT)\n-\t    gfc_error (\"TILE requires constant expression at %L\", &code->loc);\n+\t    {\n+\t      /* NULL expressions are used to represent '*' arguments.\n+\t\t Convert those to a -1 expressions.  */\n+\t      el->expr = gfc_get_constant_expr (BT_INTEGER,\n+\t\t\t\t\t\tgfc_default_integer_kind,\n+\t\t\t\t\t\t&code->loc);\n+\t      mpz_set_si (el->expr->value.integer, -1);\n+\t    }\n+\t  else\n+\t    {\n+\t      resolve_oacc_positive_int_expr (el->expr, \"TILE\");\n+\t      if (el->expr->expr_type != EXPR_CONSTANT)\n+\t\tgfc_error (\"TILE requires constant expression at %L\",\n+\t\t\t   &code->loc);\n+\t    }\n \t}\n       resolve_oacc_nested_loops (code, code->block->next, num, \"tiled\");\n     }"}, {"sha": "9f0d5332a8e08e1bb072f7924a1d857a0c211bf4", "filename": "gcc/fortran/trans-openmp.c", "status": "modified", "additions": 50, "deletions": 4, "changes": 54, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a5e4956cc026cba54159d5c764486ac4151db85/gcc%2Ffortran%2Ftrans-openmp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a5e4956cc026cba54159d5c764486ac4151db85/gcc%2Ffortran%2Ftrans-openmp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-openmp.c?ref=7a5e4956cc026cba54159d5c764486ac4151db85", "patch": "@@ -2534,8 +2534,12 @@ gfc_trans_omp_clauses (stmtblock_t *block, gfc_omp_clauses *clauses,\n     }\n   if (clauses->seq)\n     {\n-      c = build_omp_clause (where.lb->location, OMP_CLAUSE_ORDERED);\n-      OMP_CLAUSE_ORDERED_EXPR (c) = NULL_TREE;\n+      c = build_omp_clause (where.lb->location, OMP_CLAUSE_SEQ);\n+      omp_clauses = gfc_trans_add_clause (c, omp_clauses);\n+    }\n+  if (clauses->par_auto)\n+    {\n+      c = build_omp_clause (where.lb->location, OMP_CLAUSE_AUTO);\n       omp_clauses = gfc_trans_add_clause (c, omp_clauses);\n     }\n   if (clauses->independent)\n@@ -2579,6 +2583,21 @@ gfc_trans_omp_clauses (stmtblock_t *block, gfc_omp_clauses *clauses,\n       OMP_CLAUSE_VECTOR_LENGTH_EXPR (c) = vector_length_var;\n       omp_clauses = gfc_trans_add_clause (c, omp_clauses);\n     }\n+  if (clauses->tile_list)\n+    {\n+      vec<tree, va_gc> *tvec;\n+      gfc_expr_list *el;\n+\n+      vec_alloc (tvec, 4);\n+\n+      for (el = clauses->tile_list; el; el = el->next)\n+\tvec_safe_push (tvec, gfc_convert_expr_to_tree (block, el->expr));\n+\n+      c = build_omp_clause (where.lb->location, OMP_CLAUSE_TILE);\n+      OMP_CLAUSE_TILE_LIST (c) = build_tree_list_vec (tvec);\n+      omp_clauses = gfc_trans_add_clause (c, omp_clauses);\n+      tvec->truncate (0);\n+    }\n   if (clauses->vector)\n     {\n       if (clauses->vector_expr)\n@@ -2618,7 +2637,17 @@ gfc_trans_omp_clauses (stmtblock_t *block, gfc_omp_clauses *clauses,\n \t  tree gang_var\n \t    = gfc_convert_expr_to_tree (block, clauses->gang_expr);\n \t  c = build_omp_clause (where.lb->location, OMP_CLAUSE_GANG);\n-\t  OMP_CLAUSE_GANG_EXPR (c) = gang_var;\n+\t  if (clauses->gang_static)\n+\t    OMP_CLAUSE_GANG_STATIC_EXPR (c) = gang_var;\n+\t  else\n+\t    OMP_CLAUSE_GANG_EXPR (c) = gang_var;\n+\t  omp_clauses = gfc_trans_add_clause (c, omp_clauses);\n+\t}\n+      else if (clauses->gang_static)\n+\t{\n+\t  /* This corresponds to gang (static: *).  */\n+\t  c = build_omp_clause (where.lb->location, OMP_CLAUSE_GANG);\n+\t  OMP_CLAUSE_GANG_STATIC_EXPR (c) = integer_minus_one_node;\n \t  omp_clauses = gfc_trans_add_clause (c, omp_clauses);\n \t}\n       else\n@@ -3449,16 +3478,33 @@ gfc_trans_oacc_combined_directive (gfc_code *code)\n \t      sizeof (construct_clauses));\n       loop_clauses.collapse = construct_clauses.collapse;\n       loop_clauses.gang = construct_clauses.gang;\n+      loop_clauses.gang_expr = construct_clauses.gang_expr;\n+      loop_clauses.gang_static = construct_clauses.gang_static;\n       loop_clauses.vector = construct_clauses.vector;\n+      loop_clauses.vector_expr = construct_clauses.vector_expr;\n       loop_clauses.worker = construct_clauses.worker;\n+      loop_clauses.worker_expr = construct_clauses.worker_expr;\n       loop_clauses.seq = construct_clauses.seq;\n+      loop_clauses.par_auto = construct_clauses.par_auto;\n       loop_clauses.independent = construct_clauses.independent;\n-      construct_clauses.collapse = 0;\n+      loop_clauses.tile_list = construct_clauses.tile_list;\n+      loop_clauses.lists[OMP_LIST_PRIVATE]\n+\t= construct_clauses.lists[OMP_LIST_PRIVATE];\n+      loop_clauses.lists[OMP_LIST_REDUCTION]\n+\t= construct_clauses.lists[OMP_LIST_REDUCTION];\n       construct_clauses.gang = false;\n+      construct_clauses.gang_expr = NULL;\n+      construct_clauses.gang_static = false;\n       construct_clauses.vector = false;\n+      construct_clauses.vector_expr = NULL;\n       construct_clauses.worker = false;\n+      construct_clauses.worker_expr = NULL;\n       construct_clauses.seq = false;\n+      construct_clauses.par_auto = false;\n+      construct_clauses.independent = false;\n       construct_clauses.independent = false;\n+      construct_clauses.tile_list = NULL;\n+      construct_clauses.lists[OMP_LIST_PRIVATE] = NULL;\n       oacc_clauses = gfc_trans_omp_clauses (&block, &construct_clauses,\n \t\t\t\t\t    code->loc);\n     }"}, {"sha": "fa348585a241cbe6ab7e5914dc240e6eaba11d7b", "filename": "gcc/gimplify.c", "status": "modified", "additions": 12, "deletions": 1, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a5e4956cc026cba54159d5c764486ac4151db85/gcc%2Fgimplify.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a5e4956cc026cba54159d5c764486ac4151db85/gcc%2Fgimplify.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimplify.c?ref=7a5e4956cc026cba54159d5c764486ac4151db85", "patch": "@@ -7141,9 +7141,18 @@ gimplify_scan_omp_clauses (tree *list_p, gimple_seq *pre_p,\n \t    remove = true;\n \t  break;\n \n+\tcase OMP_CLAUSE_TILE:\n+\t  for (tree list = OMP_CLAUSE_TILE_LIST (c); !remove && list;\n+\t       list = TREE_CHAIN (list))\n+\t    {\n+\t      if (gimplify_expr (&TREE_VALUE (list), pre_p, NULL,\n+\t\t\t\t is_gimple_val, fb_rvalue) == GS_ERROR)\n+\t\tremove = true;\n+\t    }\n+\t  break;\n+\n \tcase OMP_CLAUSE_DEVICE_RESIDENT:\n \tcase OMP_CLAUSE_USE_DEVICE:\n-\tcase OMP_CLAUSE_INDEPENDENT:\n \t  remove = true;\n \t  break;\n \n@@ -7153,6 +7162,7 @@ gimplify_scan_omp_clauses (tree *list_p, gimple_seq *pre_p,\n \tcase OMP_CLAUSE_COLLAPSE:\n \tcase OMP_CLAUSE_AUTO:\n \tcase OMP_CLAUSE_SEQ:\n+\tcase OMP_CLAUSE_INDEPENDENT:\n \tcase OMP_CLAUSE_MERGEABLE:\n \tcase OMP_CLAUSE_PROC_BIND:\n \tcase OMP_CLAUSE_SAFELEN:\n@@ -7663,6 +7673,7 @@ gimplify_adjust_omp_clauses (gimple_seq *pre_p, tree *list_p,\n \tcase OMP_CLAUSE_VECTOR:\n \tcase OMP_CLAUSE_AUTO:\n \tcase OMP_CLAUSE_SEQ:\n+\tcase OMP_CLAUSE_TILE:\n \t  break;\n \n \tdefault:"}, {"sha": "5ffb27650596714bcda8151f15879aac2ba7e99c", "filename": "gcc/omp-low.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a5e4956cc026cba54159d5c764486ac4151db85/gcc%2Fomp-low.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a5e4956cc026cba54159d5c764486ac4151db85/gcc%2Fomp-low.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fomp-low.c?ref=7a5e4956cc026cba54159d5c764486ac4151db85", "patch": "@@ -2129,6 +2129,7 @@ scan_sharing_clauses (tree clauses, omp_context *ctx)\n \tcase OMP_CLAUSE_GANG:\n \tcase OMP_CLAUSE_WORKER:\n \tcase OMP_CLAUSE_VECTOR:\n+\tcase OMP_CLAUSE_TILE:\n \t  break;\n \n \tcase OMP_CLAUSE_ALIGNED:\n@@ -2309,6 +2310,7 @@ scan_sharing_clauses (tree clauses, omp_context *ctx)\n \tcase OMP_CLAUSE_GANG:\n \tcase OMP_CLAUSE_WORKER:\n \tcase OMP_CLAUSE_VECTOR:\n+\tcase OMP_CLAUSE_TILE:\n \t  break;\n \n \tcase OMP_CLAUSE_DEVICE_RESIDENT:"}, {"sha": "c074e7b55e01746a45faeea0c6ecd93c9f0648d7", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a5e4956cc026cba54159d5c764486ac4151db85/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a5e4956cc026cba54159d5c764486ac4151db85/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=7a5e4956cc026cba54159d5c764486ac4151db85", "patch": "@@ -1,3 +1,32 @@\n+2015-11-05  Cesar Philippidis  <cesar@codesourcery.com>\n+\t    Tom de Vries  <tom@codesourcery.com>\n+\t    Nathan Sidwell  <nathan@codesourcery.com>\n+\t    Thomas Schwinge  <thomas@codesourcery.com>\n+\n+\t* c-c++-common/goacc/combined-directives.c: New test.\n+\t* c-c++-common/goacc/loop-clauses.c: New test.\n+\t* c-c++-common/goacc/tile.c: New test.\n+\t* c-c++-common/goacc/loop-shape.c: Add test for pointer variable\n+\tas gang static arguments.\n+\t* c-c++-common/goacc/update-1.c: Adjust expected error message.\n+\t* g++.dg/goacc/template.C: New test.\n+\t* gfortran.dg/goacc/combined-directives.f90: New test.\n+\t* gfortran.dg/goacc/default.f95: New test.\n+\t* gfortran.dg/goacc/default_none.f95: New test.\n+\t* gfortran.dg/goacc/firstprivate-1.f95: New test.\n+\t* gfortran.dg/goacc/gang-static.f95: New test.\n+\t* gfortran.dg/goacc/kernels-loop-inner.f95: New test.\n+\t* gfortran.dg/goacc/kernels-loops-adjacent.f95: New test.\n+\t* gfortran.dg/goacc/list.f95: Update test.\n+\t* gfortran.dg/goacc/loop-2.f95: Likewise.\n+\t* gfortran.dg/goacc/loop-4.f95: New test.\n+\t* gfortran.dg/goacc/loop-5.f95: New test.\n+\t* gfortran.dg/goacc/loop-6.f95: New test.\n+\t* gfortran.dg/goacc/loop-tree-1.f90: Update test.\n+\t* gfortran.dg/goacc/multi-clause.f90: New test.\n+\t* gfortran.dg/goacc/parallel-tree.f95: Update test.\n+\t* gfortran.dg/goacc/update.f95: New test.\n+\n 2015-11-05  Martin Sebor  <msebor@redhat.com>\n \n \tPR c++/67942"}, {"sha": "c38728512984188b29b2e588b79d1785c8c61fdb", "filename": "gcc/testsuite/c-c++-common/goacc/combined-directives.c", "status": "added", "additions": 119, "deletions": 0, "changes": 119, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a5e4956cc026cba54159d5c764486ac4151db85/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Fcombined-directives.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a5e4956cc026cba54159d5c764486ac4151db85/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Fcombined-directives.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Fcombined-directives.c?ref=7a5e4956cc026cba54159d5c764486ac4151db85", "patch": "@@ -0,0 +1,119 @@\n+// { dg-do compile }\n+// { dg-options \"-fopenacc -fdump-tree-gimple\" }\n+\n+// This error is temporary.  Remove when support is added for these clauses\n+// in the middle end.  Also remove the comments from the reduction test\n+// after the FE learns that reduction variables may appear in data clauses too.\n+// { dg-prune-output \"sorry, unimplemented\" }\n+\n+void\n+test ()\n+{\n+  int a[100], i, j, z;\n+\n+  // acc parallel\n+\n+  #pragma acc parallel loop collapse (2)\n+  for (i = 0; i < 100; i++)\n+    for (j = 0; j < 10; j++)\n+      ;\n+\n+  #pragma acc parallel loop gang\n+  for (i = 0; i < 100; i++)\n+    ;\n+\n+  #pragma acc parallel loop worker\n+  for (i = 0; i < 100; i++)\n+    for (j = 0; j < 10; j++)\n+      ;\n+\n+  #pragma acc parallel loop vector\n+  for (i = 0; i < 100; i++)\n+    for (j = 0; j < 10; j++)\n+      ;\n+\n+  #pragma acc parallel loop seq\n+  for (i = 0; i < 100; i++)\n+    for (j = 0; j < 10; j++)\n+      ;\n+\n+  #pragma acc parallel loop auto\n+  for (i = 0; i < 100; i++)\n+    for (j = 0; j < 10; j++)\n+      ;\n+\n+  #pragma acc parallel loop tile (2, 3)\n+  for (i = 0; i < 100; i++)\n+    for (j = 0; j < 10; j++)\n+      ;\n+\n+  #pragma acc parallel loop independent\n+  for (i = 0; i < 100; i++)\n+    ;\n+\n+  #pragma acc parallel loop private (z)\n+  for (i = 0; i < 100; i++)\n+    z = 0;\n+\n+//  #pragma acc parallel loop reduction (+:z) copy (z)\n+//  for (i = 0; i < 100; i++)\n+//    ;\n+\n+  // acc kernels\n+\n+  #pragma acc kernels loop collapse (2)\n+  for (i = 0; i < 100; i++)\n+    for (j = 0; j < 10; j++)\n+      ;\n+\n+  #pragma acc kernels loop gang\n+  for (i = 0; i < 100; i++)\n+    ;\n+\n+  #pragma acc kernels loop worker\n+  for (i = 0; i < 100; i++)\n+    for (j = 0; j < 10; j++)\n+      ;\n+\n+  #pragma acc kernels loop vector\n+  for (i = 0; i < 100; i++)\n+    for (j = 0; j < 10; j++)\n+      ;\n+\n+  #pragma acc kernels loop seq\n+  for (i = 0; i < 100; i++)\n+    for (j = 0; j < 10; j++)\n+      ;\n+\n+  #pragma acc kernels loop auto\n+  for (i = 0; i < 100; i++)\n+    for (j = 0; j < 10; j++)\n+      ;\n+\n+  #pragma acc kernels loop tile (2, 3)\n+  for (i = 0; i < 100; i++)\n+    for (j = 0; j < 10; j++)\n+      ;\n+\n+  #pragma acc kernels loop independent\n+  for (i = 0; i < 100; i++)\n+    ;\n+\n+  #pragma acc kernels loop private (z)\n+  for (i = 0; i < 100; i++)\n+    z = 0;\n+\n+//  #pragma acc kernels loop reduction (+:z) copy (z)\n+//  for (i = 0; i < 100; i++)\n+//    ;\n+}\n+\n+// { dg-final { scan-tree-dump-times \"acc loop collapse.2. private.j. private.i\" 2 \"gimple\" } }\n+// { dg-final { scan-tree-dump-times \"acc loop gang\" 2 \"gimple\" } }\n+// { dg-final { scan-tree-dump-times \"acc loop worker\" 2 \"gimple\" } }\n+// { dg-final { scan-tree-dump-times \"acc loop vector\" 2 \"gimple\" } }\n+// { dg-final { scan-tree-dump-times \"acc loop seq\" 2 \"gimple\" } }\n+// { dg-final { scan-tree-dump-times \"acc loop auto\" 2 \"gimple\" } }\n+// { dg-final { scan-tree-dump-times \"acc loop tile.2, 3\" 2 \"gimple\" } }\n+// { dg-final { scan-tree-dump-times \"acc loop independent private.i\" 2 \"gimple\" } }\n+// { dg-final { scan-tree-dump-times \"private.z\" 2 \"gimple\" } }"}, {"sha": "97b8786a290a4c50b09c89dde972d23a45b501d0", "filename": "gcc/testsuite/c-c++-common/goacc/loop-clauses.c", "status": "added", "additions": 86, "deletions": 0, "changes": 86, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a5e4956cc026cba54159d5c764486ac4151db85/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Floop-clauses.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a5e4956cc026cba54159d5c764486ac4151db85/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Floop-clauses.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Floop-clauses.c?ref=7a5e4956cc026cba54159d5c764486ac4151db85", "patch": "@@ -0,0 +1,86 @@\n+/* { dg-do compile } */\n+\n+/* { dg-prune-output \"sorry, unimplemented\" } */\n+\n+int\n+main ()\n+{\n+  int i, j;\n+\n+#pragma acc parallel firstprivate (j) private (i)\n+  {\n+#pragma acc loop seq\n+    for (i = 0; i < 10; i++)\n+      { }\n+  }\n+\n+#pragma acc parallel default (none)\n+  {\n+#pragma acc loop auto private (j)\n+    for (i = 0; i < 10; i++)\n+      { }\n+#pragma acc loop gang\n+    for (i = 0; i < 10; i++)\n+      { }\n+#pragma acc loop gang(static:5)\n+    for (i = 0; i < 10; i++)\n+      { }\n+#pragma acc loop gang(static:*)\n+    for (i = 0; i < 10; i++)\n+      { }\n+#pragma acc loop vector\n+    for (i = 0; i < 10; i++)\n+      { }\n+#pragma acc loop worker\n+    for (i = 0; i < 10; i++)\n+      { }\n+#pragma acc loop auto\n+    for (i = 0; i < 10; i++)\n+      { }\n+#pragma acc loop independent\n+    for (i = 0; i < 10; i++)\n+      { }\n+#pragma acc loop seq\n+    for (i = 0; i < 10; i++)\n+      { }\n+#pragma acc loop gang worker vector\n+    for (i = 0; i < 10; i++)\n+      { }\n+  }\n+\n+#pragma acc kernels default (none)\n+  {\n+#pragma acc loop auto\n+    for (i = 0; i < 10; i++)\n+      { }\n+#pragma acc loop gang (num:5)\n+    for (i = 0; i < 10; i++)\n+      { }\n+#pragma acc loop gang(static:5)\n+    for (i = 0; i < 10; i++)\n+      { }\n+#pragma acc loop gang(static:*)\n+    for (i = 0; i < 10; i++)\n+      { }\n+#pragma acc loop vector(length:10)\n+    for (i = 0; i < 10; i++)\n+      { }\n+#pragma acc loop worker(num:5)\n+    for (i = 0; i < 10; i++)\n+      { }\n+#pragma acc loop auto\n+    for (i = 0; i < 10; i++)\n+      { }\n+#pragma acc loop independent\n+    for (i = 0; i < 10; i++)\n+      { }\n+#pragma acc loop seq\n+    for (i = 0; i < 10; i++)\n+      { }\n+#pragma acc loop gang worker vector\n+    for (i = 0; i < 10; i++)\n+      { }\n+  }\n+\n+  return 0;\n+}"}, {"sha": "9708f7bf5eb37f92e3133fc4ad6804ddab35b752", "filename": "gcc/testsuite/c-c++-common/goacc/loop-shape.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a5e4956cc026cba54159d5c764486ac4151db85/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Floop-shape.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a5e4956cc026cba54159d5c764486ac4151db85/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Floop-shape.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Floop-shape.c?ref=7a5e4956cc026cba54159d5c764486ac4151db85", "patch": "@@ -8,6 +8,7 @@ int main ()\n   int i;\n   int v = 32, w = 19;\n   int length = 1, num = 5;\n+  int *abc;\n \n   /* Valid uses.  */\n \n@@ -199,12 +200,12 @@ int main ()\n     ;\n \n   #pragma acc kernels\n-  #pragma acc loop gang(static: * abc) /* { dg-error \"expected '.' before\" } */\n+  #pragma acc loop gang(static: * abc)\n   for (i = 0; i < 10; i++)\n     ;\n \n   #pragma acc kernels\n-  #pragma acc loop gang(static:*num:1) /* { dg-error \"expected '.' before\" } */\n+  #pragma acc loop gang(static:*num:1) /* { dg-error \"\" } */\n   for (i = 0; i < 10; i++)\n     ;\n "}, {"sha": "2a81427f053b47de0313798c5d7677e373040050", "filename": "gcc/testsuite/c-c++-common/goacc/tile.c", "status": "added", "additions": 73, "deletions": 0, "changes": 73, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a5e4956cc026cba54159d5c764486ac4151db85/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Ftile.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a5e4956cc026cba54159d5c764486ac4151db85/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Ftile.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Ftile.c?ref=7a5e4956cc026cba54159d5c764486ac4151db85", "patch": "@@ -0,0 +1,73 @@\n+/* { dg-do compile } */\n+\n+int\n+main ()\n+{\n+  int i, *a, b;\n+\n+#pragma acc parallel loop tile (10)\n+  for (i = 0; i < 100; i++)\n+    ;\n+\n+#pragma acc parallel loop tile (*)\n+  for (i = 0; i < 100; i++)\n+    ;\n+\n+#pragma acc parallel loop tile (10, *)\n+  for (i = 0; i < 100; i++)\n+    ;\n+\n+#pragma acc parallel loop tile (10, *, i)\n+  for (i = 0; i < 100; i++)\n+    ;\n+\n+#pragma acc parallel loop tile // { dg-error \"expected '\\\\\\('\" }\n+  for (i = 0; i < 100; i++)\n+    ;  \n+\n+#pragma acc parallel loop tile () // { dg-error \"\" }\n+  for (i = 0; i < 100; i++)\n+    ;\n+\n+#pragma acc parallel loop tile (,1) // { dg-error \"\" }\n+  for (i = 0; i < 100; i++)\n+    ;\n+\n+#pragma acc parallel loop tile (,,) // { dg-error \"\" }\n+  for (i = 0; i < 100; i++)\n+    ;\n+\n+#pragma acc parallel loop tile (1.1) // { dg-error \"'tile' value must be integral\" }\n+  for (i = 0; i < 100; i++)\n+    ;\n+\n+#pragma acc parallel loop tile (-3) // { dg-warning \"'tile' value must be positive\" }\n+  for (i = 0; i < 100; i++)\n+    ;\n+\n+#pragma acc parallel loop tile (10,-3) // { dg-warning \"'tile' value must be positive\" }\n+  for (i = 0; i < 100; i++)\n+    ;\n+\n+#pragma acc parallel loop tile (-100,10,5) // { dg-warning \"'tile' value must be positive\" }\n+  for (i = 0; i < 100; i++)\n+    ;\n+\n+#pragma acc parallel loop tile (1,2.0,true) // { dg-error \"\" }\n+  for (i = 0; i < 100; i++)\n+    ;\n+\n+#pragma acc parallel loop tile (*a, 1)\n+  for (i = 0; i < 100; i++)\n+    ;\n+\n+#pragma acc parallel loop tile (1, *a, b)\n+  for (i = 0; i < 100; i++)\n+    ;\n+\n+#pragma acc parallel loop tile (b, 1, *a)\n+  for (i = 0; i < 100; i++)\n+    ;\n+\n+  return 0;\n+}"}, {"sha": "701ef36364361b01f6ca27c92aff6304747e9867", "filename": "gcc/testsuite/c-c++-common/goacc/update-1.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a5e4956cc026cba54159d5c764486ac4151db85/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Fupdate-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a5e4956cc026cba54159d5c764486ac4151db85/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Fupdate-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Fupdate-1.c?ref=7a5e4956cc026cba54159d5c764486ac4151db85", "patch": "@@ -1,7 +1,7 @@\n void\n f (void)\n {\n-#pragma acc update /* { dg-error \"'#pragma acc update' must contain at least one 'device' or 'host/self' clause\" } */\n+#pragma acc update /* { dg-error \"'#pragma acc update' must contain at least one 'device' or 'host' or 'self' clause\" } */\n \n   int i = 0;\n   int a[10];"}, {"sha": "f7a717bf7ed03e67257d1451b6f26ee665f291dc", "filename": "gcc/testsuite/g++.dg/goacc/template.C", "status": "added", "additions": 141, "deletions": 0, "changes": 141, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a5e4956cc026cba54159d5c764486ac4151db85/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fgoacc%2Ftemplate.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a5e4956cc026cba54159d5c764486ac4151db85/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fgoacc%2Ftemplate.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fgoacc%2Ftemplate.C?ref=7a5e4956cc026cba54159d5c764486ac4151db85", "patch": "@@ -0,0 +1,141 @@\n+// This error is temporary.  Remove when support is added for these clauses\n+// in the middle end.  Also remove the comments from the reduction test\n+// after the FE learns that reduction variables may appear in data clauses too.\n+// { dg-prune-output \"sorry, unimplemented\" }\n+\n+#pragma acc routine\n+template <typename T> T\n+accDouble(int val)\n+{\n+  return val * 2;\n+}\n+\n+template<typename T> T\n+oacc_parallel_copy (T a)\n+{\n+  T b = 0;\n+  char w = 1;\n+  int x = 2;\n+  float y = 3;\n+  double z = 4;\n+\n+#pragma acc parallel num_gangs (a) num_workers (a) vector_length (a) default (none) copyout (b) copyin (a)\n+  {\n+    b = a;\n+  }\n+\n+#pragma acc parallel num_gangs (a) copy (w, x, y, z)\n+  {\n+    w = accDouble<char>(w);\n+    x = accDouble<int>(x);\n+    y = accDouble<float>(y);\n+    z = accDouble<double>(z);\n+  }\n+\n+#pragma acc parallel num_gangs (a) if (1)\n+  {\n+#pragma acc loop auto tile (a, 3)\n+  for (int i = 0; i < a; i++)\n+    for (int j = 0; j < 5; j++)\n+      b = a;\n+\n+#pragma acc loop seq\n+  for (int i = 0; i < a; i++)\n+    b = a;\n+  }\n+\n+  T c;\n+\n+#pragma acc parallel num_workers (10)\n+  {\n+#pragma acc atomic capture\n+    c = b++;\n+\n+#pragma atomic update\n+    c++;\n+\n+#pragma acc atomic read\n+    b = a;\n+\n+#pragma acc atomic write\n+    b = a;\n+  }\n+\n+//#pragma acc parallel reduction (+:c)\n+//  {\n+//    c = 1;\n+//  }\n+\n+#pragma acc data if (1) copy (b)\n+  {\n+    #pragma acc parallel\n+    {\n+      b = a;\n+    }\n+  }\n+\n+#pragma acc enter data copyin (b)\n+#pragma acc parallel present (b)\n+    {\n+      b = a;\n+    }\n+\n+#pragma acc update host (b)\n+#pragma acc update self (b)\n+#pragma acc update device (b)\n+#pragma acc exit data delete (b)\n+\n+  return b;\n+}\n+\n+template<typename T> T\n+oacc_kernels_copy (T a)\n+{\n+  T b = 0;\n+  T c = 0;\n+  char w = 1;\n+  int x = 2;\n+  float y = 3;\n+  double z = 4;\n+\n+#pragma acc kernels copy (w, x, y, z)\n+  {\n+    w = accDouble<char>(w);\n+    x = accDouble<int>(x);\n+    y = accDouble<float>(y);\n+    z = accDouble<double>(z);\n+  }\n+\n+#pragma acc kernels copyout (b) copyin (a)\n+  b = a;\n+\n+//#pragma acc kernels loop reduction (+:c)\n+//  for (int i = 0; i < 10; i++)\n+//    {\n+//      c = 1;\n+//    }\n+\n+#pragma acc data if (1) copy (b)\n+  {\n+    #pragma acc kernels\n+    {\n+      b = a;\n+    }\n+  }\n+\n+#pragma acc enter data copyin (b)\n+#pragma acc kernels present (b)\n+    {\n+      b = a;\n+    }\n+  return b;\n+}\n+\n+int\n+main ()\n+{\n+  int b = oacc_parallel_copy<int> (5);\n+  int c = oacc_kernels_copy<int> (5);\n+\n+  return b + c;\n+}"}, {"sha": "69775257cbdd2be4df0d2a58fe172341ec2471de", "filename": "gcc/testsuite/gfortran.dg/goacc/combined-directives.f90", "status": "added", "additions": 155, "deletions": 0, "changes": 155, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a5e4956cc026cba54159d5c764486ac4151db85/gcc%2Ftestsuite%2Fgfortran.dg%2Fgoacc%2Fcombined-directives.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a5e4956cc026cba54159d5c764486ac4151db85/gcc%2Ftestsuite%2Fgfortran.dg%2Fgoacc%2Fcombined-directives.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fgoacc%2Fcombined-directives.f90?ref=7a5e4956cc026cba54159d5c764486ac4151db85", "patch": "@@ -0,0 +1,155 @@\n+! Exercise combined OpenACC directives.\n+\n+! { dg-do compile }\n+! { dg-options \"-fopenacc -fdump-tree-gimple\" }\n+\n+! This error is temporary.  Remove when support is added for these clauses\n+! in the middle end.\n+! { dg-prune-output \"sorry, unimplemented\" }\n+\n+! Update the reduction tests.\n+\n+subroutine test\n+  implicit none\n+  integer a(100), i, j, z\n+\n+  ! PARALLEL\n+  \n+  !$acc parallel loop collapse (2)\n+  do i = 1, 100\n+     do j = 1, 10\n+     end do\n+  end do\n+  !$acc end parallel loop\n+  \n+  !$acc parallel loop gang\n+  do i = 1, 100\n+  end do\n+  !$acc end parallel loop\n+\n+  !$acc parallel loop worker\n+  do i = 1, 100\n+     do j = 1, 10\n+     end do\n+  end do\n+  !$acc end parallel loop\n+\n+  !$acc parallel loop vector\n+  do i = 1, 100\n+     do j = 1, 10\n+     end do\n+  end do\n+  !$acc end parallel loop\n+\n+  !$acc parallel loop seq\n+  do i = 1, 100\n+     do j = 1, 10\n+     end do\n+  end do\n+  !$acc end parallel loop\n+\n+  !$acc parallel loop auto\n+  do i = 1, 100\n+     do j = 1, 10\n+     end do\n+  end do\n+  !$acc end parallel loop\n+\n+  !$acc parallel loop tile (2, 3)\n+  do i = 1, 100\n+     do j = 1, 10\n+     end do\n+  end do\n+  !$acc end parallel loop\n+\n+  !$acc parallel loop independent\n+  do i = 1, 100\n+  end do\n+  !$acc end parallel loop\n+\n+  !$acc parallel loop private (z)\n+  do i = 1, 100\n+     z = 0\n+  end do\n+  !$acc end parallel loop\n+\n+!  !$acc parallel loop reduction (+:z) copy (z)\n+!  do i = 1, 100\n+!  end do\n+!  !$acc end parallel loop\n+\n+  ! KERNELS\n+\n+  !$acc kernels loop collapse (2)\n+  do i = 1, 100\n+     do j = 1, 10\n+     end do\n+  end do\n+  !$acc end kernels loop\n+  \n+  !$acc kernels loop gang\n+  do i = 1, 100\n+  end do\n+  !$acc end kernels loop\n+\n+  !$acc kernels loop worker\n+  do i = 1, 100\n+     do j = 1, 10\n+     end do\n+  end do\n+  !$acc end kernels loop\n+\n+  !$acc kernels loop vector\n+  do i = 1, 100\n+     do j = 1, 10\n+     end do\n+  end do\n+  !$acc end kernels loop\n+\n+  !$acc kernels loop seq\n+  do i = 1, 100\n+     do j = 1, 10\n+     end do\n+  end do\n+  !$acc end kernels loop\n+\n+  !$acc kernels loop auto\n+  do i = 1, 100\n+     do j = 1, 10\n+     end do\n+  end do\n+  !$acc end kernels loop\n+\n+  !$acc kernels loop tile (2, 3)\n+  do i = 1, 100\n+     do j = 1, 10\n+     end do\n+  end do\n+  !$acc end kernels loop\n+\n+  !$acc kernels loop independent\n+  do i = 1, 100\n+  end do\n+  !$acc end kernels loop\n+\n+  !$acc kernels loop private (z)\n+  do i = 1, 100\n+     z = 0\n+  end do\n+  !$acc end kernels loop\n+\n+!  !$acc kernels loop reduction (+:z) copy (z)\n+!  do i = 1, 100\n+!  end do\n+!  !$acc end kernels loop\n+end subroutine test\n+\n+! { dg-final { scan-tree-dump-times \"acc loop private.i. private.j. collapse.2.\" 2 \"gimple\" } }\n+! { dg-final { scan-tree-dump-times \"acc loop private.i. gang\" 2 \"gimple\" } }\n+! { dg-final { scan-tree-dump-times \"acc loop private.i. private.j. worker\" 2 \"gimple\" } }\n+! { dg-final { scan-tree-dump-times \"acc loop private.i. private.j. vector\" 2 \"gimple\" } }\n+! { dg-final { scan-tree-dump-times \"acc loop private.i. private.j. seq\" 2 \"gimple\" } }\n+! { dg-final { scan-tree-dump-times \"acc loop private.i. private.j. auto\" 2 \"gimple\" } }\n+! { dg-final { scan-tree-dump-times \"acc loop private.i. private.j. tile.2, 3\" 2 \"gimple\" } }\n+! { dg-final { scan-tree-dump-times \"acc loop private.i. independent\" 2 \"gimple\" } }\n+! { dg-final { scan-tree-dump-times \"private.z\" 2 \"gimple\" } }"}, {"sha": "c1fc52e6014331300ca2c8680e7ed44c64029534", "filename": "gcc/testsuite/gfortran.dg/goacc/default.f95", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a5e4956cc026cba54159d5c764486ac4151db85/gcc%2Ftestsuite%2Fgfortran.dg%2Fgoacc%2Fdefault.f95", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a5e4956cc026cba54159d5c764486ac4151db85/gcc%2Ftestsuite%2Fgfortran.dg%2Fgoacc%2Fdefault.f95", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fgoacc%2Fdefault.f95?ref=7a5e4956cc026cba54159d5c764486ac4151db85", "patch": "@@ -0,0 +1,17 @@\n+! { dg-do compile }\n+\n+program tile\n+  integer i, j, a\n+\n+  !$acc parallel default (shared) ! { dg-error \"Unclassifiable OpenACC directive\" }\n+  !$acc end parallel ! { dg-error \"Unexpected\" }\n+\n+  !$acc parallel default (private) ! { dg-error \"Unclassifiable OpenACC directive\" }\n+  !$acc end parallel ! { dg-error \"Unexpected\" }\n+\n+  !$acc parallel default (none)\n+  !$acc end parallel\n+\n+  !$acc parallel default (firstprivate) ! { dg-error \"Unclassifiable OpenACC directive\" }\n+  !$acc end parallel ! { dg-error \"Unexpected\" }\n+end program tile"}, {"sha": "5ce66aeacf226653b64f6907dc81610b591043a9", "filename": "gcc/testsuite/gfortran.dg/goacc/default_none.f95", "status": "added", "additions": 59, "deletions": 0, "changes": 59, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a5e4956cc026cba54159d5c764486ac4151db85/gcc%2Ftestsuite%2Fgfortran.dg%2Fgoacc%2Fdefault_none.f95", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a5e4956cc026cba54159d5c764486ac4151db85/gcc%2Ftestsuite%2Fgfortran.dg%2Fgoacc%2Fdefault_none.f95", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fgoacc%2Fdefault_none.f95?ref=7a5e4956cc026cba54159d5c764486ac4151db85", "patch": "@@ -0,0 +1,59 @@\n+! Ensure that the internal array variables, offset, lbound, etc., don't\n+! trigger errors with default(none).\n+\n+! { dg-do compile }\n+\n+program main\n+  implicit none\n+  integer i\n+  integer,parameter :: n = 100\n+  integer,allocatable :: a1(:), a2(:,:)\n+\n+  allocate (a1 (n))\n+  allocate (a2 (-n:n,-n:n))\n+  a1 (:) = -1\n+\n+  !$acc parallel loop default(none) copy (a1(1:n))\n+  do i = 1,n\n+     a1(i) = i\n+  end do\n+  !$acc end parallel loop\n+\n+  call foo (a1)\n+  call bar (a1, n)\n+  call foobar (a2,n)\n+\n+contains\n+\n+  subroutine foo (da1)\n+    integer :: da1(n)\n+\n+    !$acc parallel loop default(none) copy (da1(1:n))\n+    do i = 1,n\n+       da1(i) = i*2\n+    end do\n+    !$acc end parallel loop\n+  end subroutine foo\n+end program main\n+\n+subroutine bar (da2,n)\n+  integer :: n, da2(n)\n+  integer i\n+\n+  !$acc parallel loop default(none) copy (da2(1:n)) firstprivate(n)\n+  do i = 1,n\n+     da2(i) = i*3\n+  end do\n+  !$acc end parallel loop\n+end subroutine bar\n+\n+subroutine foobar (da3,n)\n+  integer :: n, da3(-n:n,-n:n)\n+  integer i\n+\n+  !$acc parallel loop default(none) copy (da3(-n:n,-n:n)) firstprivate(n)\n+  do i = 1,n\n+     da3(i,0) = i*3\n+  end do\n+  !$acc end parallel loop\n+end subroutine foobar"}, {"sha": "fb92deedadf6be6cbf87f999dbe0d17278c3ee17", "filename": "gcc/testsuite/gfortran.dg/goacc/firstprivate-1.f95", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a5e4956cc026cba54159d5c764486ac4151db85/gcc%2Ftestsuite%2Fgfortran.dg%2Fgoacc%2Ffirstprivate-1.f95", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a5e4956cc026cba54159d5c764486ac4151db85/gcc%2Ftestsuite%2Fgfortran.dg%2Fgoacc%2Ffirstprivate-1.f95", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fgoacc%2Ffirstprivate-1.f95?ref=7a5e4956cc026cba54159d5c764486ac4151db85", "patch": "@@ -0,0 +1,11 @@\n+! { dg-do compile }\n+\n+program test\n+  integer a, b(100)\n+\n+  !$acc parallel firstprivate (a, b)\n+  !$acc end parallel\n+\n+  !$acc parallel firstprivate (b(10:20)) ! { dg-error \"Syntax error in OpenMP variable list\" }\n+  !$acc end parallel ! { dg-error \"Unexpected !\\\\\\$ACC END PARALLEL statement\" }\n+end program test"}, {"sha": "4e46cf3cb41f42da92082fba0c0619b33b95b0da", "filename": "gcc/testsuite/gfortran.dg/goacc/gang-static.f95", "status": "added", "additions": 68, "deletions": 0, "changes": 68, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a5e4956cc026cba54159d5c764486ac4151db85/gcc%2Ftestsuite%2Fgfortran.dg%2Fgoacc%2Fgang-static.f95", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a5e4956cc026cba54159d5c764486ac4151db85/gcc%2Ftestsuite%2Fgfortran.dg%2Fgoacc%2Fgang-static.f95", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fgoacc%2Fgang-static.f95?ref=7a5e4956cc026cba54159d5c764486ac4151db85", "patch": "@@ -0,0 +1,68 @@\n+! { dg-do compile }\n+! { dg-additional-options \"-fdump-tree-omplower\" }\n+\n+program main\n+  integer, parameter :: n = 100\n+  integer i, a(n), b(n)\n+\n+  do i = 1, n\n+     b(i) = i\n+  end do\n+\n+  !$acc parallel loop gang (static:*) num_gangs (10)\n+  do i = 1, n\n+     a(i) = b(i) + 0\n+  end do\n+  !$acc end parallel loop\n+\n+  call test (a, b, 0, n)\n+\n+  !$acc parallel loop gang (static:1) num_gangs (10)\n+  do i = 1, n\n+     a(i) = b(i) + 1\n+  end do\n+  !$acc end parallel loop\n+\n+  call test (a, b, 1, n)\n+\n+  !$acc parallel loop gang (static:2) num_gangs (10)\n+  do i = 1, n\n+     a(i) = b(i) + 2\n+  end do\n+  !$acc end parallel loop\n+\n+  call test (a, b, 2, n)\n+\n+  !$acc parallel loop gang (static:5) num_gangs (10)\n+  do i = 1, n\n+     a(i) = b(i) + 5\n+  end do\n+  !$acc end parallel loop\n+\n+  call test (a, b, 5, n)\n+\n+  !$acc parallel loop gang (static:20) num_gangs (10)\n+  do i = 1, n\n+     a(i) = b(i) + 20\n+  end do\n+  !$acc end parallel loop\n+\n+  call test (a, b, 20, n)\n+\n+end program main\n+\n+subroutine test (a, b, sarg, n)\n+  integer n\n+  integer a (n), b(n), sarg\n+  integer i\n+\n+  do i = 1, n\n+     if (a(i) .ne. b(i) + sarg) call abort ()\n+  end do\n+end subroutine test\n+\n+! { dg-final { scan-tree-dump-times \"gang\\\\(static:\\\\\\*\\\\)\" 1 \"omplower\" } }\n+! { dg-final { scan-tree-dump-times \"gang\\\\(static:1\\\\)\" 1 \"omplower\" } }\n+! { dg-final { scan-tree-dump-times \"gang\\\\(static:2\\\\)\" 1 \"omplower\" } }\n+! { dg-final { scan-tree-dump-times \"gang\\\\(static:5\\\\)\" 1 \"omplower\" } }\n+! { dg-final { scan-tree-dump-times \"gang\\\\(static:20\\\\)\" 1 \"omplower\" } }"}, {"sha": "4db3a506c05ea8d5d8b535599c86040ac33b5ee0", "filename": "gcc/testsuite/gfortran.dg/goacc/kernels-loop-inner.f95", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a5e4956cc026cba54159d5c764486ac4151db85/gcc%2Ftestsuite%2Fgfortran.dg%2Fgoacc%2Fkernels-loop-inner.f95", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a5e4956cc026cba54159d5c764486ac4151db85/gcc%2Ftestsuite%2Fgfortran.dg%2Fgoacc%2Fkernels-loop-inner.f95", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fgoacc%2Fkernels-loop-inner.f95?ref=7a5e4956cc026cba54159d5c764486ac4151db85", "patch": "@@ -0,0 +1,23 @@\n+! { dg-additional-options \"-O2\" }\n+! { dg-additional-options \"-ftree-parallelize-loops=32\" }\n+\n+program main\n+   implicit none\n+\n+   integer :: a(100,100), b(100,100)\n+   integer :: i, j, d\n+\n+   !$acc kernels\n+   do i=1,100\n+     do j=1,100\n+       a(i,j) = 1\n+       b(i,j) = 2\n+       a(i,j) = a(i,j) + b(i,j)\n+     end do\n+   end do\n+   !$acc end kernels\n+\n+   d = sum(a)\n+\n+   print *,d\n+end program main"}, {"sha": "fef3d106d4b3f3f6a49f20493707a7b2ae919ed4", "filename": "gcc/testsuite/gfortran.dg/goacc/kernels-loops-adjacent.f95", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a5e4956cc026cba54159d5c764486ac4151db85/gcc%2Ftestsuite%2Fgfortran.dg%2Fgoacc%2Fkernels-loops-adjacent.f95", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a5e4956cc026cba54159d5c764486ac4151db85/gcc%2Ftestsuite%2Fgfortran.dg%2Fgoacc%2Fkernels-loops-adjacent.f95", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fgoacc%2Fkernels-loops-adjacent.f95?ref=7a5e4956cc026cba54159d5c764486ac4151db85", "patch": "@@ -0,0 +1,19 @@\n+! { dg-additional-options \"-O2\" }\n+! { dg-additional-options \"-ftree-parallelize-loops=10\" }\n+\n+program main\n+   implicit none\n+\n+   integer :: a(10000), b(10000)\n+   integer :: d\n+\n+   !$acc kernels\n+   a = 1\n+   b = 2\n+   a = a + b\n+   !$acc end kernels\n+\n+   d = sum(a)\n+\n+   print *,d\n+end program main"}, {"sha": "a8006bcdd84e0d7fd73880407f4a9ea4871353ea", "filename": "gcc/testsuite/gfortran.dg/goacc/list.f95", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a5e4956cc026cba54159d5c764486ac4151db85/gcc%2Ftestsuite%2Fgfortran.dg%2Fgoacc%2Flist.f95", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a5e4956cc026cba54159d5c764486ac4151db85/gcc%2Ftestsuite%2Fgfortran.dg%2Fgoacc%2Flist.f95", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fgoacc%2Flist.f95?ref=7a5e4956cc026cba54159d5c764486ac4151db85", "patch": "@@ -5,7 +5,7 @@ program test\n   implicit none\n \n   integer :: i, j, k, l, a(10)\n-  common /b/ j, k\n+  common /b/ k\n   real, pointer :: p1 => NULL()\n   complex :: c, d(10)\n \n@@ -108,4 +108,4 @@ program test\n   !$acc host_data use_device(p1) ! { dg-error \"POINTER\" }\n   !$acc end host_data\n \n-end program test\n\\ No newline at end of file\n+end program test"}, {"sha": "b5e6368a4936878b58e86fe8fe61b3b6a1eb1223", "filename": "gcc/testsuite/gfortran.dg/goacc/loop-2.f95", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a5e4956cc026cba54159d5c764486ac4151db85/gcc%2Ftestsuite%2Fgfortran.dg%2Fgoacc%2Floop-2.f95", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a5e4956cc026cba54159d5c764486ac4151db85/gcc%2Ftestsuite%2Fgfortran.dg%2Fgoacc%2Floop-2.f95", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fgoacc%2Floop-2.f95?ref=7a5e4956cc026cba54159d5c764486ac4151db85", "patch": "@@ -66,7 +66,7 @@ program test\n     !$acc loop seq worker ! { dg-error \"conflicts with\" }\n     DO i = 1,10\n     ENDDO\n-    !$acc loop gang worker ! { dg-error \"conflicts with\" }\n+    !$acc loop gang worker\n     DO i = 1,10\n     ENDDO\n \n@@ -94,10 +94,10 @@ program test\n     !$acc loop seq vector ! { dg-error \"conflicts with\" }\n     DO i = 1,10\n     ENDDO\n-    !$acc loop gang vector ! { dg-error \"conflicts with\" }\n+    !$acc loop gang vector\n     DO i = 1,10\n     ENDDO\n-    !$acc loop worker vector ! { dg-error \"conflicts with\" }\n+    !$acc loop worker vector\n     DO i = 1,10\n     ENDDO\n \n@@ -239,7 +239,7 @@ program test\n     !$acc loop seq worker ! { dg-error \"conflicts with\" }\n     DO i = 1,10\n     ENDDO\n-    !$acc loop gang worker ! { dg-error \"conflicts with\" }\n+    !$acc loop gang worker\n     DO i = 1,10\n     ENDDO\n \n@@ -267,10 +267,10 @@ program test\n     !$acc loop seq vector ! { dg-error \"conflicts with\" }\n     DO i = 1,10\n     ENDDO\n-    !$acc loop gang vector ! { dg-error \"conflicts with\" }\n+    !$acc loop gang vector\n     DO i = 1,10\n     ENDDO\n-    !$acc loop worker vector ! { dg-error \"conflicts with\" }\n+    !$acc loop worker vector\n     DO i = 1,10\n     ENDDO\n \n@@ -392,7 +392,7 @@ program test\n   !$acc kernels loop seq worker ! { dg-error \"conflicts with\" }\n   DO i = 1,10\n   ENDDO\n-  !$acc kernels loop gang worker ! { dg-error \"conflicts with\" }\n+  !$acc kernels loop gang worker\n   DO i = 1,10\n   ENDDO\n \n@@ -420,10 +420,10 @@ program test\n   !$acc kernels loop seq vector ! { dg-error \"conflicts with\" }\n   DO i = 1,10\n   ENDDO\n-  !$acc kernels loop gang vector ! { dg-error \"conflicts with\" }\n+  !$acc kernels loop gang vector\n   DO i = 1,10\n   ENDDO\n-  !$acc kernels loop worker vector ! { dg-error \"conflicts with\" }\n+  !$acc kernels loop worker vector\n   DO i = 1,10\n   ENDDO\n \n@@ -544,7 +544,7 @@ program test\n   !$acc parallel loop seq worker ! { dg-error \"conflicts with\" }\n   DO i = 1,10\n   ENDDO\n-  !$acc parallel loop gang worker ! { dg-error \"conflicts with\" }\n+  !$acc parallel loop gang worker\n   DO i = 1,10\n   ENDDO\n \n@@ -572,10 +572,10 @@ program test\n   !$acc parallel loop seq vector ! { dg-error \"conflicts with\" }\n   DO i = 1,10\n   ENDDO\n-  !$acc parallel loop gang vector ! { dg-error \"conflicts with\" }\n+  !$acc parallel loop gang vector\n   DO i = 1,10\n   ENDDO\n-  !$acc parallel loop worker vector ! { dg-error \"conflicts with\" }\n+  !$acc parallel loop worker vector\n   DO i = 1,10\n   ENDDO\n \n@@ -646,4 +646,4 @@ program test\n   !$acc parallel loop gang worker tile(*) \n   DO i = 1,10\n   ENDDO\n-end\n\\ No newline at end of file\n+end"}, {"sha": "7c53c022de4b1d369c39c17c5652703efd57248f", "filename": "gcc/testsuite/gfortran.dg/goacc/loop-4.f95", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a5e4956cc026cba54159d5c764486ac4151db85/gcc%2Ftestsuite%2Fgfortran.dg%2Fgoacc%2Floop-4.f95", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a5e4956cc026cba54159d5c764486ac4151db85/gcc%2Ftestsuite%2Fgfortran.dg%2Fgoacc%2Floop-4.f95", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fgoacc%2Floop-4.f95?ref=7a5e4956cc026cba54159d5c764486ac4151db85", "patch": "@@ -0,0 +1,7 @@\n+! Ensure that loops not affiliated with acc compute regions cause an error.\n+\n+subroutine test1\n+    !$acc loop gang ! { dg-error \"loop directive must be associated with an OpenACC compute region\" }\n+  DO i = 1,10\n+  ENDDO\n+end subroutine test1"}, {"sha": "5cbd975bea69c4fc9245e3e565887a5a39c9d118", "filename": "gcc/testsuite/gfortran.dg/goacc/loop-5.f95", "status": "added", "additions": 363, "deletions": 0, "changes": 363, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a5e4956cc026cba54159d5c764486ac4151db85/gcc%2Ftestsuite%2Fgfortran.dg%2Fgoacc%2Floop-5.f95", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a5e4956cc026cba54159d5c764486ac4151db85/gcc%2Ftestsuite%2Fgfortran.dg%2Fgoacc%2Floop-5.f95", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fgoacc%2Floop-5.f95?ref=7a5e4956cc026cba54159d5c764486ac4151db85", "patch": "@@ -0,0 +1,363 @@\n+! { dg-do compile }\n+! { dg-additional-options \"-fmax-errors=100\" }\n+\n+! { dg-prune-output \"sorry, unimplemented\" }\n+! { dg-prune-output \"Error: work-sharing region\" }\n+\n+program test\n+  implicit none\n+  integer :: i, j\n+\n+  !$acc kernels\n+    !$acc loop auto\n+    DO i = 1,10\n+    ENDDO\n+    !$acc loop gang\n+    DO i = 1,10\n+    ENDDO\n+    !$acc loop gang(5)\n+    DO i = 1,10\n+    ENDDO\n+    !$acc loop gang(num:5)\n+    DO i = 1,10\n+    ENDDO\n+    !$acc loop gang(static:5)\n+    DO i = 1,10\n+    ENDDO\n+    !$acc loop gang(static:*)\n+    DO i = 1,10\n+    ENDDO\n+    !$acc loop gang\n+    DO i = 1,10\n+      !$acc loop vector\n+      DO j = 1,10\n+      ENDDO\n+      !$acc loop worker\n+      DO j = 1,10\n+      ENDDO\n+    ENDDO\n+\n+    !$acc loop worker\n+    DO i = 1,10\n+    ENDDO\n+    !$acc loop worker(5)\n+    DO i = 1,10\n+    ENDDO\n+    !$acc loop worker(num:5)\n+    DO i = 1,10\n+    ENDDO\n+    !$acc loop worker\n+    DO i = 1,10\n+      !$acc loop vector\n+      DO j = 1,10\n+      ENDDO\n+    ENDDO\n+    !$acc loop gang worker\n+    DO i = 1,10\n+    ENDDO\n+\n+    !$acc loop vector\n+    DO i = 1,10\n+    ENDDO\n+    !$acc loop vector(5)\n+    DO i = 1,10\n+    ENDDO\n+    !$acc loop vector(length:5)\n+    DO i = 1,10\n+    ENDDO\n+    !$acc loop vector\n+    DO i = 1,10\n+    ENDDO\n+    !$acc loop gang vector\n+    DO i = 1,10\n+    ENDDO\n+    !$acc loop worker vector\n+    DO i = 1,10\n+    ENDDO\n+\n+    !$acc loop auto\n+    DO i = 1,10\n+    ENDDO\n+\n+    !$acc loop tile(1)\n+    DO i = 1,10\n+    ENDDO\n+    !$acc loop tile(2)\n+    DO i = 1,10\n+    ENDDO\n+    !$acc loop tile(6-2)\n+    DO i = 1,10\n+    ENDDO\n+    !$acc loop tile(6+2)\n+    DO i = 1,10\n+    ENDDO\n+    !$acc loop tile(*)\n+    DO i = 1,10\n+    ENDDO\n+    !$acc loop tile(*, 1)\n+    DO i = 1,10\n+      DO j = 1,10\n+      ENDDO\n+    ENDDO\n+    !$acc loop tile(-1) ! { dg-warning \"must be positive\" }\n+    do i = 1,10\n+    enddo\n+    !$acc loop vector tile(*)\n+    DO i = 1,10\n+    ENDDO\n+    !$acc loop worker tile(*)\n+    DO i = 1,10\n+    ENDDO\n+    !$acc loop gang tile(*)\n+    DO i = 1,10\n+    ENDDO\n+    !$acc loop vector gang tile(*)\n+    DO i = 1,10\n+    ENDDO\n+    !$acc loop vector worker tile(*)\n+    DO i = 1,10\n+    ENDDO\n+    !$acc loop gang worker tile(*)\n+    DO i = 1,10\n+    ENDDO\n+  !$acc end kernels\n+\n+\n+  !$acc parallel\n+    !$acc loop tile(1)\n+    DO i = 1,10\n+    ENDDO\n+    !$acc loop tile(*)\n+    DO i = 1,10\n+    ENDDO\n+    !$acc loop tile(2)\n+    DO i = 1,10\n+      DO j = 1,10\n+      ENDDO\n+    ENDDO\n+    !$acc loop tile(-1) ! { dg-warning \"must be positive\" }\n+    do i = 1,10\n+    enddo\n+    !$acc loop vector tile(*)\n+    DO i = 1,10\n+    ENDDO\n+    !$acc loop worker tile(*)\n+    DO i = 1,10\n+    ENDDO\n+    !$acc loop gang tile(*)\n+    DO i = 1,10\n+    ENDDO\n+    !$acc loop vector gang tile(*)\n+    DO i = 1,10\n+    ENDDO\n+    !$acc loop vector worker tile(*)\n+    DO i = 1,10\n+    ENDDO\n+    !$acc loop gang worker tile(*)\n+    DO i = 1,10\n+    ENDDO\n+  !$acc end parallel\n+\n+  !$acc kernels loop auto\n+  DO i = 1,10\n+  ENDDO\n+  !$acc kernels loop gang\n+  DO i = 1,10\n+  ENDDO\n+  !$acc kernels loop gang(5)\n+  DO i = 1,10\n+  ENDDO\n+  !$acc kernels loop gang(num:5)\n+  DO i = 1,10\n+  ENDDO\n+  !$acc kernels loop gang(static:5)\n+  DO i = 1,10\n+  ENDDO\n+  !$acc kernels loop gang(static:*)\n+  DO i = 1,10\n+  ENDDO\n+  !$acc kernels loop gang\n+  DO i = 1,10\n+    !$acc kernels loop gang ! { dg-error \"OpenACC construct inside of non-OpenACC region\" }\n+    DO j = 1,10\n+    ENDDO\n+  ENDDO\n+\n+  !$acc kernels loop worker\n+  DO i = 1,10\n+  ENDDO\n+  !$acc kernels loop worker(5)\n+  DO i = 1,10\n+  ENDDO\n+  !$acc kernels loop worker(num:5)\n+  DO i = 1,10\n+  ENDDO\n+  !$acc kernels loop worker\n+  DO i = 1,10\n+    !$acc kernels loop worker ! { dg-error \"OpenACC construct inside of non-OpenACC region\" }\n+    DO j = 1,10\n+    ENDDO\n+    !$acc kernels loop gang ! { dg-error \"OpenACC construct inside of non-OpenACC region\" }\n+    DO j = 1,10\n+    ENDDO\n+  ENDDO\n+  !$acc kernels loop gang worker\n+  DO i = 1,10\n+  ENDDO\n+\n+  !$acc kernels loop vector\n+  DO i = 1,10\n+  ENDDO\n+  !$acc kernels loop vector(5)\n+  DO i = 1,10\n+  ENDDO\n+  !$acc kernels loop vector(length:5)\n+  DO i = 1,10\n+  ENDDO\n+  !$acc kernels loop vector\n+  DO i = 1,10\n+    !$acc kernels loop vector ! { dg-error \"OpenACC construct inside of non-OpenACC region\" }\n+    DO j = 1,10\n+    ENDDO\n+    !$acc kernels loop worker ! { dg-error \"OpenACC construct inside of non-OpenACC region\" }\n+    DO j = 1,10\n+    ENDDO\n+    !$acc kernels loop gang ! { dg-error \"OpenACC construct inside of non-OpenACC region\" }\n+    DO j = 1,10\n+    ENDDO\n+  ENDDO\n+  !$acc kernels loop gang vector\n+  DO i = 1,10\n+  ENDDO\n+  !$acc kernels loop worker vector\n+  DO i = 1,10\n+  ENDDO\n+\n+  !$acc kernels loop auto\n+  DO i = 1,10\n+  ENDDO\n+\n+  !$acc kernels loop tile(1)\n+  DO i = 1,10\n+  ENDDO\n+  !$acc kernels loop tile(*)\n+  DO i = 1,10\n+  ENDDO\n+  !$acc kernels loop tile(*, 1)\n+  DO i = 1,10\n+    DO j = 1,10\n+    ENDDO\n+  ENDDO\n+  !$acc kernels loop tile(-1) ! { dg-warning \"must be positive\" }\n+  do i = 1,10\n+  enddo\n+  !$acc kernels loop vector tile(*)\n+  DO i = 1,10\n+  ENDDO\n+  !$acc kernels loop worker tile(*)\n+  DO i = 1,10\n+  ENDDO\n+  !$acc kernels loop gang tile(*)\n+  DO i = 1,10\n+  ENDDO\n+  !$acc kernels loop vector gang tile(*)\n+  DO i = 1,10\n+  ENDDO\n+  !$acc kernels loop vector worker tile(*)\n+  DO i = 1,10\n+  ENDDO\n+  !$acc kernels loop gang worker tile(*)\n+  DO i = 1,10\n+  ENDDO\n+\n+  !$acc parallel loop auto\n+  DO i = 1,10\n+  ENDDO\n+  !$acc parallel loop gang\n+  DO i = 1,10\n+  ENDDO\n+  !$acc parallel loop gang(static:5)\n+  DO i = 1,10\n+  ENDDO\n+  !$acc parallel loop gang(static:*)\n+  DO i = 1,10\n+  ENDDO\n+  !$acc parallel loop gang\n+  DO i = 1,10\n+    !$acc parallel loop gang ! { dg-error \"OpenACC construct inside of non-OpenACC region\" }\n+    DO j = 1,10\n+    ENDDO\n+  ENDDO\n+\n+  !$acc parallel loop worker\n+  DO i = 1,10\n+  ENDDO\n+  !$acc parallel loop worker\n+  DO i = 1,10\n+    !$acc parallel loop worker ! { dg-error \"OpenACC construct inside of non-OpenACC region\" }\n+    DO j = 1,10\n+    ENDDO\n+    !$acc parallel loop gang ! { dg-error \"OpenACC construct inside of non-OpenACC region\" }\n+    DO j = 1,10\n+    ENDDO\n+  ENDDO\n+  !$acc parallel loop gang worker\n+  DO i = 1,10\n+  ENDDO\n+\n+  !$acc parallel loop vector\n+  DO i = 1,10\n+    !$acc parallel loop vector ! { dg-error \"OpenACC construct inside of non-OpenACC region\" }\n+    DO j = 1,10\n+    ENDDO\n+    !$acc parallel loop worker ! { dg-error \"OpenACC construct inside of non-OpenACC region\" }\n+    DO j = 1,10\n+    ENDDO\n+    !$acc parallel loop gang ! { dg-error \"OpenACC construct inside of non-OpenACC region\" }\n+    DO j = 1,10\n+    ENDDO\n+  ENDDO\n+  !$acc parallel loop gang vector\n+  DO i = 1,10\n+  ENDDO\n+  !$acc parallel loop worker vector\n+  DO i = 1,10\n+  ENDDO\n+\n+  !$acc parallel loop auto\n+  DO i = 1,10\n+  ENDDO\n+\n+  !$acc parallel loop tile(1)\n+  DO i = 1,10\n+  ENDDO\n+  !$acc parallel loop tile(*)\n+  DO i = 1,10\n+  ENDDO\n+  !$acc parallel loop tile(*, 1)\n+  DO i = 1,10\n+    DO j = 1,10\n+    ENDDO\n+  ENDDO\n+  !$acc parallel loop tile(-1) ! { dg-warning \"must be positive\" }\n+  do i = 1,10\n+  enddo\n+  !$acc parallel loop vector tile(*)\n+  DO i = 1,10\n+  ENDDO\n+  !$acc parallel loop worker tile(*)\n+  DO i = 1,10\n+  ENDDO\n+  !$acc parallel loop gang tile(*)\n+  DO i = 1,10\n+  ENDDO\n+  !$acc parallel loop vector gang tile(*)\n+  DO i = 1,10\n+  ENDDO\n+  !$acc parallel loop vector worker tile(*)\n+  DO i = 1,10\n+  ENDDO\n+  !$acc parallel loop gang worker tile(*)\n+  DO i = 1,10\n+  ENDDO\n+end"}, {"sha": "e13abc764c8a4c2d2325ca7f5ec8fd5ff4e1673d", "filename": "gcc/testsuite/gfortran.dg/goacc/loop-6.f95", "status": "added", "additions": 82, "deletions": 0, "changes": 82, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a5e4956cc026cba54159d5c764486ac4151db85/gcc%2Ftestsuite%2Fgfortran.dg%2Fgoacc%2Floop-6.f95", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a5e4956cc026cba54159d5c764486ac4151db85/gcc%2Ftestsuite%2Fgfortran.dg%2Fgoacc%2Floop-6.f95", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fgoacc%2Floop-6.f95?ref=7a5e4956cc026cba54159d5c764486ac4151db85", "patch": "@@ -0,0 +1,82 @@\n+! { dg-do compile }\n+! { dg-additional-options \"-fmax-errors=100\" }\n+\n+! This error is temporary.  Remove when support is added for these clauses\n+! in the middle end.\n+! { dg-prune-output \"sorry, unimplemented\" }\n+! { dg-prune-output \"Error: work-sharing region\" }\n+\n+program test\n+  implicit none\n+  integer :: i, j\n+\n+  !$acc parallel\n+    !$acc loop auto\n+    DO i = 1,10\n+    ENDDO\n+    !$acc loop gang\n+    DO i = 1,10\n+    ENDDO\n+    !$acc loop gang(static:5)\n+    DO i = 1,10\n+    ENDDO\n+    !$acc loop gang(static:*)\n+    DO i = 1,10\n+    ENDDO\n+    !$acc loop gang\n+    DO i = 1,10\n+      !$acc loop vector\n+      DO j = 1,10\n+      ENDDO\n+      !$acc loop worker\n+      DO j = 1,10\n+      ENDDO\n+    ENDDO\n+\n+    !$acc loop worker\n+    DO i = 1,10\n+    ENDDO\n+    !$acc loop worker\n+    DO i = 1,10\n+      !$acc loop vector\n+      DO j = 1,10\n+      ENDDO\n+    ENDDO\n+    !$acc loop gang worker\n+    DO i = 1,10\n+    ENDDO\n+\n+    !$acc loop vector\n+    DO i = 1,10\n+    ENDDO\n+    !$acc loop vector(5) ! { dg-error \"argument not permitted\" }\n+    DO i = 1,10\n+    ENDDO\n+    !$acc loop vector(length:5) ! { dg-error \"argument not permitted\" }\n+    DO i = 1,10\n+    ENDDO\n+    !$acc loop vector\n+    DO i = 1,10\n+    ENDDO\n+    !$acc loop gang vector\n+    DO i = 1,10\n+    ENDDO\n+    !$acc loop worker vector\n+    DO i = 1,10\n+    ENDDO\n+\n+    !$acc loop auto\n+    DO i = 1,10\n+    ENDDO\n+  !$acc end parallel\n+\n+  !$acc parallel loop vector\n+  DO i = 1,10\n+  ENDDO\n+  !$acc parallel loop vector(5) ! { dg-error \"argument not permitted\" }\n+  DO i = 1,10\n+  ENDDO\n+  !$acc parallel loop vector(length:5) ! { dg-error \"argument not permitted\" }\n+  DO i = 1,10\n+  ENDDO\n+end"}, {"sha": "6cfd715e1186875b00aec3cf834920948a5529ec", "filename": "gcc/testsuite/gfortran.dg/goacc/loop-tree-1.f90", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a5e4956cc026cba54159d5c764486ac4151db85/gcc%2Ftestsuite%2Fgfortran.dg%2Fgoacc%2Floop-tree-1.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a5e4956cc026cba54159d5c764486ac4151db85/gcc%2Ftestsuite%2Fgfortran.dg%2Fgoacc%2Floop-tree-1.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fgoacc%2Floop-tree-1.f90?ref=7a5e4956cc026cba54159d5c764486ac4151db85", "patch": "@@ -3,6 +3,11 @@\n \n ! test for tree-dump-original and spaces-commas\n \n+! This error is temporary.  Remove when support is added for these clauses\n+! in the middle end.\n+! { dg-prune-output \"sorry, unimplemented\" }\n+! { dg-prune-output \"Error: work-sharing region\" }\n+\n program test\n   implicit none\n   integer :: i, j, k, m, sum\n@@ -17,7 +22,7 @@ program test\n \n   !$acc loop independent gang (3)\n   DO i = 1,10\n-    !$acc loop worker(3) ! { dg-error \"work-sharing region may not be closely nested inside of work-sharing, critical, ordered, master or explicit task region\" }\n+    !$acc loop worker(3)\n     DO j = 1,10\n       !$acc loop vector(5)\n       DO k = 1,10"}, {"sha": "287007623c36405bb8e083f594a1b5f8a852c656", "filename": "gcc/testsuite/gfortran.dg/goacc/multi-clause.f90", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a5e4956cc026cba54159d5c764486ac4151db85/gcc%2Ftestsuite%2Fgfortran.dg%2Fgoacc%2Fmulti-clause.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a5e4956cc026cba54159d5c764486ac4151db85/gcc%2Ftestsuite%2Fgfortran.dg%2Fgoacc%2Fmulti-clause.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fgoacc%2Fmulti-clause.f90?ref=7a5e4956cc026cba54159d5c764486ac4151db85", "patch": "@@ -0,0 +1,13 @@\n+! Test if variable appearing in multiple clauses are errors.\n+\n+! { dg-compile }\n+\n+program combined\n+  implicit none\n+  integer a(100), i, j\n+\n+  !$acc parallel loop reduction (+:j) copy (j) copyout(j) ! { dg-error \"Symbol 'j' present on multiple clauses\" }\n+  do i = 1, 100\n+  end do\n+  !$acc end parallel loop\n+end program combined"}, {"sha": "9037f6c895f25fdc36838821d344188c54f148f9", "filename": "gcc/testsuite/gfortran.dg/goacc/parallel-tree.f95", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a5e4956cc026cba54159d5c764486ac4151db85/gcc%2Ftestsuite%2Fgfortran.dg%2Fgoacc%2Fparallel-tree.f95", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a5e4956cc026cba54159d5c764486ac4151db85/gcc%2Ftestsuite%2Fgfortran.dg%2Fgoacc%2Fparallel-tree.f95", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fgoacc%2Fparallel-tree.f95?ref=7a5e4956cc026cba54159d5c764486ac4151db85", "patch": "@@ -37,4 +37,3 @@ end program test\n \n ! { dg-final { scan-tree-dump-times \"map\\\\(force_deviceptr:u\\\\)\" 1 \"original\" } } \n ! { dg-final { scan-tree-dump-times \"private\\\\(v\\\\)\" 1 \"original\" } } \n-! { dg-final { scan-tree-dump-times \"firstprivate\\\\(w\\\\)\" 1 \"original\" } } "}, {"sha": "d88d20e22d3c96ffa367328016a28d1e63f61a89", "filename": "gcc/testsuite/gfortran.dg/goacc/update.f95", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a5e4956cc026cba54159d5c764486ac4151db85/gcc%2Ftestsuite%2Fgfortran.dg%2Fgoacc%2Fupdate.f95", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a5e4956cc026cba54159d5c764486ac4151db85/gcc%2Ftestsuite%2Fgfortran.dg%2Fgoacc%2Fupdate.f95", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fgoacc%2Fupdate.f95?ref=7a5e4956cc026cba54159d5c764486ac4151db85", "patch": "@@ -0,0 +1,5 @@\n+! { dg-do compile } \n+\n+program foo\n+  !$acc update ! { dg-error \"must contain at least one 'device' or 'host' or 'self' clause\" }\n+end program foo"}, {"sha": "f2299f28442a6572f33273e153619e8e326dbe8e", "filename": "gcc/tree-core.h", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a5e4956cc026cba54159d5c764486ac4151db85/gcc%2Ftree-core.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a5e4956cc026cba54159d5c764486ac4151db85/gcc%2Ftree-core.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-core.h?ref=7a5e4956cc026cba54159d5c764486ac4151db85", "patch": "@@ -432,7 +432,10 @@ enum omp_clause_code {\n   OMP_CLAUSE_NUM_WORKERS,\n \n   /* OpenACC clause: vector_length (integer-expression).  */\n-  OMP_CLAUSE_VECTOR_LENGTH\n+  OMP_CLAUSE_VECTOR_LENGTH,\n+\n+  /* OpenACC clause: tile ( size-expr-list ).  */\n+  OMP_CLAUSE_TILE\n };\n \n #undef DEFTREESTRUCT"}, {"sha": "b1685fd10182f032ac815a005e9c72629b4a9929", "filename": "gcc/tree-pretty-print.c", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a5e4956cc026cba54159d5c764486ac4151db85/gcc%2Ftree-pretty-print.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a5e4956cc026cba54159d5c764486ac4151db85/gcc%2Ftree-pretty-print.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-pretty-print.c?ref=7a5e4956cc026cba54159d5c764486ac4151db85", "patch": "@@ -932,6 +932,12 @@ dump_omp_clause (pretty_printer *pp, tree clause, int spc, int flags)\n     case OMP_CLAUSE_INDEPENDENT:\n       pp_string (pp, \"independent\");\n       break;\n+    case OMP_CLAUSE_TILE:\n+      pp_string (pp, \"tile(\");\n+      dump_generic_node (pp, OMP_CLAUSE_TILE_LIST (clause),\n+\t\t\t spc, flags, false);\n+      pp_right_paren (pp);\n+      break;\n \n     default:\n       /* Should never happen.  */"}, {"sha": "5b9a7bdc2fe6b0018b1facaa811013a7d3a64237", "filename": "gcc/tree.c", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a5e4956cc026cba54159d5c764486ac4151db85/gcc%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a5e4956cc026cba54159d5c764486ac4151db85/gcc%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.c?ref=7a5e4956cc026cba54159d5c764486ac4151db85", "patch": "@@ -328,6 +328,7 @@ unsigned const char omp_clause_num_ops[] =\n   1, /* OMP_CLAUSE_NUM_GANGS  */\n   1, /* OMP_CLAUSE_NUM_WORKERS  */\n   1, /* OMP_CLAUSE_VECTOR_LENGTH  */\n+  1, /* OMP_CLAUSE_TILE  */\n };\n \n const char * const omp_clause_code_name[] =\n@@ -398,7 +399,8 @@ const char * const omp_clause_code_name[] =\n   \"vector\",\n   \"num_gangs\",\n   \"num_workers\",\n-  \"vector_length\"\n+  \"vector_length\",\n+  \"tile\"\n };\n \n \n@@ -11595,6 +11597,7 @@ walk_tree_1 (tree *tp, walk_tree_fn func, void *data,\n \tcase OMP_CLAUSE_DEFAULTMAP:\n \tcase OMP_CLAUSE_AUTO:\n \tcase OMP_CLAUSE_SEQ:\n+\tcase OMP_CLAUSE_TILE:\n \t  WALK_SUBTREE_TAIL (OMP_CLAUSE_CHAIN (*tp));\n \n \tcase OMP_CLAUSE_LASTPRIVATE:"}, {"sha": "6768b3bb29bff86194eb55a41e192cde408365f7", "filename": "gcc/tree.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a5e4956cc026cba54159d5c764486ac4151db85/gcc%2Ftree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a5e4956cc026cba54159d5c764486ac4151db85/gcc%2Ftree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.h?ref=7a5e4956cc026cba54159d5c764486ac4151db85", "patch": "@@ -1556,6 +1556,9 @@ extern void protected_set_expr_location (tree, location_t);\n #define OMP_CLAUSE_DEFAULT_KIND(NODE) \\\n   (OMP_CLAUSE_SUBCODE_CHECK (NODE, OMP_CLAUSE_DEFAULT)->omp_clause.subcode.default_kind)\n \n+#define OMP_CLAUSE_TILE_LIST(NODE) \\\n+  OMP_CLAUSE_OPERAND (OMP_CLAUSE_SUBCODE_CHECK (NODE, OMP_CLAUSE_TILE), 0)\n+\n /* SSA_NAME accessors.  */\n \n /* Returns the IDENTIFIER_NODE giving the SSA name a name or NULL_TREE"}]}