{"sha": "e64f5acfafe9a0e1842716d80e12dd0d2b075435", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTY0ZjVhY2ZhZmU5YTBlMTg0MjcxNmQ4MGUxMmRkMGQyYjA3NTQzNQ==", "commit": {"author": {"name": "Steve Ellcey", "email": "sje@cup.hp.com", "date": "2006-10-09T15:55:38Z"}, "committer": {"name": "Steve Ellcey", "email": "sje@gcc.gnu.org", "date": "2006-10-09T15:55:38Z"}, "message": "re PR target/27880 (undefined reference to `_Unwind_GetIPInfo')\n\n\tPR target/27880\n\t* unwind-c.c (PERSONALITY_FUNCTION): Ifdef use of _Unwind_GetIPInfo.\n\t* configure.ac (HAVE_GETIPINFO): Check for _Unwind_GetIPInfo.\n\t* configure: Regenerate.\n\t* config.in: Regenerate.\n\nFrom-SVN: r117576", "tree": {"sha": "6b262ac07e2b116d237352ff90b639547d322f4a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6b262ac07e2b116d237352ff90b639547d322f4a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e64f5acfafe9a0e1842716d80e12dd0d2b075435", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e64f5acfafe9a0e1842716d80e12dd0d2b075435", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e64f5acfafe9a0e1842716d80e12dd0d2b075435", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e64f5acfafe9a0e1842716d80e12dd0d2b075435/comments", "author": null, "committer": null, "parents": [{"sha": "f4935db5d7edf4a64116e7249dea65b6c654743f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f4935db5d7edf4a64116e7249dea65b6c654743f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f4935db5d7edf4a64116e7249dea65b6c654743f"}], "stats": {"total": 188, "additions": 188, "deletions": 0}, "files": [{"sha": "ac05e546418b5a9831a0f6b9b9b512cd44823a10", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e64f5acfafe9a0e1842716d80e12dd0d2b075435/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e64f5acfafe9a0e1842716d80e12dd0d2b075435/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=e64f5acfafe9a0e1842716d80e12dd0d2b075435", "patch": "@@ -1,3 +1,11 @@\n+2006-10-09  Steve Ellcey  <sje@cup.hp.com>\n+\n+\tPR target/27880\n+\t* unwind-c.c (PERSONALITY_FUNCTION): Ifdef use of _Unwind_GetIPInfo.\n+\t* configure.ac (HAVE_GETIPINFO): Check for _Unwind_GetIPInfo.\n+\t* configure: Regenerate.\n+\t* config.in: Regenerate.\n+\n 2006-10-09  Aldy Hernandez  <aldyh@redhat.com>\n \n         * tree-mudflap.c (mf_xform_derefs_1): Add parentheses around TREE_TYPE."}, {"sha": "65b583bea4e3d98eac50363ff6b25a17a385052d", "filename": "gcc/config.in", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e64f5acfafe9a0e1842716d80e12dd0d2b075435/gcc%2Fconfig.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e64f5acfafe9a0e1842716d80e12dd0d2b075435/gcc%2Fconfig.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig.in?ref=e64f5acfafe9a0e1842716d80e12dd0d2b075435", "patch": "@@ -793,6 +793,9 @@\n #endif\n \n \n+/* Define to 1 if system unwind library has _Unwind_GetIPInfo. */\n+#undef HAVE_GETIPINFO\n+\n /* Define to 1 if you have the `getrlimit' function. */\n #ifndef USED_FOR_TARGET\n #undef HAVE_GETRLIMIT"}, {"sha": "ff7e9c811c70ec8fce130021a7c717b00766dd14", "filename": "gcc/configure", "status": "modified", "additions": 153, "deletions": 0, "changes": 153, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e64f5acfafe9a0e1842716d80e12dd0d2b075435/gcc%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e64f5acfafe9a0e1842716d80e12dd0d2b075435/gcc%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfigure?ref=e64f5acfafe9a0e1842716d80e12dd0d2b075435", "patch": "@@ -12177,6 +12177,15 @@ if test \"${with_system_libunwind+set}\" = set; then\n \n fi;\n \n+# config.gcc also contains tests of with_system_libunwind.\n+if test x$with_system_libunwind = xyes; then\n+\n+cat >>confdefs.h <<\\_ACEOF\n+#define HAVE_GETIPINFO 1\n+_ACEOF\n+\n+fi\n+\n # --------------------------------------------------------\n # Build, host, and target specific configuration fragments\n # --------------------------------------------------------\n@@ -12529,6 +12538,150 @@ _ACEOF\n   fi\n fi\n \n+use_getipinfo=yes\n+if test x$with_system_libunwind = xyes; then\n+   if test x$host = x$target; then\n+     echo \"$as_me:$LINENO: checking for library containing _Unwind_GetIPInfo\" >&5\n+echo $ECHO_N \"checking for library containing _Unwind_GetIPInfo... $ECHO_C\" >&6\n+if test \"${ac_cv_search__Unwind_GetIPInfo+set}\" = set; then\n+  echo $ECHO_N \"(cached) $ECHO_C\" >&6\n+else\n+  ac_func_search_save_LIBS=$LIBS\n+ac_cv_search__Unwind_GetIPInfo=no\n+cat >conftest.$ac_ext <<_ACEOF\n+/* confdefs.h.  */\n+_ACEOF\n+cat confdefs.h >>conftest.$ac_ext\n+cat >>conftest.$ac_ext <<_ACEOF\n+/* end confdefs.h.  */\n+\n+/* Override any gcc2 internal prototype to avoid an error.  */\n+#ifdef __cplusplus\n+extern \"C\"\n+#endif\n+/* We use char because int might match the return type of a gcc2\n+   builtin and then its argument prototype would still apply.  */\n+char _Unwind_GetIPInfo ();\n+int\n+main ()\n+{\n+_Unwind_GetIPInfo ();\n+  ;\n+  return 0;\n+}\n+_ACEOF\n+rm -f conftest.$ac_objext conftest$ac_exeext\n+if { (eval echo \"$as_me:$LINENO: \\\"$ac_link\\\"\") >&5\n+  (eval $ac_link) 2>conftest.er1\n+  ac_status=$?\n+  grep -v '^ *+' conftest.er1 >conftest.err\n+  rm -f conftest.er1\n+  cat conftest.err >&5\n+  echo \"$as_me:$LINENO: \\$? = $ac_status\" >&5\n+  (exit $ac_status); } &&\n+\t { ac_try='test -z \"$ac_c_werror_flag\"\n+\t\t\t || test ! -s conftest.err'\n+  { (eval echo \"$as_me:$LINENO: \\\"$ac_try\\\"\") >&5\n+  (eval $ac_try) 2>&5\n+  ac_status=$?\n+  echo \"$as_me:$LINENO: \\$? = $ac_status\" >&5\n+  (exit $ac_status); }; } &&\n+\t { ac_try='test -s conftest$ac_exeext'\n+  { (eval echo \"$as_me:$LINENO: \\\"$ac_try\\\"\") >&5\n+  (eval $ac_try) 2>&5\n+  ac_status=$?\n+  echo \"$as_me:$LINENO: \\$? = $ac_status\" >&5\n+  (exit $ac_status); }; }; then\n+  ac_cv_search__Unwind_GetIPInfo=\"none required\"\n+else\n+  echo \"$as_me: failed program was:\" >&5\n+sed 's/^/| /' conftest.$ac_ext >&5\n+\n+fi\n+rm -f conftest.err conftest.$ac_objext \\\n+      conftest$ac_exeext conftest.$ac_ext\n+if test \"$ac_cv_search__Unwind_GetIPInfo\" = no; then\n+  for ac_lib in unwind; do\n+    LIBS=\"-l$ac_lib  $ac_func_search_save_LIBS\"\n+    cat >conftest.$ac_ext <<_ACEOF\n+/* confdefs.h.  */\n+_ACEOF\n+cat confdefs.h >>conftest.$ac_ext\n+cat >>conftest.$ac_ext <<_ACEOF\n+/* end confdefs.h.  */\n+\n+/* Override any gcc2 internal prototype to avoid an error.  */\n+#ifdef __cplusplus\n+extern \"C\"\n+#endif\n+/* We use char because int might match the return type of a gcc2\n+   builtin and then its argument prototype would still apply.  */\n+char _Unwind_GetIPInfo ();\n+int\n+main ()\n+{\n+_Unwind_GetIPInfo ();\n+  ;\n+  return 0;\n+}\n+_ACEOF\n+rm -f conftest.$ac_objext conftest$ac_exeext\n+if { (eval echo \"$as_me:$LINENO: \\\"$ac_link\\\"\") >&5\n+  (eval $ac_link) 2>conftest.er1\n+  ac_status=$?\n+  grep -v '^ *+' conftest.er1 >conftest.err\n+  rm -f conftest.er1\n+  cat conftest.err >&5\n+  echo \"$as_me:$LINENO: \\$? = $ac_status\" >&5\n+  (exit $ac_status); } &&\n+\t { ac_try='test -z \"$ac_c_werror_flag\"\n+\t\t\t || test ! -s conftest.err'\n+  { (eval echo \"$as_me:$LINENO: \\\"$ac_try\\\"\") >&5\n+  (eval $ac_try) 2>&5\n+  ac_status=$?\n+  echo \"$as_me:$LINENO: \\$? = $ac_status\" >&5\n+  (exit $ac_status); }; } &&\n+\t { ac_try='test -s conftest$ac_exeext'\n+  { (eval echo \"$as_me:$LINENO: \\\"$ac_try\\\"\") >&5\n+  (eval $ac_try) 2>&5\n+  ac_status=$?\n+  echo \"$as_me:$LINENO: \\$? = $ac_status\" >&5\n+  (exit $ac_status); }; }; then\n+  ac_cv_search__Unwind_GetIPInfo=\"-l$ac_lib\"\n+break\n+else\n+  echo \"$as_me: failed program was:\" >&5\n+sed 's/^/| /' conftest.$ac_ext >&5\n+\n+fi\n+rm -f conftest.err conftest.$ac_objext \\\n+      conftest$ac_exeext conftest.$ac_ext\n+  done\n+fi\n+LIBS=$ac_func_search_save_LIBS\n+fi\n+echo \"$as_me:$LINENO: result: $ac_cv_search__Unwind_GetIPInfo\" >&5\n+echo \"${ECHO_T}$ac_cv_search__Unwind_GetIPInfo\" >&6\n+if test \"$ac_cv_search__Unwind_GetIPInfo\" != no; then\n+  test \"$ac_cv_search__Unwind_GetIPInfo\" = \"none required\" || LIBS=\"$ac_cv_search__Unwind_GetIPInfo $LIBS\"\n+\n+else\n+  use_getipinfo=no\n+fi\n+\n+   fi\n+fi\n+\n+if test x$use_getipinfo = xyes; then\n+\n+cat >>confdefs.h <<\\_ACEOF\n+#define HAVE_GETIPINFO 1\n+_ACEOF\n+\n+else\n+   echo \"The system unwind library does not support _Unwind_GetIPInfo.\"\n+fi\n+\n # Look for a file containing extra machine modes.\n if test -n \"$extra_modes\" && test -f $srcdir/config/$extra_modes; then\n   extra_modes_file='$(srcdir)'/config/${extra_modes}"}, {"sha": "e502ef5f2611e045b8653510587a6d60241f291e", "filename": "gcc/configure.ac", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e64f5acfafe9a0e1842716d80e12dd0d2b075435/gcc%2Fconfigure.ac", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e64f5acfafe9a0e1842716d80e12dd0d2b075435/gcc%2Fconfigure.ac", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfigure.ac?ref=e64f5acfafe9a0e1842716d80e12dd0d2b075435", "patch": "@@ -1229,6 +1229,12 @@ AC_DEFINE_UNQUOTED(CONFIG_SJLJ_EXCEPTIONS, $sjlj,\n AC_ARG_WITH(system-libunwind,\n [  --with-system-libunwind use installed libunwind])\n \n+# config.gcc also contains tests of with_system_libunwind.\n+if test x$with_system_libunwind = xyes; then\n+        AC_DEFINE(HAVE_GETIPINFO, 1,\n+[Define to 1 if system unwind library has _Unwind_GetIPInfo.])\n+fi\n+\n # --------------------------------------------------------\n # Build, host, and target specific configuration fragments\n # --------------------------------------------------------\n@@ -1439,6 +1445,20 @@ if test x$enable___cxa_atexit = xyes || \\\n   fi\n fi\n \n+use_getipinfo=yes\n+if test x$with_system_libunwind = xyes; then\n+   if test x$host = x$target; then\n+     AC_SEARCH_LIBS(_Unwind_GetIPInfo, unwind,, [use_getipinfo=no])\n+   fi\n+fi\n+GCC_TARGET_TEMPLATE(HAVE_GETIPINFO)\n+if test x$use_getipinfo = xyes; then\n+   AC_DEFINE(HAVE_GETIPINFO, 1,\n+\t[Define to 1 if system unwind library has _Unwind_GetIPInfo.])\n+else\n+   echo \"The system unwind library does not support _Unwind_GetIPInfo.\"\n+fi\n+\n # Look for a file containing extra machine modes.\n if test -n \"$extra_modes\" && test -f $srcdir/config/$extra_modes; then\n   extra_modes_file='$(srcdir)'/config/${extra_modes}"}, {"sha": "c8f34acc0ee2edc3e76d9b3c58f2b6b8447327ea", "filename": "gcc/unwind-c.c", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e64f5acfafe9a0e1842716d80e12dd0d2b075435/gcc%2Funwind-c.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e64f5acfafe9a0e1842716d80e12dd0d2b075435/gcc%2Funwind-c.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Funwind-c.c?ref=e64f5acfafe9a0e1842716d80e12dd0d2b075435", "patch": "@@ -157,7 +157,11 @@ PERSONALITY_FUNCTION (int version,\n \n   /* Parse the LSDA header.  */\n   p = parse_lsda_header (context, language_specific_data, &info);\n+#ifdef HAVE_GETIPINFO\n   ip = _Unwind_GetIPInfo (context, &ip_before_insn);\n+#else\n+  ip = _Unwind_GetIP (context);\n+#endif\n   if (! ip_before_insn)\n     --ip;\n   landing_pad = 0;"}]}