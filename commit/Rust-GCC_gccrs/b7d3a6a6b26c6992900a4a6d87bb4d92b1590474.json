{"sha": "b7d3a6a6b26c6992900a4a6d87bb4d92b1590474", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjdkM2E2YTZiMjZjNjk5MjkwMGE0YTZkODdiYjRkOTJiMTU5MDQ3NA==", "commit": {"author": {"name": "Michael Meissner", "email": "meissner@linux.vnet.ibm.com", "date": "2017-01-18T19:30:38Z"}, "committer": {"name": "Michael Meissner", "email": "meissner@gcc.gnu.org", "date": "2017-01-18T19:30:38Z"}, "message": "rs6000-c.c (altivec_overloaded_builtins): Add __builtin_vec_revb builtins.\n\n[gcc]\n2017-01-18  Michael Meissner  <meissner@linux.vnet.ibm.com>\n\n\t* config/rs6000/rs6000-c.c (altivec_overloaded_builtins): Add\n\t__builtin_vec_revb builtins.\n\t* config/rs6000/rs6000-builtins.def (P9V_BUILTIN_XXBRQ_V16QI): Add\n\tbuilt-in functions to support generation of the ISA 3.0 XXBR<x>\n\tvector byte reverse instructions.\n\t(P9V_BUILTIN_XXBRQ_V1TI): Likewise.\n\t(P9V_BUILTIN_XXBRD_V2DI): Likewise.\n\t(P9V_BUILTIN_XXBRD_V2DF): Likewise.\n\t(P9V_BUILTIN_XXBGW_V4SI): Likewise.\n\t(P9V_BUILTIN_XXBGW_V4SF): Likewise.\n\t(P9V_BUILTIN_XXBGH_V8HI): Likewise.\n\t(P9V_BUILTIN_VEC_REVB): Likewise.\n\t* config/rs6000/vsx.md (p9_xxbrq_v1ti): New insns/expanders to\n\tgenerate the ISA 3.0 XXBR<x> vector byte reverse instructions.\n\t(p9_xxbrq_v16qi): Likewise.\n\t(p9_xxbrd_<mode>, VSX_D iterator): Likewise.\n\t(p9_xxbrw_<mode>, VSX_W iterator): Likewise.\n\t(p9_xxbrh_v8hi): Likewise.\n\t* config/rs6000/altivec.h (vec_revb): Define if ISA 3.0.\n\t* doc/extend.texi (RS/6000 Altivec Built-ins): Document the\n\tvec_revb built-in functions.\n\n[gcc/testsuite]\n2017-01-18  Michael Meissner  <meissner@linux.vnet.ibm.com>\n\n\t* gcc.target/powerpc/p9-xxbr-1.c: New test.\n\t* gcc.target/powerpc/p9-xxbr-2.c: Likewise.\n\nFrom-SVN: r244593", "tree": {"sha": "e8ae6a83c5e3e3261be4c189b435bf24d9dabf51", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e8ae6a83c5e3e3261be4c189b435bf24d9dabf51"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b7d3a6a6b26c6992900a4a6d87bb4d92b1590474", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b7d3a6a6b26c6992900a4a6d87bb4d92b1590474", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b7d3a6a6b26c6992900a4a6d87bb4d92b1590474", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b7d3a6a6b26c6992900a4a6d87bb4d92b1590474/comments", "author": null, "committer": null, "parents": [{"sha": "c484627cf619d93610d2c9dca6950c9e70a65cf3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c484627cf619d93610d2c9dca6950c9e70a65cf3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c484627cf619d93610d2c9dca6950c9e70a65cf3"}], "stats": {"total": 242, "additions": 242, "deletions": 0}, "files": [{"sha": "6e9bfb638d5910c2430e2a37492f62515e455ce0", "filename": "gcc/ChangeLog", "status": "modified", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b7d3a6a6b26c6992900a4a6d87bb4d92b1590474/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b7d3a6a6b26c6992900a4a6d87bb4d92b1590474/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=b7d3a6a6b26c6992900a4a6d87bb4d92b1590474", "patch": "@@ -1,3 +1,27 @@\n+2017-01-18  Michael Meissner  <meissner@linux.vnet.ibm.com>\n+\n+\t* config/rs6000/rs6000-c.c (altivec_overloaded_builtins): Add\n+\t__builtin_vec_revb builtins.\n+\t* config/rs6000/rs6000-builtins.def (P9V_BUILTIN_XXBRQ_V16QI): Add\n+\tbuilt-in functions to support generation of the ISA 3.0 XXBR<x>\n+\tvector byte reverse instructions.\n+\t(P9V_BUILTIN_XXBRQ_V1TI): Likewise.\n+\t(P9V_BUILTIN_XXBRD_V2DI): Likewise.\n+\t(P9V_BUILTIN_XXBRD_V2DF): Likewise.\n+\t(P9V_BUILTIN_XXBGW_V4SI): Likewise.\n+\t(P9V_BUILTIN_XXBGW_V4SF): Likewise.\n+\t(P9V_BUILTIN_XXBGH_V8HI): Likewise.\n+\t(P9V_BUILTIN_VEC_REVB): Likewise.\n+\t* config/rs6000/vsx.md (p9_xxbrq_v1ti): New insns/expanders to\n+\tgenerate the ISA 3.0 XXBR<x> vector byte reverse instructions.\n+\t(p9_xxbrq_v16qi): Likewise.\n+\t(p9_xxbrd_<mode>, VSX_D iterator): Likewise.\n+\t(p9_xxbrw_<mode>, VSX_W iterator): Likewise.\n+\t(p9_xxbrh_v8hi): Likewise.\n+\t* config/rs6000/altivec.h (vec_revb): Define if ISA 3.0.\n+\t* doc/extend.texi (RS/6000 Altivec Built-ins): Document the\n+\tvec_revb built-in functions.\n+\n 2017-01-18  Uros Bizjak  <ubizjak@gmail.com>\n \n \tPR rtl-optimization/78952"}, {"sha": "ac647570d6243f096b7544a517ebae98099782c8", "filename": "gcc/config/rs6000/altivec.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b7d3a6a6b26c6992900a4a6d87bb4d92b1590474/gcc%2Fconfig%2Frs6000%2Faltivec.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b7d3a6a6b26c6992900a4a6d87bb4d92b1590474/gcc%2Fconfig%2Frs6000%2Faltivec.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Faltivec.h?ref=b7d3a6a6b26c6992900a4a6d87bb4d92b1590474", "patch": "@@ -444,6 +444,8 @@\n \n #define vec_xlx __builtin_vec_vextulx\n #define vec_xrx __builtin_vec_vexturx\n+\n+#define vec_revb __builtin_vec_revb\n #endif\n \n /* Predicates."}, {"sha": "d17aeae754c4dc2d1f3247edc13bcfda8b20238a", "filename": "gcc/config/rs6000/rs6000-builtin.def", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b7d3a6a6b26c6992900a4a6d87bb4d92b1590474/gcc%2Fconfig%2Frs6000%2Frs6000-builtin.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b7d3a6a6b26c6992900a4a6d87bb4d92b1590474/gcc%2Fconfig%2Frs6000%2Frs6000-builtin.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000-builtin.def?ref=b7d3a6a6b26c6992900a4a6d87bb4d92b1590474", "patch": "@@ -1954,6 +1954,14 @@ BU_P9V_64BIT_VSX_1 (VSESDP,\t\"scalar_extract_sig\",\tCONST,\txsxsigdp)\n BU_P9V_VSX_1 (VSTDCNDP,\t\"scalar_test_neg_dp\",\tCONST,\txststdcnegdp)\n BU_P9V_VSX_1 (VSTDCNSP,\t\"scalar_test_neg_sp\",\tCONST,\txststdcnegsp)\n \n+BU_P9V_VSX_1 (XXBRQ_V16QI,\t\"xxbrq_v16qi\",\tCONST,\tp9_xxbrq_v16qi)\n+BU_P9V_VSX_1 (XXBRQ_V1TI,\t\"xxbrq_v1ti\",\tCONST,\tp9_xxbrq_v1ti)\n+BU_P9V_VSX_1 (XXBRD_V2DI,\t\"xxbrd_v2di\",\tCONST,\tp9_xxbrd_v2di)\n+BU_P9V_VSX_1 (XXBRD_V2DF,\t\"xxbrd_v2df\",\tCONST,\tp9_xxbrd_v2df)\n+BU_P9V_VSX_1 (XXBRW_V4SI,\t\"xxbrw_v4si\",\tCONST,\tp9_xxbrw_v4si)\n+BU_P9V_VSX_1 (XXBRW_V4SF,\t\"xxbrw_v4sf\",\tCONST,\tp9_xxbrw_v4sf)\n+BU_P9V_VSX_1 (XXBRH_V8HI,\t\"xxbrh_v8hi\",\tCONST,\tp9_xxbrh_v8hi)\n+\n /* 2 argument vsx scalar functions added in ISA 3.0 (power9).  */\n BU_P9V_64BIT_VSX_2 (VSIEDP,\t\"scalar_insert_exp\",\tCONST,\txsiexpdp)\n \n@@ -1973,6 +1981,8 @@ BU_P9V_OVERLOAD_1 (VSTDCN,\t\"scalar_test_neg\")\n BU_P9V_OVERLOAD_1 (VSTDCNDP,\t\"scalar_test_neg_dp\")\n BU_P9V_OVERLOAD_1 (VSTDCNSP,\t\"scalar_test_neg_sp\")\n \n+BU_P9V_OVERLOAD_1 (REVB,\t\"revb\")\n+\n /* ISA 3.0 vector scalar overloaded 2 argument functions.  */\n BU_P9V_OVERLOAD_2 (VSIEDP,\t\"scalar_insert_exp\")\n "}, {"sha": "8b87a0a441ae84dedeb6863fea3a541680671369", "filename": "gcc/config/rs6000/rs6000-c.c", "status": "modified", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b7d3a6a6b26c6992900a4a6d87bb4d92b1590474/gcc%2Fconfig%2Frs6000%2Frs6000-c.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b7d3a6a6b26c6992900a4a6d87bb4d92b1590474/gcc%2Fconfig%2Frs6000%2Frs6000-c.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000-c.c?ref=b7d3a6a6b26c6992900a4a6d87bb4d92b1590474", "patch": "@@ -5050,6 +5050,31 @@ const struct altivec_builtin_types altivec_overloaded_builtins[] = {\n     RS6000_BTI_unsigned_V16QI, RS6000_BTI_unsigned_V16QI,\n     RS6000_BTI_unsigned_V16QI, 0 },\n \n+  { P9V_BUILTIN_VEC_REVB, P9V_BUILTIN_XXBRQ_V16QI,\n+    RS6000_BTI_unsigned_V16QI, RS6000_BTI_unsigned_V16QI, 0, 0 },\n+  { P9V_BUILTIN_VEC_REVB, P9V_BUILTIN_XXBRQ_V16QI,\n+    RS6000_BTI_V16QI, RS6000_BTI_V16QI, 0, 0 },\n+  { P9V_BUILTIN_VEC_REVB, P9V_BUILTIN_XXBRQ_V1TI,\n+    RS6000_BTI_unsigned_V1TI, RS6000_BTI_unsigned_V1TI, 0, 0 },\n+  { P9V_BUILTIN_VEC_REVB, P9V_BUILTIN_XXBRQ_V1TI,\n+    RS6000_BTI_V1TI, RS6000_BTI_V1TI, 0, 0 },\n+  { P9V_BUILTIN_VEC_REVB, P9V_BUILTIN_XXBRD_V2DI,\n+    RS6000_BTI_unsigned_V2DI, RS6000_BTI_unsigned_V2DI, 0, 0 },\n+  { P9V_BUILTIN_VEC_REVB, P9V_BUILTIN_XXBRD_V2DI,\n+    RS6000_BTI_V2DI, RS6000_BTI_V2DI, 0, 0 },\n+  { P9V_BUILTIN_VEC_REVB, P9V_BUILTIN_XXBRD_V2DF,\n+    RS6000_BTI_V2DF, RS6000_BTI_V2DF, 0, 0 },\n+  { P9V_BUILTIN_VEC_REVB, P9V_BUILTIN_XXBRW_V4SI,\n+    RS6000_BTI_unsigned_V4SI, RS6000_BTI_unsigned_V4SI, 0, 0 },\n+  { P9V_BUILTIN_VEC_REVB, P9V_BUILTIN_XXBRW_V4SI,\n+    RS6000_BTI_V4SI, RS6000_BTI_V4SI, 0, 0 },\n+  { P9V_BUILTIN_VEC_REVB, P9V_BUILTIN_XXBRW_V4SF,\n+    RS6000_BTI_V4SF, RS6000_BTI_V4SF, 0, 0 },\n+  { P9V_BUILTIN_VEC_REVB, P9V_BUILTIN_XXBRH_V8HI,\n+    RS6000_BTI_unsigned_V8HI, RS6000_BTI_unsigned_V8HI, 0, 0 },\n+  { P9V_BUILTIN_VEC_REVB, P9V_BUILTIN_XXBRH_V8HI,\n+    RS6000_BTI_V8HI, RS6000_BTI_V8HI, 0, 0 },\n+\n   /* Crypto builtins.  */\n   { CRYPTO_BUILTIN_VPERMXOR, CRYPTO_BUILTIN_VPERMXOR_V16QI,\n     RS6000_BTI_unsigned_V16QI, RS6000_BTI_unsigned_V16QI,"}, {"sha": "52686881700b383ee30364008727c654ee18f511", "filename": "gcc/config/rs6000/vsx.md", "status": "modified", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b7d3a6a6b26c6992900a4a6d87bb4d92b1590474/gcc%2Fconfig%2Frs6000%2Fvsx.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b7d3a6a6b26c6992900a4a6d87bb4d92b1590474/gcc%2Fconfig%2Frs6000%2Fvsx.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Fvsx.md?ref=b7d3a6a6b26c6992900a4a6d87bb4d92b1590474", "patch": "@@ -3899,6 +3899,51 @@\n   [(set_attr \"type\" \"vecperm\")])\n \n \f\n+;; Support for ISA 3.0 vector byte reverse\n+\n+;; Swap all bytes with in a vector\n+(define_insn \"p9_xxbrq_v1ti\"\n+  [(set (match_operand:V1TI 0 \"vsx_register_operand\" \"=wa\")\n+\t(bswap:V1TI (match_operand:V1TI 1 \"vsx_register_operand\" \"wa\")))]\n+  \"TARGET_P9_VECTOR\"\n+  \"xxbrq %x0,%x1\"\n+  [(set_attr \"type\" \"vecperm\")])\n+\n+(define_expand \"p9_xxbrq_v16qi\"\n+  [(use (match_operand:V16QI 0 \"vsx_register_operand\" \"=wa\"))\n+   (use (match_operand:V16QI 1 \"vsx_register_operand\" \"=wa\"))]\n+  \"TARGET_P9_VECTOR\"\n+{\n+  rtx op0 = gen_lowpart (V1TImode, operands[0]);\n+  rtx op1 = gen_lowpart (V1TImode, operands[1]);\n+  emit_insn (gen_p9_xxbrq_v1ti (op0, op1));\n+  DONE;\n+})\n+\n+;; Swap all bytes in each 64-bit element\n+(define_insn \"p9_xxbrd_<mode>\"\n+  [(set (match_operand:VSX_D 0 \"vsx_register_operand\" \"=wa\")\n+\t(bswap:VSX_D (match_operand:VSX_D 1 \"vsx_register_operand\" \"wa\")))]\n+  \"TARGET_P9_VECTOR\"\n+  \"xxbrd %x0,%x1\"\n+  [(set_attr \"type\" \"vecperm\")])\n+\n+;; Swap all bytes in each 32-bit element\n+(define_insn \"p9_xxbrw_<mode>\"\n+  [(set (match_operand:VSX_W 0 \"vsx_register_operand\" \"=wa\")\n+\t(bswap:VSX_W (match_operand:VSX_W 1 \"vsx_register_operand\" \"wa\")))]\n+  \"TARGET_P9_VECTOR\"\n+  \"xxbrw %x0,%x1\"\n+  [(set_attr \"type\" \"vecperm\")])\n+\n+;; Swap all bytes in each 16-bit element\n+(define_insn \"p9_xxbrh_v8hi\"\n+  [(set (match_operand:V8HI 0 \"vsx_register_operand\" \"=wa\")\n+\t(bswap:V8HI (match_operand:V8HI 1 \"vsx_register_operand\" \"wa\")))]\n+  \"TARGET_P9_VECTOR\"\n+  \"xxbrh %x0,%x1\"\n+  [(set_attr \"type\" \"vecperm\")])\n+\f\n \n ;; Operand numbers for the following peephole2\n (define_constants"}, {"sha": "67846ef8deba0b75d667f96b57a1db9b9ed9e0d4", "filename": "gcc/doc/extend.texi", "status": "modified", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b7d3a6a6b26c6992900a4a6d87bb4d92b1590474/gcc%2Fdoc%2Fextend.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b7d3a6a6b26c6992900a4a6d87bb4d92b1590474/gcc%2Fdoc%2Fextend.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fextend.texi?ref=b7d3a6a6b26c6992900a4a6d87bb4d92b1590474", "patch": "@@ -18231,6 +18231,34 @@ second argument vector contains the mask  beginning in bits 11:15,\n the mask end in bits 19:23, and the shift count in bits 27:31,\n of each element.\n \n+If the ISA 3.0 instruction set additions (@option{-mcpu=power9})\n+are available:\n+@smallexample\n+vector signed char vec_revb (vector signed char);\n+vector unsigned char vec_revb (vector unsigned char);\n+vector short vec_revb (vector short);\n+vector unsigned short vec_revb (vector unsigned short);\n+vector int vec_revb (vector int);\n+vector unsigned int vec_revb (vector unsigned int);\n+vector float vec_revb (vector float);\n+vector long long vec_revb (vector long long);\n+vector unsigned long long vec_revb (vector unsigned long long);\n+vector double vec_revb (vector double);\n+@end smallexample\n+\n+On 64-bit targets, if the ISA 3.0 additions (@option{-mcpu=power9})\n+are available:\n+@smallexample\n+vector long vec_revb (vector long);\n+vector unsigned long vec_revb (vector unsigned long);\n+vector __int128_t vec_revb (vector __int128_t);\n+vector __uint128_t vec_revb (vector __uint128_t);\n+@end smallexample\n+\n+The @code{vec_revb} built-in function reverses the bytes on an element\n+by element basis.  A vector of @code{vector unsigned char} or\n+@code{vector signed char} reverses the bytes in the whole word.\n+\n If the cryptographic instructions are enabled (@option{-mcrypto} or\n @option{-mcpu=power8}), the following builtins are enabled.\n "}, {"sha": "1f57d5e7ab36b2a2981c004f59bb7921f501b0ae", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b7d3a6a6b26c6992900a4a6d87bb4d92b1590474/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b7d3a6a6b26c6992900a4a6d87bb4d92b1590474/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=b7d3a6a6b26c6992900a4a6d87bb4d92b1590474", "patch": "@@ -1,3 +1,8 @@\n+2017-01-18  Michael Meissner  <meissner@linux.vnet.ibm.com>\n+\n+\t* gcc.target/powerpc/p9-xxbr-1.c: New test.\n+\t* gcc.target/powerpc/p9-xxbr-2.c: Likewise.\n+\n 2017-01-18  Nathan Sidwell  <nathan@acm.org>\n \n \tPR c++/78488"}, {"sha": "ddd5f6fb40e8901099e68dfde19d953c92b34815", "filename": "gcc/testsuite/gcc.target/powerpc/p9-xxbr-1.c", "status": "added", "additions": 67, "deletions": 0, "changes": 67, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b7d3a6a6b26c6992900a4a6d87bb4d92b1590474/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fp9-xxbr-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b7d3a6a6b26c6992900a4a6d87bb4d92b1590474/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fp9-xxbr-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fp9-xxbr-1.c?ref=b7d3a6a6b26c6992900a4a6d87bb4d92b1590474", "patch": "@@ -0,0 +1,67 @@\n+/* { dg-do compile { target { powerpc64le-*-* } } } */\n+/* { dg-skip-if \"do not override -mcpu\" { powerpc*-*-* } { \"-mcpu=*\" } { \"-mcpu=power9\" } } */\n+/* { dg-require-effective-target powerpc_p9vector_ok } */\n+/* { dg-options \"-mcpu=power9 -O3\" } */\n+\n+#include <altivec.h>\n+\n+/* Verify P9 vec_revb builtin generates the XXBR{Q,D,W,H} instructions.  */\n+\n+vector char\n+rev_char (vector char a)\n+{\n+  return vec_revb (a);\t\t/* XXBRQ.  */\n+}\n+\n+vector signed char\n+rev_schar (vector signed char a)\n+{\n+  return vec_revb (a);\t\t/* XXBRQ.  */\n+}\n+\n+vector unsigned char\n+rev_uchar (vector unsigned char a)\n+{\n+  return vec_revb (a);\t\t/* XXBRQ.  */\n+}\n+\n+vector short\n+rev_short (vector short a)\n+{\n+  return vec_revb (a);\t\t/* XXBRH.  */\n+}\n+\n+vector unsigned short\n+rev_ushort (vector unsigned short a)\n+{\n+  return vec_revb (a);\t\t/* XXBRH.  */\n+}\n+\n+vector int\n+rev_int (vector int a)\n+{\n+  return vec_revb (a);\t\t/* XXBRW.  */\n+}\n+\n+vector unsigned int\n+rev_uint (vector unsigned int a)\n+{\n+  return vec_revb (a);\t\t/* XXBRW.  */\n+}\n+\n+vector float\n+rev_float (vector float a)\n+{\n+  return vec_revb (a);\t\t/* XXBRW.  */\n+}\n+\n+vector double\n+rev_double (vector double a)\n+{\n+  return vec_revb (a);\t\t/* XXBRD.  */\n+}\n+\n+/* { dg-final { scan-assembler-count \"xxbrd\" 1 } } */\n+/* { dg-final { scan-assembler-count \"xxbrh\" 2 } } */\n+/* { dg-final { scan-assembler-count \"xxbrq\" 3 } } */\n+/* { dg-final { scan-assembler-count \"xxbrw\" 3 } } */"}, {"sha": "563bb7152d1b8b29961e55aba45c434a61143671", "filename": "gcc/testsuite/gcc.target/powerpc/p9-xxbr-2.c", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b7d3a6a6b26c6992900a4a6d87bb4d92b1590474/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fp9-xxbr-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b7d3a6a6b26c6992900a4a6d87bb4d92b1590474/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fp9-xxbr-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fp9-xxbr-2.c?ref=b7d3a6a6b26c6992900a4a6d87bb4d92b1590474", "patch": "@@ -0,0 +1,36 @@\n+/* { dg-do compile { target { powerpc64le-*-* && lp64 } } } */\n+/* { dg-skip-if \"do not override -mcpu\" { powerpc*-*-* } { \"-mcpu=*\" } { \"-mcpu=power9\" } } */\n+/* { dg-require-effective-target powerpc_p9vector_ok } */\n+/* { dg-options \"-mcpu=power9 -O3\" } */\n+\n+#include <altivec.h>\n+\n+/* Verify P9 vec_revb builtin generates the XXBR{Q,D,W,H} instructions.  This\n+   test only tests the vector types that need a 64-bit environment.  */\n+\n+vector long\n+rev_long (vector long a)\n+{\n+  return vec_revb (a);\t\t/* XXBRD.  */\n+}\n+\n+vector unsigned long\n+rev_ulong (vector unsigned long a)\n+{\n+  return vec_revb (a);\t\t/* XXBRD.  */\n+}\n+\n+vector __int128_t\n+rev_int128 (vector __int128_t a)\n+{\n+  return vec_revb (a);\t\t/* XXBRQ.  */\n+}\n+\n+vector __uint128_t\n+rev_uint128 (vector __uint128_t a)\n+{\n+  return vec_revb (a);\t\t/* XXBRQ.  */\n+}\n+\n+/* { dg-final { scan-assembler-count \"xxbrd\" 2 } } */\n+/* { dg-final { scan-assembler-count \"xxbrq\" 2 } } */"}]}