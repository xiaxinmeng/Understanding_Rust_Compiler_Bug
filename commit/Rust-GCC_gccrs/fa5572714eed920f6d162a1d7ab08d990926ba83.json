{"sha": "fa5572714eed920f6d162a1d7ab08d990926ba83", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmE1NTcyNzE0ZWVkOTIwZjZkMTYyYTFkN2FiMDhkOTkwOTI2YmE4Mw==", "commit": {"author": {"name": "Zack Weinberg", "email": "zack@wolery.cumb.org", "date": "2000-05-10T19:11:02Z"}, "committer": {"name": "Zack Weinberg", "email": "zack@gcc.gnu.org", "date": "2000-05-10T19:11:02Z"}, "message": "cpphash.h (struct hashnode): Use struct hack for name member.\n\n\t* cpphash.h (struct hashnode): Use struct hack for name\n\tmember.\n\t* cpphash.c (struct hashdummy): New.\n\t(eq_HASHNODE): Second argument is a hashdummy, not a HASHNODE.\n\t(make_HASHNODE): No need to set ->name pointer.  Correct\n\tsetting of p.\n\t(cpp_lookup): Make 'dummy' a struct hashdummy.  Tidy up a bit.\n\nFrom-SVN: r33828", "tree": {"sha": "177ec0e71fe21a5993376d22f9d842960833b246", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/177ec0e71fe21a5993376d22f9d842960833b246"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/fa5572714eed920f6d162a1d7ab08d990926ba83", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fa5572714eed920f6d162a1d7ab08d990926ba83", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fa5572714eed920f6d162a1d7ab08d990926ba83", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fa5572714eed920f6d162a1d7ab08d990926ba83/comments", "author": null, "committer": null, "parents": [{"sha": "e54930f9a3cdfc6347ec4887bad203539501f846", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e54930f9a3cdfc6347ec4887bad203539501f846", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e54930f9a3cdfc6347ec4887bad203539501f846"}], "stats": {"total": 44, "additions": 32, "deletions": 12}, "files": [{"sha": "46a89c220620aa56c64cf28cade3f3a5fc758576", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fa5572714eed920f6d162a1d7ab08d990926ba83/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fa5572714eed920f6d162a1d7ab08d990926ba83/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=fa5572714eed920f6d162a1d7ab08d990926ba83", "patch": "@@ -1,3 +1,13 @@\n+2000-05-10  Zack Weinberg  <zack@wolery.cumb.org>\n+\n+\t* cpphash.h (struct hashnode): Use struct hack for name\n+\tmember.\n+\t* cpphash.c (struct hashdummy): New.\n+\t(eq_HASHNODE): Second argument is a hashdummy, not a HASHNODE.\n+\t(make_HASHNODE): No need to set ->name pointer.  Correct\n+\tsetting of p.\n+\t(cpp_lookup): Make 'dummy' a struct hashdummy.  Tidy up a bit.\n+\n 2000-05-10  Richard Henderson  <rth@cygnus.com>\n \n \t* flow.c (find_basic_blocks_1): Remove any spare bb_note"}, {"sha": "81e9368dc31dc64618d03dc726b257c35bb4b875", "filename": "gcc/cpphash.c", "status": "modified", "additions": 21, "deletions": 11, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fa5572714eed920f6d162a1d7ab08d990926ba83/gcc%2Fcpphash.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fa5572714eed920f6d162a1d7ab08d990926ba83/gcc%2Fcpphash.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcpphash.c?ref=fa5572714eed920f6d162a1d7ab08d990926ba83", "patch": "@@ -100,6 +100,13 @@ struct funct_defn\n   int col;\n };\n \n+/* This is the second argument to eq_HASHNODE.  */\n+struct hashdummy\n+{\n+  const U_CHAR *name;\n+  unsigned short length;\n+};\n+\n static unsigned int hash_HASHNODE PARAMS ((const void *));\n static int eq_HASHNODE\t\t  PARAMS ((const void *, const void *));\n static void del_HASHNODE\t  PARAMS ((void *));\n@@ -147,7 +154,6 @@ struct arglist\n   int argc;\n };\n \n-\n static struct object_defn *\n collect_objlike_expansion PARAMS ((cpp_reader *, cpp_toklist *));\n static struct funct_defn *\n@@ -215,14 +221,19 @@ hash_HASHNODE (x)\n   return h->hash;\n }\n \n-/* Compare two HASHNODE structures.  */\n+/* Compare a HASHNODE structure (already in the table) with a\n+   hashdummy structure (not yet in the table).  This relies on the\n+   rule that the existing entry is the first argument, the potential\n+   entry the second.  It also relies on the comparison function never\n+   being called except as a direct consequence of a call to\n+   htab_find(_slot)_with_hash.  */\n static int\n eq_HASHNODE (x, y)\n      const void *x;\n      const void *y;\n {\n   const HASHNODE *a = (const HASHNODE *)x;\n-  const HASHNODE *b = (const HASHNODE *)y;\n+  const struct hashdummy *b = (const struct hashdummy *)y;\n \n   return (a->length == b->length\n \t  && !ustrncmp (a->name, b->name, a->length));\n@@ -249,12 +260,11 @@ make_HASHNODE (name, len, type, hash)\n      enum node_type type;\n      unsigned int hash;\n {\n-  HASHNODE *hp = (HASHNODE *) xmalloc (sizeof (HASHNODE) + len + 1);\n-  U_CHAR *p = (U_CHAR *)hp + sizeof (HASHNODE);\n+  HASHNODE *hp = (HASHNODE *) xmalloc (sizeof (HASHNODE) + len);\n+  U_CHAR *p = (U_CHAR *)hp + offsetof (HASHNODE, name);\n \n   hp->type = type;\n   hp->length = len;\n-  hp->name = p;\n   hp->hash = hash;\n   hp->disabled = 0;\n \n@@ -272,20 +282,20 @@ _cpp_lookup (pfile, name, len)\n      const U_CHAR *name;\n      int len;\n {\n-  HASHNODE dummy;\n+  struct hashdummy dummy;\n   HASHNODE *new, **slot;\n+  unsigned int hash;\n \n   dummy.name = name;\n   dummy.length = len;\n-  dummy.hash = _cpp_calc_hash (name, len);\n+  hash = _cpp_calc_hash (name, len);\n \n   slot = (HASHNODE **)\n-    htab_find_slot_with_hash (pfile->hashtab, (void *)&dummy,\n-\t\t\t      dummy.hash, INSERT);\n+    htab_find_slot_with_hash (pfile->hashtab, (void *)&dummy, hash, INSERT);\n   if (*slot)\n     return *slot;\n \n-  new = make_HASHNODE (name, len, T_VOID, dummy.hash);\n+  new = make_HASHNODE (name, len, T_VOID, hash);\n   new->value.cpval = NULL;\n   *slot = new;\n   return new;"}, {"sha": "4b8c50ec7c04ef0fa9448d27c56f376bb9f614c3", "filename": "gcc/cpphash.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fa5572714eed920f6d162a1d7ab08d990926ba83/gcc%2Fcpphash.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fa5572714eed920f6d162a1d7ab08d990926ba83/gcc%2Fcpphash.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcpphash.h?ref=fa5572714eed920f6d162a1d7ab08d990926ba83", "patch": "@@ -67,7 +67,7 @@ struct hashnode\n     struct hashnode *aschain;\t\t/* #assert */\n   } value;\n \n-  const U_CHAR *name;\n+  const U_CHAR name[1];\t\t\t/* name[length] */\n };\n \n /* List of directories to look for include files in. */"}]}