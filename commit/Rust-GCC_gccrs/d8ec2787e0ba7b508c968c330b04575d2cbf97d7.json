{"sha": "d8ec2787e0ba7b508c968c330b04575d2cbf97d7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDhlYzI3ODdlMGJhN2I1MDhjOTY4YzMzMGIwNDU3NWQyY2JmOTdkNw==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2019-09-19T08:13:38Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "pmderodat@gcc.gnu.org", "date": "2019-09-19T08:13:38Z"}, "message": "[Ada] Implement Machine_Rounding attribute in line when possible\n\nGNAT implements Machine_Rounding as an alias for Rounding but, whereas\nthe implementation of the latter is in line when possible, that of the\nformer is always out of line, which is not aligned with the intent of\nthe Ada RM.\n\nThis changes the compiler to using for Machine_Rounding the same in line\nimplementation as Rounding when possible.\n\nRunning these commands:\n\n  gcc -c f.adb -gnatD\n  grep system f.adb.dg\n\nOn the following sources:\n\nfunction F (Val : Float) return Integer is\nbegin\n  return Integer (Float'Machine_Rounding (Val));\nend;\n\nShould execute silently.\n\n2019-09-19  Eric Botcazou  <ebotcazou@adacore.com>\n\ngcc/ada/\n\n\t* exp_attr.adb (Is_Inline_Floating_Point_Attribute): Treat\n\tMachine_Rounding as an alias for Rounding.\n\t* sem_res.adb (Simplify_Type_Conversion): Likewise.\n\nFrom-SVN: r275943", "tree": {"sha": "c3c07f4f98ae46537abb0ec4383ef8b1d9b17fef", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c3c07f4f98ae46537abb0ec4383ef8b1d9b17fef"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d8ec2787e0ba7b508c968c330b04575d2cbf97d7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d8ec2787e0ba7b508c968c330b04575d2cbf97d7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d8ec2787e0ba7b508c968c330b04575d2cbf97d7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d8ec2787e0ba7b508c968c330b04575d2cbf97d7/comments", "author": null, "committer": null, "parents": [{"sha": "143df1f9aa4e829907d4e300a0006783fcbba71b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/143df1f9aa4e829907d4e300a0006783fcbba71b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/143df1f9aa4e829907d4e300a0006783fcbba71b"}], "stats": {"total": 22, "additions": 15, "deletions": 7}, "files": [{"sha": "289213e914a8a4d38451a0067e0dea2f355b9ed8", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d8ec2787e0ba7b508c968c330b04575d2cbf97d7/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d8ec2787e0ba7b508c968c330b04575d2cbf97d7/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=d8ec2787e0ba7b508c968c330b04575d2cbf97d7", "patch": "@@ -1,3 +1,9 @@\n+2019-09-19  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* exp_attr.adb (Is_Inline_Floating_Point_Attribute): Treat\n+\tMachine_Rounding as an alias for Rounding.\n+\t* sem_res.adb (Simplify_Type_Conversion): Likewise.\n+\n 2019-09-19  Gary Dismukes  <dismukes@adacore.com>\n \n \t* exp_unst.adb (Unnest_Subprogram): Bypass the transformation of"}, {"sha": "817e7ef4cabba239d14e1c2ac97b0d1bf6142c6f", "filename": "gcc/ada/exp_attr.adb", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d8ec2787e0ba7b508c968c330b04575d2cbf97d7/gcc%2Fada%2Fexp_attr.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d8ec2787e0ba7b508c968c330b04575d2cbf97d7/gcc%2Fada%2Fexp_attr.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_attr.adb?ref=d8ec2787e0ba7b508c968c330b04575d2cbf97d7", "patch": "@@ -8360,13 +8360,13 @@ package body Exp_Attr is\n          return False;\n       end if;\n \n-      --  Here we are in the integer conversion context\n+      --  Here we are in the integer conversion context. We reuse Rounding for\n+      --  Machine_Rounding as System.Fat_Gen, which is a permissible behavior.\n \n-      --  Very probably we should also recognize the cases of Machine_Rounding\n-      --  and unbiased rounding in this conversion context, but the back end is\n-      --  not yet prepared to handle these cases ???\n-\n-      return Id = Attribute_Rounding or else Id = Attribute_Truncation;\n+      return\n+        Id = Attribute_Rounding\n+          or else Id = Attribute_Machine_Rounding\n+          or else Id = Attribute_Truncation;\n    end Is_Inline_Floating_Point_Attribute;\n \n end Exp_Attr;"}, {"sha": "28d1352afb3f06398c67f9cd9351f34b712b0691", "filename": "gcc/ada/sem_res.adb", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d8ec2787e0ba7b508c968c330b04575d2cbf97d7/gcc%2Fada%2Fsem_res.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d8ec2787e0ba7b508c968c330b04575d2cbf97d7/gcc%2Fada%2Fsem_res.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_res.adb?ref=d8ec2787e0ba7b508c968c330b04575d2cbf97d7", "patch": "@@ -12439,7 +12439,8 @@ package body Sem_Res is\n             --     ityp (x)\n \n             --  with the Float_Truncate flag set to False or True respectively,\n-            --  which is more efficient.\n+            --  which is more efficient. We reuse Rounding for Machine_Rounding\n+            --  as System.Fat_Gen, which is a permissible behavior.\n \n             if Is_Floating_Point_Type (Opnd_Typ)\n               and then\n@@ -12448,6 +12449,7 @@ package body Sem_Res is\n                             and then Conversion_OK (N)))\n               and then Nkind (Operand) = N_Attribute_Reference\n               and then Nam_In (Attribute_Name (Operand), Name_Rounding,\n+                                                         Name_Machine_Rounding,\n                                                          Name_Truncation)\n             then\n                declare"}]}