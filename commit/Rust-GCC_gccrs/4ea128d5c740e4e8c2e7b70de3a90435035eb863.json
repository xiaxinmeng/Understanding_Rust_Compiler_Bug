{"sha": "4ea128d5c740e4e8c2e7b70de3a90435035eb863", "node_id": "C_kwDOANBUbNoAKDRlYTEyOGQ1Yzc0MGU0ZThjMmU3YjcwZGUzYTkwNDM1MDM1ZWI4NjM", "commit": {"author": {"name": "Joseph Myers", "email": "joseph@codesourcery.com", "date": "2022-03-09T22:51:23Z"}, "committer": {"name": "Joseph Myers", "email": "joseph@codesourcery.com", "date": "2022-03-09T22:51:23Z"}, "message": "c: Revert C2x changes to function type compatibility\n\nIn commit cc806126215c3f4dc187eff3bf923458d8cc6b4f, I implemented\nchanges that C2x had made to compatibility of unprototyped and\nprototyped function types.\n\nC2x has since completely removed unprototyped function types, making\n() in a function declaration mean (void) as in C++.  While that change\nisn't appropriate at the current development stage for GCC 12, it does\nmean that it doesn't make sense for GCC 12 to have different rules for\nunprototyped functions in C2x mode than in other modes or previous and\nsubsequent GCC versions.  Thus, revert the previous change to avoid it\ngetting into a GCC release, and update the corresponding tests to\nexpect the same behavior with -std=c2x as with -std=c11 (they will of\ncourse need to change again after implementing () as meaning (void)).\n\nBootstrapped with no regressions for x86_64-pc-linux-gnu.\n\ngcc/c/\n\t* c-typeck.cc (function_types_compatible_p): Do not handle C2X\n\tdifferently from earlier standards for unprototyped function type\n\tcompatibility.\n\ngcc/testsuite/\n\t* gcc.dg/c11-unproto-1.c, gcc.dg/c11-unproto-2.c: Update comments.\n\t* gcc.dg/c2x-unproto-1.c, gcc.dg/c2x-unproto-2.c: Expect same\n\tresults as in C11 mode.  Update comments.", "tree": {"sha": "5356ddd0d816b830310838a30c3ec5d359d93899", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5356ddd0d816b830310838a30c3ec5d359d93899"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4ea128d5c740e4e8c2e7b70de3a90435035eb863", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4ea128d5c740e4e8c2e7b70de3a90435035eb863", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4ea128d5c740e4e8c2e7b70de3a90435035eb863", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4ea128d5c740e4e8c2e7b70de3a90435035eb863/comments", "author": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "22015e77d3e45306077396b9de8a8a28bb67fb20", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/22015e77d3e45306077396b9de8a8a28bb67fb20", "html_url": "https://github.com/Rust-GCC/gccrs/commit/22015e77d3e45306077396b9de8a8a28bb67fb20"}], "stats": {"total": 54, "additions": 31, "deletions": 23}, "files": [{"sha": "54b0b0d369bdeec54f56835c9ea860c495957d54", "filename": "gcc/c/c-typeck.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4ea128d5c740e4e8c2e7b70de3a90435035eb863/gcc%2Fc%2Fc-typeck.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4ea128d5c740e4e8c2e7b70de3a90435035eb863/gcc%2Fc%2Fc-typeck.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2Fc-typeck.cc?ref=4ea128d5c740e4e8c2e7b70de3a90435035eb863", "patch": "@@ -1693,7 +1693,7 @@ function_types_compatible_p (const_tree f1, const_tree f2,\n \n   if (args1 == NULL_TREE)\n     {\n-      if (flag_isoc2x ? stdarg_p (f2) : !self_promoting_args_p (args2))\n+      if (!self_promoting_args_p (args2))\n \treturn 0;\n       /* If one of these types comes from a non-prototype fn definition,\n \t compare that with the other type's arglist.\n@@ -1706,7 +1706,7 @@ function_types_compatible_p (const_tree f1, const_tree f2,\n     }\n   if (args2 == NULL_TREE)\n     {\n-      if (flag_isoc2x ? stdarg_p (f1) : !self_promoting_args_p (args1))\n+      if (!self_promoting_args_p (args1))\n \treturn 0;\n       if (TYPE_ACTUAL_ARG_TYPES (f2)\n \t  && type_lists_compatible_p (args1, TYPE_ACTUAL_ARG_TYPES (f2),"}, {"sha": "0949c7bc90c50dce617dfe9b39d7920befa5d3eb", "filename": "gcc/testsuite/gcc.dg/c11-unproto-1.c", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4ea128d5c740e4e8c2e7b70de3a90435035eb863/gcc%2Ftestsuite%2Fgcc.dg%2Fc11-unproto-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4ea128d5c740e4e8c2e7b70de3a90435035eb863/gcc%2Ftestsuite%2Fgcc.dg%2Fc11-unproto-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fc11-unproto-1.c?ref=4ea128d5c740e4e8c2e7b70de3a90435035eb863", "patch": "@@ -1,6 +1,7 @@\n-/* Test compatibility of unprototyped and prototyped function types (C2x makes\n-   the case of types affected by default argument promotions compatible).  Test\n-   valid-in-C2x usages are not accepted for C11.  */\n+/* Test compatibility of unprototyped and prototyped function types (C2x made\n+   the case of types affected by default argument promotions compatible, before\n+   removing unprototyped functions completely).  Test affected usages are not\n+   accepted for C11.  */\n /* { dg-do compile } */\n /* { dg-options \"-std=c11 -pedantic-errors\" } */\n "}, {"sha": "06da935336e725e92a98a7cca1912a4535358e8b", "filename": "gcc/testsuite/gcc.dg/c11-unproto-2.c", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4ea128d5c740e4e8c2e7b70de3a90435035eb863/gcc%2Ftestsuite%2Fgcc.dg%2Fc11-unproto-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4ea128d5c740e4e8c2e7b70de3a90435035eb863/gcc%2Ftestsuite%2Fgcc.dg%2Fc11-unproto-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fc11-unproto-2.c?ref=4ea128d5c740e4e8c2e7b70de3a90435035eb863", "patch": "@@ -1,6 +1,7 @@\n-/* Test compatibility of unprototyped and prototyped function types (C2x makes\n-   the case of types affected by default argument promotions compatible).  Test\n-   invalid-in-C2x usages, in C11 mode.  */\n+/* Test compatibility of unprototyped and prototyped function types (C2x made\n+   the case of types affected by default argument promotions compatible, before\n+   removing unprototyped functions completely).  Test always-invalid-in-C2x\n+   usages, in C11 mode.  */\n /* { dg-do compile } */\n /* { dg-options \"-std=c11 -pedantic-errors\" } */\n "}, {"sha": "aa87d78610e917d5a3cf39b50a410d3556313c84", "filename": "gcc/testsuite/gcc.dg/c2x-unproto-1.c", "status": "modified", "additions": 17, "deletions": 12, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4ea128d5c740e4e8c2e7b70de3a90435035eb863/gcc%2Ftestsuite%2Fgcc.dg%2Fc2x-unproto-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4ea128d5c740e4e8c2e7b70de3a90435035eb863/gcc%2Ftestsuite%2Fgcc.dg%2Fc2x-unproto-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fc2x-unproto-1.c?ref=4ea128d5c740e4e8c2e7b70de3a90435035eb863", "patch": "@@ -1,20 +1,25 @@\n-/* Test compatibility of unprototyped and prototyped function types (C2x makes\n-   the case of types affected by default argument promotions compatible).  Test\n-   valid-in-C2x usages.  */\n+/* Test compatibility of unprototyped and prototyped function types (C2x made\n+   the case of types affected by default argument promotions compatible, before\n+   removing unprototyped functions completely).  Test affected usages are not\n+   accepted for C2x.  */\n /* { dg-do compile } */\n /* { dg-options \"-std=c2x -pedantic-errors\" } */\n \n-void f1 ();\n-void f1 (float);\n+void f1 (); /* { dg-message \"previous declaration\" } */\n+void f1 (float); /* { dg-error \"conflicting types\" } */\n+/* { dg-message \"default promotion\" \"\" { target *-*-* } .-1 } */\n \n-void f2 (float);\n-void f2 ();\n+void f2 (float); /* { dg-message \"previous declaration\" } */\n+void f2 (); /* { dg-error \"conflicting types\" } */\n+/* { dg-message \"default promotion\" \"\" { target *-*-* } .-1 } */\n \n-void f3 ();\n-void f3 (char);\n+void f3 (); /* { dg-message \"previous declaration\" } */\n+void f3 (char); /* { dg-error \"conflicting types\" } */\n+/* { dg-message \"default promotion\" \"\" { target *-*-* } .-1 } */\n \n-void f4 (char);\n-void f4 ();\n+void f4 (char); /* { dg-message \"previous declaration\" } */\n+void f4 (); /* { dg-error \"conflicting types\" } */\n+/* { dg-message \"default promotion\" \"\" { target *-*-* } .-1 } */\n \n /* Built-in function case.  */\n-float sqrtf ();\n+float sqrtf (); /* { dg-warning \"conflicting types for built-in function\" } */"}, {"sha": "3d5ae9d8460d2ab8b58eda368a964ad5d96e409c", "filename": "gcc/testsuite/gcc.dg/c2x-unproto-2.c", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4ea128d5c740e4e8c2e7b70de3a90435035eb863/gcc%2Ftestsuite%2Fgcc.dg%2Fc2x-unproto-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4ea128d5c740e4e8c2e7b70de3a90435035eb863/gcc%2Ftestsuite%2Fgcc.dg%2Fc2x-unproto-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fc2x-unproto-2.c?ref=4ea128d5c740e4e8c2e7b70de3a90435035eb863", "patch": "@@ -1,6 +1,7 @@\n-/* Test compatibility of unprototyped and prototyped function types (C2x makes\n-   the case of types affected by default argument promotions compatible).  Test\n-   invalid-in-C2x usages.  */\n+/* Test compatibility of unprototyped and prototyped function types (C2x made\n+   the case of types affected by default argument promotions compatible, before\n+   removing unprototyped functions completely).  Test always-invalid-in-C2x\n+   usages, in C2X mode.  */\n /* { dg-do compile } */\n /* { dg-options \"-std=c2x -pedantic-errors\" } */\n "}]}