{"sha": "ee4764a88be649f2d18685a229531a595b2e025d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWU0NzY0YTg4YmU2NDlmMmQxODY4NWEyMjk1MzFhNTk1YjJlMDI1ZA==", "commit": {"author": {"name": "Ghassan Shobaki", "email": "ghassan.shobaki@amd.com", "date": "2009-07-13T22:42:41Z"}, "committer": {"name": "Ghassan Shobaki", "email": "gshobaki@gcc.gnu.org", "date": "2009-07-13T22:42:41Z"}, "message": "2009-07-13  Ghassan Shobaki  <ghassan.shobaki@amd.com>\n\t\n\t* haifa-sched.c \n\t(rank_for_schedule): Introduced flags to enable/disable \n\tindividual scheduling heuristics.\n\t* common.opt: Introduced flags to enable/disable\n        individual heuristics in the scheduler.\t\n\t* doc/invoke.texi: Introduced flags to enable/disable\n        individual heuristics in the scheduler.\n\nFrom-SVN: r149603", "tree": {"sha": "c7a87beae76242d4de327015672f1d1de55e0afe", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c7a87beae76242d4de327015672f1d1de55e0afe"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ee4764a88be649f2d18685a229531a595b2e025d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ee4764a88be649f2d18685a229531a595b2e025d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ee4764a88be649f2d18685a229531a595b2e025d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ee4764a88be649f2d18685a229531a595b2e025d/comments", "author": null, "committer": null, "parents": [{"sha": "05682af89f0ed47428f1c9e81357c87b22d04271", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/05682af89f0ed47428f1c9e81357c87b22d04271", "html_url": "https://github.com/Rust-GCC/gccrs/commit/05682af89f0ed47428f1c9e81357c87b22d04271"}], "stats": {"total": 100, "additions": 93, "deletions": 7}, "files": [{"sha": "52f41bae0132102b421d6c26639e3842fd13a835", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee4764a88be649f2d18685a229531a595b2e025d/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee4764a88be649f2d18685a229531a595b2e025d/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=ee4764a88be649f2d18685a229531a595b2e025d", "patch": "@@ -1,3 +1,13 @@\n+2009-07-13  Ghassan Shobaki  <ghassan.shobaki@amd.com>\n+\t\n+\t* haifa-sched.c \n+\t(rank_for_schedule): Introduced flags to enable/disable \n+\tindividual scheduling heuristics.\n+\t* common.opt: Introduced flags to enable/disable\n+        individual heuristics in the scheduler.\t\n+\t* doc/invoke.texi: Introduced flags to enable/disable\n+        individual heuristics in the scheduler.\n+\t\n 2009-07-13  Kai Tietz  <kai.tietz@onevision.com>\n \n \t* config/i386/t-gthr-win32 (LIB2FUNCS_EXTRA): Remove file"}, {"sha": "ada94e95a18f087acfc75e75903e1f954d7023f1", "filename": "gcc/common.opt", "status": "modified", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee4764a88be649f2d18685a229531a595b2e025d/gcc%2Fcommon.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee4764a88be649f2d18685a229531a595b2e025d/gcc%2Fcommon.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcommon.opt?ref=ee4764a88be649f2d18685a229531a595b2e025d", "patch": "@@ -1056,6 +1056,34 @@ fsched-stalled-insns-dep=\n Common RejectNegative Joined UInteger\n -fsched-stalled-insns-dep=<number>\tSet dependence distance checking in premature scheduling of queued insns\n \n+fsched-group-heuristic\n+Common Report Var(flag_sched_group_heuristic) Init(1) Optimization\n+Enable the group heuristic in the scheduler\n+\n+fsched-critical-path-heuristic\n+Common Report Var(flag_sched_critical_path_heuristic) Init(1) Optimization\n+Enable the critical path heuristic in the scheduler\n+\n+fsched-spec-insn-heuristic\n+Common Report Var(flag_sched_spec_insn_heuristic) Init(1) Optimization\n+Enable the speculative instruction heuristic in the scheduler\n+\n+fsched-reg-pressure-heuristic\n+Common Report Var(flag_sched_reg_pressure_heuristic) Init(1) Optimization\n+Enable the register pressure heuristic in the scheduler\n+\n+fsched-rank-heuristic\n+Common Report Var(flag_sched_rank_heuristic) Init(1) Optimization\n+Enable the rank heuristic in the scheduler\n+\n+fsched-last-insn-heuristic\n+Common Report Var(flag_sched_last_insn_heuristic) Init(1) Optimization\n+Enable the last instruction heuristic in the scheduler\n+\n+fsched-dep-count-heuristic\n+Common Report Var(flag_sched_dep_count_heuristic) Init(1) Optimization\n+Enable the dependent count heuristic in the scheduler\n+\n fsection-anchors\n Common Report Var(flag_section_anchors) Optimization\n Access data in the same section from shared anchor points"}, {"sha": "cff2431db97230d48b5f80fb93f3dbf2043cf0d0", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 47, "deletions": 0, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee4764a88be649f2d18685a229531a595b2e025d/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee4764a88be649f2d18685a229531a595b2e025d/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=ee4764a88be649f2d18685a229531a595b2e025d", "patch": "@@ -364,6 +364,10 @@ Objective-C and Objective-C++ Dialects}.\n -frounding-math -fsched2-use-superblocks @gol\n -fsched2-use-traces -fsched-spec-load -fsched-spec-load-dangerous @gol\n -fsched-stalled-insns-dep[=@var{n}] -fsched-stalled-insns[=@var{n}] @gol\n+-fsched-group-heuristic -fsched-critical-path-heuristic @gol\n+-fsched-spec-insn-heuristic -fsched-reg-pressure-heuristic @gol\n+-fsched-rank-heuristic -fsched-last-insn-heuristic @gol\n+-fsched-dep-count-heuristic @gol\n -fschedule-insns -fschedule-insns2 -fsection-anchors @gol\n -fselective-scheduling -fselective-scheduling2 @gol\n -fsel-sched-pipelining -fsel-sched-pipelining-outer-loops @gol\n@@ -6229,6 +6233,49 @@ results from the algorithm.\n This only makes sense when scheduling after register allocation, i.e.@: with\n @option{-fschedule-insns2} or at @option{-O2} or higher.\n \n+@item -fsched-group-heuristic\n+@opindex fsched-group-heuristic\n+Enable the group heuristic in the scheduler.  This is enabled by default\n+when scheduling is enabled, i.e.@: with @option{-fschedule-insns} \n+or @option{-fschedule-insns2} or at @option{-O2} or higher.\n+\n+@item -fsched-critical-path-heuristic\n+@opindex fsched-critical-path-heuristic\n+Enable the critical-path heuristic in the scheduler.  This is enabled \n+by default when scheduling is enabled, i.e.@: with @option{-fschedule-insns} \n+or @option{-fschedule-insns2} or at @option{-O2} or higher.\n+\n+@item -fsched-spec-insn-heuristic\n+@opindex fsched-spec-insn-heuristic\n+Enable the speculative instruction heuristic in the scheduler.  This is \n+enabled by default when scheduling is enabled, i.e.@: with \n+@option{-fschedule-insns} or @option{-fschedule-insns2} or \n+at @option{-O2} or higher.\n+\n+@item -fsched-reg-pressure-heuristic\n+@opindex fsched-reg-pressure-heuristic\n+Enable the register pressure heuristic in the scheduler.  This only makes  \n+sense when scheduling before register allocation, i.e.@: \n+with @option{-fschedule-insns} or at @option{-O2} or higher.\n+\n+@item -fsched-rank-heuristic\n+@opindex fsched-rank-heuristic\n+Enable the rank heuristic in the scheduler.  This is enabled by default \n+when scheduling is enabled, i.e.@: with @option{-fschedule-insns} \n+or @option{-fschedule-insns2} or at @option{-O2} or higher.\n+\n+@item -fsched-last-insn-heuristic\n+@opindex fsched-last-insn-heuristic\n+Enable the last-instruction heuristic in the scheduler.  This is enabled \n+by default when scheduling is enabled, i.e.@: with @option{-fschedule-insns} \n+or @option{-fschedule-insns2} or at @option{-O2} or higher.\n+\n+@item -fsched-dep-count-heuristic\n+@opindex fsched-dep-count-heuristic\n+Enable the dependent-count heuristic in the scheduler.  This is enabled \n+by default when scheduling is enabled, i.e.@: with @option{-fschedule-insns} \n+or @option{-fschedule-insns2} or at @option{-O2} or higher.\n+\n @item -fsched2-use-traces\n @opindex fsched2-use-traces\n Use @option{-fsched2-use-superblocks} algorithm when scheduling after register"}, {"sha": "95cbfc1b1a8237ddd73784da9bad3f6ceebec83b", "filename": "gcc/haifa-sched.c", "status": "modified", "additions": 8, "deletions": 7, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee4764a88be649f2d18685a229531a595b2e025d/gcc%2Fhaifa-sched.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee4764a88be649f2d18685a229531a595b2e025d/gcc%2Fhaifa-sched.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fhaifa-sched.c?ref=ee4764a88be649f2d18685a229531a595b2e025d", "patch": "@@ -890,7 +890,8 @@ rank_for_schedule (const void *x, const void *y)\n   int val, priority_val, weight_val, info_val;\n \n   /* The insn in a schedule group should be issued the first.  */\n-  if (SCHED_GROUP_P (tmp) != SCHED_GROUP_P (tmp2))\n+  if (flag_sched_group_heuristic && \n+      SCHED_GROUP_P (tmp) != SCHED_GROUP_P (tmp2))\n     return SCHED_GROUP_P (tmp2) ? 1 : -1;\n \n   /* Make sure that priority of TMP and TMP2 are initialized.  */\n@@ -899,11 +900,11 @@ rank_for_schedule (const void *x, const void *y)\n   /* Prefer insn with higher priority.  */\n   priority_val = INSN_PRIORITY (tmp2) - INSN_PRIORITY (tmp);\n \n-  if (priority_val)\n+  if (flag_sched_critical_path_heuristic && priority_val)\n     return priority_val;\n \n   /* Prefer speculative insn with greater dependencies weakness.  */\n-  if (spec_info)\n+  if (flag_sched_spec_insn_heuristic && spec_info)\n     {\n       ds_t ds1, ds2;\n       dw_t dw1, dw2;\n@@ -927,16 +928,16 @@ rank_for_schedule (const void *x, const void *y)\n     }\n \n   /* Prefer an insn with smaller contribution to registers-pressure.  */\n-  if (!reload_completed &&\n+  if (flag_sched_reg_pressure_heuristic && !reload_completed &&\n       (weight_val = INSN_REG_WEIGHT (tmp) - INSN_REG_WEIGHT (tmp2)))\n     return weight_val;\n \n   info_val = (*current_sched_info->rank) (tmp, tmp2);\n-  if (info_val)\n+  if(flag_sched_rank_heuristic && info_val)\n     return info_val;\n \n   /* Compare insns based on their relation to the last-scheduled-insn.  */\n-  if (INSN_P (last_scheduled_insn))\n+  if (flag_sched_last_insn_heuristic && INSN_P (last_scheduled_insn))\n     {\n       dep_t dep1;\n       dep_t dep2;\n@@ -977,7 +978,7 @@ rank_for_schedule (const void *x, const void *y)\n   val = (sd_lists_size (tmp2, SD_LIST_FORW)\n \t - sd_lists_size (tmp, SD_LIST_FORW));\n \n-  if (val != 0)\n+  if (flag_sched_dep_count_heuristic && val != 0)\n     return val;\n \n   /* If insns are equally good, sort by INSN_LUID (original insn order),"}]}