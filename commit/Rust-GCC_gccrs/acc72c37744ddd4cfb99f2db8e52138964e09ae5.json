{"sha": "acc72c37744ddd4cfb99f2db8e52138964e09ae5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWNjNzJjMzc3NDRkZGQ0Y2ZiOTlmMmRiOGU1MjEzODk2NGUwOWFlNQ==", "commit": {"author": {"name": "Mark Mitchell", "email": "mark@codesourcery.com", "date": "2001-05-04T03:03:39Z"}, "committer": {"name": "Mark Mitchell", "email": "mmitchel@gcc.gnu.org", "date": "2001-05-04T03:03:39Z"}, "message": "cp-tree.h (flag_inline_trees): Update documentation.\n\n\t* cp-tree.h (flag_inline_trees): Update documentation.\n\t* decl.c (init_decl_processing): Adjust handling of\n\tflag_inline_functions and flag_inline_trees to support -O3.\n\t(grokfndecl): Set DECL_INLINE on all functions if that's what\n\tthe user requested.\n\t(save_function_data): Clear DECL_INLINE in\n\tcurrent_function_cannot_inline is non-NULL.\n\t* decl2.c (flag_inline_trees): Update documentation.\n\nFrom-SVN: r41822", "tree": {"sha": "f92c6c67323714acc8bf3cec386c1ed11c545945", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f92c6c67323714acc8bf3cec386c1ed11c545945"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/acc72c37744ddd4cfb99f2db8e52138964e09ae5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/acc72c37744ddd4cfb99f2db8e52138964e09ae5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/acc72c37744ddd4cfb99f2db8e52138964e09ae5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/acc72c37744ddd4cfb99f2db8e52138964e09ae5/comments", "author": null, "committer": null, "parents": [{"sha": "4091fa5f1bc6c0e1703c7245e0faf76e3bb579a4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4091fa5f1bc6c0e1703c7245e0faf76e3bb579a4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4091fa5f1bc6c0e1703c7245e0faf76e3bb579a4"}], "stats": {"total": 45, "additions": 35, "deletions": 10}, "files": [{"sha": "0acfdb9b0416a6eb7901984bb5271d5330f3896f", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/acc72c37744ddd4cfb99f2db8e52138964e09ae5/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/acc72c37744ddd4cfb99f2db8e52138964e09ae5/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=acc72c37744ddd4cfb99f2db8e52138964e09ae5", "patch": "@@ -1,3 +1,14 @@\n+2001-05-03  Mark Mitchell  <mark@codesourcery.com>\n+\n+\t* cp-tree.h (flag_inline_trees): Update documentation.\n+\t* decl.c (init_decl_processing): Adjust handling of\n+\tflag_inline_functions and flag_inline_trees to support -O3.\n+\t(grokfndecl): Set DECL_INLINE on all functions if that's what\n+\tthe user requested.\n+\t(save_function_data): Clear DECL_INLINE in\n+\tcurrent_function_cannot_inline is non-NULL.\n+\t* decl2.c (flag_inline_trees): Update documentation.\n+\n 2001-05-03  Nathan Sidwell  <nathan@codesourcery.com>\n \n \t* dump.c (cp_dump_tree, USING_STMT case): New case."}, {"sha": "05a0d0f45ac5b73e617675b666b6bc2dbe462c3b", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/acc72c37744ddd4cfb99f2db8e52138964e09ae5/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/acc72c37744ddd4cfb99f2db8e52138964e09ae5/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=acc72c37744ddd4cfb99f2db8e52138964e09ae5", "patch": "@@ -3445,8 +3445,10 @@ extern int flag_implicit_templates;\n \n extern int flag_weak;\n \n-/* Nonzero if we should expand functions calls inline at the tree\n-   level, rather than at the RTL level.  */\n+/* 0 if we should not perform inlining.\n+   1 if we should expand functions calls inline at the tree level.  \n+   2 if we should consider *all* functions to be inline \n+   candidates.  */\n \n extern int flag_inline_trees;\n "}, {"sha": "54d84f47ddda508fb29d81914cf46df7f0f9cc6c", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 16, "deletions": 6, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/acc72c37744ddd4cfb99f2db8e52138964e09ae5/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/acc72c37744ddd4cfb99f2db8e52138964e09ae5/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=acc72c37744ddd4cfb99f2db8e52138964e09ae5", "patch": "@@ -6365,6 +6365,11 @@ init_decl_processing ()\n       flag_inline_trees = 1;\n       flag_no_inline = 1;\n     }\n+  if (flag_inline_functions)\n+    {\n+      flag_inline_trees = 2;\n+      flag_inline_functions = 0;\n+    }\n \n   /* Initially, C.  */\n   current_lang_name = lang_name_c;\n@@ -6547,10 +6552,6 @@ init_decl_processing ()\n \n   if (flag_exceptions)\n     init_exception_processing ();\n-  if (flag_no_inline)\n-    {\n-      flag_inline_functions = 0;\n-    }\n \n   if (! supports_one_only ())\n     flag_weak = 0;\n@@ -8838,8 +8839,13 @@ grokfndecl (ctype, type, declarator, orig_declarator, virtualp, flags, quals,\n       DECL_NOT_REALLY_EXTERN (decl) = 1;\n     }\n \n+  /* If the declaration was declared inline, mark it as such.  */\n   if (inlinep)\n-    DECL_DECLARED_INLINE_P (decl) = DECL_INLINE (decl) = 1;\n+    DECL_DECLARED_INLINE_P (decl) = 1;\n+  /* We inline functions that are explicitly declared inline, or, when\n+     the user explicitly asks us to, all functions.  */\n+  if (DECL_DECLARED_INLINE_P (decl) || flag_inline_trees == 2)\n+    DECL_INLINE (decl) = 1;\n \n   DECL_EXTERNAL (decl) = 1;\n   if (quals != NULL_TREE && TREE_CODE (type) == FUNCTION_TYPE)\n@@ -13771,7 +13777,11 @@ save_function_data (decl)\n   /* If we've already decided that we cannot inline this function, we\n      must remember that fact when we actually go to expand the\n      function.  */\n-  f->cannot_inline = current_function_cannot_inline;\n+  if (current_function_cannot_inline)\n+    {\n+      f->cannot_inline = current_function_cannot_inline;\n+      DECL_INLINE (decl) = 0;\n+    }\n }\n \n /* At the end of every constructor we generate to code to return"}, {"sha": "73b9afdc6129dc044a94a13ba5df356a0b6785fc", "filename": "gcc/cp/decl2.c", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/acc72c37744ddd4cfb99f2db8e52138964e09ae5/gcc%2Fcp%2Fdecl2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/acc72c37744ddd4cfb99f2db8e52138964e09ae5/gcc%2Fcp%2Fdecl2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl2.c?ref=acc72c37744ddd4cfb99f2db8e52138964e09ae5", "patch": "@@ -396,8 +396,10 @@ int flag_use_cxa_atexit;\n \n int flag_honor_std = 1;\n \n-/* Nonzero if we should expand functions calls inline at the tree\n-   level, rather than at the RTL level.  */\n+/* 0 if we should not perform inlining.\n+   1 if we should expand functions calls inline at the tree level.  \n+   2 if we should consider *all* functions to be inline \n+   candidates.  */\n \n int flag_inline_trees = 0;\n "}]}