{"sha": "d8ea81183a92c71cd50550137fe0aa2725c98b3f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDhlYTgxMTgzYTkyYzcxY2Q1MDU1MDEzN2ZlMGFhMjcyNWM5OGIzZg==", "commit": {"author": {"name": "Martin Jambor", "email": "mjambor@suse.cz", "date": "2019-11-18T15:50:06Z"}, "committer": {"name": "Martin Jambor", "email": "jamborm@gcc.gnu.org", "date": "2019-11-18T15:50:06Z"}, "message": "Add testcase for already fixed PR ipa/92528\n\n2019-11-18  Martin Jambor  <mjambor@suse.cz>\n\n\tPR ipa/92528\n\t* g++.dg/ipa/pr92528.C: New test.\n\nFrom-SVN: r278415", "tree": {"sha": "ae67e78312ef81ff1f5c30822451c7a180609d15", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ae67e78312ef81ff1f5c30822451c7a180609d15"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d8ea81183a92c71cd50550137fe0aa2725c98b3f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d8ea81183a92c71cd50550137fe0aa2725c98b3f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d8ea81183a92c71cd50550137fe0aa2725c98b3f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d8ea81183a92c71cd50550137fe0aa2725c98b3f/comments", "author": {"login": "jamborm", "id": 2180070, "node_id": "MDQ6VXNlcjIxODAwNzA=", "avatar_url": "https://avatars.githubusercontent.com/u/2180070?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jamborm", "html_url": "https://github.com/jamborm", "followers_url": "https://api.github.com/users/jamborm/followers", "following_url": "https://api.github.com/users/jamborm/following{/other_user}", "gists_url": "https://api.github.com/users/jamborm/gists{/gist_id}", "starred_url": "https://api.github.com/users/jamborm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jamborm/subscriptions", "organizations_url": "https://api.github.com/users/jamborm/orgs", "repos_url": "https://api.github.com/users/jamborm/repos", "events_url": "https://api.github.com/users/jamborm/events{/privacy}", "received_events_url": "https://api.github.com/users/jamborm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "58c036c8354e4d14551ceaeffaa1dda2fe445640", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/58c036c8354e4d14551ceaeffaa1dda2fe445640", "html_url": "https://github.com/Rust-GCC/gccrs/commit/58c036c8354e4d14551ceaeffaa1dda2fe445640"}], "stats": {"total": 69, "additions": 69, "deletions": 0}, "files": [{"sha": "c7e4500c497624dbbab57c5a8d63421ccc416f95", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d8ea81183a92c71cd50550137fe0aa2725c98b3f/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d8ea81183a92c71cd50550137fe0aa2725c98b3f/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=d8ea81183a92c71cd50550137fe0aa2725c98b3f", "patch": "@@ -1,3 +1,8 @@\n+2019-11-18  Martin Jambor  <mjambor@suse.cz>\n+\n+\tPR ipa/92528\n+\t* g++.dg/ipa/pr92528.C: New test.\n+\n 2019-11-18  Richard Sandiford  <richard.sandiford@arm.com>\n \n \t* lib/target-supports.exp (check_effective_target_vect_check_ptrs):"}, {"sha": "7bc8d5aa65bdcc027b1cfd5f5dd6c2ad344aaf30", "filename": "gcc/testsuite/g++.dg/ipa/pr92528.C", "status": "added", "additions": 64, "deletions": 0, "changes": 64, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d8ea81183a92c71cd50550137fe0aa2725c98b3f/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fipa%2Fpr92528.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d8ea81183a92c71cd50550137fe0aa2725c98b3f/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fipa%2Fpr92528.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fipa%2Fpr92528.C?ref=d8ea81183a92c71cd50550137fe0aa2725c98b3f", "patch": "@@ -0,0 +1,64 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -std=c++11 -w\" } */\n+\n+template <typename _T1, typename _T2> struct A {\n+  _T1 first;\n+  _T2 second;\n+  template <typename _U1, typename _U2>\n+  A(_U1 &&p1, _U2 p2) : first(p1), second(p2) {}\n+};\n+class B {\n+public:\n+  B(char *);\n+};\n+struct C {\n+  virtual ~C();\n+};\n+struct D {\n+  virtual void registerReporter(B const &, int *) = 0;\n+};\n+template <typename, typename, typename, typename, typename = int> class F {\n+public:\n+  void _M_get_insert_unique_pos();\n+  template <typename... _Args> A<int, bool> _M_emplace_unique(_Args &&...);\n+};\n+template <typename _Key, typename _Val, typename _KeyOfValue, typename _Compare,\n+          typename _Alloc>\n+template <typename... _Args>\n+A<int, bool> F<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::_M_emplace_unique(\n+    _Args &&...) try {\n+  _M_get_insert_unique_pos();\n+} catch (...) {\n+}\n+class G {\n+  F<int, int, int, int> _M_t;\n+\n+public:\n+  void insert(A<const B &, int *&> p1) { _M_t._M_emplace_unique(p1); }\n+};\n+class H {\n+public:\n+  void registerReporter(B const &p1, int *p2) {\n+    A<const B &, int *&> a(p1, p2);\n+    m_factories.insert(a);\n+  }\n+  G m_factories;\n+};\n+namespace {\n+class J : C, D {\n+  void registerReporter(B const &p1, int *p2) {\n+    m_reporterRegistry.registerReporter(p1, p2);\n+  }\n+  H m_reporterRegistry;\n+};\n+J fn1();\n+} // namespace\n+void fn2() { fn1(); }\n+D &fn3();\n+class I {\n+public:\n+  I(B p1) { fn3().registerReporter(p1, new int); }\n+};\n+namespace {\n+I b(\"\");\n+}"}]}