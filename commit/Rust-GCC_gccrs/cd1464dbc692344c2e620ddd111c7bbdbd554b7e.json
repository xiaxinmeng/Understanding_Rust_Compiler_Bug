{"sha": "cd1464dbc692344c2e620ddd111c7bbdbd554b7e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Y2QxNDY0ZGJjNjkyMzQ0YzJlNjIwZGRkMTExYzdiYmRiZDU1NGI3ZQ==", "commit": {"author": {"name": "Jonathan Wakely", "email": "redi@gcc.gnu.org", "date": "2014-05-16T11:08:49Z"}, "committer": {"name": "Jonathan Wakely", "email": "redi@gcc.gnu.org", "date": "2014-05-16T11:08:49Z"}, "message": "parse_numbers.h (__parse_int::_Number_help): Check for overflow.\n\n\t* include/bits/parse_numbers.h (__parse_int::_Number_help): Check for\n\toverflow.\n\t* include/std/chrono (chrono_literals::__select_type::_Select_type):\n\tRemove.\n\t(chrono_literals::_Checked_integral_constant): Define.\n\tSimplify UDL operator templates and check for overflow.\n\t* testsuite/20_util/duration/literals/range.cc: New.\n\nFrom-SVN: r210513", "tree": {"sha": "6fd49a2dd73f5c6fe2373f9a8256eb261ee1794a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6fd49a2dd73f5c6fe2373f9a8256eb261ee1794a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/cd1464dbc692344c2e620ddd111c7bbdbd554b7e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cd1464dbc692344c2e620ddd111c7bbdbd554b7e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cd1464dbc692344c2e620ddd111c7bbdbd554b7e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cd1464dbc692344c2e620ddd111c7bbdbd554b7e/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3d840f7d1f4b0172b8179e6e0a41694fc88fde67", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3d840f7d1f4b0172b8179e6e0a41694fc88fde67", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3d840f7d1f4b0172b8179e6e0a41694fc88fde67"}], "stats": {"total": 142, "additions": 73, "deletions": 69}, "files": [{"sha": "3df09012b9a03974b37f2f0371f40a8e2dcaea84", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cd1464dbc692344c2e620ddd111c7bbdbd554b7e/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cd1464dbc692344c2e620ddd111c7bbdbd554b7e/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=cd1464dbc692344c2e620ddd111c7bbdbd554b7e", "patch": "@@ -1,4 +1,14 @@\n-2014-05-15  Ed Smith-Rowland  <3dw4rd@verizon.net>\n+2014-05-16  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* include/bits/parse_numbers.h (__parse_int::_Number_help): Check for\n+\toverflow.\n+\t* include/std/chrono (chrono_literals::__select_type::_Select_type):\n+\tRemove.\n+\t(chrono_literals::_Checked_integral_constant): Define.\n+\tSimplify UDL operator templates and check for overflow.\n+\t* testsuite/20_util/duration/literals/range.cc: New.\n+\n+2014-05-16  Ed Smith-Rowland  <3dw4rd@verizon.net>\n \t    Jonathan Wakely  <jwakely@redhat.com>\n \n \tPR libstdc++/61166"}, {"sha": "a29d1272255da955b973f5accac1f80190d1da58", "filename": "libstdc++-v3/include/bits/parse_numbers.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cd1464dbc692344c2e620ddd111c7bbdbd554b7e/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fparse_numbers.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cd1464dbc692344c2e620ddd111c7bbdbd554b7e/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fparse_numbers.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fparse_numbers.h?ref=cd1464dbc692344c2e620ddd111c7bbdbd554b7e", "patch": "@@ -193,6 +193,7 @@ namespace __parse_int\n \t\t\t\t  _Pow / (_Base * __valid_digit::value),\n \t\t\t\t  _Digs...>;\n       using type = __ull_constant<_Pow * __digit::value + __next::type::value>;\n+      static_assert((type::value / _Pow) == __digit::value, \"overflow\");\n     };\n \n   template<unsigned _Base, unsigned long long _Pow, char _Dig>"}, {"sha": "39ad5e3ba83a8ac6dd3e24f6d2de7be2a34740ab", "filename": "libstdc++-v3/include/std/chrono", "status": "modified", "additions": 30, "deletions": 68, "changes": 98, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cd1464dbc692344c2e620ddd111c7bbdbd554b7e/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fchrono", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cd1464dbc692344c2e620ddd111c7bbdbd554b7e/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fchrono", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fchrono?ref=cd1464dbc692344c2e620ddd111c7bbdbd554b7e", "patch": "@@ -787,117 +787,79 @@ _GLIBCXX_END_NAMESPACE_VERSION\n   inline namespace chrono_literals\n   {\n \n-    namespace __select_type\n-    {\n-\n-      using namespace __parse_int;\n-\n-      template<unsigned long long _Val, typename _Dur>\n-\tstruct _Select_type\n-\t: conditional<\n-\t    _Val <= static_cast<unsigned long long>\n-\t\t      (numeric_limits<typename _Dur::rep>::max()),\n-\t    _Dur, void>\n-\t{\n-\t  static constexpr typename _Select_type::type\n-\t    value{static_cast<typename _Select_type::type>(_Val)};\n-\t};\n-\n-      template<unsigned long long _Val, typename _Dur>\n-\tconstexpr typename _Select_type<_Val, _Dur>::type\n-\t_Select_type<_Val, _Dur>::value;\n+    template<typename _Rep, unsigned long long _Val>\n+      struct _Checked_integral_constant\n+      : integral_constant<_Rep, static_cast<_Rep>(_Val)>\n+      {\n+\tstatic_assert(_Checked_integral_constant::value > 0\n+\t\t      && _Checked_integral_constant::value == _Val,\n+\t\t      \"literal value cannot be represented by duration type\");\n+      };\n \n-    } // __select_type\n+    template<typename _Dur, char... _Digits>\n+      constexpr _Dur __check_overflow()\n+      {\n+\tusing _Val = __parse_int::_Parse_int<_Digits...>;\n+\tusing _Rep = typename _Dur::rep;\n+\t// TODO: should be simply integral_constant<_Rep, _Val::value>\n+\t// but GCC doesn't reject narrowing conversions to _Rep.\n+\tusing _CheckedVal = _Checked_integral_constant<_Rep, _Val::value>;\n+\treturn _Dur{_CheckedVal::value};\n+      }\n \n     constexpr chrono::duration<long double, ratio<3600,1>>\n     operator\"\"h(long double __hours)\n     { return chrono::duration<long double, ratio<3600,1>>{__hours}; }\n \n     template <char... _Digits>\n-      constexpr typename\n-      __select_type::_Select_type<__select_int::_Select_int<_Digits...>::value,\n-\t\t\t     chrono::hours>::type\n+      constexpr chrono::hours\n       operator\"\"h()\n-      {\n-\treturn __select_type::_Select_type<\n-\t\t\t  __select_int::_Select_int<_Digits...>::value,\n-\t\t\t  chrono::hours>::value;\n-      }\n+      { return __check_overflow<chrono::hours, _Digits...>(); }\n \n     constexpr chrono::duration<long double, ratio<60,1>>\n     operator\"\"min(long double __mins)\n     { return chrono::duration<long double, ratio<60,1>>{__mins}; }\n \n     template <char... _Digits>\n-      constexpr typename\n-      __select_type::_Select_type<__select_int::_Select_int<_Digits...>::value,\n-\t\t\t     chrono::minutes>::type\n+      constexpr chrono::minutes\n       operator\"\"min()\n-      {\n-\treturn __select_type::_Select_type<\n-\t\t\t  __select_int::_Select_int<_Digits...>::value,\n-\t\t\t  chrono::minutes>::value;\n-      }\n+      { return __check_overflow<chrono::minutes, _Digits...>(); }\n \n     constexpr chrono::duration<long double>\n     operator\"\"s(long double __secs)\n     { return chrono::duration<long double>{__secs}; }\n \n     template <char... _Digits>\n-      constexpr typename\n-      __select_type::_Select_type<__select_int::_Select_int<_Digits...>::value,\n-\t\t\t     chrono::seconds>::type\n+      constexpr chrono::seconds\n       operator\"\"s()\n-      {\n-\treturn __select_type::_Select_type<\n-\t\t\t  __select_int::_Select_int<_Digits...>::value,\n-\t\t\t  chrono::seconds>::value;\n-      }\n+      { return __check_overflow<chrono::seconds, _Digits...>(); }\n \n     constexpr chrono::duration<long double, milli>\n     operator\"\"ms(long double __msecs)\n     { return chrono::duration<long double, milli>{__msecs}; }\n \n     template <char... _Digits>\n-      constexpr typename\n-      __select_type::_Select_type<__select_int::_Select_int<_Digits...>::value,\n-\t\t\t     chrono::milliseconds>::type\n+      constexpr chrono::milliseconds\n       operator\"\"ms()\n-      {\n-\treturn __select_type::_Select_type<\n-\t\t\t  __select_int::_Select_int<_Digits...>::value,\n-\t\t\t  chrono::milliseconds>::value;\n-      }\n+      { return __check_overflow<chrono::milliseconds, _Digits...>(); }\n \n     constexpr chrono::duration<long double, micro>\n     operator\"\"us(long double __usecs)\n     { return chrono::duration<long double, micro>{__usecs}; }\n \n     template <char... _Digits>\n-      constexpr typename\n-      __select_type::_Select_type<__select_int::_Select_int<_Digits...>::value,\n-\t\t\t     chrono::microseconds>::type\n+      constexpr chrono::microseconds\n       operator\"\"us()\n-      {\n-\treturn __select_type::_Select_type<\n-\t\t\t  __select_int::_Select_int<_Digits...>::value,\n-\t\t\t  chrono::microseconds>::value;\n-      }\n+      { return __check_overflow<chrono::microseconds, _Digits...>(); }\n \n     constexpr chrono::duration<long double, nano>\n     operator\"\"ns(long double __nsecs)\n     { return chrono::duration<long double, nano>{__nsecs}; }\n \n     template <char... _Digits>\n-      constexpr typename\n-      __select_type::_Select_type<__select_int::_Select_int<_Digits...>::value,\n-\t\t\t     chrono::nanoseconds>::type\n+      constexpr chrono::nanoseconds\n       operator\"\"ns()\n-      {\n-\treturn __select_type::_Select_type<\n-\t\t\t  __select_int::_Select_int<_Digits...>::value,\n-\t\t\t  chrono::nanoseconds>::value;\n-      }\n+      { return __check_overflow<chrono::nanoseconds, _Digits...>(); }\n \n   } // inline namespace chrono_literals\n   } // inline namespace literals"}, {"sha": "c005df650e2925ff81fd4da788228569fe5aa981", "filename": "libstdc++-v3/testsuite/20_util/duration/literals/range.cc", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cd1464dbc692344c2e620ddd111c7bbdbd554b7e/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fduration%2Fliterals%2Frange.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cd1464dbc692344c2e620ddd111c7bbdbd554b7e/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fduration%2Fliterals%2Frange.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fduration%2Fliterals%2Frange.cc?ref=cd1464dbc692344c2e620ddd111c7bbdbd554b7e", "patch": "@@ -0,0 +1,31 @@\n+// { dg-do compile }\n+// { dg-options \"-std=gnu++1y\" }\n+\n+// Copyright (C) 2014 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+#include <chrono>\n+\n+void\n+test01()\n+{\n+  using namespace std::literals::chrono_literals;\n+\n+  // std::numeric_limits<int64_t>::max() == 9223372036854775807;\n+  auto h = 9223372036854775808h;\n+  // { dg-error \"cannot be represented\" \"\" { target *-*-* } 794 }\n+}"}]}