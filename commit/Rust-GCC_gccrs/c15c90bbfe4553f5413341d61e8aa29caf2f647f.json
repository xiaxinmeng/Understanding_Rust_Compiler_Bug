{"sha": "c15c90bbfe4553f5413341d61e8aa29caf2f647f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzE1YzkwYmJmZTQ1NTNmNTQxMzM0MWQ2MWU4YWEyOWNhZjJmNjQ3Zg==", "commit": {"author": {"name": "Zack Weinberg", "email": "zack@codesourcery.com", "date": "2003-10-02T00:44:29Z"}, "committer": {"name": "Zack Weinberg", "email": "zack@gcc.gnu.org", "date": "2003-10-02T00:44:29Z"}, "message": "target.h (init_libfuncs): New hook.\n\n\t* target.h (init_libfuncs): New hook.\n\t* target-def.h: Default TARGET_INIT_BUILTINS and\n\tTARGET_INIT_LIBFUNCS to hook_void_void.  Add\n\tTARGET_INIT_LIBFUNCS to TARGET_INITIALIZER.\n\t* builtins.c (default_init_builtins): Delete.\n\t* expr.h (default_init_builtins): Delete prototype.\n\t* doc/tm.texi: Document TARGET_INIT_LIBFUNCS and US_SOFTWARE_GOFAST.\n\tTweak documentation of TARGET_FLOAT_LIB_COMPARE_RETURNS_BOOL.\n\tRemove documentation of INIT_TARGET_OPTABS, MULSI3_LIBCALL,\n\tDIVSI3_LIBCALL, UDIVSI3_LIBCALL, MODSI3_LIBCALL, UMODSI3_LIBCALL,\n\tMULDI3_LIBCALL, DIVDI3_LIBCALL, UDIVDI3_LIBCALL, MODDI3_LIBCALL,\n\tand UMODDI3_LIBCALL,\n\n\t* Makefile.in (optabs.o): Depends on target.h.\n\t* defaults.h: Provide default for FLOAT_LIB_COMPARE_RETURNS_BOOL.\n\t* optabs.c: Include target.h.\n\t(prepare_float_lib_cmp): No need for #ifdef around use of\n\tFLOAT_LIB_COMPARE_RETURNS_BOOL.\n\t(set_optab_libfunc): New function.\n\t(init_optabs): Delete use of all *_LIBCALL defines.\n\tCall targetm.init_libfuncs not INIT_TARGET_OPTABS.\n\t* optabs.h: Prototype set_optab_libfunc.\n\n\t* config.gcc: Remove all references to pa/long_double.h,\n\tia64/hpux_longdouble.h, and gofast.h.\n\t(mips-*-*): When --enable-gofast, just add US_SOFTWARE_GOFAST\n\tto tm_defines; don't set INIT_SUBTARGET_OPTABS or change tm_file.\n\n\t* config/alpha/alpha.c, config/c4x/c4x.c, config/cris/cris.c\n\t* config/frv/frv.c, config/h8300/h8300.c, config/i860/i860.c\n\t* config/ia64/ia64.c, config/ip2k/ip2k.c, config/m68hc11/m68hc11.c\n\t* config/mips/mips.c, config/pa/pa.c, config/rs6000/rs6000.c\n\t* config/sparc/sparc.c, config/vax/vax.c:\n\tProvide a definition for TARGET_INIT_LIBFUNCS.  Where\n\tnecessary, include optabs.h, libfuncs.h, and/or config/gofast.h.\n\n\t* config/alpha/unicosmk.h, config/alpha/vms.h, config/c4x/c4x.h\n\t* config/avr/avr.h, config/cris/cris.h, config/frv/frv.h\n\t* config/h8300/h8300.h, config/i860/i860.h, config/ip2k/ip2k.h\n\t* config/iq2000/iq2000.h, config/m68hc11/m68hc11.h, config/mips/mips.h\n\t* config/rs6000/aix.h, config/rs6000/sysv4.h, config/sparc/elf.h\n\t* config/sparc/lite.h, config/sparc/netbsd-elf.h, config/sparc/sol2.h\n\t* config/sparc/sparc.h, config/v850/v850.h, config/vax/vax.h\n\t* config/vax/elf.h: Don't define or use INIT_TARGET_OPTABS,\n\tINIT_SUBTARGET_OPTABS, or any *_LIBCALL macros.\n\n\t* config/ia64/hpux.h: Redefine INTEL_EXTENDED_IEEE_FORMAT to 0.\n\tSet TARGET_INIT_LIBFUNCS and FLOAT_LIB_COMPARE_RETURNS_BOOL here.\n\t* config/pa/pa-hpux.h: Define LONG_DOUBLE_TYPE_SIZE,\n\tHPUX_LONG_DOUBLE_LIBRARY, and FLOAT_LIB_COMPARE_RETURNS_BOOL here.\n\t* config/ia64/hpux_longdouble.h, config/pa/long_double.h: Delete.\n\n\t* config/rs6000/xcoff.h: Don't define RS6000_ITRUNC nor RS6000_UITRUNC.\n\t* config/sparc/sparc.h: Default SUN_CONVERSION_LIBFUNCS and\n\tSUN_INTEGER_MULTIPLY_64 to 0.\n\t* config/sparc/sol2.h: Redefine SUN_CONVERSION_LIBFUNCS and\n\tSUN_INTEGER_MULTIPLY_64 to 1.\n\t* config/sparc/elf.h: Redefine SUN_CONVERSION_LIBFUNCS and\n\tSUN_INTEGER_MULTIPLY_64 to 0.\n\t* config/sparc/lite.h, config/sparc/liteelf.h, config/sparc/sp86x-elf.h:\n\tDefine US_SOFTWARE_GOFAST.\n\t* config/vax/vax.h: Default TARGET_ELF to 0.\n\t* config/vax/elf.h: Redefine TARGET_ELF to 1.\n\n\t* config/gofast.h: Don't define any macros here.  Provide one\n\tstatic function, gofast_maybe_init_libfuncs, which does what\n\tINIT_GOFAST_LIBFUNCS used to do but only if US_SOFTWARE_GOFAST\n\tis already defined.  Do not clear negation libfuncs.  Do\n\tnot mess with HFmode, XFmode, or TFmode libfuncs.\n\n\t* config/avr/avr.c (avr_init_once): #if 0 out; mark FIXME.\n\nFrom-SVN: r72009", "tree": {"sha": "e1847a88ac5df6d5633dcb76b62503cc40aa7c6d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e1847a88ac5df6d5633dcb76b62503cc40aa7c6d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c15c90bbfe4553f5413341d61e8aa29caf2f647f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c15c90bbfe4553f5413341d61e8aa29caf2f647f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c15c90bbfe4553f5413341d61e8aa29caf2f647f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c15c90bbfe4553f5413341d61e8aa29caf2f647f/comments", "author": null, "committer": null, "parents": [{"sha": "d20a1e02ac1eff8825ca80fadc8be57c5e5b57fc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d20a1e02ac1eff8825ca80fadc8be57c5e5b57fc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d20a1e02ac1eff8825ca80fadc8be57c5e5b57fc"}], "stats": {"total": 1803, "additions": 738, "deletions": 1065}, "files": [{"sha": "367a2694dc28148b9e95e81fe661d83f07a90108", "filename": "gcc/ChangeLog", "status": "modified", "additions": 74, "deletions": 0, "changes": 74, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c15c90bbfe4553f5413341d61e8aa29caf2f647f/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c15c90bbfe4553f5413341d61e8aa29caf2f647f/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=c15c90bbfe4553f5413341d61e8aa29caf2f647f", "patch": "@@ -1,3 +1,77 @@\n+2003-10-01  Zack Weinberg  <zack@codesourcery.com>\n+\n+\t* target.h (init_libfuncs): New hook.\n+\t* target-def.h: Default TARGET_INIT_BUILTINS and\n+\tTARGET_INIT_LIBFUNCS to hook_void_void.  Add\n+\tTARGET_INIT_LIBFUNCS to TARGET_INITIALIZER.\n+\t* builtins.c (default_init_builtins): Delete.\n+\t* expr.h (default_init_builtins): Delete prototype.\n+\t* doc/tm.texi: Document TARGET_INIT_LIBFUNCS and US_SOFTWARE_GOFAST.\n+\tTweak documentation of TARGET_FLOAT_LIB_COMPARE_RETURNS_BOOL.\n+\tRemove documentation of INIT_TARGET_OPTABS, MULSI3_LIBCALL,\n+\tDIVSI3_LIBCALL, UDIVSI3_LIBCALL, MODSI3_LIBCALL, UMODSI3_LIBCALL,\n+\tMULDI3_LIBCALL, DIVDI3_LIBCALL, UDIVDI3_LIBCALL, MODDI3_LIBCALL,\n+\tand UMODDI3_LIBCALL,\n+\n+\t* Makefile.in (optabs.o): Depends on target.h.\n+\t* defaults.h: Provide default for FLOAT_LIB_COMPARE_RETURNS_BOOL.\n+\t* optabs.c: Include target.h.\n+\t(prepare_float_lib_cmp): No need for #ifdef around use of\n+\tFLOAT_LIB_COMPARE_RETURNS_BOOL.\n+\t(set_optab_libfunc): New function.\n+\t(init_optabs): Delete use of all *_LIBCALL defines.\n+\tCall targetm.init_libfuncs not INIT_TARGET_OPTABS.\n+\t* optabs.h: Prototype set_optab_libfunc.\n+\n+\t* config.gcc: Remove all references to pa/long_double.h,\n+\tia64/hpux_longdouble.h, and gofast.h.\n+\t(mips-*-*): When --enable-gofast, just add US_SOFTWARE_GOFAST\n+\tto tm_defines; don't set INIT_SUBTARGET_OPTABS or change tm_file.\n+\n+\t* config/alpha/alpha.c, config/c4x/c4x.c, config/cris/cris.c\n+\t* config/frv/frv.c, config/h8300/h8300.c, config/i860/i860.c\n+\t* config/ia64/ia64.c, config/ip2k/ip2k.c, config/m68hc11/m68hc11.c\n+\t* config/mips/mips.c, config/pa/pa.c, config/rs6000/rs6000.c\n+\t* config/sparc/sparc.c, config/vax/vax.c:\n+\tProvide a definition for TARGET_INIT_LIBFUNCS.  Where\n+\tnecessary, include optabs.h, libfuncs.h, and/or config/gofast.h.\n+\n+\t* config/alpha/unicosmk.h, config/alpha/vms.h, config/c4x/c4x.h\n+\t* config/avr/avr.h, config/cris/cris.h, config/frv/frv.h\n+\t* config/h8300/h8300.h, config/i860/i860.h, config/ip2k/ip2k.h\n+\t* config/iq2000/iq2000.h, config/m68hc11/m68hc11.h, config/mips/mips.h\n+\t* config/rs6000/aix.h, config/rs6000/sysv4.h, config/sparc/elf.h\n+\t* config/sparc/lite.h, config/sparc/netbsd-elf.h, config/sparc/sol2.h\n+\t* config/sparc/sparc.h, config/v850/v850.h, config/vax/vax.h\n+\t* config/vax/elf.h: Don't define or use INIT_TARGET_OPTABS,\n+\tINIT_SUBTARGET_OPTABS, or any *_LIBCALL macros.\n+\n+\t* config/ia64/hpux.h: Redefine INTEL_EXTENDED_IEEE_FORMAT to 0.\n+\tSet TARGET_INIT_LIBFUNCS and FLOAT_LIB_COMPARE_RETURNS_BOOL here.\n+\t* config/pa/pa-hpux.h: Define LONG_DOUBLE_TYPE_SIZE,\n+\tHPUX_LONG_DOUBLE_LIBRARY, and FLOAT_LIB_COMPARE_RETURNS_BOOL here.\n+\t* config/ia64/hpux_longdouble.h, config/pa/long_double.h: Delete.\n+\n+\t* config/rs6000/xcoff.h: Don't define RS6000_ITRUNC nor RS6000_UITRUNC.\n+\t* config/sparc/sparc.h: Default SUN_CONVERSION_LIBFUNCS and\n+\tSUN_INTEGER_MULTIPLY_64 to 0.\n+\t* config/sparc/sol2.h: Redefine SUN_CONVERSION_LIBFUNCS and\n+\tSUN_INTEGER_MULTIPLY_64 to 1.\n+\t* config/sparc/elf.h: Redefine SUN_CONVERSION_LIBFUNCS and\n+\tSUN_INTEGER_MULTIPLY_64 to 0.\n+\t* config/sparc/lite.h, config/sparc/liteelf.h, config/sparc/sp86x-elf.h:\n+\tDefine US_SOFTWARE_GOFAST.\n+\t* config/vax/vax.h: Default TARGET_ELF to 0.\n+\t* config/vax/elf.h: Redefine TARGET_ELF to 1.\n+\n+\t* config/gofast.h: Don't define any macros here.  Provide one\n+\tstatic function, gofast_maybe_init_libfuncs, which does what\n+\tINIT_GOFAST_LIBFUNCS used to do but only if US_SOFTWARE_GOFAST\n+\tis already defined.  Do not clear negation libfuncs.  Do\n+\tnot mess with HFmode, XFmode, or TFmode libfuncs.\n+\n+\t* config/avr/avr.c (avr_init_once): #if 0 out; mark FIXME.\n+\n 2003-10-01  Kelley Cook  <kelleycook@wideopenwest.com>\n \n \tPR C/12466"}, {"sha": "3f1e0c9460441b73daadf34a98ac14a9cae9f8a1", "filename": "gcc/Makefile.in", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c15c90bbfe4553f5413341d61e8aa29caf2f647f/gcc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c15c90bbfe4553f5413341d61e8aa29caf2f647f/gcc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FMakefile.in?ref=c15c90bbfe4553f5413341d61e8aa29caf2f647f", "patch": "@@ -1564,7 +1564,8 @@ explow.o : explow.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(RTL_H) $(TREE_\n    toplev.h function.h $(GGC_H) $(TM_P_H) gt-explow.h\n optabs.o : optabs.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(RTL_H) $(TREE_H) \\\n    flags.h insn-config.h $(EXPR_H) $(OPTABS_H) libfuncs.h $(RECOG_H) reload.h \\\n-   toplev.h $(GGC_H) real.h $(TM_P_H) except.h gt-optabs.h $(BASIC_BLOCK_H)\n+   toplev.h $(GGC_H) real.h $(TM_P_H) except.h gt-optabs.h $(BASIC_BLOCK_H) \\\n+   target.h\n dbxout.o : dbxout.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(TREE_H) $(RTL_H) \\\n    flags.h $(REGS_H) debug.h $(TM_P_H) $(TARGET_H) function.h langhooks.h \\\n    insn-config.h reload.h gstab.h xcoffout.h output.h dbxout.h toplev.h \\"}, {"sha": "d7d760420a9ab53d659951ec9cd9fc69b555ea2a", "filename": "gcc/builtins.c", "status": "modified", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c15c90bbfe4553f5413341d61e8aa29caf2f647f/gcc%2Fbuiltins.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c15c90bbfe4553f5413341d61e8aa29caf2f647f/gcc%2Fbuiltins.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbuiltins.c?ref=c15c90bbfe4553f5413341d61e8aa29caf2f647f", "patch": "@@ -6540,13 +6540,6 @@ validate_arglist (tree arglist, ...)\n   return res;\n }\n \n-/* Default version of target-specific builtin setup that does nothing.  */\n-\n-void\n-default_init_builtins (void)\n-{\n-}\n-\n /* Default target-specific builtin expander that does nothing.  */\n \n rtx"}, {"sha": "f58e854c2826af7a8577cca889700221da68693f", "filename": "gcc/config.gcc", "status": "modified", "additions": 11, "deletions": 12, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c15c90bbfe4553f5413341d61e8aa29caf2f647f/gcc%2Fconfig.gcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c15c90bbfe4553f5413341d61e8aa29caf2f647f/gcc%2Fconfig.gcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig.gcc?ref=c15c90bbfe4553f5413341d61e8aa29caf2f647f", "patch": "@@ -757,7 +757,7 @@ hppa1.1-*-bsd*)\n \t;;\n hppa1.1-*-hpux10* | hppa2*-*-hpux10*)\n \ttarget_cpu_default=\"MASK_PA_11\"\n-\ttm_file=\"${tm_file} pa/pa32-regs.h pa/long_double.h dbxelf.h pa/som.h pa/pa-hpux.h pa/pa-hpux10.h\"\n+\ttm_file=\"${tm_file} pa/pa32-regs.h dbxelf.h pa/som.h pa/pa-hpux.h pa/pa-hpux10.h\"\n \ttmake_file=\"pa/t-pa pa/t-pa-hpux pa/t-hpux-shlib\"\n \tif test x$enable_threads = x; then\n \t    enable_threads=$have_pthread_h\n@@ -771,7 +771,7 @@ hppa1.1-*-hpux10* | hppa2*-*-hpux10*)\n \tuse_fixproto=yes\n \t;;\n hppa1.0-*-hpux10*)\n-\ttm_file=\"${tm_file} pa/pa32-regs.h pa/long_double.h dbxelf.h pa/som.h pa/pa-hpux.h pa/pa-hpux10.h\"\n+\ttm_file=\"${tm_file} pa/pa32-regs.h dbxelf.h pa/som.h pa/pa-hpux.h pa/pa-hpux10.h\"\n \ttmake_file=\"pa/t-pa pa/t-pa-hpux pa/t-hpux-shlib\"\n \tif test x$enable_threads = x; then\n \t    enable_threads=$have_pthread_h\n@@ -788,11 +788,11 @@ hppa*64*-*-hpux11*)\n \tif test x$gas = xyes\n \tthen\n \t\ttm_file=\"pa/pa64-start.h ${tm_file} dbxelf.h elfos.h  \\\n-\t\t\t pa/pa64-regs.h pa/long_double.h pa/pa-hpux.h \\\n+\t\t\t pa/pa64-regs.h pa/pa-hpux.h \\\n \t\t\t pa/pa-hpux11.h pa/pa-64.h pa/pa64-hpux.h\"\n \telse\n \t\ttm_file=\"pa/pa64-start.h ${tm_file} dbxelf.h pa/elf.h \\\n-\t\t\t pa/pa64-regs.h pa/long_double.h pa/pa-hpux.h \\\n+\t\t\t pa/pa64-regs.h pa/pa-hpux.h \\\n \t\t\t pa/pa-hpux11.h pa/pa-64.h pa/pa64-hpux.h\"\n \tfi\n \tneed_64bit_hwint=yes\n@@ -811,7 +811,7 @@ hppa*64*-*-hpux11*)\n \t;;\n hppa1.1-*-hpux11* | hppa2*-*-hpux11*)\n \ttarget_cpu_default=\"MASK_PA_11\"\n-\ttm_file=\"${tm_file} pa/pa32-regs.h pa/long_double.h dbxelf.h pa/som.h pa/pa-hpux.h pa/pa-hpux11.h\"\n+\ttm_file=\"${tm_file} pa/pa32-regs.h dbxelf.h pa/som.h pa/pa-hpux.h pa/pa-hpux11.h\"\n \ttmake_file=\"pa/t-pa pa/t-pa-hpux pa/t-hpux-shlib\"\n \tcase x${enable_threads} in\n \txyes | xposix )\n@@ -821,7 +821,7 @@ hppa1.1-*-hpux11* | hppa2*-*-hpux11*)\n \tuse_collect2=yes\n \t;;\n hppa1.0-*-hpux11*)\n-\ttm_file=\"${tm_file} pa/pa32-regs.h pa/long_double.h dbxelf.h pa/som.h pa/pa-hpux.h pa/pa-hpux11.h\"\n+\ttm_file=\"${tm_file} pa/pa32-regs.h dbxelf.h pa/som.h pa/pa-hpux.h pa/pa-hpux11.h\"\n \ttmake_file=\"pa/t-pa pa/t-pa-hpux pa/t-hpux-shlib\"\n \tcase x${enable_threads} in\n \txyes | xposix )\n@@ -1201,7 +1201,7 @@ ia64*-*-linux*)\n \tfi\n \t;;\n ia64*-*-hpux*)\n-\ttm_file=\"${tm_file} dbxelf.h elfos.h svr4.h ia64/sysv4.h ia64/hpux.h ia64/hpux_longdouble.h\"\n+\ttm_file=\"${tm_file} dbxelf.h elfos.h svr4.h ia64/sysv4.h ia64/hpux.h\"\n \ttmake_file=\"ia64/t-ia64 ia64/t-hpux\"\n \ttarget_cpu_default=\"MASK_GNU_AS\"\n \tcase x$enable_threads in\n@@ -1978,17 +1978,17 @@ sparc-*-sysv4*)\n \tuse_fixproto=yes\n \t;;\n sparclite-*-coff*)\n-\ttm_file=\"${tm_file} gofast.h sparc/lite.h svr3.h sparc/litecoff.h dbxcoff.h libgloss.h\"\n+\ttm_file=\"${tm_file} sparc/lite.h svr3.h sparc/litecoff.h dbxcoff.h libgloss.h\"\n \ttmake_file=sparc/t-sparclite\n \t;;\n sparclite-*-elf*)\n-\ttm_file=\"${tm_file} dbxelf.h elfos.h svr4.h sparc/sysv4.h sol2.h sparc/sol2.h sparc/elf.h gofast.h sparc/liteelf.h\"\n+\ttm_file=\"${tm_file} dbxelf.h elfos.h svr4.h sparc/sysv4.h sol2.h sparc/sol2.h sparc/elf.h sparc/liteelf.h\"\n \ttmake_file=\"sparc/t-sparclite sparc/t-crtfm\"\n         extra_parts=\"crtbegin.o crtend.o\"\n \tuse_fixproto=yes\n \t;;\n sparc86x-*-elf*)\n-\ttm_file=\"${tm_file} dbxelf.h elfos.h svr4.h sparc/sysv4.h sol2.h sparc/sol2.h sparc/elf.h gofast.h sparc/sp86x-elf.h\"\n+\ttm_file=\"${tm_file} dbxelf.h elfos.h svr4.h sparc/sysv4.h sol2.h sparc/sol2.h sparc/elf.h sparc/sp86x-elf.h\"\n \ttmake_file=\"sparc/t-sp86x sparc/t-crtfm\"\n         extra_parts=\"crtbegin.o crtend.o\"\n \tuse_fixproto=yes\n@@ -2576,8 +2576,7 @@ fi\n \t\tesac\n \t\tif test \"x$enable_gofast\" = xyes\n \t\tthen\n-\t\t\ttm_defines=\"INIT_SUBTARGET_OPTABS=INIT_GOFAST_OPTABS $tm_defines\"\n-\t\t\ttm_file=\"gofast.h $tm_file\"\n+\t\t\ttm_defines=\"US_SOFTWARE_GOFAST $tm_defines\"\n \t\t\ttmake_file=\"mips/t-gofast $tmake_file\"\n \t\telse\n \t\t\ttmake_file=\"mips/t-mips $tmake_file\""}, {"sha": "2340358582169e778ba129f6cf8ed3c2a8d7dd3b", "filename": "gcc/config/alpha/alpha.c", "status": "modified", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c15c90bbfe4553f5413341d61e8aa29caf2f647f/gcc%2Fconfig%2Falpha%2Falpha.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c15c90bbfe4553f5413341d61e8aa29caf2f647f/gcc%2Fconfig%2Falpha%2Falpha.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Falpha.c?ref=c15c90bbfe4553f5413341d61e8aa29caf2f647f", "patch": "@@ -10015,6 +10015,35 @@ unicosmk_need_dex (rtx x ATTRIBUTE_UNUSED)\n \n #endif /* TARGET_ABI_UNICOSMK */\n \n+static void\n+alpha_init_libfuncs (void)\n+{\n+  if (TARGET_ABI_UNICOSMK)\n+    {\n+      /* Prevent gcc from generating calls to __divsi3.  */\n+      set_optab_libfunc (sdiv_optab, SImode, 0);\n+      set_optab_libfunc (udiv_optab, SImode, 0);\n+\n+      /* Use the functions provided by the system library\n+\t for DImode integer division.  */\n+      set_optab_libfunc (sdiv_optab, DImode, \"$sldiv\");\n+      set_optab_libfunc (udiv_optab, DImode, \"$uldiv\");\n+    }\n+  else if (TARGET_ABI_OPEN_VMS)\n+    {\n+      /* Use the VMS runtime library functions for division and\n+\t remainder.  */\n+      set_optab_libfunc (sdiv_optab, SImode, \"OTS$DIV_I\");\n+      set_optab_libfunc (sdiv_optab, DImode, \"OTS$DIV_L\");\n+      set_optab_libfunc (udiv_optab, SImode, \"OTS$DIV_UI\");\n+      set_optab_libfunc (udiv_optab, DImode, \"OTS$DIV_UL\");\n+      set_optab_libfunc (smod_optab, SImode, \"OTS$REM_I\");\n+      set_optab_libfunc (smod_optab, DImode, \"OTS$REM_L\");\n+      set_optab_libfunc (umod_optab, SImode, \"OTS$REM_UI\");\n+      set_optab_libfunc (umod_optab, DImode, \"OTS$REM_UL\");\n+    }\n+}\n+\n \f\n /* Initialize the GCC target structure.  */\n #if TARGET_ABI_OPEN_VMS\n@@ -10062,6 +10091,9 @@ unicosmk_need_dex (rtx x ATTRIBUTE_UNUSED)\n #undef TARGET_ASM_FUNCTION_END_PROLOGUE\n #define TARGET_ASM_FUNCTION_END_PROLOGUE alpha_output_function_end_prologue\n \n+#undef TARGET_INIT_LIBFUNCS\n+#define TARGET_INIT_LIBFUNCS alpha_init_libfuncs\n+\n #if TARGET_ABI_UNICOSMK\n #undef TARGET_ASM_FILE_START\n #define TARGET_ASM_FILE_START unicosmk_file_start"}, {"sha": "a4789b0483c0baba4a0f7e9b1246daea87d0caf4", "filename": "gcc/config/alpha/unicosmk.h", "status": "modified", "additions": 0, "deletions": 18, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c15c90bbfe4553f5413341d61e8aa29caf2f647f/gcc%2Fconfig%2Falpha%2Funicosmk.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c15c90bbfe4553f5413341d61e8aa29caf2f647f/gcc%2Fconfig%2Falpha%2Funicosmk.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Funicosmk.h?ref=c15c90bbfe4553f5413341d61e8aa29caf2f647f", "patch": "@@ -508,24 +508,6 @@ ssib_section ()\t\t\t\\\n #undef DWARF2_DEBUGGING_INFO\n #undef DWARF2_UNWIND_INFO\n #undef INCOMING_RETURN_ADDR_RTX\n-\n-\n-/* We use the functions provided by the system library for integer\n-   division.  */\n-\n-#undef UDIVDI3_LIBCALL\n-#undef DIVDI3_LIBCALL\n-#define UDIVDI3_LIBCALL\t\"$uldiv\"\n-#define DIVDI3_LIBCALL \"$sldiv\"\n-\n-/* This is necessary to prevent gcc from generating calls to __divsi3.  */\n-\n-#define INIT_TARGET_OPTABS\t\t\t\t\t\\\n-  do {\t\t\t\t\t\t\t\t\\\n-    sdiv_optab->handlers[(int) SImode].libfunc = NULL_RTX;\t\\\n-    udiv_optab->handlers[(int) SImode].libfunc = NULL_RTX;\t\\\n-  } while (0)\n-\n #undef ASM_OUTPUT_SOURCE_LINE\n \n /* We don't need a start file.  */"}, {"sha": "3bb9b590af3ad4ab486cbd286ae3a25ec63c998f", "filename": "gcc/config/alpha/vms.h", "status": "modified", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c15c90bbfe4553f5413341d61e8aa29caf2f647f/gcc%2Fconfig%2Falpha%2Fvms.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c15c90bbfe4553f5413341d61e8aa29caf2f647f/gcc%2Fconfig%2Falpha%2Fvms.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Fvms.h?ref=c15c90bbfe4553f5413341d61e8aa29caf2f647f", "patch": "@@ -470,16 +470,6 @@ do {\t\t\t\t\t\t\t\t\t\\\n #undef LIB_SPEC\n #define LIB_SPEC \"-lc\"\n \n-/* Define the names of the division and modulus functions.  */\n-#define DIVSI3_LIBCALL \"OTS$DIV_I\"\n-#define DIVDI3_LIBCALL \"OTS$DIV_L\"\n-#define UDIVSI3_LIBCALL \"OTS$DIV_UI\"\n-#define UDIVDI3_LIBCALL \"OTS$DIV_UL\"\n-#define MODSI3_LIBCALL \"OTS$REM_I\"\n-#define MODDI3_LIBCALL \"OTS$REM_L\"\n-#define UMODSI3_LIBCALL \"OTS$REM_UI\"\n-#define UMODDI3_LIBCALL \"OTS$REM_UL\"\n-\n #define NAME__MAIN \"__gccmain\"\n #define SYMBOL__MAIN __gccmain\n "}, {"sha": "9dd4daaa68989e7c4c7f0a862e77f1f110269f91", "filename": "gcc/config/avr/avr.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c15c90bbfe4553f5413341d61e8aa29caf2f647f/gcc%2Fconfig%2Favr%2Favr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c15c90bbfe4553f5413341d61e8aa29caf2f647f/gcc%2Fconfig%2Favr%2Favr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Favr%2Favr.c?ref=c15c90bbfe4553f5413341d61e8aa29caf2f647f", "patch": "@@ -276,7 +276,7 @@ avr_override_options ()\n     avr_case_values_threshold = (!AVR_MEGA || TARGET_CALL_PROLOGUES) ? 8 : 17;\n }\n \n-\n+#if 0 /* Does not play nice with GC.  FIXME. */\n /* Initialize TMP_REG_RTX and ZERO_REG_RTX */\n void\n avr_init_once ()\n@@ -296,6 +296,7 @@ avr_init_once ()\n   PUT_MODE (ldi_reg_rtx, QImode);\n   XINT (ldi_reg_rtx, 0) = LDI_REG_REGNO;\n }\n+#endif\n \n /*  return register class from register number */\n "}, {"sha": "735e75d3b638741728eb12bed8218529acf33dcf", "filename": "gcc/config/avr/avr.h", "status": "modified", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c15c90bbfe4553f5413341d61e8aa29caf2f647f/gcc%2Fconfig%2Favr%2Favr.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c15c90bbfe4553f5413341d61e8aa29caf2f647f/gcc%2Fconfig%2Favr%2Favr.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Favr%2Favr.h?ref=c15c90bbfe4553f5413341d61e8aa29caf2f647f", "patch": "@@ -2476,15 +2476,6 @@ extern int avr_case_values_threshold;\n #define OUT_AS2(a,b,c) output_asm_insn (AS2(a,b,c), operands)\n #define CR_TAB \"\\n\\t\"\n \n-/* Define this macro as a C statement that declares additional library\n-   routines renames existing ones. `init_optabs' calls this macro\n-   after initializing all the normal library routines.  */\n-\n-#define INIT_TARGET_OPTABS\t\t\t\t\\\n-{\t\t\t\t\t\t\t\\\n-  avr_init_once ();\t\t\t\t\t\\\n-}\n-\n /* Temporary register r0 */\n #define TMP_REGNO 0\n "}, {"sha": "ef5860252bf1d03d112f9290f81d49791264a739", "filename": "gcc/config/c4x/c4x.c", "status": "modified", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c15c90bbfe4553f5413341d61e8aa29caf2f647f/gcc%2Fconfig%2Fc4x%2Fc4x.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c15c90bbfe4553f5413341d61e8aa29caf2f647f/gcc%2Fconfig%2Fc4x%2Fc4x.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fc4x%2Fc4x.c?ref=c15c90bbfe4553f5413341d61e8aa29caf2f647f", "patch": "@@ -199,6 +199,7 @@ static int c4x_adjust_cost (rtx, rtx, rtx, int);\n static void c4x_globalize_label (FILE *, const char *);\n static bool c4x_rtx_costs (rtx, int, int, int *);\n static int c4x_address_cost (rtx);\n+static void c4x_init_libfuncs (void);\n \f\n /* Initialize the GCC target structure.  */\n #undef TARGET_ASM_BYTE_OP\n@@ -240,6 +241,9 @@ static int c4x_address_cost (rtx);\n #undef TARGET_MACHINE_DEPENDENT_REORG\n #define TARGET_MACHINE_DEPENDENT_REORG c4x_reorg\n \n+#undef TARGET_INIT_LIBFUNCS\n+#define TARGET_INIT_LIBFUNCS c4x_init_libfuncs\n+\n struct gcc_target targetm = TARGET_INITIALIZER;\n \f\n /* Override command line options.\n@@ -4838,6 +4842,35 @@ c4x_expand_builtin (tree exp, rtx target,\n   return NULL_RTX;\n }\n \n+static void\n+c4x_init_libfuncs (void)\n+{\n+  set_optab_libfunc (smul_optab, QImode, \"__mulqi3\");\n+  set_optab_libfunc (sdiv_optab, QImode, \"__divqi3\");\n+  set_optab_libfunc (udiv_optab, QImode, \"__udivqi3\");\n+  set_optab_libfunc (smod_optab, QImode, \"__modqi3\");\n+  set_optab_libfunc (umod_optab, QImode, \"__umodqi3\");\n+  set_optab_libfunc (sdiv_optab, QFmode, \"__divqf3\");\n+  set_optab_libfunc (smul_optab, HFmode, \"__mulhf3\");\n+  set_optab_libfunc (sdiv_optab, HFmode, \"__divhf3\");\n+  set_optab_libfunc (smul_optab, HImode, \"__mulhi3\");\n+  set_optab_libfunc (sdiv_optab, HImode, \"__divhi3\");\n+  set_optab_libfunc (udiv_optab, HImode, \"__udivhi3\");\n+  set_optab_libfunc (smod_optab, HImode, \"__modhi3\");\n+  set_optab_libfunc (umod_optab, HImode, \"__umodhi3\");\n+  set_optab_libfunc (ffs_optab,  QImode, \"__ffs\");\n+  smulhi3_libfunc           = init_one_libfunc (\"__smulhi3_high\");\n+  umulhi3_libfunc           = init_one_libfunc (\"__umulhi3_high\");\n+  fix_truncqfhi2_libfunc    = init_one_libfunc (\"__fix_truncqfhi2\");\n+  fixuns_truncqfhi2_libfunc = init_one_libfunc (\"__ufix_truncqfhi2\");\n+  fix_trunchfhi2_libfunc    = init_one_libfunc (\"__fix_trunchfhi2\");\n+  fixuns_trunchfhi2_libfunc = init_one_libfunc (\"__ufix_trunchfhi2\");\n+  floathiqf2_libfunc        = init_one_libfunc (\"__floathiqf2\");\n+  floatunshiqf2_libfunc     = init_one_libfunc (\"__ufloathiqf2\");\n+  floathihf2_libfunc        = init_one_libfunc (\"__floathihf2\");\n+  floatunshihf2_libfunc     = init_one_libfunc (\"__ufloathihf2\");\n+}\n+\n static void\n c4x_asm_named_section (const char *name, unsigned int flags ATTRIBUTE_UNUSED)\n {"}, {"sha": "1988ce6442ac4a6aa8791b3d16e2694806e0fa75", "filename": "gcc/config/c4x/c4x.h", "status": "modified", "additions": 0, "deletions": 83, "changes": 83, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c15c90bbfe4553f5413341d61e8aa29caf2f647f/gcc%2Fconfig%2Fc4x%2Fc4x.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c15c90bbfe4553f5413341d61e8aa29caf2f647f/gcc%2Fconfig%2Fc4x%2Fc4x.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fc4x%2Fc4x.h?ref=c15c90bbfe4553f5413341d61e8aa29caf2f647f", "patch": "@@ -1195,89 +1195,6 @@ CUMULATIVE_ARGS;\n \n /* Implicit Calls to Library Routines.  */\n \n-#define MULQI3_LIBCALL      \"__mulqi3\"\n-#define DIVQI3_LIBCALL      \"__divqi3\"\n-#define UDIVQI3_LIBCALL     \"__udivqi3\"\n-#define MODQI3_LIBCALL      \"__modqi3\"\n-#define UMODQI3_LIBCALL     \"__umodqi3\"\n-\n-#define DIVQF3_LIBCALL      \"__divqf3\"\n-\n-#define MULHF3_LIBCALL      \"__mulhf3\"\n-#define DIVHF3_LIBCALL      \"__divhf3\"\n-\n-#define MULHI3_LIBCALL      \"__mulhi3\"\n-#define SMULHI3_LIBCALL     \"__smulhi3_high\"\n-#define UMULHI3_LIBCALL     \"__umulhi3_high\"\n-#define DIVHI3_LIBCALL      \"__divhi3\"\n-#define UDIVHI3_LIBCALL     \"__udivhi3\"\n-#define MODHI3_LIBCALL      \"__modhi3\"\n-#define UMODHI3_LIBCALL     \"__umodhi3\"\n-\n-#define FLOATHIQF2_LIBCALL  \"__floathiqf2\"\n-#define FLOATUNSHIQF2_LIBCALL  \"__ufloathiqf2\"\n-#define FIX_TRUNCQFHI2_LIBCALL \"__fix_truncqfhi2\"\n-#define FIXUNS_TRUNCQFHI2_LIBCALL \"__ufix_truncqfhi2\"\n-\n-#define FLOATHIHF2_LIBCALL  \"__floathihf2\"\n-#define FLOATUNSHIHF2_LIBCALL  \"__ufloathihf2\"\n-#define FIX_TRUNCHFHI2_LIBCALL \"__fix_trunchfhi2\"\n-#define FIXUNS_TRUNCHFHI2_LIBCALL \"__ufix_trunchfhi2\"\n-\n-#define FFS_LIBCALL\t    \"__ffs\"\n-\n-#define INIT_TARGET_OPTABS \\\n-  do { \\\n-    smul_optab->handlers[(int) QImode].libfunc\t\t\\\n-      = init_one_libfunc (MULQI3_LIBCALL);\t\t\\\n-    sdiv_optab->handlers[(int) QImode].libfunc\t\t\\\n-      = init_one_libfunc (DIVQI3_LIBCALL);\t\t\\\n-    udiv_optab->handlers[(int) QImode].libfunc\t\t\\\n-      = init_one_libfunc (UDIVQI3_LIBCALL);\t\t\\\n-    smod_optab->handlers[(int) QImode].libfunc\t\t\\\n-      = init_one_libfunc (MODQI3_LIBCALL);\t\t\\\n-    umod_optab->handlers[(int) QImode].libfunc\t\t\\\n-      = init_one_libfunc (UMODQI3_LIBCALL);\t\t\\\n-    sdiv_optab->handlers[(int) QFmode].libfunc\t\t\\\n-      = init_one_libfunc (DIVQF3_LIBCALL);\t\t\\\n-    smul_optab->handlers[(int) HFmode].libfunc\t\t\\\n-      = init_one_libfunc (MULHF3_LIBCALL);\t\t\\\n-    sdiv_optab->handlers[(int) HFmode].libfunc\t\t\\\n-      = init_one_libfunc (DIVHF3_LIBCALL);\t\t\\\n-    smul_optab->handlers[(int) HImode].libfunc\t\t\\\n-      = init_one_libfunc (MULHI3_LIBCALL);\t\t\\\n-    sdiv_optab->handlers[(int) HImode].libfunc\t\t\\\n-      = init_one_libfunc (DIVHI3_LIBCALL);\t\t\\\n-    udiv_optab->handlers[(int) HImode].libfunc\t\t\\\n-      = init_one_libfunc (UDIVHI3_LIBCALL);\t\t\\\n-    smod_optab->handlers[(int) HImode].libfunc\t\t\\\n-      = init_one_libfunc (MODHI3_LIBCALL);\t\t\\\n-    umod_optab->handlers[(int) HImode].libfunc\t\t\\\n-      = init_one_libfunc (UMODHI3_LIBCALL);\t\t\\\n-    ffs_optab->handlers[(int) QImode].libfunc\t\t\\\n-      = init_one_libfunc (FFS_LIBCALL);\t\t\t\\\n-    smulhi3_libfunc\t\t\t\t\t\\\n-      = init_one_libfunc(SMULHI3_LIBCALL);\t\t\\\n-    umulhi3_libfunc\t\t\t\t\t\\\n-      = init_one_libfunc(UMULHI3_LIBCALL);\t\t\\\n-    fix_truncqfhi2_libfunc\t\t\t\t\\\n-      = init_one_libfunc(FIX_TRUNCQFHI2_LIBCALL);\t\\\n-    fixuns_truncqfhi2_libfunc\t\t\t\t\\\n-      = init_one_libfunc(FIXUNS_TRUNCQFHI2_LIBCALL);\t\\\n-    fix_trunchfhi2_libfunc\t\t\t\t\\\n-      = init_one_libfunc(FIX_TRUNCHFHI2_LIBCALL);\t\\\n-    fixuns_trunchfhi2_libfunc\t\t\t\t\\\n-      = init_one_libfunc(FIXUNS_TRUNCHFHI2_LIBCALL);\t\\\n-    floathiqf2_libfunc\t\t\t\t\t\\\n-      = init_one_libfunc(FLOATHIQF2_LIBCALL);\t\t\\\n-    floatunshiqf2_libfunc\t\t\t\t\\\n-      = init_one_libfunc(FLOATUNSHIQF2_LIBCALL);\t\\\n-    floathihf2_libfunc\t\t\t\t\t\\\n-      = init_one_libfunc(FLOATHIHF2_LIBCALL);\t\t\\\n-    floatunshihf2_libfunc\t\t\t\t\\\n-      = init_one_libfunc(FLOATUNSHIHF2_LIBCALL);\t\\\n-  } while (0)\n-\n #define TARGET_MEM_FUNCTIONS\n \n /* CC_NOOVmode should be used when the first operand is a PLUS, MINUS, NEG"}, {"sha": "9213b1ef84c5cc234f14a98cdc391fe8e11ca8ca", "filename": "gcc/config/cris/cris.c", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c15c90bbfe4553f5413341d61e8aa29caf2f647f/gcc%2Fconfig%2Fcris%2Fcris.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c15c90bbfe4553f5413341d61e8aa29caf2f647f/gcc%2Fconfig%2Fcris%2Fcris.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fcris%2Fcris.c?ref=c15c90bbfe4553f5413341d61e8aa29caf2f647f", "patch": "@@ -43,6 +43,7 @@ Boston, MA 02111-1307, USA.  */\n #include \"target.h\"\n #include \"target-def.h\"\n #include \"ggc.h\"\n+#include \"optabs.h\"\n \n /* Usable when we have an amount to add or subtract, and want the\n    optimal size of the insn.  */\n@@ -104,6 +105,7 @@ static void cris_asm_output_mi_thunk\n   (FILE *, tree, HOST_WIDE_INT, HOST_WIDE_INT, tree);\n \n static void cris_file_start (void);\n+static void cris_init_libfuncs (void);\n \n static bool cris_rtx_costs (rtx, int, int, int *);\n static int cris_address_cost (rtx);\n@@ -165,6 +167,9 @@ int cris_cpu_version = CRIS_DEFAULT_CPU_VERSION;\n #undef TARGET_ASM_FILE_START\n #define TARGET_ASM_FILE_START cris_file_start\n \n+#undef TARGET_INIT_LIBFUNCS\n+#define TARGET_INIT_LIBFUNCS cris_init_libfuncs\n+\n #undef TARGET_RTX_COSTS\n #define TARGET_RTX_COSTS cris_rtx_costs\n #undef TARGET_ADDRESS_COST\n@@ -2720,6 +2725,17 @@ cris_file_start (void)\n   default_file_start ();\n }\n \n+/* Rename the function calls for integer multiply and divide.  */\n+static void\n+cris_init_libfuncs ()\n+{\n+  set_optab_libfunc (smul_optab, SImode, \"__Mul\");\n+  set_optab_libfunc (sdiv_optab, SImode, \"__Div\");\n+  set_optab_libfunc (udiv_optab, SImode, \"__Udiv\");\n+  set_optab_libfunc (smod_optab, SImode, \"__Mod\");\n+  set_optab_libfunc (umod_optab, SImode, \"__Umod\");\n+}\n+\n /* The EXPAND_BUILTIN_VA_ARG worker.  This is modified from the\n    \"standard\" implementation of va_arg: read the value from the current\n    address and increment by the size of one or two registers.  The"}, {"sha": "0dc57f4a1418733ce75397927f010bb15211d9bc", "filename": "gcc/config/cris/cris.h", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c15c90bbfe4553f5413341d61e8aa29caf2f647f/gcc%2Fconfig%2Fcris%2Fcris.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c15c90bbfe4553f5413341d61e8aa29caf2f647f/gcc%2Fconfig%2Fcris%2Fcris.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fcris%2Fcris.h?ref=c15c90bbfe4553f5413341d61e8aa29caf2f647f", "patch": "@@ -1097,12 +1097,6 @@ struct cum_args {int regs;};\n \n /* Node: Library Calls */\n \n-#define MULSI3_LIBCALL \"__Mul\"\n-#define DIVSI3_LIBCALL \"__Div\"\n-#define UDIVSI3_LIBCALL \"__Udiv\"\n-#define MODSI3_LIBCALL \"__Mod\"\n-#define UMODSI3_LIBCALL \"__Umod\"\n-\n /* If you change this, you have to check whatever libraries and systems\n    that use it.  */\n #define TARGET_EDOM 33"}, {"sha": "09d6d9703df343dba2c98a36254a64fea886d3d4", "filename": "gcc/config/frv/frv.c", "status": "modified", "additions": 49, "deletions": 0, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c15c90bbfe4553f5413341d61e8aa29caf2f647f/gcc%2Fconfig%2Ffrv%2Ffrv.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c15c90bbfe4553f5413341d61e8aa29caf2f647f/gcc%2Fconfig%2Ffrv%2Ffrv.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Ffrv%2Ffrv.c?ref=c15c90bbfe4553f5413341d61e8aa29caf2f647f", "patch": "@@ -40,6 +40,7 @@ Boston, MA 02111-1307, USA.  */\n #include \"except.h\"\n #include \"function.h\"\n #include \"optabs.h\"\n+#include \"libfuncs.h\"\n #include \"toplev.h\"\n #include \"basic-block.h\"\n #include \"tm_p.h\"\n@@ -277,6 +278,7 @@ static void frv_function_epilogue\t\tPARAMS ((FILE *, HOST_WIDE_INT));\n static bool frv_assemble_integer\t\tPARAMS ((rtx, unsigned, int));\n static void frv_init_builtins\t\t\tPARAMS ((void));\n static rtx frv_expand_builtin\t\t\tPARAMS ((tree, rtx, rtx, enum machine_mode, int));\n+static void frv_init_libfuncs\t\t\tPARAMS ((void));\n static bool frv_in_small_data_p\t\t\tPARAMS ((tree));\n static void frv_asm_output_mi_thunk\n   PARAMS ((FILE *, tree, HOST_WIDE_INT, HOST_WIDE_INT, tree));\n@@ -295,6 +297,8 @@ static void frv_asm_out_destructor\t\tPARAMS ((rtx, int));\n #define TARGET_INIT_BUILTINS frv_init_builtins\n #undef TARGET_EXPAND_BUILTIN\n #define TARGET_EXPAND_BUILTIN frv_expand_builtin\n+#undef TARGET_INIT_LIBFUNCS\n+#define TARGET_INIT_LIBFUNCS frv_init_libfuncs\n #undef TARGET_IN_SMALL_DATA_P\n #define TARGET_IN_SMALL_DATA_P frv_in_small_data_p\n #undef TARGET_RTX_COSTS\n@@ -9083,6 +9087,51 @@ frv_init_builtins ()\n #undef TRINARY\n }\n \n+/* Set the names for various arithmetic operations according to the\n+   FRV ABI.  */\n+static void\n+frv_init_libfuncs (void)\n+{\n+  set_optab_libfunc (smod_optab,     SImode, \"__modi\");\n+  set_optab_libfunc (umod_optab,     SImode, \"__umodi\");\n+\n+  set_optab_libfunc (add_optab,      DImode, \"__addll\");\n+  set_optab_libfunc (sub_optab,      DImode, \"__subll\");\n+  set_optab_libfunc (smul_optab,     DImode, \"__mulll\");\n+  set_optab_libfunc (sdiv_optab,     DImode, \"__divll\");\n+  set_optab_libfunc (smod_optab,     DImode, \"__modll\");\n+  set_optab_libfunc (umod_optab,     DImode, \"__umodll\");\n+  set_optab_libfunc (and_optab,      DImode, \"__andll\");\n+  set_optab_libfunc (ior_optab,      DImode, \"__orll\");\n+  set_optab_libfunc (xor_optab,      DImode, \"__xorll\");\n+  set_optab_libfunc (one_cmpl_optab, DImode, \"__notll\");\n+\n+  set_optab_libfunc (add_optab,      SFmode, \"__addf\");\n+  set_optab_libfunc (sub_optab,      SFmode, \"__subf\");\n+  set_optab_libfunc (smul_optab,     SFmode, \"__mulf\");\n+  set_optab_libfunc (sdiv_optab,     SFmode, \"__divf\");\n+\n+  set_optab_libfunc (add_optab,      DFmode, \"__addd\");\n+  set_optab_libfunc (sub_optab,      DFmode, \"__subd\");\n+  set_optab_libfunc (smul_optab,     DFmode, \"__muld\");\n+  set_optab_libfunc (sdiv_optab,     DFmode, \"__divd\");\n+\n+  fixsfsi_libfunc     = init_one_libfunc (\"__ftoi\");\n+  fixunssfsi_libfunc  = init_one_libfunc (\"__ftoui\");\n+  fixsfdi_libfunc     = init_one_libfunc (\"__ftoll\");\n+  fixunssfdi_libfunc  = init_one_libfunc (\"__ftoull\");\n+  fixdfsi_libfunc     = init_one_libfunc (\"__dtoi\");\n+  fixunsdfsi_libfunc  = init_one_libfunc (\"__dtoui\");\n+  fixdfdi_libfunc     = init_one_libfunc (\"__dtoll\");\n+  fixunsdfdi_libfunc  = init_one_libfunc (\"__dtoull\");\n+  floatsisf_libfunc   = init_one_libfunc (\"__itof\");\n+  floatdisf_libfunc   = init_one_libfunc (\"__lltof\");\n+  floatsidf_libfunc   = init_one_libfunc (\"__itod\");\n+  floatdidf_libfunc   = init_one_libfunc (\"__lltod\");\n+  extendsfdf2_libfunc = init_one_libfunc (\"__ftod\");\n+  truncdfsf2_libfunc  = init_one_libfunc (\"__dtof\");\n+}\n+\n /* Convert an integer constant to an accumulator register.  ICODE is the\n    code of the target instruction, OPNUM is the number of the\n    accumulator operand and OPVAL is the constant integer.  Try both"}, {"sha": "cd8019feba353a94bd6e44dbedbef12907814dc1", "filename": "gcc/config/frv/frv.h", "status": "modified", "additions": 0, "deletions": 95, "changes": 95, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c15c90bbfe4553f5413341d61e8aa29caf2f647f/gcc%2Fconfig%2Ffrv%2Ffrv.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c15c90bbfe4553f5413341d61e8aa29caf2f647f/gcc%2Fconfig%2Ffrv%2Ffrv.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Ffrv%2Ffrv.h?ref=c15c90bbfe4553f5413341d61e8aa29caf2f647f", "patch": "@@ -2223,101 +2223,6 @@ __asm__(\"\\n\"\t\t\t\t\t\t\t\t\\\n \t\"\\tsethi #0, gr7\\n\"\t\t\t\t\t\t\\\n \t\"\\tjmpl @(gr0,gr6)\\n\");\n \n-\f\n-/* Implicit Calls to Library Routines.  */\n-\n-/* A C string constant giving the name of the function to call for the\n-   remainder in division of one signed full-word by another.  If you do not\n-   define this macro, the default name is used, which is `__modsi3', a function\n-   defined in `libgcc.a'.  */\n-#define MODSI3_LIBCALL \"__modi\"\n-\n-/* A C string constant giving the name of the function to call for the\n-   remainder in division of one unsigned full-word by another.  If you do not\n-   define this macro, the default name is used, which is `__umodsi3', a\n-   function defined in `libgcc.a'.  */\n-#define UMODSI3_LIBCALL \"__umodi\"\n-\n-/* A C string constant giving the name of the function to call for\n-   multiplication of one signed double-word by another.  If you do not define\n-   this macro, the default name is used, which is `__muldi3', a function\n-   defined in `libgcc.a'.  */\n-#define MULDI3_LIBCALL \"__mulll\"\n-\n-/* A C string constant giving the name of the function to call for division of\n-   one signed double-word by another.  If you do not define this macro, the\n-   default name is used, which is `__divdi3', a function defined in `libgcc.a'.  */\n-#define DIVDI3_LIBCALL \"__divll\"\n-\n-/* A C string constant giving the name of the function to call for division of\n-   one unsigned full-word by another.  If you do not define this macro, the\n-   default name is used, which is `__udivdi3', a function defined in\n-   `libgcc.a'.  */\n-#define UDIVDI3_LIBCALL \"__udivll\"\n-\n-/* A C string constant giving the name of the function to call for the\n-   remainder in division of one signed double-word by another.  If you do not\n-   define this macro, the default name is used, which is `__moddi3', a function\n-   defined in `libgcc.a'.  */\n-#define MODDI3_LIBCALL \"__modll\"\n-\n-/* A C string constant giving the name of the function to call for the\n-   remainder in division of one unsigned full-word by another.  If you do not\n-   define this macro, the default name is used, which is `__umoddi3', a\n-   function defined in `libgcc.a'.  */\n-#define UMODDI3_LIBCALL \"__umodll\"\n-\n-/* Define this macro as a C statement that declares additional library routines\n-   renames existing ones. `init_optabs' calls this macro after initializing all\n-   the normal library routines.  */\n-#define INIT_TARGET_OPTABS \t\t\t\t\t\\\n-  do\t\t\t\t\t\t\t\t\\\n-    {\t\t\t\t\t\t\t\t\\\n-      add_optab->handlers [(int) DImode].libfunc\t\t\\\n-\t= init_one_libfunc (\"__addll\");\t\t\t\t\\\n-      sub_optab->handlers [(int) DImode].libfunc\t\t\\\n-\t= init_one_libfunc (\"__subll\");\t\t\t\t\\\n-      and_optab->handlers [(int) DImode].libfunc\t\t\\\n-\t= init_one_libfunc (\"__andll\");\t\t\t\t\\\n-      ior_optab->handlers [(int) DImode].libfunc\t\t\\\n-\t= init_one_libfunc (\"__orll\");\t\t\t\t\\\n-      xor_optab->handlers [(int) DImode].libfunc\t\t\\\n-\t= init_one_libfunc (\"__xorll\");\t\t\t\t\\\n-      one_cmpl_optab->handlers [(int) DImode].libfunc\t\t\\\n-\t= init_one_libfunc (\"__notll\");\t\t\t\t\\\n-      add_optab->handlers [(int) SFmode].libfunc\t\t\\\n-\t= init_one_libfunc (\"__addf\");\t\t\t\t\\\n-      sub_optab->handlers [(int) SFmode].libfunc\t\t\\\n-\t= init_one_libfunc (\"__subf\");\t\t\t\t\\\n-      smul_optab->handlers [(int) SFmode].libfunc\t\t\\\n-\t= init_one_libfunc (\"__mulf\");\t\t\t\t\\\n-      sdiv_optab->handlers [(int) SFmode].libfunc\t\t\\\n-\t= init_one_libfunc (\"__divf\");\t\t\t\t\\\n-      add_optab->handlers [(int) DFmode].libfunc\t\t\\\n-\t= init_one_libfunc (\"__addd\");\t\t\t\t\\\n-      sub_optab->handlers [(int) DFmode].libfunc\t\t\\\n-\t= init_one_libfunc (\"__subd\");\t\t\t\t\\\n-      smul_optab->handlers [(int) DFmode].libfunc\t\t\\\n-\t= init_one_libfunc (\"__muld\");\t\t\t\t\\\n-      sdiv_optab->handlers [(int) DFmode].libfunc\t\t\\\n-\t= init_one_libfunc (\"__divd\");\t\t\t\t\\\n-      fixsfsi_libfunc = init_one_libfunc (\"__ftoi\");\t\t\\\n-      fixunssfsi_libfunc = init_one_libfunc (\"__ftoui\");\t\\\n-      fixsfdi_libfunc = init_one_libfunc (\"__ftoll\");\t\t\\\n-      fixunssfdi_libfunc = init_one_libfunc (\"__ftoull\");\t\\\n-      fixdfsi_libfunc = init_one_libfunc (\"__dtoi\");\t\t\\\n-      fixunsdfsi_libfunc = init_one_libfunc (\"__dtoui\");\t\\\n-      fixdfdi_libfunc = init_one_libfunc (\"__dtoll\");\t\t\\\n-      fixunsdfdi_libfunc = init_one_libfunc (\"__dtoull\");\t\\\n-      floatsisf_libfunc = init_one_libfunc (\"__itof\");\t\t\\\n-      floatdisf_libfunc = init_one_libfunc (\"__lltof\");\t\t\\\n-      floatsidf_libfunc = init_one_libfunc (\"__itod\");\t\t\\\n-      floatdidf_libfunc = init_one_libfunc (\"__lltod\");\t\t\\\n-      extendsfdf2_libfunc = init_one_libfunc (\"__ftod\");\t\\\n-      truncdfsf2_libfunc = init_one_libfunc (\"__dtof\");\t\t\\\n-    }\t\t\t\t\t\t\t\t\\\n-  while (0)\n-\n \f\n /* Addressing Modes.  */\n "}, {"sha": "74a22c779b882d66a6591437bd0729485a6a25c6", "filename": "gcc/config/gofast.h", "status": "modified", "additions": 54, "deletions": 83, "changes": 137, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c15c90bbfe4553f5413341d61e8aa29caf2f647f/gcc%2Fconfig%2Fgofast.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c15c90bbfe4553f5413341d61e8aa29caf2f647f/gcc%2Fconfig%2Fgofast.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fgofast.h?ref=c15c90bbfe4553f5413341d61e8aa29caf2f647f", "patch": "@@ -1,5 +1,5 @@\n /* US Software GOFAST floating point library support.\n-   Copyright (C) 1994, 1998, 1999, 2002 Free Software Foundation, Inc.\n+   Copyright (C) 1994, 1998, 1999, 2002, 2003 Free Software Foundation, Inc.\n \n This file is part of GCC.\n \n@@ -18,91 +18,62 @@ along with GCC; see the file COPYING.  If not, write to\n the Free Software Foundation, 59 Temple Place - Suite 330,\n Boston, MA 02111-1307, USA.  */\n \n-/* This is used by fp-bit.c.  */\n-#define US_SOFTWARE_GOFAST\n-\n /* The US Software GOFAST library requires special optabs support.\n-   There is no negation libcall, and several others have names different\n-   from gcc.  This file consolidates the support in one place.\n+   This file is intended to be included by config/ARCH/ARCH.c.  It\n+   defines one function, gofast_maybe_init_libfuncs, which should be\n+   called from the TARGET_INIT_LIBFUNCS hook.  When tm.h has defined\n+   US_SOFTWARE_GOFAST, this function will adjust all the optabs and\n+   libfuncs appropriately.  Otherwise it will do nothing.  */\n+\n+static void\n+gofast_maybe_init_libfuncs (void)\n+{\n+#ifdef US_SOFTWARE_GOFAST\n+  int mode;\n+\n+  set_optab_libfunc (add_optab, SFmode, \"fpadd\");\n+  set_optab_libfunc (add_optab, DFmode, \"dpadd\");\n+  set_optab_libfunc (sub_optab, SFmode, \"fpsub\");\n+  set_optab_libfunc (sub_optab, DFmode, \"dpsub\");\n+  set_optab_libfunc (smul_optab, SFmode, \"fpmul\");\n+  set_optab_libfunc (smul_optab, DFmode, \"dpmul\");\n+  set_optab_libfunc (sdiv_optab, SFmode, \"fpdiv\");\n+  set_optab_libfunc (sdiv_optab, DFmode, \"dpdiv\");\n+  set_optab_libfunc (cmp_optab, SFmode, \"fpcmp\");\n+  set_optab_libfunc (cmp_optab, DFmode, \"dpcmp\");\n+\n+  /* GOFAST does not provide libfuncs for negation, so we use the\n+     standard names.  */\n \n-   The basic plan is to leave gcc proper alone and via some hook fix things\n-   after the optabs have been set up.  Our main entry point is\n-   INIT_GOFAST_OPTABS.  */\n+  /* GCC does not use fpcmp/dpcmp for gt or ge because its own\n+     FP-emulation library returns +1 for both > and unord.  So we\n+     leave gt and ge unset, such that, instead of fpcmp(a,b) >[=], we\n+     generate fpcmp(b,a) <[=] 0, which is unambiguous.  For unord\n+     libfuncs, we use our own functions, since GOFAST doesn't supply\n+     them.  */\n \n-#define INIT_GOFAST_OPTABS \\\n-  do { \\\n-    GOFAST_CLEAR_NEG_FLOAT_OPTAB; \\\n-    GOFAST_RENAME_LIBCALLS; \\\n-  } while (0)\n+  eqsf2_libfunc = init_one_libfunc (\"fpcmp\");\n+  nesf2_libfunc = init_one_libfunc (\"fpcmp\");\n+  gtsf2_libfunc = NULL_RTX;\n+  gesf2_libfunc = NULL_RTX;\n+  ltsf2_libfunc = init_one_libfunc (\"fpcmp\");\n+  lesf2_libfunc = init_one_libfunc (\"fpcmp\");\n \n-#define GOFAST_CLEAR_NEG_FLOAT_OPTAB \\\n-  do { \\\n-    int mode; \\\n-    for (mode = SFmode; (int) mode <= (int) TFmode; \\\n-\t mode = (enum machine_mode) ((int) mode + 1)) \\\n-      neg_optab->handlers[(int) mode].libfunc = NULL_RTX; \\\n-  } while (0)\n+  eqdf2_libfunc = init_one_libfunc (\"dpcmp\");\n+  nedf2_libfunc = init_one_libfunc (\"dpcmp\");\n+  gtdf2_libfunc = NULL_RTX;\n+  gedf2_libfunc = NULL_RTX;\n+  ltdf2_libfunc = init_one_libfunc (\"dpcmp\");\n+  ledf2_libfunc = init_one_libfunc (\"dpcmp\");\n \n-/* GCC does not use fpcmp/dpcmp for gt or ge because its own\n-   FP-emulation library returns +1 for both > and unord.  So we leave\n-   gt and ge unset, such that, instead of fpcmp(a,b) >[=], we generate\n-   fpcmp(b,a) <[=] 0, which is unambiguous.  For unord libfuncs, we\n-   use our own functions, since GOFAST doesn't supply them.  */\n-#define GOFAST_RENAME_LIBCALLS \\\n-  add_optab->handlers[(int) SFmode].libfunc = init_one_libfunc (\"fpadd\"); \\\n-  add_optab->handlers[(int) DFmode].libfunc = init_one_libfunc (\"dpadd\"); \\\n-  sub_optab->handlers[(int) SFmode].libfunc = init_one_libfunc (\"fpsub\"); \\\n-  sub_optab->handlers[(int) DFmode].libfunc = init_one_libfunc (\"dpsub\"); \\\n-  smul_optab->handlers[(int) SFmode].libfunc = init_one_libfunc (\"fpmul\"); \\\n-  smul_optab->handlers[(int) DFmode].libfunc = init_one_libfunc (\"dpmul\"); \\\n-  sdiv_optab->handlers[(int) SFmode].libfunc = init_one_libfunc (\"fpdiv\"); \\\n-  sdiv_optab->handlers[(int) DFmode].libfunc = init_one_libfunc (\"dpdiv\"); \\\n-  cmp_optab->handlers[(int) SFmode].libfunc = init_one_libfunc (\"fpcmp\"); \\\n-  cmp_optab->handlers[(int) DFmode].libfunc = init_one_libfunc (\"dpcmp\"); \\\n-\\\n-  extendsfdf2_libfunc = init_one_libfunc (\"fptodp\"); \\\n-  truncdfsf2_libfunc = init_one_libfunc (\"dptofp\"); \\\n-\\\n-  eqhf2_libfunc = NULL_RTX; \\\n-  nehf2_libfunc = NULL_RTX; \\\n-  gthf2_libfunc = NULL_RTX; \\\n-  gehf2_libfunc = NULL_RTX; \\\n-  lthf2_libfunc = NULL_RTX; \\\n-  lehf2_libfunc = NULL_RTX; \\\n-\\\n-  eqsf2_libfunc = init_one_libfunc (\"fpcmp\"); \\\n-  nesf2_libfunc = init_one_libfunc (\"fpcmp\"); \\\n-  gtsf2_libfunc = NULL_RTX; \\\n-  gesf2_libfunc = NULL_RTX; \\\n-  ltsf2_libfunc = init_one_libfunc (\"fpcmp\"); \\\n-  lesf2_libfunc = init_one_libfunc (\"fpcmp\"); \\\n-\\\n-  eqdf2_libfunc = init_one_libfunc (\"dpcmp\"); \\\n-  nedf2_libfunc = init_one_libfunc (\"dpcmp\"); \\\n-  gtdf2_libfunc = NULL_RTX; \\\n-  gedf2_libfunc = NULL_RTX; \\\n-  ltdf2_libfunc = init_one_libfunc (\"dpcmp\"); \\\n-  ledf2_libfunc = init_one_libfunc (\"dpcmp\"); \\\n-\\\n-  eqxf2_libfunc = NULL_RTX; \\\n-  nexf2_libfunc = NULL_RTX; \\\n-  gtxf2_libfunc = NULL_RTX; \\\n-  gexf2_libfunc = NULL_RTX; \\\n-  ltxf2_libfunc = NULL_RTX; \\\n-  lexf2_libfunc = NULL_RTX; \\\n-\\\n-  eqtf2_libfunc = NULL_RTX; \\\n-  netf2_libfunc = NULL_RTX; \\\n-  gttf2_libfunc = NULL_RTX; \\\n-  getf2_libfunc = NULL_RTX; \\\n-  lttf2_libfunc = NULL_RTX; \\\n-  letf2_libfunc = NULL_RTX; \\\n-\\\n-  floatsisf_libfunc = init_one_libfunc (\"sitofp\"); \\\n-  floatsidf_libfunc = init_one_libfunc (\"litodp\"); \\\n-  fixsfsi_libfunc = init_one_libfunc (\"fptosi\"); \\\n-  fixdfsi_libfunc = init_one_libfunc (\"dptoli\"); \\\n-  fixunssfsi_libfunc = init_one_libfunc (\"fptoui\"); \\\n-  fixunsdfsi_libfunc = init_one_libfunc (\"dptoul\"); \\\n+  extendsfdf2_libfunc = init_one_libfunc (\"fptodp\");\n+  truncdfsf2_libfunc = init_one_libfunc (\"dptofp\");\n \n-/* End of GOFAST_RENAME_LIBCALLS */\n+  floatsisf_libfunc = init_one_libfunc (\"sitofp\");\n+  floatsidf_libfunc = init_one_libfunc (\"litodp\");\n+  fixsfsi_libfunc = init_one_libfunc (\"fptosi\");\n+  fixdfsi_libfunc = init_one_libfunc (\"dptoli\");\n+  fixunssfsi_libfunc = init_one_libfunc (\"fptoui\");\n+  fixunsdfsi_libfunc = init_one_libfunc (\"dptoul\");\n+#endif\n+}"}, {"sha": "5f21a0a03a08adffde83df1b8d5f25866886ba69", "filename": "gcc/config/h8300/h8300.c", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c15c90bbfe4553f5413341d61e8aa29caf2f647f/gcc%2Fconfig%2Fh8300%2Fh8300.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c15c90bbfe4553f5413341d61e8aa29caf2f647f/gcc%2Fconfig%2Fh8300%2Fh8300.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fh8300%2Fh8300.c?ref=c15c90bbfe4553f5413341d61e8aa29caf2f647f", "patch": "@@ -38,6 +38,7 @@ Boston, MA 02111-1307, USA.  */\n #include \"recog.h\"\n #include \"expr.h\"\n #include \"function.h\"\n+#include \"optabs.h\"\n #include \"toplev.h\"\n #include \"c-pragma.h\"\n #include \"tm_p.h\"\n@@ -4507,6 +4508,17 @@ h8300_hard_regno_rename_ok (unsigned int old_reg ATTRIBUTE_UNUSED,\n    return 1;\n }\n \f\n+/* Perform target dependent optabs initialization.  */\n+static void\n+h8300_init_libfuncs (void)\n+{\n+  set_optab_libfunc (smul_optab, HImode, \"__mulhi3\");\n+  set_optab_libfunc (sdiv_optab, HImode, \"__divhi3\");\n+  set_optab_libfunc (udiv_optab, HImode, \"__udivhi3\");\n+  set_optab_libfunc (smod_optab, HImode, \"__modhi3\");\n+  set_optab_libfunc (umod_optab, HImode, \"__umodhi3\");\n+}\n+\f\n /* Initialize the GCC target structure.  */\n #undef TARGET_ATTRIBUTE_TABLE\n #define TARGET_ATTRIBUTE_TABLE h8300_attribute_table\n@@ -4534,4 +4546,7 @@ h8300_hard_regno_rename_ok (unsigned int old_reg ATTRIBUTE_UNUSED,\n #undef TARGET_RTX_COSTS\n #define TARGET_RTX_COSTS h8300_rtx_costs\n \n+#undef TARGET_INIT_LIBFUNCS\n+#define TARGET_INIT_LIBFUNCS h8300_init_libfuncs\n+\n struct gcc_target targetm = TARGET_INITIALIZER;"}, {"sha": "b31bdf59dc8b161d260a0eb06d1529942e07aca9", "filename": "gcc/config/h8300/h8300.h", "status": "modified", "additions": 0, "deletions": 24, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c15c90bbfe4553f5413341d61e8aa29caf2f647f/gcc%2Fconfig%2Fh8300%2Fh8300.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c15c90bbfe4553f5413341d61e8aa29caf2f647f/gcc%2Fconfig%2Fh8300%2Fh8300.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fh8300%2Fh8300.h?ref=c15c90bbfe4553f5413341d61e8aa29caf2f647f", "patch": "@@ -1197,30 +1197,6 @@ struct cum_arg\n \n #define TARGET_MEM_FUNCTIONS\n \n-#define MULHI3_LIBCALL\t\"__mulhi3\"\n-#define DIVHI3_LIBCALL\t\"__divhi3\"\n-#define UDIVHI3_LIBCALL\t\"__udivhi3\"\n-#define MODHI3_LIBCALL\t\"__modhi3\"\n-#define UMODHI3_LIBCALL\t\"__umodhi3\"\n-\n-/* Perform target dependent optabs initialization.  */\n-\n-#define INIT_TARGET_OPTABS\t\t\t\t\t\\\n-  do\t\t\t\t\t\t\t\t\\\n-    {\t\t\t\t\t\t\t\t\\\n-      smul_optab->handlers[(int) HImode].libfunc\t\t\\\n-\t= init_one_libfunc (MULHI3_LIBCALL);\t\t\t\\\n-      sdiv_optab->handlers[(int) HImode].libfunc\t\t\\\n-\t= init_one_libfunc (DIVHI3_LIBCALL);\t\t\t\\\n-      udiv_optab->handlers[(int) HImode].libfunc\t\t\\\n-\t= init_one_libfunc (UDIVHI3_LIBCALL);\t\t\t\\\n-      smod_optab->handlers[(int) HImode].libfunc\t\t\\\n-\t= init_one_libfunc (MODHI3_LIBCALL);\t\t\t\\\n-      umod_optab->handlers[(int) HImode].libfunc\t\t\\\n-\t= init_one_libfunc (UMODHI3_LIBCALL);\t\t\t\\\n-    }\t\t\t\t\t\t\t\t\\\n-  while (0)\n-\n #define MOVE_RATIO 3\n \n /* Define the codes that are matched by predicates in h8300.c.  */"}, {"sha": "a8585eff404a29ec7475f7e5412894d827b531d5", "filename": "gcc/config/i860/i860.c", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c15c90bbfe4553f5413341d61e8aa29caf2f647f/gcc%2Fconfig%2Fi860%2Fi860.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c15c90bbfe4553f5413341d61e8aa29caf2f647f/gcc%2Fconfig%2Fi860%2Fi860.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi860%2Fi860.c?ref=c15c90bbfe4553f5413341d61e8aa29caf2f647f", "patch": "@@ -43,6 +43,7 @@ Boston, MA 02111-1307, USA.  */\n #include \"insn-attr.h\"\n #include \"function.h\"\n #include \"expr.h\"\n+#include \"optabs.h\"\n #include \"toplev.h\"\n #include \"tm_p.h\"\n #include \"target.h\"\n@@ -2091,6 +2092,14 @@ i860_file_start (void)\n   fprintf (asm_out_file, \"\\t.version\\t\\\"01.01\\\"\\n\");\n }\n \n+static void\n+i860_init_libfuncs (void)\n+{\n+  set_optab_libfunc (sdiv_optab, SImode, \"*.div\");\n+  set_optab_libfunc (udiv_optab, SImode, \"*.udiv\");\n+  set_optab_libfunc (smod_optab, SImode, \"*.rem\");\n+  set_optab_libfunc (umod_optab, SImode, \"*.urem\");\n+}\n \n /* Initialize the GCC target structure.  */\n #undef TARGET_RTX_COSTS\n@@ -2105,5 +2114,8 @@ i860_file_start (void)\n #undef TARGET_ASM_FUNCTION_EPILOGUE\n #define TARGET_ASM_FUNCTION_EPILOGUE i860_output_function_epilogue\n \n+#undef TARGET_INIT_LIBFUNCS\n+#define TARGET_INIT_LIBFUNCS i860_init_libfuncs\n+\n struct gcc_target targetm = TARGET_INITIALIZER;\n "}, {"sha": "11aa529104ed733d41362d6fdd1e2d215a751cfb", "filename": "gcc/config/i860/i860.h", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c15c90bbfe4553f5413341d61e8aa29caf2f647f/gcc%2Fconfig%2Fi860%2Fi860.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c15c90bbfe4553f5413341d61e8aa29caf2f647f/gcc%2Fconfig%2Fi860%2Fi860.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi860%2Fi860.h?ref=c15c90bbfe4553f5413341d61e8aa29caf2f647f", "patch": "@@ -835,11 +835,6 @@ struct cumulative_args { int ints, floats; };\n    Do not define this if the table should contain absolute addresses. */\n /* #define CASE_VECTOR_PC_RELATIVE 1 */\n \n-#define DIVSI3_LIBCALL \"*.div\"\n-#define UDIVSI3_LIBCALL \"*.udiv\"\n-#define MODSI3_LIBCALL \"*.rem\"\n-#define UMODSI3_LIBCALL \"*.urem\"\n-\n /* Define this as 1 if `char' should by default be signed; else as 0.  */\n #define DEFAULT_SIGNED_CHAR 1\n "}, {"sha": "be2470c6a560f7989633a15b6beb59ebc88265e0", "filename": "gcc/config/ia64/hpux.h", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c15c90bbfe4553f5413341d61e8aa29caf2f647f/gcc%2Fconfig%2Fia64%2Fhpux.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c15c90bbfe4553f5413341d61e8aa29caf2f647f/gcc%2Fconfig%2Fia64%2Fhpux.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fia64%2Fhpux.h?ref=c15c90bbfe4553f5413341d61e8aa29caf2f647f", "patch": "@@ -187,3 +187,10 @@ do {\t\t\t\t\t\t\t\t\\\n #undef TARGET_C99_FUNCTIONS\n #define TARGET_C99_FUNCTIONS  1\n \n+/* We are using IEEE quad precision, not a double-extended with padding.  */\n+#undef INTEL_EXTENDED_IEEE_FORMAT\n+#define INTEL_EXTENDED_IEEE_FORMAT 0\n+\n+#define TARGET_INIT_LIBFUNCS ia64_hpux_init_libfuncs\n+\n+#define FLOAT_LIB_COMPARE_RETURNS_BOOL(MODE, COMPARISON) ((MODE) == TFmode)"}, {"sha": "ec704bd98027c5bdb61a48a2f8c3017de66569e5", "filename": "gcc/config/ia64/hpux_longdouble.h", "status": "removed", "additions": 0, "deletions": 99, "changes": 99, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d20a1e02ac1eff8825ca80fadc8be57c5e5b57fc/gcc%2Fconfig%2Fia64%2Fhpux_longdouble.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d20a1e02ac1eff8825ca80fadc8be57c5e5b57fc/gcc%2Fconfig%2Fia64%2Fhpux_longdouble.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fia64%2Fhpux_longdouble.h?ref=d20a1e02ac1eff8825ca80fadc8be57c5e5b57fc", "patch": "@@ -1,99 +0,0 @@\n-/* Definitions of long double support for GNU compiler.\n-   Copyright (C) 2000, 2001 Free Software Foundation, Inc.\n-\n-This file is part of GCC.\n-\n-GCC is free software; you can redistribute it and/or modify\n-it under the terms of the GNU General Public License as published by\n-the Free Software Foundation; either version 2, or (at your option)\n-any later version.\n-\n-GCC is distributed in the hope that it will be useful,\n-but WITHOUT ANY WARRANTY; without even the implied warranty of\n-MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n-GNU General Public License for more details.\n-\n-You should have received a copy of the GNU General Public License\n-along with GCC; see the file COPYING.  If not, write to\n-the Free Software Foundation, 59 Temple Place - Suite 330,\n-Boston, MA 02111-1307, USA.  */\n-\n-/* We are using IEEE quad precision, not a double-extended with padding.  */\n-#undef INTEL_EXTENDED_IEEE_FORMAT\n-#define INTEL_EXTENDED_IEEE_FORMAT 0\n-\n-/* Define library calls for quad FP operations.  These are all part of the\n-   IA32 and IA64 ABIs.  */\n-\n-#define ADDTF3_LIBCALL \"_U_Qfadd\"\n-#define SUBTF3_LIBCALL \"_U_Qfsub\"\n-#define MULTF3_LIBCALL \"_U_Qfmpy\"\n-#define DIVTF3_LIBCALL \"_U_Qfdiv\"\n-#define NEGTF2_LIBCALL \"_U_Qfneg\"\n-#define ABSTF2_LIBCALL \"_U_Qfabs\"\n-#define SMINTF3_LIBCALL \"_U_Qfmin\"\n-#define SMAXTF3_LIBCALL \"_U_Qfmax\"\n-#define EXTENDSFTF2_LIBCALL \"_U_Qfcnvff_sgl_to_quad\"\n-#define EXTENDDFTF2_LIBCALL \"_U_Qfcnvff_dbl_to_quad\"\n-#define TRUNCTFSF2_LIBCALL \"_U_Qfcnvff_quad_to_sgl\"\n-#define TRUNCTFDF2_LIBCALL \"_U_Qfcnvff_quad_to_dbl\"\n-#define FLOATSITF2_LIBCALL \"_U_Qfcnvxf_sgl_to_quad\"\n-#define FLOATDITF2_LIBCALL \"_U_Qfcnvxf_dbl_to_quad\"\n-#define FIX_TRUNCTFSI2_LIBCALL \"_U_Qfcnvfxt_quad_to_sgl\"\n-#define FIX_TRUNCTFDI2_LIBCALL \"_U_Qfcnvfxt_quad_to_dbl\"\n-#define FIXUNS_TRUNCTFSI2_LIBCALL \"_U_Qfcnvfxut_quad_to_sgl\"\n-#define FIXUNS_TRUNCTFDI2_LIBCALL \"_U_Qfcnvfxut_quad_to_dbl\"\n-#define EQTF2_LIBCALL \"_U_Qfeq\"\n-#define NETF2_LIBCALL \"_U_Qfne\"\n-#define GTTF2_LIBCALL \"_U_Qfgt\"\n-#define GETF2_LIBCALL \"_U_Qfge\"\n-#define LTTF2_LIBCALL \"_U_Qflt\"\n-#define LETF2_LIBCALL \"_U_Qfle\"\n-\n-\n-#undef INIT_TARGET_OPTABS\n-#define INIT_TARGET_OPTABS\t\t\t\t\t\t\\\n-  do {\t\t\t\t\t\t\t\t\t\\\n-    add_optab->handlers[(int) TFmode].libfunc\t\t\t\t\\\n-      = gen_rtx_SYMBOL_REF (Pmode, ADDTF3_LIBCALL);\t\t\t\\\n-    sub_optab->handlers[(int) TFmode].libfunc\t\t\t\t\\\n-      = gen_rtx_SYMBOL_REF (Pmode, SUBTF3_LIBCALL);\t\t\t\\\n-    smul_optab->handlers[(int) TFmode].libfunc\t\t\t\t\\\n-      = gen_rtx_SYMBOL_REF (Pmode, MULTF3_LIBCALL);\t\t\t\\\n-    sdiv_optab->handlers[(int) TFmode].libfunc\t\t\t\t\\\n-      = gen_rtx_SYMBOL_REF (Pmode, DIVTF3_LIBCALL);\t\t\t\\\n-    smin_optab->handlers[(int) TFmode].libfunc\t\t\t\t\\\n-      = gen_rtx_SYMBOL_REF (Pmode, SMINTF3_LIBCALL);\t\t\t\\\n-    smax_optab->handlers[(int) TFmode].libfunc\t\t\t\t\\\n-      = gen_rtx_SYMBOL_REF (Pmode, SMAXTF3_LIBCALL);\t\t\t\\\n-    abs_optab->handlers[(int) TFmode].libfunc\t\t\t\t\\\n-      = gen_rtx_SYMBOL_REF (Pmode, ABSTF2_LIBCALL);\t\t\t\\\n-    neg_optab->handlers[(int) TFmode].libfunc\t\t\t\t\\\n-      = gen_rtx_SYMBOL_REF (Pmode, NEGTF2_LIBCALL);\t\t\t\\\n-    extendsftf2_libfunc = gen_rtx_SYMBOL_REF (Pmode, EXTENDSFTF2_LIBCALL); \\\n-    extenddftf2_libfunc = gen_rtx_SYMBOL_REF (Pmode, EXTENDDFTF2_LIBCALL); \\\n-    trunctfsf2_libfunc = gen_rtx_SYMBOL_REF (Pmode, TRUNCTFSF2_LIBCALL); \\\n-    trunctfdf2_libfunc = gen_rtx_SYMBOL_REF (Pmode, TRUNCTFDF2_LIBCALL); \\\n-    floatsitf_libfunc = gen_rtx_SYMBOL_REF (Pmode, FLOATSITF2_LIBCALL);  \\\n-    floatditf_libfunc = gen_rtx_SYMBOL_REF (Pmode, FLOATDITF2_LIBCALL);  \\\n-    fixtfsi_libfunc = gen_rtx_SYMBOL_REF (Pmode, FIX_TRUNCTFSI2_LIBCALL);\\\n-    fixtfdi_libfunc = gen_rtx_SYMBOL_REF (Pmode, FIX_TRUNCTFDI2_LIBCALL);\\\n-    fixunstfsi_libfunc = gen_rtx_SYMBOL_REF (Pmode, FIXUNS_TRUNCTFSI2_LIBCALL);  \\\n-    fixunstfdi_libfunc = gen_rtx_SYMBOL_REF (Pmode, FIXUNS_TRUNCTFDI2_LIBCALL);  \\\n-    eqtf2_libfunc = gen_rtx_SYMBOL_REF (Pmode, EQTF2_LIBCALL);\t\t\\\n-    netf2_libfunc = gen_rtx_SYMBOL_REF (Pmode, NETF2_LIBCALL);\t\t\\\n-    gttf2_libfunc = gen_rtx_SYMBOL_REF (Pmode, GTTF2_LIBCALL);\t\t\\\n-    getf2_libfunc = gen_rtx_SYMBOL_REF (Pmode, GETF2_LIBCALL);\t\t\\\n-    lttf2_libfunc = gen_rtx_SYMBOL_REF (Pmode, LTTF2_LIBCALL);\t\t\\\n-    letf2_libfunc = gen_rtx_SYMBOL_REF (Pmode, LETF2_LIBCALL);\t\t\\\n-\t\t\t\t\t\t\t\t\t\\\n-    INIT_SUBTARGET_OPTABS;\t\t\t\t\t\t\\\n-  } while (0)\n-\n-/* This is meant to be redefined in the host dependent files */\n-#define INIT_SUBTARGET_OPTABS\n-\n-/* Nonzero if a floating point comparison library call for\n-   mode MODE that will return a boolean value.  Zero if one\n-   of the libgcc2 functions is used.  */\n-#define FLOAT_LIB_COMPARE_RETURNS_BOOL(MODE, COMPARISON) ((MODE) == TFmode)"}, {"sha": "1633a585921430c078108c3e909f1e3fea027414", "filename": "gcc/config/ia64/ia64.c", "status": "modified", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c15c90bbfe4553f5413341d61e8aa29caf2f647f/gcc%2Fconfig%2Fia64%2Fia64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c15c90bbfe4553f5413341d61e8aa29caf2f647f/gcc%2Fconfig%2Fia64%2Fia64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fia64%2Fia64.c?ref=c15c90bbfe4553f5413341d61e8aa29caf2f647f", "patch": "@@ -37,6 +37,7 @@ Boston, MA 02111-1307, USA.  */\n #include \"recog.h\"\n #include \"expr.h\"\n #include \"optabs.h\"\n+#include \"libfuncs.h\"\n #include \"except.h\"\n #include \"function.h\"\n #include \"ggc.h\"\n@@ -253,6 +254,8 @@ static void ia64_hpux_add_extern_decl (const char *name)\n      ATTRIBUTE_UNUSED;\n static void ia64_hpux_file_end (void)\n      ATTRIBUTE_UNUSED;\n+static void ia64_hpux_init_libfuncs (void)\n+     ATTRIBUTE_UNUSED;\n \n static tree ia64_handle_model_attribute (tree *, tree, tree, int, bool *);\n static void ia64_encode_section_info (tree, rtx, int);\n@@ -8304,6 +8307,36 @@ ia64_hpux_file_end (void)\n     }\n }\n \n+/* Rename all the TFmode libfuncs using the HPUX conventions.  */\n+static void\n+ia64_hpux_init_libfuncs (void)\n+{\n+  set_optab_libfunc (add_optab, TFmode, \"_U_Qfadd\");\n+  set_optab_libfunc (sub_optab, TFmode, \"_U_Qfsub\");\n+  set_optab_libfunc (smul_optab, TFmode, \"_Q_Qfmpy\");\n+  set_optab_libfunc (sdiv_optab, TFmode, \"_U_Qfdiv\");\n+  set_optab_libfunc (smin_optab, TFmode, \"_U_Qfmin\");\n+  set_optab_libfunc (smax_optab, TFmode, \"_U_Qfmax\");\n+  set_optab_libfunc (abs_optab, TFmode, \"_U_Qfabs\");\n+  set_optab_libfunc (neg_optab, TFmode, \"_U_Qfneg\");\n+\n+  extendsftf2_libfunc = init_one_libfunc (\"_U_Qfcnvff_sgl_to_quad\");\n+  extenddftf2_libfunc = init_one_libfunc (\"_U_Qfcnvff_dbl_to_quad\");\n+  trunctfsf2_libfunc = init_one_libfunc (\"_U_Qfcnvff_quad_to_sgl\");\n+  trunctfdf2_libfunc = init_one_libfunc (\"_U_Qfcnvff_quad_to_dbl\");\n+  floatsitf_libfunc = init_one_libfunc (\"_U_Qfcnvxf_sgl_to_quad\");\n+  floatditf_libfunc = init_one_libfunc (\"_U_Qfcnvxf_dbl_to_quad\");\n+  fixtfsi_libfunc = init_one_libfunc (\"_U_Qfcnvfxt_quad_to_sgl\");\n+  fixtfdi_libfunc = init_one_libfunc (\"_U_Qfcnvfxt_quad_to_dbl\");\n+  fixunstfsi_libfunc = init_one_libfunc (\"_U_Qfcnvfxut_quad_to_sgl\");\n+  fixunstfdi_libfunc = init_one_libfunc (\"_U_Qfcnvfxut_quad_to_dbl\");\n+  eqtf2_libfunc = init_one_libfunc (\"_U_Qfeq\");\n+  netf2_libfunc = init_one_libfunc (\"_U_Qfne\");\n+  gttf2_libfunc = init_one_libfunc (\"_U_Qfgt\");\n+  getf2_libfunc = init_one_libfunc (\"_U_Qfge\");\n+  lttf2_libfunc = init_one_libfunc (\"_U_Qflt\");\n+  letf2_libfunc = init_one_libfunc (\"_U_Qfle\");\n+}\n \f\n /* Switch to the section to which we should output X.  The only thing\n    special we do here is to honor small data.  */"}, {"sha": "e31347fd701f431dd82632645e1ddf18e1f8cb66", "filename": "gcc/config/ip2k/ip2k.c", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c15c90bbfe4553f5413341d61e8aa29caf2f647f/gcc%2Fconfig%2Fip2k%2Fip2k.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c15c90bbfe4553f5413341d61e8aa29caf2f647f/gcc%2Fconfig%2Fip2k%2Fip2k.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fip2k%2Fip2k.c?ref=c15c90bbfe4553f5413341d61e8aa29caf2f647f", "patch": "@@ -38,6 +38,7 @@\n #include \"reload.h\"\n #include \"tree.h\"\n #include \"expr.h\"\n+#include \"optabs.h\"\n #include \"toplev.h\"\n #include \"obstack.h\"\n #include \"function.h\"\n@@ -81,6 +82,7 @@ static tree ip2k_handle_fndecl_attribute PARAMS ((tree *, tree, tree, int,\n \t\t\t\t\t\t  bool *));\n static bool ip2k_rtx_costs PARAMS ((rtx, int, int, int *));\n static int ip2k_address_cost PARAMS ((rtx));\n+static void ip2k_init_libfuncs PARAMS ((void));\n \n const struct attribute_spec ip2k_attribute_table[];\n \n@@ -109,6 +111,9 @@ const struct attribute_spec ip2k_attribute_table[];\n #undef TARGET_MACHINE_DEPENDENT_REORG\n #define TARGET_MACHINE_DEPENDENT_REORG ip2k_reorg\n \n+#undef TARGET_INIT_LIBFUNCS\n+#define TARGET_INIT_LIBFUNCS ip2k_init_libfuncs\n+\n struct gcc_target targetm = TARGET_INITIALIZER;\n \n /* Prologue/Epilogue size in words.  */\n@@ -5503,6 +5508,15 @@ ip2k_reorg ()\n #endif\n }\n \n+static void\n+ip2k_init_libfuncs (void)\n+{\n+  set_optab_libfunc (smul_optab, SImode, \"_mulsi3\");\n+  set_optab_libfunc (smul_optab, DImode, \"_muldi3\");\n+  set_optab_libfunc (cmp_optab,  HImode, \"_cmphi2\");\n+  set_optab_libfunc (cmp_optab,  SImode, \"_cmpsi2\");\n+}\n+\n /* Returns a bit position if mask contains only a single bit.  Returns -1 if\n    there were zero or more than one set bits.  */\n int"}, {"sha": "d3d77dc8fc0cd31b32effcfee8d59d62c3aef137", "filename": "gcc/config/ip2k/ip2k.h", "status": "modified", "additions": 0, "deletions": 15, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c15c90bbfe4553f5413341d61e8aa29caf2f647f/gcc%2Fconfig%2Fip2k%2Fip2k.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c15c90bbfe4553f5413341d61e8aa29caf2f647f/gcc%2Fconfig%2Fip2k%2Fip2k.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fip2k%2Fip2k.h?ref=c15c90bbfe4553f5413341d61e8aa29caf2f647f", "patch": "@@ -863,21 +863,6 @@ extern int ip2k_reorg_merge_qimode;\n #define OUT_AS2(a,b,c) output_asm_insn (AS2 (a,b,c), operands)\n #define CR_TAB \"\\n\\t\"\n \n-#define INIT_TARGET_OPTABS\t\t\t\t\\\n-{\t\t\t\t\t\t\t\\\n-  smul_optab->handlers[(int) SImode].libfunc\t\t\\\n-    = gen_rtx_SYMBOL_REF (Pmode, \"_mulsi3\");\t\t\\\n-\t\t\t\t\t\t\t\\\n-  smul_optab->handlers[(int) DImode].libfunc\t\t\\\n-    = gen_rtx_SYMBOL_REF (Pmode, \"_muldi3\");\t\t\\\n-\t\t\t\t\t\t\t\\\n-  cmp_optab->handlers[(int) HImode].libfunc\t\t\\\n-    = gen_rtx_SYMBOL_REF (Pmode, \"_cmphi2\");\t\t\\\n-\t\t\t\t\t\t\t\\\n-  cmp_optab->handlers[(int) SImode].libfunc\t\t\\\n-    = gen_rtx_SYMBOL_REF (Pmode, \"_cmpsi2\");\t\t\\\n-}\n-\n #define PREDICATE_CODES\t\t\t\t\t\\\n   {\"ip2k_ip_operand\", {MEM}},\t\t\t\t\\\n   {\"ip2k_short_operand\", {MEM}},\t\t\t\\"}, {"sha": "15fa240432b31d045c3d9f68097e97ec415ae1c6", "filename": "gcc/config/iq2000/iq2000.h", "status": "modified", "additions": 0, "deletions": 14, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c15c90bbfe4553f5413341d61e8aa29caf2f647f/gcc%2Fconfig%2Fiq2000%2Fiq2000.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c15c90bbfe4553f5413341d61e8aa29caf2f647f/gcc%2Fconfig%2Fiq2000%2Fiq2000.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fiq2000%2Fiq2000.h?ref=c15c90bbfe4553f5413341d61e8aa29caf2f647f", "patch": "@@ -642,16 +642,6 @@ typedef struct iq2000_args {\n     emit_move_insn (gen_rtx_MEM (SImode, plus_constant (addr, 36)), CHAIN);\\\n }\n \n-\f\n-/* Implicit Calls to Library Routines.  */\n-\n-#define INIT_TARGET_OPTABS\t\t\t\t\t\t\\\n-do\t\t\t\t\t\t\t\t\t\\\n-  {\t\t\t\t\t\t\t\t\t\\\n-    INIT_SUBTARGET_OPTABS;\t\t\t\t\t\t\\\n-  }\t\t\t\t\t\t\t\t\t\\\n-while (0)\n-\n \f\n /* Addressing Modes.  */\n \n@@ -1420,10 +1410,6 @@ extern void\t\tsbss_section (void);\n #define DONT_ACCESS_GBLS_AFTER_EPILOGUE 0\n \f\n \n-#ifndef INIT_SUBTARGET_OPTABS\n-#define INIT_SUBTARGET_OPTABS\n-#endif\n-\n enum iq2000_builtins\n {\n   IQ2000_BUILTIN_ADO16,"}, {"sha": "51267214a9e563c3b6a8c1c12184faa5462df527", "filename": "gcc/config/m68hc11/m68hc11.c", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c15c90bbfe4553f5413341d61e8aa29caf2f647f/gcc%2Fconfig%2Fm68hc11%2Fm68hc11.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c15c90bbfe4553f5413341d61e8aa29caf2f647f/gcc%2Fconfig%2Fm68hc11%2Fm68hc11.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68hc11%2Fm68hc11.c?ref=c15c90bbfe4553f5413341d61e8aa29caf2f647f", "patch": "@@ -50,6 +50,7 @@ Boston, MA 02111-1307, USA.\n #include \"flags.h\"\n #include \"recog.h\"\n #include \"expr.h\"\n+#include \"libfuncs.h\"\n #include \"toplev.h\"\n #include \"basic-block.h\"\n #include \"function.h\"\n@@ -85,6 +86,7 @@ static void m68hc11_file_start PARAMS ((void));\n static void m68hc11_encode_section_info PARAMS((tree, rtx, int));\n static int autoinc_mode PARAMS((rtx));\n static int m68hc11_make_autoinc_notes PARAMS((rtx *, void *));\n+static void m68hc11_init_libfuncs PARAMS ((void));\n \n /* Must be set to 1 to produce debug messages.  */\n int debug_m6811 = 0;\n@@ -246,6 +248,9 @@ static int nb_soft_regs;\n #undef TARGET_MACHINE_DEPENDENT_REORG\n #define TARGET_MACHINE_DEPENDENT_REORG m68hc11_reorg\n \n+#undef TARGET_INIT_LIBFUNCS\n+#define TARGET_INIT_LIBFUNCS m68hc11_init_libfuncs\n+\n struct gcc_target targetm = TARGET_INITIALIZER;\n \f\n int\n@@ -5256,6 +5261,17 @@ m68hc11_reorg ()\n       }\n   }\n }\n+\f\n+/* Override memcpy */\n+\n+static void\n+m68hc11_init_libfuncs (void)\n+{\n+  memcpy_libfunc = init_one_libfunc (\"__memcpy\");\n+  memcmp_libfunc = init_one_libfunc (\"__memcmp\");\n+  memset_libfunc = init_one_libfunc (\"__memset\");\n+}\n+\n \f\n \n /* Cost functions.  */"}, {"sha": "7c1c7f3e0fb5f15caf2715f782f05e4498840c96", "filename": "gcc/config/m68hc11/m68hc11.h", "status": "modified", "additions": 0, "deletions": 17, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c15c90bbfe4553f5413341d61e8aa29caf2f647f/gcc%2Fconfig%2Fm68hc11%2Fm68hc11.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c15c90bbfe4553f5413341d61e8aa29caf2f647f/gcc%2Fconfig%2Fm68hc11%2Fm68hc11.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68hc11%2Fm68hc11.h?ref=c15c90bbfe4553f5413341d61e8aa29caf2f647f", "patch": "@@ -1175,23 +1175,6 @@ typedef struct m68hc11_args\n #define INITIALIZE_TRAMPOLINE(TRAMP, FNADDR, CXT) \\\n   m68hc11_initialize_trampoline ((TRAMP), (FNADDR), (CXT))\n \n-\f\n-/* `INIT_TARGET_OPTABS'\n-     Define this macro as a C statement that declares additional library\n-     routines renames existing ones. `init_optabs' calls this macro\n-     after initializing all the normal library routines.\n-\n-     Overrides the memcpy */\n-\n-#define INIT_TARGET_OPTABS\t\t\t\t\t\t\\\n-do\t\t\t\t\t\t\t\t\t\\\n-  {\t\t\t\t\t\t\t\t\t\\\n-    memcpy_libfunc = gen_rtx_SYMBOL_REF (Pmode, \"__memcpy\");\t\t\\\n-    memcmp_libfunc = gen_rtx_SYMBOL_REF (Pmode, \"__memcmp\");\t\t\\\n-    memset_libfunc = gen_rtx_SYMBOL_REF (Pmode, \"__memset\");\t\t\\\n-  }\t\t\t\t\t\t\t\t\t\\\n-while (0)\n-\n \f\n /* Addressing modes, and classification of registers for them.  */\n "}, {"sha": "12a3ef3773a599d00508a80948d355dd87a9134d", "filename": "gcc/config/mips/mips.c", "status": "modified", "additions": 55, "deletions": 0, "changes": 55, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c15c90bbfe4553f5413341d61e8aa29caf2f647f/gcc%2Fconfig%2Fmips%2Fmips.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c15c90bbfe4553f5413341d61e8aa29caf2f647f/gcc%2Fconfig%2Fmips%2Fmips.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.c?ref=c15c90bbfe4553f5413341d61e8aa29caf2f647f", "patch": "@@ -41,6 +41,8 @@ Boston, MA 02111-1307, USA.  */\n #include \"tree.h\"\n #include \"function.h\"\n #include \"expr.h\"\n+#include \"optabs.h\"\n+#include \"libfuncs.h\"\n #include \"flags.h\"\n #include \"reload.h\"\n #include \"tm_p.h\"\n@@ -255,6 +257,7 @@ static const struct mips_cpu_info *mips_cpu_info_from_isa (int);\n static int mips_adjust_cost (rtx, rtx, rtx, int);\n static int mips_issue_rate (void);\n static int mips_use_dfa_pipeline_interface (void);\n+static void mips_init_libfuncs (void);\n \n #ifdef TARGET_IRIX6\n static void iris6_asm_named_section_1 (const char *, unsigned int,\n@@ -787,6 +790,9 @@ const struct mips_cpu_info mips_cpu_info_table[] = {\n #define TARGET_SECTION_TYPE_FLAGS iris6_section_type_flags\n #endif\n \n+#undef TARGET_INIT_LIBFUNCS\n+#define TARGET_INIT_LIBFUNCS mips_init_libfuncs\n+\n struct gcc_target targetm = TARGET_INITIALIZER;\n \f\n /* Return true if RELOC is a valid relocation number and OFFSET can be\n@@ -8986,6 +8992,55 @@ mips_reorg (void)\n     }\n }\n \n+/* We need to use a special set of functions to handle hard floating\n+   point code in mips16 mode.  Also, allow for --enable-gofast.  */\n+\n+#include \"config/gofast.h\"\n+\n+static void\n+mips_init_libfuncs (void)\n+{\n+  if (TARGET_MIPS16 && mips16_hard_float)\n+    {\n+      set_optab_libfunc (add_optab, SFmode, \"__mips16_addsf3\");\n+      set_optab_libfunc (sub_optab, SFmode, \"__mips16_subsf3\");\n+      set_optab_libfunc (smul_optab, SFmode, \"__mips16_mulsf3\");\n+      set_optab_libfunc (sdiv_optab, SFmode, \"__mips16_divsf3\");\n+\n+      eqsf2_libfunc     = init_one_libfunc (\"__mips16_eqsf2\");\n+      nesf2_libfunc     = init_one_libfunc (\"__mips16_nesf2\");\n+      gtsf2_libfunc     = init_one_libfunc (\"__mips16_gtsf2\");\n+      gesf2_libfunc     = init_one_libfunc (\"__mips16_gesf2\");\n+      ltsf2_libfunc     = init_one_libfunc (\"__mips16_ltsf2\");\n+      lesf2_libfunc     = init_one_libfunc (\"__mips16_lesf2\");\n+\n+      floatsisf_libfunc = init_one_libfunc (\"__mips16_floatsisf\");\n+      fixsfsi_libfunc   = init_one_libfunc (\"__mips16_fixsfsi\");\n+\n+      if (TARGET_DOUBLE_FLOAT)\n+\t{\n+\t  set_optab_libfunc (add_optab, DFmode, \"__mips16_adddf3\");\n+\t  set_optab_libfunc (sub_optab, DFmode, \"__mips16_subdf3\");\n+\t  set_optab_libfunc (smul_optab, DFmode, \"__mips16_muldf3\");\n+\t  set_optab_libfunc (sdiv_optab, DFmode, \"__mips16_divdf3\");\n+\n+\t  eqdf2_libfunc       = init_one_libfunc (\"__mips16_eqdf2\");\n+\t  nedf2_libfunc       = init_one_libfunc (\"__mips16_nedf2\");\n+\t  gtdf2_libfunc       = init_one_libfunc (\"__mips16_gtdf2\");\n+\t  gedf2_libfunc       = init_one_libfunc (\"__mips16_gedf2\");\n+\t  ltdf2_libfunc       = init_one_libfunc (\"__mips16_ltdf2\");\n+\t  ledf2_libfunc       = init_one_libfunc (\"__mips16_ledf2\");\n+\n+\t  floatsidf_libfunc   = init_one_libfunc (\"__mips16_floatsidf\");\n+\t  fixdfsi_libfunc     = init_one_libfunc (\"__mips16_fixdfsi\");\n+\n+\t  extendsfdf2_libfunc =\tinit_one_libfunc (\"__mips16_extendsfdf2\");\n+\t  truncdfsf2_libfunc  =\tinit_one_libfunc (\"__mips16_truncdfsf2\");\n+\t}\n+    }\n+  else\n+    gofast_maybe_init_libfuncs ();\n+}\n \n /* Return a number assessing the cost of moving a register in class\n    FROM to class TO.  The classes are expressed using the enumeration"}, {"sha": "a3a27152ac5d6796e1c07d99defdff491f9bd5c7", "filename": "gcc/config/mips/mips.h", "status": "modified", "additions": 0, "deletions": 72, "changes": 72, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c15c90bbfe4553f5413341d61e8aa29caf2f647f/gcc%2Fconfig%2Fmips%2Fmips.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c15c90bbfe4553f5413341d61e8aa29caf2f647f/gcc%2Fconfig%2Fmips%2Fmips.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.h?ref=c15c90bbfe4553f5413341d61e8aa29caf2f647f", "patch": "@@ -3451,78 +3451,6 @@ while (0)\n \t\t\t\t\t && mips_abi != ABI_32\t\t\\\n \t\t\t\t\t && mips_abi != ABI_O64)\n \f\n-/* We need to use a special set of functions to handle hard floating\n-   point code in mips16 mode.  */\n-\n-#ifndef INIT_SUBTARGET_OPTABS\n-#define INIT_SUBTARGET_OPTABS\n-#endif\n-\n-#define INIT_TARGET_OPTABS\t\t\t\t\t\t\\\n-do\t\t\t\t\t\t\t\t\t\\\n-  {\t\t\t\t\t\t\t\t\t\\\n-    if (! TARGET_MIPS16 || ! mips16_hard_float)\t\t\t\t\\\n-      INIT_SUBTARGET_OPTABS;\t\t\t\t\t\t\\\n-    else\t\t\t\t\t\t\t\t\\\n-      {\t\t\t\t\t\t\t\t\t\\\n-\tadd_optab->handlers[(int) SFmode].libfunc =\t\t\t\\\n-\t  init_one_libfunc (\"__mips16_addsf3\");\t\t\t\t\\\n-\tsub_optab->handlers[(int) SFmode].libfunc =\t\t\t\\\n-\t  init_one_libfunc (\"__mips16_subsf3\");\t\t\t\t\\\n-\tsmul_optab->handlers[(int) SFmode].libfunc =\t\t\t\\\n-\t  init_one_libfunc (\"__mips16_mulsf3\");\t\t\t\t\\\n-\tsdiv_optab->handlers[(int) SFmode].libfunc =\t\t\t\\\n-\t  init_one_libfunc (\"__mips16_divsf3\");\t\t\t\t\\\n-\t\t\t\t\t\t\t\t\t\\\n-\teqsf2_libfunc = init_one_libfunc (\"__mips16_eqsf2\");\t\t\\\n-\tnesf2_libfunc = init_one_libfunc (\"__mips16_nesf2\");\t\t\\\n-\tgtsf2_libfunc = init_one_libfunc (\"__mips16_gtsf2\");\t\t\\\n-\tgesf2_libfunc = init_one_libfunc (\"__mips16_gesf2\");\t\t\\\n-\tltsf2_libfunc = init_one_libfunc (\"__mips16_ltsf2\");\t\t\\\n-\tlesf2_libfunc = init_one_libfunc (\"__mips16_lesf2\");\t\t\\\n-\t\t\t\t\t\t\t\t\t\\\n-\tfloatsisf_libfunc =\t\t\t\t\t\t\\\n-\t  init_one_libfunc (\"__mips16_floatsisf\");\t\t\t\\\n-\tfixsfsi_libfunc =\t\t\t\t\t\t\\\n-\t  init_one_libfunc (\"__mips16_fixsfsi\");\t\t\t\\\n-\t\t\t\t\t\t\t\t\t\\\n-\tif (TARGET_DOUBLE_FLOAT)\t\t\t\t\t\\\n-\t  {\t\t\t\t\t\t\t\t\\\n-\t    add_optab->handlers[(int) DFmode].libfunc =\t\t\t\\\n-\t      init_one_libfunc (\"__mips16_adddf3\");\t\t\t\\\n-\t    sub_optab->handlers[(int) DFmode].libfunc =\t\t\t\\\n-\t      init_one_libfunc (\"__mips16_subdf3\");\t\t\t\\\n-\t    smul_optab->handlers[(int) DFmode].libfunc =\t\t\\\n-\t      init_one_libfunc (\"__mips16_muldf3\");\t\t\t\\\n-\t    sdiv_optab->handlers[(int) DFmode].libfunc =\t\t\\\n-\t      init_one_libfunc (\"__mips16_divdf3\");\t\t\t\\\n-\t\t\t\t\t\t\t\t\t\\\n-\t    extendsfdf2_libfunc =\t\t\t\t\t\\\n-\t      init_one_libfunc (\"__mips16_extendsfdf2\");\t\t\\\n-\t    truncdfsf2_libfunc =\t\t\t\t\t\\\n-\t      init_one_libfunc (\"__mips16_truncdfsf2\");\t\t\t\\\n-\t\t\t\t\t\t\t\t\t\\\n-\t    eqdf2_libfunc =\t\t\t\t\t\t\\\n-\t      init_one_libfunc (\"__mips16_eqdf2\");\t\t\t\\\n-\t    nedf2_libfunc =\t\t\t\t\t\t\\\n-\t      init_one_libfunc (\"__mips16_nedf2\");\t\t\t\\\n-\t    gtdf2_libfunc =\t\t\t\t\t\t\\\n-\t      init_one_libfunc (\"__mips16_gtdf2\");\t\t\t\\\n-\t    gedf2_libfunc =\t\t\t\t\t\t\\\n-\t      init_one_libfunc (\"__mips16_gedf2\");\t\t\t\\\n-\t    ltdf2_libfunc =\t\t\t\t\t\t\\\n-\t      init_one_libfunc (\"__mips16_ltdf2\");\t\t\t\\\n-\t    ledf2_libfunc =\t\t\t\t\t\t\\\n-\t      init_one_libfunc (\"__mips16_ledf2\");\t\t\t\\\n-\t\t\t\t\t\t\t\t\t\\\n-\t    floatsidf_libfunc =\t\t\t\t\t\t\\\n-\t      init_one_libfunc (\"__mips16_floatsidf\");\t\t\t\\\n-\t    fixdfsi_libfunc =\t\t\t\t\t\t\\\n-\t      init_one_libfunc (\"__mips16_fixdfsi\");\t\t\t\\\n-\t  }\t\t\t\t\t\t\t\t\\\n-      }\t\t\t\t\t\t\t\t\t\\\n-  }\t\t\t\t\t\t\t\t\t\\\n-while (0)\n \n #define DFMODE_NAN \\\n \tunsigned short DFbignan[4] = {0x7ff7, 0xffff, 0xffff, 0xffff}; \\"}, {"sha": "11504cac54aa37039092bbb275bfa82b42ec1120", "filename": "gcc/config/pa/long_double.h", "status": "removed", "additions": 0, "deletions": 100, "changes": 100, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d20a1e02ac1eff8825ca80fadc8be57c5e5b57fc/gcc%2Fconfig%2Fpa%2Flong_double.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d20a1e02ac1eff8825ca80fadc8be57c5e5b57fc/gcc%2Fconfig%2Fpa%2Flong_double.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Flong_double.h?ref=d20a1e02ac1eff8825ca80fadc8be57c5e5b57fc", "patch": "@@ -1,100 +0,0 @@\n-/* Definitions of long double support for GNU compiler.\n-   Copyright (C) 2000, 2002, 2003 Free Software Foundation, Inc.\n-\n-This file is part of GCC.\n-\n-GCC is free software; you can redistribute it and/or modify\n-it under the terms of the GNU General Public License as published by\n-the Free Software Foundation; either version 2, or (at your option)\n-any later version.\n-\n-GCC is distributed in the hope that it will be useful,\n-but WITHOUT ANY WARRANTY; without even the implied warranty of\n-MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n-GNU General Public License for more details.\n-\n-You should have received a copy of the GNU General Public License\n-along with GCC; see the file COPYING.  If not, write to\n-the Free Software Foundation, 59 Temple Place - Suite 330,\n-Boston, MA 02111-1307, USA.  */\n-\n-#define LONG_DOUBLE_TYPE_SIZE 128\n-\n-/* Define library calls for quad FP operations.  These are all part of the\n-   PA32 and PA64 ABIs.  */\n-#define ADDTF3_LIBCALL \"_U_Qfadd\"\n-#define SUBTF3_LIBCALL \"_U_Qfsub\"\n-#define MULTF3_LIBCALL \"_U_Qfmpy\"\n-#define DIVTF3_LIBCALL \"_U_Qfdiv\"\n-#define NEGTF2_LIBCALL \"_U_Qfneg\"\n-#define SQRTTF2_LIBCALL \"_U_Qfsqrt\"\n-#define ABSTF2_LIBCALL \"_U_Qfabs\"\n-#define SMINTF3_LIBCALL \"_U_Qfmin\"\n-#define SMAXTF3_LIBCALL \"_U_Qfmax\"\n-#define EXTENDSFTF2_LIBCALL \"_U_Qfcnvff_sgl_to_quad\"\n-#define EXTENDDFTF2_LIBCALL \"_U_Qfcnvff_dbl_to_quad\"\n-#define TRUNCTFSF2_LIBCALL \"_U_Qfcnvff_quad_to_sgl\"\n-#define TRUNCTFDF2_LIBCALL \"_U_Qfcnvff_quad_to_dbl\"\n-#define FLOATSITF2_LIBCALL \"_U_Qfcnvxf_sgl_to_quad\"\n-#define FLOATDITF2_LIBCALL \"_U_Qfcnvxf_dbl_to_quad\"\n-/* We need to put a wrapper function around _U_Qfcnvfxt_quad_to_sgl so that\n-   we can massage its return value for PA64.  */\n-#define FIX_TRUNCTFSI2_LIBCALL \\\n-  (TARGET_64BIT ? \"__U_Qfcnvfxt_quad_to_sgl\" : \"_U_Qfcnvfxt_quad_to_sgl\")\n-#define FIXUNS_TRUNCTFSI2_LIBCALL \"_U_Qfcnvfxt_quad_to_usgl\"\n-#define FIXUNS_TRUNCTFDI2_LIBCALL \"_U_Qfcnvfxt_quad_to_udbl\"\n-#define FIX_TRUNCTFDI2_LIBCALL \"_U_Qfcnvfxt_quad_to_dbl\"\n-#define EQTF2_LIBCALL \"_U_Qfeq\"\n-#define NETF2_LIBCALL \"_U_Qfne\"\n-#define GTTF2_LIBCALL \"_U_Qfgt\"\n-#define GETF2_LIBCALL \"_U_Qfge\"\n-#define LTTF2_LIBCALL \"_U_Qflt\"\n-#define LETF2_LIBCALL \"_U_Qfle\"\n-\n-\n-#define INIT_TARGET_OPTABS\t\t\t\t\t\t\\\n-  do {\t\t\t\t\t\t\t\t\t\\\n-    add_optab->handlers[(int) TFmode].libfunc\t\t\t\t\\\n-      = gen_rtx_SYMBOL_REF (Pmode, ADDTF3_LIBCALL);\t\t\t\\\n-    sub_optab->handlers[(int) TFmode].libfunc\t\t\t\t\\\n-      = gen_rtx_SYMBOL_REF (Pmode, SUBTF3_LIBCALL);\t\t\t\\\n-    smul_optab->handlers[(int) TFmode].libfunc\t\t\t\t\\\n-      = gen_rtx_SYMBOL_REF (Pmode, MULTF3_LIBCALL);\t\t\t\\\n-    sdiv_optab->handlers[(int) TFmode].libfunc\t\t\t\t\\\n-      = gen_rtx_SYMBOL_REF (Pmode, DIVTF3_LIBCALL);\t\t\t\\\n-    smin_optab->handlers[(int) TFmode].libfunc\t\t\t\t\\\n-      = gen_rtx_SYMBOL_REF (Pmode, SMINTF3_LIBCALL);\t\t\t\\\n-    smax_optab->handlers[(int) TFmode].libfunc\t\t\t\t\\\n-      = gen_rtx_SYMBOL_REF (Pmode, SMAXTF3_LIBCALL);\t\t\t\\\n-    sqrt_optab->handlers[(int) TFmode].libfunc\t\t\t\t\\\n-      = gen_rtx_SYMBOL_REF (Pmode, SQRTTF2_LIBCALL);\t\t\t\\\n-    abs_optab->handlers[(int) TFmode].libfunc\t\t\t\t\\\n-      = gen_rtx_SYMBOL_REF (Pmode, ABSTF2_LIBCALL);\t\t\t\\\n-    neg_optab->handlers[(int) TFmode].libfunc\t\t\t\t\\\n-      = gen_rtx_SYMBOL_REF (Pmode, NEGTF2_LIBCALL);\t\t\t\\\n-    extendsftf2_libfunc = gen_rtx_SYMBOL_REF (Pmode, EXTENDSFTF2_LIBCALL); \\\n-    extenddftf2_libfunc = gen_rtx_SYMBOL_REF (Pmode, EXTENDDFTF2_LIBCALL); \\\n-    trunctfsf2_libfunc = gen_rtx_SYMBOL_REF (Pmode, TRUNCTFSF2_LIBCALL); \\\n-    trunctfdf2_libfunc = gen_rtx_SYMBOL_REF (Pmode, TRUNCTFDF2_LIBCALL); \\\n-    floatsitf_libfunc = gen_rtx_SYMBOL_REF (Pmode, FLOATSITF2_LIBCALL);  \\\n-    floatditf_libfunc = gen_rtx_SYMBOL_REF (Pmode, FLOATDITF2_LIBCALL);  \\\n-    fixtfsi_libfunc = gen_rtx_SYMBOL_REF (Pmode, FIX_TRUNCTFSI2_LIBCALL);\\\n-    fixtfdi_libfunc = gen_rtx_SYMBOL_REF (Pmode, FIX_TRUNCTFDI2_LIBCALL);\\\n-    fixunstfsi_libfunc = gen_rtx_SYMBOL_REF (Pmode, FIXUNS_TRUNCTFSI2_LIBCALL);\\\n-    fixunstfdi_libfunc = gen_rtx_SYMBOL_REF (Pmode, FIXUNS_TRUNCTFDI2_LIBCALL);\\\n-    eqtf2_libfunc = gen_rtx_SYMBOL_REF (Pmode, EQTF2_LIBCALL);\t\t\\\n-    netf2_libfunc = gen_rtx_SYMBOL_REF (Pmode, NETF2_LIBCALL);\t\t\\\n-    gttf2_libfunc = gen_rtx_SYMBOL_REF (Pmode, GTTF2_LIBCALL);\t\t\\\n-    getf2_libfunc = gen_rtx_SYMBOL_REF (Pmode, GETF2_LIBCALL);\t\t\\\n-    lttf2_libfunc = gen_rtx_SYMBOL_REF (Pmode, LTTF2_LIBCALL);\t\t\\\n-    letf2_libfunc = gen_rtx_SYMBOL_REF (Pmode, LETF2_LIBCALL);\t\t\\\n-    INIT_SUBTARGET_OPTABS;\t\t\t\t\t\t\\\n-  } while (0)\n-\n-/* This is meant to be redefined in the host dependent files */\n-#define INIT_SUBTARGET_OPTABS\n-\n-/* Nonzero if a floating point comparison library call for\n-   mode MODE that will return a boolean value.  Zero if one\n-   of the libgcc2 functions is used.  */\n-#define FLOAT_LIB_COMPARE_RETURNS_BOOL(MODE, COMPARISON) ((MODE) == TFmode)"}, {"sha": "24aefc32bf3b9acc0becdaeb0c62a1f803d30605", "filename": "gcc/config/pa/pa-hpux.h", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c15c90bbfe4553f5413341d61e8aa29caf2f647f/gcc%2Fconfig%2Fpa%2Fpa-hpux.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c15c90bbfe4553f5413341d61e8aa29caf2f647f/gcc%2Fconfig%2Fpa%2Fpa-hpux.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Fpa-hpux.h?ref=c15c90bbfe4553f5413341d61e8aa29caf2f647f", "patch": "@@ -28,6 +28,10 @@ Boston, MA 02111-1307, USA.  */\n #define SIZE_TYPE \"unsigned int\"\n #define PTRDIFF_TYPE \"int\"\n \n+#define LONG_DOUBLE_TYPE_SIZE 128\n+#define HPUX_LONG_DOUBLE_LIBRARY\n+#define FLOAT_LIB_COMPARE_RETURNS_BOOL(MODE, COMPARISON) ((MODE) == TFmode)\n+\n /* GCC always defines __STDC__.  HP C++ compilers don't define it.  This\n    causes trouble when sys/stdsyms.h is included.  As a work around,\n    we define __STDC_EXT__.  A similar situation exists with respect to"}, {"sha": "6134b0b3764b9b2f74afc7898342458516530210", "filename": "gcc/config/pa/pa.c", "status": "modified", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c15c90bbfe4553f5413341d61e8aa29caf2f647f/gcc%2Fconfig%2Fpa%2Fpa.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c15c90bbfe4553f5413341d61e8aa29caf2f647f/gcc%2Fconfig%2Fpa%2Fpa.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Fpa.c?ref=c15c90bbfe4553f5413341d61e8aa29caf2f647f", "patch": "@@ -145,6 +145,9 @@ static void pa_linux_file_start (void) ATTRIBUTE_UNUSED;\n static void pa_hpux64_gas_file_start (void) ATTRIBUTE_UNUSED;\n static void pa_hpux64_hpas_file_start (void) ATTRIBUTE_UNUSED;\n static void output_deferred_plabels (void);\n+#ifdef HPUX_LONG_DOUBLE_LIBRARY\n+static void pa_hpux_init_libfuncs (void);\n+#endif\n \n /* Save the operands last given to a compare for use when we\n    generate a scc or bcc insn.  */\n@@ -253,6 +256,11 @@ static size_t n_deferred_plabels = 0;\n #undef TARGET_MACHINE_DEPENDENT_REORG\n #define TARGET_MACHINE_DEPENDENT_REORG pa_reorg\n \n+#ifdef HPUX_LONG_DOUBLE_LIBRARY\n+#undef TARGET_INIT_LIBFUNCS\n+#define TARGET_INIT_LIBFUNCS pa_hpux_init_libfuncs\n+#endif\n+\n struct gcc_target targetm = TARGET_INITIALIZER;\n \f\n void\n@@ -4950,6 +4958,43 @@ output_deferred_plabels (void)\n     }\n }\n \n+#ifdef HPUX_LONG_DOUBLE_LIBRARY\n+/* Initialize optabs to point to HPUX long double emulation routines.  */\n+static void\n+pa_hpux_init_libfuncs (void)\n+{\n+  set_optab_libfunc (add_optab, TFmode, \"_U_Qfadd\");\n+  set_optab_libfunc (sub_optab, TFmode, \"_U_Qfsub\");\n+  set_optab_libfunc (smul_optab, TFmode, \"_U_Qfmpy\");\n+  set_optab_libfunc (sdiv_optab, TFmode, \"_U_Qfdiv\");\n+  set_optab_libfunc (smin_optab, TFmode, \"_U_Qmin\");\n+  set_optab_libfunc (smax_optab, TFmode, \"_U_Qfmax\");\n+  set_optab_libfunc (sqrt_optab, TFmode, \"_U_Qfsqrt\");\n+  set_optab_libfunc (abs_optab, TFmode, \"_U_Qfabs\");\n+  set_optab_libfunc (neg_optab, TFmode, \"_U_Qfneg\");\n+\n+  eqtf2_libfunc = init_one_libfunc (\"_U_Qfeq\");\n+  netf2_libfunc = init_one_libfunc (\"_U_Qfne\");\n+  gttf2_libfunc = init_one_libfunc (\"_U_Qfgt\");\n+  getf2_libfunc = init_one_libfunc (\"_U_Qfge\");\n+  lttf2_libfunc = init_one_libfunc (\"_U_Qflt\");\n+  letf2_libfunc = init_one_libfunc (\"_U_Qfle\");\n+\n+  extendsftf2_libfunc = init_one_libfunc (\"_U_Qfcnvff_sgl_to_quad\");\n+  extenddftf2_libfunc = init_one_libfunc (\"_U_Qfcnvff_dbl_to_quad\");\n+  trunctfsf2_libfunc = init_one_libfunc (\"_U_Qfcnvff_quad_to_sgl\");\n+  trunctfdf2_libfunc = init_one_libfunc (\"_U_Qfcnvff_quad_to_dbl\");\n+  floatsitf_libfunc = init_one_libfunc (\"_U_Qfcnvxf_sgl_to_quad\");\n+  floatditf_libfunc = init_one_libfunc (\"_U_Qfcnvxf_dbl_to_quad\");\n+  fixtfsi_libfunc = init_one_libfunc (TARGET_64BIT\n+\t\t\t\t      ? \"__U_Qfcnvfxt_quad_to_sgl\"\n+\t\t\t\t      : \"_U_Qfcnvfxt_quad_to_sgl\");\n+  fixtfdi_libfunc = init_one_libfunc (\"_U_Qfcnvfxt_quad_to_dbl\");\n+  fixunstfsi_libfunc = init_one_libfunc (\"_U_Qfcnvfxt_quad_to_usgl\");\n+  fixunstfdi_libfunc = init_one_libfunc (\"_U_Qfcnvfxt_quad_to_udbl\");\n+}\n+#endif\n+\n /* HP's millicode routines mean something special to the assembler.\n    Keep track of which ones we have used.  */\n "}, {"sha": "269a670b53de6902b9f257543395dc58769b7611", "filename": "gcc/config/rs6000/aix.h", "status": "modified", "additions": 0, "deletions": 27, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c15c90bbfe4553f5413341d61e8aa29caf2f647f/gcc%2Fconfig%2Frs6000%2Faix.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c15c90bbfe4553f5413341d61e8aa29caf2f647f/gcc%2Fconfig%2Frs6000%2Faix.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Faix.h?ref=c15c90bbfe4553f5413341d61e8aa29caf2f647f", "patch": "@@ -198,33 +198,6 @@\n /* Define cutoff for using external functions to save floating point.  */\n #define FP_SAVE_INLINE(FIRST_REG) ((FIRST_REG) == 62 || (FIRST_REG) == 63)\n \n-/* Optabs entries for the int->float routines and quad FP operations\n-   using the standard AIX names.  */\n-#define ADDTF3_LIBCALL \"_xlqadd\"\n-#define DIVTF3_LIBCALL \"_xlqdiv\"\n-#define MULTF3_LIBCALL \"_xlqmul\"\n-#define SUBTF3_LIBCALL \"_xlqsub\"\n-\n-#define INIT_TARGET_OPTABS\t\t\t\t\t\t\\\n-  do {\t\t\t\t\t\t\t\t\t\\\n-    if (! TARGET_POWER2 && ! TARGET_POWERPC && TARGET_HARD_FLOAT)\t\\\n-      {\t\t\t\t\t\t\t\t\t\\\n-\tfixdfsi_libfunc = init_one_libfunc (RS6000_ITRUNC);\t\t\\\n-\tfixunsdfsi_libfunc = init_one_libfunc (RS6000_UITRUNC);\t\t\\\n-      }\t\t\t\t\t\t\t\t\t\\\n-    if (TARGET_HARD_FLOAT)\t\t\t\t\t\t\\\n-      {\t\t\t\t\t\t\t\t\t\\\n-\tadd_optab->handlers[(int) TFmode].libfunc\t\t\t\\\n-\t  = init_one_libfunc (ADDTF3_LIBCALL);\t\t\t\t\\\n-\tsub_optab->handlers[(int) TFmode].libfunc\t\t\t\\\n-\t  = init_one_libfunc (SUBTF3_LIBCALL);\t\t\t\t\\\n-\tsmul_optab->handlers[(int) TFmode].libfunc\t\t\t\\\n-\t  = init_one_libfunc (MULTF3_LIBCALL);\t\t\t\t\\\n-\tsdiv_optab->handlers[(int) TFmode].libfunc\t\t\t\\\n-\t  = init_one_libfunc (DIVTF3_LIBCALL);\t\t\t\t\\\n-      }\t\t\t\t\t\t\t\t\t\\\n-  } while (0)\n-\n /* __throw will restore its own return address to be the same as the\n    return address of the function that the throw is being made to.\n    This is unfortunate, because we want to check the original"}, {"sha": "0a4ebe1f5f6702de20afc472f7777090940508f7", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 56, "deletions": 0, "changes": 56, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c15c90bbfe4553f5413341d61e8aa29caf2f647f/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c15c90bbfe4553f5413341d61e8aa29caf2f647f/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=c15c90bbfe4553f5413341d61e8aa29caf2f647f", "patch": "@@ -37,6 +37,7 @@\n #include \"tree.h\"\n #include \"expr.h\"\n #include \"optabs.h\"\n+#include \"libfuncs.h\"\n #include \"except.h\"\n #include \"function.h\"\n #include \"output.h\"\n@@ -279,6 +280,7 @@ static rtx rs6000_expand_ternop_builtin (enum insn_code, tree, rtx);\n static rtx rs6000_expand_builtin (tree, rtx, rtx, enum machine_mode, int);\n static void altivec_init_builtins (void);\n static void rs6000_common_init_builtins (void);\n+static void rs6000_init_libfuncs (void);\n \n static void enable_mask_for_builtins (struct builtin_description *,\n \t\t\t\t\t      int, enum rs6000_builtins,\n@@ -467,6 +469,9 @@ static const char alt_reg_names[][8] =\n #undef TARGET_EXPAND_BUILTIN\n #define TARGET_EXPAND_BUILTIN rs6000_expand_builtin\n \n+#undef TARGET_INIT_LIBFUNCS\n+#define TARGET_INIT_LIBFUNCS rs6000_init_libfuncs\n+\n #if TARGET_MACHO\n #undef TARGET_BINDS_LOCAL_P\n #define TARGET_BINDS_LOCAL_P rs6000_binds_local_p\n@@ -6768,6 +6773,57 @@ rs6000_common_init_builtins (void)\n     }\n }\n \n+static void\n+rs6000_init_libfuncs (void)\n+{\n+  if (!TARGET_HARD_FLOAT)\n+    return;\n+\n+  if (TARGET_AIX)\n+    {\n+      /* Optabs entries for the int->float routines and quad FP\n+\t operations using the standard AIX names.  */\n+      if (! TARGET_POWER2 && ! TARGET_POWERPC)\n+\t{\n+\t  fixdfsi_libfunc = init_one_libfunc (\"__itrunc\");\n+\t  fixunsdfsi_libfunc = init_one_libfunc (\"__uitrunc\");\n+\t}\n+\n+      set_optab_libfunc (add_optab, TFmode, \"_xlqadd\");\n+      set_optab_libfunc (sub_optab, TFmode, \"_xlqsub\");\n+      set_optab_libfunc (smul_optab, TFmode, \"_xlqmul\");\n+      set_optab_libfunc (sdiv_optab, TFmode, \"_xlqdiv\");\n+    }\n+  else if (TARGET_ELF)\n+    {\n+      /* Define library calls for quad FP operations.  These are all\n+\t part of the PowerPC 32bit ABI.  */\n+\n+      set_optab_libfunc (add_optab, TFmode, \"_q_add\");\n+      set_optab_libfunc (sub_optab, TFmode, \"_q_sub\");\n+      set_optab_libfunc (neg_optab, TFmode, \"_q_neg\");\n+      set_optab_libfunc (smul_optab, TFmode, \"_q_mul\");\n+      set_optab_libfunc (sdiv_optab, TFmode, \"_q_div\");\n+      if (TARGET_PPC_GPOPT || TARGET_POWER2)\n+\tset_optab_libfunc (sqrt_optab, TFmode, \"_q_sqrt\");\n+\n+      eqtf2_libfunc = init_one_libfunc (\"_q_feq\");\n+      netf2_libfunc = init_one_libfunc (\"_q_fne\");\n+      gttf2_libfunc = init_one_libfunc (\"_q_fgt\");\n+      getf2_libfunc = init_one_libfunc (\"_q_fge\");\n+      lttf2_libfunc = init_one_libfunc (\"_q_flt\");\n+      letf2_libfunc = init_one_libfunc (\"_q_fle\");\n+      trunctfsf2_libfunc = init_one_libfunc (\"_q_qtos\");\n+      trunctfdf2_libfunc = init_one_libfunc (\"_q_qtod\");\n+      extendsftf2_libfunc = init_one_libfunc (\"_q_stoq\");\n+      extenddftf2_libfunc = init_one_libfunc (\"_q_dtoq\");\n+      floatsitf_libfunc = init_one_libfunc (\"_q_itoq\");\n+      fixtfsi_libfunc = init_one_libfunc (\"_q_qtoi\");\n+      fixunstfsi_libfunc = init_one_libfunc (\"_q_qtou\");\n+    }\n+}\n+\n+\n \f\n /* Expand a block move operation, and return 1 if successful.  Return 0\n    if we should let the compiler generate normal code."}, {"sha": "45928e4498bc127f463fa8211020c3132efdaebd", "filename": "gcc/config/rs6000/sysv4.h", "status": "modified", "additions": 0, "deletions": 57, "changes": 57, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c15c90bbfe4553f5413341d61e8aa29caf2f647f/gcc%2Fconfig%2Frs6000%2Fsysv4.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c15c90bbfe4553f5413341d61e8aa29caf2f647f/gcc%2Fconfig%2Frs6000%2Fsysv4.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Fsysv4.h?ref=c15c90bbfe4553f5413341d61e8aa29caf2f647f", "patch": "@@ -1275,63 +1275,6 @@ ncrtn.o%s\"\n \n #define HANDLE_PRAGMA_PACK_PUSH_POP 1\n \n-/* Define library calls for quad FP operations.  These are all part of the\n-   PowerPC 32bit ABI.  */\n-#define ADDTF3_LIBCALL \"_q_add\"\n-#define DIVTF3_LIBCALL \"_q_div\"\n-#define EXTENDDFTF2_LIBCALL \"_q_dtoq\"\n-#define EQTF2_LIBCALL \"_q_feq\"\n-#define GETF2_LIBCALL \"_q_fge\"\n-#define GTTF2_LIBCALL \"_q_fgt\"\n-#define LETF2_LIBCALL \"_q_fle\"\n-#define LTTF2_LIBCALL \"_q_flt\"\n-#define NETF2_LIBCALL \"_q_fne\"\n-#define FLOATSITF2_LIBCALL \"_q_itoq\"\n-#define MULTF3_LIBCALL \"_q_mul\"\n-#define NEGTF2_LIBCALL \"_q_neg\"\n-#define TRUNCTFDF2_LIBCALL \"_q_qtod\"\n-#define FIX_TRUNCTFSI2_LIBCALL \"_q_qtoi\"\n-#define TRUNCTFSF2_LIBCALL \"_q_qtos\"\n-#define FIXUNS_TRUNCTFSI2_LIBCALL \"_q_qtou\"\n-#define SQRTTF_LIBCALL \"_q_sqrt\"\n-#define EXTENDSFTF2_LIBCALL \"_q_stoq\"\n-#define SUBTF3_LIBCALL \"_q_sub\"\n-#define FLOATUNSSITF2_LIBCALL \"_q_utoq\"\n-\n-#define INIT_TARGET_OPTABS\t\t\t\t\t\t\\\n-  do {\t\t\t\t\t\t\t\t\t\\\n-    if (TARGET_HARD_FLOAT)\t\t\t\t\t\t\\\n-      {\t\t\t\t\t\t\t\t\t\\\n-\tadd_optab->handlers[(int) TFmode].libfunc\t\t\t\\\n-\t  = init_one_libfunc (ADDTF3_LIBCALL);\t\t\t\t\\\n-\tsub_optab->handlers[(int) TFmode].libfunc\t\t\t\\\n-\t  = init_one_libfunc (SUBTF3_LIBCALL);\t\t\t\t\\\n-\tneg_optab->handlers[(int) TFmode].libfunc\t\t\t\\\n-\t  = init_one_libfunc (NEGTF2_LIBCALL);\t\t\t\t\\\n-\tsmul_optab->handlers[(int) TFmode].libfunc\t\t\t\\\n-\t  = init_one_libfunc (MULTF3_LIBCALL);\t\t\t\t\\\n-\tsdiv_optab->handlers[(int) TFmode].libfunc\t\t\t\\\n-\t  = init_one_libfunc (DIVTF3_LIBCALL);\t\t\t\t\\\n-\teqtf2_libfunc = init_one_libfunc (EQTF2_LIBCALL);\t\t\\\n-\tnetf2_libfunc = init_one_libfunc (NETF2_LIBCALL);\t\t\\\n-\tgttf2_libfunc = init_one_libfunc (GTTF2_LIBCALL);\t\t\\\n-\tgetf2_libfunc = init_one_libfunc (GETF2_LIBCALL);\t\t\\\n-\tlttf2_libfunc = init_one_libfunc (LTTF2_LIBCALL);\t\t\\\n-\tletf2_libfunc = init_one_libfunc (LETF2_LIBCALL);\t\t\\\n-\ttrunctfsf2_libfunc = init_one_libfunc (TRUNCTFSF2_LIBCALL);\t\\\n-\ttrunctfdf2_libfunc = init_one_libfunc (TRUNCTFDF2_LIBCALL);\t\\\n-\textendsftf2_libfunc = init_one_libfunc (EXTENDSFTF2_LIBCALL);\t\\\n-\textenddftf2_libfunc = init_one_libfunc (EXTENDDFTF2_LIBCALL);\t\\\n-\tfloatsitf_libfunc = init_one_libfunc (FLOATSITF2_LIBCALL);\t\\\n-\tfixtfsi_libfunc = init_one_libfunc (FIX_TRUNCTFSI2_LIBCALL);\t\\\n-\tfixunstfsi_libfunc\t\t\t\t\t\t\\\n-\t  = init_one_libfunc (FIXUNS_TRUNCTFSI2_LIBCALL);\t\t\\\n-\tif (TARGET_PPC_GPOPT || TARGET_POWER2) \t\t\t\t\\\n-\t  sqrt_optab->handlers[(int) TFmode].libfunc\t\t\t\\\n-\t    = init_one_libfunc (SQRTTF_LIBCALL);\t\t\t\\\n-      }\t\t\t\t\t\t\t\t\t\\\n-  } while (0)\n-\n /* Select a format to encode pointers in exception handling data.  CODE\n    is 0 for data, 1 for code labels, 2 for function pointers.  GLOBAL is\n    true if the symbol may be affected by dynamic relocations.  */"}, {"sha": "9bc7c1f1d2bc58a8f036c5e7ce99417df44358ff", "filename": "gcc/config/rs6000/xcoff.h", "status": "modified", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c15c90bbfe4553f5413341d61e8aa29caf2f647f/gcc%2Fconfig%2Frs6000%2Fxcoff.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c15c90bbfe4553f5413341d61e8aa29caf2f647f/gcc%2Fconfig%2Frs6000%2Fxcoff.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Fxcoff.h?ref=c15c90bbfe4553f5413341d61e8aa29caf2f647f", "patch": "@@ -177,13 +177,6 @@ toc_section ()\t\t\t\t\t\t\\\n #undef  RS6000_MCOUNT\n #define RS6000_MCOUNT \".__mcount\"\n \n-/* Function names to call to do floating point truncation.  */\n-\n-#undef  RS6000_ITRUNC\n-#define RS6000_ITRUNC \"__itrunc\"\n-#undef  RS6000_UITRUNC\n-#define RS6000_UITRUNC \"__uitrunc\"\n-\n /* This outputs NAME to FILE up to the first null or '['.  */\n \n #define RS6000_OUTPUT_BASENAME(FILE, NAME) \\"}, {"sha": "5f01a34b5905576f94189d8fcc29ca80780cec75", "filename": "gcc/config/sparc/elf.h", "status": "modified", "additions": 6, "deletions": 11, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c15c90bbfe4553f5413341d61e8aa29caf2f647f/gcc%2Fconfig%2Fsparc%2Felf.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c15c90bbfe4553f5413341d61e8aa29caf2f647f/gcc%2Fconfig%2Fsparc%2Felf.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Felf.h?ref=c15c90bbfe4553f5413341d61e8aa29caf2f647f", "patch": "@@ -42,14 +42,9 @@ Boston, MA 02111-1307, USA.  */\n #undef STDC_0_IN_SYSTEM_HEADERS\n \n /* We don't want to use the Solaris2 specific long long int conversion\n-   routines.  */\n-#undef INIT_SUBTARGET_OPTABS\n-#define INIT_SUBTARGET_OPTABS\n-\n-/* ??? We haven't added Solaris2 equivalent 64 bit library routines to\n-   lb1sp*.asm, so we need to avoid using them.  */\n-#undef MULDI3_LIBCALL\n-#undef DIVDI3_LIBCALL\n-#undef UDIVDI3_LIBCALL\n-#undef MODDI3_LIBCALL\n-#undef UMODDI3_LIBCALL\n+   routines or 64-bit integer multiply and divide routines.  */\n+#undef SUN_CONVERSION_LIBFUNCS\n+#define SUN_CONVERSION_LIBFUNCS 0\n+\n+#undef SUN_INTEGER_MULTIPLY_64\n+#define SUN_INTEGER_MULTIPLY_64 0"}, {"sha": "cac67ec1d0b672a514dabf3c4f2c071b346f68cc", "filename": "gcc/config/sparc/lite.h", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c15c90bbfe4553f5413341d61e8aa29caf2f647f/gcc%2Fconfig%2Fsparc%2Flite.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c15c90bbfe4553f5413341d61e8aa29caf2f647f/gcc%2Fconfig%2Fsparc%2Flite.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Flite.h?ref=c15c90bbfe4553f5413341d61e8aa29caf2f647f", "patch": "@@ -27,6 +27,5 @@ Boston, MA 02111-1307, USA.  */\n #undef TARGET_DEFAULT\n #define TARGET_DEFAULT MASK_APP_REGS\n \n-/* US Software GOFAST library support.  */\n-#undef INIT_SUBTARGET_OPTABS\n-#define INIT_SUBTARGET_OPTABS INIT_GOFAST_OPTABS\n+/* Enable US Software GOFAST library support.  */\n+#define US_SOFTWARE_GOFAST"}, {"sha": "b33690727b3ea6ce770d3890edae856cf87c3898", "filename": "gcc/config/sparc/liteelf.h", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c15c90bbfe4553f5413341d61e8aa29caf2f647f/gcc%2Fconfig%2Fsparc%2Fliteelf.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c15c90bbfe4553f5413341d61e8aa29caf2f647f/gcc%2Fconfig%2Fsparc%2Fliteelf.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fliteelf.h?ref=c15c90bbfe4553f5413341d61e8aa29caf2f647f", "patch": "@@ -43,9 +43,8 @@ Boston, MA 02111-1307, USA.  */\n #undef TARGET_DEFAULT\n #define TARGET_DEFAULT MASK_APP_REGS\n \n-/* US Software GOFAST library support.  */\n-#undef INIT_SUBTARGET_OPTABS\n-#define INIT_SUBTARGET_OPTABS INIT_GOFAST_OPTABS      \n+/* Enable US Software GOFAST library support.  */\n+#define US_SOFTWARE_GOFAST\n \n #undef STARTFILE_SPEC\n #define STARTFILE_SPEC \"crti.o%s crtbegin.o%s\""}, {"sha": "4ac2fdae5ace099648a2e9308f7e44a3e50a2cd3", "filename": "gcc/config/sparc/netbsd-elf.h", "status": "modified", "additions": 0, "deletions": 13, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c15c90bbfe4553f5413341d61e8aa29caf2f647f/gcc%2Fconfig%2Fsparc%2Fnetbsd-elf.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c15c90bbfe4553f5413341d61e8aa29caf2f647f/gcc%2Fconfig%2Fsparc%2Fnetbsd-elf.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fnetbsd-elf.h?ref=c15c90bbfe4553f5413341d61e8aa29caf2f647f", "patch": "@@ -98,19 +98,6 @@ Boston, MA 02111-1307, USA.  */\n #undef TARGET_VERSION\n #define TARGET_VERSION fprintf (stderr, \" (%s)\", TARGET_NAME);\n \n-/*\n- * Clean up afterwards generic SPARC ELF configuration.\n- */\n-\n-/* FIXME: Aren't these supposed to be available for SPARC ELF?  */\n-#undef MULDI3_LIBCALL\n-#undef DIVDI3_LIBCALL\n-#undef UDIVDI3_LIBCALL\n-#undef MODDI3_LIBCALL\n-#undef UMODDI3_LIBCALL\n-#undef INIT_SUBTARGET_OPTABS  \n-#define INIT_SUBTARGET_OPTABS  \n-\n /* Below here exists the merged NetBSD/sparc & NetBSD/sparc64 compiler\n    description, allowing one to build 32 bit or 64 bit applications\n    on either.  We define the sparc & sparc64 versions of things,"}, {"sha": "47204f4710e64d3afc6970f0971ccd53f5fe4539", "filename": "gcc/config/sparc/sol2.h", "status": "modified", "additions": 5, "deletions": 16, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c15c90bbfe4553f5413341d61e8aa29caf2f647f/gcc%2Fconfig%2Fsparc%2Fsol2.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c15c90bbfe4553f5413341d61e8aa29caf2f647f/gcc%2Fconfig%2Fsparc%2Fsol2.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsol2.h?ref=c15c90bbfe4553f5413341d61e8aa29caf2f647f", "patch": "@@ -108,28 +108,17 @@ Boston, MA 02111-1307, USA.  */\n /* But indicate that it isn't supported by the hardware.  */\n #define WIDEST_HARDWARE_FP_SIZE 64\n \n-#define MULDI3_LIBCALL \"__mul64\"\n-#define DIVDI3_LIBCALL \"__div64\"\n-#define UDIVDI3_LIBCALL \"__udiv64\"\n-#define MODDI3_LIBCALL \"__rem64\"\n-#define UMODDI3_LIBCALL \"__urem64\"\n-\n /* Solaris's _Qp_* library routine implementation clobbers the output\n    memory before the inputs are fully consumed.  */\n \n #undef TARGET_BUGGY_QP_LIB\n #define TARGET_BUGGY_QP_LIB\t1\n \n-#undef INIT_SUBTARGET_OPTABS\n-#define INIT_SUBTARGET_OPTABS\t\t\t\t\t\t\\\n-  fixsfdi_libfunc\t\t\t\t\t\t\t\\\n-    = init_one_libfunc (TARGET_ARCH64 ? \"__ftol\" : \"__ftoll\");\t\t\\\n-  fixunssfdi_libfunc\t\t\t\t\t\t\t\\\n-    = init_one_libfunc (TARGET_ARCH64 ? \"__ftoul\" : \"__ftoull\");\t\\\n-  fixdfdi_libfunc\t\t\t\t\t\t\t\\\n-    = init_one_libfunc (TARGET_ARCH64 ? \"__dtol\" : \"__dtoll\");\t\t\\\n-  fixunsdfdi_libfunc\t\t\t\t\t\t\t\\\n-    = init_one_libfunc (TARGET_ARCH64 ? \"__dtoul\" : \"__dtoull\")\n+#undef SOLARIS_CONVERSION_LIBFUNCS\n+#define SOLARIS_CONVERSION_LIBFUNCS 1\n+\n+#undef SUN_INTEGER_MULTIPLY_64\n+#define SUN_INTEGER_MULTIPLY_64 1\n \n /* Solaris allows 64 bit out and global registers in 32 bit mode.\n    sparc_override_options will disable V8+ if not generating V9 code.  */"}, {"sha": "04ed624cf722efd17a1f8cfa123100b02278a587", "filename": "gcc/config/sparc/sp86x-elf.h", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c15c90bbfe4553f5413341d61e8aa29caf2f647f/gcc%2Fconfig%2Fsparc%2Fsp86x-elf.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c15c90bbfe4553f5413341d61e8aa29caf2f647f/gcc%2Fconfig%2Fsparc%2Fsp86x-elf.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsp86x-elf.h?ref=c15c90bbfe4553f5413341d61e8aa29caf2f647f", "patch": "@@ -46,9 +46,8 @@ Boston, MA 02111-1307, USA.  */\n #undef ASM_SPEC\n #define ASM_SPEC \"%{v:-V} %{mlittle-endian-data:--little-endian-data} %(asm_cpu)\"\n \n-/* US Software GOFAST library support.  */\n-#undef INIT_SUBTARGET_OPTABS\n-#define INIT_SUBTARGET_OPTABS INIT_GOFAST_OPTABS      \n+/* Enable US Software GOFAST library support.  */\n+#define US_SOFTWARE_GOFAST\n \n #undef STARTFILE_SPEC\n #define STARTFILE_SPEC \"crti.o%s crtbegin.o%s\""}, {"sha": "28275b724d996fc27f1c5bfe6bc748fac794428b", "filename": "gcc/config/sparc/sparc.c", "status": "modified", "additions": 93, "deletions": 0, "changes": 93, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c15c90bbfe4553f5413341d61e8aa29caf2f647f/gcc%2Fconfig%2Fsparc%2Fsparc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c15c90bbfe4553f5413341d61e8aa29caf2f647f/gcc%2Fconfig%2Fsparc%2Fsparc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsparc.c?ref=c15c90bbfe4553f5413341d61e8aa29caf2f647f", "patch": "@@ -180,6 +180,7 @@ static void emit_soft_tfmode_cvt (enum rtx_code, rtx *);\n static void emit_hard_tfmode_operation (enum rtx_code, rtx *);\n \n static bool sparc_function_ok_for_sibcall (tree, tree);\n+static void sparc_init_libfuncs (void);\n static void sparc_output_mi_thunk (FILE *, tree, HOST_WIDE_INT,\n \t\t\t\t   HOST_WIDE_INT, tree);\n static struct machine_function * sparc_init_machine_status (void);\n@@ -252,6 +253,9 @@ enum processor_type sparc_cpu;\n #undef TARGET_FUNCTION_OK_FOR_SIBCALL\n #define TARGET_FUNCTION_OK_FOR_SIBCALL sparc_function_ok_for_sibcall\n \n+#undef TARGET_INIT_LIBFUNCS\n+#define TARGET_INIT_LIBFUNCS sparc_init_libfuncs\n+\n #ifdef HAVE_AS_TLS\n #undef TARGET_HAVE_TLS\n #define TARGET_HAVE_TLS true\n@@ -8386,7 +8390,96 @@ sparc_function_ok_for_sibcall (tree decl, tree exp ATTRIBUTE_UNUSED)\n \t  && ! TARGET_FLAT\n \t  && (TARGET_ARCH64 || ! current_function_returns_struct));\n }\n+\f\n+/* libfunc renaming.  */\n+#include \"config/gofast.h\"\n+\n+static void\n+sparc_init_libfuncs (void)\n+{\n+  if (TARGET_ARCH32)\n+    {\n+      /* Use the subroutines that Sun's library provides for integer\n+\t multiply and divide.  The `*' prevents an underscore from\n+\t being prepended by the compiler. .umul is a little faster\n+\t than .mul. */\n+      set_optab_libfunc (smul_optab, SImode, \"*.umul\");\n+      set_optab_libfunc (sdiv_optab, SImode, \"*.div\");\n+      set_optab_libfunc (udiv_optab, SImode, \"*.udiv\");\n+      set_optab_libfunc (smod_optab, SImode, \"*.rem\");\n+      set_optab_libfunc (umod_optab, SImode, \"*.urem\");\n+\n+      /* TFmode arithmetic.  These names are part of the SPARC 32bit ABI.  */\n+      set_optab_libfunc (add_optab, TFmode, \"_Q_add\");\n+      set_optab_libfunc (sub_optab, TFmode, \"_Q_sub\");\n+      set_optab_libfunc (neg_optab, TFmode, \"_Q_neg\");\n+      set_optab_libfunc (smul_optab, TFmode, \"_Q_mul\");\n+      set_optab_libfunc (sdiv_optab, TFmode, \"_Q_div\");\n+\n+      /* We can define the TFmode sqrt optab only if TARGET_FPU.  This\n+\t is because with soft-float, the SFmode and DFmode sqrt\n+\t instructions will be absent, and the compiler will notice and\n+\t try to use the TFmode sqrt instruction for calls to the\n+\t builtin function sqrt, but this fails.  */\n+      if (TARGET_FPU)\n+\tset_optab_libfunc (sqrt_optab, TFmode, \"_Q_sqrt\");\n+\n+      eqtf2_libfunc = init_one_libfunc (\"_Q_feq\");\n+      netf2_libfunc = init_one_libfunc (\"_Q_fne\");\n+      gttf2_libfunc = init_one_libfunc (\"_Q_fgt\");\n+      getf2_libfunc = init_one_libfunc (\"_Q_fge\");\n+      lttf2_libfunc = init_one_libfunc (\"_Q_flt\");\n+      letf2_libfunc = init_one_libfunc (\"_Q_fle\");\n+\n+      trunctfsf2_libfunc = init_one_libfunc (\"_Q_qtos\");\n+      trunctfdf2_libfunc = init_one_libfunc (\"_Q_qtod\");\n+      extendsftf2_libfunc = init_one_libfunc (\"_Q_stoq\");\n+      extenddftf2_libfunc = init_one_libfunc (\"_Q_dtoq\");\n+      floatsitf_libfunc = init_one_libfunc (\"_Q_itoq\");\n+      fixtfsi_libfunc = init_one_libfunc (\"_Q_qtoi\");\n+      fixunstfsi_libfunc = init_one_libfunc (\"_Q_qtou\");\n+\n+      if (SUN_CONVERSION_LIBFUNCS)\n+\t{\n+\t  fixsfdi_libfunc = init_one_libfunc (\"__ftoll\");\n+\t  fixunssfdi_libfunc = init_one_libfunc (\"__ftoull\");\n+\t  fixdfdi_libfunc = init_one_libfunc (\"__dtoll\");\n+\t  fixunsdfdi_libfunc = init_one_libfunc (\"__dtoull\");\n+\t}\n+    }\n+  if (TARGET_ARCH64)\n+    {\n+      /* In the SPARC 64bit ABI, SImode multiply and divide functions\n+\t do not exist in the library.  Make sure the compiler does not\n+\t emit calls to them by accident.  (It should always use the\n+         hardware instructions.)  */\n+      set_optab_libfunc (smul_optab, SImode, 0);\n+      set_optab_libfunc (sdiv_optab, SImode, 0);\n+      set_optab_libfunc (udiv_optab, SImode, 0);\n+      set_optab_libfunc (smod_optab, SImode, 0);\n+      set_optab_libfunc (umod_optab, SImode, 0);\n+\n+      if (SUN_INTEGER_MULTIPLY_64)\n+\t{\n+\t  set_optab_libfunc (smul_optab, DImode, \"__mul64\");\n+\t  set_optab_libfunc (sdiv_optab, DImode, \"__div64\");\n+\t  set_optab_libfunc (udiv_optab, DImode, \"__udiv64\");\n+\t  set_optab_libfunc (smod_optab, DImode, \"__rem64\");\n+\t  set_optab_libfunc (umod_optab, DImode, \"__urem64\");\n+\t}\n+\n+      if (SUN_CONVERSION_LIBFUNCS)\n+\t{\n+\t  fixsfdi_libfunc = init_one_libfunc (\"__ftol\");\n+\t  fixunssfdi_libfunc = init_one_libfunc (\"__ftoul\");\n+\t  fixdfdi_libfunc = init_one_libfunc (\"__dtol\");\n+\t  fixunsdfdi_libfunc = init_one_libfunc (\"__dtoul\");\n+\t}\n+    }\n \n+  gofast_maybe_init_libfuncs ();\n+}\n+\f\n /* ??? Similar to the standard section selection, but force reloc-y-ness\n    if SUNOS4_SHARED_LIBRARIES.  Unclear why this helps (as opposed to\n    pretending PIC always on), but that's what the old code did.  */"}, {"sha": "77de509d43047b756f5264ec5665741d5803cd6a", "filename": "gcc/config/sparc/sparc.h", "status": "modified", "additions": 6, "deletions": 87, "changes": 93, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c15c90bbfe4553f5413341d61e8aa29caf2f647f/gcc%2Fconfig%2Fsparc%2Fsparc.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c15c90bbfe4553f5413341d61e8aa29caf2f647f/gcc%2Fconfig%2Fsparc%2Fsparc.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsparc.h?ref=c15c90bbfe4553f5413341d61e8aa29caf2f647f", "patch": "@@ -2411,100 +2411,19 @@ do {                                                                    \\\n /* alloca should avoid clobbering the old register save area.  */\n #define SETJMP_VIA_SAVE_AREA\n \n-/* Define subroutines to call to handle multiply and divide.\n-   Use the subroutines that Sun's library provides.\n-   The `*' prevents an underscore from being prepended by the compiler.  */\n-\n-#define DIVSI3_LIBCALL \"*.div\"\n-#define UDIVSI3_LIBCALL \"*.udiv\"\n-#define MODSI3_LIBCALL \"*.rem\"\n-#define UMODSI3_LIBCALL \"*.urem\"\n-/* .umul is a little faster than .mul.  */\n-#define MULSI3_LIBCALL \"*.umul\"\n-\n-/* Define library calls for quad FP operations.  These are all part of the\n-   SPARC 32bit ABI.  */\n-#define ADDTF3_LIBCALL \"_Q_add\"\n-#define SUBTF3_LIBCALL \"_Q_sub\"\n-#define NEGTF2_LIBCALL \"_Q_neg\"\n-#define MULTF3_LIBCALL \"_Q_mul\"\n-#define DIVTF3_LIBCALL \"_Q_div\"\n-#define FLOATSITF2_LIBCALL \"_Q_itoq\"\n-#define FIX_TRUNCTFSI2_LIBCALL \"_Q_qtoi\"\n-#define FIXUNS_TRUNCTFSI2_LIBCALL \"_Q_qtou\"\n-#define EXTENDSFTF2_LIBCALL \"_Q_stoq\"\n-#define TRUNCTFSF2_LIBCALL \"_Q_qtos\"\n-#define EXTENDDFTF2_LIBCALL \"_Q_dtoq\"\n-#define TRUNCTFDF2_LIBCALL \"_Q_qtod\"\n-#define EQTF2_LIBCALL \"_Q_feq\"\n-#define NETF2_LIBCALL \"_Q_fne\"\n-#define GTTF2_LIBCALL \"_Q_fgt\"\n-#define GETF2_LIBCALL \"_Q_fge\"\n-#define LTTF2_LIBCALL \"_Q_flt\"\n-#define LETF2_LIBCALL \"_Q_fle\"\n+/* The _Q_* comparison libcalls return booleans.  */\n+#define FLOAT_LIB_COMPARE_RETURNS_BOOL(MODE, COMPARISON) ((MODE) == TFmode)\n \n /* Assume by default that the _Qp_* 64-bit libcalls are implemented such\n    that the inputs are fully consumed before the output memory is clobbered.  */\n \n #define TARGET_BUGGY_QP_LIB\t0\n \n-/* We can define the TFmode sqrt optab only if TARGET_FPU.  This is because\n-   with soft-float, the SFmode and DFmode sqrt instructions will be absent,\n-   and the compiler will notice and try to use the TFmode sqrt instruction\n-   for calls to the builtin function sqrt, but this fails.  */\n-#define INIT_TARGET_OPTABS\t\t\t\t\t\t\\\n-  do {\t\t\t\t\t\t\t\t\t\\\n-    if (TARGET_ARCH32)\t\t\t\t\t\t\t\\\n-      {\t\t\t\t\t\t\t\t\t\\\n-\tadd_optab->handlers[(int) TFmode].libfunc\t\t\t\\\n-\t  = init_one_libfunc (ADDTF3_LIBCALL);\t\t\t\t\\\n-\tsub_optab->handlers[(int) TFmode].libfunc\t\t\t\\\n-\t  = init_one_libfunc (SUBTF3_LIBCALL);\t\t\t\t\\\n-\tneg_optab->handlers[(int) TFmode].libfunc\t\t\t\\\n-\t  = init_one_libfunc (NEGTF2_LIBCALL);\t\t\t\t\\\n-\tsmul_optab->handlers[(int) TFmode].libfunc\t\t\t\\\n-\t  = init_one_libfunc (MULTF3_LIBCALL);\t\t\t\t\\\n-\tsdiv_optab->handlers[(int) TFmode].libfunc\t\t\t\\\n-\t  = init_one_libfunc (DIVTF3_LIBCALL);\t\t\t\t\\\n-\teqtf2_libfunc = init_one_libfunc (EQTF2_LIBCALL);\t\t\\\n-\tnetf2_libfunc = init_one_libfunc (NETF2_LIBCALL);\t\t\\\n-\tgttf2_libfunc = init_one_libfunc (GTTF2_LIBCALL);\t\t\\\n-\tgetf2_libfunc = init_one_libfunc (GETF2_LIBCALL);\t\t\\\n-\tlttf2_libfunc = init_one_libfunc (LTTF2_LIBCALL);\t\t\\\n-\tletf2_libfunc = init_one_libfunc (LETF2_LIBCALL);\t\t\\\n-\ttrunctfsf2_libfunc = init_one_libfunc (TRUNCTFSF2_LIBCALL);\t\\\n-\ttrunctfdf2_libfunc = init_one_libfunc (TRUNCTFDF2_LIBCALL);\t\\\n-\textendsftf2_libfunc = init_one_libfunc (EXTENDSFTF2_LIBCALL);\t\\\n-\textenddftf2_libfunc = init_one_libfunc (EXTENDDFTF2_LIBCALL);\t\\\n-\tfloatsitf_libfunc = init_one_libfunc (FLOATSITF2_LIBCALL);\t\\\n-\tfixtfsi_libfunc = init_one_libfunc (FIX_TRUNCTFSI2_LIBCALL);\t\\\n-\tfixunstfsi_libfunc\t\t\t\t\t\t\\\n-\t  = init_one_libfunc (FIXUNS_TRUNCTFSI2_LIBCALL);\t\t\\\n-\tif (TARGET_FPU)\t\t\t\t\t\t\t\\\n-\t  sqrt_optab->handlers[(int) TFmode].libfunc\t\t\t\\\n-\t    = init_one_libfunc (\"_Q_sqrt\");\t\t\t\t\\\n-      }\t\t\t\t\t\t\t\t\t\\\n-    if (TARGET_ARCH64)\t\t\t\t\t\t\t\\\n-      {\t\t\t\t\t\t\t\t\t\\\n-        /* In the SPARC 64bit ABI, these libfuncs do not exist in the\t\\\n-           library.  Make sure the compiler does not emit calls to them\t\\\n-\t   by accident.  */\t\t\t\t\t\t\\\n-\tsdiv_optab->handlers[(int) SImode].libfunc = NULL;\t\t\\\n-\tudiv_optab->handlers[(int) SImode].libfunc = NULL;\t\t\\\n-\tsmod_optab->handlers[(int) SImode].libfunc = NULL;\t\t\\\n-\tumod_optab->handlers[(int) SImode].libfunc = NULL;\t\t\\\n-        smul_optab->handlers[(int) SImode].libfunc = NULL;\t\t\\\n-      }\t\t\t\t\t\t\t\t\t\\\n-    INIT_SUBTARGET_OPTABS;\t\t\t\t\t\t\\\n-  } while (0)\n-\n-/* This is meant to be redefined in the host dependent files */\n-#define INIT_SUBTARGET_OPTABS\n+/* Assume by default that we do not have the Solaris-specific conversion\n+   routines nor 64-bit integer multiply and divide routines.  */\n \n-/* Nonzero if a floating point comparison library call for\n-   mode MODE that will return a boolean value.  Zero if one\n-   of the libgcc2 functions is used.  */\n-#define FLOAT_LIB_COMPARE_RETURNS_BOOL(MODE, COMPARISON) ((MODE) == TFmode)\n+#define SUN_CONVERSION_LIBFUNCS 0\n+#define SUN_INTEGER_MULTIPLY_64 0\n \n /* Compute extra cost of moving data between one register class\n    and another.  */"}, {"sha": "4d681d41b9ddc282945b1844fe9c341ef131b6b5", "filename": "gcc/config/v850/v850.h", "status": "modified", "additions": 0, "deletions": 17, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c15c90bbfe4553f5413341d61e8aa29caf2f647f/gcc%2Fconfig%2Fv850%2Fv850.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c15c90bbfe4553f5413341d61e8aa29caf2f647f/gcc%2Fconfig%2Fv850%2Fv850.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fv850%2Fv850.h?ref=c15c90bbfe4553f5413341d61e8aa29caf2f647f", "patch": "@@ -1323,23 +1323,6 @@ zbss_section ()\t\t\t\t\t\t\t\t\\\n    is done just by pretending it is already truncated.  */\n #define TRULY_NOOP_TRUNCATION(OUTPREC, INPREC) 1\n \n-#define MULDI3_LIBCALL  \"__muldi3\"\n-#define UCMPDI2_LIBCALL \"__ucmpdi2\"\n-#define CMPDI2_LIBCALL  \"__cmpdi2\"\n-#define NEGDI2_LIBCALL  \"__negdi2\"\n-\n-#define INIT_TARGET_OPTABS \t\t\t\t\\\n-  do\t\t\t\t\t\t\t\\\n-    { \t\t\t\t\t\t\t\\\n-      cmp_optab->handlers[(int) DImode].libfunc\t\t\\\n-\t= init_one_libfunc (CMPDI2_LIBCALL);            \\\n-      ucmp_optab->handlers[(int) DImode].libfunc        \\\n-\t= init_one_libfunc (UCMPDI2_LIBCALL);           \\\n-      neg_optab->handlers[(int) DImode].libfunc\t\t\\\n-\t= init_one_libfunc (NEGDI2_LIBCALL);\t\t\\\n-    }\t\t\t\t\t\t\t\\\n-  while (0)\n-\n /* Specify the machine mode that pointers have.\n    After generation of rtl, the compiler makes no further distinction\n    between pointers and any other objects of this machine mode.  */"}, {"sha": "533ce92b8bd40999fefb0d73139c06cf5140b4a9", "filename": "gcc/config/vax/elf.h", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c15c90bbfe4553f5413341d61e8aa29caf2f647f/gcc%2Fconfig%2Fvax%2Felf.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c15c90bbfe4553f5413341d61e8aa29caf2f647f/gcc%2Fconfig%2Fvax%2Felf.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fvax%2Felf.h?ref=c15c90bbfe4553f5413341d61e8aa29caf2f647f", "patch": "@@ -19,6 +19,9 @@ along with GCC; see the file COPYING.  If not, write to\n the Free Software Foundation, 59 Temple Place - Suite 330,\n Boston, MA 02111-1307, USA.  */\n \n+#undef TARGET_ELF\n+#define TARGET_ELF 1\n+\n #undef REGISTER_PREFIX\n #undef REGISTER_NAMES\n #define REGISTER_PREFIX \"%\"\n@@ -70,12 +73,6 @@ Boston, MA 02111-1307, USA.  */\n #undef  ASM_OUTPUT_BEFORE_CASE_LABEL\n #define ASM_OUTPUT_BEFORE_CASE_LABEL(FILE, PREFIX, NUM, TABLE)\n \n-/* Get the udiv/urem calls out of the user's namespace.  */\n-#undef  UDIVSI3_LIBCALL\n-#define UDIVSI3_LIBCALL \"*__udiv\"\n-#undef  UMODSI3_LIBCALL\n-#define UMODSI3_LIBCALL \"*__urem\"\n-\n #undef OVERRIDE_OPTIONS\n #define OVERRIDE_OPTIONS\t\t\t\\\n   do\t\t\t\t\t\t\\"}, {"sha": "4f8ffb0c4b2ae15927d081d4e67986bbaf3b565c", "filename": "gcc/config/vax/vax.c", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c15c90bbfe4553f5413341d61e8aa29caf2f647f/gcc%2Fconfig%2Fvax%2Fvax.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c15c90bbfe4553f5413341d61e8aa29caf2f647f/gcc%2Fconfig%2Fvax%2Fvax.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fvax%2Fvax.c?ref=c15c90bbfe4553f5413341d61e8aa29caf2f647f", "patch": "@@ -35,6 +35,7 @@ Boston, MA 02111-1307, USA.  */\n #include \"insn-attr.h\"\n #include \"recog.h\"\n #include \"expr.h\"\n+#include \"optabs.h\"\n #include \"flags.h\"\n #include \"debug.h\"\n #include \"tm_p.h\"\n@@ -43,6 +44,7 @@ Boston, MA 02111-1307, USA.  */\n \n static void vax_output_function_prologue (FILE *, HOST_WIDE_INT);\n static void vax_file_start (void);\n+static void vax_init_libfuncs (void);\n static void vax_output_mi_thunk (FILE *, tree, HOST_WIDE_INT,\n \t\t\t\t HOST_WIDE_INT, tree);\n static int vax_address_cost_1 (rtx);\n@@ -62,6 +64,9 @@ static bool vax_rtx_costs (rtx, int, int, int *);\n #undef TARGET_ASM_FILE_START_APP_OFF\n #define TARGET_ASM_FILE_START_APP_OFF true\n \n+#undef TARGET_INIT_LIBFUNCS\n+#define TARGET_INIT_LIBFUNCS vax_init_libfuncs\n+\n #undef TARGET_ASM_OUTPUT_MI_THUNK\n #define TARGET_ASM_OUTPUT_MI_THUNK vax_output_mi_thunk\n #undef TARGET_ASM_CAN_OUTPUT_MI_THUNK\n@@ -141,6 +146,17 @@ vax_file_start (void)\n     fprintf (asm_out_file, \"___vax_%c_doubles:\\n\", ASM_DOUBLE_CHAR);\n }\n \n+/* We can use the BSD C library routines for the libgcc calls that are\n+   still generated, since that's what they boil down to anyways.  When\n+   ELF, avoid the user's namespace.  */\n+\n+static void\n+vax_init_libfuncs (void)\n+{\n+  set_optab_libfunc (udiv_optab, SImode, TARGET_ELF ? \"*__udiv\" : \"*udiv\");\n+  set_optab_libfunc (umod_optab, SImode, TARGET_ELF ? \"*__umod\" : \"*umod\");\n+}\n+\n /* This is like nonimmediate_operand with a restriction on the type of MEM.  */\n \n void"}, {"sha": "0bbcc277724919757da70a19787835785d8b7b18", "filename": "gcc/config/vax/vax.h", "status": "modified", "additions": 3, "deletions": 8, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c15c90bbfe4553f5413341d61e8aa29caf2f647f/gcc%2Fconfig%2Fvax%2Fvax.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c15c90bbfe4553f5413341d61e8aa29caf2f647f/gcc%2Fconfig%2Fvax%2Fvax.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fvax%2Fvax.h?ref=c15c90bbfe4553f5413341d61e8aa29caf2f647f", "patch": "@@ -78,6 +78,9 @@ extern int target_flags;\n /* Nonzero if compiling with `G'-format floating point */\n #define TARGET_G_FLOAT (target_flags & MASK_G_FLOAT)\n \n+/* Nonzero if ELF.  Redefined by vax/elf.h.  */\n+#define TARGET_ELF 0\n+\n /* Macro to define tables used to set the flags.\n    This is a list in braces of pairs in braces,\n    each pair being { \"NAME\", VALUE }\n@@ -855,14 +858,6 @@ enum reg_class { NO_REGS, ALL_REGS, LIM_REG_CLASSES };\n    used to replace branches can be expensive.  */\n \n #define BRANCH_COST 0\n-\n-/*\n- * We can use the BSD C library routines for the libgcc calls that are\n- * still generated, since that's what they boil down to anyways.\n- */\n-\n-#define UDIVSI3_LIBCALL \"*udiv\"\n-#define UMODSI3_LIBCALL \"*urem\"\n \f\n /* Tell final.c how to eliminate redundant test instructions.  */\n "}, {"sha": "34e9f7baa63bbccdd2e1aa0b5ea64b46400aaff5", "filename": "gcc/defaults.h", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c15c90bbfe4553f5413341d61e8aa29caf2f647f/gcc%2Fdefaults.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c15c90bbfe4553f5413341d61e8aa29caf2f647f/gcc%2Fdefaults.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdefaults.h?ref=c15c90bbfe4553f5413341d61e8aa29caf2f647f", "patch": "@@ -574,6 +574,10 @@ You Lose!  You must define PREFERRED_DEBUGGING_TYPE!\n    && !ROUND_TOWARDS_ZERO)\n #endif\n \n+#ifndef FLOAT_LIB_COMPARE_RETURNS_BOOL\n+#define FLOAT_LIB_COMPARE_RETURNS_BOOL(MODE, COMPARISON) false\n+#endif\n+\n /* If FLOAT_WORDS_BIG_ENDIAN is not defined in the header files,\n    then the word-endianness is the same as for integers.  */\n #ifndef FLOAT_WORDS_BIG_ENDIAN"}, {"sha": "2fa6fbd11e22f76ee8f977814d00c46c8e1e3b26", "filename": "gcc/doc/tm.texi", "status": "modified", "additions": 39, "deletions": 81, "changes": 120, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c15c90bbfe4553f5413341d61e8aa29caf2f647f/gcc%2Fdoc%2Ftm.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c15c90bbfe4553f5413341d61e8aa29caf2f647f/gcc%2Fdoc%2Ftm.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Ftm.texi?ref=c15c90bbfe4553f5413341d61e8aa29caf2f647f", "patch": "@@ -4630,96 +4630,54 @@ special assembler code.\n @c prevent bad page break with this line\n Here is an explanation of implicit calls to library routines.\n \n-@defmac MULSI3_LIBCALL\n-A C string constant giving the name of the function to call for\n-multiplication of one signed full-word by another.  If you do not\n-define this macro, the default name is used, which is @code{__mulsi3},\n-a function defined in @file{libgcc.a}.\n-@end defmac\n-\n-@defmac DIVSI3_LIBCALL\n-A C string constant giving the name of the function to call for\n-division of one signed full-word by another.  If you do not define\n-this macro, the default name is used, which is @code{__divsi3}, a\n-function defined in @file{libgcc.a}.\n-@end defmac\n-\n-@defmac UDIVSI3_LIBCALL\n-A C string constant giving the name of the function to call for\n-division of one unsigned full-word by another.  If you do not define\n-this macro, the default name is used, which is @code{__udivsi3}, a\n-function defined in @file{libgcc.a}.\n-@end defmac\n-\n-@defmac MODSI3_LIBCALL\n-A C string constant giving the name of the function to call for the\n-remainder in division of one signed full-word by another.  If you do\n-not define this macro, the default name is used, which is\n-@code{__modsi3}, a function defined in @file{libgcc.a}.\n-@end defmac\n-\n-@defmac UMODSI3_LIBCALL\n-A C string constant giving the name of the function to call for the\n-remainder in division of one unsigned full-word by another.  If you do\n-not define this macro, the default name is used, which is\n-@code{__umodsi3}, a function defined in @file{libgcc.a}.\n-@end defmac\n-\n-@defmac MULDI3_LIBCALL\n-A C string constant giving the name of the function to call for\n-multiplication of one signed double-word by another.  If you do not\n-define this macro, the default name is used, which is @code{__muldi3},\n-a function defined in @file{libgcc.a}.\n-@end defmac\n-\n-@defmac DIVDI3_LIBCALL\n-A C string constant giving the name of the function to call for\n-division of one signed double-word by another.  If you do not define\n-this macro, the default name is used, which is @code{__divdi3}, a\n-function defined in @file{libgcc.a}.\n-@end defmac\n-\n-@defmac UDIVDI3_LIBCALL\n-A C string constant giving the name of the function to call for\n-division of one unsigned full-word by another.  If you do not define\n-this macro, the default name is used, which is @code{__udivdi3}, a\n-function defined in @file{libgcc.a}.\n-@end defmac\n-\n-@defmac MODDI3_LIBCALL\n-A C string constant giving the name of the function to call for the\n-remainder in division of one signed double-word by another.  If you do\n-not define this macro, the default name is used, which is\n-@code{__moddi3}, a function defined in @file{libgcc.a}.\n-@end defmac\n-\n-@defmac UMODDI3_LIBCALL\n-A C string constant giving the name of the function to call for the\n-remainder in division of one unsigned full-word by another.  If you do\n-not define this macro, the default name is used, which is\n-@code{__umoddi3}, a function defined in @file{libgcc.a}.\n-@end defmac\n-\n @defmac DECLARE_LIBRARY_RENAMES\n This macro, if defined, should expand to a piece of C code that will get\n expanded when compiling functions for libgcc.a.  It can be used to\n provide alternate names for gcc's internal library functions if there\n are ABI-mandated names that the compiler should provide.\n @end defmac\n \n-@defmac INIT_TARGET_OPTABS\n-Define this macro as a C statement that declares additional library\n-routines renames existing ones.  @code{init_optabs} calls this macro after\n-initializing all the normal library routines.\n-@end defmac\n+@findex init_one_libfunc\n+@findex set_optab_libfunc\n+@deftypefn {Target Hook} void TARGET_INIT_LIBFUNCS (void)\n+This hook should declare additional library routines or rename\n+existing ones, using the functions @code{set_optab_libfunc} and\n+@code{init_one_libfunc} defined in @file{optabs.c}.\n+@code{init_optabs} calls this macro after initializing all the normal\n+library routines.\n \n-@defmac FLOAT_LIB_COMPARE_RETURNS_BOOL (@var{mode}, @var{comparison})\n-Define this macro as a C statement that returns nonzero if a call to\n-the floating point comparison library function will return a boolean\n-value that indicates the result of the comparison.  It should return\n-zero if one of gcc's own libgcc functions is called.\n+The default is to do nothing.  Most ports don't need to define this hook.\n+@end deftypefn\n \n-Most ports don't need to define this macro.\n+@defmac TARGET_FLOAT_LIB_COMPARE_RETURNS_BOOL (@var{mode}, @var{comparison})\n+This macro should return @code{true} if the library routine that\n+implements the floating point comparison operator @var{comparison} in\n+mode @var{mode} will return a boolean, and @var{false} if it will\n+return a tristate.\n+\n+GCC's own floating point libraries return tristates from the\n+comparison operators, so the default returns false always.  Most ports\n+don't need to define this macro.\n+@end defmac\n+\n+@cindex US Software GOFAST, floating point emulation library\n+@cindex floating point emulation library, US Software GOFAST\n+@cindex GOFAST, floating point emulation library\n+@findex gofast_maybe_init_libfuncs\n+@defmac US_SOFTWARE_GOFAST\n+Define this macro if your system C library uses the US Software GOFAST\n+library to provide floating point emulation.  \n+\n+In addition to defining this macro, your architecture must set\n+@code{TARGET_INIT_LIBFUNCS} to @code{gofast_maybe_init_libfuncs}, or\n+else call that function from its version of that hook.  It is defined\n+in @file{config/gofast.h}, which must be included by your\n+architecture's @file{@var{cpu}.c} file.  See @file{sparc/sparc.c} for\n+an example.\n+\n+If this macro is defined, the\n+@code{TARGET_FLOAT_LIB_COMPARE_RETURNS_BOOL} target hook must return\n+false for @code{SFmode} and @code{DFmode} comparisons.\n @end defmac\n \n @cindex @code{EDOM}, implicit usage"}, {"sha": "c598ff7193ae769ee0e539b5f0de8a2be3739d90", "filename": "gcc/expr.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c15c90bbfe4553f5413341d61e8aa29caf2f647f/gcc%2Fexpr.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c15c90bbfe4553f5413341d61e8aa29caf2f647f/gcc%2Fexpr.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpr.h?ref=c15c90bbfe4553f5413341d61e8aa29caf2f647f", "patch": "@@ -334,7 +334,6 @@ extern rtx expand_builtin (tree, rtx, rtx, enum machine_mode, int);\n extern void std_expand_builtin_va_start (tree, rtx);\n extern rtx std_expand_builtin_va_arg (tree, tree);\n extern rtx expand_builtin_va_arg (tree, tree);\n-extern void default_init_builtins (void);\n extern rtx default_expand_builtin (tree, rtx, rtx, enum machine_mode, int);\n extern void expand_builtin_setjmp_setup (rtx, rtx);\n extern void expand_builtin_setjmp_receiver (rtx);"}, {"sha": "bd1b42a68eec9f2f562f73db4c939c472177a5ea", "filename": "gcc/optabs.c", "status": "modified", "additions": 15, "deletions": 53, "changes": 68, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c15c90bbfe4553f5413341d61e8aa29caf2f647f/gcc%2Foptabs.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c15c90bbfe4553f5413341d61e8aa29caf2f647f/gcc%2Foptabs.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Foptabs.c?ref=c15c90bbfe4553f5413341d61e8aa29caf2f647f", "patch": "@@ -43,6 +43,7 @@ Software Foundation, 59 Temple Place - Suite 330, Boston, MA\n #include \"ggc.h\"\n #include \"real.h\"\n #include \"basic-block.h\"\n+#include \"target.h\"\n \n /* Each optab contains info on how this target machine\n    can perform a particular operation\n@@ -4198,12 +4199,9 @@ prepare_float_lib_cmp (rtx *px, rtx *py, enum rtx_code *pcomparison,\n   *px = result;\n   *py = const0_rtx;\n   *pmode = word_mode;\n-  if (comparison == UNORDERED)\n+  if (comparison == UNORDERED\n+      || FLOAT_LIB_COMPARE_RETURNS_BOOL (mode, comparison))\n     *pcomparison = NE;\n-#ifdef FLOAT_LIB_COMPARE_RETURNS_BOOL\n-  else if (FLOAT_LIB_COMPARE_RETURNS_BOOL (mode, comparison))\n-    *pcomparison = NE;\n-#endif\n   *punsignedp = 0;\n }\n \f\n@@ -5342,6 +5340,17 @@ init_one_libfunc (const char *name)\n   return symbol;\n }\n \n+/* Call this to reset the function entry for one optab (OPTABLE) in mode\n+   MODE to NAME, which should be either 0 or a string constant.  */\n+void\n+set_optab_libfunc (optab optable, enum machine_mode mode, const char *name)\n+{\n+  if (name)\n+    optable->handlers[mode].libfunc = init_one_libfunc (name);\n+  else\n+    optable->handlers[mode].libfunc = 0;\n+}\n+\n /* Call this once to initialize the contents of the optabs\n    appropriately for the current target machine.  */\n \n@@ -5521,51 +5530,6 @@ init_optabs (void)\n   init_integral_libfuncs (ucmp_optab, \"ucmp\", '2');\n   init_floating_libfuncs (cmp_optab, \"cmp\", '2');\n \n-#ifdef MULSI3_LIBCALL\n-  smul_optab->handlers[(int) SImode].libfunc\n-    = init_one_libfunc (MULSI3_LIBCALL);\n-#endif\n-#ifdef MULDI3_LIBCALL\n-  smul_optab->handlers[(int) DImode].libfunc\n-    = init_one_libfunc (MULDI3_LIBCALL);\n-#endif\n-\n-#ifdef DIVSI3_LIBCALL\n-  sdiv_optab->handlers[(int) SImode].libfunc\n-    = init_one_libfunc (DIVSI3_LIBCALL);\n-#endif\n-#ifdef DIVDI3_LIBCALL\n-  sdiv_optab->handlers[(int) DImode].libfunc\n-    = init_one_libfunc (DIVDI3_LIBCALL);\n-#endif\n-\n-#ifdef UDIVSI3_LIBCALL\n-  udiv_optab->handlers[(int) SImode].libfunc\n-    = init_one_libfunc (UDIVSI3_LIBCALL);\n-#endif\n-#ifdef UDIVDI3_LIBCALL\n-  udiv_optab->handlers[(int) DImode].libfunc\n-    = init_one_libfunc (UDIVDI3_LIBCALL);\n-#endif\n-\n-#ifdef MODSI3_LIBCALL\n-  smod_optab->handlers[(int) SImode].libfunc\n-    = init_one_libfunc (MODSI3_LIBCALL);\n-#endif\n-#ifdef MODDI3_LIBCALL\n-  smod_optab->handlers[(int) DImode].libfunc\n-    = init_one_libfunc (MODDI3_LIBCALL);\n-#endif\n-\n-#ifdef UMODSI3_LIBCALL\n-  umod_optab->handlers[(int) SImode].libfunc\n-    = init_one_libfunc (UMODSI3_LIBCALL);\n-#endif\n-#ifdef UMODDI3_LIBCALL\n-  umod_optab->handlers[(int) DImode].libfunc\n-    = init_one_libfunc (UMODDI3_LIBCALL);\n-#endif\n-\n   /* Use cabs for DC complex abs, since systems generally have cabs.\n      Don't define any libcall for SCmode, so that cabs will be used.  */\n   abs_optab->handlers[(int) DCmode].libfunc\n@@ -5711,10 +5675,8 @@ init_optabs (void)\n   if (HAVE_conditional_trap)\n     trap_rtx = gen_rtx_fmt_ee (EQ, VOIDmode, NULL_RTX, NULL_RTX);\n \n-#ifdef INIT_TARGET_OPTABS\n   /* Allow the target to add more libcalls or rename some, etc.  */\n-  INIT_TARGET_OPTABS;\n-#endif\n+  targetm.init_libfuncs ();\n }\n \f\n /* Generate insns to trap with code TCODE if OP1 and OP2 satisfy condition"}, {"sha": "dc515b345298e24c71c869e20840122fa94feecb", "filename": "gcc/optabs.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c15c90bbfe4553f5413341d61e8aa29caf2f647f/gcc%2Foptabs.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c15c90bbfe4553f5413341d61e8aa29caf2f647f/gcc%2Foptabs.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Foptabs.h?ref=c15c90bbfe4553f5413341d61e8aa29caf2f647f", "patch": "@@ -366,6 +366,9 @@ extern rtx gen_extend_insn (rtx, rtx, enum machine_mode,\n extern void init_fixtab (void);\n extern void init_floattab (void);\n \n+/* Call this to reset the function entry for one optab.  */\n+extern void set_optab_libfunc (optab, enum machine_mode, const char *);\n+\n /* Generate code for a FLOAT_EXPR.  */\n extern void expand_float (rtx, rtx, int);\n "}, {"sha": "e5606a3a5bc48cd0ebbace5ded602e954b088921", "filename": "gcc/target-def.h", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c15c90bbfe4553f5413341d61e8aa29caf2f647f/gcc%2Ftarget-def.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c15c90bbfe4553f5413341d61e8aa29caf2f647f/gcc%2Ftarget-def.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftarget-def.h?ref=c15c90bbfe4553f5413341d61e8aa29caf2f647f", "patch": "@@ -261,7 +261,7 @@ Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.\n #define TARGET_ADDRESS_COST default_address_cost\n \n /* In builtins.c.  */\n-#define TARGET_INIT_BUILTINS default_init_builtins\n+#define TARGET_INIT_BUILTINS hook_void_void\n #define TARGET_EXPAND_BUILTIN default_expand_builtin\n \n /* In varasm.c.  */\n@@ -300,6 +300,10 @@ Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.\n #define TARGET_MS_BITFIELD_LAYOUT_P hook_bool_tree_false\n #define TARGET_RTX_COSTS hook_bool_rtx_int_int_intp_false\n \n+#ifndef TARGET_INIT_LIBFUNCS\n+#define TARGET_INIT_LIBFUNCS hook_void_void\n+#endif\n+\n #ifndef TARGET_IN_SMALL_DATA_P\n #define TARGET_IN_SMALL_DATA_P hook_bool_tree_false\n #endif\n@@ -349,6 +353,7 @@ Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.\n   TARGET_MS_BITFIELD_LAYOUT_P,\t\t\t\\\n   TARGET_INIT_BUILTINS,\t\t\t\t\\\n   TARGET_EXPAND_BUILTIN,\t\t\t\\\n+  TARGET_INIT_LIBFUNCS,\t\t\t\t\\\n   TARGET_SECTION_TYPE_FLAGS,\t\t\t\\\n   TARGET_CANNOT_MODIFY_JUMPS_P,\t\t\t\\\n   TARGET_BRANCH_TARGET_REGISTER_CLASS,\t\\"}, {"sha": "5a571284b7a7b5696f2687b7b1235c3f60ee567e", "filename": "gcc/target.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c15c90bbfe4553f5413341d61e8aa29caf2f647f/gcc%2Ftarget.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c15c90bbfe4553f5413341d61e8aa29caf2f647f/gcc%2Ftarget.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftarget.h?ref=c15c90bbfe4553f5413341d61e8aa29caf2f647f", "patch": "@@ -289,6 +289,9 @@ struct gcc_target\n   rtx (* expand_builtin) (tree exp, rtx target, rtx subtarget,\n \t\t\t  enum machine_mode mode, int ignore);\n \n+  /* Make any adjustments to libfunc names needed for this target.  */\n+  void (* init_libfuncs) (void);\n+\n   /* Given a decl, a section name, and whether the decl initializer\n      has relocs, choose attributes for the section.  */\n   /* ??? Should be merged with SELECT_SECTION and UNIQUE_SECTION.  */"}]}