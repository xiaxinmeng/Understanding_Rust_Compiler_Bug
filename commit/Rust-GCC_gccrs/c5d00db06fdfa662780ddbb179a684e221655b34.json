{"sha": "c5d00db06fdfa662780ddbb179a684e221655b34", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzVkMDBkYjA2ZmRmYTY2Mjc4MGRkYmIxNzlhNjg0ZTIyMTY1NWIzNA==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2013-01-02T09:38:07Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2013-01-02T09:38:07Z"}, "message": "[multiple changes]\n\n2013-01-02  Thomas Quinot  <quinot@adacore.com>\n\n\t* exp_prag.adb (Expand_Pragma_Check): The statements generated\n\tfor the pragma must have the sloc of the pragma, not the\n\tsloc of the condition, otherwise this creates anomalies in the\n\tgenerated debug information that confuse coverage analysis tools.\n\n2013-01-02  Thomas Quinot  <quinot@adacore.com>\n\n\t* sem_ch13.adb: Minor reformatting.\n\n2013-01-02  Arnaud Charlet  <charlet@adacore.com>\n\n\t* g-excact.ads (Core_Dump): Clarify that this subprogram does\n\tnot dump cores under Windows.\n\n2013-01-02  Ed Schonberg  <schonberg@adacore.com>\n\n\t* sem_ch8.adb (Analyze_Primitive_Renamed_Operation): The prefixed\n\tview of a subprogram has convention Intrnnsic, and a renaming\n\tof a prefixed view cannot be the prefix of an Access attribute.\n\n2013-01-02  Robert Dewar  <dewar@adacore.com>\n\n\t* restrict.adb: Minor reformatting.\n\nFrom-SVN: r194782", "tree": {"sha": "3810f64351197f20c896eb6cb7beebeef3afda79", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3810f64351197f20c896eb6cb7beebeef3afda79"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c5d00db06fdfa662780ddbb179a684e221655b34", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c5d00db06fdfa662780ddbb179a684e221655b34", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c5d00db06fdfa662780ddbb179a684e221655b34", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c5d00db06fdfa662780ddbb179a684e221655b34/comments", "author": null, "committer": null, "parents": [{"sha": "39ce7604727100ff8abd1e5513a303b6df499b7a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/39ce7604727100ff8abd1e5513a303b6df499b7a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/39ce7604727100ff8abd1e5513a303b6df499b7a"}], "stats": {"total": 90, "additions": 71, "deletions": 19}, "files": [{"sha": "e92b0d765a68acf58eb180be5394099212eb2762", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c5d00db06fdfa662780ddbb179a684e221655b34/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c5d00db06fdfa662780ddbb179a684e221655b34/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=c5d00db06fdfa662780ddbb179a684e221655b34", "patch": "@@ -1,3 +1,29 @@\n+2013-01-02  Thomas Quinot  <quinot@adacore.com>\n+\n+\t* exp_prag.adb (Expand_Pragma_Check): The statements generated\n+\tfor the pragma must have the sloc of the pragma, not the\n+\tsloc of the condition, otherwise this creates anomalies in the\n+\tgenerated debug information that confuse coverage analysis tools.\n+\n+2013-01-02  Thomas Quinot  <quinot@adacore.com>\n+\n+\t* sem_ch13.adb: Minor reformatting.\n+\n+2013-01-02  Arnaud Charlet  <charlet@adacore.com>\n+\n+\t* g-excact.ads (Core_Dump): Clarify that this subprogram does\n+\tnot dump cores under Windows.\n+\n+2013-01-02  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* sem_ch8.adb (Analyze_Primitive_Renamed_Operation): The prefixed\n+\tview of a subprogram has convention Intrnnsic, and a renaming\n+\tof a prefixed view cannot be the prefix of an Access attribute.\n+\n+2013-01-02  Robert Dewar  <dewar@adacore.com>\n+\n+\t* restrict.adb: Minor reformatting.\n+\n 2013-01-02  Thomas Quinot  <quinot@adacore.com>\n \n \t* exp_prag.adb: Minor reformatting."}, {"sha": "f607b37faa3b1bc72c5a78a24a02398ccb41b450", "filename": "gcc/ada/exp_prag.adb", "status": "modified", "additions": 17, "deletions": 9, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c5d00db06fdfa662780ddbb179a684e221655b34/gcc%2Fada%2Fexp_prag.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c5d00db06fdfa662780ddbb179a684e221655b34/gcc%2Fada%2Fexp_prag.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_prag.adb?ref=c5d00db06fdfa662780ddbb179a684e221655b34", "patch": "@@ -274,18 +274,18 @@ package body Exp_Prag is\n    --------------------------\n \n    procedure Expand_Pragma_Check (N : Node_Id) is\n+      Loc  : constant Source_Ptr := Sloc (N);\n+      --  Location of the pragma node. Note: it is important to use this\n+      --  location (and not the location of the expression) for the generated\n+      --  statements, otherwise the implicit return statement in the body\n+      --  of a pre/postcondition subprogram may inherit the source location\n+      --  of part of the expression, which causes confusing debug information\n+      --  to be generated, which interferes with coverage analysis tools.\n+\n       Cond : constant Node_Id := Arg2 (N);\n       Nam  : constant Name_Id := Chars (Arg1 (N));\n       Msg  : Node_Id;\n \n-      Loc  : constant Source_Ptr := Sloc (First_Node (Cond));\n-      --  Source location used in the case of a failed assertion. Note that\n-      --  the source location of the expression is not usually the best choice\n-      --  here. For example, it gets located on the last AND keyword in a\n-      --  chain of boolean expressiond AND'ed together. It is best to put the\n-      --  message on the first character of the assertion, which is the effect\n-      --  of the First_Node call here.\n-\n    begin\n       --  We already know that this check is enabled, because otherwise the\n       --  semantic pass dealt with rewriting the assertion (see Sem_Prag)\n@@ -362,7 +362,15 @@ package body Exp_Prag is\n \n          else\n             declare\n-               Msg_Loc : constant String := Build_Location_String (Loc);\n+               Msg_Loc : constant String :=\n+                           Build_Location_String (Sloc (First_Node (Cond)));\n+               --  Source location used in the case of a failed assertion:\n+               --  point to the failing condition, not Loc. Note that the\n+               --  source location of the expression is not usually the best\n+               --  choice here. For example, it gets located on the last AND\n+               --  keyword in a chain of boolean expressiond AND'ed together.\n+               --  It is best to put the message on the first character of the\n+               --  condition, which is the effect of the First_Node call here.\n \n             begin\n                Name_Len := 0;"}, {"sha": "6111bc7fd0212175bf6f06125c98bd3667ebc55a", "filename": "gcc/ada/g-excact.ads", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c5d00db06fdfa662780ddbb179a684e221655b34/gcc%2Fada%2Fg-excact.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c5d00db06fdfa662780ddbb179a684e221655b34/gcc%2Fada%2Fg-excact.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fg-excact.ads?ref=c5d00db06fdfa662780ddbb179a684e221655b34", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 S p e c                                  --\n --                                                                          --\n---          Copyright (C) 2002-2009, Free Software Foundation, Inc.         --\n+--          Copyright (C) 2002-2012, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -110,7 +110,9 @@ package GNAT.Exception_Actions is\n    --  is compiled with pragma Restrictions (No_Exception_Registration);\n \n    procedure Core_Dump (Occurrence : Exception_Occurrence);\n-   --  Dump memory (called a core dump in some systems), and abort execution\n-   --  of the application.\n+   --  Dump memory (called a core dump in some systems) if supported by the\n+   --  OS (most unix systems and VMS), and abort execution of the application.\n+   --  Under Windows this procedure will not dump the memory, it will only\n+   --  abort execution.\n \n end GNAT.Exception_Actions;"}, {"sha": "84e576be92db5b1d3cffdf62ba96c25cfb503311", "filename": "gcc/ada/restrict.adb", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c5d00db06fdfa662780ddbb179a684e221655b34/gcc%2Fada%2Frestrict.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c5d00db06fdfa662780ddbb179a684e221655b34/gcc%2Fada%2Frestrict.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Frestrict.adb?ref=c5d00db06fdfa662780ddbb179a684e221655b34", "patch": "@@ -611,8 +611,8 @@ package body Restrict is\n       end if;\n \n       --  Ignore call if node N is not in the main source unit, since we only\n-      --  give messages for . This avoids giving messages for aspects that are\n-      --  specified in withed units.\n+      --  give messages for the main unit. This avoids giving messages for\n+      --  aspects that are specified in withed units.\n \n       if not In_Extended_Main_Source_Unit (N) then\n          return;"}, {"sha": "235af1893849a9b72cf39b9fb95236718d59cd95", "filename": "gcc/ada/sem_ch13.adb", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c5d00db06fdfa662780ddbb179a684e221655b34/gcc%2Fada%2Fsem_ch13.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c5d00db06fdfa662780ddbb179a684e221655b34/gcc%2Fada%2Fsem_ch13.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch13.adb?ref=c5d00db06fdfa662780ddbb179a684e221655b34", "patch": "@@ -1886,7 +1886,7 @@ package body Sem_Ch13 is\n \n             --  In the context of a compilation unit, we directly put the\n             --  pragma in the Pragmas_After list of the\n-            --  N_Compilation_Unit_Aux node (No delay is required here)\n+            --  N_Compilation_Unit_Aux node (no delay is required here)\n             --  except for aspects on a subprogram body (see below).\n \n             if Nkind (Parent (N)) = N_Compilation_Unit\n@@ -2012,8 +2012,8 @@ package body Sem_Ch13 is\n \n       Rewrite (N,\n         Make_Attribute_Definition_Clause (Sloc (N),\n-          Name  => Identifier (N),\n-          Chars => Name_Address,\n+          Name       => Identifier (N),\n+          Chars      => Name_Address,\n           Expression => Expression (N)));\n \n       --  We preserve Comes_From_Source, since logically the clause still comes"}, {"sha": "5564dccdcee69be6aa9ca670f78e0911e3ec90ce", "filename": "gcc/ada/sem_ch8.adb", "status": "modified", "additions": 18, "deletions": 2, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c5d00db06fdfa662780ddbb179a684e221655b34/gcc%2Fada%2Fsem_ch8.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c5d00db06fdfa662780ddbb179a684e221655b34/gcc%2Fada%2Fsem_ch8.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch8.adb?ref=c5d00db06fdfa662780ddbb179a684e221655b34", "patch": "@@ -397,8 +397,10 @@ package body Sem_Ch8 is\n       New_S   : Entity_Id;\n       Is_Body : Boolean);\n    --  If the renamed entity in a subprogram renaming is a primitive operation\n-   --  or a class-wide operation in prefix form, save the target object, which\n-   --  must be added to the list of actuals in any subsequent call.\n+   --  or a class-wide operation in prefix form, save the target object,\n+   --  which must be added to the list of actuals in any subsequent call.\n+   --  The renaming operation is intrinsic because the compiler must in\n+   --  fact generate a wrapper for it (6.3.1 (10 1/2)).\n \n    function Applicable_Use (Pack_Name : Node_Id) return Boolean;\n    --  Common code to Use_One_Package and Set_Use, to determine whether use\n@@ -1602,6 +1604,10 @@ package body Sem_Ch8 is\n       --  match. The first formal of the renamed entity is skipped because it\n       --  is the target object in any subsequent call.\n \n+      --------------\n+      -- Conforms --\n+      --------------\n+\n       function Conforms\n         (Subp : Entity_Id;\n          Ctyp : Conformance_Type) return Boolean\n@@ -1634,6 +1640,8 @@ package body Sem_Ch8 is\n          return True;\n       end Conforms;\n \n+   --  Start of processing for Analyze_Renamed_Primitive_Operation\n+\n    begin\n       if not Is_Overloaded (Selector_Name (Name (N))) then\n          Old_S := Entity (Selector_Name (Name (N)));\n@@ -1681,6 +1689,14 @@ package body Sem_Ch8 is\n             if not Conforms (Old_S, Mode_Conformant) then\n                Error_Msg_N (\"mode conformance error in renaming\", N);\n             end if;\n+\n+            --  Enforce the rule given in (RM 6.3.1 (10.1/2)): a prefixed\n+            --  view of a subprogram is intrinsic, because the compiler has\n+            --  to generate a wrapper for any call to it. If the name in a\n+            --  subprogram renaming is a prefixed view, the entity is thus\n+            --  intrinsic, and 'Access cannot be applied to it.\n+\n+            Set_Convention (New_S, Convention_Intrinsic);\n          end if;\n \n          --  Inherit_Renamed_Profile (New_S, Old_S);"}]}