{"sha": "63292ebfb4150f957217ca6243dd6de458242591", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjMyOTJlYmZiNDE1MGY5NTcyMTdjYTYyNDNkZDZkZTQ1ODI0MjU5MQ==", "commit": {"author": {"name": "Steven Bosscher", "email": "stevenb.gcc@gmail.com", "date": "2006-02-28T21:01:20Z"}, "committer": {"name": "Steven Bosscher", "email": "steven@gcc.gnu.org", "date": "2006-02-28T21:01:20Z"}, "message": "alias.c (alias_invariant, [...]): Remove.\n\n\t* alias.c (alias_invariant, alias_invariant_size): Remove.\n\t(record_base_value): Remove.\n        (memrefs_conflict_p): Don't look at alias_invariant.\n        (end_alias_analysis): Don't free it.\n        * alias.h (record_base_value): Remove prototype.\n\nFrom-SVN: r111574", "tree": {"sha": "1859ade00de5bf4460d501f6e70a6779463927e6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1859ade00de5bf4460d501f6e70a6779463927e6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/63292ebfb4150f957217ca6243dd6de458242591", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/63292ebfb4150f957217ca6243dd6de458242591", "html_url": "https://github.com/Rust-GCC/gccrs/commit/63292ebfb4150f957217ca6243dd6de458242591", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/63292ebfb4150f957217ca6243dd6de458242591/comments", "author": null, "committer": null, "parents": [{"sha": "d3b726902460a92cefbb1be7472d2cafece201ed", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d3b726902460a92cefbb1be7472d2cafece201ed", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d3b726902460a92cefbb1be7472d2cafece201ed"}], "stats": {"total": 70, "additions": 8, "deletions": 62}, "files": [{"sha": "2b678abac8d8106792b193b82f7dcb07fe52b6a4", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/63292ebfb4150f957217ca6243dd6de458242591/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/63292ebfb4150f957217ca6243dd6de458242591/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=63292ebfb4150f957217ca6243dd6de458242591", "patch": "@@ -1,3 +1,11 @@\n+2006-02-28  Steven Bosscher  <stevenb.gcc@gmail.com>\n+\n+\t* alias.c (alias_invariant, alias_invariant_size): Remove.\n+\t(record_base_value): Remove.\n+\t(memrefs_conflict_p): Don't look at alias_invariant.\n+\t(end_alias_analysis): Don't free it.\n+\t* alias.h (record_base_value): Remove prototype.\n+\n 2006-02-28  Paolo Bonzini  <bonzini@gnu.org>\n \t    Adam Nemet  <anemet@caviumnetworks.com>\n "}, {"sha": "5e152855a81f20325addadb5f7e40324892e12de", "filename": "gcc/alias.c", "status": "modified", "additions": 0, "deletions": 61, "changes": 61, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/63292ebfb4150f957217ca6243dd6de458242591/gcc%2Falias.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/63292ebfb4150f957217ca6243dd6de458242591/gcc%2Falias.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Falias.c?ref=63292ebfb4150f957217ca6243dd6de458242591", "patch": "@@ -222,17 +222,6 @@ static GTY (()) rtx static_reg_base_value[FIRST_PSEUDO_REGISTER];\n   (reg_base_value && REGNO (X) < VARRAY_SIZE (reg_base_value) \\\n    ? VARRAY_RTX (reg_base_value, REGNO (X)) : 0)\n \n-/* Vector of known invariant relationships between registers.  Set in\n-   loop unrolling.  Indexed by register number, if nonzero the value\n-   is an expression describing this register in terms of another.\n-\n-   The length of this array is REG_BASE_VALUE_SIZE.\n-\n-   Because this array contains only pseudo registers it has no effect\n-   after reload.  */\n-static GTY((length(\"alias_invariant_size\"))) rtx *alias_invariant;\n-static GTY(()) unsigned int alias_invariant_size;\n-\n /* Vector indexed by N giving the initial (unchanging) value known for\n    pseudo-register N.  This array is initialized in init_alias_analysis,\n    and does not change until end_alias_analysis is called.  */\n@@ -1079,31 +1068,6 @@ record_set (rtx dest, rtx set, void *data ATTRIBUTE_UNUSED)\n   reg_seen[regno] = 1;\n }\n \n-/* Called from loop optimization when a new pseudo-register is\n-   created.  It indicates that REGNO is being set to VAL.  f INVARIANT\n-   is true then this value also describes an invariant relationship\n-   which can be used to deduce that two registers with unknown values\n-   are different.  */\n-\n-void\n-record_base_value (unsigned int regno, rtx val, int invariant)\n-{\n-  if (invariant && alias_invariant && regno < alias_invariant_size)\n-    alias_invariant[regno] = val;\n-\n-  if (regno >= VARRAY_SIZE (reg_base_value))\n-    VARRAY_GROW (reg_base_value, max_reg_num ());\n-\n-  if (REG_P (val))\n-    {\n-      VARRAY_RTX (reg_base_value, regno)\n-\t = REG_BASE_VALUE (val);\n-      return;\n-    }\n-  VARRAY_RTX (reg_base_value, regno)\n-     = find_base_value (val);\n-}\n-\n /* Clear alias info for a register.  This is used if an RTL transformation\n    changes the value of a register.  This is used in flow by AUTO_INC_DEC\n    optimizations.  We don't need to clear reg_base_value, since flow only\n@@ -1792,25 +1756,6 @@ memrefs_conflict_p (int xsize, rtx x, int ysize, rtx y, HOST_WIDE_INT c)\n \t  return memrefs_conflict_p (xsize, x0, ysize, y0, c);\n \t}\n \n-      case REG:\n-\t/* Are these registers known not to be equal?  */\n-\tif (alias_invariant)\n-\t  {\n-\t    unsigned int r_x = REGNO (x), r_y = REGNO (y);\n-\t    rtx i_x, i_y;\t/* invariant relationships of X and Y */\n-\n-\t    i_x = r_x >= alias_invariant_size ? 0 : alias_invariant[r_x];\n-\t    i_y = r_y >= alias_invariant_size ? 0 : alias_invariant[r_y];\n-\n-\t    if (i_x == 0 && i_y == 0)\n-\t      break;\n-\n-\t    if (! memrefs_conflict_p (xsize, i_x ? i_x : x,\n-\t\t\t\t      ysize, i_y ? i_y : y, c))\n-\t      return 0;\n-\t  }\n-\tbreak;\n-\n       default:\n \tbreak;\n       }\n@@ -2696,12 +2641,6 @@ end_alias_analysis (void)\n   reg_known_value_size = 0;\n   free (reg_known_equiv_p);\n   reg_known_equiv_p = 0;\n-  if (alias_invariant)\n-    {\n-      ggc_free (alias_invariant);\n-      alias_invariant = 0;\n-      alias_invariant_size = 0;\n-    }\n }\n \f\n /* Do control and data flow analysis; write some of the results to the"}, {"sha": "f4ba839c6fb1580afb3391cf94739192caf19f80", "filename": "gcc/alias.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/63292ebfb4150f957217ca6243dd6de458242591/gcc%2Falias.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/63292ebfb4150f957217ca6243dd6de458242591/gcc%2Falias.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Falias.h?ref=63292ebfb4150f957217ca6243dd6de458242591", "patch": "@@ -24,7 +24,6 @@ Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA\n extern HOST_WIDE_INT new_alias_set (void);\n extern HOST_WIDE_INT get_varargs_alias_set (void);\n extern HOST_WIDE_INT get_frame_alias_set (void);\n-extern void record_base_value (unsigned int, rtx, int);\n extern bool component_uses_parent_alias_set (tree);\n \n /* This alias set can be used to force a memory to conflict with all"}]}