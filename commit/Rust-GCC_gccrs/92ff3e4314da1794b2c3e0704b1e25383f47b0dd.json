{"sha": "92ff3e4314da1794b2c3e0704b1e25383f47b0dd", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTJmZjNlNDMxNGRhMTc5NGIyYzNlMDcwNGIxZTI1MzgzZjQ3YjBkZA==", "commit": {"author": {"name": "Paolo Carlini", "email": "pcarlini@suse.de", "date": "2004-02-05T15:39:16Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2004-02-05T15:39:16Z"}, "message": "stl_function.h: Minor formatting changes.\n\n2004-02-05  Paolo Carlini  <pcarlini@suse.de>\n\n\t* include/bits/stl_function.h: Minor formatting changes.\n\nFrom-SVN: r77316", "tree": {"sha": "3d148f7b730b7a73e7f757081abec0cd3722bf58", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3d148f7b730b7a73e7f757081abec0cd3722bf58"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/92ff3e4314da1794b2c3e0704b1e25383f47b0dd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/92ff3e4314da1794b2c3e0704b1e25383f47b0dd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/92ff3e4314da1794b2c3e0704b1e25383f47b0dd", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/92ff3e4314da1794b2c3e0704b1e25383f47b0dd/comments", "author": null, "committer": null, "parents": [{"sha": "e0b24bcec981d56c0d78ae952795806e6887cea2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e0b24bcec981d56c0d78ae952795806e6887cea2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e0b24bcec981d56c0d78ae952795806e6887cea2"}], "stats": {"total": 70, "additions": 37, "deletions": 33}, "files": [{"sha": "e647afe3265abf7fe061b509aa22f1f5e4b84d84", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92ff3e4314da1794b2c3e0704b1e25383f47b0dd/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92ff3e4314da1794b2c3e0704b1e25383f47b0dd/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=92ff3e4314da1794b2c3e0704b1e25383f47b0dd", "patch": "@@ -1,3 +1,7 @@\n+2004-02-05  Paolo Carlini  <pcarlini@suse.de>\n+\n+\t* include/bits/stl_function.h: Minor formatting changes.\n+\n 2004-02-04  Zack Weinberg  <zack@codesourcery.com>\n \n \tRevert previous change to config/abi/*/baseline_symbols.txt."}, {"sha": "df7aeed12105d5575ff7b92016db16e9dbe52ddc", "filename": "libstdc++-v3/include/bits/stl_function.h", "status": "modified", "additions": 33, "deletions": 33, "changes": 66, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92ff3e4314da1794b2c3e0704b1e25383f47b0dd/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_function.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92ff3e4314da1794b2c3e0704b1e25383f47b0dd/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_function.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_function.h?ref=92ff3e4314da1794b2c3e0704b1e25383f47b0dd", "patch": "@@ -131,7 +131,7 @@ namespace std\n    */\n   /// One of the @link s20_3_2_arithmetic math functors@endlink.\n   template <class _Tp>\n-    struct plus : public binary_function<_Tp,_Tp,_Tp>\n+    struct plus : public binary_function<_Tp, _Tp, _Tp>\n     { \n       _Tp\n       operator()(const _Tp& __x, const _Tp& __y) const\n@@ -140,7 +140,7 @@ namespace std\n \n   /// One of the @link s20_3_2_arithmetic math functors@endlink.\n   template <class _Tp>\n-    struct minus : public binary_function<_Tp,_Tp,_Tp>\n+    struct minus : public binary_function<_Tp, _Tp, _Tp>\n     {\n       _Tp\n       operator()(const _Tp& __x, const _Tp& __y) const\n@@ -149,7 +149,7 @@ namespace std\n \n   /// One of the @link s20_3_2_arithmetic math functors@endlink.\n   template <class _Tp>\n-    struct multiplies : public binary_function<_Tp,_Tp,_Tp>\n+    struct multiplies : public binary_function<_Tp, _Tp, _Tp>\n     {\n       _Tp\n       operator()(const _Tp& __x, const _Tp& __y) const\n@@ -158,7 +158,7 @@ namespace std\n \n   /// One of the @link s20_3_2_arithmetic math functors@endlink.\n   template <class _Tp>\n-    struct divides : public binary_function<_Tp,_Tp,_Tp>\n+    struct divides : public binary_function<_Tp, _Tp, _Tp>\n     {\n       _Tp\n       operator()(const _Tp& __x, const _Tp& __y) const\n@@ -167,7 +167,7 @@ namespace std\n \n   /// One of the @link s20_3_2_arithmetic math functors@endlink.\n   template <class _Tp>\n-    struct modulus : public binary_function<_Tp,_Tp,_Tp> \n+    struct modulus : public binary_function<_Tp, _Tp, _Tp>\n     {\n       _Tp\n       operator()(const _Tp& __x, const _Tp& __y) const\n@@ -176,7 +176,7 @@ namespace std\n \n   /// One of the @link s20_3_2_arithmetic math functors@endlink.\n   template <class _Tp>\n-    struct negate : public unary_function<_Tp,_Tp> \n+    struct negate : public unary_function<_Tp, _Tp>\n     {\n       _Tp\n       operator()(const _Tp& __x) const\n@@ -193,7 +193,7 @@ namespace std\n    */\n   /// One of the @link s20_3_3_comparisons comparison functors@endlink.\n   template <class _Tp>\n-    struct equal_to : public binary_function<_Tp,_Tp,bool> \n+    struct equal_to : public binary_function<_Tp, _Tp, bool> \n     {\n       bool\n       operator()(const _Tp& __x, const _Tp& __y) const\n@@ -202,7 +202,7 @@ namespace std\n \n   /// One of the @link s20_3_3_comparisons comparison functors@endlink.\n   template <class _Tp>\n-    struct not_equal_to : public binary_function<_Tp,_Tp,bool> \n+    struct not_equal_to : public binary_function<_Tp, _Tp, bool> \n     {\n       bool\n       operator()(const _Tp& __x, const _Tp& __y) const\n@@ -211,7 +211,7 @@ namespace std\n \n   /// One of the @link s20_3_3_comparisons comparison functors@endlink.\n   template <class _Tp>\n-    struct greater : public binary_function<_Tp,_Tp,bool> \n+    struct greater : public binary_function<_Tp, _Tp, bool>\n     {\n       bool\n       operator()(const _Tp& __x, const _Tp& __y) const\n@@ -220,7 +220,7 @@ namespace std\n \n   /// One of the @link s20_3_3_comparisons comparison functors@endlink.\n   template <class _Tp>\n-    struct less : public binary_function<_Tp,_Tp,bool> \n+    struct less : public binary_function<_Tp, _Tp, bool>\n     {\n       bool\n       operator()(const _Tp& __x, const _Tp& __y) const\n@@ -229,7 +229,7 @@ namespace std\n \n   /// One of the @link s20_3_3_comparisons comparison functors@endlink.\n   template <class _Tp>\n-    struct greater_equal : public binary_function<_Tp,_Tp,bool>\n+    struct greater_equal : public binary_function<_Tp, _Tp, bool>\n     {\n       bool\n       operator()(const _Tp& __x, const _Tp& __y) const\n@@ -238,7 +238,7 @@ namespace std\n \n   /// One of the @link s20_3_3_comparisons comparison functors@endlink.\n   template <class _Tp>\n-    struct less_equal : public binary_function<_Tp,_Tp,bool> \n+    struct less_equal : public binary_function<_Tp, _Tp, bool>\n     {\n       bool\n       operator()(const _Tp& __x, const _Tp& __y) const\n@@ -254,7 +254,7 @@ namespace std\n    */\n   /// One of the @link s20_3_4_logical Boolean operations functors@endlink.\n   template <class _Tp>\n-    struct logical_and : public binary_function<_Tp,_Tp,bool>\n+    struct logical_and : public binary_function<_Tp, _Tp, bool>\n     {\n       bool\n       operator()(const _Tp& __x, const _Tp& __y) const\n@@ -263,7 +263,7 @@ namespace std\n \n   /// One of the @link s20_3_4_logical Boolean operations functors@endlink.\n   template <class _Tp>\n-    struct logical_or : public binary_function<_Tp,_Tp,bool>\n+    struct logical_or : public binary_function<_Tp, _Tp, bool>\n     {\n       bool\n       operator()(const _Tp& __x, const _Tp& __y) const\n@@ -272,7 +272,7 @@ namespace std\n \n   /// One of the @link s20_3_4_logical Boolean operations functors@endlink.\n   template <class _Tp>\n-    struct logical_not : public unary_function<_Tp,bool>\n+    struct logical_not : public unary_function<_Tp, bool>\n     {\n       bool\n       operator()(const _Tp& __x) const\n@@ -772,8 +772,8 @@ namespace std\n       : _M_f(__pf) {}\n \n       void\n-      operator()(const _Tp& __r)\n-\tconst { (__r.*_M_f)(); }\n+      operator()(const _Tp& __r) const\n+      { (__r.*_M_f)(); }\n     private:\n       void (_Tp::*_M_f)() const;\n     };\n@@ -848,44 +848,44 @@ namespace std\n   // Mem_fun adaptor helper functions.  There are only two:\n   // mem_fun and mem_fun_ref.\n   template <class _Ret, class _Tp>\n-    inline mem_fun_t<_Ret,_Tp>\n+    inline mem_fun_t<_Ret, _Tp>\n     mem_fun(_Ret (_Tp::*__f)())\n-    { return mem_fun_t<_Ret,_Tp>(__f); }\n+    { return mem_fun_t<_Ret, _Tp>(__f); }\n \n   template <class _Ret, class _Tp>\n-    inline const_mem_fun_t<_Ret,_Tp>\n+    inline const_mem_fun_t<_Ret, _Tp>\n     mem_fun(_Ret (_Tp::*__f)() const)\n-    { return const_mem_fun_t<_Ret,_Tp>(__f); }\n+    { return const_mem_fun_t<_Ret, _Tp>(__f); }\n   \n   template <class _Ret, class _Tp>\n-    inline mem_fun_ref_t<_Ret,_Tp>\n+    inline mem_fun_ref_t<_Ret, _Tp>\n     mem_fun_ref(_Ret (_Tp::*__f)()) \n-    { return mem_fun_ref_t<_Ret,_Tp>(__f); }\n+    { return mem_fun_ref_t<_Ret, _Tp>(__f); }\n \n   template <class _Ret, class _Tp>\n-    inline const_mem_fun_ref_t<_Ret,_Tp>\n+    inline const_mem_fun_ref_t<_Ret, _Tp>\n     mem_fun_ref(_Ret (_Tp::*__f)() const)\n-    { return const_mem_fun_ref_t<_Ret,_Tp>(__f); }\n+    { return const_mem_fun_ref_t<_Ret, _Tp>(__f); }\n \n   template <class _Ret, class _Tp, class _Arg>\n-    inline mem_fun1_t<_Ret,_Tp,_Arg>\n+    inline mem_fun1_t<_Ret, _Tp, _Arg>\n     mem_fun(_Ret (_Tp::*__f)(_Arg))\n-    { return mem_fun1_t<_Ret,_Tp,_Arg>(__f); }\n+    { return mem_fun1_t<_Ret, _Tp, _Arg>(__f); }\n \n   template <class _Ret, class _Tp, class _Arg>\n-    inline const_mem_fun1_t<_Ret,_Tp,_Arg>\n+    inline const_mem_fun1_t<_Ret, _Tp, _Arg>\n     mem_fun(_Ret (_Tp::*__f)(_Arg) const)\n-    { return const_mem_fun1_t<_Ret,_Tp,_Arg>(__f); }\n+    { return const_mem_fun1_t<_Ret, _Tp, _Arg>(__f); }\n \n   template <class _Ret, class _Tp, class _Arg>\n-    inline mem_fun1_ref_t<_Ret,_Tp,_Arg>\n+    inline mem_fun1_ref_t<_Ret, _Tp, _Arg>\n     mem_fun_ref(_Ret (_Tp::*__f)(_Arg))\n-    { return mem_fun1_ref_t<_Ret,_Tp,_Arg>(__f); }\n+    { return mem_fun1_ref_t<_Ret, _Tp, _Arg>(__f); }\n \n   template <class _Ret, class _Tp, class _Arg>\n-    inline const_mem_fun1_ref_t<_Ret,_Tp,_Arg>\n+    inline const_mem_fun1_ref_t<_Ret, _Tp, _Arg>\n     mem_fun_ref(_Ret (_Tp::*__f)(_Arg) const)\n-    { return const_mem_fun1_ref_t<_Ret,_Tp,_Arg>(__f); }\n+    { return const_mem_fun1_ref_t<_Ret, _Tp, _Arg>(__f); }\n \n   /** @}  */\n   "}]}