{"sha": "9e895ab50a0882df6e42fdb2995fec55258a26d6", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWU4OTVhYjUwYTA4ODJkZjZlNDJmZGIyOTk1ZmVjNTUyNThhMjZkNg==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2009-04-29T13:39:13Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2009-04-29T13:39:13Z"}, "message": "[multiple changes]\n\n2009-04-29  Vincent Celier  <celier@adacore.com>\n\n\t* sinput-l.adb (Load_File): When preprocessing, set temporarily the\n\tSource_File_Index_Table entries for the source, to avoid crash when\n\treporting an error.\n\n\t* gnatcmd.adb (Test_If_Relative_Path): Use\n\tMakeutl.Test_If_Relative_Path.\n\t\n\t* makeutl.adb:(Test_If_Relative_Path): Process switches --RTS= only if\n\tIncluding_RTS is True.\n\n\t* makeutl.ads (Test_If_Relative_Path): New Boolean parameter\n\tIncluding_RTS defaulted to False.\n\n\t* sinput.ads, scans.ads, err_vars.ads: Initialize some variables with\n\ta default value.\n\n2009-04-29  Javier Miranda  <miranda@adacore.com>\n\n\t* gnat_ugn.texi: Adding documentation for non-default C++ constructors.\n\nFrom-SVN: r146967", "tree": {"sha": "6c58124deb450d5ef7fd5681c179c70fee9f5f88", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6c58124deb450d5ef7fd5681c179c70fee9f5f88"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9e895ab50a0882df6e42fdb2995fec55258a26d6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9e895ab50a0882df6e42fdb2995fec55258a26d6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9e895ab50a0882df6e42fdb2995fec55258a26d6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9e895ab50a0882df6e42fdb2995fec55258a26d6/comments", "author": null, "committer": null, "parents": [{"sha": "236fecbf44a87814987887e5d3f03c4b8bf0c294", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/236fecbf44a87814987887e5d3f03c4b8bf0c294", "html_url": "https://github.com/Rust-GCC/gccrs/commit/236fecbf44a87814987887e5d3f03c4b8bf0c294"}], "stats": {"total": 328, "additions": 253, "deletions": 75}, "files": [{"sha": "8e69ece234d0dea76c81c290d6d24edb4b878930", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9e895ab50a0882df6e42fdb2995fec55258a26d6/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9e895ab50a0882df6e42fdb2995fec55258a26d6/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=9e895ab50a0882df6e42fdb2995fec55258a26d6", "patch": "@@ -1,3 +1,25 @@\n+2009-04-29  Vincent Celier  <celier@adacore.com>\n+\n+\t* sinput-l.adb (Load_File): When preprocessing, set temporarily the\n+\tSource_File_Index_Table entries for the source, to avoid crash when\n+\treporting an error.\n+\n+\t* gnatcmd.adb (Test_If_Relative_Path): Use\n+\tMakeutl.Test_If_Relative_Path.\n+\t\n+\t* makeutl.adb:(Test_If_Relative_Path): Process switches --RTS= only if\n+\tIncluding_RTS is True.\n+\n+\t* makeutl.ads (Test_If_Relative_Path): New Boolean parameter\n+\tIncluding_RTS defaulted to False.\n+\n+\t* sinput.ads, scans.ads, err_vars.ads: Initialize some variables with\n+\ta default value.\n+\n+2009-04-29  Javier Miranda  <miranda@adacore.com>\n+\n+\t* gnat_ugn.texi: Adding documentation for non-default C++ constructors.\n+\n 2009-04-29  Javier Miranda  <miranda@adacore.com>\n \n \t* sem_ch3.adb (Analyze_Object_Declaration): Disable error message"}, {"sha": "1ec6e3dd1c6c3c3441e0c07c7013e2a5c85333ab", "filename": "gcc/ada/err_vars.ads", "status": "modified", "additions": 9, "deletions": 5, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9e895ab50a0882df6e42fdb2995fec55258a26d6/gcc%2Fada%2Ferr_vars.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9e895ab50a0882df6e42fdb2995fec55258a26d6/gcc%2Fada%2Ferr_vars.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Ferr_vars.ads?ref=9e895ab50a0882df6e42fdb2995fec55258a26d6", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 S p e c                                  --\n --                                                                          --\n---          Copyright (C) 1992-2007, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2009, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -32,22 +32,26 @@ with Uintp; use Uintp;\n \n package Err_Vars is\n \n+   --  Some variables are initialized so that some tools (such as gprbuild)\n+   --  can be built with -gnatVa and pragma Initialized_Scalars without\n+   --  problems.\n+\n    ------------------\n    -- Error Counts --\n    ------------------\n \n-   Serious_Errors_Detected : Nat;\n+   Serious_Errors_Detected : Nat := 0;\n    --  This is a count of errors that are serious enough to stop expansion,\n    --  and hence to prevent generation of an object file even if the\n    --  switch -gnatQ is set. Initialized to zero at the start of compilation.\n \n-   Total_Errors_Detected : Nat;\n+   Total_Errors_Detected : Nat := 0;\n    --  Number of errors detected so far. Includes count of serious errors and\n    --  non-serious errors, so this value is always greater than or equal to the\n    --  Serious_Errors_Detected value. Initialized to zero at the start of\n    --  compilation.\n \n-   Warnings_Detected : Nat;\n+   Warnings_Detected : Nat := 0;\n    --  Number of warnings detected. Initialized to zero at the start of\n    --  compilation.\n \n@@ -75,7 +79,7 @@ package Err_Vars is\n    --  generated on the instantiation (referring to the template) rather\n    --  than on the template itself.\n \n-   Raise_Exception_On_Error : Nat;\n+   Raise_Exception_On_Error : Nat := 0;\n    --  If this value is non-zero, then any attempt to generate an error\n    --  message raises the exception Error_Msg_Exception, and the error\n    --  message is not output. This is used for defending against junk"}, {"sha": "31e7080fb2cc2fdb81d2c7a7beeeb8b19c371ad7", "filename": "gcc/ada/gnat_ugn.texi", "status": "modified", "additions": 171, "deletions": 0, "changes": 171, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9e895ab50a0882df6e42fdb2995fec55258a26d6/gcc%2Fada%2Fgnat_ugn.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9e895ab50a0882df6e42fdb2995fec55258a26d6/gcc%2Fada%2Fgnat_ugn.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgnat_ugn.texi?ref=9e895ab50a0882df6e42fdb2995fec55258a26d6", "patch": "@@ -2976,6 +2976,7 @@ with a new C++ compiler.\n * Interfacing to C++::\n * Linking a Mixed C++ & Ada Program::\n * A Simple Example::\n+* Interfacing with C++ constructors::\n * Interfacing with C++ at the Class Level::\n @end menu\n \n@@ -3228,6 +3229,176 @@ package Simple_Cpp_Interface is\n end Simple_Cpp_Interface;\n @end smallexample\n \n+@node Interfacing with C++ constructors\n+@subsection Interfacing with C++ constructors\n+@noindent\n+\n+In order to interface with C++ constructors GNAT provides the\n+@code{pragma CPP_Constructor} (@xref{Interfacing to C++,,,\n+gnat_rm, GNAT Reference Manual}, for additional information).\n+In this section we present some common uses of C++ constructors\n+in mixed-languages programs in GNAT.\n+\n+Let us assume that we need to interface with the following\n+C++ class:\n+\n+@smallexample\n+@b{class} Root @{\n+@b{public}:\n+  int  a_value;\n+  int  b_value;\n+  @b{virtual} int Get_Value ();\n+  Root();              // Default constructor\n+  Root(int v);         // 1st non-default constructor\n+  Root(int v, int w);  // 2nd non-default constructor\n+@};\n+@end smallexample\n+\n+For this purpose we can write the following package spec (further\n+information on how to build this spec is available in\n+@ref{Interfacing with C++ at the Class Level} and\n+@ref{Generating Ada Bindings for C and C++ headers}).\n+\n+@smallexample @c ada\n+with Interfaces.C; use Interfaces.C;\n+package Pkg_Root is\n+  type Root is tagged limited record\n+     A_Value : int;\n+     B_Value : int;\n+  end record;\n+  pragma Import (CPP, Root);\n+\n+  function Get_Value (Obj : Root) return int;\n+  pragma Import (CPP, Get_Value);\n+\n+  function Constructor return Root'Class;\n+  pragma Cpp_Constructor (Constructor, \"_ZN4RootC1Ev\");\n+\n+  function Constructor (v : Integer) return Root'Class;\n+  pragma Cpp_Constructor (Constructor, \"_ZN4RootC1Ei\");\n+\n+  function Constructor (v, w : Integer) return Root'Class;\n+  pragma Cpp_Constructor (Constructor, \"_ZN4RootC1Eii\");\n+end Pkg_Root;\n+@end smallexample\n+\n+On the Ada side the constructor is represented by a function (whose\n+name is arbitrary) that returns the classwide type corresponding to\n+the imported C++ class.\n+\n+In a declaration of an object whose type is a class imported from C++,\n+either the default C++ constructor is implicitly called by GNAT, or\n+else the required C++ constructor must be explicitly called in the\n+expression that initializes the object. For example:\n+\n+@smallexample @c ada\n+  Obj1 : Root;\n+  Obj2 : Root := Constructor;\n+  Obj3 : Root := Constructor (v => 10);\n+  Obj4 : Root := Constructor (30, 40);\n+@end smallexample\n+\n+The first two declarations are equivalent: in both cases the default C++\n+constructor is invoked (in the former case the call to the constructor is\n+implicit, and in the latter case the call is explicit in the object\n+declaration). @code{Obj3} is initialized by the C++ non-default constructor\n+that takes an integer argument, and @code{Obj4} is initialized by the\n+non-default C++ constructor that takes two integers.\n+\n+Let us derive the imported C++ class in the Ada side. For example:\n+\n+@smallexample @c ada\n+  type DT is new Root with record\n+     C_Value : Natural := 2009;\n+  end record;\n+@end smallexample\n+\n+In this case the components DT inherited from the C++ side must be\n+initialized by a C++ constructor, and the additional Ada components\n+of type DT are initialized by GNAT. The initialization of such an\n+object is done either by default, or by means of a function returning\n+an aggregate of type DT, or by means of an extended aggregate.\n+\n+@smallexample @c ada\n+  Obj5 : DT;\n+  Obj6 : DT := Function_Returning_DT (50);\n+  Obj7 : DT := (Constructor (30,40) with (C_Value => 50));\n+@end smallexample\n+\n+The declaration of @code{Obj5} invokes the default constructors: the\n+C++ default constructor of the parent type takes care of the initialization\n+of the components inherited from Root, and GNAT takes care of the default\n+initialization of the additional Ada components of type DT (that is,\n+@code{C_Value} is initialized to value 2009). The order of invocation of\n+the constructors is consistent with the order of elaboration required by\n+Ada and C++. That is, the constructor of the parent type is always called\n+before the constructor of the derived type.\n+\n+Let us now consider a record that has components whose type is imported\n+from C++. For example:\n+\n+@smallexample @c ada\n+  type Rec1 is limited record\n+     Data1 : Root := Constructor (10);\n+     Value : Natural := 1000;\n+  end record;\n+\n+  type Rec2 (D : Integer := 20) is limited record\n+     Rec   : Rec1;\n+     Data2 : Root := Constructor (D, 30);\n+  end record;\n+@end smallexample\n+\n+The initialization of an object of type @code{Rec2} will call the\n+non-default C++ constructors specified for the imported components.\n+For example:\n+\n+@smallexample @c ada\n+  Obj8 : Rec2 (40);\n+@end smallexample\n+\n+Using Ada 2005 we can use limited aggregates to initialize an object\n+invoking C++ constructors that differ from those specified in the type\n+declarations. For example:\n+\n+@smallexample @c ada\n+  Obj9 : Rec2 := (Rec => (Data1 => Constructor (15, 16),\n+                          others => <>),\n+                  others => <>);\n+@end smallexample\n+\n+The above declaration uses an Ada 2005 limited aggregate to\n+initialize @code{Obj9}, and the C++ constructor that has two integer\n+arguments is invoked to initialize the @code{Data1} component instead\n+of the constructor specified in the declaration of type @code{Rec1}. In\n+Ada 2005 the box in the aggregate indicates that unspecified components\n+are initialized using the expression (if any) available in the component\n+declaration. That is, in this case discriminant @code{D} is initialized\n+to value @code{20}, @code{Value} is initialized to value 1000, and the\n+non-default C++ constructor that handles two integers takes care of\n+initializing component @code{Data2} with values @code{20,30}.\n+\n+In Ada 2005 we can use the extended return statement to build the Ada\n+equivalent to C++ non-default constructors. For example:\n+\n+@smallexample @c ada\n+  function Constructor (V : Integer) return Rec2 is\n+  begin\n+     return Obj : Rec2 := (Rec => (Data1  => Constructor (V, 20),\n+                                   others => <>),\n+                           others => <>) do\n+        --  Further actions required for construction of\n+        --  objects of type Rec2\n+        ...\n+     end record;\n+  end Constructor;\n+@end smallexample\n+\n+In this example the extended return statement construct is used to\n+build in place the returned object whose components are initialized\n+by means of a limited aggregate. Any further action associated with\n+the constructor can be placed inside the construct.\n+\n @node Interfacing with C++ at the Class Level\n @subsection Interfacing with C++ at the Class Level\n @noindent"}, {"sha": "8310cd2b6970112d8fa102d050f6fcde878b4278", "filename": "gcc/ada/gnatcmd.adb", "status": "modified", "additions": 3, "deletions": 55, "changes": 58, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9e895ab50a0882df6e42fdb2995fec55258a26d6/gcc%2Fada%2Fgnatcmd.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9e895ab50a0882df6e42fdb2995fec55258a26d6/gcc%2Fada%2Fgnatcmd.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgnatcmd.adb?ref=9e895ab50a0882df6e42fdb2995fec55258a26d6", "patch": "@@ -26,6 +26,7 @@\n with GNAT.Directory_Operations; use GNAT.Directory_Operations;\n \n with Csets;\n+with Makeutl;\n with MLib.Tgt; use MLib.Tgt;\n with MLib.Utl;\n with MLib.Fil;\n@@ -1265,61 +1266,8 @@ procedure GNATCmd is\n       Parent : String)\n    is\n    begin\n-      if Switch /= null then\n-\n-         declare\n-            Sw : String (1 .. Switch'Length);\n-            Start : Positive := 1;\n-\n-         begin\n-            Sw := Switch.all;\n-\n-            if Sw (1) = '-' then\n-               if Sw'Length >= 3\n-                 and then (Sw (2) = 'A' or else\n-                           Sw (2) = 'I' or else\n-                           Sw (2) = 'L')\n-               then\n-                  Start := 3;\n-\n-                  if Sw = \"-I-\" then\n-                     return;\n-                  end if;\n-\n-               elsif Sw'Length >= 4\n-                 and then (Sw (2 .. 3) = \"aL\" or else\n-                           Sw (2 .. 3) = \"aO\" or else\n-                           Sw (2 .. 3) = \"aI\")\n-               then\n-                  Start := 4;\n-\n-               elsif Sw'Length >= 7\n-                 and then Sw (2 .. 6) = \"-RTS=\"\n-               then\n-                  Start := 7;\n-               else\n-                  return;\n-               end if;\n-            end if;\n-\n-            --  If the path is relative, test if it includes directory\n-            --  information. If it does, prepend Parent to the path.\n-\n-            if not Is_Absolute_Path (Sw (Start .. Sw'Last)) then\n-               for J in Start .. Sw'Last loop\n-                  if Sw (J) = Directory_Separator then\n-                     Switch :=\n-                        new String'\n-                              (Sw (1 .. Start - 1) &\n-                               Parent &\n-                               Directory_Separator &\n-                               Sw (Start .. Sw'Last));\n-                     return;\n-                  end if;\n-               end loop;\n-            end if;\n-         end;\n-      end if;\n+      Makeutl.Test_If_Relative_Path\n+        (Switch, Parent, Including_Non_Switch => False, Including_RTS => True);\n    end Test_If_Relative_Path;\n \n    -------------------"}, {"sha": "17c34ff51f70921f5105ae9f8b267cc778da9fb9", "filename": "gcc/ada/makeutl.adb", "status": "modified", "additions": 23, "deletions": 2, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9e895ab50a0882df6e42fdb2995fec55258a26d6/gcc%2Fada%2Fmakeutl.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9e895ab50a0882df6e42fdb2995fec55258a26d6/gcc%2Fada%2Fmakeutl.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fmakeutl.adb?ref=9e895ab50a0882df6e42fdb2995fec55258a26d6", "patch": "@@ -598,7 +598,8 @@ package body Makeutl is\n      (Switch               : in out String_Access;\n       Parent               : String;\n       Including_L_Switch   : Boolean := True;\n-      Including_Non_Switch : Boolean := True)\n+      Including_Non_Switch : Boolean := True;\n+      Including_RTS        : Boolean := False)\n    is\n    begin\n       if Switch /= null then\n@@ -628,13 +629,20 @@ package body Makeutl is\n                then\n                   Start := 4;\n \n+               elsif Including_RTS\n+                 and then Sw'Length >= 7\n+                 and then Sw (2 .. 6) = \"-RTS=\"\n+               then\n+                  Start := 7;\n+\n                else\n                   return;\n                end if;\n \n                --  Because relative path arguments to --RTS= may be relative\n                --  to the search directory prefix, those relative path\n-               --  arguments are not converted.\n+               --  arguments are converted only when they include directory\n+               --  information.\n \n                if not Is_Absolute_Path (Sw (Start .. Sw'Last)) then\n                   if Parent'Length = 0 then\n@@ -643,6 +651,19 @@ package body Makeutl is\n                         & Sw\n                         & \"\"\") are not allowed\");\n \n+                  elsif Including_RTS then\n+                     for J in Start .. Sw'Last loop\n+                        if Sw (J) = Directory_Separator then\n+                           Switch :=\n+                             new String'\n+                               (Sw (1 .. Start - 1) &\n+                                Parent &\n+                                Directory_Separator &\n+                                Sw (Start .. Sw'Last));\n+                           return;\n+                        end if;\n+                     end loop;\n+\n                   else\n                      Switch :=\n                        new String'"}, {"sha": "3c9b4d972420636858024d6ef5c3b1f58f5218b2", "filename": "gcc/ada/makeutl.ads", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9e895ab50a0882df6e42fdb2995fec55258a26d6/gcc%2Fada%2Fmakeutl.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9e895ab50a0882df6e42fdb2995fec55258a26d6/gcc%2Fada%2Fmakeutl.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fmakeutl.ads?ref=9e895ab50a0882df6e42fdb2995fec55258a26d6", "patch": "@@ -130,12 +130,14 @@ package Makeutl is\n      (Switch               : in out String_Access;\n       Parent               : String;\n       Including_L_Switch   : Boolean := True;\n-      Including_Non_Switch : Boolean := True);\n+      Including_Non_Switch : Boolean := True;\n+      Including_RTS        : Boolean := False);\n    --  Test if Switch is a relative search path switch.\n    --  If it is, fail if Parent is the empty string, otherwise prepend the path\n    --  with Parent. This subprogram is only called when using project files.\n    --  For gnatbind switches, Including_L_Switch is False, because the\n-   --  argument of the -L switch is not a path.\n+   --  argument of the -L switch is not a path. If Including_RTS is True,\n+   --  process also switches --RTS=.\n \n    function Path_Or_File_Name (Path : Path_Name_Type) return String;\n    --  Returns a file name if -df is used, otherwise return a path name"}, {"sha": "fbdc5cee41d497a2a5d3864dc669e7085f5b8ded", "filename": "gcc/ada/scans.ads", "status": "modified", "additions": 11, "deletions": 8, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9e895ab50a0882df6e42fdb2995fec55258a26d6/gcc%2Fada%2Fscans.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9e895ab50a0882df6e42fdb2995fec55258a26d6/gcc%2Fada%2Fscans.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fscans.ads?ref=9e895ab50a0882df6e42fdb2995fec55258a26d6", "patch": "@@ -344,37 +344,40 @@ package Scans is\n \n    --  Note: these variables can only be referenced during the parsing of a\n    --  file. Reference to any of them from Sem or the expander is wrong.\n+   --  Some of these variables are initialized so that some tools (such as\n+   --  gprbuild) can be built with -gnatVa and pragma Initialized_Scalars\n+   --  without problems.\n \n-   Scan_Ptr : Source_Ptr;\n+   Scan_Ptr : Source_Ptr := No_Location;\n    --  Current scan pointer location. After a call to Scan, this points\n    --  just past the end of the token just scanned.\n \n-   Token : Token_Type;\n+   Token : Token_Type := No_Token;\n    --  Type of current token\n \n-   Token_Ptr : Source_Ptr;\n+   Token_Ptr : Source_Ptr := No_Location;\n    --  Pointer to first character of current token\n \n-   Current_Line_Start : Source_Ptr;\n+   Current_Line_Start : Source_Ptr := No_Location;\n    --  Pointer to first character of line containing current token\n \n-   Start_Column : Column_Number;\n+   Start_Column : Column_Number := No_Column_Number;\n    --  Starting column number (zero origin) of the first non-blank character\n    --  on the line containing the current token. This is used for error\n    --  recovery circuits which depend on looking at the column line up.\n \n-   Type_Token_Location : Source_Ptr;\n+   Type_Token_Location : Source_Ptr := No_Location;\n    --  Within a type declaration, gives the location of the TYPE keyword that\n    --  opened the type declaration. Used in checking the end column of a record\n    --  declaration, which can line up either with the TYPE keyword, or with the\n    --  start of the line containing the RECORD keyword.\n \n-   Checksum : Word;\n+   Checksum : Word := 0;\n    --  Used to accumulate a CRC representing the tokens in the source\n    --  file being compiled. This CRC includes only program tokens, and\n    --  excludes comments.\n \n-   First_Non_Blank_Location : Source_Ptr;\n+   First_Non_Blank_Location : Source_Ptr := No_Location;\n    --  Location of first non-blank character on the line containing the\n    --  current token (i.e. the location of the character whose column number\n    --  is stored in Start_Column)."}, {"sha": "32f8bdedd6bfebc055afce196ff6815edede4ec5", "filename": "gcc/ada/sinput-l.adb", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9e895ab50a0882df6e42fdb2995fec55258a26d6/gcc%2Fada%2Fsinput-l.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9e895ab50a0882df6e42fdb2995fec55258a26d6/gcc%2Fada%2Fsinput-l.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsinput-l.adb?ref=9e895ab50a0882df6e42fdb2995fec55258a26d6", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1992-2008, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2009, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -453,6 +453,11 @@ package body Sinput.L is\n          --  Preprocess the source if it needs to be preprocessed\n \n          if Preprocessing_Needed then\n+            --  Set temporarily the Source_File_Index_Table entries for the\n+            --  source, to avoid crash when reporting an error.\n+\n+            Set_Source_File_Index_Table (X);\n+\n             if Opt.List_Preprocessing_Symbols then\n                Get_Name_String (N);\n "}, {"sha": "ca97716145e2ad3b5b004bf656924ab2e94b3d92", "filename": "gcc/ada/sinput.ads", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9e895ab50a0882df6e42fdb2995fec55258a26d6/gcc%2Fada%2Fsinput.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9e895ab50a0882df6e42fdb2995fec55258a26d6/gcc%2Fada%2Fsinput.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsinput.ads?ref=9e895ab50a0882df6e42fdb2995fec55258a26d6", "patch": "@@ -423,8 +423,10 @@ package Sinput is\n    -- Global Data --\n    -----------------\n \n-   Current_Source_File : Source_File_Index;\n-   --  Source_File table index of source file currently being scanned\n+   Current_Source_File : Source_File_Index := No_Source_File;\n+   --  Source_File table index of source file currently being scanned.\n+   --  Initialized so that some tools (such as gprbuild) can be built with\n+   --  -gnatVa and pragma Initialized_Scalars without problems.\n \n    Current_Source_Unit : Unit_Number_Type;\n    --  Unit number of source file currently being scanned. The special value"}]}