{"sha": "503c8e860b28659ab922f8500590d08353c0575c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTAzYzhlODYwYjI4NjU5YWI5MjJmODUwMDU5MGQwODM1M2MwNTc1Yw==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2011-02-16T00:39:27Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2011-02-16T00:39:27Z"}, "message": "re PR c++/46807 (internal compiler error: in synthesized_method_walk)\n\n\tPR c++/46807\n\t* method.c (synthesized_method_walk): Always exit early for\n\ttrivial fn in C++98 mode.\n\nFrom-SVN: r170207", "tree": {"sha": "a6d0a3bb4ee91bd00b282995d12c2c735da5c1f8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a6d0a3bb4ee91bd00b282995d12c2c735da5c1f8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/503c8e860b28659ab922f8500590d08353c0575c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/503c8e860b28659ab922f8500590d08353c0575c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/503c8e860b28659ab922f8500590d08353c0575c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/503c8e860b28659ab922f8500590d08353c0575c/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "aa2bf28660fa52a864fc8e0dacf4d5862c86e2e9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/aa2bf28660fa52a864fc8e0dacf4d5862c86e2e9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/aa2bf28660fa52a864fc8e0dacf4d5862c86e2e9"}], "stats": {"total": 72, "additions": 61, "deletions": 11}, "files": [{"sha": "0fdac3cca74613a9943873b477eccc0da1624892", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/503c8e860b28659ab922f8500590d08353c0575c/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/503c8e860b28659ab922f8500590d08353c0575c/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=503c8e860b28659ab922f8500590d08353c0575c", "patch": "@@ -1,3 +1,9 @@\n+2011-02-15  Jason Merrill  <jason@redhat.com>\n+\n+\tPR c++/46807\n+\t* method.c (synthesized_method_walk): Always exit early for\n+\ttrivial fn in C++98 mode.\n+\n 2011-02-14  Jason Merrill  <jason@redhat.com>\n \n \tPR c++/47482"}, {"sha": "bfe8a067a8b551051d7b5ab0a39a48bcd975f6c4", "filename": "gcc/cp/method.c", "status": "modified", "additions": 4, "deletions": 11, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/503c8e860b28659ab922f8500590d08353c0575c/gcc%2Fcp%2Fmethod.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/503c8e860b28659ab922f8500590d08353c0575c/gcc%2Fcp%2Fmethod.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fmethod.c?ref=503c8e860b28659ab922f8500590d08353c0575c", "patch": "@@ -1153,21 +1153,22 @@ synthesized_method_walk (tree ctype, special_function_kind sfk, bool const_p,\n   if (trivial_p)\n     *trivial_p = expected_trivial;\n \n-#ifndef ENABLE_CHECKING\n   /* The TYPE_HAS_COMPLEX_* flags tell us about constraints from base\n      class versions and other properties of the type.  But a subobject\n      class can be trivially copyable and yet have overload resolution\n      choose a template constructor for initialization, depending on\n      rvalueness and cv-quals.  So we can't exit early for copy/move\n-     methods in C++0x.  */\n+     methods in C++0x.  The same considerations apply in C++98/03, but\n+     there the definition of triviality does not consider overload\n+     resolution, so a constructor can be trivial even if it would otherwise\n+     call a non-trivial constructor.  */\n   if (expected_trivial\n       && (!copy_arg_p || cxx_dialect < cxx0x))\n     {\n       if (constexpr_p && sfk == sfk_constructor)\n \t*constexpr_p = synthesized_default_constructor_is_constexpr (ctype);\n       return;\n     }\n-#endif\n \n   ++cp_unevaluated_operand;\n   ++c_inhibit_evaluation_warnings;\n@@ -1300,14 +1301,6 @@ synthesized_method_walk (tree ctype, special_function_kind sfk, bool const_p,\n       if (spec_p)\n \t*spec_p = merge_exception_specifiers (*spec_p, cleanup_spec);\n     }\n-\n-#ifdef ENABLE_CHECKING\n-  /* If we expected this to be trivial but it isn't, then either we're in\n-     C++0x mode and this is a copy/move ctor/op= or there's an error.  */\n-  gcc_assert (!(trivial_p && expected_trivial && !*trivial_p)\n-\t      || (copy_arg_p && cxx_dialect >= cxx0x)\n-\t      || errorcount);\n-#endif\n }\n \n /* DECL is a deleted function.  If it's implicitly deleted, explain why and"}, {"sha": "2608ce53f994df03dedfa12631ef469b465ab5ee", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/503c8e860b28659ab922f8500590d08353c0575c/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/503c8e860b28659ab922f8500590d08353c0575c/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=503c8e860b28659ab922f8500590d08353c0575c", "patch": "@@ -1,3 +1,8 @@\n+2011-02-15  Jason Merrill  <jason@redhat.com>\n+\n+\t* g++.dg/inherit/implicit-trivial1.C: New.\n+\t* g++.dg/cpp0x/implicit-trivial1.C: New.\n+\n 2011-02-15  H.J. Lu  <hongjiu.lu@intel.com>\n \n \tPR middle-end/47725"}, {"sha": "64084c14855d292616fc1adc14229577378ea580", "filename": "gcc/testsuite/g++.dg/cpp0x/implicit-trivial1.C", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/503c8e860b28659ab922f8500590d08353c0575c/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fimplicit-trivial1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/503c8e860b28659ab922f8500590d08353c0575c/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fimplicit-trivial1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fimplicit-trivial1.C?ref=503c8e860b28659ab922f8500590d08353c0575c", "patch": "@@ -0,0 +1,23 @@\n+// PR c++/46807\n+// { dg-options -std=c++0x }\n+// In C++98/03, B::B(const B&) is trivial because A::A(const A&) is trivial,\n+// even though doing overload resolution would mean calling the template\n+// constructor.  In C++0x, we do overload resolution to determine triviality.\n+\n+struct A\n+{\n+  A() {}\n+private:\n+  template <class T> A(T&);\t// { dg-error \"private\" }\n+};\n+\n+struct B\t\t\t// { dg-error \"implicitly deleted|this context\" }\n+{\n+  mutable A a;\n+};\n+\n+int main()\n+{\n+  B b;\n+  B b2(b);\t\t\t// { dg-error \"deleted\" }\n+}"}, {"sha": "e63bd3435a22b160b858bd4e8f453ee11d7ea7e3", "filename": "gcc/testsuite/g++.dg/inherit/implicit-trivial1.C", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/503c8e860b28659ab922f8500590d08353c0575c/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finherit%2Fimplicit-trivial1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/503c8e860b28659ab922f8500590d08353c0575c/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finherit%2Fimplicit-trivial1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finherit%2Fimplicit-trivial1.C?ref=503c8e860b28659ab922f8500590d08353c0575c", "patch": "@@ -0,0 +1,23 @@\n+// PR c++/46807\n+// { dg-options -std=c++98 }\n+// In C++98/03, B::B(const B&) is trivial because A::A(const A&) is trivial,\n+// even though doing overload resolution would mean calling the template\n+// constructor.  In C++0x, we do overload resolution to determine triviality.\n+\n+struct A\n+{\n+  A() {}\n+private:\n+  template <class T> A(T&);\n+};\n+\n+struct B\n+{\n+  mutable A a;\n+};\n+\n+int main()\n+{\n+  B b;\n+  B b2(b);\n+}"}]}