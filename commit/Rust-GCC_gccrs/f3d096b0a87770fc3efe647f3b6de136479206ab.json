{"sha": "f3d096b0a87770fc3efe647f3b6de136479206ab", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjNkMDk2YjBhODc3NzBmYzNlZmU2NDdmM2I2ZGUxMzY0NzkyMDZhYg==", "commit": {"author": {"name": "Naveen H.S", "email": "Naveen.Hurugalawadi@caviumnetworks.com", "date": "2013-04-17T05:37:10Z"}, "committer": {"name": "Naveen H.S", "email": "naveenh@gcc.gnu.org", "date": "2013-04-17T05:37:10Z"}, "message": "aarch64.md (*adds_<optab><mode>_multp2): New pattern.\n\ngcc/\n\n2013-04-16   Naveen H.S  <Naveen.Hurugalawadi@caviumnetworks.com>\n\n\t* config/aarch64/aarch64.md (*adds_<optab><mode>_multp2):\n\tNew pattern.\n\t(*subs_<optab><mode>_multp2): New pattern.\n\t(*adds_<optab><ALLX:mode>_<GPI:mode>): New pattern.\n\t(*subs_<optab><ALLX:mode>_<GPI:mode>): New pattern.\n\ngcc/testsuite/\n\n2013-04-16   Naveen H.S  <Naveen.Hurugalawadi@caviumnetworks.com>\n\n\t* gcc.target/aarch64/adds3.c: New.\n\t* gcc.target/aarch64/subs3.c: New.\n\nFrom-SVN: r198020", "tree": {"sha": "bf6c7f3583915e092810472d3a751d4fd685c370", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/bf6c7f3583915e092810472d3a751d4fd685c370"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f3d096b0a87770fc3efe647f3b6de136479206ab", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f3d096b0a87770fc3efe647f3b6de136479206ab", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f3d096b0a87770fc3efe647f3b6de136479206ab", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f3d096b0a87770fc3efe647f3b6de136479206ab/comments", "author": null, "committer": null, "parents": [{"sha": "860ad33f3adab6683c23bec8d0a94df5b4e59799", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/860ad33f3adab6683c23bec8d0a94df5b4e59799", "html_url": "https://github.com/Rust-GCC/gccrs/commit/860ad33f3adab6683c23bec8d0a94df5b4e59799"}], "stats": {"total": 207, "additions": 207, "deletions": 0}, "files": [{"sha": "3ccbb0c1ea2202459cf228489b9fa80ce29c7a83", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f3d096b0a87770fc3efe647f3b6de136479206ab/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f3d096b0a87770fc3efe647f3b6de136479206ab/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=f3d096b0a87770fc3efe647f3b6de136479206ab", "patch": "@@ -1,3 +1,11 @@\n+2013-04-16   Naveen H.S  <Naveen.Hurugalawadi@caviumnetworks.com>\n+\n+\t* config/aarch64/aarch64.md (*adds_<optab><mode>_multp2):\n+\tNew pattern.\n+\t(*subs_<optab><mode>_multp2): New pattern.\n+\t(*adds_<optab><ALLX:mode>_<GPI:mode>): New pattern.\n+\t(*subs_<optab><ALLX:mode>_<GPI:mode>): New pattern.\n+\n 2013-04-16   Naveen H.S  <Naveen.Hurugalawadi@caviumnetworks.com>\n \n \t* config/aarch64/aarch64.md (*adds_mul_imm_<mode>): New pattern."}, {"sha": "c85e685dd57b8d69a1cba2eabc0ca647ecf90b5e", "filename": "gcc/config/aarch64/aarch64.md", "status": "modified", "additions": 72, "deletions": 0, "changes": 72, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f3d096b0a87770fc3efe647f3b6de136479206ab/gcc%2Fconfig%2Faarch64%2Faarch64.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f3d096b0a87770fc3efe647f3b6de136479206ab/gcc%2Fconfig%2Faarch64%2Faarch64.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64.md?ref=f3d096b0a87770fc3efe647f3b6de136479206ab", "patch": "@@ -1325,6 +1325,78 @@\n    (set_attr \"mode\" \"<MODE>\")]\n )\n \n+(define_insn \"*adds_<optab><ALLX:mode>_<GPI:mode>\"\n+  [(set (reg:CC_NZ CC_REGNUM)\n+\t(compare:CC_NZ\n+\t (plus:GPI\n+\t  (ANY_EXTEND:GPI (match_operand:ALLX 1 \"register_operand\" \"r\"))\n+\t  (match_operand:GPI 2 \"register_operand\" \"r\"))\n+\t(const_int 0)))\n+   (set (match_operand:GPI 0 \"register_operand\" \"=r\")\n+\t(plus:GPI (ANY_EXTEND:GPI (match_dup 1)) (match_dup 2)))]\n+  \"\"\n+  \"adds\\\\t%<GPI:w>0, %<GPI:w>2, %<GPI:w>1, <su>xt<ALLX:size>\"\n+  [(set_attr \"v8type\" \"alus_ext\")\n+   (set_attr \"mode\" \"<GPI:MODE>\")]\n+)\n+\n+(define_insn \"*subs_<optab><ALLX:mode>_<GPI:mode>\"\n+  [(set (reg:CC_NZ CC_REGNUM)\n+\t(compare:CC_NZ\n+\t (minus:GPI (match_operand:GPI 1 \"register_operand\" \"r\")\n+\t\t    (ANY_EXTEND:GPI\n+\t\t     (match_operand:ALLX 2 \"register_operand\" \"r\")))\n+\t(const_int 0)))\n+   (set (match_operand:GPI 0 \"register_operand\" \"=r\")\n+\t(minus:GPI (match_dup 1) (ANY_EXTEND:GPI (match_dup 2))))]\n+  \"\"\n+  \"subs\\\\t%<GPI:w>0, %<GPI:w>1, %<GPI:w>2, <su>xt<ALLX:size>\"\n+  [(set_attr \"v8type\" \"alus_ext\")\n+   (set_attr \"mode\" \"<GPI:MODE>\")]\n+)\n+\n+(define_insn \"*adds_<optab><mode>_multp2\"\n+  [(set (reg:CC_NZ CC_REGNUM)\n+\t(compare:CC_NZ\n+\t (plus:GPI (ANY_EXTRACT:GPI\n+\t\t    (mult:GPI (match_operand:GPI 1 \"register_operand\" \"r\")\n+\t\t\t      (match_operand 2 \"aarch64_pwr_imm3\" \"Up3\"))\n+\t\t    (match_operand 3 \"const_int_operand\" \"n\")\n+\t\t    (const_int 0))\n+\t\t   (match_operand:GPI 4 \"register_operand\" \"r\"))\n+\t(const_int 0)))\n+   (set (match_operand:GPI 0 \"register_operand\" \"=r\")\n+\t(plus:GPI (ANY_EXTRACT:GPI (mult:GPI (match_dup 1) (match_dup 2))\n+\t\t\t\t   (match_dup 3)\n+\t\t\t\t   (const_int 0))\n+\t\t  (match_dup 4)))]\n+  \"aarch64_is_extend_from_extract (<MODE>mode, operands[2], operands[3])\"\n+  \"adds\\\\t%<w>0, %<w>4, %<w>1, <su>xt%e3 %p2\"\n+  [(set_attr \"v8type\" \"alus_ext\")\n+   (set_attr \"mode\" \"<MODE>\")]\n+)\n+\n+(define_insn \"*subs_<optab><mode>_multp2\"\n+  [(set (reg:CC_NZ CC_REGNUM)\n+\t(compare:CC_NZ\n+\t (minus:GPI (match_operand:GPI 4 \"register_operand\" \"r\")\n+\t\t    (ANY_EXTRACT:GPI\n+\t\t     (mult:GPI (match_operand:GPI 1 \"register_operand\" \"r\")\n+\t\t\t       (match_operand 2 \"aarch64_pwr_imm3\" \"Up3\"))\n+\t\t     (match_operand 3 \"const_int_operand\" \"n\")\n+\t\t     (const_int 0)))\n+\t(const_int 0)))\n+   (set (match_operand:GPI 0 \"register_operand\" \"=r\")\n+\t(minus:GPI (match_dup 4) (ANY_EXTRACT:GPI\n+\t\t\t\t  (mult:GPI (match_dup 1) (match_dup 2))\n+\t\t\t\t  (match_dup 3)\n+\t\t\t\t  (const_int 0))))]\n+  \"aarch64_is_extend_from_extract (<MODE>mode, operands[2], operands[3])\"\n+  \"subs\\\\t%<w>0, %<w>4, %<w>1, <su>xt%e3 %p2\"\n+  [(set_attr \"v8type\" \"alus_ext\")\n+   (set_attr \"mode\" \"<MODE>\")]\n+)\n+\n (define_insn \"*add<mode>3nr_compare0\"\n   [(set (reg:CC_NZ CC_REGNUM)\n \t(compare:CC_NZ"}, {"sha": "d9a432cb2cbb54bf7a640d844777c9356ec53108", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f3d096b0a87770fc3efe647f3b6de136479206ab/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f3d096b0a87770fc3efe647f3b6de136479206ab/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=f3d096b0a87770fc3efe647f3b6de136479206ab", "patch": "@@ -1,3 +1,8 @@\n+2013-04-16   Naveen H.S  <Naveen.Hurugalawadi@caviumnetworks.com>\n+\n+\t* gcc.target/aarch64/adds3.c: New.\n+\t* gcc.target/aarch64/subs3.c: New.\n+\n 2013-04-16   Naveen H.S  <Naveen.Hurugalawadi@caviumnetworks.com>\n \n \t* gcc.target/aarch64/adds1.c: New."}, {"sha": "18efd1c21544d9c9a44bdb7e3f44d3d77d4c49b4", "filename": "gcc/testsuite/gcc.target/aarch64/adds3.c", "status": "added", "additions": 61, "deletions": 0, "changes": 61, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f3d096b0a87770fc3efe647f3b6de136479206ab/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadds3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f3d096b0a87770fc3efe647f3b6de136479206ab/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadds3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadds3.c?ref=f3d096b0a87770fc3efe647f3b6de136479206ab", "patch": "@@ -0,0 +1,61 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 --save-temps -fno-inline\" } */\n+\n+extern void abort (void);\n+typedef long long s64;\n+\n+int\n+adds_ext (s64 a, int b, int c)\n+{\n+ s64 d = a + b;\n+\n+  if (d == 0)\n+    return a + c;\n+  else\n+    return b + d + c;\n+}\n+\n+int\n+adds_shift_ext (s64 a, int b, int c)\n+{\n+ s64 d = (a + ((s64)b << 3));\n+\n+  if (d == 0)\n+    return a + c;\n+  else\n+    return b + d + c;\n+}\n+\n+int main ()\n+{\n+  int x;\n+  s64 y;\n+\n+  x = adds_ext (0x13000002ll, 41, 15);\n+  if (x != 318767203)\n+    abort ();\n+\n+  x = adds_ext (0x50505050ll, 29, 4);\n+  if (x != 1347440782)\n+    abort ();\n+\n+  x = adds_ext (0x12121212121ll, 2, 14);\n+  if (x != 555819315)\n+    abort ();\n+\n+  x = adds_shift_ext (0x123456789ll, 4, 12);\n+  if (x != 591751097)\n+    abort ();\n+\n+  x = adds_shift_ext (0x02020202ll, 9, 8);\n+  if (x != 33686107)\n+    abort ();\n+\n+  x = adds_shift_ext (0x987987987987ll, 23, 41);\n+  if (x != -2020050305)\n+    abort ();\n+\n+  return 0;\n+}\n+\n+/* { dg-final { scan-assembler-times \"adds\\tx\\[0-9\\]+, x\\[0-9\\]+, x\\[0-9\\]+, sxtw\" 2 } } */"}, {"sha": "90f20b8439106c41c4f0c29ea398b1362a399430", "filename": "gcc/testsuite/gcc.target/aarch64/subs3.c", "status": "added", "additions": 61, "deletions": 0, "changes": 61, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f3d096b0a87770fc3efe647f3b6de136479206ab/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsubs3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f3d096b0a87770fc3efe647f3b6de136479206ab/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsubs3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsubs3.c?ref=f3d096b0a87770fc3efe647f3b6de136479206ab", "patch": "@@ -0,0 +1,61 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 --save-temps -fno-inline\" } */\n+\n+extern void abort (void);\n+typedef long long s64;\n+\n+int\n+subs_ext (s64 a, int b, int c)\n+{\n+ s64 d = a - b;\n+\n+  if (d == 0)\n+    return a + c;\n+  else\n+    return b + d + c;\n+}\n+\n+int\n+subs_shift_ext (s64 a, int b, int c)\n+{\n+ s64 d = (a - ((s64)b << 3));\n+\n+  if (d == 0)\n+    return a + c;\n+  else\n+    return b + d + c;\n+}\n+\n+int main ()\n+{\n+  int x;\n+  s64 y;\n+\n+  x = subs_ext (0x13000002ll, 41, 15);\n+  if (x != 318767121)\n+    abort ();\n+\n+  x = subs_ext (0x50505050ll, 29, 4);\n+  if (x != 1347440724)\n+    abort ();\n+\n+  x = subs_ext (0x12121212121ll, 2, 14);\n+  if (x != 555819311)\n+    abort ();\n+\n+  x = subs_shift_ext (0x123456789ll, 4, 12);\n+  if (x != 591751033)\n+    abort ();\n+\n+  x = subs_shift_ext (0x02020202ll, 9, 8);\n+  if (x != 33685963)\n+    abort ();\n+\n+  x = subs_shift_ext (0x987987987987ll, 23, 41);\n+  if (x != -2020050673)\n+    abort ();\n+\n+  return 0;\n+}\n+\n+/* { dg-final { scan-assembler-times \"subs\\tx\\[0-9\\]+, x\\[0-9\\]+, x\\[0-9\\]+, sxtw\" 2 } } */"}]}