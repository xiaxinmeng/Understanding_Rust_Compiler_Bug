{"sha": "5797378aabcc51ef4de094f0160e451b45d6cfb7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTc5NzM3OGFhYmNjNTFlZjRkZTA5NGYwMTYwZTQ1MWI0NWQ2Y2ZiNw==", "commit": {"author": {"name": "Christian Bruel", "email": "christian.bruel@st.com", "date": "2015-12-01T14:50:57Z"}, "committer": {"name": "Christian Bruel", "email": "chrbr@gcc.gnu.org", "date": "2015-12-01T14:50:57Z"}, "message": "re PR target/68617 (arm ice output_operand: invalid %-code for  -march=armv6k + thumb)\n\n2015-12-01  Christian Bruel  <christian.bruel@st.com>\n\n        PR target/68617\n        * config/arm/arm.opt (unaligned_access): Save.\n        * config/arm/arm-c.c (__ARM_FEATURE_UNALIGNED): Conditionally define.\n        * config/arm/arm.c (arm_option_override): Move unaligned_access setting\n        (arm_option_override_internal): ... here.\n        * config/arm/arm.h (TARGET_32BIT_P): New macro.\n\n// testsuite\n        PR target/68617\n        * gcc.target/arm/attr-unaligned-load-ice.c: New test.\n\nFrom-SVN: r231114", "tree": {"sha": "28dfd6c2510d9f55c774429239ab50cb6ead7cc3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/28dfd6c2510d9f55c774429239ab50cb6ead7cc3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5797378aabcc51ef4de094f0160e451b45d6cfb7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5797378aabcc51ef4de094f0160e451b45d6cfb7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5797378aabcc51ef4de094f0160e451b45d6cfb7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5797378aabcc51ef4de094f0160e451b45d6cfb7/comments", "author": null, "committer": null, "parents": [{"sha": "f6b65a61e955444c5bae6ddfb412a6b6f80ba618", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f6b65a61e955444c5bae6ddfb412a6b6f80ba618", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f6b65a61e955444c5bae6ddfb412a6b6f80ba618"}], "stats": {"total": 86, "additions": 59, "deletions": 27}, "files": [{"sha": "10d90fe82c6f2cc39e3635aed11a497fb3c45fdd", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5797378aabcc51ef4de094f0160e451b45d6cfb7/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5797378aabcc51ef4de094f0160e451b45d6cfb7/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=5797378aabcc51ef4de094f0160e451b45d6cfb7", "patch": "@@ -1,3 +1,12 @@\n+2015-12-01  Christian Bruel  <christian.bruel@st.com>\n+\n+\tPR target/68617\n+\t* config/arm/arm.opt (unaligned_access): Save.\n+\t* config/arm/arm-c.c (__ARM_FEATURE_UNALIGNED): Conditionally define.\n+\t* config/arm/arm.c (arm_option_override): Move unaligned_access setting\n+\t(arm_option_override_internal): ... here.\n+\t* config/arm/arm.h (TARGET_32BIT_P): New macro.\n+\n 2015-12-01  Richard Biener  <rguenther@suse.de>\n \n \tPR tree-optimization/68379"}, {"sha": "7dee28ec52df68f8c7a60fe66e1b049fed39c1c0", "filename": "gcc/config/arm/arm-c.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5797378aabcc51ef4de094f0160e451b45d6cfb7/gcc%2Fconfig%2Farm%2Farm-c.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5797378aabcc51ef4de094f0160e451b45d6cfb7/gcc%2Fconfig%2Farm%2Farm-c.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm-c.c?ref=5797378aabcc51ef4de094f0160e451b45d6cfb7", "patch": "@@ -66,8 +66,8 @@ arm_cpu_builtins (struct cpp_reader* pfile)\n   def_or_undef_macro (pfile, \"__ARM_FEATURE_SAT\", TARGET_ARM_SAT);\n   def_or_undef_macro (pfile, \"__ARM_FEATURE_CRYPTO\", TARGET_CRYPTO);\n \n-  if (unaligned_access)\n-    builtin_define (\"__ARM_FEATURE_UNALIGNED\");\n+  def_or_undef_macro (pfile, \"__ARM_FEATURE_UNALIGNED\", unaligned_access);\n+\n   if (TARGET_CRC32)\n     builtin_define (\"__ARM_FEATURE_CRC32\");\n "}, {"sha": "362329d5f3743d5092902307da988335855fba23", "filename": "gcc/config/arm/arm.c", "status": "modified", "additions": 22, "deletions": 24, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5797378aabcc51ef4de094f0160e451b45d6cfb7/gcc%2Fconfig%2Farm%2Farm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5797378aabcc51ef4de094f0160e451b45d6cfb7/gcc%2Fconfig%2Farm%2Farm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.c?ref=5797378aabcc51ef4de094f0160e451b45d6cfb7", "patch": "@@ -2876,6 +2876,28 @@ arm_option_override_internal (struct gcc_options *opts,\n   if (!TARGET_THUMB2_P (opts->x_target_flags))\n     opts->x_arm_restrict_it = 0;\n \n+  /* Enable -munaligned-access by default for\n+     - all ARMv6 architecture-based processors when compiling for a 32-bit ISA\n+     i.e. Thumb2 and ARM state only.\n+     - ARMv7-A, ARMv7-R, and ARMv7-M architecture-based processors.\n+     - ARMv8 architecture-base processors.\n+\n+     Disable -munaligned-access by default for\n+     - all pre-ARMv6 architecture-based processors\n+     - ARMv6-M architecture-based processors.  */\n+\n+  if (! opts_set->x_unaligned_access)\n+    {\n+      opts->x_unaligned_access = (TARGET_32BIT_P (opts->x_target_flags)\n+\t\t\t  && arm_arch6 && (arm_arch_notm || arm_arch7));\n+    }\n+  else if (opts->x_unaligned_access == 1\n+\t   && !(arm_arch6 && (arm_arch_notm || arm_arch7)))\n+    {\n+      warning (0, \"target CPU does not support unaligned accesses\");\n+     opts->x_unaligned_access = 0;\n+    }\n+\n   /* Don't warn since it's on by default in -O2.  */\n   if (TARGET_THUMB1_P (opts->x_target_flags))\n     opts->x_flag_schedule_insns = 0;\n@@ -3281,30 +3303,6 @@ arm_option_override (void)\n \tfix_cm3_ldrd = 0;\n     }\n \n-  /* Enable -munaligned-access by default for\n-     - all ARMv6 architecture-based processors when compiling for a 32-bit ISA\n-     i.e. Thumb2 and ARM state only.\n-     - ARMv7-A, ARMv7-R, and ARMv7-M architecture-based processors.\n-     - ARMv8 architecture-base processors.\n-\n-     Disable -munaligned-access by default for\n-     - all pre-ARMv6 architecture-based processors\n-     - ARMv6-M architecture-based processors.  */\n-\n-  if (unaligned_access == 2)\n-    {\n-      if (TARGET_32BIT && arm_arch6 && (arm_arch_notm || arm_arch7))\n-\tunaligned_access = 1;\n-      else\n-\tunaligned_access = 0;\n-    }\n-  else if (unaligned_access == 1\n-\t   && !(arm_arch6 && (arm_arch_notm || arm_arch7)))\n-    {\n-      warning (0, \"target CPU does not support unaligned accesses\");\n-      unaligned_access = 0;\n-    }\n-\n   /* Hot/Cold partitioning is not currently supported, since we can't\n      handle literal pool placement in that case.  */\n   if (flag_reorder_blocks_and_partition)"}, {"sha": "fd999dd0941ed18d48f75f03ab203808af3b6ae3", "filename": "gcc/config/arm/arm.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5797378aabcc51ef4de094f0160e451b45d6cfb7/gcc%2Fconfig%2Farm%2Farm.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5797378aabcc51ef4de094f0160e451b45d6cfb7/gcc%2Fconfig%2Farm%2Farm.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.h?ref=5797378aabcc51ef4de094f0160e451b45d6cfb7", "patch": "@@ -131,6 +131,7 @@ extern void (*arm_lang_output_object_attributes_hook)(void);\n #define TARGET_ARM_P(flags)    (!TARGET_THUMB_P (flags))\n #define TARGET_THUMB1_P(flags) (TARGET_THUMB_P (flags) && !arm_arch_thumb2)\n #define TARGET_THUMB2_P(flags) (TARGET_THUMB_P (flags) && arm_arch_thumb2)\n+#define TARGET_32BIT_P(flags)  (TARGET_ARM_P (flags) || TARGET_THUMB2_P (flags))\n \n /* Run-time Target Specification.  */\n #define TARGET_SOFT_FLOAT\t\t(arm_float_abi == ARM_FLOAT_ABI_SOFT)"}, {"sha": "1e438a9c092f3f4994527729bcb5e29a367e727a", "filename": "gcc/config/arm/arm.opt", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5797378aabcc51ef4de094f0160e451b45d6cfb7/gcc%2Fconfig%2Farm%2Farm.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5797378aabcc51ef4de094f0160e451b45d6cfb7/gcc%2Fconfig%2Farm%2Farm.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.opt?ref=5797378aabcc51ef4de094f0160e451b45d6cfb7", "patch": "@@ -267,7 +267,7 @@ Avoid overlapping destination and address registers on LDRD instructions\n that may trigger Cortex-M3 errata.\n \n munaligned-access\n-Target Report Var(unaligned_access) Init(2)\n+Target Report Var(unaligned_access) Init(2) Save\n Enable unaligned word and halfword accesses to packed data.\n \n mneon-for-64bits"}, {"sha": "8463980e90e7b312ef6f45d80bce851a8b7cdbcb", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5797378aabcc51ef4de094f0160e451b45d6cfb7/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5797378aabcc51ef4de094f0160e451b45d6cfb7/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=5797378aabcc51ef4de094f0160e451b45d6cfb7", "patch": "@@ -1,3 +1,8 @@\n+2015-12-01  Christian Bruel  <christian.bruel@st.com>\n+\n+\tPR target/68617\n+\t* gcc.target/arm/attr-unaligned-load-ice.c: New test.\n+\n 2015-12-01  Tom de Vries  <tom@codesourcery.com>\n \n \t* gcc.dg/pr46032.c: Move to ..."}, {"sha": "e1ed1c148e007c152275996568892d86320bb18b", "filename": "gcc/testsuite/gcc.target/arm/attr-unaligned-load-ice.c", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5797378aabcc51ef4de094f0160e451b45d6cfb7/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fattr-unaligned-load-ice.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5797378aabcc51ef4de094f0160e451b45d6cfb7/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fattr-unaligned-load-ice.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fattr-unaligned-load-ice.c?ref=5797378aabcc51ef4de094f0160e451b45d6cfb7", "patch": "@@ -0,0 +1,19 @@\n+/* PR target/68617\n+   Verify that unaligned_access is correctly with attribute target.  */\n+/* { dg-do compile } */\n+/* { dg-skip-if \"avoid conflicting multilib options\" { *-*-* } { \"-march=*\" } { \"-march=armv6\" } } */\n+/* { dg-options \"-Os -mfloat-abi=softfp -mtp=soft\" } */\n+/* { dg-add-options arm_arch_v6 } */\n+\n+long __attribute__((target(\"thumb\")))\n+foo (char *s, long size, int unsigned_p)\n+{\n+  long x;\n+  unsigned char *p = (unsigned char *) s;\n+  switch (size)\n+    {\n+    case 4:\n+      x = ((long) p[3] << 24) | ((long) p[2] << 16) | (p[1] << 8) | p[0];\n+      return x;\n+    }\n+}"}]}