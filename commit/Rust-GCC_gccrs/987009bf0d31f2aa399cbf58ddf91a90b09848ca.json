{"sha": "987009bf0d31f2aa399cbf58ddf91a90b09848ca", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTg3MDA5YmYwZDMxZjJhYTM5OWNiZjU4ZGRmOTFhOTBiMDk4NDhjYQ==", "commit": {"author": {"name": "Zack Weinberg", "email": "zack@bitmover.com", "date": "1999-08-26T05:18:44Z"}, "committer": {"name": "Zack Weinberg", "email": "zack@gcc.gnu.org", "date": "1999-08-26T05:18:44Z"}, "message": "system.h: Don't redefine abort or trim_filename.\n\n1999-08-25 22:10 -0700  Zack Weinberg  <zack@bitmover.com>\n\n\t* system.h: Don't redefine abort or trim_filename.\n\t* rtl.h: Define abort to fancy_abort (__FILE__, __LINE__, 0)\n\tor fancy_abort (__FILE__, __LINE__, __FUNCTION__) depending on\n\twhether or not __FUNCTION__ is available.\n\t* tree.h: Duplicate rtl.h's definition of abort, for files\n\tthat don't include rtl.h.  Delete all code to perform type\n\tchecking with a compiler other than GCC.\n\t* varray.h: Delete all code to perform type checking with a\n\tcompiler other than GCC.  Make VARRAY_CHECK() always evaluate\n\tits arguments exactly once, using a statement expression.\n\tAdjust the VARRAY_<type> accessor macros to match.\n\t* toplev.h (fatal_insn, fatal_insn_not_found): Kill.\n\t(_fatal_insn, _fatal_insn_not_found): New fns, take info on\n\tcaller's location.  Define fatal_insn and fatal_insn_not_found\n\tas macros that use _fatal_insn and _fatal_insn_not_found.\n\t(fancy_abort, trim_filename): Kill prototypes.\n\n\t* rtl.c (trim_filename): Move here from toplev.c.\n\t(fancy_abort): New function.\n\t(DIR_SEPARATOR): Provide default definition.\n\t* tree.c (tree_check_failed, tree_class_check_failed): Go\n\tthrough fancy_abort.\n\t(tree_check, tree_class_check, cst_or_constructor_check,\n\texpr_check): Delete.\n\t* varray.c (varray_check_failed): New function.\n\t* toplev.c (fatal_insn, fatal_insn_not_found): Replace with\n\t_fatal_insn and _fatal_insn_not_found.  Go through\n\tfancy_abort.\n\t(trim_filename, fancy_abort): Delete.\n\n\t* builtins.c (expand_builtin_args_info): Report ICE with abort.\n\t* except.c (start_catch_handler): Report ICE with error/abort\n\tcombo.\n\t* final.c (output_operand_lossage): Likewise.\n\t* flow.c (verify_flow_info): Likewise.\n\n\t* gcc.c: Prototype fatal.\n\t* gengenrtl.c: Undef abort after including rtl.h not system.h.\n\t* genattr.c, genattrtab.c, genemit.c, genextract.c,\n\tgenflags.c, genopinit.c, genoutput.c, genpeep.c, genrecog.c:\n\tDon't define fancy_abort.\n\nFrom-SVN: r28889", "tree": {"sha": "d44a531d6d8a1d3b4f321e6fc43e9e6dbb2f1277", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d44a531d6d8a1d3b4f321e6fc43e9e6dbb2f1277"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/987009bf0d31f2aa399cbf58ddf91a90b09848ca", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/987009bf0d31f2aa399cbf58ddf91a90b09848ca", "html_url": "https://github.com/Rust-GCC/gccrs/commit/987009bf0d31f2aa399cbf58ddf91a90b09848ca", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/987009bf0d31f2aa399cbf58ddf91a90b09848ca/comments", "author": null, "committer": null, "parents": [{"sha": "f18a14bcc121ed9812ecba53b3a458ed3d16953f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f18a14bcc121ed9812ecba53b3a458ed3d16953f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f18a14bcc121ed9812ecba53b3a458ed3d16953f"}], "stats": {"total": 644, "additions": 273, "deletions": 371}, "files": [{"sha": "1177d1a552638d0ac88afa9a0eb0879c9b537c6b", "filename": "gcc/ChangeLog", "status": "modified", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/987009bf0d31f2aa399cbf58ddf91a90b09848ca/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/987009bf0d31f2aa399cbf58ddf91a90b09848ca/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=987009bf0d31f2aa399cbf58ddf91a90b09848ca", "patch": "@@ -1,3 +1,47 @@\n+1999-08-25 22:10 -0700  Zack Weinberg  <zack@bitmover.com>\n+\n+\t* system.h: Don't redefine abort or trim_filename.\n+\t* rtl.h: Define abort to fancy_abort (__FILE__, __LINE__, 0)\n+\tor fancy_abort (__FILE__, __LINE__, __FUNCTION__) depending on\n+\twhether or not __FUNCTION__ is available.\n+\t* tree.h: Duplicate rtl.h's definition of abort, for files\n+\tthat don't include rtl.h.  Delete all code to perform type\n+\tchecking with a compiler other than GCC.\n+\t* varray.h: Delete all code to perform type checking with a\n+\tcompiler other than GCC.  Make VARRAY_CHECK() always evaluate\n+\tits arguments exactly once, using a statement expression.\n+\tAdjust the VARRAY_<type> accessor macros to match.\n+\t* toplev.h (fatal_insn, fatal_insn_not_found): Kill.\n+\t(_fatal_insn, _fatal_insn_not_found): New fns, take info on\n+\tcaller's location.  Define fatal_insn and fatal_insn_not_found\n+\tas macros that use _fatal_insn and _fatal_insn_not_found.\n+\t(fancy_abort, trim_filename): Kill prototypes.\n+\n+\t* rtl.c (trim_filename): Move here from toplev.c.\n+\t(fancy_abort): New function.\n+\t(DIR_SEPARATOR): Provide default definition.\n+\t* tree.c (tree_check_failed, tree_class_check_failed): Go\n+\tthrough fancy_abort.\n+\t(tree_check, tree_class_check, cst_or_constructor_check,\n+\texpr_check): Delete.\n+\t* varray.c (varray_check_failed): New function.\n+\t* toplev.c (fatal_insn, fatal_insn_not_found): Replace with\n+\t_fatal_insn and _fatal_insn_not_found.  Go through\n+\tfancy_abort.\n+\t(trim_filename, fancy_abort): Delete.\n+\n+\t* builtins.c (expand_builtin_args_info): Report ICE with abort.\n+\t* except.c (start_catch_handler): Report ICE with error/abort\n+\tcombo.\n+\t* final.c (output_operand_lossage): Likewise.\n+\t* flow.c (verify_flow_info): Likewise.\n+\n+\t* gcc.c: Prototype fatal.\n+\t* gengenrtl.c: Undef abort after including rtl.h not system.h.\n+\t* genattr.c, genattrtab.c, genemit.c, genextract.c,\n+\tgenflags.c, genopinit.c, genoutput.c, genpeep.c, genrecog.c:\n+\tDon't define fancy_abort.\n+\n Wed Aug 25 17:56:59 1999  Richard Henderson  <rth@cygnus.com>\n \n \t* optabs.c (emit_cmp_and_jump_insns): Be more thorough in"}, {"sha": "c4e36059d07094c64ebcc0fc2a84204189f4f6ba", "filename": "gcc/builtins.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/987009bf0d31f2aa399cbf58ddf91a90b09848ca/gcc%2Fbuiltins.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/987009bf0d31f2aa399cbf58ddf91a90b09848ca/gcc%2Fbuiltins.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbuiltins.c?ref=987009bf0d31f2aa399cbf58ddf91a90b09848ca", "patch": "@@ -1734,8 +1734,7 @@ expand_builtin_args_info (exp)\n #endif\n \n   if (sizeof (CUMULATIVE_ARGS) % sizeof (int) != 0)\n-    fatal (\"CUMULATIVE_ARGS type defined badly; see %s, line %d\",\n-\t   __FILE__, __LINE__);\n+    abort ();\n \n   if (arglist != 0)\n     {"}, {"sha": "0d6abc39e14433f053980f7f8e6d67f8b34562f8", "filename": "gcc/except.c", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/987009bf0d31f2aa399cbf58ddf91a90b09848ca/gcc%2Fexcept.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/987009bf0d31f2aa399cbf58ddf91a90b09848ca/gcc%2Fexcept.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexcept.c?ref=987009bf0d31f2aa399cbf58ddf91a90b09848ca", "patch": "@@ -1692,7 +1692,10 @@ start_catch_handler (rtime)\n       rtx call_rtx, rtime_address;\n \n       if (catchstack.top->entry->false_label != NULL_RTX)\n-        fatal (\"Compiler Bug: Never issued previous false_label\");\n+\t{\n+\t  error (\"Never issued previous false_label\");\n+\t  abort ();\n+\t}\n       catchstack.top->entry->false_label = gen_exception_label ();\n \n       rtime_address = expand_expr (rtime, NULL_RTX, Pmode, EXPAND_INITIALIZER);"}, {"sha": "9d725adc98cc295b074853ad1625c472507cb03b", "filename": "gcc/final.c", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/987009bf0d31f2aa399cbf58ddf91a90b09848ca/gcc%2Ffinal.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/987009bf0d31f2aa399cbf58ddf91a90b09848ca/gcc%2Ffinal.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffinal.c?ref=987009bf0d31f2aa399cbf58ddf91a90b09848ca", "patch": "@@ -3324,7 +3324,10 @@ output_operand_lossage (msgid)\n   if (this_is_asm_operands)\n     error_for_asm (this_is_asm_operands, \"invalid `asm': %s\", _(msgid));\n   else\n-    fatal (\"Internal compiler error, output_operand_lossage `%s'\", _(msgid));\n+    {\n+      error (\"output_operand: %s\", _(msgid));\n+      abort ();\n+    }\n }\n \f\n /* Output of assembler code from a template, and its subroutines.  */"}, {"sha": "0f151e7c2621cefce02e97e97fdb2a767b829b85", "filename": "gcc/flow.c", "status": "modified", "additions": 24, "deletions": 18, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/987009bf0d31f2aa399cbf58ddf91a90b09848ca/gcc%2Fflow.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/987009bf0d31f2aa399cbf58ddf91a90b09848ca/gcc%2Fflow.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fflow.c?ref=987009bf0d31f2aa399cbf58ddf91a90b09848ca", "patch": "@@ -6171,8 +6171,9 @@ verify_flow_info ()\n \t  break;\n       if (!x)\n \t{\n-\t  fatal (\"verify_flow_info: Head insn %d for block %d not found in the insn stream.\\n\",\n+\t  error (\"Head insn %d for block %d not found in the insn stream.\",\n \t\t INSN_UID (bb->head), bb->index);\n+\t  abort ();\n \t}\n \n       /* Check the end pointer and make sure that it is pointing into\n@@ -6181,8 +6182,9 @@ verify_flow_info ()\n \t{\n \t  if (bb_info[INSN_UID (x)] != NULL)\n \t    {\n-\t      fatal (\"verify_flow_info: Insn %d is in multiple basic blocks (%d and %d)\",\n+\t      error (\"Insn %d is in multiple basic blocks (%d and %d)\",\n \t\t     INSN_UID (x), bb->index, bb_info[INSN_UID (x)]->index);\n+\t      abort ();\n \t    }\n \t  bb_info[INSN_UID (x)] = bb;\n \n@@ -6191,8 +6193,9 @@ verify_flow_info ()\n \t}\n       if (!x)\n \t{\n-\t  fatal (\"verify_flow_info: End insn %d for block %d not found in the insn stream.\\n\",\n+\t  error (\"End insn %d for block %d not found in the insn stream.\",\n \t\t INSN_UID (bb->end), bb->index);\n+\t  abort ();\n \t}\n     }\n \n@@ -6224,8 +6227,8 @@ verify_flow_info ()\n \t\te2 = e2->pred_next;\n \t      if (!e2)\n \t\t{\n-\t\t  fatal (\"verify_flow_info: Basic block %i edge lists are corrupted\\n\",\n-\t\t\t bb->index);\n+\t\t  error (\"Basic block %i edge lists are corrupted\", bb->index);\n+\t\t  abort ();\n \t\t}\n \t    }\n \t  e = e->succ_next;\n@@ -6236,13 +6239,12 @@ verify_flow_info ()\n \t{\n \t  if (e->dest != bb)\n \t    {\n-\t      fprintf (stderr, \"verify_flow_info: Basic block %d pred edge is corrupted\\n\",\n-\t\t       bb->index);\n-\t      fprintf (stderr, \"Predecessor: \");\n+\t      error (\"Basic block %d pred edge is corrupted\", bb->index);\n+\t      fputs (\"Predecessor: \", stderr);\n \t      dump_edge_info (stderr, e, 0);\n-\t      fprintf (stderr, \"\\nSuccessor: \");\n+\t      fputs (\"\\nSuccessor: \", stderr);\n \t      dump_edge_info (stderr, e, 1);\n-\t      fflush (stderr);\n+\t      fputc ('\\n', stderr);\n \t      abort ();\n \t    }\n \t  if (e->src != ENTRY_BLOCK_PTR)\n@@ -6252,8 +6254,8 @@ verify_flow_info ()\n \t\te2 = e2->succ_next;\n \t      if (!e2)\n \t\t{\n-\t\t  fatal (\"verify_flow_info: Basic block %i edge lists are corrupted\\n\",\n-\t\t\t bb->index);\n+\t\t  error (\"Basic block %i edge lists are corrupted\", bb->index);\n+\t\t  abort;\n \t\t}\n \t    }\n \t  e = e->pred_next;\n@@ -6267,16 +6269,19 @@ verify_flow_info ()\n \t{\n \t  if (bb->end == x)\n \t    {\n-\t      fatal (\"verify_flow_info: Basic block contains only CODE_LABEL and no NOTE_INSN_BASIC_BLOCK note\\n\");\n+\t      error (\"NOTE_INSN_BASIC_BLOCK is missing for block %d\",\n+\t\t     bb->index);\n+\t      abort ();\n \t    }\n \t  x = NEXT_INSN (x);\n \t}\n       if (GET_CODE (x) != NOTE\n \t  || NOTE_LINE_NUMBER (x) != NOTE_INSN_BASIC_BLOCK\n \t  || NOTE_BASIC_BLOCK (x) != bb)\n \t{\n-\t  fatal (\"verify_flow_info: NOTE_INSN_BASIC_BLOCK is missing for block %d\\n\",\n+\t  error (\"NOTE_INSN_BASIC_BLOCK is missing for block %d\\n\",\n \t\t bb->index);\n+\t  abort ();\n \t}\n \n       if (bb->end == x)\n@@ -6291,8 +6296,9 @@ verify_flow_info ()\n \t      if (GET_CODE (x) == NOTE\n \t\t  && NOTE_LINE_NUMBER (x) == NOTE_INSN_BASIC_BLOCK)\n \t\t{\n-\t\t  fatal (\"verify_flow_info: NOTE_INSN_BASIC_BLOCK %d in the middle of basic block %d\\n\",\n+\t\t  error (\"NOTE_INSN_BASIC_BLOCK %d in the middle of basic block %d\",\n \t\t\t INSN_UID (x), bb->index);\n+\t\t  abort ();\n \t\t}\n \n \t      if (x == bb->end)\n@@ -6302,8 +6308,8 @@ verify_flow_info ()\n \t\t  || GET_CODE (x) == CODE_LABEL\n \t\t  || GET_CODE (x) == BARRIER)\n \t\t{\n-\t\t  fatal_insn (\"verify_flow_info: Incorrect insn in the middle of basic block %d\\n\",\n-\t\t\t      x, bb->index);\n+\t\t  error (\"In basic block %d:\", bb->index);\n+\t\t  fatal_insn (\"Flow control insn inside a basic block\", x);\n \t\t}\n \n \t      x = NEXT_INSN (x);\n@@ -6336,7 +6342,7 @@ verify_flow_info ()\n \t      break;\n \n \t    default:\n-\t      fatal_insn (\"verify_flow_info: Insn outside basic block\\n\", x);\n+\t      fatal_insn (\"Insn outside basic block\", x);\n \t    }\n \t}\n "}, {"sha": "f62ac40a9a33c61c83e46f5ad30dfb738a38aa19", "filename": "gcc/gcc.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/987009bf0d31f2aa399cbf58ddf91a90b09848ca/gcc%2Fgcc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/987009bf0d31f2aa399cbf58ddf91a90b09848ca/gcc%2Fgcc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgcc.c?ref=987009bf0d31f2aa399cbf58ddf91a90b09848ca", "patch": "@@ -205,6 +205,8 @@ static void pfatal_with_name\tPROTO((const char *)) ATTRIBUTE_NORETURN;\n static void perror_with_name\tPROTO((const char *));\n static void pfatal_pexecute\tPROTO((const char *, const char *))\n   ATTRIBUTE_NORETURN;\n+static void fatal\t\tPVPROTO((const char *, ...))\n+  ATTRIBUTE_PRINTF_1 ATTRIBUTE_NORETURN;\n static void error\t\tPVPROTO((const char *, ...))\n   ATTRIBUTE_PRINTF_1;\n static void notice\t\tPVPROTO((const char *, ...))"}, {"sha": "cfa6c595aa0ebd1eda70c1703bd0e306b161b39d", "filename": "gcc/genattr.c", "status": "modified", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/987009bf0d31f2aa399cbf58ddf91a90b09848ca/gcc%2Fgenattr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/987009bf0d31f2aa399cbf58ddf91a90b09848ca/gcc%2Fgenattr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgenattr.c?ref=987009bf0d31f2aa399cbf58ddf91a90b09848ca", "patch": "@@ -33,7 +33,6 @@ struct obstack *rtl_obstack = &obstack;\n \n void fatal PVPROTO ((const char *, ...))\n   ATTRIBUTE_PRINTF_1 ATTRIBUTE_NORETURN;\n-void fancy_abort PROTO((void)) ATTRIBUTE_NORETURN;\n \n /* Define this so we can link with print-rtl.o to get debug_rtx function.  */\n char **insn_name_ptr = 0;\n@@ -246,15 +245,6 @@ fatal VPROTO ((const char *format, ...))\n   exit (FATAL_EXIT_CODE);\n }\n \n-/* More 'friendly' abort that prints the line and file.\n-   config.h can #define abort fancy_abort if you like that sort of thing.  */\n-\n-void\n-fancy_abort ()\n-{\n-  fatal (\"Internal gcc abort.\");\n-}\n-\f\n int\n main (argc, argv)\n      int argc;"}, {"sha": "83b3780bdd1b5029d7fc03f76e8329adb2e5dd09", "filename": "gcc/genattrtab.c", "status": "modified", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/987009bf0d31f2aa399cbf58ddf91a90b09848ca/gcc%2Fgenattrtab.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/987009bf0d31f2aa399cbf58ddf91a90b09848ca/gcc%2Fgenattrtab.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgenattrtab.c?ref=987009bf0d31f2aa399cbf58ddf91a90b09848ca", "patch": "@@ -121,7 +121,6 @@ char **insn_name_ptr = 0;\n \n void fatal PVPROTO ((const char *, ...))\n   ATTRIBUTE_PRINTF_1 ATTRIBUTE_NORETURN;\n-void fancy_abort PROTO((void)) ATTRIBUTE_NORETURN;\n \n /* enough space to reserve for printing out ints */\n #define MAX_DIGITS (HOST_BITS_PER_INT * 3 / 10 + 3)\n@@ -5928,15 +5927,6 @@ fatal VPROTO ((const char *format, ...))\n   exit (FATAL_EXIT_CODE);\n }\n \n-/* More 'friendly' abort that prints the line and file.\n-   config.h can #define abort fancy_abort if you like that sort of thing.  */\n-\n-void\n-fancy_abort ()\n-{\n-  fatal (\"Internal gcc abort.\");\n-}\n-\n /* Determine if an insn has a constant number of delay slots, i.e., the\n    number of delay slots is not a function of the length of the insn.  */\n "}, {"sha": "385dae1bb55c8f74bd1b04e919a0e9cae7933fcf", "filename": "gcc/gencodes.c", "status": "modified", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/987009bf0d31f2aa399cbf58ddf91a90b09848ca/gcc%2Fgencodes.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/987009bf0d31f2aa399cbf58ddf91a90b09848ca/gcc%2Fgencodes.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgencodes.c?ref=987009bf0d31f2aa399cbf58ddf91a90b09848ca", "patch": "@@ -35,7 +35,6 @@ struct obstack *rtl_obstack = &obstack;\n \n void fatal PVPROTO ((const char *, ...))\n   ATTRIBUTE_PRINTF_1 ATTRIBUTE_NORETURN;\n-void fancy_abort PROTO((void)) ATTRIBUTE_NORETURN;\n \n /* Define this so we can link with print-rtl.o to get debug_rtx function.  */\n char **insn_name_ptr = 0;\n@@ -103,15 +102,6 @@ fatal VPROTO ((const char *format, ...))\n   exit (FATAL_EXIT_CODE);\n }\n \n-/* More 'friendly' abort that prints the line and file.\n-   config.h can #define abort fancy_abort if you like that sort of thing.  */\n-\n-void\n-fancy_abort ()\n-{\n-  fatal (\"Internal gcc abort.\");\n-}\n-\f\n int\n main (argc, argv)\n      int argc;"}, {"sha": "10bf89c154b96b9203396cbefc443c6dda7a515b", "filename": "gcc/genconfig.c", "status": "modified", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/987009bf0d31f2aa399cbf58ddf91a90b09848ca/gcc%2Fgenconfig.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/987009bf0d31f2aa399cbf58ddf91a90b09848ca/gcc%2Fgenconfig.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgenconfig.c?ref=987009bf0d31f2aa399cbf58ddf91a90b09848ca", "patch": "@@ -51,7 +51,6 @@ static int dup_operands_seen_this_insn;\n \n void fatal PVPROTO ((const char *, ...))\n   ATTRIBUTE_PRINTF_1 ATTRIBUTE_NORETURN;\n-void fancy_abort PROTO((void)) ATTRIBUTE_NORETURN;\n \n static void walk_insn_part PROTO((rtx, int, int));\n static void gen_insn PROTO((rtx));\n@@ -292,15 +291,6 @@ fatal VPROTO ((const char *format, ...))\n   exit (FATAL_EXIT_CODE);\n }\n \n-/* More 'friendly' abort that prints the line and file.\n-   config.h can #define abort fancy_abort if you like that sort of thing.  */\n-\n-void\n-fancy_abort ()\n-{\n-  fatal (\"Internal gcc abort.\");\n-}\n-\f\n int\n main (argc, argv)\n      int argc;"}, {"sha": "0443ea6d158ae469774c5c7cfbe41c4bd86997b0", "filename": "gcc/genemit.c", "status": "modified", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/987009bf0d31f2aa399cbf58ddf91a90b09848ca/gcc%2Fgenemit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/987009bf0d31f2aa399cbf58ddf91a90b09848ca/gcc%2Fgenemit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgenemit.c?ref=987009bf0d31f2aa399cbf58ddf91a90b09848ca", "patch": "@@ -32,7 +32,6 @@ struct obstack *rtl_obstack = &obstack;\n \n void fatal PVPROTO ((const char *, ...))\n   ATTRIBUTE_PRINTF_1 ATTRIBUTE_NORETURN;\n-void fancy_abort PROTO((void)) ATTRIBUTE_NORETURN;\n \n /* Define this so we can link with print-rtl.o to get debug_rtx function.  */\n char **insn_name_ptr = 0;\n@@ -728,15 +727,6 @@ fatal VPROTO ((const char *format, ...))\n   exit (FATAL_EXIT_CODE);\n }\n \n-/* More 'friendly' abort that prints the line and file.\n-   config.h can #define abort fancy_abort if you like that sort of thing.  */\n-\n-void\n-fancy_abort ()\n-{\n-  fatal (\"Internal gcc abort.\");\n-}\n-\f\n int\n main (argc, argv)\n      int argc;"}, {"sha": "174d56ebe34c511d157adedb99e51584f39bc3c2", "filename": "gcc/genextract.c", "status": "modified", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/987009bf0d31f2aa399cbf58ddf91a90b09848ca/gcc%2Fgenextract.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/987009bf0d31f2aa399cbf58ddf91a90b09848ca/gcc%2Fgenextract.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgenextract.c?ref=987009bf0d31f2aa399cbf58ddf91a90b09848ca", "patch": "@@ -100,7 +100,6 @@ static void walk_rtx PROTO ((rtx, const char *));\n static void print_path PROTO ((char *));\n void fatal PVPROTO ((const char *, ...))\n   ATTRIBUTE_PRINTF_1 ATTRIBUTE_NORETURN;\n-void fancy_abort PROTO ((void)) ATTRIBUTE_NORETURN;\n \f\n static void\n gen_insn (insn)\n@@ -391,15 +390,6 @@ fatal VPROTO ((const char *format, ...))\n   exit (FATAL_EXIT_CODE);\n }\n \n-/* More 'friendly' abort that prints the line and file.\n-   config.h can #define abort fancy_abort if you like that sort of thing.  */\n-\n-void\n-fancy_abort ()\n-{\n-  fatal (\"Internal gcc abort.\");\n-}\n-\n char *\n xstrdup (input)\n   const char *input;"}, {"sha": "7d521a4447e9581c70e8216b092a0ce88c017fd3", "filename": "gcc/genflags.c", "status": "modified", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/987009bf0d31f2aa399cbf58ddf91a90b09848ca/gcc%2Fgenflags.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/987009bf0d31f2aa399cbf58ddf91a90b09848ca/gcc%2Fgenflags.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgenflags.c?ref=987009bf0d31f2aa399cbf58ddf91a90b09848ca", "patch": "@@ -35,7 +35,6 @@ struct obstack *rtl_obstack = &obstack;\n \n void fatal PVPROTO ((const char *, ...))\n   ATTRIBUTE_PRINTF_1 ATTRIBUTE_NORETURN;\n-void fancy_abort PROTO((void)) ATTRIBUTE_NORETURN;\n \n /* Names for patterns.  Need to allow linking with print-rtl.  */\n char **insn_name_ptr;\n@@ -223,15 +222,6 @@ fatal VPROTO ((const char *format, ...))\n   exit (FATAL_EXIT_CODE);\n }\n \n-/* More 'friendly' abort that prints the line and file.\n-   config.h can #define abort fancy_abort if you like that sort of thing.  */\n-\n-void\n-fancy_abort ()\n-{\n-  fatal (\"Internal gcc abort.\");\n-}\n-\f\n int\n main (argc, argv)\n      int argc;"}, {"sha": "e07b9402c8818e5c421534ecda8bbf60d5f8e494", "filename": "gcc/gengenrtl.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/987009bf0d31f2aa399cbf58ddf91a90b09848ca/gcc%2Fgengenrtl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/987009bf0d31f2aa399cbf58ddf91a90b09848ca/gcc%2Fgengenrtl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgengenrtl.c?ref=987009bf0d31f2aa399cbf58ddf91a90b09848ca", "patch": "@@ -21,10 +21,10 @@ Boston, MA 02111-1307, USA.  */\n \n #include \"hconfig.h\"\n #include \"system.h\"\n-#undef abort\n \n #define NO_GENRTL_H\n #include \"rtl.h\"\n+#undef abort\n \n \n struct rtx_definition "}, {"sha": "ef9f3c75ce8a7debc84ba7412599e2042807b95b", "filename": "gcc/genopinit.c", "status": "modified", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/987009bf0d31f2aa399cbf58ddf91a90b09848ca/gcc%2Fgenopinit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/987009bf0d31f2aa399cbf58ddf91a90b09848ca/gcc%2Fgenopinit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgenopinit.c?ref=987009bf0d31f2aa399cbf58ddf91a90b09848ca", "patch": "@@ -32,7 +32,6 @@ struct obstack *rtl_obstack = &obstack;\n \n void fatal PVPROTO ((const char *, ...))\n   ATTRIBUTE_PRINTF_1 ATTRIBUTE_NORETURN;\n-void fancy_abort PROTO((void)) ATTRIBUTE_NORETURN;\n \n /* Many parts of GCC use arrays that are indexed by machine mode and\n    contain the insn codes for pattern in the MD file that perform a given\n@@ -328,15 +327,6 @@ fatal VPROTO ((const char *format, ...))\n   exit (FATAL_EXIT_CODE);\n }\n \n-/* More 'friendly' abort that prints the line and file.\n-   config.h can #define abort fancy_abort if you like that sort of thing.  */\n-\n-void\n-fancy_abort ()\n-{\n-  fatal (\"Internal gcc abort.\");\n-}\n-\f\n int\n main (argc, argv)\n      int argc;"}, {"sha": "095b67c7a248feff2ebcd2e3ff1453d915e3e1d2", "filename": "gcc/genoutput.c", "status": "modified", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/987009bf0d31f2aa399cbf58ddf91a90b09848ca/gcc%2Fgenoutput.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/987009bf0d31f2aa399cbf58ddf91a90b09848ca/gcc%2Fgenoutput.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgenoutput.c?ref=987009bf0d31f2aa399cbf58ddf91a90b09848ca", "patch": "@@ -109,7 +109,6 @@ struct obstack *rtl_obstack = &obstack;\n \n void fatal PVPROTO ((const char *, ...))\n   ATTRIBUTE_PRINTF_1 ATTRIBUTE_NORETURN;\n-void fancy_abort PROTO((void)) ATTRIBUTE_NORETURN;\n static void error PVPROTO ((const char *, ...)) ATTRIBUTE_PRINTF_1;\n static int n_occurrences PROTO((int, char *));\n \n@@ -953,15 +952,6 @@ fatal VPROTO ((const char *format, ...))\n   exit (FATAL_EXIT_CODE);\n }\n \n-/* More 'friendly' abort that prints the line and file.\n-   config.h can #define abort fancy_abort if you like that sort of thing.  */\n-\n-void\n-fancy_abort ()\n-{\n-  fatal (\"Internal gcc abort.\");\n-}\n-\n static void\n error VPROTO ((const char *format, ...))\n {"}, {"sha": "7b02160d7a80e5d2a7baaa5b82a9e070e5924367", "filename": "gcc/genpeep.c", "status": "modified", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/987009bf0d31f2aa399cbf58ddf91a90b09848ca/gcc%2Fgenpeep.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/987009bf0d31f2aa399cbf58ddf91a90b09848ca/gcc%2Fgenpeep.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgenpeep.c?ref=987009bf0d31f2aa399cbf58ddf91a90b09848ca", "patch": "@@ -48,7 +48,6 @@ struct link\n \n void fatal PVPROTO ((const char *, ...))\n   ATTRIBUTE_PRINTF_1 ATTRIBUTE_NORETURN;\n-void fancy_abort PROTO((void)) ATTRIBUTE_NORETURN;\n \n static int max_opno;\n \n@@ -431,15 +430,6 @@ fatal VPROTO ((const char *format, ...))\n   exit (FATAL_EXIT_CODE);\n }\n \n-/* More 'friendly' abort that prints the line and file.\n-   config.h can #define abort fancy_abort if you like that sort of thing.  */\n-\n-void\n-fancy_abort ()\n-{\n-  fatal (\"Internal gcc abort.\");\n-}\n-\f\n int\n main (argc, argv)\n      int argc;"}, {"sha": "748c2a1882aab05ecf18e5491fa0e0e94dee4acc", "filename": "gcc/genrecog.c", "status": "modified", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/987009bf0d31f2aa399cbf58ddf91a90b09848ca/gcc%2Fgenrecog.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/987009bf0d31f2aa399cbf58ddf91a90b09848ca/gcc%2Fgenrecog.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgenrecog.c?ref=987009bf0d31f2aa399cbf58ddf91a90b09848ca", "patch": "@@ -195,7 +195,6 @@ static void write_tree\t\tPROTO((struct decision *, const char *,\n static void change_state\tPROTO((const char *, const char *, int));\n void fatal\t\tPVPROTO((const char *, ...))\n   ATTRIBUTE_PRINTF_1 ATTRIBUTE_NORETURN;\n-void fancy_abort\t\tPROTO((void)) ATTRIBUTE_NORETURN;\n \f\n /* Construct and return a sequence of decisions\n    that will recognize INSN.\n@@ -1732,15 +1731,6 @@ fatal VPROTO ((const char *format, ...))\n   exit (FATAL_EXIT_CODE);\n }\n \n-/* More 'friendly' abort that prints the line and file.\n-   config.h can #define abort fancy_abort if you like that sort of thing.  */\n-\n-void\n-fancy_abort ()\n-{\n-  fatal (\"Internal gcc abort.\");\n-}\n-\f\n int\n main (argc, argv)\n      int argc;"}, {"sha": "e50d5a759c7055f7378945d310b2e656f2b3ace5", "filename": "gcc/rtl.c", "status": "modified", "additions": 54, "deletions": 0, "changes": 54, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/987009bf0d31f2aa399cbf58ddf91a90b09848ca/gcc%2Frtl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/987009bf0d31f2aa399cbf58ddf91a90b09848ca/gcc%2Frtl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frtl.c?ref=987009bf0d31f2aa399cbf58ddf91a90b09848ca", "patch": "@@ -29,6 +29,10 @@ Boston, MA 02111-1307, USA.  */\n #define\tobstack_chunk_alloc\txmalloc\n #define\tobstack_chunk_free\tfree\n \n+#ifndef DIR_SEPARATOR\n+#define DIR_SEPARATOR '/'\n+#endif\n+\n /* Obstack used for allocating RTL objects.\n    Between functions, this is the permanent_obstack.\n    While parsing and expanding a function, this is maybepermanent_obstack\n@@ -962,3 +966,53 @@ init_rtl ()\n \t}\n     }\n }\n+\n+/* These are utility functions used by fatal-error functions all over the\n+   code.  rtl.c happens to be linked by all the programs that need them,\n+   so these are here.  In the future we want to break out all error handling\n+   to its own module.  */\n+\n+/* Given a partial pathname as input, return another pathname that\n+   shares no directory elements with the pathname of __FILE__.  This\n+   is used by fancy_abort() to print `Internal compiler error in expr.c'\n+   instead of `Internal compiler error in ../../egcs/gcc/expr.c'.  */\n+static const char *\n+trim_filename (name)\n+     const char *name;\n+{\n+  static const char *this_file = __FILE__;\n+  const char *p = name, *q = this_file;\n+\n+  while (*p == *q && *p != 0 && *q != 0) p++, q++;\n+  while (p > name && p[-1] != DIR_SEPARATOR\n+#ifdef DIR_SEPARATOR_2\n+\t && p[-1] != DIR_SEPARATOR_2\n+#endif\n+\t )\n+    p--;\n+\n+  return p;\n+}\n+\n+/* Report an internal compiler error in a friendly manner and without\n+   dumping core.  There are two versions because __FUNCTION__ isn't\n+   available except in gcc 2.7 and later.  */\n+\n+extern void fatal PVPROTO ((const char *, ...))\n+    ATTRIBUTE_PRINTF_1 ATTRIBUTE_NORETURN;\n+\n+void\n+fancy_abort (file, line, function)\n+     const char *file;\n+     int line;\n+     const char *function;\n+{\n+  if (function == NULL)\n+    function = \"?\";\n+  fatal (\n+\"Internal compiler error in `%s', at %s:%d\\n\\\n+Please submit a full bug report.\\n\\\n+See <URL:http://www.gnu.org/software/gcc/faq.html#bugreport> \\\n+for instructions.\",\n+\t function, trim_filename (file), line);\n+}"}, {"sha": "c8c25d4e4fbaf6697f5d5f89c3d5e7a1e9b5f951", "filename": "gcc/rtl.h", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/987009bf0d31f2aa399cbf58ddf91a90b09848ca/gcc%2Frtl.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/987009bf0d31f2aa399cbf58ddf91a90b09848ca/gcc%2Frtl.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frtl.h?ref=987009bf0d31f2aa399cbf58ddf91a90b09848ca", "patch": "@@ -1544,6 +1544,20 @@ extern int supports_one_only\t\tPROTO ((void));\n extern void init_rtl\t\t\tPROTO ((void));\n extern void rtx_free\t\t\tPROTO ((rtx));\n \n+/* Redefine abort to report an internal error w/o coredump, and\n+   reporting the location of the error in the source file.  This logic\n+   is duplicated in rtl.h and tree.h because every file that needs the\n+   special abort includes one or both.  toplev.h gets too few files,\n+   system.h gets too many.  */\n+\n+extern void fancy_abort PROTO((const char *, int, const char *))\n+    ATTRIBUTE_NORETURN;\n+#if __GNUC__ < 2 || (__GNUC__ == 2 && __GNUC_MINOR__ < 7)\n+#define abort() fancy_abort (__FILE__, __LINE__, 0)\n+#else\n+#define abort() fancy_abort (__FILE__, __LINE__, __PRETTY_FUNCTION__)\n+#endif\n+\n /* In alias.c */\n extern int true_dependence\t\tPROTO ((rtx, enum machine_mode, rtx,\n \t\t\t\t\t\tint (*)(rtx)));"}, {"sha": "41282bf56baa7333667efbbd9ca622d0f8df7183", "filename": "gcc/system.h", "status": "modified", "additions": 0, "deletions": 19, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/987009bf0d31f2aa399cbf58ddf91a90b09848ca/gcc%2Fsystem.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/987009bf0d31f2aa399cbf58ddf91a90b09848ca/gcc%2Fsystem.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsystem.h?ref=987009bf0d31f2aa399cbf58ddf91a90b09848ca", "patch": "@@ -384,28 +384,9 @@ extern int setrlimit ();\n #define volatile\n #endif\n \n-/* Redefine abort to report an internal error w/o coredump, and reporting the\n-   location of the error in the source file.\n-   Some files undefine abort again, so we must prototype the real thing\n-   for their sake.  */\n #ifdef NEED_DECLARATION_ABORT\n extern void abort ();\n #endif\n-extern void fatal PVPROTO((const char *, ...)) ATTRIBUTE_PRINTF_1 ATTRIBUTE_NORETURN;\n-\n-#if __GNUC__ < 2 || (__GNUC__ == 2 && __GNUC_MINOR__ < 7)\n-#define abort() fatal (\"Internal compiler error at %s:%d\\n\", \\\n-\t\t       trim_filename (__FILE__), __LINE__)\n-#else\n-#define abort() fatal (\"Internal compiler error in `%s', at %s:%d\\n\"\t\\\n-  \"Please submit a full bug report.\\n\"\t\\\n-  \"See <URL:http://www.gnu.org/software/gcc/faq.html#bugreport> for instructions.\", \\\n-  __PRETTY_FUNCTION__, trim_filename (__FILE__), __LINE__)\n-#endif /* recent gcc */\n-\n-/* trim_filename is in toplev.c.  Define a stub macro for files that\n-   don't link toplev.c.  toplev.h will reset it to the real version.  */\n-#define trim_filename(x) (x)\n \n /* Define a STRINGIFY macro that's right for ANSI or traditional C.\n    HAVE_CPP_STRINGIFY only refers to the stage1 compiler.  Assume that"}, {"sha": "5acf1312d839fef5a4d14669c3b729affdf6fbd6", "filename": "gcc/toplev.c", "status": "modified", "additions": 27, "deletions": 73, "changes": 100, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/987009bf0d31f2aa399cbf58ddf91a90b09848ca/gcc%2Ftoplev.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/987009bf0d31f2aa399cbf58ddf91a90b09848ca/gcc%2Ftoplev.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftoplev.c?ref=987009bf0d31f2aa399cbf58ddf91a90b09848ca", "patch": "@@ -1454,44 +1454,6 @@ fatal_io_error (name)\n   exit (FATAL_EXIT_CODE);\n }\n \n-/* Called to give a better error message for a bad insn rather than\n-   just calling abort().  */\n-\n-void\n-fatal_insn VPROTO((const char *msgid, rtx insn, ...))\n-{\n-#ifndef ANSI_PROTOTYPES\n-  const char *msgid;\n-  rtx insn;\n-#endif\n-  va_list ap;\n-\n-  VA_START (ap, insn);\n-\n-#ifndef ANSI_PROTOTYPES\n-  msgid = va_arg (ap, const char *);\n-  insn = va_arg (ap, rtx);\n-#endif\n-\n-  verror (msgid, ap);\n-  debug_rtx (insn);\n-  exit (FATAL_EXIT_CODE);\n-}\n-\n-/* Called to give a better error message when we don't have an insn to match\n-   what we are looking for or if the insn's constraints aren't satisfied,\n-   rather than just calling abort().  */\n-\n-void\n-fatal_insn_not_found (insn)\n-     rtx insn;\n-{\n-  if (INSN_CODE (insn) < 0)\n-    fatal_insn (\"internal error--unrecognizable insn:\", insn);\n-  else\n-    fatal_insn (\"internal error--insn does not satisfy its constraints:\", insn);\n-}\n-\n /* This is the default decl_printable_name function.  */\n \n static char *\n@@ -1953,6 +1915,33 @@ fatal VPROTO((const char *msgid, ...))\n   va_end (ap);\n }\n \n+void\n+_fatal_insn (msgid, insn, file, line, function)\n+     const char *msgid;\n+     rtx insn;\n+     const char *file;\n+     int line;\n+     const char *function;\n+{\n+  error (msgid);\n+  debug_rtx (insn);\n+  fancy_abort (file, line, function);\n+}\n+\n+void\n+_fatal_insn_not_found (insn, file, line, function)\n+     rtx insn;\n+     const char *file;\n+     int line;\n+     const char *function;\n+{\n+  if (INSN_CODE (insn) < 0)\n+    _fatal_insn (\"Unrecognizable insn:\", insn, file, line, function);\n+  else\n+    _fatal_insn (\"Insn does not satisfy its constraints:\",\n+\t\tinsn, file, line, function);\n+}\n+\n /* Report a warning at line LINE of file FILE.  */\n \n static void\n@@ -2243,41 +2232,6 @@ sorry VPROTO((const char *msgid, ...))\n   va_end (ap);\n }\n \f\n-/* Given a partial pathname as input, return another pathname that shares\n-   no elements with the pathname of __FILE__.  This is used by abort() to\n-   print `Internal compiler error in expr.c' instead of `Internal compiler\n-   error in ../../egcs/gcc/expr.c'.  */\n-const char *\n-trim_filename (name)\n-     const char *name;\n-{\n-  static const char *this_file = __FILE__;\n-  const char *p = name, *q = this_file;\n-\n-  while (*p == *q && *p != 0 && *q != 0) p++, q++;\n-  while (p > name && p[-1] != DIR_SEPARATOR\n-#ifdef DIR_SEPARATOR_2\n-\t && p[-1] != DIR_SEPARATOR_2\n-#endif\n-\t )\n-    p--;\n-\n-  return p;\n-}\n-\n-/* More 'friendly' abort that prints the line and file.\n-   config.h can #define abort fancy_abort if you like that sort of thing.\n-\n-   I don't think this is actually a good idea.\n-   Other sorts of crashes will look a certain way.\n-   It is a good thing if crashes from calling abort look the same way.\n-     -- RMS  */\n-\n-void\n-fancy_abort ()\n-{\n-  fatal (\"internal gcc abort\");\n-}\n \n /* This calls abort and is used to avoid problems when abort if a macro.\n    It is used when we need to pass the address of abort.  */"}, {"sha": "30080980df696b48d83ad4108ce4e166e83a9254", "filename": "gcc/toplev.h", "status": "modified", "additions": 20, "deletions": 8, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/987009bf0d31f2aa399cbf58ddf91a90b09848ca/gcc%2Ftoplev.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/987009bf0d31f2aa399cbf58ddf91a90b09848ca/gcc%2Ftoplev.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftoplev.h?ref=987009bf0d31f2aa399cbf58ddf91a90b09848ca", "patch": "@@ -41,11 +41,27 @@ extern void fatal_io_error\t\tPROTO ((const char *))\n   ATTRIBUTE_NORETURN;\n extern void pfatal_with_name\t\tPROTO ((const char *))\n   ATTRIBUTE_NORETURN;\n-extern void fatal_insn_not_found\tPROTO ((struct rtx_def *))\n+extern void _fatal_insn_not_found\tPROTO ((struct rtx_def *,\n+\t\t\t\t\t\tconst char *, int,\n+\t\t\t\t\t\tconst char *))\n   ATTRIBUTE_NORETURN;\n-extern void fatal_insn\t\t\tPVPROTO ((const char *,\n-\t\t\t\t\t\t  struct rtx_def *, ...))\n-  ATTRIBUTE_PRINTF(1, 3) ATTRIBUTE_NORETURN;\n+extern void _fatal_insn\t\t\tPROTO ((const char *,\n+\t\t\t\t\t\tstruct rtx_def *,\n+\t\t\t\t\t\tconst char *, int,\n+\t\t\t\t\t\tconst char *))\n+  ATTRIBUTE_NORETURN;\n+\n+#if defined __GNUC__ && (__GNUC__ > 2 || __GNUC_MINOR__ > 6)\n+#define fatal_insn(msgid, insn) \\\n+\t_fatal_insn (msgid, insn, __FILE__, __LINE__, __PRETTY_FUNCTION__)\n+#define fatal_insn_not_found(insn) \\\n+\t_fatal_insn_not_found (insn, __FILE__, __LINE__, __PRETTY_FUNCTION__)\n+#else\n+#define fatal_insn(msgid, insn) \\\n+\t_fatal_insn (msgid, insn, __FILE__, __LINE__, 0)\n+#define fatal_insn_not_found(insn) \\\n+\t_fatal_insn_not_found (insn, __FILE__, __LINE__, 0)\n+#endif\n extern void warning\t\t\tPVPROTO ((const char *, ...))\n \t\t\t\t\t\tATTRIBUTE_PRINTF_1;\n extern void error\t\t\tPVPROTO ((const char *, ...))\n@@ -100,8 +116,6 @@ extern int do_float_handler PROTO((void (*) (PTR), PTR));\n extern void output_quoted_string\tPROTO ((FILE *, const char *));\n extern void output_file_directive\tPROTO ((FILE *, const char *));\n #endif\n-\n-extern void fancy_abort\t\t\tPROTO ((void)) ATTRIBUTE_NORETURN;\n extern void do_abort\t\t\tPROTO ((void)) ATTRIBUTE_NORETURN;\n extern void botch\t\t\tPROTO ((const char *))\n   ATTRIBUTE_NORETURN;\n@@ -111,8 +125,6 @@ extern void fnotice\t\t\tPROTO ((FILE *, const char *, ...))\n   ATTRIBUTE_PRINTF_2;\n #endif\n \n-#undef trim_filename\n-extern const char *trim_filename\tPROTO ((const char *));\n extern int wrapup_global_declarations   PROTO ((union tree_node **, int));\n extern void check_global_declarations   PROTO ((union tree_node **, int));\n extern int errorcount;"}, {"sha": "aca04f6520ab8c4e28067d404b581114916f4acf", "filename": "gcc/tree.c", "status": "modified", "additions": 7, "deletions": 82, "changes": 89, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/987009bf0d31f2aa399cbf58ddf91a90b09848ca/gcc%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/987009bf0d31f2aa399cbf58ddf91a90b09848ca/gcc%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.c?ref=987009bf0d31f2aa399cbf58ddf91a90b09848ca", "patch": "@@ -5073,14 +5073,9 @@ get_set_constructor_bytes (init, buffer, wd_size)\n   return non_const_bits;\n }\n \f\n-#ifdef ENABLE_CHECKING\n-\n-#if defined __GNUC__ && (__GNUC__ > 2 || __GNUC_MINOR__ > 6)\n-\n+#if defined ENABLE_CHECKING && (__GNUC__ > 2 || __GNUC_MINOR__ > 6)\n /* Complain that the tree code of NODE does not match the expected CODE.\n-   FILE, LINE, and FUNCTION are of the caller.\n-\n-   FIXME: should print the blather about reporting the bug. */\n+   FILE, LINE, and FUNCTION are of the caller.  */\n void\n tree_check_failed (node, code, file, line, function)\n      const tree node;\n@@ -5089,10 +5084,9 @@ tree_check_failed (node, code, file, line, function)\n      int line;\n      const char *function;\n {\n-  fatal (\"Internal compiler error in `%s', at %s:%d:\\n\\\n-\\texpected %s, have %s\\n\",\n-\t function, trim_filename (file), line,\n+  error (\"Tree check: expected %s, have %s\",\n \t tree_code_name[code], tree_code_name[TREE_CODE (node)]);\n+  fancy_abort (file, line, function);\n }\n \n /* Similar to above, except that we check for a class of tree\n@@ -5105,81 +5099,12 @@ tree_class_check_failed (node, cl, file, line, function)\n      int line;\n      const char *function;\n {\n-  fatal (\"Internal compiler error in `%s', at %s:%d:\\n\\\n-\\texpected '%c', have '%c' (%s)\\n\",\n-\t function, trim_filename (file), line, cl,\n-\t TREE_CODE_CLASS (TREE_CODE (node)),\n+  error (\"Tree check: expected class '%c', have '%c' (%s)\",\n+\t cl, TREE_CODE_CLASS (TREE_CODE (node)),\n \t tree_code_name[TREE_CODE (node)]);\n+  fancy_abort (file, line, function);\n }\n \n-#else /* not gcc or old gcc */\n-\n-/* These functions are just like the above, but they have to\n-   do the check as well as report the error.  */\n-tree\n-tree_check (node, code, file, line)\n-     const tree node;\n-     enum tree_code code;\n-     const char *file;\n-     int line;\n-{\t\n-  if (TREE_CODE (node) == code)\n-    return node;\n-\n-  fatal (\"Internal compiler error at %s:%d:\\n\\texpected %s, have %s\\n\",\n-\t file, trim_filename (file), tree_code_name[code], tree_code_name[TREE_CODE(node)]);\n-}\n-\n-tree\n-tree_class_check (node, class, file, line)\n-     const tree node;\n-     char class;\n-     const char *file;\n-     int line;\n-{\t\n-  if (TREE_CODE_CLASS (TREE_CODE (node)) == class)\n-    return node;\n-\n-  fatal (\"Internal compiler error at %s:%d:\\n\\\n-\\texpected '%c', have '%c' (%s)\\n\",\n-\t file, trim_filename (file), class, TREE_CODE_CLASS (TREE_CODE (node)),\n-\t tree_code_name[TREE_CODE(node)]);\n-}\n-\n-tree\n-cst_or_constructor_check (node, file, line)\n-     const tree node;\n-     const char *file;\n-     int line;\n-{\n-  enum tree_code code = TREE_CODE (node);\n-  \n-  if (code == CONSTRUCTOR || TREE_CODE_CLASS (code) == 'c')\n-    return node;\n-\n-  fatal (\"Internal compiler error at %s:%d:\\n\\\n-\\texpected constructor, have %s\\n\",\n-\t file, line, tree_code_name[code]);\n-}\n-\n-tree\n-expr_check (node, file, line)\n-     const tree node;\n-     const char *file;\n-     int line;\n-{\n-  char c = TREE_CODE_CLASS (TREE_CODE (node));\n-\n-  if (c == 'r' || c == 's' || c == '<'\n-      || c == '1' || c == '2' || c == 'e')\n-    return node;\n-\n-  fatal (\"Internal compiler error at %s:%d:\\n\\\n-\\texpected 'e', have '%c' (%s)\\n\",\n-\t file, trim_filename (file), c, tree_code_name[TREE_CODE (node)]);\n-}\n-\n-#endif /* not gcc or old gcc */\n #endif /* ENABLE_CHECKING */\n \n /* Return the alias set for T, which may be either a type or an"}, {"sha": "c21ecec32d6ec627e0a4f0e514f44cbaf7a8f6d9", "filename": "gcc/tree.h", "status": "modified", "additions": 17, "deletions": 26, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/987009bf0d31f2aa399cbf58ddf91a90b09848ca/gcc%2Ftree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/987009bf0d31f2aa399cbf58ddf91a90b09848ca/gcc%2Ftree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.h?ref=987009bf0d31f2aa399cbf58ddf91a90b09848ca", "patch": "@@ -312,14 +312,8 @@ struct tree_common\n \n /* When checking is enabled, errors will be generated if a tree node\n    is accessed incorrectly. The macros abort with a fatal error.  */\n+#if defined ENABLE_CHECKING && (__GNUC__ > 2 || __GNUC_MINOR__ > 6)\n \n-#ifdef ENABLE_CHECKING\n-\n-#if defined __GNUC__ && (__GNUC__ > 2 || __GNUC_MINOR__ > 6)\n-/* This optimization can only be done in stage2/3, because it\n-   uses statement expressions.  You might think that you could use\n-   conditional (?:) expressions, but you would be wrong: these macros\n-   need to evaluate `t' only once.  */\n #define TREE_CHECK(t, code)\t\t\t\t\t\t\\\n ({  const tree __t = t;\t\t\t\t\t\t\t\\\n     if (TREE_CODE(__t) != (code))\t\t\t\t\t\\\n@@ -357,25 +351,7 @@ extern void tree_class_check_failed PROTO((const tree, char,\n \t\t\t\t\t   const char *, int, const char *))\n     ATTRIBUTE_NORETURN;\n \n-#else /* not gcc or old gcc */\n-\n-#define TREE_CHECK(t, code) \\\n-\ttree_check (t, code, __FILE__, __LINE__)\n-#define TREE_CLASS_CHECK(t, code) \\\n-\ttree_class_check (t, code, __FILE__, __LINE__)\n-#define CST_OR_CONSTRUCTOR_CHECK(t) \\\n-\tcst_or_constructor_check (t, __FILE__, __LINE__)\n-#define EXPR_CHECK(t) \\\n-\texpr_check (t, __FILE__, __LINE__)\n-\n-extern tree tree_check PROTO((const tree, enum tree_code, const char *, int));\n-extern tree tree_class_check PROTO((const tree, char, const char *, int));\n-extern tree cst_or_constructor_check PROTO((const tree, const char *, int));\n-extern tree expr_check PROTO((const tree, enum tree_code, const char *, int));\n-\n-#endif /* not gcc or old gcc */\n-\n-#else /* not ENABLE_CHECKING */\n+#else /* not ENABLE_CHECKING, or not gcc */\n \n #define TREE_CHECK(t, code)\t\t(t)\n #define TREE_CLASS_CHECK(t, code)\t(t)\n@@ -2425,3 +2401,18 @@ extern void dwarf2out_begin_prologue\tPROTO((void));\n    code for a function definition.  */\n \n extern void dwarf2out_end_epilogue\tPROTO((void));\n+\n+/* Redefine abort to report an internal error w/o coredump, and\n+   reporting the location of the error in the source file.  This logic\n+   is duplicated in rtl.h and tree.h because every file that needs the\n+   special abort includes one or both.  toplev.h gets too few files,\n+   system.h gets too many.  */\n+\n+#if __GNUC__ < 2 || (__GNUC__ == 2 && __GNUC_MINOR__ < 7)\n+extern void fancy_abort PROTO((const char *, int)) ATTRIBUTE_NORETURN;\n+#define abort() fancy_abort (__FILE__, __LINE__)\n+#else\n+extern void fancy_abort PROTO((const char *, int, const char *))\n+    ATTRIBUTE_NORETURN;\n+#define abort() fancy_abort (__FILE__, __LINE__, __PRETTY_FUNCTION__)\n+#endif"}, {"sha": "8d65b181ec878abcf8a357adf7b02fc502807354", "filename": "gcc/varray.c", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/987009bf0d31f2aa399cbf58ddf91a90b09848ca/gcc%2Fvarray.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/987009bf0d31f2aa399cbf58ddf91a90b09848ca/gcc%2Fvarray.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvarray.c?ref=987009bf0d31f2aa399cbf58ddf91a90b09848ca", "patch": "@@ -68,3 +68,24 @@ varray_grow (va, n)\n \n   return va;\n }\n+\n+/* Check the bounds of a varray access.  */\n+\n+#if defined ENABLE_CHECKING && (__GNUC__ > 2 || __GNUC_MINOR__ > 6)\n+\n+extern void error PVPROTO ((const char *, ...))\tATTRIBUTE_PRINTF_1;\n+\n+void\n+varray_check_failed (va, n, file, line, function)\n+     varray_type va;\n+     size_t n;\n+     const char *file;\n+     int line;\n+     const char *function;\n+{\n+  error(\"Virtual array %s[%lu]: element %lu out of bounds\",\n+\tva->name, (unsigned long) va->num_elements, (unsigned long) n);\n+  fancy_abort (file, line, function);\n+}\n+\n+#endif"}, {"sha": "5d773a39ed1f53e28ea92a8516d98ded30d0e992", "filename": "gcc/varray.h", "status": "modified", "additions": 33, "deletions": 30, "changes": 63, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/987009bf0d31f2aa399cbf58ddf91a90b09848ca/gcc%2Fvarray.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/987009bf0d31f2aa399cbf58ddf91a90b09848ca/gcc%2Fvarray.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvarray.h?ref=987009bf0d31f2aa399cbf58ddf91a90b09848ca", "patch": "@@ -162,38 +162,41 @@ extern varray_type varray_grow\tPROTO((varray_type, size_t));\n \n #define VARRAY_SIZE(VA)\t((VA)->num_elements)\n \n-/* Check for VARRAY_xxx macros being in bound, return N for use as an\n-   index.  */\n-#ifdef ENABLE_CHECKING\n-#define VARRAY_CHECK(VA, N)\t\t\t\t\t\t\\\n-((((size_t)(N) < (VA)->num_elements)\t\t\t\t\t\\\n-  ? 0\t\t\t\t\t\t\t\t\t\\\n-  : (fatal (\"Virtual array %s element %ld out of bounds, at %s:%d\",\t\\\n-\t    (VA)->name, (long)(N), __FILE__, __LINE__), 0)),\t\t\\\n- (N))\n+/* Check for VARRAY_xxx macros being in bound.  */\n+#if defined ENABLE_CHECKING && (__GNUC__ > 2 || __GNUC_MINOR__ > 6)\n+extern void varray_check_failed PROTO ((varray_type, size_t,\n+\t\t\t\t\tconst char *, int,\n+\t\t\t\t\tconst char *)) ATTRIBUTE_NORETURN;\n+#define VARRAY_CHECK(VA, N, T)\t\t\t\t\t\\\n+(*({ varray_type _va = VA;\t\t\t\t\t\\\n+     size_t _n = N; \t\t\t\t\t\t\\\n+     if (_n >= _va->num_elements)\t\t\t\t\\\n+       varray_check_failed (_va, _n, __FILE__, __LINE__,\t\\\n+\t\t\t    __PRETTY_FUNCTION__);\t\t\\\n+     &_va->data.T[_n]; }))\n #else\n-#define VARRAY_CHECK(VA, N) (N)\n+#define VARRAY_CHECK(VA, N, T) ((VA)->data.T[N])\n #endif\n \n-#define VARRAY_CHAR(VA, N)\t((VA)->data.c[ VARRAY_CHECK (VA, N) ])\n-#define VARRAY_UCHAR(VA, N)\t((VA)->data.uc[ VARRAY_CHECK (VA, N) ])\n-#define VARRAY_SHORT(VA, N)\t((VA)->data.s[ VARRAY_CHECK (VA, N) ])\n-#define VARRAY_USHORT(VA, N)\t((VA)->data.us[ VARRAY_CHECK (VA, N) ])\n-#define VARRAY_INT(VA, N)\t((VA)->data.i[ VARRAY_CHECK (VA, N) ])\n-#define VARRAY_UINT(VA, N)\t((VA)->data.u[ VARRAY_CHECK (VA, N) ])\n-#define VARRAY_LONG(VA, N)\t((VA)->data.l[ VARRAY_CHECK (VA, N) ])\n-#define VARRAY_ULONG(VA, N)\t((VA)->data.ul[ VARRAY_CHECK (VA, N) ])\n-#define VARRAY_WIDE_INT(VA, N)\t((VA)->data.hint[ VARRAY_CHECK (VA, N) ])\n-#define VARRAY_UWIDE_INT(VA, N)\t((VA)->data.uhint[ VARRAY_CHECK (VA, N) ])\n-#define VARRAY_GENERIC_PTR(VA,N) ((VA)->data.generic[ VARRAY_CHECK (VA, N) ])\n-#define VARRAY_CHAR_PTR(VA,N)\t((VA)->data.cptr[ VARRAY_CHECK (VA, N) ])\n-#define VARRAY_RTX(VA, N)\t((VA)->data.rtx[ VARRAY_CHECK (VA, N) ])\n-#define VARRAY_RTVEC(VA, N)\t((VA)->data.rtvec[ VARRAY_CHECK (VA, N) ])\n-#define VARRAY_TREE(VA, N)\t((VA)->data.tree[ VARRAY_CHECK (VA, N) ])\n-#define VARRAY_BITMAP(VA, N)\t((VA)->data.bitmap[ VARRAY_CHECK (VA, N) ])\n-#define VARRAY_SCHED(VA, N)\t((VA)->data.sched[ VARRAY_CHECK (VA, N) ])\n-#define VARRAY_REG(VA, N)\t((VA)->data.reg[ VARRAY_CHECK (VA, N) ])\n-#define VARRAY_CONST_EQUIV(VA, N) ((VA)->data.const_equiv[VARRAY_CHECK (VA, N)])\n-#define VARRAY_BB(VA, N)\t((VA)->data.bb[ VARRAY_CHECK (VA, N) ])\n+#define VARRAY_CHAR(VA, N)\t\tVARRAY_CHECK (VA, N, c)\n+#define VARRAY_UCHAR(VA, N)\t\tVARRAY_CHECK (VA, N, uc)\n+#define VARRAY_SHORT(VA, N)\t\tVARRAY_CHECK (VA, N, s)\n+#define VARRAY_USHORT(VA, N)\t\tVARRAY_CHECK (VA, N, us)\n+#define VARRAY_INT(VA, N)\t\tVARRAY_CHECK (VA, N, i)\n+#define VARRAY_UINT(VA, N)\t\tVARRAY_CHECK (VA, N, u)\n+#define VARRAY_LONG(VA, N)\t\tVARRAY_CHECK (VA, N, l)\n+#define VARRAY_ULONG(VA, N)\t\tVARRAY_CHECK (VA, N, ul)\n+#define VARRAY_WIDE_INT(VA, N)\t\tVARRAY_CHECK (VA, N, hint)\n+#define VARRAY_UWIDE_INT(VA, N)\t\tVARRAY_CHECK (VA, N, uhint)\n+#define VARRAY_GENERIC_PTR(VA,N)\tVARRAY_CHECK (VA, N, generic)\n+#define VARRAY_CHAR_PTR(VA,N)\t\tVARRAY_CHECK (VA, N, cptr)\n+#define VARRAY_RTX(VA, N)\t\tVARRAY_CHECK (VA, N, rtx)\n+#define VARRAY_RTVEC(VA, N)\t\tVARRAY_CHECK (VA, N, rtvec)\n+#define VARRAY_TREE(VA, N)\t\tVARRAY_CHECK (VA, N, tree)\n+#define VARRAY_BITMAP(VA, N)\t\tVARRAY_CHECK (VA, N, bitmap)\n+#define VARRAY_SCHED(VA, N)\t\tVARRAY_CHECK (VA, N, sched)\n+#define VARRAY_REG(VA, N)\t\tVARRAY_CHECK (VA, N, reg)\n+#define VARRAY_CONST_EQUIV(VA, N)\tVARRAY_CHECK (VA, N, const_equiv)\n+#define VARRAY_BB(VA, N)\t\tVARRAY_CHECK (VA, N, bb)\n \n #endif /* _VARRAY_H_ */"}]}