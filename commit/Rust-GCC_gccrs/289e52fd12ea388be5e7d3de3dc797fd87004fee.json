{"sha": "289e52fd12ea388be5e7d3de3dc797fd87004fee", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Mjg5ZTUyZmQxMmVhMzg4YmU1ZTdkM2RlM2RjNzk3ZmQ4NzAwNGZlZQ==", "commit": {"author": {"name": "Steven G. Kargl", "email": "kargl@gcc.gnu.org", "date": "2010-06-09T16:24:59Z"}, "committer": {"name": "Steven G. Kargl", "email": "kargl@gcc.gnu.org", "date": "2010-06-09T16:24:59Z"}, "message": "mvbits_9.f90: New test.\n\n2010-06-09  Steven G. Kargl  <kargl@gcc.gnu.org>\n\n\t* testsuite/gfortran.dg/mvbits_9.f90: New test.\n\t* testsuite/gfortran.dg/ibset_1.f90: Ditto.\n\t* testsuite/gfortran.dg/ibits_1.f90: Ditto.\n\t* testsuite/gfortran.dg/btest_1.f90: Ditto.\n\t* testsuite/gfortran.dg/ibclr_1.f90: Ditto.\n\n2010-06-09  Steven G. Kargl  <kargl@gcc.gnu.org>\n\n\t* fortran/intrinsic.c (add_functions): Change gfc_check_btest,\n\tgfc_check_ibclr, and gfc_check_ibset to gfc_check_bitfcn.\n\t* fortran/intrinsic.h: Remove prototypes for gfc_check_btest,\n\tgfc_check_ibclr, and gfc_check_ibset.  Add prototype for\n\tgfc_check_bitfcn.\n\t* fortran/check.c (nonnegative_check, less_than_bitsize1, \n\tless_than_bitsize2): New functions.\n\t(gfc_check_btest): Renamed to gfc_check_bitfcn.  Use\n\tnonnegative_check and less_than_bitsize1.\n\t(gfc_check_ibclr, gfc_check_ibset): Removed.\n\t(gfc_check_ibits,gfc_check_mvbits): Use nonnegative_check and\n\tless_than_bitsize1.\n\nFrom-SVN: r160492", "tree": {"sha": "5c6c8b19d1e565d935c4dd24dde0c6fa40e4edc6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5c6c8b19d1e565d935c4dd24dde0c6fa40e4edc6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/289e52fd12ea388be5e7d3de3dc797fd87004fee", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/289e52fd12ea388be5e7d3de3dc797fd87004fee", "html_url": "https://github.com/Rust-GCC/gccrs/commit/289e52fd12ea388be5e7d3de3dc797fd87004fee", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/289e52fd12ea388be5e7d3de3dc797fd87004fee/comments", "author": null, "committer": null, "parents": [{"sha": "7773063f5ba0304cc67df187fa841c5e687cec6b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7773063f5ba0304cc67df187fa841c5e687cec6b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7773063f5ba0304cc67df187fa841c5e687cec6b"}], "stats": {"total": 210, "additions": 182, "deletions": 28}, "files": [{"sha": "0a9361e7f4fd8ddd029f4cb1f84b4792b165e112", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/289e52fd12ea388be5e7d3de3dc797fd87004fee/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/289e52fd12ea388be5e7d3de3dc797fd87004fee/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=289e52fd12ea388be5e7d3de3dc797fd87004fee", "patch": "@@ -1,3 +1,18 @@\n+2010-06-09  Steven G. Kargl  <kargl@gcc.gnu.org>\n+\n+\t* fortran/intrinsic.c (add_functions): Change gfc_check_btest,\n+\tgfc_check_ibclr, and gfc_check_ibset to gfc_check_bitfcn.\n+\t* fortran/intrinsic.h: Remove prototypes for gfc_check_btest,\n+\tgfc_check_ibclr, and gfc_check_ibset.  Add prototype for\n+\tgfc_check_bitfcn.\n+\t* fortran/check.c (nonnegative_check, less_than_bitsize1, \n+\tless_than_bitsize2): New functions.\n+\t(gfc_check_btest): Renamed to gfc_check_bitfcn.  Use\n+\tnonnegative_check and less_than_bitsize1.\n+\t(gfc_check_ibclr, gfc_check_ibset): Removed.\n+\t(gfc_check_ibits,gfc_check_mvbits): Use nonnegative_check and\n+\tless_than_bitsize1.\n+\n 2010-06-09  Janus Weil  <janus@gcc.gnu.org>\n \n \tPR fortran/44211"}, {"sha": "6a5c263ed50283ca1df7df053c2c7559838dfcf5", "filename": "gcc/fortran/check.c", "status": "modified", "additions": 102, "deletions": 22, "changes": 124, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/289e52fd12ea388be5e7d3de3dc797fd87004fee/gcc%2Ffortran%2Fcheck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/289e52fd12ea388be5e7d3de3dc797fd87004fee/gcc%2Ffortran%2Fcheck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fcheck.c?ref=289e52fd12ea388be5e7d3de3dc797fd87004fee", "patch": "@@ -241,6 +241,80 @@ array_check (gfc_expr *e, int n)\n }\n \n \n+/* If expr is a constant, then check to ensure that it is greater than\n+   of equal to zero.  */\n+\n+static gfc_try\n+nonnegative_check (const char *arg, gfc_expr *expr)\n+{\n+  int i;\n+\n+  if (expr->expr_type == EXPR_CONSTANT)\n+    {\n+      gfc_extract_int (expr, &i);\n+      if (i < 0)\n+\t{\n+\t  gfc_error (\"'%s' at %L must be nonnegative\", arg, &expr->where);\n+\t  return FAILURE;\n+\t}\n+    }\n+\n+  return SUCCESS;\n+}\n+\n+\n+/* If expr2 is constant, then check that the value is less than\n+   bit_size(expr1).  */\n+\n+static gfc_try\n+less_than_bitsize1 (const char *arg1, gfc_expr *expr1, const char *arg2,\n+\t       gfc_expr *expr2)\n+{\n+  int i2, i3;\n+\n+  if (expr2->expr_type == EXPR_CONSTANT)\n+    {\n+      gfc_extract_int (expr2, &i2);\n+      i3 = gfc_validate_kind (BT_INTEGER, expr1->ts.kind, false);\n+      if (i2 >= gfc_integer_kinds[i3].bit_size)\n+\t{\n+\t  gfc_error (\"'%s' at %L must be less than BIT_SIZE('%s')\",\n+\t\t     arg2, &expr2->where, arg1);\n+\t  return FAILURE;\n+\t}\n+    }\n+\n+  return SUCCESS;\n+}\n+\n+\n+/* If expr2 and expr3 are constants, then check that the value is less than\n+   or equal to bit_size(expr1).  */\n+\n+static gfc_try\n+less_than_bitsize2 (const char *arg1, gfc_expr *expr1, const char *arg2,\n+\t       gfc_expr *expr2, const char *arg3, gfc_expr *expr3)\n+{\n+  int i2, i3;\n+\n+  if (expr2->expr_type == EXPR_CONSTANT && expr3->expr_type == EXPR_CONSTANT)\n+    {\n+      gfc_extract_int (expr2, &i2);\n+      gfc_extract_int (expr3, &i3);\n+      i2 += i3;\n+      i3 = gfc_validate_kind (BT_INTEGER, expr1->ts.kind, false);\n+      if (i2 > gfc_integer_kinds[i3].bit_size)\n+\t{\n+\t  gfc_error (\"'%s + %s' at %L must be less than or equal \"\n+\t\t     \"to BIT_SIZE('%s')\",\n+\t\t     arg2, arg3, &expr2->where, arg1);\n+\t  return FAILURE;\n+\t}\n+    }\n+\n+  return SUCCESS;\n+}\n+\n /* Make sure two expressions have the same type.  */\n \n static gfc_try\n@@ -766,13 +840,20 @@ gfc_check_besn (gfc_expr *n, gfc_expr *x)\n \n \n gfc_try\n-gfc_check_btest (gfc_expr *i, gfc_expr *pos)\n+gfc_check_bitfcn (gfc_expr *i, gfc_expr *pos)\n {\n   if (type_check (i, 0, BT_INTEGER) == FAILURE)\n     return FAILURE;\n+\n   if (type_check (pos, 1, BT_INTEGER) == FAILURE)\n     return FAILURE;\n \n+  if (nonnegative_check (\"pos\", pos) == FAILURE)\n+    return FAILURE;\n+\n+  if (less_than_bitsize1 (\"i\", i, \"pos\", pos) == FAILURE)\n+    return FAILURE;\n+\n   return SUCCESS;\n }\n \n@@ -1388,19 +1469,6 @@ gfc_check_iand (gfc_expr *i, gfc_expr *j)\n }\n \n \n-gfc_try\n-gfc_check_ibclr (gfc_expr *i, gfc_expr *pos)\n-{\n-  if (type_check (i, 0, BT_INTEGER) == FAILURE)\n-    return FAILURE;\n-\n-  if (type_check (pos, 1, BT_INTEGER) == FAILURE)\n-    return FAILURE;\n-\n-  return SUCCESS;\n-}\n-\n-\n gfc_try\n gfc_check_ibits (gfc_expr *i, gfc_expr *pos, gfc_expr *len)\n {\n@@ -1413,17 +1481,13 @@ gfc_check_ibits (gfc_expr *i, gfc_expr *pos, gfc_expr *len)\n   if (type_check (len, 2, BT_INTEGER) == FAILURE)\n     return FAILURE;\n \n-  return SUCCESS;\n-}\n-\n+  if (nonnegative_check (\"pos\", pos) == FAILURE)\n+    return FAILURE;\n \n-gfc_try\n-gfc_check_ibset (gfc_expr *i, gfc_expr *pos)\n-{\n-  if (type_check (i, 0, BT_INTEGER) == FAILURE)\n+  if (nonnegative_check (\"len\", len) == FAILURE)\n     return FAILURE;\n \n-  if (type_check (pos, 1, BT_INTEGER) == FAILURE)\n+  if (less_than_bitsize2 (\"i\", i, \"pos\", pos, \"len\", len) == FAILURE)\n     return FAILURE;\n \n   return SUCCESS;\n@@ -3646,6 +3710,22 @@ gfc_check_mvbits (gfc_expr *from, gfc_expr *frompos, gfc_expr *len,\n   if (type_check (topos, 4, BT_INTEGER) == FAILURE)\n     return FAILURE;\n \n+  if (nonnegative_check (\"frompos\", frompos) == FAILURE)\n+    return FAILURE;\n+\n+  if (nonnegative_check (\"topos\", topos) == FAILURE)\n+    return FAILURE;\n+\n+  if (nonnegative_check (\"len\", len) == FAILURE)\n+    return FAILURE;\n+\n+  if (less_than_bitsize2 (\"from\", from, \"frompos\", frompos, \"len\", len)\n+      == FAILURE)\n+    return FAILURE;\n+\n+  if (less_than_bitsize2 (\"to\", to, \"topos\", topos, \"len\", len) == FAILURE)\n+    return FAILURE;\n+\n   return SUCCESS;\n }\n "}, {"sha": "2d82f20f957fb330d7cdfb43b8a3d838a61e6259", "filename": "gcc/fortran/intrinsic.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/289e52fd12ea388be5e7d3de3dc797fd87004fee/gcc%2Ffortran%2Fintrinsic.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/289e52fd12ea388be5e7d3de3dc797fd87004fee/gcc%2Ffortran%2Fintrinsic.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fintrinsic.c?ref=289e52fd12ea388be5e7d3de3dc797fd87004fee", "patch": "@@ -1354,7 +1354,7 @@ add_functions (void)\n   make_generic (\"bit_size\", GFC_ISYM_BIT_SIZE, GFC_STD_F95);\n \n   add_sym_2 (\"btest\", GFC_ISYM_BTEST, CLASS_ELEMENTAL, ACTUAL_NO, BT_LOGICAL, dl, GFC_STD_F95,\n-\t     gfc_check_btest, gfc_simplify_btest, gfc_resolve_btest,\n+\t     gfc_check_bitfcn, gfc_simplify_btest, gfc_resolve_btest,\n \t     i, BT_INTEGER, di, REQUIRED, pos, BT_INTEGER, di, REQUIRED);\n \n   make_generic (\"btest\", GFC_ISYM_BTEST, GFC_STD_F95);\n@@ -1738,7 +1738,7 @@ add_functions (void)\n   make_generic (\"iargc\", GFC_ISYM_IARGC, GFC_STD_GNU);\n \n   add_sym_2 (\"ibclr\", GFC_ISYM_IBCLR, CLASS_ELEMENTAL, ACTUAL_NO, BT_INTEGER, di, GFC_STD_F95,\n-\t     gfc_check_ibclr, gfc_simplify_ibclr, gfc_resolve_ibclr,\n+\t     gfc_check_bitfcn, gfc_simplify_ibclr, gfc_resolve_ibclr,\n \t     i, BT_INTEGER, di, REQUIRED, pos, BT_INTEGER, di, REQUIRED);\n \n   make_generic (\"ibclr\", GFC_ISYM_IBCLR, GFC_STD_F95);\n@@ -1751,7 +1751,7 @@ add_functions (void)\n   make_generic (\"ibits\", GFC_ISYM_IBITS, GFC_STD_F95);\n \n   add_sym_2 (\"ibset\", GFC_ISYM_IBSET, CLASS_ELEMENTAL, ACTUAL_NO, BT_INTEGER, di, GFC_STD_F95,\n-\t     gfc_check_ibset, gfc_simplify_ibset, gfc_resolve_ibset,\n+\t     gfc_check_bitfcn, gfc_simplify_ibset, gfc_resolve_ibset,\n \t     i, BT_INTEGER, di, REQUIRED, pos, BT_INTEGER, di, REQUIRED);\n \n   make_generic (\"ibset\", GFC_ISYM_IBSET, GFC_STD_F95);"}, {"sha": "a2cd55a87a9ce73bac4273028ede095731891762", "filename": "gcc/fortran/intrinsic.h", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/289e52fd12ea388be5e7d3de3dc797fd87004fee/gcc%2Ffortran%2Fintrinsic.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/289e52fd12ea388be5e7d3de3dc797fd87004fee/gcc%2Ffortran%2Fintrinsic.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fintrinsic.h?ref=289e52fd12ea388be5e7d3de3dc797fd87004fee", "patch": "@@ -40,7 +40,7 @@ gfc_try gfc_check_associated (gfc_expr *, gfc_expr *);\n gfc_try gfc_check_atan_2 (gfc_expr *, gfc_expr *);\n gfc_try gfc_check_atan2 (gfc_expr *, gfc_expr *);\n gfc_try gfc_check_besn (gfc_expr *, gfc_expr *);\n-gfc_try gfc_check_btest (gfc_expr *, gfc_expr *);\n+gfc_try gfc_check_bitfcn (gfc_expr *, gfc_expr *);\n gfc_try gfc_check_char (gfc_expr *, gfc_expr *);\n gfc_try gfc_check_chdir (gfc_expr *);\n gfc_try gfc_check_chmod (gfc_expr *, gfc_expr *);\n@@ -74,9 +74,7 @@ gfc_try gfc_check_hypot (gfc_expr *, gfc_expr *);\n gfc_try gfc_check_i (gfc_expr *);\n gfc_try gfc_check_iand (gfc_expr *, gfc_expr *);\n gfc_try gfc_check_and (gfc_expr *, gfc_expr *);\n-gfc_try gfc_check_ibclr (gfc_expr *, gfc_expr *);\n gfc_try gfc_check_ibits (gfc_expr *, gfc_expr *, gfc_expr *);\n-gfc_try gfc_check_ibset (gfc_expr *, gfc_expr *);\n gfc_try gfc_check_ichar_iachar (gfc_expr *, gfc_expr *);\n gfc_try gfc_check_idnint (gfc_expr *);\n gfc_try gfc_check_ieor (gfc_expr *, gfc_expr *);"}, {"sha": "f98b2be6e98ecc76514953dedafb0dc45daa24bd", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/289e52fd12ea388be5e7d3de3dc797fd87004fee/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/289e52fd12ea388be5e7d3de3dc797fd87004fee/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=289e52fd12ea388be5e7d3de3dc797fd87004fee", "patch": "@@ -1,3 +1,11 @@\n+2010-06-09  Steven G. Kargl  <kargl@gcc.gnu.org>\n+\n+\t* testsuite/gfortran.dg/mvbits_9.f90: New test.\n+\t* testsuite/gfortran.dg/ibset_1.f90: Ditto.\n+\t* testsuite/gfortran.dg/ibits_1.f90: Ditto.\n+\t* testsuite/gfortran.dg/btest_1.f90: Ditto.\n+\t* testsuite/gfortran.dg/ibclr_1.f90: Ditto.\n+\n 2010-06-09  Jason Merrill  <jason@redhat.com>\n \n \tPR c++/44366"}, {"sha": "8a72c314cd59f868d945f261fca85841e84f7fec", "filename": "gcc/testsuite/gfortran.dg/btest_1.f90", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/289e52fd12ea388be5e7d3de3dc797fd87004fee/gcc%2Ftestsuite%2Fgfortran.dg%2Fbtest_1.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/289e52fd12ea388be5e7d3de3dc797fd87004fee/gcc%2Ftestsuite%2Fgfortran.dg%2Fbtest_1.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fbtest_1.f90?ref=289e52fd12ea388be5e7d3de3dc797fd87004fee", "patch": "@@ -0,0 +1,7 @@\n+! { dg-do compile }\n+program a\n+   integer :: i = 42\n+   logical l\n+   l = btest(i, -1)  ! { dg-error \"must be nonnegative\" }\n+   l = btest(i, 65)  ! { dg-error \"must be less than\" }\n+end program a"}, {"sha": "3932789ec4f4f4319ddd5bf8f44c6ccbe892b772", "filename": "gcc/testsuite/gfortran.dg/ibclr_1.f90", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/289e52fd12ea388be5e7d3de3dc797fd87004fee/gcc%2Ftestsuite%2Fgfortran.dg%2Fibclr_1.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/289e52fd12ea388be5e7d3de3dc797fd87004fee/gcc%2Ftestsuite%2Fgfortran.dg%2Fibclr_1.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fibclr_1.f90?ref=289e52fd12ea388be5e7d3de3dc797fd87004fee", "patch": "@@ -0,0 +1,7 @@\n+! { dg-do compile }\n+program a\n+   integer :: i = 42\n+   integer l\n+   l = ibclr(i, -1)  ! { dg-error \"must be nonnegative\" }\n+   l = ibclr(i, 65)  ! { dg-error \"must be less than\" }\n+end program a"}, {"sha": "2bcbe829b863f70233d22d95f92767ecf0ea20cb", "filename": "gcc/testsuite/gfortran.dg/ibits_1.f90", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/289e52fd12ea388be5e7d3de3dc797fd87004fee/gcc%2Ftestsuite%2Fgfortran.dg%2Fibits_1.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/289e52fd12ea388be5e7d3de3dc797fd87004fee/gcc%2Ftestsuite%2Fgfortran.dg%2Fibits_1.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fibits_1.f90?ref=289e52fd12ea388be5e7d3de3dc797fd87004fee", "patch": "@@ -0,0 +1,13 @@\n+! { dg-do compile }\n+!\n+! PR fortran/44346\n+! Original test sumbitted by Vittorio Zecca, zeccav at gmail dot com.\n+! Modified by Steven G. Kargl for dejagnu testsuite.\n+!\n+program a\n+   integer :: j, i = 42\n+   j = ibits(i, -1, 1)    ! { dg-error \"must be nonnegative\" }\n+   j = ibits(i, 1, -1)    ! { dg-error \"must be nonnegative\" }\n+   j = ibits(i, 100, 100) ! { dg-error \"must be less than\" }\n+end program a\n+"}, {"sha": "2ff261dbd2b0c9c1bb50ba86d2deb89c54975252", "filename": "gcc/testsuite/gfortran.dg/ibset_1.f90", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/289e52fd12ea388be5e7d3de3dc797fd87004fee/gcc%2Ftestsuite%2Fgfortran.dg%2Fibset_1.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/289e52fd12ea388be5e7d3de3dc797fd87004fee/gcc%2Ftestsuite%2Fgfortran.dg%2Fibset_1.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fibset_1.f90?ref=289e52fd12ea388be5e7d3de3dc797fd87004fee", "patch": "@@ -0,0 +1,7 @@\n+! { dg-do compile }\n+program a\n+   integer :: i = 42\n+   integer l\n+   l = ibset(i, -1)  ! { dg-error \"must be nonnegative\" }\n+   l = ibset(i, 65)  ! { dg-error \"must be less than\" }\n+end program a"}, {"sha": "952286b09a6b800bebf649ccd0629a244edcf2b5", "filename": "gcc/testsuite/gfortran.dg/mvbits_9.f90", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/289e52fd12ea388be5e7d3de3dc797fd87004fee/gcc%2Ftestsuite%2Fgfortran.dg%2Fmvbits_9.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/289e52fd12ea388be5e7d3de3dc797fd87004fee/gcc%2Ftestsuite%2Fgfortran.dg%2Fmvbits_9.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fmvbits_9.f90?ref=289e52fd12ea388be5e7d3de3dc797fd87004fee", "patch": "@@ -0,0 +1,19 @@\n+! { dg-do compile }\n+!\n+! PR fortran/44346\n+! Original test sumbitted by Vittorio Zecca, zeccav at gmail dot com.\n+! Modified by Steven G. Kargl for dejagnu testsuite.\n+!\n+program a\n+   integer :: n = 42\n+   ! 64 + 3 > bitsize(n) \n+   call mvbits(n, 64, 3, n, 1)   ! { dg-error \"must be less than\" }\n+   ! 64 + 2 > bitsize(n)        \n+   call mvbits(n, 30, 2, n, 64)  ! { dg-error \"must be less than\" }\n+   ! LEN negative\n+   call mvbits(n, 30, -2, n, 30) ! { dg-error \"must be nonnegative\" }\n+   ! TOPOS negative\n+   call mvbits(n, 30, 2, n, -3)  ! { dg-error \"must be nonnegative\" }\n+   ! FROMPOS negative\n+   call mvbits(n, -1, 2, n, 3)   ! { dg-error \"must be nonnegative\" }\n+end program a"}]}