{"sha": "fd90d92c8f8a23e4b10d592e8ea17091b4f5b7e9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmQ5MGQ5MmM4ZjhhMjNlNGIxMGQ1OTJlOGVhMTcwOTFiNGY1YjdlOQ==", "commit": {"author": {"name": "Oleg Endo", "email": "olegendo@gcc.gnu.org", "date": "2012-10-12T23:22:48Z"}, "committer": {"name": "Oleg Endo", "email": "olegendo@gcc.gnu.org", "date": "2012-10-12T23:22:48Z"}, "message": "re PR target/54602 ([SH] Register pop insn not put in rts delay slot)\n\n\tPR target/54602\n\t* config/sh/sh.md: Correct define_delay for return insns.\n\t(*movsi_pop): Delete.\n\n\tPR target/54602\n\t* gcc.target/sh/pr54602-1.c: New.\n\t* gcc.target/sh/pr54602-2.c: New.\n\t* gcc.target/sh/pr54602-3.c: New.\n\t* gcc.target/sh/pr54602-4.c: New.\n\nFrom-SVN: r192417", "tree": {"sha": "9c2db43207ec65e8828422eb46e79eca3d138ddf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9c2db43207ec65e8828422eb46e79eca3d138ddf"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/fd90d92c8f8a23e4b10d592e8ea17091b4f5b7e9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fd90d92c8f8a23e4b10d592e8ea17091b4f5b7e9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fd90d92c8f8a23e4b10d592e8ea17091b4f5b7e9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fd90d92c8f8a23e4b10d592e8ea17091b4f5b7e9/comments", "author": null, "committer": null, "parents": [{"sha": "db292b0ecdf2cf9b65e130a2726447588531bb50", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/db292b0ecdf2cf9b65e130a2726447588531bb50", "html_url": "https://github.com/Rust-GCC/gccrs/commit/db292b0ecdf2cf9b65e130a2726447588531bb50"}], "stats": {"total": 110, "additions": 83, "deletions": 27}, "files": [{"sha": "e967498f7c6db984492f8f17b18326302da9c5ce", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 4, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fd90d92c8f8a23e4b10d592e8ea17091b4f5b7e9/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fd90d92c8f8a23e4b10d592e8ea17091b4f5b7e9/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=fd90d92c8f8a23e4b10d592e8ea17091b4f5b7e9", "patch": "@@ -1,3 +1,9 @@\n+2012-10-12  Oleg Endo  <olegendo@gcc.gnu.org>\n+\n+\tPR target/54602\n+\t* config/sh/sh.md: Correct define_delay for return insns.\n+\t(*movsi_pop): Delete.\n+\n 2012-10-12  Oleg Endo  <olegendo@gcc.gnu.org>\n \n \tPR target/54680\n@@ -21,13 +27,13 @@\n 2012-10-12  Aaron Gray <aaronngray.lists@gmail.com>\n \t    Diego Novillo <dnovillo@google.com>\n \n-        * gengtype-lex.l: Support for C++ single line comments.\n-        Support for classes.\n+\t* gengtype-lex.l: Support for C++ single line comments.\n+\tSupport for classes.\n \t(CXX_KEYWORD): New.  Support C++ keywords inline, public,\n \tprotected, private, template, operator, friend, &, ~.\n \t(TYPEDEF): New.  Support typedef.\n-        * gengtype-parser.c: updated 'token_names[]'\n-        (direct_declarator): Add support for parsing functions\n+\t* gengtype-parser.c: updated 'token_names[]'\n+\t(direct_declarator): Add support for parsing functions\n \tand ctors.\n \n 2012-10-12  Diego Novillo  <dnovillo@google.com>"}, {"sha": "1b6c284e388b60ae904c9e81462a6ff322792868", "filename": "gcc/config/sh/sh.md", "status": "modified", "additions": 8, "deletions": 23, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fd90d92c8f8a23e4b10d592e8ea17091b4f5b7e9/gcc%2Fconfig%2Fsh%2Fsh.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fd90d92c8f8a23e4b10d592e8ea17091b4f5b7e9/gcc%2Fconfig%2Fsh%2Fsh.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fsh.md?ref=fd90d92c8f8a23e4b10d592e8ea17091b4f5b7e9", "patch": "@@ -541,22 +541,22 @@\n   (eq_attr \"needs_delay_slot\" \"yes\")\n   [(eq_attr \"in_delay_slot\" \"yes\") (nil) (nil)])\n \n-;; On the SH and SH2, the rte instruction reads the return pc from the stack,\n-;; and thus we can't put a pop instruction in its delay slot.\n-;; On the SH3 and SH4, the rte instruction does not use the stack, so a pop\n-;; instruction can go in the delay slot.\n ;; Since a normal return (rts) implicitly uses the PR register,\n ;; we can't allow PR register loads in an rts delay slot.\n+;; On the SH1* and SH2*, the rte instruction reads the return pc from the\n+;; stack, and thus we can't put a pop instruction in its delay slot.\n+;; On the SH3* and SH4*, the rte instruction does not use the stack, so a\n+;; pop instruction can go in the delay slot, unless it references a banked\n+;; register (the register bank is switched by rte).\n (define_delay\n   (eq_attr \"type\" \"return\")\n   [(and (eq_attr \"in_delay_slot\" \"yes\")\n \t(ior (and (eq_attr \"interrupt_function\" \"no\")\n \t\t  (eq_attr \"type\" \"!pload,prset\"))\n \t     (and (eq_attr \"interrupt_function\" \"yes\")\n-\t\t  (ior\n-\t\t   (not (match_test \"TARGET_SH3\"))\n-\t\t   (eq_attr \"hit_stack\" \"no\")\n-\t\t   (eq_attr \"banked\" \"no\"))))) (nil) (nil)])\n+\t\t  (ior (match_test \"TARGET_SH3\") (eq_attr \"hit_stack\" \"no\"))\n+\t\t  (eq_attr \"banked\" \"no\"))))\n+   (nil) (nil)])\n \n ;; Since a call implicitly uses the PR register, we can't allow\n ;; a PR register store in a jsr delay slot.\n@@ -6232,21 +6232,6 @@ label:\n   emit_insn (gen_ashlsi3 (operands[5], operands[0], operands[2]));\n })\n \n-;; Define additional pop for SH1 and SH2 so it does not get \n-;; placed in the delay slot.\n-(define_insn \"*movsi_pop\"\n-  [(set (match_operand:SI 0 \"register_operand\" \"=r,x,l\")\n-        (match_operand:SI 1 \"sh_no_delay_pop_operand\" \">,>,>\"))]\n-  \"(TARGET_SH1 || TARGET_SH2E || TARGET_SH2A)\n-   && ! TARGET_SH3\"\n-  \"@\n-\tmov.l\t%1,%0\n-\tlds.l\t%1,%0\n-\tlds.l\t%1,%0\"\n-  [(set_attr \"type\" \"load_si,mem_mac,pload\")\n-   (set_attr \"length\" \"2,2,2\")\n-   (set_attr \"in_delay_slot\" \"no,no,no\")])\n-\n ;; t/r must come after r/r, lest reload will try to reload stuff like\n ;; (set (subreg:SI (mem:QI (plus:SI (reg:SI SP_REG) (const_int 12)) 0) 0)\n ;; (made from (set (subreg:SI (reg:QI ###) 0) ) into T."}, {"sha": "033c8522fa2363f0d0bf7c16420068acc525f933", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fd90d92c8f8a23e4b10d592e8ea17091b4f5b7e9/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fd90d92c8f8a23e4b10d592e8ea17091b4f5b7e9/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=fd90d92c8f8a23e4b10d592e8ea17091b4f5b7e9", "patch": "@@ -1,3 +1,11 @@\n+2012-10-12  Oleg Endo  <olegendo@gcc.gnu.org>\n+\n+\tPR target/54602\n+\t* gcc.target/sh/pr54602-1.c: New.\n+\t* gcc.target/sh/pr54602-2.c: New.\n+\t* gcc.target/sh/pr54602-3.c: New.\n+\t* gcc.target/sh/pr54602-4.c: New.\n+\n 2012-10-12  Oleg Endo  <olegendo@gcc.gnu.org>\n \n \tPR target/54680"}, {"sha": "e5c035708e482e99e5e5637020a9dd1f999758da", "filename": "gcc/testsuite/gcc.target/sh/pr54602-1.c", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fd90d92c8f8a23e4b10d592e8ea17091b4f5b7e9/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fpr54602-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fd90d92c8f8a23e4b10d592e8ea17091b4f5b7e9/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fpr54602-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fpr54602-1.c?ref=fd90d92c8f8a23e4b10d592e8ea17091b4f5b7e9", "patch": "@@ -0,0 +1,15 @@\n+/* Verify that the delay slot is stuffed with register pop insns for normal\n+   (i.e. not interrupt handler) function returns.  If everything goes as\n+   expected we won't see any nop insns.  */\n+/* { dg-do compile { target \"sh*-*-*\" } } */\n+/* { dg-options \"-O1\" } */\n+/* { dg-skip-if \"\" { \"sh*-*-*\" } { \"-m5*\"} { \"\" } }  */\n+/* { dg-final { scan-assembler-not \"nop\" } } */\n+\n+int test00 (int a, int b);\n+\n+int\n+test01 (int a, int b, int c, int d)\n+{\n+  return test00 (a, b) + c;\n+}"}, {"sha": "4f3877c41b119ca0df6b9932e4fbb652b9201829", "filename": "gcc/testsuite/gcc.target/sh/pr54602-2.c", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fd90d92c8f8a23e4b10d592e8ea17091b4f5b7e9/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fpr54602-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fd90d92c8f8a23e4b10d592e8ea17091b4f5b7e9/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fpr54602-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fpr54602-2.c?ref=fd90d92c8f8a23e4b10d592e8ea17091b4f5b7e9", "patch": "@@ -0,0 +1,15 @@\n+/* Verify that the delay slot is not stuffed with register pop insns for\n+   interrupt handler function returns on SH1* and SH2* targets, where the\n+   rte insn uses the stack pointer.  */\n+/* { dg-do compile { target \"sh*-*-*\" } } */\n+/* { dg-options \"-O1\" } */\n+/* { dg-skip-if \"\" { \"sh*-*-*\" } { \"*\" } { \"-m1*\" \"-m2*\" } }  */\n+/* { dg-final { scan-assembler-times \"nop\" 1 } } */\n+\n+int test00 (int a, int b);\n+\n+int __attribute__ ((interrupt_handler))\n+test01 (int a, int b, int c, int d)\n+{\n+  return test00 (a, b) + c;\n+}"}, {"sha": "29292589c626ecf3f55a487dac86f3fbfa1a0042", "filename": "gcc/testsuite/gcc.target/sh/pr54602-3.c", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fd90d92c8f8a23e4b10d592e8ea17091b4f5b7e9/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fpr54602-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fd90d92c8f8a23e4b10d592e8ea17091b4f5b7e9/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fpr54602-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fpr54602-3.c?ref=fd90d92c8f8a23e4b10d592e8ea17091b4f5b7e9", "patch": "@@ -0,0 +1,12 @@\n+/* Verify that the rte delay slot is not stuffed with register pop insns\n+   which touch the banked registers r0..r7 on SH3* and SH4* targets.  */\n+/* { dg-do compile { target \"sh*-*-*\" } } */\n+/* { dg-options \"-O1\" } */\n+/* { dg-skip-if \"\" { \"sh*-*-*\" } { \"*\" } { \"-m3*\" \"-m4*\" } }  */\n+/* { dg-final { scan-assembler-times \"nop\" 1 } } */\n+\n+int __attribute__ ((interrupt_handler))\n+test00 (int a, int b, int c, int d)\n+{\n+  return a + b;\n+}"}, {"sha": "0b77d0983ae45eb7c32839621457bb5e71d6727a", "filename": "gcc/testsuite/gcc.target/sh/pr54602-4.c", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fd90d92c8f8a23e4b10d592e8ea17091b4f5b7e9/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fpr54602-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fd90d92c8f8a23e4b10d592e8ea17091b4f5b7e9/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fpr54602-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fpr54602-4.c?ref=fd90d92c8f8a23e4b10d592e8ea17091b4f5b7e9", "patch": "@@ -0,0 +1,15 @@\n+/* Verify that the delay slot is stuffed with register pop insns on SH3* and\n+   SH4* targets, where the stack pointer is not used by the rte insn.  If\n+   everything works out, we won't see a nop insn.  */\n+/* { dg-do compile { target \"sh*-*-*\" } } */\n+/* { dg-options \"-O1\" } */\n+/* { dg-skip-if \"\" { \"sh*-*-*\" } { \"*\" } { \"-m3*\" \"-m4*\" } }  */\n+/* { dg-final { scan-assembler-not \"nop\" } } */\n+\n+int test00 (int a, int b);\n+\n+int __attribute__ ((interrupt_handler))\n+test01 (int a, int b, int c, int d)\n+{\n+  return test00 (a, b) + c;\n+}"}]}