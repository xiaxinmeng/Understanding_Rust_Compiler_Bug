{"sha": "3f529c2cad4db21630f463fdb3dd0d04c2666890", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2Y1MjljMmNhZDRkYjIxNjMwZjQ2M2ZkYjNkZDBkMDRjMjY2Njg5MA==", "commit": {"author": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2010-04-14T06:36:53Z"}, "committer": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2010-04-14T06:36:53Z"}, "message": "i386.md (*ashlqi3_1_slp): New insn pattern.\n\n\t* config/i386/i386.md (*ashlqi3_1_slp): New insn pattern.\n\nFrom-SVN: r158293", "tree": {"sha": "6e14567623b1e704ce3883165d97e492571c084f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6e14567623b1e704ce3883165d97e492571c084f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3f529c2cad4db21630f463fdb3dd0d04c2666890", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3f529c2cad4db21630f463fdb3dd0d04c2666890", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3f529c2cad4db21630f463fdb3dd0d04c2666890", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3f529c2cad4db21630f463fdb3dd0d04c2666890/comments", "author": null, "committer": null, "parents": [{"sha": "64f002ed7020b343935c2b84801dd54a4a64ae3a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/64f002ed7020b343935c2b84801dd54a4a64ae3a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/64f002ed7020b343935c2b84801dd54a4a64ae3a"}], "stats": {"total": 62, "additions": 54, "deletions": 8}, "files": [{"sha": "bf8aa559070c331f8f7c7f4bcdd7778d52835f42", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 8, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3f529c2cad4db21630f463fdb3dd0d04c2666890/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3f529c2cad4db21630f463fdb3dd0d04c2666890/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=3f529c2cad4db21630f463fdb3dd0d04c2666890", "patch": "@@ -1,3 +1,7 @@\n+2010-04-14  Uros Bizjak  <ubizjak@gmail.com>\n+\n+\t* config/i386/i386.md (*ashlqi3_1_slp): New insn pattern.\n+\n 2010-04-13  Jan Hubicka  <jh@suse.cz>\n \n \t* ipa-inline.c (cgraph_mark_inline_edge): Avoid double accounting\n@@ -53,11 +57,9 @@\n \t* Makefile.in (c-pch.o, ggc-common.o): Depend on timevar.h.\n \t* c-pch.c: Include timevar.h.\n \t(c_common_write_pch): Use TV_PCH_SAVE and TV_PCH_CPP_SAVE timers.\n-\t(c_common_read_pch): Use TV_PCH_RESTORE and TV_PCH_CPP_RESTORE\n-\ttimers.\n+\t(c_common_read_pch): Use TV_PCH_RESTORE and TV_PCH_CPP_RESTORE timers.\n \t* ggc-common.c: Include timevar.h.\n-\t(gt_pch_save): Use TV_PCH_PTR_REALLOC and TV_PCH_PTR_SORT\n-\ttimers.\n+\t(gt_pch_save): Use TV_PCH_PTR_REALLOC and TV_PCH_PTR_SORT timers.\n \t* timevar.def (TV_PCH_SAVE): Define.\n \t(TV_PCH_CPP_SAVE): Define.\n \t(TV_PCH_PTR_REALLOC): Define.\n@@ -141,11 +143,11 @@\n \t* except.c (lang_eh_type_covers): Likewise.\n \n 2010-04-13  Andreas Krebbel  <Andreas.Krebbel@de.ibm.com>\n-            Ulrich Weigand  <Ulrich.Weigand@de.ibm.com>\n-\t\n+\t    Ulrich Weigand  <Ulrich.Weigand@de.ibm.com>\n+\n \t* gcc/config/s390/s390.md: Replace TARGET_64BIT with TARGET_ZARCH.\n \t* gcc/config/s390/s390.c: Replace UNTIS_PER_WORD with\n-\tUNITS_PER_LONG where it is ABI relevant.\t\n+\tUNITS_PER_LONG where it is ABI relevant.\n \t(s390_return_addr_rtx): Likewise.\n \t(s390_back_chain_rtx): Likewise.\n \t(s390_frame_area): Likewise.\n@@ -176,7 +178,7 @@\n \t(DWARF_CIE_DATA_ALIGNMENT): New macro.\n \t(s390_expand_setmem): Remove unused variable src_addr.\n \t* gcc/longlong.h: Make smul_ppmm and sdiv_qrnnd inline asms to\n-\tdeal with 64 bit registers.\t\n+\tdeal with 64 bit registers.\n \t* gcc/config/s390/s390.h: Define __zarch__ predefined macro.\n \tReplace UNITS_PER_WORD with UNITS_PER_LONG where it is ABI relevant.\n \t(UNITS_PER_LONG): New macro."}, {"sha": "35fc0d420874f500bd4abbd70142356a9f87e9a0", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3f529c2cad4db21630f463fdb3dd0d04c2666890/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3f529c2cad4db21630f463fdb3dd0d04c2666890/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=3f529c2cad4db21630f463fdb3dd0d04c2666890", "patch": "@@ -9986,6 +9986,50 @@\n        (const_string \"*\")))\n    (set_attr \"mode\" \"QI,SI,SI\")])\n \n+(define_insn \"*ashlqi3_1_slp\"\n+  [(set (strict_low_part (match_operand:QI 0 \"nonimmediate_operand\" \"+qm\"))\n+\t(ashift:QI (match_dup 0)\n+\t\t   (match_operand:QI 1 \"nonmemory_operand\" \"cI\")))\n+   (clobber (reg:CC FLAGS_REG))]\n+  \"(optimize_function_for_size_p (cfun)\n+    || !TARGET_PARTIAL_FLAG_REG_STALL\n+    || (operands[1] == const1_rtx\n+\t&& (TARGET_SHIFT1\n+\t    || (TARGET_DOUBLE_WITH_ADD && REG_P (operands[0])))))\"\n+{\n+  switch (get_attr_type (insn))\n+    {\n+    case TYPE_ALU:\n+      gcc_assert (operands[1] == const1_rtx);\n+      return \"add{b}\\t%0, %0\";\n+\n+    default:\n+      if (operands[1] == const1_rtx\n+\t  && (TARGET_SHIFT1 || optimize_function_for_size_p (cfun)))\n+\treturn \"sal{b}\\t%0\";\n+      else\n+\treturn \"sal{b}\\t{%1, %0|%0, %1}\";\n+    }\n+}\n+  [(set (attr \"type\")\n+     (cond [(and (and (ne (symbol_ref \"TARGET_DOUBLE_WITH_ADD\")\n+\t\t          (const_int 0))\n+\t\t      (match_operand 0 \"register_operand\" \"\"))\n+\t\t (match_operand 1 \"const1_operand\" \"\"))\n+\t      (const_string \"alu\")\n+\t   ]\n+\t   (const_string \"ishift1\")))\n+   (set (attr \"length_immediate\")\n+     (if_then_else\n+       (ior (eq_attr \"type\" \"alu\")\n+\t    (and (eq_attr \"type\" \"ishift1\")\n+\t\t (and (match_operand 1 \"const1_operand\" \"\")\n+\t\t      (ne (symbol_ref \"TARGET_SHIFT1 || optimize_function_for_size_p (cfun)\")\n+\t\t\t  (const_int 0)))))\n+       (const_string \"0\")\n+       (const_string \"*\")))\n+   (set_attr \"mode\" \"QI\")])\n+\n ;; Convert lea to the lea pattern to avoid flags dependency.\n (define_split\n   [(set (match_operand:DI 0 \"register_operand\" \"\")"}]}