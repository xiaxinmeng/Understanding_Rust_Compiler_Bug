{"sha": "657213f7364a091c3347184d3ec8460d81f8022b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjU3MjEzZjczNjRhMDkxYzMzNDcxODRkM2VjODQ2MGQ4MWY4MDIyYg==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2016-08-17T13:38:52Z"}, "committer": {"name": "Jonathan Wakely", "email": "redi@gcc.gnu.org", "date": "2016-08-17T13:38:52Z"}, "message": "PR 77264 constrain new std::basic_string overloads\n\n\tPR libstdc++/77264\n\t* include/bits/basic_string.h (operator=(__sv_type)\n\t(append(__sv_type), assign(__sv_type), insert(size_type, __sv_type))\n\t(replace(size_type, size_type, __sv_type))\n\t(replace(const_iterator, const_iterator, __sv_type))\n\t(find(__sv_type, size_type), rfind(__sv_type, size_type))\n\t(compare(size_type, size_type, __sv_type)): Reformat.\n\t(_If_sv): Define helper for SFINAE constaints.\n\t(append(const _Tp&, size_type, size_type))\n\t(assign(const _Tp&, size_type, size_type))\n\t(insert(size_type, const _Tp&, size_type, size_type))\n\t(replace(size_type, size_type, const _Tp&, size_type, size_type)):\n\tUse _If_sv.\n\t* testsuite/21_strings/basic_string/modifiers/append/char/4.cc: Test\n\tSFINAE constraints.\n\t* testsuite/21_strings/basic_string/modifiers/append/wchar_t/4.cc:\n\tLikewise.\n\t* testsuite/21_strings/basic_string/modifiers/replace/char/7.cc:\n\tLikewise.\n\t* testsuite/21_strings/basic_string/modifiers/replace/wchar_t/7.cc:\n\tLikewise.\n\t* testsuite/21_strings/basic_string/modifiers/assign/char/4.cc:\n\tLikewise.\n\t* testsuite/21_strings/basic_string/modifiers/assign/wchar_t/4.cc:\n\tLikewise.\n\t* testsuite/21_strings/basic_string/modifiers/insert/char/3.cc:\n\tLikewise.\n\t* testsuite/21_strings/basic_string/modifiers/insert/wchar_t/3.cc:\n\tLikewise.\n\t* testsuite/21_strings/basic_string/modifiers/replace/char/7.cc:\n\tLikewise.\n\t* testsuite/21_strings/basic_string/operations/compare/char/2.cc:\n\tLikewise.\n\t* testsuite/21_strings/basic_string/operations/compare/wchar_t/2.cc:\n\tLikewise.\n\nFrom-SVN: r239532", "tree": {"sha": "9d29eb7a41aee67e9a7953f9225b09c8c83787b1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9d29eb7a41aee67e9a7953f9225b09c8c83787b1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/657213f7364a091c3347184d3ec8460d81f8022b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/657213f7364a091c3347184d3ec8460d81f8022b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/657213f7364a091c3347184d3ec8460d81f8022b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/657213f7364a091c3347184d3ec8460d81f8022b/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "11c4c4ba47fce0a6be2125e2bd7ee3d16bc8d8af", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/11c4c4ba47fce0a6be2125e2bd7ee3d16bc8d8af", "html_url": "https://github.com/Rust-GCC/gccrs/commit/11c4c4ba47fce0a6be2125e2bd7ee3d16bc8d8af"}], "stats": {"total": 487, "additions": 412, "deletions": 75}, "files": [{"sha": "bbf2b19665d988235723f6a994746f22423af557", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/657213f7364a091c3347184d3ec8460d81f8022b/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/657213f7364a091c3347184d3ec8460d81f8022b/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=657213f7364a091c3347184d3ec8460d81f8022b", "patch": "@@ -1,3 +1,41 @@\n+2016-08-17  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\tPR libstdc++/77264\n+\t* include/bits/basic_string.h (operator=(__sv_type)\n+\t(append(__sv_type), assign(__sv_type), insert(size_type, __sv_type))\n+\t(replace(size_type, size_type, __sv_type))\n+\t(replace(const_iterator, const_iterator, __sv_type))\n+\t(find(__sv_type, size_type), rfind(__sv_type, size_type))\n+\t(compare(size_type, size_type, __sv_type)): Reformat.\n+\t(_If_sv): Define helper for SFINAE constaints.\n+\t(append(const _Tp&, size_type, size_type))\n+\t(assign(const _Tp&, size_type, size_type))\n+\t(insert(size_type, const _Tp&, size_type, size_type))\n+\t(replace(size_type, size_type, const _Tp&, size_type, size_type)):\n+\tUse _If_sv.\n+\t* testsuite/21_strings/basic_string/modifiers/append/char/4.cc: Test\n+\tSFINAE constraints.\n+\t* testsuite/21_strings/basic_string/modifiers/append/wchar_t/4.cc:\n+\tLikewise.\n+\t* testsuite/21_strings/basic_string/modifiers/replace/char/7.cc:\n+\tLikewise.\n+\t* testsuite/21_strings/basic_string/modifiers/replace/wchar_t/7.cc:\n+\tLikewise.\n+\t* testsuite/21_strings/basic_string/modifiers/assign/char/4.cc:\n+\tLikewise.\n+\t* testsuite/21_strings/basic_string/modifiers/assign/wchar_t/4.cc:\n+\tLikewise.\n+\t* testsuite/21_strings/basic_string/modifiers/insert/char/3.cc:\n+\tLikewise.\n+\t* testsuite/21_strings/basic_string/modifiers/insert/wchar_t/3.cc:\n+\tLikewise.\n+\t* testsuite/21_strings/basic_string/modifiers/replace/char/7.cc:\n+\tLikewise.\n+\t* testsuite/21_strings/basic_string/operations/compare/char/2.cc:\n+\tLikewise.\n+\t* testsuite/21_strings/basic_string/operations/compare/wchar_t/2.cc:\n+\tLikewise.\n+\n 2016-08-16  Jonathan Wakely  <jwakely@redhat.com>\n \n \tPR libstdc++/72847"}, {"sha": "68cfc994de0cf9693e2fbb285e1ce0802559094f", "filename": "libstdc++-v3/include/bits/basic_string.h", "status": "modified", "additions": 69, "deletions": 75, "changes": 144, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/657213f7364a091c3347184d3ec8460d81f8022b/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_string.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/657213f7364a091c3347184d3ec8460d81f8022b/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_string.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_string.h?ref=657213f7364a091c3347184d3ec8460d81f8022b", "patch": "@@ -709,7 +709,8 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n        *  @brief  Set value to string constructed from a string_view.\n        *  @param  __sv  A string_view.\n        */\n-      basic_string& operator=(__sv_type __sv)\n+      basic_string&\n+      operator=(__sv_type __sv)\n       {\treturn this->assign(__sv); }\n \n       /**\n@@ -1217,27 +1218,32 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n        *  @param __sv  The string_view to be appended.\n        *  @return  Reference to this string.\n        */\n-      basic_string& append(__sv_type __sv)\n+      basic_string&\n+      append(__sv_type __sv)\n       { return this->append(__sv.data(), __sv.size()); }\n \n+      template<typename _Tp, typename _Res>\n+\tusing _If_sv = enable_if_t<\n+\t  __and_<is_convertible<const _Tp&, __sv_type>,\n+\t\t __not_<is_convertible<const _Tp&, const _CharT*>>>::value,\n+\t  _Res>;\n+\n       /**\n        *  @brief  Append a range of characters from a string_view.\n        *  @param __sv  The string_view to be appended from.\n        *  @param __pos The position in the string_view to append from.\n        *  @param __n   The number of characters to append from the string_view.\n        *  @return  Reference to this string.\n        */\n-      template <typename _Tp,\n-\t\tenable_if_t<is_convertible_v<const _Tp&, __sv_type>,\n-\t\t\t    bool> = true>\n-      basic_string& append(const _Tp& __svt,\n-\t\t\t   size_type __pos, size_type __n = npos)\n-      {\n-\t__sv_type __sv = __svt;\n-\treturn _M_append(__sv.data()\n-\t\t\t + __sv._M_check(__pos, \"basic_string::append\"),\n-\t\t\t __sv._M_limit(__pos, __n));\n-      }\n+      template <typename _Tp>\n+\t_If_sv<_Tp, basic_string&>\n+\tappend(const _Tp& __svt, size_type __pos, size_type __n = npos)\n+\t{\n+\t  __sv_type __sv = __svt;\n+\t  return _M_append(__sv.data()\n+\t\t\t   + __sv._M_check(__pos, \"basic_string::append\"),\n+\t\t\t   __sv._M_limit(__pos, __n));\n+\t}\n #endif // C++17\n \n       /**\n@@ -1386,7 +1392,8 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n        *  @param __sv  The source string_view.\n        *  @return  Reference to this string.\n        */\n-      basic_string& assign(__sv_type __sv)\n+      basic_string&\n+      assign(__sv_type __sv)\n       {\treturn this->assign(__sv.data(), __sv.size()); }\n \n       /**\n@@ -1396,18 +1403,15 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n        *  @param __n  The number of characters to assign.\n        *  @return  Reference to this string.\n        */\n-      template <typename _Tp,\n-\t\tenable_if_t<is_convertible_v<const _Tp&, __sv_type>,\n-\t\t\t    bool> = true>\n-      basic_string&\n-      assign(const _Tp& __svt,\n-\t     size_type __pos, size_type __n = npos)\n-      {\n-\t__sv_type __sv = __svt;\n-\treturn _M_replace(size_type(0), this->size(), __sv.data()\n-\t\t\t  + __sv._M_check(__pos, \"basic_string::assign\"),\n-\t\t\t  __sv._M_limit(__pos, __n));\n-      }\n+      template <typename _Tp>\n+\t_If_sv<_Tp, basic_string&>\n+\tassign(const _Tp& __svt, size_type __pos, size_type __n = npos)\n+\t{\n+\t  __sv_type __sv = __svt;\n+\t  return _M_replace(size_type(0), this->size(), __sv.data()\n+\t\t\t    + __sv._M_check(__pos, \"basic_string::assign\"),\n+\t\t\t    __sv._M_limit(__pos, __n));\n+\t}\n #endif // C++17\n \n #if __cplusplus >= 201103L\n@@ -1647,8 +1651,8 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n        *  @param __sv   The string_view to insert.\n        *  @return  Reference to this string.\n       */\n-      basic_string& insert(size_type __pos,\n-\t\t\t   __sv_type __sv)\n+      basic_string&\n+      insert(size_type __pos, __sv_type __sv)\n       {\treturn this->insert(__pos, __sv.data(), __sv.size()); }\n \n       /**\n@@ -1660,17 +1664,16 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n        *  @param __n    The number of characters to insert.\n        *  @return  Reference to this string.\n       */\n-      template <typename _Tp,\n-\t\tenable_if_t<is_convertible_v<const _Tp&, __sv_type>,\n-\t\t\t    bool> = true>\n-      basic_string& insert(size_type __pos1, const _Tp& __svt,\n-\t\t\t   size_type __pos2, size_type __n = npos)\n-      {\n-\t__sv_type __sv = __svt;\n-\treturn this->replace(__pos1, size_type(0), __sv.data()\n-\t\t\t     + __sv._M_check(__pos2, \"basic_string::insert\"),\n-\t\t\t     __sv._M_limit(__pos2, __n));\n-      }\n+      template <typename _Tp>\n+\t_If_sv<_Tp, basic_string&>\n+\tinsert(size_type __pos1, const _Tp& __svt,\n+\t       size_type __pos2, size_type __n = npos)\n+\t{\n+\t  __sv_type __sv = __svt;\n+\t  return this->replace(__pos1, size_type(0), __sv.data()\n+\t\t\t       + __sv._M_check(__pos2, \"basic_string::insert\"),\n+\t\t\t       __sv._M_limit(__pos2, __n));\n+\t}\n #endif // C++17\n \n       /**\n@@ -2070,8 +2073,8 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n        *  @param __sv  The string_view to insert.\n        *  @return  Reference to this string.\n       */\n-      basic_string& replace(size_type __pos, size_type __n,\n-\t\t\t    __sv_type __sv)\n+      basic_string&\n+      replace(size_type __pos, size_type __n, __sv_type __sv)\n       {\treturn this->replace(__pos, __n, __sv.data(), __sv.size()); }\n \n       /**\n@@ -2083,18 +2086,16 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n        *  @param __n2    The number of characters to insert.\n        *  @return  Reference to this string.\n       */\n-      template <typename _Tp,\n-\t\tenable_if_t<is_convertible_v<const _Tp&, __sv_type>,\n-\t\t\t    bool> = true>\n-      basic_string& replace(size_type __pos1, size_type __n1,\n-\t\t\t    const _Tp& __svt,\n-\t\t\t    size_type __pos2, size_type __n2 = npos)\n-      {\n-\t__sv_type __sv = __svt;\n-\treturn this->replace(__pos1, __n1, __sv.data()\n-\t\t\t     + __sv._M_check(__pos2, \"basic_string::replace\"),\n-\t\t\t     __sv._M_limit(__pos2, __n2));\n-      }\n+      template <typename _Tp>\n+\t_If_sv<_Tp, basic_string&>\n+\treplace(size_type __pos1, size_type __n1, const _Tp& __svt,\n+\t\tsize_type __pos2, size_type __n2 = npos)\n+\t{\n+\t  __sv_type __sv = __svt;\n+\t  return this->replace(__pos1, __n1, __sv.data()\n+\t\t\t       + __sv._M_check(__pos2, \"basic_string::replace\"),\n+\t\t\t       __sv._M_limit(__pos2, __n2));\n+\t}\n \n       /**\n        *  @brief  Replace range of characters with string_view.\n@@ -2105,8 +2106,8 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n        *  @param __sv    The string_view to insert from.\n        *  @return  Reference to this string.\n       */\n-      basic_string& replace(const_iterator __i1, const_iterator __i2,\n-\t\t\t    __sv_type __sv)\n+      basic_string&\n+      replace(const_iterator __i1, const_iterator __i2, __sv_type __sv)\n       {\treturn this->replace(__i1 - begin(), __i2 - __i1, __sv); }\n #endif // C++17\n \n@@ -2241,8 +2242,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n        *  @return  Index of start of first occurrence.\n       */\n       size_type\n-      find(__sv_type __sv,\n-\t    size_type __pos = 0) const noexcept\n+      find(__sv_type __sv, size_type __pos = 0) const noexcept\n       {\treturn this->find(__sv.data(), __pos, __sv.size()); }\n #endif // C++17\n \n@@ -2299,8 +2299,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n        *  @return  Index of start of last occurrence.\n       */\n       size_type\n-      rfind (__sv_type __sv,\n-\t     size_type __pos = npos) const noexcept\n+      rfind(__sv_type __sv, size_type __pos = npos) const noexcept\n       {\treturn this->rfind(__sv.data(), __pos, __sv.size()); }\n #endif // C++17\n \n@@ -2721,11 +2720,8 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n        *  @return  Integer < 0, 0, or > 0.\n        */\n       int\n-      compare(size_type __pos, size_type __n,\n-\t      __sv_type __sv) const\n-      {\n-\treturn __sv_type(*this).substr(__pos, __n).compare(__sv);\n-      }\n+      compare(size_type __pos, size_type __n, __sv_type __sv) const\n+      { return __sv_type(*this).substr(__pos, __n).compare(__sv); }\n \n       /**\n        *  @brief  Compare to a string_view.\n@@ -2736,17 +2732,15 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n        *  @param __n2  The number of characters to compare.\n        *  @return  Integer < 0, 0, or > 0.\n        */\n-      template <typename _Tp,\n-\t\tenable_if_t<is_convertible_v<const _Tp&, __sv_type>,\n-\t\t\t    bool> = true>\n-      int compare(size_type __pos1, size_type __n1,\n-\t\t  const _Tp& __svt,\n-\t\t  size_type __pos2, size_type __n2 = npos) const\n-      {\n-\t__sv_type __sv = __svt;\n-\treturn __sv_type(*this)\n-\t  .substr(__pos1, __n1).compare(__sv.substr(__pos2, __n2));\n-      }\n+      template <typename _Tp>\n+\t_If_sv<_Tp, int>\n+\tcompare(size_type __pos1, size_type __n1, const _Tp& __svt,\n+\t\tsize_type __pos2, size_type __n2 = npos) const\n+\t{\n+\t  __sv_type __sv = __svt;\n+\t  return __sv_type(*this)\n+\t    .substr(__pos1, __n1).compare(__sv.substr(__pos2, __n2));\n+\t}\n #endif // C++17\n \n       /**"}, {"sha": "0df4a6d0fd5ead418830ffcec16ef8750f8a5e22", "filename": "libstdc++-v3/testsuite/21_strings/basic_string/modifiers/append/char/4.cc", "status": "modified", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/657213f7364a091c3347184d3ec8460d81f8022b/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fmodifiers%2Fappend%2Fchar%2F4.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/657213f7364a091c3347184d3ec8460d81f8022b/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fmodifiers%2Fappend%2Fchar%2F4.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fmodifiers%2Fappend%2Fchar%2F4.cc?ref=657213f7364a091c3347184d3ec8460d81f8022b", "patch": "@@ -38,8 +38,38 @@ test03()\n   VERIFY (str4 == \"oo\");\n }\n \n+// PR libstdc++/77264\n+void\n+test04()\n+{\n+  bool test __attribute__((unused)) = true;\n+\n+  std::string str(\"a\");\n+  char c = 'b';\n+  str.append(&c, 1);\n+  VERIFY (str[1] == c);\n+\n+  char arr[] = \"c\";\n+  str.append(arr, 1);\n+  VERIFY (str[2] == arr[0]);\n+\n+  const char carr[] = \"d\";\n+  str.append(carr, 1);\n+  VERIFY (str[3] == carr[0]);\n+\n+  struct S {\n+    operator char*() { return &c; }\n+    operator std::string_view() { return \"!\"; }\n+    char c = 'e';\n+  };\n+\n+  str.append(S{}, 1);\n+  VERIFY (str[4] == S{}.c);\n+}\n+\n int main()\n { \n   test03();\n+  test04();\n   return 0;\n }"}, {"sha": "dc1bd648d34201ad22ade5ff17ff72814a4db6da", "filename": "libstdc++-v3/testsuite/21_strings/basic_string/modifiers/append/wchar_t/4.cc", "status": "modified", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/657213f7364a091c3347184d3ec8460d81f8022b/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fmodifiers%2Fappend%2Fwchar_t%2F4.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/657213f7364a091c3347184d3ec8460d81f8022b/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fmodifiers%2Fappend%2Fwchar_t%2F4.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fmodifiers%2Fappend%2Fwchar_t%2F4.cc?ref=657213f7364a091c3347184d3ec8460d81f8022b", "patch": "@@ -38,8 +38,39 @@ test03()\n   VERIFY (str4 == L\"oo\");\n }\n \n+// PR libstdc++/77264\n+void\n+test04()\n+{\n+  bool test __attribute__((unused)) = true;\n+\n+  std::wstring str(L\"a\");\n+\n+  wchar_t c = L'b';\n+  str.append(&c, 1);\n+  VERIFY (str[1] == c);\n+\n+  wchar_t arr[] = L\"c\";\n+  str.append(arr, 1);\n+  VERIFY (str[2] == arr[0]);\n+\n+  const wchar_t carr[] = L\"d\";\n+  str.append(carr, 1);\n+  VERIFY (str[3] == carr[0]);\n+\n+  struct S {\n+    operator wchar_t*() { return &c; }\n+    operator std::wstring_view() { return L\"!\"; }\n+    wchar_t c = L'e';\n+  };\n+\n+  str.append(S{}, 1);\n+  VERIFY (str[4] == S{}.c);\n+}\n+\n int main()\n { \n   test03();\n+  test04();\n   return 0;\n }"}, {"sha": "201dee04eb64f0bb6716d57abd6cea2295c90077", "filename": "libstdc++-v3/testsuite/21_strings/basic_string/modifiers/assign/char/4.cc", "status": "modified", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/657213f7364a091c3347184d3ec8460d81f8022b/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fmodifiers%2Fassign%2Fchar%2F4.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/657213f7364a091c3347184d3ec8460d81f8022b/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fmodifiers%2Fassign%2Fchar%2F4.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fmodifiers%2Fassign%2Fchar%2F4.cc?ref=657213f7364a091c3347184d3ec8460d81f8022b", "patch": "@@ -35,8 +35,38 @@ test03()\n   VERIFY (str4 == \"oo\");\n }\n \n+// PR libstdc++/77264\n+void\n+test04()\n+{\n+  bool test __attribute__((unused)) = true;\n+\n+  std::string str(\"a\");\n+  char c = 'b';\n+  str.assign(&c, 1);\n+  VERIFY (str[0] == c);\n+\n+  char arr[] = \"c\";\n+  str.assign(arr, 1);\n+  VERIFY (str[0] == arr[0]);\n+\n+  const char carr[] = \"d\";\n+  str.assign(carr, 1);\n+  VERIFY (str[0] == carr[0]);\n+\n+  struct S {\n+    operator char*() { return &c; }\n+    operator std::string_view() { return \"!\"; }\n+    char c = 'e';\n+  };\n+\n+  str.assign(S{}, 1);\n+  VERIFY (str[0] == S{}.c);\n+}\n+\n int main()\n { \n   test03();\n+  test04();\n   return 0;\n }"}, {"sha": "5fb7a64eef6632c306c33e148e3c43916c6e6a4d", "filename": "libstdc++-v3/testsuite/21_strings/basic_string/modifiers/assign/wchar_t/4.cc", "status": "modified", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/657213f7364a091c3347184d3ec8460d81f8022b/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fmodifiers%2Fassign%2Fwchar_t%2F4.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/657213f7364a091c3347184d3ec8460d81f8022b/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fmodifiers%2Fassign%2Fwchar_t%2F4.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fmodifiers%2Fassign%2Fwchar_t%2F4.cc?ref=657213f7364a091c3347184d3ec8460d81f8022b", "patch": "@@ -35,8 +35,39 @@ test03()\n   VERIFY (str4 == L\"oo\");\n }\n \n+// PR libstdc++/77264\n+void\n+test04()\n+{\n+  bool test __attribute__((unused)) = true;\n+\n+  std::wstring str(L\"a\");\n+\n+  wchar_t c = L'b';\n+  str.assign(&c, 1);\n+  VERIFY (str[0] == c);\n+\n+  wchar_t arr[] = L\"c\";\n+  str.assign(arr, 1);\n+  VERIFY (str[0] == arr[0]);\n+\n+  const wchar_t carr[] = L\"d\";\n+  str.assign(carr, 1);\n+  VERIFY (str[0] == carr[0]);\n+\n+  struct S {\n+    operator wchar_t*() { return &c; }\n+    operator std::wstring_view() { return L\"!\"; }\n+    wchar_t c = L'e';\n+  };\n+\n+  str.assign(S{}, 1);\n+  VERIFY (str[0] == S{}.c);\n+}\n+\n int main()\n { \n   test03();\n+  test04();\n   return 0;\n }"}, {"sha": "7ebbb33fced67863050724220d913016bef0b6b0", "filename": "libstdc++-v3/testsuite/21_strings/basic_string/modifiers/insert/char/3.cc", "status": "modified", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/657213f7364a091c3347184d3ec8460d81f8022b/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fmodifiers%2Finsert%2Fchar%2F3.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/657213f7364a091c3347184d3ec8460d81f8022b/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fmodifiers%2Finsert%2Fchar%2F3.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fmodifiers%2Finsert%2Fchar%2F3.cc?ref=657213f7364a091c3347184d3ec8460d81f8022b", "patch": "@@ -39,8 +39,38 @@ test03()\n   VERIFY (str4 == \"foooooo\");\n }\n \n+// PR libstdc++/77264\n+void\n+test04()\n+{\n+  bool test __attribute__((unused)) = true;\n+\n+  std::string str(\"a\");\n+  char c = 'b';\n+  str.insert(0, &c, 1);\n+  VERIFY (str[0] == c);\n+\n+  char arr[] = \"c\";\n+  str.insert(0, arr, 1);\n+  VERIFY (str[0] == arr[0]);\n+\n+  const char carr[] = \"d\";\n+  str.insert(0, carr, 1);\n+  VERIFY (str[0] == carr[0]);\n+\n+  struct S {\n+    operator char*() { return &c; }\n+    operator std::string_view() { return \"!\"; }\n+    char c = 'e';\n+  };\n+\n+  str.insert(0, S{}, 1);\n+  VERIFY (str[0] == S{}.c);\n+}\n+\n int main()\n { \n   test03();\n+  test04();\n   return 0;\n }"}, {"sha": "5d2587c8d002e3899eb1d8c5f156c1f8fa862256", "filename": "libstdc++-v3/testsuite/21_strings/basic_string/modifiers/insert/wchar_t/3.cc", "status": "modified", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/657213f7364a091c3347184d3ec8460d81f8022b/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fmodifiers%2Finsert%2Fwchar_t%2F3.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/657213f7364a091c3347184d3ec8460d81f8022b/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fmodifiers%2Finsert%2Fwchar_t%2F3.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fmodifiers%2Finsert%2Fwchar_t%2F3.cc?ref=657213f7364a091c3347184d3ec8460d81f8022b", "patch": "@@ -39,8 +39,39 @@ test03()\n   VERIFY (str4 == L\"foooooo\");\n }\n \n+// PR libstdc++/77264\n+void\n+test04()\n+{\n+  bool test __attribute__((unused)) = true;\n+\n+  std::wstring str(L\"a\");\n+\n+  wchar_t c = L'b';\n+  str.insert(0, &c, 1);\n+  VERIFY (str[0] == c);\n+\n+  wchar_t arr[] = L\"c\";\n+  str.insert(0, arr, 1);\n+  VERIFY (str[0] == arr[0]);\n+\n+  const wchar_t carr[] = L\"d\";\n+  str.insert(0, carr, 1);\n+  VERIFY (str[0] == carr[0]);\n+\n+  struct S {\n+    operator wchar_t*() { return &c; }\n+    operator std::wstring_view() { return L\"!\"; }\n+    wchar_t c = L'e';\n+  };\n+\n+  str.insert(0, S{}, 1);\n+  VERIFY (str[0] == S{}.c);\n+}\n+\n int main()\n { \n   test03();\n+  test04();\n   return 0;\n }"}, {"sha": "afefa84fc5d5221ee40f06395432bbf5e4068150", "filename": "libstdc++-v3/testsuite/21_strings/basic_string/modifiers/replace/char/7.cc", "status": "modified", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/657213f7364a091c3347184d3ec8460d81f8022b/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fmodifiers%2Freplace%2Fchar%2F7.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/657213f7364a091c3347184d3ec8460d81f8022b/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fmodifiers%2Freplace%2Fchar%2F7.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fmodifiers%2Freplace%2Fchar%2F7.cc?ref=657213f7364a091c3347184d3ec8460d81f8022b", "patch": "@@ -47,8 +47,38 @@ test03()\n   VERIFY (str2 == \"foofoo\");\n }\n \n+// PR libstdc++/77264\n+void\n+test04()\n+{\n+  bool test __attribute__((unused)) = true;\n+\n+  std::string str(\"a\");\n+  char c = 'b';\n+  str.replace(0, 1, &c, 1);\n+  VERIFY (str[0] == c);\n+\n+  char arr[] = \"c\";\n+  str.replace(0, 1, arr, 1);\n+  VERIFY (str[0] == arr[0]);\n+\n+  const char carr[] = \"d\";\n+  str.replace(0, 1, carr, 1);\n+  VERIFY (str[0] == carr[0]);\n+\n+  struct S {\n+    operator char*() { return &c; }\n+    operator std::string_view() { return \"!\"; }\n+    char c = 'e';\n+  };\n+\n+  str.replace(0, 1, S{}, 1);\n+  VERIFY (str[0] == S{}.c);\n+}\n+\n int main()\n { \n   test03();\n+  test04();\n   return 0;\n }"}, {"sha": "692c52ddcb235b9dd96dfc210dee8844841aea7b", "filename": "libstdc++-v3/testsuite/21_strings/basic_string/modifiers/replace/wchar_t/7.cc", "status": "modified", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/657213f7364a091c3347184d3ec8460d81f8022b/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fmodifiers%2Freplace%2Fwchar_t%2F7.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/657213f7364a091c3347184d3ec8460d81f8022b/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fmodifiers%2Freplace%2Fwchar_t%2F7.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fmodifiers%2Freplace%2Fwchar_t%2F7.cc?ref=657213f7364a091c3347184d3ec8460d81f8022b", "patch": "@@ -47,8 +47,39 @@ test03()\n   VERIFY (str2 == L\"foofoo\");\n }\n \n+// PR libstdc++/77264\n+void\n+test04()\n+{\n+  bool test __attribute__((unused)) = true;\n+\n+  std::wstring str(L\"a\");\n+\n+  wchar_t c = L'b';\n+  str.replace(0, 1, &c, 1);\n+  VERIFY (str[0] == c);\n+\n+  wchar_t arr[] = L\"c\";\n+  str.replace(0, 1, arr, 1);\n+  VERIFY (str[0] == arr[0]);\n+\n+  const wchar_t carr[] = L\"d\";\n+  str.replace(0, 1, carr, 1);\n+  VERIFY (str[0] == carr[0]);\n+\n+  struct S {\n+    operator wchar_t*() { return &c; }\n+    operator std::wstring_view() { return L\"!\"; }\n+    wchar_t c = L'e';\n+  };\n+\n+  str.replace(0, 1, S{}, 1);\n+  VERIFY (str[0] == S{}.c);\n+}\n+\n int main()\n { \n   test03();\n+  test04();\n   return 0;\n }"}, {"sha": "08b3f0c378b25d7b0d2e5707c544bd16ecd9af67", "filename": "libstdc++-v3/testsuite/21_strings/basic_string/operations/compare/char/2.cc", "status": "modified", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/657213f7364a091c3347184d3ec8460d81f8022b/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Foperations%2Fcompare%2Fchar%2F2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/657213f7364a091c3347184d3ec8460d81f8022b/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Foperations%2Fcompare%2Fchar%2F2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Foperations%2Fcompare%2Fchar%2F2.cc?ref=657213f7364a091c3347184d3ec8460d81f8022b", "patch": "@@ -49,8 +49,38 @@ test03()\n   VERIFY (x == 0);\n }\n \n+// PR libstdc++/77264\n+void\n+test04()\n+{\n+  bool test __attribute__((unused)) = true;\n+\n+  const std::string str(\"a\");\n+  char c = 'a';\n+  int res = str.compare(0, 1, &c, 1);\n+  VERIFY ( !res );\n+\n+  char arr[] = \"a\";\n+  res = str.compare(0, 1, arr, 1);\n+  VERIFY ( !res );\n+\n+  const char carr[] = \"a\";\n+  res = str.compare(0, 1, carr, 1);\n+  VERIFY ( !res );\n+\n+  struct S {\n+    operator char*() { return &c; }\n+    operator std::string_view() { return \"!\"; }\n+    char c = 'a';\n+  };\n+\n+  res = str.compare(0, 1, S{}, 1);\n+  VERIFY ( !res );\n+}\n+\n int main()\n { \n   test03();\n+  test04();\n   return 0;\n }"}, {"sha": "d79dcd59a87817e68d81aa43eb05e0897c660600", "filename": "libstdc++-v3/testsuite/21_strings/basic_string/operations/compare/wchar_t/2.cc", "status": "modified", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/657213f7364a091c3347184d3ec8460d81f8022b/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Foperations%2Fcompare%2Fwchar_t%2F2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/657213f7364a091c3347184d3ec8460d81f8022b/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Foperations%2Fcompare%2Fwchar_t%2F2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Foperations%2Fcompare%2Fwchar_t%2F2.cc?ref=657213f7364a091c3347184d3ec8460d81f8022b", "patch": "@@ -49,8 +49,39 @@ test03()\n   VERIFY (x == 0);\n }\n \n+// PR libstdc++/77264\n+void\n+test04()\n+{\n+  bool test __attribute__((unused)) = true;\n+\n+  const std::wstring str(L\"a\");\n+\n+  wchar_t c = L'a';\n+  int res = str.compare(0, 1, &c, 1);\n+  VERIFY ( !res );\n+\n+  wchar_t arr[] = L\"a\";\n+  res = str.compare(0, 1, arr, 1);\n+  VERIFY ( !res );\n+\n+  const wchar_t carr[] = L\"a\";\n+  res = str.compare(0, 1, carr, 1);\n+  VERIFY ( !res );\n+\n+  struct S {\n+    operator wchar_t*() { return &c; }\n+    operator std::wstring_view() { return L\"!\"; }\n+    wchar_t c = L'a';\n+  };\n+\n+  res = str.compare(0, 1, S{}, 1);\n+  VERIFY ( !res );\n+}\n+\n int main()\n { \n   test03();\n+  test04();\n   return 0;\n }"}]}