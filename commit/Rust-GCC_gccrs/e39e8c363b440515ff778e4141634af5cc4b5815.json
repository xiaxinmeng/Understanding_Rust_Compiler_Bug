{"sha": "e39e8c363b440515ff778e4141634af5cc4b5815", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTM5ZThjMzYzYjQ0MDUxNWZmNzc4ZTQxNDE2MzRhZjVjYzRiNTgxNQ==", "commit": {"author": {"name": "Uros Bizjak", "email": "ubizjak@gmail.com", "date": "2007-03-02T22:28:02Z"}, "committer": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2007-03-02T22:28:02Z"}, "message": "i386.h (TUNEMASK): Remove define.\n\n        * config/i386/i386.h (TUNEMASK): Remove define.\n        (ARCHMASK): Remove define.\n        (TARGET_*): Use ix86_tune_mask variable instead of TUNEMASK.\n         Use ix86_arch_mask variable instead of ARCHMASK.\n        * config/i386/i386.c (override_options): Ditto.\n        (standard_80387_constant_p): Ditto.\n\nFrom-SVN: r122491", "tree": {"sha": "10c7f2772bfe9f78e1f50b2753021320757270ac", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/10c7f2772bfe9f78e1f50b2753021320757270ac"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e39e8c363b440515ff778e4141634af5cc4b5815", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e39e8c363b440515ff778e4141634af5cc4b5815", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e39e8c363b440515ff778e4141634af5cc4b5815", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e39e8c363b440515ff778e4141634af5cc4b5815/comments", "author": {"login": "ubizjak", "id": 55479990, "node_id": "MDQ6VXNlcjU1NDc5OTkw", "avatar_url": "https://avatars.githubusercontent.com/u/55479990?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ubizjak", "html_url": "https://github.com/ubizjak", "followers_url": "https://api.github.com/users/ubizjak/followers", "following_url": "https://api.github.com/users/ubizjak/following{/other_user}", "gists_url": "https://api.github.com/users/ubizjak/gists{/gist_id}", "starred_url": "https://api.github.com/users/ubizjak/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ubizjak/subscriptions", "organizations_url": "https://api.github.com/users/ubizjak/orgs", "repos_url": "https://api.github.com/users/ubizjak/repos", "events_url": "https://api.github.com/users/ubizjak/events{/privacy}", "received_events_url": "https://api.github.com/users/ubizjak/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "49fedf5af48d844f32b942fc00f4de155e736f34", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/49fedf5af48d844f32b942fc00f4de155e736f34", "html_url": "https://github.com/Rust-GCC/gccrs/commit/49fedf5af48d844f32b942fc00f4de155e736f34"}], "stats": {"total": 133, "additions": 71, "deletions": 62}, "files": [{"sha": "39f849a3522e9353786a0c04f30115300d2ffe4a", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e39e8c363b440515ff778e4141634af5cc4b5815/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e39e8c363b440515ff778e4141634af5cc4b5815/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=e39e8c363b440515ff778e4141634af5cc4b5815", "patch": "@@ -1,3 +1,12 @@\n+2007-03-02  Uros Bizjak  <ubizjak@gmail.com>\n+\n+\t* config/i386/i386.h (TUNEMASK): Remove define.\n+\t(ARCHMASK): Remove define.\n+\t(TARGET_*): Use ix86_tune_mask variable instead of TUNEMASK.\n+\t Use ix86_arch_mask variable instead of ARCHMASK.\n+\t* config/i386/i386.c (override_options): Ditto.\n+\t(standard_80387_constant_p): Ditto.\n+\n 2007-03-03  Ian Lance Taylor  <iant@google.com>\n \n \tUsed signed infinities in VRP."}, {"sha": "cc0b2754d5a6023d206c43dd9da0cdd7c2ebc642", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e39e8c363b440515ff778e4141634af5cc4b5815/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e39e8c363b440515ff778e4141634af5cc4b5815/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=e39e8c363b440515ff778e4141634af5cc4b5815", "patch": "@@ -2284,7 +2284,7 @@ override_options (void)\n \n   /* If the architecture always has an FPU, turn off NO_FANCY_MATH_387,\n      since the insns won't need emulation.  */\n-  if (x86_arch_always_fancy_math_387 & ARCHMASK)\n+  if (x86_arch_always_fancy_math_387 & ix86_arch_mask)\n     target_flags &= ~MASK_NO_FANCY_MATH_387;\n \n   /* Likewise, if the target doesn't have a 387, or we've specified\n@@ -2405,7 +2405,7 @@ override_options (void)\n   if (!TARGET_80387)\n     target_flags &= ~MASK_FLOAT_RETURNS;\n \n-  if ((x86_accumulate_outgoing_args & TUNEMASK)\n+  if ((x86_accumulate_outgoing_args & ix86_tune_mask)\n       && !(target_flags_explicit & MASK_ACCUMULATE_OUTGOING_ARGS)\n       && !optimize_size)\n     target_flags |= MASK_ACCUMULATE_OUTGOING_ARGS;\n@@ -4999,7 +4999,7 @@ standard_80387_constant_p (rtx x)\n   /* For XFmode constants, try to find a special 80387 instruction when\n      optimizing for size or on those CPUs that benefit from them.  */\n   if (GET_MODE (x) == XFmode\n-      && (optimize_size || x86_ext_80387_constants & TUNEMASK))\n+      && (optimize_size || x86_ext_80387_constants & ix86_tune_mask))\n     {\n       int i;\n "}, {"sha": "f77fc766462fff6b349110ef8282b8ee278e2175", "filename": "gcc/config/i386/i386.h", "status": "modified", "additions": 59, "deletions": 59, "changes": 118, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e39e8c363b440515ff778e4141634af5cc4b5815/gcc%2Fconfig%2Fi386%2Fi386.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e39e8c363b440515ff778e4141634af5cc4b5815/gcc%2Fconfig%2Fi386%2Fi386.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.h?ref=e39e8c363b440515ff778e4141634af5cc4b5815", "patch": "@@ -207,65 +207,65 @@ extern const int x86_bswap;\n extern const int x86_partial_flag_reg_stall;\n extern int x86_prefetch_sse, x86_cmpxchg16b;\n \n-#define TUNEMASK ix86_tune_mask\n-#define ARCHMASK ix86_arch_mask\n-\n-#define TARGET_USE_LEAVE (x86_use_leave & TUNEMASK)\n-#define TARGET_PUSH_MEMORY (x86_push_memory & TUNEMASK)\n-#define TARGET_ZERO_EXTEND_WITH_AND (x86_zero_extend_with_and & TUNEMASK)\n-#define TARGET_USE_BIT_TEST (x86_use_bit_test & TUNEMASK)\n-#define TARGET_UNROLL_STRLEN (x86_unroll_strlen & TUNEMASK)\n+#define TARGET_USE_LEAVE (x86_use_leave & ix86_tune_mask)\n+#define TARGET_PUSH_MEMORY (x86_push_memory & ix86_tune_mask)\n+#define TARGET_ZERO_EXTEND_WITH_AND (x86_zero_extend_with_and & ix86_tune_mask)\n+#define TARGET_USE_BIT_TEST (x86_use_bit_test & ix86_tune_mask)\n+#define TARGET_UNROLL_STRLEN (x86_unroll_strlen & ix86_tune_mask)\n /* For sane SSE instruction set generation we need fcomi instruction.  It is\n    safe to enable all CMOVE instructions.  */\n-#define TARGET_CMOVE ((x86_cmove & ARCHMASK) || TARGET_SSE)\n+#define TARGET_CMOVE ((x86_cmove & ix86_arch_mask) || TARGET_SSE)\n #define TARGET_FISTTP (TARGET_SSE3 && TARGET_80387)\n-#define TARGET_DEEP_BRANCH_PREDICTION (x86_deep_branch & TUNEMASK)\n-#define TARGET_BRANCH_PREDICTION_HINTS (x86_branch_hints & TUNEMASK)\n-#define TARGET_DOUBLE_WITH_ADD (x86_double_with_add & TUNEMASK)\n-#define TARGET_USE_SAHF ((x86_use_sahf & TUNEMASK) && !TARGET_64BIT)\n-#define TARGET_MOVX (x86_movx & TUNEMASK)\n-#define TARGET_PARTIAL_REG_STALL (x86_partial_reg_stall & TUNEMASK)\n-#define TARGET_PARTIAL_FLAG_REG_STALL (x86_partial_flag_reg_stall & TUNEMASK)\n-#define TARGET_USE_HIMODE_FIOP (x86_use_himode_fiop & TUNEMASK)\n-#define TARGET_USE_SIMODE_FIOP (x86_use_simode_fiop & TUNEMASK)\n-#define TARGET_USE_MOV0 (x86_use_mov0 & TUNEMASK)\n-#define TARGET_USE_CLTD (x86_use_cltd & TUNEMASK)\n-#define TARGET_USE_XCHGB (x86_use_xchgb & TUNEMASK)\n-#define TARGET_SPLIT_LONG_MOVES (x86_split_long_moves & TUNEMASK)\n-#define TARGET_READ_MODIFY_WRITE (x86_read_modify_write & TUNEMASK)\n-#define TARGET_READ_MODIFY (x86_read_modify & TUNEMASK)\n-#define TARGET_PROMOTE_QImode (x86_promote_QImode & TUNEMASK)\n-#define TARGET_FAST_PREFIX (x86_fast_prefix & TUNEMASK)\n-#define TARGET_SINGLE_STRINGOP (x86_single_stringop & TUNEMASK)\n-#define TARGET_QIMODE_MATH (x86_qimode_math & TUNEMASK)\n-#define TARGET_HIMODE_MATH (x86_himode_math & TUNEMASK)\n-#define TARGET_PROMOTE_QI_REGS (x86_promote_qi_regs & TUNEMASK)\n-#define TARGET_PROMOTE_HI_REGS (x86_promote_hi_regs & TUNEMASK)\n-#define TARGET_ADD_ESP_4 (x86_add_esp_4 & TUNEMASK)\n-#define TARGET_ADD_ESP_8 (x86_add_esp_8 & TUNEMASK)\n-#define TARGET_SUB_ESP_4 (x86_sub_esp_4 & TUNEMASK)\n-#define TARGET_SUB_ESP_8 (x86_sub_esp_8 & TUNEMASK)\n-#define TARGET_INTEGER_DFMODE_MOVES (x86_integer_DFmode_moves & TUNEMASK)\n-#define TARGET_PARTIAL_REG_DEPENDENCY (x86_partial_reg_dependency & TUNEMASK)\n-#define TARGET_SSE_PARTIAL_REG_DEPENDENCY \\\n-\t\t\t\t      (x86_sse_partial_reg_dependency & TUNEMASK)\n-#define TARGET_SSE_UNALIGNED_MOVE_OPTIMAL \\\n-\t\t\t\t      (x86_sse_unaligned_move_optimal & TUNEMASK)\n-#define TARGET_SSE_SPLIT_REGS (x86_sse_split_regs & TUNEMASK)\n-#define TARGET_SSE_TYPELESS_STORES (x86_sse_typeless_stores & TUNEMASK)\n-#define TARGET_SSE_LOAD0_BY_PXOR (x86_sse_load0_by_pxor & TUNEMASK)\n-#define TARGET_MEMORY_MISMATCH_STALL (x86_memory_mismatch_stall & TUNEMASK)\n-#define TARGET_PROLOGUE_USING_MOVE (x86_prologue_using_move & TUNEMASK)\n-#define TARGET_EPILOGUE_USING_MOVE (x86_epilogue_using_move & TUNEMASK)\n+#define TARGET_DEEP_BRANCH_PREDICTION (x86_deep_branch & ix86_tune_mask)\n+#define TARGET_BRANCH_PREDICTION_HINTS (x86_branch_hints & ix86_tune_mask)\n+#define TARGET_DOUBLE_WITH_ADD (x86_double_with_add & ix86_tune_mask)\n+#define TARGET_USE_SAHF ((x86_use_sahf & ix86_tune_mask) && !TARGET_64BIT)\n+#define TARGET_MOVX (x86_movx & ix86_tune_mask)\n+#define TARGET_PARTIAL_REG_STALL (x86_partial_reg_stall & ix86_tune_mask)\n+#define TARGET_PARTIAL_FLAG_REG_STALL\t\t\\\n+  (x86_partial_flag_reg_stall & ix86_tune_mask)\n+#define TARGET_USE_HIMODE_FIOP (x86_use_himode_fiop & ix86_tune_mask)\n+#define TARGET_USE_SIMODE_FIOP (x86_use_simode_fiop & ix86_tune_mask)\n+#define TARGET_USE_MOV0 (x86_use_mov0 & ix86_tune_mask)\n+#define TARGET_USE_CLTD (x86_use_cltd & ix86_tune_mask)\n+#define TARGET_USE_XCHGB (x86_use_xchgb & ix86_tune_mask)\n+#define TARGET_SPLIT_LONG_MOVES (x86_split_long_moves & ix86_tune_mask)\n+#define TARGET_READ_MODIFY_WRITE (x86_read_modify_write & ix86_tune_mask)\n+#define TARGET_READ_MODIFY (x86_read_modify & ix86_tune_mask)\n+#define TARGET_PROMOTE_QImode (x86_promote_QImode & ix86_tune_mask)\n+#define TARGET_FAST_PREFIX (x86_fast_prefix & ix86_tune_mask)\n+#define TARGET_SINGLE_STRINGOP (x86_single_stringop & ix86_tune_mask)\n+#define TARGET_QIMODE_MATH (x86_qimode_math & ix86_tune_mask)\n+#define TARGET_HIMODE_MATH (x86_himode_math & ix86_tune_mask)\n+#define TARGET_PROMOTE_QI_REGS (x86_promote_qi_regs & ix86_tune_mask)\n+#define TARGET_PROMOTE_HI_REGS (x86_promote_hi_regs & ix86_tune_mask)\n+#define TARGET_ADD_ESP_4 (x86_add_esp_4 & ix86_tune_mask)\n+#define TARGET_ADD_ESP_8 (x86_add_esp_8 & ix86_tune_mask)\n+#define TARGET_SUB_ESP_4 (x86_sub_esp_4 & ix86_tune_mask)\n+#define TARGET_SUB_ESP_8 (x86_sub_esp_8 & ix86_tune_mask)\n+#define TARGET_INTEGER_DFMODE_MOVES (x86_integer_DFmode_moves & ix86_tune_mask)\n+#define TARGET_PARTIAL_REG_DEPENDENCY\t\t\\\n+  (x86_partial_reg_dependency & ix86_tune_mask)\n+#define TARGET_SSE_PARTIAL_REG_DEPENDENCY\t\t\\\n+  (x86_sse_partial_reg_dependency & ix86_tune_mask)\n+#define TARGET_SSE_UNALIGNED_MOVE_OPTIMAL\t\t\\\n+  (x86_sse_unaligned_move_optimal & ix86_tune_mask)\n+#define TARGET_SSE_SPLIT_REGS (x86_sse_split_regs & ix86_tune_mask)\n+#define TARGET_SSE_TYPELESS_STORES (x86_sse_typeless_stores & ix86_tune_mask)\n+#define TARGET_SSE_LOAD0_BY_PXOR (x86_sse_load0_by_pxor & ix86_tune_mask)\n+#define TARGET_MEMORY_MISMATCH_STALL\t\t\\\n+  (x86_memory_mismatch_stall & ix86_tune_mask)\n+#define TARGET_PROLOGUE_USING_MOVE (x86_prologue_using_move & ix86_tune_mask)\n+#define TARGET_EPILOGUE_USING_MOVE (x86_epilogue_using_move & ix86_tune_mask)\n #define TARGET_PREFETCH_SSE (x86_prefetch_sse)\n-#define TARGET_SHIFT1 (x86_shift1 & TUNEMASK)\n-#define TARGET_USE_FFREEP (x86_use_ffreep & TUNEMASK)\n-#define TARGET_INTER_UNIT_MOVES (x86_inter_unit_moves & TUNEMASK)\n-#define TARGET_FOUR_JUMP_LIMIT (x86_four_jump_limit & TUNEMASK)\n-#define TARGET_SCHEDULE (x86_schedule & TUNEMASK)\n-#define TARGET_USE_BT (x86_use_bt & TUNEMASK)\n-#define TARGET_USE_INCDEC (x86_use_incdec & TUNEMASK)\n-#define TARGET_PAD_RETURNS (x86_pad_returns & TUNEMASK)\n+#define TARGET_SHIFT1 (x86_shift1 & ix86_tune_mask)\n+#define TARGET_USE_FFREEP (x86_use_ffreep & ix86_tune_mask)\n+#define TARGET_INTER_UNIT_MOVES (x86_inter_unit_moves & ix86_tune_mask)\n+#define TARGET_FOUR_JUMP_LIMIT (x86_four_jump_limit & ix86_tune_mask)\n+#define TARGET_SCHEDULE (x86_schedule & ix86_tune_mask)\n+#define TARGET_USE_BT (x86_use_bt & ix86_tune_mask)\n+#define TARGET_USE_INCDEC (x86_use_incdec & ix86_tune_mask)\n+#define TARGET_PAD_RETURNS (x86_pad_returns & ix86_tune_mask)\n \n #define ASSEMBLER_DIALECT (ix86_asm_dialect)\n \n@@ -278,11 +278,11 @@ extern int x86_prefetch_sse, x86_cmpxchg16b;\n #define TARGET_ANY_GNU_TLS (TARGET_GNU_TLS || TARGET_GNU2_TLS)\n #define TARGET_SUN_TLS (ix86_tls_dialect == TLS_DIALECT_SUN)\n \n-#define TARGET_CMPXCHG (x86_cmpxchg & ARCHMASK)\n-#define TARGET_CMPXCHG8B (x86_cmpxchg8b & ARCHMASK)\n+#define TARGET_CMPXCHG (x86_cmpxchg & ix86_arch_mask)\n+#define TARGET_CMPXCHG8B (x86_cmpxchg8b & ix86_arch_mask)\n #define TARGET_CMPXCHG16B (x86_cmpxchg16b)\n-#define TARGET_XADD (x86_xadd & ARCHMASK)\n-#define TARGET_BSWAP (x86_bswap & ARCHMASK)\n+#define TARGET_XADD (x86_xadd & ix86_arch_mask)\n+#define TARGET_BSWAP (x86_bswap & ix86_arch_mask)\n \n #ifndef TARGET_64BIT_DEFAULT\n #define TARGET_64BIT_DEFAULT 0"}]}