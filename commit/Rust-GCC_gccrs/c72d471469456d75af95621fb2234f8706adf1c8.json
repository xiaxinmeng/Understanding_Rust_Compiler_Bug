{"sha": "c72d471469456d75af95621fb2234f8706adf1c8", "node_id": "C_kwDOANBUbNoAKGM3MmQ0NzE0Njk0NTZkNzVhZjk1NjIxZmIyMjM0Zjg3MDZhZGYxYzg", "commit": {"author": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2022-07-12T00:16:27Z"}, "committer": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2022-07-12T00:16:27Z"}, "message": "Daily bump.", "tree": {"sha": "8fa10182c5438543336c2916769a1ccb72dc398e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8fa10182c5438543336c2916769a1ccb72dc398e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c72d471469456d75af95621fb2234f8706adf1c8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c72d471469456d75af95621fb2234f8706adf1c8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c72d471469456d75af95621fb2234f8706adf1c8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c72d471469456d75af95621fb2234f8706adf1c8/comments", "author": null, "committer": null, "parents": [{"sha": "2701442d0cf6292f6624443c15813d6d1a3562fe", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2701442d0cf6292f6624443c15813d6d1a3562fe", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2701442d0cf6292f6624443c15813d6d1a3562fe"}], "stats": {"total": 174, "additions": 173, "deletions": 1}, "files": [{"sha": "3db624bac9a10f3160312fcb75f70308e2fc2200", "filename": "gcc/ChangeLog", "status": "modified", "additions": 137, "deletions": 0, "changes": 137, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c72d471469456d75af95621fb2234f8706adf1c8/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c72d471469456d75af95621fb2234f8706adf1c8/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=c72d471469456d75af95621fb2234f8706adf1c8", "patch": "@@ -1,3 +1,140 @@\n+2022-07-11  Andrew MacLeod  <amacleod@redhat.com>\n+\n+\tPR tree-optimization/106234\n+\t* gimple-range-cache.cc (ranger_cache::range_from_dom): Check dominator\n+\tcache value before recursively resolving it.\n+\n+2022-07-11  Roger Sayle  <roger@nextmovesoftware.com>\n+\n+\t* config/i386/i386-features.h (scalar_chain): Add fields\n+\tinsns_conv, n_sse_to_integer and n_integer_to_sse to this\n+\tparent class, moved from general_scalar_chain.\n+\t(scalar_chain::convert_compare): Protected method moved\n+\tfrom general_scalar_chain.\n+\t(mark_dual_mode_def): Make protected, not private virtual.\n+\t(scalar_chain:convert_op): New private virtual method.\n+\t(general_scalar_chain::general_scalar_chain): Simplify constructor.\n+\t(general_scalar_chain::~general_scalar_chain): Delete destructor.\n+\t(general_scalar_chain): Move insns_conv, n_sse_to_integer and\n+\tn_integer_to_sse fields to parent class, scalar_chain.\n+\t(general_scalar_chain::mark_dual_mode_def): Delete prototype.\n+\t(general_scalar_chain::convert_compare): Delete prototype.\n+\t(timode_scalar_chain::compute_convert_gain): Remove simplistic\n+\timplementation, convert to a method prototype.\n+\t(timode_scalar_chain::mark_dual_mode_def): Delete prototype.\n+\t(timode_scalar_chain::convert_op): Prototype new virtual method.\n+\t* config/i386/i386-features.cc (scalar_chain::scalar_chain):\n+\tAllocate insns_conv and initialize n_sse_to_integer and\n+\tn_integer_to_sse fields in constructor.\n+\t(scalar_chain::scalar_chain): Free insns_conv in destructor.\n+\t(general_scalar_chain::general_scalar_chain): Delete\n+\tconstructor, now defined in the class declaration.\n+\t(general_scalar_chain::~general_scalar_chain): Delete destructor.\n+\t(scalar_chain::mark_dual_mode_def): Renamed from\n+\tgeneral_scalar_chain::mark_dual_mode_def.\n+\t(timode_scalar_chain::mark_dual_mode_def): Delete.\n+\t(scalar_chain::convert_compare): Renamed from\n+\tgeneral_scalar_chain::convert_compare.\n+\t(timode_scalar_chain::compute_convert_gain): New method to\n+\tdetermine the gain from converting a TImode chain to V1TImode.\n+\t(timode_scalar_chain::convert_op): New method to convert an\n+\toperand from TImode to V1TImode.\n+\t(timode_scalar_chain::convert_insn) <case REG>: Only PUT_MODE\n+\ton REG_EQUAL notes that were originally TImode (not CONST_INT).\n+\tHandle AND, ANDN, XOR, IOR, NOT and COMPARE.\n+\t(timode_mem_p): Helper predicate to check where operand is\n+\tmemory reference with sufficient alignment for TImode STV.\n+\t(timode_scalar_to_vector_candidate_p): Use convertible_comparison_p\n+\tto check whether COMPARE is convertible.  Handle SET_DESTs that\n+\tthat are REG_P or MEM_P and SET_SRCs that are REG, CONST_INT,\n+\tCONST_WIDE_INT, MEM, AND, ANDN, IOR, XOR or NOT.\n+\n+2022-07-11  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\tPR tree-optimization/106250\n+\t* tree-vect-loop.cc (vectorizable_reduction): Reinstate final\n+\targument to directly_supported_p.\n+\n+2022-07-11  Richard Biener  <rguenther@suse.de>\n+\n+\t* tree-into-ssa.cc (update_ssa): Do not forcefully\n+\tre-compute dominance fast queries for TODO_update_ssa_no_phi.\n+\n+2022-07-11  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/106228\n+\t* tree-vect-data-refs.cc (vect_setup_realignment): Adjust\n+\tVUSE compute for the non-loop case.\n+\n+2022-07-11  Richard Biener  <rguenther@suse.de>\n+\n+\t* tree-into-ssa.cc (rewrite_mode::REWRITE_UPDATE_REGION): New.\n+\t(rewrite_update_dom_walker::rewrite_update_dom_walker): Update.\n+\t(rewrite_update_dom_walker::m_in_region_flag): New.\n+\t(rewrite_update_dom_walker::before_dom_children): If the region\n+\tto update is marked, STOP at exits.\n+\t(rewrite_blocks): For REWRITE_UPDATE_REGION mark the region\n+\tto be updated.\n+\t(dump_update_ssa): Use bitmap_empty_p.\n+\t(update_ssa): Likewise.  Use REWRITE_UPDATE_REGION when\n+\tTODO_update_ssa_no_phi.\n+\t* tree-cfgcleanup.cc (cleanup_tree_cfg_noloop): Account\n+\tpending update_ssa to the caller.\n+\n+2022-07-11  Richard Biener  <rguenthert@suse.de>\n+\n+\tPR target/105459\n+\t* config/i386/i386-options.cc (ix86_set_current_function):\n+\tRebuild the target optimization node whenever necessary,\n+\tnot only when the optimization node didn't change.\n+\n+2022-07-11  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/106228\n+\t* tree-vect-data-refs.cc (vect_setup_realignment): Properly\n+\tset a VUSE operand on the emitted load.\n+\n+2022-07-11  Aldy Hernandez  <aldyh@redhat.com>\n+\n+\t* gimple-range.cc (gimple_ranger::export_global_ranges): Remove\n+\tverification against legacy value_range.\n+\t(gimple_ranger::register_inferred_ranges): Same.\n+\t(gimple_ranger::export_global_ranges): Rename update_global_range\n+\tto set_range_info.\n+\t* tree-core.h (struct range_info_def): Remove.\n+\t(struct irange_storage_slot): New.\n+\t(struct tree_base): Remove SSA_NAME_ANTI_RANGE_P documentation.\n+\t(struct tree_ssa_name): Add vrange_storage support.\n+\t* tree-ssanames.cc (range_info_p): New.\n+\t(range_info_fits_p): New.\n+\t(range_info_alloc): New.\n+\t(range_info_free): New.\n+\t(range_info_get_range): New.\n+\t(range_info_set_range): New.\n+\t(set_range_info_raw): Remove.\n+\t(set_range_info): Adjust to use vrange_storage.\n+\t(set_nonzero_bits): Same.\n+\t(get_nonzero_bits): Same.\n+\t(duplicate_ssa_name_range_info): Remove overload taking\n+\tvalue_range_kind.\n+\tRewrite tree overload to use vrange_storage.\n+\t(duplicate_ssa_name_fn): Adjust to use vrange_storage.\n+\t* tree-ssanames.h (struct range_info_def): Remove.\n+\t(set_range_info): Adjust prototype to take vrange.\n+\t* tree-vrp.cc (vrp_asserts::remove_range_assertions): Call\n+\tduplicate_ssa_name_range_info.\n+\t* tree.h (SSA_NAME_ANTI_RANGE_P): Remove.\n+\t(SSA_NAME_RANGE_TYPE): Remove.\n+\t* value-query.cc (get_ssa_name_range_info): Adjust to use\n+\tvrange_storage.\n+\t(update_global_range): Remove.\n+\t(get_range_global): Remove as_a<irange>.\n+\t* value-query.h (update_global_range): Remove.\n+\t* tree-ssa-dom.cc (set_global_ranges_from_unreachable_edges):\n+\tRename update_global_range to set_range_info.\n+\t* value-range-storage.cc (vrange_storage::alloc_slot): Remove\n+\tgcc_unreachable.\n+\n 2022-07-10  Aldy Hernandez  <aldyh@redhat.com>\n \n \t* value-range.cc (irange::operator=): Call verify_range."}, {"sha": "40dba6d5aa0f2cca1ab5e495fdf41da480fd920f", "filename": "gcc/DATESTAMP", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c72d471469456d75af95621fb2234f8706adf1c8/gcc%2FDATESTAMP", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c72d471469456d75af95621fb2234f8706adf1c8/gcc%2FDATESTAMP", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FDATESTAMP?ref=c72d471469456d75af95621fb2234f8706adf1c8", "patch": "@@ -1 +1 @@\n-20220711\n+20220712"}, {"sha": "d46eb18718e3b03f440a58541abda924ecbd5493", "filename": "gcc/c-family/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c72d471469456d75af95621fb2234f8706adf1c8/gcc%2Fc-family%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c72d471469456d75af95621fb2234f8706adf1c8/gcc%2Fc-family%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2FChangeLog?ref=c72d471469456d75af95621fb2234f8706adf1c8", "patch": "@@ -1,3 +1,9 @@\n+2022-07-11  Lewis Hyatt  <lhyatt@gmail.com>\n+\n+\tPR preprocessor/106252\n+\t* c-pragma.cc (handle_pragma_diagnostic_impl): Don't look up the\n+\toption argument prior to verifying the option was found.\n+\n 2022-07-07  David Malcolm  <dmalcolm@redhat.com>\n \n \t* c-format.cc (range_label_for_format_type_mismatch::get_text):"}, {"sha": "7b95680a8b9158c20d453b6829664bf627f21411", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c72d471469456d75af95621fb2234f8706adf1c8/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c72d471469456d75af95621fb2234f8706adf1c8/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=c72d471469456d75af95621fb2234f8706adf1c8", "patch": "@@ -1,3 +1,27 @@\n+2022-07-11  Roger Sayle  <roger@nextmovesoftware.com>\n+\n+\t* gcc.target/i386/sse4_1-stv-2.c: New test case, pand.\n+\t* gcc.target/i386/sse4_1-stv-3.c: New test case, por.\n+\t* gcc.target/i386/sse4_1-stv-4.c: New test case, pxor.\n+\t* gcc.target/i386/sse4_1-stv-5.c: New test case, pandn.\n+\t* gcc.target/i386/sse4_1-stv-6.c: New test case, ptest.\n+\n+2022-07-11  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\tPR tree-optimization/106250\n+\t* gcc.dg/vect/pr106250.c: New file.\n+\n+2022-07-11  Thomas Schwinge  <thomas@codesourcery.com>\n+\n+\t* c-c++-common/gomp/pragma-3.c: Enhance '_Pragma' diagnostics\n+\tverification.\n+\t* c-c++-common/gomp/pragma-5.c: Likewise.\n+\n+2022-07-11  Richard Biener  <rguenthert@suse.de>\n+\n+\tPR target/105459\n+\t* gcc.dg/lto/pr105459_0.c: New testcase.\n+\n 2022-07-10  Lewis Hyatt  <lhyatt@gmail.com>\n \n \tPR preprocessor/97498"}, {"sha": "f2a282cd675f9d42585b70e637dcbf2e9e16e252", "filename": "libgomp/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c72d471469456d75af95621fb2234f8706adf1c8/libgomp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c72d471469456d75af95621fb2234f8706adf1c8/libgomp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2FChangeLog?ref=c72d471469456d75af95621fb2234f8706adf1c8", "patch": "@@ -1,3 +1,8 @@\n+2022-07-11  Thomas Schwinge  <thomas@codesourcery.com>\n+\n+\t* testsuite/libgomp.oacc-c-c++-common/reduction-5.c: Enhance\n+\t'_Pragma' diagnostics verification.\n+\n 2022-07-10  Lewis Hyatt  <lhyatt@gmail.com>\n \n \t* testsuite/libgomp.oacc-c-c++-common/reduction-5.c: Adapt for"}]}