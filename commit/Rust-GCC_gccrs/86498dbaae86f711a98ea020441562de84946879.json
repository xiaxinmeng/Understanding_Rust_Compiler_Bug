{"sha": "86498dbaae86f711a98ea020441562de84946879", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODY0OThkYmFhZTg2ZjcxMWE5OGVhMDIwNDQxNTYyZGU4NDk0Njg3OQ==", "commit": {"author": {"name": "Ajit Agarwal", "email": "ajitkum@xilinx.com", "date": "2014-05-17T15:12:38Z"}, "committer": {"name": "Michael Eager", "email": "eager@gcc.gnu.org", "date": "2014-05-17T15:12:38Z"}, "message": "ChangeLog:\n\n2014-05-17 Ajit Agarwal <ajitkum@xilinx.com>\n\n * config/microblaze/microblaze.c\n   (break_handler): New Declaration.\n   (microblaze_break_function_p,microblaze_is_break_handler) : New functions.\n   (compute_frame_size): use of microblaze_break_function_p. Add the test of break_handler.\n   (microblaze_function_prologue) : Add the test of variable\n   break_handler. Check the fnname by BREAK_HANDLER_NAME.\n   (microblaze_function_epilogue) : Add the test of break_handler.\n   (microblaze_globalize_label) : Add the test of break_handler. Check the\n   name by BREAK_HANDLER_NAME.\n\n * config/microblaze/microblaze.h (BREAK_HANDLER_NAME) : New macro\n\n * config/microblaze/microblaze.md :\n   (*<optab>,<optab>_internal): Add microblaze_is_break_handler () test.\n   (call_internal1,call_value_intern) : Use of microblaze_break_function_p.\n   Use of SYMBOL_REF_DECL.\n\n * config/microblaze/microblaze-protos.h\n   (microblaze_break_function_p,microblaze_is_break_handler) : New Declaration.\n\n * testsuite/gcc.target/microblaze/others/break_handler.c : New.\n\n * doc/extend.texi( MicroBlaze break_handler Functions): Document new\n   MicroBlaze break_handler functions.\n\nFrom-SVN: r210559", "tree": {"sha": "b594c0ab7cce86755578cc61bfda61439424797a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b594c0ab7cce86755578cc61bfda61439424797a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/86498dbaae86f711a98ea020441562de84946879", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/86498dbaae86f711a98ea020441562de84946879", "html_url": "https://github.com/Rust-GCC/gccrs/commit/86498dbaae86f711a98ea020441562de84946879", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/86498dbaae86f711a98ea020441562de84946879/comments", "author": null, "committer": null, "parents": [{"sha": "a0eaa08cebd801a6a1d340dfd71b0183c510f599", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a0eaa08cebd801a6a1d340dfd71b0183c510f599", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a0eaa08cebd801a6a1d340dfd71b0183c510f599"}], "stats": {"total": 132, "additions": 118, "deletions": 14}, "files": [{"sha": "fa738a524ccb04b9bc76f9f63f558b68a792dfd2", "filename": "gcc/ChangeLog", "status": "modified", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/86498dbaae86f711a98ea020441562de84946879/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/86498dbaae86f711a98ea020441562de84946879/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=86498dbaae86f711a98ea020441562de84946879", "patch": "@@ -1,3 +1,31 @@\n+2014-05-17  Ajit Agarwal <ajitkum@xilinx.com>\n+\n+\t* config/microblaze/microblaze.c\n+\t  (break_handler): New Declaration.\n+\t  (microblaze_break_function_p,microblaze_is_break_handler): New.\n+\t  (compute_frame_size): use of microblaze_break_function_p. Add \n+\t    the test of break_handler.\n+\t  (microblaze_function_prologue) : Add the test of variable\n+\t  break_handler. Check the fnname by BREAK_HANDLER_NAME.\n+\t  (microblaze_function_epilogue) : Add the test of break_handler.\n+\t  (microblaze_globalize_label) : Add the test of break_handler. Check the\n+\t  name by BREAK_HANDLER_NAME.\n+\n+\t* config/microblaze/microblaze.h (BREAK_HANDLER_NAME) : New macro\n+\n+\t* config/microblaze/microblaze.md :\n+\t  (*<optab>,<optab>_internal): Add microblaze_is_break_handler () test.\n+\t  (call_internal1,call_value_intern) : Use of microblaze_break_function_p.\n+\t  Use of SYMBOL_REF_DECL.\n+\n+\t* config/microblaze/microblaze-protos.h\n+\t  (microblaze_break_function_p,microblaze_is_break_handler) : New Declaration.\n+\n+\t* testsuite/gcc.target/microblaze/others/break_handler.c : New.\n+\n+\t* doc/extend.texi (MicroBlaze break_handler Functions): Document new\n+\t  MicroBlaze break_handler functions.\n+\n 2014-05-17  Uros Bizjak  <ubizjak@gmail.com>\n \n \t* doc/extend.texi (Size of an asm): Move node text according"}, {"sha": "f3cc0991ae01c823b026389612350b70f8c1bc99", "filename": "gcc/config/microblaze/microblaze-protos.h", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/86498dbaae86f711a98ea020441562de84946879/gcc%2Fconfig%2Fmicroblaze%2Fmicroblaze-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/86498dbaae86f711a98ea020441562de84946879/gcc%2Fconfig%2Fmicroblaze%2Fmicroblaze-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmicroblaze%2Fmicroblaze-protos.h?ref=86498dbaae86f711a98ea020441562de84946879", "patch": "@@ -40,10 +40,12 @@ extern void print_operand_address (FILE *, rtx);\n extern void init_cumulative_args (CUMULATIVE_ARGS *,tree, rtx);\n extern bool microblaze_legitimate_address_p (enum machine_mode, rtx, bool);\n extern int microblaze_is_interrupt_variant (void);\n+extern int microblaze_is_break_handler (void);\n+extern int microblaze_break_function_p (tree func);\n extern rtx microblaze_return_addr (int, rtx);\n extern int simple_memory_operand (rtx, enum machine_mode);\n extern int double_memory_operand (rtx, enum machine_mode);\n-\n+extern void microblaze_order_regs_for_local_alloc (void);\n extern int microblaze_regno_ok_for_base_p (int, int);\n extern HOST_WIDE_INT microblaze_initial_elimination_offset (int, int);\n extern void microblaze_declare_object (FILE *, const char *, const char *,"}, {"sha": "b12b7bf047f633fa2bc9a279568509f428cc18a0", "filename": "gcc/config/microblaze/microblaze.c", "status": "modified", "additions": 36, "deletions": 4, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/86498dbaae86f711a98ea020441562de84946879/gcc%2Fconfig%2Fmicroblaze%2Fmicroblaze.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/86498dbaae86f711a98ea020441562de84946879/gcc%2Fconfig%2Fmicroblaze%2Fmicroblaze.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmicroblaze%2Fmicroblaze.c?ref=86498dbaae86f711a98ea020441562de84946879", "patch": "@@ -209,6 +209,7 @@ enum reg_class microblaze_regno_to_class[] =\n \t\t       and epilogue and use appropriate interrupt return.\n    save_volatiles    - Similar to interrupt handler, but use normal return.  */\n int interrupt_handler;\n+int break_handler;\n int fast_interrupt;\n int save_volatiles;\n \n@@ -217,6 +218,8 @@ const struct attribute_spec microblaze_attribute_table[] = {\n      affects_type_identity */\n   {\"interrupt_handler\", 0,       0,     true,    false,   false,        NULL,\n     false },\n+  {\"break_handler\",     0,       0,     true,    false,   false,        NULL,\n+    false },\n   {\"fast_interrupt\",    0,       0,     true,    false,   false,        NULL,\n     false },\n   {\"save_volatiles\"   , 0,       0,     true,    false,   false,        NULL,\n@@ -1866,7 +1869,18 @@ microblaze_fast_interrupt_function_p (tree func)\n   a = lookup_attribute (\"fast_interrupt\", DECL_ATTRIBUTES (func));\n   return a != NULL_TREE;\n }\n+int\n+microblaze_break_function_p (tree func)\n+{\n+  tree a;\n+  if (!func)\n+    return 0;\n+  if (TREE_CODE (func) != FUNCTION_DECL)\n+    return 0;\n \n+  a = lookup_attribute (\"break_handler\", DECL_ATTRIBUTES (func));\n+  return a != NULL_TREE;\n+}\n /* Return true if FUNC is an interrupt function which uses\n    normal return, indicated by the \"save_volatiles\" attribute.  */\n \n@@ -1891,6 +1905,11 @@ microblaze_is_interrupt_variant (void)\n {\n   return (interrupt_handler || fast_interrupt);\n }\n+int\n+microblaze_is_break_handler (void)\n+{\n+  return break_handler;\n+}\n \n /* Determine of register must be saved/restored in call.  */\n static int\n@@ -1994,9 +2013,14 @@ compute_frame_size (HOST_WIDE_INT size)\n \n   interrupt_handler =\n     microblaze_interrupt_function_p (current_function_decl);\n+  break_handler =\n+    microblaze_break_function_p (current_function_decl);\n+\n   fast_interrupt =\n     microblaze_fast_interrupt_function_p (current_function_decl);\n   save_volatiles = microblaze_save_volatiles (current_function_decl);\n+  if (break_handler)\n+    interrupt_handler = break_handler;\n \n   gp_reg_size = 0;\n   mask = 0;\n@@ -2641,9 +2665,11 @@ microblaze_function_prologue (FILE * file, HOST_WIDE_INT size ATTRIBUTE_UNUSED)\n     {\n       fputs (\"\\t.ent\\t\", file);\n       if (interrupt_handler && strcmp (INTERRUPT_HANDLER_NAME, fnname))\n-\tfputs (\"_interrupt_handler\", file);\n+        fputs (\"_interrupt_handler\", file);\n+      else if (break_handler && strcmp (BREAK_HANDLER_NAME, fnname))\n+\tfputs (\"_break_handler\", file);\n       else if (fast_interrupt && strcmp (FAST_INTERRUPT_NAME, fnname))\n-\tfputs (\"_fast_interrupt\", file);\n+        fputs (\"_fast_interrupt\", file);\n       else\n \tassemble_name (file, fnname);\n       fputs (\"\\n\", file);\n@@ -2656,7 +2682,8 @@ microblaze_function_prologue (FILE * file, HOST_WIDE_INT size ATTRIBUTE_UNUSED)\n \n   if (interrupt_handler && strcmp (INTERRUPT_HANDLER_NAME, fnname))\n     fputs (\"_interrupt_handler:\\n\", file);\n-\n+  if (break_handler && strcmp (BREAK_HANDLER_NAME, fnname))\n+    fputs (\"_break_handler:\\n\", file);\n   if (!flag_inhibit_size_directive)\n     {\n       /* .frame FRAMEREG, FRAMESIZE, RETREG.  */\n@@ -2791,6 +2818,7 @@ microblaze_expand_prologue (void)\n   if (flag_stack_usage_info)\n     current_function_static_stack_size = fsiz;\n \n+\n   /* If this function is a varargs function, store any registers that\n      would normally hold arguments ($5 - $10) on the stack.  */\n   if (((TYPE_ARG_TYPES (fntype) != 0\n@@ -2892,8 +2920,10 @@ microblaze_function_epilogue (FILE * file ATTRIBUTE_UNUSED,\n   if (!flag_inhibit_size_directive)\n     {\n       fputs (\"\\t.end\\t\", file);\n-      if (interrupt_handler)\n+      if (interrupt_handler && !break_handler)\n \tfputs (\"_interrupt_handler\", file);\n+      else if (break_handler)\n+        fputs (\"_break_handler\", file);\n       else\n \tassemble_name (file, fnname);\n       fputs (\"\\n\", file);\n@@ -3007,6 +3037,8 @@ microblaze_globalize_label (FILE * stream, const char *name)\n     {\n       if (interrupt_handler && strcmp (name, INTERRUPT_HANDLER_NAME))\n         fputs (INTERRUPT_HANDLER_NAME, stream);\n+      else if (break_handler && strcmp (name, BREAK_HANDLER_NAME))\n+        fputs (BREAK_HANDLER_NAME, stream);\n       else if (fast_interrupt && strcmp (name, FAST_INTERRUPT_NAME))\n         fputs (FAST_INTERRUPT_NAME, stream);\n       fputs (\"\\n\\t.globl\\t\", stream);"}, {"sha": "edb7d8aaab88b510bc523c94a1250f62be24b9ac", "filename": "gcc/config/microblaze/microblaze.h", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/86498dbaae86f711a98ea020441562de84946879/gcc%2Fconfig%2Fmicroblaze%2Fmicroblaze.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/86498dbaae86f711a98ea020441562de84946879/gcc%2Fconfig%2Fmicroblaze%2Fmicroblaze.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmicroblaze%2Fmicroblaze.h?ref=86498dbaae86f711a98ea020441562de84946879", "patch": "@@ -263,7 +263,6 @@ extern enum pipeline_type microblaze_pipe;\n   1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\t\t\t\\\n   1, 1, 1, 1\t\t\t\t\t\t\t\t\\\n }\n-\n #define GP_REG_FIRST    0\n #define GP_REG_LAST     31\n #define GP_REG_NUM      (GP_REG_LAST - GP_REG_FIRST + 1)\n@@ -763,6 +762,10 @@ extern int fast_interrupt;\n extern int save_volatiles;\n \n #define INTERRUPT_HANDLER_NAME \"_interrupt_handler\"\n+/* The function name for the function tagged with attribute break_handler\n+   has been set in the RTL as _break_handler. This function name is used\n+   in the generation of directives .ent .end and .global. */\n+#define BREAK_HANDLER_NAME \"_break_handler\"\n #define FAST_INTERRUPT_NAME \"_fast_interrupt\"\n \n /* The following #defines are used in the headers files. Always retain these.  */"}, {"sha": "7945d96b794e84aef6ac6b987e50485c894a2941", "filename": "gcc/config/microblaze/microblaze.md", "status": "modified", "additions": 20, "deletions": 8, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/86498dbaae86f711a98ea020441562de84946879/gcc%2Fconfig%2Fmicroblaze%2Fmicroblaze.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/86498dbaae86f711a98ea020441562de84946879/gcc%2Fconfig%2Fmicroblaze%2Fmicroblaze.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmicroblaze%2Fmicroblaze.md?ref=86498dbaae86f711a98ea020441562de84946879", "patch": "@@ -1945,8 +1945,10 @@\n (define_insn \"*<optab>\"\n   [(any_return)]\n   \"\"\n-  { \n-    if (microblaze_is_interrupt_variant ())\n+  {\n+    if (microblaze_is_break_handler ())\n+        return \"rtbd\\tr16, 8\\;%#\";\n+    else if (microblaze_is_interrupt_variant ())\n         return \"rtid\\tr14, 0\\;%#\";\n     else\n         return \"rtsd\\tr15, 8\\;%#\";\n@@ -1962,8 +1964,10 @@\n   [(any_return)\n    (use (match_operand:SI 0 \"register_operand\" \"\"))]\n   \"\"\n-  {\t\n-    if (microblaze_is_interrupt_variant ())\n+  {\n+    if (microblaze_is_break_handler ())\n+        return \"rtbd\\tr16,8\\;%#\";\n+    else if (microblaze_is_interrupt_variant ())\n         return \"rtid\\tr14,0 \\;%#\";\n     else\n         return \"rtsd\\tr15,8 \\;%#\";\n@@ -2068,8 +2072,14 @@\n     register rtx target2 = gen_rtx_REG (Pmode,\n \t\t\t      GP_REG_FIRST + MB_ABI_SUB_RETURN_ADDR_REGNUM);\n     if (GET_CODE (target) == SYMBOL_REF) {\n-        gen_rtx_CLOBBER (VOIDmode, target2);\n-        return \"brlid\\tr15,%0\\;%#\";\n+        if (microblaze_break_function_p (SYMBOL_REF_DECL (target))) {\n+            gen_rtx_CLOBBER (VOIDmode, target2);\n+            return \"brki\\tr16,%0\\;%#\";\n+        }\n+        else {\n+            gen_rtx_CLOBBER (VOIDmode, target2);\n+            return \"brlid\\tr15,%0\\;%#\";\n+        }\n     } else if (GET_CODE (target) == CONST_INT)\n         return \"la\\t%@,r0,%0\\;brald\\tr15,%@\\;%#\";\n     else if (GET_CODE (target) == REG)\n@@ -2173,13 +2183,15 @@\n     if (GET_CODE (target) == SYMBOL_REF)\n     {\n       gen_rtx_CLOBBER (VOIDmode,target2);\n-      if (SYMBOL_REF_FLAGS (target) & SYMBOL_FLAG_FUNCTION)\n+      if (microblaze_break_function_p (SYMBOL_REF_DECL (target)))\n+        return \"brki\\tr16,%1\\;%#\";\n+      else if (SYMBOL_REF_FLAGS (target) & SYMBOL_FLAG_FUNCTION)\n         {\n \t  return \"brlid\\tr15,%1\\;%#\";\n         }\n       else\n         {\n-\t  return \"bralid\\tr15,%1\\;%#\";\n+\t    return \"bralid\\tr15,%1\\;%#\";\n         }\n     }\n     else if (GET_CODE (target) == CONST_INT)"}, {"sha": "31a48dd82cb2113ca715fa8e64836e6352d60a9d", "filename": "gcc/doc/extend.texi", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/86498dbaae86f711a98ea020441562de84946879/gcc%2Fdoc%2Fextend.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/86498dbaae86f711a98ea020441562de84946879/gcc%2Fdoc%2Fextend.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fextend.texi?ref=86498dbaae86f711a98ea020441562de84946879", "patch": "@@ -3772,6 +3772,18 @@ registers) are saved in the function prologue.  If the function is a leaf\n function, only volatiles used by the function are saved.  A normal function\n return is generated instead of a return from interrupt.\n \n+@item break_handler\n+@cindex break handler functions\n+Use this attribute on the MicroBlaze ports to indicate that\n+the specified function is an break handler.  The compiler generates function\n+entry and exit sequences suitable for use in an break handler when this\n+attribute is present. The return from @code{break_handler} is done through\n+the @code{rtbd} instead of @code{rtsd}.\n+\n+@smallexample\n+void f () __attribute__ ((break_handler));\n+@end smallexample\n+\n @item section (\"@var{section-name}\")\n @cindex @code{section} function attribute\n Normally, the compiler places the code it generates in the @code{text} section."}, {"sha": "1ccafd0640810ab7391392fb26670124a5332db8", "filename": "gcc/testsuite/gcc.target/microblaze/others/break_handler.c", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/86498dbaae86f711a98ea020441562de84946879/gcc%2Ftestsuite%2Fgcc.target%2Fmicroblaze%2Fothers%2Fbreak_handler.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/86498dbaae86f711a98ea020441562de84946879/gcc%2Ftestsuite%2Fgcc.target%2Fmicroblaze%2Fothers%2Fbreak_handler.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fmicroblaze%2Fothers%2Fbreak_handler.c?ref=86498dbaae86f711a98ea020441562de84946879", "patch": "@@ -0,0 +1,15 @@\n+int func () __attribute__ ((break_handler));\n+volatile int intr_occurred;\n+\n+int func ()\n+{\n+\n+  /* { dg-final { scan-assembler \"rtbd\\tr(\\[0-9]\\|\\[1-2]\\[0-9]\\|3\\[0-1]),8\" } } */\n+    intr_occurred += 1;\n+}\n+int main()\n+{\n+    /* { dg-final { scan-assembler \"brki\\tr16\" } } */\n+    func();\n+    return 0;\n+}"}]}