{"sha": "d7db66465081020447daa7e7feec774440d00f96", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDdkYjY2NDY1MDgxMDIwNDQ3ZGFhN2U3ZmVlYzc3NDQ0MGQwMGY5Ng==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@cygnus.com", "date": "1999-09-05T03:49:52Z"}, "committer": {"name": "Mark Mitchell", "email": "mmitchel@gcc.gnu.org", "date": "1999-09-05T03:49:52Z"}, "message": "Makefile.in (stor-layout.o): Depend on ggc.h.\n\n\t* Makefile.in (stor-layout.o): Depend on ggc.h.\n\t(expr.o): Depend on ggc.h.\n\t(profile.o): Depend on ggc.h.\n\t(stor-layout.o): Depend on ggc.h.\n\t* emit-rtl.c (init_emit_once): Add gc roots.\n\t* expr.c: Include ggc.h.\n\t(emit_block_move): Add gc roots.\n\t(clear_storage): Likewise.\n\t* expr.h (init_stor_layout_once): New function.\n\t* profile.c: Include ggc.h.\n\t(init_arc_profiler): profiler_label is a root.\n\t* scan.c (make_sstring_space): Trust xrealloc to function\n\tcorrectly with first parameter NULL.\n\t* stor-layout.c: Include ggc.h.\n\t(set_sizetype): Add gc root.\n\t(init_stor_layout_once): New function.\n\t* toplev.c (compile_file): Call it.\n\nCo-Authored-By: Bernd Schmidt <bernds@cygnus.co.uk>\nCo-Authored-By: Mark Mitchell <mark@codesourcery.com>\n\nFrom-SVN: r29122", "tree": {"sha": "2c396fe4710d0e39b742d734bf2a7abf16783c92", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2c396fe4710d0e39b742d734bf2a7abf16783c92"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d7db66465081020447daa7e7feec774440d00f96", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d7db66465081020447daa7e7feec774440d00f96", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d7db66465081020447daa7e7feec774440d00f96", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d7db66465081020447daa7e7feec774440d00f96/comments", "author": null, "committer": null, "parents": [{"sha": "b224278904bb35e3aa54856b124e53fd3c0b3065", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b224278904bb35e3aa54856b124e53fd3c0b3065", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b224278904bb35e3aa54856b124e53fd3c0b3065"}], "stats": {"total": 65, "additions": 58, "deletions": 7}, "files": [{"sha": "f3f3008f676be61e9b6e8cfcbf295d9381d80678", "filename": "gcc/ChangeLog", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d7db66465081020447daa7e7feec774440d00f96/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d7db66465081020447daa7e7feec774440d00f96/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=d7db66465081020447daa7e7feec774440d00f96", "patch": "@@ -1,3 +1,25 @@\n+Sat Sep  4 20:40:19 1999  Richard Henderson  <rth@cygnus.com>\n+\t                  Bernd Schmidt <bernds@cygnus.co.uk>\n+\t                  Mark Mitchell  <mark@codesourcery.com>\n+\n+\t* Makefile.in (stor-layout.o): Depend on ggc.h.\n+\t(expr.o): Depend on ggc.h.\n+\t(profile.o): Depend on ggc.h.\n+\t(stor-layout.o): Depend on ggc.h.\n+\t* emit-rtl.c (init_emit_once): Add gc roots.\n+\t* expr.c: Include ggc.h.\n+\t(emit_block_move): Add gc roots.\n+\t(clear_storage): Likewise.\n+\t* expr.h (init_stor_layout_once): New function.\n+\t* profile.c: Include ggc.h.\n+\t(init_arc_profiler): profiler_label is a root.\n+\t* scan.c (make_sstring_space): Trust xrealloc to function\n+\tcorrectly with first parameter NULL.\n+\t* stor-layout.c: Include ggc.h.\n+\t(set_sizetype): Add gc root.\n+\t(init_stor_layout_once): New function.\n+\t* toplev.c (compile_file): Call it.\n+\t\n Sat Sep  4 19:26:25 1999  Richard Henderson  <rth@cygnus.com>\n \t                  Bernd Schmidt <bernds@cygnus.co.uk>\n \t\t\t  Mark Mitchell  <mark@codesourcery.com>"}, {"sha": "789bd0b434b0475c1069d3a7d360a419c3029a6b", "filename": "gcc/Makefile.in", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d7db66465081020447daa7e7feec774440d00f96/gcc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d7db66465081020447daa7e7feec774440d00f96/gcc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FMakefile.in?ref=d7db66465081020447daa7e7feec774440d00f96", "patch": "@@ -1454,7 +1454,7 @@ tree.o : tree.c $(CONFIG_H) system.h $(TREE_H) flags.h function.h toplev.h \\\n    ggc.h\n print-tree.o : print-tree.c $(CONFIG_H) system.h $(TREE_H)\n stor-layout.o : stor-layout.c $(CONFIG_H) system.h $(TREE_H) flags.h \\\n-   function.h $(EXPR_H) $(RTL_H) toplev.h\n+   function.h $(EXPR_H) $(RTL_H) toplev.h ggc.h\n fold-const.o : fold-const.c $(CONFIG_H) system.h $(TREE_H) flags.h toplev.h \\\n    $(RTL_H)\n toplev.o : toplev.c $(CONFIG_H) system.h $(TREE_H) $(RTL_H) function.h \\\n@@ -1486,7 +1486,8 @@ except.o : except.c $(CONFIG_H) system.h $(RTL_H) $(TREE_H) flags.h \\\n    insn-config.h $(RECOG_H) output.h except.h toplev.h intl.h ggc.h\n expr.o : expr.c $(CONFIG_H) system.h $(RTL_H) $(TREE_H) flags.h function.h \\\n    $(REGS_H) insn-flags.h insn-codes.h $(EXPR_H) insn-config.h $(RECOG_H) \\\n-   output.h typeclass.h hard-reg-set.h toplev.h hard-reg-set.h except.h\n+   output.h typeclass.h hard-reg-set.h toplev.h hard-reg-set.h except.h \\\n+   ggc.h\n builtins.o : builtins.c $(CONFIG_H) system.h $(RTL_H) $(TREE_H) flags.h \\\n    function.h $(REGS_H) insn-flags.h insn-codes.h $(EXPR_H) insn-config.h \\\n    $(RECOG_H) output.h typeclass.h hard-reg-set.h toplev.h hard-reg-set.h \\\n@@ -1541,7 +1542,8 @@ resource.o : resource.c $(CONFIG_H) $(RTL_H) hard-reg-set.h system.h \\\n lcm.o : lcm.c $(CONFIG_H) system.h $(RTL_H) $(REGS_H) hard-reg-set.h flags.h \\\n    real.h insn-config.h $(RECOG_H) $(EXPR_H) $(BASIC_BLOCK_H)\n profile.o : profile.c $(CONFIG_H) system.h $(RTL_H) flags.h insn-flags.h \\\n-   gcov-io.h $(TREE_H) output.h $(REGS_H) toplev.h function.h insn-config.h\n+   gcov-io.h $(TREE_H) output.h $(REGS_H) toplev.h function.h insn-config.h \\\n+   ggc.h\n loop.o : loop.c $(CONFIG_H) system.h $(RTL_H) flags.h loop.h insn-config.h \\\n    insn-flags.h $(REGS_H) hard-reg-set.h $(RECOG_H) $(EXPR_H) real.h \\\n    function.h toplev.h varray.h"}, {"sha": "0b2c10de0703786995aada7c38d40f21656f56ef", "filename": "gcc/emit-rtl.c", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d7db66465081020447daa7e7feec774440d00f96/gcc%2Femit-rtl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d7db66465081020447daa7e7feec774440d00f96/gcc%2Femit-rtl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Femit-rtl.c?ref=d7db66465081020447daa7e7feec774440d00f96", "patch": "@@ -3685,6 +3685,15 @@ init_emit_once (line_numbers)\n      init_function_start.  */\n   INIT_EXPANDERS;\n #endif\n+\n+  ggc_add_rtx_root (&const_tiny_rtx[0][0], sizeof(const_tiny_rtx)/sizeof(rtx));\n+\n+  ggc_add_rtx_root (&pic_offset_table_rtx, 1);\n+  ggc_add_rtx_root (&struct_value_rtx, 1);\n+  ggc_add_rtx_root (&struct_value_incoming_rtx, 1);\n+  ggc_add_rtx_root (&static_chain_rtx, 1);\n+  ggc_add_rtx_root (&static_chain_incoming_rtx, 1);\n+  ggc_add_rtx_root (&return_address_pointer_rtx, 1);\n }\n \f\n /* Query and clear/ restore no_line_numbers.  This is used by the"}, {"sha": "315945a15f9ab39b5f47bd2a391934cb29b8839e", "filename": "gcc/expr.c", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d7db66465081020447daa7e7feec774440d00f96/gcc%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d7db66465081020447daa7e7feec774440d00f96/gcc%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpr.c?ref=d7db66465081020447daa7e7feec774440d00f96", "patch": "@@ -40,6 +40,7 @@ Boston, MA 02111-1307, USA.  */\n #include \"typeclass.h\"\n #include \"defaults.h\"\n #include \"toplev.h\"\n+#include \"ggc.h\"\n \n #define CEIL(x,y) (((x) + (y) - 1) / (y))\n \n@@ -1677,6 +1678,7 @@ emit_block_move (x, y, size, align)\n \t  fntype = build_pointer_type (void_type_node);\n \t  fntype = build_function_type (fntype, NULL_TREE);\n \t  fn = build_decl (FUNCTION_DECL, fn, fntype);\n+ \t  ggc_add_tree_root (&fn, 1);\n \t  DECL_EXTERNAL (fn) = 1;\n \t  TREE_PUBLIC (fn) = 1;\n \t  DECL_ARTIFICIAL (fn) = 1;\n@@ -2451,6 +2453,7 @@ clear_storage (object, size, align)\n \t      fntype = build_pointer_type (void_type_node);\n \t      fntype = build_function_type (fntype, NULL_TREE);\n \t      fn = build_decl (FUNCTION_DECL, fn, fntype);\n+\t      ggc_add_tree_root (&fn, 1);\n \t      DECL_EXTERNAL (fn) = 1;\n \t      TREE_PUBLIC (fn) = 1;\n \t      DECL_ARTIFICIAL (fn) = 1;"}, {"sha": "958412e6c986a1c372e009f67c8c1eb3864f5d42", "filename": "gcc/expr.h", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d7db66465081020447daa7e7feec774440d00f96/gcc%2Fexpr.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d7db66465081020447daa7e7feec774440d00f96/gcc%2Fexpr.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpr.h?ref=d7db66465081020447daa7e7feec774440d00f96", "patch": "@@ -878,6 +878,10 @@ extern void init_expr_once PROTO((void));\n /* This is run at the start of compiling a function.  */\n extern void init_expr PROTO((void));\n \n+/* This function is run once to initialize stor-layout.c.  */\n+\n+extern void init_stor_layout_once PROTO((void));\n+\n /* This is run at the end of compiling a function.  */\n extern void finish_expr_for_function PROTO((void));\n "}, {"sha": "98be128a027f847d0d724ee9d9474f5de48bd889", "filename": "gcc/profile.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d7db66465081020447daa7e7feec774440d00f96/gcc%2Fprofile.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d7db66465081020447daa7e7feec774440d00f96/gcc%2Fprofile.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fprofile.c?ref=d7db66465081020447daa7e7feec774440d00f96", "patch": "@@ -54,6 +54,7 @@ Boston, MA 02111-1307, USA.  */\n #include \"output.h\"\n #include \"gcov-io.h\"\n #include \"toplev.h\"\n+#include \"ggc.h\"\n \n /* One of these is dynamically created whenever we identify an arc in the\n    function.  */\n@@ -1544,6 +1545,7 @@ init_arc_profiler ()\n   char *name = xmalloc (20);\n   ASM_GENERATE_INTERNAL_LABEL (name, \"LPBX\", 2);\n   profiler_label = gen_rtx_SYMBOL_REF (Pmode, name);\n+  ggc_add_rtx_root (&profiler_label, 1);\n }\n \n /* Output instructions as RTL to increment the arc execution count.  */"}, {"sha": "24dd6632f3512749ab4e3fae7a01814c4f4cb23e", "filename": "gcc/scan.c", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d7db66465081020447daa7e7feec774440d00f96/gcc%2Fscan.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d7db66465081020447daa7e7feec774440d00f96/gcc%2Fscan.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fscan.c?ref=d7db66465081020447daa7e7feec774440d00f96", "patch": "@@ -35,10 +35,7 @@ make_sstring_space (str, count)\n   if (new_size <= cur_size)\n     return;\n   \n-  if (str->base == NULL)\n-    str->base = xmalloc (new_size);\n-  else\n-    str->base = xrealloc (str->base, new_size);\n+  str->base = xrealloc (str->base, new_size);\n   str->ptr = str->base + cur_size;\n   str->limit = str->base + new_size;\n }"}, {"sha": "7c94f40153875e91b67c77457ae369921c5502d0", "filename": "gcc/stor-layout.c", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d7db66465081020447daa7e7feec774440d00f96/gcc%2Fstor-layout.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d7db66465081020447daa7e7feec774440d00f96/gcc%2Fstor-layout.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fstor-layout.c?ref=d7db66465081020447daa7e7feec774440d00f96", "patch": "@@ -28,6 +28,7 @@ Boston, MA 02111-1307, USA.  */\n #include \"function.h\"\n #include \"expr.h\"\n #include \"toplev.h\"\n+#include \"ggc.h\"\n \n #define CEIL(x,y) (((x) + (y) - 1) / (y))\n \n@@ -1256,6 +1257,8 @@ set_sizetype (type)\n       usizetype = make_unsigned_type (oprecision);\n       ubitsizetype = make_unsigned_type (precision);\n     }\n+\n+  ggc_add_tree_root ((tree*) &sizetype_tab, sizeof(sizetype_tab)/sizeof(tree));\n }\n \n /* Set the extreme values of TYPE based on its precision in bits,\n@@ -1387,3 +1390,11 @@ get_best_mode (bitsize, bitpos, align, largest_mode, volatilep)\n \n   return mode;\n }\n+\n+/* This function is run once to initialize stor-layout.c.  */\n+\n+void\n+init_stor_layout_once ()\n+{\n+  ggc_add_tree_root (&pending_sizes, 1);\n+}"}, {"sha": "becdfe06c4948f300276e387436733bdd73cbb26", "filename": "gcc/toplev.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d7db66465081020447daa7e7feec774440d00f96/gcc%2Ftoplev.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d7db66465081020447daa7e7feec774440d00f96/gcc%2Ftoplev.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftoplev.c?ref=d7db66465081020447daa7e7feec774440d00f96", "patch": "@@ -2936,6 +2936,7 @@ compile_file (name)\n   init_reload ();\n   init_alias_once ();\n   init_function_once ();\n+  init_stor_layout_once ();\n \n   /* The following initialization functions need to generate rtl, so\n      provide a dummy function context for them.  */"}]}