{"sha": "58f2fb5ca16a39f3af10dee718d87335b3cd5222", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NThmMmZiNWNhMTZhMzlmM2FmMTBkZWU3MThkODczMzViM2NkNTIyMg==", "commit": {"author": {"name": "Michael Meissner", "email": "meissner@linux.vnet.ibm.com", "date": "2016-06-01T20:09:35Z"}, "committer": {"name": "Michael Meissner", "email": "meissner@gcc.gnu.org", "date": "2016-06-01T20:09:35Z"}, "message": "re PR target/71186 (PowerPC64: Autovectorised code hits ICE with -O3 -mpower9 -mlra)\n\n[gcc]\n2016-05-31  Michael Meissner  <meissner@linux.vnet.ibm.com>\n\n\tPR target/71186\n\t* config/rs6000/vsx.md (xxspltib_<mode>_nosplit): Add alternatives\n\tfor loading up all 0's or all 1's.\n\n[gcc/testsuite]\n2016-05-31  Michael Meissner  <meissner@linux.vnet.ibm.com>\n\n\tPR target/71186\n\t* gcc.target/powerpc/pr71186.c: New test.\n\nIndex: gcc/config/rs6000/vsx.md\n===================================================================\n--- gcc/config/rs6000/vsx.md\t(.../svn+ssh://meissner@gcc.gnu.org/svn/gcc/trunk/gcc/config/rs6000)\t(revision 236935)\n+++ gcc/config/rs6000/vsx.md\t(.../gcc/config/rs6000)\t(working copy)\n@@ -776,8 +776,8 @@ (define_insn \"xxspltib_v16qi\"\n   [(set_attr \"type\" \"vecperm\")])\n \n (define_insn \"xxspltib_<mode>_nosplit\"\n-  [(set (match_operand:VSINT_842 0 \"vsx_register_operand\" \"=wa\")\n-\t(match_operand:VSINT_842 1 \"xxspltib_constant_nosplit\" \"wE\"))]\n+  [(set (match_operand:VSINT_842 0 \"vsx_register_operand\" \"=wa,wa\")\n+\t(match_operand:VSINT_842 1 \"xxspltib_constant_nosplit\" \"jwM,wE\"))]\n   \"TARGET_P9_VECTOR\"\n {\n   rtx op1 = operands[1];\n\n[gcc]\n2016-05-31  Michael Meissner  <meissner@linux.vnet.ibm.com>\n\n\t* config/rs6000/vsx.md (vsx_splat_<mode>, V2DI/V2DF): Simplify\n\talternatives, eliminating preferred register class.  Add support\n\tfor the MTVSRDD instruction in ISA 3.0.\n\t(vsx_splat_v4si_internal): Use splat_input_operand instead of\n\treg_or_indexed_operand.\n\t(vsx_splat_v4sf_internal): Likewise.\n\n[gcc/testsuite]\n2016-05-31  Michael Meissner  <meissner@linux.vnet.ibm.com>\n\n\t* gcc.target/powerpc/p9-splat-4.c: New test.\n\nFrom-SVN: r237006", "tree": {"sha": "101aace055650117d838bc78d446312d3a1c4eaf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/101aace055650117d838bc78d446312d3a1c4eaf"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/58f2fb5ca16a39f3af10dee718d87335b3cd5222", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/58f2fb5ca16a39f3af10dee718d87335b3cd5222", "html_url": "https://github.com/Rust-GCC/gccrs/commit/58f2fb5ca16a39f3af10dee718d87335b3cd5222", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/58f2fb5ca16a39f3af10dee718d87335b3cd5222/comments", "author": null, "committer": null, "parents": [{"sha": "4731c9f025a6c14d77e3127b8c64a46bd933c687", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4731c9f025a6c14d77e3127b8c64a46bd933c687", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4731c9f025a6c14d77e3127b8c64a46bd933c687"}], "stats": {"total": 85, "additions": 74, "deletions": 11}, "files": [{"sha": "8fb0bab2a9da93624258b16cd6f6a636f47ee1ce", "filename": "gcc/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/58f2fb5ca16a39f3af10dee718d87335b3cd5222/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/58f2fb5ca16a39f3af10dee718d87335b3cd5222/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=58f2fb5ca16a39f3af10dee718d87335b3cd5222", "patch": "@@ -1,3 +1,18 @@\n+2016-05-31  Michael Meissner  <meissner@linux.vnet.ibm.com>\n+\n+\t* config/rs6000/vsx.md (vsx_splat_<mode>, V2DI/V2DF): Simplify\n+\talternatives, eliminating preferred register class.  Add support\n+\tfor the MTVSRDD instruction in ISA 3.0.\n+\t(vsx_splat_v4si_internal): Use splat_input_operand instead of\n+\treg_or_indexed_operand.\n+\t(vsx_splat_v4sf_internal): Likewise.\n+\n+2016-05-31  Michael Meissner  <meissner@linux.vnet.ibm.com>\n+\n+\tPR target/71186\n+\t* config/rs6000/vsx.md (xxspltib_<mode>_nosplit): Add alternatives\n+\tfor loading up all 0's or all 1's.\n+\n 2016-06-01  Thomas Preud'homme  <thomas.preudhomme@arm.com>\n \n \t* doc/sourcebuild.texi (arm_acq_rel): Document new effective target."}, {"sha": "58e1cb52b97ab28abf5c8cfab3f6103a409b8673", "filename": "gcc/config/rs6000/vsx.md", "status": "modified", "additions": 8, "deletions": 11, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/58f2fb5ca16a39f3af10dee718d87335b3cd5222/gcc%2Fconfig%2Frs6000%2Fvsx.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/58f2fb5ca16a39f3af10dee718d87335b3cd5222/gcc%2Fconfig%2Frs6000%2Fvsx.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Fvsx.md?ref=58f2fb5ca16a39f3af10dee718d87335b3cd5222", "patch": "@@ -776,8 +776,8 @@\n   [(set_attr \"type\" \"vecperm\")])\n \n (define_insn \"xxspltib_<mode>_nosplit\"\n-  [(set (match_operand:VSINT_842 0 \"vsx_register_operand\" \"=wa\")\n-\t(match_operand:VSINT_842 1 \"xxspltib_constant_nosplit\" \"wE\"))]\n+  [(set (match_operand:VSINT_842 0 \"vsx_register_operand\" \"=wa,wa\")\n+\t(match_operand:VSINT_842 1 \"xxspltib_constant_nosplit\" \"jwM,wE\"))]\n   \"TARGET_P9_VECTOR\"\n {\n   rtx op1 = operands[1];\n@@ -2384,18 +2384,15 @@\n \n ;; V2DF/V2DI splat\n (define_insn \"vsx_splat_<mode>\"\n-  [(set (match_operand:VSX_D 0 \"vsx_register_operand\" \"=wd,wd,wd,?<VSa>,?<VSa>,?<VSa>\")\n+  [(set (match_operand:VSX_D 0 \"vsx_register_operand\" \"=<VSa>,<VSa>,we\")\n \t(vec_duplicate:VSX_D\n-\t (match_operand:<VS_scalar> 1 \"splat_input_operand\" \"<VS_64reg>,f,Z,<VSa>,<VSa>,Z\")))]\n+\t (match_operand:<VS_scalar> 1 \"splat_input_operand\" \"<VS_64reg>,Z,b\")))]\n   \"VECTOR_MEM_VSX_P (<MODE>mode)\"\n   \"@\n-   xxpermdi %x0,%x1,%x1,0\n    xxpermdi %x0,%x1,%x1,0\n    lxvdsx %x0,%y1\n-   xxpermdi %x0,%x1,%x1,0\n-   xxpermdi %x0,%x1,%x1,0\n-   lxvdsx %x0,%y1\"\n-  [(set_attr \"type\" \"vecperm,vecperm,vecload,vecperm,vecperm,vecload\")])\n+   mtvsrdd %x0,%1,%1\"\n+  [(set_attr \"type\" \"vecperm,vecload,mftgpr\")])\n \n ;; V4SI splat (ISA 3.0)\n ;; When SI's are allowed in VSX registers, add XXSPLTW support\n@@ -2414,7 +2411,7 @@\n (define_insn \"*vsx_splat_v4si_internal\"\n   [(set (match_operand:V4SI 0 \"vsx_register_operand\" \"=wa,wa\")\n \t(vec_duplicate:V4SI\n-\t (match_operand:SI 1 \"reg_or_indexed_operand\" \"r,Z\")))]\n+\t (match_operand:SI 1 \"splat_input_operand\" \"r,Z\")))]\n   \"TARGET_P9_VECTOR\"\n   \"@\n    mtvsrws %x0,%1\n@@ -2425,7 +2422,7 @@\n (define_insn_and_split \"*vsx_splat_v4sf_internal\"\n   [(set (match_operand:V4SF 0 \"vsx_register_operand\" \"=wa,wa,wa\")\n \t(vec_duplicate:V4SF\n-\t (match_operand:SF 1 \"reg_or_indexed_operand\" \"Z,wy,r\")))]\n+\t (match_operand:SF 1 \"splat_input_operand\" \"Z,wy,r\")))]\n   \"TARGET_P9_VECTOR\"\n   \"@\n    lxvwsx %x0,%y1"}, {"sha": "6d5ee16daf2f55d65733eaab24e8aea5623bfece", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/58f2fb5ca16a39f3af10dee718d87335b3cd5222/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/58f2fb5ca16a39f3af10dee718d87335b3cd5222/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=58f2fb5ca16a39f3af10dee718d87335b3cd5222", "patch": "@@ -1,3 +1,12 @@\n+2016-05-31  Michael Meissner  <meissner@linux.vnet.ibm.com>\n+\n+\t* gcc.target/powerpc/p9-splat-4.c: New test.\n+\n+2016-05-31  Michael Meissner  <meissner@linux.vnet.ibm.com>\n+\n+\tPR target/71186\n+\t* gcc.target/powerpc/pr71186.c: New test.\n+\n 2016-06-01  Jerry DeLisle  <jvdelisle@gcc.gnu.org>\n \n \tPR fortran/52393"}, {"sha": "d643324afe1e83dcdc30bfe50ec446db9d9ba2b3", "filename": "gcc/testsuite/gcc.target/powerpc/p9-splat-4.c", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/58f2fb5ca16a39f3af10dee718d87335b3cd5222/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fp9-splat-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/58f2fb5ca16a39f3af10dee718d87335b3cd5222/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fp9-splat-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fp9-splat-4.c?ref=58f2fb5ca16a39f3af10dee718d87335b3cd5222", "patch": "@@ -0,0 +1,10 @@\n+/* { dg-do compile { target { powerpc64*-*-* && lp64 } } } */\n+/* { dg-skip-if \"do not override -mcpu\" { powerpc*-*-* } { \"-mcpu=*\" } { \"-mcpu=power9\" } } */\n+/* { dg-options \"-mcpu=power9 -O2\" } */\n+/* { dg-require-effective-target powerpc_p9vector_ok } */\n+\n+#include <altivec.h>\n+\n+vector long long foo (long long a) { return (vector long long) { a, a }; }\n+\n+/* { dg-final { scan-assembler \"mtvsrdd\" } } */"}, {"sha": "22762ccafb7f3cc3f777b507547264bebdeb1372", "filename": "gcc/testsuite/gcc.target/powerpc/pr71186.c", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/58f2fb5ca16a39f3af10dee718d87335b3cd5222/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fpr71186.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/58f2fb5ca16a39f3af10dee718d87335b3cd5222/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fpr71186.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fpr71186.c?ref=58f2fb5ca16a39f3af10dee718d87335b3cd5222", "patch": "@@ -0,0 +1,32 @@\n+/* { dg-do compile { target { powerpc64*-*-* && lp64 } } } */\n+/* { dg-skip-if \"do not override -mcpu\" { powerpc*-*-* } { \"-mcpu=*\" } { \"-mcpu=power9\" } } */\n+/* { dg-options \"-mcpu=power9 -O2\" } */\n+/* { dg-require-effective-target powerpc_p9vector_ok } */\n+\n+static unsigned short x[(16384/sizeof(unsigned short))] __attribute__ ((aligned (16)));\n+static unsigned short y[(16384/sizeof(unsigned short))] __attribute__ ((aligned (16)));\n+static unsigned short a;\n+\n+void obfuscate(void *a, ...);\n+\n+static void __attribute__((noinline)) do_one(void)\n+{\n+ unsigned long i;\n+\n+ obfuscate(x, y, &a);\n+\n+ for (i = 0; i < (16384/sizeof(unsigned short)); i++)\n+  y[i] = a * x[i];\n+\n+ obfuscate(x, y, &a);\n+}\n+\n+int main(void)\n+{\n+ unsigned long i;\n+\n+ for (i = 0; i < 1000000; i++)\n+  do_one();\n+\n+ return 0;\n+}"}]}