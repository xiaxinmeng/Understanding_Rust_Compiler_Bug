{"sha": "39f5e9aded23e8b7e0e7080fc6020478b9c5b7b5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzlmNWU5YWRlZDIzZThiN2UwZTcwODBmYzYwMjA0NzhiOWM1YjdiNQ==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2020-11-26T09:50:23Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2020-11-26T09:50:23Z"}, "message": "match.pd: Avoid ICE with shifts [PR97979]\n\nMy recent wide_int_binop changes caused ICE on this testcase.\nThe problem is that for shift where amount has MSB set now fails to optimize\ninto a constant (IMHO we should treat out of bounds shifts the same later),\nbut there is a precedent for that already - e.g. division by zero fails\nto optimize into a constant too.  I think it is better if path isolation\nchecks for these UBs and does something the user chooses (__builtin_trap vs.\n__builtin_unreachable, and either a deferred warning about the UB or\nnothing).\nThis patch just doesn't optimize if int_const_binop failed.\n\n2020-11-26  Jakub Jelinek  <jakub@redhat.com>\n\n\tPR tree-optimization/97979\n\t* match.pd ((X {&,^,|} C2) << C1 into (X << C1) {&,^,|} (C2 << C1)):\n\tOnly optimize if int_const_binop returned non-NULL.\n\n\t* gcc.dg/pr97979.c: New test.\n\t* gcc.c-torture/compile/pr97979.c: New test.", "tree": {"sha": "78e54cc7831648237feab7f647b73b7bdc8d9fef", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/78e54cc7831648237feab7f647b73b7bdc8d9fef"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/39f5e9aded23e8b7e0e7080fc6020478b9c5b7b5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/39f5e9aded23e8b7e0e7080fc6020478b9c5b7b5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/39f5e9aded23e8b7e0e7080fc6020478b9c5b7b5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/39f5e9aded23e8b7e0e7080fc6020478b9c5b7b5/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "776a37f6ac5682dae9a1ef07bc04570ea80f42ca", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/776a37f6ac5682dae9a1ef07bc04570ea80f42ca", "html_url": "https://github.com/Rust-GCC/gccrs/commit/776a37f6ac5682dae9a1ef07bc04570ea80f42ca"}], "stats": {"total": 23, "additions": 22, "deletions": 1}, "files": [{"sha": "f8b65154a9e53054dd27bdfcdd931467a7e2972e", "filename": "gcc/match.pd", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/39f5e9aded23e8b7e0e7080fc6020478b9c5b7b5/gcc%2Fmatch.pd", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/39f5e9aded23e8b7e0e7080fc6020478b9c5b7b5/gcc%2Fmatch.pd", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fmatch.pd?ref=39f5e9aded23e8b7e0e7080fc6020478b9c5b7b5", "patch": "@@ -3119,7 +3119,8 @@ DEFINE_INT_AND_FLOAT_ROUND_FN (RINT)\n    (shift (convert?:s (bit_op:s @0 INTEGER_CST@2)) INTEGER_CST@1)\n    (if (tree_nop_conversion_p (type, TREE_TYPE (@0)))\n     (with { tree mask = int_const_binop (shift, fold_convert (type, @2), @1); }\n-     (bit_op (shift (convert @0) @1) { mask; }))))))\n+     (if (mask)\n+      (bit_op (shift (convert @0) @1) { mask; })))))))\n \n /* ~(~X >> Y) -> X >> Y (for arithmetic shift).  */\n (simplify"}, {"sha": "f4f88a45adf4155de2f3941687e28ec70880b4ba", "filename": "gcc/testsuite/gcc.c-torture/compile/pr97979.c", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/39f5e9aded23e8b7e0e7080fc6020478b9c5b7b5/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fpr97979.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/39f5e9aded23e8b7e0e7080fc6020478b9c5b7b5/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fpr97979.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fpr97979.c?ref=39f5e9aded23e8b7e0e7080fc6020478b9c5b7b5", "patch": "@@ -0,0 +1,7 @@\n+/* PR tree-optimization/97979 */\n+\n+int\n+foo (int x)\n+{\n+  return (x & 0x123) << -3;\n+}"}, {"sha": "44aaff2ab5aa2cb6cf8b188ae8c50cc061f874fe", "filename": "gcc/testsuite/gcc.dg/pr97979.c", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/39f5e9aded23e8b7e0e7080fc6020478b9c5b7b5/gcc%2Ftestsuite%2Fgcc.dg%2Fpr97979.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/39f5e9aded23e8b7e0e7080fc6020478b9c5b7b5/gcc%2Ftestsuite%2Fgcc.dg%2Fpr97979.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr97979.c?ref=39f5e9aded23e8b7e0e7080fc6020478b9c5b7b5", "patch": "@@ -0,0 +1,13 @@\n+/* PR tree-optimization/97979 */\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -fno-tree-ccp\" } */\n+\n+short a = 0;\n+int b = 0;\n+\n+void\n+foo (void)\n+{\n+  unsigned short d = b;\n+  a = d >> -2U;\t/* { dg-warning \"right shift count >= width of type\" } */\n+}"}]}