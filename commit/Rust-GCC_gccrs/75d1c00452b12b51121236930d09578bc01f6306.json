{"sha": "75d1c00452b12b51121236930d09578bc01f6306", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzVkMWMwMDQ1MmIxMmI1MTEyMTIzNjkzMGQwOTU3OGJjMDFmNjMwNg==", "commit": {"author": {"name": "Steven G. Kargl", "email": "kargl@gcc.gnu.org", "date": "2018-06-07T17:53:11Z"}, "committer": {"name": "Steven G. Kargl", "email": "kargl@gcc.gnu.org", "date": "2018-06-07T17:53:11Z"}, "message": "re PR fortran/86045 (ICE in reduce_binary_ac, at fortran/arith.c:1308)\n\n2018-06-07  Steven G. Kargl  <kargl@gcc.gnu.org>\n\n\tPR fortran/86045\n\t* simplify.c (gfc_simplify_mod): Re-arrange code to test whether\n\t'P' is zero and issue an error if it is.\n\n2018-06-07  Steven G. Kargl  <kargl@gcc.gnu.org>\n\n\tPR fortran/86045\n\t* gfortran.dg/pr86045.f90: New test.\n\nFrom-SVN: r261286", "tree": {"sha": "c7a6b3ac8b0c3d8751154c4f3dc3a82f6ba9f167", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c7a6b3ac8b0c3d8751154c4f3dc3a82f6ba9f167"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/75d1c00452b12b51121236930d09578bc01f6306", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/75d1c00452b12b51121236930d09578bc01f6306", "html_url": "https://github.com/Rust-GCC/gccrs/commit/75d1c00452b12b51121236930d09578bc01f6306", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/75d1c00452b12b51121236930d09578bc01f6306/comments", "author": null, "committer": null, "parents": [{"sha": "dc23fb4d72eed9ea09fbf4704b26e0e36414a57a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dc23fb4d72eed9ea09fbf4704b26e0e36414a57a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/dc23fb4d72eed9ea09fbf4704b26e0e36414a57a"}], "stats": {"total": 59, "additions": 41, "deletions": 18}, "files": [{"sha": "7acc4c6c2fdd1c1026831fe78329b2b3f7049921", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/75d1c00452b12b51121236930d09578bc01f6306/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/75d1c00452b12b51121236930d09578bc01f6306/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=75d1c00452b12b51121236930d09578bc01f6306", "patch": "@@ -1,3 +1,9 @@\n+2018-06-07  Steven G. Kargl  <kargl@gcc.gnu.org>\n+\n+\tPR fortran/86045\n+\t* simplify.c (gfc_simplify_mod): Re-arrange code to test whether\n+\t'P' is zero and issue an error if it is.\n+\n 2018-06-06  Thomas Koenig  <tkoenig@gcc.gnu.org>\n \n \tPR fortran/85641"}, {"sha": "41997367cf91dcecc073958ee32c6ca7a4e25808", "filename": "gcc/fortran/simplify.c", "status": "modified", "additions": 23, "deletions": 18, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/75d1c00452b12b51121236930d09578bc01f6306/gcc%2Ffortran%2Fsimplify.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/75d1c00452b12b51121236930d09578bc01f6306/gcc%2Ffortran%2Fsimplify.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fsimplify.c?ref=75d1c00452b12b51121236930d09578bc01f6306", "patch": "@@ -5473,43 +5473,48 @@ gfc_simplify_mod (gfc_expr *a, gfc_expr *p)\n   gfc_expr *result;\n   int kind;\n \n-  if (a->expr_type != EXPR_CONSTANT || p->expr_type != EXPR_CONSTANT)\n+  /* First check p.  */\n+  if (p->expr_type != EXPR_CONSTANT)\n     return NULL;\n \n-  kind = a->ts.kind > p->ts.kind ? a->ts.kind : p->ts.kind;\n-  result = gfc_get_constant_expr (a->ts.type, kind, &a->where);\n-\n-  switch (a->ts.type)\n+  /* p shall not be 0.  */\n+  switch (p->ts.type)\n     {\n       case BT_INTEGER:\n \tif (mpz_cmp_ui (p->value.integer, 0) == 0)\n \t  {\n-\t    /* Result is processor-dependent.  */\n-\t    gfc_error (\"Second argument MOD at %L is zero\", &a->where);\n-\t    gfc_free_expr (result);\n+\t    gfc_error (\"Argument %qs of MOD at %L shall not be zero\",\n+\t\t\t\"P\", &p->where);\n \t    return &gfc_bad_expr;\n \t  }\n-\tmpz_tdiv_r (result->value.integer, a->value.integer, p->value.integer);\n \tbreak;\n-\n       case BT_REAL:\n \tif (mpfr_cmp_ui (p->value.real, 0) == 0)\n \t  {\n-\t    /* Result is processor-dependent.  */\n-\t    gfc_error (\"Second argument of MOD at %L is zero\", &p->where);\n-\t    gfc_free_expr (result);\n+\t    gfc_error (\"Argument %qs of MOD at %L shall not be zero\",\n+\t\t\t\"P\", &p->where);\n \t    return &gfc_bad_expr;\n \t  }\n-\n-\tgfc_set_model_kind (kind);\n-\tmpfr_fmod (result->value.real, a->value.real, p->value.real,\n-\t\t   GFC_RND_MODE);\n \tbreak;\n-\n       default:\n \tgfc_internal_error (\"gfc_simplify_mod(): Bad arguments\");\n     }\n \n+  if (a->expr_type != EXPR_CONSTANT)\n+    return NULL;\n+\n+  kind = a->ts.kind > p->ts.kind ? a->ts.kind : p->ts.kind;\n+  result = gfc_get_constant_expr (a->ts.type, kind, &a->where);\n+\n+  if (a->ts.type == BT_INTEGER)\n+    mpz_tdiv_r (result->value.integer, a->value.integer, p->value.integer);\n+  else\n+    {\n+      gfc_set_model_kind (kind);\n+      mpfr_fmod (result->value.real, a->value.real, p->value.real,\n+\t\t GFC_RND_MODE);\n+    }\n+\n   return range_check (result, \"MOD\");\n }\n "}, {"sha": "f26dd5b2f580cd93d7f9cacafac8c495df5800d1", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/75d1c00452b12b51121236930d09578bc01f6306/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/75d1c00452b12b51121236930d09578bc01f6306/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=75d1c00452b12b51121236930d09578bc01f6306", "patch": "@@ -1,3 +1,8 @@\n+2018-06-07  Steven G. Kargl  <kargl@gcc.gnu.org>\n+\n+\tPR fortran/86045\n+\t* gfortran.dg/pr86045.f90: New test.\n+\n 2018-06-07  Marek Polacek  <polacek@redhat.com>\n \n \t* g++.dg/cpp0x/range-for9.C: Adjust dg-error."}, {"sha": "685672f1dbdd720934a6072fe331c4a6cc65dce0", "filename": "gcc/testsuite/gfortran.dg/pr86045.f90", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/75d1c00452b12b51121236930d09578bc01f6306/gcc%2Ftestsuite%2Fgfortran.dg%2Fpr86045.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/75d1c00452b12b51121236930d09578bc01f6306/gcc%2Ftestsuite%2Fgfortran.dg%2Fpr86045.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fpr86045.f90?ref=75d1c00452b12b51121236930d09578bc01f6306", "patch": "@@ -0,0 +1,7 @@\n+! { dg-do compile }\n+program p\n+   logical :: a(2) = (mod([2,3],0) == 0)     ! { dg-error \"shall not be zero\" }\n+   integer :: b = count(mod([2,3],0) == 0)   ! { dg-error \"shall not be zero\" }\n+   integer :: c = all(mod([2,3],0) == 0)     ! { dg-error \"shall not be zero\" }\n+   integer :: d = any(mod([2,3],0) == 0)     ! { dg-error \"shall not be zero\" }\n+end"}]}