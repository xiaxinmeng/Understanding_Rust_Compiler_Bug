{"sha": "bb54fdfdf7b2599a9627b2eb4c284bf7f6b1ef23", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmI1NGZkZmRmN2IyNTk5YTk2MjdiMmViNGMyODRiZjdmNmIxZWYyMw==", "commit": {"author": {"name": "Daniel Berlin", "email": "dberlin@dberlin.org", "date": "2005-11-04T02:51:25Z"}, "committer": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2005-11-04T02:51:25Z"}, "message": "first pass at updated gcc_release, should work for snapshots\n\nFrom-SVN: r106476", "tree": {"sha": "d3cfaacc85236f03594ed6837c0de102d2088b16", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d3cfaacc85236f03594ed6837c0de102d2088b16"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/bb54fdfdf7b2599a9627b2eb4c284bf7f6b1ef23", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bb54fdfdf7b2599a9627b2eb4c284bf7f6b1ef23", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bb54fdfdf7b2599a9627b2eb4c284bf7f6b1ef23", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bb54fdfdf7b2599a9627b2eb4c284bf7f6b1ef23/comments", "author": {"login": "dberlin", "id": 324715, "node_id": "MDQ6VXNlcjMyNDcxNQ==", "avatar_url": "https://avatars.githubusercontent.com/u/324715?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dberlin", "html_url": "https://github.com/dberlin", "followers_url": "https://api.github.com/users/dberlin/followers", "following_url": "https://api.github.com/users/dberlin/following{/other_user}", "gists_url": "https://api.github.com/users/dberlin/gists{/gist_id}", "starred_url": "https://api.github.com/users/dberlin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dberlin/subscriptions", "organizations_url": "https://api.github.com/users/dberlin/orgs", "repos_url": "https://api.github.com/users/dberlin/repos", "events_url": "https://api.github.com/users/dberlin/events{/privacy}", "received_events_url": "https://api.github.com/users/dberlin/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "16fdeb483fb533cad7ba853b017a9195ee679e02", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/16fdeb483fb533cad7ba853b017a9195ee679e02", "html_url": "https://github.com/Rust-GCC/gccrs/commit/16fdeb483fb533cad7ba853b017a9195ee679e02"}], "stats": {"total": 84, "additions": 41, "deletions": 43}, "files": [{"sha": "123e7811ceb6e1198e5efd1790dc2b113ec57d21", "filename": "maintainer-scripts/crontab", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bb54fdfdf7b2599a9627b2eb4c284bf7f6b1ef23/maintainer-scripts%2Fcrontab", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bb54fdfdf7b2599a9627b2eb4c284bf7f6b1ef23/maintainer-scripts%2Fcrontab", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/maintainer-scripts%2Fcrontab?ref=bb54fdfdf7b2599a9627b2eb4c284bf7f6b1ef23", "patch": "@@ -1,6 +1,6 @@\n 16  0 * * * sh /home/gccadmin/scripts/update_version_svn\n 50  0 * * * sh /home/gccadmin/scripts/update_web_docs_svn\n 55  0 * * * sh /home/gccadmin/scripts/update_web_docs_libstdcxx_svn\n-32 22 * * 2 sh /home/gccadmin/scripts/gcc_release -s 3.4:gcc-3_4-branch -l -d /sourceware/snapshot-tmp/gcc all\n-32 22 * * 4 sh /home/gccadmin/scripts/gcc_release -s 4.0:gcc-4_0-branch -l -d /sourceware/snapshot-tmp/gcc all\n-43 17 * * 6 sh /home/gccadmin/scripts/gcc_release -s 4.1:HEAD           -l -d /sourceware/snapshot-tmp/gcc all\n+32 22 * * 2 sh /home/gccadmin/scripts/gcc_release -s 3.4:/branches/gcc-3_4-branch -l -d /sourceware/snapshot-tmp/gcc all\n+32 22 * * 4 sh /home/gccadmin/scripts/gcc_release -s 4.0:/branches/gcc-4_0-branch -l -d /sourceware/snapshot-tmp/gcc all\n+43 17 * * 6 sh /home/gccadmin/scripts/gcc_release -s 4.1:/trunk           -l -d /sourceware/snapshot-tmp/gcc all"}, {"sha": "116bdd7336be91c51bec977619be988aa428d312", "filename": "maintainer-scripts/gcc_release", "status": "modified", "additions": 38, "deletions": 40, "changes": 78, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bb54fdfdf7b2599a9627b2eb4c284bf7f6b1ef23/maintainer-scripts%2Fgcc_release", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bb54fdfdf7b2599a9627b2eb4c284bf7f6b1ef23/maintainer-scripts%2Fgcc_release", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/maintainer-scripts%2Fgcc_release?ref=bb54fdfdf7b2599a9627b2eb4c284bf7f6b1ef23", "patch": "@@ -118,8 +118,7 @@ build_sources() {\n   if [ ${FINAL} -ne 0 ]; then\n     inform \"Updating ChangeLogs and version files\"\n \n-    ${CVS} co -d \"`basename ${SOURCE_DIRECTORY}`\" \\\n-           -r ${CVSBRANCH} gcc || \\\n+    ${SVN} -q co \"${SVNROOT}/${SVNBRANCH}\" \"`basename ${SOURCE_DIRECTORY}`\" ||\\\n            error \"Could not check out release sources\"\n     for x in `find ${SOURCE_DIRECTORY} -name ChangeLog`; do\n       # Update this ChangeLog file only if it does not yet contain the\n@@ -135,7 +134,7 @@ EOF\n         mv ${x}.new ${x} || \\\n             error \"Could not update ${x}\"\n         (changedir `dirname ${x}` && \\\n-            ${CVS} ci -m 'Mark ChangeLog' `basename ${x}`) || \\\n+            ${SVN} -q ci -m 'Mark ChangeLog' `basename ${x}`) || \\\n             error \"Could not commit ${x}\"\n       fi\n     done\n@@ -147,15 +146,15 @@ EOF\n       error \"Release number ${RELEASE} does not match BASE-VER\"\n       (changedir ${SOURCE_DIRECTORY}/gcc && \\\n        : > DEV-PHASE && \\\n-       ${CVS} ci -m 'Mark as release' DEV-PHASE) || \\\n+       ${SVN} -q ci -m 'Mark as release' DEV-PHASE) || \\\n       error \"Could not update DEV-PHASE\"\n     else\n       for x in gcc/version.c; do \n         y=`basename ${x}`\n         (changedir `dirname ${SOURCE_DIRECTORY}/${x}` && \\\n             sed -e 's|version_string\\[\\] = \\\".*\\\"|version_string\\[\\] = \\\"'${RELEASE}'\\\"|g' < ${y} > ${y}.new && \\\n \t    mv ${y}.new ${y} && \\\n-            ${CVS} ci -m 'Update version' ${y}) || \\\n+            ${SVN} -q ci -m 'Update version' ${y}) || \\\n \t    error \"Could not update ${x}\"\n       done\n     fi\n@@ -170,41 +169,41 @@ EOF\n   EXPORTDATE=\"\"\n   if [ -n \"${TAG}\" ]; then\n     inform \"Tagging sources as ${TAG}\"\n-    EXPORTTAG=\"-r${TAG}\"\n+    EXPORTTAG=\"${TAG}\"\n     # Try to check out a file using ${TAG}.  If the command succeeds,\n     # then the sources have already been tagged.  We don't want to \n     # overwrite an existing tag, so we don't want to use the \"-F\"\n     # option to \"cvs rtag\" below.  So, if the tag already exists,\n     # issue an error message; the release manager can manually remove\n     # the tag if appropriate.\n-    if ${CVS} export -d \"`basename ${SOURCE_DIRECTORY}`\" \\\n-      \"${EXPORTTAG}\" gcc/ChangeLog; then\n+    echo \"${SVN} ls ${SVNROOT}/${EXPORTTAG}/ChangeLog\" \n+    if ${SVN} ls \"${SVNROOT}/${EXPORTTAG}/ChangeLog\"; then \n       error \"Tag ${TAG} already exists\"\n     fi\n-    ${CVS} rtag -r ${CVSBRANCH} ${TAG} gcc || \\\n-      error \"Could not tag sources\"\n+    echo \"Would execute ${SVN} cp ${SVNROOT}/${SVNBRANCH} ${SVNROOT}/${TAG}\"\n+    #${SVN} -m \"Tagging source as ${TAG}\" cp \"${SVNROOT}/${SVNBRANCH}\" \"${SVNROOT}/${TAG}\" || \\\n+    #  error \"Could not tag sources\"\n+    EXPORTTAG=\"${SVNBRANCH}\"\n   else\n-    if [ ${CVSBRANCH} != \"HEAD\" ]; then\n-      EXPORTTAG=\"-r${CVSBRANCH}\"\n+    if [ ${SVNBRANCH} != \"/trunk\" ]; then\n+      EXPORTTAG=\"/branches/${SVNBRANCH}\"\n       # It does not work to use both \"-r\" and \"-D\" with\n       # \"cvs export\" so EXPORTDATE is not set here.\n     else\n       # HEAD is the default branch, no need to specify it.\n       EXPORTTAG=\"\"\n-      EXPORTDATE=\"-D`date -u +\"%Y-%m-%d %H:%M\"` UTC\"\n+      EXPORTDATE=\"-D{`date --iso-8601=minutes`}\"\n     fi\n   fi\n \n   # Export the current sources.\n-  inform \"Retrieving sources (cvs export ${EXPORTTAG} ${EXPORTDATE} gcc)\"\n+  inform \"Retrieving sources (svn export ${EXPORTTAG} ${EXPORTDATE} gcc)\"\n \n   if [ -z \"${EXPORTTAG}\" ]; then\n-    ${CVS} export -d \"`basename ${SOURCE_DIRECTORY}`\" \\\n-       \"${EXPORTDATE}\" gcc || \\\n+    ${SVN} -q export ${EXPORTDATE} \"${SVNROOT}/trunk\" \"`basename ${SOURCE_DIRECTORY}`\" ||\\\n       error \"Could not retrieve sources\"\n   elif [ -z \"${EXPORTDATE}\" ]; then\n-    ${CVS} export -d \"`basename ${SOURCE_DIRECTORY}`\" \\\n-       \"${EXPORTTAG}\" gcc || \\\n+    ${SVN} -q export \"${SVNROOT}/${EXPORTTAG}\" \"`basename ${SOURCE_DIRECTORY}`/\" ||\\\n       error \"Could not retrieve sources\"\n   else\n     error \"Cannot specify -r and -D at the same time\"\n@@ -214,7 +213,7 @@ EOF\n   # the LAST_UPDATED file containing the CVS tag/date used.\n   changedir \"gcc-${RELEASE}\"\n   contrib/gcc_update --touch\n-  echo \"Obtained from CVS: ${EXPORTTAG} ${EXPORTDATE}\" > LAST_UPDATED\n+  echo \"Obtained from SVN: ${EXPORTTAG} ${EXPORTDATE}\" > LAST_UPDATED\n \n   # Obtain some documentation files from the wwwdocs module.\n   inform \"Retrieving HTML documentation\"\n@@ -237,7 +236,7 @@ EOF\n   done\n \n   # For a prerelease or real release, we need to generate additional\n-  # files not present in CVS.\n+  # files not present in SVN.\n   changedir \"${SOURCE_DIRECTORY}\"\n   if [ $SNAPSHOT -ne 1 ]; then\n     # Generate the documentation.\n@@ -462,7 +461,7 @@ announce_snapshot() {\n   ftp://gcc.gnu.org/pub/gcc/snapshots/\"${RELEASE}\"/\n and on various mirrors, see http://gcc.gnu.org/mirrors.html for details.\n \n-This snapshot has been generated from the GCC \"${BRANCH}\" CVS branch\n+This snapshot has been generated from the GCC \"${BRANCH}\" SVN branch\n with the following options: \"${EXPORTTAG} ${EXPORTDATE}\"\n \n You'll find:\n@@ -486,8 +485,8 @@ for testing purposes.</p>\n we highly recommend you join the GCC developers list.  Details for\n how to sign up can be found on the GCC project home page.</p>\n \n-<p>This snapshot has been generated from the GCC \"${BRANCH}\" CVS branch\n-with the following options: <code>\"${EXPORTTAG} ${EXPORTDATE}\"</code></p>\n+<p>This snapshot has been generated from the GCC \"${BRANCH}\" SVN branch\n+with the following options: <code>\"svn://gcc.gnu.org/svn/gcc/${EXPORTTAG} ${EXPORTDATE}\"</code></p>\n \n <table>\" > ${SNAPSHOT_INDEX}\n        \n@@ -545,14 +544,13 @@ Last modified \"${TEXT_DATE}\"\n DATE=`date \"+%Y%m%d\"`\n LONG_DATE=`date \"+%Y-%m-%d\"`\n \n+SVN=${SVN:-/usr/bin/svn}\n # The CVS server containing the GCC repository.\n-CVS_SERVER=\"gcc.gnu.org\"\n+SVN_SERVER=\"gcc.gnu.org\"\n # The path to the repository on that server.\n-CVS_REPOSITORY=\"/cvs/gcc\"\n-# The CVS protocol to use.\n-CVS_PROTOCOL=\"ext\"\n+SVN_REPOSITORY=\"/svn/gcc\"\n # The username to use when connecting to the server.\n-CVS_USERNAME=\"${USER}\"\n+SVN_USERNAME=\"${USER}\"\n \n # The machine to which files will be uploaded.\n GCC_HOSTNAME=\"gcc.gnu.org\"\n@@ -581,7 +579,7 @@ BRANCH=\"\"\n \n # The name of the branch from which the release should be made, as used\n # for our version control system.\n-CVSBRANCH=\"\"\n+SVNBRANCH=\"\"\n \n # The tag to apply to the sources used for the release.\n TAG=\"\"\n@@ -649,11 +647,11 @@ while getopts \"d:fr:u:t:p:s:l\" ARG; do\n     d)    DESTINATION=\"${OPTARG}\";;\n     r)    RELEASE=\"${OPTARG}\";;\n     t)    TAG=\"${OPTARG}\";;\n-    u)    CVS_USERNAME=\"${OPTARG}\";;\n+    u)    SVN_USERNAME=\"${OPTARG}\";;\n     f)    FINAL=1;;\n     s)    SNAPSHOT=1\n           BRANCH=${OPTARG%:*}\n-          CVSBRANCH=${OPTARG#*:}\n+          SVNBRANCH=${OPTARG#*:}\n           ;;\n     l)    LOCAL=1\n \t  SCP=cp\n@@ -687,7 +685,7 @@ while [ $# -ne 0 ]; do\n done\n \n # Perform consistency checking.\n-if [ ${LOCAL} -eq 0 ] && [ -z ${CVS_USERNAME} ]; then\n+if [ ${LOCAL} -eq 0 ] && [ -z ${SVN_USERNAME} ]; then\n   error \"No username specified\"\n fi\n \n@@ -718,7 +716,7 @@ if [ $SNAPSHOT -eq 0 ]; then\n \n   # Compute the name of the branch, which is based solely on the major\n   # and minor release numbers.\n-  CVSBRANCH=\"gcc-${RELEASE_MAJOR}_${RELEASE_MINOR}-branch\"\n+  SVNBRANCH=\"branches/gcc-${RELEASE_MAJOR}_${RELEASE_MINOR}-branch\"\n \n   # If this is not a final release, set various parameters acordingly.\n   if [ ${FINAL} -ne 1 ]; then\n@@ -730,8 +728,8 @@ if [ $SNAPSHOT -eq 0 ]; then\n else\n   RELEASE=${BRANCH}-${DATE}\n   FTP_PATH=\"${FTP_PATH}/snapshots/${RELEASE}\"\n-  if [ ${CVSBRANCH} != \"HEAD\" ]; then\n-    TAG=gcc-ss-`echo ${RELEASE} | tr '.' '_'`\n+  if [ ${SVNBRANCH} != \"HEAD\" ]; then\n+    TAG=tags/gcc-ss-`echo ${RELEASE} | tr '.' '_'`\n   fi\n \n   # If diffs are requested when building locally on gcc.gnu.org, we (usually)\n@@ -757,13 +755,14 @@ JAVA_DIRS=`adjust_dirs ${JAVA_DIRS}`\n OBJECTIVEC_DIRS=`adjust_dirs ${OBJECTIVEC_DIRS}`\n TESTSUITE_DIRS=`adjust_dirs ${TESTSUITE_DIRS}`\n \n-# Set up CVSROOT.\n+# Set up SVNROOT.\n if [ $LOCAL -eq 0 ]; then\n-    CVSROOT=\":${CVS_PROTOCOL}:${CVS_USERNAME}@\"\n-    CVSROOT=\"${CVSROOT}${CVS_SERVER}:${CVS_REPOSITORY}\"\n+    SVNROOT=\"svn://${SVN_USERNAME}@${SVN_SERVER}${SVN_REPOSITORY}\"\n else\n-    CVSROOT=\"${CVS_REPOSITORY}\"\n+    SVNROOT=\"file:///svn/gcc\"\n+    CVSROOT=\"/cvs/gcc\"\n fi\n+export SVNROOT\n export CVSROOT\n \n ########################################################################\n@@ -803,7 +802,6 @@ if [ $MODE_GZIP -ne 0 ]; then\n fi\n \n # Upload them to the FTP server.\n-\n if [ $MODE_UPLOAD -ne 0 ]; then\n   upload_files\n "}]}