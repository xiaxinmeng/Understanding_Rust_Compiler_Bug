{"sha": "931b3d88313661128946775f9e8517c76111d891", "node_id": "C_kwDOANBUbNoAKDkzMWIzZDg4MzEzNjYxMTI4OTQ2Nzc1ZjllODUxN2M3NjExMWQ4OTE", "commit": {"author": {"name": "Ju-Zhe Zhong", "email": "juzhe.zhong@rivai.ai", "date": "2023-02-07T06:24:44Z"}, "committer": {"name": "Kito Cheng", "email": "kito.cheng@sifive.com", "date": "2023-02-12T05:58:41Z"}, "message": "RISC-V: Add vwsub.wx C API tests\n\ngcc/testsuite/ChangeLog:\n\n\t* gcc.target/riscv/rvv/base/vwsub_wx-1.c: New test.\n\t* gcc.target/riscv/rvv/base/vwsub_wx-2.c: New test.\n\t* gcc.target/riscv/rvv/base/vwsub_wx-3.c: New test.\n\t* gcc.target/riscv/rvv/base/vwsub_wx_m-1.c: New test.\n\t* gcc.target/riscv/rvv/base/vwsub_wx_m-2.c: New test.\n\t* gcc.target/riscv/rvv/base/vwsub_wx_m-3.c: New test.\n\t* gcc.target/riscv/rvv/base/vwsub_wx_mu-1.c: New test.\n\t* gcc.target/riscv/rvv/base/vwsub_wx_mu-2.c: New test.\n\t* gcc.target/riscv/rvv/base/vwsub_wx_mu-3.c: New test.\n\t* gcc.target/riscv/rvv/base/vwsub_wx_tu-1.c: New test.\n\t* gcc.target/riscv/rvv/base/vwsub_wx_tu-2.c: New test.\n\t* gcc.target/riscv/rvv/base/vwsub_wx_tu-3.c: New test.\n\t* gcc.target/riscv/rvv/base/vwsub_wx_tum-1.c: New test.\n\t* gcc.target/riscv/rvv/base/vwsub_wx_tum-2.c: New test.\n\t* gcc.target/riscv/rvv/base/vwsub_wx_tum-3.c: New test.\n\t* gcc.target/riscv/rvv/base/vwsub_wx_tumu-1.c: New test.\n\t* gcc.target/riscv/rvv/base/vwsub_wx_tumu-2.c: New test.\n\t* gcc.target/riscv/rvv/base/vwsub_wx_tumu-3.c: New test.", "tree": {"sha": "197253fedeea25576b6eb33d1c3cf3c4164f955d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/197253fedeea25576b6eb33d1c3cf3c4164f955d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/931b3d88313661128946775f9e8517c76111d891", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/931b3d88313661128946775f9e8517c76111d891", "html_url": "https://github.com/Rust-GCC/gccrs/commit/931b3d88313661128946775f9e8517c76111d891", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/931b3d88313661128946775f9e8517c76111d891/comments", "author": {"login": "zhongjuzhe", "id": 66454988, "node_id": "MDQ6VXNlcjY2NDU0OTg4", "avatar_url": "https://avatars.githubusercontent.com/u/66454988?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zhongjuzhe", "html_url": "https://github.com/zhongjuzhe", "followers_url": "https://api.github.com/users/zhongjuzhe/followers", "following_url": "https://api.github.com/users/zhongjuzhe/following{/other_user}", "gists_url": "https://api.github.com/users/zhongjuzhe/gists{/gist_id}", "starred_url": "https://api.github.com/users/zhongjuzhe/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zhongjuzhe/subscriptions", "organizations_url": "https://api.github.com/users/zhongjuzhe/orgs", "repos_url": "https://api.github.com/users/zhongjuzhe/repos", "events_url": "https://api.github.com/users/zhongjuzhe/events{/privacy}", "received_events_url": "https://api.github.com/users/zhongjuzhe/received_events", "type": "User", "site_admin": false}, "committer": {"login": "kito-cheng", "id": 2723185, "node_id": "MDQ6VXNlcjI3MjMxODU=", "avatar_url": "https://avatars.githubusercontent.com/u/2723185?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kito-cheng", "html_url": "https://github.com/kito-cheng", "followers_url": "https://api.github.com/users/kito-cheng/followers", "following_url": "https://api.github.com/users/kito-cheng/following{/other_user}", "gists_url": "https://api.github.com/users/kito-cheng/gists{/gist_id}", "starred_url": "https://api.github.com/users/kito-cheng/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kito-cheng/subscriptions", "organizations_url": "https://api.github.com/users/kito-cheng/orgs", "repos_url": "https://api.github.com/users/kito-cheng/repos", "events_url": "https://api.github.com/users/kito-cheng/events{/privacy}", "received_events_url": "https://api.github.com/users/kito-cheng/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8aa1e133b1257e8485526c9d902a599f496a52e1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8aa1e133b1257e8485526c9d902a599f496a52e1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8aa1e133b1257e8485526c9d902a599f496a52e1"}], "stats": {"total": 1998, "additions": 1998, "deletions": 0}, "files": [{"sha": "1cf611427f8a4b30d0b11cf521c05b3c0293057d", "filename": "gcc/testsuite/gcc.target/riscv/rvv/base/vwsub_wx-1.c", "status": "added", "additions": 111, "deletions": 0, "changes": 111, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/931b3d88313661128946775f9e8517c76111d891/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvwsub_wx-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/931b3d88313661128946775f9e8517c76111d891/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvwsub_wx-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvwsub_wx-1.c?ref=931b3d88313661128946775f9e8517c76111d891", "patch": "@@ -0,0 +1,111 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32 -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vint16mf4_t test___riscv_vwsub_wx_i16mf4(vint16mf4_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vwsub_wx_i16mf4(op1,0xAA,vl);\n+}\n+\n+\n+vint16mf2_t test___riscv_vwsub_wx_i16mf2(vint16mf2_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vwsub_wx_i16mf2(op1,0xAA,vl);\n+}\n+\n+\n+vint16m1_t test___riscv_vwsub_wx_i16m1(vint16m1_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vwsub_wx_i16m1(op1,0xAA,vl);\n+}\n+\n+\n+vint16m2_t test___riscv_vwsub_wx_i16m2(vint16m2_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vwsub_wx_i16m2(op1,0xAA,vl);\n+}\n+\n+\n+vint16m4_t test___riscv_vwsub_wx_i16m4(vint16m4_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vwsub_wx_i16m4(op1,0xAA,vl);\n+}\n+\n+\n+vint16m8_t test___riscv_vwsub_wx_i16m8(vint16m8_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vwsub_wx_i16m8(op1,0xAA,vl);\n+}\n+\n+\n+vint32mf2_t test___riscv_vwsub_wx_i32mf2(vint32mf2_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vwsub_wx_i32mf2(op1,0xAA,vl);\n+}\n+\n+\n+vint32m1_t test___riscv_vwsub_wx_i32m1(vint32m1_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vwsub_wx_i32m1(op1,0xAA,vl);\n+}\n+\n+\n+vint32m2_t test___riscv_vwsub_wx_i32m2(vint32m2_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vwsub_wx_i32m2(op1,0xAA,vl);\n+}\n+\n+\n+vint32m4_t test___riscv_vwsub_wx_i32m4(vint32m4_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vwsub_wx_i32m4(op1,0xAA,vl);\n+}\n+\n+\n+vint32m8_t test___riscv_vwsub_wx_i32m8(vint32m8_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vwsub_wx_i32m8(op1,0xAA,vl);\n+}\n+\n+\n+vint64m1_t test___riscv_vwsub_wx_i64m1(vint64m1_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vwsub_wx_i64m1(op1,0xAA,vl);\n+}\n+\n+\n+vint64m2_t test___riscv_vwsub_wx_i64m2(vint64m2_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vwsub_wx_i64m2(op1,0xAA,vl);\n+}\n+\n+\n+vint64m4_t test___riscv_vwsub_wx_i64m4(vint64m4_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vwsub_wx_i64m4(op1,0xAA,vl);\n+}\n+\n+\n+vint64m8_t test___riscv_vwsub_wx_i64m8(vint64m8_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vwsub_wx_i64m8(op1,0xAA,vl);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]\\s+vwsub\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vwsub\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vwsub\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*t[au],\\s*m[au]\\s+vwsub\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m2,\\s*t[au],\\s*m[au]\\s+vwsub\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m4,\\s*t[au],\\s*m[au]\\s+vwsub\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vwsub\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vwsub\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*t[au],\\s*m[au]\\s+vwsub\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*t[au],\\s*m[au]\\s+vwsub\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m4,\\s*t[au],\\s*m[au]\\s+vwsub\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vwsub\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*t[au],\\s*m[au]\\s+vwsub\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*t[au],\\s*m[au]\\s+vwsub\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*t[au],\\s*m[au]\\s+vwsub\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 1 } } */"}, {"sha": "a04af072a9b0bbf5c75fb8b2c0fd4469c2a52284", "filename": "gcc/testsuite/gcc.target/riscv/rvv/base/vwsub_wx-2.c", "status": "added", "additions": 111, "deletions": 0, "changes": 111, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/931b3d88313661128946775f9e8517c76111d891/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvwsub_wx-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/931b3d88313661128946775f9e8517c76111d891/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvwsub_wx-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvwsub_wx-2.c?ref=931b3d88313661128946775f9e8517c76111d891", "patch": "@@ -0,0 +1,111 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32 -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vint16mf4_t test___riscv_vwsub_wx_i16mf4(vint16mf4_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vwsub_wx_i16mf4(op1,0xAA,31);\n+}\n+\n+\n+vint16mf2_t test___riscv_vwsub_wx_i16mf2(vint16mf2_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vwsub_wx_i16mf2(op1,0xAA,31);\n+}\n+\n+\n+vint16m1_t test___riscv_vwsub_wx_i16m1(vint16m1_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vwsub_wx_i16m1(op1,0xAA,31);\n+}\n+\n+\n+vint16m2_t test___riscv_vwsub_wx_i16m2(vint16m2_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vwsub_wx_i16m2(op1,0xAA,31);\n+}\n+\n+\n+vint16m4_t test___riscv_vwsub_wx_i16m4(vint16m4_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vwsub_wx_i16m4(op1,0xAA,31);\n+}\n+\n+\n+vint16m8_t test___riscv_vwsub_wx_i16m8(vint16m8_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vwsub_wx_i16m8(op1,0xAA,31);\n+}\n+\n+\n+vint32mf2_t test___riscv_vwsub_wx_i32mf2(vint32mf2_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vwsub_wx_i32mf2(op1,0xAA,31);\n+}\n+\n+\n+vint32m1_t test___riscv_vwsub_wx_i32m1(vint32m1_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vwsub_wx_i32m1(op1,0xAA,31);\n+}\n+\n+\n+vint32m2_t test___riscv_vwsub_wx_i32m2(vint32m2_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vwsub_wx_i32m2(op1,0xAA,31);\n+}\n+\n+\n+vint32m4_t test___riscv_vwsub_wx_i32m4(vint32m4_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vwsub_wx_i32m4(op1,0xAA,31);\n+}\n+\n+\n+vint32m8_t test___riscv_vwsub_wx_i32m8(vint32m8_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vwsub_wx_i32m8(op1,0xAA,31);\n+}\n+\n+\n+vint64m1_t test___riscv_vwsub_wx_i64m1(vint64m1_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vwsub_wx_i64m1(op1,0xAA,31);\n+}\n+\n+\n+vint64m2_t test___riscv_vwsub_wx_i64m2(vint64m2_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vwsub_wx_i64m2(op1,0xAA,31);\n+}\n+\n+\n+vint64m4_t test___riscv_vwsub_wx_i64m4(vint64m4_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vwsub_wx_i64m4(op1,0xAA,31);\n+}\n+\n+\n+vint64m8_t test___riscv_vwsub_wx_i64m8(vint64m8_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vwsub_wx_i64m8(op1,0xAA,31);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]\\s+vwsub\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vwsub\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vwsub\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m1,\\s*t[au],\\s*m[au]\\s+vwsub\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m2,\\s*t[au],\\s*m[au]\\s+vwsub\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m4,\\s*t[au],\\s*m[au]\\s+vwsub\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vwsub\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vwsub\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m1,\\s*t[au],\\s*m[au]\\s+vwsub\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m2,\\s*t[au],\\s*m[au]\\s+vwsub\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m4,\\s*t[au],\\s*m[au]\\s+vwsub\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vwsub\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m1,\\s*t[au],\\s*m[au]\\s+vwsub\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m2,\\s*t[au],\\s*m[au]\\s+vwsub\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m4,\\s*t[au],\\s*m[au]\\s+vwsub\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 1 } } */"}, {"sha": "9e94117648e50cca118959f7b05e8b0d7735cbcb", "filename": "gcc/testsuite/gcc.target/riscv/rvv/base/vwsub_wx-3.c", "status": "added", "additions": 111, "deletions": 0, "changes": 111, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/931b3d88313661128946775f9e8517c76111d891/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvwsub_wx-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/931b3d88313661128946775f9e8517c76111d891/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvwsub_wx-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvwsub_wx-3.c?ref=931b3d88313661128946775f9e8517c76111d891", "patch": "@@ -0,0 +1,111 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32 -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vint16mf4_t test___riscv_vwsub_wx_i16mf4(vint16mf4_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vwsub_wx_i16mf4(op1,0xAA,32);\n+}\n+\n+\n+vint16mf2_t test___riscv_vwsub_wx_i16mf2(vint16mf2_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vwsub_wx_i16mf2(op1,0xAA,32);\n+}\n+\n+\n+vint16m1_t test___riscv_vwsub_wx_i16m1(vint16m1_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vwsub_wx_i16m1(op1,0xAA,32);\n+}\n+\n+\n+vint16m2_t test___riscv_vwsub_wx_i16m2(vint16m2_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vwsub_wx_i16m2(op1,0xAA,32);\n+}\n+\n+\n+vint16m4_t test___riscv_vwsub_wx_i16m4(vint16m4_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vwsub_wx_i16m4(op1,0xAA,32);\n+}\n+\n+\n+vint16m8_t test___riscv_vwsub_wx_i16m8(vint16m8_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vwsub_wx_i16m8(op1,0xAA,32);\n+}\n+\n+\n+vint32mf2_t test___riscv_vwsub_wx_i32mf2(vint32mf2_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vwsub_wx_i32mf2(op1,0xAA,32);\n+}\n+\n+\n+vint32m1_t test___riscv_vwsub_wx_i32m1(vint32m1_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vwsub_wx_i32m1(op1,0xAA,32);\n+}\n+\n+\n+vint32m2_t test___riscv_vwsub_wx_i32m2(vint32m2_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vwsub_wx_i32m2(op1,0xAA,32);\n+}\n+\n+\n+vint32m4_t test___riscv_vwsub_wx_i32m4(vint32m4_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vwsub_wx_i32m4(op1,0xAA,32);\n+}\n+\n+\n+vint32m8_t test___riscv_vwsub_wx_i32m8(vint32m8_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vwsub_wx_i32m8(op1,0xAA,32);\n+}\n+\n+\n+vint64m1_t test___riscv_vwsub_wx_i64m1(vint64m1_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vwsub_wx_i64m1(op1,0xAA,32);\n+}\n+\n+\n+vint64m2_t test___riscv_vwsub_wx_i64m2(vint64m2_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vwsub_wx_i64m2(op1,0xAA,32);\n+}\n+\n+\n+vint64m4_t test___riscv_vwsub_wx_i64m4(vint64m4_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vwsub_wx_i64m4(op1,0xAA,32);\n+}\n+\n+\n+vint64m8_t test___riscv_vwsub_wx_i64m8(vint64m8_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vwsub_wx_i64m8(op1,0xAA,32);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]\\s+vwsub\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vwsub\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vwsub\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*t[au],\\s*m[au]\\s+vwsub\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m2,\\s*t[au],\\s*m[au]\\s+vwsub\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m4,\\s*t[au],\\s*m[au]\\s+vwsub\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vwsub\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vwsub\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*t[au],\\s*m[au]\\s+vwsub\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*t[au],\\s*m[au]\\s+vwsub\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m4,\\s*t[au],\\s*m[au]\\s+vwsub\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vwsub\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*t[au],\\s*m[au]\\s+vwsub\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*t[au],\\s*m[au]\\s+vwsub\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*t[au],\\s*m[au]\\s+vwsub\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 1 } } */"}, {"sha": "925333d07bab0bd605c2456df729e4fbddaada5d", "filename": "gcc/testsuite/gcc.target/riscv/rvv/base/vwsub_wx_m-1.c", "status": "added", "additions": 111, "deletions": 0, "changes": 111, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/931b3d88313661128946775f9e8517c76111d891/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvwsub_wx_m-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/931b3d88313661128946775f9e8517c76111d891/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvwsub_wx_m-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvwsub_wx_m-1.c?ref=931b3d88313661128946775f9e8517c76111d891", "patch": "@@ -0,0 +1,111 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32 -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vint16mf4_t test___riscv_vwsub_wx_i16mf4_m(vbool64_t mask,vint16mf4_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vwsub_wx_i16mf4_m(mask,op1,0xAA,vl);\n+}\n+\n+\n+vint16mf2_t test___riscv_vwsub_wx_i16mf2_m(vbool32_t mask,vint16mf2_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vwsub_wx_i16mf2_m(mask,op1,0xAA,vl);\n+}\n+\n+\n+vint16m1_t test___riscv_vwsub_wx_i16m1_m(vbool16_t mask,vint16m1_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vwsub_wx_i16m1_m(mask,op1,0xAA,vl);\n+}\n+\n+\n+vint16m2_t test___riscv_vwsub_wx_i16m2_m(vbool8_t mask,vint16m2_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vwsub_wx_i16m2_m(mask,op1,0xAA,vl);\n+}\n+\n+\n+vint16m4_t test___riscv_vwsub_wx_i16m4_m(vbool4_t mask,vint16m4_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vwsub_wx_i16m4_m(mask,op1,0xAA,vl);\n+}\n+\n+\n+vint16m8_t test___riscv_vwsub_wx_i16m8_m(vbool2_t mask,vint16m8_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vwsub_wx_i16m8_m(mask,op1,0xAA,vl);\n+}\n+\n+\n+vint32mf2_t test___riscv_vwsub_wx_i32mf2_m(vbool64_t mask,vint32mf2_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vwsub_wx_i32mf2_m(mask,op1,0xAA,vl);\n+}\n+\n+\n+vint32m1_t test___riscv_vwsub_wx_i32m1_m(vbool32_t mask,vint32m1_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vwsub_wx_i32m1_m(mask,op1,0xAA,vl);\n+}\n+\n+\n+vint32m2_t test___riscv_vwsub_wx_i32m2_m(vbool16_t mask,vint32m2_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vwsub_wx_i32m2_m(mask,op1,0xAA,vl);\n+}\n+\n+\n+vint32m4_t test___riscv_vwsub_wx_i32m4_m(vbool8_t mask,vint32m4_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vwsub_wx_i32m4_m(mask,op1,0xAA,vl);\n+}\n+\n+\n+vint32m8_t test___riscv_vwsub_wx_i32m8_m(vbool4_t mask,vint32m8_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vwsub_wx_i32m8_m(mask,op1,0xAA,vl);\n+}\n+\n+\n+vint64m1_t test___riscv_vwsub_wx_i64m1_m(vbool64_t mask,vint64m1_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vwsub_wx_i64m1_m(mask,op1,0xAA,vl);\n+}\n+\n+\n+vint64m2_t test___riscv_vwsub_wx_i64m2_m(vbool32_t mask,vint64m2_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vwsub_wx_i64m2_m(mask,op1,0xAA,vl);\n+}\n+\n+\n+vint64m4_t test___riscv_vwsub_wx_i64m4_m(vbool16_t mask,vint64m4_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vwsub_wx_i64m4_m(mask,op1,0xAA,vl);\n+}\n+\n+\n+vint64m8_t test___riscv_vwsub_wx_i64m8_m(vbool8_t mask,vint64m8_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vwsub_wx_i64m8_m(mask,op1,0xAA,vl);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]\\s+vwsub\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vwsub\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vwsub\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*t[au],\\s*m[au]\\s+vwsub\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m2,\\s*t[au],\\s*m[au]\\s+vwsub\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m4,\\s*t[au],\\s*m[au]\\s+vwsub\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vwsub\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vwsub\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*t[au],\\s*m[au]\\s+vwsub\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*t[au],\\s*m[au]\\s+vwsub\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m4,\\s*t[au],\\s*m[au]\\s+vwsub\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vwsub\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*t[au],\\s*m[au]\\s+vwsub\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*t[au],\\s*m[au]\\s+vwsub\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*t[au],\\s*m[au]\\s+vwsub\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */"}, {"sha": "65b10c66534e1f134c87d3ad32a6efa43c354974", "filename": "gcc/testsuite/gcc.target/riscv/rvv/base/vwsub_wx_m-2.c", "status": "added", "additions": 111, "deletions": 0, "changes": 111, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/931b3d88313661128946775f9e8517c76111d891/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvwsub_wx_m-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/931b3d88313661128946775f9e8517c76111d891/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvwsub_wx_m-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvwsub_wx_m-2.c?ref=931b3d88313661128946775f9e8517c76111d891", "patch": "@@ -0,0 +1,111 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32 -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vint16mf4_t test___riscv_vwsub_wx_i16mf4_m(vbool64_t mask,vint16mf4_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vwsub_wx_i16mf4_m(mask,op1,0xAA,31);\n+}\n+\n+\n+vint16mf2_t test___riscv_vwsub_wx_i16mf2_m(vbool32_t mask,vint16mf2_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vwsub_wx_i16mf2_m(mask,op1,0xAA,31);\n+}\n+\n+\n+vint16m1_t test___riscv_vwsub_wx_i16m1_m(vbool16_t mask,vint16m1_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vwsub_wx_i16m1_m(mask,op1,0xAA,31);\n+}\n+\n+\n+vint16m2_t test___riscv_vwsub_wx_i16m2_m(vbool8_t mask,vint16m2_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vwsub_wx_i16m2_m(mask,op1,0xAA,31);\n+}\n+\n+\n+vint16m4_t test___riscv_vwsub_wx_i16m4_m(vbool4_t mask,vint16m4_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vwsub_wx_i16m4_m(mask,op1,0xAA,31);\n+}\n+\n+\n+vint16m8_t test___riscv_vwsub_wx_i16m8_m(vbool2_t mask,vint16m8_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vwsub_wx_i16m8_m(mask,op1,0xAA,31);\n+}\n+\n+\n+vint32mf2_t test___riscv_vwsub_wx_i32mf2_m(vbool64_t mask,vint32mf2_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vwsub_wx_i32mf2_m(mask,op1,0xAA,31);\n+}\n+\n+\n+vint32m1_t test___riscv_vwsub_wx_i32m1_m(vbool32_t mask,vint32m1_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vwsub_wx_i32m1_m(mask,op1,0xAA,31);\n+}\n+\n+\n+vint32m2_t test___riscv_vwsub_wx_i32m2_m(vbool16_t mask,vint32m2_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vwsub_wx_i32m2_m(mask,op1,0xAA,31);\n+}\n+\n+\n+vint32m4_t test___riscv_vwsub_wx_i32m4_m(vbool8_t mask,vint32m4_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vwsub_wx_i32m4_m(mask,op1,0xAA,31);\n+}\n+\n+\n+vint32m8_t test___riscv_vwsub_wx_i32m8_m(vbool4_t mask,vint32m8_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vwsub_wx_i32m8_m(mask,op1,0xAA,31);\n+}\n+\n+\n+vint64m1_t test___riscv_vwsub_wx_i64m1_m(vbool64_t mask,vint64m1_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vwsub_wx_i64m1_m(mask,op1,0xAA,31);\n+}\n+\n+\n+vint64m2_t test___riscv_vwsub_wx_i64m2_m(vbool32_t mask,vint64m2_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vwsub_wx_i64m2_m(mask,op1,0xAA,31);\n+}\n+\n+\n+vint64m4_t test___riscv_vwsub_wx_i64m4_m(vbool16_t mask,vint64m4_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vwsub_wx_i64m4_m(mask,op1,0xAA,31);\n+}\n+\n+\n+vint64m8_t test___riscv_vwsub_wx_i64m8_m(vbool8_t mask,vint64m8_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vwsub_wx_i64m8_m(mask,op1,0xAA,31);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]\\s+vwsub\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vwsub\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vwsub\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m1,\\s*t[au],\\s*m[au]\\s+vwsub\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m2,\\s*t[au],\\s*m[au]\\s+vwsub\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m4,\\s*t[au],\\s*m[au]\\s+vwsub\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vwsub\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vwsub\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m1,\\s*t[au],\\s*m[au]\\s+vwsub\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m2,\\s*t[au],\\s*m[au]\\s+vwsub\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m4,\\s*t[au],\\s*m[au]\\s+vwsub\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vwsub\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m1,\\s*t[au],\\s*m[au]\\s+vwsub\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m2,\\s*t[au],\\s*m[au]\\s+vwsub\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m4,\\s*t[au],\\s*m[au]\\s+vwsub\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */"}, {"sha": "4321ccb52dffd4df560730513822b865fa4dc743", "filename": "gcc/testsuite/gcc.target/riscv/rvv/base/vwsub_wx_m-3.c", "status": "added", "additions": 111, "deletions": 0, "changes": 111, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/931b3d88313661128946775f9e8517c76111d891/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvwsub_wx_m-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/931b3d88313661128946775f9e8517c76111d891/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvwsub_wx_m-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvwsub_wx_m-3.c?ref=931b3d88313661128946775f9e8517c76111d891", "patch": "@@ -0,0 +1,111 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32 -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vint16mf4_t test___riscv_vwsub_wx_i16mf4_m(vbool64_t mask,vint16mf4_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vwsub_wx_i16mf4_m(mask,op1,0xAA,32);\n+}\n+\n+\n+vint16mf2_t test___riscv_vwsub_wx_i16mf2_m(vbool32_t mask,vint16mf2_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vwsub_wx_i16mf2_m(mask,op1,0xAA,32);\n+}\n+\n+\n+vint16m1_t test___riscv_vwsub_wx_i16m1_m(vbool16_t mask,vint16m1_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vwsub_wx_i16m1_m(mask,op1,0xAA,32);\n+}\n+\n+\n+vint16m2_t test___riscv_vwsub_wx_i16m2_m(vbool8_t mask,vint16m2_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vwsub_wx_i16m2_m(mask,op1,0xAA,32);\n+}\n+\n+\n+vint16m4_t test___riscv_vwsub_wx_i16m4_m(vbool4_t mask,vint16m4_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vwsub_wx_i16m4_m(mask,op1,0xAA,32);\n+}\n+\n+\n+vint16m8_t test___riscv_vwsub_wx_i16m8_m(vbool2_t mask,vint16m8_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vwsub_wx_i16m8_m(mask,op1,0xAA,32);\n+}\n+\n+\n+vint32mf2_t test___riscv_vwsub_wx_i32mf2_m(vbool64_t mask,vint32mf2_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vwsub_wx_i32mf2_m(mask,op1,0xAA,32);\n+}\n+\n+\n+vint32m1_t test___riscv_vwsub_wx_i32m1_m(vbool32_t mask,vint32m1_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vwsub_wx_i32m1_m(mask,op1,0xAA,32);\n+}\n+\n+\n+vint32m2_t test___riscv_vwsub_wx_i32m2_m(vbool16_t mask,vint32m2_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vwsub_wx_i32m2_m(mask,op1,0xAA,32);\n+}\n+\n+\n+vint32m4_t test___riscv_vwsub_wx_i32m4_m(vbool8_t mask,vint32m4_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vwsub_wx_i32m4_m(mask,op1,0xAA,32);\n+}\n+\n+\n+vint32m8_t test___riscv_vwsub_wx_i32m8_m(vbool4_t mask,vint32m8_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vwsub_wx_i32m8_m(mask,op1,0xAA,32);\n+}\n+\n+\n+vint64m1_t test___riscv_vwsub_wx_i64m1_m(vbool64_t mask,vint64m1_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vwsub_wx_i64m1_m(mask,op1,0xAA,32);\n+}\n+\n+\n+vint64m2_t test___riscv_vwsub_wx_i64m2_m(vbool32_t mask,vint64m2_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vwsub_wx_i64m2_m(mask,op1,0xAA,32);\n+}\n+\n+\n+vint64m4_t test___riscv_vwsub_wx_i64m4_m(vbool16_t mask,vint64m4_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vwsub_wx_i64m4_m(mask,op1,0xAA,32);\n+}\n+\n+\n+vint64m8_t test___riscv_vwsub_wx_i64m8_m(vbool8_t mask,vint64m8_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vwsub_wx_i64m8_m(mask,op1,0xAA,32);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]\\s+vwsub\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vwsub\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vwsub\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*t[au],\\s*m[au]\\s+vwsub\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m2,\\s*t[au],\\s*m[au]\\s+vwsub\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m4,\\s*t[au],\\s*m[au]\\s+vwsub\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vwsub\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vwsub\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*t[au],\\s*m[au]\\s+vwsub\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*t[au],\\s*m[au]\\s+vwsub\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m4,\\s*t[au],\\s*m[au]\\s+vwsub\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vwsub\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*t[au],\\s*m[au]\\s+vwsub\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*t[au],\\s*m[au]\\s+vwsub\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*t[au],\\s*m[au]\\s+vwsub\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */"}, {"sha": "4fbd6409bb52be63658fad80fe1fc7305c7092bd", "filename": "gcc/testsuite/gcc.target/riscv/rvv/base/vwsub_wx_mu-1.c", "status": "added", "additions": 111, "deletions": 0, "changes": 111, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/931b3d88313661128946775f9e8517c76111d891/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvwsub_wx_mu-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/931b3d88313661128946775f9e8517c76111d891/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvwsub_wx_mu-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvwsub_wx_mu-1.c?ref=931b3d88313661128946775f9e8517c76111d891", "patch": "@@ -0,0 +1,111 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32 -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vint16mf4_t test___riscv_vwsub_wx_i16mf4_mu(vbool64_t mask,vint16mf4_t merge,vint16mf4_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vwsub_wx_i16mf4_mu(mask,merge,op1,0xAA,vl);\n+}\n+\n+\n+vint16mf2_t test___riscv_vwsub_wx_i16mf2_mu(vbool32_t mask,vint16mf2_t merge,vint16mf2_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vwsub_wx_i16mf2_mu(mask,merge,op1,0xAA,vl);\n+}\n+\n+\n+vint16m1_t test___riscv_vwsub_wx_i16m1_mu(vbool16_t mask,vint16m1_t merge,vint16m1_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vwsub_wx_i16m1_mu(mask,merge,op1,0xAA,vl);\n+}\n+\n+\n+vint16m2_t test___riscv_vwsub_wx_i16m2_mu(vbool8_t mask,vint16m2_t merge,vint16m2_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vwsub_wx_i16m2_mu(mask,merge,op1,0xAA,vl);\n+}\n+\n+\n+vint16m4_t test___riscv_vwsub_wx_i16m4_mu(vbool4_t mask,vint16m4_t merge,vint16m4_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vwsub_wx_i16m4_mu(mask,merge,op1,0xAA,vl);\n+}\n+\n+\n+vint16m8_t test___riscv_vwsub_wx_i16m8_mu(vbool2_t mask,vint16m8_t merge,vint16m8_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vwsub_wx_i16m8_mu(mask,merge,op1,0xAA,vl);\n+}\n+\n+\n+vint32mf2_t test___riscv_vwsub_wx_i32mf2_mu(vbool64_t mask,vint32mf2_t merge,vint32mf2_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vwsub_wx_i32mf2_mu(mask,merge,op1,0xAA,vl);\n+}\n+\n+\n+vint32m1_t test___riscv_vwsub_wx_i32m1_mu(vbool32_t mask,vint32m1_t merge,vint32m1_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vwsub_wx_i32m1_mu(mask,merge,op1,0xAA,vl);\n+}\n+\n+\n+vint32m2_t test___riscv_vwsub_wx_i32m2_mu(vbool16_t mask,vint32m2_t merge,vint32m2_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vwsub_wx_i32m2_mu(mask,merge,op1,0xAA,vl);\n+}\n+\n+\n+vint32m4_t test___riscv_vwsub_wx_i32m4_mu(vbool8_t mask,vint32m4_t merge,vint32m4_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vwsub_wx_i32m4_mu(mask,merge,op1,0xAA,vl);\n+}\n+\n+\n+vint32m8_t test___riscv_vwsub_wx_i32m8_mu(vbool4_t mask,vint32m8_t merge,vint32m8_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vwsub_wx_i32m8_mu(mask,merge,op1,0xAA,vl);\n+}\n+\n+\n+vint64m1_t test___riscv_vwsub_wx_i64m1_mu(vbool64_t mask,vint64m1_t merge,vint64m1_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vwsub_wx_i64m1_mu(mask,merge,op1,0xAA,vl);\n+}\n+\n+\n+vint64m2_t test___riscv_vwsub_wx_i64m2_mu(vbool32_t mask,vint64m2_t merge,vint64m2_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vwsub_wx_i64m2_mu(mask,merge,op1,0xAA,vl);\n+}\n+\n+\n+vint64m4_t test___riscv_vwsub_wx_i64m4_mu(vbool16_t mask,vint64m4_t merge,vint64m4_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vwsub_wx_i64m4_mu(mask,merge,op1,0xAA,vl);\n+}\n+\n+\n+vint64m8_t test___riscv_vwsub_wx_i64m8_mu(vbool8_t mask,vint64m8_t merge,vint64m8_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vwsub_wx_i64m8_mu(mask,merge,op1,0xAA,vl);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*t[au],\\s*mu\\s+vwsub\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*t[au],\\s*mu\\s+vwsub\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*t[au],\\s*mu\\s+vwsub\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*t[au],\\s*mu\\s+vwsub\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m2,\\s*t[au],\\s*mu\\s+vwsub\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m4,\\s*t[au],\\s*mu\\s+vwsub\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*t[au],\\s*mu\\s+vwsub\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*t[au],\\s*mu\\s+vwsub\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*t[au],\\s*mu\\s+vwsub\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*t[au],\\s*mu\\s+vwsub\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m4,\\s*t[au],\\s*mu\\s+vwsub\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*t[au],\\s*mu\\s+vwsub\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*t[au],\\s*mu\\s+vwsub\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*t[au],\\s*mu\\s+vwsub\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*t[au],\\s*mu\\s+vwsub\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */"}, {"sha": "06ebfeb30afcc13e4b7148a4b03e25f31647d924", "filename": "gcc/testsuite/gcc.target/riscv/rvv/base/vwsub_wx_mu-2.c", "status": "added", "additions": 111, "deletions": 0, "changes": 111, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/931b3d88313661128946775f9e8517c76111d891/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvwsub_wx_mu-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/931b3d88313661128946775f9e8517c76111d891/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvwsub_wx_mu-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvwsub_wx_mu-2.c?ref=931b3d88313661128946775f9e8517c76111d891", "patch": "@@ -0,0 +1,111 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32 -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vint16mf4_t test___riscv_vwsub_wx_i16mf4_mu(vbool64_t mask,vint16mf4_t merge,vint16mf4_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vwsub_wx_i16mf4_mu(mask,merge,op1,0xAA,31);\n+}\n+\n+\n+vint16mf2_t test___riscv_vwsub_wx_i16mf2_mu(vbool32_t mask,vint16mf2_t merge,vint16mf2_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vwsub_wx_i16mf2_mu(mask,merge,op1,0xAA,31);\n+}\n+\n+\n+vint16m1_t test___riscv_vwsub_wx_i16m1_mu(vbool16_t mask,vint16m1_t merge,vint16m1_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vwsub_wx_i16m1_mu(mask,merge,op1,0xAA,31);\n+}\n+\n+\n+vint16m2_t test___riscv_vwsub_wx_i16m2_mu(vbool8_t mask,vint16m2_t merge,vint16m2_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vwsub_wx_i16m2_mu(mask,merge,op1,0xAA,31);\n+}\n+\n+\n+vint16m4_t test___riscv_vwsub_wx_i16m4_mu(vbool4_t mask,vint16m4_t merge,vint16m4_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vwsub_wx_i16m4_mu(mask,merge,op1,0xAA,31);\n+}\n+\n+\n+vint16m8_t test___riscv_vwsub_wx_i16m8_mu(vbool2_t mask,vint16m8_t merge,vint16m8_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vwsub_wx_i16m8_mu(mask,merge,op1,0xAA,31);\n+}\n+\n+\n+vint32mf2_t test___riscv_vwsub_wx_i32mf2_mu(vbool64_t mask,vint32mf2_t merge,vint32mf2_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vwsub_wx_i32mf2_mu(mask,merge,op1,0xAA,31);\n+}\n+\n+\n+vint32m1_t test___riscv_vwsub_wx_i32m1_mu(vbool32_t mask,vint32m1_t merge,vint32m1_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vwsub_wx_i32m1_mu(mask,merge,op1,0xAA,31);\n+}\n+\n+\n+vint32m2_t test___riscv_vwsub_wx_i32m2_mu(vbool16_t mask,vint32m2_t merge,vint32m2_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vwsub_wx_i32m2_mu(mask,merge,op1,0xAA,31);\n+}\n+\n+\n+vint32m4_t test___riscv_vwsub_wx_i32m4_mu(vbool8_t mask,vint32m4_t merge,vint32m4_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vwsub_wx_i32m4_mu(mask,merge,op1,0xAA,31);\n+}\n+\n+\n+vint32m8_t test___riscv_vwsub_wx_i32m8_mu(vbool4_t mask,vint32m8_t merge,vint32m8_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vwsub_wx_i32m8_mu(mask,merge,op1,0xAA,31);\n+}\n+\n+\n+vint64m1_t test___riscv_vwsub_wx_i64m1_mu(vbool64_t mask,vint64m1_t merge,vint64m1_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vwsub_wx_i64m1_mu(mask,merge,op1,0xAA,31);\n+}\n+\n+\n+vint64m2_t test___riscv_vwsub_wx_i64m2_mu(vbool32_t mask,vint64m2_t merge,vint64m2_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vwsub_wx_i64m2_mu(mask,merge,op1,0xAA,31);\n+}\n+\n+\n+vint64m4_t test___riscv_vwsub_wx_i64m4_mu(vbool16_t mask,vint64m4_t merge,vint64m4_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vwsub_wx_i64m4_mu(mask,merge,op1,0xAA,31);\n+}\n+\n+\n+vint64m8_t test___riscv_vwsub_wx_i64m8_mu(vbool8_t mask,vint64m8_t merge,vint64m8_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vwsub_wx_i64m8_mu(mask,merge,op1,0xAA,31);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf8,\\s*t[au],\\s*mu\\s+vwsub\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf4,\\s*t[au],\\s*mu\\s+vwsub\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf2,\\s*t[au],\\s*mu\\s+vwsub\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m1,\\s*t[au],\\s*mu\\s+vwsub\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m2,\\s*t[au],\\s*mu\\s+vwsub\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m4,\\s*t[au],\\s*mu\\s+vwsub\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*mf4,\\s*t[au],\\s*mu\\s+vwsub\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*mf2,\\s*t[au],\\s*mu\\s+vwsub\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m1,\\s*t[au],\\s*mu\\s+vwsub\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m2,\\s*t[au],\\s*mu\\s+vwsub\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m4,\\s*t[au],\\s*mu\\s+vwsub\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*mf2,\\s*t[au],\\s*mu\\s+vwsub\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m1,\\s*t[au],\\s*mu\\s+vwsub\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m2,\\s*t[au],\\s*mu\\s+vwsub\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m4,\\s*t[au],\\s*mu\\s+vwsub\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */"}, {"sha": "773e92a08c05b1ac95e8ca1f12630f6577462104", "filename": "gcc/testsuite/gcc.target/riscv/rvv/base/vwsub_wx_mu-3.c", "status": "added", "additions": 111, "deletions": 0, "changes": 111, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/931b3d88313661128946775f9e8517c76111d891/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvwsub_wx_mu-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/931b3d88313661128946775f9e8517c76111d891/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvwsub_wx_mu-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvwsub_wx_mu-3.c?ref=931b3d88313661128946775f9e8517c76111d891", "patch": "@@ -0,0 +1,111 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32 -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vint16mf4_t test___riscv_vwsub_wx_i16mf4_mu(vbool64_t mask,vint16mf4_t merge,vint16mf4_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vwsub_wx_i16mf4_mu(mask,merge,op1,0xAA,32);\n+}\n+\n+\n+vint16mf2_t test___riscv_vwsub_wx_i16mf2_mu(vbool32_t mask,vint16mf2_t merge,vint16mf2_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vwsub_wx_i16mf2_mu(mask,merge,op1,0xAA,32);\n+}\n+\n+\n+vint16m1_t test___riscv_vwsub_wx_i16m1_mu(vbool16_t mask,vint16m1_t merge,vint16m1_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vwsub_wx_i16m1_mu(mask,merge,op1,0xAA,32);\n+}\n+\n+\n+vint16m2_t test___riscv_vwsub_wx_i16m2_mu(vbool8_t mask,vint16m2_t merge,vint16m2_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vwsub_wx_i16m2_mu(mask,merge,op1,0xAA,32);\n+}\n+\n+\n+vint16m4_t test___riscv_vwsub_wx_i16m4_mu(vbool4_t mask,vint16m4_t merge,vint16m4_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vwsub_wx_i16m4_mu(mask,merge,op1,0xAA,32);\n+}\n+\n+\n+vint16m8_t test___riscv_vwsub_wx_i16m8_mu(vbool2_t mask,vint16m8_t merge,vint16m8_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vwsub_wx_i16m8_mu(mask,merge,op1,0xAA,32);\n+}\n+\n+\n+vint32mf2_t test___riscv_vwsub_wx_i32mf2_mu(vbool64_t mask,vint32mf2_t merge,vint32mf2_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vwsub_wx_i32mf2_mu(mask,merge,op1,0xAA,32);\n+}\n+\n+\n+vint32m1_t test___riscv_vwsub_wx_i32m1_mu(vbool32_t mask,vint32m1_t merge,vint32m1_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vwsub_wx_i32m1_mu(mask,merge,op1,0xAA,32);\n+}\n+\n+\n+vint32m2_t test___riscv_vwsub_wx_i32m2_mu(vbool16_t mask,vint32m2_t merge,vint32m2_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vwsub_wx_i32m2_mu(mask,merge,op1,0xAA,32);\n+}\n+\n+\n+vint32m4_t test___riscv_vwsub_wx_i32m4_mu(vbool8_t mask,vint32m4_t merge,vint32m4_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vwsub_wx_i32m4_mu(mask,merge,op1,0xAA,32);\n+}\n+\n+\n+vint32m8_t test___riscv_vwsub_wx_i32m8_mu(vbool4_t mask,vint32m8_t merge,vint32m8_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vwsub_wx_i32m8_mu(mask,merge,op1,0xAA,32);\n+}\n+\n+\n+vint64m1_t test___riscv_vwsub_wx_i64m1_mu(vbool64_t mask,vint64m1_t merge,vint64m1_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vwsub_wx_i64m1_mu(mask,merge,op1,0xAA,32);\n+}\n+\n+\n+vint64m2_t test___riscv_vwsub_wx_i64m2_mu(vbool32_t mask,vint64m2_t merge,vint64m2_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vwsub_wx_i64m2_mu(mask,merge,op1,0xAA,32);\n+}\n+\n+\n+vint64m4_t test___riscv_vwsub_wx_i64m4_mu(vbool16_t mask,vint64m4_t merge,vint64m4_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vwsub_wx_i64m4_mu(mask,merge,op1,0xAA,32);\n+}\n+\n+\n+vint64m8_t test___riscv_vwsub_wx_i64m8_mu(vbool8_t mask,vint64m8_t merge,vint64m8_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vwsub_wx_i64m8_mu(mask,merge,op1,0xAA,32);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*t[au],\\s*mu\\s+vwsub\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*t[au],\\s*mu\\s+vwsub\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*t[au],\\s*mu\\s+vwsub\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*t[au],\\s*mu\\s+vwsub\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m2,\\s*t[au],\\s*mu\\s+vwsub\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m4,\\s*t[au],\\s*mu\\s+vwsub\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*t[au],\\s*mu\\s+vwsub\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*t[au],\\s*mu\\s+vwsub\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*t[au],\\s*mu\\s+vwsub\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*t[au],\\s*mu\\s+vwsub\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m4,\\s*t[au],\\s*mu\\s+vwsub\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*t[au],\\s*mu\\s+vwsub\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*t[au],\\s*mu\\s+vwsub\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*t[au],\\s*mu\\s+vwsub\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*t[au],\\s*mu\\s+vwsub\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */"}, {"sha": "f57f3ad70ce52ca810050db78a532c00d5c2a50c", "filename": "gcc/testsuite/gcc.target/riscv/rvv/base/vwsub_wx_tu-1.c", "status": "added", "additions": 111, "deletions": 0, "changes": 111, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/931b3d88313661128946775f9e8517c76111d891/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvwsub_wx_tu-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/931b3d88313661128946775f9e8517c76111d891/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvwsub_wx_tu-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvwsub_wx_tu-1.c?ref=931b3d88313661128946775f9e8517c76111d891", "patch": "@@ -0,0 +1,111 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32 -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vint16mf4_t test___riscv_vwsub_wx_i16mf4_tu(vint16mf4_t merge,vint16mf4_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vwsub_wx_i16mf4_tu(merge,op1,0xAA,vl);\n+}\n+\n+\n+vint16mf2_t test___riscv_vwsub_wx_i16mf2_tu(vint16mf2_t merge,vint16mf2_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vwsub_wx_i16mf2_tu(merge,op1,0xAA,vl);\n+}\n+\n+\n+vint16m1_t test___riscv_vwsub_wx_i16m1_tu(vint16m1_t merge,vint16m1_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vwsub_wx_i16m1_tu(merge,op1,0xAA,vl);\n+}\n+\n+\n+vint16m2_t test___riscv_vwsub_wx_i16m2_tu(vint16m2_t merge,vint16m2_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vwsub_wx_i16m2_tu(merge,op1,0xAA,vl);\n+}\n+\n+\n+vint16m4_t test___riscv_vwsub_wx_i16m4_tu(vint16m4_t merge,vint16m4_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vwsub_wx_i16m4_tu(merge,op1,0xAA,vl);\n+}\n+\n+\n+vint16m8_t test___riscv_vwsub_wx_i16m8_tu(vint16m8_t merge,vint16m8_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vwsub_wx_i16m8_tu(merge,op1,0xAA,vl);\n+}\n+\n+\n+vint32mf2_t test___riscv_vwsub_wx_i32mf2_tu(vint32mf2_t merge,vint32mf2_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vwsub_wx_i32mf2_tu(merge,op1,0xAA,vl);\n+}\n+\n+\n+vint32m1_t test___riscv_vwsub_wx_i32m1_tu(vint32m1_t merge,vint32m1_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vwsub_wx_i32m1_tu(merge,op1,0xAA,vl);\n+}\n+\n+\n+vint32m2_t test___riscv_vwsub_wx_i32m2_tu(vint32m2_t merge,vint32m2_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vwsub_wx_i32m2_tu(merge,op1,0xAA,vl);\n+}\n+\n+\n+vint32m4_t test___riscv_vwsub_wx_i32m4_tu(vint32m4_t merge,vint32m4_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vwsub_wx_i32m4_tu(merge,op1,0xAA,vl);\n+}\n+\n+\n+vint32m8_t test___riscv_vwsub_wx_i32m8_tu(vint32m8_t merge,vint32m8_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vwsub_wx_i32m8_tu(merge,op1,0xAA,vl);\n+}\n+\n+\n+vint64m1_t test___riscv_vwsub_wx_i64m1_tu(vint64m1_t merge,vint64m1_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vwsub_wx_i64m1_tu(merge,op1,0xAA,vl);\n+}\n+\n+\n+vint64m2_t test___riscv_vwsub_wx_i64m2_tu(vint64m2_t merge,vint64m2_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vwsub_wx_i64m2_tu(merge,op1,0xAA,vl);\n+}\n+\n+\n+vint64m4_t test___riscv_vwsub_wx_i64m4_tu(vint64m4_t merge,vint64m4_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vwsub_wx_i64m4_tu(merge,op1,0xAA,vl);\n+}\n+\n+\n+vint64m8_t test___riscv_vwsub_wx_i64m8_tu(vint64m8_t merge,vint64m8_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vwsub_wx_i64m8_tu(merge,op1,0xAA,vl);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*tu,\\s*m[au]\\s+vwsub\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*tu,\\s*m[au]\\s+vwsub\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*tu,\\s*m[au]\\s+vwsub\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*tu,\\s*m[au]\\s+vwsub\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m2,\\s*tu,\\s*m[au]\\s+vwsub\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m4,\\s*tu,\\s*m[au]\\s+vwsub\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*tu,\\s*m[au]\\s+vwsub\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*tu,\\s*m[au]\\s+vwsub\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*tu,\\s*m[au]\\s+vwsub\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*tu,\\s*m[au]\\s+vwsub\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m4,\\s*tu,\\s*m[au]\\s+vwsub\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*tu,\\s*m[au]\\s+vwsub\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*tu,\\s*m[au]\\s+vwsub\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*tu,\\s*m[au]\\s+vwsub\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*tu,\\s*m[au]\\s+vwsub\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 1 } } */"}, {"sha": "3667c824da35ae5da6ba6cfb3e6ea5ac4e09572e", "filename": "gcc/testsuite/gcc.target/riscv/rvv/base/vwsub_wx_tu-2.c", "status": "added", "additions": 111, "deletions": 0, "changes": 111, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/931b3d88313661128946775f9e8517c76111d891/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvwsub_wx_tu-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/931b3d88313661128946775f9e8517c76111d891/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvwsub_wx_tu-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvwsub_wx_tu-2.c?ref=931b3d88313661128946775f9e8517c76111d891", "patch": "@@ -0,0 +1,111 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32 -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vint16mf4_t test___riscv_vwsub_wx_i16mf4_tu(vint16mf4_t merge,vint16mf4_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vwsub_wx_i16mf4_tu(merge,op1,0xAA,31);\n+}\n+\n+\n+vint16mf2_t test___riscv_vwsub_wx_i16mf2_tu(vint16mf2_t merge,vint16mf2_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vwsub_wx_i16mf2_tu(merge,op1,0xAA,31);\n+}\n+\n+\n+vint16m1_t test___riscv_vwsub_wx_i16m1_tu(vint16m1_t merge,vint16m1_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vwsub_wx_i16m1_tu(merge,op1,0xAA,31);\n+}\n+\n+\n+vint16m2_t test___riscv_vwsub_wx_i16m2_tu(vint16m2_t merge,vint16m2_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vwsub_wx_i16m2_tu(merge,op1,0xAA,31);\n+}\n+\n+\n+vint16m4_t test___riscv_vwsub_wx_i16m4_tu(vint16m4_t merge,vint16m4_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vwsub_wx_i16m4_tu(merge,op1,0xAA,31);\n+}\n+\n+\n+vint16m8_t test___riscv_vwsub_wx_i16m8_tu(vint16m8_t merge,vint16m8_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vwsub_wx_i16m8_tu(merge,op1,0xAA,31);\n+}\n+\n+\n+vint32mf2_t test___riscv_vwsub_wx_i32mf2_tu(vint32mf2_t merge,vint32mf2_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vwsub_wx_i32mf2_tu(merge,op1,0xAA,31);\n+}\n+\n+\n+vint32m1_t test___riscv_vwsub_wx_i32m1_tu(vint32m1_t merge,vint32m1_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vwsub_wx_i32m1_tu(merge,op1,0xAA,31);\n+}\n+\n+\n+vint32m2_t test___riscv_vwsub_wx_i32m2_tu(vint32m2_t merge,vint32m2_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vwsub_wx_i32m2_tu(merge,op1,0xAA,31);\n+}\n+\n+\n+vint32m4_t test___riscv_vwsub_wx_i32m4_tu(vint32m4_t merge,vint32m4_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vwsub_wx_i32m4_tu(merge,op1,0xAA,31);\n+}\n+\n+\n+vint32m8_t test___riscv_vwsub_wx_i32m8_tu(vint32m8_t merge,vint32m8_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vwsub_wx_i32m8_tu(merge,op1,0xAA,31);\n+}\n+\n+\n+vint64m1_t test___riscv_vwsub_wx_i64m1_tu(vint64m1_t merge,vint64m1_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vwsub_wx_i64m1_tu(merge,op1,0xAA,31);\n+}\n+\n+\n+vint64m2_t test___riscv_vwsub_wx_i64m2_tu(vint64m2_t merge,vint64m2_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vwsub_wx_i64m2_tu(merge,op1,0xAA,31);\n+}\n+\n+\n+vint64m4_t test___riscv_vwsub_wx_i64m4_tu(vint64m4_t merge,vint64m4_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vwsub_wx_i64m4_tu(merge,op1,0xAA,31);\n+}\n+\n+\n+vint64m8_t test___riscv_vwsub_wx_i64m8_tu(vint64m8_t merge,vint64m8_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vwsub_wx_i64m8_tu(merge,op1,0xAA,31);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf8,\\s*tu,\\s*m[au]\\s+vwsub\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf4,\\s*tu,\\s*m[au]\\s+vwsub\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf2,\\s*tu,\\s*m[au]\\s+vwsub\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m1,\\s*tu,\\s*m[au]\\s+vwsub\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m2,\\s*tu,\\s*m[au]\\s+vwsub\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m4,\\s*tu,\\s*m[au]\\s+vwsub\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*mf4,\\s*tu,\\s*m[au]\\s+vwsub\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*mf2,\\s*tu,\\s*m[au]\\s+vwsub\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m1,\\s*tu,\\s*m[au]\\s+vwsub\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m2,\\s*tu,\\s*m[au]\\s+vwsub\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m4,\\s*tu,\\s*m[au]\\s+vwsub\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*mf2,\\s*tu,\\s*m[au]\\s+vwsub\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m1,\\s*tu,\\s*m[au]\\s+vwsub\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m2,\\s*tu,\\s*m[au]\\s+vwsub\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m4,\\s*tu,\\s*m[au]\\s+vwsub\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 1 } } */"}, {"sha": "9f0beb47348ebfe0d0a1f0028d897b0746548d26", "filename": "gcc/testsuite/gcc.target/riscv/rvv/base/vwsub_wx_tu-3.c", "status": "added", "additions": 111, "deletions": 0, "changes": 111, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/931b3d88313661128946775f9e8517c76111d891/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvwsub_wx_tu-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/931b3d88313661128946775f9e8517c76111d891/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvwsub_wx_tu-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvwsub_wx_tu-3.c?ref=931b3d88313661128946775f9e8517c76111d891", "patch": "@@ -0,0 +1,111 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32 -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vint16mf4_t test___riscv_vwsub_wx_i16mf4_tu(vint16mf4_t merge,vint16mf4_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vwsub_wx_i16mf4_tu(merge,op1,0xAA,32);\n+}\n+\n+\n+vint16mf2_t test___riscv_vwsub_wx_i16mf2_tu(vint16mf2_t merge,vint16mf2_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vwsub_wx_i16mf2_tu(merge,op1,0xAA,32);\n+}\n+\n+\n+vint16m1_t test___riscv_vwsub_wx_i16m1_tu(vint16m1_t merge,vint16m1_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vwsub_wx_i16m1_tu(merge,op1,0xAA,32);\n+}\n+\n+\n+vint16m2_t test___riscv_vwsub_wx_i16m2_tu(vint16m2_t merge,vint16m2_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vwsub_wx_i16m2_tu(merge,op1,0xAA,32);\n+}\n+\n+\n+vint16m4_t test___riscv_vwsub_wx_i16m4_tu(vint16m4_t merge,vint16m4_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vwsub_wx_i16m4_tu(merge,op1,0xAA,32);\n+}\n+\n+\n+vint16m8_t test___riscv_vwsub_wx_i16m8_tu(vint16m8_t merge,vint16m8_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vwsub_wx_i16m8_tu(merge,op1,0xAA,32);\n+}\n+\n+\n+vint32mf2_t test___riscv_vwsub_wx_i32mf2_tu(vint32mf2_t merge,vint32mf2_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vwsub_wx_i32mf2_tu(merge,op1,0xAA,32);\n+}\n+\n+\n+vint32m1_t test___riscv_vwsub_wx_i32m1_tu(vint32m1_t merge,vint32m1_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vwsub_wx_i32m1_tu(merge,op1,0xAA,32);\n+}\n+\n+\n+vint32m2_t test___riscv_vwsub_wx_i32m2_tu(vint32m2_t merge,vint32m2_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vwsub_wx_i32m2_tu(merge,op1,0xAA,32);\n+}\n+\n+\n+vint32m4_t test___riscv_vwsub_wx_i32m4_tu(vint32m4_t merge,vint32m4_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vwsub_wx_i32m4_tu(merge,op1,0xAA,32);\n+}\n+\n+\n+vint32m8_t test___riscv_vwsub_wx_i32m8_tu(vint32m8_t merge,vint32m8_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vwsub_wx_i32m8_tu(merge,op1,0xAA,32);\n+}\n+\n+\n+vint64m1_t test___riscv_vwsub_wx_i64m1_tu(vint64m1_t merge,vint64m1_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vwsub_wx_i64m1_tu(merge,op1,0xAA,32);\n+}\n+\n+\n+vint64m2_t test___riscv_vwsub_wx_i64m2_tu(vint64m2_t merge,vint64m2_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vwsub_wx_i64m2_tu(merge,op1,0xAA,32);\n+}\n+\n+\n+vint64m4_t test___riscv_vwsub_wx_i64m4_tu(vint64m4_t merge,vint64m4_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vwsub_wx_i64m4_tu(merge,op1,0xAA,32);\n+}\n+\n+\n+vint64m8_t test___riscv_vwsub_wx_i64m8_tu(vint64m8_t merge,vint64m8_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vwsub_wx_i64m8_tu(merge,op1,0xAA,32);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*tu,\\s*m[au]\\s+vwsub\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*tu,\\s*m[au]\\s+vwsub\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*tu,\\s*m[au]\\s+vwsub\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*tu,\\s*m[au]\\s+vwsub\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m2,\\s*tu,\\s*m[au]\\s+vwsub\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m4,\\s*tu,\\s*m[au]\\s+vwsub\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*tu,\\s*m[au]\\s+vwsub\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*tu,\\s*m[au]\\s+vwsub\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*tu,\\s*m[au]\\s+vwsub\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*tu,\\s*m[au]\\s+vwsub\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m4,\\s*tu,\\s*m[au]\\s+vwsub\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*tu,\\s*m[au]\\s+vwsub\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*tu,\\s*m[au]\\s+vwsub\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*tu,\\s*m[au]\\s+vwsub\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*tu,\\s*m[au]\\s+vwsub\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 1 } } */"}, {"sha": "6f187798d53350ca9f4928cb81ff2a2b9c9c355a", "filename": "gcc/testsuite/gcc.target/riscv/rvv/base/vwsub_wx_tum-1.c", "status": "added", "additions": 111, "deletions": 0, "changes": 111, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/931b3d88313661128946775f9e8517c76111d891/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvwsub_wx_tum-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/931b3d88313661128946775f9e8517c76111d891/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvwsub_wx_tum-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvwsub_wx_tum-1.c?ref=931b3d88313661128946775f9e8517c76111d891", "patch": "@@ -0,0 +1,111 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32 -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vint16mf4_t test___riscv_vwsub_wx_i16mf4_tum(vbool64_t mask,vint16mf4_t merge,vint16mf4_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vwsub_wx_i16mf4_tum(mask,merge,op1,0xAA,vl);\n+}\n+\n+\n+vint16mf2_t test___riscv_vwsub_wx_i16mf2_tum(vbool32_t mask,vint16mf2_t merge,vint16mf2_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vwsub_wx_i16mf2_tum(mask,merge,op1,0xAA,vl);\n+}\n+\n+\n+vint16m1_t test___riscv_vwsub_wx_i16m1_tum(vbool16_t mask,vint16m1_t merge,vint16m1_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vwsub_wx_i16m1_tum(mask,merge,op1,0xAA,vl);\n+}\n+\n+\n+vint16m2_t test___riscv_vwsub_wx_i16m2_tum(vbool8_t mask,vint16m2_t merge,vint16m2_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vwsub_wx_i16m2_tum(mask,merge,op1,0xAA,vl);\n+}\n+\n+\n+vint16m4_t test___riscv_vwsub_wx_i16m4_tum(vbool4_t mask,vint16m4_t merge,vint16m4_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vwsub_wx_i16m4_tum(mask,merge,op1,0xAA,vl);\n+}\n+\n+\n+vint16m8_t test___riscv_vwsub_wx_i16m8_tum(vbool2_t mask,vint16m8_t merge,vint16m8_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vwsub_wx_i16m8_tum(mask,merge,op1,0xAA,vl);\n+}\n+\n+\n+vint32mf2_t test___riscv_vwsub_wx_i32mf2_tum(vbool64_t mask,vint32mf2_t merge,vint32mf2_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vwsub_wx_i32mf2_tum(mask,merge,op1,0xAA,vl);\n+}\n+\n+\n+vint32m1_t test___riscv_vwsub_wx_i32m1_tum(vbool32_t mask,vint32m1_t merge,vint32m1_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vwsub_wx_i32m1_tum(mask,merge,op1,0xAA,vl);\n+}\n+\n+\n+vint32m2_t test___riscv_vwsub_wx_i32m2_tum(vbool16_t mask,vint32m2_t merge,vint32m2_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vwsub_wx_i32m2_tum(mask,merge,op1,0xAA,vl);\n+}\n+\n+\n+vint32m4_t test___riscv_vwsub_wx_i32m4_tum(vbool8_t mask,vint32m4_t merge,vint32m4_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vwsub_wx_i32m4_tum(mask,merge,op1,0xAA,vl);\n+}\n+\n+\n+vint32m8_t test___riscv_vwsub_wx_i32m8_tum(vbool4_t mask,vint32m8_t merge,vint32m8_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vwsub_wx_i32m8_tum(mask,merge,op1,0xAA,vl);\n+}\n+\n+\n+vint64m1_t test___riscv_vwsub_wx_i64m1_tum(vbool64_t mask,vint64m1_t merge,vint64m1_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vwsub_wx_i64m1_tum(mask,merge,op1,0xAA,vl);\n+}\n+\n+\n+vint64m2_t test___riscv_vwsub_wx_i64m2_tum(vbool32_t mask,vint64m2_t merge,vint64m2_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vwsub_wx_i64m2_tum(mask,merge,op1,0xAA,vl);\n+}\n+\n+\n+vint64m4_t test___riscv_vwsub_wx_i64m4_tum(vbool16_t mask,vint64m4_t merge,vint64m4_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vwsub_wx_i64m4_tum(mask,merge,op1,0xAA,vl);\n+}\n+\n+\n+vint64m8_t test___riscv_vwsub_wx_i64m8_tum(vbool8_t mask,vint64m8_t merge,vint64m8_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vwsub_wx_i64m8_tum(mask,merge,op1,0xAA,vl);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*tu,\\s*m[au]\\s+vwsub\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*tu,\\s*m[au]\\s+vwsub\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*tu,\\s*m[au]\\s+vwsub\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*tu,\\s*m[au]\\s+vwsub\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m2,\\s*tu,\\s*m[au]\\s+vwsub\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m4,\\s*tu,\\s*m[au]\\s+vwsub\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*tu,\\s*m[au]\\s+vwsub\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*tu,\\s*m[au]\\s+vwsub\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*tu,\\s*m[au]\\s+vwsub\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*tu,\\s*m[au]\\s+vwsub\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m4,\\s*tu,\\s*m[au]\\s+vwsub\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*tu,\\s*m[au]\\s+vwsub\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*tu,\\s*m[au]\\s+vwsub\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*tu,\\s*m[au]\\s+vwsub\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*tu,\\s*m[au]\\s+vwsub\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */"}, {"sha": "65037d4b7f0037b648473d9ec6c6a51960ed14a9", "filename": "gcc/testsuite/gcc.target/riscv/rvv/base/vwsub_wx_tum-2.c", "status": "added", "additions": 111, "deletions": 0, "changes": 111, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/931b3d88313661128946775f9e8517c76111d891/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvwsub_wx_tum-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/931b3d88313661128946775f9e8517c76111d891/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvwsub_wx_tum-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvwsub_wx_tum-2.c?ref=931b3d88313661128946775f9e8517c76111d891", "patch": "@@ -0,0 +1,111 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32 -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vint16mf4_t test___riscv_vwsub_wx_i16mf4_tum(vbool64_t mask,vint16mf4_t merge,vint16mf4_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vwsub_wx_i16mf4_tum(mask,merge,op1,0xAA,31);\n+}\n+\n+\n+vint16mf2_t test___riscv_vwsub_wx_i16mf2_tum(vbool32_t mask,vint16mf2_t merge,vint16mf2_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vwsub_wx_i16mf2_tum(mask,merge,op1,0xAA,31);\n+}\n+\n+\n+vint16m1_t test___riscv_vwsub_wx_i16m1_tum(vbool16_t mask,vint16m1_t merge,vint16m1_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vwsub_wx_i16m1_tum(mask,merge,op1,0xAA,31);\n+}\n+\n+\n+vint16m2_t test___riscv_vwsub_wx_i16m2_tum(vbool8_t mask,vint16m2_t merge,vint16m2_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vwsub_wx_i16m2_tum(mask,merge,op1,0xAA,31);\n+}\n+\n+\n+vint16m4_t test___riscv_vwsub_wx_i16m4_tum(vbool4_t mask,vint16m4_t merge,vint16m4_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vwsub_wx_i16m4_tum(mask,merge,op1,0xAA,31);\n+}\n+\n+\n+vint16m8_t test___riscv_vwsub_wx_i16m8_tum(vbool2_t mask,vint16m8_t merge,vint16m8_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vwsub_wx_i16m8_tum(mask,merge,op1,0xAA,31);\n+}\n+\n+\n+vint32mf2_t test___riscv_vwsub_wx_i32mf2_tum(vbool64_t mask,vint32mf2_t merge,vint32mf2_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vwsub_wx_i32mf2_tum(mask,merge,op1,0xAA,31);\n+}\n+\n+\n+vint32m1_t test___riscv_vwsub_wx_i32m1_tum(vbool32_t mask,vint32m1_t merge,vint32m1_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vwsub_wx_i32m1_tum(mask,merge,op1,0xAA,31);\n+}\n+\n+\n+vint32m2_t test___riscv_vwsub_wx_i32m2_tum(vbool16_t mask,vint32m2_t merge,vint32m2_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vwsub_wx_i32m2_tum(mask,merge,op1,0xAA,31);\n+}\n+\n+\n+vint32m4_t test___riscv_vwsub_wx_i32m4_tum(vbool8_t mask,vint32m4_t merge,vint32m4_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vwsub_wx_i32m4_tum(mask,merge,op1,0xAA,31);\n+}\n+\n+\n+vint32m8_t test___riscv_vwsub_wx_i32m8_tum(vbool4_t mask,vint32m8_t merge,vint32m8_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vwsub_wx_i32m8_tum(mask,merge,op1,0xAA,31);\n+}\n+\n+\n+vint64m1_t test___riscv_vwsub_wx_i64m1_tum(vbool64_t mask,vint64m1_t merge,vint64m1_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vwsub_wx_i64m1_tum(mask,merge,op1,0xAA,31);\n+}\n+\n+\n+vint64m2_t test___riscv_vwsub_wx_i64m2_tum(vbool32_t mask,vint64m2_t merge,vint64m2_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vwsub_wx_i64m2_tum(mask,merge,op1,0xAA,31);\n+}\n+\n+\n+vint64m4_t test___riscv_vwsub_wx_i64m4_tum(vbool16_t mask,vint64m4_t merge,vint64m4_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vwsub_wx_i64m4_tum(mask,merge,op1,0xAA,31);\n+}\n+\n+\n+vint64m8_t test___riscv_vwsub_wx_i64m8_tum(vbool8_t mask,vint64m8_t merge,vint64m8_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vwsub_wx_i64m8_tum(mask,merge,op1,0xAA,31);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf8,\\s*tu,\\s*m[au]\\s+vwsub\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf4,\\s*tu,\\s*m[au]\\s+vwsub\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf2,\\s*tu,\\s*m[au]\\s+vwsub\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m1,\\s*tu,\\s*m[au]\\s+vwsub\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m2,\\s*tu,\\s*m[au]\\s+vwsub\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m4,\\s*tu,\\s*m[au]\\s+vwsub\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*mf4,\\s*tu,\\s*m[au]\\s+vwsub\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*mf2,\\s*tu,\\s*m[au]\\s+vwsub\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m1,\\s*tu,\\s*m[au]\\s+vwsub\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m2,\\s*tu,\\s*m[au]\\s+vwsub\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m4,\\s*tu,\\s*m[au]\\s+vwsub\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*mf2,\\s*tu,\\s*m[au]\\s+vwsub\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m1,\\s*tu,\\s*m[au]\\s+vwsub\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m2,\\s*tu,\\s*m[au]\\s+vwsub\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m4,\\s*tu,\\s*m[au]\\s+vwsub\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */"}, {"sha": "f0b6891d1ff874995085007fb25ecfd7d87551ed", "filename": "gcc/testsuite/gcc.target/riscv/rvv/base/vwsub_wx_tum-3.c", "status": "added", "additions": 111, "deletions": 0, "changes": 111, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/931b3d88313661128946775f9e8517c76111d891/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvwsub_wx_tum-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/931b3d88313661128946775f9e8517c76111d891/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvwsub_wx_tum-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvwsub_wx_tum-3.c?ref=931b3d88313661128946775f9e8517c76111d891", "patch": "@@ -0,0 +1,111 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32 -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vint16mf4_t test___riscv_vwsub_wx_i16mf4_tum(vbool64_t mask,vint16mf4_t merge,vint16mf4_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vwsub_wx_i16mf4_tum(mask,merge,op1,0xAA,32);\n+}\n+\n+\n+vint16mf2_t test___riscv_vwsub_wx_i16mf2_tum(vbool32_t mask,vint16mf2_t merge,vint16mf2_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vwsub_wx_i16mf2_tum(mask,merge,op1,0xAA,32);\n+}\n+\n+\n+vint16m1_t test___riscv_vwsub_wx_i16m1_tum(vbool16_t mask,vint16m1_t merge,vint16m1_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vwsub_wx_i16m1_tum(mask,merge,op1,0xAA,32);\n+}\n+\n+\n+vint16m2_t test___riscv_vwsub_wx_i16m2_tum(vbool8_t mask,vint16m2_t merge,vint16m2_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vwsub_wx_i16m2_tum(mask,merge,op1,0xAA,32);\n+}\n+\n+\n+vint16m4_t test___riscv_vwsub_wx_i16m4_tum(vbool4_t mask,vint16m4_t merge,vint16m4_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vwsub_wx_i16m4_tum(mask,merge,op1,0xAA,32);\n+}\n+\n+\n+vint16m8_t test___riscv_vwsub_wx_i16m8_tum(vbool2_t mask,vint16m8_t merge,vint16m8_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vwsub_wx_i16m8_tum(mask,merge,op1,0xAA,32);\n+}\n+\n+\n+vint32mf2_t test___riscv_vwsub_wx_i32mf2_tum(vbool64_t mask,vint32mf2_t merge,vint32mf2_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vwsub_wx_i32mf2_tum(mask,merge,op1,0xAA,32);\n+}\n+\n+\n+vint32m1_t test___riscv_vwsub_wx_i32m1_tum(vbool32_t mask,vint32m1_t merge,vint32m1_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vwsub_wx_i32m1_tum(mask,merge,op1,0xAA,32);\n+}\n+\n+\n+vint32m2_t test___riscv_vwsub_wx_i32m2_tum(vbool16_t mask,vint32m2_t merge,vint32m2_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vwsub_wx_i32m2_tum(mask,merge,op1,0xAA,32);\n+}\n+\n+\n+vint32m4_t test___riscv_vwsub_wx_i32m4_tum(vbool8_t mask,vint32m4_t merge,vint32m4_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vwsub_wx_i32m4_tum(mask,merge,op1,0xAA,32);\n+}\n+\n+\n+vint32m8_t test___riscv_vwsub_wx_i32m8_tum(vbool4_t mask,vint32m8_t merge,vint32m8_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vwsub_wx_i32m8_tum(mask,merge,op1,0xAA,32);\n+}\n+\n+\n+vint64m1_t test___riscv_vwsub_wx_i64m1_tum(vbool64_t mask,vint64m1_t merge,vint64m1_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vwsub_wx_i64m1_tum(mask,merge,op1,0xAA,32);\n+}\n+\n+\n+vint64m2_t test___riscv_vwsub_wx_i64m2_tum(vbool32_t mask,vint64m2_t merge,vint64m2_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vwsub_wx_i64m2_tum(mask,merge,op1,0xAA,32);\n+}\n+\n+\n+vint64m4_t test___riscv_vwsub_wx_i64m4_tum(vbool16_t mask,vint64m4_t merge,vint64m4_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vwsub_wx_i64m4_tum(mask,merge,op1,0xAA,32);\n+}\n+\n+\n+vint64m8_t test___riscv_vwsub_wx_i64m8_tum(vbool8_t mask,vint64m8_t merge,vint64m8_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vwsub_wx_i64m8_tum(mask,merge,op1,0xAA,32);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*tu,\\s*m[au]\\s+vwsub\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*tu,\\s*m[au]\\s+vwsub\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*tu,\\s*m[au]\\s+vwsub\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*tu,\\s*m[au]\\s+vwsub\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m2,\\s*tu,\\s*m[au]\\s+vwsub\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m4,\\s*tu,\\s*m[au]\\s+vwsub\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*tu,\\s*m[au]\\s+vwsub\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*tu,\\s*m[au]\\s+vwsub\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*tu,\\s*m[au]\\s+vwsub\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*tu,\\s*m[au]\\s+vwsub\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m4,\\s*tu,\\s*m[au]\\s+vwsub\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*tu,\\s*m[au]\\s+vwsub\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*tu,\\s*m[au]\\s+vwsub\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*tu,\\s*m[au]\\s+vwsub\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*tu,\\s*m[au]\\s+vwsub\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */"}, {"sha": "d3221238bcb8484ee8c2be1e9bd427409195b3c5", "filename": "gcc/testsuite/gcc.target/riscv/rvv/base/vwsub_wx_tumu-1.c", "status": "added", "additions": 111, "deletions": 0, "changes": 111, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/931b3d88313661128946775f9e8517c76111d891/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvwsub_wx_tumu-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/931b3d88313661128946775f9e8517c76111d891/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvwsub_wx_tumu-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvwsub_wx_tumu-1.c?ref=931b3d88313661128946775f9e8517c76111d891", "patch": "@@ -0,0 +1,111 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32 -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vint16mf4_t test___riscv_vwsub_wx_i16mf4_tumu(vbool64_t mask,vint16mf4_t merge,vint16mf4_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vwsub_wx_i16mf4_tumu(mask,merge,op1,0xAA,vl);\n+}\n+\n+\n+vint16mf2_t test___riscv_vwsub_wx_i16mf2_tumu(vbool32_t mask,vint16mf2_t merge,vint16mf2_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vwsub_wx_i16mf2_tumu(mask,merge,op1,0xAA,vl);\n+}\n+\n+\n+vint16m1_t test___riscv_vwsub_wx_i16m1_tumu(vbool16_t mask,vint16m1_t merge,vint16m1_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vwsub_wx_i16m1_tumu(mask,merge,op1,0xAA,vl);\n+}\n+\n+\n+vint16m2_t test___riscv_vwsub_wx_i16m2_tumu(vbool8_t mask,vint16m2_t merge,vint16m2_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vwsub_wx_i16m2_tumu(mask,merge,op1,0xAA,vl);\n+}\n+\n+\n+vint16m4_t test___riscv_vwsub_wx_i16m4_tumu(vbool4_t mask,vint16m4_t merge,vint16m4_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vwsub_wx_i16m4_tumu(mask,merge,op1,0xAA,vl);\n+}\n+\n+\n+vint16m8_t test___riscv_vwsub_wx_i16m8_tumu(vbool2_t mask,vint16m8_t merge,vint16m8_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vwsub_wx_i16m8_tumu(mask,merge,op1,0xAA,vl);\n+}\n+\n+\n+vint32mf2_t test___riscv_vwsub_wx_i32mf2_tumu(vbool64_t mask,vint32mf2_t merge,vint32mf2_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vwsub_wx_i32mf2_tumu(mask,merge,op1,0xAA,vl);\n+}\n+\n+\n+vint32m1_t test___riscv_vwsub_wx_i32m1_tumu(vbool32_t mask,vint32m1_t merge,vint32m1_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vwsub_wx_i32m1_tumu(mask,merge,op1,0xAA,vl);\n+}\n+\n+\n+vint32m2_t test___riscv_vwsub_wx_i32m2_tumu(vbool16_t mask,vint32m2_t merge,vint32m2_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vwsub_wx_i32m2_tumu(mask,merge,op1,0xAA,vl);\n+}\n+\n+\n+vint32m4_t test___riscv_vwsub_wx_i32m4_tumu(vbool8_t mask,vint32m4_t merge,vint32m4_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vwsub_wx_i32m4_tumu(mask,merge,op1,0xAA,vl);\n+}\n+\n+\n+vint32m8_t test___riscv_vwsub_wx_i32m8_tumu(vbool4_t mask,vint32m8_t merge,vint32m8_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vwsub_wx_i32m8_tumu(mask,merge,op1,0xAA,vl);\n+}\n+\n+\n+vint64m1_t test___riscv_vwsub_wx_i64m1_tumu(vbool64_t mask,vint64m1_t merge,vint64m1_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vwsub_wx_i64m1_tumu(mask,merge,op1,0xAA,vl);\n+}\n+\n+\n+vint64m2_t test___riscv_vwsub_wx_i64m2_tumu(vbool32_t mask,vint64m2_t merge,vint64m2_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vwsub_wx_i64m2_tumu(mask,merge,op1,0xAA,vl);\n+}\n+\n+\n+vint64m4_t test___riscv_vwsub_wx_i64m4_tumu(vbool16_t mask,vint64m4_t merge,vint64m4_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vwsub_wx_i64m4_tumu(mask,merge,op1,0xAA,vl);\n+}\n+\n+\n+vint64m8_t test___riscv_vwsub_wx_i64m8_tumu(vbool8_t mask,vint64m8_t merge,vint64m8_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vwsub_wx_i64m8_tumu(mask,merge,op1,0xAA,vl);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*tu,\\s*mu\\s+vwsub\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*tu,\\s*mu\\s+vwsub\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*tu,\\s*mu\\s+vwsub\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*tu,\\s*mu\\s+vwsub\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m2,\\s*tu,\\s*mu\\s+vwsub\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m4,\\s*tu,\\s*mu\\s+vwsub\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*tu,\\s*mu\\s+vwsub\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*tu,\\s*mu\\s+vwsub\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*tu,\\s*mu\\s+vwsub\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*tu,\\s*mu\\s+vwsub\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m4,\\s*tu,\\s*mu\\s+vwsub\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*tu,\\s*mu\\s+vwsub\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*tu,\\s*mu\\s+vwsub\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*tu,\\s*mu\\s+vwsub\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*tu,\\s*mu\\s+vwsub\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */"}, {"sha": "a20e58b125df26b8e9704c6bf1b2b33682c14c71", "filename": "gcc/testsuite/gcc.target/riscv/rvv/base/vwsub_wx_tumu-2.c", "status": "added", "additions": 111, "deletions": 0, "changes": 111, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/931b3d88313661128946775f9e8517c76111d891/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvwsub_wx_tumu-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/931b3d88313661128946775f9e8517c76111d891/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvwsub_wx_tumu-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvwsub_wx_tumu-2.c?ref=931b3d88313661128946775f9e8517c76111d891", "patch": "@@ -0,0 +1,111 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32 -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vint16mf4_t test___riscv_vwsub_wx_i16mf4_tumu(vbool64_t mask,vint16mf4_t merge,vint16mf4_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vwsub_wx_i16mf4_tumu(mask,merge,op1,0xAA,31);\n+}\n+\n+\n+vint16mf2_t test___riscv_vwsub_wx_i16mf2_tumu(vbool32_t mask,vint16mf2_t merge,vint16mf2_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vwsub_wx_i16mf2_tumu(mask,merge,op1,0xAA,31);\n+}\n+\n+\n+vint16m1_t test___riscv_vwsub_wx_i16m1_tumu(vbool16_t mask,vint16m1_t merge,vint16m1_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vwsub_wx_i16m1_tumu(mask,merge,op1,0xAA,31);\n+}\n+\n+\n+vint16m2_t test___riscv_vwsub_wx_i16m2_tumu(vbool8_t mask,vint16m2_t merge,vint16m2_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vwsub_wx_i16m2_tumu(mask,merge,op1,0xAA,31);\n+}\n+\n+\n+vint16m4_t test___riscv_vwsub_wx_i16m4_tumu(vbool4_t mask,vint16m4_t merge,vint16m4_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vwsub_wx_i16m4_tumu(mask,merge,op1,0xAA,31);\n+}\n+\n+\n+vint16m8_t test___riscv_vwsub_wx_i16m8_tumu(vbool2_t mask,vint16m8_t merge,vint16m8_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vwsub_wx_i16m8_tumu(mask,merge,op1,0xAA,31);\n+}\n+\n+\n+vint32mf2_t test___riscv_vwsub_wx_i32mf2_tumu(vbool64_t mask,vint32mf2_t merge,vint32mf2_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vwsub_wx_i32mf2_tumu(mask,merge,op1,0xAA,31);\n+}\n+\n+\n+vint32m1_t test___riscv_vwsub_wx_i32m1_tumu(vbool32_t mask,vint32m1_t merge,vint32m1_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vwsub_wx_i32m1_tumu(mask,merge,op1,0xAA,31);\n+}\n+\n+\n+vint32m2_t test___riscv_vwsub_wx_i32m2_tumu(vbool16_t mask,vint32m2_t merge,vint32m2_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vwsub_wx_i32m2_tumu(mask,merge,op1,0xAA,31);\n+}\n+\n+\n+vint32m4_t test___riscv_vwsub_wx_i32m4_tumu(vbool8_t mask,vint32m4_t merge,vint32m4_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vwsub_wx_i32m4_tumu(mask,merge,op1,0xAA,31);\n+}\n+\n+\n+vint32m8_t test___riscv_vwsub_wx_i32m8_tumu(vbool4_t mask,vint32m8_t merge,vint32m8_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vwsub_wx_i32m8_tumu(mask,merge,op1,0xAA,31);\n+}\n+\n+\n+vint64m1_t test___riscv_vwsub_wx_i64m1_tumu(vbool64_t mask,vint64m1_t merge,vint64m1_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vwsub_wx_i64m1_tumu(mask,merge,op1,0xAA,31);\n+}\n+\n+\n+vint64m2_t test___riscv_vwsub_wx_i64m2_tumu(vbool32_t mask,vint64m2_t merge,vint64m2_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vwsub_wx_i64m2_tumu(mask,merge,op1,0xAA,31);\n+}\n+\n+\n+vint64m4_t test___riscv_vwsub_wx_i64m4_tumu(vbool16_t mask,vint64m4_t merge,vint64m4_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vwsub_wx_i64m4_tumu(mask,merge,op1,0xAA,31);\n+}\n+\n+\n+vint64m8_t test___riscv_vwsub_wx_i64m8_tumu(vbool8_t mask,vint64m8_t merge,vint64m8_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vwsub_wx_i64m8_tumu(mask,merge,op1,0xAA,31);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf8,\\s*tu,\\s*mu\\s+vwsub\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf4,\\s*tu,\\s*mu\\s+vwsub\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf2,\\s*tu,\\s*mu\\s+vwsub\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m1,\\s*tu,\\s*mu\\s+vwsub\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m2,\\s*tu,\\s*mu\\s+vwsub\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m4,\\s*tu,\\s*mu\\s+vwsub\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*mf4,\\s*tu,\\s*mu\\s+vwsub\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*mf2,\\s*tu,\\s*mu\\s+vwsub\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m1,\\s*tu,\\s*mu\\s+vwsub\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m2,\\s*tu,\\s*mu\\s+vwsub\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m4,\\s*tu,\\s*mu\\s+vwsub\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*mf2,\\s*tu,\\s*mu\\s+vwsub\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m1,\\s*tu,\\s*mu\\s+vwsub\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m2,\\s*tu,\\s*mu\\s+vwsub\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m4,\\s*tu,\\s*mu\\s+vwsub\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */"}, {"sha": "f5a66ff2c12467ec4486d706cf86ddb5a4290166", "filename": "gcc/testsuite/gcc.target/riscv/rvv/base/vwsub_wx_tumu-3.c", "status": "added", "additions": 111, "deletions": 0, "changes": 111, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/931b3d88313661128946775f9e8517c76111d891/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvwsub_wx_tumu-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/931b3d88313661128946775f9e8517c76111d891/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvwsub_wx_tumu-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvwsub_wx_tumu-3.c?ref=931b3d88313661128946775f9e8517c76111d891", "patch": "@@ -0,0 +1,111 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32 -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vint16mf4_t test___riscv_vwsub_wx_i16mf4_tumu(vbool64_t mask,vint16mf4_t merge,vint16mf4_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vwsub_wx_i16mf4_tumu(mask,merge,op1,0xAA,32);\n+}\n+\n+\n+vint16mf2_t test___riscv_vwsub_wx_i16mf2_tumu(vbool32_t mask,vint16mf2_t merge,vint16mf2_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vwsub_wx_i16mf2_tumu(mask,merge,op1,0xAA,32);\n+}\n+\n+\n+vint16m1_t test___riscv_vwsub_wx_i16m1_tumu(vbool16_t mask,vint16m1_t merge,vint16m1_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vwsub_wx_i16m1_tumu(mask,merge,op1,0xAA,32);\n+}\n+\n+\n+vint16m2_t test___riscv_vwsub_wx_i16m2_tumu(vbool8_t mask,vint16m2_t merge,vint16m2_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vwsub_wx_i16m2_tumu(mask,merge,op1,0xAA,32);\n+}\n+\n+\n+vint16m4_t test___riscv_vwsub_wx_i16m4_tumu(vbool4_t mask,vint16m4_t merge,vint16m4_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vwsub_wx_i16m4_tumu(mask,merge,op1,0xAA,32);\n+}\n+\n+\n+vint16m8_t test___riscv_vwsub_wx_i16m8_tumu(vbool2_t mask,vint16m8_t merge,vint16m8_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vwsub_wx_i16m8_tumu(mask,merge,op1,0xAA,32);\n+}\n+\n+\n+vint32mf2_t test___riscv_vwsub_wx_i32mf2_tumu(vbool64_t mask,vint32mf2_t merge,vint32mf2_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vwsub_wx_i32mf2_tumu(mask,merge,op1,0xAA,32);\n+}\n+\n+\n+vint32m1_t test___riscv_vwsub_wx_i32m1_tumu(vbool32_t mask,vint32m1_t merge,vint32m1_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vwsub_wx_i32m1_tumu(mask,merge,op1,0xAA,32);\n+}\n+\n+\n+vint32m2_t test___riscv_vwsub_wx_i32m2_tumu(vbool16_t mask,vint32m2_t merge,vint32m2_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vwsub_wx_i32m2_tumu(mask,merge,op1,0xAA,32);\n+}\n+\n+\n+vint32m4_t test___riscv_vwsub_wx_i32m4_tumu(vbool8_t mask,vint32m4_t merge,vint32m4_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vwsub_wx_i32m4_tumu(mask,merge,op1,0xAA,32);\n+}\n+\n+\n+vint32m8_t test___riscv_vwsub_wx_i32m8_tumu(vbool4_t mask,vint32m8_t merge,vint32m8_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vwsub_wx_i32m8_tumu(mask,merge,op1,0xAA,32);\n+}\n+\n+\n+vint64m1_t test___riscv_vwsub_wx_i64m1_tumu(vbool64_t mask,vint64m1_t merge,vint64m1_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vwsub_wx_i64m1_tumu(mask,merge,op1,0xAA,32);\n+}\n+\n+\n+vint64m2_t test___riscv_vwsub_wx_i64m2_tumu(vbool32_t mask,vint64m2_t merge,vint64m2_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vwsub_wx_i64m2_tumu(mask,merge,op1,0xAA,32);\n+}\n+\n+\n+vint64m4_t test___riscv_vwsub_wx_i64m4_tumu(vbool16_t mask,vint64m4_t merge,vint64m4_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vwsub_wx_i64m4_tumu(mask,merge,op1,0xAA,32);\n+}\n+\n+\n+vint64m8_t test___riscv_vwsub_wx_i64m8_tumu(vbool8_t mask,vint64m8_t merge,vint64m8_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vwsub_wx_i64m8_tumu(mask,merge,op1,0xAA,32);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*tu,\\s*mu\\s+vwsub\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*tu,\\s*mu\\s+vwsub\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*tu,\\s*mu\\s+vwsub\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*tu,\\s*mu\\s+vwsub\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m2,\\s*tu,\\s*mu\\s+vwsub\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m4,\\s*tu,\\s*mu\\s+vwsub\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*tu,\\s*mu\\s+vwsub\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*tu,\\s*mu\\s+vwsub\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*tu,\\s*mu\\s+vwsub\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*tu,\\s*mu\\s+vwsub\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m4,\\s*tu,\\s*mu\\s+vwsub\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*tu,\\s*mu\\s+vwsub\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*tu,\\s*mu\\s+vwsub\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*tu,\\s*mu\\s+vwsub\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*tu,\\s*mu\\s+vwsub\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */"}]}