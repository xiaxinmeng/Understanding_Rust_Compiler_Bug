{"sha": "6abce7391ae63fd2808aa471aa9dd2679eb00496", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmFiY2U3MzkxYWU2M2ZkMjgwOGFhNDcxYWE5ZGQyNjc5ZWIwMDQ5Ng==", "commit": {"author": {"name": "Andrey Belevantsev", "email": "abel@ispras.ru", "date": "2018-04-09T10:19:50Z"}, "committer": {"name": "Andrey Belevantsev", "email": "abel@gcc.gnu.org", "date": "2018-04-09T10:19:50Z"}, "message": "re PR rtl-optimization/80463 (ICE with -fselective-scheduling2 and -fvar-tracking-assignments)\n\n       PR rtl-optimization/80463\n       PR rtl-optimization/83972\n       PR rtl-optimization/83480\n\n       * sel-sched-ir.c (has_dependence_note_mem_dep): Take into account the\n       correct producer for the insn.\n       (tidy_control_flow): Fixup seqnos in case of debug insns.\n\n       * gcc.dg/pr80463.c: New test.\n       * g++.dg/pr80463.C: Likewise.\n       * gcc.dg/pr83972.c: Likewise.\n\nFrom-SVN: r259231", "tree": {"sha": "6eed31f778672ee91998c2248cd01ed9927de7fd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6eed31f778672ee91998c2248cd01ed9927de7fd"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6abce7391ae63fd2808aa471aa9dd2679eb00496", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6abce7391ae63fd2808aa471aa9dd2679eb00496", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6abce7391ae63fd2808aa471aa9dd2679eb00496", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6abce7391ae63fd2808aa471aa9dd2679eb00496/comments", "author": {"login": "abonzo", "id": 20396542, "node_id": "MDQ6VXNlcjIwMzk2NTQy", "avatar_url": "https://avatars.githubusercontent.com/u/20396542?v=4", "gravatar_id": "", "url": "https://api.github.com/users/abonzo", "html_url": "https://github.com/abonzo", "followers_url": "https://api.github.com/users/abonzo/followers", "following_url": "https://api.github.com/users/abonzo/following{/other_user}", "gists_url": "https://api.github.com/users/abonzo/gists{/gist_id}", "starred_url": "https://api.github.com/users/abonzo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/abonzo/subscriptions", "organizations_url": "https://api.github.com/users/abonzo/orgs", "repos_url": "https://api.github.com/users/abonzo/repos", "events_url": "https://api.github.com/users/abonzo/events{/privacy}", "received_events_url": "https://api.github.com/users/abonzo/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "8e9a9b014264250eeda5544cafbdc16eba9489e1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8e9a9b014264250eeda5544cafbdc16eba9489e1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8e9a9b014264250eeda5544cafbdc16eba9489e1"}], "stats": {"total": 154, "additions": 149, "deletions": 5}, "files": [{"sha": "eef1fe43d621805450ce15696ddd09a1b7b9e8fb", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6abce7391ae63fd2808aa471aa9dd2679eb00496/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6abce7391ae63fd2808aa471aa9dd2679eb00496/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=6abce7391ae63fd2808aa471aa9dd2679eb00496", "patch": "@@ -1,3 +1,13 @@\n+2018-04-09  Andrey Belevantsev  <abel@ispras.ru>\n+\n+\tPR rtl-optimization/80463\n+\tPR rtl-optimization/83972\n+\tPR rtl-optimization/83480\n+\n+\t* sel-sched-ir.c (has_dependence_note_mem_dep): Take into account the\n+\tcorrect producer for the insn.\n+\t(tidy_control_flow): Fixup seqnos in case of debug insns.\n+\n 2018-04-09  Andrey Belevantsev  <abel@ispras.ru>\n \n \tPR rtl-optimization/83913"}, {"sha": "ee970522890423a7a1bb81a4a03553d9f007252e", "filename": "gcc/sel-sched-ir.c", "status": "modified", "additions": 29, "deletions": 5, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6abce7391ae63fd2808aa471aa9dd2679eb00496/gcc%2Fsel-sched-ir.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6abce7391ae63fd2808aa471aa9dd2679eb00496/gcc%2Fsel-sched-ir.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsel-sched-ir.c?ref=6abce7391ae63fd2808aa471aa9dd2679eb00496", "patch": "@@ -3297,11 +3297,22 @@ has_dependence_note_mem_dep (rtx mem ATTRIBUTE_UNUSED,\n \n /* Note a dependence.  */\n static void\n-has_dependence_note_dep (insn_t pro ATTRIBUTE_UNUSED,\n-\t\t\t ds_t ds ATTRIBUTE_UNUSED)\n-{\n-  if (!sched_insns_conditions_mutex_p (has_dependence_data.pro,\n-\t\t\t\t       VINSN_INSN_RTX (has_dependence_data.con)))\n+has_dependence_note_dep (insn_t pro, ds_t ds ATTRIBUTE_UNUSED)\n+{\n+  insn_t real_pro = has_dependence_data.pro;\n+  insn_t real_con = VINSN_INSN_RTX (has_dependence_data.con);\n+\n+  /* We do not allow for debug insns to move through others unless they\n+     are at the start of bb.  This movement may create bookkeeping copies\n+     that later would not be able to move up, violating the invariant\n+     that a bookkeeping copy should be movable as the original insn.\n+     Detect that here and allow that movement if we allowed it before\n+     in the first place.  */\n+  if (DEBUG_INSN_P (real_con)\n+      && INSN_UID (NEXT_INSN (pro)) == INSN_UID (real_con))\n+    return;\n+\n+  if (!sched_insns_conditions_mutex_p (real_pro, real_con))\n     {\n       ds_t *dsp = &has_dependence_data.has_dep_p[has_dependence_data.where];\n \n@@ -3898,6 +3909,19 @@ tidy_control_flow (basic_block xbb, bool full_tidying)\n \n       gcc_assert (EDGE_SUCC (xbb->prev_bb, 0)->flags & EDGE_FALLTHRU);\n \n+      /* We could have skipped some debug insns which did not get removed with the block,\n+         and the seqnos could become incorrect.  Fix them up here.  */\n+      if (MAY_HAVE_DEBUG_INSNS && (sel_bb_head (xbb) != first || sel_bb_end (xbb) != last))\n+       {\n+         if (!sel_bb_empty_p (xbb->prev_bb))\n+           {\n+             int prev_seqno = INSN_SEQNO (sel_bb_end (xbb->prev_bb));\n+             if (prev_seqno > INSN_SEQNO (sel_bb_head (xbb)))\n+               for (insn_t insn = sel_bb_head (xbb); insn != first; insn = NEXT_INSN (insn))\n+                 INSN_SEQNO (insn) = prev_seqno + 1;\n+           }\n+       }\n+\n       /* It can turn out that after removing unused jump, basic block\n          that contained that jump, becomes empty too.  In such case\n          remove it too.  */"}, {"sha": "f89ddfe7e9ab6ec2f0b5a3e63b700a1662e31569", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6abce7391ae63fd2808aa471aa9dd2679eb00496/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6abce7391ae63fd2808aa471aa9dd2679eb00496/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=6abce7391ae63fd2808aa471aa9dd2679eb00496", "patch": "@@ -1,3 +1,13 @@\n+2018-04-09  Andrey Belevantsev  <abel@ispras.ru>\n+\n+\tPR rtl-optimization/80463\n+\tPR rtl-optimization/83972\n+\tPR rtl-optimization/83480\n+\n+\t* gcc.dg/pr80463.c: New test.\n+\t* g++.dg/pr80463.C: Likewise.\n+\t* gcc.dg/pr83972.c: Likewise.\n+\n 2018-04-09  Andrey Belevantsev  <abel@ispras.ru>\n \n \tPR rtl-optimization/83913"}, {"sha": "f4ea65ac5c0c9867545047063534ff83c5584e1f", "filename": "gcc/testsuite/g++.dg/pr80463.C", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6abce7391ae63fd2808aa471aa9dd2679eb00496/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fpr80463.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6abce7391ae63fd2808aa471aa9dd2679eb00496/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fpr80463.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fpr80463.C?ref=6abce7391ae63fd2808aa471aa9dd2679eb00496", "patch": "@@ -0,0 +1,20 @@\n+/* { dg-do compile { target powerpc*-*-* ia64-*-* i?86-*-* x86_64-*-* } } */\n+/* { dg-options \"-g -fselective-scheduling2 -O2 -fvar-tracking-assignments\" } */\n+\n+int *a;\n+int b, c;\n+void\n+d ()\n+{\n+  for (int e; c; e++)\n+    switch (e)\n+      {\n+      case 0:\n+       a[e] = 1;\n+      case 1:\n+       b = 2;\n+       break;\n+      default:\n+       a[e] = 3;\n+      }\n+}"}, {"sha": "cebf2fef1f32a3ea1ddbd26ff367ddc154577578", "filename": "gcc/testsuite/gcc.dg/pr80463.c", "status": "added", "additions": 54, "deletions": 0, "changes": 54, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6abce7391ae63fd2808aa471aa9dd2679eb00496/gcc%2Ftestsuite%2Fgcc.dg%2Fpr80463.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6abce7391ae63fd2808aa471aa9dd2679eb00496/gcc%2Ftestsuite%2Fgcc.dg%2Fpr80463.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr80463.c?ref=6abce7391ae63fd2808aa471aa9dd2679eb00496", "patch": "@@ -0,0 +1,54 @@\n+/* { dg-do compile { target powerpc*-*-* ia64-*-* i?86-*-* x86_64-*-* } } */\n+/* { dg-options \"-g -O2 -fvar-tracking-assignments -fselective-scheduling2 -ftree-loop-vectorize -fnon-call-exceptions -fno-tree-vrp -fno-gcse-lm -fno-tree-loop-im -fno-reorder-blocks-and-partition -fno-reorder-blocks -fno-move-loop-invariants -w\" } */\n+\n+short int t2;\n+int cd, aa, ft;\n+\n+void\n+dh (void)\n+{\n+  int qs = 0;\n+\n+  if (t2 < 1)\n+    {\n+      int bq = 0;\n+\n+      while (bq < 1)\n+        {\n+        }\n+\n+      while (t2 < 1)\n+        {\n+          if (t2 == 0)\n+            {\n+              bq = 0;\n+              cd = !!cd;\n+            }\n+          else\n+            {\n+              bq = 1;\n+              cd = bq > qs;\n+            }\n+\n+          t2 += cd;\n+          bq = (t2 / qs) == bq;\n+\n+          if (aa != ft)\n+            {\n+              qs %= 0;\n+              while (bq != 0)\n+                {\n+ ro:\n+                  ;\n+                }\n+            }\n+\n+          ++t2;\n+        }\n+\n+ ia:\n+      goto ro;\n+    }\n+\n+  goto ia;\n+}"}, {"sha": "b8de42cef0a97c0624a05f633c980a2ac53cc2ec", "filename": "gcc/testsuite/gcc.dg/pr83972.c", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6abce7391ae63fd2808aa471aa9dd2679eb00496/gcc%2Ftestsuite%2Fgcc.dg%2Fpr83972.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6abce7391ae63fd2808aa471aa9dd2679eb00496/gcc%2Ftestsuite%2Fgcc.dg%2Fpr83972.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr83972.c?ref=6abce7391ae63fd2808aa471aa9dd2679eb00496", "patch": "@@ -0,0 +1,26 @@\n+/* { dg-do compile { target powerpc*-*-* ia64-*-* i?86-*-* x86_64-*-* } } */\n+/* { dg-options \"-O1 -fschedule-insns -fselective-scheduling -fsel-sched-pipelining -fvar-tracking-assignments -funroll-loops -fno-tree-dominator-opts -w\" } */\n+\n+int s7, p0;\n+\n+void\n+i0 (int ke)\n+{\n+  while (ke < 1)\n+    {\n+      if (s7 == 0)\n+        p0 = 0;\n+      else\n+        {\n+          if (p0 == 0)\n+            s7 = 0;\n+\n+          if (!!s7 || !!p0)\n+            s7 = 0;\n+          else\n+            p0 = 0;\n+        }\n+\n+      ++ke;\n+    }\n+}"}]}