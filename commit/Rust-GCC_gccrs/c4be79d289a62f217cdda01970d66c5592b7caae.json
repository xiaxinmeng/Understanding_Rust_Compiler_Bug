{"sha": "c4be79d289a62f217cdda01970d66c5592b7caae", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzRiZTc5ZDI4OWE2MmYyMTdjZGRhMDE5NzBkNjZjNTU5MmI3Y2FhZQ==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1993-08-07T11:39:47Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1993-08-07T11:39:47Z"}, "message": "(print_obstack_name): New function; derived from original debug_obstack.\n\n(debug_obstack): Call print_obstack_name.\n\nFrom-SVN: r5095", "tree": {"sha": "d9be11f6e6d5061b1a623d3f1a56b43749553950", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d9be11f6e6d5061b1a623d3f1a56b43749553950"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c4be79d289a62f217cdda01970d66c5592b7caae", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c4be79d289a62f217cdda01970d66c5592b7caae", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c4be79d289a62f217cdda01970d66c5592b7caae", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c4be79d289a62f217cdda01970d66c5592b7caae/comments", "author": null, "committer": null, "parents": [{"sha": "f3b4fb6ec81b94a31c979ab29db18e6948ea380a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f3b4fb6ec81b94a31c979ab29db18e6948ea380a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f3b4fb6ec81b94a31c979ab29db18e6948ea380a"}], "stats": {"total": 20, "additions": 15, "deletions": 5}, "files": [{"sha": "84198bdda8f4907a52de85beac44470816a6d956", "filename": "gcc/tree.c", "status": "modified", "additions": 15, "deletions": 5, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c4be79d289a62f217cdda01970d66c5592b7caae/gcc%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c4be79d289a62f217cdda01970d66c5592b7caae/gcc%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.c?ref=c4be79d289a62f217cdda01970d66c5592b7caae", "patch": "@@ -594,8 +594,10 @@ savealloc (size)\n /* Print out which obstack an object is in.  */\n \n void\n-debug_obstack (object)\n+print_obstack_name (object, file, prefix)\n      char *object;\n+     FILE *file;\n+     char *prefix;\n {\n   struct obstack *obstack = NULL;\n   char *obstack_name = NULL;\n@@ -651,13 +653,21 @@ debug_obstack (object)\n     {\n       if (object >= obstack->next_free\n \t  && object < obstack->chunk_limit)\n-\tfprintf (stderr, \"object in free portion of obstack %s.\\n\",\n-\t\t obstack_name);\n+\tfprintf (file, \"%s in free portion of obstack %s\",\n+\t\t prefix, obstack_name);\n       else\n-\tfprintf (stderr, \"object allocated from %s.\\n\", obstack_name);\n+\tfprintf (file, \"%s allocated from %s\", prefix, obstack_name);\n     }\n   else\n-    fprintf (stderr, \"object not allocated from any obstack.\\n\");\n+    fprintf (file, \"%s not allocated from any obstack\", prefix);\n+}\n+\n+void\n+debug_obstack (object)\n+     char *object;\n+{\n+  print_obstack_name (object, stderr, \"object\");\n+  fprintf (stderr, \".\\n\");\n }\n \n /* Return 1 if OBJ is in the permanent obstack."}]}