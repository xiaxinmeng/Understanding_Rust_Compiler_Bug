{"sha": "405b907c8fb5f183d2ae2a0f65f750a1551ef97c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDA1YjkwN2M4ZmI1ZjE4M2QyYWUyYTBmNjVmNzUwYTE1NTFlZjk3Yw==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2016-06-22T10:37:08Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2016-06-22T10:37:08Z"}, "message": "[multiple changes]\n\n2016-06-22  Ed Schonberg  <schonberg@adacore.com>\n\n\t* einfo.ads, einfo.adb (Is_Actual_Subtype): New flag, defined\n\ton subtypes that are created within subprogram bodies to handle\n\tunconstrained composite formals.\n\t* checks.adb (Apply_Predicate_Check): Do not generate a check on\n\tan object whose type is an actual subtype.\n\t* sem_ch6.adb (Set_Actual_Subtypes): Do not generate an\n\tactual subtype for a formal whose base type is private.\n\tSet Is_Actual_Subtype on corresponding entity after analyzing\n\tits declaration.\n\n2016-06-22  Justin Squirek  <squirek@adacore.com>\n\n\t* sem_prag.adb (Check_Expr_Is_OK_Static_Expression): Fix ordering\n\tof if-block and add in a condition to test for errors during\n\tresolution.\n\t* sem_res.adb (Resolution_Failed): Add comment to explain why\n\tthe type of a node which failed to resolve is set to the desired\n\ttype instead of Any_Type.\n\t* sem_ch8.adb (Analyze_Object_Renaming): Add a check for Any_Type\n\tto prevent crashes on Is_Access_Constant.\n\nFrom-SVN: r237692", "tree": {"sha": "8741fdde6c507d7f85427e0ecf65e36e2de169ab", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8741fdde6c507d7f85427e0ecf65e36e2de169ab"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/405b907c8fb5f183d2ae2a0f65f750a1551ef97c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/405b907c8fb5f183d2ae2a0f65f750a1551ef97c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/405b907c8fb5f183d2ae2a0f65f750a1551ef97c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/405b907c8fb5f183d2ae2a0f65f750a1551ef97c/comments", "author": null, "committer": null, "parents": [{"sha": "80007176a59e43c10d3c6db1f42804863771a0ce", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/80007176a59e43c10d3c6db1f42804863771a0ce", "html_url": "https://github.com/Rust-GCC/gccrs/commit/80007176a59e43c10d3c6db1f42804863771a0ce"}], "stats": {"total": 104, "additions": 86, "deletions": 18}, "files": [{"sha": "2a9fce93418f2cc04ebb76565ff52872fe561e1a", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/405b907c8fb5f183d2ae2a0f65f750a1551ef97c/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/405b907c8fb5f183d2ae2a0f65f750a1551ef97c/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=405b907c8fb5f183d2ae2a0f65f750a1551ef97c", "patch": "@@ -1,3 +1,26 @@\n+2016-06-22  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* einfo.ads, einfo.adb (Is_Actual_Subtype): New flag, defined\n+\ton subtypes that are created within subprogram bodies to handle\n+\tunconstrained composite formals.\n+\t* checks.adb (Apply_Predicate_Check): Do not generate a check on\n+\tan object whose type is an actual subtype.\n+\t* sem_ch6.adb (Set_Actual_Subtypes): Do not generate an\n+\tactual subtype for a formal whose base type is private.\n+\tSet Is_Actual_Subtype on corresponding entity after analyzing\n+\tits declaration.\n+\n+2016-06-22  Justin Squirek  <squirek@adacore.com>\n+\n+\t* sem_prag.adb (Check_Expr_Is_OK_Static_Expression): Fix ordering\n+\tof if-block and add in a condition to test for errors during\n+\tresolution.\n+\t* sem_res.adb (Resolution_Failed): Add comment to explain why\n+\tthe type of a node which failed to resolve is set to the desired\n+\ttype instead of Any_Type.\n+\t* sem_ch8.adb (Analyze_Object_Renaming): Add a check for Any_Type\n+\tto prevent crashes on Is_Access_Constant.\n+\n 2016-06-22  Hristian Kirtchev  <kirtchev@adacore.com>\n \n \t* lib-xref-spark_specific.adb, checks.adb, sem_ch13.adb: Minor"}, {"sha": "961e4b5a5f679b2966ed372b86144f2966c1e665", "filename": "gcc/ada/checks.adb", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/405b907c8fb5f183d2ae2a0f65f750a1551ef97c/gcc%2Fada%2Fchecks.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/405b907c8fb5f183d2ae2a0f65f750a1551ef97c/gcc%2Fada%2Fchecks.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fchecks.adb?ref=405b907c8fb5f183d2ae2a0f65f750a1551ef97c", "patch": "@@ -2650,7 +2650,17 @@ package body Checks is\n \n             Check_Expression_Against_Static_Predicate (N, Typ);\n \n-            if Is_Entity_Name (N) then\n+            if not Expander_Active then\n+               return;\n+            end if;\n+\n+            --  For an entity of the type, generate a call to the predicate\n+            --  function, unless its type is an actual subtype, which is not\n+            --  visible outside of the enclosing subprogram.\n+\n+            if Is_Entity_Name (N)\n+              and then not Is_Actual_Subtype (Typ)\n+            then\n                Insert_Action (N,\n                  Make_Predicate_Check\n                    (Typ, New_Occurrence_Of (Entity (N), Sloc (N))));"}, {"sha": "fd01315215ec47d1acd705044e0afa464c3bb638", "filename": "gcc/ada/einfo.adb", "status": "modified", "additions": 14, "deletions": 1, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/405b907c8fb5f183d2ae2a0f65f750a1551ef97c/gcc%2Fada%2Feinfo.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/405b907c8fb5f183d2ae2a0f65f750a1551ef97c/gcc%2Fada%2Feinfo.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Feinfo.adb?ref=405b907c8fb5f183d2ae2a0f65f750a1551ef97c", "patch": "@@ -607,8 +607,8 @@ package body Einfo is\n \n    --    Has_Inherited_Invariants        Flag291\n    --    Is_Partial_Invariant_Procedure  Flag292\n+   --    Is_Actual_Subtype               Flag293\n \n-   --    (unused)                        Flag293\n    --    (unused)                        Flag294\n    --    (unused)                        Flag295\n    --    (unused)                        Flag296\n@@ -2014,6 +2014,12 @@ package body Einfo is\n       return Flag69 (Id);\n    end Is_Access_Constant;\n \n+   function Is_Actual_Subtype (Id : E) return B is\n+   begin\n+      pragma Assert (Is_Type (Id));\n+      return Flag293 (Id);\n+   end Is_Actual_Subtype;\n+\n    function Is_Ada_2005_Only (Id : E) return B is\n    begin\n       return Flag185 (Id);\n@@ -5036,6 +5042,12 @@ package body Einfo is\n       Set_Flag69 (Id, V);\n    end Set_Is_Access_Constant;\n \n+   procedure Set_Is_Actual_Subtype (Id : E; V : B := True) is\n+   begin\n+      pragma Assert (Is_Type (Id));\n+      Set_Flag293 (Id, V);\n+   end Set_Is_Actual_Subtype;\n+\n    procedure Set_Is_Ada_2005_Only (Id : E; V : B := True) is\n    begin\n       Set_Flag185 (Id, V);\n@@ -9186,6 +9198,7 @@ package body Einfo is\n       W (\"Is_Abstract_Subprogram\",          Flag19  (Id));\n       W (\"Is_Abstract_Type\",                Flag146 (Id));\n       W (\"Is_Access_Constant\",              Flag69  (Id));\n+      W (\"Is_Actual_Subtype\",               Flag293 (Id));\n       W (\"Is_Ada_2005_Only\",                Flag185 (Id));\n       W (\"Is_Ada_2012_Only\",                Flag199 (Id));\n       W (\"Is_Aliased\",                      Flag15  (Id));"}, {"sha": "683c281e24f959aa264cc3f94a1206b6360e1bc7", "filename": "gcc/ada/einfo.ads", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/405b907c8fb5f183d2ae2a0f65f750a1551ef97c/gcc%2Fada%2Feinfo.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/405b907c8fb5f183d2ae2a0f65f750a1551ef97c/gcc%2Fada%2Feinfo.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Feinfo.ads?ref=405b907c8fb5f183d2ae2a0f65f750a1551ef97c", "patch": "@@ -2232,6 +2232,10 @@ package Einfo is\n --    Is_Access_Type (synthesized)\n --       Applies to all entities, true for access types and subtypes\n \n+--    Is_Actual_Subtype (Flag293)\n+--       Defined on all types, true for the generated constrained subtypes\n+--       that are built for unconstrained composite actuals.\n+\n --    Is_Ada_2005_Only (Flag185)\n --       Defined in all entities, true if a valid pragma Ada_05 or Ada_2005\n --       applies to the entity which specifically names the entity, indicating\n@@ -7017,6 +7021,7 @@ package Einfo is\n    function Is_Abstract_Subprogram              (Id : E) return B;\n    function Is_Abstract_Type                    (Id : E) return B;\n    function Is_Access_Constant                  (Id : E) return B;\n+   function Is_Actual_Subtype                   (Id : E) return B;\n    function Is_Ada_2005_Only                    (Id : E) return B;\n    function Is_Ada_2012_Only                    (Id : E) return B;\n    function Is_Aliased                          (Id : E) return B;\n@@ -7689,6 +7694,7 @@ package Einfo is\n    procedure Set_Is_Abstract_Subprogram          (Id : E; V : B := True);\n    procedure Set_Is_Abstract_Type                (Id : E; V : B := True);\n    procedure Set_Is_Access_Constant              (Id : E; V : B := True);\n+   procedure Set_Is_Actual_Subtype               (Id : E; V : B := True);\n    procedure Set_Is_Ada_2005_Only                (Id : E; V : B := True);\n    procedure Set_Is_Ada_2012_Only                (Id : E; V : B := True);\n    procedure Set_Is_Aliased                      (Id : E; V : B := True);\n@@ -8477,6 +8483,7 @@ package Einfo is\n    pragma Inline (Is_Abstract_Subprogram);\n    pragma Inline (Is_Abstract_Type);\n    pragma Inline (Is_Access_Constant);\n+   pragma Inline (Is_Actual_Subtype);\n    pragma Inline (Is_Access_Protected_Subprogram_Type);\n    pragma Inline (Is_Access_Subprogram_Type);\n    pragma Inline (Is_Access_Type);\n@@ -8989,6 +8996,7 @@ package Einfo is\n    pragma Inline (Set_Is_Abstract_Subprogram);\n    pragma Inline (Set_Is_Abstract_Type);\n    pragma Inline (Set_Is_Access_Constant);\n+   pragma Inline (Set_Is_Actual_Subtype);\n    pragma Inline (Set_Is_Ada_2005_Only);\n    pragma Inline (Set_Is_Ada_2012_Only);\n    pragma Inline (Set_Is_Aliased);"}, {"sha": "81bffcb9b99a1d83d993443892515379f586e511", "filename": "gcc/ada/sem_ch6.adb", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/405b907c8fb5f183d2ae2a0f65f750a1551ef97c/gcc%2Fada%2Fsem_ch6.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/405b907c8fb5f183d2ae2a0f65f750a1551ef97c/gcc%2Fada%2Fsem_ch6.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch6.adb?ref=405b907c8fb5f183d2ae2a0f65f750a1551ef97c", "patch": "@@ -11226,9 +11226,12 @@ package body Sem_Ch6 is\n \n          --  At this stage we have an unconstrained type that may need an\n          --  actual subtype. For sure the actual subtype is needed if we have\n-         --  an unconstrained array type.\n+         --  an unconstrained array type. However, in an instance, the type\n+         --  may appear as a subtype of the full view, while the actual is\n+         --  in fact private (in which case no actual subtype is needed) so\n+         --  check the kind of the base type.\n \n-         elsif Is_Array_Type (T) then\n+         elsif Is_Array_Type (Base_Type (T)) then\n             AS_Needed := True;\n \n          --  The only other case needing an actual subtype is an unconstrained\n@@ -11299,6 +11302,7 @@ package body Sem_Ch6 is\n             --  therefore needs no constraint checks.\n \n             Analyze (Decl, Suppress => All_Checks);\n+            Set_Is_Actual_Subtype (Defining_Identifier (Decl));\n \n             --  We need to freeze manually the generated type when it is\n             --  inserted anywhere else than in a declarative part."}, {"sha": "44bae7d52e013890f1adf3b601eb9fe451d857a0", "filename": "gcc/ada/sem_ch8.adb", "status": "modified", "additions": 13, "deletions": 5, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/405b907c8fb5f183d2ae2a0f65f750a1551ef97c/gcc%2Fada%2Fsem_ch8.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/405b907c8fb5f183d2ae2a0f65f750a1551ef97c/gcc%2Fada%2Fsem_ch8.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch8.adb?ref=405b907c8fb5f183d2ae2a0f65f750a1551ef97c", "patch": "@@ -1022,22 +1022,30 @@ package body Sem_Ch8 is\n \n          Resolve (Nam, T);\n \n+         --  Do not perform the legality checks below when the resolution of\n+         --  the renaming name failed because the associated type is Any_Type.\n+\n+         if Etype (Nam) = Any_Type then\n+            null;\n+\n          --  Ada 2005 (AI-231): In the case where the type is defined by an\n          --  access_definition, the renamed entity shall be of an access-to-\n          --  constant type if and only if the access_definition defines an\n          --  access-to-constant type. ARM 8.5.1(4)\n \n-         if Constant_Present (Access_Definition (N))\n+         elsif Constant_Present (Access_Definition (N))\n            and then not Is_Access_Constant (Etype (Nam))\n          then\n-            Error_Msg_N (\"(Ada 2005): the renamed object is not \"\n-                         & \"access-to-constant (RM 8.5.1(6))\", N);\n+            Error_Msg_N\n+               (\"(Ada 2005): the renamed object is not access-to-constant \"\n+                & \"(RM 8.5.1(6))\", N);\n \n          elsif not Constant_Present (Access_Definition (N))\n            and then Is_Access_Constant (Etype (Nam))\n          then\n-            Error_Msg_N (\"(Ada 2005): the renamed object is not \"\n-                         & \"access-to-variable (RM 8.5.1(6))\", N);\n+            Error_Msg_N\n+              (\"(Ada 2005): the renamed object is not access-to-variable \"\n+               & \"(RM 8.5.1(6))\", N);\n          end if;\n \n          if Is_Access_Subprogram_Type (Etype (Nam)) then"}, {"sha": "c266e2d5d02b8dd44f8b026b16f2678af5998cae", "filename": "gcc/ada/sem_prag.adb", "status": "modified", "additions": 6, "deletions": 9, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/405b907c8fb5f183d2ae2a0f65f750a1551ef97c/gcc%2Fada%2Fsem_prag.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/405b907c8fb5f183d2ae2a0f65f750a1551ef97c/gcc%2Fada%2Fsem_prag.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_prag.adb?ref=405b907c8fb5f183d2ae2a0f65f750a1551ef97c", "patch": "@@ -5060,12 +5060,15 @@ package body Sem_Prag is\n             Analyze_And_Resolve (Expr);\n          end if;\n \n-         if Is_OK_Static_Expression (Expr) then\n-            return;\n+         --  An expression cannot be considered static if its resolution failed\n+         --  or if it erroneous. Stop the analysis of the related pragma.\n \n-         elsif Etype (Expr) = Any_Type then\n+         if Etype (Expr) = Any_Type or else Error_Posted (Expr) then\n             raise Pragma_Exit;\n \n+         elsif Is_OK_Static_Expression (Expr) then\n+            return;\n+\n          --  An interesting special case, if we have a string literal and we\n          --  are in Ada 83 mode, then we allow it even though it will not be\n          --  flagged as static. This allows the use of Ada 95 pragmas like\n@@ -5077,12 +5080,6 @@ package body Sem_Prag is\n          then\n             return;\n \n-         --  Static expression that raises Constraint_Error. This has already\n-         --  been flagged, so just exit from pragma processing.\n-\n-         elsif Is_OK_Static_Expression (Expr) then\n-            raise Pragma_Exit;\n-\n          --  Finally, we have a real error\n \n          else"}, {"sha": "ffd2ea15fbd938b75eaf9a72786a67c6759490ac", "filename": "gcc/ada/sem_res.adb", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/405b907c8fb5f183d2ae2a0f65f750a1551ef97c/gcc%2Fada%2Fsem_res.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/405b907c8fb5f183d2ae2a0f65f750a1551ef97c/gcc%2Fada%2Fsem_res.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_res.adb?ref=405b907c8fb5f183d2ae2a0f65f750a1551ef97c", "patch": "@@ -1974,7 +1974,12 @@ package body Sem_Res is\n       procedure Resolution_Failed is\n       begin\n          Patch_Up_Value (N, Typ);\n+\n+         --  Set the type to the desired one to minimize cascaded errors. Note\n+         --  that this is an approximation and does not work in all cases.\n+\n          Set_Etype (N, Typ);\n+\n          Debug_A_Exit (\"resolving  \", N, \" (done, resolution failed)\");\n          Set_Is_Overloaded (N, False);\n "}]}