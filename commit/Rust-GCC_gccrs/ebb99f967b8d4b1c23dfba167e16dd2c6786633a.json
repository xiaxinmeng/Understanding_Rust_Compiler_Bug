{"sha": "ebb99f967b8d4b1c23dfba167e16dd2c6786633a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWJiOTlmOTY3YjhkNGIxYzIzZGZiYTE2N2UxNmRkMmM2Nzg2NjMzYQ==", "commit": {"author": {"name": "Bernd Edlinger", "email": "bernd.edlinger@hotmail.de", "date": "2013-12-11T17:09:17Z"}, "committer": {"name": "Bernd Edlinger", "email": "edlinger@gcc.gnu.org", "date": "2013-12-11T17:09:17Z"}, "message": "re PR middle-end/59134 (infinite loop between store_fixed_bit_field and store_split_bit_field with STRICT_ALIGNMENT)\n\n2013-12-11  Bernd Edlinger  <bernd.edlinger@hotmail.de>\n\n        PR middle-end/59134\n        * expmed.c (store_bit_field): Use narrow_bit_field_mem and\n        store_fixed_bit_field_1 for -fstrict-volatile-bitfields.\n        (store_fixed_bit_field): Split up.  Call store_fixed_bit_field_1\n        to do the real work.\n        (store_fixed_bit_field_1): New function.\n        (store_split_bit_field): Limit the unit size to the memory mode size,\n        to prevent recursion.\n        \ntestsuite:\n        * gcc.c-torture/compile/pr59134.c: New test.\n        * gnat.dg/misaligned_volatile.adb: New test.\n\nFrom-SVN: r205898", "tree": {"sha": "4ba21c39b0d8a3c5a6bae82fe8579f445e23044e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4ba21c39b0d8a3c5a6bae82fe8579f445e23044e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ebb99f967b8d4b1c23dfba167e16dd2c6786633a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ebb99f967b8d4b1c23dfba167e16dd2c6786633a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ebb99f967b8d4b1c23dfba167e16dd2c6786633a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ebb99f967b8d4b1c23dfba167e16dd2c6786633a/comments", "author": {"login": "bernd-edlinger", "id": 17638929, "node_id": "MDQ6VXNlcjE3NjM4OTI5", "avatar_url": "https://avatars.githubusercontent.com/u/17638929?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bernd-edlinger", "html_url": "https://github.com/bernd-edlinger", "followers_url": "https://api.github.com/users/bernd-edlinger/followers", "following_url": "https://api.github.com/users/bernd-edlinger/following{/other_user}", "gists_url": "https://api.github.com/users/bernd-edlinger/gists{/gist_id}", "starred_url": "https://api.github.com/users/bernd-edlinger/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bernd-edlinger/subscriptions", "organizations_url": "https://api.github.com/users/bernd-edlinger/orgs", "repos_url": "https://api.github.com/users/bernd-edlinger/repos", "events_url": "https://api.github.com/users/bernd-edlinger/events{/privacy}", "received_events_url": "https://api.github.com/users/bernd-edlinger/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "6f4e9cf84204e690b7c32060f8eb7d978bfcf2ca", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6f4e9cf84204e690b7c32060f8eb7d978bfcf2ca", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6f4e9cf84204e690b7c32060f8eb7d978bfcf2ca"}], "stats": {"total": 104, "additions": 97, "deletions": 7}, "files": [{"sha": "633aa927ac12174dcf4206462e6e4ea241061be0", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ebb99f967b8d4b1c23dfba167e16dd2c6786633a/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ebb99f967b8d4b1c23dfba167e16dd2c6786633a/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=ebb99f967b8d4b1c23dfba167e16dd2c6786633a", "patch": "@@ -1,3 +1,14 @@\n+2013-12-11  Bernd Edlinger  <bernd.edlinger@hotmail.de>\n+\n+\tPR middle-end/59134\n+\t* expmed.c (store_bit_field): Use narrow_bit_field_mem and\n+\tstore_fixed_bit_field_1 for -fstrict-volatile-bitfields.\n+\t(store_fixed_bit_field): Split up.  Call store_fixed_bit_field_1\n+\tto do the real work.\n+\t(store_fixed_bit_field_1): New function.\n+\t(store_split_bit_field): Limit the unit size to the memory mode size,\n+\tto prevent recursion.\n+\n 2013-12-11  Bernd Edlinger  <bernd.edlinger@hotmail.de>\n \t    Sandra Loosemore  <sandra@codesourcery.com>\n "}, {"sha": "3a6c919ce22267f064538a4b922230d100aa11a5", "filename": "gcc/expmed.c", "status": "modified", "additions": 36, "deletions": 7, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ebb99f967b8d4b1c23dfba167e16dd2c6786633a/gcc%2Fexpmed.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ebb99f967b8d4b1c23dfba167e16dd2c6786633a/gcc%2Fexpmed.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpmed.c?ref=ebb99f967b8d4b1c23dfba167e16dd2c6786633a", "patch": "@@ -48,6 +48,9 @@ static void store_fixed_bit_field (rtx, unsigned HOST_WIDE_INT,\n \t\t\t\t   unsigned HOST_WIDE_INT,\n \t\t\t\t   unsigned HOST_WIDE_INT,\n \t\t\t\t   rtx);\n+static void store_fixed_bit_field_1 (rtx, unsigned HOST_WIDE_INT,\n+\t\t\t\t     unsigned HOST_WIDE_INT,\n+\t\t\t\t     rtx);\n static void store_split_bit_field (rtx, unsigned HOST_WIDE_INT,\n \t\t\t\t   unsigned HOST_WIDE_INT,\n \t\t\t\t   unsigned HOST_WIDE_INT,\n@@ -948,10 +951,16 @@ store_bit_field (rtx str_rtx, unsigned HOST_WIDE_INT bitsize,\n \t  emit_move_insn (str_rtx, value);\n \t}\n       else\n-\t/* Explicitly override the C/C++ memory model; ignore the\n-\t   bit range so that we can do the access in the mode mandated\n-\t   by -fstrict-volatile-bitfields instead.  */\n-\tstore_fixed_bit_field (str_rtx, bitsize, bitnum, 0, 0, value);\n+\t{\n+\t  str_rtx = narrow_bit_field_mem (str_rtx, fieldmode, bitsize, bitnum,\n+\t\t\t\t\t  &bitnum);\n+\t  /* Explicitly override the C/C++ memory model; ignore the\n+\t     bit range so that we can do the access in the mode mandated\n+\t     by -fstrict-volatile-bitfields instead.  */\n+\t  store_fixed_bit_field_1 (str_rtx, bitsize, bitnum,\n+\t\t\t\t   value);\n+\t}\n+\n       return;\n     }\n \n@@ -994,9 +1003,6 @@ store_fixed_bit_field (rtx op0, unsigned HOST_WIDE_INT bitsize,\n \t\t       rtx value)\n {\n   enum machine_mode mode;\n-  rtx temp;\n-  int all_zero = 0;\n-  int all_one = 0;\n \n   /* There is a case not handled here:\n      a structure with a known alignment of just a halfword\n@@ -1026,6 +1032,23 @@ store_fixed_bit_field (rtx op0, unsigned HOST_WIDE_INT bitsize,\n       op0 = narrow_bit_field_mem (op0, mode, bitsize, bitnum, &bitnum);\n     }\n \n+  store_fixed_bit_field_1 (op0, bitsize, bitnum, value);\n+  return;\n+}\n+\n+/* Helper function for store_fixed_bit_field, stores\n+   the bit field always using the MODE of OP0.  */\n+\n+static void\n+store_fixed_bit_field_1 (rtx op0, unsigned HOST_WIDE_INT bitsize,\n+\t\t         unsigned HOST_WIDE_INT bitnum,\n+\t\t         rtx value)\n+{\n+  enum machine_mode mode;\n+  rtx temp;\n+  int all_zero = 0;\n+  int all_one = 0;\n+\n   mode = GET_MODE (op0);\n   gcc_assert (SCALAR_INT_MODE_P (mode));\n \n@@ -1134,6 +1157,12 @@ store_split_bit_field (rtx op0, unsigned HOST_WIDE_INT bitsize,\n   else\n     unit = MIN (MEM_ALIGN (op0), BITS_PER_WORD);\n \n+  /* If OP0 is a memory with a mode, then UNIT must not be larger than\n+     OP0's mode as well.  Otherwise, store_fixed_bit_field will call us\n+     again, and we will mutually recurse forever.  */\n+  if (MEM_P (op0) && GET_MODE_BITSIZE (GET_MODE (op0)) > 0)\n+    unit = MIN (unit, GET_MODE_BITSIZE (GET_MODE (op0)));\n+\n   /* If VALUE is a constant other than a CONST_INT, get it into a register in\n      WORD_MODE.  If we can do this using gen_lowpart_common, do so.  Note\n      that VALUE might be a floating-point constant.  */"}, {"sha": "0de1112f9e068e4979c3c7d08124837bbe42e4fb", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ebb99f967b8d4b1c23dfba167e16dd2c6786633a/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ebb99f967b8d4b1c23dfba167e16dd2c6786633a/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=ebb99f967b8d4b1c23dfba167e16dd2c6786633a", "patch": "@@ -1,3 +1,9 @@\n+2013-12-11  Bernd Edlinger  <bernd.edlinger@hotmail.de>\n+\n+\tPR middle-end/59134\n+\t* gcc.c-torture/compile/pr59134.c: New test.\n+\t* gnat.dg/misaligned_volatile.adb: New test.\n+\n 2013-12-11  Bernd Edlinger  <bernd.edlinger@hotmail.de>\n \t    Sandra Loosemore  <sandra@codesourcery.com>\n "}, {"sha": "5268805ec81247483fe63d0be4c392c2c288c940", "filename": "gcc/testsuite/gcc.c-torture/compile/pr59134.c", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ebb99f967b8d4b1c23dfba167e16dd2c6786633a/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fpr59134.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ebb99f967b8d4b1c23dfba167e16dd2c6786633a/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fpr59134.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fpr59134.c?ref=ebb99f967b8d4b1c23dfba167e16dd2c6786633a", "patch": "@@ -0,0 +1,16 @@\n+/* { dg-do compile } */\n+\n+extern void* malloc(__SIZE_TYPE__) __attribute__((malloc));\n+\n+typedef struct {\n+  char pad;\n+  int arr[0];\n+} __attribute__((packed)) str;\n+\n+str *\n+foo (void)\n+{\n+  str *s = malloc (sizeof (str) + sizeof (int));\n+  s->arr[0] = 0x12345678;\n+  return s;\n+}"}, {"sha": "c76975b3ecd840efd695191574fbc99850ce4d4b", "filename": "gcc/testsuite/gnat.dg/misaligned_volatile.adb", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ebb99f967b8d4b1c23dfba167e16dd2c6786633a/gcc%2Ftestsuite%2Fgnat.dg%2Fmisaligned_volatile.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ebb99f967b8d4b1c23dfba167e16dd2c6786633a/gcc%2Ftestsuite%2Fgnat.dg%2Fmisaligned_volatile.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Fmisaligned_volatile.adb?ref=ebb99f967b8d4b1c23dfba167e16dd2c6786633a", "patch": "@@ -0,0 +1,28 @@\n+-- { dg-do run }\n+-- { dg-options \"-gnatp -fstrict-volatile-bitfields\" }\n+\n+procedure Misaligned_Volatile is\n+\n+   type Byte is mod 2**8;\n+\n+   type Block is record\n+      B : Boolean;\n+      V : Byte;\n+   end record;\n+   pragma Volatile (Block);\n+   pragma Pack (Block);\n+   for Block'Alignment use 1;\n+\n+   type Pair is array (1 .. 2) of Block;\n+\n+   P : Pair;\n+begin\n+   for K in P'Range loop\n+      P(K).V := 237;\n+   end loop;\n+   for K in P'Range loop\n+      if P(K).V /= 237 then\n+         raise Program_error;\n+      end if;\n+   end loop;\n+end;"}]}