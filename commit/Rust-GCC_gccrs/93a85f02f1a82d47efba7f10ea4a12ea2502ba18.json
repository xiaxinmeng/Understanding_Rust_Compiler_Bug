{"sha": "93a85f02f1a82d47efba7f10ea4a12ea2502ba18", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTNhODVmMDJmMWE4MmQ0N2VmYmE3ZjEwZWE0YTEyZWEyNTAyYmExOA==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2007-09-17T18:47:15Z"}, "committer": {"name": "Eric Botcazou", "email": "ebotcazou@gcc.gnu.org", "date": "2007-09-17T18:47:15Z"}, "message": "tree-sra.c (maybe_lookup_element_for_expr): Return NULL for variable-sized records too.\n\n\t* tree-sra.c (maybe_lookup_element_for_expr) <COMPONENT_REF>: Return\n\tNULL for variable-sized records too.\n\t(sra_walk_expr) <COMPONENT_REF>: Stop at variable-sized records too.\n\nFrom-SVN: r128553", "tree": {"sha": "737c1bd28d0703c03d1c89e661c5dabe82dc0f79", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/737c1bd28d0703c03d1c89e661c5dabe82dc0f79"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/93a85f02f1a82d47efba7f10ea4a12ea2502ba18", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/93a85f02f1a82d47efba7f10ea4a12ea2502ba18", "html_url": "https://github.com/Rust-GCC/gccrs/commit/93a85f02f1a82d47efba7f10ea4a12ea2502ba18", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/93a85f02f1a82d47efba7f10ea4a12ea2502ba18/comments", "author": null, "committer": null, "parents": [{"sha": "14f874333a484d2ceca641873ae2aaf41a2f4611", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/14f874333a484d2ceca641873ae2aaf41a2f4611", "html_url": "https://github.com/Rust-GCC/gccrs/commit/14f874333a484d2ceca641873ae2aaf41a2f4611"}], "stats": {"total": 40, "additions": 28, "deletions": 12}, "files": [{"sha": "2d4575aec128ac449fcad284e5558666a5a8ba1d", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/93a85f02f1a82d47efba7f10ea4a12ea2502ba18/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/93a85f02f1a82d47efba7f10ea4a12ea2502ba18/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=93a85f02f1a82d47efba7f10ea4a12ea2502ba18", "patch": "@@ -1,3 +1,9 @@\n+2007-09-17  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* tree-sra.c (maybe_lookup_element_for_expr) <COMPONENT_REF>: Return\n+\tNULL for variable-sized records too.\n+\t(sra_walk_expr) <COMPONENT_REF>: Stop at variable-sized records too.\n+\n 2007-09-17  Tom Tromey  <tromey@redhat.com>\n \n \t* c-decl.c (pushdecl): Don't set DECL_LANG_SPECIFIC."}, {"sha": "4a3924b6a64e7b5de63c11816dce86b8ca420237", "filename": "gcc/tree-sra.c", "status": "modified", "additions": 22, "deletions": 12, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/93a85f02f1a82d47efba7f10ea4a12ea2502ba18/gcc%2Ftree-sra.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/93a85f02f1a82d47efba7f10ea4a12ea2502ba18/gcc%2Ftree-sra.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-sra.c?ref=93a85f02f1a82d47efba7f10ea4a12ea2502ba18", "patch": "@@ -636,10 +636,17 @@ maybe_lookup_element_for_expr (tree expr)\n       break;\n \n     case COMPONENT_REF:\n-      /* Don't look through unions.  */\n-      if (TREE_CODE (TREE_TYPE (TREE_OPERAND (expr, 0))) != RECORD_TYPE)\n-\treturn NULL;\n-      child = TREE_OPERAND (expr, 1);\n+      {\n+\ttree type = TREE_TYPE (TREE_OPERAND (expr, 0));\n+\t/* Don't look through unions.  */\n+\tif (TREE_CODE (type) != RECORD_TYPE)\n+\t  return NULL;\n+\t/* Neither through variable-sized records.  */\n+\tif (TYPE_SIZE (type) == NULL_TREE\n+\t    || TREE_CODE (TYPE_SIZE (type)) != INTEGER_CST)\n+\t  return NULL;\n+\tchild = TREE_OPERAND (expr, 1);\n+      }\n       break;\n \n     case REALPART_EXPR:\n@@ -789,14 +796,17 @@ sra_walk_expr (tree *expr_p, block_stmt_iterator *bsi, bool is_output,\n \tbreak;\n \n       case COMPONENT_REF:\n-\t/* A reference to a union member constitutes a reference to the\n-\t   entire union.  */\n-\tif (TREE_CODE (TREE_TYPE (TREE_OPERAND (inner, 0))) != RECORD_TYPE)\n-\t  goto use_all;\n-\t/* ??? See above re non-constant stride.  */\n-\tif (TREE_OPERAND (inner, 2))\n-\t  goto use_all;\n-\tinner = TREE_OPERAND (inner, 0);\n+\t{\n+\t  tree type = TREE_TYPE (TREE_OPERAND (inner, 0));\n+\t  /* Don't look through unions.  */\n+\t  if (TREE_CODE (type) != RECORD_TYPE)\n+\t    goto use_all;\n+\t  /* Neither through variable-sized records.  */\n+\t  if (TYPE_SIZE (type) == NULL_TREE\n+\t      || TREE_CODE (TYPE_SIZE (type)) != INTEGER_CST)\n+\t    goto use_all;\n+\t  inner = TREE_OPERAND (inner, 0);\n+\t}\n \tbreak;\n \n       case REALPART_EXPR:"}]}