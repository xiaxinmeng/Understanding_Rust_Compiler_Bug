{"sha": "d727fdc42bbf1ea23bfda42b9c0c87c2cb8e93b9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDcyN2ZkYzQyYmJmMWVhMjNiZmRhNDJiOWMwYzg3YzJjYjhlOTNiOQ==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2019-05-02T15:46:38Z"}, "committer": {"name": "Jonathan Wakely", "email": "redi@gcc.gnu.org", "date": "2019-05-02T15:46:38Z"}, "message": "Improve docs for C++17 Filesystem library\n\n\t* include/bits/fs_dir.h: Fix/improve doxygen markup.\n\t* include/bits/fs_fwd.h: Likewise.\n\t* include/bits/fs_ops.h: Likewise.\n\t* include/bits/fs_path.h: Likewise.\n\t* include/std/filesystem: Likewise.\n\nFrom-SVN: r270811", "tree": {"sha": "6d1eb60543acafc771d84a758577a74d4e839122", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6d1eb60543acafc771d84a758577a74d4e839122"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d727fdc42bbf1ea23bfda42b9c0c87c2cb8e93b9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d727fdc42bbf1ea23bfda42b9c0c87c2cb8e93b9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d727fdc42bbf1ea23bfda42b9c0c87c2cb8e93b9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d727fdc42bbf1ea23bfda42b9c0c87c2cb8e93b9/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3084625d39d4d353f55c3aed6959bce6ec2a4a79", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3084625d39d4d353f55c3aed6959bce6ec2a4a79", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3084625d39d4d353f55c3aed6959bce6ec2a4a79"}], "stats": {"total": 103, "additions": 75, "deletions": 28}, "files": [{"sha": "52d3adf251edeaf76edf5d8b6789827ec2aa4b79", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d727fdc42bbf1ea23bfda42b9c0c87c2cb8e93b9/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d727fdc42bbf1ea23bfda42b9c0c87c2cb8e93b9/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=d727fdc42bbf1ea23bfda42b9c0c87c2cb8e93b9", "patch": "@@ -1,5 +1,11 @@\n 2019-05-02  Jonathan Wakely  <jwakely@redhat.com>\n \n+\t* include/bits/fs_dir.h: Fix/improve doxygen markup.\n+\t* include/bits/fs_fwd.h: Likewise.\n+\t* include/bits/fs_ops.h: Likewise.\n+\t* include/bits/fs_path.h: Likewise.\n+\t* include/std/filesystem: Likewise.\n+\n \t* include/experimental/bits/net.h: Fix/improve doxygen markup.\n \t* include/experimental/buffer: Likewise.\n \t* include/experimental/executor: Likewise."}, {"sha": "faf0452d4d14f0fa7f6782c80a4e13a1b89cd4ff", "filename": "libstdc++-v3/include/bits/fs_dir.h", "status": "modified", "additions": 23, "deletions": 3, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d727fdc42bbf1ea23bfda42b9c0c87c2cb8e93b9/libstdc%2B%2B-v3%2Finclude%2Fbits%2Ffs_dir.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d727fdc42bbf1ea23bfda42b9c0c87c2cb8e93b9/libstdc%2B%2B-v3%2Finclude%2Fbits%2Ffs_dir.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Ffs_dir.h?ref=d727fdc42bbf1ea23bfda42b9c0c87c2cb8e93b9", "patch": "@@ -42,11 +42,11 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n namespace filesystem\n {\n-  /**\n-   * @ingroup filesystem\n-   * @{\n+  /** @addtogroup filesystem\n+   *  @{\n    */\n \n+  /// Information about a file's type and permissions.\n   class file_status\n   {\n   public:\n@@ -83,6 +83,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n   class directory_iterator;\n   class recursive_directory_iterator;\n \n+  /// The value type used by directory iterators\n   class directory_entry\n   {\n   public:\n@@ -337,6 +338,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n     file_type\t\t_M_type = file_type::none;\n   };\n \n+  /// Proxy returned by post-increment on directory iterators.\n   struct __directory_iterator_proxy\n   {\n     const directory_entry& operator*() const& noexcept { return _M_entry; }\n@@ -353,6 +355,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n     directory_entry _M_entry;\n   };\n \n+  /// Iterator type for traversing the entries in a single directory.\n   class directory_iterator\n   {\n   public:\n@@ -423,14 +426,23 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n     std::__shared_ptr<_Dir> _M_dir;\n   };\n \n+  /// @relates std::filesystem::directory_iterator @{\n+\n+  /** @brief Enable range-based `for` using directory_iterator.\n+   *\n+   *  e.g. `for (auto& entry : std::filesystem::directory_iterator(\".\")) ...`\n+   */\n   inline directory_iterator\n   begin(directory_iterator __iter) noexcept\n   { return __iter; }\n \n+  /// Return a past-the-end directory_iterator\n   inline directory_iterator\n   end(directory_iterator) noexcept\n   { return directory_iterator(); }\n+  // @}\n \n+  /// Iterator type for recursively traversing a directory hierarchy.\n   class recursive_directory_iterator\n   {\n   public:\n@@ -512,13 +524,21 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n     std::__shared_ptr<_Dir_stack> _M_dirs;\n   };\n \n+  /// @relates std::filesystem::recursive_directory_iterator @{\n+\n+  /** @brief Enable range-based `for` using recursive_directory_iterator.\n+   *\n+   *  e.g. `for (auto& entry : recursive_directory_iterator(\".\")) ...`\n+   */\n   inline recursive_directory_iterator\n   begin(recursive_directory_iterator __iter) noexcept\n   { return __iter; }\n \n+  /// Return a past-the-end recursive_directory_iterator\n   inline recursive_directory_iterator\n   end(recursive_directory_iterator) noexcept\n   { return recursive_directory_iterator(); }\n+  // @}\n \n _GLIBCXX_END_NAMESPACE_CXX11\n "}, {"sha": "bb339c44144b176f1e47fb35044ec3e4b14155c9", "filename": "libstdc++-v3/include/bits/fs_fwd.h", "status": "modified", "additions": 6, "deletions": 12, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d727fdc42bbf1ea23bfda42b9c0c87c2cb8e93b9/libstdc%2B%2B-v3%2Finclude%2Fbits%2Ffs_fwd.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d727fdc42bbf1ea23bfda42b9c0c87c2cb8e93b9/libstdc%2B%2B-v3%2Finclude%2Fbits%2Ffs_fwd.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Ffs_fwd.h?ref=d727fdc42bbf1ea23bfda42b9c0c87c2cb8e93b9", "patch": "@@ -40,20 +40,17 @@ namespace std _GLIBCXX_VISIBILITY(default)\n {\n _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n+/** @addtogroup filesystem\n+ *  @{\n+ */\n+\n+/// ISO C++ 2017 namespace for File System library\n namespace filesystem\n {\n #if _GLIBCXX_USE_CXX11_ABI\n inline namespace __cxx11 __attribute__((__abi_tag__ (\"cxx11\"))) { }\n #endif\n \n-  /**\n-   * @defgroup filesystem Filesystem\n-   *\n-   * Utilities for performing operations on file systems and their components,\n-   * such as paths, regular files, and directories.\n-   *\n-   * @{\n-   */\n \n   class file_status;\n _GLIBCXX_BEGIN_NAMESPACE_CXX11\n@@ -379,12 +376,9 @@ _GLIBCXX_END_NAMESPACE_CXX11\n   bool is_regular_file(file_status) noexcept;\n   bool is_symlink(file_status) noexcept;\n \n-  // @} group filesystem\n } // namespace filesystem\n-\n+// @}\n _GLIBCXX_END_NAMESPACE_VERSION\n } // namespace std\n-\n #endif // C++17\n-\n #endif // _GLIBCXX_FS_FWD_H"}, {"sha": "66c6200388a6d740bd4179211f9851183a74849b", "filename": "libstdc++-v3/include/bits/fs_ops.h", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d727fdc42bbf1ea23bfda42b9c0c87c2cb8e93b9/libstdc%2B%2B-v3%2Finclude%2Fbits%2Ffs_ops.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d727fdc42bbf1ea23bfda42b9c0c87c2cb8e93b9/libstdc%2B%2B-v3%2Finclude%2Fbits%2Ffs_ops.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Ffs_ops.h?ref=d727fdc42bbf1ea23bfda42b9c0c87c2cb8e93b9", "patch": "@@ -40,9 +40,8 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n namespace filesystem\n {\n-  /**\n-   * @ingroup filesystem\n-   * @{\n+  /** @addtogroup filesystem\n+   *  @{\n    */\n \n   path absolute(const path& __p);"}, {"sha": "d1ad11a60c43ca56c7def23ebf24c15866b4aae2", "filename": "libstdc++-v3/include/bits/fs_path.h", "status": "modified", "additions": 29, "deletions": 9, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d727fdc42bbf1ea23bfda42b9c0c87c2cb8e93b9/libstdc%2B%2B-v3%2Finclude%2Fbits%2Ffs_path.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d727fdc42bbf1ea23bfda42b9c0c87c2cb8e93b9/libstdc%2B%2B-v3%2Finclude%2Fbits%2Ffs_path.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Ffs_path.h?ref=d727fdc42bbf1ea23bfda42b9c0c87c2cb8e93b9", "patch": "@@ -59,9 +59,8 @@ namespace filesystem\n {\n _GLIBCXX_BEGIN_NAMESPACE_CXX11\n \n-  /**\n-   * @ingroup filesystem\n-   * @{\n+  /** @addtogroup filesystem\n+   *  @{\n    */\n \n   /// A filesystem path.\n@@ -158,14 +157,20 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n \n   public:\n #ifdef _GLIBCXX_FILESYSTEM_IS_WINDOWS\n-    typedef wchar_t\t\t\t\tvalue_type;\n-    static constexpr value_type\t\t\tpreferred_separator = L'\\\\';\n+    using value_type = wchar_t;\n+    static constexpr value_type preferred_separator = L'\\\\';\n #else\n-    typedef char\t\t\t\tvalue_type;\n-    static constexpr value_type\t\t\tpreferred_separator = '/';\n+# ifdef _GLIBCXX_DOXYGEN\n+    /// Windows uses wchar_t for path::value_type, POSIX uses char.\n+    using value_type = __os_dependent__;\n+# else\n+    using value_type =  char;\n+# endif\n+    static constexpr value_type preferred_separator = '/';\n #endif\n-    typedef std::basic_string<value_type>\tstring_type;\n+    using string_type = std::basic_string<value_type>;\n \n+    /// path::format is ignored in this implementation\n     enum format : unsigned char { native_format, generic_format, auto_format };\n \n     // constructors and destructor\n@@ -392,7 +397,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n \n     // iterators\n     class iterator;\n-    typedef iterator const_iterator;\n+    using const_iterator = iterator;\n \n     iterator begin() const;\n     iterator end() const;\n@@ -451,6 +456,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n       return __result;\n     }\n \n+    /// @cond undocumented\n     // Create a basic_string by reading until a null character.\n     template<typename _InputIterator,\n \t     typename _Traits = std::iterator_traits<_InputIterator>,\n@@ -464,6 +470,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n \t  __str.push_back(__ch);\n \treturn __str;\n       }\n+    /// @endcond\n \n   private:\n     enum class _Type : unsigned char {\n@@ -608,10 +615,13 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n     struct _Parser;\n   };\n \n+  /// @relates std::filesystem::path @{\n+\n   inline void swap(path& __lhs, path& __rhs) noexcept { __lhs.swap(__rhs); }\n \n   size_t hash_value(const path& __p) noexcept;\n \n+  /// Create a path from a UTF-8-encoded sequence of char\n   template<typename _InputIterator>\n     inline auto\n     u8path(_InputIterator __first, _InputIterator __last)\n@@ -638,6 +648,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n #endif\n     }\n \n+  /// Create a path from a UTF-8-encoded sequence of char\n   template<typename _Source>\n     inline auto\n     u8path(const _Source& __source)\n@@ -659,6 +670,9 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n #endif\n     }\n \n+  /// @}\n+\n+  /// Exception type thrown by the Filesystem library\n   class filesystem_error : public std::system_error\n   {\n   public:\n@@ -687,6 +701,8 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n     std::__shared_ptr<const _Impl> _M_impl;\n   };\n \n+  /// @cond undocumented\n+\n   struct path::_Cmpt : path\n   {\n     _Cmpt(basic_string_view<value_type> __s, _Type __t, size_t __pos)\n@@ -796,6 +812,8 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n \t{ return _S_convert(__first.base(), __last.base()); }\n     };\n \n+  /// @endcond\n+\n   /// An iterator for the components of a path\n   class path::iterator\n   {\n@@ -948,6 +966,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n     _M_cmpts.swap(__rhs._M_cmpts);\n   }\n \n+  /// @cond undocumented\n   template<typename _CharT, typename _Traits, typename _Allocator>\n     std::basic_string<_CharT, _Traits, _Allocator>\n     path::_S_str_convert(const string_type& __str, const _Allocator& __a)\n@@ -1012,6 +1031,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n \t    \"Cannot convert character sequence\",\n \t    std::make_error_code(errc::illegal_byte_sequence)));\n     }\n+  /// @endcond\n \n   template<typename _CharT, typename _Traits, typename _Allocator>\n     inline basic_string<_CharT, _Traits, _Allocator>"}, {"sha": "52ef476d55d8fc0029ac460f6ef2d2c8b4ddb476", "filename": "libstdc++-v3/include/std/filesystem", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d727fdc42bbf1ea23bfda42b9c0c87c2cb8e93b9/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ffilesystem", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d727fdc42bbf1ea23bfda42b9c0c87c2cb8e93b9/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ffilesystem", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ffilesystem?ref=d727fdc42bbf1ea23bfda42b9c0c87c2cb8e93b9", "patch": "@@ -22,8 +22,9 @@\n // see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n // <http://www.gnu.org/licenses/>.\n \n-/** @file filesystem\n+/** @file include/filesystem\n  *  This is a Standard C++ Library header.\n+ *  @ingroup filesystem\n  */\n \n #ifndef _GLIBCXX_FILESYSTEM\n@@ -33,6 +34,13 @@\n \n #if __cplusplus >= 201703L\n \n+/**\n+ * @defgroup filesystem File System\n+ *\n+ * Utilities for performing operations on file systems and their components,\n+ * such as paths, regular files, and directories.\n+ */\n+\n #include <bits/fs_fwd.h>\n #include <bits/fs_path.h>\n #include <bits/fs_dir.h>"}]}