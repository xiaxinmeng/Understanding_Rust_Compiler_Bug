{"sha": "ef536b413e077a87b15a11e60ca4c2675d11dccb", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWY1MzZiNDEzZTA3N2E4N2IxNWExMWU2MGNhNGMyNjc1ZDExZGNjYg==", "commit": {"author": {"name": "Janne Blomqvist", "email": "jb@gcc.gnu.org", "date": "2019-05-19T19:38:11Z"}, "committer": {"name": "Janne Blomqvist", "email": "jb@gcc.gnu.org", "date": "2019-05-19T19:38:11Z"}, "message": "libfortran/90038 Reap dead children when wait=.false.\n\nWhen using posix_spawn or fork to launch a child process, the parent\nneeds to wait for the child, otherwise the dead child is left as a\nzombie process. For this purpose one can install a signal handler for\nSIGCHLD.\n\n2019-05-19  Janne Blomqvist  <jb@gcc.gnu.org>\n\n\tPR libfortran/90038\n\t* intrinsics/execute_command_line (sigchld_handler): New function.\n        (execute_command_line): Install handler for SIGCHLD.\n        * configure.ac: Check for presence of sigaction and waitpid.\n        * config.h.in: Regenerated.\n        * configure: Regenerated.\n\nRegtested on x86_64-pc-linux-gnu.\n\nFrom-SVN: r271384", "tree": {"sha": "a13eae10848d4fb1f477e179eefb5f27f860344a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a13eae10848d4fb1f477e179eefb5f27f860344a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ef536b413e077a87b15a11e60ca4c2675d11dccb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ef536b413e077a87b15a11e60ca4c2675d11dccb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ef536b413e077a87b15a11e60ca4c2675d11dccb", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ef536b413e077a87b15a11e60ca4c2675d11dccb/comments", "author": null, "committer": null, "parents": [{"sha": "dbd5df2eb893bf5370fa3fdde6e09f21d4b26b79", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dbd5df2eb893bf5370fa3fdde6e09f21d4b26b79", "html_url": "https://github.com/Rust-GCC/gccrs/commit/dbd5df2eb893bf5370fa3fdde6e09f21d4b26b79"}], "stats": {"total": 52, "additions": 49, "deletions": 3}, "files": [{"sha": "37e87fbe4bd382032210fdb22d5e19b7fb403c94", "filename": "libgfortran/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ef536b413e077a87b15a11e60ca4c2675d11dccb/libgfortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ef536b413e077a87b15a11e60ca4c2675d11dccb/libgfortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2FChangeLog?ref=ef536b413e077a87b15a11e60ca4c2675d11dccb", "patch": "@@ -1,3 +1,12 @@\n+2019-05-19  Janne Blomqvist  <jb@gcc.gnu.org>\n+\n+        PR libfortran/90038\n+        * intrinsics/execute_command_line (sigchld_handler): New function.\n+        (execute_command_line): Install handler for SIGCHLD.\n+        * configure.ac: Check for presence of sigaction and waitpid.\n+        * config.h.in: Regenerated.\n+        * configure: Regenerated.\n+\n 2019-05-17  Janne Blomqvist  <jb@gcc.gnu.org>\n \n \tPR libfortran/90038"}, {"sha": "4478639998771b3d19756e5d185c136b320ede19", "filename": "libgfortran/config.h.in", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ef536b413e077a87b15a11e60ca4c2675d11dccb/libgfortran%2Fconfig.h.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ef536b413e077a87b15a11e60ca4c2675d11dccb/libgfortran%2Fconfig.h.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fconfig.h.in?ref=ef536b413e077a87b15a11e60ca4c2675d11dccb", "patch": "@@ -666,6 +666,9 @@\n /* Define to 1 if you have the `setmode' function. */\n #undef HAVE_SETMODE\n \n+/* Define to 1 if you have the `sigaction' function. */\n+#undef HAVE_SIGACTION\n+\n /* Define to 1 if you have the `sin' function. */\n #undef HAVE_SIN\n \n@@ -831,6 +834,9 @@\n /* Define to 1 if you have the `vsnprintf' function. */\n #undef HAVE_VSNPRINTF\n \n+/* Define to 1 if you have the `waitpid' function. */\n+#undef HAVE_WAITPID\n+\n /* Define if target has a reliable stat. */\n #undef HAVE_WORKING_STAT\n "}, {"sha": "60867b93d0e8d5fd2cb1744f1d340b99970d7db3", "filename": "libgfortran/configure", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ef536b413e077a87b15a11e60ca4c2675d11dccb/libgfortran%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ef536b413e077a87b15a11e60ca4c2675d11dccb/libgfortran%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fconfigure?ref=ef536b413e077a87b15a11e60ca4c2675d11dccb", "patch": "@@ -2638,6 +2638,8 @@ as_fn_append ac_func_list \" link\"\n as_fn_append ac_func_list \" symlink\"\n as_fn_append ac_func_list \" sleep\"\n as_fn_append ac_func_list \" ttyname\"\n+as_fn_append ac_func_list \" sigaction\"\n+as_fn_append ac_func_list \" waitpid\"\n as_fn_append ac_func_list \" alarm\"\n as_fn_append ac_func_list \" access\"\n as_fn_append ac_func_list \" fork\"\n@@ -12698,7 +12700,7 @@ else\n   lt_dlunknown=0; lt_dlno_uscore=1; lt_dlneed_uscore=2\n   lt_status=$lt_dlunknown\n   cat > conftest.$ac_ext <<_LT_EOF\n-#line 12701 \"configure\"\n+#line 12703 \"configure\"\n #include \"confdefs.h\"\n \n #if HAVE_DLFCN_H\n@@ -12804,7 +12806,7 @@ else\n   lt_dlunknown=0; lt_dlno_uscore=1; lt_dlneed_uscore=2\n   lt_status=$lt_dlunknown\n   cat > conftest.$ac_ext <<_LT_EOF\n-#line 12807 \"configure\"\n+#line 12809 \"configure\"\n #include \"confdefs.h\"\n \n #if HAVE_DLFCN_H\n@@ -16971,6 +16973,10 @@ done\n \n \n \n+\n+\n+\n+\n \n \n "}, {"sha": "7cfce28ab697ee2c0353ce6a208e31b0d918c6f4", "filename": "libgfortran/configure.ac", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ef536b413e077a87b15a11e60ca4c2675d11dccb/libgfortran%2Fconfigure.ac", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ef536b413e077a87b15a11e60ca4c2675d11dccb/libgfortran%2Fconfigure.ac", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fconfigure.ac?ref=ef536b413e077a87b15a11e60ca4c2675d11dccb", "patch": "@@ -314,7 +314,7 @@ if test \"${hardwire_newlib:-0}\" -eq 1; then\n else\n    AC_CHECK_FUNCS_ONCE(getrusage times mkstemp strtof strtold snprintf \\\n    ftruncate chsize chdir getentropy getlogin gethostname kill link symlink \\\n-   sleep ttyname \\\n+   sleep ttyname sigaction waitpid \\\n    alarm access fork posix_spawn setmode fcntl writev \\\n    gettimeofday stat fstat lstat getpwuid vsnprintf dup \\\n    getcwd localtime_r gmtime_r getpwuid_r ttyname_r clock_gettime \\"}, {"sha": "1a47163217265ed19ef81d75b7a3b8e9cdd970ef", "filename": "libgfortran/intrinsics/execute_command_line.c", "status": "modified", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ef536b413e077a87b15a11e60ca4c2675d11dccb/libgfortran%2Fintrinsics%2Fexecute_command_line.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ef536b413e077a87b15a11e60ca4c2675d11dccb/libgfortran%2Fintrinsics%2Fexecute_command_line.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fintrinsics%2Fexecute_command_line.c?ref=ef536b413e077a87b15a11e60ca4c2675d11dccb", "patch": "@@ -36,6 +36,9 @@ see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n #include <spawn.h>\n extern char **environ;\n #endif\n+#if defined(HAVE_POSIX_SPAWN) || defined(HAVE_FORK)\n+#include <signal.h>\n+#endif\n \n enum { EXEC_SYNCHRONOUS = -2, EXEC_NOERROR = 0, EXEC_SYSTEMFAILED,\n        EXEC_CHILDFAILED, EXEC_INVALIDCOMMAND };\n@@ -62,6 +65,14 @@ set_cmdstat (int *cmdstat, int value)\n }\n \n \n+#if defined(HAVE_WAITPID) && defined(HAVE_SIGACTION)\n+static void\n+sigchld_handler (int signum __attribute__((unused)))\n+{\n+  while (waitpid ((pid_t)(-1), NULL, WNOHANG) > 0) {}\n+}\n+#endif\n+\n static void\n execute_command_line (const char *command, bool wait, int *exitstat,\n \t\t      int *cmdstat, char *cmdmsg,\n@@ -82,6 +93,20 @@ execute_command_line (const char *command, bool wait, int *exitstat,\n \n       set_cmdstat (cmdstat, EXEC_NOERROR);\n \n+#if defined(HAVE_SIGACTION) && defined(HAVE_WAITPID)\n+      static bool sig_init_saved;\n+      bool sig_init = __atomic_load_n (&sig_init_saved, __ATOMIC_RELAXED);\n+      if (!sig_init)\n+\t{\n+\t  struct sigaction sa;\n+\t  sa.sa_handler = &sigchld_handler;\n+\t  sigemptyset(&sa.sa_mask);\n+\t  sa.sa_flags = SA_RESTART | SA_NOCLDSTOP;\n+\t  sigaction(SIGCHLD, &sa, 0);\n+\t  __atomic_store_n (&sig_init_saved, true, __ATOMIC_RELAXED);\n+\t}\n+#endif\n+\n #ifdef HAVE_POSIX_SPAWN\n       const char * const argv[] = {\"sh\", \"-c\", cmd, NULL};\n       if (posix_spawn (&pid, \"/bin/sh\", NULL, NULL,"}]}