{"sha": "31ae7b863a8c9566cc6bd718c590195b30b20042", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzFhZTdiODYzYThjOTU2NmNjNmJkNzE4YzU5MDE5NWIzMGIyMDA0Mg==", "commit": {"author": {"name": "Ian Lance Taylor", "email": "iant@golang.org", "date": "2020-02-16T01:56:35Z"}, "committer": {"name": "Ian Lance Taylor", "email": "iant@golang.org", "date": "2020-05-09T23:00:54Z"}, "message": "libbacktrace: sometimes read debug sections individually\n\nlibbacktrace/\n\t* elf.c (elf_add): If debug sections are very large or far apart,\n\tread them individually rather than as a single view.", "tree": {"sha": "94b20cfcd00faae5f3b6cf8d6009ffd6a49ee830", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/94b20cfcd00faae5f3b6cf8d6009ffd6a49ee830"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/31ae7b863a8c9566cc6bd718c590195b30b20042", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/31ae7b863a8c9566cc6bd718c590195b30b20042", "html_url": "https://github.com/Rust-GCC/gccrs/commit/31ae7b863a8c9566cc6bd718c590195b30b20042", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/31ae7b863a8c9566cc6bd718c590195b30b20042/comments", "author": {"login": "ianlancetaylor", "id": 3194333, "node_id": "MDQ6VXNlcjMxOTQzMzM=", "avatar_url": "https://avatars.githubusercontent.com/u/3194333?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ianlancetaylor", "html_url": "https://github.com/ianlancetaylor", "followers_url": "https://api.github.com/users/ianlancetaylor/followers", "following_url": "https://api.github.com/users/ianlancetaylor/following{/other_user}", "gists_url": "https://api.github.com/users/ianlancetaylor/gists{/gist_id}", "starred_url": "https://api.github.com/users/ianlancetaylor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ianlancetaylor/subscriptions", "organizations_url": "https://api.github.com/users/ianlancetaylor/orgs", "repos_url": "https://api.github.com/users/ianlancetaylor/repos", "events_url": "https://api.github.com/users/ianlancetaylor/events{/privacy}", "received_events_url": "https://api.github.com/users/ianlancetaylor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ianlancetaylor", "id": 3194333, "node_id": "MDQ6VXNlcjMxOTQzMzM=", "avatar_url": "https://avatars.githubusercontent.com/u/3194333?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ianlancetaylor", "html_url": "https://github.com/ianlancetaylor", "followers_url": "https://api.github.com/users/ianlancetaylor/followers", "following_url": "https://api.github.com/users/ianlancetaylor/following{/other_user}", "gists_url": "https://api.github.com/users/ianlancetaylor/gists{/gist_id}", "starred_url": "https://api.github.com/users/ianlancetaylor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ianlancetaylor/subscriptions", "organizations_url": "https://api.github.com/users/ianlancetaylor/orgs", "repos_url": "https://api.github.com/users/ianlancetaylor/repos", "events_url": "https://api.github.com/users/ianlancetaylor/events{/privacy}", "received_events_url": "https://api.github.com/users/ianlancetaylor/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "261356844a6cb3404f2627a58302f296fb6bebb2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/261356844a6cb3404f2627a58302f296fb6bebb2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/261356844a6cb3404f2627a58302f296fb6bebb2"}], "stats": {"total": 107, "additions": 88, "deletions": 19}, "files": [{"sha": "277d7c01ff32367da57a68c1b3bd5ee9f00300e9", "filename": "libbacktrace/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/31ae7b863a8c9566cc6bd718c590195b30b20042/libbacktrace%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/31ae7b863a8c9566cc6bd718c590195b30b20042/libbacktrace%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libbacktrace%2FChangeLog?ref=31ae7b863a8c9566cc6bd718c590195b30b20042", "patch": "@@ -1,3 +1,8 @@\n+2020-05-09  Ian Lance Taylor  <iant@golang.org>\n+\n+\t* elf.c (elf_add): If debug sections are very large or far apart,\n+\tread them individually rather than as a single view.\n+\n 2020-05-08  Ian Lance Taylor  <iant@golang.org>\n \n \t* fileline.c (sysctl_exec_name): New static function."}, {"sha": "eb481c588e7e8e35499c141fdbe20c15cdca520b", "filename": "libbacktrace/elf.c", "status": "modified", "additions": 83, "deletions": 19, "changes": 102, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/31ae7b863a8c9566cc6bd718c590195b30b20042/libbacktrace%2Felf.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/31ae7b863a8c9566cc6bd718c590195b30b20042/libbacktrace%2Felf.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libbacktrace%2Felf.c?ref=31ae7b863a8c9566cc6bd718c590195b30b20042", "patch": "@@ -2659,10 +2659,13 @@ elf_add (struct backtrace_state *state, const char *filename, int descriptor,\n   uint32_t debugaltlink_buildid_size;\n   off_t min_offset;\n   off_t max_offset;\n+  off_t debug_size;\n   struct backtrace_view debug_view;\n   int debug_view_valid;\n   unsigned int using_debug_view;\n   uint16_t *zdebug_table;\n+  struct backtrace_view split_debug_view[DEBUG_MAX];\n+  unsigned char split_debug_view_valid[DEBUG_MAX];\n   struct elf_ppc64_opd_data opd_data, *opd;\n   struct dwarf_sections dwarf_sections;\n \n@@ -2687,6 +2690,7 @@ elf_add (struct backtrace_state *state, const char *filename, int descriptor,\n   debugaltlink_buildid_data = NULL;\n   debugaltlink_buildid_size = 0;\n   debug_view_valid = 0;\n+  memset (&split_debug_view_valid[0], 0, sizeof split_debug_view_valid);\n   opd = NULL;\n \n   if (!backtrace_get_view (state, descriptor, 0, sizeof ehdr, error_callback,\n@@ -3131,6 +3135,7 @@ elf_add (struct backtrace_state *state, const char *filename, int descriptor,\n \n   min_offset = 0;\n   max_offset = 0;\n+  debug_size = 0;\n   for (i = 0; i < (int) DEBUG_MAX; ++i)\n     {\n       off_t end;\n@@ -3142,6 +3147,7 @@ elf_add (struct backtrace_state *state, const char *filename, int descriptor,\n \t  end = sections[i].offset + sections[i].size;\n \t  if (end > max_offset)\n \t    max_offset = end;\n+\t  debug_size += sections[i].size;\n \t}\n       if (zsections[i].size != 0)\n \t{\n@@ -3150,6 +3156,7 @@ elf_add (struct backtrace_state *state, const char *filename, int descriptor,\n \t  end = zsections[i].offset + zsections[i].size;\n \t  if (end > max_offset)\n \t    max_offset = end;\n+\t  debug_size += zsections[i].size;\n \t}\n     }\n   if (min_offset == 0 || max_offset == 0)\n@@ -3159,34 +3166,71 @@ elf_add (struct backtrace_state *state, const char *filename, int descriptor,\n       return 1;\n     }\n \n-  if (!backtrace_get_view (state, descriptor, min_offset,\n-\t\t\t   max_offset - min_offset,\n-\t\t\t   error_callback, data, &debug_view))\n-    goto fail;\n-  debug_view_valid = 1;\n+  /* If the total debug section size is large, assume that there are\n+     gaps between the sections, and read them individually.  */\n+\n+  if (max_offset - min_offset < 0x20000000\n+      || max_offset - min_offset < debug_size + 0x10000)\n+    {\n+      if (!backtrace_get_view (state, descriptor, min_offset,\n+\t\t\t       max_offset - min_offset,\n+\t\t\t       error_callback, data, &debug_view))\n+\tgoto fail;\n+      debug_view_valid = 1;\n+    }\n+  else\n+    {\n+      memset (&split_debug_view[0], 0, sizeof split_debug_view);\n+      for (i = 0; i < (int) DEBUG_MAX; ++i)\n+\t{\n+\t  struct debug_section_info *dsec;\n+\n+\t  if (sections[i].size != 0)\n+\t    dsec = &sections[i];\n+\t  else if (zsections[i].size != 0)\n+\t    dsec = &zsections[i];\n+\t  else\n+\t    continue;\n+\n+\t  if (!backtrace_get_view (state, descriptor, dsec->offset, dsec->size,\n+\t\t\t\t   error_callback, data, &split_debug_view[i]))\n+\t    goto fail;\n+\t  split_debug_view_valid[i] = 1;\n+\n+\t  if (sections[i].size != 0)\n+\t    sections[i].data = ((const unsigned char *)\n+\t\t\t\tsplit_debug_view[i].data);\n+\t  else\n+\t    zsections[i].data = ((const unsigned char *)\n+\t\t\t\t split_debug_view[i].data);\n+\t}\n+    }\n \n   /* We've read all we need from the executable.  */\n   if (!backtrace_close (descriptor, error_callback, data))\n     goto fail;\n   descriptor = -1;\n \n   using_debug_view = 0;\n-  for (i = 0; i < (int) DEBUG_MAX; ++i)\n+  if (debug_view_valid)\n     {\n-      if (sections[i].size == 0)\n-\tsections[i].data = NULL;\n-      else\n+      for (i = 0; i < (int) DEBUG_MAX; ++i)\n \t{\n-\t  sections[i].data = ((const unsigned char *) debug_view.data\n-\t\t\t      + (sections[i].offset - min_offset));\n-\t  ++using_debug_view;\n-\t}\n+\t  if (sections[i].size == 0)\n+\t    sections[i].data = NULL;\n+\t  else\n+\t    {\n+\t      sections[i].data = ((const unsigned char *) debug_view.data\n+\t\t\t\t  + (sections[i].offset - min_offset));\n+\t      ++using_debug_view;\n+\t    }\n \n-      if (zsections[i].size == 0)\n-\tzsections[i].data = NULL;\n-      else\n-\tzsections[i].data = ((const unsigned char *) debug_view.data\n-\t\t\t     + (zsections[i].offset - min_offset));\n+\t  if (zsections[i].size == 0)\n+\t    zsections[i].data = NULL;\n+\t  else\n+\t    zsections[i].data = ((const unsigned char *) debug_view.data\n+\t\t\t\t + (zsections[i].offset - min_offset));\n+\t}\n     }\n \n   /* Uncompress the old format (--compress-debug-sections=zlib-gnu).  */\n@@ -3218,6 +3262,13 @@ elf_add (struct backtrace_state *state, const char *filename, int descriptor,\n \t  sections[i].data = uncompressed_data;\n \t  sections[i].size = uncompressed_size;\n \t  sections[i].compressed = 0;\n+\n+\t  if (split_debug_view_valid[i])\n+\t    {\n+\t      backtrace_release_view (state, &split_debug_view[i],\n+\t\t\t\t      error_callback, data);\n+\t      split_debug_view_valid[i] = 0;\n+\t    }\n \t}\n     }\n \n@@ -3250,7 +3301,14 @@ elf_add (struct backtrace_state *state, const char *filename, int descriptor,\n       sections[i].size = uncompressed_size;\n       sections[i].compressed = 0;\n \n-      --using_debug_view;\n+      if (debug_view_valid)\n+\t--using_debug_view;\n+      else if (split_debug_view_valid[i])\n+\t{\n+\t  backtrace_release_view (state, &split_debug_view[i],\n+\t\t\t\t  error_callback, data);\n+\t  split_debug_view_valid[i] = 0;\n+\t}\n     }\n \n   if (zdebug_table != NULL)\n@@ -3297,6 +3355,12 @@ elf_add (struct backtrace_state *state, const char *filename, int descriptor,\n     backtrace_release_view (state, &buildid_view, error_callback, data);\n   if (debug_view_valid)\n     backtrace_release_view (state, &debug_view, error_callback, data);\n+  for (i = 0; i < (int) DEBUG_MAX; ++i)\n+    {\n+      if (split_debug_view_valid[i])\n+\tbacktrace_release_view (state, &split_debug_view[i],\n+\t\t\t\terror_callback, data);\n+    }\n   if (opd)\n     backtrace_release_view (state, &opd->view, error_callback, data);\n   if (descriptor != -1)"}]}