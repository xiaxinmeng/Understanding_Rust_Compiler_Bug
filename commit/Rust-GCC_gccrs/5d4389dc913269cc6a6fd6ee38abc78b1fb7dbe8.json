{"sha": "5d4389dc913269cc6a6fd6ee38abc78b1fb7dbe8", "node_id": "C_kwDOANBUbNoAKDVkNDM4OWRjOTEzMjY5Y2M2YTZmZDZlZTM4YWJjNzhiMWZiN2RiZTg", "commit": {"author": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2022-08-26T00:16:21Z"}, "committer": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2022-08-26T00:16:21Z"}, "message": "Daily bump.", "tree": {"sha": "fe08527dc887d8b7542dc3e4c2bf3c35231ce1df", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/fe08527dc887d8b7542dc3e4c2bf3c35231ce1df"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5d4389dc913269cc6a6fd6ee38abc78b1fb7dbe8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5d4389dc913269cc6a6fd6ee38abc78b1fb7dbe8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5d4389dc913269cc6a6fd6ee38abc78b1fb7dbe8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5d4389dc913269cc6a6fd6ee38abc78b1fb7dbe8/comments", "author": null, "committer": null, "parents": [{"sha": "60d84e82639e25b025a926b19ec5a92fba4447ce", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/60d84e82639e25b025a926b19ec5a92fba4447ce", "html_url": "https://github.com/Rust-GCC/gccrs/commit/60d84e82639e25b025a926b19ec5a92fba4447ce"}], "stats": {"total": 255, "additions": 254, "deletions": 1}, "files": [{"sha": "2fc24aee263f60361ed30ab76a9623ca4427400c", "filename": "fixincludes/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5d4389dc913269cc6a6fd6ee38abc78b1fb7dbe8/fixincludes%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5d4389dc913269cc6a6fd6ee38abc78b1fb7dbe8/fixincludes%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/fixincludes%2FChangeLog?ref=5d4389dc913269cc6a6fd6ee38abc78b1fb7dbe8", "patch": "@@ -1,3 +1,8 @@\n+2022-08-25  Martin Liska  <mliska@suse.cz>\n+\n+\t* config.h.in: Regenerate.\n+\t* configure: Regenerate.\n+\n 2022-02-27  John David Anglin  <danglin@gcc.gnu.org>\n \n \t* inclhack.def (hpux_math_constexpr): New hack."}, {"sha": "fb8589587ec61d6adc0d6adfc7bccb59864fbde9", "filename": "gcc/ChangeLog", "status": "modified", "additions": 75, "deletions": 0, "changes": 75, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5d4389dc913269cc6a6fd6ee38abc78b1fb7dbe8/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5d4389dc913269cc6a6fd6ee38abc78b1fb7dbe8/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=5d4389dc913269cc6a6fd6ee38abc78b1fb7dbe8", "patch": "@@ -1,3 +1,78 @@\n+2022-08-25  Marek Polacek  <polacek@redhat.com>\n+\n+\t* ginclude/stddef.h: Define nullptr_t.\n+\n+2022-08-25  Joseph Myers  <joseph@codesourcery.com>\n+\n+\t* gimplify.cc (gimplify_modify_expr): Convert initialization from\n+\ta variable-size CONSTRUCTOR to memset before call to\n+\tgimplify_modify_expr_rhs.\n+\n+2022-08-25  Jason Merrill  <jason@redhat.com>\n+\n+\t* dwarf2out.cc (base_type_die): Also use DW_ATE_UTF for char8_t.\n+\n+2022-08-25  Andreas Krebbel  <krebbel@linux.ibm.com>\n+\n+\tPR target/106101\n+\t* config/s390/predicates.md (subreg_register_operand): New\n+\tpredicate.\n+\t* config/s390/s390-protos.h (s390_gen_lowpart_subreg): New\n+\tfunction prototype.\n+\t* config/s390/s390.cc (s390_gen_lowpart_subreg): New function.\n+\t(s390_expand_insv): Use s390_gen_lowpart_subreg instead of\n+\tgen_lowpart.\n+\t* config/s390/s390.md (\"*get_tp_64\", \"*zero_extendhisi2_31\")\n+\t(\"*zero_extendqisi2_31\", \"*zero_extendqihi2_31\"): Likewise.\n+\t(\"movstrictqi\", \"movstricthi\", \"movstrictsi\"): Use the\n+\tsubreg_register_operand predicate instead of register_operand.\n+\n+2022-08-25  Xi Ruoyao  <xry111@xry111.site>\n+\n+\t* config/loongarch/loongarch-protos.h (loongarch_symbol_type):\n+\tAdd SYMBOL_PCREL64 and change the description for SYMBOL_PCREL.\n+\t* config/loongarch/loongarch.cc (loongarch_attribute_table):\n+\tNew attribute table.\n+\t(TARGET_ATTRIBUTE_TABLE): Define the target hook.\n+\t(loongarch_handle_model_attribute): New static function.\n+\t(loongarch_classify_symbol): Take TARGET_CMODEL_EXTREME and the\n+\tmodel attribute of SYMBOL_REF_DECL into account returning\n+\tSYMBOL_PCREL or SYMBOL_PCREL64.\n+\t(loongarch_use_anchors_for_symbol_p): New static function.\n+\t(TARGET_USE_ANCHORS_FOR_SYMBOL_P): Define the target hook.\n+\t(loongarch_symbol_extreme_p): New static function.\n+\t(loongarch_symbolic_constant_p): Handle SYMBOL_PCREL64.\n+\t(loongarch_symbol_insns): Likewise.\n+\t(loongarch_split_symbol_type): Likewise.\n+\t(loongarch_split_symbol): Check SYMBOL_PCREL64 instead of\n+\tTARGET_CMODEL_EXTREME for PC-relative addressing.\n+\t(loongarch_print_operand_reloc): Likewise.\n+\t* doc/extend.texi (Variable Attributes): Document new\n+\tLoongArch specific attribute.\n+\n+2022-08-25  Xi Ruoyao  <xry111@xry111.site>\n+\n+\t* config/loongarch/loongarch.cc (loongarch_classify_symbol):\n+\tReturn early if the rtx is not SYMBOL_REF.\n+\n+2022-08-25  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/106737\n+\t* tree-parloops.cc (transform_to_exit_first_loop_alt): Do not\n+\tverify SSA form.\n+\n+2022-08-25  Chenghua Xu  <xuchenghua@loongson.cn>\n+\n+\tPR target/106459\n+\t* config/loongarch/loongarch.cc (loongarch_build_integer):\n+\tUse HOST_WIDE_INT.\n+\t* config/loongarch/loongarch.h (IMM_REACH): Likewise.\n+\t(HWIT_1U): New Defined.\n+\t(LU12I_OPERAND): Use HOST_WIDE_INT.\n+\t(LU32I_OPERAND): Likewise.\n+\t(LU52I_OPERAND): Likewise.\n+\t(HWIT_UC_0xFFF): Likwise.\n+\n 2022-08-24  Andrew Pinski  <apinski@marvell.com>\n \n \tPR target/106632"}, {"sha": "d51496b47e3944d0d35512868e6e85219fc6d8d7", "filename": "gcc/DATESTAMP", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5d4389dc913269cc6a6fd6ee38abc78b1fb7dbe8/gcc%2FDATESTAMP", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5d4389dc913269cc6a6fd6ee38abc78b1fb7dbe8/gcc%2FDATESTAMP", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FDATESTAMP?ref=5d4389dc913269cc6a6fd6ee38abc78b1fb7dbe8", "patch": "@@ -1 +1 @@\n-20220825\n+20220826"}, {"sha": "a70ec0aabcf8fc42caf8c3bc3762eb21e0e9802c", "filename": "gcc/c-family/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5d4389dc913269cc6a6fd6ee38abc78b1fb7dbe8/gcc%2Fc-family%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5d4389dc913269cc6a6fd6ee38abc78b1fb7dbe8/gcc%2Fc-family%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2FChangeLog?ref=5d4389dc913269cc6a6fd6ee38abc78b1fb7dbe8", "patch": "@@ -1,3 +1,18 @@\n+2022-08-25  Marek Polacek  <polacek@redhat.com>\n+\n+\t* c-common.cc (c_common_reswords): Enable nullptr in C2X.\n+\t(c_common_nodes_and_builtins): Create the built-in node for nullptr.\n+\t* c-common.h (enum c_tree_index): Add CTI_NULLPTR, CTI_NULLPTR_TYPE.\n+\t(struct c_common_resword): Resize the disable member.\n+\t(D_C2X): Add.\n+\t(nullptr_node): Define.\n+\t(nullptr_type_node): Define.\n+\t(NULLPTR_TYPE_P): Define.\n+\t* c-pretty-print.cc (c_pretty_printer::simple_type_specifier): Handle\n+\tNULLPTR_TYPE.\n+\t(c_pretty_printer::direct_abstract_declarator): Likewise.\n+\t(c_pretty_printer::constant): Likewise.\n+\n 2022-08-16  Tom Honermann  <tom@honermann.net>\n \n \tPR c++/106423"}, {"sha": "2f0eb8d542fd6d763f259db68ec686f741655001", "filename": "gcc/c/ChangeLog", "status": "modified", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5d4389dc913269cc6a6fd6ee38abc78b1fb7dbe8/gcc%2Fc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5d4389dc913269cc6a6fd6ee38abc78b1fb7dbe8/gcc%2Fc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2FChangeLog?ref=5d4389dc913269cc6a6fd6ee38abc78b1fb7dbe8", "patch": "@@ -1,3 +1,38 @@\n+2022-08-25  Marek Polacek  <polacek@redhat.com>\n+\n+\t* c-convert.cc (c_convert) <case POINTER_TYPE>: Handle NULLPTR_TYPE.\n+\tGive a better diagnostic when converting to nullptr_t.\n+\t* c-decl.cc (c_init_decl_processing): Perform C-specific nullptr\n+\tinitialization.\n+\t* c-parser.cc (c_parse_init): Maybe OR D_C2X into mask.\n+\t(c_parser_postfix_expression): Handle RID_NULLPTR.\n+\t* c-typeck.cc (null_pointer_constant_p): Return true when expr is\n+\tnullptr_node.\n+\t(build_unary_op) <case TRUTH_NOT_EXPR>: Handle NULLPTR_TYPE.\n+\t(build_conditional_expr): Handle the case when the second/third operand\n+\tis NULLPTR_TYPE and third/second operand is POINTER_TYPE.\n+\t(convert_for_assignment): Handle converting an expression of type\n+\tnullptr_t to pointer/bool.\n+\t(build_binary_op) <case TRUTH_XOR_EXPR>: Handle NULLPTR_TYPE.\n+\t<case EQ_EXPR>: Handle comparing operands of type nullptr_t.\n+\n+2022-08-25  Joseph Myers  <joseph@codesourcery.com>\n+\n+\t* c-decl.cc (start_decl): Do not diagnose initialization of\n+\tvariable-sized objects here.\n+\t* c-parser.cc (c_parser_braced_init): Add argument DECL.  All\n+\tcallers changed.\n+\t(c_parser_initializer): Diagnose initialization of variable-sized\n+\tobjects other than with braced initializer.\n+\t(c_parser_braced_init): Use pedwarn_c11 for empty initializer\n+\tbraces and update diagnostic text.  Diagnose initialization of\n+\tvariable-sized objects with nonempty braces.\n+\t* c-typeck.cc (digest_init): Update diagnostic for initialization\n+\tof variable-sized objects.\n+\t(really_start_incremental_init, set_designator)\n+\t(process_init_element): Update comments.\n+\t(pop_init_level): Allow scalar empty initializers.\n+\n 2022-08-17  Tobias Burnus  <tobias@codesourcery.com>\n \t    Chung-Lin Tang  <cltang@codesourcery.com>\n "}, {"sha": "0b2763d4384ed6eafbc7992217a15e4db2c86623", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5d4389dc913269cc6a6fd6ee38abc78b1fb7dbe8/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5d4389dc913269cc6a6fd6ee38abc78b1fb7dbe8/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=5d4389dc913269cc6a6fd6ee38abc78b1fb7dbe8", "patch": "@@ -1,3 +1,18 @@\n+2022-08-25  Marek Polacek  <polacek@redhat.com>\n+\n+\t* cp-tree.h (enum cp_tree_index): Remove CTI_NULLPTR, CTI_NULLPTR_TYPE.\n+\tMove it to c_tree_index.\n+\t(nullptr_node): No longer define here.\n+\t(nullptr_type_node): Likewise.\n+\t(NULLPTR_TYPE_P): Likewise.\n+\t* decl.cc (cxx_init_decl_processing): Only keep C++-specific nullptr\n+\tinitialization; move the shared code to c_common_nodes_and_builtins.\n+\n+2022-08-25  Jason Merrill  <jason@redhat.com>\n+\n+\t* call.cc (unsafe_return_slot_p): Return 2 for *this in a\n+\tconstructor.\n+\n 2022-08-23  Marek Polacek  <polacek@redhat.com>\n \n \t* typeck.cc (maybe_warn_pessimizing_move): Don't warn about"}, {"sha": "631738b9684c3fe507e1d1f319481a68d2129574", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5d4389dc913269cc6a6fd6ee38abc78b1fb7dbe8/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5d4389dc913269cc6a6fd6ee38abc78b1fb7dbe8/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=5d4389dc913269cc6a6fd6ee38abc78b1fb7dbe8", "patch": "@@ -1,3 +1,9 @@\n+2022-08-25  Tobias Burnus  <tobias@codesourcery.com>\n+\n+\t* parse.cc (parse_omp_structured_block): When parsing strictly\n+\tstructured blocks, issue an error if the end-directive comes\n+\tbefore the 'end block'.\n+\n 2022-08-24  Harald Anlauf  <anlauf@gmx.de>\n \n \tPR fortran/103694"}, {"sha": "af5de871f2d44953222fdf4da87fdbaed9e887c7", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 60, "deletions": 0, "changes": 60, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5d4389dc913269cc6a6fd6ee38abc78b1fb7dbe8/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5d4389dc913269cc6a6fd6ee38abc78b1fb7dbe8/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=5d4389dc913269cc6a6fd6ee38abc78b1fb7dbe8", "patch": "@@ -1,3 +1,63 @@\n+2022-08-25  Marek Polacek  <polacek@redhat.com>\n+\n+\t* gcc.dg/c11-nullptr-1.c: New test.\n+\t* gcc.dg/c17-nullptr-1.c: New test.\n+\t* gcc.dg/c17-nullptr-2.c: New test.\n+\t* gcc.dg/c2x-nullptr-1.c: New test.\n+\t* gcc.dg/c2x-nullptr-2.c: New test.\n+\t* gcc.dg/c2x-nullptr-3.c: New test.\n+\t* gcc.dg/c2x-nullptr-4.c: New test.\n+\t* gcc.dg/c2x-nullptr-5.c: New test.\n+\n+2022-08-25  Joseph Myers  <joseph@codesourcery.com>\n+\n+\t* gcc.dg/c11-empty-init-1.c, gcc.dg/c11-empty-init-2.c,\n+\tgcc.dg/c11-empty-init-3.c, gcc.dg/c2x-empty-init-1.c,\n+\tgcc.dg/c2x-empty-init-2.c, gcc.dg/c2x-empty-init-3.c,\n+\tgcc.dg/gnu2x-empty-init-1.c, gcc.dg/gnu2x-empty-init-2.c: New\n+\ttests.\n+\t* gcc.dg/torture/dfp-default-init-1.c: Also test empty\n+\tinitializers.\n+\t* gcc.dg/init-bad-1.c, gcc.dg/noncompile/pr71583.c,\n+\tgcc.dg/pr61096-1.c, gcc.dg/vla-init-2.c, gcc.dg/vla-init-3.c,\n+\tgcc.target/i386/sse2-bfloat16-scalar-typecheck.c: Update expected\n+\tdiagnostics.\n+\t* gcc.dg/ubsan/c-shift-1.c: Use nonempty initializers for VLA\n+\tinitializations expected to be diagnosed.\n+\n+2022-08-25  Jason Merrill  <jason@redhat.com>\n+\n+\t* g++.dg/init/elide8.C: New test.\n+\n+2022-08-25  Jason Merrill  <jason@redhat.com>\n+\n+\t* g++.dg/debug/dwarf2/utf-1.C: New test.\n+\n+2022-08-25  Andreas Krebbel  <krebbel@linux.ibm.com>\n+\n+\tPR target/106101\n+\t* gcc.c-torture/compile/pr106101.c: New test.\n+\n+2022-08-25  Xi Ruoyao  <xry111@xry111.site>\n+\n+\t* gcc.target/loongarch/attr-model-test.c: New test.\n+\t* gcc.target/loongarch/attr-model-1.c: New test.\n+\t* gcc.target/loongarch/attr-model-2.c: New test.\n+\t* gcc.target/loongarch/attr-model-diag.c: New test.\n+\n+2022-08-25  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/106737\n+\t* gcc.dg/autopar/pr106737.c: New testcase.\n+\n+2022-08-25  Tobias Burnus  <tobias@codesourcery.com>\n+\n+\t* gfortran.dg/gomp/strictly-structured-block-4.f90: New test.\n+\n+2022-08-25  Chenghua Xu  <xuchenghua@loongson.cn>\n+\n+\t* gcc.target/loongarch/pr106459.c: New test.\n+\n 2022-08-24  Andrew Pinski  <apinski@marvell.com>\n \n \t* lib/target-supports.exp (check_effective_target_bswap):"}, {"sha": "214b1a95f0f0f3c92faed9303b46b5612192c676", "filename": "libada/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5d4389dc913269cc6a6fd6ee38abc78b1fb7dbe8/libada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5d4389dc913269cc6a6fd6ee38abc78b1fb7dbe8/libada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libada%2FChangeLog?ref=5d4389dc913269cc6a6fd6ee38abc78b1fb7dbe8", "patch": "@@ -1,3 +1,7 @@\n+2022-08-25  Martin Liska  <mliska@suse.cz>\n+\n+\t* configure: Regenerate.\n+\n 2021-10-22  Eric Gallager  <egallager@gcc.gnu.org>\n \n \tPR other/102663"}, {"sha": "736288f190e658ff6c48fe79f4ff12154bda6a46", "filename": "libiberty/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5d4389dc913269cc6a6fd6ee38abc78b1fb7dbe8/libiberty%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5d4389dc913269cc6a6fd6ee38abc78b1fb7dbe8/libiberty%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2FChangeLog?ref=5d4389dc913269cc6a6fd6ee38abc78b1fb7dbe8", "patch": "@@ -1,3 +1,7 @@\n+2022-08-25  Martin Liska  <mliska@suse.cz>\n+\n+\t* configure: Regenerate.\n+\n 2022-07-22  Martin Liska  <mliska@suse.cz>\n \n \tPR other/106370"}, {"sha": "1afd92cf49d4219d4cb224141f02dafff176b383", "filename": "libobjc/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5d4389dc913269cc6a6fd6ee38abc78b1fb7dbe8/libobjc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5d4389dc913269cc6a6fd6ee38abc78b1fb7dbe8/libobjc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libobjc%2FChangeLog?ref=5d4389dc913269cc6a6fd6ee38abc78b1fb7dbe8", "patch": "@@ -1,3 +1,7 @@\n+2022-08-25  Martin Liska  <mliska@suse.cz>\n+\n+\t* configure: Regenerate.\n+\n 2021-01-05  Samuel Thibault  <samuel.thibault@ens-lyon.org>\n \n \t* configure: Re-generate."}, {"sha": "f502750dc89930bd377a238bba86645670da5777", "filename": "liboffloadmic/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5d4389dc913269cc6a6fd6ee38abc78b1fb7dbe8/liboffloadmic%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5d4389dc913269cc6a6fd6ee38abc78b1fb7dbe8/liboffloadmic%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/liboffloadmic%2FChangeLog?ref=5d4389dc913269cc6a6fd6ee38abc78b1fb7dbe8", "patch": "@@ -1,3 +1,8 @@\n+2022-08-25  Martin Liska  <mliska@suse.cz>\n+\n+\t* configure: Regenerate.\n+\t* plugin/configure: Regenerate.\n+\n 2022-07-04  Tobias Burnus  <tobias@codesourcery.com>\n \t    Chung-Lin Tang  <cltang@codesourcery.com>\n \t    Thomas Schwinge  <thomas@codesourcery.com>"}, {"sha": "f2542ddc5a1fb66be8b2c7508972df18b6960a5c", "filename": "libquadmath/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5d4389dc913269cc6a6fd6ee38abc78b1fb7dbe8/libquadmath%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5d4389dc913269cc6a6fd6ee38abc78b1fb7dbe8/libquadmath%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libquadmath%2FChangeLog?ref=5d4389dc913269cc6a6fd6ee38abc78b1fb7dbe8", "patch": "@@ -1,3 +1,7 @@\n+2022-08-25  Martin Liska  <mliska@suse.cz>\n+\n+\t* configure: Regenerate.\n+\n 2022-01-11  Jakub Jelinek  <jakub@redhat.com>\n \n \t* configure.ac: Set XCFLAGS to -mno-gnu-attribute on"}, {"sha": "a599349cdf7bdc001c830b23f09f26d7746117d4", "filename": "libssp/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5d4389dc913269cc6a6fd6ee38abc78b1fb7dbe8/libssp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5d4389dc913269cc6a6fd6ee38abc78b1fb7dbe8/libssp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libssp%2FChangeLog?ref=5d4389dc913269cc6a6fd6ee38abc78b1fb7dbe8", "patch": "@@ -1,3 +1,7 @@\n+2022-08-25  Martin Liska  <mliska@suse.cz>\n+\n+\t* configure: Regenerate.\n+\n 2021-01-05  Samuel Thibault  <samuel.thibault@ens-lyon.org>\n \n \t* configure: Re-generate."}, {"sha": "1b20d4eb783b935cff79e2cc372afbab7da7384b", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5d4389dc913269cc6a6fd6ee38abc78b1fb7dbe8/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5d4389dc913269cc6a6fd6ee38abc78b1fb7dbe8/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=5d4389dc913269cc6a6fd6ee38abc78b1fb7dbe8", "patch": "@@ -1,3 +1,12 @@\n+2022-08-25  Patrick Palka  <ppalka@redhat.com>\n+\n+\t* include/std/ranges (lazy_split_view::_OuterIter::_M_current):\n+\tRemove redundant comment.\n+\t(lazy_split_view::_M_current): Likewise.\n+\t(common_view::common_view): Remove commented out view-converting\n+\tconstructor as per LWG3405.\n+\t(elements_view::_Iterator::_Iterator): Uglify 'current' and 'i'.\n+\n 2022-08-24  Patrick Palka  <ppalka@redhat.com>\n \n \t* include/bits/ranges_algo.h (__min_fn, min): Move to ..."}, {"sha": "41eaa65aa82c3b17b485f9dd63fbf1eb68798748", "filename": "libvtv/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5d4389dc913269cc6a6fd6ee38abc78b1fb7dbe8/libvtv%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5d4389dc913269cc6a6fd6ee38abc78b1fb7dbe8/libvtv%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libvtv%2FChangeLog?ref=5d4389dc913269cc6a6fd6ee38abc78b1fb7dbe8", "patch": "@@ -1,3 +1,7 @@\n+2022-08-25  Martin Liska  <mliska@suse.cz>\n+\n+\t* configure: Regenerate.\n+\n 2021-01-05  Samuel Thibault  <samuel.thibault@ens-lyon.org>\n \n \t* configure: Re-generate."}, {"sha": "3459bc66035a76aa775743f2b6bf84cc702154ea", "filename": "zlib/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5d4389dc913269cc6a6fd6ee38abc78b1fb7dbe8/zlib%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5d4389dc913269cc6a6fd6ee38abc78b1fb7dbe8/zlib%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/zlib%2FChangeLog?ref=5d4389dc913269cc6a6fd6ee38abc78b1fb7dbe8", "patch": "@@ -1,3 +1,7 @@\n+2022-08-25  Martin Liska  <mliska@suse.cz>\n+\n+\t* configure: Regenerate.\n+\n 2021-12-16  H.J. Lu  <hjl.tools@gmail.com>\n \n \tRevert:"}]}