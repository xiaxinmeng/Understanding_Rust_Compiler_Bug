{"sha": "a59d8e8eb67086eb6df936074ef6d8fb4834bcc2", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTU5ZDhlOGViNjcwODZlYjZkZjkzNjA3NGVmNmQ4ZmI0ODM0YmNjMg==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2014-07-08T09:22:54Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2014-07-08T09:22:54Z"}, "message": "tree-ssa-dom.h (loop_depth_of_name): Remove.\n\n2014-07-08  Richard Biener  <rguenther@suse.de>\n\n\t* tree-ssa-dom.h (loop_depth_of_name): Remove.\n\t* tree-ssa-dom.c (record_equivalences_from_phis): Remove\n\trestriction on loop depth difference.\n\t(record_equality): Likewise.\n\t(propagate_rhs_into_lhs): Likewise.  Simplify condition.\n\t(loop_depth_of_name): Remove.\n\t* tree-ssa-copy.c (copy_prop_visit_phi_node): Remove\n\trestriction on loop depth difference.\n\t(init_copy_prop): Likewise.\n\n\t* gcc.dg/tree-ssa/ssa-pre-16.c: Adjust expected eliminations.\n\nFrom-SVN: r212352", "tree": {"sha": "fc2de2ca11505b2c9e319eb1096a8574539176b7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/fc2de2ca11505b2c9e319eb1096a8574539176b7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a59d8e8eb67086eb6df936074ef6d8fb4834bcc2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a59d8e8eb67086eb6df936074ef6d8fb4834bcc2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a59d8e8eb67086eb6df936074ef6d8fb4834bcc2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a59d8e8eb67086eb6df936074ef6d8fb4834bcc2/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "70f633c5b36f5d95b2ab92610940a73051951a38", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/70f633c5b36f5d95b2ab92610940a73051951a38", "html_url": "https://github.com/Rust-GCC/gccrs/commit/70f633c5b36f5d95b2ab92610940a73051951a38"}], "stats": {"total": 103, "additions": 36, "deletions": 67}, "files": [{"sha": "f333d614847435e81fa6ead369125d77251aeada", "filename": "gcc/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a59d8e8eb67086eb6df936074ef6d8fb4834bcc2/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a59d8e8eb67086eb6df936074ef6d8fb4834bcc2/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=a59d8e8eb67086eb6df936074ef6d8fb4834bcc2", "patch": "@@ -1,3 +1,15 @@\n+2014-07-08  Richard Biener  <rguenther@suse.de>\n+\n+\t* tree-ssa-dom.h (loop_depth_of_name): Remove.\n+\t* tree-ssa-dom.c (record_equivalences_from_phis): Remove\n+\trestriction on loop depth difference.\n+\t(record_equality): Likewise.\n+\t(propagate_rhs_into_lhs): Likewise.  Simplify condition.\n+\t(loop_depth_of_name): Remove.\n+\t* tree-ssa-copy.c (copy_prop_visit_phi_node): Remove\n+\trestriction on loop depth difference.\n+\t(init_copy_prop): Likewise.\n+\n 2014-07-08  Jan Hubicka  <hubicka@ucw.cz>\n \n \t* tree-ssa-alias.c (walk_aliased_vdefs_1): Add FUNCTION_ENTRY_REACHED"}, {"sha": "d933972ff5b3137b95cf00769e3b790d6f5e738a", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a59d8e8eb67086eb6df936074ef6d8fb4834bcc2/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a59d8e8eb67086eb6df936074ef6d8fb4834bcc2/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=a59d8e8eb67086eb6df936074ef6d8fb4834bcc2", "patch": "@@ -1,3 +1,15 @@\n+2014-07-08  Richard Biener  <rguenther@suse.de>\n+\n+\t* tree-ssa-dom.h (loop_depth_of_name): Remove.\n+\t* tree-ssa-dom.c (record_equivalences_from_phis): Remove\n+\trestriction on loop depth difference.\n+\t(record_equality): Likewise.\n+\t(propagate_rhs_into_lhs): Likewise.  Simplify condition.\n+\t(loop_depth_of_name): Remove.\n+\t* tree-ssa-copy.c (copy_prop_visit_phi_node): Remove\n+\trestriction on loop depth difference.\n+\t(init_copy_prop): Likewise.\n+\n 2014-07-08  Richard Biener  <rguenther@suse.de>\n \n \tPR tree-optimization/61681"}, {"sha": "b087dc1b45c20398d3544d59caaad103a513124c", "filename": "gcc/testsuite/gcc.dg/tree-ssa/ssa-pre-16.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a59d8e8eb67086eb6df936074ef6d8fb4834bcc2/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-pre-16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a59d8e8eb67086eb6df936074ef6d8fb4834bcc2/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-pre-16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-pre-16.c?ref=a59d8e8eb67086eb6df936074ef6d8fb4834bcc2", "patch": "@@ -11,5 +11,5 @@ int foo(int k, int *x)\n   }  while (++j<k);\n   return res;\n }\n-/* { dg-final { scan-tree-dump-times \"Eliminated: 2\" 1 \"pre\"} } */\n+/* { dg-final { scan-tree-dump-times \"Eliminated: 1\" 1 \"pre\"} } */\n /* { dg-final { cleanup-tree-dump \"pre\" } } */"}, {"sha": "b58f099f4037ab5707b8a45bf36c5435c6ab0440", "filename": "gcc/tree-ssa-copy.c", "status": "modified", "additions": 7, "deletions": 23, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a59d8e8eb67086eb6df936074ef6d8fb4834bcc2/gcc%2Ftree-ssa-copy.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a59d8e8eb67086eb6df936074ef6d8fb4834bcc2/gcc%2Ftree-ssa-copy.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-copy.c?ref=a59d8e8eb67086eb6df936074ef6d8fb4834bcc2", "patch": "@@ -400,15 +400,11 @@ copy_prop_visit_phi_node (gimple phi)\n       else\n \targ_value = valueize_val (arg);\n \n-      /* Avoid copy propagation from an inner into an outer loop.\n-\t Otherwise, this may introduce uses of loop variant variables\n-\t outside of their loops and prevent coalescing opportunities.\n-\t In loop-closed SSA form do not copy-propagate through\n-\t PHI nodes in blocks with a loop exit edge predecessor.  */\n-      if (TREE_CODE (arg_value) == SSA_NAME\n-\t  && (loop_depth_of_name (arg_value) > loop_depth_of_name (lhs)\n-\t      || (loops_state_satisfies_p (LOOP_CLOSED_SSA)\n-\t\t  && loop_exit_edge_p (e->src->loop_father, e))))\n+      /* In loop-closed SSA form do not copy-propagate SSA-names across\n+\t loop exit edges.  */\n+      if (loops_state_satisfies_p (LOOP_CLOSED_SSA)\n+\t  && TREE_CODE (arg_value) == SSA_NAME\n+\t  && loop_exit_edge_p (e->src->loop_father, e))\n \t{\n \t  phi_val.value = lhs;\n \t  break;\n@@ -470,7 +466,6 @@ init_copy_prop (void)\n   FOR_EACH_BB_FN (bb, cfun)\n     {\n       gimple_stmt_iterator si;\n-      int depth = bb_loop_depth (bb);\n \n       for (si = gsi_start_bb (bb); !gsi_end_p (si); gsi_next (&si))\n \t{\n@@ -481,21 +476,10 @@ init_copy_prop (void)\n \t  /* The only statements that we care about are those that may\n \t     generate useful copies.  We also need to mark conditional\n \t     jumps so that their outgoing edges are added to the work\n-\t     lists of the propagator.\n-\n-\t     Avoid copy propagation from an inner into an outer loop.\n-\t     Otherwise, this may move loop variant variables outside of\n-\t     their loops and prevent coalescing opportunities.  If the\n-\t     value was loop invariant, it will be hoisted by LICM and\n-\t     exposed for copy propagation.\n-\t     ???  This doesn't make sense.  */\n+\t     lists of the propagator.  */\n \t  if (stmt_ends_bb_p (stmt))\n             prop_set_simulate_again (stmt, true);\n-\t  else if (stmt_may_generate_copy (stmt)\n-                   /* Since we are iterating over the statements in\n-                      BB, not the phi nodes, STMT will always be an\n-                      assignment.  */\n-                   && loop_depth_of_name (gimple_assign_rhs1 (stmt)) <= depth)\n+\t  else if (stmt_may_generate_copy (stmt))\n             prop_set_simulate_again (stmt, true);\n \t  else\n             prop_set_simulate_again (stmt, false);"}, {"sha": "d0501a2d23d68909a86c7ec645fb280ce667417b", "filename": "gcc/tree-ssa-dom.c", "status": "modified", "additions": 4, "deletions": 42, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a59d8e8eb67086eb6df936074ef6d8fb4834bcc2/gcc%2Ftree-ssa-dom.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a59d8e8eb67086eb6df936074ef6d8fb4834bcc2/gcc%2Ftree-ssa-dom.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-dom.c?ref=a59d8e8eb67086eb6df936074ef6d8fb4834bcc2", "patch": "@@ -1235,12 +1235,7 @@ record_equivalences_from_phis (basic_block bb)\n \t inferred from a comparison.  All uses of this ssa name are dominated\n \t by this assignment, so unwinding just costs time and space.  */\n       if (i == gimple_phi_num_args (phi)\n-\t  && may_propagate_copy (lhs, rhs)\n-\t  /* Do not propagate copies if the propagated value is at a deeper loop\n-\t     depth than the propagatee.  Otherwise, this may introduce uses\n-\t     of loop variant variables outside of their loops and prevent\n-\t     coalescing opportunities.  */\n-\t  && !(loop_depth_of_name (rhs) > loop_depth_of_name (lhs)))\n+\t  && may_propagate_copy (lhs, rhs))\n \tset_ssa_name_value (lhs, rhs);\n     }\n }\n@@ -1575,33 +1570,6 @@ record_const_or_copy_1 (tree x, tree y, tree prev_x)\n   const_and_copies_stack.quick_push (x);\n }\n \n-/* Return the loop depth of the basic block of the defining statement of X.\n-   This number should not be treated as absolutely correct because the loop\n-   information may not be completely up-to-date when dom runs.  However, it\n-   will be relatively correct, and as more passes are taught to keep loop info\n-   up to date, the result will become more and more accurate.  */\n-\n-int\n-loop_depth_of_name (tree x)\n-{\n-  gimple defstmt;\n-  basic_block defbb;\n-\n-  /* If it's not an SSA_NAME, we have no clue where the definition is.  */\n-  if (TREE_CODE (x) != SSA_NAME)\n-    return 0;\n-\n-  /* Otherwise return the loop depth of the defining statement's bb.\n-     Note that there may not actually be a bb for this statement, if the\n-     ssa_name is live on entry.  */\n-  defstmt = SSA_NAME_DEF_STMT (x);\n-  defbb = gimple_bb (defstmt);\n-  if (!defbb)\n-    return 0;\n-\n-  return bb_loop_depth (defbb);\n-}\n-\n /* Record that X is equal to Y in const_and_copies.  Record undo\n    information in the block-local vector.  */\n \n@@ -1641,8 +1609,7 @@ record_equality (tree x, tree y)\n      long as we canonicalize on one value.  */\n   if (is_gimple_min_invariant (y))\n     ;\n-  else if (is_gimple_min_invariant (x)\n-\t   || (loop_depth_of_name (x) <= loop_depth_of_name (y)))\n+  else if (is_gimple_min_invariant (x))\n     prev_x = x, x = y, y = prev_x, prev_x = prev_y;\n   else if (prev_x && is_gimple_min_invariant (prev_x))\n     x = y, y = prev_x, prev_x = prev_y;\n@@ -2686,13 +2653,8 @@ get_lhs_or_phi_result (gimple stmt)\n static void\n propagate_rhs_into_lhs (gimple stmt, tree lhs, tree rhs, bitmap interesting_names)\n {\n-  /* First verify that propagation is valid and isn't going to move a\n-     loop variant variable outside its loop.  */\n-  if (! SSA_NAME_OCCURS_IN_ABNORMAL_PHI (lhs)\n-      && (TREE_CODE (rhs) != SSA_NAME\n-\t  || ! SSA_NAME_OCCURS_IN_ABNORMAL_PHI (rhs))\n-      && may_propagate_copy (lhs, rhs)\n-      && loop_depth_of_name (lhs) >= loop_depth_of_name (rhs))\n+  /* First verify that propagation is valid.  */\n+  if (may_propagate_copy (lhs, rhs))\n     {\n       use_operand_p use_p;\n       imm_use_iterator iter;"}, {"sha": "604c7c1376a859ab3a8113042dc466136264a192", "filename": "gcc/tree-ssa-dom.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a59d8e8eb67086eb6df936074ef6d8fb4834bcc2/gcc%2Ftree-ssa-dom.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a59d8e8eb67086eb6df936074ef6d8fb4834bcc2/gcc%2Ftree-ssa-dom.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-dom.h?ref=a59d8e8eb67086eb6df936074ef6d8fb4834bcc2", "patch": "@@ -22,7 +22,6 @@ along with GCC; see the file COPYING3.  If not see\n \n extern void dump_dominator_optimization_stats (FILE *);\n extern void debug_dominator_optimization_stats (void);\n-extern int loop_depth_of_name (tree);\n extern bool simple_iv_increment_p (gimple);\n \n #endif /* GCC_TREE_SSA_DOM_H */"}]}