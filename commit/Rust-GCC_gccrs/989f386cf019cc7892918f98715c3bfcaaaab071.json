{"sha": "989f386cf019cc7892918f98715c3bfcaaaab071", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTg5ZjM4NmNmMDE5Y2M3ODkyOTE4Zjk4NzE1YzNiZmNhYWFhYjA3MQ==", "commit": {"author": {"name": "Aldy Hernandez", "email": "aldyh@redhat.com", "date": "2014-09-04T16:38:21Z"}, "committer": {"name": "Aldy Hernandez", "email": "aldyh@gcc.gnu.org", "date": "2014-09-04T16:38:21Z"}, "message": "+ * c/c-decl.c (write_global_declarations_1): Call global_decl() + with early=true.\n\n+       * c/c-decl.c (write_global_declarations_1): Call global_decl()\n+       with early=true.\n+       (write_global_declarations_2): Call global_decl() with\n+       early=false.\n+       * dbxout.c (dbxout_global_decl): New argument.\n+       * debug.c (do_nothing_debug_hooks): Use debug_nothing_tree_bool\n+       for global_decl hook.\n+       (debug_nothing_tree_bool): New.\n+       (struct gcc_debug_hooks): New argument to global_decl.\n+       * dwarf2out.c (output_die): Add misc debugging information.\n+       (gen_variable_die): Do not reparent children.\n+       (dwarf2out_global_decl): Add new documentation.  Add EARLY\n+       argument.\n+       (dwarf2out_decl): Make sure we don't generate new DIEs if we\n+       already have a DIE.\n+       * cp/name-lookup.c (do_namespace_alias): New argument to\n+       global_decl debug hook.\n+       * fortran/trans-decl.c (gfc_emit_parameter_debug_info): Same.\n+       * godump.c (go_global_decl): Same.\n+       * lto/lto-lang.c (lto_write_globals): Same.\n+       * sdbout.c (sdbout_global_decl): Same.\n+       * toplev.c (emit_debug_global_declarations): Same.\n+       * vmsdbgout.c (vmsdbgout_global_decl): Same.\n+       * tree.c (free_lang_data_in_decl): Do not call\n+       dwarf2out_early_decl from here.\n\nFrom-SVN: r214911", "tree": {"sha": "38c73c56bbac89e21b9f6655eab3eb84116acdd1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/38c73c56bbac89e21b9f6655eab3eb84116acdd1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/989f386cf019cc7892918f98715c3bfcaaaab071", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/989f386cf019cc7892918f98715c3bfcaaaab071", "html_url": "https://github.com/Rust-GCC/gccrs/commit/989f386cf019cc7892918f98715c3bfcaaaab071", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/989f386cf019cc7892918f98715c3bfcaaaab071/comments", "author": {"login": "aldyh", "id": 12937877, "node_id": "MDQ6VXNlcjEyOTM3ODc3", "avatar_url": "https://avatars.githubusercontent.com/u/12937877?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aldyh", "html_url": "https://github.com/aldyh", "followers_url": "https://api.github.com/users/aldyh/followers", "following_url": "https://api.github.com/users/aldyh/following{/other_user}", "gists_url": "https://api.github.com/users/aldyh/gists{/gist_id}", "starred_url": "https://api.github.com/users/aldyh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aldyh/subscriptions", "organizations_url": "https://api.github.com/users/aldyh/orgs", "repos_url": "https://api.github.com/users/aldyh/repos", "events_url": "https://api.github.com/users/aldyh/events{/privacy}", "received_events_url": "https://api.github.com/users/aldyh/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "177e6c965a78cbe94d589f87b18af3618acbd98a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/177e6c965a78cbe94d589f87b18af3618acbd98a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/177e6c965a78cbe94d589f87b18af3618acbd98a"}], "stats": {"total": 138, "additions": 104, "deletions": 34}, "files": [{"sha": "980b65513fa9cf217b06de24b64af9535077f839", "filename": "gcc/ChangeLog.debug-early", "status": "modified", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/989f386cf019cc7892918f98715c3bfcaaaab071/gcc%2FChangeLog.debug-early", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/989f386cf019cc7892918f98715c3bfcaaaab071/gcc%2FChangeLog.debug-early", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog.debug-early?ref=989f386cf019cc7892918f98715c3bfcaaaab071", "patch": "@@ -1,3 +1,31 @@\n+2014-09-03  Aldy Hernandez  <aldyh@redhat.com>\n+\n+\t* c/c-decl.c (write_global_declarations_1): Call global_decl()\n+\twith early=true.\n+\t(write_global_declarations_2): Call global_decl() with\n+\tearly=false.\n+\t* dbxout.c (dbxout_global_decl): New argument.\n+\t* debug.c (do_nothing_debug_hooks): Use debug_nothing_tree_bool\n+\tfor global_decl hook.\n+\t(debug_nothing_tree_bool): New.\n+\t(struct gcc_debug_hooks): New argument to global_decl.\n+\t* dwarf2out.c (output_die): Add misc debugging information.\n+\t(gen_variable_die): Do not reparent children.\n+\t(dwarf2out_global_decl): Add new documentation.  Add EARLY\n+\targument.\n+\t(dwarf2out_decl): Make sure we don't generate new DIEs if we\n+\talready have a DIE.\n+\t* cp/name-lookup.c (do_namespace_alias): New argument to\n+\tglobal_decl debug hook.\n+\t* fortran/trans-decl.c (gfc_emit_parameter_debug_info): Same.\n+\t* godump.c (go_global_decl): Same.\n+\t* lto/lto-lang.c (lto_write_globals): Same.\n+\t* sdbout.c (sdbout_global_decl): Same.\n+\t* toplev.c (emit_debug_global_declarations): Same.\n+\t* vmsdbgout.c (vmsdbgout_global_decl): Same.\n+\t* tree.c (free_lang_data_in_decl): Do not call\n+\tdwarf2out_early_decl from here.\n+\n 2014-08-26  Aldy Hernandez  <aldyh@redhat.com>\n \n \t* dwarf2out.c (struct die_struct): Add dumped_early field."}, {"sha": "1e09404dd55ea72f16fea943908ebffe39b3b14a", "filename": "gcc/c/c-decl.c", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/989f386cf019cc7892918f98715c3bfcaaaab071/gcc%2Fc%2Fc-decl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/989f386cf019cc7892918f98715c3bfcaaaab071/gcc%2Fc%2Fc-decl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2Fc-decl.c?ref=989f386cf019cc7892918f98715c3bfcaaaab071", "patch": "@@ -10308,7 +10308,10 @@ c_write_global_declarations_1 (tree globals)\n   while (reconsider);\n \n   for (decl = globals; decl; decl = DECL_CHAIN (decl))\n-    check_global_declaration_1 (decl);\n+    {\n+      check_global_declaration_1 (decl);\n+      debug_hooks->global_decl (decl, /*early=*/true);\n+    }\n }\n \n /* A subroutine of c_write_global_declarations Emit debug information for each\n@@ -10320,7 +10323,7 @@ c_write_global_declarations_2 (tree globals)\n   tree decl;\n \n   for (decl = globals; decl ; decl = DECL_CHAIN (decl))\n-    debug_hooks->global_decl (decl);\n+    debug_hooks->global_decl (decl, /*early=*/false);\n }\n \n /* Callback to collect a source_ref from a DECL.  */"}, {"sha": "45b3b999325932f84343388e82de4e66ea586240", "filename": "gcc/cp/name-lookup.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/989f386cf019cc7892918f98715c3bfcaaaab071/gcc%2Fcp%2Fname-lookup.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/989f386cf019cc7892918f98715c3bfcaaaab071/gcc%2Fcp%2Fname-lookup.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fname-lookup.c?ref=989f386cf019cc7892918f98715c3bfcaaaab071", "patch": "@@ -3859,7 +3859,7 @@ do_namespace_alias (tree alias, tree name_space)\n \n   /* Emit debug info for namespace alias.  */\n   if (!building_stmt_list_p ())\n-    (*debug_hooks->global_decl) (alias);\n+    (*debug_hooks->global_decl) (alias, /*early=*/false);\n }\n \n /* Like pushdecl, only it places X in the current namespace,"}, {"sha": "208cec91b8e0252dfc3a984dfa625e8726cc326e", "filename": "gcc/dbxout.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/989f386cf019cc7892918f98715c3bfcaaaab071/gcc%2Fdbxout.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/989f386cf019cc7892918f98715c3bfcaaaab071/gcc%2Fdbxout.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdbxout.c?ref=989f386cf019cc7892918f98715c3bfcaaaab071", "patch": "@@ -325,7 +325,7 @@ static int dbxout_symbol_location (tree, tree, const char *, rtx);\n static void dbxout_symbol_name (tree, const char *, int);\n static void dbxout_common_name (tree, const char *, stab_code_type);\n static const char *dbxout_common_check (tree, int *);\n-static void dbxout_global_decl (tree);\n+static void dbxout_global_decl (tree, bool);\n static void dbxout_type_decl (tree, int);\n static void dbxout_handle_pch (unsigned);\n static void debug_free_queue (void);\n@@ -1320,7 +1320,7 @@ dbxout_function_decl (tree decl)\n /* Debug information for a global DECL.  Called from toplev.c after\n    compilation proper has finished.  */\n static void\n-dbxout_global_decl (tree decl)\n+dbxout_global_decl (tree decl, bool early ATTRIBUTE_UNUSED)\n {\n   if (TREE_CODE (decl) == VAR_DECL && !DECL_EXTERNAL (decl))\n     {"}, {"sha": "b5818de3a3b1d086918c281b60f1a4358f26319a", "filename": "gcc/debug.c", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/989f386cf019cc7892918f98715c3bfcaaaab071/gcc%2Fdebug.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/989f386cf019cc7892918f98715c3bfcaaaab071/gcc%2Fdebug.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdebug.c?ref=989f386cf019cc7892918f98715c3bfcaaaab071", "patch": "@@ -43,7 +43,7 @@ const struct gcc_debug_hooks do_nothing_debug_hooks =\n   debug_nothing_tree,\t\t         /* begin_function */\n   debug_nothing_int,\t\t         /* end_function */\n   debug_nothing_tree,\t\t         /* function_decl */\n-  debug_nothing_tree,\t\t         /* global_decl */\n+  debug_nothing_tree_bool,\t         /* global_decl */\n   debug_nothing_tree_int,\t\t /* type_decl */\n   debug_nothing_tree_tree_tree_bool,\t /* imported_module_or_decl */\n   debug_nothing_tree,\t\t         /* deferred_inline_function */\n@@ -70,6 +70,12 @@ debug_nothing_tree (tree decl ATTRIBUTE_UNUSED)\n {\n }\n \n+void\n+debug_nothing_tree_bool (tree decl ATTRIBUTE_UNUSED,\n+\t\t\t bool early ATTRIBUTE_UNUSED)\n+{\n+}\n+\n void\n debug_nothing_tree_tree (tree t1 ATTRIBUTE_UNUSED,\n \t\t\t tree t2 ATTRIBUTE_UNUSED)"}, {"sha": "944051524437b987c7c94fdf08f4e938825d9a5f", "filename": "gcc/debug.h", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/989f386cf019cc7892918f98715c3bfcaaaab071/gcc%2Fdebug.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/989f386cf019cc7892918f98715c3bfcaaaab071/gcc%2Fdebug.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdebug.h?ref=989f386cf019cc7892918f98715c3bfcaaaab071", "patch": "@@ -93,8 +93,11 @@ struct gcc_debug_hooks\n   void (* function_decl) (tree decl);\n \n   /* Debug information for a global DECL.  Called from toplev.c after\n-     compilation proper has finished.  */\n-  void (* global_decl) (tree decl);\n+     compilation proper has finished.  EARLY is true if global_decl()\n+     is being called early on in the compilation process (i.e., before\n+     cgraph information is available and before code is\n+     generated).  */\n+  void (* global_decl) (tree decl, bool early);\n \n   /* Debug information for a type DECL.  Called from toplev.c after\n      compilation proper, also from various language front ends to\n@@ -156,6 +159,7 @@ extern void debug_nothing_int_charstar_int_bool (unsigned int, const char *,\n extern void debug_nothing_int (unsigned int);\n extern void debug_nothing_int_int (unsigned int, unsigned int);\n extern void debug_nothing_tree (tree);\n+extern void debug_nothing_tree_bool (tree, bool);\n extern void debug_nothing_tree_tree (tree, tree);\n extern void debug_nothing_tree_int (tree, int);\n extern void debug_nothing_tree_tree_tree_bool (tree, tree, tree, bool);"}, {"sha": "918f26177eee4350dcb1c61ded25a179aa7016ca", "filename": "gcc/dwarf2out.c", "status": "modified", "additions": 45, "deletions": 11, "changes": 56, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/989f386cf019cc7892918f98715c3bfcaaaab071/gcc%2Fdwarf2out.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/989f386cf019cc7892918f98715c3bfcaaaab071/gcc%2Fdwarf2out.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdwarf2out.c?ref=989f386cf019cc7892918f98715c3bfcaaaab071", "patch": "@@ -2430,7 +2430,7 @@ static void dwarf2out_function_decl (tree);\n static void dwarf2out_begin_block (unsigned, unsigned);\n static void dwarf2out_end_block (unsigned, unsigned);\n static bool dwarf2out_ignore_block (const_tree);\n-static void dwarf2out_global_decl (tree);\n+static void dwarf2out_global_decl (tree, bool);\n static void dwarf2out_type_decl (tree, int);\n static void dwarf2out_imported_module_or_decl (tree, tree, tree, bool);\n static void dwarf2out_imported_module_or_decl_1 (tree, tree, tree,\n@@ -8711,10 +8711,11 @@ output_die (dw_die_ref die)\n   if (! die->comdat_type_p && die->die_id.die_symbol)\n     output_die_symbol (die);\n \n-  dw2_asm_output_data_uleb128 (die->die_abbrev, \"(DIE (%#lx) %s (parent DIE=%#lx))\",\n+  dw2_asm_output_data_uleb128 (die->die_abbrev, \"(DIE (%#lx) %s (parent DIE=%#lx) early=%d)\",\n \t\t\t       (unsigned long)die->die_offset,\n \t\t\t       dwarf_tag_name (die->die_tag),\n-\t\t\t       die->die_parent ? die->die_parent->die_offset : 0);\n+\t\t\t       die->die_parent ? die->die_parent->die_offset : 0,\n+\t\t\t       die->dumped_early);\n \n   FOR_EACH_VEC_SAFE_ELT (die->die_attr, ix, a)\n     {\n@@ -19009,13 +19010,11 @@ gen_variable_die (tree decl, tree origin, dw_die_ref context_die)\n   if (old_die && !declaration && !local_scope_p (context_die))\n     return;\n \n-  /* When DIEs are created early, the context is the compilation unit.\n-     Adjust the context when we know what it is the second time\n-     around.  */\n+  /* If a DIE was dumped early, it still needs location info.  Skip to\n+     the part where we fill the location bits.  */\n   if (old_die && old_die->dumped_early)\n     {\n-      if (old_die->die_parent != context_die)\n-\treparent_child (old_die, context_die);\n+      gcc_assert (old_die->die_parent == context_die);\n       var_die = old_die;\n       old_die = NULL;\n       goto gen_variable_die_location;\n@@ -20818,12 +20817,29 @@ gen_decl_die (tree decl, tree origin, dw_die_ref context_die)\n   return NULL;\n }\n \f\n-/* Output debug information for global decl DECL.  Called from toplev.c after\n-   compilation proper has finished.  */\n+/* Output debug information for global decl DECL.  Called from\n+   toplev.c after compilation proper has finished.\n+\n+   dwarf2out_decl() will be called twice on each global symbol: once\n+   immediately after parsing (EARLY=true), and once after the full\n+   compilation has finished (EARLY=false).  There are checks in\n+   dwarf2out_decl() to make sure that if we have a DECL DIE upon\n+   entry, that the previously created DIE is reused.  No new DECL DIEs\n+   should be created when EARLY=false.\n+\n+   The second time dwarf2out_decl() is called (or for that matter, the\n+   second time any DECL DIE is seen throughout dwarf2out), only\n+   information not previously available (e.g. location) is tacked onto\n+   the early dumped DIE.  That's the plan anyhow ;-).  */\n \n static void\n-dwarf2out_global_decl (tree decl)\n+dwarf2out_global_decl (tree decl, bool early)\n {\n+  if (early)\n+    {\n+      dwarf2out_early_decl (decl);\n+      return;\n+    }\n   /* Output DWARF2 information for file-scope tentative data object\n      declarations, file-scope (extern) function declarations (which\n      had no corresponding body) and file-scope tagged type declarations\n@@ -21019,6 +21035,19 @@ dwarf2out_decl (tree decl)\n {\n   dw_die_ref context_die = comp_unit_die ();\n \n+#ifdef ENABLE_CHECKING\n+  /* Save some info so we can later determine if we erroneously\n+     created a DIE for something we had already created a DIE for.\n+     We should always be reusing DIEs created early.  */\n+  dw_die_ref early_die = NULL;\n+  if (decl_die_table)\n+    {\n+      early_die = lookup_decl_die (decl);\n+      if (early_die && !early_die->dumped_early)\n+\tearly_die = NULL;\n+    }\n+#endif\n+\n   switch (TREE_CODE (decl))\n     {\n     case ERROR_MARK:\n@@ -21144,6 +21173,11 @@ dwarf2out_decl (tree decl)\n   dw_die_ref die = lookup_decl_die (decl);\n   if (die)\n     check_die (die, 0);\n+#ifdef ENABLE_CHECKING\n+  /* If we early created a DIE, make sure it didn't get re-created by\n+     mistake.  */\n+  gcc_assert (!early_die || early_die == die);\n+#endif\n   return die;\n }\n "}, {"sha": "38e6f990e68576e0db7bdbdad23e74c958642df0", "filename": "gcc/fortran/trans-decl.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/989f386cf019cc7892918f98715c3bfcaaaab071/gcc%2Ffortran%2Ftrans-decl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/989f386cf019cc7892918f98715c3bfcaaaab071/gcc%2Ffortran%2Ftrans-decl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-decl.c?ref=989f386cf019cc7892918f98715c3bfcaaaab071", "patch": "@@ -4693,7 +4693,7 @@ gfc_emit_parameter_debug_info (gfc_symbol *sym)\n \t\t\t\t\t      TREE_TYPE (decl),\n \t\t\t\t\t      sym->attr.dimension,\n \t\t\t\t\t      false, false);\n-  debug_hooks->global_decl (decl);\n+  debug_hooks->global_decl (decl, /*early=*/false);\n }\n \n "}, {"sha": "01f8410ccd7cdb1f3f76dc435ce2210691f8eec8", "filename": "gcc/godump.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/989f386cf019cc7892918f98715c3bfcaaaab071/gcc%2Fgodump.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/989f386cf019cc7892918f98715c3bfcaaaab071/gcc%2Fgodump.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgodump.c?ref=989f386cf019cc7892918f98715c3bfcaaaab071", "patch": "@@ -496,9 +496,9 @@ go_function_decl (tree decl)\n /* A global variable decl.  */\n \n static void\n-go_global_decl (tree decl)\n+go_global_decl (tree decl, bool early)\n {\n-  real_debug_hooks->global_decl (decl);\n+  real_debug_hooks->global_decl (decl, early);\n   go_decl (decl);\n }\n "}, {"sha": "1f39949c811ffad759f30bd3580c6ca30853d431", "filename": "gcc/lto/lto-lang.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/989f386cf019cc7892918f98715c3bfcaaaab071/gcc%2Flto%2Flto-lang.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/989f386cf019cc7892918f98715c3bfcaaaab071/gcc%2Flto%2Flto-lang.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flto%2Flto-lang.c?ref=989f386cf019cc7892918f98715c3bfcaaaab071", "patch": "@@ -1093,7 +1093,7 @@ lto_write_globals (void)\n   varpool_node *vnode;\n   FOR_EACH_DEFINED_VARIABLE (vnode)\n     if (!decl_function_context (vnode->decl))\n-      debug_hooks->global_decl (vnode->decl);\n+      debug_hooks->global_decl (vnode->decl, /*early=*/false);\n }\n \n static tree"}, {"sha": "d81b184c415be14c240b619075f1c1a483fa3a66", "filename": "gcc/sdbout.c", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/989f386cf019cc7892918f98715c3bfcaaaab071/gcc%2Fsdbout.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/989f386cf019cc7892918f98715c3bfcaaaab071/gcc%2Fsdbout.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsdbout.c?ref=989f386cf019cc7892918f98715c3bfcaaaab071", "patch": "@@ -119,7 +119,7 @@ static void sdbout_begin_block\t\t(unsigned int, unsigned int);\n static void sdbout_end_block\t\t(unsigned int, unsigned int);\n static void sdbout_source_line\t\t(unsigned int, const char *, int, bool);\n static void sdbout_end_epilogue\t\t(unsigned int, const char *);\n-static void sdbout_global_decl\t\t(tree);\n+static void sdbout_global_decl\t\t(tree, bool);\n static void sdbout_begin_prologue\t(unsigned int, const char *);\n static void sdbout_end_prologue\t\t(unsigned int, const char *);\n static void sdbout_begin_function\t(tree);\n@@ -142,7 +142,6 @@ static void sdbout_field_types\t\t(tree);\n static void sdbout_one_type\t\t(tree);\n static void sdbout_parms\t\t(tree);\n static void sdbout_reg_parms\t\t(tree);\n-static void sdbout_global_decl\t\t(tree);\n \n /* Random macros describing parts of SDB data.  */\n \n@@ -1422,7 +1421,7 @@ sdbout_reg_parms (tree parms)\n    after compilation proper has finished.  */\n \n static void\n-sdbout_global_decl (tree decl)\n+sdbout_global_decl (tree decl, bool early ATTRIBUTE_UNUSED)\n {\n   if (TREE_CODE (decl) == VAR_DECL\n       && !DECL_EXTERNAL (decl)"}, {"sha": "ceefa1bf6e916c81af32aa3a3aa331cfb113efea", "filename": "gcc/toplev.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/989f386cf019cc7892918f98715c3bfcaaaab071/gcc%2Ftoplev.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/989f386cf019cc7892918f98715c3bfcaaaab071/gcc%2Ftoplev.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftoplev.c?ref=989f386cf019cc7892918f98715c3bfcaaaab071", "patch": "@@ -532,7 +532,7 @@ emit_debug_global_declarations (tree *vec, int len)\n \n   timevar_push (TV_SYMOUT);\n   for (i = 0; i < len; i++)\n-    debug_hooks->global_decl (vec[i]);\n+    debug_hooks->global_decl (vec[i], /*early=*/false);\n   timevar_pop (TV_SYMOUT);\n }\n "}, {"sha": "8e9876ef4ed61e1c538a726e901890376f8f8559", "filename": "gcc/tree.c", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/989f386cf019cc7892918f98715c3bfcaaaab071/gcc%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/989f386cf019cc7892918f98715c3bfcaaaab071/gcc%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.c?ref=989f386cf019cc7892918f98715c3bfcaaaab071", "patch": "@@ -5032,10 +5032,6 @@ free_lang_data_in_decl (tree decl)\n {\n   gcc_assert (DECL_P (decl));\n \n-  /* Early dumping of DECLs before we lose language data.  */\n-  if (debug_info_level > DINFO_LEVEL_NONE)\n-    dwarf2out_early_decl (decl);\n-\n   /* Give the FE a chance to remove its own data first.  */\n   lang_hooks.free_lang_data (decl);\n "}, {"sha": "2ad9e9b5c14ce33b3adc9df6cec61228e51c63ef", "filename": "gcc/vmsdbgout.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/989f386cf019cc7892918f98715c3bfcaaaab071/gcc%2Fvmsdbgout.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/989f386cf019cc7892918f98715c3bfcaaaab071/gcc%2Fvmsdbgout.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvmsdbgout.c?ref=989f386cf019cc7892918f98715c3bfcaaaab071", "patch": "@@ -163,7 +163,7 @@ static void vmsdbgout_begin_epilogue (unsigned int, const char *);\n static void vmsdbgout_end_epilogue (unsigned int, const char *);\n static void vmsdbgout_begin_function (tree);\n static void vmsdbgout_decl (tree);\n-static void vmsdbgout_global_decl (tree);\n+static void vmsdbgout_global_decl (tree, bool);\n static void vmsdbgout_type_decl (tree, int);\n static void vmsdbgout_abstract_function (tree);\n \n@@ -1510,10 +1510,10 @@ vmsdbgout_decl (tree decl)\n /* Not implemented in VMS Debug.  */\n \n static void\n-vmsdbgout_global_decl (tree decl)\n+vmsdbgout_global_decl (tree decl, bool early)\n {\n   if (write_symbols == VMS_AND_DWARF2_DEBUG)\n-    (*dwarf2_debug_hooks.global_decl) (decl);\n+    (*dwarf2_debug_hooks.global_decl) (decl, early);\n }\n \n /* Not implemented in VMS Debug.  */"}]}