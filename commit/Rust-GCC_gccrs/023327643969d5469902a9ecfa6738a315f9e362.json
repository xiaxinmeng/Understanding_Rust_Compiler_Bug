{"sha": "023327643969d5469902a9ecfa6738a315f9e362", "node_id": "C_kwDOANBUbNoAKDAyMzMyNzY0Mzk2OWQ1NDY5OTAyYTllY2ZhNjczOGEzMTVmOWUzNjI", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2022-02-16T08:27:11Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2022-02-16T08:27:11Z"}, "message": "openmp: For min/max omp atomic compare forms verify arg types with build_binary_op [PR104531]\n\nThe MIN_EXPR/MAX_EXPR handling in *build_binary_op is minimal (especially\nfor C FE), because min/max aren't expressions the languages contain directly.\nI'm using those for the\n  #pragma omp atomic\n  x = x < y ? y : x;\nforms, but e.g. for the attached testcase we normally reject _Complex int vs. int\ncomparisons, in C++ due to MIN/MAX_EXPR we were diagnosing it as invalid types\nfor <unknown> while in C we accept it and ICEd later on.\n\nThe following patch will try build_binary_op with LT_EXPR on the operands first\nto get needed diagnostics and fail if it returns error_mark_node.\n\n2022-02-16  Jakub Jelinek  <jakub@redhat.com>\n\n\tPR c/104531\n\t* c-omp.cc (c_finish_omp_atomic): For MIN_EXPR/MAX_EXPR, try first\n\tbuild_binary_op with LT_EXPR and only if that doesn't return\n\terror_mark_node call build_modify_expr.\n\n\t* c-c++-common/gomp/atomic-31.c: New test.", "tree": {"sha": "4f03b57aff29dd67916c27f2cb74e9d5ab4b6507", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4f03b57aff29dd67916c27f2cb74e9d5ab4b6507"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/023327643969d5469902a9ecfa6738a315f9e362", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/023327643969d5469902a9ecfa6738a315f9e362", "html_url": "https://github.com/Rust-GCC/gccrs/commit/023327643969d5469902a9ecfa6738a315f9e362", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/023327643969d5469902a9ecfa6738a315f9e362/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6e74122f0de6748b3fd0ed9183090cd7c61fb53e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6e74122f0de6748b3fd0ed9183090cd7c61fb53e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6e74122f0de6748b3fd0ed9183090cd7c61fb53e"}], "stats": {"total": 20, "additions": 18, "deletions": 2}, "files": [{"sha": "cd9d86641e1ad6f6d222b157171632b5661e1ebe", "filename": "gcc/c-family/c-omp.cc", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/023327643969d5469902a9ecfa6738a315f9e362/gcc%2Fc-family%2Fc-omp.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/023327643969d5469902a9ecfa6738a315f9e362/gcc%2Fc-family%2Fc-omp.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-omp.cc?ref=023327643969d5469902a9ecfa6738a315f9e362", "patch": "@@ -353,8 +353,13 @@ c_finish_omp_atomic (location_t loc, enum tree_code code,\n     }\n   bool save = in_late_binary_op;\n   in_late_binary_op = true;\n-  x = build_modify_expr (loc, blhs ? blhs : lhs, NULL_TREE, opcode,\n-\t\t\t loc, rhs, NULL_TREE);\n+  if ((opcode == MIN_EXPR || opcode == MAX_EXPR)\n+      && build_binary_op (loc, LT_EXPR, blhs ? blhs : lhs, rhs,\n+\t\t\t  true) == error_mark_node)\n+    x = error_mark_node;\n+  else\n+    x = build_modify_expr (loc, blhs ? blhs : lhs, NULL_TREE, opcode,\n+\t\t\t   loc, rhs, NULL_TREE);\n   in_late_binary_op = save;\n   if (x == error_mark_node)\n     return error_mark_node;"}, {"sha": "9ec3140e2f0bbed2c2536f4c3d7b334a6f821c4d", "filename": "gcc/testsuite/c-c++-common/gomp/atomic-31.c", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/023327643969d5469902a9ecfa6738a315f9e362/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgomp%2Fatomic-31.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/023327643969d5469902a9ecfa6738a315f9e362/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgomp%2Fatomic-31.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgomp%2Fatomic-31.c?ref=023327643969d5469902a9ecfa6738a315f9e362", "patch": "@@ -0,0 +1,11 @@\n+/* c/104531 */\n+/* { dg-do compile } */\n+\n+int x;\n+\n+void\n+foo (_Complex int y)\n+{\n+  #pragma omp atomic compare\t/* { dg-error \"invalid operands\" } */\n+  x = x > y ? y : x;\n+}"}]}