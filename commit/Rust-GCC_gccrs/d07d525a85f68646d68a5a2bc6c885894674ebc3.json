{"sha": "d07d525a85f68646d68a5a2bc6c885894674ebc3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDA3ZDUyNWE4NWY2ODY0NmQ2OGE1YTJiYzZjODg1ODk0Njc0ZWJjMw==", "commit": {"author": {"name": "Mark Mitchell", "email": "mark@codesourcery.com", "date": "1999-09-08T00:21:45Z"}, "committer": {"name": "Mark Mitchell", "email": "mmitchel@gcc.gnu.org", "date": "1999-09-08T00:21:45Z"}, "message": "Add some machine-dependent GC roots.\n\n\t* sparc.c: Include ggc.h.\n\t(sparc_add_gc_roots): New function.\n\t(mark_ultrasparc_pipeline_state): Likewise.\n\t(override_options): Call sparc_add_gc_roots.\n\t* pa.c: Include ggc.h.\n\t(pa_add_gc_roots): New function.\n\t(mark_deferred_plabels): Likewise.\n\t(override_options): Call pa_add_gc_roots.\n\t* mips.c: Include ggc.h.\n\t(mips_add_gc_roots): New function.\n\t(override_options): Use it.\n\nFrom-SVN: r29176", "tree": {"sha": "54bcc58b2c0e800234553051aa12f275025c8227", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/54bcc58b2c0e800234553051aa12f275025c8227"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d07d525a85f68646d68a5a2bc6c885894674ebc3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d07d525a85f68646d68a5a2bc6c885894674ebc3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d07d525a85f68646d68a5a2bc6c885894674ebc3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d07d525a85f68646d68a5a2bc6c885894674ebc3/comments", "author": null, "committer": null, "parents": [{"sha": "66815bff316f0adec2af61fba9576754dfae05c0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/66815bff316f0adec2af61fba9576754dfae05c0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/66815bff316f0adec2af61fba9576754dfae05c0"}], "stats": {"total": 108, "additions": 107, "deletions": 1}, "files": [{"sha": "f1425e91780951e6562b97c5062f0997d8402989", "filename": "gcc/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d07d525a85f68646d68a5a2bc6c885894674ebc3/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d07d525a85f68646d68a5a2bc6c885894674ebc3/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=d07d525a85f68646d68a5a2bc6c885894674ebc3", "patch": "@@ -1,3 +1,18 @@\n+Tue Sep  7 17:15:21 1999  Mark Mitchell  <mark@codesourcery.com>\n+\n+\tAdd some machine-dependent GC roots.\n+\t* sparc.c: Include ggc.h. \n+\t(sparc_add_gc_roots): New function.\n+\t(mark_ultrasparc_pipeline_state): Likewise.\n+\t(override_options): Call sparc_add_gc_roots.\n+\t* pa.c: Include ggc.h.\n+\t(pa_add_gc_roots): New function.\n+\t(mark_deferred_plabels): Likewise.\n+\t(override_options): Call pa_add_gc_roots.\n+\t* mips.c: Include ggc.h.\n+\t(mips_add_gc_roots): New function.\n+\t(override_options): Use it.\n+\n Tue Sep  7 11:39:41 1999  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n \n \t* cpperror.c (cpp_file_line_for_message): Constify a char*."}, {"sha": "a192be0465793744e1c601de0378107fb820cb24", "filename": "gcc/config/mips/mips.c", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d07d525a85f68646d68a5a2bc6c885894674ebc3/gcc%2Fconfig%2Fmips%2Fmips.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d07d525a85f68646d68a5a2bc6c885894674ebc3/gcc%2Fconfig%2Fmips%2Fmips.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.c?ref=d07d525a85f68646d68a5a2bc6c885894674ebc3", "patch": "@@ -48,6 +48,7 @@ Boston, MA 02111-1307, USA.  */\n #include \"flags.h\"\n #include \"reload.h\"\n #include \"output.h\"\n+#include \"ggc.h\"\n \n #if defined(USG) || !defined(HAVE_STAB_H)\n #include \"gstab.h\"  /* If doing DBX on sysV, use our own stab.h.  */\n@@ -107,6 +108,7 @@ static rtx mips_find_symbol\t\t\tPROTO ((rtx));\n static void abort_with_insn\t\t\tPROTO ((rtx, const char *))\n   ATTRIBUTE_NORETURN;\n static int symbolic_expression_p                PROTO ((rtx));\n+static void mips_add_gc_roots                   PROTO ((void));\n \n /* Global variables for machine-dependent things.  */\n \n@@ -4509,6 +4511,9 @@ override_options ()\n       if (align_functions == 0) \n \talign_functions = 8;\n     }\n+\n+  /* Register global variables with the garbage collector.  */\n+  mips_add_gc_roots ();\n }\n \n /* On the mips16, we want to allocate $24 (T_REG) before other\n@@ -8922,3 +8927,18 @@ mips_output_conditional_branch (insn,\n   /* NOTREACHED */\n   return 0;\n }\n+\n+/* Called to register all of our global variables with the garbage\n+   collector.  */\n+\n+static void\n+mips_add_gc_roots ()\n+{\n+  ggc_add_rtx_root (&mips_load_reg, 1);\n+  ggc_add_rtx_root (&mips_load_reg2, 1);\n+  ggc_add_rtx_root (&mips_load_reg3, 1);\n+  ggc_add_rtx_root (&mips_load_reg4, 1);\n+  ggc_add_rtx_root (branch_cmp, sizeof (branch_cmp) / sizeof (rtx));\n+  ggc_add_rtx_root (&embedded_pic_fnaddr_rtx, 1);\n+  ggc_add_rtx_root (&mips16_gp_pseudo_rtx, 1);\n+}"}, {"sha": "40054cf7281615688bd39757e19ad3594f9e3eb1", "filename": "gcc/config/pa/pa.c", "status": "modified", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d07d525a85f68646d68a5a2bc6c885894674ebc3/gcc%2Fconfig%2Fpa%2Fpa.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d07d525a85f68646d68a5a2bc6c885894674ebc3/gcc%2Fconfig%2Fpa%2Fpa.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Fpa.c?ref=d07d525a85f68646d68a5a2bc6c885894674ebc3", "patch": "@@ -38,13 +38,16 @@ Boston, MA 02111-1307, USA.  */\n #include \"expr.h\"\n #include \"obstack.h\"\n #include \"toplev.h\"\n+#include \"ggc.h\"\n \n static void restore_unscaled_index_insn_codes\t\tPROTO((rtx));\n static void record_unscaled_index_insn_codes\t\tPROTO((rtx));\n static void pa_combine_instructions\t\t\tPROTO((rtx));\n static int pa_can_combine_p\tPROTO((rtx, rtx, rtx, int, rtx, rtx, rtx));\n static int forward_branch_p\t\t\t\tPROTO((rtx));\n static int shadd_constant_p\t\t\t\tPROTO((int));\n+static void pa_add_gc_roots                             PROTO((void));\n+static void mark_deferred_plabels                       PROTO((void *));\n \n /* Save the operands last given to a compare for use when we\n    generate a scc or bcc insn.  */\n@@ -176,6 +179,9 @@ override_options ()\n       warning (\"-g option disabled.\");\n       write_symbols = NO_DEBUG;\n     }\n+\n+  /* Register global variables with the garbage collector.  */\n+  pa_add_gc_roots ();\n }\n \n \n@@ -6516,3 +6522,29 @@ insn_sets_and_refs_are_delayed (insn)\n \t   && GET_CODE (PATTERN (insn)) != CLOBBER\n \t   && get_attr_type (insn) == TYPE_MILLI));\n }\n+\n+/* Mark ARG (which is really a struct deferred_plabel **) for GC.  */\n+\n+static void\n+mark_deferred_plabels (arg)\n+     void *arg;\n+{\n+  struct deferred_plabel *dp = *(struct deferred_plabel **) arg;\n+  int i;\n+\n+  for (i = 0; i < n_deferred_plabels; ++i)\n+    ggc_mark_rtx (dp[i].internal_label);\n+}\n+\n+/* Called to register all of our global variables with the garbage\n+   collector.  */\n+\n+static void \n+pa_add_gc_roots ()\n+{\n+  ggc_add_rtx_root (&hppa_compare_op0, 1);\n+  ggc_add_rtx_root (&hppa_compare_op1, 1);\n+  ggc_add_rtx_root (&hp_profile_label_rtx, 1);\n+  ggc_add_root (&deferred_plabels, sizeof (&deferred_plabels), 1,\n+\t\t&mark_deferred_plabels);\n+}"}, {"sha": "190a788412dc57f46339efe8a5975da19690959c", "filename": "gcc/config/sparc/sparc.c", "status": "modified", "additions": 40, "deletions": 1, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d07d525a85f68646d68a5a2bc6c885894674ebc3/gcc%2Fconfig%2Fsparc%2Fsparc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d07d525a85f68646d68a5a2bc6c885894674ebc3/gcc%2Fconfig%2Fsparc%2Fsparc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsparc.c?ref=d07d525a85f68646d68a5a2bc6c885894674ebc3", "patch": "@@ -38,6 +38,7 @@ Boston, MA 02111-1307, USA.  */\n #include \"expr.h\"\n #include \"recog.h\"\n #include \"toplev.h\"\n+#include \"ggc.h\"\n \n /* 1 if the caller has placed an \"unimp\" insn immediately after the call.\n    This is used in v8 code when calling a function that returns a structure.\n@@ -119,7 +120,8 @@ static int ultrasparc_adjust_cost PROTO((rtx, rtx, rtx, int));\n static void sparc_output_addr_vec PROTO((rtx));\n static void sparc_output_addr_diff_vec PROTO((rtx));\n static void sparc_output_deferred_case_vectors PROTO((void));\n-\n+static void sparc_add_gc_roots    PROTO ((void));\n+static void mark_ultrasparc_pipeline_state PROTO ((void *));\n \n #ifdef DWARF2_DEBUGGING_INFO\n extern char *dwarf2out_cfi_label ();\n@@ -331,6 +333,9 @@ sparc_override_options ()\n     {\n       error (\"profiling does not support code models other than medlow\");\n     }\n+\n+  /* Register global variables with the garbage collector.  */\n+  sparc_add_gc_roots ();\n }\n \f\n /* Miscellaneous utilities.  */\n@@ -7908,3 +7913,37 @@ sparc_function_block_profiler_exit(file)\n   else\n     abort ();\n }\n+\n+/* Mark ARG, which is really a struct ultrasparc_pipline_state *, for\n+   GC.  */\n+\n+static void\n+mark_ultrasparc_pipeline_state (arg)\n+     void *arg;\n+{\n+  struct ultrasparc_pipeline_state *ups;\n+  size_t i;\n+\n+  ups = (struct ultrasparc_pipeline_state *) arg;\n+  for (i = 0; i < sizeof (ups->group) / sizeof (rtx); ++i)\n+    ggc_mark_rtx (ups->group[i]);\n+}\n+\n+/* Called to register all of our global variables with the garbage\n+   collector.  */\n+\n+static void\n+sparc_add_gc_roots ()\n+{\n+  ggc_add_rtx_root (&sparc_compare_op0, 1);\n+  ggc_add_rtx_root (&sparc_compare_op1, 1);\n+  ggc_add_rtx_root (&leaf_label, 1);\n+  ggc_add_rtx_root (&global_offset_table, 1);\n+  ggc_add_rtx_root (&get_pc_symbol, 1);\n+  ggc_add_rtx_root (&sparc_addr_diff_list, 1);\n+  ggc_add_rtx_root (&sparc_addr_list, 1);\n+  ggc_add_root (ultra_pipe_hist, \n+\t\tsizeof (ultra_pipe_hist) / sizeof (ultra_pipe_hist[0]),\n+\t\tsizeof (ultra_pipe_hist[0]),\n+\t\t&mark_ultrasparc_pipeline_state);\n+}"}]}