{"sha": "8ea03e9016cbca5a7ee2b4befa4d5c32467b0982", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGVhMDNlOTAxNmNiY2E1YTdlZTJiNGJlZmE0ZDVjMzI0NjdiMDk4Mg==", "commit": {"author": {"name": "Uros Bizjak", "email": "ubizjak@gmail.com", "date": "2020-05-04T11:49:14Z"}, "committer": {"name": "Uros Bizjak", "email": "ubizjak@gmail.com", "date": "2020-05-04T11:49:14Z"}, "message": "i386: Use SHR to compare with large power-of-two constants [PR94650]\n\nConvert unsigned compares where\n\n\tm >= LARGE_POWER_OF_TWO\n\nand LARGE_POWER_OF_TWO represent an immediate where bit 33+ is set to use\na SHR instruction and compare the result to 0.  This avoids loading a\nlarge immediate with MOVABS insn.\n\n        movabsq $1099511627775, %rax\n        cmpq    %rax, %rdi\n        ja      .L5\n\ngets converted to:\n\n\tshrq\t$40, %rdi\n\tjne\t.L5\n\n\tPR target/94650\n\t* config/i386/predicates.md (shr_comparison_operator): New predicate.\n\t* config/i386/i386.md (compare->shr splitter): New splitters.\n\ntestsuite/ChangeLog:\n\n\tPR target/94650\n\t* gcc.targeti/i386/pr94650.c: New test.", "tree": {"sha": "67d23af3275c8c5a39a516143abe17d843b0c210", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/67d23af3275c8c5a39a516143abe17d843b0c210"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8ea03e9016cbca5a7ee2b4befa4d5c32467b0982", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8ea03e9016cbca5a7ee2b4befa4d5c32467b0982", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8ea03e9016cbca5a7ee2b4befa4d5c32467b0982", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8ea03e9016cbca5a7ee2b4befa4d5c32467b0982/comments", "author": {"login": "ubizjak", "id": 55479990, "node_id": "MDQ6VXNlcjU1NDc5OTkw", "avatar_url": "https://avatars.githubusercontent.com/u/55479990?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ubizjak", "html_url": "https://github.com/ubizjak", "followers_url": "https://api.github.com/users/ubizjak/followers", "following_url": "https://api.github.com/users/ubizjak/following{/other_user}", "gists_url": "https://api.github.com/users/ubizjak/gists{/gist_id}", "starred_url": "https://api.github.com/users/ubizjak/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ubizjak/subscriptions", "organizations_url": "https://api.github.com/users/ubizjak/orgs", "repos_url": "https://api.github.com/users/ubizjak/repos", "events_url": "https://api.github.com/users/ubizjak/events{/privacy}", "received_events_url": "https://api.github.com/users/ubizjak/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ubizjak", "id": 55479990, "node_id": "MDQ6VXNlcjU1NDc5OTkw", "avatar_url": "https://avatars.githubusercontent.com/u/55479990?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ubizjak", "html_url": "https://github.com/ubizjak", "followers_url": "https://api.github.com/users/ubizjak/followers", "following_url": "https://api.github.com/users/ubizjak/following{/other_user}", "gists_url": "https://api.github.com/users/ubizjak/gists{/gist_id}", "starred_url": "https://api.github.com/users/ubizjak/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ubizjak/subscriptions", "organizations_url": "https://api.github.com/users/ubizjak/orgs", "repos_url": "https://api.github.com/users/ubizjak/repos", "events_url": "https://api.github.com/users/ubizjak/events{/privacy}", "received_events_url": "https://api.github.com/users/ubizjak/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6b5c7ee0df6b87780f2fd6f2c5759a04e6eed1fe", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6b5c7ee0df6b87780f2fd6f2c5759a04e6eed1fe", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6b5c7ee0df6b87780f2fd6f2c5759a04e6eed1fe"}], "stats": {"total": 110, "additions": 110, "deletions": 0}, "files": [{"sha": "a549d453731c94f89759c4a11755ae7c4313e5bc", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8ea03e9016cbca5a7ee2b4befa4d5c32467b0982/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8ea03e9016cbca5a7ee2b4befa4d5c32467b0982/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=8ea03e9016cbca5a7ee2b4befa4d5c32467b0982", "patch": "@@ -1,3 +1,9 @@\n+2020-05-04  Uro\u0161 Bizjak  <ubizjak@gmail.com>\n+\n+\tPR target/94650\n+\t* config/i386/predicates.md (shr_comparison_operator): New predicate.\n+\t* config/i386/i386.md (compare->shr splitter): New splitters.\n+\n 2020-05-04  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR tree-optimization/94718"}, {"sha": "bd144ab3d5eff7db6774eca98ea601dea3dd1b6f", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 66, "deletions": 0, "changes": 66, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8ea03e9016cbca5a7ee2b4befa4d5c32467b0982/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8ea03e9016cbca5a7ee2b4befa4d5c32467b0982/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=8ea03e9016cbca5a7ee2b4befa4d5c32467b0982", "patch": "@@ -12310,6 +12310,36 @@\n \f\n ;; Store-flag instructions.\n \n+(define_split\n+  [(set (match_operand:QI 0 \"nonimmediate_operand\")\n+\t(match_operator:QI 1 \"shr_comparison_operator\"\n+\t  [(match_operand:DI 2 \"register_operand\")\n+\t   (match_operand 3 \"const_int_operand\")]))]\n+  \"TARGET_64BIT\n+   && IN_RANGE (exact_log2 (UINTVAL (operands[3]) + 1), 32, 63)\"\n+  [(parallel\n+     [(set (reg:CCZ FLAGS_REG)\n+\t   (compare:CCZ\n+\t     (lshiftrt:DI (match_dup 2) (match_dup 4))\n+\t     (const_int 0)))\n+      (clobber (scratch:DI))])\n+   (set (match_dup 0)\n+\t(match_op_dup 1 [(reg:CCZ FLAGS_REG) (const_int 0)]))]\n+{\n+  enum rtx_code new_code;\n+\n+  operands[1] = shallow_copy_rtx (operands[1]);\n+  switch (GET_CODE (operands[1]))\n+    {\n+    case GTU: new_code = NE; break;\n+    case LEU: new_code = EQ; break;\n+    default: gcc_unreachable ();\n+    }\n+  PUT_CODE (operands[1], new_code);\n+\n+  operands[4] = GEN_INT (exact_log2 (UINTVAL (operands[3]) + 1));\n+})\n+\n ;; For all sCOND expanders, also expand the compare or test insn that\n ;; generates cc0.  Generate an equality comparison if `seq' or `sne'.\n \n@@ -12473,6 +12503,42 @@\n    (set_attr \"mode\" \"<MODE>\")])\n \f\n ;; Basic conditional jump instructions.\n+\n+(define_split\n+  [(set (pc)\n+\t(if_then_else\n+\t  (match_operator 1 \"shr_comparison_operator\"\n+\t    [(match_operand:DI 2 \"register_operand\")\n+\t     (match_operand 3 \"const_int_operand\")])\n+\t  (label_ref (match_operand 0))\n+\t  (pc)))]\n+  \"TARGET_64BIT\n+   && IN_RANGE (exact_log2 (UINTVAL (operands[3]) + 1), 32, 63)\"\n+  [(parallel\n+     [(set (reg:CCZ FLAGS_REG)\n+\t   (compare:CCZ\n+\t     (lshiftrt:DI (match_dup 2) (match_dup 4))\n+\t     (const_int 0)))\n+      (clobber (scratch:DI))])\n+   (set (pc)\n+\t(if_then_else (match_op_dup 1 [(reg:CCZ FLAGS_REG) (const_int 0)])\n+\t\t      (label_ref (match_operand 0))\n+\t\t      (pc)))]\n+{\n+  enum rtx_code new_code;\n+\n+  operands[1] = shallow_copy_rtx (operands[1]);\n+  switch (GET_CODE (operands[1]))\n+    {\n+    case GTU: new_code = NE; break;\n+    case LEU: new_code = EQ; break;\n+    default: gcc_unreachable ();\n+    }\n+  PUT_CODE (operands[1], new_code);\n+\n+  operands[4] = GEN_INT (exact_log2 (UINTVAL (operands[3]) + 1));\n+})\n+\n ;; We ignore the overflow flag for signed branch instructions.\n \n (define_insn \"*jcc\""}, {"sha": "1a5e2210eca8ba096122714624ad15f68b3840c9", "filename": "gcc/config/i386/predicates.md", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8ea03e9016cbca5a7ee2b4befa4d5c32467b0982/gcc%2Fconfig%2Fi386%2Fpredicates.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8ea03e9016cbca5a7ee2b4befa4d5c32467b0982/gcc%2Fconfig%2Fi386%2Fpredicates.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fpredicates.md?ref=8ea03e9016cbca5a7ee2b4befa4d5c32467b0982", "patch": "@@ -1290,6 +1290,9 @@\n (define_predicate \"bt_comparison_operator\"\n   (match_code \"ne,eq\"))\n \n+(define_predicate \"shr_comparison_operator\"\n+  (match_code \"gtu,leu\"))\n+\n ;; Return true if OP is a valid comparison operator in valid mode.\n (define_predicate \"ix86_comparison_operator\"\n   (match_operand 0 \"comparison_operator\")"}, {"sha": "bbdd51a33f9b94c0d4566095d3cf129cf0d1394d", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8ea03e9016cbca5a7ee2b4befa4d5c32467b0982/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8ea03e9016cbca5a7ee2b4befa4d5c32467b0982/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=8ea03e9016cbca5a7ee2b4befa4d5c32467b0982", "patch": "@@ -1,3 +1,8 @@\n+2020-05-04  Uro\u0161 Bizjak  <ubizjak@gmail.com>\n+\n+\tPR target/94650\n+\t* gcc.targeti/i386/pr94650.c: New test.\n+\n 2020-05-04  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR tree-optimization/94718"}, {"sha": "49d8b6e7f8c4e4bc2dd490da4cd1f5e201f9000f", "filename": "gcc/testsuite/gcc.target/i386/pr94650.c", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8ea03e9016cbca5a7ee2b4befa4d5c32467b0982/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr94650.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8ea03e9016cbca5a7ee2b4befa4d5c32467b0982/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr94650.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr94650.c?ref=8ea03e9016cbca5a7ee2b4befa4d5c32467b0982", "patch": "@@ -0,0 +1,30 @@\n+/* PR target/94650 */\n+/* { dg-do compile { target { ! ia32 } } } */\n+/* { dg-options \"-O2\" } */\n+\n+#define LARGE_POWER_OF_TWO (1ULL << 40)\n+\n+int\n+check (unsigned long long m)\n+{\n+  return m >= LARGE_POWER_OF_TWO;\n+}\n+\n+void g (int);\n+\n+void\n+test0 (unsigned long long m)\n+{\n+  if (m >= LARGE_POWER_OF_TWO)\n+    g (0);\n+}\n+\n+void\n+test1 (unsigned long long m)\n+{\n+  if (m >= LARGE_POWER_OF_TWO)\n+    g (m);\n+}\n+\n+/* { dg-final { scan-assembler-not \"movabs\" } } */\n+/* { dg-final { scan-assembler-times \"shr\" 3 } } */"}]}