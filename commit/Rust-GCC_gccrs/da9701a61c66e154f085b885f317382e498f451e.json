{"sha": "da9701a61c66e154f085b885f317382e498f451e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZGE5NzAxYTYxYzY2ZTE1NGYwODViODg1ZjMxNzM4MmU0OThmNDUxZQ==", "commit": {"author": {"name": "Kriang Lerdsuwanakij", "email": "lerdsuwa@users.sourceforge.net", "date": "2002-12-19T15:11:29Z"}, "committer": {"name": "Kriang Lerdsuwanakij", "email": "lerdsuwa@gcc.gnu.org", "date": "2002-12-19T15:11:29Z"}, "message": "re PR c++/8099 (Friend classes and template specializations)\n\n\tPR c++/8099\n\t* friend.c (make_friend_class): Allow partial specialization\n\twhen declaration is not a template friend.\n\n\t* g++.dg/template/friend9.C: New test.\n\nFrom-SVN: r60308", "tree": {"sha": "4ea748acd4021885c21b5945f505825263b49d0d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4ea748acd4021885c21b5945f505825263b49d0d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/da9701a61c66e154f085b885f317382e498f451e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/da9701a61c66e154f085b885f317382e498f451e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/da9701a61c66e154f085b885f317382e498f451e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/da9701a61c66e154f085b885f317382e498f451e/comments", "author": null, "committer": null, "parents": [{"sha": "cab7a9a3b95c833df6d0175a9a287a9a767879c8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cab7a9a3b95c833df6d0175a9a287a9a767879c8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cab7a9a3b95c833df6d0175a9a287a9a767879c8"}], "stats": {"total": 58, "additions": 44, "deletions": 14}, "files": [{"sha": "1d7d395e34454ad0e6b47f59b9944ab474ba5065", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/da9701a61c66e154f085b885f317382e498f451e/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/da9701a61c66e154f085b885f317382e498f451e/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=da9701a61c66e154f085b885f317382e498f451e", "patch": "@@ -1,3 +1,9 @@\n+2002-12-18  Kriang Lerdsuwanakij  <lerdsuwa@users.sourceforge.net>\n+\n+\tPR c++/8099\n+\t* friend.c (make_friend_class): Allow partial specialization\n+\twhen declaration is not a template friend.\n+\n 2002-12-18  Kriang Lerdsuwanakij  <lerdsuwa@users.sourceforge.net>\n \n \tPR c++/3663"}, {"sha": "050862d0151e4648992dfc73b74f455132527fe2", "filename": "gcc/cp/friend.c", "status": "modified", "additions": 15, "deletions": 14, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/da9701a61c66e154f085b885f317382e498f451e/gcc%2Fcp%2Ffriend.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/da9701a61c66e154f085b885f317382e498f451e/gcc%2Fcp%2Ffriend.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ffriend.c?ref=da9701a61c66e154f085b885f317382e498f451e", "patch": "@@ -205,24 +205,25 @@ make_friend_class (type, friend_type)\n       return;\n     }\n \n-  if (CLASS_TYPE_P (friend_type)\n-      && CLASSTYPE_TEMPLATE_SPECIALIZATION (friend_type)\n-      && uses_template_parms (friend_type))\n-    {\n-      /* [temp.friend]\n-\t \n-\t Friend declarations shall not declare partial\n-\t specializations.  */\n-      error (\"partial specialization `%T' declared `friend'\",\n-\t\tfriend_type);\n-      return;\n-    }\n-  \n   if (processing_template_decl > template_class_depth (type))\n     /* If the TYPE is a template then it makes sense for it to be\n        friends with itself; this means that each instantiation is\n        friends with all other instantiations.  */\n-    is_template_friend = 1;\n+    {\n+      if (CLASS_TYPE_P (friend_type)\n+\t  && CLASSTYPE_TEMPLATE_SPECIALIZATION (friend_type)\n+\t  && uses_template_parms (friend_type))\n+\t{\n+\t  /* [temp.friend]\n+\t     Friend declarations shall not declare partial\n+\t     specializations.  */\n+\t  error (\"partial specialization `%T' declared `friend'\",\n+\t\t friend_type);\n+\t  return;\n+\t}\n+  \n+      is_template_friend = 1;\n+    }\n   else if (same_type_p (type, friend_type))\n     {\n       pedwarn (\"class `%T' is implicitly friends with itself\","}, {"sha": "d5f296f2d4a3c281de0a5684bd6778e38f9906ef", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/da9701a61c66e154f085b885f317382e498f451e/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/da9701a61c66e154f085b885f317382e498f451e/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=da9701a61c66e154f085b885f317382e498f451e", "patch": "@@ -1,3 +1,8 @@\n+2002-12-18  Kriang Lerdsuwanakij  <lerdsuwa@users.sourceforge.net>\n+\n+\tPR c++/8099\n+\t* g++.dg/template/friend9.C: New test.\n+\n 2002-11-18  Kriang Lerdsuwanakij  <lerdsuwa@users.sourceforge.net>\n \n \tPR c++/3663"}, {"sha": "4464e5f8ee8a816a3de24a47a374100807099d46", "filename": "gcc/testsuite/g++.dg/template/friend9.C", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/da9701a61c66e154f085b885f317382e498f451e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Ffriend9.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/da9701a61c66e154f085b885f317382e498f451e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Ffriend9.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Ffriend9.C?ref=da9701a61c66e154f085b885f317382e498f451e", "patch": "@@ -0,0 +1,18 @@\n+// { dg-do compile }\n+// Origin: Wolfgang Bangerth <bangerth@ticam.utexas.edu>\n+\n+// PR c++/8099\n+// Partial specialization as friend class\n+\n+template <int N, typename T> struct X;\n+template <typename T>        struct X<1,T>;\n+\n+template <typename P> class Y {\n+    static int i;\n+    template <int N, typename T> friend struct X;\n+    friend struct X<1,P>;\n+};\n+\n+template <typename T> struct X<1,T> {\n+    X () { Y<T>::i; };     // access private field\n+};"}]}