{"sha": "50f305cacf8dbf91656ffd5412a1b95fdc6351e2", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTBmMzA1Y2FjZjhkYmY5MTY1NmZmZDU0MTJhMWI5NWZkYzYzNTFlMg==", "commit": {"author": {"name": "Manuel L\u00f3pez-Ib\u00e1\u00f1ez", "email": "manu@gcc.gnu.org", "date": "2012-05-03T22:37:01Z"}, "committer": {"name": "Manuel L\u00f3pez-Ib\u00e1\u00f1ez", "email": "manu@gcc.gnu.org", "date": "2012-05-03T22:37:01Z"}, "message": "re PR c/51712 (-Wtype-limits should not trigger for types of implementation-defined signedness)\n\n2012-05-04  Manuel L\u00f3pez-Ib\u00e1\u00f1ez  <manu@gcc.gnu.org>\n\n\tPR c/51712\nc-family/\n\t* c-common.c (expr_original_type): New.\n\t(shorten_compare): Do not warn for enumeration types.\ntestsuite/\n\t* c-c++-common/pr51712.c: New.\n\nFrom-SVN: r187125", "tree": {"sha": "14abe4e1a206a9b970b7a19868ab17246a847071", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/14abe4e1a206a9b970b7a19868ab17246a847071"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/50f305cacf8dbf91656ffd5412a1b95fdc6351e2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/50f305cacf8dbf91656ffd5412a1b95fdc6351e2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/50f305cacf8dbf91656ffd5412a1b95fdc6351e2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/50f305cacf8dbf91656ffd5412a1b95fdc6351e2/comments", "author": null, "committer": null, "parents": [{"sha": "0c3641b0ea030a15cc2b61bdd0d4e200086243e5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0c3641b0ea030a15cc2b61bdd0d4e200086243e5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0c3641b0ea030a15cc2b61bdd0d4e200086243e5"}], "stats": {"total": 79, "additions": 61, "deletions": 18}, "files": [{"sha": "1c805e8694ba0458fa413c485aff71c7bad39695", "filename": "gcc/c-family/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/50f305cacf8dbf91656ffd5412a1b95fdc6351e2/gcc%2Fc-family%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/50f305cacf8dbf91656ffd5412a1b95fdc6351e2/gcc%2Fc-family%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2FChangeLog?ref=50f305cacf8dbf91656ffd5412a1b95fdc6351e2", "patch": "@@ -1,3 +1,9 @@\n+2012-05-04  Manuel L\u00f3pez-Ib\u00e1\u00f1ez  <manu@gcc.gnu.org>\n+\n+\tPR c/51712\n+\t* c-common.c (expr_original_type): New.\n+\t(shorten_compare): Do not warn for enumeration types.\n+\n 2012-05-03  Manuel L\u00f3pez-Ib\u00e1\u00f1ez  <manu@gcc.gnu.org>\n \n \t* c.opt (fpermissive): Add Var(flag_permissive)."}, {"sha": "f3a6746d7c9f8502c50527c9ea84bcad58f8ca09", "filename": "gcc/c-family/c-common.c", "status": "modified", "additions": 32, "deletions": 18, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/50f305cacf8dbf91656ffd5412a1b95fdc6351e2/gcc%2Fc-family%2Fc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/50f305cacf8dbf91656ffd5412a1b95fdc6351e2/gcc%2Fc-family%2Fc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-common.c?ref=50f305cacf8dbf91656ffd5412a1b95fdc6351e2", "patch": "@@ -3481,6 +3481,15 @@ binary_op_error (location_t location, enum tree_code code,\n \t    type0, type1);\n }\n \f\n+/* Given an expression as a tree, return its original type.  Do this\n+   by stripping any conversion that preserves the sign and precision.  */\n+static tree\n+expr_original_type (tree expr)\n+{\n+  STRIP_SIGN_NOPS (expr);\n+  return TREE_TYPE (expr);\n+}\n+\n /* Subroutine of build_binary_op, used for comparison operations.\n    See if the operands have both been converted from subword integer types\n    and, if so, perhaps change them both back to their original type.\n@@ -3506,6 +3515,7 @@ shorten_compare (tree *op0_ptr, tree *op1_ptr, tree *restype_ptr,\n   int real1, real2;\n   tree primop0, primop1;\n   enum tree_code code = *rescode_ptr;\n+  location_t loc = EXPR_LOC_OR_HERE (op0);\n \n   /* Throw away any conversions to wider types\n      already present in the operands.  */\n@@ -3726,9 +3736,11 @@ shorten_compare (tree *op0_ptr, tree *op1_ptr, tree *restype_ptr,\n       if (TREE_CODE (primop0) != INTEGER_CST)\n \t{\n \t  if (val == truthvalue_false_node)\n-\t    warning (OPT_Wtype_limits, \"comparison is always false due to limited range of data type\");\n+\t    warning_at (loc, OPT_Wtype_limits,\n+\t\t\t\"comparison is always false due to limited range of data type\");\n \t  if (val == truthvalue_true_node)\n-\t    warning (OPT_Wtype_limits, \"comparison is always true due to limited range of data type\");\n+\t    warning_at (loc, OPT_Wtype_limits,\n+\t\t\t\"comparison is always true due to limited range of data type\");\n \t}\n \n       if (val != 0)\n@@ -3795,29 +3807,31 @@ shorten_compare (tree *op0_ptr, tree *op1_ptr, tree *restype_ptr,\n \t  && TYPE_UNSIGNED (*restype_ptr))\n \t{\n \t  tree value = 0;\n+\t  /* All unsigned values are >= 0, so we warn.  However,\n+\t     if OP0 is a constant that is >= 0, the signedness of\n+\t     the comparison isn't an issue, so suppress the\n+\t     warning.  */\n+\t  bool warn = \n+\t    warn_type_limits && !in_system_header\n+\t    && !(TREE_CODE (primop0) == INTEGER_CST\n+\t\t && !TREE_OVERFLOW (convert (c_common_signed_type (type),\n+\t\t\t\t\t     primop0)))\n+\t    /* Do not warn for enumeration types.  */\n+\t    && (TREE_CODE (expr_original_type (primop0)) != ENUMERAL_TYPE);\n+\t  \n \t  switch (code)\n \t    {\n \t    case GE_EXPR:\n-\t      /* All unsigned values are >= 0, so we warn.  However,\n-\t\t if OP0 is a constant that is >= 0, the signedness of\n-\t\t the comparison isn't an issue, so suppress the\n-\t\t warning.  */\n-\t      if (warn_type_limits && !in_system_header\n-\t\t  && !(TREE_CODE (primop0) == INTEGER_CST\n-\t\t       && !TREE_OVERFLOW (convert (c_common_signed_type (type),\n-\t\t\t\t\t\t   primop0))))\n-\t\twarning (OPT_Wtype_limits,\n-\t\t\t \"comparison of unsigned expression >= 0 is always true\");\n+\t      if (warn)\n+\t\twarning_at (loc, OPT_Wtype_limits,\n+\t\t\t    \"comparison of unsigned expression >= 0 is always true\");\n \t      value = truthvalue_true_node;\n \t      break;\n \n \t    case LT_EXPR:\n-\t      if (warn_type_limits && !in_system_header\n-\t\t  && !(TREE_CODE (primop0) == INTEGER_CST\n-\t\t       && !TREE_OVERFLOW (convert (c_common_signed_type (type),\n-\t\t\t\t\t\t   primop0))))\n-\t\twarning (OPT_Wtype_limits,\n-\t\t\t \"comparison of unsigned expression < 0 is always false\");\n+\t      if (warn)\n+\t\twarning_at (loc, OPT_Wtype_limits,\n+\t\t\t    \"comparison of unsigned expression < 0 is always false\");\n \t      value = truthvalue_false_node;\n \t      break;\n "}, {"sha": "4600d5cb883403541027b52c740f2bc78f171ea2", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/50f305cacf8dbf91656ffd5412a1b95fdc6351e2/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/50f305cacf8dbf91656ffd5412a1b95fdc6351e2/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=50f305cacf8dbf91656ffd5412a1b95fdc6351e2", "patch": "@@ -1,3 +1,8 @@\n+2012-05-04  Manuel L\u00f3pez-Ib\u00e1\u00f1ez  <manu@gcc.gnu.org>\n+\n+\tPR c/51712\n+\t* c-c++-common/pr51712.c: New.\n+\n 2012-05-03  Michael Meissner  <meissner@linux.vnet.ibm.com>\n \n \tPR target/53199"}, {"sha": "4d9eba33afefe5fcd4a149c45f9fd24cc43b06a1", "filename": "gcc/testsuite/c-c++-common/pr51712.c", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/50f305cacf8dbf91656ffd5412a1b95fdc6351e2/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fpr51712.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/50f305cacf8dbf91656ffd5412a1b95fdc6351e2/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fpr51712.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fpr51712.c?ref=50f305cacf8dbf91656ffd5412a1b95fdc6351e2", "patch": "@@ -0,0 +1,18 @@\n+/* PR c/51712 */\n+/* { dg-do compile } */\n+/* { dg-options \"-Wtype-limits\" } */\n+\n+enum test_enum {\n+  FOO,\n+  BAR\n+};\n+\n+int valid(enum test_enum arg)\n+{\n+  return arg >= 0 && arg <= BAR;\n+}\n+\n+int valid2(unsigned int arg2)\n+{\n+  return arg2 >= FOO && arg2 <= BAR; /* { dg-bogus \"comparison of unsigned expression\" \"\" { xfail *-*-* } } */\n+}"}]}