{"sha": "ae0b23e2ff5be275111cc9aa4ff46fafb0b93738", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWUwYjIzZTJmZjViZTI3NTExMWNjOWFhNGZmNDZmYWZiMGI5MzczOA==", "commit": {"author": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2012-11-05T17:36:40Z"}, "committer": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2012-11-05T17:36:40Z"}, "message": "os: support more OSes\n\nFrom-SVN: r193172", "tree": {"sha": "4901d949271a9b6969a2ea608da1ccbd426407b3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4901d949271a9b6969a2ea608da1ccbd426407b3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ae0b23e2ff5be275111cc9aa4ff46fafb0b93738", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ae0b23e2ff5be275111cc9aa4ff46fafb0b93738", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ae0b23e2ff5be275111cc9aa4ff46fafb0b93738", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ae0b23e2ff5be275111cc9aa4ff46fafb0b93738/comments", "author": null, "committer": null, "parents": [{"sha": "8db13a7fd8710eabe8cff7234a4d18ca97a679e5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8db13a7fd8710eabe8cff7234a4d18ca97a679e5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8db13a7fd8710eabe8cff7234a4d18ca97a679e5"}], "stats": {"total": 88, "additions": 87, "deletions": 1}, "files": [{"sha": "3cb39c07c656bd5d0e3f0df449223bf5bd1321d1", "filename": "libgo/Makefile.am", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ae0b23e2ff5be275111cc9aa4ff46fafb0b93738/libgo%2FMakefile.am", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ae0b23e2ff5be275111cc9aa4ff46fafb0b93738/libgo%2FMakefile.am", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2FMakefile.am?ref=ae0b23e2ff5be275111cc9aa4ff46fafb0b93738", "patch": "@@ -829,8 +829,28 @@ endif\n if LIBGO_IS_SOLARIS\n go_os_stat_file = go/os/stat_solaris.go\n else\n+if LIBGO_IS_LINUX\n+go_os_stat_file = go/os/stat_atim.go\n+else\n+if LIBGO_IS_OPENBSD\n+go_os_stat_file = go/os/stat_atim.go\n+else\n+if LIBGO_IS_DARWIN\n+go_os_stat_file = go/os/stat_atimspec.go\n+else\n+if LIBGO_IS_FREEBSD\n+go_os_stat_file = go/os/stat_atimspec.go\n+else\n+if LIBGO_IS_NETBSD\n+go_os_stat_file = go/os/stat_atimspec.go\n+else\n go_os_stat_file = go/os/stat.go\n endif\n+endif\n+endif\n+endif\n+endif\n+endif\n \n go_os_files = \\\n \t$(go_os_dir_file) \\"}, {"sha": "4c13da546e51d12182a9eae9e110d3076e454ab4", "filename": "libgo/Makefile.in", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ae0b23e2ff5be275111cc9aa4ff46fafb0b93738/libgo%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ae0b23e2ff5be275111cc9aa4ff46fafb0b93738/libgo%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2FMakefile.in?ref=ae0b23e2ff5be275111cc9aa4ff46fafb0b93738", "patch": "@@ -1054,7 +1054,12 @@ go_net_files = \\\n @LIBGO_IS_IRIX_TRUE@@LIBGO_IS_LINUX_FALSE@@LIBGO_IS_SOLARIS_FALSE@go_os_sys_file = go/os/sys_uname.go\n @LIBGO_IS_LINUX_FALSE@@LIBGO_IS_SOLARIS_TRUE@go_os_sys_file = go/os/sys_uname.go\n @LIBGO_IS_LINUX_TRUE@go_os_sys_file = go/os/sys_linux.go\n-@LIBGO_IS_SOLARIS_FALSE@go_os_stat_file = go/os/stat.go\n+@LIBGO_IS_DARWIN_FALSE@@LIBGO_IS_FREEBSD_FALSE@@LIBGO_IS_LINUX_FALSE@@LIBGO_IS_NETBSD_FALSE@@LIBGO_IS_OPENBSD_FALSE@@LIBGO_IS_SOLARIS_FALSE@go_os_stat_file = go/os/stat.go\n+@LIBGO_IS_DARWIN_FALSE@@LIBGO_IS_FREEBSD_FALSE@@LIBGO_IS_LINUX_FALSE@@LIBGO_IS_NETBSD_TRUE@@LIBGO_IS_OPENBSD_FALSE@@LIBGO_IS_SOLARIS_FALSE@go_os_stat_file = go/os/stat_atimspec.go\n+@LIBGO_IS_DARWIN_FALSE@@LIBGO_IS_FREEBSD_TRUE@@LIBGO_IS_LINUX_FALSE@@LIBGO_IS_OPENBSD_FALSE@@LIBGO_IS_SOLARIS_FALSE@go_os_stat_file = go/os/stat_atimspec.go\n+@LIBGO_IS_DARWIN_TRUE@@LIBGO_IS_LINUX_FALSE@@LIBGO_IS_OPENBSD_FALSE@@LIBGO_IS_SOLARIS_FALSE@go_os_stat_file = go/os/stat_atimspec.go\n+@LIBGO_IS_LINUX_FALSE@@LIBGO_IS_OPENBSD_TRUE@@LIBGO_IS_SOLARIS_FALSE@go_os_stat_file = go/os/stat_atim.go\n+@LIBGO_IS_LINUX_TRUE@@LIBGO_IS_SOLARIS_FALSE@go_os_stat_file = go/os/stat_atim.go\n @LIBGO_IS_SOLARIS_TRUE@go_os_stat_file = go/os/stat_solaris.go\n go_os_files = \\\n \t$(go_os_dir_file) \\"}, {"sha": "00506b2b6095dd6e35df7097eb0b451d1c5e8e20", "filename": "libgo/go/os/stat_atim.go", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ae0b23e2ff5be275111cc9aa4ff46fafb0b93738/libgo%2Fgo%2Fos%2Fstat_atim.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ae0b23e2ff5be275111cc9aa4ff46fafb0b93738/libgo%2Fgo%2Fos%2Fstat_atim.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fos%2Fstat_atim.go?ref=ae0b23e2ff5be275111cc9aa4ff46fafb0b93738", "previous_filename": "libgo/go/os/stat_openbsd.go"}, {"sha": "db89f3db8399c73fed45bfb21efbc9ccfdd87436", "filename": "libgo/go/os/stat_atimespec.go", "status": "added", "additions": 61, "deletions": 0, "changes": 61, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ae0b23e2ff5be275111cc9aa4ff46fafb0b93738/libgo%2Fgo%2Fos%2Fstat_atimespec.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ae0b23e2ff5be275111cc9aa4ff46fafb0b93738/libgo%2Fgo%2Fos%2Fstat_atimespec.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fos%2Fstat_atimespec.go?ref=ae0b23e2ff5be275111cc9aa4ff46fafb0b93738", "patch": "@@ -0,0 +1,61 @@\n+// Copyright 2009 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+package os\n+\n+import (\n+\t\"syscall\"\n+\t\"time\"\n+)\n+\n+func sameFile(sys1, sys2 interface{}) bool {\n+\tstat1 := sys1.(*syscall.Stat_t)\n+\tstat2 := sys2.(*syscall.Stat_t)\n+\treturn stat1.Dev == stat2.Dev && stat1.Ino == stat2.Ino\n+}\n+\n+func fileInfoFromStat(st *syscall.Stat_t, name string) FileInfo {\n+\tfs := &fileStat{\n+\t\tname:    basename(name),\n+\t\tsize:    int64(st.Size),\n+\t\tmodTime: timespecToTime(st.Mtimspec),\n+\t\tsys:     st,\n+\t}\n+\tfs.mode = FileMode(st.Mode & 0777)\n+\tswitch st.Mode & syscall.S_IFMT {\n+\tcase syscall.S_IFBLK:\n+\t\tfs.mode |= ModeDevice\n+\tcase syscall.S_IFCHR:\n+\t\tfs.mode |= ModeDevice | ModeCharDevice\n+\tcase syscall.S_IFDIR:\n+\t\tfs.mode |= ModeDir\n+\tcase syscall.S_IFIFO:\n+\t\tfs.mode |= ModeNamedPipe\n+\tcase syscall.S_IFLNK:\n+\t\tfs.mode |= ModeSymlink\n+\tcase syscall.S_IFREG:\n+\t\t// nothing to do\n+\tcase syscall.S_IFSOCK:\n+\t\tfs.mode |= ModeSocket\n+\t}\n+\tif st.Mode&syscall.S_ISGID != 0 {\n+\t\tfs.mode |= ModeSetgid\n+\t}\n+\tif st.Mode&syscall.S_ISUID != 0 {\n+\t\tfs.mode |= ModeSetuid\n+\t}\n+\tif st.Mode&syscall.S_ISVTX != 0 {\n+\t\tfs.mode |= ModeSticky\n+\t}\n+\treturn fs\n+}\n+\n+func timespecToTime(ts syscall.Timespec) time.Time {\n+\treturn time.Unix(int64(ts.Sec), int64(ts.Nsec))\n+}\n+\n+// For testing.\n+func atime(fi FileInfo) time.Time {\n+\treturn timespecToTime(fi.Sys().(*syscall.Stat_t).Atimspec)\n+}"}]}