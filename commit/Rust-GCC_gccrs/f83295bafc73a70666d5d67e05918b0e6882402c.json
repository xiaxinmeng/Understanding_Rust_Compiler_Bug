{"sha": "f83295bafc73a70666d5d67e05918b0e6882402c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjgzMjk1YmFmYzczYTcwNjY2ZDVkNjdlMDU5MThiMGU2ODgyNDAyYw==", "commit": {"author": {"name": "Benjamin Kosnik", "email": "bkoz@redhat.com", "date": "2004-03-07T01:32:43Z"}, "committer": {"name": "Benjamin Kosnik", "email": "bkoz@gcc.gnu.org", "date": "2004-03-07T01:32:43Z"}, "message": "re PR libstdc++/12658 (Thread safety problems in locale::global() and locale::locale())\n\n\n2004-03-06  Benjamin Kosnik  <bkoz@redhat.com>\n\n\tPR libstdc++/12658\n\t* src/locale_init.cc (locale::locale): Lock critical regions with\n\texternal mutexes.\n\t(locale::global): Same.\n\t* include/bits/concurrence.h (__glibcxx_mutex_define_initialized):\n\tAdd in once bits for cases without __GTHREAD_MUTEX_INIT.\n\t(__glibcxx_mutex_lock): Same.\n\n\t* config/cpu/generic/atomicity.h: Remove\n\t_GLIBCXX_NEED_GENERIC_MUTEX, use concurrence.h.\n\t* src/misc-inst.cc: Move all locking bits out of this file.\n\n\t* config/os/hpux/os_defines.h: Remove _GLIBCXX_INST_ATOMICITY_LOCK.\n\t* src/misc-inst.cc: Same.\n\t* config/cpu/hppa/atomicity.h: Same.\n\n\t* config/linker-map.gnu: Remove types in the signature of atomic\n\texports, as they may vary.\n\nFrom-SVN: r79043", "tree": {"sha": "f71f116f1f9678557e7764415bf032ec269eadcf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f71f116f1f9678557e7764415bf032ec269eadcf"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f83295bafc73a70666d5d67e05918b0e6882402c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f83295bafc73a70666d5d67e05918b0e6882402c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f83295bafc73a70666d5d67e05918b0e6882402c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f83295bafc73a70666d5d67e05918b0e6882402c/comments", "author": null, "committer": null, "parents": [{"sha": "018e1b3b0b15655000518abaeca2c86c8fadf8a6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/018e1b3b0b15655000518abaeca2c86c8fadf8a6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/018e1b3b0b15655000518abaeca2c86c8fadf8a6"}], "stats": {"total": 131, "additions": 67, "deletions": 64}, "files": [{"sha": "2f36a46b46167150a2d16c4f17cd347c04a34e1f", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f83295bafc73a70666d5d67e05918b0e6882402c/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f83295bafc73a70666d5d67e05918b0e6882402c/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=f83295bafc73a70666d5d67e05918b0e6882402c", "patch": "@@ -1,3 +1,24 @@\n+2004-03-06  Benjamin Kosnik  <bkoz@redhat.com>\n+\n+\tPR libstdc++/12658\n+\t* src/locale_init.cc (locale::locale): Lock critical regions with\n+\texternal mutexes.\n+\t(locale::global): Same.\t\n+\t* include/bits/concurrence.h (__glibcxx_mutex_define_initialized): \n+\tAdd in once bits for cases without __GTHREAD_MUTEX_INIT.\n+\t(__glibcxx_mutex_lock): Same.\n+\n+\t* config/cpu/generic/atomicity.h: Remove\n+\t_GLIBCXX_NEED_GENERIC_MUTEX, use concurrence.h.\n+\t* src/misc-inst.cc: Move all locking bits out of this file.\n+\n+\t* config/os/hpux/os_defines.h: Remove _GLIBCXX_INST_ATOMICITY_LOCK.\n+\t* src/misc-inst.cc: Same.\n+\t* config/cpu/hppa/atomicity.h: Same.\n+\n+\t* config/linker-map.gnu: Remove types in the signature of atomic\n+\texports, as they may vary.\n+\t\n 2004-03-06  Paolo Carlini  <pcarlini@suse.de>\n \n \t* include/bits/locale_facets.tcc: Tweak the comment preceding"}, {"sha": "f30005a0abce67d9de617b3d7b5e9b5a8df11750", "filename": "libstdc++-v3/config/cpu/generic/atomicity.h", "status": "modified", "additions": 7, "deletions": 17, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f83295bafc73a70666d5d67e05918b0e6882402c/libstdc%2B%2B-v3%2Fconfig%2Fcpu%2Fgeneric%2Fatomicity.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f83295bafc73a70666d5d67e05918b0e6882402c/libstdc%2B%2B-v3%2Fconfig%2Fcpu%2Fgeneric%2Fatomicity.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fcpu%2Fgeneric%2Fatomicity.h?ref=f83295bafc73a70666d5d67e05918b0e6882402c", "patch": "@@ -28,34 +28,24 @@\n // the GNU General Public License.\n \n #include <bits/atomicity.h>\n-#include <bits/gthr.h>\n+#include <bits/concurrence.h>\n \n-#define _GLIBCXX_NEED_GENERIC_MUTEX\n+namespace __gnu_internal\n+{\n+  __glibcxx_mutex_define_initialized(atomic_mutex);\n+} // namespace __gnu_internal\n \n namespace __gnu_cxx\n {\n-  extern __gthread_mutex_t _Atomic_add_mutex;\n-\n-#ifndef __GTHREAD_MUTEX_INIT\n-  extern __gthread_once_t _Atomic_add_mutex_once;\n-  extern void __gthread_atomic_add_mutex_once();\n-#endif\n-\n   _Atomic_word\n   __attribute__ ((__unused__))\n   __exchange_and_add(volatile _Atomic_word* __mem, int __val)\n   {\n-#ifndef __GTHREAD_MUTEX_INIT\n-    __gthread_once(&__gnu_cxx::_Atomic_add_mutex_once,\n-\t\t   __gnu_cxx::__gthread_atomic_add_mutex_once);\n-#endif\n-\n+    __glibcxx_mutex_lock(__gnu_internal::atomic_mutex);\n     _Atomic_word __result;\n-    __gthread_mutex_lock(&__gnu_cxx::_Atomic_add_mutex);\n     __result = *__mem;\n     *__mem += __val;\n-\n-    __gthread_mutex_unlock(&__gnu_cxx::_Atomic_add_mutex);\n+    __glibcxx_mutex_unlock(__gnu_internal::atomic_mutex);\n     return __result;\n   }\n "}, {"sha": "48c8283a544652c8f806797873d9be889edcd124", "filename": "libstdc++-v3/config/cpu/hppa/atomicity.h", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f83295bafc73a70666d5d67e05918b0e6882402c/libstdc%2B%2B-v3%2Fconfig%2Fcpu%2Fhppa%2Fatomicity.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f83295bafc73a70666d5d67e05918b0e6882402c/libstdc%2B%2B-v3%2Fconfig%2Fcpu%2Fhppa%2Fatomicity.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fcpu%2Fhppa%2Fatomicity.h?ref=f83295bafc73a70666d5d67e05918b0e6882402c", "patch": "@@ -43,11 +43,8 @@ namespace __gnu_cxx\n   _Atomicity_lock<_Inst>::_S_atomicity_lock __attribute__ ((aligned (16))) = 1;\n \n   // Because of the lack of weak support when using the hpux som\n-  // linker, we explicitly instantiate the atomicity lock in\n-  // src/misc-inst.cc when _GLIBCXX_INST_ATOMICITY_LOCK is defined.\n-#ifndef _GLIBCXX_INST_ATOMICITY_LOCK\n+  // linker, we explicitly instantiate the atomicity lock.\n   template volatile int _Atomicity_lock<0>::_S_atomicity_lock;\n-#endif\n \n   int\n   __attribute__ ((__unused__))"}, {"sha": "7dd9a2a12f79b58102004e0e5d0cf5719d61da75", "filename": "libstdc++-v3/config/linker-map.gnu", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f83295bafc73a70666d5d67e05918b0e6882402c/libstdc%2B%2B-v3%2Fconfig%2Flinker-map.gnu", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f83295bafc73a70666d5d67e05918b0e6882402c/libstdc%2B%2B-v3%2Fconfig%2Flinker-map.gnu", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Flinker-map.gnu?ref=f83295bafc73a70666d5d67e05918b0e6882402c", "patch": "@@ -216,8 +216,8 @@ GLIBCXX_3.4 {\n \n     # __gnu_cxx::__atomic_add\n     # __gnu_cxx::__exchange_and_add\n-    _ZN9__gnu_cxx12__atomic_addEPVii;\n-    _ZN9__gnu_cxx18__exchange_and_addEPVii;\n+    _ZN9__gnu_cxx12__atomic_add*;\n+    _ZN9__gnu_cxx18__exchange_and_add*;\n \n   # DO NOT DELETE THIS LINE.  Port-specific symbols, if any, will be here.\n "}, {"sha": "6cba7390f388aebcab16a4cff39fe0d592915c91", "filename": "libstdc++-v3/config/os/hpux/os_defines.h", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f83295bafc73a70666d5d67e05918b0e6882402c/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fhpux%2Fos_defines.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f83295bafc73a70666d5d67e05918b0e6882402c/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fhpux%2Fos_defines.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fhpux%2Fos_defines.h?ref=f83295bafc73a70666d5d67e05918b0e6882402c", "patch": "@@ -91,12 +91,6 @@ typedef long int __padding_type;\n #define _LIBUNWIND_STD_ABI 1\n #endif\n \n-/* We need explicit instantiation of the atomicity lock on HPPA if\n-   there is no weak support.  */\n-#if !__GXX_WEAK__ && defined (__hppa__)\n-#define _GLIBCXX_INST_ATOMICITY_LOCK 1\n-#endif\n-\n /* Don't use pragma weak in gthread headers.  HP-UX rejects programs\n    with unsatisfied external references even if all of those references\n    are weak; gthread relies on such unsatisfied references being resolved"}, {"sha": "ea99e56e7efd2ca8accd74cf930cc9ed7f9cdb79", "filename": "libstdc++-v3/include/bits/concurrence.h", "status": "modified", "additions": 19, "deletions": 8, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f83295bafc73a70666d5d67e05918b0e6882402c/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fconcurrence.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f83295bafc73a70666d5d67e05918b0e6882402c/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fconcurrence.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fconcurrence.h?ref=f83295bafc73a70666d5d67e05918b0e6882402c", "patch": "@@ -1,6 +1,6 @@\n // Support for concurrent programing -*- C++ -*-\n \n-// Copyright (C) 2003\n+// Copyright (C) 2003, 2004\n // Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n@@ -28,27 +28,38 @@\n // invalidate any other reasons why the executable file might be covered by\n // the GNU General Public License.\n \n-#ifndef _CONCURRENCE\n-#define _CONCURRENCE 1\n+#ifndef _CONCURRENCE_H\n+#define _CONCURRENCE_H 1\n \n // GCC's thread abstraction layer\n #include \"bits/gthr.h\"\n \n #if __GTHREADS\n+\n # ifdef __GTHREAD_MUTEX_INIT\n #  define __glibcxx_mutex_define_initialized(NAME) \\\n __gthread_mutex_t NAME = __GTHREAD_MUTEX_INIT\n+#  define __glibcxx_mutex_lock(NAME) \\\n+__gthread_mutex_lock(&NAME)\n # else\n+// Implies __GTHREAD_MUTEX_INIT_FUNCTION\n #  define __glibcxx_mutex_define_initialized(NAME) \\\n __gthread_mutex_t NAME; \\\n-__GTHREAD_MUTEX_INIT_FUNCTION(&NAME)\n+__gthread_once_t NAME ## _once = __GTHREAD_ONCE_INIT; \\\n+void NAME ## _init() { __GTHREAD_MUTEX_INIT_FUNCTION(&NAME); }\n+# define __glibcxx_mutex_lock(NAME) \\\n+__gthread_once(&NAME ## _once, NAME ## _init); \\\n+__gthread_mutex_lock(&NAME)\n # endif\n-# define __glibcxx_mutex_lock(LOCK) __gthread_mutex_lock(&LOCK)\n-# define __glibcxx_mutex_unlock(LOCK) __gthread_mutex_unlock(&LOCK)\n+\n+# define __glibcxx_mutex_unlock(NAME) __gthread_mutex_unlock(&NAME)\n+\n #else\n+\n # define __glibcxx_mutex_define_initialized(NAME)\n-# define __glibcxx_mutex_lock(LOCK)\n-# define __glibcxx_mutex_unlock(LOCK)\n+# define __glibcxx_mutex_lock(NAME)\n+# define __glibcxx_mutex_unlock(NAME)\n+\n #endif\n \n #endif"}, {"sha": "1bcff03356dceb580d462b29eee7549f967f523c", "filename": "libstdc++-v3/include/ext/mt_allocator.h", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f83295bafc73a70666d5d67e05918b0e6882402c/libstdc%2B%2B-v3%2Finclude%2Fext%2Fmt_allocator.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f83295bafc73a70666d5d67e05918b0e6882402c/libstdc%2B%2B-v3%2Finclude%2Fext%2Fmt_allocator.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fmt_allocator.h?ref=f83295bafc73a70666d5d67e05918b0e6882402c", "patch": "@@ -559,8 +559,8 @@ namespace __gnu_cxx\n \t}\n \n       // Setup the bin map for quick lookup of the relevant bin.\n-      _S_binmap = (binmap_type*)\n-        ::operator new ((_S_options._M_max_bytes + 1) * sizeof(binmap_type));\n+      const size_t n1 = (_S_options._M_max_bytes + 1) * sizeof(binmap_type);\n+      _S_binmap = static_cast<binmap_type*>(::operator new(n1));\n \n       binmap_type* bp_t = _S_binmap;\n       binmap_type bin_max_t = 1;\n@@ -581,9 +581,8 @@ namespace __gnu_cxx\n #ifdef __GTHREADS\n       if (__gthread_active_p())\n         {\n-          _S_thread_freelist_first =\n-            static_cast<thread_record*>(::operator \n-              new(sizeof(thread_record) * _S_options._M_max_threads));\n+\t  const size_t n2 = sizeof(thread_record) * _S_options._M_max_threads;\n+          _S_thread_freelist_first = static_cast<thread_record*>(::operator new(n2));\n \n \t  // NOTE! The first assignable thread id is 1 since the\n \t  // global pool uses id 0\n@@ -637,7 +636,7 @@ namespace __gnu_cxx\n                 *br.mutex = __tmp;\n               }\n #else\n-              { __GTHREAD_MUTEX_INIT_FUNCTION (br.mutex); }\n+              { __GTHREAD_MUTEX_INIT_FUNCTION(br.mutex); }\n #endif\n             }\n #endif\n@@ -741,12 +740,13 @@ namespace __gnu_cxx\n   template<typename _Tp> \n     __gthread_key_t __mt_alloc<_Tp>::_S_thread_key;\n \n-  template<typename _Tp> __gthread_mutex_t\n+  template<typename _Tp> \n+    __gthread_mutex_t\n #ifdef __GTHREAD_MUTEX_INIT\n-  __mt_alloc<_Tp>::_S_thread_freelist_mutex = __GTHREAD_MUTEX_INIT;\n+    __mt_alloc<_Tp>::_S_thread_freelist_mutex = __GTHREAD_MUTEX_INIT;\n #else\n   // XXX\n-  __mt_alloc<_Tp>::_S_thread_freelist_mutex;\n+    __mt_alloc<_Tp>::_S_thread_freelist_mutex;\n #endif\n #endif\n } // namespace __gnu_cxx"}, {"sha": "c1dac9f7a7c22e7ec028902f670984dcc0e3a4b5", "filename": "libstdc++-v3/src/locale_init.cc", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f83295bafc73a70666d5d67e05918b0e6882402c/libstdc%2B%2B-v3%2Fsrc%2Flocale_init.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f83295bafc73a70666d5d67e05918b0e6882402c/libstdc%2B%2B-v3%2Fsrc%2Flocale_init.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Flocale_init.cc?ref=f83295bafc73a70666d5d67e05918b0e6882402c", "patch": "@@ -88,6 +88,10 @@ namespace __gnu_internal\n   extern std::__moneypunct_cache<wchar_t, true>\t moneypunct_cache_wt;\n   extern std::__timepunct_cache<wchar_t>\t timepunct_cache_w;\n #endif\n+\n+  // Mutex objects for locale initialization.\n+  __glibcxx_mutex_define_initialized(locale_cons_mutex);\n+  __glibcxx_mutex_define_initialized(locale_global_mutex);\n } // namespace __gnu_internal\n \n namespace std \n@@ -97,19 +101,23 @@ namespace std\n   locale::locale() throw()\n   { \n     _S_initialize(); \n+    __glibcxx_mutex_lock(__gnu_internal::locale_cons_mutex);\n     _S_global->_M_add_reference();\n     _M_impl = _S_global;\n+    __glibcxx_mutex_unlock(__gnu_internal::locale_cons_mutex);\n   }\n \n   locale\n   locale::global(const locale& __other)\n   {\n     _S_initialize();\n+    __glibcxx_mutex_lock(__gnu_internal::locale_global_mutex);\n     _Impl* __old = _S_global;\n     __other._M_impl->_M_add_reference();\n     _S_global = __other._M_impl; \n     if (__other.name() != \"*\")\n       setlocale(LC_ALL, __other.name().c_str());\n+   __glibcxx_mutex_unlock(__gnu_internal::locale_global_mutex);\n \n     // Reference count sanity check: one reference removed for the\n     // subsition of __other locale, one added by return-by-value. Net"}, {"sha": "b9bc29882f09fe89ae5f642a41aaaa91275d6fe3", "filename": "libstdc++-v3/src/misc-inst.cc", "status": "modified", "additions": 0, "deletions": 18, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f83295bafc73a70666d5d67e05918b0e6882402c/libstdc%2B%2B-v3%2Fsrc%2Fmisc-inst.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f83295bafc73a70666d5d67e05918b0e6882402c/libstdc%2B%2B-v3%2Fsrc%2Fmisc-inst.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Fmisc-inst.cc?ref=f83295bafc73a70666d5d67e05918b0e6882402c", "patch": "@@ -73,24 +73,6 @@ namespace std\n \n namespace __gnu_cxx\n {\n-#ifdef _GLIBCXX_INST_ATOMICITY_LOCK\n-  template volatile int _Atomicity_lock<0>::_S_atomicity_lock;\n-#endif\n-\n-#ifdef _GLIBCXX_NEED_GENERIC_MUTEX\n-#ifdef __GTHREAD_MUTEX_INIT\n-  __gthread_mutex_t _Atomic_add_mutex = __GTHREAD_MUTEX_INIT;\n-#else\n-  // generic atomicity.h without static initialization\n-  __gthread_mutex_t _Atomic_add_mutex;\n-  __gthread_once_t _Atomic_add_mutex_once = __GTHREAD_ONCE_INIT;\n-  void __gthread_atomic_add_mutex_once()\n-  {\n-    __GTHREAD_MUTEX_INIT_FUNCTION (&_Atomic_add_mutex);\n-  }\n-#endif\n-#endif // _GLIBCXX_NEED_GLOBAL_MUTEX\n-\n   template class stdio_sync_filebuf<char>;\n #ifdef _GLIBCXX_USE_WCHAR_T\n   template class stdio_sync_filebuf<wchar_t>;"}]}