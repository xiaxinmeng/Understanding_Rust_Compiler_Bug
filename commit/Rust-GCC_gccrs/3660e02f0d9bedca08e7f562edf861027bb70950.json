{"sha": "3660e02f0d9bedca08e7f562edf861027bb70950", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzY2MGUwMmYwZDliZWRjYTA4ZTdmNTYyZWRmODYxMDI3YmI3MDk1MA==", "commit": {"author": {"name": "Phil Edwards", "email": "phil@codesourcery.com", "date": "2003-09-02T18:46:54Z"}, "committer": {"name": "Phil Edwards", "email": "pme@gcc.gnu.org", "date": "2003-09-02T18:46:54Z"}, "message": "acinclude.m4 (GLIBCXX_ENABLE_HOSTED): #define _GLIBCXX_HOSTED appropriately.\n\n2003-09-02  Phil Edwards  <phil@codesourcery.com>\n\n\t* acinclude.m4 (GLIBCXX_ENABLE_HOSTED):  #define _GLIBCXX_HOSTED\n\tappropriately.\n\t* config.h.in:  Add _GLIBCXX_HOSTED.\n\t* libsupc++/eh_term_handler.cc:  Test it here; initialize\n\t__terminate_handler to std::abort if freestanding.\n\t* aclocal.m4, configure:  Regenerated.\n\t* docs/html/configopts.html:  Document --disable-hosted-libstdcxx.\n\nFrom-SVN: r71001", "tree": {"sha": "6b410b5f9b983f63fb719aae0356a28474f0f73c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6b410b5f9b983f63fb719aae0356a28474f0f73c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3660e02f0d9bedca08e7f562edf861027bb70950", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3660e02f0d9bedca08e7f562edf861027bb70950", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3660e02f0d9bedca08e7f562edf861027bb70950", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3660e02f0d9bedca08e7f562edf861027bb70950/comments", "author": null, "committer": null, "parents": [{"sha": "742c0a4ee18fc5d913c4384e3e55f2c95c3e7fe6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/742c0a4ee18fc5d913c4384e3e55f2c95c3e7fe6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/742c0a4ee18fc5d913c4384e3e55f2c95c3e7fe6"}], "stats": {"total": 70, "additions": 61, "deletions": 9}, "files": [{"sha": "2d96e45cb3a074e392854f9ac461199d1463396b", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3660e02f0d9bedca08e7f562edf861027bb70950/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3660e02f0d9bedca08e7f562edf861027bb70950/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=3660e02f0d9bedca08e7f562edf861027bb70950", "patch": "@@ -1,3 +1,13 @@\n+2003-09-02  Phil Edwards  <phil@codesourcery.com>\n+\n+\t* acinclude.m4 (GLIBCXX_ENABLE_HOSTED):  #define _GLIBCXX_HOSTED\n+\tappropriately.\n+\t* config.h.in:  Add _GLIBCXX_HOSTED.\n+\t* libsupc++/eh_term_handler.cc:  Test it here; initialize\n+\t__terminate_handler to std::abort if freestanding.\n+\t* aclocal.m4, configure:  Regenerated.\n+\t* docs/html/configopts.html:  Document --disable-hosted-libstdcxx.\n+\n 2003-08-29  Nathan Myers  <ncm@cantrip.org>\n \t\n \tPR libstdc++/11990\t"}, {"sha": "0ba24bad7fda64e9a5caa783018922a58d20bace", "filename": "libstdc++-v3/acinclude.m4", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3660e02f0d9bedca08e7f562edf861027bb70950/libstdc%2B%2B-v3%2Facinclude.m4", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3660e02f0d9bedca08e7f562edf861027bb70950/libstdc%2B%2B-v3%2Facinclude.m4", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Facinclude.m4?ref=3660e02f0d9bedca08e7f562edf861027bb70950", "patch": "@@ -1276,6 +1276,9 @@ dnl\n dnl Sets:\n dnl  is_hosted  (yes/no)\n dnl\n+dnl Defines:\n+dnl  _GLIBCXX_HOSTED   (always defined, either to 1 or 0)\n+dnl\n AC_DEFUN(GLIBCXX_ENABLE_HOSTED, [\n   AC_ARG_ENABLE([hosted-libstdcxx],\n     AC_HELP_STRING([--disable-hosted-libstdcxx],\n@@ -1284,12 +1287,16 @@ AC_DEFUN(GLIBCXX_ENABLE_HOSTED, [\n   if test \"$enable_hosted_libstdcxx\" = no; then\n     AC_MSG_NOTICE([Only freestanding libraries will be built])\n     is_hosted=no\n+    hosted_define=0\n     enable_abi_check=no\n     enable_libstdcxx_pch=no\n   else\n     is_hosted=yes\n+    hosted_define=1\n   fi\n   GLIBCXX_CONDITIONAL(GLIBCXX_HOSTED, test $is_hosted = yes)\n+  AC_DEFINE_UNQUOTED(_GLIBCXX_HOSTED, $hosted_define,\n+    [Define to 1 if a full hosted library is built, or 0 if freestanding.])\n ])\n \n "}, {"sha": "42399080ba378dca9b08cb4af5e5541630a7b5c4", "filename": "libstdc++-v3/aclocal.m4", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3660e02f0d9bedca08e7f562edf861027bb70950/libstdc%2B%2B-v3%2Faclocal.m4", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3660e02f0d9bedca08e7f562edf861027bb70950/libstdc%2B%2B-v3%2Faclocal.m4", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Faclocal.m4?ref=3660e02f0d9bedca08e7f562edf861027bb70950", "patch": "@@ -1289,6 +1289,9 @@ dnl\n dnl Sets:\n dnl  is_hosted  (yes/no)\n dnl\n+dnl Defines:\n+dnl  _GLIBCXX_HOSTED   (always defined, either to 1 or 0)\n+dnl\n AC_DEFUN(GLIBCXX_ENABLE_HOSTED, [\n   AC_ARG_ENABLE([hosted-libstdcxx],\n     AC_HELP_STRING([--disable-hosted-libstdcxx],\n@@ -1297,12 +1300,16 @@ AC_DEFUN(GLIBCXX_ENABLE_HOSTED, [\n   if test \"$enable_hosted_libstdcxx\" = no; then\n     AC_MSG_NOTICE([Only freestanding libraries will be built])\n     is_hosted=no\n+    hosted_define=0\n     enable_abi_check=no\n     enable_libstdcxx_pch=no\n   else\n     is_hosted=yes\n+    hosted_define=1\n   fi\n   GLIBCXX_CONDITIONAL(GLIBCXX_HOSTED, test $is_hosted = yes)\n+  AC_DEFINE_UNQUOTED(_GLIBCXX_HOSTED, $hosted_define,\n+    [Define to 1 if a full hosted library is built, or 0 if freestanding.])\n ])\n \n "}, {"sha": "0e6bb080c3b2dc2a06c4719513982ae623a3d514", "filename": "libstdc++-v3/config.h.in", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3660e02f0d9bedca08e7f562edf861027bb70950/libstdc%2B%2B-v3%2Fconfig.h.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3660e02f0d9bedca08e7f562edf861027bb70950/libstdc%2B%2B-v3%2Fconfig.h.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig.h.in?ref=3660e02f0d9bedca08e7f562edf861027bb70950", "patch": "@@ -878,6 +878,9 @@\n /* Define to 1 if you have the ANSI C header files. */\n #undef STDC_HEADERS\n \n+/* Define to 1 if a full hosted library is built, or 0 if freestanding. */\n+#undef _GLIBCXX_HOSTED\n+\n /* Define if the compiler is configured for setjmp/longjmp exceptions. */\n #undef _GLIBCXX_SJLJ_EXCEPTIONS\n //"}, {"sha": "e9e51e36ad612163afffc4bf65ef7afa800c4812", "filename": "libstdc++-v3/configure", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3660e02f0d9bedca08e7f562edf861027bb70950/libstdc%2B%2B-v3%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3660e02f0d9bedca08e7f562edf861027bb70950/libstdc%2B%2B-v3%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfigure?ref=3660e02f0d9bedca08e7f562edf861027bb70950", "patch": "@@ -4819,13 +4819,20 @@ fi;\n     { echo \"$as_me:$LINENO: Only freestanding libraries will be built\" >&5\n echo \"$as_me: Only freestanding libraries will be built\" >&6;}\n     is_hosted=no\n+    hosted_define=0\n     enable_abi_check=no\n     enable_libstdcxx_pch=no\n   else\n     is_hosted=yes\n+    hosted_define=1\n   fi\n \n \n+cat >>confdefs.h <<_ACEOF\n+#define _GLIBCXX_HOSTED $hosted_define\n+_ACEOF\n+\n+\n \n # Check for support bits and g++ features that don't require linking.\n \n@@ -4862,7 +4869,7 @@ fi;\n     #\n     # Fake what AC_TRY_COMPILE does.  XXX Look at redoing this new-style.\n     cat > conftest.$ac_ext << EOF\n-#line 4865 \"configure\"\n+#line 4872 \"configure\"\n struct S { ~S(); };\n void bar();\n void foo()"}, {"sha": "2cfec4475c4c979c41f6348d4b1350fa72997a56", "filename": "libstdc++-v3/docs/html/configopts.html", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3660e02f0d9bedca08e7f562edf861027bb70950/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2Fconfigopts.html", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3660e02f0d9bedca08e7f562edf861027bb70950/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2Fconfigopts.html", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2Fconfigopts.html?ref=3660e02f0d9bedca08e7f562edf861027bb70950", "patch": "@@ -146,7 +146,7 @@ <h1 class=\"centered\"><a name=\"top\">Interesting <code>configure</code>\n \n  <dt><code>--enable-libstdcxx-debug  </code></dt>\n  <dd><p>Build separate debug libraries in addition to what is normally built.\n- \tBy default, the debug libraries are compiled with \n+        By default, the debug libraries are compiled with \n         <code> CXXFLAGS='-g3 -O0'</code>\n         , are installed in <code>${libdir}/debug</code>, and have the\n         same names and versioning information as the non-debug\n@@ -273,6 +273,14 @@ <h1 class=\"centered\"><a name=\"top\">Interesting <code>configure</code>\n         testsuite.\n      </p>\n  </dd>\n+\n+ <dt><code>--disable-hosted-libstdcxx  </code></dt>\n+ <dd><p>By default, a complete <em>hosted</em> C++ library is built.  The\n+        C++ Standard also describes a <em>freestanding</em> environment,\n+        in which only a minimal set of headers are provided.  This option\n+        builds such an environment.\n+     </p>\n+ </dd>\n </dl>\n <p>Return <a href=\"#top\">to the top of the page</a> or\n    <a href=\"http://gcc.gnu.org/libstdc++/\">to the libstdc++ homepage</a>."}, {"sha": "f4f1193e71a4b58b8cc27b50e263ad7c7ccbf1c7", "filename": "libstdc++-v3/libsupc++/eh_term_handler.cc", "status": "modified", "additions": 17, "deletions": 7, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3660e02f0d9bedca08e7f562edf861027bb70950/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Feh_term_handler.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3660e02f0d9bedca08e7f562edf861027bb70950/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Feh_term_handler.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Feh_term_handler.cc?ref=3660e02f0d9bedca08e7f562edf861027bb70950", "patch": "@@ -1,5 +1,5 @@\n // -*- C++ -*- std::terminate handler\n-// Copyright (C) 2002 Free Software Foundation\n+// Copyright (C) 2002, 2003 Free Software Foundation\n //\n // This file is part of GCC.\n //\n@@ -28,14 +28,24 @@\n // the GNU General Public License.\n \n #include \"unwind-cxx.h\"\n+#include <bits/c++config.h>\n \n-/* We default to the talkative, informative handler.  This pulls in the\n-   demangler, the dyn-string utilities, and elements of the I/O library.\n-   For a low-memory environment, you can return to the earlier \"silent death\"\n-   handler by including <cstdlib>, initializg to \"std::abort\", and rebuilding\n-   the library.  */\n+/* We default to the talkative, informative handler in a normal hosted\n+   library.  This pulls in the demangler, the dyn-string utilities, and\n+   elements of the I/O library.  For a low-memory environment, you can return\n+   to the earlier \"silent death\" handler by including <cstdlib>, initializing\n+   to \"std::abort\", and rebuilding the library.  In a freestanding mode, we\n+   default to this latter approach.  */\n+\n+#if ! _GLIBCXX_HOSTED\n+# include <cstdlib>\n+#endif\n \n /* The current installed user handler.  */\n std::terminate_handler __cxxabiv1::__terminate_handler =\n-                                       __gnu_cxx::__verbose_terminate_handler;\n+#if _GLIBCXX_HOSTED\n+\t__gnu_cxx::__verbose_terminate_handler;\n+#else\n+\tstd::abort;\n+#endif\n "}]}