{"sha": "cff7b62c05a411a7dfb3af5e8feb63090c00df4a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Y2ZmN2I2MmMwNWE0MTFhN2RmYjNhZjVlOGZlYjYzMDkwYzAwZGY0YQ==", "commit": {"author": {"name": "Piotr Trojanek", "email": "trojanek@adacore.com", "date": "2018-11-14T11:40:30Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "pmderodat@gcc.gnu.org", "date": "2018-11-14T11:40:30Z"}, "message": "[Ada] Fix handling of generic actuals with default expression in SPARK\n\nBoth in the GNAT frontend and in the GNATprove backend we have\nseveral checks related to generic actuals of mode IN that rely on the\nCorresponding_Generic_Association flag. However, this flag was only set\nfor actuals with explicit expressions from the generic instance and unset\nfor actuals with implicit expressions from the generic unit.\n\nFor example, the code from the added testcase was wrongly rejected with\na message that Y (which is an actual with a default expression) cannot\nappear in the Initializes contract. Now this code is accepted.\n\n2018-11-14  Piotr Trojanek  <trojanek@adacore.com>\n\ngcc/ada/\n\n\t* sem_ch12.adb (Instantiate_Object): Set\n\tCorresponding_Generic_Association on generic actuals with\n\tdefault expression.\n\t* sinfo.ads (Corresponding_Generic_Association): Update comment.\n\ngcc/testsuite/\n\n\t* gnat.dg/generic_actuals.adb: New testcase.\n\nFrom-SVN: r266112", "tree": {"sha": "81e4bda4269aa6dcd79bf70c63cb741687040ded", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/81e4bda4269aa6dcd79bf70c63cb741687040ded"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/cff7b62c05a411a7dfb3af5e8feb63090c00df4a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cff7b62c05a411a7dfb3af5e8feb63090c00df4a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cff7b62c05a411a7dfb3af5e8feb63090c00df4a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cff7b62c05a411a7dfb3af5e8feb63090c00df4a/comments", "author": {"login": "ptroja", "id": 161602, "node_id": "MDQ6VXNlcjE2MTYwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/161602?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ptroja", "html_url": "https://github.com/ptroja", "followers_url": "https://api.github.com/users/ptroja/followers", "following_url": "https://api.github.com/users/ptroja/following{/other_user}", "gists_url": "https://api.github.com/users/ptroja/gists{/gist_id}", "starred_url": "https://api.github.com/users/ptroja/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ptroja/subscriptions", "organizations_url": "https://api.github.com/users/ptroja/orgs", "repos_url": "https://api.github.com/users/ptroja/repos", "events_url": "https://api.github.com/users/ptroja/events{/privacy}", "received_events_url": "https://api.github.com/users/ptroja/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "923ecd0e4b472073e2794ad2cb272880c3c9e937", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/923ecd0e4b472073e2794ad2cb272880c3c9e937", "html_url": "https://github.com/Rust-GCC/gccrs/commit/923ecd0e4b472073e2794ad2cb272880c3c9e937"}], "stats": {"total": 40, "additions": 37, "deletions": 3}, "files": [{"sha": "04caf7a5a5eb6bbe96ce4b3cea74488c41847661", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cff7b62c05a411a7dfb3af5e8feb63090c00df4a/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cff7b62c05a411a7dfb3af5e8feb63090c00df4a/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=cff7b62c05a411a7dfb3af5e8feb63090c00df4a", "patch": "@@ -1,3 +1,10 @@\n+2018-11-14  Piotr Trojanek  <trojanek@adacore.com>\n+\n+\t* sem_ch12.adb (Instantiate_Object): Set\n+\tCorresponding_Generic_Association on generic actuals with\n+\tdefault expression.\n+\t* sinfo.ads (Corresponding_Generic_Association): Update comment.\n+\n 2018-11-14  Hristian Kirtchev  <kirtchev@adacore.com>\n \n \t* exp_ch4.adb (Expand_Concatenate): Use the proper routine to"}, {"sha": "f75c353b386e4658154ff9cc9bf8463935893c19", "filename": "gcc/ada/sem_ch12.adb", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cff7b62c05a411a7dfb3af5e8feb63090c00df4a/gcc%2Fada%2Fsem_ch12.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cff7b62c05a411a7dfb3af5e8feb63090c00df4a/gcc%2Fada%2Fsem_ch12.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch12.adb?ref=cff7b62c05a411a7dfb3af5e8feb63090c00df4a", "patch": "@@ -11097,6 +11097,9 @@ package body Sem_Ch12 is\n                 Expression             => New_Copy_Tree\n                                             (Default_Expression (Formal)));\n \n+            Set_Corresponding_Generic_Association\n+              (Decl_Node, Expression (Decl_Node));\n+\n             Append (Decl_Node, List);\n             Set_Analyzed (Expression (Decl_Node), False);\n "}, {"sha": "801bd21fca7724d14f2e617173c125b3edb7885d", "filename": "gcc/ada/sinfo.ads", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cff7b62c05a411a7dfb3af5e8feb63090c00df4a/gcc%2Fada%2Fsinfo.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cff7b62c05a411a7dfb3af5e8feb63090c00df4a/gcc%2Fada%2Fsinfo.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsinfo.ads?ref=cff7b62c05a411a7dfb3af5e8feb63090c00df4a", "patch": "@@ -1106,9 +1106,11 @@ package Sinfo is\n    --  Corresponding_Generic_Association (Node5-Sem)\n    --    This field is defined for object declarations and object renaming\n    --    declarations. It is set for the declarations within an instance that\n-   --    map generic formals to their actuals. If set, the field points to\n-   --    a generic_association which is the original parent of the expression\n-   --    or name appearing in the declaration. This simplifies ASIS queries.\n+   --    map generic formals to their actuals. If set, the field points either\n+   --    to a copy of a default expression for an actual of mode IN or to a\n+   --    generic_association which is the original parent of the expression or\n+   --    name appearing in the declaration. This simplifies ASIS and GNATprove\n+   --    queries.\n \n    --  Corresponding_Integer_Value (Uint4-Sem)\n    --    This field is set in real literals of fixed-point types (it is not"}, {"sha": "5536abd8401afb8bb4e10cb043c78f951913f7ca", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cff7b62c05a411a7dfb3af5e8feb63090c00df4a/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cff7b62c05a411a7dfb3af5e8feb63090c00df4a/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=cff7b62c05a411a7dfb3af5e8feb63090c00df4a", "patch": "@@ -1,3 +1,7 @@\n+2018-11-14  Piotr Trojanek  <trojanek@adacore.com>\n+\n+\t* gnat.dg/generic_actuals.adb: New testcase.\n+\n 2018-11-14  Richard Biener  <rguenther@suse.de>\n \n \tPR tree-optimization/87974"}, {"sha": "aa06395a490435b72a68d900e7a246def1fdbb31", "filename": "gcc/testsuite/gnat.dg/generic_actuals.adb", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cff7b62c05a411a7dfb3af5e8feb63090c00df4a/gcc%2Ftestsuite%2Fgnat.dg%2Fgeneric_actuals.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cff7b62c05a411a7dfb3af5e8feb63090c00df4a/gcc%2Ftestsuite%2Fgnat.dg%2Fgeneric_actuals.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Fgeneric_actuals.adb?ref=cff7b62c05a411a7dfb3af5e8feb63090c00df4a", "patch": "@@ -0,0 +1,18 @@\n+--  { dg-do compile }\n+--  { dg-options \"-gnatd.F\" }\n+\n+procedure Generic_Actuals with SPARK_Mode is\n+   generic\n+      X : Integer;\n+      Y : Integer := 0;\n+   package Q with Initializes => (XX => X, YY => Y) is\n+      --  Both X and Y actuals can appear in the Initializes contract,\n+      --  i.e. the default expression of Y should not matter.\n+      XX : Integer := X;\n+      YY : Integer := Y;\n+   end Q;\n+\n+   package Inst is new Q (X => 0);\n+begin\n+   null;\n+end Generic_Actuals;"}]}