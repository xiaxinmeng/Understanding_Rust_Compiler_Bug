{"sha": "2941f691d916975ce707918ef42b22b928a4a11f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Mjk0MWY2OTFkOTE2OTc1Y2U3MDc5MThlZjQyYjIyYjkyOGE0YTExZg==", "commit": {"author": {"name": "Daniel Berlin", "email": "dberlin@dberlin.org", "date": "2006-11-24T01:26:26Z"}, "committer": {"name": "Daniel Berlin", "email": "dberlin@gcc.gnu.org", "date": "2006-11-24T01:26:26Z"}, "message": "tree-ssa-alias.c (tree_pointer_compare): New function.\n\n2006-11-23  Daniel Berlin  <dberlin@dberlin.org>\n\n\t* tree-ssa-alias.c (tree_pointer_compare): New function.\n\t(compact_name_tags): New function.\n\t(group_aliases): Call compact_name_tags.\n\nFrom-SVN: r119142", "tree": {"sha": "86bb8592c5decd4b23398697a4d2fa1efb913559", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/86bb8592c5decd4b23398697a4d2fa1efb913559"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2941f691d916975ce707918ef42b22b928a4a11f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2941f691d916975ce707918ef42b22b928a4a11f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2941f691d916975ce707918ef42b22b928a4a11f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2941f691d916975ce707918ef42b22b928a4a11f/comments", "author": {"login": "dberlin", "id": 324715, "node_id": "MDQ6VXNlcjMyNDcxNQ==", "avatar_url": "https://avatars.githubusercontent.com/u/324715?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dberlin", "html_url": "https://github.com/dberlin", "followers_url": "https://api.github.com/users/dberlin/followers", "following_url": "https://api.github.com/users/dberlin/following{/other_user}", "gists_url": "https://api.github.com/users/dberlin/gists{/gist_id}", "starred_url": "https://api.github.com/users/dberlin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dberlin/subscriptions", "organizations_url": "https://api.github.com/users/dberlin/orgs", "repos_url": "https://api.github.com/users/dberlin/repos", "events_url": "https://api.github.com/users/dberlin/events{/privacy}", "received_events_url": "https://api.github.com/users/dberlin/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "29f4e539a962b93b76afe3309af5cf9636f715c2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/29f4e539a962b93b76afe3309af5cf9636f715c2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/29f4e539a962b93b76afe3309af5cf9636f715c2"}], "stats": {"total": 78, "additions": 77, "deletions": 1}, "files": [{"sha": "5258b592c47e35873aa402e6ad869a8445e68d0f", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2941f691d916975ce707918ef42b22b928a4a11f/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2941f691d916975ce707918ef42b22b928a4a11f/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=2941f691d916975ce707918ef42b22b928a4a11f", "patch": "@@ -1,3 +1,9 @@\n+2006-11-23  Daniel Berlin  <dberlin@dberlin.org>\n+\n+\t* tree-ssa-alias.c (tree_pointer_compare): New function.\n+\t(compact_name_tags): New function.\n+\t(group_aliases): Call compact_name_tags.\n+\n 2006-11-23  Manuel Lopez-Ibanez  <manu@gcc.gnu.org>\n \n \t* real.h (real_isinteger): Declare."}, {"sha": "a12dca28025bbcb903b6ca08efe31070725eb230", "filename": "gcc/tree-ssa-alias.c", "status": "modified", "additions": 69, "deletions": 0, "changes": 69, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2941f691d916975ce707918ef42b22b928a4a11f/gcc%2Ftree-ssa-alias.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2941f691d916975ce707918ef42b22b928a4a11f/gcc%2Ftree-ssa-alias.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-alias.c?ref=2941f691d916975ce707918ef42b22b928a4a11f", "patch": "@@ -1436,6 +1436,73 @@ group_aliases_into (tree tag, bitmap tag_aliases, struct alias_info *ai)\n   tag_ann->may_aliases = NULL;\n }\n \n+/* Simple comparison function for qsort that sorts based on pointer\n+   address.  */\n+\n+static int\n+tree_pointer_compare (const void *pa, const void *pb)\n+{\n+  const tree a = *((const tree *)pa);\n+  const tree b = *((const tree *)pb);\n+  \n+  return b - a;\n+}\n+\n+\n+/* Replacing may aliases in name tags during grouping can up with the\n+   same SMT multiple times in the may_alias list.  It's quicker to\n+   just remove them post-hoc than it is to avoid them during\n+   replacement.  Thus, this routine sorts the may-alias list and\n+   removes duplicates.  */\n+\n+static void\n+compact_name_tags (void)\n+{\n+  referenced_var_iterator rvi;\n+  tree var;\n+\n+  FOR_EACH_REFERENCED_VAR (var, rvi)\n+    {\n+      if (TREE_CODE (var) == NAME_MEMORY_TAG)\n+\t{\n+\t  VEC(tree, gc) *aliases, *new_aliases;\n+\t  tree alias, last_alias;\n+\t  int i;\n+\t  \n+\t  last_alias = NULL;\n+\t  aliases = var_ann (var)->may_aliases;\n+\t  new_aliases = NULL;\n+\t  \n+\t  if (VEC_length (tree, aliases) > 1)\n+\t    {\n+\t      bool changed = false;\n+\t      qsort (VEC_address (tree, aliases), VEC_length (tree, aliases),\n+\t\t     sizeof (tree), tree_pointer_compare);\n+\t      \n+\t      for (i = 0; VEC_iterate (tree, aliases, i, alias); i++)\n+\t\t{\n+\t\t  if (alias == last_alias)\n+\t\t    {\n+\t\t      changed = true;\n+\t\t      continue;\n+\t\t    }\n+\t\t  \n+\t\t  VEC_safe_push (tree, gc, new_aliases, alias);\n+\t\t  last_alias = alias;\n+\t\t}\n+\n+\t      /* Only replace the array if something has changed.  */\n+\t      if (changed)\n+\t\t{\n+\t\t  VEC_free (tree, gc, aliases);\n+\t\t  var_ann (var)->may_aliases = new_aliases;\n+\t\t}\n+\t      else\n+\t\tVEC_free (tree, gc, new_aliases);\n+\t    }\n+\t}\n+    }\n+}\n \n /* Group may-aliases sets to reduce the number of virtual operands due\n    to aliasing.\n@@ -1597,6 +1664,8 @@ group_aliases (struct alias_info *ai)\n \t}\n     }\n \n+  compact_name_tags ();\n+\n   if (dump_file)\n     fprintf (dump_file,\n \t     \"%s: Total number of aliased vops after grouping: %ld%s\\n\","}, {"sha": "4354b443cbabd2e9935e128f232a94391034ec4a", "filename": "gcc/tree-ssa-structalias.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2941f691d916975ce707918ef42b22b928a4a11f/gcc%2Ftree-ssa-structalias.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2941f691d916975ce707918ef42b22b928a4a11f/gcc%2Ftree-ssa-structalias.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-structalias.c?ref=2941f691d916975ce707918ef42b22b928a4a11f", "patch": "@@ -121,7 +121,8 @@ Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA\n   Direct constraints are ADDRESSOF constraints that require no extra\n   processing, such as P = &Q\n   Copy constraints are those of the form P = Q.\n-  Complex constraints are all the constraints involving dereferences.\n+  Complex constraints are all the constraints involving dereferences\n+  and offsets (including offsetted copies).\n   \n   3. All direct constraints of the form P = &Q are processed, such\n   that Q is added to Sol(P) "}]}