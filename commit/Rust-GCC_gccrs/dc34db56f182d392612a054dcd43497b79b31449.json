{"sha": "dc34db56f182d392612a054dcd43497b79b31449", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZGMzNGRiNTZmMTgyZDM5MjYxMmEwNTRkY2Q0MzQ5N2I3OWIzMTQ0OQ==", "commit": {"author": {"name": "Paul Brook", "email": "paul@codesourcery.com", "date": "2009-05-15T14:19:19Z"}, "committer": {"name": "Sandra Loosemore", "email": "sandra@gcc.gnu.org", "date": "2009-05-15T14:19:19Z"}, "message": "arm.c (neon_vector_mem_operand): Handle element/structure loads.\n\n2009-05-15  Paul Brook  <paul@codesourcery.com>\n\t    Sandra Loosemore  <sandra@codesourcery.com>\n\n\tgcc/\n\t* config/arm/arm.c (neon_vector_mem_operand): Handle element/structure\n\tloads.  Allow PRE_DEC.\n\t(output_move_neon): Handle PRE_DEC.\n\t(arm_print_operand): Add 'A' for neon structure loads.\n\t* config/arm/arm-protos.h (neon_vector_mem_operand): Update prototype.\n\t* config/arm/neon.md (neon_mov): Update comment.\n\t* config/arm/constraints.md (Un, Us): Update neon_vector_mem_operand\n\tcalls.\n\t(Um): New constraint.\n\nCo-Authored-By: Sandra Loosemore <sandra@codesourcery.com>\n\nFrom-SVN: r147577", "tree": {"sha": "9ca5af137a2e8e7ec77fa9f97c7945d69a326b0b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9ca5af137a2e8e7ec77fa9f97c7945d69a326b0b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/dc34db56f182d392612a054dcd43497b79b31449", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dc34db56f182d392612a054dcd43497b79b31449", "html_url": "https://github.com/Rust-GCC/gccrs/commit/dc34db56f182d392612a054dcd43497b79b31449", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dc34db56f182d392612a054dcd43497b79b31449/comments", "author": null, "committer": null, "parents": [{"sha": "1d405d7b41e3b5e2db036567b32689a785ab2d14", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1d405d7b41e3b5e2db036567b32689a785ab2d14", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1d405d7b41e3b5e2db036567b32689a785ab2d14"}], "stats": {"total": 83, "additions": 62, "deletions": 21}, "files": [{"sha": "b96b06b019044e7c91d4b8d7b9cd82e54e71ae0a", "filename": "gcc/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dc34db56f182d392612a054dcd43497b79b31449/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dc34db56f182d392612a054dcd43497b79b31449/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=dc34db56f182d392612a054dcd43497b79b31449", "patch": "@@ -1,3 +1,17 @@\n+2009-05-15  Paul Brook  <paul@codesourcery.com>\n+\t    Sandra Loosemore  <sandra@codesourcery.com>\n+\n+\tgcc/\n+\t* config/arm/arm.c (neon_vector_mem_operand): Handle element/structure\n+\tloads.  Allow PRE_DEC.\n+\t(output_move_neon): Handle PRE_DEC.\n+\t(arm_print_operand): Add 'A' for neon structure loads.\n+\t* config/arm/arm-protos.h (neon_vector_mem_operand): Update prototype.\n+\t* config/arm/neon.md (neon_mov): Update comment.\n+\t* config/arm/constraints.md (Un, Us): Update neon_vector_mem_operand\n+\tcalls.\n+\t(Um): New constraint.\n+\n 2009-05-15  Jan Hubicka  <jh@suse.cz>\n \n \tRevert the following patch until testsuite fallout is fixed:"}, {"sha": "857d575e5d3504b05567977bc1f5e7d948bbc91a", "filename": "gcc/config/arm/arm-protos.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dc34db56f182d392612a054dcd43497b79b31449/gcc%2Fconfig%2Farm%2Farm-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dc34db56f182d392612a054dcd43497b79b31449/gcc%2Fconfig%2Farm%2Farm-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm-protos.h?ref=dc34db56f182d392612a054dcd43497b79b31449", "patch": "@@ -84,7 +84,7 @@ extern bool arm_cannot_force_const_mem (rtx);\n \n extern int cirrus_memory_offset (rtx);\n extern int arm_coproc_mem_operand (rtx, bool);\n-extern int neon_vector_mem_operand (rtx, bool);\n+extern int neon_vector_mem_operand (rtx, int);\n extern int neon_struct_mem_operand (rtx);\n extern int arm_no_early_store_addr_dep (rtx, rtx);\n extern int arm_no_early_alu_shift_dep (rtx, rtx);"}, {"sha": "8579ce4d336d24174ca286e5c622fc8187c34e37", "filename": "gcc/config/arm/arm.c", "status": "modified", "additions": 36, "deletions": 16, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dc34db56f182d392612a054dcd43497b79b31449/gcc%2Fconfig%2Farm%2Farm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dc34db56f182d392612a054dcd43497b79b31449/gcc%2Fconfig%2Farm%2Farm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.c?ref=dc34db56f182d392612a054dcd43497b79b31449", "patch": "@@ -6961,10 +6961,13 @@ arm_coproc_mem_operand (rtx op, bool wb)\n }\n \n /* Return TRUE if OP is a memory operand which we can load or store a vector\n-   to/from. If CORE is true, we're moving from ARM registers not Neon\n-   registers.  */\n+   to/from. TYPE is one of the following values:\n+    0 - Vector load/stor (vldr)\n+    1 - Core registers (ldm)\n+    2 - Element/structure loads (vld1)\n+ */\n int\n-neon_vector_mem_operand (rtx op, bool core)\n+neon_vector_mem_operand (rtx op, int type)\n {\n   rtx ind;\n \n@@ -6997,23 +7000,15 @@ neon_vector_mem_operand (rtx op, bool core)\n     return arm_address_register_rtx_p (ind, 0);\n \n   /* Allow post-increment with Neon registers.  */\n-  if (!core && GET_CODE (ind) == POST_INC)\n+  if (type != 1 && (GET_CODE (ind) == POST_INC || GET_CODE (ind) == PRE_DEC))\n     return arm_address_register_rtx_p (XEXP (ind, 0), 0);\n \n-#if 0\n-  /* FIXME: We can support this too if we use VLD1/VST1.  */\n-  if (!core\n-      && GET_CODE (ind) == POST_MODIFY\n-      && arm_address_register_rtx_p (XEXP (ind, 0), 0)\n-      && GET_CODE (XEXP (ind, 1)) == PLUS\n-      && rtx_equal_p (XEXP (XEXP (ind, 1), 0), XEXP (ind, 0)))\n-    ind = XEXP (ind, 1);\n-#endif\n+  /* FIXME: vld1 allows register post-modify.  */\n \n   /* Match:\n      (plus (reg)\n           (const)).  */\n-  if (!core\n+  if (type == 0\n       && GET_CODE (ind) == PLUS\n       && GET_CODE (XEXP (ind, 0)) == REG\n       && REG_MODE_OK_FOR_BASE_P (XEXP (ind, 0), VOIDmode)\n@@ -7083,7 +7078,7 @@ coproc_secondary_reload_class (enum machine_mode mode, rtx x, bool wb)\n   if (TARGET_NEON\n       && (GET_MODE_CLASS (mode) == MODE_VECTOR_INT\n           || GET_MODE_CLASS (mode) == MODE_VECTOR_FLOAT)\n-      && neon_vector_mem_operand (x, FALSE))\n+      && neon_vector_mem_operand (x, 0))\n      return NO_REGS;\n \n   if (arm_coproc_mem_operand (x, wb) || s_register_operand (x, mode))\n@@ -10799,7 +10794,7 @@ output_move_double (rtx *operands)\n }\n \n /* Output a move, load or store for quad-word vectors in ARM registers.  Only\n-   handles MEMs accepted by neon_vector_mem_operand with CORE=true.  */\n+   handles MEMs accepted by neon_vector_mem_operand with TYPE=1.  */\n \n const char *\n output_move_quad (rtx *operands)\n@@ -10995,6 +10990,13 @@ output_move_neon (rtx *operands)\n       ops[1] = reg;\n       break;\n \n+    case PRE_DEC:\n+      /* FIXME: We should be using vld1/vst1 here in BE mode?  */\n+      templ = \"v%smdb%%?\\t%%0!, %%h1\";\n+      ops[0] = XEXP (addr, 0);\n+      ops[1] = reg;\n+      break;\n+    \n     case POST_MODIFY:\n       /* FIXME: Not currently enabled in neon_vector_mem_operand.  */\n       gcc_unreachable ();\n@@ -13859,6 +13861,24 @@ arm_print_operand (FILE *stream, rtx x, int code)\n       }\n       return;\n \n+    /* Memory operand for vld1/vst1 instruction.  */\n+    case 'A':\n+      {\n+\trtx addr;\n+\tbool postinc = FALSE;\n+\tgcc_assert (GET_CODE (x) == MEM);\n+\taddr = XEXP (x, 0);\n+\tif (GET_CODE (addr) == POST_INC)\n+\t  {\n+\t    postinc = 1;\n+\t    addr = XEXP (addr, 0);\n+\t  }\n+\tasm_fprintf (stream, \"[%r]\", REGNO (addr));\n+\tif (postinc)\n+\t  fputs(\"!\", stream);\n+      }\n+      return;\n+\n     default:\n       if (x == 0)\n \t{"}, {"sha": "6cefa4ee72ea022a261c0d216c9db2821fed6852", "filename": "gcc/config/arm/constraints.md", "status": "modified", "additions": 10, "deletions": 3, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dc34db56f182d392612a054dcd43497b79b31449/gcc%2Fconfig%2Farm%2Fconstraints.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dc34db56f182d392612a054dcd43497b79b31449/gcc%2Fconfig%2Farm%2Fconstraints.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Fconstraints.md?ref=dc34db56f182d392612a054dcd43497b79b31449", "patch": "@@ -32,7 +32,7 @@\n ;; in ARM/Thumb-2 state: Da, Db, Dc, Dn, Dl, DL, Dv\n \n ;; The following memory constraints have been used:\n-;; in ARM/Thumb-2 state: Q, Ut, Uv, Uy, Un, Us\n+;; in ARM/Thumb-2 state: Q, Ut, Uv, Uy, Un, Um, Us\n ;; in ARM state: Uq\n \n \n@@ -213,18 +213,25 @@\n       (match_test \"TARGET_32BIT && arm_coproc_mem_operand (op, TRUE)\")))\n \n (define_memory_constraint \"Un\"\n+ \"@internal\n+  In ARM/Thumb-2 state a valid address for Neon doubleword vector\n+  load/store instructions.\"\n+ (and (match_code \"mem\")\n+      (match_test \"TARGET_32BIT && neon_vector_mem_operand (op, 0)\")))\n+\n+(define_memory_constraint \"Um\"\n  \"@internal\n   In ARM/Thumb-2 state a valid address for Neon element and structure\n   load/store instructions.\"\n  (and (match_code \"mem\")\n-      (match_test \"TARGET_32BIT && neon_vector_mem_operand (op, FALSE)\")))\n+      (match_test \"TARGET_32BIT && neon_vector_mem_operand (op, 2)\")))\n \n (define_memory_constraint \"Us\"\n  \"@internal\n   In ARM/Thumb-2 state a valid address for non-offset loads/stores of\n   quad-word values in four ARM registers.\"\n  (and (match_code \"mem\")\n-      (match_test \"TARGET_32BIT && neon_vector_mem_operand (op, TRUE)\")))\n+      (match_test \"TARGET_32BIT && neon_vector_mem_operand (op, 1)\")))\n \n (define_memory_constraint \"Uq\"\n  \"@internal"}, {"sha": "f4ba7e7349c23b8e9539e2fd85e7ce977e238547", "filename": "gcc/config/arm/neon.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dc34db56f182d392612a054dcd43497b79b31449/gcc%2Fconfig%2Farm%2Fneon.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dc34db56f182d392612a054dcd43497b79b31449/gcc%2Fconfig%2Farm%2Fneon.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Fneon.md?ref=dc34db56f182d392612a054dcd43497b79b31449", "patch": "@@ -481,7 +481,7 @@\n \n   /* FIXME: If the memory layout is changed in big-endian mode, output_move_vfp\n      below must be changed to output_move_neon (which will use the\n-     element/structure loads/stores), and the constraint changed to 'Un' instead\n+     element/structure loads/stores), and the constraint changed to 'Um' instead\n      of 'Uv'.  */\n \n   switch (which_alternative)"}]}