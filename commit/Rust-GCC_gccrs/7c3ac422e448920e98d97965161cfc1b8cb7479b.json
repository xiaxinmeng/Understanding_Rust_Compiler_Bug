{"sha": "7c3ac422e448920e98d97965161cfc1b8cb7479b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2MzYWM0MjJlNDQ4OTIwZTk4ZDk3OTY1MTYxY2ZjMWI4Y2I3NDc5Yg==", "commit": {"author": {"name": "Zack Weinberg", "email": "zack@gcc.gnu.org", "date": "2004-04-09T22:23:42Z"}, "committer": {"name": "Zack Weinberg", "email": "zack@gcc.gnu.org", "date": "2004-04-09T22:23:42Z"}, "message": "re PR target/14887 (compat/struct-ret-19 failure on ia64-hpux - argument passing bug)\n\n\tPR 14887\n\t* config/ia64/hpux.h (MEMBER_TYPE_FORCES_BLK): Look only at\n\tmode argument.\n\t* config/ia64/ia64.c (ia64_hpux_file_end): Check\n\tTREE_SYMBOL_REFERENCED on DECL_ASSEMBLER_NAME, not DECL_NAME.\n\nFrom-SVN: r80571", "tree": {"sha": "0a1f591f589603d8d8cc1a29674820c9875564f5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0a1f591f589603d8d8cc1a29674820c9875564f5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7c3ac422e448920e98d97965161cfc1b8cb7479b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7c3ac422e448920e98d97965161cfc1b8cb7479b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7c3ac422e448920e98d97965161cfc1b8cb7479b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7c3ac422e448920e98d97965161cfc1b8cb7479b/comments", "author": null, "committer": null, "parents": [{"sha": "0b24db885b67a354b09746a9af49a5b4333cc249", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0b24db885b67a354b09746a9af49a5b4333cc249", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0b24db885b67a354b09746a9af49a5b4333cc249"}], "stats": {"total": 182, "additions": 95, "deletions": 87}, "files": [{"sha": "44791b520a55f7bb27797c3f97433b1eeaedab2d", "filename": "gcc/ChangeLog", "status": "modified", "additions": 89, "deletions": 81, "changes": 170, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7c3ac422e448920e98d97965161cfc1b8cb7479b/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7c3ac422e448920e98d97965161cfc1b8cb7479b/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=7c3ac422e448920e98d97965161cfc1b8cb7479b", "patch": "@@ -1,3 +1,11 @@\n+2004-04-09  Zack Weinberg  <zack@codesourcery.com>\n+\n+\tPR 14887\n+\t* config/ia64/hpux.h (MEMBER_TYPE_FORCES_BLK): Look only at\n+\tmode argument.\n+\t* config/ia64/ia64.c (ia64_hpux_file_end): Check\n+\tTREE_SYMBOL_REFERENCED on DECL_ASSEMBLER_NAME, not DECL_NAME.\n+\n 2004-04-09  Roger Sayle  <roger@eyesopen.com>\n \n \t* simplify-rtx.c (mode_signbit_p): New function to check whether\n@@ -23,13 +31,13 @@\n \n 2004-04-09  Caroline Tice  <ctice@apple.com>\n \n-        * basic-block.h (struct edge_def):  Add new field, crossing_edge.\n+\t* basic-block.h (struct edge_def):  Add new field, crossing_edge.\n \t(struct basic_block_def):  Add new field, partition.\n \t(UNPARTITIONED, HOT_PARTITION, COLD_PARTITION):  New constant macro\n \tdefinitions.\n-\t(partition_hot_cold_basic_blocks): Add extern function \n+\t(partition_hot_cold_basic_blocks): Add extern function\n \tdeclaration.\n-        * bb-reorder.c (function.h, obstack.h, expr.h, regs.h):  Add four new \n+\t* bb-reorder.c (function.h, obstack.h, expr.h, regs.h):  Add four new\n \tinclude\tstatements.\n \t(N_ROUNDS): Increase the maximum number of rounds by 1.\n \t(branch_threshold): Add array value for new round.\n@@ -50,19 +58,19 @@\n \tbasic blocks.\n \t(find_traces_1_round): Add a parameter.  Modify to push all cold blocks,\n \tand only cold blocks, into the last (extra) round of collecting traces.\n-\t(better_edge_p): Add a parameter.  Modify to favor non-crossing edges \n+\t(better_edge_p): Add a parameter.  Modify to favor non-crossing edges\n \tover crossing edges.\n-\t(bb_to_key):  Add code to correctly identify cold blocks when \n+\t(bb_to_key):  Add code to correctly identify cold blocks when\n \tdoing partitioning.\n \t(connect_traces): Modify to connect all the non-cold traces first, then\n \tgo back and connect up all the cold traces.\n \t(reorder_basic_blocks):  Add call to add_unlikely_executed_notes.\n \t* cfg.c (entry_exit_blocks): Add initialization for partition field in\n \tentry and exit blocks.\n-\t* cfgbuild.c (make_edges): Update current_function_has_computed_jump  \n+\t* cfgbuild.c (make_edges): Update current_function_has_computed_jump\n \tif we are doing hot/cold partitioning.\n \t* cfgcleanup.c (cfglayout.h): Add new include statement.\n-\t(try_simplify_condjump): Modify to not attempt on blocks with jumps \n+\t(try_simplify_condjump): Modify to not attempt on blocks with jumps\n \tthat cross section boundaries.\n \t(try_forward_edges): Likewise.\n \t(merge_blocks_move_predecessor_nojumps): Likewise.\n@@ -75,15 +83,15 @@\n \t(try_optimize_cfg): Likewise.\n \t* cfghooks.c (tidy_fallthru_edges): Modify to not remove indirect\n \tjumps that cross section boundaries.\n-        * cfglayout.c (flags.h): Add new include statement.\n+\t* cfglayout.c (flags.h): Add new include statement.\n \t(update_unlikely_executed_notes):  New function.\n-\t(fixup_reorder_chain):  Add code so when a new jumping basic block is \n-        added, it's UNLIKELY_EXECUTED_CODE and REG_CROSSING_JUMP notes are \n+\t(fixup_reorder_chain):  Add code so when a new jumping basic block is\n+\tadded, it's UNLIKELY_EXECUTED_CODE and REG_CROSSING_JUMP notes are\n \tupdated appropriately.\n \t(duplicate_insn_chain):  Add code to duplicate the new NOTE insn\n \tintroduced by this optimization.\n-        * cfglayout.h (scan_ahead_for_unlikely_executed_note):  Add new \n-        extern function declaration.\n+\t* cfglayout.h (scan_ahead_for_unlikely_executed_note):  Add new\n+\textern function declaration.\n \t* cfgrtl.c (can_delete_note_p):  Add NOTE_INSN_UNLIKELY_EXECUTED_CODE to\n \tlist of notes that can be deleted.\n \t(create_basic_block_structure):  Add initialization for partition field.\n@@ -92,105 +100,105 @@\n \t(try_redirect_by_replacing_jump):  Modify to not attempt on jumps that\n \tcross section boundaries.\n \t(commit_one_edge_insertion): Add code so newly created basic block\n-\tends up in correct (hot or cold) section.  Modify to disallow \n+\tends up in correct (hot or cold) section.  Modify to disallow\n \tinsertions before NOTE_INSN_UNLIKELY_EXECUTED_CODE notes.\n \t(rtl_verify_flow_info_1):  Add code to verify that no fall_thru edge\n \tcrosses section boundaries.\n \t(cfg_layout_can_merge_blocks_p): Modify to test blocks for jumps that\n \tcross section boundaries.\n \t(force_nonfallthru_and_redirect): Modify to make sure new basic block\n \tends up in correct section, with correct notes attached.\n-        * common.opt (freorder-blocks-and-partition):  Add new flag for this \n-        optimization.\n-        * dbxout.c (dbx_function_end):  Add code to make sure scope labels at\n-        the end of functions are written into the correct (hot or cold) \n-        section.\n+\t* common.opt (freorder-blocks-and-partition):  Add new flag for this\n+\toptimization.\n+\t* dbxout.c (dbx_function_end):  Add code to make sure scope labels at\n+\tthe end of functions are written into the correct (hot or cold)\n+\tsection.\n \t(dbx_source_file): Add code so writing debug file information\n \tdoesn't incorrectly change sections.\n-        * defaults.h (NORMAL_TEXT_SECTION_NAME): New constant macro, for use\n+\t* defaults.h (NORMAL_TEXT_SECTION_NAME): New constant macro, for use\n \tin partitioning hot/cold basic blocks into separate sections.\n-\t(SECTION_FORMAT_STRING): New constant macro, for linux/i386 hot/cold \n+\t(SECTION_FORMAT_STRING): New constant macro, for linux/i386 hot/cold\n \tsection partitioning.\n \t(HAS_LONG_COND_BRANCH): New constant macro, indicating whether or not\n \tconditional branches can span all of memory.\n \t(HAS_LONG_UNCOND_BRANCH): New constant macro, indicationg whether or not\n \tunconditional branches can span all of memory.\n-        * final.c (scan_ahead_for_unlikely_executed_note):  New function.\n-\t(final_scan_insn):  Add code to check for NOTE instruction indicating \n-        whether basic block belongs in hot or cold section, and to make sure \n-        the current basic block is being written to the appropriate section.  \n-        Also added code to ensure that jump table basic blocks end up in the \n-        correct section.\n-        * flags.h (flag_reorder_blocks_and_partition):  New flag.\n+\t* final.c (scan_ahead_for_unlikely_executed_note):  New function.\n+\t(final_scan_insn):  Add code to check for NOTE instruction indicating\n+\twhether basic block belongs in hot or cold section, and to make sure\n+\tthe current basic block is being written to the appropriate section.\n+\tAlso added code to ensure that jump table basic blocks end up in the\n+\tcorrect section.\n+\t* flags.h (flag_reorder_blocks_and_partition):  New flag.\n \t* ifcvt.c (find_if_case_1):  Modify to not attempt if conversion if\n \tone of the branches has a jump that crosses between sections.\n \t(find_if_case_2): Likewise.\n-\t(ifcvt): Modify to not attempt to mark loop exit edges after \n+\t(ifcvt): Modify to not attempt to mark loop exit edges after\n \thot/cold partitioning has occurred.\n-        * opts.c (decode_options): Code to handle new flag, \n-        flag_reorder_blocks_and_partition; also to turn it off if\n+\t* opts.c (decode_options): Code to handle new flag,\n+\tflag_reorder_blocks_and_partition; also to turn it off if\n \tflag_exceptions is on.\n-\t(common_handle_option): Code to handle new flag, \n-        flag_reorder_blocks_and_partition.\n-        * output.h (unlikely_text_section): New extern function declaration.\n+\t(common_handle_option): Code to handle new flag,\n+\tflag_reorder_blocks_and_partition.\n+\t* output.h (unlikely_text_section): New extern function declaration.\n \t(in_unlikely_text_section): New extern function declaration.\n-\t* passes.c (rest_of_handle_stack_regs):  Add \n-\tflag_reorder_blocks_and_partition as an 'or' condition for calling \n+\t* passes.c (rest_of_handle_stack_regs):  Add\n+\tflag_reorder_blocks_and_partition as an 'or' condition for calling\n \treorder_basic_blocks.\n-\t(rest_of_handle_reorder_blocks):  Add flag_reorder_blocks_and_partition \n+\t(rest_of_handle_reorder_blocks):  Add flag_reorder_blocks_and_partition\n \tas an 'or' condition for calling reorder_basic_blocks.\n \t(rest_of_compilation):  Add call to partition_hot_cold_basic_blocks.\n-        * print-rtl.c (print_rtx): Add code for handling new note,\n-        NOTE_INSN_UNLIKELY_EXECUTED_CODE\n-        * rtl.c  (NOTE_INSN_UNLIKELY_EXECUTED_CODE): New note insn (see below).\n+\t* print-rtl.c (print_rtx): Add code for handling new note,\n+\tNOTE_INSN_UNLIKELY_EXECUTED_CODE\n+\t* rtl.c  (NOTE_INSN_UNLIKELY_EXECUTED_CODE): New note insn (see below).\n \t(REG_CROSSING_JUMP): New kind of reg_note, to mark jumps that\n \tcross between section boundaries.\n-        * rtl.h (NOTE_INSN_UNLIKELY_EXECUTED_CODE):  New note instruction, \n-        indicating the basic block containing it belongs in the cold section.\n+\t* rtl.h (NOTE_INSN_UNLIKELY_EXECUTED_CODE):  New note instruction,\n+\tindicating the basic block containing it belongs in the cold section.\n \t(REG_CROSSING_JUMP): New type of reg_note, to mark jumps that cross\n \tbetween hot and cold sections.\n-        * toplev.c (flag_reorder_blocks_and_partition):  Add code to \n-        initialize this flag, and to tie it to the command-line option \n-        freorder-blocks-and-partition.\n-        * varasm.c (cfglayout.h):  Add new include statement.\n-\t(unlikely_section_label_printed):  New global variable, used for \n-        determining when to output section name labels for cold sections.\n+\t* toplev.c (flag_reorder_blocks_and_partition):  Add code to\n+\tinitialize this flag, and to tie it to the command-line option\n+\tfreorder-blocks-and-partition.\n+\t* varasm.c (cfglayout.h):  Add new include statement.\n+\t(unlikely_section_label_printed):  New global variable, used for\n+\tdetermining when to output section name labels for cold sections.\n \t(in_section):  Add in_unlikely_executed_text to enum data structure.\n \t(text_section):  Modify code to use SECTION_FORMAT_STRING and\n \tNORMAL_TEXT_SECTION_NAME macros.\n \t(unlikely_text_section):  New function.\n \t(in_unlikely_text_section):  New function.\n-\t(function_section):  Add code to make sure beginning of function is \n-        written into correct section (hot or cold).\n-\t(assemble_start_function):  Add code to make sure stuff is written to \n-        the correct section.\n-\t(assemble_zeros):  Add in_unlikely_text_section as an 'or' condition \n-        to an if statement that was checking 'in_text_section'.\n-\t(assemble_variable):  Add 'in_unlikely_text_section' as an 'or' \n-        condition to an if statement that was checking 'in_text_section'.\n-        (default_section_type_flags_1):  Add check: if in cold section \n-        flags = SECTION_CODE.\n+\t(function_section):  Add code to make sure beginning of function is\n+\twritten into correct section (hot or cold).\n+\t(assemble_start_function):  Add code to make sure stuff is written to\n+\tthe correct section.\n+\t(assemble_zeros):  Add in_unlikely_text_section as an 'or' condition\n+\tto an if statement that was checking 'in_text_section'.\n+\t(assemble_variable):  Add 'in_unlikely_text_section' as an 'or'\n+\tcondition to an if statement that was checking 'in_text_section'.\n+\t(default_section_type_flags_1):  Add check: if in cold section\n+\tflags = SECTION_CODE.\n \t* config/darwin.c (darwin_asm_named_section):  Modify to use\n \tSECTION_FORMAT_STRING if we are partitioning hot/cold blocks.\n-\t* config/i386/i386.h (HAS_LONG_COND_BRANCH): Defined this macro \n+\t* config/i386/i386.h (HAS_LONG_COND_BRANCH): Defined this macro\n \tspecifically for the i386.\n \t(HAS_LONG_UNCOND_BRANCH):  Defined this macro specifically for the i386.\n-        * config/rs6000/darwin.h (UNLIKELY_EXECUTED_TEXT_SECTION_NAME): Change\n+\t* config/rs6000/darwin.h (UNLIKELY_EXECUTED_TEXT_SECTION_NAME): Change\n \ttext string to something more informative.\n \t(NORMAL_TEXT_SECTION_NAME): Add new definition.\n \t(SECTION_FORMAT_STRING):  Add new definition.\n-        * config/rs6000/rs6000.c (rs6000_assemble_integer):  Add \n-        '!in_unlikely_text_section' as an 'and' condition to an if statement \n-        that was already checking '!in_text_section'.\n-        * config/rs6000/sysv4.h (HOT_TEXT_SECTION_NAME,NORMAL_TEXT_SECTION_NAME,\n-        UNLIKELY_EXECUTED_TEXT_SECTION_NAME,SECTION_FORMAT_STRING): Make\n-        sure these are properly defined for linux on ppc.\n-        * doc/invoke.texi  (freorder-blocks-and-partition): Add documentation \n-        for this new flag.\n+\t* config/rs6000/rs6000.c (rs6000_assemble_integer):  Add\n+\t'!in_unlikely_text_section' as an 'and' condition to an if statement\n+\tthat was already checking '!in_text_section'.\n+\t* config/rs6000/sysv4.h (HOT_TEXT_SECTION_NAME,NORMAL_TEXT_SECTION_NAME,\n+\tUNLIKELY_EXECUTED_TEXT_SECTION_NAME,SECTION_FORMAT_STRING): Make\n+\tsure these are properly defined for linux on ppc.\n+\t* doc/invoke.texi  (freorder-blocks-and-partition): Add documentation\n+\tfor this new flag.\n \t* doc/rtl.texi (REG_CROSSING_JUMP):  Add documentation for new\n \treg_note.\n-        * doc/tm.texi (NORMAL_TEXT_SECTION_NAME, SECTION_FORMAT_STRING, \n-\tHAS_LONG_COND_BRANCH, HAS_LONG_UNCOND_BRANCH): Add documentation for \n+\t* doc/tm.texi (NORMAL_TEXT_SECTION_NAME, SECTION_FORMAT_STRING,\n+\tHAS_LONG_COND_BRANCH, HAS_LONG_UNCOND_BRANCH): Add documentation for\n \tthese new macros.\n \n 2004-04-08  Roger Sayle  <roger@eyesopen.com>\n@@ -319,7 +327,7 @@\n \n \t* gcc.c (main): Move 'break' in main loops (on an error)\n \tto wait until error processing has occurred.\n-\t\n+\n 2004-04-06  Nathanael Nerode  <neroden@gcc.gnu.org>\n \n \t* config.gcc: Stop changing enable_threads midstream.\n@@ -366,7 +374,7 @@\n \n \tPR 14467\n \t* config/darwin.h (LINK_COMMAND_SPEC): Use c++filt instead of c++filt3.\n-\t\n+\n 2004-04-06  John David Anglin  <dave.anglin@nrc-cnrc.gc.ca>\n \n \t* doc/install.texi: Update HP-UX 11 installation procedure.\n@@ -392,8 +400,8 @@\n \t* gcc.c (combine_flag): New global variable, for new driver option.\n \t(struct compiler): Add two new fields, to be used when\n \tcombining multiple input files in a single pass (IMA).\n-\t(default_compilers):  Add values for the new fields to all \n-\tcompiler entries. Modify the \"@c\" compiler entry for doing IMA \n+\t(default_compilers):  Add values for the new fields to all\n+\tcompiler entries. Modify the \"@c\" compiler entry for doing IMA\n \tproperly with \"-save-temps\" and the \"combine\" flag.\n \t(option_map):  Add new driver option, \"--combine\", to tell driver\n \tto pass multiple input files to compiler at one time.\n@@ -405,16 +413,16 @@\n \tfor new \"combine\" option; remove assignment to combine_inputs.\n \t(do_spec_1):  Modify to deal with IMA better.\n \t(main): Make variable 'lang_n_infiles' local to entire function\n-\trather than to a single block.  Use flag combine_flag to \n-\tdetermine whether to do IMA or not; Modify loop initializing \n+\trather than to a single block.  Use flag combine_flag to\n+\tdetermine whether to do IMA or not; Modify loop initializing\n \tinfiles to deal properly with linker files.\n \tAdd code for doing preprocessing in presence of\n \tIMA with \"-save-temps\" flag.  Modify \"main\" loop to handle\n \tmultiple input files, in multiple languages, with or without\n \tpreprocessing,  gracefully.\n \t* toplev.c (set_src_pwd): Modify to not complain if attempting to\n \tre-set it to same directory it's previously been set to (avoid\n-\tirritating, meaningless warning messages when doing IMA with \n+\tirritating, meaningless warning messages when doing IMA with\n \tsave-temps).\n \t* doc/invoke.texi: Add \"-combine\" to list of Overall Options;\n \tremove documentation about IMA that is no longer accurate; Add\n@@ -527,7 +535,7 @@\n \t* config/i386/i386.h (TARGET_NOCONA): New macro.\n \t(TARGET_CPU_CPP_BUILTINS): Add code for Nocona.\n \t(processor_type): Add PROCESSOR_NOCONA.\n-\t\n+\n \t* config/i386/i386.md (cpu): Add nocona to the attribute values.\n \n \t* config/i386/i386.c (nocona_cost): New variable.\n@@ -544,7 +552,7 @@\n \tSet up PROCESSOR_NOCONA for Nocona entry in processor_alias_table.\n \t(incdec_operand): Prevent inc/dec generation for Nocona too.\n \t(ix86_issue_rate): Add PROCESSOR_NOCONA.\n-\t\n+\n 2004-04-01  Andrew Pinski  <pinskia@physics.uc.edu>\n \n \t* rtlanal.c (find_reg_note): Manually\n@@ -645,9 +653,9 @@\n \n 2004-04-01  Serge Belyshev  <1319@bot.ru>\n \n-        PR target/14702\n-        * config/i386/i386.md: fix source operand constraints in\n-        mmx_pshufw, sse2_pshufd, sse2_pshuflw, sse2_pshufhw\n+\tPR target/14702\n+\t* config/i386/i386.md: fix source operand constraints in\n+\tmmx_pshufw, sse2_pshufd, sse2_pshuflw, sse2_pshufhw\n \n 2004-04-01  Waldek Hebisch  <hebisch@math.uni.wroc.pl>\n "}, {"sha": "2bd077efe3b8996988ba4756b2bafdf3a58922a7", "filename": "gcc/config/ia64/hpux.h", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7c3ac422e448920e98d97965161cfc1b8cb7479b/gcc%2Fconfig%2Fia64%2Fhpux.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7c3ac422e448920e98d97965161cfc1b8cb7479b/gcc%2Fconfig%2Fia64%2Fhpux.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fia64%2Fhpux.h?ref=7c3ac422e448920e98d97965161cfc1b8cb7479b", "patch": "@@ -112,13 +112,13 @@ do {\t\t\t\t\t\t\t\\\n   (MASK_DWARF2_ASM | MASK_BIG_ENDIAN | MASK_ILP32 | MASK_INLINE_FLOAT_DIV_THR)\n \n /* This needs to be set to force structure arguments with a single\n-   field to be treated as structures and not as the type of their\n-   field.  Without this a structure with a single char will be\n-   returned just like a char variable and that is wrong on HP-UX\n-   IA64.  */\n+   integer field to be treated as structures and not as the type of\n+   their field.  Without this a structure with a single char will be\n+   returned just like a char variable, instead of being returned at the\n+   top of the register as specified for big-endian IA64.  */\n \n #define MEMBER_TYPE_FORCES_BLK(FIELD, MODE) \\\n-  (TREE_CODE (TREE_TYPE (FIELD)) != REAL_TYPE || MODE == TFmode)\n+  (!FLOAT_MODE_P (MODE) || (MODE) == TFmode)\n \n /* ASM_OUTPUT_EXTERNAL_LIBCALL defaults to just a globalize_label call,\n    but that doesn't put out the @function type information which causes"}, {"sha": "e27ca031fb41aa55864edbbaa6e35961663078aa", "filename": "gcc/config/ia64/ia64.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7c3ac422e448920e98d97965161cfc1b8cb7479b/gcc%2Fconfig%2Fia64%2Fia64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7c3ac422e448920e98d97965161cfc1b8cb7479b/gcc%2Fconfig%2Fia64%2Fia64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fia64%2Fia64.c?ref=7c3ac422e448920e98d97965161cfc1b8cb7479b", "patch": "@@ -8732,7 +8732,7 @@ ia64_hpux_file_end (void)\n   for (p = extern_func_head; p; p = p->next)\n     {\n       tree decl = p->decl;\n-      tree id = DECL_NAME (decl);\n+      tree id = DECL_ASSEMBLER_NAME (decl);\n \n       if (!id)\n \tabort ();"}]}