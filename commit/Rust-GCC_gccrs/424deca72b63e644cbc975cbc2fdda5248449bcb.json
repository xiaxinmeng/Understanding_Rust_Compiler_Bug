{"sha": "424deca72b63e644cbc975cbc2fdda5248449bcb", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDI0ZGVjYTcyYjYzZTY0NGNiYzk3NWNiYzJmZGRhNTI0ODQ0OWJjYg==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2021-01-13T18:27:53Z"}, "committer": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2021-01-15T18:57:01Z"}, "message": "c++: Fix copy elision for base initialization\n\nWhile working on PR98642 I noticed that in this testcase we were eliding the\ncopy, calling the complete default constructor to initialize the B base\nsubobject, and therefore wrongly initializing the non-existent A subobject\nof B.  The test doesn't care whether the copy is elided or not, but checks\nthat we are actually calling a base constructor for B.\n\nThe patch preserves the elision, but changes the initializer to call the\nbase constructor instead of the complete constructor.\n\ngcc/cp/ChangeLog:\n\n\t* call.c (base_ctor_for, make_base_init_ok): New.\n\t(build_over_call): Use make_base_init_ok.\n\ngcc/testsuite/ChangeLog:\n\n\t* g++.dg/cpp1z/elide4.C: New test.", "tree": {"sha": "89767d1681fe4b2357093bb87e013dbbaaf179ca", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/89767d1681fe4b2357093bb87e013dbbaaf179ca"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/424deca72b63e644cbc975cbc2fdda5248449bcb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/424deca72b63e644cbc975cbc2fdda5248449bcb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/424deca72b63e644cbc975cbc2fdda5248449bcb", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/424deca72b63e644cbc975cbc2fdda5248449bcb/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ad2603433853129e847cade5e269c6a5f889a020", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ad2603433853129e847cade5e269c6a5f889a020", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ad2603433853129e847cade5e269c6a5f889a020"}], "stats": {"total": 82, "additions": 82, "deletions": 0}, "files": [{"sha": "c194af74612cd323540aae66c528a146bebdd4a6", "filename": "gcc/cp/call.c", "status": "modified", "additions": 58, "deletions": 0, "changes": 58, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/424deca72b63e644cbc975cbc2fdda5248449bcb/gcc%2Fcp%2Fcall.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/424deca72b63e644cbc975cbc2fdda5248449bcb/gcc%2Fcp%2Fcall.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcall.c?ref=424deca72b63e644cbc975cbc2fdda5248449bcb", "patch": "@@ -8425,6 +8425,60 @@ call_copy_ctor (tree a, tsubst_flags_t complain)\n   return r;\n }\n \n+/* Return the base constructor corresponding to COMPLETE_CTOR or NULL_TREE.  */\n+\n+static tree\n+base_ctor_for (tree complete_ctor)\n+{\n+  tree clone;\n+  FOR_EACH_CLONE (clone, DECL_CLONED_FUNCTION (complete_ctor))\n+    if (DECL_BASE_CONSTRUCTOR_P (clone))\n+      return clone;\n+  return NULL_TREE;\n+}\n+\n+/* Try to make EXP suitable to be used as the initializer for a base subobject,\n+   and return whether we were successful.  EXP must have already been cleared\n+   by unsafe_copy_elision_p.  */\n+\n+static bool\n+make_base_init_ok (tree exp)\n+{\n+  if (TREE_CODE (exp) == TARGET_EXPR)\n+    exp = TARGET_EXPR_INITIAL (exp);\n+  while (TREE_CODE (exp) == COMPOUND_EXPR)\n+    exp = TREE_OPERAND (exp, 1);\n+  if (TREE_CODE (exp) == COND_EXPR)\n+    {\n+      bool ret = make_base_init_ok (TREE_OPERAND (exp, 2));\n+      if (tree op1 = TREE_OPERAND (exp, 1))\n+\t{\n+\t  bool r1 = make_base_init_ok (op1);\n+\t  /* If unsafe_copy_elision_p was false, the arms should match.  */\n+\t  gcc_assert (r1 == ret);\n+\t}\n+      return ret;\n+    }\n+  if (TREE_CODE (exp) != AGGR_INIT_EXPR)\n+    /* A trivial copy is OK.  */\n+    return true;\n+  if (!AGGR_INIT_VIA_CTOR_P (exp))\n+    /* unsafe_copy_elision_p must have said this is OK.  */\n+    return true;\n+  tree fn = cp_get_callee_fndecl_nofold (exp);\n+  if (DECL_BASE_CONSTRUCTOR_P (fn))\n+    return true;\n+  gcc_assert (DECL_COMPLETE_CONSTRUCTOR_P (fn));\n+  fn = base_ctor_for (fn);\n+  if (!fn || DECL_HAS_IN_CHARGE_PARM_P (fn))\n+    /* The base constructor has more parameters, so we can't just change the\n+       call target.  It would be possible to splice in the appropriate\n+       arguments, but probably not worth the complexity.  */\n+    return false;\n+  AGGR_INIT_EXPR_FN (exp) = build_address (fn);\n+  return true;\n+}\n+\n /* Return true iff T refers to a base or potentially-overlapping field, which\n    cannot be used for return by invisible reference.  We avoid doing C++17\n    mandatory copy elision when this is true.\n@@ -9152,6 +9206,10 @@ build_over_call (struct z_candidate *cand, int flags, tsubst_flags_t complain)\n       else\n \tcp_warn_deprecated_use (fn, complain);\n \n+      if (eliding_temp && DECL_BASE_CONSTRUCTOR_P (fn)\n+\t  && !make_base_init_ok (arg))\n+\tunsafe = true;\n+\n       /* If we're creating a temp and we already have one, don't create a\n \t new one.  If we're not creating a temp but we get one, use\n \t INIT_EXPR to collapse the temp into our target.  Otherwise, if the"}, {"sha": "03335e4ffbd5e072a80b641c80a9c34d1681cb17", "filename": "gcc/testsuite/g++.dg/cpp1z/elide4.C", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/424deca72b63e644cbc975cbc2fdda5248449bcb/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Felide4.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/424deca72b63e644cbc975cbc2fdda5248449bcb/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Felide4.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Felide4.C?ref=424deca72b63e644cbc975cbc2fdda5248449bcb", "patch": "@@ -0,0 +1,24 @@\n+// { dg-do compile { target c++11 } }\n+\n+// Check that there's a call to some base constructor of B: either the default\n+// constructor, if the copy is elided, or the copy constructor.\n+\n+// { dg-final { scan-assembler {call[ \\t]*_?_ZN1BC2} { target { i?86-*-* x86_64-*-* } } } }\n+\n+int count;\n+struct A { int i = count++; };\n+struct B: virtual A {\n+  B() { }\n+  B(const B& b);\n+};\n+bool x;\n+struct C: B\n+{\n+  C() : B(x ? (0,B()) : B()) { }\n+};\n+\n+int main()\n+{\n+  C c;\n+  return count;\n+}"}]}