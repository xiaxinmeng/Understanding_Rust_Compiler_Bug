{"sha": "fc98f5cbf48d0c2e9fa1f01d14f051a091356cc0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmM5OGY1Y2JmNDhkMGMyZTlmYTFmMDFkMTRmMDUxYTA5MTM1NmNjMA==", "commit": {"author": {"name": "Kazu Hirata", "email": "kazu@cs.umass.edu", "date": "2002-11-12T14:22:43Z"}, "committer": {"name": "Kazu Hirata", "email": "kazu@gcc.gnu.org", "date": "2002-11-12T14:22:43Z"}, "message": "* gthr-win32.h: Fix formatting.\n\nFrom-SVN: r59051", "tree": {"sha": "18cf3d8916b478d9ec078b38877db3e4cbda00cf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/18cf3d8916b478d9ec078b38877db3e4cbda00cf"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/fc98f5cbf48d0c2e9fa1f01d14f051a091356cc0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fc98f5cbf48d0c2e9fa1f01d14f051a091356cc0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fc98f5cbf48d0c2e9fa1f01d14f051a091356cc0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fc98f5cbf48d0c2e9fa1f01d14f051a091356cc0/comments", "author": null, "committer": null, "parents": [{"sha": "e27051f71bf83b124c2672659ce075c33544b384", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e27051f71bf83b124c2672659ce075c33544b384", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e27051f71bf83b124c2672659ce075c33544b384"}], "stats": {"total": 106, "additions": 55, "deletions": 51}, "files": [{"sha": "00fe09ec02d9468d771b3ecf9dd460d682a94a37", "filename": "gcc/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fc98f5cbf48d0c2e9fa1f01d14f051a091356cc0/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fc98f5cbf48d0c2e9fa1f01d14f051a091356cc0/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=fc98f5cbf48d0c2e9fa1f01d14f051a091356cc0", "patch": "@@ -1,3 +1,7 @@\n+2002-11-12  Kazu Hirata  <kazu@cs.umass.edu>\n+\n+\t* gthr-win32.h: Fix formatting.\n+\n 2002-11-12  Kazu Hirata  <kazu@cs.umass.edu>\n \n \t* config/h8300/h8300.c (single_one_operand): Correctly compute"}, {"sha": "38b8f04a12ad4da4c72cbb00af4c8aa467ab4246", "filename": "gcc/gthr-win32.h", "status": "modified", "additions": 51, "deletions": 51, "changes": 102, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fc98f5cbf48d0c2e9fa1f01d14f051a091356cc0/gcc%2Fgthr-win32.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fc98f5cbf48d0c2e9fa1f01d14f051a091356cc0/gcc%2Fgthr-win32.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgthr-win32.h?ref=fc98f5cbf48d0c2e9fa1f01d14f051a091356cc0", "patch": "@@ -81,49 +81,49 @@ Software Foundation, 59 Temple Place - Suite 330, Boston, MA\n #undef BOOL\n \n /* Key structure for maintaining thread specific storage */\n-static DWORD\t__gthread_objc_data_tls = (DWORD)-1;\n+static DWORD\t__gthread_objc_data_tls = (DWORD) -1;\n \n /* Backend initialization functions */\n \n /* Initialize the threads subsystem.  */\n int\n-__gthread_objc_init_thread_system(void)\n+__gthread_objc_init_thread_system (void)\n {\n   /* Initialize the thread storage key */\n-  if ((__gthread_objc_data_tls = TlsAlloc()) != (DWORD)-1)\n+  if ((__gthread_objc_data_tls = TlsAlloc ()) != (DWORD) -1)\n     return 0;\n   else\n     return -1;\n }\n \n /* Close the threads subsystem.  */\n int\n-__gthread_objc_close_thread_system(void)\n+__gthread_objc_close_thread_system (void)\n {\n-  if (__gthread_objc_data_tls != (DWORD)-1)\n-    TlsFree(__gthread_objc_data_tls);\n+  if (__gthread_objc_data_tls != (DWORD) -1)\n+    TlsFree (__gthread_objc_data_tls);\n   return 0;\n }\n \n /* Backend thread functions */\n \n /* Create a new thread of execution.  */\n objc_thread_t\n-__gthread_objc_thread_detach(void (*func)(void *arg), void *arg)\n+__gthread_objc_thread_detach (void (*func)(void *arg), void *arg)\n {\n   DWORD\tthread_id = 0;\n   HANDLE win32_handle;\n \n-  if (!(win32_handle = CreateThread(NULL, 0, (LPTHREAD_START_ROUTINE)func,\n-\t\t\t\t    arg, 0, &thread_id)))\n+  if (!(win32_handle = CreateThread (NULL, 0, (LPTHREAD_START_ROUTINE) func,\n+\t\t\t\t     arg, 0, &thread_id)))\n     thread_id = 0;\n \n-  return (objc_thread_t)thread_id;\n+  return (objc_thread_t) thread_id;\n }\n \n /* Set the current thread's priority.  */\n int\n-__gthread_objc_thread_set_priority(int priority)\n+__gthread_objc_thread_set_priority (int priority)\n {\n   int sys_priority = 0;\n \n@@ -142,19 +142,19 @@ __gthread_objc_thread_set_priority(int priority)\n     }\n \n   /* Change priority */\n-  if (SetThreadPriority(GetCurrentThread(), sys_priority))\n+  if (SetThreadPriority (GetCurrentThread (), sys_priority))\n     return 0;\n   else\n     return -1;\n }\n \n /* Return the current thread's priority.  */\n int\n-__gthread_objc_thread_get_priority(void)\n+__gthread_objc_thread_get_priority (void)\n {\n   int sys_priority;\n \n-  sys_priority = GetThreadPriority(GetCurrentThread());\n+  sys_priority = GetThreadPriority (GetCurrentThread ());\n \n   switch (sys_priority)\n     {\n@@ -179,51 +179,51 @@ __gthread_objc_thread_get_priority(void)\n \n /* Yield our process time to another thread.  */\n void\n-__gthread_objc_thread_yield(void)\n+__gthread_objc_thread_yield (void)\n {\n-  Sleep(0);\n+  Sleep (0);\n }\n \n /* Terminate the current thread.  */\n int\n-__gthread_objc_thread_exit(void)\n+__gthread_objc_thread_exit (void)\n {\n   /* exit the thread */\n-  ExitThread(__objc_thread_exit_status);\n+  ExitThread (__objc_thread_exit_status);\n \n   /* Failed if we reached here */\n   return -1;\n }\n \n /* Returns an integer value which uniquely describes a thread.  */\n objc_thread_t\n-__gthread_objc_thread_id(void)\n+__gthread_objc_thread_id (void)\n {\n-  return (objc_thread_t)GetCurrentThreadId();\n+  return (objc_thread_t) GetCurrentThreadId ();\n }\n \n /* Sets the thread's local storage pointer.  */\n int\n-__gthread_objc_thread_set_data(void *value)\n+__gthread_objc_thread_set_data (void *value)\n {\n-  if (TlsSetValue(__gthread_objc_data_tls, value))\n+  if (TlsSetValue (__gthread_objc_data_tls, value))\n     return 0;\n   else\n     return -1;\n }\n \n /* Returns the thread's local storage pointer.  */\n void *\n-__gthread_objc_thread_get_data(void)\n+__gthread_objc_thread_get_data (void)\n {\n   DWORD lasterror;\n   void *ptr;\n \n-  lasterror = GetLastError();\n+  lasterror = GetLastError ();\n \n-  ptr = TlsGetValue(__gthread_objc_data_tls);          /* Return thread data.  */\n+  ptr = TlsGetValue (__gthread_objc_data_tls);          /* Return thread data.  */\n \n-  SetLastError( lasterror );\n+  SetLastError (lasterror);\n \n   return ptr;\n }\n@@ -232,29 +232,29 @@ __gthread_objc_thread_get_data(void)\n \n /* Allocate a mutex.  */\n int\n-__gthread_objc_mutex_allocate(objc_mutex_t mutex)\n+__gthread_objc_mutex_allocate (objc_mutex_t mutex)\n {\n-  if ((mutex->backend = (void *)CreateMutex(NULL, 0, NULL)) == NULL)\n+  if ((mutex->backend = (void *) CreateMutex (NULL, 0, NULL)) == NULL)\n     return -1;\n   else\n     return 0;\n }\n \n /* Deallocate a mutex.  */\n int\n-__gthread_objc_mutex_deallocate(objc_mutex_t mutex)\n+__gthread_objc_mutex_deallocate (objc_mutex_t mutex)\n {\n-  CloseHandle((HANDLE)(mutex->backend));\n+  CloseHandle ((HANDLE) (mutex->backend));\n   return 0;\n }\n \n /* Grab a lock on a mutex.  */\n int\n-__gthread_objc_mutex_lock(objc_mutex_t mutex)\n+__gthread_objc_mutex_lock (objc_mutex_t mutex)\n {\n   int status;\n \n-  status = WaitForSingleObject((HANDLE)(mutex->backend), INFINITE);\n+  status = WaitForSingleObject ((HANDLE) (mutex->backend), INFINITE);\n   if (status != WAIT_OBJECT_0 && status != WAIT_ABANDONED)\n     return -1;\n   else\n@@ -263,11 +263,11 @@ __gthread_objc_mutex_lock(objc_mutex_t mutex)\n \n /* Try to grab a lock on a mutex.  */\n int\n-__gthread_objc_mutex_trylock(objc_mutex_t mutex)\n+__gthread_objc_mutex_trylock (objc_mutex_t mutex)\n {\n   int status;\n \n-  status = WaitForSingleObject((HANDLE)(mutex->backend), 0);\n+  status = WaitForSingleObject ((HANDLE) (mutex->backend), 0);\n   if (status != WAIT_OBJECT_0 && status != WAIT_ABANDONED)\n     return -1;\n   else\n@@ -276,9 +276,9 @@ __gthread_objc_mutex_trylock(objc_mutex_t mutex)\n \n /* Unlock the mutex */\n int\n-__gthread_objc_mutex_unlock(objc_mutex_t mutex)\n+__gthread_objc_mutex_unlock (objc_mutex_t mutex)\n {\n-  if (ReleaseMutex((HANDLE)(mutex->backend)) == 0)\n+  if (ReleaseMutex ((HANDLE) (mutex->backend)) == 0)\n     return -1;\n   else\n     return 0;\n@@ -288,39 +288,39 @@ __gthread_objc_mutex_unlock(objc_mutex_t mutex)\n \n /* Allocate a condition.  */\n int\n-__gthread_objc_condition_allocate(objc_condition_t condition)\n+__gthread_objc_condition_allocate (objc_condition_t condition)\n {\n   /* Unimplemented.  */\n   return -1;\n }\n \n /* Deallocate a condition.  */\n int\n-__gthread_objc_condition_deallocate(objc_condition_t condition)\n+__gthread_objc_condition_deallocate (objc_condition_t condition)\n {\n   /* Unimplemented.  */\n   return -1;\n }\n \n /* Wait on the condition */\n int\n-__gthread_objc_condition_wait(objc_condition_t condition, objc_mutex_t mutex)\n+__gthread_objc_condition_wait (objc_condition_t condition, objc_mutex_t mutex)\n {\n   /* Unimplemented.  */\n   return -1;\n }\n \n /* Wake up all threads waiting on this condition.  */\n int\n-__gthread_objc_condition_broadcast(objc_condition_t condition)\n+__gthread_objc_condition_broadcast (objc_condition_t condition)\n {\n   /* Unimplemented.  */\n   return -1;\n }\n \n /* Wake up one thread waiting on this condition.  */\n int\n-__gthread_objc_condition_signal(objc_condition_t condition)\n+__gthread_objc_condition_signal (objc_condition_t condition)\n {\n   /* Unimplemented.  */\n   return -1;\n@@ -384,10 +384,10 @@ extern int __gthr_win32_mutex_unlock (__gthread_mutex_t *);\n static inline int\n __gthread_once (__gthread_once_t *once, void (*func) (void))\n {\n-  if ( __gthread_active_p ())\n+  if (__gthread_active_p ())\n     return __gthr_win32_once (once, func);\n   else\n-    return -1;\t\n+    return -1;\n }\n \n static inline int\n@@ -402,11 +402,11 @@ __gthread_key_dtor (__gthread_key_t key, void *ptr)\n   /* Nothing needed.  */\n   return 0;\n }\n-  \n- static inline int\n+\n+static inline int\n __gthread_key_delete (__gthread_key_t key)\n {\n-   return __gthr_win32_key_delete (key);\n+  return __gthr_win32_key_delete (key);\n }\n \n static inline void *\n@@ -442,7 +442,7 @@ __gthread_mutex_trylock (__gthread_mutex_t *mutex)\n   if (__gthread_active_p ())\n     return __gthr_win32_mutex_trylock (mutex);\n   else\n-    return 0;\t\n+    return 0;\n }\n \n static inline int\n@@ -451,7 +451,7 @@ __gthread_mutex_unlock (__gthread_mutex_t *mutex)\n   if (__gthread_active_p ())\n     return __gthr_win32_mutex_unlock (mutex);\n   else\n-    return 0;\t\n+    return 0;\n }\n \n #else /* ! __GTHREAD_HIDE_WIN32API */\n@@ -532,11 +532,11 @@ __gthread_getspecific (__gthread_key_t key)\n   DWORD lasterror;\n   void *ptr;\n \n-  lasterror = GetLastError();\n+  lasterror = GetLastError ();\n \n-  ptr = TlsGetValue(key);\n+  ptr = TlsGetValue (key);\n \n-  SetLastError( lasterror );\n+  SetLastError (lasterror);\n \n   return ptr;\n }"}]}