{"sha": "827a5be702b9cdc019373c545c39c580fa2aff0a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODI3YTViZTcwMmI5Y2RjMDE5MzczYzU0NWMzOWM1ODBmYTJhZmYwYQ==", "commit": {"author": {"name": "Neil Booth", "email": "neil@daikokuya.demon.co.uk", "date": "2001-06-15T23:40:33Z"}, "committer": {"name": "Neil Booth", "email": "neil@gcc.gnu.org", "date": "2001-06-15T23:40:33Z"}, "message": "cpp.texi: Update.\n\n\t* doc/cpp.texi: Update.\n\t* doc/cpp.1: Regenerate.\n\nFrom-SVN: r43414", "tree": {"sha": "7855b30bc3147372a5da34a620083e3fbe3971a8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7855b30bc3147372a5da34a620083e3fbe3971a8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/827a5be702b9cdc019373c545c39c580fa2aff0a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/827a5be702b9cdc019373c545c39c580fa2aff0a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/827a5be702b9cdc019373c545c39c580fa2aff0a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/827a5be702b9cdc019373c545c39c580fa2aff0a/comments", "author": null, "committer": null, "parents": [{"sha": "6728a61d1f8aaf9d848fce3584e952fb5f0d3f67", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6728a61d1f8aaf9d848fce3584e952fb5f0d3f67", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6728a61d1f8aaf9d848fce3584e952fb5f0d3f67"}], "stats": {"total": 104, "additions": 56, "deletions": 48}, "files": [{"sha": "5bd3d9ab4e5fd3bb0a67e7f902668773b14a90a4", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/827a5be702b9cdc019373c545c39c580fa2aff0a/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/827a5be702b9cdc019373c545c39c580fa2aff0a/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=827a5be702b9cdc019373c545c39c580fa2aff0a", "patch": "@@ -1,3 +1,8 @@\n+2001-06-16  Neil Booth  <neil@daikokuya.demon.co.uk>\n+\n+\t* doc/cpp.texi: Update.\n+\t* doc/cpp.1: Regenerate.\n+\n 2001-06-15  Loren J. Rittle  <ljrittle@acm.org>\n \n \t* doc/install.texi: Use correct markup hints."}, {"sha": "15bd6eeaece5124515bf3ca9bbe5930dc8259f21", "filename": "gcc/doc/cpp.1", "status": "modified", "additions": 7, "deletions": 6, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/827a5be702b9cdc019373c545c39c580fa2aff0a/gcc%2Fdoc%2Fcpp.1", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/827a5be702b9cdc019373c545c39c580fa2aff0a/gcc%2Fdoc%2Fcpp.1", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fcpp.1?ref=827a5be702b9cdc019373c545c39c580fa2aff0a", "patch": "@@ -1,5 +1,5 @@\n .\\\" Automatically generated by Pod::Man version 1.16\n-.\\\" Fri Jun 15 10:40:40 2001\n+.\\\" Sat Jun 16 00:25:57 2001\n .\\\"\n .\\\" Standard preamble:\n .\\\" ======================================================================\n@@ -138,7 +138,7 @@\n .\\\" ======================================================================\n .\\\"\n .IX Title \"CPP 1\"\n-.TH CPP 1 \"gcc-3.1\" \"2001-06-15\" \"GNU\"\n+.TH CPP 1 \"gcc-3.1\" \"2001-06-16\" \"GNU\"\n .UC\n .SH \"NAME\"\n cpp \\- The C Preprocessor\n@@ -206,8 +206,7 @@ means the same as if \\fB-\\fR had been specified for that file.\n All single-letter options which take an argument may have that argument\n appear immediately after the option letter, or with a space between\n option and argument:  \\fB\\-Ifoo\\fR and \\fB\\-I foo\\fR have the same\n-effect.  Long options that take arguments require a space between option\n-and argument.\n+effect.\n .Ip \"\\fB\\-D\\fR \\fIname\\fR\" 4\n .IX Item \"-D name\"\n Predefine \\fIname\\fR as a macro, with definition \\f(CW\\*(C`1\\*(C'\\fR.\n@@ -553,8 +552,10 @@ is applied to the standard system directories.\n Indicate to the preprocessor that the input file has already been\n preprocessed.  This suppresses things like macro expansion, trigraph\n conversion, escaped newline splicing, and processing of most directives.\n-In this mode the integrated preprocessor is little more than a tokenizer\n-for the front ends.\n+The preprocessor still recognizes and removes comments, so that you can\n+pass a file preprocessed with \\fB\\-C\\fR to the compiler without\n+problems.  In this mode the integrated preprocessor is little more than\n+a tokenizer for the front ends.\n .Sp\n \\&\\fB\\-fpreprocessed\\fR is implicit if the input file has one of the\n extensions \\fB.i\\fR, \\fB.ii\\fR or \\fB.mi\\fR.  These are the"}, {"sha": "fa545c81c508d228c52a13d531a6ac4ed7017978", "filename": "gcc/doc/cpp.texi", "status": "modified", "additions": 44, "deletions": 42, "changes": 86, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/827a5be702b9cdc019373c545c39c580fa2aff0a/gcc%2Fdoc%2Fcpp.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/827a5be702b9cdc019373c545c39c580fa2aff0a/gcc%2Fdoc%2Fcpp.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fcpp.texi?ref=827a5be702b9cdc019373c545c39c580fa2aff0a", "patch": "@@ -516,7 +516,7 @@ header file names (the argument of @samp{#include}).@footnote{The C\n standard uses the term @dfn{string literal} to refer only to what we are\n calling @dfn{string constants}.}  String constants and character\n constants are straightforward: @t{\"@dots{}\"} or @t{'@dots{}'}.  In\n-either case the closing quote may be escaped with a backslash:\n+either case embedded quotes should be escaped with a backslash:\n @t{'\\'@:'} is the character constant for @samp{'}.  There is no limit on\n the length of a character constant, but the value of a character\n constant that contains more than one character is\n@@ -530,10 +530,10 @@ file in different places depending on which form you use.  @xref{Include\n Operation}.\n \n In standard C, no string literal may extend past the end of a line.  GNU\n-CPP accepts multi-line string constants, but not character constants or\n-header file names.  This extension is deprecated and will be removed in\n-GCC 3.1.  You may use continued lines instead, or string constant\n-concatenation.  @xref{Differences from previous versions}.\n+CPP accepts multi-line string constants, but not multi-line character\n+constants or header file names.  This extension is deprecated and will\n+be removed in GCC 3.1.  You may use continued lines instead, or string\n+constant concatenation.  @xref{Differences from previous versions}.\n \n @cindex punctuators\n @dfn{Punctuators} are all the usual bits of punctuation which are\n@@ -621,7 +621,7 @@ Diagnostics.  You can detect problems at compile time and issue errors\n or warnings.\n @end itemize\n \n-There are a few more, less useful features.\n+There are a few more, less useful, features.\n \n Except for expansion of predefined macros, all these operations are\n triggered with @dfn{preprocessing directives}.  Preprocessing directives\n@@ -855,7 +855,7 @@ If you need to look for headers in a directory named @file{-}, write\n @option{-I./-}.\n \n There are several more ways to adjust the header search path.  They are\n-less generally useful.  @xref{Invocation}.\n+generally less useful.  @xref{Invocation}.\n \n @node Once-Only Headers\n @section Once-Only Headers\n@@ -879,7 +879,7 @@ of the file in a conditional, like this:\n \n @var{the entire file}\n \n-#endif /* FILE_FOO_SEEN */\n+#endif /* !FILE_FOO_SEEN */\n @end group\n @end example\n \n@@ -956,7 +956,7 @@ not @samp{\"} or @samp{<}, then the entire line is macro-expanded\n like running text would be.\n \n If the line expands to a single string constant, the contents of that\n-string constant are the file to be included.  CPP does not reexamine the\n+string constant are the file to be included.  CPP does not re-examine the\n string for embedded quotes, but neither does it process backslash\n escapes in the string.  Therefore\n \n@@ -986,7 +986,7 @@ These rules are implementation-defined behavior according to the C\n standard.  To minimize the risk of different compilers interpreting your\n computed includes differently, we recommend you use only a single\n object-like macro which expands to a string constant.  This will also\n-minimize confusion of people reading your program.\n+minimize any confusion to people reading your program.\n \n @node Wrapper Headers\n @section Wrapper Headers\n@@ -1037,9 +1037,9 @@ where the current file was found.\n \n The use of @samp{#include_next} can lead to great confusion.  We\n recommend it be used only when there is no other alternative.  In\n-particular, it should not be used in the headers belonging to a\n-specific program, only to make global corrections along the lines\n-of @command{fixincludes}.\n+particular, it should not be used in the headers belonging to a specific\n+program; it should be used only to make global corrections along the\n+lines of @command{fixincludes}.\n \n @node System Headers\n @section System Headers\n@@ -1061,9 +1061,7 @@ There are, however, two ways to make normal headers into system headers.\n \n The @option{-isystem} command line option adds its argument to the list of\n directories to search for headers, just like @option{-I}.  Any headers\n-found in that directory will be considered system headers.  Note that\n-unlike @option{-I}, you must put a space between @option{-isystem} and its\n-argument.\n+found in that directory will be considered system headers.\n \n All directories named by @option{-isystem} are searched @emph{after} all\n directories named by @option{-I}, no matter what their order was on the\n@@ -1371,7 +1369,7 @@ and then to\n (Line breaks shown here for clarity would not actually be generated.)\n \n @cindex empty macro arguments\n-You can leave macro arguments empty; this is not an error for the\n+You can leave macro arguments empty; this is not an error to the\n preprocessor (but many macros will then expand to invalid code).\n You cannot leave out arguments entirely; if a macro takes two arguments,\n there must be exactly one comma at the top level of its argument list.\n@@ -1394,8 +1392,8 @@ documentation were incorrect on this point, insisting that a\n function-like macro that takes a single argument be passed a space if an\n empty argument was required.\n \n-Macro parameters are not replaced by their corresponding actual\n-arguments if they appear inside string literals.\n+Macro parameters appearing inside string literals are not replaced by\n+their corresponding actual arguments.\n \n @example\n #define foo(x) x, \"x\"\n@@ -1418,7 +1416,7 @@ macro-expanded first.  This is called @dfn{stringification}.\n There is no way to combine an argument with surrounding text and\n stringify it all together.  Instead, you can write a series of adjacent\n string constants and stringified arguments.  The preprocessor will\n-replace the stringified arguments with more string constants.  The C\n+replace the stringified arguments with string constants.  The C\n compiler will then combine all the adjacent string constants into one\n long string.\n \n@@ -1448,8 +1446,8 @@ write @code{WARN_IF (@var{arg});}, which the resemblance of\n @ref{Swallowing the Semicolon}.\n \n Stringification in C involves more than putting double-quote characters\n-around the fragment.  The preprocessor backslash-escapes the surrounding\n-quotes of string literals, and all backslashes within string and\n+around the fragment.  The preprocessor backslash-escapes the quotes\n+surrounding embedded string constants, and all backslashes within string and\n character constants, in order to get a valid C string constant with the\n proper contents.  Thus, stringifying @code{@w{p = \"foo\\n\";}} results in\n @t{@w{\"p = \\\"foo\\\\n\\\";\"}}.  However, backslashes that are not inside string\n@@ -1636,7 +1634,7 @@ eprintf(\"success!\\n\", );\n      @expansion{} fprintf(stderr, \"success!\\n\", );\n @end example\n \n-GNU CPP has a pair of extensions which deal with this problem. First,\n+GNU CPP has a pair of extensions which deals with this problem. First,\n you are allowed to leave the variable argument out entirely:\n \n @example\n@@ -2099,8 +2097,8 @@ If a macro is redefined with a definition that is not effectively the\n same as the old one, the preprocessor issues a warning and changes the\n macro to use the new definition.  If the new definition is effectively\n the same, the redefinition is silently ignored.  This allows, for\n-instance, two different headers to define a common macro.  The compiler\n-will only complain if the definitions do not match.\n+instance, two different headers to define a common macro.  The\n+preprocessor will only complain if the definitions do not match.\n \n @node Macro Pitfalls\n @section Macro Pitfalls\n@@ -2109,7 +2107,7 @@ will only complain if the definitions do not match.\n \n In this section we describe some special rules that apply to macros and\n macro expansion, and point out certain cases in which the rules have\n-counterintuitive consequences that you must watch out for.\n+counter-intuitive consequences that you must watch out for.\n \n @menu\n * Misnesting::\n@@ -3022,15 +3020,17 @@ effect.  In addition, @var{filename} is a string constant.  The\n following line and all subsequent lines are reported to come from the\n file it specifies, until something else happens to change that.\n \n-@item #line @var{linenum} @var{filename} @var{flags@dots{}}\n-This form is a GCC extension.  @var{linenum} and @var{filename} are the\n-same as the second form.  The @var{flags} are small positive integers,\n-which have the same meaning as the flags which can appear at the end of a\n-linemarker in the preprocessor's output.  @xref{Preprocessor Output}.\n-\n @item #line @var{anything else}\n @var{anything else} is checked for macro calls, which are expanded.\n The result should match one of the above three forms.\n+\n+@item # @var{linenum} @var{filename} @var{flags@dots{}}\n+This form is a GCC extension.  @var{linenum} and @var{filename} are the\n+same as the second form.  The @var{flags} are small increasing positive\n+integers, which have the same meaning as the flags which can appear at\n+the end of a linemarker in the preprocessor's output.\n+@xref{Preprocessor Output}.  Note that this form does not use the\n+directive name @samp{line}.\n @end table\n \n @samp{#line} directives alter the results of the @code{__FILE__} and\n@@ -3088,7 +3088,7 @@ DO_PRAGMA (GCC dependency \"parse.y\")\n @end example\n \n The standard is unclear on where a @code{_Pragma} operator can appear.\n-The preprocessor accepts it even within a preprocessing conditional\n+The preprocessor does not accept it within a preprocessing conditional\n directive like @samp{#if}.  To be safe, you are probably best keeping it\n out of directives other than @samp{#define}, and putting it on a line of\n its own.\n@@ -3311,8 +3311,8 @@ This is impossible in ISO C@.\n \n @item\n None of the GNU extensions to the preprocessor are available in\n-traditional mode, with the exception of assertions, and those may be\n-removed in the future.\n+traditional mode, with the exception of a partial implementation of\n+assertions, and those may be removed in the future.\n \n @item\n A true traditional C preprocessor does not recognize @samp{#elif},\n@@ -3762,9 +3762,10 @@ comma, then @samp{##} behaves as a normal token paste.\n \n Traditional mode used to be implemented in the same program as normal\n preprocessing.  Therefore, all the GNU extensions to the preprocessor\n-were still available in traditional mode.  It is now a separate program,\n-and does not implement any of the GNU extensions except assertions.\n-Even those may be removed in a future release.\n+were still available in traditional mode.  It is now a separate program\n+and does not implement any of the GNU extensions, except for a partial\n+implementation of assertions.  Even those may be removed in a future\n+release.\n @end itemize\n \n @node Invocation\n@@ -3817,8 +3818,7 @@ means the same as if @option{-} had been specified for that file.\n All single-letter options which take an argument may have that argument\n appear immediately after the option letter, or with a space between\n option and argument:  @option{-Ifoo} and @option{-I foo} have the same\n-effect.  Long options that take arguments require a space between option\n-and argument.\n+effect.\n \n @cindex options\n @table @gcctabopt\n@@ -4133,8 +4133,10 @@ is applied to the standard system directories.  @xref{System Headers}.\n Indicate to the preprocessor that the input file has already been\n preprocessed.  This suppresses things like macro expansion, trigraph\n conversion, escaped newline splicing, and processing of most directives.\n-In this mode the integrated preprocessor is little more than a tokenizer\n-for the front ends.\n+The preprocessor still recognizes and removes comments, so that you can\n+pass a file preprocessed with @option{-C} to the compiler without\n+problems.  In this mode the integrated preprocessor is little more than\n+a tokenizer for the front ends.\n \n @option{-fpreprocessed} is implicit if the input file has one of the\n extensions @samp{.i}, @samp{.ii} or @samp{.mi}.  These are the"}]}