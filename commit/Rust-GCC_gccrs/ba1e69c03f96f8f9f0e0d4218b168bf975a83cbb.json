{"sha": "ba1e69c03f96f8f9f0e0d4218b168bf975a83cbb", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmExZTY5YzAzZjk2ZjhmOWYwZTBkNDIxOGIxNjhiZjk3NWE4M2NiYg==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2016-11-13T06:51:23Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2016-11-13T06:51:23Z"}, "message": "DR 374 - specialization in outer namespace\n\n\tPR c++/56840\n\t* pt.c (check_specialization_namespace): Allow any enclosing\n\tnamespace.\n\t(check_unqualified_spec_or_inst): New.\n\t(check_explicit_specialization): Call it.\n\t* parser.c (cp_parser_elaborated_type_specifier)\n\t(cp_parser_class_head): Call it.\n\nFrom-SVN: r242348", "tree": {"sha": "8ca33542913512e68c3e58353f1329b62dd1ae1e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8ca33542913512e68c3e58353f1329b62dd1ae1e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ba1e69c03f96f8f9f0e0d4218b168bf975a83cbb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ba1e69c03f96f8f9f0e0d4218b168bf975a83cbb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ba1e69c03f96f8f9f0e0d4218b168bf975a83cbb", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ba1e69c03f96f8f9f0e0d4218b168bf975a83cbb/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "478eca64649f582919bc67625e61d59b5c4eddef", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/478eca64649f582919bc67625e61d59b5c4eddef", "html_url": "https://github.com/Rust-GCC/gccrs/commit/478eca64649f582919bc67625e61d59b5c4eddef"}], "stats": {"total": 322, "additions": 190, "deletions": 132}, "files": [{"sha": "60186ee9fb84960d1d4beb2b7fd4a11271584e20", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba1e69c03f96f8f9f0e0d4218b168bf975a83cbb/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba1e69c03f96f8f9f0e0d4218b168bf975a83cbb/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=ba1e69c03f96f8f9f0e0d4218b168bf975a83cbb", "patch": "@@ -1,3 +1,14 @@\n+2016-11-12  Jason Merrill  <jason@redhat.com>\n+\n+\tDR 374\n+\tPR c++/56840\n+\t* pt.c (check_specialization_namespace): Allow any enclosing\n+\tnamespace.\n+\t(check_unqualified_spec_or_inst): New.\n+\t(check_explicit_specialization): Call it.\n+\t* parser.c (cp_parser_elaborated_type_specifier)\n+\t(cp_parser_class_head): Call it.\n+\n 2016-11-10  Jason Merrill  <jason@redhat.com>\n \n \tPR c++/77337"}, {"sha": "3e41a334350e8348f8966049f83091821b51b968", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba1e69c03f96f8f9f0e0d4218b168bf975a83cbb/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba1e69c03f96f8f9f0e0d4218b168bf975a83cbb/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=ba1e69c03f96f8f9f0e0d4218b168bf975a83cbb", "patch": "@@ -6082,6 +6082,7 @@ extern void reset_specialization\t\t(void);\n extern void end_specialization\t\t\t(void);\n extern void begin_explicit_instantiation\t(void);\n extern void end_explicit_instantiation\t\t(void);\n+extern void check_unqualified_spec_or_inst\t(tree, location_t);\n extern tree check_explicit_specialization\t(tree, tree, int, int);\n extern int num_template_headers_for_class\t(tree);\n extern void check_template_variable\t\t(tree);"}, {"sha": "6101504e40be8c85d6f82f8f35a4f76c37889275", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba1e69c03f96f8f9f0e0d4218b168bf975a83cbb/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba1e69c03f96f8f9f0e0d4218b168bf975a83cbb/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=ba1e69c03f96f8f9f0e0d4218b168bf975a83cbb", "patch": "@@ -7868,8 +7868,7 @@ check_class_member_definition_namespace (tree decl)\n      diagnostics.  */\n   if (processing_specialization)\n     return;\n-  /* There are no restrictions on the placement of\n-     explicit instantiations.  */\n+  /* We check this in check_explicit_instantiation_namespace.  */\n   if (processing_explicit_instantiation)\n     return;\n   /* [class.mfct]"}, {"sha": "8db6cfdc33455678975dbf72a1c0fc6546b67697", "filename": "gcc/cp/name-lookup.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba1e69c03f96f8f9f0e0d4218b168bf975a83cbb/gcc%2Fcp%2Fname-lookup.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba1e69c03f96f8f9f0e0d4218b168bf975a83cbb/gcc%2Fcp%2Fname-lookup.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fname-lookup.c?ref=ba1e69c03f96f8f9f0e0d4218b168bf975a83cbb", "patch": "@@ -3558,7 +3558,7 @@ set_decl_namespace (tree decl, tree scope, bool friendp)\n   /* Since decl is a function, old should contain a function decl.  */\n   if (!is_overloaded_fn (old))\n     goto complain;\n-  /* A template can be explicitly specialized in any namespace.  */\n+  /* We handle these in check_explicit_instantiation_namespace.  */\n   if (processing_explicit_instantiation)\n     return;\n   if (processing_template_decl || processing_specialization)"}, {"sha": "b3b69b3b8bede2bf021b23e94df2a8822b7721b7", "filename": "gcc/cp/parser.c", "status": "modified", "additions": 28, "deletions": 9, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba1e69c03f96f8f9f0e0d4218b168bf975a83cbb/gcc%2Fcp%2Fparser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba1e69c03f96f8f9f0e0d4218b168bf975a83cbb/gcc%2Fcp%2Fparser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparser.c?ref=ba1e69c03f96f8f9f0e0d4218b168bf975a83cbb", "patch": "@@ -17004,24 +17004,28 @@ cp_parser_elaborated_type_specifier (cp_parser* parser,\n   globalscope =  cp_parser_global_scope_opt (parser,\n \t\t\t\t\t     /*current_scope_valid_p=*/false);\n   /* Look for the nested-name-specifier.  */\n+  tree nested_name_specifier;\n   if (tag_type == typename_type && !globalscope)\n     {\n-      if (!cp_parser_nested_name_specifier (parser,\n+      nested_name_specifier\n+\t= cp_parser_nested_name_specifier (parser,\n \t\t\t\t\t   /*typename_keyword_p=*/true,\n \t\t\t\t\t   /*check_dependency_p=*/true,\n \t\t\t\t\t   /*type_p=*/true,\n-\t\t\t\t\t    is_declaration))\n+\t\t\t\t\t   is_declaration);\n+      if (!nested_name_specifier)\n \treturn error_mark_node;\n     }\n   else\n     /* Even though `typename' is not present, the proposed resolution\n        to Core Issue 180 says that in `class A<T>::B', `B' should be\n        considered a type-name, even if `A<T>' is dependent.  */\n-    cp_parser_nested_name_specifier_opt (parser,\n-\t\t\t\t\t /*typename_keyword_p=*/true,\n-\t\t\t\t\t /*check_dependency_p=*/true,\n-\t\t\t\t\t /*type_p=*/true,\n-\t\t\t\t\t is_declaration);\n+    nested_name_specifier\n+      = cp_parser_nested_name_specifier_opt (parser,\n+\t\t\t\t\t     /*typename_keyword_p=*/true,\n+\t\t\t\t\t     /*check_dependency_p=*/true,\n+\t\t\t\t\t     /*type_p=*/true,\n+\t\t\t\t\t     is_declaration);\n  /* For everything but enumeration types, consider a template-id.\n     For an enumeration type, consider only a plain identifier.  */\n   if (tag_type != enum_type)\n@@ -17069,8 +17073,18 @@ cp_parser_elaborated_type_specifier (cp_parser* parser,\n       else if (tag_type == typename_type && TREE_CODE (decl) != TYPE_DECL)\n         ; \n       else if (TREE_CODE (decl) == TYPE_DECL)\n-        type = check_elaborated_type_specifier (tag_type, decl,\n-\t\t\t\t\t\t/*allow_template_p=*/true);\n+\t{\n+\t  type = check_elaborated_type_specifier (tag_type, decl,\n+\t\t\t\t\t\t  /*allow_template_p=*/true);\n+\n+\t  /* If the next token is a semicolon, this must be a specialization,\n+\t     instantiation, or friend declaration.  Check the scope while we\n+\t     still know whether or not we had a nested-name-specifier.  */\n+\t  if (type != error_mark_node\n+\t      && !nested_name_specifier && !is_friend\n+\t      && cp_lexer_next_token_is (parser->lexer, CPP_SEMICOLON))\n+\t    check_unqualified_spec_or_inst (type, token->location);\n+\t}\n       else if (decl == error_mark_node)\n \ttype = error_mark_node; \n     }\n@@ -22336,6 +22350,11 @@ cp_parser_class_head (cp_parser* parser,\n \t{\n \t  type = TREE_TYPE (id);\n \t  type = maybe_process_partial_specialization (type);\n+\n+\t  /* Check the scope while we still know whether or not we had a\n+\t     nested-name-specifier.  */\n+\t  if (type != error_mark_node)\n+\t    check_unqualified_spec_or_inst (type, type_start_token->location);\n \t}\n       if (nested_name_specifier)\n \tpushed_scope = push_scope (nested_name_specifier);"}, {"sha": "d9499d9284a4bc6cf2b6bc6905d673e84ca9eb2d", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 47, "deletions": 20, "changes": 67, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba1e69c03f96f8f9f0e0d4218b168bf975a83cbb/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba1e69c03f96f8f9f0e0d4218b168bf975a83cbb/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=ba1e69c03f96f8f9f0e0d4218b168bf975a83cbb", "patch": "@@ -772,28 +772,29 @@ check_specialization_namespace (tree tmpl)\n \n   /* [tmpl.expl.spec]\n \n-     An explicit specialization shall be declared in the namespace of\n-     which the template is a member, or, for member templates, in the\n-     namespace of which the enclosing class or enclosing class\n-     template is a member.  An explicit specialization of a member\n-     function, member class or static data member of a class template\n-     shall be declared in the namespace of which the class template is\n-     a member.  */\n+     An explicit specialization shall be declared in a namespace enclosing the\n+     specialized template. An explicit specialization whose declarator-id is\n+     not qualified shall be declared in the nearest enclosing namespace of the\n+     template, or, if the namespace is inline (7.3.1), any namespace from its\n+     enclosing namespace set.  */\n   if (current_scope() != DECL_CONTEXT (tmpl)\n       && !at_namespace_scope_p ())\n     {\n       error (\"specialization of %qD must appear at namespace scope\", tmpl);\n       return false;\n     }\n-  if (is_associated_namespace (current_namespace, tpl_ns))\n-    /* Same or super-using namespace.  */\n+\n+  if (cxx_dialect < cxx11\n+      ? is_associated_namespace (current_namespace, tpl_ns)\n+      : is_ancestor (current_namespace, tpl_ns))\n+    /* Same or enclosing namespace.  */\n     return true;\n   else\n     {\n       permerror (input_location,\n \t\t \"specialization of %qD in different namespace\", tmpl);\n-      permerror (DECL_SOURCE_LOCATION (tmpl),\n-\t\t \"  from definition of %q#D\", tmpl);\n+      inform (DECL_SOURCE_LOCATION (tmpl),\n+\t      \"  from definition of %q#D\", tmpl);\n       return false;\n     }\n }\n@@ -2586,6 +2587,36 @@ check_template_variable (tree decl)\n     }\n }\n \n+/* An explicit specialization whose declarator-id or class-head-name is not\n+   qualified shall be declared in the nearest enclosing namespace of the\n+   template, or, if the namespace is inline (7.3.1), any namespace from its\n+   enclosing namespace set.\n+\n+   If the name declared in the explicit instantiation is an unqualified name,\n+   the explicit instantiation shall appear in the namespace where its template\n+   is declared or, if that namespace is inline (7.3.1), any namespace from its\n+   enclosing namespace set.  */\n+\n+void\n+check_unqualified_spec_or_inst (tree t, location_t loc)\n+{\n+  tree tmpl = most_general_template (t);\n+  if (DECL_NAMESPACE_SCOPE_P (tmpl)\n+      && !is_associated_namespace (current_namespace,\n+\t\t\t\t   CP_DECL_CONTEXT (tmpl)))\n+    {\n+      if (processing_specialization)\n+\tpermerror (loc, \"explicit specialization of %qD outside its \"\n+\t\t   \"namespace must use a nested-name-specifier\", tmpl);\n+      else if (processing_explicit_instantiation\n+\t       && cxx_dialect >= cxx11)\n+\t/* This was allowed in C++98, so only pedwarn.  */\n+\tpedwarn (loc, OPT_Wpedantic, \"explicit instantiation of %qD \"\n+\t\t \"outside its namespace must use a nested-name-\"\n+\t\t \"specifier\", tmpl);\n+    }\n+}\n+\n /* Check to see if the function just declared, as indicated in\n    DECLARATOR, and in DECL, is a specialization of a function\n    template.  We may also discover that the declaration is an explicit\n@@ -2949,22 +2980,18 @@ check_explicit_specialization (tree declarator,\n \treturn error_mark_node;\n       else\n \t{\n-\t  if (!ctype && !was_template_id\n-\t      && (specialization || member_specialization\n-\t\t  || explicit_instantiation)\n-\t      && !is_associated_namespace (CP_DECL_CONTEXT (decl),\n-\t\t\t\t\t   CP_DECL_CONTEXT (tmpl)))\n-\t    error (\"%qD is not declared in %qD\",\n-\t\t   tmpl, current_namespace);\n-\t  else if (TREE_CODE (decl) == FUNCTION_DECL\n-\t\t   && DECL_HIDDEN_FRIEND_P (tmpl))\n+\t  if (TREE_CODE (decl) == FUNCTION_DECL\n+\t      && DECL_HIDDEN_FRIEND_P (tmpl))\n \t    {\n \t      if (pedwarn (DECL_SOURCE_LOCATION (decl), 0,\n \t\t\t   \"friend declaration %qD is not visible to \"\n \t\t\t   \"explicit specialization\", tmpl))\n \t\tinform (DECL_SOURCE_LOCATION (tmpl),\n \t\t\t\"friend declaration here\");\n \t    }\n+\t  else if (!ctype && !is_friend\n+\t\t   && CP_DECL_CONTEXT (decl) == current_namespace)\n+\t    check_unqualified_spec_or_inst (tmpl, DECL_SOURCE_LOCATION (decl));\n \n \t  tree gen_tmpl = most_general_template (tmpl);\n "}, {"sha": "a6455d8310b0e4283bffea449504a632119ed7ba", "filename": "gcc/testsuite/g++.dg/cpp0x/explicit-inst1.C", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba1e69c03f96f8f9f0e0d4218b168bf975a83cbb/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fexplicit-inst1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba1e69c03f96f8f9f0e0d4218b168bf975a83cbb/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fexplicit-inst1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fexplicit-inst1.C?ref=ba1e69c03f96f8f9f0e0d4218b168bf975a83cbb", "patch": "@@ -0,0 +1,13 @@\n+// In C++11 explicit instantiation without a nested-name-specifier must be in\n+// the same namespace.\n+\n+namespace N {\n+  template <class T> class foo {};\n+  template <class T> class bar {};\n+}\n+\n+using N::bar;\n+template class bar<int>;\t// { dg-error \"\" \"\" { target c++11 } }\n+\n+using namespace N;\n+template class foo<int>;\t// { dg-error \"\" \"\" { target c++11 } }"}, {"sha": "91c5d56fc478bbd3bfcafc92dccf2f2caf79c7fc", "filename": "gcc/testsuite/g++.dg/template/spec17.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba1e69c03f96f8f9f0e0d4218b168bf975a83cbb/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fspec17.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba1e69c03f96f8f9f0e0d4218b168bf975a83cbb/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fspec17.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fspec17.C?ref=ba1e69c03f96f8f9f0e0d4218b168bf975a83cbb", "patch": "@@ -1,7 +1,7 @@\n // PR c++/16224\n \n namespace io { \n-  template <typename> int foo(); // { dg-error \"\" }\n+  template <typename> int foo();\n } \n  \n using namespace io; "}, {"sha": "d6f0f08e28048141c5564f43002e1c55aaeddcbb", "filename": "gcc/testsuite/g++.dg/template/spec25.C", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba1e69c03f96f8f9f0e0d4218b168bf975a83cbb/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fspec25.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba1e69c03f96f8f9f0e0d4218b168bf975a83cbb/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fspec25.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fspec25.C?ref=ba1e69c03f96f8f9f0e0d4218b168bf975a83cbb", "patch": "@@ -1,10 +1,10 @@\n namespace N {\n   template <typename T>\n   struct S {\n-    void f() {}\t\t\t// { dg-error \"definition\" }\n+    void f() {}\n   };\n }\n \n namespace K {\n-  template <> void N::S<char>::f() {} // { dg-error \"different namespace\" }\n+  template <> void N::S<char>::f() {} // { dg-error \"namespace\" }\n }"}, {"sha": "5807fc516dffca64ec6853cddfebc4ebb5268d95", "filename": "gcc/testsuite/g++.dg/template/spec36.C", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba1e69c03f96f8f9f0e0d4218b168bf975a83cbb/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fspec36.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba1e69c03f96f8f9f0e0d4218b168bf975a83cbb/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fspec36.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fspec36.C?ref=ba1e69c03f96f8f9f0e0d4218b168bf975a83cbb", "patch": "@@ -8,9 +8,9 @@ struct basic_string\n namespace MyNS {\n   class MyClass {\n     template <typename T>\n-    T test() { } /* { dg-error \"from definition\" } */\n+    T test() { } /* { dg-message \"from definition\" \"\" { target c++98_only } } */\n   };\n }\n template <>\n-basic_string MyNS::MyClass::test() /* { dg-error \"specialization of\" } */\n+basic_string MyNS::MyClass::test() /* { dg-error \"specialization of\" \"\" { target c++98_only } }*/\n { return 1; }"}, {"sha": "e8e5304dae0fa6e049f6199f928082a57d269066", "filename": "gcc/testsuite/g++.old-deja/g++.ns/template13.C", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba1e69c03f96f8f9f0e0d4218b168bf975a83cbb/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.ns%2Ftemplate13.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba1e69c03f96f8f9f0e0d4218b168bf975a83cbb/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.ns%2Ftemplate13.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.ns%2Ftemplate13.C?ref=ba1e69c03f96f8f9f0e0d4218b168bf975a83cbb", "patch": "@@ -4,7 +4,7 @@ namespace bar\n {\n   // trick it to provide some prior declaration\n   template<class T>\n-  void foo(); // { dg-error \"definition\" }\n+  void foo();\n   template<class T>class X; // { dg-message \"note: previous declaration\" }\n }\n \n@@ -15,7 +15,7 @@ bar::foo(T const &a)     // { dg-error \"\" \"\" { xfail *-*-* } } not declared in b\n   return a;\n }\n \n-template<> void bar::foo<int>()     // { dg-error \"different namespace\" }\n+template<> void bar::foo<int>()     // { dg-error \"different namespace\" \"\" { target c++98_only } }\n {\n }\n "}, {"sha": "f8ceaf790c44846945184d42d979f562df110adc", "filename": "gcc/testsuite/g++.old-deja/g++.pt/explicit73.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba1e69c03f96f8f9f0e0d4218b168bf975a83cbb/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.pt%2Fexplicit73.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba1e69c03f96f8f9f0e0d4218b168bf975a83cbb/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.pt%2Fexplicit73.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.pt%2Fexplicit73.C?ref=ba1e69c03f96f8f9f0e0d4218b168bf975a83cbb", "patch": "@@ -7,7 +7,7 @@\n // the template\n \n namespace N {\n-  template <class T> class foo;\t// { dg-error \"\" } referenced below\n+  template <class T> class foo;\n }\n \n using namespace N;"}, {"sha": "9d2add8f62792e0cdb13cd79fed42490cd938004", "filename": "gcc/testsuite/g++.old-deja/g++.pt/lookup10.C", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba1e69c03f96f8f9f0e0d4218b168bf975a83cbb/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.pt%2Flookup10.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba1e69c03f96f8f9f0e0d4218b168bf975a83cbb/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.pt%2Flookup10.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.pt%2Flookup10.C?ref=ba1e69c03f96f8f9f0e0d4218b168bf975a83cbb", "patch": "@@ -13,8 +13,8 @@ namespace Outer {\n   namespace Core = Core_Real;\n \n   namespace Core_Real {\n-    template<class T> void Foo (T *) {} // { dg-error \"definition\" }\n+    template<class T> void Foo (T *) {}\n   }\n \n-  template<> void Core::Foo<> (Render_Real::Type *) {} // { dg-error \"\" }\n+  template<> void Core::Foo<> (Render_Real::Type *) {} // { dg-error \"\" \"\" { target c++98_only } }\n }  "}, {"sha": "87d423f1e8b71191fe09644daf22ec570362f200", "filename": "libstdc++-v3/testsuite/30_threads/future/requirements/explicit_instantiation.cc", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba1e69c03f96f8f9f0e0d4218b168bf975a83cbb/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Ffuture%2Frequirements%2Fexplicit_instantiation.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba1e69c03f96f8f9f0e0d4218b168bf975a83cbb/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Ffuture%2Frequirements%2Fexplicit_instantiation.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Ffuture%2Frequirements%2Fexplicit_instantiation.cc?ref=ba1e69c03f96f8f9f0e0d4218b168bf975a83cbb", "patch": "@@ -25,9 +25,8 @@\n #include <testsuite_tr1.h>\n \n using namespace __gnu_test;\n-using std::future;\n-template class future<int>;\n-template class future<int&>;\n-template class future<void>;\n-template class future<ClassType>;\n-template class future<ClassType&>;\n+template class std::future<int>;\n+template class std::future<int&>;\n+template class std::future<void>;\n+template class std::future<ClassType>;\n+template class std::future<ClassType&>;"}, {"sha": "e3b61e4f4188f84cac0b64648bdba4e535de9b95", "filename": "libstdc++-v3/testsuite/30_threads/packaged_task/requirements/explicit_instantiation.cc", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba1e69c03f96f8f9f0e0d4218b168bf975a83cbb/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fpackaged_task%2Frequirements%2Fexplicit_instantiation.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba1e69c03f96f8f9f0e0d4218b168bf975a83cbb/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fpackaged_task%2Frequirements%2Fexplicit_instantiation.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fpackaged_task%2Frequirements%2Fexplicit_instantiation.cc?ref=ba1e69c03f96f8f9f0e0d4218b168bf975a83cbb", "patch": "@@ -25,9 +25,8 @@\n #include <testsuite_tr1.h>\n \n using namespace __gnu_test;\n-using std::packaged_task;\n-template class packaged_task<int()>;\n-template class packaged_task<int&()>;\n-template class packaged_task<void()>;\n-template class packaged_task<ClassType(int)>;\n-template class packaged_task<AbstractClass&(int)>;\n+template class std::packaged_task<int()>;\n+template class std::packaged_task<int&()>;\n+template class std::packaged_task<void()>;\n+template class std::packaged_task<ClassType(int)>;\n+template class std::packaged_task<AbstractClass&(int)>;"}, {"sha": "4a220a9deb6b7205a60db4dedd9a97632db56319", "filename": "libstdc++-v3/testsuite/30_threads/promise/requirements/explicit_instantiation.cc", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba1e69c03f96f8f9f0e0d4218b168bf975a83cbb/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fpromise%2Frequirements%2Fexplicit_instantiation.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba1e69c03f96f8f9f0e0d4218b168bf975a83cbb/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fpromise%2Frequirements%2Fexplicit_instantiation.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fpromise%2Frequirements%2Fexplicit_instantiation.cc?ref=ba1e69c03f96f8f9f0e0d4218b168bf975a83cbb", "patch": "@@ -25,9 +25,8 @@\n #include <testsuite_tr1.h>\n \n using namespace __gnu_test;\n-using std::promise;\n-template class promise<int>;\n-template class promise<int&>;\n-template class promise<void>;\n-template class promise<ClassType>;\n-template class promise<ClassType&>;\n+template class std::promise<int>;\n+template class std::promise<int&>;\n+template class std::promise<void>;\n+template class std::promise<ClassType>;\n+template class std::promise<ClassType&>;"}, {"sha": "715b7fe39c4b9cb59edee56f65c43078ef8b5e00", "filename": "libstdc++-v3/testsuite/30_threads/shared_future/requirements/explicit_instantiation.cc", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba1e69c03f96f8f9f0e0d4218b168bf975a83cbb/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fshared_future%2Frequirements%2Fexplicit_instantiation.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba1e69c03f96f8f9f0e0d4218b168bf975a83cbb/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fshared_future%2Frequirements%2Fexplicit_instantiation.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fshared_future%2Frequirements%2Fexplicit_instantiation.cc?ref=ba1e69c03f96f8f9f0e0d4218b168bf975a83cbb", "patch": "@@ -25,9 +25,8 @@\n #include <testsuite_tr1.h>\n \n using namespace __gnu_test;\n-using std::shared_future;\n-template class shared_future<int>;\n-template class shared_future<int&>;\n-template class shared_future<void>;\n-template class shared_future<ClassType>;\n-template class shared_future<ClassType&>;\n+template class std::shared_future<int>;\n+template class std::shared_future<int&>;\n+template class std::shared_future<void>;\n+template class std::shared_future<ClassType>;\n+template class std::shared_future<ClassType&>;"}, {"sha": "6653625be8c270bc1a45d42c9797b89c8d31dc9a", "filename": "libstdc++-v3/testsuite/ext/numeric_traits/numeric_traits.cc", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba1e69c03f96f8f9f0e0d4218b168bf975a83cbb/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fnumeric_traits%2Fnumeric_traits.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba1e69c03f96f8f9f0e0d4218b168bf975a83cbb/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fnumeric_traits%2Fnumeric_traits.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fnumeric_traits%2Fnumeric_traits.cc?ref=ba1e69c03f96f8f9f0e0d4218b168bf975a83cbb", "patch": "@@ -21,7 +21,6 @@\n \n #include <ext/numeric_traits.h>\n \n-using __gnu_cxx::__numeric_traits;\n-template struct __numeric_traits<short>;\n-template struct __numeric_traits<unsigned short>;\n-template struct __numeric_traits<double>;\n+template struct __gnu_cxx::__numeric_traits<short>;\n+template struct __gnu_cxx::__numeric_traits<unsigned short>;\n+template struct __gnu_cxx::__numeric_traits<double>;"}, {"sha": "18d94dfa71c244e58e7650c1007203055892cf0e", "filename": "libstdc++-v3/testsuite/tr1/2_general_utilities/enable_shared_from_this/requirements/explicit_instantiation/1.cc", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba1e69c03f96f8f9f0e0d4218b168bf975a83cbb/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F2_general_utilities%2Fenable_shared_from_this%2Frequirements%2Fexplicit_instantiation%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba1e69c03f96f8f9f0e0d4218b168bf975a83cbb/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F2_general_utilities%2Fenable_shared_from_this%2Frequirements%2Fexplicit_instantiation%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F2_general_utilities%2Fenable_shared_from_this%2Frequirements%2Fexplicit_instantiation%2F1.cc?ref=ba1e69c03f96f8f9f0e0d4218b168bf975a83cbb", "patch": "@@ -23,8 +23,7 @@\n // { dg-do compile }\n \n using namespace __gnu_test;\n-using std::tr1::enable_shared_from_this;\n-template class enable_shared_from_this<int>;\n-template class enable_shared_from_this<void>;\n-template class enable_shared_from_this<ClassType>;\n-template class enable_shared_from_this<IncompleteClass>;\n+template class std::tr1::enable_shared_from_this<int>;\n+template class std::tr1::enable_shared_from_this<void>;\n+template class std::tr1::enable_shared_from_this<ClassType>;\n+template class std::tr1::enable_shared_from_this<IncompleteClass>;"}, {"sha": "918822d06814a9a0568d44d0a9cf0b9fc5c748d1", "filename": "libstdc++-v3/testsuite/tr1/2_general_utilities/shared_ptr/requirements/explicit_instantiation/1.cc", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba1e69c03f96f8f9f0e0d4218b168bf975a83cbb/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F2_general_utilities%2Fshared_ptr%2Frequirements%2Fexplicit_instantiation%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba1e69c03f96f8f9f0e0d4218b168bf975a83cbb/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F2_general_utilities%2Fshared_ptr%2Frequirements%2Fexplicit_instantiation%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F2_general_utilities%2Fshared_ptr%2Frequirements%2Fexplicit_instantiation%2F1.cc?ref=ba1e69c03f96f8f9f0e0d4218b168bf975a83cbb", "patch": "@@ -23,8 +23,7 @@\n // { dg-do compile }\n \n using namespace __gnu_test;\n-using std::tr1::shared_ptr;\n-template class shared_ptr<int>;\n-template class shared_ptr<void>;\n-template class shared_ptr<ClassType>;\n-template class shared_ptr<IncompleteClass>;\n+template class std::tr1::shared_ptr<int>;\n+template class std::tr1::shared_ptr<void>;\n+template class std::tr1::shared_ptr<ClassType>;\n+template class std::tr1::shared_ptr<IncompleteClass>;"}, {"sha": "870e888b3822c79c12dabeb3f3bd6ef40484dfbd", "filename": "libstdc++-v3/testsuite/tr1/2_general_utilities/shared_ptr/requirements/explicit_instantiation/2.cc", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba1e69c03f96f8f9f0e0d4218b168bf975a83cbb/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F2_general_utilities%2Fshared_ptr%2Frequirements%2Fexplicit_instantiation%2F2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba1e69c03f96f8f9f0e0d4218b168bf975a83cbb/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F2_general_utilities%2Fshared_ptr%2Frequirements%2Fexplicit_instantiation%2F2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F2_general_utilities%2Fshared_ptr%2Frequirements%2Fexplicit_instantiation%2F2.cc?ref=ba1e69c03f96f8f9f0e0d4218b168bf975a83cbb", "patch": "@@ -26,8 +26,7 @@\n // library this checks the templates can be instantiated for non-default\n // lock policy, for a single-threaded lib this is redundant but harmless.\n using namespace __gnu_test;\n-using std::tr1::__shared_ptr;\n using std::tr1::_S_single;\n-template class __shared_ptr<int, _S_single>;\n-template class __shared_ptr<ClassType, _S_single>;\n-template class __shared_ptr<IncompleteClass, _S_single>;\n+template class std::tr1::__shared_ptr<int, _S_single>;\n+template class std::tr1::__shared_ptr<ClassType, _S_single>;\n+template class std::tr1::__shared_ptr<IncompleteClass, _S_single>;"}, {"sha": "0680ead9c3e28c152757b72d511da176622f7f95", "filename": "libstdc++-v3/testsuite/tr1/2_general_utilities/weak_ptr/requirements/explicit_instantiation/1.cc", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba1e69c03f96f8f9f0e0d4218b168bf975a83cbb/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F2_general_utilities%2Fweak_ptr%2Frequirements%2Fexplicit_instantiation%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba1e69c03f96f8f9f0e0d4218b168bf975a83cbb/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F2_general_utilities%2Fweak_ptr%2Frequirements%2Fexplicit_instantiation%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F2_general_utilities%2Fweak_ptr%2Frequirements%2Fexplicit_instantiation%2F1.cc?ref=ba1e69c03f96f8f9f0e0d4218b168bf975a83cbb", "patch": "@@ -23,8 +23,7 @@\n // { dg-do compile }\n \n using namespace __gnu_test;\n-using std::tr1::weak_ptr;\n-template class weak_ptr<int>;\n-template class weak_ptr<void>;\n-template class weak_ptr<ClassType>;\n-template class weak_ptr<IncompleteClass>;\n+template class std::tr1::weak_ptr<int>;\n+template class std::tr1::weak_ptr<void>;\n+template class std::tr1::weak_ptr<ClassType>;\n+template class std::tr1::weak_ptr<IncompleteClass>;"}, {"sha": "31617c9152c0a72b68896603f61a38a6ded91f2d", "filename": "libstdc++-v3/testsuite/tr1/2_general_utilities/weak_ptr/requirements/explicit_instantiation/2.cc", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba1e69c03f96f8f9f0e0d4218b168bf975a83cbb/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F2_general_utilities%2Fweak_ptr%2Frequirements%2Fexplicit_instantiation%2F2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba1e69c03f96f8f9f0e0d4218b168bf975a83cbb/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F2_general_utilities%2Fweak_ptr%2Frequirements%2Fexplicit_instantiation%2F2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F2_general_utilities%2Fweak_ptr%2Frequirements%2Fexplicit_instantiation%2F2.cc?ref=ba1e69c03f96f8f9f0e0d4218b168bf975a83cbb", "patch": "@@ -26,9 +26,8 @@\n // library this checks the templates can be instantiated for non-default\n // lock policy, for a single-threaded lib this is redundant but harmless.\n using namespace __gnu_test;\n-using std::tr1::__weak_ptr;\n using std::tr1::_S_single;\n-template class __weak_ptr<int, _S_single>;\n-template class __weak_ptr<void, _S_single>;\n-template class __weak_ptr<ClassType, _S_single>;\n-template class __weak_ptr<IncompleteClass, _S_single>;\n+template class std::tr1::__weak_ptr<int, _S_single>;\n+template class std::tr1::__weak_ptr<void, _S_single>;\n+template class std::tr1::__weak_ptr<ClassType, _S_single>;\n+template class std::tr1::__weak_ptr<IncompleteClass, _S_single>;"}, {"sha": "5f017c7046165b339c592a34bacc64a84b0344df", "filename": "libstdc++-v3/testsuite/tr1/6_containers/hash/requirements/explicit_instantiation.cc", "status": "modified", "additions": 17, "deletions": 19, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba1e69c03f96f8f9f0e0d4218b168bf975a83cbb/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F6_containers%2Fhash%2Frequirements%2Fexplicit_instantiation.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba1e69c03f96f8f9f0e0d4218b168bf975a83cbb/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F6_containers%2Fhash%2Frequirements%2Fexplicit_instantiation.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F6_containers%2Fhash%2Frequirements%2Fexplicit_instantiation.cc?ref=ba1e69c03f96f8f9f0e0d4218b168bf975a83cbb", "patch": "@@ -24,27 +24,25 @@\n #include <string>\n #include <tr1/functional>\n \n-using namespace std::tr1;\n-\n // Verify that we can instantiate hash for every required type.\n-template class hash<bool>;\n-template class hash<char>;\n-template class hash<signed char>;\n-template class hash<unsigned char>;\n-template class hash<short>;\n-template class hash<int>;\n-template class hash<long>;\n-template class hash<unsigned short>;\n-template class hash<unsigned int>;\n-template class hash<unsigned long>;\n-template class hash<float>;\n-template class hash<double>;\n-template class hash<long double>;\n-template class hash<void*>;\n-template class hash<std::string>;\n+template class std::tr1::hash<bool>;\n+template class std::tr1::hash<char>;\n+template class std::tr1::hash<signed char>;\n+template class std::tr1::hash<unsigned char>;\n+template class std::tr1::hash<short>;\n+template class std::tr1::hash<int>;\n+template class std::tr1::hash<long>;\n+template class std::tr1::hash<unsigned short>;\n+template class std::tr1::hash<unsigned int>;\n+template class std::tr1::hash<unsigned long>;\n+template class std::tr1::hash<float>;\n+template class std::tr1::hash<double>;\n+template class std::tr1::hash<long double>;\n+template class std::tr1::hash<void*>;\n+template class std::tr1::hash<std::string>;\n \n #ifdef _GLIBCXX_USE_WCHAR_T\n-template class hash<wchar_t>;\n-template class hash<std::wstring>;\n+template class std::tr1::hash<wchar_t>;\n+template class std::tr1::hash<std::wstring>;\n #endif\n "}, {"sha": "60ac8a5bef11a27ae7ad441f0736785d2e8fabba", "filename": "libstdc++-v3/testsuite/tr1/6_containers/unordered_map/requirements/explicit_instantiation.cc", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba1e69c03f96f8f9f0e0d4218b168bf975a83cbb/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F6_containers%2Funordered_map%2Frequirements%2Fexplicit_instantiation.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba1e69c03f96f8f9f0e0d4218b168bf975a83cbb/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F6_containers%2Funordered_map%2Frequirements%2Fexplicit_instantiation.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F6_containers%2Funordered_map%2Frequirements%2Fexplicit_instantiation.cc?ref=ba1e69c03f96f8f9f0e0d4218b168bf975a83cbb", "patch": "@@ -30,13 +30,13 @@ using std::allocator;\n using std::pair;\n using std::equal_to;\n \n-template class unordered_map<string, float>;\n-template class unordered_map<string, int,\n+template class std::tr1::unordered_map<string, float>;\n+template class std::tr1::unordered_map<string, int,\n \t\t\t     hash<string>, equal_to<string>,\n \t\t\t     allocator<pair<const string, int> > >;\n-template class unordered_map<string, float,\n+template class std::tr1::unordered_map<string, float,\n \t\t\t     hash<string>, equal_to<string>,\n \t\t\t     allocator<char> >;\n-template class __unordered_map<string, int,\n+template class std::tr1::__unordered_map<string, int,\n \t\t\t       hash<string>, equal_to<string>,\n \t\t\t       allocator<pair<const string, int> >, true>;"}, {"sha": "e92da828ff536208601195bd38a8a2de9a66d4c5", "filename": "libstdc++-v3/testsuite/tr1/6_containers/unordered_multimap/requirements/explicit_instantiation.cc", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba1e69c03f96f8f9f0e0d4218b168bf975a83cbb/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F6_containers%2Funordered_multimap%2Frequirements%2Fexplicit_instantiation.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba1e69c03f96f8f9f0e0d4218b168bf975a83cbb/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F6_containers%2Funordered_multimap%2Frequirements%2Fexplicit_instantiation.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F6_containers%2Funordered_multimap%2Frequirements%2Fexplicit_instantiation.cc?ref=ba1e69c03f96f8f9f0e0d4218b168bf975a83cbb", "patch": "@@ -30,13 +30,13 @@ using std::equal_to;\n using std::allocator;\n using std::pair;\n \n-template class unordered_multimap<string, float>;\n-template class unordered_multimap<string, int,\n+template class std::tr1::unordered_multimap<string, float>;\n+template class std::tr1::unordered_multimap<string, int,\n \t\t\t\t  hash<string>, equal_to<string>,\n \t\t\t\t  allocator<pair<const string, int> > >;\n-template class unordered_multimap<string, float,\n+template class std::tr1::unordered_multimap<string, float,\n \t\t\t\t  hash<string>, equal_to<string>,\n \t\t\t\t  allocator<char> >;\n-template class __unordered_multimap<string, int,\n+template class std::tr1::__unordered_multimap<string, int,\n \t\t\t\t    hash<string>, equal_to<string>,\n \t\t\t\t    allocator<pair<const string, int> >, true>;"}, {"sha": "662184beed6feaea1278ba0dc38954ab63975e5c", "filename": "libstdc++-v3/testsuite/tr1/6_containers/unordered_multiset/requirements/explicit_instantiation.cc", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba1e69c03f96f8f9f0e0d4218b168bf975a83cbb/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F6_containers%2Funordered_multiset%2Frequirements%2Fexplicit_instantiation.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba1e69c03f96f8f9f0e0d4218b168bf975a83cbb/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F6_containers%2Funordered_multiset%2Frequirements%2Fexplicit_instantiation.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F6_containers%2Funordered_multiset%2Frequirements%2Fexplicit_instantiation.cc?ref=ba1e69c03f96f8f9f0e0d4218b168bf975a83cbb", "patch": "@@ -27,10 +27,10 @@ using namespace std::tr1;\n using std::equal_to;\n using std::allocator;\n \n-template class unordered_multiset<int>;\n-template class unordered_multiset<float, hash<float>, equal_to<float>,\n+template class std::tr1::unordered_multiset<int>;\n+template class std::tr1::unordered_multiset<float, hash<float>, equal_to<float>,\n \t\t\t\t  allocator<float> >;\n-template class unordered_multiset<int, hash<int>, equal_to<int>,\n+template class std::tr1::unordered_multiset<int, hash<int>, equal_to<int>,\n \t\t\t\t  allocator<char> >;\n-template class __unordered_multiset<float, hash<float>, equal_to<float>,\n+template class std::tr1::__unordered_multiset<float, hash<float>, equal_to<float>,\n \t\t\t\t    allocator<float>, true>;"}, {"sha": "5d4d83d743ebbe80b2052722cad23070e9da563c", "filename": "libstdc++-v3/testsuite/tr1/6_containers/unordered_set/requirements/explicit_instantiation.cc", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba1e69c03f96f8f9f0e0d4218b168bf975a83cbb/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F6_containers%2Funordered_set%2Frequirements%2Fexplicit_instantiation.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba1e69c03f96f8f9f0e0d4218b168bf975a83cbb/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F6_containers%2Funordered_set%2Frequirements%2Fexplicit_instantiation.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F6_containers%2Funordered_set%2Frequirements%2Fexplicit_instantiation.cc?ref=ba1e69c03f96f8f9f0e0d4218b168bf975a83cbb", "patch": "@@ -27,10 +27,10 @@ using namespace std::tr1;\n using std::equal_to;\n using std::allocator;\n \n-template class unordered_set<int>;\n-template class unordered_set<float, hash<float>, equal_to<float>,\n-\t\t\t     allocator<float> >;\n-template class unordered_set<int, hash<int>, equal_to<int>,\n-\t\t\t     allocator<char> >;\n-template class __unordered_set<float, hash<float>, equal_to<float>,\n-\t\t\t       allocator<float>, true>;\n+template class std::tr1::unordered_set<int>;\n+template class std::tr1::unordered_set<float, hash<float>, equal_to<float>,\n+\t\t\t\t       allocator<float> >;\n+template class std::tr1::unordered_set<int, hash<int>, equal_to<int>,\n+\t\t\t\t       allocator<char> >;\n+template class std::tr1::__unordered_set<float, hash<float>, equal_to<float>,\n+\t\t\t\t\t allocator<float>, true>;"}]}