{"sha": "82b61df521d17a96f60e56ede06a55a8894b1c2e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODJiNjFkZjUyMWQxN2E5NmY2MGU1NmVkZTA2YTU1YTg4OTRiMWMyZQ==", "commit": {"author": {"name": "Phil Edwards", "email": "pme@gcc.gnu.org", "date": "2001-12-19T21:57:43Z"}, "committer": {"name": "Phil Edwards", "email": "pme@gcc.gnu.org", "date": "2001-12-19T21:57:43Z"}, "message": "Intro.3: New 'Allocators' module.\n\n2001-12-19  Phil Edwards  <pme@gcc.gnu.org>\n\n\t* docs/doxygen/Intro.3:  New 'Allocators' module.\n\t* docs/doxygen/TODO:  Update.\n\t* docs/doxygen/doxygroups.cc:  Update.\n\t* docs/doxygen/run_doxygen:  Update.\n\n\t* include/bits/stl_alloc.h:  Tweak doxygen hooks in comments.\n\t* include/bits/std_memory.h:  Doxygenate.\n\t* include/bits/stl_iterator_base_types.h:  Likewise.\n\t* include/bits/stl_raw_storage_iter.h:  Likewise.\n\t* include/bits/stl_tempbuf.h:  Likewise.\n\t(get_temporary_buffer):  Remove unused nonstandard overload.\n\t* include/bits/stl_uninitialized.h:  Likewise.\n\n\t* include/bits/stl_iterator_base_types.h (input_iterator,\n\toutput_iterator, forward_iterator, bidirectional_iterator,\n\trandom_access_iterator):  Move old names...\n\t* include/backward/iterator.h:  ...to here.\n\t* include/bits/stl_bvector.h:  Update.\n\t* include/ext/stl_rope.h:  Update.\n\nFrom-SVN: r48185", "tree": {"sha": "20530f0219543c3a5e48fc1f7fe35dca73c78c9b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/20530f0219543c3a5e48fc1f7fe35dca73c78c9b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/82b61df521d17a96f60e56ede06a55a8894b1c2e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/82b61df521d17a96f60e56ede06a55a8894b1c2e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/82b61df521d17a96f60e56ede06a55a8894b1c2e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/82b61df521d17a96f60e56ede06a55a8894b1c2e/comments", "author": null, "committer": null, "parents": [{"sha": "572cd73ac976578951d38adf15c43d4dc9abb299", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/572cd73ac976578951d38adf15c43d4dc9abb299", "html_url": "https://github.com/Rust-GCC/gccrs/commit/572cd73ac976578951d38adf15c43d4dc9abb299"}], "stats": {"total": 285, "additions": 190, "deletions": 95}, "files": [{"sha": "ee885008a9746a7640b1ff43dac8807eec4fc9d6", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/82b61df521d17a96f60e56ede06a55a8894b1c2e/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/82b61df521d17a96f60e56ede06a55a8894b1c2e/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=82b61df521d17a96f60e56ede06a55a8894b1c2e", "patch": "@@ -1,3 +1,25 @@\n+2001-12-19  Phil Edwards  <pme@gcc.gnu.org>\n+\n+\t* docs/doxygen/Intro.3:  New 'Allocators' module.\n+\t* docs/doxygen/TODO:  Update.\n+\t* docs/doxygen/doxygroups.cc:  Update.\n+\t* docs/doxygen/run_doxygen:  Update.\n+\n+\t* include/bits/stl_alloc.h:  Tweak doxygen hooks in comments.\n+\t* include/bits/std_memory.h:  Doxygenate.\n+\t* include/bits/stl_iterator_base_types.h:  Likewise.\n+\t* include/bits/stl_raw_storage_iter.h:  Likewise.\n+\t* include/bits/stl_tempbuf.h:  Likewise.\n+\t(get_temporary_buffer):  Remove unused nonstandard overload.\n+\t* include/bits/stl_uninitialized.h:  Likewise.\n+\n+\t* include/bits/stl_iterator_base_types.h (input_iterator,\n+\toutput_iterator, forward_iterator, bidirectional_iterator,\n+\trandom_access_iterator):  Move old names...\n+\t* include/backward/iterator.h:  ...to here.\n+\t* include/bits/stl_bvector.h:  Update.\n+\t* include/ext/stl_rope.h:  Update.\n+\n 2001-12-19  Phil Edwards  <pme@gcc.gnu.org>\n \n \t* docs/html/configopts.html:  Describe recent options."}, {"sha": "1d0820cdb42631fe578625caa1d7cb94a0a19e75", "filename": "libstdc++-v3/docs/doxygen/Intro.3", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/82b61df521d17a96f60e56ede06a55a8894b1c2e/libstdc%2B%2B-v3%2Fdocs%2Fdoxygen%2FIntro.3", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/82b61df521d17a96f60e56ede06a55a8894b1c2e/libstdc%2B%2B-v3%2Fdocs%2Fdoxygen%2FIntro.3", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdocs%2Fdoxygen%2FIntro.3?ref=82b61df521d17a96f60e56ede06a55a8894b1c2e", "patch": "@@ -29,6 +29,7 @@ or Austern's.)  These category pages are:\n .\\\" These are separated by ONE TAB.  Nothing else.  I don't like it either.\n .TS\n lB l.\n+Allocators\tClasses encapsulating memory allocation schemes.\n Arithmetic_functors\tFunctors for basic math.\n Assoc_containers\tKey-based containers.\n Binder_functors\tFunctors which \"remember\" an argument."}, {"sha": "672513e624cda7a723165cea608b3c1b59a322f0", "filename": "libstdc++-v3/docs/doxygen/TODO", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/82b61df521d17a96f60e56ede06a55a8894b1c2e/libstdc%2B%2B-v3%2Fdocs%2Fdoxygen%2FTODO", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/82b61df521d17a96f60e56ede06a55a8894b1c2e/libstdc%2B%2B-v3%2Fdocs%2Fdoxygen%2FTODO", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdocs%2Fdoxygen%2FTODO?ref=82b61df521d17a96f60e56ede06a55a8894b1c2e", "patch": "@@ -14,7 +14,7 @@ haven't gotten to it yet.  It /will/ be done (by somebody, eventually.)\n c17             FINISHED (Nothing in Clause 17 \"exists\" in terms of code.)\n c18             <limits>, Note A\n c19             Note A\n-c20             std_memory.h[20.4], rel_ops (should they be doc'd?), Note A\n+c20             rel_ops (should they be doc'd?), Note A\n c21             Untouched, Note B\n c22             Untouched\n c23             See doxygroups.cc and Note B."}, {"sha": "7d4e65dd7608ea9dd20d83f26de08ea5820c859a", "filename": "libstdc++-v3/docs/doxygen/doxygroups.cc", "status": "modified", "additions": 8, "deletions": 6, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/82b61df521d17a96f60e56ede06a55a8894b1c2e/libstdc%2B%2B-v3%2Fdocs%2Fdoxygen%2Fdoxygroups.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/82b61df521d17a96f60e56ede06a55a8894b1c2e/libstdc%2B%2B-v3%2Fdocs%2Fdoxygen%2Fdoxygroups.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdocs%2Fdoxygen%2Fdoxygroups.cc?ref=82b61df521d17a96f60e56ede06a55a8894b1c2e", "patch": "@@ -1,10 +1,12 @@\n \n-// This just provides documentation for stuff that doesn't need to be in the\n-// source headers themselves.  It is a \".cc\" file for the sole cheesy reason\n-// that it triggers many different text editors into doing Nice Things when\n-// typing comments.  However, it is mentioned nowhere except the *cfg.in files.\n-// Pieces separated by '// //' lines will usually not be presented to the\n-// user on the same page.\n+/*\n+   This just provides documentation for stuff that doesn't need to be in the\n+   source headers themselves.  It is a \".cc\" file for the sole cheesy reason\n+   that it triggers many different text editors into doing Nice Things when\n+   typing comments.  However, it is mentioned nowhere except the *cfg.in files.\n+   Pieces separated by '// //' lines will usually not be presented to the\n+   user on the same page.\n+*/\n \n // // // // // // // // // // // // // // // // // // // // // // // //\n /** @addtogroup SGIextensions STL extensions from SGI"}, {"sha": "7ac27447d4c585aa24bf35204e0a9e7ae91e72d2", "filename": "libstdc++-v3/docs/doxygen/run_doxygen", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/82b61df521d17a96f60e56ede06a55a8894b1c2e/libstdc%2B%2B-v3%2Fdocs%2Fdoxygen%2Frun_doxygen", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/82b61df521d17a96f60e56ede06a55a8894b1c2e/libstdc%2B%2B-v3%2Fdocs%2Fdoxygen%2Frun_doxygen", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdocs%2Fdoxygen%2Frun_doxygen?ref=82b61df521d17a96f60e56ede06a55a8894b1c2e", "patch": "@@ -166,11 +166,12 @@ rm stdheader\n # implementations of man(1), e.g., Linux's.  We need to have another top-level\n # *roff tag to /stop/ the .SH NAME entry.\n #problematic=`egrep --files-without-match '^\\.SH SYNOPSIS' [A-Z]*.3`\n-problematic='Containers.3 Sequences.3 Assoc_containers.3'\n+problematic='Containers.3 Sequences.3 Assoc_containers.3 Allocators.3'\n for f in $problematic; do\n     sed '/^\\.SH NAME/{\n n\n a\\\n+\\\n .SH SYNOPSIS\n     }' $f > TEMP\n     mv TEMP $f"}, {"sha": "d35b9420a86116c418023bca3ff360676db02c89", "filename": "libstdc++-v3/include/backward/iterator.h", "status": "modified", "additions": 48, "deletions": 5, "changes": 53, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/82b61df521d17a96f60e56ede06a55a8894b1c2e/libstdc%2B%2B-v3%2Finclude%2Fbackward%2Fiterator.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/82b61df521d17a96f60e56ede06a55a8894b1c2e/libstdc%2B%2B-v3%2Finclude%2Fbackward%2Fiterator.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbackward%2Fiterator.h?ref=82b61df521d17a96f60e56ede06a55a8894b1c2e", "patch": "@@ -46,11 +46,54 @@ using std::random_access_iterator_tag;\n #if 0\n using std::iterator;\n #endif\n-using std::input_iterator;\n-using std::output_iterator;\n-using std::forward_iterator;\n-using std::bidirectional_iterator;\n-using std::random_access_iterator;\n+\n+// The base classes input_iterator, output_iterator, forward_iterator,\n+// bidirectional_iterator, and random_access_iterator are not part of\n+// the C++ standard.  (They have been replaced by struct iterator.)\n+// They are included for backward compatibility with the HP STL.\n+template<typename _Tp, typename _Distance>\n+  struct input_iterator {\n+    typedef input_iterator_tag iterator_category;\n+    typedef _Tp                value_type;\n+    typedef _Distance          difference_type;\n+    typedef _Tp*               pointer;\n+    typedef _Tp&               reference;\n+  };\n+\n+struct output_iterator {\n+  typedef output_iterator_tag iterator_category;\n+  typedef void                value_type;\n+  typedef void                difference_type;\n+  typedef void                pointer;\n+  typedef void                reference;\n+};\n+\n+template<typename _Tp, typename _Distance>\n+  struct forward_iterator {\n+    typedef forward_iterator_tag iterator_category;\n+    typedef _Tp                  value_type;\n+    typedef _Distance            difference_type;\n+    typedef _Tp*                 pointer;\n+    typedef _Tp&                 reference;\n+  };\n+\n+template<typename _Tp, typename _Distance>\n+  struct bidirectional_iterator {\n+    typedef bidirectional_iterator_tag iterator_category;\n+    typedef _Tp                        value_type;\n+    typedef _Distance                  difference_type;\n+    typedef _Tp*                       pointer;\n+    typedef _Tp&                       reference;\n+  };\n+\n+template<typename _Tp, typename _Distance>\n+  struct random_access_iterator {\n+    typedef random_access_iterator_tag iterator_category;\n+    typedef _Tp                        value_type;\n+    typedef _Distance                  difference_type;\n+    typedef _Tp*                       pointer;\n+    typedef _Tp&                       reference;\n+  };\n \n using std::iterator_traits;\n "}, {"sha": "c9a2e59e48e1469f09ccef1fd79c699e854861aa", "filename": "libstdc++-v3/include/bits/std_memory.h", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/82b61df521d17a96f60e56ede06a55a8894b1c2e/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstd_memory.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/82b61df521d17a96f60e56ede06a55a8894b1c2e/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstd_memory.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstd_memory.h?ref=82b61df521d17a96f60e56ede06a55a8894b1c2e", "patch": "@@ -67,6 +67,9 @@ namespace std\n    auto_ptr_ref(_Tp1* __p) : _M_ptr(__p) {}\n };\n \n+/**\n+ *  A simple smart pointer providing strict ownership semantics.  (More later.)\n+*/\n template <class _Tp> class auto_ptr {\n private:\n   _Tp* _M_ptr;\n@@ -118,10 +121,6 @@ template <class _Tp> class auto_ptr {\n     }    \n   }\n \n-  // According to the C++ standard, these conversions are required.  Most\n-  // present-day compilers, however, do not enforce that requirement---and, \n-  // in fact, most present-day compilers do not support the language \n-  // features that these conversions rely on.\n public:\n   auto_ptr(auto_ptr_ref<_Tp> __ref) throw()\n     : _M_ptr(__ref._M_ptr) {}"}, {"sha": "751dffece775e568c0913608c29c05e0577e25ff", "filename": "libstdc++-v3/include/bits/stl_alloc.h", "status": "modified", "additions": 14, "deletions": 8, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/82b61df521d17a96f60e56ede06a55a8894b1c2e/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_alloc.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/82b61df521d17a96f60e56ede06a55a8894b1c2e/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_alloc.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_alloc.h?ref=82b61df521d17a96f60e56ede06a55a8894b1c2e", "patch": "@@ -49,8 +49,8 @@\n #define __GLIBCPP_INTERNAL_ALLOC_H\n \n /**\n+ *  @defgroup Allocators Memory Allocators\n  *  @maint\n- *  @addtogroup Allocators\n  *  stl_alloc.h implements some node allocators.  These are NOT the same as\n  *  allocators in the C++ standard, nor in the original H-P STL.  They do not\n  *  encapsulate different pointer types; we assume that there is only one\n@@ -72,8 +72,10 @@\n  *\n  *  \"SGI\" allocators may be wrapped in __allocator to convert the interface\n  *  into a \"standard\" one.\n- *\n  *  @endmaint\n+ *\n+ *  The canonical description of these classes is in docs/html/ext/howto.html\n+ *  or online at http://gcc.gnu.org/onlinedocs/libstdc++/ext/howto.html#3\n */\n \n \n@@ -91,8 +93,8 @@ namespace std\n    *  A new-based allocator, as required by the standard.  Allocation and\n    *  deallocation forward to global new and delete.  \"SGI\" style, minus\n    *  reallocate().\n-   *  (See @link Allocators allocators info @endlink for more.)\n    *  @endmaint\n+   *  (See @link Allocators allocators info @endlink for more.)\n   */\n   class __new_alloc \n   {\n@@ -114,8 +116,8 @@ namespace std\n    *  storage efficient.  The template argument is unused and is only present\n    *  to permit multiple instantiations (but see __default_alloc_template\n    *  for caveats).  \"SGI\" style, plus __set_malloc_handler for OOM conditions.\n-   *  (See @link Allocators allocators info @endlink for more.)\n    *  @endmaint\n+   *  (See @link Allocators allocators info @endlink for more.)\n   */\n   template <int __inst>\n     class __malloc_alloc_template \n@@ -212,8 +214,8 @@ namespace std\n    *\n    *  This is neither \"standard\"-conforming nor \"SGI\".  The _Alloc parameter\n    *  must be \"SGI\" style.\n-   *  (See @link Allocators allocators info @endlink for more.)\n    *  @endmaint\n+   *  (See @link Allocators allocators info @endlink for more.)\n   */\n   template<class _Tp, class _Alloc>\n   class __simple_alloc\n@@ -244,8 +246,8 @@ namespace std\n    *  \"There is some evidence that this can confuse Purify.\" - SGI comment\n    *\n    *  This adaptor is \"SGI\" style.  The _Alloc parameter must also be \"SGI\".\n-   *  (See @link Allocators allocators info @endlink for more.)\n    *  @endmaint\n+   *  (See @link Allocators allocators info @endlink for more.)\n   */\n   template <class _Alloc>\n   class __debug_alloc\n@@ -317,8 +319,8 @@ typedef __mem_interface __single_client_alloc;\n  *  approach.  If you do not wish to share the free lists with the main\n  *  default_alloc instance, instantiate this with a non-zero __inst.\n  *\n- *  (See @link Allocators allocators info @endlink for more.)\n  *  @endmaint\n+ *  (See @link Allocators allocators info @endlink for more.)\n */\n template <bool __threads, int __inst>\n class __default_alloc_template\n@@ -674,12 +676,14 @@ inline bool operator!=(const allocator<_T1>&, const allocator<_T2>&)\n \n \n /**\n+ *  @maint\n  *  Allocator adaptor to turn an \"SGI\" style allocator (e.g., __alloc,\n  *  __malloc_alloc_template) into a \"standard\" conforming allocator.  Note\n  *  that this adaptor does *not* assume that all objects of the underlying\n  *  alloc class are identical, nor does it assume that all of the underlying\n  *  alloc's member functions are static member functions.  Note, also, that\n  *  __allocator<_Tp, __alloc> is essentially the same thing as allocator<_Tp>.\n+ *  @endmaint\n  *  (See @link Allocators allocators info @endlink for more.)\n */\n template <class _Tp, class _Alloc>\n@@ -822,9 +826,10 @@ inline bool operator!=(const __debug_alloc<_Alloc>&,\n  *  The size_t parameters are \"standard\" style (see top of stl_alloc.h) in\n  *  that they take counts, not sizes.\n  *\n- *  (See @link Allocators allocators info @endlink for more.)\n  *  @endmaint\n+ *  (See @link Allocators allocators info @endlink for more.)\n */\n+//@{\n // The fully general version.\n template <class _Tp, class _Allocator>\n struct _Alloc_traits\n@@ -844,6 +849,7 @@ struct _Alloc_traits<_Tp, allocator<_Tp1> >\n   typedef __simple_alloc<_Tp, __alloc> _Alloc_type;\n   typedef allocator<_Tp> allocator_type;\n };\n+//@}\n \n //@{\n /// Versions for the predefined \"SGI\" style allocators."}, {"sha": "984acbfd5c12995285a88f648852da5ef4c8c4f2", "filename": "libstdc++-v3/include/bits/stl_bvector.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/82b61df521d17a96f60e56ede06a55a8894b1c2e/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_bvector.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/82b61df521d17a96f60e56ede06a55a8894b1c2e/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_bvector.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_bvector.h?ref=82b61df521d17a96f60e56ede06a55a8894b1c2e", "patch": "@@ -98,7 +98,7 @@ inline void swap(_Bit_reference __x, _Bit_reference __y)\n   __y = __tmp;\n }\n \n-struct _Bit_iterator_base : public random_access_iterator<bool, ptrdiff_t> \n+struct _Bit_iterator_base : public iterator<random_access_iterator_tag, bool>\n {\n   unsigned int* _M_p;\n   unsigned int _M_offset;"}, {"sha": "992510d139ea236adbbdfac0418f26a89d9fb2bb", "filename": "libstdc++-v3/include/bits/stl_iterator_base_types.h", "status": "modified", "additions": 39, "deletions": 57, "changes": 96, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/82b61df521d17a96f60e56ede06a55a8894b1c2e/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_iterator_base_types.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/82b61df521d17a96f60e56ede06a55a8894b1c2e/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_iterator_base_types.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_iterator_base_types.h?ref=82b61df521d17a96f60e56ede06a55a8894b1c2e", "patch": "@@ -56,86 +56,65 @@\n /** @file stl_iterator_base_types.h\n  *  This is an internal header file, included by other library headers.\n  *  You should not attempt to use it directly.\n+ *\n+ *  This file contains all of the general iterator-related utility types,\n+ *  such as iterator_traits and struct iterator.\n  */\n \n #ifndef __GLIBCPP_INTERNAL_ITERATOR_BASE_TYPES_H\n #define __GLIBCPP_INTERNAL_ITERATOR_BASE_TYPES_H\n \n-// This file contains all of the general iterator-related utility\n-// types, such as iterator_traits and struct iterator.\n-// The internal file stl_iterator.h contains predefined iterators, \n-// such as front_insert_iterator and istream_iterator.\n-\n #pragma GCC system_header\n \n namespace std\n {\n-\n+  /**\n+   *  @defgroup iterator_tags Iterator Tags\n+   *  These are empty types, used to distinguish different iterators.  The\n+   *  distinction is not made by what they contain, but simply by what they\n+   *  are.  Different underlying algorithms can then be used based on the\n+   *  different operations supporetd by different iterator types.\n+   *  @{\n+  */\n+  ///  Marking input iterators.\n   struct input_iterator_tag {};\n+  ///  Marking output iterators.\n   struct output_iterator_tag {};\n+  /// Forward iterators support a superset of input iterator operations.\n   struct forward_iterator_tag : public input_iterator_tag {};\n+  /// Bidirectional iterators support a superset of forward iterator operations.\n   struct bidirectional_iterator_tag : public forward_iterator_tag {};\n+  /// Random-access iterators support a superset of bidirectional iterator operations.\n   struct random_access_iterator_tag : public bidirectional_iterator_tag {};\n+  //@}\n \n-  // The base classes input_iterator, output_iterator, forward_iterator,\n-  // bidirectional_iterator, and random_access_iterator are not part of\n-  // the C++ standard.  (They have been replaced by struct iterator.)\n-  // They are included for backward compatibility with the HP STL.\n-\n-  template<typename _Tp, typename _Distance>\n-    struct input_iterator {\n-      typedef input_iterator_tag iterator_category;\n-      typedef _Tp                value_type;\n-      typedef _Distance          difference_type;\n-      typedef _Tp*               pointer;\n-      typedef _Tp&               reference;\n-    };\n-\n-  struct output_iterator {\n-    typedef output_iterator_tag iterator_category;\n-    typedef void                value_type;\n-    typedef void                difference_type;\n-    typedef void                pointer;\n-    typedef void                reference;\n-  };\n-\n-  template<typename _Tp, typename _Distance>\n-    struct forward_iterator {\n-      typedef forward_iterator_tag iterator_category;\n-      typedef _Tp                  value_type;\n-      typedef _Distance            difference_type;\n-      typedef _Tp*                 pointer;\n-      typedef _Tp&                 reference;\n-    };\n-\n-  template<typename _Tp, typename _Distance>\n-    struct bidirectional_iterator {\n-      typedef bidirectional_iterator_tag iterator_category;\n-      typedef _Tp                        value_type;\n-      typedef _Distance                  difference_type;\n-      typedef _Tp*                       pointer;\n-      typedef _Tp&                       reference;\n-    };\n-\n-  template<typename _Tp, typename _Distance>\n-    struct random_access_iterator {\n-      typedef random_access_iterator_tag iterator_category;\n-      typedef _Tp                        value_type;\n-      typedef _Distance                  difference_type;\n-      typedef _Tp*                       pointer;\n-      typedef _Tp&                       reference;\n-    };\n \n+  /**\n+   *  This class does nothing but define nested typedefs.  Iterator classes\n+   *  can inherit from this class to save some work.  The typedefs are then\n+   *  used in specializations and overloading.\n+  */\n   template<typename _Category, typename _Tp, typename _Distance = ptrdiff_t,\n \t   typename _Pointer = _Tp*, typename _Reference = _Tp&>\n     struct iterator {\n+      /// One of the @link iterator_tags tag types@endlink.\n       typedef _Category  iterator_category;\n+      /// The type \"pointed to\" by the iterator.\n       typedef _Tp        value_type;\n+      /// Distance between iterators is represented as this type.\n       typedef _Distance  difference_type;\n+      /// This type represents a pointer-to-value_type.\n       typedef _Pointer   pointer;\n+      /// This type represents a reference-to-value_type.\n       typedef _Reference reference;\n     };\n \n+  /**\n+   *  This class does nothing but define nested typedefs.  The general\n+   *  version simply \"forwards\" the nested typedefs from the Iterator\n+   *  argument.  Specialized versions for pointers and pointers-to-const\n+   *  provide tighter, more correct semantics.\n+  */\n   template<typename _Iterator>\n     struct iterator_traits {\n       typedef typename _Iterator::iterator_category iterator_category;\n@@ -163,9 +142,12 @@ namespace std\n       typedef const _Tp&                  reference;\n     };\n \n-  // This function is not a part of the C++ standard but is syntactic\n-  // sugar for internal library use only.\n-\n+  /**\n+   *  @maint\n+   *  This function is not a part of the C++ standard but is syntactic\n+   *  sugar for internal library use only.\n+   *  @endmaint\n+  */\n   template<typename _Iter>\n     inline typename iterator_traits<_Iter>::iterator_category\n     __iterator_category(const _Iter&)"}, {"sha": "59aa004296e8815e70e70c11980c6f664eaf87d3", "filename": "libstdc++-v3/include/bits/stl_raw_storage_iter.h", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/82b61df521d17a96f60e56ede06a55a8894b1c2e/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_raw_storage_iter.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/82b61df521d17a96f60e56ede06a55a8894b1c2e/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_raw_storage_iter.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_raw_storage_iter.h?ref=82b61df521d17a96f60e56ede06a55a8894b1c2e", "patch": "@@ -63,6 +63,10 @@\n \n namespace std\n {\n+  /**\n+   *  This iterator class lets algorithms store their results into\n+   *  uninitialized memory.\n+  */\n   template <class _ForwardIterator, class _Tp>\n   class raw_storage_iterator \n     : public iterator<output_iterator_tag, void, void, void, void>"}, {"sha": "40cac1cdd1870e7b9670e5e49d0ff10d8c01dc0f", "filename": "libstdc++-v3/include/bits/stl_tempbuf.h", "status": "modified", "additions": 7, "deletions": 10, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/82b61df521d17a96f60e56ede06a55a8894b1c2e/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_tempbuf.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/82b61df521d17a96f60e56ede06a55a8894b1c2e/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_tempbuf.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_tempbuf.h?ref=82b61df521d17a96f60e56ede06a55a8894b1c2e", "patch": "@@ -81,26 +81,23 @@ __get_temporary_buffer(ptrdiff_t __len, _Tp*)\n   return pair<_Tp*, ptrdiff_t>((_Tp*)0, 0);\n }\n \n+/**\n+ *  This is a mostly-useless wrapper around malloc().\n+*/\n template <class _Tp>\n inline pair<_Tp*, ptrdiff_t> get_temporary_buffer(ptrdiff_t __len) {\n   return __get_temporary_buffer(__len, (_Tp*) 0);\n }\n \n-// This overload is not required by the standard; it is an extension.\n-// It is supported for backward compatibility with the HP STL, and\n-// because not all compilers support the language feature (explicit\n-// function template arguments) that is required for the standard\n-// version of get_temporary_buffer.\n-template <class _Tp>\n-inline pair<_Tp*, ptrdiff_t> get_temporary_buffer(ptrdiff_t __len, _Tp*) {\n-  return __get_temporary_buffer(__len, (_Tp*) 0);\n-}\n-\n+/**\n+ *  The companion to get_temporary_buffer().\n+*/\n template <class _Tp>\n void return_temporary_buffer(_Tp* __p) {\n   free(__p);\n }\n \n+\n template <class _ForwardIterator, class _Tp>\n class _Temporary_buffer {\n private:"}, {"sha": "c51ba58c079f30c90851ac9004539a1369b7f2fc", "filename": "libstdc++-v3/include/bits/stl_uninitialized.h", "status": "modified", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/82b61df521d17a96f60e56ede06a55a8894b1c2e/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_uninitialized.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/82b61df521d17a96f60e56ede06a55a8894b1c2e/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_uninitialized.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_uninitialized.h?ref=82b61df521d17a96f60e56ede06a55a8894b1c2e", "patch": "@@ -94,6 +94,15 @@ namespace std\n \t}\n     }\n \n+  /**\n+   *  @brief Copies the range [first,last) into result.\n+   *  @param  first  An input iterator.\n+   *  @param  last   An input iterator.\n+   *  @param  result An output iterator.\n+   *  @return   result + (first - last)\n+   *\n+   *  Like copy(), but does not require an initialized output range.\n+  */\n   template<typename _InputIter, typename _ForwardIter>\n     inline _ForwardIter\n     uninitialized_copy(_InputIter __first, _InputIter __last, _ForwardIter __result)\n@@ -159,6 +168,15 @@ namespace std\n \t\t\t\t    __iterator_category(__first));\n     }\n \n+  /**\n+   *  @brief Copies the range [first,last) into result.\n+   *  @param  first  An input iterator.\n+   *  @param  last   An input iterator.\n+   *  @param  result An output iterator.\n+   *  @return   result + (first - last)\n+   *\n+   *  Like copy(), but does not require an initialized output range.\n+  */\n   template<typename _InputIter, typename _Size, typename _ForwardIter>\n     inline pair<_InputIter, _ForwardIter>\n     uninitialized_copy_n(_InputIter __first, _Size __count,\n@@ -192,6 +210,15 @@ namespace std\n \t}\n     }\n \n+  /**\n+   *  @brief Copies the value x into the range [first,last).\n+   *  @param  first  An input iterator.\n+   *  @param  last   An input iterator.\n+   *  @param  x      The source value.\n+   *  @return   Nothing.\n+   *\n+   *  Like fill(), but does not require an initialized output range.\n+  */\n   template<typename _ForwardIter, typename _Tp>\n     inline void\n     uninitialized_fill(_ForwardIter __first, _ForwardIter __last, const _Tp& __x)\n@@ -229,6 +256,15 @@ namespace std\n \t}\n     }\n \n+  /**\n+   *  @brief Copies the value x into the range [first,first+n).\n+   *  @param  first  An input iterator.\n+   *  @param  n      The number of copies to make.\n+   *  @param  x      The source value.\n+   *  @return   first+n\n+   *\n+   *  Like fill_n(), but does not require an initialized output range.\n+  */\n   template<typename _ForwardIter, typename _Size, typename _Tp>\n     inline _ForwardIter \n     uninitialized_fill_n(_ForwardIter __first, _Size __n, const _Tp& __x)"}, {"sha": "089561a80bf8ee9c5b8f667625b39412a7094664", "filename": "libstdc++-v3/include/ext/stl_rope.h", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/82b61df521d17a96f60e56ede06a55a8894b1c2e/libstdc%2B%2B-v3%2Finclude%2Fext%2Fstl_rope.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/82b61df521d17a96f60e56ede06a55a8894b1c2e/libstdc%2B%2B-v3%2Finclude%2Fext%2Fstl_rope.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fstl_rope.h?ref=82b61df521d17a96f60e56ede06a55a8894b1c2e", "patch": "@@ -122,7 +122,8 @@ class char_producer {\n // little like containers.\n \n template<class _Sequence, size_t _Buf_sz = 100>\n-class sequence_buffer : public output_iterator {\n+class sequence_buffer : public iterator<output_iterator_tag,void,void,void,void>\n+{\n     public:\n         typedef typename _Sequence::value_type value_type;\n     protected:\n@@ -837,7 +838,8 @@ class _Rope_char_ptr_proxy {\n \n template<class _CharT, class _Alloc>\n class _Rope_iterator_base\n-  : public random_access_iterator<_CharT, ptrdiff_t> {\n+  : public iterator<random_access_iterator_tag, _CharT>\n+{\n     friend class rope<_CharT,_Alloc>;\n   public:\n     typedef _Alloc _allocator_type; // used in _Rope_rotate, VC++ workaround"}]}