{"sha": "ed6ba1a5c3ba1099b6dfddf1ee7623b30942e9bf", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWQ2YmExYTVjM2JhMTA5OWI2ZGZkZGYxZWU3NjIzYjMwOTQyZTliZg==", "commit": {"author": {"name": "Roman Zippel", "email": "zippel@linux-m68k.org", "date": "2001-07-20T20:19:12Z"}, "committer": {"name": "Jan Hubicka", "email": "hubicka@gcc.gnu.org", "date": "2001-07-20T20:19:12Z"}, "message": "m68k.md (zero_extend?i?i2 expander): Use gen_lowpart instead of doing the change by hand.\n\n\t* m68k.md (zero_extend?i?i2 expander): Use gen_lowpart instead\n\tof doing the change by hand.\n\nCo-Authored-By: Jan Hubicka <jh@suse.cz>\n\nFrom-SVN: r44212", "tree": {"sha": "c7394fee0a31321aa8e2cfda3cb2cd138f61e0ff", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c7394fee0a31321aa8e2cfda3cb2cd138f61e0ff"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ed6ba1a5c3ba1099b6dfddf1ee7623b30942e9bf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ed6ba1a5c3ba1099b6dfddf1ee7623b30942e9bf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ed6ba1a5c3ba1099b6dfddf1ee7623b30942e9bf", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ed6ba1a5c3ba1099b6dfddf1ee7623b30942e9bf/comments", "author": null, "committer": null, "parents": [{"sha": "38f4324cb9c84ae6afd935a89c2cbb3fb2a1d6d6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/38f4324cb9c84ae6afd935a89c2cbb3fb2a1d6d6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/38f4324cb9c84ae6afd935a89c2cbb3fb2a1d6d6"}], "stats": {"total": 24, "additions": 9, "deletions": 15}, "files": [{"sha": "67572ed084f804d275e7cdba4e74d5b82a01dc53", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ed6ba1a5c3ba1099b6dfddf1ee7623b30942e9bf/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ed6ba1a5c3ba1099b6dfddf1ee7623b30942e9bf/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=ed6ba1a5c3ba1099b6dfddf1ee7623b30942e9bf", "patch": "@@ -1,3 +1,9 @@\n+Fri Jul 20 22:14:49 CEST 2001  Roman Zippel  <zippel@linux-m68k.org>\n+\t\t\t       Jan Hubicka  <jh@suse.cz>\n+\n+\t* m68k.md (zero_extend?i?i2 expander): Use gen_lowpart instead\n+\tof doing the change by hand.\n+\n Fri Jul 20 21:59:42 CEST 2001  Jan Hubicka  <jh@suse.cz>\n \n \t* rtlanal.c (set_noop_p): Return true for noop jumps."}, {"sha": "f81138e9af5d3eb65a10db54f90dfe987ce7a3e7", "filename": "gcc/config/m68k/m68k.md", "status": "modified", "additions": 3, "deletions": 15, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ed6ba1a5c3ba1099b6dfddf1ee7623b30942e9bf/gcc%2Fconfig%2Fm68k%2Fm68k.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ed6ba1a5c3ba1099b6dfddf1ee7623b30942e9bf/gcc%2Fconfig%2Fm68k%2Fm68k.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68k%2Fm68k.md?ref=ed6ba1a5c3ba1099b6dfddf1ee7623b30942e9bf", "patch": "@@ -1551,11 +1551,7 @@\n   \"\n {\n   operands[1] = make_safe_from (operands[1], operands[0]);\n-  if (GET_CODE (operands[0]) == SUBREG)\n-    operands[2] = gen_rtx_SUBREG (HImode, SUBREG_REG (operands[0]),\n-\t\t\t\t  SUBREG_BYTE (operands[0]));\n-  else\n-    operands[2] = gen_rtx_SUBREG (HImode, operands[0], 0);\n+  operands[2] = gen_lowpart (HImode, operands[0]);\n }\")\n \n (define_expand \"zero_extendqihi2\"\n@@ -1567,11 +1563,7 @@\n   \"\n {\n   operands[1] = make_safe_from (operands[1], operands[0]);\n-  if (GET_CODE (operands[0]) == SUBREG)\n-    operands[2] = gen_rtx_SUBREG (QImode, SUBREG_REG (operands[0]),\n-\t\t\t\t  SUBREG_BYTE (operands[0]));\n-  else\n-    operands[2] = gen_rtx_SUBREG (QImode, operands[0], 0);\n+  operands[2] = gen_lowpart (QImode, operands[0]);\n }\")\n \n (define_expand \"zero_extendqisi2\"\n@@ -1583,11 +1575,7 @@\n   \"\n {\n   operands[1] = make_safe_from (operands[1], operands[0]);\n-  if (GET_CODE (operands[0]) == SUBREG)\n-    operands[2] = gen_rtx_SUBREG (QImode, SUBREG_REG (operands[0]),\n-\t\t\t\t  SUBREG_BYTE (operands[0]));\n-  else\n-    operands[2] = gen_rtx_SUBREG (QImode, operands[0], 0);\n+  operands[2] = gen_lowpart (QImode, operands[0]);\n }\")\n \f\n ;; Patterns to recognize zero-extend insns produced by the combiner."}]}