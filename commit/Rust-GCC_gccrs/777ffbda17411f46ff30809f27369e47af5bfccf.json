{"sha": "777ffbda17411f46ff30809f27369e47af5bfccf", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Nzc3ZmZiZGExNzQxMWY0NmZmMzA4MDlmMjczNjllNDdhZjViZmNjZg==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@yorick.cygnus.com", "date": "1999-09-16T00:02:09Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "1999-09-16T00:02:09Z"}, "message": "lex.c (cp_pragma_implementation): Allow #pragma implementation in header files.\n\n\t* lex.c (cp_pragma_implementation): Allow #pragma implementation\n\tin header files.\n\nFrom-SVN: r29444", "tree": {"sha": "bc99db4da32e7577215fbd3f950bbd30b6ab7dae", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/bc99db4da32e7577215fbd3f950bbd30b6ab7dae"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/777ffbda17411f46ff30809f27369e47af5bfccf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/777ffbda17411f46ff30809f27369e47af5bfccf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/777ffbda17411f46ff30809f27369e47af5bfccf", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/777ffbda17411f46ff30809f27369e47af5bfccf/comments", "author": null, "committer": null, "parents": [{"sha": "d4c2d8af7649dde57e7a9089755f2842eed8a34f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d4c2d8af7649dde57e7a9089755f2842eed8a34f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d4c2d8af7649dde57e7a9089755f2842eed8a34f"}], "stats": {"total": 66, "additions": 22, "deletions": 44}, "files": [{"sha": "69250a4954470d3bc8565005bd990da61c9d3423", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/777ffbda17411f46ff30809f27369e47af5bfccf/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/777ffbda17411f46ff30809f27369e47af5bfccf/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=777ffbda17411f46ff30809f27369e47af5bfccf", "patch": "@@ -1,3 +1,8 @@\n+1999-09-15  Jason Merrill  <jason@yorick.cygnus.com>\n+\n+\t* lex.c (cp_pragma_implementation): Allow #pragma implementation\n+\tin header files.\n+\n 1999-09-15  Richard Henderson  <rth@cygnus.com>\n \n \t* lex.c (mark_impl_file_chain): Follow the next chain.\n@@ -13,11 +18,6 @@\n \n \t* typeck2.c (ack): Don't declare progname.\n \n-1999-09-15  Nathan Sidwell  <nathan@acm.org>\n-\n-\t* typeck.c (expr_sizeof): Reinstall and augment OFFSET_REF\n-\tcomment.\n-\n 1999-09-14  Alexandre Oliva  <oliva@lsd.ic.unicamp.br>\n \n \t* lex.c (cp_pragma_interface, cp_pragma_implementation): Copy"}, {"sha": "77b5e3c23d4328c6503f0b6561aa59853209b284", "filename": "gcc/cp/lex.c", "status": "modified", "additions": 17, "deletions": 39, "changes": 56, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/777ffbda17411f46ff30809f27369e47af5bfccf/gcc%2Fcp%2Flex.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/777ffbda17411f46ff30809f27369e47af5bfccf/gcc%2Fcp%2Flex.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Flex.c?ref=777ffbda17411f46ff30809f27369e47af5bfccf", "patch": "@@ -1238,53 +1238,31 @@ cp_pragma_interface (main_filename)\n   TREE_INT_CST_HIGH (fileinfo) = interface_unknown;\n }\n \n+/* Note that we have seen a #pragma implementation for the key MAIN_FILENAME.\n+   We used to only allow this at toplevel, but that restriction was buggy\n+   in older compilers and it seems reasonable to allow it in the headers\n+   themselves, too.  It only needs to precede the matching #p interface.\n+\n+   We don't touch interface_only or interface_unknown; the user must specify\n+   a matching #p interface for this to have any effect.  */\n+\n static void\n cp_pragma_implementation (main_filename)\n      char *main_filename;\n {\n-  tree fileinfo \n-    = TIME_IDENTIFIER_FILEINFO (get_time_identifier (input_filename));\n-\n-  if (impl_file_chain)\n+  struct impl_files *ifiles = impl_file_chain;\n+  for (; ifiles; ifiles = ifiles->next)\n     {\n-      struct impl_files *ifiles = impl_file_chain;\n-      while (ifiles)\n-\t{\n-\t  if (! strcmp (ifiles->filename, main_filename))\n-\t    break;\n-\t  ifiles = ifiles->next;\n-\t}\n-      if (ifiles == 0)\n-\t{\n-\t  ifiles = (struct impl_files*) xmalloc (sizeof (struct impl_files));\n-\t  ifiles->filename = ggc_alloc_string (main_filename, -1);\n-\t  ifiles->next = impl_file_chain;\n-\t  impl_file_chain = ifiles;\n-\t}\n+      if (! strcmp (ifiles->filename, main_filename))\n+\tbreak;\n     }\n-  else if ((main_input_filename != 0\n-\t    && ! strcmp (main_input_filename, input_filename))\n-\t   || ! strcmp (main_filename, input_filename))\n+  if (ifiles == 0)\n     {\n-      impl_file_chain = (struct impl_files*) xmalloc (sizeof (struct impl_files));\n-      impl_file_chain->filename = ggc_alloc_string (main_filename, -1);\n-      impl_file_chain->next = 0;\n+      ifiles = (struct impl_files*) xmalloc (sizeof (struct impl_files));\n+      ifiles->filename = ggc_alloc_string (main_filename, -1);\n+      ifiles->next = impl_file_chain;\n+      impl_file_chain = ifiles;\n     }\n-  else\n-    error (\"`#pragma implementation' can only appear at top-level\");\n-  interface_only = 0;\n-#if 1\n-  /* We make this non-zero so that we infer decl linkage\n-     in the impl file only for variables first declared\n-     in the interface file.  */\n-  interface_unknown = 1;\n-#else\n-  /* We make this zero so that templates in the impl\n-     file will be emitted properly.  */\n-  interface_unknown = 0;\n-#endif\n-  TREE_INT_CST_LOW (fileinfo) = interface_only;\n-  TREE_INT_CST_HIGH (fileinfo) = interface_unknown;\n }\n \f\n /* Set up the state required to correctly handle the definition of the"}]}