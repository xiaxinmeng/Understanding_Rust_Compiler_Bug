{"sha": "709716b9f49f2fcf46f319000562cf6e61bd2f71", "node_id": "C_kwDOANBUbNoAKDcwOTcxNmI5ZjQ5ZjJmY2Y0NmYzMTkwMDA1NjJjZjZlNjFiZDJmNzE", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2021-11-24T09:08:35Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2021-11-24T09:08:35Z"}, "message": "attribs: Fix ICEs on attributes starting with _ [PR103365]\n\nAs the patch shows, we have quite a few asserts that we don't call\nlookup_attribute etc. with attr_name that starts with an underscore,\nto make sure nobody is trying to call it with non-canonicalized\nattribute name like \"__cold__\" instead of \"cold\".\nWe canonicalize only attributes that start with 2 underscores and end\nwith 2 underscores though.\nBefore Marek's patch, that wasn't an issue, we had no attributes like\n\"_foo\" or \"__bar_\" etc., so lookup_scoped_attribute_spec would\nalways return NULL for those and we wouldn't try to register them,\nlook them up etc., just with -Wattributes would warn about them.\nBut now, as the new testcases show, users can actually request such\nattributes to be ignored, and we ICE for those during\nregister_scoped_attribute and when that is fixed, ICE later on when\nsomebody uses those attributes because they will be looked up\nto find out that they should be ignored.\n\nSo, the following patch instead of or in addition to, depending on\nhow performance sensitive a particular spot is, checking that\nattribute doesn't start with underscore allows attribute\nnames that start with underscore as long as it doesn't canonicalize\n(i.e. doesn't start and end with 2 underscores).\nIn addition to that, I've noticed lookup_attribute_by_prefix\nwas calling get_attribute_name twice unnecessarily, and 2 tests\nwere running in c++98 mode with -std=c++98 -std=c++11 which IMHO\nisn't useful because -std=c++11 testing is done too when testing\nall language versions.\n\n2021-11-24  Jakub Jelinek  <jakub@redhat.com>\n\n\tPR middle-end/103365\n\t* attribs.h (lookup_attribute): Allow attr_name to start with\n\tunderscore, as long as canonicalize_attr_name returns false.\n\t(lookup_attribute_by_prefix): Don't call get_attribute_name twice.\n\t* attribs.c (extract_attribute_substring): Reimplement using\n\tcanonicalize_attr_name.\n\t(register_scoped_attribute): Change gcc_assert into\n\tgcc_checking_assert, verify !canonicalize_attr_name rather than\n\tthat str.str doesn't start with '_'.\n\n\t* c-c++-common/Wno-attributes-1.c: Require effective target\n\tc || c++11 and drop dg-additional-options.\n\t* c-c++-common/Wno-attributes-2.c: Likewise.\n\t* c-c++-common/Wno-attributes-4.c: New test.\n\t* c-c++-common/Wno-attributes-5.c: New test.", "tree": {"sha": "a925e04692c35338c72a42c45f683f46750bbf2b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a925e04692c35338c72a42c45f683f46750bbf2b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/709716b9f49f2fcf46f319000562cf6e61bd2f71", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/709716b9f49f2fcf46f319000562cf6e61bd2f71", "html_url": "https://github.com/Rust-GCC/gccrs/commit/709716b9f49f2fcf46f319000562cf6e61bd2f71", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/709716b9f49f2fcf46f319000562cf6e61bd2f71/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "04eccbbe3d9a4e9d2f8f43dba8ac4cb686029fb2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/04eccbbe3d9a4e9d2f8f43dba8ac4cb686029fb2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/04eccbbe3d9a4e9d2f8f43dba8ac4cb686029fb2"}], "stats": {"total": 41, "additions": 27, "deletions": 14}, "files": [{"sha": "c252f5af07b4296630f833a5e4bc8bf60244e049", "filename": "gcc/attribs.c", "status": "modified", "additions": 2, "deletions": 7, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/709716b9f49f2fcf46f319000562cf6e61bd2f71/gcc%2Fattribs.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/709716b9f49f2fcf46f319000562cf6e61bd2f71/gcc%2Fattribs.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fattribs.c?ref=709716b9f49f2fcf46f319000562cf6e61bd2f71", "patch": "@@ -115,12 +115,7 @@ static const struct attribute_spec empty_attribute_table[] =\n static void\n extract_attribute_substring (struct substring *str)\n {\n-  if (str->length > 4 && str->str[0] == '_' && str->str[1] == '_'\n-      && str->str[str->length - 1] == '_' && str->str[str->length - 2] == '_')\n-    {\n-      str->length -= 4;\n-      str->str += 2;\n-    }\n+  canonicalize_attr_name (str->str, str->length);\n }\n \n /* Insert an array of attributes ATTRIBUTES into a namespace.  This\n@@ -387,7 +382,7 @@ register_scoped_attribute (const struct attribute_spec *attr,\n \n   /* Attribute names in the table must be in the form 'text' and not\n      in the form '__text__'.  */\n-  gcc_assert (str.length > 0 && str.str[0] != '_');\n+  gcc_checking_assert (!canonicalize_attr_name (str.str, str.length));\n \n   slot = name_space->attribute_hash\n \t ->find_slot_with_hash (&str, substring_hash (str.str, str.length),"}, {"sha": "73f0ccc24b81faf30c6241fa8d9568c045913194", "filename": "gcc/attribs.h", "status": "modified", "additions": 8, "deletions": 3, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/709716b9f49f2fcf46f319000562cf6e61bd2f71/gcc%2Fattribs.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/709716b9f49f2fcf46f319000562cf6e61bd2f71/gcc%2Fattribs.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fattribs.h?ref=709716b9f49f2fcf46f319000562cf6e61bd2f71", "patch": "@@ -188,7 +188,11 @@ is_attribute_p (const char *attr_name, const_tree ident)\n static inline tree\n lookup_attribute (const char *attr_name, tree list)\n {\n-  gcc_checking_assert (attr_name[0] != '_');\n+  if (CHECKING_P && attr_name[0] != '_')\n+    {\n+      size_t attr_len = strlen (attr_name);\n+      gcc_checking_assert (!canonicalize_attr_name (attr_name, attr_len));\n+    }\n   /* In most cases, list is NULL_TREE.  */\n   if (list == NULL_TREE)\n     return NULL_TREE;\n@@ -219,15 +223,16 @@ lookup_attribute_by_prefix (const char *attr_name, tree list)\n       size_t attr_len = strlen (attr_name);\n       while (list)\n \t{\n-\t  size_t ident_len = IDENTIFIER_LENGTH (get_attribute_name (list));\n+\t  tree name = get_attribute_name (list);\n+\t  size_t ident_len = IDENTIFIER_LENGTH (name);\n \n \t  if (attr_len > ident_len)\n \t    {\n \t      list = TREE_CHAIN (list);\n \t      continue;\n \t    }\n \n-\t  const char *p = IDENTIFIER_POINTER (get_attribute_name (list));\n+\t  const char *p = IDENTIFIER_POINTER (name);\n \t  gcc_checking_assert (attr_len == 0 || p[0] != '_');\n \n \t  if (strncmp (attr_name, p, attr_len) == 0)"}, {"sha": "84a84ea33523116dedef803a509aa7099bb8ecee", "filename": "gcc/testsuite/c-c++-common/Wno-attributes-1.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/709716b9f49f2fcf46f319000562cf6e61bd2f71/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2FWno-attributes-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/709716b9f49f2fcf46f319000562cf6e61bd2f71/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2FWno-attributes-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2FWno-attributes-1.c?ref=709716b9f49f2fcf46f319000562cf6e61bd2f71", "patch": "@@ -1,6 +1,5 @@\n /* PR c++/101940 */\n-/* { dg-do compile } */\n-/* { dg-additional-options \"-std=c++11\" { target c++ } } */\n+/* { dg-do compile { target { c || c++11 } } } */\n /* { dg-additional-options \"-Wno-attributes=company::,yoyodyne::attr\" } */\n /* { dg-additional-options \"-Wno-attributes=c1::attr,c1::attr,c1::__attr__\" } */\n /* { dg-additional-options \"-Wno-attributes=c2::,c2::attr\" } */"}, {"sha": "8e044011d12b7c35c7d6f36ad804feb16f2915e1", "filename": "gcc/testsuite/c-c++-common/Wno-attributes-2.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/709716b9f49f2fcf46f319000562cf6e61bd2f71/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2FWno-attributes-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/709716b9f49f2fcf46f319000562cf6e61bd2f71/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2FWno-attributes-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2FWno-attributes-2.c?ref=709716b9f49f2fcf46f319000562cf6e61bd2f71", "patch": "@@ -1,6 +1,5 @@\n /* PR c++/101940 */\n-/* { dg-do compile } */\n-/* { dg-additional-options \"-std=c++11\" { target c++ } } */\n+/* { dg-do compile { target { c || c++11 } } } */\n \n #pragma GCC diagnostic ignored_attributes \"company::,yoyodyne::attr\"\n #pragma GCC diagnostic ignored_attributes \"c1::attr,c1::attr,c1::__attr__\""}, {"sha": "c5ea3e33776e40c81ee6f32d05b85de81318d92a", "filename": "gcc/testsuite/c-c++-common/Wno-attributes-4.c", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/709716b9f49f2fcf46f319000562cf6e61bd2f71/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2FWno-attributes-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/709716b9f49f2fcf46f319000562cf6e61bd2f71/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2FWno-attributes-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2FWno-attributes-4.c?ref=709716b9f49f2fcf46f319000562cf6e61bd2f71", "patch": "@@ -0,0 +1,7 @@\n+/* PR middle-end/103365 */\n+/* { dg-do compile { target { c || c++11 } } } */\n+/* { dg-additional-options \"-Wno-attributes=foo::_bar\" } */\n+/* { dg-additional-options \"-Wno-attributes=_foo::bar\" } */\n+\n+[[foo::_bar]] void foo (void);\n+[[_foo::bar]] void bar (void);"}, {"sha": "9c0c3da8442e20dd7d980647431d42278dbd9568", "filename": "gcc/testsuite/c-c++-common/Wno-attributes-5.c", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/709716b9f49f2fcf46f319000562cf6e61bd2f71/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2FWno-attributes-5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/709716b9f49f2fcf46f319000562cf6e61bd2f71/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2FWno-attributes-5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2FWno-attributes-5.c?ref=709716b9f49f2fcf46f319000562cf6e61bd2f71", "patch": "@@ -0,0 +1,8 @@\n+/* PR middle-end/103365 */\n+/* { dg-do compile { target { c || c++11 } } } */\n+\n+#pragma GCC diagnostic ignored_attributes \"foo::_bar\"\n+#pragma GCC diagnostic ignored_attributes \"_foo::bar\"\n+\n+[[foo::_bar]] void foo (void);\n+[[_foo::bar]] void bar (void);"}]}