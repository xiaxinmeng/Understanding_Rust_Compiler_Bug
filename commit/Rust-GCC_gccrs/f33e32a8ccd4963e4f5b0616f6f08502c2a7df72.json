{"sha": "f33e32a8ccd4963e4f5b0616f6f08502c2a7df72", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjMzZTMyYThjY2Q0OTYzZTRmNWIwNjE2ZjZmMDg1MDJjMmE3ZGY3Mg==", "commit": {"author": {"name": "Mark Mitchell", "email": "mark@codesourcery.com", "date": "1999-06-16T10:15:35Z"}, "committer": {"name": "Mark Mitchell", "email": "mmitchel@gcc.gnu.org", "date": "1999-06-16T10:15:35Z"}, "message": "init.c (expand_cleanup_for_base): New function, split out from ...\n\n\t* init.c (expand_cleanup_for_base): New function, split out\n\tfrom ...\n\t(emit_base_init): Here.\n\t(expand_aggr_vbase_init): Use it.\n\nFrom-SVN: r27543", "tree": {"sha": "adc23bf6c9b959ce6ce06b4649c61cb83d76b9c3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/adc23bf6c9b959ce6ce06b4649c61cb83d76b9c3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f33e32a8ccd4963e4f5b0616f6f08502c2a7df72", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f33e32a8ccd4963e4f5b0616f6f08502c2a7df72", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f33e32a8ccd4963e4f5b0616f6f08502c2a7df72", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f33e32a8ccd4963e4f5b0616f6f08502c2a7df72/comments", "author": null, "committer": null, "parents": [{"sha": "8c225122ffcee090ea1afa0b333afbf09241e19c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8c225122ffcee090ea1afa0b333afbf09241e19c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8c225122ffcee090ea1afa0b333afbf09241e19c"}], "stats": {"total": 67, "additions": 55, "deletions": 12}, "files": [{"sha": "53e5f6147631ada833ac2a4e23730ec6f9c2eb7f", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f33e32a8ccd4963e4f5b0616f6f08502c2a7df72/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f33e32a8ccd4963e4f5b0616f6f08502c2a7df72/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=f33e32a8ccd4963e4f5b0616f6f08502c2a7df72", "patch": "@@ -1,3 +1,10 @@\n+1999-06-16  Mark Mitchell  <mark@codesourcery.com>\n+\n+\t* init.c (expand_cleanup_for_base): New function, split out\n+\tfrom ...\n+\t(emit_base_init): Here.\n+\t(expand_aggr_vbase_init): Use it.\n+\n 1999-06-15  Mark Mitchell  <mark@codesourcery.com>\n \n \t* cp-tree.h (class_cache_firstobj): Declare."}, {"sha": "852bb0b530da8e5dbd9dc47ddd0e43590b75e63b", "filename": "gcc/cp/init.c", "status": "modified", "additions": 24, "deletions": 12, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f33e32a8ccd4963e4f5b0616f6f08502c2a7df72/gcc%2Fcp%2Finit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f33e32a8ccd4963e4f5b0616f6f08502c2a7df72/gcc%2Fcp%2Finit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Finit.c?ref=f33e32a8ccd4963e4f5b0616f6f08502c2a7df72", "patch": "@@ -60,6 +60,7 @@ static tree initializing_context PROTO((tree));\n static void expand_vec_init_try_block PROTO((tree));\n static void expand_vec_init_catch_clause PROTO((tree, tree, tree, tree));\n static tree build_java_class_ref PROTO((tree));\n+static void expand_cleanup_for_base PROTO((tree));\n \n /* Cache the identifier nodes for the magic field of a new cookie.  */\n static tree nc_nelts_field_id;\n@@ -597,18 +598,7 @@ emit_base_init (t, immediately)\n \t  free_temp_slots ();\n \t}\n \n-      if (TYPE_NEEDS_DESTRUCTOR (BINFO_TYPE (base_binfo)))\n-\t{\n-\t  tree expr;\n-\n-\t  /* All cleanups must be on the function_obstack.  */\n-\t  push_obstacks_nochange ();\n-\t  resume_temporary_allocation ();\n-\t  expr = build_partial_cleanup_for (base_binfo);\n-\t  pop_obstacks ();\n-\t  add_partial_entry (expr);\n-\t}\n-\n+      expand_cleanup_for_base (base_binfo);\n       rbase_init_list = TREE_CHAIN (rbase_init_list);\n     }\n \n@@ -765,6 +755,27 @@ expand_virtual_init (binfo, decl)\n   expand_expr_stmt (build_modify_expr (vtbl_ptr, NOP_EXPR, vtbl));\n }\n \n+/* If an exception is thrown in a constructor, those base classes already\n+   constructed must be destroyed.  This function creates the cleanup\n+   for BINFO, which has just been constructed.  */\n+\n+static void\n+expand_cleanup_for_base (binfo)\n+     tree binfo;\n+{\n+  tree expr;\n+\n+  if (!TYPE_NEEDS_DESTRUCTOR (BINFO_TYPE (binfo)))\n+    return;\n+\n+  /* All cleanups must be on the function_obstack.  */\n+  push_obstacks_nochange ();\n+  resume_temporary_allocation ();\n+  expr = build_partial_cleanup_for (binfo);\n+  pop_obstacks ();\n+  add_partial_entry (expr);\n+}\n+\n /* Subroutine of `expand_aggr_vbase_init'.\n    BINFO is the binfo of the type that is being initialized.\n    INIT_LIST is the list of initializers for the virtual baseclass.  */\n@@ -816,6 +827,7 @@ expand_aggr_vbase_init (binfo, exp, addr, init_list)\n \t  expand_aggr_vbase_init_1 (vbases, exp,\n \t\t\t\t    TREE_OPERAND (TREE_VALUE (tmp), 0),\n \t\t\t\t    init_list);\n+\t  expand_cleanup_for_base (vbases);\n \t}\n     }\n }"}, {"sha": "cf665d466249f8662846e1796819e9635e8e003d", "filename": "gcc/testsuite/g++.old-deja/g++.eh/vbase1.C", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f33e32a8ccd4963e4f5b0616f6f08502c2a7df72/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.eh%2Fvbase1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f33e32a8ccd4963e4f5b0616f6f08502c2a7df72/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.eh%2Fvbase1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.eh%2Fvbase1.C?ref=f33e32a8ccd4963e4f5b0616f6f08502c2a7df72", "patch": "@@ -0,0 +1,24 @@\n+// Origin: Mark Mitchell <mark@codesourcery.com>\n+\n+int i;\n+int j;\n+\n+struct B\n+{\n+  B() { i = 1; }\n+  ~B() { j = 7; }\n+};\n+\n+struct D : virtual public B {\n+  D () { throw 3; }\n+};\n+\n+int main ()\n+{\n+  try {\n+    D d;\n+  } catch (int) {\n+    if (i != 1 || j != 7)\n+      return 1;\n+  }\n+}"}]}