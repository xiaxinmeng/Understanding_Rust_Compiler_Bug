{"sha": "535d5152fedfcf2c404a84d2655942a4eb86734f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTM1ZDUxNTJmZWRmY2YyYzQwNGE4NGQyNjU1OTQyYTRlYjg2NzM0Zg==", "commit": {"author": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2014-05-05T19:05:59Z"}, "committer": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2014-05-05T19:05:59Z"}, "message": "compiler: Use backend interface for sink expressions.\n\nFrom-SVN: r210078", "tree": {"sha": "46982fde598833169f721a2dd7cf05daaa13432a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/46982fde598833169f721a2dd7cf05daaa13432a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/535d5152fedfcf2c404a84d2655942a4eb86734f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/535d5152fedfcf2c404a84d2655942a4eb86734f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/535d5152fedfcf2c404a84d2655942a4eb86734f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/535d5152fedfcf2c404a84d2655942a4eb86734f/comments", "author": null, "committer": null, "parents": [{"sha": "36d06319953f53c821094eadd2310cb2dd3460fe", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/36d06319953f53c821094eadd2310cb2dd3460fe", "html_url": "https://github.com/Rust-GCC/gccrs/commit/36d06319953f53c821094eadd2310cb2dd3460fe"}], "stats": {"total": 21, "additions": 16, "deletions": 5}, "files": [{"sha": "a4f959da09d0ed0efb38e76197ebc24cfaef6234", "filename": "gcc/go/gofrontend/expressions.cc", "status": "modified", "additions": 16, "deletions": 5, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/535d5152fedfcf2c404a84d2655942a4eb86734f/gcc%2Fgo%2Fgofrontend%2Fexpressions.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/535d5152fedfcf2c404a84d2655942a4eb86734f/gcc%2Fgo%2Fgofrontend%2Fexpressions.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Fexpressions.cc?ref=535d5152fedfcf2c404a84d2655942a4eb86734f", "patch": "@@ -931,7 +931,7 @@ class Sink_expression : public Expression\n  public:\n   Sink_expression(Location location)\n     : Expression(EXPRESSION_SINK, location),\n-      type_(NULL), var_(NULL_TREE)\n+      type_(NULL), bvar_(NULL)\n   { }\n \n  protected:\n@@ -959,7 +959,7 @@ class Sink_expression : public Expression\n   // The type of this sink variable.\n   Type* type_;\n   // The temporary variable we generate.\n-  tree var_;\n+  Bvariable* bvar_;\n };\n \n // Return the type of a sink expression.\n@@ -987,13 +987,24 @@ Sink_expression::do_determine_type(const Type_context* context)\n tree\n Sink_expression::do_get_tree(Translate_context* context)\n {\n-  if (this->var_ == NULL_TREE)\n+  Location loc = this->location();\n+  Gogo* gogo = context->gogo();\n+  if (this->bvar_ == NULL)\n     {\n       go_assert(this->type_ != NULL && !this->type_->is_sink_type());\n+      Named_object* fn = context->function();\n+      go_assert(fn != NULL);\n+      Bfunction* fn_ctx = fn->func_value()->get_or_make_decl(gogo, fn);\n       Btype* bt = this->type_->get_backend(context->gogo());\n-      this->var_ = create_tmp_var(type_to_tree(bt), \"blank\");\n+      Bstatement* decl;\n+      this->bvar_ =\n+\tgogo->backend()->temporary_variable(fn_ctx, context->bblock(), bt, NULL,\n+\t\t\t\t\t    false, loc, &decl);\n+      Bexpression* var_ref = gogo->backend()->var_expression(this->bvar_, loc);\n+      var_ref = gogo->backend()->compound_expression(decl, var_ref, loc);\n+      return expr_to_tree(var_ref);\n     }\n-  return this->var_;\n+  return expr_to_tree(gogo->backend()->var_expression(this->bvar_, loc));\n }\n \n // Ast dump for sink expression."}]}