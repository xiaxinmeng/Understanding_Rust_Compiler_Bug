{"sha": "2db38d9fcacf522fe9b98ba847e79ba33abdcadc", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MmRiMzhkOWZjYWNmNTIyZmU5Yjk4YmE4NDdlNzliYTMzYWJkY2FkYw==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2021-08-16T16:41:50Z"}, "committer": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2021-08-17T13:22:49Z"}, "message": "libstdc++: Add pretty printer for std::error_code and std::error_condition\n\nSigned-off-by: Jonathan Wakely <jwakely@redhat.com>\n\nlibstdc++-v3/ChangeLog:\n\n\t* python/libstdcxx/v6/printers.py (StdErrorCodePrinter): Define.\n\t(build_libstdcxx_dictionary): Register printer for\n\tstd::error_code and std::error_condition.\n\t* testsuite/libstdc++-prettyprinters/cxx11.cc: Test it.", "tree": {"sha": "0e8c2f385a406e1a919b5b17e15a2f8ad3b8b5aa", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0e8c2f385a406e1a919b5b17e15a2f8ad3b8b5aa"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2db38d9fcacf522fe9b98ba847e79ba33abdcadc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2db38d9fcacf522fe9b98ba847e79ba33abdcadc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2db38d9fcacf522fe9b98ba847e79ba33abdcadc", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2db38d9fcacf522fe9b98ba847e79ba33abdcadc/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9c560cf23996271ee26dfc4a1d8484b85173cd12", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9c560cf23996271ee26dfc4a1d8484b85173cd12", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9c560cf23996271ee26dfc4a1d8484b85173cd12"}], "stats": {"total": 74, "additions": 73, "deletions": 1}, "files": [{"sha": "e027a69ded9dffbbe1c29f3ed9dc2675eaea982c", "filename": "libstdc++-v3/python/libstdcxx/v6/printers.py", "status": "modified", "additions": 54, "deletions": 1, "changes": 55, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2db38d9fcacf522fe9b98ba847e79ba33abdcadc/libstdc%2B%2B-v3%2Fpython%2Flibstdcxx%2Fv6%2Fprinters.py", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2db38d9fcacf522fe9b98ba847e79ba33abdcadc/libstdc%2B%2B-v3%2Fpython%2Flibstdcxx%2Fv6%2Fprinters.py", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fpython%2Flibstdcxx%2Fv6%2Fprinters.py?ref=2db38d9fcacf522fe9b98ba847e79ba33abdcadc", "patch": "@@ -18,7 +18,7 @@\n import gdb\n import itertools\n import re\n-import sys\n+import sys, os, errno\n \n ### Python 2 + Python 3 compatibility code\n \n@@ -1484,6 +1484,57 @@ def to_string (self):\n             name = names[int(self.val)]\n         return 'std::{}::{}'.format(self.typename, name)\n \n+class StdErrorCatPrinter:\n+    \"Print an object derived from std::error_category\"\n+\n+    def __init__ (self, typename, val):\n+        self.val = val\n+        self.typename = typename\n+\n+    def to_string (self):\n+        gdb.set_convenience_variable('__cat', self.val)\n+        name = gdb.parse_and_eval('$__cat->name()').string()\n+        return 'error category = \"{}\"'.format(name)\n+\n+class StdErrorCodePrinter:\n+    \"Print a std::error_code or std::error_condition\"\n+\n+    _errno_categories = None # List of categories that use errno values\n+\n+    def __init__ (self, typename, val):\n+        self.val = val\n+        self.typename = typename\n+        # Do this only once ...\n+        if StdErrorCodePrinter._errno_categories is None:\n+            StdErrorCodePrinter._errno_categories = ['generic']\n+            try:\n+                import posix\n+                StdErrorCodePrinter._errno_categories.append('system')\n+            except ImportError:\n+                pass\n+\n+    @staticmethod\n+    def _category_name(cat):\n+        \"Call the virtual function that overrides std::error_category::name()\"\n+        gdb.set_convenience_variable('__cat', cat)\n+        return gdb.parse_and_eval('$__cat->name()').string()\n+\n+    def to_string (self):\n+        value = self.val['_M_value']\n+        category = self._category_name(self.val['_M_cat'])\n+        strval = str(value)\n+        if value == 0:\n+            default_cats = {'error_code':'system', 'error_condition':'generic'}\n+            unqualified = self.typename.split('::')[-1]\n+            if category == default_cats[unqualified]:\n+                return self.typename + ' = { }' # default-constructed value\n+        if value > 0 and category in StdErrorCodePrinter._errno_categories:\n+            try:\n+                strval = errno.errorcode[int(value)]\n+            except:\n+                pass\n+        return '%s = {\"%s\": %s}' % (self.typename, category, strval)\n+\n # A \"regular expression\" printer which conforms to the\n # \"SubPrettyPrinter\" protocol from gdb.printing.\n class RxPrinter(object):\n@@ -1886,6 +1937,8 @@ def build_libstdcxx_dictionary ():\n     libstdcxx_printer.add_version('std::__cxx11::', 'basic_string', StdStringPrinter)\n     libstdcxx_printer.add_container('std::', 'bitset', StdBitsetPrinter)\n     libstdcxx_printer.add_container('std::', 'deque', StdDequePrinter)\n+    libstdcxx_printer.add_version('std::', 'error_code', StdErrorCodePrinter)\n+    libstdcxx_printer.add_version('std::', 'error_condition', StdErrorCodePrinter)\n     libstdcxx_printer.add_container('std::', 'list', StdListPrinter)\n     libstdcxx_printer.add_container('std::__cxx11::', 'list', StdListPrinter)\n     libstdcxx_printer.add_container('std::', 'map', StdMapPrinter)"}, {"sha": "637246b3c125802d4b911e06ac0c28902c9589b8", "filename": "libstdc++-v3/testsuite/libstdc++-prettyprinters/cxx11.cc", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2db38d9fcacf522fe9b98ba847e79ba33abdcadc/libstdc%2B%2B-v3%2Ftestsuite%2Flibstdc%2B%2B-prettyprinters%2Fcxx11.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2db38d9fcacf522fe9b98ba847e79ba33abdcadc/libstdc%2B%2B-v3%2Ftestsuite%2Flibstdc%2B%2B-prettyprinters%2Fcxx11.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Flibstdc%2B%2B-prettyprinters%2Fcxx11.cc?ref=2db38d9fcacf522fe9b98ba847e79ba33abdcadc", "patch": "@@ -155,6 +155,25 @@ main()\n // { dg-final { note-test tpl {std::tuple containing = {[1] = 6, [2] = 7}} } }\n   ExTuple &rtpl = tpl;\n // { dg-final { note-test rtpl {std::tuple containing = {[1] = 6, [2] = 7}} } }\n+\n+  std::error_code e0;\n+  // { dg-final { note-test e0 {std::error_code = { }} } }\n+  std::error_condition ec0;\n+  // { dg-final { note-test ec0 {std::error_condition = { }} } }\n+  std::error_code einval = std::make_error_code(std::errc::invalid_argument);\n+  // { dg-final { note-test einval {std::error_code = {\"generic\": EINVAL}} } }\n+  std::error_condition ecinval = std::make_error_condition(std::errc::invalid_argument);\n+  // { dg-final { note-test ecinval {std::error_condition = {\"generic\": EINVAL}} } }\n+\n+  struct custom_cat : std::error_category {\n+    const char* name() const noexcept { return \"miaow\"; }\n+    std::string message(int) const { return \"\"; }\n+  } cat;\n+  std::error_code emiaow(42, cat);\n+  // { dg-final { note-test emiaow {std::error_code = {\"miaow\": 42}} } }\n+  std::error_condition ecmiaow(42, cat);\n+  // { dg-final { note-test ecmiaow {std::error_condition = {\"miaow\": 42}} } }\n+\n   placeholder(\"\"); // Mark SPOT\n   use(efl);\n   use(fl);"}]}