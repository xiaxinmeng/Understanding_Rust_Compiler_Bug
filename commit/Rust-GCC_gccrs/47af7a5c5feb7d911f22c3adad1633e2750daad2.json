{"sha": "47af7a5c5feb7d911f22c3adad1633e2750daad2", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDdhZjdhNWM1ZmViN2Q5MTFmMjJjM2FkYWQxNjMzZTI3NTBkYWFkMg==", "commit": {"author": {"name": "Richard Guenther", "email": "rguenther@suse.de", "date": "2008-09-22T11:53:29Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2008-09-22T11:53:29Z"}, "message": "re PR tree-optimization/37145 (XFAILs from PRE rewrite, SCCVN union optimization disabled)\n\n2008-09-22  Richard Guenther  <rguenther@suse.de>\n\n\tPR tree-optimization/37145\n\t* tree-ssa-pre.c (fully_constant_expression): Simplify builtin calls.\n\t(phi_translate_1): Constant fold references.\n\n\t* gcc.dg/tree-ssa/ssa-pre-15.c: Remove XFAIL.\n\nFrom-SVN: r140547", "tree": {"sha": "29a4c6ed277e1601e913ad2f2512c4da380caf7b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/29a4c6ed277e1601e913ad2f2512c4da380caf7b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/47af7a5c5feb7d911f22c3adad1633e2750daad2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/47af7a5c5feb7d911f22c3adad1633e2750daad2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/47af7a5c5feb7d911f22c3adad1633e2750daad2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/47af7a5c5feb7d911f22c3adad1633e2750daad2/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "f613cea7fc41d8133a083ced6cc0a11b9312f110", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f613cea7fc41d8133a083ced6cc0a11b9312f110", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f613cea7fc41d8133a083ced6cc0a11b9312f110"}], "stats": {"total": 73, "additions": 70, "deletions": 3}, "files": [{"sha": "d7d57c99f305ef6378922b64e2b656bc9c1b3160", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/47af7a5c5feb7d911f22c3adad1633e2750daad2/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/47af7a5c5feb7d911f22c3adad1633e2750daad2/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=47af7a5c5feb7d911f22c3adad1633e2750daad2", "patch": "@@ -1,3 +1,9 @@\n+2008-09-22  Richard Guenther  <rguenther@suse.de>\n+\n+\tPR tree-optimization/37145\n+\t* tree-ssa-pre.c (fully_constant_expression): Simplify builtin calls.\n+\t(phi_translate_1): Constant fold references.\n+\n 2008-09-22  Ira Rosen  <irar@il.ibm.com>\n \n \tPR tree-optimization/37482"}, {"sha": "d7100035090dd539b5f73013cde1dee28f804593", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/47af7a5c5feb7d911f22c3adad1633e2750daad2/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/47af7a5c5feb7d911f22c3adad1633e2750daad2/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=47af7a5c5feb7d911f22c3adad1633e2750daad2", "patch": "@@ -1,3 +1,8 @@\n+2008-09-22  Richard Guenther  <rguenther@suse.de>\n+\n+\tPR tree-optimization/37145\n+\t* gcc.dg/tree-ssa/ssa-pre-15.c: Remove XFAIL.\n+\n 2008-09-22  Janus Weil  <janus@gcc.gnu.org>\n \n \tPR fortran/37486"}, {"sha": "518fda854e6988984d7d97fcb775a4f8797df669", "filename": "gcc/testsuite/gcc.dg/tree-ssa/ssa-pre-15.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/47af7a5c5feb7d911f22c3adad1633e2750daad2/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-pre-15.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/47af7a5c5feb7d911f22c3adad1633e2750daad2/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-pre-15.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-pre-15.c?ref=47af7a5c5feb7d911f22c3adad1633e2750daad2", "patch": "@@ -12,5 +12,5 @@ __SIZE_TYPE__ mystrlen (const char *s)\n   return strlen(s);\n }\n \n-/* { dg-final { scan-tree-dump \"= 0;\" \"optimized\" { xfail *-*-* } } } */\n+/* { dg-final { scan-tree-dump \"= 0;\" \"optimized\" } } */\n /* { dg-final { cleanup-tree-dump \"optimized\" } } */"}, {"sha": "dd61349a3d3931874a3d095f6660bb0d21a3c617", "filename": "gcc/tree-ssa-pre.c", "status": "modified", "additions": 58, "deletions": 2, "changes": 60, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/47af7a5c5feb7d911f22c3adad1633e2750daad2/gcc%2Ftree-ssa-pre.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/47af7a5c5feb7d911f22c3adad1633e2750daad2/gcc%2Ftree-ssa-pre.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-pre.c?ref=47af7a5c5feb7d911f22c3adad1633e2750daad2", "patch": "@@ -1155,6 +1155,52 @@ fully_constant_expression (pre_expr e)\n \t    return e;\n \t  }\n       }\n+    case REFERENCE:\n+      {\n+\tvn_reference_t ref = PRE_EXPR_REFERENCE (e);\n+\tVEC (vn_reference_op_s, heap) *operands = ref->operands;\n+\tvn_reference_op_t op;\n+\n+\t/* Try to simplify the translated expression if it is\n+\t   a call to a builtin function with at most two arguments.  */\n+\top = VEC_index (vn_reference_op_s, operands, 0);\n+\tif (op->opcode == CALL_EXPR\n+\t    && TREE_CODE (op->op0) == ADDR_EXPR\n+\t    && TREE_CODE (TREE_OPERAND (op->op0, 0)) == FUNCTION_DECL\n+\t    && DECL_BUILT_IN (TREE_OPERAND (op->op0, 0))\n+\t    && VEC_length (vn_reference_op_s, operands) >= 2\n+\t    && VEC_length (vn_reference_op_s, operands) <= 3)\n+\t  {\n+\t    vn_reference_op_t arg0, arg1 = NULL;\n+\t    bool anyconst = false;\n+\t    arg0 = VEC_index (vn_reference_op_s, operands, 1);\n+\t    if (VEC_length (vn_reference_op_s, operands) > 2)\n+\t      arg1 = VEC_index (vn_reference_op_s, operands, 2);\n+\t    if (TREE_CODE_CLASS (arg0->opcode) == tcc_constant\n+\t\t|| (arg0->opcode == ADDR_EXPR\n+\t\t    && is_gimple_min_invariant (arg0->op0)))\n+\t      anyconst = true;\n+\t    if (arg1\n+\t\t&& (TREE_CODE_CLASS (arg1->opcode) == tcc_constant\n+\t\t    || (arg1->opcode == ADDR_EXPR\n+\t\t\t&& is_gimple_min_invariant (arg1->op0))))\n+\t      anyconst = true;\n+\t    if (anyconst)\n+\t      {\n+\t\ttree folded = build_call_expr (TREE_OPERAND (op->op0, 0),\n+\t\t\t\t\t       arg1 ? 2 : 1,\n+\t\t\t\t\t       arg0->op0,\n+\t\t\t\t\t       arg1 ? arg1->op0 : NULL);\n+\t\tif (folded\n+\t\t    && TREE_CODE (folded) == NOP_EXPR)\n+\t\t  folded = TREE_OPERAND (folded, 0);\n+\t\tif (folded\n+\t\t    && is_gimple_min_invariant (folded))\n+\t\t  return get_or_alloc_expr_for_constant (folded);\n+\t      }\n+\t  }\n+\t  return e;\n+\t}\n     default:\n       return e;\n     }\n@@ -1469,6 +1515,7 @@ phi_translate_1 (pre_expr expr, bitmap_set_t set1, bitmap_set_t set2,\n \treturn expr;\n       }\n       break;\n+\n     case REFERENCE:\n       {\n \tvn_reference_t ref = PRE_EXPR_REFERENCE (expr);\n@@ -1570,11 +1617,12 @@ phi_translate_1 (pre_expr expr, bitmap_set_t set1, bitmap_set_t set2,\n \n \tif (changed)\n \t  {\n+\t    unsigned int new_val_id;\n+\t    pre_expr constant;\n+\n \t    tree result = vn_reference_lookup_pieces (newvuses,\n \t\t\t\t\t\t      newoperands,\n \t\t\t\t\t\t      &newref, true);\n-\t    unsigned int new_val_id;\n-\n \t    if (newref)\n \t      VEC_free (vn_reference_op_s, heap, newoperands);\n \n@@ -1591,6 +1639,10 @@ phi_translate_1 (pre_expr expr, bitmap_set_t set1, bitmap_set_t set2,\n \t    if (newref)\n \t      {\n \t\tPRE_EXPR_REFERENCE (expr) = newref;\n+\t\tconstant = fully_constant_expression (expr);\n+\t\tif (constant != expr)\n+\t\t  return constant;\n+\n \t\tnew_val_id = newref->value_id;\n \t\tget_or_alloc_expression_id (expr);\n \t      }\n@@ -1604,6 +1656,9 @@ phi_translate_1 (pre_expr expr, bitmap_set_t set1, bitmap_set_t set2,\n \t\t\t\t\t\t     result, new_val_id);\n \t\tnewoperands = NULL;\n \t\tPRE_EXPR_REFERENCE (expr) = newref;\n+\t\tconstant = fully_constant_expression (expr);\n+\t\tif (constant != expr)\n+\t\t  return constant;\n \t\tget_or_alloc_expression_id (expr);\n \t      }\n \t    add_to_value (new_val_id, expr);\n@@ -1613,6 +1668,7 @@ phi_translate_1 (pre_expr expr, bitmap_set_t set1, bitmap_set_t set2,\n \treturn expr;\n       }\n       break;\n+\n     case NAME:\n       {\n \tgimple phi = NULL;"}]}