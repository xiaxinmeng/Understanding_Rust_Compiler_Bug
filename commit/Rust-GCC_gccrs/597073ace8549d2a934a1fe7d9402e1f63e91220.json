{"sha": "597073ace8549d2a934a1fe7d9402e1f63e91220", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTk3MDczYWNlODU0OWQyYTkzNGExZmU3ZDk0MDJlMWY2M2U5MTIyMA==", "commit": {"author": {"name": "Paul Brook", "email": "paul@codesourcery.com", "date": "2004-07-12T01:23:39Z"}, "committer": {"name": "Paul Brook", "email": "pbrook@gcc.gnu.org", "date": "2004-07-12T01:23:39Z"}, "message": "expr.c (gfc_check_assign_symbol): Handle pointer assignments.\n\n\t* expr.c (gfc_check_assign_symbol): Handle pointer assignments.\n\t* trans-array.c (gfc_trans_auto_array_allocation): Remove\n\tinitialization code.\n\t* trans-common.c (create_common): Use gfc_conv_initializer.\n\t* trans-decl.c (gfc_get_symbol_decl): Use gfc_conv_initializer.\n\t* trans-expr.c (gfc_conv_initializer): New function.\n\t(gfc_conv_structure): Use it.\n\t* trans.h (gfc_conv_initializer): Add prototype.\ntestsuite/\n\t* gfortran.dg/pointer_init_1.f90: New test.\n\nFrom-SVN: r84542", "tree": {"sha": "965224cf14305213a75803cd0d6ba965b02e9514", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/965224cf14305213a75803cd0d6ba965b02e9514"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/597073ace8549d2a934a1fe7d9402e1f63e91220", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/597073ace8549d2a934a1fe7d9402e1f63e91220", "html_url": "https://github.com/Rust-GCC/gccrs/commit/597073ace8549d2a934a1fe7d9402e1f63e91220", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/597073ace8549d2a934a1fe7d9402e1f63e91220/comments", "author": null, "committer": null, "parents": [{"sha": "247fec6ee6f9e831b62a1672abc0cc8a7ffb360e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/247fec6ee6f9e831b62a1672abc0cc8a7ffb360e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/247fec6ee6f9e831b62a1672abc0cc8a7ffb360e"}], "stats": {"total": 237, "additions": 97, "deletions": 140}, "files": [{"sha": "083f59f0fdf64f2cf1f95d87987c64e07cdf6d2c", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/597073ace8549d2a934a1fe7d9402e1f63e91220/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/597073ace8549d2a934a1fe7d9402e1f63e91220/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=597073ace8549d2a934a1fe7d9402e1f63e91220", "patch": "@@ -1,3 +1,14 @@\n+2004-07-12  Paul Brook  <paul@codesourcery.com>\n+\n+\t* expr.c (gfc_check_assign_symbol): Handle pointer assignments.\n+\t* trans-array.c (gfc_trans_auto_array_allocation): Remove\n+\tinitialization code.\n+\t* trans-common.c (create_common): Use gfc_conv_initializer.\n+\t* trans-decl.c (gfc_get_symbol_decl): Use gfc_conv_initializer.\n+\t* trans-expr.c (gfc_conv_initializer): New function.\n+\t(gfc_conv_structure): Use it.\n+\t* trans.h (gfc_conv_initializer): Add prototype.\n+\n 2004-07-11  Paul Brook  <paul@codesourcery.com>\n \n \tPR fortran/15986"}, {"sha": "74b785a51756836fbf1781a44e1b0df20b300afb", "filename": "gcc/fortran/expr.c", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/597073ace8549d2a934a1fe7d9402e1f63e91220/gcc%2Ffortran%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/597073ace8549d2a934a1fe7d9402e1f63e91220/gcc%2Ffortran%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fexpr.c?ref=597073ace8549d2a934a1fe7d9402e1f63e91220", "patch": "@@ -1855,7 +1855,7 @@ gfc_check_pointer_assign (gfc_expr * lvalue, gfc_expr * rvalue)\n \n \n /* Relative of gfc_check_assign() except that the lvalue is a single\n-   symbol.  */\n+   symbol.  Used for initialization assignments.  */\n \n try\n gfc_check_assign_symbol (gfc_symbol * sym, gfc_expr * rvalue)\n@@ -1873,7 +1873,10 @@ gfc_check_assign_symbol (gfc_symbol * sym, gfc_expr * rvalue)\n   lvalue.symtree->n.sym = sym;\n   lvalue.where = sym->declared_at;\n \n-  r = gfc_check_assign (&lvalue, rvalue, 1);\n+  if (sym->attr.pointer)\n+    r = gfc_check_pointer_assign (&lvalue, rvalue);\n+  else\n+    r = gfc_check_assign (&lvalue, rvalue, 1);\n \n   gfc_free (lvalue.symtree);\n "}, {"sha": "88e286544ef23306cb2d10fdca75b53f901a82a2", "filename": "gcc/fortran/trans-array.c", "status": "modified", "additions": 0, "deletions": 20, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/597073ace8549d2a934a1fe7d9402e1f63e91220/gcc%2Ffortran%2Ftrans-array.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/597073ace8549d2a934a1fe7d9402e1f63e91220/gcc%2Ffortran%2Ftrans-array.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-array.c?ref=597073ace8549d2a934a1fe7d9402e1f63e91220", "patch": "@@ -2848,20 +2848,6 @@ gfc_trans_auto_array_allocation (tree decl, gfc_symbol * sym, tree fnbody)\n   assert (GFC_ARRAY_TYPE_P (type));\n   onstack = TREE_CODE (type) != POINTER_TYPE;\n \n-  /* We never generate initialization code of module variables.  */\n-  if (fnbody == NULL_TREE)\n-    {\n-      assert (onstack);\n-\n-      /* Generate static initializer.  */\n-      if (sym->value)\n-\t{\n-\t  DECL_INITIAL (decl) =\n-\t    gfc_conv_array_initializer (TREE_TYPE (decl), sym->value);\n-\t}\n-      return fnbody;\n-    }\n-\n   gfc_start_block (&block);\n \n   /* Evaluate character string length.  */\n@@ -2884,12 +2870,6 @@ gfc_trans_auto_array_allocation (tree decl, gfc_symbol * sym, tree fnbody)\n \n   if (onstack)\n     {\n-      if (sym->value)\n-\t{\n-\t  DECL_INITIAL (decl) =\n-\t    gfc_conv_array_initializer (TREE_TYPE (decl), sym->value);\n-\t}\n-\n       gfc_add_expr_to_block (&block, fnbody);\n       return gfc_finish_block (&block);\n     }"}, {"sha": "451312ef410c565d89760aa9a55ed066372023fd", "filename": "gcc/fortran/trans-common.c", "status": "modified", "additions": 5, "deletions": 28, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/597073ace8549d2a934a1fe7d9402e1f63e91220/gcc%2Ffortran%2Ftrans-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/597073ace8549d2a934a1fe7d9402e1f63e91220/gcc%2Ffortran%2Ftrans-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-common.c?ref=597073ace8549d2a934a1fe7d9402e1f63e91220", "patch": "@@ -383,7 +383,6 @@ create_common (gfc_common_head *com)\n   if (is_init)\n     {\n       tree list, ctor, tmp;\n-      gfc_se se;\n       HOST_WIDE_INT offset = 0;\n \n       list = NULL_TREE;\n@@ -399,33 +398,11 @@ create_common (gfc_common_head *com)\n \t\t       We don't implement this yet, so bail out.  */\n                   gfc_todo_error (\"Initialization of overlapping variables\");\n                 }\n-              if (s->sym->attr.dimension)\n-                {\n-                  tmp = gfc_conv_array_initializer (TREE_TYPE (s->field),\n-\t\t\t\t\t\t    s->sym->value);\n-                  list = tree_cons (s->field, tmp, list);\n-                }\n-              else\n-                {\n-\t\t  switch (s->sym->ts.type)\n-\t\t    {\n-\t\t    case BT_CHARACTER:\n-\t\t      se.expr = gfc_conv_string_init\n-\t\t\t(s->sym->ts.cl->backend_decl, s->sym->value);\n-\t\t      break;\n-\n-\t\t    case BT_DERIVED:\n-\t\t      gfc_init_se (&se, NULL);\n-\t\t      gfc_conv_structure (&se, s->sym->value, 1);\n-\t\t      break;\n-\n-\t\t    default:\n-\t\t      gfc_init_se (&se, NULL);\n-\t\t      gfc_conv_expr (&se, s->sym->value);\n-\t\t      break;\n-\t\t    }\n-                  list = tree_cons (s->field, se.expr, list);\n-                }\n+\t      /* Add the initializer for this field.  */\n+\t      tmp = gfc_conv_initializer (s->sym->value, &s->sym->ts,\n+\t\t  TREE_TYPE (s->field), s->sym->attr.dimension,\n+\t\t  s->sym->attr.pointer || s->sym->attr.allocatable);\n+\t      list = tree_cons (s->field, tmp, list);\n               offset = s->offset + s->length;\n             }\n         }"}, {"sha": "24087c07b88fde8b6492c40e7e81b8f17dbc2fc7", "filename": "gcc/fortran/trans-decl.c", "status": "modified", "additions": 10, "deletions": 68, "changes": 78, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/597073ace8549d2a934a1fe7d9402e1f63e91220/gcc%2Ffortran%2Ftrans-decl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/597073ace8549d2a934a1fe7d9402e1f63e91220/gcc%2Ffortran%2Ftrans-decl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-decl.c?ref=597073ace8549d2a934a1fe7d9402e1f63e91220", "patch": "@@ -694,7 +694,6 @@ gfc_get_symbol_decl (gfc_symbol * sym)\n {\n   tree decl;\n   tree length = NULL_TREE;\n-  gfc_se se;\n   int byref;\n \n   assert (sym->attr.referenced);\n@@ -802,26 +801,12 @@ gfc_get_symbol_decl (gfc_symbol * sym)\n       DECL_INITIAL (length) = build_int_2 (-2, -1);\n     }\n \n-  /* TODO: Initialization of pointer variables.  */\n-  switch (sym->ts.type)\n+  if (sym->ts.type == BT_CHARACTER)\n     {\n-    case BT_CHARACTER:\n       /* Character variables need special handling.  */\n       gfc_allocate_lang_decl (decl);\n \n-      if (TREE_CODE (length) == INTEGER_CST)\n-\t{\n-\t  /* Static initializer for string scalars.\n-\t     Initialization of string arrays is handled elsewhere. */\n-\t  if (sym->value && sym->attr.dimension == 0)\n-\t    {\n-\t      assert (TREE_STATIC (decl));\n-\t      if (sym->attr.pointer)\n-\t\tgfc_todo_error (\"initialization of character pointers\");\n-\t      DECL_INITIAL (decl) = gfc_conv_string_init (length, sym->value);\n-\t    }\n-\t}\n-      else\n+      if (TREE_CODE (length) != INTEGER_CST)\n \t{\n \t  char name[GFC_MAX_MANGLED_SYMBOL_LEN + 2];\n \n@@ -837,32 +822,17 @@ gfc_get_symbol_decl (gfc_symbol * sym)\n \t  gfc_finish_var_decl (length, sym);\n \t  assert (!sym->value);\n \t}\n-      break;\n-\n-    case BT_DERIVED:\n-      if (sym->value && ! (sym->attr.use_assoc || sym->attr.dimension))\n-        {\n-          gfc_init_se (&se, NULL);\n-          gfc_conv_structure (&se, sym->value, 1);\n-          DECL_INITIAL (decl) = se.expr;\n-        }\n-      break;\n-\n-    default:\n-      /* Static initializers for SAVEd variables.  Arrays have already been\n-         remembered.  Module variables are initialized when the module is\n-         loaded.  */\n-      if (sym->value && ! (sym->attr.use_assoc || sym->attr.dimension))\n-\t{\n-\t  assert (TREE_STATIC (decl));\n-\t  gfc_init_se (&se, NULL);\n-\t  gfc_conv_constant (&se, sym->value);\n-\t  DECL_INITIAL (decl) = se.expr;\n-\t}\n-      break;\n     }\n   sym->backend_decl = decl;\n \n+  if (TREE_STATIC (decl) && !sym->attr.use_assoc)\n+    {\n+      /* Add static initializer.  */\n+      DECL_INITIAL (decl) = gfc_conv_initializer (sym->value, &sym->ts,\n+\t  TREE_TYPE (decl), sym->attr.dimension,\n+\t  sym->attr.pointer || sym->attr.allocatable);\n+    }\n+\n   return decl;\n }\n \n@@ -1784,7 +1754,6 @@ static void\n gfc_create_module_variable (gfc_symbol * sym)\n {\n   tree decl;\n-  gfc_se se;\n \n   /* Only output symbols from this module.  */\n   if (sym->ns != module_namespace)\n@@ -1812,33 +1781,6 @@ gfc_create_module_variable (gfc_symbol * sym)\n   /* Create the decl.  */\n   decl = gfc_get_symbol_decl (sym);\n \n-  /* We want to allocate storage for this variable.  */\n-  TREE_STATIC (decl) = 1;\n-\n-  if (sym->attr.dimension)\n-    {\n-      assert (sym->attr.pointer || sym->attr.allocatable\n-\t      || GFC_ARRAY_TYPE_P (TREE_TYPE (sym->backend_decl)));\n-      if (sym->attr.pointer || sym->attr.allocatable)\n-\tgfc_trans_static_array_pointer (sym);\n-      else\n-\tgfc_trans_auto_array_allocation (sym->backend_decl, sym, NULL_TREE);\n-    }\n-  else if (sym->ts.type == BT_DERIVED)\n-    {\n-      if (sym->value)\n-\tgfc_todo_error (\"Initialization of derived type module variables\");\n-    }\n-  else\n-    {\n-      if (sym->value)\n-\t{\n-\t  gfc_init_se (&se, NULL);\n-\t  gfc_conv_constant (&se, sym->value);\n-\t  DECL_INITIAL (decl) = se.expr;\n-\t}\n-    }\n-\n   /* Create the variable.  */\n   pushdecl (decl);\n   rest_of_decl_compilation (decl, NULL, 1, 0);"}, {"sha": "4745f0cc3be801f82ba4b62845a382dd59f4e2da", "filename": "gcc/fortran/trans-expr.c", "status": "modified", "additions": 44, "deletions": 22, "changes": 66, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/597073ace8549d2a934a1fe7d9402e1f63e91220/gcc%2Ffortran%2Ftrans-expr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/597073ace8549d2a934a1fe7d9402e1f63e91220/gcc%2Ffortran%2Ftrans-expr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-expr.c?ref=597073ace8549d2a934a1fe7d9402e1f63e91220", "patch": "@@ -1365,7 +1365,49 @@ gfc_conv_array_constructor_expr (gfc_se * se, gfc_expr * expr)\n }\n \n \n+/* Build a static initializer.  EXPR is the expression for the initial value.\n+   The other parameters describe the variable of component being initialized.\n+   EXPR may be null.  */\n \n+tree\n+gfc_conv_initializer (gfc_expr * expr, gfc_typespec * ts, tree type,\n+\t\t      bool array, bool pointer)\n+{\n+  gfc_se se;\n+\n+  if (!(expr || pointer))\n+    return NULL_TREE;\n+\n+  if (array)\n+    {\n+      /* Arrays need special handling.  */\n+      if (pointer)\n+\treturn gfc_build_null_descriptor (type);\n+      else\n+\treturn gfc_conv_array_initializer (type, expr);\n+    }\n+  else if (pointer)\n+    return fold_convert (type, null_pointer_node);\n+  else\n+    {\n+      switch (ts->type)\n+\t{\n+\tcase BT_DERIVED:\n+\t  gfc_init_se (&se, NULL);\n+\t  gfc_conv_structure (&se, expr, 1);\n+\t  return se.expr;\n+\n+\tcase BT_CHARACTER:\n+\t  return gfc_conv_string_init (ts->cl->backend_decl,expr);\n+\n+\tdefault:\n+\t  gfc_init_se (&se, NULL);\n+\t  gfc_conv_constant (&se, expr);\n+\t  return se.expr;\n+\t}\n+    }\n+}\n+  \n /* Build an expression for a constructor. If init is nonzero then\n    this is part of a static variable initializer.  */\n \n@@ -1396,28 +1438,8 @@ gfc_conv_structure (gfc_se * se, gfc_expr * expr, int init)\n       /* Evaluate the expression for this component.  */\n       if (init)\n \t{\n-\t  if (cm->dimension)\n-\t    {\n-\t      tree arraytype;\n-\t      arraytype = TREE_TYPE (cm->backend_decl);\n-\n-\t      /* Arrays need special handling.  */\n-\t      if (cm->pointer)\n-\t\tcse.expr = gfc_build_null_descriptor (arraytype);\n-\t      else\n-\t\tcse.expr = gfc_conv_array_initializer (arraytype, c->expr);\n-\t    }\n-\t  else if (cm->pointer)\n-\t    {\n-\t      /* Pointer components may only be initialized to NULL.  */\n-\t      assert (c->expr->expr_type == EXPR_NULL);\n-\t      cse.expr = fold_convert (TREE_TYPE (cm->backend_decl), \n-\t\t\t\t       null_pointer_node);\n-\t    }\n-\t  else if (cm->ts.type == BT_DERIVED)\n-\t    gfc_conv_structure (&cse, c->expr, 1);\n-\t  else\n-\t    gfc_conv_expr (&cse, c->expr);\n+\t  cse.expr = gfc_conv_initializer (c->expr, &cm->ts,\n+\t      TREE_TYPE (cm->backend_decl), cm->dimension, cm->pointer);\n \t}\n       else\n \t{"}, {"sha": "fe8db4e370d91b247282391a2c71b58049d088b2", "filename": "gcc/fortran/trans.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/597073ace8549d2a934a1fe7d9402e1f63e91220/gcc%2Ffortran%2Ftrans.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/597073ace8549d2a934a1fe7d9402e1f63e91220/gcc%2Ffortran%2Ftrans.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans.h?ref=597073ace8549d2a934a1fe7d9402e1f63e91220", "patch": "@@ -374,6 +374,9 @@ void gfc_build_builtin_function_decls (void);\n /* Return the variable decl for a symbol.  */\n tree gfc_get_symbol_decl (gfc_symbol *);\n \n+/* Build a static initializer.  */\n+tree gfc_conv_initializer (gfc_expr *, gfc_typespec *, tree, bool, bool);\n+\n /* Substitute a temporary variable in place of the real one.  */\n void gfc_shadow_sym (gfc_symbol *, tree, gfc_saved_var *);\n "}, {"sha": "0ee84ee5ca29697de7f08ef8e3a8ffde042fc758", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/597073ace8549d2a934a1fe7d9402e1f63e91220/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/597073ace8549d2a934a1fe7d9402e1f63e91220/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=597073ace8549d2a934a1fe7d9402e1f63e91220", "patch": "@@ -1,3 +1,7 @@\n+2004-07-12  Paul Brook  <paul@codesourcery.com>\n+\n+\t* gfortran.dg/pointer_init_1.f90: New test.\n+\n 2004-07-11  Paul Brook  <paul@codesourcery.com>\n \n \tPR fortran/15986"}, {"sha": "0cfa90381905189f2906de1fe72eb0dcb59be050", "filename": "gcc/testsuite/gfortran.dg/pointer_init_1.f90", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/597073ace8549d2a934a1fe7d9402e1f63e91220/gcc%2Ftestsuite%2Fgfortran.dg%2Fpointer_init_1.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/597073ace8549d2a934a1fe7d9402e1f63e91220/gcc%2Ftestsuite%2Fgfortran.dg%2Fpointer_init_1.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fpointer_init_1.f90?ref=597073ace8549d2a934a1fe7d9402e1f63e91220", "patch": "@@ -0,0 +1,15 @@\n+! Check that null initialization of pointer variable works.\n+! { dg-do run }\n+program pointer_init_1\n+  type t\n+    real x\n+  end type\n+  type(t), pointer :: a => NULL()\n+  real, pointer :: b => NULL()\n+  character, pointer :: c => NULL()\n+  integer, pointer, dimension(:) :: d => NULL()\n+  if (associated(a)) call abort()\n+  if (associated(b)) call abort()\n+  if (associated(c)) call abort()\n+  if (associated(d)) call abort()\n+end"}]}