{"sha": "d76e68001b65e588d263a3984dc12b5263b60879", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDc2ZTY4MDAxYjY1ZTU4OGQyNjNhMzk4NGRjMTJiNTI2M2I2MDg3OQ==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2002-02-14T10:22:53Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2002-02-14T10:22:53Z"}, "message": "re PR c/5503 (GCC ignores prototype)\n\n\tPR c/5503:\n\t* c-decl.c (duplicate_decls): If builtin type has TYPE_ARG_TYPES NULL,\n\tuse arguments from newtype.\n\n\t* gcc.dg/noncompile/20020213-1.c: New test.\n\nFrom-SVN: r49763", "tree": {"sha": "b659e85985df5f8c2a674b887b2ddcfba64b5a8d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b659e85985df5f8c2a674b887b2ddcfba64b5a8d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d76e68001b65e588d263a3984dc12b5263b60879", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d76e68001b65e588d263a3984dc12b5263b60879", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d76e68001b65e588d263a3984dc12b5263b60879", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d76e68001b65e588d263a3984dc12b5263b60879/comments", "author": null, "committer": null, "parents": [{"sha": "2a5e0aeacdd62807638a7223ae22b0e25ba13c3b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2a5e0aeacdd62807638a7223ae22b0e25ba13c3b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2a5e0aeacdd62807638a7223ae22b0e25ba13c3b"}], "stats": {"total": 59, "additions": 58, "deletions": 1}, "files": [{"sha": "a6c760127b632f83ffd7bd89690f351ffe5ae726", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d76e68001b65e588d263a3984dc12b5263b60879/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d76e68001b65e588d263a3984dc12b5263b60879/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=d76e68001b65e588d263a3984dc12b5263b60879", "patch": "@@ -1,3 +1,9 @@\n+2002-02-14  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR c/5503:\n+\t* c-decl.c (duplicate_decls): If builtin type has TYPE_ARG_TYPES NULL,\n+\tuse arguments from newtype.\n+\n 2002-02-13  Eric Christopher  <echristo@redhat.com>\n \n \t* config/mips/mips.c (override_options): Add check for march/mipsX\n@@ -21,7 +27,7 @@\n         * config/rs6000/rs6000.c (rs6000_legitimize_reload_address): Do\n         not push_reload for altivec modes.\n \n-2002-02-13\tJoel Sherrill <joel@OARcorp.com>\n+2002-02-13  Joel Sherrill  <joel@OARcorp.com>\n \n \t* config.gcc (a29k-*-rtems), config/a29k/rtems.h: General cleanup across\n \tall RTEMS targets including removal of #includes from config/*/rtems*.h"}, {"sha": "ea7942c724301742e2fc0a20d00dcf31f0a1a25a", "filename": "gcc/c-decl.c", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d76e68001b65e588d263a3984dc12b5263b60879/gcc%2Fc-decl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d76e68001b65e588d263a3984dc12b5263b60879/gcc%2Fc-decl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-decl.c?ref=d76e68001b65e588d263a3984dc12b5263b60879", "patch": "@@ -1548,6 +1548,22 @@ duplicate_decls (newdecl, olddecl, different_binding_level)\n \t  if (! different_binding_level)\n \t    TREE_TYPE (olddecl) = oldtype;\n \t}\n+      else if (TYPE_ARG_TYPES (oldtype) == NULL\n+\t       && TYPE_ARG_TYPES (newtype) != NULL)\n+\t{\n+\t  /* For bcmp, bzero, fputs the builtin type has arguments not\n+\t     specified.  Use the ones from the prototype so that type checking\n+\t     is done for them.  */\n+\t  tree trytype\n+\t    = build_function_type (TREE_TYPE (oldtype),\n+\t\t\t\t   TYPE_ARG_TYPES (newtype));\n+\t  trytype = build_type_attribute_variant (trytype,\n+\t\t\t\t\t\t  TYPE_ATTRIBUTES (oldtype));\n+\n+\t  oldtype = trytype;\n+\t  if (! different_binding_level)\n+\t    TREE_TYPE (olddecl) = oldtype;\n+\t}\n       if (!types_match)\n \t{\n \t  /* If types don't match for a built-in, throw away the built-in.  */"}, {"sha": "b139854f0462d49d58e8798bcaa761cfd8d2015f", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d76e68001b65e588d263a3984dc12b5263b60879/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d76e68001b65e588d263a3984dc12b5263b60879/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=d76e68001b65e588d263a3984dc12b5263b60879", "patch": "@@ -1,3 +1,7 @@\n+2002-02-14  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* gcc.dg/noncompile/20020213-1.c: New test.\n+\n 2002-02-13  Jakub Jelinek  <jakub@redhat.com>\n \n \t* g++.dg/other/debug3.C: New test."}, {"sha": "77798b57c4b2e1f8063f5dc324cf55d31918acd7", "filename": "gcc/testsuite/gcc.dg/noncompile/20020213-1.c", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d76e68001b65e588d263a3984dc12b5263b60879/gcc%2Ftestsuite%2Fgcc.dg%2Fnoncompile%2F20020213-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d76e68001b65e588d263a3984dc12b5263b60879/gcc%2Ftestsuite%2Fgcc.dg%2Fnoncompile%2F20020213-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fnoncompile%2F20020213-1.c?ref=d76e68001b65e588d263a3984dc12b5263b60879", "patch": "@@ -0,0 +1,31 @@\n+/* PR c/5503\n+   Test whether argument checking is done for fputs, bzero and bcmp.  */\n+typedef struct { int i; } FILE;\n+typedef __SIZE_TYPE__ size_t;\n+int fputs (const char *, FILE *);\n+void bzero (void *, size_t);\n+int bcmp (const void *, const void *, size_t);\n+\n+char buf[32];\n+FILE *f;\n+\n+int main ()\n+{\n+  fputs (\"foo\");\t\t/* { dg-error \"too few\" } */\n+  fputs (\"foo\", \"bar\", \"baz\");\t/* { dg-error \"too many\" } */\n+  fputs (21, 43);\n+  bzero (buf);\t\t\t/* { dg-error \"too few\" } */\n+  bzero (21);\t\t\t/* { dg-error \"too few\" } */\n+  bcmp (buf, buf + 16);\t\t/* { dg-error \"too few\" } */\n+  bcmp (21);\t\t\t/* { dg-error \"too few\" } */\n+  fputs (\"foo\", f);\n+  bzero (buf, 32);\n+  bcmp (buf, buf + 16, 16);\n+  return 0;\n+}\n+\n+/* { dg-warning \"passing arg 2 of\" \"2nd incompatible\" { target *-*-* } 15 } */\n+/* { dg-warning \"passing arg 1 of\" \"1st incompatible\" { target *-*-* } 16 } */\n+/* { dg-warning \"passing arg 2 of\" \"2nd incompatible\" { target *-*-* } 16 } */\n+/* { dg-warning \"passing arg 1 of\" \"1st incompatible\" { target *-*-* } 18 } */\n+/* { dg-warning \"passing arg 1 of\" \"1st incompatible\" { target *-*-* } 20 } */"}]}