{"sha": "5c263e84ab7e5df28a9055ae533c2d305f4b7b3d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWMyNjNlODRhYjdlNWRmMjhhOTA1NWFlNTMzYzJkMzA1ZjRiN2IzZA==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2017-09-28T19:39:38Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2017-09-28T19:39:38Z"}, "message": "Use local_specializations to find capture proxies.\n\n\t* cp-tree.h (DECL_CAPTURED_VARIABLE): New.\n\t* lambda.c (build_capture_proxy): Set it.\n\t(add_capture): Pass initializer to build_capture_proxy.\n\t(start_lambda_function): Likewise.\n\t(insert_capture_proxy): Use register_local_specialization.\n\t(is_lambda_ignored_entity): Always ignore proxies.\n\t* name-lookup.c (qualify_lookup): Don't check\n\tis_lambda_ignored_entity if LOOKUP_HIDDEN is set.\n\t* semantics.c (process_outer_var_ref): Use\n\tretrieve_local_specialization.\n\t* parser.c (cp_parser_lambda_body): Push local_specializations.\n\t* pt.c (tsubst_expr): Pass LOOKUP_HIDDEN when looking for a proxy.\n\t(tsubst_lambda_expr): Push local_specializations sooner.\n\t(tsubst_copy_and_build): Don't register_local_specialization.\n\nFrom-SVN: r253265", "tree": {"sha": "b86cb1ba622a88cf4a14e1fd0e4b03bc38df3be7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b86cb1ba622a88cf4a14e1fd0e4b03bc38df3be7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5c263e84ab7e5df28a9055ae533c2d305f4b7b3d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5c263e84ab7e5df28a9055ae533c2d305f4b7b3d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5c263e84ab7e5df28a9055ae533c2d305f4b7b3d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5c263e84ab7e5df28a9055ae533c2d305f4b7b3d/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "697a7a575de01835b3941e6b6d25b940033301d5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/697a7a575de01835b3941e6b6d25b940033301d5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/697a7a575de01835b3941e6b6d25b940033301d5"}], "stats": {"total": 102, "additions": 76, "deletions": 26}, "files": [{"sha": "2936f22a47ec20ca2ca3262beebbb2ea0c32c4ca", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5c263e84ab7e5df28a9055ae533c2d305f4b7b3d/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5c263e84ab7e5df28a9055ae533c2d305f4b7b3d/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=5c263e84ab7e5df28a9055ae533c2d305f4b7b3d", "patch": "@@ -1,5 +1,21 @@\n 2017-09-28  Jason Merrill  <jason@redhat.com>\n \n+\tUse local_specializations to find capture proxies.\n+\t* cp-tree.h (DECL_CAPTURED_VARIABLE): New.\n+\t* lambda.c (build_capture_proxy): Set it.\n+\t(add_capture): Pass initializer to build_capture_proxy.\n+\t(start_lambda_function): Likewise.\n+\t(insert_capture_proxy): Use register_local_specialization.\n+\t(is_lambda_ignored_entity): Always ignore proxies.\n+\t* name-lookup.c (qualify_lookup): Don't check\n+\tis_lambda_ignored_entity if LOOKUP_HIDDEN is set.\n+\t* semantics.c (process_outer_var_ref): Use\n+\tretrieve_local_specialization.\n+\t* parser.c (cp_parser_lambda_body): Push local_specializations.\n+\t* pt.c (tsubst_expr): Pass LOOKUP_HIDDEN when looking for a proxy.\n+\t(tsubst_lambda_expr): Push local_specializations sooner.\n+\t(tsubst_copy_and_build): Don't register_local_specialization.\n+\n \t* call.c (build_special_member_call): Use the return value of\n \tmark_lvalue_use.\n \t* decl.c (compute_array_index_type): Likewise."}, {"sha": "a63490195439c9cf8991209fde02098d17c8f383", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5c263e84ab7e5df28a9055ae533c2d305f4b7b3d/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5c263e84ab7e5df28a9055ae533c2d305f4b7b3d/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=5c263e84ab7e5df28a9055ae533c2d305f4b7b3d", "patch": "@@ -2471,10 +2471,12 @@ struct GTY(()) lang_decl_min {\n   union lang_decl_u2 {\n     /* In a FUNCTION_DECL for which DECL_THUNK_P holds, this is\n        THUNK_VIRTUAL_OFFSET.\n+       In a VAR_DECL for which DECL_HAS_VALUE_EXPR_P holds,\n+       this is DECL_CAPTURED_VARIABLE.\n        Otherwise this is DECL_ACCESS.  */\n     tree GTY ((tag (\"0\"))) access;\n \n-    /* For VAR_DECL in function, this is DECL_DISCRIMINATOR.  */\n+    /* For TREE_STATIC VAR_DECL in function, this is DECL_DISCRIMINATOR.  */\n     int GTY ((tag (\"1\"))) discriminator;\n   } GTY ((desc (\"%0.u.base.u2sel\"))) u2;\n };\n@@ -3240,6 +3242,10 @@ extern void decl_shadowed_for_var_insert (tree, tree);\n   (DECL_LANG_SPECIFIC (VAR_TEMPL_TYPE_FIELD_OR_FUNCTION_DECL_CHECK (NODE)) \\\n    ->u.min.template_info)\n \n+/* For a lambda capture proxy, its captured variable.  */\n+#define DECL_CAPTURED_VARIABLE(NODE) \\\n+  (LANG_DECL_U2_CHECK (NODE, 0)->access)\n+\n /* For a VAR_DECL, indicates that the variable is actually a\n    non-static data member of anonymous union that has been promoted to\n    variable status.  */\n@@ -6793,7 +6799,7 @@ extern tree lambda_function\t\t\t(tree);\n extern void apply_deduced_return_type           (tree, tree);\n extern tree add_capture                         (tree, tree, tree, bool, bool);\n extern tree add_default_capture                 (tree, tree, tree);\n-extern tree build_capture_proxy\t\t\t(tree);\n+extern tree build_capture_proxy\t\t\t(tree, tree);\n extern void insert_capture_proxy\t\t(tree);\n extern void insert_pending_capture_proxies\t(void);\n extern bool is_capture_proxy\t\t\t(tree);"}, {"sha": "66d510e6818c269e636e2bc6cbf14f06318f8b02", "filename": "gcc/cp/lambda.c", "status": "modified", "additions": 31, "deletions": 5, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5c263e84ab7e5df28a9055ae533c2d305f4b7b3d/gcc%2Fcp%2Flambda.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5c263e84ab7e5df28a9055ae533c2d305f4b7b3d/gcc%2Fcp%2Flambda.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Flambda.c?ref=5c263e84ab7e5df28a9055ae533c2d305f4b7b3d", "patch": "@@ -296,6 +296,9 @@ is_normal_capture_proxy (tree decl)\n void\n insert_capture_proxy (tree var)\n {\n+  if (is_normal_capture_proxy (var))\n+    register_local_specialization (var, DECL_CAPTURED_VARIABLE (var));\n+\n   /* Put the capture proxy in the extra body block so that it won't clash\n      with a later local variable.  */\n   pushdecl_outermost_localscope (var);\n@@ -364,7 +367,7 @@ lambda_proxy_type (tree ref)\n    debugging.  */\n \n tree\n-build_capture_proxy (tree member)\n+build_capture_proxy (tree member, tree init)\n {\n   tree var, object, fn, closure, name, lam, type;\n \n@@ -414,6 +417,29 @@ build_capture_proxy (tree member)\n   TREE_USED (var) = 1;\n   DECL_CONTEXT (var) = fn;\n \n+  if (DECL_NORMAL_CAPTURE_P (member))\n+    {\n+      if (DECL_VLA_CAPTURE_P (member))\n+\t{\n+\t  init = CONSTRUCTOR_ELT (init, 0)->value;\n+\t  init = TREE_OPERAND (init, 0); // Strip ADDR_EXPR.\n+\t  init = TREE_OPERAND (init, 0); // Strip ARRAY_REF.\n+\t}\n+      else\n+\t{\n+\t  if (PACK_EXPANSION_P (init))\n+\t    init = PACK_EXPANSION_PATTERN (init);\n+\t  if (TREE_CODE (init) == INDIRECT_REF)\n+\t    init = TREE_OPERAND (init, 0);\n+\t  STRIP_NOPS (init);\n+\t}\n+      gcc_assert (VAR_P (init) || TREE_CODE (init) == PARM_DECL);\n+      while (is_normal_capture_proxy (init))\n+\tinit = DECL_CAPTURED_VARIABLE (init);\n+      retrofit_lang_decl (var);\n+      DECL_CAPTURED_VARIABLE (var) = init;\n+    }\n+\n   if (name == this_identifier)\n     {\n       gcc_assert (LAMBDA_EXPR_THIS_CAPTURE (lam) == member);\n@@ -609,7 +635,7 @@ add_capture (tree lambda, tree id, tree orig_init, bool by_reference_p,\n     = tree_cons (listmem, initializer, LAMBDA_EXPR_CAPTURE_LIST (lambda));\n \n   if (LAMBDA_EXPR_CLOSURE (lambda))\n-    return build_capture_proxy (member);\n+    return build_capture_proxy (member, initializer);\n   /* For explicit captures we haven't started the function yet, so we wait\n      and build the proxy from cp_parser_lambda_body.  */\n   return NULL_TREE;\n@@ -1243,8 +1269,8 @@ lambda_static_thunk_p (tree fn)\n bool\n is_lambda_ignored_entity (tree val)\n {\n-  /* In unevaluated context, look past normal capture proxies.  */\n-  if (cp_unevaluated_operand && is_normal_capture_proxy (val))\n+  /* Look past normal capture proxies.  */\n+  if (is_normal_capture_proxy (val))\n     return true;\n \n   /* Always ignore lambda fields, their names are only for debugging.  */\n@@ -1325,7 +1351,7 @@ start_lambda_function (tree fco, tree lambda_expr)\n   /* Push the proxies for any explicit captures.  */\n   for (tree cap = LAMBDA_EXPR_CAPTURE_LIST (lambda_expr); cap;\n        cap = TREE_CHAIN (cap))\n-    build_capture_proxy (TREE_PURPOSE (cap));\n+    build_capture_proxy (TREE_PURPOSE (cap), TREE_VALUE (cap));\n \n   return body;\n }"}, {"sha": "6763a5b9c68254f978f32d151ff9a6e0e01307b7", "filename": "gcc/cp/name-lookup.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5c263e84ab7e5df28a9055ae533c2d305f4b7b3d/gcc%2Fcp%2Fname-lookup.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5c263e84ab7e5df28a9055ae533c2d305f4b7b3d/gcc%2Fcp%2Fname-lookup.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fname-lookup.c?ref=5c263e84ab7e5df28a9055ae533c2d305f4b7b3d", "patch": "@@ -5296,7 +5296,7 @@ qualify_lookup (tree val, int flags)\n   if (flags & (LOOKUP_PREFER_NAMESPACES | LOOKUP_PREFER_TYPES))\n     return false;\n   /* Look through lambda things that we shouldn't be able to see.  */\n-  if (is_lambda_ignored_entity (val))\n+  if (!(flags & LOOKUP_HIDDEN) && is_lambda_ignored_entity (val))\n     return false;\n   return true;\n }"}, {"sha": "f22c2c091dc31ff57c814a64394cfb1623dc4e6d", "filename": "gcc/cp/parser.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5c263e84ab7e5df28a9055ae533c2d305f4b7b3d/gcc%2Fcp%2Fparser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5c263e84ab7e5df28a9055ae533c2d305f4b7b3d/gcc%2Fcp%2Fparser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparser.c?ref=5c263e84ab7e5df28a9055ae533c2d305f4b7b3d", "patch": "@@ -10560,6 +10560,8 @@ cp_parser_lambda_body (cp_parser* parser, tree lambda_expr)\n      + function_definition_after_declarator\n      + ctor_initializer_opt_and_function_body  */\n   {\n+    local_specialization_stack s (lss_copy);\n+\n     tree fco = lambda_function (lambda_expr);\n     tree body = start_lambda_function (fco, lambda_expr);\n     bool done = false;"}, {"sha": "2bdac6de6c47e6d5ca07cef46652c862beec023f", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 5, "deletions": 8, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5c263e84ab7e5df28a9055ae533c2d305f4b7b3d/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5c263e84ab7e5df28a9055ae533c2d305f4b7b3d/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=5c263e84ab7e5df28a9055ae533c2d305f4b7b3d", "patch": "@@ -15986,7 +15986,8 @@ tsubst_expr (tree t, tree args, tsubst_flags_t complain, tree in_decl,\n \t  {\n \t    /* We're in tsubst_lambda_expr, we've already inserted a new\n \t       capture proxy, so look it up and register it.  */\n-\t    tree inst = lookup_name (DECL_NAME (decl));\n+\t    tree inst = lookup_name_real (DECL_NAME (decl), 0, 0,\n+\t\t\t\t\t  /*block_p=*/true, 0, LOOKUP_HIDDEN);\n \t    gcc_assert (inst != decl && is_capture_proxy (inst));\n \t    register_local_specialization (inst, decl);\n \t    break;\n@@ -16906,10 +16907,10 @@ tsubst_lambda_expr (tree t, tree args, tsubst_flags_t complain, tree in_decl)\n       if (nested)\n \tpush_function_context ();\n \n-      tree body = start_lambda_function (fn, r);\n-\n       local_specialization_stack s (lss_copy);\n \n+      tree body = start_lambda_function (fn, r);\n+\n       register_parameter_specializations (oldfn, fn);\n \n       tsubst_expr (DECL_SAVED_TREE (oldfn), args, complain, r,\n@@ -18136,11 +18137,7 @@ tsubst_copy_and_build (tree t,\n \t      r = build_cxx_call (wrap, 0, NULL, tf_warning_or_error);\n \t  }\n \telse if (outer_automatic_var_p (r))\n-\t  {\n-\t    r = process_outer_var_ref (r, complain);\n-\t    if (is_capture_proxy (r) && !DECL_PACK_P (t))\n-\t      register_local_specialization (r, t);\n-\t  }\n+\t  r = process_outer_var_ref (r, complain);\n \n \tif (TREE_CODE (TREE_TYPE (t)) != REFERENCE_TYPE)\n \t  /* If the original type was a reference, we'll be wrapped in"}, {"sha": "4e87e47d9b384824e26f15e44ab4d3bc3e1d249e", "filename": "gcc/cp/semantics.c", "status": "modified", "additions": 13, "deletions": 10, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5c263e84ab7e5df28a9055ae533c2d305f4b7b3d/gcc%2Fcp%2Fsemantics.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5c263e84ab7e5df28a9055ae533c2d305f4b7b3d/gcc%2Fcp%2Fsemantics.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fsemantics.c?ref=5c263e84ab7e5df28a9055ae533c2d305f4b7b3d", "patch": "@@ -3303,16 +3303,19 @@ process_outer_var_ref (tree decl, tsubst_flags_t complain)\n   if (parsing_nsdmi ())\n     containing_function = NULL_TREE;\n \n-  if (containing_function && DECL_TEMPLATE_INFO (context)\n-      && LAMBDA_FUNCTION_P (containing_function))\n-    {\n-      /* Check whether we've already built a proxy;\n-\t insert_pending_capture_proxies doesn't update\n-\t local_specializations.  */\n-      tree d = lookup_name (DECL_NAME (decl));\n-      if (d && is_capture_proxy (d)\n-\t  && DECL_CONTEXT (d) == containing_function)\n-\treturn d;\n+  if (containing_function && LAMBDA_FUNCTION_P (containing_function))\n+    {\n+      /* Check whether we've already built a proxy.  */\n+      tree d = retrieve_local_specialization (decl);\n+      if (d && is_capture_proxy (d))\n+\t{\n+\t  if (DECL_CONTEXT (d) == containing_function)\n+\t    /* We already have an inner proxy.  */\n+\t    return d;\n+\t  else\n+\t    /* We need to capture an outer proxy.  */\n+\t    return process_outer_var_ref (d, complain);\n+\t}\n     }\n \n   /* If we are in a lambda function, we can move out until we hit"}]}