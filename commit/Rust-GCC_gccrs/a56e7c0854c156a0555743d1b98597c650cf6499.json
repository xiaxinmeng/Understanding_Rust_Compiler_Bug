{"sha": "a56e7c0854c156a0555743d1b98597c650cf6499", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTU2ZTdjMDg1NGMxNTZhMDU1NTc0M2QxYjk4NTk3YzY1MGNmNjQ5OQ==", "commit": {"author": {"name": "Nick Clifton", "email": "nickc@cygnus.com", "date": "2000-01-05T23:26:06Z"}, "committer": {"name": "Nick Clifton", "email": "nickc@gcc.gnu.org", "date": "2000-01-05T23:26:06Z"}, "message": "Add support for generating unique sections for unitialised data.\n\nFrom-SVN: r31250", "tree": {"sha": "08dc8144ea0c144d00260987143d8dae09166953", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/08dc8144ea0c144d00260987143d8dae09166953"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a56e7c0854c156a0555743d1b98597c650cf6499", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a56e7c0854c156a0555743d1b98597c650cf6499", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a56e7c0854c156a0555743d1b98597c650cf6499", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a56e7c0854c156a0555743d1b98597c650cf6499/comments", "author": null, "committer": null, "parents": [{"sha": "d6ab24c514d5114ebd4af03bd765fa922bba9764", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d6ab24c514d5114ebd4af03bd765fa922bba9764", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d6ab24c514d5114ebd4af03bd765fa922bba9764"}], "stats": {"total": 257, "additions": 188, "deletions": 69}, "files": [{"sha": "b3456025bfd3eda8355534e39d514557b04428c7", "filename": "gcc/ChangeLog", "status": "modified", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a56e7c0854c156a0555743d1b98597c650cf6499/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a56e7c0854c156a0555743d1b98597c650cf6499/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=a56e7c0854c156a0555743d1b98597c650cf6499", "patch": "@@ -1,3 +1,37 @@\n+2000-01-05  Nick Clifton  <nickc@cygnus.com>\n+\n+\t* varasm.c (IN_NAMED_SECTION): Allow targets to provide their\n+\town definition of this macro.\n+\t(asm_emit_uninitialised): Invoke UNIQUE_SECTION if either\n+\tflag_data_sections or UNIQUE_SECTION_P are true.\n+\n+\t* tm.texi (UNIQUE)SECTION): Document that it can be called for\n+\tunitialised data decls.\n+\n+\t* config/i386/winnt.c (i386_pe_unique_section): Cope with\n+\tbeing called for uninitialised data.\n+\n+\t* config/i386/interix.c (i386_pe_unique_section): Cope with\n+\tbeing called for uninitialised data.\n+\n+\t* config/mips/elf.h (UNIQUE_SECTION): Cope with being called\n+\tfor uninitialised data. \n+\n+\t* config/mips/elf64.h (UNIQUE_SECTION): Cope with being called\n+\tfor uninitialised data. \n+\n+\t* config/mips/iri6gld.h (UNIQUE_SECTION): Cope with being called\n+\tfor uninitialised data. \n+\n+\t* config/arm/unknown-elf.h (IN_NAMED_SECTION): Define.\n+\t(UNIQUE_SECTION_P): Always generate a unique section if\n+\tflag_data_sections is true.\n+\t(UNIQUE_SECTION): Also generate unique sections for\n+\tuninitialised data.\n+\t(ASM_OUTPUT_ALIGNED_BSS): Redefine to use named_section().\n+\t(ASM_OUTPUT_ALIGNED_DECL_LOCAL): Redefine to use\n+\tnamed_section(). \n+\t\n 2000-01-06  Michael Hayes  <m.hayes@elec.canterbury.ac.nz>\n \n \t* config/c4x/t-c4x (TARGET_LIBGCC2_CFLAGS): Don't redefine SF, DF,"}, {"sha": "33bd9af459d4928c60d24064b181b370c3f1b5b1", "filename": "gcc/config/arm/unknown-elf.h", "status": "modified", "additions": 83, "deletions": 31, "changes": 114, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a56e7c0854c156a0555743d1b98597c650cf6499/gcc%2Fconfig%2Farm%2Funknown-elf.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a56e7c0854c156a0555743d1b98597c650cf6499/gcc%2Fconfig%2Farm%2Funknown-elf.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Funknown-elf.h?ref=a56e7c0854c156a0555743d1b98597c650cf6499", "patch": "@@ -122,38 +122,90 @@ do {\t\t\t\t\t\t\t\t\\\n #define NAME__MAIN \"__gccmain\"\n #define SYMBOL__MAIN __gccmain\n \n+/* Return a non-zero value if DECL has a section attribute.  */\n+#define IN_NAMED_SECTION(DECL)\t\t\t\t\t\t\\\n+  ((TREE_CODE (DECL) == FUNCTION_DECL || TREE_CODE (DECL) == VAR_DECL)\t\\\n+   && DECL_SECTION_NAME (DECL) != NULL_TREE)\n+\n+\n #define MAKE_DECL_ONE_ONLY(DECL) (DECL_WEAK (DECL) = 1)\n-#define UNIQUE_SECTION_P(DECL) (DECL_ONE_ONLY (DECL))\n-#define UNIQUE_SECTION(DECL,RELOC)\t\t\t\t\\\n-do {\t\t\t\t\t\t\t\t\\\n-  int len;\t\t\t\t\t\t\t\\\n-  char * name, * string, * prefix;\t\t\t\t\\\n-\t\t\t\t\t\t\t\t\\\n-  name = IDENTIFIER_POINTER (DECL_ASSEMBLER_NAME (DECL));\t\\\n-\t\t\t\t\t\t\t\t\\\n-  if (! DECL_ONE_ONLY (DECL))\t\t\t\t\t\\\n-    {\t\t\t\t\t\t\t\t\\\n-      prefix = \".\";                                             \\\n-      if (TREE_CODE (DECL) == FUNCTION_DECL)\t\t\t\\\n-\tprefix = \".text.\";\t\t\t\t\t\\\n-      else if (DECL_READONLY_SECTION (DECL, RELOC))\t\t\\\n-\tprefix = \".rodata.\";\t\t\t\t\t\\\n-      else\t\t\t\t\t\t\t\\\n-\tprefix = \".data.\";\t\t\t\t\t\\\n-    }\t\t\t\t\t\t\t\t\\\n-  else if (TREE_CODE (DECL) == FUNCTION_DECL)\t\t\t\\\n-    prefix = \".gnu.linkonce.t.\";\t\t\t\t\\\n-  else if (DECL_READONLY_SECTION (DECL, RELOC))\t\t\t\\\n-    prefix = \".gnu.linkonce.r.\";\t\t\t\t\\\n-  else\t\t\t\t\t\t\t\t\\\n-    prefix = \".gnu.linkonce.d.\";\t\t\t\t\\\n-\t\t\t\t\t\t\t\t\\\n-  len = strlen (name) + strlen (prefix);\t\t\t\\\n-  string = alloca (len + 1);\t\t\t\t\t\\\n-  sprintf (string, \"%s%s\", prefix, name);\t\t\t\\\n-\t\t\t\t\t\t\t\t\\\n-  DECL_SECTION_NAME (DECL) = build_string (len, string);\t\\\n-} while (0)\n+     \n+#define UNIQUE_SECTION_P(DECL) (DECL_ONE_ONLY (DECL) || flag_data_sections)\n+     \n+#define UNIQUE_SECTION(DECL, RELOC)\t\t\t\t\t\\\n+  do\t\t\t\t\t\t\t\t\t\\\n+    {\t\t\t\t\t\t\t\t\t\\\n+      int len;\t\t\t\t\t\t\t\t\\\n+      int sec;\t\t\t\t\t\t\t\t\\\n+      char *name;\t\t\t\t\t\t\t\\\n+      char *string;\t\t\t\t\t\t\t\\\n+      char *prefix;\t\t\t\t\t\t\t\\\n+      static char *prefixes[4][2] =\t\t\t\t\t\\\n+      {\t\t\t\t\t\t\t\t\t\\\n+\t{ \".text.\",   \".gnu.linkonce.t.\" },\t\t\t\t\\\n+\t{ \".rodata.\", \".gnu.linkonce.r.\" },\t\t\t\t\\\n+\t{ \".data.\",   \".gnu.linkonce.d.\" },\t\t\t\t\\\n+        { \".bss.\",    \".gnu.linkonce.b.\" }\t\t\t\t\\\n+      };\t\t\t\t\t\t\t\t\\\n+      \t\t\t\t\t\t\t\t\t\\\n+      if (TREE_CODE (DECL) == FUNCTION_DECL)\t\t\t\t\\\n+\tsec = 0;\t\t\t\t\t\t\t\\\n+      else if (DECL_INITIAL (DECL) == 0\t\t\t\t\t\\\n+\t       || DECL_INITIAL (DECL) == error_mark_node)\t\t\\\n+\tsec = 3;\t\t\t\t\t\t\t\\\n+      else if (DECL_READONLY_SECTION (DECL, RELOC))\t\t\t\\\n+\tsec = 1;\t\t\t\t\t\t\t\\\n+      else\t\t\t\t\t\t\t\t\\\n+\tsec = 2;\t\t\t\t\t\t\t\\\n+      \t\t\t\t\t\t\t\t\t\\\n+      prefix = prefixes[sec][DECL_ONE_ONLY(DECL)];\t\t\t\\\n+      name   = IDENTIFIER_POINTER (DECL_ASSEMBLER_NAME (DECL));\t\t\\\n+      \t\t\t\t\t\t\t\t\t\\\n+      /* Strip off any encoding in name.  */\t\t\t\t\\\n+      STRIP_NAME_ENCODING (name, name);\t\t\t\t\t\\\n+\t\t\t\t\t\t\t\t\t\\\n+      len    = strlen (name) + strlen (prefix);\t\t\t\t\\\n+      string = alloca (len + 1);\t\t\t\t\t\\\n+      \t\t\t\t\t\t\t\t\t\\\n+      sprintf (string, \"%s%s\", prefix, name);\t\t\t\t\\\n+      \t\t\t\t\t\t\t\t\t\\\n+      DECL_SECTION_NAME (DECL) = build_string (len, string);\t\t\\\n+    }\t\t\t\t\t\t\t\t\t\\\n+  while (0)\n+\n+#undef  ASM_OUTPUT_ALIGNED_BSS\n+#define ASM_OUTPUT_ALIGNED_BSS(FILE, DECL, NAME, SIZE, ALIGN)   \t\\\n+  do\t\t\t\t\t\t\t\t\t\\\n+    {\t\t\t\t\t\t\t\t\t\\\n+      if (IN_NAMED_SECTION (DECL))\t\t\t\t\t\\\n+\tnamed_section (DECL, NULL, 0);\t\t\t\t\t\\\n+      else\t\t\t\t\t\t\t\t\\\n+\tbss_section ();\t\t\t\t\t\t\t\\\n+      \t\t\t\t\t\t\t\t\t\\\n+      ASM_GLOBALIZE_LABEL (FILE, NAME);\t\t\t\t\t\\\n+      \t\t\t\t\t\t\t\t\t\\\n+      ASM_OUTPUT_ALIGN (FILE, floor_log2 (ALIGN / BITS_PER_UNIT));\t\\\n+\t\t\t\t\t\t\t\t\t\\\n+      last_assemble_variable_decl = DECL;\t\t\t\t\\\n+      ASM_DECLARE_OBJECT_NAME (FILE, NAME, DECL);\t\t\t\\\n+      ASM_OUTPUT_SKIP (FILE, SIZE ? SIZE : 1);\t\t\t\t\\\n+    } \t\t\t\t\t\t\t\t\t\\\n+  while (0)\n+\n+#undef  ASM_OUTPUT_ALIGNED_DECL_LOCAL\n+#define ASM_OUTPUT_ALIGNED_DECL_LOCAL(FILE, DECL, NAME, SIZE, ALIGN)\t\\\n+  do\t\t\t\t\t\t\t\t\t\\\n+    {\t\t\t\t\t\t\t\t\t\\\n+      if (IN_NAMED_SECTION (DECL))\t\t\t\t\t\\\n+\tnamed_section (DECL, NULL, 0);\t\t\t\t\t\\\n+      else\t\t\t\t\t\t\t\t\\\n+\tbss_section ();\t\t\t\t\t\t\t\\\n+\t\t\t\t\t\t\t\t\t\\\n+      ASM_OUTPUT_ALIGN (FILE, floor_log2 (ALIGN / BITS_PER_UNIT));\t\\\n+      ASM_OUTPUT_LABEL (FILE, NAME);\t\t\t\t\t\\\n+      fprintf (FILE, \"\\t.space\\t%d\\n\", SIZE);\t\t\t\t\\\n+    }\t\t\t\t\t\t\t\t\t\\\n+  while (0)\n \n #ifndef CPP_APCS_PC_DEFAULT_SPEC\n #define CPP_APCS_PC_DEFAULT_SPEC\t\"-D__APCS_32__\""}, {"sha": "4f4f8233e187908e9c889e5cfd9d8375040e391b", "filename": "gcc/config/i386/interix.c", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a56e7c0854c156a0555743d1b98597c650cf6499/gcc%2Fconfig%2Fi386%2Finterix.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a56e7c0854c156a0555743d1b98597c650cf6499/gcc%2Fconfig%2Fi386%2Finterix.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Finterix.c?ref=a56e7c0854c156a0555743d1b98597c650cf6499", "patch": "@@ -93,6 +93,9 @@ i386_pe_unique_section (decl, reloc)\n      without a .rdata section.  */\n   if (TREE_CODE (decl) == FUNCTION_DECL)\n     prefix = \".text$\";\n+  else if (DECL_INITIAL (decl) == 0\n+\t   || DECL_INITIAL (decl) == error_mark_node)\n+    prefix = \"\";\n   else if (DECL_READONLY_SECTION (decl, reloc))\n #ifdef READONLY_DATA_SECTION\n     prefix = \".rdata$\";"}, {"sha": "13701e2c4e2698186feb08adb6bcad3ccfa4092b", "filename": "gcc/config/i386/winnt.c", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a56e7c0854c156a0555743d1b98597c650cf6499/gcc%2Fconfig%2Fi386%2Fwinnt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a56e7c0854c156a0555743d1b98597c650cf6499/gcc%2Fconfig%2Fi386%2Fwinnt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fwinnt.c?ref=a56e7c0854c156a0555743d1b98597c650cf6499", "patch": "@@ -480,6 +480,9 @@ i386_pe_unique_section (decl, reloc)\n      without a .rdata section.  */\n   if (TREE_CODE (decl) == FUNCTION_DECL)\n     prefix = \".text$\";\n+  else if (DECL_INITIAL (decl) == 0\n+\t   || DECL_INITIAL (decl) == error_mark_node)\n+    prefix = \"\";\n   else if (DECL_READONLY_SECTION (decl, reloc))\n #ifdef READONLY_DATA_SECTION\n     prefix = \".rdata$\";"}, {"sha": "b265295f5c23119707976026cdfcb79216d1fe72", "filename": "gcc/config/mips/elf.h", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a56e7c0854c156a0555743d1b98597c650cf6499/gcc%2Fconfig%2Fmips%2Felf.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a56e7c0854c156a0555743d1b98597c650cf6499/gcc%2Fconfig%2Fmips%2Felf.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Felf.h?ref=a56e7c0854c156a0555743d1b98597c650cf6499", "patch": "@@ -212,20 +212,24 @@ do {\t\t\t\t\t\t\t\t\t \\\n do {\t\t\t\t\t\t\t\t\t   \\\n   int len, size, sec;\t\t\t\t\t\t\t   \\\n   char *name, *string, *prefix;\t\t\t\t\t\t   \\\n-  static char *prefixes[4][2] = {\t\t\t\t\t   \\\n+  static char *prefixes[5][2] = {\t\t\t\t\t   \\\n     { \".text.\", \".gnu.linkonce.t.\" },\t\t\t\t\t   \\\n     { \".rodata.\", \".gnu.linkonce.r.\" },\t\t\t\t\t   \\\n     { \".data.\", \".gnu.linkonce.d.\" },\t\t\t\t\t   \\\n-    { \".sdata.\", \".gnu.linkonce.s.\" }\t\t\t\t\t   \\\n+    { \".sdata.\", \".gnu.linkonce.s.\" },\t\t\t\t\t   \\\n+    { \"\", \"\" }\t\t\t\t\t\t\t\t   \\\n   };\t\t\t\t\t\t\t\t\t   \\\n \t\t\t\t\t\t\t\t\t   \\\n   name = IDENTIFIER_POINTER (DECL_ASSEMBLER_NAME (DECL));\t\t   \\\n   size = int_size_in_bytes (TREE_TYPE (decl));\t\t\t\t   \\\n \t\t\t\t\t\t\t\t\t   \\\n   /* Determine the base section we are interested in:\t\t\t   \\\n-     0=text, 1=rodata, 2=data, 3=sdata.  */\t\t\t\t   \\\n+     0=text, 1=rodata, 2=data, 3=sdata, [4=bss].  */\t\t\t   \\\n   if (TREE_CODE (DECL) == FUNCTION_DECL)\t\t\t\t   \\\n     sec = 0;\t\t\t\t\t\t\t\t   \\\n+  else if (DECL_INITIAL (DECL) == 0\t\t\t\t\t   \\\n+           || DECL_INITIAL (DECL) == error_mark_node)\t\t\t   \\\n+    sec = 4;\t\t\t\t\t\t\t\t   \\\n   else if ((TARGET_EMBEDDED_PIC || TARGET_MIPS16)\t\t\t   \\\n       && TREE_CODE (decl) == STRING_CST\t\t\t\t\t   \\\n       && !flag_writable_strings)\t\t\t\t\t   \\"}, {"sha": "907e4cb0ccad64d85e1bf5bf3fcbf6487ebba163", "filename": "gcc/config/mips/elf64.h", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a56e7c0854c156a0555743d1b98597c650cf6499/gcc%2Fconfig%2Fmips%2Felf64.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a56e7c0854c156a0555743d1b98597c650cf6499/gcc%2Fconfig%2Fmips%2Felf64.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Felf64.h?ref=a56e7c0854c156a0555743d1b98597c650cf6499", "patch": "@@ -197,16 +197,20 @@ do {\t\t\t\t\t\t\t\t\t   \\\n     { \".text.\", \".gnu.linkonce.t.\" },\t\t\t\t\t   \\\n     { \".rodata.\", \".gnu.linkonce.r.\" },\t\t\t\t\t   \\\n     { \".data.\", \".gnu.linkonce.d.\" },\t\t\t\t\t   \\\n-    { \".sdata.\", \".gnu.linkonce.s.\" }\t\t\t\t\t   \\\n+    { \".sdata.\", \".gnu.linkonce.s.\" },\t\t\t\t\t   \\\n+    { \"\", \"\" }\t\t\t\t\t\t\t\t   \\\n   };\t\t\t\t\t\t\t\t\t   \\\n \t\t\t\t\t\t\t\t\t   \\\n   name = IDENTIFIER_POINTER (DECL_ASSEMBLER_NAME (DECL));\t\t   \\\n   size = int_size_in_bytes (TREE_TYPE (decl));\t\t\t\t   \\\n \t\t\t\t\t\t\t\t\t   \\\n   /* Determine the base section we are interested in:\t\t\t   \\\n-     0=text, 1=rodata, 2=data, 3=sdata.  */\t\t\t\t   \\\n+     0=text, 1=rodata, 2=data, 3=sdata, [4=bss].  */\t\t\t   \\\n   if (TREE_CODE (DECL) == FUNCTION_DECL)\t\t\t\t   \\\n     sec = 0;\t\t\t\t\t\t\t\t   \\\n+  else if (DECL_INITIAL (DECL) == 0\t\t\t\t\t   \\\n+           || DECL_INITIAL (DECL) == error_mark_node)\t\t\t   \\\n+    sec = 4;\t\t\t\t\t\t\t\t   \\\n   else if ((TARGET_EMBEDDED_PIC || TARGET_MIPS16)\t\t\t   \\\n       && TREE_CODE (decl) == STRING_CST\t\t\t\t\t   \\\n       && !flag_writable_strings)\t\t\t\t\t   \\"}, {"sha": "142402115e7514caad4eb0ca115162a7006481f7", "filename": "gcc/config/mips/iris6gld.h", "status": "modified", "additions": 36, "deletions": 26, "changes": 62, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a56e7c0854c156a0555743d1b98597c650cf6499/gcc%2Fconfig%2Fmips%2Firis6gld.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a56e7c0854c156a0555743d1b98597c650cf6499/gcc%2Fconfig%2Fmips%2Firis6gld.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Firis6gld.h?ref=a56e7c0854c156a0555743d1b98597c650cf6499", "patch": "@@ -49,35 +49,45 @@ Boston, MA 02111-1307, USA.  */\n \n /* The GNU linker supports one-only sections.  */\n #define MAKE_DECL_ONE_ONLY(DECL) (DECL_WEAK (DECL) = 1)\n-#undef UNIQUE_SECTION_P\n+#undef  UNIQUE_SECTION_P\n #define UNIQUE_SECTION_P(DECL) (DECL_ONE_ONLY (DECL))\n-#define UNIQUE_SECTION(DECL,RELOC)\t\t\t\t\\\n-do {\t\t\t\t\t\t\t\t\\\n-  int len;\t\t\t\t\t\t\t\\\n-  char *name, *string, *prefix;\t\t\t\t\t\\\n-\t\t\t\t\t\t\t\t\\\n-  name = IDENTIFIER_POINTER (DECL_ASSEMBLER_NAME (DECL));\t\\\n-\t\t\t\t\t\t\t\t\\\n-  if (! DECL_ONE_ONLY (DECL))\t\t\t\t\t\\\n+#define UNIQUE_SECTION(DECL, RELOC)\t\t\t\t\\\n+  do\t\t\t\t\t\t\t\t\\\n     {\t\t\t\t\t\t\t\t\\\n-      prefix = \".\";                                             \\\n+      int len;\t\t\t\t\t\t\t\\\n+      int sec;\t\t\t\t\t\t\t\\\n+      char *name;\t\t\t\t\t\t\\\n+      char *string;\t\t\t\t\t\t\\\n+      char *prefix;\t\t\t\t\t\t\\\n+      static char *prefixes[4][2] =\t\t\t\t\\\n+      {\t\t\t\t\t\t\t\t\\\n+\t{ \".text.\",   \".gnu.linkonce.t.\" },\t\t\t\\\n+\t{ \".rodata.\", \".gnu.linkonce.r.\" },\t\t\t\\\n+\t{ \".data.\",   \".gnu.linkonce.d.\" },\t\t\t\\\n+\t/* Do not generate unique sections for uninitialised \t\\\n+\t   data since we do not have support for this in the    \\\n+\t   linker scripts yet...\t\t\t\t\\\n+        { \".bss.\",    \".gnu.linkonce.b.\" }  */\t\t\t\\\n+\t{ \"\", \"\" }\t\t\t\t\t\t\\\n+      };\t\t\t\t\t\t\t\\\n+      \t\t\t\t\t\t\t\t\\\n       if (TREE_CODE (DECL) == FUNCTION_DECL)\t\t\t\\\n-\tprefix = \".text.\";\t\t\t\t\t\\\n+\tsec = 0;\t\t\t\t\t\t\\\n+      else if (DECL_INITIAL (DECL) == 0\t\t\t\t\\\n+\t       || DECL_INITIAL (DECL) == error_mark_node)\t\\\n+\tsec = 3;\t\t\t\t\t\t\\\n       else if (DECL_READONLY_SECTION (DECL, RELOC))\t\t\\\n-\tprefix = \".rodata.\";\t\t\t\t\t\\\n+\tsec = 1;\t\t\t\t\t\t\\\n       else\t\t\t\t\t\t\t\\\n-\tprefix = \".data.\";\t\t\t\t\t\\\n+\tsec = 2;\t\t\t\t\t\t\\\n+      \t\t\t\t\t\t\t\t\\\n+      name   = IDENTIFIER_POINTER (DECL_ASSEMBLER_NAME (DECL));\t\\\n+      prefix = prefixes[sec][DECL_ONE_ONLY(DECL)];\t\t\\\n+      len    = strlen (name) + strlen (prefix);\t\t\t\\\n+      string = alloca (len + 1);\t\t\t\t\\\n+      \t\t\t\t\t\t\t\t\\\n+      sprintf (string, \"%s%s\", prefix, name);\t\t\t\\\n+      \t\t\t\t\t\t\t\t\\\n+      DECL_SECTION_NAME (DECL) = build_string (len, string);\t\\\n     }\t\t\t\t\t\t\t\t\\\n-  else if (TREE_CODE (DECL) == FUNCTION_DECL)\t\t\t\\\n-    prefix = \".gnu.linkonce.t.\";\t\t\t\t\\\n-  else if (DECL_READONLY_SECTION (DECL, RELOC))\t\t\t\\\n-    prefix = \".gnu.linkonce.r.\";\t\t\t\t\\\n-  else\t\t\t\t\t\t\t\t\\\n-    prefix = \".gnu.linkonce.d.\";\t\t\t\t\\\n-\t\t\t\t\t\t\t\t\\\n-  len = strlen (name) + strlen (prefix);\t\t\t\\\n-  string = alloca (len + 1);\t\t\t\t\t\\\n-  sprintf (string, \"%s%s\", prefix, name);\t\t\t\\\n-\t\t\t\t\t\t\t\t\\\n-  DECL_SECTION_NAME (DECL) = build_string (len, string);\t\\\n-} while (0)\n+  while (0)"}, {"sha": "b2d43c954ac27d652ab81903786b3e2525a6d95e", "filename": "gcc/tm.texi", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a56e7c0854c156a0555743d1b98597c650cf6499/gcc%2Ftm.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a56e7c0854c156a0555743d1b98597c650cf6499/gcc%2Ftm.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftm.texi?ref=a56e7c0854c156a0555743d1b98597c650cf6499", "patch": "@@ -4999,7 +4999,9 @@ A C statement to build up a unique section name, expressed as a\n STRING_CST node, and assign it to @samp{DECL_SECTION_NAME (@var{decl})}.\n @var{reloc} indicates whether the initial value of @var{exp} requires\n link-time relocations.  If you do not define this macro, GCC will use\n-the symbol name prefixed by @samp{.} as the section name.\n+the symbol name prefixed by @samp{.} as the section name.  Note - this\n+macro can now be called for unitialised data items as well as\n+initialised data and functions.\n @end table\n \n @node PIC\n@@ -5513,7 +5515,6 @@ in place of both @code{ASM_OUTPUT_DECL} and\n @code{ASM_OUTPUT_ALIGNED_DECL}.  Define this macro when you need to see\n the variable's decl in order to chose what to output.\n \n-\n @findex ASM_OUTPUT_SHARED_LOCAL\n @item ASM_OUTPUT_SHARED_LOCAL (@var{stream}, @var{name}, @var{size}, @var{rounded})\n If defined, it is similar to @code{ASM_OUTPUT_LOCAL}, except that it"}, {"sha": "2743abe709b9f4ac78b3d0266caf6df327d74d14", "filename": "gcc/varasm.c", "status": "modified", "additions": 13, "deletions": 5, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a56e7c0854c156a0555743d1b98597c650cf6499/gcc%2Fvarasm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a56e7c0854c156a0555743d1b98597c650cf6499/gcc%2Fvarasm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvarasm.c?ref=a56e7c0854c156a0555743d1b98597c650cf6499", "patch": "@@ -202,10 +202,12 @@ static enum in_section { no_section, in_text, in_data, in_named\n } in_section = no_section;\n \n /* Return a non-zero value if DECL has a section attribute.  */\n+#ifndef IN_NAMED_SECTION\n #define IN_NAMED_SECTION(DECL) \\\n   ((TREE_CODE (DECL) == FUNCTION_DECL || TREE_CODE (DECL) == VAR_DECL) \\\n    && DECL_SECTION_NAME (DECL) != NULL_TREE)\n-\n+#endif\n+     \n /* Text of section name when in_section == in_named.  */\n static char *in_named_name;\n \n@@ -1233,7 +1235,8 @@ asm_emit_uninitialised (decl, name, size, rounded)\n      int size;\n      int rounded ATTRIBUTE_UNUSED;\n {\n-  enum {\n+  enum\n+  {\n     asm_dest_common,\n     asm_dest_bss,\n     asm_dest_local\n@@ -1274,6 +1277,12 @@ asm_emit_uninitialised (decl, name, size, rounded)\n \t}\n     }\n \n+#ifdef ASM_OUTPUT_SECTION_NAME\n+  /* We already know that DECL_SECTION_NAME() == NULL.  */\n+  if (flag_data_sections != 0 || UNIQUE_SECTION_P (decl))\n+    UNIQUE_SECTION (decl, NULL);\n+#endif\n+  \n   switch (destination)\n     {\n #ifdef ASM_EMIT_BSS\n@@ -1486,7 +1495,7 @@ assemble_variable (decl, top_level, at_end, dont_output_data)\n #if ! defined ASM_EMIT_BSS\n       && DECL_COMMON (decl)\n #endif\n-      && DECL_SECTION_NAME (decl) == 0\n+      && DECL_SECTION_NAME (decl) == NULL_TREE\n       && ! dont_output_data)\n     {\n       int size = TREE_INT_CST_LOW (size_tree);\n@@ -1575,8 +1584,7 @@ assemble_variable (decl, top_level, at_end, dont_output_data)\n     reloc = output_addressed_constants (DECL_INITIAL (decl));\n \n #ifdef ASM_OUTPUT_SECTION_NAME\n-  if ((flag_data_sections != 0\n-       && DECL_SECTION_NAME (decl) == NULL_TREE)\n+  if ((flag_data_sections != 0 && DECL_SECTION_NAME (decl) == NULL_TREE)\n       || UNIQUE_SECTION_P (decl))\n     UNIQUE_SECTION (decl, reloc);\n #endif"}]}