{"sha": "8d45ce773959d3e89c18790d9f5b48d526dcdd07", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGQ0NWNlNzczOTU5ZDNlODljMTg3OTBkOWY1YjQ4ZDUyNmRjZGQwNw==", "commit": {"author": {"name": "Hristian Kirtchev", "email": "kirtchev@adacore.com", "date": "2018-07-17T08:03:54Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "pmderodat@gcc.gnu.org", "date": "2018-07-17T08:03:54Z"}, "message": "[Ada] Spurious error on unused Part_Of constituent\n\nThis patch updates the analysis of indicator Part_Of (or the lack thereof), to\nignore generic formal parameters for purposes of determining the visible state\nspace because they are not visible outside the generic and related instances.\n\n------------\n-- Source --\n------------\n\n--  gen_pack.ads\n\ngeneric\n   In_Formal     : in     Integer := 0;\n   In_Out_Formal : in out Integer;\n\npackage Gen_Pack is\n   Exported_In_Formal     : Integer renames In_Formal;\n   Exported_In_Out_Formal : Integer renames In_Out_Formal;\n\nend Gen_Pack;\n\n--  pack.ads\n\nwith Gen_Pack;\n\npackage Pack\n  with Abstract_State => State\nis\n   procedure Force_Body;\n\n   Val : Integer;\n\nprivate\n   package OK_1 is\n     new Gen_Pack (In_Out_Formal => Val)\n   with Part_Of => State;                                            --  OK\n\n   package OK_2 is\n     new Gen_Pack (In_Formal => 1, In_Out_Formal => Val)\n   with Part_Of => State;                                            --  OK\n\n   package Error_1 is                                                --  Error\n     new Gen_Pack (In_Out_Formal => Val);\n   package Error_2 is                                                --  Error\n     new Gen_Pack (In_Formal => 2, In_Out_Formal => Val);\nend Pack;\n\n--  pack.adb\n\npackage body Pack\n  with Refined_State =>                                              --  Error\n         (State => (OK_1.Exported_In_Formal,\n                    OK_1.Exported_In_Out_Formal))\nis\n   procedure Force_Body is null;\nend Pack;\n\n--  gen_pack.ads\n\ngeneric\n   In_Formal     : in     Integer := 0;\n   In_Out_Formal : in out Integer;\n\npackage Gen_Pack is\n   Exported_In_Formal     : Integer renames In_Formal;\n   Exported_In_Out_Formal : Integer renames In_Out_Formal;\n\nend Gen_Pack;\n\n--  pack.ads\n\nwith Gen_Pack;\n\npackage Pack\n  with Abstract_State => State\nis\n   procedure Force_Body;\n\n   Val : Integer;\n\nprivate\n   package OK_1 is\n     new Gen_Pack (In_Out_Formal => Val)\n   with Part_Of => State;                                            --  OK\n\n   package OK_2 is\n     new Gen_Pack (In_Formal => 1, In_Out_Formal => Val)\n   with Part_Of => State;                                            --  OK\n\n   package Error_1 is                                                --  Error\n     new Gen_Pack (In_Out_Formal => Val);\n   package Error_2 is                                                --  Error\n     new Gen_Pack (In_Formal => 2, In_Out_Formal => Val);\nend Pack;\n\n--  pack.adb\n\npackage body Pack\n  with Refined_State =>                                              --  Error\n         (State => (OK_1.Exported_In_Formal,\n                    OK_1.Exported_In_Out_Formal))\nis\n   procedure Force_Body is null;\nend Pack;\n\n----------------------------\n-- Compilation and output --\n----------------------------\n\n$ gcc -c pack.adb\npack.adb:3:11: state \"State\" has unused Part_Of constituents\npack.adb:3:11: constant \"Exported_In_Formal\" defined at gen_pack.ads:6,\n  instance at pack.ads:15\npack.adb:3:11: variable \"Exported_In_Out_Formal\" defined at gen_pack.ads:7,\n  instance at pack.ads:15\npack.ads:19:12: indicator Part_Of is required in this context (SPARK RM\n  7.2.6(2))\npack.ads:19:12: \"Error_1\" is declared in the private part of package \"Pack\"\npack.ads:21:12: indicator Part_Of is required in this context (SPARK RM\n  7.2.6(2))\npack.ads:21:12: \"Error_2\" is declared in the private part of package \"Pack\"\n\n2018-07-17  Hristian Kirtchev  <kirtchev@adacore.com>\n\ngcc/ada/\n\n\t* sem_prag.adb (Has_Visible_State): Do not consider generic formals\n\tbecause they are not part of the visible state space. Add constants to\n\tthe list of acceptable visible states.\n\t(Propagate_Part_Of): Do not consider generic formals when propagating\n\tthe Part_Of indicator.\n\t* sem_util.adb (Entity_Of): Do not follow renaming chains which go\n\tthrough a generic formal because they are not visible for SPARK\n\tpurposes.\n\t* sem_util.ads (Entity_Of): Update the comment on usage.\n\nFrom-SVN: r262768", "tree": {"sha": "8eb285887bca68c38f3a3039c0244fe0840f1cc2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8eb285887bca68c38f3a3039c0244fe0840f1cc2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8d45ce773959d3e89c18790d9f5b48d526dcdd07", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8d45ce773959d3e89c18790d9f5b48d526dcdd07", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8d45ce773959d3e89c18790d9f5b48d526dcdd07", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8d45ce773959d3e89c18790d9f5b48d526dcdd07/comments", "author": {"login": "kirtchev-adacore", "id": 60669983, "node_id": "MDQ6VXNlcjYwNjY5OTgz", "avatar_url": "https://avatars.githubusercontent.com/u/60669983?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kirtchev-adacore", "html_url": "https://github.com/kirtchev-adacore", "followers_url": "https://api.github.com/users/kirtchev-adacore/followers", "following_url": "https://api.github.com/users/kirtchev-adacore/following{/other_user}", "gists_url": "https://api.github.com/users/kirtchev-adacore/gists{/gist_id}", "starred_url": "https://api.github.com/users/kirtchev-adacore/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kirtchev-adacore/subscriptions", "organizations_url": "https://api.github.com/users/kirtchev-adacore/orgs", "repos_url": "https://api.github.com/users/kirtchev-adacore/repos", "events_url": "https://api.github.com/users/kirtchev-adacore/events{/privacy}", "received_events_url": "https://api.github.com/users/kirtchev-adacore/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "efa129331c5ceb9937c990f45f3bfd447cbe290e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/efa129331c5ceb9937c990f45f3bfd447cbe290e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/efa129331c5ceb9937c990f45f3bfd447cbe290e"}], "stats": {"total": 70, "additions": 55, "deletions": 15}, "files": [{"sha": "b322861a246290353f84b380f7c5bebd038f9f13", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8d45ce773959d3e89c18790d9f5b48d526dcdd07/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8d45ce773959d3e89c18790d9f5b48d526dcdd07/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=8d45ce773959d3e89c18790d9f5b48d526dcdd07", "patch": "@@ -1,3 +1,15 @@\n+2018-07-17  Hristian Kirtchev  <kirtchev@adacore.com>\n+\n+\t* sem_prag.adb (Has_Visible_State): Do not consider generic formals\n+\tbecause they are not part of the visible state space. Add constants to\n+\tthe list of acceptable visible states.\n+\t(Propagate_Part_Of): Do not consider generic formals when propagating\n+\tthe Part_Of indicator.\n+\t* sem_util.adb (Entity_Of): Do not follow renaming chains which go\n+\tthrough a generic formal because they are not visible for SPARK\n+\tpurposes.\n+\t* sem_util.ads (Entity_Of): Update the comment on usage.\n+\n 2018-07-17  Ed Schonberg  <schonberg@adacore.com>\n \n \t* sem_util.adb (Gather_Components): A discriminant of an ancestor may"}, {"sha": "37b7d23d348a2dfe633e3a8dc6c958671d889ef8", "filename": "gcc/ada/sem_prag.adb", "status": "modified", "additions": 18, "deletions": 1, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8d45ce773959d3e89c18790d9f5b48d526dcdd07/gcc%2Fada%2Fsem_prag.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8d45ce773959d3e89c18790d9f5b48d526dcdd07/gcc%2Fada%2Fsem_prag.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_prag.adb?ref=8d45ce773959d3e89c18790d9f5b48d526dcdd07", "patch": "@@ -19982,6 +19982,13 @@ package body Sem_Prag is\n                      if not Comes_From_Source (Item_Id) then\n                         null;\n \n+                     --  Do not consider generic formals or their corresponding\n+                     --  actuals because they are not part of a visible state.\n+                     --  Note that both entities are marked as hidden.\n+\n+                     elsif Is_Hidden (Item_Id) then\n+                        null;\n+\n                      --  The Part_Of indicator turns an abstract state or an\n                      --  object into a constituent of the encapsulating state.\n \n@@ -28775,9 +28782,19 @@ package body Sem_Prag is\n             if not Comes_From_Source (Item_Id) then\n                null;\n \n+            --  Do not consider generic formals or their corresponding actuals\n+            --  because they are not part of a visible state. Note that both\n+            --  entities are marked as hidden.\n+\n+            elsif Is_Hidden (Item_Id) then\n+               null;\n+\n             --  A visible state has been found\n \n-            elsif Ekind_In (Item_Id, E_Abstract_State, E_Variable) then\n+            elsif Ekind_In (Item_Id, E_Abstract_State,\n+                                     E_Constant,\n+                                     E_Variable)\n+            then\n                return True;\n \n             --  Recursively peek into nested packages and instantiations"}, {"sha": "097739270dc6acd47b646565b72500b3047e56d5", "filename": "gcc/ada/sem_util.adb", "status": "modified", "additions": 13, "deletions": 3, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8d45ce773959d3e89c18790d9f5b48d526dcdd07/gcc%2Fada%2Fsem_util.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8d45ce773959d3e89c18790d9f5b48d526dcdd07/gcc%2Fada%2Fsem_util.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_util.adb?ref=8d45ce773959d3e89c18790d9f5b48d526dcdd07", "patch": "@@ -7442,7 +7442,17 @@ package body Sem_Util is\n             --    Ren : ... renames Obj;\n \n             if Is_Entity_Name (Ren) then\n-               Id := Entity (Ren);\n+\n+               --  Do not follow a renaming that goes through a generic formal,\n+               --  because these entities are hidden and must not be referenced\n+               --  from outside the generic.\n+\n+               if Is_Hidden (Entity (Ren)) then\n+                  exit;\n+\n+               else\n+                  Id := Entity (Ren);\n+               end if;\n \n             --  The reference renames a function result. Check the original\n             --  node in case expansion relocates the function call.\n@@ -8819,7 +8829,7 @@ package body Sem_Util is\n                --  Stored_Constraint as well.\n \n                --  An inherited discriminant may have been constrained in a\n-               --  later ancestor (no the immediate parent) so we must examine\n+               --  later ancestor (not the immediate parent) so we must examine\n                --  the stored constraint of all of them to locate the inherited\n                --  value.\n \n@@ -8858,7 +8868,7 @@ package body Sem_Util is\n                         end loop;\n                      end if;\n \n-                     --  Discriminant may be inherited from ancestor.\n+                     --  Discriminant may be inherited from ancestor\n                      T := Etype (T);\n                   end loop;\n                end;"}, {"sha": "21a74ae0fcfd4881bd6a9d4f496592ca292903f8", "filename": "gcc/ada/sem_util.ads", "status": "modified", "additions": 12, "deletions": 11, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8d45ce773959d3e89c18790d9f5b48d526dcdd07/gcc%2Fada%2Fsem_util.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8d45ce773959d3e89c18790d9f5b48d526dcdd07/gcc%2Fada%2Fsem_util.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_util.ads?ref=8d45ce773959d3e89c18790d9f5b48d526dcdd07", "patch": "@@ -126,8 +126,8 @@ package Sem_Util is\n       Loc    : Source_Ptr := No_Location;\n       Rep    : Boolean    := True;\n       Warn   : Boolean    := False);\n-   --  N is a subexpression which will raise constraint error when evaluated\n-   --  at runtime. Msg is a message that explains the reason for raising the\n+   --  N is a subexpression that will raise Constraint_Error when evaluated\n+   --  at run time. Msg is a message that explains the reason for raising the\n    --  exception. The last character is ? if the message is always a warning,\n    --  even in Ada 95, and is not a ? if the message represents an illegality\n    --  (because of violation of static expression rules) in Ada 95 (but not\n@@ -614,19 +614,19 @@ package Sem_Util is\n    --  Emit an error if iterated component association N is actually an illegal\n    --  quantified expression lacking a quantifier.\n \n-   function Dynamic_Accessibility_Level (Expr : Node_Id) return Node_Id;\n-   --  Expr should be an expression of an access type. Builds an integer\n-   --  literal except in cases involving anonymous access types where\n-   --  accessibility levels are tracked at runtime (access parameters and Ada\n-   --  2012 stand-alone objects).\n-\n    function Discriminated_Size (Comp : Entity_Id) return Boolean;\n    --  If a component size is not static then a warning will be emitted\n    --  in Ravenscar or other restricted contexts. When a component is non-\n    --  static because of a discriminant constraint we can specialize the\n    --  warning by mentioning discriminants explicitly. This was created for\n    --  private components of protected objects, but is generally useful when\n-   --  retriction (No_Implicit_Heap_Allocation) is active.\n+   --  restriction No_Implicit_Heap_Allocation is active.\n+\n+   function Dynamic_Accessibility_Level (Expr : Node_Id) return Node_Id;\n+   --  Expr should be an expression of an access type. Builds an integer\n+   --  literal except in cases involving anonymous access types, where\n+   --  accessibility levels are tracked at run time (access parameters and\n+   --  Ada 2012 stand-alone objects).\n \n    function Effective_Extra_Accessibility (Id : Entity_Id) return Entity_Id;\n    --  Same as Einfo.Extra_Accessibility except thtat object renames\n@@ -705,7 +705,8 @@ package Sem_Util is\n    function Entity_Of (N : Node_Id) return Entity_Id;\n    --  Obtain the entity of arbitrary node N. If N is a renaming, return the\n    --  entity of the earliest renamed source abstract state or whole object.\n-   --  If no suitable entity is available, return Empty.\n+   --  If no suitable entity is available, return Empty. This routine carries\n+   --  out actions that are tied to SPARK semantics.\n \n    procedure Explain_Limited_Type (T : Entity_Id; N : Node_Id);\n    --  This procedure is called after issuing a message complaining about an\n@@ -2025,7 +2026,7 @@ package Sem_Util is\n \n    function Is_Transfer (N : Node_Id) return Boolean;\n    --  Returns True if the node N is a statement which is known to cause an\n-   --  unconditional transfer of control at runtime, i.e. the following\n+   --  unconditional transfer of control at run time, i.e. the following\n    --  statement definitely will not be executed.\n \n    function Is_True (U : Uint) return Boolean;"}]}