{"sha": "81fbaa4179fdff35a8f4a30505ce38ff38ece210", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODFmYmFhNDE3OWZkZmYzNWE4ZjRhMzA1MDVjZTM4ZmYzOGVjZTIxMA==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1994-04-21T19:31:30Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1994-04-21T19:31:30Z"}, "message": "Add prototypes for static functions.\n\nUse CONST_DOUBLE_FROM_REAL_VALUE macro for immed_real_const_1.\n\nFrom-SVN: r7117", "tree": {"sha": "a273434ae64fa55d37a885fa5684d0ad3ce98e9e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a273434ae64fa55d37a885fa5684d0ad3ce98e9e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/81fbaa4179fdff35a8f4a30505ce38ff38ece210", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/81fbaa4179fdff35a8f4a30505ce38ff38ece210", "html_url": "https://github.com/Rust-GCC/gccrs/commit/81fbaa4179fdff35a8f4a30505ce38ff38ece210", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/81fbaa4179fdff35a8f4a30505ce38ff38ece210/comments", "author": null, "committer": null, "parents": [{"sha": "e15679f8d629ec4c0817231e857a0ad773a35024", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e15679f8d629ec4c0817231e857a0ad773a35024", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e15679f8d629ec4c0817231e857a0ad773a35024"}], "stats": {"total": 50, "additions": 23, "deletions": 27}, "files": [{"sha": "eb3135762bbd5fb2bd1e4d377a4192010a83d82e", "filename": "gcc/integrate.c", "status": "modified", "additions": 23, "deletions": 27, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/81fbaa4179fdff35a8f4a30505ce38ff38ece210/gcc%2Fintegrate.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/81fbaa4179fdff35a8f4a30505ce38ff38ece210/gcc%2Fintegrate.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fintegrate.c?ref=81fbaa4179fdff35a8f4a30505ce38ff38ece210", "patch": "@@ -54,25 +54,24 @@ extern tree poplevel ();\n   (8 * (8 + list_length (DECL_ARGUMENTS (DECL))))\n #endif\n \f\n-/* Save any constant pool constants in an insn.  */\n-static void save_constants ();\n-\n-/* Note when parameter registers are the destination of a SET.  */\n-static void note_modified_parmregs ();\n-\n-/* Copy an rtx for save_for_inline_copying.  */\n-static rtx copy_for_inline ();\n-\n-/* Make copies of MEMs in DECL_RTLs.  */\n-static void copy_decl_rtls ();\n-\n-static tree copy_decl_tree ();\n-static tree copy_decl_list ();\n-\n-static void integrate_parm_decls ();\n-static void integrate_decl_tree ();\n-\n-static void subst_constants ();\n+static rtx initialize_for_inline PROTO((tree, int, int, int, int));\n+static void finish_inline\tPROTO((tree, rtx));\n+static void adjust_copied_decl_tree PROTO((tree));\n+static tree copy_decl_list\tPROTO((tree));\n+static tree copy_decl_tree\tPROTO((tree));\n+static void copy_decl_rtls\tPROTO((tree));\n+static void save_constants\tPROTO((rtx *));\n+static void note_modified_parmregs PROTO((rtx, rtx));\n+static rtx copy_for_inline\tPROTO((rtx));\n+static void integrate_parm_decls PROTO((tree, struct inline_remap *, rtvec));\n+static void integrate_decl_tree\tPROTO((tree, int, struct inline_remap *));\n+static void subst_constants\tPROTO((rtx *, rtx, struct inline_remap *));\n+static void restore_constants\tPROTO((rtx *));\n+static void set_block_origin_self PROTO((tree));\n+static void set_decl_origin_self PROTO((tree));\n+static void set_block_abstract_flags PROTO((tree, int));\n+\n+void set_decl_abstract_flags\tPROTO((tree, int));\n \f\n /* Zero if the current function (whose FUNCTION_DECL is FNDECL)\n    is safe and reasonable to integrate into other functions.\n@@ -909,7 +908,7 @@ copy_for_inline (orig)\n \t  REAL_VALUE_TYPE d;\n \n \t  REAL_VALUE_FROM_CONST_DOUBLE (d, x);\n-\t  return immed_real_const_1 (d, GET_MODE (x));\n+\t  return CONST_DOUBLE_FROM_REAL_VALUE (d, GET_MODE (x));\n \t}\n       else\n \treturn immed_double_const (CONST_DOUBLE_LOW (x), CONST_DOUBLE_HIGH (x),\n@@ -2179,7 +2178,7 @@ copy_rtx_and_substitute (orig, map)\n \t  REAL_VALUE_TYPE d;\n \n \t  REAL_VALUE_FROM_CONST_DOUBLE (d, orig);\n-\t  return immed_real_const_1 (d, GET_MODE (orig));\n+\t  return CONST_DOUBLE_FROM_REAL_VALUE (d, GET_MODE (orig));\n \t}\n       else\n \treturn immed_double_const (CONST_DOUBLE_LOW (orig),\n@@ -2664,7 +2663,8 @@ subst_constants (loc, insn, map)\n #ifdef FLOAT_STORE_FLAG_VALUE\n \tif (new != 0 && GET_MODE_CLASS (GET_MODE (x)) == MODE_FLOAT)\n \t  new = ((new == const0_rtx) ? CONST0_RTX (GET_MODE (x))\n-\t\t : immed_real_const_1 (FLOAT_STORE_FLAG_VALUE, GET_MODE (x)));\n+\t\t : CONST_DOUBLE_FROM_REAL_VALUE (FLOAT_STORE_FLAG_VALUE,\n+\t\t\t\t\t\t GET_MODE (x)));\n #endif\n \tbreak;\n       }\n@@ -2747,7 +2747,7 @@ restore_constants (px)\n \t  REAL_VALUE_TYPE d;\n \n \t  REAL_VALUE_FROM_CONST_DOUBLE (d, x);\n-\t  *px = immed_real_const_1 (d, GET_MODE (x));\n+\t  *px = CONST_DOUBLE_FROM_REAL_VALUE (d, GET_MODE (x));\n \t}\n       else\n \t*px = immed_double_const (CONST_DOUBLE_LOW (x), CONST_DOUBLE_HIGH (x),\n@@ -2804,8 +2804,6 @@ restore_constants (px)\n    still NULL, set *their* DECL_ABSTRACT_ORIGIN or BLOCK_ABSTRACT_ORIGIN\n    values to point to themselves.  */\n \n-static void set_decl_origin_self ();\n-\n static void\n set_block_origin_self (stmt)\n      register tree stmt;\n@@ -2869,8 +2867,6 @@ set_decl_origin_self (decl)\n    the given block, and for all local decls and all local sub-blocks\n    (recursively) which are contained therein.  */\n \n-void set_decl_abstract_flags ();\n-\n static void\n set_block_abstract_flags (stmt, setting)\n      register tree stmt;"}]}