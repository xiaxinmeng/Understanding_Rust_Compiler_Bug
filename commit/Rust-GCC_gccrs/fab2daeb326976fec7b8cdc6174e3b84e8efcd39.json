{"sha": "fab2daeb326976fec7b8cdc6174e3b84e8efcd39", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmFiMmRhZWIzMjY5NzZmZWM3YjhjZGM2MTc0ZTNiODRlOGVmY2QzOQ==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2010-10-18T14:05:56Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2010-10-18T14:05:56Z"}, "message": "[multiple changes]\n\n2010-10-18  Bob Duff  <duff@adacore.com>\n\n\t* sinfo.ads, sinfo.adb: Modify comment about adding fields to be more\n\tcorrect, and to be in a more convenient order.\n\t(Default_Storage_Pool): New field of N_Compilation_Unit_Aux, for\n\trecording the Default_Storage_Pool for a parent library unit.\n\t* einfo.ads (Etype): Document the case in which Etype can be Empty.\n\t* sem_prag.adb (Pragma_Default_Storage_Pool): Analyze the new\n\tDefault_Storage_Pool pragma.\n\t* sem.ads (Save_Default_Storage_Pool): Save area for push/pop scopes.\n\t* gnat_ugn.texi: Document Default_Storage_Pool as a new configuration\n\tpragma.\n\t* freeze.adb (Freeze_Entity): When freezing an access type, take into\n\taccount any Default_Storage_Pool pragma that applies. We have to do\n\tthis at the freezing point, because up until that point, a Storage_Pool\n\tor Storage_Size clause could occur, which should override the\n\tDefault_Storage_Pool.\n\t* par-prag.adb: Add this pragma to the list of pragmas handled entirely\n\tduring semantics.\n\t* sem_ch8.adb (Push_Scope, Pop_Scope): Save and restore the\n\tDefault_Storage_Pool information.\n\t* opt.ads (Default_Pool, Default_Pool_Config): New globals for recording\n\tcurrently-applicable Default_Storage_Pool pragmas.\n\t* opt.adb: Save/restore the globals as appropriate.\n\t* snames.ads-tmpl (Name_Default_Storage_Pool,\n\tPragma_Default_Storage_Pool): New pragma name.\n\n2010-10-18  Vincent Celier  <celier@adacore.com>\n\n\t* make.adb (Switches_Of): Put the spec and body suffix in canonical\n\tcase.\n\nFrom-SVN: r165637", "tree": {"sha": "0de3ad636089796a5118aad62090338b5ab93931", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0de3ad636089796a5118aad62090338b5ab93931"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/fab2daeb326976fec7b8cdc6174e3b84e8efcd39", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fab2daeb326976fec7b8cdc6174e3b84e8efcd39", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fab2daeb326976fec7b8cdc6174e3b84e8efcd39", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fab2daeb326976fec7b8cdc6174e3b84e8efcd39/comments", "author": null, "committer": null, "parents": [{"sha": "6191e212520651b7e7d3102be7a735677989ad19", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6191e212520651b7e7d3102be7a735677989ad19", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6191e212520651b7e7d3102be7a735677989ad19"}], "stats": {"total": 280, "additions": 241, "deletions": 39}, "files": [{"sha": "2cec51cf450ec3b9a55ec2eeeb09f43587a8c9f7", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fab2daeb326976fec7b8cdc6174e3b84e8efcd39/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fab2daeb326976fec7b8cdc6174e3b84e8efcd39/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=fab2daeb326976fec7b8cdc6174e3b84e8efcd39", "patch": "@@ -1,3 +1,35 @@\n+2010-10-18  Bob Duff  <duff@adacore.com>\n+\n+\t* sinfo.ads, sinfo.adb: Modify comment about adding fields to be more\n+\tcorrect, and to be in a more convenient order.\n+\t(Default_Storage_Pool): New field of N_Compilation_Unit_Aux, for\n+\trecording the Default_Storage_Pool for a parent library unit.\n+\t* einfo.ads (Etype): Document the case in which Etype can be Empty.\n+\t* sem_prag.adb (Pragma_Default_Storage_Pool): Analyze the new\n+\tDefault_Storage_Pool pragma.\n+\t* sem.ads (Save_Default_Storage_Pool): Save area for push/pop scopes.\n+\t* gnat_ugn.texi: Document Default_Storage_Pool as a new configuration\n+\tpragma.\n+\t* freeze.adb (Freeze_Entity): When freezing an access type, take into\n+\taccount any Default_Storage_Pool pragma that applies. We have to do\n+\tthis at the freezing point, because up until that point, a Storage_Pool\n+\tor Storage_Size clause could occur, which should override the\n+\tDefault_Storage_Pool.\n+\t* par-prag.adb: Add this pragma to the list of pragmas handled entirely\n+\tduring semantics.\n+\t* sem_ch8.adb (Push_Scope, Pop_Scope): Save and restore the\n+\tDefault_Storage_Pool information.\n+\t* opt.ads (Default_Pool, Default_Pool_Config): New globals for recording\n+\tcurrently-applicable Default_Storage_Pool pragmas.\n+\t* opt.adb: Save/restore the globals as appropriate.\n+\t* snames.ads-tmpl (Name_Default_Storage_Pool,\n+\tPragma_Default_Storage_Pool): New pragma name.\n+\n+2010-10-18  Vincent Celier  <celier@adacore.com>\n+\n+\t* make.adb (Switches_Of): Put the spec and body suffix in canonical\n+\tcase.\n+\n 2010-10-18  Ed Schonberg  <schonberg@adacore.com>\n \n \t* sem_ch13.adb (Analyze_Aspect_Specifications): If subprogram is at the"}, {"sha": "2822ac217c160150af732780b7cae79a5a497fdc", "filename": "gcc/ada/einfo.ads", "status": "modified", "additions": 19, "deletions": 17, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fab2daeb326976fec7b8cdc6174e3b84e8efcd39/gcc%2Fada%2Feinfo.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fab2daeb326976fec7b8cdc6174e3b84e8efcd39/gcc%2Fada%2Feinfo.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Feinfo.ads?ref=fab2daeb326976fec7b8cdc6174e3b84e8efcd39", "patch": "@@ -770,13 +770,12 @@ package Einfo is\n --       subtypes. Contains the Digits value specified in the declaration.\n \n --    Direct_Primitive_Operations (Elist15)\n---       Present in tagged record types and subtypes, in tagged private types\n---       and in tagged incomplete types. Points to an element list of entities\n---       for primitive operations for the tagged type. Not present in untagged\n---       types (it is an error to reference the primitive operations field of a\n---       type that is not tagged). In order to fulfill the C++ ABI, entities of\n---       primitives that come from source must be stored in this list following\n---       their order of occurrence in the sources. For incomplete types the\n+--       Present in tagged types and subtypes (including synchronized types),\n+--       in tagged private types and in tagged incomplete types. Element list\n+--       of entities for primitive operations of the tagged type. Not present\n+--       in untagged types. In order to follow the C++ ABI, entities of\n+--       primitives that come from source must be stored in this list in the\n+--       order of their occurrence in the sources. For incomplete types the\n --       list is always empty.\n \n --    Directly_Designated_Type (Node20)\n@@ -1048,6 +1047,9 @@ package Einfo is\n --       a class wide type, points to the parent type. For a subprogram or\n --       subprogram type, Etype has the return type of a function or is set\n --       to Standard_Void_Type to represent a procedure.\n+--\n+--       Note one obscure case: for pragma Default_Storage_Pool (null), the\n+--       Etype of the N_Null node is Empty.\n \n --    Exception_Code (Uint22)\n --       Present in exception entitites. Set to zero unless either an\n@@ -1663,7 +1665,7 @@ package Einfo is\n --       of a private type declaration or its corresponding full declaration.\n --       This flag is thus preserved when the full and the partial views are\n --       exchanged, to indicate if a full type declaration is a completion.\n---       Used for semantic checks in E.4 (18), and elsewhere.\n+--       Used for semantic checks in E.4(18) and elsewhere.\n \n --    Has_Qualified_Name (Flag161)\n --       Present in all entities. Set True if the name in the Chars field\n@@ -3221,10 +3223,10 @@ package Einfo is\n \n --    Primitive_Operations (synthesized)\n --       Present in concurrent types, tagged record types and subtypes, tagged\n---       private types and tagged incomplete types. For concurrent types that\n---       have available their Corresponding_Record_Type (CRT) returns the list\n---       of Direct_Primitive_Operations of its CRT; otherwise returns No_Elist.\n---       For all the other types returns its Direct_Primitive_Operations.\n+--       private types and tagged incomplete types. For concurrent types whose\n+--       Corresponding_Record_Type (CRT) is available, returns the list of\n+--       Direct_Primitive_Operations of its CRT; otherwise returns No_Elist.\n+--       For all the other types returns the Direct_Primitive_Operations.\n \n --    Prival (Node17)\n --       Present in private components of protected types. Refers to the entity\n@@ -3817,11 +3819,11 @@ package Einfo is\n    type Entity_Kind is (\n \n       E_Void,\n-      --  The initial Ekind value for a newly created entity. Also used as\n-      --  the Ekind for Standard_Void_Type, a type entity in Standard used\n-      --  as a dummy type for the return type of a procedure (the reason we\n-      --  create this type is to share the circuits for performing overload\n-      --  resolution on calls).\n+      --  The initial Ekind value for a newly created entity. Also used as the\n+      --  Ekind for Standard_Void_Type, a type entity in Standard used as a\n+      --  dummy type for the return type of a procedure (the reason we create\n+      --  this type is to share the circuits for performing overload resolution\n+      --  on calls).\n \n       -------------\n       -- Objects --"}, {"sha": "5bbcab0134c6bc0a2dcf87443111ce48b06ca393", "filename": "gcc/ada/freeze.adb", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fab2daeb326976fec7b8cdc6174e3b84e8efcd39/gcc%2Fada%2Ffreeze.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fab2daeb326976fec7b8cdc6174e3b84e8efcd39/gcc%2Fada%2Ffreeze.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Ffreeze.adb?ref=fab2daeb326976fec7b8cdc6174e3b84e8efcd39", "patch": "@@ -3846,6 +3846,28 @@ package body Freeze is\n \n          elsif Is_Access_Type (E) then\n \n+            --  If a pragma Default_Storage_Pool applies, and this type has no\n+            --  Storage_Pool or Storage_Size clause (which must have occurred\n+            --  before the freezing point), then use the default. This applies\n+            --  only to base types.\n+\n+            if Present (Default_Pool)\n+              and then E = Base_Type (E)\n+              and then not Has_Storage_Size_Clause (E)\n+              and then No (Associated_Storage_Pool (E))\n+            then\n+               --  Case of pragma Default_Storage_Pool (null)\n+\n+               if Nkind (Default_Pool) = N_Null then\n+                  Set_No_Pool_Assigned (E);\n+\n+               --  Case of pragma Default_Storage_Pool (storage_pool_NAME)\n+\n+               else\n+                  Set_Associated_Storage_Pool (E, Entity (Default_Pool));\n+               end if;\n+            end if;\n+\n             --  Check restriction for standard storage pool\n \n             if No (Associated_Storage_Pool (E)) then"}, {"sha": "569eaefafa6de99876bbf9720cb5bfa2efc52c42", "filename": "gcc/ada/gnat_ugn.texi", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fab2daeb326976fec7b8cdc6174e3b84e8efcd39/gcc%2Fada%2Fgnat_ugn.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fab2daeb326976fec7b8cdc6174e3b84e8efcd39/gcc%2Fada%2Fgnat_ugn.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgnat_ugn.texi?ref=fab2daeb326976fec7b8cdc6174e3b84e8efcd39", "patch": "@@ -11541,6 +11541,7 @@ recognized by GNAT:\n    Convention_Identifier\n    Debug_Policy\n    Detect_Blocking\n+   Default_Storage_Pool\n    Discard_Names\n    Elaboration_Checks\n    Eliminate"}, {"sha": "13a2b98954005f645d83c3a37e0897158bf27571", "filename": "gcc/ada/make.adb", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fab2daeb326976fec7b8cdc6174e3b84e8efcd39/gcc%2Fada%2Fmake.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fab2daeb326976fec7b8cdc6174e3b84e8efcd39/gcc%2Fada%2Fmake.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fmake.adb?ref=fab2daeb326976fec7b8cdc6174e3b84e8efcd39", "patch": "@@ -8464,13 +8464,13 @@ package body Make is\n             Naming      : Lang_Naming_Data renames Lang.Config.Naming_Data;\n             Name        : String (1 .. Source_File_Name'Length + 3);\n             Last        : Positive := Source_File_Name'Length;\n-            Spec_Suffix : constant String :=\n-                            Get_Name_String (Naming.Spec_Suffix);\n-            Body_Suffix : constant String :=\n-                            Get_Name_String (Naming.Body_Suffix);\n-            Truncated   : Boolean := False;\n+            Spec_Suffix : String   := Get_Name_String (Naming.Spec_Suffix);\n+            Body_Suffix : String   := Get_Name_String (Naming.Body_Suffix);\n+            Truncated   : Boolean  := False;\n \n          begin\n+            Canonical_Case_File_Name (Spec_Suffix);\n+            Canonical_Case_File_Name (Body_Suffix);\n             Name (1 .. Last) := Source_File_Name;\n \n             if Last > Body_Suffix'Length"}, {"sha": "0fea77d744756a6d2c281b6e76d2f1833ba5dafd", "filename": "gcc/ada/opt.adb", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fab2daeb326976fec7b8cdc6174e3b84e8efcd39/gcc%2Fada%2Fopt.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fab2daeb326976fec7b8cdc6174e3b84e8efcd39/gcc%2Fada%2Fopt.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fopt.adb?ref=fab2daeb326976fec7b8cdc6174e3b84e8efcd39", "patch": "@@ -50,6 +50,7 @@ package body Opt is\n       Assume_No_Invalid_Values_Config       := Assume_No_Invalid_Values;\n       Check_Policy_List_Config              := Check_Policy_List;\n       Debug_Pragmas_Enabled_Config          := Debug_Pragmas_Enabled;\n+      Default_Pool_Config                   := Default_Pool;\n       Dynamic_Elaboration_Checks_Config     := Dynamic_Elaboration_Checks;\n       Exception_Locations_Suppressed_Config := Exception_Locations_Suppressed;\n       Extensions_Allowed_Config             := Extensions_Allowed;\n@@ -83,6 +84,7 @@ package body Opt is\n       Assume_No_Invalid_Values       := Save.Assume_No_Invalid_Values;\n       Check_Policy_List              := Save.Check_Policy_List;\n       Debug_Pragmas_Enabled          := Save.Debug_Pragmas_Enabled;\n+      Default_Pool                   := Save.Default_Pool;\n       Dynamic_Elaboration_Checks     := Save.Dynamic_Elaboration_Checks;\n       Exception_Locations_Suppressed := Save.Exception_Locations_Suppressed;\n       Extensions_Allowed             := Save.Extensions_Allowed;\n@@ -111,6 +113,7 @@ package body Opt is\n       Save.Assume_No_Invalid_Values       := Assume_No_Invalid_Values;\n       Save.Check_Policy_List              := Check_Policy_List;\n       Save.Debug_Pragmas_Enabled          := Debug_Pragmas_Enabled;\n+      Save.Default_Pool                   := Default_Pool;\n       Save.Dynamic_Elaboration_Checks     := Dynamic_Elaboration_Checks;\n       Save.Exception_Locations_Suppressed := Exception_Locations_Suppressed;\n       Save.Extensions_Allowed             := Extensions_Allowed;\n@@ -192,6 +195,7 @@ package body Opt is\n          Use_VADS_Size               := Use_VADS_Size_Config;\n       end if;\n \n+      Default_Pool                   := Default_Pool_Config;\n       Exception_Locations_Suppressed := Exception_Locations_Suppressed_Config;\n       Fast_Math                      := Fast_Math_Config;\n       Optimize_Alignment             := Optimize_Alignment_Config;\n@@ -227,6 +231,7 @@ package body Opt is\n       Tree_Read_Bool (Assertions_Enabled);\n       Tree_Read_Int  (Int (Check_Policy_List));\n       Tree_Read_Bool (Debug_Pragmas_Enabled);\n+      Tree_Read_Int  (Int (Default_Pool));\n       Tree_Read_Bool (Enable_Overflow_Checks);\n       Tree_Read_Bool (Full_List);\n \n@@ -292,6 +297,7 @@ package body Opt is\n       Tree_Write_Bool (Assertions_Enabled);\n       Tree_Write_Int  (Int (Check_Policy_List));\n       Tree_Write_Bool (Debug_Pragmas_Enabled);\n+      Tree_Write_Int  (Int (Default_Pool));\n       Tree_Write_Bool (Enable_Overflow_Checks);\n       Tree_Write_Bool (Full_List);\n       Tree_Write_Int  (Int (Version_String'Length));"}, {"sha": "11def2fbe2de2c8c7c173dc6763f0b1b0e6fa3de", "filename": "gcc/ada/opt.ads", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fab2daeb326976fec7b8cdc6174e3b84e8efcd39/gcc%2Fada%2Fopt.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fab2daeb326976fec7b8cdc6174e3b84e8efcd39/gcc%2Fada%2Fopt.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fopt.ads?ref=fab2daeb326976fec7b8cdc6174e3b84e8efcd39", "patch": "@@ -359,6 +359,16 @@ package Opt is\n    --  default was set by the binder, and that the default should be the\n    --  initial value of System.Secondary_Stack.Default_Secondary_Stack_Size.\n \n+   Default_Pool : Node_Id := Empty;\n+   --  GNAT\n+   --  Used to record the storage pool name (or null literal) that is the\n+   --  argument of an applicable pragma Default_Storage_Pool.\n+   --    Empty: No pragma Default_Storage_Pool applies.\n+   --    N_Null node: \"pragma Default_Storage_Pool (null);\" applies.\n+   --    otherwise: \"pragma Default_Storage_Pool (X);\" applies, and\n+   --    this points to the name X.\n+   --  Push_Scope and Pop_Scope in Sem_Ch8 save and restore this.\n+\n    Detect_Blocking : Boolean := False;\n    --  GNAT\n    --  Set True to force the run time to raise Program_Error if calls to\n@@ -1585,6 +1595,11 @@ package Opt is\n    --  mode, as possibly set by the command line switch -gnata and possibly\n    --  modified by the use of the configuration pragma Debug_Policy.\n \n+   Default_Pool_Config : Node_Id := Empty;\n+   --  GNAT\n+   --  Same as Default_Pool above, except this is only for Default_Storage_Pool\n+   --  pragmas that are configuration pragmas.\n+\n    Dynamic_Elaboration_Checks_Config : Boolean := False;\n    --  GNAT\n    --  Set True for dynamic elaboration checking mode, as set by the -gnatE\n@@ -1793,6 +1808,7 @@ private\n       Assume_No_Invalid_Values       : Boolean;\n       Check_Policy_List              : Node_Id;\n       Debug_Pragmas_Enabled          : Boolean;\n+      Default_Pool                   : Node_Id;\n       Dynamic_Elaboration_Checks     : Boolean;\n       Exception_Locations_Suppressed : Boolean;\n       Extensions_Allowed             : Boolean;"}, {"sha": "28e1710aa7921bd7f9b5cd320eeb54e3f78370cc", "filename": "gcc/ada/par-prag.adb", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fab2daeb326976fec7b8cdc6174e3b84e8efcd39/gcc%2Fada%2Fpar-prag.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fab2daeb326976fec7b8cdc6174e3b84e8efcd39/gcc%2Fada%2Fpar-prag.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fpar-prag.adb?ref=fab2daeb326976fec7b8cdc6174e3b84e8efcd39", "patch": "@@ -1129,6 +1129,7 @@ begin\n            Pragma_Convention                    |\n            Pragma_Debug_Policy                  |\n            Pragma_Detect_Blocking               |\n+           Pragma_Default_Storage_Pool          |\n            Pragma_Dimension                     |\n            Pragma_Discard_Names                 |\n            Pragma_Eliminate                     |"}, {"sha": "d84ed26f096a51d1616350afb135b19d99d20ac5", "filename": "gcc/ada/sem.ads", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fab2daeb326976fec7b8cdc6174e3b84e8efcd39/gcc%2Fada%2Fsem.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fab2daeb326976fec7b8cdc6174e3b84e8efcd39/gcc%2Fada%2Fsem.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem.ads?ref=fab2daeb326976fec7b8cdc6174e3b84e8efcd39", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 S p e c                                  --\n --                                                                          --\n---          Copyright (C) 1992-2009, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2010, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -462,6 +462,9 @@ package Sem is\n       Save_Check_Policy_List : Node_Id;\n       --  Save contents of Check_Policy_List on entry to restore on exit\n \n+      Save_Default_Storage_Pool : Node_Id;\n+      --  Save contents of Default_Storage_Pool on entry to restore on exit\n+\n       Is_Transient : Boolean;\n       --  Marks transient scopes (see Exp_Ch7 body for details)\n "}, {"sha": "cdd8bf69eb0527176d000feac3fb892e60db71b7", "filename": "gcc/ada/sem_ch8.adb", "status": "modified", "additions": 37, "deletions": 4, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fab2daeb326976fec7b8cdc6174e3b84e8efcd39/gcc%2Fada%2Fsem_ch8.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fab2daeb326976fec7b8cdc6174e3b84e8efcd39/gcc%2Fada%2Fsem_ch8.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch8.adb?ref=fab2daeb326976fec7b8cdc6174e3b84e8efcd39", "patch": "@@ -6636,18 +6636,36 @@ package body Sem_Ch8 is\n \n    procedure Pop_Scope is\n       SST : Scope_Stack_Entry renames Scope_Stack.Table (Scope_Stack.Last);\n+      S   : constant Entity_Id := SST.Entity;\n \n    begin\n       if Debug_Flag_E then\n          Write_Info;\n       end if;\n \n+      --  Set Default_Storage_Pool field of the library unit if necessary\n+\n+      if Ekind_In (S, E_Package, E_Generic_Package)\n+        and then\n+          Nkind (Parent (Unit_Declaration_Node (S))) = N_Compilation_Unit\n+      then\n+         declare\n+            Aux : constant Node_Id :=\n+              Aux_Decls_Node (Parent (Unit_Declaration_Node (S)));\n+         begin\n+            if No (Default_Storage_Pool (Aux)) then\n+               Set_Default_Storage_Pool (Aux, Default_Pool);\n+            end if;\n+         end;\n+      end if;\n+\n       Scope_Suppress           := SST.Save_Scope_Suppress;\n       Local_Suppress_Stack_Top := SST.Save_Local_Suppress_Stack_Top;\n       Check_Policy_List        := SST.Save_Check_Policy_List;\n+      Default_Pool             := SST.Save_Default_Storage_Pool;\n \n       if Debug_Flag_W then\n-         Write_Str (\"--> exiting scope: \");\n+         Write_Str (\"<-- exiting scope: \");\n          Write_Name (Chars (Current_Scope));\n          Write_Str (\", Depth=\");\n          Write_Int (Int (Scope_Stack.Last));\n@@ -6679,7 +6697,7 @@ package body Sem_Ch8 is\n    ---------------\n \n    procedure Push_Scope (S : Entity_Id) is\n-      E : Entity_Id;\n+      E : constant Entity_Id := Scope (S);\n \n    begin\n       if Ekind (S) = E_Void then\n@@ -6717,6 +6735,7 @@ package body Sem_Ch8 is\n          SST.Save_Scope_Suppress           := Scope_Suppress;\n          SST.Save_Local_Suppress_Stack_Top := Local_Suppress_Stack_Top;\n          SST.Save_Check_Policy_List        := Check_Policy_List;\n+         SST.Save_Default_Storage_Pool     := Default_Pool;\n \n          if Scope_Stack.Last > Scope_Stack.First then\n             SST.Component_Alignment_Default := Scope_Stack.Table\n@@ -6753,8 +6772,6 @@ package body Sem_Ch8 is\n         and then Scope (S) /= Standard_Standard\n         and then not Is_Child_Unit (S)\n       then\n-         E := Scope (S);\n-\n          if Nkind (E) not in N_Entity then\n             return;\n          end if;\n@@ -6776,6 +6793,22 @@ package body Sem_Ch8 is\n             Set_Categorization_From_Scope (E => S, Scop => E);\n          end if;\n       end if;\n+\n+      if Is_Child_Unit (S)\n+        and then Present (E)\n+        and then Ekind_In (E, E_Package, E_Generic_Package)\n+        and then\n+          Nkind (Parent (Unit_Declaration_Node (E))) = N_Compilation_Unit\n+      then\n+         declare\n+            Aux : constant Node_Id :=\n+              Aux_Decls_Node (Parent (Unit_Declaration_Node (E)));\n+         begin\n+            if Present (Default_Storage_Pool (Aux)) then\n+               Default_Pool := Default_Storage_Pool (Aux);\n+            end if;\n+         end;\n+      end if;\n    end Push_Scope;\n \n    ---------------------"}, {"sha": "ebf7021ec3f7911adef93716528ee500362364f1", "filename": "gcc/ada/sem_prag.adb", "status": "modified", "additions": 49, "deletions": 0, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fab2daeb326976fec7b8cdc6174e3b84e8efcd39/gcc%2Fada%2Fsem_prag.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fab2daeb326976fec7b8cdc6174e3b84e8efcd39/gcc%2Fada%2Fsem_prag.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_prag.adb?ref=fab2daeb326976fec7b8cdc6174e3b84e8efcd39", "patch": "@@ -7112,6 +7112,54 @@ package body Sem_Prag is\n             Check_Valid_Configuration_Pragma;\n             Detect_Blocking := True;\n \n+         --------------------------\n+         -- Default_Storage_Pool --\n+         --------------------------\n+\n+         --  pragma Default_Storage_Pool (storage_pool_NAME | null);\n+\n+         when Pragma_Default_Storage_Pool =>\n+            Ada_2012_Pragma;\n+            Check_Arg_Count (1);\n+\n+            --  Default_Storage_Pool can appear as a configuration pragma, or\n+            --  in a declarative part or a package spec.\n+\n+            if not Is_Configuration_Pragma then\n+               Check_Is_In_Decl_Part_Or_Package_Spec;\n+            end if;\n+\n+            --  Case of Default_Storage_Pool (null);\n+\n+            if Nkind (Expression (Arg1)) = N_Null then\n+               Analyze (Expression (Arg1));\n+               Set_Etype (Expression (Arg1), Empty);\n+               --  It's not really an expression, and we have no type for it\n+\n+            --  Case of Default_Storage_Pool (storage_pool_NAME);\n+\n+            else\n+               --  If it's a configuration pragma, then the only allowed\n+               --  argument is \"null\".\n+\n+               if Is_Configuration_Pragma then\n+                  Error_Pragma_Arg (\"NULL expected\", Arg1);\n+               end if;\n+\n+               --  The expected type for a non-\"null\" argument is\n+               --  Root_Storage_Pool'Class.\n+\n+               Analyze_And_Resolve\n+                 (Get_Pragma_Arg (Arg1),\n+                  Typ => Class_Wide_Type (RTE (RE_Root_Storage_Pool)));\n+            end if;\n+\n+            --  Finally, record the pool name (or null). Freeze.Freeze_Entity\n+            --  for an access type will use this information to set the\n+            --  appropriate attributes of the access type.\n+\n+            Default_Pool := Expression (Arg1);\n+\n          ---------------\n          -- Dimension --\n          ---------------\n@@ -13615,6 +13663,7 @@ package body Sem_Prag is\n       Pragma_Debug                         => -1,\n       Pragma_Debug_Policy                  =>  0,\n       Pragma_Detect_Blocking               => -1,\n+      Pragma_Default_Storage_Pool          => -1,\n       Pragma_Dimension                     => -1,\n       Pragma_Discard_Names                 =>  0,\n       Pragma_Elaborate                     => -1,"}, {"sha": "dfa77a9453ceb5839f2cd572875afceed4836686", "filename": "gcc/ada/sinfo.adb", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fab2daeb326976fec7b8cdc6174e3b84e8efcd39/gcc%2Fada%2Fsinfo.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fab2daeb326976fec7b8cdc6174e3b84e8efcd39/gcc%2Fada%2Fsinfo.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsinfo.adb?ref=fab2daeb326976fec7b8cdc6174e3b84e8efcd39", "patch": "@@ -707,6 +707,14 @@ package body Sinfo is\n       return Node5 (N);\n    end Default_Expression;\n \n+   function Default_Storage_Pool\n+      (N : Node_Id) return Node_Id is\n+   begin\n+      pragma Assert (False\n+        or else NT (N).Nkind = N_Compilation_Unit_Aux);\n+      return Node3 (N);\n+   end Default_Storage_Pool;\n+\n    function Default_Name\n       (N : Node_Id) return Node_Id is\n    begin\n@@ -3694,6 +3702,14 @@ package body Sinfo is\n       Set_Node5 (N, Val); -- semantic field, no parent set\n    end Set_Default_Expression;\n \n+   procedure Set_Default_Storage_Pool\n+      (N : Node_Id; Val : Node_Id) is\n+   begin\n+      pragma Assert (False\n+        or else NT (N).Nkind = N_Compilation_Unit_Aux);\n+      Set_Node3 (N, Val); -- semantic field, no parent set\n+   end Set_Default_Storage_Pool;\n+\n    procedure Set_Default_Name\n       (N : Node_Id; Val : Node_Id) is\n    begin"}, {"sha": "fa1d6dd8ee2f744035844305285678d2e3e9a5b9", "filename": "gcc/ada/sinfo.ads", "status": "modified", "additions": 31, "deletions": 12, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fab2daeb326976fec7b8cdc6174e3b84e8efcd39/gcc%2Fada%2Fsinfo.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fab2daeb326976fec7b8cdc6174e3b84e8efcd39/gcc%2Fada%2Fsinfo.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsinfo.ads?ref=fab2daeb326976fec7b8cdc6174e3b84e8efcd39", "patch": "@@ -59,15 +59,19 @@ package Sinfo is\n \n    --  If changes are made to this file, a number of related steps must be\n    --  carried out to ensure consistency. First, if a field access function is\n-   --  added, it appears in seven places:\n-\n-   --    The documentation associated with the node\n-   --    The spec of the access function in sinfo.ads\n-   --    The body of the access function in sinfo.adb\n-   --    The pragma Inline at the end of sinfo.ads for the access function\n-   --    The spec of the set procedure in sinfo.ads\n-   --    The body of the set procedure in sinfo.adb\n-   --    The pragma Inline at the end of sinfo.ads for the set procedure\n+   --  added, it appears in these places:\n+\n+   --    In sinfo.ads:\n+   --      The documentation associated with the field (if semantic)\n+   --      The documentation associated with the node\n+   --      The spec of the access function\n+   --      The spec of the set procedure\n+   --      The entries in Is_Syntactic_Field\n+   --      The pragma Inline for the access function\n+   --      The pragma Inline for the set procedure\n+   --    In sinfo.adb:\n+   --      The body of the access function\n+   --      The body of the set procedure\n \n    --  The field chosen must be consistent in all places, and, for a node that\n    --  is a subexpression, must not overlap any of the standard expression\n@@ -805,6 +809,12 @@ package Sinfo is\n    --    for the default expression). Default_Expression is used for\n    --    conformance checking.\n \n+   --  Default_Storage_Pool (Node3-Sem)\n+   --    This field is present in N_Compilation_Unit_Aux nodes. It is set to a\n+   --    copy of Opt.Default_Pool at the end of the compilation unit. See\n+   --    package Opt for details. This is used for inheriting the\n+   --    Default_Storage_Pool in child units.\n+\n    --  Discr_Check_Funcs_Built (Flag11-Sem)\n    --    This flag is present in N_Full_Type_Declaration nodes. It is set when\n    --    discriminant checking functions are constructed. The purpose is to\n@@ -5557,8 +5567,8 @@ package Sinfo is\n       --  the library item.\n \n       --  To deal with all these problems, we create an auxiliary node for\n-      --  a compilation unit, referenced from the N_Compilation_Unit node\n-      --  that contains these three items.\n+      --  a compilation unit, referenced from the N_Compilation_Unit node,\n+      --  that contains these items.\n \n       --  N_Compilation_Unit\n       --  Sloc points to first token of defining unit name\n@@ -5580,6 +5590,7 @@ package Sinfo is\n       --  Actions (List1) (set to No_List if no actions)\n       --  Pragmas_After (List5) pragmas after unit (set to No_List if none)\n       --  Config_Pragmas (List4) config pragmas (set to Empty_List if none)\n+      --  Default_Storage_Pool (Node3-Sem)\n \n       --------------------------\n       -- 10.1.1  Library Item --\n@@ -8095,6 +8106,9 @@ package Sinfo is\n    function Default_Expression\n      (N : Node_Id) return Node_Id;    -- Node5\n \n+   function Default_Storage_Pool\n+     (N : Node_Id) return Node_Id;    -- Node3\n+\n    function Default_Name\n      (N : Node_Id) return Node_Id;    -- Node2\n \n@@ -9049,6 +9063,9 @@ package Sinfo is\n    procedure Set_Default_Expression\n      (N : Node_Id; Val : Node_Id);            -- Node5\n \n+   procedure Set_Default_Storage_Pool\n+     (N : Node_Id; Val : Node_Id);            -- Node3\n+\n    procedure Set_Default_Name\n      (N : Node_Id; Val : Node_Id);            -- Node2\n \n@@ -10984,7 +11001,7 @@ package Sinfo is\n      N_Compilation_Unit_Aux =>\n        (1 => True,    --  Actions (List1)\n         2 => True,    --  Declarations (List2)\n-        3 => False,   --  unused\n+        3 => False,   --  Default_Storage_Pool (Node3)\n         4 => True,    --  Config_Pragmas (List4)\n         5 => True),   --  Pragmas_After (List5)\n \n@@ -11566,6 +11583,7 @@ package Sinfo is\n    pragma Inline (Debug_Statement);\n    pragma Inline (Declarations);\n    pragma Inline (Default_Expression);\n+   pragma Inline (Default_Storage_Pool);\n    pragma Inline (Default_Name);\n    pragma Inline (Defining_Identifier);\n    pragma Inline (Defining_Unit_Name);\n@@ -11881,6 +11899,7 @@ package Sinfo is\n    pragma Inline (Set_Debug_Statement);\n    pragma Inline (Set_Declarations);\n    pragma Inline (Set_Default_Expression);\n+   pragma Inline (Set_Default_Storage_Pool);\n    pragma Inline (Set_Default_Name);\n    pragma Inline (Set_Defining_Identifier);\n    pragma Inline (Set_Defining_Unit_Name);"}, {"sha": "b8ea32961f7f608e5c9277e4ba65a5c17a4a425f", "filename": "gcc/ada/snames.ads-tmpl", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fab2daeb326976fec7b8cdc6174e3b84e8efcd39/gcc%2Fada%2Fsnames.ads-tmpl", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fab2daeb326976fec7b8cdc6174e3b84e8efcd39/gcc%2Fada%2Fsnames.ads-tmpl", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsnames.ads-tmpl?ref=fab2daeb326976fec7b8cdc6174e3b84e8efcd39", "patch": "@@ -361,6 +361,7 @@ package Snames is\n    Name_Convention_Identifier          : constant Name_Id := N + $; -- GNAT\n    Name_Debug_Policy                   : constant Name_Id := N + $; -- GNAT\n    Name_Detect_Blocking                : constant Name_Id := N + $; -- Ada 05\n+   Name_Default_Storage_Pool           : constant Name_Id := N + $; -- Ada 12\n    Name_Discard_Names                  : constant Name_Id := N + $;\n    Name_Elaboration_Checks             : constant Name_Id := N + $; -- GNAT\n    Name_Eliminate                      : constant Name_Id := N + $; -- GNAT\n@@ -1463,6 +1464,7 @@ package Snames is\n       Pragma_Convention_Identifier,\n       Pragma_Debug_Policy,\n       Pragma_Detect_Blocking,\n+      Pragma_Default_Storage_Pool,\n       Pragma_Discard_Names,\n       Pragma_Elaboration_Checks,\n       Pragma_Eliminate,"}]}