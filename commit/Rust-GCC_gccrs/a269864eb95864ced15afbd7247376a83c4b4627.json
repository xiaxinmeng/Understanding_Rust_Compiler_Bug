{"sha": "a269864eb95864ced15afbd7247376a83c4b4627", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTI2OTg2NGViOTU4NjRjZWQxNWFmYmQ3MjQ3Mzc2YTgzYzRiNDYyNw==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1994-11-05T19:04:50Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1994-11-05T19:04:50Z"}, "message": "(subst_asm_stack_regs): Cast args to bcopy to char *.\n\n(BLOCK_NUM): Rework to avoid cast of abort to int *.\n(find_blocks): Don't use BLOCK_NUM on lhs.\n(reg_to_stack, record_arg_reg_life): Cast arg to bzero to char *.\n\nFrom-SVN: r8392", "tree": {"sha": "ff580639c099549abbd143738859492794c87102", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ff580639c099549abbd143738859492794c87102"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a269864eb95864ced15afbd7247376a83c4b4627", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a269864eb95864ced15afbd7247376a83c4b4627", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a269864eb95864ced15afbd7247376a83c4b4627", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a269864eb95864ced15afbd7247376a83c4b4627/comments", "author": null, "committer": null, "parents": [{"sha": "9b232232af2f7e1b71e21a843560d5cd605298cc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9b232232af2f7e1b71e21a843560d5cd605298cc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9b232232af2f7e1b71e21a843560d5cd605298cc"}], "stats": {"total": 17, "additions": 8, "deletions": 9}, "files": [{"sha": "df45dd4980afd15fd90cd1bf789628b7023ce31e", "filename": "gcc/reg-stack.c", "status": "modified", "additions": 8, "deletions": 9, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a269864eb95864ced15afbd7247376a83c4b4627/gcc%2Freg-stack.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a269864eb95864ced15afbd7247376a83c4b4627/gcc%2Freg-stack.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Freg-stack.c?ref=a269864eb95864ced15afbd7247376a83c4b4627", "patch": "@@ -225,9 +225,8 @@ static rtx FP_mode_reg[FIRST_PSEUDO_REGISTER][(int) MAX_MACHINE_MODE];\n    definition are validity of this information. */\n \n #define BLOCK_NUM(INSN)  \\\n-  (((INSN_UID (INSN) > max_uid)\t\\\n-    ? (int *)(abort() , 0)\t\t\\\n-    : block_number)[INSN_UID (INSN)])\n+  ((INSN_UID (INSN) > max_uid)\t\\\n+   ? (abort() , -1) : block_number[INSN_UID (INSN)])\n \n extern rtx forced_labels;\n extern rtx gen_jump ();\n@@ -368,8 +367,8 @@ reg_to_stack (first, file)\n \n   block_stack_in = (stack) alloca (blocks * sizeof (struct stack_def));\n   block_out_reg_set = (HARD_REG_SET *) alloca (blocks * sizeof (HARD_REG_SET));\n-  bzero (block_stack_in, blocks * sizeof (struct stack_def));\n-  bzero (block_out_reg_set, blocks * sizeof (HARD_REG_SET));\n+  bzero ((char *) block_stack_in, blocks * sizeof (struct stack_def));\n+  bzero ((char *) block_out_reg_set, blocks * sizeof (HARD_REG_SET));\n \n   block_number = (int *) alloca ((max_uid + 1) * sizeof (int));\n \n@@ -819,7 +818,7 @@ record_asm_reg_life (insn, regstack, operands, constraints,\n      Also enforce rule #5: Output operands must start at the top of\n      the reg-stack: output operands may not \"skip\" a reg. */\n \n-  bzero (reg_used_as_output, sizeof (reg_used_as_output));\n+  bzero ((char *) reg_used_as_output, sizeof (reg_used_as_output));\n   for (i = 0; i < n_outputs; i++)\n     if (STACK_REG_P (operands[i]))\n       if (reg_class_size[(int) operand_class[i]] != 1)\n@@ -852,7 +851,7 @@ record_asm_reg_life (insn, regstack, operands, constraints,\n      to the top of the reg-stack than any input that is not implicitly\n      popped. */\n \n-  bzero (implicitly_dies, sizeof (implicitly_dies));\n+  bzero ((char *) implicitly_dies, sizeof (implicitly_dies));\n   for (i = first_input; i < first_input + n_inputs; i++)\n     if (STACK_REG_P (operands[i]))\n       {\n@@ -1216,7 +1215,7 @@ find_blocks (first)\n \t\t\t\t\t  label_value_list);\n \t}\n \n-      BLOCK_NUM (insn) = block;\n+      block_number[INSN_UID (insn)] = block;\n \n       if (code != NOTE)\n \tprev_code = code;\n@@ -2342,7 +2341,7 @@ subst_asm_stack_regs (insn, regstack, operands, operands_loc, constraints,\n \t  }\n     }\n \n-  bcopy (regstack, &temp_stack, sizeof (temp_stack));\n+  bcopy ((char *) regstack, (char *) &temp_stack, sizeof (temp_stack));\n \n   /* Put the input regs into the desired place in TEMP_STACK.  */\n "}]}