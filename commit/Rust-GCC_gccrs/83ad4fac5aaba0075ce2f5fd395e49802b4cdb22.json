{"sha": "83ad4fac5aaba0075ce2f5fd395e49802b4cdb22", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODNhZDRmYWM1YWFiYTAwNzVjZTJmNWZkMzk1ZTQ5ODAyYjRjZGIyMg==", "commit": {"author": {"name": "Jeff Law", "email": "law@redhat.com", "date": "2016-11-21T18:19:12Z"}, "committer": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "2016-11-21T18:19:12Z"}, "message": "re PR target/25128 ([m68k] Suboptimal comparisons against 65536)\n\n\tPR target/25128\n\t* config/m68k/predicates.md (swap_peephole_relational_operator): New\n\tpredicate.\n\t* config/m68k/m68k.md (relational tests against 65535/65536): New\n\tpeephole2.\n\n\tPR target/25128\n\t* gcc.target/m68k/pr25128.c: New test.\n\nFrom-SVN: r242676", "tree": {"sha": "7a235a6bbe655c0e1d8bebe8db79fe91034fa581", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7a235a6bbe655c0e1d8bebe8db79fe91034fa581"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/83ad4fac5aaba0075ce2f5fd395e49802b4cdb22", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/83ad4fac5aaba0075ce2f5fd395e49802b4cdb22", "html_url": "https://github.com/Rust-GCC/gccrs/commit/83ad4fac5aaba0075ce2f5fd395e49802b4cdb22", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/83ad4fac5aaba0075ce2f5fd395e49802b4cdb22/comments", "author": null, "committer": null, "parents": [{"sha": "207a08cdd1b2566b1aecbe93c44fa1490af71842", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/207a08cdd1b2566b1aecbe93c44fa1490af71842", "html_url": "https://github.com/Rust-GCC/gccrs/commit/207a08cdd1b2566b1aecbe93c44fa1490af71842"}], "stats": {"total": 85, "additions": 84, "deletions": 1}, "files": [{"sha": "d546162cc64061abfa8a0ae3fdf5a36bf8182d67", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/83ad4fac5aaba0075ce2f5fd395e49802b4cdb22/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/83ad4fac5aaba0075ce2f5fd395e49802b4cdb22/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=83ad4fac5aaba0075ce2f5fd395e49802b4cdb22", "patch": "@@ -1,3 +1,11 @@\n+2016-11-20  Jeff Law  <law@redhat.com>\n+\n+\tPR target/25128\n+\t* config/m68k/predicates.md (swap_peephole_relational_operator): New\n+\tpredicate.\n+\t* config/m68k/m68k.md (relational tests against 65535/65536): New\n+\tpeephole2.\n+\n 2016-11-21  Kyrylo Tkachov  <kyrylo.tkachov@arm.com>\n \n \t* tree-ssa-loop-prefetch.c: Delete FIXME after the includes."}, {"sha": "c6130f123862c50059ce6cc631f6b1ef8c35eaae", "filename": "gcc/config/m68k/m68k.md", "status": "modified", "additions": 20, "deletions": 1, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/83ad4fac5aaba0075ce2f5fd395e49802b4cdb22/gcc%2Fconfig%2Fm68k%2Fm68k.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/83ad4fac5aaba0075ce2f5fd395e49802b4cdb22/gcc%2Fconfig%2Fm68k%2Fm68k.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68k%2Fm68k.md?ref=83ad4fac5aaba0075ce2f5fd395e49802b4cdb22", "patch": "@@ -7786,7 +7786,6 @@\n   operands[6] = GEN_INT (exact_log2 (INTVAL (operands[1]) + 1));\n   operands[7] = operands[2];\n }\")\n-\n (define_peephole2\n   [(set (cc0) (compare (match_operand:SI 0 \"register_operand\" \"\")\n \t\t       (match_operand:SI 1 \"pow2_m1_operand\" \"\")))\n@@ -7804,3 +7803,23 @@\n \t\t\t   (match_dup 2) (match_dup 3)))]\n   \"{ operands[4] = GEN_INT (exact_log2 (INTVAL (operands[1]) + 1)); }\")\n \n+;; When optimizing for size or for the original 68000 or 68010, we can\n+;; improve some relational tests against 65536 (which get canonicalized\n+;; internally against 65535).\n+;; The rotate in the output pattern will turn into a swap.\n+(define_peephole2\n+  [(set (cc0) (compare (match_operand:SI 0 \"register_operand\" \"\")\n+\t\t       (const_int 65535)))\n+   (set (pc) (if_then_else (match_operator 1 \"swap_peephole_relational_operator\"\n+\t\t\t     [(cc0) (const_int 0)])\n+\t\t\t   (match_operand 2 \"pc_or_label_operand\")\n+\t\t\t   (match_operand 3 \"pc_or_label_operand\")))]\n+  \"peep2_reg_dead_p (1, operands[0])\n+   && (operands[2] == pc_rtx || operands[3] == pc_rtx)\n+   && (optimize_size || TUNE_68000_10)\n+   && DATA_REG_P (operands[0])\"\n+  [(set (match_dup 0) (rotate:SI (match_dup 0) (const_int 16)))\n+   (set (cc0) (compare (subreg:HI (match_dup 0) 2) (const_int 0)))\n+   (set (pc) (if_then_else (match_op_dup 1 [(cc0) (const_int 0)])\n+\t\t\t   (match_dup 2) (match_dup 3)))]\n+  \"\")"}, {"sha": "be32ef60db38b4397f478d91a3183feea9f2545d", "filename": "gcc/config/m68k/predicates.md", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/83ad4fac5aaba0075ce2f5fd395e49802b4cdb22/gcc%2Fconfig%2Fm68k%2Fpredicates.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/83ad4fac5aaba0075ce2f5fd395e49802b4cdb22/gcc%2Fconfig%2Fm68k%2Fpredicates.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68k%2Fpredicates.md?ref=83ad4fac5aaba0075ce2f5fd395e49802b4cdb22", "patch": "@@ -279,3 +279,6 @@\n ;; Used to detect (pc) or (label_ref) in some jumping patterns to cut down\n (define_predicate \"pc_or_label_operand\"\n   (match_code \"pc,label_ref\"))\n+\n+(define_predicate \"swap_peephole_relational_operator\"\n+  (match_code \"gtu,leu,gt,le\"))"}, {"sha": "7dbfcaa8c30dd9248abf0bfcc2f5da07acff52bd", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/83ad4fac5aaba0075ce2f5fd395e49802b4cdb22/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/83ad4fac5aaba0075ce2f5fd395e49802b4cdb22/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=83ad4fac5aaba0075ce2f5fd395e49802b4cdb22", "patch": "@@ -1,3 +1,8 @@\n+2016-11-20  Jeff Law  <law@redhat.com>\n+\n+\tPR target/25128\n+\t* gcc.target/m68k/pr25128.c: New test.\n+\n 2016-11-21  Richard Sandiford  <richard.sandiford@arm.com>\n \n \t* gcc.dg/tree-ssa/tailcall-7.c: New test."}, {"sha": "f99f817d42699481111fb0935a783dbd34aeb967", "filename": "gcc/testsuite/gcc.target/m68k/pr25128.c", "status": "added", "additions": 48, "deletions": 0, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/83ad4fac5aaba0075ce2f5fd395e49802b4cdb22/gcc%2Ftestsuite%2Fgcc.target%2Fm68k%2Fpr25128.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/83ad4fac5aaba0075ce2f5fd395e49802b4cdb22/gcc%2Ftestsuite%2Fgcc.target%2Fm68k%2Fpr25128.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fm68k%2Fpr25128.c?ref=83ad4fac5aaba0075ce2f5fd395e49802b4cdb22", "patch": "@@ -0,0 +1,48 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-Os\" } */\n+\n+/* { dg-final { scan-assembler-times \"swap\" 4 } } */\n+/* { dg-final { scan-assembler-times \"tst.w\" 4 } } */\n+/* { dg-final { scan-assembler-not \"cmp.l\" } } */\n+\n+\n+unsigned int bar (void);\n+void\n+foo1 (void)\n+{\n+  unsigned int a = bar ();\n+  if (0x10000 <= a)\n+    bar ();\n+}\n+\n+\n+void\n+foo2 (void)\n+{\n+  unsigned int a = bar ();\n+  if (0x10000 > a)\n+    bar ();\n+}\n+\n+\n+void\n+foo3 (void)\n+{\n+  int a = bar ();\n+  if (0x10000 <= a)\n+    bar ();\n+}\n+\n+\n+void\n+foo4 (void)\n+{\n+  int a = bar ();\n+  if (0x10000 > a)\n+    bar ();\n+}\n+\n+\n+\n+\n+"}]}