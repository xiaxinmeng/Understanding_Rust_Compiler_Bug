{"sha": "e25fc78ff53a6e17c4c8ea4055a110f8b306c614", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTI1ZmM3OGZmNTNhNmUxN2M0YzhlYTQwNTVhMTEwZjhiMzA2YzYxNA==", "commit": {"author": {"name": "Fran\u00e7ois Dumont", "email": "fdumont@gcc.gnu.org", "date": "2011-09-06T22:13:46Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2011-09-06T22:13:46Z"}, "message": "hashtable_policy.h (_Prime_rehash_policy:: _M_next_bkt): Cast _M_max_load_factor to long double.\n\n2011-09-06  Fran\u00e7ois Dumont  <fdumont@gcc.gnu.org>\n\t    Paolo Carlini  <paolo.carlini@oracle.com>\n\n\t* include/bits/hashtable_policy.h (_Prime_rehash_policy::\n\t_M_next_bkt): Cast _M_max_load_factor to long double.\n\t(_Prime_rehash_policy::_M_bkt_for_elements): Use _M_next_bkt.\n\t(_Prime_rehash_policy::_M_need_rehash): Likewise; cast all\n\tfloat quantities to long double.\n\nCo-Authored-By: Paolo Carlini <paolo.carlini@oracle.com>\n\nFrom-SVN: r178615", "tree": {"sha": "5a88a4eaff2c769a213ee99af0749eb6125f1486", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5a88a4eaff2c769a213ee99af0749eb6125f1486"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e25fc78ff53a6e17c4c8ea4055a110f8b306c614", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e25fc78ff53a6e17c4c8ea4055a110f8b306c614", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e25fc78ff53a6e17c4c8ea4055a110f8b306c614", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e25fc78ff53a6e17c4c8ea4055a110f8b306c614/comments", "author": null, "committer": null, "parents": [{"sha": "a30d652725c1854366e0f8a2326e21050d4e6807", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a30d652725c1854366e0f8a2326e21050d4e6807", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a30d652725c1854366e0f8a2326e21050d4e6807"}], "stats": {"total": 44, "additions": 21, "deletions": 23}, "files": [{"sha": "6c85ef70e82ecabacf5b2776085937838d77a443", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e25fc78ff53a6e17c4c8ea4055a110f8b306c614/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e25fc78ff53a6e17c4c8ea4055a110f8b306c614/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=e25fc78ff53a6e17c4c8ea4055a110f8b306c614", "patch": "@@ -1,3 +1,12 @@\n+2011-09-06  Fran\u00e7ois Dumont  <fdumont@gcc.gnu.org>\n+\t    Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+\t* include/bits/hashtable_policy.h (_Prime_rehash_policy::\n+\t_M_next_bkt): Cast _M_max_load_factor to long double.\n+\t(_Prime_rehash_policy::_M_bkt_for_elements): Use _M_next_bkt.\n+\t(_Prime_rehash_policy::_M_need_rehash): Likewise; cast all\n+\tfloat quantities to long double.\n+\n 2011-09-06  Paolo Carlini  <paolo.carlini@oracle.com>\n \n \tPR libstdc++/50257"}, {"sha": "acb7e99a8dfb3ab1666c4d1759aef75806314107", "filename": "libstdc++-v3/include/bits/hashtable_policy.h", "status": "modified", "additions": 12, "deletions": 23, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e25fc78ff53a6e17c4c8ea4055a110f8b306c614/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fhashtable_policy.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e25fc78ff53a6e17c4c8ea4055a110f8b306c614/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fhashtable_policy.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fhashtable_policy.h?ref=e25fc78ff53a6e17c4c8ea4055a110f8b306c614", "patch": "@@ -429,15 +429,14 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   {\n     // Optimize lookups involving the first elements of __prime_list.\n     // (useful to speed-up, eg, constructors)\n-    static const unsigned char __fastbkt[12]\n+    static const unsigned char __fast_bkt[12]\n       = { 2, 2, 2, 3, 5, 5, 7, 7, 11, 11, 11, 11 };\n \n     const unsigned long __p\n-      = __n <= 11 ? __fastbkt[__n]\n+      = __n <= 11 ? __fast_bkt[__n]\n                   : *std::lower_bound(__prime_list + 5,\n \t\t\t\t      __prime_list + _S_n_primes, __n);\n-    _M_next_resize =\n-      static_cast<std::size_t>(__builtin_floor(__p * _M_max_load_factor));\n+    _M_next_resize = __builtin_floor(__p * (long double)_M_max_load_factor);\n     return __p;\n   }\n \n@@ -446,14 +445,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   inline std::size_t\n   _Prime_rehash_policy::\n   _M_bkt_for_elements(std::size_t __n) const\n-  {\n-    const float __min_bkts = __n / _M_max_load_factor;\n-    const unsigned long __p = *std::lower_bound(__prime_list, __prime_list\n-\t\t\t\t\t\t+ _S_n_primes, __min_bkts);\n-    _M_next_resize =\n-      static_cast<std::size_t>(__builtin_floor(__p * _M_max_load_factor));\n-    return __p;\n-  }\n+  { return _M_next_bkt(__builtin_ceil(__n / (long double)_M_max_load_factor)); }\n \n   // Finds the smallest prime p such that alpha p > __n_elt + __n_ins.\n   // If p > __n_bkt, return make_pair(true, p); otherwise return\n@@ -471,22 +463,19 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   {\n     if (__n_elt + __n_ins > _M_next_resize)\n       {\n-\tfloat __min_bkts = ((float(__n_ins) + float(__n_elt))\n-\t\t\t    / _M_max_load_factor);\n+\tlong double __min_bkts = ((__n_elt + __n_ins)\n+\t\t\t\t  / (long double)_M_max_load_factor);\n \tif (__min_bkts > __n_bkt)\n \t  {\n-\t    __min_bkts = std::max(__min_bkts, _M_growth_factor * __n_bkt);\n-\t    const unsigned long __p =\n-\t      *std::lower_bound(__prime_list, __prime_list + _S_n_primes,\n-\t\t\t\t__min_bkts);\n-\t    _M_next_resize = static_cast<std::size_t>\n-\t      (__builtin_floor(__p * _M_max_load_factor));\n-\t    return std::make_pair(true, __p);\n+\t    __min_bkts = std::max(__min_bkts, (long double)_M_growth_factor\n+\t\t\t\t  * __n_bkt);\n+\t    return std::make_pair(true,\n+\t\t\t\t  _M_next_bkt(__builtin_ceil(__min_bkts)));\n \t  }\n \telse\n \t  {\n-\t    _M_next_resize = static_cast<std::size_t>\n-\t      (__builtin_floor(__n_bkt * _M_max_load_factor));\n+\t    _M_next_resize\n+\t      = __builtin_floor(__n_bkt * (long double)_M_max_load_factor);\n \t    return std::make_pair(false, 0);\n \t  }\n       }"}]}