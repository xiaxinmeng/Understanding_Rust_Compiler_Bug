{"sha": "cd531a2eddbe17c94a99af2b62c05fe417b97a94", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Y2Q1MzFhMmVkZGJlMTdjOTRhOTlhZjJiNjJjMDVmZTQxN2I5N2E5NA==", "commit": {"author": {"name": "Kaveh R. Ghazi", "email": "ghazi@caip.rutgers.edu", "date": "1999-07-30T18:31:34Z"}, "committer": {"name": "Kaveh Ghazi", "email": "ghazi@gcc.gnu.org", "date": "1999-07-30T18:31:34Z"}, "message": "Warning fixes:\n\n        * expr.c (build_java_soft_divmod): Provide a default case in switch.\n        (java_lang_expand_expr): Mark parameters `target', `tmode' and\n        `modifier' with ATTRIBUTE_UNUSED.\n\n        * gjavah.c (process_file): Add braces around ambiguous `else'.\n\n        * jcf-dump.c (print_access_flags, localvar_free): Change return\n        type to void.\n\n        * parse.y (java_complete_expand_method): Initialize variable\n        `exception_copy'.\n        (resolve_qualified_expression_name): Likewise for `field_decl'.\n        (patch_method_invocation): Likewise for `class_to_search'.\n        (qualify_ambiguous_name): Likewise for `name' and `ptr_type'.\n        (patch_assignment): Likewise for `lhs_type'.\n\n        * verify.c (verify_jvm_instructions): Remove unused variable\n        `caller'.\n\nFrom-SVN: r28344", "tree": {"sha": "c33f7ed979269396307f864e8147d16d6e3382c4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c33f7ed979269396307f864e8147d16d6e3382c4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/cd531a2eddbe17c94a99af2b62c05fe417b97a94", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cd531a2eddbe17c94a99af2b62c05fe417b97a94", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cd531a2eddbe17c94a99af2b62c05fe417b97a94", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cd531a2eddbe17c94a99af2b62c05fe417b97a94/comments", "author": null, "committer": null, "parents": [{"sha": "93b69d0f0d4b3a3a4b6481c50720aa351f77e5e5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/93b69d0f0d4b3a3a4b6481c50720aa351f77e5e5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/93b69d0f0d4b3a3a4b6481c50720aa351f77e5e5"}], "stats": {"total": 78, "additions": 53, "deletions": 25}, "files": [{"sha": "f1de535b2a702d8cd5533d13218e2cd2a6afc9d0", "filename": "gcc/java/ChangeLog", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cd531a2eddbe17c94a99af2b62c05fe417b97a94/gcc%2Fjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cd531a2eddbe17c94a99af2b62c05fe417b97a94/gcc%2Fjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2FChangeLog?ref=cd531a2eddbe17c94a99af2b62c05fe417b97a94", "patch": "@@ -1,3 +1,24 @@\n+1999-07-30  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n+\n+\t* expr.c (build_java_soft_divmod): Provide a default case in switch.\n+\t(java_lang_expand_expr): Mark parameters `target', `tmode' and\n+\t`modifier' with ATTRIBUTE_UNUSED.\n+\n+\t* gjavah.c (process_file): Add braces around ambiguous `else'.\n+\n+\t* jcf-dump.c (print_access_flags, localvar_free): Change return\n+\ttype to void.\n+\n+\t* parse.y (java_complete_expand_method): Initialize variable\n+\t`exception_copy'.\n+\t(resolve_qualified_expression_name): Likewise for `field_decl'.\n+\t(patch_method_invocation): Likewise for `class_to_search'.\n+\t(qualify_ambiguous_name): Likewise for `name' and `ptr_type'.\n+\t(patch_assignment): Likewise for `lhs_type'.\n+\n+\t* verify.c (verify_jvm_instructions): Remove unused variable\n+\t`caller'.\n+\n 1999-07-25  Richard Henderson  <rth@cygnus.com>\n \n \t* decl.c (va_list_type_node): New."}, {"sha": "a825e981c3518c806ce27154a118eb6444319b18", "filename": "gcc/java/expr.c", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cd531a2eddbe17c94a99af2b62c05fe417b97a94/gcc%2Fjava%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cd531a2eddbe17c94a99af2b62c05fe417b97a94/gcc%2Fjava%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fexpr.c?ref=cd531a2eddbe17c94a99af2b62c05fe417b97a94", "patch": "@@ -1072,6 +1072,8 @@ build_java_soft_divmod (op, type, op1, op2)\n \tcase TRUNC_MOD_EXPR:\n \t  call = soft_irem_node;\n \t  break;\n+\tdefault:\n+\t  break;\n \t}\n     }\n   else if (type == long_type_node)\n@@ -1084,6 +1086,8 @@ build_java_soft_divmod (op, type, op1, op2)\n \tcase TRUNC_MOD_EXPR:\n \t  call = soft_lrem_node;\n \t  break;\n+\tdefault:\n+\t  break;\n \t}\n     }\n \n@@ -1873,9 +1877,9 @@ case_identity (t, v)\n struct rtx_def *\n java_lang_expand_expr (exp, target, tmode, modifier)\n      register tree exp;\n-     rtx target;\n-     enum machine_mode tmode;\n-     enum expand_modifier modifier;\n+     rtx target ATTRIBUTE_UNUSED;\n+     enum machine_mode tmode ATTRIBUTE_UNUSED;\n+     enum expand_modifier modifier ATTRIBUTE_UNUSED;\n {\n   tree current;\n "}, {"sha": "b680a87f48501b79d357310a142a66b34ec38161", "filename": "gcc/java/gjavah.c", "status": "modified", "additions": 9, "deletions": 7, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cd531a2eddbe17c94a99af2b62c05fe417b97a94/gcc%2Fjava%2Fgjavah.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cd531a2eddbe17c94a99af2b62c05fe417b97a94/gcc%2Fjava%2Fgjavah.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fgjavah.c?ref=cd531a2eddbe17c94a99af2b62c05fe417b97a94", "patch": "@@ -1308,18 +1308,20 @@ DEFUN(process_file, (jcf, out),\n   jcf_parse_class (jcf);\n \n   if (written_class_count++ == 0 && out)\n-    if (! stubs)\n-      fputs (\"// DO NOT EDIT THIS FILE - it is machine generated -*- c++ -*-\\n\\n\",\n-\t     out);\n-    else\n-      {\n-\tfputs (\"// This file was created by `gcjh -stubs'.  It is -*- c++ -*-.\n+    {\n+      if (! stubs)\n+\tfputs (\"// DO NOT EDIT THIS FILE - it is machine generated -*- c++ -*-\\n\\n\",\n+\t       out);\n+      else\n+\t{\n+\t  fputs (\"// This file was created by `gcjh -stubs'.  It is -*- c++ -*-.\n //\n // This file is intended to give you a head start on implementing native \n // methods using CNI.  \n // Be aware: running `gcjh -stubs' once more for this class may overwrite any \n // edits you have made to this file.\\n\\n\", out);\n-      }\n+\t}\n+    }\n \n   if (out)\n     {"}, {"sha": "a26a6fbbfca3ccef22eca9210ea61ba68bef166c", "filename": "gcc/java/jcf-dump.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cd531a2eddbe17c94a99af2b62c05fe417b97a94/gcc%2Fjava%2Fjcf-dump.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cd531a2eddbe17c94a99af2b62c05fe417b97a94/gcc%2Fjava%2Fjcf-dump.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fjcf-dump.c?ref=cd531a2eddbe17c94a99af2b62c05fe417b97a94", "patch": "@@ -78,7 +78,7 @@ int class_access_flags = 0;\n /* Print in format similar to javap.  VERY IMCOMPLETE. */\n int flag_javap_compatible = 0;\n \n-static int print_access_flags PROTO ((FILE *, uint16, char));\n+static void print_access_flags PROTO ((FILE *, uint16, char));\n static void print_constant_terse PROTO ((FILE*, JCF*, int, int));\n static void print_constant PROTO ((FILE *, JCF *, int, int));\n static void print_constant_ref PROTO ((FILE *, JCF *, int));\n@@ -311,7 +311,7 @@ DEFUN(print_constant_ref, (stream, jcf, index),\n    The CONTEXT is one of 'c' (class flags), 'f' (field flags),\n    or 'm' (method flags). */\n \n-static int\n+static void\n DEFUN (print_access_flags, (stream, flags, context),\n        FILE *stream AND uint16 flags AND char context)\n {"}, {"sha": "0cbbfac90437cd6539f4c31717f8ec3aa20e72f0", "filename": "gcc/java/jcf-write.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cd531a2eddbe17c94a99af2b62c05fe417b97a94/gcc%2Fjava%2Fjcf-write.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cd531a2eddbe17c94a99af2b62c05fe417b97a94/gcc%2Fjava%2Fjcf-write.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fjcf-write.c?ref=cd531a2eddbe17c94a99af2b62c05fe417b97a94", "patch": "@@ -286,7 +286,7 @@ static void define_jcf_label PROTO ((struct jcf_block *,\n static struct jcf_block * get_jcf_label_here PROTO ((struct jcf_partial *));\n static void put_linenumber PROTO ((int, struct jcf_partial *));\n static void localvar_alloc PROTO ((tree, struct jcf_partial *));\n-static int localvar_free PROTO ((tree, struct jcf_partial *));\n+static void localvar_free PROTO ((tree, struct jcf_partial *));\n static int get_access_flags PROTO ((tree));\n static void write_chunks PROTO ((FILE *, struct chunk *));\n static int adjust_typed_op PROTO ((tree, int));\n@@ -567,7 +567,7 @@ localvar_alloc (decl, state)\n     }\n }\n \n-static int\n+static void\n localvar_free (decl, state)\n      tree decl;     \n      struct jcf_partial *state;"}, {"sha": "8876285f80226fc127b4883fa2224acea2bac833", "filename": "gcc/java/parse.c", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cd531a2eddbe17c94a99af2b62c05fe417b97a94/gcc%2Fjava%2Fparse.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cd531a2eddbe17c94a99af2b62c05fe417b97a94/gcc%2Fjava%2Fparse.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fparse.c?ref=cd531a2eddbe17c94a99af2b62c05fe417b97a94", "patch": "@@ -8503,7 +8503,7 @@ java_complete_expand_method (mdecl)\n     {\n       tree fbody = DECL_FUNCTION_BODY (mdecl);\n       tree block_body = BLOCK_EXPR_BODY (fbody);\n-      tree exception_copy;\n+      tree exception_copy = NULL_TREE;\n       expand_start_java_method (mdecl);\n       build_result_decl (mdecl);\n \n@@ -9215,7 +9215,7 @@ resolve_qualified_expression_name (wfl, found_decl, where_found, type_found)\n       /* We resolve and expression name */\n       else \n \t{\n-\t  tree field_decl;\n+\t  tree field_decl = NULL_TREE;\n \n \t  /* If there exists an early resolution, use it. That occurs\n \t     only once and we know that there are more things to\n@@ -9628,7 +9628,7 @@ patch_method_invocation (patch, primary, where, is_static, ret_decl)\n      constructors */\n   else\n     {\n-      tree class_to_search;\n+      tree class_to_search = NULL_TREE;\n       int lc;\t\t/* Looking for Constructor */\n       \n       /* We search constructor in their target class */\n@@ -10207,7 +10207,8 @@ static void\n qualify_ambiguous_name (id)\n      tree id;\n {\n-  tree qual, qual_wfl, name, decl, ptr_type, saved_current_class;\n+  tree qual, qual_wfl, name = NULL_TREE, decl, ptr_type = NULL_TREE,\n+    saved_current_class;\n   int again, super_found = 0, this_found = 0, new_array_found = 0;\n   int code;\n \n@@ -11429,7 +11430,7 @@ patch_assignment (node, wfl_op1, wfl_op2)\n {\n   tree rhs = TREE_OPERAND (node, 1);\n   tree lvalue = TREE_OPERAND (node, 0), llvalue;\n-  tree lhs_type, rhs_type, new_rhs = NULL_TREE;\n+  tree lhs_type = NULL_TREE, rhs_type, new_rhs = NULL_TREE;\n   int error_found = 0;\n   int lvalue_from_array = 0;\n "}, {"sha": "13a35fa32ecdb9c2e390fbc9b4a7631438b75704", "filename": "gcc/java/parse.y", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cd531a2eddbe17c94a99af2b62c05fe417b97a94/gcc%2Fjava%2Fparse.y", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cd531a2eddbe17c94a99af2b62c05fe417b97a94/gcc%2Fjava%2Fparse.y", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fparse.y?ref=cd531a2eddbe17c94a99af2b62c05fe417b97a94", "patch": "@@ -5918,7 +5918,7 @@ java_complete_expand_method (mdecl)\n     {\n       tree fbody = DECL_FUNCTION_BODY (mdecl);\n       tree block_body = BLOCK_EXPR_BODY (fbody);\n-      tree exception_copy;\n+      tree exception_copy = NULL_TREE;\n       expand_start_java_method (mdecl);\n       build_result_decl (mdecl);\n \n@@ -6630,7 +6630,7 @@ resolve_qualified_expression_name (wfl, found_decl, where_found, type_found)\n       /* We resolve and expression name */\n       else \n \t{\n-\t  tree field_decl;\n+\t  tree field_decl = NULL_TREE;\n \n \t  /* If there exists an early resolution, use it. That occurs\n \t     only once and we know that there are more things to\n@@ -7043,7 +7043,7 @@ patch_method_invocation (patch, primary, where, is_static, ret_decl)\n      constructors */\n   else\n     {\n-      tree class_to_search;\n+      tree class_to_search = NULL_TREE;\n       int lc;\t\t/* Looking for Constructor */\n       \n       /* We search constructor in their target class */\n@@ -7622,7 +7622,8 @@ static void\n qualify_ambiguous_name (id)\n      tree id;\n {\n-  tree qual, qual_wfl, name, decl, ptr_type, saved_current_class;\n+  tree qual, qual_wfl, name = NULL_TREE, decl, ptr_type = NULL_TREE,\n+    saved_current_class;\n   int again, super_found = 0, this_found = 0, new_array_found = 0;\n   int code;\n \n@@ -8844,7 +8845,7 @@ patch_assignment (node, wfl_op1, wfl_op2)\n {\n   tree rhs = TREE_OPERAND (node, 1);\n   tree lvalue = TREE_OPERAND (node, 0), llvalue;\n-  tree lhs_type, rhs_type, new_rhs = NULL_TREE;\n+  tree lhs_type = NULL_TREE, rhs_type, new_rhs = NULL_TREE;\n   int error_found = 0;\n   int lvalue_from_array = 0;\n "}, {"sha": "9e11d761c9065af0c333ceaff92dba18a1ede8d5", "filename": "gcc/java/verify.c", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cd531a2eddbe17c94a99af2b62c05fe417b97a94/gcc%2Fjava%2Fverify.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cd531a2eddbe17c94a99af2b62c05fe417b97a94/gcc%2Fjava%2Fverify.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fverify.c?ref=cd531a2eddbe17c94a99af2b62c05fe417b97a94", "patch": "@@ -1213,7 +1213,6 @@ verify_jvm_instructions (jcf, byte_ops, length)\n \t  else\n \t    {\n \t      tree ret_map = LABEL_RETURN_TYPE_STATE (current_subr);\n-\t      tree caller = LABEL_SUBR_CONTEXT (current_subr);\n \t      int size = DECL_MAX_LOCALS(current_function_decl)+stack_pointer;\n \t      index = wide ? IMMEDIATE_u2 : IMMEDIATE_u1;\n \t      wide = 0;"}]}