{"sha": "2d1d245fcb4ebf209ac75b443b6e813eef9793d6", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MmQxZDI0NWZjYjRlYmYyMDlhYzc1YjQ0M2I2ZTgxM2VlZjk3OTNkNg==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1995-07-29T13:05:40Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1995-07-29T13:05:40Z"}, "message": "(notice_update_cc): INCM and DECM set condition codes.\n\n(unsigned_comparison_operator, next_cc_user_is_unsigned): New fcns.\n\nFrom-SVN: r10191", "tree": {"sha": "055a86b765f3770c2c5b34979391fc80c29bc33b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/055a86b765f3770c2c5b34979391fc80c29bc33b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2d1d245fcb4ebf209ac75b443b6e813eef9793d6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2d1d245fcb4ebf209ac75b443b6e813eef9793d6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2d1d245fcb4ebf209ac75b443b6e813eef9793d6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2d1d245fcb4ebf209ac75b443b6e813eef9793d6/comments", "author": null, "committer": null, "parents": [{"sha": "2a99503aff3f051265aa80e69a2682e725e79d80", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2a99503aff3f051265aa80e69a2682e725e79d80", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2a99503aff3f051265aa80e69a2682e725e79d80"}], "stats": {"total": 73, "additions": 47, "deletions": 26}, "files": [{"sha": "5871f900281978734c942fac715f7b71fb1390a4", "filename": "gcc/config/1750a/1750a.c", "status": "modified", "additions": 47, "deletions": 26, "changes": 73, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2d1d245fcb4ebf209ac75b443b6e813eef9793d6/gcc%2Fconfig%2F1750a%2F1750a.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2d1d245fcb4ebf209ac75b443b6e813eef9793d6/gcc%2Fconfig%2F1750a%2F1750a.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2F1750a%2F1750a.c?ref=2d1d245fcb4ebf209ac75b443b6e813eef9793d6", "patch": "@@ -1,6 +1,6 @@\n /* Subroutines for insn-output.c for MIL-STD-1750.\n    Copyright (C) 1994, 1995 Free Software Foundation, Inc.\n-   Contributed by O.M.Kellogg, DASA (okellogg@salyko.cube.net).\n+   Contributed by O.M.Kellogg, DASA (kellogg@space.otn.dasa.de)\n \n This file is part of GNU CC.\n \n@@ -52,49 +52,36 @@ notice_update_cc (exp)\n       /* Jumps do not alter the cc's.  */\n       if (SET_DEST (exp) == pc_rtx)\n \treturn;\n-      /* Moving register into memory doesn't alter the cc's.\n-\t It may invalidate the RTX's which we remember the cc's came from.  */\n-      if (GET_CODE (SET_DEST (exp)) == MEM)\n-\t{\n-\t  if (cc_status.value1 && GET_CODE (cc_status.value1) == MEM)\n-\t    cc_status.value1 = 0;\n-\t  if (cc_status.value2 && GET_CODE (cc_status.value2) == MEM)\n-\t    cc_status.value2 = 0;\n-\t  return;\n-\t}\n+      /* Moving a register or constant into memory doesn't alter the cc's. */\n+      if (GET_CODE (SET_DEST (exp)) == MEM\n+\t  && (src_code == REG || src_code == CONST_INT))\n+\treturn;\n       /* Function calls clobber the cc's.  */\n-      else if (src_code == CALL)\n+      if (src_code == CALL)\n \t{\n \t  CC_STATUS_INIT;\n \t  return;\n \t}\n       /* Emulated longword bit-ops leave cc's incorrect */\n-      else if (GET_MODE (SET_DEST (exp)) == HImode ?\n+      if (GET_MODE (SET_DEST (exp)) == HImode ?\n \t       src_code == AND || src_code == IOR ||\n \t       src_code == XOR || src_code == NOT : 0)\n \t{\n \t  CC_STATUS_INIT;\n \t  return;\n \t}\n       /* Tests and compares set the cc's in predictable ways.  */\n-      else if (SET_DEST (exp) == cc0_rtx)\n+      if (SET_DEST (exp) == cc0_rtx)\n \t{\n \t  CC_STATUS_INIT;\n \t  cc_status.value1 = SET_SRC (exp);\n \t  return;\n \t}\n-      /* Anything that lands in a reg will set cc_status. */\n-      else if (REG_P (SET_DEST (exp)))\n-\t{\n-\t  cc_status.flags = CC_NO_OVERFLOW;\n-\t  cc_status.value1 = SET_SRC (exp);\n-\t  cc_status.value2 = SET_DEST (exp);\n-\t  return;\n-\t}\n-      else\n-\t{\n-\t  CC_STATUS_INIT;\n-\t}\n+      /* Anything else will set cc_status. */\n+      cc_status.flags = CC_NO_OVERFLOW;\n+      cc_status.value1 = SET_SRC (exp);\n+      cc_status.value2 = SET_DEST (exp);\n+      return;\n     }\n   else if (GET_CODE (exp) == PARALLEL\n \t   && GET_CODE (XVECEXP (exp, 0, 0)) == SET)\n@@ -343,6 +330,40 @@ branch_or_jump (condition, targetlabel_number)\n }\n \n \n+int\n+unsigned_comparison_operator (insn)\n+     rtx insn;\n+{\n+  switch (GET_CODE (insn))\n+    {\n+    case GEU:\n+    case GTU:\n+    case LEU:\n+    case LTU:\n+      return 1;\n+    default:\n+      return 0;\n+    }\n+}\n+\n+int\n+next_cc_user_is_unsigned (insn)\n+     rtx insn;\n+{\n+  if ( !(insn = next_cc0_user (insn)))\n+    abort ();\n+  else if (GET_CODE (insn) == JUMP_INSN\n+\t   && GET_CODE (PATTERN (insn)) == SET\n+\t   && GET_CODE (SET_SRC (PATTERN (insn))) == IF_THEN_ELSE)\n+    return unsigned_comparison_operator (XEXP (SET_SRC (PATTERN (insn)), 0));\n+  else if (GET_CODE (insn) == INSN\n+\t   && GET_CODE (PATTERN (insn)) == SET)\n+    return unsigned_comparison_operator (SET_SRC (PATTERN (insn)));\n+  else\n+    abort ();\n+}\n+\n+\n \n /* The PRINT_OPERAND and PRINT_OPERAND_ADDRESS macros have been\n    made functions: */"}]}