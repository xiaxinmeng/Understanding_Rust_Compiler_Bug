{"sha": "5ee96c9da4b521cd593ef2db444bb0337802c184", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWVlOTZjOWRhNGI1MjFjZDU5M2VmMmRiNDQ0YmIwMzM3ODAyYzE4NA==", "commit": {"author": {"name": "Thomas Quinot", "email": "quinot@adacore.com", "date": "2013-01-04T09:19:49Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2013-01-04T09:19:49Z"}, "message": "sem_elab.adb, [...]: Minor reformatting.\n\n2013-01-04  Thomas Quinot  <quinot@adacore.com>\n\n\t* sem_elab.adb, sem_ch3.adb: Minor reformatting.\n\nFrom-SVN: r194891", "tree": {"sha": "2feeeeda645324891a9b4dc74ad3deb3e1ae9063", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2feeeeda645324891a9b4dc74ad3deb3e1ae9063"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5ee96c9da4b521cd593ef2db444bb0337802c184", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5ee96c9da4b521cd593ef2db444bb0337802c184", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5ee96c9da4b521cd593ef2db444bb0337802c184", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5ee96c9da4b521cd593ef2db444bb0337802c184/comments", "author": null, "committer": null, "parents": [{"sha": "7a1f177500d156346723ebb47043b517a7d1a26a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7a1f177500d156346723ebb47043b517a7d1a26a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7a1f177500d156346723ebb47043b517a7d1a26a"}], "stats": {"total": 51, "additions": 21, "deletions": 30}, "files": [{"sha": "d907d884569a572e1585fdadbb125bc763ec8a5c", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5ee96c9da4b521cd593ef2db444bb0337802c184/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5ee96c9da4b521cd593ef2db444bb0337802c184/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=5ee96c9da4b521cd593ef2db444bb0337802c184", "patch": "@@ -1,3 +1,7 @@\n+2013-01-04  Thomas Quinot  <quinot@adacore.com>\n+\n+\t* sem_elab.adb, sem_ch3.adb: Minor reformatting.\n+\n 2013-01-04  Robert Dewar  <dewar@adacore.com>\n \n \t* table.adb: Minor reformatting."}, {"sha": "f61990e8356cc65d68b0f14713b68b723ecd6abb", "filename": "gcc/ada/sem_ch3.adb", "status": "modified", "additions": 16, "deletions": 29, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5ee96c9da4b521cd593ef2db444bb0337802c184/gcc%2Fada%2Fsem_ch3.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5ee96c9da4b521cd593ef2db444bb0337802c184/gcc%2Fada%2Fsem_ch3.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch3.adb?ref=5ee96c9da4b521cd593ef2db444bb0337802c184", "patch": "@@ -1142,7 +1142,7 @@ package body Sem_Ch3 is\n                      else\n                         Error_Msg_NE\n                          (\"illegal use of incomplete type&\",\n-                            Result_Definition (T_Def), Typ);\n+                          Result_Definition (T_Def), Typ);\n                      end if;\n \n                   elsif Ekind (Current_Scope) = E_Package\n@@ -1406,8 +1406,7 @@ package body Sem_Ch3 is\n          Offset : Entity_Id;\n \n       begin\n-         pragma Assert (Is_Tagged_Type (Iface)\n-           and then Is_Interface (Iface));\n+         pragma Assert (Is_Tagged_Type (Iface) and then Is_Interface (Iface));\n \n          --  This is a reasonable place to propagate predicates\n \n@@ -1455,9 +1454,7 @@ package body Sem_Ch3 is\n          --  For this purpose we add a supplementary component just after the\n          --  field that contains the tag associated with each secondary DT.\n \n-         if Typ /= Etype (Typ)\n-           and then Has_Discriminants (Etype (Typ))\n-         then\n+         if Typ /= Etype (Typ) and then Has_Discriminants (Etype (Typ)) then\n             Def :=\n               Make_Component_Definition (Loc,\n                 Subtype_Indication =>\n@@ -1789,18 +1786,14 @@ package body Sem_Ch3 is\n          --  so is the current type\n \n          elsif Is_Limited_Record (R)\n-           and then\n-             (not Is_Interface (R)\n-               or else not Is_Limited_Interface (R))\n+           and then (not Is_Interface (R) or else not Is_Limited_Interface (R))\n          then\n             return True;\n \n          --  Else the type may have a limited interface progenitor, but a\n          --  limited record parent.\n \n-         elsif R /= P\n-           and then Is_Limited_Record (P)\n-         then\n+         elsif R /= P and then Is_Limited_Record (P) then\n             return True;\n \n          else\n@@ -1969,9 +1962,7 @@ package body Sem_Ch3 is\n       --  Ada 2005 (AI-231): Propagate the null-excluding attribute and carry\n       --  out some static checks.\n \n-      if Ada_Version >= Ada_2005\n-        and then Can_Never_Be_Null (T)\n-      then\n+      if Ada_Version >= Ada_2005 and then Can_Never_Be_Null (T) then\n          Null_Exclusion_Static_Checks (N);\n       end if;\n \n@@ -2239,8 +2230,8 @@ package body Sem_Ch3 is\n       Is_Remote : constant Boolean :=\n                     (Is_Remote_Types (Current_Scope)\n                        or else Is_Remote_Call_Interface (Current_Scope))\n-                    and then not (In_Private_Part (Current_Scope)\n-                                    or else In_Package_Body (Current_Scope));\n+                      and then not (In_Private_Part (Current_Scope)\n+                                     or else In_Package_Body (Current_Scope));\n \n       procedure Check_Ops_From_Incomplete_Type;\n       --  If there is a tagged incomplete partial view of the type, traverse\n@@ -2646,8 +2637,8 @@ package body Sem_Ch3 is\n \n       if VM_Target = No_VM\n         and then (Is_Task_Interface (T)\n-                    or else Is_Protected_Interface (T)\n-                    or else Is_Synchronized_Interface (T))\n+                   or else Is_Protected_Interface (T)\n+                   or else Is_Synchronized_Interface (T))\n         and then not RTE_Available (RE_Select_Specific_Data)\n       then\n          Error_Msg_CRT (\"synchronized interfaces\", T);\n@@ -2721,8 +2712,7 @@ package body Sem_Ch3 is\n \n          Get_First_Interp (E, Index, It);\n          while Present (It.Typ) loop\n-            if (Is_Integer_Type (It.Typ)\n-                 or else Is_Real_Type (It.Typ))\n+            if (Is_Integer_Type (It.Typ) or else Is_Real_Type (It.Typ))\n               and then (Scope (Base_Type (It.Typ))) = Standard_Standard\n             then\n                if T = Any_Type then\n@@ -2963,9 +2953,9 @@ package body Sem_Ch3 is\n \n          if Nkind (Object_Definition (N)) = N_Access_Definition\n            and then Present\n-             (Access_To_Subprogram_Definition (Object_Definition (N)))\n+                      (Access_To_Subprogram_Definition (Object_Definition (N)))\n            and then Protected_Present\n-             (Access_To_Subprogram_Definition (Object_Definition (N)))\n+                      (Access_To_Subprogram_Definition (Object_Definition (N)))\n          then\n             T := Replace_Anonymous_Access_To_Protected_Subprogram (N);\n          end if;\n@@ -3012,9 +3002,8 @@ package body Sem_Ch3 is\n       --  A deferred constant can appear in a package body if its completion\n       --  is by means of an interface pragma.\n \n-      if Constant_Present (N)\n-        and then No (E)\n-      then\n+      if Constant_Present (N) and then No (E) then\n+\n          --  A deferred constant may appear in the declarative part of the\n          --  following constructs:\n \n@@ -3084,9 +3073,7 @@ package body Sem_Ch3 is\n          --  AI05-0303: the AI is in fact a binding interpretation, and thus\n          --  applies to the '95 version of the language as well.\n \n-         if Has_Interrupt_Handler (T)\n-           and then Ada_Version < Ada_95\n-         then\n+         if Has_Interrupt_Handler (T) and then Ada_Version < Ada_95 then\n             Error_Msg_N\n               (\"interrupt object can only be declared at library level\", Id);\n          end if;"}, {"sha": "06c994a1b430e7698bfcd3dd5205e480aba3271c", "filename": "gcc/ada/sem_elab.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5ee96c9da4b521cd593ef2db444bb0337802c184/gcc%2Fada%2Fsem_elab.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5ee96c9da4b521cd593ef2db444bb0337802c184/gcc%2Fada%2Fsem_elab.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_elab.adb?ref=5ee96c9da4b521cd593ef2db444bb0337802c184", "patch": "@@ -2543,7 +2543,7 @@ package body Sem_Elab is\n       Elab_Unit  : Entity_Id;\n \n       --  Check whether this is a call to an Initialize subprogram for a\n-      --  controlled type. Note that Call can also be a 'access attribute\n+      --  controlled type. Note that Call can also be a 'Access attribute\n       --  reference, which now generates an elaboration check.\n \n       Init_Call  : constant Boolean :="}]}