{"sha": "796ead19f85372e59217c9888db688a2fe11b54f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Nzk2ZWFkMTlmODUzNzJlNTkyMTdjOTg4OGRiNjg4YTJmZTExYjU0Zg==", "commit": {"author": {"name": "Marek Polacek", "email": "polacek@redhat.com", "date": "2021-01-13T16:09:14Z"}, "committer": {"name": "Marek Polacek", "email": "polacek@redhat.com", "date": "2021-01-13T22:16:30Z"}, "message": "c++: Failure to lookup using-decl name [PR98231]\n\nIn r11-4690 we removed the call to finish_nonmember_using_decl in\ntsubst_expr/DECL_EXPR in the USING_DECL block.  This was done not\nto perform name lookup twice for a non-dependent using-decl, which\nsounds sensible.\n\nHowever, finish_nonmember_using_decl also pushes the decl's bindings\nwhich we still have to do so that we can find the USING_DECL's name\nlater.  In this case, we've got a USING_DECL N::operator<<  that we are\ntsubstituting.  We already looked it up while parsing the template\n\"foo\", and lookup_using_decl stashed the OVERLOAD it found into\nUSING_DECL_DECLS.  Now we just have to update the IDENTIFIER_BINDING of\nthe identifier for operator<< with the overload the name is bound to.\n\nI didn't want to export push_local_binding so I've introduced a new\nwrapper.\n\ngcc/cp/ChangeLog:\n\n\tPR c++/98231\n\t* name-lookup.c (push_using_decl_bindings): New.\n\t* name-lookup.h (push_using_decl_bindings): Declare.\n\t* pt.c (tsubst_expr): Call push_using_decl_bindings.\n\ngcc/testsuite/ChangeLog:\n\n\tPR c++/98231\n\t* g++.dg/lookup/using63.C: New test.", "tree": {"sha": "827da19dae4cc952febf76f97a568e2b8ef5219f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/827da19dae4cc952febf76f97a568e2b8ef5219f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/796ead19f85372e59217c9888db688a2fe11b54f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/796ead19f85372e59217c9888db688a2fe11b54f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/796ead19f85372e59217c9888db688a2fe11b54f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/796ead19f85372e59217c9888db688a2fe11b54f/comments", "author": {"login": "mpolacek", "id": 10496300, "node_id": "MDQ6VXNlcjEwNDk2MzAw", "avatar_url": "https://avatars.githubusercontent.com/u/10496300?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mpolacek", "html_url": "https://github.com/mpolacek", "followers_url": "https://api.github.com/users/mpolacek/followers", "following_url": "https://api.github.com/users/mpolacek/following{/other_user}", "gists_url": "https://api.github.com/users/mpolacek/gists{/gist_id}", "starred_url": "https://api.github.com/users/mpolacek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mpolacek/subscriptions", "organizations_url": "https://api.github.com/users/mpolacek/orgs", "repos_url": "https://api.github.com/users/mpolacek/repos", "events_url": "https://api.github.com/users/mpolacek/events{/privacy}", "received_events_url": "https://api.github.com/users/mpolacek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "mpolacek", "id": 10496300, "node_id": "MDQ6VXNlcjEwNDk2MzAw", "avatar_url": "https://avatars.githubusercontent.com/u/10496300?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mpolacek", "html_url": "https://github.com/mpolacek", "followers_url": "https://api.github.com/users/mpolacek/followers", "following_url": "https://api.github.com/users/mpolacek/following{/other_user}", "gists_url": "https://api.github.com/users/mpolacek/gists{/gist_id}", "starred_url": "https://api.github.com/users/mpolacek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mpolacek/subscriptions", "organizations_url": "https://api.github.com/users/mpolacek/orgs", "repos_url": "https://api.github.com/users/mpolacek/repos", "events_url": "https://api.github.com/users/mpolacek/events{/privacy}", "received_events_url": "https://api.github.com/users/mpolacek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8fc183ccd0628465205b8a88c29ab69bfe74a08a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8fc183ccd0628465205b8a88c29ab69bfe74a08a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8fc183ccd0628465205b8a88c29ab69bfe74a08a"}], "stats": {"total": 31, "additions": 31, "deletions": 0}, "files": [{"sha": "b4b6c0b81b50124e9888980b893b5bf80e20ee48", "filename": "gcc/cp/name-lookup.c", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/796ead19f85372e59217c9888db688a2fe11b54f/gcc%2Fcp%2Fname-lookup.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/796ead19f85372e59217c9888db688a2fe11b54f/gcc%2Fcp%2Fname-lookup.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fname-lookup.c?ref=796ead19f85372e59217c9888db688a2fe11b54f", "patch": "@@ -9279,4 +9279,14 @@ push_operator_bindings ()\n \t}\n }\n \n+/* Wrapper around push_local_binding to push the bindings for\n+   a non-member USING_DECL DECL that was found during template parsing.  */\n+\n+void\n+push_using_decl_bindings (tree decl)\n+{\n+  push_local_binding (DECL_NAME (decl), USING_DECL_DECLS (decl),\n+\t\t      /*using*/true);\n+}\n+\n #include \"gt-cp-name-lookup.h\""}, {"sha": "bac3fa71fc90b43b9a4795f5f447b1c0ab83e01d", "filename": "gcc/cp/name-lookup.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/796ead19f85372e59217c9888db688a2fe11b54f/gcc%2Fcp%2Fname-lookup.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/796ead19f85372e59217c9888db688a2fe11b54f/gcc%2Fcp%2Fname-lookup.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fname-lookup.h?ref=796ead19f85372e59217c9888db688a2fe11b54f", "patch": "@@ -478,6 +478,7 @@ extern void push_to_top_level (void);\n extern void pop_from_top_level (void);\n extern void maybe_save_operator_binding (tree);\n extern void push_operator_bindings (void);\n+extern void push_using_decl_bindings (tree);\n extern void discard_operator_bindings (tree);\n \n /* Lower level interface for modules. */"}, {"sha": "c27ef6d9fe03099d5b91fa19e12ae13220d62bf2", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/796ead19f85372e59217c9888db688a2fe11b54f/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/796ead19f85372e59217c9888db688a2fe11b54f/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=796ead19f85372e59217c9888db688a2fe11b54f", "patch": "@@ -18133,6 +18133,9 @@ tsubst_expr (tree t, tree args, tsubst_flags_t complain, tree in_decl,\n \t    tree scope = USING_DECL_SCOPE (decl);\n \t    gcc_checking_assert (scope\n \t\t\t\t == tsubst (scope, args, complain, in_decl));\n+\t    /* We still need to push the bindings so that we can look up\n+\t       this name later.  */\n+\t    push_using_decl_bindings (decl);\n \t  }\n \telse if (is_capture_proxy (decl)\n \t\t && !DECL_TEMPLATE_INSTANTIATION (current_function_decl))"}, {"sha": "fd4bf26f1adb0194808289ea9533e890024f4bde", "filename": "gcc/testsuite/g++.dg/lookup/using63.C", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/796ead19f85372e59217c9888db688a2fe11b54f/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flookup%2Fusing63.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/796ead19f85372e59217c9888db688a2fe11b54f/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flookup%2Fusing63.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flookup%2Fusing63.C?ref=796ead19f85372e59217c9888db688a2fe11b54f", "patch": "@@ -0,0 +1,17 @@\n+// PR c++/98231\n+// { dg-do compile }\n+\n+template <typename, typename = int> struct basic_ostream {};\n+namespace N {\n+  template <typename Char, typename CharTraits, typename T>\n+  void operator<<(basic_ostream<Char, CharTraits>, T);\n+}\n+basic_ostream<char> os;\n+\n+template<typename T> void\n+foo (T value)\n+{\n+  using N::operator<<;\n+  os << value;\n+}\n+void bar() { foo (1); }"}]}