{"sha": "40ecf2f5d19ba2b046c65168aa8acc80ad399a08", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDBlY2YyZjVkMTliYTJiMDQ2YzY1MTY4YWE4YWNjODBhZDM5OWEwOA==", "commit": {"author": {"name": "Emmanuel Briot", "email": "briot@adacore.com", "date": "2011-08-03T10:19:32Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2011-08-03T10:19:32Z"}, "message": "gnatcmd.adb, [...] (Shared_Project_Tree_Data): new type An aggregate project and its aggregated trees need to share the common...\n\n2011-08-03  Emmanuel Briot  <briot@adacore.com>\n\n\t* gnatcmd.adb, prj-proc.adb, prj-proc.ads, make.adb, mlib-prj.adb,\n\tprj.adb, prj.ads, makeutl.adb, makeutl.ads, clean.adb, prj-nmsc.adb,\n\tprj-util.adb, prj-util.ads, prj-conf.adb, prj-conf.ads, prj-env.adb,\n\tprj-env.ads (Shared_Project_Tree_Data): new type\n\tAn aggregate project and its aggregated trees need to share the common\n\tdata structures used for lists of strings, packages,... This makes the\n\tcode simpler since otherwise we have to pass the root tree (also used\n\tfor the configuration file data) in addition to the current project\n\ttree. This also avoids ambiguities as to which tree should be used.\n\tAnd finally this saves a bit of memory.\n\t(For_Every_Project_Imported): new parameter Tree.\n\tSince aggregated projects are using a different tree, we need to let\n\tthe caller know which tree to use to manipulate the returned project.\n\nFrom-SVN: r177261", "tree": {"sha": "b0a3d19077a30eaebc12a8b662cc50d870dcdb04", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b0a3d19077a30eaebc12a8b662cc50d870dcdb04"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/40ecf2f5d19ba2b046c65168aa8acc80ad399a08", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/40ecf2f5d19ba2b046c65168aa8acc80ad399a08", "html_url": "https://github.com/Rust-GCC/gccrs/commit/40ecf2f5d19ba2b046c65168aa8acc80ad399a08", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/40ecf2f5d19ba2b046c65168aa8acc80ad399a08/comments", "author": {"login": "briot", "id": 42402, "node_id": "MDQ6VXNlcjQyNDAy", "avatar_url": "https://avatars.githubusercontent.com/u/42402?v=4", "gravatar_id": "", "url": "https://api.github.com/users/briot", "html_url": "https://github.com/briot", "followers_url": "https://api.github.com/users/briot/followers", "following_url": "https://api.github.com/users/briot/following{/other_user}", "gists_url": "https://api.github.com/users/briot/gists{/gist_id}", "starred_url": "https://api.github.com/users/briot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/briot/subscriptions", "organizations_url": "https://api.github.com/users/briot/orgs", "repos_url": "https://api.github.com/users/briot/repos", "events_url": "https://api.github.com/users/briot/events{/privacy}", "received_events_url": "https://api.github.com/users/briot/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "9fde638da6523b717ec7aca4f11ce8bf4f44dde7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9fde638da6523b717ec7aca4f11ce8bf4f44dde7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9fde638da6523b717ec7aca4f11ce8bf4f44dde7"}], "stats": {"total": 1816, "additions": 1009, "deletions": 807}, "files": [{"sha": "5fa9661a90334d6add9091e9fc76dbc3e4faabf6", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/40ecf2f5d19ba2b046c65168aa8acc80ad399a08/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/40ecf2f5d19ba2b046c65168aa8acc80ad399a08/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=40ecf2f5d19ba2b046c65168aa8acc80ad399a08", "patch": "@@ -1,3 +1,19 @@\n+2011-08-03  Emmanuel Briot  <briot@adacore.com>\n+\n+\t* gnatcmd.adb, prj-proc.adb, prj-proc.ads, make.adb, mlib-prj.adb,\n+\tprj.adb, prj.ads, makeutl.adb, makeutl.ads, clean.adb, prj-nmsc.adb,\n+\tprj-util.adb, prj-util.ads, prj-conf.adb, prj-conf.ads, prj-env.adb,\n+\tprj-env.ads (Shared_Project_Tree_Data): new type\n+\tAn aggregate project and its aggregated trees need to share the common\n+\tdata structures used for lists of strings, packages,... This makes the\n+\tcode simpler since otherwise we have to pass the root tree (also used\n+\tfor the configuration file data) in addition to the current project\n+\ttree. This also avoids ambiguities as to which tree should be used.\n+\tAnd finally this saves a bit of memory.\n+\t(For_Every_Project_Imported): new parameter Tree.\n+\tSince aggregated projects are using a different tree, we need to let\n+\tthe caller know which tree to use to manipulate the returned project.\n+\n 2011-08-03  Robert Dewar  <dewar@adacore.com>\n \n \t* prj-proc.adb, exp_util.ads, exp_ch9.adb, make.adb, prj-ext.adb,"}, {"sha": "82f70816c9eff114a4b7ba6673018eea5bc9b35f", "filename": "gcc/ada/clean.adb", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/40ecf2f5d19ba2b046c65168aa8acc80ad399a08/gcc%2Fada%2Fclean.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/40ecf2f5d19ba2b046c65168aa8acc80ad399a08/gcc%2Fada%2Fclean.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fclean.adb?ref=40ecf2f5d19ba2b046c65168aa8acc80ad399a08", "patch": "@@ -1170,7 +1170,7 @@ package body Clean is\n                   Executable :=\n                     Executable_Of\n                       (Main_Project,\n-                       Project_Tree,\n+                       Project_Tree.Shared,\n                        Main_Source_File,\n                        Current_File_Index);\n \n@@ -1425,7 +1425,7 @@ package body Clean is\n          --  Add source directories and object directories to the search paths\n \n          Add_Source_Directories (Main_Project, Project_Tree);\n-         Add_Object_Directories (Main_Project);\n+         Add_Object_Directories (Main_Project, Project_Tree);\n       end if;\n \n       Osint.Add_Default_Search_Dirs;\n@@ -1440,7 +1440,7 @@ package body Clean is\n             Value : String_List_Id := Main_Project.Mains;\n          begin\n             while Value /= Prj.Nil_String loop\n-               Main := Project_Tree.String_Elements.Table (Value);\n+               Main := Project_Tree.Shared.String_Elements.Table (Value);\n                Osint.Add_File\n                  (File_Name => Get_Name_String (Main.Value),\n                   Index     => Main.Index);"}, {"sha": "623b188ed815eed7abaee224133ce14278570ebb", "filename": "gcc/ada/gnatcmd.adb", "status": "modified", "additions": 31, "deletions": 28, "changes": 59, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/40ecf2f5d19ba2b046c65168aa8acc80ad399a08/gcc%2Fada%2Fgnatcmd.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/40ecf2f5d19ba2b046c65168aa8acc80ad399a08/gcc%2Fada%2Fgnatcmd.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgnatcmd.adb?ref=40ecf2f5d19ba2b046c65168aa8acc80ad399a08", "patch": "@@ -255,6 +255,7 @@ procedure GNATCmd is\n \n    procedure Set_Library_For\n      (Project           : Project_Id;\n+      Tree              : Project_Tree_Ref;\n       Libraries_Present : in out Boolean);\n    --  If Project is a library project, add the correct -L and -l switches to\n    --  the linker invocation.\n@@ -445,7 +446,7 @@ procedure GNATCmd is\n                               B_Start.all                            &\n                               MLib.Fil.Ext_To\n                                 (Get_Name_String\n-                                   (Project_Tree.String_Elements.Table\n+                                   (Project_Tree.Shared.String_Elements.Table\n                                       (Main).Value),\n                                  \"ci\"));\n \n@@ -463,13 +464,13 @@ procedure GNATCmd is\n                                  \"b__\"                                  &\n                                  MLib.Fil.Ext_To\n                                    (Get_Name_String\n-                                      (Project_Tree.String_Elements.Table\n-                                         (Main).Value),\n+                                      (Project_Tree.Shared\n+                                       .String_Elements.Table (Main).Value),\n                                     \"ci\"));\n                            end if;\n \n-                           Main :=\n-                             Project_Tree.String_Elements.Table (Main).Next;\n+                           Main := Project_Tree.Shared.String_Elements.Table\n+                             (Main).Next;\n                         end loop;\n \n                         if Proj.Project.Library then\n@@ -960,7 +961,7 @@ procedure GNATCmd is\n       --  Check if there are library project files\n \n       if MLib.Tgt.Support_For_Libraries /= None then\n-         Set_Libraries (Project, Libraries_Present);\n+         Set_Libraries (Project, Project_Tree, Libraries_Present);\n       end if;\n \n       --  If there are, add the necessary additional switches\n@@ -1236,8 +1237,10 @@ procedure GNATCmd is\n \n    procedure Set_Library_For\n      (Project           : Project_Id;\n+      Tree              : Project_Tree_Ref;\n       Libraries_Present : in out Boolean)\n    is\n+      pragma Unreferenced (Tree);\n       Path_Option : constant String_Access :=\n                       MLib.Linker_Library_Path_Option;\n \n@@ -1870,7 +1873,7 @@ begin\n                     Prj.Util.Value_Of\n                       (Name        => Tool_Package_Name,\n                        In_Packages => Project.Decl.Packages,\n-                       In_Tree     => Project_Tree);\n+                       Shared      => Project_Tree.Shared);\n \n             Element : Package_Element;\n \n@@ -1884,7 +1887,7 @@ begin\n \n          begin\n             if Pkg /= No_Package then\n-               Element := Project_Tree.Packages.Table (Pkg);\n+               Element := Project_Tree.Shared.Packages.Table (Pkg);\n \n                --  Packages Gnatls and Gnatstack have a single attribute\n                --  Switches, that is not an associative array.\n@@ -1894,7 +1897,7 @@ begin\n                     Prj.Util.Value_Of\n                     (Variable_Name => Snames.Name_Switches,\n                      In_Variables  => Element.Decl.Attributes,\n-                     In_Tree       => Project_Tree);\n+                     Shared        => Project_Tree.Shared);\n \n                --  Packages Binder (for gnatbind), Cross_Reference (for\n                --  gnatxref), Linker (for gnatlink), Finder (for gnatfind),\n@@ -1926,27 +1929,27 @@ begin\n                        Prj.Util.Value_Of\n                          (Name      => Name_Switches,\n                           In_Arrays => Element.Decl.Arrays,\n-                          In_Tree   => Project_Tree);\n+                          Shared    => Project_Tree.Shared);\n                      Name_Len := 0;\n                      Add_Str_To_Name_Buffer (Main.all);\n                      The_Switches := Prj.Util.Value_Of\n                        (Index     => Name_Find,\n                         Src_Index => 0,\n                         In_Array  => Switches_Array,\n-                        In_Tree   => Project_Tree);\n+                        Shared    => Project_Tree.Shared);\n                   end if;\n \n                   if The_Switches.Kind = Prj.Undefined then\n                      Switches_Array :=\n                        Prj.Util.Value_Of\n                          (Name      => Name_Default_Switches,\n                           In_Arrays => Element.Decl.Arrays,\n-                          In_Tree   => Project_Tree);\n+                          Shared    => Project_Tree.Shared);\n                      The_Switches := Prj.Util.Value_Of\n                        (Index     => Name_Ada,\n                         Src_Index => 0,\n                         In_Array  => Switches_Array,\n-                        In_Tree   => Project_Tree);\n+                        Shared    => Project_Tree.Shared);\n                   end if;\n                end if;\n \n@@ -1973,7 +1976,7 @@ begin\n                   when Prj.List =>\n                      Current := The_Switches.Values;\n                      while Current /= Prj.Nil_String loop\n-                        The_String := Project_Tree.String_Elements.\n+                        The_String := Project_Tree.Shared.String_Elements.\n                                         Table (Current);\n \n                         declare\n@@ -2024,7 +2027,7 @@ begin\n                         Prj.Util.Value_Of\n                           (Name        => Name_Compiler,\n                            In_Packages => Project.Decl.Packages,\n-                           In_Tree     => Project_Tree);\n+                           Shared      => Project_Tree.Shared);\n \n                Element : Package_Element;\n \n@@ -2054,7 +2057,7 @@ begin\n                      end if;\n                   end loop;\n \n-                  Element := Project_Tree.Packages.Table (Pkg);\n+                  Element := Project_Tree.Shared.Packages.Table (Pkg);\n \n                   --  If there is a single main and there is compilation\n                   --  switches specified in the project file, use them.\n@@ -2069,12 +2072,12 @@ begin\n                        Prj.Util.Value_Of\n                          (Name      => Name_Switches,\n                           In_Arrays => Element.Decl.Arrays,\n-                          In_Tree   => Project_Tree);\n+                          Shared    => Project_Tree.Shared);\n                      The_Switches := Prj.Util.Value_Of\n                        (Index     => Main_Id,\n                         Src_Index => 0,\n                         In_Array  => Switches_Array,\n-                        In_Tree   => Project_Tree);\n+                        Shared    => Project_Tree.Shared);\n                   end if;\n \n                   --  Otherwise, get the Default_Switches (\"Ada\")\n@@ -2084,12 +2087,12 @@ begin\n                        Prj.Util.Value_Of\n                          (Name      => Name_Default_Switches,\n                           In_Arrays => Element.Decl.Arrays,\n-                          In_Tree   => Project_Tree);\n+                          Shared    => Project_Tree.Shared);\n                      The_Switches := Prj.Util.Value_Of\n                        (Index     => Name_Ada,\n                         Src_Index => 0,\n                         In_Array  => Switches_Array,\n-                        In_Tree   => Project_Tree);\n+                        Shared    => Project_Tree.Shared);\n                   end if;\n \n                   --  If there are switches specified, put them in the\n@@ -2112,8 +2115,8 @@ begin\n                      when Prj.List =>\n                         Current := The_Switches.Values;\n                         while Current /= Prj.Nil_String loop\n-                           The_String :=\n-                             Project_Tree.String_Elements.Table (Current);\n+                           The_String := Project_Tree.Shared.String_Elements\n+                             .Table (Current);\n \n                            declare\n                               Switch : constant String :=\n@@ -2244,15 +2247,15 @@ begin\n                               Prj.Util.Value_Of\n                                 (Name        => Name_Builder,\n                                  In_Packages => Project.Decl.Packages,\n-                                 In_Tree     => Project_Tree);\n+                                 Shared      => Project_Tree.Shared);\n \n                      Variable : Variable_Value :=\n                                   Prj.Util.Value_Of\n                                     (Name                    => No_Name,\n                                      Attribute_Or_Array_Name =>\n                                        Name_Global_Configuration_Pragmas,\n                                      In_Package              => Pkg,\n-                                     In_Tree                 => Project_Tree);\n+                                     Shared            => Project_Tree.Shared);\n \n                   begin\n                      if (Variable = Nil_Variable_Value\n@@ -2265,7 +2268,7 @@ begin\n                              Attribute_Or_Array_Name =>\n                                Name_Global_Config_File,\n                              In_Package              => Pkg,\n-                             In_Tree                 => Project_Tree);\n+                             Shared                  => Project_Tree.Shared);\n                      end if;\n \n                      if Variable /= Nil_Variable_Value\n@@ -2283,15 +2286,15 @@ begin\n                                 Prj.Util.Value_Of\n                                   (Name        => Name_Compiler,\n                                    In_Packages => Project.Decl.Packages,\n-                                   In_Tree     => Project_Tree);\n+                                   Shared      => Project_Tree.Shared);\n \n                         Variable : Variable_Value :=\n                                      Prj.Util.Value_Of\n                                        (Name        => No_Name,\n                                         Attribute_Or_Array_Name =>\n                                           Name_Local_Configuration_Pragmas,\n                                         In_Package  => Pkg,\n-                                        In_Tree     => Project_Tree);\n+                                        Shared      => Project_Tree.Shared);\n \n                      begin\n                         if (Variable = Nil_Variable_Value\n@@ -2304,7 +2307,7 @@ begin\n                                 Attribute_Or_Array_Name =>\n                                   Name_Local_Config_File,\n                                 In_Package              => Pkg,\n-                                In_Tree                 => Project_Tree);\n+                                Shared                 => Project_Tree.Shared);\n                         end if;\n \n                         if Variable /= Nil_Variable_Value"}, {"sha": "9d52a28d626f3136af4de8f73698094377e2d5a8", "filename": "gcc/ada/make.adb", "status": "modified", "additions": 45, "deletions": 41, "changes": 86, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/40ecf2f5d19ba2b046c65168aa8acc80ad399a08/gcc%2Fada%2Fmake.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/40ecf2f5d19ba2b046c65168aa8acc80ad399a08/gcc%2Fada%2Fmake.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fmake.adb?ref=40ecf2f5d19ba2b046c65168aa8acc80ad399a08", "patch": "@@ -1288,7 +1288,8 @@ package body Make is\n \n             Switch_List := Switches.Values;\n             while Switch_List /= Nil_String loop\n-               Element := Project_Tree.String_Elements.Table (Switch_List);\n+               Element :=\n+                 Project_Tree.Shared.String_Elements.Table (Switch_List);\n                Get_Name_String (Element.Value);\n \n                if Name_Len > 0 then\n@@ -2301,7 +2302,7 @@ package body Make is\n                  Prj.Util.Value_Of\n                    (Name        => Name_Compiler,\n                     In_Packages => Arguments_Project.Decl.Packages,\n-                    In_Tree     => Project_Tree);\n+                    Shared      => Project_Tree.Shared);\n \n                if Compiler_Package /= No_Package then\n \n@@ -2332,7 +2333,7 @@ package body Make is\n \n                      begin\n                         while Current /= Nil_String loop\n-                           Element := Project_Tree.String_Elements.\n+                           Element := Project_Tree.Shared.String_Elements.\n                                         Table (Current);\n                            Number  := Number + 1;\n                            Current := Element.Next;\n@@ -2348,7 +2349,7 @@ package body Make is\n                            Current := Switches.Values;\n \n                            for Index in New_Args'Range loop\n-                              Element := Project_Tree.String_Elements.\n+                              Element := Project_Tree.Shared.String_Elements.\n                                            Table (Current);\n                               Get_Name_String (Element.Value);\n \n@@ -3851,14 +3852,14 @@ package body Make is\n         Prj.Util.Value_Of\n           (Name        => Name_Builder,\n            In_Packages => The_Packages,\n-           In_Tree     => Project_Tree);\n+           Shared      => Project_Tree.Shared);\n \n       if Gnatmake /= No_Package then\n          Global_Attribute := Prj.Util.Value_Of\n            (Variable_Name => Name_Global_Configuration_Pragmas,\n-            In_Variables  => Project_Tree.Packages.Table\n+            In_Variables  => Project_Tree.Shared.Packages.Table\n                                (Gnatmake).Decl.Attributes,\n-            In_Tree       => Project_Tree);\n+            Shared        => Project_Tree.Shared);\n          Global_Attribute_Present :=\n            Global_Attribute /= Nil_Variable_Value\n            and then Get_Name_String (Global_Attribute.Value) /= \"\";\n@@ -3894,14 +3895,14 @@ package body Make is\n         Prj.Util.Value_Of\n           (Name        => Name_Compiler,\n            In_Packages => The_Packages,\n-           In_Tree     => Project_Tree);\n+           Shared      => Project_Tree.Shared);\n \n       if Compiler /= No_Package then\n          Local_Attribute := Prj.Util.Value_Of\n            (Variable_Name => Name_Local_Configuration_Pragmas,\n-            In_Variables  => Project_Tree.Packages.Table\n+            In_Variables  => Project_Tree.Shared.Packages.Table\n                                (Compiler).Decl.Attributes,\n-            In_Tree       => Project_Tree);\n+            Shared        => Project_Tree.Shared);\n          Local_Attribute_Present :=\n            Local_Attribute /= Nil_Variable_Value\n            and then Get_Name_String (Local_Attribute.Value) /= \"\";\n@@ -4183,7 +4184,7 @@ package body Make is\n       if Main_Project = No_Project then\n          GNAT.OS_Lib.Spawn (Globalizer_Path.all, Globalizer_Args, Success);\n       else\n-         Globalize_Dirs (Main_Project);\n+         Globalize_Dirs (Main_Project, Project_Tree);\n       end if;\n    end Globalize;\n \n@@ -4535,7 +4536,7 @@ package body Make is\n                                    Prj.Util.Value_Of\n                                      (Name_Languages,\n                                       Main_Project.Decl.Attributes,\n-                                      Project_Tree);\n+                                      Project_Tree.Shared);\n \n                      Current : String_List_Id;\n                      Element : String_Element;\n@@ -4551,7 +4552,7 @@ package body Make is\n                         Current := Languages.Values;\n                         Look_For_Foreign :\n                         while Current /= Nil_String loop\n-                           Element := Project_Tree.String_Elements.\n+                           Element := Project_Tree.Shared.String_Elements.\n                                         Table (Current);\n                            Get_Name_String (Element.Value);\n                            To_Lower (Name_Buffer (1 .. Name_Len));\n@@ -4574,12 +4575,13 @@ package body Make is\n                         --  line.\n \n                         Get_Name_String\n-                          (Project_Tree.String_Elements.Table (Value).Value);\n+                          (Project_Tree.Shared.String_Elements.Table\n+                             (Value).Value);\n \n                         declare\n                            Main_Name : constant String :=\n                               Get_Name_String\n-                               (Project_Tree.String_Elements.Table\n+                               (Project_Tree.Shared.String_Elements.Table\n                                     (Value).Value);\n                            Proj : constant Project_Id :=\n                              Prj.Env.Project_Of\n@@ -4591,10 +4593,10 @@ package body Make is\n                               At_Least_One_Main := True;\n                               Osint.Add_File\n                                 (Get_Name_String\n-                                   (Project_Tree.String_Elements.Table\n+                                   (Project_Tree.Shared.String_Elements.Table\n                                       (Value).Value),\n                                  Index =>\n-                                   Project_Tree.String_Elements.Table\n+                                   Project_Tree.Shared.String_Elements.Table\n                                      (Value).Index);\n \n                            elsif not Foreign_Language then\n@@ -4605,7 +4607,7 @@ package body Make is\n                            end if;\n                         end;\n \n-                        Value := Project_Tree.String_Elements.Table\n+                        Value := Project_Tree.Shared.String_Elements.Table\n                                    (Value).Next;\n                      end loop;\n \n@@ -4765,19 +4767,19 @@ package body Make is\n                                 Prj.Util.Value_Of\n                                   (Name        => Name_Builder,\n                                    In_Packages => The_Packages,\n-                                   In_Tree     => Project_Tree);\n+                                   Shared      => Project_Tree.Shared);\n \n             Binder_Package : constant Prj.Package_Id :=\n                                Prj.Util.Value_Of\n                                  (Name        => Name_Binder,\n                                   In_Packages => The_Packages,\n-                                  In_Tree     => Project_Tree);\n+                                  Shared      => Project_Tree.Shared);\n \n             Linker_Package : constant Prj.Package_Id :=\n                                Prj.Util.Value_Of\n                                  (Name        => Name_Linker,\n                                   In_Packages => The_Packages,\n-                                  In_Tree     => Project_Tree);\n+                                  Shared      => Project_Tree.Shared);\n \n             Default_Switches_Array : Array_Id;\n \n@@ -4832,20 +4834,20 @@ package body Make is\n \n                Global_Compilation_Array := Prj.Util.Value_Of\n                  (Name      => Name_Global_Compilation_Switches,\n-                  In_Arrays => Project_Tree.Packages.Table\n+                  In_Arrays => Project_Tree.Shared.Packages.Table\n                     (Builder_Package).Decl.Arrays,\n-                  In_Tree   => Project_Tree);\n+                  Shared    => Project_Tree.Shared);\n \n                Default_Switches_Array :=\n-                 Project_Tree.Packages.Table\n+                 Project_Tree.Shared.Packages.Table\n                    (Builder_Package).Decl.Arrays;\n \n                while Default_Switches_Array /= No_Array and then\n-               Project_Tree.Arrays.Table (Default_Switches_Array).Name /=\n-                 Name_Default_Switches\n+                 Project_Tree.Shared.Arrays.Table (Default_Switches_Array).Name\n+                 /= Name_Default_Switches\n                loop\n-                  Default_Switches_Array :=\n-                    Project_Tree.Arrays.Table (Default_Switches_Array).Next;\n+                  Default_Switches_Array := Project_Tree.Shared.Arrays.Table\n+                    (Default_Switches_Array).Next;\n                end loop;\n \n                if Global_Compilation_Array /= No_Array_Element and then\n@@ -4854,7 +4856,7 @@ package body Make is\n                   Errutil.Error_Msg\n                     (\"Default_Switches forbidden in presence of \" &\n                      \"Global_Compilation_Switches. Use Switches instead.\",\n-                     Project_Tree.Arrays.Table\n+                     Project_Tree.Shared.Arrays.Table\n                        (Default_Switches_Array).Location);\n                   Errutil.Finalize;\n                   Make_Failed\n@@ -4899,15 +4901,15 @@ package body Make is\n                                        Name_Default_Switches,\n                                      In_Package              =>\n                                        Builder_Package,\n-                                     In_Tree                 => Project_Tree);\n+                                     Shared            => Project_Tree.Shared);\n \n                      Switches : constant Array_Element_Id :=\n                                   Prj.Util.Value_Of\n                                     (Name      => Name_Switches,\n                                      In_Arrays =>\n-                                       Project_Tree.Packages.Table\n+                                       Project_Tree.Shared.Packages.Table\n                                          (Builder_Package).Decl.Arrays,\n-                                     In_Tree   => Project_Tree);\n+                                     Shared    => Project_Tree.Shared);\n \n                      Other_Switches : constant Variable_Value :=\n                                         Prj.Util.Value_Of\n@@ -4916,13 +4918,13 @@ package body Make is\n                                            Attribute_Or_Array_Name\n                                                        => Name_Switches,\n                                            In_Package  => Builder_Package,\n-                                           In_Tree     => Project_Tree);\n+                                           Shared      => Project_Tree.Shared);\n \n                   begin\n                      if Other_Switches /= Nil_Variable_Value then\n                         if not Quiet_Output\n                           and then Switches /= No_Array_Element\n-                          and then Project_Tree.Array_Elements.Table\n+                          and then Project_Tree.Shared.Array_Elements.Table\n                                      (Switches).Next /= No_Array_Element\n                         then\n                            Write_Line\n@@ -4977,7 +4979,7 @@ package body Make is\n                begin\n                   while Global_Compilation_Array /= No_Array_Element loop\n                      Global_Compilation_Elem :=\n-                       Project_Tree.Array_Elements.Table\n+                       Project_Tree.Shared.Array_Elements.Table\n                          (Global_Compilation_Array);\n \n                      Get_Name_String (Global_Compilation_Elem.Index);\n@@ -4999,7 +5001,8 @@ package body Make is\n \n                            while List /= Nil_String loop\n                               Elem :=\n-                                Project_Tree.String_Elements.Table (List);\n+                                Project_Tree.Shared.String_Elements.Table\n+                                  (List);\n \n                               if Elem.Value /= No_Name then\n                                  Add_Switch\n@@ -5431,7 +5434,8 @@ package body Make is\n \n                Executable :=\n                  Prj.Util.Executable_Of\n-                   (Main_Project, Project_Tree, Main_Source_File, Main_Index);\n+                   (Main_Project, Project_Tree.Shared,\n+                    Main_Source_File, Main_Index);\n             end if;\n          end if;\n \n@@ -6337,13 +6341,13 @@ package body Make is\n                                      Prj.Util.Value_Of\n                                        (Name        => Name_Binder,\n                                         In_Packages => The_Packages,\n-                                        In_Tree     => Project_Tree);\n+                                        Shared      => Project_Tree.Shared);\n \n                   Linker_Package : constant Prj.Package_Id :=\n                                      Prj.Util.Value_Of\n                                        (Name        => Name_Linker,\n                                         In_Packages => The_Packages,\n-                                        In_Tree     => Project_Tree);\n+                                        Shared      => Project_Tree.Shared);\n \n                begin\n                   --  We fail if we cannot find the main source file\n@@ -6848,7 +6852,7 @@ package body Make is\n          --  has its own directories anyway\n \n          Add_Source_Directories (Main_Project, Project_Tree);\n-         Add_Object_Directories (Main_Project);\n+         Add_Object_Directories (Main_Project, Project_Tree);\n \n          Recursive_Compute_Depth (Main_Project);\n          Compute_All_Imported_Projects (Project_Tree);\n@@ -8457,7 +8461,7 @@ package body Make is\n         (Source_File  => Source_File,\n          Source_Lang  => Name_Ada,\n          Source_Prj   => Project,\n-         Pkg_Name     => Project_Tree.Packages.Table (In_Package).Name,\n+         Pkg_Name     => Project_Tree.Shared.Packages.Table (In_Package).Name,\n          Project_Tree => Project_Tree,\n          Value        => Switches,\n          Is_Default   => Is_Default,"}, {"sha": "6d82e4ba698d68ae97f722d013e3e0a1144ec69d", "filename": "gcc/ada/makeutl.adb", "status": "modified", "additions": 21, "deletions": 14, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/40ecf2f5d19ba2b046c65168aa8acc80ad399a08/gcc%2Fada%2Fmakeutl.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/40ecf2f5d19ba2b046c65168aa8acc80ad399a08/gcc%2Fada%2Fmakeutl.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fmakeutl.adb?ref=40ecf2f5d19ba2b046c65168aa8acc80ad399a08", "patch": "@@ -695,7 +695,7 @@ package body Makeutl is\n                   Prj.Util.Value_Of\n                     (Name        => Pkg_Name,\n                      In_Packages => Project.Decl.Packages,\n-                     In_Tree     => Project_Tree);\n+                     Shared      => Project_Tree.Shared);\n       Lang : Language_Ptr;\n \n    begin\n@@ -706,7 +706,7 @@ package body Makeutl is\n            (Name                    => Name_Id (Source_File),\n             Attribute_Or_Array_Name => Name_Switches,\n             In_Package              => Pkg,\n-            In_Tree                 => Project_Tree,\n+            Shared                  => Project_Tree.Shared,\n             Allow_Wildcards         => True);\n       end if;\n \n@@ -756,7 +756,7 @@ package body Makeutl is\n                     (Name                    => Name_Find,\n                      Attribute_Or_Array_Name => Name_Switches,\n                      In_Package              => Pkg,\n-                     In_Tree                 => Project_Tree,\n+                     Shared                  => Project_Tree.Shared,\n                      Allow_Wildcards         => True);\n                end if;\n \n@@ -776,7 +776,7 @@ package body Makeutl is\n                     (Name                    => Name_Find,\n                      Attribute_Or_Array_Name => Name_Switches,\n                      In_Package              => Pkg,\n-                     In_Tree                 => Project_Tree,\n+                     Shared                  => Project_Tree.Shared,\n                      Allow_Wildcards         => True);\n                end if;\n             end;\n@@ -790,7 +790,7 @@ package body Makeutl is\n              (Name                    => Source_Lang,\n               Attribute_Or_Array_Name => Name_Switches,\n               In_Package              => Pkg,\n-              In_Tree                 => Project_Tree,\n+              Shared                  => Project_Tree.Shared,\n               Force_Lower_Case_Index  => True);\n       end if;\n \n@@ -800,7 +800,7 @@ package body Makeutl is\n              (Name                    => All_Other_Names,\n               Attribute_Or_Array_Name => Name_Switches,\n               In_Package              => Pkg,\n-              In_Tree                 => Project_Tree,\n+              Shared                  => Project_Tree.Shared,\n               Force_Lower_Case_Index  => True);\n       end if;\n \n@@ -810,7 +810,7 @@ package body Makeutl is\n              (Name                    => Source_Lang,\n               Attribute_Or_Array_Name => Name_Default_Switches,\n               In_Package              => Pkg,\n-              In_Tree                 => Project_Tree);\n+              Shared                  => Project_Tree.Shared);\n       end if;\n    end Get_Switches;\n \n@@ -910,14 +910,21 @@ package body Makeutl is\n      (Project  : Project_Id;\n       In_Tree  : Project_Tree_Ref) return String_List\n    is\n-      procedure Recursive_Add (Proj : Project_Id; Dummy : in out Boolean);\n+      procedure Recursive_Add\n+        (Proj    : Project_Id;\n+         In_Tree : Project_Tree_Ref;\n+         Dummy   : in out Boolean);\n       --  The recursive routine used to add linker options\n \n       -------------------\n       -- Recursive_Add --\n       -------------------\n \n-      procedure Recursive_Add (Proj : Project_Id; Dummy : in out Boolean) is\n+      procedure Recursive_Add\n+        (Proj    : Project_Id;\n+         In_Tree : Project_Tree_Ref;\n+         Dummy   : in out Boolean)\n+      is\n          pragma Unreferenced (Dummy);\n \n          Linker_Package : Package_Id;\n@@ -928,15 +935,15 @@ package body Makeutl is\n            Prj.Util.Value_Of\n              (Name        => Name_Linker,\n               In_Packages => Proj.Decl.Packages,\n-              In_Tree     => In_Tree);\n+              Shared      => In_Tree.Shared);\n \n          Options :=\n            Prj.Util.Value_Of\n              (Name                    => Name_Ada,\n               Index                   => 0,\n               Attribute_Or_Array_Name => Name_Linker_Options,\n               In_Package              => Linker_Package,\n-              In_Tree                 => In_Tree);\n+              Shared                  => In_Tree.Shared);\n \n          --  If attribute is present, add the project with\n          --  the attribute to table Linker_Opts.\n@@ -958,7 +965,7 @@ package body Makeutl is\n    begin\n       Linker_Opts.Init;\n \n-      For_All_Projects (Project, Dummy, Imported_First => True);\n+      For_All_Projects (Project, In_Tree, Dummy, Imported_First => True);\n \n       Last_Linker_Option := 0;\n \n@@ -974,7 +981,7 @@ package body Makeutl is\n          begin\n             Options := Linker_Opts.Table (Index).Options;\n             while Options /= Nil_String loop\n-               Option := In_Tree.String_Elements.Table (Options).Value;\n+               Option := In_Tree.Shared.String_Elements.Table (Options).Value;\n                Get_Name_String (Option);\n \n                --  Do not consider empty linker options\n@@ -991,7 +998,7 @@ package body Makeutl is\n                      Including_L_Switch => True);\n                end if;\n \n-               Options := In_Tree.String_Elements.Table (Options).Next;\n+               Options := In_Tree.Shared.String_Elements.Table (Options).Next;\n             end loop;\n          end;\n       end loop;"}, {"sha": "f23291076ec2f009535562859401e65460daac7c", "filename": "gcc/ada/makeutl.ads", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/40ecf2f5d19ba2b046c65168aa8acc80ad399a08/gcc%2Fada%2Fmakeutl.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/40ecf2f5d19ba2b046c65168aa8acc80ad399a08/gcc%2Fada%2Fmakeutl.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fmakeutl.ads?ref=40ecf2f5d19ba2b046c65168aa8acc80ad399a08", "patch": "@@ -40,7 +40,8 @@ package Makeutl is\n    --  Failing procedure called from procedure Test_If_Relative_Path below. May\n    --  be redirected.\n \n-   Project_Tree : constant Project_Tree_Ref := new Project_Tree_Data;\n+   Project_Tree : constant Project_Tree_Ref :=\n+     new Project_Tree_Data (Is_Root_Tree => True);\n    --  The project tree\n \n    Source_Info_Option : constant String := \"--source-info=\";"}, {"sha": "af988ba78d3e25ce127e1ee291c465aafef11151", "filename": "gcc/ada/mlib-prj.adb", "status": "modified", "additions": 16, "deletions": 14, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/40ecf2f5d19ba2b046c65168aa8acc80ad399a08/gcc%2Fada%2Fmlib-prj.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/40ecf2f5d19ba2b046c65168aa8acc80ad399a08/gcc%2Fada%2Fmlib-prj.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fmlib-prj.adb?ref=40ecf2f5d19ba2b046c65168aa8acc80ad399a08", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---                     Copyright (C) 2001-2010, AdaCore                     --\n+--                     Copyright (C) 2001-2011, AdaCore                     --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -901,7 +901,7 @@ package body MLib.Prj is\n                                   Value_Of\n                                     (Name        => Name_Binder,\n                                      In_Packages => For_Project.Decl.Packages,\n-                                     In_Tree     => In_Tree);\n+                                     Shared      => In_Tree.Shared);\n \n             begin\n                if Binder_Package /= No_Package then\n@@ -910,9 +910,9 @@ package body MLib.Prj is\n                                   Value_Of\n                                     (Name      => Name_Default_Switches,\n                                      In_Arrays =>\n-                                       In_Tree.Packages.Table\n+                                       In_Tree.Shared.Packages.Table\n                                          (Binder_Package).Decl.Arrays,\n-                                     In_Tree   => In_Tree);\n+                                     Shared    => In_Tree.Shared);\n \n                      Switches : Variable_Value := Nil_Variable_Value;\n                      Switch   : String_List_Id := Nil_String;\n@@ -924,17 +924,17 @@ package body MLib.Prj is\n                             (Index     => Name_Ada,\n                              Src_Index => 0,\n                              In_Array  => Defaults,\n-                             In_Tree   => In_Tree);\n+                             Shared    => In_Tree.Shared);\n \n                         if not Switches.Default then\n                            Switch := Switches.Values;\n \n                            while Switch /= Nil_String loop\n                               Add_Argument\n                                 (Get_Name_String\n-                                   (In_Tree.String_Elements.Table\n+                                   (In_Tree.Shared.String_Elements.Table\n                                       (Switch).Value));\n-                              Switch := In_Tree.String_Elements.\n+                              Switch := In_Tree.Shared.String_Elements.\n                                           Table (Switch).Next;\n                            end loop;\n                         end if;\n@@ -1277,7 +1277,8 @@ package body MLib.Prj is\n          --  If attribute Library_Options was specified, add these options\n \n          Library_Options := Value_Of\n-           (Name_Library_Options, For_Project.Decl.Attributes, In_Tree);\n+           (Name_Library_Options, For_Project.Decl.Attributes,\n+            In_Tree.Shared);\n \n          if not Library_Options.Default then\n             declare\n@@ -1287,7 +1288,7 @@ package body MLib.Prj is\n             begin\n                Current := Library_Options.Values;\n                while Current /= Nil_String loop\n-                  Element := In_Tree.String_Elements.Table (Current);\n+                  Element := In_Tree.Shared.String_Elements.Table (Current);\n                   Get_Name_String (Element.Value);\n \n                   if Name_Len /= 0 then\n@@ -1756,12 +1757,12 @@ package body MLib.Prj is\n                while Iface /= Nil_String loop\n                   ALI :=\n                     File_Name_Type\n-                      (In_Tree.String_Elements.Table (Iface).Value);\n+                      (In_Tree.Shared.String_Elements.Table (Iface).Value);\n                   Interface_ALIs.Set (ALI, True);\n                   Get_Name_String\n-                    (In_Tree.String_Elements.Table (Iface).Value);\n+                    (In_Tree.Shared.String_Elements.Table (Iface).Value);\n                   Add_Argument (Name_Buffer (1 .. Name_Len));\n-                  Iface := In_Tree.String_Elements.Table (Iface).Next;\n+                  Iface := In_Tree.Shared.String_Elements.Table (Iface).Next;\n                end loop;\n \n                Iface := For_Project.Lib_Interface_ALIs;\n@@ -1775,9 +1776,10 @@ package body MLib.Prj is\n                   while Iface /= Nil_String loop\n                      ALI :=\n                        File_Name_Type\n-                         (In_Tree.String_Elements.Table (Iface).Value);\n+                         (In_Tree.Shared.String_Elements.Table (Iface).Value);\n                      Process (ALI);\n-                     Iface := In_Tree.String_Elements.Table (Iface).Next;\n+                     Iface :=\n+                       In_Tree.Shared.String_Elements.Table (Iface).Next;\n                   end loop;\n                end if;\n             end;"}, {"sha": "3c39e6190a47b1de216ccd2671b235bc544cc138", "filename": "gcc/ada/prj-conf.adb", "status": "modified", "additions": 93, "deletions": 70, "changes": 163, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/40ecf2f5d19ba2b046c65168aa8acc80ad399a08/gcc%2Fada%2Fprj-conf.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/40ecf2f5d19ba2b046c65168aa8acc80ad399a08/gcc%2Fada%2Fprj-conf.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fprj-conf.adb?ref=40ecf2f5d19ba2b046c65168aa8acc80ad399a08", "patch": "@@ -101,6 +101,17 @@ package body Prj.Conf is\n    pragma No_Return (Raise_Invalid_Config);\n    --  Raises exception Invalid_Config with given message\n \n+   procedure Apply_Config_File\n+     (Config_File       : Prj.Project_Id;\n+      Project_Tree      : Prj.Project_Tree_Ref);\n+   --  Apply the configuration file settings to all the projects in the\n+   --  project tree. The Project_Tree must have been parsed first, and\n+   --  processed through the first phase so that all its projects are known.\n+   --\n+   --  Currently, this will add new attributes and packages in the various\n+   --  projects, so that when the second phase of the processing is performed\n+   --  these attributes are automatically taken into account.\n+\n    --------------------\n    -- Add_Attributes --\n    --------------------\n@@ -110,6 +121,7 @@ package body Prj.Conf is\n       Conf_Decl    : Declarations;\n       User_Decl    : in out Declarations)\n    is\n+      Shared : constant Shared_Project_Tree_Data_Access := Project_Tree.Shared;\n       Conf_Attr_Id       : Variable_Id;\n       Conf_Attr          : Variable;\n       Conf_Array_Id      : Array_Id;\n@@ -130,10 +142,8 @@ package body Prj.Conf is\n       Conf_Attr_Id := Conf_Decl.Attributes;\n       User_Attr_Id := User_Decl.Attributes;\n       while Conf_Attr_Id /= No_Variable loop\n-         Conf_Attr :=\n-           Project_Tree.Variable_Elements.Table (Conf_Attr_Id);\n-         User_Attr :=\n-           Project_Tree.Variable_Elements.Table (User_Attr_Id);\n+         Conf_Attr := Shared.Variable_Elements.Table (Conf_Attr_Id);\n+         User_Attr := Shared.Variable_Elements.Table (User_Attr_Id);\n \n          if not Conf_Attr.Value.Default then\n             if User_Attr.Value.Default then\n@@ -142,8 +152,7 @@ package body Prj.Conf is\n                --  value of the configuration attribute.\n \n                User_Attr.Value := Conf_Attr.Value;\n-               Project_Tree.Variable_Elements.Table (User_Attr_Id) :=\n-                 User_Attr;\n+               Shared.Variable_Elements.Table (User_Attr_Id) := User_Attr;\n \n             elsif User_Attr.Value.Kind = List\n               and then Conf_Attr.Value.Values /= Nil_String\n@@ -164,22 +173,20 @@ package body Prj.Conf is\n                   --  Create new list\n \n                   String_Element_Table.Increment_Last\n-                    (Project_Tree.String_Elements);\n+                    (Shared.String_Elements);\n                   New_List := String_Element_Table.Last\n-                    (Project_Tree.String_Elements);\n+                    (Shared.String_Elements);\n \n                   --  Value of attribute is new list\n \n                   User_Attr.Value.Values := New_List;\n-                  Project_Tree.Variable_Elements.Table (User_Attr_Id) :=\n-                    User_Attr;\n+                  Shared.Variable_Elements.Table (User_Attr_Id) := User_Attr;\n \n                   loop\n \n                      --  Get each element of configuration list\n \n-                     Conf_Elem :=\n-                       Project_Tree.String_Elements.Table (Conf_List);\n+                     Conf_Elem := Shared.String_Elements.Table (Conf_List);\n                      New_Elem := Conf_Elem;\n                      Conf_List := Conf_Elem.Next;\n \n@@ -189,21 +196,18 @@ package body Prj.Conf is\n                         --  first element of user list, and we are done.\n \n                         New_Elem.Next := User_List;\n-                        Project_Tree.String_Elements.Table\n-                          (New_List) := New_Elem;\n+                        Shared.String_Elements.Table (New_List) := New_Elem;\n                         exit;\n \n                      else\n                         --  If it is not the last element in the list, add to\n                         --  new list.\n \n                         String_Element_Table.Increment_Last\n-                          (Project_Tree.String_Elements);\n+                          (Shared.String_Elements);\n                         New_Elem.Next :=\n-                          String_Element_Table.Last\n-                            (Project_Tree.String_Elements);\n-                        Project_Tree.String_Elements.Table\n-                          (New_List) := New_Elem;\n+                          String_Element_Table.Last (Shared.String_Elements);\n+                        Shared.String_Elements.Table (New_List) := New_Elem;\n                         New_List := New_Elem.Next;\n                      end if;\n                   end loop;\n@@ -217,11 +221,11 @@ package body Prj.Conf is\n \n       Conf_Array_Id := Conf_Decl.Arrays;\n       while Conf_Array_Id /= No_Array loop\n-         Conf_Array := Project_Tree.Arrays.Table (Conf_Array_Id);\n+         Conf_Array := Shared.Arrays.Table (Conf_Array_Id);\n \n          User_Array_Id := User_Decl.Arrays;\n          while User_Array_Id /= No_Array loop\n-            User_Array := Project_Tree.Arrays.Table (User_Array_Id);\n+            User_Array := Shared.Arrays.Table (User_Array_Id);\n             exit when User_Array.Name = Conf_Array.Name;\n             User_Array_Id := User_Array.Next;\n          end loop;\n@@ -230,24 +234,24 @@ package body Prj.Conf is\n          --  do a shallow copy of the full associative array.\n \n          if User_Array_Id = No_Array then\n-            Array_Table.Increment_Last (Project_Tree.Arrays);\n+            Array_Table.Increment_Last (Shared.Arrays);\n             User_Array := Conf_Array;\n             User_Array.Next := User_Decl.Arrays;\n-            User_Decl.Arrays := Array_Table.Last (Project_Tree.Arrays);\n-            Project_Tree.Arrays.Table (User_Decl.Arrays) := User_Array;\n+            User_Decl.Arrays := Array_Table.Last (Shared.Arrays);\n+            Shared.Arrays.Table (User_Decl.Arrays) := User_Array;\n \n          else\n             --  Otherwise, check each array element\n \n             Conf_Array_Elem_Id := Conf_Array.Value;\n             while Conf_Array_Elem_Id /= No_Array_Element loop\n                Conf_Array_Elem :=\n-                 Project_Tree.Array_Elements.Table (Conf_Array_Elem_Id);\n+                 Shared.Array_Elements.Table (Conf_Array_Elem_Id);\n \n                User_Array_Elem_Id := User_Array.Value;\n                while User_Array_Elem_Id /= No_Array_Element loop\n                   User_Array_Elem :=\n-                    Project_Tree.Array_Elements.Table (User_Array_Elem_Id);\n+                    Shared.Array_Elements.Table (User_Array_Elem_Id);\n                   exit when User_Array_Elem.Index = Conf_Array_Elem.Index;\n                   User_Array_Elem_Id := User_Array_Elem.Next;\n                end loop;\n@@ -257,15 +261,14 @@ package body Prj.Conf is\n                --  user array.\n \n                if User_Array_Elem_Id = No_Array_Element then\n-                  Array_Element_Table.Increment_Last\n-                    (Project_Tree.Array_Elements);\n+                  Array_Element_Table.Increment_Last (Shared.Array_Elements);\n                   User_Array_Elem := Conf_Array_Elem;\n                   User_Array_Elem.Next := User_Array.Value;\n                   User_Array.Value :=\n-                    Array_Element_Table.Last (Project_Tree.Array_Elements);\n-                  Project_Tree.Array_Elements.Table (User_Array.Value) :=\n+                    Array_Element_Table.Last (Shared.Array_Elements);\n+                  Shared.Array_Elements.Table (User_Array.Value) :=\n                     User_Array_Elem;\n-                  Project_Tree.Arrays.Table (User_Array_Id) := User_Array;\n+                  Shared.Arrays.Table (User_Array_Id) := User_Array;\n \n                --  Otherwise, if the value is a string list, prepend the\n                --  user array element with the conf array element value.\n@@ -283,23 +286,22 @@ package body Prj.Conf is\n                      begin\n                         loop\n                            Conf_List_Elem :=\n-                             Project_Tree.String_Elements.Table\n-                               (Conf_List);\n+                             Shared.String_Elements.Table (Conf_List);\n                            String_Element_Table.Increment_Last\n-                             (Project_Tree.String_Elements);\n+                             (Shared.String_Elements);\n                            Next :=\n                              String_Element_Table.Last\n-                               (Project_Tree.String_Elements);\n-                           Project_Tree.String_Elements.Table (Next) :=\n+                               (Shared.String_Elements);\n+                           Shared.String_Elements.Table (Next) :=\n                              Conf_List_Elem;\n \n                            if Previous = Nil_String then\n                               User_Array_Elem.Value.Values := Next;\n-                              Project_Tree.Array_Elements.Table\n+                              Shared.Array_Elements.Table\n                                 (User_Array_Elem_Id) := User_Array_Elem;\n \n                            else\n-                              Project_Tree.String_Elements.Table\n+                              Shared.String_Elements.Table\n                                 (Previous).Next := Next;\n                            end if;\n \n@@ -308,8 +310,8 @@ package body Prj.Conf is\n                            Conf_List := Conf_List_Elem.Next;\n \n                            if Conf_List = Nil_String then\n-                              Project_Tree.String_Elements.Table\n-                                (Previous).Next := Link;\n+                              Shared.String_Elements.Table (Previous).Next :=\n+                                Link;\n                               exit;\n                            end if;\n                         end loop;\n@@ -454,9 +456,10 @@ package body Prj.Conf is\n    -----------------------\n \n    procedure Apply_Config_File\n-     (Config_File  : Prj.Project_Id;\n-      Project_Tree : Prj.Project_Tree_Ref)\n+     (Config_File       : Prj.Project_Id;\n+      Project_Tree      : Prj.Project_Tree_Ref)\n    is\n+      Shared : constant Shared_Project_Tree_Data_Access := Project_Tree.Shared;\n       Conf_Decl    : constant Declarations := Config_File.Decl;\n       Conf_Pack_Id : Package_Id;\n       Conf_Pack    : Package_Element;\n@@ -467,47 +470,67 @@ package body Prj.Conf is\n       Proj         : Project_List;\n \n    begin\n+      Debug_Output (\"Applying config file to a project tree\");\n+\n       Proj := Project_Tree.Projects;\n       while Proj /= null loop\n          if Proj.Project /= Config_File then\n             User_Decl := Proj.Project.Decl;\n             Add_Attributes\n-              (Project_Tree => Project_Tree,\n-               Conf_Decl    => Conf_Decl,\n-               User_Decl    => User_Decl);\n+              (Project_Tree      => Project_Tree,\n+               Conf_Decl         => Conf_Decl,\n+               User_Decl         => User_Decl);\n \n             Conf_Pack_Id := Conf_Decl.Packages;\n             while Conf_Pack_Id /= No_Package loop\n-               Conf_Pack := Project_Tree.Packages.Table (Conf_Pack_Id);\n+               Conf_Pack := Shared.Packages.Table (Conf_Pack_Id);\n \n                User_Pack_Id := User_Decl.Packages;\n                while User_Pack_Id /= No_Package loop\n-                  User_Pack := Project_Tree.Packages.Table (User_Pack_Id);\n+                  User_Pack := Shared.Packages.Table (User_Pack_Id);\n                   exit when User_Pack.Name = Conf_Pack.Name;\n                   User_Pack_Id := User_Pack.Next;\n                end loop;\n \n                if User_Pack_Id = No_Package then\n-                  Package_Table.Increment_Last (Project_Tree.Packages);\n+                  Package_Table.Increment_Last (Shared.Packages);\n                   User_Pack := Conf_Pack;\n                   User_Pack.Next := User_Decl.Packages;\n-                  User_Decl.Packages :=\n-                    Package_Table.Last (Project_Tree.Packages);\n-                  Project_Tree.Packages.Table (User_Decl.Packages) :=\n-                    User_Pack;\n+                  User_Decl.Packages := Package_Table.Last (Shared.Packages);\n+                  Shared.Packages.Table (User_Decl.Packages) := User_Pack;\n \n                else\n                   Add_Attributes\n-                    (Project_Tree => Project_Tree,\n-                     Conf_Decl    => Conf_Pack.Decl,\n-                     User_Decl    => Project_Tree.Packages.Table\n-                       (User_Pack_Id).Decl);\n+                    (Project_Tree      => Project_Tree,\n+                     Conf_Decl         => Conf_Pack.Decl,\n+                     User_Decl         =>\n+                       Shared.Packages.Table (User_Pack_Id).Decl);\n                end if;\n \n                Conf_Pack_Id := Conf_Pack.Next;\n             end loop;\n \n             Proj.Project.Decl := User_Decl;\n+\n+            --  For aggregate projects, we need to apply the config to all\n+            --  their aggregated trees as well.\n+\n+            if Proj.Project.Qualifier = Aggregate then\n+               declare\n+                  List : Aggregated_Project_List :=\n+                    Proj.Project.Aggregated_Projects;\n+               begin\n+                  while List /= null loop\n+                     Debug_Output\n+                       (\"Recursively apply config to aggregated tree\",\n+                        List.Project.Name);\n+                     Apply_Config_File\n+                       (Config_File,\n+                        Project_Tree      => List.Tree);\n+                     List := List.Next;\n+                  end loop;\n+               end;\n+            end if;\n          end if;\n \n          Proj := Proj.Next;\n@@ -524,9 +547,10 @@ package body Prj.Conf is\n       Project_Tree : Prj.Project_Tree_Ref;\n       Target       : String := \"\") return Boolean\n    is\n+      Shared : constant Shared_Project_Tree_Data_Access := Project_Tree.Shared;\n       Variable : constant Variable_Value :=\n                    Value_Of\n-                     (Name_Target, Config_File.Decl.Attributes, Project_Tree);\n+                     (Name_Target, Config_File.Decl.Attributes, Shared);\n       Tgt_Name : Name_Id := No_Name;\n       OK       : Boolean;\n \n@@ -585,6 +609,7 @@ package body Prj.Conf is\n       Automatically_Generated    : out Boolean;\n       On_Load_Config             : Config_File_Hook := null)\n    is\n+      Shared : constant Shared_Project_Tree_Data_Access := Project_Tree.Shared;\n \n       At_Least_One_Compiler_Command : Boolean := False;\n       --  Set to True if at least one attribute Ide'Compiler_Command is\n@@ -655,7 +680,7 @@ package body Prj.Conf is\n            Value_Of\n              (Name_Source_Dirs,\n               Project.Decl.Attributes,\n-              Project_Tree);\n+              Shared);\n \n          if Variable = Nil_Variable_Value\n            or else Variable.Default\n@@ -665,7 +690,7 @@ package body Prj.Conf is\n               Value_Of\n                 (Name_Source_Files,\n                  Project.Decl.Attributes,\n-                 Project_Tree);\n+                 Shared);\n             return Variable = Nil_Variable_Value\n               or else Variable.Default\n               or else Variable.Values /= Nil_String;\n@@ -690,10 +715,7 @@ package body Prj.Conf is\n          --  Hash table to keep the languages used in the project tree\n \n          IDE : constant Package_Id :=\n-                 Value_Of\n-                   (Name_Ide,\n-                    Project.Decl.Packages,\n-                    Project_Tree);\n+                 Value_Of (Name_Ide, Project.Decl.Packages, Shared);\n \n          Prj_Iter : Project_List;\n          List     : String_List_Id;\n@@ -714,7 +736,7 @@ package body Prj.Conf is\n                  Value_Of\n                    (Name_Languages,\n                     Prj_Iter.Project.Decl.Attributes,\n-                    Project_Tree);\n+                    Shared);\n \n                if Variable = Nil_Variable_Value\n                  or else Variable.Default\n@@ -730,7 +752,7 @@ package body Prj.Conf is\n                        Value_Of\n                          (Name_Languages,\n                           Prj_Iter.Project.Extends.Decl.Attributes,\n-                          Project_Tree);\n+                          Shared);\n                      Check_Default :=\n                        Variable /= Nil_Variable_Value\n                          and then Variable.Values = Nil_String;\n@@ -741,7 +763,7 @@ package body Prj.Conf is\n                        Value_Of\n                          (Name_Default_Language,\n                           Prj_Iter.Project.Decl.Attributes,\n-                          Project_Tree);\n+                          Shared);\n \n                      if Variable /= Nil_Variable_Value\n                        and then not Variable.Default\n@@ -765,7 +787,7 @@ package body Prj.Conf is\n \n                   List := Variable.Values;\n                   while List /= Nil_String loop\n-                     Elem := Project_Tree.String_Elements.Table (List);\n+                     Elem := Shared.String_Elements.Table (List);\n \n                      Get_Name_String (Elem.Value);\n                      To_Lower (Name_Buffer (1 .. Name_Len));\n@@ -800,7 +822,7 @@ package body Prj.Conf is\n                 (Name,\n                  Attribute_Or_Array_Name => Name_Compiler_Command,\n                  In_Package              => IDE,\n-                 In_Tree                 => Project_Tree,\n+                 Shared                  => Shared,\n                  Force_Lower_Case_Index  => True);\n \n             declare\n@@ -857,7 +879,7 @@ package body Prj.Conf is\n                      Value_Of\n                        (Name_Object_Dir,\n                         Project.Decl.Attributes,\n-                        Project_Tree);\n+                        Shared);\n \n          Gprconfig_Path  : String_Access;\n          Success         : Boolean;\n@@ -1261,6 +1283,7 @@ package body Prj.Conf is\n       On_Load_Config             : Config_File_Hook := null;\n       Reset_Tree                 : Boolean := True)\n    is\n+      Shared : constant Shared_Project_Tree_Data_Access := Project_Tree.Shared;\n       Main_Config_Project : Project_Id;\n       Success : Boolean;\n \n@@ -1289,7 +1312,7 @@ package body Prj.Conf is\n                  Value_Of\n                    (Name_Object_Dir,\n                     Main_Project.Decl.Attributes,\n-                    Project_Tree);\n+                    Shared);\n \n             begin\n                if Obj_Dir = Nil_Variable_Value or else Obj_Dir.Default then"}, {"sha": "38e46bef426f131af887ff3d4bae1951cbb018e5", "filename": "gcc/ada/prj-conf.ads", "status": "modified", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/40ecf2f5d19ba2b046c65168aa8acc80ad399a08/gcc%2Fada%2Fprj-conf.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/40ecf2f5d19ba2b046c65168aa8acc80ad399a08/gcc%2Fada%2Fprj-conf.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fprj-conf.ads?ref=40ecf2f5d19ba2b046c65168aa8acc80ad399a08", "patch": "@@ -162,17 +162,6 @@ package Prj.Conf is\n    --  processed (and Packages_To_Check is used to indicate which packages\n    --  should be processed)\n \n-   procedure Apply_Config_File\n-     (Config_File  : Prj.Project_Id;\n-      Project_Tree : Prj.Project_Tree_Ref);\n-   --  Apply the configuration file settings to all the projects in the\n-   --  project tree. The Project_Tree must have been parsed first, and\n-   --  processed through the first phase so that all its projects are known.\n-   --\n-   --  Currently, this will add new attributes and packages in the various\n-   --  projects, so that when the second phase of the processing is performed\n-   --  these attributes are automatically taken into account.\n-\n    procedure Add_Default_GNAT_Naming_Scheme\n      (Config_File  : in out Prj.Tree.Project_Node_Id;\n       Project_Tree : Prj.Tree.Project_Node_Tree_Ref);"}, {"sha": "b5102c74f99056be23cc59eda640d91f40864f7c", "filename": "gcc/ada/prj-env.adb", "status": "modified", "additions": 95, "deletions": 40, "changes": 135, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/40ecf2f5d19ba2b046c65168aa8acc80ad399a08/gcc%2Fada%2Fprj-env.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/40ecf2f5d19ba2b046c65168aa8acc80ad399a08/gcc%2Fada%2Fprj-env.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fprj-env.adb?ref=40ecf2f5d19ba2b046c65168aa8acc80ad399a08", "patch": "@@ -76,7 +76,7 @@ package body Prj.Env is\n \n    procedure Add_To_Path\n      (Source_Dirs : String_List_Id;\n-      In_Tree     : Project_Tree_Ref;\n+      Shared      : Shared_Project_Tree_Data_Access;\n       Buffer      : in out String_Access;\n       Buffer_Last : in out Natural);\n    --  Add to Ada_Path_Buffer all the source directories in string list\n@@ -91,7 +91,7 @@ package body Prj.Env is\n \n    procedure Add_To_Source_Path\n      (Source_Dirs  : String_List_Id;\n-      In_Tree      : Project_Tree_Ref;\n+      Shared       : Shared_Project_Tree_Data_Access;\n       Source_Paths : in out Source_Path_Table.Instance);\n    --  Add to Ada_Path_B all the source directories in string list\n    --  Source_Dirs, if any. Increment Ada_Path_Length.\n@@ -122,17 +122,25 @@ package body Prj.Env is\n       Buffer      : String_Access;\n       Buffer_Last : Natural := 0;\n \n-      procedure Add (Project : Project_Id; Dummy : in out Boolean);\n+      procedure Add\n+        (Project : Project_Id;\n+         In_Tree : Project_Tree_Ref;\n+         Dummy   : in out Boolean);\n       --  Add source dirs of Project to the path\n \n       ---------\n       -- Add --\n       ---------\n \n-      procedure Add (Project : Project_Id; Dummy : in out Boolean) is\n+      procedure Add\n+        (Project : Project_Id;\n+         In_Tree : Project_Tree_Ref;\n+         Dummy   : in out Boolean)\n+      is\n          pragma Unreferenced (Dummy);\n       begin\n-         Add_To_Path (Project.Source_Dirs, In_Tree, Buffer, Buffer_Last);\n+         Add_To_Path\n+           (Project.Source_Dirs, In_Tree.Shared, Buffer, Buffer_Last);\n       end Add;\n \n       procedure For_All_Projects is\n@@ -150,7 +158,8 @@ package body Prj.Env is\n \n          if Project.Ada_Include_Path = null then\n             Buffer := new String (1 .. 4096);\n-            For_All_Projects (Project, Dummy);\n+            For_All_Projects\n+              (Project, In_Tree, Dummy, Include_Aggregated => True);\n             Project.Ada_Include_Path := new String'(Buffer (1 .. Buffer_Last));\n             Free (Buffer);\n          end if;\n@@ -159,7 +168,8 @@ package body Prj.Env is\n \n       else\n          Buffer := new String (1 .. 4096);\n-         Add_To_Path (Project.Source_Dirs, In_Tree, Buffer, Buffer_Last);\n+         Add_To_Path\n+           (Project.Source_Dirs, In_Tree.Shared, Buffer, Buffer_Last);\n \n          declare\n             Result : constant String := Buffer (1 .. Buffer_Last);\n@@ -176,20 +186,28 @@ package body Prj.Env is\n \n    function Ada_Objects_Path\n      (Project             : Project_Id;\n+      In_Tree             : Project_Tree_Ref;\n       Including_Libraries : Boolean := True) return String_Access\n    is\n       Buffer      : String_Access;\n       Buffer_Last : Natural := 0;\n \n-      procedure Add (Project : Project_Id; Dummy : in out Boolean);\n+      procedure Add\n+        (Project : Project_Id;\n+         In_Tree : Project_Tree_Ref;\n+         Dummy   : in out Boolean);\n       --  Add all the object directories of a project to the path\n \n       ---------\n       -- Add --\n       ---------\n \n-      procedure Add (Project : Project_Id; Dummy : in out Boolean) is\n-         pragma Unreferenced (Dummy);\n+      procedure Add\n+        (Project : Project_Id;\n+         In_Tree : Project_Tree_Ref;\n+         Dummy   : in out Boolean)\n+      is\n+         pragma Unreferenced (Dummy, In_Tree);\n          Path : constant Path_Name_Type :=\n                   Get_Object_Directory\n                     (Project,\n@@ -214,7 +232,7 @@ package body Prj.Env is\n \n       if Project.Ada_Objects_Path = null then\n          Buffer := new String (1 .. 4096);\n-         For_All_Projects (Project, Dummy);\n+         For_All_Projects (Project, In_Tree, Dummy);\n \n          Project.Ada_Objects_Path := new String'(Buffer (1 .. Buffer_Last));\n          Free (Buffer);\n@@ -291,15 +309,15 @@ package body Prj.Env is\n \n    procedure Add_To_Path\n      (Source_Dirs : String_List_Id;\n-      In_Tree     : Project_Tree_Ref;\n+      Shared      : Shared_Project_Tree_Data_Access;\n       Buffer      : in out String_Access;\n       Buffer_Last : in out Natural)\n    is\n       Current    : String_List_Id := Source_Dirs;\n       Source_Dir : String_Element;\n    begin\n       while Current /= Nil_String loop\n-         Source_Dir := In_Tree.String_Elements.Table (Current);\n+         Source_Dir := Shared.String_Elements.Table (Current);\n          Add_To_Path (Get_Name_String (Source_Dir.Display_Value),\n                       Buffer, Buffer_Last);\n          Current := Source_Dir.Next;\n@@ -395,7 +413,7 @@ package body Prj.Env is\n \n    procedure Add_To_Source_Path\n      (Source_Dirs  : String_List_Id;\n-      In_Tree      : Project_Tree_Ref;\n+      Shared       : Shared_Project_Tree_Data_Access;\n       Source_Paths : in out Source_Path_Table.Instance)\n    is\n       Current    : String_List_Id := Source_Dirs;\n@@ -406,7 +424,7 @@ package body Prj.Env is\n       --  Add each source directory\n \n       while Current /= Nil_String loop\n-         Source_Dir := In_Tree.String_Elements.Table (Current);\n+         Source_Dir := Shared.String_Elements.Table (Current);\n          Add_It := True;\n \n          --  Check if the source directory is already in the table\n@@ -461,7 +479,10 @@ package body Prj.Env is\n       Iter            : Source_Iterator;\n       Source          : Source_Id;\n \n-      procedure Check (Project : Project_Id; State : in out Integer);\n+      procedure Check\n+        (Project : Project_Id;\n+         In_Tree : Project_Tree_Ref;\n+         State   : in out Integer);\n       --  Recursive procedure that put in the config pragmas file any non\n       --  standard naming schemes, if it is not already in the file, then call\n       --  itself for any imported project.\n@@ -482,23 +503,24 @@ package body Prj.Env is\n       -- Check --\n       -----------\n \n-      procedure Check (Project : Project_Id; State : in out Integer) is\n-         pragma Unreferenced (State);\n+      procedure Check\n+        (Project : Project_Id;\n+         In_Tree : Project_Tree_Ref;\n+         State   : in out Integer)\n+      is\n+         pragma Unreferenced (State, In_Tree);\n          Lang   : constant Language_Ptr :=\n                     Get_Language_From_Name (Project, \"ada\");\n          Naming : Lang_Naming_Data;\n \n       begin\n          if Current_Verbosity = High then\n-            Write_Str (\"Checking project file \"\"\");\n-            Write_Str (Namet.Get_Name_String (Project.Name));\n-            Write_Str (\"\"\".\");\n-            Write_Eol;\n+            Debug_Output (\"Checking project file:\", Project.Name);\n          end if;\n \n          if Lang = null then\n             if Current_Verbosity = High then\n-               Write_Line (\"   Languages does not contain Ada, nothing to do\");\n+               Debug_Output (\"Languages does not contain Ada, nothing to do\");\n             end if;\n \n             return;\n@@ -665,7 +687,8 @@ package body Prj.Env is\n \n          --  Check the naming schemes\n \n-         Check_Imported_Projects (For_Project, Dummy, Imported_First => False);\n+         Check_Imported_Projects\n+           (For_Project, In_Tree, Dummy, Imported_First => False);\n \n          --  Visit all the files and process those that need an SFN pragma\n \n@@ -767,7 +790,10 @@ package body Prj.Env is\n       procedure Put_Name_Buffer;\n       --  Put the line contained in the Name_Buffer in the global buffer\n \n-      procedure Process (Project : Project_Id; State : in out Integer);\n+      procedure Process\n+        (Project : Project_Id;\n+         In_Tree : Project_Tree_Ref;\n+         State   : in out Integer);\n       --  Generate the mapping file for Project (not recursively)\n \n       ---------------------\n@@ -789,7 +815,11 @@ package body Prj.Env is\n       -- Process --\n       -------------\n \n-      procedure Process (Project : Project_Id; State : in out Integer) is\n+      procedure Process\n+        (Project : Project_Id;\n+         In_Tree : Project_Tree_Ref;\n+         State   : in out Integer)\n+      is\n          pragma Unreferenced (State);\n          Source : Source_Id;\n          Suffix : File_Name_Type;\n@@ -874,7 +904,7 @@ package body Prj.Env is\n          Debug_Increase_Indent (\"Create mapping file \", Name_Id (Name));\n       end if;\n \n-      For_Every_Imported_Project (Project, Dummy);\n+      For_Every_Imported_Project (Project, In_Tree, Dummy);\n \n       declare\n          Last   : Natural;\n@@ -1174,16 +1204,26 @@ package body Prj.Env is\n    -- For_All_Object_Dirs --\n    -------------------------\n \n-   procedure For_All_Object_Dirs (Project : Project_Id) is\n-      procedure For_Project (Prj : Project_Id; Dummy : in out Integer);\n+   procedure For_All_Object_Dirs\n+     (Project : Project_Id;\n+      Tree    : Project_Tree_Ref)\n+   is\n+      procedure For_Project\n+        (Prj   : Project_Id;\n+         Tree  : Project_Tree_Ref;\n+         Dummy : in out Integer);\n       --  Get all object directories of Prj\n \n       -----------------\n       -- For_Project --\n       -----------------\n \n-      procedure For_Project (Prj : Project_Id; Dummy : in out Integer) is\n-         pragma Unreferenced (Dummy);\n+      procedure For_Project\n+        (Prj   : Project_Id;\n+         Tree  : Project_Tree_Ref;\n+         Dummy : in out Integer)\n+      is\n+         pragma Unreferenced (Dummy, Tree);\n       begin\n          --  ??? Set_Ada_Paths has a different behavior for library project\n          --  files, should we have the same ?\n@@ -1201,7 +1241,7 @@ package body Prj.Env is\n    --  Start of processing for For_All_Object_Dirs\n \n    begin\n-      Get_Object_Dirs (Project, Dummy);\n+      Get_Object_Dirs (Project, Tree, Dummy);\n    end For_All_Object_Dirs;\n \n    -------------------------\n@@ -1212,14 +1252,21 @@ package body Prj.Env is\n      (Project : Project_Id;\n       In_Tree : Project_Tree_Ref)\n    is\n-      procedure For_Project (Prj : Project_Id; Dummy : in out Integer);\n+      procedure For_Project\n+        (Prj     : Project_Id;\n+         In_Tree : Project_Tree_Ref;\n+         Dummy   : in out Integer);\n       --  Get all object directories of Prj\n \n       -----------------\n       -- For_Project --\n       -----------------\n \n-      procedure For_Project (Prj : Project_Id; Dummy : in out Integer) is\n+      procedure For_Project\n+        (Prj     : Project_Id;\n+         In_Tree : Project_Tree_Ref;\n+         Dummy   : in out Integer)\n+      is\n          pragma Unreferenced (Dummy);\n          Current    : String_List_Id := Prj.Source_Dirs;\n          The_String : String_Element;\n@@ -1230,7 +1277,7 @@ package body Prj.Env is\n \n          if Has_Ada_Sources (Project) then\n             while Current /= Nil_String loop\n-               The_String := In_Tree.String_Elements.Table (Current);\n+               The_String := In_Tree.Shared.String_Elements.Table (Current);\n                Action (Get_Name_String (The_String.Display_Value));\n                Current := The_String.Next;\n             end loop;\n@@ -1244,7 +1291,7 @@ package body Prj.Env is\n    --  Start of processing for For_All_Source_Dirs\n \n    begin\n-      Get_Source_Dirs (Project, Dummy);\n+      Get_Source_Dirs (Project, In_Tree, Dummy);\n    end For_All_Source_Dirs;\n \n    -------------------\n@@ -1541,15 +1588,22 @@ package body Prj.Env is\n       Buffer      : String_Access := new String (1 .. Buffer_Initial);\n       Buffer_Last : Natural := 0;\n \n-      procedure Recursive_Add (Project : Project_Id; Dummy : in out Boolean);\n+      procedure Recursive_Add\n+        (Project : Project_Id;\n+         In_Tree : Project_Tree_Ref;\n+         Dummy   : in out Boolean);\n       --  Recursive procedure to add the source/object paths of extended/\n       --  imported projects.\n \n       -------------------\n       -- Recursive_Add --\n       -------------------\n \n-      procedure Recursive_Add (Project : Project_Id; Dummy : in out Boolean) is\n+      procedure Recursive_Add\n+        (Project : Project_Id;\n+         In_Tree : Project_Tree_Ref;\n+         Dummy   : in out Boolean)\n+      is\n          pragma Unreferenced (Dummy);\n \n          Path : Path_Name_Type;\n@@ -1563,7 +1617,8 @@ package body Prj.Env is\n             --  Ada sources.\n \n             if Has_Ada_Sources (Project) then\n-               Add_To_Source_Path (Project.Source_Dirs, In_Tree, Source_Paths);\n+               Add_To_Source_Path\n+                 (Project.Source_Dirs, In_Tree.Shared, Source_Paths);\n             end if;\n          end if;\n \n@@ -1621,7 +1676,7 @@ package body Prj.Env is\n       --  then call the recursive procedure Add for Project.\n \n       if Process_Source_Dirs or Process_Object_Dirs then\n-         For_All_Projects (Project, Dummy);\n+         For_All_Projects (Project, In_Tree, Dummy);\n       end if;\n \n       --  Write and close any file that has been created. Source_FD is not set"}, {"sha": "2be3cfe9407e032ddcd95c6278cdbf04245964e2", "filename": "gcc/ada/prj-env.ads", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/40ecf2f5d19ba2b046c65168aa8acc80ad399a08/gcc%2Fada%2Fprj-env.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/40ecf2f5d19ba2b046c65168aa8acc80ad399a08/gcc%2Fada%2Fprj-env.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fprj-env.ads?ref=40ecf2f5d19ba2b046c65168aa8acc80ad399a08", "patch": "@@ -88,6 +88,7 @@ package Prj.Env is\n \n    function Ada_Objects_Path\n      (Project             : Project_Id;\n+      In_Tree             : Project_Tree_Ref;\n       Including_Libraries : Boolean := True) return String_Access;\n    --  Get the ADA_OBJECTS_PATH of a Project file. For the first call, compute\n    --  it and cache it. When Including_Libraries is False, do not include the\n@@ -149,7 +150,9 @@ package Prj.Env is\n \n    generic\n       with procedure Action (Path : String);\n-   procedure For_All_Object_Dirs (Project : Project_Id);\n+   procedure For_All_Object_Dirs\n+     (Project : Project_Id;\n+      Tree    : Project_Tree_Ref);\n    --  Iterate through all the object directories of a project, including those\n    --  of imported or modified projects.\n "}, {"sha": "bc6c8ec99196fa124fb698c24035f14dd241b2e9", "filename": "gcc/ada/prj-nmsc.adb", "status": "modified", "additions": 198, "deletions": 171, "changes": 369, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/40ecf2f5d19ba2b046c65168aa8acc80ad399a08/gcc%2Fada%2Fprj-nmsc.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/40ecf2f5d19ba2b046c65168aa8acc80ad399a08/gcc%2Fada%2Fprj-nmsc.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fprj-nmsc.adb?ref=40ecf2f5d19ba2b046c65168aa8acc80ad399a08", "patch": "@@ -507,7 +507,8 @@ package body Prj.Nmsc is\n    --  when there are no sources for language Lang_Name.\n \n    procedure Show_Source_Dirs\n-     (Project : Project_Id; In_Tree : Project_Tree_Ref);\n+     (Project : Project_Id;\n+      Shared  : Shared_Project_Tree_Data_Access);\n    --  List all the source directories of a project\n \n    procedure Write_Attr (Name, Value : String);\n@@ -651,7 +652,6 @@ package body Prj.Nmsc is\n       Add_Src   : Boolean;\n       Source    : Source_Id;\n       Prev_Unit : Unit_Index := No_Unit_Index;\n-\n       Source_To_Replace : Source_Id := No_Source;\n \n    begin\n@@ -939,7 +939,7 @@ package body Prj.Nmsc is\n                         Prj.Util.Value_Of\n                           (Snames.Name_Project_Files,\n                            Project.Decl.Attributes,\n-                           Tree);\n+                           Tree.Shared);\n \n       Project_Path_For_Aggregate : Prj.Env.Project_Search_Path;\n \n@@ -958,22 +958,27 @@ package body Prj.Nmsc is\n       procedure Found_Project_File (Path : Path_Information; Rank : Natural) is\n          pragma Unreferenced (Rank);\n       begin\n-         Debug_Output (\"Aggregates: \", Name_Id (Path.Display_Name));\n-\n-         --  For usual \"with\" statement, this phase will have been done when\n-         --  parsing the project itself. However, for aggregate projects, we\n-         --  can only do this when processing the aggregate project, since the\n-         --  exact list of project files or project directories can depend on\n-         --  scenario variables.\n-         --\n-         --  We only load the projects explicitly here, but do not process\n-         --  them. For the processing, Prj.Proc will take care of processing\n-         --  them, within the same call to Recursive_Process (thus avoiding the\n-         --  processing of a given project multiple times).\n-         --\n-         --  ??? We might already have loaded the project\n-\n-         Add_Aggregated_Project (Project, Path => Path.Name);\n+         if Path.Name /= Project.Path.Name then\n+            Debug_Output (\"Aggregates: \", Name_Id (Path.Display_Name));\n+\n+            --  For usual \"with\" statement, this phase will have been done when\n+            --  parsing the project itself. However, for aggregate projects, we\n+            --  can only do this when processing the aggregate project, since\n+            --  the exact list of project files or project directories can\n+            --  depend on scenario variables.\n+            --\n+            --  We only load the projects explicitly here, but do not process\n+            --  them. For the processing, Prj.Proc will take care of processing\n+            --  them, within the same call to Recursive_Process (thus avoiding\n+            --  the processing of a given project multiple times).\n+            --\n+            --  ??? We might already have loaded the project\n+\n+            Add_Aggregated_Project (Project, Path => Path.Name);\n+\n+         else\n+            Debug_Output (\"Pattern returned the aggregate itself, ignored\");\n+         end if;\n       end Found_Project_File;\n \n    --  Start of processing for Check_Aggregate_Project\n@@ -1021,22 +1026,24 @@ package body Prj.Nmsc is\n      (Project : Project_Id;\n       Data    : in out Tree_Processing_Data)\n    is\n+      Shared : constant Shared_Project_Tree_Data_Access := Data.Tree.Shared;\n+\n       Source_Dirs      : constant Variable_Value :=\n                            Util.Value_Of\n                              (Name_Source_Dirs,\n-                              Project.Decl.Attributes, Data.Tree);\n+                              Project.Decl.Attributes, Shared);\n       Source_Files     : constant Variable_Value :=\n                            Util.Value_Of\n                              (Name_Source_Files,\n-                              Project.Decl.Attributes, Data.Tree);\n+                              Project.Decl.Attributes, Shared);\n       Source_List_File : constant Variable_Value :=\n                            Util.Value_Of\n                              (Name_Source_List_File,\n-                              Project.Decl.Attributes, Data.Tree);\n+                              Project.Decl.Attributes, Shared);\n       Languages        : constant Variable_Value :=\n                            Util.Value_Of\n                              (Name_Languages,\n-                              Project.Decl.Attributes, Data.Tree);\n+                              Project.Decl.Attributes, Shared);\n \n    begin\n       if Project.Source_Dirs /= Nil_String then\n@@ -1065,6 +1072,7 @@ package body Prj.Nmsc is\n      (Project : Project_Id;\n       Data    : in out Tree_Processing_Data)\n    is\n+      Shared : constant Shared_Project_Tree_Data_Access := Data.Tree.Shared;\n       Prj_Data : Project_Processing_Data;\n \n    begin\n@@ -1079,7 +1087,7 @@ package body Prj.Nmsc is\n          Check_Programming_Languages (Project, Data);\n \n          if Current_Verbosity = High then\n-            Show_Source_Dirs (Project, Data.Tree);\n+            Show_Source_Dirs (Project, Shared);\n          end if;\n       end if;\n \n@@ -1303,6 +1311,9 @@ package body Prj.Nmsc is\n      (Project : Project_Id;\n       Data    : in out Tree_Processing_Data)\n    is\n+      Shared       : constant Shared_Project_Tree_Data_Access :=\n+        Data.Tree.Shared;\n+\n       Dot_Replacement : File_Name_Type := No_File;\n       Casing          : Casing_Type    := All_Lower_Case;\n       Separate_Suffix : File_Name_Type := No_File;\n@@ -1364,11 +1375,11 @@ package body Prj.Nmsc is\n \n             Current_Array_Id := Arrays;\n             while Current_Array_Id /= No_Array loop\n-               Current_Array := Data.Tree.Arrays.Table (Current_Array_Id);\n+               Current_Array := Shared.Arrays.Table (Current_Array_Id);\n \n                Element_Id := Current_Array.Value;\n                while Element_Id /= No_Array_Element loop\n-                  Element := Data.Tree.Array_Elements.Table (Element_Id);\n+                  Element := Shared.Array_Elements.Table (Element_Id);\n \n                   if Element.Index /= All_Other_Names then\n \n@@ -1441,8 +1452,7 @@ package body Prj.Nmsc is\n \n             Attribute_Id := Attributes;\n             while Attribute_Id /= No_Variable loop\n-               Attribute :=\n-                 Data.Tree.Variable_Elements.Table (Attribute_Id);\n+               Attribute := Shared.Variable_Elements.Table (Attribute_Id);\n \n                if not Attribute.Value.Default then\n                   if Attribute.Name = Name_Executable_Suffix then\n@@ -1475,11 +1485,11 @@ package body Prj.Nmsc is\n \n             Current_Array_Id := Arrays;\n             while Current_Array_Id /= No_Array loop\n-               Current_Array := Data.Tree.Arrays.Table (Current_Array_Id);\n+               Current_Array := Shared.Arrays.Table (Current_Array_Id);\n \n                Element_Id := Current_Array.Value;\n                while Element_Id /= No_Array_Element loop\n-                  Element := Data.Tree.Array_Elements.Table (Element_Id);\n+                  Element := Shared.Array_Elements.Table (Element_Id);\n \n                   if Element.Index /= All_Other_Names then\n \n@@ -1806,7 +1816,7 @@ package body Prj.Nmsc is\n \n             Attribute_Id := Attributes;\n             while Attribute_Id /= No_Variable loop\n-               Attribute := Data.Tree.Variable_Elements.Table (Attribute_Id);\n+               Attribute := Shared.Variable_Elements.Table (Attribute_Id);\n \n                if not Attribute.Value.Default then\n                   if Attribute.Name = Name_Separate_Suffix then\n@@ -1857,11 +1867,11 @@ package body Prj.Nmsc is\n \n             Current_Array_Id := Arrays;\n             while Current_Array_Id /= No_Array loop\n-               Current_Array := Data.Tree.Arrays.Table (Current_Array_Id);\n+               Current_Array := Shared.Arrays.Table (Current_Array_Id);\n \n                Element_Id := Current_Array.Value;\n                while Element_Id /= No_Array_Element loop\n-                  Element := Data.Tree.Array_Elements.Table (Element_Id);\n+                  Element := Shared.Array_Elements.Table (Element_Id);\n \n                   --  Get the name of the language\n \n@@ -1918,8 +1928,7 @@ package body Prj.Nmsc is\n \n             Attribute_Id := Attributes;\n             while Attribute_Id /= No_Variable loop\n-               Attribute :=\n-                 Data.Tree.Variable_Elements.Table (Attribute_Id);\n+               Attribute := Shared.Variable_Elements.Table (Attribute_Id);\n \n                if not Attribute.Value.Default then\n                   if Attribute.Name = Name_Driver then\n@@ -2026,7 +2035,7 @@ package body Prj.Nmsc is\n       begin\n          Packages := Project.Decl.Packages;\n          while Packages /= No_Package loop\n-            Element := Data.Tree.Packages.Table (Packages);\n+            Element := Shared.Packages.Table (Packages);\n \n             case Element.Name is\n                when Name_Binder =>\n@@ -2082,8 +2091,7 @@ package body Prj.Nmsc is\n \n          Attribute_Id := Project.Decl.Attributes;\n          while Attribute_Id /= No_Variable loop\n-            Attribute :=\n-              Data.Tree.Variable_Elements.Table (Attribute_Id);\n+            Attribute := Shared.Variable_Elements.Table (Attribute_Id);\n \n             if not Attribute.Value.Default then\n                if Attribute.Name = Name_Target then\n@@ -2400,11 +2408,11 @@ package body Prj.Nmsc is\n \n          Current_Array_Id := Project.Decl.Arrays;\n          while Current_Array_Id /= No_Array loop\n-            Current_Array := Data.Tree.Arrays.Table (Current_Array_Id);\n+            Current_Array := Shared.Arrays.Table (Current_Array_Id);\n \n             Element_Id := Current_Array.Value;\n             while Element_Id /= No_Array_Element loop\n-               Element := Data.Tree.Array_Elements.Table (Element_Id);\n+               Element := Shared.Array_Elements.Table (Element_Id);\n \n                --  Get the name of the language\n \n@@ -2684,10 +2692,11 @@ package body Prj.Nmsc is\n      (Project : Project_Id;\n       Data    : in out Tree_Processing_Data)\n    is\n+      Shared   : constant Shared_Project_Tree_Data_Access := Data.Tree.Shared;\n       Externally_Built : constant Variable_Value :=\n                            Util.Value_Of\n                             (Name_Externally_Built,\n-                             Project.Decl.Attributes, Data.Tree);\n+                             Project.Decl.Attributes, Shared);\n \n    begin\n       if not Externally_Built.Default then\n@@ -2726,17 +2735,19 @@ package body Prj.Nmsc is\n      (Project : Project_Id;\n       Data    : in out Tree_Processing_Data)\n    is\n+      Shared : constant Shared_Project_Tree_Data_Access := Data.Tree.Shared;\n+\n       Interfaces : constant Prj.Variable_Value :=\n                      Prj.Util.Value_Of\n                        (Snames.Name_Interfaces,\n                         Project.Decl.Attributes,\n-                        Data.Tree);\n+                        Shared);\n \n       Library_Interface : constant Prj.Variable_Value :=\n                             Prj.Util.Value_Of\n                               (Snames.Name_Library_Interface,\n                                Project.Decl.Attributes,\n-                               Data.Tree);\n+                               Shared);\n \n       List      : String_List_Id;\n       Element   : String_Element;\n@@ -2767,7 +2778,7 @@ package body Prj.Nmsc is\n \n          List := Interfaces.Values;\n          while List /= Nil_String loop\n-            Element := Data.Tree.String_Elements.Table (List);\n+            Element := Shared.String_Elements.Table (List);\n             Name := Canonical_Case_File_Name (Element.Value);\n \n             Project_2 := Project;\n@@ -2840,7 +2851,7 @@ package body Prj.Nmsc is\n \n          List := Library_Interface.Values;\n          while List /= Nil_String loop\n-            Element := Data.Tree.String_Elements.Table (List);\n+            Element := Shared.String_Elements.Table (List);\n             Get_Name_String (Element.Value);\n             To_Lower (Name_Buffer (1 .. Name_Len));\n             Name := Name_Find;\n@@ -2913,9 +2924,10 @@ package body Prj.Nmsc is\n      (Project : Project_Id;\n       Data    : in out Tree_Processing_Data)\n    is\n+      Shared    : constant Shared_Project_Tree_Data_Access := Data.Tree.Shared;\n       Naming_Id : constant Package_Id :=\n                     Util.Value_Of\n-                      (Name_Naming, Project.Decl.Packages, Data.Tree);\n+                      (Name_Naming, Project.Decl.Packages, Shared);\n       Naming    : Package_Element;\n \n       Ada_Body_Suffix_Loc : Source_Ptr := No_Location;\n@@ -2957,17 +2969,17 @@ package body Prj.Nmsc is\n                            Util.Value_Of\n                              (Name_Dot_Replacement,\n                               Naming.Decl.Attributes,\n-                              Data.Tree);\n+                              Shared);\n          Casing_String : constant Variable_Value :=\n                            Util.Value_Of\n                              (Name_Casing,\n                               Naming.Decl.Attributes,\n-                              Data.Tree);\n+                              Shared);\n          Sep_Suffix    : constant Variable_Value :=\n                            Util.Value_Of\n                              (Name_Separate_Suffix,\n                               Naming.Decl.Attributes,\n-                              Data.Tree);\n+                              Shared);\n          Dot_Repl_Loc  : Source_Ptr;\n \n       begin\n@@ -3105,26 +3117,26 @@ package body Prj.Nmsc is\n                  Value_Of\n                    (Name_Implementation_Exceptions,\n                     In_Arrays => Naming.Decl.Arrays,\n-                    In_Tree   => Data.Tree);\n+                    Shared    => Shared);\n \n             when Spec =>\n                Exceptions :=\n                  Value_Of\n                    (Name_Specification_Exceptions,\n                     In_Arrays => Naming.Decl.Arrays,\n-                    In_Tree   => Data.Tree);\n+                    Shared    => Shared);\n          end case;\n \n          Exception_List :=\n            Value_Of\n              (Index    => Lang,\n               In_Array => Exceptions,\n-              In_Tree  => Data.Tree);\n+              Shared   => Shared);\n \n          if Exception_List /= Nil_Variable_Value then\n             Element_Id := Exception_List.Values;\n             while Element_Id /= Nil_String loop\n-               Element   := Data.Tree.String_Elements.Table (Element_Id);\n+               Element   := Shared.String_Elements.Table (Element_Id);\n                File_Name := Canonical_Case_File_Name (Element.Value);\n \n                Source :=\n@@ -3200,34 +3212,34 @@ package body Prj.Nmsc is\n                  Value_Of\n                    (Name_Body,\n                     In_Arrays => Naming.Decl.Arrays,\n-                    In_Tree   => Data.Tree);\n+                    Shared    => Shared);\n \n                if Exceptions = No_Array_Element then\n                   Exceptions :=\n                     Value_Of\n                       (Name_Implementation,\n                        In_Arrays => Naming.Decl.Arrays,\n-                       In_Tree   => Data.Tree);\n+                       Shared    => Shared);\n                end if;\n \n             when Spec =>\n                Exceptions :=\n                  Value_Of\n                    (Name_Spec,\n                     In_Arrays => Naming.Decl.Arrays,\n-                    In_Tree   => Data.Tree);\n+                    Shared    => Shared);\n \n                if Exceptions = No_Array_Element then\n                   Exceptions :=\n                     Value_Of\n                       (Name_Spec,\n                        In_Arrays => Naming.Decl.Arrays,\n-                       In_Tree   => Data.Tree);\n+                       Shared    => Shared);\n                end if;\n          end case;\n \n          while Exceptions /= No_Array_Element loop\n-            Element   := Data.Tree.Array_Elements.Table (Exceptions);\n+            Element   := Shared.Array_Elements.Table (Exceptions);\n             File_Name := Canonical_Case_File_Name (Element.Value.Value);\n \n             Get_Name_String (Element.Index);\n@@ -3332,14 +3344,14 @@ package body Prj.Nmsc is\n               (Name                    => Lang,\n                Attribute_Or_Array_Name => Name_Spec_Suffix,\n                In_Package              => Naming_Id,\n-               In_Tree                 => Data.Tree);\n+               Shared                  => Shared);\n \n             if Suffix = Nil_Variable_Value then\n                Suffix := Value_Of\n                  (Name                    => Lang,\n                   Attribute_Or_Array_Name => Name_Specification_Suffix,\n                   In_Package              => Naming_Id,\n-                  In_Tree                 => Data.Tree);\n+                  Shared                  => Shared);\n             end if;\n \n             if Suffix /= Nil_Variable_Value then\n@@ -3364,15 +3376,15 @@ package body Prj.Nmsc is\n                 (Name                    => Lang,\n                  Attribute_Or_Array_Name => Name_Body_Suffix,\n                  In_Package              => Naming_Id,\n-                 In_Tree                 => Data.Tree);\n+                 Shared                  => Shared);\n \n             if Suffix = Nil_Variable_Value then\n                Suffix :=\n                  Value_Of\n                    (Name                    => Lang,\n                     Attribute_Or_Array_Name => Name_Implementation_Suffix,\n                     In_Package              => Naming_Id,\n-                    In_Tree                 => Data.Tree);\n+                    Shared                  => Shared);\n             end if;\n \n             if Suffix /= Nil_Variable_Value then\n@@ -3470,13 +3482,13 @@ package body Prj.Nmsc is\n                    Util.Value_Of\n                      (Name_Spec_Suffix,\n                       Naming.Decl.Arrays,\n-                      Data.Tree);\n+                      Shared);\n \n          Impls : Array_Element_Id :=\n                    Util.Value_Of\n                      (Name_Body_Suffix,\n                       Naming.Decl.Arrays,\n-                      Data.Tree);\n+                      Shared);\n \n          Lang      : Language_Ptr;\n          Lang_Name : Name_Id;\n@@ -3489,7 +3501,7 @@ package body Prj.Nmsc is\n          --  user project, and they override the default.\n \n          while Specs /= No_Array_Element loop\n-            Lang_Name := Data.Tree.Array_Elements.Table (Specs).Index;\n+            Lang_Name := Shared.Array_Elements.Table (Specs).Index;\n             Lang :=\n               Get_Language_From_Name\n                 (Project, Name => Get_Name_String (Lang_Name));\n@@ -3523,19 +3535,19 @@ package body Prj.Nmsc is\n                   Lang_Name);\n \n             else\n-               Value := Data.Tree.Array_Elements.Table (Specs).Value;\n+               Value := Shared.Array_Elements.Table (Specs).Value;\n \n                if Value.Kind = Single then\n                   Lang.Config.Naming_Data.Spec_Suffix :=\n                     Canonical_Case_File_Name (Value.Value);\n                end if;\n             end if;\n \n-            Specs := Data.Tree.Array_Elements.Table (Specs).Next;\n+            Specs := Shared.Array_Elements.Table (Specs).Next;\n          end loop;\n \n          while Impls /= No_Array_Element loop\n-            Lang_Name := Data.Tree.Array_Elements.Table (Impls).Index;\n+            Lang_Name := Shared.Array_Elements.Table (Impls).Index;\n             Lang :=\n               Get_Language_From_Name\n                 (Project, Name => Get_Name_String (Lang_Name));\n@@ -3545,7 +3557,7 @@ package body Prj.Nmsc is\n                  (\"Ignoring impl naming data (lang. not in project): \",\n                   Lang_Name);\n             else\n-               Value := Data.Tree.Array_Elements.Table (Impls).Value;\n+               Value := Shared.Array_Elements.Table (Impls).Value;\n \n                if Lang.Name = Name_Ada then\n                   Ada_Body_Suffix_Loc := Value.Location;\n@@ -3557,7 +3569,7 @@ package body Prj.Nmsc is\n                end if;\n             end if;\n \n-            Impls := Data.Tree.Array_Elements.Table (Impls).Next;\n+            Impls := Shared.Array_Elements.Table (Impls).Next;\n          end loop;\n       end Initialize_Naming_Data;\n \n@@ -3569,7 +3581,7 @@ package body Prj.Nmsc is\n       if Naming_Id /= No_Package\n         and then Project.Qualifier /= Configuration\n       then\n-         Naming := Data.Tree.Packages.Table (Naming_Id);\n+         Naming := Shared.Packages.Table (Naming_Id);\n          Debug_Increase_Indent (\"Checking package Naming for \", Project.Name);\n          Initialize_Naming_Data;\n          Check_Naming;\n@@ -3585,31 +3597,33 @@ package body Prj.Nmsc is\n      (Project : Project_Id;\n       Data    : in out Tree_Processing_Data)\n    is\n+      Shared : constant Shared_Project_Tree_Data_Access := Data.Tree.Shared;\n+\n       Attributes   : constant Prj.Variable_Id := Project.Decl.Attributes;\n \n       Lib_Dir      : constant Prj.Variable_Value :=\n                        Prj.Util.Value_Of\n-                         (Snames.Name_Library_Dir, Attributes, Data.Tree);\n+                         (Snames.Name_Library_Dir, Attributes, Shared);\n \n       Lib_Name     : constant Prj.Variable_Value :=\n                        Prj.Util.Value_Of\n-                         (Snames.Name_Library_Name, Attributes, Data.Tree);\n+                         (Snames.Name_Library_Name, Attributes, Shared);\n \n       Lib_Version  : constant Prj.Variable_Value :=\n                        Prj.Util.Value_Of\n-                         (Snames.Name_Library_Version, Attributes, Data.Tree);\n+                         (Snames.Name_Library_Version, Attributes, Shared);\n \n       Lib_ALI_Dir  : constant Prj.Variable_Value :=\n                        Prj.Util.Value_Of\n-                         (Snames.Name_Library_Ali_Dir, Attributes, Data.Tree);\n+                         (Snames.Name_Library_Ali_Dir, Attributes, Shared);\n \n       Lib_GCC      : constant Prj.Variable_Value :=\n                        Prj.Util.Value_Of\n-                         (Snames.Name_Library_GCC, Attributes, Data.Tree);\n+                         (Snames.Name_Library_GCC, Attributes, Shared);\n \n       The_Lib_Kind : constant Prj.Variable_Value :=\n                        Prj.Util.Value_Of\n-                         (Snames.Name_Library_Kind, Attributes, Data.Tree);\n+                         (Snames.Name_Library_Kind, Attributes, Shared);\n \n       Imported_Project_List : Project_List;\n \n@@ -3839,7 +3853,7 @@ package body Prj.Nmsc is\n \n                      Dirs_Id := Project.Source_Dirs;\n                      while Dirs_Id /= Nil_String loop\n-                        Dir_Elem := Data.Tree.String_Elements.Table (Dirs_Id);\n+                        Dir_Elem := Shared.String_Elements.Table (Dirs_Id);\n                         Dirs_Id  := Dir_Elem.Next;\n \n                         if Project.Library_Dir.Name =\n@@ -3871,7 +3885,7 @@ package body Prj.Nmsc is\n \n                               Dir_Loop : while Dirs_Id /= Nil_String loop\n                                  Dir_Elem :=\n-                                   Data.Tree.String_Elements.Table (Dirs_Id);\n+                                   Shared.String_Elements.Table (Dirs_Id);\n                                  Dirs_Id  := Dir_Elem.Next;\n \n                                  if Project.Library_Dir.Name =\n@@ -4027,8 +4041,7 @@ package body Prj.Nmsc is\n \n                         Dirs_Id := Project.Source_Dirs;\n                         while Dirs_Id /= Nil_String loop\n-                           Dir_Elem :=\n-                             Data.Tree.String_Elements.Table (Dirs_Id);\n+                           Dir_Elem := Shared.String_Elements.Table (Dirs_Id);\n                            Dirs_Id  := Dir_Elem.Next;\n \n                            if Project.Library_ALI_Dir.Name =\n@@ -4061,8 +4074,7 @@ package body Prj.Nmsc is\n                                  ALI_Dir_Loop :\n                                  while Dirs_Id /= Nil_String loop\n                                     Dir_Elem :=\n-                                      Data.Tree.String_Elements.Table\n-                                        (Dirs_Id);\n+                                      Shared.String_Elements.Table (Dirs_Id);\n                                     Dirs_Id  := Dir_Elem.Next;\n \n                                     if Project.Library_ALI_Dir.Name =\n@@ -4178,14 +4190,14 @@ package body Prj.Nmsc is\n                                          Value_Of\n                                            (Name_Linker,\n                                             Project.Decl.Packages,\n-                                            Data.Tree);\n+                                            Shared);\n                               Driver : constant Variable_Value :=\n                                          Value_Of\n                                            (Name                 => No_Name,\n                                             Attribute_Or_Array_Name =>\n                                               Name_Driver,\n                                             In_Package           => Linker,\n-                                            In_Tree              => Data.Tree);\n+                                            Shared               => Shared);\n \n                            begin\n                               if Driver /= Nil_Variable_Value\n@@ -4227,26 +4239,26 @@ package body Prj.Nmsc is\n             Linker_Package_Id : constant Package_Id :=\n                                   Util.Value_Of\n                                     (Name_Linker,\n-                                     Project.Decl.Packages, Data.Tree);\n+                                     Project.Decl.Packages, Shared);\n             Linker_Package    : Package_Element;\n             Switches          : Array_Element_Id := No_Array_Element;\n \n          begin\n             if Linker_Package_Id /= No_Package then\n-               Linker_Package := Data.Tree.Packages.Table (Linker_Package_Id);\n+               Linker_Package := Shared.Packages.Table (Linker_Package_Id);\n \n                Switches :=\n                  Value_Of\n                    (Name      => Name_Switches,\n                     In_Arrays => Linker_Package.Decl.Arrays,\n-                    In_Tree   => Data.Tree);\n+                    Shared    => Shared);\n \n                if Switches = No_Array_Element then\n                   Switches :=\n                     Value_Of\n                       (Name      => Name_Default_Switches,\n                        In_Arrays => Linker_Package.Decl.Arrays,\n-                       In_Tree   => Data.Tree);\n+                       Shared    => Shared);\n                end if;\n \n                if Switches /= No_Array_Element then\n@@ -4310,6 +4322,8 @@ package body Prj.Nmsc is\n      (Project : Project_Id;\n       Data    : in out Tree_Processing_Data)\n    is\n+      Shared : constant Shared_Project_Tree_Data_Access := Data.Tree.Shared;\n+\n       Languages   : Variable_Value := Nil_Variable_Value;\n       Def_Lang    : Variable_Value := Nil_Variable_Value;\n       Def_Lang_Id : Name_Id;\n@@ -4354,10 +4368,10 @@ package body Prj.Nmsc is\n    begin\n       Project.Languages := null;\n       Languages :=\n-        Prj.Util.Value_Of (Name_Languages, Project.Decl.Attributes, Data.Tree);\n+        Prj.Util.Value_Of (Name_Languages, Project.Decl.Attributes, Shared);\n       Def_Lang :=\n         Prj.Util.Value_Of\n-          (Name_Default_Language, Project.Decl.Attributes, Data.Tree);\n+          (Name_Default_Language, Project.Decl.Attributes, Shared);\n \n       if Project.Source_Dirs /= Nil_String then\n \n@@ -4411,7 +4425,7 @@ package body Prj.Nmsc is\n                   --  Languages.\n \n                   while Current /= Nil_String loop\n-                     Element := Data.Tree.String_Elements.Table (Current);\n+                     Element := Shared.String_Elements.Table (Current);\n                      Get_Name_String (Element.Value);\n                      To_Lower (Name_Buffer (1 .. Name_Len));\n \n@@ -4435,41 +4449,43 @@ package body Prj.Nmsc is\n      (Project : Project_Id;\n       Data    : in out Tree_Processing_Data)\n    is\n+      Shared : constant Shared_Project_Tree_Data_Access := Data.Tree.Shared;\n+\n       Lib_Interfaces      : constant Prj.Variable_Value :=\n                               Prj.Util.Value_Of\n                                 (Snames.Name_Library_Interface,\n                                  Project.Decl.Attributes,\n-                                 Data.Tree);\n+                                 Shared);\n \n       Lib_Auto_Init       : constant Prj.Variable_Value :=\n                               Prj.Util.Value_Of\n                                 (Snames.Name_Library_Auto_Init,\n                                  Project.Decl.Attributes,\n-                                 Data.Tree);\n+                                 Shared);\n \n       Lib_Src_Dir         : constant Prj.Variable_Value :=\n                               Prj.Util.Value_Of\n                                 (Snames.Name_Library_Src_Dir,\n                                  Project.Decl.Attributes,\n-                                 Data.Tree);\n+                                 Shared);\n \n       Lib_Symbol_File     : constant Prj.Variable_Value :=\n                               Prj.Util.Value_Of\n                                 (Snames.Name_Library_Symbol_File,\n                                  Project.Decl.Attributes,\n-                                 Data.Tree);\n+                                 Shared);\n \n       Lib_Symbol_Policy   : constant Prj.Variable_Value :=\n                               Prj.Util.Value_Of\n                                 (Snames.Name_Library_Symbol_Policy,\n                                  Project.Decl.Attributes,\n-                                 Data.Tree);\n+                                 Shared);\n \n       Lib_Ref_Symbol_File : constant Prj.Variable_Value :=\n                               Prj.Util.Value_Of\n                                 (Snames.Name_Library_Reference_Symbol_File,\n                                  Project.Decl.Attributes,\n-                                 Data.Tree);\n+                                 Shared);\n \n       Auto_Init_Supported : Boolean;\n       OK                  : Boolean := True;\n@@ -4508,14 +4524,14 @@ package body Prj.Nmsc is\n \n             while Interfaces /= Nil_String loop\n                Get_Name_String\n-                 (Data.Tree.String_Elements.Table (Interfaces).Value);\n+                 (Shared.String_Elements.Table (Interfaces).Value);\n                To_Lower (Name_Buffer (1 .. Name_Len));\n \n                if Name_Len = 0 then\n                   Error_Msg\n                     (Data.Flags,\n                      \"an interface cannot be an empty string\",\n-                     Data.Tree.String_Elements.Table (Interfaces).Location,\n+                     Shared.String_Elements.Table (Interfaces).Location,\n                      Project);\n \n                else\n@@ -4564,8 +4580,8 @@ package body Prj.Nmsc is\n                      Error_Msg\n                        (Data.Flags,\n                         \"%% is not a unit of this project\",\n-                        Data.Tree.String_Elements.Table\n-                          (Interfaces).Location, Project);\n+                        Shared.String_Elements.Table (Interfaces).Location,\n+                        Project);\n \n                   else\n                      if Source.Kind = Spec\n@@ -4575,27 +4591,24 @@ package body Prj.Nmsc is\n                      end if;\n \n                      String_Element_Table.Increment_Last\n-                       (Data.Tree.String_Elements);\n+                       (Shared.String_Elements);\n \n-                     Data.Tree.String_Elements.Table\n-                       (String_Element_Table.Last\n-                          (Data.Tree.String_Elements)) :=\n+                     Shared.String_Elements.Table\n+                       (String_Element_Table.Last (Shared.String_Elements)) :=\n                        (Value         => Name_Id (Source.Dep_Name),\n                         Index         => 0,\n                         Display_Value => Name_Id (Source.Dep_Name),\n                         Location      =>\n-                          Data.Tree.String_Elements.Table\n-                            (Interfaces).Location,\n+                          Shared.String_Elements.Table (Interfaces).Location,\n                         Flag          => False,\n                         Next          => Interface_ALIs);\n \n                      Interface_ALIs :=\n-                       String_Element_Table.Last\n-                         (Data.Tree.String_Elements);\n+                       String_Element_Table.Last (Shared.String_Elements);\n                   end if;\n                end if;\n \n-               Interfaces := Data.Tree.String_Elements.Table (Interfaces).Next;\n+               Interfaces := Shared.String_Elements.Table (Interfaces).Next;\n             end loop;\n \n             --  Put the list of Interface ALIs in the project data\n@@ -4703,7 +4716,7 @@ package body Prj.Nmsc is\n \n                      Src_Dirs := Project.Source_Dirs;\n                      while Src_Dirs /= Nil_String loop\n-                        Src_Dir := Data.Tree.String_Elements.Table (Src_Dirs);\n+                        Src_Dir := Shared.String_Elements.Table (Src_Dirs);\n \n                         --  Report error if it is one of the source directories\n \n@@ -4734,7 +4747,7 @@ package body Prj.Nmsc is\n                            Src_Dirs := Pid.Project.Source_Dirs;\n                            Dir_Loop : while Src_Dirs /= Nil_String loop\n                               Src_Dir :=\n-                                Data.Tree.String_Elements.Table (Src_Dirs);\n+                                Shared.String_Elements.Table (Src_Dirs);\n \n                               --  Report error if it is one of the source\n                               --  directories.\n@@ -5002,41 +5015,43 @@ package body Prj.Nmsc is\n      (Project : Project_Id;\n       Data    : in out Tree_Processing_Data)\n    is\n+      Shared : constant Shared_Project_Tree_Data_Access := Data.Tree.Shared;\n+\n       Object_Dir  : constant Variable_Value :=\n                       Util.Value_Of\n-                        (Name_Object_Dir, Project.Decl.Attributes, Data.Tree);\n+                        (Name_Object_Dir, Project.Decl.Attributes, Shared);\n \n       Exec_Dir : constant Variable_Value :=\n                    Util.Value_Of\n-                     (Name_Exec_Dir, Project.Decl.Attributes, Data.Tree);\n+                     (Name_Exec_Dir, Project.Decl.Attributes, Shared);\n \n       Source_Dirs : constant Variable_Value :=\n                       Util.Value_Of\n-                        (Name_Source_Dirs, Project.Decl.Attributes, Data.Tree);\n+                        (Name_Source_Dirs, Project.Decl.Attributes, Shared);\n \n       Ignore_Source_Sub_Dirs : constant Variable_Value :=\n                                  Util.Value_Of\n                                    (Name_Ignore_Source_Sub_Dirs,\n                                     Project.Decl.Attributes,\n-                                    Data.Tree);\n+                                    Shared);\n \n       Excluded_Source_Dirs : constant Variable_Value :=\n                               Util.Value_Of\n                                 (Name_Excluded_Source_Dirs,\n                                  Project.Decl.Attributes,\n-                                 Data.Tree);\n+                                 Shared);\n \n       Source_Files : constant Variable_Value :=\n                       Util.Value_Of\n                         (Name_Source_Files,\n-                         Project.Decl.Attributes, Data.Tree);\n+                         Project.Decl.Attributes, Shared);\n \n       Last_Source_Dir   : String_List_Id    := Nil_String;\n       Last_Src_Dir_Rank : Number_List_Index := No_Number_List;\n \n       Languages : constant Variable_Value :=\n                       Prj.Util.Value_Of\n-                        (Name_Languages, Project.Decl.Attributes, Data.Tree);\n+                        (Name_Languages, Project.Decl.Attributes, Shared);\n \n       Remove_Source_Dirs : Boolean := False;\n \n@@ -5070,20 +5085,20 @@ package body Prj.Nmsc is\n          List      := Project.Source_Dirs;\n          Rank_List := Project.Source_Dir_Ranks;\n          while List /= Nil_String loop\n-            Element := Data.Tree.String_Elements.Table (List);\n+            Element := Shared.String_Elements.Table (List);\n             exit when Element.Value = Name_Id (Path.Name);\n             Prev := List;\n             List := Element.Next;\n             Prev_Rank := Rank_List;\n-            Rank_List := Data.Tree.Number_Lists.Table (Prev_Rank).Next;\n+            Rank_List := Shared.Number_Lists.Table (Prev_Rank).Next;\n          end loop;\n \n          --  The directory is in the list if List is not Nil_String\n \n          if not Remove_Source_Dirs and then List = Nil_String then\n             Debug_Output (\"Adding source dir=\", Name_Id (Path.Display_Name));\n \n-            String_Element_Table.Increment_Last (Data.Tree.String_Elements);\n+            String_Element_Table.Increment_Last (Shared.String_Elements);\n             Element :=\n               (Value         => Name_Id (Path.Name),\n                Index         => 0,\n@@ -5092,52 +5107,50 @@ package body Prj.Nmsc is\n                Flag          => False,\n                Next          => Nil_String);\n \n-            Number_List_Table.Increment_Last (Data.Tree.Number_Lists);\n+            Number_List_Table.Increment_Last (Shared.Number_Lists);\n \n             if Last_Source_Dir = Nil_String then\n \n                --  This is the first source directory\n \n                Project.Source_Dirs :=\n-                 String_Element_Table.Last (Data.Tree.String_Elements);\n+                 String_Element_Table.Last (Shared.String_Elements);\n                Project.Source_Dir_Ranks :=\n-                 Number_List_Table.Last (Data.Tree.Number_Lists);\n+                 Number_List_Table.Last (Shared.Number_Lists);\n \n             else\n                --  We already have source directories, link the previous\n                --  last to the new one.\n \n-               Data.Tree.String_Elements.Table (Last_Source_Dir).Next :=\n-                 String_Element_Table.Last (Data.Tree.String_Elements);\n-               Data.Tree.Number_Lists.Table (Last_Src_Dir_Rank).Next :=\n-                 Number_List_Table.Last (Data.Tree.Number_Lists);\n+               Shared.String_Elements.Table (Last_Source_Dir).Next :=\n+                 String_Element_Table.Last (Shared.String_Elements);\n+               Shared.Number_Lists.Table (Last_Src_Dir_Rank).Next :=\n+                 Number_List_Table.Last (Shared.Number_Lists);\n             end if;\n \n             --  And register this source directory as the new last\n \n             Last_Source_Dir :=\n-              String_Element_Table.Last (Data.Tree.String_Elements);\n-            Data.Tree.String_Elements.Table (Last_Source_Dir) := Element;\n-            Last_Src_Dir_Rank :=\n-              Number_List_Table.Last (Data.Tree.Number_Lists);\n-            Data.Tree.Number_Lists.Table (Last_Src_Dir_Rank) :=\n+              String_Element_Table.Last (Shared.String_Elements);\n+            Shared.String_Elements.Table (Last_Source_Dir) := Element;\n+            Last_Src_Dir_Rank := Number_List_Table.Last (Shared.Number_Lists);\n+            Shared.Number_Lists.Table (Last_Src_Dir_Rank) :=\n               (Number => Rank, Next => No_Number_List);\n \n          elsif Remove_Source_Dirs and then List /= Nil_String then\n \n             --  Remove source dir if present\n \n             if Prev = Nil_String then\n-               Project.Source_Dirs :=\n-                 Data.Tree.String_Elements.Table (List).Next;\n+               Project.Source_Dirs := Shared.String_Elements.Table (List).Next;\n                Project.Source_Dir_Ranks :=\n-                 Data.Tree.Number_Lists.Table (Rank_List).Next;\n+                 Shared.Number_Lists.Table (Rank_List).Next;\n \n             else\n-               Data.Tree.String_Elements.Table (Prev).Next :=\n-                 Data.Tree.String_Elements.Table (List).Next;\n-               Data.Tree.Number_Lists.Table (Prev_Rank).Next :=\n-                 Data.Tree.Number_Lists.Table (Rank_List).Next;\n+               Shared.String_Elements.Table (Prev).Next :=\n+                 Shared.String_Elements.Table (List).Next;\n+               Shared.Number_Lists.Table (Prev_Rank).Next :=\n+                 Shared.Number_Lists.Table (Rank_List).Next;\n             end if;\n          end if;\n       end Add_To_Or_Remove_From_Source_Dirs;\n@@ -5357,11 +5370,11 @@ package body Prj.Nmsc is\n \n       begin\n          while Current /= Nil_String loop\n-            Element := Data.Tree.String_Elements.Table (Current);\n+            Element := Shared.String_Elements.Table (Current);\n             if Element.Value /= No_Name then\n                Element.Value :=\n                  Name_Id (Canonical_Case_File_Name (Element.Value));\n-               Data.Tree.String_Elements.Table (Current) := Element;\n+               Shared.String_Elements.Table (Current) := Element;\n             end if;\n \n             Current := Element.Next;\n@@ -5377,9 +5390,11 @@ package body Prj.Nmsc is\n      (Project : Project_Id;\n       Data    : in out Tree_Processing_Data)\n    is\n+      Shared : constant Shared_Project_Tree_Data_Access := Data.Tree.Shared;\n+\n       Mains : constant Variable_Value :=\n                Prj.Util.Value_Of\n-                 (Name_Main, Project.Decl.Attributes, Data.Tree);\n+                 (Name_Main, Project.Decl.Attributes, Shared);\n       List  : String_List_Id;\n       Elem  : String_Element;\n \n@@ -5405,7 +5420,7 @@ package body Prj.Nmsc is\n       else\n          List := Mains.Values;\n          while List /= Nil_String loop\n-            Elem := Data.Tree.String_Elements.Table (List);\n+            Elem := Shared.String_Elements.Table (List);\n \n             if Length_Of_Name (Elem.Value) = 0 then\n                Error_Msg\n@@ -5972,15 +5987,17 @@ package body Prj.Nmsc is\n      (Project : in out Project_Processing_Data;\n       Data    : in out Tree_Processing_Data)\n    is\n+      Shared : constant Shared_Project_Tree_Data_Access := Data.Tree.Shared;\n+\n       Excluded_Source_List_File : constant Variable_Value :=\n                                     Util.Value_Of\n                                       (Name_Excluded_Source_List_File,\n                                        Project.Project.Decl.Attributes,\n-                                       Data.Tree);\n+                                       Shared);\n       Excluded_Sources          : Variable_Value := Util.Value_Of\n                                     (Name_Excluded_Source_Files,\n                                      Project.Project.Decl.Attributes,\n-                                     Data.Tree);\n+                                     Shared);\n \n       Current         : String_List_Id;\n       Element         : String_Element;\n@@ -5999,7 +6016,7 @@ package body Prj.Nmsc is\n          Excluded_Sources :=\n            Util.Value_Of\n              (Name_Locally_Removed_Files,\n-              Project.Project.Decl.Attributes, Data.Tree);\n+              Project.Project.Decl.Attributes, Shared);\n       end if;\n \n       --  If there are excluded sources, put them in the table\n@@ -6023,7 +6040,7 @@ package body Prj.Nmsc is\n \n          Current := Excluded_Sources.Values;\n          while Current /= Nil_String loop\n-            Element := Data.Tree.String_Elements.Table (Current);\n+            Element := Shared.String_Elements.Table (Current);\n             Name := Canonical_Case_File_Name (Element.Value);\n \n             --  If the element has no location, then use the location of\n@@ -6129,17 +6146,19 @@ package body Prj.Nmsc is\n      (Project : in out Project_Processing_Data;\n       Data    : in out Tree_Processing_Data)\n    is\n+      Shared : constant Shared_Project_Tree_Data_Access := Data.Tree.Shared;\n+\n       Sources : constant Variable_Value :=\n                   Util.Value_Of\n                     (Name_Source_Files,\n                      Project.Project.Decl.Attributes,\n-                     Data.Tree);\n+                     Shared);\n \n       Source_List_File : constant Variable_Value :=\n                            Util.Value_Of\n                              (Name_Source_List_File,\n                               Project.Project.Decl.Attributes,\n-                              Data.Tree);\n+                              Shared);\n \n       Name_Loc             : Name_Location;\n       Has_Explicit_Sources : Boolean;\n@@ -6188,7 +6207,7 @@ package body Prj.Nmsc is\n             end if;\n \n             while Current /= Nil_String loop\n-               Element := Data.Tree.String_Elements.Table (Current);\n+               Element := Shared.String_Elements.Table (Current);\n                Name := Canonical_Case_File_Name (Element.Value);\n                Get_Name_String (Element.Value);\n \n@@ -6810,6 +6829,8 @@ package body Prj.Nmsc is\n       Search_For    : Search_Type;\n       Resolve_Links : Boolean)\n    is\n+      Shared : constant Shared_Project_Tree_Data_Access := Data.Tree.Shared;\n+\n       package Recursive_Dirs is new GNAT.Dynamic_HTables.Simple_HTable\n         (Header_Num => Header_Num,\n          Element    => Boolean,\n@@ -6950,13 +6971,12 @@ package body Prj.Nmsc is\n \n                            while List /= Nil_String loop\n                               Get_Name_String\n-                                (Data.Tree.String_Elements.Table (List).Value);\n+                                (Shared.String_Elements.Table (List).Value);\n                               Canonical_Case_File_Name\n                                 (Name_Buffer (1 .. Name_Len));\n                               OK := Name_Buffer (1 .. Name_Len) /= Dir_Name;\n                               exit when not OK;\n-                              List :=\n-                                Data.Tree.String_Elements.Table (List).Next;\n+                              List := Shared.String_Elements.Table (List).Next;\n                            end loop;\n                         end;\n                      end if;\n@@ -7116,7 +7136,7 @@ package body Prj.Nmsc is\n \n    begin\n       while Pattern_Id /= Nil_String loop\n-         Element := Data.Tree.String_Elements.Table (Pattern_Id);\n+         Element := Shared.String_Elements.Table (Pattern_Id);\n          Find_Pattern (Element.Value, Rank, Element.Location);\n          Rank := Rank + 1;\n          Pattern_Id := Element.Next;\n@@ -7134,6 +7154,8 @@ package body Prj.Nmsc is\n       Data            : in out Tree_Processing_Data;\n       For_All_Sources : Boolean)\n    is\n+      Shared : constant Shared_Project_Tree_Data_Access := Data.Tree.Shared;\n+\n       Source_Dir        : String_List_Id;\n       Element           : String_Element;\n       Src_Dir_Rank      : Number_List_Index;\n@@ -7153,8 +7175,8 @@ package body Prj.Nmsc is\n       Src_Dir_Rank := Project.Project.Source_Dir_Ranks;\n       while Source_Dir /= Nil_String loop\n          begin\n-            Num_Nod := Data.Tree.Number_Lists.Table (Src_Dir_Rank);\n-            Element := Data.Tree.String_Elements.Table (Source_Dir);\n+            Num_Nod := Shared.Number_Lists.Table (Src_Dir_Rank);\n+            Element := Shared.String_Elements.Table (Source_Dir);\n \n             --  Use Element.Value in this test, not Display_Value, because we\n             --  want the symbolic links to be resolved when appropriate.\n@@ -7932,7 +7954,7 @@ package body Prj.Nmsc is\n \n    procedure Show_Source_Dirs\n      (Project : Project_Id;\n-      In_Tree : Project_Tree_Ref)\n+      Shared  : Shared_Project_Tree_Data_Access)\n    is\n       Current : String_List_Id;\n       Element : String_Element;\n@@ -7945,7 +7967,7 @@ package body Prj.Nmsc is\n \n          Current := Project.Source_Dirs;\n          while Current /= Nil_String loop\n-            Element := In_Tree.String_Elements.Table (Current);\n+            Element := Shared.String_Elements.Table (Current);\n             Debug_Output (Get_Name_String (Element.Display_Value));\n             Current := Element.Next;\n          end loop;\n@@ -7965,26 +7987,31 @@ package body Prj.Nmsc is\n       Flags        : Processing_Flags)\n    is\n       procedure Recursive_Check\n-        (Project : Project_Id;\n-         Data    : in out Tree_Processing_Data);\n+        (Project  : Project_Id;\n+         Prj_Tree : Project_Tree_Ref;\n+         Data     : in out Tree_Processing_Data);\n       --  Check_Naming_Scheme for the project\n \n       ---------------------\n       -- Recursive_Check --\n       ---------------------\n \n       procedure Recursive_Check\n-        (Project : Project_Id;\n-         Data    : in out Tree_Processing_Data)\n-      is\n+        (Project  : Project_Id;\n+         Prj_Tree : Project_Tree_Ref;\n+         Data     : in out Tree_Processing_Data) is\n       begin\n-         if Verbose_Mode then\n-            Write_Str (\"Processing_Naming_Scheme for project \"\"\");\n-            Write_Str (Get_Name_String (Project.Name));\n-            Write_Line (\"\"\"\");\n+         if Current_Verbosity = High then\n+            Debug_Increase_Indent\n+              (\"Processing_Naming_Scheme for project\", Project.Name);\n          end if;\n \n+         Data.Tree := Prj_Tree;\n          Prj.Nmsc.Check (Project, Data);\n+\n+         if Current_Verbosity = High then\n+            Debug_Decrease_Indent (\"Done Processing_Naming_Scheme\");\n+         end if;\n       end Recursive_Check;\n \n       procedure Check_All_Projects is new\n@@ -7996,7 +8023,7 @@ package body Prj.Nmsc is\n    begin\n       Lib_Data_Table.Init;\n       Initialize (Data, Tree => Tree, Node_Tree => Node_Tree, Flags => Flags);\n-      Check_All_Projects (Root_Project, Data, Imported_First => True);\n+      Check_All_Projects (Root_Project, Tree, Data, Imported_First => True);\n       Free (Data);\n \n       --  Adjust language configs for projects that are extended"}, {"sha": "15491996cad31ff2f05d3033b1a4a46d6e8d891c", "filename": "gcc/ada/prj-proc.adb", "status": "modified", "additions": 294, "deletions": 290, "changes": 584, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/40ecf2f5d19ba2b046c65168aa8acc80ad399a08/gcc%2Fada%2Fprj-proc.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/40ecf2f5d19ba2b046c65168aa8acc80ad399a08/gcc%2Fada%2Fprj-proc.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fprj-proc.adb?ref=40ecf2f5d19ba2b046c65168aa8acc80ad399a08", "patch": "@@ -71,7 +71,7 @@ package body Prj.Proc is\n      (Project       : Project_Id;\n       Project_Name  : Name_Id;\n       Project_Dir   : Name_Id;\n-      In_Tree       : Project_Tree_Ref;\n+      Shared        : Shared_Project_Tree_Data_Access;\n       Decl          : in out Declarations;\n       First         : Attribute_Node_Id;\n       Project_Level : Boolean);\n@@ -95,15 +95,15 @@ package body Prj.Proc is\n       To         : in out Declarations;\n       New_Loc    : Source_Ptr;\n       Restricted : Boolean;\n-      In_Tree    : Project_Tree_Ref);\n+      Shared     : Shared_Project_Tree_Data_Access);\n    --  Copy a package declaration From to To for a renamed package. Change the\n    --  locations of all the attributes to New_Loc. When Restricted is\n    --  True, do not copy attributes Body, Spec, Implementation, Specification\n    --  and Linker_Options.\n \n    function Expression\n      (Project                : Project_Id;\n-      In_Tree                : Project_Tree_Ref;\n+      Shared                 : Shared_Project_Tree_Data_Access;\n       From_Project_Node      : Project_Node_Id;\n       From_Project_Node_Tree : Project_Node_Tree_Ref;\n       Env                    : Prj.Tree.Environment;\n@@ -120,50 +120,40 @@ package body Prj.Proc is\n \n    function Package_From\n      (Project   : Project_Id;\n-      In_Tree   : Project_Tree_Ref;\n+      Shared    : Shared_Project_Tree_Data_Access;\n       With_Name : Name_Id) return Package_Id;\n    --  Find the package of Project whose name is With_Name\n \n    procedure Process_Declarative_Items\n-     (Project              : Project_Id;\n-      In_Tree              : Project_Tree_Ref;\n-      From_Project_Node    : Project_Node_Id;\n-      Node_Tree            : Project_Node_Tree_Ref;\n-      Env                  : Prj.Tree.Environment;\n-      Pkg                  : Package_Id;\n-      Item                 : Project_Node_Id;\n-      Child_Env            : in out Prj.Tree.Environment;\n-      Can_Modify_Child_Env : Boolean);\n+     (Project           : Project_Id;\n+      In_Tree           : Project_Tree_Ref;\n+      From_Project_Node : Project_Node_Id;\n+      Node_Tree         : Project_Node_Tree_Ref;\n+      Env               : Prj.Tree.Environment;\n+      Pkg               : Package_Id;\n+      Item              : Project_Node_Id;\n+      Child_Env         : in out Prj.Tree.Environment);\n    --  Process declarative items starting with From_Project_Node, and put them\n    --  in declarations Decl. This is a recursive procedure; it calls itself for\n    --  a package declaration or a case construction.\n    --\n    --  Child_Env is the modified environment after seeing declarations like\n    --  \"for External(...) use\" or \"for Project_Path use\" in aggregate projects.\n-   --  It should have been initialized first. This environment can only be\n-   --  modified if Can_Modify_Child_Env is True, otherwise all the above\n-   --  attributes simply have no effect.\n+   --  It should have been initialized first.\n \n    procedure Recursive_Process\n      (In_Tree                : Project_Tree_Ref;\n       Project                : out Project_Id;\n       From_Project_Node      : Project_Node_Id;\n       From_Project_Node_Tree : Project_Node_Tree_Ref;\n       Env                    : in out Prj.Tree.Environment;\n-      Extended_By            : Project_Id;\n-      Child_Env              : in out Prj.Tree.Environment;\n-      Is_Root_Project        : Boolean);\n+      Extended_By            : Project_Id);\n    --  Process project with node From_Project_Node in the tree. Do nothing if\n    --  From_Project_Node is Empty_Node. If project has already been processed,\n    --  simply return its project id. Otherwise create a new project id, mark it\n    --  as processed, call itself recursively for all imported projects and a\n    --  extended project, if any. Then process the declarative items of the\n    --  project.\n-   --\n-   --  Child_Env is the environment created from an aggregate project (new\n-   --  external values or project path), and should be initialized before the\n-   --  call.\n-   --\n    --  Is_Root_Project should be true only for the project that the user\n    --  explicitly loaded. In the context of aggregate projects, only that\n    --  project is allowed to modify the environment that will be used to load\n@@ -209,7 +199,7 @@ package body Prj.Proc is\n      (Project       : Project_Id;\n       Project_Name  : Name_Id;\n       Project_Dir   : Name_Id;\n-      In_Tree       : Project_Tree_Ref;\n+      Shared        : Shared_Project_Tree_Data_Access;\n       Decl          : in out Declarations;\n       First         : Attribute_Node_Id;\n       Project_Level : Boolean)\n@@ -272,15 +262,14 @@ package body Prj.Proc is\n                end case;\n \n                Variable_Element_Table.Increment_Last\n-                 (In_Tree.Variable_Elements);\n-               In_Tree.Variable_Elements.Table\n-                 (Variable_Element_Table.Last\n-                   (In_Tree.Variable_Elements)) :=\n+                 (Shared.Variable_Elements);\n+               Shared.Variable_Elements.Table\n+                 (Variable_Element_Table.Last (Shared.Variable_Elements)) :=\n                  (Next  => Decl.Attributes,\n                   Name  => Attribute_Name_Of (The_Attribute),\n                   Value => New_Attribute);\n                Decl.Attributes := Variable_Element_Table.Last\n-                 (In_Tree.Variable_Elements);\n+                 (Shared.Variable_Elements);\n             end;\n          end if;\n \n@@ -342,7 +331,7 @@ package body Prj.Proc is\n       To         : in out Declarations;\n       New_Loc    : Source_Ptr;\n       Restricted : Boolean;\n-      In_Tree    : Project_Tree_Ref)\n+      Shared     : Shared_Project_Tree_Data_Access)\n    is\n       V1  : Variable_Id;\n       V2  : Variable_Id      := No_Variable;\n@@ -367,7 +356,7 @@ package body Prj.Proc is\n \n          --  Copy the attribute\n \n-         Var := In_Tree.Variable_Elements.Table (V1);\n+         Var := Shared.Variable_Elements.Table (V1);\n          V1  := Var.Next;\n \n          --  Do not copy the value of attribute Linker_Options if Restricted\n@@ -383,27 +372,27 @@ package body Prj.Proc is\n          --  Change the location to New_Loc\n \n          Var.Value.Location := New_Loc;\n-         Variable_Element_Table.Increment_Last (In_Tree.Variable_Elements);\n+         Variable_Element_Table.Increment_Last (Shared.Variable_Elements);\n \n          --  Put in new declaration\n \n          if To.Attributes = No_Variable then\n             To.Attributes :=\n-              Variable_Element_Table.Last (In_Tree.Variable_Elements);\n+              Variable_Element_Table.Last (Shared.Variable_Elements);\n          else\n-            In_Tree.Variable_Elements.Table (V2).Next :=\n-              Variable_Element_Table.Last (In_Tree.Variable_Elements);\n+            Shared.Variable_Elements.Table (V2).Next :=\n+              Variable_Element_Table.Last (Shared.Variable_Elements);\n          end if;\n \n-         V2 := Variable_Element_Table.Last (In_Tree.Variable_Elements);\n-         In_Tree.Variable_Elements.Table (V2) := Var;\n+         V2 := Variable_Element_Table.Last (Shared.Variable_Elements);\n+         Shared.Variable_Elements.Table (V2) := Var;\n       end loop;\n \n       --  Then the associated array attributes\n \n       A1 := From.Arrays;\n       while A1 /= No_Array loop\n-         Arr := In_Tree.Arrays.Table (A1);\n+         Arr := Shared.Arrays.Table (A1);\n          A1  := Arr.Next;\n \n          if not Restricted\n@@ -416,18 +405,18 @@ package body Prj.Proc is\n             --  Remove the Next component\n \n             Arr.Next := No_Array;\n-            Array_Table.Increment_Last (In_Tree.Arrays);\n+            Array_Table.Increment_Last (Shared.Arrays);\n \n             --  Create new Array declaration\n \n             if To.Arrays = No_Array then\n-               To.Arrays := Array_Table.Last (In_Tree.Arrays);\n+               To.Arrays := Array_Table.Last (Shared.Arrays);\n             else\n-               In_Tree.Arrays.Table (A2).Next :=\n-                 Array_Table.Last (In_Tree.Arrays);\n+               Shared.Arrays.Table (A2).Next :=\n+                 Array_Table.Last (Shared.Arrays);\n             end if;\n \n-            A2 := Array_Table.Last (In_Tree.Arrays);\n+            A2 := Array_Table.Last (Shared.Arrays);\n \n             --  Don't store the array as its first element has not been set yet\n \n@@ -439,7 +428,7 @@ package body Prj.Proc is\n \n                --  Copy the array element\n \n-               Elm := In_Tree.Array_Elements.Table (E1);\n+               Elm := Shared.Array_Elements.Table (E1);\n                E1 := Elm.Next;\n \n                --  Remove the Next component\n@@ -449,25 +438,25 @@ package body Prj.Proc is\n                --  Change the location\n \n                Elm.Value.Location := New_Loc;\n-               Array_Element_Table.Increment_Last (In_Tree.Array_Elements);\n+               Array_Element_Table.Increment_Last (Shared.Array_Elements);\n \n                --  Create new array element\n \n                if Arr.Value = No_Array_Element then\n                   Arr.Value :=\n-                    Array_Element_Table.Last (In_Tree.Array_Elements);\n+                    Array_Element_Table.Last (Shared.Array_Elements);\n                else\n-                  In_Tree.Array_Elements.Table (E2).Next :=\n-                    Array_Element_Table.Last (In_Tree.Array_Elements);\n+                  Shared.Array_Elements.Table (E2).Next :=\n+                    Array_Element_Table.Last (Shared.Array_Elements);\n                end if;\n \n-               E2 := Array_Element_Table.Last (In_Tree.Array_Elements);\n-               In_Tree.Array_Elements.Table (E2) := Elm;\n+               E2 := Array_Element_Table.Last (Shared.Array_Elements);\n+               Shared.Array_Elements.Table (E2) := Elm;\n             end loop;\n \n             --  Finally, store the new array\n \n-            In_Tree.Arrays.Table (A2) := Arr;\n+            Shared.Arrays.Table (A2) := Arr;\n          end if;\n       end loop;\n    end Copy_Package_Declarations;\n@@ -499,7 +488,7 @@ package body Prj.Proc is\n \n    function Expression\n      (Project                : Project_Id;\n-      In_Tree                : Project_Tree_Ref;\n+      Shared                 : Shared_Project_Tree_Data_Access;\n       From_Project_Node      : Project_Node_Id;\n       From_Project_Node_Tree : Project_Node_Tree_Ref;\n       Env                    : Prj.Tree.Environment;\n@@ -553,25 +542,25 @@ package body Prj.Proc is\n                   when List =>\n \n                      String_Element_Table.Increment_Last\n-                       (In_Tree.String_Elements);\n+                       (Shared.String_Elements);\n \n                      if Last = Nil_String then\n \n                         --  This can happen in an expression like () & \"toto\"\n \n                         Result.Values := String_Element_Table.Last\n-                          (In_Tree.String_Elements);\n+                          (Shared.String_Elements);\n \n                      else\n-                        In_Tree.String_Elements.Table\n+                        Shared.String_Elements.Table\n                           (Last).Next := String_Element_Table.Last\n-                                       (In_Tree.String_Elements);\n+                                       (Shared.String_Elements);\n                      end if;\n \n                      Last := String_Element_Table.Last\n-                               (In_Tree.String_Elements);\n+                               (Shared.String_Elements);\n \n-                     In_Tree.String_Elements.Table (Last) :=\n+                     Shared.String_Elements.Table (Last) :=\n                        (Value         => String_Value_Of\n                                            (The_Current_Term,\n                                             From_Project_Node_Tree),\n@@ -604,7 +593,7 @@ package body Prj.Proc is\n \n                      Value := Expression\n                        (Project                => Project,\n-                        In_Tree                => In_Tree,\n+                        Shared                 => Shared,\n                         From_Project_Node      => From_Project_Node,\n                         From_Project_Node_Tree => From_Project_Node_Tree,\n                         Env                    => Env,\n@@ -614,26 +603,25 @@ package body Prj.Proc is\n                             (String_Node, From_Project_Node_Tree),\n                         Kind                   => Single);\n                      String_Element_Table.Increment_Last\n-                       (In_Tree.String_Elements);\n+                       (Shared.String_Elements);\n \n                      if Result.Values = Nil_String then\n \n                         --  This literal string list is the first term in a\n                         --  string list expression\n \n-                        Result.Values :=\n-                          String_Element_Table.Last (In_Tree.String_Elements);\n+                        Result.Values := String_Element_Table.Last\n+                          (Shared.String_Elements);\n \n                      else\n-                        In_Tree.String_Elements.Table\n-                          (Last).Next :=\n-                          String_Element_Table.Last (In_Tree.String_Elements);\n+                        Shared.String_Elements.Table (Last).Next :=\n+                          String_Element_Table.Last (Shared.String_Elements);\n                      end if;\n \n-                     Last :=\n-                       String_Element_Table.Last (In_Tree.String_Elements);\n+                     Last := String_Element_Table.Last\n+                       (Shared.String_Elements);\n \n-                     In_Tree.String_Elements.Table (Last) :=\n+                     Shared.String_Elements.Table (Last) :=\n                        (Value    => Value.Value,\n                         Display_Value => No_Name,\n                         Location => Value.Location,\n@@ -654,7 +642,7 @@ package body Prj.Proc is\n                         Value :=\n                           Expression\n                             (Project                => Project,\n-                             In_Tree                => In_Tree,\n+                             Shared                 => Shared,\n                              From_Project_Node      => From_Project_Node,\n                              From_Project_Node_Tree => From_Project_Node_Tree,\n                              Env                    => Env,\n@@ -665,12 +653,12 @@ package body Prj.Proc is\n                              Kind                   => Single);\n \n                         String_Element_Table.Increment_Last\n-                          (In_Tree.String_Elements);\n-                        In_Tree.String_Elements.Table (Last).Next :=\n-                          String_Element_Table.Last (In_Tree.String_Elements);\n-                        Last :=\n-                          String_Element_Table.Last (In_Tree.String_Elements);\n-                        In_Tree.String_Elements.Table (Last) :=\n+                          (Shared.String_Elements);\n+                        Shared.String_Elements.Table (Last).Next :=\n+                          String_Element_Table.Last (Shared.String_Elements);\n+                        Last := String_Element_Table.Last\n+                          (Shared.String_Elements);\n+                        Shared.String_Elements.Table (Last) :=\n                           (Value    => Value.Value,\n                            Display_Value => No_Name,\n                            Location => Value.Location,\n@@ -721,11 +709,11 @@ package body Prj.Proc is\n                      The_Package := The_Project.Decl.Packages;\n \n                      while The_Package /= No_Package\n-                       and then In_Tree.Packages.Table\n-                                  (The_Package).Name /= The_Name\n+                       and then Shared.Packages.Table (The_Package).Name /=\n+                          The_Name\n                      loop\n                         The_Package :=\n-                          In_Tree.Packages.Table (The_Package).Next;\n+                          Shared.Packages.Table (The_Package).Next;\n                      end loop;\n \n                      pragma Assert\n@@ -762,22 +750,20 @@ package body Prj.Proc is\n                                                         N_Variable_Reference\n                         then\n                            The_Variable_Id :=\n-                             In_Tree.Packages.Table\n+                             Shared.Packages.Table\n                                (The_Package).Decl.Variables;\n                         else\n                            The_Variable_Id :=\n-                             In_Tree.Packages.Table\n+                             Shared.Packages.Table\n                                (The_Package).Decl.Attributes;\n                         end if;\n \n                         while The_Variable_Id /= No_Variable\n-                          and then\n-                            In_Tree.Variable_Elements.Table\n-                              (The_Variable_Id).Name /= The_Name\n+                          and then Shared.Variable_Elements.Table\n+                            (The_Variable_Id).Name /= The_Name\n                         loop\n-                           The_Variable_Id :=\n-                             In_Tree.Variable_Elements.Table\n-                               (The_Variable_Id).Next;\n+                           The_Variable_Id := Shared.Variable_Elements.Table\n+                             (The_Variable_Id).Next;\n                         end loop;\n \n                      end if;\n@@ -795,12 +781,11 @@ package body Prj.Proc is\n                         end if;\n \n                         while The_Variable_Id /= No_Variable\n-                          and then\n-                          In_Tree.Variable_Elements.Table\n+                          and then Shared.Variable_Elements.Table\n                             (The_Variable_Id).Name /= The_Name\n                         loop\n                            The_Variable_Id :=\n-                             In_Tree.Variable_Elements.Table\n+                             Shared.Variable_Elements.Table\n                                (The_Variable_Id).Next;\n                         end loop;\n \n@@ -810,8 +795,7 @@ package body Prj.Proc is\n                                       \"variable or attribute not found\");\n \n                      The_Variable :=\n-                       In_Tree.Variable_Elements.Table\n-                                                    (The_Variable_Id).Value;\n+                       Shared.Variable_Elements.Table (The_Variable_Id).Value;\n \n                   else\n \n@@ -824,42 +808,42 @@ package body Prj.Proc is\n \n                      begin\n                         if The_Package /= No_Package then\n-                           The_Array :=\n-                             In_Tree.Packages.Table (The_Package).Decl.Arrays;\n+                           The_Array := Shared.Packages.Table\n+                             (The_Package).Decl.Arrays;\n                         else\n                            The_Array := The_Project.Decl.Arrays;\n                         end if;\n \n                         while The_Array /= No_Array\n-                          and then In_Tree.Arrays.Table\n-                                     (The_Array).Name /= The_Name\n+                          and then Shared.Arrays.Table (The_Array).Name /=\n+                          The_Name\n                         loop\n-                           The_Array := In_Tree.Arrays.Table (The_Array).Next;\n+                           The_Array := Shared.Arrays.Table (The_Array).Next;\n                         end loop;\n \n                         if The_Array /= No_Array then\n                            The_Element :=\n-                             In_Tree.Arrays.Table (The_Array).Value;\n+                             Shared.Arrays.Table (The_Array).Value;\n                            Array_Index :=\n                              Get_Attribute_Index\n                                (From_Project_Node_Tree,\n                                 The_Current_Term,\n                                 Index);\n \n                            while The_Element /= No_Array_Element\n-                             and then In_Tree.Array_Elements.Table\n+                             and then Shared.Array_Elements.Table\n                                         (The_Element).Index /= Array_Index\n                            loop\n                               The_Element :=\n-                                In_Tree.Array_Elements.Table\n+                                Shared.Array_Elements.Table\n                                   (The_Element).Next;\n                            end loop;\n \n                         end if;\n \n                         if The_Element /= No_Array_Element then\n-                           The_Variable :=\n-                             In_Tree.Array_Elements.Table (The_Element).Value;\n+                           The_Variable := Shared.Array_Elements.Table\n+                             (The_Element).Value;\n \n                         else\n                            if Expression_Kind_Of\n@@ -923,7 +907,7 @@ package body Prj.Proc is\n \n                            when Single =>\n                               String_Element_Table.Increment_Last\n-                                (In_Tree.String_Elements);\n+                                (Shared.String_Elements);\n \n                               if Last = Nil_String then\n \n@@ -932,20 +916,19 @@ package body Prj.Proc is\n \n                                  Result.Values :=\n                                    String_Element_Table.Last\n-                                     (In_Tree.String_Elements);\n+                                     (Shared.String_Elements);\n \n                               else\n-                                 In_Tree.String_Elements.Table\n-                                   (Last).Next :=\n+                                 Shared.String_Elements.Table (Last).Next :=\n                                      String_Element_Table.Last\n-                                       (In_Tree.String_Elements);\n+                                       (Shared.String_Elements);\n                               end if;\n \n                               Last :=\n                                 String_Element_Table.Last\n-                                  (In_Tree.String_Elements);\n+                                  (Shared.String_Elements);\n \n-                              In_Tree.String_Elements.Table (Last) :=\n+                              Shared.String_Elements.Table (Last) :=\n                                 (Value         => The_Variable.Value,\n                                  Display_Value => No_Name,\n                                  Location      => Location_Of\n@@ -964,30 +947,29 @@ package body Prj.Proc is\n                               begin\n                                  while The_List /= Nil_String loop\n                                     String_Element_Table.Increment_Last\n-                                      (In_Tree.String_Elements);\n+                                      (Shared.String_Elements);\n \n                                     if Last = Nil_String then\n                                        Result.Values :=\n                                          String_Element_Table.Last\n-                                           (In_Tree.\n-                                                String_Elements);\n+                                           (Shared.String_Elements);\n \n                                     else\n-                                       In_Tree.\n+                                       Shared.\n                                          String_Elements.Table (Last).Next :=\n                                          String_Element_Table.Last\n-                                           (In_Tree.\n-                                                String_Elements);\n+                                           (Shared.String_Elements);\n \n                                     end if;\n \n                                     Last :=\n                                       String_Element_Table.Last\n-                                        (In_Tree.String_Elements);\n+                                        (Shared.String_Elements);\n \n-                                    In_Tree.String_Elements.Table (Last) :=\n+                                    Shared.String_Elements.Table\n+                                      (Last) :=\n                                       (Value         =>\n-                                         In_Tree.String_Elements.Table\n+                                         Shared.String_Elements.Table\n                                            (The_List).Value,\n                                        Display_Value => No_Name,\n                                        Location      =>\n@@ -998,8 +980,7 @@ package body Prj.Proc is\n                                        Next         => Nil_String,\n                                        Index        => 0);\n \n-                                    The_List :=\n-                                      In_Tree. String_Elements.Table\n+                                    The_List := Shared.String_Elements.Table\n                                         (The_List).Next;\n                                  end loop;\n                               end;\n@@ -1034,7 +1015,7 @@ package body Prj.Proc is\n                   if Present (Default_Node) then\n                      Def_Var := Expression\n                        (Project                => Project,\n-                        In_Tree                => In_Tree,\n+                        Shared                 => Shared,\n                         From_Project_Node      => From_Project_Node,\n                         From_Project_Node_Tree => From_Project_Node_Tree,\n                         Env                    => Env,\n@@ -1189,29 +1170,28 @@ package body Prj.Proc is\n                      when List =>\n                         if not Ext_List or else Str_List /= null then\n                            String_Element_Table.Increment_Last\n-                             (In_Tree.String_Elements);\n+                             (Shared.String_Elements);\n \n                            if Last = Nil_String then\n                               Result.Values :=\n                                 String_Element_Table.Last\n-                                  (In_Tree.String_Elements);\n+                                  (Shared.String_Elements);\n \n                            else\n-                              In_Tree.String_Elements.Table (Last).Next :=\n-                                String_Element_Table.Last\n-                                  (In_Tree.String_Elements);\n+                              Shared.String_Elements.Table (Last).Next\n+                                := String_Element_Table.Last\n+                                  (Shared.String_Elements);\n                            end if;\n \n-                           Last :=\n-                             String_Element_Table.Last\n-                               (In_Tree.String_Elements);\n+                           Last := String_Element_Table.Last\n+                             (Shared.String_Elements);\n \n                            if Ext_List then\n                               for Ind in Str_List'Range loop\n                                  Name_Len := 0;\n                                  Add_Str_To_Name_Buffer (Str_List (Ind).all);\n                                  Value := Name_Find;\n-                                 In_Tree.String_Elements.Table (Last) :=\n+                                 Shared.String_Elements.Table (Last) :=\n                                    (Value         => Value,\n                                     Display_Value => No_Name,\n                                     Location      =>\n@@ -1224,19 +1204,17 @@ package body Prj.Proc is\n \n                                  if Ind /= Str_List'Last then\n                                     String_Element_Table.Increment_Last\n-                                      (In_Tree.String_Elements);\n-                                    In_Tree.String_Elements.Table\n-                                                              (Last).Next :=\n+                                      (Shared.String_Elements);\n+                                    Shared.String_Elements.Table (Last).Next :=\n                                         String_Element_Table.Last\n-                                          (In_Tree.String_Elements);\n-                                    Last :=\n-                                      String_Element_Table.Last\n-                                        (In_Tree.String_Elements);\n+                                          (Shared.String_Elements);\n+                                    Last := String_Element_Table.Last\n+                                        (Shared.String_Elements);\n                                  end if;\n                               end loop;\n \n                            else\n-                              In_Tree.String_Elements.Table (Last) :=\n+                              Shared.String_Elements.Table (Last) :=\n                                 (Value         => Value,\n                                  Display_Value => No_Name,\n                                  Location      =>\n@@ -1337,7 +1315,7 @@ package body Prj.Proc is\n \n    function Package_From\n      (Project   : Project_Id;\n-      In_Tree   : Project_Tree_Ref;\n+      Shared    : Shared_Project_Tree_Data_Access;\n       With_Name : Name_Id) return Package_Id\n    is\n       Result : Package_Id := Project.Decl.Packages;\n@@ -1346,9 +1324,9 @@ package body Prj.Proc is\n       --  Check the name of each existing package of Project\n \n       while Result /= No_Package\n-        and then In_Tree.Packages.Table (Result).Name /= With_Name\n+        and then Shared.Packages.Table (Result).Name /= With_Name\n       loop\n-         Result := In_Tree.Packages.Table (Result).Next;\n+         Result := Shared.Packages.Table (Result).Next;\n       end loop;\n \n       if Result = No_Package then\n@@ -1412,9 +1390,11 @@ package body Prj.Proc is\n       Env                    : Prj.Tree.Environment;\n       Pkg                    : Package_Id;\n       Item                   : Project_Node_Id;\n-      Child_Env              : in out Prj.Tree.Environment;\n-      Can_Modify_Child_Env   : Boolean)\n+      Child_Env              : in out Prj.Tree.Environment)\n    is\n+      Shared : constant Shared_Project_Tree_Data_Access :=\n+        In_Tree.Shared;\n+\n       procedure Check_Or_Set_Typed_Variable\n         (Value       : in out Variable_Value;\n          Declaration : Project_Node_Id);\n@@ -1532,11 +1512,11 @@ package body Prj.Proc is\n \n             --  Create the new package\n \n-            Package_Table.Increment_Last (In_Tree.Packages);\n+            Package_Table.Increment_Last (Shared.Packages);\n \n             declare\n                New_Pkg         : constant Package_Id :=\n-                                   Package_Table.Last (In_Tree.Packages);\n+                                  Package_Table.Last (Shared.Packages);\n                The_New_Package : Package_Element;\n \n                Project_Of_Renamed_Package : constant Project_Node_Id :=\n@@ -1552,15 +1532,15 @@ package body Prj.Proc is\n \n                if Pkg /= No_Package then\n                   The_New_Package.Next :=\n-                    In_Tree.Packages.Table (Pkg).Decl.Packages;\n-                  In_Tree.Packages.Table (Pkg).Decl.Packages := New_Pkg;\n+                    Shared.Packages.Table (Pkg).Decl.Packages;\n+                  Shared.Packages.Table (Pkg).Decl.Packages := New_Pkg;\n \n                else\n                   The_New_Package.Next  := Project.Decl.Packages;\n                   Project.Decl.Packages := New_Pkg;\n                end if;\n \n-               In_Tree.Packages.Table (New_Pkg) := The_New_Package;\n+               Shared.Packages.Table (New_Pkg) := The_New_Package;\n \n                if Present (Project_Of_Renamed_Package) then\n \n@@ -1576,7 +1556,7 @@ package body Prj.Proc is\n \n                      Renamed_Package : constant Package_Id :=\n                        Package_From\n-                         (Renamed_Project, In_Tree,\n+                         (Renamed_Project, Shared,\n                           Name_Of (Current_Item, Node_Tree));\n \n                   begin\n@@ -1586,11 +1566,11 @@ package body Prj.Proc is\n                      --  declaration.\n \n                      Copy_Package_Declarations\n-                       (From => In_Tree.Packages.Table (Renamed_Package).Decl,\n-                        To   => In_Tree.Packages.Table (New_Pkg).Decl,\n+                       (From => Shared.Packages.Table (Renamed_Package).Decl,\n+                        To   => Shared.Packages.Table (New_Pkg).Decl,\n                         New_Loc    => Location_Of (Current_Item, Node_Tree),\n                         Restricted => False,\n-                        In_Tree    => In_Tree);\n+                        Shared     => Shared);\n                   end;\n \n                else\n@@ -1600,8 +1580,8 @@ package body Prj.Proc is\n                     (Project,\n                      Project.Name,\n                      Name_Id (Project.Directory.Name),\n-                     In_Tree,\n-                     In_Tree.Packages.Table (New_Pkg).Decl,\n+                     Shared,\n+                     Shared.Packages.Table (New_Pkg).Decl,\n                      First_Attribute_Of\n                        (Package_Id_Of (Current_Item, Node_Tree)),\n                      Project_Level => False);\n@@ -1619,8 +1599,7 @@ package body Prj.Proc is\n                   Pkg                    => New_Pkg,\n                   Item                   =>\n                     First_Declarative_Item_Of (Current_Item, Node_Tree),\n-                  Child_Env              => Child_Env,\n-                  Can_Modify_Child_Env   => Can_Modify_Child_Env);\n+                  Child_Env              => Child_Env);\n             end;\n          end if;\n       end Process_Package_Declaration;\n@@ -1683,35 +1662,35 @@ package body Prj.Proc is\n          --  declared.\n \n          if Pkg /= No_Package then\n-            New_Array := In_Tree.Packages.Table (Pkg).Decl.Arrays;\n+            New_Array := Shared.Packages.Table (Pkg).Decl.Arrays;\n          else\n             New_Array := Project.Decl.Arrays;\n          end if;\n \n          while New_Array /= No_Array\n-           and then In_Tree.Arrays.Table (New_Array).Name /= Current_Item_Name\n+           and then Shared.Arrays.Table (New_Array).Name /= Current_Item_Name\n          loop\n-            New_Array := In_Tree.Arrays.Table (New_Array).Next;\n+            New_Array := Shared.Arrays.Table (New_Array).Next;\n          end loop;\n \n          --  If the attribute has never been declared add new entry in the\n          --  arrays of the project/package and link it.\n \n          if New_Array = No_Array then\n-            Array_Table.Increment_Last (In_Tree.Arrays);\n-            New_Array := Array_Table.Last (In_Tree.Arrays);\n+            Array_Table.Increment_Last (Shared.Arrays);\n+            New_Array := Array_Table.Last (Shared.Arrays);\n \n             if Pkg /= No_Package then\n-               In_Tree.Arrays.Table (New_Array) :=\n+               Shared.Arrays.Table (New_Array) :=\n                  (Name     => Current_Item_Name,\n                   Location => Current_Location,\n                   Value    => No_Array_Element,\n-                  Next     => In_Tree.Packages.Table (Pkg).Decl.Arrays);\n+                  Next     => Shared.Packages.Table (Pkg).Decl.Arrays);\n \n-               In_Tree.Packages.Table (Pkg).Decl.Arrays := New_Array;\n+               Shared.Packages.Table (Pkg).Decl.Arrays := New_Array;\n \n             else\n-               In_Tree.Arrays.Table (New_Array) :=\n+               Shared.Arrays.Table (New_Array) :=\n                  (Name     => Current_Item_Name,\n                   Location => Current_Location,\n                   Value    => No_Array_Element,\n@@ -1753,23 +1732,23 @@ package body Prj.Proc is\n             pragma Assert (Orig_Package /= No_Package,\n                            \"original package not found\");\n \n-            while In_Tree.Packages.Table\n-                    (Orig_Package).Name /= Orig_Package_Name\n+            while Shared.Packages.Table\n+              (Orig_Package).Name /= Orig_Package_Name\n             loop\n-               Orig_Package := In_Tree.Packages.Table (Orig_Package).Next;\n+               Orig_Package := Shared.Packages.Table (Orig_Package).Next;\n                pragma Assert (Orig_Package /= No_Package,\n                               \"original package not found\");\n             end loop;\n \n-            Orig_Array := In_Tree.Packages.Table (Orig_Package).Decl.Arrays;\n+            Orig_Array := Shared.Packages.Table (Orig_Package).Decl.Arrays;\n          end if;\n \n          --  Now look for the array\n \n          while Orig_Array /= No_Array\n-           and then In_Tree.Arrays.Table (Orig_Array).Name /= Current_Item_Name\n+           and then Shared.Arrays.Table (Orig_Array).Name /= Current_Item_Name\n          loop\n-            Orig_Array := In_Tree.Arrays.Table (Orig_Array).Next;\n+            Orig_Array := Shared.Arrays.Table (Orig_Array).Next;\n          end loop;\n \n          if Orig_Array = No_Array then\n@@ -1780,7 +1759,7 @@ package body Prj.Proc is\n                Project);\n \n          else\n-            Orig_Element := In_Tree.Arrays.Table (Orig_Array).Value;\n+            Orig_Element := Shared.Arrays.Table (Orig_Array).Value;\n \n             --  Copy each array element\n \n@@ -1793,72 +1772,70 @@ package body Prj.Proc is\n                   --  And there is no array element declared yet, create a new\n                   --  first array element.\n \n-                  if In_Tree.Arrays.Table (New_Array).Value =\n+                  if Shared.Arrays.Table (New_Array).Value =\n                     No_Array_Element\n                   then\n                      Array_Element_Table.Increment_Last\n-                       (In_Tree.Array_Elements);\n+                       (Shared.Array_Elements);\n                      New_Element := Array_Element_Table.Last\n-                       (In_Tree.Array_Elements);\n-                     In_Tree.Arrays.Table (New_Array).Value := New_Element;\n+                       (Shared.Array_Elements);\n+                     Shared.Arrays.Table (New_Array).Value := New_Element;\n                      Next_Element := No_Array_Element;\n \n                      --  Otherwise, the new element is the first\n \n                   else\n-                     New_Element := In_Tree.Arrays. Table (New_Array).Value;\n+                     New_Element := Shared.Arrays.Table (New_Array).Value;\n                      Next_Element :=\n-                       In_Tree.Array_Elements.Table (New_Element).Next;\n+                       Shared.Array_Elements.Table (New_Element).Next;\n                   end if;\n \n                   --  Otherwise, reuse an existing element, or create\n                   --  one if necessary.\n \n                else\n                   Next_Element :=\n-                    In_Tree.Array_Elements.Table (Prev_Element).Next;\n+                    Shared.Array_Elements.Table (Prev_Element).Next;\n \n                   if Next_Element = No_Array_Element then\n                      Array_Element_Table.Increment_Last\n-                       (In_Tree.Array_Elements);\n-                     New_Element :=\n-                       Array_Element_Table.Last (In_Tree.Array_Elements);\n-                     In_Tree.Array_Elements.Table (Prev_Element).Next :=\n+                       (Shared.Array_Elements);\n+                     New_Element := Array_Element_Table.Last\n+                       (Shared.Array_Elements);\n+                     Shared.Array_Elements.Table (Prev_Element).Next :=\n                        New_Element;\n \n                   else\n                      New_Element := Next_Element;\n                      Next_Element :=\n-                       In_Tree.Array_Elements.Table (New_Element).Next;\n+                       Shared.Array_Elements.Table (New_Element).Next;\n                   end if;\n                end if;\n \n                --  Copy the value of the element\n \n-               In_Tree.Array_Elements.Table (New_Element) :=\n-                 In_Tree.Array_Elements.Table (Orig_Element);\n-               In_Tree.Array_Elements.Table (New_Element).Value.Project :=\n-                 Project;\n+               Shared.Array_Elements.Table (New_Element) :=\n+                 Shared.Array_Elements.Table (Orig_Element);\n+               Shared.Array_Elements.Table (New_Element).Value.Project\n+                 := Project;\n \n                --  Adjust the Next link\n \n-               In_Tree.Array_Elements.Table (New_Element).Next := Next_Element;\n+               Shared.Array_Elements.Table (New_Element).Next := Next_Element;\n \n                --  Adjust the previous id for the next element\n \n                Prev_Element := New_Element;\n \n                --  Go to the next element in the original array\n \n-               Orig_Element :=\n-                 In_Tree.Array_Elements.Table (Orig_Element).Next;\n+               Orig_Element := Shared.Array_Elements.Table (Orig_Element).Next;\n             end loop;\n \n             --  Make sure that the array ends here, in case there previously a\n             --  greater number of elements.\n \n-            In_Tree.Array_Elements.Table (New_Element).Next :=\n-              No_Array_Element;\n+            Shared.Array_Elements.Table (New_Element).Next := No_Array_Element;\n          end if;\n       end Process_Associative_Array;\n \n@@ -1891,36 +1868,36 @@ package body Prj.Proc is\n          --  Look for the array in the appropriate list\n \n          if Pkg /= No_Package then\n-            The_Array := In_Tree.Packages.Table (Pkg).Decl.Arrays;\n+            The_Array := Shared.Packages.Table (Pkg).Decl.Arrays;\n          else\n             The_Array := Project.Decl.Arrays;\n          end if;\n \n          while The_Array /= No_Array\n-           and then In_Tree.Arrays.Table (The_Array).Name /= Name\n+           and then Shared.Arrays.Table (The_Array).Name /= Name\n          loop\n-            The_Array := In_Tree.Arrays.Table (The_Array).Next;\n+            The_Array := Shared.Arrays.Table (The_Array).Next;\n          end loop;\n \n          --  If the array cannot be found, create a new entry in the list.\n          --  As The_Array_Element is initialized to No_Array_Element, a new\n          --  element will be created automatically later\n \n          if The_Array = No_Array then\n-            Array_Table.Increment_Last (In_Tree.Arrays);\n-            The_Array := Array_Table.Last (In_Tree.Arrays);\n+            Array_Table.Increment_Last (Shared.Arrays);\n+            The_Array := Array_Table.Last (Shared.Arrays);\n \n             if Pkg /= No_Package then\n-               In_Tree.Arrays.Table (The_Array) :=\n+               Shared.Arrays.Table (The_Array) :=\n                  (Name     => Name,\n                   Location => Current_Location,\n                   Value    => No_Array_Element,\n-                  Next     => In_Tree.Packages.Table (Pkg).Decl.Arrays);\n+                  Next     => Shared.Packages.Table (Pkg).Decl.Arrays);\n \n-               In_Tree.Packages.Table (Pkg).Decl.Arrays := The_Array;\n+               Shared.Packages.Table (Pkg).Decl.Arrays := The_Array;\n \n             else\n-               In_Tree.Arrays.Table (The_Array) :=\n+               Shared.Arrays.Table (The_Array) :=\n                  (Name     => Name,\n                   Location => Current_Location,\n                   Value    => No_Array_Element,\n@@ -1930,49 +1907,49 @@ package body Prj.Proc is\n             end if;\n \n          else\n-            Elem := In_Tree.Arrays.Table (The_Array).Value;\n+            Elem := Shared.Arrays.Table (The_Array).Value;\n          end if;\n \n          --  Look in the list, if any, to find an element with the same index\n          --  and same source index.\n \n          while Elem /= No_Array_Element\n            and then\n-             (In_Tree.Array_Elements.Table (Elem).Index /= Index_Name\n+             (Shared.Array_Elements.Table (Elem).Index /= Index_Name\n                or else\n-                 In_Tree.Array_Elements.Table (Elem).Src_Index /= Source_Index)\n+                 Shared.Array_Elements.Table (Elem).Src_Index /= Source_Index)\n          loop\n-            Elem := In_Tree.Array_Elements.Table (Elem).Next;\n+            Elem := Shared.Array_Elements.Table (Elem).Next;\n          end loop;\n \n          --  If no such element were found, create a new one\n          --  and insert it in the element list, with the\n          --  proper value.\n \n          if Elem = No_Array_Element then\n-            Array_Element_Table.Increment_Last (In_Tree.Array_Elements);\n-            Elem := Array_Element_Table.Last (In_Tree.Array_Elements);\n+            Array_Element_Table.Increment_Last (Shared.Array_Elements);\n+            Elem := Array_Element_Table.Last (Shared.Array_Elements);\n \n-            In_Tree.Array_Elements.Table\n+            Shared.Array_Elements.Table\n               (Elem) :=\n               (Index                => Index_Name,\n                Src_Index            => Source_Index,\n                Index_Case_Sensitive =>\n                   not Case_Insensitive (Current, Node_Tree),\n                Value                => New_Value,\n-               Next                 => In_Tree.Arrays.Table (The_Array).Value);\n+               Next                 => Shared.Arrays.Table (The_Array).Value);\n \n-            In_Tree.Arrays.Table (The_Array).Value := Elem;\n+            Shared.Arrays.Table (The_Array).Value := Elem;\n \n          else\n             --  An element with the same index already exists, just replace its\n             --  value with the new one.\n \n-            In_Tree.Array_Elements.Table (Elem).Value := New_Value;\n+            Shared.Array_Elements.Table (Elem).Value := New_Value;\n          end if;\n \n          if Name = Snames.Name_External then\n-            if Can_Modify_Child_Env then\n+            if In_Tree.Is_Root_Tree then\n                Add (Child_Env.External,\n                     External_Name => Get_Name_String (Index_Name),\n                     Value         => Get_Name_String (New_Value.Value),\n@@ -2015,14 +1992,14 @@ package body Prj.Proc is\n \n          if Is_Attribute then\n             if Pkg /= No_Package then\n-               Var := In_Tree.Packages.Table (Pkg).Decl.Attributes;\n+               Var := Shared.Packages.Table (Pkg).Decl.Attributes;\n             else\n                Var := Project.Decl.Attributes;\n             end if;\n \n          else\n             if Pkg /= No_Package then\n-               Var := In_Tree.Packages.Table (Pkg).Decl.Variables;\n+               Var := Shared.Packages.Table (Pkg).Decl.Variables;\n             else\n                Var := Project.Decl.Variables;\n             end if;\n@@ -2031,9 +2008,9 @@ package body Prj.Proc is\n          --  Loop through the list, to find if it has already been declared.\n \n          while Var /= No_Variable\n-           and then In_Tree.Variable_Elements.Table (Var).Name /= Name\n+           and then Shared.Variable_Elements.Table (Var).Name /= Name\n          loop\n-            Var := In_Tree.Variable_Elements.Table (Var).Next;\n+            Var := Shared.Variable_Elements.Table (Var).Next;\n          end loop;\n \n          --  If it has not been declared, create a new entry in the list\n@@ -2047,20 +2024,20 @@ package body Prj.Proc is\n               (not Is_Attribute,\n                \"illegal attribute declaration for \" & Get_Name_String (Name));\n \n-            Variable_Element_Table.Increment_Last (In_Tree.Variable_Elements);\n-            Var := Variable_Element_Table.Last (In_Tree.Variable_Elements);\n+            Variable_Element_Table.Increment_Last (Shared.Variable_Elements);\n+            Var := Variable_Element_Table.Last (Shared.Variable_Elements);\n \n             --  Put the new variable in the appropriate list\n \n             if Pkg /= No_Package then\n-               In_Tree.Variable_Elements.Table (Var) :=\n-                 (Next   => In_Tree.Packages.Table (Pkg).Decl.Variables,\n+               Shared.Variable_Elements.Table (Var) :=\n+                 (Next   => Shared.Packages.Table (Pkg).Decl.Variables,\n                   Name   => Name,\n                   Value  => New_Value);\n-               In_Tree.Packages.Table (Pkg).Decl.Variables := Var;\n+               Shared.Packages.Table (Pkg).Decl.Variables := Var;\n \n             else\n-               In_Tree.Variable_Elements.Table (Var) :=\n+               Shared.Variable_Elements.Table (Var) :=\n                  (Next   => Project.Decl.Variables,\n                   Name   => Name,\n                   Value  => New_Value);\n@@ -2071,7 +2048,7 @@ package body Prj.Proc is\n             --  change the value.\n \n          else\n-            In_Tree.Variable_Elements.Table (Var).Value := New_Value;\n+            Shared.Variable_Elements.Table (Var).Value := New_Value;\n          end if;\n       end Process_Expression_Variable_Decl;\n \n@@ -2083,7 +2060,7 @@ package body Prj.Proc is\n          New_Value : Variable_Value :=\n                        Expression\n                          (Project                => Project,\n-                          In_Tree                => In_Tree,\n+                          Shared                 => Shared,\n                           From_Project_Node      => From_Project_Node,\n                           From_Project_Node_Tree => Node_Tree,\n                           Env                    => Env,\n@@ -2173,7 +2150,7 @@ package body Prj.Proc is\n                Name :=\n                  Name_Of\n                    (Package_Node_Of (Variable_Node, Node_Tree), Node_Tree);\n-               The_Package := Package_From (The_Project, In_Tree, Name);\n+               The_Package := Package_From (The_Project, Shared, Name);\n             end if;\n \n             Name := Name_Of (Variable_Node, Node_Tree);\n@@ -2183,11 +2160,11 @@ package body Prj.Proc is\n             if The_Package /= No_Package then\n                Name := Name_Of (Variable_Node, Node_Tree);\n \n-               Var_Id := In_Tree.Packages.Table (The_Package).Decl.Variables;\n+               Var_Id := Shared.Packages.Table (The_Package).Decl.Variables;\n                while Var_Id /= No_Variable\n-                 and then In_Tree.Variable_Elements.Table (Var_Id).Name /= Name\n+                 and then Shared.Variable_Elements.Table (Var_Id).Name /= Name\n                loop\n-                  Var_Id := In_Tree.Variable_Elements.Table (Var_Id).Next;\n+                  Var_Id := Shared.Variable_Elements.Table (Var_Id).Next;\n                end loop;\n             end if;\n \n@@ -2199,9 +2176,9 @@ package body Prj.Proc is\n             then\n                Var_Id := The_Project.Decl.Variables;\n                while Var_Id /= No_Variable\n-                 and then In_Tree.Variable_Elements.Table (Var_Id).Name /= Name\n+                 and then Shared.Variable_Elements.Table (Var_Id).Name /= Name\n                loop\n-                  Var_Id := In_Tree.Variable_Elements.Table (Var_Id).Next;\n+                  Var_Id := Shared.Variable_Elements.Table (Var_Id).Next;\n                end loop;\n             end if;\n \n@@ -2217,7 +2194,7 @@ package body Prj.Proc is\n \n             --  Get the case variable\n \n-            The_Variable := In_Tree.Variable_Elements. Table (Var_Id).Value;\n+            The_Variable := Shared.Variable_Elements. Table (Var_Id).Value;\n \n             if The_Variable.Kind /= Single then\n \n@@ -2270,15 +2247,14 @@ package body Prj.Proc is\n \n          if Present (Decl_Item) then\n             Process_Declarative_Items\n-              (Project              => Project,\n-               In_Tree              => In_Tree,\n-               From_Project_Node    => From_Project_Node,\n-               Node_Tree            => Node_Tree,\n-               Env                  => Env,\n-               Pkg                  => Pkg,\n-               Item                 => Decl_Item,\n-               Child_Env            => Child_Env,\n-               Can_Modify_Child_Env => Can_Modify_Child_Env);\n+              (Project                => Project,\n+               In_Tree                => In_Tree,\n+               From_Project_Node      => From_Project_Node,\n+               Node_Tree              => Node_Tree,\n+               Env                    => Env,\n+               Pkg                    => Pkg,\n+               Item                   => Decl_Item,\n+               Child_Env              => Child_Env);\n          end if;\n       end Process_Case_Construction;\n \n@@ -2333,8 +2309,6 @@ package body Prj.Proc is\n       Env                    : in out Prj.Tree.Environment;\n       Reset_Tree             : Boolean := True)\n    is\n-      Child_Env : Prj.Tree.Environment;\n-\n    begin\n       if Reset_Tree then\n \n@@ -2350,19 +2324,13 @@ package body Prj.Proc is\n \n       Debug_Increase_Indent (\"Process tree, phase 1\");\n \n-      Initialize_And_Copy (Child_Env, Copy_From => Env);\n-\n       Recursive_Process\n         (Project                => Project,\n          In_Tree                => In_Tree,\n          From_Project_Node      => From_Project_Node,\n          From_Project_Node_Tree => From_Project_Node_Tree,\n          Env                    => Env,\n-         Extended_By            => No_Project,\n-         Child_Env              => Child_Env,\n-         Is_Root_Project        => True);\n-\n-      Free (Child_Env);\n+         Extended_By            => No_Project);\n \n       Success :=\n         Total_Errors_Detected = 0\n@@ -2397,7 +2365,7 @@ package body Prj.Proc is\n    begin\n       Success := True;\n \n-      Debug_Increase_Indent (\"Process tree, phase 2\");\n+      Debug_Increase_Indent (\"Process tree, phase 2\", Project.Name);\n \n       if Project /= No_Project then\n          Check (In_Tree, Project, From_Project_Node_Tree, Env.Flags);\n@@ -2498,10 +2466,15 @@ package body Prj.Proc is\n       From_Project_Node      : Project_Node_Id;\n       From_Project_Node_Tree : Project_Node_Tree_Ref;\n       Env                    : in out Prj.Tree.Environment;\n-      Extended_By            : Project_Id;\n-      Child_Env              : in out Prj.Tree.Environment;\n-      Is_Root_Project        : Boolean)\n+      Extended_By            : Project_Id)\n    is\n+      Shared : constant Shared_Project_Tree_Data_Access :=\n+        In_Tree.Shared;\n+\n+      Child_Env              : Prj.Tree.Environment;\n+      --  Only used for the root aggregate project (if any). This is left\n+      --  uninitialized otherwise.\n+\n       procedure Process_Imported_Projects\n         (Imported     : in out Project_List;\n          Limited_With : Boolean);\n@@ -2553,9 +2526,7 @@ package body Prj.Proc is\n                       (With_Clause, From_Project_Node_Tree),\n                   From_Project_Node_Tree => From_Project_Node_Tree,\n                   Env                    => Env,\n-                  Extended_By            => No_Project,\n-                  Child_Env              => Child_Env,\n-                  Is_Root_Project        => False);\n+                  Extended_By            => No_Project);\n \n                --  Imported is the id of the last imported project. If\n                --  it is nil, then this imported project is our first.\n@@ -2585,7 +2556,7 @@ package body Prj.Proc is\n \n       procedure Process_Aggregated_Projects is\n          List : Aggregated_Project_List;\n-         Loaded_Tree : Prj.Tree.Project_Node_Id;\n+         Loaded_Project : Prj.Tree.Project_Node_Id;\n          Success     : Boolean := True;\n       begin\n          if Project.Qualifier /= Aggregate then\n@@ -2604,25 +2575,46 @@ package body Prj.Proc is\n          while Success and then List /= null loop\n             Prj.Part.Parse\n               (In_Tree           => From_Project_Node_Tree,\n-               Project           => Loaded_Tree,\n+               Project           => Loaded_Project,\n                Project_File_Name => Get_Name_String (List.Path),\n                Errout_Handling   => Prj.Part.Never_Finalize,\n                Current_Directory => Get_Name_String (Project.Directory.Name),\n                Is_Config_File    => False,\n                Env               => Child_Env);\n \n-            Success := not Prj.Tree.No (Loaded_Tree);\n+            Success := not Prj.Tree.No (Loaded_Project);\n \n             if Success then\n-               Recursive_Process\n-                 (In_Tree                => In_Tree,\n-                  Project                => List.Project,\n-                  From_Project_Node      => Loaded_Tree,\n-                  From_Project_Node_Tree => From_Project_Node_Tree,\n-                  Env                    => Child_Env,\n-                  Extended_By            => No_Project,\n-                  Child_Env              => Child_Env,\n-                  Is_Root_Project        => False);\n+               List.Tree := new Project_Tree_Data (Is_Root_Tree => False);\n+               Prj.Initialize (List.Tree);\n+               List.Tree.Shared := In_Tree.Shared;\n+\n+               --  We can only do the phase 1 of the processing, since we do\n+               --  not have access to the configuration file yet (this is\n+               --  called when doing phase 1 of the processing for the root\n+               --  aggregate project).\n+\n+               if In_Tree.Is_Root_Tree then\n+                  Process_Project_Tree_Phase_1\n+                    (In_Tree                => List.Tree,\n+                     Project                => List.Project,\n+                     Success                => Success,\n+                     From_Project_Node      => Loaded_Project,\n+                     From_Project_Node_Tree => From_Project_Node_Tree,\n+                     Env                    => Child_Env,\n+                     Reset_Tree             => False);\n+               else\n+                  --  use the same environment as the rest of the aggregated\n+                  --  projects, ie the one that was setup by the root aggregate\n+                  Process_Project_Tree_Phase_1\n+                    (In_Tree                => List.Tree,\n+                     Project                => List.Project,\n+                     Success                => Success,\n+                     From_Project_Node      => Loaded_Project,\n+                     From_Project_Node_Tree => From_Project_Node_Tree,\n+                     Env                    => Env,\n+                     Reset_Tree             => False);\n+               end if;\n             else\n                Debug_Output (\"Failed to parse\", Name_Id (List.Path));\n             end if;\n@@ -2650,32 +2642,31 @@ package body Prj.Proc is\n       begin\n          Extended_Pkg := Project.Extends.Decl.Packages;\n          while Extended_Pkg /= No_Package loop\n-            Element := In_Tree.Packages.Table (Extended_Pkg);\n+            Element := Shared.Packages.Table (Extended_Pkg);\n \n             Current_Pkg := First;\n             while Current_Pkg /= No_Package\n-              and then In_Tree.Packages.Table (Current_Pkg).Name /=\n+              and then Shared.Packages.Table (Current_Pkg).Name /=\n               Element.Name\n             loop\n-               Current_Pkg :=\n-                 In_Tree.Packages.Table (Current_Pkg).Next;\n+               Current_Pkg := Shared.Packages.Table (Current_Pkg).Next;\n             end loop;\n \n             if Current_Pkg = No_Package then\n-               Package_Table.Increment_Last (In_Tree.Packages);\n-               Current_Pkg := Package_Table.Last (In_Tree.Packages);\n-               In_Tree.Packages.Table (Current_Pkg) :=\n+               Package_Table.Increment_Last (Shared.Packages);\n+               Current_Pkg := Package_Table.Last (Shared.Packages);\n+               Shared.Packages.Table (Current_Pkg) :=\n                  (Name   => Element.Name,\n                   Decl   => No_Declarations,\n                   Parent => No_Package,\n                   Next   => Project.Decl.Packages);\n                Project.Decl.Packages := Current_Pkg;\n                Copy_Package_Declarations\n                  (From       => Element.Decl,\n-                  To         => In_Tree.Packages.Table (Current_Pkg).Decl,\n+                  To         => Shared.Packages.Table (Current_Pkg).Decl,\n                   New_Loc    => No_Location,\n                   Restricted => True,\n-                  In_Tree    => In_Tree);\n+                  Shared     => Shared);\n             end if;\n \n             Extended_Pkg := Element.Next;\n@@ -2685,7 +2676,7 @@ package body Prj.Proc is\n \n          Attribute1 := Project.Decl.Attributes;\n          while Attribute1 /= No_Variable loop\n-            Attr_Value1 := In_Tree.Variable_Elements. Table (Attribute1);\n+            Attr_Value1 := Shared.Variable_Elements. Table (Attribute1);\n             exit when Attr_Value1.Name = Snames.Name_Languages;\n             Attribute1 := Attr_Value1.Next;\n          end loop;\n@@ -2698,7 +2689,7 @@ package body Prj.Proc is\n \n             Attribute2 := Project.Extends.Decl.Attributes;\n             while Attribute2 /= No_Variable loop\n-               Attr_Value2 := In_Tree.Variable_Elements.Table (Attribute2);\n+               Attr_Value2 := Shared.Variable_Elements.Table (Attribute2);\n                exit when Attr_Value2.Name = Snames.Name_Languages;\n                Attribute2 := Attr_Value2.Next;\n             end loop;\n@@ -2711,17 +2702,16 @@ package body Prj.Proc is\n \n                if Attribute1 = No_Variable then\n                   Variable_Element_Table.Increment_Last\n-                    (In_Tree.Variable_Elements);\n+                    (Shared.Variable_Elements);\n                   Attribute1 := Variable_Element_Table.Last\n-                    (In_Tree.Variable_Elements);\n+                    (Shared.Variable_Elements);\n                   Attr_Value1.Next := Project.Decl.Attributes;\n                   Project.Decl.Attributes := Attribute1;\n                end if;\n \n                Attr_Value1.Name := Snames.Name_Languages;\n                Attr_Value1.Value := Attr_Value2.Value;\n-               In_Tree.Variable_Elements.Table\n-                 (Attribute1) := Attr_Value1;\n+               Shared.Variable_Elements.Table (Attribute1) := Attr_Value1;\n             end if;\n          end if;\n       end Process_Extended_Project;\n@@ -2806,13 +2796,24 @@ package body Prj.Proc is\n               (Project,\n                Name,\n                Name_Id (Project.Directory.Name),\n-               In_Tree,\n+               In_Tree.Shared,\n                Project.Decl,\n                Prj.Attr.Attribute_First,\n                Project_Level => True);\n \n             Process_Imported_Projects (Imported, Limited_With => False);\n \n+            if Project.Qualifier = Aggregate\n+              and then In_Tree.Is_Root_Tree\n+            then\n+               Initialize_And_Copy (Child_Env, Copy_From => Env);\n+            else\n+               --  No need to initialize Child_Env, since it will not be\n+               --  used anyway by Process_Declarative_Items (only the root\n+               --  aggregate can modify it, and it is never read anyway).\n+               null;\n+            end if;\n+\n             Declaration_Node :=\n               Project_Declaration_Of\n                 (From_Project_Node, From_Project_Node_Tree);\n@@ -2824,9 +2825,7 @@ package body Prj.Proc is\n                  (Declaration_Node, From_Project_Node_Tree),\n                From_Project_Node_Tree => From_Project_Node_Tree,\n                Env                    => Env,\n-               Extended_By            => Project,\n-               Child_Env              => Child_Env,\n-               Is_Root_Project        => False);\n+               Extended_By            => Project);\n \n             Process_Declarative_Items\n               (Project                => Project,\n@@ -2837,8 +2836,7 @@ package body Prj.Proc is\n                Pkg                    => No_Package,\n                Item                   => First_Declarative_Item_Of\n                  (Declaration_Node, From_Project_Node_Tree),\n-               Child_Env              => Child_Env,\n-               Can_Modify_Child_Env   => Is_Root_Project);\n+               Child_Env              => Child_Env);\n \n             if Project.Extends /= No_Project then\n                Process_Extended_Project;\n@@ -2849,6 +2847,12 @@ package body Prj.Proc is\n             if Err_Vars.Total_Errors_Detected = 0 then\n                Process_Aggregated_Projects;\n             end if;\n+\n+            if Project.Qualifier = Aggregate\n+              and then In_Tree.Is_Root_Tree\n+            then\n+               Free (Child_Env);\n+            end if;\n          end;\n       end if;\n    end Recursive_Process;"}, {"sha": "f7fb7ad1411be3c3c9e3caa63b48260d3257f45b", "filename": "gcc/ada/prj-proc.ads", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/40ecf2f5d19ba2b046c65168aa8acc80ad399a08/gcc%2Fada%2Fprj-proc.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/40ecf2f5d19ba2b046c65168aa8acc80ad399a08/gcc%2Fada%2Fprj-proc.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fprj-proc.ads?ref=40ecf2f5d19ba2b046c65168aa8acc80ad399a08", "patch": "@@ -72,7 +72,7 @@ package Prj.Proc is\n       From_Project_Node      : Project_Node_Id;\n       From_Project_Node_Tree : Project_Node_Tree_Ref;\n       Env                    : in out Prj.Tree.Environment;\n-      Reset_Tree             : Boolean       := True);\n+      Reset_Tree             : Boolean := True);\n    --  Performs the two phases of the processing\n \n end Prj.Proc;"}, {"sha": "42f08ab3a64e27ac5069d3bf31bc184aacb0d3fb", "filename": "gcc/ada/prj-util.adb", "status": "modified", "additions": 48, "deletions": 47, "changes": 95, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/40ecf2f5d19ba2b046c65168aa8acc80ad399a08/gcc%2Fada%2Fprj-util.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/40ecf2f5d19ba2b046c65168aa8acc80ad399a08/gcc%2Fada%2Fprj-util.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fprj-util.adb?ref=40ecf2f5d19ba2b046c65168aa8acc80ad399a08", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 2001-2010, Free Software Foundation, Inc.         --\n+--          Copyright (C) 2001-2011, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -129,28 +129,28 @@ package body Prj.Util is\n \n    procedure Duplicate\n      (This    : in out Name_List_Index;\n-      In_Tree : Project_Tree_Ref)\n+      Shared  : Shared_Project_Tree_Data_Access)\n    is\n       Old_Current : Name_List_Index;\n       New_Current : Name_List_Index;\n \n    begin\n       if This /= No_Name_List then\n          Old_Current := This;\n-         Name_List_Table.Increment_Last (In_Tree.Name_Lists);\n-         New_Current := Name_List_Table.Last (In_Tree.Name_Lists);\n+         Name_List_Table.Increment_Last (Shared.Name_Lists);\n+         New_Current := Name_List_Table.Last (Shared.Name_Lists);\n          This := New_Current;\n-         In_Tree.Name_Lists.Table (New_Current) :=\n-           (In_Tree.Name_Lists.Table (Old_Current).Name, No_Name_List);\n+         Shared.Name_Lists.Table (New_Current) :=\n+           (Shared.Name_Lists.Table (Old_Current).Name, No_Name_List);\n \n          loop\n-            Old_Current := In_Tree.Name_Lists.Table (Old_Current).Next;\n+            Old_Current := Shared.Name_Lists.Table (Old_Current).Next;\n             exit when Old_Current = No_Name_List;\n-            In_Tree.Name_Lists.Table (New_Current).Next := New_Current + 1;\n-            Name_List_Table.Increment_Last (In_Tree.Name_Lists);\n+            Shared.Name_Lists.Table (New_Current).Next := New_Current + 1;\n+            Name_List_Table.Increment_Last (Shared.Name_Lists);\n             New_Current := New_Current + 1;\n-            In_Tree.Name_Lists.Table (New_Current) :=\n-              (In_Tree.Name_Lists.Table (Old_Current).Name, No_Name_List);\n+            Shared.Name_Lists.Table (New_Current) :=\n+              (Shared.Name_Lists.Table (Old_Current).Name, No_Name_List);\n          end loop;\n       end if;\n    end Duplicate;\n@@ -174,7 +174,7 @@ package body Prj.Util is\n \n    function Executable_Of\n      (Project  : Project_Id;\n-      In_Tree  : Project_Tree_Ref;\n+      Shared   : Shared_Project_Tree_Data_Access;\n       Main     : File_Name_Type;\n       Index    : Int;\n       Ada_Main : Boolean := True;\n@@ -189,15 +189,15 @@ package body Prj.Util is\n                           Prj.Util.Value_Of\n                             (Name        => Name_Builder,\n                              In_Packages => The_Packages,\n-                             In_Tree     => In_Tree);\n+                             Shared      => Shared);\n \n       Executable : Variable_Value :=\n                      Prj.Util.Value_Of\n                        (Name                    => Name_Id (Main),\n                         Index                   => Index,\n                         Attribute_Or_Array_Name => Name_Executable,\n                         In_Package              => Builder_Package,\n-                        In_Tree                 => In_Tree);\n+                        Shared                  => Shared);\n \n       Lang   : Language_Ptr;\n \n@@ -266,8 +266,8 @@ package body Prj.Util is\n               Prj.Util.Value_Of\n                 (Variable_Name => Name_Executable_Suffix,\n                  In_Variables  =>\n-                   In_Tree.Packages.Table (Builder_Package).Decl.Attributes,\n-                 In_Tree       => In_Tree);\n+                   Shared.Packages.Table (Builder_Package).Decl.Attributes,\n+                 Shared        => Shared);\n \n             if Suffix_From_Project /= Nil_Variable_Value\n               and then Suffix_From_Project.Value /= No_Name\n@@ -340,7 +340,7 @@ package body Prj.Util is\n                        Index                   => 0,\n                        Attribute_Or_Array_Name => Name_Executable,\n                        In_Package              => Builder_Package,\n-                       In_Tree                 => In_Tree);\n+                       Shared                  => Shared);\n                end if;\n             end;\n          end if;\n@@ -554,24 +554,26 @@ package body Prj.Util is\n       In_Tree    : Project_Tree_Ref;\n       Lower_Case : Boolean := False)\n    is\n+      Shared  : constant Shared_Project_Tree_Data_Access := In_Tree.Shared;\n+\n       Current_Name : Name_List_Index;\n       List         : String_List_Id;\n       Element      : String_Element;\n       Last         : Name_List_Index :=\n-                       Name_List_Table.Last (In_Tree.Name_Lists);\n+                       Name_List_Table.Last (Shared.Name_Lists);\n       Value        : Name_Id;\n \n    begin\n       Current_Name := Into_List;\n       while Current_Name /= No_Name_List\n-        and then In_Tree.Name_Lists.Table (Current_Name).Next /= No_Name_List\n+        and then Shared.Name_Lists.Table (Current_Name).Next /= No_Name_List\n       loop\n-         Current_Name := In_Tree.Name_Lists.Table (Current_Name).Next;\n+         Current_Name := Shared.Name_Lists.Table (Current_Name).Next;\n       end loop;\n \n       List := From_List;\n       while List /= Nil_String loop\n-         Element := In_Tree.String_Elements.Table (List);\n+         Element := Shared.String_Elements.Table (List);\n          Value := Element.Value;\n \n          if Lower_Case then\n@@ -581,15 +583,14 @@ package body Prj.Util is\n          end if;\n \n          Name_List_Table.Append\n-           (In_Tree.Name_Lists, (Name => Value, Next => No_Name_List));\n+           (Shared.Name_Lists, (Name => Value, Next => No_Name_List));\n \n          Last := Last + 1;\n \n          if Current_Name = No_Name_List then\n             Into_List := Last;\n-\n          else\n-            In_Tree.Name_Lists.Table (Current_Name).Next := Last;\n+            Shared.Name_Lists.Table (Current_Name).Next := Last;\n          end if;\n \n          Current_Name := Last;\n@@ -808,8 +809,9 @@ package body Prj.Util is\n    function Value_Of\n      (Index    : Name_Id;\n       In_Array : Array_Element_Id;\n-      In_Tree  : Project_Tree_Ref) return Name_Id\n+      Shared   : Shared_Project_Tree_Data_Access) return Name_Id\n    is\n+\n       Current    : Array_Element_Id;\n       Element    : Array_Element;\n       Real_Index : Name_Id := Index;\n@@ -821,7 +823,7 @@ package body Prj.Util is\n          return No_Name;\n       end if;\n \n-      Element := In_Tree.Array_Elements.Table (Current);\n+      Element := Shared.Array_Elements.Table (Current);\n \n       if not Element.Index_Case_Sensitive then\n          Get_Name_String (Index);\n@@ -830,7 +832,7 @@ package body Prj.Util is\n       end if;\n \n       while Current /= No_Array_Element loop\n-         Element := In_Tree.Array_Elements.Table (Current);\n+         Element := Shared.Array_Elements.Table (Current);\n \n          if Real_Index = Element.Index then\n             exit when Element.Value.Kind /= Single;\n@@ -848,7 +850,7 @@ package body Prj.Util is\n      (Index                  : Name_Id;\n       Src_Index              : Int := 0;\n       In_Array               : Array_Element_Id;\n-      In_Tree                : Project_Tree_Ref;\n+      Shared                 : Shared_Project_Tree_Data_Access;\n       Force_Lower_Case_Index : Boolean := False;\n       Allow_Wildcards        : Boolean := False) return Variable_Value\n    is\n@@ -864,7 +866,7 @@ package body Prj.Util is\n          return Nil_Variable_Value;\n       end if;\n \n-      Element := In_Tree.Array_Elements.Table (Current);\n+      Element := Shared.Array_Elements.Table (Current);\n \n       Real_Index_1 := Index;\n \n@@ -877,7 +879,7 @@ package body Prj.Util is\n       end if;\n \n       while Current /= No_Array_Element loop\n-         Element := In_Tree.Array_Elements.Table (Current);\n+         Element := Shared.Array_Elements.Table (Current);\n          Real_Index_2 := Element.Index;\n \n          if not Element.Index_Case_Sensitive\n@@ -912,7 +914,7 @@ package body Prj.Util is\n       Index                   : Int := 0;\n       Attribute_Or_Array_Name : Name_Id;\n       In_Package              : Package_Id;\n-      In_Tree                 : Project_Tree_Ref;\n+      Shared                  : Shared_Project_Tree_Data_Access;\n       Force_Lower_Case_Index  : Boolean := False;\n       Allow_Wildcards         : Boolean := False) return Variable_Value\n    is\n@@ -927,14 +929,14 @@ package body Prj.Util is\n          The_Array :=\n            Value_Of\n              (Name      => Attribute_Or_Array_Name,\n-              In_Arrays => In_Tree.Packages.Table (In_Package).Decl.Arrays,\n-              In_Tree   => In_Tree);\n+              In_Arrays => Shared.Packages.Table (In_Package).Decl.Arrays,\n+              Shared    => Shared);\n          The_Attribute :=\n            Value_Of\n              (Index                  => Name,\n               Src_Index              => Index,\n               In_Array               => The_Array,\n-              In_Tree                => In_Tree,\n+              Shared                 => Shared,\n               Force_Lower_Case_Index => Force_Lower_Case_Index,\n               Allow_Wildcards        => Allow_Wildcards);\n \n@@ -944,9 +946,9 @@ package body Prj.Util is\n             The_Attribute :=\n               Value_Of\n                 (Variable_Name => Attribute_Or_Array_Name,\n-                 In_Variables  => In_Tree.Packages.Table\n-                                    (In_Package).Decl.Attributes,\n-                 In_Tree       => In_Tree);\n+                 In_Variables  => Shared.Packages.Table\n+                   (In_Package).Decl.Attributes,\n+                 Shared        => Shared);\n          end if;\n       end if;\n \n@@ -957,18 +959,18 @@ package body Prj.Util is\n      (Index     : Name_Id;\n       In_Array  : Name_Id;\n       In_Arrays : Array_Id;\n-      In_Tree   : Project_Tree_Ref) return Name_Id\n+      Shared    : Shared_Project_Tree_Data_Access) return Name_Id\n    is\n       Current   : Array_Id;\n       The_Array : Array_Data;\n \n    begin\n       Current := In_Arrays;\n       while Current /= No_Array loop\n-         The_Array := In_Tree.Arrays.Table (Current);\n+         The_Array := Shared.Arrays.Table (Current);\n          if The_Array.Name = In_Array then\n             return Value_Of\n-              (Index, In_Array => The_Array.Value, In_Tree => In_Tree);\n+              (Index, In_Array => The_Array.Value, Shared => Shared);\n          else\n             Current := The_Array.Next;\n          end if;\n@@ -980,15 +982,15 @@ package body Prj.Util is\n    function Value_Of\n      (Name      : Name_Id;\n       In_Arrays : Array_Id;\n-      In_Tree   : Project_Tree_Ref) return Array_Element_Id\n+      Shared    : Shared_Project_Tree_Data_Access) return Array_Element_Id\n    is\n       Current   : Array_Id;\n       The_Array : Array_Data;\n \n    begin\n       Current := In_Arrays;\n       while Current /= No_Array loop\n-         The_Array := In_Tree.Arrays.Table (Current);\n+         The_Array := Shared.Arrays.Table (Current);\n \n          if The_Array.Name = Name then\n             return The_Array.Value;\n@@ -1003,15 +1005,15 @@ package body Prj.Util is\n    function Value_Of\n      (Name        : Name_Id;\n       In_Packages : Package_Id;\n-      In_Tree     : Project_Tree_Ref) return Package_Id\n+      Shared      : Shared_Project_Tree_Data_Access) return Package_Id\n    is\n       Current     : Package_Id;\n       The_Package : Package_Element;\n \n    begin\n       Current := In_Packages;\n       while Current /= No_Package loop\n-         The_Package := In_Tree.Packages.Table (Current);\n+         The_Package := Shared.Packages.Table (Current);\n          exit when The_Package.Name /= No_Name\n            and then The_Package.Name = Name;\n          Current := The_Package.Next;\n@@ -1023,16 +1025,15 @@ package body Prj.Util is\n    function Value_Of\n      (Variable_Name : Name_Id;\n       In_Variables  : Variable_Id;\n-      In_Tree       : Project_Tree_Ref) return Variable_Value\n+      Shared      : Shared_Project_Tree_Data_Access) return Variable_Value\n    is\n       Current      : Variable_Id;\n       The_Variable : Variable;\n \n    begin\n       Current := In_Variables;\n       while Current /= No_Variable loop\n-         The_Variable :=\n-           In_Tree.Variable_Elements.Table (Current);\n+         The_Variable := Shared.Variable_Elements.Table (Current);\n \n          if Variable_Name = The_Variable.Name then\n             return The_Variable.Value;"}, {"sha": "7c94a3c85726da28dc25882cc8373db111e032c1", "filename": "gcc/ada/prj-util.ads", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/40ecf2f5d19ba2b046c65168aa8acc80ad399a08/gcc%2Fada%2Fprj-util.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/40ecf2f5d19ba2b046c65168aa8acc80ad399a08/gcc%2Fada%2Fprj-util.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fprj-util.ads?ref=40ecf2f5d19ba2b046c65168aa8acc80ad399a08", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 S p e c                                  --\n --                                                                          --\n---          Copyright (C) 2001-2010, Free Software Foundation, Inc.         --\n+--          Copyright (C) 2001-2011, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -29,7 +29,7 @@ package Prj.Util is\n \n    function Executable_Of\n      (Project        : Project_Id;\n-      In_Tree        : Project_Tree_Ref;\n+      Shared         : Shared_Project_Tree_Data_Access;\n       Main           : File_Name_Type;\n       Index          : Int;\n       Ada_Main       : Boolean := True;\n@@ -61,7 +61,7 @@ package Prj.Util is\n \n    procedure Duplicate\n      (This    : in out Name_List_Index;\n-      In_Tree : Project_Tree_Ref);\n+      Shared  : Shared_Project_Tree_Data_Access);\n    --  Duplicate a name list\n \n    function Value_Of\n@@ -73,7 +73,7 @@ package Prj.Util is\n    function Value_Of\n      (Index    : Name_Id;\n       In_Array : Array_Element_Id;\n-      In_Tree  : Project_Tree_Ref) return Name_Id;\n+      Shared   : Shared_Project_Tree_Data_Access) return Name_Id;\n    --  Get a single string array component. Returns No_Name if there is no\n    --  component Index, if In_Array is null, or if the component is a String\n    --  list. Depending on the attribute (only attributes may be associative\n@@ -85,7 +85,7 @@ package Prj.Util is\n      (Index                  : Name_Id;\n       Src_Index              : Int := 0;\n       In_Array               : Array_Element_Id;\n-      In_Tree                : Project_Tree_Ref;\n+      Shared                 : Shared_Project_Tree_Data_Access;\n       Force_Lower_Case_Index : Boolean := False;\n       Allow_Wildcards        : Boolean := False) return Variable_Value;\n    --  Get a string array component (single String or String list). Returns\n@@ -101,7 +101,7 @@ package Prj.Util is\n       Index                   : Int := 0;\n       Attribute_Or_Array_Name : Name_Id;\n       In_Package              : Package_Id;\n-      In_Tree                 : Project_Tree_Ref;\n+      Shared                  : Shared_Project_Tree_Data_Access;\n       Force_Lower_Case_Index  : Boolean := False;\n       Allow_Wildcards         : Boolean := False) return Variable_Value;\n    --  In a specific package:\n@@ -117,31 +117,31 @@ package Prj.Util is\n      (Index     : Name_Id;\n       In_Array  : Name_Id;\n       In_Arrays : Array_Id;\n-      In_Tree   : Project_Tree_Ref) return Name_Id;\n+      Shared    : Shared_Project_Tree_Data_Access) return Name_Id;\n    --  Get a string array component in an array of an array list. Returns\n    --  No_Name if there is no component Index, if In_Arrays is null, if\n    --  In_Array is not found in In_Arrays or if the component is a String list.\n \n    function Value_Of\n      (Name      : Name_Id;\n       In_Arrays : Array_Id;\n-      In_Tree   : Project_Tree_Ref) return Array_Element_Id;\n+      Shared    : Shared_Project_Tree_Data_Access) return Array_Element_Id;\n    --  Returns a specified array in an array list. Returns No_Array_Element\n    --  if In_Arrays is null or if Name is not the name of an array in\n    --  In_Arrays. The caller must ensure that Name is in lower case.\n \n    function Value_Of\n      (Name        : Name_Id;\n       In_Packages : Package_Id;\n-      In_Tree     : Project_Tree_Ref) return Package_Id;\n+      Shared      : Shared_Project_Tree_Data_Access) return Package_Id;\n    --  Returns a specified package in a package list. Returns No_Package\n    --  if In_Packages is null or if Name is not the name of a package in\n    --  Package_List. The caller must ensure that Name is in lower case.\n \n    function Value_Of\n      (Variable_Name : Name_Id;\n       In_Variables  : Variable_Id;\n-      In_Tree       : Project_Tree_Ref) return Variable_Value;\n+      Shared      : Shared_Project_Tree_Data_Access) return Variable_Value;\n    --  Returns a specified variable in a variable list. Returns null if\n    --  In_Variables is null or if Variable_Name is not the name of a\n    --  variable in In_Variables. Caller must ensure that Name is lower case."}, {"sha": "58160e61d483d81f6ad9a73dad8d4f161f76aadc", "filename": "gcc/ada/prj.adb", "status": "modified", "additions": 72, "deletions": 38, "changes": 110, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/40ecf2f5d19ba2b046c65168aa8acc80ad399a08/gcc%2Fada%2Fprj.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/40ecf2f5d19ba2b046c65168aa8acc80ad399a08/gcc%2Fada%2Fprj.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fprj.adb?ref=40ecf2f5d19ba2b046c65168aa8acc80ad399a08", "patch": "@@ -404,44 +404,51 @@ package body Prj is\n \n    procedure For_Every_Project_Imported\n      (By                 : Project_Id;\n+      Tree               : Project_Tree_Ref;\n       With_State         : in out State;\n       Include_Aggregated : Boolean := True;\n       Imported_First     : Boolean := False)\n    is\n       use Project_Boolean_Htable;\n       Seen : Project_Boolean_Htable.Instance := Project_Boolean_Htable.Nil;\n \n-      procedure Recursive_Check (Project : Project_Id);\n+      procedure Recursive_Check\n+        (Project : Project_Id; Tree : Project_Tree_Ref);\n       --  Check if a project has already been seen. If not seen, mark it as\n       --  Seen, Call Action, and check all its imported projects.\n \n       ---------------------\n       -- Recursive_Check --\n       ---------------------\n \n-      procedure Recursive_Check (Project : Project_Id) is\n+      procedure Recursive_Check\n+        (Project : Project_Id; Tree : Project_Tree_Ref)\n+      is\n          List : Project_List;\n          Agg  : Aggregated_Project_List;\n \n       begin\n          if not Get (Seen, Project) then\n+            --  Even if a project is aggregated multiple times, we will only\n+            --  return it once.\n+\n             Set (Seen, Project, True);\n \n             if not Imported_First then\n-               Action (Project, With_State);\n+               Action (Project, Tree, With_State);\n             end if;\n \n             --  Visit all extended projects\n \n             if Project.Extends /= No_Project then\n-               Recursive_Check (Project.Extends);\n+               Recursive_Check (Project.Extends, Tree);\n             end if;\n \n             --  Visit all imported projects\n \n             List := Project.Imported_Projects;\n             while List /= null loop\n-               Recursive_Check (List.Project);\n+               Recursive_Check (List.Project, Tree);\n                List := List.Next;\n             end loop;\n \n@@ -453,21 +460,21 @@ package body Prj is\n                Agg := Project.Aggregated_Projects;\n                while Agg /= null loop\n                   pragma Assert (Agg.Project /= No_Project);\n-                  Recursive_Check (Agg.Project);\n+                  Recursive_Check (Agg.Project, Agg.Tree);\n                   Agg := Agg.Next;\n                end loop;\n             end if;\n \n             if Imported_First then\n-               Action (Project, With_State);\n+               Action (Project, Tree, With_State);\n             end if;\n          end if;\n       end Recursive_Check;\n \n    --  Start of processing for For_Every_Project_Imported\n \n    begin\n-      Recursive_Check (Project => By);\n+      Recursive_Check (Project => By, Tree => Tree);\n       Reset (Seen);\n    end For_Every_Project_Imported;\n \n@@ -484,18 +491,25 @@ package body Prj is\n    is\n       Result : Source_Id  := No_Source;\n \n-      procedure Look_For_Sources (Proj : Project_Id; Src : in out Source_Id);\n+      procedure Look_For_Sources\n+        (Proj : Project_Id;\n+         Tree : Project_Tree_Ref;\n+         Src  : in out Source_Id);\n       --  Look for Base_Name in the sources of Proj\n \n       ----------------------\n       -- Look_For_Sources --\n       ----------------------\n \n-      procedure Look_For_Sources (Proj : Project_Id; Src : in out Source_Id) is\n+      procedure Look_For_Sources\n+        (Proj : Project_Id;\n+         Tree : Project_Tree_Ref;\n+         Src  : in out Source_Id)\n+      is\n          Iterator : Source_Iterator;\n \n       begin\n-         Iterator := For_Each_Source (In_Tree => In_Tree, Project => Proj);\n+         Iterator := For_Each_Source (In_Tree => Tree, Project => Proj);\n          while Element (Iterator) /= No_Source loop\n             if Element (Iterator).File = Base_Name then\n                Src := Element (Iterator);\n@@ -517,22 +531,23 @@ package body Prj is\n       if In_Extended_Only then\n          Proj := Project;\n          while Proj /= No_Project loop\n-            Look_For_Sources (Proj, Result);\n+            Look_For_Sources (Proj, In_Tree, Result);\n             exit when Result /= No_Source;\n \n             Proj := Proj.Extends;\n          end loop;\n \n       elsif In_Imported_Only then\n-         Look_For_Sources (Project, Result);\n+         Look_For_Sources (Project, In_Tree, Result);\n \n          if Result = No_Source then\n             For_Imported_Projects\n               (By         => Project,\n+               Tree       => In_Tree,\n                With_State => Result);\n          end if;\n       else\n-         Look_For_Sources (No_Project, Result);\n+         Look_For_Sources (No_Project, In_Tree, Result);\n       end if;\n \n       return Result;\n@@ -604,12 +619,9 @@ package body Prj is\n \n          Prj.Attr.Initialize;\n \n-         Set_Name_Table_Byte\n-           (Name_Project,          Token_Type'Pos (Tok_Project));\n-         Set_Name_Table_Byte\n-           (Name_Extends,          Token_Type'Pos (Tok_Extends));\n-         Set_Name_Table_Byte\n-           (Name_External,         Token_Type'Pos (Tok_External));\n+         Set_Name_Table_Byte (Name_Project,  Token_Type'Pos (Tok_Project));\n+         Set_Name_Table_Byte (Name_Extends,  Token_Type'Pos (Tok_Extends));\n+         Set_Name_Table_Byte (Name_External, Token_Type'Pos (Tok_External));\n          Set_Name_Table_Byte\n            (Name_External_As_List, Token_Type'Pos (Tok_External_As_List));\n       end if;\n@@ -716,6 +728,9 @@ package body Prj is\n    begin\n       while List /= null loop\n          Tmp := List.Next;\n+\n+         Free (List.Tree);\n+\n          Unchecked_Free (List);\n          List := Tmp;\n       end loop;\n@@ -731,6 +746,7 @@ package body Prj is\n       Project.Aggregated_Projects := new Aggregated_Project'\n         (Path    => Path,\n          Project => No_Project,\n+         Tree    => null,\n          Next    => Project.Aggregated_Projects);\n    end Add_Aggregated_Project;\n \n@@ -888,13 +904,16 @@ package body Prj is\n \n    begin\n       if Tree /= null then\n-         Name_List_Table.Free (Tree.Name_Lists);\n-         Number_List_Table.Free (Tree.Number_Lists);\n-         String_Element_Table.Free (Tree.String_Elements);\n-         Variable_Element_Table.Free (Tree.Variable_Elements);\n-         Array_Element_Table.Free (Tree.Array_Elements);\n-         Array_Table.Free (Tree.Arrays);\n-         Package_Table.Free (Tree.Packages);\n+         if Tree.Is_Root_Tree then\n+            Name_List_Table.Free (Tree.Shared.Name_Lists);\n+            Number_List_Table.Free (Tree.Shared.Number_Lists);\n+            String_Element_Table.Free (Tree.Shared.String_Elements);\n+            Variable_Element_Table.Free (Tree.Shared.Variable_Elements);\n+            Array_Element_Table.Free (Tree.Shared.Array_Elements);\n+            Array_Table.Free (Tree.Shared.Arrays);\n+            Package_Table.Free (Tree.Shared.Packages);\n+         end if;\n+\n          Source_Paths_Htable.Reset (Tree.Source_Paths_HT);\n          Source_Files_Htable.Reset (Tree.Source_Files_HT);\n \n@@ -917,13 +936,21 @@ package body Prj is\n    begin\n       --  Visible tables\n \n-      Name_List_Table.Init          (Tree.Name_Lists);\n-      Number_List_Table.Init        (Tree.Number_Lists);\n-      String_Element_Table.Init     (Tree.String_Elements);\n-      Variable_Element_Table.Init   (Tree.Variable_Elements);\n-      Array_Element_Table.Init      (Tree.Array_Elements);\n-      Array_Table.Init              (Tree.Arrays);\n-      Package_Table.Init            (Tree.Packages);\n+      if Tree.Is_Root_Tree then\n+         --  We cannot use 'Access here:\n+         --    \"illegal attribute for discriminant-dependent component\"\n+         --  However, we know this is valid since Shared and Shared_Data have\n+         --  the same lifetime and will always exist concurrently.\n+         Tree.Shared := Tree.Shared_Data'Unrestricted_Access;\n+         Name_List_Table.Init          (Tree.Shared.Name_Lists);\n+         Number_List_Table.Init        (Tree.Shared.Number_Lists);\n+         String_Element_Table.Init     (Tree.Shared.String_Elements);\n+         Variable_Element_Table.Init   (Tree.Shared.Variable_Elements);\n+         Array_Element_Table.Init      (Tree.Shared.Array_Elements);\n+         Array_Table.Init              (Tree.Shared.Arrays);\n+         Package_Table.Init            (Tree.Shared.Packages);\n+      end if;\n+\n       Source_Paths_Htable.Reset     (Tree.Source_Paths_HT);\n       Source_Files_Htable.Reset     (Tree.Source_Files_HT);\n       Replaced_Source_HTable.Reset  (Tree.Replaced_Sources);\n@@ -1110,16 +1137,23 @@ package body Prj is\n    procedure Compute_All_Imported_Projects (Tree : Project_Tree_Ref) is\n       Project : Project_Id;\n \n-      procedure Recursive_Add (Prj : Project_Id; Dummy : in out Boolean);\n+      procedure Recursive_Add\n+        (Prj   : Project_Id;\n+         Tree  : Project_Tree_Ref;\n+         Dummy : in out Boolean);\n       --  Recursively add the projects imported by project Project, but not\n       --  those that are extended.\n \n       -------------------\n       -- Recursive_Add --\n       -------------------\n \n-      procedure Recursive_Add (Prj : Project_Id; Dummy : in out Boolean) is\n-         pragma Unreferenced (Dummy);\n+      procedure Recursive_Add\n+        (Prj   : Project_Id;\n+         Tree  : Project_Tree_Ref;\n+         Dummy : in out Boolean)\n+      is\n+         pragma Unreferenced (Dummy, Tree);\n          List    : Project_List;\n          Prj2    : Project_Id;\n \n@@ -1163,7 +1197,7 @@ package body Prj is\n       while List /= null loop\n          Project := List.Project;\n          Free_List (Project.All_Imported_Projects, Free_Project => False);\n-         For_All_Projects (Project, Dummy);\n+         For_All_Projects (Project, Tree, Dummy, Include_Aggregated => False);\n          List := List.Next;\n       end loop;\n    end Compute_All_Imported_Projects;"}, {"sha": "9928bd3b2059d29f03398c4ac4c166609bceb7ba", "filename": "gcc/ada/prj.ads", "status": "modified", "additions": 60, "deletions": 27, "changes": 87, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/40ecf2f5d19ba2b046c65168aa8acc80ad399a08/gcc%2Fada%2Fprj.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/40ecf2f5d19ba2b046c65168aa8acc80ad399a08/gcc%2Fada%2Fprj.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fprj.ads?ref=40ecf2f5d19ba2b046c65168aa8acc80ad399a08", "patch": "@@ -1094,6 +1094,7 @@ package Prj is\n    type Aggregated_Project_List is access all Aggregated_Project;\n    type Aggregated_Project is record\n       Path    : Path_Name_Type;\n+      Tree    : Project_Tree_Ref;\n       Project : Project_Id;\n       Next    : Aggregated_Project_List;\n    end record;\n@@ -1400,41 +1401,68 @@ package Prj is\n    type Private_Project_Tree_Data is private;\n    --  Data for a project tree that is used only by the Project Manager\n \n-   type Project_Tree_Data is\n-      record\n-         Name_Lists        : Name_List_Table.Instance;\n-         Number_Lists      : Number_List_Table.Instance;\n-         String_Elements   : String_Element_Table.Instance;\n-         Variable_Elements : Variable_Element_Table.Instance;\n-         Array_Elements    : Array_Element_Table.Instance;\n-         Arrays            : Array_Table.Instance;\n-         Packages          : Package_Table.Instance;\n-         Projects          : Project_List;\n+   type Shared_Project_Tree_Data is record\n+      Name_Lists        : Name_List_Table.Instance;\n+      Number_Lists      : Number_List_Table.Instance;\n+      String_Elements   : String_Element_Table.Instance;\n+      Variable_Elements : Variable_Element_Table.Instance;\n+      Array_Elements    : Array_Element_Table.Instance;\n+      Arrays            : Array_Table.Instance;\n+      Packages          : Package_Table.Instance;\n+   end record;\n+   type Shared_Project_Tree_Data_Access is access all Shared_Project_Tree_Data;\n+   --  The data that is shared among multiple trees, when these trees are\n+   --  loaded through the same aggregate project.\n+   --  To avoid ambiguities, limit the number of parameters to the\n+   --  subprograms (we would have to parse the \"root project tree\" since this\n+   --  is where the configuration file was loaded, in addition to the project's\n+   --  own tree) and make the comparison of projects easier, all trees store\n+   --  the lists in the same tables.\n+\n+   type Project_Tree_Data (Is_Root_Tree : Boolean := True) is record\n+      --  The root tree is the one loaded by the user from the command line.\n+      --  Is_Root_Tree is only false for projects aggregated within a root\n+      --  aggregate project.\n+\n+      Projects : Project_List;\n+      --  List of projects in this tree\n+\n+      Replaced_Sources : Replaced_Source_HTable.Instance;\n+      --  The list of sources that have been replaced by sources with\n+      --  different file names.\n+\n+      Replaced_Source_Number : Natural := 0;\n+      --  The number of entries in Replaced_Sources\n \n-         Replaced_Sources : Replaced_Source_HTable.Instance;\n-         --  The list of sources that have been replaced by sources with\n-         --  different file names.\n+      Units_HT : Units_Htable.Instance;\n+      --  Unit name to Unit_Index (and from there to Source_Id)\n \n-         Replaced_Source_Number : Natural := 0;\n-         --  The number of entries in Replaced_Sources\n+      Source_Files_HT : Source_Files_Htable.Instance;\n+      --  Base source file names to Source_Id list.\n \n-         Units_HT : Units_Htable.Instance;\n-         --  Unit name to Unit_Index (and from there to Source_Id)\n+      Source_Paths_HT : Source_Paths_Htable.Instance;\n+      --  Full path to Source_Id\n \n-         Source_Files_HT : Source_Files_Htable.Instance;\n-         --  Base source file names to Source_Id list.\n+      Source_Info_File_Name : String_Access := null;\n+      --  The name of the source info file, if specified by the builder\n \n-         Source_Paths_HT : Source_Paths_Htable.Instance;\n-         --  Full path to Source_Id\n+      Source_Info_File_Exists : Boolean := False;\n+      --  True when a source info file has been successfully read\n \n-         Source_Info_File_Name : String_Access := null;\n-         --  The name of the source info file, if specified by the builder\n+      Private_Part : Private_Project_Tree_Data;\n \n-         Source_Info_File_Exists : Boolean := False;\n-         --  True when a source info file has been successfully read\n+      Shared : Shared_Project_Tree_Data_Access;\n+      --  The shared data for this tree and all aggregated trees.\n \n-         Private_Part : Private_Project_Tree_Data;\n-      end record;\n+      case Is_Root_Tree is\n+         when True =>\n+            Shared_Data : aliased Shared_Project_Tree_Data;\n+            --  Do not access directly, only through Shared.\n+\n+         when False =>\n+            null;\n+      end case;\n+   end record;\n    --  Data for a project tree\n \n    procedure Expect (The_Token : Token_Type; Token_Image : String);\n@@ -1463,9 +1491,11 @@ package Prj is\n       type State is limited private;\n       with procedure Action\n         (Project    : Project_Id;\n+         Tree       : Project_Tree_Ref;\n          With_State : in out State);\n    procedure For_Every_Project_Imported\n      (By                 : Project_Id;\n+      Tree               : Project_Tree_Ref;\n       With_State         : in out State;\n       Include_Aggregated : Boolean := True;\n       Imported_First     : Boolean := False);\n@@ -1488,6 +1518,9 @@ package Prj is\n    --  If Include_Aggregated is True, then an aggregate project will recurse\n    --  into the projects it aggregates. Otherwise, the latter are never\n    --  returned\n+   --\n+   --  The Tree argument passed to the callback is required in the case of\n+   --  aggregated projects, since they might not be using the same tree as 'By'\n \n    function Extend_Name\n      (File        : File_Name_Type;"}]}