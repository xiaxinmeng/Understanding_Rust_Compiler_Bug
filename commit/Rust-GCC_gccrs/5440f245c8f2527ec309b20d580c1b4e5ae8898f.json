{"sha": "5440f245c8f2527ec309b20d580c1b4e5ae8898f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTQ0MGYyNDVjOGYyNTI3ZWMzMDliMjBkNTgwYzFiNGU1YWU4ODk4Zg==", "commit": {"author": {"name": "Michael Meissner", "email": "meissner@gcc.gnu.org", "date": "2019-08-02T21:03:20Z"}, "committer": {"name": "Michael Meissner", "email": "meissner@gcc.gnu.org", "date": "2019-08-02T21:03:20Z"}, "message": "Add future.md.\n\n2019-08-02  Michael Meissner  <meissner@linux.ibm.com>\n\n\t* config/rs6000/future.md: New file.\n\t* config/rs6000/rs6000.md: Include future.md.\n\t* config/rs6000/t-rs6000 (MD_INCLUDES): Add future.md.\n\nFrom-SVN: r274030", "tree": {"sha": "e987d19be59f45be4c6f67638daee42c8871b658", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e987d19be59f45be4c6f67638daee42c8871b658"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5440f245c8f2527ec309b20d580c1b4e5ae8898f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5440f245c8f2527ec309b20d580c1b4e5ae8898f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5440f245c8f2527ec309b20d580c1b4e5ae8898f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5440f245c8f2527ec309b20d580c1b4e5ae8898f/comments", "author": null, "committer": null, "parents": [{"sha": "5d733372faa97c1c3943a20a252d000db37c738b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5d733372faa97c1c3943a20a252d000db37c738b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5d733372faa97c1c3943a20a252d000db37c738b"}], "stats": {"total": 523, "additions": 523, "deletions": 0}, "files": [{"sha": "454092b164d162f2fc7f9bd2d49b8dd41ab84883", "filename": "gcc/config/rs6000/future.md", "status": "added", "additions": 521, "deletions": 0, "changes": 521, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5440f245c8f2527ec309b20d580c1b4e5ae8898f/gcc%2Fconfig%2Frs6000%2Ffuture.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5440f245c8f2527ec309b20d580c1b4e5ae8898f/gcc%2Fconfig%2Frs6000%2Ffuture.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Ffuture.md?ref=5440f245c8f2527ec309b20d580c1b4e5ae8898f", "patch": "@@ -0,0 +1,521 @@\n+;; Scheduling description for a future IBM processor.\n+;; Copyright (C) 2016-2019 Free Software Foundation, Inc.\n+;;\n+;; This is a clone of power9.md.  It is intended to be a placeholder until a\n+;; real scheduler module can be contributed.\n+;; The original power9.md was contributed by Pat Haugen (pthaugen@us.ibm.com).\n+\n+;; This file is part of GCC.\n+;;\n+;; GCC is free software; you can redistribute it and/or modify it\n+;; under the terms of the GNU General Public License as published\n+;; by the Free Software Foundation; either version 3, or (at your\n+;; option) any later version.\n+;;\n+;; GCC is distributed in the hope that it will be useful, but WITHOUT\n+;; ANY WARRANTY; without even the implied warranty of MERCHANTABILITY\n+;; or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public\n+;; License for more details.\n+;;\n+;; You should have received a copy of the GNU General Public License\n+;; along with GCC; see the file COPYING3.  If not see\n+;; <http://www.gnu.org/licenses/>.\n+;;\n+;; This file was cloned from power9.md.  In the future, we will have future\n+;; specific optimizations here.\n+\n+(define_automaton \"futuredsp,futurelsu,futurevsu,futurefpdiv,futuremisc\")\n+\n+(define_cpu_unit \"lsu0_future,lsu1_future,lsu2_future,lsu3_future\" \"futurelsu\")\n+(define_cpu_unit \"vsu0_future,vsu1_future,vsu2_future,vsu3_future\" \"futurevsu\")\n+; Two vector permute units, part of vsu\n+(define_cpu_unit \"prm0_future,prm1_future\" \"futurevsu\")\n+; Two fixed point divide units, not pipelined\n+(define_cpu_unit \"fx_div0_future,fx_div1_future\" \"futuremisc\")\n+(define_cpu_unit \"bru_future,cryptu_future,dfu_future\" \"futuremisc\")\n+; Create a false unit for use by non-pipelined FP div/sqrt\n+(define_cpu_unit \"fp_div0_future,fp_div1_future,fp_div2_future,fp_div3_future\"\n+\t\t \"futurefpdiv\")\n+\n+\n+(define_cpu_unit \"x0_future,x1_future,xa0_future,xa1_future,\n+\t\t  x2_future,x3_future,xb0_future,xb1_future,\n+\t\t  br0_future,br1_future\" \"futuredsp\")\n+\n+\n+; Dispatch port reservations\n+;\n+; Future can dispatch a maximum of 6 iops per cycle with the following\n+; general restrictions (other restrictions also apply):\n+;   1) At most 2 iops per execution slice\n+;   2) At most 2 iops to the branch unit\n+; Note that insn position in a dispatch group of 6 insns does not infer which\n+; execution slice the insn is routed to.  The units are used to infer the\n+; conflicts that exist (i.e. an 'even' requirement will preclude dispatch\n+; with 2 insns with 'superslice' requirement).\n+\n+; The xa0/xa1 units really represent the 3rd dispatch port for a superslice but\n+; are listed as separate units to allow those insns that preclude its use to\n+; still be scheduled two to a superslice while reserving the 3rd slot.  The\n+; same applies for xb0/xb1.\n+(define_reservation \"DU_xa_future\" \"xa0_future+xa1_future\")\n+(define_reservation \"DU_xb_future\" \"xb0_future+xb1_future\")\n+\n+; Any execution slice dispatch\n+(define_reservation \"DU_any_future\"\n+\t\t    \"x0_future|x1_future|DU_xa_future|x2_future|x3_future|\n+\t\t     DU_xb_future\")\n+\n+; Even slice, actually takes even/odd slots\n+(define_reservation \"DU_even_future\" \"x0_future+x1_future|x2_future+x3_future\")\n+\n+; Slice plus 3rd slot\n+(define_reservation \"DU_slice_3_future\"\n+\t\t    \"x0_future+xa0_future|x1_future+xa1_future|\n+\t\t     x2_future+xb0_future|x3_future+xb1_future\")\n+\n+; Superslice\n+(define_reservation \"DU_super_future\"\n+\t\t    \"x0_future+x1_future|x2_future+x3_future\")\n+\n+; 2-way cracked\n+(define_reservation \"DU_C2_future\" \"x0_future+x1_future|\n+\t\t\t\t    x1_future+DU_xa_future|\n+\t\t\t\t    x1_future+x2_future|\n+\t\t\t\t    DU_xa_future+x2_future|\n+\t\t\t\t    x2_future+x3_future|\n+\t\t\t\t    x3_future+DU_xb_future\")\n+\n+; 2-way cracked plus 3rd slot\n+(define_reservation \"DU_C2_3_future\" \"x0_future+x1_future+xa0_future|\n+\t\t\t\t      x1_future+x2_future+xa1_future|\n+\t\t\t\t      x2_future+x3_future+xb0_future\")\n+\n+; 3-way cracked (consumes whole decode/dispatch cycle)\n+(define_reservation \"DU_C3_future\"\n+\t\t    \"x0_future+x1_future+xa0_future+xa1_future+x2_future+\n+\t\t     x3_future+xb0_future+xb1_future+br0_future+br1_future\")\n+\n+; Branch ports\n+(define_reservation \"DU_branch_future\" \"br0_future|br1_future\")\n+\n+\n+; Execution unit reservations\n+(define_reservation \"LSU_future\"\n+\t\t    \"lsu0_future|lsu1_future|lsu2_future|lsu3_future\")\n+\n+(define_reservation \"LSU_pair_future\"\n+\t\t    \"lsu0_future+lsu1_future|lsu1_future+lsu2_future|\n+\t\t     lsu2_future+lsu3_future|lsu3_future+lsu0_future\")\n+\n+(define_reservation \"VSU_future\"\n+\t\t    \"vsu0_future|vsu1_future|vsu2_future|vsu3_future\")\n+\n+(define_reservation \"VSU_super_future\"\n+\t\t    \"vsu0_future+vsu1_future|vsu2_future+vsu3_future\")\n+\n+(define_reservation \"VSU_PRM_future\" \"prm0_future|prm1_future\")\n+\n+; Define the reservation to be used by FP div/sqrt which allows other insns\n+; to be issued to the VSU, but blocks other div/sqrt for a number of cycles.\n+; Note that the number of cycles blocked varies depending on insn, but we\n+; just use the same number for all in order to keep the number of DFA states\n+; reasonable.\n+(define_reservation \"FP_DIV_future\"\n+\t\t    \"fp_div0_future*8|fp_div1_future*8|fp_div2_future*8|\n+\t\t     fp_div3_future*8\")\n+(define_reservation \"VEC_DIV_future\"\n+\t\t    \"fp_div0_future*8+fp_div1_future*8|\n+\t\t     fp_div2_future*8+fp_div3_future*8\")\n+\n+\n+; LS Unit\n+(define_insn_reservation \"future-load\" 4\n+  (and (eq_attr \"type\" \"load\")\n+       (eq_attr \"sign_extend\" \"no\")\n+       (eq_attr \"update\" \"no\")\n+       (eq_attr \"cpu\" \"future\"))\n+  \"DU_any_future,LSU_future\")\n+\n+(define_insn_reservation \"future-load-update\" 4\n+  (and (eq_attr \"type\" \"load\")\n+       (eq_attr \"sign_extend\" \"no\")\n+       (eq_attr \"update\" \"yes\")\n+       (eq_attr \"cpu\" \"future\"))\n+  \"DU_C2_future,LSU_future+VSU_future\")\n+\n+(define_insn_reservation \"future-load-ext\" 6\n+  (and (eq_attr \"type\" \"load\")\n+       (eq_attr \"sign_extend\" \"yes\")\n+       (eq_attr \"update\" \"no\")\n+       (eq_attr \"cpu\" \"future\"))\n+  \"DU_C2_future,LSU_future\")\n+\n+(define_insn_reservation \"future-load-ext-update\" 6\n+  (and (eq_attr \"type\" \"load\")\n+       (eq_attr \"sign_extend\" \"yes\")\n+       (eq_attr \"update\" \"yes\")\n+       (eq_attr \"cpu\" \"future\"))\n+  \"DU_C3_future,LSU_future+VSU_future\")\n+\n+(define_insn_reservation \"future-fpload-double\" 4\n+  (and (eq_attr \"type\" \"fpload\")\n+       (eq_attr \"update\" \"no\")\n+       (eq_attr \"size\" \"64\")\n+       (eq_attr \"cpu\" \"future\"))\n+  \"DU_slice_3_future,LSU_future\")\n+\n+(define_insn_reservation \"future-fpload-update-double\" 4\n+  (and (eq_attr \"type\" \"fpload\")\n+       (eq_attr \"update\" \"yes\")\n+       (eq_attr \"size\" \"64\")\n+       (eq_attr \"cpu\" \"future\"))\n+  \"DU_C2_3_future,LSU_future+VSU_future\")\n+\n+; SFmode loads are cracked and have additional 2 cycles over DFmode\n+(define_insn_reservation \"future-fpload-single\" 6\n+  (and (eq_attr \"type\" \"fpload\")\n+       (eq_attr \"update\" \"no\")\n+       (eq_attr \"size\" \"32\")\n+       (eq_attr \"cpu\" \"future\"))\n+  \"DU_C2_3_future,LSU_future\")\n+\n+(define_insn_reservation \"future-fpload-update-single\" 6\n+  (and (eq_attr \"type\" \"fpload\")\n+       (eq_attr \"update\" \"yes\")\n+       (eq_attr \"size\" \"32\")\n+       (eq_attr \"cpu\" \"future\"))\n+  \"DU_C3_future,LSU_future+VSU_future\")\n+\n+(define_insn_reservation \"future-vecload\" 5\n+  (and (eq_attr \"type\" \"vecload\")\n+       (eq_attr \"cpu\" \"future\"))\n+  \"DU_any_future,LSU_pair_future\")\n+\n+; Store data can issue 2 cycles after AGEN issue, 3 cycles for vector store\n+(define_insn_reservation \"future-store\" 0\n+  (and (eq_attr \"type\" \"store\")\n+       (eq_attr \"update\" \"no\")\n+       (eq_attr \"indexed\" \"no\")\n+       (eq_attr \"cpu\" \"future\"))\n+  \"DU_slice_3_future,LSU_future\")\n+\n+(define_insn_reservation \"future-store-indexed\" 0\n+  (and (eq_attr \"type\" \"store\")\n+       (eq_attr \"update\" \"no\")\n+       (eq_attr \"indexed\" \"yes\")\n+       (eq_attr \"cpu\" \"future\"))\n+  \"DU_slice_3_future,LSU_future\")\n+\n+; Update forms have 2 cycle latency for updated addr reg\n+(define_insn_reservation \"future-store-update\" 2\n+  (and (eq_attr \"type\" \"store\")\n+       (eq_attr \"update\" \"yes\")\n+       (eq_attr \"indexed\" \"no\")\n+       (eq_attr \"cpu\" \"future\"))\n+  \"DU_C2_3_future,LSU_future+VSU_future\")\n+\n+; Update forms have 2 cycle latency for updated addr reg\n+(define_insn_reservation \"future-store-update-indexed\" 2\n+  (and (eq_attr \"type\" \"store\")\n+       (eq_attr \"update\" \"yes\")\n+       (eq_attr \"indexed\" \"yes\")\n+       (eq_attr \"cpu\" \"future\"))\n+  \"DU_C2_3_future,LSU_future+VSU_future\")\n+\n+(define_insn_reservation \"future-fpstore\" 0\n+  (and (eq_attr \"type\" \"fpstore\")\n+       (eq_attr \"update\" \"no\")\n+       (eq_attr \"cpu\" \"future\"))\n+  \"DU_slice_3_future,LSU_future\")\n+\n+; Update forms have 2 cycle latency for updated addr reg\n+(define_insn_reservation \"future-fpstore-update\" 2\n+  (and (eq_attr \"type\" \"fpstore\")\n+       (eq_attr \"update\" \"yes\")\n+       (eq_attr \"cpu\" \"future\"))\n+  \"DU_C2_3_future,LSU_future+VSU_future\")\n+\n+(define_insn_reservation \"future-vecstore\" 0\n+  (and (eq_attr \"type\" \"vecstore\")\n+       (eq_attr \"cpu\" \"future\"))\n+  \"DU_super_future,LSU_pair_future\")\n+\n+(define_insn_reservation \"future-larx\" 4\n+  (and (eq_attr \"type\" \"load_l\")\n+       (eq_attr \"cpu\" \"future\"))\n+  \"DU_any_future,LSU_future\")\n+\n+(define_insn_reservation \"future-stcx\" 2\n+  (and (eq_attr \"type\" \"store_c\")\n+       (eq_attr \"cpu\" \"future\"))\n+  \"DU_C2_3_future,LSU_future+VSU_future\")\n+\n+(define_insn_reservation \"future-sync\" 4\n+  (and (eq_attr \"type\" \"sync,isync\")\n+       (eq_attr \"cpu\" \"future\"))\n+  \"DU_any_future,LSU_future\")\n+\n+\n+; VSU Execution Unit\n+\n+; Fixed point ops\n+\n+; Most ALU insns are simple 2 cycle, including record form\n+(define_insn_reservation \"future-alu\" 2\n+  (and (eq_attr \"type\" \"add,exts,integer,logical,isel\")\n+       (eq_attr \"cpu\" \"future\"))\n+  \"DU_any_future,VSU_future\")\n+; 5 cycle CR latency\n+(define_bypass 5 \"future-alu\"\n+\t\t \"future-crlogical,future-mfcr,future-mfcrf\")\n+\n+; Rotate/shift prevent use of third slot\n+(define_insn_reservation \"future-rot\" 2\n+  (and (eq_attr \"type\" \"insert,shift\")\n+       (eq_attr \"dot\" \"no\")\n+       (eq_attr \"cpu\" \"future\"))\n+  \"DU_slice_3_future,VSU_future\")\n+\n+; Record form rotate/shift are cracked\n+(define_insn_reservation \"future-cracked-alu\" 2\n+  (and (eq_attr \"type\" \"insert,shift\")\n+       (eq_attr \"dot\" \"yes\")\n+       (eq_attr \"cpu\" \"future\"))\n+  \"DU_C2_3_future,VSU_future\")\n+; 7 cycle CR latency\n+(define_bypass 7 \"future-cracked-alu\"\n+\t\t \"future-crlogical,future-mfcr,future-mfcrf\")\n+\n+(define_insn_reservation \"future-alu2\" 3\n+  (and (eq_attr \"type\" \"cntlz,popcnt,trap\")\n+       (eq_attr \"cpu\" \"future\"))\n+  \"DU_any_future,VSU_future\")\n+; 6 cycle CR latency\n+(define_bypass 6 \"future-alu2\"\n+\t\t \"future-crlogical,future-mfcr,future-mfcrf\")\n+\n+(define_insn_reservation \"future-cmp\" 2\n+  (and (eq_attr \"type\" \"cmp\")\n+       (eq_attr \"cpu\" \"future\"))\n+  \"DU_any_future,VSU_future\")\n+\n+\n+; Treat 'two' and 'three' types as 2 or 3 way cracked\n+(define_insn_reservation \"future-two\" 4\n+  (and (eq_attr \"type\" \"two\")\n+       (eq_attr \"cpu\" \"future\"))\n+  \"DU_C2_future,VSU_future\")\n+\n+(define_insn_reservation \"future-three\" 6\n+  (and (eq_attr \"type\" \"three\")\n+       (eq_attr \"cpu\" \"future\"))\n+  \"DU_C3_future,VSU_future\")\n+\n+(define_insn_reservation \"future-mul\" 5\n+  (and (eq_attr \"type\" \"mul\")\n+       (eq_attr \"dot\" \"no\")\n+       (eq_attr \"cpu\" \"future\"))\n+  \"DU_slice_3_future,VSU_future\")\n+\n+(define_insn_reservation \"future-mul-compare\" 5\n+  (and (eq_attr \"type\" \"mul\")\n+       (eq_attr \"dot\" \"yes\")\n+       (eq_attr \"cpu\" \"future\"))\n+  \"DU_C2_3_future,VSU_future\")\n+; 10 cycle CR latency\n+(define_bypass 10 \"future-mul-compare\"\n+\t\t \"future-crlogical,future-mfcr,future-mfcrf\")\n+\n+; Fixed point divides reserve the divide units for a minimum of 8 cycles\n+(define_insn_reservation \"future-idiv\" 16\n+  (and (eq_attr \"type\" \"div\")\n+       (eq_attr \"size\" \"32\")\n+       (eq_attr \"cpu\" \"future\"))\n+  \"DU_even_future,fx_div0_future*8|fx_div1_future*8\")\n+\n+(define_insn_reservation \"future-ldiv\" 24\n+  (and (eq_attr \"type\" \"div\")\n+       (eq_attr \"size\" \"64\")\n+       (eq_attr \"cpu\" \"future\"))\n+  \"DU_even_future,fx_div0_future*8|fx_div1_future*8\")\n+\n+(define_insn_reservation \"future-crlogical\" 2\n+  (and (eq_attr \"type\" \"cr_logical\")\n+       (eq_attr \"cpu\" \"future\"))\n+  \"DU_any_future,VSU_future\")\n+\n+(define_insn_reservation \"future-mfcrf\" 2\n+  (and (eq_attr \"type\" \"mfcrf\")\n+       (eq_attr \"cpu\" \"future\"))\n+  \"DU_any_future,VSU_future\")\n+\n+(define_insn_reservation \"future-mfcr\" 6\n+  (and (eq_attr \"type\" \"mfcr\")\n+       (eq_attr \"cpu\" \"future\"))\n+  \"DU_C3_future,VSU_future\")\n+\n+; Should differentiate between 1 cr field and > 1 since target of > 1 cr\n+; is cracked\n+(define_insn_reservation \"future-mtcr\" 2\n+  (and (eq_attr \"type\" \"mtcr\")\n+       (eq_attr \"cpu\" \"future\"))\n+  \"DU_any_future,VSU_future\")\n+\n+; Move to LR/CTR are executed in VSU\n+(define_insn_reservation \"future-mtjmpr\" 5\n+  (and (eq_attr \"type\" \"mtjmpr\")\n+       (eq_attr \"cpu\" \"future\"))\n+  \"DU_any_future,VSU_future\")\n+\n+; Floating point/Vector ops\n+(define_insn_reservation \"future-fpsimple\" 2\n+  (and (eq_attr \"type\" \"fpsimple\")\n+       (eq_attr \"cpu\" \"future\"))\n+  \"DU_slice_3_future,VSU_future\")\n+\n+(define_insn_reservation \"future-fp\" 5\n+  (and (eq_attr \"type\" \"fp,dmul\")\n+       (eq_attr \"cpu\" \"future\"))\n+  \"DU_slice_3_future,VSU_future\")\n+\n+(define_insn_reservation \"future-fpcompare\" 3\n+  (and (eq_attr \"type\" \"fpcompare\")\n+       (eq_attr \"cpu\" \"future\"))\n+  \"DU_slice_3_future,VSU_future\")\n+\n+; FP div/sqrt are executed in the VSU slices.  They are not pipelined wrt other\n+; div/sqrt insns, but for the most part do not block pipelined ops.\n+(define_insn_reservation \"future-sdiv\" 22\n+  (and (eq_attr \"type\" \"sdiv\")\n+       (eq_attr \"cpu\" \"future\"))\n+  \"DU_slice_3_future,VSU_future,FP_DIV_future\")\n+\n+(define_insn_reservation \"future-ddiv\" 27\n+  (and (eq_attr \"type\" \"ddiv\")\n+       (eq_attr \"cpu\" \"future\"))\n+  \"DU_slice_3_future,VSU_future,FP_DIV_future\")\n+\n+(define_insn_reservation \"future-sqrt\" 26\n+  (and (eq_attr \"type\" \"ssqrt\")\n+       (eq_attr \"cpu\" \"future\"))\n+  \"DU_slice_3_future,VSU_future,FP_DIV_future\")\n+\n+(define_insn_reservation \"future-dsqrt\" 36\n+  (and (eq_attr \"type\" \"dsqrt\")\n+       (eq_attr \"cpu\" \"future\"))\n+  \"DU_slice_3_future,VSU_future,FP_DIV_future\")\n+\n+(define_insn_reservation \"future-vec-2cyc\" 2\n+  (and (eq_attr \"type\" \"vecmove,veclogical,vecexts,veccmpfx\")\n+       (eq_attr \"cpu\" \"future\"))\n+  \"DU_super_future,VSU_super_future\")\n+\n+(define_insn_reservation \"future-veccmp\" 3\n+  (and (eq_attr \"type\" \"veccmp\")\n+       (eq_attr \"cpu\" \"future\"))\n+  \"DU_super_future,VSU_super_future\")\n+\n+(define_insn_reservation \"future-vecsimple\" 3\n+  (and (eq_attr \"type\" \"vecsimple\")\n+       (eq_attr \"cpu\" \"future\"))\n+  \"DU_super_future,VSU_super_future\")\n+\n+(define_insn_reservation \"future-vecnormal\" 7\n+  (and (eq_attr \"type\" \"vecfloat,vecdouble\")\n+       (eq_attr \"size\" \"!128\")\n+       (eq_attr \"cpu\" \"future\"))\n+  \"DU_super_future,VSU_super_future\")\n+\n+; Quad-precision FP ops, execute in DFU\n+(define_insn_reservation \"future-qp\" 12\n+  (and (eq_attr \"type\" \"vecfloat,vecdouble\")\n+       (eq_attr \"size\" \"128\")\n+       (eq_attr \"cpu\" \"future\"))\n+  \"DU_super_future,dfu_future\")\n+\n+(define_insn_reservation \"future-vecperm\" 3\n+  (and (eq_attr \"type\" \"vecperm\")\n+       (eq_attr \"cpu\" \"future\"))\n+  \"DU_super_future,VSU_PRM_future\")\n+\n+(define_insn_reservation \"future-veccomplex\" 7\n+  (and (eq_attr \"type\" \"veccomplex\")\n+       (eq_attr \"cpu\" \"future\"))\n+  \"DU_super_future,VSU_super_future\")\n+\n+(define_insn_reservation \"future-vecfdiv\" 24\n+  (and (eq_attr \"type\" \"vecfdiv\")\n+       (eq_attr \"cpu\" \"future\"))\n+  \"DU_super_future,VSU_super_future,VEC_DIV_future\")\n+\n+(define_insn_reservation \"future-vecdiv\" 27\n+  (and (eq_attr \"type\" \"vecdiv\")\n+       (eq_attr \"size\" \"!128\")\n+       (eq_attr \"cpu\" \"future\"))\n+  \"DU_super_future,VSU_super_future,VEC_DIV_future\")\n+\n+; Use 8 for DFU reservation on QP div/mul to limit DFA state size\n+(define_insn_reservation \"future-qpdiv\" 56\n+  (and (eq_attr \"type\" \"vecdiv\")\n+       (eq_attr \"size\" \"128\")\n+       (eq_attr \"cpu\" \"future\"))\n+  \"DU_super_future,dfu_future*8\")\n+\n+(define_insn_reservation \"future-qpmul\" 24\n+  (and (eq_attr \"type\" \"qmul\")\n+       (eq_attr \"size\" \"128\")\n+       (eq_attr \"cpu\" \"future\"))\n+  \"DU_super_future,dfu_future*8\")\n+\n+(define_insn_reservation \"future-mffgpr\" 2\n+  (and (eq_attr \"type\" \"mffgpr\")\n+       (eq_attr \"cpu\" \"future\"))\n+  \"DU_slice_3_future,VSU_future\")\n+\n+(define_insn_reservation \"future-mftgpr\" 2\n+  (and (eq_attr \"type\" \"mftgpr\")\n+       (eq_attr \"cpu\" \"future\"))\n+  \"DU_slice_3_future,VSU_future\")\n+\n+\n+; Branch Unit\n+; Move from LR/CTR are executed in BRU but consume a writeback port from an\n+; execution slice.\n+(define_insn_reservation \"future-mfjmpr\" 6\n+  (and (eq_attr \"type\" \"mfjmpr\")\n+       (eq_attr \"cpu\" \"future\"))\n+  \"DU_branch_future,bru_future+VSU_future\")\n+\n+; Branch is 2 cycles\n+(define_insn_reservation \"future-branch\" 2\n+  (and (eq_attr \"type\" \"jmpreg,branch\")\n+       (eq_attr \"cpu\" \"future\"))\n+  \"DU_branch_future,bru_future\")\n+\n+\n+; Crypto Unit\n+(define_insn_reservation \"future-crypto\" 6\n+  (and (eq_attr \"type\" \"crypto\")\n+       (eq_attr \"cpu\" \"future\"))\n+  \"DU_super_future,cryptu_future\")\n+\n+\n+; HTM Unit\n+(define_insn_reservation \"future-htm\" 4\n+  (and (eq_attr \"type\" \"htm\")\n+       (eq_attr \"cpu\" \"future\"))\n+  \"DU_C2_future,LSU_future\")\n+\n+(define_insn_reservation \"future-htm-simple\" 2\n+  (and (eq_attr \"type\" \"htmsimple\")\n+       (eq_attr \"cpu\" \"future\"))\n+  \"DU_any_future,VSU_future\")\n+\n+\n+; DFP Unit\n+(define_insn_reservation \"future-dfp\" 12\n+  (and (eq_attr \"type\" \"dfp\")\n+       (eq_attr \"cpu\" \"future\"))\n+  \"DU_even_future,dfu_future\")\n+"}, {"sha": "9a7a1da987fa71e2dbc72aafda49513d93ebd915", "filename": "gcc/config/rs6000/rs6000.md", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5440f245c8f2527ec309b20d580c1b4e5ae8898f/gcc%2Fconfig%2Frs6000%2Frs6000.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5440f245c8f2527ec309b20d580c1b4e5ae8898f/gcc%2Fconfig%2Frs6000%2Frs6000.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.md?ref=5440f245c8f2527ec309b20d580c1b4e5ae8898f", "patch": "@@ -349,6 +349,7 @@\n (include \"power7.md\")\n (include \"power8.md\")\n (include \"power9.md\")\n+(include \"future.md\")\n (include \"cell.md\")\n (include \"a2.md\")\n (include \"titan.md\")"}, {"sha": "c2da3032872309ddcac75483691c41e3058b144b", "filename": "gcc/config/rs6000/t-rs6000", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5440f245c8f2527ec309b20d580c1b4e5ae8898f/gcc%2Fconfig%2Frs6000%2Ft-rs6000", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5440f245c8f2527ec309b20d580c1b4e5ae8898f/gcc%2Fconfig%2Frs6000%2Ft-rs6000", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Ft-rs6000?ref=5440f245c8f2527ec309b20d580c1b4e5ae8898f", "patch": "@@ -73,6 +73,7 @@ MD_INCLUDES = $(srcdir)/config/rs6000/rs64.md \\\n \t$(srcdir)/config/rs6000/power7.md \\\n \t$(srcdir)/config/rs6000/power8.md \\\n \t$(srcdir)/config/rs6000/power9.md \\\n+\t$(srcdir)/config/rs6000/future.md \\\n \t$(srcdir)/config/rs6000/cell.md \\\n \t$(srcdir)/config/rs6000/a2.md \\\n \t$(srcdir)/config/rs6000/predicates.md \\"}]}