{"sha": "298b0db76dfcc82427d987fbbd239afcb0c3dbfd", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Mjk4YjBkYjc2ZGZjYzgyNDI3ZDk4N2ZiYmQyMzlhZmNiMGMzZGJmZA==", "commit": {"author": {"name": "Richard Sandiford", "email": "richard.sandiford@arm.com", "date": "2021-07-08T11:49:44Z"}, "committer": {"name": "Richard Sandiford", "email": "richard.sandiford@arm.com", "date": "2021-07-08T11:49:44Z"}, "message": "match.pd: Relax rule to include POLY_INT_CSTs\n\nmatch.pd has a rule to simplify an extension, operation and truncation\nback to the original type:\n\n (simplify\n   (convert (op:s@0 (convert1?@3 @1) (convert2?@4 @2)))\n\nCurrently it handles cases in which @2 is an INTEGER_CST, but it\nalso works for POLY_INT_CSTs.[*]\n\nFor INTEGER_CST it doesn't matter whether we test @2 or @4,\nbut for POLY_INT_CST it is possible to have unfolded (convert \u2026)s.\n\nOriginally I saw this leading to some bad ivopts decisions, because\nwe weren't folding away redundancies from candidate iv expressions.\nIt's also possible to test the fold directly using the SVE ACLE.\n\n[*] Not all INTEGER_CST rules work for POLY_INT_CSTs, since extensions\n    don't necessarily distribute over the internals of the POLY_INT_CST.\n    But in this case that isn't an issue.\n\ngcc/\n\t* match.pd: Simplify an extend-operate-truncate sequence involving\n\ta POLY_INT_CST.\n\ngcc/testsuite/\n\t* gcc.target/aarch64/sve/acle/general/cntb_1.c: New test.", "tree": {"sha": "b9a4ed38ef7bd5978d94b6fca062d14034c8eb9b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b9a4ed38ef7bd5978d94b6fca062d14034c8eb9b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/298b0db76dfcc82427d987fbbd239afcb0c3dbfd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/298b0db76dfcc82427d987fbbd239afcb0c3dbfd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/298b0db76dfcc82427d987fbbd239afcb0c3dbfd", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/298b0db76dfcc82427d987fbbd239afcb0c3dbfd/comments", "author": {"login": "rsandifo-arm", "id": 28043039, "node_id": "MDQ6VXNlcjI4MDQzMDM5", "avatar_url": "https://avatars.githubusercontent.com/u/28043039?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo-arm", "html_url": "https://github.com/rsandifo-arm", "followers_url": "https://api.github.com/users/rsandifo-arm/followers", "following_url": "https://api.github.com/users/rsandifo-arm/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo-arm/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo-arm/orgs", "repos_url": "https://api.github.com/users/rsandifo-arm/repos", "events_url": "https://api.github.com/users/rsandifo-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo-arm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rsandifo-arm", "id": 28043039, "node_id": "MDQ6VXNlcjI4MDQzMDM5", "avatar_url": "https://avatars.githubusercontent.com/u/28043039?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo-arm", "html_url": "https://github.com/rsandifo-arm", "followers_url": "https://api.github.com/users/rsandifo-arm/followers", "following_url": "https://api.github.com/users/rsandifo-arm/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo-arm/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo-arm/orgs", "repos_url": "https://api.github.com/users/rsandifo-arm/repos", "events_url": "https://api.github.com/users/rsandifo-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo-arm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4c619132b3f14dc5e672a7f2f0e09cb784193559", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4c619132b3f14dc5e672a7f2f0e09cb784193559", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4c619132b3f14dc5e672a7f2f0e09cb784193559"}], "stats": {"total": 16, "additions": 15, "deletions": 1}, "files": [{"sha": "30680d488ab7e39b407e07f6678d6884a911ef5c", "filename": "gcc/match.pd", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/298b0db76dfcc82427d987fbbd239afcb0c3dbfd/gcc%2Fmatch.pd", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/298b0db76dfcc82427d987fbbd239afcb0c3dbfd/gcc%2Fmatch.pd", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fmatch.pd?ref=298b0db76dfcc82427d987fbbd239afcb0c3dbfd", "patch": "@@ -6175,7 +6175,7 @@ DEFINE_INT_AND_FLOAT_ROUND_FN (RINT)\n \t&& (types_match (@1, @2)\n \t    /* Or the second operand is const integer or converted const\n \t       integer from valueize.  */\n-\t    || TREE_CODE (@2) == INTEGER_CST))\n+\t    || poly_int_tree_p (@4)))\n      (if (TYPE_OVERFLOW_WRAPS (TREE_TYPE (@1)))\n        (op @1 (convert @2))\n        (with { tree utype = unsigned_type_for (TREE_TYPE (@1)); }"}, {"sha": "b43fcf0ed6da392390151c18b30ba4df8f540647", "filename": "gcc/testsuite/gcc.target/aarch64/sve/acle/general/cntb_1.c", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/298b0db76dfcc82427d987fbbd239afcb0c3dbfd/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fgeneral%2Fcntb_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/298b0db76dfcc82427d987fbbd239afcb0c3dbfd/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fgeneral%2Fcntb_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fgeneral%2Fcntb_1.c?ref=298b0db76dfcc82427d987fbbd239afcb0c3dbfd", "patch": "@@ -0,0 +1,14 @@\n+/* { dg-options \"-O -fdump-tree-optimized\" } */\n+\n+#include <arm_sve.h>\n+\n+unsigned int\n+foo (unsigned int x)\n+{\n+  unsigned long tmp = x;\n+  tmp += svcntb ();\n+  x = tmp;\n+  return x - svcntb ();\n+}\n+\n+/* { dg-final { scan-tree-dump-not { POLY_INT_CST } optimized } } */"}]}