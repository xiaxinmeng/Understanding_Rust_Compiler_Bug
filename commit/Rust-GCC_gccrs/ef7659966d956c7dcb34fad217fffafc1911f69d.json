{"sha": "ef7659966d956c7dcb34fad217fffafc1911f69d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWY3NjU5OTY2ZDk1NmM3ZGNiMzRmYWQyMTdmZmZhZmMxOTExZjY5ZA==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2010-10-15T21:15:13Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2010-10-15T21:15:13Z"}, "message": "re PR c++/45983 (ICE: tree code 'template_parm_index' is not supported in gimple streams with -lto)\n\n\tPR c++/45983\n\t* tree.c (cp_build_qualified_type_real): Don't reuse a variant\n\twith a different typedef variant of the element type.\n\nFrom-SVN: r165521", "tree": {"sha": "04e8ce07ecd9ef6d8a2ee44b60e0862acc2f4b41", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/04e8ce07ecd9ef6d8a2ee44b60e0862acc2f4b41"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ef7659966d956c7dcb34fad217fffafc1911f69d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ef7659966d956c7dcb34fad217fffafc1911f69d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ef7659966d956c7dcb34fad217fffafc1911f69d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ef7659966d956c7dcb34fad217fffafc1911f69d/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "ba49275257912a32b155821a257024b7a6f1f0c1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ba49275257912a32b155821a257024b7a6f1f0c1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ba49275257912a32b155821a257024b7a6f1f0c1"}], "stats": {"total": 32, "additions": 31, "deletions": 1}, "files": [{"sha": "16b930793ed76fccc0cf0e05f3379c4492d3a4ae", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ef7659966d956c7dcb34fad217fffafc1911f69d/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ef7659966d956c7dcb34fad217fffafc1911f69d/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=ef7659966d956c7dcb34fad217fffafc1911f69d", "patch": "@@ -1,3 +1,9 @@\n+2010-10-15  Jason Merrill  <jason@redhat.com>\n+\n+\tPR c++/45983\n+\t* tree.c (cp_build_qualified_type_real): Don't reuse a variant\n+\twith a different typedef variant of the element type.\n+\n 2010-10-14  Iain Sandoe  <iains@gcc.gnu.org>\n \n \tmerge from FSF apple 'trunk' branch. "}, {"sha": "b8f76b02a1823582e0a61f95991f5ab18149f01f", "filename": "gcc/cp/tree.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ef7659966d956c7dcb34fad217fffafc1911f69d/gcc%2Fcp%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ef7659966d956c7dcb34fad217fffafc1911f69d/gcc%2Fcp%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftree.c?ref=ef7659966d956c7dcb34fad217fffafc1911f69d", "patch": "@@ -810,7 +810,7 @@ cp_build_qualified_type_real (tree type,\n       /* See if we already have an identically qualified type.  Tests\n \t should be equivalent to those in check_qualified_type.  */\n       for (t = TYPE_MAIN_VARIANT (type); t; t = TYPE_NEXT_VARIANT (t))\n-\tif (cp_type_quals (t) == type_quals\n+\tif (TREE_TYPE (t) == element_type\n \t    && TYPE_NAME (t) == TYPE_NAME (type)\n \t    && TYPE_CONTEXT (t) == TYPE_CONTEXT (type)\n \t    && attribute_list_equal (TYPE_ATTRIBUTES (t),"}, {"sha": "deec8b82cae935f8669a88ea388ab34369620bf5", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ef7659966d956c7dcb34fad217fffafc1911f69d/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ef7659966d956c7dcb34fad217fffafc1911f69d/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=ef7659966d956c7dcb34fad217fffafc1911f69d", "patch": "@@ -1,3 +1,7 @@\n+2010-10-15  Jason Merrill  <jason@redhat.com>\n+\n+\t* g++.dg/lto/pr45983_0.C: New.\n+\n 2010-10-14  Michael Meissner  <meissner@linux.vnet.ibm.com>\n \n \t* gcc.target/powerpc/ppc-fma-1.c: New tests for powerpc FMA"}, {"sha": "a2c9ba6092d0e05e60201e58c7ec9dd75c948ba9", "filename": "gcc/testsuite/g++.dg/lto/pr45983_0.C", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ef7659966d956c7dcb34fad217fffafc1911f69d/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flto%2Fpr45983_0.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ef7659966d956c7dcb34fad217fffafc1911f69d/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flto%2Fpr45983_0.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flto%2Fpr45983_0.C?ref=ef7659966d956c7dcb34fad217fffafc1911f69d", "patch": "@@ -0,0 +1,20 @@\n+// PR c++/45983\n+\n+template <int N>\n+class T1 {\n+    int m[N];\n+    typedef float scalar_type_t;\n+    typedef scalar_type_t scalar_array_t[1];\n+    const scalar_array_t &decay(void) const;\n+};\n+class T2 {\n+public:\n+    float vals[1];\n+    float get_value(void) const { return vals[0]; }\n+};\n+T2 channel_params;\n+float output_audio(void) {\n+    return channel_params.get_value();\n+}\n+\n+int main(){}"}]}