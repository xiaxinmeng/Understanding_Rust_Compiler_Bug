{"sha": "665c5bad168ab63629b29ed2ce08ed042c088dc2", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjY1YzViYWQxNjhhYjYzNjI5YjI5ZWQyY2UwOGVkMDQyYzA4OGRjMg==", "commit": {"author": {"name": "Martin Jambor", "email": "mjambor@suse.cz", "date": "2020-02-19T10:08:40Z"}, "committer": {"name": "Martin Jambor", "email": "mjambor@suse.cz", "date": "2020-02-19T10:08:40Z"}, "message": "sra: Avoid totally scalarizing overallping field_decls (PR 93667)\n\n[[no_unique_address]] C++ attribute can cause two fields of a\nRECORD_TYPE overlap, which currently confuses the totally scalarizing\ncode into creating invalid access tree.  For GCC 10, I'd like to\nsimply disable total scalarization of types where this happens.\n\nFor GCC 11 I'll write down a TODO item to enable total scalarization\nof cases like this where the problematic fields are basically empty -\ndespite having a non-zero size - i.e. when they are just RECORD_TYPEs\nwithout any data fields.\n\n2020-02-19  Martin Jambor  <mjambor@suse.cz>\n\n\tgcc/\n\n\tPR tree-optimization/93667\n\t* tree-sra.c (scalarizable_type_p): Return false if record fields\n\tdo not follow wach other.\n\n\tgcc/testsuite/\n\n\tPR tree-optimization/93667\n\t* g++.dg/tree-ssa/pr93667.C: New test.", "tree": {"sha": "ecb4038880ce3d049ab4985c927936c0b7af96ee", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ecb4038880ce3d049ab4985c927936c0b7af96ee"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/665c5bad168ab63629b29ed2ce08ed042c088dc2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/665c5bad168ab63629b29ed2ce08ed042c088dc2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/665c5bad168ab63629b29ed2ce08ed042c088dc2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/665c5bad168ab63629b29ed2ce08ed042c088dc2/comments", "author": {"login": "jamborm", "id": 2180070, "node_id": "MDQ6VXNlcjIxODAwNzA=", "avatar_url": "https://avatars.githubusercontent.com/u/2180070?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jamborm", "html_url": "https://github.com/jamborm", "followers_url": "https://api.github.com/users/jamborm/followers", "following_url": "https://api.github.com/users/jamborm/following{/other_user}", "gists_url": "https://api.github.com/users/jamborm/gists{/gist_id}", "starred_url": "https://api.github.com/users/jamborm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jamborm/subscriptions", "organizations_url": "https://api.github.com/users/jamborm/orgs", "repos_url": "https://api.github.com/users/jamborm/repos", "events_url": "https://api.github.com/users/jamborm/events{/privacy}", "received_events_url": "https://api.github.com/users/jamborm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jamborm", "id": 2180070, "node_id": "MDQ6VXNlcjIxODAwNzA=", "avatar_url": "https://avatars.githubusercontent.com/u/2180070?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jamborm", "html_url": "https://github.com/jamborm", "followers_url": "https://api.github.com/users/jamborm/followers", "following_url": "https://api.github.com/users/jamborm/following{/other_user}", "gists_url": "https://api.github.com/users/jamborm/gists{/gist_id}", "starred_url": "https://api.github.com/users/jamborm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jamborm/subscriptions", "organizations_url": "https://api.github.com/users/jamborm/orgs", "repos_url": "https://api.github.com/users/jamborm/repos", "events_url": "https://api.github.com/users/jamborm/events{/privacy}", "received_events_url": "https://api.github.com/users/jamborm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8d1a1cb1b816381bf60cb1211c93b8eba1fe1472", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8d1a1cb1b816381bf60cb1211c93b8eba1fe1472", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8d1a1cb1b816381bf60cb1211c93b8eba1fe1472"}], "stats": {"total": 36, "additions": 36, "deletions": 0}, "files": [{"sha": "6b53f9a2f07e4b999ab4971f6fd1868df06133f4", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/665c5bad168ab63629b29ed2ce08ed042c088dc2/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/665c5bad168ab63629b29ed2ce08ed042c088dc2/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=665c5bad168ab63629b29ed2ce08ed042c088dc2", "patch": "@@ -1,3 +1,9 @@\n+2020-02-19  Martin Jambor  <mjambor@suse.cz>\n+\n+\tPR tree-optimization/93667\n+\t* tree-sra.c (scalarizable_type_p): Return false if record fields\n+\tdo not follow wach other.\n+\n 2020-01-21  Kito Cheng  <kito.cheng@sifive.com>\n \n \t* config/riscv/riscv.c (riscv_output_move) Using fmv.x.w/fmv.w.x"}, {"sha": "8033fa0a3bb009789d57da1e66f3a7da38b9c9e1", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/665c5bad168ab63629b29ed2ce08ed042c088dc2/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/665c5bad168ab63629b29ed2ce08ed042c088dc2/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=665c5bad168ab63629b29ed2ce08ed042c088dc2", "patch": "@@ -1,3 +1,8 @@\n+2020-02-19  Martin Jambor  <mjambor@suse.cz>\n+\n+\tPR tree-optimization/93667\n+\t* g++.dg/tree-ssa/pr93667.C: New test.\n+\n 2020-02-19  Hongtao Liu  <hongtao.liu@intel.com>\n \n \t* g++.dg/other/i386-2.C: add -mavx512vbmi2"}, {"sha": "d875f53d9ec91ba57e2b445c6d9f3f1348597c5c", "filename": "gcc/testsuite/g++.dg/tree-ssa/pr93667.C", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/665c5bad168ab63629b29ed2ce08ed042c088dc2/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftree-ssa%2Fpr93667.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/665c5bad168ab63629b29ed2ce08ed042c088dc2/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftree-ssa%2Fpr93667.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftree-ssa%2Fpr93667.C?ref=665c5bad168ab63629b29ed2ce08ed042c088dc2", "patch": "@@ -0,0 +1,11 @@\n+// { dg-do compile }\n+// { dg-options \"-O2 -std=c++2a\" } */\n+\n+struct a {};\n+struct b { [[no_unique_address]] a aq; };\n+struct c {\n+  int d;\n+  [[no_unique_address]] b e;\n+};\n+c f() {return {};}\n+void g() { f(); }"}, {"sha": "4c7d651e6b9040ad1d28d987b181bf59801f95cb", "filename": "gcc/tree-sra.c", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/665c5bad168ab63629b29ed2ce08ed042c088dc2/gcc%2Ftree-sra.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/665c5bad168ab63629b29ed2ce08ed042c088dc2/gcc%2Ftree-sra.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-sra.c?ref=665c5bad168ab63629b29ed2ce08ed042c088dc2", "patch": "@@ -958,6 +958,9 @@ scalarizable_type_p (tree type, bool const_decl)\n   if (type_contains_placeholder_p (type))\n     return false;\n \n+  bool have_predecessor_field = false;\n+  HOST_WIDE_INT prev_pos = 0;\n+\n   switch (TREE_CODE (type))\n   {\n   case RECORD_TYPE:\n@@ -966,6 +969,17 @@ scalarizable_type_p (tree type, bool const_decl)\n \t{\n \t  tree ft = TREE_TYPE (fld);\n \n+\t  if (zerop (DECL_SIZE (fld)))\n+\t    continue;\n+\n+\t  HOST_WIDE_INT pos = int_bit_position (fld);\n+\t  if (have_predecessor_field\n+\t      && pos <= prev_pos)\n+\t    return false;\n+\n+\t  have_predecessor_field = true;\n+\t  prev_pos = pos;\n+\n \t  if (DECL_BIT_FIELD (fld))\n \t    return false;\n "}]}