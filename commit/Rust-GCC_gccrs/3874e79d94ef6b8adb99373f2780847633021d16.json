{"sha": "3874e79d94ef6b8adb99373f2780847633021d16", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Mzg3NGU3OWQ5NGVmNmI4YWRiOTkzNzNmMjc4MDg0NzYzMzAyMWQxNg==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2020-04-23T17:33:47Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "derodat@adacore.com", "date": "2020-06-18T09:08:32Z"}, "message": "[Ada] Small cleanup in the attribute code of the expander\n\n2020-06-18  Eric Botcazou  <ebotcazou@adacore.com>\n\ngcc/ada/\n\n\t* exp_attr.adb (Analyze_Attribute) <Asm_{In,Out}put>: Alphabetize.\n\t<Component_Size>: Add check for universal integer attribute.\n\t<Aft>, <Bit_Order>, <Definite>, <Max_Alignment_For_Allocation>,\n\t<Scalar_Storage_Order>: Raise Program_Error on them.\n\t* sem_attr.adb (Eval_Attribute) <Component_Size>: Add comment on\n\tthe packed array case.", "tree": {"sha": "df0056c4bfd21a4e64693cd2a76579ec9614c882", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/df0056c4bfd21a4e64693cd2a76579ec9614c882"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3874e79d94ef6b8adb99373f2780847633021d16", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3874e79d94ef6b8adb99373f2780847633021d16", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3874e79d94ef6b8adb99373f2780847633021d16", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3874e79d94ef6b8adb99373f2780847633021d16/comments", "author": null, "committer": {"login": "pmderodat", "id": 758452, "node_id": "MDQ6VXNlcjc1ODQ1Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/758452?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pmderodat", "html_url": "https://github.com/pmderodat", "followers_url": "https://api.github.com/users/pmderodat/followers", "following_url": "https://api.github.com/users/pmderodat/following{/other_user}", "gists_url": "https://api.github.com/users/pmderodat/gists{/gist_id}", "starred_url": "https://api.github.com/users/pmderodat/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pmderodat/subscriptions", "organizations_url": "https://api.github.com/users/pmderodat/orgs", "repos_url": "https://api.github.com/users/pmderodat/repos", "events_url": "https://api.github.com/users/pmderodat/events{/privacy}", "received_events_url": "https://api.github.com/users/pmderodat/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "13175003d4aecbb1cb8f6e5707c22d318bd0f2a0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/13175003d4aecbb1cb8f6e5707c22d318bd0f2a0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/13175003d4aecbb1cb8f6e5707c22d318bd0f2a0"}], "stats": {"total": 68, "additions": 34, "deletions": 34}, "files": [{"sha": "f0f98bbc0ffc7592a0b779adcc21d0db52b03aeb", "filename": "gcc/ada/exp_attr.adb", "status": "modified", "additions": 29, "deletions": 34, "changes": 63, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3874e79d94ef6b8adb99373f2780847633021d16/gcc%2Fada%2Fexp_attr.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3874e79d94ef6b8adb99373f2780847633021d16/gcc%2Fada%2Fexp_attr.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_attr.adb?ref=3874e79d94ef6b8adb99373f2780847633021d16", "patch": "@@ -2531,6 +2531,19 @@ package body Exp_Attr is\n          end if;\n       end Alignment;\n \n+      ---------------------------\n+      -- Asm_Input, Asm_Output --\n+      ---------------------------\n+\n+      --  The Asm_Input and Asm_Output attributes are not expanded at this\n+      --  stage, but will be eliminated in the expansion of the Asm call,\n+      --  see Exp_Intr for details. So the back end will never see them.\n+\n+      when Attribute_Asm_Input\n+         | Attribute_Asm_Output\n+      =>\n+         null;\n+\n       ---------\n       -- Bit --\n       ---------\n@@ -2796,6 +2809,15 @@ package body Exp_Attr is\n          Analyze_And_Resolve (N, Id_Kind);\n       end Caller;\n \n+      --------------------\n+      -- Component_Size --\n+      --------------------\n+\n+      --  Component_Size is handled by the back end\n+\n+      when Attribute_Component_Size =>\n+         Apply_Universal_Integer_Attribute_Checks (N);\n+\n       -------------\n       -- Compose --\n       -------------\n@@ -2999,7 +3021,7 @@ package body Exp_Attr is\n       -- Descriptor_Size --\n       ---------------------\n \n-      --  Attribute Descriptor_Size is handled by the back end\n+      --  Descriptor_Size is handled by the back end\n \n       when Attribute_Descriptor_Size =>\n          Apply_Universal_Integer_Attribute_Checks (N);\n@@ -7444,53 +7466,33 @@ package body Exp_Attr is\n          Rewrite_Attribute_Proc_Call (Pname);\n       end Write;\n \n-      --  Component_Size is handled by the back end, unless the component size\n-      --  is known at compile time, which is always true in the packed array\n-      --  case. It is important that the packed array case is handled in the\n-      --  front end (see Eval_Attribute) since the back end would otherwise get\n-      --  confused by the equivalent packed array type.\n-\n-      when Attribute_Component_Size =>\n-         null;\n-\n       --  The following attributes are handled by the back end (except that\n       --  static cases have already been evaluated during semantic processing,\n       --  but in any case the back end should not count on this).\n \n-      --  The back end also handles the non-class-wide cases of Size\n-\n-      when Attribute_Bit_Order\n-         | Attribute_Code_Address\n-         | Attribute_Definite\n+      when Attribute_Code_Address\n          | Attribute_Deref\n          | Attribute_Null_Parameter\n          | Attribute_Passed_By_Reference\n          | Attribute_Pool_Address\n-         | Attribute_Scalar_Storage_Order\n       =>\n          null;\n \n-      --  The following attributes are also handled by the back end, but return\n-      --  a universal integer result, so may need a conversion for checking\n-      --  that the result is in range.\n-\n-      when Attribute_Aft\n-         | Attribute_Max_Alignment_For_Allocation\n-      =>\n-         Apply_Universal_Integer_Attribute_Checks (N);\n-\n       --  The following attributes should not appear at this stage, since they\n       --  have already been handled by the analyzer (and properly rewritten\n       --  with corresponding values or entities to represent the right values)\n \n       when Attribute_Abort_Signal\n          | Attribute_Address_Size\n+         | Attribute_Aft\n          | Attribute_Atomic_Always_Lock_Free\n          | Attribute_Base\n+         | Attribute_Bit_Order\n          | Attribute_Class\n          | Attribute_Compiler_Version\n          | Attribute_Default_Bit_Order\n          | Attribute_Default_Scalar_Storage_Order\n+         | Attribute_Definite\n          | Attribute_Delta\n          | Attribute_Denorm\n          | Attribute_Digits\n@@ -7512,6 +7514,7 @@ package body Exp_Attr is\n          | Attribute_Machine_Overflows\n          | Attribute_Machine_Radix\n          | Attribute_Machine_Rounds\n+         | Attribute_Max_Alignment_For_Allocation\n          | Attribute_Maximum_Alignment\n          | Attribute_Model_Emin\n          | Attribute_Model_Epsilon\n@@ -7526,6 +7529,7 @@ package body Exp_Attr is\n          | Attribute_Safe_Large\n          | Attribute_Safe_Last\n          | Attribute_Safe_Small\n+         | Attribute_Scalar_Storage_Order\n          | Attribute_Scale\n          | Attribute_Signed_Zeros\n          | Attribute_Small\n@@ -7541,15 +7545,6 @@ package body Exp_Attr is\n          | Attribute_Word_Size\n       =>\n          raise Program_Error;\n-\n-      --  The Asm_Input and Asm_Output attributes are not expanded at this\n-      --  stage, but will be eliminated in the expansion of the Asm call, see\n-      --  Exp_Intr for details. So the back end will never see these either.\n-\n-      when Attribute_Asm_Input\n-         | Attribute_Asm_Output\n-      =>\n-         null;\n       end case;\n \n    --  Note: as mentioned earlier, individual sections of the above case"}, {"sha": "bf45fb84c3b55ab2c31b26d4d27b0f24348fd6ef", "filename": "gcc/ada/sem_attr.adb", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3874e79d94ef6b8adb99373f2780847633021d16/gcc%2Fada%2Fsem_attr.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3874e79d94ef6b8adb99373f2780847633021d16/gcc%2Fada%2Fsem_attr.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_attr.adb?ref=3874e79d94ef6b8adb99373f2780847633021d16", "patch": "@@ -8530,6 +8530,11 @@ package body Sem_Attr is\n       -- Component_Size --\n       --------------------\n \n+      --  Fold Component_Size if it is known at compile time, which is always\n+      --  true in the packed array case. It is important that the packed array\n+      --  case is handled here since the back end would otherwise get confused\n+      --  by the equivalent packed array type.\n+\n       when Attribute_Component_Size =>\n          if Known_Static_Component_Size (P_Type) then\n             Fold_Uint (N, Component_Size (P_Type), Static);"}]}