{"sha": "876d4394d2e36fbfc16a6600763ca35b2d5624c5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODc2ZDQzOTRkMmUzNmZiZmMxNmE2NjAwNzYzY2EzNWIyZDU2MjRjNQ==", "commit": {"author": {"name": "Robert Dewar", "email": "dewar@adacore.com", "date": "2011-08-31T09:17:20Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2011-08-31T09:17:20Z"}, "message": "a-rbtgbo.adb, [...]: Minor reformatting.\n\n2011-08-31  Robert Dewar  <dewar@adacore.com>\n\n\t* a-rbtgbo.adb, alfa_test.adb: Minor reformatting.\n\nFrom-SVN: r178366", "tree": {"sha": "3bb79d0f19bad30a5d9e2b76641e679e5492592c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3bb79d0f19bad30a5d9e2b76641e679e5492592c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/876d4394d2e36fbfc16a6600763ca35b2d5624c5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/876d4394d2e36fbfc16a6600763ca35b2d5624c5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/876d4394d2e36fbfc16a6600763ca35b2d5624c5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/876d4394d2e36fbfc16a6600763ca35b2d5624c5/comments", "author": null, "committer": null, "parents": [{"sha": "36b8f95fd05bae0b3061ddaca4f0458c08f9e8d5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/36b8f95fd05bae0b3061ddaca4f0458c08f9e8d5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/36b8f95fd05bae0b3061ddaca4f0458c08f9e8d5"}], "stats": {"total": 90, "additions": 49, "deletions": 41}, "files": [{"sha": "92f89a98f11b8f936134fc324ec268060af9d9d4", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/876d4394d2e36fbfc16a6600763ca35b2d5624c5/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/876d4394d2e36fbfc16a6600763ca35b2d5624c5/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=876d4394d2e36fbfc16a6600763ca35b2d5624c5", "patch": "@@ -1,3 +1,7 @@\n+2011-08-31  Robert Dewar  <dewar@adacore.com>\n+\n+\t* a-rbtgbo.adb, alfa_test.adb: Minor reformatting.\n+\n 2011-08-31  Tristan Gingold  <gingold@adacore.com>\n \n \t* exp_ch7.ads, exp_ch7.adb (Finalization_Exception_Data): New type to"}, {"sha": "afa98f89c033cfabf95b937055c558e61e43fac8", "filename": "gcc/ada/a-rbtgbo.adb", "status": "modified", "additions": 42, "deletions": 38, "changes": 80, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/876d4394d2e36fbfc16a6600763ca35b2d5624c5/gcc%2Fada%2Fa-rbtgbo.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/876d4394d2e36fbfc16a6600763ca35b2d5624c5/gcc%2Fada%2Fa-rbtgbo.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-rbtgbo.adb?ref=876d4394d2e36fbfc16a6600763ca35b2d5624c5", "patch": "@@ -59,13 +59,13 @@ package body Ada.Containers.Red_Black_Trees.Generic_Bounded_Operations is\n            \"attempt to tamper with cursors (container is busy)\";\n       end if;\n \n-      Tree.First := 0;\n-      Tree.Last := 0;\n-      Tree.Root := 0;\n+      Tree.First  := 0;\n+      Tree.Last   := 0;\n+      Tree.Root   := 0;\n       Tree.Length := 0;\n       --  Tree.Busy\n       --  Tree.Lock\n-      Tree.Free := -1;\n+      Tree.Free   := -1;\n    end Clear_Tree;\n \n    ------------------\n@@ -77,7 +77,7 @@ package body Ada.Containers.Red_Black_Trees.Generic_Bounded_Operations is\n       Node : Count_Type)\n    is\n \n-      --  CLR p274\n+      --  CLR p. 274\n \n       X : Count_Type;\n       W : Count_Type;\n@@ -187,7 +187,7 @@ package body Ada.Containers.Red_Black_Trees.Generic_Bounded_Operations is\n      (Tree : in out Tree_Type'Class;\n       Node : Count_Type)\n    is\n-      --  CLR p273\n+      --  CLR p. 273\n \n       X, Y : Count_Type;\n \n@@ -203,9 +203,9 @@ package body Ada.Containers.Red_Black_Trees.Generic_Bounded_Operations is\n       end if;\n \n       pragma Assert (Tree.Length > 0);\n-      pragma Assert (Tree.Root /= 0);\n+      pragma Assert (Tree.Root  /= 0);\n       pragma Assert (Tree.First /= 0);\n-      pragma Assert (Tree.Last /= 0);\n+      pragma Assert (Tree.Last  /= 0);\n       pragma Assert (Parent (N (Tree.Root)) = 0);\n \n       pragma Assert ((Tree.Length > 1)\n@@ -330,12 +330,13 @@ package body Ada.Containers.Red_Black_Trees.Generic_Bounded_Operations is\n                   Set_Right (N (Parent (N (Z))), Y);\n                end if;\n \n-               Set_Left (N (Y), Left (N (Z)));\n+               Set_Left   (N (Y), Left (N (Z)));\n                Set_Parent (N (Left (N (Y))), Y);\n-               Set_Right (N (Y), Z);\n+               Set_Right  (N (Y), Z);\n+\n                Set_Parent (N (Z), Y);\n-               Set_Left (N (Z), 0);\n-               Set_Right (N (Z), 0);\n+               Set_Left   (N (Z), 0);\n+               Set_Right  (N (Z), 0);\n \n                declare\n                   Y_Color : constant Color_Type := Color (N (Y));\n@@ -417,13 +418,13 @@ package body Ada.Containers.Red_Black_Trees.Generic_Bounded_Operations is\n       pragma Assert (Parent (N (Y)) /= Z);\n \n       Y_Parent : constant Count_Type := Parent (N (Y));\n-      Y_Color  : constant Color_Type  := Color (N (Y));\n+      Y_Color  : constant Color_Type := Color (N (Y));\n \n    begin\n       Set_Parent (N (Y), Parent (N (Z)));\n-      Set_Left (N (Y), Left (N (Z)));\n-      Set_Right (N (Y), Right (N (Z)));\n-      Set_Color (N (Y), Color (N (Z)));\n+      Set_Left   (N (Y), Left   (N (Z)));\n+      Set_Right  (N (Y), Right  (N (Z)));\n+      Set_Color  (N (Y), Color  (N (Z)));\n \n       if Tree.Root = Z then\n          Tree.Root := Y;\n@@ -443,9 +444,9 @@ package body Ada.Containers.Red_Black_Trees.Generic_Bounded_Operations is\n       end if;\n \n       Set_Parent (N (Z), Y_Parent);\n-      Set_Color (N (Z), Y_Color);\n-      Set_Left (N (Z), 0);\n-      Set_Right (N (Z), 0);\n+      Set_Color  (N (Z), Y_Color);\n+      Set_Left   (N (Z), 0);\n+      Set_Right  (N (Z), 0);\n    end Delete_Swap;\n \n    ----------\n@@ -526,11 +527,10 @@ package body Ada.Containers.Red_Black_Trees.Generic_Bounded_Operations is\n          --  node onto the head of the free store.\n \n          --  ???\n-         --  See the comments above for an optimization opportunity. If\n-         --  the next link for a node on the free store is negative, then\n-         --  this means the remaining nodes on the free store are\n-         --  physically contiguous, starting as the absolute value of\n-         --  that index value.\n+         --  See the comments above for an optimization opportunity. If the\n+         --  next link for a node on the free store is negative, then this\n+         --  means the remaining nodes on the free store are physically\n+         --  contiguous, starting as the absolute value of that index value.\n \n          Tree.Free := abs Tree.Free;\n \n@@ -587,9 +587,14 @@ package body Ada.Containers.Red_Black_Trees.Generic_Bounded_Operations is\n          Tree.Free := Tree.Free - 1;\n       end if;\n \n+      --  When a node is allocated from the free store, its pointer components\n+      --  (the links to other nodes in the tree) must also be initialized (to\n+      --  0, the equivalent of null). This simplifies the post-allocation\n+      --  handling of nodes inserted into terminal positions.\n+\n       Set_Parent (N (Node), Parent => 0);\n-      Set_Left (N (Node), Left => 0);\n-      Set_Right (N (Node), Right => 0);\n+      Set_Left   (N (Node), Left   => 0);\n+      Set_Right  (N (Node), Right  => 0);\n    end Generic_Allocate;\n \n    -------------------\n@@ -687,9 +692,9 @@ package body Ada.Containers.Red_Black_Trees.Generic_Bounded_Operations is\n \n       Set_Color (N (Node), Black);\n \n-      Tree.Root := Node;\n-      Tree.First := Node;\n-      Tree.Last := Node;\n+      Tree.Root   := Node;\n+      Tree.First  := Node;\n+      Tree.Last   := Node;\n       Tree.Length := 1;\n \n       for J in Count_Type range 2 .. Len loop\n@@ -747,8 +752,7 @@ package body Ada.Containers.Red_Black_Trees.Generic_Bounded_Operations is\n       procedure Process (Node : Count_Type);\n       pragma Inline (Process);\n \n-      procedure Iterate is\n-         new Generic_Iteration (Process);\n+      procedure Iterate is new Generic_Iteration (Process);\n \n       -------------\n       -- Process --\n@@ -771,7 +775,7 @@ package body Ada.Containers.Red_Black_Trees.Generic_Bounded_Operations is\n    -----------------\n \n    procedure Left_Rotate (Tree : in out Tree_Type'Class; X : Count_Type) is\n-      --  CLR p266\n+      --  CLR p. 266\n \n       N : Nodes_Type renames Tree.Nodes;\n \n@@ -796,7 +800,7 @@ package body Ada.Containers.Red_Black_Trees.Generic_Bounded_Operations is\n          Set_Right (N (Parent (N (X))), Y);\n       end if;\n \n-      Set_Left (N (Y), X);\n+      Set_Left   (N (Y), X);\n       Set_Parent (N (X), Y);\n    end Left_Rotate;\n \n@@ -808,7 +812,7 @@ package body Ada.Containers.Red_Black_Trees.Generic_Bounded_Operations is\n      (Tree : Tree_Type'Class;\n       Node : Count_Type) return Count_Type\n    is\n-      --  CLR p248\n+      --  CLR p. 248\n \n       X : Count_Type := Node;\n       Y : Count_Type;\n@@ -833,7 +837,7 @@ package body Ada.Containers.Red_Black_Trees.Generic_Bounded_Operations is\n      (Tree : Tree_Type'Class;\n       Node : Count_Type) return Count_Type\n    is\n-      --  CLR p248\n+      --  CLR p. 248\n \n       X : Count_Type := Node;\n       Y : Count_Type;\n@@ -859,7 +863,7 @@ package body Ada.Containers.Red_Black_Trees.Generic_Bounded_Operations is\n       Node : Count_Type) return Count_Type\n    is\n    begin\n-      --  CLR p249\n+      --  CLR p. 249\n \n       if Node = 0 then\n          return 0;\n@@ -926,7 +930,7 @@ package body Ada.Containers.Red_Black_Trees.Generic_Bounded_Operations is\n      (Tree : in out Tree_Type'Class;\n       Node : Count_Type)\n    is\n-      --  CLR p.268\n+      --  CLR p. 268\n \n       N : Nodes_Type renames Tree.Nodes;\n \n@@ -1014,7 +1018,7 @@ package body Ada.Containers.Red_Black_Trees.Generic_Bounded_Operations is\n          Set_Right (N (Parent (N (Y))), X);\n       end if;\n \n-      Set_Right (N (X), Y);\n+      Set_Right  (N (X), Y);\n       Set_Parent (N (Y), X);\n    end Right_Rotate;\n "}, {"sha": "9e3f78d642e9df6952c2be42deb4a4286e561e0e", "filename": "gcc/ada/alfa_test.adb", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/876d4394d2e36fbfc16a6600763ca35b2d5624c5/gcc%2Fada%2Falfa_test.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/876d4394d2e36fbfc16a6600763ca35b2d5624c5/gcc%2Fada%2Falfa_test.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Falfa_test.adb?ref=876d4394d2e36fbfc16a6600763ca35b2d5624c5", "patch": "@@ -39,15 +39,15 @@\n with Get_Alfa;\n with Put_Alfa;\n \n-with Alfa;                  use Alfa;\n-with Types;                 use Types;\n+with Alfa;  use Alfa;\n+with Types; use Types;\n \n with Ada.Command_Line;      use Ada.Command_Line;\n with Ada.Streams;           use Ada.Streams;\n with Ada.Streams.Stream_IO; use Ada.Streams.Stream_IO;\n with Ada.Text_IO;\n \n-with GNAT.OS_Lib;           use GNAT.OS_Lib;\n+with GNAT.OS_Lib; use GNAT.OS_Lib;\n \n procedure Alfa_Test is\n    Infile    : File_Type;"}]}