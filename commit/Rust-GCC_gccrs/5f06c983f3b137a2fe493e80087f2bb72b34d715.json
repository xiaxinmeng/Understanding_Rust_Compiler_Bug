{"sha": "5f06c983f3b137a2fe493e80087f2bb72b34d715", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWYwNmM5ODNmM2IxMzdhMmZlNDkzZTgwMDg3ZjJiYjcyYjM0ZDcxNQ==", "commit": {"author": {"name": "Kaveh R. Ghazi", "email": "ghazi@caip.rutgers.edu", "date": "1999-08-20T22:32:54Z"}, "committer": {"name": "Kaveh Ghazi", "email": "ghazi@gcc.gnu.org", "date": "1999-08-20T22:32:54Z"}, "message": "rtl.c (rtx_name): Constify a char*.\n\n\t* rtl.c (rtx_name): Constify a char*.\n\n\t* rtl.h (rtx_name, fix_sched_param): Likewise.\n\n\t* gmicro/gmicro.c (rtx_name): Remove redundant declaration.\n\t(mypr): Use accessor macro, not `rtx_name'.\n\n\t* genemit.c (print_code): Constify a char*.\n\n\t* genopinit.c (gen_insn): Use accessor macro, not `rtx_name'.\n\n\t* genpeep.c (print_code): Constify a char*.\n\n\t* genrecog.c (print_code): Likewise.\n\n\t* graph.c (start_fct, start_bb, node_data, draw_edge, end_fct,\n\tend_bb): Add static prototype.\n\t(draw_edge): Constify a char*.\n\t(end_bb): Remove unused parameter.\n\n\t* haifa-sched.c (fix_sched_param, safe_concat, print_exp\n\tprint_block_visualization): Constify a char*.\n\nFrom-SVN: r28782", "tree": {"sha": "010843ea91dff778c8ce14704a4f98a412d570ca", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/010843ea91dff778c8ce14704a4f98a412d570ca"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5f06c983f3b137a2fe493e80087f2bb72b34d715", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5f06c983f3b137a2fe493e80087f2bb72b34d715", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5f06c983f3b137a2fe493e80087f2bb72b34d715", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5f06c983f3b137a2fe493e80087f2bb72b34d715/comments", "author": null, "committer": null, "parents": [{"sha": "22e9174f5416123df52503b2dc2248de0f4ca27e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/22e9174f5416123df52503b2dc2248de0f4ca27e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/22e9174f5416123df52503b2dc2248de0f4ca27e"}], "stats": {"total": 79, "additions": 54, "deletions": 25}, "files": [{"sha": "6daf901a381e0d47c5e33b538f93281f231eaef4", "filename": "gcc/ChangeLog", "status": "modified", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f06c983f3b137a2fe493e80087f2bb72b34d715/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f06c983f3b137a2fe493e80087f2bb72b34d715/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=5f06c983f3b137a2fe493e80087f2bb72b34d715", "patch": "@@ -1,3 +1,28 @@\n+Fri Aug 20 18:31:26 1999  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n+\n+\t* rtl.c (rtx_name): Constify a char*.\n+\n+\t* rtl.h (rtx_name, fix_sched_param): Likewise.\n+\n+\t* gmicro/gmicro.c (rtx_name): Remove redundant declaration.\n+\t(mypr): Use accessor macro, not `rtx_name'.\n+\n+\t* genemit.c (print_code): Constify a char*.\n+\n+\t* genopinit.c (gen_insn): Use accessor macro, not `rtx_name'.\n+\n+\t* genpeep.c (print_code): Constify a char*.\n+\n+\t* genrecog.c (print_code): Likewise.\n+\n+\t* graph.c (start_fct, start_bb, node_data, draw_edge, end_fct,\n+\tend_bb): Add static prototype.\n+\t(draw_edge): Constify a char*.\n+\t(end_bb): Remove unused parameter.\n+\n+\t* haifa-sched.c (fix_sched_param, safe_concat, print_exp\n+\tprint_block_visualization): Constify a char*.\n+\n Fri Aug 20 15:02:10 1999  Mark Mitchell  <mark@codesourcery.com>\n \n \t* c-common.c (c_get_alias_set): Update comment."}, {"sha": "7a81a7d0ef8de3e8b8824885c96ea241139e063e", "filename": "gcc/config/gmicro/gmicro.c", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f06c983f3b137a2fe493e80087f2bb72b34d715/gcc%2Fconfig%2Fgmicro%2Fgmicro.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f06c983f3b137a2fe493e80087f2bb72b34d715/gcc%2Fconfig%2Fgmicro%2Fgmicro.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fgmicro%2Fgmicro.c?ref=5f06c983f3b137a2fe493e80087f2bb72b34d715", "patch": "@@ -37,8 +37,6 @@ Boston, MA 02111-1307, USA.  */\n #include \"output.h\"\n #include \"insn-attr.h\"\n \n-extern char *rtx_name[];\n-\n mypr (s, a1, a2, a3, a4, a5)\n      char *s;\n      int a1, a2, a3, a4, a5;\n@@ -52,7 +50,7 @@ myprcode (i)\n   if (i < 0 || i > 90)\n     fprintf (stderr, \"code = %d\\n\", i);\n   else\n-    fprintf (stderr, \"code = %s\\n\", rtx_name[i]);\n+    fprintf (stderr, \"code = %s\\n\", GET_RTX_NAME(i));\n }\n \n myabort (i)"}, {"sha": "bd984850144abd2132ba005a593f354810ea6ec4", "filename": "gcc/genemit.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f06c983f3b137a2fe493e80087f2bb72b34d715/gcc%2Fgenemit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f06c983f3b137a2fe493e80087f2bb72b34d715/gcc%2Fgenemit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgenemit.c?ref=5f06c983f3b137a2fe493e80087f2bb72b34d715", "patch": "@@ -134,7 +134,7 @@ static void\n print_code (code)\n      RTX_CODE code;\n {\n-  register char *p1;\n+  register const char *p1;\n   for (p1 = GET_RTX_NAME (code); *p1; p1++)\n     {\n       if (*p1 >= 'a' && *p1 <= 'z')"}, {"sha": "7394e5622014d3b49a1d8416db7a95f3b4a390e0", "filename": "gcc/genopinit.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f06c983f3b137a2fe493e80087f2bb72b34d715/gcc%2Fgenopinit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f06c983f3b137a2fe493e80087f2bb72b34d715/gcc%2Fgenopinit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgenopinit.c?ref=5f06c983f3b137a2fe493e80087f2bb72b34d715", "patch": "@@ -176,7 +176,7 @@ gen_insn (insn)\n \t      case 'c':\n \t\tfor (op = 0; op < NUM_RTX_CODE; op++)\n \t\t  {\n-\t\t    for (p = rtx_name[op], q = np; *p; p++, q++)\n+\t\t    for (p = GET_RTX_NAME(op), q = np; *p; p++, q++)\n \t\t      if (*p != *q)\n \t\t\tbreak;\n \n@@ -190,7 +190,7 @@ gen_insn (insn)\n \t\tif (op == NUM_RTX_CODE)\n \t\t  matches = 0;\n \t\telse\n-\t\t  np += strlen (rtx_name[op]);\n+\t\t  np += strlen (GET_RTX_NAME(op));\n \t\tbreak;\n \t      case 'a':\n \t      case 'b':\n@@ -268,10 +268,10 @@ gen_insn (insn)\n \t    printf (\"%smode\", mode_name[m2]);\n \t    break;\n \t  case 'c':\n-\t    printf (\"%s\", rtx_name[op]);\n+\t    printf (\"%s\", GET_RTX_NAME(op));\n \t    break;\n \t  case 'C':\n-\t    for (np = rtx_name[op]; *np; np++)\n+\t    for (np = GET_RTX_NAME(op); *np; np++)\n \t      printf (\"%c\", toupper ((unsigned char)*np));\n \t    break;\n \t  }"}, {"sha": "2ef2bd8eecc187166affb300f3c00ebd351233f3", "filename": "gcc/genpeep.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f06c983f3b137a2fe493e80087f2bb72b34d715/gcc%2Fgenpeep.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f06c983f3b137a2fe493e80087f2bb72b34d715/gcc%2Fgenpeep.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgenpeep.c?ref=5f06c983f3b137a2fe493e80087f2bb72b34d715", "patch": "@@ -374,7 +374,7 @@ static void\n print_code (code)\n      RTX_CODE code;\n {\n-  register char *p1;\n+  register const char *p1;\n   for (p1 = GET_RTX_NAME (code); *p1; p1++)\n     {\n       if (*p1 >= 'a' && *p1 <= 'z')"}, {"sha": "1a3c60dc59fc4bdfc34b73cced53afb1a1a8f79f", "filename": "gcc/genrecog.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f06c983f3b137a2fe493e80087f2bb72b34d715/gcc%2Fgenrecog.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f06c983f3b137a2fe493e80087f2bb72b34d715/gcc%2Fgenrecog.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgenrecog.c?ref=5f06c983f3b137a2fe493e80087f2bb72b34d715", "patch": "@@ -1527,7 +1527,7 @@ static void\n print_code (code)\n      enum rtx_code code;\n {\n-  register char *p1;\n+  register const char *p1;\n   for (p1 = GET_RTX_NAME (code); *p1; p1++)\n     {\n       if (*p1 >= 'a' && *p1 <= 'z')"}, {"sha": "4f8929d2c6374c5a80ae7fdd16e36ec0a425e6c7", "filename": "gcc/graph.c", "status": "modified", "additions": 10, "deletions": 4, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f06c983f3b137a2fe493e80087f2bb72b34d715/gcc%2Fgraph.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f06c983f3b137a2fe493e80087f2bb72b34d715/gcc%2Fgraph.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgraph.c?ref=5f06c983f3b137a2fe493e80087f2bb72b34d715", "patch": "@@ -36,6 +36,13 @@ static const char *graph_ext[] =\n   /* vcg */      \".vcg\",\n };\n \n+static void start_fct PROTO ((FILE *));\n+static void start_bb PROTO ((FILE *, int));\n+static void node_data PROTO ((FILE *, rtx));\n+static void draw_edge PROTO ((FILE *, int, int, int, int));\n+static void end_fct PROTO ((FILE *));\n+static void end_bb PROTO ((FILE *));\n+\n /* Output text for new basic block.  */\n static void\n start_fct (fp)\n@@ -190,7 +197,7 @@ draw_edge (fp, from, to, bb_edge, class)\n      int bb_edge;\n      int class;\n {\n-  char * color;\n+  const char * color;\n   switch (graph_dump_format)\n     {\n     case vcg:\n@@ -215,9 +222,8 @@ draw_edge (fp, from, to, bb_edge, class)\n }\n \n static void\n-end_bb (fp, bb)\n+end_bb (fp)\n      FILE *fp;\n-     int bb ATTRIBUTE_UNUSED;\n {\n   switch (graph_dump_format)\n     {\n@@ -346,7 +352,7 @@ print_rtl_graph_with_bb (base, suffix, rtx_first)\n \t      bb = BASIC_BLOCK (i);\n \n \t      /* End of the basic block.  */\n-\t      end_bb (fp, bb);\n+\t      end_bb (fp);\n \n \t      /* Now specify the edges to all the successors of this\n \t\t basic block.  */"}, {"sha": "1c60c7265598d098d911c5fc5047396fa22c26c9", "filename": "gcc/haifa-sched.c", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f06c983f3b137a2fe493e80087f2bb72b34d715/gcc%2Fhaifa-sched.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f06c983f3b137a2fe493e80087f2bb72b34d715/gcc%2Fhaifa-sched.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fhaifa-sched.c?ref=5f06c983f3b137a2fe493e80087f2bb72b34d715", "patch": "@@ -222,7 +222,7 @@ static FILE *dump = 0;\n \n void\n fix_sched_param (param, val)\n-     char *param, *val;\n+     const char *param, *val;\n {\n   if (!strcmp (param, \"verbose\"))\n     sched_verbose_param = atoi (val);\n@@ -455,7 +455,7 @@ static int schedule_block PROTO ((int, int));\n static void split_hard_reg_notes PROTO ((rtx, rtx, rtx));\n static void new_insn_dead_notes PROTO ((rtx, rtx, rtx, rtx));\n static void update_n_sets PROTO ((rtx, int));\n-static char *safe_concat PROTO ((char *, char *, char *));\n+static char *safe_concat PROTO ((char *, char *, const char *));\n static int insn_issue_delay PROTO ((rtx));\n static int birthing_insn_p PROTO ((rtx));\n static void adjust_priority PROTO ((rtx));\n@@ -748,7 +748,7 @@ static void init_target_units PROTO ((void));\n static void insn_print_units PROTO ((rtx));\n static int get_visual_tbl_length PROTO ((void));\n static void init_block_visualization PROTO ((void));\n-static void print_block_visualization PROTO ((int, char *));\n+static void print_block_visualization PROTO ((int, const char *));\n static void visualize_scheduled_insns PROTO ((int, int));\n static void visualize_no_unit PROTO ((rtx));\n static void visualize_stall_cycles PROTO ((int, int));\n@@ -5792,7 +5792,7 @@ static char *\n safe_concat (buf, cur, str)\n      char *buf;\n      char *cur;\n-     char *str;\n+     const char *str;\n {\n   char *end = buf + BUF_LEN - 2;\t/* leave room for null */\n   int c;\n@@ -5821,10 +5821,10 @@ print_exp (buf, x, verbose)\n      int verbose;\n {\n   char tmp[BUF_LEN];\n-  char *st[4];\n+  const char *st[4];\n   char *cur = buf;\n-  char *fun = (char *)0;\n-  char *sep;\n+  const char *fun = (char *)0;\n+  const char *sep;\n   rtx op[4];\n   int i;\n \n@@ -6433,7 +6433,7 @@ print_insn (buf, x, verbose)\n static void\n print_block_visualization (b, s)\n      int b;\n-     char *s;\n+     const char *s;\n {\n   int unit, i;\n "}, {"sha": "39a72d538147d310eeb74f67aa863bea701c11af", "filename": "gcc/rtl.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f06c983f3b137a2fe493e80087f2bb72b34d715/gcc%2Frtl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f06c983f3b137a2fe493e80087f2bb72b34d715/gcc%2Frtl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frtl.c?ref=5f06c983f3b137a2fe493e80087f2bb72b34d715", "patch": "@@ -47,7 +47,7 @@ int rtx_length[NUM_RTX_CODE + 1];\n \n #define DEF_RTL_EXPR(ENUM, NAME, FORMAT, CLASS)   NAME ,\n \n-char *rtx_name[] = {\n+const char * const rtx_name[] = {\n #include \"rtl.def\"\t\t/* rtl expressions are documented here */\n };\n "}, {"sha": "c4a7cbea78e23636778aa033915574e7c2bd490c", "filename": "gcc/rtl.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f06c983f3b137a2fe493e80087f2bb72b34d715/gcc%2Frtl.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f06c983f3b137a2fe493e80087f2bb72b34d715/gcc%2Frtl.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frtl.h?ref=5f06c983f3b137a2fe493e80087f2bb72b34d715", "patch": "@@ -51,7 +51,7 @@ enum rtx_code  {\n extern int rtx_length[];\n #define GET_RTX_LENGTH(CODE)\t\t(rtx_length[(int) (CODE)])\n \n-extern char *rtx_name[];\n+extern const char * const rtx_name[];\n #define GET_RTX_NAME(CODE)\t\t(rtx_name[(int) (CODE)])\n \n extern char *rtx_format[];\n@@ -1347,7 +1347,7 @@ extern void dump_combine_total_stats\tPROTO ((FILE *));\n extern void schedule_insns\t\tPROTO ((FILE *));\n #endif\n #ifdef HAIFA\n-extern void fix_sched_param\t\tPROTO ((char *, char *));\n+extern void fix_sched_param\t\tPROTO ((const char *, const char *));\n #endif\n \n /* In print-rtl.c */"}]}