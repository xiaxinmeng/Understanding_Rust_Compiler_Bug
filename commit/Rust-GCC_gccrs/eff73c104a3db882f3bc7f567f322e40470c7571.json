{"sha": "eff73c104a3db882f3bc7f567f322e40470c7571", "node_id": "C_kwDOANBUbNoAKGVmZjczYzEwNGEzZGI4ODJmM2JjN2Y1NjdmMzIyZTQwNDcwYzc1NzE", "commit": {"author": {"name": "Kwok Cheung Yeung", "email": "kcy@codesourcery.com", "date": "2022-09-09T13:10:07Z"}, "committer": {"name": "Kwok Cheung Yeung", "email": "kcy@codesourcery.com", "date": "2022-09-09T13:10:07Z"}, "message": "amdgcn: Add support for additional natively supported floating-point operations\n\nThis adds support for the following natively supported floating-point\noperations, in scalar and vectorized modes:\n\nfloor, ceil, exp2*, log2*, sin*, cos*, ldexp, frexp\n\n* These operations are single-precision float only and are only active\nif unsafe_math_optimizations are enabled (due to potential numerical\nprecision issues).\n\n2022-09-09  Kwok Cheung Yeung  <kcy@codesourcery.com>\n\n\tgcc/\n\t* config/gcn/gcn-builtins.def (FABSVF, LDEXPVF, LDEXPV, FREXPVF_EXP,\n\tFREXPVF_MANT, FREXPV_EXP, FREXPV_MANT): Add new builtins.\n\t* config/gcn/gcn-protos.h (gcn_dconst1over2pi): New prototype.\n\t* config/gcn/gcn-valu.md (MATH_UNOP_1OR2REG, MATH_UNOP_1REG,\n\tMATH_UNOP_TRIG): New iterators.\n\t(math_unop): New attributes.\n\t(<math_unop><mode>2, <math_unop><mode>2<exec>,\n\t<math_unop><mode>2, <math_unop><mode>2<exec>,\n\t*<math_unop><mode>2_insn, *<math_unop><mode>2<exec>_insn,\n\tldexp<mode>3, ldexp<mode>3<exec>,\n\tfrexp<mode>_exp2, frexp<mode>_mant2,\n\tfrexp<mode>_exp2<exec>, frexp<mode>_mant2<exec>): New instructions.\n\t(<math_unop><mode>2, <math_unop><mode>2<exec>): New expanders.\n\t* config/gcn/gcn.cc (init_ext_gcn_constants): Update definition of\n\tdconst1over2pi.\n\t(gcn_dconst1over2pi): New.\n\t(gcn_builtin_type_index): Add entry for v64df type.\n\t(v64df_type_node): New.\n\t(gcn_init_builtin_types): Initialize v64df_type_node.\n\t(gcn_expand_builtin_1): Expand new builtins to instructions.\n\t(print_operand): Fix assembler output for 1/(2*PI) constant.\n\t* config/gcn/gcn.md (unspec): Add new entries.", "tree": {"sha": "e4f565ec2874b77b22fa9e5166a5f2b1cf3d895c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e4f565ec2874b77b22fa9e5166a5f2b1cf3d895c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/eff73c104a3db882f3bc7f567f322e40470c7571", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/eff73c104a3db882f3bc7f567f322e40470c7571", "html_url": "https://github.com/Rust-GCC/gccrs/commit/eff73c104a3db882f3bc7f567f322e40470c7571", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/eff73c104a3db882f3bc7f567f322e40470c7571/comments", "author": {"login": "k-yeung", "id": 16960193, "node_id": "MDQ6VXNlcjE2OTYwMTkz", "avatar_url": "https://avatars.githubusercontent.com/u/16960193?v=4", "gravatar_id": "", "url": "https://api.github.com/users/k-yeung", "html_url": "https://github.com/k-yeung", "followers_url": "https://api.github.com/users/k-yeung/followers", "following_url": "https://api.github.com/users/k-yeung/following{/other_user}", "gists_url": "https://api.github.com/users/k-yeung/gists{/gist_id}", "starred_url": "https://api.github.com/users/k-yeung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/k-yeung/subscriptions", "organizations_url": "https://api.github.com/users/k-yeung/orgs", "repos_url": "https://api.github.com/users/k-yeung/repos", "events_url": "https://api.github.com/users/k-yeung/events{/privacy}", "received_events_url": "https://api.github.com/users/k-yeung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "k-yeung", "id": 16960193, "node_id": "MDQ6VXNlcjE2OTYwMTkz", "avatar_url": "https://avatars.githubusercontent.com/u/16960193?v=4", "gravatar_id": "", "url": "https://api.github.com/users/k-yeung", "html_url": "https://github.com/k-yeung", "followers_url": "https://api.github.com/users/k-yeung/followers", "following_url": "https://api.github.com/users/k-yeung/following{/other_user}", "gists_url": "https://api.github.com/users/k-yeung/gists{/gist_id}", "starred_url": "https://api.github.com/users/k-yeung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/k-yeung/subscriptions", "organizations_url": "https://api.github.com/users/k-yeung/orgs", "repos_url": "https://api.github.com/users/k-yeung/repos", "events_url": "https://api.github.com/users/k-yeung/events{/privacy}", "received_events_url": "https://api.github.com/users/k-yeung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a8b0b13da7379feb31950a9d2ad74b98a29c547f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a8b0b13da7379feb31950a9d2ad74b98a29c547f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a8b0b13da7379feb31950a9d2ad74b98a29c547f"}], "stats": {"total": 335, "additions": 332, "deletions": 3}, "files": [{"sha": "27691909925be65364217ef3aac24d7818e132af", "filename": "gcc/config/gcn/gcn-builtins.def", "status": "modified", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eff73c104a3db882f3bc7f567f322e40470c7571/gcc%2Fconfig%2Fgcn%2Fgcn-builtins.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eff73c104a3db882f3bc7f567f322e40470c7571/gcc%2Fconfig%2Fgcn%2Fgcn-builtins.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fgcn%2Fgcn-builtins.def?ref=eff73c104a3db882f3bc7f567f322e40470c7571", "patch": "@@ -59,6 +59,41 @@ DEF_BUILTIN (SQRTF, 3 /*CODE_FOR_sqrtf */,\n \t     _A2 (GCN_BTI_SF, GCN_BTI_SF),\n \t     gcn_expand_builtin_1)\n \n+DEF_BUILTIN (FABSVF, 3 /*CODE_FOR_fabsvf */,\n+\t     \"fabsvf\", B_INSN,\n+\t     _A2 (GCN_BTI_V64SF, GCN_BTI_V64SF),\n+\t     gcn_expand_builtin_1)\n+\n+DEF_BUILTIN (LDEXPVF, 3 /*CODE_FOR_ldexpvf */,\n+\t     \"ldexpvf\", B_INSN,\n+\t     _A3 (GCN_BTI_V64SF, GCN_BTI_V64SF, GCN_BTI_V64SI),\n+\t     gcn_expand_builtin_1)\n+\n+DEF_BUILTIN (LDEXPV, 3 /*CODE_FOR_ldexpv */,\n+\t     \"ldexpv\", B_INSN,\n+\t     _A3 (GCN_BTI_V64DF, GCN_BTI_V64DF, GCN_BTI_V64SI),\n+\t     gcn_expand_builtin_1)\n+\n+DEF_BUILTIN (FREXPVF_EXP, 3 /*CODE_FOR_frexpvf_exp */,\n+\t     \"frexpvf_exp\", B_INSN,\n+\t     _A2 (GCN_BTI_V64SI, GCN_BTI_V64SF),\n+\t     gcn_expand_builtin_1)\n+\n+DEF_BUILTIN (FREXPVF_MANT, 3 /*CODE_FOR_frexpvf_mant */,\n+\t     \"frexpvf_mant\", B_INSN,\n+\t     _A2 (GCN_BTI_V64SF, GCN_BTI_V64SF),\n+\t     gcn_expand_builtin_1)\n+\n+DEF_BUILTIN (FREXPV_EXP, 3 /*CODE_FOR_frexpv_exp */,\n+\t     \"frexpv_exp\", B_INSN,\n+\t     _A2 (GCN_BTI_V64SI, GCN_BTI_V64DF),\n+\t     gcn_expand_builtin_1)\n+\n+DEF_BUILTIN (FREXPV_MANT, 3 /*CODE_FOR_frexpv_mant */,\n+\t     \"frexpv_mant\", B_INSN,\n+\t     _A2 (GCN_BTI_V64DF, GCN_BTI_V64DF),\n+\t     gcn_expand_builtin_1)\n+\n DEF_BUILTIN (CMP_SWAP, -1,\n \t    \"cmp_swap\", B_INSN,\n \t    _A4 (GCN_BTI_UINT, GCN_BTI_VOIDPTR, GCN_BTI_UINT, GCN_BTI_UINT),"}, {"sha": "ca804609c09e16464e96e9a9fb276ca2439dd856", "filename": "gcc/config/gcn/gcn-protos.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eff73c104a3db882f3bc7f567f322e40470c7571/gcc%2Fconfig%2Fgcn%2Fgcn-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eff73c104a3db882f3bc7f567f322e40470c7571/gcc%2Fconfig%2Fgcn%2Fgcn-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fgcn%2Fgcn-protos.h?ref=eff73c104a3db882f3bc7f567f322e40470c7571", "patch": "@@ -54,6 +54,7 @@ extern int gcn_hard_regno_nregs (int regno, machine_mode mode);\n extern void gcn_hsa_declare_function_name (FILE *file, const char *name,\n \t\t\t\t\t   tree decl);\n extern HOST_WIDE_INT gcn_initial_elimination_offset (int, int);\n+extern REAL_VALUE_TYPE gcn_dconst1over2pi (void);\n extern bool gcn_inline_constant64_p (rtx, bool);\n extern bool gcn_inline_constant_p (rtx);\n extern int gcn_inline_fp_constant_p (rtx, bool);"}, {"sha": "3bfdf8213fcbdc0c317d3dc2c8eff719e73bcc52", "filename": "gcc/config/gcn/gcn-valu.md", "status": "modified", "additions": 181, "deletions": 0, "changes": 181, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eff73c104a3db882f3bc7f567f322e40470c7571/gcc%2Fconfig%2Fgcn%2Fgcn-valu.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eff73c104a3db882f3bc7f567f322e40470c7571/gcc%2Fconfig%2Fgcn%2Fgcn-valu.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fgcn%2Fgcn-valu.md?ref=eff73c104a3db882f3bc7f567f322e40470c7571", "patch": "@@ -2290,6 +2290,187 @@\n   [(set_attr \"type\" \"vop1\")\n    (set_attr \"length\" \"8\")])\n \n+; These FP unops have f64, f32 and f16 versions.\n+(define_int_iterator MATH_UNOP_1OR2REG\n+  [UNSPEC_FLOOR UNSPEC_CEIL])\n+\n+; These FP unops only have f16/f32 versions.\n+(define_int_iterator MATH_UNOP_1REG\n+  [UNSPEC_EXP2 UNSPEC_LOG2])\n+\n+(define_int_iterator MATH_UNOP_TRIG\n+  [UNSPEC_SIN UNSPEC_COS])\n+\n+(define_int_attr math_unop\n+  [(UNSPEC_FLOOR \"floor\")\n+   (UNSPEC_CEIL \"ceil\")\n+   (UNSPEC_EXP2 \"exp2\")\n+   (UNSPEC_LOG2 \"log2\")\n+   (UNSPEC_SIN \"sin\")\n+   (UNSPEC_COS \"cos\")])\n+\n+(define_insn \"<math_unop><mode>2\"\n+  [(set (match_operand:FP 0 \"register_operand\"  \"=  v\")\n+\t(unspec:FP\n+\t  [(match_operand:FP 1 \"gcn_alu_operand\" \"vSvB\")]\n+\t  MATH_UNOP_1OR2REG))]\n+  \"\"\n+  \"v_<math_unop>%i0\\t%0, %1\"\n+  [(set_attr \"type\" \"vop1\")\n+   (set_attr \"length\" \"8\")])\n+\n+(define_insn \"<math_unop><mode>2<exec>\"\n+  [(set (match_operand:V_FP 0 \"register_operand\"  \"=  v\")\n+\t(unspec:V_FP\n+\t  [(match_operand:V_FP 1 \"gcn_alu_operand\" \"vSvB\")]\n+\t  MATH_UNOP_1OR2REG))]\n+  \"\"\n+  \"v_<math_unop>%i0\\t%0, %1\"\n+  [(set_attr \"type\" \"vop1\")\n+   (set_attr \"length\" \"8\")])\n+\n+(define_insn \"<math_unop><mode>2\"\n+  [(set (match_operand:FP_1REG 0 \"register_operand\"  \"=  v\")\n+\t(unspec:FP_1REG\n+\t  [(match_operand:FP_1REG 1 \"gcn_alu_operand\" \"vSvB\")]\n+\t  MATH_UNOP_1REG))]\n+  \"flag_unsafe_math_optimizations\"\n+  \"v_<math_unop>%i0\\t%0, %1\"\n+  [(set_attr \"type\" \"vop1\")\n+   (set_attr \"length\" \"8\")])\n+\n+(define_insn \"<math_unop><mode>2<exec>\"\n+  [(set (match_operand:V_FP_1REG 0 \"register_operand\"  \"=  v\")\n+\t(unspec:V_FP_1REG\n+\t  [(match_operand:V_FP_1REG 1 \"gcn_alu_operand\" \"vSvB\")]\n+\t  MATH_UNOP_1REG))]\n+  \"flag_unsafe_math_optimizations\"\n+  \"v_<math_unop>%i0\\t%0, %1\"\n+  [(set_attr \"type\" \"vop1\")\n+   (set_attr \"length\" \"8\")])\n+\n+(define_insn \"*<math_unop><mode>2_insn\"\n+  [(set (match_operand:FP_1REG 0 \"register_operand\"  \"=  v\")\n+\t(unspec:FP_1REG\n+\t  [(match_operand:FP_1REG 1 \"gcn_alu_operand\" \"vSvB\")]\n+\t  MATH_UNOP_TRIG))]\n+  \"flag_unsafe_math_optimizations\"\n+  \"v_<math_unop>%i0\\t%0, %1\"\n+  [(set_attr \"type\" \"vop1\")\n+   (set_attr \"length\" \"8\")])\n+\n+(define_insn \"*<math_unop><mode>2<exec>_insn\"\n+  [(set (match_operand:V_FP_1REG 0 \"register_operand\"  \"=  v\")\n+\t(unspec:V_FP_1REG\n+\t  [(match_operand:V_FP_1REG 1 \"gcn_alu_operand\" \"vSvB\")]\n+\t  MATH_UNOP_TRIG))]\n+  \"flag_unsafe_math_optimizations\"\n+  \"v_<math_unop>%i0\\t%0, %1\"\n+  [(set_attr \"type\" \"vop1\")\n+   (set_attr \"length\" \"8\")])\n+\n+; Trigonometric functions need their input scaled by 1/(2*PI) first.\n+\n+(define_expand \"<math_unop><mode>2\"\n+  [(set (match_dup 2)\n+\t(mult:FP_1REG\n+\t  (match_dup 3)\n+\t  (match_operand:FP_1REG 1 \"gcn_alu_operand\")))\n+   (set (match_operand:FP_1REG 0 \"register_operand\")\n+\t(unspec:FP_1REG\n+\t  [(match_dup 2)]\n+\t  MATH_UNOP_TRIG))]\n+  \"flag_unsafe_math_optimizations\"\n+  {\n+    operands[2] = gen_reg_rtx (<MODE>mode);\n+    operands[3] = const_double_from_real_value (gcn_dconst1over2pi (),\n+\t\t\t\t\t\t<MODE>mode);\n+  })\n+\n+(define_expand \"<math_unop><mode>2<exec>\"\n+  [(set (match_dup 2)\n+\t(mult:V_FP_1REG\n+\t  (match_dup 3)\n+\t  (match_operand:V_FP_1REG 1 \"gcn_alu_operand\")))\n+   (set (match_operand:V_FP_1REG 0 \"register_operand\")\n+\t(unspec:V_FP_1REG\n+\t  [(match_dup 2)]\n+\t  MATH_UNOP_TRIG))]\n+  \"flag_unsafe_math_optimizations\"\n+  {\n+    operands[2] = gen_reg_rtx (<MODE>mode);\n+    operands[3] =\n+\tgcn_vec_constant (<MODE>mode,\n+\t\t\t  const_double_from_real_value (gcn_dconst1over2pi (),\n+\t\t\t\t\t\t\t<SCALAR_MODE>mode));\n+  })\n+\n+; Implement ldexp pattern\n+\n+(define_insn \"ldexp<mode>3\"\n+  [(set (match_operand:FP 0 \"register_operand\"  \"=v\")\n+\t(unspec:FP\n+\t  [(match_operand:FP 1 \"gcn_alu_operand\" \"vB\")\n+\t   (match_operand:SI 2 \"gcn_alu_operand\" \"vSvA\")]\n+\t  UNSPEC_LDEXP))]\n+  \"\"\n+  \"v_ldexp%i0\\t%0, %1, %2\"\n+  [(set_attr \"type\" \"vop3a\")\n+   (set_attr \"length\" \"8\")])\n+\n+(define_insn \"ldexp<mode>3<exec>\"\n+  [(set (match_operand:V_FP 0 \"register_operand\"  \"=v\")\n+\t(unspec:V_FP\n+\t  [(match_operand:V_FP 1 \"gcn_alu_operand\" \"vB\")\n+\t   (match_operand:V64SI 2 \"gcn_alu_operand\" \"vSvA\")]\n+\t  UNSPEC_LDEXP))]\n+  \"\"\n+  \"v_ldexp%i0\\t%0, %1, %2\"\n+  [(set_attr \"type\" \"vop3a\")\n+   (set_attr \"length\" \"8\")])\n+\n+; Implement frexp patterns\n+\n+(define_insn \"frexp<mode>_exp2\"\n+  [(set (match_operand:SI 0 \"register_operand\" \"=v\")\n+\t(unspec:SI\n+\t  [(match_operand:FP 1 \"gcn_alu_operand\" \"vB\")]\n+\t  UNSPEC_FREXP_EXP))]\n+  \"\"\n+  \"v_frexp_exp_i32%i1\\t%0, %1\"\n+  [(set_attr \"type\" \"vop1\")\n+   (set_attr \"length\" \"8\")])\n+\n+(define_insn \"frexp<mode>_mant2\"\n+  [(set (match_operand:FP 0 \"register_operand\" \"=v\")\n+\t(unspec:FP\n+\t  [(match_operand:FP 1 \"gcn_alu_operand\" \"vB\")]\n+\t  UNSPEC_FREXP_MANT))]\n+  \"\"\n+  \"v_frexp_mant%i1\\t%0, %1\"\n+  [(set_attr \"type\" \"vop1\")\n+   (set_attr \"length\" \"8\")])\n+\n+(define_insn \"frexp<mode>_exp2<exec>\"\n+  [(set (match_operand:V64SI 0 \"register_operand\" \"=v\")\n+\t(unspec:V64SI\n+\t  [(match_operand:V_FP 1 \"gcn_alu_operand\" \"vB\")]\n+\t  UNSPEC_FREXP_EXP))]\n+  \"\"\n+  \"v_frexp_exp_i32%i1\\t%0, %1\"\n+  [(set_attr \"type\" \"vop1\")\n+   (set_attr \"length\" \"8\")])\n+\n+(define_insn \"frexp<mode>_mant2<exec>\"\n+  [(set (match_operand:V_FP 0 \"register_operand\" \"=v\")\n+\t(unspec:V_FP\n+\t  [(match_operand:V_FP 1 \"gcn_alu_operand\" \"vB\")]\n+\t  UNSPEC_FREXP_MANT))]\n+  \"\"\n+  \"v_frexp_mant%i1\\t%0, %1\"\n+  [(set_attr \"type\" \"vop1\")\n+   (set_attr \"length\" \"8\")])\n+\n ;; }}}\n ;; {{{ FP fused multiply and add\n "}, {"sha": "eb822e20dd156eff1b146684491370bb2a19022b", "filename": "gcc/config/gcn/gcn.cc", "status": "modified", "additions": 112, "deletions": 2, "changes": 114, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eff73c104a3db882f3bc7f567f322e40470c7571/gcc%2Fconfig%2Fgcn%2Fgcn.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eff73c104a3db882f3bc7f567f322e40470c7571/gcc%2Fconfig%2Fgcn%2Fgcn.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fgcn%2Fgcn.cc?ref=eff73c104a3db882f3bc7f567f322e40470c7571", "patch": "@@ -779,12 +779,20 @@ init_ext_gcn_constants (void)\n   /* FIXME: this constant probably does not match what hardware really loads.\n      Reality check it eventually.  */\n   real_from_string (&dconst1over2pi,\n-\t\t    \"0.1591549430918953357663423455968866839\");\n+\t\t    \"0.15915494309189532\");\n   real_convert (&dconst1over2pi, SFmode, &dconst1over2pi);\n \n   ext_gcn_constants_init = 1;\n }\n \n+REAL_VALUE_TYPE\n+gcn_dconst1over2pi (void)\n+{\n+  if (!ext_gcn_constants_init)\n+    init_ext_gcn_constants ();\n+  return dconst1over2pi;\n+}\n+\n /* Return non-zero if X is a constant that can appear as an inline operand.\n    This is 0, 0.5, -0.5, 1, -1, 2, -2, 4,-4, 1/(2*pi)\n    Or a vector of those.\n@@ -3605,6 +3613,7 @@ enum gcn_builtin_type_index\n   GCN_BTI_SF,\n   GCN_BTI_V64SI,\n   GCN_BTI_V64SF,\n+  GCN_BTI_V64DF,\n   GCN_BTI_V64PTR,\n   GCN_BTI_SIPTR,\n   GCN_BTI_SFPTR,\n@@ -3621,6 +3630,7 @@ static GTY(()) tree gcn_builtin_types[GCN_BTI_MAX];\n #define sf_type_node (gcn_builtin_types[GCN_BTI_SF])\n #define v64si_type_node (gcn_builtin_types[GCN_BTI_V64SI])\n #define v64sf_type_node (gcn_builtin_types[GCN_BTI_V64SF])\n+#define v64df_type_node (gcn_builtin_types[GCN_BTI_V64DF])\n #define v64ptr_type_node (gcn_builtin_types[GCN_BTI_V64PTR])\n #define siptr_type_node (gcn_builtin_types[GCN_BTI_SIPTR])\n #define sfptr_type_node (gcn_builtin_types[GCN_BTI_SFPTR])\n@@ -3710,6 +3720,7 @@ gcn_init_builtin_types (void)\n   sf_type_node = float32_type_node;\n   v64si_type_node = build_vector_type (intSI_type_node, 64);\n   v64sf_type_node = build_vector_type (float_type_node, 64);\n+  v64df_type_node = build_vector_type (double_type_node, 64);\n   v64ptr_type_node = build_vector_type (unsigned_intDI_type_node\n \t\t\t\t\t/*build_pointer_type\n \t\t\t\t\t  (integer_type_node) */\n@@ -3977,6 +3988,105 @@ gcn_expand_builtin_1 (tree exp, rtx target, rtx /*subtarget */ ,\n \temit_insn (gen_sqrtsf2 (target, arg));\n \treturn target;\n       }\n+    case GCN_BUILTIN_FABSVF:\n+      {\n+\tif (ignore)\n+\t  return target;\n+\trtx exec = gcn_full_exec_reg ();\n+\trtx arg = force_reg (V64SFmode,\n+\t\t\t     expand_expr (CALL_EXPR_ARG (exp, 0), NULL_RTX,\n+\t\t\t\t\t  V64SFmode,\n+\t\t\t\t\t  EXPAND_NORMAL));\n+\temit_insn (gen_absv64sf2_exec\n+\t\t   (target, arg, gcn_gen_undef (V64SFmode), exec));\n+\treturn target;\n+      }\n+    case GCN_BUILTIN_LDEXPVF:\n+      {\n+\tif (ignore)\n+\t  return target;\n+\trtx exec = gcn_full_exec_reg ();\n+\trtx arg1 = force_reg (V64SFmode,\n+\t\t\t      expand_expr (CALL_EXPR_ARG (exp, 0), NULL_RTX,\n+\t\t\t\t\t   V64SFmode,\n+\t\t\t\t\t   EXPAND_NORMAL));\n+\trtx arg2 = force_reg (V64SImode,\n+\t\t\t      expand_expr (CALL_EXPR_ARG (exp, 1), NULL_RTX,\n+\t\t\t\t\t   V64SImode,\n+\t\t\t\t\t   EXPAND_NORMAL));\n+\temit_insn (gen_ldexpv64sf3_exec\n+\t\t   (target, arg1, arg2, gcn_gen_undef (V64SFmode), exec));\n+\treturn target;\n+      }\n+    case GCN_BUILTIN_LDEXPV:\n+      {\n+\tif (ignore)\n+\t  return target;\n+\trtx exec = gcn_full_exec_reg ();\n+\trtx arg1 = force_reg (V64DFmode,\n+\t\t\t      expand_expr (CALL_EXPR_ARG (exp, 0), NULL_RTX,\n+\t\t\t\t\t   V64SFmode,\n+\t\t\t\t\t   EXPAND_NORMAL));\n+\trtx arg2 = force_reg (V64SImode,\n+\t\t\t      expand_expr (CALL_EXPR_ARG (exp, 1), NULL_RTX,\n+\t\t\t\t\t   V64SImode,\n+\t\t\t\t\t   EXPAND_NORMAL));\n+\temit_insn (gen_ldexpv64df3_exec\n+\t\t   (target, arg1, arg2, gcn_gen_undef (V64DFmode), exec));\n+\treturn target;\n+      }\n+    case GCN_BUILTIN_FREXPVF_EXP:\n+      {\n+\tif (ignore)\n+\t  return target;\n+\trtx exec = gcn_full_exec_reg ();\n+\trtx arg = force_reg (V64SFmode,\n+\t\t\t     expand_expr (CALL_EXPR_ARG (exp, 0), NULL_RTX,\n+\t\t\t\t\t  V64SFmode,\n+\t\t\t\t\t  EXPAND_NORMAL));\n+\temit_insn (gen_frexpv64sf_exp2_exec\n+\t\t   (target, arg, gcn_gen_undef (V64SImode), exec));\n+\treturn target;\n+      }\n+    case GCN_BUILTIN_FREXPVF_MANT:\n+      {\n+\tif (ignore)\n+\t  return target;\n+\trtx exec = gcn_full_exec_reg ();\n+\trtx arg = force_reg (V64SFmode,\n+\t\t\t     expand_expr (CALL_EXPR_ARG (exp, 0), NULL_RTX,\n+\t\t\t\t\t  V64SFmode,\n+\t\t\t\t\t  EXPAND_NORMAL));\n+\temit_insn (gen_frexpv64sf_mant2_exec\n+\t\t   (target, arg, gcn_gen_undef (V64SFmode), exec));\n+\treturn target;\n+      }\n+    case GCN_BUILTIN_FREXPV_EXP:\n+      {\n+\tif (ignore)\n+\t  return target;\n+\trtx exec = gcn_full_exec_reg ();\n+\trtx arg = force_reg (V64DFmode,\n+\t\t\t     expand_expr (CALL_EXPR_ARG (exp, 0), NULL_RTX,\n+\t\t\t\t\t  V64DFmode,\n+\t\t\t\t\t  EXPAND_NORMAL));\n+\temit_insn (gen_frexpv64df_exp2_exec\n+\t\t   (target, arg, gcn_gen_undef (V64SImode), exec));\n+\treturn target;\n+      }\n+    case GCN_BUILTIN_FREXPV_MANT:\n+      {\n+\tif (ignore)\n+\t  return target;\n+\trtx exec = gcn_full_exec_reg ();\n+\trtx arg = force_reg (V64DFmode,\n+\t\t\t     expand_expr (CALL_EXPR_ARG (exp, 0), NULL_RTX,\n+\t\t\t\t\t  V64DFmode,\n+\t\t\t\t\t  EXPAND_NORMAL));\n+\temit_insn (gen_frexpv64df_mant2_exec\n+\t\t   (target, arg, gcn_gen_undef (V64DFmode), exec));\n+\treturn target;\n+      }\n     case GCN_BUILTIN_OMP_DIM_SIZE:\n       {\n \tif (ignore)\n@@ -6476,7 +6586,7 @@ print_operand (FILE *file, rtx x, int code)\n \t      str = \"-4.0\";\n \t      break;\n \t    case 248:\n-\t      str = \"1/pi\";\n+\t      str = \"0.15915494\";\n \t      break;\n \t    default:\n \t      rtx ix = simplify_gen_subreg (GET_MODE (x) == DFmode"}, {"sha": "a3c9523cd6dc6e31c3ba1ab1ce2b77965e4f4e61", "filename": "gcc/config/gcn/gcn.md", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eff73c104a3db882f3bc7f567f322e40470c7571/gcc%2Fconfig%2Fgcn%2Fgcn.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eff73c104a3db882f3bc7f567f322e40470c7571/gcc%2Fconfig%2Fgcn%2Fgcn.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fgcn%2Fgcn.md?ref=eff73c104a3db882f3bc7f567f322e40470c7571", "patch": "@@ -82,7 +82,9 @@\n   UNSPEC_GATHER\n   UNSPEC_SCATTER\n   UNSPEC_RCP\n-  UNSPEC_FLBIT_INT])\n+  UNSPEC_FLBIT_INT\n+  UNSPEC_FLOOR UNSPEC_CEIL UNSPEC_SIN UNSPEC_COS UNSPEC_EXP2 UNSPEC_LOG2\n+  UNSPEC_LDEXP UNSPEC_FREXP_EXP UNSPEC_FREXP_MANT])\n \n ;; }}}\n ;; {{{ Attributes"}]}