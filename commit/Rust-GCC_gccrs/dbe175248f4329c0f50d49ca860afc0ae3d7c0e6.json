{"sha": "dbe175248f4329c0f50d49ca860afc0ae3d7c0e6", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZGJlMTc1MjQ4ZjQzMjljMGY1MGQ0OWNhODYwYWZjMGFlM2Q3YzBlNg==", "commit": {"author": {"name": "Paolo Carlini", "email": "paolo.carlini@oracle.com", "date": "2011-11-08T14:07:27Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2011-11-08T14:07:27Z"}, "message": "acinclude.m4 ([GLIBCXX_ENABLE_VISIBILITY]): Rename to [GLIBCXX_ENABLE_LIBSTDCXX_VISIBILITY]...\n\n2011-11-08  Paolo Carlini  <paolo.carlini@oracle.com>\n\n\t* acinclude.m4 ([GLIBCXX_ENABLE_VISIBILITY]): Rename to\n\t[GLIBCXX_ENABLE_LIBSTDCXX_VISIBILITY], likewise for the\n\toption itself, to --enable-libstdcxx-visibility.\n\t* configure.ac: Adjust call.\n\t* doc/xml/manual/configure.xml: Update.\n\t* configure: Regenerate.\n\nFrom-SVN: r181162", "tree": {"sha": "a8bb2f9a583f23e42df67549321f2fb65746fc28", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a8bb2f9a583f23e42df67549321f2fb65746fc28"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/dbe175248f4329c0f50d49ca860afc0ae3d7c0e6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dbe175248f4329c0f50d49ca860afc0ae3d7c0e6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/dbe175248f4329c0f50d49ca860afc0ae3d7c0e6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dbe175248f4329c0f50d49ca860afc0ae3d7c0e6/comments", "author": null, "committer": null, "parents": [{"sha": "fabe6a9a7a3154b2d03c7584847a48299ca1f042", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fabe6a9a7a3154b2d03c7584847a48299ca1f042", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fabe6a9a7a3154b2d03c7584847a48299ca1f042"}], "stats": {"total": 89, "additions": 51, "deletions": 38}, "files": [{"sha": "0fc92a0e5ed824b6d73d2b4836e7ac4fc3d20671", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dbe175248f4329c0f50d49ca860afc0ae3d7c0e6/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dbe175248f4329c0f50d49ca860afc0ae3d7c0e6/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=dbe175248f4329c0f50d49ca860afc0ae3d7c0e6", "patch": "@@ -1,3 +1,12 @@\n+2011-11-08  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+\t* acinclude.m4 ([GLIBCXX_ENABLE_VISIBILITY]): Rename to\n+\t[GLIBCXX_ENABLE_LIBSTDCXX_VISIBILITY], likewise for the\n+\toption itself, to --enable-libstdcxx-visibility.\n+\t* configure.ac: Adjust call.\n+\t* doc/xml/manual/configure.xml: Update.\n+\t* configure: Regenerate.\n+\n 2011-11-08  Paolo Carlini  <paolo.carlini@oracle.com>\n \n \t* testsuite/29_atomics/headers/atomic/macros.cc: Avoid -Wall"}, {"sha": "fee5c6f27767f60ee6270104543346ba37539bab", "filename": "libstdc++-v3/acinclude.m4", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dbe175248f4329c0f50d49ca860afc0ae3d7c0e6/libstdc%2B%2B-v3%2Facinclude.m4", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dbe175248f4329c0f50d49ca860afc0ae3d7c0e6/libstdc%2B%2B-v3%2Facinclude.m4", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Facinclude.m4?ref=dbe175248f4329c0f50d49ca860afc0ae3d7c0e6", "patch": "@@ -3031,15 +3031,15 @@ EOF\n dnl\n dnl Allow visibility attributes to be used on namespaces, objects, etc.\n dnl\n-dnl --enable-visibility enables attempt to use visibility attributes.\n-dnl --disable-visibility turns off all use of visibility attributes.\n-dnl  +  Usage:  GLIBCXX_ENABLE_VISIBILITY[(DEFAULT)]\n+dnl --enable-libstdcxx-visibility enables attempt to use visibility attributes.\n+dnl --disable-libstdcxx-visibility turns off all use of visibility attributes.\n+dnl  +  Usage:  GLIBCXX_ENABLE_LIBSTDCXX_VISIBILITY[(DEFAULT)]\n dnl       Where DEFAULT is 'yes'.\n dnl\n-AC_DEFUN([GLIBCXX_ENABLE_VISIBILITY], [\n-GLIBCXX_ENABLE(visibility,$1,,[enables visibility safe usage])\n+AC_DEFUN([GLIBCXX_ENABLE_LIBSTDCXX_VISIBILITY], [\n+GLIBCXX_ENABLE(libstdcxx-visibility,$1,,[enables visibility safe usage])\n \n-if test x$enable_visibility = xyes ; then\n+if test x$enable_libstdcxx_visibility = xyes ; then\n   dnl all hail libgfortran\n   dnl Check whether the target supports hidden visibility.\n   AC_CACHE_CHECK([whether the target supports hidden visibility],\n@@ -3051,12 +3051,12 @@ if test x$enable_visibility = xyes ; then\n \t\t glibcxx_cv_have_attribute_visibility=no)\n   CFLAGS=\"$save_CFLAGS\"])\n   if test $glibcxx_cv_have_attribute_visibility = no; then\n-    enable_visibility=no\n+    enable_libstdcxx_visibility=no\n   fi\n fi\n \n-GLIBCXX_CONDITIONAL(ENABLE_VISIBILITY, test $enable_visibility = yes)\n-AC_MSG_NOTICE([visibility supported: $enable_visibility])\n+GLIBCXX_CONDITIONAL(ENABLE_VISIBILITY, test $enable_libstdcxx_visibility = yes)\n+AC_MSG_NOTICE([visibility supported: $enable_libstdcxx_visibility])\n ])\n \n "}, {"sha": "fa755b4723697e0b14b07ca843a17921ffc23919", "filename": "libstdc++-v3/configure", "status": "modified", "additions": 23, "deletions": 22, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dbe175248f4329c0f50d49ca860afc0ae3d7c0e6/libstdc%2B%2B-v3%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dbe175248f4329c0f50d49ca860afc0ae3d7c0e6/libstdc%2B%2B-v3%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfigure?ref=dbe175248f4329c0f50d49ca860afc0ae3d7c0e6", "patch": "@@ -865,7 +865,7 @@ with_libiconv_prefix\n with_system_libunwind\n enable_linux_futex\n enable_symvers\n-enable_visibility\n+enable_libstdcxx_visibility\n with_gxx_include_dir\n enable_version_specific_runtime_libs\n '\n@@ -1554,7 +1554,8 @@ Optional Features:\n   --enable-symvers[=STYLE]\n                           enables symbol versioning of the shared library\n                           [default=yes]\n-  --enable-visibility     enables visibility safe usage [default=yes]\n+  --enable-libstdcxx-visibility\n+                          enables visibility safe usage [default=yes]\n   --enable-version-specific-runtime-libs\n                           Specify that runtime libraries should be installed\n                           in a compiler-specific directory\n@@ -11487,7 +11488,7 @@ else\n   lt_dlunknown=0; lt_dlno_uscore=1; lt_dlneed_uscore=2\n   lt_status=$lt_dlunknown\n   cat > conftest.$ac_ext <<_LT_EOF\n-#line 11490 \"configure\"\n+#line 11491 \"configure\"\n #include \"confdefs.h\"\n \n #if HAVE_DLFCN_H\n@@ -11593,7 +11594,7 @@ else\n   lt_dlunknown=0; lt_dlno_uscore=1; lt_dlneed_uscore=2\n   lt_status=$lt_dlunknown\n   cat > conftest.$ac_ext <<_LT_EOF\n-#line 11596 \"configure\"\n+#line 11597 \"configure\"\n #include \"confdefs.h\"\n \n #if HAVE_DLFCN_H\n@@ -14951,7 +14952,7 @@ fi\n     #\n     # Fake what AC_TRY_COMPILE does.  XXX Look at redoing this new-style.\n     cat > conftest.$ac_ext << EOF\n-#line 14954 \"configure\"\n+#line 14955 \"configure\"\n struct S { ~S(); };\n void bar();\n void foo()\n@@ -15302,7 +15303,7 @@ $as_echo \"$glibcxx_cv_atomic_long_long\" >&6; }\n   # Fake what AC_TRY_COMPILE does.\n \n     cat > conftest.$ac_ext << EOF\n-#line 15305 \"configure\"\n+#line 15306 \"configure\"\n int main()\n {\n   typedef bool atomic_type;\n@@ -15339,7 +15340,7 @@ $as_echo \"$glibcxx_cv_atomic_bool\" >&6; }\n     rm -f conftest*\n \n     cat > conftest.$ac_ext << EOF\n-#line 15342 \"configure\"\n+#line 15343 \"configure\"\n int main()\n {\n   typedef short atomic_type;\n@@ -15376,7 +15377,7 @@ $as_echo \"$glibcxx_cv_atomic_short\" >&6; }\n     rm -f conftest*\n \n     cat > conftest.$ac_ext << EOF\n-#line 15379 \"configure\"\n+#line 15380 \"configure\"\n int main()\n {\n   // NB: _Atomic_word not necessarily int.\n@@ -15414,7 +15415,7 @@ $as_echo \"$glibcxx_cv_atomic_int\" >&6; }\n     rm -f conftest*\n \n     cat > conftest.$ac_ext << EOF\n-#line 15417 \"configure\"\n+#line 15418 \"configure\"\n int main()\n {\n   typedef long long atomic_type;\n@@ -15490,7 +15491,7 @@ $as_echo \"$as_me: WARNING: Performance of certain classes will degrade as a resu\n   # unnecessary for this test.\n \n     cat > conftest.$ac_ext << EOF\n-#line 15493 \"configure\"\n+#line 15494 \"configure\"\n int main()\n {\n   _Decimal32 d1;\n@@ -15532,7 +15533,7 @@ ac_compiler_gnu=$ac_cv_cxx_compiler_gnu\n   # unnecessary for this test.\n \n     cat > conftest.$ac_ext << EOF\n-#line 15535 \"configure\"\n+#line 15536 \"configure\"\n template<typename T1, typename T2>\n   struct same\n   { typedef T2 type; };\n@@ -15566,7 +15567,7 @@ $as_echo \"$enable_int128\" >&6; }\n     rm -f conftest*\n \n     cat > conftest.$ac_ext << EOF\n-#line 15569 \"configure\"\n+#line 15570 \"configure\"\n template<typename T1, typename T2>\n   struct same\n   { typedef T2 type; };\n@@ -65145,21 +65146,21 @@ $as_echo \"$glibcxx_ptrdiff_t_is_i\" >&6; }\n \n \n \n- # Check whether --enable-visibility was given.\n-if test \"${enable_visibility+set}\" = set; then :\n-  enableval=$enable_visibility;\n+ # Check whether --enable-libstdcxx-visibility was given.\n+if test \"${enable_libstdcxx_visibility+set}\" = set; then :\n+  enableval=$enable_libstdcxx_visibility;\n       case \"$enableval\" in\n        yes|no) ;;\n-       *) as_fn_error \"Argument to enable/disable visibility must be yes or no\" \"$LINENO\" 5 ;;\n+       *) as_fn_error \"Argument to enable/disable libstdcxx-visibility must be yes or no\" \"$LINENO\" 5 ;;\n       esac\n \n else\n-  enable_visibility=yes\n+  enable_libstdcxx_visibility=yes\n fi\n \n \n \n-if test x$enable_visibility = xyes ; then\n+if test x$enable_libstdcxx_visibility = xyes ; then\n       { $as_echo \"$as_me:${as_lineno-$LINENO}: checking whether the target supports hidden visibility\" >&5\n $as_echo_n \"checking whether the target supports hidden visibility... \" >&6; }\n if test \"${glibcxx_cv_have_attribute_visibility+set}\" = set; then :\n@@ -65190,13 +65191,13 @@ fi\n { $as_echo \"$as_me:${as_lineno-$LINENO}: result: $glibcxx_cv_have_attribute_visibility\" >&5\n $as_echo \"$glibcxx_cv_have_attribute_visibility\" >&6; }\n   if test $glibcxx_cv_have_attribute_visibility = no; then\n-    enable_visibility=no\n+    enable_libstdcxx_visibility=no\n   fi\n fi\n \n \n-{ $as_echo \"$as_me:${as_lineno-$LINENO}: visibility supported: $enable_visibility\" >&5\n-$as_echo \"$as_me: visibility supported: $enable_visibility\" >&6;}\n+{ $as_echo \"$as_me:${as_lineno-$LINENO}: visibility supported: $enable_libstdcxx_visibility\" >&5\n+$as_echo \"$as_me: visibility supported: $enable_libstdcxx_visibility\" >&6;}\n \n \n ac_ldbl_compat=no\n@@ -66184,7 +66185,7 @@ else\n fi\n \n \n-    if test $enable_visibility = yes; then\n+    if test $enable_libstdcxx_visibility = yes; then\n   ENABLE_VISIBILITY_TRUE=\n   ENABLE_VISIBILITY_FALSE='#'\n else"}, {"sha": "d453f63e207191614a55a4ae3680673505135025", "filename": "libstdc++-v3/configure.ac", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dbe175248f4329c0f50d49ca860afc0ae3d7c0e6/libstdc%2B%2B-v3%2Fconfigure.ac", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dbe175248f4329c0f50d49ca860afc0ae3d7c0e6/libstdc%2B%2B-v3%2Fconfigure.ac", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfigure.ac?ref=dbe175248f4329c0f50d49ca860afc0ae3d7c0e6", "patch": "@@ -311,7 +311,7 @@ GCC_HEADER_STDINT(include/gstdint.h)\n GLIBCXX_ENABLE_SYMVERS([yes])\n AC_SUBST(libtool_VERSION)\n \n-GLIBCXX_ENABLE_VISIBILITY([yes])\n+GLIBCXX_ENABLE_LIBSTDCXX_VISIBILITY([yes])\n \n ac_ldbl_compat=no\n case \"$target\" in"}, {"sha": "026711eefab0332e0708bd9cda25be4743f7f017", "filename": "libstdc++-v3/doc/xml/manual/configure.xml", "status": "modified", "additions": 9, "deletions": 6, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dbe175248f4329c0f50d49ca860afc0ae3d7c0e6/libstdc%2B%2B-v3%2Fdoc%2Fxml%2Fmanual%2Fconfigure.xml", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dbe175248f4329c0f50d49ca860afc0ae3d7c0e6/libstdc%2B%2B-v3%2Fdoc%2Fxml%2Fmanual%2Fconfigure.xml", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdoc%2Fxml%2Fmanual%2Fconfigure.xml?ref=dbe175248f4329c0f50d49ca860afc0ae3d7c0e6", "patch": "@@ -315,12 +315,15 @@\n \n  </listitem></varlistentry>\n \n- <varlistentry><term><code>--enable-visibility</code></term>\n- <listitem><para> In 4.2 and later, enables or disables visibility attributes.\n-\tIf enabled (as by default), and the compiler seems capable of\n-\tpassing the simple sanity checks thrown at it, adjusts items\n-\tin namespace std, namespace std::tr1, and namespace __gnu_cxx\n-\tso that -fvisibility options work.\n+ <varlistentry><term><code>--enable-libstdcxx-visibility</code></term>\n+ <listitem><para> In 4.2 and later, enables or disables visibility \n+        attributes. If enabled (as by default), and the compiler seems\n+        capable of passing the simple sanity checks thrown at it, adjusts\n+        items in namespace std, namespace std::tr1, namespace std::tr2,\n+        and namespace __gnu_cxx to have <code>visibility (\"default\")</code>\n+        so that -fvisibility options can be used without affecting the\n+        normal external-visibility of namespace std entities.\n+        Prior to 4.7 this option was spelled <code>--enable-visibility</code>.\n     </para>\n  </listitem></varlistentry>\n "}]}