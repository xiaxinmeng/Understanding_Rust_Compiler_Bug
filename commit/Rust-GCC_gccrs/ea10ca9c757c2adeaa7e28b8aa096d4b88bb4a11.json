{"sha": "ea10ca9c757c2adeaa7e28b8aa096d4b88bb4a11", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWExMGNhOWM3NTdjMmFkZWFhN2UyOGI4YWEwOTZkNGI4OGJiNGExMQ==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2011-10-16T12:12:11Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2011-10-16T12:12:11Z"}, "message": "[multiple changes]\n\n2011-10-16  Tristan Gingold  <gingold@adacore.com>\n\n\t* link.c (_AIX): Add support for GNU ld.        \n\n2011-10-16  Fedor Rybin  <frybin@adacore.com>\n\n\t* gnat_ugn.texi: Fixing gnattest example names in the doc.\n\tAdding explanation to additional tests usage.\n\n2011-10-16  Robert Dewar  <dewar@adacore.com>\n\n\t* exp_ch6.adb, sem_ch6.adb: Minor reformatting.\n\n2011-10-16  Eric Botcazou  <ebotcazou@adacore.com>\n\n\t* a-convec.adb: Fix minor inconsistencies.\n\n2011-10-16  Matthew Heaney  <heaney@adacore.com>\n\n\t* a-cusyqu.ads, a-cbsyqu.ads, a-cuprqu.ads, a-cbprqu.ads (package\n\tImplementation): Specify pragma Implementation_Defined.\n\nFrom-SVN: r180056", "tree": {"sha": "4dec901f1610b603fb2a4e731e6126bbfdbf566a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4dec901f1610b603fb2a4e731e6126bbfdbf566a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ea10ca9c757c2adeaa7e28b8aa096d4b88bb4a11", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ea10ca9c757c2adeaa7e28b8aa096d4b88bb4a11", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ea10ca9c757c2adeaa7e28b8aa096d4b88bb4a11", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ea10ca9c757c2adeaa7e28b8aa096d4b88bb4a11/comments", "author": null, "committer": null, "parents": [{"sha": "6aa904c4c64f9cb0673323d4eb5bbc70bd47bfb4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6aa904c4c64f9cb0673323d4eb5bbc70bd47bfb4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6aa904c4c64f9cb0673323d4eb5bbc70bd47bfb4"}], "stats": {"total": 166, "additions": 109, "deletions": 57}, "files": [{"sha": "9c17e0ea8266000761b786df1b042aa0b841ba5b", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ea10ca9c757c2adeaa7e28b8aa096d4b88bb4a11/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ea10ca9c757c2adeaa7e28b8aa096d4b88bb4a11/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=ea10ca9c757c2adeaa7e28b8aa096d4b88bb4a11", "patch": "@@ -1,3 +1,25 @@\n+2011-10-16  Tristan Gingold  <gingold@adacore.com>\n+\n+\t* link.c (_AIX): Add support for GNU ld.        \n+\n+2011-10-16  Fedor Rybin  <frybin@adacore.com>\n+\n+\t* gnat_ugn.texi: Fixing gnattest example names in the doc.\n+\tAdding explanation to additional tests usage.\n+\n+2011-10-16  Robert Dewar  <dewar@adacore.com>\n+\n+\t* exp_ch6.adb, sem_ch6.adb: Minor reformatting.\n+\n+2011-10-16  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* a-convec.adb: Fix minor inconsistencies.\n+\n+2011-10-16  Matthew Heaney  <heaney@adacore.com>\n+\n+\t* a-cusyqu.ads, a-cbsyqu.ads, a-cuprqu.ads, a-cbprqu.ads (package\n+\tImplementation): Specify pragma Implementation_Defined.\n+\n 2011-10-15  Nicolas Roche  <roche@adacore.com>\n \n \t* gcc-interface/lang-specs.h: Ensure -mrtp switch is passed when using"}, {"sha": "aa184a1cc5aabb4ff76b78d4d2e0fb6b9a98ad94", "filename": "gcc/ada/a-cbprqu.ads", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ea10ca9c757c2adeaa7e28b8aa096d4b88bb4a11/gcc%2Fada%2Fa-cbprqu.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ea10ca9c757c2adeaa7e28b8aa096d4b88bb4a11/gcc%2Fada%2Fa-cbprqu.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-cbprqu.ads?ref=ea10ca9c757c2adeaa7e28b8aa096d4b88bb4a11", "patch": "@@ -54,11 +54,11 @@ generic\n package Ada.Containers.Bounded_Priority_Queues is\n    pragma Preelaborate;\n \n-   --  All identifiers in this unit are implementation defined\n+   package Implementation is\n \n-   pragma Implementation_Defined;\n+      --  All identifiers in this unit are implementation defined\n \n-   package Implementation is\n+      pragma Implementation_Defined;\n \n       type List_Type (Capacity : Count_Type) is tagged limited private;\n "}, {"sha": "0d6e3c39958442ee727ed6590fdca2e174e7c063", "filename": "gcc/ada/a-cbsyqu.ads", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ea10ca9c757c2adeaa7e28b8aa096d4b88bb4a11/gcc%2Fada%2Fa-cbsyqu.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ea10ca9c757c2adeaa7e28b8aa096d4b88bb4a11/gcc%2Fada%2Fa-cbsyqu.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-cbsyqu.ads?ref=ea10ca9c757c2adeaa7e28b8aa096d4b88bb4a11", "patch": "@@ -44,11 +44,11 @@ generic\n package Ada.Containers.Bounded_Synchronized_Queues is\n    pragma Preelaborate;\n \n-   --  All identifiers in this unit are implementation defined\n+   package Implementation is\n \n-   pragma Implementation_Defined;\n+      --  All identifiers in this unit are implementation defined\n \n-   package Implementation is\n+      pragma Implementation_Defined;\n \n       type List_Type (Capacity : Count_Type) is tagged limited private;\n "}, {"sha": "a57f7fbd9a88d67e8ac69b8867bc32f7edee0210", "filename": "gcc/ada/a-convec.adb", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ea10ca9c757c2adeaa7e28b8aa096d4b88bb4a11/gcc%2Fada%2Fa-convec.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ea10ca9c757c2adeaa7e28b8aa096d4b88bb4a11/gcc%2Fada%2Fa-convec.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-convec.adb?ref=ea10ca9c757c2adeaa7e28b8aa096d4b88bb4a11", "patch": "@@ -802,7 +802,7 @@ package body Ada.Containers.Vectors is\n       if Is_Empty (Object.Container.all) then\n          return No_Element;\n       else\n-         return Cursor'(Object.Container, Index_Type'First);\n+         return (Object.Container, Index_Type'First);\n       end if;\n    end First;\n \n@@ -1517,7 +1517,7 @@ package body Ada.Containers.Vectors is\n \n       Insert (Container, Index, New_Item);\n \n-      Position := Cursor'(Container'Unchecked_Access, Index);\n+      Position := (Container'Unchecked_Access, Index);\n    end Insert;\n \n    procedure Insert\n@@ -1600,7 +1600,7 @@ package body Ada.Containers.Vectors is\n \n       Insert (Container, Index, New_Item, Count);\n \n-      Position := Cursor'(Container'Unchecked_Access, Index);\n+      Position := (Container'Unchecked_Access, Index);\n    end Insert;\n \n    procedure Insert\n@@ -2017,7 +2017,7 @@ package body Ada.Containers.Vectors is\n \n       Insert_Space (Container, Index, Count => Count);\n \n-      Position := Cursor'(Container'Unchecked_Access, Index);\n+      Position := (Container'Unchecked_Access, Index);\n    end Insert_Space;\n \n    --------------\n@@ -2093,7 +2093,7 @@ package body Ada.Containers.Vectors is\n       if Is_Empty (Object.Container.all) then\n          return No_Element;\n       else\n-         return Cursor'(Object.Container, Object.Container.Last);\n+         return (Object.Container, Object.Container.Last);\n       end if;\n    end Last;\n \n@@ -2406,7 +2406,7 @@ package body Ada.Containers.Vectors is\n       return Constant_Reference_Type\n    is\n    begin\n-      if (Position) > Container.Last then\n+      if Position > Container.Last then\n          raise Constraint_Error with \"Index is out of range\";\n       else\n          return (Element => Container.Elements.EA (Position)'Access);\n@@ -3009,7 +3009,7 @@ package body Ada.Containers.Vectors is\n       if Index not in Index_Type'First .. Container.Last then\n          return No_Element;\n       else\n-         return Cursor'(Container'Unchecked_Access, Index);\n+         return (Container'Unchecked_Access, Index);\n       end if;\n    end To_Cursor;\n "}, {"sha": "3709f42aa29ddbc95093fef63bf6fae9da5a852a", "filename": "gcc/ada/a-cuprqu.ads", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ea10ca9c757c2adeaa7e28b8aa096d4b88bb4a11/gcc%2Fada%2Fa-cuprqu.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ea10ca9c757c2adeaa7e28b8aa096d4b88bb4a11/gcc%2Fada%2Fa-cuprqu.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-cuprqu.ads?ref=ea10ca9c757c2adeaa7e28b8aa096d4b88bb4a11", "patch": "@@ -52,11 +52,11 @@ generic\n package Ada.Containers.Unbounded_Priority_Queues is\n    pragma Preelaborate;\n \n-   --  All identifiers in this unit are implementation defined\n+   package Implementation is\n \n-   pragma Implementation_Defined;\n+      --  All identifiers in this unit are implementation defined\n \n-   package Implementation is\n+      pragma Implementation_Defined;\n \n       type List_Type is tagged limited private;\n "}, {"sha": "c4f9d7f7d590704cad5e45872f04bbda989bfe8f", "filename": "gcc/ada/a-cusyqu.ads", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ea10ca9c757c2adeaa7e28b8aa096d4b88bb4a11/gcc%2Fada%2Fa-cusyqu.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ea10ca9c757c2adeaa7e28b8aa096d4b88bb4a11/gcc%2Fada%2Fa-cusyqu.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-cusyqu.ads?ref=ea10ca9c757c2adeaa7e28b8aa096d4b88bb4a11", "patch": "@@ -44,11 +44,11 @@ generic\n package Ada.Containers.Unbounded_Synchronized_Queues is\n    pragma Preelaborate;\n \n-   --  All identifiers in this unit are implementation defined\n+   package Implementation is\n \n-   pragma Implementation_Defined;\n+      --  All identifiers in this unit are implementation defined\n \n-   package Implementation is\n+      pragma Implementation_Defined;\n \n       type List_Type is tagged limited private;\n "}, {"sha": "993fa40c3fac9f28fb1257757fb795a1ec256d77", "filename": "gcc/ada/exp_ch6.adb", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ea10ca9c757c2adeaa7e28b8aa096d4b88bb4a11/gcc%2Fada%2Fexp_ch6.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ea10ca9c757c2adeaa7e28b8aa096d4b88bb4a11/gcc%2Fada%2Fexp_ch6.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch6.adb?ref=ea10ca9c757c2adeaa7e28b8aa096d4b88bb4a11", "patch": "@@ -311,11 +311,11 @@ package body Exp_Ch6 is\n       Add_Extra_Actual_To_Call\n         (Function_Call, Alloc_Form_Formal, Alloc_Form_Actual);\n \n-      --  Pass the Storage_Pool parameter. This parameter is omitted\n+      --  Pass the Storage_Pool parameter. This parameter is omitted on\n       --  .NET/JVM/ZFP as those targets do not support pools.\n \n-      if\n-        VM_Target = No_VM and then RTE_Available (RE_Root_Storage_Pool_Ptr)\n+      if VM_Target = No_VM\n+        and then RTE_Available (RE_Root_Storage_Pool_Ptr)\n       then\n          Pool_Formal := Build_In_Place_Formal (Function_Id, BIP_Storage_Pool);\n          Analyze_And_Resolve (Pool_Actual, Etype (Pool_Formal));\n@@ -5246,8 +5246,8 @@ package body Exp_Ch6 is\n                      --  pool parameter on .NET/JVM/ZFP because the parameter\n                      --  is not created in the first place.\n \n-                     if VM_Target = No_VM and then\n-                       RTE_Available (RE_Root_Storage_Pool_Ptr)\n+                     if VM_Target = No_VM\n+                       and then RTE_Available (RE_Root_Storage_Pool_Ptr)\n                      then\n                         Pool_Decl :=\n                           Make_Object_Renaming_Declaration (Loc,"}, {"sha": "7e9b243b943ae25edf3b6a7991a6a5daec2b61de", "filename": "gcc/ada/gnat_ugn.texi", "status": "modified", "additions": 45, "deletions": 18, "changes": 63, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ea10ca9c757c2adeaa7e28b8aa096d4b88bb4a11/gcc%2Fada%2Fgnat_ugn.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ea10ca9c757c2adeaa7e28b8aa096d4b88bb4a11/gcc%2Fada%2Fgnat_ugn.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgnat_ugn.texi?ref=ea10ca9c757c2adeaa7e28b8aa096d4b88bb4a11", "patch": "@@ -17878,13 +17878,13 @@ Let's take a very simple example using the first @command{gnattest} example\n located at\n \n @smallexample\n-<install_prefix>/share/examples/gnattest/lib1\n+<install_prefix>/share/examples/gnattest/simple\n @end smallexample\n \n This project contains a simple package containing one subprogram. By running gnattest\n \n @smallexample\n-$ gnattest --harness-dir=driver -Plib1.gpr\n+$ gnattest --harness-dir=driver -Psimple.gpr\n @end smallexample\n \n a test driver is created in dir \"driver\". It can be compiled and run:\n@@ -17896,18 +17896,18 @@ $ test_runner\n @end smallexample\n \n One failed test with diagnosis \"test not implemented\" is reported.\n-Since no special output option was specified the test package Lib1.Tests\n+Since no special output option was specified the test package Simple.Tests\n is located in\n \n @smallexample\n-<install_prefix>/share/examples/gnattest/lib1/src/tests\n+<install_prefix>/share/examples/gnattest/simple/src/tests\n @end smallexample\n \n For each package containing visible subprograms, a child test package is\n generated. It contains one test routine per tested subprogram. Each\n declaration of test subprogram has a comment specifying to which tested\n subprogram it corresponds. All the test routines have separated bodies.\n-The test routine locates at lib1-tests-test_inc_5eaee3.adb has a single\n+The test routine locates at simple-tests-test_inc_5eaee3.adb has a single\n statement - procedure Assert. It has two arguments: the boolean expression\n which we want to check and the diagnosis message to display if the condition\n is false.\n@@ -17945,11 +17945,11 @@ names and order of its parameters are the same, the old test routine will\n fit in it's place and no test stub will be generated for this subprogram.\n \n This can be demonstrated with the previous example. By uncommenting declaration\n-and body of function Dec in lib1.ads and lib1.adb, running\n+and body of function Dec in simple.ads and simple.adb, running\n @command{gnattest} on the project and then running the test driver:\n \n @smallexample\n-gnattest --harness-dir=driver -Plib1.gpr\n+gnattest --harness-dir=driver -Psimple.gpr\n cd driver\n gprbuild -Ptest_driver\n test_runner\n@@ -18001,15 +18001,15 @@ are already written so no need to worry if the tool reports that 0 new stubs\n were generated).\n \n @smallexample\n-cd examples/lib2\n-gnattest --harness-dir=driver -Plib2.gpr\n+cd <install_prefix>/share/examples/gnattest/tagged_rec\n+gnattest --harness-dir=driver -Ptagged_rec.gpr\n @end smallexample\n \n Taking a closer look at the test type declared in the test package\n Speed1.Controller_Tests is necessary. It is declared in\n \n @smallexample\n-examples/lib2/src/tests\n+<install_prefix>/share/examples/gnattest/tagged_rec/src/tests\n @end smallexample\n \n Test types are direct or indirect descendants of\n@@ -18045,7 +18045,7 @@ shown by running the test driver generated for second example. As previously\n mentioned, actual tests are already written for this example.\n \n @smallexample\n-cd examples/lib2/driver\n+cd driver\n gprbuild -Ptest_driver\n test_runner\n @end smallexample\n@@ -18084,7 +18084,7 @@ overridden parent tests against objects of the type which have overriding\n primitives.\n \n @smallexample\n-gnattest --harness-dir=driver --liskov -Plib2.gpr\n+gnattest --harness-dir=driver --liskov -Ptagged_rec.gpr\n cd driver\n gprbuild -Ptest_driver\n test_runner\n@@ -18108,8 +18108,8 @@ either count for Nominal mode or do not for Robustness mode).\n The third example demonstrates how it works:\n \n @smallexample\n-cd examples/lib3\n-gnattest --harness-dir=driver -Plib3.gpr\n+cd <install_prefix>/share/examples/gnattest/contracts\n+gnattest --harness-dir=driver -Pcontracts.gpr\n @end smallexample\n \n Putting actual checks within the range of the contract does not cause any\n@@ -18144,10 +18144,37 @@ the same way.\n @section Additional Tests\n \n @noindent\n-@command{gnattest} can add already existing testing code to the driver along\n-with new stubs. This solves the legacy problem: no need to rewrite all the\n-tests. The only thing required is a project file that has all the desired\n-test units (and all their dependencies) as it's source files.\n+@command{gnattest} can add user written tests to the main suite of the test\n+driver. @command{gnattest} traverses given packages and searches for test\n+routines. All procedures with a single in out parameter of a type which is\n+a derivation of AUnit.Test_Fixtures.Test_Fixture declared in package\n+specifications are added to the suites and then are executed by test driver.\n+(Set_Up and Tear_Down are filtered out).\n+\n+An example illustrates two ways of crating test harness for user written tests.\n+Directory additional contains a AUnit based test driver written by hand.\n+\n+@smallexample\n+<install_prefix>/share/examples/gnattest/additional_tests/\n+@end smallexample\n+\n+To create a test driver for already written tests use --harness-only option:\n+\n+@smallexample\n+gnattest -Padditional/harness/harness.gpr --harness-dir=harness_only \\\n+  --harness-only\n+gnatmake -Pharness_only/test_driver.gpr\n+harness_only/test_runner\n+@end smallexample\n+\n+Additional tests can also be executed together withgenerated tests:\n+\n+@smallexample\n+gnattest -Psimple.gpr --additional-tests=additional/harness/harness.gpr \\\n+  --harness-dir=mixing\n+gnatmake -Pmixing/test_driver.gpr\n+mixing/test_runner\n+@end smallexample\n \n @node Current Limitations\n @section Current Limitations"}, {"sha": "8bcad27d86b420e142935c9b0a815ea3dc807ec6", "filename": "gcc/ada/link.c", "status": "modified", "additions": 16, "deletions": 13, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ea10ca9c757c2adeaa7e28b8aa096d4b88bb4a11/gcc%2Fada%2Flink.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ea10ca9c757c2adeaa7e28b8aa096d4b88bb4a11/gcc%2Fada%2Flink.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flink.c?ref=ea10ca9c757c2adeaa7e28b8aa096d4b88bb4a11", "patch": "@@ -152,18 +152,6 @@ const char *__gnat_object_library_extension = \".a\";\n unsigned char __gnat_separate_run_path_options = 0;\n const char *__gnat_default_libgcc_subdir = \"lib\";\n \n-#elif defined (_AIX)\n-const char *__gnat_object_file_option = \"-Wl,-f,\";\n-const char *__gnat_run_path_option = \"\";\n-int __gnat_link_max = 15000;\n-const unsigned char __gnat_objlist_file_supported = 1;\n-char __gnat_shared_libgnat_default = STATIC;\n-char __gnat_shared_libgcc_default = STATIC;\n-unsigned char __gnat_using_gnu_linker = 0;\n-const char *__gnat_object_library_extension = \".a\";\n-unsigned char __gnat_separate_run_path_options = 0;\n-const char *__gnat_default_libgcc_subdir = \"lib\";\n-\n #elif defined (__FreeBSD__)\n const char *__gnat_object_file_option = \"\";\n const char *__gnat_run_path_option = \"-Wl,-rpath,\";\n@@ -204,12 +192,27 @@ const char *__gnat_default_libgcc_subdir = \"lib64\";\n const char *__gnat_default_libgcc_subdir = \"lib\";\n #endif\n \n+#elif defined (_AIX)\n+/* On AIX, even when with GNU ld we use native linker switches.  This is\n+   particularly important for '-f' as it should be interpreted by collect2.  */\n+\n+const char *__gnat_object_file_option = \"-Wl,-f,\";\n+const char *__gnat_run_path_option = \"\";\n+char __gnat_shared_libgnat_default = STATIC;\n+char __gnat_shared_libgcc_default = STATIC;\n+int __gnat_link_max = 15000;\n+const unsigned char __gnat_objlist_file_supported = 1;\n+unsigned char __gnat_using_gnu_linker = 0;\n+const char *__gnat_object_library_extension = \".a\";\n+unsigned char __gnat_separate_run_path_options = 0;\n+const char *__gnat_default_libgcc_subdir = \"lib\";\n+\n #elif (HAVE_GNU_LD)\n /*  These are the settings for all systems that use gnu ld. GNU style response\n     file is supported, the shared library default is STATIC.  */\n \n-const char *__gnat_run_path_option = \"\";\n const char *__gnat_object_file_option = \"\";\n+const char *__gnat_run_path_option = \"\";\n char __gnat_shared_libgnat_default = STATIC;\n char __gnat_shared_libgcc_default = STATIC;\n int __gnat_link_max = 8192;"}, {"sha": "3dbf782b60bfdff0763ae9d6583721fed9de110d", "filename": "gcc/ada/sem_ch6.adb", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ea10ca9c757c2adeaa7e28b8aa096d4b88bb4a11/gcc%2Fada%2Fsem_ch6.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ea10ca9c757c2adeaa7e28b8aa096d4b88bb4a11/gcc%2Fada%2Fsem_ch6.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch6.adb?ref=ea10ca9c757c2adeaa7e28b8aa096d4b88bb4a11", "patch": "@@ -6490,8 +6490,8 @@ package body Sem_Ch6 is\n                --  use a user-defined pool. This formal is not added on\n                --  .NET/JVM/ZFP as those targets do not support pools.\n \n-               if VM_Target = No_VM and then\n-                 RTE_Available (RE_Root_Storage_Pool_Ptr)\n+               if VM_Target = No_VM\n+                 and then RTE_Available (RE_Root_Storage_Pool_Ptr)\n                then\n                   Discard :=\n                     Add_Extra_Formal"}]}