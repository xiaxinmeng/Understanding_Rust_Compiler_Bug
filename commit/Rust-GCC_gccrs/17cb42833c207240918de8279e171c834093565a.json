{"sha": "17cb42833c207240918de8279e171c834093565a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTdjYjQyODMzYzIwNzI0MDkxOGRlODI3OWUxNzFjODM0MDkzNTY1YQ==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2015-01-20T18:29:58Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2015-01-20T18:29:58Z"}, "message": "re PR debug/64663 (ICE at -O1 and above with -g enabled on x86_64-linux-gnu)\n\n\tPR debug/64663\n\t* dwarf2out.c (decl_piece_node): Don't put bitsize into\n\tmode if bitsize <= 0.\n\t(decl_piece_bitsize, adjust_piece_list, add_var_loc_to_decl,\n\tdw_sra_loc_expr): Use HOST_WIDE_INT instead of int for bit\n\tsizes and positions.\n\n\t* gcc.dg/pr64663.c: New test.\n\nFrom-SVN: r219906", "tree": {"sha": "f0024654ba4929b13177d77f6b91416960580e26", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f0024654ba4929b13177d77f6b91416960580e26"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/17cb42833c207240918de8279e171c834093565a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/17cb42833c207240918de8279e171c834093565a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/17cb42833c207240918de8279e171c834093565a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/17cb42833c207240918de8279e171c834093565a/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "73cb399d519cb8ca4a25b0be074aca16096f6e51", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/73cb399d519cb8ca4a25b0be074aca16096f6e51", "html_url": "https://github.com/Rust-GCC/gccrs/commit/73cb399d519cb8ca4a25b0be074aca16096f6e51"}], "stats": {"total": 47, "additions": 39, "deletions": 8}, "files": [{"sha": "340f15d4aaecb083a44b3a857117bd2c5f3faa71", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/17cb42833c207240918de8279e171c834093565a/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/17cb42833c207240918de8279e171c834093565a/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=17cb42833c207240918de8279e171c834093565a", "patch": "@@ -1,3 +1,12 @@\n+2015-01-20  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR debug/64663\n+\t* dwarf2out.c (decl_piece_node): Don't put bitsize into\n+\tmode if bitsize <= 0.\n+\t(decl_piece_bitsize, adjust_piece_list, add_var_loc_to_decl,\n+\tdw_sra_loc_expr): Use HOST_WIDE_INT instead of int for bit\n+\tsizes and positions.\n+\n 2015-01-20  Chung-Lin Tang  <cltang@codesourcery.com>\n \n \t* config/nios2/nios2.c (nios2_asm_file_end): Implement"}, {"sha": "1cafd52bf00acdaed47dc4164fda73bcddb23511", "filename": "gcc/dwarf2out.c", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/17cb42833c207240918de8279e171c834093565a/gcc%2Fdwarf2out.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/17cb42833c207240918de8279e171c834093565a/gcc%2Fdwarf2out.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdwarf2out.c?ref=17cb42833c207240918de8279e171c834093565a", "patch": "@@ -5062,7 +5062,7 @@ equate_decl_number_to_die (tree decl, dw_die_ref decl_die)\n \n /* Return how many bits covers PIECE EXPR_LIST.  */\n \n-static int\n+static HOST_WIDE_INT\n decl_piece_bitsize (rtx piece)\n {\n   int ret = (int) GET_MODE (piece);\n@@ -5090,7 +5090,7 @@ decl_piece_varloc_ptr (rtx piece)\n static rtx_expr_list *\n decl_piece_node (rtx loc_note, HOST_WIDE_INT bitsize, rtx next)\n {\n-  if (bitsize <= (int) MAX_MACHINE_MODE)\n+  if (bitsize > 0 && bitsize <= (int) MAX_MACHINE_MODE)\n     return alloc_EXPR_LIST (bitsize, loc_note, next);\n   else\n     return alloc_EXPR_LIST (0, gen_rtx_CONCAT (VOIDmode,\n@@ -5129,7 +5129,7 @@ adjust_piece_list (rtx *dest, rtx *src, rtx *inner,\n \t\t   HOST_WIDE_INT bitpos, HOST_WIDE_INT piece_bitpos,\n \t\t   HOST_WIDE_INT bitsize, rtx loc_note)\n {\n-  int diff;\n+  HOST_WIDE_INT diff;\n   bool copy = inner != NULL;\n \n   if (copy)\n@@ -5269,7 +5269,7 @@ add_var_loc_to_decl (tree decl, rtx loc_note, const char *label)\n     {\n       struct var_loc_node *last = temp->last, *unused = NULL;\n       rtx *piece_loc = NULL, last_loc_note;\n-      int piece_bitpos = 0;\n+      HOST_WIDE_INT piece_bitpos = 0;\n       if (last->next)\n \t{\n \t  last = last->next;\n@@ -5280,7 +5280,7 @@ add_var_loc_to_decl (tree decl, rtx loc_note, const char *label)\n \t  piece_loc = &last->loc;\n \t  do\n \t    {\n-\t      int cur_bitsize = decl_piece_bitsize (*piece_loc);\n+\t      HOST_WIDE_INT cur_bitsize = decl_piece_bitsize (*piece_loc);\n \t      if (piece_bitpos + cur_bitsize > bitpos)\n \t\tbreak;\n \t      piece_bitpos += cur_bitsize;\n@@ -13924,7 +13924,7 @@ static dw_loc_descr_ref\n dw_sra_loc_expr (tree decl, rtx loc)\n {\n   rtx p;\n-  unsigned int padsize = 0;\n+  unsigned HOST_WIDE_INT padsize = 0;\n   dw_loc_descr_ref descr, *descr_tail;\n   unsigned HOST_WIDE_INT decl_size;\n   rtx varloc;\n@@ -13940,11 +13940,11 @@ dw_sra_loc_expr (tree decl, rtx loc)\n \n   for (p = loc; p; p = XEXP (p, 1))\n     {\n-      unsigned int bitsize = decl_piece_bitsize (p);\n+      unsigned HOST_WIDE_INT bitsize = decl_piece_bitsize (p);\n       rtx loc_note = *decl_piece_varloc_ptr (p);\n       dw_loc_descr_ref cur_descr;\n       dw_loc_descr_ref *tail, last = NULL;\n-      unsigned int opsize = 0;\n+      unsigned HOST_WIDE_INT opsize = 0;\n \n       if (loc_note == NULL_RTX\n \t  || NOTE_VAR_LOCATION_LOC (loc_note) == NULL_RTX)"}, {"sha": "598843154b655ef4cc5da66cf56cccb2946bb26a", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/17cb42833c207240918de8279e171c834093565a/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/17cb42833c207240918de8279e171c834093565a/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=17cb42833c207240918de8279e171c834093565a", "patch": "@@ -1,3 +1,8 @@\n+2015-01-20  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR debug/64663\n+\t* gcc.dg/pr64663.c: New test.\n+\n 2015-01-20  Paolo Carlini  <paolo.carlini@oracle.com>\n \n \tPR c++/64383"}, {"sha": "9a0bf0d23308bd9b04e0a05b1624868b39b24860", "filename": "gcc/testsuite/gcc.dg/pr64663.c", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/17cb42833c207240918de8279e171c834093565a/gcc%2Ftestsuite%2Fgcc.dg%2Fpr64663.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/17cb42833c207240918de8279e171c834093565a/gcc%2Ftestsuite%2Fgcc.dg%2Fpr64663.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr64663.c?ref=17cb42833c207240918de8279e171c834093565a", "patch": "@@ -0,0 +1,17 @@\n+/* PR debug/64663 */\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -g -w\" } */\n+\n+void\n+foo (void)\n+{\n+  int a[9];\n+  a[-8] = 0;\n+}\n+\n+void\n+bar (void)\n+{\n+  int a[9];\n+  a[-9] = 0;\n+}"}]}