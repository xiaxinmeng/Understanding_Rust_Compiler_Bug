{"sha": "aefdd5abe0eae984fa04ea12851c9ff0f1695033", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWVmZGQ1YWJlMGVhZTk4NGZhMDRlYTEyODUxYzlmZjBmMTY5NTAzMw==", "commit": {"author": {"name": "Jeffrey A Law", "email": "law@cygnus.com", "date": "1998-04-01T23:18:11Z"}, "committer": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "1998-04-01T23:18:11Z"}, "message": "c-lex.c (yylex): Initialize traditional_type, ansi_type and type.\n\n        * c-lex.c (yylex): Initialize traditional_type, ansi_type and type.\n        * caller-save.c (insert_save_restore): Initialize pat, code and\n        numregs.\n        * emit-rtl.c (push_to_sequence): Initialize top.\n        (push_topmost_sequence): Likewise.\n        * genattrtab.c (simplify_by_exploding): Initialize defval.\n        * profile.c (branch_prob): Initialize dest.\n        * rtl.h (note_stores): Remove duplicate prototype.\n        (GEN_INT): Re-instate cast of second arg to HOST_WIDE_INT.\nFix some warnings.\n        * cplus-dem.c (gnu_special): Don't get confused by .<digits>\n        strings that are not actually lengths.\nA change from libiberty that didn't make it into the gcc copy.\n\nFrom-SVN: r18942", "tree": {"sha": "663746db4bb4ca4fe0f1db7a069ec51d97f795bb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/663746db4bb4ca4fe0f1db7a069ec51d97f795bb"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/aefdd5abe0eae984fa04ea12851c9ff0f1695033", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/aefdd5abe0eae984fa04ea12851c9ff0f1695033", "html_url": "https://github.com/Rust-GCC/gccrs/commit/aefdd5abe0eae984fa04ea12851c9ff0f1695033", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/aefdd5abe0eae984fa04ea12851c9ff0f1695033/comments", "author": null, "committer": null, "parents": [{"sha": "729da3f5a8f4cc906c185e4cbc9bdbac657a1cca", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/729da3f5a8f4cc906c185e4cbc9bdbac657a1cca", "html_url": "https://github.com/Rust-GCC/gccrs/commit/729da3f5a8f4cc906c185e4cbc9bdbac657a1cca"}], "stats": {"total": 47, "additions": 38, "deletions": 9}, "files": [{"sha": "16484890726f3756fe2debf4fee42cec2fb06b66", "filename": "gcc/ChangeLog", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aefdd5abe0eae984fa04ea12851c9ff0f1695033/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aefdd5abe0eae984fa04ea12851c9ff0f1695033/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=aefdd5abe0eae984fa04ea12851c9ff0f1695033", "patch": "@@ -1,5 +1,23 @@\n Wed Apr  1 22:26:22 1998  Jeffrey A Law  (law@cygnus.com)\n \n+\t* c-lex.c (yylex): Initialize traditional_type, ansi_type and type.\n+\n+\t* caller-save.c (insert_save_restore): Initialize pat, code and\n+\tnumregs.\n+\n+\t* emit-rtl.c (push_to_sequence): Initialize top.\n+\t(push_topmost_sequence): Likewise.\n+\n+\t* genattrtab.c (simplify_by_exploding): Initialize defval.\n+\n+\t* profile.c (branch_prob): Initialize dest.\n+\n+\t* rtl.h (note_stores): Remove duplicate prototype.\n+\t(GEN_INT): Re-instate cast of second arg to HOST_WIDE_INT.\n+\n+\t* cplus-dem.c (gnu_special): Don't get confused by .<digits>\n+\tstrings that are not actually lengths.\n+\n \t* genattrtab.c: Make generated file use system.h, instead of\n \tincluding stdio.h, etc directly.\n \t* genextract.c, genopinit.c, genoutput.c: Likewise."}, {"sha": "a9863aaf2fd8e42af22d83c5cf6a8fd7a9e189ae", "filename": "gcc/c-lex.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aefdd5abe0eae984fa04ea12851c9ff0f1695033/gcc%2Fc-lex.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aefdd5abe0eae984fa04ea12851c9ff0f1695033/gcc%2Fc-lex.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-lex.c?ref=aefdd5abe0eae984fa04ea12851c9ff0f1695033", "patch": "@@ -1674,6 +1674,7 @@ yylex ()\n \t    int spec_imag = 0;\n \t    int bytes, warn, i;\n \n+\t    traditional_type = ansi_type = type = NULL_TREE;\n \t    while (1)\n \t      {\n \t\tif (c == 'u' || c == 'U')"}, {"sha": "c808ecaeeeab16a25294fd1ccf22691a2772e53b", "filename": "gcc/caller-save.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aefdd5abe0eae984fa04ea12851c9ff0f1695033/gcc%2Fcaller-save.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aefdd5abe0eae984fa04ea12851c9ff0f1695033/gcc%2Fcaller-save.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcaller-save.c?ref=aefdd5abe0eae984fa04ea12851c9ff0f1695033", "patch": "@@ -640,9 +640,9 @@ insert_save_restore (insn, save_p, regno, insn_mode, maxrestore)\n      enum machine_mode insn_mode;\n      int maxrestore;\n {\n-  rtx pat;\n-  enum insn_code code;\n-  int numregs;\n+  rtx pat = NULL_RTX;\n+  enum insn_code code = CODE_FOR_nothing;\n+  int numregs = 0;\n \n   /* A common failure mode if register status is not correct in the RTL\n      is for this routine to be called with a REGNO we didn't expect to"}, {"sha": "acdbfa897e2e090aaf3250456aecbdb2ae4a6f2e", "filename": "gcc/cplus-dem.c", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aefdd5abe0eae984fa04ea12851c9ff0f1695033/gcc%2Fcplus-dem.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aefdd5abe0eae984fa04ea12851c9ff0f1695033/gcc%2Fcplus-dem.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcplus-dem.c?ref=aefdd5abe0eae984fa04ea12851c9ff0f1695033", "patch": "@@ -1901,6 +1901,15 @@ gnu_special (work, mangled, declp)\n \t      if (isdigit(*mangled[0]))\n \t\t{\n \t\t  n = consume_count(mangled);\n+\t\t  /* We may be seeing a too-large size, or else a\n+\t\t     \".<digits>\" indicating a static local symbol.  In\n+\t\t     any case, declare victory and move on; *don't* try\n+\t\t     to use n to allocate.  */\n+\t\t  if (n >= strlen (*mangled))\n+\t\t    {\n+\t\t      success = 1;\n+\t\t      break;\n+\t\t    }\n \t\t}\n \t      else\n \t\t{"}, {"sha": "54af3b8bc5b0783650db5c63e20177a916190d1e", "filename": "gcc/emit-rtl.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aefdd5abe0eae984fa04ea12851c9ff0f1695033/gcc%2Femit-rtl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aefdd5abe0eae984fa04ea12851c9ff0f1695033/gcc%2Femit-rtl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Femit-rtl.c?ref=aefdd5abe0eae984fa04ea12851c9ff0f1695033", "patch": "@@ -3112,7 +3112,7 @@ push_to_sequence (first)\n void\n push_topmost_sequence ()\n {\n-  struct sequence_stack *stack, *top;\n+  struct sequence_stack *stack, *top = NULL;\n \n   start_sequence ();\n \n@@ -3130,7 +3130,7 @@ push_topmost_sequence ()\n void\n pop_topmost_sequence ()\n {\n-  struct sequence_stack *stack, *top;\n+  struct sequence_stack *stack, *top = NULL;\n \n   for (stack = sequence_stack; stack; stack = stack->next)\n     top = stack;"}, {"sha": "0ddd2a8a14116ae96a370af7ac521d2d2e483f3a", "filename": "gcc/genattrtab.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aefdd5abe0eae984fa04ea12851c9ff0f1695033/gcc%2Fgenattrtab.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aefdd5abe0eae984fa04ea12851c9ff0f1695033/gcc%2Fgenattrtab.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgenattrtab.c?ref=aefdd5abe0eae984fa04ea12851c9ff0f1695033", "patch": "@@ -3561,7 +3561,7 @@ static rtx\n simplify_by_exploding (exp)\n      rtx exp;\n {\n-  rtx list = 0, link, condexp, defval;\n+  rtx list = 0, link, condexp, defval = NULL_RTX;\n   struct dimension *space;\n   rtx *condtest, *condval;\n   int i, j, total, ndim = 0;"}, {"sha": "bedeeaea02d85c996d5bfdbfe0d909c6f030ce92", "filename": "gcc/profile.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aefdd5abe0eae984fa04ea12851c9ff0f1695033/gcc%2Fprofile.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aefdd5abe0eae984fa04ea12851c9ff0f1695033/gcc%2Fprofile.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fprofile.c?ref=aefdd5abe0eae984fa04ea12851c9ff0f1695033", "patch": "@@ -618,7 +618,7 @@ branch_prob (f, dump_file)\n     register int i;\n     int fall_through = 0;\n     struct adj_list *arcptr;\n-    int dest;\n+    int dest = NULL_RTX;\n \n     /* Block 0 always falls through to block 1.  */\n     num_arcs = 0;"}, {"sha": "f31d10de7a166775492ac0691275b0a39a9b5479", "filename": "gcc/rtl.h", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aefdd5abe0eae984fa04ea12851c9ff0f1695033/gcc%2Frtl.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aefdd5abe0eae984fa04ea12851c9ff0f1695033/gcc%2Frtl.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frtl.h?ref=aefdd5abe0eae984fa04ea12851c9ff0f1695033", "patch": "@@ -856,7 +856,6 @@ extern rtx single_set\t\t\tPROTO((rtx));\n extern rtx find_last_value\t\tPROTO((rtx, rtx *, rtx));\n extern int refers_to_regno_p\t\tPROTO((int, int, rtx, rtx *));\n extern int reg_overlap_mentioned_p\tPROTO((rtx, rtx));\n-extern void note_stores\t\t\tPROTO((rtx, void (*)()));\n extern rtx reg_set_last\t\t\tPROTO((rtx, rtx));\n extern int rtx_equal_p\t\t\tPROTO((rtx, rtx));\n extern int dead_or_set_p\t\tPROTO((rtx, rtx));\n@@ -951,7 +950,9 @@ extern rtx static_chain_incoming_rtx;\n extern rtx gen_rtx_CONST_INT PROTO((enum machine_mode, HOST_WIDE_INT));\n extern rtx gen_rtx_REG PROTO((enum machine_mode, int));\n \n-#define GEN_INT(N)  gen_rtx_CONST_INT (VOIDmode, (N))\n+/* We need the cast here to ensure that we get the same result both with\n+   and without prototypes.  */\n+#define GEN_INT(N)  gen_rtx_CONST_INT (VOIDmode, (HOST_WIDE_INT) (N))\n \n \n /* If HARD_FRAME_POINTER_REGNUM is defined, then a special dummy reg"}]}