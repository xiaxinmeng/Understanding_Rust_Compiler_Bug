{"sha": "a9985a921e38ff58d79d624d9d77c72b54337d5e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTk5ODVhOTIxZTM4ZmY1OGQ3OWQ2MjRkOWQ3N2M3MmI1NDMzN2Q1ZQ==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2001-08-31T09:49:13Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2001-08-31T09:49:13Z"}, "message": "unwind-pe.h (read_uleb128, [...]): Move actual reading code here.\n\n        * unwind-pe.h (read_uleb128, read_sleb128): Move actual reading\n        code here.  Take _Unwind_{W,Sw}ord*.\n        (read_encoded_value_with_base): Use them.\n        * unwind-dw2.c (_Unwind_FrameState): Make cfa_offset and cfa_reg\n        words.\n        (extract_cie_info): Simplify read_?leb128 handling.\n        (execute_stack_op, execute_cfa_program): Likewise.\n        * unwind-dw2-fde.c (get_cie_encoding): Likewise.\n\n        * libsupc++/eh_personality.cc (PERSONALITY_FUNCTION): Simplify\n        leb128 handling.\n\nFrom-SVN: r45315", "tree": {"sha": "02c8c8bebc7f6cfaa8805ed08c15689b797b575c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/02c8c8bebc7f6cfaa8805ed08c15689b797b575c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a9985a921e38ff58d79d624d9d77c72b54337d5e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a9985a921e38ff58d79d624d9d77c72b54337d5e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a9985a921e38ff58d79d624d9d77c72b54337d5e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a9985a921e38ff58d79d624d9d77c72b54337d5e/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "e2470e1be7112ed39d7f6ec0bb5c91fc54d02264", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e2470e1be7112ed39d7f6ec0bb5c91fc54d02264", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e2470e1be7112ed39d7f6ec0bb5c91fc54d02264"}], "stats": {"total": 252, "additions": 137, "deletions": 115}, "files": [{"sha": "3961375b154afde76cf66cc52b494bd62b96bc9d", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a9985a921e38ff58d79d624d9d77c72b54337d5e/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a9985a921e38ff58d79d624d9d77c72b54337d5e/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=a9985a921e38ff58d79d624d9d77c72b54337d5e", "patch": "@@ -1,3 +1,14 @@\n+2001-08-31  Jason Merrill  <jason_merrill@redhat.com>\n+\n+\t* unwind-pe.h (read_uleb128, read_sleb128): Move actual reading\n+\tcode here.  Take _Unwind_{W,Sw}ord*.\n+\t(read_encoded_value_with_base): Use them.\n+\t* unwind-dw2.c (_Unwind_FrameState): Make cfa_offset and cfa_reg\n+\twords.\n+\t(extract_cie_info): Simplify read_?leb128 handling.\n+\t(execute_stack_op, execute_cfa_program): Likewise.\n+\t* unwind-dw2-fde.c (get_cie_encoding): Likewise.\n+\n 2001-08-31  Geoffrey Keating  <geoffk@redhat.com>\n \n \t* config/stormy16/stormy16.c (stormy16_expand_epilogue): Use"}, {"sha": "50851190c14b138a4ce0b67d1216fc9567c181b3", "filename": "gcc/unwind-dw2-fde.c", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a9985a921e38ff58d79d624d9d77c72b54337d5e/gcc%2Funwind-dw2-fde.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a9985a921e38ff58d79d624d9d77c72b54337d5e/gcc%2Funwind-dw2-fde.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Funwind-dw2-fde.c?ref=a9985a921e38ff58d79d624d9d77c72b54337d5e", "patch": "@@ -243,18 +243,20 @@ get_cie_encoding (struct dwarf_cie *cie)\n {\n   const unsigned char *aug, *p;\n   _Unwind_Ptr dummy;\n+  _Unwind_Word utmp;\n+  _Unwind_Sword stmp;\n \n   aug = cie->augmentation;\n   if (aug[0] != 'z')\n     return DW_EH_PE_absptr;\n \n   p = aug + strlen (aug) + 1;\t\t/* Skip the augmentation string.  */\n-  p = read_uleb128 (p, &dummy);\t\t/* Skip code alignment.  */\n-  p = read_sleb128 (p, &dummy);\t\t/* Skip data alignment.  */\n+  p = read_uleb128 (p, &utmp);\t\t/* Skip code alignment.  */\n+  p = read_sleb128 (p, &stmp);\t\t/* Skip data alignment.  */\n   p++;\t\t\t\t\t/* Skip return address column.  */\n \n   aug++;\t\t\t\t/* Skip 'z' */\n-  p = read_uleb128 (p, &dummy);\t\t/* Skip augmentation length.  */\n+  p = read_uleb128 (p, &utmp);\t\t/* Skip augmentation length.  */\n   while (1)\n     {\n       /* This is what we're looking for.  */"}, {"sha": "2160c76d62f5dc54404ca16794da9815995cf6f5", "filename": "gcc/unwind-dw2.c", "status": "modified", "additions": 53, "deletions": 62, "changes": 115, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a9985a921e38ff58d79d624d9d77c72b54337d5e/gcc%2Funwind-dw2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a9985a921e38ff58d79d624d9d77c72b54337d5e/gcc%2Funwind-dw2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Funwind-dw2.c?ref=a9985a921e38ff58d79d624d9d77c72b54337d5e", "patch": "@@ -68,7 +68,7 @@ typedef struct\n   {\n     struct {\n       union {\n-\tunsigned int reg;\n+\t_Unwind_Word reg;\n \t_Unwind_Sword offset;\n \tconst unsigned char *exp;\n       } loc;\n@@ -100,8 +100,8 @@ typedef struct\n \n   /* The information we care about from the CIE/FDE.  */\n   _Unwind_Personality_Fn personality;\n-  signed int data_align;\n-  unsigned int code_align;\n+  _Unwind_Sword data_align;\n+  _Unwind_Word code_align;\n   unsigned char retaddr_column;\n   unsigned char fde_encoding;\n   unsigned char lsda_encoding;\n@@ -219,7 +219,7 @@ extract_cie_info (struct dwarf_cie *cie, struct _Unwind_Context *context,\n   const unsigned char *aug = cie->augmentation;\n   const unsigned char *p = aug + strlen (aug) + 1;\n   const unsigned char *ret = NULL;\n-  _Unwind_Ptr tmp;\n+  _Unwind_Word utmp;\n \n   /* g++ v2 \"eh\" has pointer immediately following augmentation string,\n      so it must be handled first.  */\n@@ -232,8 +232,8 @@ extract_cie_info (struct dwarf_cie *cie, struct _Unwind_Context *context,\n \n   /* Immediately following the augmentation are the code and\n      data alignment and return address column.  */\n-  p = read_uleb128 (p, &tmp); fs->code_align = tmp;\n-  p = read_sleb128 (p, &tmp); fs->data_align = (saddr) tmp;\n+  p = read_uleb128 (p, &fs->code_align);\n+  p = read_sleb128 (p, &fs->data_align);\n   fs->retaddr_column = *p++;\n   fs->lsda_encoding = DW_EH_PE_omit;\n \n@@ -242,8 +242,8 @@ extract_cie_info (struct dwarf_cie *cie, struct _Unwind_Context *context,\n      the size.  */\n   if (*aug == 'z')\n     {\n-      p = read_uleb128 (p, &tmp);\n-      ret = p + tmp;\n+      p = read_uleb128 (p, &utmp);\n+      ret = p + utmp;\n \n       fs->saw_z = 1;\n       ++aug;\n@@ -300,9 +300,8 @@ execute_stack_op (const unsigned char *op_ptr, const unsigned char *op_end,\n   while (op_ptr < op_end)\n     {\n       enum dwarf_location_atom op = *op_ptr++;\n-      _Unwind_Word result, reg;\n-      _Unwind_Sword offset;\n-      _Unwind_Ptr ptrtmp;\n+      _Unwind_Word result, reg, utmp;\n+      _Unwind_Sword offset, stmp;\n \n       switch (op)\n \t{\n@@ -379,12 +378,11 @@ execute_stack_op (const unsigned char *op_ptr, const unsigned char *op_end,\n \t  op_ptr += 8;\n \t  break;\n \tcase DW_OP_constu:\n-\t  op_ptr = read_uleb128 (op_ptr, &ptrtmp);\n-\t  result = ptrtmp;\n+\t  op_ptr = read_uleb128 (op_ptr, &result);\n \t  break;\n \tcase DW_OP_consts:\n-\t  op_ptr = read_sleb128 (op_ptr, &ptrtmp);\n-\t  result = (saddr)ptrtmp;\n+\t  op_ptr = read_sleb128 (op_ptr, &stmp);\n+\t  result = stmp;\n \t  break;\n \n \tcase DW_OP_reg0:\n@@ -422,7 +420,7 @@ execute_stack_op (const unsigned char *op_ptr, const unsigned char *op_end,\n \t  result = _Unwind_GetGR (context, op - DW_OP_reg0);\n \t  break;\n \tcase DW_OP_regx:\n-\t  op_ptr = read_uleb128 (op_ptr, &ptrtmp); reg = ptrtmp;\n+\t  op_ptr = read_uleb128 (op_ptr, &reg);\n \t  result = _Unwind_GetGR (context, reg);\n \t  break;\n \n@@ -458,12 +456,12 @@ execute_stack_op (const unsigned char *op_ptr, const unsigned char *op_end,\n \tcase DW_OP_breg29:\n \tcase DW_OP_breg30:\n \tcase DW_OP_breg31:\n-\t  op_ptr = read_sleb128 (op_ptr, &ptrtmp); offset = (saddr)ptrtmp;\n+\t  op_ptr = read_sleb128 (op_ptr, &offset);\n \t  result = _Unwind_GetGR (context, op - DW_OP_breg0) + offset;\n \t  break;\n \tcase DW_OP_bregx:\n-\t  op_ptr = read_uleb128 (op_ptr, &ptrtmp); reg = ptrtmp;\n-\t  op_ptr = read_sleb128 (op_ptr, &ptrtmp); offset = (saddr)ptrtmp;\n+\t  op_ptr = read_uleb128 (op_ptr, &reg);\n+\t  op_ptr = read_sleb128 (op_ptr, &offset);\n \t  result = _Unwind_GetGR (context, reg) + offset;\n \t  break;\n \n@@ -560,8 +558,8 @@ execute_stack_op (const unsigned char *op_ptr, const unsigned char *op_end,\n \t      result = ~result;\n \t      break;\n \t    case DW_OP_plus_uconst:\n-\t      op_ptr = read_uleb128 (op_ptr, &ptrtmp); reg = ptrtmp;\n-\t      result += reg;\n+\t      op_ptr = read_uleb128 (op_ptr, &utmp);\n+\t      result += utmp;\n \t      break;\n \n \t    default:\n@@ -705,17 +703,16 @@ execute_cfa_program (const unsigned char *insn_ptr,\n   while (insn_ptr < insn_end && fs->pc < context->ra)\n     {\n       unsigned char insn = *insn_ptr++;\n-      _Unwind_Word reg;\n-      _Unwind_Sword offset;\n-      _Unwind_Ptr ptrtmp;\n+      _Unwind_Word reg, utmp;\n+      _Unwind_Sword offset, stmp;\n \n       if (insn & DW_CFA_advance_loc)\n \tfs->pc += (insn & 0x3f) * fs->code_align;\n       else if (insn & DW_CFA_offset)\n \t{\n \t  reg = insn & 0x3f;\n-\t  insn_ptr = read_uleb128 (insn_ptr, &ptrtmp);\n-\t  offset = ptrtmp * fs->data_align;\n+\t  insn_ptr = read_uleb128 (insn_ptr, &utmp);\n+\t  offset = (_Unwind_Sword)utmp * fs->data_align;\n \t  fs->regs.reg[reg].how = REG_SAVED_OFFSET;\n \t  fs->regs.reg[reg].loc.offset = offset;\n \t}\n@@ -745,15 +742,15 @@ execute_cfa_program (const unsigned char *insn_ptr,\n \t  break;\n \n \tcase DW_CFA_offset_extended:\n-\t  insn_ptr = read_uleb128 (insn_ptr, &ptrtmp); reg = ptrtmp;\n-\t  insn_ptr = read_uleb128 (insn_ptr, &ptrtmp);\n-\t  offset = ptrtmp * fs->data_align;\n+\t  insn_ptr = read_uleb128 (insn_ptr, &reg);\n+\t  insn_ptr = read_uleb128 (insn_ptr, &utmp);\n+\t  offset = (_Unwind_Sword)utmp * fs->data_align;\n \t  fs->regs.reg[reg].how = REG_SAVED_OFFSET;\n \t  fs->regs.reg[reg].loc.offset = offset;\n \t  break;\n \n \tcase DW_CFA_restore_extended:\n-\t  insn_ptr = read_uleb128 (insn_ptr, &ptrtmp); reg = ptrtmp;\n+\t  insn_ptr = read_uleb128 (insn_ptr, &reg);\n \t  fs->regs.reg[reg].how = REG_UNSAVED;\n \t  break;\n \n@@ -765,8 +762,8 @@ execute_cfa_program (const unsigned char *insn_ptr,\n \tcase DW_CFA_register:\n \t  {\n \t    _Unwind_Word reg2;\n-\t    insn_ptr = read_uleb128 (insn_ptr, &ptrtmp); reg = ptrtmp;\n-\t    insn_ptr = read_uleb128 (insn_ptr, &ptrtmp); reg2 = ptrtmp;\n+\t    insn_ptr = read_uleb128 (insn_ptr, &reg);\n+\t    insn_ptr = read_uleb128 (insn_ptr, &reg2);\n \t    fs->regs.reg[reg].how = REG_SAVED_REG;\n \t    fs->regs.reg[reg].loc.reg = reg2;\n \t  }\n@@ -798,60 +795,55 @@ execute_cfa_program (const unsigned char *insn_ptr,\n \t  break;\n \n \tcase DW_CFA_def_cfa:\n-\t  insn_ptr = read_uleb128 (insn_ptr, &ptrtmp);\n-\t  fs->cfa_reg = ptrtmp;\n-\t  insn_ptr = read_uleb128 (insn_ptr, &ptrtmp);\n-\t  fs->cfa_offset = ptrtmp;\n+\t  insn_ptr = read_uleb128 (insn_ptr, &fs->cfa_reg);\n+\t  insn_ptr = read_uleb128 (insn_ptr, &utmp);\n+\t  fs->cfa_offset = utmp;\n \t  fs->cfa_how = CFA_REG_OFFSET;\n \t  break;\n \n \tcase DW_CFA_def_cfa_register:\n-\t  insn_ptr = read_uleb128 (insn_ptr, &ptrtmp);\n-\t  fs->cfa_reg = ptrtmp;\n+\t  insn_ptr = read_uleb128 (insn_ptr, &fs->cfa_reg);\n \t  fs->cfa_how = CFA_REG_OFFSET;\n \t  break;\n \n \tcase DW_CFA_def_cfa_offset:\n-\t  insn_ptr = read_uleb128 (insn_ptr, &ptrtmp);\n-\t  fs->cfa_offset = ptrtmp;\n+\t  insn_ptr = read_uleb128 (insn_ptr, &utmp);\n+\t  fs->cfa_offset = utmp;\n \t  /* cfa_how deliberately not set.  */\n \t  break;\n \n \tcase DW_CFA_def_cfa_expression:\n-\t  insn_ptr = read_uleb128 (insn_ptr, &ptrtmp);\n+\t  insn_ptr = read_uleb128 (insn_ptr, &utmp);\n \t  fs->cfa_exp = insn_ptr;\n \t  fs->cfa_how = CFA_EXP;\n-\t  insn_ptr += ptrtmp;\n+\t  insn_ptr += utmp;\n \t  break;\n \n \tcase DW_CFA_expression:\n-\t  insn_ptr = read_uleb128 (insn_ptr, &ptrtmp); reg = ptrtmp;\n-\t  insn_ptr = read_uleb128 (insn_ptr, &ptrtmp);\n+\t  insn_ptr = read_uleb128 (insn_ptr, &reg);\n+\t  insn_ptr = read_uleb128 (insn_ptr, &utmp);\n \t  fs->regs.reg[reg].how = REG_SAVED_EXP;\n \t  fs->regs.reg[reg].loc.exp = insn_ptr;\n-\t  insn_ptr += ptrtmp;\n+\t  insn_ptr += utmp;\n \t  break;\n \n \t  /* From the 2.1 draft.  */\n \tcase DW_CFA_offset_extended_sf:\n-\t  insn_ptr = read_uleb128 (insn_ptr, &ptrtmp); reg = ptrtmp;\n-\t  insn_ptr = read_sleb128 (insn_ptr, &ptrtmp);\n-\t  offset = (saddr)ptrtmp * fs->data_align;\n+\t  insn_ptr = read_uleb128 (insn_ptr, &reg);\n+\t  insn_ptr = read_sleb128 (insn_ptr, &stmp);\n+\t  offset = stmp * fs->data_align;\n \t  fs->regs.reg[reg].how = REG_SAVED_OFFSET;\n \t  fs->regs.reg[reg].loc.offset = offset;\n \t  break;\n \t  \n \tcase DW_CFA_def_cfa_sf:\n-\t  insn_ptr = read_uleb128 (insn_ptr, &ptrtmp);\n-\t  fs->cfa_reg = ptrtmp;\n-\t  insn_ptr = read_sleb128 (insn_ptr, &ptrtmp);\n-\t  fs->cfa_offset = (saddr)ptrtmp;\n+\t  insn_ptr = read_uleb128 (insn_ptr, &fs->cfa_reg);\n+\t  insn_ptr = read_sleb128 (insn_ptr, &fs->cfa_offset);\n \t  fs->cfa_how = CFA_REG_OFFSET;\n \t  break;\n \n \tcase DW_CFA_def_cfa_offset_sf:\n-\t  insn_ptr = read_uleb128 (insn_ptr, &ptrtmp);\n-\t  fs->cfa_offset = ptrtmp;\n+\t  insn_ptr = read_sleb128 (insn_ptr, &fs->cfa_offset);\n \t  /* cfa_how deliberately not set.  */\n \t  break;\n \n@@ -865,16 +857,15 @@ execute_cfa_program (const unsigned char *insn_ptr,\n \t  break;\n \n \tcase DW_CFA_GNU_args_size:\n-\t  insn_ptr = read_uleb128 (insn_ptr, &ptrtmp);\n-\t  context->args_size = ptrtmp;\n+\t  insn_ptr = read_uleb128 (insn_ptr, &context->args_size);\n \t  break;\n \n \tcase DW_CFA_GNU_negative_offset_extended:\n \t  /* Obsoleted by DW_CFA_offset_extended_sf, but used by\n \t     older PowerPC code.  */\n-\t  insn_ptr = read_uleb128 (insn_ptr, &ptrtmp); reg = ptrtmp;\n-\t  insn_ptr = read_uleb128 (insn_ptr, &ptrtmp);\n-\t  offset = ptrtmp * fs->data_align;\n+\t  insn_ptr = read_uleb128 (insn_ptr, &reg);\n+\t  insn_ptr = read_uleb128 (insn_ptr, &utmp);\n+\t  offset = (_Unwind_Word)utmp * fs->data_align;\n \t  fs->regs.reg[reg].how = REG_SAVED_OFFSET;\n \t  fs->regs.reg[reg].loc.offset = -offset;\n \t  break;\n@@ -930,7 +921,7 @@ uw_frame_state_for (struct _Unwind_Context *context, _Unwind_FrameState *fs)\n   insn = NULL;\n   if (fs->saw_z)\n     {\n-      _Unwind_Ptr i;\n+      _Unwind_Word i;\n       aug = read_uleb128 (aug, &i);\n       insn = aug + i;\n     }\n@@ -1039,7 +1030,7 @@ uw_update_context_1 (struct _Unwind_Context *context, _Unwind_FrameState *fs)\n \t that this will not be a problem.  */\n       {\n \tconst unsigned char *exp = fs->cfa_exp;\n-\t_Unwind_Ptr len;\n+\t_Unwind_Word len;\n \n \texp = read_uleb128 (exp, &len);\n \tcfa = (void *) (_Unwind_Ptr)\n@@ -1067,7 +1058,7 @@ uw_update_context_1 (struct _Unwind_Context *context, _Unwind_FrameState *fs)\n       case REG_SAVED_EXP:\n \t{\n \t  const unsigned char *exp = fs->regs.reg[i].loc.exp;\n-\t  _Unwind_Ptr len;\n+\t  _Unwind_Word len;\n \t  _Unwind_Ptr val;\n \n \t  exp = read_uleb128 (exp, &len);"}, {"sha": "74c4e2778b244df44f0f053ad0a694f9119661a5", "filename": "gcc/unwind-pe.h", "status": "modified", "additions": 57, "deletions": 42, "changes": 99, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a9985a921e38ff58d79d624d9d77c72b54337d5e/gcc%2Funwind-pe.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a9985a921e38ff58d79d624d9d77c72b54337d5e/gcc%2Funwind-pe.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Funwind-pe.h?ref=a9985a921e38ff58d79d624d9d77c72b54337d5e", "patch": "@@ -108,6 +108,57 @@ base_of_encoded_value (unsigned char encoding, struct _Unwind_Context *context)\n \n #endif\n \n+/* Read an unsigned leb128 value from P, store the value in VAL, return\n+   P incremented past the value.  We assume that a word is large enough to\n+   hold any value so encoded; if it is smaller than a pointer on some target,\n+   pointers should not be leb128 encoded on that target.  */\n+\n+static const unsigned char *\n+read_uleb128 (const unsigned char *p, _Unwind_Word *val)\n+{\n+  unsigned int shift = 0;\n+  unsigned char byte;\n+  _Unwind_Word result;\n+\n+  result = 0;\n+  do\n+    {\n+      byte = *p++;\n+      result |= (byte & 0x7f) << shift;\n+      shift += 7;\n+    }\n+  while (byte & 0x80);\n+\n+  *val = result;\n+  return p;\n+}\n+\n+/* Similar, but read a signed leb128 value.  */\n+\n+static const unsigned char *\n+read_sleb128 (const unsigned char *p, _Unwind_Sword *val)\n+{\n+  unsigned int shift = 0;\n+  unsigned char byte;\n+  _Unwind_Word result;\n+\n+  result = 0;\n+  do\n+    {\n+      byte = *p++;\n+      result |= (byte & 0x7f) << shift;\n+      shift += 7;\n+    }\n+  while (byte & 0x80);\n+\n+  /* Sign-extend a negative value.  */\n+  if (shift < 8 * sizeof(result) && (byte & 0x40) != 0)\n+    result |= -(1L << shift);\n+\n+  *val = (_Unwind_Sword) result;\n+  return p;\n+}\n+\n /* Load an encoded value from memory at P.  The value is returned in VAL;\n    The function returns P incremented past the value.  BASE is as given\n    by base_of_encoded_value for this encoding in the appropriate context.  */\n@@ -148,36 +199,17 @@ read_encoded_value_with_base (unsigned char encoding, _Unwind_Ptr base,\n \n \tcase DW_EH_PE_uleb128:\n \t  {\n-\t    unsigned int shift = 0;\n-\t    unsigned char byte;\n-\n-\t    result = 0;\n-\t    do\n-\t      {\n-\t\tbyte = *p++;\n-\t\tresult |= (_Unwind_Ptr)(byte & 0x7f) << shift;\n-\t\tshift += 7;\n-\t      }\n-\t    while (byte & 0x80);\n+\t    _Unwind_Word tmp;\n+\t    p = read_uleb128 (p, &tmp);\n+\t    result = (_Unwind_Ptr)tmp;\n \t  }\n \t  break;\n \n \tcase DW_EH_PE_sleb128:\n \t  {\n-\t    unsigned int shift = 0;\n-\t    unsigned char byte;\n-\n-\t    result = 0;\n-\t    do\n-\t      {\n-\t\tbyte = *p++;\n-\t\tresult |= (_Unwind_Ptr)(byte & 0x7f) << shift;\n-\t\tshift += 7;\n-\t      }\n-\t    while (byte & 0x80);\n-\n-\t    if (shift < 8 * sizeof(result) && (byte & 0x40) != 0)\n-\t      result |= -(1L << shift);\n+\t    _Unwind_Sword tmp;\n+\t    p = read_sleb128 (p, &tmp);\n+\t    result = (_Unwind_Ptr)tmp;\n \t  }\n \t  break;\n \n@@ -239,20 +271,3 @@ read_encoded_value (struct _Unwind_Context *context, unsigned char encoding,\n }\n \n #endif\n-\n-/* Read an unsigned leb128 value from P, store the value in VAL, return\n-   P incremented past the value.  */\n-\n-static inline const unsigned char *\n-read_uleb128 (const unsigned char *p, _Unwind_Ptr *val)\n-{\n-  return read_encoded_value_with_base (DW_EH_PE_uleb128, 0, p, val);\n-}\n-\n-/* Similar, but read a signed leb128 value.  */\n-\n-static inline const unsigned char *\n-read_sleb128 (const unsigned char *p, _Unwind_Ptr *val)\n-{\n-  return read_encoded_value_with_base (DW_EH_PE_sleb128, 0, p, val);\n-}"}, {"sha": "d4227cd20302f12ca6927fa35aae7e65ee28a97a", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a9985a921e38ff58d79d624d9d77c72b54337d5e/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a9985a921e38ff58d79d624d9d77c72b54337d5e/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=a9985a921e38ff58d79d624d9d77c72b54337d5e", "patch": "@@ -1,3 +1,8 @@\n+2001-08-31  Jason Merrill  <jason_merrill@redhat.com>\n+\n+\t* libsupc++/eh_personality.cc (PERSONALITY_FUNCTION): Simplify\n+\tleb128 handling.\n+\n 2001-08-28  Loren J. Rittle  <ljrittle@acm.org>\n \n \t* include/Makefile.am: Use toplevel_srcdir to refer to src files"}, {"sha": "d070ced810115dad6f1e5efdbaa7d13cacf73b39", "filename": "libstdc++-v3/libsupc++/eh_personality.cc", "status": "modified", "additions": 6, "deletions": 8, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a9985a921e38ff58d79d624d9d77c72b54337d5e/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Feh_personality.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a9985a921e38ff58d79d624d9d77c72b54337d5e/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Feh_personality.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Feh_personality.cc?ref=a9985a921e38ff58d79d624d9d77c72b54337d5e", "patch": "@@ -84,7 +84,7 @@ parse_lsda_header (_Unwind_Context *context, const unsigned char *p,\n }\n \n static const std::type_info *\n-get_ttype_entry (lsda_header_info *info, long i)\n+get_ttype_entry (lsda_header_info *info, _Unwind_Word i)\n {\n   _Unwind_Ptr ptr;\n \n@@ -97,14 +97,14 @@ get_ttype_entry (lsda_header_info *info, long i)\n \n static bool\n check_exception_spec (lsda_header_info *info, const std::type_info *throw_type,\n-\t\t      long filter_value)\n+\t\t      _Unwind_Sword filter_value)\n {\n   const unsigned char *e = info->TType - filter_value - 1;\n \n   while (1)\n     {\n       const std::type_info *catch_type;\n-      _Unwind_Ptr tmp;\n+      _Unwind_Word tmp;\n       void *dummy;\n \n       e = read_uleb128 (e, &tmp);\n@@ -262,7 +262,7 @@ PERSONALITY_FUNCTION (int version,\n     {\n       // Otherwise we have a catch handler or exception specification.\n \n-      signed long ar_filter, ar_disp;\n+      _Unwind_Sword ar_filter, ar_disp;\n       const std::type_info *throw_type, *catch_type;\n       bool saw_cleanup = false;\n       bool saw_handler = false;\n@@ -279,11 +279,9 @@ PERSONALITY_FUNCTION (int version,\n \n       while (1)\n \t{\n-\t  _Unwind_Ptr tmp;\n-\n \t  p = action_record;\n-\t  p = read_sleb128 (p, &tmp); ar_filter = tmp;\n-\t  read_sleb128 (p, &tmp); ar_disp = tmp;\n+\t  p = read_sleb128 (p, &ar_filter);\n+\t  read_sleb128 (p, &ar_disp);\n \n \t  if (ar_filter == 0)\n \t    {"}]}