{"sha": "a76e0b4373e8fdaf609b9198b238592b01dbe218", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTc2ZTBiNDM3M2U4ZmRhZjYwOWI5MTk4YjIzODU5MmIwMWRiZTIxOA==", "commit": {"author": {"name": "Julia Koval", "email": "julia.koval@intel.com", "date": "2017-11-10T18:47:28Z"}, "committer": {"name": "Kirill Yukhin", "email": "kyukhin@gcc.gnu.org", "date": "2017-11-10T18:47:28Z"}, "message": "GFNI enabling [3/4]\n\ngcc/\n\t * config/i386/gfniintrin.h (_mm_gf2p8affine_epi64_epi8,\n\t _mm256_gf2p8affine_epi64_epi8, _mm_mask_gf2p8affine_epi64_epi8,\n\t _mm_maskz_gf2p8affine_epi64_epi8, _mm256_mask_gf2p8affine_epi64_epi8,\n\t _mm256_maskz_gf2p8affine_epi64_epi8,\n\t _mm512_mask_gf2p8affine_epi64_epi8, _mm512_gf2p8affine_epi64_epi8\n\t _mm512_maskz_gf2p8affine_epi64_epi8): New intrinsics.\n\t * config/i386/i386-builtin.def (__builtin_ia32_vgf2p8affineqb_v64qi,\n\t __builtin_ia32_vgf2p8affineqb_v32qi,\n\t __builtin_ia32_vgf2p8affineqb_v16qi): New builtins.\n\t * config/i386/sse.md (vgf2p8affineqb_<mode><mask_name>): New pattern.\ngcc/testsuite/\n\t * gcc.target/i386/avx-1.c: Handle new intrinsics.\n\t * gcc.target/i386/avx512f-gf2p8affineqb-2.c: New runtime tests.\n\t * gcc.target/i386/avx512vl-gf2p8affineqb-2.c: Ditto.\n\t * gcc.target/i386/gfni-1.c: Add tests for GF2P8AFFINE.\n\t * gcc.target/i386/gfni-2.c: Ditto.\n\t * gcc.target/i386/gfni-3.c: Ditto.\n\t * gcc.target/i386/gfni-4.c: Ditto.\n\t * gcc.target/i386/sse-13.c: Handle new tests.\n\t * gcc.target/i386/sse-14.c: Handle new tests.\n\t * gcc.target/i386/sse-23.c: Handle new tests.\n\nFrom-SVN: r254634", "tree": {"sha": "c531b1675ea44313585a4f0b24df1618b9f95b10", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c531b1675ea44313585a4f0b24df1618b9f95b10"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a76e0b4373e8fdaf609b9198b238592b01dbe218", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a76e0b4373e8fdaf609b9198b238592b01dbe218", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a76e0b4373e8fdaf609b9198b238592b01dbe218", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a76e0b4373e8fdaf609b9198b238592b01dbe218/comments", "author": {"login": "vaalfreja", "id": 5216345, "node_id": "MDQ6VXNlcjUyMTYzNDU=", "avatar_url": "https://avatars.githubusercontent.com/u/5216345?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vaalfreja", "html_url": "https://github.com/vaalfreja", "followers_url": "https://api.github.com/users/vaalfreja/followers", "following_url": "https://api.github.com/users/vaalfreja/following{/other_user}", "gists_url": "https://api.github.com/users/vaalfreja/gists{/gist_id}", "starred_url": "https://api.github.com/users/vaalfreja/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vaalfreja/subscriptions", "organizations_url": "https://api.github.com/users/vaalfreja/orgs", "repos_url": "https://api.github.com/users/vaalfreja/repos", "events_url": "https://api.github.com/users/vaalfreja/events{/privacy}", "received_events_url": "https://api.github.com/users/vaalfreja/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "9e72bc908653976e2e374e51ec6d7331cfdd0b72", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9e72bc908653976e2e374e51ec6d7331cfdd0b72", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9e72bc908653976e2e374e51ec6d7331cfdd0b72"}], "stats": {"total": 208, "additions": 207, "deletions": 1}, "files": [{"sha": "103dd26a0bcd04a725eb83ca6d090d2fc631f830", "filename": "gcc/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a76e0b4373e8fdaf609b9198b238592b01dbe218/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a76e0b4373e8fdaf609b9198b238592b01dbe218/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=a76e0b4373e8fdaf609b9198b238592b01dbe218", "patch": "@@ -1,3 +1,16 @@\n+2017-11-10  Julia Koval  <julia.koval@intel.com>\n+\n+\t * config/i386/gfniintrin.h (_mm_gf2p8affine_epi64_epi8,\n+\t _mm256_gf2p8affine_epi64_epi8, _mm_mask_gf2p8affine_epi64_epi8,\n+\t _mm_maskz_gf2p8affine_epi64_epi8, _mm256_mask_gf2p8affine_epi64_epi8,\n+\t _mm256_maskz_gf2p8affine_epi64_epi8,\n+\t _mm512_mask_gf2p8affine_epi64_epi8, _mm512_gf2p8affine_epi64_epi8\n+\t _mm512_maskz_gf2p8affine_epi64_epi8): New intrinsics.\n+\t * config/i386/i386-builtin.def (__builtin_ia32_vgf2p8affineqb_v64qi,\n+\t __builtin_ia32_vgf2p8affineqb_v32qi,\n+\t __builtin_ia32_vgf2p8affineqb_v16qi): New builtins.\n+\t * config/i386/sse.md (vgf2p8affineqb_<mode><mask_name>): New pattern.\n+\n 2017-11-10  Tamar Christina  <tamar.christina@arm.com>\n \n \tPR target/82641"}, {"sha": "0cf6fe70c6274a5e113165239c97dccc0dd70969", "filename": "gcc/config/i386/gfniintrin.h", "status": "modified", "additions": 110, "deletions": 0, "changes": 110, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a76e0b4373e8fdaf609b9198b238592b01dbe218/gcc%2Fconfig%2Fi386%2Fgfniintrin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a76e0b4373e8fdaf609b9198b238592b01dbe218/gcc%2Fconfig%2Fi386%2Fgfniintrin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fgfniintrin.h?ref=a76e0b4373e8fdaf609b9198b238592b01dbe218", "patch": "@@ -43,10 +43,21 @@ _mm_gf2p8affineinv_epi64_epi8 (__m128i __A, __m128i __B, const int __C)\n \t\t\t\t\t\t\t   (__v16qi) __B,\n \t\t\t\t\t\t\t    __C);\n }\n+\n+extern __inline __m128i\n+__attribute__((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_gf2p8affine_epi64_epi8 (__m128i __A, __m128i __B, const int __C)\n+{\n+  return (__m128i) __builtin_ia32_vgf2p8affineqb_v16qi ((__v16qi) __A,\n+\t\t\t\t\t\t\t(__v16qi) __B, __C);\n+}\n #else\n #define _mm_gf2p8affineinv_epi64_epi8(A, B, C)\t\t\t\t   \\\n   ((__m128i) __builtin_ia32_vgf2p8affineinvqb_v16qi((__v16qi)(__m128i)(A), \\\n \t\t\t\t\t   (__v16qi)(__m128i)(B), (int)(C)))\n+#define _mm_gf2p8affine_epi64_epi8(A, B, C)\t\t\t\t   \\\n+  ((__m128i) __builtin_ia32_vgf2p8affineqb_v16qi ((__v16qi)(__m128i)(A),   \\\n+\t\t\t\t\t   (__v16qi)(__m128i)(B), (int)(C)))\n #endif\n \n #ifdef __DISABLE_GFNI__\n@@ -69,11 +80,22 @@ _mm256_gf2p8affineinv_epi64_epi8 (__m256i __A, __m256i __B, const int __C)\n \t\t\t\t\t\t\t   (__v32qi) __B,\n \t\t\t\t\t\t\t    __C);\n }\n+\n+extern __inline __m256i\n+__attribute__((__gnu_inline__, __always_inline__, __artificial__))\n+_mm256_gf2p8affine_epi64_epi8 (__m256i __A, __m256i __B, const int __C)\n+{\n+  return (__m256i) __builtin_ia32_vgf2p8affineqb_v32qi ((__v32qi) __A,\n+\t\t\t\t\t\t\t(__v32qi) __B, __C);\n+}\n #else\n #define _mm256_gf2p8affineinv_epi64_epi8(A, B, C)\t\t\t   \\\n   ((__m256i) __builtin_ia32_vgf2p8affineinvqb_v32qi((__v32qi)(__m256i)(A), \\\n \t\t\t\t\t\t    (__v32qi)(__m256i)(B), \\\n \t\t\t\t\t\t    (int)(C)))\n+#define _mm256_gf2p8affine_epi64_epi8(A, B, C)\t\t\t\t   \\\n+  ((__m256i) __builtin_ia32_vgf2p8affineqb_v32qi ((__v32qi)(__m256i)(A),   \\\n+\t\t\t\t\t(   __v32qi)(__m256i)(B), (int)(C)))\n #endif\n \n #ifdef __DISABLE_GFNIAVX__\n@@ -110,6 +132,24 @@ _mm_maskz_gf2p8affineinv_epi64_epi8 (__mmask16 __A, __m128i __B, __m128i __C,\n \t\t\t\t\t\t(__v16qi) _mm_setzero_si128 (),\n \t\t\t\t\t\t __A);\n }\n+\n+extern __inline __m128i\n+__attribute__((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_mask_gf2p8affine_epi64_epi8 (__m128i __A, __mmask16 __B, __m128i __C,\n+\t\t\t\t __m128i __D, const int __E)\n+{\n+  return (__m128i) __builtin_ia32_vgf2p8affineqb_v16qi_mask ((__v16qi) __C,\n+\t\t\t\t\t(__v16qi) __D, __E, (__v16qi)__A, __B);\n+}\n+\n+extern __inline __m128i\n+__attribute__((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_maskz_gf2p8affine_epi64_epi8 (__mmask16 __A, __m128i __B, __m128i __C,\n+\t\t\t\t  const int __D)\n+{\n+  return (__m128i) __builtin_ia32_vgf2p8affineqb_v16qi_mask ((__v16qi) __B,\n+\t\t     (__v16qi) __C, __D, (__v16qi) _mm_setzero_si128 (), __A);\n+}\n #else\n #define _mm_mask_gf2p8affineinv_epi64_epi8(A, B, C, D, E) \t\t   \\\n   ((__m128i) __builtin_ia32_vgf2p8affineinvqb_v16qi_mask(\t\t   \\\n@@ -120,6 +160,13 @@ _mm_maskz_gf2p8affineinv_epi64_epi8 (__mmask16 __A, __m128i __B, __m128i __C,\n \t\t\t(__v16qi)(__m128i)(B), (__v16qi)(__m128i)(C),\t   \\\n \t\t\t(int)(D), (__v16qi)(__m128i) _mm_setzero_si128 (), \\\n \t\t\t(__mmask16)(A)))\n+#define _mm_mask_gf2p8affine_epi64_epi8(A, B, C, D, E) \\\n+  ((__m128i) __builtin_ia32_vgf2p8affineqb_v16qi_mask((__v16qi)(__m128i)(C),\\\n+      (__v16qi)(__m128i)(D), (int)(E), (__v16qi)(__m128i)(A), (__mmask16)(B)))\n+#define _mm_maskz_gf2p8affine_epi64_epi8(A, B, C, D)\t\t\t    \\\n+  ((__m128i) __builtin_ia32_vgf2p8affineqb_v16qi_mask((__v16qi)(__m128i)(B),\\\n+\t\t(__v16qi)(__m128i)(C), (int)(D),\t\t\t    \\\n+\t\t(__v16qi)(__m128i) _mm_setzero_si128 (), (__mmask16)(A)))\n #endif\n \n #ifdef __DISABLE_GFNIAVX512VL__\n@@ -155,6 +202,27 @@ _mm256_maskz_gf2p8affineinv_epi64_epi8 (__mmask32 __A, __m256i __B,\n \t\t\t\t      (__v32qi) __C, __D,\n \t\t\t\t      (__v32qi) _mm256_setzero_si256 (), __A);\n }\n+\n+extern __inline __m256i\n+__attribute__((__gnu_inline__, __always_inline__, __artificial__))\n+_mm256_mask_gf2p8affine_epi64_epi8 (__m256i __A, __mmask32 __B, __m256i __C,\n+\t\t\t\t    __m256i __D, const int __E)\n+{\n+  return (__m256i) __builtin_ia32_vgf2p8affineqb_v32qi_mask ((__v32qi) __C,\n+\t\t\t\t\t\t\t     (__v32qi) __D,\n+\t\t\t\t\t\t\t      __E,\n+\t\t\t\t\t\t\t     (__v32qi)__A,\n+\t\t\t\t\t\t\t      __B);\n+}\n+\n+extern __inline __m256i\n+__attribute__((__gnu_inline__, __always_inline__, __artificial__))\n+_mm256_maskz_gf2p8affine_epi64_epi8 (__mmask32 __A, __m256i __B,\n+\t\t\t\t     __m256i __C, const int __D)\n+{\n+  return (__m256i) __builtin_ia32_vgf2p8affineqb_v32qi_mask ((__v32qi) __B,\n+\t\t(__v32qi) __C, __D, (__v32qi)_mm256_setzero_si256 (), __A);\n+}\n #else\n #define _mm256_mask_gf2p8affineinv_epi64_epi8(A, B, C, D, E)\t\t\\\n   ((__m256i) __builtin_ia32_vgf2p8affineinvqb_v32qi_mask(\t\t\\\n@@ -164,6 +232,13 @@ _mm256_maskz_gf2p8affineinv_epi64_epi8 (__mmask32 __A, __m256i __B,\n   ((__m256i) __builtin_ia32_vgf2p8affineinvqb_v32qi_mask(\t\t\\\n \t(__v32qi)(__m256i)(B), (__v32qi)(__m256i)(C), (int)(D),\t\t\\\n \t(__v32qi)(__m256i) _mm256_setzero_si256 (), (__mmask32)(A)))\n+#define _mm256_mask_gf2p8affine_epi64_epi8(A, B, C, D, E) \t\t    \\\n+  ((__m256i) __builtin_ia32_vgf2p8affineqb_v32qi_mask((__v32qi)(__m256i)(C),\\\n+\t(__v32qi)(__m256i)(D), (int)(E), (__v32qi)(__m256i)(A), (__mmask32)(B)))\n+#define _mm256_maskz_gf2p8affine_epi64_epi8(A, B, C, D)\t\t\t    \\\n+  ((__m256i) __builtin_ia32_vgf2p8affineqb_v32qi_mask((__v32qi)(__m256i)(B),\\\n+\t (__v32qi)(__m256i)(C), (int)(D),\t\t\t\t    \\\n+\t (__v32qi)(__m256i) _mm256_setzero_si256 (), (__mmask32)(A)))\n #endif\n \n #ifdef __DISABLE_GFNIAVX512VLBW__\n@@ -207,6 +282,31 @@ _mm512_gf2p8affineinv_epi64_epi8 (__m512i __A, __m512i __B, const int __C)\n   return (__m512i) __builtin_ia32_vgf2p8affineinvqb_v64qi ((__v64qi) __A,\n \t\t\t\t\t\t\t   (__v64qi) __B, __C);\n }\n+\n+extern __inline __m512i\n+__attribute__((__gnu_inline__, __always_inline__, __artificial__))\n+_mm512_mask_gf2p8affine_epi64_epi8 (__m512i __A, __mmask64 __B, __m512i __C,\n+\t\t\t\t    __m512i __D, const int __E)\n+{\n+  return (__m512i) __builtin_ia32_vgf2p8affineqb_v64qi_mask ((__v64qi) __C,\n+\t\t\t\t\t(__v64qi) __D, __E, (__v64qi)__A, __B);\n+}\n+\n+extern __inline __m512i\n+__attribute__((__gnu_inline__, __always_inline__, __artificial__))\n+_mm512_maskz_gf2p8affine_epi64_epi8 (__mmask64 __A, __m512i __B, __m512i __C,\n+\t\t\t\t     const int __D)\n+{\n+  return (__m512i) __builtin_ia32_vgf2p8affineqb_v64qi_mask ((__v64qi) __B,\n+\t\t  (__v64qi) __C, __D, (__v64qi) _mm512_setzero_si512 (), __A);\n+}\n+extern __inline __m512i\n+__attribute__((__gnu_inline__, __always_inline__, __artificial__))\n+_mm512_gf2p8affine_epi64_epi8 (__m512i __A, __m512i __B, const int __C)\n+{\n+  return (__m512i) __builtin_ia32_vgf2p8affineqb_v64qi ((__v64qi) __A,\n+\t\t\t\t\t\t\t(__v64qi) __B, __C);\n+}\n #else\n #define _mm512_mask_gf2p8affineinv_epi64_epi8(A, B, C, D, E) \t\t\\\n   ((__m512i) __builtin_ia32_vgf2p8affineinvqb_v64qi_mask(\t\t\\\n@@ -219,6 +319,16 @@ _mm512_gf2p8affineinv_epi64_epi8 (__m512i __A, __m512i __B, const int __C)\n #define _mm512_gf2p8affineinv_epi64_epi8(A, B, C)\t\t\t\\\n   ((__m512i) __builtin_ia32_vgf2p8affineinvqb_v64qi (\t\t\t\\\n \t(__v64qi)(__m512i)(A), (__v64qi)(__m512i)(B), (int)(C)))\n+#define _mm512_mask_gf2p8affine_epi64_epi8(A, B, C, D, E)\t\t    \\\n+  ((__m512i) __builtin_ia32_vgf2p8affineqb_v64qi_mask((__v64qi)(__m512i)(C),\\\n+     (__v64qi)(__m512i)(D), (int)(E), (__v64qi)(__m512i)(A), (__mmask64)(B)))\n+#define _mm512_maskz_gf2p8affine_epi64_epi8(A, B, C, D)\t\t\t    \\\n+  ((__m512i) __builtin_ia32_vgf2p8affineqb_v64qi_mask((__v64qi)(__m512i)(B),\\\n+\t (__v64qi)(__m512i)(C), (int)(D),\t\t\t\t    \\\n+\t (__v64qi)(__m512i) _mm512_setzero_si512 (), (__mmask64)(A)))\n+#define _mm512_gf2p8affine_epi64_epi8(A, B, C)\t\t\t\t    \\\n+  ((__m512i) __builtin_ia32_vgf2p8affineqb_v64qi ((__v64qi)(__m512i)(A),    \\\n+\t (__v64qi)(__m512i)(B), (int)(C)))\n #endif\n \n #ifdef __DISABLE_GFNIAVX512FBW__"}, {"sha": "e46a6abb0a99182df12f2c44403977862d03505c", "filename": "gcc/config/i386/i386-builtin.def", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a76e0b4373e8fdaf609b9198b238592b01dbe218/gcc%2Fconfig%2Fi386%2Fi386-builtin.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a76e0b4373e8fdaf609b9198b238592b01dbe218/gcc%2Fconfig%2Fi386%2Fi386-builtin.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386-builtin.def?ref=a76e0b4373e8fdaf609b9198b238592b01dbe218", "patch": "@@ -2401,6 +2401,12 @@ BDESC (OPTION_MASK_ISA_GFNI | OPTION_MASK_ISA_AVX, CODE_FOR_vgf2p8affineinvqb_v3\n BDESC (OPTION_MASK_ISA_GFNI | OPTION_MASK_ISA_AVX512BW | OPTION_MASK_ISA_AVX512VL, CODE_FOR_vgf2p8affineinvqb_v32qi_mask, \"__builtin_ia32_vgf2p8affineinvqb_v32qi_mask\", IX86_BUILTIN_VGF2P8AFFINEINVQB256MASK, UNKNOWN, (int) V32QI_FTYPE_V32QI_V32QI_INT_V32QI_USI)\n BDESC (OPTION_MASK_ISA_GFNI | OPTION_MASK_ISA_SSE, CODE_FOR_vgf2p8affineinvqb_v16qi, \"__builtin_ia32_vgf2p8affineinvqb_v16qi\", IX86_BUILTIN_VGF2P8AFFINEINVQB128, UNKNOWN, (int) V16QI_FTYPE_V16QI_V16QI_INT)\n BDESC (OPTION_MASK_ISA_GFNI | OPTION_MASK_ISA_SSE, CODE_FOR_vgf2p8affineinvqb_v16qi_mask, \"__builtin_ia32_vgf2p8affineinvqb_v16qi_mask\", IX86_BUILTIN_VGF2P8AFFINEINVQB128MASK, UNKNOWN, (int) V16QI_FTYPE_V16QI_V16QI_INT_V16QI_UHI)\n+BDESC (OPTION_MASK_ISA_GFNI, CODE_FOR_vgf2p8affineqb_v64qi, \"__builtin_ia32_vgf2p8affineqb_v64qi\", IX86_BUILTIN_VGF2P8AFFINEQB512, UNKNOWN, (int) V64QI_FTYPE_V64QI_V64QI_INT)\n+BDESC (OPTION_MASK_ISA_GFNI | OPTION_MASK_ISA_AVX512BW, CODE_FOR_vgf2p8affineqb_v64qi_mask, \"__builtin_ia32_vgf2p8affineqb_v64qi_mask\", IX86_BUILTIN_VGF2P8AFFINEQB512MASK, UNKNOWN, (int) V64QI_FTYPE_V64QI_V64QI_INT_V64QI_UDI)\n+BDESC (OPTION_MASK_ISA_GFNI | OPTION_MASK_ISA_AVX, CODE_FOR_vgf2p8affineqb_v32qi, \"__builtin_ia32_vgf2p8affineqb_v32qi\", IX86_BUILTIN_VGF2P8AFFINEQB256, UNKNOWN, (int) V32QI_FTYPE_V32QI_V32QI_INT)\n+BDESC (OPTION_MASK_ISA_GFNI | OPTION_MASK_ISA_AVX512BW | OPTION_MASK_ISA_AVX512VL, CODE_FOR_vgf2p8affineqb_v32qi_mask, \"__builtin_ia32_vgf2p8affineqb_v32qi_mask\", IX86_BUILTIN_VGF2P8AFFINEQB256MASK, UNKNOWN, (int) V32QI_FTYPE_V32QI_V32QI_INT_V32QI_USI)\n+BDESC (OPTION_MASK_ISA_GFNI | OPTION_MASK_ISA_SSE, CODE_FOR_vgf2p8affineqb_v16qi, \"__builtin_ia32_vgf2p8affineqb_v16qi\", IX86_BUILTIN_VGF2P8AFFINEQB128, UNKNOWN, (int) V16QI_FTYPE_V16QI_V16QI_INT)\n+BDESC (OPTION_MASK_ISA_GFNI | OPTION_MASK_ISA_SSE, CODE_FOR_vgf2p8affineqb_v16qi_mask, \"__builtin_ia32_vgf2p8affineqb_v16qi_mask\", IX86_BUILTIN_VGF2P8AFFINEQB128MASK, UNKNOWN, (int) V16QI_FTYPE_V16QI_V16QI_INT_V16QI_UHI)\n \n /* Builtins with rounding support.  */\n BDESC_END (ARGS, ROUND_ARGS)"}, {"sha": "7f17231f28e4b980991e4f8ac2b99b88850730c6", "filename": "gcc/config/i386/sse.md", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a76e0b4373e8fdaf609b9198b238592b01dbe218/gcc%2Fconfig%2Fi386%2Fsse.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a76e0b4373e8fdaf609b9198b238592b01dbe218/gcc%2Fconfig%2Fi386%2Fsse.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fsse.md?ref=a76e0b4373e8fdaf609b9198b238592b01dbe218", "patch": "@@ -158,6 +158,7 @@\n \n   ;; For GFNI support\n   UNSPEC_GF2P8AFFINEINV\n+  UNSPEC_GF2P8AFFINE\n ])\n \n (define_c_enum \"unspecv\" [\n@@ -19990,3 +19991,20 @@\n    (set_attr \"prefix_extra\" \"1\")\n    (set_attr \"prefix\" \"orig,maybe_evex,evex\")\n    (set_attr \"mode\" \"<sseinsnmode>\")])\n+\n+(define_insn \"vgf2p8affineqb_<mode><mask_name>\"\n+  [(set (match_operand:VI1_AVX512F 0 \"register_operand\" \"=x,x,v\")\n+\t(unspec:VI1_AVX512F [(match_operand:VI1_AVX512F 1 \"register_operand\" \"%0,x,v\")\n+\t\t\t       (match_operand:VI1_AVX512F 2 \"nonimmediate_operand\" \"xBm,xm,vm\")\n+\t\t\t       (match_operand:QI 3 \"const_0_to_255_operand\" \"n,n,n\")]\n+\t\t\t      UNSPEC_GF2P8AFFINE))]\n+  \"TARGET_GFNI\"\n+  \"@\n+   gf2p8affineqb\\t{%3, %2, %0| %0, %2, %3}\n+   vgf2p8affineqb\\t{%3, %2, %1, %0<mask_operand4>| %0<mask_operand4>, %1, %2, %3}\n+   vgf2p8affineqb\\t{%3, %2, %1, %0<mask_operand4>| %0<mask_operand4>, %1, %2, %3}\"\n+  [(set_attr \"isa\" \"noavx,avx,avx512bw\")\n+   (set_attr \"prefix_data16\" \"1,*,*\")\n+   (set_attr \"prefix_extra\" \"1\")\n+   (set_attr \"prefix\" \"orig,maybe_evex,evex\")\n+   (set_attr \"mode\" \"<sseinsnmode>\")])"}, {"sha": "bc9c8adf357337a42ab4c4141f90e9b25257d508", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a76e0b4373e8fdaf609b9198b238592b01dbe218/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a76e0b4373e8fdaf609b9198b238592b01dbe218/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=a76e0b4373e8fdaf609b9198b238592b01dbe218", "patch": "@@ -1,3 +1,16 @@\n+2017-11-10  Julia Koval  <julia.koval@intel.com>\n+\n+\t * gcc.target/i386/avx-1.c: Handle new intrinsics.\n+\t * gcc.target/i386/avx512f-gf2p8affineqb-2.c: New runtime tests.\n+\t * gcc.target/i386/avx512vl-gf2p8affineqb-2.c: Ditto.\n+\t * gcc.target/i386/gfni-1.c: Add tests for GF2P8AFFINE.\n+\t * gcc.target/i386/gfni-2.c: Ditto.\n+\t * gcc.target/i386/gfni-3.c: Ditto.\n+\t * gcc.target/i386/gfni-4.c: Ditto.\n+\t * gcc.target/i386/sse-13.c: Handle new tests.\n+\t * gcc.target/i386/sse-14.c: Handle new tests.\n+\t * gcc.target/i386/sse-23.c: Handle new tests.\n+\n 2017-11-10  Thomas Preud'homme  <thomas.preudhomme@arm.com>\n \n \t* gcc.target/arm/cmse/bitfield-4.x: New file."}, {"sha": "1133a83b64d3eb418a54d3c950ff1c320e09e335", "filename": "gcc/testsuite/gcc.target/i386/avx-1.c", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a76e0b4373e8fdaf609b9198b238592b01dbe218/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a76e0b4373e8fdaf609b9198b238592b01dbe218/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-1.c?ref=a76e0b4373e8fdaf609b9198b238592b01dbe218", "patch": "@@ -610,6 +610,12 @@\n #define __builtin_ia32_vgf2p8affineinvqb_v16qi_mask(A, B, C, D, E) __builtin_ia32_vgf2p8affineinvqb_v16qi_mask(A, B, 1, D, E) \n #define __builtin_ia32_vgf2p8affineinvqb_v32qi_mask(A, B, C, D, E) __builtin_ia32_vgf2p8affineinvqb_v32qi_mask(A, B, 1, D, E) \n #define __builtin_ia32_vgf2p8affineinvqb_v64qi_mask(A, B, C, D, E) __builtin_ia32_vgf2p8affineinvqb_v64qi_mask(A, B, 1, D, E) \n+#define __builtin_ia32_vgf2p8affineqb_v16qi(A, B, C) __builtin_ia32_vgf2p8affineqb_v16qi(A, B, 1) \n+#define __builtin_ia32_vgf2p8affineqb_v32qi(A, B, C) __builtin_ia32_vgf2p8affineqb_v32qi(A, B, 1)\n+#define __builtin_ia32_vgf2p8affineqb_v64qi(A, B, C) __builtin_ia32_vgf2p8affineqb_v64qi(A, B, 1)\n+#define __builtin_ia32_vgf2p8affineqb_v16qi_mask(A, B, C, D, E) __builtin_ia32_vgf2p8affineqb_v16qi_mask(A, B, 1, D, E) \n+#define __builtin_ia32_vgf2p8affineqb_v32qi_mask(A, B, C, D, E) __builtin_ia32_vgf2p8affineqb_v32qi_mask(A, B, 1, D, E) \n+#define __builtin_ia32_vgf2p8affineqb_v64qi_mask(A, B, C, D, E) __builtin_ia32_vgf2p8affineqb_v64qi_mask(A, B, 1, D, E) \n \n \n "}, {"sha": "71e6db2e045b347fa8ba33bc87cac2e4848f9e7c", "filename": "gcc/testsuite/gcc.target/i386/gfni-1.c", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a76e0b4373e8fdaf609b9198b238592b01dbe218/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fgfni-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a76e0b4373e8fdaf609b9198b238592b01dbe218/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fgfni-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fgfni-1.c?ref=a76e0b4373e8fdaf609b9198b238592b01dbe218", "patch": "@@ -3,6 +3,9 @@\n /* { dg-final { scan-assembler-times \"vgf2p8affineinvqb\\[ \\\\t\\]+\\[^\\{\\n\\]*\\\\\\$3\\[^\\n\\r]*%zmm\\[0-9\\]+\\[^\\n\\r]*%zmm\\[0-9\\]+\\[^\\n\\r]*%zmm\\[0-9\\]+(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n /* { dg-final { scan-assembler-times \"vgf2p8affineinvqb\\[ \\\\t\\]+\\[^\\{\\n\\]*\\\\\\$3\\[^\\n\\r]*%zmm\\[0-9\\]+\\[^\\\\n\\\\r]*%zmm\\[0-9\\]+\\[^\\\\n\\\\r\\]*%zmm\\[0-9\\]+\\{%k\\[1-7\\]\\}(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n /* { dg-final { scan-assembler-times \"vgf2p8affineinvqb\\[ \\\\t\\]+\\[^\\{\\n\\]*\\\\\\$3\\[^\\n\\r]*%zmm\\[0-9\\]+\\[^\\\\n\\\\r]*%zmm\\[0-9\\]+\\[^\\\\n\\\\r\\]*%zmm\\[0-9\\]+\\{%k\\[1-7\\]\\}\\{z\\}(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vgf2p8affineqb\\[ \\\\t\\]+\\[^\\{\\n\\]*\\\\\\$3\\[^\\n\\r]*%zmm\\[0-9\\]+\\[^\\n\\r]*%zmm\\[0-9\\]+\\[^\\n\\r]*%zmm\\[0-9\\]+(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vgf2p8affineqb\\[ \\\\t\\]+\\[^\\{\\n\\]*\\\\\\$3\\[^\\n\\r]*%zmm\\[0-9\\]+\\[^\\\\n\\\\r]*%zmm\\[0-9\\]+\\[^\\\\n\\\\r\\]*%zmm\\[0-9\\]+\\{%k\\[1-7\\]\\}(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vgf2p8affineqb\\[ \\\\t\\]+\\[^\\{\\n\\]*\\\\\\$3\\[^\\n\\r]*%zmm\\[0-9\\]+\\[^\\\\n\\\\r]*%zmm\\[0-9\\]+\\[^\\\\n\\\\r\\]*%zmm\\[0-9\\]+\\{%k\\[1-7\\]\\}\\{z\\}(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n \n #include <x86intrin.h>\n \n@@ -15,4 +18,7 @@ avx512vl_test (void)\n     x1 = _mm512_gf2p8affineinv_epi64_epi8(x1, x2, 3);\n     x1 = _mm512_mask_gf2p8affineinv_epi64_epi8(x1, m64, x2, x1, 3);\n     x1 = _mm512_maskz_gf2p8affineinv_epi64_epi8(m64, x1, x2, 3);\n+    x1 = _mm512_gf2p8affine_epi64_epi8(x1, x2, 3);\n+    x1 = _mm512_mask_gf2p8affine_epi64_epi8(x1, m64, x2, x1, 3);\n+    x1 = _mm512_maskz_gf2p8affine_epi64_epi8(m64, x1, x2, 3);\n }"}, {"sha": "14764b564e4677f2c90865dc3ec212ecb8e6f859", "filename": "gcc/testsuite/gcc.target/i386/gfni-2.c", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a76e0b4373e8fdaf609b9198b238592b01dbe218/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fgfni-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a76e0b4373e8fdaf609b9198b238592b01dbe218/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fgfni-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fgfni-2.c?ref=a76e0b4373e8fdaf609b9198b238592b01dbe218", "patch": "@@ -6,6 +6,12 @@\n /* { dg-final { scan-assembler-times \"vgf2p8affineinvqb\\[ \\\\t\\]+\\[^\\{\\n\\]*\\\\\\$3\\[^\\n\\r]*%xmm\\[0-9\\]+\\[^\\n\\r]*%xmm\\[0-9\\]+\\[^\\n\\r]*%xmm\\[0-9\\]+(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n /* { dg-final { scan-assembler-times \"vgf2p8affineinvqb\\[ \\\\t\\]+\\[^\\{\\n\\]*\\\\\\$3\\[^\\n\\r]*%xmm\\[0-9\\]+\\[^\\\\n\\\\r]*%xmm\\[0-9\\]+\\[^\\\\n\\\\r\\]*%xmm\\[0-9\\]+\\{%k\\[1-7\\]\\}(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n /* { dg-final { scan-assembler-times \"vgf2p8affineinvqb\\[ \\\\t\\]+\\[^\\{\\n\\]*\\\\\\$3\\[^\\n\\r]*%xmm\\[0-9\\]+\\[^\\\\n\\\\r]*%xmm\\[0-9\\]+\\[^\\\\n\\\\r\\]*%xmm\\[0-9\\]+\\{%k\\[1-7\\]\\}\\{z\\}(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vgf2p8affineqb\\[ \\\\t\\]+\\[^\\{\\n\\]*\\\\\\$3\\[^\\n\\r]*%ymm\\[0-9\\]+\\[^\\n\\r]*%ymm\\[0-9\\]+\\[^\\n\\r]*%ymm\\[0-9\\]+(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vgf2p8affineqb\\[ \\\\t\\]+\\[^\\{\\n\\]*\\\\\\$3\\[^\\n\\r]*%ymm\\[0-9\\]+\\[^\\\\n\\\\r]*%ymm\\[0-9\\]+\\[^\\\\n\\\\r\\]*%ymm\\[0-9\\]+\\{%k\\[1-7\\]\\}(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vgf2p8affineqb\\[ \\\\t\\]+\\[^\\{\\n\\]*\\\\\\$3\\[^\\n\\r]*%ymm\\[0-9\\]+\\[^\\\\n\\\\r]*%ymm\\[0-9\\]+\\[^\\\\n\\\\r\\]*%ymm\\[0-9\\]+\\{%k\\[1-7\\]\\}\\{z\\}(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vgf2p8affineqb\\[ \\\\t\\]+\\[^\\{\\n\\]*\\\\\\$3\\[^\\n\\r]*%xmm\\[0-9\\]+\\[^\\n\\r]*%xmm\\[0-9\\]+\\[^\\n\\r]*%xmm\\[0-9\\]+(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vgf2p8affineqb\\[ \\\\t\\]+\\[^\\{\\n\\]*\\\\\\$3\\[^\\n\\r]*%xmm\\[0-9\\]+\\[^\\\\n\\\\r]*%xmm\\[0-9\\]+\\[^\\\\n\\\\r\\]*%xmm\\[0-9\\]+\\{%k\\[1-7\\]\\}(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vgf2p8affineqb\\[ \\\\t\\]+\\[^\\{\\n\\]*\\\\\\$3\\[^\\n\\r]*%xmm\\[0-9\\]+\\[^\\\\n\\\\r]*%xmm\\[0-9\\]+\\[^\\\\n\\\\r\\]*%xmm\\[0-9\\]+\\{%k\\[1-7\\]\\}\\{z\\}(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n \n #include <x86intrin.h>\n \n@@ -24,4 +30,10 @@ avx512vl_test (void)\n     x5 = _mm_gf2p8affineinv_epi64_epi8(x5, x6, 3);\n     x5 = _mm_mask_gf2p8affineinv_epi64_epi8(x5, m16, x6, x5, 3);\n     x5 = _mm_maskz_gf2p8affineinv_epi64_epi8(m16, x5, x6, 3);\n+    x3 = _mm256_gf2p8affine_epi64_epi8(x3, x4, 3);\n+    x3 = _mm256_mask_gf2p8affine_epi64_epi8(x3, m32, x4, x3, 3);\n+    x3 = _mm256_maskz_gf2p8affine_epi64_epi8(m32, x3, x4, 3);\n+    x5 = _mm_gf2p8affine_epi64_epi8(x5, x6, 3);\n+    x5 = _mm_mask_gf2p8affine_epi64_epi8(x5, m16, x6, x5, 3);\n+    x5 = _mm_maskz_gf2p8affine_epi64_epi8(m16, x5, x6, 3);\n }"}, {"sha": "3e39f4ea0d2529b3c58c71e1a6ee913f1a07488e", "filename": "gcc/testsuite/gcc.target/i386/gfni-3.c", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a76e0b4373e8fdaf609b9198b238592b01dbe218/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fgfni-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a76e0b4373e8fdaf609b9198b238592b01dbe218/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fgfni-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fgfni-3.c?ref=a76e0b4373e8fdaf609b9198b238592b01dbe218", "patch": "@@ -2,6 +2,8 @@\n /* { dg-options \"-mgfni -mavx -O2\" } */\n /* { dg-final { scan-assembler-times \"vgf2p8affineinvqb\\[ \\\\t\\]+\\[^\\{\\n\\]*\\\\\\$3\\[^\\n\\r]*%ymm\\[0-9\\]+\\[^\\n\\r]*%ymm\\[0-9\\]+\\[^\\n\\r]*%ymm\\[0-9\\]+(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n /* { dg-final { scan-assembler-times \"vgf2p8affineinvqb\\[ \\\\t\\]+\\[^\\{\\n\\]*\\\\\\$3\\[^\\n\\r]*%xmm\\[0-9\\]+\\[^\\n\\r]*%xmm\\[0-9\\]+\\[^\\n\\r]*%xmm\\[0-9\\]+(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vgf2p8affineqb\\[ \\\\t\\]+\\[^\\{\\n\\]*\\\\\\$3\\[^\\n\\r]*%ymm\\[0-9\\]+\\[^\\n\\r]*%ymm\\[0-9\\]+\\[^\\n\\r]*%ymm\\[0-9\\]+(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vgf2p8affineqb\\[ \\\\t\\]+\\[^\\{\\n\\]*\\\\\\$3\\[^\\n\\r]*%xmm\\[0-9\\]+\\[^\\n\\r]*%xmm\\[0-9\\]+\\[^\\n\\r]*%xmm\\[0-9\\]+(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n \n #include <x86intrin.h>\n \n@@ -14,4 +16,6 @@ avx512vl_test (void)\n {\n     x3 = _mm256_gf2p8affineinv_epi64_epi8(x3, x4, 3);\n     x5 = _mm_gf2p8affineinv_epi64_epi8(x5, x6, 3);\n+    x3 = _mm256_gf2p8affine_epi64_epi8(x3, x4, 3);\n+    x5 = _mm_gf2p8affine_epi64_epi8(x5, x6, 3);\n }"}, {"sha": "19409d28a3789dcd309debb030fcaa4de29a7e82", "filename": "gcc/testsuite/gcc.target/i386/gfni-4.c", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a76e0b4373e8fdaf609b9198b238592b01dbe218/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fgfni-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a76e0b4373e8fdaf609b9198b238592b01dbe218/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fgfni-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fgfni-4.c?ref=a76e0b4373e8fdaf609b9198b238592b01dbe218", "patch": "@@ -1,6 +1,7 @@\n /* { dg-do compile } */\n-/* { dg-options \"-mgfni -O2\" } */\n+/* { dg-options \"-mgfni -O2 -msse\" } */\n /* { dg-final { scan-assembler-times \"gf2p8affineinvqb\\[ \\\\t\\]+\\[^\\{\\n\\]*\\\\\\$3\\[^\\n\\r]*%xmm\\[0-9\\]+\\[^\\n\\r]*%xmm\\[0-9\\]+(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"gf2p8affineqb\\[ \\\\t\\]+\\[^\\{\\n\\]*\\\\\\$3\\[^\\n\\r]*%xmm\\[0-9\\]+\\[^\\n\\r]*%xmm\\[0-9\\]+(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n \n #include <x86intrin.h>\n \n@@ -11,4 +12,5 @@ void extern\n avx512vl_test (void)\n {\n     x5 = _mm_gf2p8affineinv_epi64_epi8(x5, x6, 3);\n+    x5 = _mm_gf2p8affine_epi64_epi8(x5, x6, 3);\n }"}, {"sha": "9bdc73f0c57f6dfa4bc72d252fbd6bc2eee5cedf", "filename": "gcc/testsuite/gcc.target/i386/sse-13.c", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a76e0b4373e8fdaf609b9198b238592b01dbe218/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-13.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a76e0b4373e8fdaf609b9198b238592b01dbe218/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-13.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-13.c?ref=a76e0b4373e8fdaf609b9198b238592b01dbe218", "patch": "@@ -627,5 +627,12 @@\n #define __builtin_ia32_vgf2p8affineinvqb_v16qi_mask(A, B, C, D, E) __builtin_ia32_vgf2p8affineinvqb_v16qi_mask(A, B, 1, D, E) \n #define __builtin_ia32_vgf2p8affineinvqb_v32qi_mask(A, B, C, D, E) __builtin_ia32_vgf2p8affineinvqb_v32qi_mask(A, B, 1, D, E) \n #define __builtin_ia32_vgf2p8affineinvqb_v64qi_mask(A, B, C, D, E) __builtin_ia32_vgf2p8affineinvqb_v64qi_mask(A, B, 1, D, E) \n+#define __builtin_ia32_vgf2p8affineqb_v16qi(A, B, C) __builtin_ia32_vgf2p8affineqb_v16qi(A, B, 1) \n+#define __builtin_ia32_vgf2p8affineqb_v32qi(A, B, C) __builtin_ia32_vgf2p8affineqb_v32qi(A, B, 1)\n+#define __builtin_ia32_vgf2p8affineqb_v64qi(A, B, C) __builtin_ia32_vgf2p8affineqb_v64qi(A, B, 1)\n+#define __builtin_ia32_vgf2p8affineqb_v16qi_mask(A, B, C, D, E) __builtin_ia32_vgf2p8affineqb_v16qi_mask(A, B, 1, D, E) \n+#define __builtin_ia32_vgf2p8affineqb_v32qi_mask(A, B, C, D, E) __builtin_ia32_vgf2p8affineqb_v32qi_mask(A, B, 1, D, E) \n+#define __builtin_ia32_vgf2p8affineqb_v64qi_mask(A, B, C, D, E) __builtin_ia32_vgf2p8affineqb_v64qi_mask(A, B, 1, D, E) \n+\n \n #include <x86intrin.h>"}, {"sha": "fb2c35ab90971d1ba0848fa5a4826deca6272356", "filename": "gcc/testsuite/gcc.target/i386/sse-14.c", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a76e0b4373e8fdaf609b9198b238592b01dbe218/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-14.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a76e0b4373e8fdaf609b9198b238592b01dbe218/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-14.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-14.c?ref=a76e0b4373e8fdaf609b9198b238592b01dbe218", "patch": "@@ -689,3 +689,6 @@ test_1 ( __bextri_u64, unsigned long long, unsigned long long, 1)\n test_2 (_mm_gf2p8affineinv_epi64_epi8, __m128i, __m128i, __m128i, 1)\n test_2 (_mm256_gf2p8affineinv_epi64_epi8, __m256i, __m256i, __m256i, 1)\n test_2 (_mm512_gf2p8affineinv_epi64_epi8, __m512i, __m512i, __m512i, 1)\n+test_2 (_mm_gf2p8affine_epi64_epi8, __m128i, __m128i, __m128i, 1)\n+test_2 (_mm256_gf2p8affine_epi64_epi8, __m256i, __m256i, __m256i, 1)\n+test_2 (_mm512_gf2p8affine_epi64_epi8, __m512i, __m512i, __m512i, 1)"}, {"sha": "66c25c74addb6de01af65de870fc0ceb851fa2d4", "filename": "gcc/testsuite/gcc.target/i386/sse-23.c", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a76e0b4373e8fdaf609b9198b238592b01dbe218/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-23.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a76e0b4373e8fdaf609b9198b238592b01dbe218/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-23.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-23.c?ref=a76e0b4373e8fdaf609b9198b238592b01dbe218", "patch": "@@ -626,6 +626,12 @@\n #define __builtin_ia32_vgf2p8affineinvqb_v16qi_mask(A, B, C, D, E) __builtin_ia32_vgf2p8affineinvqb_v16qi_mask(A, B, 1, D, E) \n #define __builtin_ia32_vgf2p8affineinvqb_v32qi_mask(A, B, C, D, E) __builtin_ia32_vgf2p8affineinvqb_v32qi_mask(A, B, 1, D, E) \n #define __builtin_ia32_vgf2p8affineinvqb_v64qi_mask(A, B, C, D, E) __builtin_ia32_vgf2p8affineinvqb_v64qi_mask(A, B, 1, D, E) \n+#define __builtin_ia32_vgf2p8affineqb_v16qi(A, B, C) __builtin_ia32_vgf2p8affineqb_v16qi(A, B, 1) \n+#define __builtin_ia32_vgf2p8affineqb_v32qi(A, B, C) __builtin_ia32_vgf2p8affineqb_v32qi(A, B, 1)\n+#define __builtin_ia32_vgf2p8affineqb_v64qi(A, B, C) __builtin_ia32_vgf2p8affineqb_v64qi(A, B, 1)\n+#define __builtin_ia32_vgf2p8affineqb_v16qi_mask(A, B, C, D, E) __builtin_ia32_vgf2p8affineqb_v16qi_mask(A, B, 1, D, E) \n+#define __builtin_ia32_vgf2p8affineqb_v32qi_mask(A, B, C, D, E) __builtin_ia32_vgf2p8affineqb_v32qi_mask(A, B, 1, D, E) \n+#define __builtin_ia32_vgf2p8affineqb_v64qi_mask(A, B, C, D, E) __builtin_ia32_vgf2p8affineqb_v64qi_mask(A, B, 1, D, E) \n \n #pragma GCC target (\"sse4a,3dnow,avx,avx2,fma4,xop,aes,pclmul,popcnt,abm,lzcnt,bmi,bmi2,tbm,lwp,fsgsbase,rdrnd,f16c,fma,rtm,rdseed,prfchw,adx,fxsr,xsaveopt,avx512f,avx512er,avx512cd,avx512pf,sha,prefetchwt1,xsavec,xsaves,clflushopt,avx512bw,avx512dq,avx512vl,avx512vbmi,avx512ifma,avx5124fmaps,avx5124vnniw,avx512vpopcntdq,clwb,mwaitx,clzero,pku,sgx,rdpid,gfni\")\n "}]}