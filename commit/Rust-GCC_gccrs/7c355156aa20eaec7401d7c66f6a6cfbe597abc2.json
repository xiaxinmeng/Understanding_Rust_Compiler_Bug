{"sha": "7c355156aa20eaec7401d7c66f6a6cfbe597abc2", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2MzNTUxNTZhYTIwZWFlYzc0MDFkN2M2NmY2YTZjZmJlNTk3YWJjMg==", "commit": {"author": {"name": "Uros Bizjak", "email": "ubizjak@gmail.com", "date": "2020-05-11T09:16:31Z"}, "committer": {"name": "Uros Bizjak", "email": "ubizjak@gmail.com", "date": "2020-05-11T09:16:31Z"}, "message": "i386: Vectorize basic V2SFmode operations [PR94913]\n\nEnable V2SFmode vectorization and vectorize V2SFmode PLUS,\nMINUS, MULT, MIN and MAX operations using XMM registers.\n\nTo avoid unwanted secondary effects (e.g. exceptions), load values\nto XMM registers using MOVQ that clears high bits of the XMM\nregister outside V2SFmode.\n\nThe compiler now vectorizes e.g.:\n\nfloat r[2], a[2], b[2];\n\nvoid\ntest_plus (void)\n{\n  for (int i = 0; i < 2; i++)\n    r[i] = a[i] + b[i];\n}\n\nto:\n        movq    a(%rip), %xmm0\n        movq    b(%rip), %xmm1\n        addps   %xmm1, %xmm0\n        movlps  %xmm0, r(%rip)\n        ret\n\ngcc/ChangeLog:\n\n\tPR target/95046\n\t* config/i386/i386.c (ix86_vector_mode_supported_p):\n\tVectorize 3dNOW! vector modes for TARGET_MMX_WITH_SSE.\n\t* config/i386/mmx.md (*mov<mode>_internal): Do not set\n\tmode of alternative 13 to V2SF for TARGET_MMX_WITH_SSE.\n\n\t(mmx_addv2sf3): Change operand predicates from\n\tnonimmediate_operand to register_mmxmem_operand.\n\t(addv2sf3): New expander.\n\t(*mmx_addv2sf3): Add SSE/AVX alternatives.  Change operand\n\tpredicates from nonimmediate_operand to register_mmxmem_operand.\n\tEnable instruction pattern for TARGET_MMX_WITH_SSE.\n\n\t(mmx_subv2sf3): Change operand predicate from\n\tnonimmediate_operand to register_mmxmem_operand.\n\t(mmx_subrv2sf3): Ditto.\n\t(subv2sf3): New expander.\n\t(*mmx_subv2sf3): Add SSE/AVX alternatives.  Change operand\n\tpredicates from nonimmediate_operand to register_mmxmem_operand.\n\tEnable instruction pattern for TARGET_MMX_WITH_SSE.\n\n\t(mmx_mulv2sf3): Change operand predicates from\n\tnonimmediate_operand to register_mmxmem_operand.\n\t(mulv2sf3): New expander.\n\t(*mmx_mulv2sf3): Add SSE/AVX alternatives.  Change operand\n\tpredicates from nonimmediate_operand to register_mmxmem_operand.\n\tEnable instruction pattern for TARGET_MMX_WITH_SSE.\n\n\t(mmx_<code>v2sf3): Change operand predicates from\n\tnonimmediate_operand to register_mmxmem_operand.\n\t(<code>v2sf3): New expander.\n\t(*mmx_<code>v2sf3): Add SSE/AVX alternatives.  Change operand\n\tpredicates from nonimmediate_operand to register_mmxmem_operand.\n\tEnable instruction pattern for TARGET_MMX_WITH_SSE.\n\t(mmx_ieee_<ieee_maxmin>v2sf3): Ditto.\n\ntestsuite/ChangeLog:\n\n\tPR target/95046\n\t* gcc.target/i386/pr95046-1.c: New test.", "tree": {"sha": "a9f8173b3d26182fb35cf752dfb7a22637550fb9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a9f8173b3d26182fb35cf752dfb7a22637550fb9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7c355156aa20eaec7401d7c66f6a6cfbe597abc2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7c355156aa20eaec7401d7c66f6a6cfbe597abc2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7c355156aa20eaec7401d7c66f6a6cfbe597abc2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7c355156aa20eaec7401d7c66f6a6cfbe597abc2/comments", "author": {"login": "ubizjak", "id": 55479990, "node_id": "MDQ6VXNlcjU1NDc5OTkw", "avatar_url": "https://avatars.githubusercontent.com/u/55479990?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ubizjak", "html_url": "https://github.com/ubizjak", "followers_url": "https://api.github.com/users/ubizjak/followers", "following_url": "https://api.github.com/users/ubizjak/following{/other_user}", "gists_url": "https://api.github.com/users/ubizjak/gists{/gist_id}", "starred_url": "https://api.github.com/users/ubizjak/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ubizjak/subscriptions", "organizations_url": "https://api.github.com/users/ubizjak/orgs", "repos_url": "https://api.github.com/users/ubizjak/repos", "events_url": "https://api.github.com/users/ubizjak/events{/privacy}", "received_events_url": "https://api.github.com/users/ubizjak/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ubizjak", "id": 55479990, "node_id": "MDQ6VXNlcjU1NDc5OTkw", "avatar_url": "https://avatars.githubusercontent.com/u/55479990?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ubizjak", "html_url": "https://github.com/ubizjak", "followers_url": "https://api.github.com/users/ubizjak/followers", "following_url": "https://api.github.com/users/ubizjak/following{/other_user}", "gists_url": "https://api.github.com/users/ubizjak/gists{/gist_id}", "starred_url": "https://api.github.com/users/ubizjak/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ubizjak/subscriptions", "organizations_url": "https://api.github.com/users/ubizjak/orgs", "repos_url": "https://api.github.com/users/ubizjak/repos", "events_url": "https://api.github.com/users/ubizjak/events{/privacy}", "received_events_url": "https://api.github.com/users/ubizjak/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "dbeaa7ab81a37acadc9af6e7990332604252de20", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dbeaa7ab81a37acadc9af6e7990332604252de20", "html_url": "https://github.com/Rust-GCC/gccrs/commit/dbeaa7ab81a37acadc9af6e7990332604252de20"}], "stats": {"total": 281, "additions": 229, "deletions": 52}, "files": [{"sha": "0a98c7441e143dff4e945a9d5924475c71854efd", "filename": "gcc/ChangeLog", "status": "modified", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7c355156aa20eaec7401d7c66f6a6cfbe597abc2/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7c355156aa20eaec7401d7c66f6a6cfbe597abc2/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=7c355156aa20eaec7401d7c66f6a6cfbe597abc2", "patch": "@@ -1,3 +1,41 @@\n+2020-05-11  Uro\u0161 Bizjak  <ubizjak@gmail.com>\n+\n+\tPR target/95046\n+\t* config/i386/i386.c (ix86_vector_mode_supported_p):\n+\tVectorize 3dNOW! vector modes for TARGET_MMX_WITH_SSE.\n+\t* config/i386/mmx.md (*mov<mode>_internal): Do not set\n+\tmode of alternative 13 to V2SF for TARGET_MMX_WITH_SSE.\n+\n+\t(mmx_addv2sf3): Change operand predicates from\n+\tnonimmediate_operand to register_mmxmem_operand.\n+\t(addv2sf3): New expander.\n+\t(*mmx_addv2sf3): Add SSE/AVX alternatives.  Change operand\n+\tpredicates from nonimmediate_operand to register_mmxmem_operand.\n+\tEnable instruction pattern for TARGET_MMX_WITH_SSE.\n+\n+\t(mmx_subv2sf3): Change operand predicate from\n+\tnonimmediate_operand to register_mmxmem_operand.\n+\t(mmx_subrv2sf3): Ditto.\n+\t(subv2sf3): New expander.\n+\t(*mmx_subv2sf3): Add SSE/AVX alternatives.  Change operand\n+\tpredicates from nonimmediate_operand to register_mmxmem_operand.\n+\tEnable instruction pattern for TARGET_MMX_WITH_SSE.\n+\n+\t(mmx_mulv2sf3): Change operand predicates from\n+\tnonimmediate_operand to register_mmxmem_operand.\n+\t(mulv2sf3): New expander.\n+\t(*mmx_mulv2sf3): Add SSE/AVX alternatives.  Change operand\n+\tpredicates from nonimmediate_operand to register_mmxmem_operand.\n+\tEnable instruction pattern for TARGET_MMX_WITH_SSE.\n+\n+\t(mmx_<code>v2sf3): Change operand predicates from\n+\tnonimmediate_operand to register_mmxmem_operand.\n+\t(<code>v2sf3): New expander.\n+\t(*mmx_<code>v2sf3): Add SSE/AVX alternatives.  Change operand\n+\tpredicates from nonimmediate_operand to register_mmxmem_operand.\n+\tEnable instruction pattern for TARGET_MMX_WITH_SSE.\n+\t(mmx_ieee_<ieee_maxmin>v2sf3): Ditto.\n+\n 2020-05-11  Martin Liska  <mliska@suse.cz>\n \n \tPR c/95040"}, {"sha": "d1c0e354162e04825b72dfbbc6995414059bf130", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7c355156aa20eaec7401d7c66f6a6cfbe597abc2/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7c355156aa20eaec7401d7c66f6a6cfbe597abc2/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=7c355156aa20eaec7401d7c66f6a6cfbe597abc2", "patch": "@@ -21007,9 +21007,11 @@ ix86_vector_mode_supported_p (machine_mode mode)\n     return true;\n   if (TARGET_AVX512F && VALID_AVX512F_REG_MODE (mode))\n     return true;\n-  if ((TARGET_MMX || TARGET_MMX_WITH_SSE) && VALID_MMX_REG_MODE (mode))\n+  if ((TARGET_MMX || TARGET_MMX_WITH_SSE)\n+      && VALID_MMX_REG_MODE (mode))\n     return true;\n-  if (TARGET_3DNOW && VALID_MMX_REG_MODE_3DNOW (mode))\n+  if ((TARGET_3DNOW || TARGET_MMX_WITH_SSE)\n+      && VALID_MMX_REG_MODE_3DNOW (mode))\n     return true;\n   return false;\n }"}, {"sha": "d3e0004d3a060eb3583cbf1d5c77dcf706352031", "filename": "gcc/config/i386/mmx.md", "status": "modified", "additions": 130, "deletions": 49, "changes": 179, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7c355156aa20eaec7401d7c66f6a6cfbe597abc2/gcc%2Fconfig%2Fi386%2Fmmx.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7c355156aa20eaec7401d7c66f6a6cfbe597abc2/gcc%2Fconfig%2Fi386%2Fmmx.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fmmx.md?ref=7c355156aa20eaec7401d7c66f6a6cfbe597abc2", "patch": "@@ -175,7 +175,13 @@\n \t\t    ]\n \t\t    (const_string \"TI\"))\n \n-\t    (and (eq_attr \"alternative\" \"13,14\")\n+\t    (and (eq_attr \"alternative\" \"13\")\n+\t\t (ior (and (match_test \"<MODE>mode == V2SFmode\")\n+\t\t\t   (not (match_test \"TARGET_MMX_WITH_SSE\")))\n+\t\t      (not (match_test \"TARGET_SSE2\"))))\n+\t      (const_string \"V2SF\")\n+\n+\t    (and (eq_attr \"alternative\" \"14\")\n \t    \t (ior (match_test \"<MODE>mode == V2SFmode\")\n \t\t      (not (match_test \"TARGET_SSE2\"))))\n \t      (const_string \"V2SF\")\n@@ -235,67 +241,112 @@\n (define_expand \"mmx_addv2sf3\"\n   [(set (match_operand:V2SF 0 \"register_operand\")\n \t(plus:V2SF\n-\t  (match_operand:V2SF 1 \"nonimmediate_operand\")\n-\t  (match_operand:V2SF 2 \"nonimmediate_operand\")))]\n+\t  (match_operand:V2SF 1 \"register_mmxmem_operand\")\n+\t  (match_operand:V2SF 2 \"register_mmxmem_operand\")))]\n   \"TARGET_3DNOW\"\n   \"ix86_fixup_binary_operands_no_copy (PLUS, V2SFmode, operands);\")\n \n+(define_expand \"addv2sf3\"\n+  [(set (match_operand:V2SF 0 \"register_operand\")\n+\t(plus:V2SF\n+\t  (match_operand:V2SF 1 \"register_operand\")\n+\t  (match_operand:V2SF 2 \"register_operand\")))]\n+  \"TARGET_MMX_WITH_SSE\"\n+  \"ix86_fixup_binary_operands_no_copy (PLUS, V2SFmode, operands);\")\n+\n (define_insn \"*mmx_addv2sf3\"\n-  [(set (match_operand:V2SF 0 \"register_operand\" \"=y\")\n-\t(plus:V2SF (match_operand:V2SF 1 \"nonimmediate_operand\" \"%0\")\n-\t\t   (match_operand:V2SF 2 \"nonimmediate_operand\" \"ym\")))]\n-  \"TARGET_3DNOW && ix86_binary_operator_ok (PLUS, V2SFmode, operands)\"\n-  \"pfadd\\t{%2, %0|%0, %2}\"\n-  [(set_attr \"type\" \"mmxadd\")\n-   (set_attr \"prefix_extra\" \"1\")\n-   (set_attr \"mode\" \"V2SF\")])\n+  [(set (match_operand:V2SF 0 \"register_operand\" \"=y,x,Yv\")\n+\t(plus:V2SF\n+\t  (match_operand:V2SF 1 \"register_mmxmem_operand\" \"%0,0,Yv\")\n+\t  (match_operand:V2SF 2 \"register_mmxmem_operand\" \"ym,x,Yv\")))]\n+  \"(TARGET_3DNOW || TARGET_MMX_WITH_SSE)\n+   && ix86_binary_operator_ok (PLUS, V2SFmode, operands)\"\n+  \"@\n+   pfadd\\t{%2, %0|%0, %2}\n+   addps\\t{%2, %0|%0, %2}\n+   vaddps\\t{%2, %1, %0|%0, %1, %2}\"\n+  [(set_attr \"isa\" \"*,sse2_noavx,avx\")\n+   (set_attr \"mmx_isa\" \"native,*,*\")\n+   (set_attr \"type\" \"mmxadd,sseadd,sseadd\")\n+   (set_attr \"prefix_extra\" \"1,*,*\")\n+   (set_attr \"mode\" \"V2SF,V4SF,V4SF\")])\n \n (define_expand \"mmx_subv2sf3\"\n   [(set (match_operand:V2SF 0 \"register_operand\")\n         (minus:V2SF (match_operand:V2SF 1 \"register_operand\")\n-\t\t    (match_operand:V2SF 2 \"nonimmediate_operand\")))]\n+\t\t    (match_operand:V2SF 2 \"register_mmxmem_operand\")))]\n   \"TARGET_3DNOW\")\n \n (define_expand \"mmx_subrv2sf3\"\n   [(set (match_operand:V2SF 0 \"register_operand\")\n         (minus:V2SF (match_operand:V2SF 2 \"register_operand\")\n-\t\t    (match_operand:V2SF 1 \"nonimmediate_operand\")))]\n+\t\t    (match_operand:V2SF 1 \"register_mmxmem_operand\")))]\n   \"TARGET_3DNOW\")\n \n+(define_expand \"subv2sf3\"\n+  [(set (match_operand:V2SF 0 \"register_operand\")\n+\t(minus:V2SF\n+\t  (match_operand:V2SF 1 \"register_operand\")\n+\t  (match_operand:V2SF 2 \"register_operand\")))]\n+  \"TARGET_MMX_WITH_SSE\"\n+  \"ix86_fixup_binary_operands_no_copy (MINUS, V2SFmode, operands);\")\n+\n (define_insn \"*mmx_subv2sf3\"\n-  [(set (match_operand:V2SF 0 \"register_operand\" \"=y,y\")\n-        (minus:V2SF (match_operand:V2SF 1 \"nonimmediate_operand\" \"0,ym\")\n-\t\t    (match_operand:V2SF 2 \"nonimmediate_operand\" \"ym,0\")))]\n-  \"TARGET_3DNOW && !(MEM_P (operands[0]) && MEM_P (operands[1]))\"\n+  [(set (match_operand:V2SF 0 \"register_operand\" \"=y,y,x,Yv\")\n+        (minus:V2SF\n+\t  (match_operand:V2SF 1 \"register_mmxmem_operand\" \"0,ym,0,Yv\")\n+\t  (match_operand:V2SF 2 \"register_mmxmem_operand\" \"ym,0,x,Yv\")))]\n+  \"(TARGET_3DNOW || TARGET_MMX_WITH_SSE)\n+   && !(MEM_P (operands[0]) && MEM_P (operands[1]))\"\n   \"@\n    pfsub\\t{%2, %0|%0, %2}\n-   pfsubr\\t{%1, %0|%0, %1}\"\n-  [(set_attr \"type\" \"mmxadd\")\n-   (set_attr \"prefix_extra\" \"1\")\n-   (set_attr \"mode\" \"V2SF\")])\n+   pfsubr\\t{%1, %0|%0, %1}\n+   subps\\t{%2, %0|%0, %2}\n+   vsubps\\t{%2, %1, %0|%0, %1, %2}\"\n+  [(set_attr \"isa\" \"*,*,sse2_noavx,avx\")\n+   (set_attr \"mmx_isa\" \"native,native,*,*\")\n+   (set_attr \"type\" \"mmxadd,mmxadd,sseadd,sseadd\")\n+   (set_attr \"prefix_extra\" \"1,1,*,*\")\n+   (set_attr \"mode\" \"V2SF,V2SF,V4SF,V4SF\")])\n \n (define_expand \"mmx_mulv2sf3\"\n   [(set (match_operand:V2SF 0 \"register_operand\")\n-\t(mult:V2SF (match_operand:V2SF 1 \"nonimmediate_operand\")\n-\t\t   (match_operand:V2SF 2 \"nonimmediate_operand\")))]\n+\t(mult:V2SF (match_operand:V2SF 1 \"register_mmxmem_operand\")\n+\t\t   (match_operand:V2SF 2 \"register_mmxmem_operand\")))]\n   \"TARGET_3DNOW\"\n   \"ix86_fixup_binary_operands_no_copy (MULT, V2SFmode, operands);\")\n \n+(define_expand \"mulv2sf3\"\n+  [(set (match_operand:V2SF 0 \"register_operand\")\n+\t(mult:V2SF\n+\t  (match_operand:V2SF 1 \"register_operand\")\n+\t  (match_operand:V2SF 2 \"register_operand\")))]\n+  \"TARGET_MMX_WITH_SSE\"\n+  \"ix86_fixup_binary_operands_no_copy (MULT, V2SFmode, operands);\")\n+\n (define_insn \"*mmx_mulv2sf3\"\n-  [(set (match_operand:V2SF 0 \"register_operand\" \"=y\")\n-\t(mult:V2SF (match_operand:V2SF 1 \"nonimmediate_operand\" \"%0\")\n-\t\t   (match_operand:V2SF 2 \"nonimmediate_operand\" \"ym\")))]\n-  \"TARGET_3DNOW && ix86_binary_operator_ok (MULT, V2SFmode, operands)\"\n-  \"pfmul\\t{%2, %0|%0, %2}\"\n-  [(set_attr \"type\" \"mmxmul\")\n-   (set_attr \"prefix_extra\" \"1\")\n-   (set_attr \"mode\" \"V2SF\")])\n+  [(set (match_operand:V2SF 0 \"register_operand\" \"=y,x,Yv\")\n+\t(mult:V2SF\n+\t  (match_operand:V2SF 1 \"register_mmxmem_operand\" \"%0,0,Yv\")\n+\t  (match_operand:V2SF 2 \"register_mmxmem_operand\" \"ym,x,Yv\")))]\n+  \"(TARGET_3DNOW || TARGET_MMX_WITH_SSE)\n+   && ix86_binary_operator_ok (MULT, V2SFmode, operands)\"\n+  \"@\n+   pfmul\\t{%2, %0|%0, %2}\n+   mulps\\t{%2, %0|%0, %2}\n+   vmulps\\t{%2, %1, %0|%0, %1, %2}\"\n+  [(set_attr \"isa\" \"*,sse2_noavx,avx\")\n+   (set_attr \"mmx_isa\" \"native,*,*\")\n+   (set_attr \"type\" \"mmxmul,ssemul,ssemul\")\n+   (set_attr \"prefix_extra\" \"1,*,*\")\n+   (set_attr \"btver2_decode\" \"*,direct,double\")\n+   (set_attr \"mode\" \"V2SF,V4SF,V4SF\")])\n \n (define_expand \"mmx_<code>v2sf3\"\n   [(set (match_operand:V2SF 0 \"register_operand\")\n         (smaxmin:V2SF\n-\t  (match_operand:V2SF 1 \"nonimmediate_operand\")\n-\t  (match_operand:V2SF 2 \"nonimmediate_operand\")))]\n+\t  (match_operand:V2SF 1 \"register_mmxmem_operand\")\n+\t  (match_operand:V2SF 2 \"register_mmxmem_operand\")))]\n   \"TARGET_3DNOW\"\n {\n   if (!flag_finite_math_only || flag_signed_zeros)\n@@ -309,21 +360,45 @@\n     ix86_fixup_binary_operands_no_copy (<CODE>, V2SFmode, operands);\n })\n \n+(define_expand \"<code>v2sf3\"\n+  [(set (match_operand:V2SF 0 \"register_operand\")\n+        (smaxmin:V2SF\n+\t  (match_operand:V2SF 1 \"register_operand\")\n+\t  (match_operand:V2SF 2 \"register_operand\")))]\n+  \"TARGET_MMX_WITH_SSE\"\n+{\n+  if (!flag_finite_math_only || flag_signed_zeros)\n+    {\n+      emit_insn (gen_mmx_ieee_<maxmin_float>v2sf3\n+\t\t (operands[0], operands[1], operands[2]));\n+      DONE;\n+    }\n+  else\n+    ix86_fixup_binary_operands_no_copy (<CODE>, V2SFmode, operands);\n+})\n+\n ;; These versions of the min/max patterns are intentionally ignorant of\n ;; their behavior wrt -0.0 and NaN (via the commutative operand mark).\n ;; Since both the tree-level MAX_EXPR and the rtl-level SMAX operator\n ;; are undefined in this condition, we're certain this is correct.\n \n (define_insn \"*mmx_<code>v2sf3\"\n-  [(set (match_operand:V2SF 0 \"register_operand\" \"=y\")\n+  [(set (match_operand:V2SF 0 \"register_operand\" \"=y,x,Yv\")\n         (smaxmin:V2SF\n-\t  (match_operand:V2SF 1 \"nonimmediate_operand\" \"%0\")\n-\t  (match_operand:V2SF 2 \"nonimmediate_operand\" \"ym\")))]\n-  \"TARGET_3DNOW && ix86_binary_operator_ok (<CODE>, V2SFmode, operands)\"\n-  \"pf<maxmin_float>\\t{%2, %0|%0, %2}\"\n-  [(set_attr \"type\" \"mmxadd\")\n-   (set_attr \"prefix_extra\" \"1\")\n-   (set_attr \"mode\" \"V2SF\")])\n+\t  (match_operand:V2SF 1 \"register_mmxmem_operand\" \"%0,0,Yv\")\n+\t  (match_operand:V2SF 2 \"register_mmxmem_operand\" \"ym,x,Yv\")))]\n+  \"(TARGET_3DNOW || TARGET_MMX_WITH_SSE)\n+   && ix86_binary_operator_ok (<CODE>, V2SFmode, operands)\"\n+  \"@\n+   pf<maxmin_float>\\t{%2, %0|%0, %2}\n+   <maxmin_float>ps\\t{%2, %0|%0, %2}\n+   v<maxmin_float>ps\\t{%2, %1, %0|%0, %1, %2}\"\n+  [(set_attr \"isa\" \"*,sse2_noavx,avx\")\n+   (set_attr \"mmx_isa\" \"native,*,*\")\n+   (set_attr \"type\" \"mmxadd,sseadd,sseadd\")\n+   (set_attr \"btver2_sse_attr\" \"*,maxmin,maxmin\")\n+   (set_attr \"prefix_extra\" \"1,*,*\")\n+   (set_attr \"mode\" \"V2SF,V4SF,V4SF\")])\n \n ;; These versions of the min/max patterns implement exactly the operations\n ;;   min = (op1 < op2 ? op1 : op2)\n@@ -332,16 +407,22 @@\n ;; presence of -0.0 and NaN.\n \n (define_insn \"mmx_ieee_<ieee_maxmin>v2sf3\"\n-  [(set (match_operand:V2SF 0 \"register_operand\" \"=y\")\n+  [(set (match_operand:V2SF 0 \"register_operand\" \"=y,x,Yv\")\n         (unspec:V2SF\n-\t  [(match_operand:V2SF 1 \"register_operand\" \"0\")\n-\t   (match_operand:V2SF 2 \"nonimmediate_operand\" \"ym\")]\n+\t  [(match_operand:V2SF 1 \"register_operand\" \"0,0,Yv\")\n+\t   (match_operand:V2SF 2 \"register_mmxmem_operand\" \"ym,x,Yv\")]\n \t  IEEE_MAXMIN))]\n-  \"TARGET_3DNOW\"\n-  \"pf<ieee_maxmin>\\t{%2, %0|%0, %2}\"\n-  [(set_attr \"type\" \"mmxadd\")\n-   (set_attr \"prefix_extra\" \"1\")\n-   (set_attr \"mode\" \"V2SF\")])\n+  \"TARGET_3DNOW || TARGET_MMX_WITH_SSE\"\n+  \"@\n+   pf<ieee_maxmin>\\t{%2, %0|%0, %2}\n+   <ieee_maxmin>ps\\t{%2, %0|%0, %2}\n+   v<ieee_maxmin>ps\\t{%2, %1, %0|%0, %1, %2}\"\n+  [(set_attr \"isa\" \"*,sse2_noavx,avx\")\n+   (set_attr \"mmx_isa\" \"native,*,*\")\n+   (set_attr \"type\" \"mmxadd,sseadd,sseadd\")\n+   (set_attr \"btver2_sse_attr\" \"*,maxmin,maxmin\")\n+   (set_attr \"prefix_extra\" \"1,*,*\")\n+   (set_attr \"mode\" \"V2SF,V4SF,V4SF\")])\n \n (define_insn \"mmx_rcpv2sf2\"\n   [(set (match_operand:V2SF 0 \"register_operand\" \"=y\")"}, {"sha": "c35e084b366b0e3ebae93e3de0930847c1fbfbdb", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7c355156aa20eaec7401d7c66f6a6cfbe597abc2/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7c355156aa20eaec7401d7c66f6a6cfbe597abc2/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=7c355156aa20eaec7401d7c66f6a6cfbe597abc2", "patch": "@@ -1,5 +1,10 @@\n+2020-05-11  Uro\u0161 Bizjak  <ubizjak@gmail.com>\n+\n+\tPR target/95046\n+\t* gcc.target/i386/pr95046-1.c: New test.\n+\n 2020-05-11  Mark Eggleston  <markeggleston@gcc.gnu.org>\n-    \n+\n \tPR fortran/59107\n \t* gfortran.dg/pr59107.f90: New test.\n "}, {"sha": "f93d9e1a50770eb83a9f248aad6ceecdc72176c4", "filename": "gcc/testsuite/gcc.target/i386/pr95046-1.c", "status": "added", "additions": 51, "deletions": 0, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7c355156aa20eaec7401d7c66f6a6cfbe597abc2/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr95046-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7c355156aa20eaec7401d7c66f6a6cfbe597abc2/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr95046-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr95046-1.c?ref=7c355156aa20eaec7401d7c66f6a6cfbe597abc2", "patch": "@@ -0,0 +1,51 @@\n+/* PR target/94942 */\n+/* { dg-do compile { target { ! ia32 } } } */\n+/* { dg-options \"-O3 -ffast-math -msse2\" } */\n+\n+\n+float r[2], a[2], b[2];\n+\n+void\n+test_plus (void)\n+{\n+  for (int i = 0; i < 2; i++)\n+    r[i] = a[i] + b[i];\n+}\n+\n+/* { dg-final { scan-assembler \"addps\" } } */\n+\n+void\n+test_minus (void)\n+{\n+  for (int i = 0; i < 2; i++)\n+    r[i] = a[i] - b[i];\n+}\n+\n+/* { dg-final { scan-assembler \"subps\" } } */\n+\n+void\n+test_mult (void)\n+{\n+  for (int i = 0; i < 2; i++)\n+    r[i] = a[i] * b[i];\n+}\n+\n+/* { dg-final { scan-assembler \"mulps\" } } */\n+\n+void\n+test_min (void)\n+{\n+  for (int i = 0; i < 2; i++)\n+    r[i] = a[i] < b[i] ? a[i] : b[i];\n+}\n+\n+/* { dg-final { scan-assembler \"minps\" } } */\n+\n+void\n+test_max (void)\n+{\n+  for (int i = 0; i < 2; i++)\n+    r[i] = a[i] > b[i] ? a[i] : b[i];\n+}\n+\n+/* { dg-final { scan-assembler \"maxps\" } } */"}]}