{"sha": "5399d643680b153db318cd9ef38787774eac34c4", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTM5OWQ2NDM2ODBiMTUzZGIzMThjZDllZjM4Nzg3Nzc0ZWFjMzRjNA==", "commit": {"author": {"name": "James E Wilson", "email": "wilson@specifixinc.com", "date": "2004-03-10T06:02:55Z"}, "committer": {"name": "Jim Wilson", "email": "wilson@gcc.gnu.org", "date": "2004-03-10T06:02:55Z"}, "message": "New option -Wstrict-aliasing=2.\n\n\t* alias.c (alias_sets_might_conflict_p): New.\n\t* c-typeck.c (build_c_cast): Call it if warn_strict_aliasing > 1.\n\t* common.opt (Wstrict-aliasing=): New.\n\t* flags.h (warn_strict_aliasing): Change type to int.\n\t* opts.c (warn_strict_aliasing): Change type to int.\n\t(common_handle_option): Handle OPT_Wstrict_aliasing_.\n\t* tree.h (alias_sets_might_conflict_p): Declare it.\n\t* doc/invoke.tex (-Wstrict-aliasing=2): Document it.\n\nFrom-SVN: r79222", "tree": {"sha": "893bd1037263eb2e8912cc841d795b6695e442e7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/893bd1037263eb2e8912cc841d795b6695e442e7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5399d643680b153db318cd9ef38787774eac34c4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5399d643680b153db318cd9ef38787774eac34c4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5399d643680b153db318cd9ef38787774eac34c4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5399d643680b153db318cd9ef38787774eac34c4/comments", "author": null, "committer": null, "parents": [{"sha": "a4e9467d735cfdbcbe64902f9a3dd30c440c71fb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a4e9467d735cfdbcbe64902f9a3dd30c440c71fb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a4e9467d735cfdbcbe64902f9a3dd30c440c71fb"}], "stats": {"total": 58, "additions": 51, "deletions": 7}, "files": [{"sha": "6016aaaed542ab7f089f345d1fb1700738d12795", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5399d643680b153db318cd9ef38787774eac34c4/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5399d643680b153db318cd9ef38787774eac34c4/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=5399d643680b153db318cd9ef38787774eac34c4", "patch": "@@ -1,3 +1,14 @@\n+2004-03-09  James E Wilson  <wilson@specifixinc.com>\n+\n+\t* alias.c (alias_sets_might_conflict_p): New.\n+\t* c-typeck.c (build_c_cast): Call it if warn_strict_aliasing > 1.\n+\t* common.opt (Wstrict-aliasing=): New.\n+\t* flags.h (warn_strict_aliasing): Change type to int.\n+\t* opts.c (warn_strict_aliasing): Change type to int.\n+\t(common_handle_option): Handle OPT_Wstrict_aliasing_.\n+\t* tree.h (alias_sets_might_conflict_p): Declare it.\n+\t* doc/invoke.tex (-Wstrict-aliasing=2): Document it.\n+\n 2004-03-10  Roman Zippel  <zippel@linux-m68k.org>\n \n \tPR bootstrap/12371"}, {"sha": "30013ec7d6a80ac624c40e04b933493543ae1603", "filename": "gcc/alias.c", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5399d643680b153db318cd9ef38787774eac34c4/gcc%2Falias.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5399d643680b153db318cd9ef38787774eac34c4/gcc%2Falias.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Falias.c?ref=5399d643680b153db318cd9ef38787774eac34c4", "patch": "@@ -290,6 +290,19 @@ alias_sets_conflict_p (HOST_WIDE_INT set1, HOST_WIDE_INT set2)\n      child of the other.  Therefore, they cannot alias.  */\n   return 0;\n }\n+\n+/* Return 1 if the two specified alias sets might conflict, or if any subtype\n+   of these alias sets might conflict.  */\n+\n+int\n+alias_sets_might_conflict_p (HOST_WIDE_INT set1, HOST_WIDE_INT set2)\n+{\n+  if (set1 == 0 || set2 == 0 || set1 == set2)\n+    return 1;\n+\n+  return 0;\n+}\n+\n \f\n /* Return 1 if TYPE is a RECORD_TYPE, UNION_TYPE, or QUAL_UNION_TYPE and has\n    has any readonly fields.  If any of the fields have types that"}, {"sha": "f23fac78342e8f697e13b8e14f6822061fd78924", "filename": "gcc/c-typeck.c", "status": "modified", "additions": 11, "deletions": 4, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5399d643680b153db318cd9ef38787774eac34c4/gcc%2Fc-typeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5399d643680b153db318cd9ef38787774eac34c4/gcc%2Fc-typeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-typeck.c?ref=5399d643680b153db318cd9ef38787774eac34c4", "patch": "@@ -3027,10 +3027,17 @@ build_c_cast (tree type, tree expr)\n \t     if the cast breaks type based aliasing.  */\n \t  if (!COMPLETE_TYPE_P (TREE_TYPE (type)))\n \t    warning (\"type-punning to incomplete type might break strict-aliasing rules\");\n-\t  else if (!alias_sets_conflict_p\n-\t\t   (get_alias_set (TREE_TYPE (TREE_OPERAND (expr, 0))),\n-\t\t    get_alias_set (TREE_TYPE (type))))\n-\t    warning (\"dereferencing type-punned pointer will break strict-aliasing rules\");\n+\t  else\n+\t    {\n+\t      HOST_WIDE_INT set1 = get_alias_set (TREE_TYPE (TREE_OPERAND (expr, 0)));\n+\t      HOST_WIDE_INT set2 = get_alias_set (TREE_TYPE (type));\n+\n+\t      if (!alias_sets_conflict_p (set1, set2))\n+\t\twarning (\"dereferencing type-punned pointer will break strict-aliasing rules\");\n+\t      else if (warn_strict_aliasing > 1\n+\t\t       && !alias_sets_might_conflict_p (set1, set2))\n+\t\twarning (\"dereferencing type-punned pointer might break strict-aliasing rules\");\n+\t    }\n \t}\n \n       /* If pedantic, warn for conversions between function and object"}, {"sha": "f1a045316e4483bdb0fe74b3d87341a02e731e6b", "filename": "gcc/common.opt", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5399d643680b153db318cd9ef38787774eac34c4/gcc%2Fcommon.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5399d643680b153db318cd9ef38787774eac34c4/gcc%2Fcommon.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcommon.opt?ref=5399d643680b153db318cd9ef38787774eac34c4", "patch": "@@ -104,6 +104,10 @@ Wstrict-aliasing\n Common\n Warn about code which might break strict aliasing rules\n \n+Wstrict-aliasing=\n+Common Joined UInteger\n+Warn about code which might break strict aliasing rules\n+\n Wswitch\n Common\n Warn about enumerated switches, with no default, missing a case"}, {"sha": "0c9f183387f3922d5d082c1ad6b96ddd73c92117", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5399d643680b153db318cd9ef38787774eac34c4/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5399d643680b153db318cd9ef38787774eac34c4/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=5399d643680b153db318cd9ef38787774eac34c4", "patch": "@@ -226,7 +226,7 @@ in the following sections.\n -Wno-multichar  -Wnonnull  -Wpacked  -Wpadded @gol\n -Wparentheses  -Wpointer-arith  -Wredundant-decls @gol\n -Wreturn-type  -Wsequence-point  -Wshadow @gol\n--Wsign-compare  -Wstrict-aliasing @gol\n+-Wsign-compare  -Wstrict-aliasing -Wstrict-aliasing=2 @gol\n -Wswitch  -Wswitch-default  -Wswitch-enum @gol\n -Wsystem-headers  -Wtrigraphs  -Wundef  -Wuninitialized @gol\n -Wunknown-pragmas  -Wunreachable-code @gol\n@@ -2449,6 +2449,13 @@ compiler is using for optimization. The warning does not catch all\n cases, but does attempt to catch the more common pitfalls. It is\n included in @option{-Wall}.\n \n+@item -Wstrict-aliasing=2\n+@opindex Wstrict-aliasing=2\n+This option is only active when @option{-fstrict-aliasing} is active.\n+It warns about all code which might break the strict aliasing rules that the\n+compiler is using for optimization.  This warning catches all cases, but\n+it will also give a warning for some ambiguous cases that are safe.\n+\n @item -Wall\n @opindex Wall\n All of the above @samp{-W} options combined.  This enables all the"}, {"sha": "8a70fc31b781d3051a32a7ca3e1a7f9a112aa1ec", "filename": "gcc/flags.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5399d643680b153db318cd9ef38787774eac34c4/gcc%2Fflags.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5399d643680b153db318cd9ef38787774eac34c4/gcc%2Fflags.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fflags.h?ref=5399d643680b153db318cd9ef38787774eac34c4", "patch": "@@ -184,7 +184,7 @@ extern bool warn_deprecated_decl;\n /* Nonzero means warn about constructs which might not be strict\n    aliasing safe.  */\n \n-extern bool warn_strict_aliasing;\n+extern int warn_strict_aliasing;\n \n /* Nonzero if generating code to do profiling.  */\n "}, {"sha": "99d576a3af8a656808819660f4eb4b56073088f5", "filename": "gcc/opts.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5399d643680b153db318cd9ef38787774eac34c4/gcc%2Fopts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5399d643680b153db318cd9ef38787774eac34c4/gcc%2Fopts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fopts.c?ref=5399d643680b153db318cd9ef38787774eac34c4", "patch": "@@ -100,7 +100,7 @@ bool warn_shadow;\n \n /* Nonzero means warn about constructs which might not be\n    strict-aliasing safe.  */\n-bool warn_strict_aliasing;\n+int warn_strict_aliasing;\n \n /* True to warn if a switch on an enum, that does not have a default\n    case, fails to have a case for every enum value.  */\n@@ -747,6 +747,7 @@ common_handle_option (size_t scode, const char *arg,\n       break;\n \n     case OPT_Wstrict_aliasing:\n+    case OPT_Wstrict_aliasing_:\n       warn_strict_aliasing = value;\n       break;\n "}, {"sha": "6af6c662ff0516aaec55e130f5b4b07016c61a91", "filename": "gcc/tree.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5399d643680b153db318cd9ef38787774eac34c4/gcc%2Ftree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5399d643680b153db318cd9ef38787774eac34c4/gcc%2Ftree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.h?ref=5399d643680b153db318cd9ef38787774eac34c4", "patch": "@@ -2887,6 +2887,7 @@ extern tree strip_float_extensions (tree);\n extern void record_component_aliases (tree);\n extern HOST_WIDE_INT get_alias_set (tree);\n extern int alias_sets_conflict_p (HOST_WIDE_INT, HOST_WIDE_INT);\n+extern int alias_sets_might_conflict_p (HOST_WIDE_INT, HOST_WIDE_INT);\n extern int readonly_fields_p (tree);\n extern int objects_must_conflict_p (tree, tree);\n "}]}