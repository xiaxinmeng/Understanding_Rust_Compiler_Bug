{"sha": "4004afb38a53d7cc555dbd7bd2c1b05c1791d531", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDAwNGFmYjM4YTUzZDdjYzU1NWRiZDdiZDJjMWIwNWMxNzkxZDUzMQ==", "commit": {"author": {"name": "Paolo Carlini", "email": "paolo.carlini@oracle.com", "date": "2013-07-25T15:04:03Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2013-07-25T15:04:03Z"}, "message": "re PR c++/57981 (ICE in this code)\n\n/cp\n2013-07-25  Paolo Carlini  <paolo.carlini@oracle.com>\n\n\tPR c++/57981\n\t* decl.c (check_default_argument): Take a tsubst_flags_t parameter.\n\t(grokparms): Adjust.\n\t* parser.c (cp_parser_late_parse_one_default_arg): Likewise.\n\t* pt.c (tsubst_default_argument, tsubst_default_arguments): Take\n\ta tsubst_flags_t parameter.\n\t(tsubst_decl): Adjust.\n\t* call.c (convert_default_arg): Likewise.\n\t* cp-tree.h (check_default_argument, tsubst_default_argument):\n\tUpdate declarations.\n\n/testsuite\n2013-07-25  Paolo Carlini  <paolo.carlini@oracle.com>\n\n\tPR c++/57981\n\t* g++.dg/cpp0x/pr57981.C: New.\n\n/cp\n2013-07-25  Paolo Carlini  <paolo.carlini@oracle.com>\n\n\tPR c++/57880\n\t* parser.c (cp_parser_operator, case CPP_WSTRING, CPP_STRING16,\n\tCPP_STRING32, CPP_UTF8STRING, CPP_WSTRING_USERDEF,\n\tCPP_STRING16_USERDEF, CPP_STRING32_USERDEF, CPP_UTF8STRING_USERDEF):\n\tFix string_len management, tidy.\n\n/testsuite\n2013-07-25  Paolo Carlini  <paolo.carlini@oracle.com>\n\n\tPR c++/57880\n\t* g++.dg/cpp1y/udlit-empty-string-neg.C: New.\n\nFrom-SVN: r201245", "tree": {"sha": "22aacde1eed0277223702196c6f7d2af42ab40e9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/22aacde1eed0277223702196c6f7d2af42ab40e9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4004afb38a53d7cc555dbd7bd2c1b05c1791d531", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4004afb38a53d7cc555dbd7bd2c1b05c1791d531", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4004afb38a53d7cc555dbd7bd2c1b05c1791d531", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4004afb38a53d7cc555dbd7bd2c1b05c1791d531/comments", "author": null, "committer": null, "parents": [{"sha": "105164bb90473c48540764fb9676c0e81a1adf9b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/105164bb90473c48540764fb9676c0e81a1adf9b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/105164bb90473c48540764fb9676c0e81a1adf9b"}], "stats": {"total": 143, "additions": 112, "deletions": 31}, "files": [{"sha": "2669375b7f51c50287c8a677ef9dea6a6e8d8b78", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4004afb38a53d7cc555dbd7bd2c1b05c1791d531/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4004afb38a53d7cc555dbd7bd2c1b05c1791d531/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=4004afb38a53d7cc555dbd7bd2c1b05c1791d531", "patch": "@@ -1,3 +1,24 @@\n+2013-07-25  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+\tPR c++/57981\n+\t* decl.c (check_default_argument): Take a tsubst_flags_t parameter.\n+\t(grokparms): Adjust.\n+\t* parser.c (cp_parser_late_parse_one_default_arg): Likewise.\n+\t* pt.c (tsubst_default_argument, tsubst_default_arguments): Take\n+\ta tsubst_flags_t parameter.\n+\t(tsubst_decl): Adjust.\n+\t* call.c (convert_default_arg): Likewise.\n+\t* cp-tree.h (check_default_argument, tsubst_default_argument):\n+\tUpdate declarations.\n+\n+2013-07-25  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+\tPR c++/57880\n+\t* parser.c (cp_parser_operator, case CPP_WSTRING, CPP_STRING16,\n+\tCPP_STRING32, CPP_UTF8STRING, CPP_WSTRING_USERDEF,\n+\tCPP_STRING16_USERDEF, CPP_STRING32_USERDEF, CPP_UTF8STRING_USERDEF):\n+\tFix string_len management, tidy.\n+\n 2013-07-24  Paolo Carlini  <paolo.carlini@oracle.com>\n \n \tPR c++/57942"}, {"sha": "e8d526075a768cf7ab73ebfef46b4108a3bdae04", "filename": "gcc/cp/call.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4004afb38a53d7cc555dbd7bd2c1b05c1791d531/gcc%2Fcp%2Fcall.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4004afb38a53d7cc555dbd7bd2c1b05c1791d531/gcc%2Fcp%2Fcall.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcall.c?ref=4004afb38a53d7cc555dbd7bd2c1b05c1791d531", "patch": "@@ -6439,7 +6439,7 @@ convert_default_arg (tree type, tree arg, tree fn, int parmnum,\n   push_defarg_context (fn);\n \n   if (fn && DECL_TEMPLATE_INFO (fn))\n-    arg = tsubst_default_argument (fn, type, arg);\n+    arg = tsubst_default_argument (fn, type, arg, complain);\n \n   /* Due to:\n "}, {"sha": "200e78ad715d2f9f0be3875ecf73eb418f476512", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4004afb38a53d7cc555dbd7bd2c1b05c1791d531/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4004afb38a53d7cc555dbd7bd2c1b05c1791d531/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=4004afb38a53d7cc555dbd7bd2c1b05c1791d531", "patch": "@@ -5222,7 +5222,7 @@ extern tree static_fn_type\t\t\t(tree);\n extern void revert_static_member_fn\t\t(tree);\n extern void fixup_anonymous_aggr\t\t(tree);\n extern tree compute_array_index_type\t\t(tree, tree, tsubst_flags_t);\n-extern tree check_default_argument\t\t(tree, tree);\n+extern tree check_default_argument\t\t(tree, tree, tsubst_flags_t);\n typedef int (*walk_namespaces_fn)\t\t(tree, void *);\n extern int walk_namespaces\t\t\t(walk_namespaces_fn,\n \t\t\t\t\t\t void *);\n@@ -5504,7 +5504,8 @@ extern tree maybe_process_partial_specialization (tree);\n extern tree most_specialized_instantiation\t(tree);\n extern void print_candidates\t\t\t(tree);\n extern void instantiate_pending_templates\t(int);\n-extern tree tsubst_default_argument\t\t(tree, tree, tree);\n+extern tree tsubst_default_argument\t\t(tree, tree, tree,\n+\t\t\t\t\t\t tsubst_flags_t);\n extern tree tsubst (tree, tree, tsubst_flags_t, tree);\n extern tree tsubst_copy_and_build\t\t(tree, tree, tsubst_flags_t,\n \t\t\t\t\t\t tree, bool, bool);"}, {"sha": "7d6fe0de8c1e2c36a97c486f2d880eaab382c72e", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 12, "deletions": 7, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4004afb38a53d7cc555dbd7bd2c1b05c1791d531/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4004afb38a53d7cc555dbd7bd2c1b05c1791d531/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=4004afb38a53d7cc555dbd7bd2c1b05c1791d531", "patch": "@@ -10883,7 +10883,7 @@ local_variable_p_walkfn (tree *tp, int *walk_subtrees,\n    DECL, if there is no DECL available.  */\n \n tree\n-check_default_argument (tree decl, tree arg)\n+check_default_argument (tree decl, tree arg, tsubst_flags_t complain)\n {\n   tree var;\n   tree decl_type;\n@@ -10915,13 +10915,14 @@ check_default_argument (tree decl, tree arg)\n      A default argument expression is implicitly converted to the\n      parameter type.  */\n   ++cp_unevaluated_operand;\n-  perform_implicit_conversion_flags (decl_type, arg, tf_warning_or_error,\n+  perform_implicit_conversion_flags (decl_type, arg, complain,\n \t\t\t\t     LOOKUP_IMPLICIT);\n   --cp_unevaluated_operand;\n \n   if (warn_zero_as_null_pointer_constant\n       && TYPE_PTR_OR_PTRMEM_P (decl_type)\n       && null_ptr_cst_p (arg)\n+      && (complain & tf_warning)\n       && maybe_warn_zero_as_null_pointer_constant (arg, input_location))\n     return nullptr_node;\n \n@@ -10935,10 +10936,14 @@ check_default_argument (tree decl, tree arg)\n   var = cp_walk_tree_without_duplicates (&arg, local_variable_p_walkfn, NULL);\n   if (var)\n     {\n-      if (DECL_NAME (var) == this_identifier)\n-\tpermerror (input_location, \"default argument %qE uses %qD\", arg, var);\n-      else\n-\terror (\"default argument %qE uses local variable %qD\", arg, var);\n+      if (complain & tf_warning_or_error)\n+\t{\n+\t  if (DECL_NAME (var) == this_identifier)\n+\t    permerror (input_location, \"default argument %qE uses %qD\",\n+\t\t       arg, var);\n+\t  else\n+\t    error (\"default argument %qE uses local variable %qD\", arg, var);\n+\t}\n       return error_mark_node;\n     }\n \n@@ -11089,7 +11094,7 @@ grokparms (tree parmlist, tree *parms)\n \t  if (any_error)\n \t    init = NULL_TREE;\n \t  else if (init && !processing_template_decl)\n-\t    init = check_default_argument (decl, init);\n+\t    init = check_default_argument (decl, init, tf_warning_or_error);\n \t}\n \n       DECL_CHAIN (decl) = decls;"}, {"sha": "56a017fdb7ef5f8ea8023705ee5db542529d4441", "filename": "gcc/cp/parser.c", "status": "modified", "additions": 17, "deletions": 13, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4004afb38a53d7cc555dbd7bd2c1b05c1791d531/gcc%2Fcp%2Fparser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4004afb38a53d7cc555dbd7bd2c1b05c1791d531/gcc%2Fcp%2Fparser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparser.c?ref=4004afb38a53d7cc555dbd7bd2c1b05c1791d531", "patch": "@@ -12261,7 +12261,6 @@ cp_parser_operator (cp_parser* parser)\n   tree id = NULL_TREE;\n   cp_token *token;\n   bool bad_encoding_prefix = false;\n-  int string_len = 2;\n \n   /* Peek at the next token.  */\n   token = cp_lexer_peek_token (parser->lexer);\n@@ -12462,19 +12461,21 @@ cp_parser_operator (cp_parser* parser)\n       return ansi_opname (ARRAY_REF);\n \n     case CPP_WSTRING:\n-      string_len = 3;\n     case CPP_STRING16:\n     case CPP_STRING32:\n-      string_len = 5;\n     case CPP_UTF8STRING:\n-      string_len = 4;\n-      bad_encoding_prefix = true;\n+     bad_encoding_prefix = true;\n+      /* Fall through.  */\n+\n     case CPP_STRING:\n       if (cxx_dialect == cxx98)\n \tmaybe_warn_cpp0x (CPP0X_USER_DEFINED_LITERALS);\n       if (bad_encoding_prefix)\n-\terror (\"invalid encoding prefix in literal operator\");\n-      if (TREE_STRING_LENGTH (token->u.value) > string_len)\n+\t{\n+\t  error (\"invalid encoding prefix in literal operator\");\n+\t  return error_mark_node;\n+\t}\n+      if (TREE_STRING_LENGTH (token->u.value) > 2)\n \t{\n \t  error (\"expected empty string after %<operator%> keyword\");\n \t  return error_mark_node;\n@@ -12505,21 +12506,23 @@ cp_parser_operator (cp_parser* parser)\n \t}\n \n     case CPP_WSTRING_USERDEF:\n-      string_len = 3;\n     case CPP_STRING16_USERDEF:\n     case CPP_STRING32_USERDEF:\n-      string_len = 5;\n     case CPP_UTF8STRING_USERDEF:\n-      string_len = 4;\n       bad_encoding_prefix = true;\n+      /* Fall through.  */\n+\n     case CPP_STRING_USERDEF:\n       if (cxx_dialect == cxx98)\n \tmaybe_warn_cpp0x (CPP0X_USER_DEFINED_LITERALS);\n       if (bad_encoding_prefix)\n-\terror (\"invalid encoding prefix in literal operator\");\n+\t{\n+\t  error (\"invalid encoding prefix in literal operator\");\n+\t  return error_mark_node;\n+\t}\n       {\n \ttree string_tree = USERDEF_LITERAL_VALUE (token->u.value);\n-\tif (TREE_STRING_LENGTH (string_tree) > string_len)\n+\tif (TREE_STRING_LENGTH (string_tree) > 2)\n \t  {\n \t    error (\"expected empty string after %<operator%> keyword\");\n \t    return error_mark_node;\n@@ -22996,7 +22999,8 @@ cp_parser_late_parse_one_default_arg (cp_parser *parser, tree decl,\n       /* In a non-template class, check conversions now.  In a template,\n \t we'll wait and instantiate these as needed.  */\n       if (TREE_CODE (decl) == PARM_DECL)\n-\tparsed_arg = check_default_argument (parmtype, parsed_arg);\n+\tparsed_arg = check_default_argument (parmtype, parsed_arg,\n+\t\t\t\t\t     tf_warning_or_error);\n       else\n \t{\n \t  int flags = LOOKUP_IMPLICIT;"}, {"sha": "82c72dd96df610fa46d0076233a81d518b0d4c6a", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 10, "deletions": 8, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4004afb38a53d7cc555dbd7bd2c1b05c1791d531/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4004afb38a53d7cc555dbd7bd2c1b05c1791d531/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=4004afb38a53d7cc555dbd7bd2c1b05c1791d531", "patch": "@@ -184,7 +184,7 @@ static int coerce_template_template_parms (tree, tree, tsubst_flags_t,\n \t\t\t\t\t   tree, tree);\n static bool template_template_parm_bindings_ok_p (tree, tree);\n static int template_args_equal (tree, tree);\n-static void tsubst_default_arguments (tree);\n+static void tsubst_default_arguments (tree, tsubst_flags_t);\n static tree for_each_template_parm_r (tree *, int *, void *);\n static tree copy_default_args_to_explicit_spec_1 (tree, tree);\n static void copy_default_args_to_explicit_spec (tree);\n@@ -9875,7 +9875,7 @@ tsubst_aggr_type (tree t,\n    FN), which has the indicated TYPE.  */\n \n tree\n-tsubst_default_argument (tree fn, tree type, tree arg)\n+tsubst_default_argument (tree fn, tree type, tree arg, tsubst_flags_t complain)\n {\n   tree saved_class_ptr = NULL_TREE;\n   tree saved_class_ref = NULL_TREE;\n@@ -9915,7 +9915,7 @@ tsubst_default_argument (tree fn, tree type, tree arg)\n      stack.  */\n   ++function_depth;\n   arg = tsubst_expr (arg, DECL_TI_ARGS (fn),\n-\t\t     tf_warning_or_error, NULL_TREE,\n+\t\t     complain, NULL_TREE,\n \t\t     /*integral_constant_expression_p=*/false);\n   --function_depth;\n   pop_deferring_access_checks();\n@@ -9927,12 +9927,13 @@ tsubst_default_argument (tree fn, tree type, tree arg)\n       cp_function_chain->x_current_class_ref = saved_class_ref;\n     }\n \n-  if (errorcount+sorrycount > errs)\n+  if (errorcount+sorrycount > errs\n+      && (complain & tf_warning_or_error))\n     inform (input_location,\n \t    \"  when instantiating default argument for call to %D\", fn);\n \n   /* Make sure the default argument is reasonable.  */\n-  arg = check_default_argument (type, arg);\n+  arg = check_default_argument (type, arg, complain);\n \n   pop_access_scope (fn);\n \n@@ -9942,7 +9943,7 @@ tsubst_default_argument (tree fn, tree type, tree arg)\n /* Substitute into all the default arguments for FN.  */\n \n static void\n-tsubst_default_arguments (tree fn)\n+tsubst_default_arguments (tree fn, tsubst_flags_t complain)\n {\n   tree arg;\n   tree tmpl_args;\n@@ -9963,7 +9964,8 @@ tsubst_default_arguments (tree fn)\n     if (TREE_PURPOSE (arg))\n       TREE_PURPOSE (arg) = tsubst_default_argument (fn,\n \t\t\t\t\t\t    TREE_VALUE (arg),\n-\t\t\t\t\t\t    TREE_PURPOSE (arg));\n+\t\t\t\t\t\t    TREE_PURPOSE (arg),\n+\t\t\t\t\t\t    complain);\n }\n \n /* Substitute the ARGS into the T, which is a _DECL.  Return the\n@@ -10323,7 +10325,7 @@ tsubst_decl (tree t, tree args, tsubst_flags_t complain)\n \t    if (!member\n \t\t&& !PRIMARY_TEMPLATE_P (gen_tmpl)\n \t\t&& !uses_template_parms (argvec))\n-\t      tsubst_default_arguments (r);\n+\t      tsubst_default_arguments (r, complain);\n \t  }\n \telse\n \t  DECL_TEMPLATE_INFO (r) = NULL_TREE;"}, {"sha": "b47813e5dfb51c541579cb97e7c95b7cb84bc3f0", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4004afb38a53d7cc555dbd7bd2c1b05c1791d531/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4004afb38a53d7cc555dbd7bd2c1b05c1791d531/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=4004afb38a53d7cc555dbd7bd2c1b05c1791d531", "patch": "@@ -1,3 +1,13 @@\n+2013-07-25  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+\tPR c++/57981\n+\t* g++.dg/cpp0x/pr57981.C: New.\n+\n+2013-07-25  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+\tPR c++/57880\n+\t* g++.dg/cpp1y/udlit-empty-string-neg.C: New.\n+\n 2013-07-25  Vladimir Makarov  <vmakarov@redhat.com>\n \n \tPR rtl-optimization/57960"}, {"sha": "5ee1f0ed6ff9763c7997d0ae33ec7463a6354f47", "filename": "gcc/testsuite/g++.dg/cpp0x/pr57981.C", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4004afb38a53d7cc555dbd7bd2c1b05c1791d531/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fpr57981.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4004afb38a53d7cc555dbd7bd2c1b05c1791d531/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fpr57981.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fpr57981.C?ref=4004afb38a53d7cc555dbd7bd2c1b05c1791d531", "patch": "@@ -0,0 +1,17 @@\n+// { dg-options \"-std=c++11 -Wall -Wextra\" }\n+\n+template<class T>\n+void f(T t, void* = 0)  // { dg-warning \"unused parameter\" }\n+{\n+}\n+\n+template<class T>\n+auto g(T t) -> decltype(f(t))\n+{\n+  f(t);\n+}\n+\n+int main()\n+{\n+  g(0);\n+}"}, {"sha": "d0eed918a539996dab89cc833419904093e3c00e", "filename": "gcc/testsuite/g++.dg/cpp1y/udlit-empty-string-neg.C", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4004afb38a53d7cc555dbd7bd2c1b05c1791d531/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fudlit-empty-string-neg.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4004afb38a53d7cc555dbd7bd2c1b05c1791d531/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fudlit-empty-string-neg.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fudlit-empty-string-neg.C?ref=4004afb38a53d7cc555dbd7bd2c1b05c1791d531", "patch": "@@ -0,0 +1,21 @@\n+// { dg-options -std=c++1y }\n+\n+int\n+operator \"*\"_s(unsigned long long) // { dg-error \"expected empty string after 'operator'\" }\n+{ return 0; }\n+\n+int\n+operator L\"*\"_Ls(unsigned long long) // { dg-error \"invalid encoding prefix in literal operator\" }\n+{ return 0; }\n+\n+int\n+operator u\"*\"_s16(unsigned long long) // { dg-error \"invalid encoding prefix in literal operator\" }\n+{ return 0; }\n+\n+int\n+operator U\"*\"_s32(unsigned long long) // { dg-error \"invalid encoding prefix in literal operator\" }\n+{ return 0; }\n+\n+int\n+operator u8\"*\"_u8s(unsigned long long) // { dg-error \"invalid encoding prefix in literal operator\" }\n+{ return 0; }"}]}