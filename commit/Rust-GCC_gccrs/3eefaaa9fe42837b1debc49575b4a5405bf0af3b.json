{"sha": "3eefaaa9fe42837b1debc49575b4a5405bf0af3b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2VlZmFhYTlmZTQyODM3YjFkZWJjNDk1NzViNGE1NDA1YmYwYWYzYg==", "commit": {"author": {"name": "Bernd Edlinger", "email": "bernd.edlinger@hotmail.de", "date": "2019-08-30T10:38:37Z"}, "committer": {"name": "Bernd Edlinger", "email": "edlinger@gcc.gnu.org", "date": "2019-08-30T10:38:37Z"}, "message": "arm.md (unaligned_loaddi, [...]): New unspec insn patterns.\n\n2019-08-30  Bernd Edlinger  <bernd.edlinger@hotmail.de>\n\n        * config/arm/arm.md (unaligned_loaddi,\n        unaligned_storedi): New unspec insn patterns.\n        * config/arm/neon.md (unaligned_storev8qi): Likewise.\n        * config/arm/arm.c (gen_cpymem_ldrd_strd): Use unaligned_loaddi\n        and unaligned_storedi for 4-byte aligned memory.\n        (arm_block_set_aligned_vect): Use unaligned_storev8qi for\n        4-byte aligned memory.\n\nFrom-SVN: r275063", "tree": {"sha": "4a1679083c849ce6bccb64801bd4910aa7b79344", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4a1679083c849ce6bccb64801bd4910aa7b79344"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3eefaaa9fe42837b1debc49575b4a5405bf0af3b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3eefaaa9fe42837b1debc49575b4a5405bf0af3b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3eefaaa9fe42837b1debc49575b4a5405bf0af3b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3eefaaa9fe42837b1debc49575b4a5405bf0af3b/comments", "author": {"login": "bernd-edlinger", "id": 17638929, "node_id": "MDQ6VXNlcjE3NjM4OTI5", "avatar_url": "https://avatars.githubusercontent.com/u/17638929?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bernd-edlinger", "html_url": "https://github.com/bernd-edlinger", "followers_url": "https://api.github.com/users/bernd-edlinger/followers", "following_url": "https://api.github.com/users/bernd-edlinger/following{/other_user}", "gists_url": "https://api.github.com/users/bernd-edlinger/gists{/gist_id}", "starred_url": "https://api.github.com/users/bernd-edlinger/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bernd-edlinger/subscriptions", "organizations_url": "https://api.github.com/users/bernd-edlinger/orgs", "repos_url": "https://api.github.com/users/bernd-edlinger/repos", "events_url": "https://api.github.com/users/bernd-edlinger/events{/privacy}", "received_events_url": "https://api.github.com/users/bernd-edlinger/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "bb4d170d7b43be4b28ef20978ab2b453f6f2c55d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bb4d170d7b43be4b28ef20978ab2b453f6f2c55d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bb4d170d7b43be4b28ef20978ab2b453f6f2c55d"}], "stats": {"total": 61, "additions": 55, "deletions": 6}, "files": [{"sha": "f902b554286d307337834153226cd9181b17c1e7", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3eefaaa9fe42837b1debc49575b4a5405bf0af3b/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3eefaaa9fe42837b1debc49575b4a5405bf0af3b/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=3eefaaa9fe42837b1debc49575b4a5405bf0af3b", "patch": "@@ -1,3 +1,13 @@\n+2019-08-30  Bernd Edlinger  <bernd.edlinger@hotmail.de>\n+\n+\t* config/arm/arm.md (unaligned_loaddi,\n+\tunaligned_storedi): New unspec insn patterns.\n+\t* config/arm/neon.md (unaligned_storev8qi): Likewise.\n+\t* config/arm/arm.c (gen_cpymem_ldrd_strd): Use unaligned_loaddi\n+\tand unaligned_storedi for 4-byte aligned memory.\n+\t(arm_block_set_aligned_vect): Use unaligned_storev8qi for\n+\t4-byte aligned memory.\n+\n 2019-08-30  Martin Jambor  <mjambor@suse.cz>\n \n \ttree-optimization/91579"}, {"sha": "eb8bf13414fdf5f411deed9110cc28921153f7d4", "filename": "gcc/config/arm/arm.c", "status": "modified", "additions": 13, "deletions": 6, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3eefaaa9fe42837b1debc49575b4a5405bf0af3b/gcc%2Fconfig%2Farm%2Farm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3eefaaa9fe42837b1debc49575b4a5405bf0af3b/gcc%2Fconfig%2Farm%2Farm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.c?ref=3eefaaa9fe42837b1debc49575b4a5405bf0af3b", "patch": "@@ -14578,17 +14578,21 @@ gen_cpymem_ldrd_strd (rtx *operands)\n \t  low_reg = gen_lowpart (SImode, reg0);\n \t  hi_reg = gen_highpart_mode (SImode, DImode, reg0);\n \t}\n-      if (src_aligned)\n-        emit_move_insn (reg0, src);\n+      if (MEM_ALIGN (src) >= 2 * BITS_PER_WORD)\n+\temit_move_insn (reg0, src);\n+      else if (src_aligned)\n+\temit_insn (gen_unaligned_loaddi (reg0, src));\n       else\n \t{\n \t  emit_insn (gen_unaligned_loadsi (low_reg, src));\n \t  src = next_consecutive_mem (src);\n \t  emit_insn (gen_unaligned_loadsi (hi_reg, src));\n \t}\n \n-      if (dst_aligned)\n-        emit_move_insn (dst, reg0);\n+      if (MEM_ALIGN (dst) >= 2 * BITS_PER_WORD)\n+\temit_move_insn (dst, reg0);\n+      else if (dst_aligned)\n+\temit_insn (gen_unaligned_storedi (dst, reg0));\n       else\n \t{\n \t  emit_insn (gen_unaligned_storesi (dst, low_reg));\n@@ -30197,7 +30201,10 @@ arm_block_set_aligned_vect (rtx dstbase,\n     {\n       addr = plus_constant (Pmode, dst, i);\n       mem = adjust_automodify_address (dstbase, mode, addr, offset + i);\n-      emit_move_insn (mem, reg);\n+      if (MEM_ALIGN (mem) >= 2 * BITS_PER_WORD)\n+\temit_move_insn (mem, reg);\n+      else\n+\temit_insn (gen_unaligned_storev8qi (mem, reg));\n     }\n \n   /* Handle single word leftover by shifting 4 bytes back.  We can\n@@ -30211,7 +30218,7 @@ arm_block_set_aligned_vect (rtx dstbase,\n       if (align > UNITS_PER_WORD)\n \tset_mem_align (mem, BITS_PER_UNIT * UNITS_PER_WORD);\n \n-      emit_move_insn (mem, reg);\n+      emit_insn (gen_unaligned_storev8qi (mem, reg));\n     }\n   /* Handle (0, 4), (4, 8) bytes leftover by shifting bytes back.\n      We have to use unaligned access for this case.  */"}, {"sha": "e49e0d579c92e0b9452ac1cb8a41035fcd7fff4c", "filename": "gcc/config/arm/arm.md", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3eefaaa9fe42837b1debc49575b4a5405bf0af3b/gcc%2Fconfig%2Farm%2Farm.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3eefaaa9fe42837b1debc49575b4a5405bf0af3b/gcc%2Fconfig%2Farm%2Farm.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.md?ref=3eefaaa9fe42837b1debc49575b4a5405bf0af3b", "patch": "@@ -3963,6 +3963,17 @@\n \n ; ARMv6+ unaligned load/store instructions (used for packed structure accesses).\n \n+(define_insn \"unaligned_loaddi\"\n+  [(set (match_operand:DI 0 \"s_register_operand\" \"=r\")\n+\t(unspec:DI [(match_operand:DI 1 \"memory_operand\" \"m\")]\n+\t\t   UNSPEC_UNALIGNED_LOAD))]\n+  \"TARGET_32BIT && TARGET_LDRD\"\n+  \"*\n+  return output_move_double (operands, true, NULL);\n+  \"\n+  [(set_attr \"length\" \"8\")\n+   (set_attr \"type\" \"load_8\")])\n+\n (define_insn \"unaligned_loadsi\"\n   [(set (match_operand:SI 0 \"s_register_operand\" \"=l,l,r\")\n \t(unspec:SI [(match_operand:SI 1 \"memory_operand\" \"m,Uw,m\")]\n@@ -4008,6 +4019,17 @@\n    (set_attr \"predicable_short_it\" \"no,yes,no\")\n    (set_attr \"type\" \"load_byte\")])\n \n+(define_insn \"unaligned_storedi\"\n+  [(set (match_operand:DI 0 \"memory_operand\" \"=m\")\n+\t(unspec:DI [(match_operand:DI 1 \"s_register_operand\" \"r\")]\n+\t\t   UNSPEC_UNALIGNED_STORE))]\n+  \"TARGET_32BIT && TARGET_LDRD\"\n+  \"*\n+  return output_move_double (operands, true, NULL);\n+  \"\n+  [(set_attr \"length\" \"8\")\n+   (set_attr \"type\" \"store_8\")])\n+\n (define_insn \"unaligned_storesi\"\n   [(set (match_operand:SI 0 \"memory_operand\" \"=m,Uw,m\")\n \t(unspec:SI [(match_operand:SI 1 \"s_register_operand\" \"l,l,r\")]"}, {"sha": "6a0ee28efc9aa9f1fba7b5ae031564f40aa095fe", "filename": "gcc/config/arm/neon.md", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3eefaaa9fe42837b1debc49575b4a5405bf0af3b/gcc%2Fconfig%2Farm%2Fneon.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3eefaaa9fe42837b1debc49575b4a5405bf0af3b/gcc%2Fconfig%2Farm%2Fneon.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Fneon.md?ref=3eefaaa9fe42837b1debc49575b4a5405bf0af3b", "patch": "@@ -23,6 +23,16 @@\n ;; type attribute definitions.\n (define_attr \"vqh_mnem\" \"vadd,vmin,vmax\" (const_string \"vadd\"))\n \n+(define_insn \"unaligned_storev8qi\"\n+  [(set (match_operand:V8QI 0 \"memory_operand\" \"=Un\")\n+\t(unspec:V8QI [(match_operand:V8QI 1 \"s_register_operand\" \"w\")]\n+\t\t     UNSPEC_UNALIGNED_STORE))]\n+  \"TARGET_NEON\"\n+  \"*\n+  return output_move_neon (operands);\n+  \"\n+  [(set_attr \"type\" \"neon_store1_1reg\")])\n+\n (define_insn \"*neon_mov<mode>\"\n   [(set (match_operand:VDX 0 \"nonimmediate_operand\"\n \t  \"=w,Un,w, w, w,  ?r,?w,?r, ?Us,*r\")"}]}