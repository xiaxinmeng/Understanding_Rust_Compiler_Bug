{"sha": "c1b3d827832f883e0634b18c88eb2bbde335aa42", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzFiM2Q4Mjc4MzJmODgzZTA2MzRiMThjODhlYjJiYmRlMzM1YWE0Mg==", "commit": {"author": {"name": "Richard Sandiford", "email": "richard.sandiford@arm.com", "date": "2019-07-30T10:59:29Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2019-07-30T10:59:29Z"}, "message": "Handle IFN_COND_MUL in tree-ssa-math-opts.c\n\nThis patch extends the FMA handling in tree-ssa-math-opts.c so\nthat it can cope with conditional multiplications as well as\nunconditional multiplications.  The addition or subtraction must then\nhave the same condition as the multiplication (at least for now).\n\nE.g. we can currently fold:\n\n  (IFN_COND_ADD cond (mul x y) z fallback)\n    -> (IFN_COND_FMA cond x y z fallback)\n\nThis patch also allows:\n\n  (IFN_COND_ADD cond (IFN_COND_MUL cond x y <whatever>) z fallback)\n    -> (IFN_COND_FMA cond x y z fallback)\n\n2019-07-30  Richard Sandiford  <richard.sandiford@arm.com>\n\ngcc/\n\t* tree-ssa-math-opts.c (convert_mult_to_fma): Add a mul_cond\n\tparameter.  When nonnull, make sure that the addition or subtraction\n\thas the same condition.\n\t(math_opts_dom_walker::after_dom_children): Try convert_mult_to_fma\n\tfor CFN_COND_MUL too.\n\ngcc/testsuite/\n\t* gcc.dg/vect/vect-cond-arith-7.c: New test.\n\nFrom-SVN: r273905", "tree": {"sha": "74af98cf646a4ffe37dee618dc42f2a01020ce7b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/74af98cf646a4ffe37dee618dc42f2a01020ce7b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c1b3d827832f883e0634b18c88eb2bbde335aa42", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c1b3d827832f883e0634b18c88eb2bbde335aa42", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c1b3d827832f883e0634b18c88eb2bbde335aa42", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c1b3d827832f883e0634b18c88eb2bbde335aa42/comments", "author": {"login": "rsandifo-arm", "id": 28043039, "node_id": "MDQ6VXNlcjI4MDQzMDM5", "avatar_url": "https://avatars.githubusercontent.com/u/28043039?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo-arm", "html_url": "https://github.com/rsandifo-arm", "followers_url": "https://api.github.com/users/rsandifo-arm/followers", "following_url": "https://api.github.com/users/rsandifo-arm/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo-arm/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo-arm/orgs", "repos_url": "https://api.github.com/users/rsandifo-arm/repos", "events_url": "https://api.github.com/users/rsandifo-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo-arm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "8c955a4b9ca99dc1557dd4547068abf7a0838c8f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8c955a4b9ca99dc1557dd4547068abf7a0838c8f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8c955a4b9ca99dc1557dd4547068abf7a0838c8f"}], "stats": {"total": 143, "additions": 115, "deletions": 28}, "files": [{"sha": "2ad6a66df73e07aee48fb1ee7b580bb1e143314e", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c1b3d827832f883e0634b18c88eb2bbde335aa42/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c1b3d827832f883e0634b18c88eb2bbde335aa42/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=c1b3d827832f883e0634b18c88eb2bbde335aa42", "patch": "@@ -1,3 +1,11 @@\n+2019-07-30  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\t* tree-ssa-math-opts.c (convert_mult_to_fma): Add a mul_cond\n+\tparameter.  When nonnull, make sure that the addition or subtraction\n+\thas the same condition.\n+\t(math_opts_dom_walker::after_dom_children): Try convert_mult_to_fma\n+\tfor CFN_COND_MUL too.\n+\n 2019-07-30  Richard Biener  <rguenther@suse.de>\n \n \tPR tree-optimization/91291"}, {"sha": "5a856986db4860eabefa322a08b50bed89465edc", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c1b3d827832f883e0634b18c88eb2bbde335aa42/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c1b3d827832f883e0634b18c88eb2bbde335aa42/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=c1b3d827832f883e0634b18c88eb2bbde335aa42", "patch": "@@ -1,3 +1,7 @@\n+2019-07-30  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\t* gcc.dg/vect/vect-cond-arith-7.c: New test.\n+\n 2019-07-30  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR middle-end/91282"}, {"sha": "739b98f59aece34b73ed4762c2eeda2512834539", "filename": "gcc/testsuite/gcc.dg/vect/vect-cond-arith-7.c", "status": "added", "additions": 60, "deletions": 0, "changes": 60, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c1b3d827832f883e0634b18c88eb2bbde335aa42/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-cond-arith-7.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c1b3d827832f883e0634b18c88eb2bbde335aa42/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-cond-arith-7.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-cond-arith-7.c?ref=c1b3d827832f883e0634b18c88eb2bbde335aa42", "patch": "@@ -0,0 +1,60 @@\n+/* { dg-require-effective-target scalar_all_fma } */\n+/* { dg-additional-options \"-fdump-tree-optimized -ffp-contract=fast\" } */\n+\n+#include \"tree-vect.h\"\n+\n+#define N (VECTOR_BITS * 11 / 64 + 3)\n+\n+#define DEF(INV)\t\t\t\t\t\\\n+  void __attribute__ ((noipa))\t\t\t\t\\\n+  f_##INV (double *restrict a, double *restrict b,\t\\\n+\t   double *restrict c, double *restrict d)\t\\\n+  {\t\t\t\t\t\t\t\\\n+    for (int i = 0; i < N; ++i)\t\t\t\t\\\n+      {\t\t\t\t\t\t\t\\\n+\tdouble mb = (INV & 1 ? -b[i] : b[i]);\t\t\\\n+\tdouble mc = c[i];\t\t\t\t\\\n+\tdouble md = (INV & 2 ? -d[i] : d[i]);\t\t\\\n+\ta[i] = b[i] < 10 ? mb * mc + md : 10.0;\t\t\\\n+      }\t\t\t\t\t\t\t\\\n+  }\n+\n+#define TEST(INV)\t\t\t\t\t\\\n+  {\t\t\t\t\t\t\t\\\n+    f_##INV (a, b, c, d);\t\t\t\t\\\n+    for (int i = 0; i < N; ++i)\t\t\t\t\\\n+      {\t\t\t\t\t\t\t\\\n+\tdouble mb = (INV & 1 ? -b[i] : b[i]);\t\t\\\n+\tdouble mc = c[i];\t\t\t\t\\\n+\tdouble md = (INV & 2 ? -d[i] : d[i]);\t\t\\\n+\tdouble fma = __builtin_fma (mb, mc, md);\t\\\n+\tif (a[i] != (i % 17 < 10 ? fma : 10.0))\t\t\\\n+\t  __builtin_abort ();\t\t\t\t\\\n+\tasm volatile (\"\" ::: \"memory\");\t\t\t\\\n+      }\t\t\t\t\t\t\t\\\n+  }\n+\n+#define FOR_EACH_INV(T) \\\n+  T (0) T (1) T (2) T (3)\n+\n+FOR_EACH_INV (DEF)\n+\n+int\n+main (void)\n+{\n+  double a[N], b[N], c[N], d[N];\n+  for (int i = 0; i < N; ++i)\n+    {\n+      b[i] = i % 17;\n+      c[i] = i % 9 + 11;\n+      d[i] = i % 13 + 14;\n+      asm volatile (\"\" ::: \"memory\");\n+    }\n+  FOR_EACH_INV (TEST)\n+  return 0;\n+}\n+\n+/* { dg-final { scan-tree-dump-times { = \\.COND_FMA } 1 \"optimized\" { target vect_double_cond_arith } } } */\n+/* { dg-final { scan-tree-dump-times { = \\.COND_FMS } 1 \"optimized\" { target vect_double_cond_arith } } } */\n+/* { dg-final { scan-tree-dump-times { = \\.COND_FNMA } 1 \"optimized\" { target vect_double_cond_arith } } } */\n+/* { dg-final { scan-tree-dump-times { = \\.COND_FNMS } 1 \"optimized\" { target vect_double_cond_arith } } } */"}, {"sha": "3e0b238af8e80e1d2d39c16b7a2dccf3d9c5eec6", "filename": "gcc/tree-ssa-math-opts.c", "status": "modified", "additions": 43, "deletions": 28, "changes": 71, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c1b3d827832f883e0634b18c88eb2bbde335aa42/gcc%2Ftree-ssa-math-opts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c1b3d827832f883e0634b18c88eb2bbde335aa42/gcc%2Ftree-ssa-math-opts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-math-opts.c?ref=c1b3d827832f883e0634b18c88eb2bbde335aa42", "patch": "@@ -3044,6 +3044,8 @@ last_fma_candidate_feeds_initial_phi (fma_deferring_state *state,\n /* Combine the multiplication at MUL_STMT with operands MULOP1 and MULOP2\n    with uses in additions and subtractions to form fused multiply-add\n    operations.  Returns true if successful and MUL_STMT should be removed.\n+   If MUL_COND is nonnull, the multiplication in MUL_STMT is conditional\n+   on MUL_COND, otherwise it is unconditional.\n \n    If STATE indicates that we are deferring FMA transformation, that means\n    that we do not produce FMAs for basic blocks which look like:\n@@ -3060,7 +3062,7 @@ last_fma_candidate_feeds_initial_phi (fma_deferring_state *state,\n \n static bool\n convert_mult_to_fma (gimple *mul_stmt, tree op1, tree op2,\n-\t\t     fma_deferring_state *state)\n+\t\t     fma_deferring_state *state, tree mul_cond = NULL_TREE)\n {\n   tree mul_result = gimple_get_lhs (mul_stmt);\n   tree type = TREE_TYPE (mul_result);\n@@ -3174,6 +3176,9 @@ convert_mult_to_fma (gimple *mul_stmt, tree op1, tree op2,\n \t  return false;\n \t}\n \n+      if (mul_cond && cond != mul_cond)\n+\treturn false;\n+\n       if (cond)\n \t{\n \t  if (cond == result || else_value == result)\n@@ -3785,38 +3790,48 @@ math_opts_dom_walker::after_dom_children (basic_block bb)\n \t}\n       else if (is_gimple_call (stmt))\n \t{\n-\t  tree fndecl = gimple_call_fndecl (stmt);\n-\t  if (fndecl && gimple_call_builtin_p (stmt, BUILT_IN_NORMAL))\n+\t  switch (gimple_call_combined_fn (stmt))\n \t    {\n-\t      switch (DECL_FUNCTION_CODE (fndecl))\n+\t    CASE_CFN_POW:\n+\t      if (gimple_call_lhs (stmt)\n+\t\t  && TREE_CODE (gimple_call_arg (stmt, 1)) == REAL_CST\n+\t\t  && real_equal (&TREE_REAL_CST (gimple_call_arg (stmt, 1)),\n+\t\t\t\t &dconst2)\n+\t\t  && convert_mult_to_fma (stmt,\n+\t\t\t\t\t  gimple_call_arg (stmt, 0),\n+\t\t\t\t\t  gimple_call_arg (stmt, 0),\n+\t\t\t\t\t  &fma_state))\n \t\t{\n-\t\tcase BUILT_IN_POWF:\n-\t\tcase BUILT_IN_POW:\n-\t\tcase BUILT_IN_POWL:\n-\t\t  if (gimple_call_lhs (stmt)\n-\t\t      && TREE_CODE (gimple_call_arg (stmt, 1)) == REAL_CST\n-\t\t      && real_equal\n-\t\t      (&TREE_REAL_CST (gimple_call_arg (stmt, 1)),\n-\t\t       &dconst2)\n-\t\t      && convert_mult_to_fma (stmt,\n-\t\t\t\t\t      gimple_call_arg (stmt, 0),\n-\t\t\t\t\t      gimple_call_arg (stmt, 0),\n-\t\t\t\t\t      &fma_state))\n-\t\t    {\n-\t\t      unlink_stmt_vdef (stmt);\n-\t\t      if (gsi_remove (&gsi, true)\n-\t\t\t  && gimple_purge_dead_eh_edges (bb))\n-\t\t\t*m_cfg_changed_p = true;\n-\t\t      release_defs (stmt);\n-\t\t      continue;\n-\t\t    }\n-\t\t  break;\n+\t\t  unlink_stmt_vdef (stmt);\n+\t\t  if (gsi_remove (&gsi, true)\n+\t\t      && gimple_purge_dead_eh_edges (bb))\n+\t\t    *m_cfg_changed_p = true;\n+\t\t  release_defs (stmt);\n+\t\t  continue;\n+\t\t}\n+\t      break;\n \n-\t\tdefault:;\n+\t    case CFN_COND_MUL:\n+\t      if (convert_mult_to_fma (stmt,\n+\t\t\t\t       gimple_call_arg (stmt, 1),\n+\t\t\t\t       gimple_call_arg (stmt, 2),\n+\t\t\t\t       &fma_state,\n+\t\t\t\t       gimple_call_arg (stmt, 0)))\n+\n+\t\t{\n+\t\t  gsi_remove (&gsi, true);\n+\t\t  release_defs (stmt);\n+\t\t  continue;\n \t\t}\n+\t      break;\n+\n+\t    case CFN_LAST:\n+\t      cancel_fma_deferring (&fma_state);\n+\t      break;\n+\n+\t    default:\n+\t      break;\n \t    }\n-\t  else\n-\t    cancel_fma_deferring (&fma_state);\n \t}\n       gsi_next (&gsi);\n     }"}]}