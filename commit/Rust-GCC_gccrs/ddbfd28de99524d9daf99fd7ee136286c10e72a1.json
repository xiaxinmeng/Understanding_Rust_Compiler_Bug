{"sha": "ddbfd28de99524d9daf99fd7ee136286c10e72a1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZGRiZmQyOGRlOTk1MjRkOWRhZjk5ZmQ3ZWUxMzYyODZjMTBlNzJhMQ==", "commit": {"author": {"name": "Geoffrey Keating", "email": "geoffk@apple.com", "date": "2007-06-28T19:31:45Z"}, "committer": {"name": "Geoffrey Keating", "email": "geoffk@gcc.gnu.org", "date": "2007-06-28T19:31:45Z"}, "message": "Index: gcc/ChangeLog\n2007-06-21  Geoffrey Keating  <geoffk@apple.com>\n\n\t* doc/invoke.texi (C++ Dialect Options): Document\n\tfvisibility-ms-compat.\n\t* c.opt (fvisibility-ms-compat): New.\n\nIndex: gcc/cp/ChangeLog\n2007-06-21  Geoffrey Keating  <geoffk@apple.com>\n\n\t* decl2.c (determine_visibility): Implement\n\tflag_visibility_ms_compat effect on type info.\n\t* decl.c (cxx_init_decl_processing): Implement\n\tglobal effect of flag_visibility_ms_compat.\n\nIndex: gcc/testsuite/ChangeLog\n2007-06-26  Geoffrey Keating  <geoffk@apple.com>\n\n\t* g++.dg/ext/visibility/ms-compat-1.C: New.\n\nFrom-SVN: r126088", "tree": {"sha": "7c4b9efdf087040edf485f9a4ade49bcd415ba7f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7c4b9efdf087040edf485f9a4ade49bcd415ba7f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ddbfd28de99524d9daf99fd7ee136286c10e72a1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ddbfd28de99524d9daf99fd7ee136286c10e72a1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ddbfd28de99524d9daf99fd7ee136286c10e72a1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ddbfd28de99524d9daf99fd7ee136286c10e72a1/comments", "author": {"login": "geoffk01", "id": 31905243, "node_id": "MDQ6VXNlcjMxOTA1MjQz", "avatar_url": "https://avatars.githubusercontent.com/u/31905243?v=4", "gravatar_id": "", "url": "https://api.github.com/users/geoffk01", "html_url": "https://github.com/geoffk01", "followers_url": "https://api.github.com/users/geoffk01/followers", "following_url": "https://api.github.com/users/geoffk01/following{/other_user}", "gists_url": "https://api.github.com/users/geoffk01/gists{/gist_id}", "starred_url": "https://api.github.com/users/geoffk01/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/geoffk01/subscriptions", "organizations_url": "https://api.github.com/users/geoffk01/orgs", "repos_url": "https://api.github.com/users/geoffk01/repos", "events_url": "https://api.github.com/users/geoffk01/events{/privacy}", "received_events_url": "https://api.github.com/users/geoffk01/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "b134d5eb9704caee9dee00215b03109886c8c473", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b134d5eb9704caee9dee00215b03109886c8c473", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b134d5eb9704caee9dee00215b03109886c8c473"}], "stats": {"total": 100, "additions": 100, "deletions": 0}, "files": [{"sha": "638d8fb777db37df1826f83d7670405583deb176", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ddbfd28de99524d9daf99fd7ee136286c10e72a1/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ddbfd28de99524d9daf99fd7ee136286c10e72a1/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=ddbfd28de99524d9daf99fd7ee136286c10e72a1", "patch": "@@ -1,3 +1,9 @@\n+2007-06-28  Geoffrey Keating  <geoffk@apple.com>\n+\n+\t* doc/invoke.texi (C++ Dialect Options): Document\n+\tfvisibility-ms-compat.\n+\t* c.opt (fvisibility-ms-compat): New.\n+\n 2007-06-28  Andrew Pinski  <andrew_pinski@playstation.sony.com>\n \n \tPR tree-opt/32417"}, {"sha": "fc19174442aa3b4dc67a59ddce3f99e281922ca6", "filename": "gcc/c.opt", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ddbfd28de99524d9daf99fd7ee136286c10e72a1/gcc%2Fc.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ddbfd28de99524d9daf99fd7ee136286c10e72a1/gcc%2Fc.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc.opt?ref=ddbfd28de99524d9daf99fd7ee136286c10e72a1", "patch": "@@ -767,6 +767,10 @@ fvisibility-inlines-hidden\n C++ ObjC++\n Marks all inlined methods as having hidden visibility\n \n+fvisibility-ms-compat\n+C++ ObjC++ Var(flag_visibility_ms_compat)\n+Changes visibility to match Microsoft Visual Studio by default\n+\n fvtable-gc\n C++ ObjC++\n Discard unused virtual functions"}, {"sha": "b4dce8d9918ee2a667597ac2f98276822f6d9e24", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ddbfd28de99524d9daf99fd7ee136286c10e72a1/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ddbfd28de99524d9daf99fd7ee136286c10e72a1/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=ddbfd28de99524d9daf99fd7ee136286c10e72a1", "patch": "@@ -1,3 +1,10 @@\n+2007-06-28  Geoffrey Keating  <geoffk@apple.com>\n+\n+\t* decl2.c (determine_visibility): Implement\n+\tflag_visibility_ms_compat effect on type info.\n+\t* decl.c (cxx_init_decl_processing): Implement\n+\tglobal effect of flag_visibility_ms_compat.\n+\n 2007-06-28  Geoffrey Keating  <geoffk@apple.com>\n \n \t* decl2.c (start_objects): Mark constructor-runnning function"}, {"sha": "8f9db1eef8988148bc037a16ecc588205f2f6fd6", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ddbfd28de99524d9daf99fd7ee136286c10e72a1/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ddbfd28de99524d9daf99fd7ee136286c10e72a1/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=ddbfd28de99524d9daf99fd7ee136286c10e72a1", "patch": "@@ -3179,6 +3179,9 @@ cxx_init_decl_processing (void)\n \n   current_lang_name = NULL_TREE;\n \n+  if (flag_visibility_ms_compat)\n+    default_visibility = VISIBILITY_HIDDEN;\n+\n   /* Force minimum function alignment if using the least significant\n      bit of function pointers to store the virtual bit.  */\n   if (TARGET_PTRMEMFUNC_VBIT_LOCATION == ptrmemfunc_vbit_in_pfn"}, {"sha": "a44c46d037e75773dfe469d12b778dc867d40779", "filename": "gcc/cp/decl2.c", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ddbfd28de99524d9daf99fd7ee136286c10e72a1/gcc%2Fcp%2Fdecl2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ddbfd28de99524d9daf99fd7ee136286c10e72a1/gcc%2Fcp%2Fdecl2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl2.c?ref=ddbfd28de99524d9daf99fd7ee136286c10e72a1", "patch": "@@ -1716,6 +1716,19 @@ determine_visibility (tree decl)\n \t     but have no TEMPLATE_INFO, so don't try to check it.  */\n \t  use_template = 0;\n \t}\n+      else if (TREE_CODE (decl) == VAR_DECL && DECL_TINFO_P (decl)\n+\t       && flag_visibility_ms_compat)\n+\t{\n+\t  /* Under -fvisibility-ms-compat, types are visible by default,\n+\t     even though their contents aren't.  */\n+\t  tree underlying_type = TREE_TYPE (DECL_NAME (decl));\n+\t  int underlying_vis = type_visibility (underlying_type);\n+\t  if (underlying_vis == VISIBILITY_ANON\n+\t      || CLASSTYPE_VISIBILITY_SPECIFIED (underlying_type))\n+\t    constrain_visibility (decl, underlying_vis);\n+\t  else\n+\t    DECL_VISIBILITY (decl) = VISIBILITY_DEFAULT;\n+\t}\n       else if (TREE_CODE (decl) == VAR_DECL && DECL_TINFO_P (decl))\n \t{\n \t  /* tinfo visibility is based on the type it's for.  */"}, {"sha": "47752e7eb4cf9fd0933c8537108731458b90c63c", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ddbfd28de99524d9daf99fd7ee136286c10e72a1/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ddbfd28de99524d9daf99fd7ee136286c10e72a1/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=ddbfd28de99524d9daf99fd7ee136286c10e72a1", "patch": "@@ -191,6 +191,7 @@ in the following sections.\n -frepo  -fno-rtti  -fstats  -ftemplate-depth-@var{n} @gol\n -fno-threadsafe-statics -fuse-cxa-atexit  -fno-weak  -nostdinc++ @gol\n -fno-default-inline  -fvisibility-inlines-hidden @gol\n+-fvisibility-ms-compat @gol\n -Wabi  -Wctor-dtor-privacy @gol\n -Wnon-virtual-dtor  -Wreorder @gol\n -Weffc++  -Wno-deprecated  -Wstrict-null-sentinel @gol\n@@ -1830,6 +1831,40 @@ Explicitly instantiated inline methods are unaffected by this option\n as their linkage might otherwise cross a shared library boundary.\n @xref{Template Instantiation}.\n \n+@item -fvisibility-ms-compat\n+@opindex fvisibility-ms-compat\n+This flag attempts to use visibility settings to make GCC's C++\n+linkage model compatible with that of Microsoft Visual Studio.\n+\n+The flag makes these changes to GCC's linkage model:\n+\n+@enumerate\n+@item\n+It sets the default visibility to @code{hidden}, like\n+@option{-fvisibility=hidden}.\n+\n+@item\n+Types, but not their members, are not hidden by default.\n+\n+@item\n+The One Definition Rule is relaxed for types without explicit\n+visibility specifications which are defined in more than one different\n+shared object: those declarations are permitted if they would have\n+been permitted when this option was not used.\n+@end enumerate\n+\n+In new code it is better to use @option{-fvisibility=hidden} and\n+export those classes which are intended to be externally visible.\n+Unfortunately it is possible for code to rely, perhaps accidentally,\n+on the Visual Studio behaviour.\n+\n+Among the consequences of these changes are that static data members\n+of the same type with the same name but defined in different shared\n+objects will be different, so changing one will not change the other;\n+and that pointers to function members defined in different shared\n+objects may not compare equal.  When this flag is given, it is a\n+violation of the ODR to define types with the same name differently.\n+\n @item -fno-weak\n @opindex fno-weak\n Do not use weak symbol support, even if it is provided by the linker."}, {"sha": "93bc11006a669b068881f5bacfb3cbc6f18742e5", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ddbfd28de99524d9daf99fd7ee136286c10e72a1/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ddbfd28de99524d9daf99fd7ee136286c10e72a1/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=ddbfd28de99524d9daf99fd7ee136286c10e72a1", "patch": "@@ -1,3 +1,7 @@\n+2007-06-28  Geoffrey Keating  <geoffk@apple.com>\n+\n+\t* g++.dg/ext/visibility/ms-compat-1.C: New.\n+\n 2007-06-28  Andrew Pinski  <andrew_pinski@playstation.sony.com>\n \n \tPR tree-opt/32417"}, {"sha": "e0fd01eb5030a726318f2b7b0bbf0ddd91df99f3", "filename": "gcc/testsuite/g++.dg/ext/visibility/ms-compat-1.C", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ddbfd28de99524d9daf99fd7ee136286c10e72a1/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fvisibility%2Fms-compat-1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ddbfd28de99524d9daf99fd7ee136286c10e72a1/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fvisibility%2Fms-compat-1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fvisibility%2Fms-compat-1.C?ref=ddbfd28de99524d9daf99fd7ee136286c10e72a1", "patch": "@@ -0,0 +1,28 @@\n+/* { dg-require-visibility \"\" } */\n+/* { dg-options \"-fvisibility-ms-compat\" } */\n+\n+/* { dg-final { scan-not-hidden \"__ZTI1S\" } } */\n+/* { dg-final { scan-hidden \"__ZTI1T\" } } */\n+/* { dg-final { scan-not-hidden \"__ZTI1U\" } } */\n+/* { dg-final { scan-not-hidden \"__ZN1U6hide_4Ev\" } } */\n+\n+class S {\n+  virtual void hide_2();\n+} hide_1;\n+\n+void S::hide_2() {\n+}\n+\n+class __attribute__((visibility(\"hidden\"))) T {\n+  virtual void hide_4();\n+} hide_3;\n+\n+void T::hide_4() {\n+}\n+\n+class __attribute__((visibility(\"default\"))) U {\n+  virtual void hide_4();\n+};\n+\n+void U::hide_4() {\n+}"}]}