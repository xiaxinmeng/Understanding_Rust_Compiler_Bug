{"sha": "7a900bcecab71593b731aa7dcad0fa3be8137f5a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2E5MDBiY2VjYWI3MTU5M2I3MzFhYTdkY2FkMGZhM2JlODEzN2Y1YQ==", "commit": {"author": {"name": "Alexandre Oliva", "email": "oliva@adacore.com", "date": "2020-01-23T19:36:34Z"}, "committer": {"name": "Alexandre Oliva", "email": "oliva@gnu.org", "date": "2020-01-23T19:36:34Z"}, "message": "tolerate padding in mbstate_t\n\nPadding in mbstate_t objects may get the memcmp to fail.\nAttempt to avoid the failure with zero initialization.\n\n\nfor  libstdc++-v3/ChangeLog\n\n\t* testsuite/27_io/fpos/mbstate_t/1.cc: Zero-init mbstate_t.", "tree": {"sha": "9e88fcae475cc8944dcde113ff4fa94f36a953fd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9e88fcae475cc8944dcde113ff4fa94f36a953fd"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7a900bcecab71593b731aa7dcad0fa3be8137f5a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7a900bcecab71593b731aa7dcad0fa3be8137f5a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7a900bcecab71593b731aa7dcad0fa3be8137f5a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7a900bcecab71593b731aa7dcad0fa3be8137f5a/comments", "author": null, "committer": null, "parents": [{"sha": "32667e04c7153d97d09d81c1af073d400f0c719a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/32667e04c7153d97d09d81c1af073d400f0c719a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/32667e04c7153d97d09d81c1af073d400f0c719a"}], "stats": {"total": 32, "additions": 25, "deletions": 7}, "files": [{"sha": "ae1af01840852b33f51f4f116b07dce16f3e61ac", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a900bcecab71593b731aa7dcad0fa3be8137f5a/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a900bcecab71593b731aa7dcad0fa3be8137f5a/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=7a900bcecab71593b731aa7dcad0fa3be8137f5a", "patch": "@@ -1,3 +1,7 @@\n+2020-01-23  Alexandre Oliva <oliva@adacore.com>\n+\n+\t* testsuite/27_io/fpos/mbstate_t/1.cc: Zero-init mbstate_t.\n+\n 2020-01-23  Jonathan Wakely  <jwakely@redhat.com>\n \n \tPR libstdc++/91947"}, {"sha": "28fec8e8ef29771672d6d315c0b44787e0236b44", "filename": "libstdc++-v3/testsuite/27_io/fpos/mbstate_t/1.cc", "status": "modified", "additions": 21, "deletions": 7, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a900bcecab71593b731aa7dcad0fa3be8137f5a/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Ffpos%2Fmbstate_t%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a900bcecab71593b731aa7dcad0fa3be8137f5a/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Ffpos%2Fmbstate_t%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Ffpos%2Fmbstate_t%2F1.cc?ref=7a900bcecab71593b731aa7dcad0fa3be8137f5a", "patch": "@@ -28,24 +28,38 @@\n void test01()\n {\n   typedef std::mbstate_t state_type;\n-  state_type state01 = state_type();\n-  state_type state02 = state_type();\n+  // Use zero-initialization of the underlying memory so that padding\n+  // bytes, if any, stand a better chance of comparing the same.\n+  // Zero-initialized memory is guaranteed to be a valid initial\n+  // state.  This doesn't quite guarantee that any padding bits won't\n+  // be overwritten when copying from other instances that haven't\n+  // been fully initialized: this data type is compatible with C, so\n+  // it is likely plain old data, but it could have a default ctor\n+  // that initializes only the relevant fields, whereas copy-ctor and\n+  // operator= could be implemented as a full-object memcpy, including\n+  // padding bits, rather than fieldwise copying.  However, since\n+  // we're comparing two values copied from the same state_type\n+  // instance, if padding bits are copied, we'll get the same for both\n+  // of them, and if they aren't, we'll keep the values we initialized\n+  // them with, so this should be good.\n+  state_type state[2];\n+  std::memset(state, 0, sizeof (state));\n+\n \n   std::streampos pos01(0);\n-  std::streampos pos02(0);\n \n   // 27.4.3.1 fpos members\n   // void state(state_type s);\n   // state_type state();\n \n   // XXX Need to have better sanity checking for the mbstate_t type,\n-  // or whatever the insantiating type for class fpos happens to be\n+  // or whatever the instantiating type for class fpos happens to be\n   // for streampos, as things like equality operators and assignment\n   // operators, increment and deincrement operators need to be in\n   // place.\n-  pos01.state(state02);\n-  state01 = pos01.state();\n-  VERIFY( std::memcmp(&state01, &state02, sizeof(state_type)) == 0 );\n+  pos01.state(state[1]);\n+  state[0] = pos01.state();\n+  VERIFY( std::memcmp(&state[0], &state[1], sizeof(state_type)) == 0 );\n }\n \n int main() "}]}