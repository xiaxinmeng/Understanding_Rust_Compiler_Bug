{"sha": "2dfaf550bdee9b83e6a4a25f71f2fc8e9e9271d0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MmRmYWY1NTBiZGVlOWI4M2U2YTRhMjVmNzFmMmZjOGU5ZTkyNzFkMA==", "commit": {"author": {"name": "Per Bothner", "email": "bothner@gcc.gnu.org", "date": "1998-12-07T15:43:10Z"}, "committer": {"name": "Per Bothner", "email": "bothner@gcc.gnu.org", "date": "1998-12-07T15:43:10Z"}, "message": "constants.c (find_methodref_index): When the class is an interface...\n\n\t\n\t* constants.c (find_methodref_index):  When the class is an interface,\n\tgenerate CONSTANT_InterfaceMethodref instead of a CONSTANT_MethodRef.\n\t* decl.c (finit_identifier_node):  Use \"$finit$\", rather than\n\t\"<finit>\" (which Sun's verifier rejects).\n\t* parse.y (maybe_generate_finit):  Leave out meaningless final flag.\n\t(generate_field_initialization_code):  Removed.\n\t(fix_constructors)  Don't add call to $finit$ here (wrong order).\n\t(patch_method_invocation):  Add $finit$ call here.\n\t* java-tree.h (CALL_USING_SUPER):  New macro.\n\t* parse.y (patch_invoke):  Remove im local variable.\n \t(patch_method_invocation, patch_invoke):  Don't pass super parameter.\n\t(patch_invoke):  Use CALL_USING_SUPER instead of from_super parameter.\n\t(resolve_qualified_expression_name):  Maybe set CALL_USING_SUPER.\n\t* jcf-write.c (get_access_flags):  Fix typo ACC_PUBLIC -> ACC_FINAL.\n\t* parse.y (java_complete_tree):  Don't complain about unreachable\n\tstatement if it is empty_stmt_node.\n\t* jcf-write.c (find_constant_wide):  New function.\n\t(push_long_const):  Use find_constant_wide.\n\t* jcf-write.c (generate_bytecode_insn):  Fix bug in switch handling.\n\t(generate_bytecode_insn):  Use correct dup variant for MODIFY_EXPR.\n\tAdd \"redundant\" NOTE_PUSH/NOTE_POP uses so code_SP_max gets set.\n\tEmit invokeinterface when calling an interface method.\n\tEmit invokespecial also when calling super or private methods.\n\t* jcf-write.c (generate_classfile):  Emit ConstantValue attributes.\n\nFrom-SVN: r24159", "tree": {"sha": "701b5e096dbd90479f5230628077109a1f34c72e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/701b5e096dbd90479f5230628077109a1f34c72e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2dfaf550bdee9b83e6a4a25f71f2fc8e9e9271d0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2dfaf550bdee9b83e6a4a25f71f2fc8e9e9271d0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2dfaf550bdee9b83e6a4a25f71f2fc8e9e9271d0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2dfaf550bdee9b83e6a4a25f71f2fc8e9e9271d0/comments", "author": null, "committer": null, "parents": [{"sha": "5f680ab65ba97123da183e205e4f2c5e15c5aa33", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5f680ab65ba97123da183e205e4f2c5e15c5aa33", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5f680ab65ba97123da183e205e4f2c5e15c5aa33"}], "stats": {"total": 34, "additions": 34, "deletions": 0}, "files": [{"sha": "d2cfa49751941f68d6c2ca879cf100d06ab98c25", "filename": "gcc/java/ChangeLog", "status": "modified", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2dfaf550bdee9b83e6a4a25f71f2fc8e9e9271d0/gcc%2Fjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2dfaf550bdee9b83e6a4a25f71f2fc8e9e9271d0/gcc%2Fjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2FChangeLog?ref=2dfaf550bdee9b83e6a4a25f71f2fc8e9e9271d0", "patch": "@@ -1,3 +1,37 @@\n+Sun Dec  6 13:45:00 1998  Per Bothner  <bothner@cygnus.com>\n+\n+\t* constants.c (find_methodref_index):  When the class is an interface,\n+\tgenerate CONSTANT_InterfaceMethodref instead of a CONSTANT_MethodRef.\n+\n+\t* decl.c (finit_identifier_node):  Use \"$finit$\", rather than\n+\t\"<finit>\" (which Sun's verifier rejects).\n+\t* parse.y (maybe_generate_finit):  Leave out meaningless final flag.\n+\t(generate_field_initialization_code):  Removed.\n+\t(fix_constructors)  Don't add call to $finit$ here (wrong order).\n+\t(patch_method_invocation):  Add $finit$ call here.\n+\n+\t* java-tree.h (CALL_USING_SUPER):  New macro.\n+\t* parse.y (patch_invoke):  Remove im local variable.\n+ \t(patch_method_invocation, patch_invoke):  Don't pass super parameter.\n+\t(patch_invoke):  Use CALL_USING_SUPER instead of from_super parameter. \n+\t(resolve_qualified_expression_name):  Maybe set CALL_USING_SUPER.\n+\n+\t* jcf-write.c (get_access_flags):  Fix typo ACC_PUBLIC -> ACC_FINAL.\n+\n+\t* parse.y (java_complete_tree):  Don't complain about unreachable\n+\tstatement if it is empty_stmt_node.\n+\n+\t* jcf-write.c (find_constant_wide):  New function.\n+\t(push_long_const):  Use find_constant_wide.\n+\n+\t* jcf-write.c (generate_bytecode_insn):  Fix bug in switch handling.\n+\t(generate_bytecode_insn):  Use correct dup variant for MODIFY_EXPR.\n+\tAdd \"redundant\" NOTE_PUSH/NOTE_POP uses so code_SP_max gets set.\n+\tEmit invokeinterface when calling an interface method.\n+\tEmit invokespecial also when calling super or private methods.\n+\n+\t* jcf-write.c (generate_classfile):  Emit ConstantValue attributes.\n+\n Sun Dec  6 13:21:18 1998  Per Bothner  <bothner@cygnus.com>\n \n \t* jcf-dump.c (INVOKE):  If invokeinterface, print number of args."}]}