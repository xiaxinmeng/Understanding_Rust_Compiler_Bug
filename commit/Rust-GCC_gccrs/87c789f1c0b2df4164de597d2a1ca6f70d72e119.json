{"sha": "87c789f1c0b2df4164de597d2a1ca6f70d72e119", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODdjNzg5ZjFjMGIyZGY0MTY0ZGU1OTdkMmExY2E2ZjcwZDcyZTExOQ==", "commit": {"author": {"name": "Paul Thomas", "email": "pault@gcc.gnu.org", "date": "2018-07-02T07:20:27Z"}, "committer": {"name": "Paul Thomas", "email": "pault@gcc.gnu.org", "date": "2018-07-02T07:20:27Z"}, "message": "re PR fortran/45305 (Array-valued calles to elementals are not simplified)\n\n2018-07-02  Paul Thomas  <pault@gcc.gnu.org>\n\n\tPR fortran/45305\n\t* expr.c : Add a prototype for scalarize_intrinsic_call.\n\t(gfc_simplify_expr): Use scalarize_intrinsic_call for elemental\n\tintrinsic function calls.\n\t(scalarize_intrinsic_call): Add 'init_flag' argument. Check if\n\tthe expression or any of the actual argument expressions are\n\tNULL. Before calling gfc_check_init_expr, check 'init_flag'.\n\tOnly simplify the scalarized expressions if there are no errors\n\ton the stack.\n\t(gfc_check_init_expr): Set 'init_flag' true in the call to\n\tscalarize_intrinsic_call.\n\n2018-07-02  Paul Thomas  <pault@gcc.gnu.org>\n\n\tPR fortran/45305\n\t* gfortran.dg/scalarize_parameter_array_2.f90: New test.\n\nFrom-SVN: r262299", "tree": {"sha": "8e2a752a33758a41f8ea754df5bc976c9cdd3edc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8e2a752a33758a41f8ea754df5bc976c9cdd3edc"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/87c789f1c0b2df4164de597d2a1ca6f70d72e119", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/87c789f1c0b2df4164de597d2a1ca6f70d72e119", "html_url": "https://github.com/Rust-GCC/gccrs/commit/87c789f1c0b2df4164de597d2a1ca6f70d72e119", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/87c789f1c0b2df4164de597d2a1ca6f70d72e119/comments", "author": null, "committer": null, "parents": [{"sha": "61c74e84bb802ab0c63cc23705b1202f65453337", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/61c74e84bb802ab0c63cc23705b1202f65453337", "html_url": "https://github.com/Rust-GCC/gccrs/commit/61c74e84bb802ab0c63cc23705b1202f65453337"}], "stats": {"total": 69, "additions": 64, "deletions": 5}, "files": [{"sha": "4d2768c211c26f8bca7590897bf1d2480efa5b1a", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/87c789f1c0b2df4164de597d2a1ca6f70d72e119/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/87c789f1c0b2df4164de597d2a1ca6f70d72e119/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=87c789f1c0b2df4164de597d2a1ca6f70d72e119", "patch": "@@ -1,3 +1,17 @@\n+2018-07-02  Paul Thomas  <pault@gcc.gnu.org>\n+\n+\tPR fortran/45305\n+\t* expr.c : Add a prototype for scalarize_intrinsic_call.\n+\t(gfc_simplify_expr): Use scalarize_intrinsic_call for elemental\n+\tintrinsic function calls.\n+\t(scalarize_intrinsic_call): Add 'init_flag' argument. Check if\n+\tthe expression or any of the actual argument expressions are\n+\tNULL. Before calling gfc_check_init_expr, check 'init_flag'.\n+\tOnly simplify the scalarized expressions if there are no errors\n+\ton the stack.\n+\t(gfc_check_init_expr): Set 'init_flag' true in the call to\n+\tscalarize_intrinsic_call.\n+\n 2018-06-28  Fritz Reese  <fritzoreese@gmail.com>\n \n \tPR fortran/82865"}, {"sha": "951bdce98ac47cbbf097392c9089e9e4e68289fa", "filename": "gcc/fortran/expr.c", "status": "modified", "additions": 30, "deletions": 5, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/87c789f1c0b2df4164de597d2a1ca6f70d72e119/gcc%2Ffortran%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/87c789f1c0b2df4164de597d2a1ca6f70d72e119/gcc%2Ffortran%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fexpr.c?ref=87c789f1c0b2df4164de597d2a1ca6f70d72e119", "patch": "@@ -1896,6 +1896,10 @@ simplify_parameter_variable (gfc_expr *p, int type)\n   return t;\n }\n \n+\n+static bool\n+scalarize_intrinsic_call (gfc_expr *, bool init_flag);\n+\n /* Given an expression, simplify it by collapsing constant\n    expressions.  Most simplification takes place when the expression\n    tree is being constructed.  If an intrinsic function is simplified\n@@ -1919,6 +1923,8 @@ bool\n gfc_simplify_expr (gfc_expr *p, int type)\n {\n   gfc_actual_arglist *ap;\n+  gfc_intrinsic_sym* isym = NULL;\n+\n \n   if (p == NULL)\n     return true;\n@@ -1938,6 +1944,14 @@ gfc_simplify_expr (gfc_expr *p, int type)\n \t  && gfc_intrinsic_func_interface (p, 1) == MATCH_ERROR)\n \treturn false;\n \n+      if (p->expr_type == EXPR_FUNCTION)\n+\t{\n+\t  if (p->symtree)\n+\t    isym = gfc_find_function (p->symtree->n.sym->name);\n+\t  if (isym && isym->elemental)\n+\t    scalarize_intrinsic_call (p, false);\n+\t}\n+\n       break;\n \n     case EXPR_SUBSTRING:\n@@ -2051,14 +2065,23 @@ et0 (gfc_expr *e)\n /* Scalarize an expression for an elemental intrinsic call.  */\n \n static bool\n-scalarize_intrinsic_call (gfc_expr *e)\n+scalarize_intrinsic_call (gfc_expr *e, bool init_flag)\n {\n   gfc_actual_arglist *a, *b;\n   gfc_constructor_base ctor;\n   gfc_constructor *args[5] = {};  /* Avoid uninitialized warnings.  */\n   gfc_constructor *ci, *new_ctor;\n   gfc_expr *expr, *old;\n   int n, i, rank[5], array_arg;\n+  int errors = 0;\n+\n+  if (e == NULL)\n+    return false;\n+\n+  a = e->value.function.actual;\n+  for (; a; a = a->next)\n+    if (a->expr && !gfc_is_constant_expr (a->expr))\n+      return false;\n \n   /* Find which, if any, arguments are arrays.  Assume that the old\n      expression carries the type information and that the first arg\n@@ -2093,7 +2116,7 @@ scalarize_intrinsic_call (gfc_expr *e)\n   for (; a; a = a->next)\n     {\n       /* Check that this is OK for an initialization expression.  */\n-      if (a->expr && !gfc_check_init_expr (a->expr))\n+      if (a->expr && init_flag && !gfc_check_init_expr (a->expr))\n \tgoto cleanup;\n \n       rank[n] = 0;\n@@ -2118,6 +2141,7 @@ scalarize_intrinsic_call (gfc_expr *e)\n       n++;\n     }\n \n+  gfc_get_errors (NULL, &errors);\n \n   /* Using the array argument as the master, step through the array\n      calling the function for each element and advancing the array\n@@ -2152,7 +2176,8 @@ scalarize_intrinsic_call (gfc_expr *e)\n       /* Simplify the function calls.  If the simplification fails, the\n \t error will be flagged up down-stream or the library will deal\n \t with it.  */\n-      gfc_simplify_expr (new_ctor->expr, 0);\n+      if (errors == 0)\n+\tgfc_simplify_expr (new_ctor->expr, 0);\n \n       for (i = 0; i < n; i++)\n \tif (args[i])\n@@ -2626,7 +2651,7 @@ gfc_check_init_expr (gfc_expr *e)\n \t   array argument.  */\n \tisym = gfc_find_function (e->symtree->n.sym->name);\n \tif (isym && isym->elemental\n-\t    && (t = scalarize_intrinsic_call (e)))\n+\t    && (t = scalarize_intrinsic_call (e, true)))\n \t  break;\n       }\n \n@@ -5344,7 +5369,7 @@ gfc_is_simply_contiguous (gfc_expr *expr, bool strict, bool permit_element)\n \t  s = expr->symtree->n.sym;\n \t  if (s->ts.type != BT_CLASS)\n \t    return false;\n-\t  \n+\n \t  rc = NULL;\n \t  for (r = expr->ref; r; r = r->next)\n \t    if (r->type == REF_COMPONENT)"}, {"sha": "196d7fe2f4beb1bc07958eefcffe1511d64d8caf", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/87c789f1c0b2df4164de597d2a1ca6f70d72e119/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/87c789f1c0b2df4164de597d2a1ca6f70d72e119/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=87c789f1c0b2df4164de597d2a1ca6f70d72e119", "patch": "@@ -1,3 +1,8 @@\n+2018-07-02  Paul Thomas  <pault@gcc.gnu.org>\n+\n+\tPR fortran/45305\n+\t* gfortran.dg/scalarize_parameter_array_2.f90: New test.\n+\n 2018-07-02  Martin Liska  <mliska@suse.cz>\n \n         PR ipa/86279"}, {"sha": "2e0b475afd46a88047642574ad5ce0cac9043cb8", "filename": "gcc/testsuite/gfortran.dg/scalarize_parameter_array_2.f90", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/87c789f1c0b2df4164de597d2a1ca6f70d72e119/gcc%2Ftestsuite%2Fgfortran.dg%2Fscalarize_parameter_array_2.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/87c789f1c0b2df4164de597d2a1ca6f70d72e119/gcc%2Ftestsuite%2Fgfortran.dg%2Fscalarize_parameter_array_2.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fscalarize_parameter_array_2.f90?ref=87c789f1c0b2df4164de597d2a1ca6f70d72e119", "patch": "@@ -0,0 +1,15 @@\n+! { dg-do compile }\n+!\n+! Test the fix for PR45305. The if statements should simplify away so\n+! that 'I_do_not_exist' is not referenced.\n+!\n+! Contributed by Tobias Burnus  <burnus@gcc.gnu.org>\n+!\n+if (any (abs(bessel_jn([1,2], 1.0) - bessel_jn([1,2], 1.0)) &\n+         > epsilon(0.0))) &\n+  call I_do_not_exist()\n+\n+if (any (abs(bessel_jn(1, 2, 1.0) - bessel_jn([1,2], 1.0)) &\n+         > epsilon(0.0))) &\n+  call I_do_not_exist()\n+end"}]}