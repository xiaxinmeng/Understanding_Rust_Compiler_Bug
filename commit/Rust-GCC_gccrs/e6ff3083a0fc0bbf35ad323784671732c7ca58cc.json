{"sha": "e6ff3083a0fc0bbf35ad323784671732c7ca58cc", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTZmZjMwODNhMGZjMGJiZjM1YWQzMjM3ODQ2NzE3MzJjN2NhNThjYw==", "commit": {"author": {"name": "Anatoly Sokolov", "email": "aesok@post.ru", "date": "2009-04-25T04:34:27Z"}, "committer": {"name": "Anatoly Sokolov", "email": "aesok@gcc.gnu.org", "date": "2009-04-25T04:34:27Z"}, "message": "target.h (struct gcc_target): Add case_values_threshold field.\n\n\t* target.h (struct gcc_target): Add case_values_threshold field.\n\t* target-def.h (TARGET_CASE_VALUES_THRESHOLD): New.\n\t(TARGET_INITIALIZER): Use TARGET_CASE_VALUES_THRESHOLD.\n\t* targhooks.c (default_case_values_threshold): New function.\n\t* targhooks.h (default_case_values_threshold): Declare function.\n\t* stmt.c (expand_case): Use case_values_threshold target hook.\n\t* expr.h (case_values_threshold): Remove declartation.\n\t* expr.c (case_values_threshold): Remove function.\n\t* doc/tm.texi (CASE_VALUES_THRESHOLD): Revise documentation.\n\n\t* config/avr/avr.h (CASE_VALUES_THRESHOLD): Remove macro.\n\t* config/avr/avr.c (TARGET_CASE_VALUES_THRESHOLD): Define macro.\n\t(avr_case_values_threshold): Declare as static.\n\t* config/avr/avr-protos.h (avr_case_values_threshold): Remove.\n\n\t* config/avr/mn10300.h (CASE_VALUES_THRESHOLD): Remove macro.\n\t* config/avr/mn10300.c (TARGET_CASE_VALUES_THRESHOLD): Define macro.\n\t(mn10300_case_values_threshold): New function.\n\nFrom-SVN: r146756", "tree": {"sha": "bd2fa4d98f26b6a7e12e507b3e3a46601d1ed5c3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/bd2fa4d98f26b6a7e12e507b3e3a46601d1ed5c3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e6ff3083a0fc0bbf35ad323784671732c7ca58cc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e6ff3083a0fc0bbf35ad323784671732c7ca58cc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e6ff3083a0fc0bbf35ad323784671732c7ca58cc", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e6ff3083a0fc0bbf35ad323784671732c7ca58cc/comments", "author": null, "committer": null, "parents": [{"sha": "9e3eba15997699303768c9c7b6eee72f8a9ca294", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9e3eba15997699303768c9c7b6eee72f8a9ca294", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9e3eba15997699303768c9c7b6eee72f8a9ca294"}], "stats": {"total": 111, "additions": 74, "deletions": 37}, "files": [{"sha": "3af998b3c33eca6595c96734bf644c68f9865c7d", "filename": "gcc/ChangeLog", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e6ff3083a0fc0bbf35ad323784671732c7ca58cc/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e6ff3083a0fc0bbf35ad323784671732c7ca58cc/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=e6ff3083a0fc0bbf35ad323784671732c7ca58cc", "patch": "@@ -1,3 +1,24 @@\n+2009-04-25  Anatoly Sokolov  <aesok@post.ru>\n+\n+\t* target.h (struct gcc_target): Add case_values_threshold field.\n+\t* target-def.h (TARGET_CASE_VALUES_THRESHOLD): New.\n+\t(TARGET_INITIALIZER): Use TARGET_CASE_VALUES_THRESHOLD.\n+\t* targhooks.c (default_case_values_threshold): New function.\n+\t* targhooks.h (default_case_values_threshold): Declare function.\n+\t* stmt.c (expand_case): Use case_values_threshold target hook.\n+\t* expr.h (case_values_threshold): Remove declartation.\n+\t* expr.c (case_values_threshold): Remove function.\n+\t* doc/tm.texi (CASE_VALUES_THRESHOLD): Revise documentation.\n+\n+\t* config/avr/avr.h (CASE_VALUES_THRESHOLD): Remove macro.\n+\t* config/avr/avr.c (TARGET_CASE_VALUES_THRESHOLD): Define macro.\n+\t(avr_case_values_threshold): Declare as static.\n+\t* config/avr/avr-protos.h (avr_case_values_threshold): Remove.\n+\n+\t* config/avr/mn10300.h (CASE_VALUES_THRESHOLD): Remove macro.\n+\t* config/avr/mn10300.c (TARGET_CASE_VALUES_THRESHOLD): Define macro.\n+\t(mn10300_case_values_threshold): New function.\n+\n 2009-04-24  H.J. Lu  <hongjiu.lu@intel.com>\n \n \t* ira.c (setup_cover_and_important_classes): Add enum cast."}, {"sha": "2df4a16d1cf9deaf7d884d0ada6788c45a5c89ee", "filename": "gcc/config/avr/avr-protos.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e6ff3083a0fc0bbf35ad323784671732c7ca58cc/gcc%2Fconfig%2Favr%2Favr-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e6ff3083a0fc0bbf35ad323784671732c7ca58cc/gcc%2Fconfig%2Favr%2Favr-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Favr%2Favr-protos.h?ref=e6ff3083a0fc0bbf35ad323784671732c7ca58cc", "patch": "@@ -39,7 +39,6 @@ extern int avr_simple_epilogue (void);\n extern void gas_output_limited_string (FILE *file, const char *str);\n extern void gas_output_ascii (FILE *file, const char *str, size_t length);\n extern int avr_hard_regno_rename_ok (unsigned int, unsigned int);\n-extern unsigned int avr_case_values_threshold (void);\n \n #ifdef TREE_CODE\n extern void asm_output_external (FILE *file, tree decl, char *name);"}, {"sha": "40835c70f519eac780eaf480da0a34e1d3b98503", "filename": "gcc/config/avr/avr.c", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e6ff3083a0fc0bbf35ad323784671732c7ca58cc/gcc%2Fconfig%2Favr%2Favr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e6ff3083a0fc0bbf35ad323784671732c7ca58cc/gcc%2Fconfig%2Favr%2Favr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Favr%2Favr.c?ref=e6ff3083a0fc0bbf35ad323784671732c7ca58cc", "patch": "@@ -87,6 +87,7 @@ static bool avr_return_in_memory (const_tree, const_tree);\n static struct machine_function * avr_init_machine_status (void);\n static rtx avr_builtin_setjmp_frame_value (void);\n static bool avr_hard_regno_scratch_ok (unsigned int);\n+static unsigned int avr_case_values_threshold (void);\n \n /* Allocate registers from r25 to r8 for parameters for function calls.  */\n #define FIRST_CUM_REG 26\n@@ -359,6 +360,8 @@ static const struct mcu_type_s avr_mcu_types[] = {\n \n #undef TARGET_HARD_REGNO_SCRATCH_OK\n #define TARGET_HARD_REGNO_SCRATCH_OK avr_hard_regno_scratch_ok\n+#undef TARGET_CASE_VALUES_THRESHOLD\n+#define TARGET_CASE_VALUES_THRESHOLD avr_case_values_threshold\n \n struct gcc_target targetm = TARGET_INITIALIZER;\n \f"}, {"sha": "5d50827144b78eb21dd150ad98cee2a713d2c87b", "filename": "gcc/config/avr/avr.h", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e6ff3083a0fc0bbf35ad323784671732c7ca58cc/gcc%2Fconfig%2Favr%2Favr.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e6ff3083a0fc0bbf35ad323784671732c7ca58cc/gcc%2Fconfig%2Favr%2Favr.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Favr%2Favr.h?ref=e6ff3083a0fc0bbf35ad323784671732c7ca58cc", "patch": "@@ -732,8 +732,6 @@ fprintf (STREAM, \"\\t.skip %lu,0\\n\", (unsigned long)(N))\n \n #define CASE_VECTOR_MODE HImode\n \n-#define CASE_VALUES_THRESHOLD avr_case_values_threshold ()\n-\n #undef WORD_REGISTER_OPERATIONS\n \n #define MOVE_MAX 4"}, {"sha": "1eb80ec78bb326c1f4818b503dfcce9e6cc8e687", "filename": "gcc/config/mn10300/mn10300.c", "status": "modified", "additions": 17, "deletions": 1, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e6ff3083a0fc0bbf35ad323784671732c7ca58cc/gcc%2Fconfig%2Fmn10300%2Fmn10300.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e6ff3083a0fc0bbf35ad323784671732c7ca58cc/gcc%2Fconfig%2Fmn10300%2Fmn10300.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmn10300%2Fmn10300.c?ref=e6ff3083a0fc0bbf35ad323784671732c7ca58cc", "patch": "@@ -1,6 +1,6 @@\n /* Subroutines for insn-output.c for Matsushita MN10300 series\n    Copyright (C) 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004,\n-   2005, 2006, 2007, 2008 Free Software Foundation, Inc.\n+   2005, 2006, 2007, 2008, 2009 Free Software Foundation, Inc.\n    Contributed by Jeff Law (law@cygnus.com).\n \n This file is part of GCC.\n@@ -80,6 +80,7 @@ static bool mn10300_pass_by_reference (CUMULATIVE_ARGS *, enum machine_mode,\n \t\t\t\t       const_tree, bool);\n static int mn10300_arg_partial_bytes (CUMULATIVE_ARGS *, enum machine_mode,\n \t\t\t\t      tree, bool);\n+static unsigned int mn10300_case_values_threshold (void);\n \f\n /* Initialize the GCC target structure.  */\n #undef TARGET_ASM_ALIGNED_HI_OP\n@@ -119,6 +120,9 @@ static int mn10300_arg_partial_bytes (CUMULATIVE_ARGS *, enum machine_mode,\n #undef TARGET_EXPAND_BUILTIN_VA_START\n #define TARGET_EXPAND_BUILTIN_VA_START mn10300_va_start\n \n+#undef TARGET_CASE_VALUES_THRESHOLD\n+#define TARGET_CASE_VALUES_THRESHOLD mn10300_case_values_threshold\n+\n static void mn10300_encode_section_info (tree, rtx, int);\n struct gcc_target targetm = TARGET_INITIALIZER;\n \f\n@@ -2126,3 +2130,15 @@ mn10300_encode_section_info (tree decl, rtx rtl, int first ATTRIBUTE_UNUSED)\n   if (flag_pic)\n     SYMBOL_REF_FLAG (symbol) = (*targetm.binds_local_p) (decl);\n }\n+\n+/* Dispatch tables on the mn10300 are extremely expensive in terms of code\n+   and readonly data size.  So we crank up the case threshold value to\n+   encourage a series of if/else comparisons to implement many small switch\n+   statements.  In theory, this value could be increased much more if we\n+   were solely optimizing for space, but we keep it \"reasonable\" to avoid\n+   serious code efficiency lossage.  */\n+\n+unsigned int mn10300_case_values_threshold (void)\n+{\n+  return 6;\n+}"}, {"sha": "b6486d9cf699e2000a5e015c63dc36023bc674b2", "filename": "gcc/config/mn10300/mn10300.h", "status": "modified", "additions": 1, "deletions": 9, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e6ff3083a0fc0bbf35ad323784671732c7ca58cc/gcc%2Fconfig%2Fmn10300%2Fmn10300.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e6ff3083a0fc0bbf35ad323784671732c7ca58cc/gcc%2Fconfig%2Fmn10300%2Fmn10300.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmn10300%2Fmn10300.h?ref=e6ff3083a0fc0bbf35ad323784671732c7ca58cc", "patch": "@@ -1,7 +1,7 @@\n /* Definitions of target machine for GNU compiler.\n    Matsushita MN10300 series\n    Copyright (C) 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005,\n-   2007, 2008 Free Software Foundation, Inc.\n+   2007, 2008, 2009 Free Software Foundation, Inc.\n    Contributed by Jeff Law (law@cygnus.com).\n \n This file is part of GCC.\n@@ -810,14 +810,6 @@ while (0)\n    than accessing full words.  */\n #define SLOW_BYTE_ACCESS 1\n \n-/* Dispatch tables on the mn10300 are extremely expensive in terms of code\n-   and readonly data size.  So we crank up the case threshold value to\n-   encourage a series of if/else comparisons to implement many small switch\n-   statements.  In theory, this value could be increased much more if we\n-   were solely optimizing for space, but we keep it \"reasonable\" to avoid\n-   serious code efficiency lossage.  */\n-#define CASE_VALUES_THRESHOLD 6\n-\n #define NO_FUNCTION_CSE\n \n /* According expr.c, a value of around 6 should minimize code size, and"}, {"sha": "ae2ee51f241f217990ed712e1688b58c2d99da25", "filename": "gcc/doc/tm.texi", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e6ff3083a0fc0bbf35ad323784671732c7ca58cc/gcc%2Fdoc%2Ftm.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e6ff3083a0fc0bbf35ad323784671732c7ca58cc/gcc%2Fdoc%2Ftm.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Ftm.texi?ref=e6ff3083a0fc0bbf35ad323784671732c7ca58cc", "patch": "@@ -9712,12 +9712,12 @@ contain relative addresses only when @option{-fPIC} or @option{-fPIC}\n is in effect.\n @end defmac\n \n-@defmac CASE_VALUES_THRESHOLD\n-Define this to be the smallest number of different values for which it\n+@deftypefn {Target Hook} unsigned int TARGET_CASE_VALUES_THRESHOLD (void)\n+This function return the smallest number of different values for which it\n is best to use a jump-table instead of a tree of conditional branches.\n The default is four for machines with a @code{casesi} instruction and\n five otherwise.  This is best for most machines.\n-@end defmac\n+@end deftypefn\n \n @defmac CASE_USE_BIT_TESTS\n Define this macro to be a C expression to indicate whether C switch"}, {"sha": "fd0c43776efe2c8452a92a1650d73def38020dca", "filename": "gcc/expr.c", "status": "modified", "additions": 0, "deletions": 13, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e6ff3083a0fc0bbf35ad323784671732c7ca58cc/gcc%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e6ff3083a0fc0bbf35ad323784671732c7ca58cc/gcc%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpr.c?ref=e6ff3083a0fc0bbf35ad323784671732c7ca58cc", "patch": "@@ -9865,19 +9865,6 @@ do_store_flag (tree exp, rtx target, enum machine_mode mode)\n # define CODE_FOR_casesi CODE_FOR_nothing\n #endif\n \n-/* If the machine does not have a case insn that compares the bounds,\n-   this means extra overhead for dispatch tables, which raises the\n-   threshold for using them.  */\n-#ifndef CASE_VALUES_THRESHOLD\n-#define CASE_VALUES_THRESHOLD (HAVE_casesi ? 4 : 5)\n-#endif /* CASE_VALUES_THRESHOLD */\n-\n-unsigned int\n-case_values_threshold (void)\n-{\n-  return CASE_VALUES_THRESHOLD;\n-}\n-\n /* Attempt to generate a casesi instruction.  Returns 1 if successful,\n    0 otherwise (i.e. if there is no casesi instruction).  */\n int"}, {"sha": "e3c38370bf220e2d73b565fa92e29e3d2f3ebd63", "filename": "gcc/expr.h", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e6ff3083a0fc0bbf35ad323784671732c7ca58cc/gcc%2Fexpr.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e6ff3083a0fc0bbf35ad323784671732c7ca58cc/gcc%2Fexpr.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpr.h?ref=e6ff3083a0fc0bbf35ad323784671732c7ca58cc", "patch": "@@ -583,10 +583,6 @@ extern void do_compare_rtx_and_jump (rtx, rtx, enum rtx_code, int,\n extern int try_casesi (tree, tree, tree, tree, rtx, rtx, rtx);\n extern int try_tablejump (tree, tree, tree, tree, rtx, rtx);\n \n-/* Smallest number of adjacent cases before we use a jump table.\n-   XXX Should be a target hook.  */\n-extern unsigned int case_values_threshold (void);\n-\n /* Functions from alias.c */\n #include \"alias.h\"\n "}, {"sha": "e2688efadadf4b3c604cefbcac96b1c5954f7599", "filename": "gcc/stmt.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e6ff3083a0fc0bbf35ad323784671732c7ca58cc/gcc%2Fstmt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e6ff3083a0fc0bbf35ad323784671732c7ca58cc/gcc%2Fstmt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fstmt.c?ref=e6ff3083a0fc0bbf35ad323784671732c7ca58cc", "patch": "@@ -2320,7 +2320,7 @@ expand_case (tree exp)\n \t If the switch-index is a constant, do it this way\n \t because we can optimize it.  */\n \n-      else if (count < case_values_threshold ()\n+      else if (count < targetm.case_values_threshold ()\n \t       || compare_tree_int (range,\n \t\t\t\t    (optimize_insn_for_size_p () ? 3 : 10) * count) > 0\n \t       /* RANGE may be signed, and really large ranges will show up"}, {"sha": "7ff4ed624ead7d4dcba754c09c697bc79401b14f", "filename": "gcc/target-def.h", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e6ff3083a0fc0bbf35ad323784671732c7ca58cc/gcc%2Ftarget-def.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e6ff3083a0fc0bbf35ad323784671732c7ca58cc/gcc%2Ftarget-def.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftarget-def.h?ref=e6ff3083a0fc0bbf35ad323784671732c7ca58cc", "patch": "@@ -1,5 +1,5 @@\n /* Default initializers for a generic GCC target.\n-   Copyright (C) 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008\n+   Copyright (C) 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009\n    Free Software Foundation, Inc.\n \n    This program is free software; you can redistribute it and/or modify it\n@@ -654,6 +654,10 @@\n #define TARGET_HARD_REGNO_SCRATCH_OK default_hard_regno_scratch_ok\n #endif\n \n+#ifndef TARGET_CASE_VALUES_THRESHOLD\n+#define TARGET_CASE_VALUES_THRESHOLD default_case_values_threshold\n+#endif\n+\n /* C specific.  */\n #ifndef TARGET_C_MODE_FOR_SUFFIX\n #define TARGET_C_MODE_FOR_SUFFIX default_mode_for_suffix\n@@ -918,6 +922,7 @@\n   TARGET_EXPAND_TO_RTL_HOOK,\t\t\t\\\n   TARGET_INSTANTIATE_DECLS,\t\t\t\\\n   TARGET_HARD_REGNO_SCRATCH_OK,\t\t\t\\\n+  TARGET_CASE_VALUES_THRESHOLD,\t\t\t\\\n   TARGET_C,\t\t\t\t\t\\\n   TARGET_CXX,\t\t\t\t\t\\\n   TARGET_EMUTLS,\t\t\t\t\\"}, {"sha": "ed08a09853a56a580138a74f11ab129598597510", "filename": "gcc/target.h", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e6ff3083a0fc0bbf35ad323784671732c7ca58cc/gcc%2Ftarget.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e6ff3083a0fc0bbf35ad323784671732c7ca58cc/gcc%2Ftarget.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftarget.h?ref=e6ff3083a0fc0bbf35ad323784671732c7ca58cc", "patch": "@@ -921,6 +921,10 @@ struct gcc_target\n      in peephole2.  */\n   bool (* hard_regno_scratch_ok) (unsigned int regno);\n \n+  /* Return the smallest number of different values for which it is best to\n+     use a jump-table instead of a tree of conditional branches.  */\n+  unsigned int (* case_values_threshold) (void);\n+\n   /* Functions specific to the C family of frontends.  */\n   struct c {\n     /* Return machine mode for non-standard suffix"}, {"sha": "c0bcac0d0543c031054655f316e29c10f565c557", "filename": "gcc/targhooks.c", "status": "modified", "additions": 15, "deletions": 1, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e6ff3083a0fc0bbf35ad323784671732c7ca58cc/gcc%2Ftarghooks.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e6ff3083a0fc0bbf35ad323784671732c7ca58cc/gcc%2Ftarghooks.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftarghooks.c?ref=e6ff3083a0fc0bbf35ad323784671732c7ca58cc", "patch": "@@ -1,5 +1,6 @@\n /* Default target hook functions.\n-   Copyright (C) 2003, 2004, 2005, 2007, 2008 Free Software Foundation, Inc.\n+   Copyright (C) 2003, 2004, 2005, 2007, 2008, 2009\n+   Free Software Foundation, Inc.\n \n This file is part of GCC.\n \n@@ -765,4 +766,17 @@ default_target_option_can_inline_p (tree caller, tree callee)\n   return ret;\n }\n \n+#ifndef HAVE_casesi\n+# define HAVE_casesi 0\n+#endif\n+\n+/* If the machine does not have a case insn that compares the bounds,\n+   this means extra overhead for dispatch tables, which raises the\n+   threshold for using them.  */\n+\n+unsigned int default_case_values_threshold (void)\n+{\n+  return (HAVE_casesi ? 4 : 5);\n+}\n+\n #include \"gt-targhooks.h\""}, {"sha": "63d419f819a09a5d6f603d48b763dc0fefbf2e5a", "filename": "gcc/targhooks.h", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e6ff3083a0fc0bbf35ad323784671732c7ca58cc/gcc%2Ftarghooks.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e6ff3083a0fc0bbf35ad323784671732c7ca58cc/gcc%2Ftarghooks.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftarghooks.h?ref=e6ff3083a0fc0bbf35ad323784671732c7ca58cc", "patch": "@@ -1,5 +1,6 @@\n /* Default target hook functions.\n-   Copyright (C) 2003, 2004, 2005, 2007, 2008 Free Software Foundation, Inc.\n+   Copyright (C) 2003, 2004, 2005, 2007, 2008, 2009\n+   Free Software Foundation, Inc.\n \n This file is part of GCC.\n \n@@ -104,3 +105,4 @@ extern bool default_hard_regno_scratch_ok (unsigned int);\n extern bool default_target_option_valid_attribute_p (tree, tree, tree, int);\n extern bool default_target_option_pragma_parse (tree, tree);\n extern bool default_target_option_can_inline_p (tree, tree);\n+extern unsigned int default_case_values_threshold (void);"}]}