{"sha": "0cb4b758f5372ed1b5be14f79723ad59afba25f2", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGNiNGI3NThmNTM3MmVkMWI1YmUxNGY3OTcyM2FkNTlhZmJhMjVmMg==", "commit": {"author": {"name": "Jeff Law", "email": "law@redhat.com", "date": "2017-01-15T09:34:01Z"}, "committer": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "2017-01-15T09:34:01Z"}, "message": "re PR tree-optimization/79090 (DSE wrongly removes store at variable offset)\n\n\tPR tree-optimization/79090\n\t* tree-ssa-dse.c (valid_ao_ref_for_dse): Reject zero length and\n\tvariable length stores.\n\t(compute_trims): Delete dead assignment to *trim_tail.\n\t(dse_dom_walker::dse_optimize_stmt): Optimize mem* calls with\n\tzero length.\n\nFrom-SVN: r244472", "tree": {"sha": "c0cef117b1e3d8ee31f6df5a6028a19c1339a086", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c0cef117b1e3d8ee31f6df5a6028a19c1339a086"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0cb4b758f5372ed1b5be14f79723ad59afba25f2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0cb4b758f5372ed1b5be14f79723ad59afba25f2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0cb4b758f5372ed1b5be14f79723ad59afba25f2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0cb4b758f5372ed1b5be14f79723ad59afba25f2/comments", "author": null, "committer": null, "parents": [{"sha": "3d812e26eab44f72c6f047ea9a2b71dcbe009878", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3d812e26eab44f72c6f047ea9a2b71dcbe009878", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3d812e26eab44f72c6f047ea9a2b71dcbe009878"}], "stats": {"total": 22, "additions": 21, "deletions": 1}, "files": [{"sha": "36982c69df1cd9535fe5a1b3119cd42b3d319b4e", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0cb4b758f5372ed1b5be14f79723ad59afba25f2/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0cb4b758f5372ed1b5be14f79723ad59afba25f2/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=0cb4b758f5372ed1b5be14f79723ad59afba25f2", "patch": "@@ -1,3 +1,12 @@\n+2017-01-14  Jeff Law  <law@redhat.com>\n+\n+\tPR tree-optimization/79090\n+\t* tree-ssa-dse.c (valid_ao_ref_for_dse): Reject zero length and\n+\tvariable length stores.\n+\t(compute_trims): Delete dead assignment to *trim_tail.\n+\t(dse_dom_walker::dse_optimize_stmt): Optimize mem* calls with\n+\tzero length.\n+\n 2017-01-14  Bernd Schmidt  <bschmidt@redhat.com>\n \n \tPR rtl-optimization/78626"}, {"sha": "65dcb12d8b0c1a415c1b8ad7deb074700cda2e6f", "filename": "gcc/tree-ssa-dse.c", "status": "modified", "additions": 12, "deletions": 1, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0cb4b758f5372ed1b5be14f79723ad59afba25f2/gcc%2Ftree-ssa-dse.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0cb4b758f5372ed1b5be14f79723ad59afba25f2/gcc%2Ftree-ssa-dse.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-dse.c?ref=0cb4b758f5372ed1b5be14f79723ad59afba25f2", "patch": "@@ -129,6 +129,8 @@ valid_ao_ref_for_dse (ao_ref *ref)\n {\n   return (ao_ref_base (ref)\n \t  && ref->max_size != -1\n+\t  && ref->size != 0\n+\t  && ref->max_size == ref->size\n \t  && (ref->offset % BITS_PER_UNIT) == 0\n \t  && (ref->size % BITS_PER_UNIT) == 0\n \t  && (ref->size != -1));\n@@ -221,7 +223,6 @@ compute_trims (ao_ref *ref, sbitmap live, int *trim_head, int *trim_tail)\n      the REF to compute the trims.  */\n \n   /* Now identify how much, if any of the tail we can chop off.  */\n-  *trim_tail = 0;\n   int last_orig = (ref->size / BITS_PER_UNIT) - 1;\n   int last_live = bitmap_last_set_bit (live);\n   *trim_tail = (last_orig - last_live) & ~0x1;\n@@ -700,6 +701,16 @@ dse_dom_walker::dse_optimize_stmt (gimple_stmt_iterator *gsi)\n \t  case BUILT_IN_MEMMOVE:\n \t  case BUILT_IN_MEMSET:\n \t    {\n+\t      /* Occasionally calls with an explicit length of zero\n+\t\t show up in the IL.  It's pointless to do analysis\n+\t\t on them, they're trivially dead.  */\n+\t      tree size = gimple_call_arg (stmt, 2);\n+\t      if (integer_zerop (size))\n+\t\t{\n+\t\t  delete_dead_call (gsi);\n+\t\t  return;\n+\t\t}\n+\n \t      gimple *use_stmt;\n \t      enum dse_store_status store_status;\n \t      m_byte_tracking_enabled"}]}