{"sha": "6141b7db4599e176bddab4b4573d4e08a8284ed7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjE0MWI3ZGI0NTk5ZTE3NmJkZGFiNGI0NTczZDRlMDhhODI4NGVkNw==", "commit": {"author": {"name": "Richard Guenther", "email": "rguenther@suse.de", "date": "2010-05-14T12:36:28Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2010-05-14T12:36:28Z"}, "message": "re PR tree-optimization/44124 (valgrind reports invalid read while compiling compile/pr34091.c)\n\n2010-05-14  Richard Guenther  <rguenther@suse.de>\n\n\tPR tree-optimization/44124\n\t* tree-ssa-sccvn.c (vn_nary_may_trap): Fix invalid memory access.\n\nFrom-SVN: r159390", "tree": {"sha": "a71ce6cdfdeebe82a1aa1ce4bc29ca2a5d7ae297", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a71ce6cdfdeebe82a1aa1ce4bc29ca2a5d7ae297"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6141b7db4599e176bddab4b4573d4e08a8284ed7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6141b7db4599e176bddab4b4573d4e08a8284ed7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6141b7db4599e176bddab4b4573d4e08a8284ed7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6141b7db4599e176bddab4b4573d4e08a8284ed7/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "88e09c797b51a5351ae3a7c599b530cfb2708be6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/88e09c797b51a5351ae3a7c599b530cfb2708be6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/88e09c797b51a5351ae3a7c599b530cfb2708be6"}], "stats": {"total": 10, "additions": 8, "deletions": 2}, "files": [{"sha": "936da30123c0e3e7ffa5cd4f78e0c7dfc5859ad3", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6141b7db4599e176bddab4b4573d4e08a8284ed7/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6141b7db4599e176bddab4b4573d4e08a8284ed7/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=6141b7db4599e176bddab4b4573d4e08a8284ed7", "patch": "@@ -1,3 +1,8 @@\n+2010-05-14  Richard Guenther  <rguenther@suse.de>\n+\n+\tPR tree-optimization/44124\n+\t* tree-ssa-sccvn.c (vn_nary_may_trap): Fix invalid memory access.\n+\n 2010-05-14  Alan Modra  <amodra@gmail.com>\n \n \tPR target/44075"}, {"sha": "0a7feafe0d7fda3627692c62b30152dd2019ddaf", "filename": "gcc/tree-ssa-sccvn.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6141b7db4599e176bddab4b4573d4e08a8284ed7/gcc%2Ftree-ssa-sccvn.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6141b7db4599e176bddab4b4573d4e08a8284ed7/gcc%2Ftree-ssa-sccvn.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-sccvn.c?ref=6141b7db4599e176bddab4b4573d4e08a8284ed7", "patch": "@@ -3408,7 +3408,7 @@ bool\n vn_nary_may_trap (vn_nary_op_t nary)\n {\n   tree type;\n-  tree rhs2;\n+  tree rhs2 = NULL_TREE;\n   bool honor_nans = false;\n   bool honor_snans = false;\n   bool fp_operation = false;\n@@ -3431,7 +3431,8 @@ vn_nary_may_trap (vn_nary_op_t nary)\n \t       && TYPE_OVERFLOW_TRAPS (type))\n \thonor_trapv = true;\n     }\n-  rhs2 = nary->op[1];\n+  if (nary->length >= 2)\n+    rhs2 = nary->op[1];\n   ret = operation_could_trap_helper_p (nary->opcode, fp_operation,\n \t\t\t\t       honor_trapv,\n \t\t\t\t       honor_nans, honor_snans, rhs2,"}]}