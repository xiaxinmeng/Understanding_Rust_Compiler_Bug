{"sha": "e26584b265dc2af4e95d23c4bdd89462ea508b69", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTI2NTg0YjI2NWRjMmFmNGU5NWQyM2M0YmRkODk0NjJlYTUwOGI2OQ==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2018-11-30T23:26:41Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2018-11-30T23:26:41Z"}, "message": "re PR testsuite/85368 (phi-opt-11 test fails on IBM Z)\n\n\tPR testsuite/85368\n\t* params.def (PARAM_LOGICAL_OP_NON_SHORT_CIRCUIT): New param.\n\t* tree-ssa-ifcombine.c (ifcombine_ifandif): If\n\t--param logical-op-non-short-circuit is present, override\n\tLOGICAL_OP_NON_SHORT_CIRCUIT value from the param.\n\t* fold-const.c (fold_range_test, fold_truth_andor): Likewise.\n\n\t* lib/target-supports.exp (logical_op_short_circuit): Remove.\n\t* gcc.dg/builtin-bswap-7.c: Remove logical_op_short_circuit\n\teffective target, drop -mbranch-cost= options from the test and\n\tinstead pass --param logical-op-non-short-circuit=0 or\n\t--param logical-op-non-short-circuit=1 depending on what the\n\ttests meant to test.\n\t* gcc.dg/pr21643.c: Likewise.\n\t* gcc.dg/tree-ssa/ssa-ifcombine-ccmp-2.c: Likewise.\n\t* gcc.dg/tree-ssa/phi-opt-11.c: Likewise.\n\t* gcc.dg/tree-ssa/ssa-ifcombine-ccmp-1.c: Likewise.\n\t* gcc.dg/tree-ssa/ssa-dom-thread-4.c: Likewise.\n\t* gcc.dg/tree-ssa/ssa-ifcombine-ccmp-3.c: Likewise.\n\t* gcc.dg/tree-ssa/ssa-thread-14.c: Likewise.\n\t* gcc.dg/tree-ssa/vrp47.c: Likewise.\n\t* gcc.dg/tree-ssa/ssa-dom-thread-11.c: Likewise.\n\t* gcc.dg/tree-ssa/ssa-dom-thread-16.c: Likewise.\n\t* gcc.dg/tree-ssa/ssa-dom-thread-14.c: Likewise.\n\t* gcc.dg/tree-ssa/ssa-ifcombine-ccmp-5.c: Likewise.\n\t* gcc.dg/tree-ssa/vrp87.c: Likewise.\n\t* gcc.dg/tree-ssa/ssa-ifcombine-ccmp-6.c: Likewise.\n\t* gcc.dg/tree-ssa/phi-opt-2.c: Likewise.\n\t* gcc.dg/tree-ssa/ssa-ifcombine-13.c: Likewise.\n\t* gcc.dg/tree-ssa/ssa-thread-11.c: Likewise.\n\t* gcc.dg/tree-ssa/ssa-ifcombine-ccmp-4.c: Likewise.\n\t* gcc.dg/tree-ssa/forwprop-28.c: Likewise.\n\t* gcc.dg/binop-xor1.c: Likewise.\n\t* gcc.dg/pr46309.c: Likewise.\n\t* gcc.dg/tree-ssa/ssa-dom-thread-18.c: New test.\n\t* gcc.dg/tree-ssa/reassoc-32.c: Add\n\t--param logical-op-non-short-circuit=1 to dg-options.\n\t* gcc.dg/tree-ssa/reassoc-33.c: Likewise.\n\t* gcc.dg/tree-ssa/reassoc-34.c: Likewise.\n\t* gcc.dg/tree-ssa/reassoc-35.c: Likewise.\n\t* gcc.dg/tree-ssa/reassoc-36.c: Likewise.\n\nFrom-SVN: r266700", "tree": {"sha": "3f6973695d8e1b6e54221177085dd8ab887441d1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3f6973695d8e1b6e54221177085dd8ab887441d1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e26584b265dc2af4e95d23c4bdd89462ea508b69", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e26584b265dc2af4e95d23c4bdd89462ea508b69", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e26584b265dc2af4e95d23c4bdd89462ea508b69", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e26584b265dc2af4e95d23c4bdd89462ea508b69/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "2b86de4cc6bf812ecdd343dd426da8497a93d479", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2b86de4cc6bf812ecdd343dd426da8497a93d479", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2b86de4cc6bf812ecdd343dd426da8497a93d479"}], "stats": {"total": 273, "additions": 145, "deletions": 128}, "files": [{"sha": "f319daf14cf0a8a8276a0914a0dbe3e1a68cef47", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e26584b265dc2af4e95d23c4bdd89462ea508b69/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e26584b265dc2af4e95d23c4bdd89462ea508b69/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=e26584b265dc2af4e95d23c4bdd89462ea508b69", "patch": "@@ -1,3 +1,12 @@\n+2018-11-30  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR testsuite/85368\n+\t* params.def (PARAM_LOGICAL_OP_NON_SHORT_CIRCUIT): New param.\n+\t* tree-ssa-ifcombine.c (ifcombine_ifandif): If\n+\t--param logical-op-non-short-circuit is present, override\n+\tLOGICAL_OP_NON_SHORT_CIRCUIT value from the param.\n+\t* fold-const.c (fold_range_test, fold_truth_andor): Likewise.\n+\n 2018-11-30  Jeff Law  <law@redhat.com>\n \n \t* optabs.c (expand_binop): Use \"machine_mode\" rather than"}, {"sha": "45de94c93c5278ebedd698aa0eba481ce91fe93e", "filename": "gcc/fold-const.c", "status": "modified", "additions": 14, "deletions": 7, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e26584b265dc2af4e95d23c4bdd89462ea508b69/gcc%2Ffold-const.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e26584b265dc2af4e95d23c4bdd89462ea508b69/gcc%2Ffold-const.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffold-const.c?ref=e26584b265dc2af4e95d23c4bdd89462ea508b69", "patch": "@@ -5572,12 +5572,15 @@ fold_range_test (location_t loc, enum tree_code code, tree type,\n   /* On machines where the branch cost is expensive, if this is a\n      short-circuited branch and the underlying object on both sides\n      is the same, make a non-short-circuit operation.  */\n-  else if (LOGICAL_OP_NON_SHORT_CIRCUIT\n-\t   && !flag_sanitize_coverage\n-\t   && lhs != 0 && rhs != 0\n-\t   && (code == TRUTH_ANDIF_EXPR\n-\t       || code == TRUTH_ORIF_EXPR)\n-\t   && operand_equal_p (lhs, rhs, 0))\n+  bool logical_op_non_short_circuit = LOGICAL_OP_NON_SHORT_CIRCUIT;\n+  if (PARAM_VALUE (PARAM_LOGICAL_OP_NON_SHORT_CIRCUIT) != -1)\n+    logical_op_non_short_circuit\n+      = PARAM_VALUE (PARAM_LOGICAL_OP_NON_SHORT_CIRCUIT);\n+  if (logical_op_non_short_circuit\n+      && !flag_sanitize_coverage\n+      && lhs != 0 && rhs != 0\n+      && (code == TRUTH_ANDIF_EXPR || code == TRUTH_ORIF_EXPR)\n+      && operand_equal_p (lhs, rhs, 0))\n     {\n       /* If simple enough, just rewrite.  Otherwise, make a SAVE_EXPR\n \t unless we are at top level or LHS contains a PLACEHOLDER_EXPR, in\n@@ -8229,7 +8232,11 @@ fold_truth_andor (location_t loc, enum tree_code code, tree type,\n   if ((tem = fold_truth_andor_1 (loc, code, type, arg0, arg1)) != 0)\n     return tem;\n \n-  if (LOGICAL_OP_NON_SHORT_CIRCUIT\n+  bool logical_op_non_short_circuit = LOGICAL_OP_NON_SHORT_CIRCUIT;\n+  if (PARAM_VALUE (PARAM_LOGICAL_OP_NON_SHORT_CIRCUIT) != -1)\n+    logical_op_non_short_circuit\n+      = PARAM_VALUE (PARAM_LOGICAL_OP_NON_SHORT_CIRCUIT);\n+  if (logical_op_non_short_circuit\n       && !flag_sanitize_coverage\n       && (code == TRUTH_AND_EXPR\n           || code == TRUTH_ANDIF_EXPR"}, {"sha": "982f180a312a54d4c8c8ed3eb82c5a4f49f02546", "filename": "gcc/params.def", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e26584b265dc2af4e95d23c4bdd89462ea508b69/gcc%2Fparams.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e26584b265dc2af4e95d23c4bdd89462ea508b69/gcc%2Fparams.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fparams.def?ref=e26584b265dc2af4e95d23c4bdd89462ea508b69", "patch": "@@ -1360,6 +1360,11 @@ DEFPARAM(PARAM_AVOID_FMA_MAX_BITS,\n \t \"Maximum number of bits for which we avoid creating FMAs.\",\n \t 0, 0, 512)\n \n+DEFPARAM(PARAM_LOGICAL_OP_NON_SHORT_CIRCUIT,\n+\t \"logical-op-non-short-circuit\",\n+\t \"True if a non-short-circuit operation is optimal.\",\n+\t -1, -1, 1)\n+\n /*\n \n Local variables:"}, {"sha": "b48e353d05d913c55ee0053a89766b5239d08872", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e26584b265dc2af4e95d23c4bdd89462ea508b69/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e26584b265dc2af4e95d23c4bdd89462ea508b69/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=e26584b265dc2af4e95d23c4bdd89462ea508b69", "patch": "@@ -1,3 +1,41 @@\n+2018-11-30  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR testsuite/85368\n+\t* lib/target-supports.exp (logical_op_short_circuit): Remove.\n+\t* gcc.dg/builtin-bswap-7.c: Remove logical_op_short_circuit\n+\teffective target, drop -mbranch-cost= options from the test and\n+\tinstead pass --param logical-op-non-short-circuit=0 or\n+\t--param logical-op-non-short-circuit=1 depending on what the\n+\ttests meant to test.\n+\t* gcc.dg/pr21643.c: Likewise.\n+\t* gcc.dg/tree-ssa/ssa-ifcombine-ccmp-2.c: Likewise.\n+\t* gcc.dg/tree-ssa/phi-opt-11.c: Likewise.\n+\t* gcc.dg/tree-ssa/ssa-ifcombine-ccmp-1.c: Likewise.\n+\t* gcc.dg/tree-ssa/ssa-dom-thread-4.c: Likewise.\n+\t* gcc.dg/tree-ssa/ssa-ifcombine-ccmp-3.c: Likewise.\n+\t* gcc.dg/tree-ssa/ssa-thread-14.c: Likewise.\n+\t* gcc.dg/tree-ssa/vrp47.c: Likewise.\n+\t* gcc.dg/tree-ssa/ssa-dom-thread-11.c: Likewise.\n+\t* gcc.dg/tree-ssa/ssa-dom-thread-16.c: Likewise.\n+\t* gcc.dg/tree-ssa/ssa-dom-thread-14.c: Likewise.\n+\t* gcc.dg/tree-ssa/ssa-ifcombine-ccmp-5.c: Likewise.\n+\t* gcc.dg/tree-ssa/vrp87.c: Likewise.\n+\t* gcc.dg/tree-ssa/ssa-ifcombine-ccmp-6.c: Likewise.\n+\t* gcc.dg/tree-ssa/phi-opt-2.c: Likewise.\n+\t* gcc.dg/tree-ssa/ssa-ifcombine-13.c: Likewise.\n+\t* gcc.dg/tree-ssa/ssa-thread-11.c: Likewise.\n+\t* gcc.dg/tree-ssa/ssa-ifcombine-ccmp-4.c: Likewise.\n+\t* gcc.dg/tree-ssa/forwprop-28.c: Likewise.\n+\t* gcc.dg/binop-xor1.c: Likewise.\n+\t* gcc.dg/pr46309.c: Likewise.\n+\t* gcc.dg/tree-ssa/ssa-dom-thread-18.c: New test.\n+\t* gcc.dg/tree-ssa/reassoc-32.c: Add\n+\t--param logical-op-non-short-circuit=1 to dg-options.\n+\t* gcc.dg/tree-ssa/reassoc-33.c: Likewise.\n+\t* gcc.dg/tree-ssa/reassoc-34.c: Likewise.\n+\t* gcc.dg/tree-ssa/reassoc-35.c: Likewise.\n+\t* gcc.dg/tree-ssa/reassoc-36.c: Likewise.\n+\n 2018-11-30  Wilco Dijkstra  <wdijkstr@arm.com>\n \n \tPR middle-end/64242"}, {"sha": "dea11e50d5d284a84cb40060a8a27df5b83b363b", "filename": "gcc/testsuite/gcc.dg/binop-xor1.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e26584b265dc2af4e95d23c4bdd89462ea508b69/gcc%2Ftestsuite%2Fgcc.dg%2Fbinop-xor1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e26584b265dc2af4e95d23c4bdd89462ea508b69/gcc%2Ftestsuite%2Fgcc.dg%2Fbinop-xor1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fbinop-xor1.c?ref=e26584b265dc2af4e95d23c4bdd89462ea508b69", "patch": "@@ -1,10 +1,10 @@\n /* { dg-do compile } */\n-/* { dg-options \"-O2 -fdump-tree-optimized\" } */\n+/* { dg-options \"-O2 -fdump-tree-optimized --param logical-op-non-short-circuit=1\" } */\n \n int\n foo (int a, int b, int c)\n {\n   return ((a && !b && c) || (!a && b && c));\n }\n \n-/* { dg-final { scan-tree-dump-times \"\\\\\\^\" 1 \"optimized\" { xfail logical_op_short_circuit } } } */\n+/* { dg-final { scan-tree-dump-times \"\\\\\\^\" 1 \"optimized\" } } */"}, {"sha": "35bcee3784794e859373db68c830a5e764c62868", "filename": "gcc/testsuite/gcc.dg/builtin-bswap-7.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e26584b265dc2af4e95d23c4bdd89462ea508b69/gcc%2Ftestsuite%2Fgcc.dg%2Fbuiltin-bswap-7.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e26584b265dc2af4e95d23c4bdd89462ea508b69/gcc%2Ftestsuite%2Fgcc.dg%2Fbuiltin-bswap-7.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fbuiltin-bswap-7.c?ref=e26584b265dc2af4e95d23c4bdd89462ea508b69", "patch": "@@ -3,9 +3,9 @@\n /* { dg-require-effective-target lp64 } */\n /* { dg-options \"-O -fdump-rtl-combine\" } */\n \n-/* The branch cost setting prevents the return value from being\n+/* The param setting prevents the return value from being\n    calculated with arithmetic instead of doing a compare.  */\n-/* { dg-additional-options \"-mbranch-cost=0\" { target branch_cost } } */\n+/* { dg-additional-options \"--param logical-op-non-short-circuit=0\" } */\n \n #include <stdint.h>\n "}, {"sha": "4e7f93d351ab15cfae95f54fb441e7b3ea586a87", "filename": "gcc/testsuite/gcc.dg/pr21643.c", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e26584b265dc2af4e95d23c4bdd89462ea508b69/gcc%2Ftestsuite%2Fgcc.dg%2Fpr21643.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e26584b265dc2af4e95d23c4bdd89462ea508b69/gcc%2Ftestsuite%2Fgcc.dg%2Fpr21643.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr21643.c?ref=e26584b265dc2af4e95d23c4bdd89462ea508b69", "patch": "@@ -1,7 +1,6 @@\n /* PR tree-optimization/21643 */\n /* { dg-do compile } */\n-/* { dg-options \"-O2 -fdump-tree-reassoc1-details\" } */\n-/* { dg-additional-options \"-mbranch-cost=2\" { target branch_cost } } */\n+/* { dg-options \"-O2 -fdump-tree-reassoc1-details --param logical-op-non-short-circuit=1\" } */\n \n int\n f1 (unsigned char c)\n@@ -87,5 +86,4 @@ f9 (unsigned char c)\n   return 1;\n }\n \n-/* { dg-final { scan-tree-dump-times \"Optimizing range tests c_\\[0-9\\]*.D. -.0, 31. and -.32, 32.\\[\\n\\r\\]* into\" 6 \"reassoc1\" { target { ! logical_op_short_circuit } } } }  */\n-/* { dg-final { scan-tree-dump-times \"Optimizing range tests c_\\[0-9\\]*.D. -.0, 31. and -.32, 32.\\[\\n\\r\\]* into\" 5 \"reassoc1\" { target logical_op_short_circuit } } } */\n+/* { dg-final { scan-tree-dump-times \"Optimizing range tests c_\\[0-9\\]*.D. -.0, 31. and -.32, 32.\\[\\n\\r\\]* into\" 6 \"reassoc1\" } }  */"}, {"sha": "615d6574ef97ed393f3ab2ba58e71556d18b1ef5", "filename": "gcc/testsuite/gcc.dg/pr46309.c", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e26584b265dc2af4e95d23c4bdd89462ea508b69/gcc%2Ftestsuite%2Fgcc.dg%2Fpr46309.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e26584b265dc2af4e95d23c4bdd89462ea508b69/gcc%2Ftestsuite%2Fgcc.dg%2Fpr46309.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr46309.c?ref=e26584b265dc2af4e95d23c4bdd89462ea508b69", "patch": "@@ -1,10 +1,6 @@\n /* PR tree-optimization/46309 */\n-/* { dg-do compile { target { { ! logical_op_short_circuit } || { mips*-*-* avr*-*-* } } } } */\n-/* { dg-options \"-O2 -fdump-tree-reassoc-details\" } */\n-/* The transformation depends on BRANCH_COST being greater than 1\n-   (see the notes in the PR), so try to force that.  */\n-/* { dg-additional-options \"-mtune=octeon2\" { target mips*-*-* } } */\n-/* { dg-additional-options \"-mbranch-cost=2\" { target branch_cost } } */\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -fdump-tree-reassoc-details --param logical-op-non-short-circuit=1\" } */\n \n int\n f1 (int a)"}, {"sha": "4f88a2674b6590ec415c446b3e8e523af6e134c2", "filename": "gcc/testsuite/gcc.dg/tree-ssa/forwprop-28.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e26584b265dc2af4e95d23c4bdd89462ea508b69/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fforwprop-28.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e26584b265dc2af4e95d23c4bdd89462ea508b69/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fforwprop-28.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fforwprop-28.c?ref=e26584b265dc2af4e95d23c4bdd89462ea508b69", "patch": "@@ -1,7 +1,7 @@\n /* Setting LOGICAL_OP_NON_SHORT_CIRCUIT to 0 leads to two conditional jumps\n    when evaluating an && condition.  VRP is not able to optimize this.  */\n-/* { dg-do compile { target { ! { logical_op_short_circuit || { m68k*-*-* mmix*-*-* bfin*-*-* v850*-*-* moxie*-*-* cris*-*-* m32c*-*-* fr30*-*-* mcore*-*-* powerpc*-*-* xtensa*-*-* hppa*-*-* } } } } } */\n-/* { dg-options \"-O2 -fdump-tree-forwprop1-details\" } */\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -fdump-tree-forwprop1-details --param logical-op-non-short-circuit=1\" } */\n \n extern char *frob (void);\n extern _Bool testit (void);"}, {"sha": "14c82cd52165477b6c9bc1a5f731469eb5666627", "filename": "gcc/testsuite/gcc.dg/tree-ssa/phi-opt-11.c", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e26584b265dc2af4e95d23c4bdd89462ea508b69/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fphi-opt-11.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e26584b265dc2af4e95d23c4bdd89462ea508b69/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fphi-opt-11.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fphi-opt-11.c?ref=e26584b265dc2af4e95d23c4bdd89462ea508b69", "patch": "@@ -1,6 +1,5 @@\n /* { dg-do compile } */\n-/* { dg-options \"-O1 -fdump-tree-optimized\" } */\n-/* { dg-additional-options \"-mbranch-cost=2\" { target branch_cost } } */\n+/* { dg-options \"-O1 -fdump-tree-optimized --param logical-op-non-short-circuit=1\" } */\n \n int f(int a, int b, int c)\n {\n@@ -23,5 +22,4 @@ int h(int a, int b, int c, int d)\n  return a;\n }\n \n-/* { dg-final { scan-tree-dump-times \"if\" 0 \"optimized\" { target { { ! logical_op_short_circuit } || branch_cost } } } } */\n-/* { dg-final { scan-tree-dump-times \"if\" 2 \"optimized\" { target { logical_op_short_circuit && { ! branch_cost } } } } } */\n+/* { dg-final { scan-tree-dump-times \"if\" 0 \"optimized\" } } */"}, {"sha": "5c7815e2c1a1951527c2217131c4d3dcabb58a7d", "filename": "gcc/testsuite/gcc.dg/tree-ssa/phi-opt-2.c", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e26584b265dc2af4e95d23c4bdd89462ea508b69/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fphi-opt-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e26584b265dc2af4e95d23c4bdd89462ea508b69/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fphi-opt-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fphi-opt-2.c?ref=e26584b265dc2af4e95d23c4bdd89462ea508b69", "patch": "@@ -1,6 +1,5 @@\n /* { dg-do compile } */\n-/* { dg-options \"-O1 -fdump-tree-optimized\" } */\n-/* { dg-additional-options \"-mbranch-cost=1\" { target branch_cost } } */\n+/* { dg-options \"-O1 -fdump-tree-optimized --param logical-op-non-short-circuit=0\" } */\n \n _Bool f1(_Bool a, _Bool b)\n {\n@@ -21,4 +20,4 @@ _Bool f1(_Bool a, _Bool b)\n    which can be fixed in a different patch).\n    Test this only when known to be !LOGICAL_OP_NON_SHORT_CIRCUIT,\n    otherwise ifcombine may convert this into return a & b;.  */\n-/* { dg-final { scan-tree-dump-times \"if\" 1 \"optimized\" { target { i?86-*-* x86_64-*-* mips*-*-* s390*-*-* avr*-*-* } } } } */\n+/* { dg-final { scan-tree-dump-times \"if\" 1 \"optimized\" } } */"}, {"sha": "944362ad076fc443131ac127d55c2919630ce95d", "filename": "gcc/testsuite/gcc.dg/tree-ssa/reassoc-32.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e26584b265dc2af4e95d23c4bdd89462ea508b69/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Freassoc-32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e26584b265dc2af4e95d23c4bdd89462ea508b69/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Freassoc-32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Freassoc-32.c?ref=e26584b265dc2af4e95d23c4bdd89462ea508b69", "patch": "@@ -1,6 +1,6 @@\n /* { dg-do run { target { ! \"m68k*-*-* mmix*-*-* bfin*-*-* v850*-*-* moxie*-*-* cris*-*-* m32c*-*-* fr30*-*-* mcore*-*-* powerpc*-*-* xtensa*-*-*\"} } } */\n \n-/* { dg-options \"-O2 -fno-inline -fdump-tree-reassoc1-details\" } */\n+/* { dg-options \"-O2 -fno-inline -fdump-tree-reassoc1-details --param logical-op-non-short-circuit=1\" } */\n /* { dg-additional-options \"-mbranch-cost=2\" { target branch_cost } } */\n \n "}, {"sha": "28cd7799ce1a1be642ef6c3ea5879c6848d7fcbf", "filename": "gcc/testsuite/gcc.dg/tree-ssa/reassoc-33.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e26584b265dc2af4e95d23c4bdd89462ea508b69/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Freassoc-33.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e26584b265dc2af4e95d23c4bdd89462ea508b69/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Freassoc-33.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Freassoc-33.c?ref=e26584b265dc2af4e95d23c4bdd89462ea508b69", "patch": "@@ -1,6 +1,6 @@\n /* { dg-do run { target { ! \"m68k*-*-* mmix*-*-* bfin*-*-* v850*-*-* moxie*-*-* cris*-*-* m32c*-*-* fr30*-*-* mcore*-*-* powerpc*-*-* xtensa*-*-* hppa*-*-* nios2*-*-* or1k-*-*-*\"} } } */\n \n-/* { dg-options \"-O2 -fno-inline -fdump-tree-reassoc1-details\" } */\n+/* { dg-options \"-O2 -fno-inline -fdump-tree-reassoc1-details --param logical-op-non-short-circuit=1\" } */\n /* { dg-additional-options \"-mbranch-cost=2\" { target branch_cost } } */\n \n int test (int a, int b, int c)"}, {"sha": "f1087113f5154d8e5305d7facc21d09ebd2a3f60", "filename": "gcc/testsuite/gcc.dg/tree-ssa/reassoc-34.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e26584b265dc2af4e95d23c4bdd89462ea508b69/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Freassoc-34.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e26584b265dc2af4e95d23c4bdd89462ea508b69/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Freassoc-34.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Freassoc-34.c?ref=e26584b265dc2af4e95d23c4bdd89462ea508b69", "patch": "@@ -1,6 +1,6 @@\n /* { dg-do run { target { ! \"m68k*-*-* mmix*-*-* bfin*-*-* v850*-*-* moxie*-*-* cris*-*-* m32c*-*-* fr30*-*-* mcore*-*-* powerpc*-*-* xtensa*-*-* hppa*-*-* nios2*-*-* or1k*-*-*\"} } } */\n \n-/* { dg-options \"-O2 -fno-inline -fdump-tree-reassoc1-details\" } */\n+/* { dg-options \"-O2 -fno-inline -fdump-tree-reassoc1-details --param logical-op-non-short-circuit=1\" } */\n /* { dg-additional-options \"-mbranch-cost=2\" { target branch_cost } } */\n \n int test (int a, int b, int c)"}, {"sha": "98ea2ad9ebe1844be113dc9df829dce7545dd237", "filename": "gcc/testsuite/gcc.dg/tree-ssa/reassoc-35.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e26584b265dc2af4e95d23c4bdd89462ea508b69/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Freassoc-35.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e26584b265dc2af4e95d23c4bdd89462ea508b69/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Freassoc-35.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Freassoc-35.c?ref=e26584b265dc2af4e95d23c4bdd89462ea508b69", "patch": "@@ -1,6 +1,6 @@\n /* { dg-do run { target { ! \"m68k*-*-* mmix*-*-* bfin*-*-* v850*-*-* moxie*-*-* cris*-*-* m32c*-*-* fr30*-*-* mcore*-*-* powerpc*-*-* xtensa*-*-* hppa*-*-* nios2*-*-* or1k*-*-*\"} } } */\n \n-/* { dg-options \"-O2 -fno-inline -fdump-tree-reassoc1-details\" } */\n+/* { dg-options \"-O2 -fno-inline -fdump-tree-reassoc1-details --param logical-op-non-short-circuit=1\" } */\n /* { dg-additional-options \"-mbranch-cost=2\" { target branch_cost } } */\n \n int test (unsigned int a, int b, int c)"}, {"sha": "d91841023833e31abd7e42452401688c4bd25dac", "filename": "gcc/testsuite/gcc.dg/tree-ssa/reassoc-36.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e26584b265dc2af4e95d23c4bdd89462ea508b69/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Freassoc-36.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e26584b265dc2af4e95d23c4bdd89462ea508b69/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Freassoc-36.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Freassoc-36.c?ref=e26584b265dc2af4e95d23c4bdd89462ea508b69", "patch": "@@ -1,6 +1,6 @@\n /* { dg-do run { target { ! \"m68k*-*-* mmix*-*-* bfin*-*-* v850*-*-* moxie*-*-* cris*-*-* m32c*-*-* fr30*-*-* mcore*-*-* powerpc*-*-* xtensa*-*-* hppa*-*-* nios2*-*-* or1k*-*-*\"} } } */\n \n-/* { dg-options \"-O2 -fno-inline -fdump-tree-reassoc1-details\" } */\n+/* { dg-options \"-O2 -fno-inline -fdump-tree-reassoc1-details --param logical-op-non-short-circuit=1\" } */\n /* { dg-additional-options \"-mbranch-cost=2\" { target branch_cost } } */\n \n int test (int a, int b, int c)"}, {"sha": "5f90613263d3d013ff02097d1504ae3952a3907e", "filename": "gcc/testsuite/gcc.dg/tree-ssa/ssa-dom-thread-11.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e26584b265dc2af4e95d23c4bdd89462ea508b69/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-dom-thread-11.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e26584b265dc2af4e95d23c4bdd89462ea508b69/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-dom-thread-11.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-dom-thread-11.c?ref=e26584b265dc2af4e95d23c4bdd89462ea508b69", "patch": "@@ -1,5 +1,5 @@\n-/* { dg-do compile { target { ! logical_op_short_circuit  } } } */\n-/* { dg-options \"-O2 -fdump-tree-dom2-details\" } */\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -fdump-tree-dom2-details --param logical-op-non-short-circuit=1\" } */\n \n static int *bb_ticks;\n extern void frob (void);"}, {"sha": "4e6a911506e17dfa78f318668f7490f38a875c8f", "filename": "gcc/testsuite/gcc.dg/tree-ssa/ssa-dom-thread-14.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e26584b265dc2af4e95d23c4bdd89462ea508b69/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-dom-thread-14.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e26584b265dc2af4e95d23c4bdd89462ea508b69/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-dom-thread-14.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-dom-thread-14.c?ref=e26584b265dc2af4e95d23c4bdd89462ea508b69", "patch": "@@ -1,5 +1,5 @@\n-/* { dg-do compile { target { ! logical_op_short_circuit  } } } */\n-/* { dg-options \"-O2 -fdump-tree-dom2-details -w\" } */\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -fdump-tree-dom2-details -w --param logical-op-non-short-circuit=1\" } */\n \n enum optab_methods\n {"}, {"sha": "ffbdc988e0a1c75b4f69b43fc6ac8c9a2f0a3b96", "filename": "gcc/testsuite/gcc.dg/tree-ssa/ssa-dom-thread-16.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e26584b265dc2af4e95d23c4bdd89462ea508b69/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-dom-thread-16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e26584b265dc2af4e95d23c4bdd89462ea508b69/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-dom-thread-16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-dom-thread-16.c?ref=e26584b265dc2af4e95d23c4bdd89462ea508b69", "patch": "@@ -1,5 +1,5 @@\n-/* { dg-do compile { target { ! logical_op_short_circuit  } } } */\n-/* { dg-options \"-O2 -fdump-tree-dom2-details -w\" } */\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -fdump-tree-dom2-details -w --param logical-op-non-short-circuit=1\" } */\n unsigned char\n validate_subreg (unsigned int offset, unsigned int isize, unsigned int osize, int zz, int qq)\n {"}, {"sha": "d4759b8903b66669df9c4b58483dca68e4b2cfb1", "filename": "gcc/testsuite/gcc.dg/tree-ssa/ssa-dom-thread-18.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e26584b265dc2af4e95d23c4bdd89462ea508b69/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-dom-thread-18.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e26584b265dc2af4e95d23c4bdd89462ea508b69/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-dom-thread-18.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-dom-thread-18.c?ref=e26584b265dc2af4e95d23c4bdd89462ea508b69", "patch": "@@ -0,0 +1,24 @@\n+/* { dg-do compile } */ \n+/* { dg-options \"-O2 -fdump-tree-vrp1-details -fdump-tree-dom2-details -std=gnu89 --param logical-op-non-short-circuit=0\" } */\n+\n+#include \"ssa-dom-thread-4.c\"\n+\n+/* On targets that define LOGICAL_OP_NON_SHORT_CIRCUIT to 0, we split both\n+   \"a_elt || b_elt\" and \"b_elt && kill_elt\" into two conditions each,\n+   rather than using \"(var1 != 0) op (var2 != 0)\".  Also, as on other targets,\n+   we duplicate the header of the inner \"while\" loop.  There are then\n+   4 threading opportunities:\n+\n+   1x \"!a_elt && b_elt\" in the outer \"while\" loop\n+      -> the start of the inner \"while\" loop,\n+\t skipping the known-true \"b_elt\" in the first condition.\n+   1x \"!b_elt\" in the first condition\n+      -> the outer \"while\" loop's continuation point,\n+\t skipping the known-false \"b_elt\" in the second condition.\n+   2x \"kill_elt->indx >= b_elt->indx\" in the first \"while\" loop\n+      -> \"kill_elt->indx == b_elt->indx\" in the second condition,\n+\t skipping the known-true \"b_elt && kill_elt\" in the second\n+\t condition.\n+\n+   All the cases are picked up by VRP1 as jump threads.  */\n+/* { dg-final { scan-tree-dump-times \"Threaded\" 4 \"vrp1\" } } */"}, {"sha": "521754f8d7960a9b42f1de7159fd64d367b7e1d3", "filename": "gcc/testsuite/gcc.dg/tree-ssa/ssa-dom-thread-4.c", "status": "modified", "additions": 2, "deletions": 23, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e26584b265dc2af4e95d23c4bdd89462ea508b69/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-dom-thread-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e26584b265dc2af4e95d23c4bdd89462ea508b69/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-dom-thread-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-dom-thread-4.c?ref=e26584b265dc2af4e95d23c4bdd89462ea508b69", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile } */ \n-/* { dg-options \"-O2 -fdump-tree-vrp1-details -fdump-tree-dom2-details -std=gnu89\" } */\n+/* { dg-options \"-O2 -fdump-tree-vrp1-details -fdump-tree-dom2-details -std=gnu89 --param logical-op-non-short-circuit=1\" } */\n struct bitmap_head_def;\n typedef struct bitmap_head_def *bitmap;\n typedef const struct bitmap_head_def *const_bitmap;\n@@ -58,25 +58,4 @@ bitmap_ior_and_compl (bitmap dst, const_bitmap a, const_bitmap b,\n    code we missed the edge when the first conditional is false\n    (b_elt is zero, which means the second conditional is always\n    zero.  VRP1 catches all three.  */\n-/* { dg-final { scan-tree-dump-times \"Threaded\" 3 \"vrp1\" { target { ! logical_op_short_circuit } } } } */\n-\n-/* On targets that define LOGICAL_OP_NON_SHORT_CIRCUIT to 0, we split both\n-   \"a_elt || b_elt\" and \"b_elt && kill_elt\" into two conditions each,\n-   rather than using \"(var1 != 0) op (var2 != 0)\".  Also, as on other targets,\n-   we duplicate the header of the inner \"while\" loop.  There are then\n-   4 threading opportunities:\n-\n-   1x \"!a_elt && b_elt\" in the outer \"while\" loop\n-      -> the start of the inner \"while\" loop,\n-\t skipping the known-true \"b_elt\" in the first condition.\n-   1x \"!b_elt\" in the first condition\n-      -> the outer \"while\" loop's continuation point,\n-\t skipping the known-false \"b_elt\" in the second condition.\n-   2x \"kill_elt->indx >= b_elt->indx\" in the first \"while\" loop\n-      -> \"kill_elt->indx == b_elt->indx\" in the second condition,\n-\t skipping the known-true \"b_elt && kill_elt\" in the second\n-\t condition.\n-\n-   All the cases are picked up by VRP1 as jump threads.  */\n-/* { dg-final { scan-tree-dump-times \"Threaded\" 4 \"vrp1\" { target logical_op_short_circuit } } } */\n-\n+/* { dg-final { scan-tree-dump-times \"Threaded\" 3 \"vrp1\" } } */"}, {"sha": "425eb3d64811a7d008fad70768e934b4ee38a275", "filename": "gcc/testsuite/gcc.dg/tree-ssa/ssa-ifcombine-13.c", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e26584b265dc2af4e95d23c4bdd89462ea508b69/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-ifcombine-13.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e26584b265dc2af4e95d23c4bdd89462ea508b69/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-ifcombine-13.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-ifcombine-13.c?ref=e26584b265dc2af4e95d23c4bdd89462ea508b69", "patch": "@@ -1,6 +1,5 @@\n /* { dg-do compile } */\n-/* { dg-options \"-O1 -fdump-tree-optimized-details-blocks\" } */\n-/* { dg-additional-options \"-mbranch-cost=2\" { target branch_cost } } */\n+/* { dg-options \"-O1 -fdump-tree-optimized-details-blocks --param logical-op-non-short-circuit=1\" } */\n \n _Bool f1(_Bool a, _Bool b)\n {\n@@ -17,5 +16,5 @@ _Bool f1(_Bool a, _Bool b)\n \n /* For LOGICAL_OP_NON_SHORT_CIRCUIT, this should be optimized\n    into return a & b;, with no ifs.  */\n-/* { dg-final { scan-tree-dump-not \"if\" \"optimized\" { target { i?86-*-* x86_64-*-* s390*-*-* avr*-*-* } } } } */\n+/* { dg-final { scan-tree-dump-not \"if\" \"optimized\" } } */\n /* { dg-final { scan-tree-dump-not \"Invalid sum\" \"optimized\" } } */"}, {"sha": "a550d00fd22bc3d18aa8c999b7ffb409a2ea72ce", "filename": "gcc/testsuite/gcc.dg/tree-ssa/ssa-ifcombine-ccmp-1.c", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e26584b265dc2af4e95d23c4bdd89462ea508b69/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-ifcombine-ccmp-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e26584b265dc2af4e95d23c4bdd89462ea508b69/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-ifcombine-ccmp-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-ifcombine-ccmp-1.c?ref=e26584b265dc2af4e95d23c4bdd89462ea508b69", "patch": "@@ -1,7 +1,5 @@\n-/* { dg-do compile { target { ! { { logical_op_short_circuit && { ! avr-*-* } } || { m68k*-*-* mmix*-*-* bfin*-*-* v850*-*-* moxie*-*-* cris*-*-* m32c*-*-* fr30*-*-* mcore*-*-* powerpc*-*-* xtensa*-*-* arc*-*-* mips*-*-* } } } } } */\n-\n-/* { dg-options \"-O2 -g -fdump-tree-optimized\" } */\n-/* { dg-additional-options \"-mbranch-cost=2\" { target branch_cost } } */\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -g -fdump-tree-optimized --param logical-op-non-short-circuit=1\" } */\n \n int t (int a, int b)\n {"}, {"sha": "6d947c1604bde6ce85f3a614010651641785110e", "filename": "gcc/testsuite/gcc.dg/tree-ssa/ssa-ifcombine-ccmp-2.c", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e26584b265dc2af4e95d23c4bdd89462ea508b69/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-ifcombine-ccmp-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e26584b265dc2af4e95d23c4bdd89462ea508b69/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-ifcombine-ccmp-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-ifcombine-ccmp-2.c?ref=e26584b265dc2af4e95d23c4bdd89462ea508b69", "patch": "@@ -1,7 +1,5 @@\n-/* { dg-do compile { target { ! { { logical_op_short_circuit && { ! avr-*-* } } || { m68k*-*-* mmix*-*-* bfin*-*-* v850*-*-* moxie*-*-* cris*-*-* m32c*-*-* fr30*-*-* mcore*-*-* powerpc*-*-* xtensa*-*-* arc*-*-* mips*-*-* } } } } } */\n-\n-/* { dg-options \"-O2 -g -fdump-tree-optimized\" } */\n-/* { dg-additional-options \"-mbranch-cost=2\" { target branch_cost } } */\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -g -fdump-tree-optimized --param logical-op-non-short-circuit=1\" } */\n \n int t (int a, int b)\n {"}, {"sha": "353e4176cc2d36e83887f34e88db1c32e964b66c", "filename": "gcc/testsuite/gcc.dg/tree-ssa/ssa-ifcombine-ccmp-3.c", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e26584b265dc2af4e95d23c4bdd89462ea508b69/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-ifcombine-ccmp-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e26584b265dc2af4e95d23c4bdd89462ea508b69/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-ifcombine-ccmp-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-ifcombine-ccmp-3.c?ref=e26584b265dc2af4e95d23c4bdd89462ea508b69", "patch": "@@ -1,7 +1,5 @@\n-/* { dg-do compile { target { ! { { logical_op_short_circuit && { ! avr-*-* } } || { m68k*-*-* mmix*-*-* bfin*-*-* v850*-*-* moxie*-*-* cris*-*-* m32c*-*-* fr30*-*-* mcore*-*-* powerpc*-*-* xtensa*-*-* arc*-*-* mips*-*-* } } } } } */\n-\n-/* { dg-options \"-O2 -g -fdump-tree-optimized\" } */\n-/* { dg-additional-options \"-mbranch-cost=2\" { target branch_cost } } */\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -g -fdump-tree-optimized --param logical-op-non-short-circuit=1\" } */\n \n int t (int a, int b)\n {"}, {"sha": "76f40178d37b461ef4c35659804bed1274ad4f4c", "filename": "gcc/testsuite/gcc.dg/tree-ssa/ssa-ifcombine-ccmp-4.c", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e26584b265dc2af4e95d23c4bdd89462ea508b69/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-ifcombine-ccmp-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e26584b265dc2af4e95d23c4bdd89462ea508b69/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-ifcombine-ccmp-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-ifcombine-ccmp-4.c?ref=e26584b265dc2af4e95d23c4bdd89462ea508b69", "patch": "@@ -1,7 +1,5 @@\n-/* { dg-do compile { target { ! { { logical_op_short_circuit && { ! avr-*-* } } || { m68k*-*-* mmix*-*-* bfin*-*-* v850*-*-* moxie*-*-* cris*-*-* m32c*-*-* fr30*-*-* mcore*-*-* powerpc*-*-* xtensa*-*-* arc*-*-* mips*-*-* } } } } } */\n-\n-/* { dg-options \"-O2 -g -fdump-tree-optimized\" } */\n-/* { dg-additional-options \"-mbranch-cost=2\" { target branch_cost } } */\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -g -fdump-tree-optimized --param logical-op-non-short-circuit=1\" } */\n \n int t (int a, int b)\n {"}, {"sha": "0c048335237e8dcf07bf26c510fc6118611d0645", "filename": "gcc/testsuite/gcc.dg/tree-ssa/ssa-ifcombine-ccmp-5.c", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e26584b265dc2af4e95d23c4bdd89462ea508b69/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-ifcombine-ccmp-5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e26584b265dc2af4e95d23c4bdd89462ea508b69/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-ifcombine-ccmp-5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-ifcombine-ccmp-5.c?ref=e26584b265dc2af4e95d23c4bdd89462ea508b69", "patch": "@@ -1,7 +1,5 @@\n-/* { dg-do compile { target { ! { { logical_op_short_circuit && { ! avr-*-* } } || { m68k*-*-* mmix*-*-* bfin*-*-* v850*-*-* moxie*-*-* cris*-*-* m32c*-*-* fr30*-*-* mcore*-*-* powerpc*-*-* xtensa*-*-* arc*-*-* mips*-*-* } } } } } */\n-\n-/* { dg-options \"-O2 -g -fdump-tree-optimized\" } */\n-/* { dg-additional-options \"-mbranch-cost=2\" { target branch_cost } } */\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -g -fdump-tree-optimized --param logical-op-non-short-circuit=1\" } */\n \n int t (int a, int b, int c)\n {"}, {"sha": "02404a6679f5286dc980859e43d339b7f5f03174", "filename": "gcc/testsuite/gcc.dg/tree-ssa/ssa-ifcombine-ccmp-6.c", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e26584b265dc2af4e95d23c4bdd89462ea508b69/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-ifcombine-ccmp-6.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e26584b265dc2af4e95d23c4bdd89462ea508b69/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-ifcombine-ccmp-6.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-ifcombine-ccmp-6.c?ref=e26584b265dc2af4e95d23c4bdd89462ea508b69", "patch": "@@ -1,7 +1,5 @@\n-/* { dg-do compile { target { ! { { logical_op_short_circuit && { ! avr-*-* } } || { m68k*-*-* mmix*-*-* bfin*-*-* v850*-*-* moxie*-*-* cris*-*-* m32c*-*-* fr30*-*-* mcore*-*-* powerpc*-*-* xtensa*-*-* arc*-*-* mips*-*-* } } } } } */\n-\n-/* { dg-options \"-O2 -g -fdump-tree-optimized\" } */\n-/* { dg-additional-options \"-mbranch-cost=2\" { target branch_cost } } */\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -g -fdump-tree-optimized --param logical-op-non-short-circuit=1\" } */\n \n int t (int a, int b, int c)\n {"}, {"sha": "67e1e89ecd3305c580cbac2a4f5cec347c9aca69", "filename": "gcc/testsuite/gcc.dg/tree-ssa/ssa-thread-11.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e26584b265dc2af4e95d23c4bdd89462ea508b69/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-thread-11.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e26584b265dc2af4e95d23c4bdd89462ea508b69/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-thread-11.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-thread-11.c?ref=e26584b265dc2af4e95d23c4bdd89462ea508b69", "patch": "@@ -1,5 +1,5 @@\n-/* { dg-do compile { target { ! { logical_op_short_circuit || { m68k*-*-* bfin*-*-* v850*-*-* moxie*-*-* m32c*-*-* fr30*-*-* mcore*-*-* frv-*-* h8300-*-* m32r-*-* mn10300-*-* msp430-*-* pdp11-*-* rl78-*-* rx-*-* vax-*-*} } } } } */\n-/* { dg-options \"-O2 -fdump-tree-vrp2-details\" } */\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -fdump-tree-vrp2-details --param logical-op-non-short-circuit=1\" } */\n /* { dg-final { scan-tree-dump-not \"IRREDUCIBLE_LOOP\" \"vrp2\" } } */\n \n void abort (void);"}, {"sha": "38661c888220568b4155708253e5509a93e6a123", "filename": "gcc/testsuite/gcc.dg/tree-ssa/ssa-thread-14.c", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e26584b265dc2af4e95d23c4bdd89462ea508b69/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-thread-14.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e26584b265dc2af4e95d23c4bdd89462ea508b69/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-thread-14.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-thread-14.c?ref=e26584b265dc2af4e95d23c4bdd89462ea508b69", "patch": "@@ -1,6 +1,5 @@\n-/* { dg-do compile { target { ! { logical_op_short_circuit || { m68k*-*-* mmix*-*-* mep*-*-* bfin*-*-* v850*-*-* moxie*-*-* cris*-*-* m32c*-*-* fr30*-*-* mcore*-*-* powerpc*-*-* xtensa*-*-* hppa*-*-* nios2*-*-* riscv*-*-* } } } } }  */\n-/* { dg-additional-options \"-O2 -fdump-tree-vrp-details\" }  */\n-/* { dg-additional-options \"-mbranch-cost=2\" { target i?86-*-* x86_64-*-* } }  */\n+/* { dg-do compile } */\n+/* { dg-additional-options \"-O2 -fdump-tree-vrp-details --param logical-op-non-short-circuit=1\" }  */\n /* { dg-final { scan-tree-dump-times \"Threaded jump\" 8 \"vrp1\" } }  */\n \n void foo (void);"}, {"sha": "eb7546c4873c24c7bd02fcae733a348620210e7c", "filename": "gcc/testsuite/gcc.dg/tree-ssa/vrp47.c", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e26584b265dc2af4e95d23c4bdd89462ea508b69/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fvrp47.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e26584b265dc2af4e95d23c4bdd89462ea508b69/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fvrp47.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fvrp47.c?ref=e26584b265dc2af4e95d23c4bdd89462ea508b69", "patch": "@@ -1,10 +1,7 @@\n /* Setting LOGICAL_OP_NON_SHORT_CIRCUIT to 0 inhibits the setcc\n    optimizations that expose the VRP opportunity.  */\n-/* Skip on S/390.  Lower values in BRANCH_COST lead to two conditional\n-   jumps when evaluating an && condition.  VRP is not able to optimize\n-   this.  */\n-/* { dg-do compile { target { ! { logical_op_short_circuit || { s390*-*-* mn10300-*-* hppa*-*-* m68k*-*-* } } } } } */\n-/* { dg-options \"-O2 -fdump-tree-vrp1 -fdump-tree-dom2 -fdump-tree-vrp2\" } */\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -fdump-tree-vrp1 -fdump-tree-dom2 -fdump-tree-vrp2 --param logical-op-non-short-circuit=1\" } */\n /* { dg-additional-options \"-march=i586\" { target { { i?86-*-* x86_64-*-* } && ia32 } } } */\n \n int h(int x, int y)"}, {"sha": "da1d0a2d80c1d73a9ae19efe1133c5f331127b1f", "filename": "gcc/testsuite/gcc.dg/tree-ssa/vrp87.c", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e26584b265dc2af4e95d23c4bdd89462ea508b69/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fvrp87.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e26584b265dc2af4e95d23c4bdd89462ea508b69/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fvrp87.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fvrp87.c?ref=e26584b265dc2af4e95d23c4bdd89462ea508b69", "patch": "@@ -1,8 +1,7 @@\n /* Setting LOGICAL_OP_NON_SHORT_CIRCUIT to 0 leads to two conditional jumps\n    when evaluating an && condition.  */\n-/* { dg-do compile { target { ! { logical_op_short_circuit || { m68k*-*-* mmix*-*-* bfin*-*-* v850*-*-* moxie*-*-* cris*-*-* m32c*-*-* fr30*-*-* mcore*-*-* powerpc*-*-* xtensa*-*-* hppa*-*-* } } } } } */\n-\n-/* { dg-options \"-O2 -fdump-tree-fre1-details\" } */\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -fdump-tree-fre1-details --param logical-op-non-short-circuit=1\" } */\n \n struct bitmap_head_def;\n typedef struct bitmap_head_def *bitmap;"}, {"sha": "faa67e22321724daebc7f2d2c4158a1f29542bfc", "filename": "gcc/testsuite/lib/target-supports.exp", "status": "modified", "additions": 0, "deletions": 23, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e26584b265dc2af4e95d23c4bdd89462ea508b69/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e26584b265dc2af4e95d23c4bdd89462ea508b69/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp?ref=e26584b265dc2af4e95d23c4bdd89462ea508b69", "patch": "@@ -8487,29 +8487,6 @@ proc check_effective_target_tiny {} {\n     }]\n }\n \n-# Return 1 if LOGICAL_OP_NON_SHORT_CIRCUIT is set to 0 for the current target.\n-\n-proc check_effective_target_logical_op_short_circuit {} {\n-    if { [istarget mips*-*-*]\n-\t || [istarget arc*-*-*]\n-\t || [istarget avr*-*-*]\n-\t || [istarget crisv32-*-*] || [istarget cris-*-*]\n-\t || [istarget csky*-*-*]\n-\t || [istarget mmix-*-*]\n-\t || [istarget msp430-*-*]\n-\t || [istarget s390*-*-*]\n-\t || [istarget powerpc*-*-*]\n-\t || [istarget nios2*-*-*]\n-\t || [istarget riscv*-*-*]\n-\t || [istarget v850*-*-*]\n-\t || [istarget visium-*-*]\n-\t || [istarget or1k*-*-*]\n-\t || [check_effective_target_arm_cortex_m] } {\n-\treturn 1\n-    }\n-    return 0\n-}\n-\n # Return 1 if the target supports -mbranch-cost=N option.\n \n proc check_effective_target_branch_cost {} {"}, {"sha": "ddb9564298bc05f75952dc2977602020c949a2e0", "filename": "gcc/tree-ssa-ifcombine.c", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e26584b265dc2af4e95d23c4bdd89462ea508b69/gcc%2Ftree-ssa-ifcombine.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e26584b265dc2af4e95d23c4bdd89462ea508b69/gcc%2Ftree-ssa-ifcombine.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-ifcombine.c?ref=e26584b265dc2af4e95d23c4bdd89462ea508b69", "patch": "@@ -40,6 +40,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"gimplify-me.h\"\n #include \"tree-cfg.h\"\n #include \"tree-ssa.h\"\n+#include \"params.h\"\n \n #ifndef LOGICAL_OP_NON_SHORT_CIRCUIT\n #define LOGICAL_OP_NON_SHORT_CIRCUIT \\\n@@ -563,7 +564,11 @@ ifcombine_ifandif (basic_block inner_cond_bb, bool inner_inv,\n \t{\n \t  tree t1, t2;\n \t  gimple_stmt_iterator gsi;\n-\t  if (!LOGICAL_OP_NON_SHORT_CIRCUIT || flag_sanitize_coverage)\n+\t  bool logical_op_non_short_circuit = LOGICAL_OP_NON_SHORT_CIRCUIT;\n+\t  if (PARAM_VALUE (PARAM_LOGICAL_OP_NON_SHORT_CIRCUIT) != -1)\n+\t    logical_op_non_short_circuit\n+\t      = PARAM_VALUE (PARAM_LOGICAL_OP_NON_SHORT_CIRCUIT);\n+\t  if (!logical_op_non_short_circuit || flag_sanitize_coverage)\n \t    return false;\n \t  /* Only do this optimization if the inner bb contains only the conditional. */\n \t  if (!gsi_one_before_end_p (gsi_start_nondebug_after_labels_bb (inner_cond_bb)))"}]}