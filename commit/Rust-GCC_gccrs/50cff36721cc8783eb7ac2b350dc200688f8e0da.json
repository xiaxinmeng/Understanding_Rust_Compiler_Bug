{"sha": "50cff36721cc8783eb7ac2b350dc200688f8e0da", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTBjZmYzNjcyMWNjODc4M2ViN2FjMmIzNTBkYzIwMDY4OGY4ZTBkYQ==", "commit": {"author": {"name": "Gary Dismukes", "email": "dismukes@adacore.com", "date": "2008-03-26T07:39:04Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2008-03-26T07:39:04Z"}, "message": "exp_ch5.adb (Expand_N_Extended_Return_Statement): Suppress generation of a heap allocator for a limited unconstrained function...\n\n2008-03-26  Gary Dismukes  <dismukes@adacore.com>\n\n\t* exp_ch5.adb (Expand_N_Extended_Return_Statement): Suppress generation\n\tof a heap allocator for a limited unconstrained function return when\n\tresstriction No_Allocators is active.\n\t(Analyze_Allocator): The restriction No_Allocators is now only checked\n\ton allocators that have Comes_From_Source set, as per RM-H.4(7).\n\n\t* sem_ch4.adb (Expand_N_Extended_Return_Statement): Suppress generation\n\tof a heap allocator for a limited unconstrained function return when\n\tresstriction No_Allocators is active.\n\t(Analyze_Allocator): The restriction No_Allocators is now only checked\n\ton allocators that have Comes_From_Source set, as per RM-H.4(7).\n\t(Has_Fixed_Op):  If the name in a function call is Standard.\"*\" and the\n\toperands are fixed-point types, the universal_fixed predefined operation\n\tis used, regardless of whether the operand type (s) have a primitive\n\toperation of the same name.\n\nFrom-SVN: r133563", "tree": {"sha": "6180d69012e5d37d5218d77044ca7c476dfbb5bf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6180d69012e5d37d5218d77044ca7c476dfbb5bf"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/50cff36721cc8783eb7ac2b350dc200688f8e0da", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/50cff36721cc8783eb7ac2b350dc200688f8e0da", "html_url": "https://github.com/Rust-GCC/gccrs/commit/50cff36721cc8783eb7ac2b350dc200688f8e0da", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/50cff36721cc8783eb7ac2b350dc200688f8e0da/comments", "author": {"login": "dismukes", "id": 50880541, "node_id": "MDQ6VXNlcjUwODgwNTQx", "avatar_url": "https://avatars.githubusercontent.com/u/50880541?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dismukes", "html_url": "https://github.com/dismukes", "followers_url": "https://api.github.com/users/dismukes/followers", "following_url": "https://api.github.com/users/dismukes/following{/other_user}", "gists_url": "https://api.github.com/users/dismukes/gists{/gist_id}", "starred_url": "https://api.github.com/users/dismukes/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dismukes/subscriptions", "organizations_url": "https://api.github.com/users/dismukes/orgs", "repos_url": "https://api.github.com/users/dismukes/repos", "events_url": "https://api.github.com/users/dismukes/events{/privacy}", "received_events_url": "https://api.github.com/users/dismukes/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "59ae6391bdf985417a11bc4bc51cabb711c624ac", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/59ae6391bdf985417a11bc4bc51cabb711c624ac", "html_url": "https://github.com/Rust-GCC/gccrs/commit/59ae6391bdf985417a11bc4bc51cabb711c624ac"}], "stats": {"total": 49, "additions": 46, "deletions": 3}, "files": [{"sha": "24e7a7f08a1cefe229d51949e175350cb64e058e", "filename": "gcc/ada/exp_ch5.adb", "status": "modified", "additions": 25, "deletions": 1, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/50cff36721cc8783eb7ac2b350dc200688f8e0da/gcc%2Fada%2Fexp_ch5.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/50cff36721cc8783eb7ac2b350dc200688f8e0da/gcc%2Fada%2Fexp_ch5.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch5.adb?ref=50cff36721cc8783eb7ac2b350dc200688f8e0da", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1992-2007, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2008, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -2792,6 +2792,30 @@ package body Exp_Ch5 is\n                         SS_Allocator := New_Copy_Tree (Heap_Allocator);\n                      end if;\n \n+                     --  If the No_Allocators restriction is active, then only\n+                     --  an allocator for secondary stack allocation is needed.\n+\n+                     if Restriction_Active (No_Allocators) then\n+                        SS_Allocator   := Heap_Allocator;\n+                        Heap_Allocator := Make_Null (Loc);\n+\n+                     --  Otherwise the heap allocator may be needed, so we\n+                     --  make another allocator for secondary stack allocation.\n+\n+                     else\n+                        SS_Allocator := New_Copy_Tree (Heap_Allocator);\n+\n+                        --  The heap allocator is marked Comes_From_Source\n+                        --  since it corresponds to an explicit user-written\n+                        --  allocator (that is, it will only be executed on\n+                        --  behalf of callers that call the function as\n+                        --  initialization for such an allocator). This\n+                        --  prevents errors when No_Implicit_Heap_Allocation\n+                        --  is in force.\n+\n+                        Set_Comes_From_Source (Heap_Allocator, True);\n+                     end if;\n+\n                      --  The allocator is returned on the secondary stack. We\n                      --  don't do this on VM targets, since the SS is not used.\n "}, {"sha": "e3d45f9e94287cd376ea8061a90aa5b413a54535", "filename": "gcc/ada/sem_ch4.adb", "status": "modified", "additions": 21, "deletions": 2, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/50cff36721cc8783eb7ac2b350dc200688f8e0da/gcc%2Fada%2Fsem_ch4.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/50cff36721cc8783eb7ac2b350dc200688f8e0da/gcc%2Fada%2Fsem_ch4.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch4.adb?ref=50cff36721cc8783eb7ac2b350dc200688f8e0da", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1992-2007, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2008, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -356,7 +356,12 @@ package body Sem_Ch4 is\n       Type_Id  : Entity_Id;\n \n    begin\n-      Check_Restriction (No_Allocators, N);\n+      --  In accordance with H.4(7), the No_Allocators restriction only applies\n+      --  to user-written allocators.\n+\n+      if Comes_From_Source (N) then\n+         Check_Restriction (No_Allocators, N);\n+      end if;\n \n       if Nkind (E) = N_Qualified_Expression then\n          Acc_Type := Create_Itype (E_Allocator_Type, N);\n@@ -3811,6 +3816,10 @@ package body Sem_Ch4 is\n       --  predefined operator. Used to implement Ada 2005 AI-264, to make\n       --  such operators more visible and therefore useful.\n \n+      --  If the name of the operation is an expanded name with prefix\n+      --  Standard, the predefined universal fixed operator is available,\n+      --  as specified by AI-420 (RM 4.5.5 (19.1/2)).\n+\n       function Specific_Type (T1, T2 : Entity_Id) return Entity_Id;\n       --  Get specific type (i.e. non-universal type if there is one)\n \n@@ -3825,6 +3834,16 @@ package body Sem_Ch4 is\n          F2  : Entity_Id;\n \n       begin\n+         --  If the universal_fixed operation is given explicitly the rule\n+         --  concerning primitive operations of the type do not apply.\n+\n+         if Nkind (N) = N_Function_Call\n+           and then Nkind (Name (N)) = N_Expanded_Name\n+           and then Entity (Prefix (Name (N))) = Standard_Standard\n+         then\n+            return False;\n+         end if;\n+\n          --  The operation is treated as primitive if it is declared in the\n          --  same scope as the type, and therefore on the same entity chain.\n "}]}