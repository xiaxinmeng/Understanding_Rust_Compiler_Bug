{"sha": "bef6486a5a2fdb1008e582d5ac048dd243e91142", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmVmNjQ4NmE1YTJmZGIxMDA4ZTU4MmQ1YWMwNDhkZDI0M2U5MTE0Mg==", "commit": {"author": {"name": "Mikael Morin", "email": "mikael@gcc.gnu.org", "date": "2010-09-23T11:11:23Z"}, "committer": {"name": "Mikael Morin", "email": "mikael@gcc.gnu.org", "date": "2010-09-23T11:11:23Z"}, "message": "re PR fortran/45745 (ICE in gfc_conv_array_stride)\n\n2010-09-23  Mikael Morin  <mikael@gcc.gnu.org>\n\n\tPR fortran/45745\n\tPR fortran/45648\n\t* trans-array.c (gfc_conv_expr_descriptor): Handle \n\tss->type == GFC_SS_INTRINSIC (for {l,u}bound intrinsics) case. \n\n2010-09-23  Mikael Morin  <mikael@gcc.gnu.org>\n\n\tPR fortran/45745\n\tPR fortran/45648\n\t* gfortran.dg/vector_subscript_bound_1.f90: New.\n\nFrom-SVN: r164558", "tree": {"sha": "94e5907b5697121d848e22dd6a4f1c3965a75700", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/94e5907b5697121d848e22dd6a4f1c3965a75700"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/bef6486a5a2fdb1008e582d5ac048dd243e91142", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bef6486a5a2fdb1008e582d5ac048dd243e91142", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bef6486a5a2fdb1008e582d5ac048dd243e91142", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bef6486a5a2fdb1008e582d5ac048dd243e91142/comments", "author": null, "committer": null, "parents": [{"sha": "dca267461a4ec936658e9dccdb952a2ca4b9f3e4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dca267461a4ec936658e9dccdb952a2ca4b9f3e4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/dca267461a4ec936658e9dccdb952a2ca4b9f3e4"}], "stats": {"total": 48, "additions": 42, "deletions": 6}, "files": [{"sha": "d57a4499b71158cd273a045ce596a895bae7f923", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bef6486a5a2fdb1008e582d5ac048dd243e91142/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bef6486a5a2fdb1008e582d5ac048dd243e91142/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=bef6486a5a2fdb1008e582d5ac048dd243e91142", "patch": "@@ -1,3 +1,10 @@\n+2010-09-23  Mikael Morin  <mikael@gcc.gnu.org>\n+\n+\tPR fortran/45745\n+\tPR fortran/45648\n+\t* trans-array.c (gfc_conv_expr_descriptor): Handle \n+\tss->type == GFC_SS_INTRINSIC (for {l,u}bound intrinsics) case. \n+\n 2010-09-23  Tobias Burnus  <burnus@net-b.de>\n \n \t* intrinsic.texi (OpenMP modules): Add named constants of"}, {"sha": "b32c3eccd8f1be4c4a45760487888a69fef3c79b", "filename": "gcc/fortran/trans-array.c", "status": "modified", "additions": 10, "deletions": 6, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bef6486a5a2fdb1008e582d5ac048dd243e91142/gcc%2Ffortran%2Ftrans-array.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bef6486a5a2fdb1008e582d5ac048dd243e91142/gcc%2Ffortran%2Ftrans-array.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-array.c?ref=bef6486a5a2fdb1008e582d5ac048dd243e91142", "patch": "@@ -5290,13 +5290,17 @@ gfc_conv_expr_descriptor (gfc_se * se, gfc_expr * expr, gfc_ss * ss)\n \t  return;\n \t}\n \n-      if (ss->expr != expr)\n+      if (ss->expr != expr || ss->type != GFC_SS_FUNCTION)\n \t{\n-\t  /* Elemental function.  */\n-\t  gcc_assert ((expr->value.function.esym != NULL\n-\t\t       && expr->value.function.esym->attr.elemental)\n-\t\t      || (expr->value.function.isym != NULL\n-\t\t\t  && expr->value.function.isym->elemental));\n+\t  if (ss->expr != expr)\n+\t    /* Elemental function.  */\n+\t    gcc_assert ((expr->value.function.esym != NULL\n+\t\t\t && expr->value.function.esym->attr.elemental)\n+\t\t\t|| (expr->value.function.isym != NULL\n+\t\t\t    && expr->value.function.isym->elemental));\n+\t  else\n+\t    gcc_assert (ss->type == GFC_SS_INTRINSIC);\n+\n \t  need_tmp = 1;\n \t  if (expr->ts.type == BT_CHARACTER\n \t\t&& expr->ts.u.cl->length->expr_type != EXPR_CONSTANT)"}, {"sha": "da30c4be44530224a62eac00f90b3c9f56e2bc74", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bef6486a5a2fdb1008e582d5ac048dd243e91142/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bef6486a5a2fdb1008e582d5ac048dd243e91142/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=bef6486a5a2fdb1008e582d5ac048dd243e91142", "patch": "@@ -1,3 +1,9 @@\n+2010-09-23  Mikael Morin  <mikael@gcc.gnu.org>\n+\n+\tPR fortran/45745\n+\tPR fortran/45648\n+\t* gfortran.dg/vector_subscript_bound_1.f90: New.\n+\n 2010-09-23  Richard Guenther  <rguenther@suse.de>\n \n \tPR middle-end/45750"}, {"sha": "f4328504f24dcafc0dec0e3c8f9196c5dc3ab9ba", "filename": "gcc/testsuite/gfortran.dg/vector_subscript_bound_1.f90", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bef6486a5a2fdb1008e582d5ac048dd243e91142/gcc%2Ftestsuite%2Fgfortran.dg%2Fvector_subscript_bound_1.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bef6486a5a2fdb1008e582d5ac048dd243e91142/gcc%2Ftestsuite%2Fgfortran.dg%2Fvector_subscript_bound_1.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fvector_subscript_bound_1.f90?ref=bef6486a5a2fdb1008e582d5ac048dd243e91142", "patch": "@@ -0,0 +1,19 @@\n+! { dg-do compile }\n+!\n+! PR fortran/45745\n+! ICE with {L,U}BOUND intrinsic function as vector subscript on derived\n+! type component. \n+!\n+! Original test by Joost Van de Vondele <Joost.VandeVondele@pci.uzh.ch>\n+\n+MODULE pw_types\n+  TYPE pw_type\n+     REAL, DIMENSION ( : ), POINTER :: cr\n+  END TYPE pw_type\n+CONTAINS\n+  SUBROUTINE pw_write(pw)\n+    TYPE(pw_type), INTENT(in) :: pw\n+    PRINT *, pw%cr(LBOUND(pw%cr))\n+    PRINT *, pw%cr(UBOUND(pw%cr))\n+  END SUBROUTINE pw_write\n+END MODULE"}]}