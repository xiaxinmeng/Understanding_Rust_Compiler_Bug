{"sha": "abccc4f66c34723d4f91654a3a52cc1b50effebc", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWJjY2M0ZjY2YzM0NzIzZDRmOTE2NTRhM2E1MmNjMWI1MGVmZmViYw==", "commit": {"author": {"name": "Paolo Carlini", "email": "pcarlini@suse.de", "date": "2004-10-01T21:01:29Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2004-10-01T21:01:29Z"}, "message": "sstream.tcc (pbackfail): Implement correctly 27.7.1.3/2, bullet 2...\n\n2004-10-01  Paolo Carlini  <pcarlini@suse.de>\n\n\t* include/bits/sstream.tcc (pbackfail): Implement correctly\n\t27.7.1.3/2, bullet 2: if mode & ios_base::out is false do not\n\twrite in the buffer.\n\t* testsuite/27_io/basic_stringbuf/pbackfail/char/1.cc: New.\n\t* testsuite/27_io/basic_stringbuf/pbackfail/char/2.cc: Likewise.\n\t* testsuite/27_io/basic_stringbuf/pbackfail/wchar_t/1.cc: Likewise.\n\t* testsuite/27_io/basic_stringbuf/pbackfail/wchar_t/2.cc: Likewise.\n\t* testsuite/27_io/basic_istream/putback/char/1.cc: Tweak consistently.\n\nFrom-SVN: r88407", "tree": {"sha": "7e0837c3812e17553fed0c08fcfae5ab1183eeee", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7e0837c3812e17553fed0c08fcfae5ab1183eeee"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/abccc4f66c34723d4f91654a3a52cc1b50effebc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/abccc4f66c34723d4f91654a3a52cc1b50effebc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/abccc4f66c34723d4f91654a3a52cc1b50effebc", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/abccc4f66c34723d4f91654a3a52cc1b50effebc/comments", "author": null, "committer": null, "parents": [{"sha": "b89dc911b33013c93da4a9441d5f39d59ba01d68", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b89dc911b33013c93da4a9441d5f39d59ba01d68", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b89dc911b33013c93da4a9441d5f39d59ba01d68"}], "stats": {"total": 324, "additions": 310, "deletions": 14}, "files": [{"sha": "ff73a85c1555060fda1bcd5e3e392132a1faa1ab", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/abccc4f66c34723d4f91654a3a52cc1b50effebc/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/abccc4f66c34723d4f91654a3a52cc1b50effebc/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=abccc4f66c34723d4f91654a3a52cc1b50effebc", "patch": "@@ -1,3 +1,14 @@\n+2004-10-01  Paolo Carlini  <pcarlini@suse.de>\n+\n+\t* include/bits/sstream.tcc (pbackfail): Implement correctly\n+\t27.7.1.3/2, bullet 2: if mode & ios_base::out is false do not\n+\twrite in the buffer.\n+\t* testsuite/27_io/basic_stringbuf/pbackfail/char/1.cc: New.\n+\t* testsuite/27_io/basic_stringbuf/pbackfail/char/2.cc: Likewise.\n+\t* testsuite/27_io/basic_stringbuf/pbackfail/wchar_t/1.cc: Likewise.\n+\t* testsuite/27_io/basic_stringbuf/pbackfail/wchar_t/2.cc: Likewise.\n+\t* testsuite/27_io/basic_istream/putback/char/1.cc: Tweak consistently.\n+\n 2004-10-01  Paolo Carlini  <pcarlini@suse.de>\n \n \t* include/bits/sstream.tcc (seekpos): Minor rearrangement of two"}, {"sha": "76cda2974eed72c77516ecd4e977c6927e2ba5b9", "filename": "libstdc++-v3/include/bits/sstream.tcc", "status": "modified", "additions": 17, "deletions": 12, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/abccc4f66c34723d4f91654a3a52cc1b50effebc/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fsstream.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/abccc4f66c34723d4f91654a3a52cc1b50effebc/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fsstream.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fsstream.tcc?ref=abccc4f66c34723d4f91654a3a52cc1b50effebc", "patch": "@@ -47,24 +47,29 @@ namespace std\n     pbackfail(int_type __c)\n     {\n       int_type __ret = traits_type::eof();\n-      const bool __testeof = traits_type::eq_int_type(__c, __ret);\n-\n       if (this->eback() < this->gptr())\n \t{\n-\t  const bool __testeq = traits_type::eq(traits_type::to_char_type(__c),\n-\t\t\t\t\t\tthis->gptr()[-1]);\n-\t  this->gbump(-1);\n-\n \t  // Try to put back __c into input sequence in one of three ways.\n \t  // Order these tests done in is unspecified by the standard.\n-\t  if (!__testeof && __testeq)\n-\t    __ret = __c;\n-\t  else if (__testeof)\n-\t    __ret = traits_type::not_eof(__c);\n+\t  const bool __testeof = traits_type::eq_int_type(__c, __ret);\n+\t  if (!__testeof)\n+\t    {\n+\t      const bool __testeq = traits_type::eq(traits_type::\n+\t\t\t\t\t\t    to_char_type(__c),\n+\t\t\t\t\t\t    this->gptr()[-1]);\t  \n+\t      const bool __testout = this->_M_mode & ios_base::out;\n+\t      if (__testeq || __testout)\n+\t\t{\n+\t\t  this->gbump(-1);\n+\t\t  if (!__testeq)\n+\t\t    *this->gptr() = traits_type::to_char_type(__c);\n+\t\t  __ret = __c;\n+\t\t}\n+\t    }\n \t  else\n \t    {\n-\t      *this->gptr() = traits_type::to_char_type(__c);\n-\t      __ret = __c;\n+\t      this->gbump(-1);\n+\t      __ret = traits_type::not_eof(__c);\n \t    }\n \t}\n       return __ret;"}, {"sha": "b3c64f60d4df128d1880b7b7d4901f03d4ee921f", "filename": "libstdc++-v3/testsuite/27_io/basic_istream/putback/char/1.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/abccc4f66c34723d4f91654a3a52cc1b50effebc/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_istream%2Fputback%2Fchar%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/abccc4f66c34723d4f91654a3a52cc1b50effebc/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_istream%2Fputback%2Fchar%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_istream%2Fputback%2Fchar%2F1.cc?ref=abccc4f66c34723d4f91654a3a52cc1b50effebc", "patch": "@@ -49,11 +49,11 @@ test01()\n   is_04.ignore(30);\n   is_04.clear();\n   state1 = is_04.rdstate();\n-  is_04.putback('|');\n+  is_04.putback('t');\n   VERIFY( is_04.gcount() == 0 );  // DR 60\n   state2 = is_04.rdstate();\n   VERIFY( state1 == state2 );\n-  VERIFY( is_04.peek() == '|' );\n+  VERIFY( is_04.peek() == 't' );\n \n   // istream& unget()\n   is_04.clear();"}, {"sha": "5e83299384f7be1958b008dac1da4227a5c66b2e", "filename": "libstdc++-v3/testsuite/27_io/basic_stringbuf/pbackfail/char/1.cc", "status": "added", "additions": 76, "deletions": 0, "changes": 76, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/abccc4f66c34723d4f91654a3a52cc1b50effebc/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_stringbuf%2Fpbackfail%2Fchar%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/abccc4f66c34723d4f91654a3a52cc1b50effebc/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_stringbuf%2Fpbackfail%2Fchar%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_stringbuf%2Fpbackfail%2Fchar%2F1.cc?ref=abccc4f66c34723d4f91654a3a52cc1b50effebc", "patch": "@@ -0,0 +1,76 @@\n+// 2004-10-01  Paolo Carlini  <pcarlini@suse.de>\n+\n+// Copyright (C) 2004 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 27.7.1.3  Overridden virtual functions  [lib.stringbuf.virtuals]\n+\n+#include <sstream>\n+#include <testsuite_hooks.h>\n+\n+class my_stringbuf : public std::stringbuf\n+{\n+public:\n+  my_stringbuf(const std::string& str, std::ios_base::openmode mode)\n+  : std::stringbuf(str, mode) { }\n+\n+  int_type \n+  pub_pbackfail(int_type c) \n+  { return this->pbackfail(c); }\n+};\n+\n+void test01()\n+{\n+  bool test __attribute__((unused)) = true;\n+  using namespace std;\n+\n+  typedef my_stringbuf::int_type    int_type;\n+  typedef my_stringbuf::traits_type traits_type;\n+\n+  my_stringbuf sbuf(\"any\", ios_base::in | ios_base::out);\n+\n+  int_type c = sbuf.sgetc();\n+  VERIFY( c == 'a' );\n+\n+  c = sbuf.pub_pbackfail('z');\n+  VERIFY( c == traits_type::eof() );\n+  c = sbuf.sbumpc();\n+  VERIFY( c == 'a' );\n+ \n+  c = sbuf.pub_pbackfail('a');\n+  VERIFY( c == 'a' );\n+  c = sbuf.sbumpc();\n+  VERIFY( c == 'a' );\n+  \n+  c = sbuf.pub_pbackfail('x');\n+  VERIFY( c == 'x' );\n+  c = sbuf.sbumpc();\n+  VERIFY( c == 'x' );\n+\n+  const int_type eof = traits_type::eof();\n+  c = sbuf.pub_pbackfail(eof);\n+  VERIFY( c == traits_type::not_eof(eof) );\n+  c = sbuf.sgetc();\n+  VERIFY( c == 'x' );\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "832cee608eef81bd9231544ed0d4fa6303a92ba2", "filename": "libstdc++-v3/testsuite/27_io/basic_stringbuf/pbackfail/char/2.cc", "status": "added", "additions": 64, "deletions": 0, "changes": 64, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/abccc4f66c34723d4f91654a3a52cc1b50effebc/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_stringbuf%2Fpbackfail%2Fchar%2F2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/abccc4f66c34723d4f91654a3a52cc1b50effebc/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_stringbuf%2Fpbackfail%2Fchar%2F2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_stringbuf%2Fpbackfail%2Fchar%2F2.cc?ref=abccc4f66c34723d4f91654a3a52cc1b50effebc", "patch": "@@ -0,0 +1,64 @@\n+// 2004-10-01  Paolo Carlini  <pcarlini@suse.de>\n+\n+// Copyright (C) 2004 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 27.7.1.3  Overridden virtual functions  [lib.stringbuf.virtuals]\n+\n+#include <sstream>\n+#include <testsuite_hooks.h>\n+\n+class my_stringbuf : public std::stringbuf\n+{\n+public:\n+  my_stringbuf(const std::string& str, std::ios_base::openmode mode)\n+  : std::stringbuf(str, mode) { }\n+\n+  int_type \n+  pub_pbackfail(int_type __c) \n+  { return this->pbackfail(__c); }\n+};\n+\n+// We weren't enforcing 27.7.1.3/2, bullet 2: \"... and if\n+// mode & ios_base::out is nonzero, ...\"\n+void test01()\n+{\n+  bool test __attribute__((unused)) = true;\n+  using namespace std;\n+\n+  typedef my_stringbuf::int_type    int_type;\n+  typedef my_stringbuf::traits_type traits_type;\n+\n+  my_stringbuf sbuf(\"any\", ios_base::in);\n+  \n+  int_type c = sbuf.sbumpc();\n+  VERIFY( c == 'a' );\n+\n+  c = sbuf.pub_pbackfail('x');\n+  VERIFY( c == traits_type::eof() );\n+  VERIFY( sbuf.str() == \"any\" );\n+  c = sbuf.sgetc();\n+  VERIFY( c == 'n' );\n+}\n+\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "84ea87277390041962734dc6dd6fb7cbf46d3176", "filename": "libstdc++-v3/testsuite/27_io/basic_stringbuf/pbackfail/wchar_t/1.cc", "status": "added", "additions": 76, "deletions": 0, "changes": 76, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/abccc4f66c34723d4f91654a3a52cc1b50effebc/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_stringbuf%2Fpbackfail%2Fwchar_t%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/abccc4f66c34723d4f91654a3a52cc1b50effebc/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_stringbuf%2Fpbackfail%2Fwchar_t%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_stringbuf%2Fpbackfail%2Fwchar_t%2F1.cc?ref=abccc4f66c34723d4f91654a3a52cc1b50effebc", "patch": "@@ -0,0 +1,76 @@\n+// 2004-10-01  Paolo Carlini  <pcarlini@suse.de>\n+\n+// Copyright (C) 2004 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 27.7.1.3  Overridden virtual functions  [lib.stringbuf.virtuals]\n+\n+#include <sstream>\n+#include <testsuite_hooks.h>\n+\n+class my_stringbuf : public std::wstringbuf\n+{\n+public:\n+  my_stringbuf(const std::wstring& str, std::ios_base::openmode mode)\n+  : std::wstringbuf(str, mode) { }\n+\n+  int_type \n+  pub_pbackfail(int_type c) \n+  { return this->pbackfail(c); }\n+};\n+\n+void test01()\n+{\n+  bool test __attribute__((unused)) = true;\n+  using namespace std;\n+\n+  typedef my_stringbuf::int_type    int_type;\n+  typedef my_stringbuf::traits_type traits_type;\n+\n+  my_stringbuf sbuf(L\"any\", ios_base::in | ios_base::out);\n+  \n+  int_type c = sbuf.sgetc();\n+  VERIFY( c == L'a' );\n+\n+  c = sbuf.pub_pbackfail(L'z');\n+  VERIFY( c == traits_type::eof() );\n+  c = sbuf.sbumpc();\n+  VERIFY( c == L'a' );\n+ \n+  c = sbuf.pub_pbackfail(L'a');\n+  VERIFY( c == L'a' );\n+  c = sbuf.sbumpc();\n+  VERIFY( c == L'a' );\n+  \n+  c = sbuf.pub_pbackfail(L'x');\n+  VERIFY( c == L'x' );\n+  c = sbuf.sbumpc();\n+  VERIFY( c == L'x' );\n+\n+  const int_type eof = traits_type::eof();\n+  c = sbuf.pub_pbackfail(eof);\n+  VERIFY( c == traits_type::not_eof(eof) );\n+  c = sbuf.sgetc();\n+  VERIFY( c == L'x' );\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "eb5172fcd47a2256f433f3eb01786391a300adeb", "filename": "libstdc++-v3/testsuite/27_io/basic_stringbuf/pbackfail/wchar_t/2.cc", "status": "added", "additions": 64, "deletions": 0, "changes": 64, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/abccc4f66c34723d4f91654a3a52cc1b50effebc/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_stringbuf%2Fpbackfail%2Fwchar_t%2F2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/abccc4f66c34723d4f91654a3a52cc1b50effebc/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_stringbuf%2Fpbackfail%2Fwchar_t%2F2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_stringbuf%2Fpbackfail%2Fwchar_t%2F2.cc?ref=abccc4f66c34723d4f91654a3a52cc1b50effebc", "patch": "@@ -0,0 +1,64 @@\n+// 2004-10-01  Paolo Carlini  <pcarlini@suse.de>\n+\n+// Copyright (C) 2004 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 27.7.1.3  Overridden virtual functions  [lib.stringbuf.virtuals]\n+\n+#include <sstream>\n+#include <testsuite_hooks.h>\n+\n+class my_stringbuf : public std::wstringbuf\n+{\n+public:\n+  my_stringbuf(const std::wstring& str, std::ios_base::openmode mode)\n+  : std::wstringbuf(str, mode) { }\n+\n+  int_type \n+  pub_pbackfail(int_type __c) \n+  { return this->pbackfail(__c); }\n+};\n+\n+// We weren't enforcing 27.7.1.3/2, bullet 2: \"... and if\n+// mode & ios_base::out is nonzero, ...\"\n+void test01()\n+{\n+  bool test __attribute__((unused)) = true;\n+  using namespace std;\n+\n+  typedef my_stringbuf::int_type    int_type;\n+  typedef my_stringbuf::traits_type traits_type;\n+\n+  my_stringbuf sbuf(L\"any\", ios_base::in);\n+  \n+  int_type c = sbuf.sbumpc();\n+  VERIFY( c == L'a' );\n+\n+  c = sbuf.pub_pbackfail(L'x');\n+  VERIFY( c == traits_type::eof() );\n+  VERIFY( sbuf.str() == L\"any\" );\n+  c = sbuf.sgetc();\n+  VERIFY( c == L'n' );\n+}\n+\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}]}