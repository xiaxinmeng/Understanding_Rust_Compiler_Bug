{"sha": "0ff093d85530159d74f77edc0da5d8bd176fe953", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGZmMDkzZDg1NTMwMTU5ZDc0Zjc3ZWRjMGRhNWQ4YmQxNzZmZTk1Mw==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2015-04-21T12:52:43Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2015-04-21T12:52:43Z"}, "message": "re PR tree-optimization/65650 (CCP does not propgate copies)\n\n2015-04-21  Richard Biener  <rguenther@suse.de>\n\n\tPR tree-optimization/65650\n\t* tree-ssa-ccp.c (valid_lattice_transition): Allow lattice\n\ttransitions involving copies.\n\t(set_lattice_value): Adjust for copy lattice state.\n\t(ccp_lattice_meet): Do not merge UNDEFINED and a copy to the copy\n\tif that doesn't dominate the merge point.\n\t(bit_value_unop): Adjust what we treat as varying mask.\n\t(bit_value_binop): Likewise.\n\t(bit_value_assume_aligned): Likewise.\n\t(evaluate_stmt): When we simplified to a SSA name record a copy\n\tinstead of dropping to varying.\n\t(visit_assignment): Simplify.\n\n\t* gimple-match.h (gimple_simplify): Add another callback.\n\t* gimple-fold.c (fold_stmt_1): Adjust caller.\n\t(gimple_fold_stmt_to_constant_1): Likewise - pass valueize\n\tfor the 2nd callback.\n\t* gimple-match-head.c (gimple_simplify): Add a callback that is\n\tused to valueize the stmt operands and use it that way.\n\n\t* gcc.dg/tree-ssa/ssa-ccp-37.c: New testcase.\n\t* gcc.dg/tree-ssa/forwprop-11.c: Adjust.\n\t* gcc.dg/tree-ssa/ssa-fre-3.c: Likewise.\n\t* gcc.dg/tree-ssa/ssa-fre-4.c: Likewise.\n\t* gcc.dg/tree-ssa/ssa-fre-5.c: Likewise.\n\t* gcc.dg/tree-ssa/ssa-fre-32.c: Likewise.\n\nFrom-SVN: r222267", "tree": {"sha": "2360651c91e90b4d553f511d0ad13639ea0d08ca", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2360651c91e90b4d553f511d0ad13639ea0d08ca"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0ff093d85530159d74f77edc0da5d8bd176fe953", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0ff093d85530159d74f77edc0da5d8bd176fe953", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0ff093d85530159d74f77edc0da5d8bd176fe953", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0ff093d85530159d74f77edc0da5d8bd176fe953/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "9588d24871d34967389a1396e3df16c61eacd54c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9588d24871d34967389a1396e3df16c61eacd54c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9588d24871d34967389a1396e3df16c61eacd54c"}], "stats": {"total": 215, "additions": 142, "deletions": 73}, "files": [{"sha": "85c2ba33aed3cfe02b26a0c4ad4b8f0ac26fc5c4", "filename": "gcc/ChangeLog", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0ff093d85530159d74f77edc0da5d8bd176fe953/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0ff093d85530159d74f77edc0da5d8bd176fe953/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=0ff093d85530159d74f77edc0da5d8bd176fe953", "patch": "@@ -1,3 +1,25 @@\n+2015-04-21  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/65650\n+\t* tree-ssa-ccp.c (valid_lattice_transition): Allow lattice\n+\ttransitions involving copies.\n+\t(set_lattice_value): Adjust for copy lattice state.\n+\t(ccp_lattice_meet): Do not merge UNDEFINED and a copy to the copy\n+\tif that doesn't dominate the merge point.\n+\t(bit_value_unop): Adjust what we treat as varying mask.\n+\t(bit_value_binop): Likewise.\n+\t(bit_value_assume_aligned): Likewise.\n+\t(evaluate_stmt): When we simplified to a SSA name record a copy\n+\tinstead of dropping to varying.\n+\t(visit_assignment): Simplify.\n+\n+\t* gimple-match.h (gimple_simplify): Add another callback.\n+\t* gimple-fold.c (fold_stmt_1): Adjust caller.\n+\t(gimple_fold_stmt_to_constant_1): Likewise - pass valueize\n+\tfor the 2nd callback.\n+\t* gimple-match-head.c (gimple_simplify): Add a callback that is\n+\tused to valueize the stmt operands and use it that way.\n+\n 2015-04-21  Richard Biener  <rguenther@suse.de>\n \n \tPR tree-optimization/65788"}, {"sha": "2cc5628608497eb2832fc3abb6d46235233298ce", "filename": "gcc/gimple-fold.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0ff093d85530159d74f77edc0da5d8bd176fe953/gcc%2Fgimple-fold.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0ff093d85530159d74f77edc0da5d8bd176fe953/gcc%2Fgimple-fold.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-fold.c?ref=0ff093d85530159d74f77edc0da5d8bd176fe953", "patch": "@@ -3621,7 +3621,8 @@ fold_stmt_1 (gimple_stmt_iterator *gsi, bool inplace, tree (*valueize) (tree))\n       gimple_seq seq = NULL;\n       code_helper rcode;\n       tree ops[3] = {};\n-      if (gimple_simplify (stmt, &rcode, ops, inplace ? NULL : &seq, valueize))\n+      if (gimple_simplify (stmt, &rcode, ops, inplace ? NULL : &seq,\n+\t\t\t   valueize, valueize))\n \t{\n \t  if (replace_stmt_with_simplification (gsi, rcode, ops, &seq, inplace))\n \t    changed = true;\n@@ -4928,7 +4929,7 @@ gimple_fold_stmt_to_constant_1 (gimple stmt, tree (*valueize) (tree),\n      edges if there are intermediate VARYING defs.  For this reason\n      do not follow SSA edges here even though SCCVN can technically\n      just deal fine with that.  */\n-  if (gimple_simplify (stmt, &rcode, ops, NULL, gvalueize)\n+  if (gimple_simplify (stmt, &rcode, ops, NULL, gvalueize, valueize)\n       && rcode.is_tree_code ()\n       && (TREE_CODE_LENGTH ((tree_code) rcode) == 0\n \t  || ((tree_code) rcode) == ADDR_EXPR)"}, {"sha": "c7b2f957baca4bd05c25988938d126d817404fbe", "filename": "gcc/gimple-match-head.c", "status": "modified", "additions": 38, "deletions": 37, "changes": 75, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0ff093d85530159d74f77edc0da5d8bd176fe953/gcc%2Fgimple-match-head.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0ff093d85530159d74f77edc0da5d8bd176fe953/gcc%2Fgimple-match-head.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-match-head.c?ref=0ff093d85530159d74f77edc0da5d8bd176fe953", "patch": "@@ -601,7 +601,8 @@ gimple_simplify (enum built_in_function fn, tree type,\n bool\n gimple_simplify (gimple stmt,\n \t\t code_helper *rcode, tree *ops,\n-\t\t gimple_seq *seq, tree (*valueize)(tree))\n+\t\t gimple_seq *seq,\n+\t\t tree (*valueize)(tree), tree (*top_valueize)(tree))\n {\n   switch (gimple_code (stmt))\n     {\n@@ -617,9 +618,9 @@ gimple_simplify (gimple stmt,\n \t\t|| code == VIEW_CONVERT_EXPR)\n \t      {\n \t\ttree op0 = TREE_OPERAND (gimple_assign_rhs1 (stmt), 0);\n-\t\tif (valueize && TREE_CODE (op0) == SSA_NAME)\n+\t\tif (top_valueize && TREE_CODE (op0) == SSA_NAME)\n \t\t  {\n-\t\t    tree tem = valueize (op0);\n+\t\t    tree tem = top_valueize (op0);\n \t\t    if (tem)\n \t\t      op0 = tem;\n \t\t  }\n@@ -631,9 +632,9 @@ gimple_simplify (gimple stmt,\n \t      {\n \t\ttree rhs1 = gimple_assign_rhs1 (stmt);\n \t\ttree op0 = TREE_OPERAND (rhs1, 0);\n-\t\tif (valueize && TREE_CODE (op0) == SSA_NAME)\n+\t\tif (top_valueize && TREE_CODE (op0) == SSA_NAME)\n \t\t  {\n-\t\t    tree tem = valueize (op0);\n+\t\t    tree tem = top_valueize (op0);\n \t\t    if (tem)\n \t\t      op0 = tem;\n \t\t  }\n@@ -644,10 +645,10 @@ gimple_simplify (gimple stmt,\n \t\treturn gimple_resimplify3 (seq, rcode, type, ops, valueize);\n \t      }\n \t    else if (code == SSA_NAME\n-\t\t     && valueize)\n+\t\t     && top_valueize)\n \t      {\n \t\ttree op0 = gimple_assign_rhs1 (stmt);\n-\t\ttree valueized = valueize (op0);\n+\t\ttree valueized = top_valueize (op0);\n \t\tif (!valueized || op0 == valueized)\n \t\t  return false;\n \t\tops[0] = valueized;\n@@ -658,9 +659,9 @@ gimple_simplify (gimple stmt,\n \t  case GIMPLE_UNARY_RHS:\n \t    {\n \t      tree rhs1 = gimple_assign_rhs1 (stmt);\n-\t      if (valueize && TREE_CODE (rhs1) == SSA_NAME)\n+\t      if (top_valueize && TREE_CODE (rhs1) == SSA_NAME)\n \t\t{\n-\t\t  tree tem = valueize (rhs1);\n+\t\t  tree tem = top_valueize (rhs1);\n \t\t  if (tem)\n \t\t    rhs1 = tem;\n \t\t}\n@@ -671,16 +672,16 @@ gimple_simplify (gimple stmt,\n \t  case GIMPLE_BINARY_RHS:\n \t    {\n \t      tree rhs1 = gimple_assign_rhs1 (stmt);\n-\t      if (valueize && TREE_CODE (rhs1) == SSA_NAME)\n+\t      if (top_valueize && TREE_CODE (rhs1) == SSA_NAME)\n \t\t{\n-\t\t  tree tem = valueize (rhs1);\n+\t\t  tree tem = top_valueize (rhs1);\n \t\t  if (tem)\n \t\t    rhs1 = tem;\n \t\t}\n \t      tree rhs2 = gimple_assign_rhs2 (stmt);\n-\t      if (valueize && TREE_CODE (rhs2) == SSA_NAME)\n+\t      if (top_valueize && TREE_CODE (rhs2) == SSA_NAME)\n \t\t{\n-\t\t  tree tem = valueize (rhs2);\n+\t\t  tree tem = top_valueize (rhs2);\n \t\t  if (tem)\n \t\t    rhs2 = tem;\n \t\t}\n@@ -692,23 +693,23 @@ gimple_simplify (gimple stmt,\n \t  case GIMPLE_TERNARY_RHS:\n \t    {\n \t      tree rhs1 = gimple_assign_rhs1 (stmt);\n-\t      if (valueize && TREE_CODE (rhs1) == SSA_NAME)\n+\t      if (top_valueize && TREE_CODE (rhs1) == SSA_NAME)\n \t\t{\n-\t\t  tree tem = valueize (rhs1);\n+\t\t  tree tem = top_valueize (rhs1);\n \t\t  if (tem)\n \t\t    rhs1 = tem;\n \t\t}\n \t      tree rhs2 = gimple_assign_rhs2 (stmt);\n-\t      if (valueize && TREE_CODE (rhs2) == SSA_NAME)\n+\t      if (top_valueize && TREE_CODE (rhs2) == SSA_NAME)\n \t\t{\n-\t\t  tree tem = valueize (rhs2);\n+\t\t  tree tem = top_valueize (rhs2);\n \t\t  if (tem)\n \t\t    rhs2 = tem;\n \t\t}\n \t      tree rhs3 = gimple_assign_rhs3 (stmt);\n-\t      if (valueize && TREE_CODE (rhs3) == SSA_NAME)\n+\t      if (top_valueize && TREE_CODE (rhs3) == SSA_NAME)\n \t\t{\n-\t\t  tree tem = valueize (rhs3);\n+\t\t  tree tem = top_valueize (rhs3);\n \t\t  if (tem)\n \t\t    rhs3 = tem;\n \t\t}\n@@ -732,9 +733,9 @@ gimple_simplify (gimple stmt,\n \t  /* ???  Internal function support missing.  */\n \t  if (!fn)\n \t    return false;\n-\t  if (valueize && TREE_CODE (fn) == SSA_NAME)\n+\t  if (top_valueize && TREE_CODE (fn) == SSA_NAME)\n \t    {\n-\t      tree tem = valueize (fn);\n+\t      tree tem = top_valueize (fn);\n \t      if (tem)\n \t\tfn = tem;\n \t    }\n@@ -754,9 +755,9 @@ gimple_simplify (gimple stmt,\n \t    case 1:\n \t      {\n \t\ttree arg1 = gimple_call_arg (stmt, 0);\n-\t\tif (valueize && TREE_CODE (arg1) == SSA_NAME)\n+\t\tif (top_valueize && TREE_CODE (arg1) == SSA_NAME)\n \t\t  {\n-\t\t    tree tem = valueize (arg1);\n+\t\t    tree tem = top_valueize (arg1);\n \t\t    if (tem)\n \t\t      arg1 = tem;\n \t\t  }\n@@ -767,16 +768,16 @@ gimple_simplify (gimple stmt,\n \t    case 2:\n \t      {\n \t\ttree arg1 = gimple_call_arg (stmt, 0);\n-\t\tif (valueize && TREE_CODE (arg1) == SSA_NAME)\n+\t\tif (top_valueize && TREE_CODE (arg1) == SSA_NAME)\n \t\t  {\n-\t\t    tree tem = valueize (arg1);\n+\t\t    tree tem = top_valueize (arg1);\n \t\t    if (tem)\n \t\t      arg1 = tem;\n \t\t  }\n \t\ttree arg2 = gimple_call_arg (stmt, 1);\n-\t\tif (valueize && TREE_CODE (arg2) == SSA_NAME)\n+\t\tif (top_valueize && TREE_CODE (arg2) == SSA_NAME)\n \t\t  {\n-\t\t    tree tem = valueize (arg2);\n+\t\t    tree tem = top_valueize (arg2);\n \t\t    if (tem)\n \t\t      arg2 = tem;\n \t\t  }\n@@ -788,23 +789,23 @@ gimple_simplify (gimple stmt,\n \t    case 3:\n \t      {\n \t\ttree arg1 = gimple_call_arg (stmt, 0);\n-\t\tif (valueize && TREE_CODE (arg1) == SSA_NAME)\n+\t\tif (top_valueize && TREE_CODE (arg1) == SSA_NAME)\n \t\t  {\n-\t\t    tree tem = valueize (arg1);\n+\t\t    tree tem = top_valueize (arg1);\n \t\t    if (tem)\n \t\t      arg1 = tem;\n \t\t  }\n \t\ttree arg2 = gimple_call_arg (stmt, 1);\n-\t\tif (valueize && TREE_CODE (arg2) == SSA_NAME)\n+\t\tif (top_valueize && TREE_CODE (arg2) == SSA_NAME)\n \t\t  {\n-\t\t    tree tem = valueize (arg2);\n+\t\t    tree tem = top_valueize (arg2);\n \t\t    if (tem)\n \t\t      arg2 = tem;\n \t\t  }\n \t\ttree arg3 = gimple_call_arg (stmt, 2);\n-\t\tif (valueize && TREE_CODE (arg3) == SSA_NAME)\n+\t\tif (top_valueize && TREE_CODE (arg3) == SSA_NAME)\n \t\t  {\n-\t\t    tree tem = valueize (arg3);\n+\t\t    tree tem = top_valueize (arg3);\n \t\t    if (tem)\n \t\t      arg3 = tem;\n \t\t  }\n@@ -823,16 +824,16 @@ gimple_simplify (gimple stmt,\n     case GIMPLE_COND:\n       {\n \ttree lhs = gimple_cond_lhs (stmt);\n-\tif (valueize && TREE_CODE (lhs) == SSA_NAME)\n+\tif (top_valueize && TREE_CODE (lhs) == SSA_NAME)\n \t  {\n-\t    tree tem = valueize (lhs);\n+\t    tree tem = top_valueize (lhs);\n \t    if (tem)\n \t      lhs = tem;\n \t  }\n \ttree rhs = gimple_cond_rhs (stmt);\n-\tif (valueize && TREE_CODE (rhs) == SSA_NAME)\n+\tif (top_valueize && TREE_CODE (rhs) == SSA_NAME)\n \t  {\n-\t    tree tem = valueize (rhs);\n+\t    tree tem = top_valueize (rhs);\n \t    if (tem)\n \t      rhs = tem;\n \t  }"}, {"sha": "f9e351754844ca3cac6c1e9b965e9bc4e5d90c80", "filename": "gcc/gimple-match.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0ff093d85530159d74f77edc0da5d8bd176fe953/gcc%2Fgimple-match.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0ff093d85530159d74f77edc0da5d8bd176fe953/gcc%2Fgimple-match.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-match.h?ref=0ff093d85530159d74f77edc0da5d8bd176fe953", "patch": "@@ -41,7 +41,7 @@ class code_helper\n };\n \n bool gimple_simplify (gimple, code_helper *, tree *, gimple_seq *,\n-\t\t      tree (*)(tree));\n+\t\t      tree (*)(tree), tree (*)(tree));\n tree maybe_push_res_to_seq (code_helper, tree, tree *,\n \t\t\t    gimple_seq *, tree res = NULL_TREE);\n void maybe_build_generic_op (enum tree_code, tree, tree *, tree, tree);"}, {"sha": "5573e423ca8616dcc91821f3215a248362eca808", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0ff093d85530159d74f77edc0da5d8bd176fe953/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0ff093d85530159d74f77edc0da5d8bd176fe953/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=0ff093d85530159d74f77edc0da5d8bd176fe953", "patch": "@@ -1,3 +1,13 @@\n+2015-04-21  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/65650\n+\t* gcc.dg/tree-ssa/ssa-ccp-37.c: New testcase.\n+\t* gcc.dg/tree-ssa/forwprop-11.c: Adjust.\n+\t* gcc.dg/tree-ssa/ssa-fre-3.c: Likewise.\n+\t* gcc.dg/tree-ssa/ssa-fre-4.c: Likewise.\n+\t* gcc.dg/tree-ssa/ssa-fre-5.c: Likewise.\n+\t* gcc.dg/tree-ssa/ssa-fre-32.c: Likewise.\n+\n 2015-04-21  Tom de Vries  <tom@codesourcery.com>\n \n \tPR tree-optimization/65802"}, {"sha": "7252801e42393f6e2a3235a1f067b02ce9ba4289", "filename": "gcc/testsuite/gcc.dg/tree-ssa/forwprop-11.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0ff093d85530159d74f77edc0da5d8bd176fe953/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fforwprop-11.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0ff093d85530159d74f77edc0da5d8bd176fe953/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fforwprop-11.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fforwprop-11.c?ref=0ff093d85530159d74f77edc0da5d8bd176fe953", "patch": "@@ -16,5 +16,5 @@ int g(int *p, int n)\n   return q[-1];\n }\n \n-/* { dg-final { scan-tree-dump-times \"= MEM\\\\\\[\\\\\\(int \\\\\\*\\\\\\)\\[ap\\]_.. \\\\\\+ 4B\\\\\\];\" 2 \"forwprop1\" } } */\n+/* { dg-final { scan-tree-dump-times \"= MEM\\\\\\[\\\\\\(int \\\\\\*\\\\\\)\\[ap\\]_\\[0-9\\]+(?:\\\\(D\\\\))? \\\\\\+ 4B\\\\\\];\" 2 \"forwprop1\" } } */\n /* { dg-final { cleanup-tree-dump \"forwprop1\" } } */"}, {"sha": "518448273a4e3ef298c58e579e05625cd31c201f", "filename": "gcc/testsuite/gcc.dg/tree-ssa/ssa-ccp-37.c", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0ff093d85530159d74f77edc0da5d8bd176fe953/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-ccp-37.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0ff093d85530159d74f77edc0da5d8bd176fe953/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-ccp-37.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-ccp-37.c?ref=0ff093d85530159d74f77edc0da5d8bd176fe953", "patch": "@@ -0,0 +1,14 @@\n+/* { dg-do compile } */\r\n+/* { dg-options \"-O -fdump-tree-ccp1\" } */\r\n+\r\n+int foo (int i)\r\n+{\r\n+  int j = i;\r\n+  int k = 0;\r\n+  int l = j + k;\r\n+  int m = l - j;\r\n+  return m;\r\n+}\r\n+\r\n+/* { dg-final { scan-tree-dump \"return 0;\" \"ccp1\" } } */\r\n+/* { dg-final { cleanup-tree-dump \"ccp1\" } } */\r"}, {"sha": "762a15059dd763c913c9a7f7b2ee47d6c972188e", "filename": "gcc/testsuite/gcc.dg/tree-ssa/ssa-fre-3.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0ff093d85530159d74f77edc0da5d8bd176fe953/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-fre-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0ff093d85530159d74f77edc0da5d8bd176fe953/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-fre-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-fre-3.c?ref=0ff093d85530159d74f77edc0da5d8bd176fe953", "patch": "@@ -6,7 +6,7 @@\n    When the condition is true, we distribute \"(int) (a + b)\" as\n    \"(int) a + (int) b\", otherwise we keep the original.  */\n /* { dg-do compile { target { { ! mips64 } && { ! spu-*-* } } } } */\n-/* { dg-options \"-O -fno-tree-forwprop -fwrapv -fdump-tree-fre1-details\" } */\n+/* { dg-options \"-O -fno-tree-forwprop -fno-tree-ccp -fwrapv -fdump-tree-fre1-details\" } */\n \n /* From PR14844.  */\n "}, {"sha": "792b4ab686dfe3d2a2205450c94d460922eb3dd6", "filename": "gcc/testsuite/gcc.dg/tree-ssa/ssa-fre-32.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0ff093d85530159d74f77edc0da5d8bd176fe953/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-fre-32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0ff093d85530159d74f77edc0da5d8bd176fe953/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-fre-32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-fre-32.c?ref=0ff093d85530159d74f77edc0da5d8bd176fe953", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile } */\n-/* { dg-options \"-O -fno-tree-forwprop -fdump-tree-fre1-details\" } */\n+/* { dg-options \"-O -fno-tree-forwprop -fno-tree-ccp -fdump-tree-fre1-details\" } */\n \n _Complex float m;\n "}, {"sha": "74e751072a1012b44cc01dfd6850c46541fc8b79", "filename": "gcc/testsuite/gcc.dg/tree-ssa/ssa-fre-4.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0ff093d85530159d74f77edc0da5d8bd176fe953/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-fre-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0ff093d85530159d74f77edc0da5d8bd176fe953/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-fre-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-fre-4.c?ref=0ff093d85530159d74f77edc0da5d8bd176fe953", "patch": "@@ -1,7 +1,7 @@\n /* If the target returns false for TARGET_PROMOTE_PROTOTYPES, then there\n    will be no casts for FRE to eliminate and the test will fail.  */\n /* { dg-do compile { target i?86-*-* x86_64-*-* hppa*-*-* mips*-*-* m68k*-*-* } } */\n-/* { dg-options \"-O -fno-tree-forwprop -fdump-tree-fre1-details\" } */\n+/* { dg-options \"-O -fno-tree-ccp -fno-tree-forwprop -fdump-tree-fre1-details\" } */\n \n /* From PR21608.  */\n "}, {"sha": "968e3778d6918ef1b1f5fb5cfb4655ba952b9202", "filename": "gcc/testsuite/gcc.dg/tree-ssa/ssa-fre-5.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0ff093d85530159d74f77edc0da5d8bd176fe953/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-fre-5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0ff093d85530159d74f77edc0da5d8bd176fe953/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-fre-5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-fre-5.c?ref=0ff093d85530159d74f77edc0da5d8bd176fe953", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile } */\n-/* { dg-options \"-O -fno-tree-forwprop -fdump-tree-fre1-details\" } */\n+/* { dg-options \"-O -fno-tree-ccp -fno-tree-forwprop -fdump-tree-fre1-details\" } */\n \n /* From PR19792.  */\n "}, {"sha": "1d7cafeb80790a6eac17ac5e58c144aa00e5797d", "filename": "gcc/tree-ssa-ccp.c", "status": "modified", "additions": 49, "deletions": 28, "changes": 77, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0ff093d85530159d74f77edc0da5d8bd176fe953/gcc%2Ftree-ssa-ccp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0ff093d85530159d74f77edc0da5d8bd176fe953/gcc%2Ftree-ssa-ccp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-ccp.c?ref=0ff093d85530159d74f77edc0da5d8bd176fe953", "patch": "@@ -439,6 +439,17 @@ valid_lattice_transition (ccp_prop_value_t old_val, ccp_prop_value_t new_val)\n \n   /* Now both lattice values are CONSTANT.  */\n \n+  /* Allow arbitrary copy changes as we might look through PHI <a_1, ...>\n+     when only a single copy edge is executable.  */\n+  if (TREE_CODE (old_val.value) == SSA_NAME\n+      && TREE_CODE (new_val.value) == SSA_NAME)\n+    return true;\n+\n+  /* Allow transitioning from a constant to a copy.  */\n+  if (is_gimple_min_invariant (old_val.value)\n+      && TREE_CODE (new_val.value) == SSA_NAME)\n+    return true;\n+\n   /* Allow transitioning from PHI <&x, not executable> == &x\n      to PHI <&x, &y> == common alignment.  */\n   if (TREE_CODE (old_val.value) != INTEGER_CST\n@@ -527,9 +538,10 @@ set_lattice_value (tree var, ccp_prop_value_t new_val)\n      caller that this was a non-transition.  */\n   if (old_val->lattice_val != new_val.lattice_val\n       || (new_val.lattice_val == CONSTANT\n-\t  && TREE_CODE (new_val.value) == INTEGER_CST\n-\t  && (TREE_CODE (old_val->value) != INTEGER_CST\n-\t      || new_val.mask != old_val->mask)))\n+\t  && (TREE_CODE (new_val.value) != TREE_CODE (old_val->value)\n+\t      || simple_cst_equal (new_val.value, old_val->value) != 1\n+\t      || (TREE_CODE (new_val.value) == INTEGER_CST\n+\t\t  && new_val.mask != old_val->mask))))\n     {\n       /* ???  We would like to delay creation of INTEGER_CSTs from\n \t partially constants here.  */\n@@ -965,14 +977,23 @@ ccp_finalize (void)\n    */\n \n static void\n-ccp_lattice_meet (ccp_prop_value_t *val1, ccp_prop_value_t *val2)\n+ccp_lattice_meet (basic_block where,\n+\t\t  ccp_prop_value_t *val1, ccp_prop_value_t *val2)\n {\n-  if (val1->lattice_val == UNDEFINED)\n+  if (val1->lattice_val == UNDEFINED\n+      /* For UNDEFINED M SSA we can't always SSA because its definition\n+         may not dominate the PHI node.  Doing optimistic copy propagation\n+\t also causes a lot of gcc.dg/uninit-pred*.c FAILs.  */\n+      && (val2->lattice_val != CONSTANT\n+\t  || TREE_CODE (val2->value) != SSA_NAME))\n     {\n       /* UNDEFINED M any = any   */\n       *val1 = *val2;\n     }\n-  else if (val2->lattice_val == UNDEFINED)\n+  else if (val2->lattice_val == UNDEFINED\n+\t   /* See above.  */\n+\t   && (val1->lattice_val != CONSTANT\n+\t       || TREE_CODE (val1->value) != SSA_NAME))\n     {\n       /* any M UNDEFINED = any\n          Nothing to do.  VAL1 already contains the value we want.  */\n@@ -1026,7 +1047,7 @@ ccp_lattice_meet (ccp_prop_value_t *val1, ccp_prop_value_t *val2)\n \t*val1 = get_value_for_expr (val1->value, true);\n       if (TREE_CODE (val2->value) == ADDR_EXPR)\n \ttem = get_value_for_expr (val2->value, true);\n-      ccp_lattice_meet (val1, &tem);\n+      ccp_lattice_meet (where, val1, &tem);\n     }\n   else\n     {\n@@ -1095,7 +1116,7 @@ ccp_visit_phi_node (gphi *phi)\n \t  tree arg = gimple_phi_arg (phi, i)->def;\n \t  ccp_prop_value_t arg_val = get_value_for_expr (arg, false);\n \n-\t  ccp_lattice_meet (&new_val, &arg_val);\n+\t  ccp_lattice_meet (gimple_bb (phi), &new_val, &arg_val);\n \n \t  if (dump_file && (dump_flags & TDF_DETAILS))\n \t    {\n@@ -1929,9 +1950,21 @@ evaluate_stmt (gimple stmt)\n   /* The statement produced a nonconstant value.  */\n   if (!is_constant)\n     {\n-      val.lattice_val = VARYING;\n-      val.mask = -1;\n-      val.value = NULL_TREE;\n+      /* The statement produced a copy.  */\n+      if (simplified && TREE_CODE (simplified) == SSA_NAME\n+\t  && !SSA_NAME_OCCURS_IN_ABNORMAL_PHI (simplified))\n+\t{\n+\t  val.lattice_val = CONSTANT;\n+\t  val.value = simplified;\n+\t  val.mask = -1;\n+\t}\n+      /* The statement is VARYING.  */\n+      else\n+\t{\n+\t  val.lattice_val = VARYING;\n+\t  val.value = NULL_TREE;\n+\t  val.mask = -1;\n+\t}\n     }\n \n   return val;\n@@ -2243,27 +2276,15 @@ static enum ssa_prop_result\n visit_assignment (gimple stmt, tree *output_p)\n {\n   ccp_prop_value_t val;\n-  enum ssa_prop_result retval;\n+  enum ssa_prop_result retval = SSA_PROP_NOT_INTERESTING;\n \n   tree lhs = gimple_get_lhs (stmt);\n-\n-  gcc_assert (gimple_code (stmt) != GIMPLE_CALL\n-              || gimple_call_lhs (stmt) != NULL_TREE);\n-\n-  if (gimple_assign_single_p (stmt)\n-      && gimple_assign_rhs_code (stmt) == SSA_NAME)\n-    /* For a simple copy operation, we copy the lattice values.  */\n-    val = *get_value (gimple_assign_rhs1 (stmt));\n-  else\n-    /* Evaluate the statement, which could be\n-       either a GIMPLE_ASSIGN or a GIMPLE_CALL.  */\n-    val = evaluate_stmt (stmt);\n-\n-  retval = SSA_PROP_NOT_INTERESTING;\n-\n-  /* Set the lattice value of the statement's output.  */\n   if (TREE_CODE (lhs) == SSA_NAME)\n     {\n+      /* Evaluate the statement, which could be\n+\t either a GIMPLE_ASSIGN or a GIMPLE_CALL.  */\n+      val = evaluate_stmt (stmt);\n+\n       /* If STMT is an assignment to an SSA_NAME, we only have one\n \t value to set.  */\n       if (set_lattice_value (lhs, val))"}]}