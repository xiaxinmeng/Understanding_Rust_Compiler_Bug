{"sha": "753de8cffaad47947ea7c04a6c91e1e842a7af1c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzUzZGU4Y2ZmYWFkNDc5NDdlYTdjMDRhNmM5MWUxZTg0MmE3YWYxYw==", "commit": {"author": {"name": "Alexander Monakov", "email": "amonakov@ispras.ru", "date": "2010-12-03T12:04:16Z"}, "committer": {"name": "Alexander Monakov", "email": "amonakov@gcc.gnu.org", "date": "2010-12-03T12:04:16Z"}, "message": "re PR rtl-optimization/45354 (ICE with -fselective-scheduling and -freorder-blocks-and-partition)\n\n\tPR rtl-optimization/45354\n\t* sel-sched-ir.c (jump_leads_only_to_bb_p): Rename to ...\n\t(bb_has_removable_jump_to_p): This.  Update all callers. Make static.\n\tAllow BBs ending with a conditional jump.  Forbid EDGE_CROSSING jumps.\n\t* sel-sched-ir.h (jump_leads_only_to_bb_p): Delete prototype.\n\ntestsuite:\n\t* gcc.dg/tree-prof/pr45354.c: New.\n\nFrom-SVN: r167415", "tree": {"sha": "cbeca1405d7a3570fae0ced7fb41f8b4796fdb7d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/cbeca1405d7a3570fae0ced7fb41f8b4796fdb7d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/753de8cffaad47947ea7c04a6c91e1e842a7af1c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/753de8cffaad47947ea7c04a6c91e1e842a7af1c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/753de8cffaad47947ea7c04a6c91e1e842a7af1c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/753de8cffaad47947ea7c04a6c91e1e842a7af1c/comments", "author": {"login": "amonakov", "id": 1997391, "node_id": "MDQ6VXNlcjE5OTczOTE=", "avatar_url": "https://avatars.githubusercontent.com/u/1997391?v=4", "gravatar_id": "", "url": "https://api.github.com/users/amonakov", "html_url": "https://github.com/amonakov", "followers_url": "https://api.github.com/users/amonakov/followers", "following_url": "https://api.github.com/users/amonakov/following{/other_user}", "gists_url": "https://api.github.com/users/amonakov/gists{/gist_id}", "starred_url": "https://api.github.com/users/amonakov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/amonakov/subscriptions", "organizations_url": "https://api.github.com/users/amonakov/orgs", "repos_url": "https://api.github.com/users/amonakov/repos", "events_url": "https://api.github.com/users/amonakov/events{/privacy}", "received_events_url": "https://api.github.com/users/amonakov/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "46203ba753fd2e727fb0e2d0622a5503c8f2bdc6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/46203ba753fd2e727fb0e2d0622a5503c8f2bdc6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/46203ba753fd2e727fb0e2d0622a5503c8f2bdc6"}], "stats": {"total": 81, "additions": 67, "deletions": 14}, "files": [{"sha": "77fd7dbcf60d3c90a819d9e685389f5009186f5f", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/753de8cffaad47947ea7c04a6c91e1e842a7af1c/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/753de8cffaad47947ea7c04a6c91e1e842a7af1c/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=753de8cffaad47947ea7c04a6c91e1e842a7af1c", "patch": "@@ -1,3 +1,11 @@\n+2010-12-03  Alexander Monakov  <amonakov@ispras.ru>\n+\n+\tPR rtl-optimization/45354\n+\t* sel-sched-ir.c (jump_leads_only_to_bb_p): Rename to ...\n+\t(bb_has_removable_jump_to_p): This.  Update all callers. Make static.\n+\tAllow BBs ending with a conditional jump.  Forbid EDGE_CROSSING jumps.\n+\t* sel-sched-ir.h (jump_leads_only_to_bb_p): Delete prototype.\n+\n 2010-12-03  Laurynas Biveinis  <laurynas.biveinis@gmail.com>\n \n \t* basic-block.h (struct edge_prediction): Remove forward"}, {"sha": "26968828d19f27dc1a00c6fe16464abe396de0e8", "filename": "gcc/sel-sched-ir.c", "status": "modified", "additions": 11, "deletions": 13, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/753de8cffaad47947ea7c04a6c91e1e842a7af1c/gcc%2Fsel-sched-ir.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/753de8cffaad47947ea7c04a6c91e1e842a7af1c/gcc%2Fsel-sched-ir.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsel-sched-ir.c?ref=753de8cffaad47947ea7c04a6c91e1e842a7af1c", "patch": "@@ -154,6 +154,7 @@ static void move_bb_info (basic_block, basic_block);\n static void remove_empty_bb (basic_block, bool);\n static void sel_merge_blocks (basic_block, basic_block);\n static void sel_remove_loop_preheader (void);\n+static bool bb_has_removable_jump_to_p (basic_block, basic_block);\n \n static bool insn_is_the_only_one_in_bb_p (insn_t);\n static void create_initial_data_sets (basic_block);\n@@ -3673,7 +3674,7 @@ tidy_control_flow (basic_block xbb, bool full_tidying)\n     return changed;\n \n   /* Check if there is a unnecessary jump after insn left.  */\n-  if (jump_leads_only_to_bb_p (BB_END (xbb), xbb->next_bb)\n+  if (bb_has_removable_jump_to_p (xbb, xbb->next_bb)\n       && INSN_SCHED_TIMES (BB_END (xbb)) == 0\n       && !IN_CURRENT_FENCE_P (BB_END (xbb)))\n     {\n@@ -3714,7 +3715,7 @@ tidy_control_flow (basic_block xbb, bool full_tidying)\n       /* And unconditional jump in previous basic block leads to\n          next basic block of XBB and this jump can be safely removed.  */\n       && in_current_region_p (xbb->prev_bb)\n-      && jump_leads_only_to_bb_p (BB_END (xbb->prev_bb), xbb->next_bb)\n+      && bb_has_removable_jump_to_p (xbb->prev_bb, xbb->next_bb)\n       && INSN_SCHED_TIMES (BB_END (xbb->prev_bb)) == 0\n       /* Also this jump is not at the scheduling boundary.  */\n       && !IN_CURRENT_FENCE_P (BB_END (xbb->prev_bb)))\n@@ -6102,22 +6103,19 @@ sel_is_loop_preheader_p (basic_block bb)\n   return false;\n }\n \n-/* Checks whether JUMP leads to basic block DEST_BB and no other blocks.  */\n-bool\n-jump_leads_only_to_bb_p (insn_t jump, basic_block dest_bb)\n+/* Check whether JUMP_BB ends with a jump insn that leads only to DEST_BB and\n+   can be removed, making the corresponding edge fallthrough (assuming that\n+   all basic blocks between JUMP_BB and DEST_BB are empty).  */\n+static bool\n+bb_has_removable_jump_to_p (basic_block jump_bb, basic_block dest_bb)\n {\n-  basic_block jump_bb = BLOCK_FOR_INSN (jump);\n-\n-  /* It is not jump, jump with side-effects or jump can lead to several\n-     basic blocks.  */\n-  if (!onlyjump_p (jump)\n-      || !any_uncondjump_p (jump))\n+  if (!onlyjump_p (BB_END (jump_bb)))\n     return false;\n \n   /* Several outgoing edges, abnormal edge or destination of jump is\n      not DEST_BB.  */\n   if (EDGE_COUNT (jump_bb->succs) != 1\n-      || EDGE_SUCC (jump_bb, 0)->flags & EDGE_ABNORMAL\n+      || EDGE_SUCC (jump_bb, 0)->flags & (EDGE_ABNORMAL | EDGE_CROSSING)\n       || EDGE_SUCC (jump_bb, 0)->dest != dest_bb)\n     return false;\n \n@@ -6197,7 +6195,7 @@ sel_remove_loop_preheader (void)\n                  basic block if it becomes empty.  */\n \t      if (next_bb->prev_bb == prev_bb\n                   && prev_bb != ENTRY_BLOCK_PTR\n-                  && jump_leads_only_to_bb_p (BB_END (prev_bb), next_bb))\n+                  && bb_has_removable_jump_to_p (prev_bb, next_bb))\n                 {\n                   redirect_edge_and_branch (EDGE_SUCC (prev_bb, 0), next_bb);\n                   if (BB_END (prev_bb) == bb_note (prev_bb))"}, {"sha": "1f3dec48cc9d2526e1b32d3b1cf9633a52d40292", "filename": "gcc/sel-sched-ir.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/753de8cffaad47947ea7c04a6c91e1e842a7af1c/gcc%2Fsel-sched-ir.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/753de8cffaad47947ea7c04a6c91e1e842a7af1c/gcc%2Fsel-sched-ir.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsel-sched-ir.h?ref=753de8cffaad47947ea7c04a6c91e1e842a7af1c", "patch": "@@ -1590,7 +1590,6 @@ extern bool sel_remove_insn (insn_t, bool, bool);\n extern bool bb_header_p (insn_t);\n extern void sel_init_invalid_data_sets (insn_t);\n extern bool insn_at_boundary_p (insn_t);\n-extern bool jump_leads_only_to_bb_p (insn_t, basic_block);\n \n /* Basic block and CFG functions.  */\n "}, {"sha": "d5bd085cb5037cfe8f4bb103124c9832fe96a2ef", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/753de8cffaad47947ea7c04a6c91e1e842a7af1c/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/753de8cffaad47947ea7c04a6c91e1e842a7af1c/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=753de8cffaad47947ea7c04a6c91e1e842a7af1c", "patch": "@@ -1,3 +1,8 @@\n+2010-12-03  Alexander Monakov  <amonakov@ispras.ru>\n+\n+\tPR rtl-optimization/45354\n+\t* gcc.dg/tree-prof/pr45354.c: New.\n+\n 2010-12-03  Thomas Koenig  <tkoenig@gcc.gnu.org>\n \n \tPR fortran/45159"}, {"sha": "b30ad77694d5958fca4bd21d58dbdf3591d2f316", "filename": "gcc/testsuite/gcc.dg/tree-prof/pr45354.c", "status": "added", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/753de8cffaad47947ea7c04a6c91e1e842a7af1c/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-prof%2Fpr45354.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/753de8cffaad47947ea7c04a6c91e1e842a7af1c/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-prof%2Fpr45354.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-prof%2Fpr45354.c?ref=753de8cffaad47947ea7c04a6c91e1e842a7af1c", "patch": "@@ -0,0 +1,43 @@\n+/* { dg-require-effective-target freorder } */\n+/* { dg-options \"-O -freorder-blocks-and-partition -fschedule-insns -fselective-scheduling\" { target powerpc*-*-* ia64-*-* x86_64-*-* } } */\n+\n+extern void abort (void);\n+\n+int ifelse_val2;\n+\n+int __attribute__((noinline))\n+test_ifelse2 (int i)\n+{\n+  int result = 0;\n+  if (!i)\t\t\t\t/* count(6) */\n+    result = 1;\t\t\t\t/* count(1) */\n+  if (i == 1)\t\t\t\t/* count(6) */\n+    result = 1024;\n+  if (i == 2)\t\t\t\t/* count(6) */\n+    result = 2;\t\t\t\t/* count(3) */\n+  if (i == 3)\t\t\t\t/* count(6) */\n+    return 8;\t\t\t\t/* count(2) */\n+  if (i == 4)\t\t\t\t/* count(4) */\n+    return 2048;\n+  return result;\t\t\t/* count(4) */\n+}\n+\n+void __attribute__((noinline))\n+call_ifelse ()\n+{\n+  ifelse_val2 += test_ifelse2 (0);\n+  ifelse_val2 += test_ifelse2 (2);\n+  ifelse_val2 += test_ifelse2 (2);\n+  ifelse_val2 += test_ifelse2 (2);\n+  ifelse_val2 += test_ifelse2 (3);\n+  ifelse_val2 += test_ifelse2 (3);\n+}\n+\n+int\n+main()\n+{\n+  call_ifelse ();\n+  if (ifelse_val2 != 23)\n+    abort ();\n+  return 0;\n+}"}]}