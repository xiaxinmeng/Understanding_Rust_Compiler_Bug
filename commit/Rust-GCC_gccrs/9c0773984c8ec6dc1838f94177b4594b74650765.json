{"sha": "9c0773984c8ec6dc1838f94177b4594b74650765", "node_id": "C_kwDOANBUbNoAKDljMDc3Mzk4NGM4ZWM2ZGMxODM4Zjk0MTc3YjQ1OTRiNzQ2NTA3NjU", "commit": {"author": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2021-11-20T00:16:35Z"}, "committer": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2021-11-20T00:16:35Z"}, "message": "Daily bump.", "tree": {"sha": "b46e5312a0e8eb768ba4ea457df17f18afe09d56", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b46e5312a0e8eb768ba4ea457df17f18afe09d56"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9c0773984c8ec6dc1838f94177b4594b74650765", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9c0773984c8ec6dc1838f94177b4594b74650765", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9c0773984c8ec6dc1838f94177b4594b74650765", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9c0773984c8ec6dc1838f94177b4594b74650765/comments", "author": null, "committer": null, "parents": [{"sha": "b751b225e4f02cf0c446e659e7c3e204096468bf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b751b225e4f02cf0c446e659e7c3e204096468bf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b751b225e4f02cf0c446e659e7c3e204096468bf"}], "stats": {"total": 540, "additions": 539, "deletions": 1}, "files": [{"sha": "6faa1bd70f383f6a16fb4d4158dda3f91a772575", "filename": "gcc/ChangeLog", "status": "modified", "additions": 166, "deletions": 0, "changes": 166, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c0773984c8ec6dc1838f94177b4594b74650765/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c0773984c8ec6dc1838f94177b4594b74650765/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=9c0773984c8ec6dc1838f94177b4594b74650765", "patch": "@@ -1,3 +1,169 @@\n+2021-11-19  Iain Sandoe  <iain@sandoe.co.uk>\n+\n+\t* doc/invoke.texi: Remove whitespace after an @option.\n+\n+2021-11-19  Paul A. Clarke  <pc@us.ibm.com>\n+\n+\t* config/rs6000/emmintrin.h (_mm_sad_epu8): Use vec_absd when\n+\t_ARCH_PWR9, optimize vec_sum2s when LE.\n+\n+2021-11-19  Iain Sandoe  <iain@sandoe.co.uk>\n+\n+\tPR target/80556\n+\t* config/darwin-driver.c (darwin_driver_init): Handle exported\n+\tsymbols and symbol lists (suppress automatic export of the TLS\n+\tsymbols).\n+\t* config/darwin.c (darwin_rename_builtins): Remove workaround.\n+\t* config/darwin.h (LINK_GCC_C_SEQUENCE_SPEC): Likewise.\n+\t(REAL_LIBGCC_SPEC): Handle revised library uses.\n+\t* config/darwin.opt (nodefaultexport): New.\n+\t* config/i386/darwin.h (PR80556_WORKAROUND): Remove.\n+\t* config/i386/darwin32-biarch.h (PR80556_WORKAROUND): Likewise.\n+\t* config/i386/darwin64-biarch.h (PR80556_WORKAROUND): Likewise.\n+\n+2021-11-19  Martin Jambor  <mjambor@suse.cz>\n+\n+\t* opts.c (default_options_table): Switch off\n+\tflag_semantic_interposition at Ofast.\n+\t* doc/invoke.texi (Optimize Options): Document that Ofast switches off\n+\t-fsemantic-interposition.\n+\n+2021-11-19  Jan Hubicka  <hubicka@ucw.cz>\n+\n+\t* tree-ssa-alias.c (ref_maybe_used_by_call_p_1): Do not guard modref\n+\tby !gimple_call_chain.\n+\n+2021-11-19  Martin Sebor  <msebor@redhat.com>\n+\n+\tPR c++/33925\n+\tPR c/102867\n+\t* doc/invoke.texi (-Waddress): Update.\n+\n+2021-11-19  Andrew MacLeod  <amacleod@redhat.com>\n+\n+\tPR tree-optimization/103254\n+\t* gimple-range-gori.cc (range_def_chain::get_def_chain): Limit the\n+\tdepth for all statements with multple ssa names.\n+\n+2021-11-19  Stefan Schulze Frielinghaus  <stefansf@linux.ibm.com>\n+\n+\t* config/s390/s390.md (define_peephole2): Variable insn points\n+\tto the first matched insn.  Use peep2_next_insn(1) to refer to\n+\tthe second matched insn.\n+\n+2021-11-19  Tamar Christina  <tamar.christina@arm.com>\n+\n+\tPR tree-optimization/103311\n+\tPR target/103330\n+\t* tree-vect-slp-patterns.c (vect_validate_multiplication): Fix CONJ\n+\ttest to new codegen.\n+\t(complex_mul_pattern::matches): Move check downwards.\n+\n+2021-11-19  Martin Liska  <mliska@suse.cz>\n+\n+\tRevert:\n+\t2021-11-19  Martin Liska  <mliska@suse.cz>\n+\n+\t* cfgexpand.c (pass_expand::execute): Use option directly.\n+\t* function.c (allocate_struct_function): Likewise.\n+\t* gimple-low.c (lower_function_body): Likewise.\n+\t(lower_stmt): Likewise.\n+\t* gimple-ssa-backprop.c (backprop::prepare_change): Likewise.\n+\t* ipa-param-manipulation.c (ipa_param_adjustments::modify_call): Likewise.\n+\t* ipa-split.c (split_function): Likewise.\n+\t* lto-streamer-in.c (input_function): Likewise.\n+\t* sese.c (sese_insert_phis_for_liveouts): Likewise.\n+\t* ssa-iterators.h (num_imm_uses): Likewise.\n+\t* tree-cfg.c (make_blocks): Likewise.\n+\t(gimple_merge_blocks): Likewise.\n+\t* tree-inline.c (tree_function_versioning): Likewise.\n+\t* tree-loop-distribution.c (generate_loops_for_partition): Likewise.\n+\t* tree-sra.c (analyze_access_subtree): Likewise.\n+\t* tree-ssa-dce.c (remove_dead_stmt): Likewise.\n+\t* tree-ssa-loop-ivopts.c (remove_unused_ivs): Likewise.\n+\t* tree-ssa-phiopt.c (spaceship_replacement): Likewise.\n+\t* tree-ssa-reassoc.c (reassoc_remove_stmt): Likewise.\n+\t* tree-ssa-tail-merge.c (tail_merge_optimize): Likewise.\n+\t* tree-ssa-threadedge.c (propagate_threaded_block_debug_into): Likewise.\n+\t* tree-ssa.c (gimple_replace_ssa_lhs): Likewise.\n+\t(target_for_debug_bind): Likewise.\n+\t(insert_debug_temp_for_var_def): Likewise.\n+\t(insert_debug_temps_for_defs): Likewise.\n+\t(reset_debug_uses): Likewise.\n+\t* tree-ssanames.c (release_ssa_name_fn): Likewise.\n+\t* tree-vect-loop-manip.c (adjust_vec_debug_stmts): Likewise.\n+\t(adjust_debug_stmts): Likewise.\n+\t(adjust_phi_and_debug_stmts): Likewise.\n+\t(vect_do_peeling): Likewise.\n+\t* tree-vect-loop.c (vect_transform_loop_stmt): Likewise.\n+\t(vect_transform_loop): Likewise.\n+\t* tree.h (MAY_HAVE_DEBUG_MARKER_STMTS): Remove\n+\t(MAY_HAVE_DEBUG_BIND_STMTS): Remove.\n+\t(MAY_HAVE_DEBUG_STMTS): Use options directly.\n+\n+2021-11-19  Giuliano Belinassi  <gbelinassi@suse.de>\n+\n+\t* gcc.c (process_command): Skip dumpdir override if file is a\n+\tnot_actual_file_p.\n+\t* doc/invoke.texi: Update -dumpdir documentation.\n+\n+2021-11-19  Andrew Pinski  <apinski@marvell.com>\n+\n+\tPR tree-optimization/103314\n+\t* match.pd ((type) X op CST): Restrict the equal\n+\tTYPE_PRECISION case to GIMPLE only.\n+\n+2021-11-19  Martin Liska  <mliska@suse.cz>\n+\n+\tPR ipa/103230\n+\t* ipa-modref-tree.h (struct modref_parm_map): Add default\n+\tconstructor.\n+\t* ipa-modref.c (ipa_merge_modref_summary_after_inlining): Use it.\n+\n+2021-11-19  Richard Biener  <rguenther@suse.de>\n+\n+\tPR middle-end/103248\n+\t* tree-eh.c (operation_could_trap_helper_p): Properly handle\n+\tfixed-point RDIV_EXPR.\n+\n+2021-11-19  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/102436\n+\t* tree-ssa-loop-im.c (execute_sm_if_changed): Add mode\n+\tto just create the if structure and return the then block.\n+\t(execute_sm): Add flag to indicate the var will re-use\n+\tanother flag var.\n+\t(hoist_memory_references): Support a single conditional\n+\tblock with all stores as special case.\n+\n+2021-11-19  Andrew Pinski  <apinski@marvell.com>\n+\n+\tPR tree-optimization/103317\n+\t* tree-ssa-phiopt.c (minmax_replacement): For the non empty\n+\tmiddle bb case, check to make sure it has a single predecessor.\n+\n+2021-11-19  Andrew Pinski  <apinski@marvell.com>\n+\n+\tPR tree-optimization/103257\n+\t* match.pd\n+\t((m1 >/</>=/<= m2) * d -> (m1 >/</>=/<= m2) ? d : 0):\n+\tDisable until !canonicalize_math_p ().\n+\n+2021-11-19  Marek Polacek  <polacek@redhat.com>\n+\n+\tPR c++/19808\n+\tPR c++/96121\n+\t* doc/invoke.texi: Update documentation for -Wuninitialized.\n+\t* tree.c (stabilize_reference): Set location.\n+\n+2021-11-19  liuhongt  <hongtao.liu@intel.com>\n+\n+\tPR target/102543\n+\t* config/i386/x86-tune-costs.h (skylake_cost): Reduce cost of\n+\tstoring 256/512-bit SSE register to be equal to cost of\n+\tunaligned store to avoid odd alignment peeling.\n+\t(icelake_cost): Ditto.\n+\n 2021-11-18  David Edelsohn  <dje.gcc@gmail.com>\n \n \t* config/rs6000/predicates.md (current_file_function_operand):"}, {"sha": "9e0ed4c8be97756272d66b9128da5a7518acd2d8", "filename": "gcc/DATESTAMP", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c0773984c8ec6dc1838f94177b4594b74650765/gcc%2FDATESTAMP", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c0773984c8ec6dc1838f94177b4594b74650765/gcc%2FDATESTAMP", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FDATESTAMP?ref=9c0773984c8ec6dc1838f94177b4594b74650765", "patch": "@@ -1 +1 @@\n-20211119\n+20211120"}, {"sha": "34a112d735534d6cb4974d61029d3d2ef06342d5", "filename": "gcc/analyzer/ChangeLog", "status": "modified", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c0773984c8ec6dc1838f94177b4594b74650765/gcc%2Fanalyzer%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c0773984c8ec6dc1838f94177b4594b74650765/gcc%2Fanalyzer%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2FChangeLog?ref=9c0773984c8ec6dc1838f94177b4594b74650765", "patch": "@@ -1,3 +1,37 @@\n+2021-11-19  David Malcolm  <dmalcolm@redhat.com>\n+\n+\tPR analyzer/103217\n+\t* engine.cc (exploded_graph::get_or_create_node): Pass in\n+\tm_ext_state to program_state::can_merge_with_p.\n+\t(exploded_graph::process_worklist): Likewise.\n+\t(exploded_graph::maybe_process_run_of_before_supernode_enodes):\n+\tLikewise.\n+\t(exploded_graph::process_node): Add missing call to detect_leaks\n+\twhen handling phi nodes.\n+\t* program-state.cc (program_state::can_merge_with_p): Add\n+\t\"ext_state\" param.  Pass it and state ptrs to\n+\tregion_model::can_merge_with_p.\n+\t(selftest::test_program_state_merging): Update for new ext_state\n+\tparam of program_state::can_merge_with_p.\n+\t(selftest::test_program_state_merging_2): Likewise.\n+\t* program-state.h (program_state::can_purge_p): Make const.\n+\t(program_state::can_merge_with_p): Add \"ext_state\" param.\n+\t* region-model.cc: Include \"analyzer/program-state.h\".\n+\t(region_model::can_merge_with_p): Add params \"ext_state\",\n+\t\"state_a\", and \"state_b\", use them when creating model_merger\n+\tobject.\n+\t(model_merger::mergeable_svalue_p): New.\n+\t* region-model.h (region_model::can_merge_with_p): Add params\n+\t\"ext_state\", \"state_a\", and \"state_b\".\n+\t(model_merger::model_merger) Likewise, initializing new fields.\n+\t(model_merger::mergeable_svalue_p): New decl.\n+\t(model_merger::m_ext_state): New field.\n+\t(model_merger::m_state_a): New field.\n+\t(model_merger::m_state_b): New field.\n+\t* svalue.cc (svalue::can_merge_p): Call\n+\tmodel_merger::mergeable_svalue_p on both states and reject the\n+\tmerger accordingly.\n+\n 2021-11-17  David Malcolm  <dmalcolm@redhat.com>\n \n \tPR analyzer/102695"}, {"sha": "2e0b81dd5e93dcd1b567c1ebc28a7b1b1f20e127", "filename": "gcc/c-family/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c0773984c8ec6dc1838f94177b4594b74650765/gcc%2Fc-family%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c0773984c8ec6dc1838f94177b4594b74650765/gcc%2Fc-family%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2FChangeLog?ref=9c0773984c8ec6dc1838f94177b4594b74650765", "patch": "@@ -1,3 +1,17 @@\n+2021-11-19  Martin Sebor  <msebor@redhat.com>\n+\n+\tPR c++/33925\n+\tPR c/102867\n+\t* c-common.c (decl_with_nonnull_addr_p): Call maybe_nonzero_address\n+\tand improve handling tof defined symbols.\n+\n+2021-11-19  Martin Liska  <mliska@suse.cz>\n+\n+\tRevert:\n+\t2021-11-18  Martin Liska  <mliska@suse.cz>\n+\n+\t* c-gimplify.c (genericize_c_loop): Use option directly.\n+\n 2021-11-18  Matthias Kretz  <m.kretz@gsi.de>\n \n \t* c-common.c (c_common_reswords): Add __builtin_assoc_barrier."}, {"sha": "d42244da554d2c2bf6d2feb066f84624cfae89cb", "filename": "gcc/c/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c0773984c8ec6dc1838f94177b4594b74650765/gcc%2Fc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c0773984c8ec6dc1838f94177b4594b74650765/gcc%2Fc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2FChangeLog?ref=9c0773984c8ec6dc1838f94177b4594b74650765", "patch": "@@ -1,3 +1,17 @@\n+2021-11-19  Martin Sebor  <msebor@redhat.com>\n+\n+\tPR c++/33925\n+\tPR c/102867\n+\t* c-typeck.c (maybe_warn_for_null_address): Suppress warnings for\n+\tcode resulting from macro expansion.\n+\n+2021-11-19  Martin Liska  <mliska@suse.cz>\n+\n+\tRevert:\n+\t2021-11-19  Martin Liska  <mliska@suse.cz>\n+\n+\t* c-parser.c (add_debug_begin_stmt): Use option directly.\n+\n 2021-11-18  Matthias Kretz  <m.kretz@gsi.de>\n \n \t* c-decl.c (names_builtin_p): Handle RID_BUILTIN_ASSOC_BARRIER."}, {"sha": "205416f451a999f96cae6f6a44d4c8df6ac4787c", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 71, "deletions": 0, "changes": 71, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c0773984c8ec6dc1838f94177b4594b74650765/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c0773984c8ec6dc1838f94177b4594b74650765/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=9c0773984c8ec6dc1838f94177b4594b74650765", "patch": "@@ -1,3 +1,74 @@\n+2021-11-19  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR c++/101180\n+\t* pt.c (apply_late_template_attributes): Temporarily override\n+\tcurrent_optimize_pragma, optimization_current_node,\n+\tcurrent_target_pragma and scope_chain->omp_declare_target_attribute,\n+\tso that cplus_decl_attributes doesn't add implicit attributes.\n+\n+2021-11-19  Martin Sebor  <msebor@redhat.com>\n+\n+\tPR c++/33925\n+\tPR c/102867\n+\t* typeck.c (warn_for_null_address): Suppress warnings for code\n+\tresulting from macro expansion.\n+\n+2021-11-19  Martin Liska  <mliska@suse.cz>\n+\n+\tRevert:\n+\t2021-11-19  Martin Liska  <mliska@suse.cz>\n+\n+\t* parser.c (add_debug_begin_stmt): Use option directly.\n+\n+2021-11-19  Patrick Palka  <ppalka@redhat.com>\n+\n+\t* tree.c (cp_walk_subtrees) <case *_CAST_EXPR>: Don't explicitly\n+\twalk the operands.\n+\n+2021-11-19  Patrick Palka  <ppalka@redhat.com>\n+\n+\tPR c++/94376\n+\t* lambda.c (lambda_capture_field_type): Simplify by handling the\n+\tis_this case first.  When capturing by-value a capture proxy,\n+\tconsider the type of the corresponding field instead.\n+\n+2021-11-19  Richard Biener  <rguenther@suse.de>\n+\n+\tPR c++/103326\n+\t* pt.c (tsubst_copy): Handle VECTOR_CST.\n+\n+2021-11-19  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR c++/70796\n+\t* cp-gimplify.c (cp_gimplify_arg): New function.\n+\t(cp_gimplify_expr): Use cp_gimplify_arg instead of gimplify_arg,\n+\tpass true as last argument to it if there are any following\n+\targuments in strong evaluation order with side-effects.\n+\n+2021-11-19  Marek Polacek  <polacek@redhat.com>\n+\n+\tPR c++/19808\n+\tPR c++/96121\n+\t* init.c (perform_member_init): Remove a forward declaration.\n+\tWalk the initializer using find_uninit_fields_r.  New parameter\n+\tto track uninitialized fields.  If a member is initialized,\n+\tremove it from the hash set.\n+\t(perform_target_ctor): Return the initializer.\n+\t(struct find_uninit_data): New class.\n+\t(find_uninit_fields_r): New function.\n+\t(find_uninit_fields): New function.\n+\t(emit_mem_initializers): Keep and initialize a set holding fields\n+\tthat are not initialized.  When handling delegating constructors,\n+\twalk the constructor tree using find_uninit_fields_r.  Also when\n+\tinitializing base clases.  Pass uninitialized down to\n+\tperform_member_init.\n+\n+2021-11-19  Patrick Palka  <ppalka@redhat.com>\n+\n+\tPR c++/103198\n+\t* pt.c (any_template_parm_r): Walk the TREE_TYPE of a dummy\n+\tobject.\n+\n 2021-11-18  Marek Polacek  <polacek@redhat.com>\n \n \tPR c++/103049"}, {"sha": "4bc2db54b414e5c427127fd1b456b4e31f523d2d", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 135, "deletions": 0, "changes": 135, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c0773984c8ec6dc1838f94177b4594b74650765/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c0773984c8ec6dc1838f94177b4594b74650765/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=9c0773984c8ec6dc1838f94177b4594b74650765", "patch": "@@ -1,3 +1,138 @@\n+2021-11-19  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR c++/101180\n+\t* g++.target/i386/pr101180.C: New test.\n+\n+2021-11-19  David Malcolm  <dmalcolm@redhat.com>\n+\n+\tPR analyzer/103217\n+\t* gcc.dg/analyzer/explode-1.c: Update for improvement to location\n+\tof leak warning.\n+\t* gcc.dg/analyzer/pr103217.c: New test.\n+\t* gcc.dg/analyzer/pr94858-1.c: Add -Wno-analyzer-too-complex.\n+\n+2021-11-19  Marek Polacek  <polacek@redhat.com>\n+\n+\t* g++.dg/cpp0x/lambda/lambda-nested9.C: Adjust dg-error.\n+\n+2021-11-19  Iain Sandoe  <iain@sandoe.co.uk>\n+\n+\t* gcc.dg/torture/fp-int-convert-timode-3.c: Remove XFAIL.\n+\t* gcc.dg/torture/fp-int-convert-timode-4.c: Likewise.\n+\n+2021-11-19  Jan Hubicka  <hubicka@ucw.cz>\n+\n+\t* gcc.dg/tree-ssa/modref-dse-6.c: New test.\n+\n+2021-11-19  Martin Sebor  <msebor@redhat.com>\n+\n+\tPR c++/33925\n+\tPR c/102867\n+\t* g++.dg/warn/Walways-true-2.C: Adjust to avoid a valid warning.\n+\t* c-c++-common/Waddress-5.c: New test.\n+\t* c-c++-common/Waddress-6.c: New test.\n+\t* g++.dg/warn/Waddress-7.C: New test.\n+\t* gcc.dg/Walways-true-2.c: Adjust to avoid a valid warning.\n+\t* gcc.dg/weak/weak-3.c: Expect a warning.\n+\n+2021-11-19  Andrew MacLeod  <amacleod@redhat.com>\n+\n+\t* gcc.dg/pr103254.c: New.\n+\n+2021-11-19  Stefan Schulze Frielinghaus  <stefansf@linux.ibm.com>\n+\n+\t* gcc.target/s390/20211119.c: New test.\n+\n+2021-11-19  Tamar Christina  <tamar.christina@arm.com>\n+\n+\tPR tree-optimization/103311\n+\tPR target/103330\n+\t* gcc.dg/vect/complex/fast-math-bb-slp-complex-mla-double.c: Fix it.\n+\t* gcc.dg/vect/complex/fast-math-bb-slp-complex-mla-float.c: Likewise.\n+\t* gcc.dg/vect/complex/fast-math-bb-slp-complex-mls-double.c: Likewise.\n+\t* gcc.dg/vect/complex/fast-math-bb-slp-complex-mls-float.c: Likewise.\n+\t* gcc.dg/vect/complex/fast-math-bb-slp-complex-mul-double.c: Likewise.\n+\t* gcc.dg/vect/complex/fast-math-bb-slp-complex-mul-float.c: Likewise.\n+\t* lib/target-supports.exp\n+\t(check_effective_target_vect_complex_add_double): Add Adv. SIMD.\n+\n+2021-11-19  Giuliano Belinassi  <gbelinassi@suse.de>\n+\n+\t* gcc.dg/devnull-dump.c: New.\n+\n+2021-11-19  Patrick Palka  <ppalka@redhat.com>\n+\n+\tPR c++/94376\n+\t* g++.dg/cpp0x/lambda/lambda-nested9.C: New test.\n+\n+2021-11-19  Andrew Pinski  <apinski@marvell.com>\n+\n+\tPR tree-optimization/103314\n+\t* gcc.c-torture/compile/pr103314-1.c: New test.\n+\n+2021-11-19  Richard Biener  <rguenther@suse.de>\n+\n+\tPR c++/103326\n+\t* g++.dg/pr103326.C: New testcase.\n+\n+2021-11-19  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR c++/70796\n+\t* g++.dg/cpp1z/eval-order11.C: New test.\n+\n+2021-11-19  Richard Biener  <rguenther@suse.de>\n+\n+\tPR middle-end/103248\n+\t* gcc.dg/pr103248.c: New testcase.\n+\n+2021-11-19  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/102436\n+\t* gcc.dg/torture/20211118-1.c: New testcase.\n+\t* gcc.dg/tree-ssa/ssa-lim-18.c: Likewise.\n+\n+2021-11-19  Andrew Pinski  <apinski@marvell.com>\n+\n+\tPR tree-optimization/103317\n+\t* gcc.c-torture/compile/pr103317-1.c: New test.\n+\n+2021-11-19  Andrew Pinski  <apinski@marvell.com>\n+\n+\tPR tree-optimization/103257\n+\t* gcc.dg/tree-ssa/vrp116.c: Check optimized instead of vrp1.\n+\t* gcc.dg/tree-ssa/pr103257-1.c: New test.\n+\n+2021-11-19  Marek Polacek  <polacek@redhat.com>\n+\n+\tPR c++/19808\n+\tPR c++/96121\n+\t* g++.dg/warn/Wuninitialized-14.C: New test.\n+\t* g++.dg/warn/Wuninitialized-15.C: New test.\n+\t* g++.dg/warn/Wuninitialized-16.C: New test.\n+\t* g++.dg/warn/Wuninitialized-17.C: New test.\n+\t* g++.dg/warn/Wuninitialized-18.C: New test.\n+\t* g++.dg/warn/Wuninitialized-19.C: New test.\n+\t* g++.dg/warn/Wuninitialized-20.C: New test.\n+\t* g++.dg/warn/Wuninitialized-21.C: New test.\n+\t* g++.dg/warn/Wuninitialized-22.C: New test.\n+\t* g++.dg/warn/Wuninitialized-23.C: New test.\n+\t* g++.dg/warn/Wuninitialized-24.C: New test.\n+\t* g++.dg/warn/Wuninitialized-25.C: New test.\n+\t* g++.dg/warn/Wuninitialized-26.C: New test.\n+\t* g++.dg/warn/Wuninitialized-27.C: New test.\n+\t* g++.dg/warn/Wuninitialized-28.C: New test.\n+\t* g++.dg/warn/Wuninitialized-29.C: New test.\n+\t* g++.dg/warn/Wuninitialized-30.C: New test.\n+\n+2021-11-19  liuhongt  <hongtao.liu@intel.com>\n+\n+\t* gcc.target/i386/pr102543.c: New test.\n+\n+2021-11-19  Patrick Palka  <ppalka@redhat.com>\n+\n+\tPR c++/103198\n+\t* g++.dg/cpp2a/concepts-this1.C: New test.\n+\n 2021-11-18  Marek Polacek  <polacek@redhat.com>\n \n \tPR c++/103049"}, {"sha": "1d6f3189f9e9898f64935524a7f1c88a347ab818", "filename": "libgcc/ChangeLog", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c0773984c8ec6dc1838f94177b4594b74650765/libgcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c0773984c8ec6dc1838f94177b4594b74650765/libgcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2FChangeLog?ref=9c0773984c8ec6dc1838f94177b4594b74650765", "patch": "@@ -1,3 +1,24 @@\n+2021-11-19  Iain Sandoe  <iain@sandoe.co.uk>\n+\n+\t* config.host: Add weak emutls crt to the extra_parts.\n+\t* config/i386/darwin-lib.h (DECLARE_LIBRARY_RENAMES): Remove\n+\tworkaround.\n+\t* config/libgcc-libsystem.ver: Add exclude list for the system-\n+\tprovided unwinder.\n+\t* config/t-slibgcc-darwin: Bump SO version, remove stubs code.\n+\t* config/i386/libgcc-darwin.10.4.ver: Removed.\n+\t* config/i386/libgcc-darwin.10.5.ver: Removed.\n+\t* config/rs6000/libgcc-darwin.10.4.ver: Removed.\n+\t* config/rs6000/libgcc-darwin.10.5.ver: Removed.\n+\t* config/t-darwin-noeh: New file.\n+\n+2021-11-19  Iain Sandoe  <iain@sandoe.co.uk>\n+\n+\t* config/t-darwin: Build weak-defined emutls objects.\n+\t* emutls.c (__emutls_get_address): Add optional attributes.\n+\t(__emutls_register_common): Likewise.\n+\t(EMUTLS_ATTR): New.\n+\n 2021-11-11  Raphael Moreira Zinsly  <rzinsly@linux.ibm.com>\n \n \tPR libgcc/103044"}, {"sha": "9a9b8c8d4a81e4eef8702956b039d915e314cee2", "filename": "libphobos/ChangeLog", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c0773984c8ec6dc1838f94177b4594b74650765/libphobos%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c0773984c8ec6dc1838f94177b4594b74650765/libphobos%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2FChangeLog?ref=9c0773984c8ec6dc1838f94177b4594b74650765", "patch": "@@ -1,3 +1,19 @@\n+2021-11-19  Iain Sandoe  <iain@sandoe.co.uk>\n+\n+\t* testsuite/lib/libphobos.exp: Prune warnings from external\n+\ttool bugs.\n+\n+2021-11-19  Iain Buclaw  <ibuclaw@gdcproject.org>\n+\n+\t* libdruntime/core/thread/fiber.d (defaultStackPages): Increase size\n+\ton OSX X86_64 targets.\n+\n+2021-11-19  Iain Buclaw  <ibuclaw@gdcproject.org>\n+\n+\t* libdruntime/gcc/emutls.d (emutlsDestroyThread): Don't remove entry\n+\tfrom global array.\n+\t(_d_emutls_destroy): Don't call __gthread_key_delete.\n+\n 2021-10-31  Iain Buclaw  <ibuclaw@gdcproject.org>\n \n \tPR d/102837"}, {"sha": "5d4ce7cea28b5b432b9e97ab1c1fde49cc66a16c", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 67, "deletions": 0, "changes": 67, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c0773984c8ec6dc1838f94177b4594b74650765/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c0773984c8ec6dc1838f94177b4594b74650765/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=9c0773984c8ec6dc1838f94177b4594b74650765", "patch": "@@ -1,3 +1,70 @@\n+2021-11-19  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* testsuite/27_io/basic_istringstream/cons/char/1.cc: Check all\n+\tconstructors.\n+\t* testsuite/27_io/basic_istringstream/cons/wchar_t/1.cc:\n+\tLikewise.\n+\t* testsuite/27_io/basic_ostringstream/cons/char/1.cc: Likewise.\n+\t* testsuite/27_io/basic_ostringstream/cons/wchar_t/1.cc:\n+\tLikewise.\n+\t* testsuite/27_io/basic_stringstream/cons/char/1.cc: Likewise.\n+\t* testsuite/27_io/basic_stringstream/cons/wchar_t/1.cc:\n+\tLikewise.\n+\n+2021-11-19  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* src/c++98/locale_init.cc (_S_initialize_once): Check if\n+\tinitialization has already been done.\n+\t(_S_initialize): Replace __gthread_active_p with\n+\t__is_single_threaded. Use __builtin_expect.\n+\n+2021-11-19  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\tPR libstdc++/103295\n+\t* include/bits/basic_string.tcc (_M_construct): Use the\n+\ttraits assign member to write into allcoated memory.\n+\n+2021-11-19  Iain Sandoe  <iain@sandoe.co.uk>\n+\n+\t* testsuite/lib/prune.exp: Prune dsymutil (ld64) warning.\n+\n+2021-11-19  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\tPR libstdc++/103332\n+\tPR libstdc++/102958\n+\t* testsuite/21_strings/basic_string/capacity/char/1.cc: Add\n+\t-Wno-stringop-overflow.\n+\t* testsuite/21_strings/basic_string/operators/char/1.cc:\n+\tLikewise.\n+\t* testsuite/experimental/filesystem/path/factory/u8path-char8_t.cc:\n+\tAdd -Wno-stringop-overread.\n+\n+2021-11-19  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\tPR libstdc++/103295\n+\t* include/bits/basic_string.h (_Alloc_traits): Replace typedef\n+\twith struct for C++20 mode.\n+\t* include/bits/basic_string.tcc (_M_replace): Use _Alloc_traits\n+\tfor allocation.\n+\t* include/bits/char_traits.h (__gnu_cxx::char_traits::assign):\n+\tUse std::_Construct during constant evaluation.\n+\t(__gnu_cxx::char_traits::assign(CharT*, const CharT*, size_t)):\n+\tLikewise. Replace std::fill_n with memset or manual loop.\n+\t(__gnu_cxx::char_traits::copy): Likewise, replacing std::copy\n+\twith memcpy.\n+\t* include/ext/vstring.h: Include <bits/stl_algobase.h> for\n+\tstd::min.\n+\t* include/std/string_view: Likewise.\n+\t* testsuite/21_strings/basic_string/capacity/char/resize_and_overwrite.cc:\n+\tAdd constexpr test.\n+\n+2021-11-19  Tamar Christina  <tamar.christina@arm.com>\n+\n+\tPR libstdc++/103305\n+\t* config/os/newlib/ctype_base.h (upper, lower, alpha, digit, xdigit,\n+\tspace, print, graph, cntrl, punct, alnum, blank): Use short or long\n+\tnames depending on if short ones are defined.\n+\n 2021-11-18  Jonathan Wakely  <jwakely@redhat.com>\n \n \t* include/bits/char_traits.h (__gnu_cxx::char_traits::move):"}]}