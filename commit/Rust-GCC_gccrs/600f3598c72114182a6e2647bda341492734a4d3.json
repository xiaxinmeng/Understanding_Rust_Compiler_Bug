{"sha": "600f3598c72114182a6e2647bda341492734a4d3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjAwZjM1OThjNzIxMTQxODJhNmUyNjQ3YmRhMzQxNDkyNzM0YTRkMw==", "commit": {"author": {"name": "Michael Matz", "email": "matz@gcc.gnu.org", "date": "2005-05-01T00:48:43Z"}, "committer": {"name": "Michael Matz", "email": "matz@gcc.gnu.org", "date": "2005-05-01T00:48:43Z"}, "message": "i386.md (movmemsi): Also active when TARGET_INLINE_ALL_STRINGOPS.\n\n        * config/i386/i386.md (movmemsi): Also active when\n        TARGET_INLINE_ALL_STRINGOPS.\n        * gcc.dg/inline-mcpy.c: New test.\n\nFrom-SVN: r99054", "tree": {"sha": "141d90cd9eb8fcc8262ea4b2dcf4f42be85b1fbd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/141d90cd9eb8fcc8262ea4b2dcf4f42be85b1fbd"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/600f3598c72114182a6e2647bda341492734a4d3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/600f3598c72114182a6e2647bda341492734a4d3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/600f3598c72114182a6e2647bda341492734a4d3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/600f3598c72114182a6e2647bda341492734a4d3/comments", "author": null, "committer": null, "parents": [{"sha": "af650adaf9dac1481fbc994e3898134267547e4a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/af650adaf9dac1481fbc994e3898134267547e4a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/af650adaf9dac1481fbc994e3898134267547e4a"}], "stats": {"total": 22, "additions": 21, "deletions": 1}, "files": [{"sha": "279d4b19d50c0f1537d0b5279d68932ab2ba5f43", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/600f3598c72114182a6e2647bda341492734a4d3/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/600f3598c72114182a6e2647bda341492734a4d3/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=600f3598c72114182a6e2647bda341492734a4d3", "patch": "@@ -1,3 +1,8 @@\n+2005-04-30  Michael Matz  <matz@suse.de>\n+\n+\t* config/i386/i386.md (movmemsi): Also active when\n+\tTARGET_INLINE_ALL_STRINGOPS.\n+\n 2005-04-30  Eric Botcazou  <ebotcazou@libertysurf.fr>\n \n \tPR bootstrap/20633"}, {"sha": "9ae0ae9925fe8688269d9cc73d6c88c511a6f57e", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/600f3598c72114182a6e2647bda341492734a4d3/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/600f3598c72114182a6e2647bda341492734a4d3/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=600f3598c72114182a6e2647bda341492734a4d3", "patch": "@@ -16984,7 +16984,7 @@\n    (use (match_operand:BLK 1 \"memory_operand\" \"\"))\n    (use (match_operand:SI 2 \"nonmemory_operand\" \"\"))\n    (use (match_operand:SI 3 \"const_int_operand\" \"\"))]\n-  \"! optimize_size\"\n+  \"! optimize_size || TARGET_INLINE_ALL_STRINGOPS\"\n {\n  if (ix86_expand_movmem (operands[0], operands[1], operands[2], operands[3]))\n    DONE;"}, {"sha": "d212e86ee2e1a8d6517348cb306ae430c8884f1e", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/600f3598c72114182a6e2647bda341492734a4d3/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/600f3598c72114182a6e2647bda341492734a4d3/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=600f3598c72114182a6e2647bda341492734a4d3", "patch": "@@ -1,3 +1,7 @@\n+2005-04-30  Michael Maty  <matz@suse.de>\n+\n+\t* gcc.dg/inline-mcpy.c: New test.\n+\n 2005-04-30  Thomas Koenig  <Thomas.Koenig@online.de>\n \n \tPR libfortran/18958"}, {"sha": "4917394246aa891e93c51e19f015d527efc61f98", "filename": "gcc/testsuite/gcc.dg/inline-mcpy.c", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/600f3598c72114182a6e2647bda341492734a4d3/gcc%2Ftestsuite%2Fgcc.dg%2Finline-mcpy.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/600f3598c72114182a6e2647bda341492734a4d3/gcc%2Ftestsuite%2Fgcc.dg%2Finline-mcpy.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Finline-mcpy.c?ref=600f3598c72114182a6e2647bda341492734a4d3", "patch": "@@ -0,0 +1,11 @@\n+/* Test if we inline memcpy even with -Os, when the user requested it.  */\n+/* Don't name this test with memcpy in its name, otherwise the scan-assembler\n+   would be confused.  */\n+/* { dg-do compile { target i?86-*-linux* x86_64-*-linux* } } */\n+/* { dg-options \"-Os -minline-all-stringops\" } */\n+/* { dg-final { scan-assembler-not \"memcpy\" } } */\n+char f(int i)\n+{\n+  char *ram_split[] = { \"5:3\", \"3:1\", \"1:1\", \"3:5\" };\n+  return ram_split[i][0];\n+}"}]}