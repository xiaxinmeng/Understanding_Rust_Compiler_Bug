{"sha": "29f31724efd80a8f337946238487a392ac37675b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjlmMzE3MjRlZmQ4MGE4ZjMzNzk0NjIzODQ4N2EzOTJhYzM3Njc1Yg==", "commit": {"author": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2012-05-03T16:09:25Z"}, "committer": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2012-05-03T16:09:25Z"}, "message": "compiler: Fix order of initialization bug with global var a, b = f().\n\nFrom-SVN: r187103", "tree": {"sha": "e30052c2b86730e52e97177bfe987b98a830a055", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e30052c2b86730e52e97177bfe987b98a830a055"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/29f31724efd80a8f337946238487a392ac37675b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/29f31724efd80a8f337946238487a392ac37675b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/29f31724efd80a8f337946238487a392ac37675b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/29f31724efd80a8f337946238487a392ac37675b/comments", "author": null, "committer": null, "parents": [{"sha": "0fe5522f8b18c88338bf33765ab0bf85580eb75c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0fe5522f8b18c88338bf33765ab0bf85580eb75c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0fe5522f8b18c88338bf33765ab0bf85580eb75c"}], "stats": {"total": 103, "additions": 85, "deletions": 18}, "files": [{"sha": "9dea885985c05d121525e7a933d6ee71bca6f914", "filename": "gcc/go/gofrontend/gogo-tree.cc", "status": "modified", "additions": 39, "deletions": 15, "changes": 54, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/29f31724efd80a8f337946238487a392ac37675b/gcc%2Fgo%2Fgofrontend%2Fgogo-tree.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/29f31724efd80a8f337946238487a392ac37675b/gcc%2Fgo%2Fgofrontend%2Fgogo-tree.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Fgogo-tree.cc?ref=29f31724efd80a8f337946238487a392ac37675b", "patch": "@@ -590,18 +590,27 @@ Find_var::expression(Expression** pexpr)\n   return TRAVERSE_CONTINUE;\n }\n \n-// Return true if EXPR refers to VAR.\n+// Return true if EXPR, PREINIT, or DEP refers to VAR.\n \n static bool\n-expression_requires(Expression* expr, Block* preinit, Named_object* var)\n+expression_requires(Expression* expr, Block* preinit, Named_object* dep,\n+\t\t    Named_object* var)\n {\n   Find_var::Seen_objects seen_objects;\n   Find_var find_var(var, &seen_objects);\n   if (expr != NULL)\n     Expression::traverse(&expr, &find_var);\n   if (preinit != NULL)\n     preinit->traverse(&find_var);\n-  \n+  if (dep != NULL)\n+    {\n+      Expression* init = dep->var_value()->init();\n+      if (init != NULL)\n+\tExpression::traverse(&init, &find_var);\n+      if (dep->var_value()->has_pre_init())\n+\tdep->var_value()->preinit()->traverse(&find_var);\n+    }\n+\n   return find_var.found();\n }\n \n@@ -658,7 +667,7 @@ typedef std::list<Var_init> Var_inits;\n // variable V2 then we initialize V1 after V2.\n \n static void\n-sort_var_inits(Var_inits* var_inits)\n+sort_var_inits(Gogo* gogo, Var_inits* var_inits)\n {\n   Var_inits ready;\n   while (!var_inits->empty())\n@@ -667,6 +676,7 @@ sort_var_inits(Var_inits* var_inits)\n       Named_object* var = p1->var();\n       Expression* init = var->var_value()->init();\n       Block* preinit = var->var_value()->preinit();\n+      Named_object* dep = gogo->var_depends_on(var->var_value());\n \n       // Start walking through the list to see which variables VAR\n       // needs to wait for.  We can skip P1->WAITING variables--that\n@@ -678,20 +688,22 @@ sort_var_inits(Var_inits* var_inits)\n \n       for (; p2 != var_inits->end(); ++p2)\n \t{\n-\t  if (expression_requires(init, preinit, p2->var()))\n+\t  Named_object* p2var = p2->var();\n+\t  if (expression_requires(init, preinit, dep, p2var))\n \t    {\n \t      // Check for cycles.\n-\t      if (expression_requires(p2->var()->var_value()->init(),\n-\t\t\t\t      p2->var()->var_value()->preinit(),\n+\t      if (expression_requires(p2var->var_value()->init(),\n+\t\t\t\t      p2var->var_value()->preinit(),\n+\t\t\t\t      gogo->var_depends_on(p2var->var_value()),\n \t\t\t\t      var))\n \t\t{\n \t\t  error_at(var->location(),\n \t\t\t   (\"initialization expressions for %qs and \"\n \t\t\t    \"%qs depend upon each other\"),\n \t\t\t   var->message_name().c_str(),\n-\t\t\t   p2->var()->message_name().c_str());\n+\t\t\t   p2var->message_name().c_str());\n \t\t  inform(p2->var()->location(), \"%qs defined here\",\n-\t\t\t p2->var()->message_name().c_str());\n+\t\t\t p2var->message_name().c_str());\n \t\t  p2 = var_inits->end();\n \t\t}\n \t      else\n@@ -714,9 +726,11 @@ sort_var_inits(Var_inits* var_inits)\n \t  // VAR does not depends upon any other initialization expressions.\n \n \t  // Check for a loop of VAR on itself.  We only do this if\n-\t  // INIT is not NULL; when INIT is NULL, it means that\n-\t  // PREINIT sets VAR, which we will interpret as a loop.\n-\t  if (init != NULL && expression_requires(init, preinit, var))\n+\t  // INIT is not NULL and there is no dependency; when INIT is\n+\t  // NULL, it means that PREINIT sets VAR, which we will\n+\t  // interpret as a loop.\n+\t  if (init != NULL && dep == NULL\n+\t      && expression_requires(init, preinit, NULL, var))\n \t    error_at(var->location(),\n \t\t     \"initialization expression for %qs depends upon itself\",\n \t\t     var->message_name().c_str());\n@@ -783,7 +797,7 @@ Gogo::write_globals()\n \t}\n \n       // There is nothing useful we can output for constants which\n-      // have ideal or non-integeral type.\n+      // have ideal or non-integral type.\n       if (no->is_const())\n \t{\n \t  Type* type = no->const_value()->type();\n@@ -834,7 +848,9 @@ Gogo::write_globals()\n \t\t;\n \t      else if (TREE_CONSTANT(init))\n \t\t{\n-\t\t  if (expression_requires(no->var_value()->init(), NULL, no))\n+\t\t  if (expression_requires(no->var_value()->init(), NULL,\n+\t\t\t\t\t  this->var_depends_on(no->var_value()),\n+\t\t\t\t\t  no))\n \t\t    error_at(no->location(),\n \t\t\t     \"initialization expression for %qs depends \"\n \t\t\t     \"upon itself\",\n@@ -879,6 +895,14 @@ Gogo::write_globals()\n \t      else\n \t\tvar_inits.push_back(Var_init(no, var_init_tree));\n \t    }\n+\t  else if (this->var_depends_on(no->var_value()) != NULL)\n+\t    {\n+\t      // This variable is initialized from something that is\n+\t      // not in its init or preinit.  This variable needs to\n+\t      // participate in dependency analysis sorting, in case\n+\t      // some other variable depends on this one.\n+\t      var_inits.push_back(Var_init(no, integer_zero_node));\n+\t    }\n \n \t  if (!is_sink && no->var_value()->type()->has_pointer())\n \t    var_gc.push_back(no);\n@@ -896,7 +920,7 @@ Gogo::write_globals()\n   // workable order.\n   if (!var_inits.empty())\n     {\n-      sort_var_inits(&var_inits);\n+      sort_var_inits(this, &var_inits);\n       for (Var_inits::const_iterator p = var_inits.begin();\n \t   p != var_inits.end();\n \t   ++p)"}, {"sha": "15c814bd12bd460f007b40e164ad70f56f1ae12c", "filename": "gcc/go/gofrontend/gogo.cc", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/29f31724efd80a8f337946238487a392ac37675b/gcc%2Fgo%2Fgofrontend%2Fgogo.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/29f31724efd80a8f337946238487a392ac37675b/gcc%2Fgo%2Fgofrontend%2Fgogo.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Fgogo.cc?ref=29f31724efd80a8f337946238487a392ac37675b", "patch": "@@ -32,6 +32,7 @@ Gogo::Gogo(Backend* backend, Linemap* linemap, int int_type_size,\n     imported_unsafe_(false),\n     packages_(),\n     init_functions_(),\n+    var_deps_(),\n     need_init_fn_(false),\n     init_fn_name_(),\n     imported_init_fns_(),\n@@ -3820,6 +3821,10 @@ void\n Variable::lower_init_expression(Gogo* gogo, Named_object* function,\n \t\t\t\tStatement_inserter* inserter)\n {\n+  Named_object* dep = gogo->var_depends_on(this);\n+  if (dep != NULL && dep->is_variable())\n+    dep->var_value()->lower_init_expression(gogo, function, inserter);\n+\n   if (this->init_ != NULL && !this->init_is_lowered_)\n     {\n       if (this->seen_)"}, {"sha": "4990bf26dc753c74e6a2881951e1543a928e1b84", "filename": "gcc/go/gofrontend/gogo.h", "status": "modified", "additions": 24, "deletions": 2, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/29f31724efd80a8f337946238487a392ac37675b/gcc%2Fgo%2Fgofrontend%2Fgogo.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/29f31724efd80a8f337946238487a392ac37675b/gcc%2Fgo%2Fgofrontend%2Fgogo.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Fgogo.h?ref=29f31724efd80a8f337946238487a392ac37675b", "patch": "@@ -384,6 +384,23 @@ class Gogo\n   void\n   clear_file_scope();\n \n+  // Record that VAR1 must be initialized after VAR2.  This is used\n+  // when VAR2 does not appear in VAR1's INIT or PREINIT.\n+  void\n+  record_var_depends_on(Variable* var1, Named_object* var2)\n+  {\n+    go_assert(this->var_deps_.find(var1) == this->var_deps_.end());\n+    this->var_deps_[var1] = var2;\n+  }\n+\n+  // Return the variable that VAR depends on, or NULL if none.\n+  Named_object*\n+  var_depends_on(Variable* var) const\n+  {\n+    Var_deps::const_iterator p = this->var_deps_.find(var);\n+    return p != this->var_deps_.end() ? p->second : NULL;\n+  }\n+\n   // Queue up a type-specific function to be written out.  This is\n   // used when a type-specific function is needed when not at the top\n   // level.\n@@ -639,8 +656,9 @@ class Gogo\n   // Type used to map package names to packages.\n   typedef std::map<std::string, Package*> Packages;\n \n-  // Type used to map special names in the sys package.\n-  typedef std::map<std::string, std::string> Sys_names;\n+  // Type used to map variables to the function calls that set them.\n+  // This is used for initialization dependency analysis.\n+  typedef std::map<Variable*, Named_object*> Var_deps;\n \n   // Type used to queue writing a type specific function.\n   struct Specific_type_function\n@@ -683,6 +701,10 @@ class Gogo\n   Packages packages_;\n   // The functions named \"init\", if there are any.\n   std::vector<Named_object*> init_functions_;\n+  // A mapping from variables to the function calls that initialize\n+  // them, if it is not stored in the variable's init or preinit.\n+  // This is used for dependency analysis.\n+  Var_deps var_deps_;\n   // Whether we need a magic initialization function.\n   bool need_init_fn_;\n   // The name of the magic initialization function."}, {"sha": "6567a42b36f58ba6a5399b2a329c2d3c0f4a4d7b", "filename": "gcc/go/gofrontend/parse.cc", "status": "modified", "additions": 17, "deletions": 1, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/29f31724efd80a8f337946238487a392ac37675b/gcc%2Fgo%2Fgofrontend%2Fparse.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/29f31724efd80a8f337946238487a392ac37675b/gcc%2Fgo%2Fgofrontend%2Fparse.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Fparse.cc?ref=29f31724efd80a8f337946238487a392ac37675b", "patch": "@@ -1667,14 +1667,30 @@ Parse::init_vars_from_call(const Typed_identifier_list* vars, Type* type,\n   // the right number of values, but it might.  Declare the variables,\n   // and then assign the results of the call to them.\n \n+  Named_object* first_var = NULL;\n   unsigned int index = 0;\n   bool any_new = false;\n   for (Typed_identifier_list::const_iterator pv = vars->begin();\n        pv != vars->end();\n        ++pv, ++index)\n     {\n       Expression* init = Expression::make_call_result(call, index);\n-      this->init_var(*pv, type, init, is_coloneq, false, &any_new);\n+      Named_object* no = this->init_var(*pv, type, init, is_coloneq, false,\n+\t\t\t\t\t&any_new);\n+\n+      if (this->gogo_->in_global_scope() && no->is_variable())\n+\t{\n+\t  if (first_var == NULL)\n+\t    first_var = no;\n+\t  else\n+\t    {\n+\t      // The subsequent vars have an implicit dependency on\n+\t      // the first one, so that everything gets initialized in\n+\t      // the right order and so that we detect cycles\n+\t      // correctly.\n+\t      this->gogo_->record_var_depends_on(no->var_value(), first_var);\n+\t    }\n+\t}\n     }\n \n   if (is_coloneq && !any_new)"}]}