{"sha": "7c8420560b46db5137519ad5a4dc13f06765fb4a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2M4NDIwNTYwYjQ2ZGI1MTM3NTE5YWQ1YTRkYzEzZjA2NzY1ZmI0YQ==", "commit": {"author": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2010-03-23T14:32:35Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2010-03-23T14:32:35Z"}, "message": "stl_algobase.h (lower_bound(_ForwardIterator, _ForwardIterator, const _Tp&, _Compare)): Move...\n\n2010-03-23  Paolo Carlini  <paolo.carlini@oracle.com>\n\n\t* include/bits/stl_algobase.h (lower_bound(_ForwardIterator,\n\t_ForwardIterator, const _Tp&, _Compare)): Move...\n\t* include/bits/stl_algo.h: ... here.\n\nFrom-SVN: r157668", "tree": {"sha": "c9e66d7b4f07c6c7e8e03084b46e4b4fe74b99f8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c9e66d7b4f07c6c7e8e03084b46e4b4fe74b99f8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7c8420560b46db5137519ad5a4dc13f06765fb4a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7c8420560b46db5137519ad5a4dc13f06765fb4a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7c8420560b46db5137519ad5a4dc13f06765fb4a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7c8420560b46db5137519ad5a4dc13f06765fb4a/comments", "author": null, "committer": null, "parents": [{"sha": "0d1152b15213da586d6563c23f9a6cb6abe44f7c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0d1152b15213da586d6563c23f9a6cb6abe44f7c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0d1152b15213da586d6563c23f9a6cb6abe44f7c"}], "stats": {"total": 116, "additions": 61, "deletions": 55}, "files": [{"sha": "0fbab9269d837794a7625a3c3ae31e2a11cbb8a4", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7c8420560b46db5137519ad5a4dc13f06765fb4a/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7c8420560b46db5137519ad5a4dc13f06765fb4a/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=7c8420560b46db5137519ad5a4dc13f06765fb4a", "patch": "@@ -1,7 +1,13 @@\n+2010-03-23  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+\t* include/bits/stl_algobase.h (lower_bound(_ForwardIterator,\n+\t_ForwardIterator, const _Tp&, _Compare)): Move...\n+\t* include/bits/stl_algo.h: ... here.\n+\n 2010-03-22  Johannes Singler  <singler@kit.edu>\n \n         * include/parallel/numeric (inner_product, partial_sum):\n-        Precede subsequent call with _GLIBCXX_STD_P:: to avoid ambiguity \n+        Precede subsequent call with _GLIBCXX_STD_P:: to avoid ambiguity\n         between __gnu_parallel:: and std::\n         * include/parallel/algobase.h (equal): Likewise.\n         * include/parallel/algo.h (find_first_of, search_n, merge, nth_element,"}, {"sha": "5b4991e33b6464613e58f2b5f35e1c9f0fb64500", "filename": "libstdc++-v3/include/bits/stl_algo.h", "status": "modified", "additions": 54, "deletions": 0, "changes": 54, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7c8420560b46db5137519ad5a4dc13f06765fb4a/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_algo.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7c8420560b46db5137519ad5a4dc13f06765fb4a/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_algo.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_algo.h?ref=7c8420560b46db5137519ad5a4dc13f06765fb4a", "patch": "@@ -2369,6 +2369,60 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n \n   // lower_bound moved to stl_algobase.h\n \n+  /**\n+   *  @brief Finds the first position in which @a val could be inserted\n+   *         without changing the ordering.\n+   *  @ingroup binary_search_algorithms\n+   *  @param  first   An iterator.\n+   *  @param  last    Another iterator.\n+   *  @param  val     The search term.\n+   *  @param  comp    A functor to use for comparisons.\n+   *  @return An iterator pointing to the first element <em>not less\n+   *           than</em> @a val, or end() if every element is less\n+   *           than @a val.\n+   *  @ingroup binary_search_algorithms\n+   *\n+   *  The comparison function should have the same effects on ordering as\n+   *  the function used for the initial sort.\n+  */\n+  template<typename _ForwardIterator, typename _Tp, typename _Compare>\n+    _ForwardIterator\n+    lower_bound(_ForwardIterator __first, _ForwardIterator __last,\n+\t\tconst _Tp& __val, _Compare __comp)\n+    {\n+      typedef typename iterator_traits<_ForwardIterator>::value_type\n+\t_ValueType;\n+      typedef typename iterator_traits<_ForwardIterator>::difference_type\n+\t_DistanceType;\n+\n+      // concept requirements\n+      __glibcxx_function_requires(_ForwardIteratorConcept<_ForwardIterator>)\n+      __glibcxx_function_requires(_BinaryPredicateConcept<_Compare,\n+\t\t\t\t  _ValueType, _Tp>)\n+      __glibcxx_requires_partitioned_lower_pred(__first, __last,\n+\t\t\t\t\t\t__val, __comp);\n+\n+      _DistanceType __len = std::distance(__first, __last);\n+      _DistanceType __half;\n+      _ForwardIterator __middle;\n+\n+      while (__len > 0)\n+\t{\n+\t  __half = __len >> 1;\n+\t  __middle = __first;\n+\t  std::advance(__middle, __half);\n+\t  if (__comp(*__middle, __val))\n+\t    {\n+\t      __first = __middle;\n+\t      ++__first;\n+\t      __len = __len - __half - 1;\n+\t    }\n+\t  else\n+\t    __len = __half;\n+\t}\n+      return __first;\n+    }\n+\n   /**\n    *  @brief Finds the last position in which @a val could be inserted\n    *         without changing the ordering."}, {"sha": "e92540431de56c793d7bb522ebd058489c0e627c", "filename": "libstdc++-v3/include/bits/stl_algobase.h", "status": "modified", "additions": 0, "deletions": 54, "changes": 54, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7c8420560b46db5137519ad5a4dc13f06765fb4a/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_algobase.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7c8420560b46db5137519ad5a4dc13f06765fb4a/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_algobase.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_algobase.h?ref=7c8420560b46db5137519ad5a4dc13f06765fb4a", "patch": "@@ -985,60 +985,6 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n       return __first;\n     }\n \n-  /**\n-   *  @brief Finds the first position in which @a val could be inserted\n-   *         without changing the ordering.\n-   *  @ingroup binary_search_algorithms\n-   *  @param  first   An iterator.\n-   *  @param  last    Another iterator.\n-   *  @param  val     The search term.\n-   *  @param  comp    A functor to use for comparisons.\n-   *  @return An iterator pointing to the first element <em>not less\n-   *           than</em> @a val, or end() if every element is less\n-   *           than @a val.\n-   *  @ingroup binary_search_algorithms\n-   *\n-   *  The comparison function should have the same effects on ordering as\n-   *  the function used for the initial sort.\n-  */\n-  template<typename _ForwardIterator, typename _Tp, typename _Compare>\n-    _ForwardIterator\n-    lower_bound(_ForwardIterator __first, _ForwardIterator __last,\n-\t\tconst _Tp& __val, _Compare __comp)\n-    {\n-      typedef typename iterator_traits<_ForwardIterator>::value_type\n-\t_ValueType;\n-      typedef typename iterator_traits<_ForwardIterator>::difference_type\n-\t_DistanceType;\n-\n-      // concept requirements\n-      __glibcxx_function_requires(_ForwardIteratorConcept<_ForwardIterator>)\n-      __glibcxx_function_requires(_BinaryPredicateConcept<_Compare,\n-\t\t\t\t  _ValueType, _Tp>)\n-      __glibcxx_requires_partitioned_lower_pred(__first, __last,\n-\t\t\t\t\t\t__val, __comp);\n-\n-      _DistanceType __len = std::distance(__first, __last);\n-      _DistanceType __half;\n-      _ForwardIterator __middle;\n-\n-      while (__len > 0)\n-\t{\n-\t  __half = __len >> 1;\n-\t  __middle = __first;\n-\t  std::advance(__middle, __half);\n-\t  if (__comp(*__middle, __val))\n-\t    {\n-\t      __first = __middle;\n-\t      ++__first;\n-\t      __len = __len - __half - 1;\n-\t    }\n-\t  else\n-\t    __len = __half;\n-\t}\n-      return __first;\n-    }\n-\n   /// This is a helper function for the sort routines and for random.tcc.\n   //  Precondition: __n > 0.\n   template<typename _Size>"}]}