{"sha": "b4a93904915748680a5e7ba1fc78e78a8eb10e72", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjRhOTM5MDQ5MTU3NDg2ODBhNWU3YmExZmM3OGU3OGE4ZWIxMGU3Mg==", "commit": {"author": {"name": "Neil Booth", "email": "neil@gcc.gnu.org", "date": "2002-08-11T07:32:19Z"}, "committer": {"name": "Neil Booth", "email": "neil@gcc.gnu.org", "date": "2002-08-11T07:32:19Z"}, "message": "c-common.h (enum c_language_kind): Emphasize that clk_c is 0.\n\n\t* c-common.h (enum c_language_kind): Emphasize that clk_c is 0.\n\t* c-opts.c (parse_option): Rename find_opt.\n\t(set_std_c99): New function.\n\t(COMMAND_LINE_OPTIONS): Handle -remap and -o.  Remove OPT_std_bad.\n\t(missing_arg): Remove OPT_std_bad.  Handle -o.\n\t(c_common_decode_option): Handle input and output file names,\n\t-o and -remap.\tClean up -std= handling.\n\t* cppinit.c (COMMAND_LINE_OPTIONS): Remove OPT_o and OPT_remap.\n\t(cpp_handle_option): Similarly.  Don't handle filenames.\n\nFrom-SVN: r56197", "tree": {"sha": "d73a75baf01dafc07eb90997c31af2280b21f9a0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d73a75baf01dafc07eb90997c31af2280b21f9a0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b4a93904915748680a5e7ba1fc78e78a8eb10e72", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b4a93904915748680a5e7ba1fc78e78a8eb10e72", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b4a93904915748680a5e7ba1fc78e78a8eb10e72", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b4a93904915748680a5e7ba1fc78e78a8eb10e72/comments", "author": null, "committer": null, "parents": [{"sha": "982f35d62b68f23a8f84e39b2a6302bf2d8c2b19", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/982f35d62b68f23a8f84e39b2a6302bf2d8c2b19", "html_url": "https://github.com/Rust-GCC/gccrs/commit/982f35d62b68f23a8f84e39b2a6302bf2d8c2b19"}], "stats": {"total": 143, "additions": 62, "deletions": 81}, "files": [{"sha": "989c90810b74cb20f5f2aab278b3138f19f6f1b0", "filename": "gcc/c-common.h", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b4a93904915748680a5e7ba1fc78e78a8eb10e72/gcc%2Fc-common.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b4a93904915748680a5e7ba1fc78e78a8eb10e72/gcc%2Fc-common.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-common.h?ref=b4a93904915748680a5e7ba1fc78e78a8eb10e72", "patch": "@@ -238,8 +238,7 @@ extern GTY(()) tree c_global_trees[CTI_MAX];\n \n typedef enum c_language_kind\n {\n-  clk_c,           /* A dialect of C: K&R C, ANSI/ISO C89, C2000,\n-\t\t       etc.  */\n+  clk_c = 0,      /* A dialect of C: K&R C, ANSI/ISO C89, C2000, etc.  */\n   clk_cplusplus   /* ANSI/ISO C++ */\n }\n c_language_kind;"}, {"sha": "d25c9971c66054bfcb3f27a7307c3ea867c4f9f3", "filename": "gcc/c-opts.c", "status": "modified", "additions": 60, "deletions": 51, "changes": 111, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b4a93904915748680a5e7ba1fc78e78a8eb10e72/gcc%2Fc-opts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b4a93904915748680a5e7ba1fc78e78a8eb10e72/gcc%2Fc-opts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-opts.c?ref=b4a93904915748680a5e7ba1fc78e78a8eb10e72", "patch": "@@ -34,14 +34,15 @@ Software Foundation, 59 Temple Place - Suite 330, Boston, MA\n static cpp_options *cpp_opts;\n \n static void missing_arg PARAMS ((size_t));\n-static size_t parse_option PARAMS ((const char *, int));\n+static size_t find_opt PARAMS ((const char *, int));\n static void set_Wimplicit PARAMS ((int));\n static void complain_wrong_lang PARAMS ((size_t));\n static void write_langs PARAMS ((char *, int));\n static void print_help PARAMS ((void));\n static void handle_OPT_d PARAMS ((const char *));\n static void set_std_cxx98 PARAMS ((int));\n static void set_std_c89 PARAMS ((int, int));\n+static void set_std_c99 PARAMS ((int));\n \n #define CL_C_ONLY\t(1 << 0) /* Only C.  */\n #define CL_OBJC_ONLY\t(1 << 1) /* Only ObjC.  */\n@@ -216,10 +217,11 @@ static void set_std_c89 PARAMS ((int, int));\n   OPT(\"lang-objc\",              CL_ALL,   OPT_lang_objc)\t\t     \\\n   OPT(\"nostdinc\",               CL_ALL,   OPT_nostdinc)\t\t\t     \\\n   OPT(\"nostdinc++\",             CL_ALL,   OPT_nostdincplusplus)\t\t     \\\n+  OPT(\"o\",\t\t\tCL_ALL | CL_ARG, OPT_o)                      \\\n   OPT(\"pedantic\",\t\tCL_ALL,   OPT_pedantic)\t\t\t     \\\n   OPT(\"pedantic-errors\",\tCL_ALL,   OPT_pedantic_errors)\t\t     \\\n   OPT(\"print-objc-runtime-info\", CL_OBJC, OPT_print_objc_runtime_info)\t     \\\n-  OPT(\"std=\",\t\t\tCL_ALL | CL_JOINED, OPT_std_bad)\t     \\\n+  OPT(\"remap\",\t\t\tCL_ALL,   OPT_remap)                         \\\n   OPT(\"std=c++98\",\t\tCL_CXX,\t  OPT_std_cplusplus98)\t\t     \\\n   OPT(\"std=c89\",\t\tCL_C,     OPT_std_c89)\t\t\t     \\\n   OPT(\"std=c99\",\t\tCL_C,     OPT_std_c99)\t\t\t     \\\n@@ -294,14 +296,17 @@ missing_arg (opt_index)\n     case OPT_fname_mangling:\n     case OPT_ftabstop:\n     case OPT_ftemplate_depth:\n-    case OPT_std_bad:\n     default:\n       error (\"missing argument to \\\"-%s\\\"\", cl_options[opt_index].opt_text);\n       break;\n \n     case OPT_fconstant_string_class:\n       error (\"no class name specified with -fconstant-string-class=\");\n       break;\n+\n+    case OPT_o:\n+      error (\"missing filename after \\\"-%s\\\"\", cl_options[opt_index].opt_text);\n+      break;\n     }\n }\n \n@@ -314,7 +319,7 @@ missing_arg (opt_index)\n    and -pedantic-errors.  Also, some options are only accepted by some\n    languages.  */\n static size_t\n-parse_option (input, lang_flag)\n+find_opt (input, lang_flag)\n      const char *input;\n      int lang_flag;\n {\n@@ -435,32 +440,32 @@ c_common_decode_option (argc, argv)\n      int argc;\n      char **argv;\n {\n+  static int lang_flags[] = {CL_C_ONLY, CL_C, CL_CXX_ONLY, CL_CXX};\n   size_t opt_index;\n   const char *opt, *arg = 0;\n   char *dup = 0;\n   bool on = true;\n-  int result, lang_flag;\n+  int result;\n   const struct cl_option *option;\n   enum opt_code code;\n \n-  result = cpp_handle_option (parse_in, argc, argv);\n   opt = argv[0];\n \n-  /* Until handling CPP stuff, ignore non-switches.  */\n+  /* Interpret \"-\" or a non-switch as a file name.  */\n   if (opt[0] != '-' || opt[1] == '\\0')\n-    return result;\n-\n-  switch (c_language)\n     {\n-    case clk_c:\t\t\tlang_flag = (flag_objc\n-\t\t\t\t\t     ? CL_C\n-\t\t\t\t\t     : CL_C_ONLY);\n-\t\t\t\tbreak;\n-    case clk_cplusplus:\t\tlang_flag = (flag_objc\n-\t\t\t\t\t     ? CL_CXX\n-\t\t\t\t\t     : CL_CXX_ONLY);\n-\t\t\t\tbreak;\n-    default:\t\t\tabort ();\n+      if (!cpp_opts->in_fname)\n+\tcpp_opts->in_fname = opt;\n+      else if (!cpp_opts->out_fname)\n+\tcpp_opts->out_fname = opt;\n+      else\n+\t{\n+\t  error (\"too many filenames given.  Type %s --help for usage\",\n+\t\t progname);\n+\t  return argc;\n+\t}\n+\n+      return 1;\n     }\n \n   /* Drop the \"no-\" from negative switches.  */\n@@ -477,8 +482,10 @@ c_common_decode_option (argc, argv)\n       on = false;\n     }\n \n+  result = cpp_handle_option (parse_in, argc, argv);\n+\n   /* Skip over '-'.  */\n-  opt_index = parse_option (opt + 1, lang_flag);\n+  opt_index = find_opt (opt + 1, lang_flags[(c_language << 1) + flag_objc]);\n   if (opt_index == N_OPTS)\n     goto done;\n \n@@ -1102,6 +1109,16 @@ c_common_decode_option (argc, argv)\n       cpp_opts->no_standard_cplusplus_includes = 1;\n       break;\n \n+    case OPT_o:\n+      if (!cpp_opts->out_fname)\n+\tcpp_opts->out_fname = arg;\n+      else\n+\t{\n+\t  error (\"output filename specified twice\");\n+\t  result = argc;\n+\t}\n+      break;\n+\n       /* We need to handle the -pedantic switches here, rather than in\n \t c_common_post_options, so that a subsequent -Wno-endif-labels\n \t is not overridden.  */\n@@ -1117,29 +1134,19 @@ c_common_decode_option (argc, argv)\n       print_struct_values = 1;\n       break;\n \n-    case OPT_std_bad:\n-      error (\"unknown standard \\\"%s\\\"\", arg);\n+    case OPT_remap:\n+      cpp_opts->remap = 1;\n       break;\n \n-      /* Language standards.  We currently recognize:\n-\t -std=iso9899:1990\tsame as -ansi\n-\t -std=iso9899:199409\tISO C as modified in amend. 1\n-\t -std=iso9899:1999\tISO C 99\n-\t -std=c89\t\tsame as -std=iso9899:1990\n-\t -std=c99\t\tsame as -std=iso9899:1999\n-\t -std=gnu89\t\tdefault, iso9899:1990 + gnu extensions\n-\t -std=gnu99\t\tiso9899:1999 + gnu extensions\n-      */\n-\n     case OPT_std_cplusplus98:\n     case OPT_std_gnuplusplus98:\n-      set_std_cxx98 (code == OPT_std_cplusplus98);\n+      set_std_cxx98 (code == OPT_std_cplusplus98 /* ISO */);\n       break;\n \n-    case OPT_std_iso9899_199409:\n     case OPT_std_c89:\n     case OPT_std_iso9899_1990:\n-      set_std_c89 (code == OPT_std_iso9899_199409, true);\n+    case OPT_std_iso9899_199409:\n+      set_std_c89 (code == OPT_std_iso9899_199409 /* c94 */, true /* ISO */);\n       break;\n \n     case OPT_std_gnu89:\n@@ -1150,25 +1157,12 @@ c_common_decode_option (argc, argv)\n     case OPT_std_c9x:\n     case OPT_std_iso9899_1999:\n     case OPT_std_iso9899_199x:\n-      cpp_set_lang (parse_in, CLK_STDC99);\n-      flag_writable_strings = 0;\n-      flag_no_asm = 1;\n-      flag_no_nonansi_builtin = 1;\n-      flag_noniso_default_format_attributes = 0;\n-      flag_isoc99 = 1;\n-      flag_isoc94 = 1;\n-      flag_iso = 1;\n+      set_std_c99 (true /* ISO */);\n       break;\n \n     case OPT_std_gnu99:\n     case OPT_std_gnu9x:\n-      cpp_set_lang (parse_in, CLK_GNUC99);\n-      flag_writable_strings = 0;\n-      flag_no_asm = 0;\n-      flag_no_nonansi_builtin = 0;\n-      flag_noniso_default_format_attributes = 1;\n-      flag_isoc99 = 1;\n-      flag_isoc94 = 1;\n+      set_std_c99 (false /* ISO */);\n       break;\n \n     case OPT_trigraphs:\n@@ -1246,7 +1240,7 @@ c_common_post_options ()\n }\n \n /* Set the C 89 standard (with 1994 amendments if C94, without GNU\n-   extensions if ISO).  */\n+   extensions if ISO).  There is no concept of gnu94.  */\n static void\n set_std_c89 (c94, iso)\n      int c94, iso;\n@@ -1262,6 +1256,21 @@ set_std_c89 (c94, iso)\n   flag_writable_strings = 0;\n }\n \n+/* Set the C 99 standard (without GNU extensions if ISO).  */\n+static void\n+set_std_c99 (iso)\n+     int iso;\n+{\n+  cpp_set_lang (parse_in, iso ? CLK_STDC99: CLK_GNUC99);\n+  flag_no_asm = iso;\n+  flag_no_nonansi_builtin = iso;\n+  flag_noniso_default_format_attributes = !iso;\n+  flag_iso = iso;\n+  flag_isoc99 = 1;\n+  flag_isoc94 = 1;\n+  flag_writable_strings = 0;\n+}\n+\n /* Set the C++ 98 standard (without GNU extensions if ISO).  */\n static void\n set_std_cxx98 (iso)"}, {"sha": "86b4c8eef3acdaf460ab6532db0a3eead358a4fe", "filename": "gcc/cppinit.c", "status": "modified", "additions": 1, "deletions": 28, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b4a93904915748680a5e7ba1fc78e78a8eb10e72/gcc%2Fcppinit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b4a93904915748680a5e7ba1fc78e78a8eb10e72/gcc%2Fcppinit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcppinit.c?ref=b4a93904915748680a5e7ba1fc78e78a8eb10e72", "patch": "@@ -1151,9 +1151,7 @@ new_pending_directive (pend, text, handler)\n   DEF_OPT(\"iprefix\",                  no_pth, OPT_iprefix)                    \\\n   DEF_OPT(\"isystem\",                  no_dir, OPT_isystem)                    \\\n   DEF_OPT(\"iwithprefix\",              no_dir, OPT_iwithprefix)                \\\n-  DEF_OPT(\"iwithprefixbefore\",        no_dir, OPT_iwithprefixbefore)          \\\n-  DEF_OPT(\"o\",                        no_fil, OPT_o)                          \\\n-  DEF_OPT(\"remap\",                    0,      OPT_remap)\n+  DEF_OPT(\"iwithprefixbefore\",        no_dir, OPT_iwithprefixbefore)\n \n #define DEF_OPT(text, msg, code) code,\n enum opt_code\n@@ -1256,19 +1254,6 @@ cpp_handle_option (pfile, argc, argv)\n   int i = 0;\n   struct cpp_pending *pend = CPP_OPTION (pfile, pending);\n \n-  /* Interpret \"-\" or a non-option as a file name.  */\n-  if (argv[i][0] != '-' || argv[i][1] == '\\0')\n-    {\n-      if (CPP_OPTION (pfile, in_fname) == NULL)\n-\tCPP_OPTION (pfile, in_fname) = argv[i];\n-      else if (CPP_OPTION (pfile, out_fname) == NULL)\n-\tCPP_OPTION (pfile, out_fname) = argv[i];\n-      else\n-\tcpp_error (pfile, DL_ERROR,\n-\t\t   \"too many filenames. Type %s --help for usage info\",\n-\t\t   progname);\n-    }\n-  else\n     {\n       enum opt_code opt_code;\n       int opt_index;\n@@ -1303,22 +1288,10 @@ cpp_handle_option (pfile, argc, argv)\n \tcase OPT_D:\n \t  new_pending_directive (pend, arg, cpp_define);\n \t  break;\n-\tcase OPT_remap:\n-\t  CPP_OPTION (pfile, remap) = 1;\n-\t  break;\n \tcase OPT_iprefix:\n \t  CPP_OPTION (pfile, include_prefix) = arg;\n \t  CPP_OPTION (pfile, include_prefix_len) = strlen (arg);\n \t  break;\n-\tcase OPT_o:\n-\t  if (CPP_OPTION (pfile, out_fname) == NULL)\n-\t    CPP_OPTION (pfile, out_fname) = arg;\n-\t  else\n-\t    {\n-\t      cpp_error (pfile, DL_ERROR, \"output filename specified twice\");\n-\t      return argc;\n-\t    }\n-\t  break;\n \n \tcase OPT_MG:\n \t  CPP_OPTION (pfile, print_deps_missing_files) = 1;"}]}