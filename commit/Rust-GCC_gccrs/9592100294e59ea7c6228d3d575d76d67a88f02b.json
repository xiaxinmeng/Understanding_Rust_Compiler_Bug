{"sha": "9592100294e59ea7c6228d3d575d76d67a88f02b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTU5MjEwMDI5NGU1OWVhN2M2MjI4ZDNkNTc1ZDc2ZDY3YTg4ZjAyYg==", "commit": {"author": {"name": "Vladimir Makarov", "email": "vmakarov@redhat.com", "date": "2014-03-14T16:34:57Z"}, "committer": {"name": "Vladimir Makarov", "email": "vmakarov@gcc.gnu.org", "date": "2014-03-14T16:34:57Z"}, "message": "re PR rtl-optimization/60508 (internal compiler error: in lra_set_insn_recog_data, at lra.c:1082)\n\n2014-03-14  Vladimir Makarov  <vmakarov@redhat.com>\n\n\tPR rtl-optimization/60508\n\t* lra-constraints.c (get_reload_reg): Add new parameter\n\tin_subreg_p.\n\t(process_addr_reg, simplify_operand_subreg, curr_insn_transform):\n\tPass the new parameter values.\n\n2014-03-14  Vladimir Makarov  <vmakarov@redhat.com>\n\n\tPR rtl-optimization/60508\n\t* gcc.target/i386/pr60508.c: New.\n\nFrom-SVN: r208570", "tree": {"sha": "0335ed99c11dc128dae54a05698e1f263c068e34", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0335ed99c11dc128dae54a05698e1f263c068e34"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9592100294e59ea7c6228d3d575d76d67a88f02b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9592100294e59ea7c6228d3d575d76d67a88f02b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9592100294e59ea7c6228d3d575d76d67a88f02b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9592100294e59ea7c6228d3d575d76d67a88f02b/comments", "author": {"login": "vnmakarov", "id": 9855671, "node_id": "MDQ6VXNlcjk4NTU2NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/9855671?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vnmakarov", "html_url": "https://github.com/vnmakarov", "followers_url": "https://api.github.com/users/vnmakarov/followers", "following_url": "https://api.github.com/users/vnmakarov/following{/other_user}", "gists_url": "https://api.github.com/users/vnmakarov/gists{/gist_id}", "starred_url": "https://api.github.com/users/vnmakarov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vnmakarov/subscriptions", "organizations_url": "https://api.github.com/users/vnmakarov/orgs", "repos_url": "https://api.github.com/users/vnmakarov/repos", "events_url": "https://api.github.com/users/vnmakarov/events{/privacy}", "received_events_url": "https://api.github.com/users/vnmakarov/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "54ce77893d804574d1386311a2ca44c61d5112e5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/54ce77893d804574d1386311a2ca44c61d5112e5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/54ce77893d804574d1386311a2ca44c61d5112e5"}], "stats": {"total": 77, "additions": 64, "deletions": 13}, "files": [{"sha": "09b6e1f73656c0a3438100b7d4cade2dac556898", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9592100294e59ea7c6228d3d575d76d67a88f02b/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9592100294e59ea7c6228d3d575d76d67a88f02b/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=9592100294e59ea7c6228d3d575d76d67a88f02b", "patch": "@@ -1,3 +1,11 @@\n+2014-03-14  Vladimir Makarov  <vmakarov@redhat.com>\n+\n+\tPR rtl-optimization/60508\n+\t* lra-constraints.c (get_reload_reg): Add new parameter\n+\tin_subreg_p.\n+\t(process_addr_reg, simplify_operand_subreg, curr_insn_transform):\n+\tPass the new parameter values.\n+\n 2014-03-14  Richard Biener  <rguenther@suse.de>\n \n \t* common.opt: Revert unintented changes from r205065."}, {"sha": "ba4d489e9e5e6d43ef609833cfbb9ecc6862a2c1", "filename": "gcc/lra-constraints.c", "status": "modified", "additions": 20, "deletions": 13, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9592100294e59ea7c6228d3d575d76d67a88f02b/gcc%2Flra-constraints.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9592100294e59ea7c6228d3d575d76d67a88f02b/gcc%2Flra-constraints.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flra-constraints.c?ref=9592100294e59ea7c6228d3d575d76d67a88f02b", "patch": "@@ -439,14 +439,16 @@ init_curr_insn_input_reloads (void)\n }\n \n /* Create a new pseudo using MODE, RCLASS, ORIGINAL or reuse already\n-   created input reload pseudo (only if TYPE is not OP_OUT).  The\n-   result pseudo is returned through RESULT_REG.  Return TRUE if we\n-   created a new pseudo, FALSE if we reused the already created input\n-   reload pseudo.  Use TITLE to describe new registers for debug\n-   purposes.  */\n+   created input reload pseudo (only if TYPE is not OP_OUT).  Don't\n+   reuse pseudo if IN_SUBREG_P is true and the reused pseudo should be\n+   wrapped up in SUBREG.  The result pseudo is returned through\n+   RESULT_REG.  Return TRUE if we created a new pseudo, FALSE if we\n+   reused the already created input reload pseudo.  Use TITLE to\n+   describe new registers for debug purposes.  */\n static bool\n get_reload_reg (enum op_type type, enum machine_mode mode, rtx original,\n-\t\tenum reg_class rclass, const char *title, rtx *result_reg)\n+\t\tenum reg_class rclass, bool in_subreg_p,\n+\t\tconst char *title, rtx *result_reg)\n {\n   int i, regno;\n   enum reg_class new_class;\n@@ -471,6 +473,8 @@ get_reload_reg (enum op_type type, enum machine_mode mode, rtx original,\n \t     Ensure we don't return *result_reg with wrong mode.  */\n \t  if (GET_MODE (reg) != mode)\n \t    {\n+\t      if (in_subreg_p)\n+\t\tcontinue;\n \t      if (GET_MODE_SIZE (GET_MODE (reg)) < GET_MODE_SIZE (mode))\n \t\tcontinue;\n \t      reg = lowpart_subreg (mode, reg, GET_MODE (reg));\n@@ -1139,9 +1143,11 @@ process_addr_reg (rtx *loc, rtx *before, rtx *after, enum reg_class cl)\n   rtx reg;\n   rtx new_reg;\n   enum machine_mode mode;\n-  bool before_p = false;\n+  bool subreg_p, before_p = false;\n \n-  loc = strip_subreg (loc);\n+  subreg_p = GET_CODE (*loc) == SUBREG;\n+  if (subreg_p)\n+    loc = &SUBREG_REG (*loc);\n   reg = *loc;\n   mode = GET_MODE (reg);\n   if (! REG_P (reg))\n@@ -1171,7 +1177,7 @@ process_addr_reg (rtx *loc, rtx *before, rtx *after, enum reg_class cl)\n \t{\n \t  reg = *loc;\n \t  if (get_reload_reg (after == NULL ? OP_IN : OP_INOUT,\n-\t\t\t      mode, reg, cl, \"address\", &new_reg))\n+\t\t\t      mode, reg, cl, subreg_p, \"address\", &new_reg))\n \t    before_p = true;\n \t}\n       else if (new_class != NO_REGS && rclass != new_class)\n@@ -1304,7 +1310,7 @@ simplify_operand_subreg (int nop, enum machine_mode reg_mode)\n \t  = (enum reg_class) targetm.preferred_reload_class (reg, ALL_REGS);\n \n       if (get_reload_reg (curr_static_id->operand[nop].type, reg_mode, reg,\n-\t\t\t  rclass, \"subreg reg\", &new_reg))\n+\t\t\t  rclass, TRUE, \"subreg reg\", &new_reg))\n \t{\n \t  bool insert_before, insert_after;\n \t  bitmap_set_bit (&lra_subreg_reload_pseudos, REGNO (new_reg));\n@@ -1365,7 +1371,7 @@ simplify_operand_subreg (int nop, enum machine_mode reg_mode)\n \t= (enum reg_class) targetm.preferred_reload_class (reg, ALL_REGS);\n \n       if (get_reload_reg (curr_static_id->operand[nop].type, mode, reg,\n-                          rclass, \"paradoxical subreg\", &new_reg))\n+                          rclass, TRUE, \"paradoxical subreg\", &new_reg))\n         {\n \t  rtx subreg;\n \t  bool insert_before, insert_after;\n@@ -3573,7 +3579,7 @@ curr_insn_transform (void)\n \t    new_reg = emit_inc (rclass, *loc, *loc,\n \t\t\t\t/* This value does not matter for MODIFY.  */\n \t\t\t\tGET_MODE_SIZE (GET_MODE (op)));\n-\t  else if (get_reload_reg (OP_IN, Pmode, *loc, rclass,\n+\t  else if (get_reload_reg (OP_IN, Pmode, *loc, rclass, FALSE,\n \t\t\t\t   \"offsetable address\", &new_reg))\n \t    lra_emit_move (new_reg, *loc);\n \t  before = get_insns ();\n@@ -3615,7 +3621,8 @@ curr_insn_transform (void)\n \t\t}\n \t    }\n \t  old = *loc;\n-\t  if (get_reload_reg (type, mode, old, goal_alt[i], \"\", &new_reg)\n+\t  if (get_reload_reg (type, mode, old, goal_alt[i],\n+\t\t\t      loc != curr_id->operand_loc[i], \"\", &new_reg)\n \t      && type != OP_OUT)\n \t    {\n \t      push_to_sequence (before);"}, {"sha": "fa781bd1c7ac327f219b2cf48c6221c13d4ee98c", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9592100294e59ea7c6228d3d575d76d67a88f02b/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9592100294e59ea7c6228d3d575d76d67a88f02b/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=9592100294e59ea7c6228d3d575d76d67a88f02b", "patch": "@@ -1,3 +1,8 @@\n+2014-03-14  Vladimir Makarov  <vmakarov@redhat.com>\n+\n+\tPR rtl-optimization/60508\n+\t* gcc.target/i386/pr60508.c: New.\n+\n 2014-03-14  Richard Biener  <rguenther@suse.de>\n \n \tPR middle-end/60518"}, {"sha": "78dfb78152657757f0a1f467c489dee6d015580b", "filename": "gcc/testsuite/gcc.target/i386/pr60508.c", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9592100294e59ea7c6228d3d575d76d67a88f02b/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr60508.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9592100294e59ea7c6228d3d575d76d67a88f02b/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr60508.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr60508.c?ref=9592100294e59ea7c6228d3d575d76d67a88f02b", "patch": "@@ -0,0 +1,31 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O -w\" } */\n+int a = 1, g, h = 1, d, e, *f;\n+char b;\n+static int c[] = { 0, 0 };\n+void fn2 (void);\n+\n+void\n+fn1 (short x, int l)\n+{\n+lab:\n+  {\n+    int k, m[0];\n+    long j = h ? 0 : 0 / 0;\n+    unsigned char n = j;\n+    unsigned char i = x >= 0 ? n : n >> x;\n+    g = i;\n+    for (;;)\n+      {\n+        if (a)\n+          goto lab;\n+        while (d)\n+          {\n+            e = b = c[l];\n+            fn2 ();\n+          }\n+        int o = m[0];\n+        f = &k;\n+      }\n+  }\n+}"}]}