{"sha": "dbf65c2f4ebc87d8cad5a805c9b56e0240390dd6", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZGJmNjVjMmY0ZWJjODdkOGNhZDVhODA1YzliNTZlMDI0MDM5MGRkNg==", "commit": {"author": {"name": "J\"orn Rennecke", "email": "joern.rennecke@superh.com", "date": "2002-07-16T20:13:35Z"}, "committer": {"name": "Joern Rennecke", "email": "amylaar@gcc.gnu.org", "date": "2002-07-16T20:13:35Z"}, "message": "* regrename.c (copy_value): Don't record high part copies.\n\nFrom-SVN: r55493", "tree": {"sha": "0654a0eaf2c78a4f25b1a9a8b0ae119b3f56c05f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0654a0eaf2c78a4f25b1a9a8b0ae119b3f56c05f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/dbf65c2f4ebc87d8cad5a805c9b56e0240390dd6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dbf65c2f4ebc87d8cad5a805c9b56e0240390dd6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/dbf65c2f4ebc87d8cad5a805c9b56e0240390dd6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dbf65c2f4ebc87d8cad5a805c9b56e0240390dd6/comments", "author": null, "committer": null, "parents": [{"sha": "99b823ca2a6525632027b5fb489951478430edbe", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/99b823ca2a6525632027b5fb489951478430edbe", "html_url": "https://github.com/Rust-GCC/gccrs/commit/99b823ca2a6525632027b5fb489951478430edbe"}], "stats": {"total": 24, "additions": 24, "deletions": 0}, "files": [{"sha": "eecf79785ea32829175b35096b18494f9d350d6c", "filename": "gcc/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dbf65c2f4ebc87d8cad5a805c9b56e0240390dd6/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dbf65c2f4ebc87d8cad5a805c9b56e0240390dd6/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=dbf65c2f4ebc87d8cad5a805c9b56e0240390dd6", "patch": "@@ -1,3 +1,7 @@\n+Tue Jul 16 19:32:58 2002  J\"orn Rennecke <joern.rennecke@superh.com>\n+\n+\t* regrename.c (copy_value): Don't record high part copies.\n+\n 2002-07-16  Steve Ellcey  <sje@cup.hp.com>\n \n \t* gcc/config/pa/long_double.h (FIXUNS_TRUNCTFDI2_LIBCALL): New define."}, {"sha": "0ceab76c6e2e0deb4f942ecb2344d72a94638ab6", "filename": "gcc/regrename.c", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dbf65c2f4ebc87d8cad5a805c9b56e0240390dd6/gcc%2Fregrename.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dbf65c2f4ebc87d8cad5a805c9b56e0240390dd6/gcc%2Fregrename.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fregrename.c?ref=dbf65c2f4ebc87d8cad5a805c9b56e0240390dd6", "patch": "@@ -1268,6 +1268,26 @@ copy_value (dest, src, vd)\n   if (vd->e[sr].mode == VOIDmode)\n     set_value_regno (sr, vd->e[dr].mode, vd);\n \n+  /* If we are narrowing the the input to a smaller number of hard regs,\n+     and it is in big endian, we are really extracting a high part.\n+     Since we generally associate a low part of a value with the value itself,\n+     we must not do the same for the high part.\n+     Note we can still get low parts for the same mode combination through\n+     a two-step copy involving differently sized hard regs.\n+     Assume hard regs fr* are 32 bits bits each, while r* are 64 bits each:\n+     (set (reg:DI r0) (reg:DI fr0))\n+     (set (reg:SI fr2) (reg:SI r0))\n+     loads the low part of (reg:DI fr0) - i.e. fr1 - into fr2, while:\n+     (set (reg:SI fr2) (reg:SI fr0))\n+     loads the high part of (reg:DI fr0) into fr2.\n+\n+     We can't properly represent the latter case in our tables, so don't\n+     record anything then.  */\n+  else if (sn < (unsigned int) HARD_REGNO_NREGS (sr, vd->e[sr].mode)\n+\t   && (GET_MODE_SIZE (vd->e[sr].mode) > UNITS_PER_WORD\n+\t       ? WORDS_BIG_ENDIAN : BYTES_BIG_ENDIAN))\n+    return;\n+\n   /* If SRC had been assigned a mode narrower than the copy, we can't\n      link DEST into the chain, because not all of the pieces of the\n      copy came from oldest_regno.  */"}]}