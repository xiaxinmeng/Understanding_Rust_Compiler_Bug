{"sha": "9fff751c3f50b1b13e40cc25702055561f6cf085", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWZmZjc1MWMzZjUwYjFiMTNlNDBjYzI1NzAyMDU1NTYxZjZjZjA4NQ==", "commit": {"author": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2011-10-05T17:24:01Z"}, "committer": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2011-10-05T17:24:01Z"}, "message": "i386.c (distance_non_agu_define): Simplify calculation of \"found\".\n\n\t* config/i386/i386.c (distance_non_agu_define): Simplify calculation\n\tof \"found\".  Simplify return value calculation.\n\t(distance_agu_use): Ditto.\n\nFrom-SVN: r179561", "tree": {"sha": "3a03ba85de326f4969fb2400ddccadbaa44f402f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3a03ba85de326f4969fb2400ddccadbaa44f402f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9fff751c3f50b1b13e40cc25702055561f6cf085", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9fff751c3f50b1b13e40cc25702055561f6cf085", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9fff751c3f50b1b13e40cc25702055561f6cf085", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9fff751c3f50b1b13e40cc25702055561f6cf085/comments", "author": null, "committer": null, "parents": [{"sha": "17a3dae3c23664d4e264003af90061a9dae7b97c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/17a3dae3c23664d4e264003af90061a9dae7b97c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/17a3dae3c23664d4e264003af90061a9dae7b97c"}], "stats": {"total": 61, "additions": 31, "deletions": 30}, "files": [{"sha": "82691daf8f4fe3260ccca2898fe1d3b6b303c94c", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 7, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9fff751c3f50b1b13e40cc25702055561f6cf085/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9fff751c3f50b1b13e40cc25702055561f6cf085/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=9fff751c3f50b1b13e40cc25702055561f6cf085", "patch": "@@ -1,3 +1,9 @@\n+2011-10-05  Uros Bizjak  <ubizjak@gmail.com>\n+\n+\t* config/i386/i386.c (distance_non_agu_define): Simplify calculation\n+\tof \"found\".  Simplify return value calculation.\n+\t(distance_agu_use): Ditto.\n+\n 2011-10-05  Bernd Schmidt  <bernds@codesourcery.com>\n \n \tPR bootstrap/50621\n@@ -20,8 +26,7 @@\n \tsmall data area register.\n \t(rx_pid_base_regnum): New function.  Returns the number of the pid\n \tbase register.\n-\t(rx_decl_for_addr): New function.  Returns the symbolic part of a\n-\tMEM.\n+\t(rx_decl_for_addr): New function.  Returns the symbolic part of a MEM.\n \t(rx_pid_data_operand): New function.  Returns whether an object is\n \tin the position independent data area.\n \t(rx_legitimize_address): New function.  Puts undecided PID\n@@ -49,8 +54,7 @@\n \t(CASE_VECTOR_PC_RELATIVE): Define.\n \t(JUMP_TABLES_IN_TEXT_SECTION): Enable for PID mode.\n \t* config/rx/rx-protos.h (rx_maybe_pidify_operand): Prototype.\n-\t* doc/invoke.texi (RX Options): Document -mpid command line\n-\toption.\n+\t* doc/invoke.texi (RX Options): Document -mpid command line option.\n \n 2011-10-05  Richard Guenther  <rguenther@suse.de>\n \n@@ -101,9 +105,8 @@\n \n 2011-10-05  Richard Guenther  <rguenther@suse.de>\n \n-\t* gimple-fold.c (gimple_fold_stmt_to_constant_1): For\n-\tternary ops with an embedded expression valueize and fold\n-\tthat as well.\n+\t* gimple-fold.c (gimple_fold_stmt_to_constant_1): For ternary ops\n+\twith an embedded expression valueize and fold that as well.\n \t* tree-ssa-sccvn.c (try_to_simplify): Also allow SSA name\n \tresults from gimple_fold_stmt_to_constant_1.\n "}, {"sha": "ba24400afa281ef8d592d043b3285531f0adebe5", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 21, "deletions": 23, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9fff751c3f50b1b13e40cc25702055561f6cf085/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9fff751c3f50b1b13e40cc25702055561f6cf085/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=9fff751c3f50b1b13e40cc25702055561f6cf085", "patch": "@@ -16142,19 +16142,20 @@ distance_non_agu_define (unsigned int regno1, unsigned int regno2,\n \n \t  FOR_EACH_EDGE (e, ei, bb->preds)\n \t    {\n-\t      int bb_dist = distance_non_agu_define_in_bb (regno1, regno2,\n-\t\t\t\t\t\t\t   insn, distance,\n-\t\t\t\t\t\t\t   BB_END (e->src),\n-\t\t\t\t\t\t\t   &found_in_bb);\n+\t      int bb_dist\n+\t\t= distance_non_agu_define_in_bb (regno1, regno2,\n+\t\t\t\t\t\t insn, distance,\n+\t\t\t\t\t\t BB_END (e->src),\n+\t\t\t\t\t\t &found_in_bb);\n \t      if (found_in_bb)\n \t\t{\n \t\t  if (shortest_dist < 0)\n \t\t    shortest_dist = bb_dist;\n \t\t  else if (bb_dist > 0)\n \t\t    shortest_dist = MIN (bb_dist, shortest_dist);\n-\t\t}\n \n-\t      found = found || found_in_bb;\n+\t\t  found = true;\n+\t\t}\n \t    }\n \n \t  distance = shortest_dist;\n@@ -16167,11 +16168,9 @@ distance_non_agu_define (unsigned int regno1, unsigned int regno2,\n   extract_insn_cached (insn);\n \n   if (!found)\n-    distance = -1;\n-  else\n-    distance = distance >> 1;\n+    return -1;\n \n-  return distance;\n+  return distance >> 1;\n }\n \n /* Return the distance in half-cycles between INSN and the next\n@@ -16184,9 +16183,9 @@ distance_non_agu_define (unsigned int regno1, unsigned int regno2,\n    found and false otherwise.  */\n \n static int\n-distance_agu_use_in_bb(unsigned int regno,\n-\t\t       rtx insn, int distance, rtx start,\n-\t\t       bool *found, bool *redefined)\n+distance_agu_use_in_bb (unsigned int regno,\n+\t\t\trtx insn, int distance, rtx start,\n+\t\t\tbool *found, bool *redefined)\n {\n   basic_block bb = start ? BLOCK_FOR_INSN (start) : NULL;\n   rtx next = start;\n@@ -16271,30 +16270,29 @@ distance_agu_use (unsigned int regno0, rtx insn)\n \n \t  FOR_EACH_EDGE (e, ei, bb->succs)\n \t    {\n-\t      int bb_dist = distance_agu_use_in_bb (regno0, insn,\n-\t\t\t\t\t\t    distance, BB_HEAD (e->dest),\n-\t\t\t\t\t\t    &found_in_bb, &redefined_in_bb);\n+\t      int bb_dist\n+\t\t= distance_agu_use_in_bb (regno0, insn,\n+\t\t\t\t\t  distance, BB_HEAD (e->dest),\n+\t\t\t\t\t  &found_in_bb, &redefined_in_bb);\n \t      if (found_in_bb)\n \t\t{\n \t\t  if (shortest_dist < 0)\n \t\t    shortest_dist = bb_dist;\n \t\t  else if (bb_dist > 0)\n \t\t    shortest_dist = MIN (bb_dist, shortest_dist);\n-\t\t}\n \n-\t      found = found || found_in_bb;\n+\t\t  found = true;\n+\t\t}\n \t    }\n \n \t  distance = shortest_dist;\n \t}\n     }\n \n   if (!found || redefined)\n-    distance = -1;\n-  else\n-    distance = distance >> 1;\n+    return -1;\n \n-  return distance;\n+  return distance >> 1;\n }\n \n /* Define this macro to tune LEA priority vs ADD, it take effect when\n@@ -16349,7 +16347,7 @@ ix86_lea_outperforms (rtx insn, unsigned int regno0, unsigned int regno1,\n    false otherwise.  */\n \n static bool\n-ix86_ok_to_clobber_flags(rtx insn)\n+ix86_ok_to_clobber_flags (rtx insn)\n {\n   basic_block bb = BLOCK_FOR_INSN (insn);\n   df_ref *use;"}]}