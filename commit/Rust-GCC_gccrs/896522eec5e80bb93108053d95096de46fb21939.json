{"sha": "896522eec5e80bb93108053d95096de46fb21939", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODk2NTIyZWVjNWU4MGJiOTMxMDgwNTNkOTUwOTZkZTQ2ZmIyMTkzOQ==", "commit": {"author": {"name": "Tom de Vries", "email": "tom@codesourcery.com", "date": "2015-11-25T21:26:24Z"}, "committer": {"name": "Tom de Vries", "email": "vries@gcc.gnu.org", "date": "2015-11-25T21:26:24Z"}, "message": "Add pass_oacc_kernels\n\n2015-11-25  Tom de Vries  <tom@codesourcery.com>\n\n\t* tree-pass.h (make_pass_oacc_kernels, make_pass_oacc_kernels2):\n\tDeclare.\n\t* tree-ssa-loop.c (gate_oacc_kernels): New static function.\n\t(pass_data_oacc_kernels, pass_data_oacc_kernels2): New pass_data.\n\t(class pass_oacc_kernels, class pass_oacc_kernels2): New pass.\n\t(make_pass_oacc_kernels, make_pass_oacc_kernels2): New function.\n\nFrom-SVN: r230906", "tree": {"sha": "369ab6215c76ec02c9c5f6a2ebf568c38a320056", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/369ab6215c76ec02c9c5f6a2ebf568c38a320056"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/896522eec5e80bb93108053d95096de46fb21939", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/896522eec5e80bb93108053d95096de46fb21939", "html_url": "https://github.com/Rust-GCC/gccrs/commit/896522eec5e80bb93108053d95096de46fb21939", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/896522eec5e80bb93108053d95096de46fb21939/comments", "author": null, "committer": null, "parents": [{"sha": "faadf84ceb8eaaa82c6c7f10c64099630acbf069", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/faadf84ceb8eaaa82c6c7f10c64099630acbf069", "html_url": "https://github.com/Rust-GCC/gccrs/commit/faadf84ceb8eaaa82c6c7f10c64099630acbf069"}], "stats": {"total": 121, "additions": 121, "deletions": 0}, "files": [{"sha": "8ba6d08f89cc5408004f4e79c43a31a077c6b467", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/896522eec5e80bb93108053d95096de46fb21939/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/896522eec5e80bb93108053d95096de46fb21939/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=896522eec5e80bb93108053d95096de46fb21939", "patch": "@@ -1,3 +1,12 @@\n+2015-11-25  Tom de Vries  <tom@codesourcery.com>\n+\n+\t* tree-pass.h (make_pass_oacc_kernels, make_pass_oacc_kernels2):\n+\tDeclare.\n+\t* tree-ssa-loop.c (gate_oacc_kernels): New static function.\n+\t(pass_data_oacc_kernels, pass_data_oacc_kernels2): New pass_data.\n+\t(class pass_oacc_kernels, class pass_oacc_kernels2): New pass.\n+\t(make_pass_oacc_kernels, make_pass_oacc_kernels2): New function.\n+\n 2015-11-25  Jan Hubicka  <hubicka@ucw.cz>\n \n \t* timevar.def (TV_IPA_LTO_DECOMPRESS, TV_IPA_LTO_COMPRESS,"}, {"sha": "970491834513002fcab5108513a7a8c8b95e8beb", "filename": "gcc/tree-pass.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/896522eec5e80bb93108053d95096de46fb21939/gcc%2Ftree-pass.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/896522eec5e80bb93108053d95096de46fb21939/gcc%2Ftree-pass.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-pass.h?ref=896522eec5e80bb93108053d95096de46fb21939", "patch": "@@ -465,6 +465,8 @@ extern gimple_opt_pass *make_pass_strength_reduction (gcc::context *ctxt);\n extern gimple_opt_pass *make_pass_vtable_verify (gcc::context *ctxt);\n extern gimple_opt_pass *make_pass_ubsan (gcc::context *ctxt);\n extern gimple_opt_pass *make_pass_sanopt (gcc::context *ctxt);\n+extern gimple_opt_pass *make_pass_oacc_kernels (gcc::context *ctxt);\n+extern gimple_opt_pass *make_pass_oacc_kernels2 (gcc::context *ctxt);\n \n /* IPA Passes */\n extern simple_ipa_opt_pass *make_pass_ipa_lower_emutls (gcc::context *ctxt);"}, {"sha": "cf7d94ef1cdc574b034c24d0d0bdca5e33971d59", "filename": "gcc/tree-ssa-loop.c", "status": "modified", "additions": 110, "deletions": 0, "changes": 110, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/896522eec5e80bb93108053d95096de46fb21939/gcc%2Ftree-ssa-loop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/896522eec5e80bb93108053d95096de46fb21939/gcc%2Ftree-ssa-loop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-loop.c?ref=896522eec5e80bb93108053d95096de46fb21939", "patch": "@@ -35,6 +35,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"tree-inline.h\"\n #include \"tree-scalar-evolution.h\"\n #include \"tree-vectorizer.h\"\n+#include \"omp-low.h\"\n \n \n /* A pass making sure loops are fixed up.  */\n@@ -141,6 +142,115 @@ make_pass_tree_loop (gcc::context *ctxt)\n   return new pass_tree_loop (ctxt);\n }\n \n+/* Gate for oacc kernels pass group.  */\n+\n+static bool\n+gate_oacc_kernels (function *fn)\n+{\n+  if (flag_tree_parallelize_loops <= 1)\n+    return false;\n+\n+  tree oacc_function_attr = get_oacc_fn_attrib (fn->decl);\n+  if (oacc_function_attr == NULL_TREE)\n+    return false;\n+\n+  tree val = TREE_VALUE (oacc_function_attr);\n+  while (val != NULL_TREE && TREE_VALUE (val) == NULL_TREE)\n+    val = TREE_CHAIN (val);\n+\n+  if (val != NULL_TREE)\n+    return false;\n+\n+  struct loop *loop;\n+  FOR_EACH_LOOP (loop, 0)\n+    if (loop->in_oacc_kernels_region)\n+      return true;\n+\n+  return false;\n+}\n+\n+/* The oacc kernels superpass.  */\n+\n+namespace {\n+\n+const pass_data pass_data_oacc_kernels =\n+{\n+  GIMPLE_PASS, /* type */\n+  \"oacc_kernels\", /* name */\n+  OPTGROUP_LOOP, /* optinfo_flags */\n+  TV_TREE_LOOP, /* tv_id */\n+  PROP_cfg, /* properties_required */\n+  0, /* properties_provided */\n+  0, /* properties_destroyed */\n+  0, /* todo_flags_start */\n+  0, /* todo_flags_finish */\n+};\n+\n+class pass_oacc_kernels : public gimple_opt_pass\n+{\n+public:\n+  pass_oacc_kernels (gcc::context *ctxt)\n+    : gimple_opt_pass (pass_data_oacc_kernels, ctxt)\n+  {}\n+\n+  /* opt_pass methods: */\n+  virtual bool gate (function *fn) { return gate_oacc_kernels (fn); }\n+\n+}; // class pass_oacc_kernels\n+\n+} // anon namespace\n+\n+gimple_opt_pass *\n+make_pass_oacc_kernels (gcc::context *ctxt)\n+{\n+  return new pass_oacc_kernels (ctxt);\n+}\n+\n+namespace {\n+\n+const pass_data pass_data_oacc_kernels2 =\n+{\n+  GIMPLE_PASS, /* type */\n+  \"oacc_kernels2\", /* name */\n+  OPTGROUP_LOOP, /* optinfo_flags */\n+  TV_TREE_LOOP, /* tv_id */\n+  PROP_cfg, /* properties_required */\n+  0, /* properties_provided */\n+  0, /* properties_destroyed */\n+  0, /* todo_flags_start */\n+  0, /* todo_flags_finish */\n+};\n+\n+class pass_oacc_kernels2 : public gimple_opt_pass\n+{\n+public:\n+  pass_oacc_kernels2 (gcc::context *ctxt)\n+    : gimple_opt_pass (pass_data_oacc_kernels2, ctxt)\n+  {}\n+\n+  /* opt_pass methods: */\n+  virtual bool gate (function *fn) { return gate_oacc_kernels (fn); }\n+  virtual unsigned int execute (function *fn)\n+    {\n+      /* Rather than having a copy of the previous dump, get some use out of\n+\t this dump, and try to minimize differences with the following pass\n+\t (pass_lim), which will initizalize the loop optimizer with\n+\t LOOPS_NORMAL.  */\n+      loop_optimizer_init (LOOPS_NORMAL);\n+      loop_optimizer_finalize (fn);\n+      return 0;\n+    }\n+\n+}; // class pass_oacc_kernels2\n+\n+} // anon namespace\n+\n+gimple_opt_pass *\n+make_pass_oacc_kernels2 (gcc::context *ctxt)\n+{\n+  return new pass_oacc_kernels2 (ctxt);\n+}\n+\n /* The no-loop superpass.  */\n \n namespace {"}]}