{"sha": "f65cecabc32fe12b024253502af953e657e1a878", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjY1Y2VjYWJjMzJmZTEyYjAyNDI1MzUwMmFmOTUzZTY1N2UxYTg3OA==", "commit": {"author": {"name": "Yang Yang", "email": "yangyang305@huawei.com", "date": "2020-04-14T19:42:23Z"}, "committer": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2020-04-14T14:02:31Z"}, "message": "PR tree-optimization/94574 - aarch64: ICE during GIMPLE pass:ccp\n\nIn this PR the testcase ICEs because a BIT_INSERT_EXPR whose replaced bits are\nnot fully inside the container is generated. A size check is added to avoid\nthis kind of ICE.\n\ngcc/ChangeLog:\n\n\tPR tree-optimization/94574\n\t* tree-ssa.c (non_rewritable_lvalue_p): Add size check when analyzing\n\twhether a vector-insert is rewritable using a BIT_INSERT_EXPR.\n\ngcc/testsuite/ChangeLog:\n\n\tPR tree-optimization/94574\n\t* gcc.dg/pr94574.c: New test.", "tree": {"sha": "d80cba380e95cde4d8d064c1a059037dc617adea", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d80cba380e95cde4d8d064c1a059037dc617adea"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f65cecabc32fe12b024253502af953e657e1a878", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f65cecabc32fe12b024253502af953e657e1a878", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f65cecabc32fe12b024253502af953e657e1a878", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f65cecabc32fe12b024253502af953e657e1a878/comments", "author": null, "committer": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "438ffa2a8fac925b1bee8862fa15bc5380c0dffd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/438ffa2a8fac925b1bee8862fa15bc5380c0dffd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/438ffa2a8fac925b1bee8862fa15bc5380c0dffd"}], "stats": {"total": 30, "additions": 29, "deletions": 1}, "files": [{"sha": "441dcab490d4e7e8e3f528752b08b233336480f0", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f65cecabc32fe12b024253502af953e657e1a878/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f65cecabc32fe12b024253502af953e657e1a878/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=f65cecabc32fe12b024253502af953e657e1a878", "patch": "@@ -1,3 +1,9 @@\n+2020-04-14  Yang Yang <yangyang305@huawei.com>\n+\n+\tPR tree-optimization/94574\n+\t* tree-ssa.c (non_rewritable_lvalue_p): Add size check when analyzing\n+\twhether a vector-insert is rewritable using a BIT_INSERT_EXPR.\n+\n 2020-04-14  H.J. Lu  <hongjiu.lu@intel.com>\n \n \tPR target/94561"}, {"sha": "051dcb15f482b3239bf3d5617f8a2f7dbba13462", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f65cecabc32fe12b024253502af953e657e1a878/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f65cecabc32fe12b024253502af953e657e1a878/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=f65cecabc32fe12b024253502af953e657e1a878", "patch": "@@ -1,3 +1,8 @@\n+2020-04-14  Yang Yang <yangyang305@huawei.com>\n+\n+\tPR tree-optimization/94574\n+\t* gcc.dg/pr94574.c: New test.\n+\n 2020-04-14  H.J. Lu  <hongjiu.lu@intel.com>\n \n \tPR target/94561"}, {"sha": "0d18bd82832c83da35b2a7c22f18683500ed3889", "filename": "gcc/testsuite/gcc.dg/pr94574.c", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f65cecabc32fe12b024253502af953e657e1a878/gcc%2Ftestsuite%2Fgcc.dg%2Fpr94574.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f65cecabc32fe12b024253502af953e657e1a878/gcc%2Ftestsuite%2Fgcc.dg%2Fpr94574.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr94574.c?ref=f65cecabc32fe12b024253502af953e657e1a878", "patch": "@@ -0,0 +1,15 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -w -Wno-psabi\" } */\n+\n+typedef unsigned int v4si __attribute__((vector_size(16)));\n+typedef unsigned int v2si __attribute__((vector_size(8)));\n+\n+/* The aliasing is somewhat dubious here, but it must compile.  */\n+\n+v2si\n+foo (v4si v)\n+{\n+  v2si res;\n+  *(v4si *) &res = v;\n+  return res;\n+}"}, {"sha": "4f4ab2b8992ae4bb258c763bb2a5442ea074d93b", "filename": "gcc/tree-ssa.c", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f65cecabc32fe12b024253502af953e657e1a878/gcc%2Ftree-ssa.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f65cecabc32fe12b024253502af953e657e1a878/gcc%2Ftree-ssa.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa.c?ref=f65cecabc32fe12b024253502af953e657e1a878", "patch": "@@ -1543,7 +1543,9 @@ non_rewritable_lvalue_p (tree lhs)\n \t  && known_gt (wi::to_poly_offset (TYPE_SIZE_UNIT (TREE_TYPE (decl))),\n \t\t       mem_ref_offset (lhs))\n \t  && multiple_of_p (sizetype, TREE_OPERAND (lhs, 1),\n-\t\t\t    TYPE_SIZE_UNIT (TREE_TYPE (lhs))))\n+\t\t\t    TYPE_SIZE_UNIT (TREE_TYPE (lhs)))\n+\t  && known_ge (wi::to_poly_offset (TYPE_SIZE (TREE_TYPE (decl))),\n+\t\t       wi::to_poly_offset (TYPE_SIZE (TREE_TYPE (lhs)))))\n \t{\n \t  poly_uint64 lhs_bits, nelts;\n \t  if (poly_int_tree_p (TYPE_SIZE (TREE_TYPE (lhs)), &lhs_bits)"}]}