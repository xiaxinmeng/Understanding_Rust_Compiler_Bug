{"sha": "9374f766a75bf898e717a5bbb58199a91528af0b", "node_id": "C_kwDOANBUbNoAKDkzNzRmNzY2YTc1YmY4OThlNzE3YTViYmI1ODE5OWE5MTUyOGFmMGI", "commit": {"author": {"name": "Ju-Zhe Zhong", "email": "juzhe.zhong@rivai.ai", "date": "2022-12-19T23:13:54Z"}, "committer": {"name": "Kito Cheng", "email": "kito.cheng@sifive.com", "date": "2022-12-23T05:41:11Z"}, "message": "RISC-V: Fix incorrect annotation\n\ngcc/ChangeLog:\n\n\t* config/riscv/riscv-vsetvl.cc (anticipatable_occurrence_p): Fix\n\tincorrect annotations.\n\t(available_occurrence_p): Ditto.\n\t(backward_propagate_worthwhile_p): Ditto.\n\t(can_backward_propagate_p): Ditto.", "tree": {"sha": "4b94e38684736e3d8c040df50abfe0cd1c592c9c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4b94e38684736e3d8c040df50abfe0cd1c592c9c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9374f766a75bf898e717a5bbb58199a91528af0b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9374f766a75bf898e717a5bbb58199a91528af0b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9374f766a75bf898e717a5bbb58199a91528af0b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9374f766a75bf898e717a5bbb58199a91528af0b/comments", "author": {"login": "zhongjuzhe", "id": 66454988, "node_id": "MDQ6VXNlcjY2NDU0OTg4", "avatar_url": "https://avatars.githubusercontent.com/u/66454988?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zhongjuzhe", "html_url": "https://github.com/zhongjuzhe", "followers_url": "https://api.github.com/users/zhongjuzhe/followers", "following_url": "https://api.github.com/users/zhongjuzhe/following{/other_user}", "gists_url": "https://api.github.com/users/zhongjuzhe/gists{/gist_id}", "starred_url": "https://api.github.com/users/zhongjuzhe/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zhongjuzhe/subscriptions", "organizations_url": "https://api.github.com/users/zhongjuzhe/orgs", "repos_url": "https://api.github.com/users/zhongjuzhe/repos", "events_url": "https://api.github.com/users/zhongjuzhe/events{/privacy}", "received_events_url": "https://api.github.com/users/zhongjuzhe/received_events", "type": "User", "site_admin": false}, "committer": {"login": "kito-cheng", "id": 2723185, "node_id": "MDQ6VXNlcjI3MjMxODU=", "avatar_url": "https://avatars.githubusercontent.com/u/2723185?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kito-cheng", "html_url": "https://github.com/kito-cheng", "followers_url": "https://api.github.com/users/kito-cheng/followers", "following_url": "https://api.github.com/users/kito-cheng/following{/other_user}", "gists_url": "https://api.github.com/users/kito-cheng/gists{/gist_id}", "starred_url": "https://api.github.com/users/kito-cheng/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kito-cheng/subscriptions", "organizations_url": "https://api.github.com/users/kito-cheng/orgs", "repos_url": "https://api.github.com/users/kito-cheng/repos", "events_url": "https://api.github.com/users/kito-cheng/events{/privacy}", "received_events_url": "https://api.github.com/users/kito-cheng/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "85112fbbfd939f87fb12a00e40ab423ddcfa8ca1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/85112fbbfd939f87fb12a00e40ab423ddcfa8ca1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/85112fbbfd939f87fb12a00e40ab423ddcfa8ca1"}], "stats": {"total": 18, "additions": 9, "deletions": 9}, "files": [{"sha": "72f1e4059ab8ecd4dd87342a7a2de4792e3ea981", "filename": "gcc/config/riscv/riscv-vsetvl.cc", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9374f766a75bf898e717a5bbb58199a91528af0b/gcc%2Fconfig%2Friscv%2Friscv-vsetvl.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9374f766a75bf898e717a5bbb58199a91528af0b/gcc%2Fconfig%2Friscv%2Friscv-vsetvl.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Friscv%2Friscv-vsetvl.cc?ref=9374f766a75bf898e717a5bbb58199a91528af0b", "patch": "@@ -186,7 +186,7 @@ anticipatable_occurrence_p (const insn_info *insn, const vector_insn_info dem)\n   /* The only possible operand we care of VSETVL is AVL.  */\n   if (dem.has_avl_reg ())\n     {\n-      /* The operands shoule not be modified in the basic block prior\n+      /* The operands should not be modified in the basic block prior\n \t to the occurrence.  */\n       if (!vlmax_avl_p (dem.get_avl ()))\n \t{\n@@ -223,7 +223,7 @@ available_occurrence_p (const insn_info *insn, const vector_insn_info dem)\n   /* The only possible operand we care of VSETVL is AVL.  */\n   if (dem.has_avl_reg ())\n     {\n-      /* The operands shoule not be modified in the basic block prior\n+      /* The operands should not be modified in the basic block prior\n \t to the occurrence.\n \t e.g.\n \t    bb:\n@@ -284,7 +284,7 @@ backward_propagate_worthwhile_p (const basic_block cfg_bb,\n \t\t\t     |_________|\n \t\t\t  reaching_out\n \t  Header is incompatible with reaching_out and the block is loop itself,\n-\t  we don't backward propagete the local_dem since we can't avoid emit\n+\t  we don't backward propagate the local_dem since we can't avoid emit\n \t  vsetvl for the local_dem.  */\n       edge e;\n       edge_iterator ei;\n@@ -334,10 +334,10 @@ can_backward_propagate_p (const function_info *ssa, const basic_block cfg_bb,\n   insn_info *insn = prop.get_insn ();\n \n   /* TODO: We don't backward propagate the explict VSETVL here\n-     since we will change vsetvl and vsetvlmax intrinsiscs into\n-     no side effects which can be optimized into optimzal location\n-     by GCC internal PASSes. We only need to support these backward\n-     propagation if vsetvl instrinsics have side effects.  */\n+     since we will change vsetvl and vsetvlmax intrinsics into\n+     no side effects which can be optimized into optimal location\n+     by GCC internal passes. We only need to support these backward\n+     propagation if vsetvl intrinsics have side effects.  */\n   if (vsetvl_insn_p (insn->rtl ()))\n     return false;\n \n@@ -369,7 +369,7 @@ can_backward_propagate_p (const function_info *ssa, const basic_block cfg_bb,\n   def_info *def = find_access (insn->uses (), REGNO (reg))->def ();\n \n   /* If the definition is in the current block, we can't propagate it\n-     acrocss blocks.  */\n+     across blocks.  */\n   if (def->bb ()->cfg_bb ()->index == insn->bb ()->cfg_bb ()->index)\n     {\n       set_info *set = safe_dyn_cast<set_info *> (def);\n@@ -406,7 +406,7 @@ can_backward_propagate_p (const function_info *ssa, const basic_block cfg_bb,\n   if (def->bb ()->cfg_bb ()->index == cfg_bb->index)\n     return true;\n \n-  /* Make sure we don't backward propagete the VL/VTYPE info over the\n+  /* Make sure we don't backward propagate the VL/VTYPE info over the\n      definition blocks.  */\n   bool visited_p = false;\n   for (const bb_info *bb : ssa->reverse_bbs ())"}]}