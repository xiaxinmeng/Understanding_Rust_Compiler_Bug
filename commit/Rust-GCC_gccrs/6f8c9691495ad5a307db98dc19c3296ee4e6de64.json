{"sha": "6f8c9691495ad5a307db98dc19c3296ee4e6de64", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmY4Yzk2OTE0OTVhZDVhMzA3ZGI5OGRjMTljMzI5NmVlNGU2ZGU2NA==", "commit": {"author": {"name": "Patrick Palka", "email": "ppalka@redhat.com", "date": "2021-06-04T18:08:26Z"}, "committer": {"name": "Patrick Palka", "email": "ppalka@redhat.com", "date": "2021-06-04T18:08:26Z"}, "message": "c++: top-level cv-quals on type of NTTP [PR100893]\n\nHere, we're rejecting the specialization of g<T,F> with T=A, F=&f in\nparam4.C below due to a spurious constness mismatch between the type of\nthe template argument &f and the substituted type of the parm F (the\nlatter has a top-level const).  Note that this mismatch doesn't occur\nwith object pointers because in that case a call to\nperform_qualification_conversions from convert_nontype_argument\nimplicitly adds a top-level const to the argument (via a cast) to match.\n\nThis however seems to be a manifestation of a more general conformance\nissue: we're not dropping top-level cv-quals on the substituted\ntype of an NTTP as per [temp.param]/6 (we only do so at parse time in\nprocess_template_parm).  So this patch makes convert_template_argument\ndrop top-level cv-quals accordingly.\n\n\tPR c++/100893\n\ngcc/cp/ChangeLog:\n\n\t* pt.c (convert_template_argument): Strip top-level cv-quals\n\ton the substituted type of a non-type template parameter.\n\ngcc/testsuite/ChangeLog:\n\n\t* g++.dg/template/param4.C: New test.\n\t* g++.dg/template/param5.C: New test.\n\t* g++.dg/cpp1z/nontype-auto19.C: New test.\n\t* g++.dg/cpp2a/concepts-decltype.C: Don't expect that the\n\tdeduced type of a decltype(auto) NTTP has top-level cv-quals.", "tree": {"sha": "9f4269a63672a71d2c308b6d8e8d85334a36e1fa", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9f4269a63672a71d2c308b6d8e8d85334a36e1fa"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6f8c9691495ad5a307db98dc19c3296ee4e6de64", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6f8c9691495ad5a307db98dc19c3296ee4e6de64", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6f8c9691495ad5a307db98dc19c3296ee4e6de64", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6f8c9691495ad5a307db98dc19c3296ee4e6de64/comments", "author": null, "committer": null, "parents": [{"sha": "5357ab75dedef403b0eebf9277d61d1cbeb5898f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5357ab75dedef403b0eebf9277d61d1cbeb5898f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5357ab75dedef403b0eebf9277d61d1cbeb5898f"}], "stats": {"total": 31, "additions": 30, "deletions": 1}, "files": [{"sha": "2ae886d3a396a256d850ee442cf09ca220baca80", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f8c9691495ad5a307db98dc19c3296ee4e6de64/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f8c9691495ad5a307db98dc19c3296ee4e6de64/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=6f8c9691495ad5a307db98dc19c3296ee4e6de64", "patch": "@@ -8499,6 +8499,10 @@ convert_template_argument (tree parm,\n       if (invalid_nontype_parm_type_p (t, complain))\n \treturn error_mark_node;\n \n+      /* Drop top-level cv-qualifiers on the substituted/deduced type of\n+\t this non-type template parameter, as per [temp.param]/6.  */\n+      t = cv_unqualified (t);\n+\n       if (t != TREE_TYPE (parm))\n \tt = canonicalize_type_argument (t, complain);\n "}, {"sha": "d6b904fd19c4c3f969e432600ccb814718c2d375", "filename": "gcc/testsuite/g++.dg/cpp1z/nontype-auto19.C", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f8c9691495ad5a307db98dc19c3296ee4e6de64/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fnontype-auto19.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f8c9691495ad5a307db98dc19c3296ee4e6de64/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fnontype-auto19.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fnontype-auto19.C?ref=6f8c9691495ad5a307db98dc19c3296ee4e6de64", "patch": "@@ -0,0 +1,8 @@\n+// Verify top-level cv-qualifiers are dropped from the deduced\n+// type of a non-type template parameter, as per [temp.param]/6.\n+// { dg-do compile { target c++17 } }\n+\n+constexpr int x = 42;\n+template<decltype(auto) V> decltype(V)& f();\n+using type = decltype(f<x>());\n+using type = int&;"}, {"sha": "b375f74eb8aa847852cc2de63c97b8ffe02a029e", "filename": "gcc/testsuite/g++.dg/cpp2a/concepts-decltype.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f8c9691495ad5a307db98dc19c3296ee4e6de64/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts-decltype.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f8c9691495ad5a307db98dc19c3296ee4e6de64/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts-decltype.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts-decltype.C?ref=6f8c9691495ad5a307db98dc19c3296ee4e6de64", "patch": "@@ -61,7 +61,7 @@ constexpr int Z = 10;\n \n static_assert(deduced_as<0, int>);\n static_assert(deduced_as<0, int&>); // { dg-error \"invalid variable template\" }\n-static_assert(deduced_as<Z, const int>);\n+static_assert(deduced_as<Z, int>);\n static_assert(deduced_as<(Z), const int>); // { dg-error \"invalid variable template\" }\n static_assert(deduced_as<(Z), const int&>);\n "}, {"sha": "8061ff72ba2c36d0b1d5f7e240cc148e202e1d30", "filename": "gcc/testsuite/g++.dg/template/param4.C", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f8c9691495ad5a307db98dc19c3296ee4e6de64/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fparam4.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f8c9691495ad5a307db98dc19c3296ee4e6de64/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fparam4.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fparam4.C?ref=6f8c9691495ad5a307db98dc19c3296ee4e6de64", "patch": "@@ -0,0 +1,10 @@\n+// PR c++/100893\n+\n+template<class T, typename T::type F> void g() { }\n+\n+struct A { typedef void (*const type)(); };\n+void f();\n+template void g<A, &f>();\n+\n+struct B { typedef void (B::*const type)(); void f(); };\n+template void g<B, &B::f>();"}, {"sha": "89a5c04c09ce5032a6e35934357af8ab9e88075c", "filename": "gcc/testsuite/g++.dg/template/param5.C", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f8c9691495ad5a307db98dc19c3296ee4e6de64/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fparam5.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f8c9691495ad5a307db98dc19c3296ee4e6de64/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fparam5.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fparam5.C?ref=6f8c9691495ad5a307db98dc19c3296ee4e6de64", "patch": "@@ -0,0 +1,7 @@\n+// Verify top-level cv-qualifiers are dropped when determining the substituted\n+// type of a non-type template parameter, as per [temp.param]/6.\n+// { dg-do compile { target c++11 } }\n+\n+template<class T, T V> decltype(V)& f();\n+using type = decltype(f<const volatile int, 0>());\n+using type = int&;"}]}