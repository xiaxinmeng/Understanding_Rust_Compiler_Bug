{"sha": "cd41d410da230dafae73a791281ef058c06a6c72", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Y2Q0MWQ0MTBkYTIzMGRhZmFlNzNhNzkxMjgxZWYwNThjMDZhNmM3Mg==", "commit": {"author": {"name": "Dodji Seketeli", "email": "dodji@redhat.com", "date": "2009-05-28T11:24:18Z"}, "committer": {"name": "Dodji Seketeli", "email": "dodji@gcc.gnu.org", "date": "2009-05-28T11:24:18Z"}, "message": "Fix for PR c++/PR39754\n\ngcc/cp/ChangeLog:\n    PR c++/39754\n    * cp-tree.h (canonical_type_variant): Remove this function declaration.\n    (strip_typedefs): New function declaration.\n    * tree.c (strip_typedefs): New function definition.\n    (canonical_type_variant): Remove function definition.\n    * cvt.c (convert_from_reference): No need to use\n    canonical_type_variant.\n    * typeck.c (cp_build_indirect_ref): Likewise.\n    * error.c (dump_template_bindings): Use strip_typedefs instead of\n    canonical_type_variant.\n    * pt.c (convert_template_argument, unify): Likewise.\n    * mangle.c (canonicalize_for_substitution): Don't use\n    canonical_type_variant.\n\ngcc/testsuite/ChangeLog:\n    PR c++/39754\n    * g++.dg/template/canon-type-1.C: New test.\n    * g++.dg/template/canon-type-2.C: Likewise.\n    * g++.dg/template/canon-type-3.C: Likewise.\n    * g++.dg/template/canon-type-4.C: Likewise.\n    * g++.dg/template/canon-type-5.C: Likewise.\n    * g++.dg/template/canon-type-6.C: Likewise.\n    * g++.dg/template/canon-type-7.C: Likewise.\n\nFrom-SVN: r147951", "tree": {"sha": "b90e673a3046b819f2c25ca56d8e3043b60045f4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b90e673a3046b819f2c25ca56d8e3043b60045f4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/cd41d410da230dafae73a791281ef058c06a6c72", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cd41d410da230dafae73a791281ef058c06a6c72", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cd41d410da230dafae73a791281ef058c06a6c72", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cd41d410da230dafae73a791281ef058c06a6c72/comments", "author": null, "committer": null, "parents": [{"sha": "233215fe7cedf3cfa908f11c9543e1f7f10e3283", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/233215fe7cedf3cfa908f11c9543e1f7f10e3283", "html_url": "https://github.com/Rust-GCC/gccrs/commit/233215fe7cedf3cfa908f11c9543e1f7f10e3283"}], "stats": {"total": 308, "additions": 286, "deletions": 22}, "files": [{"sha": "11be689a536bc9671bccbaf24fb10382a20bc268", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cd41d410da230dafae73a791281ef058c06a6c72/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cd41d410da230dafae73a791281ef058c06a6c72/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=cd41d410da230dafae73a791281ef058c06a6c72", "patch": "@@ -1,3 +1,19 @@\n+2009-05-28  Dodji Seketeli  <dodji@redhat.com>\n+\n+\tPR c++/39754\n+\t* cp-tree.h (canonical_type_variant): Remove this function declaration.\n+\t(strip_typedefs): New function declaration.\n+\t* tree.c (strip_typedefs): New function definition.\n+\t(canonical_type_variant): Remove function definition.\n+\t* cvt.c (convert_from_reference): No need to use\n+\tcanonical_type_variant.\n+\t* typeck.c (cp_build_indirect_ref): Likewise.\n+\t* error.c (dump_template_bindings): Use strip_typedefs instead of\n+\tcanonical_type_variant.\n+\t* pt.c (convert_template_argument, unify): Likewise.\n+\t* mangle.c (canonicalize_for_substitution): Don't use\n+\tcanonical_type_variant.\n+\n 2009-05-27  Jason Merrill  <jason@redhat.com>\n \n \t* call.c (implicit_conversion): Handle conversion from"}, {"sha": "e31726cfdb17a1fb4178c36c60a438052219715d", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cd41d410da230dafae73a791281ef058c06a6c72/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cd41d410da230dafae73a791281ef058c06a6c72/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=cd41d410da230dafae73a791281ef058c06a6c72", "patch": "@@ -4827,7 +4827,7 @@ extern void init_tree\t\t\t\t(void);\n extern int pod_type_p\t\t\t\t(const_tree);\n extern bool class_tmpl_impl_spec_p\t\t(const_tree);\n extern int zero_init_p\t\t\t\t(const_tree);\n-extern tree canonical_type_variant\t\t(tree);\n+extern tree strip_typedefs\t\t\t(tree);\n extern tree copy_binfo\t\t\t\t(tree, tree, tree,\n \t\t\t\t\t\t tree *, int);\n extern int member_p\t\t\t\t(const_tree);"}, {"sha": "596e81c9cceed433f6bde4db46fdab14eebc0a27", "filename": "gcc/cp/cvt.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cd41d410da230dafae73a791281ef058c06a6c72/gcc%2Fcp%2Fcvt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cd41d410da230dafae73a791281ef058c06a6c72/gcc%2Fcp%2Fcvt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcvt.c?ref=cd41d410da230dafae73a791281ef058c06a6c72", "patch": "@@ -508,7 +508,7 @@ convert_from_reference (tree val)\n {\n   if (TREE_CODE (TREE_TYPE (val)) == REFERENCE_TYPE)\n     {\n-      tree t = canonical_type_variant (TREE_TYPE (TREE_TYPE (val)));\n+      tree t = TREE_TYPE (TREE_TYPE (val));\n       tree ref = build1 (INDIRECT_REF, t, val);\n \n        /* We *must* set TREE_READONLY when dereferencing a pointer to const,"}, {"sha": "0bfb28e8964834d70850a486e79f621c951c25e4", "filename": "gcc/cp/error.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cd41d410da230dafae73a791281ef058c06a6c72/gcc%2Fcp%2Ferror.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cd41d410da230dafae73a791281ef058c06a6c72/gcc%2Fcp%2Ferror.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ferror.c?ref=cd41d410da230dafae73a791281ef058c06a6c72", "patch": "@@ -322,7 +322,7 @@ dump_template_bindings (tree parms, tree args, VEC(tree,gc)* typenames)\n       t = tsubst (t, args, tf_none, NULL_TREE);\n       /* Strip typedefs.  We can't just use TFF_CHASE_TYPEDEF because\n \t pp_simple_type_specifier doesn't know about it.  */\n-      t = canonical_type_variant (t);\n+      t = strip_typedefs (t);\n       dump_type (t, TFF_PLAIN_IDENTIFIER);\n     }\n }"}, {"sha": "c905304eac6600b0adf951899f0eb4a60c034dd6", "filename": "gcc/cp/mangle.c", "status": "modified", "additions": 8, "deletions": 3, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cd41d410da230dafae73a791281ef058c06a6c72/gcc%2Fcp%2Fmangle.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cd41d410da230dafae73a791281ef058c06a6c72/gcc%2Fcp%2Fmangle.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fmangle.c?ref=cd41d410da230dafae73a791281ef058c06a6c72", "patch": "@@ -338,9 +338,14 @@ canonicalize_for_substitution (tree node)\n   /* For a TYPE_DECL, use the type instead.  */\n   if (TREE_CODE (node) == TYPE_DECL)\n     node = TREE_TYPE (node);\n-  if (TYPE_P (node))\n-    node = canonical_type_variant (node);\n-\n+  if (TYPE_P (node)\n+      && TYPE_CANONICAL (node) != node\n+      && TYPE_MAIN_VARIANT (node) != node)\n+      /* Here we want to strip the topmost typedef only.\n+         We need to do that so is_std_substitution can do proper\n+         name matching.  */\n+    node = cp_build_qualified_type (TYPE_MAIN_VARIANT (node),\n+                                    cp_type_quals (node));\n   return node;\n }\n "}, {"sha": "72ea5b2d74009c998d372b7019d19a3ccacf4a29", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cd41d410da230dafae73a791281ef058c06a6c72/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cd41d410da230dafae73a791281ef058c06a6c72/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=cd41d410da230dafae73a791281ef058c06a6c72", "patch": "@@ -5073,7 +5073,7 @@ convert_template_argument (tree parm,\n \t the typedef, which is confusing if those future uses do not\n \t themselves also use the typedef.  */\n       if (TYPE_P (val))\n-\tval = canonical_type_variant (val);\n+\tval = strip_typedefs (val);\n     }\n   else\n     {\n@@ -13675,7 +13675,7 @@ unify (tree tparms, tree targs, tree parm, tree arg, int strict)\n \t    return 1;\n \n \t  /* Strip typedefs as in convert_template_argument.  */\n-\t  arg = canonical_type_variant (arg);\n+\t  arg = strip_typedefs (arg);\n \t}\n \n       /* If ARG is a parameter pack or an expansion, we cannot unify"}, {"sha": "b40ef10d0e91d26784531eacedb5e53948064412", "filename": "gcc/cp/tree.c", "status": "modified", "additions": 100, "deletions": 8, "changes": 108, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cd41d410da230dafae73a791281ef058c06a6c72/gcc%2Fcp%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cd41d410da230dafae73a791281ef058c06a6c72/gcc%2Fcp%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftree.c?ref=cd41d410da230dafae73a791281ef058c06a6c72", "patch": "@@ -911,19 +911,111 @@ cp_build_qualified_type_real (tree type,\n   return result;\n }\n \n-/* Returns the canonical version of TYPE.  In other words, if TYPE is\n-   a typedef, returns the underlying type.  The cv-qualification of\n-   the type returned matches the type input; they will always be\n-   compatible types.  */\n+/* Builds a qualified variant of T that is not a typedef variant.\n+   E.g. consider the following declarations:\n+     typedef const int ConstInt;\n+     typedef ConstInt* PtrConstInt;\n+   If T is PtrConstInt, this function returns a type representing\n+     const int*.\n+   In other words, if T is a typedef, the function returns the underlying type.\n+   The cv-qualification and attributes of the type returned match the\n+   input type.\n+   They will always be compatible types.\n+   The returned type is built so that all of its subtypes\n+   recursively have their typedefs stripped as well.\n+\n+   This is different from just returning TYPE_CANONICAL (T)\n+   Because of several reasons:\n+    * If T is a type that needs structural equality\n+      its TYPE_CANONICAL (T) will be NULL.\n+    * TYPE_CANONICAL (T) desn't carry type attributes\n+      and looses template parameter names.   */\n \n tree\n-canonical_type_variant (tree t)\n+strip_typedefs (tree t)\n {\n-  if (t == error_mark_node)\n-    return error_mark_node;\n+  tree result = NULL, type = NULL, t0 = NULL;\n+\n+  if (!t || t == error_mark_node || t == TYPE_CANONICAL (t))\n+    return t;\n+\n+  gcc_assert (TYPE_P (t));\n+\n+  switch (TREE_CODE (t))\n+    {\n+    case POINTER_TYPE:\n+      type = strip_typedefs (TREE_TYPE (t));\n+      result = build_pointer_type (type);\n+      break;\n+    case REFERENCE_TYPE:\n+      type = strip_typedefs (TREE_TYPE (t));\n+      result = cp_build_reference_type (type, TYPE_REF_IS_RVALUE (t));\n+      break;\n+    case OFFSET_TYPE:\n+      t0 = strip_typedefs (TYPE_OFFSET_BASETYPE (t));\n+      type = strip_typedefs (TREE_TYPE (t));\n+      result = build_offset_type (t0, type);\n+      break;\n+    case RECORD_TYPE:\n+      if (TYPE_PTRMEMFUNC_P (t))\n+\t{\n+\t  t0 = strip_typedefs (TYPE_PTRMEMFUNC_FN_TYPE (t));\n+\t  result = build_ptrmemfunc_type (t0);\n+\t}\n+      break;\n+    case ARRAY_TYPE:\n+      type = strip_typedefs (TREE_TYPE (t));\n+      t0  = strip_typedefs (TYPE_DOMAIN (t));;\n+      result = build_cplus_array_type (type, t0);\n+      break;\n+    case FUNCTION_TYPE:\n+    case METHOD_TYPE:\n+      {\n+\ttree arg_types = NULL, arg_node, arg_type;\n+\tfor (arg_node = TYPE_ARG_TYPES (t);\n+\t     arg_node;\n+\t     arg_node = TREE_CHAIN (arg_node))\n+\t  {\n+\t    if (arg_node == void_list_node)\n+\t      break;\n+\t    arg_type = strip_typedefs (TREE_VALUE (arg_node));\n+\t    gcc_assert (arg_type);\n+\n+\t    arg_types =\n+\t      tree_cons (TREE_PURPOSE (arg_node), arg_type, arg_types);\n+\t  }\n+\n+\tif (arg_types)\n+\t  arg_types = nreverse (arg_types);\n+\n+\t/* A list of parameters not ending with an ellipsis\n+\t   must end with void_list_node.  */\n+\tif (arg_node)\n+\t  arg_types = chainon (arg_types, void_list_node);\n \n-  return cp_build_qualified_type (TYPE_MAIN_VARIANT (t), cp_type_quals (t));\n+\ttype = strip_typedefs (TREE_TYPE (t));\n+\tif (TREE_CODE (t) == METHOD_TYPE)\n+\t  {\n+\t    tree class_type = TREE_TYPE (TREE_VALUE (arg_types));\n+\t    gcc_assert (class_type);\n+\t    result =\n+\t      build_method_type_directly (class_type, type,\n+\t\t\t\t\t  TREE_CHAIN (arg_types));\n+\t  }\n+\telse\n+\t    result = build_function_type (type,\n+\t\t\t\t\t  arg_types);\n+      }\n+      break;\n+    default:\n+      break;\n+    }\n+\n+  if (!result)\n+      result = TYPE_MAIN_VARIANT (t);\n+  return cp_build_qualified_type (result, cp_type_quals (t));\n }\n+\n \f\n /* Makes a copy of BINFO and TYPE, which is to be inherited into a\n    graph dominated by T.  If BINFO is NULL, TYPE is a dependent base,"}, {"sha": "eb28a3d268e74876bdb7b4be44ef72dac8bef388", "filename": "gcc/cp/typeck.c", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cd41d410da230dafae73a791281ef058c06a6c72/gcc%2Fcp%2Ftypeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cd41d410da230dafae73a791281ef058c06a6c72/gcc%2Fcp%2Ftypeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftypeck.c?ref=cd41d410da230dafae73a791281ef058c06a6c72", "patch": "@@ -2494,12 +2494,8 @@ cp_build_indirect_ref (tree ptr, const char *errorstring,\n       /* [expr.unary.op]\n \n \t If the type of the expression is \"pointer to T,\" the type\n-\t of  the  result  is  \"T.\"\n-\n-\t We must use the canonical variant because certain parts of\n-\t the back end, like fold, do pointer comparisons between\n-\t types.  */\n-      tree t = canonical_type_variant (TREE_TYPE (type));\n+\t of  the  result  is  \"T.\"  */\n+      tree t = TREE_TYPE (type);\n \n       if (CONVERT_EXPR_P (ptr)\n           || TREE_CODE (ptr) == VIEW_CONVERT_EXPR)"}, {"sha": "9c6a2733c4b4bdba84268738be01443e4e7a74cc", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cd41d410da230dafae73a791281ef058c06a6c72/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cd41d410da230dafae73a791281ef058c06a6c72/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=cd41d410da230dafae73a791281ef058c06a6c72", "patch": "@@ -1,3 +1,15 @@\n+2009-05-28  Dodji Seketeli  <dodji@redhat.com>\n+\n+\tPR c++/39754\n+\t* g++.dg/template/canon-type-1.C: New test.\n+\t* g++.dg/template/canon-type-2.C: Likewise.\n+\t* g++.dg/template/canon-type-3.C: Likewise.\n+\t* g++.dg/template/canon-type-4.C: Likewise.\n+\t* g++.dg/template/canon-type-5.C: Likewise.\n+\t* g++.dg/template/canon-type-6.C: Likewise.\n+\t* g++.dg/template/canon-type-7.C: Likewise.\n+\n+\n 2009-05-28  Dave Korn  <dave.korn.cygwin@gmail.com>\n             Uros Bizjak  <ubizjak@gmail.com>\n             Danny Smith  <dansmister@gmail.com>"}, {"sha": "2a36dc0995191915b503e2a707465e5b72ea5a8b", "filename": "gcc/testsuite/g++.dg/template/canon-type-1.C", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cd41d410da230dafae73a791281ef058c06a6c72/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fcanon-type-1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cd41d410da230dafae73a791281ef058c06a6c72/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fcanon-type-1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fcanon-type-1.C?ref=cd41d410da230dafae73a791281ef058c06a6c72", "patch": "@@ -0,0 +1,18 @@\n+// Contributed by Dodji Seketeli <dodji@redhat.com>\n+// Origin PR c++/39754\n+// { dg-do \"compile\" }\n+\n+template < typename > struct A ;\n+template < typename T , typename = A < T > > struct B { } ;\n+template < class W , class > struct D\n+{\n+  typedef W X ;\n+  A<X*> a ;\n+};\n+\n+template < class Y > struct E\n+{\n+  B<Y*> b ;\n+} ;\n+E<int> e ;\n+"}, {"sha": "dd23ec5ea6d84cb564fa11659a06b1a2e6f932d1", "filename": "gcc/testsuite/g++.dg/template/canon-type-2.C", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cd41d410da230dafae73a791281ef058c06a6c72/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fcanon-type-2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cd41d410da230dafae73a791281ef058c06a6c72/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fcanon-type-2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fcanon-type-2.C?ref=cd41d410da230dafae73a791281ef058c06a6c72", "patch": "@@ -0,0 +1,18 @@\n+// Contributed by Dodji Seketeli <dodji@redhat.com>\n+// Origin PR c++/39754\n+// { dg-do \"compile\" }\n+\n+template < typename > struct A ;\n+template < typename T , typename = A < T > > struct B { } ;\n+template < class W , class > struct D\n+{\n+  typedef W X ;\n+  A< X()> a ;\n+};\n+\n+template < class Y > struct E\n+{\n+  B< Y()> b ;\n+};\n+E<int> e ;\n+"}, {"sha": "a43169addc5cb2d01ff34882c4dc497396558db9", "filename": "gcc/testsuite/g++.dg/template/canon-type-3.C", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cd41d410da230dafae73a791281ef058c06a6c72/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fcanon-type-3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cd41d410da230dafae73a791281ef058c06a6c72/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fcanon-type-3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fcanon-type-3.C?ref=cd41d410da230dafae73a791281ef058c06a6c72", "patch": "@@ -0,0 +1,20 @@\n+// Contributed by Dodji Seketeli <dodji@redhat.com>\n+// Origin PR c++/39754\n+// { dg-do \"compile\" }\n+\n+template<typename> struct A ;\n+template<typename T , typename = A<T> > struct B { } ;\n+template<class W , class > struct D\n+{\n+  typedef W X ;\n+  typedef X (FP) ();\n+  A<FP&> a ;\n+} ;\n+\n+template < class Y > struct E\n+{\n+  typedef Y (FP) ();\n+  B<FP&> b ;\n+} ;\n+E < int > e ;\n+"}, {"sha": "ec5e1e6a200d56d58cc1fee6f5e294d7fca637fe", "filename": "gcc/testsuite/g++.dg/template/canon-type-4.C", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cd41d410da230dafae73a791281ef058c06a6c72/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fcanon-type-4.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cd41d410da230dafae73a791281ef058c06a6c72/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fcanon-type-4.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fcanon-type-4.C?ref=cd41d410da230dafae73a791281ef058c06a6c72", "patch": "@@ -0,0 +1,22 @@\n+// Contributed by Dodji Seketeli <dodji@redhat.com>\n+// Origin PR c++/39754\n+// { dg-do \"compile\" }\n+\n+template<typename> struct A ;\n+template<typename T ,typename = A<T> > struct B { } ;\n+\n+template<class W, class>\n+struct D\n+{\n+  typedef W X;\n+  A<X[2]> a;\n+} ;\n+\n+template<class Y>\n+struct E\n+{\n+  B<Y[2]> b;\n+};\n+\n+E < int > e;\n+"}, {"sha": "7331c3086fb7485d7e28cf3cce7c2119d6b0b955", "filename": "gcc/testsuite/g++.dg/template/canon-type-5.C", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cd41d410da230dafae73a791281ef058c06a6c72/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fcanon-type-5.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cd41d410da230dafae73a791281ef058c06a6c72/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fcanon-type-5.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fcanon-type-5.C?ref=cd41d410da230dafae73a791281ef058c06a6c72", "patch": "@@ -0,0 +1,22 @@\n+// Contributed by Dodji Seketeli <dodji@redhat.com>\n+// Origin PR c++/39754\n+// { dg-do \"compile\" }\n+\n+struct Foo {};\n+template<typename> struct A ;\n+template<typename T ,typename = A<T> > struct B { } ;\n+\n+template<class W, class>\n+struct D\n+{\n+  typedef W X ;\n+  A<X Foo::*> a ;\n+} ;\n+\n+template<class Y>\n+struct E\n+{\n+  B<Y Foo::*> b ;\n+} ;\n+E < int > e ;\n+"}, {"sha": "5065c395dc434c57b45066b4068ffafa26cd2b3c", "filename": "gcc/testsuite/g++.dg/template/canon-type-6.C", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cd41d410da230dafae73a791281ef058c06a6c72/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fcanon-type-6.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cd41d410da230dafae73a791281ef058c06a6c72/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fcanon-type-6.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fcanon-type-6.C?ref=cd41d410da230dafae73a791281ef058c06a6c72", "patch": "@@ -0,0 +1,22 @@\n+// Contributed by Dodji Seketeli <dodji@redhat.com>\n+// Origin PR c++/39754\n+// { dg-do \"compile\" }\n+\n+struct Foo {};\n+template<typename> struct A ;\n+template<typename T ,typename = A<T> > struct B { } ;\n+\n+template<class W, class>\n+struct D\n+{\n+  typedef W X;\n+  A<void (Foo::*) (X)> a;\n+} ;\n+\n+template<class Y>\n+struct E\n+{\n+  B<void (Foo::*) (Y)> b;\n+};\n+E < int > e ;\n+"}, {"sha": "80e8f87e83450679f282102b27a4cb589ae0cf1b", "filename": "gcc/testsuite/g++.dg/template/canon-type-7.C", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cd41d410da230dafae73a791281ef058c06a6c72/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fcanon-type-7.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cd41d410da230dafae73a791281ef058c06a6c72/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fcanon-type-7.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fcanon-type-7.C?ref=cd41d410da230dafae73a791281ef058c06a6c72", "patch": "@@ -0,0 +1,21 @@\n+// Contributed by Dodji Seketeli <dodji@redhat.com>\n+// Origin PR c++/39754\n+// { dg-do \"compile\" }\n+\n+struct Foo {};\n+template<typename> struct A ;\n+template<typename T ,typename = A<T> > struct B { } ;\n+\n+template<class W, class>\n+struct D\n+{\n+  typedef W X;\n+  A<X (Foo::*) (X)> a ;\n+};\n+\n+template<class Y>\n+struct E\n+{\n+  B<Y (Foo::*) (Y)> b ;\n+};\n+E<int> e ;"}]}