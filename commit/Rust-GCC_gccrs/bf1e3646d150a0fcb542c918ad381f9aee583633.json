{"sha": "bf1e3646d150a0fcb542c918ad381f9aee583633", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmYxZTM2NDZkMTUwYTBmY2I1NDJjOTE4YWQzODFmOWFlZTU4MzYzMw==", "commit": {"author": {"name": "James Greenhalgh", "email": "james.greenhalgh@arm.com", "date": "2016-11-24T18:14:36Z"}, "committer": {"name": "James Greenhalgh", "email": "jgreenhalgh@gcc.gnu.org", "date": "2016-11-24T18:14:36Z"}, "message": "[Patch AArch64 11/17] Add floatdihf2 and floatunsdihf2 patterns\n\ngcc/\n\n\t* config/aarch64/aarch64.md (<optab>sihf2): Convert to expand.\n\t(<optab>dihf2): Likewise.\n\t(aarch64_fp16_<optab><mode>hf2): New.\n\ngcc/testsuite/\n\n\t* gcc.target/aarch64/floatdihf2_1.c: New.\n\nFrom-SVN: r242843", "tree": {"sha": "dc6f4d854dc0606b3243ce9d9d162180eb0edc5e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/dc6f4d854dc0606b3243ce9d9d162180eb0edc5e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/bf1e3646d150a0fcb542c918ad381f9aee583633", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bf1e3646d150a0fcb542c918ad381f9aee583633", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bf1e3646d150a0fcb542c918ad381f9aee583633", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bf1e3646d150a0fcb542c918ad381f9aee583633/comments", "author": {"login": "jgreenhalgh-arm", "id": 6104025, "node_id": "MDQ6VXNlcjYxMDQwMjU=", "avatar_url": "https://avatars.githubusercontent.com/u/6104025?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jgreenhalgh-arm", "html_url": "https://github.com/jgreenhalgh-arm", "followers_url": "https://api.github.com/users/jgreenhalgh-arm/followers", "following_url": "https://api.github.com/users/jgreenhalgh-arm/following{/other_user}", "gists_url": "https://api.github.com/users/jgreenhalgh-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/jgreenhalgh-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jgreenhalgh-arm/subscriptions", "organizations_url": "https://api.github.com/users/jgreenhalgh-arm/orgs", "repos_url": "https://api.github.com/users/jgreenhalgh-arm/repos", "events_url": "https://api.github.com/users/jgreenhalgh-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/jgreenhalgh-arm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "e210b51b58d1431b7f710e7eac00bd9c128632b3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e210b51b58d1431b7f710e7eac00bd9c128632b3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e210b51b58d1431b7f710e7eac00bd9c128632b3"}], "stats": {"total": 101, "additions": 100, "deletions": 1}, "files": [{"sha": "f142c469acb1f77994c0d6618097a2d8d693c7ed", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bf1e3646d150a0fcb542c918ad381f9aee583633/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bf1e3646d150a0fcb542c918ad381f9aee583633/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=bf1e3646d150a0fcb542c918ad381f9aee583633", "patch": "@@ -1,3 +1,9 @@\n+2016-11-24  James Greenhalgh  <james.greenhalgh@arm.com>\n+\n+\t* config/aarch64/aarch64.md (<optab>sihf2): Convert to expand.\n+\t(<optab>dihf2): Likewise.\n+\t(aarch64_fp16_<optab><mode>hf2): New.\n+\n 2016-11-24  Alexander Monakov  <amonakov@ispras.ru>\n \n \tPR target/67822"}, {"sha": "26982f67ee383f41f1002ddead8273483ac4d159", "filename": "gcc/config/aarch64/aarch64.md", "status": "modified", "additions": 55, "deletions": 1, "changes": 56, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bf1e3646d150a0fcb542c918ad381f9aee583633/gcc%2Fconfig%2Faarch64%2Faarch64.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bf1e3646d150a0fcb542c918ad381f9aee583633/gcc%2Fconfig%2Faarch64%2Faarch64.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64.md?ref=bf1e3646d150a0fcb542c918ad381f9aee583633", "patch": "@@ -4652,14 +4652,68 @@\n   [(set_attr \"type\" \"f_cvti2f\")]\n )\n \n-(define_insn \"<optab><mode>hf2\"\n+;; If we do not have ARMv8.2-A 16-bit floating point extensions, the\n+;; midend will arrange for an SImode conversion to HFmode to first go\n+;; through DFmode, then to HFmode.  But first it will try converting\n+;; to DImode then down, which would match our DImode pattern below and\n+;; give very poor code-generation.  So, we must provide our own emulation\n+;; of the mid-end logic.\n+\n+(define_insn \"aarch64_fp16_<optab><mode>hf2\"\n   [(set (match_operand:HF 0 \"register_operand\" \"=w\")\n \t(FLOATUORS:HF (match_operand:GPI 1 \"register_operand\" \"r\")))]\n   \"TARGET_FP_F16INST\"\n   \"<su_optab>cvtf\\t%h0, %<w>1\"\n   [(set_attr \"type\" \"f_cvti2f\")]\n )\n \n+(define_expand \"<optab>sihf2\"\n+  [(set (match_operand:HF 0 \"register_operand\")\n+\t(FLOATUORS:HF (match_operand:SI 1 \"register_operand\")))]\n+  \"TARGET_FLOAT\"\n+{\n+  if (TARGET_FP_F16INST)\n+    emit_insn (gen_aarch64_fp16_<optab>sihf2 (operands[0], operands[1]));\n+  else\n+    {\n+      rtx convert_target = gen_reg_rtx (DFmode);\n+      emit_insn (gen_<optab>sidf2 (convert_target, operands[1]));\n+      emit_insn (gen_truncdfhf2 (operands[0], convert_target));\n+    }\n+  DONE;\n+}\n+)\n+\n+;; For DImode there is no wide enough floating-point mode that we\n+;; can convert through natively (TFmode would work, but requires a library\n+;; call).  However, we know that any value >= 65504 will be rounded\n+;; to infinity on conversion.  This is well within the range of SImode, so\n+;; we can:\n+;;   Saturate to SImode.\n+;;   Convert from that to DFmode\n+;;   Convert from that to HFmode (phew!).\n+;; Note that the saturation to SImode requires the SIMD extensions.  If\n+;; we ever need to provide this pattern where the SIMD extensions are not\n+;; available, we would need a different approach.\n+\n+(define_expand \"<optab>dihf2\"\n+  [(set (match_operand:HF 0 \"register_operand\")\n+\t(FLOATUORS:HF (match_operand:DI 1 \"register_operand\")))]\n+  \"TARGET_FLOAT && (TARGET_FP_F16INST || TARGET_SIMD)\"\n+{\n+  if (TARGET_FP_F16INST)\n+    emit_insn (gen_aarch64_fp16_<optab>dihf2 (operands[0], operands[1]));\n+  else\n+    {\n+      rtx sat_target = gen_reg_rtx (SImode);\n+      emit_insn (gen_aarch64_<su_optab>qmovndi (sat_target, operands[1]));\n+      emit_insn (gen_<optab>sihf2 (operands[0], sat_target));\n+    }\n+\n+  DONE;\n+}\n+)\n+\n ;; Convert between fixed-point and floating-point (scalar modes)\n \n (define_insn \"<FCVT_F2FIXED:fcvt_fixed_insn><GPF:mode>3\""}, {"sha": "12a17c9a395e6a1f4c3514c465a31be2cb123e16", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bf1e3646d150a0fcb542c918ad381f9aee583633/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bf1e3646d150a0fcb542c918ad381f9aee583633/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=bf1e3646d150a0fcb542c918ad381f9aee583633", "patch": "@@ -1,3 +1,7 @@\n+2016-11-24  James Greenhalgh  <james.greenhalgh@arm.com>\n+\n+\t* gcc.target/aarch64/floatdihf2_1.c: New.\n+\n 2016-11-24  Kyrylo Tkachov  <kyrylo.tkachov@arm.com>\n \n \tPR target/48863"}, {"sha": "9eaa4ba693e6b53ec8fd56d5f675346197319801", "filename": "gcc/testsuite/gcc.target/aarch64/floatdihf2_1.c", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bf1e3646d150a0fcb542c918ad381f9aee583633/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Ffloatdihf2_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bf1e3646d150a0fcb542c918ad381f9aee583633/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Ffloatdihf2_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Ffloatdihf2_1.c?ref=bf1e3646d150a0fcb542c918ad381f9aee583633", "patch": "@@ -0,0 +1,35 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2\" } */\n+\n+/* Test that conversion from 32-bit and 64-bit integers can be done\n+   without a call to the support library.  */\n+\n+#pragma GCC target (\"arch=armv8.2-a+nofp16\")\n+\n+__fp16\n+foo (int x)\n+{\n+  return x;\n+}\n+\n+__fp16\n+bar (unsigned int x)\n+{\n+  return x;\n+}\n+\n+__fp16\n+fool (long long x)\n+{\n+  return x;\n+}\n+\n+__fp16\n+barl (unsigned long long x)\n+{\n+  return x;\n+}\n+\n+\n+/* { dg-final { scan-assembler-not \"__float\\\\\\[ds\\\\\\]ihf2\" } } */\n+/* { dg-final { scan-assembler-not \"__floatun\\\\\\[ds\\\\\\]ihf2\" } } */"}]}