{"sha": "b04c90638b1b3042078fda9582f3b3008ce51bc1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjA0YzkwNjM4YjFiMzA0MjA3OGZkYTk1ODJmM2IzMDA4Y2U1MWJjMQ==", "commit": {"author": {"name": "Alan Modra", "email": "amodra@bigpond.net.au", "date": "2006-01-20T00:42:29Z"}, "committer": {"name": "Alan Modra", "email": "amodra@gcc.gnu.org", "date": "2006-01-20T00:42:29Z"}, "message": "libgcc2.c (__floatdisf, [...]): Don't use IBM Extended Double TFmode.\n\n\t* libgcc2.c (__floatdisf, __floatdidf): Don't use IBM Extended\n\tDouble TFmode.\n\t(__floatundisf, __floatundidf): Likewise.\n\t* libgcc2.h (IS_IBM_EXTENDED): Define.\n\nFrom-SVN: r110004", "tree": {"sha": "f6f5efb500cbb0ac5e1911492d4637b9e6fd58d5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f6f5efb500cbb0ac5e1911492d4637b9e6fd58d5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b04c90638b1b3042078fda9582f3b3008ce51bc1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b04c90638b1b3042078fda9582f3b3008ce51bc1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b04c90638b1b3042078fda9582f3b3008ce51bc1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b04c90638b1b3042078fda9582f3b3008ce51bc1/comments", "author": null, "committer": null, "parents": [{"sha": "e9a8eb89de4a63575154ba3fe25a2597b5552f9c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e9a8eb89de4a63575154ba3fe25a2597b5552f9c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e9a8eb89de4a63575154ba3fe25a2597b5552f9c"}], "stats": {"total": 33, "additions": 31, "deletions": 2}, "files": [{"sha": "8aaec41158b25b6d80c601eabef2523b01b7d55c", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b04c90638b1b3042078fda9582f3b3008ce51bc1/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b04c90638b1b3042078fda9582f3b3008ce51bc1/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=b04c90638b1b3042078fda9582f3b3008ce51bc1", "patch": "@@ -1,3 +1,10 @@\n+2006-01-20  Alan Modra  <amodra@bigpond.net.au>\n+\n+\t* libgcc2.c (__floatdisf, __floatdidf): Don't use IBM Extended\n+\tDouble TFmode.\n+\t(__floatundisf, __floatundidf): Likewise.\n+\t* libgcc2.h (IS_IBM_EXTENDED): Define.\n+\n 2006-01-19  DJ Delorie  <dj@redhat.com>\n \n \t* config/m32c/m32c.h (REG_ALLOC_ORDER): Define."}, {"sha": "97717a428c92740b3bbc644e6c612bea4481bd60", "filename": "gcc/libgcc2.c", "status": "modified", "additions": 16, "deletions": 2, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b04c90638b1b3042078fda9582f3b3008ce51bc1/gcc%2Flibgcc2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b04c90638b1b3042078fda9582f3b3008ce51bc1/gcc%2Flibgcc2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flibgcc2.c?ref=b04c90638b1b3042078fda9582f3b3008ce51bc1", "patch": "@@ -1371,7 +1371,14 @@ __floatunditf (UDWtype u)\n #if (defined(L_floatdisf) && LIBGCC2_HAS_SF_MODE)\t\\\n      || (defined(L_floatdidf) && LIBGCC2_HAS_DF_MODE)\n #define DI_SIZE (W_TYPE_SIZE * 2)\n-#define F_MODE_OK(SIZE) (SIZE < DI_SIZE && SIZE > (DI_SIZE - SIZE + FSSIZE))\n+#define F_MODE_OK(SIZE) \\\n+  (SIZE < DI_SIZE\t\t\t\t\t\t\t\\\n+   && SIZE > (DI_SIZE - SIZE + FSSIZE)\t\t\t\t\t\\\n+   /* Don't use IBM Extended Double TFmode for TI->SF calculations.\t\\\n+      The conversion from long double to float suffers from double\t\\\n+      rounding, because we convert via double.  In any case, the\t\\\n+      fallback code is faster.  */\t\t\t\t\t\\\n+   && !IS_IBM_EXTENDED (SIZE))\n #if defined(L_floatdisf)\n #define FUNC __floatdisf\n #define FSTYPE SFtype\n@@ -1476,7 +1483,14 @@ FUNC (DWtype u)\n #if (defined(L_floatundisf) && LIBGCC2_HAS_SF_MODE)\t\\\n      || (defined(L_floatundidf) && LIBGCC2_HAS_DF_MODE)\n #define DI_SIZE (W_TYPE_SIZE * 2)\n-#define F_MODE_OK(SIZE) (SIZE < DI_SIZE && SIZE > (DI_SIZE - SIZE + FSSIZE))\n+#define F_MODE_OK(SIZE) \\\n+  (SIZE < DI_SIZE\t\t\t\t\t\t\t\\\n+   && SIZE > (DI_SIZE - SIZE + FSSIZE)\t\t\t\t\t\\\n+   /* Don't use IBM Extended Double TFmode for TI->SF calculations.\t\\\n+      The conversion from long double to float suffers from double\t\\\n+      rounding, because we convert via double.  In any case, the\t\\\n+      fallback code is faster.  */\t\t\t\t\t\\\n+   && !IS_IBM_EXTENDED (SIZE))\n #if defined(L_floatundisf)\n #define FUNC __floatundisf\n #define FSTYPE SFtype"}, {"sha": "f24854f97ed5f1cc3dd0a95b6d197d5179b6840d", "filename": "gcc/libgcc2.h", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b04c90638b1b3042078fda9582f3b3008ce51bc1/gcc%2Flibgcc2.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b04c90638b1b3042078fda9582f3b3008ce51bc1/gcc%2Flibgcc2.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flibgcc2.h?ref=b04c90638b1b3042078fda9582f3b3008ce51bc1", "patch": "@@ -117,6 +117,14 @@ extern short int __get_eh_table_version (struct exception_descriptor *);\n #endif\n #endif\n \n+/* FIXME: This #ifdef probably should be removed, ie. enable the test\n+   for mips too.  */\n+#ifdef __powerpc__\n+#define IS_IBM_EXTENDED(SIZE) (SIZE == 106)\n+#else\n+#define IS_IBM_EXTENDED(SIZE) 0\n+#endif\n+\n #ifndef MIN_UNITS_PER_WORD\n #define MIN_UNITS_PER_WORD UNITS_PER_WORD\n #endif"}]}