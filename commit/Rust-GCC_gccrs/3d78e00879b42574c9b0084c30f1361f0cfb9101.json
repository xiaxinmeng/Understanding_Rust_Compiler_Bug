{"sha": "3d78e00879b42574c9b0084c30f1361f0cfb9101", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2Q3OGUwMDg3OWI0MjU3NGM5YjAwODRjMzBmMTM2MWYwY2ZiOTEwMQ==", "commit": {"author": {"name": "Martin Liska", "email": "mliska@suse.cz", "date": "2018-08-27T12:34:52Z"}, "committer": {"name": "Martin Liska", "email": "marxin@gcc.gnu.org", "date": "2018-08-27T12:34:52Z"}, "message": "Come up with fndecl_built_in_p.\n\n2018-08-27  Martin Liska  <mliska@suse.cz>\n\n\t* builtins.h (is_builtin_fn): Remove and fndecl_built_in_p.\n\t* builtins.c (is_builtin_fn): Likewise.\n\t* attribs.c (diag_attr_exclusions): Use new function\n        fndecl_built_in_p and remove check for FUNCTION_DECL if\n        possible.\n\t(builtin_mathfn_code): Likewise.\n\t(fold_builtin_expect): Likewise.\n\t(fold_call_expr): Likewise.\n\t(fold_builtin_call_array): Likewise.\n\t(fold_call_stmt): Likewise.\n\t(set_builtin_user_assembler_name): Likewise.\n\t(is_simple_builtin): Likewise.\n\t* calls.c (gimple_alloca_call_p): Likewise.\n\t(maybe_warn_nonstring_arg): Likewise.\n\t* cfgexpand.c (expand_call_stmt): Likewise.\n\t* cgraph.c (cgraph_update_edges_for_call_stmt_node): Likewise.\n\t(cgraph_edge::verify_corresponds_to_fndecl): Likewise.\n\t(cgraph_node::verify_node): Likewise.\n\t* cgraphclones.c (build_function_decl_skip_args): Likewise.\n\t(cgraph_node::create_clone): Likewise.\n\t* config/arm/arm.c (arm_insert_attributes): Likewise.\n\t* config/i386/i386.c (ix86_gimple_fold_builtin): Likewise.\n\t* dse.c (scan_insn): Likewise.\n\t* expr.c (expand_expr_real_1): Likewise.\n\t* fold-const.c (operand_equal_p): Likewise.\n\t(fold_binary_loc): Likewise.\n\t* gimple-fold.c (gimple_fold_stmt_to_constant_1): Likewise.\n\t* gimple-low.c (lower_stmt): Likewise.\n\t* gimple-pretty-print.c (dump_gimple_call): Likewise.\n\t* gimple-ssa-warn-restrict.c (wrestrict_dom_walker::check_call): Likewise.\n\t* gimple.c (gimple_build_call_from_tree): Likewise.\n\t(gimple_call_builtin_p): Likewise.\n\t(gimple_call_combined_fn): Likewise.\n\t* gimplify.c (gimplify_call_expr): Likewise.\n\t(gimple_boolify): Likewise.\n\t(gimplify_modify_expr): Likewise.\n\t(gimplify_addr_expr): Likewise.\n\t* hsa-gen.c (gen_hsa_insns_for_call): Likewise.\n\t* ipa-cp.c (determine_versionability): Likewise.\n\t* ipa-fnsummary.c (compute_fn_summary): Likewise.\n\t* ipa-param-manipulation.c (ipa_modify_formal_parameters): Likewise.\n\t* ipa-split.c (visit_bb): Likewise.\n\t(split_function): Likewise.\n\t* ipa-visibility.c (cgraph_externally_visible_p): Likewise.\n\t* lto-cgraph.c (input_node): Likewise.\n\t* lto-streamer-out.c (write_symbol): Likewise.\n\t* omp-low.c (setjmp_or_longjmp_p): Likewise.\n\t(lower_omp_1): Likewise.\n\t* predict.c (strip_predict_hints): Likewise.\n\t* print-tree.c (print_node): Likewise.\n\t* symtab.c (symtab_node::output_to_lto_symbol_table_p): Likewise.\n\t* trans-mem.c (is_tm_irrevocable): Likewise.\n\t(is_tm_load): Likewise.\n\t(is_tm_simple_load): Likewise.\n\t(is_tm_store): Likewise.\n\t(is_tm_simple_store): Likewise.\n\t(is_tm_abort): Likewise.\n\t(tm_region_init_1): Likewise.\n\t* tree-call-cdce.c (gen_shrink_wrap_conditions): Likewise.\n\t* tree-cfg.c (verify_gimple_call): Likewise.\n\t(move_stmt_r): Likewise.\n\t(stmt_can_terminate_bb_p): Likewise.\n\t* tree-eh.c (lower_eh_constructs_2): Likewise.\n\t* tree-if-conv.c (if_convertible_stmt_p): Likewise.\n\t* tree-inline.c (remap_gimple_stmt): Likewise.\n\t(copy_bb): Likewise.\n\t(estimate_num_insns): Likewise.\n\t(fold_marked_statements): Likewise.\n\t* tree-sra.c (scan_function): Likewise.\n\t* tree-ssa-ccp.c (surely_varying_stmt_p): Likewise.\n\t(optimize_stack_restore): Likewise.\n\t(pass_fold_builtins::execute): Likewise.\n\t* tree-ssa-dce.c (mark_stmt_if_obviously_necessary): Likewise.\n\t(mark_all_reaching_defs_necessary_1): Likewise.\n\t* tree-ssa-dom.c (dom_opt_dom_walker::optimize_stmt): Likewise.\n\t* tree-ssa-forwprop.c (simplify_builtin_call): Likewise.\n\t(pass_forwprop::execute): Likewise.\n\t* tree-ssa-loop-im.c (stmt_cost): Likewise.\n\t* tree-ssa-math-opts.c (pass_cse_reciprocals::execute): Likewise.\n\t* tree-ssa-sccvn.c (fully_constant_vn_reference_p): Likewise.\n\t* tree-ssa-strlen.c (get_string_length): Likewise.\n\t* tree-ssa-structalias.c (handle_lhs_call): Likewise.\n\t(find_func_aliases_for_call): Likewise.\n\t* tree-ssa-ter.c (find_replaceable_in_bb): Likewise.\n\t* tree-stdarg.c (optimize_va_list_gpr_fpr_size): Likewise.\n\t* tree-tailcall.c (find_tail_calls): Likewise.\n\t* tree.c (need_assembler_name_p): Likewise.\n\t(free_lang_data_in_decl): Likewise.\n\t(get_call_combined_fn): Likewise.\n\t* ubsan.c (is_ubsan_builtin_p): Likewise.\n\t* varasm.c (incorporeal_function_p): Likewise.\n\t* tree.h (DECL_BUILT_IN): Remove and replace with\n        fndecl_built_in_p.\n\t(DECL_BUILT_IN_P): Transfort to fndecl_built_in_p.\n\t(fndecl_built_in_p): New.\n2018-08-27  Martin Liska  <mliska@suse.cz>\n\n\t* gcc-interface/decl.c (update_profile): Use new function\n        fndecl_built_in_p and remove check for FUNCTION_DECL if\n        possible.\n\t* gcc-interface/gigi.h (call_is_atomic_load): Likewise.\n\t* gcc-interface/utils.c (gnat_pushdecl): Likewise.\n2018-08-27  Martin Liska  <mliska@suse.cz>\n\n\t* c-common.c (check_function_restrict): Use new function\n        fndecl_built_in_p and remove check for FUNCTION_DECL if\n        possible.\n\t(check_builtin_function_arguments): Likewise.\n\t(reject_gcc_builtin): Likewise.\n\t* c-warn.c (sizeof_pointer_memaccess_warning): Likewise.\n2018-08-27  Martin Liska  <mliska@suse.cz>\n\n\t* c-decl.c (locate_old_decl): Use new function\n        fndecl_built_in_p and remove check for FUNCTION_DECL if\n        possible.\n\t(diagnose_mismatched_decls): Likewise.\n\t(merge_decls): Likewise.\n\t(warn_if_shadowing): Likewise.\n\t(pushdecl): Likewise.\n\t(implicitly_declare): Likewise.\n\t* c-parser.c (c_parser_postfix_expression_after_primary): Likewise.\n\t* c-tree.h (C_DECL_ISNT_PROTOTYPE): Likewise.\n\t* c-typeck.c (build_function_call_vec): Likewise.\n\t(convert_arguments): Likewise.\n2018-08-27  Martin Liska  <mliska@suse.cz>\n\n\t* call.c (build_call_a): Use new function\n        fndecl_built_in_p and remove check for FUNCTION_DECL if\n        possible.\n\t(build_cxx_call): Likewise.\n\t* constexpr.c (constexpr_fn_retval): Likewise.\n\t(cxx_eval_builtin_function_call): Likewise.\n\t(cxx_eval_call_expression): Likewise.\n\t(potential_constant_expression_1): Likewise.\n\t* cp-gimplify.c (cp_gimplify_expr): Likewise.\n\t(cp_fold): Likewise.\n\t* decl.c (decls_match): Likewise.\n\t(validate_constexpr_redeclaration): Likewise.\n\t(duplicate_decls): Likewise.\n\t(make_rtl_for_nonlocal_decl): Likewise.\n\t* name-lookup.c (consider_binding_level): Likewise.\n\t(cp_emit_debug_info_for_using): Likewise.\n\t* semantics.c (finish_call_expr): Likewise.\n\t* tree.c (builtin_valid_in_constant_expr_p): Likewise.\n2018-08-27  Martin Liska  <mliska@suse.cz>\n\n\t* go-gcc.cc (Gcc_backend::call_expression): Use new function\n        fndecl_built_in_p and remove check for FUNCTION_DECL if\n        possible.\n2018-08-27  Martin Liska  <mliska@suse.cz>\n\n\t* lto-lang.c (handle_const_attribute): Use new function\n        fndecl_built_in_p and remove check for FUNCTION_DECL if\n        possible.\n\t* lto-symtab.c (lto_symtab_merge_p): Likewise.\n\t(lto_symtab_merge_decls_1): Likewise.\n\t(lto_symtab_merge_symbols): Likewise.\n\t* lto.c (lto_maybe_register_decl): Likewise.\n\t(read_cgraph_and_symbols): Likewise.\n\nFrom-SVN: r263880", "tree": {"sha": "bc8f9a510c36fa862ab02298af03a506c99fdda5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/bc8f9a510c36fa862ab02298af03a506c99fdda5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3d78e00879b42574c9b0084c30f1361f0cfb9101", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3d78e00879b42574c9b0084c30f1361f0cfb9101", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3d78e00879b42574c9b0084c30f1361f0cfb9101", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3d78e00879b42574c9b0084c30f1361f0cfb9101/comments", "author": {"login": "marxin", "id": 2658545, "node_id": "MDQ6VXNlcjI2NTg1NDU=", "avatar_url": "https://avatars.githubusercontent.com/u/2658545?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marxin", "html_url": "https://github.com/marxin", "followers_url": "https://api.github.com/users/marxin/followers", "following_url": "https://api.github.com/users/marxin/following{/other_user}", "gists_url": "https://api.github.com/users/marxin/gists{/gist_id}", "starred_url": "https://api.github.com/users/marxin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marxin/subscriptions", "organizations_url": "https://api.github.com/users/marxin/orgs", "repos_url": "https://api.github.com/users/marxin/repos", "events_url": "https://api.github.com/users/marxin/events{/privacy}", "received_events_url": "https://api.github.com/users/marxin/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "bb79aba479cf228832b8d2c6bfb8bf420a1f6f4a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bb79aba479cf228832b8d2c6bfb8bf420a1f6f4a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bb79aba479cf228832b8d2c6bfb8bf420a1f6f4a"}], "stats": {"total": 648, "additions": 391, "deletions": 257}, "files": [{"sha": "459bcaddc079245cff4f99a1af9f2f66580eef47", "filename": "gcc/ChangeLog", "status": "modified", "additions": 98, "deletions": 0, "changes": 98, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d78e00879b42574c9b0084c30f1361f0cfb9101/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d78e00879b42574c9b0084c30f1361f0cfb9101/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=3d78e00879b42574c9b0084c30f1361f0cfb9101", "patch": "@@ -1,3 +1,101 @@\n+2018-08-27  Martin Liska  <mliska@suse.cz>\n+\n+\t* builtins.h (is_builtin_fn): Remove and fndecl_built_in_p.\n+\t* builtins.c (is_builtin_fn): Likewise.\n+\t* attribs.c (diag_attr_exclusions): Use new function\n+        fndecl_built_in_p and remove check for FUNCTION_DECL if\n+        possible.\n+\t(builtin_mathfn_code): Likewise.\n+\t(fold_builtin_expect): Likewise.\n+\t(fold_call_expr): Likewise.\n+\t(fold_builtin_call_array): Likewise.\n+\t(fold_call_stmt): Likewise.\n+\t(set_builtin_user_assembler_name): Likewise.\n+\t(is_simple_builtin): Likewise.\n+\t* calls.c (gimple_alloca_call_p): Likewise.\n+\t(maybe_warn_nonstring_arg): Likewise.\n+\t* cfgexpand.c (expand_call_stmt): Likewise.\n+\t* cgraph.c (cgraph_update_edges_for_call_stmt_node): Likewise.\n+\t(cgraph_edge::verify_corresponds_to_fndecl): Likewise.\n+\t(cgraph_node::verify_node): Likewise.\n+\t* cgraphclones.c (build_function_decl_skip_args): Likewise.\n+\t(cgraph_node::create_clone): Likewise.\n+\t* config/arm/arm.c (arm_insert_attributes): Likewise.\n+\t* config/i386/i386.c (ix86_gimple_fold_builtin): Likewise.\n+\t* dse.c (scan_insn): Likewise.\n+\t* expr.c (expand_expr_real_1): Likewise.\n+\t* fold-const.c (operand_equal_p): Likewise.\n+\t(fold_binary_loc): Likewise.\n+\t* gimple-fold.c (gimple_fold_stmt_to_constant_1): Likewise.\n+\t* gimple-low.c (lower_stmt): Likewise.\n+\t* gimple-pretty-print.c (dump_gimple_call): Likewise.\n+\t* gimple-ssa-warn-restrict.c (wrestrict_dom_walker::check_call): Likewise.\n+\t* gimple.c (gimple_build_call_from_tree): Likewise.\n+\t(gimple_call_builtin_p): Likewise.\n+\t(gimple_call_combined_fn): Likewise.\n+\t* gimplify.c (gimplify_call_expr): Likewise.\n+\t(gimple_boolify): Likewise.\n+\t(gimplify_modify_expr): Likewise.\n+\t(gimplify_addr_expr): Likewise.\n+\t* hsa-gen.c (gen_hsa_insns_for_call): Likewise.\n+\t* ipa-cp.c (determine_versionability): Likewise.\n+\t* ipa-fnsummary.c (compute_fn_summary): Likewise.\n+\t* ipa-param-manipulation.c (ipa_modify_formal_parameters): Likewise.\n+\t* ipa-split.c (visit_bb): Likewise.\n+\t(split_function): Likewise.\n+\t* ipa-visibility.c (cgraph_externally_visible_p): Likewise.\n+\t* lto-cgraph.c (input_node): Likewise.\n+\t* lto-streamer-out.c (write_symbol): Likewise.\n+\t* omp-low.c (setjmp_or_longjmp_p): Likewise.\n+\t(lower_omp_1): Likewise.\n+\t* predict.c (strip_predict_hints): Likewise.\n+\t* print-tree.c (print_node): Likewise.\n+\t* symtab.c (symtab_node::output_to_lto_symbol_table_p): Likewise.\n+\t* trans-mem.c (is_tm_irrevocable): Likewise.\n+\t(is_tm_load): Likewise.\n+\t(is_tm_simple_load): Likewise.\n+\t(is_tm_store): Likewise.\n+\t(is_tm_simple_store): Likewise.\n+\t(is_tm_abort): Likewise.\n+\t(tm_region_init_1): Likewise.\n+\t* tree-call-cdce.c (gen_shrink_wrap_conditions): Likewise.\n+\t* tree-cfg.c (verify_gimple_call): Likewise.\n+\t(move_stmt_r): Likewise.\n+\t(stmt_can_terminate_bb_p): Likewise.\n+\t* tree-eh.c (lower_eh_constructs_2): Likewise.\n+\t* tree-if-conv.c (if_convertible_stmt_p): Likewise.\n+\t* tree-inline.c (remap_gimple_stmt): Likewise.\n+\t(copy_bb): Likewise.\n+\t(estimate_num_insns): Likewise.\n+\t(fold_marked_statements): Likewise.\n+\t* tree-sra.c (scan_function): Likewise.\n+\t* tree-ssa-ccp.c (surely_varying_stmt_p): Likewise.\n+\t(optimize_stack_restore): Likewise.\n+\t(pass_fold_builtins::execute): Likewise.\n+\t* tree-ssa-dce.c (mark_stmt_if_obviously_necessary): Likewise.\n+\t(mark_all_reaching_defs_necessary_1): Likewise.\n+\t* tree-ssa-dom.c (dom_opt_dom_walker::optimize_stmt): Likewise.\n+\t* tree-ssa-forwprop.c (simplify_builtin_call): Likewise.\n+\t(pass_forwprop::execute): Likewise.\n+\t* tree-ssa-loop-im.c (stmt_cost): Likewise.\n+\t* tree-ssa-math-opts.c (pass_cse_reciprocals::execute): Likewise.\n+\t* tree-ssa-sccvn.c (fully_constant_vn_reference_p): Likewise.\n+\t* tree-ssa-strlen.c (get_string_length): Likewise.\n+\t* tree-ssa-structalias.c (handle_lhs_call): Likewise.\n+\t(find_func_aliases_for_call): Likewise.\n+\t* tree-ssa-ter.c (find_replaceable_in_bb): Likewise.\n+\t* tree-stdarg.c (optimize_va_list_gpr_fpr_size): Likewise.\n+\t* tree-tailcall.c (find_tail_calls): Likewise.\n+\t* tree.c (need_assembler_name_p): Likewise.\n+\t(free_lang_data_in_decl): Likewise.\n+\t(get_call_combined_fn): Likewise.\n+\t* ubsan.c (is_ubsan_builtin_p): Likewise.\n+\t* varasm.c (incorporeal_function_p): Likewise.\n+\t* tree.h (DECL_BUILT_IN): Remove and replace with\n+        fndecl_built_in_p.\n+\t(DECL_BUILT_IN_P): Transfort to fndecl_built_in_p.\n+\t(fndecl_built_in_p): New.\n+\n 2018-08-27  Martin Liska  <mliska@suse.cz>\n \n         PR tree-optimization/86847"}, {"sha": "58f336b65f25243ec27a3f00ed2a0594ca0c6921", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d78e00879b42574c9b0084c30f1361f0cfb9101/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d78e00879b42574c9b0084c30f1361f0cfb9101/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=3d78e00879b42574c9b0084c30f1361f0cfb9101", "patch": "@@ -1,3 +1,11 @@\n+2018-08-27  Martin Liska  <mliska@suse.cz>\n+\n+\t* gcc-interface/decl.c (update_profile): Use new function\n+        fndecl_built_in_p and remove check for FUNCTION_DECL if\n+        possible.\n+\t* gcc-interface/gigi.h (call_is_atomic_load): Likewise.\n+\t* gcc-interface/utils.c (gnat_pushdecl): Likewise.\n+\n 2018-08-23  Giuliano Belinassi  <giuliano.belinassi@usp.br>\n \n \t* exp_unst.ads: Fix typo 'exapnded' to 'expanded'."}, {"sha": "6f605bd64ecdedd1b6edad8436dd5ffefed30eb4", "filename": "gcc/ada/gcc-interface/decl.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d78e00879b42574c9b0084c30f1361f0cfb9101/gcc%2Fada%2Fgcc-interface%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d78e00879b42574c9b0084c30f1361f0cfb9101/gcc%2Fada%2Fgcc-interface%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2Fdecl.c?ref=3d78e00879b42574c9b0084c30f1361f0cfb9101", "patch": "@@ -5421,7 +5421,7 @@ update_profile (Entity_Id gnat_subprog)\n   if (DECL_P (gnu_type))\n     {\n       /* Builtins cannot have their address taken so we can reset them.  */\n-      gcc_assert (DECL_BUILT_IN (gnu_type));\n+      gcc_assert (fndecl_built_in_p (gnu_type));\n       save_gnu_tree (gnat_subprog, NULL_TREE, false);\n       save_gnu_tree (gnat_subprog, gnu_type, false);\n       return;"}, {"sha": "eb64a8bbdbde07586905c372bc4ee02d1c74c3aa", "filename": "gcc/ada/gcc-interface/gigi.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d78e00879b42574c9b0084c30f1361f0cfb9101/gcc%2Fada%2Fgcc-interface%2Fgigi.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d78e00879b42574c9b0084c30f1361f0cfb9101/gcc%2Fada%2Fgcc-interface%2Fgigi.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2Fgigi.h?ref=3d78e00879b42574c9b0084c30f1361f0cfb9101", "patch": "@@ -1081,7 +1081,7 @@ call_is_atomic_load (tree exp)\n {\n   tree fndecl = get_callee_fndecl (exp);\n \n-  if (!(fndecl && DECL_BUILT_IN_CLASS (fndecl) == BUILT_IN_NORMAL))\n+  if (!(fndecl && fndecl_built_in_p (fndecl, BUILT_IN_NORMAL)))\n     return false;\n \n   enum built_in_function code = DECL_FUNCTION_CODE (fndecl);"}, {"sha": "313d984b83dda82b62a9426049b5db3f853e1189", "filename": "gcc/ada/gcc-interface/utils.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d78e00879b42574c9b0084c30f1361f0cfb9101/gcc%2Fada%2Fgcc-interface%2Futils.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d78e00879b42574c9b0084c30f1361f0cfb9101/gcc%2Fada%2Fgcc-interface%2Futils.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2Futils.c?ref=3d78e00879b42574c9b0084c30f1361f0cfb9101", "patch": "@@ -773,7 +773,7 @@ gnat_pushdecl (tree decl, Node_Id gnat_node)\n \t debugger at the proper time.  */\n       if (DECL_EXTERNAL (decl)\n \t  && TREE_CODE (decl) == FUNCTION_DECL\n-\t  && DECL_BUILT_IN (decl))\n+\t  && fndecl_built_in_p (decl))\n \tvec_safe_push (builtin_decls, decl);\n       else if (global_bindings_p ())\n \tvec_safe_push (global_decls, decl);"}, {"sha": "8b721274d3b4a7630d90c3551c7051d1a6a20cbe", "filename": "gcc/attribs.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d78e00879b42574c9b0084c30f1361f0cfb9101/gcc%2Fattribs.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d78e00879b42574c9b0084c30f1361f0cfb9101/gcc%2Fattribs.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fattribs.c?ref=3d78e00879b42574c9b0084c30f1361f0cfb9101", "patch": "@@ -432,7 +432,7 @@ diag_attr_exclusions (tree last_decl, tree node, tree attrname,\n \t  bool note = last_decl != NULL_TREE;\n \t  auto_diagnostic_group d;\n \t  if (TREE_CODE (node) == FUNCTION_DECL\n-\t      && DECL_BUILT_IN (node))\n+\t      && fndecl_built_in_p (node))\n \t    note &= warning (OPT_Wattributes,\n \t\t\t     \"ignoring attribute %qE in declaration of \"\n \t\t\t     \"a built-in function %qD because it conflicts \""}, {"sha": "c4b52b9c62755a671c585c13ed08f59dab6991ef", "filename": "gcc/builtins.c", "status": "modified", "additions": 11, "deletions": 35, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d78e00879b42574c9b0084c30f1361f0cfb9101/gcc%2Fbuiltins.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d78e00879b42574c9b0084c30f1361f0cfb9101/gcc%2Fbuiltins.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbuiltins.c?ref=3d78e00879b42574c9b0084c30f1361f0cfb9101", "patch": "@@ -208,15 +208,6 @@ is_builtin_name (const char *name)\n   return false;\n }\n \n-\n-/* Return true if DECL is a function symbol representing a built-in.  */\n-\n-bool\n-is_builtin_fn (tree decl)\n-{\n-  return TREE_CODE (decl) == FUNCTION_DECL && DECL_BUILT_IN (decl);\n-}\n-\n /* Return true if NODE should be considered for inline expansion regardless\n    of the optimization level.  This means whenever a function is invoked with\n    its \"internal\" name, which normally contains the prefix \"__builtin\".  */\n@@ -8154,11 +8145,8 @@ builtin_mathfn_code (const_tree t)\n     return END_BUILTINS;\n \n   fndecl = get_callee_fndecl (t);\n-  if (fndecl == NULL_TREE\n-      || TREE_CODE (fndecl) != FUNCTION_DECL\n-      || ! DECL_BUILT_IN (fndecl)\n-      || DECL_BUILT_IN_CLASS (fndecl) == BUILT_IN_MD)\n-    return END_BUILTINS;\n+  if (fndecl == NULL_TREE || !fndecl_built_in_p (fndecl, BUILT_IN_NORMAL))\n+      return END_BUILTINS;\n \n   parmlist = TYPE_ARG_TYPES (TREE_TYPE (fndecl));\n   init_const_call_expr_arg_iterator (t, &iter);\n@@ -8313,9 +8301,8 @@ fold_builtin_expect (location_t loc, tree arg0, tree arg1, tree arg2,\n \n   if (TREE_CODE (inner) == CALL_EXPR\n       && (fndecl = get_callee_fndecl (inner))\n-      && (DECL_BUILT_IN_P (fndecl, BUILT_IN_NORMAL, BUILT_IN_EXPECT)\n-\t  || DECL_BUILT_IN_P (fndecl, BUILT_IN_NORMAL,\n-\t\t\t      BUILT_IN_EXPECT_WITH_PROBABILITY)))\n+      && (fndecl_built_in_p (fndecl, BUILT_IN_EXPECT)\n+\t  || fndecl_built_in_p (fndecl, BUILT_IN_EXPECT_WITH_PROBABILITY)))\n     return arg0;\n \n   inner = inner_arg0;\n@@ -9628,9 +9615,7 @@ fold_call_expr (location_t loc, tree exp, bool ignore)\n {\n   tree ret = NULL_TREE;\n   tree fndecl = get_callee_fndecl (exp);\n-  if (fndecl\n-      && TREE_CODE (fndecl) == FUNCTION_DECL\n-      && DECL_BUILT_IN (fndecl)\n+  if (fndecl && fndecl_built_in_p (fndecl)\n       /* If CALL_EXPR_VA_ARG_PACK is set, the arguments aren't finalized\n \t yet.  Defer folding until we see all the arguments\n \t (after inlining).  */\n@@ -9644,10 +9629,7 @@ fold_call_expr (location_t loc, tree exp, bool ignore)\n       if (nargs && TREE_CODE (CALL_EXPR_ARG (exp, nargs - 1)) == CALL_EXPR)\n \t{\n \t  tree fndecl2 = get_callee_fndecl (CALL_EXPR_ARG (exp, nargs - 1));\n-\t  if (fndecl2\n-\t      && TREE_CODE (fndecl2) == FUNCTION_DECL\n-\t      && DECL_BUILT_IN_CLASS (fndecl2) == BUILT_IN_NORMAL\n-\t      && DECL_FUNCTION_CODE (fndecl2) == BUILT_IN_VA_ARG_PACK)\n+\t  if (fndecl2 && fndecl_built_in_p (fndecl2, BUILT_IN_VA_ARG_PACK))\n \t    return NULL_TREE;\n \t}\n \n@@ -9683,17 +9665,14 @@ fold_builtin_call_array (location_t loc, tree,\n \n   tree fndecl = TREE_OPERAND (fn, 0);\n   if (TREE_CODE (fndecl) == FUNCTION_DECL\n-      && DECL_BUILT_IN (fndecl))\n+      && fndecl_built_in_p (fndecl))\n     {\n       /* If last argument is __builtin_va_arg_pack (), arguments to this\n \t function are not finalized yet.  Defer folding until they are.  */\n       if (n && TREE_CODE (argarray[n - 1]) == CALL_EXPR)\n \t{\n \t  tree fndecl2 = get_callee_fndecl (argarray[n - 1]);\n-\t  if (fndecl2\n-\t      && TREE_CODE (fndecl2) == FUNCTION_DECL\n-\t      && DECL_BUILT_IN_CLASS (fndecl2) == BUILT_IN_NORMAL\n-\t      && DECL_FUNCTION_CODE (fndecl2) == BUILT_IN_VA_ARG_PACK)\n+\t  if (fndecl2 && fndecl_built_in_p (fndecl2, BUILT_IN_VA_ARG_PACK))\n \t    return NULL_TREE;\n \t}\n       if (avoid_folding_inline_builtin (fndecl))\n@@ -10812,9 +10791,7 @@ fold_call_stmt (gcall *stmt, bool ignore)\n   tree ret = NULL_TREE;\n   tree fndecl = gimple_call_fndecl (stmt);\n   location_t loc = gimple_location (stmt);\n-  if (fndecl\n-      && TREE_CODE (fndecl) == FUNCTION_DECL\n-      && DECL_BUILT_IN (fndecl)\n+  if (fndecl && fndecl_built_in_p (fndecl)\n       && !gimple_call_va_arg_pack_p (stmt))\n     {\n       int nargs = gimple_call_num_args (stmt);\n@@ -10861,8 +10838,7 @@ fold_call_stmt (gcall *stmt, bool ignore)\n void\n set_builtin_user_assembler_name (tree decl, const char *asmspec)\n {\n-  gcc_assert (TREE_CODE (decl) == FUNCTION_DECL\n-\t      && DECL_BUILT_IN_CLASS (decl) == BUILT_IN_NORMAL\n+  gcc_assert (fndecl_built_in_p (decl, BUILT_IN_NORMAL)\n \t      && asmspec != 0);\n \n   tree builtin = builtin_decl_explicit (DECL_FUNCTION_CODE (decl));\n@@ -10882,7 +10858,7 @@ set_builtin_user_assembler_name (tree decl, const char *asmspec)\n bool\n is_simple_builtin (tree decl)\n {\n-  if (decl && DECL_BUILT_IN_CLASS (decl) == BUILT_IN_NORMAL)\n+  if (decl && fndecl_built_in_p (decl, BUILT_IN_NORMAL))\n     switch (DECL_FUNCTION_CODE (decl))\n       {\n \t/* Builtins that expand to constants.  */"}, {"sha": "c3d5ccbb6b6e61a8162de880772e94fba46ace51", "filename": "gcc/builtins.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d78e00879b42574c9b0084c30f1361f0cfb9101/gcc%2Fbuiltins.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d78e00879b42574c9b0084c30f1361f0cfb9101/gcc%2Fbuiltins.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbuiltins.h?ref=3d78e00879b42574c9b0084c30f1361f0cfb9101", "patch": "@@ -49,7 +49,6 @@ extern struct target_builtins *this_target_builtins;\n /* Non-zero if __builtin_constant_p should be folded right away.  */\n extern bool force_folding_builtin_constant_p;\n \n-extern bool is_builtin_fn (tree);\n extern bool called_as_built_in (tree);\n extern bool get_object_alignment_1 (tree, unsigned int *,\n \t\t\t\t    unsigned HOST_WIDE_INT *);"}, {"sha": "2ca6662c3c5fcf92dfb94dd46a7cdcef0cc83b0d", "filename": "gcc/c-family/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d78e00879b42574c9b0084c30f1361f0cfb9101/gcc%2Fc-family%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d78e00879b42574c9b0084c30f1361f0cfb9101/gcc%2Fc-family%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2FChangeLog?ref=3d78e00879b42574c9b0084c30f1361f0cfb9101", "patch": "@@ -1,3 +1,12 @@\n+2018-08-27  Martin Liska  <mliska@suse.cz>\n+\n+\t* c-common.c (check_function_restrict): Use new function\n+        fndecl_built_in_p and remove check for FUNCTION_DECL if\n+        possible.\n+\t(check_builtin_function_arguments): Likewise.\n+\t(reject_gcc_builtin): Likewise.\n+\t* c-warn.c (sizeof_pointer_memaccess_warning): Likewise.\n+\n 2018-08-26  Marek Polacek  <polacek@redhat.com>\n \n \tPR c++/87029, Implement -Wredundant-move."}, {"sha": "0b0969b5216ed4c2132b5be02024249c16a65b0f", "filename": "gcc/c-family/c-common.c", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d78e00879b42574c9b0084c30f1361f0cfb9101/gcc%2Fc-family%2Fc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d78e00879b42574c9b0084c30f1361f0cfb9101/gcc%2Fc-family%2Fc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-common.c?ref=3d78e00879b42574c9b0084c30f1361f0cfb9101", "patch": "@@ -5326,8 +5326,7 @@ check_function_restrict (const_tree fndecl, const_tree fntype,\n     {\n       /* Avoid diagnosing calls built-ins with a zero size/bound\n \t here.  They are checked in more detail elsewhere.  */\n-      if (DECL_BUILT_IN (fndecl)\n-\t  && DECL_BUILT_IN_CLASS (fndecl) == BUILT_IN_NORMAL\n+      if (fndecl_built_in_p (fndecl, BUILT_IN_NORMAL)\n \t  && nargs == 3\n \t  && TREE_CODE (argarray[2]) == INTEGER_CST\n \t  && integer_zerop (argarray[2]))\n@@ -5755,8 +5754,7 @@ bool\n check_builtin_function_arguments (location_t loc, vec<location_t> arg_loc,\n \t\t\t\t  tree fndecl, int nargs, tree *args)\n {\n-  if (!DECL_BUILT_IN (fndecl)\n-      || DECL_BUILT_IN_CLASS (fndecl) != BUILT_IN_NORMAL)\n+  if (!fndecl_built_in_p (fndecl, BUILT_IN_NORMAL))\n     return true;\n \n   switch (DECL_FUNCTION_CODE (fndecl))\n@@ -8011,7 +8009,7 @@ reject_gcc_builtin (const_tree expr, location_t loc /* = UNKNOWN_LOCATION */)\n \t strlen, and for C++ operators new and delete.\n \t The c_decl_implicit() test avoids false positives for implicitly\n \t declared built-ins with library fallbacks (such as abs).  */\n-      && DECL_BUILT_IN (expr)\n+      && fndecl_built_in_p (expr)\n       && DECL_IS_BUILTIN (expr)\n       && !c_decl_implicit (expr)\n       && !DECL_ASSEMBLER_NAME_SET_P (expr))"}, {"sha": "95b66c1eabb41130884e2f6ab884347f58deb706", "filename": "gcc/c-family/c-warn.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d78e00879b42574c9b0084c30f1361f0cfb9101/gcc%2Fc-family%2Fc-warn.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d78e00879b42574c9b0084c30f1361f0cfb9101/gcc%2Fc-family%2Fc-warn.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-warn.c?ref=3d78e00879b42574c9b0084c30f1361f0cfb9101", "patch": "@@ -702,7 +702,7 @@ sizeof_pointer_memaccess_warning (location_t *sizeof_arg_loc, tree callee,\n   location_t loc;\n \n   if (TREE_CODE (callee) != FUNCTION_DECL\n-      || DECL_BUILT_IN_CLASS (callee) != BUILT_IN_NORMAL\n+      || !fndecl_built_in_p (callee, BUILT_IN_NORMAL)\n       || vec_safe_length (params) <= 1)\n     return;\n "}, {"sha": "b3e499e58997d308d5e76d0addb80087df3e926a", "filename": "gcc/c/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d78e00879b42574c9b0084c30f1361f0cfb9101/gcc%2Fc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d78e00879b42574c9b0084c30f1361f0cfb9101/gcc%2Fc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2FChangeLog?ref=3d78e00879b42574c9b0084c30f1361f0cfb9101", "patch": "@@ -1,3 +1,18 @@\n+2018-08-27  Martin Liska  <mliska@suse.cz>\n+\n+\t* c-decl.c (locate_old_decl): Use new function\n+        fndecl_built_in_p and remove check for FUNCTION_DECL if\n+        possible.\n+\t(diagnose_mismatched_decls): Likewise.\n+\t(merge_decls): Likewise.\n+\t(warn_if_shadowing): Likewise.\n+\t(pushdecl): Likewise.\n+\t(implicitly_declare): Likewise.\n+\t* c-parser.c (c_parser_postfix_expression_after_primary): Likewise.\n+\t* c-tree.h (C_DECL_ISNT_PROTOTYPE): Likewise.\n+\t* c-typeck.c (build_function_call_vec): Likewise.\n+\t(convert_arguments): Likewise.\n+\n 2018-08-20  David Malcolm  <dmalcolm@redhat.com>\n \n \tPR other/84889"}, {"sha": "80647ee0207ba2e4c43a2fb490a8782ce7f6d38a", "filename": "gcc/c/c-decl.c", "status": "modified", "additions": 13, "deletions": 12, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d78e00879b42574c9b0084c30f1361f0cfb9101/gcc%2Fc%2Fc-decl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d78e00879b42574c9b0084c30f1361f0cfb9101/gcc%2Fc%2Fc-decl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2Fc-decl.c?ref=3d78e00879b42574c9b0084c30f1361f0cfb9101", "patch": "@@ -1800,7 +1800,7 @@ validate_proto_after_old_defn (tree newdecl, tree newtype, tree oldtype)\n static void\n locate_old_decl (tree decl)\n {\n-  if (TREE_CODE (decl) == FUNCTION_DECL && DECL_BUILT_IN (decl)\n+  if (TREE_CODE (decl) == FUNCTION_DECL && fndecl_built_in_p (decl)\n       && !C_DECL_DECLARED_BUILTIN (decl))\n     ;\n   else if (DECL_INITIAL (decl))\n@@ -1843,7 +1843,7 @@ diagnose_mismatched_decls (tree newdecl, tree olddecl,\n   if (TREE_CODE (olddecl) != TREE_CODE (newdecl))\n     {\n       if (!(TREE_CODE (olddecl) == FUNCTION_DECL\n-\t    && DECL_BUILT_IN (olddecl)\n+\t    && fndecl_built_in_p (olddecl)\n \t    && !C_DECL_DECLARED_BUILTIN (olddecl)))\n \t{\n \t  auto_diagnostic_group d;\n@@ -1877,7 +1877,7 @@ diagnose_mismatched_decls (tree newdecl, tree olddecl,\n   if (!comptypes (oldtype, newtype))\n     {\n       if (TREE_CODE (olddecl) == FUNCTION_DECL\n-\t  && DECL_BUILT_IN (olddecl) && !C_DECL_DECLARED_BUILTIN (olddecl))\n+\t  && fndecl_built_in_p (olddecl) && !C_DECL_DECLARED_BUILTIN (olddecl))\n \t{\n \t  /* Accept harmless mismatch in function types.\n \t     This is for the ffs and fprintf builtins.  */\n@@ -2025,7 +2025,7 @@ diagnose_mismatched_decls (tree newdecl, tree olddecl,\n \t define the built-in with an old-style definition (so we\n \t can't validate the argument list) the built-in definition is\n \t overridden, but optionally warn this was a bad choice of name.  */\n-      if (DECL_BUILT_IN (olddecl)\n+      if (fndecl_built_in_p (olddecl)\n \t  && !C_DECL_DECLARED_BUILTIN (olddecl)\n \t  && (!TREE_PUBLIC (newdecl)\n \t      || (DECL_INITIAL (newdecl)\n@@ -2297,8 +2297,8 @@ diagnose_mismatched_decls (tree newdecl, tree olddecl,\n \t   && DECL_INITIAL (newdecl) && !DECL_INITIAL (olddecl))\n       /* Don't warn about redundant redeclarations of builtins.  */\n       && !(TREE_CODE (newdecl) == FUNCTION_DECL\n-\t   && !DECL_BUILT_IN (newdecl)\n-\t   && DECL_BUILT_IN (olddecl)\n+\t   && !fndecl_built_in_p (newdecl)\n+\t   && fndecl_built_in_p (olddecl)\n \t   && !C_DECL_DECLARED_BUILTIN (olddecl))\n       /* Don't warn about an extern followed by a definition.  */\n       && !(DECL_EXTERNAL (olddecl) && !DECL_EXTERNAL (newdecl))\n@@ -2576,7 +2576,7 @@ merge_decls (tree newdecl, tree olddecl, tree newtype, tree oldtype)\n \t       || DECL_DISREGARD_INLINE_LIMITS (olddecl));\n \t}\n \n-      if (DECL_BUILT_IN (olddecl))\n+      if (fndecl_built_in_p (olddecl))\n \t{\n \t  /* If redeclaring a builtin function, it stays built in.\n \t     But it gets tagged as having been declared.  */\n@@ -2840,7 +2840,7 @@ warn_if_shadowing (tree new_decl)\n \t\t\t\t new_decl);\n \t  }\n \telse if (TREE_CODE (old_decl) == FUNCTION_DECL\n-\t\t && DECL_BUILT_IN (old_decl))\n+\t\t && fndecl_built_in_p (old_decl))\n \t  {\n \t    warning (OPT_Wshadow, \"declaration of %q+D shadows \"\n \t\t     \"a built-in function\", new_decl);\n@@ -2953,7 +2953,7 @@ pushdecl (tree x)\n \t\tthistype = TREE_TYPE (b_use->decl);\n \t      b_use->u.type = TREE_TYPE (b_use->decl);\n \t      if (TREE_CODE (b_use->decl) == FUNCTION_DECL\n-\t\t  && DECL_BUILT_IN (b_use->decl))\n+\t\t  && fndecl_built_in_p (b_use->decl))\n \t\tthistype\n \t\t  = build_type_attribute_variant (thistype,\n \t\t\t\t\t\t  TYPE_ATTRIBUTES\n@@ -3057,7 +3057,8 @@ pushdecl (tree x)\n \t  else\n \t    thistype = type;\n \t  b->u.type = TREE_TYPE (b->decl);\n-\t  if (TREE_CODE (b->decl) == FUNCTION_DECL && DECL_BUILT_IN (b->decl))\n+\t  if (TREE_CODE (b->decl) == FUNCTION_DECL\n+\t      && fndecl_built_in_p (b->decl))\n \t    thistype\n \t      = build_type_attribute_variant (thistype,\n \t\t\t\t\t      TYPE_ATTRIBUTES (b->u.type));\n@@ -3408,7 +3409,7 @@ implicitly_declare (location_t loc, tree functionid)\n \t in the external scope because they're pushed before the file\n \t scope gets created.  Catch this here and rebind them into the\n \t file scope.  */\n-      if (!DECL_BUILT_IN (decl) && DECL_IS_BUILTIN (decl))\n+      if (!fndecl_built_in_p (decl) && DECL_IS_BUILTIN (decl))\n \t{\n \t  bind (functionid, decl, file_scope,\n \t\t/*invisible=*/false, /*nested=*/true,\n@@ -3429,7 +3430,7 @@ implicitly_declare (location_t loc, tree functionid)\n \t      implicit_decl_warning (loc, functionid, decl);\n \t      C_DECL_IMPLICIT (decl) = 1;\n \t    }\n-\t  if (DECL_BUILT_IN (decl))\n+\t  if (fndecl_built_in_p (decl))\n \t    {\n \t      newtype = build_type_attribute_variant (newtype,\n \t\t\t\t\t\t      TYPE_ATTRIBUTES"}, {"sha": "28384dfe913d4870bb7563a6291f0764e5969120", "filename": "gcc/c/c-parser.c", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d78e00879b42574c9b0084c30f1361f0cfb9101/gcc%2Fc%2Fc-parser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d78e00879b42574c9b0084c30f1361f0cfb9101/gcc%2Fc%2Fc-parser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2Fc-parser.c?ref=3d78e00879b42574c9b0084c30f1361f0cfb9101", "patch": "@@ -9175,8 +9175,7 @@ c_parser_postfix_expression_after_primary (c_parser *parser,\n \t\t\t\t\t      sizeof_arg,\n \t\t\t\t\t      sizeof_ptr_memacc_comptypes);\n \t  if (TREE_CODE (expr.value) == FUNCTION_DECL\n-\t      && DECL_BUILT_IN_CLASS (expr.value) == BUILT_IN_NORMAL\n-\t      && DECL_FUNCTION_CODE (expr.value) == BUILT_IN_MEMSET\n+\t      && fndecl_built_in_p (expr.value, BUILT_IN_MEMSET)\n \t      && vec_safe_length (exprlist) == 3)\n \t    {\n \t      tree arg0 = (*exprlist)[0];\n@@ -9194,8 +9193,7 @@ c_parser_postfix_expression_after_primary (c_parser *parser,\n \t  expr.original_code = ERROR_MARK;\n \t  if (TREE_CODE (expr.value) == INTEGER_CST\n \t      && TREE_CODE (orig_expr.value) == FUNCTION_DECL\n-\t      && DECL_BUILT_IN_CLASS (orig_expr.value) == BUILT_IN_NORMAL\n-\t      && DECL_FUNCTION_CODE (orig_expr.value) == BUILT_IN_CONSTANT_P)\n+\t      && fndecl_built_in_p (orig_expr.value, BUILT_IN_CONSTANT_P))\n \t    expr.original_code = C_MAYBE_CONST_EXPR;\n \t  expr.original_type = NULL;\n \t  if (exprlist)"}, {"sha": "017c01c592ce6825ec211b2b16bc63eecf51258a", "filename": "gcc/c/c-tree.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d78e00879b42574c9b0084c30f1361f0cfb9101/gcc%2Fc%2Fc-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d78e00879b42574c9b0084c30f1361f0cfb9101/gcc%2Fc%2Fc-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2Fc-tree.h?ref=3d78e00879b42574c9b0084c30f1361f0cfb9101", "patch": "@@ -102,7 +102,7 @@ along with GCC; see the file COPYING3.  If not see\n #define C_DECL_ISNT_PROTOTYPE(EXP)\t\t\t\\\n        (EXP == 0\t\t\t\t\t\\\n \t|| (!prototype_p (TREE_TYPE (EXP))\t\\\n-\t    && !DECL_BUILT_IN (EXP)))\n+\t    && !fndecl_built_in_p (EXP)))\n \n /* For FUNCTION_TYPE, a hidden list of types of arguments.  The same as\n    TYPE_ARG_TYPES for functions with prototypes, but created for functions"}, {"sha": "5f8df12564d00b39e99ef7e4976b50da3a578a35", "filename": "gcc/c/c-typeck.c", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d78e00879b42574c9b0084c30f1361f0cfb9101/gcc%2Fc%2Fc-typeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d78e00879b42574c9b0084c30f1361f0cfb9101/gcc%2Fc%2Fc-typeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2Fc-typeck.c?ref=3d78e00879b42574c9b0084c30f1361f0cfb9101", "patch": "@@ -3108,9 +3108,7 @@ build_function_call_vec (location_t loc, vec<location_t> arg_loc,\n   argarray = vec_safe_address (params);\n \n   /* Check that arguments to builtin functions match the expectations.  */\n-  if (fundecl\n-      && DECL_BUILT_IN (fundecl)\n-      && DECL_BUILT_IN_CLASS (fundecl) == BUILT_IN_NORMAL\n+  if (fundecl && fndecl_built_in_p (fundecl, BUILT_IN_NORMAL)\n       && !check_builtin_function_arguments (loc, arg_loc, fundecl, nargs,\n \t\t\t\t\t    argarray))\n     return error_mark_node;\n@@ -3233,8 +3231,7 @@ convert_arguments (location_t loc, vec<location_t> arg_loc, tree typelist,\n      precision should be removed (classification) or not\n      (comparison).  */\n   if (type_generic\n-      && DECL_BUILT_IN (fundecl)\n-      && DECL_BUILT_IN_CLASS (fundecl) == BUILT_IN_NORMAL)\n+      && fndecl_built_in_p (fundecl, BUILT_IN_NORMAL))\n     {\n       switch (DECL_FUNCTION_CODE (fundecl))\n \t{"}, {"sha": "f57ecf916365f3b7958e391b05474319c178b01d", "filename": "gcc/calls.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d78e00879b42574c9b0084c30f1361f0cfb9101/gcc%2Fcalls.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d78e00879b42574c9b0084c30f1361f0cfb9101/gcc%2Fcalls.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcalls.c?ref=3d78e00879b42574c9b0084c30f1361f0cfb9101", "patch": "@@ -715,7 +715,7 @@ gimple_alloca_call_p (const gimple *stmt)\n     return false;\n \n   fndecl = gimple_call_fndecl (stmt);\n-  if (fndecl && DECL_BUILT_IN_CLASS (fndecl) == BUILT_IN_NORMAL)\n+  if (fndecl && fndecl_built_in_p (fndecl, BUILT_IN_NORMAL))\n     switch (DECL_FUNCTION_CODE (fndecl))\n       {\n       CASE_BUILT_IN_ALLOCA:\n@@ -1542,7 +1542,7 @@ get_attr_nonstring_decl (tree expr, tree *ref)\n void\n maybe_warn_nonstring_arg (tree fndecl, tree exp)\n {\n-  if (!fndecl || DECL_BUILT_IN_CLASS (fndecl) != BUILT_IN_NORMAL)\n+  if (!fndecl || !fndecl_built_in_p (fndecl, BUILT_IN_NORMAL))\n     return;\n \n   if (TREE_NO_WARNING (exp))"}, {"sha": "2d3111da25d917256f21a66736cbdbb38a6f79ea", "filename": "gcc/cfgexpand.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d78e00879b42574c9b0084c30f1361f0cfb9101/gcc%2Fcfgexpand.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d78e00879b42574c9b0084c30f1361f0cfb9101/gcc%2Fcfgexpand.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcfgexpand.c?ref=3d78e00879b42574c9b0084c30f1361f0cfb9101", "patch": "@@ -2616,7 +2616,7 @@ expand_call_stmt (gcall *stmt)\n   exp = build_vl_exp (CALL_EXPR, gimple_call_num_args (stmt) + 3);\n \n   CALL_EXPR_FN (exp) = gimple_call_fn (stmt);\n-  builtin_p = decl && DECL_BUILT_IN (decl);\n+  builtin_p = decl && fndecl_built_in_p (decl);\n \n   /* If this is not a builtin function, the function type through which the\n      call is made may be different from the type of the function.  */\n@@ -2655,7 +2655,7 @@ expand_call_stmt (gcall *stmt)\n   CALL_EXPR_MUST_TAIL_CALL (exp) = gimple_call_must_tail_p (stmt);\n   CALL_EXPR_RETURN_SLOT_OPT (exp) = gimple_call_return_slot_opt_p (stmt);\n   if (decl\n-      && DECL_BUILT_IN_CLASS (decl) == BUILT_IN_NORMAL\n+      && fndecl_built_in_p (decl, BUILT_IN_NORMAL)\n       && ALLOCA_FUNCTION_CODE_P (DECL_FUNCTION_CODE (decl)))\n     CALL_ALLOCA_FOR_VAR_P (exp) = gimple_call_alloca_for_var_p (stmt);\n   else"}, {"sha": "148f29ea749daef482a6b094a0510beaded8d49e", "filename": "gcc/cgraph.c", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d78e00879b42574c9b0084c30f1361f0cfb9101/gcc%2Fcgraph.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d78e00879b42574c9b0084c30f1361f0cfb9101/gcc%2Fcgraph.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcgraph.c?ref=3d78e00879b42574c9b0084c30f1361f0cfb9101", "patch": "@@ -1559,8 +1559,7 @@ cgraph_update_edges_for_call_stmt_node (cgraph_node *node,\n \t{\n \t  /* Keep calls marked as dead dead.  */\n \t  if (new_stmt && is_gimple_call (new_stmt) && e->callee\n-\t      && DECL_BUILT_IN_CLASS (e->callee->decl) == BUILT_IN_NORMAL\n-\t      && DECL_FUNCTION_CODE (e->callee->decl) == BUILT_IN_UNREACHABLE)\n+\t      && fndecl_built_in_p (e->callee->decl, BUILT_IN_UNREACHABLE))\n \t    {\n               node->get_edge (old_stmt)->set_call_stmt\n \t\t (as_a <gcall *> (new_stmt));\n@@ -3060,8 +3059,8 @@ cgraph_edge::verify_corresponds_to_fndecl (tree decl)\n \n   /* Optimizers can redirect unreachable calls or calls triggering undefined\n      behavior to builtin_unreachable.  */\n-  if (DECL_BUILT_IN_CLASS (callee->decl) == BUILT_IN_NORMAL\n-      && DECL_FUNCTION_CODE (callee->decl) == BUILT_IN_UNREACHABLE)\n+\n+  if (fndecl_built_in_p (callee->decl, BUILT_IN_UNREACHABLE))\n     return false;\n \n   if (callee->former_clone_of != node->decl\n@@ -3187,8 +3186,7 @@ cgraph_node::verify_node (void)\n \t  /* Optimized out calls are redirected to __builtin_unreachable.  */\n \t  && (e->count.nonzero_p ()\n \t      || ! e->callee->decl\n-\t      || DECL_BUILT_IN_CLASS (e->callee->decl) != BUILT_IN_NORMAL\n-\t      || DECL_FUNCTION_CODE (e->callee->decl) != BUILT_IN_UNREACHABLE)\n+\t      || !fndecl_built_in_p (e->callee->decl, BUILT_IN_UNREACHABLE))\n \t  && count\n \t      == ENTRY_BLOCK_PTR_FOR_FN (DECL_STRUCT_FUNCTION (decl))->count\n \t  && (!e->count.ipa_p ()"}, {"sha": "0c0a94b04a3f0ede4c55a2dfd65fa6da35378ee6", "filename": "gcc/cgraphclones.c", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d78e00879b42574c9b0084c30f1361f0cfb9101/gcc%2Fcgraphclones.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d78e00879b42574c9b0084c30f1361f0cfb9101/gcc%2Fcgraphclones.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcgraphclones.c?ref=3d78e00879b42574c9b0084c30f1361f0cfb9101", "patch": "@@ -222,7 +222,7 @@ build_function_decl_skip_args (tree orig_decl, bitmap args_to_skip,\n     DECL_VINDEX (new_decl) = NULL_TREE;\n \n   /* When signature changes, we need to clear builtin info.  */\n-  if (DECL_BUILT_IN (new_decl)\n+  if (fndecl_built_in_p (new_decl)\n       && args_to_skip\n       && !bitmap_empty_p (args_to_skip))\n     {\n@@ -482,8 +482,7 @@ cgraph_node::create_clone (tree new_decl, profile_count prof_count,\n \t version.  The only exception is when the edge was proved to\n \t be unreachable during the clonning procedure.  */\n       if (!e->callee\n-\t  || DECL_BUILT_IN_CLASS (e->callee->decl) != BUILT_IN_NORMAL\n-\t  || DECL_FUNCTION_CODE (e->callee->decl) != BUILT_IN_UNREACHABLE)\n+\t  || !fndecl_built_in_p (e->callee->decl, BUILT_IN_UNREACHABLE))\n         e->redirect_callee_duplicating_thunks (new_node);\n     }\n   new_node->expand_all_artificial_thunks ();"}, {"sha": "6332e68df0506bb980cf55e05e7293b4a44d1e91", "filename": "gcc/config/arm/arm.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d78e00879b42574c9b0084c30f1361f0cfb9101/gcc%2Fconfig%2Farm%2Farm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d78e00879b42574c9b0084c30f1361f0cfb9101/gcc%2Fconfig%2Farm%2Farm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.c?ref=3d78e00879b42574c9b0084c30f1361f0cfb9101", "patch": "@@ -30841,7 +30841,7 @@ arm_insert_attributes (tree fndecl, tree * attributes)\n     return;\n \n   if (TREE_CODE (fndecl) != FUNCTION_DECL || DECL_EXTERNAL(fndecl)\n-      || DECL_BUILT_IN (fndecl) || DECL_ARTIFICIAL (fndecl))\n+      || fndecl_built_in_p (fndecl) || DECL_ARTIFICIAL (fndecl))\n    return;\n \n   /* Nested definitions must inherit mode.  */"}, {"sha": "eab482c4c841ee4864526c8ce872c3a89643ef1d", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d78e00879b42574c9b0084c30f1361f0cfb9101/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d78e00879b42574c9b0084c30f1361f0cfb9101/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=3d78e00879b42574c9b0084c30f1361f0cfb9101", "patch": "@@ -33329,7 +33329,7 @@ ix86_gimple_fold_builtin (gimple_stmt_iterator *gsi)\n {\n   gimple *stmt = gsi_stmt (*gsi);\n   tree fndecl = gimple_call_fndecl (stmt);\n-  gcc_checking_assert (fndecl && DECL_BUILT_IN_CLASS (fndecl) == BUILT_IN_MD);\n+  gcc_checking_assert (fndecl && fndecl_built_in_p (fndecl, BUILT_IN_MD));\n   int n_args = gimple_call_num_args (stmt);\n   enum ix86_builtins fn_code = (enum ix86_builtins) DECL_FUNCTION_CODE (fndecl);\n   tree decl = NULL_TREE;\n@@ -37919,7 +37919,7 @@ ix86_expand_builtin (tree exp, rtx target, rtx subtarget,\n \t\t{\n \t\t  tree fndecl = gimple_call_fndecl (def_stmt);\n \t\t  if (fndecl\n-\t\t      && DECL_BUILT_IN_CLASS (fndecl) == BUILT_IN_MD)\n+\t\t      && fndecl_built_in_p (fndecl, BUILT_IN_MD))\n \t\t    switch ((unsigned int) DECL_FUNCTION_CODE (fndecl))\n \t\t      {\n \t\t      case IX86_BUILTIN_CMPPD:"}, {"sha": "e6d62082bf9068c2707f3a0c1485603c7b72ee02", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d78e00879b42574c9b0084c30f1361f0cfb9101/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d78e00879b42574c9b0084c30f1361f0cfb9101/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=3d78e00879b42574c9b0084c30f1361f0cfb9101", "patch": "@@ -1,3 +1,24 @@\n+2018-08-27  Martin Liska  <mliska@suse.cz>\n+\n+\t* call.c (build_call_a): Use new function\n+        fndecl_built_in_p and remove check for FUNCTION_DECL if\n+        possible.\n+\t(build_cxx_call): Likewise.\n+\t* constexpr.c (constexpr_fn_retval): Likewise.\n+\t(cxx_eval_builtin_function_call): Likewise.\n+\t(cxx_eval_call_expression): Likewise.\n+\t(potential_constant_expression_1): Likewise.\n+\t* cp-gimplify.c (cp_gimplify_expr): Likewise.\n+\t(cp_fold): Likewise.\n+\t* decl.c (decls_match): Likewise.\n+\t(validate_constexpr_redeclaration): Likewise.\n+\t(duplicate_decls): Likewise.\n+\t(make_rtl_for_nonlocal_decl): Likewise.\n+\t* name-lookup.c (consider_binding_level): Likewise.\n+\t(cp_emit_debug_info_for_using): Likewise.\n+\t* semantics.c (finish_call_expr): Likewise.\n+\t* tree.c (builtin_valid_in_constant_expr_p): Likewise.\n+\n 2018-08-26  Marek Polacek  <polacek@redhat.com>\n \n \tPR c++/87080"}, {"sha": "d74f2be7d7c575c096a8de809e0861c9762fb654", "filename": "gcc/cp/call.c", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d78e00879b42574c9b0084c30f1361f0cfb9101/gcc%2Fcp%2Fcall.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d78e00879b42574c9b0084c30f1361f0cfb9101/gcc%2Fcp%2Fcall.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcall.c?ref=3d78e00879b42574c9b0084c30f1361f0cfb9101", "patch": "@@ -389,7 +389,7 @@ build_call_a (tree function, int n, tree *argarray)\n   /* Don't pass empty class objects by value.  This is useful\n      for tags in STL, which are used to control overload resolution.\n      We don't need to handle other cases of copying empty classes.  */\n-  if (! decl || ! DECL_BUILT_IN (decl))\n+  if (!decl || !fndecl_built_in_p (decl))\n     for (i = 0; i < n; i++)\n       {\n \ttree arg = CALL_EXPR_ARG (function, i);\n@@ -8869,8 +8869,7 @@ build_cxx_call (tree fn, int nargs, tree *argarray,\n   /* Check that arguments to builtin functions match the expectations.  */\n   if (fndecl\n       && !processing_template_decl\n-      && DECL_BUILT_IN (fndecl)\n-      && DECL_BUILT_IN_CLASS (fndecl) == BUILT_IN_NORMAL)\n+      && fndecl_built_in_p (fndecl, BUILT_IN_NORMAL))\n     {\n       int i;\n "}, {"sha": "f646519135ffee9aec3e0965269302e09112ecb3", "filename": "gcc/cp/constexpr.c", "status": "modified", "additions": 6, "deletions": 8, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d78e00879b42574c9b0084c30f1361f0cfb9101/gcc%2Fcp%2Fconstexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d78e00879b42574c9b0084c30f1361f0cfb9101/gcc%2Fcp%2Fconstexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fconstexpr.c?ref=3d78e00879b42574c9b0084c30f1361f0cfb9101", "patch": "@@ -721,8 +721,7 @@ constexpr_fn_retval (tree body)\n \t{\n \t  tree fun = get_function_named_in_call (body);\n \t  if (fun != NULL_TREE\n-\t      && DECL_BUILT_IN_CLASS (fun) == BUILT_IN_NORMAL\n-\t      && DECL_FUNCTION_CODE (fun) == BUILT_IN_UNREACHABLE)\n+\t      && fndecl_built_in_p (fun, BUILT_IN_UNREACHABLE))\n \t    return NULL_TREE;\n \t}\n       /* Fallthru.  */\n@@ -1198,8 +1197,8 @@ cxx_eval_builtin_function_call (const constexpr_ctx *ctx, tree t, tree fun,\n \n   /* For __builtin_is_constant_evaluated, defer it if not\n      ctx->pretend_const_required, otherwise fold it to true.  */\n-  if (DECL_BUILT_IN_CLASS (fun) == BUILT_IN_FRONTEND\n-      && (int) DECL_FUNCTION_CODE (fun) == CP_BUILT_IN_IS_CONSTANT_EVALUATED)\n+  if (fndecl_built_in_p (fun, CP_BUILT_IN_IS_CONSTANT_EVALUATED,\n+\t\t       BUILT_IN_FRONTEND))\n     {\n       if (!ctx->pretend_const_required)\n \t{\n@@ -1242,8 +1241,7 @@ cxx_eval_builtin_function_call (const constexpr_ctx *ctx, tree t, tree fun,\n \t  /* Do not allow__builtin_unreachable in constexpr function.\n \t     The __builtin_unreachable call with BUILTINS_LOCATION\n \t     comes from cp_maybe_instrument_return.  */\n-\t  if (DECL_BUILT_IN_CLASS (fun) == BUILT_IN_NORMAL\n-\t      && DECL_FUNCTION_CODE (fun) == BUILT_IN_UNREACHABLE\n+\t  if (fndecl_built_in_p (fun, BUILT_IN_UNREACHABLE)\n \t      && EXPR_LOCATION (t) == BUILTINS_LOCATION)\n \t    error (\"%<constexpr%> call flows off the end of the function\");\n \t  else\n@@ -1528,7 +1526,7 @@ cxx_eval_call_expression (const constexpr_ctx *ctx, tree t,\n   if (is_ubsan_builtin_p (fun))\n     return void_node;\n \n-  if (is_builtin_fn (fun))\n+  if (fndecl_built_in_p (fun))\n     return cxx_eval_builtin_function_call (ctx, t, fun,\n \t\t\t\t\t   lval, non_constant_p, overflow_p);\n   if (!DECL_DECLARED_CONSTEXPR_P (fun))\n@@ -5522,7 +5520,7 @@ potential_constant_expression_1 (tree t, bool want_rval, bool strict, bool now,\n \t\tif (!DECL_DECLARED_CONSTEXPR_P (fun)\n \t\t    /* Allow any built-in function; if the expansion\n \t\t       isn't constant, we'll deal with that then.  */\n-\t\t    && !is_builtin_fn (fun))\n+\t\t    && !fndecl_built_in_p (fun))\n \t\t  {\n \t\t    if (flags & tf_error)\n \t\t      {"}, {"sha": "90a8f9fef8f2398af46e7572c93480a97515e819", "filename": "gcc/cp/cp-gimplify.c", "status": "modified", "additions": 5, "deletions": 7, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d78e00879b42574c9b0084c30f1361f0cfb9101/gcc%2Fcp%2Fcp-gimplify.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d78e00879b42574c9b0084c30f1361f0cfb9101/gcc%2Fcp%2Fcp-gimplify.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-gimplify.c?ref=3d78e00879b42574c9b0084c30f1361f0cfb9101", "patch": "@@ -797,9 +797,8 @@ cp_gimplify_expr (tree *expr_p, gimple_seq *pre_p, gimple_seq *post_p)\n \t{\n \t  tree decl = cp_get_callee_fndecl_nofold (*expr_p);\n \t  if (decl\n-\t      && DECL_BUILT_IN_CLASS (decl) == BUILT_IN_FRONTEND\n-\t      && ((int) DECL_FUNCTION_CODE (decl)\n-\t\t  == CP_BUILT_IN_IS_CONSTANT_EVALUATED))\n+\t      && fndecl_built_in_p (decl, CP_BUILT_IN_IS_CONSTANT_EVALUATED,\n+\t\t\t\t  BUILT_IN_FRONTEND))\n \t    *expr_p = boolean_false_node;\n \t}\n       break;\n@@ -2489,17 +2488,16 @@ cp_fold (tree x)\n \t/* Some built-in function calls will be evaluated at compile-time in\n \t   fold ().  Set optimize to 1 when folding __builtin_constant_p inside\n \t   a constexpr function so that fold_builtin_1 doesn't fold it to 0.  */\n-\tif (callee && DECL_BUILT_IN (callee) && !optimize\n+\tif (callee && fndecl_built_in_p (callee) && !optimize\n \t    && DECL_IS_BUILTIN_CONSTANT_P (callee)\n \t    && current_function_decl\n \t    && DECL_DECLARED_CONSTEXPR_P (current_function_decl))\n \t  nw = 1;\n \n \t/* Defer folding __builtin_is_constant_evaluated.  */\n \tif (callee\n-\t    && DECL_BUILT_IN_CLASS (callee) == BUILT_IN_FRONTEND\n-\t    && ((int) DECL_FUNCTION_CODE (callee)\n-\t\t== CP_BUILT_IN_IS_CONSTANT_EVALUATED))\n+\t    && fndecl_built_in_p (callee, CP_BUILT_IN_IS_CONSTANT_EVALUATED,\n+\t\t\t\tBUILT_IN_FRONTEND))\n \t  break;\n \n \tx = copy_node (x);"}, {"sha": "c9c5fa6b4d5ad88d607f63ef59815dc678557274", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d78e00879b42574c9b0084c30f1361f0cfb9101/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d78e00879b42574c9b0084c30f1361f0cfb9101/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=3d78e00879b42574c9b0084c30f1361f0cfb9101", "patch": "@@ -968,7 +968,7 @@ decls_match (tree newdecl, tree olddecl, bool record_versions /* = true */)\n       if (same_type_p (TREE_TYPE (f1), r2))\n \t{\n \t  if (!prototype_p (f2) && DECL_EXTERN_C_P (olddecl)\n-\t      && (DECL_BUILT_IN (olddecl)\n+\t      && (fndecl_built_in_p (olddecl)\n #ifdef SYSTEM_IMPLICIT_EXTERN_C\n \t\t  || (DECL_IN_SYSTEM_HEADER (newdecl) && !DECL_CLASS_SCOPE_P (newdecl))\n \t\t  || (DECL_IN_SYSTEM_HEADER (olddecl) && !DECL_CLASS_SCOPE_P (olddecl))\n@@ -1208,7 +1208,7 @@ validate_constexpr_redeclaration (tree old_decl, tree new_decl)\n     return true;\n   if (TREE_CODE (old_decl) == FUNCTION_DECL)\n     {\n-      if (DECL_BUILT_IN (old_decl))\n+      if (fndecl_built_in_p (old_decl))\n \t{\n \t  /* Hide a built-in declaration.  */\n \t  DECL_DECLARED_CONSTEXPR_P (old_decl)\n@@ -1442,15 +1442,15 @@ duplicate_decls (tree newdecl, tree olddecl, bool newdecl_is_friend)\n \t    {\n \t      warning_at (newdecl_loc,\n \t\t\t  OPT_Wshadow, \n-\t\t\t  DECL_BUILT_IN (olddecl)\n+\t\t\t  fndecl_built_in_p (olddecl)\n \t\t\t  ? G_(\"shadowing built-in function %q#D\")\n \t\t\t  : G_(\"shadowing library function %q#D\"), olddecl);\n \t      /* Discard the old built-in function.  */\n \t      return NULL_TREE;\n \t    }\n \t  /* If the built-in is not ansi, then programs can override\n \t     it even globally without an error.  */\n-\t  else if (! DECL_BUILT_IN (olddecl))\n+\t  else if (! fndecl_built_in_p (olddecl))\n \t    warning_at (newdecl_loc, 0,\n \t\t\t\"library function %q#D redeclared as non-function %q#D\",\n \t\t\tolddecl, newdecl);\n@@ -1537,7 +1537,7 @@ next_arg:;\n \t      /* Don't really override olddecl for __* prefixed builtins\n \t\t except for __[^b]*_chk, the compiler might be using those\n \t\t explicitly.  */\n-\t      if (DECL_BUILT_IN (olddecl))\n+\t      if (fndecl_built_in_p (olddecl))\n \t\t{\n \t\t  tree id = DECL_NAME (olddecl);\n \t\t  const char *name = IDENTIFIER_POINTER (id);\n@@ -1578,9 +1578,9 @@ next_arg:;\n \t\t\t    \"declaration %q#D\", newdecl, olddecl);\n \t      else\n \t\twarning (OPT_Wshadow, \n-                         DECL_BUILT_IN (olddecl)\n-                         ? G_(\"shadowing built-in function %q#D\")\n-                         : G_(\"shadowing library function %q#D\"), olddecl);\n+\t\t\t fndecl_built_in_p (olddecl)\n+\t\t\t ? G_(\"shadowing built-in function %q#D\")\n+\t\t\t : G_(\"shadowing library function %q#D\"), olddecl);\n \t    }\n \t  else\n \t    /* Discard the old built-in function.  */\n@@ -2522,7 +2522,7 @@ next_arg:;\n       /* If redeclaring a builtin function, it stays built in\n \t if newdecl is a gnu_inline definition, or if newdecl is just\n \t a declaration.  */\n-      if (DECL_BUILT_IN (olddecl)\n+      if (fndecl_built_in_p (olddecl)\n \t  && (new_defines_function ? GNU_INLINE_P (newdecl) : types_match))\n \t{\n \t  DECL_BUILT_IN_CLASS (newdecl) = DECL_BUILT_IN_CLASS (olddecl);\n@@ -6611,7 +6611,7 @@ make_rtl_for_nonlocal_decl (tree decl, tree init, const char* asmspec)\n       else\n \t{\n \t  if (TREE_CODE (decl) == FUNCTION_DECL\n-\t      && DECL_BUILT_IN_CLASS (decl) == BUILT_IN_NORMAL)\n+\t      && fndecl_built_in_p (decl, BUILT_IN_NORMAL))\n \t    set_builtin_user_assembler_name (decl, asmspec);\n \t  set_user_assembler_name (decl, asmspec);\n \t}"}, {"sha": "8e009b29d61137e8c0bf75b82cf8ff55c7efd335", "filename": "gcc/cp/name-lookup.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d78e00879b42574c9b0084c30f1361f0cfb9101/gcc%2Fcp%2Fname-lookup.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d78e00879b42574c9b0084c30f1361f0cfb9101/gcc%2Fcp%2Fname-lookup.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fname-lookup.c?ref=3d78e00879b42574c9b0084c30f1361f0cfb9101", "patch": "@@ -5791,7 +5791,7 @@ consider_binding_level (tree name, best_match <tree, const char *> &bm,\n \n       /* Skip anticipated decls of builtin functions.  */\n       if (TREE_CODE (d) == FUNCTION_DECL\n-\t  && DECL_BUILT_IN (d)\n+\t  && fndecl_built_in_p (d)\n \t  && DECL_ANTICIPATED (d))\n \tcontinue;\n \n@@ -7274,7 +7274,7 @@ cp_emit_debug_info_for_using (tree t, tree context)\n      of a builtin function.  */\n   if (TREE_CODE (t) == FUNCTION_DECL\n       && DECL_EXTERNAL (t)\n-      && DECL_BUILT_IN (t))\n+      && fndecl_built_in_p (t))\n     return;\n \n   /* Do not supply context to imported_module_or_decl, if"}, {"sha": "b24d09224a963c72fb160357cde0f0278622f51c", "filename": "gcc/cp/semantics.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d78e00879b42574c9b0084c30f1361f0cfb9101/gcc%2Fcp%2Fsemantics.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d78e00879b42574c9b0084c30f1361f0cfb9101/gcc%2Fcp%2Fsemantics.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fsemantics.c?ref=3d78e00879b42574c9b0084c30f1361f0cfb9101", "patch": "@@ -2546,8 +2546,7 @@ finish_call_expr (tree fn, vec<tree, va_gc> **args, bool disallow_virtual,\n \n \t  if ((complain & tf_warning)\n \t      && TREE_CODE (fn) == FUNCTION_DECL\n-\t      && DECL_BUILT_IN_CLASS (fn) == BUILT_IN_NORMAL\n-\t      && DECL_FUNCTION_CODE (fn) == BUILT_IN_MEMSET\n+\t      && fndecl_built_in_p (fn, BUILT_IN_MEMSET)\n \t      && vec_safe_length (*args) == 3\n \t      && !any_type_dependent_arguments_p (*args))\n \t    {"}, {"sha": "c6f216dab4b907a224ce9e8dccc887abde685a86", "filename": "gcc/cp/tree.c", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d78e00879b42574c9b0084c30f1361f0cfb9101/gcc%2Fcp%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d78e00879b42574c9b0084c30f1361f0cfb9101/gcc%2Fcp%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftree.c?ref=3d78e00879b42574c9b0084c30f1361f0cfb9101", "patch": "@@ -420,9 +420,8 @@ builtin_valid_in_constant_expr_p (const_tree decl)\n     return false;\n   if (DECL_BUILT_IN_CLASS (decl) != BUILT_IN_NORMAL)\n     {\n-      if (DECL_BUILT_IN_CLASS (decl) == BUILT_IN_FRONTEND\n-\t  && ((int) DECL_FUNCTION_CODE (decl)\n-\t      == CP_BUILT_IN_IS_CONSTANT_EVALUATED))\n+      if (fndecl_built_in_p (decl, CP_BUILT_IN_IS_CONSTANT_EVALUATED,\n+\t\t\t   BUILT_IN_FRONTEND))\n \treturn true;\n       /* Not a built-in.  */\n       return false;"}, {"sha": "cfebfa0e110be56f17337dcb152984d782528889", "filename": "gcc/dse.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d78e00879b42574c9b0084c30f1361f0cfb9101/gcc%2Fdse.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d78e00879b42574c9b0084c30f1361f0cfb9101/gcc%2Fdse.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdse.c?ref=3d78e00879b42574c9b0084c30f1361f0cfb9101", "patch": "@@ -2419,8 +2419,7 @@ scan_insn (bb_info_t bb_info, rtx_insn *insn)\n \t  && GET_CODE (sym) == SYMBOL_REF\n \t  && SYMBOL_REF_DECL (sym)\n \t  && TREE_CODE (SYMBOL_REF_DECL (sym)) == FUNCTION_DECL\n-\t  && DECL_BUILT_IN_CLASS (SYMBOL_REF_DECL (sym)) == BUILT_IN_NORMAL\n-\t  && DECL_FUNCTION_CODE (SYMBOL_REF_DECL (sym)) == BUILT_IN_MEMSET)\n+\t  && fndecl_built_in_p (SYMBOL_REF_DECL (sym), BUILT_IN_MEMSET))\n \tmemset_call = SYMBOL_REF_DECL (sym);\n \n       if (const_call || memset_call)"}, {"sha": "2645c259af8d45495d089799e0df346f38d2d87b", "filename": "gcc/expr.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d78e00879b42574c9b0084c30f1361f0cfb9101/gcc%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d78e00879b42574c9b0084c30f1361f0cfb9101/gcc%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpr.c?ref=3d78e00879b42574c9b0084c30f1361f0cfb9101", "patch": "@@ -10937,7 +10937,7 @@ expand_expr_real_1 (tree exp, rtx target, machine_mode tmode,\n \t  }\n \n \t/* Check for a built-in function.  */\n-\tif (fndecl && DECL_BUILT_IN (fndecl))\n+\tif (fndecl && fndecl_built_in_p (fndecl))\n \t  {\n \t    gcc_assert (DECL_BUILT_IN_CLASS (fndecl) != BUILT_IN_FRONTEND);\n \t    return expand_builtin (exp, target, subtarget, tmode, ignore);"}, {"sha": "63e15f027fb4f10ffe02f4a3e9031fc68276ec7d", "filename": "gcc/fold-const.c", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d78e00879b42574c9b0084c30f1361f0cfb9101/gcc%2Ffold-const.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d78e00879b42574c9b0084c30f1361f0cfb9101/gcc%2Ffold-const.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffold-const.c?ref=3d78e00879b42574c9b0084c30f1361f0cfb9101", "patch": "@@ -3451,7 +3451,7 @@ operand_equal_p (const_tree arg0, const_tree arg1, unsigned int flags)\n     case tcc_declaration:\n       /* Consider __builtin_sqrt equal to sqrt.  */\n       return (TREE_CODE (arg0) == FUNCTION_DECL\n-\t      && DECL_BUILT_IN (arg0) && DECL_BUILT_IN (arg1)\n+\t      && fndecl_built_in_p (arg0) && fndecl_built_in_p (arg1)\n \t      && DECL_BUILT_IN_CLASS (arg0) == DECL_BUILT_IN_CLASS (arg1)\n \t      && DECL_FUNCTION_CODE (arg0) == DECL_FUNCTION_CODE (arg1));\n \n@@ -10761,8 +10761,7 @@ fold_binary_loc (location_t loc, enum tree_code code, tree type,\n \t  tree fndecl = get_callee_fndecl (arg0);\n \n \t  if (fndecl\n-\t      && DECL_BUILT_IN_CLASS (fndecl) == BUILT_IN_NORMAL\n-\t      && DECL_FUNCTION_CODE (fndecl) == BUILT_IN_STRLEN\n+\t      && fndecl_built_in_p (fndecl, BUILT_IN_STRLEN)\n \t      && call_expr_nargs (arg0) == 1\n \t      && TREE_CODE (TREE_TYPE (CALL_EXPR_ARG (arg0, 0))) == POINTER_TYPE)\n \t    {"}, {"sha": "cbca6a95b769cad77768b90ca7151befe131d4be", "filename": "gcc/gimple-fold.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d78e00879b42574c9b0084c30f1361f0cfb9101/gcc%2Fgimple-fold.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d78e00879b42574c9b0084c30f1361f0cfb9101/gcc%2Fgimple-fold.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-fold.c?ref=3d78e00879b42574c9b0084c30f1361f0cfb9101", "patch": "@@ -6347,8 +6347,7 @@ gimple_fold_stmt_to_constant_1 (gimple *stmt, tree (*valueize) (tree),\n \n \tfn = (*valueize) (gimple_call_fn (stmt));\n \tif (TREE_CODE (fn) == ADDR_EXPR\n-\t    && TREE_CODE (TREE_OPERAND (fn, 0)) == FUNCTION_DECL\n-\t    && DECL_BUILT_IN (TREE_OPERAND (fn, 0))\n+\t    && fndecl_built_in_p (TREE_OPERAND (fn, 0))\n \t    && gimple_builtin_call_types_compatible_p (stmt,\n \t\t\t\t\t\t       TREE_OPERAND (fn, 0)))\n \t  {"}, {"sha": "c3777a1e761736ef805cc37f1d753ba4b4f53332", "filename": "gcc/gimple-low.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d78e00879b42574c9b0084c30f1361f0cfb9101/gcc%2Fgimple-low.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d78e00879b42574c9b0084c30f1361f0cfb9101/gcc%2Fgimple-low.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-low.c?ref=3d78e00879b42574c9b0084c30f1361f0cfb9101", "patch": "@@ -355,7 +355,7 @@ lower_stmt (gimple_stmt_iterator *gsi, struct lower_data *data)\n \t  }\n \n \tif (decl\n-\t    && DECL_BUILT_IN_CLASS (decl) == BUILT_IN_NORMAL)\n+\t    && fndecl_built_in_p (decl, BUILT_IN_NORMAL))\n \t  {\n \t    if (DECL_FUNCTION_CODE (decl) == BUILT_IN_SETJMP)\n \t      {"}, {"sha": "83e22735571fea8d14187ccb6a83d39b96de7b6c", "filename": "gcc/gimple-pretty-print.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d78e00879b42574c9b0084c30f1361f0cfb9101/gcc%2Fgimple-pretty-print.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d78e00879b42574c9b0084c30f1361f0cfb9101/gcc%2Fgimple-pretty-print.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-pretty-print.c?ref=3d78e00879b42574c9b0084c30f1361f0cfb9101", "patch": "@@ -911,8 +911,7 @@ dump_gimple_call (pretty_printer *buffer, gcall *gs, int spc,\n   if (TREE_CODE (fn) == FUNCTION_DECL && decl_is_tm_clone (fn))\n     pp_string (buffer, \" [tm-clone]\");\n   if (TREE_CODE (fn) == FUNCTION_DECL\n-      && DECL_BUILT_IN_CLASS (fn) == BUILT_IN_NORMAL\n-      && DECL_FUNCTION_CODE (fn) == BUILT_IN_TM_START\n+      && fndecl_built_in_p (fn, BUILT_IN_TM_START)\n       && gimple_call_num_args (gs) > 0)\n     {\n       tree t = gimple_call_arg (gs, 0);"}, {"sha": "ea30b7108f8f9bbb526a280bd955ec2a8a85b71a", "filename": "gcc/gimple-ssa-warn-restrict.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d78e00879b42574c9b0084c30f1361f0cfb9101/gcc%2Fgimple-ssa-warn-restrict.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d78e00879b42574c9b0084c30f1361f0cfb9101/gcc%2Fgimple-ssa-warn-restrict.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-ssa-warn-restrict.c?ref=3d78e00879b42574c9b0084c30f1361f0cfb9101", "patch": "@@ -1731,7 +1731,7 @@ wrestrict_dom_walker::check_call (gimple *call)\n     return;\n \n   tree func = gimple_call_fndecl (call);\n-  if (!func || DECL_BUILT_IN_CLASS (func) != BUILT_IN_NORMAL)\n+  if (!func || !fndecl_built_in_p (func, BUILT_IN_NORMAL))\n     return;\n \n   /* Argument number to extract from the call (depends on the built-in"}, {"sha": "e3e651b1e61ddd5e817ea7b52deea4abca22d413", "filename": "gcc/gimple.c", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d78e00879b42574c9b0084c30f1361f0cfb9101/gcc%2Fgimple.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d78e00879b42574c9b0084c30f1361f0cfb9101/gcc%2Fgimple.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple.c?ref=3d78e00879b42574c9b0084c30f1361f0cfb9101", "patch": "@@ -376,7 +376,7 @@ gimple_build_call_from_tree (tree t, tree fnptrtype)\n   gimple_call_set_must_tail (call, CALL_EXPR_MUST_TAIL_CALL (t));\n   gimple_call_set_return_slot_opt (call, CALL_EXPR_RETURN_SLOT_OPT (t));\n   if (fndecl\n-      && DECL_BUILT_IN_CLASS (fndecl) == BUILT_IN_NORMAL\n+      && fndecl_built_in_p (fndecl, BUILT_IN_NORMAL)\n       && ALLOCA_FUNCTION_CODE_P (DECL_FUNCTION_CODE (fndecl)))\n     gimple_call_set_alloca_for_var (call, CALL_ALLOCA_FOR_VAR_P (t));\n   else\n@@ -2681,8 +2681,7 @@ gimple_call_builtin_p (const gimple *stmt, enum built_in_function code)\n   tree fndecl;\n   if (is_gimple_call (stmt)\n       && (fndecl = gimple_call_fndecl (stmt)) != NULL_TREE\n-      && DECL_BUILT_IN_CLASS (fndecl) == BUILT_IN_NORMAL \n-      && DECL_FUNCTION_CODE (fndecl) == code)\n+      && fndecl_built_in_p (fndecl, code))\n     return gimple_builtin_call_types_compatible_p (stmt, fndecl);\n   return false;\n }\n@@ -2701,7 +2700,7 @@ gimple_call_combined_fn (const gimple *stmt)\n \n       tree fndecl = gimple_call_fndecl (stmt);\n       if (fndecl\n-\t  && DECL_BUILT_IN_CLASS (fndecl) == BUILT_IN_NORMAL\n+\t  && fndecl_built_in_p (fndecl, BUILT_IN_NORMAL)\n \t  && gimple_builtin_call_types_compatible_p (stmt, fndecl))\n \treturn as_combined_fn (DECL_FUNCTION_CODE (fndecl));\n     }"}, {"sha": "dbd0f0ebd0cd40ddfc59f833b74022f9b0d332c6", "filename": "gcc/gimplify.c", "status": "modified", "additions": 6, "deletions": 11, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d78e00879b42574c9b0084c30f1361f0cfb9101/gcc%2Fgimplify.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d78e00879b42574c9b0084c30f1361f0cfb9101/gcc%2Fgimplify.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimplify.c?ref=3d78e00879b42574c9b0084c30f1361f0cfb9101", "patch": "@@ -3209,8 +3209,7 @@ gimplify_call_expr (tree *expr_p, gimple_seq *pre_p, bool want_value)\n      transform all calls in the same manner as the expanders do, but\n      we do transform most of them.  */\n   fndecl = get_callee_fndecl (*expr_p);\n-  if (fndecl\n-      && DECL_BUILT_IN_CLASS (fndecl) == BUILT_IN_NORMAL)\n+  if (fndecl && fndecl_built_in_p (fndecl, BUILT_IN_NORMAL))\n     switch (DECL_FUNCTION_CODE (fndecl))\n       {\n       CASE_BUILT_IN_ALLOCA:\n@@ -3245,7 +3244,7 @@ gimplify_call_expr (tree *expr_p, gimple_seq *pre_p, bool want_value)\n       default:\n         ;\n       }\n-  if (fndecl && DECL_BUILT_IN (fndecl))\n+  if (fndecl && fndecl_built_in_p (fndecl))\n     {\n       tree new_tree = fold_call_expr (input_location, *expr_p, !want_value);\n       if (new_tree && new_tree != *expr_p)\n@@ -3297,9 +3296,7 @@ gimplify_call_expr (tree *expr_p, gimple_seq *pre_p, bool want_value)\n       tree last_arg_fndecl = get_callee_fndecl (last_arg);\n \n       if (last_arg_fndecl\n-\t  && TREE_CODE (last_arg_fndecl) == FUNCTION_DECL\n-\t  && DECL_BUILT_IN_CLASS (last_arg_fndecl) == BUILT_IN_NORMAL\n-\t  && DECL_FUNCTION_CODE (last_arg_fndecl) == BUILT_IN_VA_ARG_PACK)\n+\t  && fndecl_built_in_p (last_arg_fndecl, BUILT_IN_VA_ARG_PACK))\n \t{\n \t  tree call = *expr_p;\n \n@@ -3773,8 +3770,7 @@ gimple_boolify (tree expr)\n       /* For __builtin_expect ((long) (x), y) recurse into x as well\n \t if x is truth_value_p.  */\n       if (fn\n-\t  && DECL_BUILT_IN_CLASS (fn) == BUILT_IN_NORMAL\n-\t  && DECL_FUNCTION_CODE (fn) == BUILT_IN_EXPECT\n+\t  && fndecl_built_in_p (fn, BUILT_IN_EXPECT)\n \t  && call_expr_nargs (call) == 2)\n \t{\n \t  tree arg = CALL_EXPR_ARG (call, 0);\n@@ -5719,8 +5715,7 @@ gimplify_modify_expr (tree *expr_p, gimple_seq *pre_p, gimple_seq *post_p,\n \t  STRIP_USELESS_TYPE_CONVERSION (CALL_EXPR_FN (*from_p));\n \t  tree fndecl = get_callee_fndecl (*from_p);\n \t  if (fndecl\n-\t      && DECL_BUILT_IN_CLASS (fndecl) == BUILT_IN_NORMAL\n-\t      && DECL_FUNCTION_CODE (fndecl) == BUILT_IN_EXPECT\n+\t      && fndecl_built_in_p (fndecl, BUILT_IN_EXPECT)\n \t      && call_expr_nargs (*from_p) == 3)\n \t    call_stmt = gimple_build_call_internal (IFN_BUILTIN_EXPECT, 3,\n \t\t\t\t\t\t    CALL_EXPR_ARG (*from_p, 0),\n@@ -5978,7 +5973,7 @@ gimplify_addr_expr (tree *expr_p, gimple_seq *pre_p, gimple_seq *post_p)\n \t being taken (we can unify those cases here) then we can mark\n \t the builtin for implicit generation by GCC.  */\n       if (TREE_CODE (op0) == FUNCTION_DECL\n-\t  && DECL_BUILT_IN_CLASS (op0) == BUILT_IN_NORMAL\n+\t  && fndecl_built_in_p (op0, BUILT_IN_NORMAL)\n \t  && builtin_decl_declared_p (DECL_FUNCTION_CODE (op0)))\n \tset_builtin_decl_implicit_p (DECL_FUNCTION_CODE (op0), true);\n "}, {"sha": "09f2b7fced662ca5fc1d423a8931c6219009079c", "filename": "gcc/go/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d78e00879b42574c9b0084c30f1361f0cfb9101/gcc%2Fgo%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d78e00879b42574c9b0084c30f1361f0cfb9101/gcc%2Fgo%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2FChangeLog?ref=3d78e00879b42574c9b0084c30f1361f0cfb9101", "patch": "@@ -1,3 +1,9 @@\n+2018-08-27  Martin Liska  <mliska@suse.cz>\n+\n+\t* go-gcc.cc (Gcc_backend::call_expression): Use new function\n+        fndecl_built_in_p and remove check for FUNCTION_DECL if\n+        possible.\n+\n 2018-07-20  Martin Sebor  <msebor@redhat.com>\n \n \tPR middle-end/82063"}, {"sha": "1a449b7cc470537a92c21ab3d4c0a0c9d1fa4234", "filename": "gcc/go/go-gcc.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d78e00879b42574c9b0084c30f1361f0cfb9101/gcc%2Fgo%2Fgo-gcc.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d78e00879b42574c9b0084c30f1361f0cfb9101/gcc%2Fgo%2Fgo-gcc.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgo-gcc.cc?ref=3d78e00879b42574c9b0084c30f1361f0cfb9101", "patch": "@@ -1948,8 +1948,8 @@ Gcc_backend::call_expression(Bfunction*, // containing fcn for call\n   tree excess_type = NULL_TREE;\n   if (optimize\n       && TREE_CODE(fndecl) == FUNCTION_DECL\n-      && DECL_IS_BUILTIN(fndecl)\n-      && DECL_BUILT_IN_CLASS(fndecl) == BUILT_IN_NORMAL\n+      && fndecl_built_in_p (fndecl, BUILT_IN_NORMAL)\n+      && DECL_IS_BUILTIN (fndecl)\n       && nargs > 0\n       && ((SCALAR_FLOAT_TYPE_P(rettype)\n \t   && SCALAR_FLOAT_TYPE_P(TREE_TYPE(args[0])))"}, {"sha": "69e092ec4fad2b3dffcbbbff503c6495ecd2c726", "filename": "gcc/hsa-gen.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d78e00879b42574c9b0084c30f1361f0cfb9101/gcc%2Fhsa-gen.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d78e00879b42574c9b0084c30f1361f0cfb9101/gcc%2Fhsa-gen.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fhsa-gen.c?ref=3d78e00879b42574c9b0084c30f1361f0cfb9101", "patch": "@@ -5300,8 +5300,7 @@ gen_hsa_insns_for_call (gimple *stmt, hsa_bb *hbb)\n       tree function_decl = gimple_call_fndecl (stmt);\n       /* Prefetch pass can create type-mismatching prefetch builtin calls which\n \t fail the gimple_call_builtin_p test above.  Handle them here.  */\n-      if (DECL_BUILT_IN_CLASS (function_decl)\n-\t  && DECL_FUNCTION_CODE (function_decl) == BUILT_IN_PREFETCH)\n+      if (fndecl_built_in_p (function_decl, BUILT_IN_PREFETCH))\n \treturn;\n \n       if (function_decl == NULL_TREE)"}, {"sha": "4838194cd7365da9caed7b9a7ce18e4ff762fa27", "filename": "gcc/ipa-cp.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d78e00879b42574c9b0084c30f1361f0cfb9101/gcc%2Fipa-cp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d78e00879b42574c9b0084c30f1361f0cfb9101/gcc%2Fipa-cp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-cp.c?ref=3d78e00879b42574c9b0084c30f1361f0cfb9101", "patch": "@@ -638,8 +638,7 @@ determine_versionability (struct cgraph_node *node,\n   if (DECL_EXTERNAL (node->decl))\n     for (cgraph_edge *edge = node->callees; !reason && edge;\n \t edge = edge->next_callee)\n-      if (DECL_BUILT_IN (edge->callee->decl)\n-\t  && DECL_BUILT_IN_CLASS (edge->callee->decl) == BUILT_IN_NORMAL)\n+      if (fndecl_built_in_p (edge->callee->decl, BUILT_IN_NORMAL))\n         {\n \t  if (DECL_FUNCTION_CODE (edge->callee->decl) == BUILT_IN_VA_ARG_PACK)\n \t    reason = \"external function which calls va_arg_pack\";"}, {"sha": "62095c6cf6f17418555072ccc3ce487c50d9f335", "filename": "gcc/ipa-fnsummary.c", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d78e00879b42574c9b0084c30f1361f0cfb9101/gcc%2Fipa-fnsummary.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d78e00879b42574c9b0084c30f1361f0cfb9101/gcc%2Fipa-fnsummary.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-fnsummary.c?ref=3d78e00879b42574c9b0084c30f1361f0cfb9101", "patch": "@@ -2455,10 +2455,8 @@ compute_fn_summary (struct cgraph_node *node, bool early)\n \t       for (e = node->callees; e; e = e->next_callee)\n \t\t {\n \t\t   tree cdecl = e->callee->decl;\n-\t\t   if (DECL_BUILT_IN (cdecl)\n-\t\t       && DECL_BUILT_IN_CLASS (cdecl) == BUILT_IN_NORMAL\n-\t\t       && (DECL_FUNCTION_CODE (cdecl) == BUILT_IN_APPLY_ARGS\n-\t\t\t   || DECL_FUNCTION_CODE (cdecl) == BUILT_IN_VA_START))\n+\t\t   if (fndecl_built_in_p (cdecl, BUILT_IN_APPLY_ARGS)\n+\t\t       || fndecl_built_in_p (cdecl, BUILT_IN_VA_START))\n \t\t     break;\n \t\t }\n \t       node->local.can_change_signature = !e;"}, {"sha": "1e3a92a125f5adddf05c98e3e96ac4ed60b45e9d", "filename": "gcc/ipa-param-manipulation.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d78e00879b42574c9b0084c30f1361f0cfb9101/gcc%2Fipa-param-manipulation.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d78e00879b42574c9b0084c30f1361f0cfb9101/gcc%2Fipa-param-manipulation.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-param-manipulation.c?ref=3d78e00879b42574c9b0084c30f1361f0cfb9101", "patch": "@@ -218,7 +218,7 @@ ipa_modify_formal_parameters (tree fndecl, ipa_parm_adjustment_vec adjustments)\n     }\n \n   /* When signature changes, we need to clear builtin info.  */\n-  if (DECL_BUILT_IN (fndecl))\n+  if (fndecl_built_in_p (fndecl))\n     {\n       DECL_BUILT_IN_CLASS (fndecl) = NOT_BUILT_IN;\n       DECL_FUNCTION_CODE (fndecl) = (enum built_in_function) 0;"}, {"sha": "38f5bcf00a6f2b36052caccd520e0b3ba81cb24c", "filename": "gcc/ipa-split.c", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d78e00879b42574c9b0084c30f1361f0cfb9101/gcc%2Fipa-split.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d78e00879b42574c9b0084c30f1361f0cfb9101/gcc%2Fipa-split.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-split.c?ref=3d78e00879b42574c9b0084c30f1361f0cfb9101", "patch": "@@ -899,8 +899,7 @@ visit_bb (basic_block bb, basic_block return_bb,\n       /* Check builtins that prevent splitting.  */\n       if (gimple_code (stmt) == GIMPLE_CALL\n \t  && (decl = gimple_call_fndecl (stmt)) != NULL_TREE\n-\t  && DECL_BUILT_IN (decl)\n-\t  && DECL_BUILT_IN_CLASS (decl) == BUILT_IN_NORMAL)\n+\t  && fndecl_built_in_p (decl, BUILT_IN_NORMAL))\n \tswitch (DECL_FUNCTION_CODE (decl))\n \t  {\n \t  /* FIXME: once we will allow passing non-parm values to split part,\n@@ -1347,7 +1346,7 @@ split_function (basic_block return_bb, struct split_point *split_point,\n   /* For usual cloning it is enough to clear builtin only when signature\n      changes.  For partial inlining we however can not expect the part\n      of builtin implementation to have same semantic as the whole.  */\n-  if (DECL_BUILT_IN (node->decl))\n+  if (fndecl_built_in_p (node->decl))\n     {\n       DECL_BUILT_IN_CLASS (node->decl) = NOT_BUILT_IN;\n       DECL_FUNCTION_CODE (node->decl) = (enum built_in_function) 0;"}, {"sha": "000207fa31b846b389d28a1f70caf0d896716ddb", "filename": "gcc/ipa-visibility.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d78e00879b42574c9b0084c30f1361f0cfb9101/gcc%2Fipa-visibility.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d78e00879b42574c9b0084c30f1361f0cfb9101/gcc%2Fipa-visibility.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-visibility.c?ref=3d78e00879b42574c9b0084c30f1361f0cfb9101", "patch": "@@ -203,7 +203,7 @@ cgraph_externally_visible_p (struct cgraph_node *node,\n      using the implicit built-in declarations anymore.  Similarly this enables\n      us to remove them as unreachable before actual calls may appear during\n      expansion or folding.  */\n-  if (DECL_BUILT_IN (node->decl))\n+  if (fndecl_built_in_p (node->decl))\n     return true;\n \n   /* If linker counts on us, we must preserve the function.  */"}, {"sha": "1e6a7adeaa20a7b1594169e1f1f7be043f81d685", "filename": "gcc/lto-cgraph.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d78e00879b42574c9b0084c30f1361f0cfb9101/gcc%2Flto-cgraph.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d78e00879b42574c9b0084c30f1361f0cfb9101/gcc%2Flto-cgraph.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flto-cgraph.c?ref=3d78e00879b42574c9b0084c30f1361f0cfb9101", "patch": "@@ -1266,7 +1266,7 @@ input_node (struct lto_file_decl_data *file_data,\n      have already been read will have their tag stored in the 'aux'\n      field.  Since built-in functions can be referenced in multiple\n      functions, they are expected to be read more than once.  */\n-  if (node->aux && !DECL_BUILT_IN (node->decl))\n+  if (node->aux && !fndecl_built_in_p (node->decl))\n     internal_error (\"bytecode stream: found multiple instances of cgraph \"\n \t\t    \"node with uid %d\", node->get_uid ());\n "}, {"sha": "f9d0f3e08ec4745eb5c92a1112c1f2ab627e3383", "filename": "gcc/lto-streamer-out.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d78e00879b42574c9b0084c30f1361f0cfb9101/gcc%2Flto-streamer-out.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d78e00879b42574c9b0084c30f1361f0cfb9101/gcc%2Flto-streamer-out.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flto-streamer-out.c?ref=3d78e00879b42574c9b0084c30f1361f0cfb9101", "patch": "@@ -2618,7 +2618,8 @@ write_symbol (struct streamer_tree_cache_d *cache,\n   unsigned char c;\n \n   gcc_checking_assert (TREE_PUBLIC (t)\n-\t\t       && !is_builtin_fn (t)\n+\t\t       && (TREE_CODE (t) != FUNCTION_DECL\n+\t\t\t   || !fndecl_built_in_p (t))\n \t\t       && !DECL_ABSTRACT_P (t)\n \t\t       && (!VAR_P (t) || !DECL_HARD_REGISTER (t)));\n "}, {"sha": "c05f6fbe5dca3c641ab436e5619a44a592191993", "filename": "gcc/lto/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d78e00879b42574c9b0084c30f1361f0cfb9101/gcc%2Flto%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d78e00879b42574c9b0084c30f1361f0cfb9101/gcc%2Flto%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flto%2FChangeLog?ref=3d78e00879b42574c9b0084c30f1361f0cfb9101", "patch": "@@ -1,3 +1,14 @@\n+2018-08-27  Martin Liska  <mliska@suse.cz>\n+\n+\t* lto-lang.c (handle_const_attribute): Use new function\n+        fndecl_built_in_p and remove check for FUNCTION_DECL if\n+        possible.\n+\t* lto-symtab.c (lto_symtab_merge_p): Likewise.\n+\t(lto_symtab_merge_decls_1): Likewise.\n+\t(lto_symtab_merge_symbols): Likewise.\n+\t* lto.c (lto_maybe_register_decl): Likewise.\n+\t(read_cgraph_and_symbols): Likewise.\n+\n 2018-08-21  Tom de Vries  <tdevries@suse.de>\n \n \t* lto.c (lto_main):  Call debuginfo_early_start and"}, {"sha": "8eb4a25a6340df346648cddce38ad4f2cc5f249e", "filename": "gcc/lto/lto-lang.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d78e00879b42574c9b0084c30f1361f0cfb9101/gcc%2Flto%2Flto-lang.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d78e00879b42574c9b0084c30f1361f0cfb9101/gcc%2Flto%2Flto-lang.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flto%2Flto-lang.c?ref=3d78e00879b42574c9b0084c30f1361f0cfb9101", "patch": "@@ -303,8 +303,7 @@ handle_const_attribute (tree *node, tree ARG_UNUSED (name),\n \t\t\ttree ARG_UNUSED (args), int ARG_UNUSED (flags),\n \t\t\tbool * ARG_UNUSED (no_add_attrs))\n {\n-  if (TREE_CODE (*node) != FUNCTION_DECL\n-      || !DECL_BUILT_IN (*node))\n+  if (!fndecl_built_in_p (*node))\n     inform (UNKNOWN_LOCATION, \"%s:%s: %E: %E\", __FILE__, __func__, *node, name);\n \n   tree type = TREE_TYPE (*node);"}, {"sha": "cf08d455d877808b484bf2f18b01ae55da4c0387", "filename": "gcc/lto/lto-symtab.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d78e00879b42574c9b0084c30f1361f0cfb9101/gcc%2Flto%2Flto-symtab.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d78e00879b42574c9b0084c30f1361f0cfb9101/gcc%2Flto%2Flto-symtab.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flto%2Flto-symtab.c?ref=3d78e00879b42574c9b0084c30f1361f0cfb9101", "patch": "@@ -546,14 +546,14 @@ lto_symtab_merge_p (tree prevailing, tree decl)\n   \n   if (TREE_CODE (prevailing) == FUNCTION_DECL)\n     {\n-      if (DECL_BUILT_IN (prevailing) != DECL_BUILT_IN (decl))\n+      if (fndecl_built_in_p (prevailing) != fndecl_built_in_p (decl))\n \t{\n \t  if (dump_file)\n \t    fprintf (dump_file, \"Not merging decls; \"\n \t\t     \"DECL_BUILT_IN mismatch\\n\");\n \t  return false;\n \t}\n-      if (DECL_BUILT_IN (prevailing)\n+      if (fndecl_built_in_p (prevailing)\n \t  && (DECL_BUILT_IN_CLASS (prevailing) != DECL_BUILT_IN_CLASS (decl)\n \t      || DECL_FUNCTION_CODE (prevailing) != DECL_FUNCTION_CODE (decl)))\n \t{\n@@ -797,7 +797,7 @@ lto_symtab_merge_decls_1 (symtab_node *first)\n \t{\n \t  for (e = first; e; e = e->next_sharing_asm_name)\n \t    if (TREE_CODE (e->decl) == FUNCTION_DECL\n-\t\t&& !DECL_BUILT_IN (e->decl)\n+\t\t&& !fndecl_built_in_p (e->decl)\n \t\t&& lto_symtab_symbol_p (e))\n \t      {\n \t\tprevailing = e;\n@@ -1030,7 +1030,7 @@ lto_symtab_merge_symbols (void)\n \t      /* Builtins are not merged via decl merging.  It is however\n \t\t possible that tree merging unified the declaration.  We\n \t\t do not want duplicate entries in symbol table.  */\n-\t      if (cnode && DECL_BUILT_IN (node->decl)\n+\t      if (cnode && fndecl_built_in_p (node->decl)\n \t\t  && (cnode2 = cgraph_node::get (node->decl))\n \t\t  && cnode2 != cnode)\n \t\tlto_cgraph_replace_node (cnode2, cnode);"}, {"sha": "5b92bee026e81abec7c8c4a095cdf1074b0e80d4", "filename": "gcc/lto/lto.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d78e00879b42574c9b0084c30f1361f0cfb9101/gcc%2Flto%2Flto.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d78e00879b42574c9b0084c30f1361f0cfb9101/gcc%2Flto%2Flto.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flto%2Flto.c?ref=3d78e00879b42574c9b0084c30f1361f0cfb9101", "patch": "@@ -894,7 +894,7 @@ lto_maybe_register_decl (struct data_in *data_in, tree t, unsigned ix)\n   if (TREE_CODE (t) == VAR_DECL)\n     lto_register_var_decl_in_symtab (data_in, t, ix);\n   else if (TREE_CODE (t) == FUNCTION_DECL\n-\t   && !DECL_BUILT_IN (t))\n+\t   && !fndecl_built_in_p (t))\n     lto_register_function_decl_in_symtab (data_in, t, ix);\n }\n \n@@ -2923,7 +2923,8 @@ read_cgraph_and_symbols (unsigned nfiles, const char **fnames)\n   FOR_EACH_SYMBOL (snode)\n     if (snode->externally_visible && snode->real_symbol_p ()\n \t&& snode->lto_file_data && snode->lto_file_data->resolution_map\n-\t&& !is_builtin_fn (snode->decl)\n+\t&& !(TREE_CODE (snode->decl) != FUNCTION_DECL\n+\t     || fndecl_built_in_p (snode->decl))\n \t&& !(VAR_P (snode->decl) && DECL_HARD_REGISTER (snode->decl)))\n       {\n \tld_plugin_symbol_resolution_t *res;"}, {"sha": "fdabf67249b5827ae1bddf1762d31492ee5a3d3c", "filename": "gcc/omp-low.c", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d78e00879b42574c9b0084c30f1361f0cfb9101/gcc%2Fomp-low.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d78e00879b42574c9b0084c30f1361f0cfb9101/gcc%2Fomp-low.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fomp-low.c?ref=3d78e00879b42574c9b0084c30f1361f0cfb9101", "patch": "@@ -2975,9 +2975,8 @@ scan_omp_1_op (tree *tp, int *walk_subtrees, void *data)\n static bool\n setjmp_or_longjmp_p (const_tree fndecl)\n {\n-  if (DECL_BUILT_IN_CLASS (fndecl) == BUILT_IN_NORMAL\n-      && (DECL_FUNCTION_CODE (fndecl) == BUILT_IN_SETJMP\n-\t  || DECL_FUNCTION_CODE (fndecl) == BUILT_IN_LONGJMP))\n+  if (fndecl_built_in_p (fndecl, BUILT_IN_SETJMP)\n+      || fndecl_built_in_p (fndecl, BUILT_IN_LONGJMP))\n     return true;\n \n   tree declname = DECL_NAME (fndecl);\n@@ -8832,7 +8831,7 @@ lower_omp_1 (gimple_stmt_iterator *gsi_p, omp_context *ctx)\n       call_stmt = as_a <gcall *> (stmt);\n       fndecl = gimple_call_fndecl (call_stmt);\n       if (fndecl\n-\t  && DECL_BUILT_IN_CLASS (fndecl) == BUILT_IN_NORMAL)\n+\t  && fndecl_built_in_p (fndecl, BUILT_IN_NORMAL))\n \tswitch (DECL_FUNCTION_CODE (fndecl))\n \t  {\n \t  case BUILT_IN_GOMP_BARRIER:"}, {"sha": "ca6a901cd5615c00ad5f2fe3c6cafc0974a772e3", "filename": "gcc/predict.c", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d78e00879b42574c9b0084c30f1361f0cfb9101/gcc%2Fpredict.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d78e00879b42574c9b0084c30f1361f0cfb9101/gcc%2Fpredict.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fpredict.c?ref=3d78e00879b42574c9b0084c30f1361f0cfb9101", "patch": "@@ -3996,10 +3996,12 @@ strip_predict_hints (function *fun, bool early)\n \t      tree fndecl = gimple_call_fndecl (stmt);\n \n \t      if (!early\n-\t\t  && ((DECL_BUILT_IN_P (fndecl, BUILT_IN_NORMAL, BUILT_IN_EXPECT)\n+\t\t  && ((fndecl != NULL_TREE\n+\t\t       && fndecl_built_in_p (fndecl, BUILT_IN_EXPECT)\n \t\t       && gimple_call_num_args (stmt) == 2)\n-\t\t      || (DECL_BUILT_IN_P (fndecl, BUILT_IN_NORMAL,\n-\t\t\t\t\t   BUILT_IN_EXPECT_WITH_PROBABILITY)\n+\t\t      || (fndecl != NULL_TREE\n+\t\t\t  && fndecl_built_in_p (fndecl,\n+\t\t\t\t\t\tBUILT_IN_EXPECT_WITH_PROBABILITY)\n \t\t\t  && gimple_call_num_args (stmt) == 3)\n \t\t      || (gimple_call_internal_p (stmt)\n \t\t\t  && gimple_call_internal_fn (stmt) == IFN_BUILTIN_EXPECT)))"}, {"sha": "8caf9dd0dd085c96a1b2e7ecffe7723a25771a37", "filename": "gcc/print-tree.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d78e00879b42574c9b0084c30f1361f0cfb9101/gcc%2Fprint-tree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d78e00879b42574c9b0084c30f1361f0cfb9101/gcc%2Fprint-tree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fprint-tree.c?ref=3d78e00879b42574c9b0084c30f1361f0cfb9101", "patch": "@@ -427,7 +427,7 @@ print_node (FILE *file, const char *prefix, tree node, int indent,\n \tfputs (\" autoinline\", file);\n       if (code == FUNCTION_DECL && DECL_UNINLINABLE (node))\n \tfputs (\" uninlinable\", file);\n-      if (code == FUNCTION_DECL && DECL_BUILT_IN (node))\n+      if (code == FUNCTION_DECL && fndecl_built_in_p (node))\n \tfputs (\" built-in\", file);\n       if (code == FUNCTION_DECL && DECL_STATIC_CHAIN (node))\n \tfputs (\" static-chain\", file);\n@@ -502,7 +502,7 @@ print_node (FILE *file, const char *prefix, tree node, int indent,\n \t  print_node (file, \"size\", DECL_SIZE (node), indent + 4);\n \t  print_node (file, \"unit-size\", DECL_SIZE_UNIT (node), indent + 4);\n \n-\t  if (code != FUNCTION_DECL || DECL_BUILT_IN (node))\n+\t  if (code != FUNCTION_DECL || fndecl_built_in_p (node))\n \t    indent_to (file, indent + 3);\n \n \t  if (DECL_USER_ALIGN (node))\n@@ -514,7 +514,7 @@ print_node (FILE *file, const char *prefix, tree node, int indent,\n \t    fprintf (file, \" offset_align \" HOST_WIDE_INT_PRINT_UNSIGNED,\n \t\t     DECL_OFFSET_ALIGN (node));\n \n-\t  if (code == FUNCTION_DECL && DECL_BUILT_IN (node))\n+\t  if (code == FUNCTION_DECL && fndecl_built_in_p (node))\n \t    {\n \t      if (DECL_BUILT_IN_CLASS (node) == BUILT_IN_MD)\n \t\tfprintf (file, \" built-in: BUILT_IN_MD:%d\", DECL_FUNCTION_CODE (node));"}, {"sha": "3cf1f629413768363925a3a13c153e5b290c5057", "filename": "gcc/symtab.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d78e00879b42574c9b0084c30f1361f0cfb9101/gcc%2Fsymtab.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d78e00879b42574c9b0084c30f1361f0cfb9101/gcc%2Fsymtab.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsymtab.c?ref=3d78e00879b42574c9b0084c30f1361f0cfb9101", "patch": "@@ -2323,7 +2323,7 @@ symtab_node::output_to_lto_symbol_table_p (void)\n     return false;\n   /* FIXME: Builtins corresponding to real functions probably should have\n      symbol table entries.  */\n-  if (is_builtin_fn (decl))\n+  if (TREE_CODE (decl) == FUNCTION_DECL && fndecl_built_in_p (decl))\n     return false;\n \n   /* We have real symbol that should be in symbol table.  However try to trim"}, {"sha": "1d4eb80620295ae9ab48ee2c18ac0bf282fff399", "filename": "gcc/trans-mem.c", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d78e00879b42574c9b0084c30f1361f0cfb9101/gcc%2Ftrans-mem.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d78e00879b42574c9b0084c30f1361f0cfb9101/gcc%2Ftrans-mem.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftrans-mem.c?ref=3d78e00879b42574c9b0084c30f1361f0cfb9101", "patch": "@@ -235,8 +235,7 @@ is_tm_irrevocable (tree x)\n   if (TREE_CODE (x) == ADDR_EXPR)\n     x = TREE_OPERAND (x, 0);\n   if (TREE_CODE (x) == FUNCTION_DECL\n-      && DECL_BUILT_IN_CLASS (x) == BUILT_IN_NORMAL\n-      && DECL_FUNCTION_CODE (x) == BUILT_IN_TM_IRREVOCABLE)\n+      && fndecl_built_in_p (x, BUILT_IN_TM_IRREVOCABLE))\n     return true;\n \n   return false;\n@@ -358,7 +357,8 @@ is_tm_load (gimple *stmt)\n     return false;\n \n   fndecl = gimple_call_fndecl (stmt);\n-  return (fndecl && DECL_BUILT_IN_CLASS (fndecl) == BUILT_IN_NORMAL\n+  return (fndecl\n+\t  && fndecl_built_in_p (fndecl, BUILT_IN_NORMAL)\n \t  && BUILTIN_TM_LOAD_P (DECL_FUNCTION_CODE (fndecl)));\n }\n \n@@ -374,7 +374,7 @@ is_tm_simple_load (gimple *stmt)\n     return false;\n \n   fndecl = gimple_call_fndecl (stmt);\n-  if (fndecl && DECL_BUILT_IN_CLASS (fndecl) == BUILT_IN_NORMAL)\n+  if (fndecl && fndecl_built_in_p (fndecl, BUILT_IN_NORMAL))\n     {\n       enum built_in_function fcode = DECL_FUNCTION_CODE (fndecl);\n       return (fcode == BUILT_IN_TM_LOAD_1\n@@ -402,7 +402,8 @@ is_tm_store (gimple *stmt)\n     return false;\n \n   fndecl = gimple_call_fndecl (stmt);\n-  return (fndecl && DECL_BUILT_IN_CLASS (fndecl) == BUILT_IN_NORMAL\n+  return (fndecl\n+\t  && fndecl_built_in_p (fndecl, BUILT_IN_NORMAL)\n \t  && BUILTIN_TM_STORE_P (DECL_FUNCTION_CODE (fndecl)));\n }\n \n@@ -418,7 +419,8 @@ is_tm_simple_store (gimple *stmt)\n     return false;\n \n   fndecl = gimple_call_fndecl (stmt);\n-  if (fndecl && DECL_BUILT_IN_CLASS (fndecl) == BUILT_IN_NORMAL)\n+  if (fndecl\n+      && fndecl_built_in_p (fndecl, BUILT_IN_NORMAL))\n     {\n       enum built_in_function fcode = DECL_FUNCTION_CODE (fndecl);\n       return (fcode == BUILT_IN_TM_STORE_1\n@@ -440,9 +442,7 @@ is_tm_simple_store (gimple *stmt)\n static bool\n is_tm_abort (tree fndecl)\n {\n-  return (fndecl\n-\t  && DECL_BUILT_IN_CLASS (fndecl) == BUILT_IN_NORMAL\n-\t  && DECL_FUNCTION_CODE (fndecl) == BUILT_IN_TM_ABORT);\n+  return (fndecl && fndecl_built_in_p (fndecl, BUILT_IN_TM_ABORT));\n }\n \n /* Build a GENERIC tree for a user abort.  This is called by front ends\n@@ -2007,7 +2007,7 @@ tm_region_init_1 (struct tm_region *region, basic_block bb)\n       if (gimple_code (g) == GIMPLE_CALL)\n \t{\n \t  tree fn = gimple_call_fndecl (g);\n-\t  if (fn && DECL_BUILT_IN_CLASS (fn) == BUILT_IN_NORMAL)\n+\t  if (fn && fndecl_built_in_p (fn, BUILT_IN_NORMAL))\n \t    {\n \t      if ((DECL_FUNCTION_CODE (fn) == BUILT_IN_TM_COMMIT\n \t\t   || DECL_FUNCTION_CODE (fn) == BUILT_IN_TM_COMMIT_EH)"}, {"sha": "01401cad6e6c17c9b2896d5a40d674266e3d800a", "filename": "gcc/tree-call-cdce.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d78e00879b42574c9b0084c30f1361f0cfb9101/gcc%2Ftree-call-cdce.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d78e00879b42574c9b0084c30f1361f0cfb9101/gcc%2Ftree-call-cdce.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-call-cdce.c?ref=3d78e00879b42574c9b0084c30f1361f0cfb9101", "patch": "@@ -737,7 +737,7 @@ gen_shrink_wrap_conditions (gcall *bi_call, vec<gimple *> conds,\n \n   call = bi_call;\n   fn = gimple_call_fndecl (call);\n-  gcc_assert (fn && DECL_BUILT_IN (fn));\n+  gcc_assert (fn && fndecl_built_in_p (fn));\n   fnc = DECL_FUNCTION_CODE (fn);\n   *nconds = 0;\n "}, {"sha": "cf12cb1f3913f597543727cb2bb6affb7dbf6041", "filename": "gcc/tree-cfg.c", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d78e00879b42574c9b0084c30f1361f0cfb9101/gcc%2Ftree-cfg.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d78e00879b42574c9b0084c30f1361f0cfb9101/gcc%2Ftree-cfg.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-cfg.c?ref=3d78e00879b42574c9b0084c30f1361f0cfb9101", "patch": "@@ -3426,7 +3426,7 @@ verify_gimple_call (gcall *stmt)\n       return true;\n     }\n \n-  if (fndecl && DECL_BUILT_IN_CLASS (fndecl) == BUILT_IN_NORMAL)\n+  if (fndecl && fndecl_built_in_p (fndecl, BUILT_IN_NORMAL))\n     {\n       switch (DECL_FUNCTION_CODE (fndecl))\n \t{\n@@ -6882,7 +6882,7 @@ move_stmt_r (gimple_stmt_iterator *gsi_p, bool *handled_ops_p,\n       /* Remap the region numbers for __builtin_eh_{pointer,filter}.  */\n       {\n \ttree r, fndecl = gimple_call_fndecl (stmt);\n-\tif (fndecl && DECL_BUILT_IN_CLASS (fndecl) == BUILT_IN_NORMAL)\n+\tif (fndecl && fndecl_built_in_p (fndecl, BUILT_IN_NORMAL))\n \t  switch (DECL_FUNCTION_CODE (fndecl))\n \t    {\n \t    case BUILT_IN_EH_COPY_VALUES:\n@@ -8303,15 +8303,14 @@ stmt_can_terminate_bb_p (gimple *t)\n \n   if (is_gimple_call (t)\n       && fndecl\n-      && DECL_BUILT_IN (fndecl)\n+      && fndecl_built_in_p (fndecl)\n       && (call_flags & ECF_NOTHROW)\n       && !(call_flags & ECF_RETURNS_TWICE)\n       /* fork() doesn't really return twice, but the effect of\n          wrapping it in __gcov_fork() which calls __gcov_flush()\n \t and clears the counters before forking has the same\n \t effect as returning twice.  Force a fake edge.  */\n-      && !(DECL_BUILT_IN_CLASS (fndecl) == BUILT_IN_NORMAL\n-\t   && DECL_FUNCTION_CODE (fndecl) == BUILT_IN_FORK))\n+      && !fndecl_built_in_p (fndecl, BUILT_IN_FORK))\n     return false;\n \n   if (is_gimple_call (t))"}, {"sha": "fb931aa4389469ccb2c32a89313e5c9c6760d6bc", "filename": "gcc/tree-eh.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d78e00879b42574c9b0084c30f1361f0cfb9101/gcc%2Ftree-eh.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d78e00879b42574c9b0084c30f1361f0cfb9101/gcc%2Ftree-eh.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-eh.c?ref=3d78e00879b42574c9b0084c30f1361f0cfb9101", "patch": "@@ -1984,7 +1984,7 @@ lower_eh_constructs_2 (struct leh_state *state, gimple_stmt_iterator *gsi)\n \ttree fndecl = gimple_call_fndecl (stmt);\n \ttree rhs, lhs;\n \n-\tif (fndecl && DECL_BUILT_IN_CLASS (fndecl) == BUILT_IN_NORMAL)\n+\tif (fndecl && fndecl_built_in_p (fndecl, BUILT_IN_NORMAL))\n \t  switch (DECL_FUNCTION_CODE (fndecl))\n \t    {\n \t    case BUILT_IN_EH_POINTER:"}, {"sha": "77eefac4e341f8f9f054bc4c43f92f080fb332a0", "filename": "gcc/tree-if-conv.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d78e00879b42574c9b0084c30f1361f0cfb9101/gcc%2Ftree-if-conv.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d78e00879b42574c9b0084c30f1361f0cfb9101/gcc%2Ftree-if-conv.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-if-conv.c?ref=3d78e00879b42574c9b0084c30f1361f0cfb9101", "patch": "@@ -1079,7 +1079,7 @@ if_convertible_stmt_p (gimple *stmt, vec<data_reference_p> refs)\n \t\t&& !(flags & ECF_LOOPING_CONST_OR_PURE)\n \t\t/* We can only vectorize some builtins at the moment,\n \t\t   so restrict if-conversion to those.  */\n-\t\t&& DECL_BUILT_IN (fndecl))\n+\t\t&& fndecl_built_in_p (fndecl))\n \t      return true;\n \t  }\n \treturn false;"}, {"sha": "9352acc8af6bd938ba6b252ba3e9ab58ef7d92c0", "filename": "gcc/tree-inline.c", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d78e00879b42574c9b0084c30f1361f0cfb9101/gcc%2Ftree-inline.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d78e00879b42574c9b0084c30f1361f0cfb9101/gcc%2Ftree-inline.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-inline.c?ref=3d78e00879b42574c9b0084c30f1361f0cfb9101", "patch": "@@ -1702,7 +1702,7 @@ remap_gimple_stmt (gimple *stmt, copy_body_data *id)\n \t  case GIMPLE_CALL:\n \t    {\n \t      tree r, fndecl = gimple_call_fndecl (copy);\n-\t      if (fndecl && DECL_BUILT_IN_CLASS (fndecl) == BUILT_IN_NORMAL)\n+\t      if (fndecl && fndecl_built_in_p (fndecl, BUILT_IN_NORMAL))\n \t\tswitch (DECL_FUNCTION_CODE (fndecl))\n \t\t  {\n \t\t  case BUILT_IN_EH_COPY_VALUES:\n@@ -1939,8 +1939,7 @@ copy_bb (copy_body_data *id, basic_block bb,\n \t  else if (call_stmt\n \t\t   && id->call_stmt\n \t\t   && (decl = gimple_call_fndecl (stmt))\n-\t\t   && DECL_BUILT_IN_CLASS (decl) == BUILT_IN_NORMAL\n-\t\t   && DECL_FUNCTION_CODE (decl) == BUILT_IN_VA_ARG_PACK_LEN)\n+\t\t   && fndecl_built_in_p (decl, BUILT_IN_VA_ARG_PACK_LEN))\n \t    {\n \t      /* __builtin_va_arg_pack_len () should be replaced by\n \t\t the number of anonymous arguments.  */\n@@ -4039,7 +4038,7 @@ estimate_num_insns (gimple *stmt, eni_weights *weights)\n \tif (gimple_call_internal_p (stmt))\n \t  return 0;\n \telse if ((decl = gimple_call_fndecl (stmt))\n-\t\t && DECL_BUILT_IN (decl))\n+\t\t && fndecl_built_in_p (decl))\n \t  {\n \t    /* Do not special case builtins where we see the body.\n \t       This just confuse inliner.  */\n@@ -4903,7 +4902,7 @@ fold_marked_statements (int first, hash_set<gimple *> *statements)\n \t      gimple *old_stmt = gsi_stmt (gsi);\n \t      tree old_decl = is_gimple_call (old_stmt) ? gimple_call_fndecl (old_stmt) : 0;\n \n-\t      if (old_decl && DECL_BUILT_IN (old_decl))\n+\t      if (old_decl && fndecl_built_in_p (old_decl))\n \t\t{\n \t\t  /* Folding builtins can create multiple instructions,\n \t\t     we need to look at all of them.  */"}, {"sha": "a9681ece0ae45a8ecb042c9ef920a4a12de5e91a", "filename": "gcc/tree-sra.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d78e00879b42574c9b0084c30f1361f0cfb9101/gcc%2Ftree-sra.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d78e00879b42574c9b0084c30f1361f0cfb9101/gcc%2Ftree-sra.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-sra.c?ref=3d78e00879b42574c9b0084c30f1361f0cfb9101", "patch": "@@ -1498,8 +1498,7 @@ scan_function (void)\n \n \t\t  if (dest)\n \t\t    {\n-\t\t      if (DECL_BUILT_IN_CLASS (dest) == BUILT_IN_NORMAL\n-\t\t\t  && DECL_FUNCTION_CODE (dest) == BUILT_IN_APPLY_ARGS)\n+\t\t      if (fndecl_built_in_p (dest, BUILT_IN_APPLY_ARGS))\n \t\t\tencountered_apply_args = true;\n \t\t      if (recursive_call_p (current_function_decl, dest))\n \t\t\t{"}, {"sha": "95368a5c79d21c9f1bda0d2f896a1d613fbeead9", "filename": "gcc/tree-ssa-ccp.c", "status": "modified", "additions": 5, "deletions": 8, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d78e00879b42574c9b0084c30f1361f0cfb9101/gcc%2Ftree-ssa-ccp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d78e00879b42574c9b0084c30f1361f0cfb9101/gcc%2Ftree-ssa-ccp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-ccp.c?ref=3d78e00879b42574c9b0084c30f1361f0cfb9101", "patch": "@@ -807,7 +807,7 @@ surely_varying_stmt_p (gimple *stmt)\n       tree fndecl, fntype = gimple_call_fntype (stmt);\n       if (!gimple_call_lhs (stmt)\n \t  || ((fndecl = gimple_call_fndecl (stmt)) != NULL_TREE\n-\t      && !DECL_BUILT_IN (fndecl)\n+\t      && !fndecl_built_in_p (fndecl)\n \t      && !lookup_attribute (\"assume_aligned\",\n \t\t\t\t    TYPE_ATTRIBUTES (fntype))\n \t      && !lookup_attribute (\"alloc_align\",\n@@ -2560,7 +2560,7 @@ optimize_stack_restore (gimple_stmt_iterator i)\n \n       callee = gimple_call_fndecl (stmt);\n       if (!callee\n-\t  || DECL_BUILT_IN_CLASS (callee) != BUILT_IN_NORMAL\n+\t  || !fndecl_built_in_p (callee, BUILT_IN_NORMAL)\n \t  /* All regular builtins are ok, just obviously not alloca.  */\n \t  || ALLOCA_FUNCTION_CODE_P (DECL_FUNCTION_CODE (callee)))\n \treturn NULL_TREE;\n@@ -2596,9 +2596,7 @@ optimize_stack_restore (gimple_stmt_iterator i)\n       if (is_gimple_call (stack_save))\n \t{\n \t  callee = gimple_call_fndecl (stack_save);\n-\t  if (callee\n-\t      && DECL_BUILT_IN_CLASS (callee) == BUILT_IN_NORMAL\n-\t      && DECL_FUNCTION_CODE (callee) == BUILT_IN_STACK_SAVE)\n+\t  if (callee && fndecl_built_in_p (callee, BUILT_IN_STACK_SAVE))\n \t    {\n \t      gimple_stmt_iterator stack_save_gsi;\n \t      tree rhs;\n@@ -3195,7 +3193,7 @@ pass_fold_builtins::execute (function *fun)\n \t    }\n \n \t  callee = gimple_call_fndecl (stmt);\n-\t  if (!callee || DECL_BUILT_IN_CLASS (callee) != BUILT_IN_NORMAL)\n+\t  if (!callee || !fndecl_built_in_p (callee, BUILT_IN_NORMAL))\n \t    {\n \t      gsi_next (&i);\n \t      continue;\n@@ -3370,8 +3368,7 @@ pass_fold_builtins::execute (function *fun)\n \t    }\n \t  callee = gimple_call_fndecl (stmt);\n \t  if (!callee\n-              || DECL_BUILT_IN_CLASS (callee) != BUILT_IN_NORMAL\n-\t      || DECL_FUNCTION_CODE (callee) == fcode)\n+\t      || !fndecl_built_in_p (callee, fcode))\n \t    gsi_next (&i);\n \t}\n     }"}, {"sha": "91ce2aa4fc52d86e4f3680bc0ba2d3ca90c98ad3", "filename": "gcc/tree-ssa-dce.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d78e00879b42574c9b0084c30f1361f0cfb9101/gcc%2Ftree-ssa-dce.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d78e00879b42574c9b0084c30f1361f0cfb9101/gcc%2Ftree-ssa-dce.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-dce.c?ref=3d78e00879b42574c9b0084c30f1361f0cfb9101", "patch": "@@ -224,7 +224,7 @@ mark_stmt_if_obviously_necessary (gimple *stmt, bool aggressive)\n       {\n \ttree callee = gimple_call_fndecl (stmt);\n \tif (callee != NULL_TREE\n-\t    && DECL_BUILT_IN_CLASS (callee) == BUILT_IN_NORMAL)\n+\t    && fndecl_built_in_p (callee, BUILT_IN_NORMAL))\n \t  switch (DECL_FUNCTION_CODE (callee))\n \t    {\n \t    case BUILT_IN_MALLOC:\n@@ -565,7 +565,7 @@ mark_all_reaching_defs_necessary_1 (ao_ref *ref ATTRIBUTE_UNUSED,\n     {\n       tree callee = gimple_call_fndecl (def_stmt);\n       if (callee != NULL_TREE\n-\t  && DECL_BUILT_IN_CLASS (callee) == BUILT_IN_NORMAL)\n+\t  && fndecl_built_in_p (callee, BUILT_IN_NORMAL))\n \tswitch (DECL_FUNCTION_CODE (callee))\n \t  {\n \t  case BUILT_IN_MALLOC:"}, {"sha": "f7cc034b26ed3a2f87feaff7c185892a5083cd75", "filename": "gcc/tree-ssa-dom.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d78e00879b42574c9b0084c30f1361f0cfb9101/gcc%2Ftree-ssa-dom.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d78e00879b42574c9b0084c30f1361f0cfb9101/gcc%2Ftree-ssa-dom.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-dom.c?ref=3d78e00879b42574c9b0084c30f1361f0cfb9101", "patch": "@@ -1987,8 +1987,7 @@ dom_opt_dom_walker::optimize_stmt (basic_block bb, gimple_stmt_iterator si)\n \t     certain that the value simply isn't constant.  */\n \t  tree callee = gimple_call_fndecl (stmt);\n \t  if (callee\n-\t      && DECL_BUILT_IN_CLASS (callee) == BUILT_IN_NORMAL\n-\t      && DECL_FUNCTION_CODE (callee) == BUILT_IN_CONSTANT_P)\n+\t      && fndecl_built_in_p (callee, BUILT_IN_CONSTANT_P))\n \t    {\n \t      propagate_tree_value_into_stmt (&si, integer_zero_node);\n \t      stmt = gsi_stmt (si);"}, {"sha": "efdf2094c8bce6bc9122de6d1d3424e336809144", "filename": "gcc/tree-ssa-forwprop.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d78e00879b42574c9b0084c30f1361f0cfb9101/gcc%2Ftree-ssa-forwprop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d78e00879b42574c9b0084c30f1361f0cfb9101/gcc%2Ftree-ssa-forwprop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-forwprop.c?ref=3d78e00879b42574c9b0084c30f1361f0cfb9101", "patch": "@@ -1278,7 +1278,7 @@ simplify_builtin_call (gimple_stmt_iterator *gsi_p, tree callee2)\n \t\t constant length.  */\n \t      callee1 = gimple_call_fndecl (stmt1);\n \t      if (callee1 == NULL_TREE\n-\t\t  || DECL_BUILT_IN_CLASS (callee1) != BUILT_IN_NORMAL\n+\t\t  || !fndecl_built_in_p (callee1, BUILT_IN_NORMAL)\n \t\t  || gimple_call_num_args (stmt1) != 3)\n \t\tbreak;\n \t      if (DECL_FUNCTION_CODE (callee1) != BUILT_IN_MEMCPY\n@@ -2538,7 +2538,7 @@ pass_forwprop::execute (function *fun)\n \t      {\n \t\ttree callee = gimple_call_fndecl (stmt);\n \t\tif (callee != NULL_TREE\n-\t\t    && DECL_BUILT_IN_CLASS (callee) == BUILT_IN_NORMAL)\n+\t\t    && fndecl_built_in_p (callee, BUILT_IN_NORMAL))\n \t\t  changed = simplify_builtin_call (&gsi, callee);\n \t\tbreak;\n \t      }"}, {"sha": "9c62f20866c8b59e53d694438812721cea68ba57", "filename": "gcc/tree-ssa-loop-im.c", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d78e00879b42574c9b0084c30f1361f0cfb9101/gcc%2Ftree-ssa-loop-im.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d78e00879b42574c9b0084c30f1361f0cfb9101/gcc%2Ftree-ssa-loop-im.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-loop-im.c?ref=3d78e00879b42574c9b0084c30f1361f0cfb9101", "patch": "@@ -471,9 +471,7 @@ stmt_cost (gimple *stmt)\n       /* Unless the call is a builtin_constant_p; this always folds to a\n \t constant, so moving it is useless.  */\n       fndecl = gimple_call_fndecl (stmt);\n-      if (fndecl\n-\t  && DECL_BUILT_IN_CLASS (fndecl) == BUILT_IN_NORMAL\n-\t  && DECL_FUNCTION_CODE (fndecl) == BUILT_IN_CONSTANT_P)\n+      if (fndecl && fndecl_built_in_p (fndecl, BUILT_IN_CONSTANT_P))\n \treturn 0;\n \n       return LIM_EXPENSIVE;"}, {"sha": "25378da6f4ab27dbce51e10461efc18cc416a4d7", "filename": "gcc/tree-ssa-math-opts.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d78e00879b42574c9b0084c30f1361f0cfb9101/gcc%2Ftree-ssa-math-opts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d78e00879b42574c9b0084c30f1361f0cfb9101/gcc%2Ftree-ssa-math-opts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-math-opts.c?ref=3d78e00879b42574c9b0084c30f1361f0cfb9101", "patch": "@@ -793,7 +793,7 @@ pass_cse_reciprocals::execute (function *fun)\n \t\t    {\n \t\t      fndecl = gimple_call_fndecl (call);\n \t\t      if (!fndecl\n-\t\t\t  || DECL_BUILT_IN_CLASS (fndecl) != BUILT_IN_MD)\n+\t\t\t  || !fndecl_built_in_p (fndecl, BUILT_IN_MD))\n \t\t\tcontinue;\n \t\t      fndecl = targetm.builtin_reciprocal (fndecl);\n \t\t      if (!fndecl)"}, {"sha": "42676487c86bfdf0d5e41089b224651fcad1754c", "filename": "gcc/tree-ssa-sccvn.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d78e00879b42574c9b0084c30f1361f0cfb9101/gcc%2Ftree-ssa-sccvn.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d78e00879b42574c9b0084c30f1361f0cfb9101/gcc%2Ftree-ssa-sccvn.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-sccvn.c?ref=3d78e00879b42574c9b0084c30f1361f0cfb9101", "patch": "@@ -1373,7 +1373,7 @@ fully_constant_vn_reference_p (vn_reference_t ref)\n   if (op->opcode == CALL_EXPR\n       && TREE_CODE (op->op0) == ADDR_EXPR\n       && TREE_CODE (TREE_OPERAND (op->op0, 0)) == FUNCTION_DECL\n-      && DECL_BUILT_IN (TREE_OPERAND (op->op0, 0))\n+      && fndecl_built_in_p (TREE_OPERAND (op->op0, 0))\n       && operands.length () >= 2\n       && operands.length () <= 3)\n     {"}, {"sha": "b90d4a17985b73a44de611144bbdb14d471ea12f", "filename": "gcc/tree-ssa-strlen.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d78e00879b42574c9b0084c30f1361f0cfb9101/gcc%2Ftree-ssa-strlen.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d78e00879b42574c9b0084c30f1361f0cfb9101/gcc%2Ftree-ssa-strlen.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-strlen.c?ref=3d78e00879b42574c9b0084c30f1361f0cfb9101", "patch": "@@ -581,7 +581,7 @@ get_string_length (strinfo *si)\n \n       gcc_assert (is_gimple_call (stmt));\n       callee = gimple_call_fndecl (stmt);\n-      gcc_assert (callee && DECL_BUILT_IN_CLASS (callee) == BUILT_IN_NORMAL);\n+      gcc_assert (callee && fndecl_built_in_p (callee, BUILT_IN_NORMAL));\n       lhs = gimple_call_lhs (stmt);\n       /* unshare_strinfo is intentionally not called here.  The (delayed)\n \t transformation of strcpy or strcat into stpcpy is done at the place"}, {"sha": "225583511384906dca5142f5ae7df1a5abb8838d", "filename": "gcc/tree-ssa-structalias.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d78e00879b42574c9b0084c30f1361f0cfb9101/gcc%2Ftree-ssa-structalias.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d78e00879b42574c9b0084c30f1361f0cfb9101/gcc%2Ftree-ssa-structalias.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-structalias.c?ref=3d78e00879b42574c9b0084c30f1361f0cfb9101", "patch": "@@ -4075,7 +4075,7 @@ handle_lhs_call (gcall *stmt, tree lhs, int flags, vec<ce_s> rhsc,\n \t initialized and thus may point to global memory.  All\n \t builtin functions with the malloc attribute behave in a sane way.  */\n       if (!fndecl\n-\t  || DECL_BUILT_IN_CLASS (fndecl) != BUILT_IN_NORMAL)\n+\t  || !fndecl_built_in_p (fndecl, BUILT_IN_NORMAL))\n \tmake_constraint_from (vi, nonlocal_id);\n       tmpc.var = vi->id;\n       tmpc.offset = 0;\n@@ -4729,7 +4729,7 @@ find_func_aliases_for_call (struct function *fn, gcall *t)\n   varinfo_t fi;\n \n   if (fndecl != NULL_TREE\n-      && DECL_BUILT_IN (fndecl)\n+      && fndecl_built_in_p (fndecl)\n       && find_func_aliases_for_builtin_call (fn, t))\n     return;\n "}, {"sha": "3396a5c28dfcb26774b520c1bd0c9409748fbb76", "filename": "gcc/tree-ssa-ter.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d78e00879b42574c9b0084c30f1361f0cfb9101/gcc%2Ftree-ssa-ter.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d78e00879b42574c9b0084c30f1361f0cfb9101/gcc%2Ftree-ssa-ter.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-ter.c?ref=3d78e00879b42574c9b0084c30f1361f0cfb9101", "patch": "@@ -683,7 +683,7 @@ find_replaceable_in_bb (temp_expr_table *tab, basic_block bb)\n \t insns instead of a true call.  */\n       if (is_gimple_call (stmt)\n \t  && !((fndecl = gimple_call_fndecl (stmt))\n-\t       && DECL_BUILT_IN (fndecl)))\n+\t       && fndecl_built_in_p (fndecl)))\n \tcur_call_cnt++;\n \n       /* Increment counter if this statement sets a local"}, {"sha": "f40dc5641cd2bd5a5e57452025163db1d80f050d", "filename": "gcc/tree-stdarg.c", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d78e00879b42574c9b0084c30f1361f0cfb9101/gcc%2Ftree-stdarg.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d78e00879b42574c9b0084c30f1361f0cfb9101/gcc%2Ftree-stdarg.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-stdarg.c?ref=3d78e00879b42574c9b0084c30f1361f0cfb9101", "patch": "@@ -694,7 +694,7 @@ optimize_va_list_gpr_fpr_size (function *fun)\n \n \t  callee = gimple_call_fndecl (stmt);\n \t  if (!callee\n-\t      || DECL_BUILT_IN_CLASS (callee) != BUILT_IN_NORMAL)\n+\t      || !fndecl_built_in_p (callee, BUILT_IN_NORMAL))\n \t    continue;\n \n \t  switch (DECL_FUNCTION_CODE (callee))\n@@ -867,9 +867,8 @@ optimize_va_list_gpr_fpr_size (function *fun)\n \t      tree callee = gimple_call_fndecl (stmt);\n \n \t      if (callee\n-\t\t  && DECL_BUILT_IN_CLASS (callee) == BUILT_IN_NORMAL\n-\t\t  && (DECL_FUNCTION_CODE (callee) == BUILT_IN_VA_START\n-\t\t      || DECL_FUNCTION_CODE (callee) == BUILT_IN_VA_END))\n+\t\t  && (fndecl_built_in_p (callee, BUILT_IN_VA_START)\n+\t\t      || fndecl_built_in_p (callee, BUILT_IN_VA_END)))\n \t\tcontinue;\n \t    }\n "}, {"sha": "8e9c2cbd2897c4735082dfd6a6c2e805ffbeff83", "filename": "gcc/tree-tailcall.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d78e00879b42574c9b0084c30f1361f0cfb9101/gcc%2Ftree-tailcall.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d78e00879b42574c9b0084c30f1361f0cfb9101/gcc%2Ftree-tailcall.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-tailcall.c?ref=3d78e00879b42574c9b0084c30f1361f0cfb9101", "patch": "@@ -476,7 +476,7 @@ find_tail_calls (basic_block bb, struct tailcall **ret)\n   tail_recursion = false;\n   func = gimple_call_fndecl (call);\n   if (func\n-      && !DECL_BUILT_IN (func)\n+      && !fndecl_built_in_p (func)\n       && recursive_call_p (current_function_decl, func))\n     {\n       tree arg;"}, {"sha": "5ae467437b5ace5ba0e6f97675658046c5722fd7", "filename": "gcc/tree.c", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d78e00879b42574c9b0084c30f1361f0cfb9101/gcc%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d78e00879b42574c9b0084c30f1361f0cfb9101/gcc%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.c?ref=3d78e00879b42574c9b0084c30f1361f0cfb9101", "patch": "@@ -5240,7 +5240,7 @@ need_assembler_name_p (tree decl)\n     {\n       /* Do not set assembler name on builtins.  Allow RTL expansion to\n \t decide whether to expand inline or via a regular call.  */\n-      if (DECL_BUILT_IN (decl)\n+      if (fndecl_built_in_p (decl)\n \t  && DECL_BUILT_IN_CLASS (decl) != BUILT_IN_FRONTEND)\n \treturn false;\n \n@@ -5371,10 +5371,9 @@ free_lang_data_in_decl (tree decl)\n \t nodes and thus we can't use TREE_CHAIN in multiple lists.  */\n       tree *nextp = &BLOCK_VARS (DECL_INITIAL (decl));\n       while (*nextp)\n-        {\n-          tree var = *nextp;\n-          if (TREE_CODE (var) == FUNCTION_DECL\n-              && DECL_BUILT_IN (var))\n+\t{\n+\t  tree var = *nextp;\n+\t  if (fndecl_built_in_p (var))\n \t    *nextp = TREE_CHAIN (var);\n \t  else\n \t    nextp = &TREE_CHAIN (var);\n@@ -9100,7 +9099,7 @@ get_call_combined_fn (const_tree call)\n     return as_combined_fn (CALL_EXPR_IFN (call));\n \n   tree fndecl = get_callee_fndecl (call);\n-  if (fndecl && DECL_BUILT_IN_CLASS (fndecl) == BUILT_IN_NORMAL)\n+  if (fndecl && fndecl_built_in_p (fndecl, BUILT_IN_NORMAL))\n     return as_combined_fn (DECL_FUNCTION_CODE (fndecl));\n \n   return CFN_LAST;"}, {"sha": "db04eb7e58beb0cbffb9d8e28669386ff444a3d0", "filename": "gcc/tree.h", "status": "modified", "additions": 45, "deletions": 14, "changes": 59, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d78e00879b42574c9b0084c30f1361f0cfb9101/gcc%2Ftree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d78e00879b42574c9b0084c30f1361f0cfb9101/gcc%2Ftree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.h?ref=3d78e00879b42574c9b0084c30f1361f0cfb9101", "patch": "@@ -2995,25 +2995,11 @@ extern vec<tree, va_gc> **decl_debug_args_insert (tree);\n #define DECL_STRUCT_FUNCTION(NODE) \\\n   (FUNCTION_DECL_CHECK (NODE)->function_decl.f)\n \n-/* In a FUNCTION_DECL, nonzero means a built in function of a\n-   standard library or more generally a built in function that is\n-   recognized by optimizers and expanders.\n-\n-   Note that it is different from the DECL_IS_BUILTIN accessor.  For\n-   instance, user declared prototypes of C library functions are not\n-   DECL_IS_BUILTIN but may be DECL_BUILT_IN.  */\n-#define DECL_BUILT_IN(NODE) (DECL_BUILT_IN_CLASS (NODE) != NOT_BUILT_IN)\n \n /* For a builtin function, identify which part of the compiler defined it.  */\n #define DECL_BUILT_IN_CLASS(NODE) \\\n    (FUNCTION_DECL_CHECK (NODE)->function_decl.built_in_class)\n \n-/* For a function declaration, return true if NODE is non-null and it is\n-   a builtin of a CLASS with requested NAME.  */\n-#define DECL_BUILT_IN_P(NODE, CLASS, NAME) \\\n-  (NODE != NULL_TREE && DECL_BUILT_IN_CLASS (NODE) == CLASS \\\n-   && DECL_FUNCTION_CODE (NODE) == NAME)\n-\n /* In FUNCTION_DECL, a chain of ..._DECL nodes.  */\n #define DECL_ARGUMENTS(NODE) \\\n    (FUNCTION_DECL_CHECK (NODE)->function_decl.arguments)\n@@ -5848,4 +5834,49 @@ type_has_mode_precision_p (const_tree t)\n   return known_eq (TYPE_PRECISION (t), GET_MODE_PRECISION (TYPE_MODE (t)));\n }\n \n+/* For a FUNCTION_DECL NODE, nonzero means a built in function of a\n+   standard library or more generally a built in function that is\n+   recognized by optimizers and expanders.\n+\n+   Note that it is different from the DECL_IS_BUILTIN accessor.  For\n+   instance, user declared prototypes of C library functions are not\n+   DECL_IS_BUILTIN but may be DECL_BUILT_IN.\n+\n+   When a NULL argument is pass or tree code of the NODE is not FUNCTION_DECL\n+   false is returned.  */\n+\n+inline bool\n+fndecl_built_in_p (const_tree node)\n+{\n+  return (DECL_BUILT_IN_CLASS (node) != NOT_BUILT_IN);\n+}\n+\n+/* For a FUNCTION_DECL NODE, return true when a function is\n+   a built-in of class KLASS.  */\n+\n+inline bool\n+fndecl_built_in_p (const_tree node, built_in_class klass)\n+{\n+  return (fndecl_built_in_p (node) && DECL_BUILT_IN_CLASS (node) == klass);\n+}\n+\n+/* For a FUNCTION_DECL NODE, return true when a function is\n+   a built-in of class KLASS with name equal to NAME.  */\n+\n+inline bool\n+fndecl_built_in_p (const_tree node, int name, built_in_class klass)\n+{\n+  return (fndecl_built_in_p (node, klass) && DECL_FUNCTION_CODE (node) == name);\n+}\n+\n+/* For a FUNCTION_DECL NODE, return true when a function is\n+   a built-in of class BUILT_IN_NORMAL class with name equal to NAME.  */\n+\n+inline bool\n+fndecl_built_in_p (const_tree node, built_in_function name)\n+{\n+  return (fndecl_built_in_p (node, BUILT_IN_NORMAL)\n+\t  && DECL_FUNCTION_CODE (node) == name);\n+}\n+\n #endif  /* GCC_TREE_H  */"}, {"sha": "9bbcecc58af9943fd6fed3d4cf86e0b0b3cd52e1", "filename": "gcc/ubsan.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d78e00879b42574c9b0084c30f1361f0cfb9101/gcc%2Fubsan.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d78e00879b42574c9b0084c30f1361f0cfb9101/gcc%2Fubsan.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fubsan.c?ref=3d78e00879b42574c9b0084c30f1361f0cfb9101", "patch": "@@ -663,7 +663,7 @@ bool\n is_ubsan_builtin_p (tree t)\n {\n   return TREE_CODE (t) == FUNCTION_DECL\n-\t && DECL_BUILT_IN_CLASS (t) == BUILT_IN_NORMAL\n+\t && fndecl_built_in_p (t, BUILT_IN_NORMAL)\n \t && strncmp (IDENTIFIER_POINTER (DECL_NAME (t)),\n \t\t     \"__builtin___ubsan_\", 18) == 0;\n }"}, {"sha": "2180da48895827967bc902fba604fc5c69478885", "filename": "gcc/varasm.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d78e00879b42574c9b0084c30f1361f0cfb9101/gcc%2Fvarasm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d78e00879b42574c9b0084c30f1361f0cfb9101/gcc%2Fvarasm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvarasm.c?ref=3d78e00879b42574c9b0084c30f1361f0cfb9101", "patch": "@@ -2401,7 +2401,7 @@ static hash_set<tree> *pending_assemble_externals_set;\n static bool\n incorporeal_function_p (tree decl)\n {\n-  if (TREE_CODE (decl) == FUNCTION_DECL && DECL_BUILT_IN (decl))\n+  if (TREE_CODE (decl) == FUNCTION_DECL && fndecl_built_in_p (decl))\n     {\n       const char *name;\n "}]}