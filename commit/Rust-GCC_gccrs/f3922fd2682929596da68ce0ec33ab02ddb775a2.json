{"sha": "f3922fd2682929596da68ce0ec33ab02ddb775a2", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjM5MjJmZDI2ODI5Mjk1OTZkYTY4Y2UwZWMzM2FiMDJkZGI3NzVhMg==", "commit": {"author": {"name": "DJ Delorie", "email": "dj@gcc.gnu.org", "date": "2003-03-06T20:03:49Z"}, "committer": {"name": "DJ Delorie", "email": "dj@gcc.gnu.org", "date": "2003-03-06T20:03:49Z"}, "message": "[multiple changes]\n\n2002-03-05  Tom Tromey  <tromey@redhat.com>\n\n\t* config/stormy16/stormy16.h (DWARF_LINE_MIN_INSTR_LENGTH):\n\tDefine.\n\n2002-03-05  Nick Clifton  <nickc@cambridge.redhat.com>\n\n\t* config/stormy16/stormy16.md (\"*eqbranchsi\"): Remove '+' on\n\toperand 2.\n\t(\"*ineqbranchsi\"): Likewise.\n\n2002-03-05  Andrew Haley  <aph@cambridge.redhat.com>\n\n\t* config/stormy16/stormy16.c (xstormy16_expand_prologue): Delete\n\tmem_fake_push_rtx.  Instead construct a SEQUENCE to show the\n\tregister store followed by a stack increment.\n\n2002-03-05  Chris Moller  <cmoller@redhat.com>\n\n\t* config/stormy16/stormy16.c (REG_NEEDS_SAVE): added a term\n\tto inhibit saving CARRY_REGS.\n\n\t* config/stormy16/stormy16.c (xs_hi_general_operand):\n\tadded predicate to detect and error-out on out-of-range\n\tconst_ints for movhi.\n\t* config/stormy16/stormy16.md (movhi): use\n\txs_hi_general_operand.\n\n\t* config/stormy16/stormy16.c (xstormy16_expand_prologue):\n\tadded a check for local vbl size overflow.\n\t* config/stormy16/stormy16.c (xs_hi_nonmemory_operand):\n\tadded predicate to detect and error-out on out-of-range\n\tconst_ints for addhi and subhi.\n\t* config/stormy16/stormy16.md (addhi3, addchi4, addchi5,\n\tsubhi3, subchi4, subchi5): used xs_hi_nonmemory_operand.\n\n\t* config/stormy16/stormy16.c (xstormy16_legitimate_address_p):\n\tadd a term to accept PRE_MODIFY addresses.\n\t* config/stormy16/stormy16.c (xstormy16_expand_move):\n\tadd code to expand PRE_MODIFY addresses to an add followed\n\tby a move.\n\nFrom-SVN: r63898", "tree": {"sha": "8ffd9d4fb336e7a8756fb5ae60aa7bdef665a800", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8ffd9d4fb336e7a8756fb5ae60aa7bdef665a800"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f3922fd2682929596da68ce0ec33ab02ddb775a2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f3922fd2682929596da68ce0ec33ab02ddb775a2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f3922fd2682929596da68ce0ec33ab02ddb775a2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f3922fd2682929596da68ce0ec33ab02ddb775a2/comments", "author": null, "committer": null, "parents": [{"sha": "4c28216d00a7774de69a4f2733b8c9a70c9a5a3d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4c28216d00a7774de69a4f2733b8c9a70c9a5a3d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4c28216d00a7774de69a4f2733b8c9a70c9a5a3d"}], "stats": {"total": 160, "additions": 139, "deletions": 21}, "files": [{"sha": "8af66894ea29c33f097abb95776814196e227066", "filename": "gcc/ChangeLog", "status": "modified", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f3922fd2682929596da68ce0ec33ab02ddb775a2/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f3922fd2682929596da68ce0ec33ab02ddb775a2/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=f3922fd2682929596da68ce0ec33ab02ddb775a2", "patch": "@@ -1,3 +1,45 @@\n+2002-03-05  Tom Tromey  <tromey@redhat.com>\n+\n+\t* config/stormy16/stormy16.h (DWARF_LINE_MIN_INSTR_LENGTH):\n+\tDefine.\n+\n+2002-03-05  Nick Clifton  <nickc@cambridge.redhat.com>\n+\n+\t* config/stormy16/stormy16.md (\"*eqbranchsi\"): Remove '+' on\n+\toperand 2.\n+\t(\"*ineqbranchsi\"): Likewise.\n+\n+2002-03-05  Andrew Haley  <aph@cambridge.redhat.com>\n+\n+\t* config/stormy16/stormy16.c (xstormy16_expand_prologue): Delete\n+\tmem_fake_push_rtx.  Instead construct a SEQUENCE to show the\n+\tregister store followed by a stack increment.\n+\n+2002-03-05  Chris Moller  <cmoller@redhat.com>\n+\n+\t* config/stormy16/stormy16.c (REG_NEEDS_SAVE): added a term\n+\tto inhibit saving CARRY_REGS.\n+\n+\t* config/stormy16/stormy16.c (xs_hi_general_operand):\n+\tadded predicate to detect and error-out on out-of-range\n+\tconst_ints for movhi.\n+\t* config/stormy16/stormy16.md (movhi): use \n+\txs_hi_general_operand.\n+\n+\t* config/stormy16/stormy16.c (xstormy16_expand_prologue):\n+\tadded a check for local vbl size overflow.\n+\t* config/stormy16/stormy16.c (xs_hi_nonmemory_operand):\n+\tadded predicate to detect and error-out on out-of-range\n+\tconst_ints for addhi and subhi.\n+\t* config/stormy16/stormy16.md (addhi3, addchi4, addchi5, \n+\tsubhi3, subchi4, subchi5): used xs_hi_nonmemory_operand.\n+\n+\t* config/stormy16/stormy16.c (xstormy16_legitimate_address_p):\n+\tadd a term to accept PRE_MODIFY addresses.\n+\t* config/stormy16/stormy16.c (xstormy16_expand_move):\n+\tadd code to expand PRE_MODIFY addresses to an add followed\n+\tby a move.\n+\n 2003-03-06  Jason Merrill  <jason@redhat.com>\n \n \t* tree-inline.c (inlinable_function_p): Revert earlier change"}, {"sha": "597c4ddaff26eddc19d00860934b4e9f30a95fee", "filename": "gcc/config/stormy16/stormy16.c", "status": "modified", "additions": 81, "deletions": 10, "changes": 91, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f3922fd2682929596da68ce0ec33ab02ddb775a2/gcc%2Fconfig%2Fstormy16%2Fstormy16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f3922fd2682929596da68ce0ec33ab02ddb775a2/gcc%2Fconfig%2Fstormy16%2Fstormy16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fstormy16%2Fstormy16.c?ref=f3922fd2682929596da68ce0ec33ab02ddb775a2", "patch": "@@ -545,6 +545,29 @@ xstormy16_carry_plus_operand (x, mode)\n \t  && (INTVAL (XEXP (x, 1)) < -4 || INTVAL (XEXP (x, 1)) > 4));\n }\n \n+/* Detect and error out on out-of-range constants for movhi.  */\n+int\n+xs_hi_general_operand (x, mode)\n+     rtx x;\n+     enum machine_mode mode ATTRIBUTE_UNUSED;\n+{\n+  if ((GET_CODE (x) == CONST_INT) \n+   && ((INTVAL (x) >= 32768) || (INTVAL (x) < -32768)))\n+    error (\"Constant halfword load operand out of range.\");\n+  return general_operand (x, mode);\n+}\n+\n+/* Detect and error out on out-of-range constants for addhi and subhi.  */\n+int\n+xs_hi_nonmemory_operand (x, mode)\n+     rtx x;\n+     enum machine_mode mode ATTRIBUTE_UNUSED;\n+{\n+  if ((GET_CODE (x) == CONST_INT) \n+   && ((INTVAL (x) >= 32768) || (INTVAL (x) < -32768)))\n+    error (\"Constant arithmetic operand out of range.\");\n+  return nonmemory_operand (x, mode);\n+}\n \n enum reg_class\n xstormy16_preferred_reload_class (x, class)\n@@ -581,7 +604,9 @@ xstormy16_legitimate_address_p (mode, x, strict)\n       && LEGITIMATE_ADDRESS_INTEGER_P (XEXP (x, 1), 0))\n     x = XEXP (x, 0);\n   \n-  if (GET_CODE (x) == POST_INC\n+  if ((GET_CODE (x) == PRE_MODIFY\n+       && GET_CODE (XEXP (XEXP (x, 1), 1)) == CONST_INT)\n+      || GET_CODE (x) == POST_INC\n       || GET_CODE (x) == PRE_DEC)\n     x = XEXP (x, 0);\n   \n@@ -855,6 +880,29 @@ xstormy16_expand_move (mode, dest, src)\n      rtx dest;\n      rtx src;\n {\n+  if ((GET_CODE (dest) == MEM) && (GET_CODE (XEXP (dest, 0)) == PRE_MODIFY))\n+    {\n+      rtx pmv      = XEXP (dest, 0);\n+      rtx dest_reg = XEXP (pmv, 0);\n+      rtx dest_mod = XEXP (pmv, 1);\n+      rtx set      = gen_rtx_SET (Pmode, dest_reg, dest_mod);\n+      rtx clobber  = gen_rtx_CLOBBER (VOIDmode, gen_rtx_REG (BImode, 16));\n+    \n+      dest = gen_rtx_MEM (mode, dest_reg);\n+      emit_insn (gen_rtx_PARALLEL (VOIDmode, gen_rtvec (2, set, clobber)));\n+    }\n+  else if ((GET_CODE (src) == MEM) && (GET_CODE (XEXP (src, 0)) == PRE_MODIFY))\n+    {\n+      rtx pmv     = XEXP (src, 0);\n+      rtx src_reg = XEXP (pmv, 0);\n+      rtx src_mod = XEXP (pmv, 1);\n+      rtx set     = gen_rtx_SET (Pmode, src_reg, src_mod);\n+      rtx clobber = gen_rtx_CLOBBER (VOIDmode, gen_rtx_REG (BImode, 16));\n+    \n+      src = gen_rtx_MEM (mode, src_reg);\n+      emit_insn (gen_rtx_PARALLEL (VOIDmode, gen_rtvec (2, set, clobber)));\n+    }\n+   \n   /* There are only limited immediate-to-memory move instructions.  */\n   if (! reload_in_progress\n       && ! reload_completed\n@@ -915,6 +963,7 @@ struct xstormy16_stack_layout\n #define REG_NEEDS_SAVE(REGNUM, IFUN)\t\t\t\t\t\\\n   ((regs_ever_live[REGNUM] && ! call_used_regs[REGNUM])\t\t\t\\\n    || (IFUN && ! fixed_regs[REGNUM] && call_used_regs[REGNUM]\t\t\\\n+       && (REGNO_REG_CLASS (REGNUM) != CARRY_REGS)\t\t\t\\\n        && (regs_ever_live[REGNUM] || ! current_function_is_leaf)))\n \n /* Compute the stack layout.  */\n@@ -1014,44 +1063,66 @@ xstormy16_expand_prologue ()\n   int regno;\n   rtx insn;\n   rtx mem_push_rtx;\n-  rtx mem_fake_push_rtx;\n   const int ifun = xstormy16_interrupt_function_p ();\n   \n   mem_push_rtx = gen_rtx_POST_INC (Pmode, stack_pointer_rtx);\n   mem_push_rtx = gen_rtx_MEM (HImode, mem_push_rtx);\n-  mem_fake_push_rtx = gen_rtx_PRE_INC (Pmode, stack_pointer_rtx);\n-  mem_fake_push_rtx = gen_rtx_MEM (HImode, mem_fake_push_rtx);\n     \n   layout = xstormy16_compute_stack_layout ();\n \n+  if (layout.locals_size >= 32768)\n+    error (\"Local variable memory requirements exceed capacity.\");\n+\n   /* Save the argument registers if necessary.  */\n   if (layout.stdarg_save_size)\n     for (regno = FIRST_ARGUMENT_REGISTER; \n \t regno < FIRST_ARGUMENT_REGISTER + NUM_ARGUMENT_REGISTERS;\n \t regno++)\n       {\n+\trtx dwarf;\n \trtx reg = gen_rtx_REG (HImode, regno);\n+\n \tinsn = emit_move_insn (mem_push_rtx, reg);\n \tRTX_FRAME_RELATED_P (insn) = 1;\n+\n+\tdwarf = gen_rtx_SEQUENCE (VOIDmode, rtvec_alloc (2));\n+\t\n+\tXVECEXP (dwarf, 0, 0) = gen_rtx_SET (VOIDmode,\n+\t\t\t\t\t     gen_rtx_MEM (Pmode, stack_pointer_rtx),\n+\t\t\t\t\t     reg);\n+\tXVECEXP (dwarf, 0, 1) = gen_rtx_SET (Pmode, stack_pointer_rtx,\n+\t\t\t\t\t     plus_constant (stack_pointer_rtx,\n+\t\t\t\t\t\t\t    GET_MODE_SIZE (Pmode)));\n \tREG_NOTES (insn) = gen_rtx_EXPR_LIST (REG_FRAME_RELATED_EXPR,\n-\t\t\t\t\t      gen_rtx_SET (VOIDmode,\n-\t\t\t\t\t\t\t   mem_fake_push_rtx,\n-\t\t\t\t\t\t\t   reg),\n+\t\t\t\t\t      dwarf,\n \t\t\t\t\t      REG_NOTES (insn));\n+\tRTX_FRAME_RELATED_P (XVECEXP (dwarf, 0, 0)) = 1;\n+\tRTX_FRAME_RELATED_P (XVECEXP (dwarf, 0, 1)) = 1;\n       }\n   \n   /* Push each of the registers to save.  */\n   for (regno = 0; regno < FIRST_PSEUDO_REGISTER; regno++)\n     if (REG_NEEDS_SAVE (regno, ifun))\n       {\n+\trtx dwarf;\n \trtx reg = gen_rtx_REG (HImode, regno);\n+\n \tinsn = emit_move_insn (mem_push_rtx, reg);\n \tRTX_FRAME_RELATED_P (insn) = 1;\n+\n+\tdwarf = gen_rtx_SEQUENCE (VOIDmode, rtvec_alloc (2));\n+\t\n+\tXVECEXP (dwarf, 0, 0) = gen_rtx_SET (VOIDmode,\n+\t\t\t\t\t     gen_rtx_MEM (Pmode, stack_pointer_rtx),\n+\t\t\t\t\t     reg);\n+\tXVECEXP (dwarf, 0, 1) = gen_rtx_SET (Pmode, stack_pointer_rtx,\n+\t\t\t\t\t     plus_constant (stack_pointer_rtx,\n+\t\t\t\t\t\t\t    GET_MODE_SIZE (Pmode)));\n \tREG_NOTES (insn) = gen_rtx_EXPR_LIST (REG_FRAME_RELATED_EXPR,\n-\t\t\t\t\t      gen_rtx_SET (VOIDmode,\n-\t\t\t\t\t\t\t   mem_fake_push_rtx,\n-\t\t\t\t\t\t\t   reg),\n+\t\t\t\t\t      dwarf,\n \t\t\t\t\t      REG_NOTES (insn));\n+\tRTX_FRAME_RELATED_P (XVECEXP (dwarf, 0, 0)) = 1;\n+\tRTX_FRAME_RELATED_P (XVECEXP (dwarf, 0, 1)) = 1;\n       }\n \n   /* It's just possible that the SP here might be what we need for"}, {"sha": "e6d645892c2d153fcce4e4b542f0d34e6c158914", "filename": "gcc/config/stormy16/stormy16.h", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f3922fd2682929596da68ce0ec33ab02ddb775a2/gcc%2Fconfig%2Fstormy16%2Fstormy16.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f3922fd2682929596da68ce0ec33ab02ddb775a2/gcc%2Fconfig%2Fstormy16%2Fstormy16.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fstormy16%2Fstormy16.h?ref=f3922fd2682929596da68ce0ec33ab02ddb775a2", "patch": "@@ -3483,6 +3483,11 @@ do  {\t\t\t\t\t\t\\\n    pointers.  */\n #define DWARF2_ADDR_SIZE 4\n \n+/* Define the architecture-dependent minimum instruction length (in\n+   bytes).  */\n+#define DWARF_LINE_MIN_INSTR_LENGTH 2\n+\n+\n /* Define these macros to override the assembler syntax for the special SDB\n    assembler directives.  See `sdbout.c' for a list of these macros and their\n    arguments.  If the standard syntax is used, you need not define them"}, {"sha": "1e48f8b82ca8a008329c0c37f014daf666866b5c", "filename": "gcc/config/stormy16/stormy16.md", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f3922fd2682929596da68ce0ec33ab02ddb775a2/gcc%2Fconfig%2Fstormy16%2Fstormy16.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f3922fd2682929596da68ce0ec33ab02ddb775a2/gcc%2Fconfig%2Fstormy16%2Fstormy16.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fstormy16%2Fstormy16.md?ref=f3922fd2682929596da68ce0ec33ab02ddb775a2", "patch": "@@ -150,13 +150,13 @@\n \n (define_expand \"movhi\"\n   [(set (match_operand:HI 0 \"nonimmediate_nonstack_operand\" \"\")\n-\t(match_operand:HI 1 \"general_operand\" \"\"))]\n+\t(match_operand:HI 1 \"xs_hi_general_operand\" \"\"))]\n   \"\"\n   \"{ xstormy16_expand_move (HImode, operands[0], operands[1]); DONE; }\")\n \n (define_insn \"*movhi_internal\"\n   [(set (match_operand:HI 0 \"nonimmediate_nonstack_operand\" \"=r,m,e,e,T,r,S\")\n-\t(match_operand:HI 1 \"general_operand\"       \"r,e,m,L,L,i,i\"))]\n+\t(match_operand:HI 1 \"xs_hi_general_operand\"       \"r,e,m,L,L,i,i\"))]\n   \"\"\n   \"@\n    mov %0,%1\n@@ -279,7 +279,7 @@\n (define_insn \"addhi3\"\n   [(set (match_operand:HI 0 \"register_operand\" \"=r,r,T,T,r,r,r\")\n \t(plus:HI (match_operand:HI 1 \"register_operand\" \"%0,0,0,0,0,0,0\")\n-\t\t (match_operand:HI 2 \"nonmemory_operand\" \"O,P,L,M,Ir,N,i\")))\n+\t\t (match_operand:HI 2 \"xs_hi_nonmemory_operand\" \"O,P,L,M,Ir,N,i\")))\n    (clobber (match_scratch:BI 3 \"=X,X,&y,&y,&y,&y,&y\"))]\n   \"\"\n   \"@\n@@ -311,7 +311,7 @@\n (define_insn \"addchi4\"\n   [(set (match_operand:HI 0 \"register_operand\" \"=T,r,r\")\n \t(plus:HI (match_operand:HI 1 \"register_operand\" \"%0,0,0\")\n-\t\t (match_operand:HI 2 \"nonmemory_operand\" \"L,Ir,i\")))\n+\t\t (match_operand:HI 2 \"xs_hi_nonmemory_operand\" \"L,Ir,i\")))\n    (set (match_operand:BI 3 \"register_operand\" \"=y,y,y\")\n         (truncate:BI (lshiftrt:SI (plus:SI (zero_extend:SI (match_dup 1))\n \t\t\t\t\t   (zero_extend:SI (match_dup 2)))\n@@ -329,7 +329,7 @@\n \t\t\t  (zero_extend:HI (match_operand:BI 3 \n \t\t\t\t\t\t\t    \"register_operand\"\n \t\t\t\t\t\t\t    \"y,y,y\")))\n-\t\t (match_operand:HI 2 \"nonmemory_operand\" \"L,Ir,i\")))\n+\t\t (match_operand:HI 2 \"xs_hi_nonmemory_operand\" \"L,Ir,i\")))\n    (set (match_operand:BI 4 \"register_operand\" \"=y,y,y\") \n         (truncate:BI (lshiftrt:SI (plus:SI (plus:SI \n \t\t\t\t\t    (zero_extend:SI (match_dup 1))\n@@ -352,7 +352,7 @@\n (define_insn \"subhi3\"\n   [(set (match_operand:HI 0 \"register_operand\" \"=r,r,T,T,r,r,r\")\n \t(minus:HI (match_operand:HI 1 \"register_operand\" \"0,0,0,0,0,0,0\")\n-\t\t  (match_operand:HI 2 \"nonmemory_operand\" \"O,P,L,M,rI,M,i\")))\n+\t\t  (match_operand:HI 2 \"xs_hi_nonmemory_operand\" \"O,P,L,M,rI,M,i\")))\n    (clobber (match_scratch:BI 3 \"=X,X,&y,&y,&y,&y,&y\"))]\n   \"\"\n   \"@\n@@ -368,7 +368,7 @@\n (define_insn \"subchi4\"\n   [(set (match_operand:HI 0 \"register_operand\" \"=T,r,r\")\n \t(minus:HI (match_operand:HI 1 \"register_operand\" \"0,0,0\")\n-\t\t  (match_operand:HI 2 \"nonmemory_operand\" \"L,Ir,i\")))\n+\t\t  (match_operand:HI 2 \"xs_hi_nonmemory_operand\" \"L,Ir,i\")))\n    (set (match_operand:BI 3 \"register_operand\" \"=y,y,y\") \n         (truncate:BI (lshiftrt:SI (minus:SI (zero_extend:SI (match_dup 1))\n \t\t\t\t\t    (zero_extend:SI (match_dup 2)))\n@@ -386,7 +386,7 @@\n \t\t\t  (zero_extend:HI (match_operand:BI 3 \n \t\t\t\t\t\t\t    \"register_operand\"\n \t\t\t\t\t\t\t    \"y,y,y\")))\n-\t\t (match_operand:HI 2 \"nonmemory_operand\" \"L,Ir,i\")))\n+\t\t (match_operand:HI 2 \"xs_hi_nonmemory_operand\" \"L,Ir,i\")))\n    (set (match_operand:BI 4 \"register_operand\" \"=y,y,y\") \n         (truncate:BI (lshiftrt:SI (minus:SI (minus:SI \n \t\t\t\t\t     (zero_extend:SI (match_dup 1))\n@@ -796,7 +796,7 @@\n   [(set (pc)\n \t(if_then_else (match_operator:SI 1 \"equality_operator\"\n \t\t\t\t      [(match_operand:SI 2 \"register_operand\" \n-\t\t\t\t\t\t\t \"+r\")\n+\t\t\t\t\t\t\t \"r\")\n \t\t\t\t       (const_int 0)])\n \t\t      (label_ref (match_operand 0 \"\" \"\"))\n \t\t      (pc)))\n@@ -817,7 +817,7 @@\n   [(set (pc)\n \t(if_then_else (match_operator:SI 1 \"xstormy16_ineqsi_operator\"\n \t\t\t\t      [(match_operand:SI 2 \"register_operand\" \n-\t\t\t\t\t\t\t \"+r\")\n+\t\t\t\t\t\t\t \"r\")\n \t\t\t\t       (match_operand:SI 3 \"nonmemory_operand\" \n \t\t\t\t\t\t\t \"ri\")])\n \t\t      (label_ref (match_operand 0 \"\" \"\"))\n@@ -851,7 +851,7 @@\n \t\t\t(match_operand:HI 3 \"nonmemory_operand\" \"L,Ir,i\")])\n \t\t      (label_ref (match_operand 0 \"\" \"\"))\n \t\t      (pc)))\n-   (set (match_operand:HI 2 \"register_operand\" \"=2,2,2\")\n+   (set (match_operand:HI 2 \"register_operand\" \"=1,1,1\")\n \t(minus:HI (minus:HI (match_dup 1) (zero_extend:HI (match_dup 4)))\n \t\t  (match_dup 3)))\n    (clobber (match_operand:BI 6 \"\" \"=y,y,y\"))]"}]}