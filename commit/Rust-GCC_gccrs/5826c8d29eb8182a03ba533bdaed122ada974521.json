{"sha": "5826c8d29eb8182a03ba533bdaed122ada974521", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTgyNmM4ZDI5ZWI4MTgyYTAzYmE1MzNiZGFlZDEyMmFkYTk3NDUyMQ==", "commit": {"author": {"name": "Iain Sandoe", "email": "iains@gcc.gnu.org", "date": "2011-01-11T10:14:48Z"}, "committer": {"name": "Iain Sandoe", "email": "iains@gcc.gnu.org", "date": "2011-01-11T10:14:48Z"}, "message": "next-mapping.h: Add copyright header.\n\n\ngcc/testsuite:\n\n\t* objc-obj-c++-shared/next-mapping.h: Add copyright header.\n\tSplit type definitions and NSConstantString class into...\n\t* objc-obj-c++-shared/objc-test-suite-types.h: New.\n\t* objc-obj-c++-shared/nsconstantstring-class.h: New.\n\t* objc-obj-c++-shared/nsconstantstring-class-impl.h: New.\n\t* objc-obj-c++-shared/nsconstantstring-class-impl.m: New.\n\t* objc-obj-c++-shared/nsconstantstring-class-impl.mm: New.\n\t* objc-obj-c++-shared/next-abi.h: Add copyright header, minor update\n\tto comments.\n\t* objc-obj-c++-shared/objc-test-suite-next-encode-assist.h: Adjust\n\tencode defines for newer NeXT system headers.\n\t* obj-c++.dg/template-4.mm: Adjust to use nsconstantstring headers.\n\t* obj-c++.dg/torture/strings/string1.mm: Likewise.\n\t* objc.dg/foreach-5.m: Likewise.\n\t* objc.dg/foreach-2.m: Likewise.\n\t* objc.dg/foreach-4.m: Likewise.\n\t* objc.dg/torture/strings/string1.m: Likewise.\n\t* objc.dg/torture/strings/string2.m: Likewise.\n\t* objc.dg/torture/strings/string3.m: Likewise.\n\t* objc.dg/torture/strings/string4.m: Likewise.\n\t* obj-c++.dg/torture/strings/const-str-3.mm: Adjust to use type\n\theader and stand alone.\n\t* obj-c++.dg/strings/strings-2.mm: Likewise.\n\t* objc.dg/torture/strings/const-str-3.m: Likewise.\n\t* objc.dg/strings/strings-2.m: Likewise.\n\t* objc.dg/strings/const-str-12b.m: Likewise.\n\nFrom-SVN: r168653", "tree": {"sha": "5b775ac5ec0f8b64be5f92c27555c7ca090cd766", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5b775ac5ec0f8b64be5f92c27555c7ca090cd766"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5826c8d29eb8182a03ba533bdaed122ada974521", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5826c8d29eb8182a03ba533bdaed122ada974521", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5826c8d29eb8182a03ba533bdaed122ada974521", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5826c8d29eb8182a03ba533bdaed122ada974521/comments", "author": {"login": "iains", "id": 4039407, "node_id": "MDQ6VXNlcjQwMzk0MDc=", "avatar_url": "https://avatars.githubusercontent.com/u/4039407?v=4", "gravatar_id": "", "url": "https://api.github.com/users/iains", "html_url": "https://github.com/iains", "followers_url": "https://api.github.com/users/iains/followers", "following_url": "https://api.github.com/users/iains/following{/other_user}", "gists_url": "https://api.github.com/users/iains/gists{/gist_id}", "starred_url": "https://api.github.com/users/iains/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/iains/subscriptions", "organizations_url": "https://api.github.com/users/iains/orgs", "repos_url": "https://api.github.com/users/iains/repos", "events_url": "https://api.github.com/users/iains/events{/privacy}", "received_events_url": "https://api.github.com/users/iains/received_events", "type": "User", "site_admin": false}, "committer": {"login": "iains", "id": 4039407, "node_id": "MDQ6VXNlcjQwMzk0MDc=", "avatar_url": "https://avatars.githubusercontent.com/u/4039407?v=4", "gravatar_id": "", "url": "https://api.github.com/users/iains", "html_url": "https://github.com/iains", "followers_url": "https://api.github.com/users/iains/followers", "following_url": "https://api.github.com/users/iains/following{/other_user}", "gists_url": "https://api.github.com/users/iains/gists{/gist_id}", "starred_url": "https://api.github.com/users/iains/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/iains/subscriptions", "organizations_url": "https://api.github.com/users/iains/orgs", "repos_url": "https://api.github.com/users/iains/repos", "events_url": "https://api.github.com/users/iains/events{/privacy}", "received_events_url": "https://api.github.com/users/iains/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2aa9c6ae429676dd3e1db7cfb39bf61403c913a0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2aa9c6ae429676dd3e1db7cfb39bf61403c913a0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2aa9c6ae429676dd3e1db7cfb39bf61403c913a0"}], "stats": {"total": 639, "additions": 411, "deletions": 228}, "files": [{"sha": "22041467a2fa2a2aca7abc2236b012691b40b178", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5826c8d29eb8182a03ba533bdaed122ada974521/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5826c8d29eb8182a03ba533bdaed122ada974521/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=5826c8d29eb8182a03ba533bdaed122ada974521", "patch": "@@ -1,3 +1,32 @@\n+2011-01-11  Iain Sandoe  <iains@gcc.gnu.org>\n+\n+\t* objc-obj-c++-shared/next-mapping.h: Add copyright header.\n+\tSplit type definitions and NSConstantString class into...\n+\t* objc-obj-c++-shared/objc-test-suite-types.h: New.\n+\t* objc-obj-c++-shared/nsconstantstring-class.h: New.\n+\t* objc-obj-c++-shared/nsconstantstring-class-impl.h: New.\n+\t* objc-obj-c++-shared/nsconstantstring-class-impl.m: New.\n+\t* objc-obj-c++-shared/nsconstantstring-class-impl.mm: New.\n+\t* objc-obj-c++-shared/next-abi.h: Add copyright header, minor update\n+\tto comments.\n+\t* objc-obj-c++-shared/objc-test-suite-next-encode-assist.h: Adjust\n+\tencode defines for newer NeXT system headers.\n+\t* obj-c++.dg/template-4.mm: Adjust to use nsconstantstring headers.\n+\t* obj-c++.dg/torture/strings/string1.mm: Likewise.\n+\t* objc.dg/foreach-5.m: Likewise.\n+\t* objc.dg/foreach-2.m: Likewise.\n+\t* objc.dg/foreach-4.m: Likewise.\n+\t* objc.dg/torture/strings/string1.m: Likewise.\n+\t* objc.dg/torture/strings/string2.m: Likewise.\n+\t* objc.dg/torture/strings/string3.m: Likewise.\n+\t* objc.dg/torture/strings/string4.m: Likewise.\n+\t* obj-c++.dg/torture/strings/const-str-3.mm: Adjust to use type\n+\theader and stand alone.\n+\t* obj-c++.dg/strings/strings-2.mm: Likewise.\n+\t* objc.dg/torture/strings/const-str-3.m: Likewise.\n+\t* objc.dg/strings/strings-2.m: Likewise.\n+\t* objc.dg/strings/const-str-12b.m: Likewise.\n+\n 2011-01-12  Richard Guenther  <rguenther@suse.de>\n \n \tPR middle-end/32511"}, {"sha": "403cf7d3b456bec3870ffdf237760e971776a124", "filename": "gcc/testsuite/obj-c++.dg/strings/strings-2.mm", "status": "modified", "additions": 7, "deletions": 12, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5826c8d29eb8182a03ba533bdaed122ada974521/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fstrings%2Fstrings-2.mm", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5826c8d29eb8182a03ba533bdaed122ada974521/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fstrings%2Fstrings-2.mm", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fstrings%2Fstrings-2.mm?ref=5826c8d29eb8182a03ba533bdaed122ada974521", "patch": "@@ -5,24 +5,24 @@\n /* { dg-options \"-fconstant-string-class=MyTestString\" } */\n /* { dg-options \"-mno-constant-cfstrings -fconstant-string-class=MyTestString\" { target *-*-darwin* } } */\n \n-/* { dg-additional-sources \"../../objc-obj-c++-shared/Object1.mm\" } */\n-\n-#include \"../../objc-obj-c++-shared/Object1.h\"\n-#include \"../../objc-obj-c++-shared/next-mapping.h\"\n+#include \"../../objc-obj-c++-shared/objc-test-suite-types.h\"\n \n #include <stdlib.h> /* For abort() */\n \n-@interface MyTestString : Object\n+@interface MyTestString\n {\n+  void *dummy_class_ptr;\n   char *string;\n   unsigned int len;\n }\n++ initialize;\n /* All strings should contain the C string 'test'.  Call -check to\n    test that this is true.  */\n - (void) check;\n @end\n \n @implementation MyTestString\n++ initialize {return self;}\n - (void) check\n {\n   if (len != 4 || string[0] != 't' || string[1] != 'e'\n@@ -31,13 +31,7 @@ - (void) check\n }\n @end\n \n-#ifdef __NEXT_RUNTIME__\n-#  ifdef NEXT_OBJC_USE_NEW_INTERFACE\n-struct fudge_objc_class _MyTestStringClassReference;\n-#  else\n-struct objc_class _MyTestStringClassReference;\n-#  endif\n-#endif\n+TNS_STRING_REF_T _MyTestStringClassReference; /* Only used by NeXT.  */\n \n int main (void)\n {\n@@ -59,6 +53,7 @@ int main (void)\n }\n \n #ifdef __NEXT_RUNTIME__\n+#include <string.h>\n /* The MyTestString metaclass will need to be initialized before we can\n    send messages to strings.  */\n "}, {"sha": "af3145f055a6ec664ef783418120419a5b016356", "filename": "gcc/testsuite/obj-c++.dg/template-4.mm", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5826c8d29eb8182a03ba533bdaed122ada974521/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Ftemplate-4.mm", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5826c8d29eb8182a03ba533bdaed122ada974521/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Ftemplate-4.mm", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Ftemplate-4.mm?ref=5826c8d29eb8182a03ba533bdaed122ada974521", "patch": "@@ -3,17 +3,21 @@\n /* { dg-do run } */\n /* { dg-xfail-run-if \"Needs OBJC2 ABI\" { *-*-darwin* && { lp64 && { ! objc2 } } } { \"-fnext-runtime\" } { \"\" } } */\n /* { dg-options \"-mno-constant-cfstrings\" { target *-*-darwin* } } */\n-/* { dg-additional-sources \"../objc-obj-c++-shared/Object1.mm\" } */\n+/* { dg-additional-sources \"../objc-obj-c++-shared/Object1.mm ../objc-obj-c++-shared/nsconstantstring-class-impl.mm\" } */\n \n-#include \"../objc-obj-c++-shared/Object1.h\"\n-#include \"../objc-obj-c++-shared/next-mapping.h\"\n #include <stdarg.h>\n #include <stdlib.h>\n+#include <string.h>\n \n #ifndef __NEXT_RUNTIME__\n #include <objc/NXConstStr.h>\n+#else\n+#include \"../objc-obj-c++-shared/nsconstantstring-class.h\"\n #endif\n \n+#include \"../objc-obj-c++-shared/Object1.h\"\n+#include \"../objc-obj-c++-shared/next-mapping.h\"\n+\n #define CHECK_IF(expr) if(!(expr)) abort()\n \n template <class ARR, class TYPE> class TestT"}, {"sha": "461d97b19473e73793591e85886c0bb31fdb3ea4", "filename": "gcc/testsuite/obj-c++.dg/torture/strings/const-str-3.mm", "status": "modified", "additions": 13, "deletions": 16, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5826c8d29eb8182a03ba533bdaed122ada974521/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Ftorture%2Fstrings%2Fconst-str-3.mm", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5826c8d29eb8182a03ba533bdaed122ada974521/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Ftorture%2Fstrings%2Fconst-str-3.mm", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Ftorture%2Fstrings%2Fconst-str-3.mm?ref=5826c8d29eb8182a03ba533bdaed122ada974521", "patch": "@@ -6,32 +6,26 @@\n /* { dg-xfail-run-if \"Needs OBJC2 ABI\" { *-*-darwin* && { lp64 && { ! objc2 } } } { \"-fnext-runtime\" } { \"\" } } */\n /* { dg-options \"-fconstant-string-class=Foo\" } */\n /* { dg-options \"-mno-constant-cfstrings -fconstant-string-class=Foo\" { target *-*-darwin* } } */\n-/* { dg-additional-sources \"../../../objc-obj-c++-shared/Object1.mm\" } */\n \n-#import \"../../../objc-obj-c++-shared/Object1.h\"\n-#import \"../../../objc-obj-c++-shared/next-mapping.h\"\n+#include \"../../../objc-obj-c++-shared/objc-test-suite-types.h\"\n+\n #include <stdio.h>\n #include <stdlib.h>\n-#include <memory.h>\n-#include <objc/objc.h>\n-#ifndef __NEXT_RUNTIME__\n-#include <objc/objc-api.h>\n-#endif\n+#include <string.h>\n \n-@interface Foo: Object {\n+@interface Foo {\n+  void *dummy_class_ref;\n   char *cString;\n   unsigned int len;\n }\n++ initialize;\n - (char *)customString;\n @end\n \n-#ifdef NEXT_OBJC_USE_NEW_INTERFACE\n-struct fudge_objc_class _FooClassReference;\n-#else\n-struct objc_class _FooClassReference;\n-#endif\n+TNS_STRING_REF_T _FooClassReference; /* Only used by NeXT.  */\n \n-@implementation Foo : Object\n+@implementation Foo\n++ initialize {return self;}\n - (char *)customString {\n   return cString;\n }\n@@ -45,11 +39,14 @@ int main () {\n     abort();\n   printf(\"Strings are being uniqued properly\\n\");\n \n+#ifdef __NEXT_RUNTIME__\n   /* This memcpy has to be done before the first message is sent to a\n      constant string object. Can't be moved to +initialize since _that_\n      is already a message. */\n \n-  memcpy(&_FooClassReference, objc_get_class(\"Foo\"), sizeof(_FooClassReference));\n+  memcpy(&_FooClassReference, objc_getClass(\"Foo\"), sizeof(_FooClassReference));\n+#endif\n+\n   if (strcmp ([string customString], \"bla\")) {\n     abort ();\n   }"}, {"sha": "deacf43b34b8aff4e0c68e407bc293bae5419497", "filename": "gcc/testsuite/obj-c++.dg/torture/strings/string1.mm", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5826c8d29eb8182a03ba533bdaed122ada974521/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Ftorture%2Fstrings%2Fstring1.mm", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5826c8d29eb8182a03ba533bdaed122ada974521/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Ftorture%2Fstrings%2Fstring1.mm", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Ftorture%2Fstrings%2Fstring1.mm?ref=5826c8d29eb8182a03ba533bdaed122ada974521", "patch": "@@ -3,7 +3,7 @@\n /* { dg-do run } */\n /* { dg-options \"-mno-constant-cfstrings\" { target *-*-darwin* } } */\n /* { dg-xfail-run-if \"Needs OBJC2 ABI\" { *-*-darwin* && { lp64 && { ! objc2 } } } { \"-fnext-runtime\" } { \"\" } } */\n-/* { dg-additional-sources \"../../../objc-obj-c++-shared/Object1.mm\" } */\n+/* { dg-additional-sources \"../../../objc-obj-c++-shared/Object1.mm ../../../objc-obj-c++-shared/nsconstantstring-class-impl.mm\" } */\n \n #include \"../../../objc-obj-c++-shared/Object1.h\"\n #include \"../../../objc-obj-c++-shared/next-mapping.h\"\n@@ -13,6 +13,8 @@\n \n #ifndef __NEXT_RUNTIME__\n #include <objc/NXConstStr.h>\n+#else\n+#include \"../../../objc-obj-c++-shared/nsconstantstring-class.h\"\n #endif\n \n int main(int argc, char **args)"}, {"sha": "0ffa0fcba176fc34179c6a034c12e5b52ba0abed", "filename": "gcc/testsuite/objc-obj-c++-shared/next-abi.h", "status": "modified", "additions": 22, "deletions": 3, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5826c8d29eb8182a03ba533bdaed122ada974521/gcc%2Ftestsuite%2Fobjc-obj-c%2B%2B-shared%2Fnext-abi.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5826c8d29eb8182a03ba533bdaed122ada974521/gcc%2Ftestsuite%2Fobjc-obj-c%2B%2B-shared%2Fnext-abi.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc-obj-c%2B%2B-shared%2Fnext-abi.h?ref=5826c8d29eb8182a03ba533bdaed122ada974521", "patch": "@@ -1,3 +1,23 @@\n+/* Check which version of the API and ABI are appropriate for the target.\n+   Copyright (C) 2010, 2011 Free Software Foundation, Inc.\n+\n+   Contributed by Iain Sandoe <iains@gcc.gnu.org>\n+\n+This file is part of GCC.\n+\n+GCC is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 3, or (at your option)\n+any later version.\n+\n+GCC is distributed in the hope that it will be useful,\n+but WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+GNU General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GCC; see the file COPYING3.  If not see\n+<http://www.gnu.org/licenses/>.  */\n \n #ifndef _OBJC_NEXT_ABI_H_\n #define _OBJC_NEXT_ABI_H_\n@@ -6,9 +26,8 @@\n */\n \n /* By default we do nothing - therefore ifdef NEXT_OBJC_USE_NEW_INTERFACE\n- * is reliable for detecting \n- *  (a) versions of the compiler that are transitional to the new next ABI\n- *  (b) versions of the target that require the new ABI.\n+ * is reliable for detecting versions of the target that require either\n+ * API=2, or both API & ABI = 2 (m64 code).\n  *\n  * This applies for versions of OSX >= 10.5 (darwin9).\n  *"}, {"sha": "d2ae8e9e6797c13d390f8cb3661f08d365e19dbc", "filename": "gcc/testsuite/objc-obj-c++-shared/next-mapping.h", "status": "modified", "additions": 74, "deletions": 122, "changes": 196, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5826c8d29eb8182a03ba533bdaed122ada974521/gcc%2Ftestsuite%2Fobjc-obj-c%2B%2B-shared%2Fnext-mapping.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5826c8d29eb8182a03ba533bdaed122ada974521/gcc%2Ftestsuite%2Fobjc-obj-c%2B%2B-shared%2Fnext-mapping.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc-obj-c%2B%2B-shared%2Fnext-mapping.h?ref=5826c8d29eb8182a03ba533bdaed122ada974521", "patch": "@@ -1,42 +1,79 @@\n+/* Compatibility header between runtimes and APIs.\n+   Copyright (C) 2010, 2011 Free Software Foundation, Inc.\n+\n+   Original Authors: Ziemowit Laski <zlaski@apple.com>\n+\t\t     David Ayers <d.ayers@inode.at>\n+\t\t     \n+   re-work for ObjC2 by Iain Sandoe <iains@gcc.gnu.org>\n+\n+This file is part of GCC.\n+\n+GCC is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 3, or (at your option)\n+any later version.\n+\n+GCC is distributed in the hope that it will be useful,\n+but WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+GNU General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GCC; see the file COPYING3.  If not see\n+<http://www.gnu.org/licenses/>.  */\n+\n #ifndef _OBJC_NEXT_MAPPING_H_\n #define _OBJC_NEXT_MAPPING_H_\n \n-/* This file \"renames\" various ObjC GNU runtime entry points\n-   (and fakes the existence of several others)\n-   if the NeXT runtime is being used.  */\n-/* Authors: Ziemowit Laski <zlaski@apple.com>  */\n-/*\t    David Ayers <d.ayers@inode.at>  */\n-/* Darwin 64bit/OBJC2 modifications Iain Sandoe */ \n+/* This file provides a two-way mapping of API names for the original \n+   GNU & NeXT APIs. \n+   \n+   It is being expanded to provide mapping (where possible) between between the\n+   older API and API-2.\n+*/\n+\n+#include \"objc-test-suite-types.h\"\n \n #ifndef __NEXT_RUNTIME__\n \n-#define CLASSPTRFIELD(x) (x)->class_pointer\n-\n-#else\n-/* Includes next-abi.h to set NEXT_OBJC_USE_NEW_INTERFACE etc.*/\n-#ifndef _OBJC_OBJECT1_H_\n-#include \"Object1.h\"\n-#endif\n-#include <objc/objc-class.h>\n-#include <ctype.h>\n-#include <stdlib.h>\n-#include <string.h>\n-\n-/* Force a definition of nil that is compatible with GNU runtime.  */\n-#undef  nil\n-#define nil ((id)0)\n-\n-#define objc_get_class(C) objc_getClass(C)\n-#define objc_get_meta_class(C) objc_getMetaClass(C)\n-#define class_get_class_method(C, S) class_getClassMethod(C, S)\n-#define class_get_instance_method(C, S) class_getInstanceMethod(C, S)\n-#define sel_get_name(S) sel_getName(S)\n-#define class_create_instance(C) class_createInstance(C, 0)\n-#define\tclass_get_class_name(C) object_getClassName(C)\n-\n-#define CLASSPTRFIELD(x) (x)->isa\n-\n-#ifdef NEXT_OBJC_USE_NEW_INTERFACE\n+# define CLASSFIELD class_pointer\n+# define CLASSPTRFIELD(x) (x)->class_pointer\n+# define SUPERCLASS superClass\n+# define OBJC_GETCLASS objc_get_class\n+\n+# ifdef __objc_api_INCLUDE_GNU\n+#  define class_createInstance(C, S) class_create_instance(C)\n+# endif\n+# define method_get_types(M) (M)->method_types\n+\n+#else /* NeXT */\n+\n+/* Include next-abi.h to set NEXT_OBJC_USE_NEW_INTERFACE etc.*/\n+# include \"next-abi.h\"\n+\n+# ifdef NEXT_OBJC_USE_NEW_INTERFACE\n+   /* API=2. */\n+#  include <objc/runtime.h>\n+# else\n+   /* API=0. */\n+#  include <objc/objc-class.h>\n+# endif\n+\n+# define CLASSPTRFIELD(x) (x)->isa\n+# define SUPERCLASS superclass\n+# define OBJC_GETCLASS objc_getClass\n+\n+# define objc_get_class(C) objc_getClass(C)\n+# define objc_get_meta_class(C) objc_getMetaClass(C)\n+# define class_get_class_method(C, S) class_getClassMethod(C, S)\n+# define class_get_instance_method(C, S) class_getInstanceMethod(C, S)\n+# define sel_get_name(S) sel_getName(S)\n+# define class_create_instance(C) class_createInstance(C, 0)\n+# define class_get_class_name(C) object_getClassName(C)\n+# define objc_lookup_class(N) objc_lookUpClass(N)\n+\n+# ifdef NEXT_OBJC_USE_NEW_INTERFACE\n+\n #  define object_class_name(O) (object_getClassName(O)) \n #  define object_get_class(O) (object_getClass((id)O))\n #  define object_get_super_class(O) class_get_super_class(object_get_class(O))\n@@ -51,7 +88,8 @@\n #  define class_is_meta_class(C) (class_isMetaClass((Class)C) ? YES: NO)\n #  define class_is_class(C) (class_is_meta_class(C) == NO)\n \n-#else\n+# else /* OLD API */\n+\n #  define object_class_name(O) (O->name) \n #  define object_get_super_class(O) class_get_super_class(*(struct objc_class **)O)\n #  define object_get_class(O) (*(struct objc_class **)O)\n@@ -64,94 +102,8 @@\n #  define class_get_super_class(C) (((struct objc_class *)C)->super_class)\n #  define class_is_meta_class(C) (CLS_GETINFO((struct objc_class *)C, CLS_META)? YES: NO)\n #  define class_is_class(C) (CLS_GETINFO((struct objc_class *)C, CLS_CLASS)? YES: NO)\n-#endif\n-\n-#define objc_lookup_class(N) objc_lookUpClass(N)\n-\n-/* You need either an empty +initialize method or an empty -forward:: method. \n-   The NeXT runtime unconditionally sends +initialize to classes when they are \n-   first used, and unconditionally tries to forward methods that the class \n-   doesn't understand (including +initialize). If you have neither +initialize \n-   nor -forward::, the runtime complains.  \n-\n-   The simplest workaround is to add\n-\n-      + initialize { return self; }\n \n-   to every root class @implementation.  */\n+# endif /* NEXT_OBJC_USE_NEW_INTERFACE */\n \n-#ifndef NULL\n-#define NULL 0\n-#endif\n-\n-\n-/* A small, portable NSConstantString implementation for use with the NeXT\n-   runtime.\n-   \n-   On full-fledged Mac OS X systems, NSConstantString is provided\n-   as part of the Foundation framework.  However, on bare Darwin systems,\n-   Foundation is not included, and hence there is no NSConstantString \n-   implementation to link against.\n-\n-   This code is derived from the GNU runtime's NXConstantString implementation.\n-*/\n-\n-/* This definition cut out of <objc/Object.h> with the OBJC2 deprecation\n-   messages removed. \n-*/\n-#ifdef NEXT_OBJC_USE_NEW_INTERFACE\n-struct fudge_objc_class {\n-    Class isa;\n-#if NEXT_OBJC_ABI_VERSION < 2\n-    Class super_class ;\n-    const char *name ;\n-    long version  ;\n-    long info ;\n-    long instance_size ;\n-    struct anon *ivars ; /* objc_ivar_list */\n-    struct anon1 **methodLists ; /* objc_method_list */\n-    struct objc_cache *cache  ;\n-    struct objc_protocol_list *protocols ;\n-#endif\n-} _NSConstantStringClassReference ;\n-#else\n-struct objc_class _NSConstantStringClassReference ;\n-#endif\n-\n-@interface NSConstantString : Object\n-{\n-  char *c_string;\n-  unsigned int len;\n-}\n-\n--(const char *) cString;\n--(unsigned int) length;\n-\n-@end\n-\n-@implementation NSConstantString\n-\n--(const char *) cString\n-{\n-  return (c_string);\n-}\n-\n--(unsigned int) length\n-{\n-  return (len);\n-}\n-\n-@end\n-\n-/* The NSConstantString metaclass will need to be initialized before we can\n-   send messages to strings.  */\n-\n-void objc_constant_string_init (void) __attribute__((constructor));\n-void objc_constant_string_init (void) {\n-  memcpy (&_NSConstantStringClassReference,\n-\t  objc_getClass (\"NSConstantString\"),\n-\t  sizeof (_NSConstantStringClassReference));\n-}\n-\n-#endif  /*__NEXT_RUNTIME__ */\n+# endif  /*__NEXT_RUNTIME__ */\n #endif /* _OBJC_NEXT_MAPPING_H_ */\n\\ No newline at end of file"}, {"sha": "0068b4a2ae4ee63bd5e69efc44f352b0d625151e", "filename": "gcc/testsuite/objc-obj-c++-shared/nsconstantstring-class-impl.h", "status": "added", "additions": 61, "deletions": 0, "changes": 61, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5826c8d29eb8182a03ba533bdaed122ada974521/gcc%2Ftestsuite%2Fobjc-obj-c%2B%2B-shared%2Fnsconstantstring-class-impl.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5826c8d29eb8182a03ba533bdaed122ada974521/gcc%2Ftestsuite%2Fobjc-obj-c%2B%2B-shared%2Fnsconstantstring-class-impl.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc-obj-c%2B%2B-shared%2Fnsconstantstring-class-impl.h?ref=5826c8d29eb8182a03ba533bdaed122ada974521", "patch": "@@ -0,0 +1,61 @@\n+/* A small NSConstantString implementation for use with the NeXT runtime.\n+   Copyright (C) 2011 Free Software Foundation, Inc.\n+\t\t     \n+   Contributed by Iain Sandoe <iains@gcc.gnu.org>\n+\n+This file is part of GCC.\n+\n+GCC is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 3, or (at your option)\n+any later version.\n+\n+GCC is distributed in the hope that it will be useful,\n+but WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+GNU General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GCC; see the file COPYING3.  If not see\n+<http://www.gnu.org/licenses/>.  */\n+\n+#ifdef __NEXT_RUNTIME__\n+\n+#include \"nsconstantstring-class.h\"\n+#include <string.h>\n+\n+/* On full-fledged Mac OS X systems, NSConstantString is provided\n+   as part of the Foundation framework.  However, on bare Darwin systems,\n+   Foundation is not included, and hence there is no NSConstantString \n+   implementation to link against.\n+\n+   This code is derived from the GNU runtime's NXConstantString implementation.\n+*/\n+\n+@implementation NSConstantString\n+/* NeXT requires this or forward:  */\n++initialize { return self; }\n+\n+-(const char *) cString\n+{\n+  return (c_string);\n+}\n+\n+-(unsigned int) length\n+{\n+  return (len);\n+}\n+@end\n+\n+TNS_STRING_REF_T _NSConstantStringClassReference;\n+\n+/* The NSConstantString metaclass will need to be initialized before we can\n+   send messages to strings.  */\n+\n+void objc_constant_string_init (void) __attribute__((constructor));\n+void objc_constant_string_init (void) {\n+  memcpy (&_NSConstantStringClassReference,\n+\t  objc_getClass (\"NSConstantString\"),\n+\t  sizeof (_NSConstantStringClassReference));\n+}\n+#endif"}, {"sha": "cd9c7dd8fa5d7487d2f41d5a75768f59338d83ae", "filename": "gcc/testsuite/objc-obj-c++-shared/nsconstantstring-class-impl.m", "status": "added", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5826c8d29eb8182a03ba533bdaed122ada974521/gcc%2Ftestsuite%2Fobjc-obj-c%2B%2B-shared%2Fnsconstantstring-class-impl.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5826c8d29eb8182a03ba533bdaed122ada974521/gcc%2Ftestsuite%2Fobjc-obj-c%2B%2B-shared%2Fnsconstantstring-class-impl.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc-obj-c%2B%2B-shared%2Fnsconstantstring-class-impl.m?ref=5826c8d29eb8182a03ba533bdaed122ada974521", "patch": "@@ -0,0 +1,3 @@\n+/* Allow code to be shared between the FEs but avoid issues with\n+   C++-only flags.  */\n+#include \"nsconstantstring-class-impl.h\""}, {"sha": "cd9c7dd8fa5d7487d2f41d5a75768f59338d83ae", "filename": "gcc/testsuite/objc-obj-c++-shared/nsconstantstring-class-impl.mm", "status": "added", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5826c8d29eb8182a03ba533bdaed122ada974521/gcc%2Ftestsuite%2Fobjc-obj-c%2B%2B-shared%2Fnsconstantstring-class-impl.mm", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5826c8d29eb8182a03ba533bdaed122ada974521/gcc%2Ftestsuite%2Fobjc-obj-c%2B%2B-shared%2Fnsconstantstring-class-impl.mm", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc-obj-c%2B%2B-shared%2Fnsconstantstring-class-impl.mm?ref=5826c8d29eb8182a03ba533bdaed122ada974521", "patch": "@@ -0,0 +1,3 @@\n+/* Allow code to be shared between the FEs but avoid issues with\n+   C++-only flags.  */\n+#include \"nsconstantstring-class-impl.h\""}, {"sha": "485e39e6f085d82fe2889431c350d484edb3fdad", "filename": "gcc/testsuite/objc-obj-c++-shared/nsconstantstring-class.h", "status": "added", "additions": 51, "deletions": 0, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5826c8d29eb8182a03ba533bdaed122ada974521/gcc%2Ftestsuite%2Fobjc-obj-c%2B%2B-shared%2Fnsconstantstring-class.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5826c8d29eb8182a03ba533bdaed122ada974521/gcc%2Ftestsuite%2Fobjc-obj-c%2B%2B-shared%2Fnsconstantstring-class.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc-obj-c%2B%2B-shared%2Fnsconstantstring-class.h?ref=5826c8d29eb8182a03ba533bdaed122ada974521", "patch": "@@ -0,0 +1,51 @@\n+/* A small NSConstantString implementation for use with the NeXT runtime.\n+   Copyright (C) 2011 Free Software Foundation, Inc.\n+\n+This file is part of GCC.\n+\n+GCC is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 3, or (at your option)\n+any later version.\n+\n+GCC is distributed in the hope that it will be useful,\n+but WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+GNU General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GCC; see the file COPYING3.  If not see\n+<http://www.gnu.org/licenses/>.  */\n+\n+#ifndef _test_suite_nsconstantstring_class_h_\n+#define _test_suite_nsconstantstring_class_h_\n+#ifdef __NEXT_RUNTIME__\n+\n+/* On full-fledged Mac OS X systems, NSConstantString is provided\n+   as part of the Foundation framework.  However, on bare Darwin systems,\n+   Foundation is not included, and hence there is no NSConstantString \n+   implementation to link against.\n+\n+   This code is derived from the GNU runtime's NXConstantString implementation.\n+*/\n+\n+#include \"objc-test-suite-types.h\"\n+\n+extern TNS_STRING_REF_T _NSConstantStringClassReference;\n+\n+@interface NSConstantString\n+{\n+  Class isa;\n+  char *c_string;\n+  unsigned int len;\n+}\n+\n++ (id) initialize;\n+\n+- (const char *) cString;\n+- (unsigned int) length;\n+\n+@end\n+\n+#endif /* __NEXT_RUNTIME__ */\n+#endif /* _test_suite_nsconstantstring_class_h_ */"}, {"sha": "af02b278a2e44c1c51ff2d8a85d3147b4eedf317", "filename": "gcc/testsuite/objc-obj-c++-shared/objc-test-suite-next-encode-assist.h", "status": "modified", "additions": 9, "deletions": 19, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5826c8d29eb8182a03ba533bdaed122ada974521/gcc%2Ftestsuite%2Fobjc-obj-c%2B%2B-shared%2Fobjc-test-suite-next-encode-assist.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5826c8d29eb8182a03ba533bdaed122ada974521/gcc%2Ftestsuite%2Fobjc-obj-c%2B%2B-shared%2Fobjc-test-suite-next-encode-assist.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc-obj-c%2B%2B-shared%2Fobjc-test-suite-next-encode-assist.h?ref=5826c8d29eb8182a03ba533bdaed122ada974521", "patch": "@@ -10,29 +10,18 @@ typedef void * PMETH;\n #else\n #include <objc/objc-runtime.h>\n typedef struct objc_method * PMETH;\n-#endif\n-\n-/* The NeXT headers do not define NULL.  */\n-#ifndef NULL\n-#define NULL 0\n-#endif\n \n-/* The NeXT runtimes do not include these functions (at least not through \n-   any public API).  They are required for the objc/execute/bf-* and bycopy-3. */\n-\n-/* Not sure why the following are missing from NeXT objc headers... */\n-\n-#ifndef _C_LNG_LNG\n+/* Missing from old NeXT objc headers... */\n #define _C_LNG_LNG  'q'\n-#endif\n-#ifndef _C_ULNG_LNG\n #define _C_ULNG_LNG 'Q'\n-#endif\n-#ifndef _C_ATOM\n #define _C_ATOM     '%'\n-#endif\n-#ifndef _C_BOOL\n #define _C_BOOL     'B'\n+\n+#endif\n+\n+/* The NeXT headers do not define NULL.  */\n+#ifndef NULL\n+#define NULL 0\n #endif\n \n #define _C_CONST        'r'\n@@ -53,7 +42,8 @@ typedef struct objc_method * PMETH;\n #define _F_ONEWAY       0x10\n #define _F_GCINVISIBLE  0x20\n \n-/* Functions available in the GNU runtime, emulated here for testing with NeXT.  */\n+/* The NeXT runtimes do not include these functions (at least not through \n+   any public API).  They are required for the objc/execute/bf-* and bycopy-3. */\n \n struct objc_struct_layout\n {"}, {"sha": "ab502d4676082a22761e167e1f61692fd57ad585", "filename": "gcc/testsuite/objc-obj-c++-shared/objc-test-suite-types.h", "status": "added", "additions": 80, "deletions": 0, "changes": 80, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5826c8d29eb8182a03ba533bdaed122ada974521/gcc%2Ftestsuite%2Fobjc-obj-c%2B%2B-shared%2Fobjc-test-suite-types.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5826c8d29eb8182a03ba533bdaed122ada974521/gcc%2Ftestsuite%2Fobjc-obj-c%2B%2B-shared%2Fobjc-test-suite-types.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc-obj-c%2B%2B-shared%2Fobjc-test-suite-types.h?ref=5826c8d29eb8182a03ba533bdaed122ada974521", "patch": "@@ -0,0 +1,80 @@\n+/* Define test-suite types to minimize conditional test-case source.\n+   Copyright (C) 2011 Free Software Foundation, Inc.\n+   Contributed by Iain Sandoe \n+\n+This file is part of GCC.\n+\n+GCC is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 3, or (at your option)\n+any later version.\n+\n+GCC is distributed in the hope that it will be useful,\n+but WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+GNU General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GCC; see the file COPYING3.  If not see\n+<http://www.gnu.org/licenses/>.  */\n+\n+#ifndef _OBJC_TEST_SUITE_TYPES_H_\n+#define _OBJC_TEST_SUITE_TYPES_H_\n+\n+#ifdef __cplusplus\n+#define ProtoBool bool\n+#else\n+#define ProtoBool _Bool\n+#endif\n+\n+#ifndef __NEXT_RUNTIME__\n+\n+#define METHOD Method_t\n+#define IVAR_T struct objc_ivar\n+\n+/* dummy const string class ref. */\n+typedef void * TNS_STRING_REF_T;\n+\n+#else /* NeXT */\n+\n+#include \"next-abi.h\"\n+#ifdef NEXT_OBJC_USE_NEW_INTERFACE\n+#include <objc/runtime.h>\n+#else\n+#include <objc/objc-runtime.h>\n+#endif\n+\n+/* Force a definition of nil that is compatible with GNU runtime.  */\n+#undef  nil\n+#define nil ((id)0)\n+\n+#ifndef NULL\n+#define NULL 0\n+#endif\n+\n+#define METHOD Method\n+\n+/* Where there are equivalent interfaces between APIs we substitute\n+   a macro or typedef.  */\n+#ifdef NEXT_OBJC_USE_NEW_INTERFACE\n+typedef void * PMETH;\n+#define IVAR_T Ivar \n+#else\n+typedef struct objc_method * PMETH;\n+#define IVAR_T struct objc_ivar \n+#endif\n+\n+#ifdef __OBJC2__\n+/* Const String Class ref.  */\n+typedef Class TNS_STRING_REF_T;\n+#else\n+/* Const String Class ref.  */\n+/* We need objc_class - but we don't need endless reminders that it's deprecated.  */\n+#pragma GCC diagnostic push\n+#pragma GCC diagnostic ignored \"-Wdeprecated-declarations\"\n+typedef struct objc_class TNS_STRING_REF_T;\n+#pragma GCC diagnostic pop\n+#endif\n+\n+#endif  /*__NEXT_RUNTIME__ */\n+#endif /* _OBJC_TEST_SUITE_TYPES_H_ */\n\\ No newline at end of file"}, {"sha": "a319a4bc7165fdd9d534e0c71cee82a43c2106fd", "filename": "gcc/testsuite/objc.dg/foreach-2.m", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5826c8d29eb8182a03ba533bdaed122ada974521/gcc%2Ftestsuite%2Fobjc.dg%2Fforeach-2.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5826c8d29eb8182a03ba533bdaed122ada974521/gcc%2Ftestsuite%2Fobjc.dg%2Fforeach-2.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc.dg%2Fforeach-2.m?ref=5826c8d29eb8182a03ba533bdaed122ada974521", "patch": "@@ -5,12 +5,14 @@\n /* { dg-skip-if \"No NeXT fast enum. pre-Darwin9\" { *-*-darwin[5-8]* } { \"-fnext-runtime\" } { \"\" } } */\n /* { dg-xfail-run-if \"Needs OBJC2 ABI\" { *-*-darwin* && { lp64 && { ! objc2 } } } { \"-fnext-runtime\" } { \"\" } } */\n /* { dg-options \"-mno-constant-cfstrings\" { target *-*-darwin* } } */\n-/* { dg-additional-sources \"../objc-obj-c++-shared/Object1.m\" } */\n+/* { dg-additional-sources \"../objc-obj-c++-shared/Object1.m ../objc-obj-c++-shared/nsconstantstring-class-impl.m\" } */\n \n #include \"../objc-obj-c++-shared/Object1.h\"\n #include \"../objc-obj-c++-shared/next-mapping.h\"\n #ifndef __NEXT_RUNTIME__\n #include <objc/NXConstStr.h>\n+#else\n+#include \"../objc-obj-c++-shared/nsconstantstring-class.h\"\n #endif\n \n extern int printf (const char *, ...);"}, {"sha": "13b9b0bb9de0f87e5cc395ff7164ccb292041a22", "filename": "gcc/testsuite/objc.dg/foreach-4.m", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5826c8d29eb8182a03ba533bdaed122ada974521/gcc%2Ftestsuite%2Fobjc.dg%2Fforeach-4.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5826c8d29eb8182a03ba533bdaed122ada974521/gcc%2Ftestsuite%2Fobjc.dg%2Fforeach-4.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc.dg%2Fforeach-4.m?ref=5826c8d29eb8182a03ba533bdaed122ada974521", "patch": "@@ -5,12 +5,14 @@\n /* { dg-skip-if \"No NeXT fast enum. pre-Darwin9\" { *-*-darwin[5-8]* } { \"-fnext-runtime\" } { \"\" } } */\n /* { dg-xfail-run-if \"Needs OBJC2 ABI\" { *-*-darwin* && { lp64 && { ! objc2 } } } { \"-fnext-runtime\" } { \"\" } } */\n /* { dg-options \"-mno-constant-cfstrings\" { target *-*-darwin* } } */\n-/* { dg-additional-sources \"../objc-obj-c++-shared/Object1.m\" } */\n+/* { dg-additional-sources \"../objc-obj-c++-shared/Object1.m ../objc-obj-c++-shared/nsconstantstring-class-impl.m\" } */\n \n #import \"../objc-obj-c++-shared/Object1.h\"\n #import \"../objc-obj-c++-shared/next-mapping.h\"\n #ifndef __NEXT_RUNTIME__\n #include <objc/NXConstStr.h>\n+#else\n+#include \"../objc-obj-c++-shared/nsconstantstring-class.h\"\n #endif\n \n extern int printf (const char *, ...);"}, {"sha": "c715b2d822d30c412b905a301dc702889ba5c02d", "filename": "gcc/testsuite/objc.dg/foreach-5.m", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5826c8d29eb8182a03ba533bdaed122ada974521/gcc%2Ftestsuite%2Fobjc.dg%2Fforeach-5.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5826c8d29eb8182a03ba533bdaed122ada974521/gcc%2Ftestsuite%2Fobjc.dg%2Fforeach-5.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc.dg%2Fforeach-5.m?ref=5826c8d29eb8182a03ba533bdaed122ada974521", "patch": "@@ -5,12 +5,14 @@\n /* { dg-skip-if \"No NeXT fast enum. pre-Darwin9\" { *-*-darwin[5-8]* } { \"-fnext-runtime\" } { \"\" } } */\n /* { dg-xfail-run-if \"Needs OBJC2 ABI\" { *-*-darwin* && { lp64 && { ! objc2 } } } { \"-fnext-runtime\" } { \"\" } } */\n /* { dg-options \"-mno-constant-cfstrings\" { target *-*-darwin* } } */\n-/* { dg-additional-sources \"../objc-obj-c++-shared/Object1.m\" } */\n+/* { dg-additional-sources \"../objc-obj-c++-shared/Object1.m ../objc-obj-c++-shared/nsconstantstring-class-impl.m\" } */\n \n #import \"../objc-obj-c++-shared/Object1.h\"\n #import \"../objc-obj-c++-shared/next-mapping.h\"\n #ifndef __NEXT_RUNTIME__\n #include <objc/NXConstStr.h>\n+#else\n+#include \"../objc-obj-c++-shared/nsconstantstring-class.h\"\n #endif\n \n extern int printf (const char *, ...);"}, {"sha": "430ab5db2d60d849264c6ea2f6460497709cb7f9", "filename": "gcc/testsuite/objc.dg/strings/const-str-12b.m", "status": "modified", "additions": 3, "deletions": 7, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5826c8d29eb8182a03ba533bdaed122ada974521/gcc%2Ftestsuite%2Fobjc.dg%2Fstrings%2Fconst-str-12b.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5826c8d29eb8182a03ba533bdaed122ada974521/gcc%2Ftestsuite%2Fobjc.dg%2Fstrings%2Fconst-str-12b.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc.dg%2Fstrings%2Fconst-str-12b.m?ref=5826c8d29eb8182a03ba533bdaed122ada974521", "patch": "@@ -5,8 +5,8 @@\n /* { dg-options \"-fconstant-string-class=Foo\" } */\n /* { dg-options \"-mno-constant-cfstrings -fconstant-string-class=Foo\" { target *-*-darwin* } } */\n \n-#include \"../../objc-obj-c++-shared/Object1.h\"\n-#import \"../../objc-obj-c++-shared/next-mapping.h\"\n+#include <objc/Object.h>\n+#include \"../../objc-obj-c++-shared/objc-test-suite-types.h\"\n \n @interface Foo: Object {\n   char *cString;\n@@ -19,11 +19,7 @@ @interface Bar: Object\n + (Foo *) getString: (int) which;\n @end\n \n-#ifdef NEXT_OBJC_USE_NEW_INTERFACE\n-struct fudge_objc_class _FooClassReference;\n-#else\n-struct objc_class _FooClassReference;\n-#endif\n+TNS_STRING_REF_T _FooClassReference;  /* Only used by NeXT.  */\n \n @implementation Bar\n + (Foo *) getString: (int) which {"}, {"sha": "b07ac0f784214c1cd02dd2ac30d246754f6d9514", "filename": "gcc/testsuite/objc.dg/strings/strings-2.m", "status": "modified", "additions": 8, "deletions": 12, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5826c8d29eb8182a03ba533bdaed122ada974521/gcc%2Ftestsuite%2Fobjc.dg%2Fstrings%2Fstrings-2.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5826c8d29eb8182a03ba533bdaed122ada974521/gcc%2Ftestsuite%2Fobjc.dg%2Fstrings%2Fstrings-2.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc.dg%2Fstrings%2Fstrings-2.m?ref=5826c8d29eb8182a03ba533bdaed122ada974521", "patch": "@@ -5,24 +5,25 @@\n /* { dg-options \"-fconstant-string-class=MyTestString\" } */\n /* { dg-options \"-mno-constant-cfstrings -fconstant-string-class=MyTestString\" { target *-*-darwin* } } */\n \n-/* { dg-additional-sources \"../../objc-obj-c++-shared/Object1.m\" } */\n-\n-#include \"../../objc-obj-c++-shared/Object1.h\"\n-#include \"../../objc-obj-c++-shared/next-mapping.h\"\n+#include \"../../objc-obj-c++-shared/objc-test-suite-types.h\"\n \n #include <stdlib.h> /* For abort() */\n \n-@interface MyTestString : Object\n+@interface MyTestString\n {\n+  void *dummy_class_ptr;\n   char *string;\n   unsigned int len;\n }\n++ initialize;\n /* All strings should contain the C string 'test'.  Call -check to\n    test that this is true.  */\n - (void) check;\n @end\n \n @implementation MyTestString\n++ initialize {return self;}\n+\n - (void) check\n {\n   if (len != 4 || string[0] != 't' || string[1] != 'e'\n@@ -31,13 +32,7 @@ - (void) check\n }\n @end\n \n-#ifdef __NEXT_RUNTIME__\n-#  ifdef NEXT_OBJC_USE_NEW_INTERFACE\n-struct fudge_objc_class _MyTestStringClassReference;\n-#  else\n-struct objc_class _MyTestStringClassReference;\n-#  endif\n-#endif\n+TNS_STRING_REF_T _MyTestStringClassReference; /* Only used by NeXT.  */\n \n int main (void)\n {\n@@ -61,6 +56,7 @@ int main (void)\n #ifdef __NEXT_RUNTIME__\n /* The MyTestString metaclass will need to be initialized before we can\n    send messages to strings.  */\n+#include <string.h>\n \n void testsuite_mytest_string_init (void) __attribute__((constructor));\n void testsuite_mytest_string_init (void) {"}, {"sha": "0eb2d6a01e06916de56893644640135bb4f076a0", "filename": "gcc/testsuite/objc.dg/torture/strings/const-str-3.m", "status": "modified", "additions": 13, "deletions": 12, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5826c8d29eb8182a03ba533bdaed122ada974521/gcc%2Ftestsuite%2Fobjc.dg%2Ftorture%2Fstrings%2Fconst-str-3.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5826c8d29eb8182a03ba533bdaed122ada974521/gcc%2Ftestsuite%2Fobjc.dg%2Ftorture%2Fstrings%2Fconst-str-3.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc.dg%2Ftorture%2Fstrings%2Fconst-str-3.m?ref=5826c8d29eb8182a03ba533bdaed122ada974521", "patch": "@@ -4,28 +4,27 @@\n /* { dg-xfail-run-if \"Needs OBJC2 ABI\" { *-*-darwin* && { lp64 && { ! objc2 } } } { \"-fnext-runtime\" } { \"\" } } */\n /* { dg-options \"-fconstant-string-class=Foo\" } */\n /* { dg-options \"-mno-constant-cfstrings -fconstant-string-class=Foo\" { target *-*-darwin* } } */\n-/* { dg-additional-sources \"../../../objc-obj-c++-shared/Object1.m\" } */\n \n-#include \"../../../objc-obj-c++-shared/Object1.h\"\n-#include \"../../../objc-obj-c++-shared/next-mapping.h\"\n+#include \"../../../objc-obj-c++-shared/objc-test-suite-types.h\"\n+\n #include <stdio.h>\n #include <stdlib.h>\n #include <string.h>\n \n-@interface Foo: Object {\n+@interface Foo {\n+  void *dummy_class_ref;\n   char *cString;\n   unsigned int len;\n }\n++ initialize;\n - (char *)customString;\n @end\n \n-#ifdef NEXT_OBJC_USE_NEW_INTERFACE\n-struct fudge_objc_class _FooClassReference;\n-#else\n-struct objc_class _FooClassReference;\n-#endif\n+TNS_STRING_REF_T _FooClassReference; /* Only used by NeXT.  */\n+\n+@implementation Foo\n++ initialize {return self;}\n \n-@implementation Foo : Object\n - (char *)customString {\n   return cString;\n }\n@@ -39,11 +38,13 @@ int main () {\n     abort();\n   printf(\"Strings are being uniqued properly\\n\");\n \n+#ifdef __NEXT_RUNTIME__\n   /* This memcpy has to be done before the first message is sent to a\n      constant string object. Can't be moved to +initialize since _that_\n-     is already a message. */\n+     is already a message.  */\n \n-  memcpy(&_FooClassReference, objc_get_class(\"Foo\"), sizeof(_FooClassReference));\n+  memcpy(&_FooClassReference, objc_getClass(\"Foo\"), sizeof(_FooClassReference));\n+#endif\n   if (strcmp ([string customString], \"bla\")) {\n     abort ();\n   }"}, {"sha": "455b5f1bff14821fd2b7ced6dafbbb677e1b2e30", "filename": "gcc/testsuite/objc.dg/torture/strings/string1.m", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5826c8d29eb8182a03ba533bdaed122ada974521/gcc%2Ftestsuite%2Fobjc.dg%2Ftorture%2Fstrings%2Fstring1.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5826c8d29eb8182a03ba533bdaed122ada974521/gcc%2Ftestsuite%2Fobjc.dg%2Ftorture%2Fstrings%2Fstring1.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc.dg%2Ftorture%2Fstrings%2Fstring1.m?ref=5826c8d29eb8182a03ba533bdaed122ada974521", "patch": "@@ -1,18 +1,17 @@\n /* Based on a test case contributed by Nicola Pero.  */\n \n /* { dg-do run } */\n-/* { dg-options \"-mno-constant-cfstrings\" { target *-*-darwin* } } */\n+/* { dg-options \"-mno-constant-cfstrings -Wno-deprecated-declarations\" { target *-*-darwin* } } */\n /* { dg-xfail-run-if \"Needs OBJC2 ABI\" { *-*-darwin* && { lp64 && { ! objc2 } } } { \"-fnext-runtime\" } { \"\" } } */\n-/* { dg-additional-sources \"../../../objc-obj-c++-shared/Object1.m\" } */\n-\n-#include \"../../../objc-obj-c++-shared/Object1.h\"\n-#include \"../../../objc-obj-c++-shared/next-mapping.h\"\n+/* { dg-additional-sources \"../../../objc-obj-c++-shared/nsconstantstring-class-impl.m\" } */\n \n #include <string.h>\n #include <stdlib.h>\n \n #ifndef __NEXT_RUNTIME__\n #include <objc/NXConstStr.h>\n+#else\n+#include \"../../../objc-obj-c++-shared/nsconstantstring-class.h\"\n #endif\n \n int main(int argc, void **args)"}, {"sha": "030ba602db5018d7b32aef8c6bb7313a606afe9e", "filename": "gcc/testsuite/objc.dg/torture/strings/string2.m", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5826c8d29eb8182a03ba533bdaed122ada974521/gcc%2Ftestsuite%2Fobjc.dg%2Ftorture%2Fstrings%2Fstring2.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5826c8d29eb8182a03ba533bdaed122ada974521/gcc%2Ftestsuite%2Fobjc.dg%2Ftorture%2Fstrings%2Fstring2.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc.dg%2Ftorture%2Fstrings%2Fstring2.m?ref=5826c8d29eb8182a03ba533bdaed122ada974521", "patch": "@@ -1,18 +1,17 @@\n /* Based on a test case contributed by Nicola Pero.  */\n \n /* { dg-do run } */\n-/* { dg-options \"-mno-constant-cfstrings\" { target *-*-darwin* } } */\n+/* { dg-options \"-mno-constant-cfstrings -Wno-deprecated-declarations\" { target *-*-darwin* } } */\n /* { dg-xfail-run-if \"Needs OBJC2 ABI\" { *-*-darwin* && { lp64 && { ! objc2 } } } { \"-fnext-runtime\" } { \"\" } } */\n-/* { dg-additional-sources \"../../../objc-obj-c++-shared/Object1.m\" } */\n-\n-#include \"../../../objc-obj-c++-shared/Object1.h\"\n-#include \"../../../objc-obj-c++-shared/next-mapping.h\"\n+/* { dg-additional-sources \"../../../objc-obj-c++-shared/nsconstantstring-class-impl.m\" } */\n \n #include <string.h>\n #include <stdlib.h>\n \n #ifndef __NEXT_RUNTIME__\n #include <objc/NXConstStr.h>\n+#else\n+#include \"../../../objc-obj-c++-shared/nsconstantstring-class.h\"\n #endif\n \n int main(int argc, void **args)"}, {"sha": "b08dfb242b33ee873193c467d16c7c12fb834106", "filename": "gcc/testsuite/objc.dg/torture/strings/string3.m", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5826c8d29eb8182a03ba533bdaed122ada974521/gcc%2Ftestsuite%2Fobjc.dg%2Ftorture%2Fstrings%2Fstring3.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5826c8d29eb8182a03ba533bdaed122ada974521/gcc%2Ftestsuite%2Fobjc.dg%2Ftorture%2Fstrings%2Fstring3.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc.dg%2Ftorture%2Fstrings%2Fstring3.m?ref=5826c8d29eb8182a03ba533bdaed122ada974521", "patch": "@@ -1,17 +1,17 @@\n /* Based on a test case contributed by Nicola Pero.  */\n \n /* { dg-do run } */\n-/* { dg-options \"-mno-constant-cfstrings\" { target *-*-darwin* } } */\n+/* { dg-options \"-mno-constant-cfstrings -Wno-deprecated-declarations\" { target *-*-darwin* } } */\n /* { dg-xfail-run-if \"Needs OBJC2 ABI\" { *-*-darwin* && { lp64 && { ! objc2 } } } { \"-fnext-runtime\" } { \"\" } } */\n-/* { dg-additional-sources \"../../../objc-obj-c++-shared/Object1.m\" } */\n+/* { dg-additional-sources \"../../../objc-obj-c++-shared/nsconstantstring-class-impl.m\" } */\n \n-#include \"../../../objc-obj-c++-shared/Object1.h\"\n-#import \"../../../objc-obj-c++-shared/next-mapping.h\"\n #include <string.h>\n #include <stdlib.h>\n \n #ifndef __NEXT_RUNTIME__\n #include <objc/NXConstStr.h>\n+#else\n+#include \"../../../objc-obj-c++-shared/nsconstantstring-class.h\"\n #endif\n \n #define STRING \"this is a string\""}, {"sha": "425ccc080ea4e2240ef0ee2ba84f819afbed03d0", "filename": "gcc/testsuite/objc.dg/torture/strings/string4.m", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5826c8d29eb8182a03ba533bdaed122ada974521/gcc%2Ftestsuite%2Fobjc.dg%2Ftorture%2Fstrings%2Fstring4.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5826c8d29eb8182a03ba533bdaed122ada974521/gcc%2Ftestsuite%2Fobjc.dg%2Ftorture%2Fstrings%2Fstring4.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc.dg%2Ftorture%2Fstrings%2Fstring4.m?ref=5826c8d29eb8182a03ba533bdaed122ada974521", "patch": "@@ -1,17 +1,17 @@\n /* Based on a test case contributed by Nicola Pero.  */\n \n /* { dg-do run } */\n-/* { dg-options \"-mno-constant-cfstrings\" { target *-*-darwin* } } */\n+/* { dg-options \"-mno-constant-cfstrings -Wno-deprecated-declarations\" { target *-*-darwin* } } */\n /* { dg-xfail-run-if \"Needs OBJC2 ABI\" { *-*-darwin* && { lp64 && { ! objc2 } } } { \"-fnext-runtime\" } { \"\" } } */\n-/* { dg-additional-sources \"../../../objc-obj-c++-shared/Object1.m\" } */\n+/* { dg-additional-sources \"../../../objc-obj-c++-shared/nsconstantstring-class-impl.m\" } */\n \n-#include \"../../../objc-obj-c++-shared/Object1.h\"\n-#import \"../../../objc-obj-c++-shared/next-mapping.h\"\n #include <string.h>\n #include <stdlib.h>\n \n #ifndef __NEXT_RUNTIME__\n #include <objc/NXConstStr.h>\n+#else\n+#include \"../../../objc-obj-c++-shared/nsconstantstring-class.h\"\n #endif\n \n int main(int argc, void **args)"}]}