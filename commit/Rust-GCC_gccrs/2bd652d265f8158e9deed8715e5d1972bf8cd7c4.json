{"sha": "2bd652d265f8158e9deed8715e5d1972bf8cd7c4", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MmJkNjUyZDI2NWY4MTU4ZTlkZWVkODcxNWU1ZDE5NzJiZjhjZDdjNA==", "commit": {"author": {"name": "Nathan Sidwell", "email": "nathan@acm.org", "date": "2018-11-15T15:51:39Z"}, "committer": {"name": "Nathan Sidwell", "email": "nathan@gcc.gnu.org", "date": "2018-11-15T15:51:39Z"}, "message": "[C++ DR 2336] virtual dtors, exception specs & abstract classes\n\nhttps://gcc.gnu.org/ml/gcc-patches/2018-11/msg01389.html\n\tDR 2336\n\t* cp-tree.h (enum special_function_kind): Add sfk_virtual_destructor.\n\t* method.c (type_has_trivial_fn): Add it.\n\t(SFK_DTOR_P): Likewise.\n\t(synthesized_method_base_walk): Don't check access of vbases of\n\tabstract classes when sfk_virtual_destructor.\n\t(synthesized_method_walk): Skip vbases of abstract classes except\n\twhen sfk_virtual_destructor.\n\t(get_defaulted_eh_spec): Set sfk_virtual_destructor as needed.\n\n\t* g++.dg/cpp1y/pr79393-3.C: New.\n\nFrom-SVN: r266188", "tree": {"sha": "b41effb615865b50aa9a94dfbaec511a2249c6ae", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b41effb615865b50aa9a94dfbaec511a2249c6ae"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2bd652d265f8158e9deed8715e5d1972bf8cd7c4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2bd652d265f8158e9deed8715e5d1972bf8cd7c4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2bd652d265f8158e9deed8715e5d1972bf8cd7c4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2bd652d265f8158e9deed8715e5d1972bf8cd7c4/comments", "author": {"login": "urnathan", "id": 13103001, "node_id": "MDQ6VXNlcjEzMTAzMDAx", "avatar_url": "https://avatars.githubusercontent.com/u/13103001?v=4", "gravatar_id": "", "url": "https://api.github.com/users/urnathan", "html_url": "https://github.com/urnathan", "followers_url": "https://api.github.com/users/urnathan/followers", "following_url": "https://api.github.com/users/urnathan/following{/other_user}", "gists_url": "https://api.github.com/users/urnathan/gists{/gist_id}", "starred_url": "https://api.github.com/users/urnathan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/urnathan/subscriptions", "organizations_url": "https://api.github.com/users/urnathan/orgs", "repos_url": "https://api.github.com/users/urnathan/repos", "events_url": "https://api.github.com/users/urnathan/events{/privacy}", "received_events_url": "https://api.github.com/users/urnathan/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "1a50c42806eb3f22047e44669c26721501b9d164", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1a50c42806eb3f22047e44669c26721501b9d164", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1a50c42806eb3f22047e44669c26721501b9d164"}], "stats": {"total": 88, "additions": 75, "deletions": 13}, "files": [{"sha": "d6ee781d730b0b6155cca9e9482cb3bb64960ac7", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2bd652d265f8158e9deed8715e5d1972bf8cd7c4/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2bd652d265f8158e9deed8715e5d1972bf8cd7c4/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=2bd652d265f8158e9deed8715e5d1972bf8cd7c4", "patch": "@@ -1,5 +1,15 @@\n 2018-11-15  Nathan Sidwell  <nathan@acm.org>\n \n+\tDR 2336\n+\t* cp-tree.h (enum special_function_kind): Add sfk_virtual_destructor.\n+\t* method.c (type_has_trivial_fn): Add it.\n+\t(SFK_DTOR_P): Likewise.\n+\t(synthesized_method_base_walk): Don't check access of vbases of\n+\tabstract classes when sfk_virtual_destructor.\n+\t(synthesized_method_walk): Skip vbases of abstract classes except\n+\twhen sfk_virtual_destructor.\n+\t(get_defaulted_eh_spec): Set sfk_virtual_destructor as needed.\n+\n \t* cp-tree.h (enum special_function_kind): Reorder and comment.\n \t* method.c (SFK_CTOR_P, SFK_DTOR_P, SFK_ASSIGN_P, SFK_COPY_P)\n \t(SFK_MOVE_P): New predicates."}, {"sha": "f2e670920b57683fe41aa1394e61c0a1de5e9170", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2bd652d265f8158e9deed8715e5d1972bf8cd7c4/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2bd652d265f8158e9deed8715e5d1972bf8cd7c4/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=2bd652d265f8158e9deed8715e5d1972bf8cd7c4", "patch": "@@ -5099,7 +5099,8 @@ enum special_function_kind {\n \t\t\t      deletes the object after it has been\n \t\t\t      destroyed.  */\n   sfk_conversion,\t   /* A conversion operator.  */\n-  sfk_deduction_guide\t   /* A class template deduction guide.  */\n+  sfk_deduction_guide,\t   /* A class template deduction guide.  */\n+  sfk_virtual_destructor   /* Used by member synthesis fns.  */\n };\n \n /* The various kinds of linkage.  From [basic.link],"}, {"sha": "435ba1d7ed3ca438e77d34a9d4b74f6e529d0360", "filename": "gcc/cp/method.c", "status": "modified", "additions": 14, "deletions": 12, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2bd652d265f8158e9deed8715e5d1972bf8cd7c4/gcc%2Fcp%2Fmethod.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2bd652d265f8158e9deed8715e5d1972bf8cd7c4/gcc%2Fcp%2Fmethod.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fmethod.c?ref=2bd652d265f8158e9deed8715e5d1972bf8cd7c4", "patch": "@@ -402,6 +402,7 @@ type_has_trivial_fn (tree ctype, special_function_kind sfk)\n     case sfk_move_assignment:\n       return !TYPE_HAS_COMPLEX_MOVE_ASSIGN (ctype);\n     case sfk_destructor:\n+    case sfk_virtual_destructor:\n       return !TYPE_HAS_NONTRIVIAL_DESTRUCTOR (ctype);\n     case sfk_inheriting_constructor:\n       return false;\n@@ -1287,7 +1288,7 @@ process_subob_fn (tree fn, tree *spec_p, bool *trivial_p,\n #define SFK_CTOR_P(sfk) \\\n   ((sfk) >= sfk_constructor && (sfk) <= sfk_move_constructor)\n #define SFK_DTOR_P(sfk) \\\n-  ((sfk) == sfk_destructor)\n+  ((sfk) == sfk_destructor || (sfk) == sfk_virtual_destructor)\n #define SFK_ASSIGN_P(sfk) \\\n   ((sfk) == sfk_copy_assignment || (sfk) == sfk_move_assignment)\n #define SFK_COPY_P(sfk) \\\n@@ -1481,12 +1482,11 @@ synthesized_method_base_walk (tree binfo, tree base_binfo,\n       if (flag_new_inheriting_ctors)\n \tdefer = dk_deferred;\n     }\n-  /* To be conservative, ignore access to the base dtor that\n-     DR1658 instructs us to ignore.  See the comment in\n-     synthesized_method_walk.  */\n-  else if (cxx_dialect >= cxx14 && fnname == complete_dtor_identifier\n+  else if (cxx_dialect >= cxx14 && sfk == sfk_virtual_destructor\n \t   && BINFO_VIRTUAL_P (base_binfo)\n \t   && ABSTRACT_CLASS_TYPE_P (BINFO_TYPE (binfo)))\n+    /* Don't check access when looking at vbases of abstract class's\n+       virtual destructor.  */\n     defer = dk_no_check;\n \n   if (defer != dk_no_deferred)\n@@ -1572,7 +1572,7 @@ synthesized_method_walk (tree ctype, special_function_kind sfk, bool const_p,\n   bool check_vdtor = false;\n   tree fnname;\n \n-if (SFK_DTOR_P (sfk))\n+  if (SFK_DTOR_P (sfk))\n     {\n       check_vdtor = true;\n       /* The synthesized method will call base dtors, but check complete\n@@ -1696,12 +1696,11 @@ if (SFK_DTOR_P (sfk))\n   else if (vec_safe_is_empty (vbases))\n     /* No virtual bases to worry about.  */;\n   else if (ABSTRACT_CLASS_TYPE_P (ctype) && cxx_dialect >= cxx14\n-\t   /* DR 1658 specifies that vbases of abstract classes are\n-\t      ignored for both ctors and dtors.  However, that breaks\n-\t      virtual dtor overriding when the ignored base has a\n-\t      throwing destructor.  So, ignore that piece of 1658.  A\n-\t      defect has been filed (no number yet).  */\n-\t   && sfk != sfk_destructor)\n+\t   /* DR 1658 specifis that vbases of abstract classes are\n+\t      ignored for both ctors and dtors.  Except DR 2338\n+\t      overrides that skipping when determing the eh-spec of a\n+\t      virtual destructor.  */\n+\t   && sfk != sfk_virtual_destructor)\n     /* Vbase cdtors are not relevant.  */;\n   else\n     {\n@@ -1748,6 +1747,9 @@ get_defaulted_eh_spec (tree decl, tsubst_flags_t complain)\n   tree spec = empty_except_spec;\n   bool diag = !DECL_DELETED_FN (decl) && (complain & tf_error);\n   tree inh = DECL_INHERITED_CTOR (decl);\n+  if (SFK_DTOR_P (sfk) && DECL_VIRTUAL_P (decl))\n+    /* We have to examine virtual bases even if abstract.  */\n+    sfk = sfk_virtual_destructor;\n   synthesized_method_walk (ctype, sfk, const_p, &spec, NULL, NULL,\n \t\t\t   NULL, diag, &inh, parms);\n   return spec;"}, {"sha": "2842a7b2b89430e72bfc09e20e49343c64f9ba1d", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2bd652d265f8158e9deed8715e5d1972bf8cd7c4/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2bd652d265f8158e9deed8715e5d1972bf8cd7c4/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=2bd652d265f8158e9deed8715e5d1972bf8cd7c4", "patch": "@@ -1,3 +1,8 @@\n+2018-11-15  Nathan Sidwell  <nathan@acm.org>\n+\n+\tDR 2336\n+\t* g++.dg/cpp1y/pr79393-3.C: New.\n+\n 2018-11-15  David Malcolm  <dmalcolm@redhat.com>\n \n \tPR other/19165"}, {"sha": "23dc265090097ba07764028407948bbc0eda033f", "filename": "gcc/testsuite/g++.dg/cpp1y/pr79393-3.C", "status": "added", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2bd652d265f8158e9deed8715e5d1972bf8cd7c4/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fpr79393-3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2bd652d265f8158e9deed8715e5d1972bf8cd7c4/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fpr79393-3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fpr79393-3.C?ref=2bd652d265f8158e9deed8715e5d1972bf8cd7c4", "patch": "@@ -0,0 +1,44 @@\n+// pr c++/79393\n+// { dg-do compile { target c++14 } }\n+\n+struct A \n+{\n+  friend class C;\n+private:\n+  ~A () noexcept (false);\n+};\n+\n+A::~A () noexcept(false) {}\n+\n+struct B : virtual A\n+{\n+  // non-virtual, abstract, ignores A\n+  ~B ();\n+  virtual void abs () = 0;\n+};\n+\n+B::~B () {\n+  throw 1; // { dg-warning \"will always call terminate\" }\n+}\n+\n+struct C : virtual A\n+{\n+  // non-virtual, non-abstract, considers A\n+  ~C ();\n+  virtual void abs ();\n+};\n+\n+C::~C () {\n+  throw 1;\n+}\n+\n+struct D : virtual A\n+{\n+  // virtual, abstract, considers A\n+  virtual ~D ();\n+  virtual void abs () = 0;\n+};\n+\n+D::~D () {\n+  throw 1;\n+}"}]}