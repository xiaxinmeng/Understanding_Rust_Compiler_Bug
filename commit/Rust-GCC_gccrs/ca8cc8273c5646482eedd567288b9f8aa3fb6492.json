{"sha": "ca8cc8273c5646482eedd567288b9f8aa3fb6492", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Y2E4Y2M4MjczYzU2NDY0ODJlZWRkNTY3Mjg4YjlmOGFhM2ZiNjQ5Mg==", "commit": {"author": {"name": "Aldy Hernandez", "email": "aldyh@redhat.com", "date": "2021-05-24T17:57:29Z"}, "committer": {"name": "Aldy Hernandez", "email": "aldyh@redhat.com", "date": "2021-05-24T19:41:54Z"}, "message": "VARYING ranges of different sizes should not be equal.\n\nVARYING ranges are just normal ranges that span the entire domain.  Such\nranges have had end-points for a few releases now, and the fact that the\nlegacy code was still treating all VR_VARYING the same was an oversight.\n\nThis patch fixes the oversight to match the multi-range behavior.\n\ngcc/ChangeLog:\n\n\t* value-range.cc (irange::legacy_equal_p): Check type when\n\tcomparing VR_VARYING types.\n\t(range_tests_legacy): Test comparing VARYING ranges of different\n\tsizes.", "tree": {"sha": "91d15ecf31b58f0b5273cf24e6e55f401b0a6913", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/91d15ecf31b58f0b5273cf24e6e55f401b0a6913"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ca8cc8273c5646482eedd567288b9f8aa3fb6492", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ca8cc8273c5646482eedd567288b9f8aa3fb6492", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ca8cc8273c5646482eedd567288b9f8aa3fb6492", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ca8cc8273c5646482eedd567288b9f8aa3fb6492/comments", "author": {"login": "aldyh", "id": 12937877, "node_id": "MDQ6VXNlcjEyOTM3ODc3", "avatar_url": "https://avatars.githubusercontent.com/u/12937877?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aldyh", "html_url": "https://github.com/aldyh", "followers_url": "https://api.github.com/users/aldyh/followers", "following_url": "https://api.github.com/users/aldyh/following{/other_user}", "gists_url": "https://api.github.com/users/aldyh/gists{/gist_id}", "starred_url": "https://api.github.com/users/aldyh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aldyh/subscriptions", "organizations_url": "https://api.github.com/users/aldyh/orgs", "repos_url": "https://api.github.com/users/aldyh/repos", "events_url": "https://api.github.com/users/aldyh/events{/privacy}", "received_events_url": "https://api.github.com/users/aldyh/received_events", "type": "User", "site_admin": false}, "committer": {"login": "aldyh", "id": 12937877, "node_id": "MDQ6VXNlcjEyOTM3ODc3", "avatar_url": "https://avatars.githubusercontent.com/u/12937877?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aldyh", "html_url": "https://github.com/aldyh", "followers_url": "https://api.github.com/users/aldyh/followers", "following_url": "https://api.github.com/users/aldyh/following{/other_user}", "gists_url": "https://api.github.com/users/aldyh/gists{/gist_id}", "starred_url": "https://api.github.com/users/aldyh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aldyh/subscriptions", "organizations_url": "https://api.github.com/users/aldyh/orgs", "repos_url": "https://api.github.com/users/aldyh/repos", "events_url": "https://api.github.com/users/aldyh/events{/privacy}", "received_events_url": "https://api.github.com/users/aldyh/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "46ed811bcb4b86a81ef3d78ea8cfffc6cd043144", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/46ed811bcb4b86a81ef3d78ea8cfffc6cd043144", "html_url": "https://github.com/Rust-GCC/gccrs/commit/46ed811bcb4b86a81ef3d78ea8cfffc6cd043144"}], "stats": {"total": 13, "additions": 12, "deletions": 1}, "files": [{"sha": "8d7b46c0239df414c778e743ce87715ed56b8926", "filename": "gcc/value-range.cc", "status": "modified", "additions": 12, "deletions": 1, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca8cc8273c5646482eedd567288b9f8aa3fb6492/gcc%2Fvalue-range.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca8cc8273c5646482eedd567288b9f8aa3fb6492/gcc%2Fvalue-range.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvalue-range.cc?ref=ca8cc8273c5646482eedd567288b9f8aa3fb6492", "patch": "@@ -28,6 +28,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"ssa.h\"\n #include \"tree-pretty-print.h\"\n #include \"fold-const.h\"\n+#include \"gimple-range.h\"\n \n // Here we copy between any two irange's.  The ranges can be legacy or\n // multi-ranges, and copying between any combination works correctly.\n@@ -454,8 +455,10 @@ irange::legacy_equal_p (const irange &other) const\n \n   if (m_kind != other.m_kind)\n    return false;\n-  if (m_kind == VR_UNDEFINED || m_kind == VR_VARYING)\n+  if (m_kind == VR_UNDEFINED)\n     return true;\n+  if (m_kind == VR_VARYING)\n+    return range_compatible_p (type (), other.type ());\n   return (vrp_operand_equal_p (tree_lower_bound (0),\n \t\t\t       other.tree_lower_bound (0))\n \t  && vrp_operand_equal_p (tree_upper_bound (0),\n@@ -2245,6 +2248,14 @@ range_tests_legacy ()\n     copy = legacy_range;\n     ASSERT_TRUE (copy.varying_p ());\n   }\n+\n+  // VARYING of different sizes should not be equal.\n+  int_range_max r0 (integer_type_node);\n+  int_range_max r1 (short_integer_type_node);\n+  ASSERT_TRUE (r0 != r1);\n+  value_range vr0 (integer_type_node);\n+  int_range_max vr1 (short_integer_type_node);\n+  ASSERT_TRUE (vr0 != vr1);\n }\n \n // Simulate -fstrict-enums where the domain of a type is less than the"}]}