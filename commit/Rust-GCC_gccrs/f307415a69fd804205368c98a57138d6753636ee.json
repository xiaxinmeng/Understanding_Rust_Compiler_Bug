{"sha": "f307415a69fd804205368c98a57138d6753636ee", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjMwNzQxNWE2OWZkODA0MjA1MzY4Yzk4YTU3MTM4ZDY3NTM2MzZlZQ==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2012-03-15T08:44:33Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2012-03-15T08:44:33Z"}, "message": "[multiple changes]\n\n2012-03-15  Ed Falis  <falis@adacore.com>\n\n\t* s-vxwork-ppc.ads: Update copyright.\n\n2012-03-15  Robert Dewar  <dewar@adacore.com>\n\n\t* sem_ch5.adb: Minor reformatting.\n\n2012-03-15  Ed Schonberg  <schonberg@adacore.com>\n\n\t* exp_ch3.adb (Expand_N_Object_Declaration): When rewriting the\n\tdeclaration of a class-wide object, retain the Ekind to prevent\n\tsubsequent misuse of constants.\n\n2012-03-15  Yannick Moy  <moy@adacore.com>\n\n\t* gnat_rm.texi, gnat_ugn.texi: Minor correction of invariant\n\tterminology.\n\n2012-03-15  Hristian Kirtchev  <kirtchev@adacore.com>\n\n\t* exp_util.adb (Initialized_By_Ctrl_Function): Add code to\n\tprocess the case when a function call appears in object.operation\n\tformat.\n\n2012-03-15  Ed Schonberg  <schonberg@adacore.com>\n\n\t* sem_ch6.ads, sem_ch6.adb (Check_Subtype_Conformant): add\n\tGet_Inst formal, so that conformance within an instantiation\n\tfollows renamings of formals. This is similar to what is already\n\tdone in Check_Mode_conformant.\n\t* sem_ch12.adb (Vailidate_Access_Subprogram_Instance): check that\n\tformal and actual are subtype conformant. Previously only mode\n\tconformance was required.\n\nFrom-SVN: r185410", "tree": {"sha": "63d92e76662d54409616d7cae122c5f1f7765e6b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/63d92e76662d54409616d7cae122c5f1f7765e6b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f307415a69fd804205368c98a57138d6753636ee", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f307415a69fd804205368c98a57138d6753636ee", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f307415a69fd804205368c98a57138d6753636ee", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f307415a69fd804205368c98a57138d6753636ee/comments", "author": null, "committer": null, "parents": [{"sha": "011f9d5d6787f09a00603b69f961a6c08c0593a7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/011f9d5d6787f09a00603b69f961a6c08c0593a7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/011f9d5d6787f09a00603b69f961a6c08c0593a7"}], "stats": {"total": 115, "additions": 88, "deletions": 27}, "files": [{"sha": "7835dc1a8e09747b0e3bb39758b34cfac63bb6ec", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f307415a69fd804205368c98a57138d6753636ee/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f307415a69fd804205368c98a57138d6753636ee/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=f307415a69fd804205368c98a57138d6753636ee", "patch": "@@ -1,3 +1,34 @@\n+2012-03-15  Robert Dewar  <dewar@adacore.com>\n+\n+\t* sem_ch5.adb: Minor reformatting.\n+\n+2012-03-15  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* exp_ch3.adb (Expand_N_Object_Declaration): When rewriting the\n+\tdeclaration of a class-wide object, retain the Ekind to prevent\n+\tsubsequent misuse of constants.\n+\n+2012-03-15  Yannick Moy  <moy@adacore.com>\n+\n+\t* gnat_rm.texi, gnat_ugn.texi: Minor correction of invariant\n+\tterminology.\n+\n+2012-03-15  Hristian Kirtchev  <kirtchev@adacore.com>\n+\n+\t* exp_util.adb (Initialized_By_Ctrl_Function): Add code to\n+\tprocess the case when a function call appears in object.operation\n+\tformat.\n+\n+2012-03-15  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* sem_ch6.ads, sem_ch6.adb (Check_Subtype_Conformant): add\n+\tGet_Inst formal, so that conformance within an instantiation\n+\tfollows renamings of formals. This is similar to what is already\n+\tdone in Check_Mode_conformant.\n+\t* sem_ch12.adb (Vailidate_Access_Subprogram_Instance): check that\n+\tformal and actual are subtype conformant. Previously only mode\n+\tconformance was required.\n+\n 2012-03-15  Robert Dewar  <dewar@adacore.com>\n \n \t* par-ch6.adb, einfo.ads, sem_eval.adb, sem_eval.ads,"}, {"sha": "41fc6f36b8c6721dcb54996817fc0021c29a7094", "filename": "gcc/ada/exp_ch3.adb", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f307415a69fd804205368c98a57138d6753636ee/gcc%2Fada%2Fexp_ch3.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f307415a69fd804205368c98a57138d6753636ee/gcc%2Fada%2Fexp_ch3.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch3.adb?ref=f307415a69fd804205368c98a57138d6753636ee", "patch": "@@ -4829,10 +4829,12 @@ package body Exp_Ch3 is\n                   --  object renaming declaration ---because these identifiers\n                   --  were previously added by Enter_Name to the current scope.\n                   --  We must preserve the homonym chain of the source entity\n-                  --  as well.\n+                  --  as well. We must also preserve the kind of the entity,\n+                  --  which may be a constant.\n \n                   Set_Chars (Defining_Identifier (N), Chars (Def_Id));\n                   Set_Homonym (Defining_Identifier (N), Homonym (Def_Id));\n+                  Set_Ekind (Defining_Identifier (N), Ekind (Def_Id));\n                   Exchange_Entities (Defining_Identifier (N), Def_Id);\n                end;\n             end if;"}, {"sha": "8ccf21634ec9e148fec7346de6c8fbfdb1ff7c06", "filename": "gcc/ada/exp_util.adb", "status": "modified", "additions": 20, "deletions": 3, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f307415a69fd804205368c98a57138d6753636ee/gcc%2Fada%2Fexp_util.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f307415a69fd804205368c98a57138d6753636ee/gcc%2Fada%2Fexp_util.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_util.adb?ref=f307415a69fd804205368c98a57138d6753636ee", "patch": "@@ -3960,11 +3960,28 @@ package body Exp_Util is\n       ----------------------------------\n \n       function Initialized_By_Ctrl_Function (N : Node_Id) return Boolean is\n-         Expr : constant Node_Id := Original_Node (Expression (N));\n+         Expr : Node_Id := Original_Node (Expression (N));\n+\n       begin\n+         if Nkind (Expr) = N_Function_Call then\n+            Expr := Name (Expr);\n+         end if;\n+\n+         --  The function call may appear in object.operation format. Strip\n+         --  all prefixes and retrieve the function name.\n+\n+         loop\n+            if Nkind (Expr) = N_Selected_Component then\n+               Expr := Selector_Name (Expr);\n+            else\n+               exit;\n+            end if;\n+         end loop;\n+\n          return\n-            Nkind (Expr) = N_Function_Call\n-              and then Needs_Finalization (Etype (Expr));\n+           Nkind_In (Expr, N_Expanded_Name, N_Identifier)\n+             and then Ekind (Entity (Expr)) = E_Function\n+             and then Needs_Finalization (Etype (Entity (Expr)));\n       end Initialized_By_Ctrl_Function;\n \n       ----------------------"}, {"sha": "701cc0f35513add319963a176c7568c7d1664f07", "filename": "gcc/ada/gnat_rm.texi", "status": "modified", "additions": 15, "deletions": 10, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f307415a69fd804205368c98a57138d6753636ee/gcc%2Fada%2Fgnat_rm.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f307415a69fd804205368c98a57138d6753636ee/gcc%2Fada%2Fgnat_rm.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgnat_rm.texi?ref=f307415a69fd804205368c98a57138d6753636ee", "patch": "@@ -3212,12 +3212,14 @@ pragma Invariant\n @end smallexample\n \n @noindent\n-This pragma provides exactly the same capabilities as the Invariant aspect\n-defined in AI05-0146-1, and in the Ada 2012 Reference Manual. The Invariant\n-aspect is fully implemented in Ada 2012 mode, but since it requires the use\n-of the aspect syntax, which is not available exception in 2012 mode, it is\n-not possible to use the Invariant aspect in earlier versions of Ada. However\n-the Invariant pragma may be used in any version of Ada.\n+This pragma provides exactly the same capabilities as the Type_Invariant aspect\n+defined in AI05-0146-1, and in the Ada 2012 Reference Manual. The\n+Type_Invariant aspect is fully implemented in Ada 2012 mode, but since it\n+requires the use of the aspect syntax, which is not available except in 2012\n+mode, it is not possible to use the Type_Invariant aspect in earlier versions\n+of Ada. However the Invariant pragma may be used in any version of Ada. Also\n+note that the aspect Invariant is a synonym in GNAT for the aspect\n+Type_Invariant, but there is no pragma Type_Invariant.\n \n The pragma must appear within the visible part of the package specification,\n after the type to which its Entity argument appears. As with the Invariant\n@@ -3233,7 +3235,7 @@ in Ada 2012 mode, but you cannot have both an invariant aspect and an\n invariant pragma for the same entity.\n \n For further details on the use of this pragma, see the Ada 2012 documentation\n-of the Invariant aspect.\n+of the Type_Invariant aspect.\n \n @node Pragma Keep_Names\n @unnumberedsec Pragma Keep_Names\n@@ -17378,7 +17380,7 @@ A complete description of the AIs may be found in\n @item @code{Favor_Top_Level} @tab               -- GNAT\n @item @code{Inline} @tab\n @item @code{Inline_Always} @tab                 -- GNAT\n-@item @code{Invariant} @tab\n+@item @code{Invariant} @tab                     -- GNAT\n @item @code{Machine_Radix} @tab\n @item @code{No_Return} @tab\n @item @code{Object_Size} @tab                   -- GNAT\n@@ -17398,6 +17400,7 @@ A complete description of the AIs may be found in\n @item @code{Suppress} @tab\n @item @code{Suppress_Debug_Info} @tab           -- GNAT\n @item @code{Test_Case} @tab                     -- GNAT\n+@item @code{Type_Invariant} @tab\n @item @code{Unchecked_Union} @tab\n @item @code{Universal_Aliasing} @tab            -- GNAT\n @item @code{Unmodified} @tab                    -- GNAT\n@@ -18418,15 +18421,17 @@ A complete description of the AIs may be found in\n \n @noindent\n   Type invariants may be specified for private types using the aspect notation.\n-  Aspect @code{Invariant} may be specified for any private type,\n-  @code{Invariant'Class} can\n+  Aspect @code{Type_Invariant} may be specified for any private type,\n+  @code{Type_Invariant'Class} can\n   only be specified for tagged types, and is inherited by any descendent of the\n   tagged types. The invariant is a boolean expression that is tested for being\n   true in the following situations: conversions to the private type, object\n   declarations for the private type that are default initialized, and\n   [@b{in}] @b{out}\n   parameters and returned result on return from any primitive operation for\n   the type that is visible to a client.\n+  GNAT defines the synonyms @code{Invariant} for @code{Type_Invariant} and\n+  @code{Invariant'Class} for @code{Type_Invariant'Class}.\n \n @noindent\n   RM References:  13.03.03 (00)"}, {"sha": "08e064966ce032eaf2e32e523b77cb324d6e76ae", "filename": "gcc/ada/gnat_ugn.texi", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f307415a69fd804205368c98a57138d6753636ee/gcc%2Fada%2Fgnat_ugn.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f307415a69fd804205368c98a57138d6753636ee/gcc%2Fada%2Fgnat_ugn.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgnat_ugn.texi?ref=f307415a69fd804205368c98a57138d6753636ee", "patch": "@@ -3090,7 +3090,7 @@ $ gnatlink ada_unit file1.o file2.o --LINK=./my_script\n @end smallexample\n \n If the @code{zero cost} exception mechanism is used, and the platform\n-doesn't support automatic registration of exception tables (e.g.@: HP-UX,\n+doesn't support automatic registration of exception tables (e.g.@: HP-UX\n or AIX), the simple approach described above will not work and\n a pre-linking phase using GNAT will be necessary.\n \n@@ -5442,8 +5442,8 @@ when such pragmas should be used.\n @emph{List inherited aspects.}\n @cindex @option{-gnatw.l} (@command{gcc})\n This switch causes the compiler to list inherited invariants,\n-preconditions, and postconditions from Invariant'Class, Pre'Class, and\n-Post'Class aspects. Also list inherited subtype predicates.\n+preconditions, and postconditions from Type_Invariant'Class, Invariant'Class,\n+Pre'Class, and Post'Class aspects. Also list inherited subtype predicates.\n These messages are not automatically turned on by the use of @option{-gnatwa}.\n \n @item -gnatw.L"}, {"sha": "2c25e2ce38a629dc85594717987545eaddb98d64", "filename": "gcc/ada/s-vxwork-ppc.ads", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f307415a69fd804205368c98a57138d6753636ee/gcc%2Fada%2Fs-vxwork-ppc.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f307415a69fd804205368c98a57138d6753636ee/gcc%2Fada%2Fs-vxwork-ppc.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-vxwork-ppc.ads?ref=f307415a69fd804205368c98a57138d6753636ee", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                   S p e c                                --\n --                                                                          --\n---          Copyright (C) 1998-2011, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1998-2012, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNARL is free software;  you can redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --"}, {"sha": "e873025c524c9e5092feaab0588851c2a2ca3617", "filename": "gcc/ada/sem_ch12.adb", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f307415a69fd804205368c98a57138d6753636ee/gcc%2Fada%2Fsem_ch12.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f307415a69fd804205368c98a57138d6753636ee/gcc%2Fada%2Fsem_ch12.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch12.adb?ref=f307415a69fd804205368c98a57138d6753636ee", "patch": "@@ -10433,7 +10433,11 @@ package body Sem_Ch12 is\n             Abandon_Instantiation (Actual);\n          end if;\n \n-         Check_Mode_Conformant\n+         --  In Ada 2012, actuals for access_to_subprograms must be subtype\n+         --  conformant with the generic formal. Previous to AI05-288 only mode\n+         --  conformance was required.\n+\n+         Check_Subtype_Conformant\n            (Designated_Type (Act_T),\n             Designated_Type (A_Gen_T),\n             Actual,"}, {"sha": "834d2f1b1431d0884f34d0a67295d2a6cde250c7", "filename": "gcc/ada/sem_ch5.adb", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f307415a69fd804205368c98a57138d6753636ee/gcc%2Fada%2Fsem_ch5.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f307415a69fd804205368c98a57138d6753636ee/gcc%2Fada%2Fsem_ch5.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch5.adb?ref=f307415a69fd804205368c98a57138d6753636ee", "patch": "@@ -2087,10 +2087,9 @@ package body Sem_Ch5 is\n \n                Check_Controlled_Array_Attribute (DS);\n \n-               --  The index is not processed during the analysis of a\n-               --  quantified expression but delayed to its expansion where the\n-               --  quantified expression is transformed into an expression with\n-               --  actions.\n+               --  The index is not processed during analysis of a quantified\n+               --  expression but delayed to its expansion where the quantified\n+               --  expression is transformed into an expression with actions.\n \n                if Nkind (Parent (N)) /= N_Quantified_Expression\n                  or else Operating_Mode = Check_Semantics"}, {"sha": "9b37f467350155f1af21076f284ffbf2843c60a8", "filename": "gcc/ada/sem_ch6.adb", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f307415a69fd804205368c98a57138d6753636ee/gcc%2Fada%2Fsem_ch6.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f307415a69fd804205368c98a57138d6753636ee/gcc%2Fada%2Fsem_ch6.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch6.adb?ref=f307415a69fd804205368c98a57138d6753636ee", "patch": "@@ -7251,14 +7251,16 @@ package body Sem_Ch6 is\n      (New_Id                   : Entity_Id;\n       Old_Id                   : Entity_Id;\n       Err_Loc                  : Node_Id := Empty;\n-      Skip_Controlling_Formals : Boolean := False)\n+      Skip_Controlling_Formals : Boolean := False;\n+      Get_Inst                 : Boolean := False)\n    is\n       Result : Boolean;\n       pragma Warnings (Off, Result);\n    begin\n       Check_Conformance\n         (New_Id, Old_Id, Subtype_Conformant, True, Result, Err_Loc,\n-         Skip_Controlling_Formals => Skip_Controlling_Formals);\n+         Skip_Controlling_Formals => Skip_Controlling_Formals,\n+         Get_Inst                 => Get_Inst);\n    end Check_Subtype_Conformant;\n \n    ---------------------------"}, {"sha": "42ea1e495a2b58968d0e7977e3ab873ff7d506e5", "filename": "gcc/ada/sem_ch6.ads", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f307415a69fd804205368c98a57138d6753636ee/gcc%2Fada%2Fsem_ch6.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f307415a69fd804205368c98a57138d6753636ee/gcc%2Fada%2Fsem_ch6.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch6.ads?ref=f307415a69fd804205368c98a57138d6753636ee", "patch": "@@ -28,7 +28,7 @@ package Sem_Ch6 is\n \n    type Conformance_Type is\n      (Type_Conformant, Mode_Conformant, Subtype_Conformant, Fully_Conformant);\n-   pragma Ordered (Conformance_Type);\n+   --  pragma Ordered (Conformance_Type);\n    --  Conformance type used in conformance checks between specs and bodies,\n    --  and for overriding. The literals match the RM definitions of the\n    --  corresponding terms. This is an ordered type, since each conformance\n@@ -141,7 +141,8 @@ package Sem_Ch6 is\n      (New_Id                   : Entity_Id;\n       Old_Id                   : Entity_Id;\n       Err_Loc                  : Node_Id := Empty;\n-      Skip_Controlling_Formals : Boolean := False);\n+      Skip_Controlling_Formals : Boolean := False;\n+      Get_Inst                 : Boolean := False);\n    --  Check that two callable entities (subprograms, entries, literals)\n    --  are subtype conformant, post error message if not (RM 6.3.1(16)),\n    --  the flag being placed on the Err_Loc node if it is specified, and"}]}