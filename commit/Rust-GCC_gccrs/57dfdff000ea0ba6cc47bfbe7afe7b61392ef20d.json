{"sha": "57dfdff000ea0ba6cc47bfbe7afe7b61392ef20d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTdkZmRmZjAwMGVhMGJhNmNjNDdiZmJlN2FmZTdiNjEzOTJlZjIwZA==", "commit": {"author": {"name": "Joseph Myers", "email": "joseph@codesourcery.com", "date": "2011-05-23T19:06:48Z"}, "committer": {"name": "Joseph Myers", "email": "jsm28@gcc.gnu.org", "date": "2011-05-23T19:06:48Z"}, "message": "optc-save-gen.awk: New.\n\n\t* optc-save-gen.awk: New.  Based on optc-gen.awk.  Don't generate\n\tparts of output shared with the driver.\n\t* optc-gen.awk: Don't generate parts of output not shared with the\n\tdriver.\n\t* opth-gen.awk: Remove GCC_DRIVER conditionals.\n\t* doc/options.texi (SourcerInclude): Mention options-save.c.\n\t* Makefile.in (GCC_OBJS): Use options.o instead of gcc-options.o.\n\t(OBJS): Add options-save.o.\n\t(options-save.c, options-save.o): New.\n\t(options.o): Update dependencies.\n\t(gcc-options.o): Remove.\n\t(mostlyclean): Remove options-save.c.\n\nFrom-SVN: r174085", "tree": {"sha": "e664a0b4ebf2a12c2776c60b4d5b100c591bfe36", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e664a0b4ebf2a12c2776c60b4d5b100c591bfe36"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/57dfdff000ea0ba6cc47bfbe7afe7b61392ef20d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/57dfdff000ea0ba6cc47bfbe7afe7b61392ef20d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/57dfdff000ea0ba6cc47bfbe7afe7b61392ef20d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/57dfdff000ea0ba6cc47bfbe7afe7b61392ef20d/comments", "author": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9166988f2635469e9e7a85e0473df7b0eee689ee", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9166988f2635469e9e7a85e0473df7b0eee689ee", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9166988f2635469e9e7a85e0473df7b0eee689ee"}], "stats": {"total": 826, "additions": 446, "deletions": 380}, "files": [{"sha": "2564a7df092d75e3df5fd37d87f2b9364168ef2f", "filename": "gcc/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/57dfdff000ea0ba6cc47bfbe7afe7b61392ef20d/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/57dfdff000ea0ba6cc47bfbe7afe7b61392ef20d/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=57dfdff000ea0ba6cc47bfbe7afe7b61392ef20d", "patch": "@@ -1,3 +1,18 @@\n+2011-05-23  Joseph Myers  <joseph@codesourcery.com>\n+\n+\t* optc-save-gen.awk: New.  Based on optc-gen.awk.  Don't generate\n+\tparts of output shared with the driver.\n+\t* optc-gen.awk: Don't generate parts of output not shared with the\n+\tdriver.\n+\t* opth-gen.awk: Remove GCC_DRIVER conditionals.\n+\t* doc/options.texi (SourcerInclude): Mention options-save.c.\n+\t* Makefile.in (GCC_OBJS): Use options.o instead of gcc-options.o.\n+\t(OBJS): Add options-save.o.\n+\t(options-save.c, options-save.o): New.\n+\t(options.o): Update dependencies.\n+\t(gcc-options.o): Remove.\n+\t(mostlyclean): Remove options-save.c.\n+\n 2011-05-23  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR debug/49032"}, {"sha": "ef5bc6ccc734da0816a427d6297102997c3b1942", "filename": "gcc/Makefile.in", "status": "modified", "additions": 12, "deletions": 7, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/57dfdff000ea0ba6cc47bfbe7afe7b61392ef20d/gcc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/57dfdff000ea0ba6cc47bfbe7afe7b61392ef20d/gcc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FMakefile.in?ref=57dfdff000ea0ba6cc47bfbe7afe7b61392ef20d", "patch": "@@ -1168,7 +1168,7 @@ CXX_TARGET_OBJS=@cxx_target_objs@\n FORTRAN_TARGET_OBJS=@fortran_target_objs@\n \n # Object files for gcc driver.\n-GCC_OBJS = gcc.o opts-common.o gcc-options.o vec.o ggc-none.o\n+GCC_OBJS = gcc.o opts-common.o options.o vec.o ggc-none.o\n \n # Language-specific object files shared by all C-family front ends.\n C_COMMON_OBJS = c-family/c-common.o c-family/c-cppbuiltin.o c-family/c-dump.o \\\n@@ -1341,6 +1341,7 @@ OBJS = \\\n \tomp-low.o \\\n \toptabs.o \\\n \toptions.o \\\n+\toptions-save.o \\\n \topts-common.o \\\n \topts-global.o \\\n \topts.o \\\n@@ -2269,6 +2270,12 @@ options.c: optionlist $(srcdir)/opt-functions.awk $(srcdir)/opt-read.awk \\\n \t       -f $(srcdir)/optc-gen.awk \\\n \t       -v header_name=\"config.h system.h coretypes.h tm.h\" < $< > $@\n \n+options-save.c: optionlist $(srcdir)/opt-functions.awk $(srcdir)/opt-read.awk \\\n+    $(srcdir)/optc-save-gen.awk\n+\t$(AWK) -f $(srcdir)/opt-functions.awk -f $(srcdir)/opt-read.awk \\\n+\t       -f $(srcdir)/optc-save-gen.awk \\\n+\t       -v header_name=\"config.h system.h coretypes.h tm.h\" < $< > $@\n+\n options.h: s-options-h ; @true\n s-options-h: optionlist $(srcdir)/opt-functions.awk $(srcdir)/opt-read.awk \\\n     $(srcdir)/opth-gen.awk\n@@ -2278,13 +2285,11 @@ s-options-h: optionlist $(srcdir)/opt-functions.awk $(srcdir)/opt-read.awk \\\n \t$(SHELL) $(srcdir)/../move-if-change tmp-options.h options.h\n \t$(STAMP) $@\n \n-options.o: options.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TARGET_H) $(FLAGS_H) \\\n+options.o: options.c $(CONFIG_H) $(SYSTEM_H) coretypes.h \\\n \t$(TM_H) $(OPTS_H) intl.h $(OPTIONS_C_EXTRA)\n \n-gcc-options.o: options.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(OPTS_H) intl.h \\\n-\t$(OPTIONS_C_EXTRA)\n-\t$(COMPILER) -c $(ALL_COMPILERFLAGS) $(ALL_CPPFLAGS) $(OUTPUT_OPTION) \\\n-\t\t-DGCC_DRIVER options.c\n+options-save.o: options-save.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TARGET_H) $(FLAGS_H) \\\n+\t$(TM_H) $(OPTS_H) intl.h $(OPTIONS_C_EXTRA)\n \n dumpvers: dumpvers.c\n \n@@ -4443,7 +4448,7 @@ mostlyclean: lang.mostlyclean\n \t-rm -f build/*\n \t-rm -f mddeps.mk\n # Delete other built files.\n-\t-rm -f specs.h options.c options.h\n+\t-rm -f specs.h options.c options.h options-save.c\n # Delete the stamp and temporary files.\n \t-rm -f s-* tmp-* stamp-* stmp-*\n \t-rm -f */stamp-* */tmp-*"}, {"sha": "0a54183d83182045002c21dc2c992a00cc06b583", "filename": "gcc/doc/options.texi", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/57dfdff000ea0ba6cc47bfbe7afe7b61392ef20d/gcc%2Fdoc%2Foptions.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/57dfdff000ea0ba6cc47bfbe7afe7b61392ef20d/gcc%2Fdoc%2Foptions.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Foptions.texi?ref=57dfdff000ea0ba6cc47bfbe7afe7b61392ef20d", "patch": "@@ -71,7 +71,8 @@ name of the include file.\n \n @item\n A variable record to record any additional files that the\n-@file{options.c} file should include.  This is useful to provide\n+@file{options.c} or @file{options-save.c} file should include.  This\n+is useful to provide\n inline functions needed for target variables and/or @code{#ifdef}\n sequences to properly set up the initialization.  These records have\n two fields: the string @samp{SourceInclude} and the name of the"}, {"sha": "519b1e9306c4c290c42b8abb9b33da328138c23f", "filename": "gcc/optc-gen.awk", "status": "modified", "additions": 0, "deletions": 370, "changes": 370, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/57dfdff000ea0ba6cc47bfbe7afe7b61392ef20d/gcc%2Foptc-gen.awk", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/57dfdff000ea0ba6cc47bfbe7afe7b61392ef20d/gcc%2Foptc-gen.awk", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Foptc-gen.awk?ref=57dfdff000ea0ba6cc47bfbe7afe7b61392ef20d", "patch": "@@ -38,11 +38,6 @@ for (i = 1; i <= n_headers; i++)\n print \"#include \" quote \"opts.h\" quote\n print \"#include \" quote \"intl.h\" quote\n print \"\"\n-print \"#ifndef GCC_DRIVER\"\n-print \"#include \" quote \"flags.h\" quote\n-print \"#include \" quote \"target.h\" quote\n-print \"#endif /* GCC_DRIVER */\"\n-print \"\"\n \n if (n_extra_c_includes > 0) {\n \tfor (i = 0; i < n_extra_c_includes; i++) {\n@@ -101,10 +96,6 @@ print \"};\"\n print \"const unsigned int cl_enums_count = \" n_enums \";\"\n print \"\"\n \n-have_save = 0;\n-if (n_extra_target_vars)\n-\thave_save = 1\n-\n print \"const struct gcc_options global_options_init =\\n{\"\n for (i = 0; i < n_extra_vars; i++) {\n \tvar = extra_vars[i]\n@@ -122,9 +113,6 @@ for (i = 0; i < n_extra_vars; i++) {\n \tprint \"  \" init \", /* \" name \" */\"\n }\n for (i = 0; i < n_opts; i++) {\n-\tif (flag_set_p(\"Save\", flags[i]))\n-\t\thave_save = 1;\n-\n \tname = var_name(flags[i]);\n \tif (name == \"\")\n \t\tcontinue;\n@@ -332,362 +320,4 @@ for (i = 0; i < n_opts; i++) {\n \n print \"};\"\n \n-print \"\";\n-print \"#if !defined(GCC_DRIVER) && !defined(IN_LIBGCC2) && !defined(IN_TARGET_LIBS)\"\n-print \"\";\n-print \"/* Save optimization variables into a structure.  */\"\n-print \"void\";\n-print \"cl_optimization_save (struct cl_optimization *ptr, struct gcc_options *opts)\";\n-print \"{\";\n-\n-n_opt_char = 2;\n-n_opt_short = 0;\n-n_opt_int = 0;\n-n_opt_enum = 1;\n-n_opt_other = 0;\n-var_opt_char[0] = \"optimize\";\n-var_opt_char[1] = \"optimize_size\";\n-var_opt_range[\"optimize\"] = \"0, 255\";\n-var_opt_range[\"optimize_size\"] = \"0, 255\";\n-var_opt_enum[0] = \"flag_fp_contract_mode\";\n-\n-# Sort by size to mimic how the structure is laid out to be friendlier to the\n-# cache.\n-\n-for (i = 0; i < n_opts; i++) {\n-\tif (flag_set_p(\"Optimization\", flags[i])) {\n-\t\tname = var_name(flags[i])\n-\t\tif(name == \"\")\n-\t\t\tcontinue;\n-\n-\t\tif(name in var_opt_seen)\n-\t\t\tcontinue;\n-\n-\t\tvar_opt_seen[name]++;\n-\t\totype = var_type_struct(flags[i]);\n-\t\tif (otype ~ \"^((un)?signed +)?int *$\")\n-\t\t\tvar_opt_int[n_opt_int++] = name;\n-\n-\t\telse if (otype ~ \"^((un)?signed +)?short *$\")\n-\t\t\tvar_opt_short[n_opt_short++] = name;\n-\n-\t\telse if (otype ~ (\"^enum +[_\" alnum \"]+ *\"))\n-\t\t\tvar_opt_enum[n_opt_enum++] = name;\n-\n-\t\telse if (otype ~ \"^((un)?signed +)?char *$\") {\n-\t\t\tvar_opt_char[n_opt_char++] = name;\n-\t\t\tif (otype ~ \"^unsigned +char *$\")\n-\t\t\t\tvar_opt_range[name] = \"0, 255\"\n-\t\t\telse if (otype ~ \"^signed +char *$\")\n-\t\t\t\tvar_opt_range[name] = \"-128, 127\"\n-\t\t}\n-\t\telse\n-\t\t\tvar_opt_other[n_opt_other++] = name;\n-\t}\n-}\n-\n-for (i = 0; i < n_opt_char; i++) {\n-\tname = var_opt_char[i];\n-\tif (var_opt_range[name] != \"\")\n-\t\tprint \"  gcc_assert (IN_RANGE (opts->x_\" name \", \" var_opt_range[name] \"));\";\n-}\n-\n-print \"\";\n-for (i = 0; i < n_opt_other; i++) {\n-\tprint \"  ptr->x_\" var_opt_other[i] \" = opts->x_\" var_opt_other[i] \";\";\n-}\n-\n-for (i = 0; i < n_opt_int; i++) {\n-\tprint \"  ptr->x_\" var_opt_int[i] \" = opts->x_\" var_opt_int[i] \";\";\n-}\n-\n-for (i = 0; i < n_opt_enum; i++) {\n-\tprint \"  ptr->x_\" var_opt_enum[i] \" = opts->x_\" var_opt_enum[i] \";\";\n-}\n-\n-for (i = 0; i < n_opt_short; i++) {\n-\tprint \"  ptr->x_\" var_opt_short[i] \" = opts->x_\" var_opt_short[i] \";\";\n-}\n-\n-for (i = 0; i < n_opt_char; i++) {\n-\tprint \"  ptr->x_\" var_opt_char[i] \" = opts->x_\" var_opt_char[i] \";\";\n-}\n-\n-print \"}\";\n-\n-print \"\";\n-print \"/* Restore optimization options from a structure.  */\";\n-print \"void\";\n-print \"cl_optimization_restore (struct gcc_options *opts, struct cl_optimization *ptr)\";\n-print \"{\";\n-\n-for (i = 0; i < n_opt_other; i++) {\n-\tprint \"  opts->x_\" var_opt_other[i] \" = ptr->x_\" var_opt_other[i] \";\";\n-}\n-\n-for (i = 0; i < n_opt_int; i++) {\n-\tprint \"  opts->x_\" var_opt_int[i] \" = ptr->x_\" var_opt_int[i] \";\";\n-}\n-\n-for (i = 0; i < n_opt_enum; i++) {\n-\tprint \"  opts->x_\" var_opt_enum[i] \" = ptr->x_\" var_opt_enum[i] \";\";\n-}\n-\n-for (i = 0; i < n_opt_short; i++) {\n-\tprint \"  opts->x_\" var_opt_short[i] \" = ptr->x_\" var_opt_short[i] \";\";\n-}\n-\n-for (i = 0; i < n_opt_char; i++) {\n-\tprint \"  opts->x_\" var_opt_char[i] \" = ptr->x_\" var_opt_char[i] \";\";\n-}\n-\n-print \"  targetm.override_options_after_change ();\";\n-print \"}\";\n-\n-print \"\";\n-print \"/* Print optimization options from a structure.  */\";\n-print \"void\";\n-print \"cl_optimization_print (FILE *file,\";\n-print \"                       int indent_to,\";\n-print \"                       struct cl_optimization *ptr)\";\n-print \"{\";\n-\n-print \"  fputs (\\\"\\\\n\\\", file);\";\n-for (i = 0; i < n_opt_other; i++) {\n-\tprint \"  if (ptr->x_\" var_opt_other[i] \")\";\n-\tprint \"    fprintf (file, \\\"%*s%s (%#lx)\\\\n\\\",\";\n-\tprint \"             indent_to, \\\"\\\",\";\n-\tprint \"             \\\"\" var_opt_other[i] \"\\\",\";\n-\tprint \"             (unsigned long)ptr->x_\" var_opt_other[i] \");\";\n-\tprint \"\";\n-}\n-\n-for (i = 0; i < n_opt_int; i++) {\n-\tprint \"  if (ptr->x_\" var_opt_int[i] \")\";\n-\tprint \"    fprintf (file, \\\"%*s%s (%#x)\\\\n\\\",\";\n-\tprint \"             indent_to, \\\"\\\",\";\n-\tprint \"             \\\"\" var_opt_int[i] \"\\\",\";\n-\tprint \"             ptr->x_\" var_opt_int[i] \");\";\n-\tprint \"\";\n-}\n-\n-for (i = 0; i < n_opt_enum; i++) {\n-\tprint \"  fprintf (file, \\\"%*s%s (%#x)\\\\n\\\",\";\n-\tprint \"           indent_to, \\\"\\\",\";\n-\tprint \"           \\\"\" var_opt_enum[i] \"\\\",\";\n-\tprint \"           (int) ptr->x_\" var_opt_enum[i] \");\";\n-\tprint \"\";\n-}\n-\n-for (i = 0; i < n_opt_short; i++) {\n-\tprint \"  if (ptr->x_\" var_opt_short[i] \")\";\n-\tprint \"    fprintf (file, \\\"%*s%s (%#x)\\\\n\\\",\";\n-\tprint \"             indent_to, \\\"\\\",\";\n-\tprint \"             \\\"\" var_opt_short[i] \"\\\",\";\n-\tprint \"             ptr->x_\" var_opt_short[i] \");\";\n-\tprint \"\";\n-}\n-\n-for (i = 0; i < n_opt_char; i++) {\n-\tprint \"  if (ptr->x_\" var_opt_char[i] \")\";\n-\tprint \"    fprintf (file, \\\"%*s%s (%#x)\\\\n\\\",\";\n-\tprint \"             indent_to, \\\"\\\",\";\n-\tprint \"             \\\"\" var_opt_char[i] \"\\\",\";\n-\tprint \"             ptr->x_\" var_opt_char[i] \");\";\n-\tprint \"\";\n-}\n-\n-print \"}\";\n-\n-print \"\";\n-print \"/* Save selected option variables into a structure.  */\"\n-print \"void\";\n-print \"cl_target_option_save (struct cl_target_option *ptr, struct gcc_options *opts)\";\n-print \"{\";\n-\n-n_target_char = 0;\n-n_target_short = 0;\n-n_target_int = 0;\n-n_target_enum = 0;\n-n_target_other = 0;\n-\n-if (have_save) {\n-\tfor (i = 0; i < n_opts; i++) {\n-\t\tif (flag_set_p(\"Save\", flags[i])) {\n-\t\t\tname = var_name(flags[i])\n-\t\t\tif(name == \"\")\n-\t\t\t\tname = \"target_flags\";\n-\n-\t\t\tif(name in var_save_seen)\n-\t\t\t\tcontinue;\n-\n-\t\t\tvar_save_seen[name]++;\n-\t\t\totype = var_type_struct(flags[i])\n-\t\t\tif (otype ~ \"^((un)?signed +)?int *$\")\n-\t\t\t\tvar_target_int[n_target_int++] = name;\n-\n-\t\t\telse if (otype ~ \"^((un)?signed +)?short *$\")\n-\t\t\t\tvar_target_short[n_target_short++] = name;\n-\n-\t\t\telse if (otype ~ (\"^enum +[_\" alnum \"]+ *$\"))\n-\t\t\t\tvar_target_enum[n_target_enum++] = name;\n-\n-\t\t\telse if (otype ~ \"^((un)?signed +)?char *$\") {\n-\t\t\t\tvar_target_char[n_target_char++] = name;\n-\t\t\t\tif (otype ~ \"^unsigned +char *$\")\n-\t\t\t\t\tvar_target_range[name] = \"0, 255\"\n-\t\t\t\telse if (otype ~ \"^signed +char *$\")\n-\t\t\t\t\tvar_target_range[name] = \"-128, 127\"\n-\t\t\t\tif (otype == var_type(flags[i]))\n-\t\t\t\t\tvar_target_range[name] = \"\"\n-\t\t\t}\n-\t\t\telse\n-\t\t\t\tvar_target_other[n_target_other++] = name;\n-\t\t}\n-\t}\n-} else {\n-\tvar_target_int[n_target_int++] = \"target_flags\";\n-}\n-\n-have_assert = 0;\n-for (i = 0; i < n_target_char; i++) {\n-\tname = var_target_char[i];\n-\tif (var_target_range[name] != \"\") {\n-\t\thave_assert = 1;\n-\t\tprint \"  gcc_assert (IN_RANGE (opts->x_\" name \", \" var_target_range[name] \"));\";\n-\t}\n-}\n-\n-if (have_assert)\n-\tprint \"\";\n-\n-print \"  if (targetm.target_option.save)\";\n-print \"    targetm.target_option.save (ptr);\";\n-print \"\";\n-\n-for (i = 0; i < n_extra_target_vars; i++) {\n-\tprint \"  ptr->x_\" extra_target_vars[i] \" = opts->x_\" extra_target_vars[i] \";\";\n-}\n-\n-for (i = 0; i < n_target_other; i++) {\n-\tprint \"  ptr->x_\" var_target_other[i] \" = opts->x_\" var_target_other[i] \";\";\n-}\n-\n-for (i = 0; i < n_target_enum; i++) {\n-\tprint \"  ptr->x_\" var_target_enum[i] \" = opts->x_\" var_target_enum[i] \";\";\n-}\n-\n-for (i = 0; i < n_target_int; i++) {\n-\tprint \"  ptr->x_\" var_target_int[i] \" = opts->x_\" var_target_int[i] \";\";\n-}\n-\n-for (i = 0; i < n_target_short; i++) {\n-\tprint \"  ptr->x_\" var_target_short[i] \" = opts->x_\" var_target_short[i] \";\";\n-}\n-\n-for (i = 0; i < n_target_char; i++) {\n-\tprint \"  ptr->x_\" var_target_char[i] \" = opts->x_\" var_target_char[i] \";\";\n-}\n-\n-print \"}\";\n-\n-print \"\";\n-print \"/* Restore selected current options from a structure.  */\";\n-print \"void\";\n-print \"cl_target_option_restore (struct gcc_options *opts, struct cl_target_option *ptr)\";\n-print \"{\";\n-\n-for (i = 0; i < n_extra_target_vars; i++) {\n-\tprint \"  opts->x_\" extra_target_vars[i] \" = ptr->x_\" extra_target_vars[i] \";\";\n-}\n-\n-for (i = 0; i < n_target_other; i++) {\n-\tprint \"  opts->x_\" var_target_other[i] \" = ptr->x_\" var_target_other[i] \";\";\n-}\n-\n-for (i = 0; i < n_target_enum; i++) {\n-\tprint \"  opts->x_\" var_target_enum[i] \" = ptr->x_\" var_target_enum[i] \";\";\n-}\n-\n-for (i = 0; i < n_target_int; i++) {\n-\tprint \"  opts->x_\" var_target_int[i] \" = ptr->x_\" var_target_int[i] \";\";\n-}\n-\n-for (i = 0; i < n_target_short; i++) {\n-\tprint \"  opts->x_\" var_target_short[i] \" = ptr->x_\" var_target_short[i] \";\";\n-}\n-\n-for (i = 0; i < n_target_char; i++) {\n-\tprint \"  opts->x_\" var_target_char[i] \" = ptr->x_\" var_target_char[i] \";\";\n-}\n-\n-# This must occur after the normal variables in case the code depends on those\n-# variables.\n-print \"\";\n-print \"  if (targetm.target_option.restore)\";\n-print \"    targetm.target_option.restore (ptr);\";\n-\n-print \"}\";\n-\n-print \"\";\n-print \"/* Print optimization options from a structure.  */\";\n-print \"void\";\n-print \"cl_target_option_print (FILE *file,\";\n-print \"                        int indent,\";\n-print \"                        struct cl_target_option *ptr)\";\n-print \"{\";\n-\n-print \"  fputs (\\\"\\\\n\\\", file);\";\n-for (i = 0; i < n_target_other; i++) {\n-\tprint \"  if (ptr->x_\" var_target_other[i] \")\";\n-\tprint \"    fprintf (file, \\\"%*s%s (%#lx)\\\\n\\\",\";\n-\tprint \"             indent, \\\"\\\",\";\n-\tprint \"             \\\"\" var_target_other[i] \"\\\",\";\n-\tprint \"             (unsigned long)ptr->x_\" var_target_other[i] \");\";\n-\tprint \"\";\n-}\n-\n-for (i = 0; i < n_target_enum; i++) {\n-\tprint \"  if (ptr->x_\" var_target_enum[i] \")\";\n-\tprint \"    fprintf (file, \\\"%*s%s (%#x)\\\\n\\\",\";\n-\tprint \"             indent, \\\"\\\",\";\n-\tprint \"             \\\"\" var_target_enum[i] \"\\\",\";\n-\tprint \"             ptr->x_\" var_target_enum[i] \");\";\n-\tprint \"\";\n-}\n-\n-for (i = 0; i < n_target_int; i++) {\n-\tprint \"  if (ptr->x_\" var_target_int[i] \")\";\n-\tprint \"    fprintf (file, \\\"%*s%s (%#x)\\\\n\\\",\";\n-\tprint \"             indent, \\\"\\\",\";\n-\tprint \"             \\\"\" var_target_int[i] \"\\\",\";\n-\tprint \"             ptr->x_\" var_target_int[i] \");\";\n-\tprint \"\";\n-}\n-\n-for (i = 0; i < n_target_short; i++) {\n-\tprint \"  if (ptr->x_\" var_target_short[i] \")\";\n-\tprint \"    fprintf (file, \\\"%*s%s (%#x)\\\\n\\\",\";\n-\tprint \"             indent, \\\"\\\",\";\n-\tprint \"             \\\"\" var_target_short[i] \"\\\",\";\n-\tprint \"             ptr->x_\" var_target_short[i] \");\";\n-\tprint \"\";\n-}\n-\n-for (i = 0; i < n_target_char; i++) {\n-\tprint \"  if (ptr->x_\" var_target_char[i] \")\";\n-\tprint \"    fprintf (file, \\\"%*s%s (%#x)\\\\n\\\",\";\n-\tprint \"             indent, \\\"\\\",\";\n-\tprint \"             \\\"\" var_target_char[i] \"\\\",\";\n-\tprint \"             ptr->x_\" var_target_char[i] \");\";\n-\tprint \"\";\n-}\n-\n-print \"\";\n-print \"  if (targetm.target_option.print)\";\n-print \"    targetm.target_option.print (file, indent, ptr);\";\n-\n-print \"}\";\n-print \"#endif\";\n-\n }"}, {"sha": "4efc11598bfe120558408e49501f27a678135ae0", "filename": "gcc/optc-save-gen.awk", "status": "added", "additions": 415, "deletions": 0, "changes": 415, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/57dfdff000ea0ba6cc47bfbe7afe7b61392ef20d/gcc%2Foptc-save-gen.awk", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/57dfdff000ea0ba6cc47bfbe7afe7b61392ef20d/gcc%2Foptc-save-gen.awk", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Foptc-save-gen.awk?ref=57dfdff000ea0ba6cc47bfbe7afe7b61392ef20d", "patch": "@@ -0,0 +1,415 @@\n+#  Copyright (C) 2003, 2004, 2007, 2008, 2009, 2010, 2011\n+#  Free Software Foundation, Inc.\n+#  Contributed by Kelley Cook, June 2004.\n+#  Original code from Neil Booth, May 2003.\n+#\n+# This program is free software; you can redistribute it and/or modify it\n+# under the terms of the GNU General Public License as published by the\n+# Free Software Foundation; either version 3, or (at your option) any\n+# later version.\n+# \n+# This program is distributed in the hope that it will be useful,\n+# but WITHOUT ANY WARRANTY; without even the implied warranty of\n+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+# GNU General Public License for more details.\n+# \n+# You should have received a copy of the GNU General Public License\n+# along with this program; see the file COPYING3.  If not see\n+# <http://www.gnu.org/licenses/>.\n+\n+# This Awk script reads in the option records generated from \n+# opt-gather.awk, combines the flags of duplicate options and generates a\n+# C file.\n+#\n+\n+# This program uses functions from opt-functions.awk and code from\n+# opt-read.awk.\n+#\n+# Usage: awk -f opt-functions.awk -f opt-read.awk -f optc-save-gen.awk \\\n+#            [-v header_name=header.h] < inputfile > options-save.c\n+\n+# Dump that array of options into a C file.\n+END {\n+print \"/* This file is auto-generated by optc-save-gen.awk.  */\"\n+print \"\"\n+n_headers = split(header_name, headers, \" \")\n+for (i = 1; i <= n_headers; i++)\n+\tprint \"#include \" quote headers[i] quote\n+print \"#include \" quote \"opts.h\" quote\n+print \"#include \" quote \"intl.h\" quote\n+print \"\"\n+print \"#include \" quote \"flags.h\" quote\n+print \"#include \" quote \"target.h\" quote\n+print \"\"\n+\n+if (n_extra_c_includes > 0) {\n+\tfor (i = 0; i < n_extra_c_includes; i++) {\n+\t\tprint \"#include \" quote extra_c_includes[i] quote\n+\t}\n+\tprint \"\"\n+}\n+\n+have_save = 0;\n+if (n_extra_target_vars)\n+\thave_save = 1\n+\n+for (i = 0; i < n_opts; i++) {\n+\tif (flag_set_p(\"Save\", flags[i]))\n+\t\thave_save = 1;\n+}\n+\n+print \"/* Save optimization variables into a structure.  */\"\n+print \"void\";\n+print \"cl_optimization_save (struct cl_optimization *ptr, struct gcc_options *opts)\";\n+print \"{\";\n+\n+n_opt_char = 2;\n+n_opt_short = 0;\n+n_opt_int = 0;\n+n_opt_enum = 1;\n+n_opt_other = 0;\n+var_opt_char[0] = \"optimize\";\n+var_opt_char[1] = \"optimize_size\";\n+var_opt_range[\"optimize\"] = \"0, 255\";\n+var_opt_range[\"optimize_size\"] = \"0, 255\";\n+var_opt_enum[0] = \"flag_fp_contract_mode\";\n+\n+# Sort by size to mimic how the structure is laid out to be friendlier to the\n+# cache.\n+\n+for (i = 0; i < n_opts; i++) {\n+\tif (flag_set_p(\"Optimization\", flags[i])) {\n+\t\tname = var_name(flags[i])\n+\t\tif(name == \"\")\n+\t\t\tcontinue;\n+\n+\t\tif(name in var_opt_seen)\n+\t\t\tcontinue;\n+\n+\t\tvar_opt_seen[name]++;\n+\t\totype = var_type_struct(flags[i]);\n+\t\tif (otype ~ \"^((un)?signed +)?int *$\")\n+\t\t\tvar_opt_int[n_opt_int++] = name;\n+\n+\t\telse if (otype ~ \"^((un)?signed +)?short *$\")\n+\t\t\tvar_opt_short[n_opt_short++] = name;\n+\n+\t\telse if (otype ~ (\"^enum +[_\" alnum \"]+ *\"))\n+\t\t\tvar_opt_enum[n_opt_enum++] = name;\n+\n+\t\telse if (otype ~ \"^((un)?signed +)?char *$\") {\n+\t\t\tvar_opt_char[n_opt_char++] = name;\n+\t\t\tif (otype ~ \"^unsigned +char *$\")\n+\t\t\t\tvar_opt_range[name] = \"0, 255\"\n+\t\t\telse if (otype ~ \"^signed +char *$\")\n+\t\t\t\tvar_opt_range[name] = \"-128, 127\"\n+\t\t}\n+\t\telse\n+\t\t\tvar_opt_other[n_opt_other++] = name;\n+\t}\n+}\n+\n+for (i = 0; i < n_opt_char; i++) {\n+\tname = var_opt_char[i];\n+\tif (var_opt_range[name] != \"\")\n+\t\tprint \"  gcc_assert (IN_RANGE (opts->x_\" name \", \" var_opt_range[name] \"));\";\n+}\n+\n+print \"\";\n+for (i = 0; i < n_opt_other; i++) {\n+\tprint \"  ptr->x_\" var_opt_other[i] \" = opts->x_\" var_opt_other[i] \";\";\n+}\n+\n+for (i = 0; i < n_opt_int; i++) {\n+\tprint \"  ptr->x_\" var_opt_int[i] \" = opts->x_\" var_opt_int[i] \";\";\n+}\n+\n+for (i = 0; i < n_opt_enum; i++) {\n+\tprint \"  ptr->x_\" var_opt_enum[i] \" = opts->x_\" var_opt_enum[i] \";\";\n+}\n+\n+for (i = 0; i < n_opt_short; i++) {\n+\tprint \"  ptr->x_\" var_opt_short[i] \" = opts->x_\" var_opt_short[i] \";\";\n+}\n+\n+for (i = 0; i < n_opt_char; i++) {\n+\tprint \"  ptr->x_\" var_opt_char[i] \" = opts->x_\" var_opt_char[i] \";\";\n+}\n+\n+print \"}\";\n+\n+print \"\";\n+print \"/* Restore optimization options from a structure.  */\";\n+print \"void\";\n+print \"cl_optimization_restore (struct gcc_options *opts, struct cl_optimization *ptr)\";\n+print \"{\";\n+\n+for (i = 0; i < n_opt_other; i++) {\n+\tprint \"  opts->x_\" var_opt_other[i] \" = ptr->x_\" var_opt_other[i] \";\";\n+}\n+\n+for (i = 0; i < n_opt_int; i++) {\n+\tprint \"  opts->x_\" var_opt_int[i] \" = ptr->x_\" var_opt_int[i] \";\";\n+}\n+\n+for (i = 0; i < n_opt_enum; i++) {\n+\tprint \"  opts->x_\" var_opt_enum[i] \" = ptr->x_\" var_opt_enum[i] \";\";\n+}\n+\n+for (i = 0; i < n_opt_short; i++) {\n+\tprint \"  opts->x_\" var_opt_short[i] \" = ptr->x_\" var_opt_short[i] \";\";\n+}\n+\n+for (i = 0; i < n_opt_char; i++) {\n+\tprint \"  opts->x_\" var_opt_char[i] \" = ptr->x_\" var_opt_char[i] \";\";\n+}\n+\n+print \"  targetm.override_options_after_change ();\";\n+print \"}\";\n+\n+print \"\";\n+print \"/* Print optimization options from a structure.  */\";\n+print \"void\";\n+print \"cl_optimization_print (FILE *file,\";\n+print \"                       int indent_to,\";\n+print \"                       struct cl_optimization *ptr)\";\n+print \"{\";\n+\n+print \"  fputs (\\\"\\\\n\\\", file);\";\n+for (i = 0; i < n_opt_other; i++) {\n+\tprint \"  if (ptr->x_\" var_opt_other[i] \")\";\n+\tprint \"    fprintf (file, \\\"%*s%s (%#lx)\\\\n\\\",\";\n+\tprint \"             indent_to, \\\"\\\",\";\n+\tprint \"             \\\"\" var_opt_other[i] \"\\\",\";\n+\tprint \"             (unsigned long)ptr->x_\" var_opt_other[i] \");\";\n+\tprint \"\";\n+}\n+\n+for (i = 0; i < n_opt_int; i++) {\n+\tprint \"  if (ptr->x_\" var_opt_int[i] \")\";\n+\tprint \"    fprintf (file, \\\"%*s%s (%#x)\\\\n\\\",\";\n+\tprint \"             indent_to, \\\"\\\",\";\n+\tprint \"             \\\"\" var_opt_int[i] \"\\\",\";\n+\tprint \"             ptr->x_\" var_opt_int[i] \");\";\n+\tprint \"\";\n+}\n+\n+for (i = 0; i < n_opt_enum; i++) {\n+\tprint \"  fprintf (file, \\\"%*s%s (%#x)\\\\n\\\",\";\n+\tprint \"           indent_to, \\\"\\\",\";\n+\tprint \"           \\\"\" var_opt_enum[i] \"\\\",\";\n+\tprint \"           (int) ptr->x_\" var_opt_enum[i] \");\";\n+\tprint \"\";\n+}\n+\n+for (i = 0; i < n_opt_short; i++) {\n+\tprint \"  if (ptr->x_\" var_opt_short[i] \")\";\n+\tprint \"    fprintf (file, \\\"%*s%s (%#x)\\\\n\\\",\";\n+\tprint \"             indent_to, \\\"\\\",\";\n+\tprint \"             \\\"\" var_opt_short[i] \"\\\",\";\n+\tprint \"             ptr->x_\" var_opt_short[i] \");\";\n+\tprint \"\";\n+}\n+\n+for (i = 0; i < n_opt_char; i++) {\n+\tprint \"  if (ptr->x_\" var_opt_char[i] \")\";\n+\tprint \"    fprintf (file, \\\"%*s%s (%#x)\\\\n\\\",\";\n+\tprint \"             indent_to, \\\"\\\",\";\n+\tprint \"             \\\"\" var_opt_char[i] \"\\\",\";\n+\tprint \"             ptr->x_\" var_opt_char[i] \");\";\n+\tprint \"\";\n+}\n+\n+print \"}\";\n+\n+print \"\";\n+print \"/* Save selected option variables into a structure.  */\"\n+print \"void\";\n+print \"cl_target_option_save (struct cl_target_option *ptr, struct gcc_options *opts)\";\n+print \"{\";\n+\n+n_target_char = 0;\n+n_target_short = 0;\n+n_target_int = 0;\n+n_target_enum = 0;\n+n_target_other = 0;\n+\n+if (have_save) {\n+\tfor (i = 0; i < n_opts; i++) {\n+\t\tif (flag_set_p(\"Save\", flags[i])) {\n+\t\t\tname = var_name(flags[i])\n+\t\t\tif(name == \"\")\n+\t\t\t\tname = \"target_flags\";\n+\n+\t\t\tif(name in var_save_seen)\n+\t\t\t\tcontinue;\n+\n+\t\t\tvar_save_seen[name]++;\n+\t\t\totype = var_type_struct(flags[i])\n+\t\t\tif (otype ~ \"^((un)?signed +)?int *$\")\n+\t\t\t\tvar_target_int[n_target_int++] = name;\n+\n+\t\t\telse if (otype ~ \"^((un)?signed +)?short *$\")\n+\t\t\t\tvar_target_short[n_target_short++] = name;\n+\n+\t\t\telse if (otype ~ (\"^enum +[_\" alnum \"]+ *$\"))\n+\t\t\t\tvar_target_enum[n_target_enum++] = name;\n+\n+\t\t\telse if (otype ~ \"^((un)?signed +)?char *$\") {\n+\t\t\t\tvar_target_char[n_target_char++] = name;\n+\t\t\t\tif (otype ~ \"^unsigned +char *$\")\n+\t\t\t\t\tvar_target_range[name] = \"0, 255\"\n+\t\t\t\telse if (otype ~ \"^signed +char *$\")\n+\t\t\t\t\tvar_target_range[name] = \"-128, 127\"\n+\t\t\t\tif (otype == var_type(flags[i]))\n+\t\t\t\t\tvar_target_range[name] = \"\"\n+\t\t\t}\n+\t\t\telse\n+\t\t\t\tvar_target_other[n_target_other++] = name;\n+\t\t}\n+\t}\n+} else {\n+\tvar_target_int[n_target_int++] = \"target_flags\";\n+}\n+\n+have_assert = 0;\n+for (i = 0; i < n_target_char; i++) {\n+\tname = var_target_char[i];\n+\tif (var_target_range[name] != \"\") {\n+\t\thave_assert = 1;\n+\t\tprint \"  gcc_assert (IN_RANGE (opts->x_\" name \", \" var_target_range[name] \"));\";\n+\t}\n+}\n+\n+if (have_assert)\n+\tprint \"\";\n+\n+print \"  if (targetm.target_option.save)\";\n+print \"    targetm.target_option.save (ptr);\";\n+print \"\";\n+\n+for (i = 0; i < n_extra_target_vars; i++) {\n+\tprint \"  ptr->x_\" extra_target_vars[i] \" = opts->x_\" extra_target_vars[i] \";\";\n+}\n+\n+for (i = 0; i < n_target_other; i++) {\n+\tprint \"  ptr->x_\" var_target_other[i] \" = opts->x_\" var_target_other[i] \";\";\n+}\n+\n+for (i = 0; i < n_target_enum; i++) {\n+\tprint \"  ptr->x_\" var_target_enum[i] \" = opts->x_\" var_target_enum[i] \";\";\n+}\n+\n+for (i = 0; i < n_target_int; i++) {\n+\tprint \"  ptr->x_\" var_target_int[i] \" = opts->x_\" var_target_int[i] \";\";\n+}\n+\n+for (i = 0; i < n_target_short; i++) {\n+\tprint \"  ptr->x_\" var_target_short[i] \" = opts->x_\" var_target_short[i] \";\";\n+}\n+\n+for (i = 0; i < n_target_char; i++) {\n+\tprint \"  ptr->x_\" var_target_char[i] \" = opts->x_\" var_target_char[i] \";\";\n+}\n+\n+print \"}\";\n+\n+print \"\";\n+print \"/* Restore selected current options from a structure.  */\";\n+print \"void\";\n+print \"cl_target_option_restore (struct gcc_options *opts, struct cl_target_option *ptr)\";\n+print \"{\";\n+\n+for (i = 0; i < n_extra_target_vars; i++) {\n+\tprint \"  opts->x_\" extra_target_vars[i] \" = ptr->x_\" extra_target_vars[i] \";\";\n+}\n+\n+for (i = 0; i < n_target_other; i++) {\n+\tprint \"  opts->x_\" var_target_other[i] \" = ptr->x_\" var_target_other[i] \";\";\n+}\n+\n+for (i = 0; i < n_target_enum; i++) {\n+\tprint \"  opts->x_\" var_target_enum[i] \" = ptr->x_\" var_target_enum[i] \";\";\n+}\n+\n+for (i = 0; i < n_target_int; i++) {\n+\tprint \"  opts->x_\" var_target_int[i] \" = ptr->x_\" var_target_int[i] \";\";\n+}\n+\n+for (i = 0; i < n_target_short; i++) {\n+\tprint \"  opts->x_\" var_target_short[i] \" = ptr->x_\" var_target_short[i] \";\";\n+}\n+\n+for (i = 0; i < n_target_char; i++) {\n+\tprint \"  opts->x_\" var_target_char[i] \" = ptr->x_\" var_target_char[i] \";\";\n+}\n+\n+# This must occur after the normal variables in case the code depends on those\n+# variables.\n+print \"\";\n+print \"  if (targetm.target_option.restore)\";\n+print \"    targetm.target_option.restore (ptr);\";\n+\n+print \"}\";\n+\n+print \"\";\n+print \"/* Print optimization options from a structure.  */\";\n+print \"void\";\n+print \"cl_target_option_print (FILE *file,\";\n+print \"                        int indent,\";\n+print \"                        struct cl_target_option *ptr)\";\n+print \"{\";\n+\n+print \"  fputs (\\\"\\\\n\\\", file);\";\n+for (i = 0; i < n_target_other; i++) {\n+\tprint \"  if (ptr->x_\" var_target_other[i] \")\";\n+\tprint \"    fprintf (file, \\\"%*s%s (%#lx)\\\\n\\\",\";\n+\tprint \"             indent, \\\"\\\",\";\n+\tprint \"             \\\"\" var_target_other[i] \"\\\",\";\n+\tprint \"             (unsigned long)ptr->x_\" var_target_other[i] \");\";\n+\tprint \"\";\n+}\n+\n+for (i = 0; i < n_target_enum; i++) {\n+\tprint \"  if (ptr->x_\" var_target_enum[i] \")\";\n+\tprint \"    fprintf (file, \\\"%*s%s (%#x)\\\\n\\\",\";\n+\tprint \"             indent, \\\"\\\",\";\n+\tprint \"             \\\"\" var_target_enum[i] \"\\\",\";\n+\tprint \"             ptr->x_\" var_target_enum[i] \");\";\n+\tprint \"\";\n+}\n+\n+for (i = 0; i < n_target_int; i++) {\n+\tprint \"  if (ptr->x_\" var_target_int[i] \")\";\n+\tprint \"    fprintf (file, \\\"%*s%s (%#x)\\\\n\\\",\";\n+\tprint \"             indent, \\\"\\\",\";\n+\tprint \"             \\\"\" var_target_int[i] \"\\\",\";\n+\tprint \"             ptr->x_\" var_target_int[i] \");\";\n+\tprint \"\";\n+}\n+\n+for (i = 0; i < n_target_short; i++) {\n+\tprint \"  if (ptr->x_\" var_target_short[i] \")\";\n+\tprint \"    fprintf (file, \\\"%*s%s (%#x)\\\\n\\\",\";\n+\tprint \"             indent, \\\"\\\",\";\n+\tprint \"             \\\"\" var_target_short[i] \"\\\",\";\n+\tprint \"             ptr->x_\" var_target_short[i] \");\";\n+\tprint \"\";\n+}\n+\n+for (i = 0; i < n_target_char; i++) {\n+\tprint \"  if (ptr->x_\" var_target_char[i] \")\";\n+\tprint \"    fprintf (file, \\\"%*s%s (%#x)\\\\n\\\",\";\n+\tprint \"             indent, \\\"\\\",\";\n+\tprint \"             \\\"\" var_target_char[i] \"\\\",\";\n+\tprint \"             ptr->x_\" var_target_char[i] \");\";\n+\tprint \"\";\n+}\n+\n+print \"\";\n+print \"  if (targetm.target_option.print)\";\n+print \"    targetm.target_option.print (file, indent, ptr);\";\n+\n+print \"}\";\n+\n+}"}, {"sha": "876e0f6336e65da84f6a3d11ed2534f8cf0adaf2", "filename": "gcc/opth-gen.awk", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/57dfdff000ea0ba6cc47bfbe7afe7b61392ef20d/gcc%2Fopth-gen.awk", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/57dfdff000ea0ba6cc47bfbe7afe7b61392ef20d/gcc%2Fopth-gen.awk", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fopth-gen.awk?ref=57dfdff000ea0ba6cc47bfbe7afe7b61392ef20d", "patch": "@@ -46,7 +46,7 @@ if (n_extra_h_includes > 0) {\n \n print \"#if !defined(IN_LIBGCC2) && !defined(IN_TARGET_LIBS) && !defined(IN_RTS)\"\n print \"#ifndef GENERATOR_FILE\"\n-print \"#if !defined(GCC_DRIVER) && !defined(IN_LIBGCC2) && !defined(IN_TARGET_LIBS)\"\n+print \"#if !defined(IN_LIBGCC2) && !defined(IN_TARGET_LIBS)\"\n print \"struct GTY(()) gcc_options\"\n print \"#else\"\n print \"struct gcc_options\"\n@@ -127,7 +127,7 @@ print \"\"\n # Also, order the structure so that pointer fields occur first, then int\n # fields, and then char fields to provide the best packing.\n \n-print \"#if !defined(GCC_DRIVER) && !defined(IN_LIBGCC2) && !defined(IN_TARGET_LIBS)\"\n+print \"#if !defined(IN_LIBGCC2) && !defined(IN_TARGET_LIBS)\"\n print \"\"\n print \"/* Structure to save/restore optimization and target specific options.  */\";\n print \"struct GTY(()) cl_optimization\";"}]}