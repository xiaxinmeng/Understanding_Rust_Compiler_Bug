{"sha": "a18e0fe1e4f3788fbc6ca10d8c7671885ed9baea", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTE4ZTBmZTFlNGYzNzg4ZmJjNmNhMTBkOGM3NjcxODg1ZWQ5YmFlYQ==", "commit": {"author": {"name": "Dominique d'Humieres", "email": "dominiq@lps.ens.fr", "date": "2016-03-13T09:48:20Z"}, "committer": {"name": "Dominique d'Humieres", "email": "dominiq@gcc.gnu.org", "date": "2016-03-13T09:48:20Z"}, "message": "re PR fortran/45076 ([OOP] gfortran.dg/dynamic_dispatch_6.f03 ICEs with -fprofile-use)\n\n2016-03-13  Dominique d'Humieres  <dominiq@lps.ens.fr>\n\n\tPR fortran/45076\n\tgfortran.dg/prof/prof.exp: New script.\n\tgfortran.dg/prof/dynamic_dispatch_6.f03: New test.\n\nFrom-SVN: r234168", "tree": {"sha": "4b350462e578e4410d29be5f7829fe2f52aee3ad", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4b350462e578e4410d29be5f7829fe2f52aee3ad"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a18e0fe1e4f3788fbc6ca10d8c7671885ed9baea", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a18e0fe1e4f3788fbc6ca10d8c7671885ed9baea", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a18e0fe1e4f3788fbc6ca10d8c7671885ed9baea", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a18e0fe1e4f3788fbc6ca10d8c7671885ed9baea/comments", "author": {"login": "DominiquedHumieres", "id": 18394944, "node_id": "MDQ6VXNlcjE4Mzk0OTQ0", "avatar_url": "https://avatars.githubusercontent.com/u/18394944?v=4", "gravatar_id": "", "url": "https://api.github.com/users/DominiquedHumieres", "html_url": "https://github.com/DominiquedHumieres", "followers_url": "https://api.github.com/users/DominiquedHumieres/followers", "following_url": "https://api.github.com/users/DominiquedHumieres/following{/other_user}", "gists_url": "https://api.github.com/users/DominiquedHumieres/gists{/gist_id}", "starred_url": "https://api.github.com/users/DominiquedHumieres/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/DominiquedHumieres/subscriptions", "organizations_url": "https://api.github.com/users/DominiquedHumieres/orgs", "repos_url": "https://api.github.com/users/DominiquedHumieres/repos", "events_url": "https://api.github.com/users/DominiquedHumieres/events{/privacy}", "received_events_url": "https://api.github.com/users/DominiquedHumieres/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "a4c54bf2a79469093e8742ec3e22ae09f14da4b5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a4c54bf2a79469093e8742ec3e22ae09f14da4b5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a4c54bf2a79469093e8742ec3e22ae09f14da4b5"}], "stats": {"total": 130, "additions": 130, "deletions": 0}, "files": [{"sha": "d52e69be80cdbedaf85be2ba3c35293ae4de9e87", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a18e0fe1e4f3788fbc6ca10d8c7671885ed9baea/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a18e0fe1e4f3788fbc6ca10d8c7671885ed9baea/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=a18e0fe1e4f3788fbc6ca10d8c7671885ed9baea", "patch": "@@ -1,3 +1,9 @@\n+2016-03-13  Dominique d'Humieres  <dominiq@lps.ens.fr>\n+\n+\tPR fortran/45076\n+\tgfortran.dg/prof/prof.exp: New script.\n+\tgfortran.dg/prof/dynamic_dispatch_6.f03: New test.\n+\n 2016-03-12  Andrey Belevantsev  <abel@ispras.ru>\n \n \tPR rtl-optimization/69307"}, {"sha": "82e4e6f9b8ed17d621de1b7aa5d8a2483acae587", "filename": "gcc/testsuite/gfortran.dg/prof/dynamic_dispatch_6.f03", "status": "added", "additions": 68, "deletions": 0, "changes": 68, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a18e0fe1e4f3788fbc6ca10d8c7671885ed9baea/gcc%2Ftestsuite%2Fgfortran.dg%2Fprof%2Fdynamic_dispatch_6.f03", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a18e0fe1e4f3788fbc6ca10d8c7671885ed9baea/gcc%2Ftestsuite%2Fgfortran.dg%2Fprof%2Fdynamic_dispatch_6.f03", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fprof%2Fdynamic_dispatch_6.f03?ref=a18e0fe1e4f3788fbc6ca10d8c7671885ed9baea", "patch": "@@ -0,0 +1,68 @@\n+! { dg-require-profiling \"-fprofile-generate\" }\n+! { dg-options \"-Ofast\" }\n+!\n+! PR 45076: [OOP] gfortran.dg/dynamic_dispatch_6.f03 ICEs with -fprofile-use\n+!\n+! Contributed by Damian Rouson <damian@rouson.net>\n+\n+module field_module\n+  implicit none\n+  private\n+  public :: field\n+  type ,abstract :: field \n+  end type\n+end module\n+\n+module periodic_5th_order_module\n+  use field_module ,only : field\n+  implicit none\n+  type ,extends(field) :: periodic_5th_order\n+  end type\n+end module\n+\n+module field_factory_module\n+  implicit none\n+  private\n+  public :: field_factory\n+  type, abstract :: field_factory \n+  contains \n+    procedure(create_interface), deferred :: create \n+  end type \n+  abstract interface \n+    function create_interface(this) \n+      use field_module ,only : field\n+      import :: field_factory\n+      class(field_factory), intent(in) :: this \n+      class(field) ,pointer :: create_interface\n+    end function\n+  end interface \n+end module\n+\n+module periodic_5th_factory_module\n+  use field_factory_module , only : field_factory\n+  implicit none\n+  private\n+  public :: periodic_5th_factory\n+  type, extends(field_factory) :: periodic_5th_factory \n+  contains \n+    procedure :: create=>new_periodic_5th_order\n+  end type \n+contains\n+  function new_periodic_5th_order(this) \n+    use field_module ,only : field\n+    use periodic_5th_order_module ,only : periodic_5th_order\n+    class(periodic_5th_factory), intent(in) :: this\n+    class(field) ,pointer :: new_periodic_5th_order\n+  end function\n+end module\n+\n+program main \n+  use field_module ,only : field \n+  use field_factory_module ,only : field_factory\n+  use periodic_5th_factory_module ,only : periodic_5th_factory\n+  implicit none \n+  class(field) ,pointer :: u\n+  class(field_factory), allocatable :: field_creator \n+  allocate (periodic_5th_factory ::  field_creator) \n+  u => field_creator%create() \n+end program"}, {"sha": "0bad01d2dbb8cbd8b55b7fc810be4530fad877c5", "filename": "gcc/testsuite/gfortran.dg/prof/prof.exp", "status": "added", "additions": 56, "deletions": 0, "changes": 56, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a18e0fe1e4f3788fbc6ca10d8c7671885ed9baea/gcc%2Ftestsuite%2Fgfortran.dg%2Fprof%2Fprof.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a18e0fe1e4f3788fbc6ca10d8c7671885ed9baea/gcc%2Ftestsuite%2Fgfortran.dg%2Fprof%2Fprof.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fprof%2Fprof.exp?ref=a18e0fe1e4f3788fbc6ca10d8c7671885ed9baea", "patch": "@@ -0,0 +1,56 @@\n+# Copyright (C) 2001-2016 Free Software Foundation, Inc.\n+\n+# This program is free software; you can redistribute it and/or modify\n+# it under the terms of the GNU General Public License as published by\n+# the Free Software Foundation; either version 3 of the License, or\n+# (at your option) any later version.\n+# \n+# This program is distributed in the hope that it will be useful,\n+# but WITHOUT ANY WARRANTY; without even the implied warranty of\n+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+# GNU General Public License for more details.\n+# \n+# You should have received a copy of the GNU General Public License\n+# along with GCC; see the file COPYING3.  If not see\n+# <http://www.gnu.org/licenses/>.\n+\n+# Test the functionality of programs compiled with profile-directed block\n+# ordering using -fprofile-generate followed by -fprofile-use.\n+\n+load_lib target-supports.exp\n+\n+# Some targets don't support tree profiling.\n+if { ![check_profiling_available \"-fprofile-generate\"] } {\n+    return\n+}\n+\n+# The procedures in profopt.exp need these parameters.\n+set tool gfortran\n+set prof_ext \"gcda\"\n+\n+if $tracelevel then {\n+    strace $tracelevel\n+}\n+\n+# Load support procs.\n+load_lib profopt.exp\n+\n+# Save and override the default list defined in profopt.exp.\n+set treeprof_save_profopt_options $PROFOPT_OPTIONS\n+set PROFOPT_OPTIONS [list {}]\n+\n+# These are globals used by profopt-execute.  The first is options\n+# needed to generate profile data, the second is options to use the\n+# profile data.\n+set profile_option \"-fprofile-generate -D_PROFILE_GENERATE\"\n+set feedback_option \"-fprofile-use -D_PROFILE_USE\"\n+\n+foreach src [lsort [glob -nocomplain $srcdir/$subdir/*.f*]] {\n+    # If we're only testing specific files and this isn't one of them, skip it.\n+    if ![runtest_file_p $runtests $src] then {\n+        continue\n+    }\n+    profopt-execute $src\n+}\n+\n+set PROFOPT_OPTIONS $treeprof_save_profopt_options"}]}