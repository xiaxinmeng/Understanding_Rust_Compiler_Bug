{"sha": "e0dc26ffad1bf2844875ed011a0aceefdcd47988", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTBkYzI2ZmZhZDFiZjI4NDQ4NzVlZDAxMWEwYWNlZWZkY2Q0Nzk4OA==", "commit": {"author": {"name": "Jan Hubicka", "email": "hubicka@freesoft.cz", "date": "1999-10-02T17:54:05Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "1999-10-02T17:54:05Z"}, "message": "Jan Hubicka  <hubicka@freesoft.cz>\n\n        * i386.md (ffs expander): Emit Pentium friendly code for\n        TARGET_PENTIUM.\n\nFrom-SVN: r29769", "tree": {"sha": "1beb140f94551a08da7b3f146168fdec78290d34", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1beb140f94551a08da7b3f146168fdec78290d34"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e0dc26ffad1bf2844875ed011a0aceefdcd47988", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e0dc26ffad1bf2844875ed011a0aceefdcd47988", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e0dc26ffad1bf2844875ed011a0aceefdcd47988", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e0dc26ffad1bf2844875ed011a0aceefdcd47988/comments", "author": null, "committer": null, "parents": [{"sha": "fc78679f9ea238ac416e76b145a5afaabd16f77c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fc78679f9ea238ac416e76b145a5afaabd16f77c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fc78679f9ea238ac416e76b145a5afaabd16f77c"}], "stats": {"total": 61, "additions": 58, "deletions": 3}, "files": [{"sha": "985c4c95e52673359103353287212dedde6bd4ca", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e0dc26ffad1bf2844875ed011a0aceefdcd47988/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e0dc26ffad1bf2844875ed011a0aceefdcd47988/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=e0dc26ffad1bf2844875ed011a0aceefdcd47988", "patch": "@@ -1,3 +1,8 @@\n+Sat Oct  2 10:53:22 1999  Jan Hubicka  <hubicka@freesoft.cz>\n+\n+\t* i386.md (ffs expander): Emit Pentium friendly code for\n+\tTARGET_PENTIUM.\n+\n Sat Oct  2 02:48:21 1999  Mark P. Mitchell  <mark@codesourcery.com>\n \n \t* tree.c (build): Don't look at TREE_SIDE_EFFECTS or TREE_RAISES "}, {"sha": "a8281cc374534613b8e9136089dca8e2e8d5b002", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 53, "deletions": 3, "changes": 56, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e0dc26ffad1bf2844875ed011a0aceefdcd47988/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e0dc26ffad1bf2844875ed011a0aceefdcd47988/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=e0dc26ffad1bf2844875ed011a0aceefdcd47988", "patch": "@@ -6779,6 +6779,57 @@\n \t\t\t\tconst0_rtx),\n \t\t    tmp,\n \t\t    out)));\n+      emit_insn (gen_addsi3 (out, out, const1_rtx));\n+      emit_move_insn (operands[0], out);\n+    }\n+\n+  /* Pentium bsf instruction is extremly slow.  Following code is recommended by\n+     the Intel Optimizing Manual as resonable replacement:\n+           TEST    EAX,EAX\n+\t   JZ      SHORT BS2\n+\t   XOR     ECX,ECX\n+\t   MOV     DWORD PTR [TEMP+4],ECX\n+\t   SUB     ECX,EAX\n+\t   AND     EAX,ECX\n+\t   MOV     DWORD PTR [TEMP],EAX\n+\t   FILD    QWORD PTR [TEMP]\n+\t   FSTP    QWORD PTR [TEMP]\n+\t   WAIT    ; WAIT only needed for compatibility with\n+\t           ; earlier processors\n+\t   MOV     ECX, DWORD PTR [TEMP+4]\n+\t   SHR     ECX,20\n+\t   SUB     ECX,3FFH\n+\t   TEST    EAX,EAX       ; clear zero flag\n+       BS2:\n+     Following piece of code expand ffs to similar beast.\n+       */\n+\n+  else if (TARGET_PENTIUM && !optimize_size && TARGET_80387)\n+    {\n+      rtx label = gen_label_rtx ();\n+      rtx lo, hi;\n+      rtx mem = assign_386_stack_local (DImode, 0);\n+      rtx fptmp = gen_reg_rtx (DFmode);\n+      split_di (&mem, 1, &lo, &hi);\n+\n+      emit_move_insn (out, const0_rtx);\n+\n+      emit_cmp_and_jump_insns (in, const0_rtx, EQ, 0, SImode, 1, 0, label);\n+\n+      emit_move_insn (hi, out);\n+      emit_insn (gen_subsi3 (out, out, in));\n+      emit_insn (gen_andsi3 (out, out, in));\n+      emit_move_insn (lo, out);\n+      emit_insn (gen_floatdidf2 (fptmp,mem));\n+      emit_move_insn (gen_rtx_MEM (DFmode, XEXP (mem, 0)), fptmp);\n+      emit_move_insn (out, hi);\n+      emit_insn (gen_lshrsi3 (out, out, GEN_INT (20)));\n+      emit_insn (gen_subsi3 (out, out, GEN_INT (0x3fe)));\n+\n+      emit_label (label);\n+      LABEL_NUSES (label) = 1;\n+\n+      emit_move_insn (operands[0], out);\n     }\n   else\n     {\n@@ -6790,10 +6841,9 @@\n \t\t\t      const0_rtx)));\n       emit_insn (gen_negsi2 (tmp, tmp));\n       emit_insn (gen_iorsi3 (out, out, tmp));\n+      emit_insn (gen_addsi3 (out, out, const1_rtx));\n+      emit_move_insn (operands[0], out);\n     }\n-  emit_insn (gen_addsi3 (out, out, const1_rtx));\n-\n-  emit_move_insn (operands[0], out);\n   DONE;  \n }\")\n "}]}