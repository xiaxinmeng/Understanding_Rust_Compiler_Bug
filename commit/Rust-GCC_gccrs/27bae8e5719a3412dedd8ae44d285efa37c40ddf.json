{"sha": "27bae8e5719a3412dedd8ae44d285efa37c40ddf", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjdiYWU4ZTU3MTlhMzQxMmRlZGQ4YWU0NGQyODVlZmEzN2M0MGRkZg==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1996-10-30T21:16:41Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1996-10-30T21:16:41Z"}, "message": "(range_binop): Strip NOPs from result and verify it's an INTEGER_CST.\n\n(make_range, case BIT_NOT_EXPR): Fix typo in constant for PLUS_EXPR.\n\nFrom-SVN: r13079", "tree": {"sha": "4c50ea48cafd0be5ad4beca669ac885dbd6fe1db", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4c50ea48cafd0be5ad4beca669ac885dbd6fe1db"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/27bae8e5719a3412dedd8ae44d285efa37c40ddf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/27bae8e5719a3412dedd8ae44d285efa37c40ddf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/27bae8e5719a3412dedd8ae44d285efa37c40ddf", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/27bae8e5719a3412dedd8ae44d285efa37c40ddf/comments", "author": null, "committer": null, "parents": [{"sha": "505d6e2b92aedbbe10a95fbbbe4e07b0d9d47fb0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/505d6e2b92aedbbe10a95fbbbe4e07b0d9d47fb0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/505d6e2b92aedbbe10a95fbbbe4e07b0d9d47fb0"}], "stats": {"total": 21, "additions": 12, "deletions": 9}, "files": [{"sha": "9e75466b007fe828c04d892945c577cc55c64b93", "filename": "gcc/fold-const.c", "status": "modified", "additions": 12, "deletions": 9, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/27bae8e5719a3412dedd8ae44d285efa37c40ddf/gcc%2Ffold-const.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/27bae8e5719a3412dedd8ae44d285efa37c40ddf/gcc%2Ffold-const.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffold-const.c?ref=27bae8e5719a3412dedd8ae44d285efa37c40ddf", "patch": "@@ -2647,6 +2647,7 @@ range_binop (code, type, arg0, upper0_p, arg1, upper1_p)\n      tree arg0, arg1;\n      int upper0_p, upper1_p;\n {\n+  tree tem;\n   int result;\n   int sgn0, sgn1;\n \n@@ -2656,8 +2657,12 @@ range_binop (code, type, arg0, upper0_p, arg1, upper1_p)\n      are handled for consistency.  */\n \n   if (arg0 != 0 && arg1 != 0)\n-    return fold (build (code, type != 0 ? type : TREE_TYPE (arg0),\n-\t\t\targ0, convert (TREE_TYPE (arg0), arg1)));\n+    {\n+      tem = fold (build (code, type != 0 ? type : TREE_TYPE (arg0),\n+\t\t\t arg0, convert (TREE_TYPE (arg0), arg1)));\n+      STRIP_NOPS (tem);\n+      return TREE_CODE (tem) == INTEGER_CST ? tem : 0;\n+    }\n \n   if (TREE_CODE_CLASS (code) != '<')\n     return 0;\n@@ -2790,7 +2795,7 @@ make_range (exp, pin_p, plow, phigh)\n \tcase BIT_NOT_EXPR:\n \t  /* ~ X -> -X - 1  */\n \t  exp = build (MINUS_EXPR, type, build1 (NEGATE_EXPR, type, arg0),\n-\t\t       convert (type, integer_zero_node));\n+\t\t       convert (type, integer_one_node));\n \t  continue;\n \n \tcase PLUS_EXPR:  case MINUS_EXPR:\n@@ -2809,15 +2814,13 @@ make_range (exp, pin_p, plow, phigh)\n \t      || (n_high != 0 && TREE_OVERFLOW (n_high)))\n \t    break;\n \n-\t  /* Check for an unsigned range which has wrapped around the maximum\n-\t     value thus making n_high < n_low, and normalize it.  */\n+\t  /* Check for a range which has wrapped around the maximum value\n+\t     thus making n_high < n_low.  Normalize any such range it.  */\n \t  if (n_low && n_high && tree_int_cst_lt (n_high, n_low))\n-\t    {\n-\t      low = n_high, high = n_low;\n-\t      in_p = ! in_p;\n-\t    }\n+\t    low = n_high, high = n_low, in_p = ! in_p;\n \t  else\n \t    low = n_low, high = n_high;\n+\n \t  exp = arg0;\n \t  continue;\n "}]}