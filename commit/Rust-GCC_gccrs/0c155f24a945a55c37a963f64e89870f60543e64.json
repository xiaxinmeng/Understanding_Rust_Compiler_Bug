{"sha": "0c155f24a945a55c37a963f64e89870f60543e64", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGMxNTVmMjRhOTQ1YTU1YzM3YTk2M2Y2NGU4OTg3MGY2MDU0M2U2NA==", "commit": {"author": {"name": "Tom de Vries", "email": "tdevries@suse.de", "date": "2018-11-27T08:25:52Z"}, "committer": {"name": "Tom de Vries", "email": "vries@gcc.gnu.org", "date": "2018-11-27T08:25:52Z"}, "message": "[libbacktrace] Avoid realloc with size == 0 in backtrace_vector_release\n\nAs of C17, realloc with size 0 is marked as an obsolescent feature.\n\nFix this in backtrace_vector_release by using free instead.\n\nBootstrapped and reg-tested on x86_64.\n\n2018-11-27  Tom de Vries  <tdevries@suse.de>\n\n\t* alloc.c (backtrace_vector_release): Handle vec->size == 0 using free\n\tinstead of realloc.\n\t* Makefile.am (check_PROGRAMS): Add unittest.\n\t* Makefile.in: Regenerate.\n\t* unittest.c: New file.\n\nFrom-SVN: r266504", "tree": {"sha": "5936c40993d7b836b78772d3d1b6d97cd1055148", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5936c40993d7b836b78772d3d1b6d97cd1055148"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0c155f24a945a55c37a963f64e89870f60543e64", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0c155f24a945a55c37a963f64e89870f60543e64", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0c155f24a945a55c37a963f64e89870f60543e64", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0c155f24a945a55c37a963f64e89870f60543e64/comments", "author": {"login": "vries", "id": 4057235, "node_id": "MDQ6VXNlcjQwNTcyMzU=", "avatar_url": "https://avatars.githubusercontent.com/u/4057235?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vries", "html_url": "https://github.com/vries", "followers_url": "https://api.github.com/users/vries/followers", "following_url": "https://api.github.com/users/vries/following{/other_user}", "gists_url": "https://api.github.com/users/vries/gists{/gist_id}", "starred_url": "https://api.github.com/users/vries/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vries/subscriptions", "organizations_url": "https://api.github.com/users/vries/orgs", "repos_url": "https://api.github.com/users/vries/repos", "events_url": "https://api.github.com/users/vries/events{/privacy}", "received_events_url": "https://api.github.com/users/vries/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "1ea7ea181d8d3139df4ea66dc2ee98b27fa66b6f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1ea7ea181d8d3139df4ea66dc2ee98b27fa66b6f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1ea7ea181d8d3139df4ea66dc2ee98b27fa66b6f"}], "stats": {"total": 142, "additions": 137, "deletions": 5}, "files": [{"sha": "255e2c8921e6066a104f33b51bb7d2ce34093d47", "filename": "libbacktrace/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0c155f24a945a55c37a963f64e89870f60543e64/libbacktrace%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0c155f24a945a55c37a963f64e89870f60543e64/libbacktrace%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libbacktrace%2FChangeLog?ref=0c155f24a945a55c37a963f64e89870f60543e64", "patch": "@@ -1,3 +1,11 @@\n+2018-11-27  Tom de Vries  <tdevries@suse.de>\n+\n+\t* alloc.c (backtrace_vector_release): Handle vec->size == 0 using free\n+\tinstead of realloc.\n+\t* Makefile.am (check_PROGRAMS): Add unittest.\n+\t* Makefile.in: Regenerate.\n+\t* unittest.c: New file.\n+\n 2018-11-22  Tom de Vries  <tdevries@suse.de>\n \n \t* dwarf.c (read_initial_length): Factor out of ..."}, {"sha": "13e94f27aef5ef1a764ffd76867ddbc6ccba3c9b", "filename": "libbacktrace/Makefile.am", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0c155f24a945a55c37a963f64e89870f60543e64/libbacktrace%2FMakefile.am", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0c155f24a945a55c37a963f64e89870f60543e64/libbacktrace%2FMakefile.am", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libbacktrace%2FMakefile.am?ref=0c155f24a945a55c37a963f64e89870f60543e64", "patch": "@@ -89,6 +89,10 @@ check_PROGRAMS =\n TESTS = $(check_PROGRAMS)\n \n if NATIVE\n+unittest_SOURCES = unittest.c testlib.c\n+unittest_LDADD = libbacktrace.la\n+\n+check_PROGRAMS += unittest\n \n btest_SOURCES = btest.c testlib.c\n btest_CFLAGS = $(AM_CFLAGS) -g -O"}, {"sha": "2d62ce20b9aa759469f5d1d602329c95b0d9315d", "filename": "libbacktrace/Makefile.in", "status": "modified", "additions": 21, "deletions": 4, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0c155f24a945a55c37a963f64e89870f60543e64/libbacktrace%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0c155f24a945a55c37a963f64e89870f60543e64/libbacktrace%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libbacktrace%2FMakefile.in?ref=0c155f24a945a55c37a963f64e89870f60543e64", "patch": "@@ -121,7 +121,7 @@ build_triplet = @build@\n host_triplet = @host@\n target_triplet = @target@\n check_PROGRAMS = $(am__EXEEXT_1) $(am__EXEEXT_2) $(am__EXEEXT_3)\n-@NATIVE_TRUE@am__append_1 = btest stest ztest edtest\n+@NATIVE_TRUE@am__append_1 = unittest btest stest ztest edtest\n @HAVE_ZLIB_TRUE@@NATIVE_TRUE@am__append_2 = -lz\n @HAVE_PTHREAD_TRUE@@NATIVE_TRUE@am__append_3 = ttest\n @HAVE_OBJCOPY_DEBUGLINK_TRUE@@NATIVE_TRUE@am__append_4 = dtest\n@@ -158,8 +158,8 @@ AM_V_lt = $(am__v_lt_@AM_V@)\n am__v_lt_ = $(am__v_lt_@AM_DEFAULT_V@)\n am__v_lt_0 = --silent\n am__v_lt_1 = \n-@NATIVE_TRUE@am__EXEEXT_1 = btest$(EXEEXT) stest$(EXEEXT) \\\n-@NATIVE_TRUE@\tztest$(EXEEXT) edtest$(EXEEXT)\n+@NATIVE_TRUE@am__EXEEXT_1 = unittest$(EXEEXT) btest$(EXEEXT) \\\n+@NATIVE_TRUE@\tstest$(EXEEXT) ztest$(EXEEXT) edtest$(EXEEXT)\n @HAVE_PTHREAD_TRUE@@NATIVE_TRUE@am__EXEEXT_2 = ttest$(EXEEXT)\n @HAVE_COMPRESSED_DEBUG_TRUE@@NATIVE_TRUE@am__EXEEXT_3 =  \\\n @HAVE_COMPRESSED_DEBUG_TRUE@@NATIVE_TRUE@\tctestg$(EXEEXT) \\\n@@ -202,6 +202,10 @@ ttest_OBJECTS = $(am_ttest_OBJECTS)\n ttest_LINK = $(LIBTOOL) $(AM_V_lt) --tag=CC $(AM_LIBTOOLFLAGS) \\\n \t$(LIBTOOLFLAGS) --mode=link $(CCLD) $(ttest_CFLAGS) $(CFLAGS) \\\n \t$(AM_LDFLAGS) $(LDFLAGS) -o $@\n+@NATIVE_TRUE@am_unittest_OBJECTS = unittest.$(OBJEXT) \\\n+@NATIVE_TRUE@\ttestlib.$(OBJEXT)\n+unittest_OBJECTS = $(am_unittest_OBJECTS)\n+@NATIVE_TRUE@unittest_DEPENDENCIES = libbacktrace.la\n @NATIVE_TRUE@am_ztest_OBJECTS = ztest-ztest.$(OBJEXT) \\\n @NATIVE_TRUE@\tztest-testlib.$(OBJEXT)\n ztest_OBJECTS = $(am_ztest_OBJECTS)\n@@ -246,7 +250,7 @@ am__v_CCLD_1 =\n SOURCES = $(libbacktrace_la_SOURCES) $(EXTRA_libbacktrace_la_SOURCES) \\\n \t$(btest_SOURCES) $(ctesta_SOURCES) $(ctestg_SOURCES) \\\n \t$(edtest_SOURCES) $(stest_SOURCES) $(ttest_SOURCES) \\\n-\t$(ztest_SOURCES)\n+\t$(unittest_SOURCES) $(ztest_SOURCES)\n am__can_run_installinfo = \\\n   case $$AM_UPDATE_INFO_DIR in \\\n     n|no|NO) false;; \\\n@@ -655,6 +659,8 @@ libbacktrace_la_LIBADD = \\\n \n libbacktrace_la_DEPENDENCIES = $(libbacktrace_la_LIBADD)\n TESTS = $(check_PROGRAMS) $(am__append_4)\n+@NATIVE_TRUE@unittest_SOURCES = unittest.c testlib.c\n+@NATIVE_TRUE@unittest_LDADD = libbacktrace.la\n @NATIVE_TRUE@btest_SOURCES = btest.c testlib.c\n @NATIVE_TRUE@btest_CFLAGS = $(AM_CFLAGS) -g -O\n @NATIVE_TRUE@btest_LDADD = libbacktrace.la\n@@ -800,6 +806,10 @@ ttest$(EXEEXT): $(ttest_OBJECTS) $(ttest_DEPENDENCIES) $(EXTRA_ttest_DEPENDENCIE\n \t@rm -f ttest$(EXEEXT)\n \t$(AM_V_CCLD)$(ttest_LINK) $(ttest_OBJECTS) $(ttest_LDADD) $(LIBS)\n \n+unittest$(EXEEXT): $(unittest_OBJECTS) $(unittest_DEPENDENCIES) $(EXTRA_unittest_DEPENDENCIES) \n+\t@rm -f unittest$(EXEEXT)\n+\t$(AM_V_CCLD)$(LINK) $(unittest_OBJECTS) $(unittest_LDADD) $(LIBS)\n+\n ztest$(EXEEXT): $(ztest_OBJECTS) $(ztest_DEPENDENCIES) $(EXTRA_ztest_DEPENDENCIES) \n \t@rm -f ztest$(EXEEXT)\n \t$(AM_V_CCLD)$(ztest_LINK) $(ztest_OBJECTS) $(ztest_LDADD) $(LIBS)\n@@ -1088,6 +1098,13 @@ recheck: all $(check_PROGRAMS)\n \t        am__force_recheck=am--force-recheck \\\n \t        TEST_LOGS=\"$$log_list\"; \\\n \texit $$?\n+unittest.log: unittest$(EXEEXT)\n+\t@p='unittest$(EXEEXT)'; \\\n+\tb='unittest'; \\\n+\t$(am__check_pre) $(LOG_DRIVER) --test-name \"$$f\" \\\n+\t--log-file $$b.log --trs-file $$b.trs \\\n+\t$(am__common_driver_flags) $(AM_LOG_DRIVER_FLAGS) $(LOG_DRIVER_FLAGS) -- $(LOG_COMPILE) \\\n+\t\"$$tst\" $(AM_TESTS_FD_REDIRECT)\n btest.log: btest$(EXEEXT)\n \t@p='btest$(EXEEXT)'; \\\n \tb='btest'; \\"}, {"sha": "522b59dd59ff6e2f2c09d4be344ead2ba6b1bade", "filename": "libbacktrace/alloc.c", "status": "modified", "additions": 12, "deletions": 1, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0c155f24a945a55c37a963f64e89870f60543e64/libbacktrace%2Falloc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0c155f24a945a55c37a963f64e89870f60543e64/libbacktrace%2Falloc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libbacktrace%2Falloc.c?ref=0c155f24a945a55c37a963f64e89870f60543e64", "patch": "@@ -145,12 +145,23 @@ backtrace_vector_release (struct backtrace_state *state ATTRIBUTE_UNUSED,\n \t\t\t  backtrace_error_callback error_callback,\n \t\t\t  void *data)\n {\n+  vec->alc = 0;\n+\n+  if (vec->size == 0)\n+    {\n+      /* As of C17, realloc with size 0 is marked as an obsolescent feature, use\n+\t free instead.  */\n+      free (vec->base);\n+      vec->base = NULL;\n+      return 1;\n+    }\n+\n   vec->base = realloc (vec->base, vec->size);\n   if (vec->base == NULL)\n     {\n       error_callback (data, \"realloc\", errno);\n       return 0;\n     }\n-  vec->alc = 0;\n+\n   return 1;\n }"}, {"sha": "576aa0809350cff16d68ebc661419b08529b8690", "filename": "libbacktrace/unittest.c", "status": "added", "additions": 92, "deletions": 0, "changes": 92, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0c155f24a945a55c37a963f64e89870f60543e64/libbacktrace%2Funittest.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0c155f24a945a55c37a963f64e89870f60543e64/libbacktrace%2Funittest.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libbacktrace%2Funittest.c?ref=0c155f24a945a55c37a963f64e89870f60543e64", "patch": "@@ -0,0 +1,92 @@\n+/* unittest.c -- Test for libbacktrace library\n+   Copyright (C) 2018 Free Software Foundation, Inc.\n+\n+Redistribution and use in source and binary forms, with or without\n+modification, are permitted provided that the following conditions are\n+met:\n+\n+    (1) Redistributions of source code must retain the above copyright\n+    notice, this list of conditions and the following disclaimer.\n+\n+    (2) Redistributions in binary form must reproduce the above copyright\n+    notice, this list of conditions and the following disclaimer in\n+    the documentation and/or other materials provided with the\n+    distribution.\n+\n+    (3) The name of the author may not be used to\n+    endorse or promote products derived from this software without\n+    specific prior written permission.\n+\n+THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR\n+IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n+WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+DISCLAIMED. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT,\n+INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n+(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR\n+SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)\n+HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,\n+STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING\n+IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n+POSSIBILITY OF SUCH DAMAGE.  */\n+\n+#include <assert.h>\n+#include <stdio.h>\n+#include <stdlib.h>\n+#include <string.h>\n+#include <unistd.h>\n+\n+#include \"filenames.h\"\n+\n+#include \"backtrace.h\"\n+#include \"backtrace-supported.h\"\n+\n+#include \"testlib.h\"\n+\n+#include \"internal.h\"\n+\n+static unsigned count;\n+\n+static void\n+error_callback (void *vdata ATTRIBUTE_UNUSED, const char *msg ATTRIBUTE_UNUSED,\n+\t\tint errnum ATTRIBUTE_UNUSED)\n+{\n+  ++count;\n+}\n+\n+static int\n+test1 (void)\n+{\n+  int res;\n+  int failed;\n+\n+  struct backtrace_vector vec;\n+\n+  memset (&vec, 0, sizeof vec);\n+\n+  backtrace_vector_grow (state, 100, error_callback, NULL, &vec);\n+  vec.alc += vec.size;\n+  vec.size = 0;\n+\n+  count = 0;\n+  res = backtrace_vector_release (state, &vec, error_callback, NULL);\n+  failed = res != 1 || count != 0;\n+\n+  printf (\"%s: unittest backtrace_vector_release size == 0\\n\",\n+\t  failed ? \"FAIL\": \"PASS\");\n+\n+  if (failed)\n+    ++failures;\n+\n+  return failures;\n+}\n+\n+int\n+main (int argc ATTRIBUTE_UNUSED, char **argv)\n+{\n+  state = backtrace_create_state (argv[0], BACKTRACE_SUPPORTS_THREADS,\n+\t\t\t\t  error_callback_create, NULL);\n+\n+  test1 ();\n+\n+  exit (failures ? EXIT_FAILURE : EXIT_SUCCESS);\n+}"}]}