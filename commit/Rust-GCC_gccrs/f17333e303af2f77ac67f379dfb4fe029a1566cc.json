{"sha": "f17333e303af2f77ac67f379dfb4fe029a1566cc", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjE3MzMzZTMwM2FmMmY3N2FjNjdmMzc5ZGZiNGZlMDI5YTE1NjZjYw==", "commit": {"author": {"name": "Ian Lance Taylor", "email": "iant@google.com", "date": "2011-05-24T20:34:47Z"}, "committer": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2011-05-24T20:34:47Z"}, "message": "godump.c (struct godump_container): Add invalid_hash field.\n\n\t* godump.c (struct godump_container): Add invalid_hash field.\n\t(go_format_type): Return false if type is found in invalid_hash.\n\t(go_output_typedef): Add invalid type to invalid_hash.\n\t(go_finish): Create and delete invalid_hash.\n\nFrom-SVN: r174140", "tree": {"sha": "3afdb068a4bc751da825345eff2d675ba21a65e8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3afdb068a4bc751da825345eff2d675ba21a65e8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f17333e303af2f77ac67f379dfb4fe029a1566cc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f17333e303af2f77ac67f379dfb4fe029a1566cc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f17333e303af2f77ac67f379dfb4fe029a1566cc", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f17333e303af2f77ac67f379dfb4fe029a1566cc/comments", "author": null, "committer": null, "parents": [{"sha": "235fe6b4497f0d110914461420ab3c91240988d8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/235fe6b4497f0d110914461420ab3c91240988d8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/235fe6b4497f0d110914461420ab3c91240988d8"}], "stats": {"total": 53, "additions": 37, "deletions": 16}, "files": [{"sha": "7264b1515af826ad244642c63c67366866b3c403", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f17333e303af2f77ac67f379dfb4fe029a1566cc/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f17333e303af2f77ac67f379dfb4fe029a1566cc/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=f17333e303af2f77ac67f379dfb4fe029a1566cc", "patch": "@@ -1,5 +1,12 @@\n+2011-05-24  Ian Lance Taylor  <iant@google.com>\n+\n+\t* godump.c (struct godump_container): Add invalid_hash field.\n+\t(go_format_type): Return false if type is found in invalid_hash.\n+\t(go_output_typedef): Add invalid type to invalid_hash.\n+\t(go_finish): Create and delete invalid_hash.\n+\n 2011-05-24  Bill Schmidt  <wschmidt@linux.vnet.ibm.com>\n-\t\n+\n \tPR tree-optimization/46728\n \t* tree-ssa-math-opts.c (powi_table): New.\n \t(powi_lookup_cost): New.\n@@ -9,7 +16,7 @@\n \t(gimple_expand_builtin_powi): New.\n \t(execute_cse_sincos): Add switch case for BUILT_IN_POWI.\n \t(gate_cse_sincos): Remove sincos/cexp restriction.\n-\t\n+\n 2011-05-24  Rainer Orth  <ro@CeBiTec.Uni-Bielefeld.DE>\n \n \tPR target/3746"}, {"sha": "4009899eceae2887a019927cf9b280bb9a96b330", "filename": "gcc/godump.c", "status": "modified", "additions": 28, "deletions": 14, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f17333e303af2f77ac67f379dfb4fe029a1566cc/gcc%2Fgodump.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f17333e303af2f77ac67f379dfb4fe029a1566cc/gcc%2Fgodump.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgodump.c?ref=f17333e303af2f77ac67f379dfb4fe029a1566cc", "patch": "@@ -464,6 +464,9 @@ struct godump_container\n   /* Global type definitions.  */\n   htab_t type_hash;\n \n+  /* Invalid types.  */\n+  htab_t invalid_hash;\n+\n   /* Obstack used to write out a type definition.  */\n   struct obstack type_obstack;\n };\n@@ -500,20 +503,20 @@ go_format_type (struct godump_container *container, tree type,\n \t  || TREE_CODE (type) == FUNCTION_TYPE))\n     {\n       tree name;\n+      void **slot;\n \n       name = TYPE_NAME (type);\n-      if (TREE_CODE (name) == IDENTIFIER_NODE)\n-\t{\n-\t  obstack_1grow (ob, '_');\n-\t  go_append_string (ob, name);\n-\t  return ret;\n-\t}\n-      else if (TREE_CODE (name) == TYPE_DECL)\n-\t{\n-\t  obstack_1grow (ob, '_');\n-\t  go_append_string (ob, DECL_NAME (name));\n-\t  return ret;\n-\t}\n+      if (TREE_CODE (name) == TYPE_DECL)\n+\tname = DECL_NAME (name);\n+\n+      slot = htab_find_slot (container->invalid_hash, IDENTIFIER_POINTER (name),\n+\t\t\t     NO_INSERT);\n+      if (slot != NULL)\n+\tret = false;\n+\n+      obstack_1grow (ob, '_');\n+      go_append_string (ob, name);\n+      return ret;\n     }\n \n   pointer_set_insert (container->decls_seen, type);\n@@ -879,7 +882,11 @@ go_output_typedef (struct godump_container *container, tree decl)\n       *slot = CONST_CAST (void *, (const void *) type);\n \n       if (!go_format_type (container, TREE_TYPE (decl), false, false))\n-\tfprintf (go_dump_file, \"// \");\n+\t{\n+\t  fprintf (go_dump_file, \"// \");\n+\t  slot = htab_find_slot (container->invalid_hash, type, INSERT);\n+\t  *slot = CONST_CAST (void *, (const void *) type);\n+\t}\n       fprintf (go_dump_file, \"type _%s \",\n \t       IDENTIFIER_POINTER (DECL_NAME (decl)));\n       go_output_type (container);\n@@ -898,7 +905,11 @@ go_output_typedef (struct godump_container *container, tree decl)\n        *slot = CONST_CAST (void *, (const void *) type);\n \n        if (!go_format_type (container, TREE_TYPE (decl), false, false))\n-\t fprintf (go_dump_file, \"// \");\n+\t {\n+\t   fprintf (go_dump_file, \"// \");\n+\t   slot = htab_find_slot (container->invalid_hash, type, INSERT);\n+\t   *slot = CONST_CAST (void *, (const void *) type);\n+\t }\n        fprintf (go_dump_file, \"type _%s \",\n \t       IDENTIFIER_POINTER (TYPE_NAME (TREE_TYPE (decl))));\n        go_output_type (container);\n@@ -1010,6 +1021,8 @@ go_finish (const char *filename)\n   container.pot_dummy_types = pointer_set_create ();\n   container.type_hash = htab_create (100, htab_hash_string,\n                                      string_hash_eq, NULL);\n+  container.invalid_hash = htab_create (10, htab_hash_string,\n+\t\t\t\t\tstring_hash_eq, NULL);\n   container.keyword_hash = htab_create (50, htab_hash_string,\n                                         string_hash_eq, NULL);\n   obstack_init (&container.type_obstack);\n@@ -1044,6 +1057,7 @@ go_finish (const char *filename)\n   pointer_set_destroy (container.decls_seen);\n   pointer_set_destroy (container.pot_dummy_types);\n   htab_delete (container.type_hash);\n+  htab_delete (container.invalid_hash);\n   htab_delete (container.keyword_hash);\n   obstack_free (&container.type_obstack, NULL);\n "}]}