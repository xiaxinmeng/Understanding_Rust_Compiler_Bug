{"sha": "4354291994e6f6cb6eba1acef3192fa5c18b1274", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDM1NDI5MTk5NGU2ZjZjYjZlYmExYWNlZjMxOTJmYTVjMThiMTI3NA==", "commit": {"author": {"name": "Justin Squirek", "email": "squirek@adacore.com", "date": "2019-12-11T03:49:43Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "derodat@adacore.com", "date": "2020-05-25T14:00:54Z"}, "message": "[Ada] Spurious accessibility error on return aggregate in GNATprove mode\n\n2020-05-25  Justin Squirek  <squirek@adacore.com>\n\ngcc/ada/\n\n\t* sem_ch6.adb (Check_Return_Obj_Accessibility): Use original\n\tnode to avoid looking at expansion done in GNATprove mode.", "tree": {"sha": "50898cdff6edd6dbc8f0cfb2ab2c057532598d5e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/50898cdff6edd6dbc8f0cfb2ab2c057532598d5e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4354291994e6f6cb6eba1acef3192fa5c18b1274", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4354291994e6f6cb6eba1acef3192fa5c18b1274", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4354291994e6f6cb6eba1acef3192fa5c18b1274", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4354291994e6f6cb6eba1acef3192fa5c18b1274/comments", "author": {"login": "AdaDoom3", "id": 3445599, "node_id": "MDQ6VXNlcjM0NDU1OTk=", "avatar_url": "https://avatars.githubusercontent.com/u/3445599?v=4", "gravatar_id": "", "url": "https://api.github.com/users/AdaDoom3", "html_url": "https://github.com/AdaDoom3", "followers_url": "https://api.github.com/users/AdaDoom3/followers", "following_url": "https://api.github.com/users/AdaDoom3/following{/other_user}", "gists_url": "https://api.github.com/users/AdaDoom3/gists{/gist_id}", "starred_url": "https://api.github.com/users/AdaDoom3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/AdaDoom3/subscriptions", "organizations_url": "https://api.github.com/users/AdaDoom3/orgs", "repos_url": "https://api.github.com/users/AdaDoom3/repos", "events_url": "https://api.github.com/users/AdaDoom3/events{/privacy}", "received_events_url": "https://api.github.com/users/AdaDoom3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pmderodat", "id": 758452, "node_id": "MDQ6VXNlcjc1ODQ1Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/758452?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pmderodat", "html_url": "https://github.com/pmderodat", "followers_url": "https://api.github.com/users/pmderodat/followers", "following_url": "https://api.github.com/users/pmderodat/following{/other_user}", "gists_url": "https://api.github.com/users/pmderodat/gists{/gist_id}", "starred_url": "https://api.github.com/users/pmderodat/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pmderodat/subscriptions", "organizations_url": "https://api.github.com/users/pmderodat/orgs", "repos_url": "https://api.github.com/users/pmderodat/repos", "events_url": "https://api.github.com/users/pmderodat/events{/privacy}", "received_events_url": "https://api.github.com/users/pmderodat/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a746f952abb78af9db28a7f3bce442e113877c9c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a746f952abb78af9db28a7f3bce442e113877c9c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a746f952abb78af9db28a7f3bce442e113877c9c"}], "stats": {"total": 29, "additions": 17, "deletions": 12}, "files": [{"sha": "08c26768ccc78a0f798e2821d5d677e8759ecadd", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4354291994e6f6cb6eba1acef3192fa5c18b1274/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4354291994e6f6cb6eba1acef3192fa5c18b1274/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=4354291994e6f6cb6eba1acef3192fa5c18b1274", "patch": "@@ -1,3 +1,8 @@\n+2020-05-25  Justin Squirek  <squirek@adacore.com>\n+\n+\t* sem_ch6.adb (Check_Return_Obj_Accessibility): Use original\n+\tnode to avoid looking at expansion done in GNATprove mode.\n+\n 2020-05-25  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* gcc-interface/decl.c (gnat_to_gnu_entity): Add new local variable"}, {"sha": "d79b7a26c0b277473dcfa6cd0a79f87a7bbf2b53", "filename": "gcc/ada/sem_ch6.adb", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4354291994e6f6cb6eba1acef3192fa5c18b1274/gcc%2Fada%2Fsem_ch6.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4354291994e6f6cb6eba1acef3192fa5c18b1274/gcc%2Fada%2Fsem_ch6.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch6.adb?ref=4354291994e6f6cb6eba1acef3192fa5c18b1274", "patch": "@@ -798,44 +798,44 @@ package body Sem_Ch6 is\n                                       N_Discriminant_Association)\n                then\n                   Expr := Expression (Assoc);\n+               else\n+                  Expr := Empty;\n                end if;\n \n                --  This anonymous access discriminant has an associated\n                --  expression which needs checking.\n \n-               if Nkind (Expr) = N_Attribute_Reference\n+               if Present (Expr)\n+                 and then Nkind (Expr) = N_Attribute_Reference\n                  and then Attribute_Name (Expr) /= Name_Unrestricted_Access\n                then\n                   --  Obtain the object to perform static checks on by moving\n                   --  up the prefixes in the expression taking into account\n                   --  named access types.\n \n-                  Obj := Prefix (Expr);\n+                  Obj := Original_Node (Prefix (Expr));\n                   while Nkind_In (Obj, N_Indexed_Component,\n                                        N_Selected_Component)\n                   loop\n+                     Obj := Original_Node (Prefix (Obj));\n+\n                      --  When we encounter a named access type then we can\n                      --  ignore accessibility checks on the dereference.\n \n-                     if Ekind (Etype (Prefix (Obj)))\n+                     if Ekind (Etype (Obj))\n                           in E_Access_Type ..\n                              E_Access_Protected_Subprogram_Type\n                      then\n-                        if Nkind (Obj) = N_Selected_Component then\n-                           Obj := Selector_Name (Obj);\n+                        if Nkind (Parent (Obj)) = N_Selected_Component then\n+                           Obj := Selector_Name (Parent (Obj));\n                         end if;\n                         exit;\n                      end if;\n \n                      --  Skip over the explicit dereference\n \n-                     if Nkind (Prefix (Obj)) = N_Explicit_Dereference then\n-                        Obj := Prefix (Prefix (Obj));\n-\n-                     --  Otherwise move up to the next prefix\n-\n-                     else\n-                        Obj := Prefix (Obj);\n+                     if Nkind (Obj) = N_Explicit_Dereference then\n+                        Obj := Original_Node (Prefix (Obj));\n                      end if;\n                   end loop;\n "}]}