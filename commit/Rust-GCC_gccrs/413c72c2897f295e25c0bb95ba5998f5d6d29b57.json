{"sha": "413c72c2897f295e25c0bb95ba5998f5d6d29b57", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDEzYzcyYzI4OTdmMjk1ZTI1YzBiYjk1YmE1OTk4ZjVkNmQyOWI1Nw==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1994-03-09T20:31:06Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1994-03-09T20:31:06Z"}, "message": "(rtx_equal_for_thread_p): Commutative operations are identical if the\noperands match in the opposite order.\n\nFrom-SVN: r6731", "tree": {"sha": "57b0e1ea02c17cba308181858b4e2549be6374e9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/57b0e1ea02c17cba308181858b4e2549be6374e9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/413c72c2897f295e25c0bb95ba5998f5d6d29b57", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/413c72c2897f295e25c0bb95ba5998f5d6d29b57", "html_url": "https://github.com/Rust-GCC/gccrs/commit/413c72c2897f295e25c0bb95ba5998f5d6d29b57", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/413c72c2897f295e25c0bb95ba5998f5d6d29b57/comments", "author": null, "committer": null, "parents": [{"sha": "1a7c818bd6043c4e86bbfc4c0befb3783dfd203d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1a7c818bd6043c4e86bbfc4c0befb3783dfd203d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1a7c818bd6043c4e86bbfc4c0befb3783dfd203d"}], "stats": {"total": 13, "additions": 13, "deletions": 0}, "files": [{"sha": "1129b6d1277922fb517ac4bcc87794d66f72c53e", "filename": "gcc/jump.c", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/413c72c2897f295e25c0bb95ba5998f5d6d29b57/gcc%2Fjump.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/413c72c2897f295e25c0bb95ba5998f5d6d29b57/gcc%2Fjump.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjump.c?ref=413c72c2897f295e25c0bb95ba5998f5d6d29b57", "patch": "@@ -4207,6 +4207,19 @@ rtx_equal_for_thread_p (x, y, yinsn)\n   if (GET_MODE (x) != GET_MODE (y))\n     return 0;\n \n+  /* For commutative operations, the RTX match if the operand match in any\n+     order.  Also handle the simple binary and unary cases without a loop.  */\n+  if (code == EQ || code == NE || GET_RTX_CLASS (code) == 'c')\n+    return ((rtx_equal_for_thread_p (XEXP (x, 0), XEXP (y, 0))\n+\t     && rtx_equal_for_thread_p (XEXP (x, 1), XEXP (y, 1)))\n+\t    || (rtx_equal_for_thread_p (XEXP (x, 0), XEXP (y, 1))\n+\t\t&& rtx_equal_for_thread_p (XEXP (x, 1), XEXP (y, 0))));\n+  else if (GET_RTX_CLASS (code) == '<' || GET_RTX_CLASS (code) == '2')\n+    return (rtx_equal_for_thread_p (XEXP (x, 0), XEXP (y, 0))\n+\t    && rtx_equal_for_thread_p (XEXP (x, 1), XEXP (y, 1)));\n+  else if (GET_RTX_CLASS (code) == '1')\n+    return rtx_equal_for_thread_p (XEXP (x, 0), XEXP (y, 0));\n+\n   /* Handle special-cases first.  */\n   switch (code)\n     {"}]}