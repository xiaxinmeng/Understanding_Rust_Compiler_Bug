{"sha": "39ba6ab7fb7e302567bc262303f90ec61596b355", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzliYTZhYjdmYjdlMzAyNTY3YmMyNjIzMDNmOTBlYzYxNTk2YjM1NQ==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2009-07-04T17:04:03Z"}, "committer": {"name": "Eric Botcazou", "email": "ebotcazou@gcc.gnu.org", "date": "2009-07-04T17:04:03Z"}, "message": "* postreload.c (reload_combine): Replace CONST_REG with INDEX_REG.\n\nFrom-SVN: r149234", "tree": {"sha": "654a350ed462dd15eec4f049ac9c3fcedc3aab50", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/654a350ed462dd15eec4f049ac9c3fcedc3aab50"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/39ba6ab7fb7e302567bc262303f90ec61596b355", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/39ba6ab7fb7e302567bc262303f90ec61596b355", "html_url": "https://github.com/Rust-GCC/gccrs/commit/39ba6ab7fb7e302567bc262303f90ec61596b355", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/39ba6ab7fb7e302567bc262303f90ec61596b355/comments", "author": null, "committer": null, "parents": [{"sha": "93a8ba618d4ee18ecf40fac1bbde1675d6078311", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/93a8ba618d4ee18ecf40fac1bbde1675d6078311", "html_url": "https://github.com/Rust-GCC/gccrs/commit/93a8ba618d4ee18ecf40fac1bbde1675d6078311"}], "stats": {"total": 39, "additions": 19, "deletions": 20}, "files": [{"sha": "4a4c3a7d25d05b4c82a34aded099fb9dd4db06a8", "filename": "gcc/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/39ba6ab7fb7e302567bc262303f90ec61596b355/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/39ba6ab7fb7e302567bc262303f90ec61596b355/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=39ba6ab7fb7e302567bc262303f90ec61596b355", "patch": "@@ -1,3 +1,7 @@\n+2009-07-04  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* postreload.c (reload_combine): Replace CONST_REG with INDEX_REG.\n+\n 2009-07-03  Vladimir Makarov  <vmakarov@redhat.com>\n \n \tPR target/40587"}, {"sha": "cf165ec5f0f4b1f269497c16373c91d9a5b6006a", "filename": "gcc/postreload.c", "status": "modified", "additions": 15, "deletions": 20, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/39ba6ab7fb7e302567bc262303f90ec61596b355/gcc%2Fpostreload.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/39ba6ab7fb7e302567bc262303f90ec61596b355/gcc%2Fpostreload.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fpostreload.c?ref=39ba6ab7fb7e302567bc262303f90ec61596b355", "patch": "@@ -815,22 +815,19 @@ reload_combine (void)\n \t  rtx prev = prev_nonnote_insn (insn);\n \t  rtx prev_set = prev ? single_set (prev) : NULL_RTX;\n \t  unsigned int regno = REGNO (reg);\n-\t  rtx const_reg = NULL_RTX;\n+\t  rtx index_reg = NULL_RTX;\n \t  rtx reg_sum = NULL_RTX;\n \n-\t  /* Now, we need an index register.\n-\t     We'll set index_reg to this index register, const_reg to the\n-\t     register that is to be loaded with the constant\n-\t     (denoted as REGZ in the substitution illustration above),\n-\t     and reg_sum to the register-register that we want to use to\n-\t     substitute uses of REG (typically in MEMs) with.\n-\t     First check REG and BASE for being index registers;\n-\t     we can use them even if they are not dead.  */\n+\t  /* Now we need to set INDEX_REG to an index register (denoted as\n+\t     REGZ in the illustration above) and REG_SUM to the expression\n+\t     register+register that we want to use to substitute uses of REG\n+\t     (typically in MEMs) with.  First check REG and BASE for being\n+\t     index registers; we can use them even if they are not dead.  */\n \t  if (TEST_HARD_REG_BIT (reg_class_contents[INDEX_REG_CLASS], regno)\n \t      || TEST_HARD_REG_BIT (reg_class_contents[INDEX_REG_CLASS],\n \t\t\t\t    REGNO (base)))\n \t    {\n-\t      const_reg = reg;\n+\t      index_reg = reg;\n \t      reg_sum = plus;\n \t    }\n \t  else\n@@ -847,9 +844,7 @@ reload_combine (void)\n \t\t      && reg_state[i].store_ruid <= reg_state[regno].use_ruid\n \t\t      && hard_regno_nregs[i][GET_MODE (reg)] == 1)\n \t\t    {\n-\t\t      rtx index_reg = gen_rtx_REG (GET_MODE (reg), i);\n-\n-\t\t      const_reg = index_reg;\n+\t\t      index_reg = gen_rtx_REG (GET_MODE (reg), i);\n \t\t      reg_sum = gen_rtx_PLUS (GET_MODE (reg), index_reg, base);\n \t\t      break;\n \t\t    }\n@@ -859,19 +854,19 @@ reload_combine (void)\n \t  /* Check that PREV_SET is indeed (set (REGX) (CONST_INT)) and that\n \t     (REGY), i.e. BASE, is not clobbered before the last use we'll\n \t     create.  */\n-\t  if (prev_set != 0\n+\t  if (reg_sum\n+\t      && prev_set\n \t      && CONST_INT_P (SET_SRC (prev_set))\n \t      && rtx_equal_p (SET_DEST (prev_set), reg)\n \t      && reg_state[regno].use_index >= 0\n \t      && (reg_state[REGNO (base)].store_ruid\n-\t\t  <= reg_state[regno].use_ruid)\n-\t      && reg_sum != 0)\n+\t\t  <= reg_state[regno].use_ruid))\n \t    {\n \t      int i;\n \n-\t      /* Change destination register and, if necessary, the\n-\t\t constant value in PREV, the constant loading instruction.  */\n-\t      validate_change (prev, &SET_DEST (prev_set), const_reg, 1);\n+\t      /* Change destination register and, if necessary, the constant\n+\t\t value in PREV, the constant loading instruction.  */\n+\t      validate_change (prev, &SET_DEST (prev_set), index_reg, 1);\n \t      if (reg_state[regno].offset != const0_rtx)\n \t\tvalidate_change (prev,\n \t\t\t\t &SET_SRC (prev_set),\n@@ -900,7 +895,7 @@ reload_combine (void)\n \t\t    remove_reg_equal_equiv_notes (prev);\n \n \t\t  reg_state[regno].use_index = RELOAD_COMBINE_MAX_USES;\n-\t\t  reg_state[REGNO (const_reg)].store_ruid\n+\t\t  reg_state[REGNO (index_reg)].store_ruid\n \t\t    = reload_combine_ruid;\n \t\t  continue;\n \t\t}"}]}