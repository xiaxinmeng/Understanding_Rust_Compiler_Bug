{"sha": "b4e3537b6085529b6ca85e9a11106984857d61a9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjRlMzUzN2I2MDg1NTI5YjZjYTg1ZTlhMTExMDY5ODQ4NTdkNjFhOQ==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@redhat.com", "date": "2005-06-19T16:10:49Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2005-06-19T16:10:49Z"}, "message": "ia64-modes.def (V4SF): Add.\n\n        * config/ia64/ia64-modes.def (V4SF): Add.\n        * config/ia64/ia64.c (ia64_legitimate_constant_p): Handle CONST_VECTOR.\n        * config/ia64/ia64.h (CANNOT_CHANGE_MODE_CLASS): Allow vector to\n        integer mode changes in fp regs.\n        * config/ia64/ia64.md (UNSPEC_VECT_EXTR): New.\n        * config/ia64/vect.md (smaxv2sf3, sminv2sf3): Fix typos in names.\n        (reduc_plus_v2sf, reduc_smax_v2sf, reduc_smin_v2sf): New.\n        (vcondv2sf): Use gen_fpack\n        (fpack): Remove * from name.\n        (fswap, fmix_l, fmix_r, fmix_lr): New.\n        (vec_setv2sf, vec_extractv2sf_0_le, vec_extractv2sf_0_be): New.\n        (vec_extractv2sf_1, vec_extractv2sf): New.\n\nFrom-SVN: r101185", "tree": {"sha": "e7edc599fd733326fe0cbaf78e84e97fbbfda53e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e7edc599fd733326fe0cbaf78e84e97fbbfda53e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b4e3537b6085529b6ca85e9a11106984857d61a9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b4e3537b6085529b6ca85e9a11106984857d61a9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b4e3537b6085529b6ca85e9a11106984857d61a9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b4e3537b6085529b6ca85e9a11106984857d61a9/comments", "author": null, "committer": null, "parents": [{"sha": "ad0a0295b59422230bfa46a2e8fc1c8fe1387c0d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ad0a0295b59422230bfa46a2e8fc1c8fe1387c0d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ad0a0295b59422230bfa46a2e8fc1c8fe1387c0d"}], "stats": {"total": 214, "additions": 203, "deletions": 11}, "files": [{"sha": "460489b8645dfaa3361558f0a54e73b18c8c3791", "filename": "gcc/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b4e3537b6085529b6ca85e9a11106984857d61a9/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b4e3537b6085529b6ca85e9a11106984857d61a9/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=b4e3537b6085529b6ca85e9a11106984857d61a9", "patch": "@@ -1,3 +1,18 @@\n+2005-06-19  Richard Henderson  <rth@redhat.com>\n+\n+\t* config/ia64/ia64-modes.def (V4SF): Add.\n+\t* config/ia64/ia64.c (ia64_legitimate_constant_p): Handle CONST_VECTOR.\n+\t* config/ia64/ia64.h (CANNOT_CHANGE_MODE_CLASS): Allow vector to \n+\tinteger mode changes in fp regs.\n+\t* config/ia64/ia64.md (UNSPEC_VECT_EXTR): New.\n+\t* config/ia64/vect.md (smaxv2sf3, sminv2sf3): Fix typos in names.\n+\t(reduc_plus_v2sf, reduc_smax_v2sf, reduc_smin_v2sf): New.\n+\t(vcondv2sf): Use gen_fpack\n+\t(fpack): Remove * from name.\n+\t(fswap, fmix_l, fmix_r, fmix_lr): New.\n+\t(vec_setv2sf, vec_extractv2sf_0_le, vec_extractv2sf_0_be): New.\n+\t(vec_extractv2sf_1, vec_extractv2sf): New.\n+\n 2005-06-19  Andreas Krebbel  <krebbel1@de.ibm.com>\n \n \t* combine.c (make_compound_operation): Use simplify_subreg.  Delete"}, {"sha": "1e7ad22d87a54829d53f10fb898884eb56c6a8d3", "filename": "gcc/config/ia64/ia64-modes.def", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b4e3537b6085529b6ca85e9a11106984857d61a9/gcc%2Fconfig%2Fia64%2Fia64-modes.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b4e3537b6085529b6ca85e9a11106984857d61a9/gcc%2Fconfig%2Fia64%2Fia64-modes.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fia64%2Fia64-modes.def?ref=b4e3537b6085529b6ca85e9a11106984857d61a9", "patch": "@@ -74,3 +74,5 @@ VECTOR_MODE (INT, QI, 16);\n VECTOR_MODE (INT, HI, 8);\n VECTOR_MODE (INT, SI, 4);\n VECTOR_MODE (FLOAT, SF, 2);\n+VECTOR_MODE (FLOAT, SF, 4);\n+"}, {"sha": "5c6d11fd371d9b88a848711c327c86b5b5e603c9", "filename": "gcc/config/ia64/ia64.c", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b4e3537b6085529b6ca85e9a11106984857d61a9/gcc%2Fconfig%2Fia64%2Fia64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b4e3537b6085529b6ca85e9a11106984857d61a9/gcc%2Fconfig%2Fia64%2Fia64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fia64%2Fia64.c?ref=b4e3537b6085529b6ca85e9a11106984857d61a9", "patch": "@@ -738,6 +738,17 @@ ia64_legitimate_constant_p (rtx x)\n     case SYMBOL_REF:\n       return tls_symbolic_operand_type (x) == 0;\n \n+    case CONST_VECTOR:\n+      {\n+\tenum machine_mode mode = GET_MODE (x);\n+\n+\tif (mode == V2SFmode)\n+\t  return ia64_extra_constraint (x, 'Y');\n+\n+\treturn (GET_MODE_CLASS (mode) == MODE_VECTOR_INT\n+\t\t&& GET_MODE_SIZE (mode) <= 8);\n+      }\n+\n     default:\n       return false;\n     }"}, {"sha": "5a3dee5d935b77914bef02e25c13892d7b7731b1", "filename": "gcc/config/ia64/ia64.h", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b4e3537b6085529b6ca85e9a11106984857d61a9/gcc%2Fconfig%2Fia64%2Fia64.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b4e3537b6085529b6ca85e9a11106984857d61a9/gcc%2Fconfig%2Fia64%2Fia64.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fia64%2Fia64.h?ref=b4e3537b6085529b6ca85e9a11106984857d61a9", "patch": "@@ -892,11 +892,11 @@ enum reg_class\n    : ((CLASS) == FR_REGS && (MODE) == XCmode) ? 2\t\t\\\n    : (GET_MODE_SIZE (MODE) + UNITS_PER_WORD - 1) / UNITS_PER_WORD)\n \n-/* In FP regs, we can't change FP values to integer values and vice\n-   versa, but we can change e.g. DImode to SImode.  */\n+/* In FP regs, we can't change FP values to integer values and vice versa,\n+   but we can change e.g. DImode to SImode, and V2SFmode into DImode.  */\n \n-#define CANNOT_CHANGE_MODE_CLASS(FROM, TO, CLASS) \t\\\n-  (GET_MODE_CLASS (FROM) != GET_MODE_CLASS (TO)\t\t\\\n+#define CANNOT_CHANGE_MODE_CLASS(FROM, TO, CLASS) \t\t\\\n+  (SCALAR_FLOAT_MODE_P (FROM) != SCALAR_FLOAT_MODE_P (TO)\t\\\n    ? reg_classes_intersect_p (CLASS, FR_REGS) : 0)\n \n /* A C expression that defines the machine-dependent operand constraint"}, {"sha": "4840ab03b131690f0960d3266f0d2c6a7f1a414a", "filename": "gcc/config/ia64/ia64.md", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b4e3537b6085529b6ca85e9a11106984857d61a9/gcc%2Fconfig%2Fia64%2Fia64.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b4e3537b6085529b6ca85e9a11106984857d61a9/gcc%2Fconfig%2Fia64%2Fia64.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fia64%2Fia64.md?ref=b4e3537b6085529b6ca85e9a11106984857d61a9", "patch": "@@ -80,6 +80,7 @@\n    (UNSPEC_FR_SQRT_RECIP_APPROX 28)\n    (UNSPEC_SHRP\t\t\t29)\n    (UNSPEC_COPYSIGN\t\t30)\n+   (UNSPEC_VECT_EXTR\t\t31)\n   ])\n \n (define_constants"}, {"sha": "c9dcf080e58af841c11144551189b59d3235ecf8", "filename": "gcc/config/ia64/vect.md", "status": "modified", "additions": 170, "deletions": 7, "changes": 177, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b4e3537b6085529b6ca85e9a11106984857d61a9/gcc%2Fconfig%2Fia64%2Fvect.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b4e3537b6085529b6ca85e9a11106984857d61a9/gcc%2Fconfig%2Fia64%2Fvect.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fia64%2Fvect.md?ref=b4e3537b6085529b6ca85e9a11106984857d61a9", "patch": "@@ -845,22 +845,55 @@\n   \"fpnma %0 = %1, %2, %3\"\n   [(set_attr \"itanium_class\" \"fmac\")])\n \n-(define_insn \"smaxv2sf2\"\n+(define_insn \"smaxv2sf3\"\n   [(set (match_operand:V2SF 0 \"fr_register_operand\" \"=f\")\n \t(smax:V2SF (match_operand:V2SF 1 \"fr_register_operand\" \"f\")\n \t\t   (match_operand:V2SF 2 \"fr_register_operand\" \"f\")))]\n   \"\"\n   \"fpmax %0 = %1, %2\"\n   [(set_attr \"itanium_class\" \"fmisc\")])\n \n-(define_insn \"sminv2sf2\"\n+(define_insn \"sminv2sf3\"\n   [(set (match_operand:V2SF 0 \"fr_register_operand\" \"=f\")\n \t(smin:V2SF (match_operand:V2SF 1 \"fr_register_operand\" \"f\")\n \t\t   (match_operand:V2SF 2 \"fr_register_operand\" \"f\")))]\n   \"\"\n   \"fpmin %0 = %1, %2\"\n   [(set_attr \"itanium_class\" \"fmisc\")])\n \n+(define_expand \"reduc_plus_v2sf\"\n+  [(match_operand:V2SF 0 \"fr_register_operand\" \"\")\n+   (match_operand:V2SF 1 \"fr_register_operand\" \"\")]\n+  \"\"\n+{\n+  rtx tmp = gen_reg_rtx (V2SFmode);\n+  emit_insn (gen_fswap (tmp, operands[1], CONST0_RTX (V2SFmode)));\n+  emit_insn (gen_addv2sf3 (operands[0], operands[1], tmp));\n+  DONE;\n+})\n+\n+(define_expand \"reduc_smax_v2sf\"\n+  [(match_operand:V2SF 0 \"fr_register_operand\" \"\")\n+   (match_operand:V2SF 1 \"fr_register_operand\" \"\")]\n+  \"\"\n+{\n+  rtx tmp = gen_reg_rtx (V2SFmode);\n+  emit_insn (gen_fswap (tmp, operands[1], CONST0_RTX (V2SFmode)));\n+  emit_insn (gen_smaxv2sf3 (operands[0], operands[1], tmp));\n+  DONE;\n+})\n+\n+(define_expand \"reduc_smin_v2sf\"\n+  [(match_operand:V2SF 0 \"fr_register_operand\" \"\")\n+   (match_operand:V2SF 1 \"fr_register_operand\" \"\")]\n+  \"\"\n+{\n+  rtx tmp = gen_reg_rtx (V2SFmode);\n+  emit_insn (gen_fswap (tmp, operands[1], CONST0_RTX (V2SFmode)));\n+  emit_insn (gen_sminv2sf3 (operands[0], operands[1], tmp));\n+  DONE;\n+})\n+\n (define_expand \"vcondv2sf\"\n   [(set (match_operand:V2SF 0 \"fr_register_operand\" \"\")\n \t(if_then_else:V2SF\n@@ -922,12 +955,11 @@\n   if (!fr_reg_or_fp01_operand (op2, SFmode))\n     op2 = force_reg (SFmode, op2);\n \n-  x = gen_rtx_VEC_CONCAT (V2SFmode, op1, op2);\n-  emit_insn (gen_rtx_SET (VOIDmode, operands[0], x));\n+  emit_insn (gen_fpack (operands[0], op1, op2));\n   DONE;\n })\n \n-(define_insn \"*fpack\"\n+(define_insn \"fpack\"\n   [(set (match_operand:V2SF 0 \"fr_register_operand\" \"=f\")\n \t(vec_concat:V2SF\n \t  (match_operand:SF 1 \"fr_reg_or_fp01_operand\" \"fG\")\n@@ -936,8 +968,139 @@\n   \"fpack %0 = %F2, %F1\"\n   [(set_attr \"itanium_class\" \"fmisc\")])\n \n+(define_insn \"fswap\"\n+  [(set (match_operand:V2SF 0 \"fr_register_operand\" \"=f\")\n+\t(vec_select:V2SF\n+\t  (vec_concat:V4SF\n+\t    (match_operand:V2SF 1 \"fr_reg_or_0_operand\" \"fU\")\n+\t    (match_operand:V2SF 2 \"fr_reg_or_0_operand\" \"fU\"))\n+\t  (parallel [(const_int 1) (const_int 2)])))]\n+  \"\"\n+  \"fswap %0 = %F1, %F2\"\n+  [(set_attr \"itanium_class\" \"fmisc\")])\n+\n+(define_insn \"*fmix_l\"\n+  [(set (match_operand:V2SF 0 \"fr_register_operand\" \"=f\")\n+\t(vec_select:V2SF\n+\t  (vec_concat:V4SF\n+\t    (match_operand:V2SF 1 \"fr_reg_or_0_operand\" \"fU\")\n+\t    (match_operand:V2SF 2 \"fr_reg_or_0_operand\" \"fU\"))\n+\t  (parallel [(const_int 1) (const_int 3)])))]\n+  \"\"\n+  \"fmix.l %0 = %F2, %F1\"\n+  [(set_attr \"itanium_class\" \"fmisc\")])\n+\n+(define_insn \"fmix_r\"\n+  [(set (match_operand:V2SF 0 \"fr_register_operand\" \"=f\")\n+\t(vec_select:V2SF\n+\t  (vec_concat:V4SF\n+\t    (match_operand:V2SF 1 \"fr_reg_or_0_operand\" \"fU\")\n+\t    (match_operand:V2SF 2 \"fr_reg_or_0_operand\" \"fU\"))\n+\t  (parallel [(const_int 0) (const_int 2)])))]\n+  \"\"\n+  \"fmix.r %0 = %F2, %F1\"\n+  [(set_attr \"itanium_class\" \"fmisc\")])\n+\n+(define_insn \"fmix_lr\"\n+  [(set (match_operand:V2SF 0 \"fr_register_operand\" \"=f\")\n+\t(vec_select:V2SF\n+\t  (vec_concat:V4SF\n+\t    (match_operand:V2SF 1 \"fr_reg_or_0_operand\" \"fU\")\n+\t    (match_operand:V2SF 2 \"fr_reg_or_0_operand\" \"fU\"))\n+\t  (parallel [(const_int 0) (const_int 3)])))]\n+  \"\"\n+  \"fmix.lr %0 = %F2, %F1\"\n+  [(set_attr \"itanium_class\" \"fmisc\")])\n+\n+(define_expand \"vec_setv2sf\"\n+  [(match_operand:V2SF 0 \"fr_register_operand\" \"\")\n+   (match_operand:SF 1 \"fr_register_operand\" \"\")\n+   (match_operand 2 \"const_int_operand\" \"\")]\n+  \"\"\n+{\n+  rtx tmp = gen_reg_rtx (V2SFmode);\n+  emit_insn (gen_fpack (tmp, operands[1], CONST0_RTX (SFmode)));\n+\n+  switch (INTVAL (operands[2]))\n+    {\n+    case 0:\n+      emit_insn (gen_fmix_lr (operands[0], tmp, operands[0]));\n+      break;\n+    case 1:\n+      emit_insn (gen_fmix_r (operands[0], operands[0], tmp));\n+      break;\n+    default:\n+      gcc_unreachable ();\n+    }\n+  DONE;\n+})\n+\n+(define_insn_and_split \"*vec_extractv2sf_0_le\"\n+  [(set (match_operand:SF 0 \"nonimmediate_operand\" \"=r,f,m\")\n+\t(unspec:SF [(match_operand:V2SF 1 \"nonimmediate_operand\" \"rfm,rm,r\")\n+\t\t    (const_int 0)]\n+\t\t   UNSPEC_VECT_EXTR))]\n+  \"!TARGET_BIG_ENDIAN\"\n+  \"#\"\n+  \"reload_completed\"\n+  [(set (match_dup 0) (match_dup 1))]\n+{\n+  if (REG_P (operands[1]) && FR_REGNO_P (REGNO (operands[1])))\n+    operands[0] = gen_rtx_REG (V2SFmode, REGNO (operands[0]));\n+  else if (MEM_P (operands[1]))\n+    operands[1] = adjust_address (operands[1], SFmode, 0);\n+  else\n+    operands[1] = gen_rtx_REG (SFmode, REGNO (operands[1]));\n+})\n+\n+(define_insn_and_split \"*vec_extractv2sf_0_be\"\n+  [(set (match_operand:SF 0 \"register_operand\" \"=r,f\")\n+\t(unspec:SF [(match_operand:V2SF 1 \"register_operand\" \"rf,r\")\n+\t\t    (const_int 0)]\n+\t\t   UNSPEC_VECT_EXTR))]\n+  \"TARGET_BIG_ENDIAN\"\n+  \"#\"\n+  \"reload_completed\"\n+  [(set (match_dup 0) (match_dup 1))]\n+{\n+  if (REG_P (operands[1]) && FR_REGNO_P (REGNO (operands[1])))\n+    operands[0] = gen_rtx_REG (V2SFmode, REGNO (operands[0]));\n+  else\n+    operands[1] = gen_rtx_REG (SFmode, REGNO (operands[1]));\n+})\n+\n+(define_insn_and_split \"*vec_extractv2sf_1\"\n+  [(set (match_operand:SF 0 \"register_operand\" \"=rf\")\n+\t(unspec:SF [(match_operand:V2SF 1 \"register_operand\" \"r\")\n+\t\t    (const_int 1)]\n+\t\t   UNSPEC_VECT_EXTR))]\n+  \"\"\n+  \"#\"\n+  \"reload_completed\"\n+  [(const_int 0)]\n+{\n+  if (FR_REGNO_P (REGNO (operands[0])))\n+    {\n+      operands[1] = gen_rtx_REG (SFmode, REGNO (operands[1]));\n+      emit_move_insn (operands[0], operands[1]);\n+    }\n+  else\n+    {\n+      operands[0] = gen_rtx_REG (DImode, REGNO (operands[0]));\n+      operands[1] = gen_rtx_REG (DImode, REGNO (operands[1]));\n+      emit_insn (gen_lshrdi3 (operands[0], operands[1], GEN_INT (32)));\n+    }\n+  DONE;\n+})\n+\n+(define_expand \"vec_extractv2sf\"\n+  [(set (match_operand:SF 0 \"register_operand\" \"\")\n+\t(unspec:SF [(match_operand:V2SF 1 \"register_operand\" \"\")\n+\t\t    (match_operand:DI 2 \"const_int_operand\" \"\")]\n+\t\t   UNSPEC_VECT_EXTR))]\n+  \"\"\n+  \"\")\n+\n ;; Missing operations\n ;; fprcpa\n ;; fpsqrta\n-;; vec_setv2sf\n-;; vec_extractv2sf"}]}