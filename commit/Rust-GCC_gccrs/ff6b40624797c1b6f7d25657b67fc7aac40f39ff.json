{"sha": "ff6b40624797c1b6f7d25657b67fc7aac40f39ff", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmY2YjQwNjI0Nzk3YzFiNmY3ZDI1NjU3YjY3ZmM3YWFjNDBmMzlmZg==", "commit": {"author": {"name": "Martin Liska", "email": "mliska@suse.cz", "date": "2021-01-04T10:21:20Z"}, "committer": {"name": "Martin Liska", "email": "mliska@suse.cz", "date": "2021-01-04T10:21:20Z"}, "message": "avr.exp: convert Dos newlines to Unix ones\n\ngcc/testsuite/ChangeLog:\n\n\t* gcc.target/avr/avr.exp: Run dos2unix on the file.", "tree": {"sha": "71867dc4f03c4cbfe20eb863a8323a74e7895ddb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/71867dc4f03c4cbfe20eb863a8323a74e7895ddb"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ff6b40624797c1b6f7d25657b67fc7aac40f39ff", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ff6b40624797c1b6f7d25657b67fc7aac40f39ff", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ff6b40624797c1b6f7d25657b67fc7aac40f39ff", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ff6b40624797c1b6f7d25657b67fc7aac40f39ff/comments", "author": {"login": "marxin", "id": 2658545, "node_id": "MDQ6VXNlcjI2NTg1NDU=", "avatar_url": "https://avatars.githubusercontent.com/u/2658545?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marxin", "html_url": "https://github.com/marxin", "followers_url": "https://api.github.com/users/marxin/followers", "following_url": "https://api.github.com/users/marxin/following{/other_user}", "gists_url": "https://api.github.com/users/marxin/gists{/gist_id}", "starred_url": "https://api.github.com/users/marxin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marxin/subscriptions", "organizations_url": "https://api.github.com/users/marxin/orgs", "repos_url": "https://api.github.com/users/marxin/repos", "events_url": "https://api.github.com/users/marxin/events{/privacy}", "received_events_url": "https://api.github.com/users/marxin/received_events", "type": "User", "site_admin": false}, "committer": {"login": "marxin", "id": 2658545, "node_id": "MDQ6VXNlcjI2NTg1NDU=", "avatar_url": "https://avatars.githubusercontent.com/u/2658545?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marxin", "html_url": "https://github.com/marxin", "followers_url": "https://api.github.com/users/marxin/followers", "following_url": "https://api.github.com/users/marxin/following{/other_user}", "gists_url": "https://api.github.com/users/marxin/gists{/gist_id}", "starred_url": "https://api.github.com/users/marxin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marxin/subscriptions", "organizations_url": "https://api.github.com/users/marxin/orgs", "repos_url": "https://api.github.com/users/marxin/repos", "events_url": "https://api.github.com/users/marxin/events{/privacy}", "received_events_url": "https://api.github.com/users/marxin/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8837f82e4bab1b5405cf034eab9b3e83afc563ad", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8837f82e4bab1b5405cf034eab9b3e83afc563ad", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8837f82e4bab1b5405cf034eab9b3e83afc563ad"}], "stats": {"total": 80, "additions": 40, "deletions": 40}, "files": [{"sha": "c8af5053400baa1fc4c863224d8e599e2060b5a2", "filename": "gcc/testsuite/gcc.target/avr/avr.exp", "status": "modified", "additions": 40, "deletions": 40, "changes": 80, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ff6b40624797c1b6f7d25657b67fc7aac40f39ff/gcc%2Ftestsuite%2Fgcc.target%2Favr%2Favr.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ff6b40624797c1b6f7d25657b67fc7aac40f39ff/gcc%2Ftestsuite%2Fgcc.target%2Favr%2Favr.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Favr%2Favr.exp?ref=ff6b40624797c1b6f7d25657b67fc7aac40f39ff", "patch": "@@ -1,41 +1,41 @@\n # Copyright (C) 2008-2021 Free Software Foundation, Inc.\n-\r\n-# This program is free software; you can redistribute it and/or modify\r\n-# it under the terms of the GNU General Public License as published by\r\n-# the Free Software Foundation; either version 3 of the License, or\r\n-# (at your option) any later version.\r\n-# \r\n-# This program is distributed in the hope that it will be useful,\r\n-# but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n-# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n-# GNU General Public License for more details.\r\n-# \r\n-# You should have received a copy of the GNU General Public License\r\n-# along with GCC; see the file COPYING3.  If not see\r\n-# <http://www.gnu.org/licenses/>.\r\n-\r\n-# GCC testsuite that uses the `dg.exp' driver.\r\n-\r\n-# Exit immediately if this isn't an AVR target.\r\n-if ![istarget avr-*-*] then {\r\n-  return\r\n-}\r\n-\r\n-# Load support procs.\r\n-load_lib gcc-dg.exp\r\n-\r\n-# If a testcase doesn't have special options, use these.\r\n-global DEFAULT_CFLAGS\r\n-if ![info exists DEFAULT_CFLAGS] then {\r\n-    set DEFAULT_CFLAGS \" -ansi -pedantic-errors\"\r\n-}\r\n-\r\n-# Initialize `dg'.\r\n-dg-init\r\n-\r\n-# Main loop.\r\n-dg-runtest [lsort [glob -nocomplain $srcdir/$subdir/*.{\\[cCS\\],cpp}]] \\\r\n-\t\"\" $DEFAULT_CFLAGS\r\n-\r\n-# All done.\r\n-dg-finish\r\n+\n+# This program is free software; you can redistribute it and/or modify\n+# it under the terms of the GNU General Public License as published by\n+# the Free Software Foundation; either version 3 of the License, or\n+# (at your option) any later version.\n+# \n+# This program is distributed in the hope that it will be useful,\n+# but WITHOUT ANY WARRANTY; without even the implied warranty of\n+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+# GNU General Public License for more details.\n+# \n+# You should have received a copy of the GNU General Public License\n+# along with GCC; see the file COPYING3.  If not see\n+# <http://www.gnu.org/licenses/>.\n+\n+# GCC testsuite that uses the `dg.exp' driver.\n+\n+# Exit immediately if this isn't an AVR target.\n+if ![istarget avr-*-*] then {\n+  return\n+}\n+\n+# Load support procs.\n+load_lib gcc-dg.exp\n+\n+# If a testcase doesn't have special options, use these.\n+global DEFAULT_CFLAGS\n+if ![info exists DEFAULT_CFLAGS] then {\n+    set DEFAULT_CFLAGS \" -ansi -pedantic-errors\"\n+}\n+\n+# Initialize `dg'.\n+dg-init\n+\n+# Main loop.\n+dg-runtest [lsort [glob -nocomplain $srcdir/$subdir/*.{\\[cCS\\],cpp}]] \\\n+\t\"\" $DEFAULT_CFLAGS\n+\n+# All done.\n+dg-finish"}]}