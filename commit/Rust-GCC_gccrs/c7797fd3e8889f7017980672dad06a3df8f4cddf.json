{"sha": "c7797fd3e8889f7017980672dad06a3df8f4cddf", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Yzc3OTdmZDNlODg4OWY3MDE3OTgwNjcyZGFkMDZhM2RmOGY0Y2RkZg==", "commit": {"author": {"name": "Segher Boessenkool", "email": "segher@kernel.crashing.org", "date": "2019-04-15T11:33:29Z"}, "committer": {"name": "Segher Boessenkool", "email": "segher@gcc.gnu.org", "date": "2019-04-15T11:33:29Z"}, "message": "combine: Count auto_inc properly (PR89794)\n\nThe code that checks if an auto-increment from i0 or i1 is not lost is\na bit shaky.  The code to check the same for i2 is non-existent, and\ncannot be implemented in a similar way at all.  So, this patch counts\nall auto-increments, and makes sure we end up with the same number as\nwe started with.  This works because we still have a check that we\nwill not duplicate any.\n\nWe should do this some better way, but not while we are in stage 4.\n\n\n\tPR rtl-optimization/89794\n\t* combine.c (count_auto_inc): New function.\n\t(try_combine): Count how many auto_inc expressions there were in the\n\toriginal instructions.  Ensure we have the same number in the new\n\tinstructions.  Remove the code that tried to ensure auto_inc side\n\teffects on i1 and i0 are not lost.\n\ngcc/testsuite/\n\tPR rtl-optimization/89794\n\t* gcc.dg/torture/pr89794.c: New testcase.\n\nFrom-SVN: r270368", "tree": {"sha": "cb56a08897aa6980a6403a0741b36afe747f2613", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/cb56a08897aa6980a6403a0741b36afe747f2613"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c7797fd3e8889f7017980672dad06a3df8f4cddf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c7797fd3e8889f7017980672dad06a3df8f4cddf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c7797fd3e8889f7017980672dad06a3df8f4cddf", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c7797fd3e8889f7017980672dad06a3df8f4cddf/comments", "author": {"login": "segher", "id": 417629, "node_id": "MDQ6VXNlcjQxNzYyOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/417629?v=4", "gravatar_id": "", "url": "https://api.github.com/users/segher", "html_url": "https://github.com/segher", "followers_url": "https://api.github.com/users/segher/followers", "following_url": "https://api.github.com/users/segher/following{/other_user}", "gists_url": "https://api.github.com/users/segher/gists{/gist_id}", "starred_url": "https://api.github.com/users/segher/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/segher/subscriptions", "organizations_url": "https://api.github.com/users/segher/orgs", "repos_url": "https://api.github.com/users/segher/repos", "events_url": "https://api.github.com/users/segher/events{/privacy}", "received_events_url": "https://api.github.com/users/segher/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "869032b176d57ca8c8864a7818394106ca665d06", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/869032b176d57ca8c8864a7818394106ca665d06", "html_url": "https://github.com/Rust-GCC/gccrs/commit/869032b176d57ca8c8864a7818394106ca665d06"}], "stats": {"total": 98, "additions": 80, "deletions": 18}, "files": [{"sha": "2605beb5e96f348b8e6b496a18c044ee801d4da7", "filename": "ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c7797fd3e8889f7017980672dad06a3df8f4cddf/ChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c7797fd3e8889f7017980672dad06a3df8f4cddf/ChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/ChangeLog?ref=c7797fd3e8889f7017980672dad06a3df8f4cddf", "patch": "@@ -1,3 +1,12 @@\n+2019-04-15  Segher Boessenkool  <segher@kernel.crashing.org>\n+\n+\tPR rtl-optimization/89794\n+\t* combine.c (count_auto_inc): New function.\n+\t(try_combine): Count how many auto_inc expressions there were in the\n+\toriginal instructions.  Ensure we have the same number in the new\n+\tinstructions.  Remove the code that tried to ensure auto_inc side\n+\teffects on i1 and i0 are not lost.\n+\n 2019-04-14  Johannes Pfau  <johannespfau@gmail.com>\n \n \t* configure.ac: Remove d from unsupported languages on mingw and cygwin."}, {"sha": "5616e6b1bacb2a53fa006c121e0a4aaf853aadc3", "filename": "gcc/combine.c", "status": "modified", "additions": 42, "deletions": 18, "changes": 60, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c7797fd3e8889f7017980672dad06a3df8f4cddf/gcc%2Fcombine.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c7797fd3e8889f7017980672dad06a3df8f4cddf/gcc%2Fcombine.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcombine.c?ref=c7797fd3e8889f7017980672dad06a3df8f4cddf", "patch": "@@ -2641,6 +2641,16 @@ is_just_move (rtx x)\n   return (GET_CODE (x) == SET && general_operand (SET_SRC (x), VOIDmode));\n }\n \n+/* Callback function to count autoincs.  */\n+\n+static int\n+count_auto_inc (rtx, rtx, rtx, rtx, rtx, void *arg)\n+{\n+  (*((int *) arg))++;\n+\n+  return 0;\n+}\n+\n /* Try to combine the insns I0, I1 and I2 into I3.\n    Here I0, I1 and I2 appear earlier than I3.\n    I0 and I1 can be zero; then we combine just I2 into I3, or I1 and I2 into\n@@ -2706,6 +2716,7 @@ try_combine (rtx_insn *i3, rtx_insn *i2, rtx_insn *i1, rtx_insn *i0,\n   int split_i2i3 = 0;\n   int changed_i3_dest = 0;\n   bool i2_was_move = false, i3_was_move = false;\n+  int n_auto_inc = 0;\n \n   int maxreg;\n   rtx_insn *temp_insn;\n@@ -3210,6 +3221,16 @@ try_combine (rtx_insn *i3, rtx_insn *i2, rtx_insn *i1, rtx_insn *i0,\n       return 0;\n     }\n \n+  /* Count how many auto_inc expressions there were in the original insns;\n+     we need to have the same number in the resulting patterns.  */\n+\n+  if (i0)\n+    for_each_inc_dec (PATTERN (i0), count_auto_inc, &n_auto_inc);\n+  if (i1)\n+    for_each_inc_dec (PATTERN (i1), count_auto_inc, &n_auto_inc);\n+  for_each_inc_dec (PATTERN (i2), count_auto_inc, &n_auto_inc);\n+  for_each_inc_dec (PATTERN (i3), count_auto_inc, &n_auto_inc);\n+\n   /* If the set in I2 needs to be kept around, we must make a copy of\n      PATTERN (I2), so that when we substitute I1SRC for I1DEST in\n      PATTERN (I2), we are only substituting for the original I1DEST, not into\n@@ -3411,18 +3432,11 @@ try_combine (rtx_insn *i3, rtx_insn *i2, rtx_insn *i1, rtx_insn *i0,\n \n   if (i1 && GET_CODE (newpat) != CLOBBER)\n     {\n-      /* Check that an autoincrement side-effect on I1 has not been lost.\n-\t This happens if I1DEST is mentioned in I2 and dies there, and\n-\t has disappeared from the new pattern.  */\n-      if ((FIND_REG_INC_NOTE (i1, NULL_RTX) != 0\n-\t   && i1_feeds_i2_n\n-\t   && dead_or_set_p (i2, i1dest)\n-\t   && !reg_overlap_mentioned_p (i1dest, newpat))\n-\t   /* Before we can do this substitution, we must redo the test done\n-\t      above (see detailed comments there) that ensures I1DEST isn't\n-\t      mentioned in any SETs in NEWPAT that are field assignments.  */\n-\t  || !combinable_i3pat (NULL, &newpat, i1dest, NULL_RTX, NULL_RTX,\n-\t\t\t\t0, 0, 0))\n+      /* Before we can do this substitution, we must redo the test done\n+\t above (see detailed comments there) that ensures I1DEST isn't\n+\t mentioned in any SETs in NEWPAT that are field assignments.  */\n+      if (!combinable_i3pat (NULL, &newpat, i1dest, NULL_RTX, NULL_RTX,\n+\t\t\t     0, 0, 0))\n \t{\n \t  undo_all ();\n \t  return 0;\n@@ -3452,12 +3466,8 @@ try_combine (rtx_insn *i3, rtx_insn *i2, rtx_insn *i1, rtx_insn *i0,\n \n   if (i0 && GET_CODE (newpat) != CLOBBER)\n     {\n-      if ((FIND_REG_INC_NOTE (i0, NULL_RTX) != 0\n-\t   && ((i0_feeds_i2_n && dead_or_set_p (i2, i0dest))\n-\t       || (i0_feeds_i1_n && dead_or_set_p (i1, i0dest)))\n-\t   && !reg_overlap_mentioned_p (i0dest, newpat))\n-\t  || !combinable_i3pat (NULL, &newpat, i0dest, NULL_RTX, NULL_RTX,\n-\t\t\t\t0, 0, 0))\n+      if (!combinable_i3pat (NULL, &newpat, i0dest, NULL_RTX, NULL_RTX,\n+\t\t\t     0, 0, 0))\n \t{\n \t  undo_all ();\n \t  return 0;\n@@ -3478,6 +3488,20 @@ try_combine (rtx_insn *i3, rtx_insn *i2, rtx_insn *i1, rtx_insn *i0,\n       substed_i0 = 1;\n     }\n \n+  if (n_auto_inc)\n+    {\n+      int new_n_auto_inc = 0;\n+      for_each_inc_dec (newpat, count_auto_inc, &new_n_auto_inc);\n+\n+      if (n_auto_inc != new_n_auto_inc)\n+\t{\n+\t  if (dump_file && (dump_flags & TDF_DETAILS))\n+\t    fprintf (dump_file, \"Number of auto_inc expressions changed\\n\");\n+\t  undo_all ();\n+\t  return 0;\n+\t}\n+    }\n+\n   /* Fail if an autoincrement side-effect has been duplicated.  Be careful\n      to count all the ways that I2SRC and I1SRC can be used.  */\n   if ((FIND_REG_INC_NOTE (i2, NULL_RTX) != 0"}, {"sha": "be91be7c11bc76428eba3ccb1abe487e5d667fd2", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c7797fd3e8889f7017980672dad06a3df8f4cddf/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c7797fd3e8889f7017980672dad06a3df8f4cddf/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=c7797fd3e8889f7017980672dad06a3df8f4cddf", "patch": "@@ -1,3 +1,8 @@\n+2019-04-15  Segher Boessenkool  <segher@kernel.crashing.org>\n+\n+\tPR rtl-optimization/89794\n+\t* gcc.dg/torture/pr89794.c: New testcase.\n+\n 2019-04-15  Richard Biener  <rguenther@suse.de>\n \n \tPR ipa/88936"}, {"sha": "91bb0c4138cd01ee93ea661e3c0daa9856559b00", "filename": "gcc/testsuite/gcc.dg/torture/pr89794.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c7797fd3e8889f7017980672dad06a3df8f4cddf/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr89794.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c7797fd3e8889f7017980672dad06a3df8f4cddf/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr89794.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr89794.c?ref=c7797fd3e8889f7017980672dad06a3df8f4cddf", "patch": "@@ -0,0 +1,24 @@\n+/* { dg-do run } */\n+\n+typedef unsigned short u16;\n+typedef unsigned int u32;\n+typedef unsigned long long u64;\n+\n+u32 a, b, c, d;\n+\n+u32 foo (u32 f, u32 g, u32 g2, u32 g3, u16 h, u16 i)\n+{\n+  (void)g, (void)g2, (void)g3, (void)h;\n+  d = __builtin_bswap64 (i);\n+  __builtin_sub_overflow (0, d, &b);\n+  __builtin_memset (&i, c, 2);\n+  a = 0;\n+  return b + f + i + c;\n+}\n+\n+int main (void)\n+{\n+  u32 x = foo (0, 0, 0, 0, 0, 0);\n+  asm (\"\" :: \"r\" (x));\n+  return 0;\n+}"}]}