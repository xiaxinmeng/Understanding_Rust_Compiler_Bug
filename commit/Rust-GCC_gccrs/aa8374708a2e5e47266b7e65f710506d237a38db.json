{"sha": "aa8374708a2e5e47266b7e65f710506d237a38db", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWE4Mzc0NzA4YTJlNWU0NzI2NmI3ZTY1ZjcxMDUwNmQyMzdhMzhkYg==", "commit": {"author": {"name": "Janne Blomqvist", "email": "jb@gcc.gnu.org", "date": "2011-02-02T08:48:24Z"}, "committer": {"name": "Janne Blomqvist", "email": "jb@gcc.gnu.org", "date": "2011-02-02T08:48:24Z"}, "message": "PR 47571 Weakref trickery for clock_gettime()\n\nFrom-SVN: r169517", "tree": {"sha": "74e43d0af93ad7827a8164bfa3ba1469d9f6c579", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/74e43d0af93ad7827a8164bfa3ba1469d9f6c579"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/aa8374708a2e5e47266b7e65f710506d237a38db", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/aa8374708a2e5e47266b7e65f710506d237a38db", "html_url": "https://github.com/Rust-GCC/gccrs/commit/aa8374708a2e5e47266b7e65f710506d237a38db", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/aa8374708a2e5e47266b7e65f710506d237a38db/comments", "author": null, "committer": null, "parents": [{"sha": "e829c3213bab0c0126336b4ffdd60605874e3783", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e829c3213bab0c0126336b4ffdd60605874e3783", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e829c3213bab0c0126336b4ffdd60605874e3783"}], "stats": {"total": 55, "additions": 42, "deletions": 13}, "files": [{"sha": "47ab730be5b2eddb8aaa441e44efe4ff87202297", "filename": "libgfortran/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aa8374708a2e5e47266b7e65f710506d237a38db/libgfortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aa8374708a2e5e47266b7e65f710506d237a38db/libgfortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2FChangeLog?ref=aa8374708a2e5e47266b7e65f710506d237a38db", "patch": "@@ -1,3 +1,12 @@\n+2011-02-02  Janne Blomqvist  <jb@gcc.gnu.org>\n+\n+\tPR libfortran/47571\n+\t* configure: Regenerated.\n+\t* configure.ac: Don't add librt to LIBS.\n+\t* intrinsics/time_1.h (weak_gettime): Weakref trickery for\n+\tclock_gettime().\n+\t(gf_gettime): Use weak_gettime() instead of clock_gettime().\n+\n 2011-02-01  Janne Blomqvist  <jb@gcc.gnu.org>\n \n \t* intrinsics/time_1.h: Include errno.h needed by fallbacks."}, {"sha": "d052a05cdcf6afad369db138569b9217a89be41a", "filename": "libgfortran/configure", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aa8374708a2e5e47266b7e65f710506d237a38db/libgfortran%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aa8374708a2e5e47266b7e65f710506d237a38db/libgfortran%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fconfigure?ref=aa8374708a2e5e47266b7e65f710506d237a38db", "patch": "@@ -25262,7 +25262,8 @@ fi\n \n # At least for glibc, clock_gettime is in librt.  But don't pull that\n # in if it still doesn't give us the function we want.\n-# This test is copied from libgomp.\n+# This test is copied from libgomp, and modified to not link in -lrt\n+# as libgfortran calls clock_gettime via a weak reference.\n if test $ac_cv_func_clock_gettime = no; then\n   { $as_echo \"$as_me:${as_lineno-$LINENO}: checking for clock_gettime in -lrt\" >&5\n $as_echo_n \"checking for clock_gettime in -lrt... \" >&6; }\n@@ -25304,7 +25305,6 @@ fi\n { $as_echo \"$as_me:${as_lineno-$LINENO}: result: $ac_cv_lib_rt_clock_gettime\" >&5\n $as_echo \"$ac_cv_lib_rt_clock_gettime\" >&6; }\n if test \"x$ac_cv_lib_rt_clock_gettime\" = x\"\"yes; then :\n-  LIBS=\"-lrt $LIBS\"\n \n $as_echo \"#define HAVE_CLOCK_GETTIME 1\" >>confdefs.h\n "}, {"sha": "816165988ce7006aa5637b4d552164bec9c30c74", "filename": "libgfortran/configure.ac", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aa8374708a2e5e47266b7e65f710506d237a38db/libgfortran%2Fconfigure.ac", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aa8374708a2e5e47266b7e65f710506d237a38db/libgfortran%2Fconfigure.ac", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fconfigure.ac?ref=aa8374708a2e5e47266b7e65f710506d237a38db", "patch": "@@ -486,11 +486,11 @@ AC_CHECK_LIB([m],[feenableexcept],[have_feenableexcept=yes AC_DEFINE([HAVE_FEENA\n \n # At least for glibc, clock_gettime is in librt.  But don't pull that\n # in if it still doesn't give us the function we want.\n-# This test is copied from libgomp.\n+# This test is copied from libgomp, and modified to not link in -lrt\n+# as libgfortran calls clock_gettime via a weak reference.\n if test $ac_cv_func_clock_gettime = no; then\n   AC_CHECK_LIB(rt, clock_gettime,\n-    [LIBS=\"-lrt $LIBS\"  \n-     AC_DEFINE(HAVE_CLOCK_GETTIME, 1,\n+    [AC_DEFINE(HAVE_CLOCK_GETTIME, 1,\n                [Define to 1 if you have the `clock_gettime' function.])])\n fi\n "}, {"sha": "86e4331e8899f373b85626979cb6e67a13006084", "filename": "libgfortran/intrinsics/time_1.h", "status": "modified", "additions": 28, "deletions": 8, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aa8374708a2e5e47266b7e65f710506d237a38db/libgfortran%2Fintrinsics%2Ftime_1.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aa8374708a2e5e47266b7e65f710506d237a38db/libgfortran%2Fintrinsics%2Ftime_1.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fintrinsics%2Ftime_1.h?ref=aa8374708a2e5e47266b7e65f710506d237a38db", "patch": "@@ -189,6 +189,22 @@ gf_cputime (long *user_sec, long *user_usec, long *system_sec, long *system_usec\n #define GF_CLOCK_MONOTONIC GF_CLOCK_REALTIME\n #endif\n \n+/* Weakref trickery for clock_gettime().  On Glibc, clock_gettime()\n+   requires us to link in librt, which also pulls in libpthread.  In\n+   order to avoid this by default, only call clock_gettime() through a\n+   weak reference.  */\n+#ifdef HAVE_CLOCK_GETTIME\n+#ifdef SUPPORTS_WEAK\n+static int weak_gettime (clockid_t, struct timespec *) \n+  __attribute__((__weakref__(\"clock_gettime\")));\n+#else\n+static inline int weak_gettime (clockid_t clk_id, struct timespec *res)\n+{\n+  return clock_gettime (clk_id, res);\n+}\n+#endif\n+#endif\n+\n /* Arguments:\n    clock_id - INPUT, must be either GF_CLOCK_REALTIME or GF_CLOCK_MONOTONIC\n    secs     - OUTPUT, seconds\n@@ -208,14 +224,18 @@ gf_gettime (int clock_id __attribute__((unused)), time_t * secs,\n             long * nanosecs)\n {\n #ifdef HAVE_CLOCK_GETTIME\n-  struct timespec ts;\n-  int err;\n-  err = clock_gettime (clock_id, &ts);\n-  *secs = ts.tv_sec;\n-  if (nanosecs)\n-    *nanosecs = ts.tv_nsec;\n-  return err;\n-#elif HAVE_GETTIMEOFDAY\n+  if (weak_gettime)\n+    {\n+      struct timespec ts;\n+      int err;\n+      err = weak_gettime (clock_id, &ts);\n+      *secs = ts.tv_sec;\n+      if (nanosecs)\n+\t*nanosecs = ts.tv_nsec;\n+      return err;\n+    }\n+#endif\n+#ifdef HAVE_GETTIMEOFDAY\n   struct timeval tv;\n   int err;\n   err = gettimeofday (&tv, NULL);"}]}