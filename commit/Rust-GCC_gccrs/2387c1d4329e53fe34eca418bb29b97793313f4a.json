{"sha": "2387c1d4329e53fe34eca418bb29b97793313f4a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjM4N2MxZDQzMjllNTNmZTM0ZWNhNDE4YmIyOWI5Nzc5MzMxM2Y0YQ==", "commit": {"author": {"name": "Zack Weinberg", "email": "zack@wolery.cumb.org", "date": "2000-02-09T18:35:41Z"}, "committer": {"name": "Zack Weinberg", "email": "zack@gcc.gnu.org", "date": "2000-02-09T18:35:41Z"}, "message": "cpplib.c (cpp_define, cpp_undef): Make sure the stacked buffer ends with a newline and a NUL.\n\n\t* cpplib.c (cpp_define, cpp_undef): Make sure the stacked buffer\n\tends with a newline and a NUL.  Don't be so clever manipulating\n\tstrings.\n\nFrom-SVN: r31864", "tree": {"sha": "0ca92fb0e11f1d1346ed4c2ec1d5fee112120d3e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0ca92fb0e11f1d1346ed4c2ec1d5fee112120d3e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2387c1d4329e53fe34eca418bb29b97793313f4a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2387c1d4329e53fe34eca418bb29b97793313f4a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2387c1d4329e53fe34eca418bb29b97793313f4a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2387c1d4329e53fe34eca418bb29b97793313f4a/comments", "author": null, "committer": null, "parents": [{"sha": "e8b22dd136b0adf813976ca738c7d96d101b3452", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e8b22dd136b0adf813976ca738c7d96d101b3452", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e8b22dd136b0adf813976ca738c7d96d101b3452"}], "stats": {"total": 49, "additions": 36, "deletions": 13}, "files": [{"sha": "30f023001a87f383a4110729db5447e526f59498", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2387c1d4329e53fe34eca418bb29b97793313f4a/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2387c1d4329e53fe34eca418bb29b97793313f4a/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=2387c1d4329e53fe34eca418bb29b97793313f4a", "patch": "@@ -1,3 +1,9 @@\n+2000-02-09  Zack Weinberg  <zack@wolery.cumb.org>\n+\n+\t* cpplib.c (cpp_define, cpp_undef): Make sure the stacked buffer\n+\tends with a newline and a NUL.  Don't be so clever manipulating\n+\tstrings.\n+\n Wed Feb  9 14:18:08 MET 2000  Jan Hubicka  <jh@suse.cz>\n \n \t* reload1.c (reload) Align stack frame to cfun->stack_alignment_needed,"}, {"sha": "e1061f1f2f74bdb2b46071358945f49fe56c2880", "filename": "gcc/cpplib.c", "status": "modified", "additions": 30, "deletions": 13, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2387c1d4329e53fe34eca418bb29b97793313f4a/gcc%2Fcpplib.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2387c1d4329e53fe34eca418bb29b97793313f4a/gcc%2Fcpplib.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcpplib.c?ref=2387c1d4329e53fe34eca418bb29b97793313f4a", "patch": "@@ -186,6 +186,11 @@ cpp_grow_buffer (pfile, n)\n   CPP_SET_WRITTEN (pfile, old_written);\n }\n \n+/* Process the string STR as if it appeared as the body of a #define\n+   If STR is just an identifier, define it with value 1.\n+   If STR has anything after the identifier, then it should\n+   be identifier=definition. */\n+\n /* Process the string STR as if it appeared as the body of a #define\n    If STR is just an identifier, define it with value 1.\n    If STR has anything after the identifier, then it should\n@@ -199,21 +204,28 @@ cpp_define (pfile, str)\n   U_CHAR *buf, *p;\n   size_t count;\n \n-  /* Copy the entire option so we can modify it.  */\n-  count = strlen (str) + 3;\n-  buf = (U_CHAR *) alloca (count);\n-  memcpy (buf, str, count - 2);\n-  /* Change the first \"=\" in the string to a space.  If there is none,\n-     tack \" 1\" on the end. */\n-  p = (U_CHAR *) strchr (buf, '=');\n+  p = strchr (str, '=');\n+  /* Copy the entire option so we can modify it. \n+     Change the first \"=\" in the string to a space.  If there is none,\n+     tack \" 1\" on the end.  Then add a newline and a NUL.  */\n+  \n   if (p)\n     {\n-      *p = ' ';\n-      count -= 2;\n+      count = strlen (str) + 2;\n+      buf = (U_CHAR *) alloca (count);\n+      memcpy (buf, str, count - 2);\n+      buf[p - str] = ' ';\n+      buf[count - 2] = '\\n';\n+      buf[count - 1] = '\\0';\n     }\n   else\n-      strcpy (&buf[count-3], \" 1\");\n-  \n+    {\n+      count = strlen (str) + 4;\n+      buf = (U_CHAR *) alloca (count);\n+      memcpy (buf, str, count - 4);\n+      strcpy (&buf[count-4], \" 1\\n\");\n+    }\n+\n   if (cpp_push_buffer (pfile, buf, count - 1) != NULL)\n     {\n       do_define (pfile, NULL);\n@@ -1476,14 +1488,19 @@ cpp_undef (pfile, macro)\n      cpp_reader *pfile;\n      U_CHAR *macro;\n {\n-  if (cpp_push_buffer (pfile, macro, strlen (macro)))\n+  /* Copy the string so we can append a newline.  */\n+  size_t len = strlen (macro);\n+  U_CHAR *buf = alloca (len + 2);\n+  memcpy (buf, macro, len);\n+  buf[len]     = '\\n';\n+  buf[len + 1] = '\\0';\n+  if (cpp_push_buffer (pfile, buf, len + 1))\n     {\n       do_undef (pfile, NULL);\n       cpp_pop_buffer (pfile);\n     }\n }\n \n-\f\n /*\n  * Report an error detected by the program we are processing.\n  * Use the text of the line in the error message."}]}