{"sha": "8c7e9a616ecd878f0d58f19e65fe7a5b55a2b183", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGM3ZTlhNjE2ZWNkODc4ZjBkNThmMTllNjVmZTdhNWI1NWEyYjE4Mw==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2014-12-12T03:49:03Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2014-12-12T03:49:03Z"}, "message": "re PR c++/64248 (Error: declarator-id missing; using reserved word \u2018__FUNCTION__\u2019)\n\n\tPR c++/64248\n\tRevert:\n\t* parser.c (cp_parser_unqualified_id): Handle __func__ here.\n\t(cp_parser_primary_expression): Not here.\n\nFrom-SVN: r218654", "tree": {"sha": "bc515152f3b09173587205075357cf9295e4f900", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/bc515152f3b09173587205075357cf9295e4f900"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8c7e9a616ecd878f0d58f19e65fe7a5b55a2b183", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8c7e9a616ecd878f0d58f19e65fe7a5b55a2b183", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8c7e9a616ecd878f0d58f19e65fe7a5b55a2b183", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8c7e9a616ecd878f0d58f19e65fe7a5b55a2b183/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "89631a43369a94bcce9a3a3b3063a75972754a5a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/89631a43369a94bcce9a3a3b3063a75972754a5a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/89631a43369a94bcce9a3a3b3063a75972754a5a"}], "stats": {"total": 86, "additions": 61, "deletions": 25}, "files": [{"sha": "52b582d34cd7397b7e5ada2004969b605d27fb68", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8c7e9a616ecd878f0d58f19e65fe7a5b55a2b183/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8c7e9a616ecd878f0d58f19e65fe7a5b55a2b183/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=8c7e9a616ecd878f0d58f19e65fe7a5b55a2b183", "patch": "@@ -1,5 +1,10 @@\n 2014-12-11  Jason Merrill  <jason@redhat.com>\n \n+\tPR c++/64248\n+\tRevert:\n+\t* parser.c (cp_parser_unqualified_id): Handle __func__ here.\n+\t(cp_parser_primary_expression): Not here.\n+\n \tPR c++/57510\n \t* typeck2.c (split_nonconstant_init_1): Handle arrays here.\n \t(store_init_value): Not here."}, {"sha": "76725efde7d280fac2dc22d02f95522660c7db11", "filename": "gcc/cp/parser.c", "status": "modified", "additions": 37, "deletions": 18, "changes": 55, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8c7e9a616ecd878f0d58f19e65fe7a5b55a2b183/gcc%2Fcp%2Fparser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8c7e9a616ecd878f0d58f19e65fe7a5b55a2b183/gcc%2Fcp%2Fparser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparser.c?ref=8c7e9a616ecd878f0d58f19e65fe7a5b55a2b183", "patch": "@@ -4503,9 +4503,39 @@ cp_parser_primary_expression (cp_parser *parser,\n \tcase RID_FUNCTION_NAME:\n \tcase RID_PRETTY_FUNCTION_NAME:\n \tcase RID_C99_FUNCTION_NAME:\n+\t  {\n+\t    non_integral_constant name;\n+\n \t    /* The symbols __FUNCTION__, __PRETTY_FUNCTION__, and\n-\t       __func__ are the names of variables.  */\n-\t  goto id_expression;\n+\t       __func__ are the names of variables -- but they are\n+\t       treated specially.  Therefore, they are handled here,\n+\t       rather than relying on the generic id-expression logic\n+\t       below.  Grammatically, these names are id-expressions.\n+\n+\t       Consume the token.  */\n+\t    token = cp_lexer_consume_token (parser->lexer);\n+\n+\t    switch (token->keyword)\n+\t      {\n+\t      case RID_FUNCTION_NAME:\n+\t\tname = NIC_FUNC_NAME;\n+\t\tbreak;\n+\t      case RID_PRETTY_FUNCTION_NAME:\n+\t\tname = NIC_PRETTY_FUNC;\n+\t\tbreak;\n+\t      case RID_C99_FUNCTION_NAME:\n+\t\tname = NIC_C99_FUNC;\n+\t\tbreak;\n+\t      default:\n+\t\tgcc_unreachable ();\n+\t      }\n+\n+\t    if (cp_parser_non_integral_constant_expression (parser, name))\n+\t      return error_mark_node;\n+\n+\t    /* Look up the name.  */\n+\t    return finish_fname (token->u.value);\n+\t  }\n \n \tcase RID_VA_ARG:\n \t  {\n@@ -4926,7 +4956,6 @@ cp_parser_unqualified_id (cp_parser* parser,\n \t\t\t  bool optional_p)\n {\n   cp_token *token;\n-  tree id;\n \n   /* Peek at the next token.  */\n   token = cp_lexer_peek_token (parser->lexer);\n@@ -4935,6 +4964,8 @@ cp_parser_unqualified_id (cp_parser* parser,\n     {\n     case CPP_NAME:\n       {\n+\ttree id;\n+\n \t/* We don't know yet whether or not this will be a\n \t   template-id.  */\n \tcp_parser_parse_tentatively (parser);\n@@ -5171,9 +5202,10 @@ cp_parser_unqualified_id (cp_parser* parser,\n       }\n \n     case CPP_KEYWORD:\n-      switch (token->keyword)\n+      if (token->keyword == RID_OPERATOR)\n \t{\n-\tcase RID_OPERATOR:\n+\t  tree id;\n+\n \t  /* This could be a template-id, so we try that first.  */\n \t  cp_parser_parse_tentatively (parser);\n \t  /* Try a template-id.  */\n@@ -5203,19 +5235,6 @@ cp_parser_unqualified_id (cp_parser* parser,\n \t    }\n \n \t  return id;\n-\n-\tcase RID_FUNCTION_NAME:\n-\tcase RID_PRETTY_FUNCTION_NAME:\n-\tcase RID_C99_FUNCTION_NAME:\n-\t  cp_lexer_consume_token (parser->lexer);\n-\t  /* Don't try to declare this while tentatively parsing a function\n-\t     declarator, as cp_make_fname_decl will fail.  */\n-\t  if (current_binding_level->kind != sk_function_parms)\n-\t    finish_fname (token->u.value);\n-\t  return token->u.value;\n-\n-\tdefault:\n-\t  break;\n \t}\n       /* Fall through.  */\n "}, {"sha": "65dd27a87a4b3fae8ca034a924b639b83abf3790", "filename": "gcc/testsuite/g++.dg/cpp0x/decltype-func.C", "status": "removed", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/89631a43369a94bcce9a3a3b3063a75972754a5a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fdecltype-func.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/89631a43369a94bcce9a3a3b3063a75972754a5a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fdecltype-func.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fdecltype-func.C?ref=89631a43369a94bcce9a3a3b3063a75972754a5a", "patch": "@@ -1,6 +0,0 @@\n-// { dg-do compile { target c++11 } }\n-\n-void f() {\n-  typedef decltype(__func__) T;\n-  T x = __func__;\t\t// { dg-error \"array\" }\n-}"}, {"sha": "d6f3eb590ea2728f6cbab0165f001a73c58d6f59", "filename": "gcc/testsuite/g++.dg/other/error34.C", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8c7e9a616ecd878f0d58f19e65fe7a5b55a2b183/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Ferror34.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8c7e9a616ecd878f0d58f19e65fe7a5b55a2b183/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Ferror34.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Ferror34.C?ref=8c7e9a616ecd878f0d58f19e65fe7a5b55a2b183", "patch": "@@ -4,4 +4,3 @@\n \n S () : str(__PRETTY_FUNCTION__) {}\t// { dg-error \"forbids declaration\" \"decl\" }\n // { dg-error \"only constructors\" \"constructor\" { target *-*-* } 5 }\n-// { dg-prune-output \"__PRETTY_FUNCTION__\" }"}, {"sha": "7fc0f82707e2dd6407c7bcd6a967c057a82cf3ff", "filename": "gcc/testsuite/g++.dg/parse/fnname2.C", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8c7e9a616ecd878f0d58f19e65fe7a5b55a2b183/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Ffnname2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8c7e9a616ecd878f0d58f19e65fe7a5b55a2b183/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Ffnname2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Ffnname2.C?ref=8c7e9a616ecd878f0d58f19e65fe7a5b55a2b183", "patch": "@@ -0,0 +1,19 @@\n+// PR c++/64248\n+\n+class A\n+{\n+public:\n+    A(const char* str) {};\n+};\n+\n+class B\n+{\n+public:\n+    B(A a) {};\n+};\n+\n+int main()\n+{\n+   B b(A(__func__));\n+   return 0;\n+}"}]}