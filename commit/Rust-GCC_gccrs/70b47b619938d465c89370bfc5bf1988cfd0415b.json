{"sha": "70b47b619938d465c89370bfc5bf1988cfd0415b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzBiNDdiNjE5OTM4ZDQ2NWM4OTM3MGJmYzViZjE5ODhjZmQwNDE1Yg==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2015-07-28T07:20:33Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2015-07-28T07:20:33Z"}, "message": "fold-const.c (fold_comparison): Remove equality folding of decl addresses ...\n\n2015-07-28  Richard Biener  <rguenther@suse.de>\n\n\t* fold-const.c (fold_comparison): Remove equality folding\n\tof decl addresses ...\n\t* match.pd: ... here and merge with existing pattern.\n\nFrom-SVN: r226299", "tree": {"sha": "22a38c7c40f26f676e0c77c00ac8701f1fda7272", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/22a38c7c40f26f676e0c77c00ac8701f1fda7272"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/70b47b619938d465c89370bfc5bf1988cfd0415b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/70b47b619938d465c89370bfc5bf1988cfd0415b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/70b47b619938d465c89370bfc5bf1988cfd0415b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/70b47b619938d465c89370bfc5bf1988cfd0415b/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "68512012b7c1a49d3851f62e089648c6e1276224", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/68512012b7c1a49d3851f62e089648c6e1276224", "html_url": "https://github.com/Rust-GCC/gccrs/commit/68512012b7c1a49d3851f62e089648c6e1276224"}], "stats": {"total": 51, "additions": 19, "deletions": 32}, "files": [{"sha": "c5ae23bec0dbeda4cd50a244124db82c14135297", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/70b47b619938d465c89370bfc5bf1988cfd0415b/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/70b47b619938d465c89370bfc5bf1988cfd0415b/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=70b47b619938d465c89370bfc5bf1988cfd0415b", "patch": "@@ -1,3 +1,9 @@\n+2015-07-28  Richard Biener  <rguenther@suse.de>\n+\n+\t* fold-const.c (fold_comparison): Remove equality folding\n+\tof decl addresses ...\n+\t* match.pd: ... here and merge with existing pattern.\n+\n 2015-07-28  Thomas Preud'homme  <thomas.preudhomme@arm.com>\n \n \tPR tree-optimization/66828"}, {"sha": "f2bb602cf842fd98238a0fdcc936f3f12bdbcb21", "filename": "gcc/fold-const.c", "status": "modified", "additions": 0, "deletions": 24, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/70b47b619938d465c89370bfc5bf1988cfd0415b/gcc%2Ffold-const.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/70b47b619938d465c89370bfc5bf1988cfd0415b/gcc%2Ffold-const.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffold-const.c?ref=70b47b619938d465c89370bfc5bf1988cfd0415b", "patch": "@@ -8511,30 +8511,6 @@ fold_comparison (location_t loc, enum tree_code code, tree type,\n \t      return fold_build2_loc (loc, code, type, offset0, offset1);\n \t    }\n \t}\n-      /* For non-equal bases we can simplify if they are addresses\n-\t declarations with different addresses.  */\n-      else if (indirect_base0 && indirect_base1\n-\t       /* We know that !operand_equal_p (base0, base1, 0)\n-\t\t  because the if condition was false.  But make\n-\t\t  sure two decls are not the same.  */\n-\t       && base0 != base1\n-\t       && TREE_CODE (arg0) == ADDR_EXPR\n-\t       && TREE_CODE (arg1) == ADDR_EXPR\n-\t       && DECL_P (base0)\n-\t       && DECL_P (base1)\n-\t       /* Watch for aliases.  */\n-\t       && (!decl_in_symtab_p (base0)\n-\t\t   || !decl_in_symtab_p (base1)\n-\t\t   || !symtab_node::get_create (base0)->equal_address_to\n-\t\t\t (symtab_node::get_create (base1))))\n-\t{\n-\t  if (code == EQ_EXPR)\n-\t    return omit_two_operands_loc (loc, type, boolean_false_node,\n-\t\t\t\t      arg0, arg1);\n-\t  else if (code == NE_EXPR)\n-\t    return omit_two_operands_loc (loc, type, boolean_true_node,\n-\t\t\t\t      arg0, arg1);\n-\t}\n       /* For equal offsets we can simplify to a comparison of the\n \t base addresses.  */\n       else if (bitpos0 == bitpos1"}, {"sha": "f431df567644889954cf6fc4502d87e9f6109ae8", "filename": "gcc/match.pd", "status": "modified", "additions": 13, "deletions": 8, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/70b47b619938d465c89370bfc5bf1988cfd0415b/gcc%2Fmatch.pd", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/70b47b619938d465c89370bfc5bf1988cfd0415b/gcc%2Fmatch.pd", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fmatch.pd?ref=70b47b619938d465c89370bfc5bf1988cfd0415b", "patch": "@@ -1808,15 +1808,20 @@ along with GCC; see the file COPYING3.  If not see\n     have access to attributes for externs), then we know the result.  */\n  (simplify\n   (cmp (convert? addr@0) (convert? addr@1))\n-  (if (decl_in_symtab_p (TREE_OPERAND (@0, 0))\n-       && decl_in_symtab_p (TREE_OPERAND (@1, 0)))\n-   (with\n-    {\n-      int equal = symtab_node::get_create (TREE_OPERAND (@0, 0))\n+  (if (DECL_P (TREE_OPERAND (@0, 0))\n+       && DECL_P (TREE_OPERAND (@1, 0)))\n+   (if (decl_in_symtab_p (TREE_OPERAND (@0, 0))\n+\t&& decl_in_symtab_p (TREE_OPERAND (@1, 0)))\n+    (with\n+     {\n+       int equal = symtab_node::get_create (TREE_OPERAND (@0, 0))\n            ->equal_address_to (symtab_node::get_create (TREE_OPERAND (@1, 0)));\n-    }\n-    (if (equal != 2)\n-     { constant_boolean_node (equal ? cmp == EQ_EXPR : cmp != EQ_EXPR, type); }))))\n+     }\n+     (if (equal != 2)\n+      { constant_boolean_node (equal\n+\t\t\t       ? cmp == EQ_EXPR : cmp != EQ_EXPR, type); }))\n+    (if (TREE_OPERAND (@0, 0) != TREE_OPERAND (@1, 0))\n+     { constant_boolean_node (cmp == EQ_EXPR ? false : true, type); }))))\n \n  (simplify\n   (cmp (convert? addr@0) integer_zerop)"}]}