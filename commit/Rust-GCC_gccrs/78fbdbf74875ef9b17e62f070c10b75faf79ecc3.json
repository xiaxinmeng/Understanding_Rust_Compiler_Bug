{"sha": "78fbdbf74875ef9b17e62f070c10b75faf79ecc3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzhmYmRiZjc0ODc1ZWY5YjE3ZTYyZjA3MGMxMGI3NWZhZjc5ZWNjMw==", "commit": {"author": {"name": "David Edelsohn", "email": "edelsohn@gnu.org", "date": "2000-08-14T20:46:16Z"}, "committer": {"name": "David Edelsohn", "email": "dje@gcc.gnu.org", "date": "2000-08-14T20:46:16Z"}, "message": "collect2.c: Remove use of AIX import file.\n\n\t* collect2.c: Remove use of AIX import file.\n\t* longlong.h: Test ARCH_PWR not ARCH_POWER.\n\t* rs6000.c (print_operand, case 'E'): Add else.\n\nFrom-SVN: r35686", "tree": {"sha": "df58dccc50de07ec6ea1c1e5fbc554d32cf40081", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/df58dccc50de07ec6ea1c1e5fbc554d32cf40081"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/78fbdbf74875ef9b17e62f070c10b75faf79ecc3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/78fbdbf74875ef9b17e62f070c10b75faf79ecc3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/78fbdbf74875ef9b17e62f070c10b75faf79ecc3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/78fbdbf74875ef9b17e62f070c10b75faf79ecc3/comments", "author": null, "committer": null, "parents": [{"sha": "9a89adb8c76cc64dab9bf62d1cdc08322f883604", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9a89adb8c76cc64dab9bf62d1cdc08322f883604", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9a89adb8c76cc64dab9bf62d1cdc08322f883604"}], "stats": {"total": 144, "additions": 12, "deletions": 132}, "files": [{"sha": "32e215141bacc0e6fdaf4580945f77307d826739", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/78fbdbf74875ef9b17e62f070c10b75faf79ecc3/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/78fbdbf74875ef9b17e62f070c10b75faf79ecc3/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=78fbdbf74875ef9b17e62f070c10b75faf79ecc3", "patch": "@@ -1,3 +1,11 @@\n+2000-08-14  David Edelsohn  <edelsohn@gnu.org>\n+\n+\t* collect2.c: Remove use of AIX import file.\n+\n+\t* longlong.h: Test ARCH_PWR not ARCH_POWER.\n+\n+\t* rs6000.c (print_operand, case 'E'): Add else.\n+\n 2000-08-14  Richard Henderson  <rth@cygnus.com>\n \n \t* config/ia64/ia64.md (movdi): Delay calling ia64_expand_load_address."}, {"sha": "4180e830bf7d60de9af0b3ea82a24e018284dbe3", "filename": "gcc/collect2.c", "status": "modified", "additions": 1, "deletions": 129, "changes": 130, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/78fbdbf74875ef9b17e62f070c10b75faf79ecc3/gcc%2Fcollect2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/78fbdbf74875ef9b17e62f070c10b75faf79ecc3/gcc%2Fcollect2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcollect2.c?ref=78fbdbf74875ef9b17e62f070c10b75faf79ecc3", "patch": "@@ -202,7 +202,6 @@ static const char *c_file;\t\t/* <xxx>.c for constructor/destructor list.  */\n static const char *o_file;\t\t/* <xxx>.o for constructor/destructor list.  */\n #ifdef COLLECT_EXPORT_LIST\n static const char *export_file;\t        /* <xxx>.x for AIX export list.  */\n-static const char *import_file;\t        /* <xxx>.p for AIX import list.  */\n #endif\n const char *ldout;\t\t\t/* File for ld errors.  */\n static const char *output_file;\t\t/* Output file for ld.  */\n@@ -218,8 +217,6 @@ static struct head constructors;\t/* list of constructors found */\n static struct head destructors;\t\t/* list of destructors found */\n #ifdef COLLECT_EXPORT_LIST\n static struct head exports;\t\t/* list of exported symbols */\n-static struct head imports;\t\t/* list of imported symbols */\n-static struct head undefined;\t\t/* list of undefined symbols */\n #endif\n static struct head frame_tables;\t/* list of frame unwind info tables */\n \n@@ -296,7 +293,6 @@ static void scan_libraries\tPARAMS ((const char *));\n static int is_in_list\t\tPARAMS ((const char *, struct id *));\n static void write_aix_file\tPARAMS ((FILE *, struct id *));\n static char *resolve_lib_name\tPARAMS ((const char *));\n-static int use_import_list\tPARAMS ((const char *));\n static int ignore_library\tPARAMS ((const char *));\n #endif\n static char *extract_string\tPARAMS ((const char **));\n@@ -338,9 +334,6 @@ collect_exit (status)\n #ifdef COLLECT_EXPORT_LIST\n   if (export_file != 0 && export_file[0])\n     maybe_unlink (export_file);\n-\n-  if (import_file != 0 && import_file[0])\n-    maybe_unlink (import_file);\n #endif\n \n   if (ldout != 0 && ldout[0])\n@@ -471,9 +464,6 @@ handler (signo)\n #ifdef COLLECT_EXPORT_LIST\n   if (export_file != 0 && export_file[0])\n     maybe_unlink (export_file);\n-\n-  if (import_file != 0 && import_file[0])\n-    maybe_unlink (import_file);\n #endif\n \n   signal (signo, SIG_DFL);\n@@ -1073,7 +1063,6 @@ main (argc, argv)\n   o_file = make_temp_file (\".o\");\n #ifdef COLLECT_EXPORT_LIST\n   export_file = make_temp_file (\".x\");\n-  import_file = make_temp_file (\".p\");\n #endif\n   ldout = make_temp_file (\".ld\");\n   *c_ptr++ = c_file_name;\n@@ -1165,14 +1154,6 @@ main (argc, argv)\n \t        /* Resolving full library name.  */\n \t\tconst char *s = resolve_lib_name (arg+2);\n \n-\t\t/* If we will use an import list for this library,\n-\t\t   we should exclude it from ld args.  */\n-\t\tif (use_import_list (s))\n-\t\t  {\n-\t\t    ld1--;\n-\t\t    ld2--;\n-\t\t  }\n-\n \t\t/* Saving a full library name.  */\n \t\tadd_to_list (&libs, s);\n \t      }\n@@ -1243,14 +1224,6 @@ main (argc, argv)\n \t  /* libraries can be specified directly, i.e. without -l flag.  */\n        \t  else\n        \t    { \n-\t      /* If we will use an import list for this library,\n-\t\t we should exclude it from ld args.  */\n-\t      if (use_import_list (arg))\n-\t        {\n-\t\t  ld1--;\n-\t\t  ld2--;\n-\t\t}\n-\n \t      /* Saving a full library name.  */\n               add_to_list (&libs, arg);\n             }\n@@ -1281,14 +1254,6 @@ main (argc, argv)\n       scan_prog_file (list->name, PASS_FIRST);\n   }\n \n-  if (frame_tables.number > 0 && shared_obj)\n-    {\n-      /* If there are any frames, then we will need\n-         the frame table handling functions.  */\n-      add_to_list (&imports, \"__register_frame_info_table\");\n-      add_to_list (&imports, \"__deregister_frame_info\");\n-    }\n-\n   if (exports.first)\n     {\n       char *buf = xmalloc (strlen (export_file) + 5);\n@@ -1304,23 +1269,6 @@ main (argc, argv)\n       if (fclose (exportf))\n \tfatal_perror (\"fclose %s\", export_file);\n     }\n-\n-  if (imports.first)\n-    {\n-      char *buf = xmalloc (strlen (import_file) + 5);\n-\n-      sprintf (buf, \"-bI:%s\", import_file);\n-      *ld1++ = buf;\n-      *ld2++ = buf;\n-\n-      importf = fopen (import_file, \"w\");\n-      if (importf == (FILE *) 0)\n-\tfatal_perror (\"%s\", import_file);\n-      fputs (\"#! .\\n\", importf);\n-      write_aix_file (importf, imports.first);\n-      if (fclose (importf))\n-\tfatal_perror (\"fclose %s\", import_file);\n-    }\n #endif\n \n   *c_ptr++ = c_file;\n@@ -1397,8 +1345,6 @@ main (argc, argv)\n       /* But make sure we delete the export file we may have created.  */\n       if (export_file != 0 && export_file[0])\n \tmaybe_unlink (export_file);\n-      if (import_file != 0 && import_file[0])\n-\tmaybe_unlink (import_file);\n #endif\n       maybe_unlink (c_file);\n       maybe_unlink (o_file);\n@@ -1453,7 +1399,6 @@ main (argc, argv)\n \n #ifdef COLLECT_EXPORT_LIST\n       maybe_unlink (export_file);\n-      maybe_unlink (import_file);\n #endif\n       maybe_unlink (c_file);\n       maybe_unlink (o_file);\n@@ -1555,7 +1500,6 @@ main (argc, argv)\n \n #ifdef COLLECT_EXPORT_LIST\n   maybe_unlink (export_file);\n-  maybe_unlink (import_file);\n #endif\n \n   return 0;\n@@ -2747,10 +2691,6 @@ scan_prog_file (prog_name, which_pass)\n   LDFILE *ldptr = NULL;\n   int sym_index, sym_count;\n   int is_shared = 0;\n-#ifdef COLLECT_EXPORT_LIST\n-  /* Should we generate an import list for given prog_name?  */\n-  int import_flag = (which_pass == PASS_OBJ ? 0 : use_import_list (prog_name));\n-#endif\n \n   if (which_pass != PASS_FIRST && which_pass != PASS_OBJ)\n     return;\n@@ -2815,13 +2755,6 @@ scan_prog_file (prog_name, which_pass)\n #ifdef COLLECT_EXPORT_LIST\n \t\t\t  if (which_pass == PASS_OBJ)\n \t\t\t    add_to_list (&exports, name);\n-\t\t\t  /* If this symbol was undefined and we are building\n-\t\t\t     an import list, we should add a symbol to this\n-\t\t\t     list.  */\n-\t\t\t  else\n-\t\t\t    if (import_flag\n-\t\t\t\t&& is_in_list (name, undefined.first))\n-\t\t\t      add_to_list (&imports, name);\n #endif\n \t\t\t  break;\n \n@@ -2831,13 +2764,6 @@ scan_prog_file (prog_name, which_pass)\n #ifdef COLLECT_EXPORT_LIST\n \t\t\t  if (which_pass == PASS_OBJ)\n \t\t\t    add_to_list (&exports, name);\n-\t\t\t  /* If this symbol was undefined and we are building\n-\t\t\t     an import list, we should add a symbol to this\n-\t\t\t     list.  */\n-\t\t\t  else\n-\t\t\t    if (import_flag\n-\t\t\t\t&& is_in_list (name, undefined.first))\n-\t\t\t      add_to_list (&imports, name);\n #endif\n \t\t\t  break;\n \n@@ -2863,33 +2789,17 @@ scan_prog_file (prog_name, which_pass)\n #ifdef COLLECT_EXPORT_LIST\n \t\t\t  if (which_pass == PASS_OBJ)\n \t\t\t    add_to_list (&exports, name);\n-\t\t\t  /* If we are building an import list, we\n-\t\t\t     should add the symbol to the list.  \n-\t\t\t     We'd like to do it only if the symbol\n-\t\t\t     is not defined, but we can't tell\n-\t\t\t     that here (it is only known whether a symbol\n-\t\t\t     is referenced and not defined, but who\n-\t\t\t     would reference an EH table entry?).  */\n-\t\t\t  else\n-\t\t\t    if (import_flag)\n-\t\t\t      add_to_list (&imports, name);\n #endif\n \t\t\t  break;\n \n \t\t\tdefault:\t/* not a constructor or destructor */\n #ifdef COLLECT_EXPORT_LIST\n \t\t\t  /* If we are building a shared object on AIX we need\n-\t\t\t     to explicitly export all global symbols or add\n-\t\t\t     them to import list.  */\n+\t\t\t     to explicitly export all global symbols.  */\n \t\t\t  if (shared_obj) \n \t\t\t    {\n \t\t\t      if (which_pass == PASS_OBJ && (! export_flag))\n \t\t\t\tadd_to_list (&exports, name);\n-\t\t\t      else if (! is_shared\n-\t\t\t\t       && which_pass == PASS_FIRST\n-\t\t\t\t       && import_flag\n-\t\t\t\t       && is_in_list(name, undefined.first))\n-\t\t\t\tadd_to_list (&imports, name);\n \t\t\t    }\n #endif\n \t\t\t  continue;\n@@ -2907,24 +2817,6 @@ scan_prog_file (prog_name, which_pass)\n \t\t\t\t symbol.iss, (long) symbol.value, symbol.index, name);\n #endif\n \t\t    }\n-#ifdef COLLECT_EXPORT_LIST\n-\t\t  /* If we are building a shared object we should collect\n-\t\t     information about undefined symbols for later\n-\t\t     import list generation.  */\n-\t\t  else if (shared_obj && GCC_UNDEF_SYMBOL (symbol))\n-\t\t    {\n-\t\t      char *name;\n-\n-\t\t      if ((name = ldgetname (ldptr, &symbol)) == NULL)\n-\t\t\tcontinue;\t\t/* should never happen */\n-\n-\t\t      /* All AIX function names have a duplicate entry\n-\t\t\t beginning with a dot.  */\n-\t\t      if (*name == '.')\n-\t\t\t++name;\n-\t\t      add_to_list (&undefined, name);\n-\t\t    }\n-#endif\n \t\t}\n \t    }\n #ifdef COLLECT_EXPORT_LIST\n@@ -2954,25 +2846,6 @@ scan_prog_file (prog_name, which_pass)\n \n \n #ifdef COLLECT_EXPORT_LIST\n-\n-/* This new function is used to decide whether we should\n-   generate import list for an object or to use it directly.  */\n-static int\n-use_import_list (prog_name)\n-     const char *prog_name;\n-{\n-  char *p;\n-\n-  /* If we do not build a shared object then import list should not be used.  */\n-  if (! shared_obj) return 0;\n-\n-  /* Currently we check only for libgcc, but this can be changed in future.  */\n-  p = strstr (prog_name, \"libgcc.a\");\n-  if (p != 0 && (strlen (p) == sizeof (\"libgcc.a\") - 1))\n-    return 1;\n-  return 0;\n-}\n-\n /* Given a library name without \"lib\" prefix, this function\n    returns a full library name including a path.  */\n static char *\n@@ -3044,7 +2917,6 @@ ignore_library (name)\n     if (! strcmp (name, *p)) return 1;\n   return 0;\n }\n-\n #endif\n \n #endif /* OBJECT_FORMAT_COFF */"}, {"sha": "d4b4889875a36d51e01ddf7fbd5c9e1e01185967", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/78fbdbf74875ef9b17e62f070c10b75faf79ecc3/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/78fbdbf74875ef9b17e62f070c10b75faf79ecc3/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=78fbdbf74875ef9b17e62f070c10b75faf79ecc3", "patch": "@@ -3757,8 +3757,8 @@ print_operand (file, x, code)\n       /* X is a CR register.  Print the number of the third bit of the CR */\n       if (GET_CODE (x) != REG || ! CR_REGNO_P (REGNO (x)))\n \toutput_operand_lossage (\"invalid %%E value\");\n-\n-      fprintf(file, \"%d\", 4 * (REGNO (x) - CR0_REGNO) + 3);\n+      else\n+\tfprintf (file, \"%d\", 4 * (REGNO (x) - CR0_REGNO) + 3);\n       return;\n \n     case 'f':"}, {"sha": "25b952c081cbc29a85949043e2f29a7b73c1ff2e", "filename": "gcc/longlong.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/78fbdbf74875ef9b17e62f070c10b75faf79ecc3/gcc%2Flonglong.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/78fbdbf74875ef9b17e62f070c10b75faf79ecc3/gcc%2Flonglong.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flonglong.h?ref=78fbdbf74875ef9b17e62f070c10b75faf79ecc3", "patch": "@@ -865,7 +865,7 @@ UDItype __umulsidi3 (USItype, USItype);\n   } while (0)\n #define SMUL_TIME 14\n #define UDIV_TIME 120\n-#elif defined (_ARCH_POWER)\n+#elif defined (_ARCH_PWR)\n #define umul_ppmm(xh, xl, m0, m1) \\\n   do {\t\t\t\t\t\t\t\t\t\\\n     USItype __m0 = (m0), __m1 = (m1);\t\t\t\t\t\\"}]}