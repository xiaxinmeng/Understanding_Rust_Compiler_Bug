{"sha": "9dd11dcb09121142942a663d687ad46dfd85d54c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWRkMTFkY2IwOTEyMTE0Mjk0MmE2NjNkNjg3YWQ0NmRmZDg1ZDU0Yw==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1996-04-16T20:02:20Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1996-04-16T20:02:20Z"}, "message": "(make_field_assignment): Allow XOR in final case.\n\nFrom-SVN: r11820", "tree": {"sha": "ad6e0de473c00f31d87f147cbece0d92e62a126e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ad6e0de473c00f31d87f147cbece0d92e62a126e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9dd11dcb09121142942a663d687ad46dfd85d54c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9dd11dcb09121142942a663d687ad46dfd85d54c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9dd11dcb09121142942a663d687ad46dfd85d54c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9dd11dcb09121142942a663d687ad46dfd85d54c/comments", "author": null, "committer": null, "parents": [{"sha": "7f9ca37e6a1c64e9b05430825df2c9d90cbe3430", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7f9ca37e6a1c64e9b05430825df2c9d90cbe3430", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7f9ca37e6a1c64e9b05430825df2c9d90cbe3430"}], "stats": {"total": 6, "additions": 3, "deletions": 3}, "files": [{"sha": "05031d2a824a00a0a925552ef904b7ed81c6c515", "filename": "gcc/combine.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9dd11dcb09121142942a663d687ad46dfd85d54c/gcc%2Fcombine.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9dd11dcb09121142942a663d687ad46dfd85d54c/gcc%2Fcombine.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcombine.c?ref=9dd11dcb09121142942a663d687ad46dfd85d54c", "patch": "@@ -6602,7 +6602,7 @@ make_field_assignment (x)\n       return x;\n     }\n \n-  /* If SRC is (ior (ashift (const_int 1) POS DEST)), this is a set of a\n+  /* If SRC is (ior (ashift (const_int 1) POS) DEST), this is a set of a\n      one-bit field.  */\n   else if (GET_CODE (src) == IOR && GET_CODE (XEXP (src, 0)) == ASHIFT\n \t   && XEXP (XEXP (src, 0), 0) == const1_rtx\n@@ -6616,14 +6616,14 @@ make_field_assignment (x)\n     }\n \n   /* The other case we handle is assignments into a constant-position\n-     field.  They look like (ior (and DEST C1) OTHER).  If C1 represents\n+     field.  They look like (ior/xor (and DEST C1) OTHER).  If C1 represents\n      a mask that has all one bits except for a group of zero bits and\n      OTHER is known to have zeros where C1 has ones, this is such an\n      assignment.  Compute the position and length from C1.  Shift OTHER\n      to the appropriate position, force it to the required mode, and\n      make the extraction.  Check for the AND in both operands.  */\n \n-  if (GET_CODE (src) != IOR)\n+  if (GET_CODE (src) != IOR && GET_CODE (src) != XOR)\n     return x;\n \n   rhs = expand_compound_operation (XEXP (src, 0));"}]}