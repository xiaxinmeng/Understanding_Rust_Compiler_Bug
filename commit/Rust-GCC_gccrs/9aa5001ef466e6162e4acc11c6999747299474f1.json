{"sha": "9aa5001ef466e6162e4acc11c6999747299474f1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWFhNTAwMWVmNDY2ZTYxNjJlNGFjYzExYzY5OTk3NDcyOTk0NzRmMQ==", "commit": {"author": {"name": "Roger Sayle", "email": "roger@nextmovesoftware.com", "date": "2021-07-13T13:01:41Z"}, "committer": {"name": "Roger Sayle", "email": "roger@nextmovesoftware.com", "date": "2021-07-13T13:01:41Z"}, "message": "Make gimple_could_trap_p const-safe.\n\nAllow gimple_could_trap_p (which previously took a non-const gimple)\nto be called from functions that take a const gimple (such as\ngimple_has_side_effects), and update its prototypes.  Pre-approved\nas obvious.\n\n2021-07-13  Roger Sayle  <roger@nextmovesoftware.com>\n\t    Richard Biener  <rguenther@suse.de>\n\ngcc/ChangeLog\n\t* gimple.c (gimple_could_trap_p_1):  Make S argument a\n\t\"const gimple*\".  Preserve constness in call to\n\tgimple_asm_volatile_p.\n\t(gimple_could_trap_p): Make S argument a \"const gimple*\".\n\t* gimple.h (gimple_could_trap_p_1, gimple_could_trap_p):\n\tUpdate function prototypes.", "tree": {"sha": "bfa73ec30e62f4866c485b3646406182ea286ccc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/bfa73ec30e62f4866c485b3646406182ea286ccc"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9aa5001ef466e6162e4acc11c6999747299474f1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9aa5001ef466e6162e4acc11c6999747299474f1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9aa5001ef466e6162e4acc11c6999747299474f1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9aa5001ef466e6162e4acc11c6999747299474f1/comments", "author": {"login": "rogersayle", "id": 13512313, "node_id": "MDQ6VXNlcjEzNTEyMzEz", "avatar_url": "https://avatars.githubusercontent.com/u/13512313?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rogersayle", "html_url": "https://github.com/rogersayle", "followers_url": "https://api.github.com/users/rogersayle/followers", "following_url": "https://api.github.com/users/rogersayle/following{/other_user}", "gists_url": "https://api.github.com/users/rogersayle/gists{/gist_id}", "starred_url": "https://api.github.com/users/rogersayle/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rogersayle/subscriptions", "organizations_url": "https://api.github.com/users/rogersayle/orgs", "repos_url": "https://api.github.com/users/rogersayle/repos", "events_url": "https://api.github.com/users/rogersayle/events{/privacy}", "received_events_url": "https://api.github.com/users/rogersayle/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rogersayle", "id": 13512313, "node_id": "MDQ6VXNlcjEzNTEyMzEz", "avatar_url": "https://avatars.githubusercontent.com/u/13512313?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rogersayle", "html_url": "https://github.com/rogersayle", "followers_url": "https://api.github.com/users/rogersayle/followers", "following_url": "https://api.github.com/users/rogersayle/following{/other_user}", "gists_url": "https://api.github.com/users/rogersayle/gists{/gist_id}", "starred_url": "https://api.github.com/users/rogersayle/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rogersayle/subscriptions", "organizations_url": "https://api.github.com/users/rogersayle/orgs", "repos_url": "https://api.github.com/users/rogersayle/repos", "events_url": "https://api.github.com/users/rogersayle/events{/privacy}", "received_events_url": "https://api.github.com/users/rogersayle/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bd1eb556b910fd4853ea83291e495d40adbcdf81", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bd1eb556b910fd4853ea83291e495d40adbcdf81", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bd1eb556b910fd4853ea83291e495d40adbcdf81"}], "stats": {"total": 10, "additions": 5, "deletions": 5}, "files": [{"sha": "0690f94971ff1bb53ad3e497e179bd83567915f9", "filename": "gcc/gimple.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9aa5001ef466e6162e4acc11c6999747299474f1/gcc%2Fgimple.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9aa5001ef466e6162e4acc11c6999747299474f1/gcc%2Fgimple.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple.c?ref=9aa5001ef466e6162e4acc11c6999747299474f1", "patch": "@@ -2129,7 +2129,7 @@ gimple_has_side_effects (const gimple *s)\n    S is a GIMPLE_ASSIGN, the LHS of the assignment is also checked.  */\n \n bool\n-gimple_could_trap_p_1 (gimple *s, bool include_mem, bool include_stores)\n+gimple_could_trap_p_1 (const gimple *s, bool include_mem, bool include_stores)\n {\n   tree t, div = NULL_TREE;\n   enum tree_code op;\n@@ -2146,7 +2146,7 @@ gimple_could_trap_p_1 (gimple *s, bool include_mem, bool include_stores)\n   switch (gimple_code (s))\n     {\n     case GIMPLE_ASM:\n-      return gimple_asm_volatile_p (as_a <gasm *> (s));\n+      return gimple_asm_volatile_p (as_a <const gasm *> (s));\n \n     case GIMPLE_CALL:\n       if (gimple_call_internal_p (s))\n@@ -2194,7 +2194,7 @@ gimple_could_trap_p_1 (gimple *s, bool include_mem, bool include_stores)\n /* Return true if statement S can trap.  */\n \n bool\n-gimple_could_trap_p (gimple *s)\n+gimple_could_trap_p (const gimple *s)\n {\n   return gimple_could_trap_p_1 (s, true, true);\n }"}, {"sha": "acf572b81be64153374bb14539fc3a1a129f13b5", "filename": "gcc/gimple.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9aa5001ef466e6162e4acc11c6999747299474f1/gcc%2Fgimple.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9aa5001ef466e6162e4acc11c6999747299474f1/gcc%2Fgimple.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple.h?ref=9aa5001ef466e6162e4acc11c6999747299474f1", "patch": "@@ -1601,8 +1601,8 @@ void gimple_set_lhs (gimple *, tree);\n gimple *gimple_copy (gimple *);\n void gimple_move_vops (gimple *, gimple *);\n bool gimple_has_side_effects (const gimple *);\n-bool gimple_could_trap_p_1 (gimple *, bool, bool);\n-bool gimple_could_trap_p (gimple *);\n+bool gimple_could_trap_p_1 (const gimple *, bool, bool);\n+bool gimple_could_trap_p (const gimple *);\n bool gimple_assign_rhs_could_trap_p (gimple *);\n extern void dump_gimple_statistics (void);\n unsigned get_gimple_rhs_num_ops (enum tree_code);"}]}