{"sha": "9276875d7bdfd6b4fd55ef099c0caa55d6e01432", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTI3Njg3NWQ3YmRmZDZiNGZkNTVlZjA5OWMwY2FhNTVkNmUwMTQzMg==", "commit": {"author": {"name": "Pascal Obry", "email": "obry@adacore.com", "date": "2012-11-06T10:03:08Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2012-11-06T10:03:08Z"}, "message": "xoscons.adb, [...]: Add support for post-processing.\n\n2012-11-06  Pascal Obry  <obry@adacore.com>\n\n\t* xoscons.adb, xutil.adb, xutil.ads: Add support for post-processing.\n\nFrom-SVN: r193221", "tree": {"sha": "44d373bb7de0cf343f4dde50a6ed8e6a4e3e8fc1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/44d373bb7de0cf343f4dde50a6ed8e6a4e3e8fc1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9276875d7bdfd6b4fd55ef099c0caa55d6e01432", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9276875d7bdfd6b4fd55ef099c0caa55d6e01432", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9276875d7bdfd6b4fd55ef099c0caa55d6e01432", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9276875d7bdfd6b4fd55ef099c0caa55d6e01432/comments", "author": {"login": "TurboGit", "id": 467069, "node_id": "MDQ6VXNlcjQ2NzA2OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/467069?v=4", "gravatar_id": "", "url": "https://api.github.com/users/TurboGit", "html_url": "https://github.com/TurboGit", "followers_url": "https://api.github.com/users/TurboGit/followers", "following_url": "https://api.github.com/users/TurboGit/following{/other_user}", "gists_url": "https://api.github.com/users/TurboGit/gists{/gist_id}", "starred_url": "https://api.github.com/users/TurboGit/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/TurboGit/subscriptions", "organizations_url": "https://api.github.com/users/TurboGit/orgs", "repos_url": "https://api.github.com/users/TurboGit/repos", "events_url": "https://api.github.com/users/TurboGit/events{/privacy}", "received_events_url": "https://api.github.com/users/TurboGit/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "fb174746b279e870f087a666e5e1ea8ff8c886f7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fb174746b279e870f087a666e5e1ea8ff8c886f7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fb174746b279e870f087a666e5e1ea8ff8c886f7"}], "stats": {"total": 269, "additions": 206, "deletions": 63}, "files": [{"sha": "ea56dec772c53641283521d50a5809e84ad58f14", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9276875d7bdfd6b4fd55ef099c0caa55d6e01432/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9276875d7bdfd6b4fd55ef099c0caa55d6e01432/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=9276875d7bdfd6b4fd55ef099c0caa55d6e01432", "patch": "@@ -1,3 +1,7 @@\n+2012-11-06  Pascal Obry  <obry@adacore.com>\n+\n+\t* xoscons.adb, xutil.adb, xutil.ads: Add support for post-processing.\n+\n 2012-11-06  Yannick Moy  <moy@adacore.com>\n \n \t* s-bignum.adb (Div_Rem): Fix another bug in step D3."}, {"sha": "d0f068e7f1218ac1fc03e2d8be8efba8b08433d2", "filename": "gcc/ada/xoscons.adb", "status": "modified", "additions": 199, "deletions": 60, "changes": 259, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9276875d7bdfd6b4fd55ef099c0caa55d6e01432/gcc%2Fada%2Fxoscons.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9276875d7bdfd6b4fd55ef099c0caa55d6e01432/gcc%2Fada%2Fxoscons.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fxoscons.adb?ref=9276875d7bdfd6b4fd55ef099c0caa55d6e01432", "patch": "@@ -33,26 +33,29 @@\n \n --  The generated files are UNIT_NAME.ads and UNIT_NAME.h\n \n-with Ada.Characters.Handling; use Ada.Characters.Handling;\n-with Ada.Command_Line;        use Ada.Command_Line;\n-with Ada.Exceptions;          use Ada.Exceptions;\n-with Ada.Strings.Fixed;       use Ada.Strings.Fixed;\n-with Ada.Text_IO;             use Ada.Text_IO;\n-with Ada.Streams.Stream_IO;   use Ada.Streams.Stream_IO;\n+with Ada.Characters.Handling;    use Ada.Characters.Handling;\n+with Ada.Command_Line;           use Ada.Command_Line;\n+with Ada.Exceptions;             use Ada.Exceptions;\n+with Ada.Streams.Stream_IO;      use Ada.Streams.Stream_IO;\n+with Ada.Strings.Fixed;          use Ada.Strings.Fixed;\n+with Ada.Strings.Maps;           use Ada.Strings.Maps;\n+with Ada.Strings.Maps.Constants; use Ada.Strings.Maps.Constants;\n+with Ada.Text_IO;                use Ada.Text_IO;\n \n pragma Warnings (Off);\n --  System.Unsigned_Types is an internal GNAT unit\n with System.Unsigned_Types;   use System.Unsigned_Types;\n pragma Warnings (On);\n \n+with GNAT.String_Split; use GNAT.String_Split;\n with GNAT.Table;\n \n with XUtil; use XUtil;\n \n procedure XOSCons is\n \n-   use ASCII;\n    use Ada.Strings;\n+   use ASCII;\n \n    Unit_Name : constant String := Argument (1);\n    Tmpl_Name : constant String := Unit_Name & \"-tmplt\";\n@@ -73,6 +76,9 @@ procedure XOSCons is\n       Abs_Value : Long_Unsigned := 0;\n    end record;\n \n+   function \">\" (V1, V2 : Int_Value_Type) return Boolean;\n+   function \"<\" (V1, V2 : Int_Value_Type) return Boolean;\n+\n    type Asm_Info_Kind is\n      (CND,     --  Named number (decimal)\n       CNU,     --  Named number (decimal, unsigned)\n@@ -129,6 +135,10 @@ procedure XOSCons is\n \n    type Language is (Lang_Ada, Lang_C);\n \n+   function Parse_Int (S : String; K : Asm_Int_Kind) return Int_Value_Type;\n+   --  Parse a decimal number, preceded by an optional '$' or '#' character,\n+   --  and return its value.\n+\n    procedure Output_Info\n      (Lang       : Language;\n       OFile      : Sfile;\n@@ -145,6 +155,30 @@ procedure XOSCons is\n    --  If Count is positive, return a string of Count spaces, else return an\n    --  empty string.\n \n+   ---------\n+   -- \">\" --\n+   ---------\n+\n+   function \">\" (V1, V2 : Int_Value_Type) return Boolean is\n+      P1 : Boolean renames V1.Positive;\n+      P2 : Boolean renames V2.Positive;\n+      A1 : Long_Unsigned renames V1.Abs_Value;\n+      A2 : Long_Unsigned renames V2.Abs_Value;\n+   begin\n+      return (P1 and then not P2)\n+        or else (P1 and then P2 and then A1 > A2)\n+        or else (not P1 and then not P2 and then A1 < A2);\n+   end \">\";\n+\n+   ---------\n+   -- \"<\" --\n+   ---------\n+\n+   function \"<\" (V1, V2 : Int_Value_Type) return Boolean is\n+   begin\n+      return not (V1 > V2) and then not (V1 = V2);\n+   end \"<\";\n+\n    ----------------------------\n    -- Contains_Template_Name --\n    ----------------------------\n@@ -283,10 +317,6 @@ procedure XOSCons is\n       procedure Find_Colon (Index : in out Integer);\n       --  Increment Index until the next colon in Line\n \n-      function Parse_Int (S : String; K : Asm_Int_Kind) return Int_Value_Type;\n-      --  Parse a decimal number, preceded by an optional '$' or '#' character,\n-      --  and return its value.\n-\n       -----------------\n       -- Field_Alloc --\n       -----------------\n@@ -308,53 +338,6 @@ procedure XOSCons is\n          end loop;\n       end Find_Colon;\n \n-      ---------------\n-      -- Parse_Int --\n-      ---------------\n-\n-      function Parse_Int\n-        (S : String;\n-         K : Asm_Int_Kind) return Int_Value_Type\n-      is\n-         First  : Integer := S'First;\n-         Result : Int_Value_Type;\n-\n-      begin\n-         --  On some platforms, immediate integer values are prefixed with\n-         --  a $ or # character in assembly output.\n-\n-         if S (First) = '$' or else S (First) = '#' then\n-            First := First + 1;\n-         end if;\n-\n-         if S (First) = '-' then\n-            Result.Positive := False;\n-            First := First + 1;\n-         else\n-            Result.Positive := True;\n-         end if;\n-\n-         Result.Abs_Value := Long_Unsigned'Value (S (First .. S'Last));\n-\n-         if not Result.Positive and then K = CNU then\n-\n-            --  Negative value, but unsigned expected: take 2's complement\n-            --  reciprocical value.\n-\n-            Result.Abs_Value := ((not Result.Abs_Value) + 1)\n-                                  and\n-                                (Shift_Left (1, Size_Of_Unsigned_Int) - 1);\n-            Result.Positive  := True;\n-         end if;\n-\n-         return Result;\n-\n-      exception\n-         when others =>\n-            Put_Line (Standard_Error, \"can't parse decimal value: \" & S);\n-            raise;\n-      end Parse_Int;\n-\n    --  Start of processing for Parse_Asm_Line\n \n    begin\n@@ -448,6 +431,153 @@ procedure XOSCons is\n            (Standard_Error, \"exception raised: \" & Exception_Information (E));\n    end Parse_Asm_Line;\n \n+   ----------------\n+   -- Parse_Cond --\n+   ----------------\n+\n+   procedure Parse_Cond\n+     (If_Line            : String;\n+      Cond               : Boolean;\n+      Tmpl_File          : Ada.Text_IO.File_Type;\n+      Ada_Ofile, C_Ofile : Sfile;\n+      Current_Line       : in out Integer)\n+   is\n+\n+      function Get_Value (Name : String) return Int_Value_Type;\n+      --  Returns the value of the variable Name\n+\n+      ---------------\n+      -- Get_Value --\n+      ---------------\n+\n+      function Get_Value (Name : String) return Int_Value_Type is\n+      begin\n+         if Is_Subset (To_Set (Name), Decimal_Digit_Set) then\n+            return Parse_Int (Name, CND);\n+\n+         else\n+            for K in 1 .. Asm_Infos.Last loop\n+               if Asm_Infos.Table (K).Constant_Name /= null then\n+                  if Name = Asm_Infos.Table (K).Constant_Name.all then\n+                     return Asm_Infos.Table (K).Int_Value;\n+                  end if;\n+               end if;\n+            end loop;\n+\n+            --  Not found returns 0\n+            return (True, 0);\n+         end if;\n+      end Get_Value;\n+\n+      Sline  : Slice_Set;\n+\n+      Line   : String (1 .. 256);\n+      Last   : Integer;\n+\n+      Value1 : Int_Value_Type;\n+      Value2 : Int_Value_Type;\n+      Res    : Boolean;\n+\n+   --  Start of processing for Parse_Cond\n+\n+   begin\n+      Create (Sline, If_Line, \" \");\n+\n+      if Slice_Count (Sline) /= 4 then\n+         Put_Line (Standard_Error, \"can't parse \" & If_Line);\n+      end if;\n+\n+      Value1 := Get_Value (Slice (Sline, 2));\n+      Value2 := Get_Value (Slice (Sline, 4));\n+\n+      if Slice (Sline, 3) = \">\" then\n+         Res := Cond and (Value1 > Value2);\n+\n+      elsif Slice (Sline, 3) = \"<\" then\n+         Res := Cond and (Value1 < Value2);\n+\n+      elsif Slice (Sline, 3) = \"=\" then\n+         Res := Cond and (Value1 = Value2);\n+\n+      elsif Slice (Sline, 3) = \"/=\" then\n+         Res := Cond and (Value1 /= Value2);\n+\n+      else\n+         --  No other operator can be used\n+\n+         Put_Line (Standard_Error, \"unknown operator in \" & If_Line);\n+         Res := False;\n+      end if;\n+\n+      Current_Line := Current_Line + 1;\n+\n+      loop\n+         Get_Line (Tmpl_File, Line, Last);\n+         Current_Line := Current_Line + 1;\n+         exit when Line (1 .. Last) = \"@END_IF\";\n+\n+         if Line (1 .. 4) = \"@IF \" then\n+            Parse_Cond\n+              (Line (1 .. Last), Res,\n+               Tmpl_File, Ada_Ofile, C_Ofile, Current_Line);\n+\n+         elsif Line (1 .. Last) = \"@ELSE\" then\n+            Res := Cond and not Res;\n+\n+         elsif Res then\n+            Put_Line (Ada_OFile, Line (1 .. Last));\n+            Put_Line (C_OFile, Line (1 .. Last));\n+         end if;\n+      end loop;\n+   end Parse_Cond;\n+\n+   ---------------\n+   -- Parse_Int --\n+   ---------------\n+\n+   function Parse_Int\n+     (S : String;\n+      K : Asm_Int_Kind) return Int_Value_Type\n+   is\n+      First  : Integer := S'First;\n+      Result : Int_Value_Type;\n+\n+   begin\n+      --  On some platforms, immediate integer values are prefixed with\n+      --  a $ or # character in assembly output.\n+\n+      if S (First) = '$' or else S (First) = '#' then\n+         First := First + 1;\n+      end if;\n+\n+      if S (First) = '-' then\n+         Result.Positive := False;\n+         First := First + 1;\n+      else\n+         Result.Positive := True;\n+      end if;\n+\n+      Result.Abs_Value := Long_Unsigned'Value (S (First .. S'Last));\n+\n+      if not Result.Positive and then K = CNU then\n+\n+         --  Negative value, but unsigned expected: take 2's complement\n+         --  reciprocical value.\n+\n+         Result.Abs_Value := ((not Result.Abs_Value) + 1)\n+                               and\n+                             (Shift_Left (1, Size_Of_Unsigned_Int) - 1);\n+         Result.Positive  := True;\n+      end if;\n+\n+      return Result;\n+\n+   exception\n+      when others =>\n+         Put_Line (Standard_Error, \"can't parse decimal value: \" & S);\n+         raise;\n+   end Parse_Int;\n+\n    ------------\n    -- Spaces --\n    ------------\n@@ -540,6 +670,12 @@ begin\n             if Line (1 .. Last) = \"*/\" then\n                Put_Line (C_OFile, Line (1 .. Last));\n                In_Comment := False;\n+\n+            elsif Last > 4 and then Line (1 .. 4) = \"@IF \" then\n+               Parse_Cond\n+                 (Line (1 .. Last), True,\n+                  Tmpl_File, Ada_Ofile, C_Ofile, Current_Line);\n+\n             else\n                Put_Line (Ada_OFile, Line (1 .. Last));\n                Put_Line (C_OFile, Line (1 .. Last));\n@@ -550,8 +686,11 @@ begin\n             In_Comment := True;\n \n          elsif Asm_Infos.Table (Current_Info).Line_Number = Current_Line then\n-            Output_Info (Lang_Ada, Ada_OFile, Current_Info);\n-            Output_Info (Lang_C,   C_OFile,   Current_Info);\n+            if Fixed.Index (Line, \"/*NOGEN*/\") = 0 then\n+               Output_Info (Lang_Ada, Ada_OFile, Current_Info);\n+               Output_Info (Lang_C,   C_OFile,   Current_Info);\n+            end if;\n+\n             Current_Info := Current_Info + 1;\n          end if;\n "}, {"sha": "cdf0b05cc285771c35991213a1e57490dc7e8bb1", "filename": "gcc/ada/xutil.adb", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9276875d7bdfd6b4fd55ef099c0caa55d6e01432/gcc%2Fada%2Fxutil.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9276875d7bdfd6b4fd55ef099c0caa55d6e01432/gcc%2Fada%2Fxutil.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fxutil.adb?ref=9276875d7bdfd6b4fd55ef099c0caa55d6e01432", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1992-2008, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2012, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -25,8 +25,8 @@\n \n package body XUtil is\n \n-   use Ada.Strings.Unbounded;\n    use Ada.Streams.Stream_IO;\n+   use Ada.Strings.Unbounded;\n \n    --------------\n    -- New_Line --"}, {"sha": "e8f67a9fc6249f91421779a75b873f9b38cd1e0d", "filename": "gcc/ada/xutil.ads", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9276875d7bdfd6b4fd55ef099c0caa55d6e01432/gcc%2Fada%2Fxutil.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9276875d7bdfd6b4fd55ef099c0caa55d6e01432/gcc%2Fada%2Fxutil.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fxutil.ads?ref=9276875d7bdfd6b4fd55ef099c0caa55d6e01432", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 S p e c                                  --\n --                                                                          --\n---          Copyright (C) 1992-2008, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2012, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --"}]}