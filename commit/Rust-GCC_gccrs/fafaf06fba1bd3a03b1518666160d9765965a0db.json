{"sha": "fafaf06fba1bd3a03b1518666160d9765965a0db", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmFmYWYwNmZiYTFiZDNhMDNiMTUxODY2NjE2MGQ5NzY1OTY1YTBkYg==", "commit": {"author": {"name": "Richard Sandiford", "email": "richard.sandiford@linaro.org", "date": "2011-09-14T12:17:03Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2011-09-14T12:17:03Z"}, "message": "simplify-rtx.c (simplify_subreg): Check that the inner mode is a scalar integer before applying integer-only...\n\ngcc/\n\t* simplify-rtx.c (simplify_subreg): Check that the inner mode is\n\ta scalar integer before applying integer-only optimisations to\n\tinner arithmetic.\n\nFrom-SVN: r178848", "tree": {"sha": "2d7c617c46739ec63501c878ce8a8dd6c1a0d04f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2d7c617c46739ec63501c878ce8a8dd6c1a0d04f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/fafaf06fba1bd3a03b1518666160d9765965a0db", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fafaf06fba1bd3a03b1518666160d9765965a0db", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fafaf06fba1bd3a03b1518666160d9765965a0db", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fafaf06fba1bd3a03b1518666160d9765965a0db/comments", "author": null, "committer": null, "parents": [{"sha": "35511751930bbd5418e306877c27306c167aec96", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/35511751930bbd5418e306877c27306c167aec96", "html_url": "https://github.com/Rust-GCC/gccrs/commit/35511751930bbd5418e306877c27306c167aec96"}], "stats": {"total": 13, "additions": 12, "deletions": 1}, "files": [{"sha": "941abc4cdaa0f52f7d257fddc83dc1cf609ca585", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fafaf06fba1bd3a03b1518666160d9765965a0db/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fafaf06fba1bd3a03b1518666160d9765965a0db/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=fafaf06fba1bd3a03b1518666160d9765965a0db", "patch": "@@ -1,3 +1,9 @@\n+2011-09-14  Richard Sandiford  <richard.sandiford@linaro.org>\n+\n+\t* simplify-rtx.c (simplify_subreg): Check that the inner mode is\n+\ta scalar integer before applying integer-only optimisations to\n+\tinner arithmetic.\n+\n 2011-09-14  Bernd Schmidt  <bernds@codesourcery.com>\n \n \t* config/mips/mips.c (mips_expand_epilogue): Generate a"}, {"sha": "d81e3a6282c7dbc8618145f39db6302e70b66dc3", "filename": "gcc/simplify-rtx.c", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fafaf06fba1bd3a03b1518666160d9765965a0db/gcc%2Fsimplify-rtx.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fafaf06fba1bd3a03b1518666160d9765965a0db/gcc%2Fsimplify-rtx.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsimplify-rtx.c?ref=fafaf06fba1bd3a03b1518666160d9765965a0db", "patch": "@@ -5611,6 +5611,7 @@ simplify_subreg (enum machine_mode outermode, rtx op,\n   /* Optimize SUBREG truncations of zero and sign extended values.  */\n   if ((GET_CODE (op) == ZERO_EXTEND\n        || GET_CODE (op) == SIGN_EXTEND)\n+      && SCALAR_INT_MODE_P (innermode)\n       && GET_MODE_PRECISION (outermode) < GET_MODE_PRECISION (innermode))\n     {\n       unsigned int bitpos = subreg_lsb_1 (outermode, innermode, byte);\n@@ -5649,6 +5650,7 @@ simplify_subreg (enum machine_mode outermode, rtx op,\n   if ((GET_CODE (op) == LSHIFTRT\n        || GET_CODE (op) == ASHIFTRT)\n       && SCALAR_INT_MODE_P (outermode)\n+      && SCALAR_INT_MODE_P (innermode)\n       /* Ensure that OUTERMODE is at least twice as wide as the INNERMODE\n \t to avoid the possibility that an outer LSHIFTRT shifts by more\n \t than the sign extension's sign_bit_copies and introduces zeros\n@@ -5668,6 +5670,7 @@ simplify_subreg (enum machine_mode outermode, rtx op,\n   if ((GET_CODE (op) == LSHIFTRT\n        || GET_CODE (op) == ASHIFTRT)\n       && SCALAR_INT_MODE_P (outermode)\n+      && SCALAR_INT_MODE_P (innermode)\n       && GET_MODE_PRECISION (outermode) < GET_MODE_PRECISION (innermode)\n       && CONST_INT_P (XEXP (op, 1))\n       && GET_CODE (XEXP (op, 0)) == ZERO_EXTEND\n@@ -5682,6 +5685,7 @@ simplify_subreg (enum machine_mode outermode, rtx op,\n      the outer subreg is effectively a truncation to the original mode.  */\n   if (GET_CODE (op) == ASHIFT\n       && SCALAR_INT_MODE_P (outermode)\n+      && SCALAR_INT_MODE_P (innermode)\n       && GET_MODE_PRECISION (outermode) < GET_MODE_PRECISION (innermode)\n       && CONST_INT_P (XEXP (op, 1))\n       && (GET_CODE (XEXP (op, 0)) == ZERO_EXTEND\n@@ -5695,7 +5699,7 @@ simplify_subreg (enum machine_mode outermode, rtx op,\n   /* Recognize a word extraction from a multi-word subreg.  */\n   if ((GET_CODE (op) == LSHIFTRT\n        || GET_CODE (op) == ASHIFTRT)\n-      && SCALAR_INT_MODE_P (outermode)\n+      && SCALAR_INT_MODE_P (innermode)\n       && GET_MODE_PRECISION (outermode) >= BITS_PER_WORD\n       && GET_MODE_PRECISION (innermode) >= (2 * GET_MODE_PRECISION (outermode))\n       && CONST_INT_P (XEXP (op, 1))\n@@ -5717,6 +5721,7 @@ simplify_subreg (enum machine_mode outermode, rtx op,\n \n   if ((GET_CODE (op) == LSHIFTRT\n        || GET_CODE (op) == ASHIFTRT)\n+      && SCALAR_INT_MODE_P (innermode)\n       && MEM_P (XEXP (op, 0))\n       && CONST_INT_P (XEXP (op, 1))\n       && GET_MODE_SIZE (outermode) < GET_MODE_SIZE (GET_MODE (op))"}]}