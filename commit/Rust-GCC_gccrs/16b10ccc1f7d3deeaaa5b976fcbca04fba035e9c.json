{"sha": "16b10ccc1f7d3deeaaa5b976fcbca04fba035e9c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTZiMTBjY2MxZjdkM2RlZWFhYTViOTc2ZmNiY2EwNGZiYTAzNWU5Yw==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2014-08-01T08:32:27Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2014-08-01T08:32:27Z"}, "message": "[multiple changes]\n\n2014-08-01  Arnaud Charlet  <charlet@adacore.com>\n\n\t* exp_vfpt.adb, exp_vfpt.ads: Removed, no longer used.\n\t* gcc-interface/Make-lang.in: Remove exp_vfpt.o\n\n2014-08-01  Javier Miranda  <miranda@adacore.com>\n\n\t* inline.ads (Inlined_Calls, Backend_Calls,\n\tBackend_Inlined_Subps, Backend_Not_Inlined_Subps): Declarations\n\tmoved to inline.adb (Cannot_Inline): Update documentation.\n\t(Check_And_Build_Body_To_Inline): Renamed.\n\t(List_Inlining_Info): Subprogram moved here from package exp_ch6.\n\t* inline.adb (Check_Inlining_Restrictions): New local variable.\n\t(Inlined_Calls, Backend_Calls, Backend_Inlined_Subps,\n\tBackend_Not_Inlined_Subps): Declarations moved here\n\tfrom inline.ads (Number_Of_Statements): Removed.\n\t(Remove_Pragmas): Avoid duplicated version of this subprogram.\n\t(Build_Body_To_Inline): Code cleanup.\n\t(Build_Body_To_Inline.Has_Excluded_Statament): Removed.\n\t(Check_And_Build_Body_To_Inline): Renamed. Code cleanup.\n\t(Check_Body_To_Inline): Removed.\n\t(Generate_Body_To_Inline): Renamed as Generate_Subprogram_Body.\n\t(Has_Excluded_Declaration): No action if not\n\tCheck_Inlining_Restrictions.\n\t(Has_Excluded_Statement): No action if not Check_Inlining_Restrictions.\n\t(Initialize): Initialize the lists of inlined calls and subprograms.\n\t(List_Inlining_Info): Subprogram moved here from package exp_ch6.\n\t* sem_ch6.adb (Analyze_Subprogram_Body_Helper): Update call\n\tto Check_And_Build_Body_To_Inline since it has been renamed as\n\tCheck_And_Split_Unconstrained_Function\n\t* exp_ch6.ad[sb] (List_Inlining_Info): Subprogram moved to\n\tpackage inline.\n\t* gnat1drv.adb Update call to Inline.List_Inlining_Info.\n\n2014-08-01  Vincent Celier  <celier@adacore.com>\n\n\t* debug.adb: Add documentation for new debug switch -ds.\n\t* make.adb (List_Bad_Compilations): Do not issue any message\n\twhen switch -ds is specified.\n\t* makeutl.adb (Fail_Program): Do not issue any message when\n\t-ds is specified.\n\t(Finish_Program): Ditto.\n\n2014-08-01  Robert Dewar  <dewar@adacore.com>\n\n\t* s-exnint.adb, s-exnint.ads, s-wwdwch.ads, s-carsi8.ads,\n\ts-casi32.ads, indepsw.adb, a-timoau.ads, s-explli.adb, s-explli.ads,\n\ts-casi16.ads, s-powtab.ads, g-wistsp.ads, a-ztmoau.adb,\n\tindepsw-gnu.adb, s-imgllb.ads, types.adb, gnat.ads, s-proinf.adb,\n\tindepsw-aix.adb, s-caun64.ads, s-imgllw.ads, s-traces-default.adb,\n\ts-vxwork-x86.ads, s-expllu.adb, s-exnlli.adb, s-exnlli.ads,\n\ts-traces.adb, widechar.ads, stand.adb, s-expint.adb,\n\ts-tratas-default.adb, s-expint.ads, s-geveop.ads, s-caun32.ads,\n\ts-expuns.adb, s-mantis.adb, s-mantis.ads, s-caun16.ads, s-tasinf.adb,\n\ts-memcop.ads, s-dsaser.ads, s-imgbiu.ads, a-szmzco.ads, g-strspl.ads,\n\ts-casi64.ads, g-zstspl.ads, indepsw-mingw.adb, tree_io.adb,\n\ts-boarop.ads, uname.ads, s-fore.adb, s-fore.ads, g-timsta.adb,\n\tg-timsta.ads, s-assert.adb, s-vector.ads, s-tratas.adb,\n\ts-tratas.ads: Minor fix to copyright notices.\n\n2014-08-01  Eric Botcazou  <ebotcazou@adacore.com>\n\n\t* sinfo.ads: Remove long obsolete comment.\n\nFrom-SVN: r213423", "tree": {"sha": "5b86d62bae106b36833d1a544810caf2e3427504", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5b86d62bae106b36833d1a544810caf2e3427504"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/16b10ccc1f7d3deeaaa5b976fcbca04fba035e9c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/16b10ccc1f7d3deeaaa5b976fcbca04fba035e9c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/16b10ccc1f7d3deeaaa5b976fcbca04fba035e9c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/16b10ccc1f7d3deeaaa5b976fcbca04fba035e9c/comments", "author": null, "committer": null, "parents": [{"sha": "de65e0e4ecc02dc04e7ff110ade703f8e4ff03e3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/de65e0e4ecc02dc04e7ff110ade703f8e4ff03e3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/de65e0e4ecc02dc04e7ff110ade703f8e4ff03e3"}], "stats": {"total": 2375, "additions": 502, "deletions": 1873}, "files": [{"sha": "6069ea63f6118a726b654548ec07f5467c3107b7", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 63, "deletions": 0, "changes": 63, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/16b10ccc1f7d3deeaaa5b976fcbca04fba035e9c/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/16b10ccc1f7d3deeaaa5b976fcbca04fba035e9c/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=16b10ccc1f7d3deeaaa5b976fcbca04fba035e9c", "patch": "@@ -1,3 +1,66 @@\n+2014-08-01  Arnaud Charlet  <charlet@adacore.com>\n+\n+\t* exp_vfpt.adb, exp_vfpt.ads: Removed, no longer used.\n+\t* gcc-interface/Make-lang.in: Remove exp_vfpt.o\n+\n+2014-08-01  Javier Miranda  <miranda@adacore.com>\n+\n+\t* inline.ads (Inlined_Calls, Backend_Calls,\n+\tBackend_Inlined_Subps, Backend_Not_Inlined_Subps): Declarations\n+\tmoved to inline.adb (Cannot_Inline): Update documentation.\n+\t(Check_And_Build_Body_To_Inline): Renamed.\n+\t(List_Inlining_Info): Subprogram moved here from package exp_ch6.\n+\t* inline.adb (Check_Inlining_Restrictions): New local variable.\n+\t(Inlined_Calls, Backend_Calls, Backend_Inlined_Subps,\n+\tBackend_Not_Inlined_Subps): Declarations moved here\n+\tfrom inline.ads (Number_Of_Statements): Removed.\n+\t(Remove_Pragmas): Avoid duplicated version of this subprogram.\n+\t(Build_Body_To_Inline): Code cleanup.\n+\t(Build_Body_To_Inline.Has_Excluded_Statament): Removed.\n+\t(Check_And_Build_Body_To_Inline): Renamed. Code cleanup.\n+\t(Check_Body_To_Inline): Removed.\n+\t(Generate_Body_To_Inline): Renamed as Generate_Subprogram_Body.\n+\t(Has_Excluded_Declaration): No action if not\n+\tCheck_Inlining_Restrictions.\n+\t(Has_Excluded_Statement): No action if not Check_Inlining_Restrictions.\n+\t(Initialize): Initialize the lists of inlined calls and subprograms.\n+\t(List_Inlining_Info): Subprogram moved here from package exp_ch6.\n+\t* sem_ch6.adb (Analyze_Subprogram_Body_Helper): Update call\n+\tto Check_And_Build_Body_To_Inline since it has been renamed as\n+\tCheck_And_Split_Unconstrained_Function\n+\t* exp_ch6.ad[sb] (List_Inlining_Info): Subprogram moved to\n+\tpackage inline.\n+\t* gnat1drv.adb Update call to Inline.List_Inlining_Info.\n+\n+2014-08-01  Vincent Celier  <celier@adacore.com>\n+\n+\t* debug.adb: Add documentation for new debug switch -ds.\n+\t* make.adb (List_Bad_Compilations): Do not issue any message\n+\twhen switch -ds is specified.\n+\t* makeutl.adb (Fail_Program): Do not issue any message when\n+\t-ds is specified.\n+\t(Finish_Program): Ditto.\n+\n+2014-08-01  Robert Dewar  <dewar@adacore.com>\n+\n+\t* s-exnint.adb, s-exnint.ads, s-wwdwch.ads, s-carsi8.ads,\n+\ts-casi32.ads, indepsw.adb, a-timoau.ads, s-explli.adb, s-explli.ads,\n+\ts-casi16.ads, s-powtab.ads, g-wistsp.ads, a-ztmoau.adb,\n+\tindepsw-gnu.adb, s-imgllb.ads, types.adb, gnat.ads, s-proinf.adb,\n+\tindepsw-aix.adb, s-caun64.ads, s-imgllw.ads, s-traces-default.adb,\n+\ts-vxwork-x86.ads, s-expllu.adb, s-exnlli.adb, s-exnlli.ads,\n+\ts-traces.adb, widechar.ads, stand.adb, s-expint.adb,\n+\ts-tratas-default.adb, s-expint.ads, s-geveop.ads, s-caun32.ads,\n+\ts-expuns.adb, s-mantis.adb, s-mantis.ads, s-caun16.ads, s-tasinf.adb,\n+\ts-memcop.ads, s-dsaser.ads, s-imgbiu.ads, a-szmzco.ads, g-strspl.ads,\n+\ts-casi64.ads, g-zstspl.ads, indepsw-mingw.adb, tree_io.adb,\n+\ts-boarop.ads, uname.ads, s-fore.adb, s-fore.ads, g-timsta.adb,\n+\tg-timsta.ads, s-assert.adb, s-vector.ads, s-tratas.adb,\n+\ts-tratas.ads: Minor fix to copyright notices.\n+\n+2014-08-01  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* sinfo.ads: Remove long obsolete comment.\n 2014-08-01  Ed Schonberg  <schonberg@adacore.com>\n \n \t* sem_util.adb: Add guard to setting of No_Predicate_On_Actual."}, {"sha": "6fbb7bf7777eb68de7c5ab70ff5578cbea971590", "filename": "gcc/ada/a-szmzco.ads", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/16b10ccc1f7d3deeaaa5b976fcbca04fba035e9c/gcc%2Fada%2Fa-szmzco.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/16b10ccc1f7d3deeaaa5b976fcbca04fba035e9c/gcc%2Fada%2Fa-szmzco.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-szmzco.ads?ref=16b10ccc1f7d3deeaaa5b976fcbca04fba035e9c", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 S p e c                                  --\n --                                                                          --\n---          Copyright (C) 1992-2009 Free Software Foundation, Inc.          --\n+--          Copyright (C) 1992-2014, Free Software Foundation, Inc.         --\n --                                                                          --\n -- This specification is derived from the Ada Reference Manual for use with --\n -- GNAT. The copyright notice above, and the license provisions that follow --"}, {"sha": "3520b5688ce23ab03cf85c77c220f4339f07df27", "filename": "gcc/ada/a-timoau.ads", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/16b10ccc1f7d3deeaaa5b976fcbca04fba035e9c/gcc%2Fada%2Fa-timoau.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/16b10ccc1f7d3deeaaa5b976fcbca04fba035e9c/gcc%2Fada%2Fa-timoau.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-timoau.ads?ref=16b10ccc1f7d3deeaaa5b976fcbca04fba035e9c", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 S p e c                                  --\n --                                                                          --\n---          Copyright (C) 1992-2009 Free Software Foundation, Inc.          --\n+--          Copyright (C) 1992-2014, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --"}, {"sha": "f8d72955aa6d0440c802619256f72802c04b8579", "filename": "gcc/ada/a-ztmoau.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/16b10ccc1f7d3deeaaa5b976fcbca04fba035e9c/gcc%2Fada%2Fa-ztmoau.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/16b10ccc1f7d3deeaaa5b976fcbca04fba035e9c/gcc%2Fada%2Fa-ztmoau.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-ztmoau.adb?ref=16b10ccc1f7d3deeaaa5b976fcbca04fba035e9c", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1992-2009 Free Software Foundation, Inc.          --\n+--          Copyright (C) 1992-2014, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --"}, {"sha": "de649f4a70e096d2e3403b00568a3985969c0313", "filename": "gcc/ada/debug.adb", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/16b10ccc1f7d3deeaaa5b976fcbca04fba035e9c/gcc%2Fada%2Fdebug.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/16b10ccc1f7d3deeaaa5b976fcbca04fba035e9c/gcc%2Fada%2Fdebug.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fdebug.adb?ref=16b10ccc1f7d3deeaaa5b976fcbca04fba035e9c", "patch": "@@ -214,7 +214,7 @@ package body Debug is\n    --  dp  Prints the contents of the Q used by Make.Compile_Sources\n    --  dq  Prints source files as they are enqueued and dequeued\n    --  dr\n-   --  ds\n+   --  ds  Suppress exit message when compilation fails\n    --  dt  Display time stamps when there is a mismatch\n    --  du  List units as their ali files are acquired\n    --  dv\n@@ -801,6 +801,10 @@ package body Debug is\n    --      used by routine Make.Compile_Sources. Useful to figure out the\n    --      order in which sources are recompiled.\n \n+   --  ds  When one or more compilations compilation fail, gnatmake does not\n+   --      issue an error message such as:\n+   --         gnatmake: \"/path/to/main.adb\" compilation error\n+\n    --  dt  When a time stamp mismatch has been found for an ALI file,\n    --      display the source file name, the time stamp expected and\n    --      the time stamp found.\n@@ -820,6 +824,10 @@ package body Debug is\n    --      of execution, such as temporary config pragma files, mapping\n    --      files or project path files.\n \n+   --  ds  When one or more compilations compilation fail, gprbuild does not\n+   --      issue the error message:\n+   --         gprbuild: *** compilation phase failed\n+\n    --  dt  When a time stamp mismatch has been found for an ALI file,\n    --      display the source file name, the time stamp expected and\n    --      the time stamp found."}, {"sha": "4550986fdd7881ce10642a370bfe97e85568d5e1", "filename": "gcc/ada/exp_ch6.adb", "status": "modified", "additions": 0, "deletions": 137, "changes": 137, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/16b10ccc1f7d3deeaaa5b976fcbca04fba035e9c/gcc%2Fada%2Fexp_ch6.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/16b10ccc1f7d3deeaaa5b976fcbca04fba035e9c/gcc%2Fada%2Fexp_ch6.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch6.adb?ref=16b10ccc1f7d3deeaaa5b976fcbca04fba035e9c", "patch": "@@ -51,7 +51,6 @@ with Namet;    use Namet;\n with Nlists;   use Nlists;\n with Nmake;    use Nmake;\n with Opt;      use Opt;\n-with Output;   use Output;\n with Restrict; use Restrict;\n with Rident;   use Rident;\n with Rtsfind;  use Rtsfind;\n@@ -69,7 +68,6 @@ with Sem_Res;  use Sem_Res;\n with Sem_SCIL; use Sem_SCIL;\n with Sem_Util; use Sem_Util;\n with Sinfo;    use Sinfo;\n-with Sinput;   use Sinput;\n with Snames;   use Snames;\n with Stand;    use Stand;\n with Stringt;  use Stringt;\n@@ -9647,139 +9645,4 @@ package body Exp_Ch6 is\n       end if;\n    end Needs_Result_Accessibility_Level;\n \n-   ------------------------\n-   -- List_Inlining_Info --\n-   ------------------------\n-\n-   procedure List_Inlining_Info is\n-      Elmt  : Elmt_Id;\n-      Nod   : Node_Id;\n-      Count : Nat;\n-\n-   begin\n-      if not Debug_Flag_Dot_J then\n-         return;\n-      end if;\n-\n-      --  Generate listing of calls inlined by the frontend\n-\n-      if Present (Inlined_Calls) then\n-         Count := 0;\n-         Elmt  := First_Elmt (Inlined_Calls);\n-         while Present (Elmt) loop\n-            Nod := Node (Elmt);\n-\n-            if In_Extended_Main_Code_Unit (Nod) then\n-               Count := Count + 1;\n-\n-               if Count = 1 then\n-                  Write_Str (\"Listing of frontend inlined calls\");\n-                  Write_Eol;\n-               end if;\n-\n-               Write_Str (\"  \");\n-               Write_Int (Count);\n-               Write_Str (\":\");\n-               Write_Location (Sloc (Nod));\n-               Write_Str (\":\");\n-               Output.Write_Eol;\n-            end if;\n-\n-            Next_Elmt (Elmt);\n-         end loop;\n-      end if;\n-\n-      --  Generate listing of calls passed to the backend\n-\n-      if Present (Backend_Calls) then\n-         Count := 0;\n-\n-         Elmt := First_Elmt (Backend_Calls);\n-         while Present (Elmt) loop\n-            Nod := Node (Elmt);\n-\n-            if In_Extended_Main_Code_Unit (Nod) then\n-               Count := Count + 1;\n-\n-               if Count = 1 then\n-                  Write_Str (\"Listing of inlined calls passed to the backend\");\n-                  Write_Eol;\n-               end if;\n-\n-               Write_Str (\"  \");\n-               Write_Int (Count);\n-               Write_Str (\":\");\n-               Write_Location (Sloc (Nod));\n-               Output.Write_Eol;\n-            end if;\n-\n-            Next_Elmt (Elmt);\n-         end loop;\n-      end if;\n-\n-      --  Generate listing of subprograms passed to the backend\n-\n-      if Present (Backend_Inlined_Subps)\n-        and then Back_End_Inlining\n-      then\n-         Count := 0;\n-\n-         Elmt := First_Elmt (Backend_Inlined_Subps);\n-         while Present (Elmt) loop\n-            Nod := Node (Elmt);\n-\n-            Count := Count + 1;\n-\n-            if Count = 1 then\n-               Write_Str\n-                 (\"Listing of inlined subprograms passed to the backend\");\n-               Write_Eol;\n-            end if;\n-\n-            Write_Str (\"  \");\n-            Write_Int (Count);\n-            Write_Str (\":\");\n-            Write_Name (Chars (Nod));\n-            Write_Str (\" (\");\n-            Write_Location (Sloc (Nod));\n-            Write_Str (\")\");\n-            Output.Write_Eol;\n-\n-            Next_Elmt (Elmt);\n-         end loop;\n-      end if;\n-\n-      --  Generate listing of subprogram that cannot be inlined by the backend\n-\n-      if Present (Backend_Not_Inlined_Subps)\n-        and then Back_End_Inlining\n-      then\n-         Count := 0;\n-\n-         Elmt := First_Elmt (Backend_Not_Inlined_Subps);\n-         while Present (Elmt) loop\n-            Nod := Node (Elmt);\n-\n-            Count := Count + 1;\n-\n-            if Count = 1 then\n-               Write_Str\n-                 (\"Listing of subprograms that cannot inline the backend\");\n-               Write_Eol;\n-            end if;\n-\n-            Write_Str (\"  \");\n-            Write_Int (Count);\n-            Write_Str (\":\");\n-            Write_Name (Chars (Nod));\n-            Write_Str (\" (\");\n-            Write_Location (Sloc (Nod));\n-            Write_Str (\")\");\n-            Output.Write_Eol;\n-\n-            Next_Elmt (Elmt);\n-         end loop;\n-      end if;\n-   end List_Inlining_Info;\n-\n end Exp_Ch6;"}, {"sha": "0c31ea6c3b4f06c722cc0f6eb023cfc5aae96cca", "filename": "gcc/ada/exp_ch6.ads", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/16b10ccc1f7d3deeaaa5b976fcbca04fba035e9c/gcc%2Fada%2Fexp_ch6.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/16b10ccc1f7d3deeaaa5b976fcbca04fba035e9c/gcc%2Fada%2Fexp_ch6.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch6.ads?ref=16b10ccc1f7d3deeaaa5b976fcbca04fba035e9c", "patch": "@@ -139,10 +139,6 @@ package Exp_Ch6 is\n    --  Predicate to recognize stubbed procedures and null procedures, which\n    --  can be inlined unconditionally in all cases.\n \n-   procedure List_Inlining_Info;\n-   --  Generate listing of calls inlined by the frontend plus listing of\n-   --  calls to inline subprograms passed to the backend.\n-\n    procedure Make_Build_In_Place_Call_In_Allocator\n      (Allocator     : Node_Id;\n       Function_Call : Node_Id);"}, {"sha": "82d2fe16e7df4745eedcb3f1e2bdf9109218eb79", "filename": "gcc/ada/exp_vfpt.adb", "status": "removed", "additions": 0, "deletions": 690, "changes": 690, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de65e0e4ecc02dc04e7ff110ade703f8e4ff03e3/gcc%2Fada%2Fexp_vfpt.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de65e0e4ecc02dc04e7ff110ade703f8e4ff03e3/gcc%2Fada%2Fexp_vfpt.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_vfpt.adb?ref=de65e0e4ecc02dc04e7ff110ade703f8e4ff03e3", "patch": "@@ -1,690 +0,0 @@\n-------------------------------------------------------------------------------\n---                                                                          --\n---                         GNAT COMPILER COMPONENTS                         --\n---                                                                          --\n---                             E X P _ V F P T                              --\n---                                                                          --\n---                                 B o d y                                  --\n---                                                                          --\n---          Copyright (C) 1997-2012, Free Software Foundation, Inc.         --\n---                                                                          --\n--- GNAT is free software;  you can  redistribute it  and/or modify it under --\n--- terms of the  GNU General Public License as published  by the Free Soft- --\n--- ware  Foundation;  either version 3,  or (at your option) any later ver- --\n--- sion.  GNAT is distributed in the hope that it will be useful, but WITH- --\n--- OUT ANY WARRANTY;  without even the  implied warranty of MERCHANTABILITY --\n--- or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License --\n--- for  more details.  You should have  received  a copy of the GNU General --\n--- Public License  distributed with GNAT; see file COPYING3.  If not, go to --\n--- http://www.gnu.org/licenses for a complete copy of the license.          --\n---                                                                          --\n--- GNAT was originally developed  by the GNAT team at  New York University. --\n--- Extensive contributions were provided by Ada Core Technologies Inc.      --\n---                                                                          --\n-------------------------------------------------------------------------------\n-\n-with Atree;    use Atree;\n-with Einfo;    use Einfo;\n-with Nlists;   use Nlists;\n-with Nmake;    use Nmake;\n-with Rtsfind;  use Rtsfind;\n-with Sem_Res;  use Sem_Res;\n-with Sinfo;    use Sinfo;\n-with Stand;    use Stand;\n-with Tbuild;   use Tbuild;\n-with Urealp;   use Urealp;\n-with Eval_Fat; use Eval_Fat;\n-\n-package body Exp_VFpt is\n-\n-   --  Vax floating point format (from Vax Architecture Reference Manual\n-   --  version 6):\n-\n-   --  Float F:\n-   --  --------\n-\n-   --   1 1\n-   --   5 4             7 6            0\n-   --  +-+---------------+--------------+\n-   --  |S|     exp       |   fraction   |  A\n-   --  +-+---------------+--------------+\n-   --  |             fraction           |  A + 2\n-   --  +--------------------------------+\n-\n-   --  bit 15 is the sign bit,\n-   --  bits 14:7 is the excess 128 binary exponent,\n-   --  bits 6:0 and 31:16 the normalized 24-bit fraction with the redundant\n-   --    most significant fraction bit not represented.\n-\n-   --  An exponent value of 0 together with a sign bit of 0, is taken to\n-   --  indicate that the datum has a value of 0. Exponent values of 1 through\n-   --  255 indicate true binary exponents of -127 to +127. An exponent value\n-   --  of 0, together with a sign bit of 1, is taken as reserved.\n-\n-   --  Note that fraction bits are not continuous in memory, VAX is little\n-   --  endian (LSB first).\n-\n-   --  Float D:\n-   --  --------\n-\n-   --   1 1\n-   --   5 4             7 6            0\n-   --  +-+---------------+--------------+\n-   --  |S|     exp       |   fraction   |  A\n-   --  +-+---------------+--------------+\n-   --  |             fraction           |  A + 2\n-   --  +--------------------------------+\n-   --  |             fraction           |  A + 4\n-   --  +--------------------------------+\n-   --  |             fraction (low)     |  A + 6\n-   --  +--------------------------------+\n-\n-   --  Note that the fraction bits are not continuous in memory. Bytes in a\n-   --  words are stored in little endian format, but words are stored using\n-   --  big endian format (PDP endian).\n-\n-   --  Like Float F but with 55 bits for the fraction.\n-\n-   --  Float G:\n-   --  --------\n-\n-   --   1 1\n-   --   5 4                   4 3      0\n-   --  +-+---------------------+--------+\n-   --  |S|     exp             |  fract |  A\n-   --  +-+---------------------+--------+\n-   --  |             fraction           |  A + 2\n-   --  +--------------------------------+\n-   --  |             fraction           |  A + 4\n-   --  +--------------------------------+\n-   --  |             fraction (low)     |  A + 6\n-   --  +--------------------------------+\n-\n-   --  Exponent values of 1 through 2047 indicate true binary exponents of\n-   --  -1023 to +1023.\n-\n-   --  Main differences compared to IEEE 754:\n-\n-   --  * No denormalized numbers\n-   --  * No infinity\n-   --  * No NaN\n-   --  * No -0.0\n-   --  * Reserved values (exp = 0, sign = 1)\n-   --  * Vax mantissa represent values [0.5, 1)\n-   --  * Bias is shifted by 1 (for single float: 128 on Vax, 127 on IEEE)\n-\n-   VAXFF_Digits : constant := 6;\n-   VAXDF_Digits : constant := 9;\n-   VAXGF_Digits : constant := 15;\n-\n-   ----------------------\n-   -- Expand_Vax_Arith --\n-   ----------------------\n-\n-   procedure Expand_Vax_Arith (N : Node_Id) is\n-      Loc   : constant Source_Ptr := Sloc (N);\n-      Typ   : constant Entity_Id  := Base_Type (Etype (N));\n-      Typc  : Character;\n-      Atyp  : Entity_Id;\n-      Func  : RE_Id;\n-      Args  : List_Id;\n-\n-   begin\n-      --  Get arithmetic type, note that we do D stuff in G\n-\n-      if Digits_Value (Typ) = VAXFF_Digits then\n-         Typc := 'F';\n-         Atyp := RTE (RE_F);\n-      else\n-         Typc := 'G';\n-         Atyp := RTE (RE_G);\n-      end if;\n-\n-      case Nkind (N) is\n-\n-         when N_Op_Abs =>\n-            if Typc = 'F' then\n-               Func := RE_Abs_F;\n-            else\n-               Func := RE_Abs_G;\n-            end if;\n-\n-         when N_Op_Add =>\n-            if Typc = 'F' then\n-               Func := RE_Add_F;\n-            else\n-               Func := RE_Add_G;\n-            end if;\n-\n-         when N_Op_Divide =>\n-            if Typc = 'F' then\n-               Func := RE_Div_F;\n-            else\n-               Func := RE_Div_G;\n-            end if;\n-\n-         when N_Op_Multiply =>\n-            if Typc = 'F' then\n-               Func := RE_Mul_F;\n-            else\n-               Func := RE_Mul_G;\n-            end if;\n-\n-         when N_Op_Minus =>\n-            if Typc = 'F' then\n-               Func := RE_Neg_F;\n-            else\n-               Func := RE_Neg_G;\n-            end if;\n-\n-         when N_Op_Subtract =>\n-            if Typc = 'F' then\n-               Func := RE_Sub_F;\n-            else\n-               Func := RE_Sub_G;\n-            end if;\n-\n-         when others =>\n-            Func := RE_Null;\n-            raise Program_Error;\n-\n-      end case;\n-\n-      Args := New_List;\n-\n-      if Nkind (N) in N_Binary_Op then\n-         Append_To (Args,\n-           Convert_To (Atyp, Left_Opnd (N)));\n-      end if;\n-\n-      Append_To (Args,\n-        Convert_To (Atyp, Right_Opnd (N)));\n-\n-      Rewrite (N,\n-        Convert_To (Typ,\n-          Make_Function_Call (Loc,\n-            Name => New_Occurrence_Of (RTE (Func), Loc),\n-            Parameter_Associations => Args)));\n-\n-      Analyze_And_Resolve (N, Typ, Suppress => All_Checks);\n-   end Expand_Vax_Arith;\n-\n-   ---------------------------\n-   -- Expand_Vax_Comparison --\n-   ---------------------------\n-\n-   procedure Expand_Vax_Comparison (N : Node_Id) is\n-      Loc   : constant Source_Ptr := Sloc (N);\n-      Typ   : constant Entity_Id  := Base_Type (Etype (Left_Opnd (N)));\n-      Typc  : Character;\n-      Func  : RE_Id;\n-      Atyp  : Entity_Id;\n-      Revrs : Boolean := False;\n-      Args  : List_Id;\n-\n-   begin\n-      --  Get arithmetic type, note that we do D stuff in G\n-\n-      if Digits_Value (Typ) = VAXFF_Digits then\n-         Typc := 'F';\n-         Atyp := RTE (RE_F);\n-      else\n-         Typc := 'G';\n-         Atyp := RTE (RE_G);\n-      end if;\n-\n-      case Nkind (N) is\n-\n-         when N_Op_Eq =>\n-            if Typc = 'F' then\n-               Func := RE_Eq_F;\n-            else\n-               Func := RE_Eq_G;\n-            end if;\n-\n-         when N_Op_Ge =>\n-            if Typc = 'F' then\n-               Func := RE_Le_F;\n-            else\n-               Func := RE_Le_G;\n-            end if;\n-\n-            Revrs := True;\n-\n-         when N_Op_Gt =>\n-            if Typc = 'F' then\n-               Func := RE_Lt_F;\n-            else\n-               Func := RE_Lt_G;\n-            end if;\n-\n-            Revrs := True;\n-\n-         when N_Op_Le =>\n-            if Typc = 'F' then\n-               Func := RE_Le_F;\n-            else\n-               Func := RE_Le_G;\n-            end if;\n-\n-         when N_Op_Lt =>\n-            if Typc = 'F' then\n-               Func := RE_Lt_F;\n-            else\n-               Func := RE_Lt_G;\n-            end if;\n-\n-         when N_Op_Ne =>\n-            if Typc = 'F' then\n-               Func := RE_Ne_F;\n-            else\n-               Func := RE_Ne_G;\n-            end if;\n-\n-         when others =>\n-            Func := RE_Null;\n-            raise Program_Error;\n-\n-      end case;\n-\n-      if not Revrs then\n-         Args := New_List (\n-           Convert_To (Atyp, Left_Opnd  (N)),\n-           Convert_To (Atyp, Right_Opnd (N)));\n-\n-      else\n-         Args := New_List (\n-           Convert_To (Atyp, Right_Opnd (N)),\n-           Convert_To (Atyp, Left_Opnd  (N)));\n-      end if;\n-\n-      Rewrite (N,\n-        Make_Function_Call (Loc,\n-          Name => New_Occurrence_Of (RTE (Func), Loc),\n-          Parameter_Associations => Args));\n-\n-      Analyze_And_Resolve (N, Standard_Boolean, Suppress => All_Checks);\n-   end Expand_Vax_Comparison;\n-\n-   ---------------------------\n-   -- Expand_Vax_Conversion --\n-   ---------------------------\n-\n-   procedure Expand_Vax_Conversion (N : Node_Id) is\n-      Loc   : constant Source_Ptr := Sloc (N);\n-      Expr  : constant Node_Id    := Expression (N);\n-      S_Typ : constant Entity_Id  := Base_Type (Etype (Expr));\n-      T_Typ : constant Entity_Id  := Base_Type (Etype (N));\n-\n-      CallS : RE_Id;\n-      CallT : RE_Id;\n-      Func  : RE_Id;\n-\n-      function Call_Type (T : Entity_Id; Otyp : Entity_Id) return RE_Id;\n-      --  Given one of the two types T, determines the corresponding call\n-      --  type, i.e. the type to be used for the call (or the result of\n-      --  the call). The actual operand is converted to (or from) this type.\n-      --  Otyp is the other type, which is useful in figuring out the result.\n-      --  The result returned is the RE_Id value for the type entity.\n-\n-      function Equivalent_Integer_Type (T : Entity_Id) return Entity_Id;\n-      --  Find the predefined integer type that has the same size as the\n-      --  fixed-point type T, for use in fixed/float conversions.\n-\n-      ---------------\n-      -- Call_Type --\n-      ---------------\n-\n-      function Call_Type (T : Entity_Id; Otyp : Entity_Id) return RE_Id is\n-      begin\n-         --  Vax float formats\n-\n-         if Vax_Float (T) then\n-            if Digits_Value (T) = VAXFF_Digits then\n-               return RE_F;\n-\n-            elsif Digits_Value (T) = VAXGF_Digits then\n-               return RE_G;\n-\n-            --  For D_Float, leave it as D float if the other operand is\n-            --  G_Float, since this is the one conversion that is properly\n-            --  supported for D_Float, but otherwise, use G_Float.\n-\n-            else pragma Assert (Digits_Value (T) = VAXDF_Digits);\n-\n-               if Vax_Float (Otyp)\n-                 and then Digits_Value (Otyp) = VAXGF_Digits\n-               then\n-                  return RE_D;\n-               else\n-                  return RE_G;\n-               end if;\n-            end if;\n-\n-         --  For all discrete types, use 64-bit integer\n-\n-         elsif Is_Discrete_Type (T) then\n-            return RE_Q;\n-\n-         --  For all real types (other than Vax float format), we use the\n-         --  IEEE float-type which corresponds in length to the other type\n-         --  (which is Vax Float).\n-\n-         else pragma Assert (Is_Real_Type (T));\n-\n-            if Digits_Value (Otyp) = VAXFF_Digits then\n-               return RE_S;\n-            else\n-               return RE_T;\n-            end if;\n-         end if;\n-      end Call_Type;\n-\n-      -------------------------------------------------\n-      -- Expand_Multiply_Fixed_By_Fixed_Giving_Fixed --\n-      -------------------------------------------------\n-\n-      function Equivalent_Integer_Type (T : Entity_Id) return Entity_Id is\n-      begin\n-         if Esize (T) = Esize (Standard_Long_Long_Integer) then\n-            return Standard_Long_Long_Integer;\n-         elsif Esize (T) = Esize (Standard_Long_Integer) then\n-            return  Standard_Long_Integer;\n-         else\n-            return Standard_Integer;\n-         end if;\n-      end Equivalent_Integer_Type;\n-\n-   --  Start of processing for Expand_Vax_Conversion;\n-\n-   begin\n-      --  If input and output are the same Vax type, we change the\n-      --  conversion to be an unchecked conversion and that's it.\n-\n-      if Vax_Float (S_Typ) and then Vax_Float (T_Typ)\n-        and then Digits_Value (S_Typ) = Digits_Value (T_Typ)\n-      then\n-         Rewrite (N,\n-           Unchecked_Convert_To (T_Typ, Expr));\n-\n-      --  Case of conversion of fixed-point type to Vax_Float type\n-\n-      elsif Is_Fixed_Point_Type (S_Typ) then\n-\n-         --  If Conversion_OK set, then we introduce an intermediate IEEE\n-         --  target type since we are expecting the code generator to handle\n-         --  the case of integer to IEEE float.\n-\n-         if Conversion_OK (N) then\n-            Rewrite (N,\n-              Convert_To (T_Typ, OK_Convert_To (Universal_Real, Expr)));\n-\n-         --  Otherwise, convert the scaled integer value to the target type,\n-         --  and multiply by 'Small of type.\n-\n-         else\n-            Rewrite (N,\n-               Make_Op_Multiply (Loc,\n-                 Left_Opnd =>\n-                   Make_Type_Conversion (Loc,\n-                     Subtype_Mark => New_Occurrence_Of (T_Typ, Loc),\n-                     Expression   =>\n-                       Unchecked_Convert_To (\n-                         Equivalent_Integer_Type (S_Typ), Expr)),\n-                 Right_Opnd =>\n-                   Make_Real_Literal (Loc, Realval => Small_Value (S_Typ))));\n-         end if;\n-\n-      --  Case of conversion of Vax_Float type to fixed-point type\n-\n-      elsif Is_Fixed_Point_Type (T_Typ) then\n-\n-         --  If Conversion_OK set, then we introduce an intermediate IEEE\n-         --  target type, since we are expecting the code generator to handle\n-         --  the case of IEEE float to integer.\n-\n-         if Conversion_OK (N) then\n-            Rewrite (N,\n-              OK_Convert_To (T_Typ, Convert_To (Universal_Real, Expr)));\n-\n-         --  Otherwise, multiply value by 'small of type, and convert to the\n-         --  corresponding integer type.\n-\n-         else\n-            Rewrite (N,\n-              Unchecked_Convert_To (T_Typ,\n-                Make_Type_Conversion (Loc,\n-                  Subtype_Mark =>\n-                    New_Occurrence_Of (Equivalent_Integer_Type (T_Typ), Loc),\n-                  Expression =>\n-                    Make_Op_Multiply (Loc,\n-                      Left_Opnd => Expr,\n-                      Right_Opnd =>\n-                        Make_Real_Literal (Loc,\n-                          Realval => Ureal_1 / Small_Value (T_Typ))))));\n-         end if;\n-\n-      --  All other cases\n-\n-      else\n-         --  Compute types for call\n-\n-         CallS := Call_Type (S_Typ, T_Typ);\n-         CallT := Call_Type (T_Typ, S_Typ);\n-\n-         --  Get function and its types\n-\n-         if CallS = RE_D and then CallT = RE_G then\n-            Func := RE_D_To_G;\n-\n-         elsif CallS = RE_G and then CallT = RE_D then\n-            Func := RE_G_To_D;\n-\n-         elsif CallS = RE_G and then CallT = RE_F then\n-            Func := RE_G_To_F;\n-\n-         elsif CallS = RE_F and then CallT = RE_G then\n-            Func := RE_F_To_G;\n-\n-         elsif CallS = RE_F and then CallT = RE_S then\n-            Func := RE_F_To_S;\n-\n-         elsif CallS = RE_S and then CallT = RE_F then\n-            Func := RE_S_To_F;\n-\n-         elsif CallS = RE_G and then CallT = RE_T then\n-            Func := RE_G_To_T;\n-\n-         elsif CallS = RE_T and then CallT = RE_G then\n-            Func := RE_T_To_G;\n-\n-         elsif CallS = RE_F and then CallT = RE_Q then\n-            Func := RE_F_To_Q;\n-\n-         elsif CallS = RE_Q and then CallT = RE_F then\n-            Func := RE_Q_To_F;\n-\n-         elsif CallS = RE_G and then CallT = RE_Q then\n-            Func := RE_G_To_Q;\n-\n-         else pragma Assert (CallS = RE_Q and then CallT = RE_G);\n-            Func := RE_Q_To_G;\n-         end if;\n-\n-         Rewrite (N,\n-           Convert_To (T_Typ,\n-             Make_Function_Call (Loc,\n-               Name => New_Occurrence_Of (RTE (Func), Loc),\n-               Parameter_Associations => New_List (\n-                 Convert_To (RTE (CallS), Expr)))));\n-      end if;\n-\n-      Analyze_And_Resolve (N, T_Typ, Suppress => All_Checks);\n-   end Expand_Vax_Conversion;\n-\n-   -------------------------------\n-   -- Expand_Vax_Foreign_Return --\n-   -------------------------------\n-\n-   procedure Expand_Vax_Foreign_Return (N : Node_Id) is\n-      Loc  : constant Source_Ptr := Sloc (N);\n-      Typ  : constant Entity_Id  := Base_Type (Etype (N));\n-      Func : RE_Id;\n-      Args : List_Id;\n-      Atyp : Entity_Id;\n-      Rtyp : constant Entity_Id  := Etype (N);\n-\n-   begin\n-      if Digits_Value (Typ) = VAXFF_Digits then\n-         Func := RE_Return_F;\n-         Atyp := RTE (RE_F);\n-      elsif Digits_Value (Typ) = VAXDF_Digits then\n-         Func := RE_Return_D;\n-         Atyp := RTE (RE_D);\n-      else pragma Assert (Digits_Value (Typ) = VAXGF_Digits);\n-         Func := RE_Return_G;\n-         Atyp := RTE (RE_G);\n-      end if;\n-\n-      Args := New_List (Convert_To (Atyp, N));\n-\n-      Rewrite (N,\n-        Convert_To (Rtyp,\n-          Make_Function_Call (Loc,\n-            Name                   => New_Occurrence_Of (RTE (Func), Loc),\n-            Parameter_Associations => Args)));\n-\n-      Analyze_And_Resolve (N, Typ, Suppress => All_Checks);\n-   end Expand_Vax_Foreign_Return;\n-\n-   --------------------------------\n-   -- Vax_Real_Literal_As_Signed --\n-   --------------------------------\n-\n-   function Get_Vax_Real_Literal_As_Signed (N : Node_Id) return Uint is\n-      Btyp     : constant Entity_Id :=\n-                   Base_Type (Underlying_Type (Etype (N)));\n-\n-      Value    : constant Ureal := Realval (N);\n-      Negative : Boolean;\n-      Fraction : UI;\n-      Exponent : UI;\n-      Res      : UI;\n-\n-      Exponent_Size : Uint;\n-      --  Number of bits for the exponent\n-\n-      Fraction_Size : Uint;\n-      --  Number of bits for the fraction\n-\n-      Uintp_Mark : constant Uintp.Save_Mark := Mark;\n-      --  Use the mark & release feature to delete temporaries\n-   begin\n-      --  Extract the sign now\n-\n-      Negative := UR_Is_Negative (Value);\n-\n-      --  Decompose the number\n-\n-      Decompose_Int (Btyp, abs Value, Fraction, Exponent, Round_Even);\n-\n-      --  Number of bits for the fraction, leading fraction bit is implicit\n-\n-      Fraction_Size := Machine_Mantissa_Value (Btyp) - Int'(1);\n-\n-      --  Number of bits for the exponent (one bit for the sign)\n-\n-      Exponent_Size := RM_Size (Btyp) - Fraction_Size - Int'(1);\n-\n-      if Fraction = Uint_0 then\n-         --  Handle zero\n-\n-         Res := Uint_0;\n-\n-      elsif Exponent <= -(Uint_2 ** (Exponent_Size - 1)) then\n-         --  Underflow\n-\n-         Res := Uint_0;\n-      else\n-         --  Check for overflow\n-\n-         pragma Assert (Exponent < Uint_2 ** (Exponent_Size - 1));\n-\n-         --  MSB of the fraction must be 1\n-\n-         pragma Assert (Fraction / Uint_2 ** Fraction_Size = Uint_1);\n-\n-         --  Remove the redudant most significant fraction bit\n-\n-         Fraction := Fraction - Uint_2 ** Fraction_Size;\n-\n-         --  Build the fraction part. Note that this field is in mixed\n-         --  endianness: words are stored using little endianness, while bytes\n-         --  in words are stored using big endianness.\n-\n-         Res := Uint_0;\n-         for I in 1 .. UI_To_Int (RM_Size (Btyp)) / 16 loop\n-            Res := (Res * (Uint_2 ** 16)) + (Fraction mod (Uint_2 ** 16));\n-            Fraction := Fraction / (Uint_2 ** 16);\n-         end loop;\n-\n-         --  The sign bit\n-\n-         if Negative then\n-            Res := Res + Int (2**15);\n-         end if;\n-\n-         --  The exponent\n-\n-         Res := Res + (Exponent + Uint_2 ** (Exponent_Size - 1))\n-           * Uint_2 ** (15 - Exponent_Size);\n-\n-         --  Until now, we have created an unsigned number, but an underlying\n-         --  type is a signed type. Convert to a signed number to avoid\n-         --  overflow in gigi.\n-\n-         if Res >= Uint_2 ** (Exponent_Size + Fraction_Size) then\n-            Res := Res - Uint_2 ** (Exponent_Size + Fraction_Size + 1);\n-         end if;\n-      end if;\n-\n-      Release_And_Save (Uintp_Mark, Res);\n-\n-      return Res;\n-   end Get_Vax_Real_Literal_As_Signed;\n-\n-   ----------------------\n-   -- Expand_Vax_Valid --\n-   ----------------------\n-\n-   procedure Expand_Vax_Valid (N : Node_Id) is\n-      Loc  : constant Source_Ptr := Sloc (N);\n-      Pref : constant Node_Id    := Prefix (N);\n-      Ptyp : constant Entity_Id  := Root_Type (Etype (Pref));\n-      Rtyp : constant Entity_Id  := Etype (N);\n-      Vtyp : RE_Id;\n-      Func : RE_Id;\n-\n-   begin\n-      if Digits_Value (Ptyp) = VAXFF_Digits then\n-         Func := RE_Valid_F;\n-         Vtyp := RE_F;\n-      elsif Digits_Value (Ptyp) = VAXDF_Digits then\n-         Func := RE_Valid_D;\n-         Vtyp := RE_D;\n-      else pragma Assert (Digits_Value (Ptyp) = VAXGF_Digits);\n-         Func := RE_Valid_G;\n-         Vtyp := RE_G;\n-      end if;\n-\n-      Rewrite (N,\n-        Convert_To (Rtyp,\n-          Make_Function_Call (Loc,\n-            Name                   => New_Occurrence_Of (RTE (Func), Loc),\n-            Parameter_Associations => New_List (\n-              Convert_To (RTE (Vtyp), Pref)))));\n-\n-      Analyze_And_Resolve (N);\n-   end Expand_Vax_Valid;\n-\n-end Exp_VFpt;"}, {"sha": "db0186694355c2bbc6a715e77a7f38a0d966e877", "filename": "gcc/ada/exp_vfpt.ads", "status": "removed", "additions": 0, "deletions": 67, "changes": 67, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de65e0e4ecc02dc04e7ff110ade703f8e4ff03e3/gcc%2Fada%2Fexp_vfpt.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de65e0e4ecc02dc04e7ff110ade703f8e4ff03e3/gcc%2Fada%2Fexp_vfpt.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_vfpt.ads?ref=de65e0e4ecc02dc04e7ff110ade703f8e4ff03e3", "patch": "@@ -1,67 +0,0 @@\n-------------------------------------------------------------------------------\n---                                                                          --\n---                         GNAT COMPILER COMPONENTS                         --\n---                                                                          --\n---                             E X P _ V F P T                              --\n---                                                                          --\n---                                 S p e c                                  --\n---                                                                          --\n---          Copyright (C) 1992-2012, Free Software Foundation, Inc.         --\n---                                                                          --\n--- GNAT is free software;  you can  redistribute it  and/or modify it under --\n--- terms of the  GNU General Public License as published  by the Free Soft- --\n--- ware  Foundation;  either version 3,  or (at your option) any later ver- --\n--- sion.  GNAT is distributed in the hope that it will be useful, but WITH- --\n--- OUT ANY WARRANTY;  without even the  implied warranty of MERCHANTABILITY --\n--- or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License --\n--- for  more details.  You should have  received  a copy of the GNU General --\n--- Public License  distributed with GNAT; see file COPYING3.  If not, go to --\n--- http://www.gnu.org/licenses for a complete copy of the license.          --\n---                                                                          --\n--- GNAT was originally developed  by the GNAT team at  New York University. --\n--- Extensive contributions were provided by Ada Core Technologies Inc.      --\n---                                                                          --\n-------------------------------------------------------------------------------\n-\n---  This package contains specialized routines for handling the expansion\n---  of arithmetic and conversion operations involving Vax format floating-\n---  point formats as used on the Vax and the Alpha and the ia64.\n-\n-with Types; use Types;\n-with Uintp; use Uintp;\n-\n-package Exp_VFpt is\n-\n-   procedure Expand_Vax_Arith (N : Node_Id);\n-   --  The node N is an arithmetic node (N_Op_Abs, N_Op_Add, N_Op_Sub,\n-   --  N_Op_Div, N_Op_Mul, N_Op_Minus where the operands are in Vax float\n-   --  format. This procedure expands the necessary call.\n-\n-   procedure Expand_Vax_Comparison (N : Node_Id);\n-   --  The node N is an arithmetic comparison node where the types to be\n-   --  compared are in Vax float format. This procedure expands the necessary\n-   --  call.\n-\n-   procedure Expand_Vax_Conversion (N : Node_Id);\n-   --  The node N is a type conversion node where either the source or the\n-   --  target type, or both, are Vax floating-point type.\n-\n-   procedure Expand_Vax_Foreign_Return (N : Node_Id);\n-   --  The node N is a call to a foreign function that returns a Vax float\n-   --  value in a floating point register. Wraps the call in an asm stub\n-   --  that moves the return value to an integer location on Alpha/VMS,\n-   --  noop everywhere else.\n-\n-   function Get_Vax_Real_Literal_As_Signed (N : Node_Id) return Uint;\n-   --  Get the Vax binary representation of a real literal whose type is a Vax\n-   --  floating-point type. This is used by gigi. Previously we expanded real\n-   --  literal to a call to a LIB$OTS routine that performed the conversion.\n-   --  This worked correctly from a funcional point of view, but was\n-   --  inefficient and generated huge functions for aggregate initializations.\n-\n-   procedure Expand_Vax_Valid (N : Node_Id);\n-   --  The node N is an attribute reference node for the Valid attribute where\n-   --  the prefix is of a Vax floating-point type. This procedure expands the\n-   --  necessary call for the validity test.\n-\n-end Exp_VFpt;"}, {"sha": "31851b3ee093295704263b71fcff48655067da23", "filename": "gcc/ada/g-strspl.ads", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/16b10ccc1f7d3deeaaa5b976fcbca04fba035e9c/gcc%2Fada%2Fg-strspl.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/16b10ccc1f7d3deeaaa5b976fcbca04fba035e9c/gcc%2Fada%2Fg-strspl.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fg-strspl.ads?ref=16b10ccc1f7d3deeaaa5b976fcbca04fba035e9c", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 S p e c                                  --\n --                                                                          --\n---          Copyright (C) 2002-2009 Free Software Foundation, Inc.          --\n+--          Copyright (C) 2002-2014, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --"}, {"sha": "50d4f702324e58677b4f4fac7d8e857a25a3c22e", "filename": "gcc/ada/g-timsta.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/16b10ccc1f7d3deeaaa5b976fcbca04fba035e9c/gcc%2Fada%2Fg-timsta.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/16b10ccc1f7d3deeaaa5b976fcbca04fba035e9c/gcc%2Fada%2Fg-timsta.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fg-timsta.adb?ref=16b10ccc1f7d3deeaaa5b976fcbca04fba035e9c", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 2008-2009  Free Software Foundation, Inc.         --\n+--          Copyright (C) 2008-2014, Free Software Foundation, Inc.        --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --"}, {"sha": "8f35e7b959f220729d8e65b4ca663190036b8e61", "filename": "gcc/ada/g-timsta.ads", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/16b10ccc1f7d3deeaaa5b976fcbca04fba035e9c/gcc%2Fada%2Fg-timsta.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/16b10ccc1f7d3deeaaa5b976fcbca04fba035e9c/gcc%2Fada%2Fg-timsta.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fg-timsta.ads?ref=16b10ccc1f7d3deeaaa5b976fcbca04fba035e9c", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 S p e c                                  --\n --                                                                          --\n---         Copyright (C) 2008-2009  Free Software Foundation, Inc.          --\n+--         Copyright (C) 2008-2014, Free Software Foundation, Inc.          --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --"}, {"sha": "39f19a6717aba2447b3e64585735bcba6e5598a8", "filename": "gcc/ada/g-wistsp.ads", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/16b10ccc1f7d3deeaaa5b976fcbca04fba035e9c/gcc%2Fada%2Fg-wistsp.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/16b10ccc1f7d3deeaaa5b976fcbca04fba035e9c/gcc%2Fada%2Fg-wistsp.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fg-wistsp.ads?ref=16b10ccc1f7d3deeaaa5b976fcbca04fba035e9c", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 S p e c                                  --\n --                                                                          --\n---          Copyright (C) 2002-2009 Free Software Foundation, Inc.          --\n+--          Copyright (C) 2002-2014, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --"}, {"sha": "de87324b7a960bcf41415d9f7d704a3761622807", "filename": "gcc/ada/g-zstspl.ads", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/16b10ccc1f7d3deeaaa5b976fcbca04fba035e9c/gcc%2Fada%2Fg-zstspl.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/16b10ccc1f7d3deeaaa5b976fcbca04fba035e9c/gcc%2Fada%2Fg-zstspl.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fg-zstspl.ads?ref=16b10ccc1f7d3deeaaa5b976fcbca04fba035e9c", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 S p e c                                  --\n --                                                                          --\n---          Copyright (C) 2002-2009 Free Software Foundation, Inc.          --\n+--          Copyright (C) 2002-2014, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --"}, {"sha": "11a97b4d858c6ba944d7bc2f9449def9d430a6b3", "filename": "gcc/ada/gcc-interface/Make-lang.in", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/16b10ccc1f7d3deeaaa5b976fcbca04fba035e9c/gcc%2Fada%2Fgcc-interface%2FMake-lang.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/16b10ccc1f7d3deeaaa5b976fcbca04fba035e9c/gcc%2Fada%2Fgcc-interface%2FMake-lang.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2FMake-lang.in?ref=16b10ccc1f7d3deeaaa5b976fcbca04fba035e9c", "patch": "@@ -281,7 +281,6 @@ GNAT_ADA_OBJS =\t\\\n  ada/exp_strm.o\t\\\n  ada/exp_tss.o\t\\\n  ada/exp_util.o\t\\\n- ada/exp_vfpt.o\t\\\n  ada/expander.o\t\\\n  ada/fmap.o\t\\\n  ada/fname-uf.o\t\\"}, {"sha": "a0807b656fa6bdf5ccc6598a2acbebf94cf591b5", "filename": "gcc/ada/gnat.ads", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/16b10ccc1f7d3deeaaa5b976fcbca04fba035e9c/gcc%2Fada%2Fgnat.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/16b10ccc1f7d3deeaaa5b976fcbca04fba035e9c/gcc%2Fada%2Fgnat.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgnat.ads?ref=16b10ccc1f7d3deeaaa5b976fcbca04fba035e9c", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 S p e c                                  --\n --                                                                          --\n---                     Copyright (C) 1992-2005 AdaCore                      --\n+--                     Copyright (C) 1992-2014, AdaCore                     --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --"}, {"sha": "2eb9d980336d51f982407d54705305af8009e3ee", "filename": "gcc/ada/gnat1drv.adb", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/16b10ccc1f7d3deeaaa5b976fcbca04fba035e9c/gcc%2Fada%2Fgnat1drv.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/16b10ccc1f7d3deeaaa5b976fcbca04fba035e9c/gcc%2Fada%2Fgnat1drv.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgnat1drv.adb?ref=16b10ccc1f7d3deeaaa5b976fcbca04fba035e9c", "patch": "@@ -32,7 +32,6 @@ with Debug;    use Debug;\n with Elists;\n with Errout;   use Errout;\n with Exp_CG;\n-with Exp_Ch6;  use Exp_Ch6;\n with Fmap;\n with Fname;    use Fname;\n with Fname.UF; use Fname.UF;\n@@ -1276,7 +1275,7 @@ begin\n       Errout.Finalize (Last_Call => True);\n       Errout.Output_Messages;\n       List_Rep_Info (Ttypes.Bytes_Big_Endian);\n-      List_Inlining_Info;\n+      Inline.List_Inlining_Info;\n \n       --  Only write the library if the backend did not generate any error\n       --  messages. Otherwise signal errors to the driver program so that"}, {"sha": "61bb54c843a9391bef68ca800f81bd3e2f386d41", "filename": "gcc/ada/indepsw-aix.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/16b10ccc1f7d3deeaaa5b976fcbca04fba035e9c/gcc%2Fada%2Findepsw-aix.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/16b10ccc1f7d3deeaaa5b976fcbca04fba035e9c/gcc%2Fada%2Findepsw-aix.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Findepsw-aix.adb?ref=16b10ccc1f7d3deeaaa5b976fcbca04fba035e9c", "patch": "@@ -7,7 +7,7 @@\n --                                 B o d y                                  --\n --                              (AIX version)                               --\n --                                                                          --\n---            Copyright (C) 2009 Free Software Foundation, Inc.             --\n+--          Copyright (C) 2009-2014, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --"}, {"sha": "145f6a2f2e0f24142677a7daadfcd45c961bc342", "filename": "gcc/ada/indepsw-gnu.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/16b10ccc1f7d3deeaaa5b976fcbca04fba035e9c/gcc%2Fada%2Findepsw-gnu.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/16b10ccc1f7d3deeaaa5b976fcbca04fba035e9c/gcc%2Fada%2Findepsw-gnu.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Findepsw-gnu.adb?ref=16b10ccc1f7d3deeaaa5b976fcbca04fba035e9c", "patch": "@@ -7,7 +7,7 @@\n --                                 B o d y                                  --\n --                              (GNU version)                               --\n --                                                                          --\n---            Copyright (C) 2009, Free Software Foundation, Inc.            --\n+--          Copyright (C) 2009-2014, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --"}, {"sha": "819652d242b5b98ebb325a5b0c215bde569523f7", "filename": "gcc/ada/indepsw-mingw.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/16b10ccc1f7d3deeaaa5b976fcbca04fba035e9c/gcc%2Fada%2Findepsw-mingw.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/16b10ccc1f7d3deeaaa5b976fcbca04fba035e9c/gcc%2Fada%2Findepsw-mingw.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Findepsw-mingw.adb?ref=16b10ccc1f7d3deeaaa5b976fcbca04fba035e9c", "patch": "@@ -7,7 +7,7 @@\n --                                 B o d y                                  --\n --                            (Windows version)                             --\n --                                                                          --\n---            Copyright (C) 2009 Free Software Foundation, Inc.             --\n+--          Copyright (C) 2009-2014, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --"}, {"sha": "631367500dfb8762d09cac054e4586af2dc9bf94", "filename": "gcc/ada/indepsw.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/16b10ccc1f7d3deeaaa5b976fcbca04fba035e9c/gcc%2Fada%2Findepsw.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/16b10ccc1f7d3deeaaa5b976fcbca04fba035e9c/gcc%2Fada%2Findepsw.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Findepsw.adb?ref=16b10ccc1f7d3deeaaa5b976fcbca04fba035e9c", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---              Copyright (C) 2009 Free Software Foundation, Inc.           --\n+--          Copyright (C) 2009-2014, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --"}, {"sha": "04ca7ca632291237f4e424b61788a0400b5acc12", "filename": "gcc/ada/inline.adb", "status": "modified", "additions": 336, "deletions": 876, "changes": 1212, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/16b10ccc1f7d3deeaaa5b976fcbca04fba035e9c/gcc%2Fada%2Finline.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/16b10ccc1f7d3deeaaa5b976fcbca04fba035e9c/gcc%2Fada%2Finline.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Finline.adb?ref=16b10ccc1f7d3deeaaa5b976fcbca04fba035e9c", "patch": "@@ -24,6 +24,7 @@\n ------------------------------------------------------------------------------\n \n with Atree;    use Atree;\n+with Debug;    use Debug;\n with Einfo;    use Einfo;\n with Elists;   use Elists;\n with Errout;   use Errout;\n@@ -38,23 +39,54 @@ with Lib;      use Lib;\n with Namet;    use Namet;\n with Nmake;    use Nmake;\n with Nlists;   use Nlists;\n+with Output;   use Output;\n with Sem_Aux;  use Sem_Aux;\n with Sem_Ch8;  use Sem_Ch8;\n with Sem_Ch10; use Sem_Ch10;\n with Sem_Ch12; use Sem_Ch12;\n-with Sem_Eval; use Sem_Eval;\n with Sem_Prag; use Sem_Prag;\n with Sem_Util; use Sem_Util;\n with Sinfo;    use Sinfo;\n with Sinput;   use Sinput;\n with Snames;   use Snames;\n with Stand;    use Stand;\n with Uname;    use Uname;\n-with Targparm; use Targparm;\n with Tbuild;   use Tbuild;\n \n package body Inline is\n \n+   Check_Inlining_Restrictions : constant Boolean := True;\n+   --  In the following cases the frontend rejects inlining because they\n+   --  are not handled well by the backend. This variable facilitates\n+   --  disabling these restrictions to evaluate future versions of the\n+   --  GCC backend in which some of the restrictions may be supported.\n+   --\n+   --   - subprograms that have:\n+   --      - nested subprograms\n+   --      - instantiations\n+   --      - package declarations\n+   --      - task or protected object declarations\n+   --      - some of the following statements:\n+   --          - abort\n+   --          - asynchronous-select\n+   --          - conditional-entry-call\n+   --          - delay-relative\n+   --          - delay-until\n+   --          - selective-accept\n+   --          - timed-entry-call\n+\n+   Inlined_Calls : Elist_Id;\n+   --  List of frontend inlined calls\n+\n+   Backend_Calls : Elist_Id;\n+   --  List of inline calls passed to the backend\n+\n+   Backend_Inlined_Subps : Elist_Id;\n+   --  List of subprograms inlined by the backend\n+\n+   Backend_Not_Inlined_Subps : Elist_Id;\n+   --  List of subprograms that cannot be inlined by the backend\n+\n    --------------------\n    -- Inlined Bodies --\n    --------------------\n@@ -180,8 +212,11 @@ package body Inline is\n    --  function anyway. This is also the case if the function is defined in a\n    --  task body or within an entry (for example, an initialization procedure).\n \n-   function Number_Of_Statements (Stats : List_Id) return Natural;\n-   --  Return the number of statements in the list\n+   procedure Remove_Pragmas (Bod : Node_Id);\n+   --  A pragma Unreferenced or pragma Unmodified that mentions a formal\n+   --  parameter has no meaning when the body is inlined and the formals\n+   --  are rewritten. Remove it from body to inline. The analysis of the\n+   --  non-inlined body will handle the pragma properly.\n \n    ------------------------------\n    -- Deferred Cleanup Actions --\n@@ -889,18 +924,12 @@ package body Inline is\n    -- Build_Body_To_Inline --\n    --------------------------\n \n-   procedure Build_Body_To_Inline (N : Node_Id; Subp : Entity_Id) is\n-      Decl            : constant Node_Id := Unit_Declaration_Node (Subp);\n+   procedure Build_Body_To_Inline (N : Node_Id; Spec_Id : Entity_Id) is\n+      Decl            : constant Node_Id := Unit_Declaration_Node (Spec_Id);\n       Analysis_Status : constant Boolean := Full_Analysis;\n       Original_Body   : Node_Id;\n       Body_To_Analyze : Node_Id;\n       Max_Size        : constant := 10;\n-      Stat_Count      : Integer := 0;\n-\n-      function Has_Excluded_Statement   (Stats : List_Id) return Boolean;\n-      --  Check for statements that make inlining not worthwhile: any tasking\n-      --  statement, nested at any level. Keep track of total number of\n-      --  elementary statements, as a measure of acceptable size.\n \n       function Has_Pending_Instantiation return Boolean;\n       --  If some enclosing body contains instantiations that appear before\n@@ -911,116 +940,14 @@ package body Inline is\n \n       function Has_Single_Return_In_GNATprove_Mode return Boolean;\n       --  This function is called only in GNATprove mode, and it returns\n-      --  True if the subprogram has no or a single return statement as\n-      --  last statement.\n-\n-      procedure Remove_Pragmas;\n-      --  A pragma Unreferenced or pragma Unmodified that mentions a formal\n-      --  parameter has no meaning when the body is inlined and the formals\n-      --  are rewritten. Remove it from body to inline. The analysis of the\n-      --  non-inlined body will handle the pragma properly.\n+      --  True if the subprogram has no return statement or a single return\n+      --  statement as last statement.\n \n       function Uses_Secondary_Stack (Bod : Node_Id) return Boolean;\n       --  If the body of the subprogram includes a call that returns an\n       --  unconstrained type, the secondary stack is involved, and it\n       --  is not worth inlining.\n \n-      ----------------------------\n-      -- Has_Excluded_Statement --\n-      ----------------------------\n-\n-      function Has_Excluded_Statement (Stats : List_Id) return Boolean is\n-         S : Node_Id;\n-         E : Node_Id;\n-\n-      begin\n-         S := First (Stats);\n-         while Present (S) loop\n-            Stat_Count := Stat_Count + 1;\n-\n-            if Nkind_In (S, N_Abort_Statement,\n-                            N_Asynchronous_Select,\n-                            N_Conditional_Entry_Call,\n-                            N_Delay_Relative_Statement,\n-                            N_Delay_Until_Statement,\n-                            N_Selective_Accept,\n-                            N_Timed_Entry_Call)\n-            then\n-               Cannot_Inline\n-                 (\"cannot inline & (non-allowed statement)?\", S, Subp);\n-               return True;\n-\n-            elsif Nkind (S) = N_Block_Statement then\n-               if Present (Declarations (S))\n-                 and then Has_Excluded_Declaration (Subp, Declarations (S))\n-               then\n-                  return True;\n-\n-               elsif Present (Handled_Statement_Sequence (S))\n-                  and then\n-                    (Present\n-                       (Exception_Handlers (Handled_Statement_Sequence (S)))\n-                      or else\n-                        Has_Excluded_Statement\n-                          (Statements (Handled_Statement_Sequence (S))))\n-               then\n-                  return True;\n-               end if;\n-\n-            elsif Nkind (S) = N_Case_Statement then\n-               E := First (Alternatives (S));\n-               while Present (E) loop\n-                  if Has_Excluded_Statement (Statements (E)) then\n-                     return True;\n-                  end if;\n-\n-                  Next (E);\n-               end loop;\n-\n-            elsif Nkind (S) = N_If_Statement then\n-               if Has_Excluded_Statement (Then_Statements (S)) then\n-                  return True;\n-               end if;\n-\n-               if Present (Elsif_Parts (S)) then\n-                  E := First (Elsif_Parts (S));\n-                  while Present (E) loop\n-                     if Has_Excluded_Statement (Then_Statements (E)) then\n-                        return True;\n-                     end if;\n-\n-                     Next (E);\n-                  end loop;\n-               end if;\n-\n-               if Present (Else_Statements (S))\n-                 and then Has_Excluded_Statement (Else_Statements (S))\n-               then\n-                  return True;\n-               end if;\n-\n-            elsif Nkind (S) = N_Loop_Statement\n-              and then Has_Excluded_Statement (Statements (S))\n-            then\n-               return True;\n-\n-            elsif Nkind (S) = N_Extended_Return_Statement then\n-               if Has_Excluded_Statement\n-                    (Statements (Handled_Statement_Sequence (S)))\n-                 or else\n-                   Present\n-                     (Exception_Handlers (Handled_Statement_Sequence (S)))\n-               then\n-                  return True;\n-               end if;\n-            end if;\n-\n-            Next (S);\n-         end loop;\n-\n-         return False;\n-      end Has_Excluded_Statement;\n-\n       -------------------------------\n       -- Has_Pending_Instantiation --\n       -------------------------------\n@@ -1099,30 +1026,6 @@ package body Inline is\n          return Check_All_Returns (N) = OK;\n       end Has_Single_Return_In_GNATprove_Mode;\n \n-      --------------------\n-      -- Remove_Pragmas --\n-      --------------------\n-\n-      procedure Remove_Pragmas is\n-         Decl : Node_Id;\n-         Nxt  : Node_Id;\n-\n-      begin\n-         Decl := First (Declarations (Body_To_Analyze));\n-         while Present (Decl) loop\n-            Nxt := Next (Decl);\n-\n-            if Nkind (Decl) = N_Pragma\n-              and then Nam_In (Pragma_Name (Decl), Name_Unreferenced,\n-                                                   Name_Unmodified)\n-            then\n-               Remove (Decl);\n-            end if;\n-\n-            Decl := Nxt;\n-         end loop;\n-      end Remove_Pragmas;\n-\n       --------------------------\n       -- Uses_Secondary_Stack --\n       --------------------------\n@@ -1144,7 +1047,7 @@ package body Inline is\n             then\n                Cannot_Inline\n                  (\"cannot inline & (call returns unconstrained type)?\",\n-                  N, Subp);\n+                  N, Spec_Id);\n                return Abandon;\n             else\n                return OK;\n@@ -1174,38 +1077,38 @@ package body Inline is\n       elsif GNATprove_Mode\n         and then not Has_Single_Return_In_GNATprove_Mode\n       then\n-         Cannot_Inline (\"cannot inline & (multiple returns)?\", N, Subp);\n+         Cannot_Inline (\"cannot inline & (multiple returns)?\", N, Spec_Id);\n          return;\n \n       --  Functions that return unconstrained composite types require\n       --  secondary stack handling, and cannot currently be inlined, unless\n       --  all return statements return a local variable that is the first\n       --  local declaration in the body.\n \n-      elsif Ekind (Subp) = E_Function\n-        and then not Is_Scalar_Type (Etype (Subp))\n-        and then not Is_Access_Type (Etype (Subp))\n-        and then not Is_Constrained (Etype (Subp))\n+      elsif Ekind (Spec_Id) = E_Function\n+        and then not Is_Scalar_Type (Etype (Spec_Id))\n+        and then not Is_Access_Type (Etype (Spec_Id))\n+        and then not Is_Constrained (Etype (Spec_Id))\n       then\n          if not Has_Single_Return (N) then\n             Cannot_Inline\n-              (\"cannot inline & (unconstrained return type)?\", N, Subp);\n+              (\"cannot inline & (unconstrained return type)?\", N, Spec_Id);\n             return;\n          end if;\n \n       --  Ditto for functions that return controlled types, where controlled\n       --  actions interfere in complex ways with inlining.\n \n-      elsif Ekind (Subp) = E_Function\n-        and then Needs_Finalization (Etype (Subp))\n+      elsif Ekind (Spec_Id) = E_Function\n+        and then Needs_Finalization (Etype (Spec_Id))\n       then\n          Cannot_Inline\n-           (\"cannot inline & (controlled return type)?\", N, Subp);\n+           (\"cannot inline & (controlled return type)?\", N, Spec_Id);\n          return;\n       end if;\n \n       if Present (Declarations (N))\n-        and then Has_Excluded_Declaration (Subp, Declarations (N))\n+        and then Has_Excluded_Declaration (Spec_Id, Declarations (N))\n       then\n          return;\n       end if;\n@@ -1215,11 +1118,11 @@ package body Inline is\n             Cannot_Inline\n               (\"cannot inline& (exception handler)?\",\n                First (Exception_Handlers (Handled_Statement_Sequence (N))),\n-               Subp);\n+               Spec_Id);\n             return;\n \n-         elsif\n-           Has_Excluded_Statement (Statements (Handled_Statement_Sequence (N)))\n+         elsif Has_Excluded_Statement\n+                 (Spec_Id, Statements (Handled_Statement_Sequence (N)))\n          then\n             return;\n          end if;\n@@ -1230,17 +1133,18 @@ package body Inline is\n       --  suppress the other checks on inlining (forbidden declarations,\n       --  handlers, etc).\n \n-      if Stat_Count > Max_Size\n-        and then not (Has_Pragma_Inline_Always (Subp) or else GNATprove_Mode)\n+      if not (Has_Pragma_Inline_Always (Spec_Id) or else GNATprove_Mode)\n+        and then List_Length\n+                   (Statements (Handled_Statement_Sequence (N))) > Max_Size\n       then\n-         Cannot_Inline (\"cannot inline& (body too large)?\", N, Subp);\n+         Cannot_Inline (\"cannot inline& (body too large)?\", N, Spec_Id);\n          return;\n       end if;\n \n       if Has_Pending_Instantiation then\n          Cannot_Inline\n            (\"cannot inline& (forward instance within enclosing body)?\",\n-             N, Subp);\n+             N, Spec_Id);\n          return;\n       end if;\n \n@@ -1277,9 +1181,9 @@ package body Inline is\n       --  Set return type of function, which is also global and does not need\n       --  to be resolved.\n \n-      if Ekind (Subp) = E_Function then\n+      if Ekind (Spec_Id) = E_Function then\n          Set_Result_Definition (Specification (Body_To_Analyze),\n-           New_Occurrence_Of (Etype (Subp), Sloc (N)));\n+           New_Occurrence_Of (Etype (Spec_Id), Sloc (N)));\n       end if;\n \n       if No (Declarations (N)) then\n@@ -1294,7 +1198,7 @@ package body Inline is\n \n       Expander_Mode_Save_And_Set (False);\n       Full_Analysis := False;\n-      Remove_Pragmas;\n+      Remove_Pragmas (Body_To_Analyze);\n \n       Analyze (Body_To_Analyze);\n       Push_Scope (Defining_Entity (Body_To_Analyze));\n@@ -1319,8 +1223,8 @@ package body Inline is\n       end if;\n \n       Set_Body_To_Inline (Decl, Original_Body);\n-      Set_Ekind (Defining_Entity (Original_Body), Ekind (Subp));\n-      Set_Is_Inlined (Subp);\n+      Set_Ekind (Defining_Entity (Original_Body), Ekind (Spec_Id));\n+      Set_Is_Inlined (Spec_Id);\n    end Build_Body_To_Inline;\n \n    -------------------\n@@ -1357,7 +1261,7 @@ package body Inline is\n \n       pragma Assert (Msg (Msg'Last) = '?');\n \n-      --  Old semantics\n+      --  Legacy front end inlining model\n \n       if not Back_End_Inlining then\n \n@@ -1643,11 +1547,11 @@ package body Inline is\n       end if;\n    end Can_Be_Inlined_In_GNATprove_Mode;\n \n-   ------------------------------------\n-   -- Check_And_Build_Body_To_Inline --\n-   ------------------------------------\n+   --------------------------------------------\n+   -- Check_And_Split_Unconstrained_Function --\n+   --------------------------------------------\n \n-   procedure Check_And_Build_Body_To_Inline\n+   procedure Check_And_Split_Unconstrained_Function\n      (N       : Node_Id;\n       Spec_Id : Entity_Id;\n       Body_Id : Entity_Id)\n@@ -1661,47 +1565,7 @@ package body Inline is\n       --  body N has no local declarations and its unique statement is a single\n       --  extended return statement with a handled statements sequence.\n \n-      function Check_Body_To_Inline\n-        (N    : Node_Id;\n-         Subp : Entity_Id) return Boolean;\n-      --  N is the N_Subprogram_Body of Subp. Return true if Subp can be\n-      --  inlined by the frontend. These are the rules:\n-      --    * At -O0 use fe inlining when inline_always is specified except if\n-      --      the function returns a controlled type.\n-      --    * At other optimization levels use the fe inlining for both inline\n-      --      and inline_always in the following cases:\n-      --       - function returning a known at compile time constant\n-      --       - function returning a call to an intrinsic function\n-      --       - function returning an unconstrained type (see Can_Split\n-      --         Unconstrained_Function).\n-      --       - function returning a call to a frontend-inlined function\n-      --      Use the back-end mechanism otherwise\n-      --\n-      --  In addition, in the following cases the function cannot be inlined by\n-      --  the frontend:\n-      --    - functions that uses the secondary stack\n-      --    - functions that have declarations of:\n-      --         - Concurrent types\n-      --         - Packages\n-      --         - Instantiations\n-      --         - Subprograms\n-      --    - functions that have some of the following statements:\n-      --         - abort\n-      --         - asynchronous-select\n-      --         - conditional-entry-call\n-      --         - delay-relative\n-      --         - delay-until\n-      --         - selective-accept\n-      --         - timed-entry-call\n-      --    - functions that have exception handlers\n-      --    - functions that have some enclosing body containing instantiations\n-      --      that appear before the corresponding generic body.\n-      --    - functions that have some of the following contracts (and the\n-      --      sources are compiled with assertions enabled):\n-      --         - Pre/post condition\n-      --         - Contract cases\n-\n-      procedure Generate_Body_To_Inline\n+      procedure Generate_Subprogram_Body\n         (N              : Node_Id;\n          Body_To_Inline : out Node_Id);\n       --  Generate a parameterless duplicate of subprogram body N. Occurrences\n@@ -1750,7 +1614,7 @@ package body Inline is\n          --  inline, we nest it within a dummy parameterless subprogram,\n          --  declared within the real one.\n \n-         Generate_Body_To_Inline (N, Original_Body);\n+         Generate_Subprogram_Body (N, Original_Body);\n          Body_To_Analyze := Copy_Generic_Node (Original_Body, Empty, False);\n \n          --  Set return type of function, which is also global and does not\n@@ -1787,568 +1651,6 @@ package body Inline is\n          Set_Ekind (Defining_Entity (Original_Body), Ekind (Spec_Id));\n       end Build_Body_To_Inline;\n \n-      --------------------------\n-      -- Check_Body_To_Inline --\n-      --------------------------\n-\n-      function Check_Body_To_Inline\n-        (N    : Node_Id;\n-         Subp : Entity_Id) return Boolean\n-      is\n-         Max_Size   : constant := 10;\n-\n-         function Has_Excluded_Contract return Boolean;\n-         --  Check for contracts that cannot be inlined\n-\n-         function Has_Pending_Instantiation return Boolean;\n-         --  Return True if some enclosing body contains instantiations that\n-         --  appear before the corresponding generic body.\n-\n-         function Has_Single_Return_In_GNATprove_Mode return Boolean;\n-         --  This function is called only in GNATprove mode, and it returns\n-         --  True if the subprogram has no return statement or a single return\n-         --  statement as last statement.\n-\n-         function Returns_Compile_Time_Constant (N : Node_Id) return Boolean;\n-         --  Return True if all the return statements of the function body N\n-         --  are simple return statements and return a compile time constant\n-\n-         function Returns_Intrinsic_Function_Call (N : Node_Id) return Boolean;\n-         --  Return True if all the return statements of the function body N\n-         --  are simple return statements and return an intrinsic function call\n-\n-         function Uses_Secondary_Stack (N : Node_Id) return Boolean;\n-         --  If the body of the subprogram includes a call that returns an\n-         --  unconstrained type, the secondary stack is involved, and it\n-         --  is not worth inlining.\n-\n-         ---------------------------\n-         -- Has_Excluded_Contract --\n-         ---------------------------\n-\n-         function Has_Excluded_Contract return Boolean is\n-            function Check_Excluded_Contracts (E : Entity_Id) return Boolean;\n-            --  Return True if the subprogram E has unsupported contracts\n-\n-            ------------------------------\n-            -- Check_Excluded_Contracts --\n-            ------------------------------\n-\n-            function Check_Excluded_Contracts (E : Entity_Id) return Boolean is\n-               Items : constant Node_Id := Contract (E);\n-\n-            begin\n-               if Present (Items) then\n-                  if Present (Pre_Post_Conditions (Items))\n-                    or else Present (Contract_Test_Cases (Items))\n-                  then\n-                     Cannot_Inline\n-                       (\"cannot inline & (non-allowed contract)?\",\n-                        N, Subp);\n-                     return True;\n-                  end if;\n-               end if;\n-\n-               return False;\n-            end Check_Excluded_Contracts;\n-\n-            --  Local declarations\n-\n-            Decl : Node_Id;\n-            P_Id : Pragma_Id;\n-\n-         --  Start of processing for Has_Excluded_Contract\n-\n-         begin\n-            if Check_Excluded_Contracts (Spec_Id)\n-              or else Check_Excluded_Contracts (Body_Id)\n-            then\n-               return True;\n-            end if;\n-\n-            --  Check pragmas located in the body which may generate contracts\n-\n-            if Present (Declarations (N)) then\n-               Decl := First (Declarations (N));\n-               while Present (Decl) loop\n-                  if Nkind (Decl) = N_Pragma then\n-                     P_Id := Get_Pragma_Id (Pragma_Name (Decl));\n-\n-                     if P_Id = Pragma_Contract_Cases or else\n-                        P_Id = Pragma_Pre            or else\n-                        P_Id = Pragma_Precondition   or else\n-                        P_Id = Pragma_Post           or else\n-                        P_Id = Pragma_Postcondition\n-                     then\n-                        Cannot_Inline\n-                          (\"cannot inline & (non-allowed contract)?\",\n-                           N, Subp);\n-                        return True;\n-                     end if;\n-                  end if;\n-\n-                  Next (Decl);\n-               end loop;\n-            end if;\n-\n-            return False;\n-         end Has_Excluded_Contract;\n-\n-         -------------------------------\n-         -- Has_Pending_Instantiation --\n-         -------------------------------\n-\n-         function Has_Pending_Instantiation return Boolean is\n-            S : Entity_Id;\n-\n-         begin\n-            S := Current_Scope;\n-            while Present (S) loop\n-               if Is_Compilation_Unit (S) or else Is_Child_Unit (S) then\n-                  return False;\n-\n-               elsif Ekind (S) = E_Package\n-                 and then Has_Forward_Instantiation (S)\n-               then\n-                  return True;\n-               end if;\n-\n-               S := Scope (S);\n-            end loop;\n-\n-            return False;\n-         end Has_Pending_Instantiation;\n-\n-         -----------------------------------------\n-         -- Has_Single_Return_In_GNATprove_Mode --\n-         -----------------------------------------\n-\n-         function Has_Single_Return_In_GNATprove_Mode return Boolean is\n-            Last_Statement : Node_Id := Empty;\n-\n-            function Check_Return (N : Node_Id) return Traverse_Result;\n-            --  Returns OK on node N if this is not a return statement\n-            --  different from the last statement in the subprogram.\n-\n-            ------------------\n-            -- Check_Return --\n-            ------------------\n-\n-            function Check_Return (N : Node_Id) return Traverse_Result is\n-            begin\n-               if Nkind_In (N, N_Simple_Return_Statement,\n-                            N_Extended_Return_Statement)\n-               then\n-                  if N = Last_Statement then\n-                     return OK;\n-                  else\n-                     return Abandon;\n-                  end if;\n-\n-               else\n-                  return OK;\n-               end if;\n-            end Check_Return;\n-\n-            function Check_All_Returns is new Traverse_Func (Check_Return);\n-\n-         --  Start of processing for Has_Single_Return_In_GNATprove_Mode\n-\n-         begin\n-            --  Retrieve last statement inside possible block statements\n-\n-            Last_Statement :=\n-              Last (Statements (Handled_Statement_Sequence (N)));\n-\n-            while Nkind (Last_Statement) = N_Block_Statement loop\n-               Last_Statement := Last\n-                 (Statements (Handled_Statement_Sequence (Last_Statement)));\n-            end loop;\n-\n-            --  Check that the last statement is the only possible return\n-            --  statement in the subprogram.\n-\n-            return Check_All_Returns (N) = OK;\n-         end Has_Single_Return_In_GNATprove_Mode;\n-\n-         ------------------------------------\n-         --  Returns_Compile_Time_Constant --\n-         ------------------------------------\n-\n-         function Returns_Compile_Time_Constant (N : Node_Id) return Boolean is\n-\n-            function Check_Return (N : Node_Id) return Traverse_Result;\n-\n-            ------------------\n-            -- Check_Return --\n-            ------------------\n-\n-            function Check_Return (N : Node_Id) return Traverse_Result is\n-            begin\n-               if Nkind (N) = N_Extended_Return_Statement then\n-                  return Abandon;\n-\n-               elsif Nkind (N) = N_Simple_Return_Statement then\n-                  if Present (Expression (N)) then\n-                     declare\n-                        Orig_Expr : constant Node_Id :=\n-                                      Original_Node (Expression (N));\n-\n-                     begin\n-                        if Nkind_In (Orig_Expr, N_Integer_Literal,\n-                                                N_Real_Literal,\n-                                                N_Character_Literal)\n-                        then\n-                           return OK;\n-\n-                        elsif Is_Entity_Name (Orig_Expr)\n-                          and then Ekind (Entity (Orig_Expr)) = E_Constant\n-                          and then Is_OK_Static_Expression (Orig_Expr)\n-                        then\n-                           return OK;\n-                        else\n-                           return Abandon;\n-                        end if;\n-                     end;\n-\n-                  --  Expression has wrong form\n-\n-                  else\n-                     return Abandon;\n-                  end if;\n-\n-               --  Continue analyzing statements\n-\n-               else\n-                  return OK;\n-               end if;\n-            end Check_Return;\n-\n-            function Check_All_Returns is new Traverse_Func (Check_Return);\n-\n-            --  Start of processing for Returns_Compile_Time_Constant\n-\n-         begin\n-            return Check_All_Returns (N) = OK;\n-         end Returns_Compile_Time_Constant;\n-\n-         --------------------------------------\n-         --  Returns_Intrinsic_Function_Call --\n-         --------------------------------------\n-\n-         function Returns_Intrinsic_Function_Call\n-           (N : Node_Id) return Boolean\n-         is\n-            function Check_Return (N : Node_Id) return Traverse_Result;\n-\n-            ------------------\n-            -- Check_Return --\n-            ------------------\n-\n-            function Check_Return (N : Node_Id) return Traverse_Result is\n-            begin\n-               if Nkind (N) = N_Extended_Return_Statement then\n-                  return Abandon;\n-\n-               elsif Nkind (N) = N_Simple_Return_Statement then\n-                  if Present (Expression (N)) then\n-                     declare\n-                        Orig_Expr : constant Node_Id :=\n-                                      Original_Node (Expression (N));\n-\n-                     begin\n-                        if Nkind (Orig_Expr) in N_Op\n-                          and then Is_Intrinsic_Subprogram (Entity (Orig_Expr))\n-                        then\n-                           return OK;\n-\n-                        elsif Nkind (Orig_Expr) in N_Has_Entity\n-                          and then Present (Entity (Orig_Expr))\n-                          and then Ekind (Entity (Orig_Expr)) = E_Function\n-                          and then Is_Inlined (Entity (Orig_Expr))\n-                        then\n-                           return OK;\n-\n-                        elsif Nkind (Orig_Expr) in N_Has_Entity\n-                          and then Present (Entity (Orig_Expr))\n-                          and then Is_Intrinsic_Subprogram (Entity (Orig_Expr))\n-                        then\n-                           return OK;\n-\n-                        else\n-                           return Abandon;\n-                        end if;\n-                     end;\n-\n-                  --  Expression has wrong form\n-\n-                  else\n-                     return Abandon;\n-                  end if;\n-\n-               --  Continue analyzing statements\n-\n-               else\n-                  return OK;\n-               end if;\n-            end Check_Return;\n-\n-            function Check_All_Returns is new Traverse_Func (Check_Return);\n-\n-         --  Start of processing for Returns_Intrinsic_Function_Call\n-\n-         begin\n-            return Check_All_Returns (N) = OK;\n-         end Returns_Intrinsic_Function_Call;\n-\n-         --------------------------\n-         -- Uses_Secondary_Stack --\n-         --------------------------\n-\n-         function Uses_Secondary_Stack (N : Node_Id) return Boolean is\n-\n-            function Check_Call (N : Node_Id) return Traverse_Result;\n-            --  Look for function calls that return an unconstrained type\n-\n-            ----------------\n-            -- Check_Call --\n-            ----------------\n-\n-            function Check_Call (N : Node_Id) return Traverse_Result is\n-            begin\n-               if Nkind (N) = N_Function_Call\n-                 and then Is_Entity_Name (Name (N))\n-                 and then Is_Composite_Type (Etype (Entity (Name (N))))\n-                 and then not Is_Constrained (Etype (Entity (Name (N))))\n-               then\n-                  Cannot_Inline\n-                    (\"cannot inline & (call returns unconstrained type)?\",\n-                     N, Subp);\n-\n-                  return Abandon;\n-               else\n-                  return OK;\n-               end if;\n-            end Check_Call;\n-\n-            function Check_Calls is new Traverse_Func (Check_Call);\n-\n-         --  Start of processing for Uses_Secondary_Stack\n-\n-         begin\n-            return Check_Calls (N) = Abandon;\n-         end Uses_Secondary_Stack;\n-\n-         --  Local variables\n-\n-         Decl       : constant Node_Id := Unit_Declaration_Node (Spec_Id);\n-         May_Inline : constant Boolean :=\n-                        GNATprove_Mode\n-                          or else Has_Pragma_Inline_Always (Spec_Id)\n-                          or else (Has_Pragma_Inline (Spec_Id)\n-                                    and then ((Optimization_Level > 0\n-                                                and then Ekind (Spec_Id) =\n-                                                                   E_Function)\n-                                               or else Front_End_Inlining\n-                                               or else Back_End_Inlining));\n-\n-         Body_To_Analyze : Node_Id;\n-\n-      --  Start of processing for Check_Body_To_Inline\n-\n-      begin\n-         --  No action needed in stubs since the attribute Body_To_Inline\n-         --  is not available\n-\n-         if Nkind (Decl) = N_Subprogram_Body_Stub then\n-            return False;\n-\n-         --  Cannot build the body to inline if the attribute is already set.\n-         --  This attribute may have been set if this is a subprogram renaming\n-         --  declarations (see Freeze.Build_Renamed_Body).\n-\n-         elsif Present (Body_To_Inline (Decl)) then\n-            return False;\n-\n-         --  Cannot build the body to inline if the subprogram has unsupported\n-         --  contracts that will be expanded into code (if assertions are not\n-         --  enabled these pragmas will be removed by Generate_Body_To_Inline\n-         --  to avoid reporting spurious errors).\n-\n-         elsif Assertions_Enabled\n-           and then Has_Excluded_Contract\n-           and then not Back_End_Inlining\n-         then\n-            return False;\n-\n-         --  Subprograms that have return statements in the middle of the\n-         --  body are inlined with gotos. GNATprove does not currently\n-         --  support gotos, so we prevent such inlining.\n-\n-         elsif GNATprove_Mode\n-           and then not Has_Single_Return_In_GNATprove_Mode\n-         then\n-            Cannot_Inline (\"cannot inline & (multiple returns)?\", N, Subp);\n-            return False;\n-\n-         --  No action needed if the subprogram does not fulfill the minimum\n-         --  conditions to be inlined by the frontend\n-\n-         elsif not May_Inline then\n-            return False;\n-         end if;\n-\n-         --  Check excluded declarations\n-\n-         if Present (Declarations (N))\n-           and then Has_Excluded_Declaration (Subp, Declarations (N))\n-         then\n-            return False;\n-         end if;\n-\n-         --  Check excluded statements\n-\n-         if Present (Handled_Statement_Sequence (N)) then\n-            if Present\n-                 (Exception_Handlers (Handled_Statement_Sequence (N)))\n-            then\n-               Cannot_Inline\n-                 (\"cannot inline& (exception handler)?\",\n-                  First (Exception_Handlers (Handled_Statement_Sequence (N))),\n-                  Subp);\n-               return False;\n-\n-            elsif Has_Excluded_Statement\n-                    (Subp, Statements (Handled_Statement_Sequence (N)))\n-            then\n-               return False;\n-            end if;\n-         end if;\n-\n-         --  For backward compatibility, compiling under -gnatN we do not\n-         --  inline a subprogram that is too large, unless it is marked\n-         --  Inline_Always. This pragma does not suppress the other checks\n-         --  on inlining (forbidden declarations, handlers, etc).\n-\n-         if Front_End_Inlining\n-           and then\n-             not (Has_Pragma_Inline_Always (Subp) or else GNATprove_Mode)\n-           and then Number_Of_Statements\n-                      (Statements (Handled_Statement_Sequence (N))) > Max_Size\n-         then\n-            Cannot_Inline (\"cannot inline& (body too large)?\", N, Subp);\n-            return False;\n-         end if;\n-\n-         --  If some enclosing body contains instantiations that appear before\n-         --  the corresponding generic body, the enclosing body has a freeze\n-         --  node so that it can be elaborated after the generic itself. This\n-         --  might conflict with subsequent inlinings, so that it is unsafe to\n-         --  try to inline in such a case.\n-\n-         if Has_Pending_Instantiation then\n-            Cannot_Inline\n-              (\"cannot inline& (forward instance within enclosing body)?\",\n-               N, Subp);\n-            return False;\n-         end if;\n-\n-         --  Generate and preanalyze the body to inline (needed to perform\n-         --  the rest of the checks)\n-\n-         Generate_Body_To_Inline (N, Body_To_Analyze);\n-\n-         if Ekind (Subp) = E_Function then\n-            Set_Result_Definition (Specification (Body_To_Analyze),\n-              New_Occurrence_Of (Etype (Subp), Sloc (N)));\n-         end if;\n-\n-         --  Nest the body to analyze within the real one\n-\n-         if No (Declarations (N)) then\n-            Set_Declarations (N, New_List (Body_To_Analyze));\n-         else\n-            Append_To (Declarations (N), Body_To_Analyze);\n-         end if;\n-\n-         Preanalyze (Body_To_Analyze);\n-         Remove (Body_To_Analyze);\n-\n-         --  Keep separate checks needed when compiling without optimizations\n-\n-         if Optimization_Level = 0\n-\n-           --  AAMP and VM targets have no support for inlining in the backend\n-           --  and hence we use frontend inlining at all optimization levels.\n-\n-           or else AAMP_On_Target\n-           or else VM_Target /= No_VM\n-         then\n-            --  Cannot inline functions whose body has a call that returns an\n-            --  unconstrained type since the secondary stack is involved, and\n-            --  it is not worth inlining.\n-\n-            if Uses_Secondary_Stack (Body_To_Analyze) then\n-               return False;\n-\n-            --  Cannot inline functions that return controlled types since\n-            --  controlled actions interfere in complex ways with inlining.\n-\n-            elsif Ekind (Subp) = E_Function\n-              and then Needs_Finalization (Etype (Subp))\n-            then\n-               Cannot_Inline\n-                 (\"cannot inline & (controlled return type)?\", N, Subp);\n-               return False;\n-\n-            elsif Returns_Unconstrained_Type (Subp) then\n-\n-               if Back_End_Inlining\n-                 and then Can_Split_Unconstrained_Function (N)\n-               then\n-                  return True;\n-\n-               elsif Has_Single_Return (N) then\n-                  return True;\n-\n-               --  Otherwise the secondary stack is involved, and it is not\n-               --  worth inlining.\n-\n-               else\n-                  Cannot_Inline\n-                    (\"cannot inline & (unconstrained return type)?\", N, Subp);\n-               end if;\n-\n-               return False;\n-            end if;\n-\n-         --  Compiling with optimizations enabled\n-\n-         else\n-            --  Procedures are never frontend inlined in this case\n-\n-            if Ekind (Subp) /= E_Function then\n-               return False;\n-\n-            --  Functions returning unconstrained types are tested\n-            --  separately (see Can_Split_Unconstrained_Function).\n-\n-            elsif Returns_Unconstrained_Type (Subp) then\n-               return True;\n-\n-            --  Check supported cases\n-\n-            elsif not Returns_Compile_Time_Constant (Body_To_Analyze)\n-              and then Convention (Subp) /= Convention_Intrinsic\n-              and then not Returns_Intrinsic_Function_Call (Body_To_Analyze)\n-            then\n-               return False;\n-            end if;\n-         end if;\n-\n-         return True;\n-      end Check_Body_To_Inline;\n-\n       --------------------------------------\n       -- Can_Split_Unconstrained_Function --\n       --------------------------------------\n@@ -2391,44 +1693,10 @@ package body Inline is\n       -- Generate_Body_To_Inline --\n       -----------------------------\n \n-      procedure Generate_Body_To_Inline\n+      procedure Generate_Subprogram_Body\n         (N              : Node_Id;\n          Body_To_Inline : out Node_Id)\n       is\n-         procedure Remove_Pragmas (N : Node_Id);\n-         --  Remove occurrences of pragmas that may reference the formals of\n-         --  N. The analysis of the non-inlined body will handle these pragmas\n-         --  properly.\n-\n-         --------------------\n-         -- Remove_Pragmas --\n-         --------------------\n-\n-         procedure Remove_Pragmas (N : Node_Id) is\n-            Decl : Node_Id;\n-            Nxt  : Node_Id;\n-\n-         begin\n-            Decl := First (Declarations (N));\n-            while Present (Decl) loop\n-               Nxt := Next (Decl);\n-\n-               if Nkind (Decl) = N_Pragma\n-                 and then Nam_In (Pragma_Name (Decl), Name_Contract_Cases,\n-                                                      Name_Precondition,\n-                                                      Name_Postcondition,\n-                                                      Name_Unreferenced,\n-                                                      Name_Unmodified)\n-               then\n-                  Remove (Decl);\n-               end if;\n-\n-               Decl := Nxt;\n-            end loop;\n-         end Remove_Pragmas;\n-\n-      --  Start of processing for Generate_Body_To_Inline\n-\n       begin\n          --  Within an instance, the body to inline must be treated as a nested\n          --  generic, so that the proper global references are preserved.\n@@ -2467,7 +1735,7 @@ package body Inline is\n          Set_Defining_Unit_Name (Specification (Body_To_Inline),\n             Make_Defining_Identifier (Sloc (N), New_Internal_Name ('P')));\n          Set_Corresponding_Spec (Body_To_Inline, Empty);\n-      end Generate_Body_To_Inline;\n+      end Generate_Subprogram_Body;\n \n       ----------------------------------\n       -- Split_Unconstrained_Function --\n@@ -2673,9 +1941,31 @@ package body Inline is\n          Rewrite (Ret_Node, Blk_Stmt);\n       end Split_Unconstrained_Function;\n \n-   --  Start of processing for Check_And_Build_Body_To_Inline\n+      --  Local variables\n+\n+      Decl : constant Node_Id := Unit_Declaration_Node (Spec_Id);\n+\n+   --  Start of processing for Check_And_Split_Unconstrained_Function\n \n    begin\n+      pragma Assert (Back_End_Inlining\n+        and then Ekind (Spec_Id) = E_Function\n+        and then Returns_Unconstrained_Type (Spec_Id)\n+        and then Comes_From_Source (Body_Id)\n+        and then (Has_Pragma_Inline_Always (Spec_Id)\n+                    or else Optimization_Level > 0));\n+\n+      --  This routine must not be used in GNATprove mode since GNATprove\n+      --  relies on frontend inlining\n+\n+      pragma Assert (not GNATprove_Mode);\n+\n+      --  No need to split the function if we cannot generate the code\n+\n+      if Serious_Errors_Detected /= 0 then\n+         return;\n+      end if;\n+\n       --  Do not inline any subprogram that contains nested subprograms,\n       --  since the backend inlining circuit seems to generate uninitialized\n       --  references in this case. We know this happens in the case of front\n@@ -2690,60 +1980,68 @@ package body Inline is\n       --  error cases, this code blows up, and we don't need it anyway if\n       --  there have been errors, since we won't get to the linker anyway.\n \n-      if Comes_From_Source (Body_Id)\n-        and then (Has_Pragma_Inline_Always (Spec_Id)\n-                   or else Optimization_Level > 0)\n-        and then Serious_Errors_Detected = 0\n-      then\n-         declare\n-            P_Ent : Node_Id;\n+      declare\n+         P_Ent : Node_Id;\n \n-         begin\n-            P_Ent := Body_Id;\n-            loop\n-               P_Ent := Scope (P_Ent);\n-               exit when No (P_Ent) or else P_Ent = Standard_Standard;\n+      begin\n+         P_Ent := Body_Id;\n+         loop\n+            P_Ent := Scope (P_Ent);\n+            exit when No (P_Ent) or else P_Ent = Standard_Standard;\n \n-               if Is_Subprogram (P_Ent) then\n-                  Set_Is_Inlined (P_Ent, False);\n+            if Is_Subprogram (P_Ent) then\n+               Set_Is_Inlined (P_Ent, False);\n \n-                  --  In GNATprove mode, issue a warning, and indicate that\n-                  --  the subprogram is not always inlined by setting flag\n-                  --  Is_Inlined_Always to False.\n+               if Comes_From_Source (P_Ent)\n+                 and then (Has_Pragma_Inline (P_Ent))\n+               then\n+                  Cannot_Inline\n+                    (\"cannot inline& (nested subprogram)?\", N, P_Ent,\n+                     Is_Serious => True);\n+                  return;\n+               end if;\n+            end if;\n+         end loop;\n+      end;\n \n-                  if GNATprove_Mode then\n-                     Set_Is_Inlined_Always (P_Ent, False);\n-                  end if;\n+      --  No action needed in stubs since the attribute Body_To_Inline\n+      --  is not available\n \n-                  if Comes_From_Source (P_Ent)\n-                    and then (Has_Pragma_Inline (P_Ent) or else GNATprove_Mode)\n-                  then\n-                     Cannot_Inline\n-                       (\"cannot inline& (nested subprogram)?\", N, P_Ent,\n-                        Is_Serious => True);\n-                  end if;\n-               end if;\n-            end loop;\n-         end;\n+      if Nkind (Decl) = N_Subprogram_Body_Stub then\n+         return;\n+\n+      --  Cannot build the body to inline if the attribute is already set.\n+      --  This attribute may have been set if this is a subprogram renaming\n+      --  declarations (see Freeze.Build_Renamed_Body).\n+\n+      elsif Present (Body_To_Inline (Decl)) then\n+         return;\n+\n+      --  Check excluded declarations\n+\n+      elsif Present (Declarations (N))\n+        and then Has_Excluded_Declaration (Spec_Id, Declarations (N))\n+      then\n+         return;\n+\n+      --  Check excluded statements. There is no need to protect us against\n+      --  exception handlers since they are supported by the GCC backend.\n+\n+      elsif Present (Handled_Statement_Sequence (N))\n+        and then Has_Excluded_Statement\n+                   (Spec_Id, Statements (Handled_Statement_Sequence (N)))\n+      then\n+         return;\n       end if;\n \n       --  Build the body to inline only if really needed\n \n-      if Check_Body_To_Inline (N, Spec_Id)\n-        and then Serious_Errors_Detected = 0\n-      then\n-         if Returns_Unconstrained_Type (Spec_Id) then\n-            if Can_Split_Unconstrained_Function (N) then\n-               Split_Unconstrained_Function (N, Spec_Id);\n-               Build_Body_To_Inline (N, Spec_Id);\n-               Set_Is_Inlined (Spec_Id);\n-            end if;\n-         elsif not Back_End_Inlining then\n-            Build_Body_To_Inline (N, Spec_Id);\n-            Set_Is_Inlined (Spec_Id);\n-         end if;\n+      if Can_Split_Unconstrained_Function (N) then\n+         Split_Unconstrained_Function (N, Spec_Id);\n+         Build_Body_To_Inline (N, Spec_Id);\n+         Set_Is_Inlined (Spec_Id);\n       end if;\n-   end Check_And_Build_Body_To_Inline;\n+   end Check_And_Split_Unconstrained_Function;\n \n    -------------------------------------\n    -- Check_Package_Body_For_Inlining --\n@@ -4130,6 +3428,12 @@ package body Inline is\n    --  Start of processing for Has_Excluded_Declaration\n \n    begin\n+      --  No action needed if the check is not needed\n+\n+      if not Check_Inlining_Restrictions then\n+         return False;\n+      end if;\n+\n       D := First (Decls);\n       while Present (D) loop\n          if Nkind (D) = N_Subprogram_Body then\n@@ -4199,6 +3503,12 @@ package body Inline is\n       E : Node_Id;\n \n    begin\n+      --  No action needed if the check is not needed\n+\n+      if not Check_Inlining_Restrictions then\n+         return False;\n+      end if;\n+\n       S := First (Stats);\n       while Present (S) loop\n          if Nkind_In (S, N_Abort_Statement,\n@@ -4220,8 +3530,10 @@ package body Inline is\n                return True;\n \n             elsif Present (Handled_Statement_Sequence (S)) then\n-               if Present\n-                    (Exception_Handlers (Handled_Statement_Sequence (S)))\n+               if not Back_End_Inlining\n+                 and then\n+                   Present\n+                     (Exception_Handlers (Handled_Statement_Sequence (S)))\n                then\n                   Cannot_Inline\n                     (\"cannot inline& (exception handler)?\",\n@@ -4282,7 +3594,8 @@ package body Inline is\n             then\n                return True;\n \n-            elsif Present (Handled_Statement_Sequence (S))\n+            elsif not Back_End_Inlining\n+              and then Present (Handled_Statement_Sequence (S))\n               and then\n                 Present (Exception_Handlers\n                           (Handled_Statement_Sequence (S)))\n@@ -4449,6 +3762,11 @@ package body Inline is\n       for J in Hash_Headers'Range loop\n          Hash_Headers (J) := No_Subp;\n       end loop;\n+\n+      Inlined_Calls := No_Elist;\n+      Backend_Calls := No_Elist;\n+      Backend_Inlined_Subps := No_Elist;\n+      Backend_Not_Inlined_Subps := No_Elist;\n    end Initialize;\n \n    ------------------------\n@@ -4552,6 +3870,141 @@ package body Inline is\n       return False;\n    end Is_Nested;\n \n+   ------------------------\n+   -- List_Inlining_Info --\n+   ------------------------\n+\n+   procedure List_Inlining_Info is\n+      Elmt  : Elmt_Id;\n+      Nod   : Node_Id;\n+      Count : Nat;\n+\n+   begin\n+      if not Debug_Flag_Dot_J then\n+         return;\n+      end if;\n+\n+      --  Generate listing of calls inlined by the frontend\n+\n+      if Present (Inlined_Calls) then\n+         Count := 0;\n+         Elmt  := First_Elmt (Inlined_Calls);\n+         while Present (Elmt) loop\n+            Nod := Node (Elmt);\n+\n+            if In_Extended_Main_Code_Unit (Nod) then\n+               Count := Count + 1;\n+\n+               if Count = 1 then\n+                  Write_Str (\"Listing of frontend inlined calls\");\n+                  Write_Eol;\n+               end if;\n+\n+               Write_Str (\"  \");\n+               Write_Int (Count);\n+               Write_Str (\":\");\n+               Write_Location (Sloc (Nod));\n+               Write_Str (\":\");\n+               Output.Write_Eol;\n+            end if;\n+\n+            Next_Elmt (Elmt);\n+         end loop;\n+      end if;\n+\n+      --  Generate listing of calls passed to the backend\n+\n+      if Present (Backend_Calls) then\n+         Count := 0;\n+\n+         Elmt := First_Elmt (Backend_Calls);\n+         while Present (Elmt) loop\n+            Nod := Node (Elmt);\n+\n+            if In_Extended_Main_Code_Unit (Nod) then\n+               Count := Count + 1;\n+\n+               if Count = 1 then\n+                  Write_Str (\"Listing of inlined calls passed to the backend\");\n+                  Write_Eol;\n+               end if;\n+\n+               Write_Str (\"  \");\n+               Write_Int (Count);\n+               Write_Str (\":\");\n+               Write_Location (Sloc (Nod));\n+               Output.Write_Eol;\n+            end if;\n+\n+            Next_Elmt (Elmt);\n+         end loop;\n+      end if;\n+\n+      --  Generate listing of subprograms passed to the backend\n+\n+      if Present (Backend_Inlined_Subps)\n+        and then Back_End_Inlining\n+      then\n+         Count := 0;\n+\n+         Elmt := First_Elmt (Backend_Inlined_Subps);\n+         while Present (Elmt) loop\n+            Nod := Node (Elmt);\n+\n+            Count := Count + 1;\n+\n+            if Count = 1 then\n+               Write_Str\n+                 (\"Listing of inlined subprograms passed to the backend\");\n+               Write_Eol;\n+            end if;\n+\n+            Write_Str (\"  \");\n+            Write_Int (Count);\n+            Write_Str (\":\");\n+            Write_Name (Chars (Nod));\n+            Write_Str (\" (\");\n+            Write_Location (Sloc (Nod));\n+            Write_Str (\")\");\n+            Output.Write_Eol;\n+\n+            Next_Elmt (Elmt);\n+         end loop;\n+      end if;\n+\n+      --  Generate listing of subprogram that cannot be inlined by the backend\n+\n+      if Present (Backend_Not_Inlined_Subps)\n+        and then Back_End_Inlining\n+      then\n+         Count := 0;\n+\n+         Elmt := First_Elmt (Backend_Not_Inlined_Subps);\n+         while Present (Elmt) loop\n+            Nod := Node (Elmt);\n+\n+            Count := Count + 1;\n+\n+            if Count = 1 then\n+               Write_Str\n+                 (\"Listing of subprograms that cannot inline the backend\");\n+               Write_Eol;\n+            end if;\n+\n+            Write_Str (\"  \");\n+            Write_Int (Count);\n+            Write_Str (\":\");\n+            Write_Name (Chars (Nod));\n+            Write_Str (\" (\");\n+            Write_Location (Sloc (Nod));\n+            Write_Str (\")\");\n+            Output.Write_Eol;\n+\n+            Next_Elmt (Elmt);\n+         end loop;\n+      end if;\n+   end List_Inlining_Info;\n+\n    ----------\n    -- Lock --\n    ----------\n@@ -4568,26 +4021,6 @@ package body Inline is\n       Inlined.Release;\n    end Lock;\n \n-   --------------------------\n-   -- Number_Of_Statements --\n-   --------------------------\n-\n-   --  Why not List_Length???\n-\n-   function Number_Of_Statements (Stats : List_Id) return Natural is\n-      Stat_Count : Integer := 0;\n-      Stmt       : Node_Id;\n-\n-   begin\n-      Stmt := First (Stats);\n-      while Present (Stmt) loop\n-         Stat_Count := Stat_Count + 1;\n-         Next (Stmt);\n-      end loop;\n-\n-      return Stat_Count;\n-   end Number_Of_Statements;\n-\n    ---------------------------\n    -- Register_Backend_Call --\n    ---------------------------\n@@ -4620,4 +4053,31 @@ package body Inline is\n       end loop;\n    end Remove_Dead_Instance;\n \n+   --------------------\n+   -- Remove_Pragmas --\n+   --------------------\n+\n+   procedure Remove_Pragmas (Bod : Node_Id) is\n+      Decl : Node_Id;\n+      Nxt  : Node_Id;\n+\n+   begin\n+      Decl := First (Declarations (Bod));\n+      while Present (Decl) loop\n+         Nxt := Next (Decl);\n+\n+         if Nkind (Decl) = N_Pragma\n+           and then Nam_In (Pragma_Name (Decl), Name_Contract_Cases,\n+                                                Name_Precondition,\n+                                                Name_Postcondition,\n+                                                Name_Unreferenced,\n+                                                Name_Unmodified)\n+         then\n+            Remove (Decl);\n+         end if;\n+\n+         Decl := Nxt;\n+      end loop;\n+   end Remove_Pragmas;\n+\n end Inline;"}, {"sha": "632cbc2c2e5ee5d638454e84d1b503de9e1ac74d", "filename": "gcc/ada/inline.ads", "status": "modified", "additions": 15, "deletions": 22, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/16b10ccc1f7d3deeaaa5b976fcbca04fba035e9c/gcc%2Fada%2Finline.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/16b10ccc1f7d3deeaaa5b976fcbca04fba035e9c/gcc%2Fada%2Finline.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Finline.ads?ref=16b10ccc1f7d3deeaaa5b976fcbca04fba035e9c", "patch": "@@ -134,18 +134,6 @@ package Inline is\n    --  The following should be initialized in an init call in Frontend, we\n    --  have thoughts of making the frontend reusable in future ???\n \n-   Inlined_Calls : Elist_Id := No_Elist;\n-   --  List of frontend inlined calls\n-\n-   Backend_Calls : Elist_Id := No_Elist;\n-   --  List of inline calls passed to the backend\n-\n-   Backend_Inlined_Subps : Elist_Id := No_Elist;\n-   --  List of subprograms inlined by the backend\n-\n-   Backend_Not_Inlined_Subps : Elist_Id := No_Elist;\n-   --  List of subprograms that cannot be inlined by the backend\n-\n    -----------------\n    -- Subprograms --\n    -----------------\n@@ -171,7 +159,7 @@ package Inline is\n    --  At end of compilation, analyze the bodies of all units that contain\n    --  inlined subprograms that are actually called.\n \n-   procedure Build_Body_To_Inline (N : Node_Id; Subp : Entity_Id);\n+   procedure Build_Body_To_Inline (N : Node_Id; Spec_Id : Entity_Id);\n    --  If a subprogram has pragma Inline and inlining is active, use generic\n    --  machinery to build an unexpanded body for the subprogram. This body is\n    --  subsequently used for inline expansions at call sites. If subprogram can\n@@ -189,16 +177,17 @@ package Inline is\n    --  This procedure is called if the node N, an instance of a call to\n    --  subprogram Subp, cannot be inlined. Msg is the message to be issued,\n    --  which ends with ? (it does not end with ?p?, this routine takes care of\n-   --  the need to change ? to ?p?). Temporarily the behavior of this routine\n-   --  depends on the value of -gnatd.k:\n+   --  the need to change ? to ?p?). The behavior of this routine depends on\n+   --  the value of Back_End_Inlining:\n    --\n-   --    * If -gnatd.k is not set (ie. old inlining model) then if Subp has\n-   --      a pragma Always_Inlined, then an error message is issued (by\n-   --      removing the last character of Msg). If Subp is not Always_Inlined,\n-   --      then a warning is issued if the flag Ineffective_Inline_Warnings\n-   --      is set, adding ?p to the msg, and if not, the call has no effect.\n+   --    * If Back_End_Inlining is not set (ie. legacy frontend inlining model)\n+   --      then if Subp has a pragma Always_Inlined, then an error message is\n+   --      issued (by removing the last character of Msg). If Subp is not\n+   --      Always_Inlined, then a warning is issued if the flag Ineffective_\n+   --      Inline_Warnings is set, adding ?p to the msg, and if not, the call\n+   --      has no effect.\n    --\n-   --    * If -gnatd.k is set (ie. new inlining model) then:\n+   --    * If Back_End_Inlining is set then:\n    --      - If Is_Serious is true, then an error is reported (by removing the\n    --        last character of Msg);\n    --\n@@ -214,7 +203,7 @@ package Inline is\n    --          flag Ineffective_Inline_Warnings is set (adding p?); otherwise\n    --          no effect since inlining may be performed by the backend.\n \n-   procedure Check_And_Build_Body_To_Inline\n+   procedure Check_And_Split_Unconstrained_Function\n      (N       : Node_Id;\n       Spec_Id : Entity_Id;\n       Body_Id : Entity_Id);\n@@ -254,6 +243,10 @@ package Inline is\n    --  Check a list of statements, Stats, that make inlining of Subp not\n    --  worthwhile, including any tasking statement, nested at any level.\n \n+   procedure List_Inlining_Info;\n+   --  Generate listing of calls inlined by the frontend plus listing of\n+   --  calls to inline subprograms passed to the backend.\n+\n    procedure Register_Backend_Call (N : Node_Id);\n    --  Append N to the list Backend_Calls\n "}, {"sha": "808ad006743074dc065e42d7a3574ceb9df152de", "filename": "gcc/ada/make.adb", "status": "modified", "additions": 11, "deletions": 9, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/16b10ccc1f7d3deeaaa5b976fcbca04fba035e9c/gcc%2Fada%2Fmake.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/16b10ccc1f7d3deeaaa5b976fcbca04fba035e9c/gcc%2Fada%2Fmake.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fmake.adb?ref=16b10ccc1f7d3deeaaa5b976fcbca04fba035e9c", "patch": "@@ -6948,15 +6948,17 @@ package body Make is\n \n    procedure List_Bad_Compilations is\n    begin\n-      for J in Bad_Compilation.First .. Bad_Compilation.Last loop\n-         if Bad_Compilation.Table (J).File = No_File then\n-            null;\n-         elsif not Bad_Compilation.Table (J).Found then\n-            Inform (Bad_Compilation.Table (J).File, \"not found\");\n-         else\n-            Inform (Bad_Compilation.Table (J).File, \"compilation error\");\n-         end if;\n-      end loop;\n+      if not Debug.Debug_Flag_S then\n+         for J in Bad_Compilation.First .. Bad_Compilation.Last loop\n+            if Bad_Compilation.Table (J).File = No_File then\n+               null;\n+            elsif not Bad_Compilation.Table (J).Found then\n+               Inform (Bad_Compilation.Table (J).File, \"not found\");\n+            else\n+               Inform (Bad_Compilation.Table (J).File, \"compilation error\");\n+            end if;\n+         end loop;\n+      end if;\n    end List_Bad_Compilations;\n \n    -----------------"}, {"sha": "a988c6a0bccb83a85985b0cbd217bda50de4a5d2", "filename": "gcc/ada/makeutl.adb", "status": "modified", "additions": 8, "deletions": 3, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/16b10ccc1f7d3deeaaa5b976fcbca04fba035e9c/gcc%2Fada%2Fmakeutl.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/16b10ccc1f7d3deeaaa5b976fcbca04fba035e9c/gcc%2Fada%2Fmakeutl.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fmakeutl.adb?ref=16b10ccc1f7d3deeaaa5b976fcbca04fba035e9c", "patch": "@@ -777,7 +777,7 @@ package body Makeutl is\n       Flush_Messages : Boolean := True)\n    is\n    begin\n-      if Flush_Messages then\n+      if Flush_Messages and then not Debug.Debug_Flag_S then\n          if Total_Errors_Detected /= 0 or else Warnings_Detected /= 0 then\n             Errutil.Finalize;\n          end if;\n@@ -806,8 +806,13 @@ package body Makeutl is\n \n       if S'Length > 0 then\n          if Exit_Code /= E_Success then\n-            Osint.Fail (S);\n-         else\n+            if Debug.Debug_Flag_S then\n+               Osint.Exit_Program (E_Fatal);\n+            else\n+               Osint.Fail (S);\n+            end if;\n+\n+         elsif not Debug.Debug_Flag_S then\n             Write_Str (S);\n          end if;\n       end if;"}, {"sha": "3828cc13b2bc8d0521e7db5a8aa3492d1d184cfb", "filename": "gcc/ada/s-assert.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/16b10ccc1f7d3deeaaa5b976fcbca04fba035e9c/gcc%2Fada%2Fs-assert.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/16b10ccc1f7d3deeaaa5b976fcbca04fba035e9c/gcc%2Fada%2Fs-assert.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-assert.adb?ref=16b10ccc1f7d3deeaaa5b976fcbca04fba035e9c", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1992-2013, Free Software Foundation, Inc.          --\n+--          Copyright (C) 1992-2014, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --"}, {"sha": "bc8b4a653b9c77efb2ff5a2fd9c79bb4523e1496", "filename": "gcc/ada/s-boarop.ads", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/16b10ccc1f7d3deeaaa5b976fcbca04fba035e9c/gcc%2Fada%2Fs-boarop.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/16b10ccc1f7d3deeaaa5b976fcbca04fba035e9c/gcc%2Fada%2Fs-boarop.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-boarop.ads?ref=16b10ccc1f7d3deeaaa5b976fcbca04fba035e9c", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 S p e c                                  --\n --                                                                          --\n---           Copyright (C) 2002-2009 Free Software Foundation, Inc.         --\n+--          Copyright (C) 2002-2014, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --"}, {"sha": "c12ff1e5e29c401a180e85a4919f906f05a81699", "filename": "gcc/ada/s-carsi8.ads", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/16b10ccc1f7d3deeaaa5b976fcbca04fba035e9c/gcc%2Fada%2Fs-carsi8.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/16b10ccc1f7d3deeaaa5b976fcbca04fba035e9c/gcc%2Fada%2Fs-carsi8.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-carsi8.ads?ref=16b10ccc1f7d3deeaaa5b976fcbca04fba035e9c", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 S p e c                                  --\n --                                                                          --\n---          Copyright (C) 2002-2009 Free Software Foundation, Inc.          --\n+--          Copyright (C) 2002-2014, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --"}, {"sha": "b970b7b5d886e9f582bb9fd53961bedd30459c2b", "filename": "gcc/ada/s-casi16.ads", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/16b10ccc1f7d3deeaaa5b976fcbca04fba035e9c/gcc%2Fada%2Fs-casi16.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/16b10ccc1f7d3deeaaa5b976fcbca04fba035e9c/gcc%2Fada%2Fs-casi16.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-casi16.ads?ref=16b10ccc1f7d3deeaaa5b976fcbca04fba035e9c", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 S p e c                                  --\n --                                                                          --\n---          Copyright (C) 2002-2009 Free Software Foundation, Inc.          --\n+--          Copyright (C) 2002-2014, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --"}, {"sha": "8c3a208d631440aa6ca601d7792dca994c4dd8af", "filename": "gcc/ada/s-casi32.ads", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/16b10ccc1f7d3deeaaa5b976fcbca04fba035e9c/gcc%2Fada%2Fs-casi32.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/16b10ccc1f7d3deeaaa5b976fcbca04fba035e9c/gcc%2Fada%2Fs-casi32.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-casi32.ads?ref=16b10ccc1f7d3deeaaa5b976fcbca04fba035e9c", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 S p e c                                  --\n --                                                                          --\n---          Copyright (C) 2002-2009 Free Software Foundation, Inc.          --\n+--          Copyright (C) 2002-2014, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --"}, {"sha": "e8a28bdfa0964014f6869c94a125a9141e18ec90", "filename": "gcc/ada/s-casi64.ads", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/16b10ccc1f7d3deeaaa5b976fcbca04fba035e9c/gcc%2Fada%2Fs-casi64.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/16b10ccc1f7d3deeaaa5b976fcbca04fba035e9c/gcc%2Fada%2Fs-casi64.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-casi64.ads?ref=16b10ccc1f7d3deeaaa5b976fcbca04fba035e9c", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 S p e c                                  --\n --                                                                          --\n---          Copyright (C) 2002-2009 Free Software Foundation, Inc.          --\n+--          Copyright (C) 2002-2014, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --"}, {"sha": "31c0e091d0ee0754aae1806f9b75b936d9473b16", "filename": "gcc/ada/s-caun16.ads", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/16b10ccc1f7d3deeaaa5b976fcbca04fba035e9c/gcc%2Fada%2Fs-caun16.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/16b10ccc1f7d3deeaaa5b976fcbca04fba035e9c/gcc%2Fada%2Fs-caun16.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-caun16.ads?ref=16b10ccc1f7d3deeaaa5b976fcbca04fba035e9c", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 S p e c                                  --\n --                                                                          --\n---          Copyright (C) 2002-2009 Free Software Foundation, Inc.          --\n+--          Copyright (C) 2002-2014, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --"}, {"sha": "61ff42175427bed69aa359a39badd017d9732eda", "filename": "gcc/ada/s-caun32.ads", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/16b10ccc1f7d3deeaaa5b976fcbca04fba035e9c/gcc%2Fada%2Fs-caun32.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/16b10ccc1f7d3deeaaa5b976fcbca04fba035e9c/gcc%2Fada%2Fs-caun32.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-caun32.ads?ref=16b10ccc1f7d3deeaaa5b976fcbca04fba035e9c", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 S p e c                                  --\n --                                                                          --\n---          Copyright (C) 2002-2009 Free Software Foundation, Inc.          --\n+--          Copyright (C) 2002-2014, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --"}, {"sha": "c2255168fc9e686416aef4310be32233a04ad7be", "filename": "gcc/ada/s-caun64.ads", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/16b10ccc1f7d3deeaaa5b976fcbca04fba035e9c/gcc%2Fada%2Fs-caun64.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/16b10ccc1f7d3deeaaa5b976fcbca04fba035e9c/gcc%2Fada%2Fs-caun64.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-caun64.ads?ref=16b10ccc1f7d3deeaaa5b976fcbca04fba035e9c", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 S p e c                                  --\n --                                                                          --\n---          Copyright (C) 2002-2009 Free Software Foundation, Inc.          --\n+--          Copyright (C) 2002-2014, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --"}, {"sha": "c87e3848689c6110cfbde21797de514f49dcdb4e", "filename": "gcc/ada/s-dsaser.ads", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/16b10ccc1f7d3deeaaa5b976fcbca04fba035e9c/gcc%2Fada%2Fs-dsaser.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/16b10ccc1f7d3deeaaa5b976fcbca04fba035e9c/gcc%2Fada%2Fs-dsaser.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-dsaser.ads?ref=16b10ccc1f7d3deeaaa5b976fcbca04fba035e9c", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                  S p e c                                 --\n --                                                                          --\n---         Copyright (C) 2006-2009  Free Software Foundation, Inc.          --\n+--          Copyright (C) 2006-2014, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNARL is free software; you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --"}, {"sha": "5b4f9673c0caa60fbbfa07a331560595f0d0007e", "filename": "gcc/ada/s-exnint.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/16b10ccc1f7d3deeaaa5b976fcbca04fba035e9c/gcc%2Fada%2Fs-exnint.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/16b10ccc1f7d3deeaaa5b976fcbca04fba035e9c/gcc%2Fada%2Fs-exnint.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-exnint.adb?ref=16b10ccc1f7d3deeaaa5b976fcbca04fba035e9c", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1992-2009 Free Software Foundation, Inc.          --\n+--          Copyright (C) 1992-2014, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --"}, {"sha": "79773e825e41a131d262134e60c2db393de5f58d", "filename": "gcc/ada/s-exnint.ads", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/16b10ccc1f7d3deeaaa5b976fcbca04fba035e9c/gcc%2Fada%2Fs-exnint.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/16b10ccc1f7d3deeaaa5b976fcbca04fba035e9c/gcc%2Fada%2Fs-exnint.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-exnint.ads?ref=16b10ccc1f7d3deeaaa5b976fcbca04fba035e9c", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 S p e c                                  --\n --                                                                          --\n---          Copyright (C) 1992-2009 Free Software Foundation, Inc.          --\n+--          Copyright (C) 1992-2014, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --"}, {"sha": "e89c12bac4a7d64b64ef80a77dbd49bc52bfb6f8", "filename": "gcc/ada/s-exnlli.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/16b10ccc1f7d3deeaaa5b976fcbca04fba035e9c/gcc%2Fada%2Fs-exnlli.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/16b10ccc1f7d3deeaaa5b976fcbca04fba035e9c/gcc%2Fada%2Fs-exnlli.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-exnlli.adb?ref=16b10ccc1f7d3deeaaa5b976fcbca04fba035e9c", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1992-2009 Free Software Foundation, Inc.          --\n+--          Copyright (C) 1992-2014, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --"}, {"sha": "0c733f869f44a5b143876e53bc8200c7f032f2d8", "filename": "gcc/ada/s-exnlli.ads", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/16b10ccc1f7d3deeaaa5b976fcbca04fba035e9c/gcc%2Fada%2Fs-exnlli.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/16b10ccc1f7d3deeaaa5b976fcbca04fba035e9c/gcc%2Fada%2Fs-exnlli.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-exnlli.ads?ref=16b10ccc1f7d3deeaaa5b976fcbca04fba035e9c", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 S p e c                                  --\n --                                                                          --\n---          Copyright (C) 1992-2009 Free Software Foundation, Inc.          --\n+--          Copyright (C) 1992-2014, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --"}, {"sha": "0e9070514df76fbbf4577cb525267dfdc454615f", "filename": "gcc/ada/s-expint.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/16b10ccc1f7d3deeaaa5b976fcbca04fba035e9c/gcc%2Fada%2Fs-expint.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/16b10ccc1f7d3deeaaa5b976fcbca04fba035e9c/gcc%2Fada%2Fs-expint.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-expint.adb?ref=16b10ccc1f7d3deeaaa5b976fcbca04fba035e9c", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1992-2009 Free Software Foundation, Inc.          --\n+--          Copyright (C) 1992-2014, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --"}, {"sha": "6b4167025891e73bff251ad3d533f41e0e43d61b", "filename": "gcc/ada/s-expint.ads", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/16b10ccc1f7d3deeaaa5b976fcbca04fba035e9c/gcc%2Fada%2Fs-expint.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/16b10ccc1f7d3deeaaa5b976fcbca04fba035e9c/gcc%2Fada%2Fs-expint.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-expint.ads?ref=16b10ccc1f7d3deeaaa5b976fcbca04fba035e9c", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 S p e c                                  --\n --                                                                          --\n---          Copyright (C) 1992-2009 Free Software Foundation, Inc.          --\n+--          Copyright (C) 1992-2014, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --"}, {"sha": "32aae1aa9715c335918595cf4f62dce0751360f9", "filename": "gcc/ada/s-explli.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/16b10ccc1f7d3deeaaa5b976fcbca04fba035e9c/gcc%2Fada%2Fs-explli.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/16b10ccc1f7d3deeaaa5b976fcbca04fba035e9c/gcc%2Fada%2Fs-explli.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-explli.adb?ref=16b10ccc1f7d3deeaaa5b976fcbca04fba035e9c", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1992-2009 Free Software Foundation, Inc.          --\n+--          Copyright (C) 1992-2014, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --"}, {"sha": "9c4f292afe5fc9f40a9199588fe77349513c5f73", "filename": "gcc/ada/s-explli.ads", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/16b10ccc1f7d3deeaaa5b976fcbca04fba035e9c/gcc%2Fada%2Fs-explli.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/16b10ccc1f7d3deeaaa5b976fcbca04fba035e9c/gcc%2Fada%2Fs-explli.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-explli.ads?ref=16b10ccc1f7d3deeaaa5b976fcbca04fba035e9c", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 S p e c                                  --\n --                                                                          --\n---          Copyright (C) 1992-2009 Free Software Foundation, Inc.          --\n+--          Copyright (C) 1992-2014, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --"}, {"sha": "47192b9b0a8600dfbd6580c3df078df91d1f7dc3", "filename": "gcc/ada/s-expllu.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/16b10ccc1f7d3deeaaa5b976fcbca04fba035e9c/gcc%2Fada%2Fs-expllu.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/16b10ccc1f7d3deeaaa5b976fcbca04fba035e9c/gcc%2Fada%2Fs-expllu.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-expllu.adb?ref=16b10ccc1f7d3deeaaa5b976fcbca04fba035e9c", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---           Copyright (C) 1992-2009 Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2014, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --"}, {"sha": "47581b0dbf096adfe7ce8bd12cb74a4a1b037511", "filename": "gcc/ada/s-expuns.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/16b10ccc1f7d3deeaaa5b976fcbca04fba035e9c/gcc%2Fada%2Fs-expuns.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/16b10ccc1f7d3deeaaa5b976fcbca04fba035e9c/gcc%2Fada%2Fs-expuns.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-expuns.adb?ref=16b10ccc1f7d3deeaaa5b976fcbca04fba035e9c", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1992-2009 Free Software Foundation, Inc.          --\n+--          Copyright (C) 1992-2014, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --"}, {"sha": "df8cdf2101c85c00b4ae1c07949c0ca4e9cf623c", "filename": "gcc/ada/s-fore.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/16b10ccc1f7d3deeaaa5b976fcbca04fba035e9c/gcc%2Fada%2Fs-fore.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/16b10ccc1f7d3deeaaa5b976fcbca04fba035e9c/gcc%2Fada%2Fs-fore.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-fore.adb?ref=16b10ccc1f7d3deeaaa5b976fcbca04fba035e9c", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---           Copyright (C) 1992-2009 Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2014, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --"}, {"sha": "f334d96d47fcc481d36c96ce6e162c839cfabcb6", "filename": "gcc/ada/s-fore.ads", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/16b10ccc1f7d3deeaaa5b976fcbca04fba035e9c/gcc%2Fada%2Fs-fore.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/16b10ccc1f7d3deeaaa5b976fcbca04fba035e9c/gcc%2Fada%2Fs-fore.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-fore.ads?ref=16b10ccc1f7d3deeaaa5b976fcbca04fba035e9c", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 S p e c                                  --\n --                                                                          --\n---           Copyright (C) 1992-2012 Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2014, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --"}, {"sha": "3796bc955dcec91fab027f9e5d446ac335cc38b2", "filename": "gcc/ada/s-geveop.ads", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/16b10ccc1f7d3deeaaa5b976fcbca04fba035e9c/gcc%2Fada%2Fs-geveop.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/16b10ccc1f7d3deeaaa5b976fcbca04fba035e9c/gcc%2Fada%2Fs-geveop.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-geveop.ads?ref=16b10ccc1f7d3deeaaa5b976fcbca04fba035e9c", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 S p e c                                  --\n --                                                                          --\n---           Copyright (C) 2002-2009 Free Software Foundation, Inc.         --\n+--          Copyright (C) 2002-2014, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --"}, {"sha": "987b8b08eeb19782978d2a5c8fe61d9d8aed9efd", "filename": "gcc/ada/s-imgbiu.ads", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/16b10ccc1f7d3deeaaa5b976fcbca04fba035e9c/gcc%2Fada%2Fs-imgbiu.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/16b10ccc1f7d3deeaaa5b976fcbca04fba035e9c/gcc%2Fada%2Fs-imgbiu.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-imgbiu.ads?ref=16b10ccc1f7d3deeaaa5b976fcbca04fba035e9c", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 S p e c                                  --\n --                                                                          --\n---           Copyright (C) 1992-2009 Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2014, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --"}, {"sha": "9c94baa3b6db2d84f9b8cb1f5dd641b88c03273a", "filename": "gcc/ada/s-imgllb.ads", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/16b10ccc1f7d3deeaaa5b976fcbca04fba035e9c/gcc%2Fada%2Fs-imgllb.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/16b10ccc1f7d3deeaaa5b976fcbca04fba035e9c/gcc%2Fada%2Fs-imgllb.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-imgllb.ads?ref=16b10ccc1f7d3deeaaa5b976fcbca04fba035e9c", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 S p e c                                  --\n --                                                                          --\n---           Copyright (C) 1992-2009 Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2014, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --"}, {"sha": "baf4a38c377e1ac9333b2c33aa536291a6f6837c", "filename": "gcc/ada/s-imgllw.ads", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/16b10ccc1f7d3deeaaa5b976fcbca04fba035e9c/gcc%2Fada%2Fs-imgllw.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/16b10ccc1f7d3deeaaa5b976fcbca04fba035e9c/gcc%2Fada%2Fs-imgllw.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-imgllw.ads?ref=16b10ccc1f7d3deeaaa5b976fcbca04fba035e9c", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 S p e c                                  --\n --                                                                          --\n---           Copyright (C) 1992-2009 Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2014, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --"}, {"sha": "04f6e5a5c27fc3691512e272a7b3f027dbc366ba", "filename": "gcc/ada/s-mantis.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/16b10ccc1f7d3deeaaa5b976fcbca04fba035e9c/gcc%2Fada%2Fs-mantis.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/16b10ccc1f7d3deeaaa5b976fcbca04fba035e9c/gcc%2Fada%2Fs-mantis.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-mantis.adb?ref=16b10ccc1f7d3deeaaa5b976fcbca04fba035e9c", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---         Copyright (C) 1996-2009 Free Software Foundation, Inc.           --\n+--          Copyright (C) 1996-2014, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --"}, {"sha": "51692999256f3cc6987f3ba55e77057073915b5e", "filename": "gcc/ada/s-mantis.ads", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/16b10ccc1f7d3deeaaa5b976fcbca04fba035e9c/gcc%2Fada%2Fs-mantis.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/16b10ccc1f7d3deeaaa5b976fcbca04fba035e9c/gcc%2Fada%2Fs-mantis.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-mantis.ads?ref=16b10ccc1f7d3deeaaa5b976fcbca04fba035e9c", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 S p e c                                  --\n --                                                                          --\n---          Copyright (C) 1996-2009 Free Software Foundation, Inc.          --\n+--          Copyright (C) 1996-2014, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --"}, {"sha": "fc2403fdfbf4cfc09cbe6f8b55b94b6133722e7d", "filename": "gcc/ada/s-memcop.ads", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/16b10ccc1f7d3deeaaa5b976fcbca04fba035e9c/gcc%2Fada%2Fs-memcop.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/16b10ccc1f7d3deeaaa5b976fcbca04fba035e9c/gcc%2Fada%2Fs-memcop.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-memcop.ads?ref=16b10ccc1f7d3deeaaa5b976fcbca04fba035e9c", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 S p e c                                  --\n --                                                                          --\n---          Copyright (C) 2001-2009 Free Software Foundation, Inc.          --\n+--          Copyright (C) 2001-2014, Free Software Foundation, Inc.         --\n --                                                                          --\n -- This specification is derived from the Ada Reference Manual for use with --\n -- GNAT. The copyright notice above, and the license provisions that follow --"}, {"sha": "5a84b50f4c5f21f3d18dd6d33e3e4da24793a656", "filename": "gcc/ada/s-powtab.ads", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/16b10ccc1f7d3deeaaa5b976fcbca04fba035e9c/gcc%2Fada%2Fs-powtab.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/16b10ccc1f7d3deeaaa5b976fcbca04fba035e9c/gcc%2Fada%2Fs-powtab.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-powtab.ads?ref=16b10ccc1f7d3deeaaa5b976fcbca04fba035e9c", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 S p e c                                  --\n --                                                                          --\n---          Copyright (C) 1992-2009 Free Software Foundation, Inc.          --\n+--          Copyright (C) 1992-2014, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --"}, {"sha": "1d7e424c92eb5c38008cac73fb86ab8a069abbb9", "filename": "gcc/ada/s-proinf.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/16b10ccc1f7d3deeaaa5b976fcbca04fba035e9c/gcc%2Fada%2Fs-proinf.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/16b10ccc1f7d3deeaaa5b976fcbca04fba035e9c/gcc%2Fada%2Fs-proinf.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-proinf.adb?ref=16b10ccc1f7d3deeaaa5b976fcbca04fba035e9c", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---             Copyright (C) 1996-2009 Free Software Foundation, Inc.       --\n+--          Copyright (C) 1996-2014, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --"}, {"sha": "d48d163a13e29acfd961c05b002a9e9b007eb3a8", "filename": "gcc/ada/s-tasinf.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/16b10ccc1f7d3deeaaa5b976fcbca04fba035e9c/gcc%2Fada%2Fs-tasinf.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/16b10ccc1f7d3deeaaa5b976fcbca04fba035e9c/gcc%2Fada%2Fs-tasinf.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-tasinf.adb?ref=16b10ccc1f7d3deeaaa5b976fcbca04fba035e9c", "patch": "@@ -7,7 +7,7 @@\n --                                 B o d y                                  --\n --                           (Compiler Interface)                           --\n --                                                                          --\n---          Copyright (C) 1998-2009 Free Software Foundation, Inc.          --\n+--          Copyright (C) 1998-2014, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --"}, {"sha": "e370efafd46da61abbc5ab7a8e627ff36054eed9", "filename": "gcc/ada/s-traces-default.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/16b10ccc1f7d3deeaaa5b976fcbca04fba035e9c/gcc%2Fada%2Fs-traces-default.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/16b10ccc1f7d3deeaaa5b976fcbca04fba035e9c/gcc%2Fada%2Fs-traces-default.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-traces-default.adb?ref=16b10ccc1f7d3deeaaa5b976fcbca04fba035e9c", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                  B o d y                                 --\n --                                                                          --\n---           Copyright (C) 2001-2009 Free Software Foundation, Inc.         --\n+--          Copyright (C) 2001-2014, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNARL is free software; you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --"}, {"sha": "abf7e8da9a6894216d68ceb4e470a4985413d93a", "filename": "gcc/ada/s-traces.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/16b10ccc1f7d3deeaaa5b976fcbca04fba035e9c/gcc%2Fada%2Fs-traces.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/16b10ccc1f7d3deeaaa5b976fcbca04fba035e9c/gcc%2Fada%2Fs-traces.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-traces.adb?ref=16b10ccc1f7d3deeaaa5b976fcbca04fba035e9c", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                  B o d y                                 --\n --                                                                          --\n---           Copyright (C) 2001-2009 Free Software Foundation, Inc.         --\n+--          Copyright (C) 2001-2014, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNARL is free software; you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --"}, {"sha": "24f0d248182d982f68732a2933db7e61357904ad", "filename": "gcc/ada/s-tratas-default.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/16b10ccc1f7d3deeaaa5b976fcbca04fba035e9c/gcc%2Fada%2Fs-tratas-default.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/16b10ccc1f7d3deeaaa5b976fcbca04fba035e9c/gcc%2Fada%2Fs-tratas-default.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-tratas-default.adb?ref=16b10ccc1f7d3deeaaa5b976fcbca04fba035e9c", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                  B o d y                                 --\n --                                                                          --\n---           Copyright (C) 2001-2009 Free Software Foundation, Inc.         --\n+--          Copyright (C) 2001-2014, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNARL is free software;  you can redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --"}, {"sha": "7a6ac5d8fe8913aa3285945f981024ce68a5900f", "filename": "gcc/ada/s-tratas.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/16b10ccc1f7d3deeaaa5b976fcbca04fba035e9c/gcc%2Fada%2Fs-tratas.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/16b10ccc1f7d3deeaaa5b976fcbca04fba035e9c/gcc%2Fada%2Fs-tratas.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-tratas.adb?ref=16b10ccc1f7d3deeaaa5b976fcbca04fba035e9c", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                  B o d y                                 --\n --                                                                          --\n---          Copyright (C) 2001-2009 Free Software Foundation, Inc.          --\n+--          Copyright (C) 2001-2014, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNARL is free software;  you can redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --"}, {"sha": "8f89445cdc7afe35fda5fd52575270084cdb3287", "filename": "gcc/ada/s-tratas.ads", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/16b10ccc1f7d3deeaaa5b976fcbca04fba035e9c/gcc%2Fada%2Fs-tratas.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/16b10ccc1f7d3deeaaa5b976fcbca04fba035e9c/gcc%2Fada%2Fs-tratas.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-tratas.ads?ref=16b10ccc1f7d3deeaaa5b976fcbca04fba035e9c", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                  S p e c                                 --\n --                                                                          --\n---          Copyright (C) 2001-2009 Free Software Foundation, Inc.          --\n+--          Copyright (C) 2001-2014, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNARL is free software;  you can redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --"}, {"sha": "4c529b2924bc2aeaad8e0b372efba93f93c434d6", "filename": "gcc/ada/s-vector.ads", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/16b10ccc1f7d3deeaaa5b976fcbca04fba035e9c/gcc%2Fada%2Fs-vector.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/16b10ccc1f7d3deeaaa5b976fcbca04fba035e9c/gcc%2Fada%2Fs-vector.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-vector.ads?ref=16b10ccc1f7d3deeaaa5b976fcbca04fba035e9c", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 S p e c                                  --\n --                                                                          --\n---          Copyright (C) 2002-2009 Free Software Foundation, Inc.          --\n+--          Copyright (C) 2002-2014, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --"}, {"sha": "fac24f316fdb0f15a801621d63fe095a3e75d494", "filename": "gcc/ada/s-vxwork-x86.ads", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/16b10ccc1f7d3deeaaa5b976fcbca04fba035e9c/gcc%2Fada%2Fs-vxwork-x86.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/16b10ccc1f7d3deeaaa5b976fcbca04fba035e9c/gcc%2Fada%2Fs-vxwork-x86.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-vxwork-x86.ads?ref=16b10ccc1f7d3deeaaa5b976fcbca04fba035e9c", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                   S p e c                                --\n --                                                                          --\n---            Copyright (C) 1998-2009 Free Software Foundation, Inc.        --\n+--          Copyright (C) 1998-2014, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNARL is free software;  you can  redistribute it and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --"}, {"sha": "ecdd93f51084c85fe6021710f87393ca7d99f199", "filename": "gcc/ada/s-wwdwch.ads", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/16b10ccc1f7d3deeaaa5b976fcbca04fba035e9c/gcc%2Fada%2Fs-wwdwch.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/16b10ccc1f7d3deeaaa5b976fcbca04fba035e9c/gcc%2Fada%2Fs-wwdwch.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-wwdwch.ads?ref=16b10ccc1f7d3deeaaa5b976fcbca04fba035e9c", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 S p e c                                  --\n --                                                                          --\n---          Copyright (C) 1992-2009 Free Software Foundation, Inc.          --\n+--          Copyright (C) 1992-2014, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --"}, {"sha": "00f56f9590b74977ea387faf25af63d10ff1e4eb", "filename": "gcc/ada/sem_ch6.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/16b10ccc1f7d3deeaaa5b976fcbca04fba035e9c/gcc%2Fada%2Fsem_ch6.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/16b10ccc1f7d3deeaaa5b976fcbca04fba035e9c/gcc%2Fada%2Fsem_ch6.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch6.adb?ref=16b10ccc1f7d3deeaaa5b976fcbca04fba035e9c", "patch": "@@ -3589,7 +3589,7 @@ package body Sem_Ch6 is\n                  and then Ekind (Spec_Id) = E_Function\n                  and then Returns_Unconstrained_Type (Spec_Id)\n                then\n-                  Check_And_Build_Body_To_Inline (N, Spec_Id, Body_Id);\n+                  Check_And_Split_Unconstrained_Function (N, Spec_Id, Body_Id);\n \n                else\n                   declare"}, {"sha": "841f2c7fda08e3cdb1c2589787791b385677c254", "filename": "gcc/ada/sinfo.ads", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/16b10ccc1f7d3deeaaa5b976fcbca04fba035e9c/gcc%2Fada%2Fsinfo.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/16b10ccc1f7d3deeaaa5b976fcbca04fba035e9c/gcc%2Fada%2Fsinfo.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsinfo.ads?ref=16b10ccc1f7d3deeaaa5b976fcbca04fba035e9c", "patch": "@@ -1259,8 +1259,6 @@ package Sinfo is\n    --  Float_Truncate (Flag11-Sem)\n    --    A flag present in type conversion nodes. This is used for float to\n    --    integer conversions where truncation is required rather than rounding.\n-   --    Note that Gigi does not handle type conversions from real to integer\n-   --    with rounding (see Expand_N_Type_Conversion).\n \n    --  Forwards_OK (Flag5-Sem)\n    --    A flag present in the N_Assignment_Statement node. It is used only"}, {"sha": "429f545a8604a405a461ab8f186410549fa127f1", "filename": "gcc/ada/stand.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/16b10ccc1f7d3deeaaa5b976fcbca04fba035e9c/gcc%2Fada%2Fstand.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/16b10ccc1f7d3deeaaa5b976fcbca04fba035e9c/gcc%2Fada%2Fstand.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fstand.adb?ref=16b10ccc1f7d3deeaaa5b976fcbca04fba035e9c", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1992-2014,  Free Software Foundation, Inc.        --\n+--          Copyright (C) 1992-2014, Free Software Foundation, Inc.        --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --"}, {"sha": "addefd09b08afd26bfc75a20567adaa77542399b", "filename": "gcc/ada/tree_io.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/16b10ccc1f7d3deeaaa5b976fcbca04fba035e9c/gcc%2Fada%2Ftree_io.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/16b10ccc1f7d3deeaaa5b976fcbca04fba035e9c/gcc%2Fada%2Ftree_io.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Ftree_io.adb?ref=16b10ccc1f7d3deeaaa5b976fcbca04fba035e9c", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1992-2009  Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2014, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --"}, {"sha": "67d15cff6210379976cab7e96644c83964194148", "filename": "gcc/ada/types.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/16b10ccc1f7d3deeaaa5b976fcbca04fba035e9c/gcc%2Fada%2Ftypes.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/16b10ccc1f7d3deeaaa5b976fcbca04fba035e9c/gcc%2Fada%2Ftypes.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Ftypes.adb?ref=16b10ccc1f7d3deeaaa5b976fcbca04fba035e9c", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1992-2009  Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2014, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --"}, {"sha": "9b38d9a2ec4be38ae67c6c374138e149d16f7333", "filename": "gcc/ada/uname.ads", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/16b10ccc1f7d3deeaaa5b976fcbca04fba035e9c/gcc%2Fada%2Funame.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/16b10ccc1f7d3deeaaa5b976fcbca04fba035e9c/gcc%2Fada%2Funame.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Funame.ads?ref=16b10ccc1f7d3deeaaa5b976fcbca04fba035e9c", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 S p e c                                  --\n --                                                                          --\n---          Copyright (C) 1992-2009  Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2014, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --"}, {"sha": "a6e8293ae5decb03c5a63a4168922bfe28efc3aa", "filename": "gcc/ada/widechar.ads", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/16b10ccc1f7d3deeaaa5b976fcbca04fba035e9c/gcc%2Fada%2Fwidechar.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/16b10ccc1f7d3deeaaa5b976fcbca04fba035e9c/gcc%2Fada%2Fwidechar.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fwidechar.ads?ref=16b10ccc1f7d3deeaaa5b976fcbca04fba035e9c", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 S p e c                                  --\n --                                                                          --\n---          Copyright (C) 1992-2009  Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2014, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --"}]}