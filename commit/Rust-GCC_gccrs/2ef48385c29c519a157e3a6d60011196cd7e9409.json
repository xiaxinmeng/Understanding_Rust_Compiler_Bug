{"sha": "2ef48385c29c519a157e3a6d60011196cd7e9409", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MmVmNDgzODVjMjljNTE5YTE1N2UzYTZkNjAwMTExOTZjZDdlOTQwOQ==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2011-08-29T11:04:03Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2011-08-29T11:04:03Z"}, "message": "[multiple changes]\n\n2011-08-29  Thomas Quinot  <quinot@adacore.com>\n\n\t* a-synbar-posix.adb: Minor reformatting.\n\n2011-08-29  Jose Ruiz  <ruiz@adacore.com>\n\n\t* a-exetim-posix.adb, a-exetim-mingw.adb, a-exetim-mingw.ads,\n\ta-exetim-default.ads (Interrupt_Clocks_Supported,\n\tSeparate_Interrupt_Clocks_Supported, Clock_For_Interrupts): Add these\n\tdefinitions to be compliant with AI-0171. The target systems do not\n\tsupport separate account for the execution time of interrupt handlers.\n\n2011-08-29  Jose Ruiz  <ruiz@adacore.com>\n\n\t* a-synbar.adb (Wait): Change the order of evaluation of the conditions\n\tin the barrier to put first the easiest to evaluate (and the one which\n\twill be True more often). More efficient.\n\n2011-08-29  Eric Botcazou  <ebotcazou@adacore.com>\n\n\t* s-atocou-x86.adb: Fix constraint in machine code insertion.\n\n2011-08-29  Bob Duff  <duff@adacore.com>\n\n\t* aspects.ads, aspects.adb: Add new aspects for various pragmas and\n\tattributes that are now aspects, as specified by AI05-0229-1.\n\t* sem_ch13.adb (Analyze_Aspect_Specifications,\n\tCheck_Aspect_At_Freeze_Point): Analyze the new aspects. Turn them into\n\tpragmas or attribute references, as appropriate.\n\nFrom-SVN: r178203", "tree": {"sha": "4aba7bb8be42df71db6f5f369d691f9ddcdf7256", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4aba7bb8be42df71db6f5f369d691f9ddcdf7256"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2ef48385c29c519a157e3a6d60011196cd7e9409", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2ef48385c29c519a157e3a6d60011196cd7e9409", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2ef48385c29c519a157e3a6d60011196cd7e9409", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2ef48385c29c519a157e3a6d60011196cd7e9409/comments", "author": null, "committer": null, "parents": [{"sha": "0db16b1e6b193f55d7ad70bc204f9942a21ab924", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0db16b1e6b193f55d7ad70bc204f9942a21ab924", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0db16b1e6b193f55d7ad70bc204f9942a21ab924"}], "stats": {"total": 212, "additions": 196, "deletions": 16}, "files": [{"sha": "17a2e5d2a341550447a1bc2f6f0e3ecc9d233f77", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ef48385c29c519a157e3a6d60011196cd7e9409/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ef48385c29c519a157e3a6d60011196cd7e9409/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=2ef48385c29c519a157e3a6d60011196cd7e9409", "patch": "@@ -1,3 +1,33 @@\n+2011-08-29  Thomas Quinot  <quinot@adacore.com>\n+\n+\t* a-synbar-posix.adb: Minor reformatting.\n+\n+2011-08-29  Jose Ruiz  <ruiz@adacore.com>\n+\n+\t* a-exetim-posix.adb, a-exetim-mingw.adb, a-exetim-mingw.ads,\n+\ta-exetim-default.ads (Interrupt_Clocks_Supported,\n+\tSeparate_Interrupt_Clocks_Supported, Clock_For_Interrupts): Add these\n+\tdefinitions to be compliant with AI-0171. The target systems do not\n+\tsupport separate account for the execution time of interrupt handlers.\n+\n+2011-08-29  Jose Ruiz  <ruiz@adacore.com>\n+\n+\t* a-synbar.adb (Wait): Change the order of evaluation of the conditions\n+\tin the barrier to put first the easiest to evaluate (and the one which\n+\twill be True more often). More efficient.\n+\n+2011-08-29  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* s-atocou-x86.adb: Fix constraint in machine code insertion.\n+\n+2011-08-29  Bob Duff  <duff@adacore.com>\n+\n+\t* aspects.ads, aspects.adb: Add new aspects for various pragmas and\n+\tattributes that are now aspects, as specified by AI05-0229-1.\n+\t* sem_ch13.adb (Analyze_Aspect_Specifications,\n+\tCheck_Aspect_At_Freeze_Point): Analyze the new aspects. Turn them into\n+\tpragmas or attribute references, as appropriate.\n+\n 2011-08-29  Robert Dewar  <dewar@adacore.com>\n \n \t* a-synbar.ads, a-synbar.adb, a-synbar-posix.adb,"}, {"sha": "3267baad606b4b07dd978dbd1a2c0c44368595be", "filename": "gcc/ada/a-exetim-default.ads", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ef48385c29c519a157e3a6d60011196cd7e9409/gcc%2Fada%2Fa-exetim-default.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ef48385c29c519a157e3a6d60011196cd7e9409/gcc%2Fada%2Fa-exetim-default.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-exetim-default.ads?ref=2ef48385c29c519a157e3a6d60011196cd7e9409", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 S p e c                                  --\n --                                                                          --\n---          Copyright (C) 2007-2010, Free Software Foundation, Inc.         --\n+--          Copyright (C) 2007-2011, Free Software Foundation, Inc.         --\n --                                                                          --\n -- This specification is derived from the Ada Reference Manual for use with --\n -- GNAT. The copyright notice above, and the license provisions that follow --\n@@ -81,6 +81,11 @@ package Ada.Execution_Time is\n       TS : Ada.Real_Time.Time_Span := Ada.Real_Time.Time_Span_Zero)\n       return CPU_Time;\n \n+   Interrupt_Clocks_Supported          : constant Boolean := False;\n+   Separate_Interrupt_Clocks_Supported : constant Boolean := False;\n+\n+   function Clock_For_Interrupts return CPU_Time;\n+\n private\n \n    type CPU_Time is new Ada.Real_Time.Time;"}, {"sha": "c80d11286095124aafdc972cd3bdca3e0f5fbf6b", "filename": "gcc/ada/a-exetim-mingw.adb", "status": "modified", "additions": 14, "deletions": 1, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ef48385c29c519a157e3a6d60011196cd7e9409/gcc%2Fada%2Fa-exetim-mingw.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ef48385c29c519a157e3a6d60011196cd7e9409/gcc%2Fada%2Fa-exetim-mingw.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-exetim-mingw.adb?ref=2ef48385c29c519a157e3a6d60011196cd7e9409", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---         Copyright (C) 2007-2009, Free Software Foundation, Inc.          --\n+--         Copyright (C) 2007-2011, Free Software Foundation, Inc.          --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -129,6 +129,19 @@ package body Ada.Execution_Time is\n                  + (Long_Long_Float (U_Time) / Hundreds_Nano_In_Sec))));\n    end Clock;\n \n+   --------------------------\n+   -- Clock_For_Interrupts --\n+   --------------------------\n+\n+   function Clock_For_Interrupts return CPU_Time is\n+   begin\n+      --  According to AI 0170-1, D.14(18.1/3), if Interrupt_Clocks_Supported\n+      --  is set to False the function raises Program_Error.\n+\n+      raise Program_Error;\n+      return CPU_Time_First;\n+   end Clock_For_Interrupts;\n+\n    -----------\n    -- Split --\n    -----------"}, {"sha": "a2b68061838841ccc7669826123d2bebd4d70023", "filename": "gcc/ada/a-exetim-mingw.ads", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ef48385c29c519a157e3a6d60011196cd7e9409/gcc%2Fada%2Fa-exetim-mingw.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ef48385c29c519a157e3a6d60011196cd7e9409/gcc%2Fada%2Fa-exetim-mingw.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-exetim-mingw.ads?ref=2ef48385c29c519a157e3a6d60011196cd7e9409", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 S p e c                                  --\n --                                                                          --\n---             Copyright (C) 2009  Free Software Foundation, Inc.           --\n+--          Copyright (C) 2009-2011, Free Software Foundation, Inc.         --\n --                                                                          --\n -- This specification is derived from the Ada Reference Manual for use with --\n -- GNAT. The copyright notice above, and the license provisions that follow --\n@@ -81,6 +81,11 @@ package Ada.Execution_Time is\n        TS : Ada.Real_Time.Time_Span := Ada.Real_Time.Time_Span_Zero)\n        return CPU_Time;\n \n+   Interrupt_Clocks_Supported          : constant Boolean := False;\n+   Separate_Interrupt_Clocks_Supported : constant Boolean := False;\n+\n+   function Clock_For_Interrupts return CPU_Time;\n+\n private\n \n    type CPU_Time is new Ada.Real_Time.Time;"}, {"sha": "65b21d61d7a700f240b03ef0842485a9624c7c8d", "filename": "gcc/ada/a-exetim-posix.adb", "status": "modified", "additions": 14, "deletions": 1, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ef48385c29c519a157e3a6d60011196cd7e9409/gcc%2Fada%2Fa-exetim-posix.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ef48385c29c519a157e3a6d60011196cd7e9409/gcc%2Fada%2Fa-exetim-posix.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-exetim-posix.adb?ref=2ef48385c29c519a157e3a6d60011196cd7e9409", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---         Copyright (C) 2007-2010, Free Software Foundation, Inc.          --\n+--         Copyright (C) 2007-2011, Free Software Foundation, Inc.          --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -127,6 +127,19 @@ package body Ada.Execution_Time is\n       return To_CPU_Time (To_Duration (TS));\n    end Clock;\n \n+   --------------------------\n+   -- Clock_For_Interrupts --\n+   --------------------------\n+\n+   function Clock_For_Interrupts return CPU_Time is\n+   begin\n+      --  According to AI 0170-1, D.14(18.1/3), if Interrupt_Clocks_Supported\n+      --  is set to False the function raises Program_Error.\n+\n+      raise Program_Error;\n+      return CPU_Time_First;\n+   end Clock_For_Interrupts;\n+\n    -----------\n    -- Split --\n    -----------"}, {"sha": "73dc9fa2008510d2eb4c36465f77f5079dca5fe2", "filename": "gcc/ada/a-synbar-posix.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ef48385c29c519a157e3a6d60011196cd7e9409/gcc%2Fada%2Fa-synbar-posix.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ef48385c29c519a157e3a6d60011196cd7e9409/gcc%2Fada%2Fa-synbar-posix.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-synbar-posix.adb?ref=2ef48385c29c519a157e3a6d60011196cd7e9409", "patch": "@@ -52,7 +52,6 @@ package body Ada.Synchronous_Barriers is\n    --  when count waiters arrived. If attr is null the default barrier\n    --  attributes shall be used.\n \n-   --  Destroy a previously dynamically initialized barrier\n    function pthread_barrier_destroy\n      (barrier : not null access pthread_barrier_t) return int;\n    pragma Import (C, pthread_barrier_destroy, \"pthread_barrier_destroy\");\n@@ -106,4 +105,5 @@ package body Ada.Synchronous_Barriers is\n \n       Notified := (Result = PTHREAD_BARRIER_SERIAL_THREAD);\n    end Wait_For_Release;\n+\n end Ada.Synchronous_Barriers;"}, {"sha": "7966b23b7271d80daa795fa4f5885e6b2cda4895", "filename": "gcc/ada/a-synbar.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ef48385c29c519a157e3a6d60011196cd7e9409/gcc%2Fada%2Fa-synbar.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ef48385c29c519a157e3a6d60011196cd7e9409/gcc%2Fada%2Fa-synbar.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-synbar.adb?ref=2ef48385c29c519a157e3a6d60011196cd7e9409", "patch": "@@ -44,7 +44,7 @@ package body Ada.Synchronous_Barriers is\n       --  barrier will remain open only for those tasks already inside.\n \n       entry Wait (Notified : out Boolean)\n-        when Wait'Count = Release_Threshold or else Keep_Open\n+        when Keep_Open or else Wait'Count = Release_Threshold\n       is\n       begin\n          --  If we are executing the entry it means that the required number of"}, {"sha": "43d0df600c268bfcbbc9c6a893f6ef829e94cd5e", "filename": "gcc/ada/aspects.adb", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ef48385c29c519a157e3a6d60011196cd7e9409/gcc%2Fada%2Faspects.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ef48385c29c519a157e3a6d60011196cd7e9409/gcc%2Fada%2Faspects.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Faspects.adb?ref=2ef48385c29c519a157e3a6d60011196cd7e9409", "patch": "@@ -185,8 +185,10 @@ package body Aspects is\n     Aspect_Ada_2012                     => Aspect_Ada_2005,\n     Aspect_Address                      => Aspect_Address,\n     Aspect_Alignment                    => Aspect_Alignment,\n+    Aspect_Asynchronous                 => Aspect_Asynchronous,\n     Aspect_Atomic                       => Aspect_Atomic,\n     Aspect_Atomic_Components            => Aspect_Atomic_Components,\n+    Aspect_Attach_Handler               => Aspect_Attach_Handler,\n     Aspect_Bit_Order                    => Aspect_Bit_Order,\n     Aspect_Component_Size               => Aspect_Component_Size,\n     Aspect_Constant_Indexing            => Aspect_Constant_Indexing,\n@@ -198,8 +200,12 @@ package body Aspects is\n     Aspect_External_Tag                 => Aspect_External_Tag,\n     Aspect_Favor_Top_Level              => Aspect_Favor_Top_Level,\n     Aspect_Implicit_Dereference         => Aspect_Implicit_Dereference,\n+    Aspect_Independent                  => Aspect_Independent,\n+    Aspect_Independent_Components       => Aspect_Independent_Components,\n     Aspect_Inline                       => Aspect_Inline,\n     Aspect_Inline_Always                => Aspect_Inline,\n+    Aspect_Interrupt_Handler            => Aspect_Interrupt_Handler,\n+    Aspect_Interrupt_Priority           => Aspect_Interrupt_Priority,\n     Aspect_Iterator_Element             => Aspect_Iterator_Element,\n     Aspect_All_Calls_Remote             => Aspect_All_Calls_Remote,\n     Aspect_Compiler_Unit                => Aspect_Compiler_Unit,\n@@ -226,10 +232,12 @@ package body Aspects is\n     Aspect_Precondition                 => Aspect_Pre,\n     Aspect_Predicate                    => Aspect_Predicate,\n     Aspect_Preelaborable_Initialization => Aspect_Preelaborable_Initialization,\n+    Aspect_Priority                     => Aspect_Priority,\n     Aspect_Pure_Function                => Aspect_Pure_Function,\n     Aspect_Read                         => Aspect_Read,\n     Aspect_Shared                       => Aspect_Atomic,\n     Aspect_Size                         => Aspect_Size,\n+    Aspect_Small                        => Aspect_Small,\n     Aspect_Static_Predicate             => Aspect_Predicate,\n     Aspect_Storage_Pool                 => Aspect_Storage_Pool,\n     Aspect_Storage_Size                 => Aspect_Storage_Size,"}, {"sha": "ee992a6383f599dba2105deca3ed5b7de4ab62bb", "filename": "gcc/ada/aspects.ads", "status": "modified", "additions": 21, "deletions": 1, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ef48385c29c519a157e3a6d60011196cd7e9409/gcc%2Fada%2Faspects.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ef48385c29c519a157e3a6d60011196cd7e9409/gcc%2Fada%2Faspects.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Faspects.ads?ref=2ef48385c29c519a157e3a6d60011196cd7e9409", "patch": "@@ -46,6 +46,7 @@ package Aspects is\n      (No_Aspect,                            -- Dummy entry for no aspect\n       Aspect_Address,\n       Aspect_Alignment,\n+      Aspect_Attach_Handler,\n       Aspect_Bit_Order,\n       Aspect_Component_Size,\n       Aspect_Constant_Indexing,\n@@ -56,6 +57,7 @@ package Aspects is\n       Aspect_External_Tag,\n       Aspect_Implicit_Dereference,\n       Aspect_Input,\n+      Aspect_Interrupt_Priority,\n       Aspect_Invariant,\n       Aspect_Iterator_Element,\n       Aspect_Machine_Radix,\n@@ -66,8 +68,10 @@ package Aspects is\n       Aspect_Pre,\n       Aspect_Precondition,\n       Aspect_Predicate,                     -- GNAT\n+      Aspect_Priority,\n       Aspect_Read,\n       Aspect_Size,\n+      Aspect_Small,\n       Aspect_Static_Predicate,\n       Aspect_Storage_Pool,\n       Aspect_Storage_Size,\n@@ -104,12 +108,16 @@ package Aspects is\n \n       Aspect_Ada_2005,                      -- GNAT\n       Aspect_Ada_2012,                      -- GNAT\n+      Aspect_Asynchronous,\n       Aspect_Atomic,\n       Aspect_Atomic_Components,\n       Aspect_Discard_Names,\n       Aspect_Favor_Top_Level,               -- GNAT\n+      Aspect_Independent,\n+      Aspect_Independent_Components,\n       Aspect_Inline,\n       Aspect_Inline_Always,                 -- GNAT\n+      Aspect_Interrupt_Handler,\n       Aspect_No_Return,\n       Aspect_Pack,\n       Aspect_Persistent_BSS,                -- GNAT\n@@ -166,7 +174,7 @@ package Aspects is\n \n    type Aspect_Expression is\n      (Optional,               -- Optional boolean expression\n-      Expression,             -- Required non-boolean expression\n+      Expression,             -- Required expression\n       Name);                  -- Required name\n \n    --  The following array indicates what argument type is required\n@@ -175,6 +183,7 @@ package Aspects is\n                        (No_Aspect                      => Optional,\n                         Aspect_Address                 => Expression,\n                         Aspect_Alignment               => Expression,\n+                        Aspect_Attach_Handler          => Expression,\n                         Aspect_Bit_Order               => Expression,\n                         Aspect_Component_Size          => Expression,\n                         Aspect_Constant_Indexing       => Name,\n@@ -185,6 +194,7 @@ package Aspects is\n                         Aspect_External_Tag            => Expression,\n                         Aspect_Implicit_Dereference    => Name,\n                         Aspect_Input                   => Name,\n+                        Aspect_Interrupt_Priority      => Expression,\n                         Aspect_Invariant               => Expression,\n                         Aspect_Iterator_Element        => Name,\n                         Aspect_Machine_Radix           => Expression,\n@@ -195,8 +205,10 @@ package Aspects is\n                         Aspect_Pre                     => Expression,\n                         Aspect_Precondition            => Expression,\n                         Aspect_Predicate               => Expression,\n+                        Aspect_Priority                => Expression,\n                         Aspect_Read                    => Name,\n                         Aspect_Size                    => Expression,\n+                        Aspect_Small                   => Expression,\n                         Aspect_Static_Predicate        => Expression,\n                         Aspect_Storage_Pool            => Name,\n                         Aspect_Storage_Size            => Expression,\n@@ -226,8 +238,10 @@ package Aspects is\n      Aspect_Address                      => Name_Address,\n      Aspect_Alignment                    => Name_Alignment,\n      Aspect_All_Calls_Remote             => Name_All_Calls_Remote,\n+     Aspect_Asynchronous                 => Name_Asynchronous,\n      Aspect_Atomic                       => Name_Atomic,\n      Aspect_Atomic_Components            => Name_Atomic_Components,\n+     Aspect_Attach_Handler               => Name_Attach_Handler,\n      Aspect_Bit_Order                    => Name_Bit_Order,\n      Aspect_Compiler_Unit                => Name_Compiler_Unit,\n      Aspect_Component_Size               => Name_Component_Size,\n@@ -241,9 +255,13 @@ package Aspects is\n      Aspect_External_Tag                 => Name_External_Tag,\n      Aspect_Favor_Top_Level              => Name_Favor_Top_Level,\n      Aspect_Implicit_Dereference         => Name_Implicit_Dereference,\n+     Aspect_Independent                  => Name_Independent,\n+     Aspect_Independent_Components       => Name_Independent_Components,\n      Aspect_Inline                       => Name_Inline,\n      Aspect_Inline_Always                => Name_Inline_Always,\n      Aspect_Input                        => Name_Input,\n+     Aspect_Interrupt_Handler            => Name_Interrupt_Handler,\n+     Aspect_Interrupt_Priority           => Name_Interrupt_Priority,\n      Aspect_Invariant                    => Name_Invariant,\n      Aspect_Iterator_Element             => Name_Iterator_Element,\n      Aspect_Machine_Radix                => Name_Machine_Radix,\n@@ -260,6 +278,7 @@ package Aspects is\n      Aspect_Preelaborable_Initialization => Name_Preelaborable_Initialization,\n      Aspect_Preelaborate                 => Name_Preelaborate,\n      Aspect_Preelaborate_05              => Name_Preelaborate_05,\n+     Aspect_Priority                     => Name_Priority,\n      Aspect_Pure                         => Name_Pure,\n      Aspect_Pure_05                      => Name_Pure_05,\n      Aspect_Pure_Function                => Name_Pure_Function,\n@@ -269,6 +288,7 @@ package Aspects is\n      Aspect_Shared                       => Name_Shared,\n      Aspect_Shared_Passive               => Name_Shared_Passive,\n      Aspect_Size                         => Name_Size,\n+     Aspect_Small                        => Name_Small,\n      Aspect_Static_Predicate             => Name_Static_Predicate,\n      Aspect_Storage_Pool                 => Name_Storage_Pool,\n      Aspect_Storage_Size                 => Name_Storage_Size,"}, {"sha": "f7c0bcb3147033dacb68cc59ceec4bb1d85bd9ac", "filename": "gcc/ada/s-atocou-x86.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ef48385c29c519a157e3a6d60011196cd7e9409/gcc%2Fada%2Fs-atocou-x86.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ef48385c29c519a157e3a6d60011196cd7e9409/gcc%2Fada%2Fs-atocou-x86.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-atocou-x86.adb?ref=2ef48385c29c519a157e3a6d60011196cd7e9409", "patch": "@@ -54,7 +54,7 @@ package body System.Atomic_Counters is\n              & \"sete %1\",\n          Outputs  =>\n            (Unsigned_32'Asm_Output (\"=m\", Item.Value),\n-            Boolean'Asm_Output (\"=rm\", Aux)),\n+            Boolean'Asm_Output (\"=qm\", Aux)),\n          Inputs   => Unsigned_32'Asm_Input (\"m\", Item.Value),\n          Volatile => True);\n "}, {"sha": "b6d00db94506c4bf8df5747167a1249c71e07ea0", "filename": "gcc/ada/sem_ch13.adb", "status": "modified", "additions": 94, "deletions": 8, "changes": 102, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ef48385c29c519a157e3a6d60011196cd7e9409/gcc%2Fada%2Fsem_ch13.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ef48385c29c519a157e3a6d60011196cd7e9409/gcc%2Fada%2Fsem_ch13.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch13.adb?ref=2ef48385c29c519a157e3a6d60011196cd7e9409", "patch": "@@ -1026,6 +1026,7 @@ package body Sem_Ch13 is\n                     Aspect_Output         |\n                     Aspect_Read           |\n                     Aspect_Size           |\n+                    Aspect_Small          |\n                     Aspect_Storage_Pool   |\n                     Aspect_Storage_Size   |\n                     Aspect_Stream_Size    |\n@@ -1135,6 +1136,36 @@ package body Sem_Ch13 is\n                   Set_Is_Delayed_Aspect (Aspect);\n                   Set_Has_Default_Aspect (Base_Type (Entity (Ent)));\n \n+               when Aspect_Attach_Handler =>\n+                  Aitem :=\n+                    Make_Pragma (Loc,\n+                      Pragma_Identifier            =>\n+                        Make_Identifier (Sloc (Id), Name_Attach_Handler),\n+                      Pragma_Argument_Associations =>\n+                        New_List (Ent, Relocate_Node (Expr)));\n+\n+                  Set_From_Aspect_Specification (Aitem, True);\n+\n+               when Aspect_Priority | Aspect_Interrupt_Priority => declare\n+                  Pname : Name_Id;\n+\n+               begin\n+                  if A_Id = Aspect_Priority then\n+                     Pname := Name_Priority;\n+                  else\n+                     Pname := Name_Interrupt_Priority;\n+                  end if;\n+\n+                  Aitem :=\n+                    Make_Pragma (Loc,\n+                      Pragma_Identifier            =>\n+                        Make_Identifier (Sloc (Id), Pname),\n+                      Pragma_Argument_Associations =>\n+                        New_List (Relocate_Node (Expr)));\n+\n+                  Set_From_Aspect_Specification (Aitem, True);\n+               end;\n+\n                --  Aspects Pre/Post generate Precondition/Postcondition pragmas\n                --  with a first argument that is the expression, and a second\n                --  argument that is an informative message if the test fails.\n@@ -1433,18 +1464,64 @@ package body Sem_Ch13 is\n                --  Here if not compilation unit case\n \n                else\n-                  --  For Pre/Post cases, insert immediately after the entity\n-                  --  declaration, since that is the required pragma placement.\n+                  case A_Id is\n+                     --  For Pre/Post cases, insert immediately after the\n+                     --  entity declaration, since that is the required pragma\n+                     --  placement.\n \n-                  if A_Id in Pre_Post_Aspects then\n-                     Insert_After (N, Aitem);\n+                     when Pre_Post_Aspects =>\n+                        Insert_After (N, Aitem);\n+\n+                     --  For Priority aspects, insert into the task or\n+                     --  protected definition, which we need to create if it's\n+                     --  not there.\n+\n+                     when Aspect_Priority | Aspect_Interrupt_Priority =>\n+                        declare\n+                           T : Node_Id; -- the type declaration\n+                           L : List_Id; -- list of decls of task/protected\n+\n+                        begin\n+                           if Nkind (N) = N_Object_Declaration then\n+                              T := Parent (Etype (Defining_Identifier (N)));\n+\n+                           else\n+                              T := N;\n+                           end if;\n+\n+                           if Nkind (T) = N_Protected_Type_Declaration then\n+                              pragma Assert\n+                                (Present (Protected_Definition (T)));\n+\n+                              L := Visible_Declarations\n+                                     (Protected_Definition (T));\n+\n+                           elsif Nkind (T) = N_Task_Type_Declaration then\n+                              if No (Task_Definition (T)) then\n+                                 Set_Task_Definition\n+                                   (T,\n+                                    Make_Task_Definition\n+                                      (Sloc (T),\n+                                       Visible_Declarations => New_List,\n+                                       End_Label => Empty));\n+                              end if;\n+\n+                              L := Visible_Declarations\n+                                     (Task_Definition (T));\n+\n+                           else\n+                              raise Program_Error;\n+                           end if;\n+\n+                           Prepend (Aitem, To => L);\n+                        end;\n \n                   --  For all other cases, insert in sequence\n \n-                  else\n-                     Insert_After (Ins_Node, Aitem);\n-                     Ins_Node := Aitem;\n-                  end if;\n+                     when others =>\n+                        Insert_After (Ins_Node, Aitem);\n+                        Ins_Node := Aitem;\n+                  end case;\n                end if;\n             end if;\n          end;\n@@ -5758,6 +5835,9 @@ package body Sem_Ch13 is\n          when Aspect_Test_Case =>\n             raise Program_Error;\n \n+         when Aspect_Attach_Handler =>\n+            T := RTE (RE_Interrupt_ID);\n+\n          --  Default_Value is resolved with the type entity in question\n \n          when Aspect_Default_Value =>\n@@ -5779,6 +5859,12 @@ package body Sem_Ch13 is\n          when Aspect_External_Tag =>\n             T := Standard_String;\n \n+         when Aspect_Priority | Aspect_Interrupt_Priority =>\n+            T := Standard_Integer;\n+\n+         when Aspect_Small =>\n+            T := Universal_Real;\n+\n          when Aspect_Storage_Pool =>\n             T := Class_Wide_Type (RTE (RE_Root_Storage_Pool));\n "}]}