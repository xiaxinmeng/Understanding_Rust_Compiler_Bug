{"sha": "cbe3672526c7686edca6e3c5e81a6bb9369f36e0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Y2JlMzY3MjUyNmM3Njg2ZWRjYTZlM2M1ZTgxYTZiYjkzNjlmMzZlMA==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@cygnus.com", "date": "1998-03-18T09:55:53Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "1998-03-18T09:55:53Z"}, "message": "rtl.c (read_rtx): Fall back on homebrew atoll if HOST_WIDE_INT is large...\n\n        * rtl.c (read_rtx): Fall back on homebrew atoll if HOST_WIDE_INT\n        is large, and the system doesn't provide atoll or atoq.\n        (atoll): New.\n        * alpha/xm-vms.h (HAVE_ATOLL): Define.\n        Reported by Klaus Kaempf <kkaempf@progis.de>.\n\nFrom-SVN: r18657", "tree": {"sha": "9865836d8f1059cd0102d063058ea0f8139fcf6a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9865836d8f1059cd0102d063058ea0f8139fcf6a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/cbe3672526c7686edca6e3c5e81a6bb9369f36e0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cbe3672526c7686edca6e3c5e81a6bb9369f36e0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cbe3672526c7686edca6e3c5e81a6bb9369f36e0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cbe3672526c7686edca6e3c5e81a6bb9369f36e0/comments", "author": null, "committer": null, "parents": [{"sha": "80564603542ce9011d69bd4a8034c9839626643e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/80564603542ce9011d69bd4a8034c9839626643e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/80564603542ce9011d69bd4a8034c9839626643e"}], "stats": {"total": 53, "additions": 50, "deletions": 3}, "files": [{"sha": "cedf008479490b5b23b90665c810628e774ed87e", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cbe3672526c7686edca6e3c5e81a6bb9369f36e0/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cbe3672526c7686edca6e3c5e81a6bb9369f36e0/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=cbe3672526c7686edca6e3c5e81a6bb9369f36e0", "patch": "@@ -1,3 +1,12 @@\n+Wed Mar 18 09:52:56 1998  Richard Henderson  <rth@cygnus.com>\n+\n+\t* rtl.c (read_rtx): Fall back on homebrew atoll if HOST_WIDE_INT\n+\tis large, and the system doesn't provide atoll or atoq.\n+\t(atoll): New.  \n+\n+\t* alpha/xm-vms.h (HAVE_ATOLL): Define.\n+\tReported by Klaus Kaempf <kkaempf@progis.de>.\n+\t\n Wed Mar 18 09:56:26 1998  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n \n \t* c-lang.c (finish_file): Wrap variable `void_list_node' with macro"}, {"sha": "5e5a4422bcdd09c09398c78330147808c08a5194", "filename": "gcc/config/alpha/xm-vms.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cbe3672526c7686edca6e3c5e81a6bb9369f36e0/gcc%2Fconfig%2Falpha%2Fxm-vms.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cbe3672526c7686edca6e3c5e81a6bb9369f36e0/gcc%2Fconfig%2Falpha%2Fxm-vms.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Fxm-vms.h?ref=cbe3672526c7686edca6e3c5e81a6bb9369f36e0", "patch": "@@ -68,6 +68,7 @@ Boston, MA 02111-1307, USA.  */\n #define HAVE_VPRINTF\n #define HAVE_PUTENV\n #define HAVE_STRERROR\n+#define HAVE_ATOLL\n \n #define NO_SYS_PARAMS_H\t\t/* Don't have <sys/params.h> */\n #define NO_STAB_H\t\t/* Don't have <stab.h> */"}, {"sha": "1de50c21202bc14c4fd2fcb38f30493106cfade5", "filename": "gcc/rtl.c", "status": "modified", "additions": 40, "deletions": 3, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cbe3672526c7686edca6e3c5e81a6bb9369f36e0/gcc%2Frtl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cbe3672526c7686edca6e3c5e81a6bb9369f36e0/gcc%2Frtl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frtl.c?ref=cbe3672526c7686edca6e3c5e81a6bb9369f36e0", "patch": "@@ -558,6 +558,43 @@ read_name (str, infile)\n   *p = 0;\n }\n \f\n+/* Provide a version of a function to read a long long if the system does\n+   not provide one.  */\n+#if HOST_BITS_PER_WIDE_INT > HOST_BITS_PER_LONG && !defined(HAVE_ATOLL) && !defined(HAVE_ATOQ)\n+HOST_WIDE_INT\n+atoll(p)\n+    const char *p;\n+{\n+  int neg = 0;\n+  HOST_WIDE_INT tmp_wide;\n+\n+  while (isspace(*p))\n+    p++;\n+  if (*p == '-')\n+    neg = 1, p++;\n+  else if (*p == '+')\n+    p++;\n+\n+  tmp_wide = 0;\n+  while (isdigit(*p))\n+    {\n+      HOST_WIDE_INT new_wide = tmp_wide*10 + (*p - '0');\n+      if (new_wide < tmp_wide)\n+\t{\n+\t  /* Return INT_MAX equiv on overflow.  */\n+\t  tmp_wide = (~(unsigned HOST_WIDE_INT)0) >> 1;\n+\t  break;\n+\t}\n+      tmp_wide = new_wide;\n+      p++;\n+    }\n+\n+  if (neg)\n+    tmp_wide = -tmp_wide;\n+  return tmp_wide;\n+}\n+#endif\n+\n /* Read an rtx in printed representation from INFILE\n    and return an actual rtx in core constructed accordingly.\n    read_rtx is not used in the compiler proper, but rather in\n@@ -768,14 +805,14 @@ read_rtx (infile)\n #if HOST_BITS_PER_WIDE_INT == HOST_BITS_PER_LONG\n \ttmp_wide = atol (tmp_char);\n #else\n-#ifdef HAVE_ATOLL\n+\t/* Prefer atoll over atoq, since the former is in the ISO C9X draft. \n+\t   But prefer not to use our hand-rolled function above either.  */\n+#if defined(HAVE_ATOLL) || !defined(HAVE_ATOQ)\n \ttmp_wide = atoll (tmp_char);\n #else\n-#ifdef HAVE_ATOQ\n \ttmp_wide = atoq (tmp_char);\n #endif\n #endif\n-#endif\n #endif\n \tXWINT (return_rtx, i) = tmp_wide;\n \tbreak;"}]}