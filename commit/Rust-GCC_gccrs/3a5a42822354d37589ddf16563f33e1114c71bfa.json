{"sha": "3a5a42822354d37589ddf16563f33e1114c71bfa", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2E1YTQyODIyMzU0ZDM3NTg5ZGRmMTY1NjNmMzNlMTExNGM3MWJmYQ==", "commit": {"author": {"name": "Philip Blundell", "email": "philb@gnu.org", "date": "2000-01-09T19:42:57Z"}, "committer": {"name": "Nick Clifton", "email": "nickc@gcc.gnu.org", "date": "2000-01-09T19:42:57Z"}, "message": "Apply patch from Phillip Blundel to use single STR/LDR when...\n\nApply patch from Phillip Blundel to use single STR/LDR when only loading\nstoring a single register in a function prologue/epilogue.\n\nFrom-SVN: r31296", "tree": {"sha": "fe4795ae39905422fd7883a0e314afea0c35dd73", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/fe4795ae39905422fd7883a0e314afea0c35dd73"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3a5a42822354d37589ddf16563f33e1114c71bfa", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3a5a42822354d37589ddf16563f33e1114c71bfa", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3a5a42822354d37589ddf16563f33e1114c71bfa", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3a5a42822354d37589ddf16563f33e1114c71bfa/comments", "author": {"login": "philb", "id": 227468, "node_id": "MDQ6VXNlcjIyNzQ2OA==", "avatar_url": "https://avatars.githubusercontent.com/u/227468?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philb", "html_url": "https://github.com/philb", "followers_url": "https://api.github.com/users/philb/followers", "following_url": "https://api.github.com/users/philb/following{/other_user}", "gists_url": "https://api.github.com/users/philb/gists{/gist_id}", "starred_url": "https://api.github.com/users/philb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philb/subscriptions", "organizations_url": "https://api.github.com/users/philb/orgs", "repos_url": "https://api.github.com/users/philb/repos", "events_url": "https://api.github.com/users/philb/events{/privacy}", "received_events_url": "https://api.github.com/users/philb/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "9a29c058e726aeea972f1dedf1c28db659b15b1c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9a29c058e726aeea972f1dedf1c28db659b15b1c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9a29c058e726aeea972f1dedf1c28db659b15b1c"}], "stats": {"total": 85, "additions": 60, "deletions": 25}, "files": [{"sha": "12c43c7c28933f6e4fbdb1ac7d90cae6b4c63773", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3a5a42822354d37589ddf16563f33e1114c71bfa/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3a5a42822354d37589ddf16563f33e1114c71bfa/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=3a5a42822354d37589ddf16563f33e1114c71bfa", "patch": "@@ -1,3 +1,10 @@\n+2000-01-09  Philip Blundell  <philb@gnu.org>\n+\n+\t* config/arm/arm.c (output_return_instruction): Use `ldr' rather\n+\tthan `ldm' with only one register.\n+\t* config/arm/arm.md (push_multi): Use `str' rather than `stm' with \n+\tonly one register.\n+\n Sun Jan  9 17:50:23 2000  Hans-Peter Nilsson  <hp@axis.com>\n \n \t* config/ns32k/ns32k.md (load or push effective address): Operand 1"}, {"sha": "57cfff57d687ee1a28f91169fbda25c7c14a30f0", "filename": "gcc/config/arm/arm.c", "status": "modified", "additions": 27, "deletions": 13, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3a5a42822354d37589ddf16563f33e1114c71bfa/gcc%2Fconfig%2Farm%2Farm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3a5a42822354d37589ddf16563f33e1114c71bfa/gcc%2Fconfig%2Farm%2Farm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.c?ref=3a5a42822354d37589ddf16563f33e1114c71bfa", "patch": "@@ -1,5 +1,5 @@\n /* Output routines for GCC for ARM.\n-   Copyright (C) 1991, 93-98, 1999 Free Software Foundation, Inc.\n+   Copyright (C) 1991, 93-99, 2000 Free Software Foundation, Inc.\n    Contributed by Pieter `Tiggr' Schoenmakers (rcpieter@win.tue.nl)\n    and Martin Simmons (@harleqn.co.uk).\n    More major hacks by Richard Earnshaw (rearnsha@arm.com).\n@@ -5477,18 +5477,20 @@ output_return_instruction (operand, really_return, reverse)\n \n   if (TARGET_ABORT_NORETURN && volatile_func)\n     {\n-      rtx ops[2];\n       /* If this function was declared non-returning, and we have found a tail \n-\t call, then we have to trust that the called function won't return. */\n-      if (! really_return)\n-\treturn \"\";\n-\n-      /* Otherwise, trap an attempted return by aborting. */\n-      ops[0] = operand;\n-      ops[1] = gen_rtx_SYMBOL_REF (Pmode, NEED_PLT_RELOC ? \"abort(PLT)\" \n-\t\t\t\t   : \"abort\");\n-      assemble_external_libcall (ops[1]);\n-      output_asm_insn (reverse ? \"bl%D0\\t%a1\" : \"bl%d0\\t%a1\", ops);\n+\t call, then we have to trust that the called function won't return.  */\n+      if (really_return)\n+\t{\n+\t  rtx ops[2];\n+      \n+\t  /* Otherwise, trap an attempted return by aborting.  */\n+\t  ops[0] = operand;\n+\t  ops[1] = gen_rtx_SYMBOL_REF (Pmode, NEED_PLT_RELOC ? \"abort(PLT)\" \n+\t\t\t\t       : \"abort\");\n+\t  assemble_external_libcall (ops[1]);\n+\t  output_asm_insn (reverse ? \"bl%D0\\t%a1\" : \"bl%d0\\t%a1\", ops);\n+\t}\n+      \n       return \"\";\n     }\n       \n@@ -5509,7 +5511,19 @@ output_return_instruction (operand, really_return, reverse)\n   if (frame_pointer_needed)\n     live_regs += 4;\n \n-  if (live_regs)\n+  /* On some ARM architectures it is faster to use LDR rather than LDM to\n+     load a single register.  On other architectures, the cost is the same.  */\n+  if (live_regs == 1\n+      && regs_ever_live[LR_REGNUM]\n+      && ! lr_save_eliminated\n+      /* FIXME: We ought to handle the case TARGET_APCS_32 is true,\n+\t really_return is true, and only the PC needs restoring.  */\n+      && ! really_return)\n+    {\n+      output_asm_insn (reverse ? \"ldr%?%D0\\t%|lr, [%|sp], #4\" \n+\t\t       : \"ldr%?%d0\\t%|lr, [%|sp], #4\", &operand);\n+    }\n+  else if (live_regs)\n     {\n       if (lr_save_eliminated || ! regs_ever_live[LR_REGNUM])\n         live_regs++;"}, {"sha": "ed49d701c18a10419ded8020c9e9af1672e967c4", "filename": "gcc/config/arm/arm.md", "status": "modified", "additions": 26, "deletions": 12, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3a5a42822354d37589ddf16563f33e1114c71bfa/gcc%2Fconfig%2Farm%2Farm.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3a5a42822354d37589ddf16563f33e1114c71bfa/gcc%2Fconfig%2Farm%2Farm.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.md?ref=3a5a42822354d37589ddf16563f33e1114c71bfa", "patch": "@@ -6534,25 +6534,39 @@\n   \"\"\n   \"*\n {\n-  char pattern[100];\n-  int i;\n   extern int lr_save_eliminated;\n-\n-  if (lr_save_eliminated)\n+  int num_saves = XVECLEN (operands[2], 0);\n+     \n+   if (lr_save_eliminated)\n     {\n-      if (XVECLEN (operands[2], 0) > 1)\n+      if (num_saves > 1)\n \tabort ();\n-      return \\\"\\\";\n     }\n-  strcpy (pattern, \\\"stmfd\\\\t%m0!, {%1\\\");\n-  for (i = 1; i < XVECLEN (operands[2], 0); i++)\n+ /* For the StrongARM at least it is faster to\n+     use STR to store only a single register.  */\n+  else if (num_saves == 1)\n+    output_asm_insn (\\\"str\\\\t%1, [%m0, #-4]!\\\", operands);\n+  else\n     {\n-      strcat (pattern, \\\", %|\\\");\n-      strcat (pattern, reg_names[REGNO (XEXP (XVECEXP (operands[2], 0, i),\n+      int i;\n+      char pattern[100];\n+\n+      if (lr_save_eliminated)\n+\tabort ();\n+\n+      strcpy (pattern, \\\"stmfd\\\\t%m0!, {%1\\\");\n+\t\t       \n+      for (i = 1; i < num_saves; i++)\n+        {\n+          strcat (pattern, \\\", %|\\\");\n+          strcat (pattern, reg_names[REGNO (XEXP (XVECEXP (operands[2], 0, i),\n \t\t\t\t\t      0))]);\n+        }\n+\t\n+      strcat (pattern, \\\"}\\\");\n+      output_asm_insn (pattern, operands);\n     }\n-  strcat (pattern, \\\"}\\\");\n-  output_asm_insn (pattern, operands);\n+    \n   return \\\"\\\";\n }\"\n [(set_attr \"type\" \"store4\")])"}]}