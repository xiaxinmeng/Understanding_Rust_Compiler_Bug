{"sha": "6459e6537632bc06e04e6011ca7fb6488f0e8e7d", "node_id": "C_kwDOANBUbNoAKDY0NTllNjUzNzYzMmJjMDZlMDRlNjAxMWNhN2ZiNjQ4OGYwZThlN2Q", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2022-03-26T15:21:36Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2022-03-26T15:21:36Z"}, "message": "ecog: Return 1 from insn_invalid_p if REG_INC reg overlaps some stored reg [PR103775]\n\nThe following testcase ICEs on aarch64-linux with -g and\nassembles with a warning otherwise, because it emits\nldrb w0,[x0,16]!\ninstruction which sets the x0 register multiple times.\nDue to disabled DCE (from -Og) we end up before REE with:\n(insn 12 39 13 2 (set (reg:SI 1 x1 [orig:93 _2 ] [93])\n        (zero_extend:SI (mem/c:QI (pre_modify:DI (reg/f:DI 0 x0 [114])\n                    (plus:DI (reg/f:DI 0 x0 [114])\n                        (const_int 16 [0x10]))) [1 u128_1+0 S1 A128]))) \"pr103775.c\":5:35 117 {*zero_extendqisi2_aarch64}\n     (expr_list:REG_INC (reg/f:DI 0 x0 [114])\n        (nil)))\n(insn 13 12 14 2 (set (reg:DI 0 x0 [orig:112 _2 ] [112])\n        (zero_extend:DI (reg:SI 1 x1 [orig:93 _2 ] [93]))) \"pr103775.c\":5:16 111 {*zero_extendsidi2_aarch64}\n     (nil))\nwhich is valid but not exactly efficient as x0 is dead after the\ninsn that auto-increments it.  REE turns it into:\n(insn 12 39 44 2 (set (reg:DI 0 x0)\n        (zero_extend:DI (mem/c:QI (pre_modify:DI (reg/f:DI 0 x0 [114])\n                    (plus:DI (reg/f:DI 0 x0 [114])\n                        (const_int 16 [0x10]))) [1 u128_1+0 S1 A128]))) \"pr103775.c\":5:35 119 {*zero_extendqidi2_aarch64}\n     (expr_list:REG_INC (reg/f:DI 0 x0 [114])\n        (nil)))\n(insn 44 12 14 2 (set (reg:DI 1 x1)\n        (reg:DI 0 x0)) \"pr103775.c\":5:35 -1\n     (nil))\nwhich is invalid because it sets x0 multiple times, one\nin SET_DEST of the PATTERN and once in PRE_MODIFY.\nAs perhaps other passes than REE might suffer from it, IMHO it is better\nto reject this during change validation.\n\n2022-03-26  Jakub Jelinek  <jakub@redhat.com>\n\n\tPR rtl-optimization/103775\n\t* recog.cc (check_invalid_inc_dec): New function.\n\t(insn_invalid_p): Return 1 if REG_INC operand overlaps\n\tany stored REGs.\n\n\t* gcc.dg/pr103775.c: New test.", "tree": {"sha": "5e5fd433a5e80bbb0daf19cc76879dbdc7c2905f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5e5fd433a5e80bbb0daf19cc76879dbdc7c2905f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6459e6537632bc06e04e6011ca7fb6488f0e8e7d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6459e6537632bc06e04e6011ca7fb6488f0e8e7d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6459e6537632bc06e04e6011ca7fb6488f0e8e7d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6459e6537632bc06e04e6011ca7fb6488f0e8e7d/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ff465bd8a0f0f96a00d3067018442917b194b7af", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ff465bd8a0f0f96a00d3067018442917b194b7af", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ff465bd8a0f0f96a00d3067018442917b194b7af"}], "stats": {"total": 34, "additions": 34, "deletions": 0}, "files": [{"sha": "cd2410ab2ae81082fccf537e835ee6b99b96824f", "filename": "gcc/recog.cc", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6459e6537632bc06e04e6011ca7fb6488f0e8e7d/gcc%2Frecog.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6459e6537632bc06e04e6011ca7fb6488f0e8e7d/gcc%2Frecog.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frecog.cc?ref=6459e6537632bc06e04e6011ca7fb6488f0e8e7d", "patch": "@@ -329,6 +329,17 @@ canonicalize_change_group (rtx_insn *insn, rtx x)\n     return false;\n }\n \n+/* Check if REG_INC argument in *data overlaps a stored REG.  */\n+\n+static void\n+check_invalid_inc_dec (rtx reg, const_rtx, void *data)\n+{\n+  rtx *pinc = (rtx *) data;\n+  if (*pinc == NULL_RTX || MEM_P (reg))\n+    return;\n+  if (reg_overlap_mentioned_p (reg, *pinc))\n+    *pinc = NULL_RTX;\n+}\n \n /* This subroutine of apply_change_group verifies whether the changes to INSN\n    were valid; i.e. whether INSN can still be recognized.\n@@ -386,6 +397,17 @@ insn_invalid_p (rtx_insn *insn, bool in_group)\n \treturn 1;\n     }\n \n+  /* Punt if REG_INC argument overlaps some stored REG.  */\n+  for (rtx link = FIND_REG_INC_NOTE (insn, NULL_RTX);\n+       link; link = XEXP (link, 1))\n+    if (REG_NOTE_KIND (link) == REG_INC)\n+      {\n+\trtx reg = XEXP (link, 0);\n+\tnote_stores (insn, check_invalid_inc_dec, &reg);\n+\tif (reg == NULL_RTX)\n+\t  return 1;\n+      }\n+\n   INSN_CODE (insn) = icode;\n   return 0;\n }"}, {"sha": "4a8c0d6d1454470e44a7987a07047fe3e3694c3f", "filename": "gcc/testsuite/gcc.dg/pr103775.c", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6459e6537632bc06e04e6011ca7fb6488f0e8e7d/gcc%2Ftestsuite%2Fgcc.dg%2Fpr103775.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6459e6537632bc06e04e6011ca7fb6488f0e8e7d/gcc%2Ftestsuite%2Fgcc.dg%2Fpr103775.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr103775.c?ref=6459e6537632bc06e04e6011ca7fb6488f0e8e7d", "patch": "@@ -0,0 +1,12 @@\n+/* PR rtl-optimization/103775 */\n+/* { dg-do assemble { target int128 } } */\n+/* { dg-options \"-Og -fno-forward-propagate -free -g\" } */\n+\n+int\n+foo (char a, short b, int c, __int128 d, char e, short f, int g, __int128 h)\n+{\n+  long i = __builtin_clrsbll ((char) h);\n+  __builtin_memset ((char *) &h + 4, d, 3);\n+  c &= (char) h;\n+  return c + i;\n+}"}]}