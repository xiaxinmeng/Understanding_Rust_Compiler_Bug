{"sha": "6c7b0df8029d01e05577668333660d0bc58a3023", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmM3YjBkZjgwMjlkMDFlMDU1Nzc2NjgzMzM2NjBkMGJjNThhMzAyMw==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2019-10-22T13:08:53Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2019-10-22T13:08:53Z"}, "message": "re PR tree-optimization/92173 (ICE in optab_for_tree_code, at optabs-tree.c:81)\n\n2019-10-22  Richard Biener  <rguenther@suse.de>\n\n\tPR tree-optimization/92173\n\t* tree-vect-loop.c (vectorizable_reduction): If\n\tvect_transform_reduction cannot handle code-generation try without\n\tthe single-def-use-cycle optimization.  Pass optab_vector to\n\toptab_for_tree_code to get vector shifts as that's what we'd\n\tgenerate.\n\n\t* gcc.dg/torture/pr92173.c: New testcase.\n\nFrom-SVN: r277288", "tree": {"sha": "c20bf7b5f2e7182ea19563306405013ba0a1a803", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c20bf7b5f2e7182ea19563306405013ba0a1a803"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6c7b0df8029d01e05577668333660d0bc58a3023", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6c7b0df8029d01e05577668333660d0bc58a3023", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6c7b0df8029d01e05577668333660d0bc58a3023", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6c7b0df8029d01e05577668333660d0bc58a3023/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "92781ff1da896b2f92b1dcc06953be493371bf21", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/92781ff1da896b2f92b1dcc06953be493371bf21", "html_url": "https://github.com/Rust-GCC/gccrs/commit/92781ff1da896b2f92b1dcc06953be493371bf21"}], "stats": {"total": 115, "additions": 106, "deletions": 9}, "files": [{"sha": "f8cfef70508389f91b75f5d4c29e18916fcb1833", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c7b0df8029d01e05577668333660d0bc58a3023/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c7b0df8029d01e05577668333660d0bc58a3023/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=6c7b0df8029d01e05577668333660d0bc58a3023", "patch": "@@ -1,3 +1,12 @@\n+2019-10-22  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/92173\n+\t* tree-vect-loop.c (vectorizable_reduction): If\n+\tvect_transform_reduction cannot handle code-generation try without\n+\tthe single-def-use-cycle optimization.  Pass optab_vector to\n+\toptab_for_tree_code to get vector shifts as that's what we'd\n+\tgenerate.\n+\n 2019-10-22  Michael Matz  <matz@suse.de>\n \n \tPR middle-end/90796"}, {"sha": "0581b5f50c910e854ec3f03780e110abbf90bcd4", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c7b0df8029d01e05577668333660d0bc58a3023/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c7b0df8029d01e05577668333660d0bc58a3023/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=6c7b0df8029d01e05577668333660d0bc58a3023", "patch": "@@ -1,3 +1,8 @@\n+2019-10-22  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/92173\n+\t* gcc.dg/torture/pr92173.c: New testcase.\n+\n 2019-10-22  Michael Matz  <matz@suse.de>\n \n \tPR middle-end/90796"}, {"sha": "62e6328cb28468320960a6de4d45d7ab1800e2be", "filename": "gcc/testsuite/gcc.dg/vshift-5.c", "status": "modified", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c7b0df8029d01e05577668333660d0bc58a3023/gcc%2Ftestsuite%2Fgcc.dg%2Fvshift-5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c7b0df8029d01e05577668333660d0bc58a3023/gcc%2Ftestsuite%2Fgcc.dg%2Fvshift-5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvshift-5.c?ref=6c7b0df8029d01e05577668333660d0bc58a3023", "patch": "@@ -40,6 +40,42 @@ f2 (void)\n   a[3] = a3;\n }\n \n+__attribute__((noinline, noclone)) void\n+f2a (int x)\n+{\n+  long long a0, a1, a2, a3;\n+  a0 = a[0];\n+  a1 = a[1];\n+  a2 = a[2];\n+  a3 = a[3];\n+  a0 = a0 << x;\n+  a1 = a1 << 2;\n+  a2 = a2 << 2;\n+  a3 = a3 << 2;\n+  a[0] = a0;\n+  a[1] = a1;\n+  a[2] = a2;\n+  a[3] = a3;\n+}\n+\n+__attribute__((noinline, noclone)) void\n+f2b (int x)\n+{\n+  long long a0, a1, a2, a3;\n+  a0 = a[0];\n+  a1 = a[1];\n+  a2 = a[2];\n+  a3 = a[3];\n+  a0 = a0 << 2;\n+  a1 = a1 << 2;\n+  a2 = a2 << x;\n+  a3 = a3 << 2;\n+  a[0] = a0;\n+  a[1] = a1;\n+  a[2] = a2;\n+  a[3] = a3;\n+}\n+\n __attribute__((noinline, noclone)) void\n f3 (int x)\n {\n@@ -77,5 +113,13 @@ main ()\n   if (a[0] != (4LL << 7) || a[1] != (3LL << 8)\n       || a[2] != (2LL << 9) || a[3] != (1LL << 10))\n     abort ();\n+  f2a (3);\n+  if (a[0] != (4LL << 10) || a[1] != (3LL << 10)\n+      || a[2] != (2LL << 11) || a[3] != (1LL << 12))\n+    abort ();\n+  f2b (3);\n+  if (a[0] != (4LL << 12) || a[1] != (3LL << 12)\n+      || a[2] != (2LL << 14) || a[3] != (1LL << 14))\n+    abort ();\n   return 0;\n }"}, {"sha": "864db64d20025ff4691172d8bc9434f3f8eded01", "filename": "gcc/tree-vect-slp.c", "status": "modified", "additions": 22, "deletions": 6, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c7b0df8029d01e05577668333660d0bc58a3023/gcc%2Ftree-vect-slp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c7b0df8029d01e05577668333660d0bc58a3023/gcc%2Ftree-vect-slp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-slp.c?ref=6c7b0df8029d01e05577668333660d0bc58a3023", "patch": "@@ -475,8 +475,11 @@ vect_get_and_check_slp_defs (vec_info *vinfo, unsigned char *swap,\n       /* Check the types of the definitions.  */\n       switch (dt)\n \t{\n-\tcase vect_constant_def:\n \tcase vect_external_def:\n+\t  /* Make sure to demote the overall operand to external.  */\n+\t  oprnd_info->first_dt = vect_external_def;\n+\t  /* Fallthru.  */\n+\tcase vect_constant_def:\n \t  oprnd_info->def_stmts.quick_push (NULL);\n \t  oprnd_info->ops.quick_push (oprnd);\n \t  break;\n@@ -1504,21 +1507,34 @@ static void\n vect_print_slp_tree (dump_flags_t dump_kind, dump_location_t loc,\n \t\t     slp_tree node, hash_set<slp_tree> &visited)\n {\n-  int i;\n+  unsigned i;\n   stmt_vec_info stmt_info;\n   slp_tree child;\n+  tree op;\n \n   if (visited.add (node))\n     return;\n \n   dump_metadata_t metadata (dump_kind, loc.get_impl_location ());\n   dump_user_location_t user_loc = loc.get_user_location ();\n   dump_printf_loc (metadata, user_loc, \"node%s %p (max_nunits=%u)\\n\",\n-\t\t   SLP_TREE_DEF_TYPE (node) != vect_internal_def\n-\t\t   ? \" (external)\" : \"\", node,\n+\t\t   SLP_TREE_DEF_TYPE (node) == vect_external_def\n+\t\t   ? \" (external)\"\n+\t\t   : (SLP_TREE_DEF_TYPE (node) == vect_constant_def\n+\t\t      ? \" (constant)\"\n+\t\t      : \"\"), node,\n \t\t   estimated_poly_value (node->max_nunits));\n-  FOR_EACH_VEC_ELT (SLP_TREE_SCALAR_STMTS (node), i, stmt_info)\n-    dump_printf_loc (metadata, user_loc, \"\\tstmt %d %G\", i, stmt_info->stmt);\n+  if (SLP_TREE_SCALAR_STMTS (node).exists ())\n+    FOR_EACH_VEC_ELT (SLP_TREE_SCALAR_STMTS (node), i, stmt_info)\n+      dump_printf_loc (metadata, user_loc, \"\\tstmt %u %G\", i, stmt_info->stmt);\n+  else\n+    {\n+      dump_printf_loc (metadata, user_loc, \"\\t{ \");\n+      FOR_EACH_VEC_ELT (SLP_TREE_SCALAR_OPS (node), i, op)\n+\tdump_printf (metadata, \"%T%s \", op,\n+\t\t     i < SLP_TREE_SCALAR_OPS (node).length () - 1 ? \",\" : \"\");\n+      dump_printf (metadata, \"}\\n\");\n+    }\n   if (SLP_TREE_CHILDREN (node).is_empty ())\n     return;\n   dump_printf_loc (metadata, user_loc, \"\\tchildren\");"}, {"sha": "a44c3deb082e19ebe4c6f17c3ab324b87addc4b6", "filename": "gcc/tree-vect-stmts.c", "status": "modified", "additions": 26, "deletions": 3, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c7b0df8029d01e05577668333660d0bc58a3023/gcc%2Ftree-vect-stmts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c7b0df8029d01e05577668333660d0bc58a3023/gcc%2Ftree-vect-stmts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-stmts.c?ref=6c7b0df8029d01e05577668333660d0bc58a3023", "patch": "@@ -5670,8 +5670,11 @@ vectorizable_shift (stmt_vec_info stmt_info, gimple_stmt_iterator *gsi,\n \n       if (!op1_vectype)\n \top1_vectype = get_same_sized_vectype (TREE_TYPE (op1), vectype_out);\n-      if (op1_vectype == NULL_TREE\n-\t  || TYPE_MODE (op1_vectype) != TYPE_MODE (vectype))\n+      if ((op1_vectype == NULL_TREE\n+\t   || TYPE_MODE (op1_vectype) != TYPE_MODE (vectype))\n+\t  && (!slp_node\n+\t      || SLP_TREE_DEF_TYPE\n+\t\t   (SLP_TREE_CHILDREN (slp_node)[1]) != vect_constant_def))\n \t{\n \t  if (dump_enabled_p ())\n \t    dump_printf_loc (MSG_MISSED_OPTIMIZATION, vect_location,\n@@ -5710,7 +5713,10 @@ vectorizable_shift (stmt_vec_info stmt_info, gimple_stmt_iterator *gsi,\n                  so make sure the scalar is the right type if we are\n \t\t dealing with vectors of long long/long/short/char.  */\n               if (dt[1] == vect_constant_def)\n-                op1 = fold_convert (TREE_TYPE (vectype), op1);\n+\t\t{\n+\t\t  if (!slp_node)\n+\t\t    op1 = fold_convert (TREE_TYPE (vectype), op1);\n+\t\t}\n \t      else if (!useless_type_conversion_p (TREE_TYPE (vectype),\n \t\t\t\t\t\t   TREE_TYPE (op1)))\n \t\t{\n@@ -5821,6 +5827,23 @@ vectorizable_shift (stmt_vec_info stmt_info, gimple_stmt_iterator *gsi,\n                     }\n                 }\n             }\n+\t  else if (slp_node\n+\t\t   && !useless_type_conversion_p (TREE_TYPE (vectype),\n+\t\t\t\t\t\t  TREE_TYPE (op1)))\n+\t    {\n+\t      /* Convert the scalar constant shift amounts in-place.  */\n+\t      slp_tree shift = SLP_TREE_CHILDREN (slp_node)[1];\n+\t      gcc_assert (SLP_TREE_DEF_TYPE (shift) == vect_constant_def);\n+\t      for (unsigned i = 0;\n+\t\t   i < SLP_TREE_SCALAR_OPS (shift).length (); ++i)\n+\t\t{\n+\t\t  SLP_TREE_SCALAR_OPS (shift)[i]\n+\t\t    = fold_convert (TREE_TYPE (vectype),\n+\t\t\t\t    SLP_TREE_SCALAR_OPS (shift)[i]);\n+\t\t  gcc_assert ((TREE_CODE (SLP_TREE_SCALAR_OPS (shift)[i])\n+\t\t\t       == INTEGER_CST));\n+\t\t}\n+\t    }\n \n           /* vec_oprnd1 is available if operand 1 should be of a scalar-type\n              (a special case for certain kind of vector shifts); otherwise,"}]}