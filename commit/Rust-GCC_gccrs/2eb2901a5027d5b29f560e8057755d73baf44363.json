{"sha": "2eb2901a5027d5b29f560e8057755d73baf44363", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MmViMjkwMWE1MDI3ZDViMjlmNTYwZTgwNTc3NTVkNzNiYWY0NDM2Mw==", "commit": {"author": {"name": "Jason Thorpe", "email": "thorpej@wasabisystems.com", "date": "2002-05-31T04:23:14Z"}, "committer": {"name": "Jason Thorpe", "email": "thorpej@gcc.gnu.org", "date": "2002-05-31T04:23:14Z"}, "message": "ns32k.h: Define named constants for the bits in target_flags and use them.\n\n* config/ns32k/ns32k.h: Define named constants for the\nbits in target_flags and use them.\n* config/ns32k/netbsd.h (TARGET_DEFAULT): Use named constants.\n\nFrom-SVN: r54086", "tree": {"sha": "109098704d20e42b5b760ef178bf7b3a26b212fc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/109098704d20e42b5b760ef178bf7b3a26b212fc"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2eb2901a5027d5b29f560e8057755d73baf44363", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2eb2901a5027d5b29f560e8057755d73baf44363", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2eb2901a5027d5b29f560e8057755d73baf44363", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2eb2901a5027d5b29f560e8057755d73baf44363/comments", "author": null, "committer": null, "parents": [{"sha": "806bf4137dfb55d775e8e1b9040f69ac557a44ad", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/806bf4137dfb55d775e8e1b9040f69ac557a44ad", "html_url": "https://github.com/Rust-GCC/gccrs/commit/806bf4137dfb55d775e8e1b9040f69ac557a44ad"}], "stats": {"total": 98, "additions": 62, "deletions": 36}, "files": [{"sha": "a121af0226e94d7e299184a21d867c6e12e49bc9", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2eb2901a5027d5b29f560e8057755d73baf44363/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2eb2901a5027d5b29f560e8057755d73baf44363/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=2eb2901a5027d5b29f560e8057755d73baf44363", "patch": "@@ -1,3 +1,9 @@\n+2002-05-31  Jason Thorpe  <thorpej@wasabisystems.com>\n+\n+\t* config/ns32k/ns32k.h: Define named constants for the\n+\tbits in target_flags and use them.\n+\t* config/ns32k/netbsd.h (TARGET_DEFAULT): Use named constants.\n+\n 2002-05-30  John David Anglin  <dave@hiauly1.hia.nrc.ca>\n \n \t* config.gcc (tm_file): Prefix pa/pa-700.h to tm_file list for PA1.0"}, {"sha": "b57bad63a7ac7514bd9397e6a2c80f8371dadfbd", "filename": "gcc/config/ns32k/netbsd.h", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2eb2901a5027d5b29f560e8057755d73baf44363/gcc%2Fconfig%2Fns32k%2Fnetbsd.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2eb2901a5027d5b29f560e8057755d73baf44363/gcc%2Fconfig%2Fns32k%2Fnetbsd.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fns32k%2Fnetbsd.h?ref=2eb2901a5027d5b29f560e8057755d73baf44363", "patch": "@@ -24,7 +24,9 @@ Boston, MA 02111-1307, USA.  */\n    FPU is 32381;\n    Use multiply-add instructions */\n \n-#define TARGET_DEFAULT (1 + 24 + 32 + 64 + 256 + 512)\n+#define TARGET_DEFAULT \\\n+  (MASK_32532|MASK_32332 | MASK_NO_SB | MASK_NO_BITFIELD | \\\n+   MASK_32081|MASK_32381 | MASK_MULT_ADD)\n \n /* 32-bit alignment for efficiency */\n "}, {"sha": "d1cb4b7f3d9322ff36f3fd796d3e6921a9a75edf", "filename": "gcc/config/ns32k/ns32k.h", "status": "modified", "additions": 53, "deletions": 35, "changes": 88, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2eb2901a5027d5b29f560e8057755d73baf44363/gcc%2Fconfig%2Fns32k%2Fns32k.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2eb2901a5027d5b29f560e8057755d73baf44363/gcc%2Fconfig%2Fns32k%2Fns32k.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fns32k%2Fns32k.h?ref=2eb2901a5027d5b29f560e8057755d73baf44363", "patch": "@@ -61,37 +61,49 @@ Boston, MA 02111-1307, USA.  */\n \n extern int target_flags;\n \n+#define MASK_32081\t\t1\n+#define MASK_RTD\t\t2\n+#define MASK_REGPARM\t\t4\n+#define MASK_32532\t\t8\n+#define MASK_32332\t\t16\n+#define MASK_NO_SB\t\t32\n+#define MASK_NO_BITFIELD\t64\n+#define MASK_HIMEM\t\t128\n+#define MASK_32381\t\t256\n+#define MASK_MULT_ADD\t\t512\n+#define MASK_SRC\t\t1024\n+\n /* Macros used in the machine description to test the flags.  */\n \n /* Compile 32081 insns for floating point (not library calls). */\n-#define TARGET_32081 (target_flags & 1)\n-#define TARGET_32381 (target_flags & 256)\n+#define TARGET_32081 (target_flags & MASK_32081)\n+#define TARGET_32381 (target_flags & MASK_32381)\n \n /* The use of multiply-add instructions is optional because there may\n  * be cases where it produces worse code.\n  */\n \n-#define TARGET_MULT_ADD (target_flags & 512)\n+#define TARGET_MULT_ADD (target_flags & MASK_MULT_ADD)\n \n /* Compile using rtd insn calling sequence.\n    This will not work unless you use prototypes at least\n    for all functions that can take varying numbers of args.  */\n-#define TARGET_RTD (target_flags & 2)\n+#define TARGET_RTD (target_flags & MASK_RTD)\n \n /* Compile passing first two args in regs 0 and 1.  */\n-#define TARGET_REGPARM (target_flags & 4)\n+#define TARGET_REGPARM (target_flags & MASK_REGPARM)\n \n /* Options to select type of CPU, for better optimization.\n    The output is correct for any kind of 32000 regardless of these options.  */\n-#define TARGET_32532 (target_flags & 8)\n-#define TARGET_32332 (target_flags & 16)\n+#define TARGET_32532 (target_flags & MASK_32532)\n+#define TARGET_32332 (target_flags & MASK_32332)\n \n /* Ok to use the static base register (and presume it's 0) */\n-#define TARGET_SB    ((target_flags & 32) == 0)\n-#define TARGET_HIMEM (target_flags & 128)\n+#define TARGET_SB    ((target_flags & MASK_NO_SB) == 0)\n+#define TARGET_HIMEM (target_flags & MASK_HIMEM)\n \n /* Compile using bitfield insns.  */\n-#define TARGET_BITFIELD ((target_flags & 64) == 0)\n+#define TARGET_BITFIELD ((target_flags & MASK_NO_BITFIELD) == 0)\n \n /* Macro to define tables used to set the flags.\n    This is a list in braces of pairs in braces,\n@@ -100,29 +112,32 @@ extern int target_flags;\n    An empty string NAME is used to identify the default VALUE.  */\n \n #define TARGET_SWITCHES\t\t\t\t\t\t\t\\\n-  { { \"32081\", 1, N_(\"Use hardware fp\")},\t\t\t\t\\\n-    { \"soft-float\", -257, N_(\"Don't use hardware fp\")},\t\t\t\\\n-    { \"rtd\", 2, N_(\"Alternative calling convention\")},\t\t\t\\\n-    { \"nortd\", -2, N_(\"Use normal calling convention\")},\t\t\\\n-    { \"regparm\", 4, N_(\"Pass some arguments in registers\")},\t\t\\\n-    { \"noregparm\", -4, N_(\"Pass all arguments on stack\")},\t\t\\\n-    { \"32532\", 24, N_(\"Optimize for 32532 cpu\")},\t\t\t\\\n-    { \"32332\", 16, N_(\"Optimize for 32332 cpu\")},\t\t\t\\\n-    { \"32332\", -8, 0},\t\t\t\t\t\t\t\\\n-    { \"32032\", -24, N_(\"Optimize for 32032\")},\t\t\t\t\\\n-    { \"sb\", -32,\t\t\t\t\t\t\t\\\n+  { { \"32081\", MASK_32081, N_(\"Use hardware fp\")},\t\t\t\\\n+    { \"soft-float\", -(MASK_32081|MASK_32381),\t\t\t\t\\\n+      N_(\"Don't use hardware fp\")},\t\t\t\t\t\\\n+    { \"rtd\", MASK_RTD, N_(\"Alternative calling convention\")},\t\t\\\n+    { \"nortd\", -MASK_RTD, N_(\"Use normal calling convention\")},\t\t\\\n+    { \"regparm\", MASK_REGPARM, N_(\"Pass some arguments in registers\")},\t\\\n+    { \"noregparm\", -MASK_REGPARM, N_(\"Pass all arguments on stack\")},\t\\\n+    { \"32532\", MASK_32532|MASK_32332, N_(\"Optimize for 32532 cpu\")},\t\\\n+    { \"32332\", MASK_32332, N_(\"Optimize for 32332 cpu\")},\t\t\\\n+    { \"32332\", -MASK_32532, 0},\t\t\t\t\t\t\\\n+    { \"32032\", -(MASK_32532|MASK_32332), N_(\"Optimize for 32032\")},\t\\\n+    { \"sb\", -MASK_NO_SB,\t\t\t\t\t\t\\\n       N_(\"Register sb is zero. Use for absolute addressing\")},\t\t\\\n-    { \"nosb\", 32, N_(\"Do not use register sb\")},\t\t\t\\\n-    { \"bitfield\", -64, N_(\"Do not use bit-field instructions\")},\t\\\n-    { \"nobitfield\", 64, N_(\"Use bit-field instructions\")},\t\t\\\n-    { \"himem\", 128, N_(\"Generate code for high memory\")},\t\t\\\n-    { \"nohimem\", -128, N_(\"Generate code for low memory\")},\t\t\\\n-    { \"32381\", 256, N_(\"32381 fpu\")},\t\t\t\t\t\\\n-    { \"mult-add\", 512, N_(\"Use multiply-accumulate fp instructions\")},\t\\\n-    { \"nomult-add\", -512,\t\t\t\t\t\t\\\n+    { \"nosb\", MASK_NO_SB, N_(\"Do not use register sb\")},\t\t\\\n+    { \"bitfield\", -MASK_NO_BITFIELD,\t\t\t\t\t\\\n+      N_(\"Do not use bit-field instructions\")},\t\t\t\t\\\n+    { \"nobitfield\", MASK_NO_BITFIELD, N_(\"Use bit-field instructions\")},\\\n+    { \"himem\", MASK_HIMEM, N_(\"Generate code for high memory\")},\t\\\n+    { \"nohimem\", -MASK_HIMEM, N_(\"Generate code for low memory\")},\t\\\n+    { \"32381\", MASK_32381, N_(\"32381 fpu\")},\t\t\t\t\\\n+    { \"mult-add\", MASK_MULT_ADD,\t\t\t\t\t\\\n+      N_(\"Use multiply-accumulate fp instructions\")},\t\t\t\\\n+    { \"nomult-add\", -MASK_MULT_ADD,\t\t\t\t\t\\\n       N_(\"Do not use multiply-accumulate fp instructions\") }, \t\t\\\n-    { \"src\", 1024, N_(\"\\\"Small register classes\\\" kludge\")},\t\t\\\n-    { \"nosrc\", -1024, N_(\"No \\\"Small register classes\\\" kludge\")},\t\\\n+    { \"src\", MASK_SRC, N_(\"\\\"Small register classes\\\" kludge\")},\t\\\n+    { \"nosrc\", -MASK_SRC, N_(\"No \\\"Small register classes\\\" kludge\")},\t\\\n     { \"\", TARGET_DEFAULT, 0}}\n \n /* TARGET_DEFAULT is defined in encore.h, pc532.h, etc.  */\n@@ -132,9 +147,12 @@ extern int target_flags;\n \n #define OVERRIDE_OPTIONS\t\t\t\t\\\n {\t\t\t\t\t\t\t\\\n-  if (flag_pic || TARGET_HIMEM) target_flags |= 32;\t\\\n-  if (TARGET_32381) target_flags |= 1;\t\t\t\\\n-  else target_flags &= ~512;\t\t\t\t\\\n+  if (flag_pic || TARGET_HIMEM)\t\t\t\t\\\n+    target_flags |= MASK_NO_SB;\t\t\t\t\\\n+  if (TARGET_32381)\t\t\t\t\t\\\n+    target_flags |= MASK_32081;\t\t\t\t\\\n+  else\t\t\t\t\t\t\t\\\n+    target_flags &= ~MASK_MULT_ADD;\t\t\t\\\n }\n \n /* Zero or more C statements that may conditionally modify two\n@@ -835,7 +853,7 @@ __transfer_from_trampoline ()\t\t\\\n /* SMALL_REGISTER_CLASSES is a run time option. This should no longer\n    be necessay and should go when we have confidence that we won't run\n    out of spill registers */\n-#define SMALL_REGISTER_CLASSES (target_flags & 1024)\n+#define SMALL_REGISTER_CLASSES (target_flags & MASK_SRC)\n \n /* A C expression whose value is nonzero if pseudos that have been\n    assigned to registers of class CLASS would likely be spilled"}]}