{"sha": "b9da8f063a6c65228172528d5cbf9eff511350da", "node_id": "C_kwDOANBUbNoAKGI5ZGE4ZjA2M2E2YzY1MjI4MTcyNTI4ZDVjYmY5ZWZmNTExMzUwZGE", "commit": {"author": {"name": "Ju-Zhe Zhong", "email": "juzhe.zhong@rivai.ai", "date": "2023-02-14T15:04:49Z"}, "committer": {"name": "Kito Cheng", "email": "kito.cheng@sifive.com", "date": "2023-02-17T02:46:11Z"}, "message": "RISC-V: Replace simm32_p with immediate_operand (Pmode)\n\nsimm32_p is used to check constant int value within 32-bit.\nIt's used in handling SEW = 64 in rv32 system since such constant int\nvalue with 32-bit allow us use vx instruction.\n\nThe current implementation of simm32_p is quite ugly and now I figure\nout immedate_operand (op, pmode) can help us to check whether the op\nis a constant value within 32-bit.\n\nI already have a bunch testcases to test SEW = 64 in rv32 system and\nall regression tests are passed with this patch.\n\ngcc/ChangeLog:\n\n\t* config/riscv/riscv-protos.h (simm32_p): Remove.\n\t* config/riscv/riscv-v.cc (simm32_p): Ditto.\n\t* config/riscv/vector.md: Use immediate_operand\n\tinstead of riscv_vector::simm32_p.", "tree": {"sha": "7f15ce1033cf6faa108f05bb683e03648b895651", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7f15ce1033cf6faa108f05bb683e03648b895651"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b9da8f063a6c65228172528d5cbf9eff511350da", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b9da8f063a6c65228172528d5cbf9eff511350da", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b9da8f063a6c65228172528d5cbf9eff511350da", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b9da8f063a6c65228172528d5cbf9eff511350da/comments", "author": {"login": "zhongjuzhe", "id": 66454988, "node_id": "MDQ6VXNlcjY2NDU0OTg4", "avatar_url": "https://avatars.githubusercontent.com/u/66454988?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zhongjuzhe", "html_url": "https://github.com/zhongjuzhe", "followers_url": "https://api.github.com/users/zhongjuzhe/followers", "following_url": "https://api.github.com/users/zhongjuzhe/following{/other_user}", "gists_url": "https://api.github.com/users/zhongjuzhe/gists{/gist_id}", "starred_url": "https://api.github.com/users/zhongjuzhe/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zhongjuzhe/subscriptions", "organizations_url": "https://api.github.com/users/zhongjuzhe/orgs", "repos_url": "https://api.github.com/users/zhongjuzhe/repos", "events_url": "https://api.github.com/users/zhongjuzhe/events{/privacy}", "received_events_url": "https://api.github.com/users/zhongjuzhe/received_events", "type": "User", "site_admin": false}, "committer": {"login": "kito-cheng", "id": 2723185, "node_id": "MDQ6VXNlcjI3MjMxODU=", "avatar_url": "https://avatars.githubusercontent.com/u/2723185?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kito-cheng", "html_url": "https://github.com/kito-cheng", "followers_url": "https://api.github.com/users/kito-cheng/followers", "following_url": "https://api.github.com/users/kito-cheng/following{/other_user}", "gists_url": "https://api.github.com/users/kito-cheng/gists{/gist_id}", "starred_url": "https://api.github.com/users/kito-cheng/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kito-cheng/subscriptions", "organizations_url": "https://api.github.com/users/kito-cheng/orgs", "repos_url": "https://api.github.com/users/kito-cheng/repos", "events_url": "https://api.github.com/users/kito-cheng/events{/privacy}", "received_events_url": "https://api.github.com/users/kito-cheng/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "061b13ed014ba0b6891800a5c7f852bf58e4d856", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/061b13ed014ba0b6891800a5c7f852bf58e4d856", "html_url": "https://github.com/Rust-GCC/gccrs/commit/061b13ed014ba0b6891800a5c7f852bf58e4d856"}], "stats": {"total": 45, "additions": 17, "deletions": 28}, "files": [{"sha": "ee8e903ddf55471f7a937e0150d71ac4bfc6fb94", "filename": "gcc/config/riscv/riscv-protos.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b9da8f063a6c65228172528d5cbf9eff511350da/gcc%2Fconfig%2Friscv%2Friscv-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b9da8f063a6c65228172528d5cbf9eff511350da/gcc%2Fconfig%2Friscv%2Friscv-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Friscv%2Friscv-protos.h?ref=b9da8f063a6c65228172528d5cbf9eff511350da", "patch": "@@ -176,7 +176,6 @@ enum tail_policy get_prefer_tail_policy ();\n enum mask_policy get_prefer_mask_policy ();\n rtx get_avl_type_rtx (enum avl_type);\n opt_machine_mode get_vector_mode (scalar_mode, poly_uint64);\n-extern bool simm32_p (rtx);\n extern bool simm5_p (rtx);\n extern bool neg_simm5_p (rtx);\n #ifdef RTX_CODE"}, {"sha": "dd70bf9b541314b4198cc52b6b4f147bdb1c49f6", "filename": "gcc/config/riscv/riscv-v.cc", "status": "modified", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b9da8f063a6c65228172528d5cbf9eff511350da/gcc%2Fconfig%2Friscv%2Friscv-v.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b9da8f063a6c65228172528d5cbf9eff511350da/gcc%2Fconfig%2Friscv%2Friscv-v.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Friscv%2Friscv-v.cc?ref=b9da8f063a6c65228172528d5cbf9eff511350da", "patch": "@@ -396,16 +396,6 @@ get_vector_mode (scalar_mode inner_mode, poly_uint64 nunits)\n   return opt_machine_mode ();\n }\n \n-/* Helper functions for handling sew=64 on RV32 system. */\n-bool\n-simm32_p (rtx x)\n-{\n-  if (!CONST_INT_P (x))\n-    return false;\n-  unsigned HOST_WIDE_INT val = UINTVAL (x);\n-  return val <= 0x7FFFFFFFULL || val >= 0xFFFFFFFF80000000ULL;\n-}\n-\n bool\n simm5_p (rtx x)\n {"}, {"sha": "cc550b7458b97991d2843227df402d50f73602b1", "filename": "gcc/config/riscv/vector.md", "status": "modified", "additions": 17, "deletions": 17, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b9da8f063a6c65228172528d5cbf9eff511350da/gcc%2Fconfig%2Friscv%2Fvector.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b9da8f063a6c65228172528d5cbf9eff511350da/gcc%2Fconfig%2Friscv%2Fvector.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Friscv%2Fvector.md?ref=b9da8f063a6c65228172528d5cbf9eff511350da", "patch": "@@ -889,7 +889,7 @@\n       {\n \trtx v = gen_reg_rtx (<MODE>mode);\n \n-\tif (riscv_vector::simm32_p (operands[3]))\n+\tif (immediate_operand (operands[3], Pmode))\n \t  operands[3] = gen_rtx_SIGN_EXTEND (<VEL>mode,\n \t\tforce_reg (Pmode, operands[3]));\n \telse\n@@ -1479,7 +1479,7 @@\n       {\n \trtx v = gen_reg_rtx (<MODE>mode);\n \n-\tif (riscv_vector::simm32_p (operands[4]))\n+\tif (immediate_operand (operands[4], Pmode))\n \t  {\n \t    if (!rtx_equal_p (operands[4], const0_rtx))\n \t      operands[4] = force_reg (Pmode, operands[4]);\n@@ -1572,7 +1572,7 @@\n       {\n \trtx v = gen_reg_rtx (<MODE>mode);\n \n-\tif (riscv_vector::simm32_p (operands[4]))\n+\tif (immediate_operand (operands[4], Pmode))\n \t  {\n \t    if (!rtx_equal_p (operands[4], const0_rtx))\n \t      operands[4] = force_reg (Pmode, operands[4]);\n@@ -1665,7 +1665,7 @@\n       {\n \trtx v = gen_reg_rtx (<MODE>mode);\n \n-\tif (riscv_vector::simm32_p (operands[4]))\n+\tif (immediate_operand (operands[4], Pmode))\n \t  operands[4] = gen_rtx_SIGN_EXTEND (<VEL>mode,\n \t\tforce_reg (Pmode, operands[4]));\n \telse\n@@ -1820,7 +1820,7 @@\n       {\n \trtx v = gen_reg_rtx (<MODE>mode);\n \n-\tif (riscv_vector::simm32_p (operands[4]))\n+\tif (immediate_operand (operands[4], Pmode))\n \t  operands[4] = gen_rtx_SIGN_EXTEND (<VEL>mode,\n \t\tforce_reg (Pmode, operands[4]));\n \telse\n@@ -1907,7 +1907,7 @@\n       {\n \trtx v = gen_reg_rtx (<MODE>mode);\n \n-\tif (riscv_vector::simm32_p (operands[4]))\n+\tif (immediate_operand (operands[4], Pmode))\n \t  operands[4] = gen_rtx_SIGN_EXTEND (<VEL>mode,\n \t\tforce_reg (Pmode, operands[4]));\n \telse\n@@ -2034,7 +2034,7 @@\n       {\n \trtx v = gen_reg_rtx (<MODE>mode);\n \n-\tif (riscv_vector::simm32_p (operands[4]))\n+\tif (immediate_operand (operands[4], Pmode))\n \t  {\n \t    if (!rtx_equal_p (operands[4], const0_rtx))\n \t      operands[4] = force_reg (Pmode, operands[4]);\n@@ -2226,7 +2226,7 @@\n       {\n         rtx v = gen_reg_rtx (<MODE>mode);\n \n-\tif (riscv_vector::simm32_p (operands[3]))\n+\tif (immediate_operand (operands[3], Pmode))\n \t  operands[3] = gen_rtx_SIGN_EXTEND (<VEL>mode,\n \t\tforce_reg (Pmode, operands[3]));\n         else\n@@ -2320,7 +2320,7 @@\n       {\n         rtx v = gen_reg_rtx (<MODE>mode);\n \n-\tif (riscv_vector::simm32_p (operands[3]))\n+\tif (immediate_operand (operands[3], Pmode))\n \t  {\n \t    if (!rtx_equal_p (operands[3], const0_rtx))\n \t      operands[3] = force_reg (Pmode, operands[3]);\n@@ -2497,7 +2497,7 @@\n       {\n \trtx v = gen_reg_rtx (<MODE>mode);\n \n-\tif (riscv_vector::simm32_p (operands[2]))\n+\tif (immediate_operand (operands[2], Pmode))\n \t  operands[2] = gen_rtx_SIGN_EXTEND (<VEL>mode,\n \t\tforce_reg (Pmode, operands[2]));\n \telse\n@@ -2577,7 +2577,7 @@\n       {\n         rtx v = gen_reg_rtx (<MODE>mode);\n \n-\tif (riscv_vector::simm32_p (operands[2]))\n+\tif (immediate_operand (operands[2], Pmode))\n \t  {\n \t    if (!rtx_equal_p (operands[2], const0_rtx))\n \t      operands[2] = force_reg (Pmode, operands[2]);\n@@ -2738,7 +2738,7 @@\n       {\n         rtx v = gen_reg_rtx (<MODE>mode);\n \n-\tif (riscv_vector::simm32_p (operands[2]))\n+\tif (immediate_operand (operands[2], Pmode))\n \t  operands[2] = gen_rtx_SIGN_EXTEND (<VEL>mode,\n \t\tforce_reg (Pmode, operands[2]));\n \telse\n@@ -2815,7 +2815,7 @@\n       {\n         rtx v = gen_reg_rtx (<MODE>mode);\n \n-\tif (riscv_vector::simm32_p (operands[2]))\n+\tif (immediate_operand (operands[2], Pmode))\n \t  {\n \t    if (!rtx_equal_p (operands[2], const0_rtx))\n \t      operands[2] = force_reg (Pmode, operands[2]);\n@@ -3310,7 +3310,7 @@\n       {\n \trtx v = gen_reg_rtx (<MODE>mode);\n \n-\tif (riscv_vector::simm32_p (operands[4]))\n+\tif (immediate_operand (operands[4], Pmode))\n \t  {\n \t    if (!rtx_equal_p (operands[4], const0_rtx))\n \t      operands[4] = force_reg (Pmode, operands[4]);\n@@ -3686,7 +3686,7 @@\n       {\n \trtx v = gen_reg_rtx (<MODE>mode);\n \n-\tif (riscv_vector::simm32_p (operands[5]))\n+\tif (immediate_operand (operands[5], Pmode))\n \t  {\n \t    if (!rtx_equal_p (operands[5], const0_rtx))\n \t      operands[5] = force_reg (Pmode, operands[5]);\n@@ -3739,7 +3739,7 @@\n       {\n \trtx v = gen_reg_rtx (<MODE>mode);\n \n-\tif (riscv_vector::simm32_p (operands[5]))\n+\tif (immediate_operand (operands[5], Pmode))\n \t  {\n \t    if (!rtx_equal_p (operands[5], const0_rtx))\n \t      operands[5] = force_reg (Pmode, operands[5]);\n@@ -4404,7 +4404,7 @@\n     {\n       rtx v = gen_reg_rtx (<MODE>mode);\n \n-      if (riscv_vector::simm32_p (operands[2]))\n+      if (immediate_operand (operands[2], Pmode))\n         operands[2] = gen_rtx_SIGN_EXTEND (<VEL>mode,\n       \t\tforce_reg (Pmode, operands[2]));\n       else"}]}