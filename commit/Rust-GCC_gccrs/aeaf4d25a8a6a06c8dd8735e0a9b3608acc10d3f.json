{"sha": "aeaf4d25a8a6a06c8dd8735e0a9b3608acc10d3f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWVhZjRkMjVhOGE2YTA2YzhkZDg3MzVlMGE5YjM2MDhhY2MxMGQzZg==", "commit": {"author": {"name": "Adam Nemet", "email": "anemet@lnxw.com", "date": "2002-08-08T11:08:34Z"}, "committer": {"name": "Nick Clifton", "email": "nickc@gcc.gnu.org", "date": "2002-08-08T11:08:34Z"}, "message": "arm.c (thumb_unexpanded_epilogue): Stack the PIC register.\n\n* config/arm/arm.c (thumb_unexpanded_epilogue): Stack the PIC register.\n(thumb_expand_prologue): Likewise.\n(thumb_output_function_prologue): Likewise.\n* config/arm/arm.h (THUMB_INITIAL_ELIMINATION_OFFSET): Account for the\nadditional push of the PIC register.\n\nFrom-SVN: r56128", "tree": {"sha": "93cd6302918d1181eda42bc96399b563baaea6e1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/93cd6302918d1181eda42bc96399b563baaea6e1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/aeaf4d25a8a6a06c8dd8735e0a9b3608acc10d3f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/aeaf4d25a8a6a06c8dd8735e0a9b3608acc10d3f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/aeaf4d25a8a6a06c8dd8735e0a9b3608acc10d3f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/aeaf4d25a8a6a06c8dd8735e0a9b3608acc10d3f/comments", "author": null, "committer": null, "parents": [{"sha": "5bfc90dea315f4ec135119a3526741e8fa6deb48", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5bfc90dea315f4ec135119a3526741e8fa6deb48", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5bfc90dea315f4ec135119a3526741e8fa6deb48"}], "stats": {"total": 76, "additions": 36, "deletions": 40}, "files": [{"sha": "2a1311f24739b60f8ccc01c2f979817652b396b8", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aeaf4d25a8a6a06c8dd8735e0a9b3608acc10d3f/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aeaf4d25a8a6a06c8dd8735e0a9b3608acc10d3f/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=aeaf4d25a8a6a06c8dd8735e0a9b3608acc10d3f", "patch": "@@ -1,3 +1,12 @@\n+2002-08-08  Adam Nemet  <anemet@lnxw.com>\n+\n+\t* config/arm/arm.c (thumb_unexpanded_epilogue): Stack the PIC\n+\tregister.\n+\t(thumb_expand_prologue): Likewise.\n+\t(thumb_output_function_prologue): Likewise.\n+\t* config/arm/arm.h (THUMB_INITIAL_ELIMINATION_OFFSET): Account for\n+\tthe additional push of the PIC register.\n+\n 2002-08-08  Nathan Sidwell  <nathan@codesourcery.com>\n \n \t* configure.in (enable_coverage): New enable switch."}, {"sha": "09df21487cea71bdc7e143aaea93a8946db2de2d", "filename": "gcc/config/arm/arm.c", "status": "modified", "additions": 17, "deletions": 36, "changes": 53, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aeaf4d25a8a6a06c8dd8735e0a9b3608acc10d3f/gcc%2Fconfig%2Farm%2Farm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aeaf4d25a8a6a06c8dd8735e0a9b3608acc10d3f/gcc%2Fconfig%2Farm%2Farm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.c?ref=aeaf4d25a8a6a06c8dd8735e0a9b3608acc10d3f", "patch": "@@ -9912,16 +9912,12 @@ thumb_unexpanded_epilogue ()\n     return \"\";\n \n   for (regno = 0; regno <= LAST_LO_REGNUM; regno++)\n-    if (regs_ever_live[regno] && !call_used_regs[regno]\n-\t&& !(TARGET_SINGLE_PIC_BASE && (regno == arm_pic_register)))\n+    if (THUMB_REG_PUSHED_P (regno))\n       live_regs_mask |= 1 << regno;\n \n   for (regno = 8; regno < 13; regno++)\n-    {\n-      if (regs_ever_live[regno] && !call_used_regs[regno]\n-\t  && !(TARGET_SINGLE_PIC_BASE && (regno == arm_pic_register)))\n-\thigh_regs_pushed++;\n-    }\n+    if (THUMB_REG_PUSHED_P (regno))\n+      high_regs_pushed++;\n \n   /* The prolog may have pushed some high registers to use as\n      work registers.  eg the testuite file:\n@@ -9966,8 +9962,7 @@ thumb_unexpanded_epilogue ()\n \t  (\"no low registers available for popping high registers\");\n       \n       for (next_hi_reg = 8; next_hi_reg < 13; next_hi_reg++)\n-\tif (regs_ever_live[next_hi_reg] && !call_used_regs[next_hi_reg]\n-\t    && !(TARGET_SINGLE_PIC_BASE && (next_hi_reg == arm_pic_register)))\n+\tif (THUMB_REG_PUSHED_P (next_hi_reg))\n \t  break;\n \n       while (high_regs_pushed)\n@@ -9996,10 +9991,7 @@ thumb_unexpanded_epilogue ()\n \t\t\t       regno);\n \t\t  \n \t\t  for (next_hi_reg++; next_hi_reg < 13; next_hi_reg++)\n-\t\t    if (regs_ever_live[next_hi_reg]\n-\t\t\t&& !call_used_regs[next_hi_reg]\n-\t\t\t&& !(TARGET_SINGLE_PIC_BASE \n-\t\t\t     && (next_hi_reg == arm_pic_register)))\n+\t\t    if (THUMB_REG_PUSHED_P (next_hi_reg))\n \t\t      break;\n \t\t}\n \t    }\n@@ -10166,14 +10158,12 @@ thumb_expand_prologue ()\n \t     been pushed at the start of the prologue and so we can corrupt\n \t     it now.  */\n \t  for (regno = LAST_ARG_REGNUM + 1; regno <= LAST_LO_REGNUM; regno++)\n-\t    if (regs_ever_live[regno]\n-\t\t&& !call_used_regs[regno] /* Paranoia */\n-\t\t&& !(TARGET_SINGLE_PIC_BASE && (regno == arm_pic_register))\n+\t    if (THUMB_REG_PUSHED_P (regno)\n \t\t&& !(frame_pointer_needed\n \t\t     && (regno == THUMB_HARD_FRAME_POINTER_REGNUM)))\n \t      break;\n \n-\t  if (regno > LAST_LO_REGNUM) /* Very unlikely */\n+\t  if (regno > LAST_LO_REGNUM) /* Very unlikely.  */\n \t    {\n \t      rtx spare = gen_rtx (REG, SImode, IP_REGNUM);\n \n@@ -10323,8 +10313,7 @@ thumb_output_function_prologue (f, size)\n     }\n \n   for (regno = 0; regno <= LAST_LO_REGNUM; regno++)\n-    if (regs_ever_live[regno] && !call_used_regs[regno]\n-\t&& !(TARGET_SINGLE_PIC_BASE && (regno == arm_pic_register)))\n+    if (THUMB_REG_PUSHED_P (regno))\n       live_regs_mask |= 1 << regno;\n \n   if (live_regs_mask || !leaf_function_p () || thumb_far_jump_used_p (1))\n@@ -10426,8 +10415,7 @@ thumb_output_function_prologue (f, size)\n \n   for (regno = 8; regno < 13; regno++)\n     {\n-      if (regs_ever_live[regno] && !call_used_regs[regno]\n-\t  && !(TARGET_SINGLE_PIC_BASE && (regno == arm_pic_register)))\n+      if (THUMB_REG_PUSHED_P (regno))\n \thigh_regs_pushed++;\n     }\n \n@@ -10439,9 +10427,7 @@ thumb_output_function_prologue (f, size)\n \n       for (next_hi_reg = 12; next_hi_reg > LAST_LO_REGNUM; next_hi_reg--)\n \t{\n-\t  if (regs_ever_live[next_hi_reg] && !call_used_regs[next_hi_reg]\n-\t      && !(TARGET_SINGLE_PIC_BASE\n-\t\t   && (next_hi_reg == arm_pic_register)))\n+\t  if (THUMB_REG_PUSHED_P (next_hi_reg))\n \t    break;\n \t}\n \n@@ -10450,8 +10436,7 @@ thumb_output_function_prologue (f, size)\n       if (pushable_regs == 0)\n \t{\n \t  /* Desperation time -- this probably will never happen.  */\n-\t  if (regs_ever_live[LAST_ARG_REGNUM]\n-\t      || !call_used_regs[LAST_ARG_REGNUM])\n+\t  if (THUMB_REG_PUSHED_P (LAST_ARG_REGNUM))\n \t    asm_fprintf (f, \"\\tmov\\t%r, %r\\n\", IP_REGNUM, LAST_ARG_REGNUM);\n \t  mask = 1 << LAST_ARG_REGNUM;\n \t}\n@@ -10467,15 +10452,12 @@ thumb_output_function_prologue (f, size)\n \t\t  high_regs_pushed--;\n \t\t  \n \t\t  if (high_regs_pushed)\n-\t\t    for (next_hi_reg--; next_hi_reg > LAST_LO_REGNUM;\n-\t\t\t next_hi_reg--)\n-\t\t      {\n-\t\t\tif (regs_ever_live[next_hi_reg]\n-\t\t\t    && !call_used_regs[next_hi_reg]\n-\t\t\t    && !(TARGET_SINGLE_PIC_BASE \n-\t\t\t\t && (next_hi_reg == arm_pic_register)))\n+\t\t    {\n+\t\t      for (next_hi_reg--; next_hi_reg > LAST_LO_REGNUM;\n+\t\t\t   next_hi_reg--)\n+\t\t\tif (THUMB_REG_PUSHED_P (next_hi_reg))\n \t\t\t  break;\n-\t\t      }\n+\t\t    }\n \t\t  else\n \t\t    {\n \t\t      mask &= ~((1 << regno) - 1);\n@@ -10488,8 +10470,7 @@ thumb_output_function_prologue (f, size)\n \t}\n \n       if (pushable_regs == 0\n-\t  && (regs_ever_live[LAST_ARG_REGNUM]\n-\t      || !call_used_regs[LAST_ARG_REGNUM]))\n+\t  && (THUMB_REG_PUSHED_P (LAST_ARG_REGNUM)))\n \tasm_fprintf (f, \"\\tmov\\t%r, %r\\n\", LAST_ARG_REGNUM, IP_REGNUM);\n     }\n }"}, {"sha": "64e71873148cbb0384ec0bf3b41bbab4cc124e55", "filename": "gcc/config/arm/arm.h", "status": "modified", "additions": 10, "deletions": 4, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aeaf4d25a8a6a06c8dd8735e0a9b3608acc10d3f/gcc%2Fconfig%2Farm%2Farm.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aeaf4d25a8a6a06c8dd8735e0a9b3608acc10d3f/gcc%2Fconfig%2Farm%2Farm.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.h?ref=aeaf4d25a8a6a06c8dd8735e0a9b3608acc10d3f", "patch": "@@ -1621,7 +1621,13 @@ typedef struct\n    ((TO) == ARM_HARD_FRAME_POINTER_REGNUM && TARGET_THUMB) ? 0 :\t\\\n    ((TO) == THUMB_HARD_FRAME_POINTER_REGNUM && TARGET_ARM) ? 0 :\t\\\n    1)\n-   \t\t\t\t\t\t\t\t \n+\n+#define THUMB_REG_PUSHED_P(reg)\t\t\t\t\t\\\n+  (regs_ever_live [reg]\t\t\t\t\t\t\\\n+   && (! call_used_regs [reg]\t\t\t\t\t\\\n+       || (flag_pic && (reg) == PIC_OFFSET_TABLE_REGNUM))\t\\\n+   && !(TARGET_SINGLE_PIC_BASE && ((reg) == arm_pic_register)))\n+     \n /* Define the offset between two registers, one to be eliminated, and the\n    other its replacement, at the start of a routine.  */\n #define ARM_INITIAL_ELIMINATION_OFFSET(FROM, TO, OFFSET)\t\t\\\n@@ -1640,13 +1646,13 @@ typedef struct\n       int count_regs = 0;\t\t\t\t\t\t\\\n       int regno;\t\t\t\t\t\t\t\\\n       for (regno = 8; regno < 13; regno ++)\t\t\t\t\\\n-\tif (regs_ever_live[regno] && ! call_used_regs[regno])\t\t\\\n-\t  count_regs ++;\t\t\t\t\t\t\\\n+        if (THUMB_REG_PUSHED_P (regno))\t\t\t\t\t\\\n+          count_regs ++;\t\t\t\t\t\t\\\n       if (count_regs)\t\t\t\t\t\t\t\\\n \t(OFFSET) += 4 * count_regs;\t\t\t\t\t\\\n       count_regs = 0;\t\t\t\t\t\t\t\\\n       for (regno = 0; regno <= LAST_LO_REGNUM; regno ++)\t\t\\\n-\tif (regs_ever_live[regno] && ! call_used_regs[regno])\t\t\\\n+        if (THUMB_REG_PUSHED_P (regno))\t\t\t\t\t\\\n \t  count_regs ++;\t\t\t\t\t\t\\\n       if (count_regs || ! leaf_function_p () || thumb_far_jump_used_p (0))\\\n \t(OFFSET) += 4 * (count_regs + 1);\t\t\t\t\\"}]}