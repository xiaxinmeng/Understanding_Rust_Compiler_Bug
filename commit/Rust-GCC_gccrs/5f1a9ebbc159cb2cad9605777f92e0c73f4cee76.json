{"sha": "5f1a9ebbc159cb2cad9605777f92e0c73f4cee76", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWYxYTllYmJjMTU5Y2IyY2FkOTYwNTc3N2Y5MmUwYzczZjRjZWU3Ng==", "commit": {"author": {"name": "Richard Guenther", "email": "rguenther@suse.de", "date": "2009-09-04T18:54:01Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2009-09-04T18:54:01Z"}, "message": "re PR middle-end/41257 (Bogus error '*.LTHUNK0' aliased to undefined symbol '_ZN1CD1Ev')\n\n2009-09-04  Richard Guenther  <rguenther@suse.de>\n\n\tPR middle-end/41257\n\t* (cgraph_finalize_compilation_unit): Move finalizing aliases\n\tafter emitting tunks.  Move emitting thunks and ctors from ...\n\t(cgraph_optimize): ... here.  Remove redundant\n\tcgraph_analyze_functions.\n\t* varasm.c (find_decl_and_mark_needed): Remove no longer\n\tnecessary check.\n\t(finish_aliases_1): Adjust check for thunk aliases.\n\n\t* g++.dg/torture/pr41257.C: New testcase.\n\nFrom-SVN: r151431", "tree": {"sha": "9b50836e0fbce4cffa70a6a5b2dd3eccf520eee7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9b50836e0fbce4cffa70a6a5b2dd3eccf520eee7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5f1a9ebbc159cb2cad9605777f92e0c73f4cee76", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5f1a9ebbc159cb2cad9605777f92e0c73f4cee76", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5f1a9ebbc159cb2cad9605777f92e0c73f4cee76", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5f1a9ebbc159cb2cad9605777f92e0c73f4cee76/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "8d142c15c918df6d30aebd44ad34f2700254c25c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8d142c15c918df6d30aebd44ad34f2700254c25c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8d142c15c918df6d30aebd44ad34f2700254c25c"}], "stats": {"total": 120, "additions": 75, "deletions": 45}, "files": [{"sha": "6af6c2b1ab03635481098e4d51e7a490177fbf2b", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f1a9ebbc159cb2cad9605777f92e0c73f4cee76/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f1a9ebbc159cb2cad9605777f92e0c73f4cee76/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=5f1a9ebbc159cb2cad9605777f92e0c73f4cee76", "patch": "@@ -1,3 +1,14 @@\n+2009-09-04  Richard Guenther  <rguenther@suse.de>\n+\n+\tPR middle-end/41257\n+\t* (cgraph_finalize_compilation_unit): Move finalizing aliases\n+\tafter emitting tunks.  Move emitting thunks and ctors from ...\n+\t(cgraph_optimize): ... here.  Remove redundant\n+\tcgraph_analyze_functions.\n+\t* varasm.c (find_decl_and_mark_needed): Remove no longer\n+\tnecessary check.\n+\t(finish_aliases_1): Adjust check for thunk aliases.\n+\n 2009-09-04  Daniel Gutson  <dgutson@codesourcery.com>\n \n \t* config/arm/arm.md (ctzsi2): Added braces"}, {"sha": "0acc4723f07fcefed7740b8b5ab3cbc8c5fd26e5", "filename": "gcc/cgraphunit.c", "status": "modified", "additions": 37, "deletions": 37, "changes": 74, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f1a9ebbc159cb2cad9605777f92e0c73f4cee76/gcc%2Fcgraphunit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f1a9ebbc159cb2cad9605777f92e0c73f4cee76/gcc%2Fcgraphunit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcgraphunit.c?ref=5f1a9ebbc159cb2cad9605777f92e0c73f4cee76", "patch": "@@ -1018,6 +1018,30 @@ cgraph_analyze_functions (void)\n   ggc_collect ();\n }\n \n+\n+/* Emit thunks for every node in the cgraph.\n+   FIXME: We really ought to emit thunks only for functions that are needed.  */\n+\n+static void\n+cgraph_emit_thunks (void)\n+{\n+  struct cgraph_node *n;\n+\n+  for (n = cgraph_nodes; n; n = n->next)\n+    {\n+      /* Only emit thunks on functions defined in this TU.\n+\t Note that this may emit more thunks than strictly necessary.\n+\t During optimization some nodes may disappear.  It would be\n+\t nice to only emit thunks only for the functions that will be\n+\t emitted, but we cannot know that until the inliner and other\n+\t IPA passes have run (see the sequencing of the call to\n+\t cgraph_mark_functions_to_output in cgraph_optimize).  */\n+      if (!DECL_EXTERNAL (n->decl))\n+\tlang_hooks.callgraph.emit_associated_thunks (n->decl);\n+    }\n+}\n+\n+\n /* Analyze the whole compilation unit once it is parsed completely.  */\n \n void\n@@ -1026,15 +1050,27 @@ cgraph_finalize_compilation_unit (void)\n   /* Do not skip analyzing the functions if there were errors, we\n      miss diagnostics for following functions otherwise.  */\n \n+  /* Emit size functions we didn't inline.  */\n   finalize_size_functions ();\n-  finish_aliases_1 ();\n+\n+  /* Emit thunks, if needed.  */\n+  if (lang_hooks.callgraph.emit_associated_thunks)\n+    cgraph_emit_thunks ();\n+\n+  /* Call functions declared with the \"constructor\" or \"destructor\"\n+     attribute.  */\n+  cgraph_build_cdtor_fns ();\n \n   if (!quiet_flag)\n     {\n       fprintf (stderr, \"\\nAnalyzing compilation unit\\n\");\n       fflush (stderr);\n     }\n \n+  /* Mark alias targets necessary and emit diagnostics.  */\n+  finish_aliases_1 ();\n+\n+  /* Gimplify and lower all functions.  */\n   timevar_push (TV_CGRAPH);\n   cgraph_analyze_functions ();\n   timevar_pop (TV_CGRAPH);\n@@ -1322,29 +1358,6 @@ ipa_passes (void)\n }\n \n \n-/* Emit thunks for every node in the cgraph.\n-   FIXME: We really ought to emit thunks only for functions that are needed.  */\n-\n-static void\n-cgraph_emit_thunks (void)\n-{\n-  struct cgraph_node *n;\n-\n-  for (n = cgraph_nodes; n; n = n->next)\n-    {\n-      /* Only emit thunks on functions defined in this TU.\n-\t Note that this may emit more thunks than strictly necessary.\n-\t During optimization some nodes may disappear.  It would be\n-\t nice to only emit thunks only for the functions that will be\n-\t emitted, but we cannot know that until the inliner and other\n-\t IPA passes have run (see the sequencing of the call to\n-\t cgraph_mark_functions_to_output in cgraph_optimize).  */\n-      if (!DECL_EXTERNAL (n->decl))\n-\tlang_hooks.callgraph.emit_associated_thunks (n->decl);\n-    }\n-}\n-\n-\n /* Perform simple optimizations based on callgraph.  */\n \n static void\n@@ -1357,22 +1370,9 @@ cgraph_optimize (void)\n   verify_cgraph ();\n #endif\n \n-  /* Emit thunks, if needed.  */\n-  if (lang_hooks.callgraph.emit_associated_thunks)\n-    {\n-      cgraph_emit_thunks ();\n-      if (errorcount || sorrycount)\n-\treturn;\n-    }\n-\n-  /* Call functions declared with the \"constructor\" or \"destructor\"\n-     attribute.  */\n-  cgraph_build_cdtor_fns ();\n-\n   /* Frontend may output common variables after the unit has been finalized.\n      It is safe to deal with them here as they are always zero initialized.  */\n   varpool_analyze_pending_decls ();\n-  cgraph_analyze_functions ();\n \n   timevar_push (TV_CGRAPHOPT);\n   if (pre_ipa_mem_report)"}, {"sha": "b9c772b5ac9f099cfb75abf1212f9ba75cd21583", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f1a9ebbc159cb2cad9605777f92e0c73f4cee76/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f1a9ebbc159cb2cad9605777f92e0c73f4cee76/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=5f1a9ebbc159cb2cad9605777f92e0c73f4cee76", "patch": "@@ -1,3 +1,8 @@\n+2009-09-04  Richard Guenther  <rguenther@suse.de>\n+\n+\tPR middle-end/41257\n+\t* g++.dg/torture/pr41257.C: New testcase.\n+\n 2009-09-04  Martin Jambor  <mjambor@suse.cz>\n \n \tPR tree-optimization/41112"}, {"sha": "60cfc53397980c628f5832c1d23ffca8a761757b", "filename": "gcc/testsuite/g++.dg/torture/pr41257.C", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f1a9ebbc159cb2cad9605777f92e0c73f4cee76/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2Fpr41257.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f1a9ebbc159cb2cad9605777f92e0c73f4cee76/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2Fpr41257.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2Fpr41257.C?ref=5f1a9ebbc159cb2cad9605777f92e0c73f4cee76", "patch": "@@ -0,0 +1,20 @@\n+/* { dg-do compile } */\n+\n+struct A\n+{\n+  virtual void foo();\n+  virtual ~A();\n+  int i;\n+};\n+\n+struct B : virtual A {};\n+\n+struct C : B\n+{\n+  virtual void foo();\n+};\n+\n+void bar()\n+{\n+  C().foo();\n+}"}, {"sha": "864ab16671fe1fed40ff8bc3d1f0cfb844bc196a", "filename": "gcc/varasm.c", "status": "modified", "additions": 2, "deletions": 8, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f1a9ebbc159cb2cad9605777f92e0c73f4cee76/gcc%2Fvarasm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f1a9ebbc159cb2cad9605777f92e0c73f4cee76/gcc%2Fvarasm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvarasm.c?ref=5f1a9ebbc159cb2cad9605777f92e0c73f4cee76", "patch": "@@ -5395,13 +5395,7 @@ find_decl_and_mark_needed (tree decl, tree target)\n \n   if (fnode)\n     {\n-      /* We can't mark function nodes as used after cgraph global info\n-\t is finished.  This wouldn't generally be necessary, but C++\n-\t virtual table thunks are introduced late in the game and\n-\t might seem like they need marking, although in fact they\n-\t don't.  */\n-      if (! cgraph_global_info_ready)\n-\tcgraph_mark_needed_node (fnode);\n+      cgraph_mark_needed_node (fnode);\n       return fnode->decl;\n     }\n   else if (vnode)\n@@ -5571,7 +5565,7 @@ finish_aliases_1 (void)\n  \t\t  to bind locally.  Of course this is a hack - to keep it\n  \t\t  working do the following (which is not strictly correct).  */\n  \t       && (! TREE_CODE (target_decl) == FUNCTION_DECL\n- \t\t   || ! TREE_STATIC (target_decl))\n+ \t\t   || ! DECL_VIRTUAL_P (target_decl))\n \t       && ! lookup_attribute (\"weakref\", DECL_ATTRIBUTES (p->decl)))\n \terror (\"%q+D aliased to external symbol %qE\",\n \t       p->decl, p->target);"}]}