{"sha": "91fa3c30b74fe0a7dec2c0c5bae6adf0308da097", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTFmYTNjMzBiNzRmZTBhN2RlYzJjMGM1YmFlNmFkZjAzMDhkYTA5Nw==", "commit": {"author": {"name": "Richard Stallman", "email": "rms@gnu.org", "date": "1993-09-08T09:56:15Z"}, "committer": {"name": "Richard Stallman", "email": "rms@gnu.org", "date": "1993-09-08T09:56:15Z"}, "message": "(push_init_level): Diagnose extra brace group at end of record.\n\n(push_init_level): Diagnose extra brace group at end\nof record.  Set constructor_type to 0.\n(pop_init_level): Don't output anything if constructor_type is 0.\n(process_init_element): Do nothing if constructor_type is 0.\n\nFrom-SVN: r5279", "tree": {"sha": "409e63c7f573f68def4a61866bbe98edafae3493", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/409e63c7f573f68def4a61866bbe98edafae3493"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/91fa3c30b74fe0a7dec2c0c5bae6adf0308da097", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/91fa3c30b74fe0a7dec2c0c5bae6adf0308da097", "html_url": "https://github.com/Rust-GCC/gccrs/commit/91fa3c30b74fe0a7dec2c0c5bae6adf0308da097", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/91fa3c30b74fe0a7dec2c0c5bae6adf0308da097/comments", "author": null, "committer": null, "parents": [{"sha": "90b5a681ce9b838fa2b3075d4a2a8de18d5eee60", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/90b5a681ce9b838fa2b3075d4a2a8de18d5eee60", "html_url": "https://github.com/Rust-GCC/gccrs/commit/90b5a681ce9b838fa2b3075d4a2a8de18d5eee60"}], "stats": {"total": 32, "additions": 27, "deletions": 5}, "files": [{"sha": "40207c4404e120d6e561517861abce5588088a10", "filename": "gcc/c-typeck.c", "status": "modified", "additions": 27, "deletions": 5, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/91fa3c30b74fe0a7dec2c0c5bae6adf0308da097/gcc%2Fc-typeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/91fa3c30b74fe0a7dec2c0c5bae6adf0308da097/gcc%2Fc-typeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-typeck.c?ref=91fa3c30b74fe0a7dec2c0c5bae6adf0308da097", "patch": "@@ -5413,8 +5413,14 @@ push_init_level (implicit)\n   if (TREE_CODE (constructor_type) == RECORD_TYPE\n       || TREE_CODE (constructor_type) == UNION_TYPE)\n     {\n-      constructor_type = TREE_TYPE (constructor_fields);\n-      push_member_name (IDENTIFIER_POINTER (DECL_NAME (constructor_fields)));\n+      /* Don't die if there are extra init elts at the end.  */\n+      if (constructor_fields == 0)\n+\tconstructor_type = 0;\n+      else\n+\t{\n+\t  constructor_type = TREE_TYPE (constructor_fields);\n+\t  push_member_name (IDENTIFIER_POINTER (DECL_NAME (constructor_fields)));\n+\t}\n     }\n   else if (TREE_CODE (constructor_type) == ARRAY_TYPE)\n     {\n@@ -5425,8 +5431,15 @@ push_init_level (implicit)\n   /* Turn off constructor_incremental if type is a struct with bitfields.  */\n   check_init_type_bitfields (constructor_type);\n \n-  if (TREE_CODE (constructor_type) == RECORD_TYPE\n-      || TREE_CODE (constructor_type) == UNION_TYPE)\n+  if (constructor_type == 0)\n+    {\n+      error_init (\"extra brace group at end of initializer%s\",\n+\t\t  \" for `%s'\", NULL);\n+      constructor_fields = 0;\n+      constructor_unfilled_fields = 0;\n+    }\n+  else if (TREE_CODE (constructor_type) == RECORD_TYPE\n+\t   || TREE_CODE (constructor_type) == UNION_TYPE)\n     {\n       constructor_fields = TYPE_FIELDS (constructor_type);\n       constructor_unfilled_fields = constructor_fields;\n@@ -5495,7 +5508,9 @@ pop_init_level (implicit)\n     }\n \n   p = constructor_stack;\n-  size = int_size_in_bytes (constructor_type);\n+\n+  if (constructor_type != 0)\n+    size = int_size_in_bytes (constructor_type);\n \n   /* Now output all pending elements.  */\n   output_pending_init_elements (1);\n@@ -5554,6 +5569,8 @@ pop_init_level (implicit)\n \t  output_constant (constructor, size);\n \t}\n     }\n+  else if (constructor_type == 0)\n+    ;\n   else if (! constructor_incremental)\n     {\n       if (constructor_erroneous)\n@@ -6051,6 +6068,11 @@ process_init_element (value)\n       return;\n     }\n \n+  /* Ignore elements of a brace group if it is entirely superfluous\n+     and has already been diagnosed.  */\n+  if (constructor_type == 0)\n+    return;\n+\n   /* If we've exhausted any levels that didn't have braces,\n      pop them now.  */\n   while (constructor_stack->implicit)"}]}