{"sha": "165446a1e81f5bb9597289e783af9ee67e1fe5ba", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTY1NDQ2YTFlODFmNWJiOTU5NzI4OWU3ODNhZjllZTY3ZTFmZTViYQ==", "commit": {"author": {"name": "Jeff Law", "email": "jlaw@localhost.localdomain", "date": "2021-09-01T23:13:58Z"}, "committer": {"name": "Jeff Law", "email": "jlaw@localhost.localdomain", "date": "2021-09-01T23:13:58Z"}, "message": "Call reduce_vector_comparison_to_scalar_comparison earlier\n\nAs noted in the PR, we can get an ICE after the introduction of code to reduce a vector comparison to a scalar.  The problem is we left the operand cache in an inconsistent state because we called the new function too late.   This is trivially fixed by making the transformation before we call update_stmt_if_modified.\n\nThe irony here is the whole point of calling reduce_vector_comparison_to_scalar_comparison when we did was to expose these kinds of secondary opportunities.  In this particular case we collapsed the test to a comparison of constants (thus no SSA operands).\n\nAnyway, this fixes the problem in the obvious way.  This may all end up being moot if I can twiddle Richi's match.pd pattern to work.  It doesn't work as-written due to a couple issues that I haven't worked totally through yet.\n\nInstalled on the trunk after bootstrap & regression testing on x86 and verifying it addresses the aarch64 issue.\n\ngcc/\n\tPR tree-optimization/102152\n\t* tree-ssa-dom.c (dom_opt_dom_walker::optimize_stmt): Reduce a vector\n\tcomparison to a scalar comparison before calling\n\tupdate_stmt_if_modified.\n\ngcc/testsuite/\n\tPR tree-optimization/102152\n\t* gcc.dg/pr102152.c: New test", "tree": {"sha": "9385d8cb127de8afb24fc32a47dbe03cc125f2e9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9385d8cb127de8afb24fc32a47dbe03cc125f2e9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/165446a1e81f5bb9597289e783af9ee67e1fe5ba", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/165446a1e81f5bb9597289e783af9ee67e1fe5ba", "html_url": "https://github.com/Rust-GCC/gccrs/commit/165446a1e81f5bb9597289e783af9ee67e1fe5ba", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/165446a1e81f5bb9597289e783af9ee67e1fe5ba/comments", "author": null, "committer": null, "parents": [{"sha": "a45786e9a31f995087d8cb42bc3a4fe06911e588", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a45786e9a31f995087d8cb42bc3a4fe06911e588", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a45786e9a31f995087d8cb42bc3a4fe06911e588"}], "stats": {"total": 20, "additions": 17, "deletions": 3}, "files": [{"sha": "4e0c1f5a3d5cc140b40217c156625c9cc8a17f62", "filename": "gcc/testsuite/gcc.dg/pr102152.c", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/165446a1e81f5bb9597289e783af9ee67e1fe5ba/gcc%2Ftestsuite%2Fgcc.dg%2Fpr102152.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/165446a1e81f5bb9597289e783af9ee67e1fe5ba/gcc%2Ftestsuite%2Fgcc.dg%2Fpr102152.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr102152.c?ref=165446a1e81f5bb9597289e783af9ee67e1fe5ba", "patch": "@@ -0,0 +1,14 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O1 -ftree-loop-vectorize -fno-tree-fre\" } */\n+/* { dg-additional-options \"-march=armv8-a+sve\" { target aarch64-*-* } } */\n+\n+\n+\n+signed char i;\n+\n+void\n+foo (void)\n+{\n+  for (i = 0; i < 6; i += 5)\n+    ;\n+}"}, {"sha": "49d8f96408fdfd7dc80970986f87faec7684d35d", "filename": "gcc/tree-ssa-dom.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/165446a1e81f5bb9597289e783af9ee67e1fe5ba/gcc%2Ftree-ssa-dom.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/165446a1e81f5bb9597289e783af9ee67e1fe5ba/gcc%2Ftree-ssa-dom.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-dom.c?ref=165446a1e81f5bb9597289e783af9ee67e1fe5ba", "patch": "@@ -1990,14 +1990,14 @@ dom_opt_dom_walker::optimize_stmt (basic_block bb, gimple_stmt_iterator *si,\n       print_gimple_stmt (dump_file, stmt, 0, TDF_SLIM);\n     }\n \n-  update_stmt_if_modified (stmt);\n-  opt_stats.num_stmts++;\n-\n   /* STMT may be a comparison of uniform vectors that we can simplify\n      down to a comparison of scalars.  Do that transformation first\n      so that all the scalar optimizations from here onward apply.  */\n   reduce_vector_comparison_to_scalar_comparison (stmt);\n \n+  update_stmt_if_modified (stmt);\n+  opt_stats.num_stmts++;\n+\n   /* Const/copy propagate into USES, VUSES and the RHS of VDEFs.  */\n   cprop_into_stmt (stmt, m_evrp_range_analyzer);\n "}]}