{"sha": "848b92e1cc58303988dadd22623b904697084092", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODQ4YjkyZTFjYzU4MzAzOTg4ZGFkZDIyNjIzYjkwNDY5NzA4NDA5Mg==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@yorick.cygnus.com", "date": "1998-11-16T05:05:20Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "1998-11-16T05:05:20Z"}, "message": "decl.c (cplus_expand_expr_stmt): Promote warning about naked member function reference to error.\n\n\t* decl.c (cplus_expand_expr_stmt): Promote warning about naked\n\tmember function reference to error.\n\t* cvt.c (ocp_convert): Complain about converting an overloaded\n\tfunction to void.\n\t* init.c (build_offset_ref): Just return a lone static member\n\tfunction.\n\t* decl.c (cp_finish_decl): Only complain about real CONSTRUCTORs,\n\tnot internal ones.\n\t* typeck.c (build_binary_op_nodefault): Improve error handling.\n\t* decl.c (grokfndecl): Complain about making 'main' a template.\n\t* typeck.c (string_conv_p): Don't convert from wchar_t[] to char*.\n\t* call.c (build_method_call): Handle a BIT_NOT_EXPR around a\n\tTYPE_DECL in a template.\n\t* typeck2.c (my_friendly_abort): Add URL in the other case, too.\n\nFrom-SVN: r23673", "tree": {"sha": "0f6071e041f633ce262c6a0b66b63a6d1fb5e2eb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0f6071e041f633ce262c6a0b66b63a6d1fb5e2eb"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/848b92e1cc58303988dadd22623b904697084092", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/848b92e1cc58303988dadd22623b904697084092", "html_url": "https://github.com/Rust-GCC/gccrs/commit/848b92e1cc58303988dadd22623b904697084092", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/848b92e1cc58303988dadd22623b904697084092/comments", "author": null, "committer": null, "parents": [{"sha": "1f288b3fa1f207302986f89f2d76fa66c1c72b2d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1f288b3fa1f207302986f89f2d76fa66c1c72b2d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1f288b3fa1f207302986f89f2d76fa66c1c72b2d"}], "stats": {"total": 66, "additions": 58, "deletions": 8}, "files": [{"sha": "86503aedbf5e9fc6cbad9d4e987d5817ab71c24d", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/848b92e1cc58303988dadd22623b904697084092/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/848b92e1cc58303988dadd22623b904697084092/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=848b92e1cc58303988dadd22623b904697084092", "patch": "@@ -1,5 +1,29 @@\n+1998-11-16  Jason Merrill  <jason@yorick.cygnus.com>\n+\n+\t* decl.c (cplus_expand_expr_stmt): Promote warning about naked\n+\tmember function reference to error.\n+\t* cvt.c (ocp_convert): Complain about converting an overloaded \n+\tfunction to void.\n+\n+\t* init.c (build_offset_ref): Just return a lone static member\n+\tfunction.\n+\n+\t* decl.c (cp_finish_decl): Only complain about real CONSTRUCTORs,\n+\tnot internal ones.\n+\n+\t* typeck.c (build_binary_op_nodefault): Improve error handling.\n+\n+\t* decl.c (grokfndecl): Complain about making 'main' a template.\n+\n+\t* typeck.c (string_conv_p): Don't convert from wchar_t[] to char*.\n+\n+\t* call.c (build_method_call): Handle a BIT_NOT_EXPR around a \n+\tTYPE_DECL in a template.\n+\n 1998-11-15  Jason Merrill  <jason@yorick.cygnus.com>\n \n+\t* typeck2.c (my_friendly_abort): Add URL in the other case, too.\n+\n \t* decl.c (struct cp_function): Add named_label_uses.\n \t(push_cp_function_context): Save it.\n \t(pop_cp_function_context): Restore it."}, {"sha": "a502a760b52f082a90f0c543f549fd785c9c41fc", "filename": "gcc/cp/call.c", "status": "modified", "additions": 8, "deletions": 3, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/848b92e1cc58303988dadd22623b904697084092/gcc%2Fcp%2Fcall.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/848b92e1cc58303988dadd22623b904697084092/gcc%2Fcp%2Fcall.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcall.c?ref=848b92e1cc58303988dadd22623b904697084092", "patch": "@@ -625,10 +625,15 @@ build_method_call (instance, name, parms, basetype_path, flags)\n     {\n       /* We need to process template parm names here so that tsubst catches\n \t them properly.  Other type names can wait.  */\n-      if (TREE_CODE (name) == BIT_NOT_EXPR\n-\t  && TREE_CODE (TREE_OPERAND (name, 0)) == IDENTIFIER_NODE)\n+      if (TREE_CODE (name) == BIT_NOT_EXPR)\n \t{\n-\t  tree type = get_aggr_from_typedef (TREE_OPERAND (name, 0), 0);\n+\t  tree type = NULL_TREE;\n+\n+\t  if (TREE_CODE (TREE_OPERAND (name, 0)) == IDENTIFIER_NODE)\n+\t    type = get_aggr_from_typedef (TREE_OPERAND (name, 0), 0);\n+\t  else if (TREE_CODE (TREE_OPERAND (name, 0)) == TYPE_DECL)\n+\t    type = TREE_TYPE (TREE_OPERAND (name, 0));\n+\n \t  if (type && TREE_CODE (type) == TEMPLATE_TYPE_PARM)\n \t    name = build_min_nt (BIT_NOT_EXPR, type);\n \t}"}, {"sha": "981cf7b54c09c67b690b53c9f4a35cb4b5295fe4", "filename": "gcc/cp/cvt.c", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/848b92e1cc58303988dadd22623b904697084092/gcc%2Fcp%2Fcvt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/848b92e1cc58303988dadd22623b904697084092/gcc%2Fcp%2Fcvt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcvt.c?ref=848b92e1cc58303988dadd22623b904697084092", "patch": "@@ -683,7 +683,12 @@ ocp_convert (type, expr, convtype, flags)\n     }\n \n   if (code == VOID_TYPE && (convtype & CONV_STATIC))\n-    return build1 (CONVERT_EXPR, type, e);\n+    {\n+      if (type_unknown_p (e))\n+\terror (\"address of overloaded function with no contextual type information\");\n+\n+      return build1 (CONVERT_EXPR, type, e);\n+    }\n \n #if 0\n   /* This is incorrect.  A truncation can't be stripped this way."}, {"sha": "33c444949d96178be5d61a43af4a86b8477e848b", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/848b92e1cc58303988dadd22623b904697084092/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/848b92e1cc58303988dadd22623b904697084092/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=848b92e1cc58303988dadd22623b904697084092", "patch": "@@ -7217,7 +7217,8 @@ cp_finish_decl (decl, init, asmspec_tree, need_pop, flags)\n \t{\n \t  if (TREE_CODE (type) == ARRAY_TYPE)\n \t    init = digest_init (type, init, (tree *) 0);\n-\t  else if (TREE_CODE (init) == CONSTRUCTOR)\n+\t  else if (TREE_CODE (init) == CONSTRUCTOR\n+\t\t   && TREE_HAS_CONSTRUCTOR (init))\n \t    {\n \t      if (TYPE_NON_AGGREGATE_CLASS (type))\n \t\t{\n@@ -8073,6 +8074,8 @@ grokfndecl (ctype, type, declarator, orig_declarator, virtualp, flags, quals,\n \n   if (ctype == NULL_TREE && DECL_MAIN_P (decl))\n     {\n+      if (processing_template_decl)\n+\terror (\"cannot declare `main' to be a template\");\n       if (inlinep)\n \terror (\"cannot declare `main' to be inline\");\n       else if (! publicp)\n@@ -13891,7 +13894,7 @@ cplus_expand_expr_stmt (exp)\n       if (TREE_CODE (exp) == ADDR_EXPR || TREE_CODE (exp) == TREE_LIST)\n \terror (\"address of overloaded function with no contextual type information\");\n       else if (TREE_CODE (exp) == COMPONENT_REF)\n-\twarning (\"useless reference to a member function name, did you forget the ()?\");\n+\terror (\"invalid reference to a member function name, did you forget the ()?\");\n     }\n   else\n     {"}, {"sha": "e92323073c2b8bca5586239b84fbd1ba97509705", "filename": "gcc/cp/init.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/848b92e1cc58303988dadd22623b904697084092/gcc%2Fcp%2Finit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/848b92e1cc58303988dadd22623b904697084092/gcc%2Fcp%2Finit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Finit.c?ref=848b92e1cc58303988dadd22623b904697084092", "patch": "@@ -1618,6 +1618,8 @@ build_offset_ref (type, name)\n \t      return error_mark_node;\n \t    }\n \t  mark_used (t);\n+\t  if (DECL_STATIC_FUNCTION_P (t))\n+\t    return t;\n \t  return build (OFFSET_REF, TREE_TYPE (t), decl, t);\n \t}\n "}, {"sha": "aa026aedf719671e584016688d19e645559d0e61", "filename": "gcc/cp/typeck.c", "status": "modified", "additions": 12, "deletions": 2, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/848b92e1cc58303988dadd22623b904697084092/gcc%2Fcp%2Ftypeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/848b92e1cc58303988dadd22623b904697084092/gcc%2Fcp%2Ftypeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftypeck.c?ref=848b92e1cc58303988dadd22623b904697084092", "patch": "@@ -1769,8 +1769,15 @@ string_conv_p (totype, exp, warn)\n       && !same_type_p (t, wchar_type_node))\n     return 0;\n \n-  if (TREE_CODE (exp) != STRING_CST)\n+  if (TREE_CODE (exp) == STRING_CST)\n     {\n+      /* Make sure that we don't try to convert between char and wchar_t.  */\n+      if (TYPE_MAIN_VARIANT (TREE_TYPE (TREE_TYPE (exp))) != t)\n+\treturn 0;\n+    }\n+  else\n+    {\n+      /* Is this a string constant which has decayed to 'const char *'?  */\n       t = build_pointer_type (build_qualified_type (t, TYPE_QUAL_CONST));\n       if (!same_type_p (TREE_TYPE (exp), t))\n \treturn 0;\n@@ -1782,7 +1789,7 @@ string_conv_p (totype, exp, warn)\n \n   /* This warning is not very useful, as it complains about printf.  */\n   if (warn && warn_write_strings)\n-    cp_warning (\"deprecated conversion from string constant to `char *'\");\n+    cp_warning (\"deprecated conversion from string constant to `%T'\", totype);\n \n   return 1;\n }\n@@ -3938,6 +3945,9 @@ build_binary_op_nodefault (code, orig_op0, orig_op1, error_code)\n \top0 = cp_convert (result_type, op0); \n       if (TREE_TYPE (op1) != result_type)\n \top1 = cp_convert (result_type, op1); \n+\n+      if (op0 == error_mark_node || op1 == error_mark_node)\n+\treturn error_mark_node;\n     }\n \n   if (build_type == NULL_TREE)"}, {"sha": "3cdf72396b719d8fae2afa65a05e2da9fa3f7cca", "filename": "gcc/cp/typeck2.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/848b92e1cc58303988dadd22623b904697084092/gcc%2Fcp%2Ftypeck2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/848b92e1cc58303988dadd22623b904697084092/gcc%2Fcp%2Ftypeck2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftypeck2.c?ref=848b92e1cc58303988dadd22623b904697084092", "patch": "@@ -396,6 +396,7 @@ my_friendly_abort (i)\n     error (\"Internal compiler error %d.\", i);\n \n   fatal (\"Please submit a full bug report to `egcs-bugs@cygnus.com'.\");\n+  fatal (\"See <URL:http://egcs.cygnus.com/faq.html#bugreport> for details.\");\n }\n \n void"}]}