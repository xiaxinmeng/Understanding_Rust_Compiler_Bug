{"sha": "e7b489c8c091c2210c01bcd35b9c7cdd2d6b559a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTdiNDg5YzhjMDkxYzIyMTBjMDFiY2QzNWI5YzdjZGQyZDZiNTU5YQ==", "commit": {"author": {"name": "Roger Sayle", "email": "roger@eyesopen.com", "date": "2002-08-03T23:21:31Z"}, "committer": {"name": "Roger Sayle", "email": "sayle@gcc.gnu.org", "date": "2002-08-03T23:21:31Z"}, "message": "builtins.def: Define new builtin functions exp...\n\n\n\t* builtins.def: Define new builtin functions exp, expf, expl,\n\tlog, logf and logl (and their __builtin_* variants).\n\t* optabs.h (enum optab_index): Add new OTI_exp and OTI_log.\n\tDefine exp_optab and log_optab.\n\t* optabs.c (init_optans): Initialize exp_optab and log_optab.\n\t* genopinit.c (optabs): Implement exp_optab and log_optab\n\tusing exp?f2 and log?f2 patterns.\n\t* builtins.c (expand_builtin_mathfn): Handle BUILT_IN_EXP*\n\tand BUILT_IN_LOG* using exp_optab and log_optab respectively.\n\t(expand_builtin): Ignore the new builtins (and all cos and\n\tsin variants) when not optimizing.  Expand new builtins via\n\texpand_builtin_mathfn when flag_unsafe_math_optimizations.\n\n\t* doc/extend.texi: Document new exp and log builtins.\n\t* doc/md.texi: Document new exp?f2 and log?f2 patterns\n\t(and previously undocumented cos?f2 and sin?f2 patterns).\n\nFrom-SVN: r56010", "tree": {"sha": "43f230abfa5b65f3cb384df85d588543c32be03e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/43f230abfa5b65f3cb384df85d588543c32be03e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e7b489c8c091c2210c01bcd35b9c7cdd2d6b559a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e7b489c8c091c2210c01bcd35b9c7cdd2d6b559a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e7b489c8c091c2210c01bcd35b9c7cdd2d6b559a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e7b489c8c091c2210c01bcd35b9c7cdd2d6b559a/comments", "author": null, "committer": null, "parents": [{"sha": "de8920be70e85d22a890bc99e0c3a20df4089af0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/de8920be70e85d22a890bc99e0c3a20df4089af0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/de8920be70e85d22a890bc99e0c3a20df4089af0"}], "stats": {"total": 152, "additions": 145, "deletions": 7}, "files": [{"sha": "53245bad17ef24866e9bcc00ccba341e6510b71f", "filename": "gcc/ChangeLog", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e7b489c8c091c2210c01bcd35b9c7cdd2d6b559a/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e7b489c8c091c2210c01bcd35b9c7cdd2d6b559a/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=e7b489c8c091c2210c01bcd35b9c7cdd2d6b559a", "patch": "@@ -1,3 +1,22 @@\n+2002-08-03  Roger Sayle  <roger@eyesopen.com>\n+\n+\t* builtins.def: Define new builtin functions exp, expf, expl,\n+\tlog, logf and logl (and their __builtin_* variants).\n+\t* optabs.h (enum optab_index): Add new OTI_exp and OTI_log.\n+\tDefine exp_optab and log_optab.\n+\t* optabs.c (init_optans): Initialize exp_optab and log_optab.\n+\t* genopinit.c (optabs): Implement exp_optab and log_optab\n+\tusing exp?f2 and log?f2 patterns.\n+\t* builtins.c (expand_builtin_mathfn): Handle BUILT_IN_EXP*\n+\tand BUILT_IN_LOG* using exp_optab and log_optab respectively.\n+\t(expand_builtin): Ignore the new builtins (and all cos and\n+\tsin variants) when not optimizing.  Expand new builtins via\n+\texpand_builtin_mathfn when flag_unsafe_math_optimizations.\n+\n+\t* doc/extend.texi: Document new exp and log builtins.\n+\t* doc/md.texi: Document new exp?f2 and log?f2 patterns\n+\t(and previously undocumented cos?f2 and sin?f2 patterns).\n+\n 2002-08-03  Jason Merrill  <jason@redhat.com>\n \n \t* explow.c (int_expr_size): New fn."}, {"sha": "1dde0a034eed888ef4a887714848ffe0d4678460", "filename": "gcc/builtins.c", "status": "modified", "additions": 24, "deletions": 3, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e7b489c8c091c2210c01bcd35b9c7cdd2d6b559a/gcc%2Fbuiltins.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e7b489c8c091c2210c01bcd35b9c7cdd2d6b559a/gcc%2Fbuiltins.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbuiltins.c?ref=e7b489c8c091c2210c01bcd35b9c7cdd2d6b559a", "patch": "@@ -1525,7 +1525,15 @@ expand_builtin_mathfn (exp, target, subtarget)\n     case BUILT_IN_SQRTF:\n     case BUILT_IN_SQRTL:\n       builtin_optab = sqrt_optab; break;\n-     default:\n+    case BUILT_IN_EXP:\n+    case BUILT_IN_EXPF:\n+    case BUILT_IN_EXPL:\n+      builtin_optab = exp_optab; break;\n+    case BUILT_IN_LOG:\n+    case BUILT_IN_LOGF:\n+    case BUILT_IN_LOGL:\n+      builtin_optab = log_optab; break;\n+    default:\n       abort ();\n     }\n \n@@ -3689,11 +3697,18 @@ expand_builtin (exp, target, subtarget, mode, ignore)\n   if (!optimize && !CALLED_AS_BUILT_IN (fndecl))\n     switch (fcode)\n       {\n-      case BUILT_IN_SIN:\n-      case BUILT_IN_COS:\n       case BUILT_IN_SQRT:\n       case BUILT_IN_SQRTF:\n       case BUILT_IN_SQRTL:\n+      case BUILT_IN_SIN:\n+      case BUILT_IN_SINF:\n+      case BUILT_IN_SINL:\n+      case BUILT_IN_COS:\n+      case BUILT_IN_COSF:\n+      case BUILT_IN_COSL:\n+      case BUILT_IN_EXP:\n+      case BUILT_IN_EXPF:\n+      case BUILT_IN_EXPL:\n       case BUILT_IN_MEMSET:\n       case BUILT_IN_MEMCPY:\n       case BUILT_IN_MEMCMP:\n@@ -3764,6 +3779,12 @@ expand_builtin (exp, target, subtarget, mode, ignore)\n     case BUILT_IN_COS:\n     case BUILT_IN_COSF:\n     case BUILT_IN_COSL:\n+    case BUILT_IN_EXP:\n+    case BUILT_IN_EXPF:\n+    case BUILT_IN_EXPL:\n+    case BUILT_IN_LOG:\n+    case BUILT_IN_LOGF:\n+    case BUILT_IN_LOGL:\n       /* Treat these like sqrt only if unsafe math optimizations are allowed,\n \t because of possible accuracy problems.  */\n       if (! flag_unsafe_math_optimizations)"}, {"sha": "978b4a70d55b2e78525ee47d110c1212e6185913", "filename": "gcc/builtins.def", "status": "modified", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e7b489c8c091c2210c01bcd35b9c7cdd2d6b559a/gcc%2Fbuiltins.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e7b489c8c091c2210c01bcd35b9c7cdd2d6b559a/gcc%2Fbuiltins.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbuiltins.def?ref=e7b489c8c091c2210c01bcd35b9c7cdd2d6b559a", "patch": "@@ -324,6 +324,20 @@ DEF_LIB_BUILTIN(BUILT_IN_COS,\n \t\tBT_FN_DOUBLE_DOUBLE,\n \t\tflag_unsafe_math_optimizations ? ATTR_CONST_NOTHROW_LIST\n \t\t\t\t\t       : ATTR_PURE_NOTHROW_LIST)\n+DEF_LIB_BUILTIN(BUILT_IN_EXP,\n+\t\t\"__builtin_exp\",\n+\t\tBT_FN_DOUBLE_DOUBLE,\n+\t\tflag_errno_math ? ATTR_NOTHROW_LIST\n+\t\t\t\t: (flag_unsafe_math_optimizations\n+\t\t\t\t   ? ATTR_CONST_NOTHROW_LIST\n+\t\t\t\t   : ATTR_PURE_NOTHROW_LIST))\n+DEF_LIB_BUILTIN(BUILT_IN_LOG,\n+\t\t\"__builtin_log\",\n+\t\tBT_FN_DOUBLE_DOUBLE,\n+\t\tflag_errno_math ? ATTR_NOTHROW_LIST\n+\t\t\t\t: (flag_unsafe_math_optimizations\n+\t\t\t\t   ? ATTR_CONST_NOTHROW_LIST\n+\t\t\t\t   : ATTR_PURE_NOTHROW_LIST))\n DEF_LIB_BUILTIN(BUILT_IN_SQRTF,\n \t\t\"__builtin_sqrtf\",\n \t\tBT_FN_FLOAT_FLOAT,\n@@ -341,6 +355,20 @@ DEF_LIB_BUILTIN(BUILT_IN_COSF,\n \t\tBT_FN_FLOAT_FLOAT,\n \t\tflag_unsafe_math_optimizations ? ATTR_CONST_NOTHROW_LIST\n \t\t\t\t\t       : ATTR_PURE_NOTHROW_LIST)\n+DEF_LIB_BUILTIN(BUILT_IN_EXPF,\n+\t\t\"__builtin_expf\",\n+\t\tBT_FN_FLOAT_FLOAT,\n+\t\tflag_errno_math ? ATTR_NOTHROW_LIST\n+\t\t\t\t: (flag_unsafe_math_optimizations\n+\t\t\t\t   ? ATTR_CONST_NOTHROW_LIST\n+\t\t\t\t   : ATTR_PURE_NOTHROW_LIST))\n+DEF_LIB_BUILTIN(BUILT_IN_LOGF,\n+\t\t\"__builtin_logf\",\n+\t\tBT_FN_FLOAT_FLOAT,\n+\t\tflag_errno_math ? ATTR_NOTHROW_LIST\n+\t\t\t\t: (flag_unsafe_math_optimizations\n+\t\t\t\t   ? ATTR_CONST_NOTHROW_LIST\n+\t\t\t\t   : ATTR_PURE_NOTHROW_LIST))\n DEF_LIB_BUILTIN(BUILT_IN_SQRTL,\n \t\t\"__builtin_sqrtl\",\n \t\tBT_FN_LONG_DOUBLE_LONG_DOUBLE,\n@@ -358,6 +386,20 @@ DEF_LIB_BUILTIN(BUILT_IN_COSL,\n \t\tBT_FN_LONG_DOUBLE_LONG_DOUBLE,\n \t\tflag_unsafe_math_optimizations ? ATTR_CONST_NOTHROW_LIST\n \t\t\t\t\t       : ATTR_PURE_NOTHROW_LIST)\n+DEF_LIB_BUILTIN(BUILT_IN_EXPL,\n+\t\t\"__builtin_expl\",\n+\t\tBT_FN_LONG_DOUBLE_LONG_DOUBLE,\n+\t\tflag_errno_math ? ATTR_NOTHROW_LIST\n+\t\t\t\t: (flag_unsafe_math_optimizations\n+\t\t\t\t   ? ATTR_CONST_NOTHROW_LIST\n+\t\t\t\t   : ATTR_PURE_NOTHROW_LIST))\n+DEF_LIB_BUILTIN(BUILT_IN_LOGL,\n+\t\t\"__builtin_logl\",\n+\t\tBT_FN_LONG_DOUBLE_LONG_DOUBLE,\n+\t\tflag_errno_math ? ATTR_NOTHROW_LIST\n+\t\t\t\t: (flag_unsafe_math_optimizations\n+\t\t\t\t   ? ATTR_CONST_NOTHROW_LIST\n+\t\t\t\t   : ATTR_PURE_NOTHROW_LIST))\n \n DEF_UNUSED_BUILTIN(BUILT_IN_GETEXP)\n DEF_UNUSED_BUILTIN(BUILT_IN_GETMAN)"}, {"sha": "4814b35e69fd6a3b6a1f055f22077ffbf85fadb2", "filename": "gcc/doc/extend.texi", "status": "modified", "additions": 11, "deletions": 3, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e7b489c8c091c2210c01bcd35b9c7cdd2d6b559a/gcc%2Fdoc%2Fextend.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e7b489c8c091c2210c01bcd35b9c7cdd2d6b559a/gcc%2Fdoc%2Fextend.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fextend.texi?ref=e7b489c8c091c2210c01bcd35b9c7cdd2d6b559a", "patch": "@@ -4500,6 +4500,9 @@ v4si f (v4si a, v4si b, v4si c)\n @findex exit\n @findex _exit\n @findex _Exit\n+@findex exp\n+@findex expf\n+@findex expl\n @findex fabs\n @findex fabsf\n @findex fabsl\n@@ -4512,6 +4515,9 @@ v4si f (v4si a, v4si b, v4si c)\n @findex index\n @findex labs\n @findex llabs\n+@findex log\n+@findex logf\n+@findex logl\n @findex memcmp\n @findex memcpy\n @findex memset\n@@ -4577,13 +4583,15 @@ The ISO C99 functions @code{conj}, @code{conjf}, @code{conjl},\n @code{cimagl}, @code{llabs} and @code{imaxabs} are handled as built-in\n functions except in strict ISO C90 mode.  There are also built-in\n versions of the ISO C99 functions @code{cosf}, @code{cosl},\n-@code{fabsf}, @code{fabsl}, @code{sinf}, @code{sinl}, @code{sqrtf}, and\n+@code{expf}, @code{expl}, @code{fabsf}, @code{fabsl},\n+@code{logf}, @code{logl}, @code{sinf}, @code{sinl}, @code{sqrtf}, and\n @code{sqrtl}, that are recognized in any mode since ISO C90 reserves\n these names for the purpose to which ISO C99 puts them.  All these\n functions have corresponding versions prefixed with @code{__builtin_}.\n \n-The ISO C90 functions @code{abs}, @code{cos}, @code{fabs},\n-@code{fprintf}, @code{fputs}, @code{labs}, @code{memcmp}, @code{memcpy},\n+The ISO C90 functions @code{abs}, @code{cos}, @code{exp}, @code{fabs},\n+@code{fprintf}, @code{fputs}, @code{labs}, @code{log},\n+@code{memcmp}, @code{memcpy},\n @code{memset}, @code{printf}, @code{sin}, @code{sqrt}, @code{strcat},\n @code{strchr}, @code{strcmp}, @code{strcpy}, @code{strcspn},\n @code{strlen}, @code{strncat}, @code{strncmp}, @code{strncpy},"}, {"sha": "ceac9fd780b552b86c14fb8f1844d05dc3fc547a", "filename": "gcc/doc/md.texi", "status": "modified", "additions": 39, "deletions": 1, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e7b489c8c091c2210c01bcd35b9c7cdd2d6b559a/gcc%2Fdoc%2Fmd.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e7b489c8c091c2210c01bcd35b9c7cdd2d6b559a/gcc%2Fdoc%2Fmd.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fmd.texi?ref=e7b489c8c091c2210c01bcd35b9c7cdd2d6b559a", "patch": "@@ -2523,7 +2523,45 @@ Store the absolute value of operand 1 into operand 0.\n Store the square root of operand 1 into operand 0.\n \n The @code{sqrt} built-in function of C always uses the mode which\n-corresponds to the C data type @code{double}.\n+corresponds to the C data type @code{double} and the @code{sqrtf}\n+built-in function uses the mode which corresponds to the C data\n+type @code{float}.\n+\n+@cindex @code{cos@var{m}2} instruction pattern\n+@item @samp{cos@var{m}2}\n+Store the cosine of operand 1 into operand 0.\n+\n+The @code{cos} built-in function of C always uses the mode which\n+corresponds to the C data type @code{double} and the @code{cosf}\n+built-in function uses the mode which corresponds to the C data\n+type @code{float}.\n+\n+@cindex @code{sin@var{m}2} instruction pattern\n+@item @samp{sin@var{m}2}\n+Store the sine of operand 1 into operand 0.\n+\n+The @code{sin} built-in function of C always uses the mode which\n+corresponds to the C data type @code{double} and the @code{sinf}\n+built-in function uses the mode which corresponds to the C data\n+type @code{float}.\n+\n+@cindex @code{exp@var{m}2} instruction pattern\n+@item @samp{exp@var{m}2}\n+Store the exponential of operand 1 into operand 0.\n+\n+The @code{exp} built-in function of C always uses the mode which\n+corresponds to the C data type @code{double} and the @code{expf}\n+built-in function uses the mode which corresponds to the C data\n+type @code{float}.\n+\n+@cindex @code{log@var{m}2} instruction pattern\n+@item @samp{log@var{m}2}\n+Store the natural logarithm of operand 1 into operand 0.\n+\n+The @code{log} built-in function of C always uses the mode which\n+corresponds to the C data type @code{double} and the @code{logf}\n+built-in function uses the mode which corresponds to the C data\n+type @code{float}.\n \n @cindex @code{ffs@var{m}2} instruction pattern\n @item @samp{ffs@var{m}2}"}, {"sha": "ef4242a64cd4c3fe18b630e1ad3fb90e99896452", "filename": "gcc/genopinit.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e7b489c8c091c2210c01bcd35b9c7cdd2d6b559a/gcc%2Fgenopinit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e7b489c8c091c2210c01bcd35b9c7cdd2d6b559a/gcc%2Fgenopinit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgenopinit.c?ref=e7b489c8c091c2210c01bcd35b9c7cdd2d6b559a", "patch": "@@ -114,6 +114,8 @@ static const char * const optabs[] =\n   \"sqrt_optab->handlers[$A].insn_code = CODE_FOR_$(sqrt$a2$)\",\n   \"sin_optab->handlers[$A].insn_code = CODE_FOR_$(sin$a2$)\",\n   \"cos_optab->handlers[$A].insn_code = CODE_FOR_$(cos$a2$)\",\n+  \"exp_optab->handlers[$A].insn_code = CODE_FOR_$(exp$a2$)\",\n+  \"log_optab->handlers[$A].insn_code = CODE_FOR_$(log$a2$)\",\n   \"strlen_optab->handlers[$A].insn_code = CODE_FOR_$(strlen$a$)\",\n   \"one_cmpl_optab->handlers[$A].insn_code = CODE_FOR_$(one_cmpl$a2$)\",\n   \"ffs_optab->handlers[$A].insn_code = CODE_FOR_$(ffs$a2$)\","}, {"sha": "3f17034f0d51de25866143fdc1e9e5ff27f80fd0", "filename": "gcc/optabs.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e7b489c8c091c2210c01bcd35b9c7cdd2d6b559a/gcc%2Foptabs.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e7b489c8c091c2210c01bcd35b9c7cdd2d6b559a/gcc%2Foptabs.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Foptabs.c?ref=e7b489c8c091c2210c01bcd35b9c7cdd2d6b559a", "patch": "@@ -5193,6 +5193,8 @@ init_optabs ()\n   sqrt_optab = init_optab (SQRT);\n   sin_optab = init_optab (UNKNOWN);\n   cos_optab = init_optab (UNKNOWN);\n+  exp_optab = init_optab (UNKNOWN);\n+  log_optab = init_optab (UNKNOWN);\n   strlen_optab = init_optab (UNKNOWN);\n   cbranch_optab = init_optab (UNKNOWN);\n   cmov_optab = init_optab (UNKNOWN);"}, {"sha": "fd80d826720289e0663101e2ae67412b330add41", "filename": "gcc/optabs.h", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e7b489c8c091c2210c01bcd35b9c7cdd2d6b559a/gcc%2Foptabs.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e7b489c8c091c2210c01bcd35b9c7cdd2d6b559a/gcc%2Foptabs.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Foptabs.h?ref=e7b489c8c091c2210c01bcd35b9c7cdd2d6b559a", "patch": "@@ -131,6 +131,10 @@ enum optab_index\n   OTI_sin,\n   /* Cosine */\n   OTI_cos,\n+  /* Exponential */\n+  OTI_exp,\n+  /* Natural Logarithm */\n+  OTI_log,\n \n   /* Compare insn; two operands.  */\n   OTI_cmp,\n@@ -198,6 +202,8 @@ extern GTY(()) optab optab_table[OTI_MAX];\n #define sqrt_optab (optab_table[OTI_sqrt])\n #define sin_optab (optab_table[OTI_sin])\n #define cos_optab (optab_table[OTI_cos])\n+#define exp_optab (optab_table[OTI_exp])\n+#define log_optab (optab_table[OTI_log])\n \n #define cmp_optab (optab_table[OTI_cmp])\n #define ucmp_optab (optab_table[OTI_ucmp])"}]}