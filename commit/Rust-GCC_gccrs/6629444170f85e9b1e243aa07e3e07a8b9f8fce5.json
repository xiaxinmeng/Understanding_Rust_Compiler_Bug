{"sha": "6629444170f85e9b1e243aa07e3e07a8b9f8fce5", "node_id": "C_kwDOANBUbNoAKDY2Mjk0NDQxNzBmODVlOWIxZTI0M2FhMDdlM2UwN2E4YjlmOGZjZTU", "commit": {"author": {"name": "Tobias Burnus", "email": "tobias@codesourcery.com", "date": "2022-11-03T14:03:52Z"}, "committer": {"name": "Tobias Burnus", "email": "tobias@codesourcery.com", "date": "2022-11-03T14:03:52Z"}, "message": "OpenMP/Fortran: 'target update' with DT components\n\nOpenMP 5.0 permits to use arrays with derived type components for the list\nitems to the 'from'/'to' clauses of the 'target update' directive.\n\ngcc/fortran/ChangeLog:\n\n\t* openmp.cc (gfc_match_omp_clauses): Permit derived types for\n\tthe 'to' and 'from' clauses of 'target update'.\n\t* trans-openmp.cc (gfc_trans_omp_clauses): Fixes for\n\tderived-type changes; fix size for scalars.\n\nlibgomp/ChangeLog:\n\n\t* testsuite/libgomp.fortran/target-11.f90: New test.\n\t* testsuite/libgomp.fortran/target-13.f90: New test.", "tree": {"sha": "13b8a330cb79ab4a8a7c4d504c3b2218fad9b1e2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/13b8a330cb79ab4a8a7c4d504c3b2218fad9b1e2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6629444170f85e9b1e243aa07e3e07a8b9f8fce5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6629444170f85e9b1e243aa07e3e07a8b9f8fce5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6629444170f85e9b1e243aa07e3e07a8b9f8fce5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6629444170f85e9b1e243aa07e3e07a8b9f8fce5/comments", "author": {"login": "tob2", "id": 264461, "node_id": "MDQ6VXNlcjI2NDQ2MQ==", "avatar_url": "https://avatars.githubusercontent.com/u/264461?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tob2", "html_url": "https://github.com/tob2", "followers_url": "https://api.github.com/users/tob2/followers", "following_url": "https://api.github.com/users/tob2/following{/other_user}", "gists_url": "https://api.github.com/users/tob2/gists{/gist_id}", "starred_url": "https://api.github.com/users/tob2/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tob2/subscriptions", "organizations_url": "https://api.github.com/users/tob2/orgs", "repos_url": "https://api.github.com/users/tob2/repos", "events_url": "https://api.github.com/users/tob2/events{/privacy}", "received_events_url": "https://api.github.com/users/tob2/received_events", "type": "User", "site_admin": false}, "committer": {"login": "tob2", "id": 264461, "node_id": "MDQ6VXNlcjI2NDQ2MQ==", "avatar_url": "https://avatars.githubusercontent.com/u/264461?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tob2", "html_url": "https://github.com/tob2", "followers_url": "https://api.github.com/users/tob2/followers", "following_url": "https://api.github.com/users/tob2/following{/other_user}", "gists_url": "https://api.github.com/users/tob2/gists{/gist_id}", "starred_url": "https://api.github.com/users/tob2/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tob2/subscriptions", "organizations_url": "https://api.github.com/users/tob2/orgs", "repos_url": "https://api.github.com/users/tob2/repos", "events_url": "https://api.github.com/users/tob2/events{/privacy}", "received_events_url": "https://api.github.com/users/tob2/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "553b1d3dd5b9253ebdf66ee3260c717d5b807dd1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/553b1d3dd5b9253ebdf66ee3260c717d5b807dd1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/553b1d3dd5b9253ebdf66ee3260c717d5b807dd1"}], "stats": {"total": 253, "additions": 246, "deletions": 7}, "files": [{"sha": "e0e3b52ad57f9952c1a9586ee884f1f769a5f4ad", "filename": "gcc/fortran/openmp.cc", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6629444170f85e9b1e243aa07e3e07a8b9f8fce5/gcc%2Ffortran%2Fopenmp.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6629444170f85e9b1e243aa07e3e07a8b9f8fce5/gcc%2Ffortran%2Fopenmp.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fopenmp.cc?ref=6629444170f85e9b1e243aa07e3e07a8b9f8fce5", "patch": "@@ -2499,9 +2499,10 @@ gfc_match_omp_clauses (gfc_omp_clauses **cp, const omp_mask mask,\n \t\t\t\t\t      true) == MATCH_YES)\n \t    continue;\n \t  if ((mask & OMP_CLAUSE_FROM)\n-\t      && gfc_match_omp_variable_list (\"from (\",\n+\t      && (gfc_match_omp_variable_list (\"from (\",\n \t\t\t\t\t      &c->lists[OMP_LIST_FROM], false,\n-\t\t\t\t\t      NULL, &head, true) == MATCH_YES)\n+\t\t\t\t\t      NULL, &head, true, true)\n+\t\t  == MATCH_YES))\n \t    continue;\n \t  break;\n \tcase 'g':\n@@ -3436,9 +3437,10 @@ gfc_match_omp_clauses (gfc_omp_clauses **cp, const omp_mask mask,\n \t\tcontinue;\n \t    }\n \t  else if ((mask & OMP_CLAUSE_TO)\n-\t      && gfc_match_omp_variable_list (\"to (\",\n+\t      && (gfc_match_omp_variable_list (\"to (\",\n \t\t\t\t\t      &c->lists[OMP_LIST_TO], false,\n-\t\t\t\t\t      NULL, &head, true) == MATCH_YES)\n+\t\t\t\t\t      NULL, &head, true, true)\n+\t\t  == MATCH_YES))\n \t    continue;\n \t  break;\n \tcase 'u':"}, {"sha": "4bfdf85cd9b056c978c5a2cc35c1cba3e2592cb8", "filename": "gcc/fortran/trans-openmp.cc", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6629444170f85e9b1e243aa07e3e07a8b9f8fce5/gcc%2Ffortran%2Ftrans-openmp.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6629444170f85e9b1e243aa07e3e07a8b9f8fce5/gcc%2Ffortran%2Ftrans-openmp.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-openmp.cc?ref=6629444170f85e9b1e243aa07e3e07a8b9f8fce5", "patch": "@@ -3626,7 +3626,10 @@ gfc_trans_omp_clauses (stmtblock_t *block, gfc_omp_clauses *clauses,\n \t\t  gcc_unreachable ();\n \t\t}\n \t      tree node = build_omp_clause (input_location, clause_code);\n-\t      if (n->expr == NULL || n->expr->ref->u.ar.type == AR_FULL)\n+\t      if (n->expr == NULL\n+\t\t  || (n->expr->ref->type == REF_ARRAY\n+\t\t      && n->expr->ref->u.ar.type == AR_FULL\n+\t\t      && n->expr->ref->next == NULL))\n \t\t{\n \t\t  tree decl = gfc_trans_omp_variable (n->sym, false);\n \t\t  if (gfc_omp_privatize_by_reference (decl))\n@@ -3666,13 +3669,13 @@ gfc_trans_omp_clauses (stmtblock_t *block, gfc_omp_clauses *clauses,\n \t\t{\n \t\t  tree ptr;\n \t\t  gfc_init_se (&se, NULL);\n-\t\t  if (n->expr->ref->u.ar.type == AR_ELEMENT)\n+\t\t  if (n->expr->rank == 0)\n \t\t    {\n \t\t      gfc_conv_expr_reference (&se, n->expr);\n \t\t      ptr = se.expr;\n \t\t      gfc_add_block_to_block (block, &se.pre);\n \t\t      OMP_CLAUSE_SIZE (node)\n-\t\t\t= TYPE_SIZE_UNIT (TREE_TYPE (ptr));\n+\t\t\t= TYPE_SIZE_UNIT (TREE_TYPE (TREE_TYPE (ptr)));\n \t\t    }\n \t\t  else\n \t\t    {"}, {"sha": "b0faa2e620d6f7979ae914b3db988f5e4f160ac0", "filename": "libgomp/testsuite/libgomp.fortran/target-11.f90", "status": "added", "additions": 75, "deletions": 0, "changes": 75, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6629444170f85e9b1e243aa07e3e07a8b9f8fce5/libgomp%2Ftestsuite%2Flibgomp.fortran%2Ftarget-11.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6629444170f85e9b1e243aa07e3e07a8b9f8fce5/libgomp%2Ftestsuite%2Flibgomp.fortran%2Ftarget-11.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.fortran%2Ftarget-11.f90?ref=6629444170f85e9b1e243aa07e3e07a8b9f8fce5", "patch": "@@ -0,0 +1,75 @@\n+! Based on libgomp.c/target-23.c\n+\n+! { dg-additional-options \"-fdump-tree-original\" }\n+! { dg-final { scan-tree-dump \"omp target update to\\\\(xxs\\\\\\[3\\\\\\] \\\\\\[len: 2\\\\\\]\\\\)\" \"original\" } }\n+! { dg-final { scan-tree-dump \"omp target update to\\\\(s\\\\.s \\\\\\[len: 4\\\\\\]\\\\)\" \"original\" } }\n+! { dg-final { scan-tree-dump \"omp target update from\\\\(s\\\\.s \\\\\\[len: 4\\\\\\]\\\\)\" \"original\" } }\n+\n+module m\n+  implicit none\n+  type S_type\n+    integer s\n+    integer, pointer :: u(:) => null()\n+    integer :: v(0:4)\n+  end type S_type\n+  integer, volatile :: z\n+end module m\n+\n+program main\n+  use m\n+  implicit none\n+  integer, target :: u(0:9) = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\n+  logical :: err\n+  type (S_type) :: s\n+  integer, pointer :: v(:)\n+  integer(kind=2) :: xxs(5)\n+  err = .false.\n+  s = S_type(9, v=[10, 11, 12, 13, 14])\n+  s%u(0:) => u(3:)\n+  v(-4+3:) => u(3:)\n+  xxs = [-1,-2,-3,-4,-5]\n+  !$omp target enter data map (to: s%s, s%u, s%u(0:5)) map (alloc: s%v(1:4), xxs(3:5))\n+  s%s = s%s + 1\n+  u(3) = u(3) + 1\n+  s%v(1) = s%v(1) + 1\n+  xxs(3) = -33\n+  xxs(4) = -44\n+  xxs(5) = -55\n+  !$omp target update to (xxs(4))\n+  !$omp target update to (s%s) to (s%u(0:2), s%v(1:4))\n+\n+  !$omp target map (alloc: s%s, s%v(1:4)) map (from: err)\n+    err = .false.\n+    if (s%s /= 10 .or. s%v(1) /= 12 .or. s%v(2) /= 12 .or. s%v(3) /= 13) &\n+      err = .true.\n+    if (v(-1) /= 4 .or. v(0) /= 4 .or. v(1) /= 5 .or. v(2) /= 6 .or. v(3) /= 7) &\n+      err = .true.\n+    if (xxs(4) /= -44) &\n+      err = .true.\n+    s%s = s%s + 1\n+    s%v(2) = s%v(2) + 2\n+    v(-1) = 5\n+    v(3) = 9\n+  !$omp end target\n+\n+  if (err) &\n+    error stop\n+\n+  !$omp target map (alloc: s%u(0:5))\n+    err = .false.\n+    if (s%u(0) /= 5 .or. s%u(1) /= 4 .or. s%u(2) /= 5 .or. s%u(3) /= 6 .or. s%u(4) /= 9) &\n+      err = .true.\n+    s%u(1) = 12\n+  !$omp end target\n+\n+  !$omp target update from (s%s, s%u(0:5)) from (s%v(1:4))\n+  if (err .or. s%s /= 11 .or. u(0) /= 0 .or. u(1) /= 1 .or. u(2) /= 2 .or. u(3) /= 5 &\n+      .or. u(4) /= 12 .or. u(5) /= 5 .or. u(6) /= 6 .or. u(7) /= 9 .or. u(8) /= 8    &\n+      .or. u(9) /= 9 .or. s%v(0) /= 10 .or. s%v(1) /= 12 .or. s%v(2) /= 14           &\n+      .or. s%v(3) /= 13 .or. s%v(4) /= 14)                                           &\n+    error stop\n+  ! !$omp target exit data map (release: s%s)\n+  ! !$omp target exit data map (release: s%u(0:5))\n+  ! !$omp target exit data map (delete: s%v(1:4))\n+  ! !$omp target exit data map (release: s%s)\n+end"}, {"sha": "6aacc7784494746ab27705c8d8b75d2315c726f6", "filename": "libgomp/testsuite/libgomp.fortran/target-13.f90", "status": "added", "additions": 159, "deletions": 0, "changes": 159, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6629444170f85e9b1e243aa07e3e07a8b9f8fce5/libgomp%2Ftestsuite%2Flibgomp.fortran%2Ftarget-13.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6629444170f85e9b1e243aa07e3e07a8b9f8fce5/libgomp%2Ftestsuite%2Flibgomp.fortran%2Ftarget-13.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.fortran%2Ftarget-13.f90?ref=6629444170f85e9b1e243aa07e3e07a8b9f8fce5", "patch": "@@ -0,0 +1,159 @@\n+module m\n+  implicit none\n+  type t\n+    integer :: s, a(5)\n+  end type t\n+\n+  type t2\n+    integer :: s, a(5)\n+    type(t) :: st, at(2:3)\n+  end type t2\n+\n+  interface operator(/=)\n+    procedure ne_compare_t\n+    procedure ne_compare_t2\n+  end interface\n+\n+contains\n+\n+  logical pure elemental function ne_compare_t (a, b) result(res)\n+    type(t), intent(in) :: a, b\n+    res = (a%s /= b%s) .or. any(a%a /= b%a)\n+  end function\n+\n+  logical pure elemental function ne_compare_t2 (a, b) result(res)\n+    type(t2), intent(in) :: a, b\n+    res = (a%s /= b%s) .or. any(a%a /= b%a)     &\n+          .or. (a%st /= b%st) .or. any(a%at /= b%at)\n+  end function\n+end module m\n+\n+program p\n+use m\n+implicit none\n+\n+type(t2) :: var1, var2(5), var3(:)\n+type(t2) :: var1a, var2a(5), var3a(:)\n+allocatable :: var3, var3a\n+logical :: shared_memory = .false.\n+\n+!$omp target map(to: shared_memory)\n+  shared_memory = .true.\n+!$omp end target\n+\n+var1 = T2(1, [1,2,3,4,5], T(11, [11,22,33,44,55]), &\n+          [T(-11, [-11,-22,-33,-44,-55]), T(11, [11,22,33,44,55])])\n+\n+var2 = [T2(101, [201,202,203,204,205], T(2011, [2011,2022,2033,2044,2055]), &\n+           [T(-11, [-11,-22,-33,-44,-55]), T(11, [11,22,33,44,55])]),       &\n+        T2(111, [211,212,213,214,215], T(2111, [2111,2122,2133,2144,2155]), &\n+           [T(-11, [-11,-22,-33,-44,-55]), T(11, [11,22,33,44,55])]),       &\n+        T2(121, [221,222,223,224,225], T(2211, [2211,2222,2233,2244,2255]), &\n+           [T(-11, [-11,-22,-33,-44,-55]), T(11, [11,22,33,44,55])]),       &\n+        T2(131, [231,232,233,234,235], T(2311, [2311,2322,2333,2344,2355]), &\n+           [T(-11, [-11,-22,-33,-44,-55]), T(11, [11,22,33,44,55])]),       &\n+        T2(141, [241,242,243,244,245], T(2411, [2411,2422,2433,2444,2455]), &\n+           [T(-11, [-11,-22,-33,-44,-55]), T(11, [11,22,33,44,55])])]\n+\n+var3 = [T2(301, [401,402,403,404,405], T(4011, [4011,4022,4033,4044,4055]), &\n+           [T(-11, [-11,-22,-33,-44,-55]), T(11, [11,22,33,44,55])]),       &\n+        T2(311, [411,412,413,414,415], T(4111, [4111,4122,4133,4144,4155]), &\n+           [T(-11, [-11,-22,-33,-44,-55]), T(11, [11,22,33,44,55])]),       &\n+        T2(321, [421,422,423,424,425], T(4211, [4211,4222,4233,4244,4255]), &\n+           [T(-11, [-11,-22,-33,-44,-55]), T(11, [11,22,33,44,55])]),       &\n+        T2(331, [431,432,433,434,435], T(4311, [4311,4322,4333,4344,4355]), &\n+           [T(-11, [-11,-22,-33,-44,-55]), T(11, [11,22,33,44,55])]),       &\n+        T2(341, [441,442,443,444,445], T(4411, [4411,4422,4433,4444,4455]), &\n+           [T(-11, [-11,-22,-33,-44,-55]), T(11, [11,22,33,44,55])])]\n+\n+var1a = var1\n+var2a = var2\n+var3a = var3\n+\n+!$omp target enter data map(to:var1)\n+!$omp target enter data map(to:var2)\n+!$omp target enter data map(to:var3)\n+\n+! ---------------\n+\n+!$omp target update from(var1%at(2:3))\n+\n+if (var1a /= var1) error stop\n+if (any (var2a /= var2)) error stop\n+if (any (var3a /= var3)) error stop\n+\n+! ---------------\n+\n+!$omp target\n+  var1%st%s = 1243\n+  var2(3)%at(2) = T(123, [345,64,356,39,13])\n+  var2(3)%at(3) = T(48, [74,162,572,357,3])\n+!$omp end target\n+\n+if (.not. shared_memory) then\n+  if (var1 /= var1) error stop\n+  if (any (var2a /= var2)) error stop\n+  if (any (var3a /= var3)) error stop\n+endif\n+\n+!$omp target update from(var1%st) from(var2(3)%at(2:3))\n+\n+var1a%st%s = 1243\n+var2a(3)%at(2) = T(123, [345,64,356,39,13])\n+var2a(3)%at(3) = T(48, [74,162,572,357,3])\n+if (var1 /= var1) error stop\n+if (any (var2a /= var2)) error stop\n+if (any (var3a /= var3)) error stop\n+\n+! ---------------\n+\n+var3(1) = var2(1)\n+var1%at(2)%a = var2(1)%a\n+var1%at(3)%a = var2(2)%a\n+\n+var1a = var1\n+var2a = var2\n+var3a = var3\n+\n+!$omp target update to(var3) to(var1%at(2:3))\n+\n+!$omp target\n+  var3(1)%s = var3(1)%s + 123\n+  var1%at(2)%a = var1%at(2)%a * 7\n+  var1%at(3)%s = var1%at(3)%s * (-3)\n+!$omp end target\n+\n+if (.not. shared_memory) then\n+  if (var1 /= var1) error stop\n+  if (any (var2a /= var2)) error stop\n+  if (any (var3a /= var3)) error stop\n+endif\n+\n+var3a(1)%s = var3a(1)%s + 123\n+var1a%at(2)%a = var1a%at(2)%a * 7\n+var1a%at(3)%s = var1a%at(3)%s * (-3)\n+\n+block\n+  integer, volatile :: i1,i2,i3,i4\n+  i1 = 1\n+  i2 = 2\n+  i3 = 1\n+  i4 = 2\n+  !$omp target update from(var3(i1:i2)) from(var1%at(i3:i4))\n+  i1 = 3\n+  i2 = 3\n+  i3 = 1\n+  i4 = 5\n+  !$omp target update from(var1%at(i1)%s) from(var1%at(i2)%a(i3:i4))\n+end block\n+\n+if (var1 /= var1) error stop\n+if (any (var2a /= var2)) error stop\n+if (any (var3a /= var3)) error stop\n+\n+! ---------------\n+\n+!$omp target exit data map(from:var1)\n+!$omp target exit data map(from:var2)\n+!$omp target exit data map(from:var3)\n+end"}]}