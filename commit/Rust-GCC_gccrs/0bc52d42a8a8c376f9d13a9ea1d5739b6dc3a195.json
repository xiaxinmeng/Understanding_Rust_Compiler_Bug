{"sha": "0bc52d42a8a8c376f9d13a9ea1d5739b6dc3a195", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGJjNTJkNDJhOGE4YzM3NmY5ZDEzYTllYTFkNTczOWI2ZGMzYTE5NQ==", "commit": {"author": {"name": "Richard Guenther", "email": "rguenther@suse.de", "date": "2005-11-17T11:35:00Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2005-11-17T11:35:00Z"}, "message": "re PR middle-end/24851 (f2c miscompilation)\n\n2005-11-16  Richard Guenther  <rguenther@suse.de>\n\n\tPR middle-end/24851\n\t* fold-const.c (extract_array_ref): Return byte offset\n\tin all cases.\n\t(fold_binary): Fold &x[a] CMP &x[b] to\n\ta*sizeof(*x) CMP b*sizeof(*x) to get correct overflow\n\tbehavior.\n\n\t* gcc.c-torture/execute/pr24851.c: New testcase.\n\nFrom-SVN: r107117", "tree": {"sha": "fa01127a0e850334616461c97e66569538042b89", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/fa01127a0e850334616461c97e66569538042b89"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0bc52d42a8a8c376f9d13a9ea1d5739b6dc3a195", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0bc52d42a8a8c376f9d13a9ea1d5739b6dc3a195", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0bc52d42a8a8c376f9d13a9ea1d5739b6dc3a195", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0bc52d42a8a8c376f9d13a9ea1d5739b6dc3a195/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "f92af607242414c1ee85a5eab0a9cf131bda0996", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f92af607242414c1ee85a5eab0a9cf131bda0996", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f92af607242414c1ee85a5eab0a9cf131bda0996"}], "stats": {"total": 64, "additions": 47, "deletions": 17}, "files": [{"sha": "7034cb3c7f718a9e5ca1db65a0fbb945cf0412a2", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0bc52d42a8a8c376f9d13a9ea1d5739b6dc3a195/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0bc52d42a8a8c376f9d13a9ea1d5739b6dc3a195/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=0bc52d42a8a8c376f9d13a9ea1d5739b6dc3a195", "patch": "@@ -1,3 +1,12 @@\n+2005-11-16  Richard Guenther  <rguenther@suse.de>\n+\n+\tPR middle-end/24851\n+\t* fold-const.c (extract_array_ref): Return byte offset\n+\tin all cases.\n+\t(fold_binary): Fold &x[a] CMP &x[b] to\n+\ta*sizeof(*x) CMP b*sizeof(*x) to get correct overflow\n+\tbehavior.\n+\n 2005-11-16  Richard Henderson  <rth@redhat.com>\n \n \tPR middle-end/23497"}, {"sha": "343cfae690370056729c2e9d4b66f7a53d98a511", "filename": "gcc/fold-const.c", "status": "modified", "additions": 16, "deletions": 17, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0bc52d42a8a8c376f9d13a9ea1d5739b6dc3a195/gcc%2Ffold-const.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0bc52d42a8a8c376f9d13a9ea1d5739b6dc3a195/gcc%2Ffold-const.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffold-const.c?ref=0bc52d42a8a8c376f9d13a9ea1d5739b6dc3a195", "patch": "@@ -5537,7 +5537,8 @@ constant_boolean_node (int value, tree type)\n    offset to the appropriate trees.  If there is no offset,\n    offset is set to NULL_TREE.  Base will be canonicalized to\n    something you can get the element type from using\n-   TREE_TYPE (TREE_TYPE (base)).  */\n+   TREE_TYPE (TREE_TYPE (base)).  Offset will be the offset\n+   in bytes to the base.  */\n \n static bool\n extract_array_ref (tree expr, tree *base, tree *offset)\n@@ -5573,8 +5574,10 @@ extract_array_ref (tree expr, tree *base, tree *offset)\n       tree op0 = TREE_OPERAND (expr, 0);\n       if (TREE_CODE (op0) == ARRAY_REF)\n \t{\n+\t  tree idx = TREE_OPERAND (op0, 1);\n \t  *base = TREE_OPERAND (op0, 0);\n-\t  *offset = TREE_OPERAND (op0, 1);\n+\t  *offset = fold_build2 (MULT_EXPR, TREE_TYPE (idx), idx,\n+\t\t\t\t array_ref_element_size (op0)); \n \t}\n       else\n \t{\n@@ -8888,25 +8891,21 @@ fold_binary (enum tree_code code, tree type, tree op0, tree op1)\n \t      && extract_array_ref (arg1, &base1, &offset1)\n \t      && operand_equal_p (base0, base1, 0))\n \t    {\n-\t      if (TYPE_SIZE (TREE_TYPE (TREE_TYPE (base0)))\n-\t\t  && integer_zerop (TYPE_SIZE (TREE_TYPE (TREE_TYPE (base0)))))\n-\t\toffset0 = NULL_TREE;\n-\t      if (TYPE_SIZE (TREE_TYPE (TREE_TYPE (base1)))\n-\t\t  && integer_zerop (TYPE_SIZE (TREE_TYPE (TREE_TYPE (base1)))))\n-\t\toffset1 = NULL_TREE;\n+\t      /* Handle no offsets on both sides specially.  */\n \t      if (offset0 == NULL_TREE\n \t\t  && offset1 == NULL_TREE)\n+\t\treturn fold_build2 (code, type, integer_zero_node,\n+\t\t\t\t    integer_zero_node);\n+\n+\t      if (!offset0 || !offset1\n+\t\t  || TREE_TYPE (offset0) == TREE_TYPE (offset1))\n \t\t{\n-\t\t  offset0 = integer_zero_node;\n-\t\t  offset1 = integer_zero_node;\n+\t\t  if (offset0 == NULL_TREE)\n+\t\t    offset0 = build_int_cst (TREE_TYPE (offset1), 0);\n+\t\t  if (offset1 == NULL_TREE)\n+\t\t    offset1 = build_int_cst (TREE_TYPE (offset0), 0);\n+\t\t  return fold_build2 (code, type, offset0, offset1);\n \t\t}\n-\t      else if (offset0 == NULL_TREE)\n-\t\toffset0 = build_int_cst (TREE_TYPE (offset1), 0);\n-\t      else if (offset1 == NULL_TREE)\n-\t\toffset1 = build_int_cst (TREE_TYPE (offset0), 0);\n-\n-\t      if (TREE_TYPE (offset0) == TREE_TYPE (offset1))\n-\t\treturn fold_build2 (code, type, offset0, offset1);\n \t    }\n \t}\n "}, {"sha": "dbc0b69f2db579d90777a4a1360ebb5c72e8b944", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0bc52d42a8a8c376f9d13a9ea1d5739b6dc3a195/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0bc52d42a8a8c376f9d13a9ea1d5739b6dc3a195/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=0bc52d42a8a8c376f9d13a9ea1d5739b6dc3a195", "patch": "@@ -1,3 +1,8 @@\n+2005-11-16  Richard Guenther  <rguenther@suse.de>\n+\n+\tPR middle-end/24851\n+\t* gcc.c-torture/execute/pr24851.c: New testcase.\n+\n 2005-11-16  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* gcc.dg/fold-overflow-1.c: New test."}, {"sha": "55a87e0019e9ba768bef5129c74f093caf0eba9d", "filename": "gcc/testsuite/gcc.c-torture/execute/pr24851.c", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0bc52d42a8a8c376f9d13a9ea1d5739b6dc3a195/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fpr24851.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0bc52d42a8a8c376f9d13a9ea1d5739b6dc3a195/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fpr24851.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fpr24851.c?ref=0bc52d42a8a8c376f9d13a9ea1d5739b6dc3a195", "patch": "@@ -0,0 +1,17 @@\n+/* We used to handle pointer addition wrongly\n+   at the time of recombining to an ARRAY_REF\n+   in the case of\n+     p + -4B\n+   where -4B is represented as unsigned.  */\n+\n+void abort(void);\n+int main()\n+{\n+  int a[10], *p, *q;\n+  q = &a[1];\n+  p = &q[-1];\n+  if (p >= &a[9])\n+    abort ();\n+  return 0;\n+}\n+"}]}