{"sha": "8ad15a0a8d0666e21f4217d8ba004b33bcaf383d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGFkMTVhMGE4ZDA2NjZlMjFmNDIxN2Q4YmEwMDRiMzNiY2FmMzgzZA==", "commit": {"author": {"name": "Janus Weil", "email": "janus@gcc.gnu.org", "date": "2009-06-16T09:06:13Z"}, "committer": {"name": "Janus Weil", "email": "janus@gcc.gnu.org", "date": "2009-06-16T09:06:13Z"}, "message": "re PR fortran/36947 (Attributes not fully checked comparing actual vs dummy procedure)\n\n2009-06-16  Janus Weil  <janus@gcc.gnu.org>\n\n\tPR fortran/36947\n\tPR fortran/40039\n\t* expr.c (gfc_check_pointer_assign): Call 'gfc_compare_interfaces' with\n\terror message.\n\t* gfortran.h (gfc_compare_interfaces): Additional argument.\n\t* interface.c (operator_correspondence): Removed.\n\t(gfc_compare_interfaces): Additional argument to return error message.\n\tDirectly use the code from 'operator_correspondence' instead of calling\n\tthe function. Check for OPTIONAL. Some rearrangements.\n\t(check_interface1): Call 'gfc_compare_interfaces' without error message.\n\t(compare_parameter): Call 'gfc_compare_interfaces' with error message.\n\t* resolve.c (check_generic_tbp_ambiguity): Call 'gfc_compare_interfaces'\n\twithout error message.\n\n\n2009-06-16  Janus Weil  <janus@gcc.gnu.org>\n\n\tPR fortran/36947\n\tPR fortran/40039\n\t* gfortran.dg/dummy_procedure_1.f90: Extended test case.\n\t* gfortran.dg/interface_20.f90: Modified error messages.\n\t* gfortran.dg/interface_21.f90: Ditto.\n\t* gfortran.dg/interface_26.f90: Ditto.\n\t* gfortran.dg/interface_27.f90: Ditto.\n\t* gfortran.dg/interface_28.f90: Extended test case.\n\t* gfortran.dg/interface_29.f90: New.\n\t* gfortran.dg/proc_decl_7.f90: Modified error messages.\n\t* gfortran.dg/proc_decl_8.f90: Ditto.\n\t* gfortran.dg/proc_ptr_11.f90: Ditto.\n\t* gfortran.dg/proc_ptr_15.f90: Ditto.\n\nFrom-SVN: r148519", "tree": {"sha": "68f16e73b7e9ee77f41c0bfa780dcfa5036ca069", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/68f16e73b7e9ee77f41c0bfa780dcfa5036ca069"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8ad15a0a8d0666e21f4217d8ba004b33bcaf383d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8ad15a0a8d0666e21f4217d8ba004b33bcaf383d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8ad15a0a8d0666e21f4217d8ba004b33bcaf383d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8ad15a0a8d0666e21f4217d8ba004b33bcaf383d/comments", "author": {"login": "janusw", "id": 484108, "node_id": "MDQ6VXNlcjQ4NDEwOA==", "avatar_url": "https://avatars.githubusercontent.com/u/484108?v=4", "gravatar_id": "", "url": "https://api.github.com/users/janusw", "html_url": "https://github.com/janusw", "followers_url": "https://api.github.com/users/janusw/followers", "following_url": "https://api.github.com/users/janusw/following{/other_user}", "gists_url": "https://api.github.com/users/janusw/gists{/gist_id}", "starred_url": "https://api.github.com/users/janusw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/janusw/subscriptions", "organizations_url": "https://api.github.com/users/janusw/orgs", "repos_url": "https://api.github.com/users/janusw/repos", "events_url": "https://api.github.com/users/janusw/events{/privacy}", "received_events_url": "https://api.github.com/users/janusw/received_events", "type": "User", "site_admin": false}, "committer": {"login": "janusw", "id": 484108, "node_id": "MDQ6VXNlcjQ4NDEwOA==", "avatar_url": "https://avatars.githubusercontent.com/u/484108?v=4", "gravatar_id": "", "url": "https://api.github.com/users/janusw", "html_url": "https://github.com/janusw", "followers_url": "https://api.github.com/users/janusw/followers", "following_url": "https://api.github.com/users/janusw/following{/other_user}", "gists_url": "https://api.github.com/users/janusw/gists{/gist_id}", "starred_url": "https://api.github.com/users/janusw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/janusw/subscriptions", "organizations_url": "https://api.github.com/users/janusw/orgs", "repos_url": "https://api.github.com/users/janusw/repos", "events_url": "https://api.github.com/users/janusw/events{/privacy}", "received_events_url": "https://api.github.com/users/janusw/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7c5222ff1a2283b0f8c889da777c7dae5d4224ba", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7c5222ff1a2283b0f8c889da777c7dae5d4224ba", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7c5222ff1a2283b0f8c889da777c7dae5d4224ba"}], "stats": {"total": 311, "additions": 214, "deletions": 97}, "files": [{"sha": "12aa9dce0f52eeef4c23c5b07e8362a5f22dd7f2", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8ad15a0a8d0666e21f4217d8ba004b33bcaf383d/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8ad15a0a8d0666e21f4217d8ba004b33bcaf383d/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=8ad15a0a8d0666e21f4217d8ba004b33bcaf383d", "patch": "@@ -1,3 +1,19 @@\n+2009-06-16  Janus Weil  <janus@gcc.gnu.org>\n+\n+\tPR fortran/36947\n+\tPR fortran/40039\n+\t* expr.c (gfc_check_pointer_assign): Call 'gfc_compare_interfaces' with\n+\terror message.\n+\t* gfortran.h (gfc_compare_interfaces): Additional argument.\n+\t* interface.c (operator_correspondence): Removed.\n+\t(gfc_compare_interfaces): Additional argument to return error message.\n+\tDirectly use the code from 'operator_correspondence' instead of calling\n+\tthe function. Check for OPTIONAL. Some rearrangements.\n+\t(check_interface1): Call 'gfc_compare_interfaces' without error message.\n+\t(compare_parameter): Call 'gfc_compare_interfaces' with error message.\n+\t* resolve.c (check_generic_tbp_ambiguity): Call 'gfc_compare_interfaces'\n+\twithout error message.\n+\n 2009-06-16  Tobias Burnus  <burnus@net-b.de>\n \n \tPR fortran/40383"}, {"sha": "13c6b6363559dc1cc2ffb2f23a19e5213760c22c", "filename": "gcc/fortran/expr.c", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8ad15a0a8d0666e21f4217d8ba004b33bcaf383d/gcc%2Ffortran%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8ad15a0a8d0666e21f4217d8ba004b33bcaf383d/gcc%2Ffortran%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fexpr.c?ref=8ad15a0a8d0666e21f4217d8ba004b33bcaf383d", "patch": "@@ -3142,6 +3142,7 @@ gfc_check_pointer_assign (gfc_expr *lvalue, gfc_expr *rvalue)\n   /* Checks on rvalue for procedure pointer assignments.  */\n   if (proc_pointer)\n     {\n+      char err[200];\n       attr = gfc_expr_attr (rvalue);\n       if (!((rvalue->expr_type == EXPR_NULL)\n \t    || (rvalue->expr_type == EXPR_FUNCTION && attr.proc_pointer)\n@@ -3181,10 +3182,11 @@ gfc_check_pointer_assign (gfc_expr *lvalue, gfc_expr *rvalue)\n \treturn SUCCESS;\n       if (rvalue->expr_type == EXPR_VARIABLE\n \t  && !gfc_compare_interfaces (lvalue->symtree->n.sym,\n-\t\t\t\t      rvalue->symtree->n.sym, 0, 1))\n+\t\t\t\t      rvalue->symtree->n.sym, 0, 1, err,\n+\t\t\t\t      sizeof(err)))\n \t{\n-\t  gfc_error (\"Interfaces don't match \"\n-\t\t     \"in procedure pointer assignment at %L\", &rvalue->where);\n+\t  gfc_error (\"Interface mismatch in procedure pointer assignment \"\n+\t\t     \"at %L: %s\", &rvalue->where, err);\n \t  return FAILURE;\n \t}\n       return SUCCESS;"}, {"sha": "7b9c69753c9999a6d8c6225f74fbe8d6deff20ab", "filename": "gcc/fortran/gfortran.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8ad15a0a8d0666e21f4217d8ba004b33bcaf383d/gcc%2Ffortran%2Fgfortran.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8ad15a0a8d0666e21f4217d8ba004b33bcaf383d/gcc%2Ffortran%2Fgfortran.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fgfortran.h?ref=8ad15a0a8d0666e21f4217d8ba004b33bcaf383d", "patch": "@@ -2567,7 +2567,7 @@ gfc_try gfc_ref_dimen_size (gfc_array_ref *, int dimen, mpz_t *);\n void gfc_free_interface (gfc_interface *);\n int gfc_compare_derived_types (gfc_symbol *, gfc_symbol *);\n int gfc_compare_types (gfc_typespec *, gfc_typespec *);\n-int gfc_compare_interfaces (gfc_symbol*, gfc_symbol*, int, int);\n+int gfc_compare_interfaces (gfc_symbol*, gfc_symbol*, int, int, char *, int);\n void gfc_check_interfaces (gfc_namespace *);\n void gfc_procedure_use (gfc_symbol *, gfc_actual_arglist **, locus *);\n gfc_symbol *gfc_search_interface (gfc_interface *, int,"}, {"sha": "4954389848bb2d2d4c771c7b8e4ab1ae6d4d3586", "filename": "gcc/fortran/interface.c", "status": "modified", "additions": 94, "deletions": 71, "changes": 165, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8ad15a0a8d0666e21f4217d8ba004b33bcaf383d/gcc%2Ffortran%2Finterface.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8ad15a0a8d0666e21f4217d8ba004b33bcaf383d/gcc%2Ffortran%2Finterface.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Finterface.c?ref=8ad15a0a8d0666e21f4217d8ba004b33bcaf383d", "patch": "@@ -778,7 +778,7 @@ check_operator_interface (gfc_interface *intr, gfc_intrinsic_op op)\n    Since this test is asymmetric, it has to be called twice to make it\n    symmetric.  Returns nonzero if the argument lists are incompatible\n    by this test.  This subroutine implements rule 1 of section\n-   14.1.2.3.  */\n+   14.1.2.3 in the Fortran 95 standard.  */\n \n static int\n count_types_test (gfc_formal_arglist *f1, gfc_formal_arglist *f2)\n@@ -869,45 +869,6 @@ count_types_test (gfc_formal_arglist *f1, gfc_formal_arglist *f2)\n }\n \n \n-/* Perform the abbreviated correspondence test for operators.  The\n-   arguments cannot be optional and are always ordered correctly,\n-   which makes this test much easier than that for generic tests.\n-\n-   This subroutine is also used when comparing a formal and actual\n-   argument list when an actual parameter is a dummy procedure, and in\n-   procedure pointer assignments. In these cases, two formal interfaces must be\n-   compared for equality which is what happens here. 'intent_flag' specifies\n-   whether the intents of the arguments are required to match, which is not the\n-   case for ambiguity checks.  */\n-\n-static int\n-operator_correspondence (gfc_formal_arglist *f1, gfc_formal_arglist *f2,\n-\t\t\t int intent_flag)\n-{\n-  for (;;)\n-    {\n-      /* Check existence.  */\n-      if (f1 == NULL && f2 == NULL)\n-\tbreak;\n-      if (f1 == NULL || f2 == NULL)\n-\treturn 1;\n-\n-      /* Check type and rank.  */\n-      if (!compare_type_rank (f1->sym, f2->sym))\n-\treturn 1;\n-\n-      /* Check intent.  */\n-      if (intent_flag && (f1->sym->attr.intent != f2->sym->attr.intent))\n-       return 1;\n-\n-      f1 = f1->next;\n-      f2 = f2->next;\n-    }\n-\n-  return 0;\n-}\n-\n-\n /* Perform the correspondence test in rule 2 of section 14.1.2.3.\n    Returns zero if no argument is found that satisfies rule 2, nonzero\n    otherwise.\n@@ -968,17 +929,29 @@ generic_correspondence (gfc_formal_arglist *f1, gfc_formal_arglist *f2)\n \n /* 'Compare' two formal interfaces associated with a pair of symbols.\n    We return nonzero if there exists an actual argument list that\n-   would be ambiguous between the two interfaces, zero otherwise.  */\n+   would be ambiguous between the two interfaces, zero otherwise.\n+   'intent_flag' specifies whether INTENT and OPTIONAL of the arguments are\n+   required to match, which is not the case for ambiguity checks.*/\n \n int\n gfc_compare_interfaces (gfc_symbol *s1, gfc_symbol *s2, int generic_flag,\n-\t\t\tint intent_flag)\n+\t\t\tint intent_flag, char *errmsg, int err_len)\n {\n   gfc_formal_arglist *f1, *f2;\n \n-  if ((s1->attr.function && !s2->attr.function)\n-      || (s1->attr.subroutine && s2->attr.function))\n-    return 0;\n+  if (s1->attr.function && !s2->attr.function)\n+    {\n+      if (errmsg != NULL)\n+\tsnprintf (errmsg, err_len, \"'%s' is not a function\", s2->name);\n+      return 0;\n+    }\n+\n+  if (s1->attr.subroutine && s2->attr.function)\n+    {\n+      if (errmsg != NULL)\n+\tsnprintf (errmsg, err_len, \"'%s' is not a subroutine\", s2->name);\n+      return 0;\n+    }\n \n   /* If the arguments are functions, check type and kind\n      (only for dummy procedures and procedure pointer assignments).  */\n@@ -988,32 +961,84 @@ gfc_compare_interfaces (gfc_symbol *s1, gfc_symbol *s2, int generic_flag,\n       if (s1->ts.type == BT_UNKNOWN)\n \treturn 1;\n       if ((s1->ts.type != s2->ts.type) || (s1->ts.kind != s2->ts.kind))\n-\treturn 0;\n+\t{\n+\t  if (errmsg != NULL)\n+\t    snprintf (errmsg, err_len, \"Type/kind mismatch in return value \"\n+\t\t      \"of '%s'\", s2->name);\n+\t  return 0;\n+\t}\n       if (s1->attr.if_source == IFSRC_DECL)\n \treturn 1;\n     }\n \n-  if (s1->attr.if_source == IFSRC_UNKNOWN)\n+  if (s1->attr.if_source == IFSRC_UNKNOWN\n+      || s2->attr.if_source == IFSRC_UNKNOWN)\n     return 1;\n \n   f1 = s1->formal;\n   f2 = s2->formal;\n \n   if (f1 == NULL && f2 == NULL)\n-    return 1;\t\t\t/* Special case.  */\n-\n-  if (count_types_test (f1, f2) || count_types_test (f2, f1))\n-    return 0;\n+    return 1;\t\t\t/* Special case: No arguments.  */\n \n   if (generic_flag)\n     {\n       if (generic_correspondence (f1, f2) || generic_correspondence (f2, f1))\n \treturn 0;\n     }\n   else\n+    /* Perform the abbreviated correspondence test for operators (the\n+       arguments cannot be optional and are always ordered correctly).\n+       This is also done when comparing interfaces for dummy procedures and in\n+       procedure pointer assignments.  */\n+\n+    for (;;)\n+      {\n+\t/* Check existence.  */\n+\tif (f1 == NULL && f2 == NULL)\n+\t  break;\n+\tif (f1 == NULL || f2 == NULL)\n+\t  {\n+\t    if (errmsg != NULL)\n+\t      snprintf (errmsg, err_len, \"'%s' has the wrong number of \"\n+\t\t\t\"arguments\", s2->name);\n+\t    return 0;\n+\t  }\n+\n+\t/* Check type and rank.  */\n+\tif (!compare_type_rank (f1->sym, f2->sym))\n+\t  {\n+\t    if (errmsg != NULL)\n+\t      snprintf (errmsg, err_len, \"Type/rank mismatch in argument '%s'\",\n+\t\t\tf1->sym->name);\n+\t    return 0;\n+\t  }\n+\n+\t/* Check INTENT.  */\n+\tif (intent_flag && (f1->sym->attr.intent != f2->sym->attr.intent))\n+\t  {\n+\t    snprintf (errmsg, err_len, \"INTENT mismatch in argument '%s'\",\n+\t\t      f1->sym->name);\n+\t    return 0;\n+\t  }\n+\n+\t/* Check OPTIONAL.  */\n+\tif (intent_flag && (f1->sym->attr.optional != f2->sym->attr.optional))\n+\t  {\n+\t    snprintf (errmsg, err_len, \"OPTIONAL mismatch in argument '%s'\",\n+\t\t      f1->sym->name);\n+\t    return 0;\n+\t  }\n+\n+\tf1 = f1->next;\n+\tf2 = f2->next;\n+      }\n+\n+  if (count_types_test (f1, f2) || count_types_test (f2, f1))\n     {\n-      if (operator_correspondence (f1, f2, intent_flag))\n-\treturn 0;\n+      if (errmsg != NULL)\n+\tsnprintf (errmsg, err_len, \"Interface not matching\");\n+      return 0;\n     }\n \n   return 1;\n@@ -1091,7 +1116,7 @@ check_interface1 (gfc_interface *p, gfc_interface *q0,\n \tif (p->sym->name == q->sym->name && p->sym->module == q->sym->module)\n \t  continue;\n \n-\tif (gfc_compare_interfaces (p->sym, q->sym, generic_flag, 0))\n+\tif (gfc_compare_interfaces (p->sym, q->sym, generic_flag, 0, NULL, 0))\n \t  {\n \t    if (referenced)\n \t      {\n@@ -1362,27 +1387,25 @@ compare_parameter (gfc_symbol *formal, gfc_expr *actual,\n \n   if (actual->ts.type == BT_PROCEDURE)\n     {\n-      if (formal->attr.flavor != FL_PROCEDURE)\n-\tgoto proc_fail;\n-\n-      if (formal->attr.function\n-\t  && !compare_type_rank (formal, actual->symtree->n.sym))\n-\tgoto proc_fail;\n+      char err[200];\n \n-      if (formal->attr.if_source == IFSRC_UNKNOWN\n-\t  || actual->symtree->n.sym->attr.external)\n-\treturn 1;\t\t/* Assume match.  */\n+      if (formal->attr.flavor != FL_PROCEDURE)\n+\t{\n+\t  if (where)\n+\t    gfc_error (\"Invalid procedure argument at %L\", &actual->where);\n+\t  return 0;\n+\t}\n \n-      if (!gfc_compare_interfaces (formal, actual->symtree->n.sym, 0, 1))\n-\tgoto proc_fail;\n+      if (!gfc_compare_interfaces (formal, actual->symtree->n.sym, 0, 1, err,\n+\t\t\t\t   sizeof(err)))\n+\t{\n+\t  if (where)\n+\t    gfc_error (\"Interface mismatch in dummy procedure '%s' at %L: %s\",\n+\t\t       formal->name, &actual->where, err);\n+\t  return 0;\n+\t}\n \n       return 1;\n-\n-      proc_fail:\n-\tif (where)\n-\t  gfc_error (\"Type/rank mismatch in argument '%s' at %L\",\n-\t\t     formal->name, &actual->where);\n-      return 0;\n     }\n \n   if ((actual->expr_type != EXPR_NULL || actual->ts.type != BT_UNKNOWN)"}, {"sha": "3a670423d7f3822a223b0be2f799f4684b6240e4", "filename": "gcc/fortran/resolve.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8ad15a0a8d0666e21f4217d8ba004b33bcaf383d/gcc%2Ffortran%2Fresolve.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8ad15a0a8d0666e21f4217d8ba004b33bcaf383d/gcc%2Ffortran%2Fresolve.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fresolve.c?ref=8ad15a0a8d0666e21f4217d8ba004b33bcaf383d", "patch": "@@ -8593,7 +8593,7 @@ check_generic_tbp_ambiguity (gfc_tbp_generic* t1, gfc_tbp_generic* t2,\n     }\n \n   /* Compare the interfaces.  */\n-  if (gfc_compare_interfaces (sym1, sym2, 1, 0))\n+  if (gfc_compare_interfaces (sym1, sym2, 1, 0, NULL, 0))\n     {\n       gfc_error (\"'%s' and '%s' for GENERIC '%s' at %L are ambiguous\",\n \t\t sym1->name, sym2->name, generic_name, &where);"}, {"sha": "b3a7612a7126fdcee0987d7fe610fcbadc1c279b", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8ad15a0a8d0666e21f4217d8ba004b33bcaf383d/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8ad15a0a8d0666e21f4217d8ba004b33bcaf383d/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=8ad15a0a8d0666e21f4217d8ba004b33bcaf383d", "patch": "@@ -1,3 +1,19 @@\n+2009-06-16  Janus Weil  <janus@gcc.gnu.org>\n+\n+\tPR fortran/36947\n+\tPR fortran/40039\n+\t* gfortran.dg/dummy_procedure_1.f90: Extended test case.\n+\t* gfortran.dg/interface_20.f90: Modified error messages.\n+\t* gfortran.dg/interface_21.f90: Ditto.\n+\t* gfortran.dg/interface_26.f90: Ditto.\n+\t* gfortran.dg/interface_27.f90: Ditto.\n+\t* gfortran.dg/interface_28.f90: Extended test case.\n+\t* gfortran.dg/interface_29.f90: New.\n+\t* gfortran.dg/proc_decl_7.f90: Modified error messages.\n+\t* gfortran.dg/proc_decl_8.f90: Ditto.\n+\t* gfortran.dg/proc_ptr_11.f90: Ditto.\n+\t* gfortran.dg/proc_ptr_15.f90: Ditto.\n+\n 2009-06-16  Ira Rosen  <irar@il.ibm.com>\n \n \t* gcc.dg/vect/vect-outer-4g.c: Don't look for pattern not allowed "}, {"sha": "57d4bc38e9ee5e958eea4218e86d6b7237c28e00", "filename": "gcc/testsuite/gfortran.dg/dummy_procedure_1.f90", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8ad15a0a8d0666e21f4217d8ba004b33bcaf383d/gcc%2Ftestsuite%2Fgfortran.dg%2Fdummy_procedure_1.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8ad15a0a8d0666e21f4217d8ba004b33bcaf383d/gcc%2Ftestsuite%2Fgfortran.dg%2Fdummy_procedure_1.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fdummy_procedure_1.f90?ref=8ad15a0a8d0666e21f4217d8ba004b33bcaf383d", "patch": "@@ -21,6 +21,9 @@ function f()\n       end function f\n     end interface\n   end subroutine s1\n+  subroutine s2(x)\n+    integer :: x\n+  end subroutine\n end module m1\n \n   use m1\n@@ -38,6 +41,7 @@ end function x\n   call s1(x) ! explicit interface\n   call s1(y) ! declared external\n   call s1(z) ! { dg-error \"Expected a procedure for argument\" }\n+  call s2(x) ! { dg-error \"Invalid procedure argument\" }\n contains\n   integer function w()\n     w = 1"}, {"sha": "829add2ff9b0a31b53505417f003441bc7dfc924", "filename": "gcc/testsuite/gfortran.dg/interface_20.f90", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8ad15a0a8d0666e21f4217d8ba004b33bcaf383d/gcc%2Ftestsuite%2Fgfortran.dg%2Finterface_20.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8ad15a0a8d0666e21f4217d8ba004b33bcaf383d/gcc%2Ftestsuite%2Fgfortran.dg%2Finterface_20.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Finterface_20.f90?ref=8ad15a0a8d0666e21f4217d8ba004b33bcaf383d", "patch": "@@ -16,5 +16,5 @@ end module m\n use m\n implicit none\n intrinsic cos\n-call sub(cos) ! { dg-error \"Type/rank mismatch in argument\" }\n+call sub(cos) ! { dg-error \"wrong number of arguments\" }\n end"}, {"sha": "e3db771a93d4ae6913bee77a3ac4a04ad0463621", "filename": "gcc/testsuite/gfortran.dg/interface_21.f90", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8ad15a0a8d0666e21f4217d8ba004b33bcaf383d/gcc%2Ftestsuite%2Fgfortran.dg%2Finterface_21.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8ad15a0a8d0666e21f4217d8ba004b33bcaf383d/gcc%2Ftestsuite%2Fgfortran.dg%2Finterface_21.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Finterface_21.f90?ref=8ad15a0a8d0666e21f4217d8ba004b33bcaf383d", "patch": "@@ -18,5 +18,5 @@ end module m\n use m\n implicit none\n EXTERNAL foo  ! implicit interface is undefined\n-call sub(foo) ! { dg-error \"Type/rank mismatch in argument\" }\n+call sub(foo) ! { dg-error \"is not a function\" }\n end"}, {"sha": "c1af6c67d58821c25e8618e1c7421a84fd5aff64", "filename": "gcc/testsuite/gfortran.dg/interface_26.f90", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8ad15a0a8d0666e21f4217d8ba004b33bcaf383d/gcc%2Ftestsuite%2Fgfortran.dg%2Finterface_26.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8ad15a0a8d0666e21f4217d8ba004b33bcaf383d/gcc%2Ftestsuite%2Fgfortran.dg%2Finterface_26.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Finterface_26.f90?ref=8ad15a0a8d0666e21f4217d8ba004b33bcaf383d", "patch": "@@ -37,7 +37,7 @@ END FUNCTION UserFunction\n     END INTERFACE\n     INTEGER, EXTERNAL :: UserOp \n \n-    res = UserFunction( a,b, UserOp ) ! { dg-error \"Type/rank mismatch in argument\" }\n+    res = UserFunction( a,b, UserOp ) ! { dg-error \"Type/kind mismatch in return value\" }\n \n     if( res .lt. 10 ) then\n        res = recSum( a, res, UserFunction, UserOp ) "}, {"sha": "71975b6b7d2920efbb81afa914ec981fed8a11e7", "filename": "gcc/testsuite/gfortran.dg/interface_27.f90", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8ad15a0a8d0666e21f4217d8ba004b33bcaf383d/gcc%2Ftestsuite%2Fgfortran.dg%2Finterface_27.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8ad15a0a8d0666e21f4217d8ba004b33bcaf383d/gcc%2Ftestsuite%2Fgfortran.dg%2Finterface_27.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Finterface_27.f90?ref=8ad15a0a8d0666e21f4217d8ba004b33bcaf383d", "patch": "@@ -31,8 +31,8 @@ real function p(y)\n   end interface\n   pointer :: p\n \n-  call a(4.3,func)  ! { dg-error \"Type/rank mismatch in argument\" }\n-  p => func         ! { dg-error \"Interfaces don't match in procedure pointer assignment\" }\n+  call a(4.3,func)  ! { dg-error \"INTENT mismatch in argument\" }\n+  p => func         ! { dg-error \"INTENT mismatch in argument\" }\n end subroutine\n \n end module "}, {"sha": "42a8208f4b34e5ecc7877a6e085c389e63bcbd29", "filename": "gcc/testsuite/gfortran.dg/interface_28.f90", "status": "modified", "additions": 10, "deletions": 6, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8ad15a0a8d0666e21f4217d8ba004b33bcaf383d/gcc%2Ftestsuite%2Fgfortran.dg%2Finterface_28.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8ad15a0a8d0666e21f4217d8ba004b33bcaf383d/gcc%2Ftestsuite%2Fgfortran.dg%2Finterface_28.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Finterface_28.f90?ref=8ad15a0a8d0666e21f4217d8ba004b33bcaf383d", "patch": "@@ -2,7 +2,8 @@\n !\n ! PR 36947: Attributes not fully checked comparing actual vs dummy procedure\n !\n-! Contributed by Walter Spector <w6ws@earthlink.net>\n+! Original test case by Walter Spector <w6ws@earthlink.net>\n+! Modified by Janus Weil <janus@gcc.gnu.org>\n \n module testsub\n   contains\n@@ -12,17 +13,19 @@ subroutine sub(x)\n         integer, intent(in), optional:: x\n       end subroutine\n     end interface\n-    print *, \"In test(), about to call sub()\"\n     call sub()\n   end subroutine\n end module\n \n module sub\n   contains\n   subroutine subActual(x)\n-    ! actual subroutine's argment is different in intent and optional\n-    integer, intent(inout):: x\n-    print *, \"In subActual():\", x\n+    ! actual subroutine's argment is different in intent\n+    integer, intent(inout),optional:: x\n+  end subroutine\n+  subroutine subActual2(x)\n+    ! actual subroutine's argment is missing OPTIONAL\n+    integer, intent(in):: x\n   end subroutine\n end module\n \n@@ -32,7 +35,8 @@ program interfaceCheck\n \n   integer :: a\n \n-  call test(subActual)  ! { dg-error \"Type/rank mismatch in argument\" }\n+  call test(subActual)  ! { dg-error \"INTENT mismatch in argument\" }\n+  call test(subActual2)  ! { dg-error \"OPTIONAL mismatch in argument\" }\n end program\n \n ! { dg-final { cleanup-modules \"sub testsub\" } }"}, {"sha": "e94571f43e1d7ac5f16ff657b2d0e2544bd74681", "filename": "gcc/testsuite/gfortran.dg/interface_29.f90", "status": "added", "additions": 52, "deletions": 0, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8ad15a0a8d0666e21f4217d8ba004b33bcaf383d/gcc%2Ftestsuite%2Fgfortran.dg%2Finterface_29.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8ad15a0a8d0666e21f4217d8ba004b33bcaf383d/gcc%2Ftestsuite%2Fgfortran.dg%2Finterface_29.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Finterface_29.f90?ref=8ad15a0a8d0666e21f4217d8ba004b33bcaf383d", "patch": "@@ -0,0 +1,52 @@\n+! { dg-do compile }\n+!\n+! PR 36947: Attributes not fully checked comparing actual vs dummy procedure\n+!\n+! Contributed by Tobias Burnus <burnus@net-b.de>\n+\n+module m\n+interface foo\n+  module procedure one, two\n+end interface foo\n+contains\n+subroutine one(op,op2)\n+    interface\n+      subroutine op(x, y)\n+        complex, intent(in)  :: x(:)\n+        complex, intent(out) :: y(:)\n+      end subroutine op\n+      subroutine op2(x, y)\n+        complex, intent(in)  :: x(:)\n+        complex, intent(out) :: y(:)\n+      end subroutine op2\n+    end interface\n+end subroutine one\n+subroutine two(ops,i,j)\n+    interface\n+      subroutine op(x, y)\n+        complex, intent(in)  :: x(:)\n+        complex, intent(out) :: y(:)\n+      end subroutine op\n+    end interface\n+    real :: i,j\n+end subroutine two\n+end module m\n+\n+module test\n+contains\n+subroutine bar()\n+  use m\n+  call foo(precond_prop,prop2)\n+end subroutine bar\n+  subroutine precond_prop(x, y)\n+    complex, intent(in)  :: x(:)\n+    complex, intent(out) :: y(:)\n+  end subroutine\n+  subroutine prop2(x, y)\n+    complex, intent(in)  :: x(:)\n+    complex, intent(out) :: y(:)\n+  end subroutine\n+end module test\n+\n+! { dg-final { cleanup-modules \"m\" } }\n+"}, {"sha": "c8c2a81c5c6aba05bc6a230f16888ce66f0467a6", "filename": "gcc/testsuite/gfortran.dg/proc_decl_7.f90", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8ad15a0a8d0666e21f4217d8ba004b33bcaf383d/gcc%2Ftestsuite%2Fgfortran.dg%2Fproc_decl_7.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8ad15a0a8d0666e21f4217d8ba004b33bcaf383d/gcc%2Ftestsuite%2Fgfortran.dg%2Fproc_decl_7.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fproc_decl_7.f90?ref=8ad15a0a8d0666e21f4217d8ba004b33bcaf383d", "patch": "@@ -16,6 +16,6 @@ end module m\n use m\n implicit none\n intrinsic cos\n-call sub(cos) ! { dg-error \"Type/rank mismatch in argument\" }\n+call sub(cos) ! { dg-error \"wrong number of arguments\" }\n end\n ! { dg-final { cleanup-modules \"m\" } }"}, {"sha": "2d3514ec896c80789ff081fff908cf6ab557f3d2", "filename": "gcc/testsuite/gfortran.dg/proc_decl_8.f90", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8ad15a0a8d0666e21f4217d8ba004b33bcaf383d/gcc%2Ftestsuite%2Fgfortran.dg%2Fproc_decl_8.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8ad15a0a8d0666e21f4217d8ba004b33bcaf383d/gcc%2Ftestsuite%2Fgfortran.dg%2Fproc_decl_8.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fproc_decl_8.f90?ref=8ad15a0a8d0666e21f4217d8ba004b33bcaf383d", "patch": "@@ -20,6 +20,6 @@ end module m\n implicit none\n EXTERNAL foo  ! interface is undefined\n procedure(cos) :: foo ! { dg-error \"Duplicate EXTERNAL attribute specified\" }\n-call sub(foo)         ! { dg-error \"Type/rank mismatch in argument\" }\n+call sub(foo)         ! { dg-error \"is not a function\" }\n end\n ! { dg-final { cleanup-modules \"m\" } }"}, {"sha": "469ebd448b10376ccceb3900a9fa5a5f14959b85", "filename": "gcc/testsuite/gfortran.dg/proc_ptr_11.f90", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8ad15a0a8d0666e21f4217d8ba004b33bcaf383d/gcc%2Ftestsuite%2Fgfortran.dg%2Fproc_ptr_11.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8ad15a0a8d0666e21f4217d8ba004b33bcaf383d/gcc%2Ftestsuite%2Fgfortran.dg%2Fproc_ptr_11.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fproc_ptr_11.f90?ref=8ad15a0a8d0666e21f4217d8ba004b33bcaf383d", "patch": "@@ -27,7 +27,7 @@ function p3(x)\n     end function p3\n   end interface\n \n-  pptr => add   ! { dg-error \"Interfaces don't match\" }\n+  pptr => add   ! { dg-error \"is not a subroutine\" }\n \n   q => add\n \n@@ -40,11 +40,11 @@ end function p3\n   p2 => p1\n   p1 => p2\n \n-  p1 => abs   ! { dg-error \"Interfaces don't match\" }\n-  p2 => abs   ! { dg-error \"Interfaces don't match\" }\n+  p1 => abs   ! { dg-error \"Type/kind mismatch in return value\" }\n+  p2 => abs   ! { dg-error \"Type/kind mismatch in return value\" }\n \n   p3 => dsin\n-  p3 => sin   ! { dg-error \"Interfaces don't match\" }\n+  p3 => sin   ! { dg-error \"Type/kind mismatch in return value\" }\n \n   contains\n "}, {"sha": "57269b0ccf0673fdc51a77360639baee20a4cc1c", "filename": "gcc/testsuite/gfortran.dg/proc_ptr_15.f90", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8ad15a0a8d0666e21f4217d8ba004b33bcaf383d/gcc%2Ftestsuite%2Fgfortran.dg%2Fproc_ptr_15.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8ad15a0a8d0666e21f4217d8ba004b33bcaf383d/gcc%2Ftestsuite%2Fgfortran.dg%2Fproc_ptr_15.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fproc_ptr_15.f90?ref=8ad15a0a8d0666e21f4217d8ba004b33bcaf383d", "patch": "@@ -19,10 +19,10 @@\n p6 => p1\n \n ! invalid\n-p1 => iabs   ! { dg-error \"Interfaces don't match\" }\n-p1 => p2     ! { dg-error \"Interfaces don't match\" }\n-p1 => p5     ! { dg-error \"Interfaces don't match\" }\n-p6 => iabs   ! { dg-error \"Interfaces don't match\" }\n+p1 => iabs   ! { dg-error \"Type/kind mismatch in return value\" }\n+p1 => p2     ! { dg-error \"Type/kind mismatch in return value\" }\n+p1 => p5     ! { dg-error \"Type/kind mismatch in return value\" }\n+p6 => iabs   ! { dg-error \"Type/kind mismatch in return value\" }\n \n contains\n "}]}