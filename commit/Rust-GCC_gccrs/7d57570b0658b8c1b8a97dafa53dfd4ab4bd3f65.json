{"sha": "7d57570b0658b8c1b8a97dafa53dfd4ab4bd3f65", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2Q1NzU3MGIwNjU4YjhjMWI4YTk3ZGFmYTUzZGZkNGFiNGJkM2Y2NQ==", "commit": {"author": {"name": "Paul Thomas", "email": "pault@pc30.home", "date": "2020-03-28T19:11:35Z"}, "committer": {"name": "Paul Thomas", "email": "pault@pc30.home", "date": "2020-03-28T19:11:35Z"}, "message": "Patch for PR94246", "tree": {"sha": "c4a70e2bbf1b580b1441006603ec2832adaffae1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c4a70e2bbf1b580b1441006603ec2832adaffae1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7d57570b0658b8c1b8a97dafa53dfd4ab4bd3f65", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7d57570b0658b8c1b8a97dafa53dfd4ab4bd3f65", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7d57570b0658b8c1b8a97dafa53dfd4ab4bd3f65", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7d57570b0658b8c1b8a97dafa53dfd4ab4bd3f65/comments", "author": null, "committer": null, "parents": [{"sha": "3fb7f2fbd5f109786922deb5af8fd8dd594a7ba6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3fb7f2fbd5f109786922deb5af8fd8dd594a7ba6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3fb7f2fbd5f109786922deb5af8fd8dd594a7ba6"}], "stats": {"total": 150, "additions": 113, "deletions": 37}, "files": [{"sha": "217eef29ebac0d6f2028151d7967e4dd805191d6", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d57570b0658b8c1b8a97dafa53dfd4ab4bd3f65/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d57570b0658b8c1b8a97dafa53dfd4ab4bd3f65/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=7d57570b0658b8c1b8a97dafa53dfd4ab4bd3f65", "patch": "@@ -1,3 +1,11 @@\n+2020-03-28  Paul Thomas  <pault@gcc.gnu.org>\n+\n+\tPR fortran/94246\n+\t* arith.c : Remove trailing white space.\n+\t* expr.c (scalarize_intrinsic_call): Remove the error checking.\n+\tMake a copy of the expression to be simplified and only replace\n+\tthe original if the simplification succeeds.\n+\n 2020-03-28  Tobias Burnus  <tobias@codesourcery.com>\n \n \tPR fortran/94348"}, {"sha": "422ef40c43110ec894a4a9cf40a02dcaed02405f", "filename": "gcc/fortran/arith.c", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d57570b0658b8c1b8a97dafa53dfd4ab4bd3f65/gcc%2Ffortran%2Farith.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d57570b0658b8c1b8a97dafa53dfd4ab4bd3f65/gcc%2Ffortran%2Farith.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Farith.c?ref=7d57570b0658b8c1b8a97dafa53dfd4ab4bd3f65", "patch": "@@ -524,7 +524,7 @@ gfc_range_check (gfc_expr *e)\n       if (rc == ARITH_UNDERFLOW)\n \tmpfr_set_ui (mpc_imagref (e->value.complex), 0, GFC_RND_MODE);\n       if (rc == ARITH_OVERFLOW)\n-\tmpfr_set_inf (mpc_imagref (e->value.complex), \n+\tmpfr_set_inf (mpc_imagref (e->value.complex),\n \t\t      mpfr_sgn (mpc_imagref (e->value.complex)));\n       if (rc == ARITH_NAN)\n \tmpfr_set_nan (mpc_imagref (e->value.complex));\n@@ -1100,7 +1100,7 @@ compare_complex (gfc_expr *op1, gfc_expr *op2)\n \n \n /* Given two constant strings and the inverse collating sequence, compare the\n-   strings.  We return -1 for a < b, 0 for a == b and 1 for a > b. \n+   strings.  We return -1 for a < b, 0 for a == b and 1 for a > b.\n    We use the processor's default collating sequence.  */\n \n int\n@@ -2176,7 +2176,7 @@ gfc_real2real (gfc_expr *src, int kind)\n   if ((warn_conversion || warn_conversion_extra) && src->ts.kind > kind)\n     {\n       int w = warn_conversion ? OPT_Wconversion : OPT_Wconversion_extra;\n-      \n+\n       /* Calculate the difference between the constant and the rounded\n \t value and check it against zero.  */\n \n@@ -2358,7 +2358,7 @@ gfc_complex2real (gfc_expr *src, int kind)\n \n       /* Calculate the difference between the real constant and the rounded\n \t value and check it against zero.  */\n-      \n+\n       if (kind > src->ts.kind\n \t  && wprecision_real_real (mpc_realref (src->value.complex),\n \t\t\t\t   src->ts.kind, kind))\n@@ -2502,7 +2502,7 @@ gfc_character2character (gfc_expr *src, int kind)\n   return result;\n }\n \n-/* Helper function to set the representation in a Hollerith conversion.  \n+/* Helper function to set the representation in a Hollerith conversion.\n    This assumes that the ts.type and ts.kind of the result have already\n    been set.  */\n "}, {"sha": "1106341df91a59f58db6f42e053144f3b94064ea", "filename": "gcc/fortran/expr.c", "status": "modified", "additions": 15, "deletions": 32, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d57570b0658b8c1b8a97dafa53dfd4ab4bd3f65/gcc%2Ffortran%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d57570b0658b8c1b8a97dafa53dfd4ab4bd3f65/gcc%2Ffortran%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fexpr.c?ref=7d57570b0658b8c1b8a97dafa53dfd4ab4bd3f65", "patch": "@@ -2057,18 +2057,6 @@ simplify_parameter_variable (gfc_expr *p, int type)\n     }\n   gfc_expression_rank (p);\n \n-  /* Is this an inquiry?  */\n-  bool inquiry = false;\n-  gfc_ref* ref = p->ref;\n-  while (ref)\n-    {\n-      if (ref->type == REF_INQUIRY)\n-\tbreak;\n-      ref = ref->next;\n-    }\n-  if (ref && ref->type == REF_INQUIRY)\n-    inquiry = ref->u.i == INQUIRY_LEN || ref->u.i == INQUIRY_KIND;\n-\n   if (gfc_is_size_zero_array (p))\n     {\n       if (p->expr_type == EXPR_ARRAY)\n@@ -2081,22 +2069,15 @@ simplify_parameter_variable (gfc_expr *p, int type)\n       e->value.constructor = NULL;\n       e->shape = gfc_copy_shape (p->shape, p->rank);\n       e->where = p->where;\n-      /* If %kind and %len are not used then we're done, otherwise\n-\t drop through for simplification.  */\n-      if (!inquiry)\n-\t{\n-\t  gfc_replace_expr (p, e);\n-\t  return true;\n-\t}\n+      gfc_replace_expr (p, e);\n+      return true;\n     }\n-  else\n-    {\n-      e = gfc_copy_expr (p->symtree->n.sym->value);\n-      if (e == NULL)\n-\treturn false;\n \n-      e->rank = p->rank;\n-    }\n+  e = gfc_copy_expr (p->symtree->n.sym->value);\n+  if (e == NULL)\n+    return false;\n+\n+  e->rank = p->rank;\n \n   if (e->ts.type == BT_CHARACTER && e->ts.u.cl == NULL)\n     e->ts.u.cl = gfc_new_charlen (gfc_current_ns, p->ts.u.cl);\n@@ -2145,6 +2126,7 @@ gfc_simplify_expr (gfc_expr *p, int type)\n   gfc_actual_arglist *ap;\n   gfc_intrinsic_sym* isym = NULL;\n \n+\n   if (p == NULL)\n     return true;\n \n@@ -2314,9 +2296,8 @@ scalarize_intrinsic_call (gfc_expr *e, bool init_flag)\n   gfc_constructor_base ctor;\n   gfc_constructor *args[5] = {};  /* Avoid uninitialized warnings.  */\n   gfc_constructor *ci, *new_ctor;\n-  gfc_expr *expr, *old;\n+  gfc_expr *expr, *old, *p;\n   int n, i, rank[5], array_arg;\n-  int errors = 0;\n \n   if (e == NULL)\n     return false;\n@@ -2384,8 +2365,6 @@ scalarize_intrinsic_call (gfc_expr *e, bool init_flag)\n       n++;\n     }\n \n-  gfc_get_errors (NULL, &errors);\n-\n   /* Using the array argument as the master, step through the array\n      calling the function for each element and advancing the array\n      constructors together.  */\n@@ -2419,8 +2398,12 @@ scalarize_intrinsic_call (gfc_expr *e, bool init_flag)\n       /* Simplify the function calls.  If the simplification fails, the\n \t error will be flagged up down-stream or the library will deal\n \t with it.  */\n-      if (errors == 0)\n-\tgfc_simplify_expr (new_ctor->expr, 0);\n+      p = gfc_copy_expr (new_ctor->expr);\n+\n+      if (!gfc_simplify_expr (p, init_flag))\n+\tgfc_free_expr (p);\n+      else\n+\tgfc_replace_expr (new_ctor->expr, p);\n \n       for (i = 0; i < n; i++)\n \tif (args[i])"}, {"sha": "72d2db439595057a1b35c25c1fd3e1bd7aed41ec", "filename": "gcc/testsuite/gfortran.dg/bessel_5_redux.f90", "status": "added", "additions": 85, "deletions": 0, "changes": 85, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d57570b0658b8c1b8a97dafa53dfd4ab4bd3f65/gcc%2Ftestsuite%2Fgfortran.dg%2Fbessel_5_redux.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d57570b0658b8c1b8a97dafa53dfd4ab4bd3f65/gcc%2Ftestsuite%2Fgfortran.dg%2Fbessel_5_redux.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fbessel_5_redux.f90?ref=7d57570b0658b8c1b8a97dafa53dfd4ab4bd3f65", "patch": "@@ -0,0 +1,85 @@\n+! { dg-do compile }\n+! { dg-options \"-Wall\" }\n+!\n+! Check fix for PR94246 in which the errors in line 63 caused a segfault\n+! because the cleanup was not done correctly without the -fno-range-check option.\n+!\n+! This is a copy of bessel_5.f90 with the error messages added.\n+!\n+! -Wall has been specified to disabled -pedantic, which warns about the\n+! negative order (GNU extension) to the order of the Bessel functions of\n+! first and second kind.\n+!\n+\n+implicit none\n+integer :: i\n+\n+\n+! Difference to mpfr_jn <= 1 epsilon\n+\n+if (any (abs (BESSEL_JN(2, 5, 2.457) - [(BESSEL_JN(i, 2.457), i = 2, 5)]) &\n+          > epsilon(0.0))) then\n+  print *, 'FAIL 1'\n+  STOP 1\n+end if\n+\n+\n+! Difference to mpfr_yn <= 4 epsilon\n+\n+if (any (abs (BESSEL_YN(2, 5, 2.457) - [(BESSEL_YN(i, 2.457), i = 2, 5)]) &\n+         > epsilon(0.0)*4)) then\n+  STOP 2\n+end if\n+\n+\n+! Difference to mpfr_jn <= 1 epsilon\n+\n+if (any (abs (BESSEL_JN(0, 10, 4.457) &\n+              - [ (BESSEL_JN(i, 4.457), i = 0, 10) ]) &\n+         > epsilon(0.0))) then\n+  STOP 3\n+end if\n+\n+\n+! Difference to mpfr_yn <= 192 epsilon\n+\n+if (any (abs (BESSEL_YN(0, 10, 4.457) &\n+              - [ (BESSEL_YN(i, 4.457), i = 0, 10) ]) &\n+         > epsilon(0.0)*192)) then\n+  STOP 4\n+end if\n+\n+\n+! Difference to mpfr_jn: None.  (Special case: X = 0.0)\n+\n+if (any (BESSEL_JN(0, 10, 0.0) /= [ (BESSEL_JN(i, 0.0), i = 0, 10) ])) &\n+then\n+  STOP 5\n+end if\n+\n+\n+! Difference to mpfr_yn: None.  (Special case: X = 0.0)\n+\n+if (any (BESSEL_YN(0, 10, 0.0) /= [ (BESSEL_YN(i, 0.0), i = 0, 10) ])) & ! { dg-error \"overflows|-INF\" }\n+then\n+  STOP 6\n+end if\n+\n+\n+! Difference to mpfr_jn <= 1 epsilon\n+\n+if (any (abs (BESSEL_JN(0, 10, 1.0) &\n+              - [ (BESSEL_JN(i, 1.0), i = 0, 10) ]) &\n+         > epsilon(0.0)*1)) then\n+ STOP 7\n+end if\n+\n+! Difference to mpfr_yn <= 32 epsilon\n+\n+if (any (abs (BESSEL_YN(0, 10, 1.0) &\n+              - [ (BESSEL_YN(i, 1.0), i = 0, 10) ]) &\n+         > epsilon(0.0)*32)) then\n+  STOP 8\n+end if\n+\n+end"}]}