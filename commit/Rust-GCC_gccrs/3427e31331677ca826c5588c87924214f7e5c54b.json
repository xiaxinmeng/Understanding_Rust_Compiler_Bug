{"sha": "3427e31331677ca826c5588c87924214f7e5c54b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzQyN2UzMTMzMTY3N2NhODI2YzU1ODhjODc5MjQyMTRmN2U1YzU0Yg==", "commit": {"author": {"name": "Ville Voutilainen", "email": "ville.voutilainen@gmail.com", "date": "2020-10-09T17:47:01Z"}, "committer": {"name": "Ville Voutilainen", "email": "ville.voutilainen@gmail.com", "date": "2020-10-09T17:48:08Z"}, "message": "libstdc++: Diagnose visitors with different return types [PR95904]\n\nlibstdc++-v3/ChangeLog:\n\n\tPR libstdc++/95904\n\t* include/std/variant (__deduce_visit_result): Add a nested ::type.\n\t(__gen_vtable_impl</*base case*/>::_S_apply):\n\tCheck the visitor return type.\n\t(__same_types): New.\n\t(__check_visitor_result): Likewise.\n\t(__check_visitor_results): Likewise.\n\t(visit(_Visitor&&, _Variants&&...)): Use __check_visitor_results\n\tin case we're visiting just one variant.\n\t* testsuite/20_util/variant/visit_neg.cc: Adjust.", "tree": {"sha": "359b6e8b43c4860fa021c3035edc8bd86235775e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/359b6e8b43c4860fa021c3035edc8bd86235775e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3427e31331677ca826c5588c87924214f7e5c54b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3427e31331677ca826c5588c87924214f7e5c54b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3427e31331677ca826c5588c87924214f7e5c54b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3427e31331677ca826c5588c87924214f7e5c54b/comments", "author": {"login": "villevoutilainen", "id": 963599, "node_id": "MDQ6VXNlcjk2MzU5OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/963599?v=4", "gravatar_id": "", "url": "https://api.github.com/users/villevoutilainen", "html_url": "https://github.com/villevoutilainen", "followers_url": "https://api.github.com/users/villevoutilainen/followers", "following_url": "https://api.github.com/users/villevoutilainen/following{/other_user}", "gists_url": "https://api.github.com/users/villevoutilainen/gists{/gist_id}", "starred_url": "https://api.github.com/users/villevoutilainen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/villevoutilainen/subscriptions", "organizations_url": "https://api.github.com/users/villevoutilainen/orgs", "repos_url": "https://api.github.com/users/villevoutilainen/repos", "events_url": "https://api.github.com/users/villevoutilainen/events{/privacy}", "received_events_url": "https://api.github.com/users/villevoutilainen/received_events", "type": "User", "site_admin": false}, "committer": {"login": "villevoutilainen", "id": 963599, "node_id": "MDQ6VXNlcjk2MzU5OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/963599?v=4", "gravatar_id": "", "url": "https://api.github.com/users/villevoutilainen", "html_url": "https://github.com/villevoutilainen", "followers_url": "https://api.github.com/users/villevoutilainen/followers", "following_url": "https://api.github.com/users/villevoutilainen/following{/other_user}", "gists_url": "https://api.github.com/users/villevoutilainen/gists{/gist_id}", "starred_url": "https://api.github.com/users/villevoutilainen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/villevoutilainen/subscriptions", "organizations_url": "https://api.github.com/users/villevoutilainen/orgs", "repos_url": "https://api.github.com/users/villevoutilainen/repos", "events_url": "https://api.github.com/users/villevoutilainen/events{/privacy}", "received_events_url": "https://api.github.com/users/villevoutilainen/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3ee44d4c518d61c6bbf75fcf280edc6ce5326ce0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3ee44d4c518d61c6bbf75fcf280edc6ce5326ce0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3ee44d4c518d61c6bbf75fcf280edc6ce5326ce0"}], "stats": {"total": 69, "additions": 64, "deletions": 5}, "files": [{"sha": "b32e564fd41c1bafb9f8667b575a043eed72f941", "filename": "libstdc++-v3/include/std/variant", "status": "modified", "additions": 63, "deletions": 4, "changes": 67, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3427e31331677ca826c5588c87924214f7e5c54b/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fvariant", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3427e31331677ca826c5588c87924214f7e5c54b/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fvariant", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fvariant?ref=3427e31331677ca826c5588c87924214f7e5c54b", "patch": "@@ -182,7 +182,7 @@ namespace __variant\n   // used for raw visitation with indices passed in\n   struct __variant_idx_cookie { using type = __variant_idx_cookie; };\n   // Used to enable deduction (and same-type checking) for std::visit:\n-  template<typename> struct __deduce_visit_result { };\n+  template<typename _Tp> struct __deduce_visit_result { using type = _Tp; };\n \n   // Visit variants that might be valueless.\n   template<typename _Visitor, typename... _Variants>\n@@ -1017,7 +1017,26 @@ namespace __variant\n \n       static constexpr auto\n       _S_apply()\n-      { return _Array_type{&__visit_invoke}; }\n+      {\n+\tif constexpr (_Array_type::__result_is_deduced::value)\n+\t  {\n+\t    constexpr bool __visit_ret_type_mismatch =\n+\t      !is_same_v<typename _Result_type::type,\n+\t\t\t decltype(__visit_invoke(std::declval<_Visitor>(),\n+\t\t\t\t    std::declval<_Variants>()...))>;\n+\t    if constexpr (__visit_ret_type_mismatch)\n+\t      {\n+\t\tstatic_assert(!__visit_ret_type_mismatch,\n+\t\t  \"std::visit requires the visitor to have the same \"\n+\t\t  \"return type for all alternatives of a variant\");\n+\t\treturn __nonesuch{};\n+\t      }\n+\t    else\n+\t      return _Array_type{&__visit_invoke};\n+\t  }\n+\telse\n+\t  return _Array_type{&__visit_invoke};\n+      }\n     };\n \n   template<typename _Result_type, typename _Visitor, typename... _Variants>\n@@ -1692,6 +1711,26 @@ namespace __variant\n \t\t\t   std::forward<_Variants>(__variants)...);\n     }\n \n+  template<typename _Tp, typename... _Types>\n+     constexpr inline bool __same_types = (is_same_v<_Tp, _Types> && ...);\n+\n+  template <unsigned long int _Idx, typename _Visitor, typename _Variant>\n+    decltype(auto)\n+    __check_visitor_result(_Visitor&& __vis, _Variant&& __variant)\n+    {\n+      return std::__invoke(std::forward<_Visitor>(__vis),\n+\t\t\t   std::get<_Idx>(std::forward<_Variant>(__variant)));\n+    }\n+\n+  template <typename _Visitor, typename _Variant, unsigned long int... _Idxs>\n+    constexpr bool __check_visitor_results(std::index_sequence<_Idxs...>)\n+    {\n+      return __same_types<decltype(__check_visitor_result<_Idxs>(\n+\tstd::declval<_Visitor>(),\n+\tstd::declval<_Variant>()))...>;\n+    }\n+\n+\n   template<typename _Visitor, typename... _Variants>\n     constexpr decltype(auto)\n     visit(_Visitor&& __visitor, _Variants&&... __variants)\n@@ -1704,8 +1743,28 @@ namespace __variant\n \n       using _Tag = __detail::__variant::__deduce_visit_result<_Result_type>;\n \n-      return std::__do_visit<_Tag>(std::forward<_Visitor>(__visitor),\n-\t\t\t\t   std::forward<_Variants>(__variants)...);\n+      if constexpr (sizeof...(_Variants) == 1)\n+\t{\n+\t  constexpr bool __visit_rettypes_match =\n+\t    __check_visitor_results<_Visitor, _Variants...>(\n+\t      std::make_index_sequence<\n+\t        std::variant_size<remove_reference_t<_Variants>...>::value>());\n+\t  if constexpr (!__visit_rettypes_match)\n+\t    {\n+\t      static_assert(__visit_rettypes_match,\n+\t\t\t  \"std::visit requires the visitor to have the same \"\n+\t\t\t  \"return type for all alternatives of a variant\");\n+\t      return;\n+\t    }\n+\t  else\n+\t    return std::__do_visit<_Tag>(\n+\t      std::forward<_Visitor>(__visitor),\n+\t      std::forward<_Variants>(__variants)...);\n+\t}\n+      else\n+\treturn std::__do_visit<_Tag>(\n+\t  std::forward<_Visitor>(__visitor),\n+\t  std::forward<_Variants>(__variants)...);\n     }\n \n #if __cplusplus > 201703L"}, {"sha": "748eb21c1ad142eb28e8e198b66fa2d6e5ca3628", "filename": "libstdc++-v3/testsuite/20_util/variant/visit_neg.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3427e31331677ca826c5588c87924214f7e5c54b/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fvariant%2Fvisit_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3427e31331677ca826c5588c87924214f7e5c54b/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fvariant%2Fvisit_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fvariant%2Fvisit_neg.cc?ref=3427e31331677ca826c5588c87924214f7e5c54b", "patch": "@@ -21,7 +21,7 @@\n #include <variant>\n #include <testsuite_hooks.h>\n \n-// { dg-error \"invalid conversion\" \"\" { target *-*-* } 0 }\n+// { dg-error \"same return type for all alternatives\" \"\" { target *-*-* } 0 }\n // { dg-prune-output \"in 'constexpr' expansion\" }\n \n void"}]}