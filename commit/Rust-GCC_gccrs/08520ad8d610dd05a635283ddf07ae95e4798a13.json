{"sha": "08520ad8d610dd05a635283ddf07ae95e4798a13", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDg1MjBhZDhkNjEwZGQwNWE2MzUyODNkZGYwN2FlOTVlNDc5OGExMw==", "commit": {"author": {"name": "Jeffrey A Law", "email": "law@cygnus.com", "date": "2000-01-13T05:41:44Z"}, "committer": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "2000-01-13T05:41:44Z"}, "message": "flow.c (split_edge): If we have to insert a new jump, make sure to associate it with a basic block.\n\n\t* flow.c (split_edge): If we have to insert a new jump, make\n\tsure to associate it with a basic block.\n\n\t* flow.c (commit_one_edge_insertion): A block with one successor\n\tcan end in a JUMP_INSN that is not a simplejump.\n\nFrom-SVN: r31380", "tree": {"sha": "3e1c2be8dccc28121be86f99fe0e7b0ec499deae", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3e1c2be8dccc28121be86f99fe0e7b0ec499deae"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/08520ad8d610dd05a635283ddf07ae95e4798a13", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/08520ad8d610dd05a635283ddf07ae95e4798a13", "html_url": "https://github.com/Rust-GCC/gccrs/commit/08520ad8d610dd05a635283ddf07ae95e4798a13", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/08520ad8d610dd05a635283ddf07ae95e4798a13/comments", "author": null, "committer": null, "parents": [{"sha": "499bf451e340a680eddec460999eb2857b56d9a2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/499bf451e340a680eddec460999eb2857b56d9a2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/499bf451e340a680eddec460999eb2857b56d9a2"}], "stats": {"total": 20, "additions": 15, "deletions": 5}, "files": [{"sha": "8e33b5635113ee3069d641d684b8e4f85be2e4fd", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/08520ad8d610dd05a635283ddf07ae95e4798a13/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/08520ad8d610dd05a635283ddf07ae95e4798a13/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=08520ad8d610dd05a635283ddf07ae95e4798a13", "patch": "@@ -1,3 +1,11 @@\n+Wed Jan 12 22:34:00 2000  Jeffrey A Law  (law@cygnus.com)\n+\n+\t* flow.c (split_edge): If we have to insert a new jump, make\n+\tsure to associate it with a basic block.\n+\n+\t* flow.c (commit_one_edge_insertion): A block with one successor\n+\tcan end in a JUMP_INSN that is not a simplejump.\n+\n 2000-01-12  Robert Lipe  <robertl@sco.com>\n \n \t* i386/sco5.h (INIT_SECTION_ASM_OP_COFF): Rename section to \"ctor\"."}, {"sha": "93677cfe341b1c9656a50f7574c210dc28b722f3", "filename": "gcc/flow.c", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/08520ad8d610dd05a635283ddf07ae95e4798a13/gcc%2Fflow.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/08520ad8d610dd05a635283ddf07ae95e4798a13/gcc%2Fflow.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fflow.c?ref=08520ad8d610dd05a635283ddf07ae95e4798a13", "patch": "@@ -1387,6 +1387,7 @@ split_edge (edge_in)\n \t  pos = emit_jump_insn_after (gen_jump (old_succ->head),\n \t\t\t\t      jump_block->end);\n \t  jump_block->end = pos;\n+\t  set_block_for_insn (pos, jump_block);\n \t  emit_barrier_after (pos);\n \n \t  /* ... let jump know that label is in use, ...  */\n@@ -1580,13 +1581,14 @@ commit_one_edge_insertion (e)\n \t   && e->src != ENTRY_BLOCK_PTR)\n     {\n       bb = e->src;\n+      /* It is possible to have a non-simple jump here.  Consider a target\n+\t where some forms of unconditional jumps clobber a register.  This\n+\t happens on the fr30 for example. \n+\n+\t We know this block has a single successor, so we can just emit\n+\t the queued insns before the jump.  */\n       if (GET_CODE (bb->end) == JUMP_INSN)\n \t{\n-\t  /* ??? Is it possible to wind up with non-simple jumps?  Perhaps\n-\t     a jump with delay slots already filled?  */\n-\t  if (! simplejump_p (bb->end))\n-\t    abort ();\n-\n \t  before = bb->end;\n \t}\n       else"}]}