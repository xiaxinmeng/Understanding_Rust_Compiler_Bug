{"sha": "d1b817796193461ca8a39cc93c9662fd9fb3c5c7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDFiODE3Nzk2MTkzNDYxY2E4YTM5Y2M5M2M5NjYyZmQ5ZmIzYzVjNw==", "commit": {"author": {"name": "Geoff Keating", "email": "geoffk@cygnus.com", "date": "2000-01-27T20:46:26Z"}, "committer": {"name": "Geoffrey Keating", "email": "geoffk@gcc.gnu.org", "date": "2000-01-27T20:46:26Z"}, "message": "emit-rtl.c (unshare_all_rtl): Unshare virtual parameters too.\n\n* emit-rtl.c (unshare_all_rtl): Unshare virtual parameters too.\nUse unshare_all_rtl_1.\n(unshare_all_rtl_again): New function.\n(unshare_all_rtl_1): New function split out of unshare_all_rtl.\n\n* function.c (purge_addressof_1): Use unshare_all_rtl_again\nrather than resetting the 'used' flags ourself.\n\n* toplev.c (rest_of_compilation): Add current_function_decl\nto the unshare_all_rtl call.\n* tree.h: Prototype unshare_all_rtl.\n* rtl.h: Prototype unshare_all_rtl_again here.\n\nFrom-SVN: r31651", "tree": {"sha": "a362d5dd6e2bf7c8fcd3a6b2b1e94b123120c60d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a362d5dd6e2bf7c8fcd3a6b2b1e94b123120c60d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d1b817796193461ca8a39cc93c9662fd9fb3c5c7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d1b817796193461ca8a39cc93c9662fd9fb3c5c7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d1b817796193461ca8a39cc93c9662fd9fb3c5c7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d1b817796193461ca8a39cc93c9662fd9fb3c5c7/comments", "author": null, "committer": null, "parents": [{"sha": "3bc9f12b33e84053451bac3b5f817526c3792627", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3bc9f12b33e84053451bac3b5f817526c3792627", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3bc9f12b33e84053451bac3b5f817526c3792627"}], "stats": {"total": 95, "additions": 71, "deletions": 24}, "files": [{"sha": "7d1a9af4d68e38fdc4d867258d906d62d31c7546", "filename": "gcc/ChangeLog", "status": "modified", "additions": 16, "deletions": 1, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d1b817796193461ca8a39cc93c9662fd9fb3c5c7/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d1b817796193461ca8a39cc93c9662fd9fb3c5c7/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=d1b817796193461ca8a39cc93c9662fd9fb3c5c7", "patch": "@@ -1,4 +1,19 @@\n-2000-01-24  Geoffrey Keating  <geoffk@cygnus.com>\n+2000-01-27  Geoffrey Keating  <geoffk@cygnus.com>\n+\n+\t* emit-rtl.c (unshare_all_rtl): Unshare virtual parameters too.\n+\tUse unshare_all_rtl_1.\n+\t(unshare_all_rtl_again): New function.\n+\t(unshare_all_rtl_1): New function split out of unshare_all_rtl.\n+\n+\t* function.c (purge_addressof_1): Use unshare_all_rtl_again\n+\trather than resetting the 'used' flags ourself.\n+\n+\t* toplev.c (rest_of_compilation): Add current_function_decl\n+\tto the unshare_all_rtl call.\n+\t* tree.h: Prototype unshare_all_rtl.\n+\t* rtl.h: Prototype unshare_all_rtl_again here.\n+\n+2000-01-27  Geoffrey Keating  <geoffk@cygnus.com>\n \n \t* genoutput.c (output_prologue): Include ggc.h in generated\n \tfiles."}, {"sha": "7a40b82238b65c18e0f38d7f84fd75ff8a5e53d7", "filename": "gcc/emit-rtl.c", "status": "modified", "additions": 51, "deletions": 14, "changes": 65, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d1b817796193461ca8a39cc93c9662fd9fb3c5c7/gcc%2Femit-rtl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d1b817796193461ca8a39cc93c9662fd9fb3c5c7/gcc%2Femit-rtl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Femit-rtl.c?ref=d1b817796193461ca8a39cc93c9662fd9fb3c5c7", "patch": "@@ -170,6 +170,7 @@ static rtx make_jump_insn_raw\t\tPARAMS ((rtx));\n static rtx make_call_insn_raw\t\tPARAMS ((rtx));\n static rtx find_line_note\t\tPARAMS ((rtx));\n static void mark_sequence_stack         PARAMS ((struct sequence_stack *));\n+static void unshare_all_rtl_1\t\tPARAMS ((rtx));\n \f\n /* There are some RTL codes that require special attention; the generation\n    functions do the raw handling.  If you add to this list, modify\n@@ -1610,34 +1611,70 @@ free_emit_status (f)\n   f->emit = NULL;\n }\n \f\n-/* Go through all the RTL insn bodies and copy any invalid shared structure.\n-   It does not work to do this twice, because the mark bits set here\n-   are not cleared afterwards.  */\n+/* Go through all the RTL insn bodies and copy any invalid shared \n+   structure.  This routine should only be called once.  */\n \n void\n-unshare_all_rtl (insn)\n-     register rtx insn;\n+unshare_all_rtl (fndecl, insn)\n+     tree fndecl;\n+     rtx insn;\n {\n-  for (; insn; insn = NEXT_INSN (insn))\n-    if (GET_CODE (insn) == INSN || GET_CODE (insn) == JUMP_INSN\n-\t|| GET_CODE (insn) == CALL_INSN)\n-      {\n-\tPATTERN (insn) = copy_rtx_if_shared (PATTERN (insn));\n-\tREG_NOTES (insn) = copy_rtx_if_shared (REG_NOTES (insn));\n-\tLOG_LINKS (insn) = copy_rtx_if_shared (LOG_LINKS (insn));\n-      }\n+  tree decl;\n \n+  /* Make sure that virtual parameters are not shared.  */\n+  for (decl = DECL_ARGUMENTS (fndecl); decl; decl = TREE_CHAIN (decl))\n+    {\n+      copy_rtx_if_shared (DECL_RTL (decl));\n+    }\n+\n+  /* Unshare just about everything else.  */\n+  unshare_all_rtl_1 (insn);\n+  \n   /* Make sure the addresses of stack slots found outside the insn chain\n      (such as, in DECL_RTL of a variable) are not shared\n      with the insn chain.\n \n      This special care is necessary when the stack slot MEM does not\n      actually appear in the insn chain.  If it does appear, its address\n      is unshared from all else at that point.  */\n-\n   copy_rtx_if_shared (stack_slot_list);\n }\n \n+/* Go through all the RTL insn bodies and copy any invalid shared \n+   structure, again.  This is a fairly expensive thing to do so it\n+   should be done sparingly.  */\n+\n+void\n+unshare_all_rtl_again (insn)\n+     rtx insn;\n+{\n+  rtx p;\n+  for (p = insn; p; p = NEXT_INSN (p))\n+    if (GET_RTX_CLASS (GET_CODE (p)) == 'i')\n+      {\n+\treset_used_flags (PATTERN (p));\n+\treset_used_flags (REG_NOTES (p));\n+\treset_used_flags (LOG_LINKS (p));\n+      }\n+  unshare_all_rtl_1 (insn);\n+}\n+\n+/* Go through all the RTL insn bodies and copy any invalid shared structure.\n+   Assumes the mark bits are cleared at entry.  */\n+\n+static void\n+unshare_all_rtl_1 (insn)\n+     rtx insn;\n+{\n+  for (; insn; insn = NEXT_INSN (insn))\n+    if (GET_RTX_CLASS (GET_CODE (insn)) == 'i')\n+      {\n+\tPATTERN (insn) = copy_rtx_if_shared (PATTERN (insn));\n+\tREG_NOTES (insn) = copy_rtx_if_shared (REG_NOTES (insn));\n+\tLOG_LINKS (insn) = copy_rtx_if_shared (LOG_LINKS (insn));\n+      }\n+}\n+\n /* Mark ORIG as in use, and return a copy of it if it was already in use.\n    Recursively does the same for subexpressions.  */\n "}, {"sha": "8339208b3a853a438cde56e612b891ebb6062c2b", "filename": "gcc/function.c", "status": "modified", "additions": 1, "deletions": 7, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d1b817796193461ca8a39cc93c9662fd9fb3c5c7/gcc%2Ffunction.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d1b817796193461ca8a39cc93c9662fd9fb3c5c7/gcc%2Ffunction.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffunction.c?ref=d1b817796193461ca8a39cc93c9662fd9fb3c5c7", "patch": "@@ -2972,13 +2972,7 @@ purge_addressof_1 (loc, insn, force, store, ht)\n \n \t\t  /* Make sure to unshare any shared rtl that store_bit_field\n \t\t     might have created.  */\n-\t\t  for (p = get_insns(); p; p = NEXT_INSN (p))\n-\t\t    {\n-\t\t      reset_used_flags (PATTERN (p));\n-\t\t      reset_used_flags (REG_NOTES (p));\n-\t\t      reset_used_flags (LOG_LINKS (p));\n-\t\t    }\n-\t\t  unshare_all_rtl (get_insns ());\n+\t\t  unshare_all_rtl_again (get_insns ());\n \n \t\t  seq = gen_sequence ();\n \t\t  end_sequence ();"}, {"sha": "0a4652aaad5bdb2c9a4336142be7df7c73eae834", "filename": "gcc/rtl.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d1b817796193461ca8a39cc93c9662fd9fb3c5c7/gcc%2Frtl.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d1b817796193461ca8a39cc93c9662fd9fb3c5c7/gcc%2Frtl.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frtl.h?ref=d1b817796193461ca8a39cc93c9662fd9fb3c5c7", "patch": "@@ -1445,7 +1445,7 @@ extern void reverse_comparison\t\t\tPARAMS ((rtx));\n extern void set_new_first_and_last_insn\t\tPARAMS ((rtx, rtx));\n extern void set_new_first_and_last_label_num\tPARAMS ((int, int));\n extern void set_new_last_label_num\t\tPARAMS ((int));\n-extern void unshare_all_rtl\t\t\tPARAMS ((rtx));\n+extern void unshare_all_rtl_again\t\tPARAMS ((rtx));\n extern void set_last_insn\t\t\tPARAMS ((rtx));\n extern void link_cc0_insns\t\t\tPARAMS ((rtx));\n extern void add_insn\t\t\t\tPARAMS ((rtx));"}, {"sha": "189c3e71353c34659e428a2769476d2f59c56bc7", "filename": "gcc/toplev.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d1b817796193461ca8a39cc93c9662fd9fb3c5c7/gcc%2Ftoplev.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d1b817796193461ca8a39cc93c9662fd9fb3c5c7/gcc%2Ftoplev.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftoplev.c?ref=d1b817796193461ca8a39cc93c9662fd9fb3c5c7", "patch": "@@ -2944,7 +2944,7 @@ rest_of_compilation (decl)\n \n   /* Copy any shared structure that should not be shared.  */\n \n-  unshare_all_rtl (insns);\n+  unshare_all_rtl (current_function_decl, insns);\n \n   init_EXPR_INSN_LIST_cache ();\n "}, {"sha": "99f4d2cb75452b209e7853714a5997b7f440b3a6", "filename": "gcc/tree.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d1b817796193461ca8a39cc93c9662fd9fb3c5c7/gcc%2Ftree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d1b817796193461ca8a39cc93c9662fd9fb3c5c7/gcc%2Ftree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.h?ref=d1b817796193461ca8a39cc93c9662fd9fb3c5c7", "patch": "@@ -2392,6 +2392,7 @@ extern tree reorder_blocks\t\tPARAMS ((tree,\n \t\t\t\t\t\tstruct rtx_def *));\n extern void free_temps_for_rtl_expr\tPARAMS ((tree));\n extern void instantiate_virtual_regs\tPARAMS ((tree, struct rtx_def *));\n+extern void unshare_all_rtl\t\tPARAMS ((tree, struct rtx_def *));\n extern int max_parm_reg_num\t\tPARAMS ((void));\n extern void push_function_context\tPARAMS ((void));\n extern void pop_function_context\tPARAMS ((void));"}]}