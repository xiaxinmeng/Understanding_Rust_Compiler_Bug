{"sha": "7a22d8a764418265680a6bb9a9aec31e984eb015", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2EyMmQ4YTc2NDQxODI2NTY4MGE2YmI5YTlhZWMzMWU5ODRlYjAxNQ==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2021-06-22T07:24:24Z"}, "committer": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2021-06-22T09:01:17Z"}, "message": "tree-optimization/101158 - adjust SLP call matching sequence\n\nThis moves the check for same operands after verifying we're\nfacing compatible calls.\n\n2021-06-22  Richard Biener  <rguenther@suse.de>\n\n\tPR tree-optimization/101158\n\t* tree-vect-slp.c (vect_build_slp_tree_1): Move same operand\n\tchecking after checking for matching operation.\n\n\t* gfortran.dg/pr101158.f90: New testcase.", "tree": {"sha": "7e3d9917951b06a860dc4298e8e829bfb1267fd3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7e3d9917951b06a860dc4298e8e829bfb1267fd3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7a22d8a764418265680a6bb9a9aec31e984eb015", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7a22d8a764418265680a6bb9a9aec31e984eb015", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7a22d8a764418265680a6bb9a9aec31e984eb015", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7a22d8a764418265680a6bb9a9aec31e984eb015/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a5b773d3f86dd4333696cab0fe3a6953d3db74a3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a5b773d3f86dd4333696cab0fe3a6953d3db74a3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a5b773d3f86dd4333696cab0fe3a6953d3db74a3"}], "stats": {"total": 56, "additions": 41, "deletions": 15}, "files": [{"sha": "9a4d9a2d7aecf8c2f1c1f96adc7a6c19f716e4af", "filename": "gcc/testsuite/gfortran.dg/pr101158.f90", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a22d8a764418265680a6bb9a9aec31e984eb015/gcc%2Ftestsuite%2Fgfortran.dg%2Fpr101158.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a22d8a764418265680a6bb9a9aec31e984eb015/gcc%2Ftestsuite%2Fgfortran.dg%2Fpr101158.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fpr101158.f90?ref=7a22d8a764418265680a6bb9a9aec31e984eb015", "patch": "@@ -0,0 +1,25 @@\n+! { dg-do compile }\n+! { dg-options \"-O1 -ftree-slp-vectorize -fwrapv\" }\n+! { dg-additional-options \"-march=armv8-a+sve\" { target aarch64-*-* } }\n+\n+subroutine sprpl5 (left)\n+  implicit none\n+\n+  integer :: left\n+  integer :: avail1, avail2, delx1, delx2, i2, ic\n+\n+  ic = left\n+  delx1 = ic / 2\n+  delx2 = delx1 + 1\n+  i2 = ic + delx2\n+  avail1 = i2\n+  avail2 = 1\n+\n+  do delx1 = 1, 2\n+     ic = left + nint (real (left) / 2)\n+     if (ic .ge. avail1) avail1 = ic + 1\n+\n+     i2 = ic + delx2\n+     if (i2 .le. avail2) avail2 = i2 + 1\n+  end do\n+end subroutine sprpl5"}, {"sha": "6c98acbe722f156fa2ade1b5874cedd9eccb615e", "filename": "gcc/tree-vect-slp.c", "status": "modified", "additions": 16, "deletions": 15, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a22d8a764418265680a6bb9a9aec31e984eb015/gcc%2Ftree-vect-slp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a22d8a764418265680a6bb9a9aec31e984eb015/gcc%2Ftree-vect-slp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-slp.c?ref=7a22d8a764418265680a6bb9a9aec31e984eb015", "patch": "@@ -1177,21 +1177,6 @@ vect_build_slp_tree_1 (vec_info *vinfo, unsigned char *swap,\n \t      continue;\n \t    }\n \n-\t  if (need_same_oprnds)\n-\t    {\n-\t      tree other_op1 = (call_stmt\n-\t\t\t\t? gimple_call_arg (call_stmt, 1)\n-\t\t\t\t: gimple_assign_rhs2 (stmt));\n-\t      if (!operand_equal_p (first_op1, other_op1, 0))\n-\t\t{\n-\t\t  if (dump_enabled_p ())\n-\t\t    dump_printf_loc (MSG_MISSED_OPTIMIZATION, vect_location,\n-\t\t\t\t     \"Build SLP failed: different shift \"\n-\t\t\t\t     \"arguments in %G\", stmt);\n-\t\t  /* Mismatch.  */\n-\t\t  continue;\n-\t\t}\n-\t    }\n \t  if (!load_p\n \t      && first_stmt_code == BIT_FIELD_REF\n \t      && (TREE_OPERAND (gimple_assign_rhs1 (first_stmt_info->stmt), 0)\n@@ -1231,6 +1216,22 @@ vect_build_slp_tree_1 (vec_info *vinfo, unsigned char *swap,\n \t      continue;\n \t    }\n \n+\t  if (need_same_oprnds)\n+\t    {\n+\t      tree other_op1 = (call_stmt\n+\t\t\t\t? gimple_call_arg (call_stmt, 1)\n+\t\t\t\t: gimple_assign_rhs2 (stmt));\n+\t      if (!operand_equal_p (first_op1, other_op1, 0))\n+\t\t{\n+\t\t  if (dump_enabled_p ())\n+\t\t    dump_printf_loc (MSG_MISSED_OPTIMIZATION, vect_location,\n+\t\t\t\t     \"Build SLP failed: different shift \"\n+\t\t\t\t     \"arguments in %G\", stmt);\n+\t\t  /* Mismatch.  */\n+\t\t  continue;\n+\t\t}\n+\t    }\n+\n \t  if (!types_compatible_p (vectype, *node_vectype))\n \t    {\n \t      if (dump_enabled_p ())"}]}