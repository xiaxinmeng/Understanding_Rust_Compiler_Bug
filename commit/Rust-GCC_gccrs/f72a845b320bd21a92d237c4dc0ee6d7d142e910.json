{"sha": "f72a845b320bd21a92d237c4dc0ee6d7d142e910", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjcyYTg0NWIzMjBiZDIxYTkyZDIzN2M0ZGMwZWU2ZDdkMTQyZTkxMA==", "commit": {"author": {"name": "Olivier Hainque", "email": "hainque@adacore.com", "date": "2015-01-06T09:49:00Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2015-01-06T09:49:00Z"}, "message": "decl.c (gnat_to_gnu_entity, [...]): When constructing a ref to variable...\n\n2015-01-06  Olivier Hainque  <hainque@adacore.com>\n        \n\t* gcc-interface/decl.c (gnat_to_gnu_entity, case E_Variable): When\n\tconstructing a ref to variable, update inner_const_flag from the\n\tvariable TREE_READONLY attribute.\n\t* gcc-interface/targtyps.c (WIDEST_HARDWARE_FP_SIZE): Remove default\n\tdefinition.\n\t(get_target_float_size): Remove.\n\t(get_target_double_size): Remove.\n\t(get_target_long_double_size): Remove.\n\nFrom-SVN: r219239", "tree": {"sha": "d849ed6560a6b24f0f05d8d225515ae1e45a4749", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d849ed6560a6b24f0f05d8d225515ae1e45a4749"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f72a845b320bd21a92d237c4dc0ee6d7d142e910", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f72a845b320bd21a92d237c4dc0ee6d7d142e910", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f72a845b320bd21a92d237c4dc0ee6d7d142e910", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f72a845b320bd21a92d237c4dc0ee6d7d142e910/comments", "author": {"login": "hainque", "id": 18735142, "node_id": "MDQ6VXNlcjE4NzM1MTQy", "avatar_url": "https://avatars.githubusercontent.com/u/18735142?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hainque", "html_url": "https://github.com/hainque", "followers_url": "https://api.github.com/users/hainque/followers", "following_url": "https://api.github.com/users/hainque/following{/other_user}", "gists_url": "https://api.github.com/users/hainque/gists{/gist_id}", "starred_url": "https://api.github.com/users/hainque/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hainque/subscriptions", "organizations_url": "https://api.github.com/users/hainque/orgs", "repos_url": "https://api.github.com/users/hainque/repos", "events_url": "https://api.github.com/users/hainque/events{/privacy}", "received_events_url": "https://api.github.com/users/hainque/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "07e188be3ba696461d3010c9d40e3ff156f7f4d0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/07e188be3ba696461d3010c9d40e3ff156f7f4d0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/07e188be3ba696461d3010c9d40e3ff156f7f4d0"}], "stats": {"total": 41, "additions": 13, "deletions": 28}, "files": [{"sha": "c6159e6b50114e9521fcf54d2a4e3b392473186d", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f72a845b320bd21a92d237c4dc0ee6d7d142e910/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f72a845b320bd21a92d237c4dc0ee6d7d142e910/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=f72a845b320bd21a92d237c4dc0ee6d7d142e910", "patch": "@@ -1,3 +1,14 @@\n+2015-01-06  Olivier Hainque  <hainque@adacore.com>\n+\n+        * gcc-interface/decl.c (gnat_to_gnu_entity, case E_Variable): When\n+        constructing a ref to variable, update inner_const_flag from the\n+        variable TREE_READONLY attribute.\n+        * gcc-interface/targtyps.c (WIDEST_HARDWARE_FP_SIZE): Remove default\n+        definition.\n+        (get_target_float_size): Remove.\n+        (get_target_double_size): Remove.\n+        (get_target_long_double_size): Remove.\n+\n 2015-01-06  Pascal Obry  <obry@adacore.com>\n \n \t* adaint.c (ProcListEvt): Set to NULL."}, {"sha": "b6df1ae79ef3bc87af147e4c58ca52dd1e0fa9a6", "filename": "gcc/ada/gcc-interface/decl.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f72a845b320bd21a92d237c4dc0ee6d7d142e910/gcc%2Fada%2Fgcc-interface%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f72a845b320bd21a92d237c4dc0ee6d7d142e910/gcc%2Fada%2Fgcc-interface%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2Fdecl.c?ref=f72a845b320bd21a92d237c4dc0ee6d7d142e910", "patch": "@@ -1415,6 +1415,7 @@ gnat_to_gnu_entity (Entity_Id gnat_entity, tree gnu_expr, int definition)\n \n \t\tgnu_size = NULL_TREE;\n \t\tused_by_ref = true;\n+\t\tinner_const_flag = TREE_READONLY (gnu_unc_var);\n \t\tconst_flag = true;\n \t      }\n "}, {"sha": "851d5f7e37451d0f8a47d46e76fc828d47be2eba", "filename": "gcc/ada/gcc-interface/targtyps.c", "status": "modified", "additions": 1, "deletions": 28, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f72a845b320bd21a92d237c4dc0ee6d7d142e910/gcc%2Fada%2Fgcc-interface%2Ftargtyps.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f72a845b320bd21a92d237c4dc0ee6d7d142e910/gcc%2Fada%2Fgcc-interface%2Ftargtyps.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2Ftargtyps.c?ref=f72a845b320bd21a92d237c4dc0ee6d7d142e910", "patch": "@@ -6,7 +6,7 @@\n  *                                                                          *\n  *                                  Body                                    *\n  *                                                                          *\n- *          Copyright (C) 1992-2012, Free Software Foundation, Inc.         *\n+ *          Copyright (C) 1992-2014, Free Software Foundation, Inc.         *\n  *                                                                          *\n  * GNAT is free software;  you can  redistribute it  and/or modify it under *\n  * terms of the  GNU General Public License as published  by the Free Soft- *\n@@ -54,15 +54,6 @@\n #define ADA_LONG_TYPE_SIZE LONG_TYPE_SIZE\n #endif\n \n-/* If we don't have a target definition of WIDEST_HARDWARE_FP_SIZE, assume\n-   DOUBLE_TYPE_SIZE.  We used to default to LONG_DOUBLE_TYPE_SIZE, which now\n-   most often maps 128 bits implemented with very inefficient software\n-   emulations so is incorrect as a hardware size estimate.  */\n-\n-#ifndef WIDEST_HARDWARE_FP_SIZE\n-#define WIDEST_HARDWARE_FP_SIZE DOUBLE_TYPE_SIZE\n-#endif\n-\n /* The following provide a functional interface for the front end Ada code\n    to determine the sizes that are used for various C types. */\n \n@@ -115,24 +106,6 @@ get_target_long_long_size (void)\n   return LONG_LONG_TYPE_SIZE;\n }\n \n-Pos\n-get_target_float_size (void)\n-{\n-  return fp_prec_to_size (FLOAT_TYPE_SIZE);\n-}\n-\n-Pos\n-get_target_double_size (void)\n-{\n-  return fp_prec_to_size (DOUBLE_TYPE_SIZE);\n-}\n-\n-Pos\n-get_target_long_double_size (void)\n-{\n-  return fp_prec_to_size (WIDEST_HARDWARE_FP_SIZE);\n-}\n-\n Pos\n get_target_pointer_size (void)\n {"}]}