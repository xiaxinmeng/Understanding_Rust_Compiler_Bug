{"sha": "80f2bb6e3af5a9ae2576f86258cdafa7fe1ff384", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODBmMmJiNmUzYWY1YTlhZTI1NzZmODYyNThjZGFmYTdmZTFmZjM4NA==", "commit": {"author": {"name": "Paul Thomas", "email": "pault@gcc.gnu.org", "date": "2006-09-18T06:24:54Z"}, "committer": {"name": "Paul Thomas", "email": "pault@gcc.gnu.org", "date": "2006-09-18T06:24:54Z"}, "message": "re PR fortran/29060 (spread causes ICE in gfc_trans_array_constructor)\n\n2006-09-18  Paul Thomas  <pault@gcc.gnu.org>\n\n\tPR fortran/29060\n\t* iresolve.c (resolve_spread): Build shape for result if the\n\tsource shape is available and dim and ncopies are constants.\n\n\tPR fortran/28817\n\tPR fortran/21918\n\t* trans-decl.c (generate_local_decl): Change from 'warning' to\n\t'gfc_warning' to have line numbers correctly reported.\n\n2006-09-18  Paul Thomas  <pault@gcc.gnu.org>\n\n\tPR fortran/29060\n\t* gfortran.dg/spread_shape_1.f90: New test.\n\nFrom-SVN: r117014", "tree": {"sha": "795e77314928c5d566f1e60e6c2032bc761cf1e5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/795e77314928c5d566f1e60e6c2032bc761cf1e5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/80f2bb6e3af5a9ae2576f86258cdafa7fe1ff384", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/80f2bb6e3af5a9ae2576f86258cdafa7fe1ff384", "html_url": "https://github.com/Rust-GCC/gccrs/commit/80f2bb6e3af5a9ae2576f86258cdafa7fe1ff384", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/80f2bb6e3af5a9ae2576f86258cdafa7fe1ff384/comments", "author": null, "committer": null, "parents": [{"sha": "9adc3dc789b21d98f700141801cafec29489d92c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9adc3dc789b21d98f700141801cafec29489d92c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9adc3dc789b21d98f700141801cafec29489d92c"}], "stats": {"total": 61, "additions": 59, "deletions": 2}, "files": [{"sha": "04b8c8e79cadf1b68d4d6d3b7770250af086985c", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/80f2bb6e3af5a9ae2576f86258cdafa7fe1ff384/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/80f2bb6e3af5a9ae2576f86258cdafa7fe1ff384/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=80f2bb6e3af5a9ae2576f86258cdafa7fe1ff384", "patch": "@@ -1,3 +1,16 @@\n+2006-09-18  Paul Thomas  <pault@gcc.gnu.org>\n+\n+\tPR fortran/29060\n+\t* iresolve.c (resolve_spread): Build shape for result if the\n+\tsource shape is available and dim and ncopies are constants.\n+\n+2006-09-18  Tobias Schl\ufffd\ufffdter  <tobias.schlueter@physik.uni-muenchen.de>\n+\n+\tPR fortran/28817\n+\tPR fortran/21918\n+\t* trans-decl.c (generate_local_decl): Change from 'warning' to\n+\t'gfc_warning' to have line numbers correctly reported.\n+\n 2006-09-15  Paul Thomas  <pault@gcc.gnu.org>\n \n \tPR fortran/29051"}, {"sha": "c72bf9f8b3f8985b456ebfdbc891ca1e32bf9ce0", "filename": "gcc/fortran/iresolve.c", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/80f2bb6e3af5a9ae2576f86258cdafa7fe1ff384/gcc%2Ffortran%2Firesolve.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/80f2bb6e3af5a9ae2576f86258cdafa7fe1ff384/gcc%2Ffortran%2Firesolve.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Firesolve.c?ref=80f2bb6e3af5a9ae2576f86258cdafa7fe1ff384", "patch": "@@ -1885,6 +1885,23 @@ gfc_resolve_spread (gfc_expr * f, gfc_expr * source,\n \t\t\t      ? PREFIX(\"spread_char\")\n \t\t\t      : PREFIX(\"spread\"));\n \n+  if (dim && gfc_is_constant_expr (dim)\n+\t&& ncopies && gfc_is_constant_expr (ncopies)\n+\t&& source->shape[0])\n+    {\n+      int i, idim;\n+      idim = mpz_get_ui (dim->value.integer);\n+      f->shape = gfc_get_shape (f->rank);\n+      for (i = 0; i < (idim - 1); i++)\n+\tmpz_init_set (f->shape[i], source->shape[i]);\n+\n+      mpz_init_set (f->shape[idim - 1], ncopies->value.integer);\n+\n+      for (i = idim; i < f->rank ; i++)\n+\tmpz_init_set (f->shape[i], source->shape[i-1]);\n+    }\n+\n+\n   gfc_resolve_dim_arg (dim);\n   gfc_resolve_index (ncopies, 1);\n }"}, {"sha": "e4c5a5ae5952711ea1666768448f13ad5963f1f6", "filename": "gcc/fortran/trans-decl.c", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/80f2bb6e3af5a9ae2576f86258cdafa7fe1ff384/gcc%2Ffortran%2Ftrans-decl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/80f2bb6e3af5a9ae2576f86258cdafa7fe1ff384/gcc%2Ffortran%2Ftrans-decl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-decl.c?ref=80f2bb6e3af5a9ae2576f86258cdafa7fe1ff384", "patch": "@@ -2883,12 +2883,14 @@ generate_local_decl (gfc_symbol * sym)\n       if (sym->attr.referenced)\n         gfc_get_symbol_decl (sym);\n       else if (sym->attr.dummy && warn_unused_parameter)\n-            warning (0, \"unused parameter %qs\", sym->name);\n+\tgfc_warning (\"Unused parameter %s declared at %L\", sym->name,\n+\t\t     &sym->declared_at);\n       /* Warn for unused variables, but not if they're inside a common\n \t block or are use-associated.  */\n       else if (warn_unused_variable\n \t       && !(sym->attr.in_common || sym->attr.use_assoc))\n-\twarning (0, \"unused variable %qs\", sym->name); \n+\tgfc_warning (\"Unused variable %s declared at %L\", sym->name,\n+\t\t     &sym->declared_at);\n       /* For variable length CHARACTER parameters, the PARM_DECL already\n \t references the length variable, so force gfc_get_symbol_decl\n \t even when not referenced.  If optimize > 0, it will be optimized"}, {"sha": "3311a54ef7a8690183107a6a8eb79ac5e0828420", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/80f2bb6e3af5a9ae2576f86258cdafa7fe1ff384/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/80f2bb6e3af5a9ae2576f86258cdafa7fe1ff384/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=80f2bb6e3af5a9ae2576f86258cdafa7fe1ff384", "patch": "@@ -1,3 +1,8 @@\n+2006-09-18  Paul Thomas  <pault@gcc.gnu.org>\n+\n+\tPR fortran/29060\n+\t* gfortran.dg/spread_shape_1.f90: New test.\n+\n 2006-09-17  Roger Sayle  <roger@eyesopen.com>\n \n \tPR tree-optimization/28887"}, {"sha": "c9f96f3661e8d3ce78f62b5cbc9b526f9177cd02", "filename": "gcc/testsuite/gfortran.dg/spread_shape_1.f90", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/80f2bb6e3af5a9ae2576f86258cdafa7fe1ff384/gcc%2Ftestsuite%2Fgfortran.dg%2Fspread_shape_1.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/80f2bb6e3af5a9ae2576f86258cdafa7fe1ff384/gcc%2Ftestsuite%2Fgfortran.dg%2Fspread_shape_1.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fspread_shape_1.f90?ref=80f2bb6e3af5a9ae2576f86258cdafa7fe1ff384", "patch": "@@ -0,0 +1,20 @@\n+! { dg-do compile }\n+! Tests the fix for PR29060 in which the shape of the result\n+! of SPREAD was not available to the scalarizer.\n+!\n+! Contributed by Paul Thomas  <pault@gcc.gnu.org>\n+  real,dimension(:, :),pointer :: ptr\n+  real,dimension(2, 2),parameter :: u = &\n+\treshape((/0.25, 0.5, 0.75, 1.00/),(/2,2/))\n+  allocate (ptr(2,2))\n+\n+! Original PR\n+  ptr(:, :) = u + spread ((/1.0, 2.0/), 2, size(u, 2))\n+  if (any (ptr .ne. &\n+        reshape ((/1.25, 2.50, 1.75, 3.00/), (/2, 2/)))) call abort ()\n+\n+! Check that the fix works correctly with the source shape after ncopies\n+  ptr(:, :) = u + spread ((/2.0, 3.0/), 1, size (u, 1))\n+  if (any (ptr .ne. &\n+        reshape ((/2.25, 2.50, 3.75, 4.00/), (/2,2/)))) call abort ()\n+end"}]}