{"sha": "5e77d4082fa845f1182641a93cfbae71984244d2", "node_id": "C_kwDOANBUbNoAKDVlNzdkNDA4MmZhODQ1ZjExODI2NDFhOTNjZmJhZTcxOTg0MjQ0ZDI", "commit": {"author": {"name": "Aldy Hernandez", "email": "aldyh@redhat.com", "date": "2022-09-23T17:47:19Z"}, "committer": {"name": "Aldy Hernandez", "email": "aldyh@redhat.com", "date": "2022-09-26T17:24:58Z"}, "message": "Optimize [0 = x & MASK] in range-ops.\n\nFor [0 = x & MASK], we can determine that x is ~MASK.  This is\nsomething we're picking up in DOM thanks to maybe_set_nonzero_bits,\nbut is something we should handle natively.\n\nThis is a good example of how much easier to maintain the range-ops\nentries are versus the ad-hoc pattern matching stuff we had to do\nbefore.  For the curious, compare the changes to range-op here,\nversus maybe_set_nonzero_bits.\n\nI'm leaving the call to maybe_set_nonzero_bits until I can properly\naudit it to make sure we're catching it all in range-ops.  It won't\nhurt, since both set_range_info() and set_nonzero_bits() are\nintersect operations, so we'll never lose information if we do both.\n\n\tPR tree-optimization/107009\n\ngcc/ChangeLog:\n\n\t* range-op.cc (operator_bitwise_and::op1_range): Optimize 0 = x & MASK.\n\t(range_op_bitwise_and_tests): New test.", "tree": {"sha": "03e512623a485bab33c1b2764e95237525ce5384", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/03e512623a485bab33c1b2764e95237525ce5384"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5e77d4082fa845f1182641a93cfbae71984244d2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5e77d4082fa845f1182641a93cfbae71984244d2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5e77d4082fa845f1182641a93cfbae71984244d2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5e77d4082fa845f1182641a93cfbae71984244d2/comments", "author": {"login": "aldyh", "id": 12937877, "node_id": "MDQ6VXNlcjEyOTM3ODc3", "avatar_url": "https://avatars.githubusercontent.com/u/12937877?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aldyh", "html_url": "https://github.com/aldyh", "followers_url": "https://api.github.com/users/aldyh/followers", "following_url": "https://api.github.com/users/aldyh/following{/other_user}", "gists_url": "https://api.github.com/users/aldyh/gists{/gist_id}", "starred_url": "https://api.github.com/users/aldyh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aldyh/subscriptions", "organizations_url": "https://api.github.com/users/aldyh/orgs", "repos_url": "https://api.github.com/users/aldyh/repos", "events_url": "https://api.github.com/users/aldyh/events{/privacy}", "received_events_url": "https://api.github.com/users/aldyh/received_events", "type": "User", "site_admin": false}, "committer": {"login": "aldyh", "id": 12937877, "node_id": "MDQ6VXNlcjEyOTM3ODc3", "avatar_url": "https://avatars.githubusercontent.com/u/12937877?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aldyh", "html_url": "https://github.com/aldyh", "followers_url": "https://api.github.com/users/aldyh/followers", "following_url": "https://api.github.com/users/aldyh/following{/other_user}", "gists_url": "https://api.github.com/users/aldyh/gists{/gist_id}", "starred_url": "https://api.github.com/users/aldyh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aldyh/subscriptions", "organizations_url": "https://api.github.com/users/aldyh/orgs", "repos_url": "https://api.github.com/users/aldyh/repos", "events_url": "https://api.github.com/users/aldyh/events{/privacy}", "received_events_url": "https://api.github.com/users/aldyh/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "be4b32b9ef69b86b662cb7511b48cd1048a55403", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/be4b32b9ef69b86b662cb7511b48cd1048a55403", "html_url": "https://github.com/Rust-GCC/gccrs/commit/be4b32b9ef69b86b662cb7511b48cd1048a55403"}], "stats": {"total": 18, "additions": 18, "deletions": 0}, "files": [{"sha": "fc930f4d61308226ab1b8dc01e7da361e1fd6ff0", "filename": "gcc/range-op.cc", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5e77d4082fa845f1182641a93cfbae71984244d2/gcc%2Frange-op.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5e77d4082fa845f1182641a93cfbae71984244d2/gcc%2Frange-op.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frange-op.cc?ref=5e77d4082fa845f1182641a93cfbae71984244d2", "patch": "@@ -2951,6 +2951,15 @@ operator_bitwise_and::op1_range (irange &r, tree type,\n     }\n   if (r.undefined_p ())\n     set_nonzero_range_from_mask (r, type, lhs);\n+\n+  // For 0 = op1 & MASK, op1 is ~MASK.\n+  if (lhs.zero_p () && op2.singleton_p ())\n+    {\n+      wide_int nz = wi::bit_not (op2.get_nonzero_bits ());\n+      int_range<2> tmp (type);\n+      tmp.set_nonzero_bits (nz);\n+      r.intersect (tmp);\n+    }\n   return true;\n }\n \n@@ -4612,6 +4621,15 @@ range_op_bitwise_and_tests ()\n   op_bitwise_and.op1_range (res, integer_type_node, i1, i2);\n   ASSERT_TRUE (res == int_range<1> (integer_type_node));\n \n+  // For 0 = x & MASK, x is ~MASK.\n+  {\n+    int_range<2> zero (integer_zero_node, integer_zero_node);\n+    int_range<2> mask = int_range<2> (INT (7), INT (7));\n+    op_bitwise_and.op1_range (res, integer_type_node, zero, mask);\n+    wide_int inv = wi::shwi (~7U, TYPE_PRECISION (integer_type_node));\n+    ASSERT_TRUE (res.get_nonzero_bits () == inv);\n+  }\n+\n   // (NONZERO | X) is nonzero.\n   i1.set_nonzero (integer_type_node);\n   i2.set_varying (integer_type_node);"}]}