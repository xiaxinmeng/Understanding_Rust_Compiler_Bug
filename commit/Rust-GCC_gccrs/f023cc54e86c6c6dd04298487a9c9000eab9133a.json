{"sha": "f023cc54e86c6c6dd04298487a9c9000eab9133a", "node_id": "C_kwDOANBUbNoAKGYwMjNjYzU0ZTg2YzZjNmRkMDQyOTg0ODdhOWM5MDAwZWFiOTEzM2E", "commit": {"author": {"name": "Andrew Carlotti", "email": "andrew.carlotti@arm.com", "date": "2022-07-21T16:18:43Z"}, "committer": {"name": "Andrew Carlotti", "email": "andrew.carlotti@arm.com", "date": "2022-07-26T09:31:00Z"}, "message": "aarch64: Consolidate simd type lookup functions\n\nThere were several similarly-named functions, which each built or looked up an\noperand type using a different subset of valid modes or qualifiers.\n\nThis change provides a single function to return operand types, which can\nadditionally handle const and pointer qualifiers.  For clarity, the existing\nfunctionality is kept in separate helper functions.\n\ngcc/ChangeLog:\n\n\t* config/aarch64/aarch64-builtins.cc\n\t(aarch64_simd_builtin_std_type): Rename to...\n\t(aarch64_int_or_fp_type): ...this, and allow irrelevant qualifiers.\n\t(aarch64_lookup_simd_builtin_type): Rename to...\n\t(aarch64_simd_builtin_type): ...this. Add const/pointer\n\tsupport, and extract table lookup to...\n\t(aarch64_lookup_simd_type_in_table): ...this function.\n\t(aarch64_init_crc32_builtins): Update to use aarch64_simd_builtin_type.\n\t(aarch64_init_fcmla_laneq_builtins): Ditto.\n\t(aarch64_init_simd_builtin_functions): Ditto.", "tree": {"sha": "3e1f4efe649c86e7f0557e0a59db9be31e18a995", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3e1f4efe649c86e7f0557e0a59db9be31e18a995"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f023cc54e86c6c6dd04298487a9c9000eab9133a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f023cc54e86c6c6dd04298487a9c9000eab9133a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f023cc54e86c6c6dd04298487a9c9000eab9133a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f023cc54e86c6c6dd04298487a9c9000eab9133a/comments", "author": {"login": "andrewcarlotti", "id": 11681428, "node_id": "MDQ6VXNlcjExNjgxNDI4", "avatar_url": "https://avatars.githubusercontent.com/u/11681428?v=4", "gravatar_id": "", "url": "https://api.github.com/users/andrewcarlotti", "html_url": "https://github.com/andrewcarlotti", "followers_url": "https://api.github.com/users/andrewcarlotti/followers", "following_url": "https://api.github.com/users/andrewcarlotti/following{/other_user}", "gists_url": "https://api.github.com/users/andrewcarlotti/gists{/gist_id}", "starred_url": "https://api.github.com/users/andrewcarlotti/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/andrewcarlotti/subscriptions", "organizations_url": "https://api.github.com/users/andrewcarlotti/orgs", "repos_url": "https://api.github.com/users/andrewcarlotti/repos", "events_url": "https://api.github.com/users/andrewcarlotti/events{/privacy}", "received_events_url": "https://api.github.com/users/andrewcarlotti/received_events", "type": "User", "site_admin": false}, "committer": {"login": "andrewcarlotti", "id": 11681428, "node_id": "MDQ6VXNlcjExNjgxNDI4", "avatar_url": "https://avatars.githubusercontent.com/u/11681428?v=4", "gravatar_id": "", "url": "https://api.github.com/users/andrewcarlotti", "html_url": "https://github.com/andrewcarlotti", "followers_url": "https://api.github.com/users/andrewcarlotti/followers", "following_url": "https://api.github.com/users/andrewcarlotti/following{/other_user}", "gists_url": "https://api.github.com/users/andrewcarlotti/gists{/gist_id}", "starred_url": "https://api.github.com/users/andrewcarlotti/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/andrewcarlotti/subscriptions", "organizations_url": "https://api.github.com/users/andrewcarlotti/orgs", "repos_url": "https://api.github.com/users/andrewcarlotti/repos", "events_url": "https://api.github.com/users/andrewcarlotti/events{/privacy}", "received_events_url": "https://api.github.com/users/andrewcarlotti/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8a1e05b7618fed394b0928bec89e71748295d357", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8a1e05b7618fed394b0928bec89e71748295d357", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8a1e05b7618fed394b0928bec89e71748295d357"}], "stats": {"total": 77, "additions": 37, "deletions": 40}, "files": [{"sha": "f7c08d62baafa13fe76b9c821ff9a10c3f640e5c", "filename": "gcc/config/aarch64/aarch64-builtins.cc", "status": "modified", "additions": 37, "deletions": 40, "changes": 77, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f023cc54e86c6c6dd04298487a9c9000eab9133a/gcc%2Fconfig%2Faarch64%2Faarch64-builtins.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f023cc54e86c6c6dd04298487a9c9000eab9133a/gcc%2Fconfig%2Faarch64%2Faarch64-builtins.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-builtins.cc?ref=f023cc54e86c6c6dd04298487a9c9000eab9133a", "patch": "@@ -794,12 +794,13 @@ aarch64_general_mangle_builtin_type (const_tree type)\n   return NULL;\n }\n \n+/* Helper function for aarch64_simd_builtin_type.  */\n static tree\n-aarch64_simd_builtin_std_type (machine_mode mode,\n-\t\t\t       enum aarch64_type_qualifiers q)\n+aarch64_int_or_fp_type (machine_mode mode,\n+\t\t\tenum aarch64_type_qualifiers qualifiers)\n {\n-#define QUAL_TYPE(M)  \\\n-  ((q == qualifier_none) ? int##M##_type_node : unsigned_int##M##_type_node);\n+#define QUAL_TYPE(M) ((qualifiers & qualifier_unsigned) \\\n+\t\t       ? unsigned_int##M##_type_node : int##M##_type_node);\n   switch (mode)\n     {\n     case E_QImode:\n@@ -832,16 +833,14 @@ aarch64_simd_builtin_std_type (machine_mode mode,\n #undef QUAL_TYPE\n }\n \n+/* Helper function for aarch64_simd_builtin_type.  */\n static tree\n-aarch64_lookup_simd_builtin_type (machine_mode mode,\n-\t\t\t\t  enum aarch64_type_qualifiers q)\n+aarch64_lookup_simd_type_in_table (machine_mode mode,\n+\t\t\t\t   enum aarch64_type_qualifiers qualifiers)\n {\n   int i;\n   int nelts = ARRAY_SIZE (aarch64_simd_types);\n-\n-  /* Non-poly scalar modes map to standard types not in the table.  */\n-  if (q != qualifier_poly && !VECTOR_MODE_P (mode))\n-    return aarch64_simd_builtin_std_type (mode, q);\n+  int q = qualifiers & (qualifier_poly | qualifier_unsigned);\n \n   for (i = 0; i < nelts; i++)\n     {\n@@ -858,16 +857,32 @@ aarch64_lookup_simd_builtin_type (machine_mode mode,\n   return NULL_TREE;\n }\n \n+/* Return a type for an operand with specified mode and qualifiers.  */\n static tree\n aarch64_simd_builtin_type (machine_mode mode,\n-\t\t\t   bool unsigned_p, bool poly_p)\n+\t\t\t   enum aarch64_type_qualifiers qualifiers)\n {\n-  if (poly_p)\n-    return aarch64_lookup_simd_builtin_type (mode, qualifier_poly);\n-  else if (unsigned_p)\n-    return aarch64_lookup_simd_builtin_type (mode, qualifier_unsigned);\n+  tree type = NULL_TREE;\n+\n+  /* For pointers, we want a pointer to the basic type of the vector.  */\n+  if ((qualifiers & qualifier_pointer) && VECTOR_MODE_P (mode))\n+    mode = GET_MODE_INNER (mode);\n+\n+  /* Non-poly scalar modes map to standard types not in the table.  */\n+  if ((qualifiers & qualifier_poly) || VECTOR_MODE_P (mode))\n+    type = aarch64_lookup_simd_type_in_table (mode, qualifiers);\n   else\n-    return aarch64_lookup_simd_builtin_type (mode, qualifier_none);\n+    type = aarch64_int_or_fp_type (mode, qualifiers);\n+\n+  gcc_assert (type != NULL_TREE);\n+\n+  /* Add qualifiers.  */\n+  if (qualifiers & qualifier_const)\n+    type = build_qualified_type (type, TYPE_QUAL_CONST);\n+  if (qualifiers & qualifier_pointer)\n+    type = build_pointer_type (type);\n+\n+  return type;\n }\n  \n static void\n@@ -1116,12 +1131,11 @@ aarch64_init_fcmla_laneq_builtins (void)\n     {\n       aarch64_fcmla_laneq_builtin_datum* d\n \t= &aarch64_fcmla_lane_builtin_data[i];\n-      tree argtype = aarch64_lookup_simd_builtin_type (d->mode, qualifier_none);\n+      tree argtype = aarch64_simd_builtin_type (d->mode, qualifier_none);\n       machine_mode quadmode = GET_MODE_2XWIDER_MODE (d->mode).require ();\n-      tree quadtype\n-\t= aarch64_lookup_simd_builtin_type (quadmode, qualifier_none);\n+      tree quadtype = aarch64_simd_builtin_type (quadmode, qualifier_none);\n       tree lanetype\n-\t= aarch64_simd_builtin_std_type (SImode, qualifier_lane_pair_index);\n+\t= aarch64_simd_builtin_type (SImode, qualifier_lane_pair_index);\n       tree ftype = build_function_type_list (argtype, argtype, argtype,\n \t\t\t\t\t     quadtype, lanetype, NULL_TREE);\n       tree attrs = aarch64_get_attributes (FLAG_FP, d->mode);\n@@ -1216,23 +1230,7 @@ aarch64_init_simd_builtin_functions (bool called_from_pragma)\n \t  if (qualifiers & qualifier_map_mode)\n \t      op_mode = d->mode;\n \n-\t  /* For pointers, we want a pointer to the basic type\n-\t     of the vector.  */\n-\t  if (qualifiers & qualifier_pointer && VECTOR_MODE_P (op_mode))\n-\t    op_mode = GET_MODE_INNER (op_mode);\n-\n-\t  eltype = aarch64_simd_builtin_type\n-\t\t     (op_mode,\n-\t\t      (qualifiers & qualifier_unsigned) != 0,\n-\t\t      (qualifiers & qualifier_poly) != 0);\n-\t  gcc_assert (eltype != NULL);\n-\n-\t  /* Add qualifiers.  */\n-\t  if (qualifiers & qualifier_const)\n-\t    eltype = build_qualified_type (eltype, TYPE_QUAL_CONST);\n-\n-\t  if (qualifiers & qualifier_pointer)\n-\t      eltype = build_pointer_type (eltype);\n+\t  eltype = aarch64_simd_builtin_type (op_mode, qualifiers);\n \n \t  /* If we have reached arg_num == 0, we are at a non-void\n \t     return type.  Otherwise, we are still processing\n@@ -1389,14 +1387,13 @@ aarch64_init_simd_builtins (void)\n static void\n aarch64_init_crc32_builtins ()\n {\n-  tree usi_type = aarch64_simd_builtin_std_type (SImode, qualifier_unsigned);\n+  tree usi_type = aarch64_simd_builtin_type (SImode, qualifier_unsigned);\n   unsigned int i = 0;\n \n   for (i = 0; i < ARRAY_SIZE (aarch64_crc_builtin_data); ++i)\n     {\n       aarch64_crc_builtin_datum* d = &aarch64_crc_builtin_data[i];\n-      tree argtype = aarch64_simd_builtin_std_type (d->mode,\n-\t\t\t\t\t\t    qualifier_unsigned);\n+      tree argtype = aarch64_simd_builtin_type (d->mode, qualifier_unsigned);\n       tree ftype = build_function_type_list (usi_type, usi_type, argtype, NULL_TREE);\n       tree attrs = aarch64_get_attributes (FLAG_NONE, d->mode);\n       tree fndecl"}]}