{"sha": "aeb70e782ac3089f3931b58b1291c1196a8e6c8f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWViNzBlNzgyYWMzMDg5ZjM5MzFiNThiMTI5MWMxMTk2YThlNmM4Zg==", "commit": {"author": {"name": "Richard Sandiford", "email": "rsandifo@redhat.com", "date": "2005-05-16T12:30:06Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2005-05-16T12:30:06Z"}, "message": "Makefile.in (options.c): Tell optc-gen.awk to include config.h, system.h, coretypes.h and tm.h.\n\n\t* Makefile.in (options.c): Tell optc-gen.awk to include config.h,\n\tsystem.h, coretypes.h and tm.h.\n\t(options.o): Update dependencies accordingly.\n\t* optc-gen.awk: Allow header_name to be a list of filenames.\n\tHandle the \"Condition\" flag.\n\t* opts.h (CL_DISABLED): New flag.\n\t* opts.c (handle_option): Print an error for CL_DISABLED options.\n\t* doc/options.texi: Document the \"Condition\" option flag.\n\nFrom-SVN: r99774", "tree": {"sha": "1a880bfd7d5dee689ffa88c4d78e2661c5086ffd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1a880bfd7d5dee689ffa88c4d78e2661c5086ffd"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/aeb70e782ac3089f3931b58b1291c1196a8e6c8f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/aeb70e782ac3089f3931b58b1291c1196a8e6c8f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/aeb70e782ac3089f3931b58b1291c1196a8e6c8f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/aeb70e782ac3089f3931b58b1291c1196a8e6c8f/comments", "author": null, "committer": null, "parents": [{"sha": "8b37cc6429c7771e6501354521446cfe47f157ff", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8b37cc6429c7771e6501354521446cfe47f157ff", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8b37cc6429c7771e6501354521446cfe47f157ff"}], "stats": {"total": 53, "additions": 46, "deletions": 7}, "files": [{"sha": "061d63e1bfd3850dab23220aa61d44ae1442df50", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aeb70e782ac3089f3931b58b1291c1196a8e6c8f/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aeb70e782ac3089f3931b58b1291c1196a8e6c8f/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=aeb70e782ac3089f3931b58b1291c1196a8e6c8f", "patch": "@@ -1,3 +1,14 @@\n+2005-05-16  Richard Sandiford  <rsandifo@redhat.com>\n+\n+\t* Makefile.in (options.c): Tell optc-gen.awk to include config.h,\n+\tsystem.h, coretypes.h and tm.h.\n+\t(options.o): Update dependencies accordingly.\n+\t* optc-gen.awk: Allow header_name to be a list of filenames.\n+\tHandle the \"Condition\" flag.\n+\t* opts.h (CL_DISABLED): New flag.\n+\t* opts.c (handle_option): Print an error for CL_DISABLED options.\n+\t* doc/options.texi: Document the \"Condition\" option flag.\n+\n 2005-05-16  Paolo Bonzini  <bonzini@gnu.org>\n \n \t* tree-inline.c (estimate_num_insns_1): Handle VEC_COND_EXPR."}, {"sha": "8d0d15ca798032e945455d547aacd041ab054792", "filename": "gcc/Makefile.in", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aeb70e782ac3089f3931b58b1291c1196a8e6c8f/gcc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aeb70e782ac3089f3931b58b1291c1196a8e6c8f/gcc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FMakefile.in?ref=aeb70e782ac3089f3931b58b1291c1196a8e6c8f", "patch": "@@ -1569,7 +1569,7 @@ s-options: $(ALL_OPT_FILES) Makefile $(srcdir)/opt-gather.awk\n \n options.c: optionlist $(srcdir)/opt-functions.awk $(srcdir)/optc-gen.awk\n \t$(AWK) -f $(srcdir)/opt-functions.awk -f $(srcdir)/optc-gen.awk \\\n-\t       -v header_name=\"options.h\" < $< > $@ \n+\t       -v header_name=\"config.h system.h coretypes.h tm.h\" < $< > $@ \n \n options.h: s-options-h ; @true\n s-options-h: optionlist $(srcdir)/opt-functions.awk $(srcdir)/opth-gen.awk\n@@ -1578,7 +1578,7 @@ s-options-h: optionlist $(srcdir)/opt-functions.awk $(srcdir)/opth-gen.awk\n \t$(SHELL) $(srcdir)/../move-if-change tmp-options.h options.h\n \t$(STAMP) $@\n \n-options.o: options.c options.h opts.h intl.h\n+options.o: options.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) opts.h intl.h\n \n dumpvers: dumpvers.c\n "}, {"sha": "307a325e5de25c6239e835c71fbe64b19b15720d", "filename": "gcc/doc/options.texi", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aeb70e782ac3089f3931b58b1291c1196a8e6c8f/gcc%2Fdoc%2Foptions.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aeb70e782ac3089f3931b58b1291c1196a8e6c8f/gcc%2Fdoc%2Foptions.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Foptions.texi?ref=aeb70e782ac3089f3931b58b1291c1196a8e6c8f", "patch": "@@ -191,4 +191,11 @@ The state of the option should be printed by @option{-fverbose-asm}.\n @item Undocumented\n The option is deliberately missing documentation and should not\n be included in the @option{--help} output.\n+\n+@item Condition(@var{cond})\n+The option should only be accepted if preprocessor condition\n+@var{cond} is true.  Note that any C declarations associated with the\n+option will be present even if @var{cond} is false; @var{cond} simply\n+controls whether the option is accepted and whether it is printed in\n+the @option{--help} output.\n @end table"}, {"sha": "e647cd9ad21e72d98b79abff382093ef668879d0", "filename": "gcc/optc-gen.awk", "status": "modified", "additions": 17, "deletions": 5, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aeb70e782ac3089f3931b58b1291c1196a8e6c8f/gcc%2Foptc-gen.awk", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aeb70e782ac3089f3931b58b1291c1196a8e6c8f/gcc%2Foptc-gen.awk", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Foptc-gen.awk?ref=aeb70e782ac3089f3931b58b1291c1196a8e6c8f", "patch": "@@ -57,7 +57,9 @@ END {\n print \"/* This file is auto-generated by opts.sh.  */\"\n print \"\"\n print \"#include <intl.h>\"\n-print \"#include \" quote header_name quote\n+n_headers = split(header_name, headers, \" \")\n+for (i = 1; i <= n_headers; i++)\n+\tprint \"#include \" quote headers[i] quote\n print \"#include \" quote \"opts.h\" quote\n print \"\"\n \n@@ -135,10 +137,20 @@ for (i = 0; i < n_opts; i++) {\n \telse\n \t\thlp = quote help[i] quote;\n \n-\tprintf(\"  { %c-%s%c,\\n    %s,\\n    %s, %u, %s, %s, %s }%s\\n\",\n-\t\tquote, opts[i], quote, hlp, back_chain[i], len,\n-\t\tswitch_flags(flags[i]),\n-\t\tvar_ref(flags[i]), var_set(flags[i]), comma)\n+\tprintf(\"  { %c-%s%c,\\n    %s,\\n    %s, %u,\\n\",\n+\t       quote, opts[i], quote, hlp, back_chain[i], len)\n+\tcondition = opt_args(\"Condition\", flags[i])\n+\tcl_flags = switch_flags(flags[i])\n+\tif (condition != \"\")\n+\t\tprintf(\"#if %s\\n\" \\\n+\t\t       \"    %s,\\n\" \\\n+\t\t       \"#else\\n\" \\\n+\t\t       \"    CL_DISABLED,\\n\" \\\n+\t\t       \"#endif\\n\",\n+\t\t       condition, cl_flags, cl_flags)\n+\telse\n+\t\tprintf(\"    %s,\\n\", cl_flags)\n+\tprintf(\"    %s, %s }%s\\n\", var_ref(flags[i]), var_set(flags[i]), comma)\n }\n \n print \"};\""}, {"sha": "896728c37270119361f6f467206a3eaf369fb5b1", "filename": "gcc/opts.c", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aeb70e782ac3089f3931b58b1291c1196a8e6c8f/gcc%2Fopts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aeb70e782ac3089f3931b58b1291c1196a8e6c8f/gcc%2Fopts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fopts.c?ref=aeb70e782ac3089f3931b58b1291c1196a8e6c8f", "patch": "@@ -315,6 +315,14 @@ handle_option (const char **argv, unsigned int lang_mask)\n   /* We've recognized this switch.  */\n   result = 1;\n \n+  /* Check to see if the option is disabled for this configuration.  */\n+  if (option->flags & CL_DISABLED)\n+    {\n+      error (\"command line option %qs\"\n+\t     \" is not supported by this configuration\", opt);\n+      goto done;\n+    }\n+\n   /* Sort out any argument the switch takes.  */\n   if (option->flags & CL_JOINED)\n     {"}, {"sha": "758f8309abdcdc84ab655bf79b91a95681fff245", "filename": "gcc/opts.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aeb70e782ac3089f3931b58b1291c1196a8e6c8f/gcc%2Fopts.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aeb70e782ac3089f3931b58b1291c1196a8e6c8f/gcc%2Fopts.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fopts.h?ref=aeb70e782ac3089f3931b58b1291c1196a8e6c8f", "patch": "@@ -52,6 +52,7 @@ extern const struct cl_option cl_options[];\n extern const unsigned int cl_options_count;\n extern const char *const lang_names[];\n \n+#define CL_DISABLED\t\t(1 << 21) /* Disabled in this configuration.  */\n #define CL_TARGET\t\t(1 << 22) /* Target-specific option.  */\n #define CL_REPORT\t\t(1 << 23) /* Report argument with -fverbose-asm  */\n #define CL_JOINED\t\t(1 << 24) /* If takes joined argument.  */"}]}