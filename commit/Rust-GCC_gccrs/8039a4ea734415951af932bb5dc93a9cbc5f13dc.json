{"sha": "8039a4ea734415951af932bb5dc93a9cbc5f13dc", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODAzOWE0ZWE3MzQ0MTU5NTFhZjkzMmJiNWRjOTNhOWNiYzVmMTNkYw==", "commit": {"author": {"name": "Tom Tromey", "email": "tromey@cygnus.com", "date": "2000-07-23T00:24:14Z"}, "committer": {"name": "Tom Tromey", "email": "tromey@gcc.gnu.org", "date": "2000-07-23T00:24:14Z"}, "message": "Makefile.in: Rebuilt.\n\n\t* Makefile.in: Rebuilt.\n\t* Makefile.am (awt_java_source_files): Updated for new files.\n\t* java/awt/Adjustable.java (HORIZONTAL, VERTICAL): Set values.\n\t* java/awt/Label.java: New file.\n\t* java/awt/Rectangle.java (Rectangle): Extend Rectangle2D.\n\t(createIntersection, createUnion, getBounds2D): New methods.\n\t* java/awt/Scrollbar.java: New file.\n\t* java/awt/Shape.java: Updated to 1.2.\n\t* java/awt/geom/AffineTransform.java: New file.\n\t* java/awt/geom/Ellipse2D.java: New file.\n\t* java/awt/geom/NoninvertibleTransformException.java: New file.\n\t* java/awt/geom/PathIterator.java: New file.\n\t* java/awt/geom/Rectangle2D.java: New file.\n\t* java/awt/geom/RectangularShape.java: New file.\n\t* java/awt/geom/Point2D.java (Double, Float): New inner classes.\n\t* java/awt/geom/IllegalPathStateException.java: New file.\n\nFrom-SVN: r35195", "tree": {"sha": "015eb01267de18f0f0507f24597797582f311e45", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/015eb01267de18f0f0507f24597797582f311e45"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8039a4ea734415951af932bb5dc93a9cbc5f13dc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8039a4ea734415951af932bb5dc93a9cbc5f13dc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8039a4ea734415951af932bb5dc93a9cbc5f13dc", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8039a4ea734415951af932bb5dc93a9cbc5f13dc/comments", "author": null, "committer": null, "parents": [{"sha": "4eb00163ad2a600403a9b36fdc7a47fd79ce98e6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4eb00163ad2a600403a9b36fdc7a47fd79ce98e6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4eb00163ad2a600403a9b36fdc7a47fd79ce98e6"}], "stats": {"total": 2404, "additions": 2244, "deletions": 160}, "files": [{"sha": "7f26446e7a5f57d6c6a4b60088b2dc728f427cfb", "filename": "libjava/ChangeLog", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8039a4ea734415951af932bb5dc93a9cbc5f13dc/libjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8039a4ea734415951af932bb5dc93a9cbc5f13dc/libjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FChangeLog?ref=8039a4ea734415951af932bb5dc93a9cbc5f13dc", "patch": "@@ -1,5 +1,22 @@\n 2000-07-20  Tom Tromey  <tromey@cygnus.com>\n \n+\t* Makefile.in: Rebuilt.\n+\t* Makefile.am (awt_java_source_files): Updated for new files.\n+\t* java/awt/Adjustable.java (HORIZONTAL, VERTICAL): Set values.\n+\t* java/awt/Label.java: New file.\n+\t* java/awt/Rectangle.java (Rectangle): Extend Rectangle2D.\n+\t(createIntersection, createUnion, getBounds2D): New methods.\n+\t* java/awt/Scrollbar.java: New file.\n+\t* java/awt/Shape.java: Updated to 1.2.\n+\t* java/awt/geom/AffineTransform.java: New file.\n+\t* java/awt/geom/Ellipse2D.java: New file.\n+\t* java/awt/geom/NoninvertibleTransformException.java: New file.\n+\t* java/awt/geom/PathIterator.java: New file.\n+\t* java/awt/geom/Rectangle2D.java: New file.\n+\t* java/awt/geom/RectangularShape.java: New file.\n+\t* java/awt/geom/Point2D.java (Double, Float): New inner classes.\n+\t* java/awt/geom/IllegalPathStateException.java: New file.\n+\t\n \t* scripts/showval.java: New file.\n \n \t* scripts/classes.pl (scan): Print inner classes properly."}, {"sha": "b3ed536a49f9ecec0fbb70e6811a92b695055892", "filename": "libjava/Makefile.am", "status": "modified", "additions": 67, "deletions": 58, "changes": 125, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8039a4ea734415951af932bb5dc93a9cbc5f13dc/libjava%2FMakefile.am", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8039a4ea734415951af932bb5dc93a9cbc5f13dc/libjava%2FMakefile.am", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FMakefile.am?ref=8039a4ea734415951af932bb5dc93a9cbc5f13dc", "patch": "@@ -486,49 +486,15 @@ gnu/gcj/convert/UnicodeToBytes.java\n special_java_source_files = java/lang/Class.java java/lang/Object.java\n \n awt_java_source_files =\t\\\n-java/awt/event/ActionEvent.java\t\\\n-java/awt/event/ActionListener.java \\\n-java/awt/event/ComponentEvent.java \\\n-java/awt/event/HierarchyBoundsAdapter.java \\\n-java/awt/event/HierarchyBoundsListener.java \\\n-java/awt/event/HierarchyEvent.java \\\n-java/awt/event/HierarchyListener.java \\\n-java/awt/event/InputEvent.java \\\n-java/awt/event/KeyAdapter.java \\\n-java/awt/event/KeyEvent.java \\\n-java/awt/event/KeyListener.java\t\\\n-java/awt/event/TextEvent.java \\\n-java/awt/event/TextListener.java \\\n-java/awt/event/WindowAdapter.java \\\n-java/awt/event/WindowEvent.java\t\\\n-java/awt/event/WindowListener.java \\\n-java/awt/event/InputMethodListener.java\t\\\n-java/awt/event/ComponentListener.java \\\n-java/awt/event/AdjustmentListener.java \\\n-java/awt/event/AWTEventListener.java \\\n-java/awt/event/FocusListener.java \\\n-java/awt/event/AdjustmentEvent.java \\\n-java/awt/event/ItemListener.java \\\n-java/awt/event/ContainerListener.java \\\n-java/awt/event/MouseListener.java \\\n-java/awt/event/MouseMotionListener.java\t\\\n-java/awt/event/ComponentAdapter.java \\\n-java/awt/event/ContainerAdapter.java \\\n-java/awt/event/FocusAdapter.java \\\n-java/awt/event/MouseAdapter.java \\\n-java/awt/event/MouseMotionAdapter.java \\\n-java/awt/event/FocusEvent.java \\\n-java/awt/event/InputMethodEvent.java \\\n-java/awt/event/MouseEvent.java \\\n-java/awt/event/ItemEvent.java \\\n-java/awt/event/InvocationEvent.java \\\n-java/awt/event/PaintEvent.java \\\n-java/awt/event/ContainerEvent.java \\\n java/awt/AWTError.java \\\n java/awt/AWTEvent.java \\\n java/awt/AWTEventMulticaster.java \\\n+java/awt/AWTException.java \\\n+java/awt/ActiveEvent.java \\\n+java/awt/Adjustable.java \\\n java/awt/BorderLayout.java \\\n java/awt/CheckboxGroup.java \\\n+java/awt/Color.java \\\n java/awt/ColorModel.java \\\n java/awt/Component.java\t\\\n java/awt/ComponentOrientation.java \\\n@@ -541,8 +507,13 @@ java/awt/EventQueue.java \\\n java/awt/Font.java \\\n java/awt/FontMetrics.java \\\n java/awt/Frame.java \\\n+java/awt/Graphics.java \\\n java/awt/GraphicsConfiguration.java \\\n+java/awt/IllegalComponentStateException.java \\\n+java/awt/Image.java \\\n java/awt/Insets.java \\\n+java/awt/ItemSelectable.java \\\n+java/awt/Label.java \\\n java/awt/LayoutManager.java \\\n java/awt/LayoutManager2.java \\\n java/awt/Menu.java \\\n@@ -551,23 +522,73 @@ java/awt/MenuComponent.java \\\n java/awt/MenuContainer.java \\\n java/awt/MenuItem.java \\\n java/awt/MenuShortcut.java \\\n+java/awt/Paint.java \\\n+java/awt/PaintContext.java \\\n java/awt/Panel.java \\\n java/awt/Point.java \\\n-java/awt/PopupMenu.java \\\n+java/awt/PopupMenu.java\t\\\n+java/awt/Rectangle.java\t\\\n+java/awt/Scrollbar.java\t\\\n java/awt/Shape.java \\\n java/awt/TextArea.java \\\n java/awt/TextComponent.java \\\n java/awt/Toolkit.java \\\n+java/awt/Transparency.java \\\n java/awt/Window.java \\\n+java/awt/event/AWTEventListener.java \\\n+java/awt/event/ActionEvent.java\t\\\n+java/awt/event/ActionListener.java \\\n+java/awt/event/AdjustmentEvent.java \\\n+java/awt/event/AdjustmentListener.java \\\n+java/awt/event/ComponentAdapter.java \\\n+java/awt/event/ComponentEvent.java \\\n+java/awt/event/ComponentListener.java \\\n+java/awt/event/ContainerAdapter.java \\\n+java/awt/event/ContainerEvent.java \\\n+java/awt/event/ContainerListener.java \\\n+java/awt/event/FocusAdapter.java \\\n+java/awt/event/FocusEvent.java \\\n+java/awt/event/FocusListener.java \\\n+java/awt/event/HierarchyBoundsAdapter.java \\\n+java/awt/event/HierarchyBoundsListener.java \\\n+java/awt/event/HierarchyEvent.java \\\n+java/awt/event/HierarchyListener.java \\\n+java/awt/event/InputEvent.java \\\n+java/awt/event/InputMethodEvent.java \\\n+java/awt/event/InputMethodListener.java\t\\\n+java/awt/event/InvocationEvent.java \\\n+java/awt/event/ItemEvent.java \\\n+java/awt/event/ItemListener.java \\\n+java/awt/event/KeyAdapter.java \\\n+java/awt/event/KeyEvent.java \\\n+java/awt/event/KeyListener.java\t\\\n+java/awt/event/MouseAdapter.java \\\n+java/awt/event/MouseEvent.java \\\n+java/awt/event/MouseListener.java \\\n+java/awt/event/MouseMotionAdapter.java \\\n+java/awt/event/MouseMotionListener.java\t\\\n+java/awt/event/PaintEvent.java \\\n+java/awt/event/TextEvent.java \\\n+java/awt/event/TextListener.java \\\n+java/awt/event/WindowAdapter.java \\\n+java/awt/event/WindowEvent.java\t\\\n+java/awt/event/WindowListener.java \\\n+java/awt/geom/AffineTransform.java \\\n+java/awt/geom/Dimension2D.java \\\n+java/awt/geom/Ellipse2D.java \\\n+java/awt/geom/IllegalPathStateException.java \\\n+java/awt/geom/NoninvertibleTransformException.java \\\n+java/awt/geom/PathIterator.java\t\\\n+java/awt/geom/Point2D.java \\\n+java/awt/geom/Rectangle2D.java \\\n+java/awt/geom/RectangularShape.java \\\n java/awt/image/ImageConsumer.java \\\n java/awt/image/ImageObserver.java \\\n java/awt/image/ImageProducer.java \\\n-java/awt/geom/Dimension2D.java \\\n-java/awt/geom/Point2D.java \\\n java/awt/peer/ButtonPeer.java \\\n java/awt/peer/CanvasPeer.java \\\n-java/awt/peer/CheckboxMenuItemPeer.java \\\n-java/awt/peer/CheckboxPeer.java \\\n+java/awt/peer/CheckboxMenuItemPeer.java\t\\\n+java/awt/peer/CheckboxPeer.java\t\\\n java/awt/peer/ChoicePeer.java \\\n java/awt/peer/ComponentPeer.java \\\n java/awt/peer/ContainerPeer.java \\\n@@ -580,28 +601,16 @@ java/awt/peer/LightweightPeer.java \\\n java/awt/peer/ListPeer.java \\\n java/awt/peer/MenuBarPeer.java \\\n java/awt/peer/MenuComponentPeer.java \\\n-java/awt/peer/MenuItemPeer.java \\\n+java/awt/peer/MenuItemPeer.java\t\\\n java/awt/peer/MenuPeer.java \\\n java/awt/peer/PanelPeer.java \\\n java/awt/peer/PopupMenuPeer.java \\\n java/awt/peer/ScrollPanePeer.java \\\n java/awt/peer/ScrollbarPeer.java \\\n-java/awt/peer/TextAreaPeer.java \\\n+java/awt/peer/TextAreaPeer.java\t\\\n java/awt/peer/TextComponentPeer.java \\\n java/awt/peer/TextFieldPeer.java \\\n-java/awt/peer/WindowPeer.java \\\n-java/awt/Adjustable.java \\\n-java/awt/Color.java \\\n-java/awt/Graphics.java \\\n-java/awt/Image.java \\\n-java/awt/Paint.java \\\n-java/awt/PaintContext.java \\\n-java/awt/Transparency.java \\\n-java/awt/ItemSelectable.java \\\n-java/awt/AWTException.java \\\n-java/awt/ActiveEvent.java \\\n-java/awt/Rectangle.java\t\\\n-java/awt/IllegalComponentStateException.java\n+java/awt/peer/WindowPeer.java\n \n ## Java files which are created by configure and thus are in the build\n ## directory."}, {"sha": "a3cc91f8670f99d6ece2f1cabc3be0137b46abaf", "filename": "libjava/Makefile.in", "status": "modified", "additions": 125, "deletions": 88, "changes": 213, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8039a4ea734415951af932bb5dc93a9cbc5f13dc/libjava%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8039a4ea734415951af932bb5dc93a9cbc5f13dc/libjava%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FMakefile.in?ref=8039a4ea734415951af932bb5dc93a9cbc5f13dc", "patch": "@@ -115,31 +115,48 @@ here = @here@\n libgcj_basedir = @libgcj_basedir@\n \n AUTOMAKE_OPTIONS = foreign no-installinfo\n-@TESTSUBDIR_TRUE@SUBDIRS = @TESTSUBDIR_TRUE@$(DIRLTDL) testsuite gcj include\n-@TESTSUBDIR_FALSE@SUBDIRS = @TESTSUBDIR_FALSE@$(DIRLTDL) gcj include\n-@USE_LIBDIR_TRUE@toolexeclibdir = @USE_LIBDIR_TRUE@$(libdir)$(MULTISUBDIR)\n-@USE_LIBDIR_FALSE@toolexeclibdir = @USE_LIBDIR_FALSE@$(toolexecdir)/lib$(MULTISUBDIR)\n-@USE_LIBDIR_FALSE@toolexecdir = @USE_LIBDIR_FALSE@$(exec_prefix)/$(target_alias)\n+@TESTSUBDIR_TRUE@SUBDIRS = \\\n+@TESTSUBDIR_TRUE@$(DIRLTDL) testsuite gcj include\n+@TESTSUBDIR_FALSE@SUBDIRS = \\\n+@TESTSUBDIR_FALSE@$(DIRLTDL) gcj include\n+@USE_LIBDIR_TRUE@toolexeclibdir = \\\n+@USE_LIBDIR_TRUE@$(libdir)$(MULTISUBDIR)\n+@USE_LIBDIR_FALSE@toolexeclibdir = \\\n+@USE_LIBDIR_FALSE@$(toolexecdir)/lib$(MULTISUBDIR)\n+@USE_LIBDIR_FALSE@toolexecdir = \\\n+@USE_LIBDIR_FALSE@$(exec_prefix)/$(target_alias)\n \n toolexeclib_LTLIBRARIES = libgcj.la\n toolexeclib_DATA = libgcj.spec\n data_DATA = libgcj.zip\n \n-@NEEDS_DATA_START_TRUE@toolexeclib_LIBRARIES = @NEEDS_DATA_START_TRUE@libgcjdata.a\n-@NEEDS_DATA_START_TRUE@libgcjdata_a_SOURCES = @NEEDS_DATA_START_TRUE@libgcjdata.c\n+@NEEDS_DATA_START_TRUE@toolexeclib_LIBRARIES = \\\n+@NEEDS_DATA_START_TRUE@libgcjdata.a\n+@NEEDS_DATA_START_TRUE@libgcjdata_a_SOURCES = \\\n+@NEEDS_DATA_START_TRUE@libgcjdata.c\n \n-@NATIVE_TRUE@bin_PROGRAMS = @NATIVE_TRUE@jv-convert gij\n+@NATIVE_TRUE@bin_PROGRAMS = \\\n+@NATIVE_TRUE@jv-convert gij\n \n bin_SCRIPTS = addr2name.awk\n-@CANADIAN_TRUE@@NULL_TARGET_TRUE@GCJ = @CANADIAN_TRUE@@NULL_TARGET_TRUE@gcj\n-@CANADIAN_TRUE@@NULL_TARGET_FALSE@GCJ = @CANADIAN_TRUE@@NULL_TARGET_FALSE@$(target_alias)-gcj\n-@CANADIAN_FALSE@GCJ = @CANADIAN_FALSE@$(expanded)/gcj$(EXEEXT) -B$(expanded)/\n-@CANADIAN_TRUE@@NULL_TARGET_TRUE@ZIP = @CANADIAN_TRUE@@NULL_TARGET_TRUE@$(MULTIBUILDTOP)../$(COMPPATH)/zip/zip$(EXEEXT)\n-@CANADIAN_TRUE@@NULL_TARGET_FALSE@ZIP = @CANADIAN_TRUE@@NULL_TARGET_FALSE@zip\n-@CANADIAN_FALSE@ZIP = @CANADIAN_FALSE@$(MULTIBUILDTOP)../$(COMPPATH)/zip/zip$(EXEEXT)\n-@CANADIAN_TRUE@GCJH = @CANADIAN_TRUE@gcjh\n-@CANADIAN_FALSE@GCJH = @CANADIAN_FALSE@$(MULTIBUILDTOP)../$(COMPPATH)/gcc/gcjh$(EXEEXT)\n-@CANADIAN_FALSE@expanded = @CANADIAN_FALSE@`cd $(MULTIBUILDTOP)../$(COMPPATH)/gcc && pwd`\n+@CANADIAN_TRUE@@NULL_TARGET_TRUE@GCJ = \\\n+@CANADIAN_TRUE@@NULL_TARGET_TRUE@gcj\n+@CANADIAN_TRUE@@NULL_TARGET_FALSE@GCJ = \\\n+@CANADIAN_TRUE@@NULL_TARGET_FALSE@$(target_alias)-gcj\n+@CANADIAN_FALSE@GCJ = \\\n+@CANADIAN_FALSE@$(expanded)/gcj$(EXEEXT) -B$(expanded)/\n+@CANADIAN_TRUE@@NULL_TARGET_TRUE@ZIP = \\\n+@CANADIAN_TRUE@@NULL_TARGET_TRUE@$(MULTIBUILDTOP)../$(COMPPATH)/zip/zip$(EXEEXT)\n+@CANADIAN_TRUE@@NULL_TARGET_FALSE@ZIP = \\\n+@CANADIAN_TRUE@@NULL_TARGET_FALSE@zip\n+@CANADIAN_FALSE@ZIP = \\\n+@CANADIAN_FALSE@$(MULTIBUILDTOP)../$(COMPPATH)/zip/zip$(EXEEXT)\n+@CANADIAN_TRUE@GCJH = \\\n+@CANADIAN_TRUE@gcjh\n+@CANADIAN_FALSE@GCJH = \\\n+@CANADIAN_FALSE@$(MULTIBUILDTOP)../$(COMPPATH)/gcc/gcjh$(EXEEXT)\n+@CANADIAN_FALSE@expanded = \\\n+@CANADIAN_FALSE@`cd $(MULTIBUILDTOP)../$(COMPPATH)/gcc && pwd`\n \n GCJCOMPILE = CLASSPATH=$(here) $(LIBTOOL) --mode=compile $(GCJ) -fassume-compiled -L$(here) $(JC1FLAGS) -c\n GCJLINK = $(LIBTOOL) --mode=link $(GCJ) -L$(here) $(JC1FLAGS) $(LDFLAGS) -o $@\n@@ -153,8 +170,10 @@ WARNINGS = -W -Wall\n AM_CXXFLAGS = -fno-rtti -fvtable-thunks -fasynchronous-exceptions \\\n \t@LIBGCJ_CXXFLAGS@ @EXCEPTIONSPEC@ $(WARNINGS) -D_GNU_SOURCE\n \n-@USING_GCC_TRUE@AM_CFLAGS = @USING_GCC_TRUE@@LIBGCJ_CFLAGS@ $(WARNINGS)\n-@USING_GCC_FALSE@AM_CFLAGS = @USING_GCC_FALSE@@LIBGCJ_CFLAGS@\n+@USING_GCC_TRUE@AM_CFLAGS = \\\n+@USING_GCC_TRUE@@LIBGCJ_CFLAGS@ $(WARNINGS)\n+@USING_GCC_FALSE@AM_CFLAGS = \\\n+@USING_GCC_FALSE@@LIBGCJ_CFLAGS@\n \n JCFLAGS = -g\n JC1FLAGS = -g @LIBGCJ_JAVAFLAGS@\n@@ -206,7 +225,8 @@ extra_headers = java/lang/Object.h java/lang/Class.h\n \n NM = nm\n \n-@NATIVE_TRUE@@MAINTAINER_MODE_TRUE@noinst_PROGRAMS = @NATIVE_TRUE@@MAINTAINER_MODE_TRUE@gen-from-JIS\n+@NATIVE_TRUE@@MAINTAINER_MODE_TRUE@noinst_PROGRAMS = \\\n+@NATIVE_TRUE@@MAINTAINER_MODE_TRUE@gen-from-JIS\n \n CONVERT_DIR = gnu/gcj/convert\n \n@@ -262,49 +282,15 @@ gnu/gcj/convert/UnicodeToBytes.java\n special_java_source_files = java/lang/Class.java java/lang/Object.java\n \n awt_java_source_files = \\\n-java/awt/event/ActionEvent.java\t\\\n-java/awt/event/ActionListener.java \\\n-java/awt/event/ComponentEvent.java \\\n-java/awt/event/HierarchyBoundsAdapter.java \\\n-java/awt/event/HierarchyBoundsListener.java \\\n-java/awt/event/HierarchyEvent.java \\\n-java/awt/event/HierarchyListener.java \\\n-java/awt/event/InputEvent.java \\\n-java/awt/event/KeyAdapter.java \\\n-java/awt/event/KeyEvent.java \\\n-java/awt/event/KeyListener.java\t\\\n-java/awt/event/TextEvent.java \\\n-java/awt/event/TextListener.java \\\n-java/awt/event/WindowAdapter.java \\\n-java/awt/event/WindowEvent.java\t\\\n-java/awt/event/WindowListener.java \\\n-java/awt/event/InputMethodListener.java\t\\\n-java/awt/event/ComponentListener.java \\\n-java/awt/event/AdjustmentListener.java \\\n-java/awt/event/AWTEventListener.java \\\n-java/awt/event/FocusListener.java \\\n-java/awt/event/AdjustmentEvent.java \\\n-java/awt/event/ItemListener.java \\\n-java/awt/event/ContainerListener.java \\\n-java/awt/event/MouseListener.java \\\n-java/awt/event/MouseMotionListener.java\t\\\n-java/awt/event/ComponentAdapter.java \\\n-java/awt/event/ContainerAdapter.java \\\n-java/awt/event/FocusAdapter.java \\\n-java/awt/event/MouseAdapter.java \\\n-java/awt/event/MouseMotionAdapter.java \\\n-java/awt/event/FocusEvent.java \\\n-java/awt/event/InputMethodEvent.java \\\n-java/awt/event/MouseEvent.java \\\n-java/awt/event/ItemEvent.java \\\n-java/awt/event/InvocationEvent.java \\\n-java/awt/event/PaintEvent.java \\\n-java/awt/event/ContainerEvent.java \\\n java/awt/AWTError.java \\\n java/awt/AWTEvent.java \\\n java/awt/AWTEventMulticaster.java \\\n+java/awt/AWTException.java \\\n+java/awt/ActiveEvent.java \\\n+java/awt/Adjustable.java \\\n java/awt/BorderLayout.java \\\n java/awt/CheckboxGroup.java \\\n+java/awt/Color.java \\\n java/awt/ColorModel.java \\\n java/awt/Component.java\t\\\n java/awt/ComponentOrientation.java \\\n@@ -317,8 +303,13 @@ java/awt/EventQueue.java \\\n java/awt/Font.java \\\n java/awt/FontMetrics.java \\\n java/awt/Frame.java \\\n+java/awt/Graphics.java \\\n java/awt/GraphicsConfiguration.java \\\n+java/awt/IllegalComponentStateException.java \\\n+java/awt/Image.java \\\n java/awt/Insets.java \\\n+java/awt/ItemSelectable.java \\\n+java/awt/Label.java \\\n java/awt/LayoutManager.java \\\n java/awt/LayoutManager2.java \\\n java/awt/Menu.java \\\n@@ -327,23 +318,73 @@ java/awt/MenuComponent.java \\\n java/awt/MenuContainer.java \\\n java/awt/MenuItem.java \\\n java/awt/MenuShortcut.java \\\n+java/awt/Paint.java \\\n+java/awt/PaintContext.java \\\n java/awt/Panel.java \\\n java/awt/Point.java \\\n-java/awt/PopupMenu.java \\\n+java/awt/PopupMenu.java\t\\\n+java/awt/Rectangle.java\t\\\n+java/awt/Scrollbar.java\t\\\n java/awt/Shape.java \\\n java/awt/TextArea.java \\\n java/awt/TextComponent.java \\\n java/awt/Toolkit.java \\\n+java/awt/Transparency.java \\\n java/awt/Window.java \\\n+java/awt/event/AWTEventListener.java \\\n+java/awt/event/ActionEvent.java\t\\\n+java/awt/event/ActionListener.java \\\n+java/awt/event/AdjustmentEvent.java \\\n+java/awt/event/AdjustmentListener.java \\\n+java/awt/event/ComponentAdapter.java \\\n+java/awt/event/ComponentEvent.java \\\n+java/awt/event/ComponentListener.java \\\n+java/awt/event/ContainerAdapter.java \\\n+java/awt/event/ContainerEvent.java \\\n+java/awt/event/ContainerListener.java \\\n+java/awt/event/FocusAdapter.java \\\n+java/awt/event/FocusEvent.java \\\n+java/awt/event/FocusListener.java \\\n+java/awt/event/HierarchyBoundsAdapter.java \\\n+java/awt/event/HierarchyBoundsListener.java \\\n+java/awt/event/HierarchyEvent.java \\\n+java/awt/event/HierarchyListener.java \\\n+java/awt/event/InputEvent.java \\\n+java/awt/event/InputMethodEvent.java \\\n+java/awt/event/InputMethodListener.java\t\\\n+java/awt/event/InvocationEvent.java \\\n+java/awt/event/ItemEvent.java \\\n+java/awt/event/ItemListener.java \\\n+java/awt/event/KeyAdapter.java \\\n+java/awt/event/KeyEvent.java \\\n+java/awt/event/KeyListener.java\t\\\n+java/awt/event/MouseAdapter.java \\\n+java/awt/event/MouseEvent.java \\\n+java/awt/event/MouseListener.java \\\n+java/awt/event/MouseMotionAdapter.java \\\n+java/awt/event/MouseMotionListener.java\t\\\n+java/awt/event/PaintEvent.java \\\n+java/awt/event/TextEvent.java \\\n+java/awt/event/TextListener.java \\\n+java/awt/event/WindowAdapter.java \\\n+java/awt/event/WindowEvent.java\t\\\n+java/awt/event/WindowListener.java \\\n+java/awt/geom/AffineTransform.java \\\n+java/awt/geom/Dimension2D.java \\\n+java/awt/geom/Ellipse2D.java \\\n+java/awt/geom/IllegalPathStateException.java \\\n+java/awt/geom/NoninvertibleTransformException.java \\\n+java/awt/geom/PathIterator.java\t\\\n+java/awt/geom/Point2D.java \\\n+java/awt/geom/Rectangle2D.java \\\n+java/awt/geom/RectangularShape.java \\\n java/awt/image/ImageConsumer.java \\\n java/awt/image/ImageObserver.java \\\n java/awt/image/ImageProducer.java \\\n-java/awt/geom/Dimension2D.java \\\n-java/awt/geom/Point2D.java \\\n java/awt/peer/ButtonPeer.java \\\n java/awt/peer/CanvasPeer.java \\\n-java/awt/peer/CheckboxMenuItemPeer.java \\\n-java/awt/peer/CheckboxPeer.java \\\n+java/awt/peer/CheckboxMenuItemPeer.java\t\\\n+java/awt/peer/CheckboxPeer.java\t\\\n java/awt/peer/ChoicePeer.java \\\n java/awt/peer/ComponentPeer.java \\\n java/awt/peer/ContainerPeer.java \\\n@@ -356,28 +397,16 @@ java/awt/peer/LightweightPeer.java \\\n java/awt/peer/ListPeer.java \\\n java/awt/peer/MenuBarPeer.java \\\n java/awt/peer/MenuComponentPeer.java \\\n-java/awt/peer/MenuItemPeer.java \\\n+java/awt/peer/MenuItemPeer.java\t\\\n java/awt/peer/MenuPeer.java \\\n java/awt/peer/PanelPeer.java \\\n java/awt/peer/PopupMenuPeer.java \\\n java/awt/peer/ScrollPanePeer.java \\\n java/awt/peer/ScrollbarPeer.java \\\n-java/awt/peer/TextAreaPeer.java \\\n+java/awt/peer/TextAreaPeer.java\t\\\n java/awt/peer/TextComponentPeer.java \\\n java/awt/peer/TextFieldPeer.java \\\n-java/awt/peer/WindowPeer.java \\\n-java/awt/Adjustable.java \\\n-java/awt/Color.java \\\n-java/awt/Graphics.java \\\n-java/awt/Image.java \\\n-java/awt/Paint.java \\\n-java/awt/PaintContext.java \\\n-java/awt/Transparency.java \\\n-java/awt/ItemSelectable.java \\\n-java/awt/AWTException.java \\\n-java/awt/ActiveEvent.java \\\n-java/awt/Rectangle.java\t\\\n-java/awt/IllegalComponentStateException.java\n+java/awt/peer/WindowPeer.java\n \n \n built_java_source_files = java/lang/ConcreteProcess.java\n@@ -1031,13 +1060,14 @@ DEP_FILES =  .deps/$(srcdir)/$(CONVERT_DIR)/gen-from-JIS.P \\\n .deps/java/awt/GraphicsConfiguration.P \\\n .deps/java/awt/IllegalComponentStateException.P .deps/java/awt/Image.P \\\n .deps/java/awt/Insets.P .deps/java/awt/ItemSelectable.P \\\n-.deps/java/awt/LayoutManager.P .deps/java/awt/LayoutManager2.P \\\n-.deps/java/awt/Menu.P .deps/java/awt/MenuBar.P \\\n-.deps/java/awt/MenuComponent.P .deps/java/awt/MenuContainer.P \\\n-.deps/java/awt/MenuItem.P .deps/java/awt/MenuShortcut.P \\\n-.deps/java/awt/Paint.P .deps/java/awt/PaintContext.P \\\n-.deps/java/awt/Panel.P .deps/java/awt/Point.P \\\n-.deps/java/awt/PopupMenu.P .deps/java/awt/Rectangle.P \\\n+.deps/java/awt/Label.P .deps/java/awt/LayoutManager.P \\\n+.deps/java/awt/LayoutManager2.P .deps/java/awt/Menu.P \\\n+.deps/java/awt/MenuBar.P .deps/java/awt/MenuComponent.P \\\n+.deps/java/awt/MenuContainer.P .deps/java/awt/MenuItem.P \\\n+.deps/java/awt/MenuShortcut.P .deps/java/awt/Paint.P \\\n+.deps/java/awt/PaintContext.P .deps/java/awt/Panel.P \\\n+.deps/java/awt/Point.P .deps/java/awt/PopupMenu.P \\\n+.deps/java/awt/Rectangle.P .deps/java/awt/Scrollbar.P \\\n .deps/java/awt/Shape.P .deps/java/awt/TextArea.P \\\n .deps/java/awt/TextComponent.P .deps/java/awt/Toolkit.P \\\n .deps/java/awt/Transparency.P .deps/java/awt/Window.P \\\n@@ -1071,8 +1101,15 @@ DEP_FILES =  .deps/$(srcdir)/$(CONVERT_DIR)/gen-from-JIS.P \\\n .deps/java/awt/event/PaintEvent.P .deps/java/awt/event/TextEvent.P \\\n .deps/java/awt/event/TextListener.P \\\n .deps/java/awt/event/WindowAdapter.P .deps/java/awt/event/WindowEvent.P \\\n-.deps/java/awt/event/WindowListener.P .deps/java/awt/geom/Dimension2D.P \\\n-.deps/java/awt/geom/Point2D.P .deps/java/awt/image/ImageConsumer.P \\\n+.deps/java/awt/event/WindowListener.P \\\n+.deps/java/awt/geom/AffineTransform.P .deps/java/awt/geom/Dimension2D.P \\\n+.deps/java/awt/geom/Ellipse2D.P \\\n+.deps/java/awt/geom/IllegalPathStateException.P \\\n+.deps/java/awt/geom/NoninvertibleTransformException.P \\\n+.deps/java/awt/geom/PathIterator.P .deps/java/awt/geom/Point2D.P \\\n+.deps/java/awt/geom/Rectangle2D.P \\\n+.deps/java/awt/geom/RectangularShape.P \\\n+.deps/java/awt/image/ImageConsumer.P \\\n .deps/java/awt/image/ImageObserver.P \\\n .deps/java/awt/image/ImageProducer.P .deps/java/awt/peer/ButtonPeer.P \\\n .deps/java/awt/peer/CanvasPeer.P \\\n@@ -1714,7 +1751,7 @@ distdir: $(DISTFILES)\n \t@for file in $(DISTFILES); do \\\n \t  d=$(srcdir); \\\n \t  if test -d $$d/$$file; then \\\n-\t    cp -pr $$d/$$file $(distdir)/$$file; \\\n+\t    cp -pr $$/$$file $(distdir)/$$file; \\\n \t  else \\\n \t    test -f $(distdir)/$$file \\\n \t    || ln $$d/$$file $(distdir)/$$file 2> /dev/null \\"}, {"sha": "bfdbb39531b3e0b659543bd31bf261bab8146453", "filename": "libjava/java/awt/Adjustable.java", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8039a4ea734415951af932bb5dc93a9cbc5f13dc/libjava%2Fjava%2Fawt%2FAdjustable.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8039a4ea734415951af932bb5dc93a9cbc5f13dc/libjava%2Fjava%2Fawt%2FAdjustable.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fawt%2FAdjustable.java?ref=8039a4ea734415951af932bb5dc93a9cbc5f13dc", "patch": "@@ -18,8 +18,8 @@\n \n public interface Adjustable\n {\n-  static final int HORIZONTAL;\n-  static final int VERTICAL;\n+  public static final int HORIZONTAL = 0;\n+  public static final int VERTICAL = 1;\n \n   public void addAdjustmentListener (AdjustmentListener l);\n   public int getBlockIncrement ();"}, {"sha": "230e56891bd18003112f957ef9f3fb369301cf17", "filename": "libjava/java/awt/Label.java", "status": "added", "additions": 76, "deletions": 0, "changes": 76, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8039a4ea734415951af932bb5dc93a9cbc5f13dc/libjava%2Fjava%2Fawt%2FLabel.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8039a4ea734415951af932bb5dc93a9cbc5f13dc/libjava%2Fjava%2Fawt%2FLabel.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fawt%2FLabel.java?ref=8039a4ea734415951af932bb5dc93a9cbc5f13dc", "patch": "@@ -0,0 +1,76 @@\n+/* Copyright (C) 2000  Free Software Foundation\n+\n+   This file is part of libjava.\n+\n+This software is copyrighted work licensed under the terms of the\n+Libjava License.  Please consult the file \"LIBJAVA_LICENSE\" for\n+details.  */\n+\n+package java.awt;\n+\n+/**\n+ * @author Tom Tromey <tromey@cygnus.com>\n+ * @date April 12, 2000\n+ */\n+\n+/* Status: addNotify() not written.  */\n+\n+public class Label extends Component\n+{\n+  public static final int CENTER = 1;\n+  public static final int LEFT = 0;\n+  public static final int RIGHT = 2;\n+\n+  public Label ()\n+  {\n+    this (\"\", LEFT);\n+  }\n+\n+  public Label (String text)\n+  {\n+    this (text, LEFT);\n+  }\n+\n+  public Label (String text, int alignment)\n+  {\n+    if (alignment != CENTER && alignment != LEFT && alignment != RIGHT)\n+      throw new IllegalArgumentException ();\n+    this.text = text;\n+    this.alignment = alignment;\n+  }\n+\n+  public void addNotify ()\n+  {\n+    // FIXME\n+  }\n+\n+  public int getAlignment ()\n+  {\n+    return alignment;\n+  }\n+\n+  public String getText ()\n+  {\n+    return text;\n+  }\n+\n+  protected String paramString ()\n+  {\n+    return \"Label[\" + alignment + \",\" + text + \"]\";\n+  }\n+\n+  public void setAlignment (int alignment)\n+  {\n+    if (alignment != CENTER && alignment != LEFT && alignment != RIGHT)\n+      throw new IllegalArgumentException ();\n+    this.alignment = alignment;\n+  }\n+\n+  public void setText (String text)\n+  {\n+    this.text = text;\n+  }\n+\n+  private String text;\n+  private int alignment;\n+}"}, {"sha": "8fb18a1493edd9633d8601b21d9458e217a37ef0", "filename": "libjava/java/awt/Rectangle.java", "status": "modified", "additions": 20, "deletions": 7, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8039a4ea734415951af932bb5dc93a9cbc5f13dc/libjava%2Fjava%2Fawt%2FRectangle.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8039a4ea734415951af932bb5dc93a9cbc5f13dc/libjava%2Fjava%2Fawt%2FRectangle.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fawt%2FRectangle.java?ref=8039a4ea734415951af932bb5dc93a9cbc5f13dc", "patch": "@@ -1,4 +1,4 @@\n-/* Copyright (C) 1999  Free Software Foundation\n+/* Copyright (C) 1999, 2000  Free Software Foundation\n \n    This file is part of libjava.\n \n@@ -7,11 +7,11 @@\n details.  */\n \n package java.awt;\n+import java.awt.geom.*;\n \n /* Status:  Mostly complete. Some of the Java2D stuff is commented out. */\n \n-// FIXME: Should extend Rectangle2D for 1.2 implementation\n-public class Rectangle implements Cloneable, Shape\n+public class Rectangle extends Rectangle2D implements Cloneable, Shape\n {\n   public int x;\n   public int y;\n@@ -151,6 +151,12 @@ public Point getLocation()\n     return new Point(x,y);\n   }\n \n+  public PathIterator getPathIterator (AffineTransform t)\n+  {\n+    // FIXME\n+    return null;\n+  }\n+\n   public Dimension getSize()\n   {\n     return new Dimension(width, height);\n@@ -307,25 +313,32 @@ public Rectangle union(Rectangle r)\n   }\n \n   // Commented out until we have Rectangle2D\n-  /*\n   public Rectangle2D createIntersection(Rectangle2D r)\n   {\n+    // FIXME: maybe we should consider returning a Rectangle or\n+    // Rectangle2D.Float depending on type of R.\n+    Rectangle2D.Double res = new Rectangle2D.Double ();\n+    intersect (this, r, res);\n+    return res;\n   }\n \n   public Rectangle2D createUnion(Rectangle2D r)\n   {\n+    // FIXME: maybe we should consider returning a Rectangle or\n+    // Rectangle2D.Float depending on type of R.\n+    Rectangle2D.Double res = new Rectangle2D.Double ();\n+    union (this, r, res);\n+    return res;\n   }\n \n   public Rectangle2D getBounds2D()\n   {\n+    return new Rectangle (x, y, width, height);\n   }\n-  */\n \n   public String toString()\n   {\n     return getClass().getName() + \"[x=\" + x + \",y=\" + y + \",width=\" + width + \n            \",height=\" + height + \"]\";\n   }\n-\n-\n }"}, {"sha": "6f791758ae395382e8b166198daeab3f5e4cf6c2", "filename": "libjava/java/awt/Scrollbar.java", "status": "added", "additions": 215, "deletions": 0, "changes": 215, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8039a4ea734415951af932bb5dc93a9cbc5f13dc/libjava%2Fjava%2Fawt%2FScrollbar.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8039a4ea734415951af932bb5dc93a9cbc5f13dc/libjava%2Fjava%2Fawt%2FScrollbar.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fawt%2FScrollbar.java?ref=8039a4ea734415951af932bb5dc93a9cbc5f13dc", "patch": "@@ -0,0 +1,215 @@\n+/* Copyright (C) 2000  Free Software Foundation\n+\n+   This file is part of libjava.\n+\n+This software is copyrighted work licensed under the terms of the\n+Libjava License.  Please consult the file \"LIBJAVA_LICENSE\" for\n+details.  */\n+\n+package java.awt;\n+import java.awt.event.*;\n+import java.util.Vector;\n+import java.util.Enumeration;\n+\n+/**\n+ * @author Tom Tromey <tromey@cygnus.com>\n+ * @date April 12, 2000\n+ */\n+\n+public class Scrollbar extends Component implements Adjustable\n+{\n+  public Scrollbar ()\n+  {\n+    this (VERTICAL, 0, 10, 0, 100);\n+  }\n+\n+  public Scrollbar (int orientation)\n+  {\n+    this (orientation, 0, 10, 0, 100);\n+  }\n+\n+  public Scrollbar (int orientation, int value, int visible,\n+\t\t    int minimum, int maximum)\n+  {\n+    if (orientation != HORIZONTAL && orientation != VERTICAL)\n+      throw new IllegalArgumentException ();\n+\n+    if (maximum < minimum)\n+      maximum = minimum;\n+    if (value < minimum)\n+      value = minimum;\n+    if (value > maximum)\n+      value = maximum;\n+\n+    this.orientation = orientation;\n+    this.value = value;\n+    this.visible = visible;\n+    this.minimum = minimum;\n+    this.maximum = maximum;\n+    this.unit = 1;\n+    this.listeners = new Vector ();\n+\n+    this.block = 0; // FIXME\n+  }\n+\n+  public void addNotify ()\n+  {\n+    // FIXME\n+  }\n+\n+  public int getOrientation ()\n+  {\n+    return orientation;\n+  }\n+\n+  public void setOrientation (int orientation)\n+  {\n+    if (orientation != HORIZONTAL && orientation != VERTICAL)\n+      throw new IllegalArgumentException ();\n+    this.orientation = orientation;\n+  }\n+\n+  public int getValue ()\n+  {\n+    return value;\n+  }\n+\n+  public void setValue (int value)\n+  {\n+    if (value < minimum)\n+      value = minimum;\n+    else if (value > maximum)\n+      value = maximum;\n+    this.value = value;\n+  }\n+\n+  public int getMinimum ()\n+  {\n+    return minimum;\n+  }\n+\n+  public void setMinimum (int minimum)\n+  {\n+    // FIXME: what if it is > max?\n+    this.minimum = minimum;\n+  }\n+\n+  public int getMaximum ()\n+  {\n+    return maximum;\n+  }\n+\n+  public void setMaximum (int maximum)\n+  {\n+    // FIXME: what if it is < min?\n+    this.maximum = maximum;\n+  }\n+\n+  public int getVisibleAmount ()\n+  {\n+    return visible;\n+  }\n+\n+  public int getVisible ()\n+  {\n+    return visible;\n+  }\n+\n+  public void setVisibleAmount (int visible)\n+  {\n+    this.visible = visible;\n+  }\n+\n+  public void setUnitIncrement (int v)\n+  {\n+    unit = v;\n+  }\n+\n+  public void setLineIncrement (int v)\n+  {\n+    unit = v;\n+  }\n+\n+  public int getUnitIncrement ()\n+  {\n+    return unit;\n+  }\n+\n+  public int getLineIncrement ()\n+  {\n+    return unit;\n+  }\n+\n+  public void setBlockIncrement (int v)\n+  {\n+    block = v;\n+  }\n+\n+  public void setPageIncrement (int v)\n+  {\n+    block = v;\n+  }\n+\n+  public int getBlockIncrement ()\n+  {\n+    return block;\n+  }\n+\n+  public int getPageIncrement ()\n+  {\n+    return block;\n+  }\n+\n+  public synchronized void setValues (int value, int visible,\n+\t\t\t\t      int minimum, int maximum)\n+  {\n+    // fixme;\n+  }\n+\n+  public void addAdjustmentListener (AdjustmentListener l)\n+  {\n+    if (l != null)\n+      {\n+\tlisteners.addElement (l);\n+\tenableEvents (0);\t// FIXME\n+      }\n+  }\n+\n+  public void removeAdjustmentListener (AdjustmentListener l)\n+  {\n+    if (l != null)\n+      listeners.remove (l);\n+  }\n+\n+  protected void processEvent (AWTEvent e)\n+  {\n+    if (e instanceof AdjustmentEvent)\n+      processAdjustmentEvent ((AdjustmentEvent) e);\n+    else\n+      super.processEvent (e);\n+  }\n+\n+  protected void processAdjustmentEvent (AdjustmentEvent e)\n+  {\n+    Enumeration en = listeners.elements ();\n+    while (en.hasMoreElements ())\n+      {\n+\tAdjustmentListener l = (AdjustmentListener) en.nextElement ();\n+\tl.adjustmentValueChanged (e);\n+      }\n+  }\n+\n+  protected String paramString ()\n+  {\n+    return null;\t\t// FIXME\n+  }\n+\n+  private Vector listeners;\n+  private int orientation;\n+  private int value;\n+  private int visible;\n+  private int minimum;\n+  private int maximum;\n+  private int unit;\n+  private int block;\n+}"}, {"sha": "a5cc730adab239f732e3c2b70d0d59aa578688b2", "filename": "libjava/java/awt/Shape.java", "status": "modified", "additions": 13, "deletions": 3, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8039a4ea734415951af932bb5dc93a9cbc5f13dc/libjava%2Fjava%2Fawt%2FShape.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8039a4ea734415951af932bb5dc93a9cbc5f13dc/libjava%2Fjava%2Fawt%2FShape.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fawt%2FShape.java?ref=8039a4ea734415951af932bb5dc93a9cbc5f13dc", "patch": "@@ -1,4 +1,4 @@\n-/* Copyright (C) 1999  Free Software Foundation\n+/* Copyright (C) 1999, 2000  Free Software Foundation\n \n    This file is part of libjava.\n \n@@ -7,17 +7,27 @@\n details.  */\n \n package java.awt;\n+import java.awt.geom.*;\n \n /**\n  * @author Per Bothner <bothner@cygnus.com>\n- * @date Fenruary 8, 1999.\n+ * @date February 8, 1999.\n  */\n \n /* Written using \"Java Class Libraries\", 2nd edition.\n- * Status:  Believed complete and correct.\n+ * Status:  Believed complete and correct to JDK 1.2.\n  */\n \n public interface Shape\n {\n+  public boolean contains (double x, double y);\n+  public boolean contains (double x, double y, double w, double h);\n+  public boolean contains (Point2D p);\n+  public boolean contains (Rectangle2D r);\n   public Rectangle getBounds ();\n+  public Rectangle2D getBounds2D ();\n+  public PathIterator getPathIterator (AffineTransform at);\n+  public PathIterator getPathIterator (AffineTransform at, double flatness);\n+  public boolean intersects (double x, double y, double w, double h);\n+  public boolean intersects (Rectangle2D r);\n }"}, {"sha": "71208c08ecc61ef4f0af2ec8c012e67defcd52a1", "filename": "libjava/java/awt/geom/AffineTransform.java", "status": "added", "additions": 652, "deletions": 0, "changes": 652, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8039a4ea734415951af932bb5dc93a9cbc5f13dc/libjava%2Fjava%2Fawt%2Fgeom%2FAffineTransform.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8039a4ea734415951af932bb5dc93a9cbc5f13dc/libjava%2Fjava%2Fawt%2Fgeom%2FAffineTransform.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fawt%2Fgeom%2FAffineTransform.java?ref=8039a4ea734415951af932bb5dc93a9cbc5f13dc", "patch": "@@ -0,0 +1,652 @@\n+/* Copyright (C) 2000  Free Software Foundation\n+\n+   This file is part of libjava.\n+\n+This software is copyrighted work licensed under the terms of the\n+Libjava License.  Please consult the file \"LIBJAVA_LICENSE\" for\n+details.  */\n+\n+package java.awt.geom;\n+import java.awt.*;\n+import java.io.Serializable;\n+\n+/**\n+ * @author Tom Tromey <tromey@cygnus.com>\n+ * @date April 16, 2000\n+ */\n+\n+/* Status: mostly complete.  Search for fixme to see problems.\n+   Also, TYPE_ returns are not handled correctly.  */\n+\n+public class AffineTransform implements Cloneable, Serializable\n+{\n+  static final int TYPE_IDENTITY = 0;\n+  static final int TYPE_FLIP = 64;\n+  static final int TYPE_GENERAL_ROTATION = 16;\n+  static final int TYPE_GENERAL_SCALE = 4;\n+  static final int TYPE_GENERAL_TRANSFORM = 32;\n+  static final int TYPE_MASK_ROTATION = 24;\n+  static final int TYPE_MASK_SCALE = 6;\n+  static final int TYPE_QUADRANT_ROTATION = 8;\n+  static final int TYPE_TRANSLATION = 1;\n+  static final int TYPE_UNIFORM_SCALE = 2;\n+\n+  public AffineTransform ()\n+  {\n+    setToIdentity ();\n+  }\n+\n+  public AffineTransform (AffineTransform tx)\n+  {\n+    setTransform (tx);\n+  }\n+\n+  public AffineTransform (float m00, float m10,\n+\t\t\t  float m01, float m11,\n+\t\t\t  float m02, float m12)\n+  {\n+    this.m00 = m00;\n+    this.m10 = m10;\n+    this.m01 = m01;\n+    this.m11 = m11;\n+    this.m02 = m02;\n+    this.m12 = m12;\n+    this.type = 0; // fixme;\n+  }\n+\n+  public AffineTransform (float[] flatmatrix)\n+  {\n+    m00 = flatmatrix[0];\n+    m10 = flatmatrix[1];\n+    m01 = flatmatrix[2];\n+    m11 = flatmatrix[3];\n+    if (flatmatrix.length >= 6)\n+      {\n+\tm02 = flatmatrix[4];\n+\tm12 = flatmatrix[5];\n+      }\n+  }\n+\n+  public AffineTransform (double m00, double m10, double m01,\n+\t\t\t  double m11, double m02, double m12)\n+  {\n+    this.m00 = m00;\n+    this.m10 = m10;\n+    this.m01 = m01;\n+    this.m11 = m11;\n+    this.m02 = m02;\n+    this.m12 = m12;\n+    this.type = TYPE_GENERAL_TRANSFORM;\n+  }\n+\n+  public AffineTransform (double[] flatmatrix)\n+  {\n+    m00 = flatmatrix[0];\n+    m10 = flatmatrix[1];\n+    m01 = flatmatrix[2];\n+    m11 = flatmatrix[3];\n+    if (flatmatrix.length >= 6)\n+      {\n+\tm02 = flatmatrix[4];\n+\tm12 = flatmatrix[5];\n+      }\n+  }\n+\n+  public static AffineTransform getTranslateInstance (double tx, double ty)\n+  {\n+    AffineTransform t = new AffineTransform ();\n+    t.setToTranslation (tx, ty);\n+    return t;\n+  }\n+\n+  public static AffineTransform getRotateInstance (double theta)\n+  {\n+    AffineTransform t = new AffineTransform ();\n+    t.setToRotation (theta);\n+    return t;\n+  }\n+\n+  public static AffineTransform getRotateInstance (double theta,\n+\t\t\t\t\t\t   double x, double y)\n+  {\n+    AffineTransform t = new AffineTransform ();\n+    t.rotate (theta, x, y);\n+    return t;\n+  }\n+\n+  public static AffineTransform getScaleInstance (double sx, double sy)\n+  {\n+    AffineTransform t = new AffineTransform ();\n+    t.setToScale (sx, sy);\n+    return t;\n+  }\n+\n+  public static AffineTransform getShearInstance (double shx, double shy)\n+  {\n+    AffineTransform t = new AffineTransform ();\n+    t.setToShear (shx, shy);\n+    return t;\n+  }\n+\n+  public int getType ()\n+  {\n+    return type;\n+  }\n+\n+  public double getDeterminant ()\n+  {\n+    return m00 * m11 - m01 * m10;\n+  }\n+\n+  public void getMatrix (double[] flatmatrix)\n+  {\n+    flatmatrix[0] = m00;\n+    flatmatrix[1] = m10;\n+    flatmatrix[2] = m01;\n+    flatmatrix[3] = m11;\n+    if (flatmatrix.length >= 6)\n+      {\n+\tflatmatrix[4] = m02;\n+\tflatmatrix[5] = m12;\n+      }\n+  }\n+\n+  public double getScaleX ()\n+  {\n+    return m00;\n+  }\n+\n+  public double getScaleY ()\n+  {\n+    return m11;\n+  }\n+\n+  public double getShearX ()\n+  {\n+    return m01;\n+  }\n+\n+  public double getShearY ()\n+  {\n+    return m10;\n+  }\n+\n+  public double getTranslateX ()\n+  {\n+    return m02;\n+  }\n+\n+  public double getTranslateY ()\n+  {\n+    return m12;\n+  }\n+\n+  public void translate (double tx, double ty)\n+  {\n+    m02 += tx * m00 + ty * m01;\n+    m12 += tx * m10 + ty * m11;\n+  }\n+\n+  public void rotate (double theta)\n+  {\n+    double c = Math.cos (theta);\n+    double s = Math.sin (theta);\n+    double n00 = m00 *  c + m01 * s;\n+    double n01 = m00 * -s + m01 * c;\n+    double n10 = m10 *  c + m11 * s;\n+    double n11 = m10 * -s + m11 * c;\n+\n+    m00 = n00;\n+    m01 = n01;\n+    m10 = n10;\n+    m11 = n11;\n+  }\n+\n+  public void rotate (double theta, double x, double y)\n+  {\n+    translate (x, y);\n+    rotate (theta);\n+    translate (-x, -y);\n+  }\n+\n+  public void scale (double sx, double sy)\n+  {\n+    m00 *= sx;\n+    m01 *= sy;\n+    m10 *= sx;\n+    m11 *= sy;\n+  }\n+\n+  public void shear (double shx, double shy)\n+  {\n+    double n00 = m00 + shx * m01;\n+    double n01 = shx * m00 + m01;\n+    double n10 = m10 * shy + m11;\n+    double n11 = shx * m10 + m11;\n+\n+    m00 = n00;\n+    m01 = n01;\n+    m10 = n10;\n+    m11 = n11;\n+  }\n+\n+  public void setToIdentity ()\n+  {\n+    m00 = m11 = 1;\n+    m01 = m02 = m10 = m12 = 0;\n+    type = TYPE_IDENTITY;\n+  }\n+\n+  public void setToTranslation (double tx, double ty)\n+  {\n+    m00 = m11 = 1;\n+    m01 = m10 = 0;\n+    m02 = tx;\n+    m12 = ty;\n+    type = TYPE_TRANSLATION;\n+  }\n+\n+  public void setToRotation (double theta)\n+  {\n+    double c = Math.cos (theta);\n+    double s = Math.sin (theta);\n+\n+    m00 = c;\n+    m01 = -s;\n+    m02 = 0;\n+    m10 = s;\n+    m11 = c;\n+    m12 = 0;\n+    type = TYPE_GENERAL_ROTATION;\n+  }\n+\n+  public void setToScale (double sx, double sy)\n+  {\n+    m00 = sx;\n+    m01 = m02 = m10 = m12 = 0;\n+    m11 = sy;\n+    type = (sx == sy) ? TYPE_UNIFORM_SCALE : TYPE_GENERAL_SCALE;\n+  }\n+\n+  public void setToShear (double shx, double shy)\n+  {\n+    m00 = m11 = 1;\n+    m01 = shx;\n+    m10 = shy;\n+    m02 = m12 = 0;\n+    type = 0;\t\t\t// FIXME\n+  }\n+\n+  public void setTransform (AffineTransform tx)\n+  {\n+    m00 = tx.m00;\n+    m01 = tx.m01;\n+    m02 = tx.m02;\n+    m10 = tx.m10;\n+    m11 = tx.m11;\n+    m12 = tx.m12;\n+    type = tx.type;\n+  }\n+\n+  public void setTransform (double m00, double m10, double m01,\n+\t\t\t    double m11, double m02, double m12)\n+  {\n+    this.m00 = m00;\n+    this.m10 = m10;\n+    this.m01 = m01;\n+    this.m11 = m11;\n+    this.m02 = m02;\n+    this.m12 = m12;\n+    this.type = 0;\t\t// FIXME\n+  }\n+\n+  public void concatentate (AffineTransform tx)\n+  {\n+    double n00 = m00 * tx.m00 + m01 * tx.m10;\n+    double n01 = m00 * tx.m01 + m01 * tx.m11;\n+    double n02 = m00 * tx.m02 + m01 * tx.m12 + m02;\n+    double n10 = m10 * tx.m00 + m11 * tx.m10;\n+    double n11 = m10 * tx.m01 + m11 * tx.m11;\n+    double n12 = m10 * tx.m02 + m11 * tx.m12 + m12;\n+\n+    m00 = n00;\n+    m01 = n01;\n+    m02 = n02;\n+    m10 = n10;\n+    m11 = n11;\n+    m12 = n12;\n+  }\n+\n+  public void preConcatenate (AffineTransform tx)\n+  {\n+    double n00 = tx.m00 * m00 + tx.m01 * m10;\n+    double n01 = tx.m00 * m01 + tx.m01 * m11;\n+    double n02 = tx.m00 * m02 + tx.m01 * m12 + tx.m02;\n+    double n10 = tx.m10 * m00 + tx.m11 * m10;\n+    double n11 = tx.m10 * m01 + tx.m11 * m11;\n+    double n12 = tx.m10 * m02 + tx.m11 * m12 + tx.m12;\n+\n+    m00 = n00;\n+    m01 = n01;\n+    m02 = n02;\n+    m10 = n10;\n+    m11 = n11;\n+    m12 = n12;\n+  }\n+\n+  public AffineTransform createInverse ()\n+    throws NoninvertibleTransformException\n+  {\n+    double det = getDeterminant ();\n+    if (det == 0)\n+      throw new NoninvertibleTransformException (\"can't invert transform\");\n+\n+    double i00 = m11 / det;\n+    double i01 = -m10 / det;\n+    double i02 = 0;\n+    double i10 = m01 / det;\n+    double i11 = -m00 / det;\n+    double i12 = 0;\n+\n+    return new AffineTransform (i00, i01, i02,\n+\t\t\t\ti10, i11, i12);\n+  }\n+\n+  public Point2D transform (Point2D src, Point2D dst)\n+  {\n+    if (dst == null)\n+      dst = new Point2D.Double ();\n+\n+    // We compute and set separately to correctly overwrite if\n+    // src==dst.\n+    double x = src.getX ();\n+    double y = src.getY ();\n+    double nx = m00 * x + m01 * y + m02;\n+    double ny = m10 * x + m11 * y + m12;\n+\n+    dst.setLocation (nx, ny);\n+\n+    return dst;\n+  }\n+\n+  public void transform (Point2D[] src, int srcOff,\n+\t\t\t Point2D[] dst, int dstOff,\n+\t\t\t int num)\n+  {\n+    while (num-- > 0)\n+      {\n+\tdst[dstOff] = transform (src[srcOff], dst[dstOff]);\n+\t++srcOff;\n+\t++dstOff;\n+      }\n+  }\n+\n+  public void transform (float[] srcPts, int srcOff,\n+\t\t\t float[] dstPts, int dstOff,\n+\t\t\t int num)\n+  {\n+    while (num-- > 0)\n+      {\n+\tfloat x = srcPts[srcOff];\n+\tfloat y = srcPts[srcOff + 1];\n+\tsrcOff += 2;\n+\tfloat nx = (float) (m00 * x + m01 * y + m02);\n+\tfloat ny = (float) (m10 * x + m10 * y + m12);\n+\tdstPts[dstOff] = nx;\n+\tdstPts[dstOff + 1] = ny;\n+\tdstOff += 2;\n+      }\n+  }\n+\n+  public void transform (double[] srcPts, int srcOff,\n+\t\t\t double[] dstPts, int dstOff,\n+\t\t\t int num)\n+  {\n+    while (num-- > 0)\n+      {\n+\tdouble x = srcPts[srcOff];\n+\tdouble y = srcPts[srcOff + 1];\n+\tsrcOff += 2;\n+\tdouble nx = m00 * x + m01 * y + m02;\n+\tdouble ny = m10 * x + m10 * y + m12;\n+\tdstPts[dstOff] = nx;\n+\tdstPts[dstOff + 1] = ny;\n+\tdstOff += 2;\n+      }\n+  }\n+\n+  public void transform (float[] srcPts, int srcOff,\n+\t\t\t double[] dstPts, int dstOff,\n+\t\t\t int num)\n+  {\n+    while (num-- > 0)\n+      {\n+\tfloat x = srcPts[srcOff];\n+\tfloat y = srcPts[srcOff + 1];\n+\tsrcOff += 2;\n+\tdouble nx = m00 * x + m01 * y + m02;\n+\tdouble ny = m10 * x + m10 * y + m12;\n+\tdstPts[dstOff] = nx;\n+\tdstPts[dstOff + 1] = ny;\n+\tdstOff += 2;\n+      }\n+  }\n+\n+  public void transform (double[] srcPts, int srcOff,\n+\t\t\t float[] dstPts, int dstOff,\n+\t\t\t int num)\n+  {\n+    while (num-- > 0)\n+      {\n+\tdouble x = srcPts[srcOff];\n+\tdouble y = srcPts[srcOff + 1];\n+\tsrcOff += 2;\n+\tfloat nx = (float) (m00 * x + m01 * y + m02);\n+\tfloat ny = (float) (m10 * x + m10 * y + m12);\n+\tdstPts[dstOff] = nx;\n+\tdstPts[dstOff + 1] = ny;\n+\tdstOff += 2;\n+      }\n+  }\n+\n+  public Point2D inverseTransform (Point2D src, Point2D dst)\n+    throws NoninvertibleTransformException\n+  {\n+    double det = getDeterminant ();\n+    if (det == 0)\n+      throw new NoninvertibleTransformException (\"couldn't invert transform\");\n+\n+    if (dst == null)\n+      dst = new Point2D.Double ();\n+    double x = src.getX ();\n+    double y = src.getY ();\n+    double nx = (m11 * x + - m10 * y) / det;\n+    double ny = (m01 * x + - m00 * y) / det;\n+    dst.setLocation (nx, ny);\n+    return dst;\n+  }\n+\n+  public void inverseTransform (double[] srcPts, int srcOff,\n+\t\t\t\tdouble[] dstPts, int dstOff,\n+\t\t\t\tint num)\n+    throws NoninvertibleTransformException\n+  {\n+    double det = getDeterminant ();\n+    if (det == 0)\n+      throw new NoninvertibleTransformException (\"couldn't invert transform\");\n+\n+    while (num-- > 0)\n+      {\n+\tdouble x = srcPts[srcOff];\n+\tdouble y = srcPts[srcOff + 1];\n+\tdouble nx = (m11 * x + - m10 * y) / det;\n+\tdouble ny = (m01 * x + - m00 * y) / det;\n+\tdstPts[dstOff] = nx;\n+\tdstPts[dstOff + 1] = ny;\n+\tdstOff += 2;\n+\tsrcOff += 2;\n+      }\n+  }\n+\n+  public Point2D deltaTransform (Point2D src, Point2D dst)\n+  {\n+    if (dst == null)\n+      dst = new Point2D.Double ();\n+    double x = src.getX ();\n+    double y = src.getY ();\n+    double nx = m00 * x + m01 * y;\n+    double ny = m10 * x + m11 * y;\n+    dst.setLocation (nx, ny);\n+    return dst;\n+  }\n+\n+  public void deltaTransform (double[] srcPts, int srcOff,\n+\t\t\t      double[] dstPts, int dstOff,\n+\t\t\t      int num)\n+  {\n+    while (num-- > 0)\n+      {\n+\tdouble x = srcPts[srcOff];\n+\tdouble y = srcPts[srcOff + 1];\n+\tdouble nx = m00 * x + m01 * y;\n+\tdouble ny = m10 * x + m11 * y;\n+\tdstPts[dstOff] = nx;\n+\tdstPts[dstOff + 1] = ny;\n+\tdstOff += 2;\n+\tsrcOff += 2;\n+      }\n+  }\n+\n+  public Shape createTransformedShape (Shape pSrc)\n+  {\n+    // FIXME\n+    return null;\n+  }\n+\n+  public String toString ()\n+  {\n+    // FIXME\n+    return null;\n+  }\n+\n+  public boolean isIdentity ()\n+  {\n+    return (m00 == 1 && m01 == 0 && m02 == 0\n+\t    && m10 == 0 && m11 == 1 && m12 == 0);\n+  }\n+\n+  public Object clone ()\n+  {\n+    return new AffineTransform (this);\n+  }\n+\n+  public int hashCode ()\n+  {\n+    // FIXME\n+    return 23;\n+  }\n+\n+  public boolean equals (Object obj)\n+  {\n+    if (! (obj instanceof AffineTransform))\n+      return false;\n+    AffineTransform t = (AffineTransform) obj;\n+    return (m00 == t.m00 && m01 == t.m01 && m02 == t.m02\n+\t    && m10 == t.m10 && m11 == t.m11 && m12 == t.m12);\n+  }\n+\n+  // This iterator is used to apply an AffineTransform to some other\n+  // iterator.  It is not private because we want to be able to access\n+  // it from the rest of this package.\n+  class Iterator implements PathIterator\n+  {\n+    // The iterator we are applied to.\n+    private PathIterator subIterator;\n+\n+    public Iterator (PathIterator subIterator)\n+    {\n+      this.subIterator = subIterator;\n+    }\n+\n+    public int currentSegment (double[] coords)\n+    {\n+      int r = subIterator.currentSegment (coords);\n+      int count = 0;\n+\n+      switch (r)\n+\t{\n+\tcase SEG_CUBICTO:\n+\t  count = 3;\n+\t  break;\n+\n+\tcase SEG_QUADTO:\n+\t  count = 2;\n+\t  break;\n+\n+\tcase SEG_LINETO:\n+\tcase SEG_MOVETO:\n+\t  count = 1;\n+\t  break;\n+\n+\tdefault:\n+\t  // Error.  But how to report?\n+\tcase SEG_CLOSE:\n+\t  break;\n+\t}\n+\n+      transform (coords, 0, coords, 0, count);\n+\n+      return r;\n+    }\n+\n+    public int currentSegment (float[] coords)\n+    {\n+      int r = subIterator.currentSegment (coords);\n+      int count = 0;\n+\n+      switch (r)\n+\t{\n+\tcase SEG_CUBICTO:\n+\t  count = 3;\n+\t  break;\n+\n+\tcase SEG_QUADTO:\n+\t  count = 2;\n+\t  break;\n+\n+\tcase SEG_LINETO:\n+\tcase SEG_MOVETO:\n+\t  count = 1;\n+\t  break;\n+\n+\tdefault:\n+\t  // Error.  But how to report?\n+\tcase SEG_CLOSE:\n+\t  break;\n+\t}\n+\n+      transform (coords, 0, coords, 0, count);\n+\n+      return r;\n+    }\n+\n+    public int getWindingRule ()\n+    {\n+      return subIterator.getWindingRule ();\n+    }\n+\n+    public boolean isDone ()\n+    {\n+      return subIterator.isDone ();\n+    }\n+\n+    public void next ()\n+    {\n+      subIterator.next ();\n+    }\n+  }\n+\n+  private double m00, m01, m02;\n+  private double m10, m11, m12;\n+  private int type;\n+}"}, {"sha": "ab830ffea931f99efb207a0f6c1bd101146810f1", "filename": "libjava/java/awt/geom/Ellipse2D.java", "status": "added", "additions": 176, "deletions": 0, "changes": 176, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8039a4ea734415951af932bb5dc93a9cbc5f13dc/libjava%2Fjava%2Fawt%2Fgeom%2FEllipse2D.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8039a4ea734415951af932bb5dc93a9cbc5f13dc/libjava%2Fjava%2Fawt%2Fgeom%2FEllipse2D.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fawt%2Fgeom%2FEllipse2D.java?ref=8039a4ea734415951af932bb5dc93a9cbc5f13dc", "patch": "@@ -0,0 +1,176 @@\n+/* Copyright (C) 2000  Free Software Foundation\n+\n+   This file is part of libjava.\n+\n+This software is copyrighted work licensed under the terms of the\n+Libjava License.  Please consult the file \"LIBJAVA_LICENSE\" for\n+details.  */\n+\n+package java.awt.geom;\n+\n+/**\n+ * @author Tom Tromey <tromey@cygnus.com>\n+ * @date April 16, 2000\n+ */\n+\n+public abstract class Ellipse2D extends RectangularShape\n+{\n+  protected Ellipse2D ()\n+  {\n+  }\n+\n+  public boolean contains (double x, double y)\n+  {\n+    double rx = getWidth () / 2;\n+    double ry = getHeight () / 2;\n+    double tx = (x - getCenterX ()) / rx;\n+    double ty = (y - getCenterY ()) / ry;\n+    return tx * tx + ty * ty <= 1.0;\n+  }\n+\n+  public boolean contains (double x, double y, double w, double h)\n+  {\n+    double x2 = x + w;\n+    double y2 = y + h;\n+    return (contains (x, y) && contains (x, y2)\n+\t    && contains (x2, y) && contains (x2, y2));\n+  }\n+\n+  public PathIterator getPathIterator (AffineTransform at)\n+  {\n+    // fixme;\n+    return null;\n+  }\n+\n+  public boolean intersects (double x, double y, double w, double h)\n+  {\n+    // fixme\n+    return false;\n+  }\n+\n+  public static class Double extends Ellipse2D\n+  {\n+    public double height;\n+    public double width;\n+    public double x;\n+    public double y;\n+\n+    public Double ()\n+    {\n+      height = width = x = y = 0;\n+    }\n+\n+    public Double (double x, double y, double w, double h)\n+    {\n+      this.x = x;\n+      this.y = y;\n+      this.height = h;\n+      this.width = w;\n+    }\n+\n+    public Rectangle2D getBounds2D ()\n+    {\n+      return new Rectangle2D.Double (x, y, width, height);\n+    }\n+\n+    public double getHeight ()\n+    {\n+      return height;\n+    }\n+\n+    public double getWidth ()\n+    {\n+      return width;\n+    }\n+\n+    public double getX ()\n+    {\n+      return x;\n+    }\n+\n+    public double getY ()\n+    {\n+      return y;\n+    }\n+\n+    public boolean isEmpty ()\n+    {\n+      return height <= 0 || width <= 0;\n+    }\n+\n+    public void setFrame (double x, double y, double w, double h)\n+    {\n+      this.x = x;\n+      this.y = y;\n+      this.height = h;\n+      this.width = w;\n+    }\n+  }\n+\n+  public static class Float extends Ellipse2D\n+  {\n+    public float height;\n+    public float width;\n+    public float x;\n+    public float y;\n+\n+    public Float ()\n+    {\n+      height = width = x = y = 0;\n+    }\n+\n+    public Float (float x, float y, float w, float h)\n+    {\n+      this.x = x;\n+      this.y = y;\n+      this.height = h;\n+      this.width = w;\n+    }\n+\n+    public Rectangle2D getBounds2D ()\n+    {\n+      return new Rectangle2D.Float (x, y, width, height);\n+    }\n+\n+    public double getHeight ()\n+    {\n+      return height;\n+    }\n+\n+    public double getWidth ()\n+    {\n+      return width;\n+    }\n+\n+    public double getX ()\n+    {\n+      return x;\n+    }\n+\n+    public double getY ()\n+    {\n+      return y;\n+    }\n+\n+    public boolean isEmpty ()\n+    {\n+      return height <= 0 || width <= 0;\n+    }\n+\n+    public void setFrame (float x, float y, float w, float h)\n+    {\n+      this.x = x;\n+      this.y = y;\n+      this.height = h;\n+      this.width = w;\n+    }\n+\n+    public void setFrame (double x, double y, double w, double h)\n+    {\n+      this.x = (float) x;\n+      this.y = (float) y;\n+      this.height = (float) h;\n+      this.width = (float) w;\n+    }\n+  }\n+}"}, {"sha": "d8022e54bb484574c279f48a6becffb83ef79ced", "filename": "libjava/java/awt/geom/IllegalPathStateException.java", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8039a4ea734415951af932bb5dc93a9cbc5f13dc/libjava%2Fjava%2Fawt%2Fgeom%2FIllegalPathStateException.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8039a4ea734415951af932bb5dc93a9cbc5f13dc/libjava%2Fjava%2Fawt%2Fgeom%2FIllegalPathStateException.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fawt%2Fgeom%2FIllegalPathStateException.java?ref=8039a4ea734415951af932bb5dc93a9cbc5f13dc", "patch": "@@ -0,0 +1,27 @@\n+/* Copyright (C) 2000  Free Software Foundation\n+\n+   This file is part of libjava.\n+\n+This software is copyrighted work licensed under the terms of the\n+Libjava License.  Please consult the file \"LIBJAVA_LICENSE\" for\n+details.  */\n+\n+package java.awt.geom;\n+\n+/**\n+ * @author Tom Tromey <tromey@cygnus.com>\n+ * @date July 17, 2000\n+ */\n+\n+public class IllegalPathStateException extends RuntimeException\n+{\n+  public IllegalPathStateException ()\n+  {\n+    super ();\n+  }\n+\n+  public IllegalPathStateException (String msg)\n+  {\n+    super (msg);\n+  }\n+}"}, {"sha": "2ff006f40c5c07fc97f6cc5353f0a0351fdc69df", "filename": "libjava/java/awt/geom/NoninvertibleTransformException.java", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8039a4ea734415951af932bb5dc93a9cbc5f13dc/libjava%2Fjava%2Fawt%2Fgeom%2FNoninvertibleTransformException.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8039a4ea734415951af932bb5dc93a9cbc5f13dc/libjava%2Fjava%2Fawt%2Fgeom%2FNoninvertibleTransformException.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fawt%2Fgeom%2FNoninvertibleTransformException.java?ref=8039a4ea734415951af932bb5dc93a9cbc5f13dc", "patch": "@@ -0,0 +1,22 @@\n+/* Copyright (C) 2000  Free Software Foundation\n+\n+   This file is part of libjava.\n+\n+This software is copyrighted work licensed under the terms of the\n+Libjava License.  Please consult the file \"LIBJAVA_LICENSE\" for\n+details.  */\n+\n+package java.awt.geom;\n+\n+/**\n+ * @author Tom Tromey <tromey@cygnus.com>\n+ * @date July 15, 2000\n+ */\n+\n+public class NoninvertibleTransformException extends Exception\n+{\n+  public NoninvertibleTransformException (String s)\n+  {\n+    super (s);\n+  }\n+}"}, {"sha": "49d9a3bb3c1340ec6b9683e15cf36ebe47a95b7c", "filename": "libjava/java/awt/geom/PathIterator.java", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8039a4ea734415951af932bb5dc93a9cbc5f13dc/libjava%2Fjava%2Fawt%2Fgeom%2FPathIterator.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8039a4ea734415951af932bb5dc93a9cbc5f13dc/libjava%2Fjava%2Fawt%2Fgeom%2FPathIterator.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fawt%2Fgeom%2FPathIterator.java?ref=8039a4ea734415951af932bb5dc93a9cbc5f13dc", "patch": "@@ -0,0 +1,31 @@\n+/* Copyright (C) 2000  Free Software Foundation\n+\n+   This file is part of libjava.\n+\n+This software is copyrighted work licensed under the terms of the\n+Libjava License.  Please consult the file \"LIBJAVA_LICENSE\" for\n+details.  */\n+\n+package java.awt.geom;\n+\n+/**\n+ * @author Tom Tromey <tromey@cygnus.com>\n+ * @date April 16, 2000\n+ */\n+\n+public interface PathIterator\n+{\n+  public static final int SEG_CLOSE = 4;\n+  public static final int SEG_CUBICTO = 3;\n+  public static final int SEG_LINETO = 1;\n+  public static final int SEG_MOVETO = 0;\n+  public static final int SEG_QUADTO = 2;\n+  public static final int WIND_EVEN_ODD = 0;\n+  public static final int WIND_NON_ZERO = 1;\n+\n+  public int currentSegment (double[] coords);\n+  public int currentSegment (float[] coords);\n+  public int getWindingRule ();\n+  public boolean isDone ();\n+  public void next ();\n+}"}, {"sha": "93ed520f1a5fd33c05bd7537bf046bce1683e140", "filename": "libjava/java/awt/geom/Point2D.java", "status": "modified", "additions": 80, "deletions": 2, "changes": 82, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8039a4ea734415951af932bb5dc93a9cbc5f13dc/libjava%2Fjava%2Fawt%2Fgeom%2FPoint2D.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8039a4ea734415951af932bb5dc93a9cbc5f13dc/libjava%2Fjava%2Fawt%2Fgeom%2FPoint2D.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fawt%2Fgeom%2FPoint2D.java?ref=8039a4ea734415951af932bb5dc93a9cbc5f13dc", "patch": "@@ -1,4 +1,4 @@\n-/* Copyright (C) 1999  Free Software Foundation\n+/* Copyright (C) 1999, 2000  Free Software Foundation\n \n    This file is part of libjava.\n \n@@ -10,7 +10,7 @@\n \n /**\n  * @author Per Bothner <bothner@cygnus.com>\n- * @date Fenruary 8, 1999.\n+ * @date February 8, 1999.\n  */\n \n /* Written using \"Java Class Libraries\", 2nd edition, plus online\n@@ -66,4 +66,82 @@ public Object clone()\n   {\n     return super.clone();\n   }\n+\n+  public static class Double extends Point2D\n+  {\n+    public double x;\n+    public double y;\n+\n+    public Double ()\n+    {\n+      x = 0;\n+      y = 0;\n+    }\n+\n+    public Double (double x, double y)\n+    {\n+      this.x = x;\n+      this.y = y;\n+    }\n+\n+    public double getX ()\n+    {\n+      return x;\n+    }\n+\n+    public double getY ()\n+    {\n+      return y;\n+    }\n+\n+    public void setLocation (double x, double y)\n+    {\n+      this.x = x;\n+      this.y = y;\n+    }\n+\n+    public String toString ()\n+    {\n+      return \"(\" + x + \", \" + y + \")\";\n+    }\n+  }\n+\n+  public static class Float extends Point2D\n+  {\n+    public float x;\n+    public float y;\n+\n+    public Float ()\n+    {\n+      x = 0;\n+      y = 0;\n+    }\n+\n+    public Float (float x, float y)\n+    {\n+      this.x = x;\n+      this.y = y;\n+    }\n+\n+    public double getX ()\n+    {\n+      return x;\n+    }\n+\n+    public double getY ()\n+    {\n+      return y;\n+    }\n+\n+    public void setLocation (double x, double y)\n+    {\n+      this.x = (float) x;\n+      this.y = (float) y;\n+    }\n+\n+    public String toString ()\n+    {\n+      return \"(\" + x + \", \" + y + \")\";\n+    }\n+  }\n }"}, {"sha": "16ab826ee9aa9a696d23cec550e048976a8d2d7b", "filename": "libjava/java/awt/geom/Rectangle2D.java", "status": "added", "additions": 428, "deletions": 0, "changes": 428, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8039a4ea734415951af932bb5dc93a9cbc5f13dc/libjava%2Fjava%2Fawt%2Fgeom%2FRectangle2D.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8039a4ea734415951af932bb5dc93a9cbc5f13dc/libjava%2Fjava%2Fawt%2Fgeom%2FRectangle2D.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fawt%2Fgeom%2FRectangle2D.java?ref=8039a4ea734415951af932bb5dc93a9cbc5f13dc", "patch": "@@ -0,0 +1,428 @@\n+/* Copyright (C) 2000  Free Software Foundation\n+\n+   This file is part of libjava.\n+\n+This software is copyrighted work licensed under the terms of the\n+Libjava License.  Please consult the file \"LIBJAVA_LICENSE\" for\n+details.  */\n+\n+package java.awt.geom;\n+\n+/**\n+ * @author Tom Tromey <tromey@cygnus.com>\n+ * @date April 16, 2000\n+ */\n+\n+public abstract class Rectangle2D extends RectangularShape\n+{\n+  public static final int OUT_LEFT = 1;\n+  public static final int OUT_TOP = 2;\n+  public static final int OUT_RIGHT = 4;\n+  public static final int OUT_BOTTOM = 8;\n+\n+  protected Rectangle2D ()\n+  {\n+  }\n+\n+  /** Set the bounding box of this rectangle.\n+   * @param x X coordinate\n+   * @param y Y coordinate\n+   * @param w Width\n+   * @param h Height\n+   */\n+  public abstract void setRect (double x, double y, double w, double h);\n+\n+  /** Set the bounding box of this rectangle.\n+   * @param r  Bounding rectangle.\n+   */\n+  public void setRect (Rectangle2D r)\n+  {\n+    setRect (r.getX (), r.getY (), r.getWidth (), r.getHeight ());\n+  }\n+\n+  /** Returns true if line segment intersects interior of this\n+   * rectangle.\n+   * @param x1 X coordinate of first end of line segment\n+   * @param y1 Y coordinate of first end of line segment\n+   * @param x2 X coordinate of second end of line segment\n+   * @param y1 Y coordinate of segment end of line segment\n+   */\n+  public boolean intersectsLine (double x1, double y1, double x2, double y2)\n+  {\n+    int o1 = outcode (x1, y1);\n+    int o2 = outcode (x2, y2);\n+\n+    double mx = getX ();\n+    double my = getY ();\n+    double mx2 = getWidth ();\n+    double my2 = getHeight ();\n+    x1 -= mx;\n+    x2 -= mx;\n+    y1 -= my;\n+    y2 -= my;\n+\n+    // Here we handle all lines that stay entirely on one side of the\n+    // rectangle.  We also handle some lines that intersect the\n+    // rectangle.  All vertical and horizontal lines are handled here.\n+    int xor = o1 ^ o2;\n+    int or  = o1 | o2;\n+    if ((xor & (OUT_BOTTOM | OUT_TOP)) == 0)\n+      {\n+\tif ((or & (OUT_BOTTOM | OUT_TOP)) != 0)\n+\t  return false;\n+\treturn ((o1 & (OUT_LEFT | OUT_RIGHT)) != 0\n+\t\t|| (o2 & (OUT_LEFT | OUT_RIGHT)) != 0);\n+      }\n+    else if ((xor & (OUT_LEFT | OUT_RIGHT)) == 0)\n+      {\n+\tif ((or & (OUT_LEFT | OUT_RIGHT)) != 0)\n+\t  return false;\n+\treturn ((o1 & (OUT_BOTTOM | OUT_TOP)) != 0\n+\t\t|| (o2 & (OUT_BOTTOM | OUT_TOP)) != 0);\n+      }\n+\n+    double dx = x2 - x1;\n+    double dy = y2 - y1;\n+\n+    double t1l = - x1 / dx;\n+    double t1h = (mx2 - x1) / dx;\n+\n+    if (t1l >= t1h)\n+      return false;\n+    double t2l = - y1 / dy;\n+    double t2h = (my2 - y1) / dy;\n+\n+    if (t2l >= t2h || t2l >= t1h || t2h < t1l)\n+      return false;\n+    return true;\n+  }\n+\n+  /** Return true if line segment intersects interior of this\n+   * rectangle.\n+   * @param l The line segment\n+   */\n+//    public boolean intersectsLine (Line2D l)\n+//    {\n+//    }\n+\n+  public abstract int outcode (double x, double y);\n+\n+  public int outcode (Point2D p)\n+  {\n+    return outcode (p.getX (), p.getY ());\n+  }\n+\n+  /** Set bounding frame for this rectangle.\n+   * @param x X coordinate\n+   * @param y Y coordinate\n+   * @param w Width\n+   * @param h Height\n+   */\n+  public void setFrame (double x, double y, double w, double h)\n+  {\n+    setRect (x, y, w, h);\n+  }\n+\n+  public Rectangle2D getBounds2D ()\n+  {\n+    // FIXME.\n+    return (Rectangle2D) clone ();\n+  }\n+\n+  public boolean contains (double x, double y)\n+  {\n+    double mx = getX ();\n+    double mw = getWidth ();\n+    if (x < mx || x >= mx + mw)\n+      return false;\n+    double my = getY ();\n+    double mh = getHeight ();\n+    return y >= my && y < my + mh;\n+  }\n+\n+  public boolean intersects (double x, double y, double w, double h)\n+  {\n+    double mx = getX ();\n+    double mw = getWidth ();\n+    if (x < mx || x >= mx + mw || x + w < mx || x + w >= mx + mw)\n+      return false;\n+    double my = getY ();\n+    double mh = getHeight ();\n+    return y >= my && y < my + mh && y + h >= my && y + h < my + mh;\n+  }\n+\n+  public boolean contains (double x, double y, double w, double h)\n+  {\n+    return contains (x, y) && contains (x + w, y + h);\n+  }\n+\n+  public abstract Rectangle2D createIntersection (Rectangle2D r);\n+\n+  public static void intersect (Rectangle2D src1, Rectangle2D src2,\n+\t\t\t\tRectangle2D dest)\n+  {\n+    double x1l = src1.getMinX ();\n+    double x2l = src2.getMinX ();\n+    double nxl = Math.max (x1l, x2l);\n+    double x1h = src1.getMaxX ();\n+    double x2h = src2.getMaxX ();\n+    double nxh = Math.min (x1h, x2h);\n+    if (nxh < nxl)\n+      nxh = nxl;\n+    double y1l = src1.getMinY ();\n+    double y2l = src2.getMinY ();\n+    double nyl = Math.max (y1l, y2l);\n+    double y1h = src1.getMaxY ();\n+    double y2h = src2.getMaxY ();\n+    double nyh = Math.min (y1h, y2h);\n+    if (nyh < nyl)\n+      nyh = nyl;\n+    dest.setFrameFromDiagonal (nxl, nyl, nxh, nyh);\n+  }\n+\n+  public abstract Rectangle2D createUnion (Rectangle2D r);\n+\n+  public static void union (Rectangle2D src1, Rectangle2D src2,\n+\t\t\t    Rectangle2D dest)\n+  {\n+    double x1l = src1.getMinX ();\n+    double x2l = src2.getMinX ();\n+    double nxl = Math.max (x1l, x2l);\n+    double x1h = src1.getMaxX ();\n+    double x2h = src2.getMaxX ();\n+    double nxh = Math.min (x1h, x2h);\n+    double y1l = src1.getMinY ();\n+    double y2l = src2.getMinY ();\n+    double nyl = Math.max (y1l, y2l);\n+    double y1h = src1.getMaxY ();\n+    double y2h = src2.getMaxY ();\n+    double nyh = Math.min (y1h, y2h);\n+    dest.setFrameFromDiagonal (nxl, nyl, nxh, nyh);\n+  }\n+\n+  public void add (double newx, double newy)\n+  {\n+    double minx = Math.min (getMinX (), newx);\n+    double maxx = Math.max (getMaxX (), newx);\n+    double miny = Math.min (getMinY (), newy);\n+    double maxy = Math.max (getMaxY (), newy);\n+    setFrameFromDiagonal (minx, miny, maxx, maxy);\n+  }\n+\n+  public void add (Point2D p)\n+  {\n+    add (p.getX (), p.getY ());\n+  }\n+\n+  public void add (Rectangle2D r)\n+  {\n+    add (r.getMinX (), r.getMinY ());\n+    add (r.getMaxX (), r.getMaxY ());\n+  }\n+\n+  public PathIterator getPathIterator (AffineTransform at)\n+  {\n+    // We know the superclass just ignores the flatness parameter.\n+    return getPathIterator (at, 0);\n+  }\n+\n+  public static class Double extends Rectangle2D\n+  {\n+    public double height;\n+    public double width;\n+    public double x;\n+    public double y;\n+\n+    public Double ()\n+    {\n+      height = width = x = y = 0;\n+    }\n+\n+    public Double (double x, double y, double w, double h)\n+    {\n+      this.x = x;\n+      this.y = y;\n+      this.width = w;\n+      this.height = h;\n+    }\n+\n+    public double getX ()\n+    {\n+      return x;\n+    }\n+\n+    public double getY ()\n+    {\n+      return y;\n+    }\n+\n+    public double getWidth ()\n+    {\n+      return width;\n+    }\n+\n+    public double getHeight ()\n+    {\n+      return height;\n+    }\n+\n+    public boolean isEmpty ()\n+    {\n+      return width <= 0 || height <= 0;\n+    }\n+\n+    public void setRect (double x, double y, double w, double h)\n+    {\n+      this.x = x;\n+      this.y = y;\n+      this.width = w;\n+      this.height = h;\n+    }\n+\n+    public void setRect (Rectangle2D r)\n+    {\n+      this.x = r.getX ();\n+      this.y = r.getY ();\n+      this.width = r.getWidth ();\n+      this.height = r.getHeight ();\n+    }\n+\n+    public int outcode (double x, double y)\n+    {\n+      int code = 0;\n+      if (x < this.x)\n+\tcode |= OUT_LEFT;\n+      else if (x >= this.x + this.width)\n+\tcode |= OUT_RIGHT;\n+      if (y < this.y)\n+\tcode |= OUT_TOP;\n+      else if (y >= this.y + this.height)\n+\tcode |= OUT_BOTTOM;\n+      return code;\n+    }\n+\n+    public Rectangle2D getBounds2D ()\n+    {\n+      return new Rectangle2D.Double (x, y, width, height);\n+    }\n+\n+    public Rectangle2D createIntersection (Rectangle2D r)\n+    {\n+      Double res = new Double ();\n+      intersect (this, r, res);\n+      return res;\n+    }\n+\n+    public Rectangle2D createUnion (Rectangle2D r)\n+    {\n+      Double res = new Double ();\n+      union (this, r, res);\n+      return res;\n+    }\n+\n+    public String toString ()\n+    {\n+      return \"fixme\";\n+    }\n+  }\n+\n+  public static class Float extends Rectangle2D\n+  {\n+    public float height;\n+    public float width;\n+    public float x;\n+    public float y;\n+\n+    public Float ()\n+    {\n+      height = width = x = y = 0;\n+    }\n+\n+    public Float (float x, float y, float w, float h)\n+    {\n+      this.x = x;\n+      this.y = y;\n+      this.width = w;\n+      this.height = h;\n+    }\n+\n+    public double getX ()\n+    {\n+      return x;\n+    }\n+\n+    public double getY ()\n+    {\n+      return y;\n+    }\n+\n+    public double getWidth ()\n+    {\n+      return width;\n+    }\n+\n+    public double getHeight ()\n+    {\n+      return height;\n+    }\n+\n+    public boolean isEmpty ()\n+    {\n+      return width <= 0 || height <= 0;\n+    }\n+\n+    public void setRect (double x, double y, double w, double h)\n+    {\n+      this.x = (float) x;\n+      this.y = (float) y;\n+      this.width = (float) w;\n+      this.height = (float) h;\n+    }\n+\n+    public void setRect (Rectangle2D r)\n+    {\n+      this.x = (float) r.getX ();\n+      this.y = (float) r.getY ();\n+      this.width = (float) r.getWidth ();\n+      this.height = (float) r.getHeight ();\n+    }\n+\n+    public int outcode (double x, double y)\n+    {\n+      int code = 0;\n+      if (x < this.x)\n+\tcode |= OUT_LEFT;\n+      else if (x >= this.x + this.width)\n+\tcode |= OUT_RIGHT;\n+      if (y < this.y)\n+\tcode |= OUT_TOP;\n+      else if (y >= this.y + this.height)\n+\tcode |= OUT_BOTTOM;\n+      return code;\n+    }\n+\n+    public Rectangle2D getBounds2D ()\n+    {\n+      return new Rectangle2D.Float (x, y, width, height);\n+    }\n+\n+    public Rectangle2D createIntersection (Rectangle2D r)\n+    {\n+      Float res = new Float ();\n+      intersect (this, r, res);\n+      return res;\n+    }\n+\n+    public Rectangle2D createUnion (Rectangle2D r)\n+    {\n+      Float res = new Float ();\n+      union (this, r, res);\n+      return res;\n+    }\n+\n+    public String toString ()\n+    {\n+      return \"fixme\";\n+    }\n+  }\n+}"}, {"sha": "b581c63525b641a965ed74e6ffc89bc62ce08175", "filename": "libjava/java/awt/geom/RectangularShape.java", "status": "added", "additions": 293, "deletions": 0, "changes": 293, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8039a4ea734415951af932bb5dc93a9cbc5f13dc/libjava%2Fjava%2Fawt%2Fgeom%2FRectangularShape.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8039a4ea734415951af932bb5dc93a9cbc5f13dc/libjava%2Fjava%2Fawt%2Fgeom%2FRectangularShape.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fawt%2Fgeom%2FRectangularShape.java?ref=8039a4ea734415951af932bb5dc93a9cbc5f13dc", "patch": "@@ -0,0 +1,293 @@\n+/* Copyright (C) 2000  Free Software Foundation\n+\n+   This file is part of libjava.\n+\n+This software is copyrighted work licensed under the terms of the\n+Libjava License.  Please consult the file \"LIBJAVA_LICENSE\" for\n+details.  */\n+\n+package java.awt.geom;\n+import java.awt.*;\n+import java.awt.geom.Rectangle2D;\n+\n+/**\n+ * @author Tom Tromey <tromey@cygnus.com>\n+ * @date April 16, 2000\n+ */\n+\n+public abstract class RectangularShape implements Shape, Cloneable\n+{\n+  protected RectangularShape ()\n+  {\n+  }\n+\n+  public abstract double getX ();\n+  public abstract double getY ();\n+  public abstract double getWidth ();\n+  public abstract double getHeight ();\n+\n+  public double getMinX ()\n+  {    \n+    return Math.min (getX (), getX () + getWidth ());\n+  }\n+\n+  public double getMinY ()\n+  {\n+    return Math.min (getY (), getY () + getHeight ());\n+  }\n+\n+  public double getMaxX ()\n+  {    \n+    return Math.max (getX (), getX () + getWidth ());\n+  }\n+\n+  public double getMaxY ()\n+  {\n+    return Math.max (getY (), getY () + getHeight ());\n+  }\n+\n+  public double getCenterX ()\n+  {\n+    return getX () + getWidth () / 2;\n+  }\n+\n+  public double getCenterY ()\n+  {\n+    return getY () + getHeight () / 2;\n+  }\n+\n+  public Rectangle2D getFrame ()\n+  {\n+    return new Rectangle2D.Double (getX (), getY (),\n+\t\t\t\t   getWidth (), getHeight ());\n+  }\n+\n+  public abstract boolean isEmpty ();\n+  public abstract void setFrame (double x, double y, double w, double h);\n+\n+  public void setFrame (Point2D loc, Dimension2D size)\n+  {\n+    setFrame (loc.getX (), loc.getY (), size.getWidth (), size.getHeight ());\n+  }\n+\n+  public void setFrame (Rectangle2D r)\n+  {\n+    setFrame (r.getX (), r.getY (), r.getWidth (), r.getHeight ());\n+  }\n+\n+  public void setFrameFromDiagonal (double x1, double y1,\n+\t\t\t\t    double x2, double y2)\n+  {\n+    if (x1 > x2)\n+      {\n+\tdouble t = x2;\n+\tx2 = x1;\n+\tx1 = t;\n+      }\n+    if (y1 > y2)\n+      {\n+\tdouble t = y2;\n+\ty2 = y1;\n+\ty1 = t;\n+      }\n+    setFrame (x1, y1, x2 - x1, y2 - y1);\n+  }\n+\n+  public void setFrameFromDiagonal (Point2D p1, Point2D p2)\n+  {\n+    setFrameFromDiagonal (p1.getX (), p1.getY (),\n+\t\t\t  p2.getX (), p2.getY ());\n+  }\n+\n+  public void setFrameFromCenter (double centerX, double centerY,\n+\t\t\t\t  double cornerX, double cornerY)\n+  {\n+    double halfw = Math.abs (cornerX - centerX);\n+    double halfh = Math.abs (cornerY - centerY);\n+    setFrame (centerX - halfw, centerY - halfh,\n+\t      2 * halfw, 2 * halfh);\n+  }\n+\n+  public void setFrameFromCenter (Point2D center, Point2D corner)\n+  {\n+    setFrameFromCenter (center.getX (), center.getY (),\n+\t\t\tcorner.getX (), corner.getY ());\n+  }\n+\n+  public boolean contains (Point2D p)\n+  {\n+    double x = p.getX ();\n+    double y = p.getY ();\n+    double rx = getX ();\n+    double ry = getY ();\n+    double w = getWidth ();\n+    double h = getHeight ();\n+    return x >= rx && x < rx + w && y >= ry && y < ry + h;\n+  }\n+\n+  public boolean intersects (Rectangle2D r)\n+  {\n+    double x = getX ();\n+    double w = getWidth ();\n+    double mx = r.getX ();\n+    double mw = r.getWidth ();\n+    if (x < mx || x >= mx + mw || x + w < mx || x + w >= mx + mw)\n+      return false;\n+    double y = getY ();\n+    double h = getHeight ();\n+    double my = r.getY ();\n+    double mh = r.getHeight ();\n+    return y >= my && y < my + mh && y + h >= my && y + h < my + mh;\n+  }\n+\n+  private boolean containsPoint (double x, double y)\n+  {\n+    double mx = getX ();\n+    double mw = getWidth ();\n+    if (x < mx || x >= mx + mw)\n+      return false;\n+    double my = getY ();\n+    double mh = getHeight ();\n+    return y >= my && y < my + mh;\n+  }\n+\n+  public boolean contains (Rectangle2D r)\n+  {\n+    return (containsPoint (r.getMinX (), r.getMinY ())\n+\t    && containsPoint (r.getMaxX (), r.getMaxY ()));\n+  }\n+\n+  public Rectangle getBounds ()\n+  {\n+    return new Rectangle ((int) getX (), (int) getY (),\n+\t\t\t  (int) getWidth (), (int) getHeight ());\n+  }\n+\n+  public PathIterator getPathIterator (AffineTransform at, double flatness)\n+  {\n+    // FIXME\n+    // return new AffineTransform.Iterator (new Iterator ());\n+    return null;\n+  }\n+\n+  public Object clone ()\n+  {\n+    return super.clone ();\n+  }\n+\n+  // This implements the PathIterator for all RectangularShape objects\n+  // that don't override getPathIterator.\n+  private class Iterator implements PathIterator\n+  {\n+    // Our current coordinate.\n+    private int coord;\n+\n+    private static final int START = 0;\n+    private static final int END_PLUS_ONE = 5;\n+\n+    public Iterator ()\n+    {\n+      coord = START;\n+    }\n+\n+    public int currentSegment (double[] coords)\n+    {\n+      int r;\n+      switch (coord)\n+\t{\n+\tcase 0:\n+\t  coords[0] = getX ();\n+\t  coords[1] = getY ();\n+\t  r = SEG_MOVETO;\n+\t  break;\n+\n+\tcase 1:\n+\t  coords[0] = getX () + getWidth ();\n+\t  coords[1] = getY ();\n+\t  r = SEG_LINETO;\n+\t  break;\n+\n+\tcase 2:\n+\t  coords[0] = getX () + getWidth ();\n+\t  coords[1] = getY () + getHeight ();\n+\t  r = SEG_LINETO;\n+\t  break;\n+\n+\tcase 3:\n+\t  coords[0] = getX ();\n+\t  coords[1] = getY () + getHeight ();\n+\t  r = SEG_LINETO;\n+\t  break;\n+\n+\tcase 4:\n+\t  r = SEG_CLOSE;\n+\t  break;\t  \n+\n+\tdefault:\n+\t  // It isn't clear what to do if the caller calls us after\n+\t  // isDone returns true.\n+\t  r = SEG_CLOSE;\n+\t  break;\n+\t}\n+\n+      return r;\n+    }\n+\n+    public int currentSegment (float[] coords)\n+    {\n+      int r;\n+      switch (coord)\n+\t{\n+\tcase 0:\n+\t  coords[0] = (float) getX ();\n+\t  coords[1] = (float) getY ();\n+\t  r = SEG_MOVETO;\n+\t  break;\n+\n+\tcase 1:\n+\t  coords[0] = (float) (getX () + getWidth ());\n+\t  coords[1] = (float) getY ();\n+\t  r = SEG_LINETO;\n+\t  break;\n+\n+\tcase 2:\n+\t  coords[0] = (float) (getX () + getWidth ());\n+\t  coords[1] = (float) (getY () + getHeight ());\n+\t  r = SEG_LINETO;\n+\t  break;\n+\n+\tcase 3:\n+\t  coords[0] = (float) getX ();\n+\t  coords[1] = (float) (getY () + getHeight ());\n+\t  r = SEG_LINETO;\n+\t  break;\n+\n+\tcase 4:\n+\tdefault:\n+\t  // It isn't clear what to do if the caller calls us after\n+\t  // isDone returns true.  We elect to keep returning\n+\t  // SEG_CLOSE.\n+\t  r = SEG_CLOSE;\n+\t  break;\t  \n+\t}\n+\n+      return r;\n+    }\n+\n+    public int getWindingRule ()\n+    {\n+      return WIND_NON_ZERO;\n+    }\n+\n+    public boolean isDone ()\n+    {\n+      return coord == END_PLUS_ONE;\n+    }\n+\n+    public void next ()\n+    {\n+      if (coord < END_PLUS_ONE)\n+\t++coord;\n+    }\n+  }\n+}"}]}