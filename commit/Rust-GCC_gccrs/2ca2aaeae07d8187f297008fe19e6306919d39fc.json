{"sha": "2ca2aaeae07d8187f297008fe19e6306919d39fc", "node_id": "C_kwDOANBUbNoAKDJjYTJhYWVhZTA3ZDgxODdmMjk3MDA4ZmUxOWU2MzA2OTE5ZDM5ZmM", "commit": {"author": {"name": "Pierre-Emmanuel Patry", "email": "pierre-emmanuel.patry@embecosm.com", "date": "2023-03-23T10:02:47Z"}, "committer": {"name": "Arthur Cohen", "email": "arthur.cohen@embecosm.com", "date": "2023-03-30T14:48:27Z"}, "message": "ast: Implement remaining expr TokenStream visitor\n\nImplement the missing expression functions visitors for TokenStream.\n\ngcc/rust/ChangeLog:\n\n\t* ast/rust-ast-tokenstream.cc (TokenStream::visit): Add\n\tvisitors.\n\t(TokenStream::visit_closure_common): Merge common code for\n\tclosure visitors.\n\t* ast/rust-ast-tokenstream.h: Add function prototype.\n\t* ast/rust-expr.h: Add missing move attribute getter.\n\nSigned-off-by: Pierre-Emmanuel Patry <pierre-emmanuel.patry@embecosm.com>", "tree": {"sha": "205d7eabe6cbfef0543905f7f11550c36c393008", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/205d7eabe6cbfef0543905f7f11550c36c393008"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2ca2aaeae07d8187f297008fe19e6306919d39fc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2ca2aaeae07d8187f297008fe19e6306919d39fc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2ca2aaeae07d8187f297008fe19e6306919d39fc", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2ca2aaeae07d8187f297008fe19e6306919d39fc/comments", "author": {"login": "P-E-P", "id": 32375388, "node_id": "MDQ6VXNlcjMyMzc1Mzg4", "avatar_url": "https://avatars.githubusercontent.com/u/32375388?v=4", "gravatar_id": "", "url": "https://api.github.com/users/P-E-P", "html_url": "https://github.com/P-E-P", "followers_url": "https://api.github.com/users/P-E-P/followers", "following_url": "https://api.github.com/users/P-E-P/following{/other_user}", "gists_url": "https://api.github.com/users/P-E-P/gists{/gist_id}", "starred_url": "https://api.github.com/users/P-E-P/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/P-E-P/subscriptions", "organizations_url": "https://api.github.com/users/P-E-P/orgs", "repos_url": "https://api.github.com/users/P-E-P/repos", "events_url": "https://api.github.com/users/P-E-P/events{/privacy}", "received_events_url": "https://api.github.com/users/P-E-P/received_events", "type": "User", "site_admin": false}, "committer": {"login": "CohenArthur", "id": 43524065, "node_id": "MDQ6VXNlcjQzNTI0MDY1", "avatar_url": "https://avatars.githubusercontent.com/u/43524065?v=4", "gravatar_id": "", "url": "https://api.github.com/users/CohenArthur", "html_url": "https://github.com/CohenArthur", "followers_url": "https://api.github.com/users/CohenArthur/followers", "following_url": "https://api.github.com/users/CohenArthur/following{/other_user}", "gists_url": "https://api.github.com/users/CohenArthur/gists{/gist_id}", "starred_url": "https://api.github.com/users/CohenArthur/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/CohenArthur/subscriptions", "organizations_url": "https://api.github.com/users/CohenArthur/orgs", "repos_url": "https://api.github.com/users/CohenArthur/repos", "events_url": "https://api.github.com/users/CohenArthur/events{/privacy}", "received_events_url": "https://api.github.com/users/CohenArthur/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bea0c13139d48294d26f0a72401d6e3fb6a48d77", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bea0c13139d48294d26f0a72401d6e3fb6a48d77", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bea0c13139d48294d26f0a72401d6e3fb6a48d77"}], "stats": {"total": 196, "additions": 162, "deletions": 34}, "files": [{"sha": "8dae3e57e673f3eed82af48cfdd931b7eaa138bd", "filename": "gcc/rust/ast/rust-ast-tokenstream.cc", "status": "modified", "additions": 156, "deletions": 34, "changes": 190, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ca2aaeae07d8187f297008fe19e6306919d39fc/gcc%2Frust%2Fast%2Frust-ast-tokenstream.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ca2aaeae07d8187f297008fe19e6306919d39fc/gcc%2Frust%2Fast%2Frust-ast-tokenstream.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fast%2Frust-ast-tokenstream.cc?ref=2ca2aaeae07d8187f297008fe19e6306919d39fc", "patch": "@@ -1099,16 +1099,57 @@ TokenStream::visit (CallExpr &expr)\n }\n \n void\n-TokenStream::visit (MethodCallExpr &)\n-{}\n+TokenStream::visit (MethodCallExpr &expr)\n+{\n+  visit (expr.get_receiver_expr ());\n+  tokens.push_back (Rust::Token::make (DOT, expr.get_locus ()));\n+  visit (expr.get_method_name ());\n+  tokens.push_back (Rust::Token::make (LEFT_PAREN, Location ()));\n+  visit_items_joined_by_separator (expr.get_params (), COMMA);\n+  trailing_comma ();\n+  tokens.push_back (Rust::Token::make (RIGHT_PAREN, Location ()));\n+}\n \n void\n-TokenStream::visit (FieldAccessExpr &)\n-{}\n+TokenStream::visit (FieldAccessExpr &expr)\n+{\n+  visit (expr.get_receiver_expr ());\n+  tokens.push_back (Rust::Token::make (DOT, expr.get_locus ()));\n+  auto field_name = expr.get_field_name ();\n+  tokens.push_back (\n+    Rust::Token::make_identifier (Location (), std::move (field_name)));\n+}\n \n void\n-TokenStream::visit (ClosureExprInner &)\n-{}\n+TokenStream::visit (ClosureParam &param)\n+{\n+  visit_items_as_lines (param.get_outer_attrs ());\n+  visit (param.get_pattern ());\n+  if (param.has_type_given ())\n+    {\n+      tokens.push_back (Rust::Token::make (COLON, param.get_locus ()));\n+      visit (param.get_type ());\n+    }\n+}\n+\n+void\n+TokenStream::visit_closure_common (ClosureExpr &expr)\n+{\n+  if (expr.get_has_move ())\n+    {\n+      tokens.push_back (Rust::Token::make (MOVE, expr.get_locus ()));\n+    }\n+  tokens.push_back (Rust::Token::make (PIPE, Location ()));\n+  visit_items_joined_by_separator (expr.get_params (), COMMA);\n+  tokens.push_back (Rust::Token::make (PIPE, Location ()));\n+}\n+\n+void\n+TokenStream::visit (ClosureExprInner &expr)\n+{\n+  visit_closure_common (expr);\n+  visit (expr.get_definition_expr ());\n+}\n \n void\n TokenStream::visit (BlockExpr &expr)\n@@ -1124,16 +1165,31 @@ TokenStream::visit (BlockExpr &expr)\n }\n \n void\n-TokenStream::visit (ClosureExprInnerTyped &)\n-{}\n+TokenStream::visit (ClosureExprInnerTyped &expr)\n+{\n+  visit_closure_common (expr);\n+  tokens.push_back (Rust::Token::make (RETURN_TYPE, expr.get_locus ()));\n+  visit (expr.get_return_type ());\n+  visit (expr.get_definition_block ());\n+}\n \n void\n-TokenStream::visit (ContinueExpr &)\n-{}\n+TokenStream::visit (ContinueExpr &expr)\n+{\n+  tokens.push_back (Rust::Token::make (CONTINUE, expr.get_locus ()));\n+  if (expr.has_label ())\n+    visit (expr.get_label ());\n+}\n \n void\n-TokenStream::visit (BreakExpr &)\n-{}\n+TokenStream::visit (BreakExpr &expr)\n+{\n+  tokens.push_back (Rust::Token::make (BREAK, expr.get_locus ()));\n+  if (expr.has_label ())\n+    visit (expr.get_label ());\n+  if (expr.has_break_expr ())\n+    visit (expr.get_break_expr ());\n+}\n \n void\n TokenStream::visit (RangeFromToExpr &expr)\n@@ -1262,55 +1318,121 @@ TokenStream::visit (IfExpr &expr)\n void\n TokenStream::visit (IfExprConseqElse &expr)\n {\n-  tokens.push_back (Rust::Token::make (IF, expr.get_locus ()));\n-  visit (expr.get_condition_expr ());\n-  visit (expr.get_if_block ());\n+  visit (static_cast<IfExpr &> (expr));\n   tokens.push_back (Rust::Token::make (ELSE, expr.get_locus ()));\n   visit (expr.get_else_block ());\n }\n \n void\n TokenStream::visit (IfExprConseqIf &expr)\n {\n-  tokens.push_back (Rust::Token::make (IF, expr.get_locus ()));\n-  visit (expr.get_condition_expr ());\n-  visit (expr.get_if_block ());\n+  visit (static_cast<IfExpr &> (expr));\n   tokens.push_back (Rust::Token::make (ELSE, expr.get_locus ()));\n   // The \"if\" part of the \"else if\" is printed by the next visitor\n   visit (expr.get_conseq_if_expr ());\n }\n \n void\n-TokenStream::visit (IfExprConseqIfLet &)\n-{}\n+TokenStream::visit (IfExprConseqIfLet &expr)\n+{\n+  visit (static_cast<IfExpr &> (expr));\n+  tokens.push_back (Rust::Token::make (ELSE, expr.get_locus ()));\n+  visit (expr.get_conseq_if_let_expr ());\n+}\n \n void\n-TokenStream::visit (IfLetExpr &)\n-{}\n+TokenStream::visit (IfLetExpr &expr)\n+{\n+  tokens.push_back (Rust::Token::make (IF, expr.get_locus ()));\n+  tokens.push_back (Rust::Token::make (LET, Location ()));\n+  for (auto &pattern : expr.get_patterns ())\n+    {\n+      visit (pattern);\n+    }\n+  tokens.push_back (Rust::Token::make (EQUAL, Location ()));\n+  visit (expr.get_value_expr ());\n+  visit (expr.get_if_block ());\n+}\n \n void\n-TokenStream::visit (IfLetExprConseqElse &)\n-{}\n+TokenStream::visit (IfLetExprConseqElse &expr)\n+{\n+  visit (static_cast<IfLetExpr &> (expr));\n+  tokens.push_back (Rust::Token::make (ELSE, expr.get_locus ()));\n+  visit (expr.get_else_block ());\n+}\n \n void\n-TokenStream::visit (IfLetExprConseqIf &)\n-{}\n+TokenStream::visit (IfLetExprConseqIf &expr)\n+{\n+  visit (static_cast<IfLetExpr &> (expr));\n+  tokens.push_back (Rust::Token::make (ELSE, expr.get_locus ()));\n+  visit (expr.get_conseq_if_expr ());\n+}\n \n void\n-TokenStream::visit (IfLetExprConseqIfLet &)\n-{}\n+TokenStream::visit (IfLetExprConseqIfLet &expr)\n+{\n+  visit (static_cast<IfLetExpr &> (expr));\n+  tokens.push_back (Rust::Token::make (ELSE, expr.get_locus ()));\n+  visit (expr.get_conseq_if_let_expr ());\n+}\n \n void\n-TokenStream::visit (MatchExpr &)\n-{}\n+TokenStream::visit (MatchArm &arm)\n+{\n+  visit_items_as_lines (arm.get_outer_attrs ());\n+  for (auto &pattern : arm.get_patterns ())\n+    {\n+      visit (pattern);\n+    }\n+  if (arm.has_match_arm_guard ())\n+    {\n+      tokens.push_back (Rust::Token::make (IF, Location ()));\n+      visit (arm.get_guard_expr ());\n+    }\n+}\n \n void\n-TokenStream::visit (AwaitExpr &)\n-{}\n+TokenStream::visit (MatchCase &match_case)\n+{\n+  visit (match_case.get_arm ());\n+  tokens.push_back (Rust::Token::make (MATCH_ARROW, Location ()));\n+  visit (match_case.get_expr ());\n+  trailing_comma ();\n+}\n \n void\n-TokenStream::visit (AsyncBlockExpr &)\n-{}\n+TokenStream::visit (MatchExpr &expr)\n+{\n+  tokens.push_back (Rust::Token::make (MATCH_TOK, expr.get_locus ()));\n+  visit (expr.get_scrutinee_expr ());\n+  tokens.push_back (Rust::Token::make (LEFT_CURLY, Location ()));\n+  visit_items_as_lines (expr.get_inner_attrs ());\n+  for (auto &arm : expr.get_match_cases ())\n+    {\n+      visit (arm);\n+    }\n+  tokens.push_back (Rust::Token::make (RIGHT_CURLY, Location ()));\n+}\n+\n+void\n+TokenStream::visit (AwaitExpr &expr)\n+{\n+  visit (expr.get_awaited_expr ());\n+  tokens.push_back (Rust::Token::make (DOT, expr.get_locus ()));\n+  // TODO: Check status of await keyword (Context dependant ?)\n+  tokens.push_back (Rust::Token::make_identifier (Location (), \"await\"));\n+}\n+\n+void\n+TokenStream::visit (AsyncBlockExpr &expr)\n+{\n+  tokens.push_back (Rust::Token::make (ASYNC, expr.get_locus ()));\n+  if (expr.get_has_move ())\n+    tokens.push_back (Rust::Token::make (MOVE, Location ()));\n+  visit (expr.get_block_expr ());\n+}\n \n // rust-item.h\n "}, {"sha": "bf3e0b2cf6aa3f4a847013d9a3327c8c8f93c2d9", "filename": "gcc/rust/ast/rust-ast-tokenstream.h", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ca2aaeae07d8187f297008fe19e6306919d39fc/gcc%2Frust%2Fast%2Frust-ast-tokenstream.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ca2aaeae07d8187f297008fe19e6306919d39fc/gcc%2Frust%2Fast%2Frust-ast-tokenstream.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fast%2Frust-ast-tokenstream.h?ref=2ca2aaeae07d8187f297008fe19e6306919d39fc", "patch": "@@ -94,6 +94,8 @@ class TokenStream : public ASTVisitor\n   void visit_function_common (std::unique_ptr<Type> &return_type,\n \t\t\t      std::unique_ptr<BlockExpr> &block);\n \n+  void visit_closure_common (ClosureExpr &expr);\n+\n   void visit_loop_common (BaseLoopExpr &expr);\n   void visit (LoopLabel &label);\n \n@@ -170,6 +172,7 @@ class TokenStream : public ASTVisitor\n   void visit (CallExpr &expr);\n   void visit (MethodCallExpr &expr);\n   void visit (FieldAccessExpr &expr);\n+  void visit (ClosureParam &param);\n   void visit (ClosureExprInner &expr);\n   void visit (BlockExpr &expr);\n   void visit (ClosureExprInnerTyped &expr);\n@@ -195,6 +198,8 @@ class TokenStream : public ASTVisitor\n   void visit (IfLetExprConseqElse &expr);\n   void visit (IfLetExprConseqIf &expr);\n   void visit (IfLetExprConseqIfLet &expr);\n+  void visit (MatchArm &arm);\n+  void visit (MatchCase &arm);\n   void visit (MatchExpr &expr);\n   void visit (AwaitExpr &expr);\n   void visit (AsyncBlockExpr &expr);"}, {"sha": "ac32b98913defda9e9ac6209560500dd5240085d", "filename": "gcc/rust/ast/rust-expr.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ca2aaeae07d8187f297008fe19e6306919d39fc/gcc%2Frust%2Fast%2Frust-expr.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ca2aaeae07d8187f297008fe19e6306919d39fc/gcc%2Frust%2Fast%2Frust-expr.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fast%2Frust-expr.h?ref=2ca2aaeae07d8187f297008fe19e6306919d39fc", "patch": "@@ -4609,6 +4609,7 @@ class AsyncBlockExpr : public ExprWithBlock\n \n   std::string as_string () const override;\n \n+  bool get_has_move () { return has_move; }\n   Location get_locus () const override final { return locus; }\n \n   void accept_vis (ASTVisitor &vis) override;"}]}