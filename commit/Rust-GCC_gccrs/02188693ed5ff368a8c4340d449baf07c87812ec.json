{"sha": "02188693ed5ff368a8c4340d449baf07c87812ec", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDIxODg2OTNlZDVmZjM2OGE4YzQzNDBkNDQ5YmFmMDdjODc4MTJlYw==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@cygnus.com", "date": "2000-06-13T21:47:44Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2000-06-13T21:47:44Z"}, "message": "combine.c (subst): Use CLASS_CANNOT_CHANGE_MODE and CLASS_CANNOT_CHANGE_MODE_P instead of...\n\n        * combine.c (subst): Use CLASS_CANNOT_CHANGE_MODE and\n        CLASS_CANNOT_CHANGE_MODE_P instead of CLASS_CANNOT_CHANGE_SIZE\n        and hard-coded tests.\n        (simplify_set): Likewise.\n        (gen_lowpart_for_combine): Likewise.\n        * emit-rtl.c (gen_lowpart_common): Likewise.\n        * global.c (find_reg): Likewise.\n        * local-alloc.c (find_free_reg): Likewise.\n        * recog.c (register_operand): Likewise.\n        * regclass.c (init_reg_sets_1): Likewise.\n        (record_operand_costs, regclass): Likewise.\n        * reload.c (push_reload): Likewise.\n        * reload1.c (choose_reload_regs): Likewise.\n        * flow.c (mark_used_regs): Conditionally set REG_CHANGES_MODE.\n        * local-alloc.c (struct qty): Rename changes_size to changes_mode.\n        Update all references.\n        * regs.h (struct reg_info_def): Likewise.\n        (REG_CHANGES_MODE): Rename from REG_CHANGES_SIZE.\n        * tm.texi (CLASS_CANNOT_CHANGE_MODE): Document.\n        (CLASS_CANNOT_CHANGE_MODE_P): Likewise.\n\n        * config/alpha/alpha.h (CLASS_CANNOT_CHANGE_MODE): Rename.\n        (CLASS_CANNOT_CHANGE_MODE_P): New.\n        * config/mips/mips.h: Likewise.\n        * config/pa/pa32-regs.h: Likewise.\n        * config/pa/pa64-regs.h: Likewise.\n        * config/rs6000/rs6000.h: Likewise.\n        * config/sh/sh.h: Likewise.\n        * config/ia64/ia64.h (CLASS_CANNOT_CHANGE_MODE): New.\n        (CLASS_CANNOT_CHANGE_MODE_P): New.\n        * config/avr/avr.h (CLASS_CANNOT_CHANGE_SIZE): Remove dead code.\n        * config/d30v/d30v.h: Likewise.\n\nFrom-SVN: r34526", "tree": {"sha": "18a58d10aaf4181b83524ed496b484df5ceed88e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/18a58d10aaf4181b83524ed496b484df5ceed88e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/02188693ed5ff368a8c4340d449baf07c87812ec", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/02188693ed5ff368a8c4340d449baf07c87812ec", "html_url": "https://github.com/Rust-GCC/gccrs/commit/02188693ed5ff368a8c4340d449baf07c87812ec", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/02188693ed5ff368a8c4340d449baf07c87812ec/comments", "author": null, "committer": null, "parents": [{"sha": "d8058091121489b75926656e25d50e01ad1e46db", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d8058091121489b75926656e25d50e01ad1e46db", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d8058091121489b75926656e25d50e01ad1e46db"}], "stats": {"total": 332, "additions": 201, "deletions": 131}, "files": [{"sha": "d91bbe864a2b439b78c7cdb84c66dd423a386c7a", "filename": "gcc/ChangeLog", "status": "modified", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/02188693ed5ff368a8c4340d449baf07c87812ec/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/02188693ed5ff368a8c4340d449baf07c87812ec/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=02188693ed5ff368a8c4340d449baf07c87812ec", "patch": "@@ -1,3 +1,38 @@\n+2000-06-13  Richard Henderson  <rth@cygnus.com>\n+\n+\t* combine.c (subst): Use CLASS_CANNOT_CHANGE_MODE and\n+\tCLASS_CANNOT_CHANGE_MODE_P instead of CLASS_CANNOT_CHANGE_SIZE\n+\tand hard-coded tests.\n+\t(simplify_set): Likewise.\n+\t(gen_lowpart_for_combine): Likewise.\n+\t* emit-rtl.c (gen_lowpart_common): Likewise.\n+\t* global.c (find_reg): Likewise.\n+\t* local-alloc.c (find_free_reg): Likewise.\n+\t* recog.c (register_operand): Likewise.\n+\t* regclass.c (init_reg_sets_1): Likewise.\n+\t(record_operand_costs, regclass): Likewise.\n+\t* reload.c (push_reload): Likewise.\n+\t* reload1.c (choose_reload_regs): Likewise.\n+\t* flow.c (mark_used_regs): Conditionally set REG_CHANGES_MODE.\n+\t* local-alloc.c (struct qty): Rename changes_size to changes_mode.\n+\tUpdate all references.\n+\t* regs.h (struct reg_info_def): Likewise.\n+\t(REG_CHANGES_MODE): Rename from REG_CHANGES_SIZE.\n+\t* tm.texi (CLASS_CANNOT_CHANGE_MODE): Document.\n+\t(CLASS_CANNOT_CHANGE_MODE_P): Likewise.\n+\n+\t* config/alpha/alpha.h (CLASS_CANNOT_CHANGE_MODE): Rename.\n+\t(CLASS_CANNOT_CHANGE_MODE_P): New.\n+\t* config/mips/mips.h: Likewise.\n+\t* config/pa/pa32-regs.h: Likewise.\n+\t* config/pa/pa64-regs.h: Likewise.\n+\t* config/rs6000/rs6000.h: Likewise.\n+\t* config/sh/sh.h: Likewise.\n+\t* config/ia64/ia64.h (CLASS_CANNOT_CHANGE_MODE): New.\n+\t(CLASS_CANNOT_CHANGE_MODE_P): New.\n+\t* config/avr/avr.h (CLASS_CANNOT_CHANGE_SIZE): Remove dead code.\n+\t* config/d30v/d30v.h: Likewise.\n+\n 2000-06-13  J. David Anglin  <dave@hiauly1.hia.nrc.ca>\n \n \t* configure.in: Add AC_TYPE_GETGROUPS test."}, {"sha": "6010cb7905c5391eff4a351c138df8f5d00ad125", "filename": "gcc/combine.c", "status": "modified", "additions": 13, "deletions": 11, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/02188693ed5ff368a8c4340d449baf07c87812ec/gcc%2Fcombine.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/02188693ed5ff368a8c4340d449baf07c87812ec/gcc%2Fcombine.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcombine.c?ref=02188693ed5ff368a8c4340d449baf07c87812ec", "patch": "@@ -3400,15 +3400,15 @@ subst (x, from, to, in_dest, unique_copy)\n \t\t      )\n \t\t    return gen_rtx_CLOBBER (VOIDmode, const0_rtx);\n \n-#ifdef CLASS_CANNOT_CHANGE_SIZE\n+#ifdef CLASS_CANNOT_CHANGE_MODE\n \t\t  if (code == SUBREG\n \t\t      && GET_CODE (to) == REG\n \t\t      && REGNO (to) < FIRST_PSEUDO_REGISTER\n \t\t      && (TEST_HARD_REG_BIT\n-\t\t\t  (reg_class_contents[(int) CLASS_CANNOT_CHANGE_SIZE],\n+\t\t\t  (reg_class_contents[(int) CLASS_CANNOT_CHANGE_MODE],\n \t\t\t   REGNO (to)))\n-\t\t      && (GET_MODE_BITSIZE (GET_MODE (to)) \n-\t\t\t  != GET_MODE_BITSIZE (GET_MODE (x))))\n+\t\t      && CLASS_CANNOT_CHANGE_MODE_P (GET_MODE (to),\n+\t\t\t\t\t\t     GET_MODE (x)))\n \t\t    return gen_rtx_CLOBBER (VOIDmode, const0_rtx);\n #endif\n \n@@ -5036,13 +5036,13 @@ simplify_set (x)\n       && (GET_MODE_SIZE (GET_MODE (src))\n \t  < GET_MODE_SIZE (GET_MODE (SUBREG_REG (src))))\n #endif\n-#ifdef CLASS_CANNOT_CHANGE_SIZE\n+#ifdef CLASS_CANNOT_CHANGE_MODE\n       && ! (GET_CODE (dest) == REG && REGNO (dest) < FIRST_PSEUDO_REGISTER\n \t    && (TEST_HARD_REG_BIT\n-\t\t(reg_class_contents[(int) CLASS_CANNOT_CHANGE_SIZE],\n+\t\t(reg_class_contents[(int) CLASS_CANNOT_CHANGE_MODE],\n \t\t REGNO (dest)))\n-\t    && (GET_MODE_SIZE (GET_MODE (src))\n-\t\t!= GET_MODE_SIZE (GET_MODE (SUBREG_REG (src)))))\n+\t    && CLASS_CANNOT_CHANGE_MODE_P (GET_MODE (src),\n+\t\t\t\t\t   GET_MODE (SUBREG_REG (src))))\n #endif\t\t\t\t  \n       && (GET_CODE (dest) == REG\n \t  || (GET_CODE (dest) == SUBREG\n@@ -9680,13 +9680,15 @@ gen_lowpart_for_combine (mode, x)\n     }\n \n   result = gen_lowpart_common (mode, x);\n+#ifdef CLASS_CANNOT_CHANGE_MODE\n   if (result != 0\n       && GET_CODE (result) == SUBREG\n       && GET_CODE (SUBREG_REG (result)) == REG\n       && REGNO (SUBREG_REG (result)) >= FIRST_PSEUDO_REGISTER\n-      && (GET_MODE_SIZE (GET_MODE (result))\n-\t  != GET_MODE_SIZE (GET_MODE (SUBREG_REG (result)))))\n-    REG_CHANGES_SIZE (REGNO (SUBREG_REG (result))) = 1;\n+      && CLASS_CANNOT_CHANGE_MODE_P (GET_MODE (result),\n+\t\t\t\t     GET_MODE (SUBREG_REG (result))))\n+    REG_CHANGES_MODE (REGNO (SUBREG_REG (result))) = 1;\n+#endif\n \n   if (result)\n     return result;"}, {"sha": "0721392fcea7f73205f321c85962682a6aa26ea1", "filename": "gcc/config/alpha/alpha.h", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/02188693ed5ff368a8c4340d449baf07c87812ec/gcc%2Fconfig%2Falpha%2Falpha.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/02188693ed5ff368a8c4340d449baf07c87812ec/gcc%2Fconfig%2Falpha%2Falpha.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Falpha.h?ref=02188693ed5ff368a8c4340d449baf07c87812ec", "patch": "@@ -860,9 +860,14 @@ enum reg_class { NO_REGS, GENERAL_REGS, FLOAT_REGS, ALL_REGS,\n  ((GET_MODE_SIZE (MODE) + UNITS_PER_WORD - 1) / UNITS_PER_WORD)\n \n /* If defined, gives a class of registers that cannot be used as the\n-   operand of a SUBREG that changes the size of the object.  */\n+   operand of a SUBREG that changes the mode of the object illegally.  */\n \n-#define CLASS_CANNOT_CHANGE_SIZE\tFLOAT_REGS\n+#define CLASS_CANNOT_CHANGE_MODE\tFLOAT_REGS\n+\n+/* Defines illegal mode changes for CLASS_CANNOT_CHANGE_MODE.  */\n+\n+#define CLASS_CANNOT_CHANGE_MODE_P(FROM,TO) \\\n+  (GET_MODE_SIZE (FROM) != GET_MODE_SIZE (TO))\n \n /* Define the cost of moving between registers of various classes.  Moving\n    between FLOAT_REGS and anything else except float regs is expensive. "}, {"sha": "b357af5372b236c8db978a41160199782e87fdd2", "filename": "gcc/config/avr/avr.h", "status": "modified", "additions": 0, "deletions": 16, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/02188693ed5ff368a8c4340d449baf07c87812ec/gcc%2Fconfig%2Favr%2Favr.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/02188693ed5ff368a8c4340d449baf07c87812ec/gcc%2Fconfig%2Favr%2Favr.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Favr%2Favr.h?ref=02188693ed5ff368a8c4340d449baf07c87812ec", "patch": "@@ -848,22 +848,6 @@ enum reg_class {\n    This macro helps control the handling of multiple-word values in\n    the reload pass.  */\n \n-#undef CLASS_CANNOT_CHANGE_SIZE\n-/* `CLASS_CANNOT_CHANGE_SIZE'\n-   If defined, a C expression for a class that contains registers\n-   which the compiler must always access in a mode that is the same\n-   size as the mode in which it loaded the register.\n-\n-   For the example, loading 32-bit integer or floating-point objects\n-   into floating-point registers on the Alpha extends them to 64-bits.\n-   Therefore loading a 64-bit object and then storing it as a 32-bit\n-   object does not store the low-order 32-bits, as would be the case\n-   for a normal register.  Therefore, `alpha.h' defines this macro as\n-   `FLOAT_REGS'.\n-\n-   Three other special macros describe which operands fit which\n-   constraint letters.  */\n-\n #define CONST_OK_FOR_LETTER_P(VALUE, C)\t\t\t\t\\\n   ((C) == 'I' ? (VALUE) >= 0 && (VALUE) <= 63 :\t\t\t\\\n    (C) == 'J' ? (VALUE) <= 0 && (VALUE) >= -63:\t\t\t\\"}, {"sha": "d455629349940939a7a691a680badb6b2e63fb0d", "filename": "gcc/config/d30v/d30v.h", "status": "modified", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/02188693ed5ff368a8c4340d449baf07c87812ec/gcc%2Fconfig%2Fd30v%2Fd30v.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/02188693ed5ff368a8c4340d449baf07c87812ec/gcc%2Fconfig%2Fd30v%2Fd30v.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fd30v%2Fd30v.h?ref=02188693ed5ff368a8c4340d449baf07c87812ec", "patch": "@@ -1759,17 +1759,6 @@ extern enum reg_class reg_class_from_letter[];\n  ? ((GET_MODE_SIZE (MODE) + 8 - 1) / 8)\t\t\t\t\t\\\n  : ((GET_MODE_SIZE (MODE) + 4 - 1) / 4))\n \n-/* If defined, a C expression for a class that contains registers which the\n-   compiler must always access in a mode that is the same size as the mode in\n-   which it loaded the register.\n-\n-   For the example, loading 32-bit integer or floating-point objects into\n-   floating-point registers on the Alpha extends them to 64-bits.  Therefore\n-   loading a 64-bit object and then storing it as a 32-bit object does not\n-   store the low-order 32-bits, as would be the case for a normal register.\n-   Therefore, `alpha.h' defines this macro as `FLOAT_REGS'.  */\n-/* #define CLASS_CANNOT_CHANGE_SIZE */\n-\n /* A C expression that defines the machine-dependent operand constraint letters\n    (`I', `J', `K', .. 'P') that specify particular ranges of integer values.\n    If C is one of those letters, the expression should check that VALUE, an"}, {"sha": "522c9c7ba809f62cebb28b28f13b751892cc1009", "filename": "gcc/config/ia64/ia64.h", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/02188693ed5ff368a8c4340d449baf07c87812ec/gcc%2Fconfig%2Fia64%2Fia64.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/02188693ed5ff368a8c4340d449baf07c87812ec/gcc%2Fconfig%2Fia64%2Fia64.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fia64%2Fia64.h?ref=02188693ed5ff368a8c4340d449baf07c87812ec", "patch": "@@ -1046,6 +1046,15 @@ enum reg_class\n        || (CLASS) == FR_INT_REGS) && (MODE) == XFmode) ? 1\t\t\\\n    : (GET_MODE_SIZE (MODE) + UNITS_PER_WORD - 1) / UNITS_PER_WORD)\n \n+/* If defined, gives a class of registers that cannot be used as the\n+   operand of a SUBREG that changes the mode of the object illegally.  */\n+\n+#define CLASS_CANNOT_CHANGE_MODE        FR_REGS\n+\n+/* Defines illegal mode changes for CLASS_CANNOT_CHANGE_MODE.  */\n+\n+#define CLASS_CANNOT_CHANGE_MODE_P(FROM,TO) 1\n+\n /* A C expression that defines the machine-dependent operand constraint letters\n    (`I', `J', `K', .. 'P') that specify particular ranges of integer values.  */\n "}, {"sha": "e723dfc2a708cfecf071a0b36ecbc98523914e8f", "filename": "gcc/config/mips/mips.h", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/02188693ed5ff368a8c4340d449baf07c87812ec/gcc%2Fconfig%2Fmips%2Fmips.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/02188693ed5ff368a8c4340d449baf07c87812ec/gcc%2Fconfig%2Fmips%2Fmips.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.h?ref=02188693ed5ff368a8c4340d449baf07c87812ec", "patch": "@@ -2043,10 +2043,15 @@ extern enum reg_class mips_char_to_class[];\n    : CLASS_UNITS (MODE, UNITS_PER_WORD))\n \n /* If defined, gives a class of registers that cannot be used as the\n-   operand of a SUBREG that changes the size of the object.  */\n+   operand of a SUBREG that changes the mode of the object illegally.  */\n \n-#define CLASS_CANNOT_CHANGE_SIZE\t\t\t\t\t\\\n+#define CLASS_CANNOT_CHANGE_MODE \\\n   (TARGET_FLOAT64 && ! TARGET_64BIT ? FP_REGS : NO_REGS)\n+\n+/* Defines illegal mode changes for CLASS_CANNOT_CHANGE_MODE.  */\n+\n+#define CLASS_CANNOT_CHANGE_MODE_P(FROM,TO) \\\n+  (GET_MODE_SIZE (FROM) != GET_MODE_SIZE (TO))\n \f\n /* Stack layout; function entry, exit and calling.  */\n "}, {"sha": "21442dbc2344619bd36178cd11c443a36641ef00", "filename": "gcc/config/pa/pa32-regs.h", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/02188693ed5ff368a8c4340d449baf07c87812ec/gcc%2Fconfig%2Fpa%2Fpa32-regs.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/02188693ed5ff368a8c4340d449baf07c87812ec/gcc%2Fconfig%2Fpa%2Fpa32-regs.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Fpa32-regs.h?ref=02188693ed5ff368a8c4340d449baf07c87812ec", "patch": "@@ -243,7 +243,11 @@ enum reg_class { NO_REGS, R1_REGS, GENERAL_REGS, FPUPPER_REGS, FP_REGS,\n \n /* This may not actually be necessary anymore.  But until I can prove\n    otherwise it will stay.  */\n-#define CLASS_CANNOT_CHANGE_SIZE NO_REGS\n+#define CLASS_CANNOT_CHANGE_MODE\tNO_REGS\n+\n+/* Defines illegal mode changes for CLASS_CANNOT_CHANGE_MODE.  */\n+#define CLASS_CANNOT_CHANGE_MODE_P(FROM,TO) \\\n+  (GET_MODE_SIZE (FROM) != GET_MODE_SIZE (TO))\n \n /* The same information, inverted:\n    Return the class number of the smallest class containing"}, {"sha": "a061d2f045c3795498056a13541a156566e0c740", "filename": "gcc/config/pa/pa64-regs.h", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/02188693ed5ff368a8c4340d449baf07c87812ec/gcc%2Fconfig%2Fpa%2Fpa64-regs.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/02188693ed5ff368a8c4340d449baf07c87812ec/gcc%2Fconfig%2Fpa%2Fpa64-regs.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Fpa64-regs.h?ref=02188693ed5ff368a8c4340d449baf07c87812ec", "patch": "@@ -229,9 +229,15 @@ enum reg_class { NO_REGS, R1_REGS, GENERAL_REGS, FPUPPER_REGS, FP_REGS,\n   {0x00000000, 0x10000000},\t/* SHIFT_REGS */\t\t\\\n   {0xfffffffe, 0x1fffffff}}\t/* ALL_REGS */\n \n-/* This may not actually be necessary anymore.  But until I can prove\n+/* If defined, gives a class of registers that cannot be used as the\n+   operand of a SUBREG that changes the mode of the object illegally.  */\n+/* ??? This may not actually be necessary anymore.  But until I can prove\n    otherwise it will stay.  */\n-#define CLASS_CANNOT_CHANGE_SIZE (FP_REGS)\n+#define CLASS_CANNOT_CHANGE_MODE\t(FP_REGS)\n+\n+/* Defines illegal mode changes for CLASS_CANNOT_CHANGE_MODE.  */\n+#define CLASS_CANNOT_CHANGE_MODE_P(FROM,TO) \\\n+  (GET_MODE_SIZE (FROM) != GET_MODE_SIZE (TO))\n \n /* The same information, inverted:\n    Return the class number of the smallest class containing"}, {"sha": "fdbcb977dc9667b3256c172cb1b0407b3355b17f", "filename": "gcc/config/rs6000/rs6000.h", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/02188693ed5ff368a8c4340d449baf07c87812ec/gcc%2Fconfig%2Frs6000%2Frs6000.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/02188693ed5ff368a8c4340d449baf07c87812ec/gcc%2Fconfig%2Frs6000%2Frs6000.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.h?ref=02188693ed5ff368a8c4340d449baf07c87812ec", "patch": "@@ -1134,9 +1134,14 @@ enum reg_class\n   : ((GET_MODE_SIZE (MODE) + UNITS_PER_WORD - 1) / UNITS_PER_WORD))\n \n /* If defined, gives a class of registers that cannot be used as the\n-   operand of a SUBREG that changes the size of the object.  */\n+   operand of a SUBREG that changes the mode of the object illegally.  */\n \n-#define CLASS_CANNOT_CHANGE_SIZE      FLOAT_REGS\n+#define CLASS_CANNOT_CHANGE_MODE        FLOAT_REGS\n+\n+/* Defines illegal mode changes for CLASS_CANNOT_CHANGE_MODE.  */\n+\n+#define CLASS_CANNOT_CHANGE_MODE_P(FROM,TO) \\\n+  (GET_MODE_SIZE (FROM) != GET_MODE_SIZE (TO))\n \f\n /* Stack layout; function entry, exit and calling.  */\n "}, {"sha": "981a802baa771e4cc5f5b409851bcb905b25c0ad", "filename": "gcc/config/sh/sh.h", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/02188693ed5ff368a8c4340d449baf07c87812ec/gcc%2Fconfig%2Fsh%2Fsh.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/02188693ed5ff368a8c4340d449baf07c87812ec/gcc%2Fconfig%2Fsh%2Fsh.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fsh.h?ref=02188693ed5ff368a8c4340d449baf07c87812ec", "patch": "@@ -825,9 +825,14 @@ extern enum reg_class reg_class_from_letter[];\n      ((GET_MODE_SIZE (MODE) + UNITS_PER_WORD - 1) / UNITS_PER_WORD)\n \n /* If defined, gives a class of registers that cannot be used as the\n-   operand of a SUBREG that changes the size of the object.  */\n+   operand of a SUBREG that changes the mode of the object illegally.  */\n \n-#define CLASS_CANNOT_CHANGE_SIZE\tDF_REGS\n+#define CLASS_CANNOT_CHANGE_MODE        DF_REGS\n+\n+/* Defines illegal mode changes for CLASS_CANNOT_CHANGE_MODE.  */\n+\n+#define CLASS_CANNOT_CHANGE_MODE_P(FROM,TO) \\\n+  (GET_MODE_SIZE (FROM) != GET_MODE_SIZE (TO))\n \f\n /* Stack layout; function entry, exit and calling.  */\n "}, {"sha": "18a016ae0415e1088d8b8d3f83efbad3127e436a", "filename": "gcc/emit-rtl.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/02188693ed5ff368a8c4340d449baf07c87812ec/gcc%2Femit-rtl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/02188693ed5ff368a8c4340d449baf07c87812ec/gcc%2Femit-rtl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Femit-rtl.c?ref=02188693ed5ff368a8c4340d449baf07c87812ec", "patch": "@@ -737,12 +737,12 @@ gen_lowpart_common (mode, x)\n \t       /* integrate.c can't handle parts of a return value register. */\n \t       && (! REG_FUNCTION_VALUE_P (x)\n \t\t   || ! rtx_equal_function_value_matters)\n-#ifdef CLASS_CANNOT_CHANGE_SIZE\n-\t       && ! (GET_MODE_SIZE (mode) != GET_MODE_SIZE (GET_MODE (x))\n+#ifdef CLASS_CANNOT_CHANGE_MODE\n+\t       && ! (CLASS_CANNOT_CHANGE_MODE_P (mode, GET_MODE (x))\n \t\t     && GET_MODE_CLASS (GET_MODE (x)) != MODE_COMPLEX_INT\n \t\t     && GET_MODE_CLASS (GET_MODE (x)) != MODE_COMPLEX_FLOAT\n \t\t     && (TEST_HARD_REG_BIT\n-\t\t\t (reg_class_contents[(int) CLASS_CANNOT_CHANGE_SIZE],\n+\t\t\t (reg_class_contents[(int) CLASS_CANNOT_CHANGE_MODE],\n \t\t\t  REGNO (x))))\n #endif\n \t       /* We want to keep the stack, frame, and arg pointers"}, {"sha": "2e2a79d42e841c8829d811c575e18e1264d2a709", "filename": "gcc/flow.c", "status": "modified", "additions": 10, "deletions": 6, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/02188693ed5ff368a8c4340d449baf07c87812ec/gcc%2Fflow.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/02188693ed5ff368a8c4340d449baf07c87812ec/gcc%2Fflow.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fflow.c?ref=02188693ed5ff368a8c4340d449baf07c87812ec", "patch": "@@ -5263,11 +5263,13 @@ mark_used_regs (pbi, x, cond, insn)\n       break;\n \n     case SUBREG:\n+#ifdef CLASS_CANNOT_CHANGE_MODE\n       if (GET_CODE (SUBREG_REG (x)) == REG\n \t  && REGNO (SUBREG_REG (x)) >= FIRST_PSEUDO_REGISTER\n-\t  && (GET_MODE_SIZE (GET_MODE (x))\n-\t      != GET_MODE_SIZE (GET_MODE (SUBREG_REG (x)))))\n-\tREG_CHANGES_SIZE (REGNO (SUBREG_REG (x))) = 1;\n+\t  && CLASS_CANNOT_CHANGE_MODE_P (GET_MODE (x),\n+\t\t\t\t\t GET_MODE (SUBREG_REG (x))))\n+\tREG_CHANGES_MODE (REGNO (SUBREG_REG (x))) = 1;\n+#endif\n \n       /* While we're here, optimize this case.  */\n       x = SUBREG_REG (x);\n@@ -5310,12 +5312,14 @@ mark_used_regs (pbi, x, cond, insn)\n \t       || GET_CODE (testreg) == SIGN_EXTRACT\n \t       || GET_CODE (testreg) == SUBREG)\n \t  {\n+#ifdef CLASS_CANNOT_CHANGE_MODE\n \t    if (GET_CODE (testreg) == SUBREG\n \t\t&& GET_CODE (SUBREG_REG (testreg)) == REG\n \t\t&& REGNO (SUBREG_REG (testreg)) >= FIRST_PSEUDO_REGISTER\n-\t\t&& (GET_MODE_SIZE (GET_MODE (testreg))\n-\t\t    != GET_MODE_SIZE (GET_MODE (SUBREG_REG (testreg)))))\n-\t      REG_CHANGES_SIZE (REGNO (SUBREG_REG (testreg))) = 1;\n+\t\t&& CLASS_CANNOT_CHANGE_MODE_P (GET_MODE (SUBREG_REG (testreg)),\n+\t\t\t\t\t       GET_MODE (testreg)))\n+\t      REG_CHANGES_MODE (REGNO (SUBREG_REG (testreg))) = 1;\n+#endif\n \n \t    /* Modifying a single register in an alternate mode\n \t       does not use any of the old value.  But these other"}, {"sha": "4ad1e1967fbdf4e45779f405f5e968d550d201b1", "filename": "gcc/global.c", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/02188693ed5ff368a8c4340d449baf07c87812ec/gcc%2Fglobal.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/02188693ed5ff368a8c4340d449baf07c87812ec/gcc%2Fglobal.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fglobal.c?ref=02188693ed5ff368a8c4340d449baf07c87812ec", "patch": "@@ -999,10 +999,10 @@ find_reg (num, losers, alt_regs_p, accept_call_clobbered, retrying)\n \n   IOR_HARD_REG_SET (used1, allocno[num].hard_reg_conflicts);\n \n-#ifdef CLASS_CANNOT_CHANGE_SIZE\n-  if (REG_CHANGES_SIZE (allocno[num].reg))\n+#ifdef CLASS_CANNOT_CHANGE_MODE\n+  if (REG_CHANGES_MODE (allocno[num].reg))\n     IOR_HARD_REG_SET (used1,\n-\t\t      reg_class_contents[(int) CLASS_CANNOT_CHANGE_SIZE]);\n+\t\t      reg_class_contents[(int) CLASS_CANNOT_CHANGE_MODE]);\n #endif\n \n   /* Try each hard reg to see if it fits.  Do this in two passes.\n@@ -1189,10 +1189,10 @@ find_reg (num, losers, alt_regs_p, accept_call_clobbered, retrying)\n \t      /* Don't use a reg no good for this pseudo.  */\n \t      && ! TEST_HARD_REG_BIT (used2, regno)\n \t      && HARD_REGNO_MODE_OK (regno, mode)\n-#ifdef CLASS_CANNOT_CHANGE_SIZE\n-\t      && ! (REG_CHANGES_SIZE (allocno[num].reg)\n+#ifdef CLASS_CANNOT_CHANGE_MODE\n+\t      && ! (REG_CHANGES_MODE (allocno[num].reg)\n \t\t    && (TEST_HARD_REG_BIT\n-\t\t\t(reg_class_contents[(int) CLASS_CANNOT_CHANGE_SIZE],\n+\t\t\t(reg_class_contents[(int) CLASS_CANNOT_CHANGE_MODE],\n \t\t\t regno)))\n #endif\n \t      )"}, {"sha": "e2c00bf8decb28d5ad72f9e71d0b6e7a41459bba", "filename": "gcc/local-alloc.c", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/02188693ed5ff368a8c4340d449baf07c87812ec/gcc%2Flocal-alloc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/02188693ed5ff368a8c4340d449baf07c87812ec/gcc%2Flocal-alloc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flocal-alloc.c?ref=02188693ed5ff368a8c4340d449baf07c87812ec", "patch": "@@ -140,10 +140,10 @@ struct qty\n \n   short phys_reg;\n \n-  /* Nonzero if this quantity has been used in a SUBREG that changes\n-     its size.  */\n+  /* Nonzero if this quantity has been used in a SUBREG in some\n+     way that is illegal.  */\n \n-  char changes_size;\n+  char changes_mode;\n \n };\n \n@@ -301,7 +301,7 @@ alloc_qty (regno, mode, size, birth)\n   qty[qtyno].min_class = reg_preferred_class (regno);\n   qty[qtyno].alternate_class = reg_alternate_class (regno);\n   qty[qtyno].n_refs = REG_N_REFS (regno);\n-  qty[qtyno].changes_size = REG_CHANGES_SIZE (regno);\n+  qty[qtyno].changes_mode = REG_CHANGES_MODE (regno);\n }\n \f\n /* Main entry point of this file.  */\n@@ -1795,8 +1795,8 @@ update_qty_class (qtyno, reg)\n   if (reg_class_subset_p (rclass, qty[qtyno].alternate_class))\n     qty[qtyno].alternate_class = rclass;\n \n-  if (REG_CHANGES_SIZE (reg))\n-    qty[qtyno].changes_size = 1;\n+  if (REG_CHANGES_MODE (reg))\n+    qty[qtyno].changes_mode = 1;\n }\n \f\n /* Handle something which alters the value of an rtx REG.\n@@ -1997,10 +1997,10 @@ find_free_reg (class, mode, qtyno, accept_call_clobbered, just_try_suggested,\n   SET_HARD_REG_BIT (used, FRAME_POINTER_REGNUM);\n #endif\n \n-#ifdef CLASS_CANNOT_CHANGE_SIZE\n-  if (qty[qtyno].changes_size)\n+#ifdef CLASS_CANNOT_CHANGE_MODE\n+  if (qty[qtyno].changes_mode)\n     IOR_HARD_REG_SET (used,\n-\t\t      reg_class_contents[(int) CLASS_CANNOT_CHANGE_SIZE]);\n+\t\t      reg_class_contents[(int) CLASS_CANNOT_CHANGE_MODE]);\n #endif\n \n   /* Normally, the registers that can be used for the first register in"}, {"sha": "3b7dab35ff23e7fead9c683899cf17f88d4498fd", "filename": "gcc/recog.c", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/02188693ed5ff368a8c4340d449baf07c87812ec/gcc%2Frecog.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/02188693ed5ff368a8c4340d449baf07c87812ec/gcc%2Frecog.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frecog.c?ref=02188693ed5ff368a8c4340d449baf07c87812ec", "patch": "@@ -1003,13 +1003,13 @@ register_operand (op, mode)\n       if (! reload_completed && GET_CODE (SUBREG_REG (op)) == MEM)\n \treturn general_operand (op, mode);\n \n-#ifdef CLASS_CANNOT_CHANGE_SIZE\n+#ifdef CLASS_CANNOT_CHANGE_MODE\n       if (GET_CODE (SUBREG_REG (op)) == REG\n \t  && REGNO (SUBREG_REG (op)) < FIRST_PSEUDO_REGISTER\n-\t  && TEST_HARD_REG_BIT (reg_class_contents[(int) CLASS_CANNOT_CHANGE_SIZE],\n-\t\t\t\tREGNO (SUBREG_REG (op)))\n-\t  && (GET_MODE_SIZE (mode)\n-\t      != GET_MODE_SIZE (GET_MODE (SUBREG_REG (op))))\n+\t  && (TEST_HARD_REG_BIT\n+\t      (reg_class_contents[(int) CLASS_CANNOT_CHANGE_MODE],\n+\t       REGNO (SUBREG_REG (op))))\n+\t  && CLASS_CANNOT_CHANGE_MODE_P (mode, GET_MODE (SUBREG_REG (op)))\n \t  && GET_MODE_CLASS (GET_MODE (SUBREG_REG (op))) != MODE_COMPLEX_INT\n \t  && GET_MODE_CLASS (GET_MODE (SUBREG_REG (op))) != MODE_COMPLEX_FLOAT)\n \treturn 0;"}, {"sha": "eb909d195a514b30bc06d4cb18ced6a5626be444", "filename": "gcc/regclass.c", "status": "modified", "additions": 27, "deletions": 25, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/02188693ed5ff368a8c4340d449baf07c87812ec/gcc%2Fregclass.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/02188693ed5ff368a8c4340d449baf07c87812ec/gcc%2Fregclass.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fregclass.c?ref=02188693ed5ff368a8c4340d449baf07c87812ec", "patch": "@@ -203,18 +203,20 @@ static char *in_inc_dec;\n \n #endif /* FORBIDDEN_INC_DEC_CLASSES */\n \n-#ifdef CLASS_CANNOT_CHANGE_SIZE\n+#ifdef CLASS_CANNOT_CHANGE_MODE\n \n /* These are the classes containing only registers that can be used in\n-   a SUBREG expression that changes the size of the register.  */\n+   a SUBREG expression that changes the mode of the register in some\n+   way that is illegal.  */\n \n-static int class_can_change_size[N_REG_CLASSES];\n+static int class_can_change_mode[N_REG_CLASSES];\n \n-/* Registers, including pseudos, which change size.  */\n+/* Registers, including pseudos, which change modes in some way that\n+   is illegal.  */\n \n-static regset reg_changes_size;\n+static regset reg_changes_mode;\n \n-#endif /* CLASS_CANNOT_CHANGE_SIZE */\n+#endif /* CLASS_CANNOT_CHANGE_MODE */\n \n #ifdef HAVE_SECONDARY_RELOADS\n \n@@ -458,21 +460,21 @@ init_reg_sets_1 ()\n \t  may_move_out_cost[i][j] = cost;\n       }\n \n-#ifdef CLASS_CANNOT_CHANGE_SIZE\n+#ifdef CLASS_CANNOT_CHANGE_MODE\n   {\n     HARD_REG_SET c;\n-    COMPL_HARD_REG_SET (c, reg_class_contents[CLASS_CANNOT_CHANGE_SIZE]);\n+    COMPL_HARD_REG_SET (c, reg_class_contents[CLASS_CANNOT_CHANGE_MODE]);\n       \n     for (i = 0; i < N_REG_CLASSES; i++)\n       {\n \tGO_IF_HARD_REG_SUBSET (reg_class_contents[i], c, ok_class);\n-\tclass_can_change_size [i] = 0;\n+\tclass_can_change_mode [i] = 0;\n \tcontinue;\n       ok_class:\n-\tclass_can_change_size [i] = 1;\n+\tclass_can_change_mode [i] = 1;\n       }\n     }\n-#endif /* CLASS_CANNOT_CHANGE_SIZE */\n+#endif /* CLASS_CANNOT_CHANGE_MODE */\n }\n \n /* Compute the table of register modes.\n@@ -860,10 +862,10 @@ record_operand_costs (insn, op_costs, reg_pref)\n       if (GET_CODE (recog_data.operand[i]) == SUBREG)\n \t{\n \t  rtx inner = SUBREG_REG (recog_data.operand[i]);\n-#ifdef CLASS_CANNOT_CHANGE_SIZE\n-\t  if (GET_MODE_SIZE (modes[i]) != GET_MODE_SIZE (GET_MODE (inner))\n-\t      && GET_CODE (inner) == REG)\n-\t    SET_REGNO_REG_SET (reg_changes_size, REGNO (inner));\n+#ifdef CLASS_CANNOT_CHANGE_MODE\n+\t  if (GET_CODE (inner) == REG\n+\t      && CLASS_CANNOT_CHANGE_MODE_P (modes[i], GET_MODE (inner)))\n+\t    SET_REGNO_REG_SET (reg_changes_mode, REGNO (inner));\n #endif\n \t  recog_data.operand[i] = inner;\n \t}\n@@ -1048,8 +1050,8 @@ regclass (f, nregs, dump)\n \n   costs = (struct costs *) xmalloc (nregs * sizeof (struct costs));\n \n-#ifdef CLASS_CANNOT_CHANGE_SIZE\n-  reg_changes_size = BITMAP_XMALLOC();\n+#ifdef CLASS_CANNOT_CHANGE_MODE\n+  reg_changes_mode = BITMAP_XMALLOC();\n #endif  \n \n #ifdef FORBIDDEN_INC_DEC_CLASSES\n@@ -1190,9 +1192,9 @@ regclass (f, nregs, dump)\n #ifdef FORBIDDEN_INC_DEC_CLASSES\n \t\t  || (in_inc_dec[i] && forbidden_inc_dec_class[class])\n #endif\n-#ifdef CLASS_CANNOT_CHANGE_SIZE\n-\t\t  || (REGNO_REG_SET_P (reg_changes_size, i)\n-\t\t      && ! class_can_change_size [class])\n+#ifdef CLASS_CANNOT_CHANGE_MODE\n+\t\t  || (REGNO_REG_SET_P (reg_changes_mode, i)\n+\t\t      && ! class_can_change_mode [class])\n #endif\n \t\t  )\n \t\t;\n@@ -1220,9 +1222,9 @@ regclass (f, nregs, dump)\n #ifdef FORBIDDEN_INC_DEC_CLASSES\n \t\t  && ! (in_inc_dec[i] && forbidden_inc_dec_class[class])\n #endif\n-#ifdef CLASS_CANNOT_CHANGE_SIZE\n-\t\t  && ! (REGNO_REG_SET_P (reg_changes_size, i)\n-\t\t\t&& ! class_can_change_size [class])\n+#ifdef CLASS_CANNOT_CHANGE_MODE\n+\t\t  && ! (REGNO_REG_SET_P (reg_changes_mode, i)\n+\t\t\t&& ! class_can_change_mode [class])\n #endif\n \t\t  )\n \t\talt = reg_class_subunion[(int) alt][class];\n@@ -1256,8 +1258,8 @@ regclass (f, nregs, dump)\n #ifdef FORBIDDEN_INC_DEC_CLASSES\n   free (in_inc_dec);\n #endif\n-#ifdef CLASS_CANNOT_CHANGE_SIZE\n-  BITMAP_XFREE (reg_changes_size);\n+#ifdef CLASS_CANNOT_CHANGE_MODE\n+  BITMAP_XFREE (reg_changes_mode);\n #endif\n   free (costs);\n }"}, {"sha": "c219ecc4e20af89c27bd9573a514bfef8085248a", "filename": "gcc/regs.h", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/02188693ed5ff368a8c4340d449baf07c87812ec/gcc%2Fregs.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/02188693ed5ff368a8c4340d449baf07c87812ec/gcc%2Fregs.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fregs.h?ref=02188693ed5ff368a8c4340d449baf07c87812ec", "patch": "@@ -55,7 +55,8 @@ typedef struct reg_info_def\n   int live_length;\t\t/* # of instructions (REG n) is live */\n   int calls_crossed;\t\t/* # of calls (REG n) is live across */\n   int basic_block;\t\t/* # of basic blocks (REG n) is used in */\n-  char changes_size;\t\t/* whether (SUBREG (REG n)) changes size */\n+  char changes_mode;\t\t/* whether (SUBREG (REG n)) exists and \n+\t\t\t\t   is illegal.  */\n } reg_info;\n \n extern varray_type reg_n_info;\n@@ -80,10 +81,11 @@ extern varray_type reg_n_info;\n #define REG_N_DEATHS(N) (VARRAY_REG (reg_n_info, N)->deaths)\n \n /* Indexed by N; says whether a pseudo register N was ever used\n-   within a SUBREG that changes the size of the reg.  Some machines prohibit\n-   such objects to be in certain (usually floating-point) registers.  */\n+   within a SUBREG that changes the mode of the reg in some way\n+   that is illegal for a given class (usually floating-point)\n+   of registers.  */\n \n-#define REG_CHANGES_SIZE(N) (VARRAY_REG (reg_n_info, N)->changes_size)\n+#define REG_CHANGES_MODE(N) (VARRAY_REG (reg_n_info, N)->changes_mode)\n \n /* Get the number of consecutive words required to hold pseudo-reg N.  */\n "}, {"sha": "ce4811a7b40b9ac51eded7e9d35c24dbb50fd864", "filename": "gcc/reload.c", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/02188693ed5ff368a8c4340d449baf07c87812ec/gcc%2Freload.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/02188693ed5ff368a8c4340d449baf07c87812ec/gcc%2Freload.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Freload.c?ref=02188693ed5ff368a8c4340d449baf07c87812ec", "patch": "@@ -908,8 +908,8 @@ push_reload (in, out, inloc, outloc, class,\n \n   if (in != 0 && GET_CODE (in) == SUBREG\n       && (SUBREG_WORD (in) == 0 || strict_low)\n-#ifdef CLASS_CANNOT_CHANGE_SIZE\n-      && class != CLASS_CANNOT_CHANGE_SIZE\n+#ifdef CLASS_CANNOT_CHANGE_MODE\n+      && class != CLASS_CANNOT_CHANGE_MODE\n #endif\n       && (CONSTANT_P (SUBREG_REG (in))\n \t  || GET_CODE (SUBREG_REG (in)) == PLUS\n@@ -958,14 +958,14 @@ push_reload (in, out, inloc, outloc, class,\n \t\t\t\t\t\tSUBREG_REG (in))\n \t\t  == NO_REGS))\n #endif\n-#ifdef CLASS_CANNOT_CHANGE_SIZE\n+#ifdef CLASS_CANNOT_CHANGE_MODE\n \t  || (GET_CODE (SUBREG_REG (in)) == REG\n \t      && REGNO (SUBREG_REG (in)) < FIRST_PSEUDO_REGISTER\n \t      && (TEST_HARD_REG_BIT\n-\t\t  (reg_class_contents[(int) CLASS_CANNOT_CHANGE_SIZE],\n+\t\t  (reg_class_contents[(int) CLASS_CANNOT_CHANGE_MODE],\n \t\t   REGNO (SUBREG_REG (in))))\n-\t      && (GET_MODE_SIZE (GET_MODE (SUBREG_REG (in)))\n-\t\t  != GET_MODE_SIZE (inmode)))\n+\t      && CLASS_CANNOT_CHANGE_MODE_P (GET_MODE (SUBREG_REG (in)),\n+\t\t\t\t\t     inmode))\n #endif\n \t  ))\n     {\n@@ -1026,8 +1026,8 @@ push_reload (in, out, inloc, outloc, class,\n      and in that case the constraint should label it input-output.)  */\n   if (out != 0 && GET_CODE (out) == SUBREG\n       && (SUBREG_WORD (out) == 0 || strict_low)\n-#ifdef CLASS_CANNOT_CHANGE_SIZE\n-      && class != CLASS_CANNOT_CHANGE_SIZE\n+#ifdef CLASS_CANNOT_CHANGE_MODE\n+      && class != CLASS_CANNOT_CHANGE_MODE\n #endif\n       && (CONSTANT_P (SUBREG_REG (out))\n \t  || strict_low\n@@ -1063,14 +1063,14 @@ push_reload (in, out, inloc, outloc, class,\n \t\t\t\t\t\t SUBREG_REG (out))\n \t\t  == NO_REGS))\n #endif\n-#ifdef CLASS_CANNOT_CHANGE_SIZE\n+#ifdef CLASS_CANNOT_CHANGE_MODE\n \t  || (GET_CODE (SUBREG_REG (out)) == REG\n \t      && REGNO (SUBREG_REG (out)) < FIRST_PSEUDO_REGISTER\n \t      && (TEST_HARD_REG_BIT\n-\t\t  (reg_class_contents[(int) CLASS_CANNOT_CHANGE_SIZE],\n+\t\t  (reg_class_contents[(int) CLASS_CANNOT_CHANGE_MODE],\n \t\t   REGNO (SUBREG_REG (out))))\n-\t      && (GET_MODE_SIZE (GET_MODE (SUBREG_REG (out)))\n-\t\t  != GET_MODE_SIZE (outmode)))\n+\t      && CLASS_CANNOT_CHANGE_MODE_P (GET_MODE (SUBREG_REG (out)),\n+\t\t\t\t\t     outmode))\n #endif\n \t  ))\n     {"}, {"sha": "4949b89362faea1598ddb287a8f0347e1bb3b0e6", "filename": "gcc/reload1.c", "status": "modified", "additions": 11, "deletions": 6, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/02188693ed5ff368a8c4340d449baf07c87812ec/gcc%2Freload1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/02188693ed5ff368a8c4340d449baf07c87812ec/gcc%2Freload1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Freload1.c?ref=02188693ed5ff368a8c4340d449baf07c87812ec", "patch": "@@ -5305,20 +5305,25 @@ choose_reload_regs (chain)\n \t\t{\n \t\t  enum reg_class class = rld[r].class, last_class;\n \t\t  rtx last_reg = reg_last_reload_reg[regno];\n+\t\t  enum machine_mode need_mode;\n \n \t\t  i = REGNO (last_reg) + word;\n \t\t  last_class = REGNO_REG_CLASS (i);\n+\n+\t\t  need_mode = smallest_mode_for_size ((word+1) * UNITS_PER_WORD,\n+\t\t\t\t\t\t      GET_MODE_CLASS (mode));\n+\n \t\t  if (\n-#ifdef CLASS_CANNOT_CHANGE_SIZE\n+#ifdef CLASS_CANNOT_CHANGE_MODE\n \t\t      (TEST_HARD_REG_BIT\n-\t\t       (reg_class_contents[CLASS_CANNOT_CHANGE_SIZE], i)\n-\t\t       ? (GET_MODE_SIZE (GET_MODE (last_reg))\n-\t\t\t  == GET_MODE_SIZE (mode) + word * UNITS_PER_WORD)\n+\t\t       (reg_class_contents[(int) CLASS_CANNOT_CHANGE_MODE], i)\n+\t\t       ? ! CLASS_CANNOT_CHANGE_MODE_P (GET_MODE (last_reg), \n+\t\t\t\t\t\t       need_mode)\n \t\t       : (GET_MODE_SIZE (GET_MODE (last_reg))\n-\t\t\t  >= GET_MODE_SIZE (mode) + word * UNITS_PER_WORD))\n+\t\t\t  >= GET_MODE_SIZE (need_mode)))\n #else\n \t\t      (GET_MODE_SIZE (GET_MODE (last_reg))\n-\t\t       >= GET_MODE_SIZE (mode) + word * UNITS_PER_WORD)\n+\t\t       >= GET_MODE_SIZE (need_mode))\n #endif\n \t\t      && reg_reloaded_contents[i] == regno\n \t\t      && TEST_HARD_REG_BIT (reg_reloaded_valid, i)"}, {"sha": "90e5e908fee5be5a1d44593a97d0d35a96cd0752", "filename": "gcc/tm.texi", "status": "modified", "additions": 14, "deletions": 6, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/02188693ed5ff368a8c4340d449baf07c87812ec/gcc%2Ftm.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/02188693ed5ff368a8c4340d449baf07c87812ec/gcc%2Ftm.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftm.texi?ref=02188693ed5ff368a8c4340d449baf07c87812ec", "patch": "@@ -2088,17 +2088,25 @@ should be the maximum value of @code{HARD_REGNO_NREGS (@var{regno},\n This macro helps control the handling of multiple-word values\n in the reload pass.\n \n-@item CLASS_CANNOT_CHANGE_SIZE\n-If defined, a C expression for a class that contains registers which the\n-compiler must always access in a mode that is the same size as the mode\n-in which it loaded the register.\n+@item CLASS_CANNOT_CHANGE_MODE\n+If defined, a C expression for a class that contains registers for\n+which the compiler may not change modes arbitrarily.\n+\n+@item CLASS_CANNOT_CHANGE_MODE_P(@var{from}, @var{to})\n+A C expression that is true if, for a register in\n+@code{CLASS_CANNOT_CHANGE_MODE}, the requested mode punning is illegal.\n \n For the example, loading 32-bit integer or floating-point objects into\n floating-point registers on the Alpha extends them to 64-bits.\n Therefore loading a 64-bit object and then storing it as a 32-bit object\n does not store the low-order 32-bits, as would be the case for a normal\n-register.  Therefore, @file{alpha.h} defines this macro as\n-@code{FLOAT_REGS}.\n+register.  Therefore, @file{alpha.h} defines @code{CLASS_CANNOT_CHANGE_MODE}\n+as @code{FLOAT_REGS} and @code{CLASS_CANNOT_CHANGE_MODE_P} restricts\n+mode changes to same-size modes.\n+\n+Compare this to IA-64, which extends floating-point values to 82-bits,\n+and stores 64-bit integers in a different format than 64-bit doubles.\n+Therefore @code{CLASS_CANNOT_CHANGE_MODE_P} is always true.\n @end table\n \n Three other special macros describe which operands fit which constraint"}]}