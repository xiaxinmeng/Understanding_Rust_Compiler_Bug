{"sha": "bd8a2e96afaf00312fb3b0c1879e440043cf0e46", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmQ4YTJlOTZhZmFmMDAzMTJmYjNiMGMxODc5ZTQ0MDA0M2NmMGU0Ng==", "commit": {"author": {"name": "Casey Marshall", "email": "csm@gnu.org", "date": "2004-08-30T13:06:48Z"}, "committer": {"name": "Andreas Tobler", "email": "andreast@gcc.gnu.org", "date": "2004-08-30T13:06:48Z"}, "message": "Author e-mail updated for all files.\n\n2004-08-30  Casey Marshall  <csm@gnu.org>\n\n\tAuthor e-mail updated for all files.\n\t* gnu/java/security/OID.java (equals): Test if the aurgment is an\n\tinstance of OID.\n\t(compareTo): Use `equals'.\n\t* gnu/java/security/der/BitString.java (equals): Test if the\n\targument is an instance of BitString.\n\t* gnu/java/security/der/DERReader.java: Removed NIO imports.  Made\n\tclass final. Made fields private.\n\t(<init>): New constructor.\n\t(skip): New method.\n\t(makeString): Made static; don't use NIO.\n\t(fromIso88591, fromUtf16Be, fromUtf8): New methods.\n\t* gnu/java/security/der/DERWriter.java: Fixed imports.\n\t(writeString): Don't use NIO.\n\t(toIso88591, toUtf16Be, toUtf8): New methods.\n\t* gnu/java/security/der/DERValue.java: Formatting changes only.\n\t* gnu/java/security/der/DER.java: Likewise.\n\nFrom-SVN: r86765", "tree": {"sha": "4fc5d308b76cb8c412058d6e39d3b66cacf8ac81", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4fc5d308b76cb8c412058d6e39d3b66cacf8ac81"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/bd8a2e96afaf00312fb3b0c1879e440043cf0e46", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bd8a2e96afaf00312fb3b0c1879e440043cf0e46", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bd8a2e96afaf00312fb3b0c1879e440043cf0e46", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bd8a2e96afaf00312fb3b0c1879e440043cf0e46/comments", "author": null, "committer": null, "parents": [{"sha": "39880d37d6a779821cf0d3b7e5cc7b13e4982f4c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/39880d37d6a779821cf0d3b7e5cc7b13e4982f4c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/39880d37d6a779821cf0d3b7e5cc7b13e4982f4c"}], "stats": {"total": 237, "additions": 170, "deletions": 67}, "files": [{"sha": "5093b39beb83781fa21679f658f395c055200414", "filename": "libjava/ChangeLog", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bd8a2e96afaf00312fb3b0c1879e440043cf0e46/libjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bd8a2e96afaf00312fb3b0c1879e440043cf0e46/libjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FChangeLog?ref=bd8a2e96afaf00312fb3b0c1879e440043cf0e46", "patch": "@@ -1,3 +1,23 @@\n+2004-08-30  Casey Marshall  <csm@gnu.org>\n+\n+\tAuthor e-mail updated for all files.\n+\t* gnu/java/security/OID.java (equals): Test if the aurgment is an\n+\tinstance of OID.\n+\t(compareTo): Use `equals'.\n+\t* gnu/java/security/der/BitString.java (equals): Test if the\n+\targument is an instance of BitString.\n+\t* gnu/java/security/der/DERReader.java: Removed NIO imports.  Made\n+\tclass final. Made fields private.\n+\t(<init>): New constructor.\n+\t(skip): New method.\n+\t(makeString): Made static; don't use NIO.\n+\t(fromIso88591, fromUtf16Be, fromUtf8): New methods.\n+\t* gnu/java/security/der/DERWriter.java: Fixed imports.\n+\t(writeString): Don't use NIO.\n+\t(toIso88591, toUtf16Be, toUtf8): New methods.\n+\t* gnu/java/security/der/DERValue.java: Formatting changes only.\n+\t* gnu/java/security/der/DER.java: Likewise.\n+\n 2004-08-30  Tom Tromey  <tromey@redhat.com>\n \n \t* java/nio/CharBuffer.java (put): Fix typo."}, {"sha": "c17d94b26d3fb84cef5a07c6de6af3ba4724910f", "filename": "libjava/gnu/java/security/OID.java", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bd8a2e96afaf00312fb3b0c1879e440043cf0e46/libjava%2Fgnu%2Fjava%2Fsecurity%2FOID.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bd8a2e96afaf00312fb3b0c1879e440043cf0e46/libjava%2Fgnu%2Fjava%2Fsecurity%2FOID.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fgnu%2Fjava%2Fsecurity%2FOID.java?ref=bd8a2e96afaf00312fb3b0c1879e440043cf0e46", "patch": "@@ -7,7 +7,7 @@\n it under the terms of the GNU General Public License as published by\n the Free Software Foundation; either version 2, or (at your option)\n any later version.\n- \n+\n GNU Classpath is distributed in the hope that it will be useful, but\n WITHOUT ANY WARRANTY; without even the implied warranty of\n MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n@@ -65,7 +65,7 @@\n  * <p>OIDs may be relative, in which case the first two elements of the\n  * OID are omitted.\n  *\n- * @author Casey Marshall (rsdio@metastatic.org)\n+ * @author Casey Marshall (csm@gnu.org)\n  */\n public class OID implements Cloneable, Comparable, java.io.Serializable\n {\n@@ -336,7 +336,7 @@ public Object clone()\n \n   /* Nice idea, but possibly too expensive for whatever benefit it\n    * provides.\n-   \n+\n   public String getShortName()\n   {\n     return OIDTable.getShortName(this);\n@@ -391,8 +391,8 @@ public int hashCode()\n    */\n   public boolean equals(Object o)\n   {\n-    if (this == o)\n-      return true;\n+    if (!(o instanceof OID))\n+      return false;\n     return java.util.Arrays.equals(components, ((OID) o).components);\n   }\n \n@@ -411,7 +411,7 @@ public boolean equals(Object o)\n    */\n   public int compareTo(Object o)\n   {\n-    if (o == this)\n+    if (equals(o))\n       return 0;\n     int[] components2 = ((OID) o).components;\n     int len = Math.min(components.length, components2.length);"}, {"sha": "67e34d7bd30a5fee06ce3a41117127d0955af25a", "filename": "libjava/gnu/java/security/der/BitString.java", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bd8a2e96afaf00312fb3b0c1879e440043cf0e46/libjava%2Fgnu%2Fjava%2Fsecurity%2Fder%2FBitString.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bd8a2e96afaf00312fb3b0c1879e440043cf0e46/libjava%2Fgnu%2Fjava%2Fsecurity%2Fder%2FBitString.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fgnu%2Fjava%2Fsecurity%2Fder%2FBitString.java?ref=bd8a2e96afaf00312fb3b0c1879e440043cf0e46", "patch": "@@ -7,7 +7,7 @@\n it under the terms of the GNU General Public License as published by\n the Free Software Foundation; either version 2, or (at your option)\n any later version.\n- \n+\n GNU Classpath is distributed in the hope that it will be useful, but\n WITHOUT ANY WARRANTY; without even the implied warranty of\n MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n@@ -51,9 +51,9 @@\n  * <p>Where the \"xxx\" represents three bits that should be ignored, and\n  * can have any value.\n  *\n- * @author Casey Marshall (rsdio@metastatic.org)\n+ * @author Casey Marshall (csm@gnu.org)\n  */\n-public class BitString implements Cloneable, Comparable, java.io.Serializable\n+public class BitString implements Cloneable, Comparable\n {\n \n   // Fields.\n@@ -288,8 +288,8 @@ public int compareTo(Object o)\n \n   public boolean equals(Object o)\n   {\n-    if (this == o)\n-      return true;\n+    if (!(o instanceof BitString))\n+      return false;\n     BitString that = (BitString) o;\n     // True for cloned instances.\n     if (this.bytes == that.bytes && this.ignoredBits == that.ignoredBits)"}, {"sha": "585c6800a9be66bf52a167d071be63e2cabf73e6", "filename": "libjava/gnu/java/security/der/DER.java", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bd8a2e96afaf00312fb3b0c1879e440043cf0e46/libjava%2Fgnu%2Fjava%2Fsecurity%2Fder%2FDER.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bd8a2e96afaf00312fb3b0c1879e440043cf0e46/libjava%2Fgnu%2Fjava%2Fsecurity%2Fder%2FDER.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fgnu%2Fjava%2Fsecurity%2Fder%2FDER.java?ref=bd8a2e96afaf00312fb3b0c1879e440043cf0e46", "patch": "@@ -7,7 +7,7 @@\n it under the terms of the GNU General Public License as published by\n the Free Software Foundation; either version 2, or (at your option)\n any later version.\n- \n+\n GNU Classpath is distributed in the hope that it will be useful, but\n WITHOUT ANY WARRANTY; without even the implied warranty of\n MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n@@ -41,7 +41,7 @@\n /**\n  * The set of tags for DER types.\n  *\n- * @author Casey Marshall (rsdio@metastatic.org)\n+ * @author Casey Marshall (csm@gnu.org)\n  */\n public interface DER\n {"}, {"sha": "7d7174d6d4610c0f624dd367ea09f444cc266393", "filename": "libjava/gnu/java/security/der/DERReader.java", "status": "modified", "additions": 82, "deletions": 25, "changes": 107, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bd8a2e96afaf00312fb3b0c1879e440043cf0e46/libjava%2Fgnu%2Fjava%2Fsecurity%2Fder%2FDERReader.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bd8a2e96afaf00312fb3b0c1879e440043cf0e46/libjava%2Fgnu%2Fjava%2Fsecurity%2Fder%2FDERReader.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fgnu%2Fjava%2Fsecurity%2Fder%2FDERReader.java?ref=bd8a2e96afaf00312fb3b0c1879e440043cf0e46", "patch": "@@ -7,7 +7,7 @@\n it under the terms of the GNU General Public License as published by\n the Free Software Foundation; either version 2, or (at your option)\n any later version.\n- \n+\n GNU Classpath is distributed in the hope that it will be useful, but\n WITHOUT ANY WARRANTY; without even the implied warranty of\n MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n@@ -47,11 +47,6 @@\n \n import java.math.BigInteger;\n \n-import java.nio.ByteBuffer;\n-import java.nio.CharBuffer;\n-import java.nio.charset.Charset;\n-import java.nio.charset.CharsetDecoder;\n-\n import java.util.Calendar;\n import java.util.Date;\n import java.util.TimeZone;\n@@ -65,17 +60,17 @@\n  * to the calling application to determine if the data are structured\n  * properly by inspecting the {@link DERValue} that is returned.\n  *\n- * @author Casey Marshall (rsdio@metastatic.org)\n+ * @author Casey Marshall (csm@gnu.org)\n  */\n-public class DERReader implements DER\n+public final class DERReader implements DER\n {\n \n   // Fields.\n   // ------------------------------------------------------------------------\n \n-  protected InputStream in;\n+  private InputStream in;\n \n-  protected final ByteArrayOutputStream encBuf;\n+  private final ByteArrayOutputStream encBuf;\n \n   // Constructor.\n   // ------------------------------------------------------------------------\n@@ -90,6 +85,11 @@ public DERReader(byte[] in)\n     this(new ByteArrayInputStream(in));\n   }\n \n+  public DERReader (byte[] in, int off, int len)\n+  {\n+    this (new ByteArrayInputStream (in, off, len));\n+  }\n+\n   /**\n    * Create a new DER readed from an input stream.\n    *\n@@ -123,6 +123,11 @@ public static DERValue read(byte[] encoded) throws IOException\n   // Instance methods.\n   // ------------------------------------------------------------------------\n \n+  public void skip (int bytes) throws IOException\n+  {\n+    in.skip (bytes);\n+  }\n+\n   /**\n    * Decode a single value from the input stream, returning it in a new\n    * {@link DERValue}. By \"single value\" we mean any single type in its\n@@ -251,10 +256,9 @@ else if (i < 0xFF)\n     throw new DEREncodingException();\n   }\n \n-  private String makeString(int tag, byte[] value)\n+  private static String makeString(int tag, byte[] value)\n     throws IOException\n   {\n-    Charset charset = null;\n     switch (tag & 0x1F)\n       {\n         case NUMERIC_STRING:\n@@ -265,28 +269,81 @@ private String makeString(int tag, byte[] value)\n         case GRAPHIC_STRING:\n         case ISO646_STRING:\n         case GENERAL_STRING:\n-          charset = Charset.forName(\"ISO-8859-1\");\n-          break;\n+          return fromIso88591(value);\n+\n         case UNIVERSAL_STRING:\n           // XXX The docs say UniversalString is encoded in four bytes\n           // per character, but Java has no support (yet) for UTF-32.\n           //return new String(buf, \"UTF-32\");\n         case BMP_STRING:\n-          charset = Charset.forName(\"UTF-16BE\");\n-          break;\n+          return fromUtf16Be(value);\n+\n         case UTF8_STRING:\n-          charset = Charset.forName(\"UTF-8\");\n-          break;\n+          return fromUtf8(value);\n+\n         default:\n           throw new DEREncodingException(\"unknown string tag\");\n       }\n-    if (charset == null)\n-      throw new DEREncodingException(\"no decoder\");\n-    CharsetDecoder decoder = charset.newDecoder();\n-    CharBuffer result = decoder.decode(ByteBuffer.wrap(value));\n-    char[] buf = new char[result.remaining()];\n-    result.get(buf);\n-    return new String(buf);\n+  }\n+\n+  private static String fromIso88591(byte[] bytes)\n+  {\n+    StringBuffer str = new StringBuffer(bytes.length);\n+    for (int i = 0; i < bytes.length; i++)\n+      str.append((char) (bytes[i] & 0xFF));\n+    return str.toString();\n+  }\n+\n+  private static String fromUtf16Be(byte[] bytes) throws IOException\n+  {\n+    if ((bytes.length & 0x01) != 0)\n+      throw new IOException(\"UTF-16 bytes are odd in length\");\n+    StringBuffer str = new StringBuffer(bytes.length / 2);\n+    for (int i = 0; i < bytes.length; i += 2)\n+      {\n+        char c = (char) ((bytes[i] << 8) & 0xFF);\n+        c |= (char) (bytes[i+1] & 0xFF);\n+        str.append(c);\n+      }\n+    return str.toString();\n+  }\n+\n+  private static String fromUtf8(byte[] bytes) throws IOException\n+  {\n+    StringBuffer str = new StringBuffer((int)(bytes.length / 1.5));\n+    for (int i = 0; i < bytes.length; )\n+      {\n+        char c = 0;\n+        if ((bytes[i] & 0xE0) == 0xE0)\n+          {\n+            if ((i + 2) >= bytes.length)\n+              throw new IOException(\"short UTF-8 input\");\n+            c = (char) ((bytes[i++] & 0x0F) << 12);\n+            if ((bytes[i] & 0x80) != 0x80)\n+              throw new IOException(\"malformed UTF-8 input\");\n+            c |= (char) ((bytes[i++] & 0x3F) << 6);\n+            if ((bytes[i] & 0x80) != 0x80)\n+              throw new IOException(\"malformed UTF-8 input\");\n+            c |= (char) (bytes[i++] & 0x3F);\n+          }\n+        else if ((bytes[i] & 0xC0) == 0xC0)\n+          {\n+            if ((i + 1) >= bytes.length)\n+              throw new IOException(\"short input\");\n+            c = (char) ((bytes[i++] & 0x1F) << 6);\n+            if ((bytes[i] & 0x80) != 0x80)\n+              throw new IOException(\"malformed UTF-8 input\");\n+            c |= (char) (bytes[i++] & 0x3F);\n+          }\n+        else if ((bytes[i] & 0xFF) < 0x80)\n+          {\n+            c = (char) (bytes[i++] & 0xFF);\n+          }\n+        else\n+          throw new IOException(\"badly formed UTF-8 sequence\");\n+        str.append(c);\n+      }\n+    return str.toString();\n   }\n \n   private Date makeTime(int tag, byte[] value) throws IOException"}, {"sha": "bad7beda97d84fdfdff4842d0f25a7087e9261dd", "filename": "libjava/gnu/java/security/der/DERValue.java", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bd8a2e96afaf00312fb3b0c1879e440043cf0e46/libjava%2Fgnu%2Fjava%2Fsecurity%2Fder%2FDERValue.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bd8a2e96afaf00312fb3b0c1879e440043cf0e46/libjava%2Fgnu%2Fjava%2Fsecurity%2Fder%2FDERValue.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fgnu%2Fjava%2Fsecurity%2Fder%2FDERValue.java?ref=bd8a2e96afaf00312fb3b0c1879e440043cf0e46", "patch": "@@ -7,7 +7,7 @@\n it under the terms of the GNU General Public License as published by\n the Free Software Foundation; either version 2, or (at your option)\n any later version.\n- \n+\n GNU Classpath is distributed in the hope that it will be useful, but\n WITHOUT ANY WARRANTY; without even the implied warranty of\n MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n@@ -48,15 +48,10 @@ public class DERValue implements DER\n   // ------------------------------------------------------------------------\n \n   private final int tagClass;\n-\n   private final boolean constructed;\n-\n   private final int tag;\n-\n   private int length;\n-\n   private final Object value;\n-\n   private byte[] encoded;\n \n   // Constructor."}, {"sha": "8bf80b5fc7648d3f9a96f1638c3923082434ea64", "filename": "libjava/gnu/java/security/der/DERWriter.java", "status": "modified", "additions": 54, "deletions": 23, "changes": 77, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bd8a2e96afaf00312fb3b0c1879e440043cf0e46/libjava%2Fgnu%2Fjava%2Fsecurity%2Fder%2FDERWriter.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bd8a2e96afaf00312fb3b0c1879e440043cf0e46/libjava%2Fgnu%2Fjava%2Fsecurity%2Fder%2FDERWriter.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fgnu%2Fjava%2Fsecurity%2Fder%2FDERWriter.java?ref=bd8a2e96afaf00312fb3b0c1879e440043cf0e46", "patch": "@@ -7,7 +7,7 @@\n it under the terms of the GNU General Public License as published by\n the Free Software Foundation; either version 2, or (at your option)\n any later version.\n- \n+\n GNU Classpath is distributed in the hope that it will be useful, but\n WITHOUT ANY WARRANTY; without even the implied warranty of\n MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n@@ -43,12 +43,12 @@\n import java.io.ByteArrayOutputStream;\n import java.io.IOException;\n import java.io.OutputStream;\n+\n import java.math.BigInteger;\n-import java.nio.ByteBuffer;\n-import java.nio.CharBuffer;\n-import java.nio.charset.Charset;\n-import java.nio.charset.CharsetEncoder;\n+\n import java.text.SimpleDateFormat;\n+\n+import java.util.BitSet;\n import java.util.Date;\n import java.util.Iterator;\n import java.util.List;\n@@ -66,7 +66,7 @@\n  * <p>This class only defines static methods; there are no instance\n  * variables needed.\n  *\n- * @author Casey Marshall (rsdio@metastatic.org)\n+ * @author Casey Marshall (csm@gnu.org)\n  */\n public class DERWriter implements DER\n {\n@@ -82,7 +82,7 @@ private DERWriter()\n   // Class methods.\n   // ------------------------------------------------------------------------\n \n-  public static int write(OutputStream out, DERValue object) \n+  public static int write(OutputStream out, DERValue object)\n     throws IOException\n   {\n     out.write(object.getExternalTag());\n@@ -226,7 +226,6 @@ private static int writeBitString(OutputStream out, BitString bs)\n   private static int writeString(OutputStream out, int tag, String str)\n     throws IOException\n   {\n-    Charset charset = null;\n     byte[] b = null;\n     switch (tag & 0x1F)\n       {\n@@ -238,33 +237,65 @@ private static int writeString(OutputStream out, int tag, String str)\n         case GRAPHIC_STRING:\n         case ISO646_STRING:\n         case GENERAL_STRING:\n-          charset = Charset.forName(\"ISO-8859-1\");\n+          b = toIso88591(str);\n           break;\n+\n         case UNIVERSAL_STRING:\n         case BMP_STRING:\n-          charset = Charset.forName(\"UTF-16BE\");\n+          b = toUtf16Be(str);\n           break;\n+\n         case UTF8_STRING:\n         default:\n-          charset = Charset.forName(\"UTF-8\");\n+          b = toUtf8(str);\n           break;\n       }\n-    if (charset == null)\n-      throw new DEREncodingException(\"no charset\");\n-    CharsetEncoder encoder = charset.newEncoder();\n-    ByteBuffer result = encoder.encode(CharBuffer.wrap(str));\n-    if (result.hasArray())\n+    writeLength(out, b.length);\n+    out.write(b);\n+    return b.length;\n+  }\n+\n+  private static byte[] toIso88591(String string)\n+  {\n+    byte[] result = new byte[string.length()];\n+    for (int i = 0; i < string.length(); i++)\n+      result[i] = (byte) string.charAt(i);\n+    return result;\n+  }\n+\n+  private static byte[] toUtf16Be(String string)\n+  {\n+    byte[] result = new byte[string.length() * 2];\n+    for (int i = 0; i < string.length(); i++)\n       {\n-        b = result.array();\n+        result[i*2  ] = (byte) ((string.charAt(i) >>> 8) & 0xFF);\n+        result[i*2+1] = (byte)  (string.charAt(i) & 0xFF);\n       }\n-    else\n+    return result;\n+  }\n+\n+  private static byte[] toUtf8(String string)\n+  {\n+    ByteArrayOutputStream buf =\n+      new ByteArrayOutputStream((int)(string.length() * 1.5));\n+    for (int i = 0; i < string.length(); i++)\n       {\n-        b = new byte[result.remaining()];\n-        result.get(b);\n+        char c = string.charAt(i);\n+        if (c < 0x0080)\n+          buf.write(c & 0xFF);\n+        else if (c < 0x0800)\n+          {\n+            buf.write(0xC0 | ((c >>> 6) & 0x3F));\n+            buf.write(0x80 |  (c & 0x3F));\n+          }\n+        else\n+          {\n+            buf.write(0xE0 | ((c >>> 12) & 0x0F));\n+            buf.write(0x80 | ((c >>>  6) & 0x3F));\n+            buf.write(0x80 |  (c & 0x3F));\n+          }\n       }\n-    writeLength(out, b.length);\n-    out.write(b);\n-    return b.length;\n+    return buf.toByteArray();\n   }\n \n   private static int writeDate(OutputStream out, int tag, Date date)"}]}