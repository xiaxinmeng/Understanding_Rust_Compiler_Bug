{"sha": "4617e3b52be023a28be288988fa0b299aefdc97b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDYxN2UzYjUyYmUwMjNhMjhiZTI4ODk4OGZhMGIyOTlhZWZkYzk3Yg==", "commit": {"author": {"name": "Kaveh R. Ghazi", "email": "ghazi@caip.rutgers.edu", "date": "2001-11-22T02:19:58Z"}, "committer": {"name": "Kaveh Ghazi", "email": "ghazi@gcc.gnu.org", "date": "2001-11-22T02:19:58Z"}, "message": "1750a.h (DBX_REGISTER_NUMBER): Don't define.\n\n\t* 1750a.h (DBX_REGISTER_NUMBER): Don't define.\n\t* alpha.h (DBX_REGISTER_NUMBER): Likewise.\n\t* arc.h (DBX_REGISTER_NUMBER): Likewise.\n\t* arm/aout.h (DBX_REGISTER_NUMBER): Likewise.\n\t* avr.h (DBX_REGISTER_NUMBER): Likewise.\n\t* c4x.h (DBX_REGISTER_NUMBER): Likewise.\n\t* clipper.h (DBX_REGISTER_NUMBER): Likewise.\n\t* convex.h (DBX_REGISTER_NUMBER): Likewise.\n\t* cris.h (DBX_REGISTER_NUMBER): Likewise.\n\t* dsp16xx.h (DBX_REGISTER_NUMBER): Likewise.\n\t* elxsi.h (DBX_REGISTER_NUMBER): Likewise.\n\t* fr30.h (DBX_REGISTER_NUMBER): Likewise.\n\t* h8300.h (DBX_REGISTER_NUMBER): Likewise.\n\t* i370.h (DBX_REGISTER_NUMBER): Likewise.\n\t* i860.h (DBX_REGISTER_NUMBER): Likewise.\n\t* i860/paragon.h (DBX_REGISTER_NUMBER): Likewise.\n\t* i860/sysv3.h (DBX_REGISTER_NUMBER): Likewise.\n\t* i860/sysv4.h (DBX_REGISTER_NUMBER): Likewise.\n\t* m32r.h (DBX_REGISTER_NUMBER): Likewise.\n\t* m68hc11.h (DBX_REGISTER_NUMBER): Likewise.\n\t* m88k.h (DBX_REGISTER_NUMBER): Likewise.\n\t* mcore/mcore-elf.h (DBX_REGISTER_NUMBER): Likewise.\n\t* mcore.h (DBX_REGISTER_NUMBER): Likewise.\n\t* mn10200.h (DBX_REGISTER_NUMBER): Likewise.\n\t* mn10300.h (DBX_REGISTER_NUMBER): Likewise.\n\t* pdp11.h (DBX_REGISTER_NUMBER): Likewise.\n\t* romp.h (DBX_REGISTER_NUMBER): Likewise.\n\t* rs6000.h (DBX_REGISTER_NUMBER): Likewise.\n\t* rs6000/sysv4.h (DBX_REGISTER_NUMBER): Likewise.\n\t* s390/linux.h (DBX_REGISTER_NUMBER): Likewise.\n\t* stormy16.h (DBX_REGISTER_NUMBER): Likewise.\n\t* v850.h (DBX_REGISTER_NUMBER): Likewise.\n\t* vax.h (DBX_REGISTER_NUMBER): Likewise.\n\t* we32k.h (DBX_REGISTER_NUMBER): Likewise.\n\n\t* defaults.h (DBX_REGISTER_NUMBER): Provide a default.\n\t* doc/tm.texi (DBX_REGISTER_NUMBER): Update.\n\nFrom-SVN: r47256", "tree": {"sha": "7d58190a632cfcd421039f53d501c577e8daebcc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7d58190a632cfcd421039f53d501c577e8daebcc"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4617e3b52be023a28be288988fa0b299aefdc97b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4617e3b52be023a28be288988fa0b299aefdc97b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4617e3b52be023a28be288988fa0b299aefdc97b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4617e3b52be023a28be288988fa0b299aefdc97b/comments", "author": null, "committer": null, "parents": [{"sha": "9c5a221c37501117aeebe06ee4c986b38a968024", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9c5a221c37501117aeebe06ee4c986b38a968024", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9c5a221c37501117aeebe06ee4c986b38a968024"}], "stats": {"total": 221, "additions": 52, "deletions": 169}, "files": [{"sha": "480c2794016c42ce0e7fcc605892fc85f258148f", "filename": "gcc/ChangeLog", "status": "modified", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4617e3b52be023a28be288988fa0b299aefdc97b/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4617e3b52be023a28be288988fa0b299aefdc97b/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=4617e3b52be023a28be288988fa0b299aefdc97b", "patch": "@@ -1,3 +1,43 @@\n+2001-11-21  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n+\n+\t* 1750a.h (DBX_REGISTER_NUMBER): Don't define.\n+\t* alpha.h (DBX_REGISTER_NUMBER): Likewise.\n+\t* arc.h (DBX_REGISTER_NUMBER): Likewise.\n+\t* arm/aout.h (DBX_REGISTER_NUMBER): Likewise.\n+\t* avr.h (DBX_REGISTER_NUMBER): Likewise.\n+\t* c4x.h (DBX_REGISTER_NUMBER): Likewise.\n+\t* clipper.h (DBX_REGISTER_NUMBER): Likewise.\n+\t* convex.h (DBX_REGISTER_NUMBER): Likewise.\n+\t* cris.h (DBX_REGISTER_NUMBER): Likewise.\n+\t* dsp16xx.h (DBX_REGISTER_NUMBER): Likewise.\n+\t* elxsi.h (DBX_REGISTER_NUMBER): Likewise.\n+\t* fr30.h (DBX_REGISTER_NUMBER): Likewise.\n+\t* h8300.h (DBX_REGISTER_NUMBER): Likewise.\n+\t* i370.h (DBX_REGISTER_NUMBER): Likewise.\n+\t* i860.h (DBX_REGISTER_NUMBER): Likewise.\n+\t* i860/paragon.h (DBX_REGISTER_NUMBER): Likewise.\n+\t* i860/sysv3.h (DBX_REGISTER_NUMBER): Likewise.\n+\t* i860/sysv4.h (DBX_REGISTER_NUMBER): Likewise.\n+\t* m32r.h (DBX_REGISTER_NUMBER): Likewise.\n+\t* m68hc11.h (DBX_REGISTER_NUMBER): Likewise.\n+\t* m88k.h (DBX_REGISTER_NUMBER): Likewise.\n+\t* mcore/mcore-elf.h (DBX_REGISTER_NUMBER): Likewise.\n+\t* mcore.h (DBX_REGISTER_NUMBER): Likewise.\n+\t* mn10200.h (DBX_REGISTER_NUMBER): Likewise.\n+\t* mn10300.h (DBX_REGISTER_NUMBER): Likewise.\n+\t* pdp11.h (DBX_REGISTER_NUMBER): Likewise.\n+\t* romp.h (DBX_REGISTER_NUMBER): Likewise.\n+\t* rs6000.h (DBX_REGISTER_NUMBER): Likewise.\n+\t* rs6000/sysv4.h (DBX_REGISTER_NUMBER): Likewise.\n+\t* s390/linux.h (DBX_REGISTER_NUMBER): Likewise.\n+\t* stormy16.h (DBX_REGISTER_NUMBER): Likewise.\n+\t* v850.h (DBX_REGISTER_NUMBER): Likewise.\n+\t* vax.h (DBX_REGISTER_NUMBER): Likewise.\n+\t* we32k.h (DBX_REGISTER_NUMBER): Likewise.\n+\t\n+\t* defaults.h (DBX_REGISTER_NUMBER): Provide a default.\n+\t* doc/tm.texi (DBX_REGISTER_NUMBER): Update.\n+\n 2001-11-21  H.J. Lu <hjl@gnu.org>\n \n \t* config/rs6000/sysv4.h (LIB_SPEC): Fix a typo."}, {"sha": "9d05863a86000195be301958cb6492ca4346b76f", "filename": "gcc/config/1750a/1750a.h", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4617e3b52be023a28be288988fa0b299aefdc97b/gcc%2Fconfig%2F1750a%2F1750a.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4617e3b52be023a28be288988fa0b299aefdc97b/gcc%2Fconfig%2F1750a%2F1750a.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2F1750a%2F1750a.h?ref=4617e3b52be023a28be288988fa0b299aefdc97b", "patch": "@@ -967,10 +967,6 @@ enum reg_class { NO_REGS, R2, R0_1, INDEX_REGS, BASE_REGS, ALL_REGS, LIM_REG_CLA\n  { \"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \\\n    \"8\", \"9\",\"10\",\"11\",\"12\",\"13\",\"14\",\"15\" }\n \n-/* How to renumber registers for dbx and gdb.  */\n-\n-#define DBX_REGISTER_NUMBER(REGNO) (REGNO)\n-\n /******************  Assembler output formatting  **********************/\n \n #define ASM_COMMENT_START  \";\""}, {"sha": "61e0756d40baf81e85459d3da7e0a7a3f46ffad4", "filename": "gcc/config/alpha/alpha.h", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4617e3b52be023a28be288988fa0b299aefdc97b/gcc%2Fconfig%2Falpha%2Falpha.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4617e3b52be023a28be288988fa0b299aefdc97b/gcc%2Fconfig%2Falpha%2Falpha.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Falpha.h?ref=4617e3b52be023a28be288988fa0b299aefdc97b", "patch": "@@ -1876,10 +1876,6 @@ do {\t\t\t\t\t\t\\\n  \"$f16\", \"$f17\", \"$f18\", \"$f19\", \"$f20\", \"$f21\", \"$f22\", \"$f23\",\\\n  \"$f24\", \"$f25\", \"$f26\", \"$f27\", \"$f28\", \"$f29\", \"$f30\", \"FP\"}\n \n-/* How to renumber registers for dbx and gdb.  */\n-\n-#define DBX_REGISTER_NUMBER(REGNO) (REGNO)\n-\n /* Strip name encoding when emitting labels.  */\n \n #define ASM_OUTPUT_LABELREF(STREAM, NAME)\t\\"}, {"sha": "ddd989b6a4562e3ed0b302797471a4484131773d", "filename": "gcc/config/arc/arc.h", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4617e3b52be023a28be288988fa0b299aefdc97b/gcc%2Fconfig%2Farc%2Farc.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4617e3b52be023a28be288988fa0b299aefdc97b/gcc%2Fconfig%2Farc%2Farc.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farc%2Farc.h?ref=4617e3b52be023a28be288988fa0b299aefdc97b", "patch": "@@ -1459,9 +1459,6 @@ do { if ((LOG) != 0) fprintf (FILE, \"\\t.align %d\\n\", 1 << (LOG)); } while (0)\n #undef PREFERRED_DEBUGGING_TYPE\n #define PREFERRED_DEBUGGING_TYPE DBX_DEBUG\n \n-/* How to renumber registers for dbx and gdb.  */\n-#define DBX_REGISTER_NUMBER(REGNO) (REGNO)\n-\n /* Turn off splitting of long stabs.  */\n #define DBX_CONTIN_LENGTH 0\n \f"}, {"sha": "fbdbba072f50ff428d0ee74a1df4ce1dff3bc57a", "filename": "gcc/config/arm/aout.h", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4617e3b52be023a28be288988fa0b299aefdc97b/gcc%2Fconfig%2Farm%2Faout.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4617e3b52be023a28be288988fa0b299aefdc97b/gcc%2Fconfig%2Farm%2Faout.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Faout.h?ref=4617e3b52be023a28be288988fa0b299aefdc97b", "patch": "@@ -109,9 +109,6 @@ Boston, MA 02111-1307, USA.  */\n #define NO_DOLLAR_IN_LABEL 1\n #endif\n \n-/* DBX register number for a given compiler register number */\n-#define DBX_REGISTER_NUMBER(REGNO)  (REGNO)\n-\n /* Generate DBX debugging information.  riscix.h will undefine this because\n    the native assembler does not support stabs. */\n #ifndef DBX_DEBUGGING_INFO"}, {"sha": "6daffb710fd54f5b81ae4c936e054d9362de309a", "filename": "gcc/config/avr/avr.h", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4617e3b52be023a28be288988fa0b299aefdc97b/gcc%2Fconfig%2Favr%2Favr.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4617e3b52be023a28be288988fa0b299aefdc97b/gcc%2Fconfig%2Favr%2Favr.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Favr%2Favr.h?ref=4617e3b52be023a28be288988fa0b299aefdc97b", "patch": "@@ -3063,7 +3063,5 @@ extern struct rtx_def *ldi_reg_rtx;\n \n #define PREFERRED_DEBUGGING_TYPE DBX_DEBUG\n \n-#define DBX_REGISTER_NUMBER(r) (r)\n-\n /* Get the standard ELF stabs definitions.  */\n #include \"dbxelf.h\""}, {"sha": "012d4d90b60a5fed2739f8e14a92cc10a2e3f338", "filename": "gcc/config/c4x/c4x.h", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4617e3b52be023a28be288988fa0b299aefdc97b/gcc%2Fconfig%2Fc4x%2Fc4x.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4617e3b52be023a28be288988fa0b299aefdc97b/gcc%2Fconfig%2Fc4x%2Fc4x.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fc4x%2Fc4x.h?ref=4617e3b52be023a28be288988fa0b299aefdc97b", "patch": "@@ -2574,8 +2574,6 @@ do { fprintf (asm_out_file, \"\\t.sdef\\t\");\t\t\\\n \n #define TRULY_NOOP_TRUNCATION(OUTPREC, INPREC) 1\n \n-#define DBX_REGISTER_NUMBER(REGNO) (REGNO)\n-\n /* We need to use direct addressing for large constants and addresses\n    that cannot fit within an instruction.  We must check for these\n    after after the final jump optimisation pass, since this may"}, {"sha": "1d202c08f7ad2dc50b5a8a59038118063481a230", "filename": "gcc/config/clipper/clipper.h", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4617e3b52be023a28be288988fa0b299aefdc97b/gcc%2Fconfig%2Fclipper%2Fclipper.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4617e3b52be023a28be288988fa0b299aefdc97b/gcc%2Fconfig%2Fclipper%2Fclipper.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fclipper%2Fclipper.h?ref=4617e3b52be023a28be288988fa0b299aefdc97b", "patch": "@@ -967,12 +967,6 @@ do\t\t\t\t\t\t\t\t\t      \\\n  \"f0\", \"f1\", \"f2\", \"f3\", \"f4\", \"f5\", \"f6\", \"f7\", \"f8\", \\\n  \"f9\", \"f10\", \"f11\", \"f12\", \"f13\", \"f14\", \"f15\" }\n \n-/* How to renumber registers for dbx and gdb.\n-   Clipper needs no change in the numeration.  */\n-\n-#define DBX_REGISTER_NUMBER(REGNO) (REGNO)\n-\n-\n /* This is how to output the definition of a user-level label named NAME,\n    such as the label on a static function or variable NAME.  */\n "}, {"sha": "e5ba4933a131416b55c11252eede4b6d572b4281", "filename": "gcc/config/convex/convex.h", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4617e3b52be023a28be288988fa0b299aefdc97b/gcc%2Fconfig%2Fconvex%2Fconvex.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4617e3b52be023a28be288988fa0b299aefdc97b/gcc%2Fconfig%2Fconvex%2Fconvex.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fconvex%2Fconvex.h?ref=4617e3b52be023a28be288988fa0b299aefdc97b", "patch": "@@ -1204,10 +1204,6 @@ enum reg_class {\n \n #define DBX_DEBUGGING_INFO\n \n-/* How to renumber registers for dbx and gdb.  */\n-\n-#define DBX_REGISTER_NUMBER(REGNO) (REGNO)\n-\n /* Do not break .stabs pseudos into continuations.  */\n \n #define DBX_CONTIN_LENGTH 0"}, {"sha": "b282dbdf8857cf37782e1a8692894f0465976200", "filename": "gcc/config/cris/cris.h", "status": "modified", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4617e3b52be023a28be288988fa0b299aefdc97b/gcc%2Fconfig%2Fcris%2Fcris.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4617e3b52be023a28be288988fa0b299aefdc97b/gcc%2Fconfig%2Fcris%2Fcris.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fcris%2Fcris.h?ref=4617e3b52be023a28be288988fa0b299aefdc97b", "patch": "@@ -856,15 +856,6 @@ enum reg_class {NO_REGS, ALL_REGS, LIM_REG_CLASSES};\n    TARGET_STACK_ALIGN and TARGET_ALIGN_BY_32.  */\n #define DWARF_CIE_DATA_ALIGNMENT -1\n \n-/* If we would ever need an exact mapping between canonical register\n-   number and dwarf frame register, we would either need to include all\n-   registers in the gcc decription (with some marked fixed of course), or\n-   an inverse mapping from dwarf register to gcc register.  There is one\n-   need in dwarf2out.c:expand_builtin_init_dwarf_reg_sizes.  Right now, I\n-   don't see that we need exact correspondence between DWARF *frame*\n-   registers and DBX_REGISTER_NUMBER, so map them onto GCC registers.  */\n-#define DWARF_FRAME_REGNUM(REG) (REG)\n-\n /* Node: Stack Checking */\n /* (no definitions) FIXME: Check.  */\n "}, {"sha": "04aca6c44ac1e963d1eaea736e2d49399c86c41e", "filename": "gcc/config/dsp16xx/dsp16xx.h", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4617e3b52be023a28be288988fa0b299aefdc97b/gcc%2Fconfig%2Fdsp16xx%2Fdsp16xx.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4617e3b52be023a28be288988fa0b299aefdc97b/gcc%2Fconfig%2Fdsp16xx%2Fdsp16xx.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fdsp16xx%2Fdsp16xx.h?ref=4617e3b52be023a28be288988fa0b299aefdc97b", "patch": "@@ -1892,8 +1892,6 @@ const_section ()                                                   \\\n \n #define PREFERRED_DEBUGGING_TYPE DWARF2_DEBUG\n \n-#define DBX_REGISTER_NUMBER(REGNO)   (REGNO)\n-\n #define ASM_OUTPUT_DEF(asm_out_file, LABEL1, LABEL2) \\\n          do {\t\t\t\t\t\t\\\n \t fprintf (asm_out_file, \".alias \" ); \\"}, {"sha": "16cd8981a6c9132ab19f15d0855e241d367f6956", "filename": "gcc/config/elxsi/elxsi.h", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4617e3b52be023a28be288988fa0b299aefdc97b/gcc%2Fconfig%2Felxsi%2Felxsi.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4617e3b52be023a28be288988fa0b299aefdc97b/gcc%2Fconfig%2Felxsi%2Felxsi.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Felxsi%2Felxsi.h?ref=4617e3b52be023a28be288988fa0b299aefdc97b", "patch": "@@ -688,11 +688,6 @@ enum reg_class { NO_REGS, GENERAL_REGS, ALL_REGS, LIM_REG_CLASSES };\n \n /* #define DBX_DEBUGGING_INFO */\n \n-/* How to renumber registers for dbx and gdb.\n-   VAX needs no change in the numeration.  */\n-\n-#define DBX_REGISTER_NUMBER(REGNO) (REGNO)\n-\n /* Do not break .stabs pseudos into continuations.  */\n \n #define DBX_CONTIN_LENGTH 0"}, {"sha": "3c7b46bfb2728050c381cbae4b8b0fe27a5c6048", "filename": "gcc/config/fr30/fr30.h", "status": "modified", "additions": 0, "deletions": 20, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4617e3b52be023a28be288988fa0b299aefdc97b/gcc%2Fconfig%2Ffr30%2Ffr30.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4617e3b52be023a28be288988fa0b299aefdc97b/gcc%2Fconfig%2Ffr30%2Ffr30.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Ffr30%2Ffr30.h?ref=4617e3b52be023a28be288988fa0b299aefdc97b", "patch": "@@ -1620,26 +1620,6 @@ fprintf (STREAM, \"\\t.word .L%d\\n\", VALUE)\n #define ASM_OUTPUT_ALIGN(STREAM, POWER) \\\n   fprintf ((STREAM), \"\\t.p2align %d\\n\", (POWER))\n \n-/*}}}*/ \f\n-/*{{{  Macros Affecting all Debug Formats.  */ \n-\n-/* A C expression that returns the DBX register number for the compiler\n-   register number REGNO.  In simple cases, the value of this expression may be\n-   REGNO itself.  But sometimes there are some registers that the compiler\n-   knows about and DBX does not, or vice versa.  In such cases, some register\n-   may need to have one number in the compiler and another for DBX.\n-\n-   If two registers have consecutive numbers inside GNU CC, and they can be\n-   used as a pair to hold a multiword value, then they *must* have consecutive\n-   numbers after renumbering with `DBX_REGISTER_NUMBER'.  Otherwise, debuggers\n-   will be unable to access such a pair, because they expect register pairs to\n-   be consecutive in their own numbering scheme.\n-\n-   If you find yourself defining `DBX_REGISTER_NUMBER' in way that does not\n-   preserve register pairs, then what you must do instead is redefine the\n-   actual register numbering scheme.  */\n-#define DBX_REGISTER_NUMBER(REGNO) (REGNO)\n-\n /*}}}*/ \f\n /*{{{  Macros for SDB and Dwarf Output.  */ \n "}, {"sha": "d27c987a2d99bbd33d6cd12ac84b7d5bf6c6e829", "filename": "gcc/config/h8300/h8300.h", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4617e3b52be023a28be288988fa0b299aefdc97b/gcc%2Fconfig%2Fh8300%2Fh8300.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4617e3b52be023a28be288988fa0b299aefdc97b/gcc%2Fconfig%2Fh8300%2Fh8300.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fh8300%2Fh8300.h?ref=4617e3b52be023a28be288988fa0b299aefdc97b", "patch": "@@ -1176,11 +1176,6 @@ readonly_data ()\t\t\t\t\t\t\t\\\n { {\"er0\", 0}, {\"er1\", 1}, {\"er2\", 2}, {\"er3\", 3}, {\"er4\", 4}, \\\n   {\"er5\", 5}, {\"er6\", 6}, {\"er7\", 7}, {\"r7\", 7} }\n \n-/* How to renumber registers for dbx and gdb.\n-   H8/300 needs no change in the numeration.  */\n-\n-#define DBX_REGISTER_NUMBER(REGNO) (REGNO)\n-\n #define SDB_DEBUGGING_INFO\n #define SDB_DELIM\t\"\\n\"\n "}, {"sha": "61418cfce8e99a49d3227868a01d0f38547cc7b1", "filename": "gcc/config/i370/i370.h", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4617e3b52be023a28be288988fa0b299aefdc97b/gcc%2Fconfig%2Fi370%2Fi370.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4617e3b52be023a28be288988fa0b299aefdc97b/gcc%2Fconfig%2Fi370%2Fi370.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi370%2Fi370.h?ref=4617e3b52be023a28be288988fa0b299aefdc97b", "patch": "@@ -1070,9 +1070,6 @@ enum reg_class\n   \"0\",  \"2\",  \"4\",  \"6\"\t\t\t\t\t\t\t\\\n }\n \n-/* How to renumber registers for dbx and gdb.  */\n-#define DBX_REGISTER_NUMBER(REGNO)  (REGNO)\n-\n #define ASM_FILE_START(FILE)\t\t\t\t\t\t\\\n { fputs (\"\\tRMODE\\tANY\\n\", FILE);\t\t\t\t\t\\\n   fputs (\"\\tCSECT\\n\", FILE); }\n@@ -1629,9 +1626,6 @@ enum reg_class\n   \"f0\",  \"f2\",  \"f4\",  \"f6\"\t\t\t\t\t\t\\\n }\n \n-/* How to renumber registers for dbx and gdb.  */\n-#define DBX_REGISTER_NUMBER(REGNO)  (REGNO)\n-\n /* Print operand XV (an rtx) in assembler syntax to file FILE.\n    CODE is a letter or dot (`z' in `%z0') or 0 if no letter was specified.\n    For `%' followed by punctuation, CODE is the punctuation and XV is null. */"}, {"sha": "106d512b06801cb6943aa1ed29c065c117ba78c6", "filename": "gcc/config/i860/i860.h", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4617e3b52be023a28be288988fa0b299aefdc97b/gcc%2Fconfig%2Fi860%2Fi860.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4617e3b52be023a28be288988fa0b299aefdc97b/gcc%2Fconfig%2Fi860%2Fi860.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi860%2Fi860.h?ref=4617e3b52be023a28be288988fa0b299aefdc97b", "patch": "@@ -1024,10 +1024,6 @@ struct cumulative_args { int ints, floats; };\n  \"f20\", \"f21\", \"f22\", \"f23\", \"f24\", \"f25\", \"f26\", \"f27\", \"f28\", \"f29\",\t\\\n  \"f30\", \"f31\" }\n \n-/* How to renumber registers for dbx and gdb.  */\n-\n-#define DBX_REGISTER_NUMBER(REGNO) (REGNO)\n-\n /* This is how to output the definition of a user-level label named NAME,\n    such as the label on a static function or variable NAME.  */\n "}, {"sha": "f0f925bcb4a3427d5c8e524bd8a800b8a6dd9c71", "filename": "gcc/config/i860/paragon.h", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4617e3b52be023a28be288988fa0b299aefdc97b/gcc%2Fconfig%2Fi860%2Fparagon.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4617e3b52be023a28be288988fa0b299aefdc97b/gcc%2Fconfig%2Fi860%2Fparagon.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi860%2Fparagon.h?ref=4617e3b52be023a28be288988fa0b299aefdc97b", "patch": "@@ -71,8 +71,6 @@ Boston, MA 02111-1307, USA.  */\n #undef TYPE_OPERAND_FMT\n #define TYPE_OPERAND_FMT      \"\\\"%s\\\"\"\n \n-#define DBX_REGISTER_NUMBER(REGNO) (REGNO)\n-\n #undef ASCII_DATA_ASM_OP\n #define ASCII_DATA_ASM_OP\t\"\\t.byte\\t\"\n "}, {"sha": "840da5a0dff43c13e23b718067b1d2ba9aa1fe6f", "filename": "gcc/config/i860/sysv3.h", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4617e3b52be023a28be288988fa0b299aefdc97b/gcc%2Fconfig%2Fi860%2Fsysv3.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4617e3b52be023a28be288988fa0b299aefdc97b/gcc%2Fconfig%2Fi860%2Fsysv3.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi860%2Fsysv3.h?ref=4617e3b52be023a28be288988fa0b299aefdc97b", "patch": "@@ -46,10 +46,6 @@ Boston, MA 02111-1307, USA.  */\n \n #define ASM_COMMENT_START \"//\"\n \n-/* Don't renumber the regusters for debugger output.  */\n-\n-#define DBX_REGISTER_NUMBER(REGNO) (REGNO)\n-\n /* Output the special word the System V SDB wants to see just before\n    the first word of each function's prologue code.  */\n "}, {"sha": "4d335f719c051268bae95f2c207b9c90fc76eae5", "filename": "gcc/config/i860/sysv4.h", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4617e3b52be023a28be288988fa0b299aefdc97b/gcc%2Fconfig%2Fi860%2Fsysv4.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4617e3b52be023a28be288988fa0b299aefdc97b/gcc%2Fconfig%2Fi860%2Fsysv4.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi860%2Fsysv4.h?ref=4617e3b52be023a28be288988fa0b299aefdc97b", "patch": "@@ -48,8 +48,6 @@ Boston, MA 02111-1307, USA.  */\n #undef TYPE_OPERAND_FMT\n #define TYPE_OPERAND_FMT      \"\\\"%s\\\"\"\n \n-#define DBX_REGISTER_NUMBER(REGNO) (REGNO)\n-\n /* The following macro definition overrides the one in i860.h\n    because the svr4 i860 assembler requires a different syntax\n    for getting parts of constant/relocatable values.  */"}, {"sha": "614caa0c3d753d7895f6dee8dfd743433881a036", "filename": "gcc/config/m32r/m32r.h", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4617e3b52be023a28be288988fa0b299aefdc97b/gcc%2Fconfig%2Fm32r%2Fm32r.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4617e3b52be023a28be288988fa0b299aefdc97b/gcc%2Fconfig%2Fm32r%2Fm32r.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm32r%2Fm32r.h?ref=4617e3b52be023a28be288988fa0b299aefdc97b", "patch": "@@ -2023,9 +2023,6 @@ extern char m32r_punct_chars[];\n #undef  PREFERRED_DEBUGGING_TYPE\n #define PREFERRED_DEBUGGING_TYPE DBX_DEBUG\n \n-/* How to renumber registers for dbx and gdb.  */\n-#define DBX_REGISTER_NUMBER(REGNO) (REGNO)\n-\n /* Turn off splitting of long stabs.  */\n #define DBX_CONTIN_LENGTH 0\n \f"}, {"sha": "3cd3a2ab48dd8fd0e5b0c5d1f8f512544da7f4af", "filename": "gcc/config/m68hc11/m68hc11.h", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4617e3b52be023a28be288988fa0b299aefdc97b/gcc%2Fconfig%2Fm68hc11%2Fm68hc11.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4617e3b52be023a28be288988fa0b299aefdc97b/gcc%2Fconfig%2Fm68hc11%2Fm68hc11.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68hc11%2Fm68hc11.h?ref=4617e3b52be023a28be288988fa0b299aefdc97b", "patch": "@@ -1758,10 +1758,6 @@ do { long l;\t\t\t\t\t\t\\\n /* Default values provided by GCC should be ok. Assumming that DWARF-2\n    frame unwind info is ok for this platform.  */\n \n-/* How to renumber registers for dbx and gdb.  */\n-#define DBX_REGISTER_NUMBER(REGNO) \\\n- ((REGNO))\n-\n #undef PREFERRED_DEBUGGING_TYPE\n #define PREFERRED_DEBUGGING_TYPE DWARF2_DEBUG\n "}, {"sha": "3d802e81f7d55c240d7f7a0a3284a53c76251b21", "filename": "gcc/config/m88k/m88k.h", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4617e3b52be023a28be288988fa0b299aefdc97b/gcc%2Fconfig%2Fm88k%2Fm88k.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4617e3b52be023a28be288988fa0b299aefdc97b/gcc%2Fconfig%2Fm88k%2Fm88k.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm88k%2Fm88k.h?ref=4617e3b52be023a28be288988fa0b299aefdc97b", "patch": "@@ -1861,9 +1861,6 @@ enum reg_class { NO_REGS, AP_REG, XRF_REGS, GENERAL_REGS, AGRF_REGS,\n \n #define ADDITIONAL_REGISTER_NAMES\t{{\"psr\", 0}, {\"cc\", 0}}\n \n-/* How to renumber registers for dbx and gdb.  */\n-#define DBX_REGISTER_NUMBER(REGNO) (REGNO)\n-\n /* Tell when to declare ASM names.  Override svr4.h to provide this hook.  */\n #undef\tDECLARE_ASM_NAME\n #define DECLARE_ASM_NAME TARGET_SVR4"}, {"sha": "ef1feedea1b6605d3ff367e78085d1a001eac11e", "filename": "gcc/config/mcore/mcore-elf.h", "status": "modified", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4617e3b52be023a28be288988fa0b299aefdc97b/gcc%2Fconfig%2Fmcore%2Fmcore-elf.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4617e3b52be023a28be288988fa0b299aefdc97b/gcc%2Fconfig%2Fmcore%2Fmcore-elf.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmcore%2Fmcore-elf.h?ref=4617e3b52be023a28be288988fa0b299aefdc97b", "patch": "@@ -40,18 +40,6 @@ Boston, MA 02111-1307, USA.  */\n #define DWARF_DEBUGGING_INFO 1\n #endif\n \n-/* The numbers used to denote specific machine registers in the System V\n-   Release 4 DWARF debugging information are quite likely to be totally\n-   different from the numbers used in BSD stabs debugging information\n-   for the same kind of target machine.  Thus, we undefine the macro\n-   DBX_REGISTER_NUMBER here as an extra inducement to get people to\n-   provide proper machine-specific definitions of DBX_REGISTER_NUMBER\n-   (which is also used to provide DWARF registers numbers in dwarfout.c)\n-   in their tm.h files which include this file.  */\n-\n-#undef  DBX_REGISTER_NUMBER\n-#define DBX_REGISTER_NUMBER(REGNO) (REGNO)\n-\n /* MCore defines .long and .short to NOT force any alignment.\n    This lets you misalign as much as you wish.  */\n #define\tUNALIGNED_INT_ASM_OP\t\"\\t.long\\t\""}, {"sha": "e19b047166e4fb2543d439e464590a8274fc5f44", "filename": "gcc/config/mcore/mcore.h", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4617e3b52be023a28be288988fa0b299aefdc97b/gcc%2Fconfig%2Fmcore%2Fmcore.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4617e3b52be023a28be288988fa0b299aefdc97b/gcc%2Fconfig%2Fmcore%2Fmcore.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmcore%2Fmcore.h?ref=4617e3b52be023a28be288988fa0b299aefdc97b", "patch": "@@ -1136,9 +1136,6 @@ switch_to_section (section, decl)\t\t\t\t\\\n \t   (STACK_BOUNDARY / BITS_PER_UNIT))\n \n   \n-/* DBX register number for a given compiler register number.  */\n-#define DBX_REGISTER_NUMBER(REGNO)  (REGNO)\n-\n /* Output a label definition.  */\n #define ASM_OUTPUT_LABEL(FILE,NAME)  \\\n   do { assemble_name (FILE, NAME); fputs (\":\\n\", FILE); } while (0)"}, {"sha": "ffc5c7cca5262b7a3912425c933f310f883c5abb", "filename": "gcc/config/mn10200/mn10200.h", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4617e3b52be023a28be288988fa0b299aefdc97b/gcc%2Fconfig%2Fmn10200%2Fmn10200.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4617e3b52be023a28be288988fa0b299aefdc97b/gcc%2Fconfig%2Fmn10200%2Fmn10200.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmn10200%2Fmn10200.h?ref=4617e3b52be023a28be288988fa0b299aefdc97b", "patch": "@@ -944,8 +944,6 @@ do { char dstr[30];\t\t\t\t\t\\\n #undef PREFERRED_DEBUGGING_TYPE\n #define PREFERRED_DEBUGGING_TYPE DBX_DEBUG\n \n-#define DBX_REGISTER_NUMBER(REGNO) REGNO\n-\n /* GDB always assumes the current function's frame begins at the value\n    of the stack pointer upon entry to the current function.  Accessing\n    local variables and parameters passed on the stack is done using the"}, {"sha": "db77f064acab68cc46fe10c1cbb3da532361283a", "filename": "gcc/config/mn10300/mn10300.h", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4617e3b52be023a28be288988fa0b299aefdc97b/gcc%2Fconfig%2Fmn10300%2Fmn10300.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4617e3b52be023a28be288988fa0b299aefdc97b/gcc%2Fconfig%2Fmn10300%2Fmn10300.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmn10300%2Fmn10300.h?ref=4617e3b52be023a28be288988fa0b299aefdc97b", "patch": "@@ -1039,8 +1039,6 @@ do { char dstr[30];\t\t\t\t\t\\\n \n #define DWARF2_ASM_LINE_DEBUG_INFO 1\n \n-#define DBX_REGISTER_NUMBER(REGNO) (REGNO)\n-\n /* GDB always assumes the current function's frame begins at the value\n    of the stack pointer upon entry to the current function.  Accessing\n    local variables and parameters passed on the stack is done using the"}, {"sha": "5f8d968c2b3f8b2c6e69891bec6f80a7b74a4b82", "filename": "gcc/config/pdp11/pdp11.h", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4617e3b52be023a28be288988fa0b299aefdc97b/gcc%2Fconfig%2Fpdp11%2Fpdp11.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4617e3b52be023a28be288988fa0b299aefdc97b/gcc%2Fconfig%2Fpdp11%2Fpdp11.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpdp11%2Fpdp11.h?ref=4617e3b52be023a28be288988fa0b299aefdc97b", "patch": "@@ -1059,10 +1059,6 @@ fprintf (FILE, \"$help$: . = .+8 ; space for tmp moves!\\n\")\t\\\n {\"r0\", \"r1\", \"r2\", \"r3\", \"r4\", \"r5\", \"sp\", \"pc\",     \\\n  \"ac0\", \"ac1\", \"ac2\", \"ac3\", \"ac4\", \"ac5\" }\n \n-/* How to renumber registers for dbx and gdb.  */\n-\n-#define DBX_REGISTER_NUMBER(REGNO) (REGNO)\n-\n /* This is how to output the definition of a user-level label named NAME,\n    such as the label on a static function or variable NAME.  */\n "}, {"sha": "2a1cd2b12a4f15ec98f6e6f5bb7b1f9bab812dfa", "filename": "gcc/config/romp/romp.h", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4617e3b52be023a28be288988fa0b299aefdc97b/gcc%2Fconfig%2Fromp%2Fromp.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4617e3b52be023a28be288988fa0b299aefdc97b/gcc%2Fconfig%2Fromp%2Fromp.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fromp%2Fromp.h?ref=4617e3b52be023a28be288988fa0b299aefdc97b", "patch": "@@ -1347,10 +1347,6 @@ struct rt_cargs {int gregs, fregs; };\n  \"r10\", \"r11\", \"r12\", \"r13\", \"r14\", \"r15\", \"ap\",\t\t\\\n  \"fr0\", \"fr1\", \"fr2\", \"fr3\", \"fr4\", \"fr5\", \"fr6\", \"fr7\" }\n \n-/* How to renumber registers for dbx and gdb.  */\n-\n-#define DBX_REGISTER_NUMBER(REGNO) (REGNO)\n-\n /* This is how to output the definition of a user-level label named NAME,\n    such as the label on a static function or variable NAME.  */\n "}, {"sha": "d17ce87a221b35c48df8b36897760e0715fbd327", "filename": "gcc/config/rs6000/rs6000.h", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4617e3b52be023a28be288988fa0b299aefdc97b/gcc%2Fconfig%2Frs6000%2Frs6000.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4617e3b52be023a28be288988fa0b299aefdc97b/gcc%2Fconfig%2Frs6000%2Frs6000.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.h?ref=4617e3b52be023a28be288988fa0b299aefdc97b", "patch": "@@ -2633,10 +2633,6 @@ extern char rs6000_reg_names[][8];\t/* register names (0 vs. %r0).  */\n   {\"cr4\",  72}, {\"cr5\",  73}, {\"cr6\",  74}, {\"cr7\",  75},\t\\\n   {\"cc\",   68}, {\"sp\",    1}, {\"toc\",   2} }\n \n-/* How to renumber registers for dbx and gdb.  */\n-\n-#define DBX_REGISTER_NUMBER(REGNO) (REGNO)\n-\n /* Text to write out after a CALL that may be replaced by glue code by\n    the loader.  This depends on the AIX version.  */\n #define RS6000_CALL_GLUE \"cror 31,31,31\""}, {"sha": "e5a92ecaaacd8d886e7b3c31f90e446bc3fa5a9d", "filename": "gcc/config/rs6000/sysv4.h", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4617e3b52be023a28be288988fa0b299aefdc97b/gcc%2Fconfig%2Frs6000%2Fsysv4.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4617e3b52be023a28be288988fa0b299aefdc97b/gcc%2Fconfig%2Frs6000%2Fsysv4.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Fsysv4.h?ref=4617e3b52be023a28be288988fa0b299aefdc97b", "patch": "@@ -698,10 +698,6 @@ extern int rs6000_pic_labelno;\n #define\tASM_OUTPUT_MI_THUNK(FILE, THUNK_FNDECL, DELTA, FUNCTION) \\\n   output_mi_thunk (FILE, THUNK_FNDECL, DELTA, FUNCTION)\n \n-/* How to renumber registers for dbx and gdb.  */\n-\n-#define\tDBX_REGISTER_NUMBER(REGNO) (REGNO)\n-\n /* The USER_LABEL_PREFIX stuff is affected by the -fleading-underscore\n    flag.  The LOCAL_LABEL_PREFIX variable is used by dbxelf.h.  */\n "}, {"sha": "75a483de8235af98b484d5bc72b43b8cf5411ed9", "filename": "gcc/config/s390/linux.h", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4617e3b52be023a28be288988fa0b299aefdc97b/gcc%2Fconfig%2Fs390%2Flinux.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4617e3b52be023a28be288988fa0b299aefdc97b/gcc%2Fconfig%2Fs390%2Flinux.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Flinux.h?ref=4617e3b52be023a28be288988fa0b299aefdc97b", "patch": "@@ -279,8 +279,6 @@ do {                                                                    \\\n #define ASM_GLOBALIZE_LABEL(FILE, NAME)  \\\n   (fputs (\".globl \", FILE), assemble_name (FILE, NAME), fputs (\"\\n\", FILE))\n \n-#define DBX_REGISTER_NUMBER(REGNO) (REGNO)\n-\n /* Select section for constant in constant pool. \n    We are in the right section. \n    undef for 64 bit mode (linux64.h)."}, {"sha": "6bbd93a7e1b52aa851a32adab96d01dd99f36187", "filename": "gcc/config/stormy16/stormy16.h", "status": "modified", "additions": 0, "deletions": 19, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4617e3b52be023a28be288988fa0b299aefdc97b/gcc%2Fconfig%2Fstormy16%2Fstormy16.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4617e3b52be023a28be288988fa0b299aefdc97b/gcc%2Fconfig%2Fstormy16%2Fstormy16.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fstormy16%2Fstormy16.h?ref=4617e3b52be023a28be288988fa0b299aefdc97b", "patch": "@@ -4598,25 +4598,6 @@ do {\t\t\t\t\t\t\t\t\t\\\n \f\n /* Macros Affecting all Debug Formats.  */\n \n-/* A C expression that returns the DBX register number for the compiler\n-   register number REGNO.  In simple cases, the value of this expression may be\n-   REGNO itself.  But sometimes there are some registers that the compiler\n-   knows about and DBX does not, or vice versa.  In such cases, some register\n-   may need to have one number in the compiler and another for DBX.\n-\n-   If two registers have consecutive numbers inside GNU CC, and they can be\n-   used as a pair to hold a multiword value, then they *must* have consecutive\n-   numbers after renumbering with `DBX_REGISTER_NUMBER'.  Otherwise, debuggers\n-   will be unable to access such a pair, because they expect register pairs to\n-   be consecutive in their own numbering scheme.\n-\n-   If you find yourself defining `DBX_REGISTER_NUMBER' in way that does not\n-   preserve register pairs, then what you must do instead is redefine the\n-   actual register numbering scheme.\n-\n-   This declaration is required.  */\n-#define DBX_REGISTER_NUMBER(REGNO) (REGNO)\n-\n /* A C expression that returns the integer offset value for an automatic\n    variable having address X (an RTL expression).  The default computation\n    assumes that X is based on the frame-pointer and gives the offset from the"}, {"sha": "fa0ee65816d50794a27bb1346378cdbf6d5c6fcc", "filename": "gcc/config/v850/v850.h", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4617e3b52be023a28be288988fa0b299aefdc97b/gcc%2Fconfig%2Fv850%2Fv850.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4617e3b52be023a28be288988fa0b299aefdc97b/gcc%2Fconfig%2Fv850%2Fv850.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fv850%2Fv850.h?ref=4617e3b52be023a28be288988fa0b299aefdc97b", "patch": "@@ -1429,8 +1429,6 @@ do { char dstr[30];\t\t\t\t\t\\\n #undef PREFERRED_DEBUGGING_TYPE\n #define PREFERRED_DEBUGGING_TYPE DBX_DEBUG\n \n-#define DBX_REGISTER_NUMBER(REGNO) REGNO\n-\n /* Define to use software floating point emulator for REAL_ARITHMETIC and\n    decimal <-> binary conversion. */\n #define REAL_ARITHMETIC"}, {"sha": "0edc824f420ed2d5747a748a82ca6883cbb54d11", "filename": "gcc/config/vax/vax.h", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4617e3b52be023a28be288988fa0b299aefdc97b/gcc%2Fconfig%2Fvax%2Fvax.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4617e3b52be023a28be288988fa0b299aefdc97b/gcc%2Fconfig%2Fvax%2Fvax.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fvax%2Fvax.h?ref=4617e3b52be023a28be288988fa0b299aefdc97b", "patch": "@@ -1055,11 +1055,6 @@ enum reg_class { NO_REGS, ALL_REGS, LIM_REG_CLASSES };\n \n #define DBX_DEBUGGING_INFO\n \n-/* How to renumber registers for dbx and gdb.\n-   VAX needs no change in the numeration.  */\n-\n-#define DBX_REGISTER_NUMBER(REGNO) (REGNO)\n-\n /* Do not break .stabs pseudos into continuations.  */\n \n #define DBX_CONTIN_LENGTH 0"}, {"sha": "012113fb479592eb44d379662b5a9cba43960be0", "filename": "gcc/config/we32k/we32k.h", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4617e3b52be023a28be288988fa0b299aefdc97b/gcc%2Fconfig%2Fwe32k%2Fwe32k.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4617e3b52be023a28be288988fa0b299aefdc97b/gcc%2Fconfig%2Fwe32k%2Fwe32k.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fwe32k%2Fwe32k.h?ref=4617e3b52be023a28be288988fa0b299aefdc97b", "patch": "@@ -708,10 +708,6 @@ enum reg_class { NO_REGS, GENERAL_REGS,\n {\"r0\", \"r1\", \"r2\", \"r3\", \"r4\", \"r5\", \"r6\", \"r7\",\t\\\n  \"r8\", \"fp\", \"ap\", \"psw\", \"sp\", \"pcbp\", \"isp\", \"pc\"\t}\n \n-/* How to renumber registers for dbx and gdb.  */\n-\n-#define DBX_REGISTER_NUMBER(REGNO) (REGNO)\n-\n /* Output SDB debugging info in response to the -g option.  */\n \n #define SDB_DEBUGGING_INFO"}, {"sha": "816afe8744a40d7fc0f3e04e7fdfffa99bc5b58e", "filename": "gcc/defaults.h", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4617e3b52be023a28be288988fa0b299aefdc97b/gcc%2Fdefaults.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4617e3b52be023a28be288988fa0b299aefdc97b/gcc%2Fdefaults.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdefaults.h?ref=4617e3b52be023a28be288988fa0b299aefdc97b", "patch": "@@ -270,6 +270,13 @@ do {\t\t\t\t\t\t\t\t\\\n #define DWARF_FRAME_REGISTERS FIRST_PSEUDO_REGISTER\n #endif\n \n+/* How to renumber registers for dbx and gdb.  If not defined, assume\n+   no renumbering is necessary.  */\n+\n+#ifndef DBX_REGISTER_NUMBER\n+#define DBX_REGISTER_NUMBER(REGNO) (REGNO)\n+#endif\n+\n /* Default sizes for base C types.  If the sizes are different for\n    your target, you should override these values by defining the\n    appropriate symbols in your tm.h file.  */"}, {"sha": "40b954289ce7f2667bd5af1531ecedb9500faff1", "filename": "gcc/doc/tm.texi", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4617e3b52be023a28be288988fa0b299aefdc97b/gcc%2Fdoc%2Ftm.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4617e3b52be023a28be288988fa0b299aefdc97b/gcc%2Fdoc%2Ftm.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Ftm.texi?ref=4617e3b52be023a28be288988fa0b299aefdc97b", "patch": "@@ -7377,11 +7377,11 @@ These macros affect all debugging formats.\n @findex DBX_REGISTER_NUMBER\n @item DBX_REGISTER_NUMBER (@var{regno})\n A C expression that returns the DBX register number for the compiler\n-register number @var{regno}.  In simple cases, the value of this\n-expression may be @var{regno} itself.  But sometimes there are some\n-registers that the compiler knows about and DBX does not, or vice\n-versa.  In such cases, some register may need to have one number in\n-the compiler and another for DBX@.\n+register number @var{regno}.  In the default macro provided, the value\n+of this expression will be @var{regno} itself.  But sometimes there are\n+some registers that the compiler knows about and DBX does not, or vice\n+versa.  In such cases, some register may need to have one number in the\n+compiler and another for DBX@.\n \n If two registers have consecutive numbers inside GCC, and they can be\n used as a pair to hold a multiword value, then they @emph{must} have"}]}