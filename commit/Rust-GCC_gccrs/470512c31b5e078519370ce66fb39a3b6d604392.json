{"sha": "470512c31b5e078519370ce66fb39a3b6d604392", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDcwNTEyYzMxYjVlMDc4NTE5MzcwY2U2NmZiMzlhM2I2ZDYwNDM5Mg==", "commit": {"author": {"name": "Kyrylo Tkachov", "email": "kyrylo.tkachov@arm.com", "date": "2015-09-28T08:23:47Z"}, "committer": {"name": "Kyrylo Tkachov", "email": "ktkachov@gcc.gnu.org", "date": "2015-09-28T08:23:47Z"}, "message": "[RTL-ifcvt] PR rtl-optimization/67465: Handle pairs of complex+simple blocks and empty blocks more gracefully\n\n        PR rtl-optimization/67456\n        PR rtl-optimization/67464\n        PR rtl-optimization/67465\n        * ifcvt.c (noce_try_cmove_arith): Bail out if cannot conditionally\n        move in the mode of x.  Handle combination of complex and simple\n        block pairs as well as the case when one is empty.\n\n        * gcc.dg/pr67465.c: New test.\n\nFrom-SVN: r228194", "tree": {"sha": "9c5c6978d44e03c901bb4085d25713d4b893a1ae", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9c5c6978d44e03c901bb4085d25713d4b893a1ae"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/470512c31b5e078519370ce66fb39a3b6d604392", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/470512c31b5e078519370ce66fb39a3b6d604392", "html_url": "https://github.com/Rust-GCC/gccrs/commit/470512c31b5e078519370ce66fb39a3b6d604392", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/470512c31b5e078519370ce66fb39a3b6d604392/comments", "author": {"login": "ktkachov-arm", "id": 74917949, "node_id": "MDQ6VXNlcjc0OTE3OTQ5", "avatar_url": "https://avatars.githubusercontent.com/u/74917949?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ktkachov-arm", "html_url": "https://github.com/ktkachov-arm", "followers_url": "https://api.github.com/users/ktkachov-arm/followers", "following_url": "https://api.github.com/users/ktkachov-arm/following{/other_user}", "gists_url": "https://api.github.com/users/ktkachov-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/ktkachov-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ktkachov-arm/subscriptions", "organizations_url": "https://api.github.com/users/ktkachov-arm/orgs", "repos_url": "https://api.github.com/users/ktkachov-arm/repos", "events_url": "https://api.github.com/users/ktkachov-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/ktkachov-arm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "a681b758e9eb67a7eed0b65bbfc610aa44b905cb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a681b758e9eb67a7eed0b65bbfc610aa44b905cb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a681b758e9eb67a7eed0b65bbfc610aa44b905cb"}], "stats": {"total": 101, "additions": 100, "deletions": 1}, "files": [{"sha": "b3419b62f00ed3b17e38964879dac8d093bbea09", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/470512c31b5e078519370ce66fb39a3b6d604392/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/470512c31b5e078519370ce66fb39a3b6d604392/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=470512c31b5e078519370ce66fb39a3b6d604392", "patch": "@@ -1,3 +1,12 @@\n+2015-09-28  Kyrylo Tkachov  <kyrylo.tkachov@arm.com>\n+\n+\tPR rtl-optimization/67456\n+\tPR rtl-optimization/67464\n+\tPR rtl-optimization/67465\n+\t* ifcvt.c (noce_try_cmove_arith): Bail out if cannot conditionally\n+\tmove in the mode of x.  Handle combination of complex and simple\n+\tblock pairs as well as the case when one is empty.\n+\n 2015-09-28  Trevor Saunders  <tbsaunde+gcc@tbsaunde.org>\n \n \t* doc/gimple.texi: Update references to gimple_statement_base."}, {"sha": "2b63216b9dd4e0355a9eb9bcfb5997150b45f3cc", "filename": "gcc/ifcvt.c", "status": "modified", "additions": 31, "deletions": 1, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/470512c31b5e078519370ce66fb39a3b6d604392/gcc%2Fifcvt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/470512c31b5e078519370ce66fb39a3b6d604392/gcc%2Fifcvt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fifcvt.c?ref=470512c31b5e078519370ce66fb39a3b6d604392", "patch": "@@ -1961,6 +1961,11 @@ noce_try_cmove_arith (struct noce_if_info *if_info)\n   insn_a = if_info->insn_a;\n   insn_b = if_info->insn_b;\n \n+  machine_mode x_mode = GET_MODE (x);\n+\n+  if (!can_conditionally_move_p (x_mode))\n+    return FALSE;\n+\n   unsigned int then_cost;\n   unsigned int else_cost;\n   if (insn_a)\n@@ -1997,13 +2002,38 @@ noce_try_cmove_arith (struct noce_if_info *if_info)\n \t}\n     }\n \n-  if (!a_simple && then_bb && !b_simple && else_bb\n+  if (then_bb && else_bb && !a_simple && !b_simple\n       && (!bbs_ok_for_cmove_arith (then_bb, else_bb)\n \t  || !bbs_ok_for_cmove_arith (else_bb, then_bb)))\n     return FALSE;\n \n   start_sequence ();\n \n+  /* If one of the blocks is empty then the corresponding B or A value\n+     came from the test block.  The non-empty complex block that we will\n+     emit might clobber the register used by B or A, so move it to a pseudo\n+     first.  */\n+\n+  if (b_simple || !else_bb)\n+    {\n+      rtx tmp_b = gen_reg_rtx (x_mode);\n+      /* Perform the simplest kind of set.  The register allocator\n+\t should remove it if it's not actually needed.  If this set is not\n+\t a valid insn (can happen on the is_mem path) then end_ifcvt_sequence\n+\t will cancel the whole sequence.  Don't try any of the fallback paths\n+\t from noce_emit_move_insn since we want this to be the simplest kind\n+\t of move.  */\n+      emit_insn (gen_rtx_SET (tmp_b, b));\n+      b = tmp_b;\n+    }\n+\n+  if (a_simple || !then_bb)\n+    {\n+      rtx tmp_a = gen_reg_rtx (x_mode);\n+      emit_insn (gen_rtx_SET (tmp_a, a));\n+      a = tmp_a;\n+    }\n+\n   orig_a = a;\n   orig_b = b;\n "}, {"sha": "86049cadf5a18312e7665a08ca121ca4ffad2c42", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/470512c31b5e078519370ce66fb39a3b6d604392/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/470512c31b5e078519370ce66fb39a3b6d604392/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=470512c31b5e078519370ce66fb39a3b6d604392", "patch": "@@ -1,3 +1,10 @@\n+2015-09-28  Kyrylo Tkachov  <kyrylo.tkachov@arm.com>\n+\n+\tPR rtl-optimization/67456\n+\tPR rtl-optimization/67464\n+\tPR rtl-optimization/67465\n+\t* gcc.dg/pr67465.c: New test.\n+\n 2015-09-28  Tom de Vries  <tom@codesourcery.com>\n \n \t* gcc.dg/vect/pr62171.c: New test."}, {"sha": "321fd38ccaffc2ce72c69760903f419f589bece5", "filename": "gcc/testsuite/gcc.dg/pr67465.c", "status": "added", "additions": 53, "deletions": 0, "changes": 53, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/470512c31b5e078519370ce66fb39a3b6d604392/gcc%2Ftestsuite%2Fgcc.dg%2Fpr67465.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/470512c31b5e078519370ce66fb39a3b6d604392/gcc%2Ftestsuite%2Fgcc.dg%2Fpr67465.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr67465.c?ref=470512c31b5e078519370ce66fb39a3b6d604392", "patch": "@@ -0,0 +1,53 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O3 -std=gnu99\" } */\n+\n+int a, b, c, d, e, h;\n+\n+int\n+fn1 (int p1)\n+{\n+  {\n+    int g[2];\n+    for (int i = 0; i < 1; i++)\n+      g[i] = 0;\n+    if (g[0] < c)\n+      {\n+\ta = (unsigned) (1 ^ p1) % 2;\n+\treturn 0;\n+      }\n+  }\n+  return 0;\n+}\n+\n+void\n+fn2 ()\n+{\n+  for (h = 0; h < 1; h++)\n+    {\n+      for (int j = 0; j < 2; j++)\n+\t{\n+\t  for (b = 1; b; b = 0)\n+\t    a = 1;\n+\t  for (; b < 1; b++)\n+\t    ;\n+\t  if (e)\n+\t    continue;\n+\t  a = 2;\n+\t}\n+      fn1 (h);\n+      short k = -16;\n+      d = k > a;\n+    }\n+}\n+\n+int\n+main ()\n+{\n+  fn2 ();\n+\n+  if (a != 2)\n+    __builtin_abort ();\n+\n+  return 0;\n+}\n+"}]}