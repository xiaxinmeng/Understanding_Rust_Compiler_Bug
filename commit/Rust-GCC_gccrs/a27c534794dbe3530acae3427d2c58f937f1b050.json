{"sha": "a27c534794dbe3530acae3427d2c58f937f1b050", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTI3YzUzNDc5NGRiZTM1MzBhY2FlMzQyN2QyYzU4ZjkzN2YxYjA1MA==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2020-03-31T09:08:22Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2020-03-31T09:08:22Z"}, "message": "aarch64: Fix up aarch64_compare_and_swaphi pattern [PR94368]\n\nThe following testcase ICEs in final_scan_insn_1.  The problem is in the\n@aarch64_compare_and_swaphi define_insn_and_split, since 9 it uses\naarch64_plushi_operand predicate for the \"expected value\" operand, which\nallows either 0..0xfff constants or 0x1000..0xf000 constants (i.e. HImode\nvalues which when zero extended are either 0..0xfff or (0..0xfff) << 12).\nThe problem is that RA doesn't care about predicates, it honors just\nconstraints and the used constraint on the operand is n, which means any\nHImode CONST_SCALAR_INT.  In the testcase LRA thus propagates the -1\nvalue into the insn.\nThis is a define_insn_and_split which requires mandatory split.\nBut during split2 pass, we check the predicate (and don't check\nconstraints), which fails and thus we don't split it and during final ICE\nbecause the mandatory splitting didn't happen.\n\nThe following patch fixes it by adding a matching constraint to the\npredicate and using it.\n\n2020-03-31  Jakub Jelinek  <jakub@redhat.com>\n\n\tPR target/94368\n\t* config/aarch64/constraints.md (Uph): New constraint.\n\t* config/aarch64/atomics.md (cas_short_expected_imm): New mode attr.\n\t(@aarch64_compare_and_swap<mode>): Use it instead of n in operand 2's\n\tconstraint.\n\n\t* gcc.dg/pr94368.c: New test.", "tree": {"sha": "6b2b9b373530f74ce41539514e134fd4b74f8e0d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6b2b9b373530f74ce41539514e134fd4b74f8e0d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a27c534794dbe3530acae3427d2c58f937f1b050", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a27c534794dbe3530acae3427d2c58f937f1b050", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a27c534794dbe3530acae3427d2c58f937f1b050", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a27c534794dbe3530acae3427d2c58f937f1b050/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1dcffc8ddc48f0b45d3d0d2f763ef5870560eb9a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1dcffc8ddc48f0b45d3d0d2f763ef5870560eb9a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1dcffc8ddc48f0b45d3d0d2f763ef5870560eb9a"}], "stats": {"total": 48, "additions": 47, "deletions": 1}, "files": [{"sha": "88e279eb4747b444da779ea71805c9d1807294ce", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a27c534794dbe3530acae3427d2c58f937f1b050/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a27c534794dbe3530acae3427d2c58f937f1b050/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=a27c534794dbe3530acae3427d2c58f937f1b050", "patch": "@@ -1,3 +1,11 @@\n+2020-03-31  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR target/94368\n+\t* config/aarch64/constraints.md (Uph): New constraint.\n+\t* config/aarch64/atomics.md (cas_short_expected_imm): New mode attr.\n+\t(@aarch64_compare_and_swap<mode>): Use it instead of n in operand 2's\n+\tconstraint.\n+\n 2020-03-31  Marc Glisse  <marc.glisse@inria.fr>\n \t    Jakub Jelinek  <jakub@redhat.com>\n "}, {"sha": "b27a80fda965b4df3eca8127b7b02a6649123726", "filename": "gcc/config/aarch64/atomics.md", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a27c534794dbe3530acae3427d2c58f937f1b050/gcc%2Fconfig%2Faarch64%2Fatomics.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a27c534794dbe3530acae3427d2c58f937f1b050/gcc%2Fconfig%2Faarch64%2Fatomics.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Fatomics.md?ref=a27c534794dbe3530acae3427d2c58f937f1b050", "patch": "@@ -38,6 +38,8 @@\n \n (define_mode_attr cas_short_expected_pred\n   [(QI \"aarch64_reg_or_imm\") (HI \"aarch64_plushi_operand\")])\n+(define_mode_attr cas_short_expected_imm\n+  [(QI \"n\") (HI \"Uph\")])\n \n (define_insn_and_split \"@aarch64_compare_and_swap<mode>\"\n   [(set (reg:CC CC_REGNUM)\t\t\t\t\t;; bool out\n@@ -47,7 +49,8 @@\n       (match_operand:SHORT 1 \"aarch64_sync_memory_operand\" \"+Q\"))) ;; memory\n    (set (match_dup 1)\n     (unspec_volatile:SHORT\n-      [(match_operand:SHORT 2 \"<cas_short_expected_pred>\" \"rn\")\t;; expected\n+      [(match_operand:SHORT 2 \"<cas_short_expected_pred>\"\n+\t\t\t      \"r<cas_short_expected_imm>\")\t;; expected\n        (match_operand:SHORT 3 \"aarch64_reg_or_zero\" \"rZ\")\t;; desired\n        (match_operand:SI 4 \"const_int_operand\")\t\t\t;; is_weak\n        (match_operand:SI 5 \"const_int_operand\")\t\t\t;; mod_s"}, {"sha": "d993268a187fad9c80c32b16d8e95b26783bde24", "filename": "gcc/config/aarch64/constraints.md", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a27c534794dbe3530acae3427d2c58f937f1b050/gcc%2Fconfig%2Faarch64%2Fconstraints.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a27c534794dbe3530acae3427d2c58f937f1b050/gcc%2Fconfig%2Faarch64%2Fconstraints.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Fconstraints.md?ref=a27c534794dbe3530acae3427d2c58f937f1b050", "patch": "@@ -233,6 +233,13 @@\n   (and (match_code \"const_int\")\n        (match_test \"(unsigned) exact_log2 (ival) <= 4\")))\n \n+(define_constraint \"Uph\"\n+  \"@internal\n+  A constraint that matches HImode integers zero extendable to\n+  SImode plus_operand.\"\n+  (and (match_code \"const_int\")\n+       (match_test \"aarch64_plushi_immediate (op, VOIDmode)\")))\n+\n (define_memory_constraint \"Q\"\n  \"A memory address which uses a single base register with no offset.\"\n  (and (match_code \"mem\")"}, {"sha": "aa269f6071ff0652722777f824ae6529b37ff853", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a27c534794dbe3530acae3427d2c58f937f1b050/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a27c534794dbe3530acae3427d2c58f937f1b050/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=a27c534794dbe3530acae3427d2c58f937f1b050", "patch": "@@ -1,5 +1,8 @@\n 2020-03-31  Jakub Jelinek  <jakub@redhat.com>\n \n+\tPR target/94368\n+\t* gcc.dg/pr94368.c: New test.\n+\n \tPR middle-end/94412\n \t* gcc.c-torture/execute/pr94412.c: New test.\n "}, {"sha": "1267b8220983ef1477a8339bdcc6369abaeca592", "filename": "gcc/testsuite/gcc.dg/pr94368.c", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a27c534794dbe3530acae3427d2c58f937f1b050/gcc%2Ftestsuite%2Fgcc.dg%2Fpr94368.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a27c534794dbe3530acae3427d2c58f937f1b050/gcc%2Ftestsuite%2Fgcc.dg%2Fpr94368.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr94368.c?ref=a27c534794dbe3530acae3427d2c58f937f1b050", "patch": "@@ -0,0 +1,25 @@\n+/* PR target/94368 */\n+/* { dg-do compile { target fpic } } */\n+/* { dg-options \"-fpic -O1 -fcommon\" } */\n+\n+int b, c, d, e, f, h;\n+short g;\n+int foo (int) __attribute__ ((__const__));\n+\n+void\n+bar (void)\n+{\n+  while (1)\n+    {\n+      while (1)\n+\t{\n+\t  __atomic_load_n (&e, 0);\n+\t  if (foo (2))\n+\t    __sync_val_compare_and_swap (&c, 0, f);\n+\t  b = 1;\n+\t  if (h == e)\n+\t    break;\n+\t}\n+      __sync_val_compare_and_swap (&g, -1, f);\n+    }\n+}"}]}