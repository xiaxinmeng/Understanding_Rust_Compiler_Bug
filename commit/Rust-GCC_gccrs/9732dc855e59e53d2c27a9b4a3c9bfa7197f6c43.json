{"sha": "9732dc855e59e53d2c27a9b4a3c9bfa7197f6c43", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTczMmRjODU1ZTU5ZTUzZDJjMjdhOWI0YTNjOWJmYTcxOTdmNmM0Mw==", "commit": {"author": {"name": "Tamar Christina", "email": "tamar.christina@arm.com", "date": "2020-12-16T20:44:57Z"}, "committer": {"name": "Tamar Christina", "email": "tamar.christina@arm.com", "date": "2020-12-16T20:44:57Z"}, "message": "Arm: Add NEON and MVE RTL patterns for Complex Addition.\n\nThis adds implementation for the optabs for complex additions.  With this the\nfollowing C code:\n\n  void f90 (float complex a[restrict N], float complex b[restrict N],\n\t    float complex c[restrict N])\n  {\n    for (int i=0; i < N; i++)\n      c[i] = a[i] + (b[i] * I);\n  }\n\ngenerates\n\n  f90:\n\t  add     r3, r2, #1600\n  .L2:\n\t  vld1.32 {q8}, [r0]!\n\t  vld1.32 {q9}, [r1]!\n\t  vcadd.f32       q8, q8, q9, #90\n\t  vst1.32 {q8}, [r2]!\n\t  cmp     r3, r2\n\t  bne     .L2\n\t  bx      lr\n\ninstead of\n\n  f90:\n\t  add     r3, r2, #1600\n  .L2:\n\t  vld2.32 {d24-d27}, [r0]!\n\t  vld2.32 {d20-d23}, [r1]!\n\t  vsub.f32\tq8, q12, q11\n\t  vadd.f32\tq9, q13, q10\n\t  vst2.32 {d16-d19}, [r2]!\n\t  cmp     r3, r2\n\t  bne     .L2\n\t  bx      lr\n\ngcc/ChangeLog:\n\n\t* config/arm/arm_mve.h (__arm_vcaddq_rot90_u8, __arm_vcaddq_rot270_u8,\n\t__arm_vcaddq_rot90_s8, __arm_vcaddq_rot270_s8,\n\t__arm_vcaddq_rot90_u16, __arm_vcaddq_rot270_u16,\n\t__arm_vcaddq_rot90_s16, __arm_vcaddq_rot270_s16,\n\t__arm_vcaddq_rot90_u32, __arm_vcaddq_rot270_u32,\n\t__arm_vcaddq_rot90_s32, __arm_vcaddq_rot270_s32,\n\t__arm_vcaddq_rot90_f16, __arm_vcaddq_rot270_f16,\n\t__arm_vcaddq_rot90_f32, __arm_vcaddq_rot270_f32):  Update builtin calls.\n\t* config/arm/arm_mve_builtins.def (vcaddq_rot90_u, vcaddq_rot270_u,\n\tvcaddq_rot90_s, vcaddq_rot270_s, vcaddq_rot90_f, vcaddq_rot270_f):\n\tRemoved.\n\t(vcaddq_rot90, vcaddq_rot270): New.\n\t* config/arm/constraints.md (Dz): Include MVE.\n\t* config/arm/iterators.md (mve_rot): New.\n\t(supf): Remove VCADDQ_ROT270_S, VCADDQ_ROT270_U, VCADDQ_ROT90_S,\n\tVCADDQ_ROT90_U.\n\t(VCADDQ_ROT270, VCADDQ_ROT90): Removed.\n\t* config/arm/mve.md (mve_vcaddq_rot270_<supf><mode,\n\tmve_vcaddq_rot90_<supf><mode>, mve_vcaddq_rot270_f<mode>,\n\tmve_vcaddq_rot90_f<mode>): Removed.\n\t(mve_vcaddq<mve_rot><mode>, mve_vcaddq<mve_rot><mode>): New.\n\t* config/arm/unspecs.md (VCADDQ_ROT270_S, VCADDQ_ROT90_S,\n\tVCADDQ_ROT270_U, VCADDQ_ROT90_U, VCADDQ_ROT270_F,\n\tVCADDQ_ROT90_F): Removed.\n\t* config/arm/vec-common.md (cadd<rot><mode>3): New.", "tree": {"sha": "be77010ed0e8f0275398d74acde06c0b32dcc20b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/be77010ed0e8f0275398d74acde06c0b32dcc20b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9732dc855e59e53d2c27a9b4a3c9bfa7197f6c43", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9732dc855e59e53d2c27a9b4a3c9bfa7197f6c43", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9732dc855e59e53d2c27a9b4a3c9bfa7197f6c43", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9732dc855e59e53d2c27a9b4a3c9bfa7197f6c43/comments", "author": {"login": "TamarChristinaArm", "id": 48126768, "node_id": "MDQ6VXNlcjQ4MTI2NzY4", "avatar_url": "https://avatars.githubusercontent.com/u/48126768?v=4", "gravatar_id": "", "url": "https://api.github.com/users/TamarChristinaArm", "html_url": "https://github.com/TamarChristinaArm", "followers_url": "https://api.github.com/users/TamarChristinaArm/followers", "following_url": "https://api.github.com/users/TamarChristinaArm/following{/other_user}", "gists_url": "https://api.github.com/users/TamarChristinaArm/gists{/gist_id}", "starred_url": "https://api.github.com/users/TamarChristinaArm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/TamarChristinaArm/subscriptions", "organizations_url": "https://api.github.com/users/TamarChristinaArm/orgs", "repos_url": "https://api.github.com/users/TamarChristinaArm/repos", "events_url": "https://api.github.com/users/TamarChristinaArm/events{/privacy}", "received_events_url": "https://api.github.com/users/TamarChristinaArm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "TamarChristinaArm", "id": 48126768, "node_id": "MDQ6VXNlcjQ4MTI2NzY4", "avatar_url": "https://avatars.githubusercontent.com/u/48126768?v=4", "gravatar_id": "", "url": "https://api.github.com/users/TamarChristinaArm", "html_url": "https://github.com/TamarChristinaArm", "followers_url": "https://api.github.com/users/TamarChristinaArm/followers", "following_url": "https://api.github.com/users/TamarChristinaArm/following{/other_user}", "gists_url": "https://api.github.com/users/TamarChristinaArm/gists{/gist_id}", "starred_url": "https://api.github.com/users/TamarChristinaArm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/TamarChristinaArm/subscriptions", "organizations_url": "https://api.github.com/users/TamarChristinaArm/orgs", "repos_url": "https://api.github.com/users/TamarChristinaArm/repos", "events_url": "https://api.github.com/users/TamarChristinaArm/events{/privacy}", "received_events_url": "https://api.github.com/users/TamarChristinaArm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "84747acf8da36425f7e36cf99b251ee047b2e3a5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/84747acf8da36425f7e36cf99b251ee047b2e3a5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/84747acf8da36425f7e36cf99b251ee047b2e3a5"}], "stats": {"total": 130, "additions": 58, "deletions": 72}, "files": [{"sha": "987495dd234ad96ba1163a1f482fe183a46ff437", "filename": "gcc/config/arm/arm_mve.h", "status": "modified", "additions": 22, "deletions": 16, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9732dc855e59e53d2c27a9b4a3c9bfa7197f6c43/gcc%2Fconfig%2Farm%2Farm_mve.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9732dc855e59e53d2c27a9b4a3c9bfa7197f6c43/gcc%2Fconfig%2Farm%2Farm_mve.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm_mve.h?ref=9732dc855e59e53d2c27a9b4a3c9bfa7197f6c43", "patch": "@@ -3981,14 +3981,16 @@ __extension__ extern __inline uint8x16_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n __arm_vcaddq_rot90_u8 (uint8x16_t __a, uint8x16_t __b)\n {\n-  return __builtin_mve_vcaddq_rot90_uv16qi (__a, __b);\n+  return (uint8x16_t)\n+    __builtin_mve_vcaddq_rot90v16qi ((int8x16_t)__a, (int8x16_t)__b);\n }\n \n __extension__ extern __inline uint8x16_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n __arm_vcaddq_rot270_u8 (uint8x16_t __a, uint8x16_t __b)\n {\n-  return __builtin_mve_vcaddq_rot270_uv16qi (__a, __b);\n+  return (uint8x16_t)\n+    __builtin_mve_vcaddq_rot270v16qi ((int8x16_t)__a, (int8x16_t)__b);\n }\n \n __extension__ extern __inline uint8x16_t\n@@ -4520,14 +4522,14 @@ __extension__ extern __inline int8x16_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n __arm_vcaddq_rot90_s8 (int8x16_t __a, int8x16_t __b)\n {\n-  return __builtin_mve_vcaddq_rot90_sv16qi (__a, __b);\n+  return __builtin_mve_vcaddq_rot90v16qi (__a, __b);\n }\n \n __extension__ extern __inline int8x16_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n __arm_vcaddq_rot270_s8 (int8x16_t __a, int8x16_t __b)\n {\n-  return __builtin_mve_vcaddq_rot270_sv16qi (__a, __b);\n+  return __builtin_mve_vcaddq_rot270v16qi (__a, __b);\n }\n \n __extension__ extern __inline int8x16_t\n@@ -4821,14 +4823,16 @@ __extension__ extern __inline uint16x8_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n __arm_vcaddq_rot90_u16 (uint16x8_t __a, uint16x8_t __b)\n {\n-  return __builtin_mve_vcaddq_rot90_uv8hi (__a, __b);\n+  return (uint16x8_t)\n+    __builtin_mve_vcaddq_rot90v8hi ((int16x8_t)__a, (int16x8_t)__b);\n }\n \n __extension__ extern __inline uint16x8_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n __arm_vcaddq_rot270_u16 (uint16x8_t __a, uint16x8_t __b)\n {\n-  return __builtin_mve_vcaddq_rot270_uv8hi (__a, __b);\n+  return (uint16x8_t)\n+    __builtin_mve_vcaddq_rot270v8hi ((int16x8_t)__a, (int16x8_t)__b);\n }\n \n __extension__ extern __inline uint16x8_t\n@@ -5360,14 +5364,14 @@ __extension__ extern __inline int16x8_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n __arm_vcaddq_rot90_s16 (int16x8_t __a, int16x8_t __b)\n {\n-  return __builtin_mve_vcaddq_rot90_sv8hi (__a, __b);\n+  return __builtin_mve_vcaddq_rot90v8hi (__a, __b);\n }\n \n __extension__ extern __inline int16x8_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n __arm_vcaddq_rot270_s16 (int16x8_t __a, int16x8_t __b)\n {\n-  return __builtin_mve_vcaddq_rot270_sv8hi (__a, __b);\n+  return __builtin_mve_vcaddq_rot270v8hi (__a, __b);\n }\n \n __extension__ extern __inline int16x8_t\n@@ -5661,14 +5665,16 @@ __extension__ extern __inline uint32x4_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n __arm_vcaddq_rot90_u32 (uint32x4_t __a, uint32x4_t __b)\n {\n-  return __builtin_mve_vcaddq_rot90_uv4si (__a, __b);\n+  return (uint32x4_t)\n+    __builtin_mve_vcaddq_rot90v4si ((int32x4_t)__a, (int32x4_t)__b);\n }\n \n __extension__ extern __inline uint32x4_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n __arm_vcaddq_rot270_u32 (uint32x4_t __a, uint32x4_t __b)\n {\n-  return __builtin_mve_vcaddq_rot270_uv4si (__a, __b);\n+  return (uint32x4_t)\n+    __builtin_mve_vcaddq_rot270v4si ((int32x4_t)__a, (int32x4_t)__b);\n }\n \n __extension__ extern __inline uint32x4_t\n@@ -6200,14 +6206,14 @@ __extension__ extern __inline int32x4_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n __arm_vcaddq_rot90_s32 (int32x4_t __a, int32x4_t __b)\n {\n-  return __builtin_mve_vcaddq_rot90_sv4si (__a, __b);\n+  return __builtin_mve_vcaddq_rot90v4si (__a, __b);\n }\n \n __extension__ extern __inline int32x4_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n __arm_vcaddq_rot270_s32 (int32x4_t __a, int32x4_t __b)\n {\n-  return __builtin_mve_vcaddq_rot270_sv4si (__a, __b);\n+  return __builtin_mve_vcaddq_rot270v4si (__a, __b);\n }\n \n __extension__ extern __inline int32x4_t\n@@ -17370,14 +17376,14 @@ __extension__ extern __inline float16x8_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n __arm_vcaddq_rot90_f16 (float16x8_t __a, float16x8_t __b)\n {\n-  return __builtin_mve_vcaddq_rot90_fv8hf (__a, __b);\n+  return __builtin_mve_vcaddq_rot90v8hf (__a, __b);\n }\n \n __extension__ extern __inline float16x8_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n __arm_vcaddq_rot270_f16 (float16x8_t __a, float16x8_t __b)\n {\n-  return __builtin_mve_vcaddq_rot270_fv8hf (__a, __b);\n+  return __builtin_mve_vcaddq_rot270v8hf (__a, __b);\n }\n \n __extension__ extern __inline float16x8_t\n@@ -17622,14 +17628,14 @@ __extension__ extern __inline float32x4_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n __arm_vcaddq_rot90_f32 (float32x4_t __a, float32x4_t __b)\n {\n-  return __builtin_mve_vcaddq_rot90_fv4sf (__a, __b);\n+  return __builtin_mve_vcaddq_rot90v4sf (__a, __b);\n }\n \n __extension__ extern __inline float32x4_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n __arm_vcaddq_rot270_f32 (float32x4_t __a, float32x4_t __b)\n {\n-  return __builtin_mve_vcaddq_rot270_fv4sf (__a, __b);\n+  return __builtin_mve_vcaddq_rot270v4sf (__a, __b);\n }\n \n __extension__ extern __inline float32x4_t"}, {"sha": "b86e1793e686b07367732c4ffd0603deb78830bd", "filename": "gcc/config/arm/arm_mve_builtins.def", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9732dc855e59e53d2c27a9b4a3c9bfa7197f6c43/gcc%2Fconfig%2Farm%2Farm_mve_builtins.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9732dc855e59e53d2c27a9b4a3c9bfa7197f6c43/gcc%2Fconfig%2Farm%2Farm_mve_builtins.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm_mve_builtins.def?ref=9732dc855e59e53d2c27a9b4a3c9bfa7197f6c43", "patch": "@@ -125,8 +125,6 @@ VAR3 (BINOP_UNONE_UNONE_UNONE, vcmpeqq_u, v16qi, v8hi, v4si)\n VAR3 (BINOP_UNONE_UNONE_UNONE, vcmpeqq_n_u, v16qi, v8hi, v4si)\n VAR3 (BINOP_UNONE_UNONE_UNONE, vcmpcsq_u, v16qi, v8hi, v4si)\n VAR3 (BINOP_UNONE_UNONE_UNONE, vcmpcsq_n_u, v16qi, v8hi, v4si)\n-VAR3 (BINOP_UNONE_UNONE_UNONE, vcaddq_rot90_u, v16qi, v8hi, v4si)\n-VAR3 (BINOP_UNONE_UNONE_UNONE, vcaddq_rot270_u, v16qi, v8hi, v4si)\n VAR3 (BINOP_UNONE_UNONE_UNONE, vbicq_u, v16qi, v8hi, v4si)\n VAR3 (BINOP_UNONE_UNONE_UNONE, vandq_u, v16qi, v8hi, v4si)\n VAR3 (BINOP_UNONE_UNONE_UNONE, vaddvq_p_u, v16qi, v8hi, v4si)\n@@ -202,8 +200,6 @@ VAR3 (BINOP_NONE_NONE_NONE, vhcaddq_rot270_s, v16qi, v8hi, v4si)\n VAR3 (BINOP_NONE_NONE_NONE, vhaddq_s, v16qi, v8hi, v4si)\n VAR3 (BINOP_NONE_NONE_NONE, vhaddq_n_s, v16qi, v8hi, v4si)\n VAR3 (BINOP_NONE_NONE_NONE, veorq_s, v16qi, v8hi, v4si)\n-VAR3 (BINOP_NONE_NONE_NONE, vcaddq_rot90_s, v16qi, v8hi, v4si)\n-VAR3 (BINOP_NONE_NONE_NONE, vcaddq_rot270_s, v16qi, v8hi, v4si)\n VAR3 (BINOP_NONE_NONE_NONE, vbrsrq_n_s, v16qi, v8hi, v4si)\n VAR3 (BINOP_NONE_NONE_NONE, vbicq_s, v16qi, v8hi, v4si)\n VAR3 (BINOP_NONE_NONE_NONE, vandq_s, v16qi, v8hi, v4si)\n@@ -268,8 +264,6 @@ VAR2 (BINOP_NONE_NONE_NONE, vcmulq_rot90_f, v8hf, v4sf)\n VAR2 (BINOP_NONE_NONE_NONE, vcmulq_rot270_f, v8hf, v4sf)\n VAR2 (BINOP_NONE_NONE_NONE, vcmulq_rot180_f, v8hf, v4sf)\n VAR2 (BINOP_NONE_NONE_NONE, vcmulq_f, v8hf, v4sf)\n-VAR2 (BINOP_NONE_NONE_NONE, vcaddq_rot90_f, v8hf, v4sf)\n-VAR2 (BINOP_NONE_NONE_NONE, vcaddq_rot270_f, v8hf, v4sf)\n VAR2 (BINOP_NONE_NONE_NONE, vbicq_f, v8hf, v4sf)\n VAR2 (BINOP_NONE_NONE_NONE, vandq_f, v8hf, v4sf)\n VAR2 (BINOP_NONE_NONE_NONE, vaddq_n_f, v8hf, v4sf)\n@@ -892,3 +886,7 @@ VAR3 (QUADOP_NONE_NONE_UNONE_IMM_UNONE, vshlcq_m_vec_s, v16qi, v8hi, v4si)\n VAR3 (QUADOP_NONE_NONE_UNONE_IMM_UNONE, vshlcq_m_carry_s, v16qi, v8hi, v4si)\n VAR3 (QUADOP_UNONE_UNONE_UNONE_IMM_UNONE, vshlcq_m_vec_u, v16qi, v8hi, v4si)\n VAR3 (QUADOP_UNONE_UNONE_UNONE_IMM_UNONE, vshlcq_m_carry_u, v16qi, v8hi, v4si)\n+\n+/* optabs without any suffixes.  */\n+VAR5 (BINOP_NONE_NONE_NONE, vcaddq_rot90, v16qi, v8hi, v4si, v8hf, v4sf)\n+VAR5 (BINOP_NONE_NONE_NONE, vcaddq_rot270, v16qi, v8hi, v4si, v8hf, v4sf)"}, {"sha": "6ebddb95b4f9c835f10f5265573f27a06ccbd11f", "filename": "gcc/config/arm/constraints.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9732dc855e59e53d2c27a9b4a3c9bfa7197f6c43/gcc%2Fconfig%2Farm%2Fconstraints.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9732dc855e59e53d2c27a9b4a3c9bfa7197f6c43/gcc%2Fconfig%2Farm%2Fconstraints.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Fconstraints.md?ref=9732dc855e59e53d2c27a9b4a3c9bfa7197f6c43", "patch": "@@ -310,7 +310,7 @@\n  \"@internal\n   In ARM/Thumb-2 state a vector of constant zeros.\"\n  (and (match_code \"const_vector\")\n-      (match_test \"TARGET_NEON && op == CONST0_RTX (mode)\")))\n+      (match_test \"(TARGET_NEON || TARGET_HAVE_MVE) && op == CONST0_RTX (mode)\")))\n \n (define_constraint \"Da\"\n  \"@internal"}, {"sha": "adf4c017735812fdb318f615ede1407298377519", "filename": "gcc/config/arm/iterators.md", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9732dc855e59e53d2c27a9b4a3c9bfa7197f6c43/gcc%2Fconfig%2Farm%2Fiterators.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9732dc855e59e53d2c27a9b4a3c9bfa7197f6c43/gcc%2Fconfig%2Farm%2Fiterators.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Fiterators.md?ref=9732dc855e59e53d2c27a9b4a3c9bfa7197f6c43", "patch": "@@ -1182,6 +1182,9 @@\n \t\t      (UNSPEC_VCMLA180 \"180\")\n \t\t      (UNSPEC_VCMLA270 \"270\")])\n \n+(define_int_attr mve_rot [(UNSPEC_VCADD90 \"_rot90\")\n+\t\t\t  (UNSPEC_VCADD270 \"_rot270\")])\n+\n (define_int_attr simd32_op [(UNSPEC_QADD8 \"qadd8\") (UNSPEC_QSUB8 \"qsub8\")\n \t\t\t    (UNSPEC_SHADD8 \"shadd8\") (UNSPEC_SHSUB8 \"shsub8\")\n \t\t\t    (UNSPEC_UHADD8 \"uhadd8\") (UNSPEC_UHSUB8 \"uhsub8\")\n@@ -1232,10 +1235,8 @@\n \t\t       (VADDLVQ_P_U \"u\") (VCMPNEQ_U \"u\") (VCMPNEQ_S \"s\")\n \t\t       (VABDQ_M_S \"s\") (VABDQ_M_U \"u\") (VABDQ_S \"s\")\n \t\t       (VABDQ_U \"u\") (VADDQ_N_S \"s\") (VADDQ_N_U \"u\")\n-\t\t       (VADDVQ_P_S \"s\")\t(VADDVQ_P_U \"u\")\n-\t\t       (VBRSRQ_N_S \"s\") (VBRSRQ_N_U \"u\") (VCADDQ_ROT270_S \"s\")\n-\t\t       (VCADDQ_ROT270_U \"u\") (VCADDQ_ROT90_S \"s\")\n-\t\t       (VCMPEQQ_S \"s\") (VCMPEQQ_U \"u\") (VCADDQ_ROT90_U \"u\")\n+\t\t       (VADDVQ_P_S \"s\")\t(VADDVQ_P_U \"u\") (VBRSRQ_N_S \"s\")\n+\t\t       (VBRSRQ_N_U \"u\") (VCMPEQQ_S \"s\") (VCMPEQQ_U \"u\")\n \t\t       (VCMPEQQ_N_S \"s\") (VCMPEQQ_N_U \"u\") (VCMPNEQ_N_S \"s\")\n \t\t       (VCMPNEQ_N_U \"u\")\n \t\t       (VHADDQ_N_S \"s\") (VHADDQ_N_U \"u\") (VHADDQ_S \"s\")\n@@ -1500,8 +1501,6 @@\n (define_int_iterator VADDVAQ [VADDVAQ_S VADDVAQ_U])\n (define_int_iterator VADDVQ_P [VADDVQ_P_U VADDVQ_P_S])\n (define_int_iterator VBRSRQ_N [VBRSRQ_N_U VBRSRQ_N_S])\n-(define_int_iterator VCADDQ_ROT270 [VCADDQ_ROT270_S VCADDQ_ROT270_U])\n-(define_int_iterator VCADDQ_ROT90 [VCADDQ_ROT90_U VCADDQ_ROT90_S])\n (define_int_iterator VCMPEQQ [VCMPEQQ_U VCMPEQQ_S])\n (define_int_iterator VCMPEQQ_N [VCMPEQQ_N_S VCMPEQQ_N_U])\n (define_int_iterator VCMPNEQ_N [VCMPNEQ_N_U VCMPNEQ_N_S])"}, {"sha": "516d0a3172e9cbb9a7fe0e9a1cd45ba5d935344b", "filename": "gcc/config/arm/mve.md", "status": "modified", "additions": 16, "deletions": 37, "changes": 53, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9732dc855e59e53d2c27a9b4a3c9bfa7197f6c43/gcc%2Fconfig%2Farm%2Fmve.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9732dc855e59e53d2c27a9b4a3c9bfa7197f6c43/gcc%2Fconfig%2Farm%2Fmve.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Fmve.md?ref=9732dc855e59e53d2c27a9b4a3c9bfa7197f6c43", "patch": "@@ -962,34 +962,28 @@\n ])\n \n ;;\n-;; [vcaddq_rot270_s, vcaddq_rot270_u])\n+;; [vcaddq, vcaddq_rot90, vcadd_rot180, vcadd_rot270])\n ;;\n-(define_insn \"mve_vcaddq_rot270_<supf><mode>\"\n+(define_insn \"mve_vcaddq<mve_rot><mode>\"\n   [\n    (set (match_operand:MVE_2 0 \"s_register_operand\" \"<earlyclobber_32>\")\n \t(unspec:MVE_2 [(match_operand:MVE_2 1 \"s_register_operand\" \"w\")\n \t\t       (match_operand:MVE_2 2 \"s_register_operand\" \"w\")]\n-\t VCADDQ_ROT270))\n+\t VCADD))\n   ]\n   \"TARGET_HAVE_MVE\"\n-  \"vcadd.i%#<V_sz_elem>\t%q0, %q1, %q2, #270\"\n+  \"vcadd.i%#<V_sz_elem>\t%q0, %q1, %q2, #<rot>\"\n   [(set_attr \"type\" \"mve_move\")\n ])\n \n-;;\n-;; [vcaddq_rot90_u, vcaddq_rot90_s])\n-;;\n-(define_insn \"mve_vcaddq_rot90_<supf><mode>\"\n-  [\n-   (set (match_operand:MVE_2 0 \"s_register_operand\" \"<earlyclobber_32>\")\n-\t(unspec:MVE_2 [(match_operand:MVE_2 1 \"s_register_operand\" \"w\")\n-\t\t       (match_operand:MVE_2 2 \"s_register_operand\" \"w\")]\n-\t VCADDQ_ROT90))\n-  ]\n-  \"TARGET_HAVE_MVE\"\n-  \"vcadd.i%#<V_sz_elem>\t%q0, %q1, %q2, #90\"\n-  [(set_attr \"type\" \"mve_move\")\n-])\n+;; Auto vectorizer pattern for int vcadd\n+(define_expand \"cadd<rot><mode>3\"\n+  [(set (match_operand:MVE_2 0 \"register_operand\")\n+\t(unspec:MVE_2 [(match_operand:MVE_2 1 \"register_operand\")\n+\t\t       (match_operand:MVE_2 2 \"register_operand\")]\n+\t  VCADD))]\n+  \"TARGET_HAVE_MVE && !BYTES_BIG_ENDIAN\"\n+)\n \n ;;\n ;; [vcmpcsq_n_u])\n@@ -2102,32 +2096,17 @@\n ])\n \n ;;\n-;; [vcaddq_rot270_f])\n-;;\n-(define_insn \"mve_vcaddq_rot270_f<mode>\"\n-  [\n-   (set (match_operand:MVE_0 0 \"s_register_operand\" \"<earlyclobber_32>\")\n-\t(unspec:MVE_0 [(match_operand:MVE_0 1 \"s_register_operand\" \"w\")\n-\t\t       (match_operand:MVE_0 2 \"s_register_operand\" \"w\")]\n-\t VCADDQ_ROT270_F))\n-  ]\n-  \"TARGET_HAVE_MVE && TARGET_HAVE_MVE_FLOAT\"\n-  \"vcadd.f%#<V_sz_elem>\t%q0, %q1, %q2, #270\"\n-  [(set_attr \"type\" \"mve_move\")\n-])\n-\n-;;\n-;; [vcaddq_rot90_f])\n+;; [vcaddq, vcaddq_rot90, vcadd_rot180, vcadd_rot270])\n ;;\n-(define_insn \"mve_vcaddq_rot90_f<mode>\"\n+(define_insn \"mve_vcaddq<mve_rot><mode>\"\n   [\n    (set (match_operand:MVE_0 0 \"s_register_operand\" \"<earlyclobber_32>\")\n \t(unspec:MVE_0 [(match_operand:MVE_0 1 \"s_register_operand\" \"w\")\n \t\t       (match_operand:MVE_0 2 \"s_register_operand\" \"w\")]\n-\t VCADDQ_ROT90_F))\n+\t VCADD))\n   ]\n   \"TARGET_HAVE_MVE && TARGET_HAVE_MVE_FLOAT\"\n-  \"vcadd.f%#<V_sz_elem>\t%q0, %q1, %q2, #90\"\n+  \"vcadd.f%#<V_sz_elem>\t%q0, %q1, %q2, #<rot>\"\n   [(set_attr \"type\" \"mve_move\")\n ])\n "}, {"sha": "3f9ebe7b1753045e53044324cc7302f51d0eed21", "filename": "gcc/config/arm/unspecs.md", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9732dc855e59e53d2c27a9b4a3c9bfa7197f6c43/gcc%2Fconfig%2Farm%2Funspecs.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9732dc855e59e53d2c27a9b4a3c9bfa7197f6c43/gcc%2Fconfig%2Farm%2Funspecs.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Funspecs.md?ref=9732dc855e59e53d2c27a9b4a3c9bfa7197f6c43", "patch": "@@ -598,8 +598,6 @@\n   VADDVAQ_S\n   VADDVQ_P_S\n   VBRSRQ_N_S\n-  VCADDQ_ROT270_S\n-  VCADDQ_ROT90_S\n   VCMPEQQ_S\n   VCMPEQQ_N_S\n   VCMPNEQ_N_S\n@@ -641,8 +639,6 @@\n   VADDVAQ_U\n   VADDVQ_P_U\n   VBRSRQ_N_U\n-  VCADDQ_ROT270_U\n-  VCADDQ_ROT90_U\n   VCMPEQQ_U\n   VCMPEQQ_N_U\n   VCMPNEQ_N_U\n@@ -709,8 +705,6 @@\n   VABDQ_M_U\n   VABDQ_F\n   VADDQ_N_F\n-  VCADDQ_ROT270_F\n-  VCADDQ_ROT90_F\n   VCMPEQQ_F\n   VCMPEQQ_N_F\n   VCMPGEQ_F"}, {"sha": "ce1ea960161164098a6512cf58843bb64251fb05", "filename": "gcc/config/arm/vec-common.md", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9732dc855e59e53d2c27a9b4a3c9bfa7197f6c43/gcc%2Fconfig%2Farm%2Fvec-common.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9732dc855e59e53d2c27a9b4a3c9bfa7197f6c43/gcc%2Fconfig%2Farm%2Fvec-common.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Fvec-common.md?ref=9732dc855e59e53d2c27a9b4a3c9bfa7197f6c43", "patch": "@@ -205,3 +205,13 @@\n \t(neg:VDQWH (match_operand:VDQWH 1 \"s_register_operand\" \"\")))]\n   \"ARM_HAVE_<MODE>_ARITH\"\n )\n+\n+(define_expand \"cadd<rot><mode>3\"\n+  [(set (match_operand:VF 0 \"register_operand\")\n+\t(unspec:VF [(match_operand:VF 1 \"register_operand\")\n+\t\t    (match_operand:VF 2 \"register_operand\")]\n+\t\t   VCADD))]\n+  \"(TARGET_COMPLEX || (TARGET_HAVE_MVE && TARGET_HAVE_MVE_FLOAT\n+\t\t      && ARM_HAVE_<MODE>_ARITH)) && !BYTES_BIG_ENDIAN\"\n+)\n+"}]}