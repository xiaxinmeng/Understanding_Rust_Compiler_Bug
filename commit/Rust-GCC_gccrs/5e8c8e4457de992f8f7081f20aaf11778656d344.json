{"sha": "5e8c8e4457de992f8f7081f20aaf11778656d344", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWU4YzhlNDQ1N2RlOTkyZjhmNzA4MWYyMGFhZjExNzc4NjU2ZDM0NA==", "commit": {"author": {"name": "Yannick Moy", "email": "moy@adacore.com", "date": "2011-08-03T15:14:04Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2011-08-03T15:14:04Z"}, "message": "sem_ch11.adb (Analyze_Raise_xxx_Error): do not mark such nodes as not in ALFA.\n\n2011-08-03  Yannick Moy  <moy@adacore.com>\n\n\t* sem_ch11.adb (Analyze_Raise_xxx_Error): do not mark such nodes as not\n\tin ALFA. Instead, they are considered as assertions to prove.\n\t* sem_ch4.adb (Analyze_Conditional_Expression): do not always mark such\n\tnodes as not in ALFA. Instead, include conditional expressions in ALFA\n\tif they have no ELSE part, or if they occur in pre- and postconditions,\n\twhere the Condition cannot have side-effects in ALFA\n\t(Analyze_Membership_Op): do not mark such nodes as not in ALFA\n\t(Analyze_Type_Conversion): do not always mark such nodes as not in ALFA.\n\tInstead, include type conversion between scalar types in ALFA.\n\t* sem_ch6.adb (Process_Formals): correctly mark a parameter in ALFA\n\tif-and-only-if its type is in ALFA.\n\nFrom-SVN: r177285", "tree": {"sha": "d4940852674b8fa0e79a064ca50828cda92256d1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d4940852674b8fa0e79a064ca50828cda92256d1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5e8c8e4457de992f8f7081f20aaf11778656d344", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5e8c8e4457de992f8f7081f20aaf11778656d344", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5e8c8e4457de992f8f7081f20aaf11778656d344", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5e8c8e4457de992f8f7081f20aaf11778656d344/comments", "author": {"login": "yannickmoy", "id": 859440, "node_id": "MDQ6VXNlcjg1OTQ0MA==", "avatar_url": "https://avatars.githubusercontent.com/u/859440?v=4", "gravatar_id": "", "url": "https://api.github.com/users/yannickmoy", "html_url": "https://github.com/yannickmoy", "followers_url": "https://api.github.com/users/yannickmoy/followers", "following_url": "https://api.github.com/users/yannickmoy/following{/other_user}", "gists_url": "https://api.github.com/users/yannickmoy/gists{/gist_id}", "starred_url": "https://api.github.com/users/yannickmoy/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/yannickmoy/subscriptions", "organizations_url": "https://api.github.com/users/yannickmoy/orgs", "repos_url": "https://api.github.com/users/yannickmoy/repos", "events_url": "https://api.github.com/users/yannickmoy/events{/privacy}", "received_events_url": "https://api.github.com/users/yannickmoy/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "5ffe0bab81981655b009617fc7041a818fee1d89", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5ffe0bab81981655b009617fc7041a818fee1d89", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5ffe0bab81981655b009617fc7041a818fee1d89"}], "stats": {"total": 51, "additions": 39, "deletions": 12}, "files": [{"sha": "b4f495c14275da1f17f2d5e37ae6b9ba46330ebd", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5e8c8e4457de992f8f7081f20aaf11778656d344/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5e8c8e4457de992f8f7081f20aaf11778656d344/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=5e8c8e4457de992f8f7081f20aaf11778656d344", "patch": "@@ -1,3 +1,17 @@\n+2011-08-03  Yannick Moy  <moy@adacore.com>\n+\n+\t* sem_ch11.adb (Analyze_Raise_xxx_Error): do not mark such nodes as not\n+\tin ALFA. Instead, they are considered as assertions to prove.\n+\t* sem_ch4.adb (Analyze_Conditional_Expression): do not always mark such\n+\tnodes as not in ALFA. Instead, include conditional expressions in ALFA\n+\tif they have no ELSE part, or if they occur in pre- and postconditions,\n+\twhere the Condition cannot have side-effects in ALFA\n+\t(Analyze_Membership_Op): do not mark such nodes as not in ALFA\n+\t(Analyze_Type_Conversion): do not always mark such nodes as not in ALFA.\n+\tInstead, include type conversion between scalar types in ALFA.\n+\t* sem_ch6.adb (Process_Formals): correctly mark a parameter in ALFA\n+\tif-and-only-if its type is in ALFA.\n+\n 2011-08-03  Thomas Quinot  <quinot@adacore.com>\n \n \t* scos.adb, get_scos.adb, put_scos.adb"}, {"sha": "69428354ca2b5f260cf80c0fbbfb15150ffb28b7", "filename": "gcc/ada/sem_ch11.adb", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5e8c8e4457de992f8f7081f20aaf11778656d344/gcc%2Fada%2Fsem_ch11.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5e8c8e4457de992f8f7081f20aaf11778656d344/gcc%2Fada%2Fsem_ch11.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch11.adb?ref=5e8c8e4457de992f8f7081f20aaf11778656d344", "patch": "@@ -602,7 +602,6 @@ package body Sem_Ch11 is\n    --  Start of processing for Analyze_Raise_xxx_Error\n \n    begin\n-      Mark_Non_ALFA_Subprogram;\n       Check_SPARK_Restriction (\"raise statement is not allowed\", N);\n \n       if No (Etype (N)) then"}, {"sha": "1e4945646ae29aebd8e4c5228126055957e5b7e2", "filename": "gcc/ada/sem_ch4.adb", "status": "modified", "additions": 20, "deletions": 5, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5e8c8e4457de992f8f7081f20aaf11778656d344/gcc%2Fada%2Fsem_ch4.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5e8c8e4457de992f8f7081f20aaf11778656d344/gcc%2Fada%2Fsem_ch4.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch4.adb?ref=5e8c8e4457de992f8f7081f20aaf11778656d344", "patch": "@@ -1520,11 +1520,23 @@ package body Sem_Ch4 is\n          return;\n       end if;\n \n-      Mark_Non_ALFA_Subprogram;\n       Check_SPARK_Restriction (\"conditional expression is not allowed\", N);\n \n       Else_Expr := Next (Then_Expr);\n \n+      --  In ALFA, conditional expressions are allowed:\n+      --    * if they have no ELSE part, in which case the expression is\n+      --      equivalent to\n+      --        NOT Condition OR ELSE Then_Expr\n+      --    * in pre- and postconditions, where the Condition cannot have side-\n+      --      effects (in ALFA) and thus the expression is equivalent to\n+      --        (Condition AND THEN Then_Expr)\n+      --          and (NOT Condition AND THEN Then_Expr)\n+\n+      if Present (Else_Expr) and then not In_Pre_Post_Expression then\n+         Mark_Non_ALFA_Subprogram;\n+      end if;\n+\n       if Comes_From_Source (N) then\n          Check_Compiler_Unit (N);\n       end if;\n@@ -2483,8 +2495,6 @@ package body Sem_Ch4 is\n    --  Start of processing for Analyze_Membership_Op\n \n    begin\n-      Mark_Non_ALFA_Subprogram;\n-\n       Analyze_Expression (L);\n \n       if No (R)\n@@ -4375,8 +4385,6 @@ package body Sem_Ch4 is\n       T    : Entity_Id;\n \n    begin\n-      Mark_Non_ALFA_Subprogram;\n-\n       --  If Conversion_OK is set, then the Etype is already set, and the\n       --  only processing required is to analyze the expression. This is\n       --  used to construct certain \"illegal\" conversions which are not\n@@ -4398,6 +4406,13 @@ package body Sem_Ch4 is\n       Analyze_Expression (Expr);\n       Validate_Remote_Type_Type_Conversion (N);\n \n+      --  Type conversion between scalar types are allowed in ALFA. All other\n+      --  type conversions are not allowed.\n+\n+      if not (Is_Scalar_Type (Etype (Expr)) and then Is_Scalar_Type (T)) then\n+         Mark_Non_ALFA_Subprogram;\n+      end if;\n+\n       --  Only remaining step is validity checks on the argument. These\n       --  are skipped if the conversion does not come from the source.\n "}, {"sha": "854810f156277e4987a6a7be4ecc499cded1bd88", "filename": "gcc/ada/sem_ch6.adb", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5e8c8e4457de992f8f7081f20aaf11778656d344/gcc%2Fada%2Fsem_ch6.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5e8c8e4457de992f8f7081f20aaf11778656d344/gcc%2Fada%2Fsem_ch6.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch6.adb?ref=5e8c8e4457de992f8f7081f20aaf11778656d344", "patch": "@@ -8881,13 +8881,12 @@ package body Sem_Ch6 is\n \n          Set_Etype (Formal, Formal_Type);\n \n-         --  If the type of a subprogram's formal parameter is not in ALFA,\n-         --  then the subprogram is not in ALFA.\n+         --  The parameter is in ALFA if-and-only-if its type is in ALFA\n \n-         if Nkind (Parent (First (T))) in N_Subprogram_Specification\n-           and then not Is_In_ALFA (Formal_Type)\n-         then\n-            Set_Is_In_ALFA (Defining_Entity (Parent (First (T))), False);\n+         if Is_In_ALFA (Formal_Type) then\n+            Set_Is_In_ALFA (Formal);\n+         else\n+            Mark_Non_ALFA_Subprogram;\n          end if;\n \n          Default := Expression (Param_Spec);"}]}