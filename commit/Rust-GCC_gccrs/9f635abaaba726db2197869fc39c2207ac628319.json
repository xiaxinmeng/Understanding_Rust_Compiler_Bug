{"sha": "9f635abaaba726db2197869fc39c2207ac628319", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWY2MzVhYmFhYmE3MjZkYjIxOTc4NjlmYzM5YzIyMDdhYzYyODMxOQ==", "commit": {"author": {"name": "Paolo Carlini", "email": "paolo.carlini@oracle.com", "date": "2015-04-16T15:12:10Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2015-04-16T15:12:10Z"}, "message": "call.c (build_op_delete_call, [...]): Check mark_used return value.\n\n2015-04-16  Paolo Carlini  <paolo.carlini@oracle.com>\n\n\t* call.c (build_op_delete_call, build_over_call): Check mark_used\n\treturn value.\n\t* class.c (resolve_address_of_overloaded_function): Likewise.\n\t* decl.c (cxx_maybe_build_cleanup): Likewise.\n\t* pt.c (gen_elem_of_pack_expansion_instantiation, tsubst_baselink,\n\ttsubst_qualified_id, tsubst_copy, tsubst_copy_and_build): Likewise.\n\t* rtti.c (build_dynamic_cast_1): Likewise.\n\t* semantics.c (process_outer_var_ref): Likewise.\n\t* typeck.c (build_class_member_access_expr,\n\tcp_build_function_call_vec, cp_build_addr_expr_1): Likewise.\n\nFrom-SVN: r222150", "tree": {"sha": "9cdcb4cf2bc217b21ecb591201bd58f69d5cae27", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9cdcb4cf2bc217b21ecb591201bd58f69d5cae27"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9f635abaaba726db2197869fc39c2207ac628319", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9f635abaaba726db2197869fc39c2207ac628319", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9f635abaaba726db2197869fc39c2207ac628319", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9f635abaaba726db2197869fc39c2207ac628319/comments", "author": null, "committer": null, "parents": [{"sha": "b8147bfc61b01a6ad8f6ed34bafe379ccb8e116c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b8147bfc61b01a6ad8f6ed34bafe379ccb8e116c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b8147bfc61b01a6ad8f6ed34bafe379ccb8e116c"}], "stats": {"total": 92, "additions": 63, "deletions": 29}, "files": [{"sha": "65b5ed9792b234171bb0bb8b2c8cdf3c33feed52", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9f635abaaba726db2197869fc39c2207ac628319/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9f635abaaba726db2197869fc39c2207ac628319/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=9f635abaaba726db2197869fc39c2207ac628319", "patch": "@@ -1,3 +1,16 @@\n+2015-04-16  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+\t* call.c (build_op_delete_call, build_over_call): Check mark_used\n+\treturn value.\n+\t* class.c (resolve_address_of_overloaded_function): Likewise.\n+\t* decl.c (cxx_maybe_build_cleanup): Likewise.\n+\t* pt.c (gen_elem_of_pack_expansion_instantiation, tsubst_baselink,\n+\ttsubst_qualified_id, tsubst_copy, tsubst_copy_and_build): Likewise.\n+\t* rtti.c (build_dynamic_cast_1): Likewise.\n+\t* semantics.c (process_outer_var_ref): Likewise.\n+\t* typeck.c (build_class_member_access_expr,\n+\tcp_build_function_call_vec, cp_build_addr_expr_1): Likewise.\n+\n 2015-04-15  Jason Merrill  <jason@redhat.com>\n \n \t* constexpr.c (cxx_eval_store_expression): Ignore clobbers."}, {"sha": "7bdf2365de6749502777ad2931dfc9cff0d4eeca", "filename": "gcc/cp/call.c", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9f635abaaba726db2197869fc39c2207ac628319/gcc%2Fcp%2Fcall.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9f635abaaba726db2197869fc39c2207ac628319/gcc%2Fcp%2Fcall.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcall.c?ref=9f635abaaba726db2197869fc39c2207ac628319", "patch": "@@ -5968,7 +5968,8 @@ build_op_delete_call (enum tree_code code, tree addr, tree size,\n \t  argarray[0] = addr;\n \t  for (i = 1; i < nargs; i++)\n \t    argarray[i] = CALL_EXPR_ARG (placement, i);\n-\t  mark_used (fn);\n+\t  if (!mark_used (fn, complain) && !(complain & tf_error))\n+\t    return error_mark_node;\n \t  return build_cxx_call (fn, nargs, argarray, complain);\n \t}\n       else\n@@ -7400,7 +7401,8 @@ build_over_call (struct z_candidate *cand, int flags, tsubst_flags_t complain)\n \t the implementation elided its use.  */\n       if (!trivial || DECL_DELETED_FN (fn))\n \t{\n-\t  mark_used (fn);\n+\t  if (!mark_used (fn, complain) && !(complain & tf_error))\n+\t    return error_mark_node;\n \t  already_used = true;\n \t}\n "}, {"sha": "fde51c5753d5cc99d608feb066273d15b1b002b7", "filename": "gcc/cp/class.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9f635abaaba726db2197869fc39c2207ac628319/gcc%2Fcp%2Fclass.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9f635abaaba726db2197869fc39c2207ac628319/gcc%2Fcp%2Fclass.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fclass.c?ref=9f635abaaba726db2197869fc39c2207ac628319", "patch": "@@ -7755,8 +7755,8 @@ resolve_address_of_overloaded_function (tree target_type,\n       /* Make =delete work with SFINAE.  */\n       if (DECL_DELETED_FN (fn) && !(flags & tf_error))\n \treturn error_mark_node;\n-      \n-      mark_used (fn);\n+      if (!mark_used (fn, flags) && !(flags & tf_error))\n+\treturn error_mark_node;\n     }\n \n   /* We could not check access to member functions when this"}, {"sha": "b920fe7da0b69f58f3e988b94f07acd7524bc9a5", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9f635abaaba726db2197869fc39c2207ac628319/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9f635abaaba726db2197869fc39c2207ac628319/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=9f635abaaba726db2197869fc39c2207ac628319", "patch": "@@ -14587,7 +14587,8 @@ cxx_maybe_build_cleanup (tree decl, tsubst_flags_t complain)\n \t ordinary FUNCTION_DECL.  */\n       fn = lookup_name (id);\n       arg = build_address (decl);\n-      mark_used (decl);\n+      if (!mark_used (decl, complain) && !(complain & tf_error))\n+\treturn error_mark_node;\n       cleanup = cp_build_function_call_nary (fn, complain, arg, NULL_TREE);\n       if (cleanup == error_mark_node)\n \treturn error_mark_node;\n@@ -14627,10 +14628,11 @@ cxx_maybe_build_cleanup (tree decl, tsubst_flags_t complain)\n     SET_EXPR_LOCATION (cleanup, UNKNOWN_LOCATION);\n \n   if (cleanup\n-      && !lookup_attribute (\"warn_unused\", TYPE_ATTRIBUTES (TREE_TYPE (decl))))\n-    /* Treat objects with destructors as used; the destructor may do\n-       something substantive.  */\n-    mark_used (decl);\n+      && !lookup_attribute (\"warn_unused\", TYPE_ATTRIBUTES (TREE_TYPE (decl)))\n+      /* Treat objects with destructors as used; the destructor may do\n+\t something substantive.  */\n+      && !mark_used (decl, complain) && !(complain & tf_error))\n+    return error_mark_node;\n \n   return cleanup;\n }"}, {"sha": "91e56a55af9b2d31d1ed74c1c27e976059e32513", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 23, "deletions": 13, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9f635abaaba726db2197869fc39c2207ac628319/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9f635abaaba726db2197869fc39c2207ac628319/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=9f635abaaba726db2197869fc39c2207ac628319", "patch": "@@ -9833,7 +9833,8 @@ gen_elem_of_pack_expansion_instantiation (tree pattern,\n \t  if (index == 0)\n \t    {\n \t      aps = make_argument_pack_select (arg_pack, index);\n-\t      mark_used (parm);\n+\t      if (!mark_used (parm, complain) && !(complain & tf_error))\n+\t\treturn error_mark_node;\n \t      register_local_specialization (aps, parm);\n \t    }\n \t  else\n@@ -12603,8 +12604,9 @@ tsubst_baselink (tree baselink, tree object_type,\n        point.)  */\n     if (BASELINK_P (baselink))\n       fns = BASELINK_FUNCTIONS (baselink);\n-    if (!template_id_p && !really_overloaded_fn (fns))\n-      mark_used (OVL_CURRENT (fns));\n+    if (!template_id_p && !really_overloaded_fn (fns)\n+\t&& !mark_used (OVL_CURRENT (fns), complain) && !(complain & tf_error))\n+      return error_mark_node;\n \n     /* Add back the template arguments, if present.  */\n     if (BASELINK_P (baselink) && template_id_p)\n@@ -12719,7 +12721,8 @@ tsubst_qualified_id (tree qualified_id, tree args,\n       check_accessibility_of_qualified_id (expr, /*object_type=*/NULL_TREE,\n \t\t\t\t\t   scope);\n       /* Remember that there was a reference to this entity.  */\n-      mark_used (expr);\n+      if (!mark_used (expr, complain) && !(complain & tf_error))\n+\treturn error_mark_node;\n     }\n \n   if (expr == error_mark_node || TREE_CODE (expr) == TREE_LIST)\n@@ -12829,7 +12832,8 @@ tsubst_copy (tree t, tree args, tsubst_flags_t complain, tree in_decl)\n       \n       if (TREE_CODE (r) == ARGUMENT_PACK_SELECT)\n \tr = ARGUMENT_PACK_SELECT_ARG (r);\n-      mark_used (r);\n+      if (!mark_used (r, complain) && !(complain & tf_error))\n+\treturn error_mark_node;\n       return r;\n \n     case CONST_DECL:\n@@ -12986,7 +12990,8 @@ tsubst_copy (tree t, tree args, tsubst_flags_t complain, tree in_decl)\n \t}\n       else\n \tr = t;\n-      mark_used (r);\n+      if (!mark_used (r, complain) && !(complain & tf_error))\n+\treturn error_mark_node;\n       return r;\n \n     case NAMESPACE_DECL:\n@@ -13350,7 +13355,9 @@ tsubst_copy (tree t, tree args, tsubst_flags_t complain, tree in_decl)\n \ttree op1 = tsubst_copy (TREE_OPERAND (t, 1), args, complain, in_decl);\n \tr = build2 (code, type, op0, op1);\n \tPTRMEM_OK_P (r) = PTRMEM_OK_P (t);\n-\tmark_used (TREE_OPERAND (r, 1));\n+\tif (!mark_used (TREE_OPERAND (r, 1), complain)\n+\t    && !(complain & tf_error))\n+\t  return error_mark_node;\n \treturn r;\n       }\n \n@@ -14868,8 +14875,9 @@ tsubst_copy_and_build (tree t,\n       op1 = tsubst_non_call_postfix_expression (TREE_OPERAND (t, 0),\n \t\t\t\t\t\targs, complain, in_decl);\n       /* Remember that there was a reference to this entity.  */\n-      if (DECL_P (op1))\n-\tmark_used (op1);\n+      if (DECL_P (op1)\n+\t  && !mark_used (op1, complain) && !(complain & tf_error))\n+\tRETURN (error_mark_node);\n       RETURN (build_x_arrow (input_location, op1, complain));\n \n     case NEW_EXPR:\n@@ -15120,8 +15128,9 @@ tsubst_copy_and_build (tree t,\n \t  }\n \n \t/* Remember that there was a reference to this entity.  */\n-\tif (DECL_P (function))\n-\t  mark_used (function, complain);\n+\tif (DECL_P (function)\n+\t    && !mark_used (function, complain) && !(complain & tf_error))\n+\t  RETURN (error_mark_node);\n \n \t/* Put back tf_decltype for the actual call.  */\n \tcomplain |= decltype_flag;\n@@ -15304,8 +15313,9 @@ tsubst_copy_and_build (tree t,\n \tobject = tsubst_non_call_postfix_expression (TREE_OPERAND (t, 0),\n \t\t\t\t\t\t     args, complain, in_decl);\n \t/* Remember that there was a reference to this entity.  */\n-\tif (DECL_P (object))\n-\t  mark_used (object);\n+\tif (DECL_P (object)\n+\t    && !mark_used (object, complain) && !(complain & tf_error))\n+\t  RETURN (error_mark_node);\n \tobject_type = TREE_TYPE (object);\n \n \tmember = TREE_OPERAND (t, 1);"}, {"sha": "8200d30882974ec2cee9ff19732a7a0475807149", "filename": "gcc/cp/rtti.c", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9f635abaaba726db2197869fc39c2207ac628319/gcc%2Fcp%2Frtti.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9f635abaaba726db2197869fc39c2207ac628319/gcc%2Fcp%2Frtti.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Frtti.c?ref=9f635abaaba726db2197869fc39c2207ac628319", "patch": "@@ -708,10 +708,12 @@ build_dynamic_cast_1 (tree type, tree expr, tsubst_flags_t complain)\n \t  target_type = TYPE_MAIN_VARIANT (TREE_TYPE (type));\n \t  static_type = TYPE_MAIN_VARIANT (TREE_TYPE (exprtype));\n \t  td2 = get_tinfo_decl (target_type);\n-\t  mark_used (td2);\n+\t  if (!mark_used (td2, complain) && !(complain & tf_error))\n+\t    return error_mark_node;\n \t  td2 = cp_build_addr_expr (td2, complain);\n \t  td3 = get_tinfo_decl (static_type);\n-\t  mark_used (td3);\n+\t  if (!mark_used (td3, complain) && !(complain & tf_error))\n+\t    return error_mark_node;\n \t  td3 = cp_build_addr_expr (td3, complain);\n \n \t  /* Determine how T and V are related.  */"}, {"sha": "0fc08b5f1ed678336f7e9d2e1727d3be4e3cff69", "filename": "gcc/cp/semantics.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9f635abaaba726db2197869fc39c2207ac628319/gcc%2Fcp%2Fsemantics.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9f635abaaba726db2197869fc39c2207ac628319/gcc%2Fcp%2Fsemantics.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fsemantics.c?ref=9f635abaaba726db2197869fc39c2207ac628319", "patch": "@@ -3117,7 +3117,8 @@ process_outer_var_ref (tree decl, tsubst_flags_t complain)\n   tree initializer = convert_from_reference (decl);\n \n   /* Mark it as used now even if the use is ill-formed.  */\n-  mark_used (decl);\n+  if (!mark_used (decl, complain) && !(complain & tf_error))\n+    return error_mark_node;\n \n   /* Core issue 696: \"[At the July 2009 meeting] the CWG expressed\n      support for an approach in which a reference to a local"}, {"sha": "250b5d68767bb0bf909c12c153d89bfd5a3a3500", "filename": "gcc/cp/typeck.c", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9f635abaaba726db2197869fc39c2207ac628319/gcc%2Fcp%2Ftypeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9f635abaaba726db2197869fc39c2207ac628319/gcc%2Fcp%2Ftypeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftypeck.c?ref=9f635abaaba726db2197869fc39c2207ac628319", "patch": "@@ -2298,7 +2298,8 @@ build_class_member_access_expr (tree object, tree member,\n   if (DECL_P (member))\n     {\n       member_scope = DECL_CLASS_CONTEXT (member);\n-      mark_used (member);\n+      if (!mark_used (member, complain) && !(complain & tf_error))\n+\treturn error_mark_node;\n       if (TREE_DEPRECATED (member))\n \twarn_deprecated_use (member, NULL_TREE);\n     }\n@@ -3477,7 +3478,8 @@ cp_build_function_call_vec (tree function, vec<tree, va_gc> **params,\n \n   if (TREE_CODE (function) == FUNCTION_DECL)\n     {\n-      mark_used (function);\n+      if (!mark_used (function, complain) && !(complain & tf_error))\n+\treturn error_mark_node;\n       fndecl = function;\n \n       /* Convert anything with function type to a pointer-to-function.  */\n@@ -5376,7 +5378,8 @@ cp_build_addr_expr_1 (tree arg, bool strict_lvalue, tsubst_flags_t complain)\n \t and the created OFFSET_REF.  */\n       tree base = TYPE_MAIN_VARIANT (TREE_TYPE (TREE_OPERAND (arg, 0)));\n       tree fn = get_first_fn (TREE_OPERAND (arg, 1));\n-      mark_used (fn);\n+      if (!mark_used (fn, complain) && !(complain & tf_error))\n+\treturn error_mark_node;\n \n       if (! flag_ms_extensions)\n \t{\n@@ -5563,7 +5566,8 @@ cp_build_addr_expr_1 (tree arg, bool strict_lvalue, tsubst_flags_t complain)\n \t function.  */\n       gcc_assert (TREE_CODE (fn) == FUNCTION_DECL\n \t\t  && DECL_STATIC_FUNCTION_P (fn));\n-      mark_used (fn);\n+      if (!mark_used (fn, complain) && !(complain & tf_error))\n+\treturn error_mark_node;\n       val = build_address (fn);\n       if (TREE_SIDE_EFFECTS (TREE_OPERAND (arg, 0)))\n \t/* Do not lose object's side effects.  */"}]}