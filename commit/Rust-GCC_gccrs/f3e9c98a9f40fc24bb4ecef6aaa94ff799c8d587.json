{"sha": "f3e9c98a9f40fc24bb4ecef6aaa94ff799c8d587", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjNlOWM5OGE5ZjQwZmMyNGJiNGVjZWY2YWFhOTRmZjc5OWM4ZDU4Nw==", "commit": {"author": {"name": "Ian Lance Taylor", "email": "iant@golang.org", "date": "2021-03-17T05:34:20Z"}, "committer": {"name": "Ian Lance Taylor", "email": "iant@golang.org", "date": "2021-03-17T19:17:51Z"}, "message": "compiler: copy receiver argument for go/defer of method call\n\nTest case is https://golang.org/cl/302371.\n\nReviewed-on: https://go-review.googlesource.com/c/gofrontend/+/302270", "tree": {"sha": "a3451277603bc8fbe2eddce5f4ad63f790129a01", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a3451277603bc8fbe2eddce5f4ad63f790129a01"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f3e9c98a9f40fc24bb4ecef6aaa94ff799c8d587", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f3e9c98a9f40fc24bb4ecef6aaa94ff799c8d587", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f3e9c98a9f40fc24bb4ecef6aaa94ff799c8d587", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f3e9c98a9f40fc24bb4ecef6aaa94ff799c8d587/comments", "author": {"login": "ianlancetaylor", "id": 3194333, "node_id": "MDQ6VXNlcjMxOTQzMzM=", "avatar_url": "https://avatars.githubusercontent.com/u/3194333?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ianlancetaylor", "html_url": "https://github.com/ianlancetaylor", "followers_url": "https://api.github.com/users/ianlancetaylor/followers", "following_url": "https://api.github.com/users/ianlancetaylor/following{/other_user}", "gists_url": "https://api.github.com/users/ianlancetaylor/gists{/gist_id}", "starred_url": "https://api.github.com/users/ianlancetaylor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ianlancetaylor/subscriptions", "organizations_url": "https://api.github.com/users/ianlancetaylor/orgs", "repos_url": "https://api.github.com/users/ianlancetaylor/repos", "events_url": "https://api.github.com/users/ianlancetaylor/events{/privacy}", "received_events_url": "https://api.github.com/users/ianlancetaylor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ianlancetaylor", "id": 3194333, "node_id": "MDQ6VXNlcjMxOTQzMzM=", "avatar_url": "https://avatars.githubusercontent.com/u/3194333?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ianlancetaylor", "html_url": "https://github.com/ianlancetaylor", "followers_url": "https://api.github.com/users/ianlancetaylor/followers", "following_url": "https://api.github.com/users/ianlancetaylor/following{/other_user}", "gists_url": "https://api.github.com/users/ianlancetaylor/gists{/gist_id}", "starred_url": "https://api.github.com/users/ianlancetaylor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ianlancetaylor/subscriptions", "organizations_url": "https://api.github.com/users/ianlancetaylor/orgs", "repos_url": "https://api.github.com/users/ianlancetaylor/repos", "events_url": "https://api.github.com/users/ianlancetaylor/events{/privacy}", "received_events_url": "https://api.github.com/users/ianlancetaylor/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c86c5195c8c02f5891a222f498c074b373aa946c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c86c5195c8c02f5891a222f498c074b373aa946c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c86c5195c8c02f5891a222f498c074b373aa946c"}], "stats": {"total": 31, "additions": 29, "deletions": 2}, "files": [{"sha": "a3eef239eca4846b036b02a6c0d0e84e315e0633", "filename": "gcc/go/gofrontend/MERGE", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f3e9c98a9f40fc24bb4ecef6aaa94ff799c8d587/gcc%2Fgo%2Fgofrontend%2FMERGE", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f3e9c98a9f40fc24bb4ecef6aaa94ff799c8d587/gcc%2Fgo%2Fgofrontend%2FMERGE", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2FMERGE?ref=f3e9c98a9f40fc24bb4ecef6aaa94ff799c8d587", "patch": "@@ -1,4 +1,4 @@\n-10b00ad87303d37c68b2d54dd25d655bd316946e\n+4bdff733a0c2a9ddc3eff104b1be03df058a79c4\n \n The first line of this file holds the git revision number of the last\n merge done from the gofrontend repository."}, {"sha": "5409d269ebf55225da1ddfef62a583c5019ea063", "filename": "gcc/go/gofrontend/expressions.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f3e9c98a9f40fc24bb4ecef6aaa94ff799c8d587/gcc%2Fgo%2Fgofrontend%2Fexpressions.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f3e9c98a9f40fc24bb4ecef6aaa94ff799c8d587/gcc%2Fgo%2Fgofrontend%2Fexpressions.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Fexpressions.cc?ref=f3e9c98a9f40fc24bb4ecef6aaa94ff799c8d587", "patch": "@@ -11017,7 +11017,7 @@ Call_expression::do_lower(Gogo* gogo, Named_object* function,\n   // If this is call to a method, call the method directly passing the\n   // object as the first parameter.\n   Bound_method_expression* bme = this->fn_->bound_method_expression();\n-  if (bme != NULL)\n+  if (bme != NULL && !this->is_deferred_ && !this->is_concurrent_)\n     {\n       Named_object* methodfn = bme->function();\n       Function_type* mft = (methodfn->is_function()"}, {"sha": "b0660111ac8049adb94824a0fd52f4b991b3427c", "filename": "gcc/go/gofrontend/statements.cc", "status": "modified", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f3e9c98a9f40fc24bb4ecef6aaa94ff799c8d587/gcc%2Fgo%2Fgofrontend%2Fstatements.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f3e9c98a9f40fc24bb4ecef6aaa94ff799c8d587/gcc%2Fgo%2Fgofrontend%2Fstatements.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Fstatements.cc?ref=f3e9c98a9f40fc24bb4ecef6aaa94ff799c8d587", "patch": "@@ -2524,6 +2524,8 @@ Thunk_statement::is_constant_function() const\n     return fn->func_expression()->closure() == NULL;\n   if (fn->interface_field_reference_expression() != NULL)\n     return true;\n+  if (fn->bound_method_expression() != NULL)\n+    return true;\n   return false;\n }\n \n@@ -2566,6 +2568,7 @@ Thunk_statement::simplify_statement(Gogo* gogo, Named_object* function,\n   Expression* fn = ce->fn();\n   Interface_field_reference_expression* interface_method =\n     fn->interface_field_reference_expression();\n+  Bound_method_expression* bme = fn->bound_method_expression();\n \n   Location location = this->location();\n \n@@ -2594,6 +2597,8 @@ Thunk_statement::simplify_statement(Gogo* gogo, Named_object* function,\n \n   if (interface_method != NULL)\n     vals->push_back(interface_method->expr());\n+  if (bme != NULL)\n+    vals->push_back(bme->first_argument());\n \n   if (ce->args() != NULL)\n     {\n@@ -2714,6 +2719,16 @@ Thunk_statement::build_struct(Function_type* fntype)\n       fields->push_back(Struct_field(tid));\n     }\n \n+  // If this thunk statement calls a bound method expression, as in\n+  // \"go s.m()\", we pass the bound method argument to the thunk,\n+  // to ensure that we make a copy of it if needed.\n+  Bound_method_expression* bme = fn->bound_method_expression();\n+  if (bme != NULL)\n+    {\n+      Typed_identifier tid(\"object\", bme->first_argument()->type(), location);\n+      fields->push_back(Struct_field(tid));\n+    }\n+\n   // The predeclared recover function has no argument.  However, we\n   // add an argument when building recover thunks.  Handle that here.\n   if (ce->is_recover_call())\n@@ -2843,6 +2858,7 @@ Thunk_statement::build_thunk(Gogo* gogo, const std::string& thunk_name)\n \n   Interface_field_reference_expression* interface_method =\n     ce->fn()->interface_field_reference_expression();\n+  Bound_method_expression* bme = ce->fn()->bound_method_expression();\n \n   Expression* func_to_call;\n   unsigned int next_index;\n@@ -2870,6 +2886,17 @@ Thunk_statement::build_thunk(Gogo* gogo, const std::string& thunk_name)\n       next_index = 1;\n     }\n \n+  if (bme != NULL)\n+    {\n+      // This is a call to a method.\n+      go_assert(next_index == 0);\n+      Expression* r = Expression::make_field_reference(thunk_parameter, 0,\n+\t\t\t\t\t\t       location);\n+      func_to_call = Expression::make_bound_method(r, bme->method(),\n+\t\t\t\t\t\t   bme->function(), location);\n+      next_index = 1;\n+    }\n+\n   Expression_list* call_params = new Expression_list();\n   const Struct_field_list* fields = this->struct_type_->fields();\n   Struct_field_list::const_iterator p = fields->begin();"}]}