{"sha": "78e4f1ad4e4842af9897bd6ee6fb19fc33fe7762", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzhlNGYxYWQ0ZTQ4NDJhZjk4OTdiZDZlZTZmYjE5ZmMzM2ZlNzc2Mg==", "commit": {"author": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2012-09-01T14:26:28Z"}, "committer": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2012-09-01T14:26:28Z"}, "message": "target.def (legitimate_combined_insn): New target hook.\n\n\t* target.def (legitimate_combined_insn): New target hook.\n\t* doc/tm.texi.in (TARGET_LEGITIMATE_COMBINED_INSN): New hook.\n\t* doc/tm.texi: Regenerated.\n\t* combine.c (recog_for_combine): Call targetm.legitimate_combined_insn\n\tto allow targets to reject combined insn.\n\t* hooks.h (hook_bool_rtx_true): New.\n\t* hooks.c (hook_bool_rtx_true): Ditto.\n\nFrom-SVN: r190846", "tree": {"sha": "0eab0625a3fd56f7d03f4a8eed4bd72c645aec56", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0eab0625a3fd56f7d03f4a8eed4bd72c645aec56"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/78e4f1ad4e4842af9897bd6ee6fb19fc33fe7762", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/78e4f1ad4e4842af9897bd6ee6fb19fc33fe7762", "html_url": "https://github.com/Rust-GCC/gccrs/commit/78e4f1ad4e4842af9897bd6ee6fb19fc33fe7762", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/78e4f1ad4e4842af9897bd6ee6fb19fc33fe7762/comments", "author": null, "committer": null, "parents": [{"sha": "cb7dba8ebfd6592061706c136dced23e547a72b2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cb7dba8ebfd6592061706c136dced23e547a72b2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cb7dba8ebfd6592061706c136dced23e547a72b2"}], "stats": {"total": 75, "additions": 71, "deletions": 4}, "files": [{"sha": "545fee025dcd8606a3b89009562726ea1ecb8e5a", "filename": "gcc/ChangeLog", "status": "modified", "additions": 13, "deletions": 2, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/78e4f1ad4e4842af9897bd6ee6fb19fc33fe7762/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/78e4f1ad4e4842af9897bd6ee6fb19fc33fe7762/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=78e4f1ad4e4842af9897bd6ee6fb19fc33fe7762", "patch": "@@ -1,3 +1,13 @@\n+2012-09-01  Uros Bizjak  <ubizjak@gmail.com>\n+\n+\t* target.def (legitimate_combined_insn): New target hook.\n+\t* doc/tm.texi.in (TARGET_LEGITIMATE_COMBINED_INSN): New hook.\n+\t* doc/tm.texi: Regenerated.\n+\t* combine.c (recog_for_combine): Call targetm.legitimate_combined_insn\n+\tto allow targets to reject combined insn.\n+\t* hooks.h (hook_bool_rtx_true): New.\n+\t* hooks.c (hook_bool_rtx_true): Ditto.\n+\n 2012-08-31  Martin Jambor  <mjambor@suse.cz>\n \n \t* ipa-inline-analysis.c (estimate_function_body_sizes): Allocate\n@@ -62,8 +72,9 @@\n 2012-08-29  Oleg Endo  <olegendo@gcc.gnu.org>\n \n \t* config/sh/iterators.md: New file.\n-\t* config/sh/sync.md (I124, I12, i124suffix): Delete.  Replace usage with\n-\tnew iterators QIHISI, QIHI, bw, bwl respectively throughout the file.\n+\t* config/sh/sync.md (I124, I12, i124suffix): Delete.  Replace usage\n+\twith new iterators QIHISI, QIHI, bw, bwl respectively throughout\n+\tthe file.\n \t* config/sh/sh.md: Include new file iterators.md.\n \t(zero_extendhisi2, zero_extendqisi2): Fold into zero_extend<mode>si2.\n \t(*zero_extendhisi2_compact, *zero_extendqisi2_compact): Fold into"}, {"sha": "507b11e61edcf2709e71dddc61473ef3b2a81785", "filename": "gcc/combine.c", "status": "modified", "additions": 36, "deletions": 2, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/78e4f1ad4e4842af9897bd6ee6fb19fc33fe7762/gcc%2Fcombine.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/78e4f1ad4e4842af9897bd6ee6fb19fc33fe7762/gcc%2Fcombine.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcombine.c?ref=78e4f1ad4e4842af9897bd6ee6fb19fc33fe7762", "patch": "@@ -10500,11 +10500,13 @@ static int\n recog_for_combine (rtx *pnewpat, rtx insn, rtx *pnotes)\n {\n   rtx pat = *pnewpat;\n+  rtx pat_without_clobbers;\n   int insn_code_number;\n   int num_clobbers_to_add = 0;\n   int i;\n-  rtx notes = 0;\n+  rtx notes = NULL_RTX;\n   rtx old_notes, old_pat;\n+  int old_icode;\n \n   /* If PAT is a PARALLEL, check to see if it contains the CLOBBER\n      we use to indicate that something didn't match.  If we find such a\n@@ -10518,7 +10520,7 @@ recog_for_combine (rtx *pnewpat, rtx insn, rtx *pnotes)\n   old_pat = PATTERN (insn);\n   old_notes = REG_NOTES (insn);\n   PATTERN (insn) = pat;\n-  REG_NOTES (insn) = 0;\n+  REG_NOTES (insn) = NULL_RTX;\n \n   insn_code_number = recog (pat, insn, &num_clobbers_to_add);\n   if (dump_file && (dump_flags & TDF_DETAILS))\n@@ -10564,6 +10566,9 @@ recog_for_combine (rtx *pnewpat, rtx insn, rtx *pnotes)\n \t  print_rtl_single (dump_file, pat);\n \t}\n     }\n+\n+  pat_without_clobbers = pat;\n+\n   PATTERN (insn) = old_pat;\n   REG_NOTES (insn) = old_notes;\n \n@@ -10605,6 +10610,35 @@ recog_for_combine (rtx *pnewpat, rtx insn, rtx *pnotes)\n       pat = newpat;\n     }\n \n+  if (insn_code_number >= 0\n+      && insn_code_number != NOOP_MOVE_INSN_CODE)\n+    {\n+      old_pat = PATTERN (insn);\n+      old_notes = REG_NOTES (insn);\n+      old_icode = INSN_CODE (insn);\n+      PATTERN (insn) = pat;\n+      REG_NOTES (insn) = notes;\n+\n+      /* Allow targets to reject combined insn.  */\n+      if (!targetm.legitimate_combined_insn (insn))\n+\t{\n+\t  if (dump_file && (dump_flags & TDF_DETAILS))\n+\t    fputs (\"Instruction not appropriate for target.\",\n+\t\t   dump_file);\n+\n+\t  /* Callers expect recog_for_combine to strip\n+\t     clobbers from the pattern on failure.  */\n+\t  pat = pat_without_clobbers;\n+\t  notes = NULL_RTX;\n+\n+\t  insn_code_number = -1;\n+\t}\n+\n+      PATTERN (insn) = old_pat;\n+      REG_NOTES (insn) = old_notes;\n+      INSN_CODE (insn) = old_icode;\n+    }\n+\n   *pnewpat = pat;\n   *pnotes = notes;\n "}, {"sha": "a4dc7c1f5fc90aa27d5864949871aeb5d615e714", "filename": "gcc/doc/tm.texi", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/78e4f1ad4e4842af9897bd6ee6fb19fc33fe7762/gcc%2Fdoc%2Ftm.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/78e4f1ad4e4842af9897bd6ee6fb19fc33fe7762/gcc%2Fdoc%2Ftm.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Ftm.texi?ref=78e4f1ad4e4842af9897bd6ee6fb19fc33fe7762", "patch": "@@ -10938,6 +10938,10 @@ By default, the RTL loop optimizer does not use a present doloop pattern for\n loops containing function calls or branch on table instructions.\n @end deftypefn\n \n+@deftypefn {Target Hook} bool TARGET_LEGITIMATE_COMBINED_INSN (rtx @var{insn})\n+Take an instruction in @var{insn} and return @code{false} if the instruction is not appropriate as a combination of two or more instructions.  The default is to accept all instructions.\n+@end deftypefn\n+\n @defmac MD_CAN_REDIRECT_BRANCH (@var{branch1}, @var{branch2})\n \n Take a branch insn in @var{branch1} and another in @var{branch2}."}, {"sha": "54414f17f7a3b5c16cb502abc988d9014b973c48", "filename": "gcc/doc/tm.texi.in", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/78e4f1ad4e4842af9897bd6ee6fb19fc33fe7762/gcc%2Fdoc%2Ftm.texi.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/78e4f1ad4e4842af9897bd6ee6fb19fc33fe7762/gcc%2Fdoc%2Ftm.texi.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Ftm.texi.in?ref=78e4f1ad4e4842af9897bd6ee6fb19fc33fe7762", "patch": "@@ -10796,6 +10796,8 @@ By default, the RTL loop optimizer does not use a present doloop pattern for\n loops containing function calls or branch on table instructions.\n @end deftypefn\n \n+@hook TARGET_LEGITIMATE_COMBINED_INSN\n+\n @defmac MD_CAN_REDIRECT_BRANCH (@var{branch1}, @var{branch2})\n \n Take a branch insn in @var{branch1} and another in @var{branch2}."}, {"sha": "c0046398d72cb0c5e9556d82e53ed120cd72e03b", "filename": "gcc/hooks.c", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/78e4f1ad4e4842af9897bd6ee6fb19fc33fe7762/gcc%2Fhooks.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/78e4f1ad4e4842af9897bd6ee6fb19fc33fe7762/gcc%2Fhooks.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fhooks.c?ref=78e4f1ad4e4842af9897bd6ee6fb19fc33fe7762", "patch": "@@ -268,6 +268,12 @@ hook_bool_tree_bool_false (tree a ATTRIBUTE_UNUSED, bool b ATTRIBUTE_UNUSED)\n   return false;\n }\n \n+bool\n+hook_bool_rtx_true (rtx a ATTRIBUTE_UNUSED)\n+{\n+  return true;\n+}\n+\n bool\n hook_bool_rtx_false (rtx a ATTRIBUTE_UNUSED)\n {"}, {"sha": "8eec169e78c2ed7680353bc870fc88379a7c235e", "filename": "gcc/hooks.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/78e4f1ad4e4842af9897bd6ee6fb19fc33fe7762/gcc%2Fhooks.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/78e4f1ad4e4842af9897bd6ee6fb19fc33fe7762/gcc%2Fhooks.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fhooks.h?ref=78e4f1ad4e4842af9897bd6ee6fb19fc33fe7762", "patch": "@@ -50,6 +50,7 @@ extern bool hook_bool_const_tree_hwi_hwi_const_tree_true (const_tree,\n \t\t\t\t\t\t\t  HOST_WIDE_INT,\n \t\t\t\t\t\t\t  HOST_WIDE_INT,\n \t\t\t\t\t\t\t  const_tree);\n+extern bool hook_bool_rtx_true (rtx);\n extern bool hook_bool_rtx_false (rtx);\n extern bool hook_bool_rtx_int_false (rtx, int);\n extern bool hook_bool_uintp_uintp_false (unsigned int *, unsigned int *);"}, {"sha": "321d64fa989533b5d6fd5940535bba08c298a15e", "filename": "gcc/target.def", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/78e4f1ad4e4842af9897bd6ee6fb19fc33fe7762/gcc%2Ftarget.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/78e4f1ad4e4842af9897bd6ee6fb19fc33fe7762/gcc%2Ftarget.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftarget.def?ref=78e4f1ad4e4842af9897bd6ee6fb19fc33fe7762", "patch": "@@ -1984,6 +1984,15 @@ DEFHOOK\n  const char *, (const_rtx insn),\n  default_invalid_within_doloop)\n \n+/* Returns true for a legitimate combined insn.  */\n+DEFHOOK\n+(legitimate_combined_insn,\n+\"Take an instruction in @var{insn} and return @code{false} if the instruction\\\n+ is not appropriate as a combination of two or more instructions.  The\\\n+ default is to accept all instructions.\",\n+ bool, (rtx insn),\n+ hook_bool_rtx_true)\n+\n DEFHOOK\n (valid_dllimport_attribute_p,\n \"@var{decl} is a variable or function with @code{__attribute__((dllimport))}\\"}]}