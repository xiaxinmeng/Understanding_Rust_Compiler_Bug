{"sha": "74462a6a0cf7e28d57e83bd65484ade52316665a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzQ0NjJhNmEwY2Y3ZTI4ZDU3ZTgzYmQ2NTQ4NGFkZTUyMzE2NjY1YQ==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2009-07-22T15:04:18Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2009-07-22T15:04:18Z"}, "message": "[multiple changes]\n\n2009-07-22  Robert Dewar  <dewar@adacore.com>\n\n\t* gnat_ugn.texi: Minor reformatting\n\n2009-07-22  Ed Schonberg  <schonberg@adacore.com>\n\n\t* errout.adb (Error_Msg): A style message within an instantiation\n\tshould not be labelled as an error.\n\nFrom-SVN: r149938", "tree": {"sha": "b5ded8a5070a09ce53395ca613012b0ef23af73c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b5ded8a5070a09ce53395ca613012b0ef23af73c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/74462a6a0cf7e28d57e83bd65484ade52316665a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/74462a6a0cf7e28d57e83bd65484ade52316665a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/74462a6a0cf7e28d57e83bd65484ade52316665a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/74462a6a0cf7e28d57e83bd65484ade52316665a/comments", "author": null, "committer": null, "parents": [{"sha": "8e5aa8a3bdff78beabdb4abb014f31a0133542ce", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8e5aa8a3bdff78beabdb4abb014f31a0133542ce", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8e5aa8a3bdff78beabdb4abb014f31a0133542ce"}], "stats": {"total": 69, "additions": 37, "deletions": 32}, "files": [{"sha": "523ae779b80aa582c0d697547820699a81c7c447", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/74462a6a0cf7e28d57e83bd65484ade52316665a/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/74462a6a0cf7e28d57e83bd65484ade52316665a/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=74462a6a0cf7e28d57e83bd65484ade52316665a", "patch": "@@ -1,3 +1,12 @@\n+2009-07-22  Robert Dewar  <dewar@adacore.com>\n+\n+\t* gnat_ugn.texi: Minor reformatting\n+\n+2009-07-22  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* errout.adb (Error_Msg): A style message within an instantiation\n+\tshould not be labelled as an error.\n+\n 2009-07-22  Ed Schonberg  <schonberg@adacore.com>\n \n \t* freeze.adb (Freeze_Entity): Do not generate extra formal for function"}, {"sha": "468afc8715635a0f5bd115f1a6db6ce29d0cb744", "filename": "gcc/ada/errout.adb", "status": "modified", "additions": 26, "deletions": 31, "changes": 57, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/74462a6a0cf7e28d57e83bd65484ade52316665a/gcc%2Fada%2Ferrout.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/74462a6a0cf7e28d57e83bd65484ade52316665a/gcc%2Fada%2Ferrout.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Ferrout.adb?ref=74462a6a0cf7e28d57e83bd65484ade52316665a", "patch": "@@ -439,7 +439,7 @@ package body Errout is\n                --  Case of inlined body\n \n                if Inlined_Body (X) then\n-                  if Is_Warning_Msg then\n+                  if Is_Warning_Msg or else Is_Style_Msg then\n                      Error_Msg_Internal\n                        (\"?in inlined body #\",\n                         Actual_Error_Loc, Flag_Location, Msg_Cont_Status);\n@@ -453,7 +453,7 @@ package body Errout is\n                --  Case of generic instantiation\n \n                else\n-                  if Is_Warning_Msg then\n+                  if Is_Warning_Msg or else Is_Style_Msg then\n                      Error_Msg_Internal\n                        (\"?in instantiation #\",\n                         Actual_Error_Loc, Flag_Location, Msg_Cont_Status);\n@@ -684,9 +684,7 @@ package body Errout is\n          --  performed if we find a serious error. This is skipped if we\n          --  are currently dealing with the configuration pragma file.\n \n-         if not Try_Semantics\n-           and then Current_Source_Unit /= No_Unit\n-         then\n+         if not Try_Semantics and then Current_Source_Unit /= No_Unit then\n             Set_Fatal_Error (Get_Source_Unit (Sptr));\n          end if;\n       end Handle_Serious_Error;\n@@ -714,8 +712,8 @@ package body Errout is\n \n       if Suppress_Message\n         and then not All_Errors_Mode\n-        and then not (Msg (Msg'Last) = '!')\n         and then not Is_Warning_Msg\n+        and then Msg (Msg'Last) /= '!'\n       then\n          if not Continuation then\n             Last_Killed := True;\n@@ -746,9 +744,7 @@ package body Errout is\n \n          --  Immediate return if warning message and warnings are suppressed\n \n-         if Warnings_Suppressed (Optr)\n-           or else Warnings_Suppressed (Sptr)\n-         then\n+         if Warnings_Suppressed (Optr) or else Warnings_Suppressed (Sptr) then\n             Cur_Msg := No_Error_Msg;\n             return;\n          end if;\n@@ -763,9 +759,7 @@ package body Errout is\n          --  then we want to eliminate the warning, unless it is in the\n          --  extended main code unit and we want warnings on the instance.\n \n-         elsif In_Extended_Main_Code_Unit (Sptr)\n-           and then Warn_On_Instance\n-         then\n+         elsif In_Extended_Main_Code_Unit (Sptr) and then Warn_On_Instance then\n             null;\n \n          --  Keep warning if debug flag G set\n@@ -829,14 +823,16 @@ package body Errout is\n \n             if Msglen > 8 and then Msg_Buffer (1 .. 8) = \"(style) \" then\n                M := 9;\n+\n             elsif Msglen > 6 and then Msg_Buffer (1 .. 6) = \"info: \" then\n                M := 7;\n+\n             else\n                M := 1;\n             end if;\n \n-            --  Now deal with separation between messages. Normally this\n-            --  is simply comma space, but there are some special cases.\n+            --  Now deal with separation between messages. Normally this is\n+            --  simply comma space, but there are some special cases.\n \n             --  If continuation new line, then put actual NL character in msg\n \n@@ -885,21 +881,21 @@ package body Errout is\n \n       --  Otherwise build error message object for new message\n \n-      Errors.Increment_Last;\n+      Errors.Append\n+        ((Text     => new String'(Msg_Buffer (1 .. Msglen)),\n+          Next     => No_Error_Msg,\n+          Sptr     => Sptr,\n+          Optr     => Optr,\n+          Sfile    => Get_Source_File_Index (Sptr),\n+          Line     => Get_Physical_Line_Number (Sptr),\n+          Col      => Get_Column_Number (Sptr),\n+          Warn     => Is_Warning_Msg,\n+          Style    => Is_Style_Msg,\n+          Serious  => Is_Serious_Error,\n+          Uncond   => Is_Unconditional_Msg,\n+          Msg_Cont => Continuation,\n+          Deleted  => False));\n       Cur_Msg := Errors.Last;\n-      Errors.Table (Cur_Msg).Text     := new String'(Msg_Buffer (1 .. Msglen));\n-      Errors.Table (Cur_Msg).Next     := No_Error_Msg;\n-      Errors.Table (Cur_Msg).Sptr     := Sptr;\n-      Errors.Table (Cur_Msg).Optr     := Optr;\n-      Errors.Table (Cur_Msg).Sfile    := Get_Source_File_Index (Sptr);\n-      Errors.Table (Cur_Msg).Line     := Get_Physical_Line_Number (Sptr);\n-      Errors.Table (Cur_Msg).Col      := Get_Column_Number (Sptr);\n-      Errors.Table (Cur_Msg).Warn     := Is_Warning_Msg;\n-      Errors.Table (Cur_Msg).Style    := Is_Style_Msg;\n-      Errors.Table (Cur_Msg).Serious  := Is_Serious_Error;\n-      Errors.Table (Cur_Msg).Uncond   := Is_Unconditional_Msg;\n-      Errors.Table (Cur_Msg).Msg_Cont := Continuation;\n-      Errors.Table (Cur_Msg).Deleted  := False;\n \n       --  If immediate errors mode set, output error message now. Also output\n       --  now if the -d1 debug flag is set (so node number message comes out\n@@ -1385,9 +1381,8 @@ package body Errout is\n       Specific_Warnings.Init;\n \n       if Warning_Mode = Suppress then\n-         Warnings.Increment_Last;\n-         Warnings.Table (Warnings.Last).Start := Source_Ptr'First;\n-         Warnings.Table (Warnings.Last).Stop  := Source_Ptr'Last;\n+         Warnings.Append\n+           ((Start => Source_Ptr'First, Stop => Source_Ptr'Last));\n       end if;\n    end Initialize;\n "}, {"sha": "68bb855f3646895a808ed280bf863df589071477", "filename": "gcc/ada/gnat_ugn.texi", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/74462a6a0cf7e28d57e83bd65484ade52316665a/gcc%2Fada%2Fgnat_ugn.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/74462a6a0cf7e28d57e83bd65484ade52316665a/gcc%2Fada%2Fgnat_ugn.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgnat_ugn.texi?ref=74462a6a0cf7e28d57e83bd65484ade52316665a", "patch": "@@ -16318,7 +16318,8 @@ case if the spec occupies more then one line.\n \n @cindex @option{^--separate-label^/SEPARATE_LABEL^} (@command{gnatpp})\n @item ^--separate-label^/SEPARATE_LABEL^\n-Place the satemement label(s) and the statement itself on separate lines.\n+Place statement label(s) on a separate line, with the following statement\n+on the next line.\n \n @cindex @option{^--separate-loop-then^/SEPARATE_LOOP_THEN^} (@command{gnatpp})\n @item ^--separate-loop-then^/SEPARATE_LOOP_THEN^"}]}