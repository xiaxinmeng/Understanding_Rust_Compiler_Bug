{"sha": "d942d7332d3dbd93609f5b5706df5990fd63dcfc", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDk0MmQ3MzMyZDNkYmQ5MzYwOWY1YjU3MDZkZjU5OTBmZDYzZGNmYw==", "commit": {"author": {"name": "Andrew MacLeod", "email": "amacleod@redhat.com", "date": "2021-04-26T23:23:25Z"}, "committer": {"name": "Andrew MacLeod", "email": "amacleod@redhat.com", "date": "2021-05-07T19:00:21Z"}, "message": "Fix range_on_exit for PHI stmts when there are no other stmts in the block.\n\nlast_stmt(bb) returns NULL for blocks which only have PHI stmts, and\nrange_on_exit would trigger a cache fill all the way to the top of the\nprogram for the SSA_NAME.\n\n\t* gimple-range.cc (gimple_ranger::range_on_exit): Handle block with\n\tonly PHI nodes better.", "tree": {"sha": "64b7da43580eaa104a7da35f1f34aeacc08f4644", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/64b7da43580eaa104a7da35f1f34aeacc08f4644"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d942d7332d3dbd93609f5b5706df5990fd63dcfc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d942d7332d3dbd93609f5b5706df5990fd63dcfc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d942d7332d3dbd93609f5b5706df5990fd63dcfc", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d942d7332d3dbd93609f5b5706df5990fd63dcfc/comments", "author": null, "committer": null, "parents": [{"sha": "12f0a54ba9fa25aa13af368af5bb07e345c33dff", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/12f0a54ba9fa25aa13af368af5bb07e345c33dff", "html_url": "https://github.com/Rust-GCC/gccrs/commit/12f0a54ba9fa25aa13af368af5bb07e345c33dff"}], "stats": {"total": 23, "additions": 16, "deletions": 7}, "files": [{"sha": "e94bb355de3485f46bc746168052c9581b8a121e", "filename": "gcc/gimple-range.cc", "status": "modified", "additions": 16, "deletions": 7, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d942d7332d3dbd93609f5b5706df5990fd63dcfc/gcc%2Fgimple-range.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d942d7332d3dbd93609f5b5706df5990fd63dcfc/gcc%2Fgimple-range.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-range.cc?ref=d942d7332d3dbd93609f5b5706df5990fd63dcfc", "patch": "@@ -1003,14 +1003,23 @@ gimple_ranger::range_on_exit (irange &r, basic_block bb, tree name)\n   gcc_checking_assert (bb != EXIT_BLOCK_PTR_FOR_FN (cfun));\n   gcc_checking_assert (gimple_range_ssa_p (name));\n \n-  gimple *s = last_stmt (bb);\n-  // If there is no statement in the block and this isn't the entry\n-  // block, go get the range_on_entry for this block.  For the entry\n-  // block, a NULL stmt will return the global value for NAME.\n-  if (!s && bb != ENTRY_BLOCK_PTR_FOR_FN (cfun))\n-    range_on_entry (r, bb, name);\n-  else\n+  gimple *s = SSA_NAME_DEF_STMT (name);\n+  basic_block def_bb = gimple_bb (s);\n+  // If this is not the definition block, get the range on the last stmt in\n+  // the block... if there is one.\n+  if (def_bb != bb)\n+    s = last_stmt (bb);\n+  // If there is no statement provided, get the range_on_entry for this block.\n+  if (s)\n     range_of_expr (r, name, s);\n+  else\n+    {\n+      range_on_entry (r, bb, name);\n+      // See if there was a deref in this block, if applicable\n+      if (!cfun->can_throw_non_call_exceptions && r.varying_p () &&\n+\t  m_cache.m_non_null.non_null_deref_p (name, bb))\n+\tr = range_nonzero (TREE_TYPE (name));\n+    }\n   gcc_checking_assert (r.undefined_p ()\n \t\t       || range_compatible_p (r.type (), TREE_TYPE (name)));\n }"}]}