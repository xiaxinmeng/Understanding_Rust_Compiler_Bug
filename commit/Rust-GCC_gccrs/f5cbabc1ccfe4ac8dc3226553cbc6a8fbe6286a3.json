{"sha": "f5cbabc1ccfe4ac8dc3226553cbc6a8fbe6286a3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjVjYmFiYzFjY2ZlNGFjOGRjMzIyNjU1M2NiYzZhOGZiZTYyODZhMw==", "commit": {"author": {"name": "Richard Sandiford", "email": "richard.sandiford@linaro.org", "date": "2017-11-06T20:02:35Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2017-11-06T20:02:35Z"}, "message": "[AArch64] Pass number of units to aarch64_simd_vect_par_cnst_half\n\nThis patch passes the number of units to aarch64_simd_vect_par_cnst_half,\nwhich avoids a to_constant () once GET_MODE_NUNITS is variable.\n\n2017-11-06  Richard Sandiford  <richard.sandiford@linaro.org>\n\t    Alan Hayward  <alan.hayward@arm.com>\n\t    David Sherwood  <david.sherwood@arm.com>\n\ngcc/\n\t* config/aarch64/aarch64-protos.h (aarch64_simd_vect_par_cnst_half):\n\tTake the number of units too.\n\t* config/aarch64/aarch64.c (aarch64_simd_vect_par_cnst_half): Likewise.\n\t(aarch64_simd_check_vect_par_cnst_half): Update call accordingly,\n\tbut check for a vector mode before rather than after the call.\n\t* config/aarch64/aarch64-simd.md (aarch64_split_simd_mov<mode>)\n\t(move_hi_quad_<mode>, vec_unpack<su>_hi_<mode>)\n\t(vec_unpack<su>_lo_<mode, vec_widen_<su>mult_lo_<mode>)\n\t(vec_widen_<su>mult_hi_<mode>, vec_unpacks_lo_<mode>)\n\t(vec_unpacks_hi_<mode>, aarch64_saddl2<mode>, aarch64_uaddl2<mode>)\n\t(aarch64_ssubl2<mode>, aarch64_usubl2<mode>, widen_ssum<mode>3)\n\t(widen_usum<mode>3, aarch64_saddw2<mode>, aarch64_uaddw2<mode>)\n\t(aarch64_ssubw2<mode>, aarch64_usubw2<mode>, aarch64_sqdmlal2<mode>)\n\t(aarch64_sqdmlsl2<mode>, aarch64_sqdmlal2_lane<mode>)\n\t(aarch64_sqdmlal2_laneq<mode>, aarch64_sqdmlsl2_lane<mode>)\n\t(aarch64_sqdmlsl2_laneq<mode>, aarch64_sqdmlal2_n<mode>)\n\t(aarch64_sqdmlsl2_n<mode>, aarch64_sqdmull2<mode>)\n\t(aarch64_sqdmull2_lane<mode>, aarch64_sqdmull2_laneq<mode>)\n\t(aarch64_sqdmull2_n<mode>): Update accordingly.\n\nReviewed-by: James Greenhalgh <james.greenhalgh@arm.com>\n\nCo-Authored-By: Alan Hayward <alan.hayward@arm.com>\nCo-Authored-By: David Sherwood <david.sherwood@arm.com>\n\nFrom-SVN: r254468", "tree": {"sha": "1f06d10503a618b208faa93d5d6d1298800f059e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1f06d10503a618b208faa93d5d6d1298800f059e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f5cbabc1ccfe4ac8dc3226553cbc6a8fbe6286a3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f5cbabc1ccfe4ac8dc3226553cbc6a8fbe6286a3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f5cbabc1ccfe4ac8dc3226553cbc6a8fbe6286a3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f5cbabc1ccfe4ac8dc3226553cbc6a8fbe6286a3/comments", "author": null, "committer": null, "parents": [{"sha": "73e3da51639120db26eff9bf39e2339d92a44488", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/73e3da51639120db26eff9bf39e2339d92a44488", "html_url": "https://github.com/Rust-GCC/gccrs/commit/73e3da51639120db26eff9bf39e2339d92a44488"}], "stats": {"total": 103, "additions": 64, "deletions": 39}, "files": [{"sha": "5d11224126d3390532f5f02ec67303ffff382e4d", "filename": "gcc/ChangeLog", "status": "modified", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f5cbabc1ccfe4ac8dc3226553cbc6a8fbe6286a3/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f5cbabc1ccfe4ac8dc3226553cbc6a8fbe6286a3/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=f5cbabc1ccfe4ac8dc3226553cbc6a8fbe6286a3", "patch": "@@ -1,3 +1,27 @@\n+2017-11-06  Richard Sandiford  <richard.sandiford@linaro.org>\n+\t    Alan Hayward  <alan.hayward@arm.com>\n+\t    David Sherwood  <david.sherwood@arm.com>\n+\n+\t* config/aarch64/aarch64-protos.h (aarch64_simd_vect_par_cnst_half):\n+\tTake the number of units too.\n+\t* config/aarch64/aarch64.c (aarch64_simd_vect_par_cnst_half): Likewise.\n+\t(aarch64_simd_check_vect_par_cnst_half): Update call accordingly,\n+\tbut check for a vector mode before rather than after the call.\n+\t* config/aarch64/aarch64-simd.md (aarch64_split_simd_mov<mode>)\n+\t(move_hi_quad_<mode>, vec_unpack<su>_hi_<mode>)\n+\t(vec_unpack<su>_lo_<mode, vec_widen_<su>mult_lo_<mode>)\n+\t(vec_widen_<su>mult_hi_<mode>, vec_unpacks_lo_<mode>)\n+\t(vec_unpacks_hi_<mode>, aarch64_saddl2<mode>, aarch64_uaddl2<mode>)\n+\t(aarch64_ssubl2<mode>, aarch64_usubl2<mode>, widen_ssum<mode>3)\n+\t(widen_usum<mode>3, aarch64_saddw2<mode>, aarch64_uaddw2<mode>)\n+\t(aarch64_ssubw2<mode>, aarch64_usubw2<mode>, aarch64_sqdmlal2<mode>)\n+\t(aarch64_sqdmlsl2<mode>, aarch64_sqdmlal2_lane<mode>)\n+\t(aarch64_sqdmlal2_laneq<mode>, aarch64_sqdmlsl2_lane<mode>)\n+\t(aarch64_sqdmlsl2_laneq<mode>, aarch64_sqdmlal2_n<mode>)\n+\t(aarch64_sqdmlsl2_n<mode>, aarch64_sqdmull2<mode>)\n+\t(aarch64_sqdmull2_lane<mode>, aarch64_sqdmull2_laneq<mode>)\n+\t(aarch64_sqdmull2_n<mode>): Update accordingly.\n+\n 2017-11-06  Richard Sandiford  <richard.sandiford@linaro.org>\n \t    Alan Hayward  <alan.hayward@arm.com>\n \t    David Sherwood  <david.sherwood@arm.com>"}, {"sha": "4fdded76dacbc60c5ca98342620a5de0dead9d0a", "filename": "gcc/config/aarch64/aarch64-protos.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f5cbabc1ccfe4ac8dc3226553cbc6a8fbe6286a3/gcc%2Fconfig%2Faarch64%2Faarch64-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f5cbabc1ccfe4ac8dc3226553cbc6a8fbe6286a3/gcc%2Fconfig%2Faarch64%2Faarch64-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-protos.h?ref=f5cbabc1ccfe4ac8dc3226553cbc6a8fbe6286a3", "patch": "@@ -391,7 +391,7 @@ const char *aarch64_output_move_struct (rtx *operands);\n rtx aarch64_return_addr (int, rtx);\n rtx aarch64_simd_gen_const_vector_dup (machine_mode, HOST_WIDE_INT);\n bool aarch64_simd_mem_operand_p (rtx);\n-rtx aarch64_simd_vect_par_cnst_half (machine_mode, bool);\n+rtx aarch64_simd_vect_par_cnst_half (machine_mode, int, bool);\n rtx aarch64_tls_get_addr (void);\n tree aarch64_fold_builtin (tree, int, tree *, bool);\n unsigned aarch64_dbx_register_number (unsigned);"}, {"sha": "0699e56e6e89fb9f847398d498cf923e9d69bde3", "filename": "gcc/config/aarch64/aarch64-simd.md", "status": "modified", "additions": 31, "deletions": 31, "changes": 62, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f5cbabc1ccfe4ac8dc3226553cbc6a8fbe6286a3/gcc%2Fconfig%2Faarch64%2Faarch64-simd.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f5cbabc1ccfe4ac8dc3226553cbc6a8fbe6286a3/gcc%2Fconfig%2Faarch64%2Faarch64-simd.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-simd.md?ref=f5cbabc1ccfe4ac8dc3226553cbc6a8fbe6286a3", "patch": "@@ -253,8 +253,8 @@\n       {\n         rtx dst_low_part = gen_lowpart (<VHALF>mode, dst);\n         rtx dst_high_part = gen_highpart (<VHALF>mode, dst);\n-        rtx lo = aarch64_simd_vect_par_cnst_half (<MODE>mode, false);\n-        rtx hi = aarch64_simd_vect_par_cnst_half (<MODE>mode, true);\n+\trtx lo = aarch64_simd_vect_par_cnst_half (<MODE>mode, <nunits>, false);\n+\trtx hi = aarch64_simd_vect_par_cnst_half (<MODE>mode, <nunits>, true);\n \n         emit_insn\n           (gen_aarch64_simd_mov_from_<mode>low (dst_low_part, src, lo));\n@@ -1437,7 +1437,7 @@\n   (match_operand:<VHALF> 1 \"register_operand\" \"\")]\n  \"TARGET_SIMD\"\n {\n-  rtx p = aarch64_simd_vect_par_cnst_half (<MODE>mode, false);\n+  rtx p = aarch64_simd_vect_par_cnst_half (<MODE>mode, <nunits>, false);\n   if (BYTES_BIG_ENDIAN)\n     emit_insn (gen_aarch64_simd_move_hi_quad_be_<mode> (operands[0],\n \t\t    operands[1], p));\n@@ -1521,7 +1521,7 @@\n    (ANY_EXTEND:<VWIDE> (match_operand:VQW 1 \"register_operand\"))]\n   \"TARGET_SIMD\"\n   {\n-    rtx p = aarch64_simd_vect_par_cnst_half (<MODE>mode, true);\n+    rtx p = aarch64_simd_vect_par_cnst_half (<MODE>mode, <nunits>, true);\n     emit_insn (gen_aarch64_simd_vec_unpack<su>_hi_<mode> (operands[0],\n \t\t\t\t\t\t\t  operands[1], p));\n     DONE;\n@@ -1533,7 +1533,7 @@\n    (ANY_EXTEND:<VWIDE> (match_operand:VQW 1 \"register_operand\" \"\"))]\n   \"TARGET_SIMD\"\n   {\n-    rtx p = aarch64_simd_vect_par_cnst_half (<MODE>mode, false);\n+    rtx p = aarch64_simd_vect_par_cnst_half (<MODE>mode, <nunits>, false);\n     emit_insn (gen_aarch64_simd_vec_unpack<su>_lo_<mode> (operands[0],\n \t\t\t\t\t\t\t  operands[1], p));\n     DONE;\n@@ -1653,7 +1653,7 @@\n    (ANY_EXTEND:<VWIDE> (match_operand:VQW 2 \"register_operand\" \"\"))]\n  \"TARGET_SIMD\"\n  {\n-   rtx p = aarch64_simd_vect_par_cnst_half (<MODE>mode, false);\n+   rtx p = aarch64_simd_vect_par_cnst_half (<MODE>mode, <nunits>, false);\n    emit_insn (gen_aarch64_simd_vec_<su>mult_lo_<mode> (operands[0],\n \t\t\t\t\t\t       operands[1],\n \t\t\t\t\t\t       operands[2], p));\n@@ -1680,7 +1680,7 @@\n    (ANY_EXTEND:<VWIDE> (match_operand:VQW 2 \"register_operand\" \"\"))]\n  \"TARGET_SIMD\"\n  {\n-   rtx p = aarch64_simd_vect_par_cnst_half (<MODE>mode, true);\n+   rtx p = aarch64_simd_vect_par_cnst_half (<MODE>mode, <nunits>, true);\n    emit_insn (gen_aarch64_simd_vec_<su>mult_hi_<mode> (operands[0],\n \t\t\t\t\t\t       operands[1],\n \t\t\t\t\t\t       operands[2], p));\n@@ -2084,7 +2084,7 @@\n    (match_operand:VQ_HSF 1 \"register_operand\" \"\")]\n   \"TARGET_SIMD\"\n   {\n-    rtx p = aarch64_simd_vect_par_cnst_half (<MODE>mode, false);\n+    rtx p = aarch64_simd_vect_par_cnst_half (<MODE>mode, <nunits>, false);\n     emit_insn (gen_aarch64_simd_vec_unpacks_lo_<mode> (operands[0],\n \t\t\t\t\t\t       operands[1], p));\n     DONE;\n@@ -2107,7 +2107,7 @@\n    (match_operand:VQ_HSF 1 \"register_operand\" \"\")]\n   \"TARGET_SIMD\"\n   {\n-    rtx p = aarch64_simd_vect_par_cnst_half (<MODE>mode, true);\n+    rtx p = aarch64_simd_vect_par_cnst_half (<MODE>mode, <nunits>, true);\n     emit_insn (gen_aarch64_simd_vec_unpacks_lo_<mode> (operands[0],\n \t\t\t\t\t\t       operands[1], p));\n     DONE;\n@@ -3028,7 +3028,7 @@\n    (match_operand:VQW 2 \"register_operand\" \"w\")]\n   \"TARGET_SIMD\"\n {\n-  rtx p = aarch64_simd_vect_par_cnst_half (<MODE>mode, true);\n+  rtx p = aarch64_simd_vect_par_cnst_half (<MODE>mode, <nunits>, true);\n   emit_insn (gen_aarch64_saddl<mode>_hi_internal (operands[0], operands[1],\n                                                   operands[2], p));\n   DONE;\n@@ -3040,7 +3040,7 @@\n    (match_operand:VQW 2 \"register_operand\" \"w\")]\n   \"TARGET_SIMD\"\n {\n-  rtx p = aarch64_simd_vect_par_cnst_half (<MODE>mode, true);\n+  rtx p = aarch64_simd_vect_par_cnst_half (<MODE>mode, <nunits>, true);\n   emit_insn (gen_aarch64_uaddl<mode>_hi_internal (operands[0], operands[1],\n                                                   operands[2], p));\n   DONE;\n@@ -3052,7 +3052,7 @@\n    (match_operand:VQW 2 \"register_operand\" \"w\")]\n   \"TARGET_SIMD\"\n {\n-  rtx p = aarch64_simd_vect_par_cnst_half (<MODE>mode, true);\n+  rtx p = aarch64_simd_vect_par_cnst_half (<MODE>mode, <nunits>, true);\n   emit_insn (gen_aarch64_ssubl<mode>_hi_internal (operands[0], operands[1],\n \t\t\t\t\t\toperands[2], p));\n   DONE;\n@@ -3064,7 +3064,7 @@\n    (match_operand:VQW 2 \"register_operand\" \"w\")]\n   \"TARGET_SIMD\"\n {\n-  rtx p = aarch64_simd_vect_par_cnst_half (<MODE>mode, true);\n+  rtx p = aarch64_simd_vect_par_cnst_half (<MODE>mode, <nunits>, true);\n   emit_insn (gen_aarch64_usubl<mode>_hi_internal (operands[0], operands[1],\n \t\t\t\t\t\toperands[2], p));\n   DONE;\n@@ -3090,7 +3090,7 @@\n \t\t      (match_operand:<VDBLW> 2 \"register_operand\" \"\")))]\n   \"TARGET_SIMD\"\n   {\n-    rtx p = aarch64_simd_vect_par_cnst_half (<MODE>mode, false);\n+    rtx p = aarch64_simd_vect_par_cnst_half (<MODE>mode, <nunits>, false);\n     rtx temp = gen_reg_rtx (GET_MODE (operands[0]));\n \n     emit_insn (gen_aarch64_saddw<mode>_internal (temp, operands[2],\n@@ -3118,7 +3118,7 @@\n \t\t      (match_operand:<VDBLW> 2 \"register_operand\" \"\")))]\n   \"TARGET_SIMD\"\n   {\n-    rtx p = aarch64_simd_vect_par_cnst_half (<MODE>mode, false);\n+    rtx p = aarch64_simd_vect_par_cnst_half (<MODE>mode, <nunits>, false);\n     rtx temp = gen_reg_rtx (GET_MODE (operands[0]));\n \n     emit_insn (gen_aarch64_uaddw<mode>_internal (temp, operands[2],\n@@ -3179,7 +3179,7 @@\n    (match_operand:VQW 2 \"register_operand\" \"w\")]\n   \"TARGET_SIMD\"\n {\n-  rtx p = aarch64_simd_vect_par_cnst_half (<MODE>mode, true);\n+  rtx p = aarch64_simd_vect_par_cnst_half (<MODE>mode, <nunits>, true);\n   emit_insn (gen_aarch64_saddw2<mode>_internal (operands[0], operands[1],\n \t\t\t\t\t\toperands[2], p));\n   DONE;\n@@ -3191,7 +3191,7 @@\n    (match_operand:VQW 2 \"register_operand\" \"w\")]\n   \"TARGET_SIMD\"\n {\n-  rtx p = aarch64_simd_vect_par_cnst_half (<MODE>mode, true);\n+  rtx p = aarch64_simd_vect_par_cnst_half (<MODE>mode, <nunits>, true);\n   emit_insn (gen_aarch64_uaddw2<mode>_internal (operands[0], operands[1],\n \t\t\t\t\t\toperands[2], p));\n   DONE;\n@@ -3204,7 +3204,7 @@\n    (match_operand:VQW 2 \"register_operand\" \"w\")]\n   \"TARGET_SIMD\"\n {\n-  rtx p = aarch64_simd_vect_par_cnst_half (<MODE>mode, true);\n+  rtx p = aarch64_simd_vect_par_cnst_half (<MODE>mode, <nunits>, true);\n   emit_insn (gen_aarch64_ssubw2<mode>_internal (operands[0], operands[1],\n \t\t\t\t\t\toperands[2], p));\n   DONE;\n@@ -3216,7 +3216,7 @@\n    (match_operand:VQW 2 \"register_operand\" \"w\")]\n   \"TARGET_SIMD\"\n {\n-  rtx p = aarch64_simd_vect_par_cnst_half (<MODE>mode, true);\n+  rtx p = aarch64_simd_vect_par_cnst_half (<MODE>mode, <nunits>, true);\n   emit_insn (gen_aarch64_usubw2<mode>_internal (operands[0], operands[1],\n \t\t\t\t\t\toperands[2], p));\n   DONE;\n@@ -3736,7 +3736,7 @@\n    (match_operand:VQ_HSI 3 \"register_operand\" \"w\")]\n   \"TARGET_SIMD\"\n {\n-  rtx p = aarch64_simd_vect_par_cnst_half (<MODE>mode, true);\n+  rtx p = aarch64_simd_vect_par_cnst_half (<MODE>mode, <nunits>, true);\n   emit_insn (gen_aarch64_sqdmlal2<mode>_internal (operands[0], operands[1],\n \t\t\t\t\t\t  operands[2], operands[3], p));\n   DONE;\n@@ -3749,7 +3749,7 @@\n    (match_operand:VQ_HSI 3 \"register_operand\" \"w\")]\n   \"TARGET_SIMD\"\n {\n-  rtx p = aarch64_simd_vect_par_cnst_half (<MODE>mode, true);\n+  rtx p = aarch64_simd_vect_par_cnst_half (<MODE>mode, <nunits>, true);\n   emit_insn (gen_aarch64_sqdmlsl2<mode>_internal (operands[0], operands[1],\n \t\t\t\t\t\t  operands[2], operands[3], p));\n   DONE;\n@@ -3817,7 +3817,7 @@\n    (match_operand:SI 4 \"immediate_operand\" \"i\")]\n   \"TARGET_SIMD\"\n {\n-  rtx p = aarch64_simd_vect_par_cnst_half (<MODE>mode, true);\n+  rtx p = aarch64_simd_vect_par_cnst_half (<MODE>mode, <nunits>, true);\n   emit_insn (gen_aarch64_sqdmlal2_lane<mode>_internal (operands[0], operands[1],\n \t\t\t\t\t\t       operands[2], operands[3],\n \t\t\t\t\t\t       operands[4], p));\n@@ -3832,7 +3832,7 @@\n    (match_operand:SI 4 \"immediate_operand\" \"i\")]\n   \"TARGET_SIMD\"\n {\n-  rtx p = aarch64_simd_vect_par_cnst_half (<MODE>mode, true);\n+  rtx p = aarch64_simd_vect_par_cnst_half (<MODE>mode, <nunits>, true);\n   emit_insn (gen_aarch64_sqdmlal2_laneq<mode>_internal (operands[0], operands[1],\n \t\t\t\t\t\t       operands[2], operands[3],\n \t\t\t\t\t\t       operands[4], p));\n@@ -3847,7 +3847,7 @@\n    (match_operand:SI 4 \"immediate_operand\" \"i\")]\n   \"TARGET_SIMD\"\n {\n-  rtx p = aarch64_simd_vect_par_cnst_half (<MODE>mode, true);\n+  rtx p = aarch64_simd_vect_par_cnst_half (<MODE>mode, <nunits>, true);\n   emit_insn (gen_aarch64_sqdmlsl2_lane<mode>_internal (operands[0], operands[1],\n \t\t\t\t\t\t       operands[2], operands[3],\n \t\t\t\t\t\t       operands[4], p));\n@@ -3862,7 +3862,7 @@\n    (match_operand:SI 4 \"immediate_operand\" \"i\")]\n   \"TARGET_SIMD\"\n {\n-  rtx p = aarch64_simd_vect_par_cnst_half (<MODE>mode, true);\n+  rtx p = aarch64_simd_vect_par_cnst_half (<MODE>mode, <nunits>, true);\n   emit_insn (gen_aarch64_sqdmlsl2_laneq<mode>_internal (operands[0], operands[1],\n \t\t\t\t\t\t       operands[2], operands[3],\n \t\t\t\t\t\t       operands[4], p));\n@@ -3895,7 +3895,7 @@\n    (match_operand:<VEL> 3 \"register_operand\" \"w\")]\n   \"TARGET_SIMD\"\n {\n-  rtx p = aarch64_simd_vect_par_cnst_half (<MODE>mode, true);\n+  rtx p = aarch64_simd_vect_par_cnst_half (<MODE>mode, <nunits>, true);\n   emit_insn (gen_aarch64_sqdmlal2_n<mode>_internal (operands[0], operands[1],\n \t\t\t\t\t\t    operands[2], operands[3],\n \t\t\t\t\t\t    p));\n@@ -3909,7 +3909,7 @@\n    (match_operand:<VEL> 3 \"register_operand\" \"w\")]\n   \"TARGET_SIMD\"\n {\n-  rtx p = aarch64_simd_vect_par_cnst_half (<MODE>mode, true);\n+  rtx p = aarch64_simd_vect_par_cnst_half (<MODE>mode, <nunits>, true);\n   emit_insn (gen_aarch64_sqdmlsl2_n<mode>_internal (operands[0], operands[1],\n \t\t\t\t\t\t    operands[2], operands[3],\n \t\t\t\t\t\t    p));\n@@ -4063,7 +4063,7 @@\n    (match_operand:VQ_HSI 2 \"register_operand\" \"w\")]\n   \"TARGET_SIMD\"\n {\n-  rtx p = aarch64_simd_vect_par_cnst_half (<MODE>mode, true);\n+  rtx p = aarch64_simd_vect_par_cnst_half (<MODE>mode, <nunits>, true);\n   emit_insn (gen_aarch64_sqdmull2<mode>_internal (operands[0], operands[1],\n \t\t\t\t\t\t  operands[2], p));\n   DONE;\n@@ -4124,7 +4124,7 @@\n    (match_operand:SI 3 \"immediate_operand\" \"i\")]\n   \"TARGET_SIMD\"\n {\n-  rtx p = aarch64_simd_vect_par_cnst_half (<MODE>mode, true);\n+  rtx p = aarch64_simd_vect_par_cnst_half (<MODE>mode, <nunits>, true);\n   emit_insn (gen_aarch64_sqdmull2_lane<mode>_internal (operands[0], operands[1],\n \t\t\t\t\t\t       operands[2], operands[3],\n \t\t\t\t\t\t       p));\n@@ -4138,7 +4138,7 @@\n    (match_operand:SI 3 \"immediate_operand\" \"i\")]\n   \"TARGET_SIMD\"\n {\n-  rtx p = aarch64_simd_vect_par_cnst_half (<MODE>mode, true);\n+  rtx p = aarch64_simd_vect_par_cnst_half (<MODE>mode, <nunits>, true);\n   emit_insn (gen_aarch64_sqdmull2_laneq<mode>_internal (operands[0], operands[1],\n \t\t\t\t\t\t       operands[2], operands[3],\n \t\t\t\t\t\t       p));\n@@ -4171,7 +4171,7 @@\n    (match_operand:<VEL> 2 \"register_operand\" \"w\")]\n   \"TARGET_SIMD\"\n {\n-  rtx p = aarch64_simd_vect_par_cnst_half (<MODE>mode, true);\n+  rtx p = aarch64_simd_vect_par_cnst_half (<MODE>mode, <nunits>, true);\n   emit_insn (gen_aarch64_sqdmull2_n<mode>_internal (operands[0], operands[1],\n \t\t\t\t\t\t    operands[2], p));\n   DONE;"}, {"sha": "d209f816663aa64a0715e343e78ff5d1d3cff146", "filename": "gcc/config/aarch64/aarch64.c", "status": "modified", "additions": 8, "deletions": 7, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f5cbabc1ccfe4ac8dc3226553cbc6a8fbe6286a3/gcc%2Fconfig%2Faarch64%2Faarch64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f5cbabc1ccfe4ac8dc3226553cbc6a8fbe6286a3/gcc%2Fconfig%2Faarch64%2Faarch64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64.c?ref=f5cbabc1ccfe4ac8dc3226553cbc6a8fbe6286a3", "patch": "@@ -11757,12 +11757,12 @@ Architecture    3   2   1   0           3   2   1   0\n \n Low Mask:         { 2, 3 }                { 0, 1 }\n High Mask:        { 0, 1 }                { 2, 3 }\n-*/\n+\n+   MODE Is the mode of the vector and NUNITS is the number of units in it.  */\n \n rtx\n-aarch64_simd_vect_par_cnst_half (machine_mode mode, bool high)\n+aarch64_simd_vect_par_cnst_half (machine_mode mode, int nunits, bool high)\n {\n-  int nunits = GET_MODE_NUNITS (mode);\n   rtvec v = rtvec_alloc (nunits / 2);\n   int high_base = nunits / 2;\n   int low_base = 0;\n@@ -11791,14 +11791,15 @@ bool\n aarch64_simd_check_vect_par_cnst_half (rtx op, machine_mode mode,\n \t\t\t\t       bool high)\n {\n-  rtx ideal = aarch64_simd_vect_par_cnst_half (mode, high);\n+  if (!VECTOR_MODE_P (mode))\n+    return false;\n+\n+  rtx ideal = aarch64_simd_vect_par_cnst_half (mode, GET_MODE_NUNITS (mode),\n+\t\t\t\t\t       high);\n   HOST_WIDE_INT count_op = XVECLEN (op, 0);\n   HOST_WIDE_INT count_ideal = XVECLEN (ideal, 0);\n   int i = 0;\n \n-  if (!VECTOR_MODE_P (mode))\n-    return false;\n-\n   if (count_op != count_ideal)\n     return false;\n "}]}