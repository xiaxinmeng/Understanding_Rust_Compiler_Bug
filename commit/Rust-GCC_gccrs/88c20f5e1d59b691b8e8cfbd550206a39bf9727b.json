{"sha": "88c20f5e1d59b691b8e8cfbd550206a39bf9727b", "node_id": "C_kwDOANBUbNoAKDg4YzIwZjVlMWQ1OWI2OTFiOGU4Y2ZiZDU1MDIwNmEzOWJmOTcyN2I", "commit": {"author": {"name": "Arthur Cohen", "email": "arthur.cohen@embecosm.com", "date": "2022-04-29T11:48:34Z"}, "committer": {"name": "Arthur Cohen", "email": "arthur.cohen@embecosm.com", "date": "2022-05-05T12:07:36Z"}, "message": "privacy: Add base for resolving SimplePaths to Modules\n\nThis also fixes the missing kind in HIR::Visibility.\nHaving both `pub` and `pub restricted` as a single variant in the\nHIR::Visibility::Kind enum was a mistake, as it cause the path resolver to\nbe triggered for `pub` visibilities which do not refer to any paths.\n\nFinally, erroneous calls to Visibility::create_error() are removed.\nThis caused a lot of ICEs now that the Visibility lowering logic is\nfixed", "tree": {"sha": "49ebe0980c3753cdba5edb8daa344ac11804820f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/49ebe0980c3753cdba5edb8daa344ac11804820f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/88c20f5e1d59b691b8e8cfbd550206a39bf9727b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/88c20f5e1d59b691b8e8cfbd550206a39bf9727b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/88c20f5e1d59b691b8e8cfbd550206a39bf9727b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/88c20f5e1d59b691b8e8cfbd550206a39bf9727b/comments", "author": {"login": "CohenArthur", "id": 43524065, "node_id": "MDQ6VXNlcjQzNTI0MDY1", "avatar_url": "https://avatars.githubusercontent.com/u/43524065?v=4", "gravatar_id": "", "url": "https://api.github.com/users/CohenArthur", "html_url": "https://github.com/CohenArthur", "followers_url": "https://api.github.com/users/CohenArthur/followers", "following_url": "https://api.github.com/users/CohenArthur/following{/other_user}", "gists_url": "https://api.github.com/users/CohenArthur/gists{/gist_id}", "starred_url": "https://api.github.com/users/CohenArthur/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/CohenArthur/subscriptions", "organizations_url": "https://api.github.com/users/CohenArthur/orgs", "repos_url": "https://api.github.com/users/CohenArthur/repos", "events_url": "https://api.github.com/users/CohenArthur/events{/privacy}", "received_events_url": "https://api.github.com/users/CohenArthur/received_events", "type": "User", "site_admin": false}, "committer": {"login": "CohenArthur", "id": 43524065, "node_id": "MDQ6VXNlcjQzNTI0MDY1", "avatar_url": "https://avatars.githubusercontent.com/u/43524065?v=4", "gravatar_id": "", "url": "https://api.github.com/users/CohenArthur", "html_url": "https://github.com/CohenArthur", "followers_url": "https://api.github.com/users/CohenArthur/followers", "following_url": "https://api.github.com/users/CohenArthur/following{/other_user}", "gists_url": "https://api.github.com/users/CohenArthur/gists{/gist_id}", "starred_url": "https://api.github.com/users/CohenArthur/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/CohenArthur/subscriptions", "organizations_url": "https://api.github.com/users/CohenArthur/orgs", "repos_url": "https://api.github.com/users/CohenArthur/repos", "events_url": "https://api.github.com/users/CohenArthur/events{/privacy}", "received_events_url": "https://api.github.com/users/CohenArthur/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "52b5286a69d86a36e279bc636cc41cbdd6795dee", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/52b5286a69d86a36e279bc636cc41cbdd6795dee", "html_url": "https://github.com/Rust-GCC/gccrs/commit/52b5286a69d86a36e279bc636cc41cbdd6795dee"}], "stats": {"total": 130, "additions": 97, "deletions": 33}, "files": [{"sha": "d861207ebe8da76e162473c2c0c8d55bb035a37f", "filename": "gcc/rust/hir/rust-ast-lower.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/88c20f5e1d59b691b8e8cfbd550206a39bf9727b/gcc%2Frust%2Fhir%2Frust-ast-lower.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/88c20f5e1d59b691b8e8cfbd550206a39bf9727b/gcc%2Frust%2Fhir%2Frust-ast-lower.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fhir%2Frust-ast-lower.cc?ref=88c20f5e1d59b691b8e8cfbd550206a39bf9727b", "patch": "@@ -46,7 +46,7 @@ translate_visibility (const AST::Visibility &vis)\n     case AST::Visibility::PUB_CRATE:\n     case AST::Visibility::PUB_SUPER:\n     case AST::Visibility::PUB_IN_PATH:\n-      return Visibility (Visibility::VisType::PUBLIC,\n+      return Visibility (Visibility::VisType::RESTRICTED,\n \t\t\t ASTLoweringSimplePath::translate (vis.get_path ()));\n       break;\n     }"}, {"sha": "109a5c238f23034b5b4ea20d79cd08a908be4c8d", "filename": "gcc/rust/hir/tree/rust-hir-item.h", "status": "modified", "additions": 12, "deletions": 2, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/88c20f5e1d59b691b8e8cfbd550206a39bf9727b/gcc%2Frust%2Fhir%2Ftree%2Frust-hir-item.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/88c20f5e1d59b691b8e8cfbd550206a39bf9727b/gcc%2Frust%2Fhir%2Ftree%2Frust-hir-item.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fhir%2Ftree%2Frust-hir-item.h?ref=88c20f5e1d59b691b8e8cfbd550206a39bf9727b", "patch": "@@ -557,6 +557,7 @@ struct Visibility\n   {\n     PRIVATE,\n     PUBLIC,\n+    RESTRICTED,\n     ERROR,\n   };\n \n@@ -568,7 +569,7 @@ struct Visibility\n \n public:\n   Visibility (VisType vis_type,\n-\t      HIR::SimplePath path = HIR::SimplePath::create_error ())\n+\t      HIR::SimplePath path = HIR::SimplePath::create_empty ())\n     : vis_type (vis_type), path (std::move (path))\n   {}\n \n@@ -578,14 +579,23 @@ struct Visibility\n   // Does the current visibility refer to a simple `pub <item>` entirely public\n   bool is_public () const { return vis_type == PUBLIC; }\n \n+  // Is the current visibility public restricted to a certain path\n+  bool is_restricted () const { return vis_type == RESTRICTED; }\n+\n   // Creates an error visibility.\n   static Visibility create_error ()\n   {\n-    return Visibility (ERROR, HIR::SimplePath::create_error ());\n+    return Visibility (ERROR, HIR::SimplePath::create_empty ());\n   }\n \n   VisType get_vis_type () const { return vis_type; }\n \n+  const HIR::SimplePath &get_path () const\n+  {\n+    rust_assert (!is_error ());\n+    return path;\n+  }\n+\n   std::string as_string () const;\n };\n "}, {"sha": "b18bf1dde22a07ffe436a3b8f5f930ea507057c9", "filename": "gcc/rust/hir/tree/rust-hir-path.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/88c20f5e1d59b691b8e8cfbd550206a39bf9727b/gcc%2Frust%2Fhir%2Ftree%2Frust-hir-path.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/88c20f5e1d59b691b8e8cfbd550206a39bf9727b/gcc%2Frust%2Fhir%2Ftree%2Frust-hir-path.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fhir%2Ftree%2Frust-hir-path.h?ref=88c20f5e1d59b691b8e8cfbd550206a39bf9727b", "patch": "@@ -969,7 +969,7 @@ class SimplePath\n     : segments (std::move (segments)), mappings (mappings), locus (locus)\n   {}\n \n-  static HIR::SimplePath create_error ()\n+  static HIR::SimplePath create_empty ()\n   {\n     return HIR::SimplePath ({}, Analysis::NodeMapping::get_error (),\n \t\t\t    Location ());"}, {"sha": "e76bdd8b524de099e766463148c9ca2164d4ddce", "filename": "gcc/rust/parse/rust-parse-impl.h", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/88c20f5e1d59b691b8e8cfbd550206a39bf9727b/gcc%2Frust%2Fparse%2Frust-parse-impl.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/88c20f5e1d59b691b8e8cfbd550206a39bf9727b/gcc%2Frust%2Fparse%2Frust-parse-impl.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fparse%2Frust-parse-impl.h?ref=88c20f5e1d59b691b8e8cfbd550206a39bf9727b", "patch": "@@ -5402,7 +5402,7 @@ Parser<ManagedTokenSource>::parse_inherent_impl_item ()\n     case FN_TOK:\n       // function or method\n       return parse_inherent_impl_function_or_method (\n-\tAST::Visibility::create_error (), std::move (outer_attrs));\n+\tAST::Visibility::create_private (), std::move (outer_attrs));\n     case CONST:\n       /* lookahead to resolve production - could be function/method or const\n        * item */\n@@ -5412,13 +5412,13 @@ Parser<ManagedTokenSource>::parse_inherent_impl_item ()\n \t{\n \tcase IDENTIFIER:\n \tcase UNDERSCORE:\n-\t  return parse_const_item (AST::Visibility::create_error (),\n+\t  return parse_const_item (AST::Visibility::create_private (),\n \t\t\t\t   std::move (outer_attrs));\n \tcase UNSAFE:\n \tcase EXTERN_TOK:\n \tcase FN_TOK:\n \t  return parse_inherent_impl_function_or_method (\n-\t    AST::Visibility::create_error (), std::move (outer_attrs));\n+\t    AST::Visibility::create_private (), std::move (outer_attrs));\n \tdefault:\n \t  add_error (Error (t->get_locus (),\n \t\t\t    \"unexpected token %qs in some sort of const item \"\n@@ -5572,7 +5572,7 @@ Parser<ManagedTokenSource>::parse_trait_impl_item ()\n       // these seem to be SimplePath tokens, so this is a macro invocation semi\n       return parse_macro_invocation_semi (std::move (outer_attrs));\n     case TYPE:\n-      return parse_type_alias (AST::Visibility::create_error (),\n+      return parse_type_alias (AST::Visibility::create_private (),\n \t\t\t       std::move (outer_attrs));\n       case PUB: {\n \t// visibility, so not a macro invocation semi - must be constant,\n@@ -5631,7 +5631,7 @@ Parser<ManagedTokenSource>::parse_trait_impl_item ()\n     case FN_TOK:\n       // function or method\n       return parse_trait_impl_function_or_method (\n-\tAST::Visibility::create_error (), std::move (outer_attrs));\n+\tAST::Visibility::create_private (), std::move (outer_attrs));\n     case CONST:\n       // lookahead to resolve production - could be function/method or const\n       // item\n@@ -5641,13 +5641,13 @@ Parser<ManagedTokenSource>::parse_trait_impl_item ()\n \t{\n \tcase IDENTIFIER:\n \tcase UNDERSCORE:\n-\t  return parse_const_item (AST::Visibility::create_error (),\n+\t  return parse_const_item (AST::Visibility::create_private (),\n \t\t\t\t   std::move (outer_attrs));\n \tcase UNSAFE:\n \tcase EXTERN_TOK:\n \tcase FN_TOK:\n \t  return parse_trait_impl_function_or_method (\n-\t    AST::Visibility::create_error (), std::move (outer_attrs));\n+\t    AST::Visibility::create_private (), std::move (outer_attrs));\n \tdefault:\n \t  add_error (Error (\n \t    t->get_locus (),"}, {"sha": "ed90c7c38d3b536895129c79e629e5903d47e8f2", "filename": "gcc/rust/privacy/rust-privacy-check.cc", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/88c20f5e1d59b691b8e8cfbd550206a39bf9727b/gcc%2Frust%2Fprivacy%2Frust-privacy-check.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/88c20f5e1d59b691b8e8cfbd550206a39bf9727b/gcc%2Frust%2Fprivacy%2Frust-privacy-check.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fprivacy%2Frust-privacy-check.cc?ref=88c20f5e1d59b691b8e8cfbd550206a39bf9727b", "patch": "@@ -20,6 +20,7 @@\n #include \"rust-reachability.h\"\n #include \"rust-hir-type-check.h\"\n #include \"rust-hir-map.h\"\n+#include \"rust-name-resolver.h\"\n #include \"rust-visibility-resolver.h\"\n \n extern bool\n@@ -32,9 +33,10 @@ Resolver::resolve (HIR::Crate &crate)\n {\n   PrivacyContext ctx;\n   auto mappings = Analysis::Mappings::get ();\n+  auto resolver = Rust::Resolver::Resolver::get ();\n \n-  auto resolver = VisibilityResolver (*mappings);\n-  resolver.go (crate);\n+  auto visibility_resolver = VisibilityResolver (*mappings, *resolver);\n+  visibility_resolver.go (crate);\n \n   auto ty_ctx = ::Rust::Resolver::TypeCheckContext::get ();\n   auto visitor = ReachabilityVisitor (ctx, *ty_ctx);"}, {"sha": "a47992f778c34a823a5b906fa3732138fbe1e333", "filename": "gcc/rust/privacy/rust-privacy-common.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/88c20f5e1d59b691b8e8cfbd550206a39bf9727b/gcc%2Frust%2Fprivacy%2Frust-privacy-common.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/88c20f5e1d59b691b8e8cfbd550206a39bf9727b/gcc%2Frust%2Fprivacy%2Frust-privacy-common.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fprivacy%2Frust-privacy-common.h?ref=88c20f5e1d59b691b8e8cfbd550206a39bf9727b", "patch": "@@ -51,6 +51,7 @@ class ModuleVisibility\n   Type get_kind () const { return kind; }\n \n   const DefId &get_module_id () const { return module_id; }\n+  DefId &get_module_id () { return module_id; }\n \n private:\n   ModuleVisibility (Type kind, DefId module_id)"}, {"sha": "d2e75c257cbe53c15edfd1153e914609bd5dd228", "filename": "gcc/rust/privacy/rust-visibility-resolver.cc", "status": "modified", "additions": 57, "deletions": 13, "changes": 70, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/88c20f5e1d59b691b8e8cfbd550206a39bf9727b/gcc%2Frust%2Fprivacy%2Frust-visibility-resolver.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/88c20f5e1d59b691b8e8cfbd550206a39bf9727b/gcc%2Frust%2Fprivacy%2Frust-visibility-resolver.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fprivacy%2Frust-visibility-resolver.cc?ref=88c20f5e1d59b691b8e8cfbd550206a39bf9727b", "patch": "@@ -24,8 +24,9 @@\n namespace Rust {\n namespace Privacy {\n \n-VisibilityResolver::VisibilityResolver (Analysis::Mappings &mappings)\n-  : mappings (mappings)\n+VisibilityResolver::VisibilityResolver (Analysis::Mappings &mappings,\n+\t\t\t\t\tResolver::Resolver &resolver)\n+  : mappings (mappings), resolver (resolver)\n {}\n \n void\n@@ -45,16 +46,56 @@ VisibilityResolver::go (HIR::Crate &crate)\n     }\n }\n \n-// FIXME: At this point in the pipeline, we should not be dealing with\n-// `AST::SimplePath`s anymore! We need to be dealing with their \"resolved\n-// counterpart\", so probably a NodeId/HirId/DefId.\n+bool\n+VisibilityResolver::resolve_module_path (const HIR::SimplePath &restriction,\n+\t\t\t\t\t DefId &id)\n+{\n+  // We need, from the restriction, to figure out the actual Module it\n+  // belongs to.\n+\n+  NodeId ast_node_id = restriction.get_mappings ().get_nodeid ();\n+\n+  auto invalid_path\n+    = Error (restriction.get_locus (),\n+\t     \"cannot use non-module path as privacy restrictor\");\n+\n+  NodeId ref_node_id = UNKNOWN_NODEID;\n+  if (!resolver.lookup_resolved_name (ast_node_id, &ref_node_id))\n+    {\n+      invalid_path.emit_error ();\n+      return false;\n+    }\n+  // FIXME: Add a hint here if we can find the path in another scope, such as\n+  // a type or something else\n+  // TODO: For the hint, can we point to the original item's definition if\n+  // present?\n+\n+  Resolver::Definition def;\n+  rust_assert (resolver.lookup_definition (ref_node_id, &def));\n+\n+  // FIXME: Is that what we want?\n+  ref_node_id = def.parent;\n \n-// static bool\n-// resolve_module_path (std::vector<HIR::Module> &module_stack,\n-// \t\t     const AST::SimplePath &restriction, DefId &id)\n-// {\n-//   return false;\n-// }\n+  HirId ref;\n+  rust_assert (\n+    mappings.lookup_node_to_hir (restriction.get_mappings ().get_crate_num (),\n+\t\t\t\t ref_node_id, &ref));\n+\n+  auto module\n+    = mappings.lookup_module (restriction.get_mappings ().get_crate_num (),\n+\t\t\t      ref);\n+\n+  if (!module)\n+    {\n+      invalid_path.emit_error ();\n+      return false;\n+    }\n+\n+  // Fill in the resolved `DefId`\n+  id = module->get_mappings ().get_defid ();\n+\n+  return true;\n+}\n \n bool\n VisibilityResolver::resolve_visibility (const HIR::Visibility &visibility,\n@@ -66,11 +107,14 @@ VisibilityResolver::resolve_visibility (const HIR::Visibility &visibility,\n       to_resolve = ModuleVisibility::create_restricted (peek_module ());\n       return true;\n     case HIR::Visibility::PUBLIC:\n-      // FIXME: We need to handle the restricted path here\n-      // FIXME: We also need to handle 2015 vs 2018 edition conflicts\n       to_resolve = ModuleVisibility::create_public ();\n       return true;\n+    case HIR::Visibility::RESTRICTED:\n+      to_resolve = ModuleVisibility::create_public ();\n+      return resolve_module_path (visibility.get_path (),\n+\t\t\t\t  to_resolve.get_module_id ());\n     default:\n+      gcc_unreachable ();\n       return false;\n     }\n }"}, {"sha": "89e6e2bdc8a13cd9a770f629ba1b6c11bb9a0a4f", "filename": "gcc/rust/privacy/rust-visibility-resolver.h", "status": "modified", "additions": 12, "deletions": 4, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/88c20f5e1d59b691b8e8cfbd550206a39bf9727b/gcc%2Frust%2Fprivacy%2Frust-visibility-resolver.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/88c20f5e1d59b691b8e8cfbd550206a39bf9727b/gcc%2Frust%2Fprivacy%2Frust-visibility-resolver.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fprivacy%2Frust-visibility-resolver.h?ref=88c20f5e1d59b691b8e8cfbd550206a39bf9727b", "patch": "@@ -24,6 +24,7 @@\n #include \"rust-hir-stmt.h\"\n #include \"rust-hir-item.h\"\n #include \"rust-hir-map.h\"\n+#include \"rust-name-resolver.h\"\n #include \"rust-hir-visitor.h\"\n \n namespace Rust {\n@@ -32,13 +33,20 @@ namespace Privacy {\n class VisibilityResolver : public HIR::HIRVisItemVisitor\n {\n public:\n-  VisibilityResolver (Analysis::Mappings &mappings);\n+  VisibilityResolver (Analysis::Mappings &mappings,\n+\t\t      Rust::Resolver::Resolver &resolver);\n \n   /**\n    * Perform visibility resolving on an entire crate\n    */\n   void go (HIR::Crate &crate);\n \n+  /**\n+   * Resolve a path to the module it refers\n+   */\n+  bool resolve_module_path (const HIR::SimplePath &restriction,\n+\t\t\t    DefId &to_resolve);\n+\n   /**\n    * Resolve the visibility of an item to its ModuleVisibility. This function\n    * emits errors if necessary. The contents of the to_resolve parameter will be\n@@ -84,11 +92,11 @@ class VisibilityResolver : public HIR::HIRVisItemVisitor\n   virtual void visit (HIR::ExternBlock &block);\n \n private:\n-  /* Mappings to insert visibilities into */\n-  Analysis::Mappings &mappings;\n-\n   /* Stack of modules visited by this visitor */\n   std::vector<DefId> module_stack;\n+\n+  Analysis::Mappings &mappings;\n+  Rust::Resolver::Resolver &resolver;\n };\n \n } // namespace Privacy"}, {"sha": "9bda9682403238c7d5ed528d95c806badd81a68f", "filename": "gcc/testsuite/rust/compile/pub_restricted_1.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/88c20f5e1d59b691b8e8cfbd550206a39bf9727b/gcc%2Ftestsuite%2Frust%2Fcompile%2Fpub_restricted_1.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/88c20f5e1d59b691b8e8cfbd550206a39bf9727b/gcc%2Ftestsuite%2Frust%2Fcompile%2Fpub_restricted_1.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fcompile%2Fpub_restricted_1.rs?ref=88c20f5e1d59b691b8e8cfbd550206a39bf9727b", "patch": "@@ -1,12 +1,11 @@\n pub mod foo {\n     pub mod bar {\n         pub fn baz() {}\n+\n+        pub(in foo::bar) struct A0;\n     }\n }\n \n-// this is invalid Rust: We just want to make sure the paths get resolved properly\n-pub(in foo::bar::baz) struct A0;\n-\n pub(in foo::fah::baz) struct A1; // { dg-error \"cannot find simple path segment .fah.\" }\n pub(in fro::bulator::saindoux) struct A2; // { dg-error \"cannot find simple path segment .fro.\" }\n pub(in foo::bar::saindoux) struct A3; // { dg-error \"cannot find simple path segment .saindoux.\" }"}]}