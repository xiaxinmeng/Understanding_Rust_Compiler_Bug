{"sha": "ac7e839c63bfb19d83e6c81aee68c4435c1915c2", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWM3ZTgzOWM2M2JmYjE5ZDgzZTZjODFhZWU2OGM0NDM1YzE5MTVjMg==", "commit": {"author": {"name": "Alan Modra", "email": "amodra@bigpond.net.au", "date": "2005-04-21T15:36:01Z"}, "committer": {"name": "Fariborz Jahanian", "email": "fjahanian@gcc.gnu.org", "date": "2005-04-21T15:36:01Z"}, "message": "Fix for latent bug in splitting arguments exposed by rs6000_arg_partial_bytes rewrite.\n\nFix for latent bug in splitting arguments exposed by\nrs6000_arg_partial_bytes rewrite.\nOked by Richard Henderson.\n\nCo-Authored-By: Fariborz Jahanian <fjahanian@apple.com>\n\nFrom-SVN: r98507", "tree": {"sha": "2dfc5e3a6714299a3a9c32fe836f4a5b8d767a57", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2dfc5e3a6714299a3a9c32fe836f4a5b8d767a57"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ac7e839c63bfb19d83e6c81aee68c4435c1915c2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ac7e839c63bfb19d83e6c81aee68c4435c1915c2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ac7e839c63bfb19d83e6c81aee68c4435c1915c2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ac7e839c63bfb19d83e6c81aee68c4435c1915c2/comments", "author": null, "committer": null, "parents": [{"sha": "452ff12a5abd0007509eee1a5d98448841f35923", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/452ff12a5abd0007509eee1a5d98448841f35923", "html_url": "https://github.com/Rust-GCC/gccrs/commit/452ff12a5abd0007509eee1a5d98448841f35923"}], "stats": {"total": 19, "additions": 13, "deletions": 6}, "files": [{"sha": "7ab26e5894a3fba1ec9ba1421b0bd0603b7f2329", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ac7e839c63bfb19d83e6c81aee68c4435c1915c2/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ac7e839c63bfb19d83e6c81aee68c4435c1915c2/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=ac7e839c63bfb19d83e6c81aee68c4435c1915c2", "patch": "@@ -1,3 +1,11 @@\n+2005-04-21 Alan Modra  <amodra@bigpond.net.au>\n+           Fariborz Jahanian <fjahanian@apple.com>\n+\n+        * config/rs6000/rs6000.c (rs6000_arg_partial_bytes): Fix size of\n+        portion of argument passed in fpr.\n+        *expr.c (emit_push_insn): Fix computation of 'offset' used to\n+        decide on partial argument save on stack.\n+\n 2005-04-21  Kazu Hirata  <kazu@cs.umass.edu>\n \n \t* config/sparc/predicates.md, config/sparc/sparc.md: Fix"}, {"sha": "e3ef7452e4c592e6bcb8ac8eb61b7f5c9885a7a5", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ac7e839c63bfb19d83e6c81aee68c4435c1915c2/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ac7e839c63bfb19d83e6c81aee68c4435c1915c2/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=ac7e839c63bfb19d83e6c81aee68c4435c1915c2", "patch": "@@ -4951,16 +4951,14 @@ rs6000_arg_partial_bytes (CUMULATIVE_ARGS *cum, enum machine_mode mode,\n \t\t   && align_words >= GP_ARG_NUM_REG))))\n     {\n       if (cum->fregno + ((GET_MODE_SIZE (mode) + 7) >> 3) > FP_ARG_MAX_REG + 1)\n-\tret = FP_ARG_MAX_REG + 1 - cum->fregno;\n+\tret = (FP_ARG_MAX_REG + 1 - cum->fregno) * 8;\n       else if (cum->nargs_prototype >= 0)\n \treturn 0;\n     }\n \n   if (align_words < GP_ARG_NUM_REG\n       && GP_ARG_NUM_REG < align_words + rs6000_arg_size (mode, type))\n-    ret = GP_ARG_NUM_REG - align_words;\n-\n-  ret *= (TARGET_32BIT ? 4 : 8);\n+    ret = (GP_ARG_NUM_REG - align_words) * (TARGET_32BIT ? 4 : 8);\n \n   if (ret != 0 && TARGET_DEBUG_ARG)\n     fprintf (stderr, \"rs6000_arg_partial_bytes: %d\\n\", ret);"}, {"sha": "02236af2c3d74f2b9ed83670c565ad7eee8618f6", "filename": "gcc/expr.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ac7e839c63bfb19d83e6c81aee68c4435c1915c2/gcc%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ac7e839c63bfb19d83e6c81aee68c4435c1915c2/gcc%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpr.c?ref=ac7e839c63bfb19d83e6c81aee68c4435c1915c2", "patch": "@@ -3544,7 +3544,7 @@ emit_push_insn (rtx x, enum machine_mode mode, tree type, rtx size,\n       int not_stack;\n       /* # bytes of start of argument\n \t that we must make space for but need not store.  */\n-      int offset = partial % (PARM_BOUNDARY / BITS_PER_WORD);\n+      int offset = partial % (PARM_BOUNDARY / BITS_PER_UNIT);\n       int args_offset = INTVAL (args_so_far);\n       int skip;\n \n@@ -3562,8 +3562,9 @@ emit_push_insn (rtx x, enum machine_mode mode, tree type, rtx size,\n \toffset = 0;\n \n       /* Now NOT_STACK gets the number of words that we don't need to\n-\t allocate on the stack.  */\n+\t allocate on the stack. Convert OFFSET to words too. */\n       not_stack = (partial - offset) / UNITS_PER_WORD;\n+      offset /= UNITS_PER_WORD;\n \n       /* If the partial register-part of the arg counts in its stack size,\n \t skip the part of stack space corresponding to the registers."}]}