{"sha": "2d9429d5c0f86f588bdfd85bb9e236d2be367d3f", "node_id": "C_kwDOANBUbNoAKDJkOTQyOWQ1YzBmODZmNTg4YmRmZDg1YmI5ZTIzNmQyYmUzNjdkM2Y", "commit": {"author": {"name": "Marek Polacek", "email": "polacek@redhat.com", "date": "2022-09-19T18:12:55Z"}, "committer": {"name": "Marek Polacek", "email": "polacek@redhat.com", "date": "2022-09-19T18:19:26Z"}, "message": "c: Stray inform note with -Waddress [PR106947]\n\nA trivial fix for maybe_warn_for_null_address where we print an\ninform note without first checking the return value of a warning\ncall.\n\n\tPR c/106947\n\ngcc/c/ChangeLog:\n\n\t* c-typeck.cc (maybe_warn_for_null_address): Don't emit stray\n\tnotes.\n\ngcc/testsuite/ChangeLog:\n\n\t* c-c++-common/Waddress-7.c: New test.", "tree": {"sha": "a1b970dc9763cf99f53e19ae20e5288285d1eeec", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a1b970dc9763cf99f53e19ae20e5288285d1eeec"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2d9429d5c0f86f588bdfd85bb9e236d2be367d3f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2d9429d5c0f86f588bdfd85bb9e236d2be367d3f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2d9429d5c0f86f588bdfd85bb9e236d2be367d3f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2d9429d5c0f86f588bdfd85bb9e236d2be367d3f/comments", "author": {"login": "mpolacek", "id": 10496300, "node_id": "MDQ6VXNlcjEwNDk2MzAw", "avatar_url": "https://avatars.githubusercontent.com/u/10496300?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mpolacek", "html_url": "https://github.com/mpolacek", "followers_url": "https://api.github.com/users/mpolacek/followers", "following_url": "https://api.github.com/users/mpolacek/following{/other_user}", "gists_url": "https://api.github.com/users/mpolacek/gists{/gist_id}", "starred_url": "https://api.github.com/users/mpolacek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mpolacek/subscriptions", "organizations_url": "https://api.github.com/users/mpolacek/orgs", "repos_url": "https://api.github.com/users/mpolacek/repos", "events_url": "https://api.github.com/users/mpolacek/events{/privacy}", "received_events_url": "https://api.github.com/users/mpolacek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "mpolacek", "id": 10496300, "node_id": "MDQ6VXNlcjEwNDk2MzAw", "avatar_url": "https://avatars.githubusercontent.com/u/10496300?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mpolacek", "html_url": "https://github.com/mpolacek", "followers_url": "https://api.github.com/users/mpolacek/followers", "following_url": "https://api.github.com/users/mpolacek/following{/other_user}", "gists_url": "https://api.github.com/users/mpolacek/gists{/gist_id}", "starred_url": "https://api.github.com/users/mpolacek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mpolacek/subscriptions", "organizations_url": "https://api.github.com/users/mpolacek/orgs", "repos_url": "https://api.github.com/users/mpolacek/repos", "events_url": "https://api.github.com/users/mpolacek/events{/privacy}", "received_events_url": "https://api.github.com/users/mpolacek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "de40fab2f32b03c3d8f69f72c7f1e38694f93d35", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/de40fab2f32b03c3d8f69f72c7f1e38694f93d35", "html_url": "https://github.com/Rust-GCC/gccrs/commit/de40fab2f32b03c3d8f69f72c7f1e38694f93d35"}], "stats": {"total": 41, "additions": 32, "deletions": 9}, "files": [{"sha": "33d1e8439db0d0937d394df2c2ad0a61e3f5e04b", "filename": "gcc/c/c-typeck.cc", "status": "modified", "additions": 10, "deletions": 9, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2d9429d5c0f86f588bdfd85bb9e236d2be367d3f/gcc%2Fc%2Fc-typeck.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2d9429d5c0f86f588bdfd85bb9e236d2be367d3f/gcc%2Fc%2Fc-typeck.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2Fc-typeck.cc?ref=2d9429d5c0f86f588bdfd85bb9e236d2be367d3f", "patch": "@@ -11738,18 +11738,19 @@ maybe_warn_for_null_address (location_t loc, tree op, tree_code code)\n       || from_macro_expansion_at (loc))\n     return;\n \n+  bool w;\n   if (code == EQ_EXPR)\n-    warning_at (loc, OPT_Waddress,\n-\t\t\"the comparison will always evaluate as %<false%> \"\n-\t\t\"for the address of %qE will never be NULL\",\n-\t\top);\n+    w = warning_at (loc, OPT_Waddress,\n+\t\t    \"the comparison will always evaluate as %<false%> \"\n+\t\t    \"for the address of %qE will never be NULL\",\n+\t\t    op);\n   else\n-    warning_at (loc, OPT_Waddress,\n-\t\t\"the comparison will always evaluate as %<true%> \"\n-\t\t\"for the address of %qE will never be NULL\",\n-\t\top);\n+    w = warning_at (loc, OPT_Waddress,\n+\t\t    \"the comparison will always evaluate as %<true%> \"\n+\t\t    \"for the address of %qE will never be NULL\",\n+\t\t    op);\n \n-  if (DECL_P (op))\n+  if (w && DECL_P (op))\n     inform (DECL_SOURCE_LOCATION (op), \"%qD declared here\", op);\n }\n "}, {"sha": "179948553c5fde4ed7c98a373d5aa37b4d788cd1", "filename": "gcc/testsuite/c-c++-common/Waddress-7.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2d9429d5c0f86f588bdfd85bb9e236d2be367d3f/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2FWaddress-7.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2d9429d5c0f86f588bdfd85bb9e236d2be367d3f/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2FWaddress-7.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2FWaddress-7.c?ref=2d9429d5c0f86f588bdfd85bb9e236d2be367d3f", "patch": "@@ -0,0 +1,22 @@\n+/* PR c/106947 */\n+/* { dg-do compile } */\n+/* { dg-options \"-Waddress\" } */\n+\n+#ifndef __cplusplus\n+# define bool _Bool\n+#endif\n+\n+#pragma GCC diagnostic ignored \"-Waddress\"\n+int s; /* { dg-bogus \"declared\" } */\n+bool e = &s;\n+int\n+main ()\n+{\n+  int error = 0;\n+  {\n+    bool e1 = &s;\n+    if (!e1)\n+      error = 1;\n+  }\n+  return error;\n+}"}]}