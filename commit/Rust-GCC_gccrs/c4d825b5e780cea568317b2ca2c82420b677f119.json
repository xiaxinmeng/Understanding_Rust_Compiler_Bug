{"sha": "c4d825b5e780cea568317b2ca2c82420b677f119", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzRkODI1YjVlNzgwY2VhNTY4MzE3YjJjYTJjODI0MjBiNjc3ZjExOQ==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2019-01-22T08:30:51Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2019-01-22T08:30:51Z"}, "message": "tree-vect-loop.c (vect_analyze_loop_operations): Use auto_vec for cost vector to fix memleak.\n\n2019-01-22  Richard Biener  <rguenther@suse.de>\n\n\t* tree-vect-loop.c (vect_analyze_loop_operations): Use\n\tauto_vec for cost vector to fix memleak.\n\t(vectorize_fold_left_reduction): Properly gather SLP defs.\n\t(vectorizable_comparison): Do not swap operands to properly\n\tgather SLP defs.\n\nFrom-SVN: r268137", "tree": {"sha": "7234283b2ff7d4fe2677b76d48a29111f19b5033", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7234283b2ff7d4fe2677b76d48a29111f19b5033"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c4d825b5e780cea568317b2ca2c82420b677f119", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c4d825b5e780cea568317b2ca2c82420b677f119", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c4d825b5e780cea568317b2ca2c82420b677f119", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c4d825b5e780cea568317b2ca2c82420b677f119/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "8fcc359957360b4911fdf3b85b8cdaea6981fd62", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8fcc359957360b4911fdf3b85b8cdaea6981fd62", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8fcc359957360b4911fdf3b85b8cdaea6981fd62"}], "stats": {"total": 33, "additions": 24, "deletions": 9}, "files": [{"sha": "18f99a1daeb20aa1d7e31c14ba2df95150e1de00", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c4d825b5e780cea568317b2ca2c82420b677f119/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c4d825b5e780cea568317b2ca2c82420b677f119/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=c4d825b5e780cea568317b2ca2c82420b677f119", "patch": "@@ -1,3 +1,11 @@\n+2019-01-22  Richard Biener  <rguenther@suse.de>\n+\n+\t* tree-vect-loop.c (vect_analyze_loop_operations): Use\n+\tauto_vec for cost vector to fix memleak.\n+\t(vectorize_fold_left_reduction): Properly gather SLP defs.\n+\t(vectorizable_comparison): Do not swap operands to properly\n+\tgather SLP defs.\n+\n 2019-01-22  Alan Modra  <amodra@gmail.com>\n \n \tPR target/88614"}, {"sha": "202cab940d4719c018d830199cbe0559fb5a0277", "filename": "gcc/tree-vect-loop.c", "status": "modified", "additions": 9, "deletions": 5, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c4d825b5e780cea568317b2ca2c82420b677f119/gcc%2Ftree-vect-loop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c4d825b5e780cea568317b2ca2c82420b677f119/gcc%2Ftree-vect-loop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-loop.c?ref=c4d825b5e780cea568317b2ca2c82420b677f119", "patch": "@@ -1470,8 +1470,7 @@ vect_analyze_loop_operations (loop_vec_info loop_vinfo)\n \n   DUMP_VECT_SCOPE (\"vect_analyze_loop_operations\");\n \n-  stmt_vector_for_cost cost_vec;\n-  cost_vec.create (2);\n+  auto_vec<stmt_info_for_cost> cost_vec;\n \n   for (i = 0; i < nbbs; i++)\n     {\n@@ -1581,7 +1580,6 @@ vect_analyze_loop_operations (loop_vec_info loop_vinfo)\n     } /* bbs */\n \n   add_stmt_costs (loop_vinfo->target_cost_data, &cost_vec);\n-  cost_vec.release ();\n \n   /* All operations in the loop are either irrelevant (deal with loop\n      control, or dead), or only used outside the loop and can be moved\n@@ -5742,8 +5740,14 @@ vectorize_fold_left_reduction (stmt_vec_info stmt_info,\n   auto_vec<tree> vec_oprnds0;\n   if (slp_node)\n     {\n-      vect_get_vec_defs (op0, NULL_TREE, stmt_info, &vec_oprnds0, NULL,\n-\t\t\t slp_node);\n+      auto_vec<vec<tree> > vec_defs (2);\n+      auto_vec<tree> sops(2);\n+      sops.quick_push (ops[0]);\n+      sops.quick_push (ops[1]);\n+      vect_get_slp_defs (sops, slp_node, &vec_defs);\n+      vec_oprnds0.safe_splice (vec_defs[1 - reduc_index]);\n+      vec_defs[0].release ();\n+      vec_defs[1].release ();\n       group_size = SLP_TREE_SCALAR_STMTS (slp_node).length ();\n       scalar_dest_def_info = SLP_TREE_SCALAR_STMTS (slp_node)[group_size - 1];\n     }"}, {"sha": "4359fc9978ae9a0109679792f760c5af0aebcae1", "filename": "gcc/tree-vect-stmts.c", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c4d825b5e780cea568317b2ca2c82420b677f119/gcc%2Ftree-vect-stmts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c4d825b5e780cea568317b2ca2c82420b677f119/gcc%2Ftree-vect-stmts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-stmts.c?ref=c4d825b5e780cea568317b2ca2c82420b677f119", "patch": "@@ -9258,6 +9258,7 @@ vectorizable_comparison (stmt_vec_info stmt_info, gimple_stmt_iterator *gsi,\n        BITOP2 (rhs1 BITOP1 rhs2) or\n        rhs1 BITOP2 (BITOP1 rhs2)\n      depending on bitop1 and bitop2 arity.  */\n+  bool swap_p = false;\n   if (VECTOR_BOOLEAN_TYPE_P (vectype))\n     {\n       if (code == GT_EXPR)\n@@ -9274,15 +9275,13 @@ vectorizable_comparison (stmt_vec_info stmt_info, gimple_stmt_iterator *gsi,\n \t{\n \t  bitop1 = BIT_NOT_EXPR;\n \t  bitop2 = BIT_AND_EXPR;\n-\t  std::swap (rhs1, rhs2);\n-\t  std::swap (dts[0], dts[1]);\n+\t  swap_p = true;\n \t}\n       else if (code == LE_EXPR)\n \t{\n \t  bitop1 = BIT_NOT_EXPR;\n \t  bitop2 = BIT_IOR_EXPR;\n-\t  std::swap (rhs1, rhs2);\n-\t  std::swap (dts[0], dts[1]);\n+\t  swap_p = true;\n \t}\n       else\n \t{\n@@ -9349,6 +9348,8 @@ vectorizable_comparison (stmt_vec_info stmt_info, gimple_stmt_iterator *gsi,\n \t      vect_get_slp_defs (ops, slp_node, &vec_defs);\n \t      vec_oprnds1 = vec_defs.pop ();\n \t      vec_oprnds0 = vec_defs.pop ();\n+\t      if (swap_p)\n+\t\tstd::swap (vec_oprnds0, vec_oprnds1);\n \t    }\n \t  else\n \t    {\n@@ -9368,6 +9369,8 @@ vectorizable_comparison (stmt_vec_info stmt_info, gimple_stmt_iterator *gsi,\n \n       if (!slp_node)\n \t{\n+\t  if (swap_p)\n+\t    std::swap (vec_rhs1, vec_rhs2);\n \t  vec_oprnds0.quick_push (vec_rhs1);\n \t  vec_oprnds1.quick_push (vec_rhs2);\n \t}"}]}