{"sha": "6912b84bf1a10c6bc8c9c337153189a44bdce35f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjkxMmI4NGJmMWExMGM2YmM4YzljMzM3MTUzMTg5YTQ0YmRjZTM1Zg==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@vlsi1.ultra.nyu.edu", "date": "2000-04-18T19:14:58Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "2000-04-18T19:14:58Z"}, "message": "expmed.c (emit_store_flag): If comparing two-word integer with zero, can optimize NE, EQ, GE, and LT.\n\n\t* expmed.c (emit_store_flag): If comparing two-word integer\n\twith zero, can optimize NE, EQ, GE, and LT.\n\nFrom-SVN: r33230", "tree": {"sha": "63c641373bc58210fc72a1e3d073d51bc6276e52", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/63c641373bc58210fc72a1e3d073d51bc6276e52"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6912b84bf1a10c6bc8c9c337153189a44bdce35f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6912b84bf1a10c6bc8c9c337153189a44bdce35f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6912b84bf1a10c6bc8c9c337153189a44bdce35f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6912b84bf1a10c6bc8c9c337153189a44bdce35f/comments", "author": null, "committer": null, "parents": [{"sha": "60b6e1f5d5a3502cdc4c5491474812623c4654af", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/60b6e1f5d5a3502cdc4c5491474812623c4654af", "html_url": "https://github.com/Rust-GCC/gccrs/commit/60b6e1f5d5a3502cdc4c5491474812623c4654af"}], "stats": {"total": 38, "additions": 32, "deletions": 6}, "files": [{"sha": "d9eb7c4b0c38b50f648b87d4d386fe5b73f291f1", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 6, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6912b84bf1a10c6bc8c9c337153189a44bdce35f/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6912b84bf1a10c6bc8c9c337153189a44bdce35f/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=6912b84bf1a10c6bc8c9c337153189a44bdce35f", "patch": "@@ -1,14 +1,17 @@\n-2000-04-18  Mark Mitchell  <mark@codesourcery.com>\n-\n-\t* cpplex.c (_cpp_lex_token): Don't call CPP_BUMP_LINE when the\n-\tmark is active.\n-\n Tue Apr 18 14:16:47 2000  Richard Kenner  <kenner@vlsi1.ultra.nyu.edu>\n \n+\t* expmed.c (emit_store_flag): If comparing two-word integer\n+\twith zero, can optimize NE, EQ, GE, and LT.\n+\n \t* c-decl.c (mark_binding_level): Use 'for' instead of `while'.\n \t* conflict.c: Minor cleanups.\n \t* optabs.c: Add blank line\n-\t* simplify-rtx.c: \n+\t* simplify-rtx.c: Minor cleanups.\n+\n+2000-04-18  Mark Mitchell  <mark@codesourcery.com>\n+\n+\t* cpplex.c (_cpp_lex_token): Don't call CPP_BUMP_LINE when the\n+\tmark is active.\n \n 2000-04-17  Zack Weinberg  <zack@wolery.cumb.org>\n "}, {"sha": "bb06536e5e59a208498fd8e42e3fdb72f998798e", "filename": "gcc/expmed.c", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6912b84bf1a10c6bc8c9c337153189a44bdce35f/gcc%2Fexpmed.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6912b84bf1a10c6bc8c9c337153189a44bdce35f/gcc%2Fexpmed.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpmed.c?ref=6912b84bf1a10c6bc8c9c337153189a44bdce35f", "patch": "@@ -4181,6 +4181,29 @@ emit_store_flag (target, code, op0, op1, mode, unsignedp, normalizep)\n       break;\n     }\n \n+  /* If we are comparing a double-word integer with zero, we can convert\n+     the comparison into one involving a single word.  */\n+  if (GET_MODE_BITSIZE (mode) == BITS_PER_WORD * 2\n+      && GET_MODE_CLASS (mode) == MODE_INT\n+      && op1 == const0_rtx)\n+    {\n+      if (code == EQ || code == NE)\n+\t{\n+\t  /* Do a logical OR of the two words and compare the result.  */\n+\t  rtx op0h = gen_highpart (word_mode, op0);\n+\t  rtx op0l = gen_lowpart (word_mode, op0);\n+\t  rtx op0both = expand_binop (word_mode, ior_optab, op0h, op0l,\n+\t\t\t\t      NULL_RTX, unsignedp, OPTAB_DIRECT);\n+\t  if (op0both != 0)\n+\t    return emit_store_flag (target, code, op0both, op1, word_mode,\n+\t\t\t\t    unsignedp, normalizep);\n+\t}\n+      else if (code == LT || code == GE)\n+\t/* If testing the sign bit, can just test on high word.  */\n+\treturn emit_store_flag (target, code, gen_highpart (word_mode, op0),\n+\t\t\t\top1, word_mode, unsignedp, normalizep);\n+    }\n+\n   /* From now on, we won't change CODE, so set ICODE now.  */\n   icode = setcc_gen_code[(int) code];\n "}]}