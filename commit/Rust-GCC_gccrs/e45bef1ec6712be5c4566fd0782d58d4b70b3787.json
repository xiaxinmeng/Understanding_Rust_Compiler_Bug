{"sha": "e45bef1ec6712be5c4566fd0782d58d4b70b3787", "node_id": "C_kwDOANBUbNoAKGU0NWJlZjFlYzY3MTJiZTVjNDU2NmZkMDc4MmQ1OGQ0YjcwYjM3ODc", "commit": {"author": {"name": "Joao Azevedo", "email": "azevedo@adacore.com", "date": "2022-12-01T15:55:11Z"}, "committer": {"name": "Marc Poulhi\u00e8s", "email": "poulhies@adacore.com", "date": "2023-01-05T14:30:00Z"}, "message": "ada: Update gnatpp documentation with --layout switch\n\nUpdate legacy switches.\n\ngcc/ada/\n\n\t* doc/gnat_ugn/gnat_utility_programs.rst: add gnatpp --layout\n\tswitch and update legacy switches.", "tree": {"sha": "3edc94965bd32712fd1c89fcfa7ea93002673a11", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3edc94965bd32712fd1c89fcfa7ea93002673a11"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e45bef1ec6712be5c4566fd0782d58d4b70b3787", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e45bef1ec6712be5c4566fd0782d58d4b70b3787", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e45bef1ec6712be5c4566fd0782d58d4b70b3787", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e45bef1ec6712be5c4566fd0782d58d4b70b3787/comments", "author": {"login": "joaopsazevedo", "id": 22893717, "node_id": "MDQ6VXNlcjIyODkzNzE3", "avatar_url": "https://avatars.githubusercontent.com/u/22893717?v=4", "gravatar_id": "", "url": "https://api.github.com/users/joaopsazevedo", "html_url": "https://github.com/joaopsazevedo", "followers_url": "https://api.github.com/users/joaopsazevedo/followers", "following_url": "https://api.github.com/users/joaopsazevedo/following{/other_user}", "gists_url": "https://api.github.com/users/joaopsazevedo/gists{/gist_id}", "starred_url": "https://api.github.com/users/joaopsazevedo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/joaopsazevedo/subscriptions", "organizations_url": "https://api.github.com/users/joaopsazevedo/orgs", "repos_url": "https://api.github.com/users/joaopsazevedo/repos", "events_url": "https://api.github.com/users/joaopsazevedo/events{/privacy}", "received_events_url": "https://api.github.com/users/joaopsazevedo/received_events", "type": "User", "site_admin": false}, "committer": {"login": "dkm", "id": 87603, "node_id": "MDQ6VXNlcjg3NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/87603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dkm", "html_url": "https://github.com/dkm", "followers_url": "https://api.github.com/users/dkm/followers", "following_url": "https://api.github.com/users/dkm/following{/other_user}", "gists_url": "https://api.github.com/users/dkm/gists{/gist_id}", "starred_url": "https://api.github.com/users/dkm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dkm/subscriptions", "organizations_url": "https://api.github.com/users/dkm/orgs", "repos_url": "https://api.github.com/users/dkm/repos", "events_url": "https://api.github.com/users/dkm/events{/privacy}", "received_events_url": "https://api.github.com/users/dkm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "59d1681bf3dec3a5077247a77e4862516b561284", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/59d1681bf3dec3a5077247a77e4862516b561284", "html_url": "https://github.com/Rust-GCC/gccrs/commit/59d1681bf3dec3a5077247a77e4862516b561284"}], "stats": {"total": 831, "additions": 325, "deletions": 506}, "files": [{"sha": "639534d90e67a082bd1ae0afb363776af75fb726", "filename": "gcc/ada/doc/gnat_ugn/gnat_utility_programs.rst", "status": "modified", "additions": 325, "deletions": 506, "changes": 831, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e45bef1ec6712be5c4566fd0782d58d4b70b3787/gcc%2Fada%2Fdoc%2Fgnat_ugn%2Fgnat_utility_programs.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e45bef1ec6712be5c4566fd0782d58d4b70b3787/gcc%2Fada%2Fdoc%2Fgnat_ugn%2Fgnat_utility_programs.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fdoc%2Fgnat_ugn%2Fgnat_utility_programs.rst?ref=e45bef1ec6712be5c4566fd0782d58d4b70b3787", "patch": "@@ -496,18 +496,18 @@ building specialized scripts.\n \n    where\n \n-   * ``switches`` is an optional sequence of switches defining such properties as\n-     the formatting rules, the source search path, and the destination for the\n-     output source file\n+   * ``switches`` is an optional sequence of switches defining such properties\n+     as the formatting rules, the source search path, and the destination for\n+     the output source file\n \n    * ``filename`` is the name of the source file to reformat; wildcards\n      or several file names on the same gnatpp command are allowed. The\n      file name may contain path information; it does not have to follow\n      the GNAT file naming rules\n \n-     Note that it is no longer necessary to specify the Ada language version;\n-     ``gnatpp`` can process Ada source code written in any version from\n-     Ada 83 onward without specifying any language version switch.\n+   Note that it is no longer necessary to specify the Ada language version;\n+   ``gnatpp`` can process Ada source code written in any version from Ada 83\n+   onward without specifying any language version switch.\n \n \n    .. _Switches_for_gnatpp:\n@@ -519,8 +519,8 @@ building specialized scripts.\n    ``gnatpp``, organized by category.\n \n    You specify a switch by supplying a name and generally also a value.\n-   In many cases the values for a switch with a given name are incompatible with\n-   each other\n+   In many cases the values for a switch with a given name are incompatible\n+   with each other\n    (for example the switch that controls the casing of a reserved word may have\n    exactly one value: upper case, lower case, or\n    mixed case) and thus exactly one such switch can be in effect for an\n@@ -532,191 +532,267 @@ building specialized scripts.\n    Abbreviated forms (the name appearing once, followed by each value) are\n    not permitted.\n \n-   .. _Alignment_Control:\n \n-   Alignment Control\n-   ^^^^^^^^^^^^^^^^^\n+   .. _Layout_Control:\n \n-   .. index:: Alignment control in gnatpp\n-\n-   Programs can be easier to read if certain constructs are vertically aligned.\n-   By default, alignment of the following constructs is set ON:\n-\n-     * ``:`` in declarations,\n-     * ``:=`` in initializations in declarations,\n-     * ``:=`` in assignment statements,\n-     * ``=>`` in associations, and\n-     * ``at`` keywords in the component clauses in record representation clauses.\n-\n-   In addition, ``in`` and ``out`` in parameter specifications are lined up.\n+   Layout Control\n+   ^^^^^^^^^^^^^^\n \n-   .. index:: --no-alignment (gnatpp)\n-   .. index:: --alignment (gnatpp)\n-   .. index:: --no-align-modes (gnatpp)\n+   .. index:: Layout control in gnatpp\n \n+   ``gnatpp`` provides a layout switch which controls the general\n+   formatting style:\n \n-   :switch:`--no-alignment`\n-     Set alignment to OFF\n+   .. index:: layout(gnatpp)\n \n+   :switch:`--layout=default|minimal|compact|tall`\n \n-   :switch:`--alignment`\n-     Set alignment to ON\n+   :switch:`default`\n+     The default layout will follow a compact style but add aligment and put\n+     some keywords on a separate line.\n+     \n+     Alignment is added in the the following constructs:\n \n+     * ``:`` in declarations,\n+     * ``:=`` in initializations in declarations,\n+     * ``:=`` in assignment statements,\n+     * ``=>`` in associations, and\n+     * ``at`` keywords in the component clauses in record representation\n+       clauses.\n+\n+     In addition, ``in`` and ``out`` keywords in parameter specifications are\n+     also lined up.\n+\n+     The keyword ``is`` is placed on a separate line in a subprogram body in\n+     case the spec occupies more than one line.\n+\n+     The keyword ``return`` is placed on a separate line if a subprogram spec\n+     does not fit on one line.\n+\n+   :switch:`minimal`\n+     The minimal layout will avoid changing the source layout by keeping all\n+     line breaks from the original source (it will not insert or delete any).\n+     It will add indentation where appropriate as long as it does not exceed\n+     the line length limit.\n+\n+   :switch:`compact`\n+     The compact layout will avoid adding line breaks and alignment by packing\n+     as many subexpressions on the same line as possible.\n+\n+     Whole-line comments that form a paragraph will be filled in typical word\n+     processor style (that is, moving words between lines to make them similar\n+     in length, except the last one which may be shorter).\n+\n+     For each whole-line comment that does not end with two hyphens, inserts\n+     spaces if necessary after the starting two hyphens to ensure that there\n+     are at least two spaces preceding the first non-blank character of the\n+     comment.\n+\n+   :switch:`tall`\n+     The tall layout will favor adding lines breaks and alignment. It adds\n+     all the alignment and line breaks defined in the ``default`` option,\n+     and in addition:\n+\n+     * Places the keyword ``loop`` in FOR and WHILE loop statements on a\n+       separate line\n+     * Places the keyword ``then`` in IF statements on a separate line\n+     * Places each keyword ``use`` in USE clauses on a separate line\n+     * Splits the line just before the keyword ``record`` in a RECORD type\n+       declaration\n+     * Indents named blocks and loop statments with respect to the name\n+     * When necessary, splits binary operators always before the operator\n+     * Inserts an extra blank before various occurrences of ``(`` and ``:``\n+     * When it is necessary to split a line between two subexpressions (because\n+       otherwise the construct would exceed --max-line-length), then all such\n+       subexpressions are placed on separate lines\n+     * Formats enumeration type declarations \u201cvertically\u201d, e.g. each\n+       enumeration literal goes on a separate line\n+     * Formats array type declarations \u201cvertically\u201d, e.g. for multidimensional\n+       arrays, each index_subtype_definition or discrete_subtype_definition\n+       goes on a separate line\n+     * Format aggregates \u201cvertically\u201d if named notation is used for all\n+       component_associations, e.g. each component_association goes on a\n+       separate line\n+     * Formats case statements, case expressions, and variant parts with\n+       additional line breaks\n+     * Inserts blank lines where appropriate (between bodies and other large\n+       constructs)\n+     * Similarly to the :switch:`compact` layout, two spaces are added in the\n+       beginning of a whole-line comment when needed\n \n-   :switch:`--no-align-modes`\n-     Do not line up ``in`` and ``out`` in parameter specifications.\n \n    .. _Casing_Control:\n \n-\n    Casing Control\n    ^^^^^^^^^^^^^^\n \n    .. index:: Casing control in gnatpp\n \n-   ``gnatpp`` allows you to specify the casing for reserved words,\n-   pragma names, attribute designators and identifiers.\n-   For identifiers you may define a\n-   general rule for name casing but also override this rule\n-   via a set of dictionary files.\n+   ``gnatpp`` allows you to specify the casing for reserved words, pragma\n+   names, attribute designators and identifiers. For identifiers you may define\n+   a general rule for name casing but also override this rule via a set of\n+   dictionary files.\n \n-   Three types of casing are supported: lower case, upper case, and mixed case.\n-   'Mixed case' means that the first letter, and also each letter immediately\n-   following an underscore, are converted to their uppercase forms;\n-   all the other letters are converted to their lowercase forms.\n-\n-   (Note: the casing switches are not yet fully supported in the\n-   libadalang-based version of gnatpp.)\n+   Three types of casing are supported: 'Lower Case', 'Upper Case', and\n+   'Mixed Case'. 'Mixed case' means that the first letter, and also each\n+   letter immediately following an underscore, are converted to their\n+   uppercase forms and all the other letters are converted to their lowercase\n+   forms.\n \n    .. index:: --name-case-as-declared (gnatpp)\n \n-   :switch:`--name-case-as-declared`\n+   :switch:`--name-case-as-declared, -nD`\n      Name casing for defining occurrences are as they appear in the source file\n-     (this is the default)\n+     (this is the default).\n \n    .. index:: --name-upper-case (gnatpp)\n \n-   :switch:`--name-upper-case`\n-     Names are in upper case\n+   :switch:`--name-upper-case, -nU`\n+     Names are in upper case.\n \n    .. index:: --name-lower-case (gnatpp)\n \n-   :switch:`--name-lower-case`\n-     Names are in lower case\n+   :switch:`--name-lower-case, -nL`\n+     Names are in lower case.\n \n    .. index:: --name-mixed-case (gnatpp)\n \n-   :switch:`--name-mixed-case`\n-     Names are in mixed case\n+   :switch:`--name-mixed-case, -nM`\n+     Names are in mixed case.\n \n    .. index:: --attribute-lower-case (gnatpp)\n \n-   :switch:`--attribute-lower-case`\n-     Attribute designators are lower case\n+   :switch:`--attribute-lower-case, -aL`\n+     Attribute designators are lower case.\n \n    .. index:: --attribute-upper-case (gnatpp)\n \n-   :switch:`--attribute-upper-case`\n-     Attribute designators are upper case\n+   :switch:`--attribute-upper-case, -aU`\n+     Attribute designators are upper case.\n \n    .. index:: --attribute-mixed-case (gnatpp)\n \n-   :switch:`--attribute-mixed-case`\n-     Attribute designators are mixed case (this is the default)\n+   :switch:`--attribute-mixed-case, -aM`\n+     Attribute designators are mixed case (this is the default).\n \n    .. index:: --keyword-lower-case (gnatpp)\n \n-   :switch:`--keyword-lower-case`\n+   :switch:`--keyword-lower-case, -kL`\n      Keywords (technically, these are known in Ada as *reserved words*) are\n-     lower case (this is the default)\n+     lower case (this is the default).\n \n    .. index:: --keyword-upper-case (gnatpp)\n \n-   :switch:`--keyword-upper-case`\n-     Keywords are upper case\n+   :switch:`--keyword-upper-case, -kU`\n+     Keywords are upper case.\n \n    .. index:: --enum-case-as-declared (gnatpp)\n \n-   :switch:`--enum-case-as-declared`\n-     Enumeration literal casing for defining occurrences are as they appear in the\n-     source file. Overrides -n casing setting.\n+   :switch:`--enum-case-as-declared, -neD`\n+     Enumeration literal casing for defining occurrences are as they appear in\n+     the source file. Overrides -n casing setting.\n \n    .. index:: --enum-upper-case (gnatpp)\n \n-   :switch:`--enum-upper-case`\n+   :switch:`--enum-upper-case, -neU`\n      Enumeration literals are in upper case. Overrides -n casing\n      setting.\n \n    .. index:: --enum-lower-case (gnatpp)\n \n-   :switch:`--enum-lower-case`\n+   :switch:`--enum-lower-case, -neL`\n      Enumeration literals are in lower case. Overrides -n casing\n      setting.\n \n    .. index:: --enum-mixed-case (gnatpp)\n \n-   :switch:`--enum-mixed-case`\n+   :switch:`--enum-mixed-case, -neM`\n      Enumeration literals are in mixed case. Overrides -n casing\n      setting.\n \n    .. index:: --type-case-as-declared (gnatpp)\n \n-   :switch:`--type-case-as-declared`\n+   :switch:`--type-case-as-declared, -ntD`\n      Names introduced by type and subtype declarations are always\n      cased as they appear in the declaration in the source file.\n      Overrides -n casing setting.\n \n    .. index:: --type-upper-case (gnatpp)\n \n-   :switch:`--type-upper-case`\n+   :switch:`--type-upper-case, -ntU`\n      Names introduced by type and subtype declarations are always in\n      upper case. Overrides -n casing setting.\n \n    .. index:: --type-lower-case (gnatpp)\n \n-   :switch:`--type-lower-case`\n+   :switch:`--type-lower-case, -ntL`\n      Names introduced by type and subtype declarations are always in\n      lower case. Overrides -n casing setting.\n \n    .. index:: --type-mixed-case (gnatpp)\n \n-   :switch:`--type-mixed-case`\n+   :switch:`--type-mixed-case, -ntM`\n      Names introduced by type and subtype declarations are always in\n      mixed case. Overrides -n casing setting.\n \n    .. index:: --number-upper-case (gnatpp)\n \n-   :switch:`--number-upper-case`\n+   :switch:`--number-upper-case, -nnU`\n      Names introduced by number declarations are always in\n      upper case. Overrides -n casing setting.\n \n    .. index:: --number-lower-case (gnatpp)\n \n-   :switch:`--number-lower-case`\n+   :switch:`--number-lower-case, -nnL`\n      Names introduced by number declarations are always in\n      lower case. Overrides -n casing setting.\n \n    .. index:: --number-mixed-case (gnatpp)\n \n-   :switch:`--number-mixed-case`\n+   :switch:`--number-mixed-case, -nnM`\n      Names introduced by number declarations are always in\n      mixed case. Overrides -n casing setting.\n \n    .. index:: --pragma-lower-case (gnatpp)\n \n-   :switch:`--pragma-lower-case`\n-     Pragma names are lower case\n+   :switch:`--pragma-lower-case, -pL`\n+     Pragma names are lower case.\n \n    .. index:: --pragma-upper-case (gnatpp)\n \n-   :switch:`--pragma-upper-case`\n-     Pragma names are upper case\n+   :switch:`--pragma-upper-case, -pU`\n+     Pragma names are upper case.\n \n    .. index:: --pragma-mixed-case (gnatpp)\n \n-   :switch:`--pragma-mixed-case`\n-     Pragma names are mixed case (this is the default)\n+   :switch:`--pragma-mixed-case, -pM`\n+     Pragma names are mixed case (this is the default).\n+\n+   .. index:: --constant-case-as-non-constant (gnatpp)\n+\n+   :switch:`--constant-case-as-non-constant, -cN`\n+     Constant object declaration names have the same case as the name casing\n+     (this is the default).\n+\n+   .. index:: --constant-case-as-declared (gnatpp)\n \n+   :switch:`--constant-case-as-declared, -cD`\n+     Constant object declaration names are as they appear in the source file.\n+\n+   .. index:: --constant-lower-case (gnatpp)\n+\n+   :switch:`--constant-lower-case, -cL`\n+     Constant object declaration names are lower case.\n+\n+   .. index:: --constant-upper-case (gnatpp)\n+\n+   :switch:`--constan-upper-case, -cU`\n+     Constant object declaration names are upper case.\n+\n+   .. index:: --constant-mixed-case (gnatpp)\n+\n+   :switch:`--constant-mixed-case, -cM`\n+     Constant object declaration names are mixed case.\n \n    .. index:: --syntax-only (gnatpp)\n \n@@ -725,10 +801,9 @@ building specialized scripts.\n      This means gnatpp will not be able to support any of the\n      \"as-declared\" switches.\n \n-\n    .. index:: --dictionary (gnatpp)\n \n-   :switch:`--dictionary={file}`\n+   :switch:`--dictionary={file}, -D={file}`\n      Use ``file`` as a *dictionary file* that defines\n      the casing for a set of specified names,\n      thereby overriding the effect on these names by\n@@ -741,10 +816,9 @@ building specialized scripts.\n      to define the casing for the Ada predefined names and\n      the names declared in the GNAT libraries.\n \n-\n    .. index:: --dictionary=- (gnatpp)\n \n-   :switch:`--dictionary=-`\n+   :switch:`--dictionary=-, -D=-`\n      Do not use the default dictionary file;\n      instead, use the casing\n      defined by a ``-n`` switch and any explicit\n@@ -762,146 +836,6 @@ building specialized scripts.\n    on their effect.\n \n \n-   .. index:: -c (gnatpp)\n-\n-\n-   :switch:`--comments-unchanged`\n-     All comments remain unchanged.\n-\n-\n-   :switch:`--comments-gnat-indentation`\n-     GNAT-style comment line indentation.\n-     This is the default.\n-\n-\n-   :switch:`--comments-gnat-beginning`\n-     GNAT-style comment beginning.\n-\n-\n-   :switch:`--comments-fill`\n-     Fill comment blocks.\n-     The default is :switch:`--no-comments-fill`.\n-\n-\n-   :switch:`--comments-special`\n-     Keep unchanged special form comments.\n-     The default is :switch:`--no-comments-special`.\n-\n-\n-   .. index:: --comments-only (gnatpp)\n-\n-   :switch:`--comments-only`\n-     Format just the comments.\n-\n-   .. index:: --no-end-id (gnatpp)\n-\n-\n-   :switch:`--no-end-id`\n-     Do not insert the name of a unit after ``end``; leave whatever comes\n-     after ``end``, if anything, alone.\n-\n-   .. index:: --no-separate-is (gnatpp)\n-\n-\n-   :switch:`--no-separate-is`\n-     Do not place the keyword ``is`` on a separate line in a subprogram body in\n-     case if the spec occupies more than one line.\n-\n-   .. index:: --no-separate-return (gnatpp)\n-\n-\n-   :switch:`--no-separate-return`\n-     In :switch:`--no-compact` mode, if a subprogram spec does not fit on\n-     one line, try to place the ``return`` on the same line as the last\n-     formal parameter.\n-\n-   .. index:: --separate-loop (gnatpp)\n-\n-\n-   :switch:`--separate-loop`\n-     Place the keyword ``loop`` in FOR and WHILE loop statements\n-     on a separate line.\n-\n-   .. index:: --no-separate-then (gnatpp)\n-\n-\n-   :switch:`--separate-then`\n-     Place the keyword ``then`` in IF statements\n-     on a separate line.\n-\n-   .. index:: --no-separate-loop (gnatpp)\n-\n-\n-   :switch:`--no-separate-loop`\n-     Do not place the keyword ``loop`` in FOR and WHILE loop statements\n-     on a separate line. This option is\n-     incompatible with the :switch:`--separate-loop` option.\n-\n-   .. index:: --no-separate-then (gnatpp)\n-\n-\n-   :switch:`--no-separate-then`\n-     Do not place the keyword ``then`` in IF statements\n-     on a separate line. This option is\n-     incompatible with the :switch:`--separate-then` option.\n-\n-   .. index:: --separate-loop-then (gnatpp)\n-\n-\n-   :switch:`--separate-loop-then`\n-     Equivalent to :switch:`--separate-loop` :switch:`--separate-then`.\n-\n-   .. index:: --no-separate-loop-then (gnatpp)\n-\n-\n-   :switch:`--no-separate-loop-then`\n-     Equivalent to :switch:`--no-separate-loop` :switch:`--no-separate-then`.\n-\n-   .. index:: --use-on-new-line (gnatpp)\n-\n-\n-   :switch:`--use-on-new-line`\n-     Start each USE clause in a context clause from a separate line.\n-\n-\n-   .. index:: --insert-blank-lines (gnatpp)\n-\n-\n-   :switch:`--insert-blank-lines`\n-     Insert blank lines where appropriate (between bodies and other large\n-     constructs).\n-\n-   .. index:: --preserve-blank-lines (gnatpp)\n-\n-\n-   :switch:`--preserve-blank-lines`\n-     Preserve blank lines in the input. By default, gnatpp will squeeze\n-     multiple blank lines down to one.\n-\n-   .. index:: --preserve-line-breaks (gnatpp)\n-\n-   :switch:`--preserve-line-breaks`\n-     Preserve line breaks in the input, to the extent possible.\n-     By default, line breaks are also inserted at appropriate\n-     places.\n-\n-   .. index:: --source-line-breaks (gnatpp)\n-\n-   :switch:`--source-line-breaks`\n-     Keep the line breaks from the source; do not insert or delete any\n-     line breaks.\n-\n-   .. index:: --spaces-only (gnatpp)\n-\n-   :switch:`--spaces-only`\n-     Disable all formatting except for inserting and removing spaces.\n-     This implies --source-line-breaks.\n-\n-   The ``--comments`` switches are compatible with one another, except\n-   that the ``--comments-unchanged`` switch disables all other comment\n-   formatting switches.\n-\n-\n    .. _General_Text_Layout_Control:\n \n    General Text Layout Control\n@@ -911,19 +845,19 @@ building specialized scripts.\n \n    .. index:: --max-line-length (gnatpp)\n \n-   :switch:`--max-line-length={nnn}`\n+   :switch:`--max-line-length={nnn}, -M={nnn}`\n      Maximum line length, ``nnn`` from 32...256, the default value is 79\n \n \n    .. index:: --indentation (gnatpp)\n \n-   :switch:`--indentation={nnn}`\n+   :switch:`--indentation={nnn}, -i={nnn}`\n      Indentation level, ``nnn`` from 1...9, the default value is 3\n \n \n    .. index:: --indent-continuation (gnatpp)\n \n-   :switch:`--indent-continuation={nnn}`\n+   :switch:`--indent-continuation={nnn}, -cl={nnn}`\n      Indentation level for continuation lines (relative to the line being\n      continued), ``nnn`` from 1...9.\n      The default\n@@ -956,63 +890,6 @@ building specialized scripts.\n      example, with ``--based-grouping=4``, ``16#0001FFFE#`` will be\n      changed to ``16#0001_FFFE#``.\n \n-\n-   .. index:: --split-line-before-record (gnatpp)\n-\n-   :switch:`--split-line-before-record`\n-     Split the line just before ``record`` in a record type declaration.\n-\n-\n-   .. index:: --indent-named-statements (gnatpp)\n-\n-   :switch:`--indent-named-statements`\n-     Named block and loop statements are indented with respect to\n-     the name.\n-\n-\n-   .. index:: --split-line-before-op (gnatpp)\n-\n-   :switch:`--split-line-before-op`\n-     If it is necessary to split a line at a binary operator, by default\n-     the line is split after the operator. With this option, it is split\n-     before the operator.\n-\n-\n-   .. index:: --RM-style-spacing (gnatpp)\n-\n-   :switch:`--RM-style-spacing`\n-     Do not insert an extra blank before various occurrences of\n-     '(' and ':'. Alignment is off by default in this mode;\n-     use :switch:`--alignment` to turn it on.\n-\n-\n-   .. index:: --compact (gnatpp)\n-   .. index:: --no-compact (gnatpp)\n-\n-   :switch:`--compact`\n-     This is the default. In calls and similar, this packs as many\n-     subexpressions on the same line as possible. Example:\n-\n-     .. code-block:: ada\n-\n-        Some_Procedure\n-          (Short_One, Another_Short_One,\n-           A_Very_Very_Very_Very_Very_Very_Very_Very_Long_One);\n-\n-   :switch:`--no-compact`\n-     Turns off --compact mode. In calls and similar, if it is necessary\n-     to split a line between two subexpressions (because otherwise the\n-     construct would exceed --max-line-length), then all such subexpressions\n-     are placed on separate lines. Example:\n-\n-     .. code-block:: ada\n-\n-        Some_Procedure\n-          (Short_One,\n-           Another_Short_One,\n-           A_Very_Very_Very_Very_Very_Very_Very_Very_Long_One);\n-\n-\n    .. index:: --call-threshold (gnatpp)\n \n    :switch:`--call-threshold={nnn}`\n@@ -1021,40 +898,14 @@ building specialized scripts.\n      a new line. If ``nnn`` is 0, no check for the number of associations\n      is made; this is the default.\n \n-\n    .. index:: --par-threshold (gnatpp)\n \n    :switch:`--par-threshold={nnn}`\n      If the number of parameter specifications is greater than ``nnn``\n      (or equal to ``nnn`` in case of a function), start each specification from\n-     a new line. If ``nnn`` is 0, and :switch:`--no-separate-is` was not specified, then\n-     the ``is`` is placed on a separate line. This feature is disabled by default.\n-\n-   .. index:: --vertical-enum-types (gnatpp)\n-\n-   :switch:`--vertical-enum-types`\n-     Format enumeration type declarations \"vertically\", e.g. each\n-     enumeration literal goes on a separate line.\n-\n-   .. index:: --vertical-array-types (gnatpp)\n-\n-   :switch:`--vertical-array-types`\n-     Format array type declarations \"vertically\", e.g. for\n-     multidimensional arrays, each index_subtype_definition or\n-     discrete_subtype_definition goes on a separate line.\n-\n-   .. index:: --vertical-named-aggregates (gnatpp)\n-\n-   :switch:`--vertical-named-aggregates`\n-     Format aggregates \"vertically\" if named notation is used for all\n-     component_associations, e.g. each component_association\n-     goes on a separate line.\n-\n-   .. index:: --vertical-case-alternatives (gnatpp)\n-\n-   :switch:`--vertical-case-alternatives`\n-     Format case statements, case expressions, and variant parts with\n-     additional line breaks.\n+     a new line. If ``nnn`` is 0, and :switch:`--no-separate-is` was not\n+     specified, then the ``is`` is placed on a separate line. This feature is\n+     disabled by default.\n \n \n    .. _Setting_the_Source_Search_Path:\n@@ -1090,7 +941,7 @@ building specialized scripts.\n \n    .. index:: --replace (gnatpp)\n \n-   :switch:`--replace`\n+   :switch:`--replace, -rnb`\n      This is the default.\n      Replace the input source file with the reformatted output without\n      creating any backup copy of the input source.\n@@ -1108,38 +959,38 @@ building specialized scripts.\n \n    .. index:: --pipe (gnatpp)\n \n-   :switch:`--pipe`\n+   :switch:`--pipe, -pipe`\n      Send the output to ``Standard_Output``\n \n \n    .. index:: --output (gnatpp)\n \n-   :switch:`--output={output_file}`\n+   :switch:`--output={output_file}, -o={output_file}`\n      Write the output into ``output_file``.\n      If ``output_file`` already exists, ``gnatpp`` terminates without\n      reading or processing the input file.\n \n \n    .. index:: --output-force (gnatpp)\n \n-   :switch:`--output-force={output_file}`\n+   :switch:`--output-force={output_file}, -of={output_file}`\n      Write the output into ``output_file``, overwriting the existing file\n      (if one is present).\n \n \n    .. index:: --replace-backup (gnatpp)\n \n-   :switch:`--replace-backup`\n+   :switch:`--replace-backup, -r`\n      Replace the input source file with the reformatted output, and copy the\n-     original input source into the file whose name is obtained by appending the\n-     :file:`.npp` suffix to the name of the input file.\n+     original input source into the file whose name is obtained by appending\n+     the :file:`.npp` suffix to the name of the input file.\n      If a file with this name already exists, ``gnatpp`` terminates without\n      reading or processing the input file.\n \n \n    .. index:: --replace-force-backup (gnatpp)\n \n-   :switch:`--replace-force-backup`\n+   :switch:`--replace-force-backup, -rf`\n      Like ``--replace-backup`` except that if the file with the specified name\n      already exists, it is overwritten.\n \n@@ -1159,7 +1010,7 @@ building specialized scripts.\n \n    .. index:: --wide-character-encoding (gnatpp)\n \n-   :switch:`--wide-character-encoding={e}`\n+   :switch:`--wide-character-encoding={e}, -W={e}`\n      Specify the wide character encoding method for the input and output\n      files. ``e`` is one of the following:\n \n@@ -1198,18 +1049,17 @@ building specialized scripts.\n \n    :switch:`-P {file}`\n      Indicates the name of the project file that describes the set of sources\n-     to be processed. The exact set of argument sources depends on other options\n-     specified; see below.\n+     to be processed. The exact set of argument sources depends on other\n+     options specified; see below.\n \n \n    .. index:: -U  (gnatpp)\n \n    :switch:`-U`\n      If a project file is specified and no argument source is explicitly\n      specified (either directly or by means of ``--files`` option), process\n-     all the units of the closure of the argument project. Otherwise this option\n-     has no effect.\n-\n+     all the units of the closure of the argument project. Otherwise this\n+     option has no effect.\n \n    :switch:`-U {main_unit}`\n      If a project file is specified and no argument source is explicitly\n@@ -1255,13 +1105,13 @@ building specialized scripts.\n    .. index:: --pp-on  (gnatpp)\n \n    :switch:`--pp-on={xxx}`\n-     Use :switch:`--xxx` as the command to turn pretty printing back on, instead\n-     of the default ``--!pp on``.\n+     Use :switch:`--xxx` as the command to turn pretty printing back on,\n+     instead of the default ``--!pp on``.\n \n \n    .. index:: --files (gnatpp)\n \n-   :switch:`--files={filename}`\n+   :switch:`--files={filename}, -files={filename}`\n      Take as arguments the files listed in text file ``file``.\n      Text file ``file`` may contain empty lines that are ignored.\n      Each nonempty line should contain the name of an existing file.\n@@ -1274,23 +1124,24 @@ building specialized scripts.\n      Do not process the sources listed in a specified file. This option cannot\n      be used in incremental mode.\n \n+\n    .. index:: --jobs (gnatpp)\n \n-   :switch:`--jobs={n}`\n+   :switch:`--jobs={n}, -j={n}`\n      With ``--incremental``, use *n* ``gnatpp`` processes to perform\n      pretty printing in parallel. If *n* is 0, then the maximum number\n      processes is the number of core processors on the platform.\n \n \n    .. index:: --verbose (gnatpp)\n \n-   :switch:`--verbose`\n+   :switch:`--verbose, -v`\n      Verbose mode\n \n \n    .. index:: --quiet (gnatpp)\n \n-   :switch:`--quiet`\n+   :switch:`--quiet, -q`\n      Quiet mode\n \n    If a project file is specified and no argument source is explicitly\n@@ -1304,9 +1155,9 @@ building specialized scripts.\n    Formatting Rules\n    ----------------\n \n-   The following subsections show how ``gnatpp`` treats white space,\n-   comments, program layout, and name casing.\n-   They provide detailed descriptions of the switches shown above.\n+   The following subsections show how ``gnatpp`` treats, comments, program\n+   layout, name casing and how to disable ``gnatpp`` in source code regions.\n+   They provide more details of the switches shown above.\n \n \n    .. _Disabling_Pretty_Printing:\n@@ -1353,32 +1204,13 @@ building specialized scripts.\n    included in the argument to these switches.\n \n \n-   .. _White_Space_and_Empty_Lines:\n-\n-   White Space and Empty Lines\n-   ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-\n-   ``gnatpp`` does not have an option to control space characters.\n-   It will add or remove spaces according to the style illustrated by the\n-   examples in the :title:`Ada Reference Manual`.\n-   The output file will contain no lines with trailing white space.\n-\n-   By default, a sequence of one or more blank lines in the input is\n-   converted to a single blank line in the output; multiple blank lines\n-   are squeezed down to one.\n-   The ``--preserve-blank-lines`` option\n-   turns off the squeezing; each blank line in the input is copied\n-   to the output.\n-   The ``--insert-blank-lines`` option\n-   causes additional blank lines to be inserted if not already\n-   present in the input (e.g. between bodies).\n-\n-\n    .. _Formatting_Comments:\n \n    Formatting Comments\n    ^^^^^^^^^^^^^^^^^^^\n \n+   Only ``--layout=compact`` and ``--layout=tall`` format comments.\n+\n    Comments in Ada code are of two kinds:\n \n    * a *whole-line comment*, which appears by itself (possibly preceded by\n@@ -1390,38 +1222,21 @@ building specialized scripts.\n    A whole-line comment is indented according to the surrounding code,\n    with some exceptions. Comments that start in column 1 are kept\n    there. If possible, comments are not moved so far to the right that\n-   the maximum line length is exceeded. The ``--comments-unchanged``\n-   option turns off comment formatting. Special-form comments such as\n+   the maximum line length is exceeded. Special-form comments such as\n    SPARK-style ``--#...`` are left alone.\n \n    For an end-of-line comment, ``gnatpp`` tries to leave the same\n    number of spaces between the end of the preceding Ada code and the\n    beginning of the comment as appear in the original source.\n \n-   The ``--comments-gnat-beginning`` switch (GNAT style comment\n-   beginning) has the following effect:\n-\n-     * For each whole-line comment that does not end with two hyphens,\n-       ``gnatpp`` inserts spaces if necessary after the starting two\n-       hyphens to ensure that there are at least two spaces between\n-       these hyphens and the first non-blank character of the comment.\n+   For each whole-line comment that does not end with two hyphens or that are\n+   not special-form comments, ``gnatpp`` inserts spaces if necessary after the\n+   starting two hyphens to ensure that there are at least two spaces between\n+   these hyphens and the first non-blank character of the comment.\n \n-   The ``--comments-fill`` switch specifies that whole-line comments\n-   that form a paragraph will be filled in typical word processor style\n-   (that is, moving words between lines to make the lines other than the\n-   last similar in length ).\n-\n-   The ``--comments-only`` switch specifies that only the comments are\n-   formatted; the rest of the program text is left alone. The comments\n-   are formatted according to the ``--comments-gnat-beginning`` and\n-   ``--comments-fill`` switches; other formatting switches are ignored. For\n-   example, ``--comments-only --comments-fill`` means to fill comment\n-   paragraphs, and do nothing else. Likewise, ``--comments-only\n-   --comments-gnat-beginning`` ensures comments start with at least two\n-   spaces after ``--``, and ``--comments-only --comments-gnat-beginning\n-   --comments-fill`` does both. If ``--comments-only`` is given without\n-   ``--comments-gnat-beginning`` or ``--comments-fill``, then gnatpp\n-   doesn't format anything.\n+   With ``--layout=compact``, whole-line comments that form a paragraph will be\n+   filled in typical word processor style (that is, moving words between lines\n+   to make the lines other than the last similar in length).\n \n \n    .. _Name_Casing:\n@@ -1643,188 +1458,192 @@ building specialized scripts.\n    Legacy Switches\n    ^^^^^^^^^^^^^^^\n \n-   Some switches have a short form, mostly for legacy reasons,\n-   as shown below.\n-\n-   .. index:: -n (gnatpp)\n-\n-   :switch:`-nD`\n-     :switch:`--name-case-as-declared`\n-\n-   :switch:`-nU`\n-     :switch:`--name-upper-case`\n-\n-   :switch:`-nL`\n-     :switch:`--name-lower-case`\n-\n-   :switch:`-nM`\n-     :switch:`--name-mixed-case`\n-\n-   .. index:: -a (gnatpp)\n-\n-   :switch:`-aL`\n-     :switch:`--attribute-lower-case`\n-\n-   :switch:`-aU`\n-     :switch:`--attribute-upper-case`\n+   .. index:: --alignment (gnatpp)\n \n-   :switch:`-aM`\n-     :switch:`--attribute-mixed-case`\n+   :switch:`--alignment, --no-alignment`\n+      Programs can be easier to read if certain constructs are vertically\n+      aligned.\n \n-   .. index:: -k (gnatpp)\n+        * ``:`` in declarations,\n+        * ``:=`` in initializations in declarations,\n+        * ``:=`` in assignment statements,\n+        * ``=>`` in associations, and\n+        * ``at`` keywords in the component clauses in record representation\n+          clauses.\n \n-   :switch:`-kL`\n-     :switch:`--keyword-lower-case`\n+   .. index:: --align-modes (gnatpp)\n \n-   :switch:`-kU`\n-     :switch:`--keyword-upper-case`\n+   :switch:`--align-modes, --no-align-modes`\n \n-   .. index:: -ne (gnatpp)\n+      Line up ``in`` and ``out`` in parameter specifications.\n \n-   :switch:`-neD`\n-     :switch:`--enum-case-as-declared`\n+   .. index:: --compact (gnatpp)\n \n-   :switch:`-neU`\n-     :switch:`--enum-upper-case`\n+   :switch:`--compact, --no-compact`\n+     In calls and similar, ``--compact`` packs as many\n+     subexpressions on the same line as possible. Example:\n \n-   :switch:`-neL`\n-     :switch:`--enum-lower-case`\n+     .. code-block:: ada\n \n-   :switch:`-neM`\n-     :switch:`--enum-mixed-case`\n+        Some_Procedure\n+          (Short_One, Another_Short_One,\n+           A_Very_Very_Very_Very_Very_Very_Very_Very_Long_One);\n \n-   .. index:: -nt (gnatpp)\n+     On the contrary, with ``--no-compact``, in calls and similar, if it is\n+     necessary to split a line between two subexpressions (because otherwise\n+     the construct would exceed --max-line-length), then all such\n+     subexpressions are placed on separate lines. Example:\n \n-   :switch:`-ntD`\n-     :switch:`--type-case-as-declared`\n+     .. code-block:: ada\n \n-   :switch:`-ntU`\n-     :switch:`--type-upper-case`\n+        Some_Procedure\n+          (Short_One,\n+           Another_Short_One,\n+           A_Very_Very_Very_Very_Very_Very_Very_Very_Long_One);\n \n-   :switch:`-ntL`\n-     :switch:`--type-lower-case`\n+   .. index:: --end-id (gnatpp)\n \n-   :switch:`-ntM`\n-     :switch:`--type-mixed-case`\n+   :switch:`--end-id, --no-end-id`\n+     Insert the name of a unit after ``end``. Otherwise, leave whatever comes\n+     after ``end``, if anything, alone.\n \n-   :switch:`-nnU`\n-     :switch:`--number-upper-case`\n+   .. index:: --separate-is (gnatpp)\n \n-   :switch:`-nnL`\n-     :switch:`--number-lower-case`\n+   :switch:`--separate-is, --no-separate-is`\n+     Place the keyword ``is`` on a separate line in a subprogram body in\n+     case if the spec occupies more than one line.\n \n-   :switch:`-nnM`\n-     :switch:`--number-mixed-case`\n+   .. index:: --separate-return (gnatpp)\n \n-   .. index:: -p (gnatpp)\n+   :switch:`--separate-return, --no-separate-return`\n+     If a subprogram spec does not fit on one line, place the ``return`` on\n+     a separate line. Otherwise try to place it in the same line as the last\n+     parameter specification.\n \n-   :switch:`-pL`\n-     :switch:`--pragma-lower-case`\n+   .. index:: --separate-loop (gnatpp)\n \n-   :switch:`-pU`\n-     :switch:`--pragma-upper-case`\n+   :switch:`--separate-loop, --no-separate-loop`\n+     Place the keyword ``loop`` in FOR and WHILE loop statements\n+     on a separate line.\n \n-   :switch:`-pM`\n-     :switch:`--pragma-mixed-case`\n \n-   .. index:: -D (gnatpp)\n+   .. index:: --separate-then (gnatpp)\n \n-   :switch:`-D{file}`\n-     :switch:`--dictionary={file}`\n+   :switch:`--separate-then, --no-separate-then`\n+     Place the keyword ``then`` in IF statements\n+     on a separate line.\n \n-   .. index:: -D- (gnatpp)\n+   .. index:: --separate-loop-then (gnatpp)\n \n-   :switch:`-D-`\n-     :switch:`--dictionary=-`\n+   :switch:`--separate-loop-then, --no-separate-loop-then`\n+     Equivalent to :switch:`--separate-loop` :switch:`--separate-then`.\n \n-   .. index:: -c (gnatpp)\n+   .. index:: --split-line-before-record (gnatpp)\n \n-   :switch:`-c0`\n-     :switch:`--comments-unchanged`\n+   :switch:`--split-line-before-record, --no-split-line-before-record`\n+     Split the line just before ``record`` in a record type declaration.\n \n-   :switch:`-c1`\n-     :switch:`--comments-gnat-indentation`\n+   .. index:: --indent-named-statements (gnatpp)\n \n-   :switch:`-c3`\n-     :switch:`--comments-gnat-beginning`\n+   :switch:`--indent-named-statements, --no-indent-named-statements`\n+     Named block and loop statements are indented with respect to\n+     the name.\n \n-   :switch:`-c4`\n-     :switch:`--comments-fill`\n+   .. index:: --split-line-before-op (gnatpp)\n \n-   :switch:`-c5`\n-     :switch:`--comments-special`\n+   :switch:`--split-line-before-op, --no-split-line-before-op`\n+     If it is necessary to split a line at a binary operator, by default\n+     the line is split after the operator. With this option, it is split\n+     before the operator.\n \n-   .. index:: -M (gnatpp)\n+   .. index:: --use-on-new-line (gnatpp)\n \n-   :switch:`-M{nnn}`\n-     :switch:`--max-line-length={nnn}`\n+   :switch:`--use-on-new-line, --no-use-one-new-line`\n+     Start each USE clause in a context clause from a separate line.\n \n-   .. index:: -i (gnatpp)\n+   .. index:: --vertical-enum-types (gnatpp)\n \n-   :switch:`-i{nnn}`\n-     :switch:`--indentation={nnn}`\n+   :switch:`--vertical-enum-types, --no-vertical-enum-types`\n+     Format enumeration type declarations \"vertically\", e.g. each\n+     enumeration literal goes on a separate line.\n \n-   .. index:: -cl (gnatpp)\n+   .. index:: --vertical-array-types (gnatpp)\n \n-   :switch:`-cl{nnn}`\n-     :switch:`--indent-continuation={nnn}`\n+   :switch:`--vertical-array-types, --no-vertical-array-types`\n+     Format array type declarations \"vertically\", e.g. for\n+     multidimensional arrays, each index_subtype_definition or\n+     discrete_subtype_definition goes on a separate line.\n \n-   .. index:: -pipe (gnatpp)\n+   .. index:: --vertical-named-aggregates (gnatpp)\n \n-   :switch:`-pipe`\n-     :switch:`--pipe`\n+   :switch:`--vertical-named-aggregates, --no-vertical-named-aggregates`\n+     Format aggregates \"vertically\" if named notation is used for all\n+     component_associations, e.g. each component_association\n+     goes on a separate line.\n \n-   .. index:: -o (gnatpp)\n+   .. index:: --vertical-case-alternatives (gnatpp)\n \n-   :switch:`-o {output-file}`\n-     :switch:`--output={output-file}`\n+   :switch:`--vertical-case-alternatives, --no-vertical-case-alternatives`\n+     Format case statements, case expressions, and variant parts with\n+     additional line breaks.\n \n-   .. index:: -of (gnatpp)\n+   .. index:: --RM-style-spacing (gnatpp)\n \n-   :switch:`-of {output-file}`\n-     :switch:`--output-force={output-file}`\n+   :switch:`--RM-style-spacing`\n+     Do not insert an extra blank before various occurrences of\n+     '(' and ':'. Alignment is off by default in this mode;\n+     use :switch:`--alignment` to turn it on.\n \n-   .. index:: -r (gnatpp)\n+   .. index:: --insert-blank-lines (gnatpp)\n \n-   :switch:`-rnb`\n-     :switch:`--replace`\n+   :switch:`--insert-blank-lines, --no-insert-blank-lines`\n+     Insert blank lines where appropriate (between bodies and other large\n+     constructs).\n \n-   :switch:`-r`\n-     :switch:`--replace-backup`\n+   .. index:: --preserve-blank-lines (gnatpp)\n \n-   .. index:: -rf (gnatpp)\n+   :switch:`--preserve-blank-lines, --no-preserve-blank-lines`\n+     Preserve blank lines in the input. By default, gnatpp will squeeze\n+     multiple blank lines down to one.\n \n-   :switch:`-rf`\n-     :switch:`--replace-force-backup`\n+   .. index:: --preserve-line-breaks (gnatpp)\n \n-   .. index:: -rnb (gnatpp)\n+   :switch:`--preserve-line-breaks, --no-preserve-line-breaks`\n+     Preserve line breaks in the input, to the extent possible.\n+     By default, line breaks are also inserted at appropriate\n+     places.\n \n-   .. index:: --eol (gnatpp)\n+   .. index:: --source-line-breaks (gnatpp)\n \n-   .. index:: -W (gnatpp)\n+   :switch:`--source-line-breaks, --no-source-line-breaks`\n+     Keep the line breaks from the source; do not insert or delete any\n+     line breaks.\n \n-   :switch:`-W{e}`\n-     :switch:`--wide-character-encoding={e}`\n+   .. index:: --spaces-only (gnatpp)\n \n-   .. index:: -files (gnatpp)\n+   :switch:`--spaces-only, --no-spaces-only`\n+     Disable all formatting except for inserting and removing spaces.\n+     This implies --source-line-breaks.\n \n-   :switch:`-files {filename}`\n-     :switch:`--files={filename}`\n+   .. index:: -c (gnatpp)\n \n-   .. index:: -j (gnatpp)\n+   :switch:`--comments-unchanged, -c0`\n+     All comments remain unchanged.\n \n-   :switch:`-j{n}`\n-     :switch:`--jobs={n}`\n+   :switch:`--comments-gnat-indentation, -c1`\n+     GNAT-style comment line indentation.\n \n-   .. index:: -v (gnatpp)\n+   :switch:`--comments-gnat-beginning, -c3`\n+     GNAT-style comment beginning.\n \n-   :switch:`-v`\n-     :switch:`--verbose`\n+   :switch:`--comments-fill, -c4`\n+     Fill comment blocks.\n \n-   .. index:: -q (gnatpp)\n+   :switch:`--comments-special, -c5`\n+     Keep unchanged special form comments.\n \n-   :switch:`-q`\n-     :switch:`--quiet`\n+   :switch:`--comments-only`\n+     Format just the comments.\n \n \n .. only:: PRO or GPL"}]}