{"sha": "3bc8ba2577b766aa844b84255225cef90e7080bd", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2JjOGJhMjU3N2I3NjZhYTg0NGI4NDI1NTIyNWNlZjkwZTcwODBiZA==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@libertysurf.fr", "date": "2007-11-14T19:06:10Z"}, "committer": {"name": "Eric Botcazou", "email": "ebotcazou@gcc.gnu.org", "date": "2007-11-14T19:06:10Z"}, "message": "re PR tree-optimization/34046 (verify_flow_info failed)\n\n\tPR tree-optimization/34046\n\t* cfg.c (update_bb_profile_for_threading): Avoid the division for the\n\tscaling if the old probability is greater than the new base.\n\nFrom-SVN: r130185", "tree": {"sha": "8e5403c396a8dbd4755b716da39cbfb2ce9cd734", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8e5403c396a8dbd4755b716da39cbfb2ce9cd734"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3bc8ba2577b766aa844b84255225cef90e7080bd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3bc8ba2577b766aa844b84255225cef90e7080bd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3bc8ba2577b766aa844b84255225cef90e7080bd", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3bc8ba2577b766aa844b84255225cef90e7080bd/comments", "author": {"login": "ebotcazou", "id": 48091907, "node_id": "MDQ6VXNlcjQ4MDkxOTA3", "avatar_url": "https://avatars.githubusercontent.com/u/48091907?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ebotcazou", "html_url": "https://github.com/ebotcazou", "followers_url": "https://api.github.com/users/ebotcazou/followers", "following_url": "https://api.github.com/users/ebotcazou/following{/other_user}", "gists_url": "https://api.github.com/users/ebotcazou/gists{/gist_id}", "starred_url": "https://api.github.com/users/ebotcazou/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ebotcazou/subscriptions", "organizations_url": "https://api.github.com/users/ebotcazou/orgs", "repos_url": "https://api.github.com/users/ebotcazou/repos", "events_url": "https://api.github.com/users/ebotcazou/events{/privacy}", "received_events_url": "https://api.github.com/users/ebotcazou/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "a01e283ff5fd5bd1d0f8b274b01fe30fd98f82e8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a01e283ff5fd5bd1d0f8b274b01fe30fd98f82e8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a01e283ff5fd5bd1d0f8b274b01fe30fd98f82e8"}], "stats": {"total": 133, "additions": 131, "deletions": 2}, "files": [{"sha": "e13903d497ff8e664b764350d4d91711bda4a207", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3bc8ba2577b766aa844b84255225cef90e7080bd/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3bc8ba2577b766aa844b84255225cef90e7080bd/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=3bc8ba2577b766aa844b84255225cef90e7080bd", "patch": "@@ -1,3 +1,9 @@\n+2007-11-14  Eric Botcazou  <ebotcazou@libertysurf.fr>\n+\n+\tPR tree-optimization/34046\n+\t* cfg.c (update_bb_profile_for_threading): Avoid the division for the\n+\tscaling if the old probability is greater than the new base.\n+\n 2007-11-14  Sebastian Pop  <sebastian.pop@amd.com>\n \n \t* tree-ssa-loop-ivcanon.c (try_unroll_loop_completely): Remove"}, {"sha": "0b0e9503b2b7141d6fb6009bd7f80d93a673e777", "filename": "gcc/cfg.c", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3bc8ba2577b766aa844b84255225cef90e7080bd/gcc%2Fcfg.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3bc8ba2577b766aa844b84255225cef90e7080bd/gcc%2Fcfg.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcfg.c?ref=3bc8ba2577b766aa844b84255225cef90e7080bd", "patch": "@@ -990,9 +990,15 @@ update_bb_profile_for_threading (basic_block bb, int edge_frequency,\n \n       FOR_EACH_EDGE (c, ei, bb->succs)\n \t{\n-\t  c->probability = RDIV (c->probability * scale, 65536);\n-\t  if (c->probability > REG_BR_PROB_BASE)\n+\t  /* Protect from overflow due to additional scaling.  */\n+\t  if (c->probability > prob)\n \t    c->probability = REG_BR_PROB_BASE;\n+\t  else\n+\t    {\n+\t      c->probability = RDIV (c->probability * scale, 65536);\n+\t      if (c->probability > REG_BR_PROB_BASE)\n+\t\tc->probability = REG_BR_PROB_BASE;\n+\t    }\n \t}\n     }\n "}, {"sha": "ee8faa567282a81acb1fb64cb0f17cc81b252f7f", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3bc8ba2577b766aa844b84255225cef90e7080bd/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3bc8ba2577b766aa844b84255225cef90e7080bd/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=3bc8ba2577b766aa844b84255225cef90e7080bd", "patch": "@@ -1,3 +1,7 @@\n+2007-11-14  Eric Botcazou  <ebotcazou@libertysurf.fr>\n+\n+\t* gcc.c-torture/compile/20071114-1.c: New test.\n+\n 2007-11-13  Jerry DeLisle  <jvdelisle@gcc.gnu.org>\n \n \tPR fortran/31608"}, {"sha": "ddfbfefff4599759083e96f334d7bb7c80440b54", "filename": "gcc/testsuite/gcc.c-torture/compile/20071114-1.c", "status": "added", "additions": 113, "deletions": 0, "changes": 113, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3bc8ba2577b766aa844b84255225cef90e7080bd/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2F20071114-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3bc8ba2577b766aa844b84255225cef90e7080bd/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2F20071114-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2F20071114-1.c?ref=3bc8ba2577b766aa844b84255225cef90e7080bd", "patch": "@@ -0,0 +1,113 @@\n+/* PR tree-optimization/34046 */\n+/* Origin: dcb <dcb314@hotmail.com> */\n+\n+typedef unsigned char bool8;\n+typedef unsigned char uint8_t;\n+typedef unsigned short int uint16_t;\n+typedef unsigned int uint32_t;\n+typedef uint8_t uint8;\n+typedef uint16_t uint16;\n+typedef uint32_t uint32;\n+\n+struct SIAPU\n+{\n+    uint8 *PC;\n+    uint8 *RAM;\n+    uint8 Bit;\n+    uint32 Address;\n+    uint8 *WaitAddress1;\n+    uint8 *WaitAddress2;\n+    uint8 _Carry;\n+};\n+\n+struct SAPU\n+{\n+    bool8 ShowROM;\n+    uint8 OutPorts [4];\n+    uint8 ExtraRAM [64];\n+    uint16 TimerTarget [3];\n+};\n+\n+struct SAPU APU;\n+struct SIAPU IAPU;\n+\n+void S9xSetAPUControl (uint8 byte);\n+void S9xSetAPUDSP (uint8 byte);\n+uint8 S9xGetAPUDSP ();\n+\n+uint8 S9xAPUGetByte (uint32 Address)\n+{\n+  Address &= 0xffff;\n+\n+  if (Address <= 0xff && Address >= 0xf0)\n+    {\n+      if (Address >= 0xf4 && Address <= 0xf7)\n+\t{\n+\t  IAPU.WaitAddress2 = IAPU.WaitAddress1;\n+\t  IAPU.WaitAddress1 = IAPU.PC;\n+\t  return (IAPU.RAM [Address]);\n+\t}\n+      else if (Address == 0xf3)\n+\treturn (S9xGetAPUDSP ());\n+\n+      if (Address >= 0xfd)\n+\t{\n+\t  IAPU.WaitAddress2 = IAPU.WaitAddress1;\n+\t  IAPU.WaitAddress1 = IAPU.PC;\n+\t  uint8 t = IAPU.RAM [Address];\n+\t  IAPU.RAM [Address] = 0;\n+\t  return (t);\n+\t}\n+\n+      return (IAPU.RAM [Address]);\n+    }\n+ else\n+   return (IAPU.RAM [Address]);\n+}\n+\n+void S9xAPUSetByte (uint8 byte, uint32 Address)\n+{\n+  Address &= 0xffff;\n+\n+  if (Address <= 0xff && Address >= 0xf0)\n+    {\n+      if (Address == 0xf3)\n+\tS9xSetAPUDSP (byte);\n+      else if (Address >= 0xf4 && Address <= 0xf7)\n+\tAPU.OutPorts [Address - 0xf4] = byte;\n+      else if (Address == 0xf1)\n+\tS9xSetAPUControl (byte);\n+      else if (Address < 0xfd)\n+\t{\n+\t  IAPU.RAM [Address] = byte;\n+\t  if (Address >= 0xfa)\n+\t    {\n+\t      if (byte == 0)\n+\t\tAPU.TimerTarget [Address - 0xfa] = 0x100;\n+\t      else\n+\t\tAPU.TimerTarget [Address - 0xfa] = byte;\n+\t    }\n+\t}\n+    }\n+  else\n+    {\n+      if (Address < 0xffc0)\n+\tIAPU.RAM [Address] = byte;\n+      else\n+\t{\n+\t  APU.ExtraRAM [Address - 0xffc0] = byte;\n+\t  if (!APU.ShowROM)\n+\t    IAPU.RAM [Address] = byte;\n+\t}\n+    }\n+}\n+\n+void ApuCA ()\n+{\n+  IAPU.Address = *(uint16 *) (IAPU.PC + 1);\n+  IAPU.Bit = (uint8)(IAPU.Address >> 13);\n+  if ((IAPU._Carry))\n+    S9xAPUSetByte (S9xAPUGetByte (IAPU.Address) | (1 << IAPU.Bit), IAPU.Address);\n+  else\n+    S9xAPUSetByte (S9xAPUGetByte (IAPU.Address) & ~(1 << IAPU.Bit), IAPU.Address);\n+}"}]}