{"sha": "7cd23050596840cc1e81b43a9a57134f810678ac", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2NkMjMwNTA1OTY4NDBjYzFlODFiNDNhOWE1NzEzNGY4MTA2NzhhYw==", "commit": {"author": {"name": "Joseph Myers", "email": "joseph@codesourcery.com", "date": "2010-11-24T13:28:38Z"}, "committer": {"name": "Joseph Myers", "email": "jsm28@gcc.gnu.org", "date": "2010-11-24T13:28:38Z"}, "message": "common.opt (user_vect_verbosity_level): New Variable entry.\n\n\t* common.opt (user_vect_verbosity_level): New Variable entry.\n\t(ftree-vectorizer-verbose=): Mark as UInteger.\n\t* flag-types.h (enum vect_verbosity_levels): Move from enum\n\tverbosity_levels in tree-vectorizer.h.\n\t* opts.c: Don't include tree.h.\n\t(vect_set_verbosity_level): Move from tree-vectorizer.c.  Use\n\tgcc_options parameter; take integer option argument.\n\t(common_handle_option): Update call to vect_set_verbosity_level.\n\t* tree-vectorizer.c (user_vect_verbosity_level): Remove.\n\t(vect_set_verbosity_level): Move to opts.c.\n\t(vect_verbosity_level, vect_print_dump_info): Update for change of\n\tenum name.\n\t* tree-vectorizer.h (enum verbosity_levels): Move to flag-types.h.\n\t(vect_print_dump_info): Update for change of enum name.\n\t* tree.h (vect_set_verbosity_level): Remove.\n\t* Makefile.in (opts.o): Update dependencies.\n\nFrom-SVN: r167113", "tree": {"sha": "69c80cd877029c3116187ce4f501ceb7c5aeac54", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/69c80cd877029c3116187ce4f501ceb7c5aeac54"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7cd23050596840cc1e81b43a9a57134f810678ac", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7cd23050596840cc1e81b43a9a57134f810678ac", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7cd23050596840cc1e81b43a9a57134f810678ac", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7cd23050596840cc1e81b43a9a57134f810678ac/comments", "author": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "46cb1e5254dcc2f97d5fae2033ab3d92e8591bac", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/46cb1e5254dcc2f97d5fae2033ab3d92e8591bac", "html_url": "https://github.com/Rust-GCC/gccrs/commit/46cb1e5254dcc2f97d5fae2033ab3d92e8591bac"}], "stats": {"total": 103, "additions": 57, "deletions": 46}, "files": [{"sha": "5b63be3a425b2467c610cd549f4f06527a07089a", "filename": "gcc/ChangeLog", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7cd23050596840cc1e81b43a9a57134f810678ac/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7cd23050596840cc1e81b43a9a57134f810678ac/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=7cd23050596840cc1e81b43a9a57134f810678ac", "patch": "@@ -1,3 +1,22 @@\n+2010-11-24  Joseph Myers  <joseph@codesourcery.com>\n+\n+\t* common.opt (user_vect_verbosity_level): New Variable entry.\n+\t(ftree-vectorizer-verbose=): Mark as UInteger.\n+\t* flag-types.h (enum vect_verbosity_levels): Move from enum\n+\tverbosity_levels in tree-vectorizer.h.\n+\t* opts.c: Don't include tree.h.\n+\t(vect_set_verbosity_level): Move from tree-vectorizer.c.  Use\n+\tgcc_options parameter; take integer option argument.\n+\t(common_handle_option): Update call to vect_set_verbosity_level.\n+\t* tree-vectorizer.c (user_vect_verbosity_level): Remove.\n+\t(vect_set_verbosity_level): Move to opts.c.\n+\t(vect_verbosity_level, vect_print_dump_info): Update for change of\n+\tenum name.\n+\t* tree-vectorizer.h (enum verbosity_levels): Move to flag-types.h.\n+\t(vect_print_dump_info): Update for change of enum name.\n+\t* tree.h (vect_set_verbosity_level): Remove.\n+\t* Makefile.in (opts.o): Update dependencies.\n+\n 2010-11-24  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR middle-end/46629"}, {"sha": "3a86343f55c67ca6df91829e840ac3c01f0ac086", "filename": "gcc/Makefile.in", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7cd23050596840cc1e81b43a9a57134f810678ac/gcc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7cd23050596840cc1e81b43a9a57134f810678ac/gcc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FMakefile.in?ref=7cd23050596840cc1e81b43a9a57134f810678ac", "patch": "@@ -2824,7 +2824,7 @@ fold-const.o : fold-const.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) \\\n diagnostic.o : diagnostic.c $(CONFIG_H) $(SYSTEM_H) coretypes.h \\\n    version.h $(INPUT_H) intl.h $(DIAGNOSTIC_H) diagnostic.def\n opts.o : opts.c $(OPTS_H) $(OPTIONS_H) $(DIAGNOSTIC_CORE_H) $(CONFIG_H) $(SYSTEM_H) \\\n-   coretypes.h $(TREE_H) $(TM_H) $(RTL_H) \\\n+   coretypes.h $(TM_H) $(RTL_H) \\\n    $(DIAGNOSTIC_H) $(INSN_ATTR_H) intl.h $(TARGET_H) \\\n    $(FLAGS_H) $(PARAMS_H) opts-diagnostic.h\n opts-global.o : opts-global.c $(CONFIG_H) $(SYSTEM_H) coretypes.h \\"}, {"sha": "f4523db1cb52516833ee747440a82710cfc9350f", "filename": "gcc/common.opt", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7cd23050596840cc1e81b43a9a57134f810678ac/gcc%2Fcommon.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7cd23050596840cc1e81b43a9a57134f810678ac/gcc%2Fcommon.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcommon.opt?ref=7cd23050596840cc1e81b43a9a57134f810678ac", "patch": "@@ -152,6 +152,9 @@ bool use_gnu_debug_info_extensions\n Variable\n unsigned int initial_max_fld_align = TARGET_DEFAULT_PACK_STRUCT\n \n+Variable\n+enum vect_verbosity_levels user_vect_verbosity_level = MAX_VERBOSITY_LEVEL\n+\n ; -dA causes debug commentary information to be produced in\n ; the generated assembly code (to make it more readable).  This option\n ; is generally only of use to those who actually need to read the\n@@ -1952,7 +1955,7 @@ Common Report Var(flag_tree_vect_loop_version) Init(1) Optimization\n Enable loop versioning when doing loop vectorization on trees\n \n ftree-vectorizer-verbose=\n-Common RejectNegative Joined\n+Common RejectNegative Joined UInteger\n -ftree-vectorizer-verbose=<number>\tSet the verbosity level of the vectorizer\n \n ftree-scev-cprop"}, {"sha": "430ac93805c05cbd4b2c98fc3cda9bf48b8efc75", "filename": "gcc/flag-types.h", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7cd23050596840cc1e81b43a9a57134f810678ac/gcc%2Fflag-types.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7cd23050596840cc1e81b43a9a57134f810678ac/gcc%2Fflag-types.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fflag-types.h?ref=7cd23050596840cc1e81b43a9a57134f810678ac", "patch": "@@ -188,4 +188,20 @@ enum fp_contract_mode {\n   FP_CONTRACT_FAST = 2\n };\n \n+/* Vectorizer verbosity levels.  */\n+enum vect_verbosity_levels {\n+  REPORT_NONE,\n+  REPORT_VECTORIZED_LOCATIONS,\n+  REPORT_UNVECTORIZED_LOCATIONS,\n+  REPORT_COST,\n+  REPORT_ALIGNMENT,\n+  REPORT_DR_DETAILS,\n+  REPORT_BAD_FORM_LOOPS,\n+  REPORT_OUTER_LOOPS,\n+  REPORT_SLP,\n+  REPORT_DETAILS,\n+  /* New verbosity levels should be added before this one.  */\n+  MAX_VERBOSITY_LEVEL\n+};\n+\n #endif /* ! GCC_FLAG_TYPES_H */"}, {"sha": "fb6e6dc048f0c6e5adcd5f122ad0173010e249a3", "filename": "gcc/opts.c", "status": "modified", "additions": 14, "deletions": 2, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7cd23050596840cc1e81b43a9a57134f810678ac/gcc%2Fopts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7cd23050596840cc1e81b43a9a57134f810678ac/gcc%2Fopts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fopts.c?ref=7cd23050596840cc1e81b43a9a57134f810678ac", "patch": "@@ -32,7 +32,6 @@ along with GCC; see the file COPYING3.  If not see\n #include \"coretypes.h\"\n #include \"tm.h\" /* Needed by rtl.h and used for DWARF2_DEBUGGING_INFO\n \t\t   and DBX_DEBUGGING_INFO.  */\n-#include \"tree.h\" /* For vect_set_verbosity_level.  */\n #include \"rtl.h\" /* Needed by insn-attr.h.  */\n #include \"opts.h\"\n #include \"options.h\"\n@@ -144,6 +143,19 @@ set_struct_debug_option (struct gcc_options *opts, location_t loc,\n     }\n }\n \n+/* Handle -ftree-vectorizer-verbose=VAL for options OPTS.  */\n+\n+static void\n+vect_set_verbosity_level (struct gcc_options *opts, int val)\n+{\n+   if (val < MAX_VERBOSITY_LEVEL)\n+     opts->x_user_vect_verbosity_level = (enum vect_verbosity_levels) val;\n+   else\n+     opts->x_user_vect_verbosity_level\n+      = (enum vect_verbosity_levels) (MAX_VERBOSITY_LEVEL - 1);\n+}\n+\n+\n /* Strip off a legitimate source ending from the input string NAME of\n    length LEN.  Rather than having to know the names used by all of\n    our front ends, we strip off an ending of a period followed by\n@@ -1615,7 +1627,7 @@ common_handle_option (struct gcc_options *opts,\n       break;\n \n     case OPT_ftree_vectorizer_verbose_:\n-      vect_set_verbosity_level (arg);\n+      vect_set_verbosity_level (opts, value);\n       break;\n \n     case OPT_ftls_model_:"}, {"sha": "ed73deef66cb8ae8d872fb5a7e4c47eac1cd3335", "filename": "gcc/tree-vectorizer.c", "status": "modified", "additions": 2, "deletions": 22, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7cd23050596840cc1e81b43a9a57134f810678ac/gcc%2Ftree-vectorizer.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7cd23050596840cc1e81b43a9a57134f810678ac/gcc%2Ftree-vectorizer.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vectorizer.c?ref=7cd23050596840cc1e81b43a9a57134f810678ac", "patch": "@@ -75,8 +75,7 @@ FILE *vect_dump;\n \n /* vect_verbosity_level set to an invalid value\n    to mark that it's uninitialized.  */\n-static enum verbosity_levels vect_verbosity_level = MAX_VERBOSITY_LEVEL;\n-static enum verbosity_levels user_vect_verbosity_level = MAX_VERBOSITY_LEVEL;\n+static enum vect_verbosity_levels vect_verbosity_level = MAX_VERBOSITY_LEVEL;\n \n /* Loop or bb location.  */\n LOC vect_location;\n@@ -86,25 +85,6 @@ VEC(vec_void_p,heap) *stmt_vec_info_vec;\n \n \f\n \n-/* Function vect_set_verbosity_level.\n-\n-   Called from opts.c upon detection of the\n-   -ftree-vectorizer-verbose=N option.  */\n-\n-void\n-vect_set_verbosity_level (const char *val)\n-{\n-   unsigned int vl;\n-\n-   vl = atoi (val);\n-   if (vl < MAX_VERBOSITY_LEVEL)\n-     user_vect_verbosity_level = (enum verbosity_levels) vl;\n-   else\n-     user_vect_verbosity_level\n-      = (enum verbosity_levels) (MAX_VERBOSITY_LEVEL - 1);\n-}\n-\n-\n /* Function vect_set_dump_settings.\n \n    Fix the verbosity level of the vectorizer if the\n@@ -161,7 +141,7 @@ vect_set_dump_settings (bool slp)\n    For vectorization debug dumps.  */\n \n bool\n-vect_print_dump_info (enum verbosity_levels vl)\n+vect_print_dump_info (enum vect_verbosity_levels vl)\n {\n   if (vl > vect_verbosity_level)\n     return false;"}, {"sha": "b2cc2d1b22ef6827c80b606004d480678f6a3618", "filename": "gcc/tree-vectorizer.h", "status": "modified", "additions": 1, "deletions": 17, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7cd23050596840cc1e81b43a9a57134f810678ac/gcc%2Ftree-vectorizer.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7cd23050596840cc1e81b43a9a57134f810678ac/gcc%2Ftree-vectorizer.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vectorizer.h?ref=7cd23050596840cc1e81b43a9a57134f810678ac", "patch": "@@ -70,22 +70,6 @@ enum vect_def_type {\n                                    || ((D) == vect_double_reduction_def) \\\n                                    || ((D) == vect_nested_cycle))\n \n-/* Define verbosity levels.  */\n-enum verbosity_levels {\n-  REPORT_NONE,\n-  REPORT_VECTORIZED_LOCATIONS,\n-  REPORT_UNVECTORIZED_LOCATIONS,\n-  REPORT_COST,\n-  REPORT_ALIGNMENT,\n-  REPORT_DR_DETAILS,\n-  REPORT_BAD_FORM_LOOPS,\n-  REPORT_OUTER_LOOPS,\n-  REPORT_SLP,\n-  REPORT_DETAILS,\n-  /* New verbosity levels should be added before this one.  */\n-  MAX_VERBOSITY_LEVEL\n-};\n-\n /************************************************************************\n   SLP\n  ************************************************************************/\n@@ -902,6 +886,6 @@ void vect_pattern_recog (loop_vec_info);\n /* In tree-vectorizer.c.  */\n unsigned vectorize_loops (void);\n /* Vectorization debug information */\n-extern bool vect_print_dump_info (enum verbosity_levels);\n+extern bool vect_print_dump_info (enum vect_verbosity_levels);\n \n #endif  /* GCC_TREE_VECTORIZER_H  */"}, {"sha": "92dff62a885bd6c8f93fb5a8f26649a4c6dd5ee3", "filename": "gcc/tree.h", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7cd23050596840cc1e81b43a9a57134f810678ac/gcc%2Ftree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7cd23050596840cc1e81b43a9a57134f810678ac/gcc%2Ftree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.h?ref=7cd23050596840cc1e81b43a9a57134f810678ac", "patch": "@@ -5425,9 +5425,6 @@ extern bool in_gimple_form;\n extern tree get_base_address (tree t);\n extern void mark_addressable (tree);\n \n-/* In tree-vectorizer.c.  */\n-extern void vect_set_verbosity_level (const char *);\n-\n /* In tree.c.  */\n \n struct GTY(()) tree_map_base {"}]}