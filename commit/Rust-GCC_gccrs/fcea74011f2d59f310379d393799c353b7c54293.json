{"sha": "fcea74011f2d59f310379d393799c353b7c54293", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmNlYTc0MDExZjJkNTlmMzEwMzc5ZDM5Mzc5OWMzNTNiN2M1NDI5Mw==", "commit": {"author": {"name": "Kriang Lerdsuwanakij", "email": "lerdsuwa@users.sourceforge.net", "date": "2003-05-11T09:45:30Z"}, "committer": {"name": "Kriang Lerdsuwanakij", "email": "lerdsuwa@gcc.gnu.org", "date": "2003-05-11T09:45:30Z"}, "message": "re PR c++/10552 (Small sample using nested templates causes internal compiler error.)\n\n\tPR c++/10552\n\t* pt.c (tsubst_copy): Handle TEMPLATE_DECL that is a member class\n\ttemplate and has dependent context.\n\n\t* g++.dg/template/ttp6.C: New test.\n\nFrom-SVN: r66682", "tree": {"sha": "fafd1d159294e40e041c9c430a0138c23d9ef377", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/fafd1d159294e40e041c9c430a0138c23d9ef377"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/fcea74011f2d59f310379d393799c353b7c54293", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fcea74011f2d59f310379d393799c353b7c54293", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fcea74011f2d59f310379d393799c353b7c54293", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fcea74011f2d59f310379d393799c353b7c54293/comments", "author": null, "committer": null, "parents": [{"sha": "cdc958d823386608ae27e2cda751711595dd838d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cdc958d823386608ae27e2cda751711595dd838d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cdc958d823386608ae27e2cda751711595dd838d"}], "stats": {"total": 54, "additions": 54, "deletions": 0}, "files": [{"sha": "9aa822b8ceffd55089e8e3ba9a4e08aeeda77277", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fcea74011f2d59f310379d393799c353b7c54293/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fcea74011f2d59f310379d393799c353b7c54293/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=fcea74011f2d59f310379d393799c353b7c54293", "patch": "@@ -1,3 +1,9 @@\n+2003-05-11  Kriang Lerdsuwanakij  <lerdsuwa@users.sourceforge.net>\n+\n+\tPR c++/10552\n+\t* pt.c (tsubst_copy): Handle TEMPLATE_DECL that is a member class\n+\ttemplate and has dependent context.\n+\n 2003-05-10  Kriang Lerdsuwanakij  <lerdsuwa@users.sourceforge.net>\n \n \t* pt.c (instantiate_decl): Call push/pop_deferring_access_checks."}, {"sha": "efc37740b0c76f9fd5d9640da5ee0bf35e3f3d60", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fcea74011f2d59f310379d393799c353b7c54293/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fcea74011f2d59f310379d393799c353b7c54293/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=fcea74011f2d59f310379d393799c353b7c54293", "patch": "@@ -7294,7 +7294,29 @@ tsubst_copy (t, args, complain, in_decl)\n \t\t       args, complain, in_decl);\n       else if (is_member_template (t))\n \treturn tsubst (t, args, complain, in_decl);\n+      else if (DECL_CLASS_SCOPE_P (t)\n+\t       && uses_template_parms (DECL_CONTEXT (t)))\n+\t{\n+\t  /* Template template argument like the following example need\n+\t     special treatment:\n+\n+\t       template <template <class> class TT> struct C {};\n+\t       template <class T> struct D {\n+\t\t template <class U> struct E {};\n+\t \t C<E> c;\t\t\t\t// #1\n+\t       };\n+\t       D<int> d;\t\t\t\t// #2\n+\n+\t     We are processing the template argument `E' in #1 for\n+\t     the template instantiation #2.  Originally, `E' is a\n+\t     TEMPLATE_DECL with `D<T>' as its DECL_CONTEXT.  Now we\n+\t     have to substitute this with one having context `D<int>'.  */\n+\n+\t  tree context = tsubst (DECL_CONTEXT (t), args, complain, in_decl);\n+\t  return lookup_field (context, DECL_NAME(t), 0, false);\n+\t}\n       else\n+\t/* Ordinary template template argument.  */\n \treturn t;\n \n     case LOOKUP_EXPR:"}, {"sha": "ade25071722b474becf0ad4dc37e289fb34edc57", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fcea74011f2d59f310379d393799c353b7c54293/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fcea74011f2d59f310379d393799c353b7c54293/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=fcea74011f2d59f310379d393799c353b7c54293", "patch": "@@ -1,3 +1,8 @@\n+2003-05-11  Kriang Lerdsuwanakij  <lerdsuwa@users.sourceforge.net>\n+\n+\tPR c++/10552\n+\t* g++.dg/template/ttp6.C: New test.\n+\n 2003-05-11  Richard Sandiford  <rsandifo@redhat.com>\n \n \t* gcc.c-torture/execute/builtins: New directory."}, {"sha": "a4c6ab059b21a440d44c1e00e52d341ee4cd3b89", "filename": "gcc/testsuite/g++.dg/template/ttp6.C", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fcea74011f2d59f310379d393799c353b7c54293/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fttp6.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fcea74011f2d59f310379d393799c353b7c54293/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fttp6.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fttp6.C?ref=fcea74011f2d59f310379d393799c353b7c54293", "patch": "@@ -0,0 +1,21 @@\n+// { dg-do compile }\n+\n+// Origin: Eelis van der Weegen <gccbugs@contacts.eelis.net>\n+\n+// PR c++/10552: Member class template as template template argument\n+// substitution issue.\n+\n+template <template <typename> class A, typename>\n+struct B\n+{\n+  typedef typename A<int>::t t;\n+};\n+\n+template <typename D>\n+struct E\n+{\n+  template <typename> struct F { typedef int t; };\n+  typedef typename B<F, D>::t t;\n+};\n+\n+typedef E<int>::t t;"}]}