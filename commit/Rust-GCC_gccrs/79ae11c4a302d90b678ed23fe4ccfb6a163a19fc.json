{"sha": "79ae11c4a302d90b678ed23fe4ccfb6a163a19fc", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzlhZTExYzRhMzAyZDkwYjY3OGVkMjNmZTRjY2ZiNmExNjNhMTlmYw==", "commit": {"author": {"name": "Dorit Naishlos", "email": "dorit@il.ibm.com", "date": "2003-10-07T08:18:42Z"}, "committer": {"name": "Dorit Nuzman", "email": "dorit@gcc.gnu.org", "date": "2003-10-07T08:18:42Z"}, "message": "sched-int.h (sched_info): New field sched_max_insns_priority.\n\n        * sched-int.h (sched_info): New field\n        sched_max_insns_priority.\n        * sched-rgn.c (init_ready_list): Add invocations to\n        targetm.sched.adjust_priority.\n        (sched_max_insns_priority): Init new field.\n        * sched-ebb.c (sched_max_insns_priority): Init new field.\n        * haifa-sched.c (set_priorities): Set\n        sched_info->sched_max_insns_priority.\n        * config/rs6000/rs6000.h:\n        (rs6000_sched_restricted_insns_priority_str): Support new\n        flag -mprioritize-restricted-insns.\n        (DEFAULT_RESTRICTED_INSNS_PRIORITY): Define.\n        * config/rs6000/rs6000.c (is_dispatch_slot_restricted): New\n        function.\n        (rs6000_adjust_priority): Change priority of restricted\n        insns, using above new function and new flag.\n        * doc/invoke.texi (-mprioritize-restricted-insns): Document\n        new option.\n\nFrom-SVN: r72186", "tree": {"sha": "f042ad15742db1c1a7071c97d5bdc6214b27d841", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f042ad15742db1c1a7071c97d5bdc6214b27d841"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/79ae11c4a302d90b678ed23fe4ccfb6a163a19fc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/79ae11c4a302d90b678ed23fe4ccfb6a163a19fc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/79ae11c4a302d90b678ed23fe4ccfb6a163a19fc", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/79ae11c4a302d90b678ed23fe4ccfb6a163a19fc/comments", "author": null, "committer": null, "parents": [{"sha": "118355a03a02364b065d54f0d2fcfba4280b1226", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/118355a03a02364b065d54f0d2fcfba4280b1226", "html_url": "https://github.com/Rust-GCC/gccrs/commit/118355a03a02364b065d54f0d2fcfba4280b1226"}], "stats": {"total": 148, "additions": 141, "deletions": 7}, "files": [{"sha": "3298828987b8bc5b68fac53ffd281ae57a3092c0", "filename": "gcc/ChangeLog", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/79ae11c4a302d90b678ed23fe4ccfb6a163a19fc/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/79ae11c4a302d90b678ed23fe4ccfb6a163a19fc/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=79ae11c4a302d90b678ed23fe4ccfb6a163a19fc", "patch": "@@ -1,3 +1,24 @@\n+2003-10-07  Dorit Naishlos <dorit@il.ibm.com>\n+\n+\t* sched-int.h (sched_info): New field \n+\tsched_max_insns_priority.\n+\t* sched-rgn.c (init_ready_list): Add invocations to\n+        targetm.sched.adjust_priority.  \n+\t(sched_max_insns_priority): Init new field.\n+\t* sched-ebb.c (sched_max_insns_priority): Init new field.\n+        * haifa-sched.c (set_priorities): Set\n+\tsched_info->sched_max_insns_priority. \n+        * config/rs6000/rs6000.h:\n+        (rs6000_sched_restricted_insns_priority_str): Support new\n+        flag -mprioritize-restricted-insns.\n+        (DEFAULT_RESTRICTED_INSNS_PRIORITY): Define.\n+        * config/rs6000/rs6000.c (is_dispatch_slot_restricted): New\n+        function.\n+        (rs6000_adjust_priority): Change priority of restricted\n+        insns, using above new function and new flag.\n+        * doc/invoke.texi (-mprioritize-restricted-insns): Document\n+        new option.\n+\t\n 2003-10-07  Zack Weinberg  <zack@codesourcery.com>\n \n \t* expr.c (cmpstr_optab, cmpmem_optab): New."}, {"sha": "2dd108a41374ed48e7742c79d1c4104dc551880c", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 75, "deletions": 2, "changes": 77, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/79ae11c4a302d90b678ed23fe4ccfb6a163a19fc/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/79ae11c4a302d90b678ed23fe4ccfb6a163a19fc/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=79ae11c4a302d90b678ed23fe4ccfb6a163a19fc", "patch": "@@ -51,6 +51,7 @@\n #include \"langhooks.h\"\n #include \"reload.h\"\n #include \"cfglayout.h\"\n+#include \"sched-int.h\"\n #if TARGET_XCOFF\n #include \"xcoffout.h\"  /* get declarations of xcoff_*_section_name */\n #endif\n@@ -80,6 +81,11 @@ struct rs6000_cpu_select rs6000_select[3] =\n   { (const char *)0,\t\"-mtune=\",\t\t1,\t0 },\n };\n \n+/* Support adjust_priority scheduler hook \n+   and -mprioritize-restricted-insns= option.  */\n+const char *rs6000_sched_restricted_insns_priority_str;\n+int rs6000_sched_restricted_insns_priority;\n+\n /* Size of long double */\n const char *rs6000_long_double_size_string;\n int rs6000_long_double_type_size;\n@@ -268,6 +274,7 @@ static int rs6000_use_dfa_pipeline_interface (void);\n static int rs6000_variable_issue (FILE *, int, rtx, int);\n static bool rs6000_rtx_costs (rtx, int, int, int *);\n static int rs6000_adjust_cost (rtx, rtx, rtx, int);\n+static int is_dispatch_slot_restricted (rtx);\n static int rs6000_adjust_priority (rtx, int);\n static int rs6000_issue_rate (void);\n static int rs6000_use_sched_lookahead (void);\n@@ -824,6 +831,12 @@ rs6000_override_options (const char *default_cpu)\n       rs6000_default_long_calls = (base[0] != 'n');\n     }\n \n+  /* Handle -mprioritize-restrcted-insns option.  */\n+  rs6000_sched_restricted_insns_priority = DEFAULT_RESTRICTED_INSNS_PRIORITY;\n+  if (rs6000_sched_restricted_insns_priority_str)\n+    rs6000_sched_restricted_insns_priority =\n+      atoi (rs6000_sched_restricted_insns_priority_str);\n+\n #ifdef TARGET_REGNAMES\n   /* If the user desires alternate register names, copy in the\n      alternate names now.  */\n@@ -13097,9 +13110,50 @@ rs6000_adjust_cost (rtx insn, rtx link, rtx dep_insn ATTRIBUTE_UNUSED,\n   return cost;\n }\n \n+/* The function returns a non-zero value if INSN can be scheduled only\n+   as the first insn in a dispatch group (\"dispatch-slot restricted\"). \n+   In this case, the returned value indicates how many dispatch slots \n+   the insn occupies (at the beginning of the group). \n+   Return 0 otherwise.  */\n+\n+static int \n+is_dispatch_slot_restricted (rtx insn)\n+{\n+  enum attr_type type;\n+\n+  if (rs6000_cpu != PROCESSOR_POWER4)\n+    return 0;\n+\n+  if (!insn\n+      || insn == NULL_RTX\n+      || GET_CODE (insn) == NOTE\n+      || GET_CODE (PATTERN (insn)) == USE\n+      || GET_CODE (PATTERN (insn)) == CLOBBER)\n+    return 0;\n+\n+  type = get_attr_type (insn);\n+\n+  switch (type){\n+  case TYPE_MFCR:\n+  case TYPE_MFCRF:\n+  case TYPE_MTCR:\n+  case TYPE_DELAYED_CR:\n+  case TYPE_CR_LOGICAL:\n+  case TYPE_MTJMPR:\n+  case TYPE_MFJMPR:\n+    return 1;\n+  case TYPE_IDIV:\n+  case TYPE_LDIV:\n+    return 2;\n+  default:\n+    return 0;\n+  }\n+}\n+\n+\n /* A C statement (sans semicolon) to update the integer scheduling\n-   priority INSN_PRIORITY (INSN).  Reduce the priority to execute the\n-   INSN earlier, increase the priority to execute INSN later.  Do not\n+   priority INSN_PRIORITY (INSN). Increase the priority to execute the\n+   INSN earlier, reduce the priority to execute INSN later.  Do not\n    define this macro if you do not need to adjust the scheduling\n    priorities of insns.  */\n \n@@ -13136,6 +13190,25 @@ rs6000_adjust_priority (rtx insn ATTRIBUTE_UNUSED, int priority)\n   }\n #endif\n \n+  if (is_dispatch_slot_restricted (insn)\n+      && reload_completed\n+      && current_sched_info->sched_max_insns_priority \n+      && rs6000_sched_restricted_insns_priority)\n+    {\n+\n+      /* Prioritize insns that can be dispatched only in the first dispatch slot.  */\n+      if (rs6000_sched_restricted_insns_priority == 1)\n+\t/* Attach highest priority to insn. This means that in \n+\t   haifa-sched.c:ready_sort(), dispatch-slot restriction considerations \n+\t   precede 'priority' (critical path) considerations.  */\n+\treturn current_sched_info->sched_max_insns_priority; \n+      else if (rs6000_sched_restricted_insns_priority == 2)\n+\t/* Increase priority of insn by a minimal amount. This means that in \n+\t   haifa-sched.c:ready_sort(), only 'priority' (critical path) considerations\n+\t   precede dispatch-slot restriction considerations.  */\n+\treturn (priority + 1); \n+    } \n+\n   return priority;\n }\n "}, {"sha": "beaf8d3b2123ff588ecafac34be32cc3a9622655", "filename": "gcc/config/rs6000/rs6000.h", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/79ae11c4a302d90b678ed23fe4ccfb6a163a19fc/gcc%2Fconfig%2Frs6000%2Frs6000.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/79ae11c4a302d90b678ed23fe4ccfb6a163a19fc/gcc%2Fconfig%2Frs6000%2Frs6000.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.h?ref=79ae11c4a302d90b678ed23fe4ccfb6a163a19fc", "patch": "@@ -404,6 +404,8 @@ extern enum processor_type rs6000_cpu;\n    {\"no-longcall\", &rs6000_longcall_switch, \"\", 0},\t\t\t\\\n    {\"align-\", &rs6000_alignment_string,\t\t\t\t\t\\\n     N_(\"Specify alignment of structure fields default/natural\"), 0},\t\\\n+   {\"prioritize-restricted-insns=\", &rs6000_sched_restricted_insns_priority_str, \\\n+    N_(\"Specify scheduling priority for dispatch slot restricted insns\"), 0}, \\\n    SUBTARGET_OPTIONS\t\t\t\t\t\t\t\\\n }\n \n@@ -457,6 +459,8 @@ extern const char *rs6000_longcall_switch;\n extern int rs6000_default_long_calls;\n extern const char* rs6000_alignment_string;\n extern int rs6000_alignment_flags;\n+extern const char *rs6000_sched_restricted_insns_priority_str;\n+extern int rs6000_sched_restricted_insns_priority;\n \n /* Alignment options for fields in structures for sub-targets following\n    AIX-like ABI.\n@@ -475,6 +479,9 @@ extern int rs6000_alignment_flags;\n #define TARGET_ALIGN_NATURAL 0\n #endif\n \n+/* Define if the target has restricted dispatch slot instructions.  */\n+#define DEFAULT_RESTRICTED_INSNS_PRIORITY (rs6000_cpu == PROCESSOR_POWER4 ? 1 : 0)\n+\n /* Define TARGET_MFCRF if the target assembler supports the optional\n    field operand for mfcr and the target processor supports the\n    instruction.  */"}, {"sha": "d6ab928ae51e65ef451707db43b82b6bb772eea6", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/79ae11c4a302d90b678ed23fe4ccfb6a163a19fc/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/79ae11c4a302d90b678ed23fe4ccfb6a163a19fc/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=79ae11c4a302d90b678ed23fe4ccfb6a163a19fc", "patch": "@@ -431,6 +431,7 @@ in the following sections.\n -mno-relocatable  -mrelocatable-lib  -mno-relocatable-lib @gol\n -mtoc  -mno-toc  -mlittle  -mlittle-endian  -mbig  -mbig-endian @gol\n -mdynamic-no-pic @gol\n+-mprioritize-restricted-insns=@var{priority} @gol\n -mcall-sysv  -mcall-netbsd @gol\n -maix-struct-return  -msvr4-struct-return @gol\n -mabi=altivec  -mabi=no-altivec @gol\n@@ -7526,6 +7527,14 @@ relocatable, but that its external references are relocatable.  The\n resulting code is suitable for applications, but not shared\n libraries.\n \n+@item -mprioritize-restricted-insns=@var{priority}\n+@opindex mprioritize-restricted-insns\n+This option controls the priority that is assigned to \n+dispatch-slot restricted instructions during the second scheduling \n+pass.  The argument @var{priority} takes the value @var{0/1/2} to assign \n+@var{no/highest/second-highest} priority to dispatch slot restricted \n+instructions.\n+\n @item -mcall-sysv\n @opindex mcall-sysv\n On System V.4 and embedded PowerPC systems compile code using calling"}, {"sha": "652ad18b83b17d4144e38f7bd92b07e248d7ee5e", "filename": "gcc/haifa-sched.c", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/79ae11c4a302d90b678ed23fe4ccfb6a163a19fc/gcc%2Fhaifa-sched.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/79ae11c4a302d90b678ed23fe4ccfb6a163a19fc/gcc%2Fhaifa-sched.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fhaifa-sched.c?ref=79ae11c4a302d90b678ed23fe4ccfb6a163a19fc", "patch": "@@ -2517,7 +2517,8 @@ set_priorities (rtx head, rtx tail)\n {\n   rtx insn;\n   int n_insn;\n-\n+  int sched_max_insns_priority = \n+\tcurrent_sched_info->sched_max_insns_priority;\n   rtx prev_head;\n \n   prev_head = PREV_INSN (head);\n@@ -2526,14 +2527,22 @@ set_priorities (rtx head, rtx tail)\n     return 0;\n \n   n_insn = 0;\n+  sched_max_insns_priority = 0;\n   for (insn = tail; insn != prev_head; insn = PREV_INSN (insn))\n     {\n       if (GET_CODE (insn) == NOTE)\n \tcontinue;\n \n       n_insn++;\n       (void) priority (insn);\n+\n+      if (INSN_PRIORITY_KNOWN (insn))\n+\tsched_max_insns_priority =\n+\t  MAX (sched_max_insns_priority, INSN_PRIORITY (insn)); \n     }\n+  sched_max_insns_priority += 1;\n+  current_sched_info->sched_max_insns_priority =\n+\tsched_max_insns_priority;\n \n   return n_insn;\n }"}, {"sha": "06637d755932ced32828415f084e3e61601bb7dc", "filename": "gcc/sched-ebb.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/79ae11c4a302d90b678ed23fe4ccfb6a163a19fc/gcc%2Fsched-ebb.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/79ae11c4a302d90b678ed23fe4ccfb6a163a19fc/gcc%2Fsched-ebb.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsched-ebb.c?ref=79ae11c4a302d90b678ed23fe4ccfb6a163a19fc", "patch": "@@ -204,7 +204,7 @@ static struct sched_info ebb_sched_info =\n \n   NULL, NULL,\n   NULL, NULL,\n-  0, 1\n+  0, 1, 0\n };\n \f\n /* It is possible that ebb scheduling eliminated some blocks."}, {"sha": "ba056e051a495c3988f9015b1b7fcf21a97ce407", "filename": "gcc/sched-int.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/79ae11c4a302d90b678ed23fe4ccfb6a163a19fc/gcc%2Fsched-int.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/79ae11c4a302d90b678ed23fe4ccfb6a163a19fc/gcc%2Fsched-int.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsched-int.h?ref=79ae11c4a302d90b678ed23fe4ccfb6a163a19fc", "patch": "@@ -167,6 +167,9 @@ struct sched_info\n      has completed, e.g. if we're using it to initialize state for successor\n      blocks in region scheduling.  */\n   unsigned int use_cselib:1;\n+\n+  /* Maximum priority that has been assigned to an insn.  */\n+  int sched_max_insns_priority;\n };\n \n extern struct sched_info *current_sched_info;"}, {"sha": "0b89e35ee3ec4eedd1a4b7c0b0a66fc617957b16", "filename": "gcc/sched-rgn.c", "status": "modified", "additions": 15, "deletions": 3, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/79ae11c4a302d90b678ed23fe4ccfb6a163a19fc/gcc%2Fsched-rgn.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/79ae11c4a302d90b678ed23fe4ccfb6a163a19fc/gcc%2Fsched-rgn.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsched-rgn.c?ref=79ae11c4a302d90b678ed23fe4ccfb6a163a19fc", "patch": "@@ -1756,7 +1756,13 @@ init_ready_list (struct ready_list *ready)\n   for (insn = NEXT_INSN (prev_head); insn != next_tail; insn = NEXT_INSN (insn))\n     {\n       if (INSN_DEP_COUNT (insn) == 0)\n-\tready_add (ready, insn);\n+\t{\n+\t  ready_add (ready, insn);\n+\n+\t  if (targetm.sched.adjust_priority)\n+\t    INSN_PRIORITY (insn) =\n+\t      (*targetm.sched.adjust_priority) (insn, INSN_PRIORITY (insn));\n+\t}\n       target_n_insns++;\n     }\n \n@@ -1792,7 +1798,13 @@ init_ready_list (struct ready_list *ready)\n \t\t\t&& check_live (insn, bb_src)\n \t\t\t&& is_exception_free (insn, bb_src, target_bb))))\n \t      if (INSN_DEP_COUNT (insn) == 0)\n-\t\tready_add (ready, insn);\n+\t\t{\n+\t\t  ready_add (ready, insn); \n+\n+\t\t  if (targetm.sched.adjust_priority)\n+\t\t    INSN_PRIORITY (insn) =\n+\t\t      (*targetm.sched.adjust_priority) (insn, INSN_PRIORITY (insn));\n+\t\t}\n \t  }\n       }\n }\n@@ -1982,7 +1994,7 @@ static struct sched_info region_sched_info =\n \n   NULL, NULL,\n   NULL, NULL,\n-  0, 0\n+  0, 0, 0\n };\n \n /* Determine if PAT sets a CLASS_LIKELY_SPILLED_P register.  */"}]}