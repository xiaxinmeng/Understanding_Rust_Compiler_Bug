{"sha": "b9f3a4b07df15081483fd4caa5d1e29266917fa3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjlmM2E0YjA3ZGYxNTA4MTQ4M2ZkNGNhYTVkMWUyOTI2NjkxN2ZhMw==", "commit": {"author": {"name": "Thomas Quinot", "email": "quinot@adacore.com", "date": "2007-06-06T10:46:09Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2007-06-06T10:46:09Z"}, "message": "2007-04-20  Thomas Quinot  <quinot@adacore.com>\n\t    Olivier Hainque  <hainque@adacore.com>\n\n\t* a-except-2005.ads, a-except-2005.adb\n\t(Raise_From_Controlled_Operation): New procedure in\n\t(private part of) Ada.Exceptions (standard runtime version). Used to\n\tprovide informational exception message when Program_Error is raised as\n\ta result of an Adjust or Finalize operation propagating an exception.\n\t(Rmsg_28): Fix description for E.4(18) check.\n\t(Raise_Current_Excep): Call Debug_Raise_Exception just before\n\tpropagation starts, to let debuggers know about the event in a reliable\n\tfashion.\n\tTake the address of E and dereference to make sure it is homed on stack\n\tand prevent the stores from being deleted, necessary for proper\n\tdebugger behavior on \"break exception\" hits.\n\t(Local_Raise): Moved to System.Exceptions\n\n\t* s-finimp.adb (Raise_From_Finalize): Code to construct an appropriate\n\texception message from the current occurrence and raise Program_Error\n\thas been moved to Ada.Exceptions.Raise_From_Controlled_Operation.\n\nFrom-SVN: r125457", "tree": {"sha": "a0347eac9298fdcd88515c8969bbf80681c7987a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a0347eac9298fdcd88515c8969bbf80681c7987a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b9f3a4b07df15081483fd4caa5d1e29266917fa3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b9f3a4b07df15081483fd4caa5d1e29266917fa3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b9f3a4b07df15081483fd4caa5d1e29266917fa3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b9f3a4b07df15081483fd4caa5d1e29266917fa3/comments", "author": null, "committer": null, "parents": [{"sha": "1c8e4e2e5556facd565d1e61bb0433b37ff86243", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1c8e4e2e5556facd565d1e61bb0433b37ff86243", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1c8e4e2e5556facd565d1e61bb0433b37ff86243"}], "stats": {"total": 150, "additions": 88, "deletions": 62}, "files": [{"sha": "6af47c3686e158795d6a1d3fc7ce28b2d6bbfd5d", "filename": "gcc/ada/a-except-2005.adb", "status": "modified", "additions": 62, "deletions": 22, "changes": 84, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b9f3a4b07df15081483fd4caa5d1e29266917fa3/gcc%2Fada%2Fa-except-2005.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b9f3a4b07df15081483fd4caa5d1e29266917fa3/gcc%2Fada%2Fa-except-2005.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-except-2005.adb?ref=b9f3a4b07df15081483fd4caa5d1e29266917fa3", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1992-2006, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2007, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -49,6 +49,7 @@ pragma Polling (Off);\n --  elaboration circularities with System.Exception_Tables.\n \n with System;                  use System;\n+with System.Exceptions;       use System.Exceptions;\n with System.Standard_Library; use System.Standard_Library;\n with System.Soft_Links;       use System.Soft_Links;\n with System.WCh_Con;          use System.WCh_Con;\n@@ -570,8 +571,8 @@ package body Ada.Exceptions is\n    Rmsg_25 : constant String := \"potentially blocking operation\"   & NUL;\n    Rmsg_26 : constant String := \"stubbed subprogram called\"        & NUL;\n    Rmsg_27 : constant String := \"unchecked union restriction\"      & NUL;\n-   Rmsg_28 : constant String := \"illegal use of remote access-to-\" &\n-                                \"class-wide type, see RM E.4(18)\"  & NUL;\n+   Rmsg_28 : constant String := \"actual/returned class-wide value \"\n+                                & \"not transportable\"              & NUL;\n    Rmsg_29 : constant String := \"empty storage pool\"               & NUL;\n    Rmsg_30 : constant String := \"explicit raise\"                   & NUL;\n    Rmsg_31 : constant String := \"infinite recursion\"               & NUL;\n@@ -760,16 +761,6 @@ package body Ada.Exceptions is\n    --  in case we do not want any exception tracing support. This is\n    --  why this package is separated.\n \n-   -----------------\n-   -- Local_Raise --\n-   -----------------\n-\n-   procedure Local_Raise (Excep : Exception_Id) is\n-      pragma Warnings (Off, Excep);\n-   begin\n-      return;\n-   end Local_Raise;\n-\n    -----------------------\n    -- Stream Attributes --\n    -----------------------\n@@ -815,19 +806,28 @@ package body Ada.Exceptions is\n       --  This is so the debugger can reliably inspect the parameter when\n       --  inserting a breakpoint at the start of this procedure.\n \n-      Id : Exception_Id := E;\n+      --  To provide support for breakpoints on unhandled exceptions, the\n+      --  debugger will also need to be able to inspect the value of E from\n+      --  inner frames so we need to make sure that its value is also spilled\n+      --  on stack.  We take the address and dereference using volatile local\n+      --  objects for this purpose.\n+\n+      --  The pragma Warnings (Off) are needed because the compiler knows that\n+      --  these locals are not referenced and that this use of pragma Volatile\n+      --  is peculiar!\n+\n+      type EID_Access is access Exception_Id;\n+\n+      Access_To_E : EID_Access := E'Unrestricted_Access;\n+      pragma Volatile (Access_To_E);\n+      pragma Warnings (Off, Access_To_E);\n+\n+      Id : Exception_Id := Access_To_E.all;\n       pragma Volatile (Id);\n       pragma Warnings (Off, Id);\n-      --  In order to provide support for breakpoints on unhandled exceptions,\n-      --  the debugger will also need to be able to inspect the value of E from\n-      --  another (inner) frame. So we need to make sure that if E is passed in\n-      --  a register, its value is also spilled on stack. For this, we store\n-      --  the parameter value in a local variable, and add a pragma Volatile to\n-      --  make sure it is spilled. The pragma Warnings (Off) is needed because\n-      --  the compiler knows that Id is not referenced and that this use of\n-      --  pragma Volatile is peculiar!\n \n    begin\n+      Debug_Raise_Exception (E => SSL.Exception_Data_Ptr (E));\n       Exception_Propagation.Propagate_Exception\n         (E => E, From_Signal_Handler => False);\n    end Raise_Current_Excep;\n@@ -870,6 +870,46 @@ package body Ada.Exceptions is\n       Raise_Current_Excep (E);\n    end Raise_Exception_Always;\n \n+   -------------------------------------\n+   -- Raise_From_Controlled_Operation --\n+   -------------------------------------\n+\n+   procedure Raise_From_Controlled_Operation\n+     (X : Ada.Exceptions.Exception_Occurrence)\n+   is\n+      Prefix   : constant String := \"adjust/finalize raised \";\n+      Orig_Msg : constant String := Exception_Message (X);\n+      New_Msg  : constant String := Prefix & Exception_Name (X);\n+\n+   begin\n+      if Orig_Msg'Length >= Prefix'Length\n+        and then\n+          Orig_Msg (Orig_Msg'First .. Orig_Msg'First + Prefix'Length - 1) =\n+                                                                     Prefix\n+      then\n+         --  Message already has proper prefix, just re-reraise PROGRAM_ERROR\n+\n+         Raise_Exception_No_Defer\n+           (E       => Program_Error'Identity,\n+            Message => Orig_Msg);\n+\n+      elsif Orig_Msg = \"\" then\n+\n+         --  No message present: just provide our own\n+\n+         Raise_Exception_No_Defer\n+           (E       => Program_Error'Identity,\n+            Message => New_Msg);\n+\n+      else\n+         --  Message present, add informational prefix\n+\n+         Raise_Exception_No_Defer\n+           (E       => Program_Error'Identity,\n+            Message => New_Msg & \": \" & Orig_Msg);\n+      end if;\n+   end Raise_From_Controlled_Operation;\n+\n    -------------------------------\n    -- Raise_From_Signal_Handler --\n    -------------------------------"}, {"sha": "7b8326a6f3060e121699d38118751bd528841544", "filename": "gcc/ada/a-except-2005.ads", "status": "modified", "additions": 7, "deletions": 10, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b9f3a4b07df15081483fd4caa5d1e29266917fa3/gcc%2Fada%2Fa-except-2005.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b9f3a4b07df15081483fd4caa5d1e29266917fa3/gcc%2Fada%2Fa-except-2005.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-except-2005.ads?ref=b9f3a4b07df15081483fd4caa5d1e29266917fa3", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 S p e c                                  --\n --                                                                          --\n---          Copyright (C) 1992-2006, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2007, Free Software Foundation, Inc.         --\n --                                                                          --\n -- This specification is derived from the Ada Reference Manual for use with --\n -- GNAT. The copyright notice above, and the license provisions that follow --\n@@ -209,15 +209,6 @@ private\n    --  private barrier, so we can place this function in the private part\n    --  where the compiler can find it, but the spec is unchanged.)\n \n-   procedure Local_Raise (Excep : Exception_Id);\n-   pragma Export (Ada, Local_Raise);\n-   --  This is a dummy routine, used only by the debugger for the purpose of\n-   --  logging local raise statements that were transformed into a direct goto\n-   --  to the handler code. The compiler in this case generates:\n-   --\n-   --    Local_Raise (exception_id);\n-   --    goto Handler\n-\n    procedure Raise_Exception_Always (E : Exception_Id; Message : String := \"\");\n    pragma No_Return (Raise_Exception_Always);\n    pragma Export (Ada, Raise_Exception_Always, \"__gnat_raise_exception\");\n@@ -245,6 +236,12 @@ private\n    --  PC value in the machine state or in some other way ask the operating\n    --  system to return here rather than to the original location.\n \n+   procedure Raise_From_Controlled_Operation\n+     (X : Ada.Exceptions.Exception_Occurrence);\n+   pragma No_Return (Raise_From_Controlled_Operation);\n+   --  Raise Program_Error, proviving information about X (an exception\n+   --  raised during a controlled operation) in the exception message.\n+\n    procedure Reraise_Occurrence_Always (X : Exception_Occurrence);\n    pragma No_Return (Reraise_Occurrence_Always);\n    --  This differs from Raise_Occurrence only in that the caller guarantees"}, {"sha": "4f6c4c165e466ff1eb5d5c09bdd5dd35608d4c9a", "filename": "gcc/ada/s-finimp.adb", "status": "modified", "additions": 19, "deletions": 30, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b9f3a4b07df15081483fd4caa5d1e29266917fa3/gcc%2Fada%2Fs-finimp.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b9f3a4b07df15081483fd4caa5d1e29266917fa3/gcc%2Fada%2Fs-finimp.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-finimp.adb?ref=b9f3a4b07df15081483fd4caa5d1e29266917fa3", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1992-2006, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2007, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -36,7 +36,6 @@ with Ada.Tags;\n \n with System.Soft_Links;\n \n-with Unchecked_Conversion;\n with System.Restrictions;\n \n package body System.Finalization_Implementation is\n@@ -55,17 +54,17 @@ package body System.Finalization_Implementation is\n    type RC_Ptr is access all Record_Controller;\n \n    function To_RC_Ptr is\n-     new Unchecked_Conversion (Address, RC_Ptr);\n-\n-   procedure Raise_Exception_No_Defer\n-     (E       : Exception_Id;\n-      Message : String := \"\");\n-   pragma Import (Ada, Raise_Exception_No_Defer,\n-     \"ada__exceptions__raise_exception_no_defer\");\n-   pragma No_Return (Raise_Exception_No_Defer);\n-   --  Raise an exception without deferring abort. Note that we have to\n-   --  use this rather kludgy Ada Import interface, since this subprogram\n-   --  is not available in the visible spec of Ada.Exceptions.\n+     new Ada.Unchecked_Conversion (Address, RC_Ptr);\n+\n+   procedure Raise_From_Controlled_Operation (X : Exception_Occurrence);\n+   pragma Import\n+     (Ada, Raise_From_Controlled_Operation,\n+      \"ada__exceptions__raise_from_controlled_operation\");\n+   pragma No_Return (Raise_From_Controlled_Operation);\n+   --  Raise Program_Error from an exception that occurred during an Adjust or\n+   --  Finalize operation. We use this rather kludgy Ada Import interface\n+   --  because this procedure is not available in the visible part of the\n+   --  Ada.Exceptions spec.\n \n    procedure Raise_From_Finalize\n      (L          : Finalizable_Ptr;\n@@ -335,7 +334,7 @@ package body System.Finalization_Implementation is\n       type Ptr is access all Fake_Exception_Occurence;\n \n       function To_Ptr is new\n-        Unchecked_Conversion (Exception_Occurrence_Access, Ptr);\n+        Ada.Unchecked_Conversion (Exception_Occurrence_Access, Ptr);\n \n       X :  Exception_Id := Null_Id;\n \n@@ -437,7 +436,7 @@ package body System.Finalization_Implementation is\n \n             type Obj_Ptr is access all Faked_Type_Of_Obj;\n             function To_Obj_Ptr is\n-              new Unchecked_Conversion (Address, Obj_Ptr);\n+              new Ada.Unchecked_Conversion (Address, Obj_Ptr);\n \n          begin\n             return To_RC_Ptr (To_Obj_Ptr (Obj).Controller'Address);\n@@ -497,7 +496,6 @@ package body System.Finalization_Implementation is\n       From_Abort : Boolean;\n       E_Occ      : Exception_Occurrence)\n    is\n-      Msg : constant String := Exception_Message (E_Occ);\n       P   : Finalizable_Ptr := L;\n       Q   : Finalizable_Ptr;\n \n@@ -517,24 +515,15 @@ package body System.Finalization_Implementation is\n          P := Q;\n       end loop;\n \n-      --  If finalization from an Abort, then nothing to do\n-\n       if From_Abort then\n-         null;\n-\n-      --  If no message, then add our own message saying what happened\n+         --  If finalization from an Abort, then nothing to do\n \n-      elsif Msg = \"\" then\n-         Raise_Exception_No_Defer\n-           (E       => Program_Error'Identity,\n-            Message => \"exception \" &\n-                       Exception_Name (E_Occ) &\n-                       \" raised during finalization\");\n-\n-      --  If there was a message, pass it on\n+         null;\n \n       else\n-         Raise_Exception_No_Defer (Program_Error'Identity, Msg);\n+         --  Else raise Program_Error with an appropriate message\n+\n+         Raise_From_Controlled_Operation (E_Occ);\n       end if;\n    end Raise_From_Finalize;\n "}]}