{"sha": "09ad58e618b0145ed98ee081ffc8117824390972", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDlhZDU4ZTYxOGIwMTQ1ZWQ5OGVlMDgxZmZjODExNzgyNDM5MDk3Mg==", "commit": {"author": {"name": "Uros Bizjak", "email": "ubizjak@gmail.com", "date": "2011-11-29T19:03:08Z"}, "committer": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2011-11-29T19:03:08Z"}, "message": "sync.md (UNSPEC_LDA, UNSPEC_STA): New unspecs.\n\n\t* config/i386/sync.md (UNSPEC_LDA, UNSPEC_STA): New unspecs.\n\t(movdi_via_fpu): Remove.\n\t(loaddi_via_fpu): New insn pattern.\n\t(storedi_via_fpu): Ditto.\n\t(atomic_loaddi_fpu): Use loaddi_via_fpu and storedi_via_fpu.\n\t(atomic_storedi_fpu): Ditto.\n\t* reg-stack.c (get_true_reg): Handle UNSPEC_LDA.\n\t(subst_stack_regs_pat): Handle UNSPEC_STA.\n\nFrom-SVN: r181812", "tree": {"sha": "cc34bf6d161d58958ce9721f6d62f6c089845c4c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/cc34bf6d161d58958ce9721f6d62f6c089845c4c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/09ad58e618b0145ed98ee081ffc8117824390972", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/09ad58e618b0145ed98ee081ffc8117824390972", "html_url": "https://github.com/Rust-GCC/gccrs/commit/09ad58e618b0145ed98ee081ffc8117824390972", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/09ad58e618b0145ed98ee081ffc8117824390972/comments", "author": {"login": "ubizjak", "id": 55479990, "node_id": "MDQ6VXNlcjU1NDc5OTkw", "avatar_url": "https://avatars.githubusercontent.com/u/55479990?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ubizjak", "html_url": "https://github.com/ubizjak", "followers_url": "https://api.github.com/users/ubizjak/followers", "following_url": "https://api.github.com/users/ubizjak/following{/other_user}", "gists_url": "https://api.github.com/users/ubizjak/gists{/gist_id}", "starred_url": "https://api.github.com/users/ubizjak/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ubizjak/subscriptions", "organizations_url": "https://api.github.com/users/ubizjak/orgs", "repos_url": "https://api.github.com/users/ubizjak/repos", "events_url": "https://api.github.com/users/ubizjak/events{/privacy}", "received_events_url": "https://api.github.com/users/ubizjak/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "c6b4cec7ea9fbf702e1037b820feb595dbbe8646", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c6b4cec7ea9fbf702e1037b820feb595dbbe8646", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c6b4cec7ea9fbf702e1037b820feb595dbbe8646"}], "stats": {"total": 51, "additions": 41, "deletions": 10}, "files": [{"sha": "cc71361206ed2eded144c90d33bfbfae9ea372a7", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/09ad58e618b0145ed98ee081ffc8117824390972/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/09ad58e618b0145ed98ee081ffc8117824390972/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=09ad58e618b0145ed98ee081ffc8117824390972", "patch": "@@ -1,3 +1,14 @@\n+2011-11-29  Uros Bizjak  <ubizjak@gmail.com>\n+\n+\t* config/i386/sync.md (UNSPEC_LDA, UNSPEC_STA): New unspecs.\n+\t(movdi_via_fpu): Remove.\n+\t(loaddi_via_fpu): New insn pattern.\n+\t(storedi_via_fpu): Ditto.\n+\t(atomic_loaddi_fpu): Use loaddi_via_fpu and storedi_via_fpu.\n+\t(atomic_storedi_fpu): Ditto.\n+\t* reg-stack.c (get_true_reg): Handle UNSPEC_LDA.\n+\t(subst_stack_regs_pat): Handle UNSPEC_STA.\n+\n 2011-11-29  Uros Bizjak  <ubizjak@gmail.com>\n \n \t* config/i386/i386.md (*floathi<mode>2_i387_with_temp): Do not"}, {"sha": "9f9134486c45d96b56ecbdae350ff3fc421e5137", "filename": "gcc/config/i386/sync.md", "status": "modified", "additions": 27, "deletions": 9, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/09ad58e618b0145ed98ee081ffc8117824390972/gcc%2Fconfig%2Fi386%2Fsync.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/09ad58e618b0145ed98ee081ffc8117824390972/gcc%2Fconfig%2Fi386%2Fsync.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fsync.md?ref=09ad58e618b0145ed98ee081ffc8117824390972", "patch": "@@ -23,6 +23,8 @@\n   UNSPEC_SFENCE\n   UNSPEC_MFENCE\n   UNSPEC_MOVA\t; For __atomic support\n+  UNSPEC_LDA\n+  UNSPEC_STA\n ])\n \n (define_c_enum \"unspecv\" [\n@@ -180,7 +182,10 @@\n \tmem = dst;\n \n       if (FP_REG_P (tmp))\n-\temit_insn (gen_movdi_via_fpu (mem, src, tmp));\n+        {\n+\t  emit_insn (gen_loaddi_via_fpu (tmp, src));\n+\t  emit_insn (gen_storedi_via_fpu (mem, tmp));\n+\t}\n       else\n \t{\n \t  adjust_reg_mode (tmp, DImode);\n@@ -258,7 +263,8 @@\n \n       if (FP_REG_P (tmp))\n \t{\n-\t  emit_insn (gen_movdi_via_fpu (dst, src, tmp));\n+\t  emit_insn (gen_loaddi_via_fpu (tmp, src));\n+\t  emit_insn (gen_storedi_via_fpu (dst, tmp));\n \t  DONE;\n \t}\n       else\n@@ -276,15 +282,27 @@\n ;; operations.  But the fix_trunc patterns want way more setup than we want\n ;; to provide.  Note that the scratch is DFmode instead of XFmode in order\n ;; to make it easy to allocate a scratch in either SSE or FP_REGs above.\n-(define_insn \"movdi_via_fpu\"\n+\n+(define_insn \"loaddi_via_fpu\"\n+  [(set (match_operand:DF 0 \"register_operand\" \"=f\")\n+\t(unspec:DF [(match_operand:DI 1 \"memory_operand\" \"m\")] UNSPEC_LDA))]\n+  \"TARGET_80387\"\n+  \"fild%Z1\\t%1\"\n+  [(set_attr \"type\" \"fmov\")\n+   (set_attr \"mode\" \"DF\")\n+   (set_attr \"fp_int_src\" \"true\")])\n+\n+(define_insn \"storedi_via_fpu\"\n   [(set (match_operand:DI 0 \"memory_operand\" \"=m\")\n-\t(unspec:DI [(match_operand:DI 1 \"memory_operand\" \"m\")] UNSPEC_MOVA))\n-   (clobber (match_operand:DF 2 \"register_operand\" \"=f\"))]\n+\t(unspec:DI [(match_operand:DF 1 \"register_operand\" \"f\")] UNSPEC_STA))]\n   \"TARGET_80387\"\n-  \"fild%Z1\\t%1\\;fistp%Z0\\t%0\"\n-  [(set_attr \"type\" \"multi\")\n-   ;; Worst case based on full sib+offset32 addressing modes\n-   (set_attr \"length\" \"14\")])\n+{\n+  gcc_assert (find_regno_note (insn, REG_DEAD, FIRST_STACK_REG) != NULL_RTX);\n+\n+  return \"fistp%Z0\\t%0\";\n+}\n+  [(set_attr \"type\" \"fmov\")\n+   (set_attr \"mode\" \"DI\")])\n \n (define_expand \"atomic_compare_and_swap<mode>\"\n   [(match_operand:QI 0 \"register_operand\" \"\")\t\t;; bool success output"}, {"sha": "da7fe729be9df83073fec9316572e9d345d88e06", "filename": "gcc/reg-stack.c", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/09ad58e618b0145ed98ee081ffc8117824390972/gcc%2Freg-stack.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/09ad58e618b0145ed98ee081ffc8117824390972/gcc%2Freg-stack.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Freg-stack.c?ref=09ad58e618b0145ed98ee081ffc8117824390972", "patch": "@@ -434,7 +434,8 @@ get_true_reg (rtx *pat)\n \tbreak;\n \n       case UNSPEC:\n-\tif (XINT (*pat, 1) == UNSPEC_TRUNC_NOOP)\n+\tif (XINT (*pat, 1) == UNSPEC_TRUNC_NOOP\n+\t    || XINT (*pat, 1) == UNSPEC_LDA)\n \t  pat = & XVECEXP (*pat, 0, 0);\n \treturn pat;\n \n@@ -1677,6 +1678,7 @@ subst_stack_regs_pat (rtx insn, stack regstack, rtx pat)\n \t  case UNSPEC:\n \t    switch (XINT (pat_src, 1))\n \t      {\n+\t      case UNSPEC_STA:\n \t      case UNSPEC_FIST:\n \n \t      case UNSPEC_FIST_FLOOR:"}]}