{"sha": "7ddcf3d26f2966c5fdfccb271c9fe7f535509186", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2RkY2YzZDI2ZjI5NjZjNWZkZmNjYjI3MWM5ZmU3ZjUzNTUwOTE4Ng==", "commit": {"author": {"name": "Bernd Schmidt", "email": "bernd.schmidt@analog.com", "date": "2005-07-11T16:15:45Z"}, "committer": {"name": "Bernd Schmidt", "email": "bernds@gcc.gnu.org", "date": "2005-07-11T16:15:45Z"}, "message": "bfin.md (cmpsi, [...]): Use reg_or_const_int_operand for second comparison operand.\n\n\t* config/bfin/bfin.md (cmpsi, compare_eq, compare_ne, compare_lt,\n\tcompare_le, compare_leu, compare_ltu): Use reg_or_const_int_operand\n\tfor second comparison operand.\n\t* config/bfin/predicates.md (reg_or_const_int_operand): New.\n\nFrom-SVN: r101881", "tree": {"sha": "543f30cc5db1b83d28fac8739d5630d1f48d9672", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/543f30cc5db1b83d28fac8739d5630d1f48d9672"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7ddcf3d26f2966c5fdfccb271c9fe7f535509186", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7ddcf3d26f2966c5fdfccb271c9fe7f535509186", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7ddcf3d26f2966c5fdfccb271c9fe7f535509186", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7ddcf3d26f2966c5fdfccb271c9fe7f535509186/comments", "author": null, "committer": null, "parents": [{"sha": "3fb192d2c7fd3ac8080d335d62ac9ad6754cd36f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3fb192d2c7fd3ac8080d335d62ac9ad6754cd36f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3fb192d2c7fd3ac8080d335d62ac9ad6754cd36f"}], "stats": {"total": 24, "additions": 17, "deletions": 7}, "files": [{"sha": "e1b5b633fd168e1f0465bcd099dae1446f73a733", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7ddcf3d26f2966c5fdfccb271c9fe7f535509186/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7ddcf3d26f2966c5fdfccb271c9fe7f535509186/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=7ddcf3d26f2966c5fdfccb271c9fe7f535509186", "patch": "@@ -1,5 +1,10 @@\n 2005-07-11  Bernd Schmidt  <bernd.schmidt@analog.com>\n \n+\t* config/bfin/bfin.md (cmpsi, compare_eq, compare_ne, compare_lt,\n+\tcompare_le, compare_leu, compare_ltu): Use reg_or_const_int_operand\n+\tfor second comparison operand.\n+\t* config/bfin/predicates.md (reg_or_const_int_operand): New.\n+\n \t* config/bfin/bfin.md (define_attr \"type\"): Add \"sync\".\n \t(define_insn_reservation \"alu\"): Likewise.\n \t(csync, ssync): Now of type sync."}, {"sha": "207bdd8ee7f43954541e55c3ddd8e36a7d59e99d", "filename": "gcc/config/bfin/bfin.md", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7ddcf3d26f2966c5fdfccb271c9fe7f535509186/gcc%2Fconfig%2Fbfin%2Fbfin.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7ddcf3d26f2966c5fdfccb271c9fe7f535509186/gcc%2Fconfig%2Fbfin%2Fbfin.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fbfin%2Fbfin.md?ref=7ddcf3d26f2966c5fdfccb271c9fe7f535509186", "patch": "@@ -1451,7 +1451,7 @@\n \n (define_expand \"cmpsi\"\n  [(set (cc0) (compare (match_operand:SI 0 \"register_operand\" \"\")\n-                      (match_operand:SI 1 \"nonmemory_operand\" \"\")))]\n+                      (match_operand:SI 1 \"reg_or_const_int_operand\" \"\")))]\n  \"\"\n {\n   bfin_compare_op0 = operands[0];\n@@ -1462,47 +1462,47 @@\n (define_insn \"compare_eq\"\n   [(set (match_operand:BI 0 \"cc_operand\" \"=C,C\")\n         (eq:BI (match_operand:SI 1 \"register_operand\" \"d,a\")\n-               (match_operand:SI 2 \"nonmemory_operand\" \"dKs3,aKs3\")))]\n+               (match_operand:SI 2 \"reg_or_const_int_operand\" \"dKs3,aKs3\")))]\n   \"\"\n   \"cc =%1==%2;\"\n   [(set_attr \"type\" \"compare\")])\n \n (define_insn \"compare_ne\"\n   [(set (match_operand:BI 0 \"cc_operand\" \"=C,C\")\n         (ne:BI (match_operand:SI 1 \"register_operand\" \"d,a\")\n-               (match_operand:SI 2 \"nonmemory_operand\" \"dKs3,aKs3\")))]\n+               (match_operand:SI 2 \"reg_or_const_int_operand\" \"dKs3,aKs3\")))]\n   \"0\"\n   \"cc =%1!=%2;\"\n   [(set_attr \"type\" \"compare\")])\n \n (define_insn \"compare_lt\"\n   [(set (match_operand:BI 0 \"cc_operand\" \"=C,C\")\n         (lt:BI (match_operand:SI 1 \"register_operand\" \"d,a\")\n-               (match_operand:SI 2 \"nonmemory_operand\" \"dKs3,aKs3\")))]\n+               (match_operand:SI 2 \"reg_or_const_int_operand\" \"dKs3,aKs3\")))]\n   \"\"\n   \"cc =%1<%2;\"\n   [(set_attr \"type\" \"compare\")])\n \n (define_insn \"compare_le\"\n   [(set (match_operand:BI 0 \"cc_operand\" \"=C,C\")\n         (le:BI (match_operand:SI 1 \"register_operand\" \"d,a\")\n-               (match_operand:SI 2 \"nonmemory_operand\" \"dKs3,aKs3\")))]\n+               (match_operand:SI 2 \"reg_or_const_int_operand\" \"dKs3,aKs3\")))]\n   \"\"\n   \"cc =%1<=%2;\"\n   [(set_attr \"type\" \"compare\")])\n \n (define_insn \"compare_leu\"\n   [(set (match_operand:BI 0 \"cc_operand\" \"=C,C\")\n         (leu:BI (match_operand:SI 1 \"register_operand\" \"d,a\")\n-                (match_operand:SI 2 \"nonmemory_operand\" \"dKu3,aKu3\")))]\n+                (match_operand:SI 2 \"reg_or_const_int_operand\" \"dKu3,aKu3\")))]\n   \"\"\n   \"cc =%1<=%2 (iu);\"\n   [(set_attr \"type\" \"compare\")])\n \n (define_insn \"compare_ltu\"\n   [(set (match_operand:BI 0 \"cc_operand\" \"=C,C\")\n         (ltu:BI (match_operand:SI 1 \"register_operand\" \"d,a\")\n-                (match_operand:SI 2 \"nonmemory_operand\" \"dKu3,aKu3\")))]\n+                (match_operand:SI 2 \"reg_or_const_int_operand\" \"dKu3,aKu3\")))]\n   \"\"\n   \"cc =%1<%2 (iu);\"\n   [(set_attr \"type\" \"compare\")])"}, {"sha": "7abd129d9f3bbd3123b3821d39b439e5bcd5fdc5", "filename": "gcc/config/bfin/predicates.md", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7ddcf3d26f2966c5fdfccb271c9fe7f535509186/gcc%2Fconfig%2Fbfin%2Fpredicates.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7ddcf3d26f2966c5fdfccb271c9fe7f535509186/gcc%2Fconfig%2Fbfin%2Fpredicates.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fbfin%2Fpredicates.md?ref=7ddcf3d26f2966c5fdfccb271c9fe7f535509186", "patch": "@@ -49,6 +49,11 @@\n        (and (match_code \"const_int\")\n \t    (match_test \"log2constp (INTVAL (op))\"))))\n \n+;; Return nonzero if OP is a register or an integer constant.\n+(define_predicate \"reg_or_const_int_operand\"\n+  (ior (match_operand 0 \"register_operand\")\n+       (match_code \"const_int\")))\n+\n ;; Like register_operand, but make sure that hard regs have a valid mode.\n (define_predicate \"valid_reg_operand\"\n   (match_operand 0 \"register_operand\")"}]}