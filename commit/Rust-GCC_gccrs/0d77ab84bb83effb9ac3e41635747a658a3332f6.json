{"sha": "0d77ab84bb83effb9ac3e41635747a658a3332f6", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGQ3N2FiODRiYjgzZWZmYjlhYzNlNDE2MzU3NDdhNjU4YTMzMzJmNg==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2003-11-18T10:00:43Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2003-11-18T10:00:43Z"}, "message": "[multiple changes]\n\n2003-11-18  Richard Kenner  <kenner@vlsi1.ultra.nyu.edu>\n\n\t* ada-tree.def: (ALLOCATE_EXPR): Class is \"2\", not \"s\".\n\n\t* decl.c (gnat_to_gnu_entity, case E_Floating_Point_Subtype): Set\n\tTYPE_PRECISION directly from esize.\n\n2003-11-18  Thomas Quinot  <quinot@act-europe.fr>\n\n\t* cstreams.c:\n\tUse realpath(3) on FreeBSD. Fix typo in comment while we are at it.\n\n\t* init.c: Initialization routines for FreeBSD\n\n\t* link.c: Link info for FreeBSD\n\n\t* sysdep.c: Add the case of FreeBSD\n\nFrom-SVN: r73700", "tree": {"sha": "ca0313b9fef667182504854ffab71acadd1412e6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ca0313b9fef667182504854ffab71acadd1412e6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0d77ab84bb83effb9ac3e41635747a658a3332f6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0d77ab84bb83effb9ac3e41635747a658a3332f6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0d77ab84bb83effb9ac3e41635747a658a3332f6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0d77ab84bb83effb9ac3e41635747a658a3332f6/comments", "author": null, "committer": null, "parents": [{"sha": "beb0c2e0ca4c1abdc0124c1e64d1bf841b0122af", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/beb0c2e0ca4c1abdc0124c1e64d1bf841b0122af", "html_url": "https://github.com/Rust-GCC/gccrs/commit/beb0c2e0ca4c1abdc0124c1e64d1bf841b0122af"}], "stats": {"total": 133, "additions": 117, "deletions": 16}, "files": [{"sha": "49bb48086f084d486a521de20a8bdee0698e3740", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0d77ab84bb83effb9ac3e41635747a658a3332f6/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0d77ab84bb83effb9ac3e41635747a658a3332f6/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=0d77ab84bb83effb9ac3e41635747a658a3332f6", "patch": "@@ -1,3 +1,21 @@\n+2003-11-18  Richard Kenner  <kenner@vlsi1.ultra.nyu.edu>\n+\n+\t* ada-tree.def: (ALLOCATE_EXPR): Class is \"2\", not \"s\".\n+\n+\t* decl.c (gnat_to_gnu_entity, case E_Floating_Point_Subtype): Set\n+\tTYPE_PRECISION directly from esize.\n+\n+2003-11-18  Thomas Quinot  <quinot@act-europe.fr>\n+\n+\t* cstreams.c: \n+\tUse realpath(3) on FreeBSD. Fix typo in comment while we are at it.\n+\n+\t* init.c: Initialization routines for FreeBSD\n+\n+\t* link.c: Link info for FreeBSD\n+\n+\t* sysdep.c: Add the case of FreeBSD\n+\n 2003-11-17  Jerome Guitton  <guitton@act-europe.fr>\n \n \t* 5zthrini.adb: Remove the call to Init_RTS at elaboration, as it is"}, {"sha": "08a69acd21f72c2fc520d6a5b45c697b5f36838d", "filename": "gcc/ada/ada-tree.def", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0d77ab84bb83effb9ac3e41635747a658a3332f6/gcc%2Fada%2Fada-tree.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0d77ab84bb83effb9ac3e41635747a658a3332f6/gcc%2Fada%2Fada-tree.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fada-tree.def?ref=0d77ab84bb83effb9ac3e41635747a658a3332f6", "patch": "@@ -37,7 +37,7 @@ DEFTREECODE (TRANSFORM_EXPR, \"transform_expr\", 'e', 0)\n    by operand 0 at the alignment given by operand 1 and return the\n    address of the resulting memory.  */\n \n-DEFTREECODE (ALLOCATE_EXPR, \"allocate_expr\", 's', 2)\n+DEFTREECODE (ALLOCATE_EXPR, \"allocate_expr\", '2', 2)\n \n /* A type that is an unconstrained array itself.  This node is never passed\n    to GCC. TREE_TYPE is the type of the fat pointer and TYPE_OBJECT_RECORD_TYPE"}, {"sha": "7001f847b5720b609bace72bad79611b079bffad", "filename": "gcc/ada/cstreams.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0d77ab84bb83effb9ac3e41635747a658a3332f6/gcc%2Fada%2Fcstreams.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0d77ab84bb83effb9ac3e41635747a658a3332f6/gcc%2Fada%2Fcstreams.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fcstreams.c?ref=0d77ab84bb83effb9ac3e41635747a658a3332f6", "patch": "@@ -175,9 +175,9 @@ __gnat_full_name (char *nam, char *buffer)\n #elif defined (MSDOS)\n   _fixpath (nam, buffer);\n \n-#elif defined (sgi)\n+#elif defined (sgi) || defined (__FreeBSD__)\n \n-  /* Use realpath function which resolves links and references to .. and ..\n+  /* Use realpath function which resolves links and references to . and ..\n      on those Unix systems that support it. Note that GNU/Linux provides it but\n      cannot handle more than 5 symbolic links in a full name, so we use the\n      getcwd approach instead. */"}, {"sha": "85bd27bf274631fe3631662ca9af09b2be2076e6", "filename": "gcc/ada/decl.c", "status": "modified", "additions": 1, "deletions": 9, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0d77ab84bb83effb9ac3e41635747a658a3332f6/gcc%2Fada%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0d77ab84bb83effb9ac3e41635747a658a3332f6/gcc%2Fada%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fdecl.c?ref=0d77ab84bb83effb9ac3e41635747a658a3332f6", "patch": "@@ -1357,8 +1357,6 @@ gnat_to_gnu_entity (Entity_Id gnat_entity, tree gnu_expr, int definition)\n \t}\n \n       {\n-\tenum machine_mode mode;\n-\n \tif (definition == 0\n \t    && Present (Ancestor_Subtype (gnat_entity))\n \t    && ! In_Extended_Main_Code_Unit (Ancestor_Subtype (gnat_entity))\n@@ -1367,15 +1365,9 @@ gnat_to_gnu_entity (Entity_Id gnat_entity, tree gnu_expr, int definition)\n \t  gnat_to_gnu_entity (Ancestor_Subtype (gnat_entity),\n \t\t\t      gnu_expr, definition);\n \n-\tfor (mode = GET_CLASS_NARROWEST_MODE (MODE_FLOAT);\n-\t     (GET_MODE_WIDER_MODE (mode) != VOIDmode\n-\t      && GET_MODE_BITSIZE (GET_MODE_WIDER_MODE (mode)) <= esize);\n-\t     mode = GET_MODE_WIDER_MODE (mode))\n-\t  ;\n-\n \tgnu_type = make_node (REAL_TYPE);\n \tTREE_TYPE (gnu_type) = get_unpadded_type (Etype (gnat_entity));\n-\tTYPE_PRECISION (gnu_type) = GET_MODE_BITSIZE (mode);\n+\tTYPE_PRECISION (gnu_type) = fp_size_to_prec (esize);\n \n \tTYPE_MIN_VALUE (gnu_type)\n \t  = convert (TREE_TYPE (gnu_type),"}, {"sha": "4f50b8f902eed46b4c971d507a555c36d4832e62", "filename": "gcc/ada/init.c", "status": "modified", "additions": 83, "deletions": 1, "changes": 84, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0d77ab84bb83effb9ac3e41635747a658a3332f6/gcc%2Fada%2Finit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0d77ab84bb83effb9ac3e41635747a658a3332f6/gcc%2Fada%2Finit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Finit.c?ref=0d77ab84bb83effb9ac3e41635747a658a3332f6", "patch": "@@ -1456,6 +1456,88 @@ __gnat_initialize(void)\n {\n }\n \n+/*************************************************/\n+/* __gnat_initialize (FreeBSD version) */\n+/*************************************************/\n+\n+#elif defined (__FreeBSD__)\n+\n+#include <signal.h>\n+#include <unistd.h>\n+\n+static void\n+__gnat_error_handler (sig, code, sc)\n+     int sig;\n+     int code;\n+     struct sigcontext *sc;\n+{\n+  struct Exception_Data *exception;\n+  char *msg;\n+\n+  switch (sig)\n+    {\n+    case SIGFPE:\n+      exception = &constraint_error;\n+      msg = \"SIGFPE\";\n+      break;\n+\n+    case SIGILL:\n+      exception = &constraint_error;\n+      msg = \"SIGILL\";\n+      break;\n+\n+    case SIGSEGV:\n+      exception = &storage_error;\n+      msg = \"stack overflow or erroneous memory access\";\n+      break;\n+\n+    case SIGBUS:\n+      exception = &constraint_error;\n+      msg = \"SIGBUS\";\n+      break;\n+\n+    default:\n+      exception = &program_error;\n+      msg = \"unhandled signal\";\n+    }\n+\n+  Raise_From_Signal_Handler (exception, msg);\n+}\n+\n+void\n+__gnat_install_handler ()\n+{\n+  struct sigaction act;\n+\n+  /* Set up signal handler to map synchronous signals to appropriate\n+     exceptions.  Make sure that the handler isn't interrupted by another\n+     signal that might cause a scheduling event! */\n+\n+  act.sa_handler = __gnat_error_handler;\n+  act.sa_flags = SA_NODEFER | SA_RESTART;\n+  (void) sigemptyset (&act.sa_mask);\n+\n+  (void) sigaction (SIGILL,  &act, NULL);\n+  (void) sigaction (SIGFPE,  &act, NULL);\n+  (void) sigaction (SIGSEGV, &act, NULL);\n+  (void) sigaction (SIGBUS,  &act, NULL);\n+}\n+\n+void __gnat_init_float ();\n+\n+void\n+__gnat_initialize ()\n+{\n+   __gnat_install_handler ();\n+\n+   /* XXX - Initialize floating-point coprocessor. This call is\n+      needed because FreeBSD defaults to 64-bit precision instead\n+      of 80-bit precision?  We require the full precision for\n+      proper operation, given that we have set Max_Digits etc\n+      with this in mind */\n+   __gnat_init_float ();\n+}\n+\n /***************************************/\n /* __gnat_initialize (VXWorks Version) */\n /***************************************/\n@@ -1749,7 +1831,7 @@ __gnat_install_handler (void)\n    WIN32 and could be used under OS/2 */\n \n #if defined (_WIN32) || defined (__INTERIX) || defined (__EMX__) \\\n-  || defined (__Lynx__) || defined(__NetBSD__)\n+  || defined (__Lynx__) || defined(__NetBSD__) || defined(__FreeBSD__)\n \n #define HAVE_GNAT_INIT_FLOAT\n "}, {"sha": "4dd087658b0170848863d7bdf39943fc2f018f14", "filename": "gcc/ada/link.c", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0d77ab84bb83effb9ac3e41635747a658a3332f6/gcc%2Fada%2Flink.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0d77ab84bb83effb9ac3e41635747a658a3332f6/gcc%2Fada%2Flink.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flink.c?ref=0d77ab84bb83effb9ac3e41635747a658a3332f6", "patch": "@@ -154,6 +154,15 @@ unsigned char objlist_file_supported = 0;\n unsigned char using_gnu_linker = 0;\n const char *object_library_extension = \".a\";\n \n+#elif defined (__FreeBSD__)\n+char *object_file_option = \"\";\n+char *run_path_option = \"\";\n+char shared_libgnat_default = SHARED;\n+int link_max = 2147483647;\n+unsigned char objlist_file_supported = 0;\n+unsigned char using_gnu_linker = 0;\n+char *object_library_extension = \".a\";\n+\n #elif defined (linux)\n const char *object_file_option = \"\";\n const char *run_path_option = \"-Wl,-rpath,\";"}, {"sha": "fcca318c7f5c51d164205d1fe97ba22af53648cf", "filename": "gcc/ada/sysdep.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0d77ab84bb83effb9ac3e41635747a658a3332f6/gcc%2Fada%2Fsysdep.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0d77ab84bb83effb9ac3e41635747a658a3332f6/gcc%2Fada%2Fsysdep.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsysdep.c?ref=0d77ab84bb83effb9ac3e41635747a658a3332f6", "patch": "@@ -291,7 +291,7 @@ __gnat_ttyname (int filedes)\n   || (defined (__osf__) && ! defined (__alpha_vxworks)) || defined (WINNT) \\\n   || defined (__MACHTEN__) || defined (hpux) || defined (_AIX) \\\n   || (defined (__svr4__) && defined (i386)) || defined (__Lynx__) \\\n-  || defined (__CYGWIN__)\n+  || defined (__CYGWIN__) || defined (__FreeBSD__)\n \n #ifdef __MINGW32__\n #if OLD_MINGW\n@@ -348,7 +348,7 @@ getc_immediate_common (FILE *stream,\n     || (defined (__osf__) && ! defined (__alpha_vxworks)) \\\n     || defined (__CYGWIN32__) || defined (__MACHTEN__) || defined (hpux) \\\n     || defined (_AIX) || (defined (__svr4__) && defined (i386)) \\\n-    || defined (__Lynx__)\n+    || defined (__Lynx__) || defined (__FreeBSD__)\n   char c;\n   int nread;\n   int good_one = 0;\n@@ -367,7 +367,7 @@ getc_immediate_common (FILE *stream,\n #if defined(linux) || defined (sun) || defined (sgi) || defined (__EMX__) \\\n     || defined (__osf__) || defined (__MACHTEN__) || defined (hpux) \\\n     || defined (_AIX) || (defined (__svr4__) && defined (i386)) \\\n-    || defined (__Lynx__)\n+    || defined (__Lynx__) || defined (__FreeBSD__)\n       eof_ch = termios_rec.c_cc[VEOF];\n \n       /* If waiting (i.e. Get_Immediate (Char)), set MIN = 1 and wait for"}]}