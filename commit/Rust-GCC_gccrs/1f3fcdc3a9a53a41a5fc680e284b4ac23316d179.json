{"sha": "1f3fcdc3a9a53a41a5fc680e284b4ac23316d179", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWYzZmNkYzNhOWE1M2E0MWE1ZmM2ODBlMjg0YjRhYzIzMzE2ZDE3OQ==", "commit": {"author": {"name": "Jeff Law", "email": "law@redhat.com", "date": "2011-04-25T19:55:13Z"}, "committer": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "2011-04-25T19:55:13Z"}, "message": "tree-vrp.c (identify_jump_threads): Handle GIMPLE_SWITCH too.\n\n\n\t* tree-vrp.c (identify_jump_threads): Handle GIMPLE_SWITCH too.\n\n\t* gcc.dg/tree-ssa/vrp56.c: new test.\n\nFrom-SVN: r172938", "tree": {"sha": "1051acd0e95bb68a9fb8523beb6287d28959dd24", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1051acd0e95bb68a9fb8523beb6287d28959dd24"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1f3fcdc3a9a53a41a5fc680e284b4ac23316d179", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1f3fcdc3a9a53a41a5fc680e284b4ac23316d179", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1f3fcdc3a9a53a41a5fc680e284b4ac23316d179", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1f3fcdc3a9a53a41a5fc680e284b4ac23316d179/comments", "author": null, "committer": null, "parents": [{"sha": "328db4501ef4e87dd8f50209a9d1eeb8f77ff783", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/328db4501ef4e87dd8f50209a9d1eeb8f77ff783", "html_url": "https://github.com/Rust-GCC/gccrs/commit/328db4501ef4e87dd8f50209a9d1eeb8f77ff783"}], "stats": {"total": 72, "additions": 61, "deletions": 11}, "files": [{"sha": "cacaee64891395ae8bf839944f618e872a7d6620", "filename": "gcc/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1f3fcdc3a9a53a41a5fc680e284b4ac23316d179/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1f3fcdc3a9a53a41a5fc680e284b4ac23316d179/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=1f3fcdc3a9a53a41a5fc680e284b4ac23316d179", "patch": "@@ -1,3 +1,7 @@\n+2011-04-25  Jeff Law  <law@redhat.com>\n+\n+\t* tree-vrp.c (identify_jump_threads): Handle GIMPLE_SWITCH too.\n+\n 2011-04-25  Jan Kratochvil  <jan.kratochvil@redhat.com>\n \n \t* system.h (ENUM_BITFIELD): Remove."}, {"sha": "793c8266ca467485c247dbbb51b4f44feb436362", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1f3fcdc3a9a53a41a5fc680e284b4ac23316d179/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1f3fcdc3a9a53a41a5fc680e284b4ac23316d179/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=1f3fcdc3a9a53a41a5fc680e284b4ac23316d179", "patch": "@@ -1,3 +1,7 @@\n+2011-04-25  Jeff Law <law@redhat.com>\n+\n+\t* gcc.dg/tree-ssa/vrp56.c: new test.\n+\n 2011-04-25  Rainer Orth  <ro@CeBiTec.Uni-Bielefeld.DE>\n \n \t* go.test/go-test.exp (go-set-goarch): Accept mips*-*-*."}, {"sha": "80f0b69db64f0f5efb5bc4ee7fa4cfd48e50e05e", "filename": "gcc/testsuite/gcc.dg/tree-ssa/vrp56.c", "status": "added", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1f3fcdc3a9a53a41a5fc680e284b4ac23316d179/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fvrp56.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1f3fcdc3a9a53a41a5fc680e284b4ac23316d179/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fvrp56.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fvrp56.c?ref=1f3fcdc3a9a53a41a5fc680e284b4ac23316d179", "patch": "@@ -0,0 +1,42 @@\n+/* { dg-do compile } */ \n+/* { dg-options \"-O2 -fdump-tree-vrp1-details\" } */\n+typedef struct basic_block_def *basic_block;\n+struct basic_block_def;\n+struct edge_def;\n+typedef struct edge_def *edge;\n+typedef struct VEC_edge_base\n+{\n+  unsigned num;\n+} VEC_edge_base;\n+typedef struct VEC_edge_none\n+{\n+  VEC_edge_base base;\n+} VEC_edge_none;\n+static __inline__ unsigned\n+VEC_edge_base_length (VEC_edge_base * vec_)\n+{\n+  return vec_ ? vec_->num : 0;\n+}\n+\n+typedef struct VEC_edge_gc\n+{\n+  VEC_edge_base base;\n+} VEC_edge_gc;\n+struct basic_block_def\n+{\n+  VEC_edge_gc *succs;\n+};\n+\n+unsigned char\n+cleanup_empty_eh (basic_block bb)\n+{\n+  edge e_out;\n+  switch (VEC_edge_base_length (&bb->succs->base))\n+    {\n+    case 1:\n+\tfoo ();\n+    }\n+}\n+/* { dg-final { scan-tree-dump-times \"Threaded\" 2 \"vrp1\"} } */\n+/* { dg-final { cleanup-tree-dump \"vrp1\" } } */\n+"}, {"sha": "2d0af8725da365aeacad14e7ec4a9304b113fc25", "filename": "gcc/tree-vrp.c", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1f3fcdc3a9a53a41a5fc680e284b4ac23316d179/gcc%2Ftree-vrp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1f3fcdc3a9a53a41a5fc680e284b4ac23316d179/gcc%2Ftree-vrp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vrp.c?ref=1f3fcdc3a9a53a41a5fc680e284b4ac23316d179", "patch": "@@ -7555,25 +7555,25 @@ identify_jump_threads (void)\n \t may be some value in handling SWITCH_EXPR here, I doubt it's\n \t terribly important.  */\n       last = gsi_stmt (gsi_last_bb (bb));\n-      if (gimple_code (last) != GIMPLE_COND)\n-\tcontinue;\n \n-      /* We're basically looking for any kind of conditional with\n+      /* We're basically looking for a switch or any kind of conditional with\n \t integral or pointer type arguments.  Note the type of the second\n \t argument will be the same as the first argument, so no need to\n \t check it explicitly.  */\n-      if (TREE_CODE (gimple_cond_lhs (last)) == SSA_NAME\n-\t  && (INTEGRAL_TYPE_P (TREE_TYPE (gimple_cond_lhs (last)))\n-\t      || POINTER_TYPE_P (TREE_TYPE (gimple_cond_lhs (last))))\n-\t  && (TREE_CODE (gimple_cond_rhs (last)) == SSA_NAME\n-\t      || is_gimple_min_invariant (gimple_cond_rhs (last))))\n+      if (gimple_code (last) == GIMPLE_SWITCH\n+\t  || (gimple_code (last) == GIMPLE_COND\n+      \t      && TREE_CODE (gimple_cond_lhs (last)) == SSA_NAME\n+\t      && (INTEGRAL_TYPE_P (TREE_TYPE (gimple_cond_lhs (last)))\n+\t\t  || POINTER_TYPE_P (TREE_TYPE (gimple_cond_lhs (last))))\n+\t      && (TREE_CODE (gimple_cond_rhs (last)) == SSA_NAME\n+\t\t  || is_gimple_min_invariant (gimple_cond_rhs (last)))))\n \t{\n \t  edge_iterator ei;\n \n \t  /* We've got a block with multiple predecessors and multiple\n-\t     successors which also ends in a suitable conditional.  For\n-\t     each predecessor, see if we can thread it to a specific\n-\t     successor.  */\n+\t     successors which also ends in a suitable conditional or\n+\t     switch statement.  For each predecessor, see if we can thread\n+\t     it to a specific successor.  */\n \t  FOR_EACH_EDGE (e, ei, bb->preds)\n \t    {\n \t      /* Do not thread across back edges or abnormal edges"}]}