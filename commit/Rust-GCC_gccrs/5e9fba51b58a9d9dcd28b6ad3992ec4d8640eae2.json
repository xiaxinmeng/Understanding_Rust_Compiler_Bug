{"sha": "5e9fba51b58a9d9dcd28b6ad3992ec4d8640eae2", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWU5ZmJhNTFiNThhOWQ5ZGNkMjhiNmFkMzk5MmVjNGQ4NjQwZWFlMg==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2011-01-05T11:23:40Z"}, "committer": {"name": "Eric Botcazou", "email": "ebotcazou@gcc.gnu.org", "date": "2011-01-05T11:23:40Z"}, "message": "re PR tree-optimization/47005 (ACATS c62002a is miscompiled at -O2)\n\n\tPR tree-optimization/47005\n\t* tree-sra.c (struct access): Add 'non_addressable' bit.\n\t(create_access): Set it for a DECL_NONADDRESSABLE_P field.\n\t(decide_one_param_reduction): Return 0 if the parameter is passed by\n\treference and one of the accesses in the group is non_addressable.\n\nFrom-SVN: r168508", "tree": {"sha": "e872641afdccd098468de2882c535d6f0cd0cd4e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e872641afdccd098468de2882c535d6f0cd0cd4e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5e9fba51b58a9d9dcd28b6ad3992ec4d8640eae2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5e9fba51b58a9d9dcd28b6ad3992ec4d8640eae2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5e9fba51b58a9d9dcd28b6ad3992ec4d8640eae2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5e9fba51b58a9d9dcd28b6ad3992ec4d8640eae2/comments", "author": null, "committer": null, "parents": [{"sha": "75fee9f255425ea84d63dd63dbf6f07af7c036d7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/75fee9f255425ea84d63dd63dbf6f07af7c036d7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/75fee9f255425ea84d63dd63dbf6f07af7c036d7"}], "stats": {"total": 51, "additions": 50, "deletions": 1}, "files": [{"sha": "d25e30c1bd13ebeb0354af4d39704a6d43a9d995", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5e9fba51b58a9d9dcd28b6ad3992ec4d8640eae2/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5e9fba51b58a9d9dcd28b6ad3992ec4d8640eae2/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=5e9fba51b58a9d9dcd28b6ad3992ec4d8640eae2", "patch": "@@ -1,3 +1,11 @@\n+2011-01-05  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\tPR tree-optimization/47005\n+\t* tree-sra.c (struct access): Add 'non_addressable' bit.\n+\t(create_access): Set it for a DECL_NONADDRESSABLE_P field.\n+\t(decide_one_param_reduction): Return 0 if the parameter is passed by\n+\treference and one of the accesses in the group is non_addressable.\n+\n 2011-01-04  Eric Botcazou  <ebotcazou@adacore.com>\n \n \tPR tree-optimization/47056"}, {"sha": "867e6a09550bf847286316250e8be8189a5fb914", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5e9fba51b58a9d9dcd28b6ad3992ec4d8640eae2/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5e9fba51b58a9d9dcd28b6ad3992ec4d8640eae2/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=5e9fba51b58a9d9dcd28b6ad3992ec4d8640eae2", "patch": "@@ -1,3 +1,7 @@\n+2011-01-05  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* gnat.dg/opt14.adb: New test.\n+\n 2011-01-05  Thomas Koenig  <tkoenig@gcc.gnu.org>\n \n \tPR fortran/46017"}, {"sha": "61bc7313bb5ea41f379991386e6965dee1e04ce0", "filename": "gcc/testsuite/gnat.dg/opt14.adb", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5e9fba51b58a9d9dcd28b6ad3992ec4d8640eae2/gcc%2Ftestsuite%2Fgnat.dg%2Fopt14.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5e9fba51b58a9d9dcd28b6ad3992ec4d8640eae2/gcc%2Ftestsuite%2Fgnat.dg%2Fopt14.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Fopt14.adb?ref=5e9fba51b58a9d9dcd28b6ad3992ec4d8640eae2", "patch": "@@ -0,0 +1,25 @@\n+-- { dg-do run }\n+-- { dg-options \"-O2\" }\n+\n+procedure Opt14 is\n+\n+  type Rec is record\n+    I1, I2, I3 : Integer;\n+  end record;\n+\n+  type Ptr is access Rec;\n+\n+  P : Ptr := new Rec'(0,0,0);\n+\n+  procedure Sub (R : In Out Rec) is\n+  begin\n+    R.I3 := R.I3 - 1;\n+  end;\n+\n+begin\n+  P.all := (1,2,3);\n+  Sub (P.all);\n+  if P.all /= (1,2,2) then\n+    raise Program_Error;\n+  end if;\n+end;"}, {"sha": "c2ec20429322f23eba5e7c257bab80e75d9b57d4", "filename": "gcc/tree-sra.c", "status": "modified", "additions": 13, "deletions": 1, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5e9fba51b58a9d9dcd28b6ad3992ec4d8640eae2/gcc%2Ftree-sra.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5e9fba51b58a9d9dcd28b6ad3992ec4d8640eae2/gcc%2Ftree-sra.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-sra.c?ref=5e9fba51b58a9d9dcd28b6ad3992ec4d8640eae2", "patch": "@@ -173,6 +173,9 @@ struct access\n      entirely? */\n   unsigned total_scalarization : 1;\n \n+  /* Is this access an access to a non-addressable field? */\n+  unsigned non_addressable : 1;\n+\n   /* Is this access currently in the work queue?  */\n   unsigned grp_queued : 1;\n \n@@ -816,6 +819,10 @@ create_access (tree expr, gimple stmt, bool write)\n   access->grp_unscalarizable_region = unscalarizable_region;\n   access->stmt = stmt;\n \n+  if (TREE_CODE (expr) == COMPONENT_REF\n+      && DECL_NONADDRESSABLE_P (TREE_OPERAND (expr, 1)))\n+    access->non_addressable = 1;\n+\n   return access;\n }\n \n@@ -3666,13 +3673,18 @@ decide_one_param_reduction (struct access *repr)\n   for (; repr; repr = repr->next_grp)\n     {\n       gcc_assert (parm == repr->base);\n-      new_param_count++;\n+\n+      /* Taking the address of a non-addressable field is verboten.  */\n+      if (by_ref && repr->non_addressable)\n+\treturn 0;\n \n       if (!by_ref || (!repr->grp_maybe_modified\n \t\t      && !repr->grp_not_necessarilly_dereferenced))\n \ttotal_size += repr->size;\n       else\n \ttotal_size += cur_parm_size;\n+\n+      new_param_count++;\n     }\n \n   gcc_assert (new_param_count > 0);"}]}