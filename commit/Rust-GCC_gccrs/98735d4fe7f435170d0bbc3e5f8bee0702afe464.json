{"sha": "98735d4fe7f435170d0bbc3e5f8bee0702afe464", "node_id": "C_kwDOANBUbNoAKDk4NzM1ZDRmZTdmNDM1MTcwZDBiYmMzZTVmOGJlZTA3MDJhZmU0NjQ", "commit": {"author": {"name": "Philip Herron", "email": "herron.philip@googlemail.com", "date": "2023-03-29T15:28:11Z"}, "committer": {"name": "Philip Herron", "email": "herron.philip@googlemail.com", "date": "2023-03-30T14:17:53Z"}, "message": "gccrs: handle bare function types with no specified return type\n\nWhen we have a function with no return type this defaults to (), but we\nneed to be sure we generate a new implicit HirId for it otherwise it will\nend up in a recursive reference chain.\n\nFixes #2042\n\ngcc/rust/ChangeLog:\n\n\t* typecheck/rust-hir-type-check-type.cc (TypeCheckType::visit):\n\tAdd implicit unit type as the return type when not specified\n\ngcc/testsuite/ChangeLog:\n\n\t* rust/compile/issue-2042.rs: New test.\n\nSigned-off-by: Philip Herron <herron.philip@googlemail.com>", "tree": {"sha": "12e069c2e44f039a246f87e06178e9efb0c34147", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/12e069c2e44f039a246f87e06178e9efb0c34147"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/98735d4fe7f435170d0bbc3e5f8bee0702afe464", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/98735d4fe7f435170d0bbc3e5f8bee0702afe464", "html_url": "https://github.com/Rust-GCC/gccrs/commit/98735d4fe7f435170d0bbc3e5f8bee0702afe464", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/98735d4fe7f435170d0bbc3e5f8bee0702afe464/comments", "author": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "committer": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ea9ae4044000496714d3f0c58f3dba21487247ac", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ea9ae4044000496714d3f0c58f3dba21487247ac", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ea9ae4044000496714d3f0c58f3dba21487247ac"}], "stats": {"total": 22, "additions": 18, "deletions": 4}, "files": [{"sha": "ee683d8e82529f475ca1c1d2bf36b31ccb667049", "filename": "gcc/rust/typecheck/rust-hir-type-check-type.cc", "status": "modified", "additions": 12, "deletions": 4, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/98735d4fe7f435170d0bbc3e5f8bee0702afe464/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-type.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/98735d4fe7f435170d0bbc3e5f8bee0702afe464/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-type.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-type.cc?ref=98735d4fe7f435170d0bbc3e5f8bee0702afe464", "patch": "@@ -70,10 +70,18 @@ TypeCheckType::Resolve (HIR::Type *type)\n void\n TypeCheckType::visit (HIR::BareFunctionType &fntype)\n {\n-  TyTy::BaseType *return_type\n-    = fntype.has_return_type ()\n-\t? TypeCheckType::Resolve (fntype.get_return_type ().get ())\n-\t: TyTy::TupleType::get_unit_type (fntype.get_mappings ().get_hirid ());\n+  TyTy::BaseType *return_type;\n+  if (fntype.has_return_type ())\n+    {\n+      return_type = TypeCheckType::Resolve (fntype.get_return_type ().get ());\n+    }\n+  else\n+    {\n+      // needs a new implicit ID\n+      HirId ref = mappings->get_next_hir_id ();\n+      return_type = TyTy::TupleType::get_unit_type (ref);\n+      context->insert_implicit_type (ref, return_type);\n+    }\n \n   std::vector<TyTy::TyVar> params;\n   for (auto &param : fntype.get_function_params ())"}, {"sha": "9fee13de2f937fa8cdc48864ca51e71d154c28ac", "filename": "gcc/testsuite/rust/compile/issue-2042.rs", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/98735d4fe7f435170d0bbc3e5f8bee0702afe464/gcc%2Ftestsuite%2Frust%2Fcompile%2Fissue-2042.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/98735d4fe7f435170d0bbc3e5f8bee0702afe464/gcc%2Ftestsuite%2Frust%2Fcompile%2Fissue-2042.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fcompile%2Fissue-2042.rs?ref=98735d4fe7f435170d0bbc3e5f8bee0702afe464", "patch": "@@ -0,0 +1,6 @@\n+fn f<'r>(p: &'r mut fn(p: &mut ())) {\n+    (*p)(())\n+    // { dg-error \"expected .&mut ().\" \"\" { target *-*-* } .-1 }\n+}\n+\n+fn main() {}"}]}