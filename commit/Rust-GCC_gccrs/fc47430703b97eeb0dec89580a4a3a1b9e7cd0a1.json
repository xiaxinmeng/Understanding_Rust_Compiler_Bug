{"sha": "fc47430703b97eeb0dec89580a4a3a1b9e7cd0a1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmM0NzQzMDcwM2I5N2VlYjBkZWM4OTU4MGE0YTNhMWI5ZTdjZDBhMQ==", "commit": {"author": {"name": "Eric Christopher", "email": "echristo@gcc.gnu.org", "date": "2005-02-01T03:02:51Z"}, "committer": {"name": "Eric Christopher", "email": "echristo@gcc.gnu.org", "date": "2005-02-01T03:02:51Z"}, "message": "mips.c (override_options): Warn if -mint64 is used.\n\n2005-02-01  Eric Christopher  <echristo@redhat.com>\n\n\t* config/mips/mips.c (override_options): Warn if -mint64\n\tis used.\n\t* doc/invoke.texi (MIPS Options): Document that -mint64 is\n\tdeprecated.\n\nFrom-SVN: r94514", "tree": {"sha": "de2ba8436bb1f3fdae3087feb25fe3edf89d8060", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/de2ba8436bb1f3fdae3087feb25fe3edf89d8060"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/fc47430703b97eeb0dec89580a4a3a1b9e7cd0a1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fc47430703b97eeb0dec89580a4a3a1b9e7cd0a1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fc47430703b97eeb0dec89580a4a3a1b9e7cd0a1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fc47430703b97eeb0dec89580a4a3a1b9e7cd0a1/comments", "author": null, "committer": null, "parents": [{"sha": "7f75bb83182ad56c111263bc484ef4a65bd42d67", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7f75bb83182ad56c111263bc484ef4a65bd42d67", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7f75bb83182ad56c111263bc484ef4a65bd42d67"}], "stats": {"total": 61, "additions": 37, "deletions": 24}, "files": [{"sha": "ef8417968e2020432efd348116b71140415a67cd", "filename": "gcc/ChangeLog", "status": "modified", "additions": 31, "deletions": 24, "changes": 55, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fc47430703b97eeb0dec89580a4a3a1b9e7cd0a1/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fc47430703b97eeb0dec89580a4a3a1b9e7cd0a1/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=fc47430703b97eeb0dec89580a4a3a1b9e7cd0a1", "patch": "@@ -1,3 +1,10 @@\n+2005-02-01  Eric Christopher  <echristo@redhat.com>\n+\n+\t* config/mips/mips.c (override_options): Warn if -mint64\n+\tis used.\n+\t* doc/invoke.texi (MIPS Options): Document that -mint64 is\n+\tdeprecated.\n+\n 2005-02-01  Kazu Hirata  <kazu@cs.umass.edu>\n \n \t* cse.c (cse_reg_info): Remove hash_next, next, regno.  Add\n@@ -2107,7 +2114,7 @@\n \n 2005-01-11  Andreas Krebbel  <krebbel1@de.ibm.com>\n \n-\t* config/s390/s390.c (struct s390_frame_layout): Remove \n+\t* config/s390/s390.c (struct s390_frame_layout): Remove\n \tsave_backchain_p.\n \t(s390_frame_info, s390_emit_prologue): Replace occurrences of\n \tsave_backchain_p with TARGET_BACKCHAIN.\n@@ -2227,12 +2234,12 @@\n \n 2005-01-09  Ira Rosen  <irar@il.ibm.com>\n \n-\t* tree-vectorizer.c (vect_analyze_offset_expr): Use \n+\t* tree-vectorizer.c (vect_analyze_offset_expr): Use\n \texpr_invariant_in_loop_p.\n \tInitialize outputs first thing in the function.\n \t(vect_update_ivs_after_vectorizer): Call initial_condition_in_loop_num.\n \t(vect_is_simple_iv_evolution): Call initial_condition_in_loop_num.\n-\t(vect_analyze_pointer_ref_access): Check that the initial condition of \n+\t(vect_analyze_pointer_ref_access): Check that the initial condition of\n \tthe access function is loop invariant.\n \n 2005-01-09  Richard Henderson  <rth@redhat.com>\n@@ -2254,15 +2261,15 @@\n \tgtv2si3, umaxv8qi3, smaxv4hi3, uminv8qi3, sminv4hi3, ashrv4hi3,\n \tashrv2si3, lshrv4hi3, lshrv2si3, mmx_lshrdi3, ashlv4hi3, ashlv2si3,\n \tmmx_ashldi3, mmx_packsswb, mmx_packssdw, mmx_packuswb, mmx_punpckhbw,\n-\tmmx_punpckhwd, mmx_punpckhdq, mmx_punpcklbw, mmx_punpcklwd, \n+\tmmx_punpckhwd, mmx_punpckhdq, mmx_punpcklbw, mmx_punpcklwd,\n \tmmx_punpckldq, emms, addv2sf3, subv2sf3, subrv2sf3, gtv2sf3, gev2sf3,\n \teqv2sf3, pfmaxv2sf3, pfminv2sf3, mulv2sf3, femms, pf2id, pf2iw,\n \tpfacc, pfnacc, pfpnacc, pi2fw, floatv2si2, pfrcpv2sf2, pfrcpit1v2sf3,\n \tpfrcpit2v2sf3, pfrsqrtv2sf2, pfrsqit1v2sf3, pmulhrwv4hi3, pswapdv2si2,\n \tpswapdv2sf2): Move to mmx.md; rename as necessary with leading\n \tmmx_ prefix.\n \t(mmx_clrdi, pavgusb): Remove.\n-\t(ldmxcsr, stmxcsr, sfence, sfence_insn): Move to sse.md; rename \n+\t(ldmxcsr, stmxcsr, sfence, sfence_insn): Move to sse.md; rename\n \twith leading sse_ prefix.\n \t* config/i386/sse.md: Receive them.\n \t* config/i386/mmx.md: New file.\n@@ -2276,7 +2283,7 @@\n \t(mmx_add<MMXMODEI>3, mmx_ssadd<MMXMODE12>3, mmx_usadd<MMXMODE12>3,\n \tmmx_sub<MMXMODEI>3, mmx_sssub<MMXMODE12>3, mmx_ussub<MMXMODE12>3\n \tmmx_ashr<MMXMODE24>3, mmx_lshr<MMXMODE23>3, mmx_ashl<MMXMODE24>3\n-\tmmx_eq<MMXMODEI>3, mmx_gt<MMXMODEI>3, mmx_and<MMXMODEI>3, \n+\tmmx_eq<MMXMODEI>3, mmx_gt<MMXMODEI>3, mmx_and<MMXMODEI>3,\n \tmmx_nand<MMXMODEI>3, mmx_ior<MMXMODEI>3, mmx_xor<MMXMODEI>3):\n \tMacroize from existing patterns; use ix86_binary_operator_ok.\n \t(mmx_packsswb, mmx_packssdw, mmx_packuswb): Add memory alternative.\n@@ -2334,16 +2341,16 @@\n \t(movtf, movtf_internal): Move near other fp moves.\n \t(SSEMODE, SSEMODEI, vec_setv2df, vec_extractv2df, vec_initv2df,\n \tvec_setv4sf, vec_extractv4sf, vec_initv4sf, movv4sf, movv4sf_internal,\n-\tmovv2df, movv2df_internal, mov<SSEMODEI>, mov<SSEMODEI>_internal, \n+\tmovv2df, movv2df_internal, mov<SSEMODEI>, mov<SSEMODEI>_internal,\n \tmovmisalign<SSEMODE>, sse_movups_1, sse_movmskps, sse_movntv4sf,\n \tsse_movhlps, sse_movlhps, sse_storehps, sse_loadhps, sse_storelps,\n \tsse_loadlps, sse_loadss, sse_loadss_1, sse_movss, sse_storess,\n \tsse_shufps, addv4sf3, vmaddv4sf3, subv4sf3, vmsubv4sf3, negv4sf2,\n \tmulv4sf3, vmmulv4sf3, divv4sf3, vmdivv4sf3, rcpv4sf2, vmrcpv4sf2,\n \trsqrtv4sf2, vmrsqrtv4sf2, sqrtv4sf2, vmsqrtv4sf2, sse_andv4sf3,\n-\tsse_nandv4sf3, sse_iorv4sf3, sse_xorv4sf3, sse2_andv2df3, \n-\tsse2_nandv2df3, sse2_iorv2df3, sse2_xorv2df3, sse2_andv2di3, \n-\tsse2_nandv2di3, sse2_iorv2di3, sse2_xorv2di3, maskcmpv4sf3, \n+\tsse_nandv4sf3, sse_iorv4sf3, sse_xorv4sf3, sse2_andv2df3,\n+\tsse2_nandv2df3, sse2_iorv2df3, sse2_xorv2df3, sse2_andv2di3,\n+\tsse2_nandv2di3, sse2_iorv2di3, sse2_xorv2di3, maskcmpv4sf3,\n \tvmmaskcmpv4sf3, sse_comi, sse_ucomi, sse_unpckhps, sse_unpcklps,\n \tsmaxv4sf3, vmsmaxv4sf3, sminv4sf3, vmsminv4sf3, cvtpi2ps, cvtps2pi,\n \tcvttps2pi, cvtsi2ss, cvtsi2ssq, cvtss2si, cvtss2siq, cvttss2si,\n@@ -2361,14 +2368,14 @@\n \tsmulv8hi3_highpart, umulv8hi3_highpart, sse2_umulsidi3,\n \tsse2_umulv2siv2di3, sse2_pmaddwd, sse2_uavgv16qi3, sse2_uavgv8hi3,\n \tsse2_psadbw, sse2_pinsrw, sse2_pextrw, sse2_pshufd, sse2_pshuflw,\n-\tsse2_pshufhw, eqv16qi3, eqv8hi3, eqv4si3, gtv16qi3, gtv8hi3, \n+\tsse2_pshufhw, eqv16qi3, eqv8hi3, eqv4si3, gtv16qi3, gtv8hi3,\n \tgtv4si3, umaxv16qi3, smaxv8hi3, uminv16qi3, sminv8hi3, ashrv8hi3,\n \tashrv4si3, lshrv8hi3, lshrv4si3, lshrv2di3, ashlv8hi3, ashlv4si3,\n \tashlv2di3, sse2_ashlti3, sse2_lshrti3, sse2_unpckhpd, sse2_unpcklpd,\n-\tsse2_packsswb, sse2_packssdw, sse2_packuswb, sse2_punpckhbw, \n+\tsse2_packsswb, sse2_packssdw, sse2_packuswb, sse2_punpckhbw,\n \tsse2_punpckhwd, sse2_punpckhdq, sse2_punpcklbw, sse2_punpcklwd,\n \tsse2_punpckldq, sse2_punpcklqdq, sse2_punpckhqdq, sse2_movupd,\n-\tsse2_movdqu, sse2_movdq2q, sse2_movdq2q_rex64, sse2_movq2dq, \n+\tsse2_movdqu, sse2_movdq2q, sse2_movdq2q_rex64, sse2_movq2dq,\n \tsse2_movq2dq_rex64, sse2_loadd, sse2_stored, sse2_storehpd,\n \tsse2_loadhpd, sse2_storelpd, sse2_loadlpd, sse2_movsd, sse2_loadsd,\n \tsse2_loadsd_1, sse2_storesd, sse2_shufpd, sse2_clflush, sse2_mfence,\n@@ -2413,19 +2420,19 @@\n \tsse3_haddv4sf3, sse3_hsubv4sf3, sse3_addsubv2df3, sse3_haddv2df3,\n \tsse3_hsubv2df3, sse2_ashlti3, sse2_lshrti3): Likewise.\n \t(sse_movhlps): Model with vec_select+vec_concat.\n-\t(sse_movlhps, sse_unpckhps, sse_unpcklps, sse3_movshdup, \n+\t(sse_movlhps, sse_unpckhps, sse_unpcklps, sse3_movshdup,\n \tsse3_movsldup, sse_shufps, sse_shufps_1, sse2_unpckhpd, sse3_movddup,\n \tsse2_unpcklpd, sse2_shufpd, sse2_shufpd_1, sse2_punpckhbw,\n \tsse2_punpcklbw, sse2_punpckhwd, sse2_punpcklwd, sse2_punpckhdq,\n \tsse2_punpckldq, sse2_punpckhqdq, sse2_punpcklqdq, sse2_pshufd,\n-\tsse2_pshufd_1, sse2_pshuflw, sse2_pshuflw_1, sse2_pshufhw, \n+\tsse2_pshufd_1, sse2_pshuflw, sse2_pshuflw_1, sse2_pshufhw,\n \tsse2_pshufhw_1): Likewise.\n \t(neg<SSEMODEI>2, one_cmpl<SSEMODEI>2): New.\n \t(add<SSEMODEI>3, sse2_ssadd<SSEMODE12>3, sse2_usadd<SSEMODE12>3,\n \tsub<SSEMODEI>3, sse2_sssub<SSEMODE12>3, sse2_ussub<SSEMODE12>3,\n \tashr<SSEMODE24>3, lshr<SSEMODE248>3, sse2_eq<SSEMODE124>3,\n \tsse2_gt<SSEMODDE124>3, and<SSEMODEI>3, sse_nand<SSEMODEI>3,\n-\tior<SSEMODEI>3, xor<SSEMODEI>3): Macroize from existing patterns.\t\n+\tior<SSEMODEI>3, xor<SSEMODEI>3): Macroize from existing patterns.\n \t(addv4sf3, sse_vmaddv4sf3, mulv4sf3, sse_vmmulv4sf3, smaxv4sf3,\n \tsse_vmsmaxv4sf3, sminv4sf3, sse_vmsminv4sf3, addv2df3, sse2_vmaddv2df3,\n \tmulv2df3, sse2_vmmulv2df3, smaxv2df3, sse2_vmsmaxv2df3, sminv2df3,\n@@ -2551,14 +2558,14 @@\n \tfor IBM long double format correctly.\n \n 2005-01-06  Daniel Berlin <dberlin@dberlin.org>\n-\t\n+\n \tFix PR tree-optimization/18792\n \n \t* tree-data-ref.c (build_classic_dist_vector): Change first_loop\n \tto first_loop_depth, and use loop depth instead of loop number.\n \t(build_classic_dir_vector): Ditto.\n \t(compute_data_dependences_for_loop): Use depth, not loop number.\n-\t* tree-loop-linear.c (try_interchange_loops): Use loop depth, not loop \n+\t* tree-loop-linear.c (try_interchange_loops): Use loop depth, not loop\n \tnumber. Pass in loops, instead of loop numbers.\n \t(gather_interchange_stats): Ditto.\n \t(linear_transform_loops): Ditto.\n@@ -2580,7 +2587,7 @@\n \t* gcc.c (process_command): Change year in 'gcc --version' to 2005.\n \n 2005-01-05  Daniel Berlin  <dberlin@dberlin.org>\n-\t\n+\n \tFix PR middle-end/19286\n \tFix PR debug/19267\n \t* dwarf2out.c (gen_subprogram_die): If we've already tried to\n@@ -2591,7 +2598,7 @@\n \t(decls_for_scope): Ditto.\n \t* gimple-low.c (mark_blocks_with_used_subblocks): Remove.\n \t(mark_used_blocks): Don't call mark_blocks_with_used_subblocks.\n-\t\n+\n 2005-01-05  Richard Henderson  <rth@redhat.com>\n \n \tPR target/11327\n@@ -2600,7 +2607,7 @@\n \t(ix86_expand_binop_builtin): Force operands into registers\n \twhen optimizing.\n \t(ix86_expand_unop_builtin, ix86_expand_unop1_builtin,\n-\tix86_expand_sse_compare, ix86_expand_sse_comi, \n+\tix86_expand_sse_compare, ix86_expand_sse_comi,\n \tix86_expand_builtin): Likewise.\n \n 2005-01-05  Richard Henderson  <rth@redhat.com>\n@@ -2665,7 +2672,7 @@\n \t    Richard Henderson  <rth@redhat.com>\n \n \tPR target/18910\n-\t* config/i386/i386.c (ix86_expand_move): Handle tls symbols \n+\t* config/i386/i386.c (ix86_expand_move): Handle tls symbols\n \twith an offset.\n \n 2005-01-05  Richard Henderson  <rth@redhat.com>\n@@ -2843,7 +2850,7 @@\n \n \t* tree-vectorizer.c (vect_strip_conversions): New function.\n \t(vect_analyze_offset_expr): Call vect_strip_conversions. Add\n-\tcheck for binary class.\t\n+\tcheck for binary class.\n \n 2005-01-03  Daniel Berlin  <dberlin@dberlin.org>\n \n@@ -2858,7 +2865,7 @@\n \t* tree-inline.c: Include debug.h.\n \t(expand_call_inline): Call outlining_inline_function here.\n \t* tree-optimize.c (init_tree_optimization_passes): Add\n-\tpass_mark_used_blocks. \n+\tpass_mark_used_blocks.\n \t* tree-pass.h (pass_mark_used_blocks): New.\n \t* Makefile.in (tree-inline.o): Add debug.h dependency.\n "}, {"sha": "e3b4b312f9cd931f1d9a9adb653547b84b267189", "filename": "gcc/config/mips/mips.c", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fc47430703b97eeb0dec89580a4a3a1b9e7cd0a1/gcc%2Fconfig%2Fmips%2Fmips.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fc47430703b97eeb0dec89580a4a3a1b9e7cd0a1/gcc%2Fconfig%2Fmips%2Fmips.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.c?ref=fc47430703b97eeb0dec89580a4a3a1b9e7cd0a1", "patch": "@@ -4131,6 +4131,10 @@ override_options (void)\n \ttarget_flags &= ~MASK_LONG64;\n     }\n \n+  /* Deprecate -mint64. Remove after 4.0 branches.  */\n+  if ((target_flags_explicit & MASK_INT64) != 0)\n+    warning (\"-mint64 is a deprecated option\");\n+\n   if (MIPS_MARCH_CONTROLS_SOFT_FLOAT\n       && (target_flags_explicit & MASK_SOFT_FLOAT) == 0)\n     {"}, {"sha": "b58cd4195d94bd33ec5cd0a67d4f4a27f5af9199", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fc47430703b97eeb0dec89580a4a3a1b9e7cd0a1/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fc47430703b97eeb0dec89580a4a3a1b9e7cd0a1/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=fc47430703b97eeb0dec89580a4a3a1b9e7cd0a1", "patch": "@@ -9590,6 +9590,8 @@ Force @code{int} and @code{long} types to be 64 bits wide.  See\n @option{-mlong32} for an explanation of the default and the way\n that the pointer size is determined.\n \n+This option has been deprecated and will be removed in a future release.\n+\n @item -mlong64\n @opindex mlong64\n Force @code{long} types to be 64 bits wide.  See @option{-mlong32} for"}]}