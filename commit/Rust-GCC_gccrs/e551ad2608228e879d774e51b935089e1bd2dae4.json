{"sha": "e551ad2608228e879d774e51b935089e1bd2dae4", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTU1MWFkMjYwODIyOGU4NzlkNzc0ZTUxYjkzNTA4OWUxYmQyZGFlNA==", "commit": {"author": {"name": "Bernd Schmidt", "email": "bernd.schmidt@analog.com", "date": "2006-04-24T19:35:38Z"}, "committer": {"name": "Bernd Schmidt", "email": "bernds@gcc.gnu.org", "date": "2006-04-24T19:35:38Z"}, "message": "rtl.def (SS_ASHIFT, SS_NEG): New codes.\n\n\t* rtl.def (SS_ASHIFT, SS_NEG): New codes.\n\t* doc/rtl.texi: Document them.\n\t* simplify-rtx.c (simplify_unary_operation,\n\tsimplify_binary_operation_1): Don't abort when we see them.\n\nFrom-SVN: r113227", "tree": {"sha": "18e2a0a01b54455ec7b83b50a6b6607d07c7c934", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/18e2a0a01b54455ec7b83b50a6b6607d07c7c934"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e551ad2608228e879d774e51b935089e1bd2dae4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e551ad2608228e879d774e51b935089e1bd2dae4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e551ad2608228e879d774e51b935089e1bd2dae4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e551ad2608228e879d774e51b935089e1bd2dae4/comments", "author": null, "committer": null, "parents": [{"sha": "bfa1122312a8db70406aaf8a97e55352258f336e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bfa1122312a8db70406aaf8a97e55352258f336e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bfa1122312a8db70406aaf8a97e55352258f336e"}], "stats": {"total": 42, "additions": 38, "deletions": 4}, "files": [{"sha": "9f19a12b657d8a79c75684731f76692dad904c96", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e551ad2608228e879d774e51b935089e1bd2dae4/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e551ad2608228e879d774e51b935089e1bd2dae4/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=e551ad2608228e879d774e51b935089e1bd2dae4", "patch": "@@ -1,3 +1,10 @@\n+2006-04-24  Bernd Schmidt  <bernd.schmidt@analog.com>\n+\n+\t* rtl.def (SS_ASHIFT, SS_NEG): New codes.\n+\t* doc/rtl.texi: Document them.\n+\t* simplify-rtx.c (simplify_unary_operation,\n+\tsimplify_binary_operation_1): Don't abort when we see them.\n+\n 2006-04-24  Mark Mitchell  <mark@codesourcery.com>\n \n \tRevert:"}, {"sha": "87f13d80aa61794fa562ac3d3b06d66b703f889f", "filename": "gcc/doc/rtl.texi", "status": "modified", "additions": 22, "deletions": 4, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e551ad2608228e879d774e51b935089e1bd2dae4/gcc%2Fdoc%2Frtl.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e551ad2608228e879d774e51b935089e1bd2dae4/gcc%2Fdoc%2Frtl.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Frtl.texi?ref=e551ad2608228e879d774e51b935089e1bd2dae4", "patch": "@@ -1889,9 +1889,18 @@ or the first operand must be loaded into a register while its mode is\n still known.\n \n @findex neg\n+@findex ss_neg\n+@cindex negation\n+@cindex negation with signed saturation\n @item (neg:@var{m} @var{x})\n-Represents the negation (subtraction from zero) of the value represented\n-by @var{x}, carried out in mode @var{m}.\n+@itemx (ss_neg:@var{m} @var{x})\n+These two expressions represent the negation (subtraction from zero) of\n+the value represented by @var{x}, carried out in mode @var{m}.  They\n+differ in the behaviour on overflow of integer modes.  In the case of\n+@code{neg}, the negation of the operand may be a number not representable\n+in mode @var{m}, in which case it is truncated to @var{m}.  @code{ss_neg}\n+ensures that an out-of-bounds result saturates to the maximum or minimum\n+representable value.\n \n @findex mult\n @cindex multiplication\n@@ -1998,12 +2007,21 @@ and @var{y}, carried out in machine mode @var{m}, which must be a\n fixed-point mode.\n \n @findex ashift\n+@findex ss_ashift\n @cindex left shift\n @cindex shift\n @cindex arithmetic shift\n+@cindex arithmetic shift with signed saturation\n @item (ashift:@var{m} @var{x} @var{c})\n-Represents the result of arithmetically shifting @var{x} left by @var{c}\n-places.  @var{x} have mode @var{m}, a fixed-point machine mode.  @var{c}\n+@itemx (ss_ashift:@var{m} @var{x} @var{c})\n+These two expressions epresent the result of arithmetically shifting @var{x}\n+left by @var{c} places.  They differ in their behavior on overflow of integer\n+modes.  An @code{ashift} operation is a plain shift with no special behaviour\n+in case of a change in the sign bit; @code{ss_ashift} saturates to the minimum\n+or maximum representable value rather than allowing the shift to change the\n+sign bit of the value.\n+\n+@var{x} have mode @var{m}, a fixed-point machine mode.  @var{c}\n be a fixed-point mode or be a constant with mode @code{VOIDmode}; which\n mode is determined by the mode called for in the machine description\n entry for the left-shift instruction.  For example, on the VAX, the mode"}, {"sha": "847b51c6321790de91bf095ebc66e31da0f6ea95", "filename": "gcc/rtl.def", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e551ad2608228e879d774e51b935089e1bd2dae4/gcc%2Frtl.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e551ad2608228e879d774e51b935089e1bd2dae4/gcc%2Frtl.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frtl.def?ref=e551ad2608228e879d774e51b935089e1bd2dae4", "patch": "@@ -642,6 +642,12 @@ DEF_RTL_EXPR(US_PLUS, \"us_plus\", \"ee\", RTX_COMM_ARITH)\n /* Operand 0 minus operand 1, with signed saturation.  */\n DEF_RTL_EXPR(SS_MINUS, \"ss_minus\", \"ee\", RTX_BIN_ARITH)\n \n+/* Negation with signed saturation.  */\n+DEF_RTL_EXPR(SS_NEG, \"ss_neg\", \"e\", RTX_UNARY)\n+\n+/* Shift left with signed saturation.  */\n+DEF_RTL_EXPR(SS_ASHIFT, \"ss_ashift\", \"ee\", RTX_BIN_ARITH)\n+\n /* Operand 0 minus operand 1, with unsigned saturation.  */\n DEF_RTL_EXPR(US_MINUS, \"us_minus\", \"ee\", RTX_BIN_ARITH)\n "}, {"sha": "962c2de5840cbbca2cd189bbe712e57ef1816b4d", "filename": "gcc/simplify-rtx.c", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e551ad2608228e879d774e51b935089e1bd2dae4/gcc%2Fsimplify-rtx.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e551ad2608228e879d774e51b935089e1bd2dae4/gcc%2Fsimplify-rtx.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsimplify-rtx.c?ref=e551ad2608228e879d774e51b935089e1bd2dae4", "patch": "@@ -1092,6 +1092,7 @@ simplify_const_unary_operation (enum rtx_code code, enum machine_mode mode,\n \tcase FLOAT_TRUNCATE:\n \tcase SS_TRUNCATE:\n \tcase US_TRUNCATE:\n+\tcase SS_NEG:\n \t  return 0;\n \n \tdefault:\n@@ -2422,6 +2423,7 @@ simplify_binary_operation_1 (enum rtx_code code, enum machine_mode mode,\n       /* Fall through....  */\n \n     case ASHIFT:\n+    case SS_ASHIFT:\n     case LSHIFTRT:\n       if (trueop1 == CONST0_RTX (mode))\n \treturn op0;\n@@ -3110,6 +3112,7 @@ simplify_const_binary_operation (enum rtx_code code, enum machine_mode mode,\n \tcase US_PLUS:\n \tcase SS_MINUS:\n \tcase US_MINUS:\n+\tcase SS_ASHIFT:\n \t  /* ??? There are simplifications that can be done.  */\n \t  return 0;\n \t  "}]}