{"sha": "f81970b5f386630b98a33373c23dcc9234c6a980", "node_id": "C_kwDOANBUbNoAKGY4MTk3MGI1ZjM4NjYzMGI5OGEzMzM3M2MyM2RjYzkyMzRjNmE5ODA", "commit": {"author": {"name": "Martin Liska", "email": "mliska@suse.cz", "date": "2021-10-15T16:31:48Z"}, "committer": {"name": "Martin Liska", "email": "mliska@suse.cz", "date": "2021-11-02T08:42:24Z"}, "message": "Add TSVC tests.\n\ngcc/testsuite/ChangeLog:\n\n\t* gcc.dg/vect/vect.exp: Include also tsvc sub-directory.\n\t* gcc.dg/vect/tsvc/license.txt: New test.\n\t* gcc.dg/vect/tsvc/tsvc.h: New test.\n\t* gcc.dg/vect/tsvc/vect-tsvc-s000.c: New test.\n\t* gcc.dg/vect/tsvc/vect-tsvc-s111.c: New test.\n\t* gcc.dg/vect/tsvc/vect-tsvc-s1111.c: New test.\n\t* gcc.dg/vect/tsvc/vect-tsvc-s1112.c: New test.\n\t* gcc.dg/vect/tsvc/vect-tsvc-s1113.c: New test.\n\t* gcc.dg/vect/tsvc/vect-tsvc-s1115.c: New test.\n\t* gcc.dg/vect/tsvc/vect-tsvc-s1119.c: New test.\n\t* gcc.dg/vect/tsvc/vect-tsvc-s112.c: New test.\n\t* gcc.dg/vect/tsvc/vect-tsvc-s113.c: New test.\n\t* gcc.dg/vect/tsvc/vect-tsvc-s114.c: New test.\n\t* gcc.dg/vect/tsvc/vect-tsvc-s115.c: New test.\n\t* gcc.dg/vect/tsvc/vect-tsvc-s116.c: New test.\n\t* gcc.dg/vect/tsvc/vect-tsvc-s1161.c: New test.\n\t* gcc.dg/vect/tsvc/vect-tsvc-s118.c: New test.\n\t* gcc.dg/vect/tsvc/vect-tsvc-s119.c: New test.\n\t* gcc.dg/vect/tsvc/vect-tsvc-s121.c: New test.\n\t* gcc.dg/vect/tsvc/vect-tsvc-s1213.c: New test.\n\t* gcc.dg/vect/tsvc/vect-tsvc-s122.c: New test.\n\t* gcc.dg/vect/tsvc/vect-tsvc-s1221.c: New test.\n\t* gcc.dg/vect/tsvc/vect-tsvc-s123.c: New test.\n\t* gcc.dg/vect/tsvc/vect-tsvc-s1232.c: New test.\n\t* gcc.dg/vect/tsvc/vect-tsvc-s124.c: New test.\n\t* gcc.dg/vect/tsvc/vect-tsvc-s1244.c: New test.\n\t* gcc.dg/vect/tsvc/vect-tsvc-s125.c: New test.\n\t* gcc.dg/vect/tsvc/vect-tsvc-s1251.c: New test.\n\t* gcc.dg/vect/tsvc/vect-tsvc-s126.c: New test.\n\t* gcc.dg/vect/tsvc/vect-tsvc-s127.c: New test.\n\t* gcc.dg/vect/tsvc/vect-tsvc-s1279.c: New test.\n\t* gcc.dg/vect/tsvc/vect-tsvc-s128.c: New test.\n\t* gcc.dg/vect/tsvc/vect-tsvc-s1281.c: New test.\n\t* gcc.dg/vect/tsvc/vect-tsvc-s131.c: New test.\n\t* gcc.dg/vect/tsvc/vect-tsvc-s13110.c: New test.\n\t* gcc.dg/vect/tsvc/vect-tsvc-s132.c: New test.\n\t* gcc.dg/vect/tsvc/vect-tsvc-s1351.c: New test.\n\t* gcc.dg/vect/tsvc/vect-tsvc-s141.c: New test.\n\t* gcc.dg/vect/tsvc/vect-tsvc-s1421.c: New test.\n\t* gcc.dg/vect/tsvc/vect-tsvc-s151.c: New test.\n\t* gcc.dg/vect/tsvc/vect-tsvc-s152.c: New test.\n\t* gcc.dg/vect/tsvc/vect-tsvc-s161.c: New test.\n\t* gcc.dg/vect/tsvc/vect-tsvc-s162.c: New test.\n\t* gcc.dg/vect/tsvc/vect-tsvc-s171.c: New test.\n\t* gcc.dg/vect/tsvc/vect-tsvc-s172.c: New test.\n\t* gcc.dg/vect/tsvc/vect-tsvc-s173.c: New test.\n\t* gcc.dg/vect/tsvc/vect-tsvc-s174.c: New test.\n\t* gcc.dg/vect/tsvc/vect-tsvc-s175.c: New test.\n\t* gcc.dg/vect/tsvc/vect-tsvc-s176.c: New test.\n\t* gcc.dg/vect/tsvc/vect-tsvc-s2101.c: New test.\n\t* gcc.dg/vect/tsvc/vect-tsvc-s2102.c: New test.\n\t* gcc.dg/vect/tsvc/vect-tsvc-s211.c: New test.\n\t* gcc.dg/vect/tsvc/vect-tsvc-s2111.c: New test.\n\t* gcc.dg/vect/tsvc/vect-tsvc-s212.c: New test.\n\t* gcc.dg/vect/tsvc/vect-tsvc-s221.c: New test.\n\t* gcc.dg/vect/tsvc/vect-tsvc-s222.c: New test.\n\t* gcc.dg/vect/tsvc/vect-tsvc-s2233.c: New test.\n\t* gcc.dg/vect/tsvc/vect-tsvc-s2244.c: New test.\n\t* gcc.dg/vect/tsvc/vect-tsvc-s2251.c: New test.\n\t* gcc.dg/vect/tsvc/vect-tsvc-s2275.c: New test.\n\t* gcc.dg/vect/tsvc/vect-tsvc-s231.c: New test.\n\t* gcc.dg/vect/tsvc/vect-tsvc-s232.c: New test.\n\t* gcc.dg/vect/tsvc/vect-tsvc-s233.c: New test.\n\t* gcc.dg/vect/tsvc/vect-tsvc-s235.c: New test.\n\t* gcc.dg/vect/tsvc/vect-tsvc-s241.c: New test.\n\t* gcc.dg/vect/tsvc/vect-tsvc-s242.c: New test.\n\t* gcc.dg/vect/tsvc/vect-tsvc-s243.c: New test.\n\t* gcc.dg/vect/tsvc/vect-tsvc-s244.c: New test.\n\t* gcc.dg/vect/tsvc/vect-tsvc-s251.c: New test.\n\t* gcc.dg/vect/tsvc/vect-tsvc-s252.c: New test.\n\t* gcc.dg/vect/tsvc/vect-tsvc-s253.c: New test.\n\t* gcc.dg/vect/tsvc/vect-tsvc-s254.c: New test.\n\t* gcc.dg/vect/tsvc/vect-tsvc-s255.c: New test.\n\t* gcc.dg/vect/tsvc/vect-tsvc-s256.c: New test.\n\t* gcc.dg/vect/tsvc/vect-tsvc-s257.c: New test.\n\t* gcc.dg/vect/tsvc/vect-tsvc-s258.c: New test.\n\t* gcc.dg/vect/tsvc/vect-tsvc-s261.c: New test.\n\t* gcc.dg/vect/tsvc/vect-tsvc-s271.c: New test.\n\t* gcc.dg/vect/tsvc/vect-tsvc-s2710.c: New test.\n\t* gcc.dg/vect/tsvc/vect-tsvc-s2711.c: New test.\n\t* gcc.dg/vect/tsvc/vect-tsvc-s2712.c: New test.\n\t* gcc.dg/vect/tsvc/vect-tsvc-s272.c: New test.\n\t* gcc.dg/vect/tsvc/vect-tsvc-s273.c: New test.\n\t* gcc.dg/vect/tsvc/vect-tsvc-s274.c: New test.\n\t* gcc.dg/vect/tsvc/vect-tsvc-s275.c: New test.\n\t* gcc.dg/vect/tsvc/vect-tsvc-s276.c: New test.\n\t* gcc.dg/vect/tsvc/vect-tsvc-s277.c: New test.\n\t* gcc.dg/vect/tsvc/vect-tsvc-s278.c: New test.\n\t* gcc.dg/vect/tsvc/vect-tsvc-s279.c: New test.\n\t* gcc.dg/vect/tsvc/vect-tsvc-s281.c: New test.\n\t* gcc.dg/vect/tsvc/vect-tsvc-s291.c: New test.\n\t* gcc.dg/vect/tsvc/vect-tsvc-s292.c: New test.\n\t* gcc.dg/vect/tsvc/vect-tsvc-s293.c: New test.\n\t* gcc.dg/vect/tsvc/vect-tsvc-s311.c: New test.\n\t* gcc.dg/vect/tsvc/vect-tsvc-s3110.c: New test.\n\t* gcc.dg/vect/tsvc/vect-tsvc-s3111.c: New test.\n\t* gcc.dg/vect/tsvc/vect-tsvc-s31111.c: New test.\n\t* gcc.dg/vect/tsvc/vect-tsvc-s3112.c: New test.\n\t* gcc.dg/vect/tsvc/vect-tsvc-s3113.c: New test.\n\t* gcc.dg/vect/tsvc/vect-tsvc-s312.c: New test.\n\t* gcc.dg/vect/tsvc/vect-tsvc-s313.c: New test.\n\t* gcc.dg/vect/tsvc/vect-tsvc-s314.c: New test.\n\t* gcc.dg/vect/tsvc/vect-tsvc-s315.c: New test.\n\t* gcc.dg/vect/tsvc/vect-tsvc-s316.c: New test.\n\t* gcc.dg/vect/tsvc/vect-tsvc-s317.c: New test.\n\t* gcc.dg/vect/tsvc/vect-tsvc-s318.c: New test.\n\t* gcc.dg/vect/tsvc/vect-tsvc-s319.c: New test.\n\t* gcc.dg/vect/tsvc/vect-tsvc-s321.c: New test.\n\t* gcc.dg/vect/tsvc/vect-tsvc-s322.c: New test.\n\t* gcc.dg/vect/tsvc/vect-tsvc-s323.c: New test.\n\t* gcc.dg/vect/tsvc/vect-tsvc-s3251.c: New test.\n\t* gcc.dg/vect/tsvc/vect-tsvc-s331.c: New test.\n\t* gcc.dg/vect/tsvc/vect-tsvc-s332.c: New test.\n\t* gcc.dg/vect/tsvc/vect-tsvc-s341.c: New test.\n\t* gcc.dg/vect/tsvc/vect-tsvc-s342.c: New test.\n\t* gcc.dg/vect/tsvc/vect-tsvc-s343.c: New test.\n\t* gcc.dg/vect/tsvc/vect-tsvc-s351.c: New test.\n\t* gcc.dg/vect/tsvc/vect-tsvc-s352.c: New test.\n\t* gcc.dg/vect/tsvc/vect-tsvc-s353.c: New test.\n\t* gcc.dg/vect/tsvc/vect-tsvc-s4112.c: New test.\n\t* gcc.dg/vect/tsvc/vect-tsvc-s4113.c: New test.\n\t* gcc.dg/vect/tsvc/vect-tsvc-s4114.c: New test.\n\t* gcc.dg/vect/tsvc/vect-tsvc-s4115.c: New test.\n\t* gcc.dg/vect/tsvc/vect-tsvc-s4116.c: New test.\n\t* gcc.dg/vect/tsvc/vect-tsvc-s4117.c: New test.\n\t* gcc.dg/vect/tsvc/vect-tsvc-s4121.c: New test.\n\t* gcc.dg/vect/tsvc/vect-tsvc-s421.c: New test.\n\t* gcc.dg/vect/tsvc/vect-tsvc-s422.c: New test.\n\t* gcc.dg/vect/tsvc/vect-tsvc-s423.c: New test.\n\t* gcc.dg/vect/tsvc/vect-tsvc-s424.c: New test.\n\t* gcc.dg/vect/tsvc/vect-tsvc-s431.c: New test.\n\t* gcc.dg/vect/tsvc/vect-tsvc-s441.c: New test.\n\t* gcc.dg/vect/tsvc/vect-tsvc-s442.c: New test.\n\t* gcc.dg/vect/tsvc/vect-tsvc-s443.c: New test.\n\t* gcc.dg/vect/tsvc/vect-tsvc-s451.c: New test.\n\t* gcc.dg/vect/tsvc/vect-tsvc-s452.c: New test.\n\t* gcc.dg/vect/tsvc/vect-tsvc-s453.c: New test.\n\t* gcc.dg/vect/tsvc/vect-tsvc-s471.c: New test.\n\t* gcc.dg/vect/tsvc/vect-tsvc-s481.c: New test.\n\t* gcc.dg/vect/tsvc/vect-tsvc-s482.c: New test.\n\t* gcc.dg/vect/tsvc/vect-tsvc-s491.c: New test.\n\t* gcc.dg/vect/tsvc/vect-tsvc-va.c: New test.\n\t* gcc.dg/vect/tsvc/vect-tsvc-vag.c: New test.\n\t* gcc.dg/vect/tsvc/vect-tsvc-vas.c: New test.\n\t* gcc.dg/vect/tsvc/vect-tsvc-vbor.c: New test.\n\t* gcc.dg/vect/tsvc/vect-tsvc-vdotr.c: New test.\n\t* gcc.dg/vect/tsvc/vect-tsvc-vif.c: New test.\n\t* gcc.dg/vect/tsvc/vect-tsvc-vpv.c: New test.\n\t* gcc.dg/vect/tsvc/vect-tsvc-vpvpv.c: New test.\n\t* gcc.dg/vect/tsvc/vect-tsvc-vpvts.c: New test.\n\t* gcc.dg/vect/tsvc/vect-tsvc-vpvtv.c: New test.\n\t* gcc.dg/vect/tsvc/vect-tsvc-vsumr.c: New test.\n\t* gcc.dg/vect/tsvc/vect-tsvc-vtv.c: New test.\n\t* gcc.dg/vect/tsvc/vect-tsvc-vtvtv.c: New test.", "tree": {"sha": "77bd1123224a1350c83d9606bdc4c212f7d7817e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/77bd1123224a1350c83d9606bdc4c212f7d7817e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f81970b5f386630b98a33373c23dcc9234c6a980", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f81970b5f386630b98a33373c23dcc9234c6a980", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f81970b5f386630b98a33373c23dcc9234c6a980", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f81970b5f386630b98a33373c23dcc9234c6a980/comments", "author": {"login": "marxin", "id": 2658545, "node_id": "MDQ6VXNlcjI2NTg1NDU=", "avatar_url": "https://avatars.githubusercontent.com/u/2658545?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marxin", "html_url": "https://github.com/marxin", "followers_url": "https://api.github.com/users/marxin/followers", "following_url": "https://api.github.com/users/marxin/following{/other_user}", "gists_url": "https://api.github.com/users/marxin/gists{/gist_id}", "starred_url": "https://api.github.com/users/marxin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marxin/subscriptions", "organizations_url": "https://api.github.com/users/marxin/orgs", "repos_url": "https://api.github.com/users/marxin/repos", "events_url": "https://api.github.com/users/marxin/events{/privacy}", "received_events_url": "https://api.github.com/users/marxin/received_events", "type": "User", "site_admin": false}, "committer": {"login": "marxin", "id": 2658545, "node_id": "MDQ6VXNlcjI2NTg1NDU=", "avatar_url": "https://avatars.githubusercontent.com/u/2658545?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marxin", "html_url": "https://github.com/marxin", "followers_url": "https://api.github.com/users/marxin/followers", "following_url": "https://api.github.com/users/marxin/following{/other_user}", "gists_url": "https://api.github.com/users/marxin/gists{/gist_id}", "starred_url": "https://api.github.com/users/marxin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marxin/subscriptions", "organizations_url": "https://api.github.com/users/marxin/orgs", "repos_url": "https://api.github.com/users/marxin/repos", "events_url": "https://api.github.com/users/marxin/events{/privacy}", "received_events_url": "https://api.github.com/users/marxin/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2e560abff4294639a0fcf666994c30fb2f00a324", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2e560abff4294639a0fcf666994c30fb2f00a324", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2e560abff4294639a0fcf666994c30fb2f00a324"}], "stats": {"total": 7948, "additions": 7948, "deletions": 0}, "files": [{"sha": "e16b36cb15c53162805f8f09160d4fcba116bd48", "filename": "gcc/testsuite/gcc.dg/vect/tsvc/license.txt", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f81970b5f386630b98a33373c23dcc9234c6a980/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Ftsvc%2Flicense.txt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f81970b5f386630b98a33373c23dcc9234c6a980/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Ftsvc%2Flicense.txt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Ftsvc%2Flicense.txt?ref=f81970b5f386630b98a33373c23dcc9234c6a980", "patch": "@@ -0,0 +1,29 @@\n+Copyright (c) 2011 University of Illinois at Urbana-Champaign.  All rights reserved.\n+\n+Developed by: Polaris Research Group\n+              University of Illinois at Urbana-Champaign\n+              http://polaris.cs.uiuc.edu\n+\n+Permission is hereby granted, free of charge, to any person obtaining a copy\n+of this software and associated documentation files (the \"Software\"), to\n+deal with the Software without restriction, including without limitation the\n+rights to use, copy, modify, merge, publish, distribute, sublicense, and/or\n+sell copies of the Software, and to permit persons to whom the Software is\n+furnished to do so, subject to the following conditions:\n+  1. Redistributions of source code must retain the above copyright notice,\n+     this list of conditions and the following disclaimers.\n+  2. Redistributions in binary form must reproduce the above copyright\n+     notice, this list of conditions and the following disclaimers in the\n+     documentation and/or other materials provided with the distribution.\n+  3. Neither the names of Polaris Research Group, University of Illinois at\n+     Urbana-Champaign, nor the names of its contributors may be used to endorse\n+     or promote products derived from this Software without specific prior\n+     written permission.\n+\n+THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL THE\n+CONTRIBUTORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n+FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS\n+WITH THE SOFTWARE."}, {"sha": "b52108dae9fcb188a45e185c20d1186063164fdb", "filename": "gcc/testsuite/gcc.dg/vect/tsvc/tsvc.h", "status": "added", "additions": 1421, "deletions": 0, "changes": 1421, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f81970b5f386630b98a33373c23dcc9234c6a980/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Ftsvc%2Ftsvc.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f81970b5f386630b98a33373c23dcc9234c6a980/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Ftsvc%2Ftsvc.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Ftsvc%2Ftsvc.h?ref=f81970b5f386630b98a33373c23dcc9234c6a980", "patch": "@@ -0,0 +1,1421 @@\n+/*  This file is distributed under the University of Illinois Open Source\n+    License. See license.txt for details.  */\n+\n+#define iterations 10000\n+#define LEN_1D 32000\n+#define LEN_2D 256\n+#define ARRAY_ALIGNMENT 64\n+\n+#pragma GCC push_options\n+#pragma GCC optimize \"-fno-tree-vectorize\"\n+\n+#include <stdio.h>\n+#include <stdlib.h>\n+#include <malloc.h>\n+#include <string.h>\n+#include <math.h>\n+\n+typedef float real_t;\n+#define ABS fabsf\n+\n+int dummy(real_t[LEN_1D], real_t[LEN_1D], real_t[LEN_1D], real_t[LEN_1D],\n+          real_t[LEN_1D], real_t[LEN_2D][LEN_2D], real_t[LEN_2D][LEN_2D],\n+          real_t[LEN_2D][LEN_2D], real_t);\n+\n+__attribute__((aligned(ARRAY_ALIGNMENT)))\n+real_t flat_2d_array[LEN_2D * LEN_2D];\n+__attribute__((aligned(ARRAY_ALIGNMENT))) real_t x[LEN_1D];\n+__attribute__((aligned(ARRAY_ALIGNMENT))) real_t a[LEN_1D], b[LEN_1D],\n+    c[LEN_1D], d[LEN_1D], e[LEN_1D], aa[LEN_2D][LEN_2D], bb[LEN_2D][LEN_2D],\n+    cc[LEN_2D][LEN_2D], tt[LEN_2D][LEN_2D];\n+__attribute__((aligned(ARRAY_ALIGNMENT))) int indx[LEN_1D];\n+\n+real_t* __restrict__ xx;\n+real_t* yy;\n+\n+void set_1d_array(real_t * arr, int length, real_t value, int stride);\n+void set_2d_array(real_t arr[LEN_2D][LEN_2D], real_t value, int stride);\n+\n+struct args_t {\n+    struct timeval t1;\n+    struct timeval t2;\n+    void * __restrict__ arg_info;\n+};\n+\n+enum {SET1D_RECIP_IDX = -1, SET1D_RECIP_IDX_SQ = -2};\n+\n+real_t sum1d(real_t arr[LEN_1D]);\n+real_t sum2d(real_t arr[LEN_2D][LEN_2D]);\n+\n+real_t sum_x();\n+real_t sum_a();\n+real_t sum_b();\n+real_t sum_c();\n+real_t sum_e();\n+\n+real_t sum_half_xx();\n+\n+real_t sum_a_aa();\n+\n+real_t sum_aa();\n+real_t sum_bb();\n+real_t sum_cc();\n+real_t sum_xx();\n+\n+real_t sum_aa_bb();\n+\n+real_t sum_flat_2d_array();\n+\n+real_t sum1d(real_t arr[LEN_1D]){\n+    real_t ret = 0.;\n+    for (int i = 0; i < LEN_1D; i++)\n+        ret += arr[i];\n+    return ret;\n+}\n+\n+real_t sum2d(real_t arr[LEN_2D][LEN_2D]){\n+    real_t sum = 0.;\n+    for (int i = 0; i < LEN_2D; i++){\n+        for (int j = 0; j < LEN_2D; j++){\n+            sum += arr[i][j];\n+        }\n+    }\n+\n+    return sum;\n+}\n+\n+real_t sum_x()\n+{\n+    return sum1d(x);\n+}\n+\n+real_t sum_xx()\n+{\n+    return sum1d(xx);\n+}\n+\n+real_t sum_a()\n+{\n+    return sum1d(a);\n+}\n+\n+real_t sum_b()\n+{\n+    return sum1d(b);\n+}\n+\n+real_t sum_a_aa()\n+{\n+    return sum1d(a) + sum2d(aa);\n+}\n+\n+real_t sum_c()\n+{\n+    return sum1d(c);\n+}\n+\n+real_t sum_e()\n+{\n+    return sum1d(e);\n+}\n+\n+real_t sum_aa()\n+{\n+    return sum2d(aa);\n+}\n+\n+real_t sum_bb()\n+{\n+    return sum2d(bb);\n+}\n+\n+real_t sum_aa_bb()\n+{\n+    return sum2d(aa) + sum2d(bb);\n+}\n+\n+real_t sum_cc()\n+{\n+    return sum2d(cc);\n+}\n+\n+real_t sum_half_xx()\n+{\n+    real_t temp = 00;\n+\n+    for (int i = 0; i < LEN_1D/2; i++){\n+        temp += xx[i];\n+    }\n+\n+    return temp;\n+}\n+\n+real_t sum_flat_2d_array()\n+{\n+    real_t sum = 0.;\n+\n+    for (int i = 0; i < LEN_2D*LEN_2D; i++){\n+        sum += flat_2d_array[i];\n+    }\n+\n+    return sum;\n+}\n+\n+\n+void set_1d_array(real_t * arr, int length, real_t value, int stride)\n+{\n+    if (stride == SET1D_RECIP_IDX) {\n+        for (int i = 0; i < length; i++) {\n+            arr[i] = 1. / (real_t) (i+1);\n+        }\n+    } else if (stride == SET1D_RECIP_IDX_SQ) {\n+        for (int i = 0; i < length; i++) {\n+            arr[i] = 1. / (real_t) ((i+1) * (i+1));\n+        }\n+    } else {\n+        for (int i = 0; i < length; i += stride) {\n+            arr[i] = value;\n+        }\n+    }\n+}\n+\n+void set_2d_array(real_t arr[LEN_2D][LEN_2D], real_t value, int stride)\n+{\n+    for (int i = 0; i < LEN_2D; i++) {\n+        set_1d_array(arr[i], LEN_2D, value, stride);\n+    }\n+}\n+\n+void init(int** ip, real_t* s1, real_t* s2){\n+    xx = (real_t*) memalign(ARRAY_ALIGNMENT, LEN_1D*sizeof(real_t));\n+    *ip = (int *) memalign(ARRAY_ALIGNMENT, LEN_1D*sizeof(real_t));\n+\n+    for (int i = 0; i < LEN_1D; i = i+5){\n+        (*ip)[i]   = (i+4);\n+        (*ip)[i+1] = (i+2);\n+        (*ip)[i+2] = (i);\n+        (*ip)[i+3] = (i+3);\n+        (*ip)[i+4] = (i+1);\n+    }\n+\n+    set_1d_array(a, LEN_1D, 1.,1);\n+    set_1d_array(b, LEN_1D, 1.,1);\n+    set_1d_array(c, LEN_1D, 1.,1);\n+    set_1d_array(d, LEN_1D, 1.,1);\n+    set_1d_array(e, LEN_1D, 1.,1);\n+    set_1d_array(x, LEN_1D, 1.,1);\n+    set_2d_array(aa, 0.,SET1D_RECIP_IDX);\n+    set_2d_array(bb, 0.,SET1D_RECIP_IDX);\n+    set_2d_array(cc, 0.,SET1D_RECIP_IDX);\n+\n+    for (int i = 0; i < LEN_1D; i++) {\n+        indx[i] = (i+1) % 4+1;\n+    }\n+\n+    *s1 = 1.0;\n+    *s2 = 2.0;\n+}\n+\n+int initialise_arrays(const char* name)\n+{\n+    real_t any=0.;\n+    real_t zero=0.;\n+    real_t half=.5;\n+    real_t one=1.;\n+    real_t two=2.;\n+    real_t small = .000001;\n+    int unit =1;\n+    int frac = SET1D_RECIP_IDX;\n+    int frac2 = SET1D_RECIP_IDX_SQ;\n+\n+    if    (!strcmp(name, \"s000\")) {\n+      for (int i = 0; i < LEN_1D; i++) {\n+            a[i] = 1+i;\n+            b[i] = 2+i;\n+            c[i] = 3+i;\n+            d[i] = 4+i;\n+            e[i] = 5+i;\n+          }\n+    } else if (!strcmp(name, \"s111\")) {\n+        set_1d_array(a, LEN_1D, one,unit);\n+        set_1d_array(b, LEN_1D, any,frac2);\n+        set_1d_array(c, LEN_1D, any,frac2);\n+        set_1d_array(d, LEN_1D, any,frac2);\n+        set_1d_array(e, LEN_1D, any,frac2);\n+    } else if (!strcmp(name, \"s112\")) {\n+        set_1d_array(a, LEN_1D, one,unit);\n+        set_1d_array(b, LEN_1D, any,frac2);\n+    } else if (!strcmp(name, \"s113\")) {\n+        set_1d_array(a, LEN_1D, one,unit);\n+        set_1d_array(b, LEN_1D, any,frac2);\n+    } else if (!strcmp(name, \"s114\")) {\n+        set_2d_array(aa, any,frac);\n+        set_2d_array(bb, any,frac2);\n+    } else if (!strcmp(name, \"s115\")) {\n+        set_1d_array(a, LEN_1D, one,unit);\n+        set_2d_array(aa,small,unit);\n+        set_2d_array(bb,small,unit);\n+        set_2d_array(cc,small,unit);\n+    } else if (!strcmp(name, \"s116\")) {\n+        set_1d_array(a, LEN_1D, one,unit);\n+    } else if (!strcmp(name, \"s118\")) {\n+        set_1d_array(a, LEN_1D, one,unit);\n+        set_2d_array(bb,small,unit);\n+    } else if (!strcmp(name, \"s119\")) {\n+        set_2d_array(aa, one,unit);\n+        set_2d_array(bb, any,frac2);\n+    } else if (!strcmp(name, \"s121\")) {\n+        set_1d_array(a, LEN_1D, one,unit);\n+        set_1d_array(b, LEN_1D, any,frac2);\n+    } else if (!strcmp(name, \"s122\")) {\n+        set_1d_array(a, LEN_1D, one,unit);\n+        set_1d_array(b, LEN_1D, any,frac2);\n+    } else if (!strcmp(name, \"s123\")) {\n+        set_1d_array(a, LEN_1D,zero,unit);\n+        set_1d_array(b, LEN_1D, one,unit);\n+        set_1d_array(c, LEN_1D, one,unit);\n+        set_1d_array(d, LEN_1D, any,frac);\n+        set_1d_array(e, LEN_1D, any,frac);\n+    } else if (!strcmp(name, \"s124\")) {\n+        set_1d_array(a, LEN_1D,zero,unit);\n+        set_1d_array(b, LEN_1D, one,unit);\n+        set_1d_array(c, LEN_1D, one,unit);\n+        set_1d_array(d, LEN_1D, any,frac);\n+        set_1d_array(e, LEN_1D, any,frac);\n+    } else if (!strcmp(name, \"s125\")) {\n+        set_1d_array(flat_2d_array, LEN_2D*LEN_2D,zero,unit);\n+        set_2d_array(aa, one,unit);\n+        set_2d_array(bb,half,unit);\n+        set_2d_array(cc, two,unit);\n+    } else if (!strcmp(name, \"s126\")) {\n+        set_2d_array(bb, one,unit);\n+        set_1d_array( flat_2d_array, LEN_2D*LEN_2D,any,frac);\n+        set_2d_array(cc, any,frac);\n+    } else if (!strcmp(name, \"s127\")) {\n+        set_1d_array(a, LEN_1D,zero,unit);\n+        set_1d_array(b, LEN_1D, one,unit);\n+        set_1d_array(c, LEN_1D, any,frac);\n+        set_1d_array(d, LEN_1D, any,frac);\n+        set_1d_array(e, LEN_1D, any,frac);\n+    } else if (!strcmp(name, \"s128\")) {\n+        set_1d_array(a, LEN_1D,zero,unit);\n+        set_1d_array(b, LEN_1D, two,unit);\n+        set_1d_array(c, LEN_1D, one,unit);\n+        set_1d_array(d, LEN_1D, one,unit);\n+    } else if (!strcmp(name, \"s131\")) {\n+        set_1d_array(a, LEN_1D, one,unit);\n+        set_1d_array(b, LEN_1D, any,frac2);\n+    } else if (!strcmp(name, \"s132\")) {\n+        set_2d_array(aa, one,unit);\n+        set_1d_array(b, LEN_1D, any,frac);\n+        set_1d_array(c, LEN_1D, any,frac);\n+    } else if (!strcmp(name, \"s141\")) {\n+        set_1d_array( flat_2d_array, LEN_2D*LEN_2D, one,unit);\n+        set_2d_array(bb, any,frac2);\n+    } else if (!strcmp(name, \"s151\")) {\n+        set_1d_array(a, LEN_1D, one,unit);\n+        set_1d_array(b, LEN_1D, any,frac2);\n+    } else if (!strcmp(name, \"s152\")) {\n+        set_1d_array(a, LEN_1D, one,unit);\n+        set_1d_array(b, LEN_1D,zero,unit);\n+        set_1d_array(c, LEN_1D, any,frac);\n+        set_1d_array(d, LEN_1D, any,frac);\n+        set_1d_array(e, LEN_1D, any,frac);\n+    } else if (!strcmp(name, \"s161\")) {\n+        set_1d_array(a, LEN_1D, one,unit);\n+        set_1d_array( &b[0], LEN_1D/2, one,2);\n+        set_1d_array( &b[1], LEN_1D/2,-one,2);\n+        set_1d_array(c, LEN_1D, one,unit);\n+        set_1d_array(d, LEN_1D, any,frac);\n+        set_1d_array(e, LEN_1D, any,frac);\n+    } else if (!strcmp(name, \"s162\")) {\n+        set_1d_array(a, LEN_1D, one,unit);\n+        set_1d_array(b, LEN_1D, any,frac);\n+        set_1d_array(c, LEN_1D, any,frac);\n+    } else if (!strcmp(name, \"s171\")) {\n+        set_1d_array(a, LEN_1D, one,unit);\n+        set_1d_array(b, LEN_1D, any,frac2);\n+    } else if (!strcmp(name, \"s172\")) {\n+        set_1d_array(a, LEN_1D, one,unit);\n+        set_1d_array(b, LEN_1D, any,frac2);\n+    } else if (!strcmp(name, \"s173\")) {\n+        set_1d_array(a, LEN_1D, one,unit);\n+        set_1d_array(b, LEN_1D, any,frac2);\n+    } else if (!strcmp(name, \"s174\")) {\n+        set_1d_array(a, LEN_1D, one,unit);\n+        set_1d_array(b, LEN_1D, any,frac2);\n+    } else if (!strcmp(name, \"s175\")) {\n+        set_1d_array(a, LEN_1D, one,unit);\n+        set_1d_array(b, LEN_1D, any,frac2);\n+    } else if (!strcmp(name, \"s176\")) {\n+        set_1d_array(a, LEN_1D, one,unit);\n+        set_1d_array(b, LEN_1D, any,frac);\n+        set_1d_array(c, LEN_1D, any,frac);\n+    } else if (!strcmp(name, \"s211\")) {\n+        set_1d_array(a, LEN_1D,zero,unit);\n+        set_1d_array(b, LEN_1D, one,unit);\n+        set_1d_array(c, LEN_1D, any,frac);\n+        set_1d_array(d, LEN_1D, any,frac);\n+        set_1d_array(e, LEN_1D, any,frac);\n+    } else if (!strcmp(name, \"s212\")) {\n+        set_1d_array(a, LEN_1D, any,frac);\n+        set_1d_array(b, LEN_1D, one,unit);\n+        set_1d_array(c, LEN_1D, one,unit);\n+        set_1d_array(d, LEN_1D, any,frac);\n+    } else if (!strcmp(name, \"s221\")) {\n+        set_1d_array(a, LEN_1D, one,unit);\n+        set_1d_array(b, LEN_1D, any,frac);\n+        set_1d_array(c, LEN_1D, any,frac);\n+        set_1d_array(d, LEN_1D, any,frac);\n+    } else if (!strcmp(name, \"s222\")) {\n+        set_1d_array(a, LEN_1D,zero,unit);\n+        set_1d_array(b, LEN_1D, one,unit);\n+        set_1d_array(c, LEN_1D, one,unit);\n+    } else if (!strcmp(name, \"s231\")) {\n+        set_2d_array(aa, one,unit);\n+        set_2d_array(bb, any,frac2);\n+    } else if (!strcmp(name, \"s232\")) {\n+        set_2d_array(aa, one,unit);\n+        set_2d_array(bb,zero,unit);\n+    } else if (!strcmp(name, \"s233\")) {\n+        set_2d_array(aa, any,frac);\n+        set_2d_array(bb, any,frac);\n+        set_2d_array(cc, any,frac);\n+    } else if (!strcmp(name, \"s234\")) {\n+        set_2d_array(aa, one,unit);\n+        set_2d_array(bb, any,frac);\n+        set_2d_array(cc, any,frac);\n+    } else if (!strcmp(name, \"s235\")) {\n+        set_1d_array(a, LEN_1D, one,unit);\n+        set_1d_array(b, LEN_1D, any,frac);\n+        set_1d_array(c, LEN_1D, any,frac);\n+        set_2d_array(aa, one,unit);\n+        set_2d_array(bb, any, frac2);\n+    } else if (!strcmp(name, \"s241\")) {\n+        set_1d_array(a, LEN_1D, one,unit);\n+        set_1d_array(b, LEN_1D, one,unit);\n+        set_1d_array(c, LEN_1D, one,unit);\n+        set_1d_array(d, LEN_1D, one,unit);\n+    } else if (!strcmp(name, \"s242\")) {\n+        set_1d_array(a, LEN_1D,small,unit);\n+        set_1d_array(b, LEN_1D,small,unit);\n+        set_1d_array(c, LEN_1D,small,unit);\n+        set_1d_array(d, LEN_1D,small,unit);\n+    } else if (!strcmp(name, \"s243\")) {\n+        set_1d_array(a, LEN_1D,zero,unit);\n+        set_1d_array(b, LEN_1D, one,unit);\n+        set_1d_array(c, LEN_1D, any,frac);\n+        set_1d_array(d, LEN_1D, any,frac);\n+        set_1d_array(e, LEN_1D, any,frac);\n+    } else if (!strcmp(name, \"s244\")) {\n+        set_1d_array(a, LEN_1D,zero,unit);\n+        set_1d_array(b, LEN_1D, one,unit);\n+        set_1d_array(c, LEN_1D,small,unit);\n+        set_1d_array(d, LEN_1D,small,unit);\n+    } else if (!strcmp(name, \"s251\")) {\n+        set_1d_array(a, LEN_1D,zero,unit);\n+        set_1d_array(b, LEN_1D, one,unit);\n+        set_1d_array(c, LEN_1D, any,frac);\n+        set_1d_array(d, LEN_1D, any,frac);\n+        set_1d_array(e, LEN_1D, any,frac);\n+    } else if (!strcmp(name, \"s252\")) {\n+        set_1d_array(a, LEN_1D,zero,unit);\n+        set_1d_array(b, LEN_1D, one,unit);\n+        set_1d_array(c, LEN_1D, one,unit);\n+    } else if (!strcmp(name, \"s253\")) {\n+        set_1d_array(a, LEN_1D, one,unit);\n+        set_1d_array(b, LEN_1D,small,unit);\n+        set_1d_array(c, LEN_1D, one,unit);\n+        set_1d_array(d, LEN_1D, any,frac);\n+    } else if (!strcmp(name, \"s254\")) {\n+        set_1d_array(a, LEN_1D,zero,unit);\n+        set_1d_array(b, LEN_1D, one,unit);\n+    } else if (!strcmp(name, \"s255\")) {\n+        set_1d_array(a, LEN_1D,zero,unit);\n+        set_1d_array(b, LEN_1D, one,unit);\n+    } else if (!strcmp(name, \"s256\")) {\n+        set_1d_array(a, LEN_1D, one,unit);\n+        set_1d_array(d, LEN_1D, two,frac);\n+        set_2d_array(aa, two,unit);\n+        set_2d_array(bb, one,unit);\n+    } else if (!strcmp(name, \"s257\")) {\n+        set_1d_array(a, LEN_1D, one,unit);\n+        set_2d_array(aa, two,unit);\n+        set_2d_array(bb, one,unit);\n+    } else if (!strcmp(name, \"s258\")) {\n+        set_1d_array(a, LEN_1D, any,frac);\n+        set_1d_array(b, LEN_1D,zero,unit);\n+        set_1d_array(c, LEN_1D, any,frac);\n+        set_1d_array(d, LEN_1D, any,frac);\n+        set_1d_array(e, LEN_1D,zero,unit);\n+        set_2d_array(aa, any,frac);\n+    } else if (!strcmp(name, \"s261\")) {\n+        set_1d_array(a, LEN_1D, one,unit);\n+        set_1d_array(b, LEN_1D, any,frac2);\n+        set_1d_array(c, LEN_1D, any,frac2);\n+        set_1d_array(d, LEN_1D, one,unit);\n+    } else if (!strcmp(name, \"s271\")) {\n+        set_1d_array(a, LEN_1D, one,unit);\n+        set_1d_array(b, LEN_1D, any,frac);\n+        set_1d_array(c, LEN_1D, any,frac);\n+    } else if (!strcmp(name, \"s272\")) {\n+        set_1d_array(a, LEN_1D, one,unit);\n+        set_1d_array(b, LEN_1D, one,unit);\n+        set_1d_array(c, LEN_1D, any,frac);\n+        set_1d_array(d, LEN_1D, any,frac);\n+        set_1d_array(e, LEN_1D, two,unit);\n+    } else if (!strcmp(name, \"s273\")) {\n+        set_1d_array(a, LEN_1D, one,unit);\n+        set_1d_array(b, LEN_1D, one,unit);\n+        set_1d_array(c, LEN_1D, one,unit);\n+        set_1d_array(d, LEN_1D,small,unit);\n+        set_1d_array(e, LEN_1D, any,frac);\n+    } else if (!strcmp(name, \"s274\")) {\n+        set_1d_array(a, LEN_1D,zero,unit);\n+        set_1d_array(b, LEN_1D, one,unit);\n+        set_1d_array(c, LEN_1D, one,unit);\n+        set_1d_array(d, LEN_1D, any,frac);\n+        set_1d_array(e, LEN_1D, any,frac);\n+    } else if (!strcmp(name, \"s275\")) {\n+        set_2d_array(aa, one,unit);\n+        set_2d_array(bb,small,unit);\n+        set_2d_array(cc,small,unit);\n+    } else if (!strcmp(name, \"s276\")) {\n+        set_1d_array(a, LEN_1D, one,unit);\n+        set_1d_array(b, LEN_1D, any,frac);\n+        set_1d_array(c, LEN_1D, any,frac);\n+        set_1d_array(d, LEN_1D, any,frac);\n+    } else if (!strcmp(name, \"s277\")) {\n+        set_1d_array(a, LEN_1D, one,unit);\n+        set_1d_array( b, LEN_1D/2, one,unit);\n+        set_1d_array( &b[LEN_1D/2], LEN_1D/2,-one,unit);\n+        set_1d_array(c, LEN_1D, any,frac);\n+        set_1d_array(d, LEN_1D, any,frac);\n+        set_1d_array(e, LEN_1D, any,frac);\n+    } else if (!strcmp(name, \"s278\")) {\n+        set_1d_array( a, LEN_1D/2,-one,unit);\n+        set_1d_array( &a[LEN_1D/2], LEN_1D/2,one,unit);\n+        set_1d_array(b, LEN_1D, one,unit);\n+        set_1d_array(c, LEN_1D, any,frac);\n+        set_1d_array(d, LEN_1D, any,frac);\n+        set_1d_array(e, LEN_1D, any,frac);\n+    } else if (!strcmp(name, \"s279\")) {\n+        set_1d_array( a, LEN_1D/2,-one,unit);\n+        set_1d_array( &a[LEN_1D/2], LEN_1D/2,one,unit);\n+//        set_1d_array(a, LEN_1D, -one,unit);\n+        set_1d_array(b, LEN_1D, one,unit);\n+        set_1d_array(c, LEN_1D, any,frac);\n+        set_1d_array(d, LEN_1D, any,frac);\n+        set_1d_array(e, LEN_1D, any,frac);\n+    } else if (!strcmp(name, \"s2710\")) {\n+        set_1d_array(a, LEN_1D, one,unit);\n+        set_1d_array(b, LEN_1D, one,unit);\n+        set_1d_array(c, LEN_1D, any,frac);\n+        set_1d_array(d, LEN_1D, any,frac);\n+        set_1d_array(e, LEN_1D, any,frac);\n+    } else if (!strcmp(name, \"s2711\")) {\n+        set_1d_array(a, LEN_1D, one,unit);\n+        set_1d_array(b, LEN_1D, any,frac);\n+        set_1d_array(c, LEN_1D, any,frac);\n+    } else if (!strcmp(name, \"s2712\")) {\n+        set_1d_array(a, LEN_1D, one,unit);\n+        set_1d_array(b, LEN_1D, any,frac);\n+        set_1d_array(c, LEN_1D, any,frac);\n+    } else if (!strcmp(name, \"s281\")) {\n+        set_1d_array(a, LEN_1D,zero,unit);\n+        set_1d_array(b, LEN_1D, one,unit);\n+        set_1d_array(c, LEN_1D, one,unit);\n+    } else if (!strcmp(name, \"1s281\")) {\n+        set_1d_array(a, LEN_1D,zero,unit);\n+        set_1d_array(b, LEN_1D, one,unit);\n+        set_1d_array(c, LEN_1D, one,unit);\n+        set_1d_array(d, LEN_1D, one,unit);\n+        set_1d_array(e, LEN_1D, one,unit);\n+        set_1d_array(x, LEN_1D, one,unit);\n+    } else if (!strcmp(name, \"s291\")) {\n+        set_1d_array(a, LEN_1D,zero,unit);\n+        set_1d_array(b, LEN_1D, one,unit);\n+    } else if (!strcmp(name, \"s292\")) {\n+        set_1d_array(a, LEN_1D,zero,unit);\n+        set_1d_array(b, LEN_1D, one,unit);\n+    } else if (!strcmp(name, \"s293\")) {\n+        set_1d_array(a, LEN_1D, any,frac);\n+    } else if (!strcmp(name, \"s2101\")) {\n+        set_2d_array(aa, one,unit);\n+        set_2d_array(bb, any,frac);\n+        set_2d_array(cc, any,frac);\n+    } else if (!strcmp(name, \"s2102\")) {\n+        set_2d_array(aa,zero,unit);\n+    } else if (!strcmp(name, \"s2111\")) {\n+        set_2d_array(aa, small,unit);\n+    } else if (!strcmp(name, \"s311\")) {\n+        set_1d_array(a, LEN_1D, any,frac);\n+    } else if (!strcmp(name, \"s312\")) {\n+        set_1d_array(a, LEN_1D,1.000001,unit);\n+    } else if (!strcmp(name, \"s313\")) {\n+        set_1d_array(a, LEN_1D, any,frac);\n+        set_1d_array(b, LEN_1D, any,frac);\n+    } else if (!strcmp(name, \"s314\")) {\n+        set_1d_array(a, LEN_1D, any,frac);\n+    } else if (!strcmp(name, \"s315\")) {\n+        set_1d_array(a, LEN_1D, any,frac);\n+    } else if (!strcmp(name, \"s316\")) {\n+        set_1d_array(a, LEN_1D, any,frac);\n+    } else if (!strcmp(name, \"s317\")) {\n+    } else if (!strcmp(name, \"s318\")) {\n+        set_1d_array(a, LEN_1D, any,frac);\n+        a[LEN_1D-1] = -two;\n+    } else if (!strcmp(name, \"s319\")) {\n+        set_1d_array(a, LEN_1D,zero,unit);\n+        set_1d_array(b, LEN_1D,zero,unit);\n+        set_1d_array(c, LEN_1D, any,frac);\n+        set_1d_array(d, LEN_1D, any,frac);\n+        set_1d_array(e, LEN_1D, any,frac);\n+    } else if (!strcmp(name, \"s3110\")) {\n+        set_2d_array(aa, any,frac);\n+        aa[LEN_2D-1][LEN_2D-1] = two;\n+    } else if (!strcmp(name, \"s3111\")) {\n+        set_1d_array(a, LEN_1D, any,frac);\n+    } else if (!strcmp(name, \"s3112\")) {\n+        set_1d_array(a, LEN_1D, any,frac2);\n+        set_1d_array(b, LEN_1D,zero,unit);\n+    } else if (!strcmp(name, \"s3113\")) {\n+        set_1d_array(a, LEN_1D, any,frac);\n+        a[LEN_1D-1] = -two;\n+    } else if (!strcmp(name, \"s321\")) {\n+        set_1d_array(a, LEN_1D, one,unit);\n+        set_1d_array(b, LEN_1D,zero,unit);\n+    } else if (!strcmp(name, \"s322\")) {\n+        set_1d_array(a, LEN_1D, one,unit);\n+        set_1d_array(b, LEN_1D,zero,unit);\n+        set_1d_array(c, LEN_1D,zero,unit);\n+    } else if (!strcmp(name, \"s323\")) {\n+        set_1d_array(a, LEN_1D, one,unit);\n+        set_1d_array(b, LEN_1D, one,unit);\n+        set_1d_array(c, LEN_1D, any,frac);\n+        set_1d_array(d, LEN_1D, any,frac);\n+        set_1d_array(e, LEN_1D, any,frac);\n+    } else if (!strcmp(name, \"s331\")) {\n+        set_1d_array(a, LEN_1D, any,frac);\n+        a[LEN_1D-1] = -one;\n+    } else if (!strcmp(name, \"s332\")) {\n+        set_1d_array(a, LEN_1D, any,frac2);\n+        a[LEN_1D-1] = two;\n+    } else if (!strcmp(name, \"s341\")) {\n+        set_1d_array(a, LEN_1D,zero,unit);\n+        set_1d_array(b, LEN_1D, any,frac);\n+    } else if (!strcmp(name, \"s342\")) {\n+        set_1d_array(a, LEN_1D, any,frac);\n+        set_1d_array(b, LEN_1D, any,frac);\n+    } else if (!strcmp(name, \"s343\")) {\n+        set_2d_array(aa, any,frac);\n+        set_2d_array(bb, one,unit);\n+    } else if (!strcmp(name, \"s351\")) {\n+        set_1d_array(a, LEN_1D, one,unit);\n+        set_1d_array(b, LEN_1D, one,unit);\n+        c[0] = 1.;\n+    } else if (!strcmp(name, \"s352\")) {\n+        set_1d_array(a, LEN_1D, any,frac);\n+        set_1d_array(b, LEN_1D, any,frac);\n+    } else if (!strcmp(name, \"s353\")) {\n+        set_1d_array(a, LEN_1D, one,unit);\n+        set_1d_array(b, LEN_1D, one,unit);\n+        c[0] = 1.;\n+    } else if (!strcmp(name, \"s411\")) {\n+        set_1d_array(a, LEN_1D, one,unit);\n+        set_1d_array(b, LEN_1D, any,frac);\n+        set_1d_array(c, LEN_1D, any,frac);\n+    } else if (!strcmp(name, \"s412\")) {\n+        set_1d_array(a, LEN_1D, one,unit);\n+        set_1d_array(b, LEN_1D, any,frac);\n+        set_1d_array(c, LEN_1D, any,frac);\n+    } else if (!strcmp(name, \"s413\")) {\n+        set_1d_array(a, LEN_1D,zero,unit);\n+        set_1d_array(b, LEN_1D, one,unit);\n+        set_1d_array(c, LEN_1D, one,unit);\n+        set_1d_array(d, LEN_1D, any,frac);\n+        set_1d_array(e, LEN_1D, any,frac);\n+    } else if (!strcmp(name, \"s414\")) {\n+        set_2d_array(aa, one,unit);\n+        set_2d_array(bb, any,frac);\n+        set_2d_array(cc, any,frac);\n+    } else if (!strcmp(name, \"s415\")) {\n+        set_1d_array(a, LEN_1D, one,unit);\n+        set_1d_array(b, LEN_1D, any,frac);\n+        set_1d_array(c, LEN_1D, any,frac);\n+        a[LEN_1D-1] = -one;\n+    } else if (!strcmp(name, \"s421\")) {\n+        set_1d_array(a, LEN_1D, any,frac2);\n+        set_1d_array(flat_2d_array, LEN_1D, one, unit);\n+    } else if (!strcmp(name, \"s422\")) {\n+        set_1d_array(flat_2d_array, LEN_1D,one,unit);\n+        set_1d_array(a, LEN_1D, any,frac2);\n+        set_1d_array(flat_2d_array + LEN_1D, LEN_1D, zero, unit);\n+    } else if (!strcmp(name, \"s1421\")) {\n+        set_1d_array(b, LEN_1D, one, unit);\n+    } else if (!strcmp(name, \"s423\")) {\n+        set_1d_array(flat_2d_array, LEN_1D,zero,unit);\n+        set_1d_array(a, LEN_1D, any,frac2);\n+        set_1d_array(flat_2d_array + LEN_1D, LEN_1D, one, unit);\n+    } else if (!strcmp(name, \"s424\")) {\n+        set_1d_array(flat_2d_array, LEN_1D,one,unit);\n+        set_1d_array(a, LEN_1D, any,frac2);\n+        set_1d_array(flat_2d_array, LEN_1D, zero, unit);\n+    } else if (!strcmp(name, \"s431\")) {\n+        set_1d_array(a, LEN_1D, one,unit);\n+        set_1d_array(b, LEN_1D, any,frac2);\n+    } else if (!strcmp(name, \"s432\")) {\n+        set_1d_array(a, LEN_1D, one,unit);\n+        set_1d_array(b, LEN_1D, any,frac2);\n+    } else if (!strcmp(name, \"s441\")) {\n+        set_1d_array(a, LEN_1D, one,unit);\n+        set_1d_array(b, LEN_1D, any,frac);\n+        set_1d_array(c, LEN_1D, any,frac);\n+        set_1d_array(&d[0],             LEN_1D/3  , -one,unit);\n+        set_1d_array(&d[LEN_1D/3],      LEN_1D/3  , zero,unit);\n+        set_1d_array(&d[(2*LEN_1D/3)],  LEN_1D/3+1, one,unit);\n+    } else if (!strcmp(name, \"s442\")) {\n+        set_1d_array(a, LEN_1D, one,unit);\n+        set_1d_array(b, LEN_1D, any,frac);\n+        set_1d_array(c, LEN_1D, any,frac);\n+        set_1d_array(d, LEN_1D, any,frac);\n+        set_1d_array(e, LEN_1D, any,frac);\n+    } else if (!strcmp(name, \"s443\")) {\n+        set_1d_array(a, LEN_1D, one,unit);\n+        set_1d_array(b, LEN_1D, any,frac);\n+        set_1d_array(c, LEN_1D, any,frac);\n+    } else if (!strcmp(name, \"s451\")) {\n+        set_1d_array(b, LEN_1D, any,frac);\n+        set_1d_array(c, LEN_1D, any,frac);\n+    } else if (!strcmp(name, \"s452\")) {\n+        set_1d_array(a, LEN_1D,zero,unit);\n+        set_1d_array(b, LEN_1D, one,unit);\n+        set_1d_array(c, LEN_1D,small,unit);\n+    } else if (!strcmp(name, \"s453\")) {\n+        set_1d_array(a, LEN_1D,zero,unit);\n+        set_1d_array(b, LEN_1D, any,frac2);\n+    } else if (!strcmp(name, \"s471\")) {\n+        set_1d_array(a, LEN_1D, one,unit);\n+        set_1d_array(b, LEN_1D, one,unit);\n+        set_1d_array(c, LEN_1D, one,unit);\n+        set_1d_array(d, LEN_1D, any,frac);\n+        set_1d_array(e, LEN_1D, any,frac);\n+        set_1d_array(x, LEN_1D, zero, unit);\n+    } else if (!strcmp(name, \"s481\")) {\n+        set_1d_array(a, LEN_1D, one,unit);\n+        set_1d_array(b, LEN_1D, any,frac);\n+        set_1d_array(c, LEN_1D, any,frac);\n+        set_1d_array(d, LEN_1D, any,frac);\n+    } else if (!strcmp(name, \"s482\")) {\n+        set_1d_array(a, LEN_1D, one,unit);\n+        set_1d_array(b, LEN_1D, any,frac);\n+        set_1d_array(c, LEN_1D, any,frac);\n+    } else if (!strcmp(name, \"s491\")) {\n+        set_1d_array(a, LEN_1D,zero,unit);\n+        set_1d_array(b, LEN_1D, one,unit);\n+        set_1d_array(c, LEN_1D, any,frac);\n+        set_1d_array(d, LEN_1D, any,frac);\n+    } else if (!strcmp(name, \"s4112\")) {\n+        set_1d_array(a, LEN_1D, one,unit);\n+        set_1d_array(b, LEN_1D, any,frac);\n+    } else if (!strcmp(name, \"s4113\")) {\n+        set_1d_array(a, LEN_1D,zero,unit);\n+        set_1d_array(b, LEN_1D, one,unit);\n+        set_1d_array(c, LEN_1D, any,frac2);\n+    } else if (!strcmp(name, \"s4114\")) {\n+        set_1d_array(a, LEN_1D,zero,unit);\n+        set_1d_array(b, LEN_1D, one,unit);\n+        set_1d_array(c, LEN_1D, any,frac);\n+        set_1d_array(d, LEN_1D, any,frac);\n+    } else if (!strcmp(name, \"s4115\")) {\n+        set_1d_array(a, LEN_1D, any,frac);\n+        set_1d_array(b, LEN_1D, any,frac);\n+    } else if (!strcmp(name, \"s4116\")) {\n+        set_1d_array(a, LEN_1D, any,frac);\n+        set_2d_array(aa, any,frac);\n+    } else if (!strcmp(name, \"s4117\")) {\n+        set_1d_array(a, LEN_1D,zero,unit);\n+        set_1d_array(b, LEN_1D, one,unit);\n+        set_1d_array(c, LEN_1D, any,frac);\n+        set_1d_array(d, LEN_1D, any,frac);\n+    } else if (!strcmp(name, \"s4121\")) {\n+        set_1d_array(a, LEN_1D, one,unit);\n+        set_1d_array(b, LEN_1D, any,frac);\n+        set_1d_array(c, LEN_1D, any,frac);\n+    } else if (!strcmp(name, \"va\")) {\n+        set_1d_array(a, LEN_1D,zero,unit);\n+        set_1d_array(b, LEN_1D, any,frac2);\n+    } else if (!strcmp(name, \"vag\")) {\n+        set_1d_array(a, LEN_1D,zero,unit);\n+        set_1d_array(b, LEN_1D, any,frac2);\n+    } else if (!strcmp(name, \"vas\")) {\n+        set_1d_array(a, LEN_1D,zero,unit);\n+        set_1d_array(b, LEN_1D, any,frac2);\n+    } else if (!strcmp(name, \"vif\")) {\n+        set_1d_array(a, LEN_1D,zero,unit);\n+        set_1d_array(b, LEN_1D, any,frac2);\n+    } else if (!strcmp(name, \"vpv\")) {\n+        set_1d_array(a, LEN_1D,zero,unit);\n+        set_1d_array(b, LEN_1D, any,frac2);\n+    } else if (!strcmp(name, \"vtv\")) {\n+        set_1d_array(a, LEN_1D, one,unit);\n+        set_1d_array(b, LEN_1D, one,unit);\n+    } else if (!strcmp(name, \"vpvtv\")) {\n+        set_1d_array(a, LEN_1D, one,unit);\n+        set_1d_array(b, LEN_1D, any,frac);\n+        set_1d_array(c, LEN_1D, any,frac);\n+    } else if (!strcmp(name, \"vpvts\")) {\n+        set_1d_array(a, LEN_1D, one,unit);\n+        set_1d_array(b, LEN_1D, any,frac2);\n+    } else if (!strcmp(name, \"vpvpv\")) {\n+        set_1d_array(a, LEN_1D, any,frac2);\n+        set_1d_array(b, LEN_1D, one,unit);\n+        set_1d_array(c, LEN_1D,-one,unit);\n+    } else if (!strcmp(name, \"vtvtv\")) {\n+        set_1d_array(a, LEN_1D, one,unit);\n+        set_1d_array(b, LEN_1D, two,unit);\n+        set_1d_array(c, LEN_1D,half,unit);\n+    } else if (!strcmp(name, \"vsumr\")) {\n+        set_1d_array(a, LEN_1D, any,frac);\n+    } else if (!strcmp(name, \"vdotr\")) {\n+        set_1d_array(a, LEN_1D, any,frac);\n+        set_1d_array(b, LEN_1D, any,frac);\n+    } else if (!strcmp(name, \"vbor\")) {\n+        set_1d_array(a, LEN_1D, any,frac);\n+        set_1d_array(b, LEN_1D, any,frac);\n+        set_1d_array(c, LEN_1D, one,frac);\n+        set_1d_array(d, LEN_1D, two,frac);\n+        set_1d_array(e, LEN_1D,half,frac);\n+        set_2d_array(aa, any,frac);\n+    } else {\n+        set_1d_array(a, LEN_1D, any,frac);\n+        set_1d_array(b, LEN_1D, any,frac);\n+        set_1d_array(c, LEN_1D, one,frac);\n+        set_1d_array(d, LEN_1D, two,frac);\n+        set_1d_array(e, LEN_1D,half,frac);\n+        set_2d_array(aa, half,frac);\n+        set_2d_array(bb, one,frac);\n+        set_2d_array(cc, any,frac);\n+    }\n+\n+    return 0;\n+}\n+\n+real_t calc_checksum(const char * name)\n+{\n+    if (!strcmp(name, \"s000\")) {\n+        return sum_a();\n+    } else if (!strcmp(name, \"s111\")) {\n+        return sum_a();\n+    } else if (!strcmp(name, \"s1111\")) {\n+        return sum_a();\n+    } else if (!strcmp(name, \"s112\")) {\n+        return sum_a();\n+    } else if (!strcmp(name, \"s1112\")) {\n+        return sum_a();\n+    } else if (!strcmp(name, \"s113\")) {\n+        return sum_a();\n+    } else if (!strcmp(name, \"s1113\")) {\n+        return sum_a();\n+    } else if (!strcmp(name, \"s114\")) {\n+        return sum_aa();\n+    } else if (!strcmp(name, \"s115\")) {\n+        return sum_a();\n+    } else if (!strcmp(name, \"s1115\")) {\n+        return sum_aa();\n+    } else if (!strcmp(name, \"s116\")) {\n+        return sum_a();\n+    } else if (!strcmp(name, \"s118\")) {\n+        return sum_a();\n+    } else if (!strcmp(name, \"s119\")) {\n+        return sum_aa();\n+    } else if (!strcmp(name, \"s1119\")) {\n+        return sum_aa();\n+    } else if (!strcmp(name, \"s121\")) {\n+        return sum_a();\n+    } else if (!strcmp(name, \"s122\")) {\n+        return sum_a();\n+    } else if (!strcmp(name, \"s123\")) {\n+        return sum_a();\n+    } else if (!strcmp(name, \"s124\")) {\n+        return sum_a();\n+    } else if (!strcmp(name, \"s125\")) {\n+        return sum_flat_2d_array();\n+    } else if (!strcmp(name, \"s126\")) {\n+        return sum_bb();\n+    } else if (!strcmp(name, \"s127\")) {\n+        return sum_a();\n+    } else if (!strcmp(name, \"s128\")) {\n+        return sum_a() + sum_b();\n+    } else if (!strcmp(name, \"s131\")) {\n+        return sum_a();\n+    } else if (!strcmp(name, \"s132\")) {\n+        return sum_aa();\n+    } else if (!strcmp(name, \"s141\")) {\n+        return sum_flat_2d_array();\n+    } else if (!strcmp(name, \"s151\")) {\n+        return sum_a();\n+    } else if (!strcmp(name, \"s152\")) {\n+        return sum_a();\n+    } else if (!strcmp(name, \"s161\")) {\n+        return sum_a() + sum_c();\n+    } else if (!strcmp(name, \"s1161\")) {\n+        return sum_a() + sum_c();\n+    } else if (!strcmp(name, \"s162\")) {\n+        return sum_a();\n+    } else if (!strcmp(name, \"s171\")) {\n+        return sum_a();\n+    } else if (!strcmp(name, \"s172\")) {\n+        return sum_a();\n+    } else if (!strcmp(name, \"s173\")) {\n+        return sum_a();\n+    } else if (!strcmp(name, \"s174\")) {\n+        return sum_a();\n+    } else if (!strcmp(name, \"s175\")) {\n+        return sum_a();\n+    } else if (!strcmp(name, \"s176\")) {\n+        return sum_a();\n+    } else if (!strcmp(name, \"s211\")) {\n+        return sum_a() + sum_b();\n+    } else if (!strcmp(name, \"s212\")) {\n+        return sum_a() + sum_b();\n+    } else if (!strcmp(name, \"s1213\")) {\n+        return sum_a() + sum_b();\n+    } else if (!strcmp(name, \"s221\")) {\n+        return sum_a() + sum_b();\n+    } else if (!strcmp(name, \"s1221\")) {\n+        return sum_a() + sum_b();\n+    } else if (!strcmp(name, \"s222\")) {\n+        return sum_a() + sum_b();\n+    } else if (!strcmp(name, \"s231\")) {\n+        return sum_aa();\n+    } else if (!strcmp(name, \"s232\")) {\n+        return sum_aa();\n+    } else if (!strcmp(name, \"s1232\")) {\n+        return sum_aa();\n+    } else if (!strcmp(name, \"s233\")) {\n+        return sum_aa_bb();\n+    } else if (!strcmp(name, \"s2233\")) {\n+        return sum_aa_bb();\n+    } else if (!strcmp(name, \"s235\")) {\n+        return sum_a() + sum_b();\n+    } else if (!strcmp(name, \"s241\")) {\n+        return sum_a() + sum_b();\n+    } else if (!strcmp(name, \"s242\")) {\n+        return sum_a();\n+    } else if (!strcmp(name, \"s243\")) {\n+        return sum_a() + sum_b();\n+    } else if (!strcmp(name, \"s244\")) {\n+        return sum_a() + sum_b();\n+    } else if (!strcmp(name, \"s1244\")) {\n+        return sum_a() + sum_b();\n+    } else if (!strcmp(name, \"s2244\")) {\n+        return sum_a() + sum_b();\n+    } else if (!strcmp(name, \"s251\")) {\n+        return sum_a();\n+    } else if (!strcmp(name, \"s1251\")) {\n+        return sum_a();\n+    } else if (!strcmp(name, \"s2251\")) {\n+        return sum_a();\n+    } else if (!strcmp(name, \"s3251\")) {\n+        return sum_a();\n+    } else if (!strcmp(name, \"s252\")) {\n+        return sum_a();\n+    } else if (!strcmp(name, \"s253\")) {\n+        return sum_a() + sum_c();\n+    } else if (!strcmp(name, \"s254\")) {\n+        return sum_a();\n+    } else if (!strcmp(name, \"s255\")) {\n+        return sum_a();\n+    } else if (!strcmp(name, \"s256\")) {\n+        return sum_a_aa();\n+    } else if (!strcmp(name, \"s257\")) {\n+        return sum_a_aa();\n+    } else if (!strcmp(name, \"s258\")) {\n+        return sum_b() + sum_e();\n+    } else if (!strcmp(name, \"s261\")) {\n+        return sum_a() + sum_c();\n+    } else if (!strcmp(name, \"s271\")) {\n+        return sum_a();\n+    } else if (!strcmp(name, \"s272\")) {\n+        return sum_a() + sum_b();\n+    } else if (!strcmp(name, \"s273\")) {\n+        return sum_a() + sum_b() + sum_c();\n+    } else if (!strcmp(name, \"s274\")) {\n+        return sum_a() + sum_b();\n+    } else if (!strcmp(name, \"s275\")) {\n+        return sum_aa();\n+    } else if (!strcmp(name, \"s2275\")) {\n+        return sum_aa();\n+    } else if (!strcmp(name, \"s276\")) {\n+        return sum_a();\n+    } else if (!strcmp(name, \"s277\")) {\n+        return sum_a() + sum_b();\n+    } else if (!strcmp(name, \"s278\")) {\n+        return sum_a() + sum_b() + sum_c();\n+    } else if (!strcmp(name, \"s279\")) {\n+        return sum_a() + sum_b() + sum_c();\n+    } else if (!strcmp(name, \"s1279\")) {\n+        return sum_a() + sum_b() + sum_c();\n+    } else if (!strcmp(name, \"s2710\")) {\n+        return sum_a() + sum_b() + sum_c();\n+    } else if (!strcmp(name, \"s2711\")) {\n+        return sum_a();\n+    } else if (!strcmp(name, \"s2712\")) {\n+        return sum_a();\n+    } else if (!strcmp(name, \"s281\")) {\n+        return sum_a() + sum_b();\n+    } else if (!strcmp(name, \"s1281\")) {\n+        return sum_a() + sum_b();\n+    } else if (!strcmp(name, \"s291\")) {\n+        return sum_a();\n+    } else if (!strcmp(name, \"s292\")) {\n+        return sum_a();\n+    } else if (!strcmp(name, \"s293\")) {\n+        return sum_a();\n+    } else if (!strcmp(name, \"s2101\")) {\n+        return sum_aa();\n+    } else if (!strcmp(name, \"s2102\")) {\n+        return sum_aa();\n+    } else if (!strcmp(name, \"s2111\")) {\n+        return sum_aa();\n+    } else if (!strcmp(name, \"s311\")) {\n+        return sum_a();\n+    } else if (!strcmp(name, \"s31111\")) {\n+        return sum_a();\n+    } else if (!strcmp(name, \"s321\")) {\n+        return sum_a();\n+    } else if (!strcmp(name, \"s322\")) {\n+        return sum_a();\n+    } else if (!strcmp(name, \"s323\")) {\n+        return sum_a() + sum_b();\n+    } else if (!strcmp(name, \"s341\")) {\n+        return sum_a();\n+    } else if (!strcmp(name, \"s342\")) {\n+        return sum_a();\n+    } else if (!strcmp(name, \"s343\")) {\n+        return sum_flat_2d_array();\n+    } else if (!strcmp(name, \"s351\")) {\n+        return sum_a();\n+    } else if (!strcmp(name, \"s1351\")) {\n+        return sum_a();\n+    } else if (!strcmp(name, \"s353\")) {\n+        return sum_a();\n+    } else if (!strcmp(name, \"s421\")) {\n+        return sum_xx();\n+    } else if (!strcmp(name, \"s1421\")) {\n+        return sum_half_xx();\n+    } else if (!strcmp(name, \"s422\")) {\n+        return sum_xx();\n+    } else if (!strcmp(name, \"s423\")) {\n+        return sum_flat_2d_array();\n+    } else if (!strcmp(name, \"s424\")) {\n+        return sum_xx();\n+    } else if (!strcmp(name, \"s431\")) {\n+        return sum_a();\n+    } else if (!strcmp(name, \"s441\")) {\n+        return sum_a();\n+    } else if (!strcmp(name, \"s442\")) {\n+        return sum_a();\n+    } else if (!strcmp(name, \"s443\")) {\n+        return sum_a();\n+    } else if (!strcmp(name, \"s451\")) {\n+        return sum_a();\n+    } else if (!strcmp(name, \"s452\")) {\n+        return sum_a();\n+    } else if (!strcmp(name, \"s453\")) {\n+        return sum_a();\n+    } else if (!strcmp(name, \"s471\")) {\n+        return sum_x() + sum_b();\n+    } else if (!strcmp(name, \"s481\")) {\n+        return sum_a();\n+    } else if (!strcmp(name, \"s482\")) {\n+        return sum_a();\n+    } else if (!strcmp(name, \"s491\")) {\n+        return sum_a();\n+    } else if (!strcmp(name, \"s4112\")) {\n+        return sum_a();\n+    } else if (!strcmp(name, \"s4113\")) {\n+        return sum_a();\n+    } else if (!strcmp(name, \"s4114\")) {\n+        return sum_a();\n+    } else if (!strcmp(name, \"s4117\")) {\n+        return sum_a();\n+    } else if (!strcmp(name, \"s4121\")) {\n+        return sum_a();\n+    } else if (!strcmp(name, \"va\")) {\n+        return sum_a();\n+    } else if (!strcmp(name, \"vag\")) {\n+        return sum_a();\n+    } else if (!strcmp(name, \"vas\")) {\n+        return sum_a();\n+    } else if (!strcmp(name, \"vif\")) {\n+        return sum_a();\n+    } else if (!strcmp(name, \"vpv\")) {\n+        return sum_a();\n+    } else if (!strcmp(name, \"vtv\")) {\n+        return sum_a();\n+    } else if (!strcmp(name, \"vpvtv\")) {\n+        return sum_a();\n+    } else if (!strcmp(name, \"vpvts\")) {\n+        return sum_a();\n+    } else if (!strcmp(name, \"vpvpv\")) {\n+        return sum_a();\n+    } else if (!strcmp(name, \"vtvtv\")) {\n+        return sum_a();\n+    } else if (!strcmp(name, \"vsumr\")) {\n+        return sum_a();\n+    } else if (!strcmp(name, \"vbor\")) {\n+        return sum_x();\n+    } else {\n+        fprintf(stderr, \"Unknown function name passed to calc_checksum: %s\\n\", name);\n+        exit(1);\n+    }\n+}\n+\n+real_t get_expected_result(const char * name) \n+{\n+    if (!strcmp(name, \"s000\")) {\n+\treturn 512075584.f;\n+    } else if (!strcmp(name, \"s111\")) {\n+\treturn 32000.410156f;\n+    } else if (!strcmp(name, \"s1111\")) {\n+\treturn 13.352669f;\n+    } else if (!strcmp(name, \"s112\")) {\n+\treturn 81335.929688f;\n+    } else if (!strcmp(name, \"s1112\")) {\n+\treturn 32009.560547f;\n+    } else if (!strcmp(name, \"s113\")) {\n+\treturn 32000.642578f;\n+    } else if (!strcmp(name, \"s1113\")) {\n+\treturn 40010.613281f;\n+    } else if (!strcmp(name, \"s114\")) {\n+\treturn 919.856323f;\n+    } else if (!strcmp(name, \"s115\")) {\n+\treturn 31727.289062f;\n+    } else if (!strcmp(name, \"s1115\")) {\n+\treturn 25487.052734f;\n+    } else if (!strcmp(name, \"s116\")) {\n+\treturn 32000.f;\n+    } else if (!strcmp(name, \"s118\")) {\n+\treturn 32353.884766f;\n+    } else if (!strcmp(name, \"s119\")) {\n+\treturn 86338.984375f;\n+    } else if (!strcmp(name, \"s1119\")) {\n+\treturn 201466.421875f;\n+    } else if (!strcmp(name, \"s121\")) {\n+\treturn 32009.027344f;\n+    } else if (!strcmp(name, \"s122\")) {\n+\treturn 48446.664062f;\n+    } else if (!strcmp(name, \"s123\")) {\n+\treturn 32003.285156f;\n+    } else if (!strcmp(name, \"s124\")) {\n+\treturn 32001.642578f;\n+    } else if (!strcmp(name, \"s125\")) {\n+\treturn 131072.f;\n+    } else if (!strcmp(name, \"s126\")) {\n+\treturn 66955.132812f;\n+    } else if (!strcmp(name, \"s127\")) {\n+\treturn 32003.285156f;\n+    } else if (!strcmp(name, \"s128\")) {\n+\treturn 80000.f;\n+    } else if (!strcmp(name, \"s131\")) {\n+\treturn 32009.027344f;\n+    } else if (!strcmp(name, \"s132\")) {\n+\treturn 65538.5625f;\n+    } else if (!strcmp(name, \"s141\")) {\n+\treturn 3307351.5f;\n+    } else if (!strcmp(name, \"s151\")) {\n+\treturn 32009.027344f;\n+    } else if (!strcmp(name, \"s152\")) {\n+\treturn 44020.523438f;\n+    } else if (!strcmp(name, \"s161\")) {\n+\treturn 64002.054688f;\n+    } else if (!strcmp(name, \"s1161\")) {\n+\treturn 23.546331f;\n+    } else if (!strcmp(name, \"s162\")) {\n+\treturn 32009.023438f;\n+    } else if (!strcmp(name, \"s171\")) {\n+\treturn 48448.019531f;\n+    } else if (!strcmp(name, \"s172\")) {\n+\treturn 48448.019531f;\n+    } else if (!strcmp(name, \"s173\")) {\n+\treturn 32001.626953f;\n+    } else if (!strcmp(name, \"s174\")) {\n+\treturn 32001.626953f;\n+    } else if (!strcmp(name, \"s175\")) {\n+\treturn 32009.023438f;\n+    } else if (!strcmp(name, \"s176\")) {\n+\treturn 32000.f;\n+    } else if (!strcmp(name, \"s211\")) {\n+\treturn 63983.308594f;\n+    } else if (!strcmp(name, \"s212\")) {\n+\treturn 42008.136719f;\n+    } else if (!strcmp(name, \"s1213\")) {\n+\treturn 14.450508f;\n+    } else if (!strcmp(name, \"s221\")) {\n+\treturn 615418176.f;\n+    } else if (!strcmp(name, \"s1221\")) {\n+\treturn 79623.265625f;\n+    } else if (!strcmp(name, \"s222\")) {\n+\treturn 32000.f;\n+    } else if (!strcmp(name, \"s231\")) {\n+\treturn 119107.445312f;\n+    } else if (!strcmp(name, \"s232\")) {\n+\treturn 65536.f;\n+    } else if (!strcmp(name, \"s1232\")) {\n+\treturn 2885.801514f;\n+    } else if (!strcmp(name, \"s233\")) {\n+\treturn 504911.65625f;\n+    } else if (!strcmp(name, \"s2233\")) {\n+\treturn 337652.8125f;\n+    } else if (!strcmp(name, \"s235\")) {\n+\treturn 44810.886719f;\n+    } else if (!strcmp(name, \"s241\")) {\n+\treturn 64000.f;\n+    } else if (!strcmp(name, \"s242\")) {\n+\treturn 1535966208.f;\n+    } else if (!strcmp(name, \"s243\")) {\n+\treturn 138653.21875f;\n+    } else if (!strcmp(name, \"s244\")) {\n+\treturn 64623.015625f;\n+    } else if (!strcmp(name, \"s1244\")) {\n+\treturn 36.141911f;\n+    } else if (!strcmp(name, \"s2244\")) {\n+\treturn 32.852161f;\n+    } else if (!strcmp(name, \"s251\")) {\n+\treturn 32004.367188f;\n+    } else if (!strcmp(name, \"s1251\")) {\n+\treturn 39967.507812f;\n+    } else if (!strcmp(name, \"s2251\")) {\n+\treturn 2.635388f;\n+    } else if (!strcmp(name, \"s3251\")) {\n+\treturn 13.59558f;\n+    } else if (!strcmp(name, \"s252\")) {\n+\treturn 63999.f;\n+    } else if (!strcmp(name, \"s253\")) {\n+\treturn 320115936.f;\n+    } else if (!strcmp(name, \"s254\")) {\n+\treturn 32000.f;\n+    } else if (!strcmp(name, \"s255\")) {\n+\treturn 31953.501953f;\n+    } else if (!strcmp(name, \"s256\")) {\n+\treturn 66207.828125f;\n+    } else if (!strcmp(name, \"s257\")) {\n+\treturn 163072.f;\n+    } else if (!strcmp(name, \"s258\")) {\n+\treturn 14.65278f;\n+    } else if (!strcmp(name, \"s261\")) {\n+\treturn 54894.515625f;\n+    } else if (!strcmp(name, \"s271\")) {\n+\treturn 97793.570312f;\n+    } else if (!strcmp(name, \"s272\")) {\n+\treturn 64000.f;\n+    } else if (!strcmp(name, \"s273\")) {\n+\treturn 96311.546875f;\n+    } else if (!strcmp(name, \"s274\")) {\n+\treturn 320133920.f;\n+    } else if (!strcmp(name, \"s275\")) {\n+\treturn 65536.f;\n+    } else if (!strcmp(name, \"s2275\")) {\n+\treturn 1640158.5f;\n+    } else if (!strcmp(name, \"s276\")) {\n+\treturn 97793.570312f;\n+    } else if (!strcmp(name, \"s277\")) {\n+\treturn 32000.f;\n+    } else if (!strcmp(name, \"s278\")) {\n+\treturn 64012.589844f;\n+    } else if (!strcmp(name, \"s279\")) {\n+\treturn 64014.289062f;\n+    } else if (!strcmp(name, \"s1279\")) {\n+\treturn 32.852161f;\n+    } else if (!strcmp(name, \"s2710\")) {\n+\treturn 96003.28125f;\n+    } else if (!strcmp(name, \"s2711\")) {\n+\treturn 97793.570312f;\n+    } else if (!strcmp(name, \"s2712\")) {\n+\treturn 97793.570312f;\n+    } else if (!strcmp(name, \"s281\")) {\n+\treturn 32000.f;\n+    } else if (!strcmp(name, \"s1281\")) {\n+\treturn INFINITY;\n+    } else if (!strcmp(name, \"s291\")) {\n+\treturn 32000.f;\n+    } else if (!strcmp(name, \"s292\")) {\n+\treturn 31953.501953f;\n+    } else if (!strcmp(name, \"s293\")) {\n+\treturn 31999.998047f;\n+    } else if (!strcmp(name, \"s2101\")) {\n+\treturn 229657.921875f;\n+    } else if (!strcmp(name, \"s2102\")) {\n+\treturn 256.f;\n+    } else if (!strcmp(name, \"s2111\")) {\n+\treturn 34544940.f;\n+    } else if (!strcmp(name, \"s311\")) {\n+\treturn 10.950721f;\n+    } else if (!strcmp(name, \"s31111\")) {\n+\treturn 10.950721f;\n+    } else if (!strcmp(name, \"s312\")) {\n+\treturn 1.030869f;\n+    } else if (!strcmp(name, \"s313\")) {\n+\treturn 1.644824f;\n+    } else if (!strcmp(name, \"s314\")) {\n+\treturn 1.f;\n+    } else if (!strcmp(name, \"s315\")) {\n+\treturn 54857.f;\n+    } else if (!strcmp(name, \"s316\")) {\n+\treturn 0.000031f;\n+    } else if (!strcmp(name, \"s317\")) {\n+\treturn 0.f;\n+    } else if (!strcmp(name, \"s318\")) {\n+\treturn 32002.f;\n+    } else if (!strcmp(name, \"s319\")) {\n+\treturn 43.802898f;\n+    } else if (!strcmp(name, \"s3110\")) {\n+\treturn 514.f;\n+    } else if (!strcmp(name, \"s13110\")) {\n+\treturn 3.f;\n+    } else if (!strcmp(name, \"s3111\")) {\n+\treturn 10.950725f;\n+    } else if (!strcmp(name, \"s3112\")) {\n+\treturn 1.644725f;\n+    } else if (!strcmp(name, \"s3113\")) {\n+\treturn 2.f;\n+    } else if (!strcmp(name, \"s321\")) {\n+\treturn 32000.f;\n+    } else if (!strcmp(name, \"s322\")) {\n+\treturn 32000.f;\n+    } else if (!strcmp(name, \"s323\")) {\n+\treturn 146472.4375f;\n+    } else if (!strcmp(name, \"s331\")) {\n+\treturn 32000.f;\n+    } else if (!strcmp(name, \"s332\")) {\n+\treturn -1.f;\n+    } else if (!strcmp(name, \"s341\")) {\n+\treturn 10.950721f;\n+    } else if (!strcmp(name, \"s342\")) {\n+\treturn 10.950721f;\n+    } else if (!strcmp(name, \"s343\")) {\n+\treturn 1567.932129f;\n+    } else if (!strcmp(name, \"s351\")) {\n+\treturn 2560660224.f;\n+    } else if (!strcmp(name, \"s1351\")) {\n+\treturn 21.901442f;\n+    } else if (!strcmp(name, \"s352\")) {\n+\treturn 1.644808f;\n+    } else if (!strcmp(name, \"s353\")) {\n+\treturn 320084192.f;\n+    } else if (!strcmp(name, \"s421\")) {\n+\treturn 32009.023438f;\n+    } else if (!strcmp(name, \"s1421\")) {\n+\treturn 16000.f;\n+    } else if (!strcmp(name, \"s422\")) {\n+\treturn 3.737715f;\n+    } else if (!strcmp(name, \"s423\")) {\n+\treturn 64006.683594f;\n+    } else if (!strcmp(name, \"s424\")) {\n+\treturn 822.364014f;\n+    } else if (!strcmp(name, \"s431\")) {\n+\treturn 196500.265625f;\n+    } else if (!strcmp(name, \"s441\")) {\n+\treturn 48448.019531f;\n+    } else if (!strcmp(name, \"s442\")) {\n+\treturn 40224.117188f;\n+    } else if (!strcmp(name, \"s443\")) {\n+\treturn 64895.867188f;\n+    } else if (!strcmp(name, \"s451\")) {\n+\treturn 32007.898438f;\n+    } else if (!strcmp(name, \"s452\")) {\n+\treturn 32511.939453f;\n+    } else if (!strcmp(name, \"s453\")) {\n+\treturn 21.901442f;\n+    } else if (!strcmp(name, \"s471\")) {\n+\treturn 64004.925781f;\n+    } else if (!strcmp(name, \"s481\")) {\n+\treturn 48448.019531f;\n+    } else if (!strcmp(name, \"s482\")) {\n+\treturn 48448.019531f;\n+    } else if (!strcmp(name, \"s491\")) {\n+\treturn 32001.640625f;\n+    } else if (!strcmp(name, \"s4112\")) {\n+\treturn 141504.875f;\n+    } else if (!strcmp(name, \"s4113\")) {\n+\treturn 32001.640625f;\n+    } else if (!strcmp(name, \"s4114\")) {\n+\treturn 32000.f;\n+    } else if (!strcmp(name, \"s4115\")) {\n+\treturn 1.038636f;\n+    } else if (!strcmp(name, \"s4116\")) {\n+\treturn 0.753265f;\n+    } else if (!strcmp(name, \"s4117\")) {\n+\treturn 32002.205078f;\n+    } else if (!strcmp(name, \"s4121\")) {\n+\treturn 48448.019531f;\n+    } else if (!strcmp(name, \"va\")) {\n+\treturn 1.644725f;\n+    } else if (!strcmp(name, \"vag\")) {\n+\treturn 1.644725f;\n+    } else if (!strcmp(name, \"vas\")) {\n+\treturn 1.644725f;\n+    } else if (!strcmp(name, \"vif\")) {\n+\treturn 1.644725f;\n+    } else if (!strcmp(name, \"vpv\")) {\n+\treturn 164487.78125f;\n+    } else if (!strcmp(name, \"vtv\")) {\n+\treturn 32000.f;\n+    } else if (!strcmp(name, \"vpvtv\")) {\n+\treturn 97793.570312f;\n+    } else if (!strcmp(name, \"vpvts\")) {\n+\treturn 17522152701952.f;\n+    } else if (!strcmp(name, \"vpvpv\")) {\n+\treturn 1.644725f;\n+    } else if (!strcmp(name, \"vtvtv\")) {\n+\treturn 32000.f;\n+    } else if (!strcmp(name, \"vsumr\")) {\n+\treturn 10.950725f;\n+    } else if (!strcmp(name, \"vdotr\")) {\n+\treturn 1.644824f;\n+    } else if (!strcmp(name, \"vbor\")) {\n+\treturn 31924.046875f;\n+    } else {\n+        fprintf(stderr, \"Unknown function name passed to expected_result: %s\\n\", name);\n+        exit(1);\n+    }\n+}\n+\n+typedef real_t(*test_function_t)(struct args_t *);\n+\n+static _Bool is_checksum_same(real_t expected, real_t value)\n+{\n+  if (expected == INFINITY)\n+      return value == INFINITY;\n+  else if(expected == 0.f)\n+      return value <= 0.01f;\n+  else {\n+      real_t fraction = value / expected;\n+      return 0.99f <= fraction && fraction <= 1.01f;\n+  }\n+}\n+\n+void run(test_function_t vector_func, const char *fname, void * arg_info)\n+{\n+    struct args_t func_args = {.arg_info=arg_info};\n+\n+    double result = vector_func(&func_args);\n+    double expected_result = get_expected_result(fname);\n+\n+    if (!is_checksum_same(expected_result, result))\n+      {\n+\tfprintf (stderr, \"value: %f, expected: %f\\n\", result, expected_result);\n+\t__builtin_abort();\n+      }\n+}\n+\n+int\n+__attribute__((noipa))\n+dummy(float a[LEN_1D], float b[LEN_1D], float c[LEN_1D], float d[LEN_1D], float e[LEN_1D], float aa[LEN_2D][LEN_2D], float bb[LEN_2D][LEN_2D], float cc[LEN_2D][LEN_2D], float s){\n+    // --  called in each loop to make all computations appear required\n+    return 0;\n+}\n+\n+#pragma GCC pop_options"}, {"sha": "b5d5faab52ff5301e670021e9684ca1efe283ec5", "filename": "gcc/testsuite/gcc.dg/vect/tsvc/vect-tsvc-s000.c", "status": "added", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f81970b5f386630b98a33373c23dcc9234c6a980/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Ftsvc%2Fvect-tsvc-s000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f81970b5f386630b98a33373c23dcc9234c6a980/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Ftsvc%2Fvect-tsvc-s000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Ftsvc%2Fvect-tsvc-s000.c?ref=f81970b5f386630b98a33373c23dcc9234c6a980", "patch": "@@ -0,0 +1,39 @@\n+/*  This file is distributed under the University of Illinois Open Source\n+    License. See license.txt for details.  */\n+\n+/* { dg-additional-options \"--param vect-epilogues-nomask=0\" } */\n+/* { dg-require-effective-target vect_float } */\n+\n+#include \"tsvc.h\"\n+\n+real_t s000(struct args_t * func_args)\n+{\n+//    linear dependence testing\n+//    no dependence - vectorizable\n+\n+    initialise_arrays(__func__);\n+\n+    for (int nl = 0; nl < 2*iterations; nl++) {\n+        for (int i = 0; i < LEN_1D; i++) {\n+            a[i] = b[i] + 1;\n+        }\n+        dummy((real_t*)a, (real_t*)b, (real_t*)c, (real_t*)d, (real_t*)e, aa, bb, cc, 0.);\n+    }\n+\n+    return calc_checksum(__func__);\n+}\n+\n+int main (int argc, char **argv)\n+{\n+  int n1 = 1;\n+  int n3 = 1;\n+  int* ip;\n+  real_t s1,s2;\n+  init(&ip, &s1, &s2);\n+\n+  run(&s000, \"s000\", NULL);\n+\n+  return 0;\n+}\n+\n+/* { dg-final { scan-tree-dump-times \"vectorized 1 loops\" 1 \"vect\" } } */\n\\ No newline at end of file"}, {"sha": "37e4684e1e59af35edf8d9179e268517dad18177", "filename": "gcc/testsuite/gcc.dg/vect/tsvc/vect-tsvc-s111.c", "status": "added", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f81970b5f386630b98a33373c23dcc9234c6a980/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Ftsvc%2Fvect-tsvc-s111.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f81970b5f386630b98a33373c23dcc9234c6a980/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Ftsvc%2Fvect-tsvc-s111.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Ftsvc%2Fvect-tsvc-s111.c?ref=f81970b5f386630b98a33373c23dcc9234c6a980", "patch": "@@ -0,0 +1,39 @@\n+/*  This file is distributed under the University of Illinois Open Source\n+    License. See license.txt for details.  */\n+\n+/* { dg-additional-options \"--param vect-epilogues-nomask=0\" } */\n+/* { dg-require-effective-target vect_float } */\n+\n+#include \"tsvc.h\"\n+\n+real_t s111(struct args_t * func_args)\n+{\n+//    linear dependence testing\n+//    no dependence - vectorizable\n+\n+    initialise_arrays(__func__);\n+\n+    for (int nl = 0; nl < 2*iterations; nl++) {\n+        for (int i = 1; i < LEN_1D; i += 2) {\n+            a[i] = a[i - 1] + b[i];\n+        }\n+        dummy(a, b, c, d, e, aa, bb, cc, 0.);\n+    }\n+\n+    return calc_checksum(__func__);\n+}\n+\n+int main (int argc, char **argv)\n+{\n+  int n1 = 1;\n+  int n3 = 1;\n+  int* ip;\n+  real_t s1,s2;\n+  init(&ip, &s1, &s2);\n+\n+  run(&s111, \"s111\", NULL);\n+\n+  return 0;\n+}\n+\n+/* { dg-final { scan-tree-dump-times \"vectorized 1 loops\" 1 \"vect\" } } */\n\\ No newline at end of file"}, {"sha": "cd7e84ebfe3658a3e567abaa2caa5330212bd785", "filename": "gcc/testsuite/gcc.dg/vect/tsvc/vect-tsvc-s1111.c", "status": "added", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f81970b5f386630b98a33373c23dcc9234c6a980/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Ftsvc%2Fvect-tsvc-s1111.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f81970b5f386630b98a33373c23dcc9234c6a980/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Ftsvc%2Fvect-tsvc-s1111.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Ftsvc%2Fvect-tsvc-s1111.c?ref=f81970b5f386630b98a33373c23dcc9234c6a980", "patch": "@@ -0,0 +1,39 @@\n+/*  This file is distributed under the University of Illinois Open Source\n+    License. See license.txt for details.  */\n+\n+/* { dg-additional-options \"--param vect-epilogues-nomask=0\" } */\n+/* { dg-require-effective-target vect_float } */\n+\n+#include \"tsvc.h\"\n+\n+real_t s1111(struct args_t * func_args)\n+{\n+//    no dependence - vectorizable\n+//    jump in data access\n+\n+    initialise_arrays(__func__);\n+\n+    for (int nl = 0; nl < 2*iterations; nl++) {\n+        for (int i = 0; i < LEN_1D/2; i++) {\n+            a[2*i] = c[i] * b[i] + d[i] * b[i] + c[i] * c[i] + d[i] * b[i] + d[i] * c[i];\n+        }\n+        dummy(a, b, c, d, e, aa, bb, cc, 0.);\n+    }\n+\n+    return calc_checksum(__func__);\n+}\n+\n+int main (int argc, char **argv)\n+{\n+  int n1 = 1;\n+  int n3 = 1;\n+  int* ip;\n+  real_t s1,s2;\n+  init(&ip, &s1, &s2);\n+\n+  run(&s1111, \"s1111\", NULL);\n+\n+  return 0;\n+}\n+\n+/* { dg-final { scan-tree-dump-times \"vectorized 1 loops\" 1 \"vect\" } } */\n\\ No newline at end of file"}, {"sha": "20cb346810120ea6eb219300a96632881409515c", "filename": "gcc/testsuite/gcc.dg/vect/tsvc/vect-tsvc-s1112.c", "status": "added", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f81970b5f386630b98a33373c23dcc9234c6a980/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Ftsvc%2Fvect-tsvc-s1112.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f81970b5f386630b98a33373c23dcc9234c6a980/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Ftsvc%2Fvect-tsvc-s1112.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Ftsvc%2Fvect-tsvc-s1112.c?ref=f81970b5f386630b98a33373c23dcc9234c6a980", "patch": "@@ -0,0 +1,39 @@\n+/*  This file is distributed under the University of Illinois Open Source\n+    License. See license.txt for details.  */\n+\n+/* { dg-additional-options \"--param vect-epilogues-nomask=0\" } */\n+/* { dg-require-effective-target vect_float } */\n+\n+#include \"tsvc.h\"\n+\n+real_t s1112(struct args_t * func_args)\n+{\n+//    linear dependence testing\n+//    loop reversal\n+\n+    initialise_arrays(__func__);\n+\n+    for (int nl = 0; nl < iterations*3; nl++) {\n+        for (int i = LEN_1D - 1; i >= 0; i--) {\n+            a[i] = b[i] + (real_t) 1.;\n+        }\n+        dummy(a, b, c, d, e, aa, bb, cc, 0.);\n+    }\n+\n+    return calc_checksum(__func__);\n+}\n+\n+int main (int argc, char **argv)\n+{\n+  int n1 = 1;\n+  int n3 = 1;\n+  int* ip;\n+  real_t s1,s2;\n+  init(&ip, &s1, &s2);\n+\n+  run(&s1112, \"s1112\", NULL);\n+\n+  return 0;\n+}\n+\n+/* { dg-final { scan-tree-dump-times \"vectorized 1 loops\" 1 \"vect\" } } */\n\\ No newline at end of file"}, {"sha": "55aa8edbdd545bbb9f1da6f9cc05ef3fedfa1bda", "filename": "gcc/testsuite/gcc.dg/vect/tsvc/vect-tsvc-s1113.c", "status": "added", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f81970b5f386630b98a33373c23dcc9234c6a980/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Ftsvc%2Fvect-tsvc-s1113.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f81970b5f386630b98a33373c23dcc9234c6a980/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Ftsvc%2Fvect-tsvc-s1113.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Ftsvc%2Fvect-tsvc-s1113.c?ref=f81970b5f386630b98a33373c23dcc9234c6a980", "patch": "@@ -0,0 +1,39 @@\n+/*  This file is distributed under the University of Illinois Open Source\n+    License. See license.txt for details.  */\n+\n+/* { dg-additional-options \"--param vect-epilogues-nomask=0\" } */\n+/* { dg-require-effective-target vect_float } */\n+\n+#include \"tsvc.h\"\n+\n+real_t s1113(struct args_t * func_args)\n+{\n+//    linear dependence testing\n+//    one iteration dependency on a(LEN_1D/2) but still vectorizable\n+\n+    initialise_arrays(__func__);\n+\n+    for (int nl = 0; nl < 2*iterations; nl++) {\n+        for (int i = 0; i < LEN_1D; i++) {\n+            a[i] = a[LEN_1D/2] + b[i];\n+        }\n+        dummy(a, b, c, d, e, aa, bb, cc, 0.);\n+    }\n+\n+    return calc_checksum(__func__);\n+}\n+\n+int main (int argc, char **argv)\n+{\n+  int n1 = 1;\n+  int n3 = 1;\n+  int* ip;\n+  real_t s1,s2;\n+  init(&ip, &s1, &s2);\n+\n+  run(&s1113, \"s1113\", NULL);\n+\n+  return 0;\n+}\n+\n+/* { dg-final { scan-tree-dump \"vectorized 1 loops\" \"vect\" { xfail *-*-* } } } */"}, {"sha": "1b2ff0cb4c40a1686b86b052469d04d609e9c09a", "filename": "gcc/testsuite/gcc.dg/vect/tsvc/vect-tsvc-s1115.c", "status": "added", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f81970b5f386630b98a33373c23dcc9234c6a980/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Ftsvc%2Fvect-tsvc-s1115.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f81970b5f386630b98a33373c23dcc9234c6a980/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Ftsvc%2Fvect-tsvc-s1115.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Ftsvc%2Fvect-tsvc-s1115.c?ref=f81970b5f386630b98a33373c23dcc9234c6a980", "patch": "@@ -0,0 +1,41 @@\n+/*  This file is distributed under the University of Illinois Open Source\n+    License. See license.txt for details.  */\n+\n+/* { dg-additional-options \"--param vect-epilogues-nomask=0\" } */\n+/* { dg-require-effective-target vect_float } */\n+\n+#include \"tsvc.h\"\n+\n+real_t s1115(struct args_t * func_args)\n+{\n+//    linear dependence testing\n+//    triangular saxpy loop\n+\n+    initialise_arrays(__func__);\n+\n+    for (int nl = 0; nl < 100*(iterations/LEN_2D); nl++) {\n+        for (int i = 0; i < LEN_2D; i++) {\n+            for (int j = 0; j < LEN_2D; j++) {\n+                aa[i][j] = aa[i][j]*cc[j][i] + bb[i][j];\n+            }\n+        }\n+        dummy(a, b, c, d, e, aa, bb, cc, 0.);\n+    }\n+\n+    return calc_checksum(__func__);\n+}\n+\n+int main (int argc, char **argv)\n+{\n+  int n1 = 1;\n+  int n3 = 1;\n+  int* ip;\n+  real_t s1,s2;\n+  init(&ip, &s1, &s2);\n+\n+  run(&s1115, \"s1115\", NULL);\n+\n+  return 0;\n+}\n+\n+/* { dg-final { scan-tree-dump \"vectorized 1 loops\" \"vect\" { xfail *-*-* } } } */"}, {"sha": "16610fadd638620fcafc9b57b4a04d8fbcd29712", "filename": "gcc/testsuite/gcc.dg/vect/tsvc/vect-tsvc-s1119.c", "status": "added", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f81970b5f386630b98a33373c23dcc9234c6a980/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Ftsvc%2Fvect-tsvc-s1119.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f81970b5f386630b98a33373c23dcc9234c6a980/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Ftsvc%2Fvect-tsvc-s1119.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Ftsvc%2Fvect-tsvc-s1119.c?ref=f81970b5f386630b98a33373c23dcc9234c6a980", "patch": "@@ -0,0 +1,41 @@\n+/*  This file is distributed under the University of Illinois Open Source\n+    License. See license.txt for details.  */\n+\n+/* { dg-additional-options \"--param vect-epilogues-nomask=0\" } */\n+/* { dg-require-effective-target vect_float } */\n+\n+#include \"tsvc.h\"\n+\n+real_t s1119(struct args_t * func_args)\n+{\n+//    linear dependence testing\n+//    no dependence - vectorizable\n+\n+    initialise_arrays(__func__);\n+\n+    for (int nl = 0; nl < 200*(iterations/(LEN_2D)); nl++) {\n+        for (int i = 1; i < LEN_2D; i++) {\n+            for (int j = 0; j < LEN_2D; j++) {\n+                aa[i][j] = aa[i-1][j] + bb[i][j];\n+            }\n+        }\n+        dummy(a, b, c, d, e, aa, bb, cc, 0.);\n+    }\n+\n+    return calc_checksum(__func__);\n+}\n+\n+int main (int argc, char **argv)\n+{\n+  int n1 = 1;\n+  int n3 = 1;\n+  int* ip;\n+  real_t s1,s2;\n+  init(&ip, &s1, &s2);\n+\n+  run(&s1119, \"s1119\", NULL);\n+\n+  return 0;\n+}\n+\n+/* { dg-final { scan-tree-dump-times \"vectorized 1 loops\" 1 \"vect\" } } */\n\\ No newline at end of file"}, {"sha": "3c6ae49f2121844f5eee6d2ae0d9469ff12d2897", "filename": "gcc/testsuite/gcc.dg/vect/tsvc/vect-tsvc-s112.c", "status": "added", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f81970b5f386630b98a33373c23dcc9234c6a980/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Ftsvc%2Fvect-tsvc-s112.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f81970b5f386630b98a33373c23dcc9234c6a980/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Ftsvc%2Fvect-tsvc-s112.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Ftsvc%2Fvect-tsvc-s112.c?ref=f81970b5f386630b98a33373c23dcc9234c6a980", "patch": "@@ -0,0 +1,39 @@\n+/*  This file is distributed under the University of Illinois Open Source\n+    License. See license.txt for details.  */\n+\n+/* { dg-additional-options \"--param vect-epilogues-nomask=0\" } */\n+/* { dg-require-effective-target vect_float } */\n+\n+#include \"tsvc.h\"\n+\n+real_t s112(struct args_t * func_args)\n+{\n+//    linear dependence testing\n+//    loop reversal\n+\n+    initialise_arrays(__func__);\n+\n+    for (int nl = 0; nl < 3*iterations; nl++) {\n+        for (int i = LEN_1D - 2; i >= 0; i--) {\n+            a[i+1] = a[i] + b[i];\n+        }\n+        dummy(a, b, c, d, e, aa, bb, cc, 0.);\n+    }\n+\n+    return calc_checksum(__func__);\n+}\n+\n+int main (int argc, char **argv)\n+{\n+  int n1 = 1;\n+  int n3 = 1;\n+  int* ip;\n+  real_t s1,s2;\n+  init(&ip, &s1, &s2);\n+\n+  run(&s112, \"s112\", NULL);\n+\n+  return 0;\n+}\n+\n+/* { dg-final { scan-tree-dump-times \"vectorized 1 loops\" 1 \"vect\" } } */\n\\ No newline at end of file"}, {"sha": "f22ab4c03b3cc3211890f59aee839e7f116f31ee", "filename": "gcc/testsuite/gcc.dg/vect/tsvc/vect-tsvc-s113.c", "status": "added", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f81970b5f386630b98a33373c23dcc9234c6a980/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Ftsvc%2Fvect-tsvc-s113.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f81970b5f386630b98a33373c23dcc9234c6a980/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Ftsvc%2Fvect-tsvc-s113.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Ftsvc%2Fvect-tsvc-s113.c?ref=f81970b5f386630b98a33373c23dcc9234c6a980", "patch": "@@ -0,0 +1,39 @@\n+/*  This file is distributed under the University of Illinois Open Source\n+    License. See license.txt for details.  */\n+\n+/* { dg-additional-options \"--param vect-epilogues-nomask=0\" } */\n+/* { dg-require-effective-target vect_float } */\n+\n+#include \"tsvc.h\"\n+\n+real_t s113(struct args_t * func_args)\n+{\n+//    linear dependence testing\n+//    a(i)=a(1) but no actual dependence cycle\n+\n+    initialise_arrays(__func__);\n+\n+    for (int nl = 0; nl < 4*iterations; nl++) {\n+        for (int i = 1; i < LEN_1D; i++) {\n+            a[i] = a[0] + b[i];\n+        }\n+        dummy(a, b, c, d, e, aa, bb, cc, 0.);\n+    }\n+\n+    return calc_checksum(__func__);\n+}\n+\n+int main (int argc, char **argv)\n+{\n+  int n1 = 1;\n+  int n3 = 1;\n+  int* ip;\n+  real_t s1,s2;\n+  init(&ip, &s1, &s2);\n+\n+  run(&s113, \"s113\", NULL);\n+\n+  return 0;\n+}\n+\n+/* { dg-final { scan-tree-dump-times \"vectorized 1 loops\" 1 \"vect\" } } */\n\\ No newline at end of file"}, {"sha": "fded659bacfd582149f35af73d72bb0cafe6bed2", "filename": "gcc/testsuite/gcc.dg/vect/tsvc/vect-tsvc-s114.c", "status": "added", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f81970b5f386630b98a33373c23dcc9234c6a980/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Ftsvc%2Fvect-tsvc-s114.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f81970b5f386630b98a33373c23dcc9234c6a980/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Ftsvc%2Fvect-tsvc-s114.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Ftsvc%2Fvect-tsvc-s114.c?ref=f81970b5f386630b98a33373c23dcc9234c6a980", "patch": "@@ -0,0 +1,42 @@\n+/*  This file is distributed under the University of Illinois Open Source\n+    License. See license.txt for details.  */\n+\n+/* { dg-additional-options \"--param vect-epilogues-nomask=0\" } */\n+/* { dg-require-effective-target vect_float } */\n+\n+#include \"tsvc.h\"\n+\n+real_t s114(struct args_t * func_args)\n+{\n+//    linear dependence testing\n+//    transpose vectorization\n+//    Jump in data access - not vectorizable\n+\n+    initialise_arrays(__func__);\n+\n+    for (int nl = 0; nl < 200*(iterations/(LEN_2D)); nl++) {\n+        for (int i = 0; i < LEN_2D; i++) {\n+            for (int j = 0; j < i; j++) {\n+                aa[i][j] = aa[j][i] + bb[i][j];\n+            }\n+        }\n+        dummy(a, b, c, d, e, aa, bb, cc, 0.);\n+    }\n+\n+    return calc_checksum(__func__);\n+}\n+\n+int main (int argc, char **argv)\n+{\n+  int n1 = 1;\n+  int n3 = 1;\n+  int* ip;\n+  real_t s1,s2;\n+  init(&ip, &s1, &s2);\n+\n+  run(&s114, \"s114\", NULL);\n+\n+  return 0;\n+}\n+\n+/* { dg-final { scan-tree-dump \"vectorized 1 loops\" \"vect\" { xfail *-*-* } } } */"}, {"sha": "153cbf8aacaced734b983aed024708a1d7d280bb", "filename": "gcc/testsuite/gcc.dg/vect/tsvc/vect-tsvc-s115.c", "status": "added", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f81970b5f386630b98a33373c23dcc9234c6a980/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Ftsvc%2Fvect-tsvc-s115.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f81970b5f386630b98a33373c23dcc9234c6a980/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Ftsvc%2Fvect-tsvc-s115.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Ftsvc%2Fvect-tsvc-s115.c?ref=f81970b5f386630b98a33373c23dcc9234c6a980", "patch": "@@ -0,0 +1,41 @@\n+/*  This file is distributed under the University of Illinois Open Source\n+    License. See license.txt for details.  */\n+\n+/* { dg-additional-options \"--param vect-epilogues-nomask=0\" } */\n+/* { dg-require-effective-target vect_float } */\n+\n+#include \"tsvc.h\"\n+\n+real_t s115(struct args_t * func_args)\n+{\n+//    linear dependence testing\n+//    triangular saxpy loop\n+\n+    initialise_arrays(__func__);\n+\n+    for (int nl = 0; nl < 1000*(iterations/LEN_2D); nl++) {\n+        for (int j = 0; j < LEN_2D; j++) {\n+            for (int i = j+1; i < LEN_2D; i++) {\n+                a[i] -= aa[j][i] * a[j];\n+            }\n+        }\n+        dummy(a, b, c, d, e, aa, bb, cc, 0.);\n+    }\n+\n+    return calc_checksum(__func__);\n+}\n+\n+int main (int argc, char **argv)\n+{\n+  int n1 = 1;\n+  int n3 = 1;\n+  int* ip;\n+  real_t s1,s2;\n+  init(&ip, &s1, &s2);\n+\n+  run(&s115, \"s115\", NULL);\n+\n+  return 0;\n+}\n+\n+/* { dg-final { scan-tree-dump-times \"vectorized 1 loops\" 1 \"vect\" } } */\n\\ No newline at end of file"}, {"sha": "93d16b3f50d1620a1a93446220b832192a328fee", "filename": "gcc/testsuite/gcc.dg/vect/tsvc/vect-tsvc-s116.c", "status": "added", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f81970b5f386630b98a33373c23dcc9234c6a980/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Ftsvc%2Fvect-tsvc-s116.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f81970b5f386630b98a33373c23dcc9234c6a980/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Ftsvc%2Fvect-tsvc-s116.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Ftsvc%2Fvect-tsvc-s116.c?ref=f81970b5f386630b98a33373c23dcc9234c6a980", "patch": "@@ -0,0 +1,42 @@\n+/*  This file is distributed under the University of Illinois Open Source\n+    License. See license.txt for details.  */\n+\n+/* { dg-additional-options \"--param vect-epilogues-nomask=0\" } */\n+/* { dg-require-effective-target vect_float } */\n+\n+#include \"tsvc.h\"\n+\n+real_t s116(struct args_t * func_args)\n+{\n+//    linear dependence testing\n+\n+    initialise_arrays(__func__);\n+\n+    for (int nl = 0; nl < iterations*10; nl++) {\n+        for (int i = 0; i < LEN_1D - 5; i += 5) {\n+            a[i] = a[i + 1] * a[i];\n+            a[i + 1] = a[i + 2] * a[i + 1];\n+            a[i + 2] = a[i + 3] * a[i + 2];\n+            a[i + 3] = a[i + 4] * a[i + 3];\n+            a[i + 4] = a[i + 5] * a[i + 4];\n+        }\n+        dummy(a, b, c, d, e, aa, bb, cc, 0.);\n+    }\n+\n+    return calc_checksum(__func__);\n+}\n+\n+int main (int argc, char **argv)\n+{\n+  int n1 = 1;\n+  int n3 = 1;\n+  int* ip;\n+  real_t s1,s2;\n+  init(&ip, &s1, &s2);\n+\n+  run(&s116, \"s116\", NULL);\n+\n+  return 0;\n+}\n+\n+/* { dg-final { scan-tree-dump \"vectorized 1 loops\" \"vect\" { xfail *-*-* } } } */"}, {"sha": "dfdeaf7fb481964cfbf9d8ca7f7347ed1a701d21", "filename": "gcc/testsuite/gcc.dg/vect/tsvc/vect-tsvc-s1161.c", "status": "added", "additions": 48, "deletions": 0, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f81970b5f386630b98a33373c23dcc9234c6a980/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Ftsvc%2Fvect-tsvc-s1161.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f81970b5f386630b98a33373c23dcc9234c6a980/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Ftsvc%2Fvect-tsvc-s1161.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Ftsvc%2Fvect-tsvc-s1161.c?ref=f81970b5f386630b98a33373c23dcc9234c6a980", "patch": "@@ -0,0 +1,48 @@\n+/*  This file is distributed under the University of Illinois Open Source\n+    License. See license.txt for details.  */\n+\n+/* { dg-additional-options \"--param vect-epilogues-nomask=0\" } */\n+/* { dg-require-effective-target vect_float } */\n+\n+#include \"tsvc.h\"\n+\n+real_t s1161(struct args_t * func_args)\n+{\n+//    control flow\n+//    tests for recognition of loop independent dependences\n+//    between statements in mutually exclusive regions.\n+\n+    initialise_arrays(__func__);\n+\n+    for (int nl = 0; nl < iterations; nl++) {\n+        for (int i = 0; i < LEN_1D-1; ++i) {\n+            if (c[i] < (real_t)0.) {\n+                goto L20;\n+            }\n+            a[i] = c[i] + d[i] * e[i];\n+            goto L10;\n+L20:\n+            b[i] = a[i] + d[i] * d[i];\n+L10:\n+            ;\n+        }\n+        dummy(a, b, c, d, e, aa, bb, cc, 0.);\n+    }\n+\n+    return calc_checksum(__func__);\n+}\n+\n+int main (int argc, char **argv)\n+{\n+  int n1 = 1;\n+  int n3 = 1;\n+  int* ip;\n+  real_t s1,s2;\n+  init(&ip, &s1, &s2);\n+\n+  run(&s1161, \"s1161\", NULL);\n+\n+  return 0;\n+}\n+\n+/* { dg-final { scan-tree-dump \"vectorized 1 loops\" \"vect\" { xfail *-*-* } } } */"}, {"sha": "3896a9a741734def1c286af6d2b02a2d0fc07125", "filename": "gcc/testsuite/gcc.dg/vect/tsvc/vect-tsvc-s118.c", "status": "added", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f81970b5f386630b98a33373c23dcc9234c6a980/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Ftsvc%2Fvect-tsvc-s118.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f81970b5f386630b98a33373c23dcc9234c6a980/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Ftsvc%2Fvect-tsvc-s118.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Ftsvc%2Fvect-tsvc-s118.c?ref=f81970b5f386630b98a33373c23dcc9234c6a980", "patch": "@@ -0,0 +1,41 @@\n+/*  This file is distributed under the University of Illinois Open Source\n+    License. See license.txt for details.  */\n+\n+/* { dg-additional-options \"--param vect-epilogues-nomask=0\" } */\n+/* { dg-require-effective-target vect_float } */\n+\n+#include \"tsvc.h\"\n+\n+real_t s118(struct args_t * func_args)\n+{\n+//    linear dependence testing\n+//    potential dot product recursion\n+\n+    initialise_arrays(__func__);\n+\n+    for (int nl = 0; nl < 200*(iterations/LEN_2D); nl++) {\n+        for (int i = 1; i < LEN_2D; i++) {\n+            for (int j = 0; j <= i - 1; j++) {\n+                a[i] += bb[j][i] * a[i-j-1];\n+            }\n+        }\n+        dummy(a, b, c, d, e, aa, bb, cc, 0.);\n+    }\n+\n+    return calc_checksum(__func__);\n+}\n+\n+int main (int argc, char **argv)\n+{\n+  int n1 = 1;\n+  int n3 = 1;\n+  int* ip;\n+  real_t s1,s2;\n+  init(&ip, &s1, &s2);\n+\n+  run(&s118, \"s118\", NULL);\n+\n+  return 0;\n+}\n+\n+/* { dg-final { scan-tree-dump \"vectorized 1 loops\" \"vect\" { xfail *-*-* } } } */"}, {"sha": "43391c5e447924444850ad8191b158306aa7b57f", "filename": "gcc/testsuite/gcc.dg/vect/tsvc/vect-tsvc-s119.c", "status": "added", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f81970b5f386630b98a33373c23dcc9234c6a980/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Ftsvc%2Fvect-tsvc-s119.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f81970b5f386630b98a33373c23dcc9234c6a980/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Ftsvc%2Fvect-tsvc-s119.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Ftsvc%2Fvect-tsvc-s119.c?ref=f81970b5f386630b98a33373c23dcc9234c6a980", "patch": "@@ -0,0 +1,41 @@\n+/*  This file is distributed under the University of Illinois Open Source\n+    License. See license.txt for details.  */\n+\n+/* { dg-additional-options \"--param vect-epilogues-nomask=0\" } */\n+/* { dg-require-effective-target vect_float } */\n+\n+#include \"tsvc.h\"\n+\n+real_t s119(struct args_t * func_args)\n+{\n+//    linear dependence testing\n+//    no dependence - vectorizable\n+\n+    initialise_arrays(__func__);\n+\n+    for (int nl = 0; nl < 200*(iterations/(LEN_2D)); nl++) {\n+        for (int i = 1; i < LEN_2D; i++) {\n+            for (int j = 1; j < LEN_2D; j++) {\n+                aa[i][j] = aa[i-1][j-1] + bb[i][j];\n+            }\n+        }\n+        dummy(a, b, c, d, e, aa, bb, cc, 0.);\n+    }\n+\n+    return calc_checksum(__func__);\n+}\n+\n+int main (int argc, char **argv)\n+{\n+  int n1 = 1;\n+  int n3 = 1;\n+  int* ip;\n+  real_t s1,s2;\n+  init(&ip, &s1, &s2);\n+\n+  run(&s119, \"s119\", NULL);\n+\n+  return 0;\n+}\n+\n+/* { dg-final { scan-tree-dump-times \"vectorized 1 loops\" 1 \"vect\" } } */\n\\ No newline at end of file"}, {"sha": "98a67ace8173be74464ab6e69f151e90b300148d", "filename": "gcc/testsuite/gcc.dg/vect/tsvc/vect-tsvc-s121.c", "status": "added", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f81970b5f386630b98a33373c23dcc9234c6a980/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Ftsvc%2Fvect-tsvc-s121.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f81970b5f386630b98a33373c23dcc9234c6a980/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Ftsvc%2Fvect-tsvc-s121.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Ftsvc%2Fvect-tsvc-s121.c?ref=f81970b5f386630b98a33373c23dcc9234c6a980", "patch": "@@ -0,0 +1,41 @@\n+/*  This file is distributed under the University of Illinois Open Source\n+    License. See license.txt for details.  */\n+\n+/* { dg-additional-options \"--param vect-epilogues-nomask=0\" } */\n+/* { dg-require-effective-target vect_float } */\n+\n+#include \"tsvc.h\"\n+\n+real_t s121(struct args_t * func_args)\n+{\n+//    induction variable recognition\n+//    loop with possible ambiguity because of scalar store\n+\n+    initialise_arrays(__func__);\n+\n+    int j;\n+    for (int nl = 0; nl < 3*iterations; nl++) {\n+        for (int i = 0; i < LEN_1D-1; i++) {\n+            j = i + 1;\n+            a[i] = a[j] + b[i];\n+        }\n+        dummy(a, b, c, d, e, aa, bb, cc, 0.);\n+    }\n+\n+    return calc_checksum(__func__);\n+}\n+\n+int main (int argc, char **argv)\n+{\n+  int n1 = 1;\n+  int n3 = 1;\n+  int* ip;\n+  real_t s1,s2;\n+  init(&ip, &s1, &s2);\n+\n+  run(&s121, \"s121\", NULL);\n+\n+  return 0;\n+}\n+\n+/* { dg-final { scan-tree-dump-times \"vectorized 1 loops\" 1 \"vect\" } } */\n\\ No newline at end of file"}, {"sha": "f9f3beb38d449332eea9b4d07a2f32c4175480ed", "filename": "gcc/testsuite/gcc.dg/vect/tsvc/vect-tsvc-s1213.c", "status": "added", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f81970b5f386630b98a33373c23dcc9234c6a980/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Ftsvc%2Fvect-tsvc-s1213.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f81970b5f386630b98a33373c23dcc9234c6a980/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Ftsvc%2Fvect-tsvc-s1213.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Ftsvc%2Fvect-tsvc-s1213.c?ref=f81970b5f386630b98a33373c23dcc9234c6a980", "patch": "@@ -0,0 +1,40 @@\n+/*  This file is distributed under the University of Illinois Open Source\n+    License. See license.txt for details.  */\n+\n+/* { dg-additional-options \"--param vect-epilogues-nomask=0\" } */\n+/* { dg-require-effective-target vect_float } */\n+\n+#include \"tsvc.h\"\n+\n+real_t s1213(struct args_t * func_args)\n+{\n+//    statement reordering\n+//    dependency needing temporary\n+\n+    initialise_arrays(__func__);\n+\n+    for (int nl = 0; nl < iterations; nl++) {\n+        for (int i = 1; i < LEN_1D-1; i++) {\n+            a[i] = b[i-1]+c[i];\n+            b[i] = a[i+1]*d[i];\n+        }\n+        dummy(a, b, c, d, e, aa, bb, cc, 0.);\n+    }\n+\n+    return calc_checksum(__func__);\n+}\n+\n+int main (int argc, char **argv)\n+{\n+  int n1 = 1;\n+  int n3 = 1;\n+  int* ip;\n+  real_t s1,s2;\n+  init(&ip, &s1, &s2);\n+\n+  run(&s1213, \"s1213\", NULL);\n+\n+  return 0;\n+}\n+\n+/* { dg-final { scan-tree-dump \"vectorized 1 loops\" \"vect\" { xfail *-*-* } } } */"}, {"sha": "0aceeb721f0c8def9ef717387c5cd213d2714d88", "filename": "gcc/testsuite/gcc.dg/vect/tsvc/vect-tsvc-s122.c", "status": "added", "additions": 48, "deletions": 0, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f81970b5f386630b98a33373c23dcc9234c6a980/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Ftsvc%2Fvect-tsvc-s122.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f81970b5f386630b98a33373c23dcc9234c6a980/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Ftsvc%2Fvect-tsvc-s122.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Ftsvc%2Fvect-tsvc-s122.c?ref=f81970b5f386630b98a33373c23dcc9234c6a980", "patch": "@@ -0,0 +1,48 @@\n+/*  This file is distributed under the University of Illinois Open Source\n+    License. See license.txt for details.  */\n+\n+/* { dg-additional-options \"--param vect-epilogues-nomask=0\" } */\n+/* { dg-require-effective-target vect_float } */\n+\n+#include \"tsvc.h\"\n+\n+real_t s122(struct args_t * func_args)\n+{\n+//    induction variable recognition\n+//    variable lower and upper bound, and stride\n+//    reverse data access and jump in data access\n+\n+    struct{int a;int b;} * x = func_args->arg_info;\n+    int n1 = x->a;\n+    int n3 = x->b;\n+\n+    initialise_arrays(__func__);\n+\n+    int j, k;\n+    for (int nl = 0; nl < iterations; nl++) {\n+        j = 1;\n+        k = 0;\n+        for (int i = n1-1; i < LEN_1D; i += n3) {\n+            k += j;\n+            a[i] += b[LEN_1D - k];\n+        }\n+        dummy(a, b, c, d, e, aa, bb, cc, 0.);\n+    }\n+\n+    return calc_checksum(__func__);\n+}\n+\n+int main (int argc, char **argv)\n+{\n+  int n1 = 1;\n+  int n3 = 1;\n+  int* ip;\n+  real_t s1,s2;\n+  init(&ip, &s1, &s2);\n+\n+  run(&s122, \"s122\", &(struct{int a;int b;}){n1, n3});\n+\n+  return 0;\n+}\n+\n+/* { dg-final { scan-tree-dump \"vectorized 1 loops\" \"vect\" { xfail *-*-* } } } */"}, {"sha": "4ecccfd731c42a9189c142b743e38fa9fe8ec3c8", "filename": "gcc/testsuite/gcc.dg/vect/tsvc/vect-tsvc-s1221.c", "status": "added", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f81970b5f386630b98a33373c23dcc9234c6a980/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Ftsvc%2Fvect-tsvc-s1221.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f81970b5f386630b98a33373c23dcc9234c6a980/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Ftsvc%2Fvect-tsvc-s1221.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Ftsvc%2Fvect-tsvc-s1221.c?ref=f81970b5f386630b98a33373c23dcc9234c6a980", "patch": "@@ -0,0 +1,38 @@\n+/*  This file is distributed under the University of Illinois Open Source\n+    License. See license.txt for details.  */\n+\n+/* { dg-additional-options \"--param vect-epilogues-nomask=0\" } */\n+/* { dg-require-effective-target vect_float } */\n+\n+#include \"tsvc.h\"\n+\n+real_t s1221(struct args_t * func_args)\n+{\n+//    run-time symbolic resolution\n+\n+    initialise_arrays(__func__);\n+\n+    for (int nl = 0; nl < iterations; nl++) {\n+        for (int i = 4; i < LEN_1D; i++) {\n+            b[i] = b[i - 4] + a[i];\n+        }\n+        dummy(a, b, c, d, e, aa, bb, cc, 0.);\n+    }\n+\n+    return calc_checksum(__func__);\n+}\n+\n+int main (int argc, char **argv)\n+{\n+  int n1 = 1;\n+  int n3 = 1;\n+  int* ip;\n+  real_t s1,s2;\n+  init(&ip, &s1, &s2);\n+\n+  run(&s1221, \"s1221\", NULL);\n+\n+  return 0;\n+}\n+\n+/* { dg-final { scan-tree-dump-times \"vectorized 1 loops\" 1 \"vect\" } } */\n\\ No newline at end of file"}, {"sha": "adb4da80f8ce231f300981f082c5a267837045a2", "filename": "gcc/testsuite/gcc.dg/vect/tsvc/vect-tsvc-s123.c", "status": "added", "additions": 47, "deletions": 0, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f81970b5f386630b98a33373c23dcc9234c6a980/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Ftsvc%2Fvect-tsvc-s123.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f81970b5f386630b98a33373c23dcc9234c6a980/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Ftsvc%2Fvect-tsvc-s123.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Ftsvc%2Fvect-tsvc-s123.c?ref=f81970b5f386630b98a33373c23dcc9234c6a980", "patch": "@@ -0,0 +1,47 @@\n+/*  This file is distributed under the University of Illinois Open Source\n+    License. See license.txt for details.  */\n+\n+/* { dg-additional-options \"--param vect-epilogues-nomask=0\" } */\n+/* { dg-require-effective-target vect_float } */\n+\n+#include \"tsvc.h\"\n+\n+real_t s123(struct args_t * func_args)\n+{\n+//    induction variable recognition\n+//    induction variable under an if\n+//    not vectorizable, the condition cannot be speculated\n+\n+    initialise_arrays(__func__);\n+\n+    int j;\n+    for (int nl = 0; nl < iterations; nl++) {\n+        j = -1;\n+        for (int i = 0; i < (LEN_1D/2); i++) {\n+            j++;\n+            a[j] = b[i] + d[i] * e[i];\n+            if (c[i] > (real_t)0.) {\n+                j++;\n+                a[j] = c[i] + d[i] * e[i];\n+            }\n+        }\n+        dummy(a, b, c, d, e, aa, bb, cc, 0.);\n+    }\n+\n+    return calc_checksum(__func__);\n+}\n+\n+int main (int argc, char **argv)\n+{\n+  int n1 = 1;\n+  int n3 = 1;\n+  int* ip;\n+  real_t s1,s2;\n+  init(&ip, &s1, &s2);\n+\n+  run(&s123, \"s123\", NULL);\n+\n+  return 0;\n+}\n+\n+/* { dg-final { scan-tree-dump \"vectorized 1 loops\" \"vect\" { xfail *-*-* } } } */"}, {"sha": "cfa2e673d1e4a63a3add1e66a54f17b19d1a256f", "filename": "gcc/testsuite/gcc.dg/vect/tsvc/vect-tsvc-s1232.c", "status": "added", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f81970b5f386630b98a33373c23dcc9234c6a980/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Ftsvc%2Fvect-tsvc-s1232.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f81970b5f386630b98a33373c23dcc9234c6a980/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Ftsvc%2Fvect-tsvc-s1232.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Ftsvc%2Fvect-tsvc-s1232.c?ref=f81970b5f386630b98a33373c23dcc9234c6a980", "patch": "@@ -0,0 +1,41 @@\n+/*  This file is distributed under the University of Illinois Open Source\n+    License. See license.txt for details.  */\n+\n+/* { dg-additional-options \"--param vect-epilogues-nomask=0\" } */\n+/* { dg-require-effective-target vect_float } */\n+\n+#include \"tsvc.h\"\n+\n+real_t s1232(struct args_t * func_args)\n+{\n+//    loop interchange\n+//    interchanging of triangular loops\n+\n+    initialise_arrays(__func__);\n+\n+    for (int nl = 0; nl < 100*(iterations/LEN_2D); nl++) {\n+        for (int j = 0; j < LEN_2D; j++) {\n+            for (int i = j; i < LEN_2D; i++) {\n+                aa[i][j] = bb[i][j] + cc[i][j];\n+            }\n+        }\n+        dummy(a, b, c, d, e, aa, bb, cc, 1.);\n+    }\n+\n+    return calc_checksum(__func__);\n+}\n+\n+int main (int argc, char **argv)\n+{\n+  int n1 = 1;\n+  int n3 = 1;\n+  int* ip;\n+  real_t s1,s2;\n+  init(&ip, &s1, &s2);\n+\n+  run(&s1232, \"s1232\", NULL);\n+\n+  return 0;\n+}\n+\n+/* { dg-final { scan-tree-dump \"vectorized 1 loops\" \"vect\" { xfail *-*-* } } } */"}, {"sha": "6a246f0bcf190829e4bb8f078c5bee1152d1d862", "filename": "gcc/testsuite/gcc.dg/vect/tsvc/vect-tsvc-s124.c", "status": "added", "additions": 47, "deletions": 0, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f81970b5f386630b98a33373c23dcc9234c6a980/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Ftsvc%2Fvect-tsvc-s124.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f81970b5f386630b98a33373c23dcc9234c6a980/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Ftsvc%2Fvect-tsvc-s124.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Ftsvc%2Fvect-tsvc-s124.c?ref=f81970b5f386630b98a33373c23dcc9234c6a980", "patch": "@@ -0,0 +1,47 @@\n+/*  This file is distributed under the University of Illinois Open Source\n+    License. See license.txt for details.  */\n+\n+/* { dg-additional-options \"--param vect-epilogues-nomask=0\" } */\n+/* { dg-require-effective-target vect_float } */\n+\n+#include \"tsvc.h\"\n+\n+real_t s124(struct args_t * func_args)\n+{\n+//    induction variable recognition\n+//    induction variable under both sides of if (same value)\n+\n+    initialise_arrays(__func__);\n+\n+    int j;\n+    for (int nl = 0; nl < iterations; nl++) {\n+        j = -1;\n+        for (int i = 0; i < LEN_1D; i++) {\n+            if (b[i] > (real_t)0.) {\n+                j++;\n+                a[j] = b[i] + d[i] * e[i];\n+            } else {\n+                j++;\n+                a[j] = c[i] + d[i] * e[i];\n+            }\n+        }\n+        dummy(a, b, c, d, e, aa, bb, cc, 0.);\n+    }\n+\n+    return calc_checksum(__func__);\n+}\n+\n+int main (int argc, char **argv)\n+{\n+  int n1 = 1;\n+  int n3 = 1;\n+  int* ip;\n+  real_t s1,s2;\n+  init(&ip, &s1, &s2);\n+\n+  run(&s124, \"s124\", NULL);\n+\n+  return 0;\n+}\n+\n+/* { dg-final { scan-tree-dump \"vectorized 1 loops\" \"vect\" { xfail *-*-* } } } */"}, {"sha": "94a30412df81b9ace9718060c69efab4610b740c", "filename": "gcc/testsuite/gcc.dg/vect/tsvc/vect-tsvc-s1244.c", "status": "added", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f81970b5f386630b98a33373c23dcc9234c6a980/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Ftsvc%2Fvect-tsvc-s1244.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f81970b5f386630b98a33373c23dcc9234c6a980/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Ftsvc%2Fvect-tsvc-s1244.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Ftsvc%2Fvect-tsvc-s1244.c?ref=f81970b5f386630b98a33373c23dcc9234c6a980", "patch": "@@ -0,0 +1,40 @@\n+/*  This file is distributed under the University of Illinois Open Source\n+    License. See license.txt for details.  */\n+\n+/* { dg-additional-options \"--param vect-epilogues-nomask=0\" } */\n+/* { dg-require-effective-target vect_float } */\n+\n+#include \"tsvc.h\"\n+\n+real_t s1244(struct args_t * func_args)\n+{\n+//    node splitting\n+//    cycle with ture and anti dependency\n+\n+    initialise_arrays(__func__);\n+\n+    for (int nl = 0; nl < iterations; nl++) {\n+        for (int i = 0; i < LEN_1D-1; i++) {\n+            a[i] = b[i] + c[i] * c[i] + b[i]*b[i] + c[i];\n+            d[i] = a[i] + a[i+1];\n+        }\n+        dummy(a, b, c, d, e, aa, bb, cc, 0.);\n+    }\n+\n+    return calc_checksum(__func__);\n+}\n+\n+int main (int argc, char **argv)\n+{\n+  int n1 = 1;\n+  int n3 = 1;\n+  int* ip;\n+  real_t s1,s2;\n+  init(&ip, &s1, &s2);\n+\n+  run(&s1244, \"s1244\", NULL);\n+\n+  return 0;\n+}\n+\n+/* { dg-final { scan-tree-dump \"vectorized 1 loops\" \"vect\" { xfail *-*-* } } } */"}, {"sha": "679074300baafc96380d3bb0f795d72c5ed06275", "filename": "gcc/testsuite/gcc.dg/vect/tsvc/vect-tsvc-s125.c", "status": "added", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f81970b5f386630b98a33373c23dcc9234c6a980/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Ftsvc%2Fvect-tsvc-s125.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f81970b5f386630b98a33373c23dcc9234c6a980/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Ftsvc%2Fvect-tsvc-s125.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Ftsvc%2Fvect-tsvc-s125.c?ref=f81970b5f386630b98a33373c23dcc9234c6a980", "patch": "@@ -0,0 +1,44 @@\n+/*  This file is distributed under the University of Illinois Open Source\n+    License. See license.txt for details.  */\n+\n+/* { dg-additional-options \"--param vect-epilogues-nomask=0\" } */\n+/* { dg-require-effective-target vect_float } */\n+\n+#include \"tsvc.h\"\n+\n+real_t s125(struct args_t * func_args)\n+{\n+//    induction variable recognition\n+//    induction variable in two loops; collapsing possible\n+\n+    initialise_arrays(__func__);\n+\n+    int k;\n+    for (int nl = 0; nl < 100*(iterations/(LEN_2D)); nl++) {\n+        k = -1;\n+        for (int i = 0; i < LEN_2D; i++) {\n+            for (int j = 0; j < LEN_2D; j++) {\n+                k++;\n+                flat_2d_array[k] = aa[i][j] + bb[i][j] * cc[i][j];\n+            }\n+        }\n+        dummy(a, b, c, d, e, aa, bb, cc, 0.);\n+    }\n+\n+    return calc_checksum(__func__);\n+}\n+\n+int main (int argc, char **argv)\n+{\n+  int n1 = 1;\n+  int n3 = 1;\n+  int* ip;\n+  real_t s1,s2;\n+  init(&ip, &s1, &s2);\n+\n+  run(&s125, \"s125\", NULL);\n+\n+  return 0;\n+}\n+\n+/* { dg-final { scan-tree-dump-times \"vectorized 1 loops\" 1 \"vect\" } } */\n\\ No newline at end of file"}, {"sha": "b2e099ccfe07662a15aa10b2b975a061098fc29d", "filename": "gcc/testsuite/gcc.dg/vect/tsvc/vect-tsvc-s1251.c", "status": "added", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f81970b5f386630b98a33373c23dcc9234c6a980/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Ftsvc%2Fvect-tsvc-s1251.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f81970b5f386630b98a33373c23dcc9234c6a980/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Ftsvc%2Fvect-tsvc-s1251.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Ftsvc%2Fvect-tsvc-s1251.c?ref=f81970b5f386630b98a33373c23dcc9234c6a980", "patch": "@@ -0,0 +1,42 @@\n+/*  This file is distributed under the University of Illinois Open Source\n+    License. See license.txt for details.  */\n+\n+/* { dg-additional-options \"--param vect-epilogues-nomask=0\" } */\n+/* { dg-require-effective-target vect_float } */\n+\n+#include \"tsvc.h\"\n+\n+real_t s1251(struct args_t * func_args)\n+{\n+//    scalar and array expansion\n+//    scalar expansion\n+\n+    initialise_arrays(__func__);\n+\n+    real_t s;\n+    for (int nl = 0; nl < 4*iterations; nl++) {\n+        for (int i = 0; i < LEN_1D; i++) {\n+            s = b[i]+c[i];\n+            b[i] = a[i]+d[i];\n+            a[i] = s*e[i];\n+        }\n+        dummy(a, b, c, d, e, aa, bb, cc, 0.);\n+    }\n+\n+    return calc_checksum(__func__);\n+}\n+\n+int main (int argc, char **argv)\n+{\n+  int n1 = 1;\n+  int n3 = 1;\n+  int* ip;\n+  real_t s1,s2;\n+  init(&ip, &s1, &s2);\n+\n+  run(&s1251, \"s1251\", NULL);\n+\n+  return 0;\n+}\n+\n+/* { dg-final { scan-tree-dump-times \"vectorized 1 loops\" 1 \"vect\" } } */\n\\ No newline at end of file"}, {"sha": "a1c71b3178333c0f1b6c6f8185b101cd17c5a1e4", "filename": "gcc/testsuite/gcc.dg/vect/tsvc/vect-tsvc-s126.c", "status": "added", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f81970b5f386630b98a33373c23dcc9234c6a980/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Ftsvc%2Fvect-tsvc-s126.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f81970b5f386630b98a33373c23dcc9234c6a980/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Ftsvc%2Fvect-tsvc-s126.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Ftsvc%2Fvect-tsvc-s126.c?ref=f81970b5f386630b98a33373c23dcc9234c6a980", "patch": "@@ -0,0 +1,45 @@\n+/*  This file is distributed under the University of Illinois Open Source\n+    License. See license.txt for details.  */\n+\n+/* { dg-additional-options \"--param vect-epilogues-nomask=0\" } */\n+/* { dg-require-effective-target vect_float } */\n+\n+#include \"tsvc.h\"\n+\n+real_t s126(struct args_t * func_args)\n+{\n+//    induction variable recognition\n+//    induction variable in two loops; recurrence in inner loop\n+\n+    initialise_arrays(__func__);\n+\n+    int k;\n+    for (int nl = 0; nl < 10*(iterations/LEN_2D); nl++) {\n+        k = 1;\n+        for (int i = 0; i < LEN_2D; i++) {\n+            for (int j = 1; j < LEN_2D; j++) {\n+                bb[j][i] = bb[j-1][i] + flat_2d_array[k-1] * cc[j][i];\n+                ++k;\n+            }\n+            ++k;\n+        }\n+        dummy(a, b, c, d, e, aa, bb, cc, 0.);\n+    }\n+\n+    return calc_checksum(__func__);\n+}\n+\n+int main (int argc, char **argv)\n+{\n+  int n1 = 1;\n+  int n3 = 1;\n+  int* ip;\n+  real_t s1,s2;\n+  init(&ip, &s1, &s2);\n+\n+  run(&s126, \"s126\", NULL);\n+\n+  return 0;\n+}\n+\n+/* { dg-final { scan-tree-dump \"vectorized 1 loops\" \"vect\" { xfail *-*-* } } } */"}, {"sha": "6f9a82166499d408bdeb69e73816b347361fa9a5", "filename": "gcc/testsuite/gcc.dg/vect/tsvc/vect-tsvc-s127.c", "status": "added", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f81970b5f386630b98a33373c23dcc9234c6a980/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Ftsvc%2Fvect-tsvc-s127.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f81970b5f386630b98a33373c23dcc9234c6a980/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Ftsvc%2Fvect-tsvc-s127.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Ftsvc%2Fvect-tsvc-s127.c?ref=f81970b5f386630b98a33373c23dcc9234c6a980", "patch": "@@ -0,0 +1,44 @@\n+/*  This file is distributed under the University of Illinois Open Source\n+    License. See license.txt for details.  */\n+\n+/* { dg-additional-options \"--param vect-epilogues-nomask=0\" } */\n+/* { dg-require-effective-target vect_float } */\n+\n+#include \"tsvc.h\"\n+\n+real_t s127(struct args_t * func_args)\n+{\n+//    induction variable recognition\n+//    induction variable with multiple increments\n+\n+    initialise_arrays(__func__);\n+\n+    int j;\n+    for (int nl = 0; nl < 2*iterations; nl++) {\n+        j = -1;\n+        for (int i = 0; i < LEN_1D/2; i++) {\n+            j++;\n+            a[j] = b[i] + c[i] * d[i];\n+            j++;\n+            a[j] = b[i] + d[i] * e[i];\n+        }\n+        dummy(a, b, c, d, e, aa, bb, cc, 0.);\n+    }\n+\n+    return calc_checksum(__func__);\n+}\n+\n+int main (int argc, char **argv)\n+{\n+  int n1 = 1;\n+  int n3 = 1;\n+  int* ip;\n+  real_t s1,s2;\n+  init(&ip, &s1, &s2);\n+\n+  run(&s127, \"s127\", NULL);\n+\n+  return 0;\n+}\n+\n+/* { dg-final { scan-tree-dump-times \"vectorized 1 loops\" 1 \"vect\" } } */\n\\ No newline at end of file"}, {"sha": "4a481c737e3ae8ff96f9e91c1101428b026f050f", "filename": "gcc/testsuite/gcc.dg/vect/tsvc/vect-tsvc-s1279.c", "status": "added", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f81970b5f386630b98a33373c23dcc9234c6a980/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Ftsvc%2Fvect-tsvc-s1279.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f81970b5f386630b98a33373c23dcc9234c6a980/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Ftsvc%2Fvect-tsvc-s1279.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Ftsvc%2Fvect-tsvc-s1279.c?ref=f81970b5f386630b98a33373c23dcc9234c6a980", "patch": "@@ -0,0 +1,43 @@\n+/*  This file is distributed under the University of Illinois Open Source\n+    License. See license.txt for details.  */\n+\n+/* { dg-additional-options \"--param vect-epilogues-nomask=0\" } */\n+/* { dg-require-effective-target vect_float } */\n+\n+#include \"tsvc.h\"\n+\n+real_t s1279(struct args_t * func_args)\n+{\n+//    control flow\n+//    vector if/gotos\n+\n+    initialise_arrays(__func__);\n+\n+    for (int nl = 0; nl < iterations; nl++) {\n+        for (int i = 0; i < LEN_1D; i++) {\n+            if (a[i] < (real_t)0.) {\n+                if (b[i] > a[i]) {\n+                    c[i] += d[i] * e[i];\n+                }\n+            }\n+        }\n+        dummy(a, b, c, d, e, aa, bb, cc, 0.);\n+    }\n+\n+    return calc_checksum(__func__);\n+}\n+\n+int main (int argc, char **argv)\n+{\n+  int n1 = 1;\n+  int n3 = 1;\n+  int* ip;\n+  real_t s1,s2;\n+  init(&ip, &s1, &s2);\n+\n+  run(&s1279, \"s1279\", NULL);\n+\n+  return 0;\n+}\n+\n+/* { dg-final { scan-tree-dump \"vectorized 1 loops\" \"vect\" { xfail *-*-* } } } */"}, {"sha": "7b8874acec3b7ed731c61461c5d422b702519356", "filename": "gcc/testsuite/gcc.dg/vect/tsvc/vect-tsvc-s128.c", "status": "added", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f81970b5f386630b98a33373c23dcc9234c6a980/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Ftsvc%2Fvect-tsvc-s128.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f81970b5f386630b98a33373c23dcc9234c6a980/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Ftsvc%2Fvect-tsvc-s128.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Ftsvc%2Fvect-tsvc-s128.c?ref=f81970b5f386630b98a33373c23dcc9234c6a980", "patch": "@@ -0,0 +1,45 @@\n+/*  This file is distributed under the University of Illinois Open Source\n+    License. See license.txt for details.  */\n+\n+/* { dg-additional-options \"--param vect-epilogues-nomask=0\" } */\n+/* { dg-require-effective-target vect_float } */\n+\n+#include \"tsvc.h\"\n+\n+real_t s128(struct args_t * func_args)\n+{\n+//    induction variables\n+//    coupled induction variables\n+//    jump in data access\n+\n+    initialise_arrays(__func__);\n+\n+    int j, k;\n+    for (int nl = 0; nl < 2*iterations; nl++) {\n+        j = -1;\n+        for (int i = 0; i < LEN_1D/2; i++) {\n+            k = j + 1;\n+            a[i] = b[k] - d[i];\n+            j = k + 1;\n+            b[k] = a[i] + c[k];\n+        }\n+        dummy(a, b, c, d, e, aa, bb, cc, 1.);\n+    }\n+\n+    return calc_checksum(__func__);\n+}\n+\n+int main (int argc, char **argv)\n+{\n+  int n1 = 1;\n+  int n3 = 1;\n+  int* ip;\n+  real_t s1,s2;\n+  init(&ip, &s1, &s2);\n+\n+  run(&s128, \"s128\", NULL);\n+\n+  return 0;\n+}\n+\n+/* { dg-final { scan-tree-dump-times \"vectorized 1 loops\" 1 \"vect\" } } */\n\\ No newline at end of file"}, {"sha": "dba95a8197372d0dfe6ecc80f4957d905a8861ef", "filename": "gcc/testsuite/gcc.dg/vect/tsvc/vect-tsvc-s1281.c", "status": "added", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f81970b5f386630b98a33373c23dcc9234c6a980/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Ftsvc%2Fvect-tsvc-s1281.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f81970b5f386630b98a33373c23dcc9234c6a980/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Ftsvc%2Fvect-tsvc-s1281.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Ftsvc%2Fvect-tsvc-s1281.c?ref=f81970b5f386630b98a33373c23dcc9234c6a980", "patch": "@@ -0,0 +1,43 @@\n+/*  This file is distributed under the University of Illinois Open Source\n+    License. See license.txt for details.  */\n+\n+/* { dg-additional-options \"--param vect-epilogues-nomask=0\" } */\n+/* { dg-require-effective-target vect_float } */\n+\n+#include \"tsvc.h\"\n+\n+real_t s1281(struct args_t * func_args)\n+{\n+//    crossing thresholds\n+//    index set splitting\n+//    reverse data access\n+\n+    initialise_arrays(__func__);\n+\n+    real_t x;\n+    for (int nl = 0; nl < 4*iterations; nl++) {\n+        for (int i = 0; i < LEN_1D; i++) {\n+            x = b[i]*c[i] + a[i]*d[i] + e[i];\n+            a[i] = x-(real_t)1.0;\n+            b[i] = x;\n+        }\n+        dummy(a, b, c, d, e, aa, bb, cc, 0.);\n+    }\n+\n+    return calc_checksum(__func__);\n+}\n+\n+int main (int argc, char **argv)\n+{\n+  int n1 = 1;\n+  int n3 = 1;\n+  int* ip;\n+  real_t s1,s2;\n+  init(&ip, &s1, &s2);\n+\n+  run(&s1281, \"s1281\", NULL);\n+\n+  return 0;\n+}\n+\n+/* { dg-final { scan-tree-dump-times \"vectorized 1 loops\" 1 \"vect\" } } */\n\\ No newline at end of file"}, {"sha": "73f58a7ff4c34dc79306a5e4dab477c18fee23ce", "filename": "gcc/testsuite/gcc.dg/vect/tsvc/vect-tsvc-s131.c", "status": "added", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f81970b5f386630b98a33373c23dcc9234c6a980/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Ftsvc%2Fvect-tsvc-s131.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f81970b5f386630b98a33373c23dcc9234c6a980/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Ftsvc%2Fvect-tsvc-s131.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Ftsvc%2Fvect-tsvc-s131.c?ref=f81970b5f386630b98a33373c23dcc9234c6a980", "patch": "@@ -0,0 +1,40 @@\n+/*  This file is distributed under the University of Illinois Open Source\n+    License. See license.txt for details.  */\n+\n+/* { dg-additional-options \"--param vect-epilogues-nomask=0\" } */\n+/* { dg-require-effective-target vect_float } */\n+\n+#include \"tsvc.h\"\n+\n+real_t s131(struct args_t * func_args)\n+{\n+//    global data flow analysis\n+//    forward substitution\n+\n+    initialise_arrays(__func__);\n+\n+    int m  = 1;\n+    for (int nl = 0; nl < 5*iterations; nl++) {\n+        for (int i = 0; i < LEN_1D - 1; i++) {\n+            a[i] = a[i + m] + b[i];\n+        }\n+        dummy(a, b, c, d, e, aa, bb, cc, 0.);\n+    }\n+\n+    return calc_checksum(__func__);\n+}\n+\n+int main (int argc, char **argv)\n+{\n+  int n1 = 1;\n+  int n3 = 1;\n+  int* ip;\n+  real_t s1,s2;\n+  init(&ip, &s1, &s2);\n+\n+  run(&s131, \"s131\", NULL);\n+\n+  return 0;\n+}\n+\n+/* { dg-final { scan-tree-dump-times \"vectorized 1 loops\" 1 \"vect\" } } */\n\\ No newline at end of file"}, {"sha": "4d2ef4c0922ad57a07f261aa943d2b348f85efd4", "filename": "gcc/testsuite/gcc.dg/vect/tsvc/vect-tsvc-s13110.c", "status": "added", "additions": 51, "deletions": 0, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f81970b5f386630b98a33373c23dcc9234c6a980/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Ftsvc%2Fvect-tsvc-s13110.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f81970b5f386630b98a33373c23dcc9234c6a980/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Ftsvc%2Fvect-tsvc-s13110.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Ftsvc%2Fvect-tsvc-s13110.c?ref=f81970b5f386630b98a33373c23dcc9234c6a980", "patch": "@@ -0,0 +1,51 @@\n+/*  This file is distributed under the University of Illinois Open Source\n+    License. See license.txt for details.  */\n+\n+/* { dg-additional-options \"--param vect-epilogues-nomask=0\" } */\n+/* { dg-require-effective-target vect_float } */\n+\n+#include \"tsvc.h\"\n+\n+real_t s13110(struct args_t * func_args)\n+{\n+//    reductions\n+//    if to max with index reductio 2 dimensions\n+\n+    initialise_arrays(__func__);\n+\n+    int xindex, yindex;\n+    real_t max, chksum;\n+    for (int nl = 0; nl < 100*(iterations/(LEN_2D)); nl++) {\n+        max = aa[(0)][0];\n+        xindex = 0;\n+        yindex = 0;\n+        for (int i = 0; i < LEN_2D; i++) {\n+            for (int j = 0; j < LEN_2D; j++) {\n+                if (aa[i][j] > max) {\n+                    max = aa[i][j];\n+                    xindex = i;\n+                    yindex = j;\n+                }\n+            }\n+        }\n+        chksum = max + (real_t) xindex + (real_t) yindex;\n+        dummy(a, b, c, d, e, aa, bb, cc, chksum);\n+    }\n+\n+    return max + xindex+1 + yindex+1;\n+}\n+\n+int main (int argc, char **argv)\n+{\n+  int n1 = 1;\n+  int n3 = 1;\n+  int* ip;\n+  real_t s1,s2;\n+  init(&ip, &s1, &s2);\n+\n+  run(&s13110, \"s13110\", NULL);\n+\n+  return 0;\n+}\n+\n+/* { dg-final { scan-tree-dump \"vectorized 1 loops\" \"vect\" { xfail *-*-* } } } */"}, {"sha": "c2f5c2f2752f38301197e5b1524eafa9280e8341", "filename": "gcc/testsuite/gcc.dg/vect/tsvc/vect-tsvc-s132.c", "status": "added", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f81970b5f386630b98a33373c23dcc9234c6a980/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Ftsvc%2Fvect-tsvc-s132.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f81970b5f386630b98a33373c23dcc9234c6a980/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Ftsvc%2Fvect-tsvc-s132.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Ftsvc%2Fvect-tsvc-s132.c?ref=f81970b5f386630b98a33373c23dcc9234c6a980", "patch": "@@ -0,0 +1,42 @@\n+/*  This file is distributed under the University of Illinois Open Source\n+    License. See license.txt for details.  */\n+\n+/* { dg-additional-options \"--param vect-epilogues-nomask=0\" } */\n+/* { dg-require-effective-target vect_float } */\n+\n+#include \"tsvc.h\"\n+\n+real_t s132(struct args_t * func_args)\n+{\n+//    global data flow analysis\n+//    loop with multiple dimension ambiguous subscripts\n+\n+    initialise_arrays(__func__);\n+\n+    int m = 0;\n+    int j = m;\n+    int k = m+1;\n+    for (int nl = 0; nl < 400*iterations; nl++) {\n+        for (int i= 1; i < LEN_2D; i++) {\n+            aa[j][i] = aa[k][i-1] + b[i] * c[1];\n+        }\n+        dummy(a, b, c, d, e, aa, bb, cc, 0.);\n+    }\n+\n+    return calc_checksum(__func__);\n+}\n+\n+int main (int argc, char **argv)\n+{\n+  int n1 = 1;\n+  int n3 = 1;\n+  int* ip;\n+  real_t s1,s2;\n+  init(&ip, &s1, &s2);\n+\n+  run(&s132, \"s132\", NULL);\n+\n+  return 0;\n+}\n+\n+/* { dg-final { scan-tree-dump-times \"vectorized 1 loops\" 1 \"vect\" } } */\n\\ No newline at end of file"}, {"sha": "d020f909c0a43b5faf03b16d7e9d3266843ec44c", "filename": "gcc/testsuite/gcc.dg/vect/tsvc/vect-tsvc-s1351.c", "status": "added", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f81970b5f386630b98a33373c23dcc9234c6a980/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Ftsvc%2Fvect-tsvc-s1351.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f81970b5f386630b98a33373c23dcc9234c6a980/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Ftsvc%2Fvect-tsvc-s1351.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Ftsvc%2Fvect-tsvc-s1351.c?ref=f81970b5f386630b98a33373c23dcc9234c6a980", "patch": "@@ -0,0 +1,44 @@\n+/*  This file is distributed under the University of Illinois Open Source\n+    License. See license.txt for details.  */\n+\n+/* { dg-additional-options \"--param vect-epilogues-nomask=0\" } */\n+/* { dg-require-effective-target vect_float } */\n+\n+#include \"tsvc.h\"\n+\n+real_t s1351(struct args_t * func_args)\n+{\n+//    induction pointer recognition\n+\n+    initialise_arrays(__func__);\n+\n+    for (int nl = 0; nl < 8*iterations; nl++) {\n+        real_t* __restrict__ A = a;\n+        real_t* __restrict__ B = b;\n+        real_t* __restrict__ C = c;\n+        for (int i = 0; i < LEN_1D; i++) {\n+            *A = *B+*C;\n+            A++;\n+            B++;\n+            C++;\n+        }\n+        dummy(a, b, c, d, e, aa, bb, cc, 0.);\n+    }\n+\n+    return calc_checksum(__func__);\n+}\n+\n+int main (int argc, char **argv)\n+{\n+  int n1 = 1;\n+  int n3 = 1;\n+  int* ip;\n+  real_t s1,s2;\n+  init(&ip, &s1, &s2);\n+\n+  run(&s1351, \"s1351\", NULL);\n+\n+  return 0;\n+}\n+\n+/* { dg-final { scan-tree-dump-times \"vectorized 1 loops\" 1 \"vect\" } } */\n\\ No newline at end of file"}, {"sha": "b8ef6a6982c970f27f4f3ce264b4475d0d1b720d", "filename": "gcc/testsuite/gcc.dg/vect/tsvc/vect-tsvc-s141.c", "status": "added", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f81970b5f386630b98a33373c23dcc9234c6a980/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Ftsvc%2Fvect-tsvc-s141.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f81970b5f386630b98a33373c23dcc9234c6a980/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Ftsvc%2Fvect-tsvc-s141.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Ftsvc%2Fvect-tsvc-s141.c?ref=f81970b5f386630b98a33373c23dcc9234c6a980", "patch": "@@ -0,0 +1,45 @@\n+/*  This file is distributed under the University of Illinois Open Source\n+    License. See license.txt for details.  */\n+\n+/* { dg-additional-options \"--param vect-epilogues-nomask=0\" } */\n+/* { dg-require-effective-target vect_float } */\n+\n+#include \"tsvc.h\"\n+\n+real_t s141(struct args_t * func_args)\n+{\n+//    nonlinear dependence testing\n+//    walk a row in a symmetric packed array\n+//    element a(i,j) for (int j>i) stored in location j*(j-1)/2+i\n+\n+    initialise_arrays(__func__);\n+\n+    int k;\n+    for (int nl = 0; nl < 200*(iterations/LEN_2D); nl++) {\n+        for (int i = 0; i < LEN_2D; i++) {\n+            k = (i+1) * ((i+1) - 1) / 2 + (i+1)-1;\n+            for (int j = i; j < LEN_2D; j++) {\n+                flat_2d_array[k] += bb[j][i];\n+                k += j+1;\n+            }\n+        }\n+        dummy(a, b, c, d, e, aa, bb, cc, 0.);\n+    }\n+\n+    return calc_checksum(__func__);\n+}\n+\n+int main (int argc, char **argv)\n+{\n+  int n1 = 1;\n+  int n3 = 1;\n+  int* ip;\n+  real_t s1,s2;\n+  init(&ip, &s1, &s2);\n+\n+  run(&s141, \"s141\", NULL);\n+\n+  return 0;\n+}\n+\n+/* { dg-final { scan-tree-dump \"vectorized 1 loops\" \"vect\" { xfail *-*-* } } } */"}, {"sha": "043989fe4c4d71c7f01e3eba09e2d73683533d43", "filename": "gcc/testsuite/gcc.dg/vect/tsvc/vect-tsvc-s1421.c", "status": "added", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f81970b5f386630b98a33373c23dcc9234c6a980/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Ftsvc%2Fvect-tsvc-s1421.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f81970b5f386630b98a33373c23dcc9234c6a980/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Ftsvc%2Fvect-tsvc-s1421.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Ftsvc%2Fvect-tsvc-s1421.c?ref=f81970b5f386630b98a33373c23dcc9234c6a980", "patch": "@@ -0,0 +1,41 @@\n+/*  This file is distributed under the University of Illinois Open Source\n+    License. See license.txt for details.  */\n+\n+/* { dg-additional-options \"--param vect-epilogues-nomask=0\" } */\n+/* { dg-require-effective-target vect_float } */\n+\n+#include \"tsvc.h\"\n+\n+real_t s1421(struct args_t * func_args)\n+{\n+//    storage classes and equivalencing\n+//    equivalence- no overlap\n+\n+    initialise_arrays(__func__);\n+\n+    xx = &b[LEN_1D/2];\n+\n+    for (int nl = 0; nl < 8*iterations; nl++) {\n+        for (int i = 0; i < LEN_1D/2; i++) {\n+            b[i] = xx[i] + a[i];\n+        }\n+        dummy(a, b, c, d, e, aa, bb, cc, 1.);\n+    }\n+\n+    return calc_checksum(__func__);\n+}\n+\n+int main (int argc, char **argv)\n+{\n+  int n1 = 1;\n+  int n3 = 1;\n+  int* ip;\n+  real_t s1,s2;\n+  init(&ip, &s1, &s2);\n+\n+  run(&s1421, \"s1421\", NULL);\n+\n+  return 0;\n+}\n+\n+/* { dg-final { scan-tree-dump-times \"vectorized 1 loops\" 1 \"vect\" } } */\n\\ No newline at end of file"}, {"sha": "46f71814ce8469ca29ff3fefb18c51218bb72873", "filename": "gcc/testsuite/gcc.dg/vect/tsvc/vect-tsvc-s151.c", "status": "added", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f81970b5f386630b98a33373c23dcc9234c6a980/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Ftsvc%2Fvect-tsvc-s151.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f81970b5f386630b98a33373c23dcc9234c6a980/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Ftsvc%2Fvect-tsvc-s151.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Ftsvc%2Fvect-tsvc-s151.c?ref=f81970b5f386630b98a33373c23dcc9234c6a980", "patch": "@@ -0,0 +1,45 @@\n+/*  This file is distributed under the University of Illinois Open Source\n+    License. See license.txt for details.  */\n+\n+/* { dg-additional-options \"--param vect-epilogues-nomask=0\" } */\n+/* { dg-require-effective-target vect_float } */\n+\n+#include \"tsvc.h\"\n+\n+void s151s(real_t a[LEN_1D], real_t b[LEN_1D],  int m)\n+{\n+    for (int i = 0; i < LEN_1D-1; i++) {\n+        a[i] = a[i + m] + b[i];\n+    }\n+}\n+\n+real_t s151(struct args_t * func_args)\n+{\n+//    interprocedural data flow analysis\n+//    passing parameter information into a subroutine\n+\n+    initialise_arrays(__func__);\n+\n+    for (int nl = 0; nl < 5*iterations; nl++) {\n+        s151s(a, b,  1);\n+        dummy(a, b, c, d, e, aa, bb, cc, 0.);\n+    }\n+\n+    return calc_checksum(__func__);\n+}\n+\n+int main (int argc, char **argv)\n+{\n+  int n1 = 1;\n+  int n3 = 1;\n+  int* ip;\n+  real_t s1,s2;\n+  init(&ip, &s1, &s2);\n+\n+  run(&s151, \"s151\", NULL);\n+\n+  return 0;\n+}\n+\n+\n+/* { dg-final { scan-tree-dump-times \"vectorized 1 loops\" 2 \"vect\" } } */\n\\ No newline at end of file"}, {"sha": "d9c4186ba7ab3e1560353e74b6282993000ffbe1", "filename": "gcc/testsuite/gcc.dg/vect/tsvc/vect-tsvc-s152.c", "status": "added", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f81970b5f386630b98a33373c23dcc9234c6a980/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Ftsvc%2Fvect-tsvc-s152.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f81970b5f386630b98a33373c23dcc9234c6a980/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Ftsvc%2Fvect-tsvc-s152.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Ftsvc%2Fvect-tsvc-s152.c?ref=f81970b5f386630b98a33373c23dcc9234c6a980", "patch": "@@ -0,0 +1,46 @@\n+/*  This file is distributed under the University of Illinois Open Source\n+    License. See license.txt for details.  */\n+\n+/* { dg-additional-options \"--param vect-epilogues-nomask=0\" } */\n+/* { dg-require-effective-target vect_float } */\n+\n+#include \"tsvc.h\"\n+\n+void s152s(real_t a[LEN_1D], real_t b[LEN_1D], real_t c[LEN_1D], int i)\n+{\n+    a[i] += b[i] * c[i];\n+}\n+\n+real_t s152(struct args_t * func_args)\n+{\n+//    interprocedural data flow analysis\n+//    collecting information from a subroutine\n+\n+    initialise_arrays(__func__);\n+\n+    for (int nl = 0; nl < iterations; nl++) {\n+        for (int i = 0; i < LEN_1D; i++) {\n+            b[i] = d[i] * e[i];\n+            s152s(a, b, c, i);\n+        }\n+        dummy(a, b, c, d, e, aa, bb, cc, 0.);\n+    }\n+\n+    return calc_checksum(__func__);\n+}\n+\n+int main (int argc, char **argv)\n+{\n+  int n1 = 1;\n+  int n3 = 1;\n+  int* ip;\n+  real_t s1,s2;\n+  init(&ip, &s1, &s2);\n+\n+  run(&s152, \"s152\", NULL);\n+\n+  return 0;\n+}\n+\n+\n+/* { dg-final { scan-tree-dump-times \"vectorized 1 loops\" 1 \"vect\" } } */\n\\ No newline at end of file"}, {"sha": "efdf19395ef9583ca40e69b07beeeecd9bf1f3ef", "filename": "gcc/testsuite/gcc.dg/vect/tsvc/vect-tsvc-s161.c", "status": "added", "additions": 48, "deletions": 0, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f81970b5f386630b98a33373c23dcc9234c6a980/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Ftsvc%2Fvect-tsvc-s161.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f81970b5f386630b98a33373c23dcc9234c6a980/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Ftsvc%2Fvect-tsvc-s161.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Ftsvc%2Fvect-tsvc-s161.c?ref=f81970b5f386630b98a33373c23dcc9234c6a980", "patch": "@@ -0,0 +1,48 @@\n+/*  This file is distributed under the University of Illinois Open Source\n+    License. See license.txt for details.  */\n+\n+/* { dg-additional-options \"--param vect-epilogues-nomask=0\" } */\n+/* { dg-require-effective-target vect_float } */\n+\n+#include \"tsvc.h\"\n+\n+real_t s161(struct args_t * func_args)\n+{\n+//    control flow\n+//    tests for recognition of loop independent dependences\n+//    between statements in mutually exclusive regions.\n+\n+    initialise_arrays(__func__);\n+\n+    for (int nl = 0; nl < iterations/2; nl++) {\n+        for (int i = 0; i < LEN_1D-1; ++i) {\n+            if (b[i] < (real_t)0.) {\n+                goto L20;\n+            }\n+            a[i] = c[i] + d[i] * e[i];\n+            goto L10;\n+L20:\n+            c[i+1] = a[i] + d[i] * d[i];\n+L10:\n+            ;\n+        }\n+        dummy(a, b, c, d, e, aa, bb, cc, 0.);\n+    }\n+\n+    return calc_checksum(__func__);\n+}\n+\n+int main (int argc, char **argv)\n+{\n+  int n1 = 1;\n+  int n3 = 1;\n+  int* ip;\n+  real_t s1,s2;\n+  init(&ip, &s1, &s2);\n+\n+  run(&s161, \"s161\", NULL);\n+\n+  return 0;\n+}\n+\n+/* { dg-final { scan-tree-dump \"vectorized 1 loops\" \"vect\" { xfail *-*-* } } } */"}, {"sha": "521363d66fef3955f6ea82d7a6ea491965a4c18d", "filename": "gcc/testsuite/gcc.dg/vect/tsvc/vect-tsvc-s162.c", "status": "added", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f81970b5f386630b98a33373c23dcc9234c6a980/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Ftsvc%2Fvect-tsvc-s162.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f81970b5f386630b98a33373c23dcc9234c6a980/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Ftsvc%2Fvect-tsvc-s162.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Ftsvc%2Fvect-tsvc-s162.c?ref=f81970b5f386630b98a33373c23dcc9234c6a980", "patch": "@@ -0,0 +1,43 @@\n+/*  This file is distributed under the University of Illinois Open Source\n+    License. See license.txt for details.  */\n+\n+/* { dg-additional-options \"--param vect-epilogues-nomask=0\" } */\n+/* { dg-require-effective-target vect_float } */\n+\n+#include \"tsvc.h\"\n+\n+real_t s162(struct args_t * func_args)\n+{\n+//    control flow\n+//    deriving assertions\n+\n+    int k = *(int*)func_args->arg_info;\n+\n+    initialise_arrays(__func__);\n+\n+    for (int nl = 0; nl < iterations; nl++) {\n+        if (k > 0) {\n+            for (int i = 0; i < LEN_1D-1; i++) {\n+                a[i] = a[i + k] + b[i] * c[i];\n+            }\n+        }\n+        dummy(a, b, c, d, e, aa, bb, cc, 0.);\n+    }\n+\n+    return calc_checksum(__func__);\n+}\n+\n+int main (int argc, char **argv)\n+{\n+  int n1 = 1;\n+  int n3 = 1;\n+  int* ip;\n+  real_t s1,s2;\n+  init(&ip, &s1, &s2);\n+\n+  run(&s162, \"s162\", &n1);\n+\n+  return 0;\n+}\n+\n+/* { dg-final { scan-tree-dump-times \"vectorized 1 loops\" 1 \"vect\" } } */\n\\ No newline at end of file"}, {"sha": "291ec0ad35369daf2d8427be4f1da3592d57527d", "filename": "gcc/testsuite/gcc.dg/vect/tsvc/vect-tsvc-s171.c", "status": "added", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f81970b5f386630b98a33373c23dcc9234c6a980/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Ftsvc%2Fvect-tsvc-s171.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f81970b5f386630b98a33373c23dcc9234c6a980/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Ftsvc%2Fvect-tsvc-s171.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Ftsvc%2Fvect-tsvc-s171.c?ref=f81970b5f386630b98a33373c23dcc9234c6a980", "patch": "@@ -0,0 +1,41 @@\n+/*  This file is distributed under the University of Illinois Open Source\n+    License. See license.txt for details.  */\n+\n+/* { dg-additional-options \"--param vect-epilogues-nomask=0\" } */\n+/* { dg-require-effective-target vect_float } */\n+\n+#include \"tsvc.h\"\n+\n+real_t s171(struct args_t * func_args)\n+{\n+//    symbolics\n+//    symbolic dependence tests\n+\n+    int inc = *(int*)func_args->arg_info;\n+\n+    initialise_arrays(__func__);\n+\n+    for (int nl = 0; nl < iterations; nl++) {\n+        for (int i = 0; i < LEN_1D; i++) {\n+            a[i * inc] += b[i];\n+        }\n+        dummy(a, b, c, d, e, aa, bb, cc, 0.);\n+    }\n+\n+    return calc_checksum(__func__);\n+}\n+\n+int main (int argc, char **argv)\n+{\n+  int n1 = 1;\n+  int n3 = 1;\n+  int* ip;\n+  real_t s1,s2;\n+  init(&ip, &s1, &s2);\n+\n+  run(&s171, \"s171\", &n1);\n+\n+  return 0;\n+}\n+\n+/* { dg-final { scan-tree-dump-times \"vectorized 1 loops\" 1 \"vect\" } } */\n\\ No newline at end of file"}, {"sha": "077f6e3810c636f4e25b01fd212b8491b41742cb", "filename": "gcc/testsuite/gcc.dg/vect/tsvc/vect-tsvc-s172.c", "status": "added", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f81970b5f386630b98a33373c23dcc9234c6a980/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Ftsvc%2Fvect-tsvc-s172.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f81970b5f386630b98a33373c23dcc9234c6a980/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Ftsvc%2Fvect-tsvc-s172.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Ftsvc%2Fvect-tsvc-s172.c?ref=f81970b5f386630b98a33373c23dcc9234c6a980", "patch": "@@ -0,0 +1,43 @@\n+/*  This file is distributed under the University of Illinois Open Source\n+    License. See license.txt for details.  */\n+\n+/* { dg-additional-options \"--param vect-epilogues-nomask=0\" } */\n+/* { dg-require-effective-target vect_float } */\n+\n+#include \"tsvc.h\"\n+\n+real_t s172(struct args_t * func_args)\n+{\n+//    symbolics\n+//    vectorizable if n3 .ne. 0\n+\n+    struct{int a;int b;} * x = func_args->arg_info;\n+    int n1 = x->a;\n+    int n3 = x->b;\n+\n+    initialise_arrays(__func__);\n+\n+    for (int nl = 0; nl < iterations; nl++) {\n+        for (int i = n1-1; i < LEN_1D; i += n3) {\n+            a[i] += b[i];\n+        }\n+        dummy(a, b, c, d, e, aa, bb, cc, 0.);\n+    }\n+\n+    return calc_checksum(__func__);\n+}\n+\n+int main (int argc, char **argv)\n+{\n+  int n1 = 1;\n+  int n3 = 1;\n+  int* ip;\n+  real_t s1,s2;\n+  init(&ip, &s1, &s2);\n+\n+  run(&s172, \"s172\", &(struct{int a;int b;}){n1, n3});\n+\n+  return 0;\n+}\n+\n+/* { dg-final { scan-tree-dump \"vectorized 1 loops\" \"vect\" { xfail *-*-* } } } */"}, {"sha": "4bd166b9a0da6de30fc7ad25cbade446d093ec96", "filename": "gcc/testsuite/gcc.dg/vect/tsvc/vect-tsvc-s173.c", "status": "added", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f81970b5f386630b98a33373c23dcc9234c6a980/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Ftsvc%2Fvect-tsvc-s173.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f81970b5f386630b98a33373c23dcc9234c6a980/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Ftsvc%2Fvect-tsvc-s173.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Ftsvc%2Fvect-tsvc-s173.c?ref=f81970b5f386630b98a33373c23dcc9234c6a980", "patch": "@@ -0,0 +1,40 @@\n+/*  This file is distributed under the University of Illinois Open Source\n+    License. See license.txt for details.  */\n+\n+/* { dg-additional-options \"--param vect-epilogues-nomask=0\" } */\n+/* { dg-require-effective-target vect_float } */\n+\n+#include \"tsvc.h\"\n+\n+real_t s173(struct args_t * func_args)\n+{\n+//    symbolics\n+//    expression in loop bounds and subscripts\n+\n+    initialise_arrays(__func__);\n+\n+    int k = LEN_1D/2;\n+    for (int nl = 0; nl < 10*iterations; nl++) {\n+        for (int i = 0; i < LEN_1D/2; i++) {\n+            a[i+k] = a[i] + b[i];\n+        }\n+        dummy(a, b, c, d, e, aa, bb, cc, 0.);\n+    }\n+\n+    return calc_checksum(__func__);\n+}\n+\n+int main (int argc, char **argv)\n+{\n+  int n1 = 1;\n+  int n3 = 1;\n+  int* ip;\n+  real_t s1,s2;\n+  init(&ip, &s1, &s2);\n+\n+  run(&s173, \"s173\", NULL);\n+\n+  return 0;\n+}\n+\n+/* { dg-final { scan-tree-dump-times \"vectorized 1 loops\" 1 \"vect\" } } */\n\\ No newline at end of file"}, {"sha": "a4df4da265b35cf52935692c1468441bfe9f3141", "filename": "gcc/testsuite/gcc.dg/vect/tsvc/vect-tsvc-s174.c", "status": "added", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f81970b5f386630b98a33373c23dcc9234c6a980/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Ftsvc%2Fvect-tsvc-s174.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f81970b5f386630b98a33373c23dcc9234c6a980/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Ftsvc%2Fvect-tsvc-s174.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Ftsvc%2Fvect-tsvc-s174.c?ref=f81970b5f386630b98a33373c23dcc9234c6a980", "patch": "@@ -0,0 +1,41 @@\n+/*  This file is distributed under the University of Illinois Open Source\n+    License. See license.txt for details.  */\n+\n+/* { dg-additional-options \"--param vect-epilogues-nomask=0\" } */\n+/* { dg-require-effective-target vect_float } */\n+\n+#include \"tsvc.h\"\n+\n+real_t s174(struct args_t * func_args)\n+{\n+//    symbolics\n+//    loop with subscript that may seem ambiguous\n+\n+    int M = *(int*)func_args->arg_info;\n+\n+    initialise_arrays(__func__);\n+\n+    for (int nl = 0; nl < 10*iterations; nl++) {\n+        for (int i = 0; i < M; i++) {\n+            a[i+M] = a[i] + b[i];\n+        }\n+        dummy(a, b, c, d, e, aa, bb, cc, 0.);\n+    }\n+\n+    return calc_checksum(__func__);\n+}\n+\n+int main (int argc, char **argv)\n+{\n+  int n1 = 1;\n+  int n3 = 1;\n+  int* ip;\n+  real_t s1,s2;\n+  init(&ip, &s1, &s2);\n+\n+  run(&s174, \"s174\", &(struct{int a;}){LEN_1D/2});\n+\n+  return 0;\n+}\n+\n+/* { dg-final { scan-tree-dump-times \"vectorized 1 loops\" 1 \"vect\" } } */\n\\ No newline at end of file"}, {"sha": "4bfb854eb8bcc48402c3ee14c541db93ee9888cb", "filename": "gcc/testsuite/gcc.dg/vect/tsvc/vect-tsvc-s175.c", "status": "added", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f81970b5f386630b98a33373c23dcc9234c6a980/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Ftsvc%2Fvect-tsvc-s175.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f81970b5f386630b98a33373c23dcc9234c6a980/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Ftsvc%2Fvect-tsvc-s175.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Ftsvc%2Fvect-tsvc-s175.c?ref=f81970b5f386630b98a33373c23dcc9234c6a980", "patch": "@@ -0,0 +1,41 @@\n+/*  This file is distributed under the University of Illinois Open Source\n+    License. See license.txt for details.  */\n+\n+/* { dg-additional-options \"--param vect-epilogues-nomask=0\" } */\n+/* { dg-require-effective-target vect_float } */\n+\n+#include \"tsvc.h\"\n+\n+real_t s175(struct args_t * func_args)\n+{\n+//    symbolics\n+//    symbolic dependence tests\n+\n+    int inc = *(int*)func_args->arg_info;\n+\n+    initialise_arrays(__func__);\n+\n+    for (int nl = 0; nl < iterations; nl++) {\n+        for (int i = 0; i < LEN_1D-1; i += inc) {\n+            a[i] = a[i + inc] + b[i];\n+        }\n+        dummy(a, b, c, d, e, aa, bb, cc, 0.);\n+    }\n+\n+    return calc_checksum(__func__);\n+}\n+\n+int main (int argc, char **argv)\n+{\n+  int n1 = 1;\n+  int n3 = 1;\n+  int* ip;\n+  real_t s1,s2;\n+  init(&ip, &s1, &s2);\n+\n+  run(&s175, \"s175\", &n1);\n+\n+  return 0;\n+}\n+\n+/* { dg-final { scan-tree-dump \"vectorized 1 loops\" \"vect\" { xfail *-*-* } } } */"}, {"sha": "79faf7fdb9e4dfdda43f943955b0b169c443ee58", "filename": "gcc/testsuite/gcc.dg/vect/tsvc/vect-tsvc-s176.c", "status": "added", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f81970b5f386630b98a33373c23dcc9234c6a980/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Ftsvc%2Fvect-tsvc-s176.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f81970b5f386630b98a33373c23dcc9234c6a980/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Ftsvc%2Fvect-tsvc-s176.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Ftsvc%2Fvect-tsvc-s176.c?ref=f81970b5f386630b98a33373c23dcc9234c6a980", "patch": "@@ -0,0 +1,42 @@\n+/*  This file is distributed under the University of Illinois Open Source\n+    License. See license.txt for details.  */\n+\n+/* { dg-additional-options \"--param vect-epilogues-nomask=0\" } */\n+/* { dg-require-effective-target vect_float } */\n+\n+#include \"tsvc.h\"\n+\n+real_t s176(struct args_t * func_args)\n+{\n+//    symbolics\n+//    convolution\n+\n+    initialise_arrays(__func__);\n+\n+    int m = LEN_1D/2;\n+    for (int nl = 0; nl < 4*(iterations/LEN_1D); nl++) {\n+        for (int j = 0; j < (LEN_1D/2); j++) {\n+            for (int i = 0; i < m; i++) {\n+                a[i] += b[i+m-j-1] * c[j];\n+            }\n+        }\n+        dummy(a, b, c, d, e, aa, bb, cc, 0.);\n+    }\n+\n+    return calc_checksum(__func__);\n+}\n+\n+int main (int argc, char **argv)\n+{\n+  int n1 = 1;\n+  int n3 = 1;\n+  int* ip;\n+  real_t s1,s2;\n+  init(&ip, &s1, &s2);\n+\n+  run(&s176, \"s176\", NULL);\n+\n+  return 0;\n+}\n+\n+/* { dg-final { scan-tree-dump \"vectorized 1 loops\" \"vect\" { xfail *-*-* } } } */"}, {"sha": "ad6e586a9e0c0cc75f5b7e327766ba7d0fb1f5be", "filename": "gcc/testsuite/gcc.dg/vect/tsvc/vect-tsvc-s2101.c", "status": "added", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f81970b5f386630b98a33373c23dcc9234c6a980/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Ftsvc%2Fvect-tsvc-s2101.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f81970b5f386630b98a33373c23dcc9234c6a980/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Ftsvc%2Fvect-tsvc-s2101.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Ftsvc%2Fvect-tsvc-s2101.c?ref=f81970b5f386630b98a33373c23dcc9234c6a980", "patch": "@@ -0,0 +1,40 @@\n+/*  This file is distributed under the University of Illinois Open Source\n+    License. See license.txt for details.  */\n+\n+/* { dg-additional-options \"--param vect-epilogues-nomask=0\" } */\n+/* { dg-require-effective-target vect_float } */\n+\n+#include \"tsvc.h\"\n+\n+real_t s2101(struct args_t * func_args)\n+{\n+//    diagonals\n+//    main diagonal calculation\n+//    jump in data access\n+\n+    initialise_arrays(__func__);\n+\n+    for (int nl = 0; nl < 10*iterations; nl++) {\n+        for (int i = 0; i < LEN_2D; i++) {\n+            aa[i][i] += bb[i][i] * cc[i][i];\n+        }\n+        dummy(a, b, c, d, e, aa, bb, cc, 0.);\n+    }\n+\n+    return calc_checksum(__func__);\n+}\n+\n+int main (int argc, char **argv)\n+{\n+  int n1 = 1;\n+  int n3 = 1;\n+  int* ip;\n+  real_t s1,s2;\n+  init(&ip, &s1, &s2);\n+\n+  run(&s2101, \"s2101\", NULL);\n+\n+  return 0;\n+}\n+\n+/* { dg-final { scan-tree-dump-times \"vectorized 1 loops\" 1 \"vect\" } } */\n\\ No newline at end of file"}, {"sha": "dd00eb83c32c7b5e04bdcf865c70571bcce92669", "filename": "gcc/testsuite/gcc.dg/vect/tsvc/vect-tsvc-s2102.c", "status": "added", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f81970b5f386630b98a33373c23dcc9234c6a980/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Ftsvc%2Fvect-tsvc-s2102.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f81970b5f386630b98a33373c23dcc9234c6a980/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Ftsvc%2Fvect-tsvc-s2102.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Ftsvc%2Fvect-tsvc-s2102.c?ref=f81970b5f386630b98a33373c23dcc9234c6a980", "patch": "@@ -0,0 +1,42 @@\n+/*  This file is distributed under the University of Illinois Open Source\n+    License. See license.txt for details.  */\n+\n+/* { dg-additional-options \"--param vect-epilogues-nomask=0\" } */\n+/* { dg-require-effective-target vect_float } */\n+\n+#include \"tsvc.h\"\n+\n+real_t s2102(struct args_t * func_args)\n+{\n+//    diagonals\n+//    identity matrix, best results vectorize both inner and outer loops\n+\n+    initialise_arrays(__func__);\n+\n+    for (int nl = 0; nl < 100*(iterations/LEN_2D); nl++) {\n+        for (int i = 0; i < LEN_2D; i++) {\n+            for (int j = 0; j < LEN_2D; j++) {\n+                aa[j][i] = (real_t)0.;\n+            }\n+            aa[i][i] = (real_t)1.;\n+        }\n+        dummy(a, b, c, d, e, aa, bb, cc, 0.);\n+    }\n+\n+    return calc_checksum(__func__);\n+}\n+\n+int main (int argc, char **argv)\n+{\n+  int n1 = 1;\n+  int n3 = 1;\n+  int* ip;\n+  real_t s1,s2;\n+  init(&ip, &s1, &s2);\n+\n+  run(&s2102, \"s2102\", NULL);\n+\n+  return 0;\n+}\n+\n+/* { dg-final { scan-tree-dump-times \"vectorized 1 loops\" 1 \"vect\" } } */"}, {"sha": "50533223904e1ddba35c51a722936124bd49405e", "filename": "gcc/testsuite/gcc.dg/vect/tsvc/vect-tsvc-s211.c", "status": "added", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f81970b5f386630b98a33373c23dcc9234c6a980/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Ftsvc%2Fvect-tsvc-s211.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f81970b5f386630b98a33373c23dcc9234c6a980/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Ftsvc%2Fvect-tsvc-s211.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Ftsvc%2Fvect-tsvc-s211.c?ref=f81970b5f386630b98a33373c23dcc9234c6a980", "patch": "@@ -0,0 +1,40 @@\n+/*  This file is distributed under the University of Illinois Open Source\n+    License. See license.txt for details.  */\n+\n+/* { dg-additional-options \"--param vect-epilogues-nomask=0\" } */\n+/* { dg-require-effective-target vect_float } */\n+\n+#include \"tsvc.h\"\n+\n+real_t s211(struct args_t * func_args)\n+{\n+//    statement reordering\n+//    statement reordering allows vectorization\n+\n+    initialise_arrays(__func__);\n+\n+    for (int nl = 0; nl < iterations; nl++) {\n+        for (int i = 1; i < LEN_1D-1; i++) {\n+            a[i] = b[i - 1] + c[i] * d[i];\n+            b[i] = b[i + 1] - e[i] * d[i];\n+        }\n+        dummy(a, b, c, d, e, aa, bb, cc, 0.);\n+    }\n+\n+    return calc_checksum(__func__);\n+}\n+\n+int main (int argc, char **argv)\n+{\n+  int n1 = 1;\n+  int n3 = 1;\n+  int* ip;\n+  real_t s1,s2;\n+  init(&ip, &s1, &s2);\n+\n+  run(&s211, \"s211\", NULL);\n+\n+  return 0;\n+}\n+\n+/* { dg-final { scan-tree-dump \"vectorized 1 loops\" \"vect\" { xfail *-*-* } } } */"}, {"sha": "42ff35f3cf3c9437ea2c497dce24a4d32727b2e6", "filename": "gcc/testsuite/gcc.dg/vect/tsvc/vect-tsvc-s2111.c", "status": "added", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f81970b5f386630b98a33373c23dcc9234c6a980/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Ftsvc%2Fvect-tsvc-s2111.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f81970b5f386630b98a33373c23dcc9234c6a980/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Ftsvc%2Fvect-tsvc-s2111.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Ftsvc%2Fvect-tsvc-s2111.c?ref=f81970b5f386630b98a33373c23dcc9234c6a980", "patch": "@@ -0,0 +1,40 @@\n+/*  This file is distributed under the University of Illinois Open Source\n+    License. See license.txt for details.  */\n+\n+/* { dg-additional-options \"--param vect-epilogues-nomask=0\" } */\n+/* { dg-require-effective-target vect_float } */\n+\n+#include \"tsvc.h\"\n+\n+real_t s2111(struct args_t * func_args)\n+{\n+//    wavefronts, it will make jump in data access\n+\n+    initialise_arrays(__func__);\n+\n+    for (int nl = 0; nl < 100*(iterations/(LEN_2D)); nl++) {\n+        for (int j = 1; j < LEN_2D; j++) {\n+            for (int i = 1; i < LEN_2D; i++) {\n+                aa[j][i] = (aa[j][i-1] + aa[j-1][i])/1.9;\n+            }\n+        }\n+        dummy(a, b, c, d, e, aa, bb, cc, 0.);\n+    }\n+\n+    return calc_checksum(__func__);\n+}\n+\n+int main (int argc, char **argv)\n+{\n+  int n1 = 1;\n+  int n3 = 1;\n+  int* ip;\n+  real_t s1,s2;\n+  init(&ip, &s1, &s2);\n+\n+  run(&s2111, \"s2111\", NULL);\n+\n+  return 0;\n+}\n+\n+/* { dg-final { scan-tree-dump \"vectorized 1 loops\" \"vect\" { xfail *-*-* } } } */"}, {"sha": "366b6780b844de9ea248b323fa04fc48df8ccb7f", "filename": "gcc/testsuite/gcc.dg/vect/tsvc/vect-tsvc-s212.c", "status": "added", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f81970b5f386630b98a33373c23dcc9234c6a980/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Ftsvc%2Fvect-tsvc-s212.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f81970b5f386630b98a33373c23dcc9234c6a980/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Ftsvc%2Fvect-tsvc-s212.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Ftsvc%2Fvect-tsvc-s212.c?ref=f81970b5f386630b98a33373c23dcc9234c6a980", "patch": "@@ -0,0 +1,40 @@\n+/*  This file is distributed under the University of Illinois Open Source\n+    License. See license.txt for details.  */\n+\n+/* { dg-additional-options \"--param vect-epilogues-nomask=0\" } */\n+/* { dg-require-effective-target vect_float } */\n+\n+#include \"tsvc.h\"\n+\n+real_t s212(struct args_t * func_args)\n+{\n+//    statement reordering\n+//    dependency needing temporary\n+\n+    initialise_arrays(__func__);\n+\n+    for (int nl = 0; nl < iterations; nl++) {\n+        for (int i = 0; i < LEN_1D-1; i++) {\n+            a[i] *= c[i];\n+            b[i] += a[i + 1] * d[i];\n+        }\n+        dummy(a, b, c, d, e, aa, bb, cc, 0.);\n+    }\n+\n+    return calc_checksum(__func__);\n+}\n+\n+int main (int argc, char **argv)\n+{\n+  int n1 = 1;\n+  int n3 = 1;\n+  int* ip;\n+  real_t s1,s2;\n+  init(&ip, &s1, &s2);\n+\n+  run(&s212, \"s212\", NULL);\n+\n+  return 0;\n+}\n+\n+/* { dg-final { scan-tree-dump \"vectorized 1 loops\" \"vect\" { xfail *-*-* } } } */"}, {"sha": "7f42c24e0d3a7932655d6baa0e0ab1560ff61b57", "filename": "gcc/testsuite/gcc.dg/vect/tsvc/vect-tsvc-s221.c", "status": "added", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f81970b5f386630b98a33373c23dcc9234c6a980/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Ftsvc%2Fvect-tsvc-s221.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f81970b5f386630b98a33373c23dcc9234c6a980/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Ftsvc%2Fvect-tsvc-s221.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Ftsvc%2Fvect-tsvc-s221.c?ref=f81970b5f386630b98a33373c23dcc9234c6a980", "patch": "@@ -0,0 +1,40 @@\n+/*  This file is distributed under the University of Illinois Open Source\n+    License. See license.txt for details.  */\n+\n+/* { dg-additional-options \"--param vect-epilogues-nomask=0\" } */\n+/* { dg-require-effective-target vect_float } */\n+\n+#include \"tsvc.h\"\n+\n+real_t s221(struct args_t * func_args)\n+{\n+//    loop distribution\n+//    loop that is partially recursive\n+\n+    initialise_arrays(__func__);\n+\n+    for (int nl = 0; nl < iterations/2; nl++) {\n+        for (int i = 1; i < LEN_1D; i++) {\n+            a[i] += c[i] * d[i];\n+            b[i] = b[i - 1] + a[i] + d[i];\n+        }\n+        dummy(a, b, c, d, e, aa, bb, cc, 0.);\n+    }\n+\n+    return calc_checksum(__func__);\n+}\n+\n+int main (int argc, char **argv)\n+{\n+  int n1 = 1;\n+  int n3 = 1;\n+  int* ip;\n+  real_t s1,s2;\n+  init(&ip, &s1, &s2);\n+\n+  run(&s221, \"s221\", NULL);\n+\n+  return 0;\n+}\n+\n+/* { dg-final { scan-tree-dump \"vectorized 1 loops\" \"vect\" { xfail *-*-* } } } */"}, {"sha": "0cdb8cd0fe8c8c76a6815366150b70506277d5a8", "filename": "gcc/testsuite/gcc.dg/vect/tsvc/vect-tsvc-s222.c", "status": "added", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f81970b5f386630b98a33373c23dcc9234c6a980/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Ftsvc%2Fvect-tsvc-s222.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f81970b5f386630b98a33373c23dcc9234c6a980/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Ftsvc%2Fvect-tsvc-s222.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Ftsvc%2Fvect-tsvc-s222.c?ref=f81970b5f386630b98a33373c23dcc9234c6a980", "patch": "@@ -0,0 +1,41 @@\n+/*  This file is distributed under the University of Illinois Open Source\n+    License. See license.txt for details.  */\n+\n+/* { dg-additional-options \"--param vect-epilogues-nomask=0\" } */\n+/* { dg-require-effective-target vect_float } */\n+\n+#include \"tsvc.h\"\n+\n+real_t s222(struct args_t * func_args)\n+{\n+//    loop distribution\n+//    partial loop vectorizatio recurrence in middle\n+\n+    initialise_arrays(__func__);\n+\n+    for (int nl = 0; nl < iterations/2; nl++) {\n+        for (int i = 1; i < LEN_1D; i++) {\n+            a[i] += b[i] * c[i];\n+            e[i] = e[i - 1] * e[i - 1];\n+            a[i] -= b[i] * c[i];\n+        }\n+        dummy(a, b, c, d, e, aa, bb, cc, 0.);\n+    }\n+\n+    return calc_checksum(__func__);\n+}\n+\n+int main (int argc, char **argv)\n+{\n+  int n1 = 1;\n+  int n3 = 1;\n+  int* ip;\n+  real_t s1,s2;\n+  init(&ip, &s1, &s2);\n+\n+  run(&s222, \"s222\", NULL);\n+\n+  return 0;\n+}\n+\n+/* { dg-final { scan-tree-dump \"vectorized 1 loops\" \"vect\" { xfail *-*-* } } } */"}, {"sha": "c367c214ca742c83307da79ad4fdd881c7d829a1", "filename": "gcc/testsuite/gcc.dg/vect/tsvc/vect-tsvc-s2233.c", "status": "added", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f81970b5f386630b98a33373c23dcc9234c6a980/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Ftsvc%2Fvect-tsvc-s2233.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f81970b5f386630b98a33373c23dcc9234c6a980/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Ftsvc%2Fvect-tsvc-s2233.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Ftsvc%2Fvect-tsvc-s2233.c?ref=f81970b5f386630b98a33373c23dcc9234c6a980", "patch": "@@ -0,0 +1,44 @@\n+/*  This file is distributed under the University of Illinois Open Source\n+    License. See license.txt for details.  */\n+\n+/* { dg-additional-options \"--param vect-epilogues-nomask=0\" } */\n+/* { dg-require-effective-target vect_float } */\n+\n+#include \"tsvc.h\"\n+\n+real_t s2233(struct args_t * func_args)\n+{\n+//    loop interchange\n+//    interchanging with one of two inner loops\n+\n+    initialise_arrays(__func__);\n+\n+    for (int nl = 0; nl < 100*(iterations/LEN_2D); nl++) {\n+        for (int i = 1; i < LEN_2D; i++) {\n+            for (int j = 1; j < LEN_2D; j++) {\n+                aa[j][i] = aa[j-1][i] + cc[j][i];\n+            }\n+            for (int j = 1; j < LEN_2D; j++) {\n+                bb[i][j] = bb[i-1][j] + cc[i][j];\n+            }\n+        }\n+        dummy(a, b, c, d, e, aa, bb, cc, 0.);\n+    }\n+\n+    return calc_checksum(__func__);\n+}\n+\n+int main (int argc, char **argv)\n+{\n+  int n1 = 1;\n+  int n3 = 1;\n+  int* ip;\n+  real_t s1,s2;\n+  init(&ip, &s1, &s2);\n+\n+  run(&s2233, \"s2233\", NULL);\n+\n+  return 0;\n+}\n+\n+/* { dg-final { scan-tree-dump-times \"vectorized 1 loops\" 1 \"vect\" } } */\n\\ No newline at end of file"}, {"sha": "9b0ca7447dd3283de59207a7f820f0e712411095", "filename": "gcc/testsuite/gcc.dg/vect/tsvc/vect-tsvc-s2244.c", "status": "added", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f81970b5f386630b98a33373c23dcc9234c6a980/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Ftsvc%2Fvect-tsvc-s2244.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f81970b5f386630b98a33373c23dcc9234c6a980/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Ftsvc%2Fvect-tsvc-s2244.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Ftsvc%2Fvect-tsvc-s2244.c?ref=f81970b5f386630b98a33373c23dcc9234c6a980", "patch": "@@ -0,0 +1,40 @@\n+/*  This file is distributed under the University of Illinois Open Source\n+    License. See license.txt for details.  */\n+\n+/* { dg-additional-options \"--param vect-epilogues-nomask=0\" } */\n+/* { dg-require-effective-target vect_float } */\n+\n+#include \"tsvc.h\"\n+\n+real_t s2244(struct args_t * func_args)\n+{\n+//    node splitting\n+//    cycle with ture and anti dependency\n+\n+    initialise_arrays(__func__);\n+\n+    for (int nl = 0; nl < iterations; nl++) {\n+        for (int i = 0; i < LEN_1D-1; i++) {\n+            a[i+1] = b[i] + e[i];\n+            a[i] = b[i] + c[i];\n+        }\n+        dummy(a, b, c, d, e, aa, bb, cc, 0.);\n+    }\n+\n+    return calc_checksum(__func__);\n+}\n+\n+int main (int argc, char **argv)\n+{\n+  int n1 = 1;\n+  int n3 = 1;\n+  int* ip;\n+  real_t s1,s2;\n+  init(&ip, &s1, &s2);\n+\n+  run(&s2244, \"s2244\", NULL);\n+\n+  return 0;\n+}\n+\n+/* { dg-final { scan-tree-dump-times \"vectorized 1 loops\" 1 \"vect\" } } */\n\\ No newline at end of file"}, {"sha": "980696bf7de861efe0102206464eec86b5f69c08", "filename": "gcc/testsuite/gcc.dg/vect/tsvc/vect-tsvc-s2251.c", "status": "added", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f81970b5f386630b98a33373c23dcc9234c6a980/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Ftsvc%2Fvect-tsvc-s2251.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f81970b5f386630b98a33373c23dcc9234c6a980/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Ftsvc%2Fvect-tsvc-s2251.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Ftsvc%2Fvect-tsvc-s2251.c?ref=f81970b5f386630b98a33373c23dcc9234c6a980", "patch": "@@ -0,0 +1,42 @@\n+/*  This file is distributed under the University of Illinois Open Source\n+    License. See license.txt for details.  */\n+\n+/* { dg-additional-options \"--param vect-epilogues-nomask=0\" } */\n+/* { dg-require-effective-target vect_float } */\n+\n+#include \"tsvc.h\"\n+\n+real_t s2251(struct args_t * func_args)\n+{\n+//    scalar and array expansion\n+//    scalar expansion\n+\n+    initialise_arrays(__func__);\n+\n+    for (int nl = 0; nl < iterations; nl++) {\n+        real_t s = (real_t)0.0;\n+        for (int i = 0; i < LEN_1D; i++) {\n+            a[i] = s*e[i];\n+            s = b[i]+c[i];\n+            b[i] = a[i]+d[i];\n+        }\n+        dummy(a, b, c, d, e, aa, bb, cc, 0.);\n+    }\n+\n+    return calc_checksum(__func__);\n+}\n+\n+int main (int argc, char **argv)\n+{\n+  int n1 = 1;\n+  int n3 = 1;\n+  int* ip;\n+  real_t s1,s2;\n+  init(&ip, &s1, &s2);\n+\n+  run(&s2251, \"s2251\", NULL);\n+\n+  return 0;\n+}\n+\n+/* { dg-final { scan-tree-dump \"vectorized 1 loops\" \"vect\" { xfail *-*-* } } } */"}, {"sha": "e182b83089e422decb1b1e4b07073ecf6d642d69", "filename": "gcc/testsuite/gcc.dg/vect/tsvc/vect-tsvc-s2275.c", "status": "added", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f81970b5f386630b98a33373c23dcc9234c6a980/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Ftsvc%2Fvect-tsvc-s2275.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f81970b5f386630b98a33373c23dcc9234c6a980/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Ftsvc%2Fvect-tsvc-s2275.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Ftsvc%2Fvect-tsvc-s2275.c?ref=f81970b5f386630b98a33373c23dcc9234c6a980", "patch": "@@ -0,0 +1,41 @@\n+/*  This file is distributed under the University of Illinois Open Source\n+    License. See license.txt for details.  */\n+\n+/* { dg-additional-options \"--param vect-epilogues-nomask=0\" } */\n+/* { dg-require-effective-target vect_float } */\n+\n+#include \"tsvc.h\"\n+\n+real_t s2275(struct args_t * func_args)\n+{\n+//    loop distribution is needed to be able to interchange\n+\n+    initialise_arrays(__func__);\n+\n+    for (int nl = 0; nl < 100*(iterations/LEN_2D); nl++) {\n+        for (int i = 0; i < LEN_2D; i++) {\n+            for (int j = 0; j < LEN_2D; j++) {\n+                aa[j][i] = aa[j][i] + bb[j][i] * cc[j][i];\n+            }\n+            a[i] = b[i] + c[i] * d[i];\n+        }\n+        dummy(a, b, c, d, e, aa, bb, cc, 0.);\n+    }\n+\n+    return calc_checksum(__func__);\n+}\n+\n+int main (int argc, char **argv)\n+{\n+  int n1 = 1;\n+  int n3 = 1;\n+  int* ip;\n+  real_t s1,s2;\n+  init(&ip, &s1, &s2);\n+\n+  run(&s2275, \"s2275\", NULL);\n+\n+  return 0;\n+}\n+\n+/* { dg-final { scan-tree-dump-times \"vectorized 1 loops\" 1 \"vect\" } } */\n\\ No newline at end of file"}, {"sha": "da523343e8fed55bb25a9c911efa804691992ffb", "filename": "gcc/testsuite/gcc.dg/vect/tsvc/vect-tsvc-s231.c", "status": "added", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f81970b5f386630b98a33373c23dcc9234c6a980/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Ftsvc%2Fvect-tsvc-s231.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f81970b5f386630b98a33373c23dcc9234c6a980/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Ftsvc%2Fvect-tsvc-s231.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Ftsvc%2Fvect-tsvc-s231.c?ref=f81970b5f386630b98a33373c23dcc9234c6a980", "patch": "@@ -0,0 +1,41 @@\n+/*  This file is distributed under the University of Illinois Open Source\n+    License. See license.txt for details.  */\n+\n+/* { dg-additional-options \"--param vect-epilogues-nomask=0\" } */\n+/* { dg-require-effective-target vect_float } */\n+\n+#include \"tsvc.h\"\n+\n+real_t s231(struct args_t * func_args)\n+{\n+//    loop interchange\n+//    loop with data dependency\n+\n+    initialise_arrays(__func__);\n+\n+    for (int nl = 0; nl < 100*(iterations/LEN_2D); nl++) {\n+        for (int i = 0; i < LEN_2D; ++i) {\n+            for (int j = 1; j < LEN_2D; j++) {\n+                aa[j][i] = aa[j - 1][i] + bb[j][i];\n+            }\n+        }\n+        dummy(a, b, c, d, e, aa, bb, cc, 0.);\n+    }\n+\n+    return calc_checksum(__func__);\n+}\n+\n+int main (int argc, char **argv)\n+{\n+  int n1 = 1;\n+  int n3 = 1;\n+  int* ip;\n+  real_t s1,s2;\n+  init(&ip, &s1, &s2);\n+\n+  run(&s231, \"s231\", NULL);\n+\n+  return 0;\n+}\n+\n+/* { dg-final { scan-tree-dump-times \"vectorized 1 loops\" 1 \"vect\" } } */\n\\ No newline at end of file"}, {"sha": "37bb310c67743996ca3b2046e0ac5e057376f9e9", "filename": "gcc/testsuite/gcc.dg/vect/tsvc/vect-tsvc-s232.c", "status": "added", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f81970b5f386630b98a33373c23dcc9234c6a980/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Ftsvc%2Fvect-tsvc-s232.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f81970b5f386630b98a33373c23dcc9234c6a980/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Ftsvc%2Fvect-tsvc-s232.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Ftsvc%2Fvect-tsvc-s232.c?ref=f81970b5f386630b98a33373c23dcc9234c6a980", "patch": "@@ -0,0 +1,41 @@\n+/*  This file is distributed under the University of Illinois Open Source\n+    License. See license.txt for details.  */\n+\n+/* { dg-additional-options \"--param vect-epilogues-nomask=0\" } */\n+/* { dg-require-effective-target vect_float } */\n+\n+#include \"tsvc.h\"\n+\n+real_t s232(struct args_t * func_args)\n+{\n+//    loop interchange\n+//    interchanging of triangular loops\n+\n+    initialise_arrays(__func__);\n+\n+    for (int nl = 0; nl < 100*(iterations/(LEN_2D)); nl++) {\n+        for (int j = 1; j < LEN_2D; j++) {\n+            for (int i = 1; i <= j; i++) {\n+                aa[j][i] = aa[j][i-1]*aa[j][i-1]+bb[j][i];\n+            }\n+        }\n+        dummy(a, b, c, d, e, aa, bb, cc, 1.);\n+    }\n+\n+    return calc_checksum(__func__);\n+}\n+\n+int main (int argc, char **argv)\n+{\n+  int n1 = 1;\n+  int n3 = 1;\n+  int* ip;\n+  real_t s1,s2;\n+  init(&ip, &s1, &s2);\n+\n+  run(&s232, \"s232\", NULL);\n+\n+  return 0;\n+}\n+\n+/* { dg-final { scan-tree-dump \"vectorized 1 loops\" \"vect\" { xfail *-*-* } } } */"}, {"sha": "10f003a5bee56348807af8c0372ef42482f4d590", "filename": "gcc/testsuite/gcc.dg/vect/tsvc/vect-tsvc-s233.c", "status": "added", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f81970b5f386630b98a33373c23dcc9234c6a980/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Ftsvc%2Fvect-tsvc-s233.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f81970b5f386630b98a33373c23dcc9234c6a980/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Ftsvc%2Fvect-tsvc-s233.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Ftsvc%2Fvect-tsvc-s233.c?ref=f81970b5f386630b98a33373c23dcc9234c6a980", "patch": "@@ -0,0 +1,44 @@\n+/*  This file is distributed under the University of Illinois Open Source\n+    License. See license.txt for details.  */\n+\n+/* { dg-additional-options \"--param vect-epilogues-nomask=0\" } */\n+/* { dg-require-effective-target vect_float } */\n+\n+#include \"tsvc.h\"\n+\n+real_t s233(struct args_t * func_args)\n+{\n+//    loop interchange\n+//    interchanging with one of two inner loops\n+\n+    initialise_arrays(__func__);\n+\n+    for (int nl = 0; nl < 100*(iterations/LEN_2D); nl++) {\n+        for (int i = 1; i < LEN_2D; i++) {\n+            for (int j = 1; j < LEN_2D; j++) {\n+                aa[j][i] = aa[j-1][i] + cc[j][i];\n+            }\n+            for (int j = 1; j < LEN_2D; j++) {\n+                bb[j][i] = bb[j][i-1] + cc[j][i];\n+            }\n+        }\n+        dummy(a, b, c, d, e, aa, bb, cc, 0.);\n+    }\n+\n+    return calc_checksum(__func__);\n+}\n+\n+int main (int argc, char **argv)\n+{\n+  int n1 = 1;\n+  int n3 = 1;\n+  int* ip;\n+  real_t s1,s2;\n+  init(&ip, &s1, &s2);\n+\n+  run(&s233, \"s233\", NULL);\n+\n+  return 0;\n+}\n+\n+/* { dg-final { scan-tree-dump \"vectorized 1 loops\" \"vect\" { xfail *-*-* } } } */"}, {"sha": "1340b20cf8384977cb236dc457bbb74ed5ed035d", "filename": "gcc/testsuite/gcc.dg/vect/tsvc/vect-tsvc-s235.c", "status": "added", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f81970b5f386630b98a33373c23dcc9234c6a980/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Ftsvc%2Fvect-tsvc-s235.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f81970b5f386630b98a33373c23dcc9234c6a980/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Ftsvc%2Fvect-tsvc-s235.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Ftsvc%2Fvect-tsvc-s235.c?ref=f81970b5f386630b98a33373c23dcc9234c6a980", "patch": "@@ -0,0 +1,42 @@\n+/*  This file is distributed under the University of Illinois Open Source\n+    License. See license.txt for details.  */\n+\n+/* { dg-additional-options \"--param vect-epilogues-nomask=0\" } */\n+/* { dg-require-effective-target vect_float } */\n+\n+#include \"tsvc.h\"\n+\n+real_t s235(struct args_t * func_args)\n+{\n+//    loop interchanging\n+//    imperfectly nested loops\n+\n+    initialise_arrays(__func__);\n+\n+    for (int nl = 0; nl < 200*(iterations/LEN_2D); nl++) {\n+        for (int i = 0; i < LEN_2D; i++) {\n+            a[i] += b[i] * c[i];\n+            for (int j = 1; j < LEN_2D; j++) {\n+                aa[j][i] = aa[j-1][i] + bb[j][i] * a[i];\n+            }\n+        }\n+        dummy(a, b, c, d, e, aa, bb, cc, 0.);\n+    }\n+\n+    return calc_checksum(__func__);\n+}\n+\n+int main (int argc, char **argv)\n+{\n+  int n1 = 1;\n+  int n3 = 1;\n+  int* ip;\n+  real_t s1,s2;\n+  init(&ip, &s1, &s2);\n+\n+  run(&s235, \"s235\", NULL);\n+\n+  return 0;\n+}\n+\n+/* { dg-final { scan-tree-dump-times \"vectorized 1 loops\" 1 \"vect\" } } */\n\\ No newline at end of file"}, {"sha": "14b4188e57b0e084ec00c5f5ad14321d1fecd1b0", "filename": "gcc/testsuite/gcc.dg/vect/tsvc/vect-tsvc-s241.c", "status": "added", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f81970b5f386630b98a33373c23dcc9234c6a980/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Ftsvc%2Fvect-tsvc-s241.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f81970b5f386630b98a33373c23dcc9234c6a980/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Ftsvc%2Fvect-tsvc-s241.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Ftsvc%2Fvect-tsvc-s241.c?ref=f81970b5f386630b98a33373c23dcc9234c6a980", "patch": "@@ -0,0 +1,40 @@\n+/*  This file is distributed under the University of Illinois Open Source\n+    License. See license.txt for details.  */\n+\n+/* { dg-additional-options \"--param vect-epilogues-nomask=0\" } */\n+/* { dg-require-effective-target vect_float } */\n+\n+#include \"tsvc.h\"\n+\n+real_t s241(struct args_t * func_args)\n+{\n+//    node splitting\n+//    preloading necessary to allow vectorization\n+\n+    initialise_arrays(__func__);\n+\n+    for (int nl = 0; nl < 2*iterations; nl++) {\n+        for (int i = 0; i < LEN_1D-1; i++) {\n+            a[i] = b[i] * c[i  ] * d[i];\n+            b[i] = a[i] * a[i+1] * d[i];\n+        }\n+        dummy(a, b, c, d, e, aa, bb, cc, 0.);\n+    }\n+\n+    return calc_checksum(__func__);\n+}\n+\n+int main (int argc, char **argv)\n+{\n+  int n1 = 1;\n+  int n3 = 1;\n+  int* ip;\n+  real_t s1,s2;\n+  init(&ip, &s1, &s2);\n+\n+  run(&s241, \"s241\", NULL);\n+\n+  return 0;\n+}\n+\n+/* { dg-final { scan-tree-dump \"vectorized 1 loops\" \"vect\" { xfail *-*-* } } } */"}, {"sha": "924c679375fb2c8d2597ec47b8db64f2755921e4", "filename": "gcc/testsuite/gcc.dg/vect/tsvc/vect-tsvc-s242.c", "status": "added", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f81970b5f386630b98a33373c23dcc9234c6a980/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Ftsvc%2Fvect-tsvc-s242.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f81970b5f386630b98a33373c23dcc9234c6a980/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Ftsvc%2Fvect-tsvc-s242.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Ftsvc%2Fvect-tsvc-s242.c?ref=f81970b5f386630b98a33373c23dcc9234c6a980", "patch": "@@ -0,0 +1,42 @@\n+/*  This file is distributed under the University of Illinois Open Source\n+    License. See license.txt for details.  */\n+\n+/* { dg-additional-options \"--param vect-epilogues-nomask=0\" } */\n+/* { dg-require-effective-target vect_float } */\n+\n+#include \"tsvc.h\"\n+\n+real_t s242(struct args_t * func_args)\n+{\n+//    node splitting\n+\n+    struct{real_t a;real_t b;} * x = func_args->arg_info;\n+    real_t s1 = x->a;\n+    real_t s2 = x->b;\n+\n+    initialise_arrays(__func__);\n+\n+    for (int nl = 0; nl < iterations/5; nl++) {\n+        for (int i = 1; i < LEN_1D; ++i) {\n+            a[i] = a[i - 1] + s1 + s2 + b[i] + c[i] + d[i];\n+        }\n+        dummy(a, b, c, d, e, aa, bb, cc, 0.);\n+    }\n+\n+    return calc_checksum(__func__);\n+}\n+\n+int main (int argc, char **argv)\n+{\n+  int n1 = 1;\n+  int n3 = 1;\n+  int* ip;\n+  real_t s1,s2;\n+  init(&ip, &s1, &s2);\n+\n+  run(&s242, \"s242\", &(struct{real_t a;real_t b;}){s1, s2});\n+\n+  return 0;\n+}\n+\n+/* { dg-final { scan-tree-dump \"vectorized 1 loops\" \"vect\" { xfail *-*-* } } } */"}, {"sha": "93618213c74aa78142a2ebcd2af087f458fb75d1", "filename": "gcc/testsuite/gcc.dg/vect/tsvc/vect-tsvc-s243.c", "status": "added", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f81970b5f386630b98a33373c23dcc9234c6a980/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Ftsvc%2Fvect-tsvc-s243.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f81970b5f386630b98a33373c23dcc9234c6a980/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Ftsvc%2Fvect-tsvc-s243.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Ftsvc%2Fvect-tsvc-s243.c?ref=f81970b5f386630b98a33373c23dcc9234c6a980", "patch": "@@ -0,0 +1,41 @@\n+/*  This file is distributed under the University of Illinois Open Source\n+    License. See license.txt for details.  */\n+\n+/* { dg-additional-options \"--param vect-epilogues-nomask=0\" } */\n+/* { dg-require-effective-target vect_float } */\n+\n+#include \"tsvc.h\"\n+\n+real_t s243(struct args_t * func_args)\n+{\n+//    node splitting\n+//    false dependence cycle breaking\n+\n+    initialise_arrays(__func__);\n+\n+    for (int nl = 0; nl < iterations; nl++) {\n+        for (int i = 0; i < LEN_1D-1; i++) {\n+            a[i] = b[i] + c[i  ] * d[i];\n+            b[i] = a[i] + d[i  ] * e[i];\n+            a[i] = b[i] + a[i+1] * d[i];\n+        }\n+        dummy(a, b, c, d, e, aa, bb, cc, 0.);\n+    }\n+\n+    return calc_checksum(__func__);\n+}\n+\n+int main (int argc, char **argv)\n+{\n+  int n1 = 1;\n+  int n3 = 1;\n+  int* ip;\n+  real_t s1,s2;\n+  init(&ip, &s1, &s2);\n+\n+  run(&s243, \"s243\", NULL);\n+\n+  return 0;\n+}\n+\n+/* { dg-final { scan-tree-dump \"vectorized 1 loops\" \"vect\" { xfail *-*-* } } } */"}, {"sha": "88868763352457814cee925ea0b8eea43e92f942", "filename": "gcc/testsuite/gcc.dg/vect/tsvc/vect-tsvc-s244.c", "status": "added", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f81970b5f386630b98a33373c23dcc9234c6a980/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Ftsvc%2Fvect-tsvc-s244.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f81970b5f386630b98a33373c23dcc9234c6a980/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Ftsvc%2Fvect-tsvc-s244.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Ftsvc%2Fvect-tsvc-s244.c?ref=f81970b5f386630b98a33373c23dcc9234c6a980", "patch": "@@ -0,0 +1,41 @@\n+/*  This file is distributed under the University of Illinois Open Source\n+    License. See license.txt for details.  */\n+\n+/* { dg-additional-options \"--param vect-epilogues-nomask=0\" } */\n+/* { dg-require-effective-target vect_float } */\n+\n+#include \"tsvc.h\"\n+\n+real_t s244(struct args_t * func_args)\n+{\n+//    node splitting\n+//    false dependence cycle breaking\n+\n+    initialise_arrays(__func__);\n+\n+    for (int nl = 0; nl < iterations; nl++) {\n+        for (int i = 0; i < LEN_1D-1; ++i) {\n+            a[i] = b[i] + c[i] * d[i];\n+            b[i] = c[i] + b[i];\n+            a[i+1] = b[i] + a[i+1] * d[i];\n+        }\n+        dummy(a, b, c, d, e, aa, bb, cc, 0.);\n+    }\n+\n+    return calc_checksum(__func__);\n+}\n+\n+int main (int argc, char **argv)\n+{\n+  int n1 = 1;\n+  int n3 = 1;\n+  int* ip;\n+  real_t s1,s2;\n+  init(&ip, &s1, &s2);\n+\n+  run(&s244, \"s244\", NULL);\n+\n+  return 0;\n+}\n+\n+/* { dg-final { scan-tree-dump \"vectorized 1 loops\" \"vect\" { xfail *-*-* } } } */"}, {"sha": "a648f9483473c1ae034b8c5a51522d74017ee8ee", "filename": "gcc/testsuite/gcc.dg/vect/tsvc/vect-tsvc-s251.c", "status": "added", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f81970b5f386630b98a33373c23dcc9234c6a980/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Ftsvc%2Fvect-tsvc-s251.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f81970b5f386630b98a33373c23dcc9234c6a980/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Ftsvc%2Fvect-tsvc-s251.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Ftsvc%2Fvect-tsvc-s251.c?ref=f81970b5f386630b98a33373c23dcc9234c6a980", "patch": "@@ -0,0 +1,41 @@\n+/*  This file is distributed under the University of Illinois Open Source\n+    License. See license.txt for details.  */\n+\n+/* { dg-additional-options \"--param vect-epilogues-nomask=0\" } */\n+/* { dg-require-effective-target vect_float } */\n+\n+#include \"tsvc.h\"\n+\n+real_t s251(struct args_t * func_args)\n+{\n+//    scalar and array expansion\n+//    scalar expansion\n+\n+    initialise_arrays(__func__);\n+\n+    real_t s;\n+    for (int nl = 0; nl < 4*iterations; nl++) {\n+        for (int i = 0; i < LEN_1D; i++) {\n+            s = b[i] + c[i] * d[i];\n+            a[i] = s * s;\n+        }\n+        dummy(a, b, c, d, e, aa, bb, cc, 0.);\n+    }\n+\n+    return calc_checksum(__func__);\n+}\n+\n+int main (int argc, char **argv)\n+{\n+  int n1 = 1;\n+  int n3 = 1;\n+  int* ip;\n+  real_t s1,s2;\n+  init(&ip, &s1, &s2);\n+\n+  run(&s251, \"s251\", NULL);\n+\n+  return 0;\n+}\n+\n+/* { dg-final { scan-tree-dump-times \"vectorized 1 loops\" 1 \"vect\" } } */\n\\ No newline at end of file"}, {"sha": "f1302b60ae53af7b3f62cba3fd89fb2be35081b7", "filename": "gcc/testsuite/gcc.dg/vect/tsvc/vect-tsvc-s252.c", "status": "added", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f81970b5f386630b98a33373c23dcc9234c6a980/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Ftsvc%2Fvect-tsvc-s252.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f81970b5f386630b98a33373c23dcc9234c6a980/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Ftsvc%2Fvect-tsvc-s252.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Ftsvc%2Fvect-tsvc-s252.c?ref=f81970b5f386630b98a33373c23dcc9234c6a980", "patch": "@@ -0,0 +1,43 @@\n+/*  This file is distributed under the University of Illinois Open Source\n+    License. See license.txt for details.  */\n+\n+/* { dg-additional-options \"--param vect-epilogues-nomask=0\" } */\n+/* { dg-require-effective-target vect_float } */\n+\n+#include \"tsvc.h\"\n+\n+real_t s252(struct args_t * func_args)\n+{\n+//    scalar and array expansion\n+//    loop with ambiguous scalar temporary\n+\n+    initialise_arrays(__func__);\n+\n+    real_t t, s;\n+    for (int nl = 0; nl < iterations; nl++) {\n+        t = (real_t) 0.;\n+        for (int i = 0; i < LEN_1D; i++) {\n+            s = b[i] * c[i];\n+            a[i] = s + t;\n+            t = s;\n+        }\n+        dummy(a, b, c, d, e, aa, bb, cc, 0.);\n+    }\n+\n+    return calc_checksum(__func__);\n+}\n+\n+int main (int argc, char **argv)\n+{\n+  int n1 = 1;\n+  int n3 = 1;\n+  int* ip;\n+  real_t s1,s2;\n+  init(&ip, &s1, &s2);\n+\n+  run(&s252, \"s252\", NULL);\n+\n+  return 0;\n+}\n+\n+/* { dg-final { scan-tree-dump \"vectorized 1 loops\" \"vect\" { xfail *-*-* } } } */"}, {"sha": "b14cb573cdd57bd0222bd96b4be0f19afdb10847", "filename": "gcc/testsuite/gcc.dg/vect/tsvc/vect-tsvc-s253.c", "status": "added", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f81970b5f386630b98a33373c23dcc9234c6a980/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Ftsvc%2Fvect-tsvc-s253.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f81970b5f386630b98a33373c23dcc9234c6a980/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Ftsvc%2Fvect-tsvc-s253.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Ftsvc%2Fvect-tsvc-s253.c?ref=f81970b5f386630b98a33373c23dcc9234c6a980", "patch": "@@ -0,0 +1,44 @@\n+/*  This file is distributed under the University of Illinois Open Source\n+    License. See license.txt for details.  */\n+\n+/* { dg-additional-options \"--param vect-epilogues-nomask=0\" } */\n+/* { dg-require-effective-target vect_float } */\n+\n+#include \"tsvc.h\"\n+\n+real_t s253(struct args_t * func_args)\n+{\n+//    scalar and array expansion\n+//    scalar expansio assigned under if\n+\n+    initialise_arrays(__func__);\n+\n+    real_t s;\n+    for (int nl = 0; nl < iterations; nl++) {\n+        for (int i = 0; i < LEN_1D; i++) {\n+            if (a[i] > b[i]) {\n+                s = a[i] - b[i] * d[i];\n+                c[i] += s;\n+                a[i] = s;\n+            }\n+        }\n+        dummy(a, b, c, d, e, aa, bb, cc, 0.);\n+    }\n+\n+    return calc_checksum(__func__);\n+}\n+\n+int main (int argc, char **argv)\n+{\n+  int n1 = 1;\n+  int n3 = 1;\n+  int* ip;\n+  real_t s1,s2;\n+  init(&ip, &s1, &s2);\n+\n+  run(&s253, \"s253\", NULL);\n+\n+  return 0;\n+}\n+\n+/* { dg-final { scan-tree-dump \"vectorized 1 loops\" \"vect\" { xfail *-*-* } } } */"}, {"sha": "bdc8a01e2a51d43d24976bec494914278592733d", "filename": "gcc/testsuite/gcc.dg/vect/tsvc/vect-tsvc-s254.c", "status": "added", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f81970b5f386630b98a33373c23dcc9234c6a980/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Ftsvc%2Fvect-tsvc-s254.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f81970b5f386630b98a33373c23dcc9234c6a980/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Ftsvc%2Fvect-tsvc-s254.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Ftsvc%2Fvect-tsvc-s254.c?ref=f81970b5f386630b98a33373c23dcc9234c6a980", "patch": "@@ -0,0 +1,42 @@\n+/*  This file is distributed under the University of Illinois Open Source\n+    License. See license.txt for details.  */\n+\n+/* { dg-additional-options \"--param vect-epilogues-nomask=0\" } */\n+/* { dg-require-effective-target vect_float } */\n+\n+#include \"tsvc.h\"\n+\n+real_t s254(struct args_t * func_args)\n+{\n+//    scalar and array expansion\n+//    carry around variable\n+\n+    initialise_arrays(__func__);\n+\n+    real_t x;\n+    for (int nl = 0; nl < 4*iterations; nl++) {\n+        x = b[LEN_1D-1];\n+        for (int i = 0; i < LEN_1D; i++) {\n+            a[i] = (b[i] + x) * (real_t).5;\n+            x = b[i];\n+        }\n+        dummy(a, b, c, d, e, aa, bb, cc, 0.);\n+    }\n+\n+    return calc_checksum(__func__);\n+}\n+\n+int main (int argc, char **argv)\n+{\n+  int n1 = 1;\n+  int n3 = 1;\n+  int* ip;\n+  real_t s1,s2;\n+  init(&ip, &s1, &s2);\n+\n+  run(&s254, \"s254\", NULL);\n+\n+  return 0;\n+}\n+\n+/* { dg-final { scan-tree-dump \"vectorized 1 loops\" \"vect\" { xfail *-*-* } } } */"}, {"sha": "c680ee124b9be301d18acffbd4566ab203d14b24", "filename": "gcc/testsuite/gcc.dg/vect/tsvc/vect-tsvc-s255.c", "status": "added", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f81970b5f386630b98a33373c23dcc9234c6a980/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Ftsvc%2Fvect-tsvc-s255.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f81970b5f386630b98a33373c23dcc9234c6a980/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Ftsvc%2Fvect-tsvc-s255.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Ftsvc%2Fvect-tsvc-s255.c?ref=f81970b5f386630b98a33373c23dcc9234c6a980", "patch": "@@ -0,0 +1,44 @@\n+/*  This file is distributed under the University of Illinois Open Source\n+    License. See license.txt for details.  */\n+\n+/* { dg-additional-options \"--param vect-epilogues-nomask=0\" } */\n+/* { dg-require-effective-target vect_float } */\n+\n+#include \"tsvc.h\"\n+\n+real_t s255(struct args_t * func_args)\n+{\n+//    scalar and array expansion\n+//    carry around variables, 2 levels\n+\n+    initialise_arrays(__func__);\n+\n+    real_t x, y;\n+    for (int nl = 0; nl < iterations; nl++) {\n+        x = b[LEN_1D-1];\n+        y = b[LEN_1D-2];\n+        for (int i = 0; i < LEN_1D; i++) {\n+            a[i] = (b[i] + x + y) * (real_t).333;\n+            y = x;\n+            x = b[i];\n+        }\n+        dummy(a, b, c, d, e, aa, bb, cc, 0.);\n+    }\n+\n+    return calc_checksum(__func__);\n+}\n+\n+int main (int argc, char **argv)\n+{\n+  int n1 = 1;\n+  int n3 = 1;\n+  int* ip;\n+  real_t s1,s2;\n+  init(&ip, &s1, &s2);\n+\n+  run(&s255, \"s255\", NULL);\n+\n+  return 0;\n+}\n+\n+/* { dg-final { scan-tree-dump \"vectorized 1 loops\" \"vect\" { xfail *-*-* } } } */"}, {"sha": "2e18fa8cd9edb93721d430f6b79e44b83483b946", "filename": "gcc/testsuite/gcc.dg/vect/tsvc/vect-tsvc-s256.c", "status": "added", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f81970b5f386630b98a33373c23dcc9234c6a980/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Ftsvc%2Fvect-tsvc-s256.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f81970b5f386630b98a33373c23dcc9234c6a980/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Ftsvc%2Fvect-tsvc-s256.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Ftsvc%2Fvect-tsvc-s256.c?ref=f81970b5f386630b98a33373c23dcc9234c6a980", "patch": "@@ -0,0 +1,42 @@\n+/*  This file is distributed under the University of Illinois Open Source\n+    License. See license.txt for details.  */\n+\n+/* { dg-additional-options \"--param vect-epilogues-nomask=0\" } */\n+/* { dg-require-effective-target vect_float } */\n+\n+#include \"tsvc.h\"\n+\n+real_t s256(struct args_t * func_args)\n+{\n+//    scalar and array expansion\n+//    array expansion\n+\n+    initialise_arrays(__func__);\n+\n+    for (int nl = 0; nl < 10*(iterations/LEN_2D); nl++) {\n+        for (int i = 0; i < LEN_2D; i++) {\n+            for (int j = 1; j < LEN_2D; j++) {\n+                a[j] = (real_t)1.0 - a[j - 1];\n+                aa[j][i] = a[j] + bb[j][i]*d[j];\n+            }\n+        }\n+        dummy(a, b, c, d, e, aa, bb, cc, 0.);\n+    }\n+\n+    return calc_checksum(__func__);\n+}\n+\n+int main (int argc, char **argv)\n+{\n+  int n1 = 1;\n+  int n3 = 1;\n+  int* ip;\n+  real_t s1,s2;\n+  init(&ip, &s1, &s2);\n+\n+  run(&s256, \"s256\", NULL);\n+\n+  return 0;\n+}\n+\n+/* { dg-final { scan-tree-dump \"vectorized 1 loops\" \"vect\" { xfail *-*-* } } } */"}, {"sha": "c6fd86cffd6880bfcaab5f5faa51e277885616f9", "filename": "gcc/testsuite/gcc.dg/vect/tsvc/vect-tsvc-s257.c", "status": "added", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f81970b5f386630b98a33373c23dcc9234c6a980/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Ftsvc%2Fvect-tsvc-s257.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f81970b5f386630b98a33373c23dcc9234c6a980/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Ftsvc%2Fvect-tsvc-s257.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Ftsvc%2Fvect-tsvc-s257.c?ref=f81970b5f386630b98a33373c23dcc9234c6a980", "patch": "@@ -0,0 +1,42 @@\n+/*  This file is distributed under the University of Illinois Open Source\n+    License. See license.txt for details.  */\n+\n+/* { dg-additional-options \"--param vect-epilogues-nomask=0\" } */\n+/* { dg-require-effective-target vect_float } */\n+\n+#include \"tsvc.h\"\n+\n+real_t s257(struct args_t * func_args)\n+{\n+//    scalar and array expansion\n+//    array expansion\n+\n+    initialise_arrays(__func__);\n+\n+    for (int nl = 0; nl < 10*(iterations/LEN_2D); nl++) {\n+        for (int i = 1; i < LEN_2D; i++) {\n+            for (int j = 0; j < LEN_2D; j++) {\n+                a[i] = aa[j][i] - a[i-1];\n+                aa[j][i] = a[i] + bb[j][i];\n+            }\n+        }\n+        dummy(a, b, c, d, e, aa, bb, cc, 0.);\n+    }\n+\n+    return calc_checksum(__func__);\n+}\n+\n+int main (int argc, char **argv)\n+{\n+  int n1 = 1;\n+  int n3 = 1;\n+  int* ip;\n+  real_t s1,s2;\n+  init(&ip, &s1, &s2);\n+\n+  run(&s257, \"s257\", NULL);\n+\n+  return 0;\n+}\n+\n+/* { dg-final { scan-tree-dump \"vectorized 1 loops\" \"vect\" { xfail *-*-* } } } */"}, {"sha": "34f16a09ebf62fc2863115e569e74c1608bd96bd", "filename": "gcc/testsuite/gcc.dg/vect/tsvc/vect-tsvc-s258.c", "status": "added", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f81970b5f386630b98a33373c23dcc9234c6a980/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Ftsvc%2Fvect-tsvc-s258.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f81970b5f386630b98a33373c23dcc9234c6a980/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Ftsvc%2Fvect-tsvc-s258.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Ftsvc%2Fvect-tsvc-s258.c?ref=f81970b5f386630b98a33373c23dcc9234c6a980", "patch": "@@ -0,0 +1,45 @@\n+/*  This file is distributed under the University of Illinois Open Source\n+    License. See license.txt for details.  */\n+\n+/* { dg-additional-options \"--param vect-epilogues-nomask=0\" } */\n+/* { dg-require-effective-target vect_float } */\n+\n+#include \"tsvc.h\"\n+\n+real_t s258(struct args_t * func_args)\n+{\n+//    scalar and array expansion\n+//    wrap-around scalar under an if\n+\n+    initialise_arrays(__func__);\n+\n+    real_t s;\n+    for (int nl = 0; nl < iterations; nl++) {\n+        s = 0.;\n+        for (int i = 0; i < LEN_2D; ++i) {\n+            if (a[i] > 0.) {\n+                s = d[i] * d[i];\n+            }\n+            b[i] = s * c[i] + d[i];\n+            e[i] = (s + (real_t)1.) * aa[0][i];\n+        }\n+        dummy(a, b, c, d, e, aa, bb, cc, 0.);\n+    }\n+\n+    return calc_checksum(__func__);\n+}\n+\n+int main (int argc, char **argv)\n+{\n+  int n1 = 1;\n+  int n3 = 1;\n+  int* ip;\n+  real_t s1,s2;\n+  init(&ip, &s1, &s2);\n+\n+  run(&s258, \"s258\", NULL);\n+\n+  return 0;\n+}\n+\n+/* { dg-final { scan-tree-dump \"vectorized 1 loops\" \"vect\" { xfail *-*-* } } } */"}, {"sha": "6edb1a5cb2cc7ddd9203d3d4b392dd203be8d4e3", "filename": "gcc/testsuite/gcc.dg/vect/tsvc/vect-tsvc-s261.c", "status": "added", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f81970b5f386630b98a33373c23dcc9234c6a980/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Ftsvc%2Fvect-tsvc-s261.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f81970b5f386630b98a33373c23dcc9234c6a980/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Ftsvc%2Fvect-tsvc-s261.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Ftsvc%2Fvect-tsvc-s261.c?ref=f81970b5f386630b98a33373c23dcc9234c6a980", "patch": "@@ -0,0 +1,43 @@\n+/*  This file is distributed under the University of Illinois Open Source\n+    License. See license.txt for details.  */\n+\n+/* { dg-additional-options \"--param vect-epilogues-nomask=0\" } */\n+/* { dg-require-effective-target vect_float } */\n+\n+#include \"tsvc.h\"\n+\n+real_t s261(struct args_t * func_args)\n+{\n+//    scalar and array expansion\n+//    wrap-around scalar under an if\n+\n+    initialise_arrays(__func__);\n+\n+    real_t t;\n+    for (int nl = 0; nl < iterations; nl++) {\n+        for (int i = 1; i < LEN_1D; ++i) {\n+            t = a[i] + b[i];\n+            a[i] = t + c[i-1];\n+            t = c[i] * d[i];\n+            c[i] = t;\n+        }\n+        dummy(a, b, c, d, e, aa, bb, cc, 0.);\n+    }\n+\n+    return calc_checksum(__func__);\n+}\n+\n+int main (int argc, char **argv)\n+{\n+  int n1 = 1;\n+  int n3 = 1;\n+  int* ip;\n+  real_t s1,s2;\n+  init(&ip, &s1, &s2);\n+\n+  run(&s261, \"s261\", NULL);\n+\n+  return 0;\n+}\n+\n+/* { dg-final { scan-tree-dump \"vectorized 1 loops\" \"vect\" { xfail *-*-* } } } */"}, {"sha": "a454a4dcc717a83af17d8c89fbdc3ebfee5dd265", "filename": "gcc/testsuite/gcc.dg/vect/tsvc/vect-tsvc-s271.c", "status": "added", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f81970b5f386630b98a33373c23dcc9234c6a980/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Ftsvc%2Fvect-tsvc-s271.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f81970b5f386630b98a33373c23dcc9234c6a980/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Ftsvc%2Fvect-tsvc-s271.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Ftsvc%2Fvect-tsvc-s271.c?ref=f81970b5f386630b98a33373c23dcc9234c6a980", "patch": "@@ -0,0 +1,41 @@\n+/*  This file is distributed under the University of Illinois Open Source\n+    License. See license.txt for details.  */\n+\n+/* { dg-additional-options \"--param vect-epilogues-nomask=0\" } */\n+/* { dg-require-effective-target vect_float } */\n+\n+#include \"tsvc.h\"\n+\n+real_t s271(struct args_t * func_args)\n+{\n+//    control flow\n+//    loop with singularity handling\n+\n+    initialise_arrays(__func__);\n+\n+    for (int nl = 0; nl < 4*iterations; nl++) {\n+        for (int i = 0; i < LEN_1D; i++) {\n+            if (b[i] > (real_t)0.) {\n+                a[i] += b[i] * c[i];\n+            }\n+        }\n+        dummy(a, b, c, d, e, aa, bb, cc, 0.);\n+    }\n+\n+    return calc_checksum(__func__);\n+}\n+\n+int main (int argc, char **argv)\n+{\n+  int n1 = 1;\n+  int n3 = 1;\n+  int* ip;\n+  real_t s1,s2;\n+  init(&ip, &s1, &s2);\n+\n+  run(&s271, \"s271\", NULL);\n+\n+  return 0;\n+}\n+\n+/* { dg-final { scan-tree-dump \"vectorized 1 loops\" \"vect\" { xfail *-*-* } } } */"}, {"sha": "19d84841b21b15766d52a4ad5bb373b1f0fcfa65", "filename": "gcc/testsuite/gcc.dg/vect/tsvc/vect-tsvc-s2710.c", "status": "added", "additions": 55, "deletions": 0, "changes": 55, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f81970b5f386630b98a33373c23dcc9234c6a980/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Ftsvc%2Fvect-tsvc-s2710.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f81970b5f386630b98a33373c23dcc9234c6a980/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Ftsvc%2Fvect-tsvc-s2710.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Ftsvc%2Fvect-tsvc-s2710.c?ref=f81970b5f386630b98a33373c23dcc9234c6a980", "patch": "@@ -0,0 +1,55 @@\n+/*  This file is distributed under the University of Illinois Open Source\n+    License. See license.txt for details.  */\n+\n+/* { dg-additional-options \"--param vect-epilogues-nomask=0\" } */\n+/* { dg-require-effective-target vect_float } */\n+\n+#include \"tsvc.h\"\n+\n+real_t s2710(struct args_t * func_args)\n+{\n+//    control flow\n+//    scalar and vector ifs\n+\n+    int x = *(int*)func_args->arg_info;\n+\n+    initialise_arrays(__func__);\n+\n+    for (int nl = 0; nl < iterations/2; nl++) {\n+        for (int i = 0; i < LEN_1D; i++) {\n+            if (a[i] > b[i]) {\n+                a[i] += b[i] * d[i];\n+                if (LEN_1D > 10) {\n+                    c[i] += d[i] * d[i];\n+                } else {\n+                    c[i] = d[i] * e[i] + (real_t)1.;\n+                }\n+            } else {\n+                b[i] = a[i] + e[i] * e[i];\n+                if (x > (real_t)0.) {\n+                    c[i] = a[i] + d[i] * d[i];\n+                } else {\n+                    c[i] += e[i] * e[i];\n+                }\n+            }\n+        }\n+        dummy(a, b, c, d, e, aa, bb, cc, 0.);\n+    }\n+\n+    return calc_checksum(__func__);\n+}\n+\n+int main (int argc, char **argv)\n+{\n+  int n1 = 1;\n+  int n3 = 1;\n+  int* ip;\n+  real_t s1,s2;\n+  init(&ip, &s1, &s2);\n+\n+  run(&s2710, \"s2710\", &s1);\n+\n+  return 0;\n+}\n+\n+/* { dg-final { scan-tree-dump \"vectorized 1 loops\" \"vect\" { xfail *-*-* } } } */"}, {"sha": "1e6ae03f963626b86404688ce747340af1fe590e", "filename": "gcc/testsuite/gcc.dg/vect/tsvc/vect-tsvc-s2711.c", "status": "added", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f81970b5f386630b98a33373c23dcc9234c6a980/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Ftsvc%2Fvect-tsvc-s2711.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f81970b5f386630b98a33373c23dcc9234c6a980/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Ftsvc%2Fvect-tsvc-s2711.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Ftsvc%2Fvect-tsvc-s2711.c?ref=f81970b5f386630b98a33373c23dcc9234c6a980", "patch": "@@ -0,0 +1,41 @@\n+/*  This file is distributed under the University of Illinois Open Source\n+    License. See license.txt for details.  */\n+\n+/* { dg-additional-options \"--param vect-epilogues-nomask=0\" } */\n+/* { dg-require-effective-target vect_float } */\n+\n+#include \"tsvc.h\"\n+\n+real_t s2711(struct args_t * func_args)\n+{\n+//    control flow\n+//    semantic if removal\n+\n+    initialise_arrays(__func__);\n+\n+    for (int nl = 0; nl < 4*iterations; nl++) {\n+        for (int i = 0; i < LEN_1D; i++) {\n+            if (b[i] != (real_t)0.0) {\n+                a[i] += b[i] * c[i];\n+            }\n+        }\n+        dummy(a, b, c, d, e, aa, bb, cc, 0.);\n+    }\n+\n+    return calc_checksum(__func__);\n+}\n+\n+int main (int argc, char **argv)\n+{\n+  int n1 = 1;\n+  int n3 = 1;\n+  int* ip;\n+  real_t s1,s2;\n+  init(&ip, &s1, &s2);\n+\n+  run(&s2711, \"s2711\", NULL);\n+\n+  return 0;\n+}\n+\n+/* { dg-final { scan-tree-dump \"vectorized 1 loops\" \"vect\" { xfail *-*-* } } } */"}, {"sha": "f958522ac6f12772ad5b7a348d4abcb442d2a614", "filename": "gcc/testsuite/gcc.dg/vect/tsvc/vect-tsvc-s2712.c", "status": "added", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f81970b5f386630b98a33373c23dcc9234c6a980/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Ftsvc%2Fvect-tsvc-s2712.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f81970b5f386630b98a33373c23dcc9234c6a980/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Ftsvc%2Fvect-tsvc-s2712.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Ftsvc%2Fvect-tsvc-s2712.c?ref=f81970b5f386630b98a33373c23dcc9234c6a980", "patch": "@@ -0,0 +1,41 @@\n+/*  This file is distributed under the University of Illinois Open Source\n+    License. See license.txt for details.  */\n+\n+/* { dg-additional-options \"--param vect-epilogues-nomask=0\" } */\n+/* { dg-require-effective-target vect_float } */\n+\n+#include \"tsvc.h\"\n+\n+real_t s2712(struct args_t * func_args)\n+{\n+//    control flow\n+//    if to elemental min\n+\n+    initialise_arrays(__func__);\n+\n+    for (int nl = 0; nl < 4*iterations; nl++) {\n+        for (int i = 0; i < LEN_1D; i++) {\n+            if (a[i] >= b[i]) {\n+                a[i] += b[i] * c[i];\n+            }\n+        }\n+        dummy(a, b, c, d, e, aa, bb, cc, 0.);\n+    }\n+\n+    return calc_checksum(__func__);\n+}\n+\n+int main (int argc, char **argv)\n+{\n+  int n1 = 1;\n+  int n3 = 1;\n+  int* ip;\n+  real_t s1,s2;\n+  init(&ip, &s1, &s2);\n+\n+  run(&s2712, \"s2712\", NULL);\n+\n+  return 0;\n+}\n+\n+/* { dg-final { scan-tree-dump \"vectorized 1 loops\" \"vect\" { xfail *-*-* } } } */"}, {"sha": "cca9adffb9213732259430c9ed26039fceaeae5e", "filename": "gcc/testsuite/gcc.dg/vect/tsvc/vect-tsvc-s272.c", "status": "added", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f81970b5f386630b98a33373c23dcc9234c6a980/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Ftsvc%2Fvect-tsvc-s272.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f81970b5f386630b98a33373c23dcc9234c6a980/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Ftsvc%2Fvect-tsvc-s272.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Ftsvc%2Fvect-tsvc-s272.c?ref=f81970b5f386630b98a33373c23dcc9234c6a980", "patch": "@@ -0,0 +1,44 @@\n+/*  This file is distributed under the University of Illinois Open Source\n+    License. See license.txt for details.  */\n+\n+/* { dg-additional-options \"--param vect-epilogues-nomask=0\" } */\n+/* { dg-require-effective-target vect_float } */\n+\n+#include \"tsvc.h\"\n+\n+real_t s272(struct args_t * func_args)\n+{\n+//    control flow\n+//    loop with independent conditional\n+\n+    int t = *(int*)func_args->arg_info;\n+\n+    initialise_arrays(__func__);\n+\n+    for (int nl = 0; nl < iterations; nl++) {\n+        for (int i = 0; i < LEN_1D; i++) {\n+            if (e[i] >= t) {\n+                a[i] += c[i] * d[i];\n+                b[i] += c[i] * c[i];\n+            }\n+        }\n+        dummy(a, b, c, d, e, aa, bb, cc, 0.);\n+    }\n+\n+    return calc_checksum(__func__);\n+}\n+\n+int main (int argc, char **argv)\n+{\n+  int n1 = 1;\n+  int n3 = 1;\n+  int* ip;\n+  real_t s1,s2;\n+  init(&ip, &s1, &s2);\n+\n+  run(&s272, \"s272\", &s1);\n+\n+  return 0;\n+}\n+\n+/* { dg-final { scan-tree-dump \"vectorized 1 loops\" \"vect\" { xfail *-*-* } } } */"}, {"sha": "9c75f8d280b6cdd980625d302201a320a1b5ec22", "filename": "gcc/testsuite/gcc.dg/vect/tsvc/vect-tsvc-s273.c", "status": "added", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f81970b5f386630b98a33373c23dcc9234c6a980/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Ftsvc%2Fvect-tsvc-s273.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f81970b5f386630b98a33373c23dcc9234c6a980/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Ftsvc%2Fvect-tsvc-s273.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Ftsvc%2Fvect-tsvc-s273.c?ref=f81970b5f386630b98a33373c23dcc9234c6a980", "patch": "@@ -0,0 +1,42 @@\n+/*  This file is distributed under the University of Illinois Open Source\n+    License. See license.txt for details.  */\n+\n+/* { dg-additional-options \"--param vect-epilogues-nomask=0\" } */\n+/* { dg-require-effective-target vect_float } */\n+\n+#include \"tsvc.h\"\n+\n+real_t s273(struct args_t * func_args)\n+{\n+//    control flow\n+//    simple loop with dependent conditional\n+\n+    initialise_arrays(__func__);\n+\n+    for (int nl = 0; nl < iterations; nl++) {\n+        for (int i = 0; i < LEN_1D; i++) {\n+            a[i] += d[i] * e[i];\n+            if (a[i] < (real_t)0.)\n+                b[i] += d[i] * e[i];\n+            c[i] += a[i] * d[i];\n+        }\n+        dummy(a, b, c, d, e, aa, bb, cc, 0.);\n+    }\n+\n+    return calc_checksum(__func__);\n+}\n+\n+int main (int argc, char **argv)\n+{\n+  int n1 = 1;\n+  int n3 = 1;\n+  int* ip;\n+  real_t s1,s2;\n+  init(&ip, &s1, &s2);\n+\n+  run(&s273, \"s273\", NULL);\n+\n+  return 0;\n+}\n+\n+/* { dg-final { scan-tree-dump \"vectorized 1 loops\" \"vect\" { xfail *-*-* } } } */"}, {"sha": "9e0260cd8cc30fe5c11e85e8dacceb0503df99a5", "filename": "gcc/testsuite/gcc.dg/vect/tsvc/vect-tsvc-s274.c", "status": "added", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f81970b5f386630b98a33373c23dcc9234c6a980/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Ftsvc%2Fvect-tsvc-s274.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f81970b5f386630b98a33373c23dcc9234c6a980/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Ftsvc%2Fvect-tsvc-s274.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Ftsvc%2Fvect-tsvc-s274.c?ref=f81970b5f386630b98a33373c23dcc9234c6a980", "patch": "@@ -0,0 +1,44 @@\n+/*  This file is distributed under the University of Illinois Open Source\n+    License. See license.txt for details.  */\n+\n+/* { dg-additional-options \"--param vect-epilogues-nomask=0\" } */\n+/* { dg-require-effective-target vect_float } */\n+\n+#include \"tsvc.h\"\n+\n+real_t s274(struct args_t * func_args)\n+{\n+//    control flow\n+//    complex loop with dependent conditional\n+\n+    initialise_arrays(__func__);\n+\n+    for (int nl = 0; nl < iterations; nl++) {\n+        for (int i = 0; i < LEN_1D; i++) {\n+            a[i] = c[i] + e[i] * d[i];\n+            if (a[i] > (real_t)0.) {\n+                b[i] = a[i] + b[i];\n+            } else {\n+                a[i] = d[i] * e[i];\n+            }\n+        }\n+        dummy(a, b, c, d, e, aa, bb, cc, 0.);\n+    }\n+\n+    return calc_checksum(__func__);\n+}\n+\n+int main (int argc, char **argv)\n+{\n+  int n1 = 1;\n+  int n3 = 1;\n+  int* ip;\n+  real_t s1,s2;\n+  init(&ip, &s1, &s2);\n+\n+  run(&s274, \"s274\", NULL);\n+\n+  return 0;\n+}\n+\n+/* { dg-final { scan-tree-dump \"vectorized 1 loops\" \"vect\" { xfail *-*-* } } } */"}, {"sha": "929cf11b7513d6e19d22b479a5c0d3b84480f121", "filename": "gcc/testsuite/gcc.dg/vect/tsvc/vect-tsvc-s275.c", "status": "added", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f81970b5f386630b98a33373c23dcc9234c6a980/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Ftsvc%2Fvect-tsvc-s275.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f81970b5f386630b98a33373c23dcc9234c6a980/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Ftsvc%2Fvect-tsvc-s275.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Ftsvc%2Fvect-tsvc-s275.c?ref=f81970b5f386630b98a33373c23dcc9234c6a980", "patch": "@@ -0,0 +1,43 @@\n+/*  This file is distributed under the University of Illinois Open Source\n+    License. See license.txt for details.  */\n+\n+/* { dg-additional-options \"--param vect-epilogues-nomask=0\" } */\n+/* { dg-require-effective-target vect_float } */\n+\n+#include \"tsvc.h\"\n+\n+real_t s275(struct args_t * func_args)\n+{\n+//    control flow\n+//    if around inner loop, interchanging needed\n+\n+    initialise_arrays(__func__);\n+\n+    for (int nl = 0; nl < 10*(iterations/LEN_2D); nl++) {\n+        for (int i = 0; i < LEN_2D; i++) {\n+            if (aa[0][i] > (real_t)0.) {\n+                for (int j = 1; j < LEN_2D; j++) {\n+                    aa[j][i] = aa[j-1][i] + bb[j][i] * cc[j][i];\n+                }\n+            }\n+        }\n+        dummy(a, b, c, d, e, aa, bb, cc, 0.);\n+    }\n+\n+    return calc_checksum(__func__);\n+}\n+\n+int main (int argc, char **argv)\n+{\n+  int n1 = 1;\n+  int n3 = 1;\n+  int* ip;\n+  real_t s1,s2;\n+  init(&ip, &s1, &s2);\n+\n+  run(&s275, \"s275\", NULL);\n+\n+  return 0;\n+}\n+\n+/* { dg-final { scan-tree-dump \"vectorized 1 loops\" \"vect\" { xfail *-*-* } } } */"}, {"sha": "4f6240309d900bf1e749520f6cd08c045af51c40", "filename": "gcc/testsuite/gcc.dg/vect/tsvc/vect-tsvc-s276.c", "status": "added", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f81970b5f386630b98a33373c23dcc9234c6a980/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Ftsvc%2Fvect-tsvc-s276.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f81970b5f386630b98a33373c23dcc9234c6a980/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Ftsvc%2Fvect-tsvc-s276.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Ftsvc%2Fvect-tsvc-s276.c?ref=f81970b5f386630b98a33373c23dcc9234c6a980", "patch": "@@ -0,0 +1,44 @@\n+/*  This file is distributed under the University of Illinois Open Source\n+    License. See license.txt for details.  */\n+\n+/* { dg-additional-options \"--param vect-epilogues-nomask=0\" } */\n+/* { dg-require-effective-target vect_float } */\n+\n+#include \"tsvc.h\"\n+\n+real_t s276(struct args_t * func_args)\n+{\n+//    control flow\n+//    if test using loop index\n+\n+    initialise_arrays(__func__);\n+\n+    int mid = (LEN_1D/2);\n+    for (int nl = 0; nl < 4*iterations; nl++) {\n+        for (int i = 0; i < LEN_1D; i++) {\n+            if (i+1 < mid) {\n+                a[i] += b[i] * c[i];\n+            } else {\n+                a[i] += b[i] * d[i];\n+            }\n+        }\n+        dummy(a, b, c, d, e, aa, bb, cc, 0.);\n+    }\n+\n+    return calc_checksum(__func__);\n+}\n+\n+int main (int argc, char **argv)\n+{\n+  int n1 = 1;\n+  int n3 = 1;\n+  int* ip;\n+  real_t s1,s2;\n+  init(&ip, &s1, &s2);\n+\n+  run(&s276, \"s276\", NULL);\n+\n+  return 0;\n+}\n+\n+/* { dg-final { scan-tree-dump \"vectorized 1 loops\" \"vect\" { xfail *-*-* } } } */"}, {"sha": "5904b6384b52ea956ecf9cc9e571f5fd1adbe4c5", "filename": "gcc/testsuite/gcc.dg/vect/tsvc/vect-tsvc-s277.c", "status": "added", "additions": 49, "deletions": 0, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f81970b5f386630b98a33373c23dcc9234c6a980/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Ftsvc%2Fvect-tsvc-s277.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f81970b5f386630b98a33373c23dcc9234c6a980/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Ftsvc%2Fvect-tsvc-s277.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Ftsvc%2Fvect-tsvc-s277.c?ref=f81970b5f386630b98a33373c23dcc9234c6a980", "patch": "@@ -0,0 +1,49 @@\n+/*  This file is distributed under the University of Illinois Open Source\n+    License. See license.txt for details.  */\n+\n+/* { dg-additional-options \"--param vect-epilogues-nomask=0\" } */\n+/* { dg-require-effective-target vect_float } */\n+\n+#include \"tsvc.h\"\n+\n+real_t s277(struct args_t * func_args)\n+{\n+//    control flow\n+//    test for dependences arising from guard variable computation.\n+\n+    initialise_arrays(__func__);\n+\n+    for (int nl = 0; nl < iterations; nl++) {\n+        for (int i = 0; i < LEN_1D-1; i++) {\n+                if (a[i] >= (real_t)0.) {\n+                    goto L20;\n+                }\n+                if (b[i] >= (real_t)0.) {\n+                    goto L30;\n+                }\n+                a[i] += c[i] * d[i];\n+L30:\n+                b[i+1] = c[i] + d[i] * e[i];\n+L20:\n+;\n+        }\n+        dummy(a, b, c, d, e, aa, bb, cc, 0.);\n+    }\n+\n+    return calc_checksum(__func__);\n+}\n+\n+int main (int argc, char **argv)\n+{\n+  int n1 = 1;\n+  int n3 = 1;\n+  int* ip;\n+  real_t s1,s2;\n+  init(&ip, &s1, &s2);\n+\n+  run(&s277, \"s277\", NULL);\n+\n+  return 0;\n+}\n+\n+/* { dg-final { scan-tree-dump \"vectorized 1 loops\" \"vect\" { xfail *-*-* } } } */"}, {"sha": "98d7c0805c0fe80f48b60c4b358ef9b028a4ce8d", "filename": "gcc/testsuite/gcc.dg/vect/tsvc/vect-tsvc-s278.c", "status": "added", "additions": 47, "deletions": 0, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f81970b5f386630b98a33373c23dcc9234c6a980/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Ftsvc%2Fvect-tsvc-s278.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f81970b5f386630b98a33373c23dcc9234c6a980/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Ftsvc%2Fvect-tsvc-s278.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Ftsvc%2Fvect-tsvc-s278.c?ref=f81970b5f386630b98a33373c23dcc9234c6a980", "patch": "@@ -0,0 +1,47 @@\n+/*  This file is distributed under the University of Illinois Open Source\n+    License. See license.txt for details.  */\n+\n+/* { dg-additional-options \"--param vect-epilogues-nomask=0\" } */\n+/* { dg-require-effective-target vect_float } */\n+\n+#include \"tsvc.h\"\n+\n+real_t s278(struct args_t * func_args)\n+{\n+//    control flow\n+//    if/goto to block if-then-else\n+\n+    initialise_arrays(__func__);\n+\n+    for (int nl = 0; nl < iterations; nl++) {\n+        for (int i = 0; i < LEN_1D; i++) {\n+            if (a[i] > (real_t)0.) {\n+                goto L20;\n+            }\n+            b[i] = -b[i] + d[i] * e[i];\n+            goto L30;\n+L20:\n+            c[i] = -c[i] + d[i] * e[i];\n+L30:\n+            a[i] = b[i] + c[i] * d[i];\n+        }\n+        dummy(a, b, c, d, e, aa, bb, cc, 0.);\n+    }\n+\n+    return calc_checksum(__func__);\n+}\n+\n+int main (int argc, char **argv)\n+{\n+  int n1 = 1;\n+  int n3 = 1;\n+  int* ip;\n+  real_t s1,s2;\n+  init(&ip, &s1, &s2);\n+\n+  run(&s278, \"s278\", NULL);\n+\n+  return 0;\n+}\n+\n+/* { dg-final { scan-tree-dump \"vectorized 1 loops\" \"vect\" { xfail *-*-* } } } */"}, {"sha": "6f2bfe2a2a1fe243fcd1b24c84a87db99b7b3f0c", "filename": "gcc/testsuite/gcc.dg/vect/tsvc/vect-tsvc-s279.c", "status": "added", "additions": 51, "deletions": 0, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f81970b5f386630b98a33373c23dcc9234c6a980/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Ftsvc%2Fvect-tsvc-s279.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f81970b5f386630b98a33373c23dcc9234c6a980/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Ftsvc%2Fvect-tsvc-s279.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Ftsvc%2Fvect-tsvc-s279.c?ref=f81970b5f386630b98a33373c23dcc9234c6a980", "patch": "@@ -0,0 +1,51 @@\n+/*  This file is distributed under the University of Illinois Open Source\n+    License. See license.txt for details.  */\n+\n+/* { dg-additional-options \"--param vect-epilogues-nomask=0\" } */\n+/* { dg-require-effective-target vect_float } */\n+\n+#include \"tsvc.h\"\n+\n+real_t s279(struct args_t * func_args)\n+{\n+//    control flow\n+//    vector if/gotos\n+\n+    initialise_arrays(__func__);\n+\n+    for (int nl = 0; nl < iterations/2; nl++) {\n+        for (int i = 0; i < LEN_1D; i++) {\n+            if (a[i] > (real_t)0.) {\n+                goto L20;\n+            }\n+            b[i] = -b[i] + d[i] * d[i];\n+            if (b[i] <= a[i]) {\n+                goto L30;\n+            }\n+            c[i] += d[i] * e[i];\n+            goto L30;\n+L20:\n+            c[i] = -c[i] + e[i] * e[i];\n+L30:\n+            a[i] = b[i] + c[i] * d[i];\n+        }\n+        dummy(a, b, c, d, e, aa, bb, cc, 0.);\n+    }\n+\n+    return calc_checksum(__func__);\n+}\n+\n+int main (int argc, char **argv)\n+{\n+  int n1 = 1;\n+  int n3 = 1;\n+  int* ip;\n+  real_t s1,s2;\n+  init(&ip, &s1, &s2);\n+\n+  run(&s279, \"s279\", NULL);\n+\n+  return 0;\n+}\n+\n+/* { dg-final { scan-tree-dump \"vectorized 1 loops\" \"vect\" { xfail *-*-* } } } */"}, {"sha": "d60f2ea3f7dad159060604ceae1e89d86f6e83db", "filename": "gcc/testsuite/gcc.dg/vect/tsvc/vect-tsvc-s281.c", "status": "added", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f81970b5f386630b98a33373c23dcc9234c6a980/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Ftsvc%2Fvect-tsvc-s281.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f81970b5f386630b98a33373c23dcc9234c6a980/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Ftsvc%2Fvect-tsvc-s281.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Ftsvc%2Fvect-tsvc-s281.c?ref=f81970b5f386630b98a33373c23dcc9234c6a980", "patch": "@@ -0,0 +1,43 @@\n+/*  This file is distributed under the University of Illinois Open Source\n+    License. See license.txt for details.  */\n+\n+/* { dg-additional-options \"--param vect-epilogues-nomask=0\" } */\n+/* { dg-require-effective-target vect_float } */\n+\n+#include \"tsvc.h\"\n+\n+real_t s281(struct args_t * func_args)\n+{\n+//    crossing thresholds\n+//    index set splitting\n+//    reverse data access\n+\n+    initialise_arrays(__func__);\n+\n+    real_t x;\n+    for (int nl = 0; nl < iterations; nl++) {\n+        for (int i = 0; i < LEN_1D; i++) {\n+            x = a[LEN_1D-i-1] + b[i] * c[i];\n+            a[i] = x-(real_t)1.0;\n+            b[i] = x;\n+        }\n+        dummy(a, b, c, d, e, aa, bb, cc, 0.);\n+    }\n+\n+    return calc_checksum(__func__);\n+}\n+\n+int main (int argc, char **argv)\n+{\n+  int n1 = 1;\n+  int n3 = 1;\n+  int* ip;\n+  real_t s1,s2;\n+  init(&ip, &s1, &s2);\n+\n+  run(&s281, \"s281\", NULL);\n+\n+  return 0;\n+}\n+\n+/* { dg-final { scan-tree-dump \"vectorized 1 loops\" \"vect\" { xfail *-*-* } } } */"}, {"sha": "0b474c2e81a630b23f201e8df87fab35a792c443", "filename": "gcc/testsuite/gcc.dg/vect/tsvc/vect-tsvc-s291.c", "status": "added", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f81970b5f386630b98a33373c23dcc9234c6a980/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Ftsvc%2Fvect-tsvc-s291.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f81970b5f386630b98a33373c23dcc9234c6a980/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Ftsvc%2Fvect-tsvc-s291.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Ftsvc%2Fvect-tsvc-s291.c?ref=f81970b5f386630b98a33373c23dcc9234c6a980", "patch": "@@ -0,0 +1,42 @@\n+/*  This file is distributed under the University of Illinois Open Source\n+    License. See license.txt for details.  */\n+\n+/* { dg-additional-options \"--param vect-epilogues-nomask=0\" } */\n+/* { dg-require-effective-target vect_float } */\n+\n+#include \"tsvc.h\"\n+\n+real_t s291(struct args_t * func_args)\n+{\n+//    loop peeling\n+//    wrap around variable, 1 level\n+\n+    initialise_arrays(__func__);\n+\n+    int im1;\n+    for (int nl = 0; nl < 2*iterations; nl++) {\n+        im1 = LEN_1D-1;\n+        for (int i = 0; i < LEN_1D; i++) {\n+            a[i] = (b[i] + b[im1]) * (real_t).5;\n+            im1 = i;\n+        }\n+        dummy(a, b, c, d, e, aa, bb, cc, 0.);\n+    }\n+\n+    return calc_checksum(__func__);\n+}\n+\n+int main (int argc, char **argv)\n+{\n+  int n1 = 1;\n+  int n3 = 1;\n+  int* ip;\n+  real_t s1,s2;\n+  init(&ip, &s1, &s2);\n+\n+  run(&s291, \"s291\", NULL);\n+\n+  return 0;\n+}\n+\n+/* { dg-final { scan-tree-dump \"vectorized 1 loops\" \"vect\" { xfail *-*-* } } } */"}, {"sha": "174587563d4d6cc90bc6ce4c9b0a6ebb0d60532d", "filename": "gcc/testsuite/gcc.dg/vect/tsvc/vect-tsvc-s292.c", "status": "added", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f81970b5f386630b98a33373c23dcc9234c6a980/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Ftsvc%2Fvect-tsvc-s292.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f81970b5f386630b98a33373c23dcc9234c6a980/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Ftsvc%2Fvect-tsvc-s292.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Ftsvc%2Fvect-tsvc-s292.c?ref=f81970b5f386630b98a33373c23dcc9234c6a980", "patch": "@@ -0,0 +1,45 @@\n+/*  This file is distributed under the University of Illinois Open Source\n+    License. See license.txt for details.  */\n+\n+/* { dg-additional-options \"--param vect-epilogues-nomask=0\" } */\n+/* { dg-require-effective-target vect_float } */\n+\n+#include \"tsvc.h\"\n+\n+real_t s292(struct args_t * func_args)\n+{\n+//    loop peeling\n+//    wrap around variable, 2 levels\n+//    similar to S291\n+\n+    initialise_arrays(__func__);\n+\n+    int im1, im2;\n+    for (int nl = 0; nl < iterations; nl++) {\n+        im1 = LEN_1D-1;\n+        im2 = LEN_1D-2;\n+        for (int i = 0; i < LEN_1D; i++) {\n+            a[i] = (b[i] + b[im1] + b[im2]) * (real_t).333;\n+            im2 = im1;\n+            im1 = i;\n+        }\n+        dummy(a, b, c, d, e, aa, bb, cc, 0.);\n+    }\n+\n+    return calc_checksum(__func__);\n+}\n+\n+int main (int argc, char **argv)\n+{\n+  int n1 = 1;\n+  int n3 = 1;\n+  int* ip;\n+  real_t s1,s2;\n+  init(&ip, &s1, &s2);\n+\n+  run(&s292, \"s292\", NULL);\n+\n+  return 0;\n+}\n+\n+/* { dg-final { scan-tree-dump \"vectorized 1 loops\" \"vect\" { xfail *-*-* } } } */"}, {"sha": "321394811c8ad454abe14afcc440be7ad4a424b0", "filename": "gcc/testsuite/gcc.dg/vect/tsvc/vect-tsvc-s293.c", "status": "added", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f81970b5f386630b98a33373c23dcc9234c6a980/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Ftsvc%2Fvect-tsvc-s293.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f81970b5f386630b98a33373c23dcc9234c6a980/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Ftsvc%2Fvect-tsvc-s293.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Ftsvc%2Fvect-tsvc-s293.c?ref=f81970b5f386630b98a33373c23dcc9234c6a980", "patch": "@@ -0,0 +1,39 @@\n+/*  This file is distributed under the University of Illinois Open Source\n+    License. See license.txt for details.  */\n+\n+/* { dg-additional-options \"--param vect-epilogues-nomask=0\" } */\n+/* { dg-require-effective-target vect_float } */\n+\n+#include \"tsvc.h\"\n+\n+real_t s293(struct args_t * func_args)\n+{\n+//    loop peeling\n+//    a(i)=a(0) with actual dependence cycle, loop is vectorizable\n+\n+    initialise_arrays(__func__);\n+\n+    for (int nl = 0; nl < 4*iterations; nl++) {\n+        for (int i = 0; i < LEN_1D; i++) {\n+            a[i] = a[0];\n+        }\n+        dummy(a, b, c, d, e, aa, bb, cc, 0.);\n+    }\n+\n+    return calc_checksum(__func__);\n+}\n+\n+int main (int argc, char **argv)\n+{\n+  int n1 = 1;\n+  int n3 = 1;\n+  int* ip;\n+  real_t s1,s2;\n+  init(&ip, &s1, &s2);\n+\n+  run(&s293, \"s293\", NULL);\n+\n+  return 0;\n+}\n+\n+/* { dg-final { scan-tree-dump \"vectorized 1 loops\" \"vect\" { xfail *-*-* } } } */"}, {"sha": "11f5ee79feed9469ad5caeb244eea04e51d23630", "filename": "gcc/testsuite/gcc.dg/vect/tsvc/vect-tsvc-s311.c", "status": "added", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f81970b5f386630b98a33373c23dcc9234c6a980/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Ftsvc%2Fvect-tsvc-s311.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f81970b5f386630b98a33373c23dcc9234c6a980/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Ftsvc%2Fvect-tsvc-s311.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Ftsvc%2Fvect-tsvc-s311.c?ref=f81970b5f386630b98a33373c23dcc9234c6a980", "patch": "@@ -0,0 +1,41 @@\n+/*  This file is distributed under the University of Illinois Open Source\n+    License. See license.txt for details.  */\n+\n+/* { dg-additional-options \"--param vect-epilogues-nomask=0\" } */\n+/* { dg-require-effective-target vect_float } */\n+\n+#include \"tsvc.h\"\n+\n+real_t s311(struct args_t * func_args)\n+{\n+//    reductions\n+//    sum reduction\n+\n+    initialise_arrays(__func__);\n+\n+    real_t sum;\n+    for (int nl = 0; nl < iterations*10; nl++) {\n+        sum = (real_t)0.;\n+        for (int i = 0; i < LEN_1D; i++) {\n+            sum += a[i];\n+        }\n+        dummy(a, b, c, d, e, aa, bb, cc, sum);\n+    }\n+\n+    return calc_checksum(__func__);\n+}\n+\n+int main (int argc, char **argv)\n+{\n+  int n1 = 1;\n+  int n3 = 1;\n+  int* ip;\n+  real_t s1,s2;\n+  init(&ip, &s1, &s2);\n+\n+  run(&s311, \"s311\", NULL);\n+\n+  return 0;\n+}\n+\n+/* { dg-final { scan-tree-dump-times \"vectorized 1 loops\" 1 \"vect\" } } */\n\\ No newline at end of file"}, {"sha": "b8b2fa8f00e0333cf5d94c44899ccb1f490c69d4", "filename": "gcc/testsuite/gcc.dg/vect/tsvc/vect-tsvc-s3110.c", "status": "added", "additions": 52, "deletions": 0, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f81970b5f386630b98a33373c23dcc9234c6a980/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Ftsvc%2Fvect-tsvc-s3110.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f81970b5f386630b98a33373c23dcc9234c6a980/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Ftsvc%2Fvect-tsvc-s3110.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Ftsvc%2Fvect-tsvc-s3110.c?ref=f81970b5f386630b98a33373c23dcc9234c6a980", "patch": "@@ -0,0 +1,52 @@\n+/*  This file is distributed under the University of Illinois Open Source\n+    License. See license.txt for details.  */\n+\n+/* { dg-additional-options \"--param vect-epilogues-nomask=0\" } */\n+/* { dg-require-effective-target vect_float } */\n+\n+#include \"tsvc.h\"\n+\n+real_t s3110(struct args_t * func_args)\n+{\n+//    reductions\n+//    if to max with index reductio 2 dimensions\n+//    similar to S315\n+\n+    initialise_arrays(__func__);\n+\n+    int xindex, yindex;\n+    real_t max, chksum;\n+    for (int nl = 0; nl < 100*(iterations/(LEN_2D)); nl++) {\n+        max = aa[(0)][0];\n+        xindex = 0;\n+        yindex = 0;\n+        for (int i = 0; i < LEN_2D; i++) {\n+            for (int j = 0; j < LEN_2D; j++) {\n+                if (aa[i][j] > max) {\n+                    max = aa[i][j];\n+                    xindex = i;\n+                    yindex = j;\n+                }\n+            }\n+        }\n+        chksum = max + (real_t) xindex + (real_t) yindex;\n+        dummy(a, b, c, d, e, aa, bb, cc, chksum);\n+    }\n+\n+    return max + xindex+1 + yindex+1;\n+}\n+\n+int main (int argc, char **argv)\n+{\n+  int n1 = 1;\n+  int n3 = 1;\n+  int* ip;\n+  real_t s1,s2;\n+  init(&ip, &s1, &s2);\n+\n+  run(&s3110, \"s3110\", NULL);\n+\n+  return 0;\n+}\n+\n+/* { dg-final { scan-tree-dump \"vectorized 1 loops\" \"vect\" { xfail *-*-* } } } */"}, {"sha": "4ff11669e65ff5f654686bf310c33577c3273f44", "filename": "gcc/testsuite/gcc.dg/vect/tsvc/vect-tsvc-s3111.c", "status": "added", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f81970b5f386630b98a33373c23dcc9234c6a980/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Ftsvc%2Fvect-tsvc-s3111.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f81970b5f386630b98a33373c23dcc9234c6a980/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Ftsvc%2Fvect-tsvc-s3111.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Ftsvc%2Fvect-tsvc-s3111.c?ref=f81970b5f386630b98a33373c23dcc9234c6a980", "patch": "@@ -0,0 +1,44 @@\n+/*  This file is distributed under the University of Illinois Open Source\n+    License. See license.txt for details.  */\n+\n+/* { dg-additional-options \"--param vect-epilogues-nomask=0\" } */\n+/* { dg-require-effective-target vect_float } */\n+\n+#include \"tsvc.h\"\n+\n+real_t s3111(struct args_t * func_args)\n+{\n+//    reductions\n+//    conditional sum reduction\n+\n+    initialise_arrays(__func__);\n+\n+    real_t sum;\n+    for (int nl = 0; nl < iterations/2; nl++) {\n+        sum = 0.;\n+        for (int i = 0; i < LEN_1D; i++) {\n+            if (a[i] > (real_t)0.) {\n+                sum += a[i];\n+            }\n+        }\n+        dummy(a, b, c, d, e, aa, bb, cc, sum);\n+    }\n+\n+    return sum;\n+}\n+\n+int main (int argc, char **argv)\n+{\n+  int n1 = 1;\n+  int n3 = 1;\n+  int* ip;\n+  real_t s1,s2;\n+  init(&ip, &s1, &s2);\n+\n+  run(&s3111, \"s31111\", NULL);\n+\n+  return 0;\n+}\n+\n+\n+/* { dg-final { scan-tree-dump \"vectorized 1 loops\" \"vect\" { xfail *-*-* } } } */"}, {"sha": "ad2151357b7866cdde159d662694e50288c9a144", "filename": "gcc/testsuite/gcc.dg/vect/tsvc/vect-tsvc-s31111.c", "status": "added", "additions": 54, "deletions": 0, "changes": 54, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f81970b5f386630b98a33373c23dcc9234c6a980/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Ftsvc%2Fvect-tsvc-s31111.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f81970b5f386630b98a33373c23dcc9234c6a980/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Ftsvc%2Fvect-tsvc-s31111.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Ftsvc%2Fvect-tsvc-s31111.c?ref=f81970b5f386630b98a33373c23dcc9234c6a980", "patch": "@@ -0,0 +1,54 @@\n+/*  This file is distributed under the University of Illinois Open Source\n+    License. See license.txt for details.  */\n+\n+/* { dg-additional-options \"--param vect-epilogues-nomask=0\" } */\n+/* { dg-require-effective-target vect_float } */\n+\n+#include \"tsvc.h\"\n+\n+real_t test(real_t* A){\n+  real_t s = (real_t)0.0;\n+  for (int i = 0; i < 4; i++)\n+    s += A[i];\n+  return s;\n+}\n+\n+real_t s31111(struct args_t * func_args)\n+{\n+//    reductions\n+//    sum reduction\n+\n+    initialise_arrays(__func__);\n+\n+    real_t sum;\n+    for (int nl = 0; nl < 2000*iterations; nl++) {\n+        sum = (real_t)0.;\n+        sum += test(a);\n+        sum += test(&a[4]);\n+        sum += test(&a[8]);\n+        sum += test(&a[12]);\n+        sum += test(&a[16]);\n+        sum += test(&a[20]);\n+        sum += test(&a[24]);\n+        sum += test(&a[28]);\n+        dummy(a, b, c, d, e, aa, bb, cc, sum);\n+    }\n+\n+    return calc_checksum(__func__);\n+}\n+\n+int main (int argc, char **argv)\n+{\n+  int n1 = 1;\n+  int n3 = 1;\n+  int* ip;\n+  real_t s1,s2;\n+  init(&ip, &s1, &s2);\n+\n+  run(&s31111, \"s31111\", NULL);\n+\n+  return 0;\n+}\n+\n+\n+/* { dg-final { scan-tree-dump-times \"vectorized 1 loops\" 1 \"vect\" } } */\n\\ No newline at end of file"}, {"sha": "ec81ad80970e620c476ac4b7e2ea69e8eb840f58", "filename": "gcc/testsuite/gcc.dg/vect/tsvc/vect-tsvc-s3112.c", "status": "added", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f81970b5f386630b98a33373c23dcc9234c6a980/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Ftsvc%2Fvect-tsvc-s3112.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f81970b5f386630b98a33373c23dcc9234c6a980/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Ftsvc%2Fvect-tsvc-s3112.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Ftsvc%2Fvect-tsvc-s3112.c?ref=f81970b5f386630b98a33373c23dcc9234c6a980", "patch": "@@ -0,0 +1,42 @@\n+/*  This file is distributed under the University of Illinois Open Source\n+    License. See license.txt for details.  */\n+\n+/* { dg-additional-options \"--param vect-epilogues-nomask=0\" } */\n+/* { dg-require-effective-target vect_float } */\n+\n+#include \"tsvc.h\"\n+\n+real_t s3112(struct args_t * func_args)\n+{\n+//    reductions\n+//    sum reduction saving running sums\n+\n+    initialise_arrays(__func__);\n+\n+    real_t sum;\n+    for (int nl = 0; nl < iterations; nl++) {\n+        sum = (real_t)0.0;\n+        for (int i = 0; i < LEN_1D; i++) {\n+            sum += a[i];\n+            b[i] = sum;\n+        }\n+        dummy(a, b, c, d, e, aa, bb, cc, sum);\n+    }\n+\n+    return sum;\n+}\n+\n+int main (int argc, char **argv)\n+{\n+  int n1 = 1;\n+  int n3 = 1;\n+  int* ip;\n+  real_t s1,s2;\n+  init(&ip, &s1, &s2);\n+\n+  run(&s3112, \"s3112\", NULL);\n+\n+  return 0;\n+}\n+\n+/* { dg-final { scan-tree-dump \"vectorized 1 loops\" \"vect\" { xfail *-*-* } } } */"}, {"sha": "bff35ca0585c26ff8e51c161daa45b3c43bff89a", "filename": "gcc/testsuite/gcc.dg/vect/tsvc/vect-tsvc-s3113.c", "status": "added", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f81970b5f386630b98a33373c23dcc9234c6a980/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Ftsvc%2Fvect-tsvc-s3113.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f81970b5f386630b98a33373c23dcc9234c6a980/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Ftsvc%2Fvect-tsvc-s3113.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Ftsvc%2Fvect-tsvc-s3113.c?ref=f81970b5f386630b98a33373c23dcc9234c6a980", "patch": "@@ -0,0 +1,43 @@\n+/*  This file is distributed under the University of Illinois Open Source\n+    License. See license.txt for details.  */\n+\n+/* { dg-additional-options \"--param vect-epilogues-nomask=0\" } */\n+/* { dg-require-effective-target vect_float } */\n+\n+#include \"tsvc.h\"\n+\n+real_t s3113(struct args_t * func_args)\n+{\n+//    reductions\n+//    maximum of absolute value\n+\n+    initialise_arrays(__func__);\n+\n+    real_t max;\n+    for (int nl = 0; nl < iterations*4; nl++) {\n+        max = ABS(a[0]);\n+        for (int i = 0; i < LEN_1D; i++) {\n+            if ((ABS(a[i])) > max) {\n+                max = ABS(a[i]);\n+            }\n+        }\n+        dummy(a, b, c, d, e, aa, bb, cc, max);\n+    }\n+\n+    return max;\n+}\n+\n+int main (int argc, char **argv)\n+{\n+  int n1 = 1;\n+  int n3 = 1;\n+  int* ip;\n+  real_t s1,s2;\n+  init(&ip, &s1, &s2);\n+\n+  run(&s3113, \"s3113\", NULL);\n+\n+  return 0;\n+}\n+\n+/* { dg-final { scan-tree-dump \"vectorized 1 loops\" \"vect\" { xfail *-*-* } } } */"}, {"sha": "ab0571aedc94f46e3ae2b4fbeb06d04537c3299c", "filename": "gcc/testsuite/gcc.dg/vect/tsvc/vect-tsvc-s312.c", "status": "added", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f81970b5f386630b98a33373c23dcc9234c6a980/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Ftsvc%2Fvect-tsvc-s312.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f81970b5f386630b98a33373c23dcc9234c6a980/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Ftsvc%2Fvect-tsvc-s312.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Ftsvc%2Fvect-tsvc-s312.c?ref=f81970b5f386630b98a33373c23dcc9234c6a980", "patch": "@@ -0,0 +1,41 @@\n+/*  This file is distributed under the University of Illinois Open Source\n+    License. See license.txt for details.  */\n+\n+/* { dg-additional-options \"--param vect-epilogues-nomask=0\" } */\n+/* { dg-require-effective-target vect_float } */\n+\n+#include \"tsvc.h\"\n+\n+real_t s312(struct args_t * func_args)\n+{\n+//    reductions\n+//    product reduction\n+\n+    initialise_arrays(__func__);\n+\n+    real_t prod;\n+    for (int nl = 0; nl < 10*iterations; nl++) {\n+        prod = (real_t)1.;\n+        for (int i = 0; i < LEN_1D; i++) {\n+            prod *= a[i];\n+        }\n+        dummy(a, b, c, d, e, aa, bb, cc, prod);\n+    }\n+\n+    return prod;\n+}\n+\n+int main (int argc, char **argv)\n+{\n+  int n1 = 1;\n+  int n3 = 1;\n+  int* ip;\n+  real_t s1,s2;\n+  init(&ip, &s1, &s2);\n+\n+  run(&s312, \"s312\", NULL);\n+\n+  return 0;\n+}\n+\n+/* { dg-final { scan-tree-dump \"vectorized 1 loops\" \"vect\" { xfail *-*-* } } } */"}, {"sha": "e58a5391f6fb65b6ef2a2a9511c608b61a1a005b", "filename": "gcc/testsuite/gcc.dg/vect/tsvc/vect-tsvc-s313.c", "status": "added", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f81970b5f386630b98a33373c23dcc9234c6a980/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Ftsvc%2Fvect-tsvc-s313.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f81970b5f386630b98a33373c23dcc9234c6a980/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Ftsvc%2Fvect-tsvc-s313.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Ftsvc%2Fvect-tsvc-s313.c?ref=f81970b5f386630b98a33373c23dcc9234c6a980", "patch": "@@ -0,0 +1,41 @@\n+/*  This file is distributed under the University of Illinois Open Source\n+    License. See license.txt for details.  */\n+\n+/* { dg-additional-options \"--param vect-epilogues-nomask=0\" } */\n+/* { dg-require-effective-target vect_float } */\n+\n+#include \"tsvc.h\"\n+\n+real_t s313(struct args_t * func_args)\n+{\n+//    reductions\n+//    dot product\n+\n+    initialise_arrays(__func__);\n+\n+    real_t dot;\n+    for (int nl = 0; nl < iterations*5; nl++) {\n+        dot = (real_t)0.;\n+        for (int i = 0; i < LEN_1D; i++) {\n+            dot += a[i] * b[i];\n+        }\n+        dummy(a, b, c, d, e, aa, bb, cc, dot);\n+    }\n+\n+    return dot;\n+}\n+\n+int main (int argc, char **argv)\n+{\n+  int n1 = 1;\n+  int n3 = 1;\n+  int* ip;\n+  real_t s1,s2;\n+  init(&ip, &s1, &s2);\n+\n+  run(&s313, \"s313\", NULL);\n+\n+  return 0;\n+}\n+\n+/* { dg-final { scan-tree-dump-times \"vectorized 1 loops\" 1 \"vect\" } } */\n\\ No newline at end of file"}, {"sha": "87dd706e01d7d1e2dd6f12ab093c4b748930c9a4", "filename": "gcc/testsuite/gcc.dg/vect/tsvc/vect-tsvc-s314.c", "status": "added", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f81970b5f386630b98a33373c23dcc9234c6a980/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Ftsvc%2Fvect-tsvc-s314.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f81970b5f386630b98a33373c23dcc9234c6a980/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Ftsvc%2Fvect-tsvc-s314.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Ftsvc%2Fvect-tsvc-s314.c?ref=f81970b5f386630b98a33373c23dcc9234c6a980", "patch": "@@ -0,0 +1,43 @@\n+/*  This file is distributed under the University of Illinois Open Source\n+    License. See license.txt for details.  */\n+\n+/* { dg-additional-options \"--param vect-epilogues-nomask=0\" } */\n+/* { dg-require-effective-target vect_float } */\n+\n+#include \"tsvc.h\"\n+\n+real_t s314(struct args_t * func_args)\n+{\n+//    reductions\n+//    if to max reduction\n+\n+    initialise_arrays(__func__);\n+\n+    real_t x;\n+    for (int nl = 0; nl < iterations*5; nl++) {\n+        x = a[0];\n+        for (int i = 0; i < LEN_1D; i++) {\n+            if (a[i] > x) {\n+                x = a[i];\n+            }\n+        }\n+        dummy(a, b, c, d, e, aa, bb, cc, x);\n+    }\n+\n+    return x;\n+}\n+\n+int main (int argc, char **argv)\n+{\n+  int n1 = 1;\n+  int n3 = 1;\n+  int* ip;\n+  real_t s1,s2;\n+  init(&ip, &s1, &s2);\n+\n+  run(&s314, \"s314\", NULL);\n+\n+  return 0;\n+}\n+\n+/* { dg-final { scan-tree-dump \"vectorized 1 loops\" \"vect\" { xfail *-*-* } } } */"}, {"sha": "8d734a0f7b657c60f49b1efcd0f344cc145231fc", "filename": "gcc/testsuite/gcc.dg/vect/tsvc/vect-tsvc-s315.c", "status": "added", "additions": 50, "deletions": 0, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f81970b5f386630b98a33373c23dcc9234c6a980/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Ftsvc%2Fvect-tsvc-s315.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f81970b5f386630b98a33373c23dcc9234c6a980/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Ftsvc%2Fvect-tsvc-s315.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Ftsvc%2Fvect-tsvc-s315.c?ref=f81970b5f386630b98a33373c23dcc9234c6a980", "patch": "@@ -0,0 +1,50 @@\n+/*  This file is distributed under the University of Illinois Open Source\n+    License. See license.txt for details.  */\n+\n+/* { dg-additional-options \"--param vect-epilogues-nomask=0\" } */\n+/* { dg-require-effective-target vect_float } */\n+\n+#include \"tsvc.h\"\n+\n+real_t s315(struct args_t * func_args)\n+{\n+//    reductions\n+//    if to max with index reductio 1 dimension\n+\n+    initialise_arrays(__func__);\n+\n+    for (int i = 0; i < LEN_1D; i++)\n+        a[i] = (i * 7) % LEN_1D;\n+\n+    real_t x, chksum;\n+    int index;\n+    for (int nl = 0; nl < iterations; nl++) {\n+        x = a[0];\n+        index = 0;\n+        for (int i = 0; i < LEN_1D; ++i) {\n+            if (a[i] > x) {\n+                x = a[i];\n+                index = i;\n+            }\n+        }\n+        chksum = x + (real_t) index;\n+        dummy(a, b, c, d, e, aa, bb, cc, chksum);\n+    }\n+\n+    return index + x + 1;\n+}\n+\n+int main (int argc, char **argv)\n+{\n+  int n1 = 1;\n+  int n3 = 1;\n+  int* ip;\n+  real_t s1,s2;\n+  init(&ip, &s1, &s2);\n+\n+  run(&s315, \"s315\", NULL);\n+\n+  return 0;\n+}\n+\n+/* { dg-final { scan-tree-dump-times \"vectorized 1 loops\" 1 \"vect\" } } */\n\\ No newline at end of file"}, {"sha": "4a711bcc89d6cdc1f5172e7614d160f07e7db44e", "filename": "gcc/testsuite/gcc.dg/vect/tsvc/vect-tsvc-s316.c", "status": "added", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f81970b5f386630b98a33373c23dcc9234c6a980/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Ftsvc%2Fvect-tsvc-s316.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f81970b5f386630b98a33373c23dcc9234c6a980/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Ftsvc%2Fvect-tsvc-s316.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Ftsvc%2Fvect-tsvc-s316.c?ref=f81970b5f386630b98a33373c23dcc9234c6a980", "patch": "@@ -0,0 +1,43 @@\n+/*  This file is distributed under the University of Illinois Open Source\n+    License. See license.txt for details.  */\n+\n+/* { dg-additional-options \"--param vect-epilogues-nomask=0\" } */\n+/* { dg-require-effective-target vect_float } */\n+\n+#include \"tsvc.h\"\n+\n+real_t s316(struct args_t * func_args)\n+{\n+//    reductions\n+//    if to min reduction\n+\n+    initialise_arrays(__func__);\n+\n+    real_t x;\n+    for (int nl = 0; nl < iterations*5; nl++) {\n+        x = a[0];\n+        for (int i = 1; i < LEN_1D; ++i) {\n+            if (a[i] < x) {\n+                x = a[i];\n+            }\n+        }\n+        dummy(a, b, c, d, e, aa, bb, cc, x);\n+    }\n+\n+    return x;\n+}\n+\n+int main (int argc, char **argv)\n+{\n+  int n1 = 1;\n+  int n3 = 1;\n+  int* ip;\n+  real_t s1,s2;\n+  init(&ip, &s1, &s2);\n+\n+  run(&s316, \"s316\", NULL);\n+\n+  return 0;\n+}\n+\n+/* { dg-final { scan-tree-dump \"vectorized 1 loops\" \"vect\" { xfail *-*-* } } } */"}, {"sha": "126b4521db335de2646deab0d8c0693f9ce219b2", "filename": "gcc/testsuite/gcc.dg/vect/tsvc/vect-tsvc-s317.c", "status": "added", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f81970b5f386630b98a33373c23dcc9234c6a980/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Ftsvc%2Fvect-tsvc-s317.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f81970b5f386630b98a33373c23dcc9234c6a980/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Ftsvc%2Fvect-tsvc-s317.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Ftsvc%2Fvect-tsvc-s317.c?ref=f81970b5f386630b98a33373c23dcc9234c6a980", "patch": "@@ -0,0 +1,43 @@\n+/*  This file is distributed under the University of Illinois Open Source\n+    License. See license.txt for details.  */\n+\n+/* { dg-additional-options \"--param vect-epilogues-nomask=0\" } */\n+/* { dg-require-effective-target vect_float } */\n+\n+#include \"tsvc.h\"\n+\n+real_t s317(struct args_t * func_args)\n+{\n+//    reductions\n+//    product reductio vectorize with\n+//    1. scalar expansion of factor, and product reduction\n+//    2. closed form solution: q = factor**n\n+\n+    initialise_arrays(__func__);\n+\n+    real_t q;\n+    for (int nl = 0; nl < 5*iterations; nl++) {\n+        q = (real_t)1.;\n+        for (int i = 0; i < LEN_1D/2; i++) {\n+            q *= (real_t).99;\n+        }\n+        dummy(a, b, c, d, e, aa, bb, cc, q);\n+    }\n+\n+    return q;\n+}\n+\n+int main (int argc, char **argv)\n+{\n+  int n1 = 1;\n+  int n3 = 1;\n+  int* ip;\n+  real_t s1,s2;\n+  init(&ip, &s1, &s2);\n+\n+  run(&s317, \"s317\", NULL);\n+\n+  return 0;\n+}\n+\n+/* { dg-final { scan-tree-dump \"vectorized 1 loops\" \"vect\" { xfail *-*-* } } } */"}, {"sha": "f4e1a4b484b9fb90e6f9d46966a535cc7ff0b69e", "filename": "gcc/testsuite/gcc.dg/vect/tsvc/vect-tsvc-s318.c", "status": "added", "additions": 54, "deletions": 0, "changes": 54, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f81970b5f386630b98a33373c23dcc9234c6a980/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Ftsvc%2Fvect-tsvc-s318.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f81970b5f386630b98a33373c23dcc9234c6a980/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Ftsvc%2Fvect-tsvc-s318.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Ftsvc%2Fvect-tsvc-s318.c?ref=f81970b5f386630b98a33373c23dcc9234c6a980", "patch": "@@ -0,0 +1,54 @@\n+/*  This file is distributed under the University of Illinois Open Source\n+    License. See license.txt for details.  */\n+\n+/* { dg-additional-options \"--param vect-epilogues-nomask=0\" } */\n+/* { dg-require-effective-target vect_float } */\n+\n+#include \"tsvc.h\"\n+\n+real_t s318(struct args_t * func_args)\n+{\n+//    reductions\n+//    isamax, max absolute value, increments not equal to 1\n+\n+    int inc = *(int*)func_args->arg_info;\n+\n+    initialise_arrays(__func__);\n+\n+    int k, index;\n+    real_t max, chksum;\n+    for (int nl = 0; nl < iterations/2; nl++) {\n+        k = 0;\n+        index = 0;\n+        max = ABS(a[0]);\n+        k += inc;\n+        for (int i = 1; i < LEN_1D; i++) {\n+            if (ABS(a[k]) <= max) {\n+                goto L5;\n+            }\n+            index = i;\n+            max = ABS(a[k]);\n+L5:\n+            k += inc;\n+        }\n+        chksum = max + (real_t) index;\n+        dummy(a, b, c, d, e, aa, bb, cc, chksum);\n+    }\n+\n+    return max + index + 1;\n+}\n+\n+int main (int argc, char **argv)\n+{\n+  int n1 = 1;\n+  int n3 = 1;\n+  int* ip;\n+  real_t s1,s2;\n+  init(&ip, &s1, &s2);\n+\n+  run(&s318, \"s318\", &n1);\n+\n+  return 0;\n+}\n+\n+/* { dg-final { scan-tree-dump \"vectorized 1 loops\" \"vect\" { xfail *-*-* } } } */"}, {"sha": "dbb0bd3d5efd2b6a86449595a0fb138d11dba35a", "filename": "gcc/testsuite/gcc.dg/vect/tsvc/vect-tsvc-s319.c", "status": "added", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f81970b5f386630b98a33373c23dcc9234c6a980/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Ftsvc%2Fvect-tsvc-s319.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f81970b5f386630b98a33373c23dcc9234c6a980/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Ftsvc%2Fvect-tsvc-s319.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Ftsvc%2Fvect-tsvc-s319.c?ref=f81970b5f386630b98a33373c23dcc9234c6a980", "patch": "@@ -0,0 +1,44 @@\n+/*  This file is distributed under the University of Illinois Open Source\n+    License. See license.txt for details.  */\n+\n+/* { dg-additional-options \"--param vect-epilogues-nomask=0\" } */\n+/* { dg-require-effective-target vect_float } */\n+\n+#include \"tsvc.h\"\n+\n+real_t s319(struct args_t * func_args)\n+{\n+//    reductions\n+//    coupled reductions\n+\n+    initialise_arrays(__func__);\n+\n+    real_t sum;\n+    for (int nl = 0; nl < 2*iterations; nl++) {\n+        sum = 0.;\n+        for (int i = 0; i < LEN_1D; i++) {\n+            a[i] = c[i] + d[i];\n+            sum += a[i];\n+            b[i] = c[i] + e[i];\n+            sum += b[i];\n+        }\n+        dummy(a, b, c, d, e, aa, bb, cc, sum);\n+    }\n+\n+    return sum;\n+}\n+\n+int main (int argc, char **argv)\n+{\n+  int n1 = 1;\n+  int n3 = 1;\n+  int* ip;\n+  real_t s1,s2;\n+  init(&ip, &s1, &s2);\n+\n+  run(&s319, \"s319\", NULL);\n+\n+  return 0;\n+}\n+\n+/* { dg-final { scan-tree-dump \"vectorized 1 loops\" \"vect\" { xfail *-*-* } } } */"}, {"sha": "3011e56ad1ae624907117d762025fb757b5e4b04", "filename": "gcc/testsuite/gcc.dg/vect/tsvc/vect-tsvc-s321.c", "status": "added", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f81970b5f386630b98a33373c23dcc9234c6a980/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Ftsvc%2Fvect-tsvc-s321.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f81970b5f386630b98a33373c23dcc9234c6a980/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Ftsvc%2Fvect-tsvc-s321.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Ftsvc%2Fvect-tsvc-s321.c?ref=f81970b5f386630b98a33373c23dcc9234c6a980", "patch": "@@ -0,0 +1,39 @@\n+/*  This file is distributed under the University of Illinois Open Source\n+    License. See license.txt for details.  */\n+\n+/* { dg-additional-options \"--param vect-epilogues-nomask=0\" } */\n+/* { dg-require-effective-target vect_float } */\n+\n+#include \"tsvc.h\"\n+\n+real_t s321(struct args_t * func_args)\n+{\n+//    recurrences\n+//    first order linear recurrence\n+\n+    initialise_arrays(__func__);\n+\n+    for (int nl = 0; nl < iterations; nl++) {\n+        for (int i = 1; i < LEN_1D; i++) {\n+            a[i] += a[i-1] * b[i];\n+        }\n+        dummy(a, b, c, d, e, aa, bb, cc, 0.);\n+    }\n+\n+    return calc_checksum(__func__);\n+}\n+\n+int main (int argc, char **argv)\n+{\n+  int n1 = 1;\n+  int n3 = 1;\n+  int* ip;\n+  real_t s1,s2;\n+  init(&ip, &s1, &s2);\n+\n+  run(&s321, \"s321\", NULL);\n+\n+  return 0;\n+}\n+\n+/* { dg-final { scan-tree-dump \"vectorized 1 loops\" \"vect\" { xfail *-*-* } } } */"}, {"sha": "075e8117d918d248af320e33c63ddbe927f6700a", "filename": "gcc/testsuite/gcc.dg/vect/tsvc/vect-tsvc-s322.c", "status": "added", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f81970b5f386630b98a33373c23dcc9234c6a980/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Ftsvc%2Fvect-tsvc-s322.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f81970b5f386630b98a33373c23dcc9234c6a980/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Ftsvc%2Fvect-tsvc-s322.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Ftsvc%2Fvect-tsvc-s322.c?ref=f81970b5f386630b98a33373c23dcc9234c6a980", "patch": "@@ -0,0 +1,39 @@\n+/*  This file is distributed under the University of Illinois Open Source\n+    License. See license.txt for details.  */\n+\n+/* { dg-additional-options \"--param vect-epilogues-nomask=0\" } */\n+/* { dg-require-effective-target vect_float } */\n+\n+#include \"tsvc.h\"\n+\n+real_t s322(struct args_t * func_args)\n+{\n+//    recurrences\n+//    second order linear recurrence\n+\n+    initialise_arrays(__func__);\n+\n+    for (int nl = 0; nl < iterations/2; nl++) {\n+        for (int i = 2; i < LEN_1D; i++) {\n+            a[i] = a[i] + a[i - 1] * b[i] + a[i - 2] * c[i];\n+        }\n+        dummy(a, b, c, d, e, aa, bb, cc, 0.);\n+    }\n+\n+    return calc_checksum(__func__);\n+}\n+\n+int main (int argc, char **argv)\n+{\n+  int n1 = 1;\n+  int n3 = 1;\n+  int* ip;\n+  real_t s1,s2;\n+  init(&ip, &s1, &s2);\n+\n+  run(&s322, \"s322\", NULL);\n+\n+  return 0;\n+}\n+\n+/* { dg-final { scan-tree-dump \"vectorized 1 loops\" \"vect\" { xfail *-*-* } } } */"}, {"sha": "c95345d561f78cd8bc8f870c526638b6d703d7c0", "filename": "gcc/testsuite/gcc.dg/vect/tsvc/vect-tsvc-s323.c", "status": "added", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f81970b5f386630b98a33373c23dcc9234c6a980/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Ftsvc%2Fvect-tsvc-s323.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f81970b5f386630b98a33373c23dcc9234c6a980/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Ftsvc%2Fvect-tsvc-s323.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Ftsvc%2Fvect-tsvc-s323.c?ref=f81970b5f386630b98a33373c23dcc9234c6a980", "patch": "@@ -0,0 +1,40 @@\n+/*  This file is distributed under the University of Illinois Open Source\n+    License. See license.txt for details.  */\n+\n+/* { dg-additional-options \"--param vect-epilogues-nomask=0\" } */\n+/* { dg-require-effective-target vect_float } */\n+\n+#include \"tsvc.h\"\n+\n+real_t s323(struct args_t * func_args)\n+{\n+//    recurrences\n+//    coupled recurrence\n+\n+    initialise_arrays(__func__);\n+\n+    for (int nl = 0; nl < iterations/2; nl++) {\n+        for (int i = 1; i < LEN_1D; i++) {\n+            a[i] = b[i-1] + c[i] * d[i];\n+            b[i] = a[i] + c[i] * e[i];\n+        }\n+        dummy(a, b, c, d, e, aa, bb, cc, 0.);\n+    }\n+\n+    return calc_checksum(__func__);\n+}\n+\n+int main (int argc, char **argv)\n+{\n+  int n1 = 1;\n+  int n3 = 1;\n+  int* ip;\n+  real_t s1,s2;\n+  init(&ip, &s1, &s2);\n+\n+  run(&s323, \"s323\", NULL);\n+\n+  return 0;\n+}\n+\n+/* { dg-final { scan-tree-dump \"vectorized 1 loops\" \"vect\" { xfail *-*-* } } } */"}, {"sha": "51ca17396bece80f9d78b1810cc1e3464fec6756", "filename": "gcc/testsuite/gcc.dg/vect/tsvc/vect-tsvc-s3251.c", "status": "added", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f81970b5f386630b98a33373c23dcc9234c6a980/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Ftsvc%2Fvect-tsvc-s3251.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f81970b5f386630b98a33373c23dcc9234c6a980/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Ftsvc%2Fvect-tsvc-s3251.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Ftsvc%2Fvect-tsvc-s3251.c?ref=f81970b5f386630b98a33373c23dcc9234c6a980", "patch": "@@ -0,0 +1,41 @@\n+/*  This file is distributed under the University of Illinois Open Source\n+    License. See license.txt for details.  */\n+\n+/* { dg-additional-options \"--param vect-epilogues-nomask=0\" } */\n+/* { dg-require-effective-target vect_float } */\n+\n+#include \"tsvc.h\"\n+\n+real_t s3251(struct args_t * func_args)\n+{\n+//    scalar and array expansion\n+//    scalar expansion\n+\n+    initialise_arrays(__func__);\n+\n+    for (int nl = 0; nl < iterations; nl++) {\n+        for (int i = 0; i < LEN_1D-1; i++){\n+            a[i+1] = b[i]+c[i];\n+            b[i]   = c[i]*e[i];\n+            d[i]   = a[i]*e[i];\n+        }\n+        dummy(a, b, c, d, e, aa, bb, cc, 0.);\n+    }\n+\n+    return calc_checksum(__func__);\n+}\n+\n+int main (int argc, char **argv)\n+{\n+  int n1 = 1;\n+  int n3 = 1;\n+  int* ip;\n+  real_t s1,s2;\n+  init(&ip, &s1, &s2);\n+\n+  run(&s3251, \"s3251\", NULL);\n+\n+  return 0;\n+}\n+\n+/* { dg-final { scan-tree-dump-times \"vectorized 1 loops\" 1 \"vect\" } } */\n\\ No newline at end of file"}, {"sha": "e580df75b2166fae559bbae26b114b8855a65675", "filename": "gcc/testsuite/gcc.dg/vect/tsvc/vect-tsvc-s331.c", "status": "added", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f81970b5f386630b98a33373c23dcc9234c6a980/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Ftsvc%2Fvect-tsvc-s331.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f81970b5f386630b98a33373c23dcc9234c6a980/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Ftsvc%2Fvect-tsvc-s331.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Ftsvc%2Fvect-tsvc-s331.c?ref=f81970b5f386630b98a33373c23dcc9234c6a980", "patch": "@@ -0,0 +1,45 @@\n+/*  This file is distributed under the University of Illinois Open Source\n+    License. See license.txt for details.  */\n+\n+/* { dg-additional-options \"--param vect-epilogues-nomask=0\" } */\n+/* { dg-require-effective-target vect_float } */\n+\n+#include \"tsvc.h\"\n+\n+real_t s331(struct args_t * func_args)\n+{\n+//    search loops\n+//    if to last-1\n+\n+    initialise_arrays(__func__);\n+\n+    int j;\n+    real_t chksum;\n+    for (int nl = 0; nl < iterations; nl++) {\n+        j = -1;\n+        for (int i = 0; i < LEN_1D; i++) {\n+            if (a[i] < (real_t)0.) {\n+                j = i;\n+            }\n+        }\n+        chksum = (real_t) j;\n+        dummy(a, b, c, d, e, aa, bb, cc, chksum);\n+    }\n+\n+    return j+1;\n+}\n+\n+int main (int argc, char **argv)\n+{\n+  int n1 = 1;\n+  int n3 = 1;\n+  int* ip;\n+  real_t s1,s2;\n+  init(&ip, &s1, &s2);\n+\n+  run(&s331, \"s331\", NULL);\n+\n+  return 0;\n+}\n+\n+/* { dg-final { scan-tree-dump-times \"vectorized 1 loops\" 1 \"vect\" } } */\n\\ No newline at end of file"}, {"sha": "3fd490b3797d9f033c8804b813ee6e222aa45a3b", "filename": "gcc/testsuite/gcc.dg/vect/tsvc/vect-tsvc-s332.c", "status": "added", "additions": 52, "deletions": 0, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f81970b5f386630b98a33373c23dcc9234c6a980/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Ftsvc%2Fvect-tsvc-s332.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f81970b5f386630b98a33373c23dcc9234c6a980/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Ftsvc%2Fvect-tsvc-s332.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Ftsvc%2Fvect-tsvc-s332.c?ref=f81970b5f386630b98a33373c23dcc9234c6a980", "patch": "@@ -0,0 +1,52 @@\n+/*  This file is distributed under the University of Illinois Open Source\n+    License. See license.txt for details.  */\n+\n+/* { dg-additional-options \"--param vect-epilogues-nomask=0\" } */\n+/* { dg-require-effective-target vect_float } */\n+\n+#include \"tsvc.h\"\n+\n+real_t s332(struct args_t * func_args)\n+{\n+//    search loops\n+//    first value greater than threshold\n+\n+    int t = *(int*)func_args->arg_info;\n+\n+    initialise_arrays(__func__);\n+\n+    int index;\n+    real_t value;\n+    real_t chksum;\n+    for (int nl = 0; nl < iterations; nl++) {\n+        index = -2;\n+        value = -1.;\n+        for (int i = 0; i < LEN_1D; i++) {\n+            if (a[i] > t) {\n+                index = i;\n+                value = a[i];\n+                goto L20;\n+            }\n+        }\n+L20:\n+        chksum = value + (real_t) index;\n+        dummy(a, b, c, d, e, aa, bb, cc, chksum);\n+    }\n+\n+    return value;\n+}\n+\n+int main (int argc, char **argv)\n+{\n+  int n1 = 1;\n+  int n3 = 1;\n+  int* ip;\n+  real_t s1,s2;\n+  init(&ip, &s1, &s2);\n+\n+  run(&s332, \"s332\", &s1);\n+\n+  return 0;\n+}\n+\n+/* { dg-final { scan-tree-dump \"vectorized 1 loops\" \"vect\" { xfail *-*-* } } } */"}, {"sha": "2aa2fa5119ff1b55acb8ddbfd57a23662626dab3", "filename": "gcc/testsuite/gcc.dg/vect/tsvc/vect-tsvc-s341.c", "status": "added", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f81970b5f386630b98a33373c23dcc9234c6a980/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Ftsvc%2Fvect-tsvc-s341.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f81970b5f386630b98a33373c23dcc9234c6a980/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Ftsvc%2Fvect-tsvc-s341.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Ftsvc%2Fvect-tsvc-s341.c?ref=f81970b5f386630b98a33373c23dcc9234c6a980", "patch": "@@ -0,0 +1,45 @@\n+/*  This file is distributed under the University of Illinois Open Source\n+    License. See license.txt for details.  */\n+\n+/* { dg-additional-options \"--param vect-epilogues-nomask=0\" } */\n+/* { dg-require-effective-target vect_float } */\n+\n+#include \"tsvc.h\"\n+\n+real_t s341(struct args_t * func_args)\n+{\n+//    packing\n+//    pack positive values\n+//    not vectorizable, value of j in unknown at each iteration\n+\n+    initialise_arrays(__func__);\n+\n+    int j;\n+    for (int nl = 0; nl < iterations; nl++) {\n+        j = -1;\n+        for (int i = 0; i < LEN_1D; i++) {\n+            if (b[i] > (real_t)0.) {\n+                j++;\n+                a[j] = b[i];\n+            }\n+        }\n+        dummy(a, b, c, d, e, aa, bb, cc, 0.);\n+    }\n+\n+    return calc_checksum(__func__);\n+}\n+\n+int main (int argc, char **argv)\n+{\n+  int n1 = 1;\n+  int n3 = 1;\n+  int* ip;\n+  real_t s1,s2;\n+  init(&ip, &s1, &s2);\n+\n+  run(&s341, \"s341\", NULL);\n+\n+  return 0;\n+}\n+\n+/* { dg-final { scan-tree-dump \"vectorized 1 loops\" \"vect\" { xfail *-*-* } } } */"}, {"sha": "a2af1c76b3c1fc769dffebcdaaf994e453cdaf82", "filename": "gcc/testsuite/gcc.dg/vect/tsvc/vect-tsvc-s342.c", "status": "added", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f81970b5f386630b98a33373c23dcc9234c6a980/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Ftsvc%2Fvect-tsvc-s342.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f81970b5f386630b98a33373c23dcc9234c6a980/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Ftsvc%2Fvect-tsvc-s342.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Ftsvc%2Fvect-tsvc-s342.c?ref=f81970b5f386630b98a33373c23dcc9234c6a980", "patch": "@@ -0,0 +1,45 @@\n+/*  This file is distributed under the University of Illinois Open Source\n+    License. See license.txt for details.  */\n+\n+/* { dg-additional-options \"--param vect-epilogues-nomask=0\" } */\n+/* { dg-require-effective-target vect_float } */\n+\n+#include \"tsvc.h\"\n+\n+real_t s342(struct args_t * func_args)\n+{\n+//    packing\n+//    unpacking\n+//    not vectorizable, value of j in unknown at each iteration\n+\n+    initialise_arrays(__func__);\n+\n+    int j = 0;\n+    for (int nl = 0; nl < iterations; nl++) {\n+        j = -1;\n+        for (int i = 0; i < LEN_1D; i++) {\n+            if (a[i] > (real_t)0.) {\n+                j++;\n+                a[i] = b[j];\n+            }\n+        }\n+        dummy(a, b, c, d, e, aa, bb, cc, 0.);\n+    }\n+\n+    return calc_checksum(__func__);\n+}\n+\n+int main (int argc, char **argv)\n+{\n+  int n1 = 1;\n+  int n3 = 1;\n+  int* ip;\n+  real_t s1,s2;\n+  init(&ip, &s1, &s2);\n+\n+  run(&s342, \"s342\", NULL);\n+\n+  return 0;\n+}\n+\n+/* { dg-final { scan-tree-dump \"vectorized 1 loops\" \"vect\" { xfail *-*-* } } } */"}, {"sha": "d76c882796f7d22f1db63004d2e3df51a9e20ac2", "filename": "gcc/testsuite/gcc.dg/vect/tsvc/vect-tsvc-s343.c", "status": "added", "additions": 47, "deletions": 0, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f81970b5f386630b98a33373c23dcc9234c6a980/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Ftsvc%2Fvect-tsvc-s343.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f81970b5f386630b98a33373c23dcc9234c6a980/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Ftsvc%2Fvect-tsvc-s343.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Ftsvc%2Fvect-tsvc-s343.c?ref=f81970b5f386630b98a33373c23dcc9234c6a980", "patch": "@@ -0,0 +1,47 @@\n+/*  This file is distributed under the University of Illinois Open Source\n+    License. See license.txt for details.  */\n+\n+/* { dg-additional-options \"--param vect-epilogues-nomask=0\" } */\n+/* { dg-require-effective-target vect_float } */\n+\n+#include \"tsvc.h\"\n+\n+real_t s343(struct args_t * func_args)\n+{\n+//    packing\n+//    pack 2-d array into one dimension\n+//    not vectorizable, value of k in unknown at each iteration\n+\n+    initialise_arrays(__func__);\n+\n+    int k;\n+    for (int nl = 0; nl < 10*(iterations/LEN_2D); nl++) {\n+        k = -1;\n+        for (int i = 0; i < LEN_2D; i++) {\n+            for (int j = 0; j < LEN_2D; j++) {\n+                if (bb[j][i] > (real_t)0.) {\n+                    k++;\n+                    flat_2d_array[k] = aa[j][i];\n+                }\n+            }\n+        }\n+        dummy(a, b, c, d, e, aa, bb, cc, 0.);\n+    }\n+\n+    return calc_checksum(__func__);\n+}\n+\n+int main (int argc, char **argv)\n+{\n+  int n1 = 1;\n+  int n3 = 1;\n+  int* ip;\n+  real_t s1,s2;\n+  init(&ip, &s1, &s2);\n+\n+  run(&s343, \"s343\", NULL);\n+\n+  return 0;\n+}\n+\n+/* { dg-final { scan-tree-dump \"vectorized 1 loops\" \"vect\" { xfail *-*-* } } } */"}, {"sha": "b5875d18036dca21e445ebc1df214e8c860cb725", "filename": "gcc/testsuite/gcc.dg/vect/tsvc/vect-tsvc-s351.c", "status": "added", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f81970b5f386630b98a33373c23dcc9234c6a980/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Ftsvc%2Fvect-tsvc-s351.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f81970b5f386630b98a33373c23dcc9234c6a980/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Ftsvc%2Fvect-tsvc-s351.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Ftsvc%2Fvect-tsvc-s351.c?ref=f81970b5f386630b98a33373c23dcc9234c6a980", "patch": "@@ -0,0 +1,44 @@\n+/*  This file is distributed under the University of Illinois Open Source\n+    License. See license.txt for details.  */\n+\n+/* { dg-additional-options \"--param vect-epilogues-nomask=0\" } */\n+/* { dg-require-effective-target vect_float } */\n+\n+#include \"tsvc.h\"\n+\n+real_t s351(struct args_t * func_args)\n+{\n+//    loop rerolling\n+//    unrolled saxpy\n+\n+    initialise_arrays(__func__);\n+\n+    real_t alpha = c[0];\n+    for (int nl = 0; nl < 8*iterations; nl++) {\n+        for (int i = 0; i < LEN_1D; i += 5) {\n+            a[i] += alpha * b[i];\n+            a[i + 1] += alpha * b[i + 1];\n+            a[i + 2] += alpha * b[i + 2];\n+            a[i + 3] += alpha * b[i + 3];\n+            a[i + 4] += alpha * b[i + 4];\n+        }\n+        dummy(a, b, c, d, e, aa, bb, cc, 0.);\n+    }\n+\n+    return calc_checksum(__func__);\n+}\n+\n+int main (int argc, char **argv)\n+{\n+  int n1 = 1;\n+  int n3 = 1;\n+  int* ip;\n+  real_t s1,s2;\n+  init(&ip, &s1, &s2);\n+\n+  run(&s351, \"s351\", NULL);\n+\n+  return 0;\n+}\n+\n+/* { dg-final { scan-tree-dump-times \"vectorized 1 loops\" 1 \"vect\" } } */\n\\ No newline at end of file"}, {"sha": "11d2412a05c235901f706298b98c8da35217e26e", "filename": "gcc/testsuite/gcc.dg/vect/tsvc/vect-tsvc-s352.c", "status": "added", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f81970b5f386630b98a33373c23dcc9234c6a980/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Ftsvc%2Fvect-tsvc-s352.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f81970b5f386630b98a33373c23dcc9234c6a980/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Ftsvc%2Fvect-tsvc-s352.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Ftsvc%2Fvect-tsvc-s352.c?ref=f81970b5f386630b98a33373c23dcc9234c6a980", "patch": "@@ -0,0 +1,42 @@\n+/*  This file is distributed under the University of Illinois Open Source\n+    License. See license.txt for details.  */\n+\n+/* { dg-additional-options \"--param vect-epilogues-nomask=0\" } */\n+/* { dg-require-effective-target vect_float } */\n+\n+#include \"tsvc.h\"\n+\n+real_t s352(struct args_t * func_args)\n+{\n+//    loop rerolling\n+//    unrolled dot product\n+\n+    initialise_arrays(__func__);\n+\n+    real_t dot;\n+    for (int nl = 0; nl < 8*iterations; nl++) {\n+        dot = (real_t)0.;\n+        for (int i = 0; i < LEN_1D; i += 5) {\n+            dot = dot + a[i] * b[i] + a[i + 1] * b[i + 1] + a[i + 2]\n+                * b[i + 2] + a[i + 3] * b[i + 3] + a[i + 4] * b[i + 4];\n+        }\n+        dummy(a, b, c, d, e, aa, bb, cc, dot);\n+    }\n+\n+    return dot;\n+}\n+\n+int main (int argc, char **argv)\n+{\n+  int n1 = 1;\n+  int n3 = 1;\n+  int* ip;\n+  real_t s1,s2;\n+  init(&ip, &s1, &s2);\n+\n+  run(&s352, \"s352\", NULL);\n+\n+  return 0;\n+}\n+\n+/* { dg-final { scan-tree-dump-times \"vectorized 1 loops\" 1 \"vect\" } } */\n\\ No newline at end of file"}, {"sha": "58898583c26b9880f6afd342d20429239b9c62d1", "filename": "gcc/testsuite/gcc.dg/vect/tsvc/vect-tsvc-s353.c", "status": "added", "additions": 47, "deletions": 0, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f81970b5f386630b98a33373c23dcc9234c6a980/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Ftsvc%2Fvect-tsvc-s353.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f81970b5f386630b98a33373c23dcc9234c6a980/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Ftsvc%2Fvect-tsvc-s353.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Ftsvc%2Fvect-tsvc-s353.c?ref=f81970b5f386630b98a33373c23dcc9234c6a980", "patch": "@@ -0,0 +1,47 @@\n+/*  This file is distributed under the University of Illinois Open Source\n+    License. See license.txt for details.  */\n+\n+/* { dg-additional-options \"--param vect-epilogues-nomask=0\" } */\n+/* { dg-require-effective-target vect_float } */\n+\n+#include \"tsvc.h\"\n+\n+real_t s353(struct args_t * func_args)\n+{\n+//    loop rerolling\n+//    unrolled sparse saxpy\n+//    gather is required\n+\n+    int * __restrict__ ip = func_args->arg_info;\n+\n+    initialise_arrays(__func__);\n+\n+    real_t alpha = c[0];\n+    for (int nl = 0; nl < iterations; nl++) {\n+        for (int i = 0; i < LEN_1D; i += 5) {\n+            a[i] += alpha * b[ip[i]];\n+            a[i + 1] += alpha * b[ip[i + 1]];\n+            a[i + 2] += alpha * b[ip[i + 2]];\n+            a[i + 3] += alpha * b[ip[i + 3]];\n+            a[i + 4] += alpha * b[ip[i + 4]];\n+        }\n+        dummy(a, b, c, d, e, aa, bb, cc, 0.);\n+    }\n+\n+    return calc_checksum(__func__);\n+}\n+\n+int main (int argc, char **argv)\n+{\n+  int n1 = 1;\n+  int n3 = 1;\n+  int* ip;\n+  real_t s1,s2;\n+  init(&ip, &s1, &s2);\n+\n+  run(&s353, \"s353\", ip);\n+\n+  return 0;\n+}\n+\n+/* { dg-final { scan-tree-dump \"vectorized 1 loops\" \"vect\" { xfail *-*-* } } } */"}, {"sha": "bca9a1b10c160b37b0db697407dba5fb69769cce", "filename": "gcc/testsuite/gcc.dg/vect/tsvc/vect-tsvc-s4112.c", "status": "added", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f81970b5f386630b98a33373c23dcc9234c6a980/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Ftsvc%2Fvect-tsvc-s4112.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f81970b5f386630b98a33373c23dcc9234c6a980/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Ftsvc%2Fvect-tsvc-s4112.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Ftsvc%2Fvect-tsvc-s4112.c?ref=f81970b5f386630b98a33373c23dcc9234c6a980", "patch": "@@ -0,0 +1,44 @@\n+/*  This file is distributed under the University of Illinois Open Source\n+    License. See license.txt for details.  */\n+\n+/* { dg-additional-options \"--param vect-epilogues-nomask=0\" } */\n+/* { dg-require-effective-target vect_float } */\n+\n+#include \"tsvc.h\"\n+\n+real_t s4112(struct args_t * func_args)\n+{\n+//    indirect addressing\n+//    sparse saxpy\n+//    gather is required\n+\n+    struct{int * __restrict__ a;real_t b;} * x = func_args->arg_info;\n+    int * __restrict__ ip = x->a;\n+    real_t s = x->b;\n+\n+    initialise_arrays(__func__);\n+\n+    for (int nl = 0; nl < iterations; nl++) {\n+        for (int i = 0; i < LEN_1D; i++) {\n+            a[i] += b[ip[i]] * s;\n+        }\n+        dummy(a, b, c, d, e, aa, bb, cc, 0.);\n+    }\n+\n+    return calc_checksum(__func__);\n+}\n+\n+int main (int argc, char **argv)\n+{\n+  int n1 = 1;\n+  int n3 = 1;\n+  int* ip;\n+  real_t s1,s2;\n+  init(&ip, &s1, &s2);\n+\n+  run(&s4112, \"s4112\", &(struct{int*a;real_t b;}){ip, s1});\n+\n+  return 0;\n+}\n+\n+/* { dg-final { scan-tree-dump-times \"vectorized 1 loops\" 1 \"vect\" } } */\n\\ No newline at end of file"}, {"sha": "ce08d98726b2b9d88710931ef782f4a9749dedd5", "filename": "gcc/testsuite/gcc.dg/vect/tsvc/vect-tsvc-s4113.c", "status": "added", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f81970b5f386630b98a33373c23dcc9234c6a980/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Ftsvc%2Fvect-tsvc-s4113.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f81970b5f386630b98a33373c23dcc9234c6a980/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Ftsvc%2Fvect-tsvc-s4113.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Ftsvc%2Fvect-tsvc-s4113.c?ref=f81970b5f386630b98a33373c23dcc9234c6a980", "patch": "@@ -0,0 +1,42 @@\n+/*  This file is distributed under the University of Illinois Open Source\n+    License. See license.txt for details.  */\n+\n+/* { dg-additional-options \"--param vect-epilogues-nomask=0\" } */\n+/* { dg-require-effective-target vect_float } */\n+\n+#include \"tsvc.h\"\n+\n+real_t s4113(struct args_t * func_args)\n+{\n+//    indirect addressing\n+//    indirect addressing on rhs and lhs\n+//    gather and scatter is required\n+\n+    int * __restrict__ ip = func_args->arg_info;\n+\n+    initialise_arrays(__func__);\n+\n+    for (int nl = 0; nl < iterations; nl++) {\n+        for (int i = 0; i < LEN_1D; i++) {\n+            a[ip[i]] = b[ip[i]] + c[i];\n+        }\n+        dummy(a, b, c, d, e, aa, bb, cc, 0.);\n+    }\n+\n+    return calc_checksum(__func__);\n+}\n+\n+int main (int argc, char **argv)\n+{\n+  int n1 = 1;\n+  int n3 = 1;\n+  int* ip;\n+  real_t s1,s2;\n+  init(&ip, &s1, &s2);\n+\n+  run(&s4113, \"s4113\", ip);\n+\n+  return 0;\n+}\n+\n+/* { dg-final { scan-tree-dump \"vectorized 1 loops\" \"vect\" { xfail *-*-* } } } */"}, {"sha": "b305900e44480d5204725572b9c30ce0f9629363", "filename": "gcc/testsuite/gcc.dg/vect/tsvc/vect-tsvc-s4114.c", "status": "added", "additions": 47, "deletions": 0, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f81970b5f386630b98a33373c23dcc9234c6a980/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Ftsvc%2Fvect-tsvc-s4114.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f81970b5f386630b98a33373c23dcc9234c6a980/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Ftsvc%2Fvect-tsvc-s4114.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Ftsvc%2Fvect-tsvc-s4114.c?ref=f81970b5f386630b98a33373c23dcc9234c6a980", "patch": "@@ -0,0 +1,47 @@\n+/*  This file is distributed under the University of Illinois Open Source\n+    License. See license.txt for details.  */\n+\n+/* { dg-additional-options \"--param vect-epilogues-nomask=0\" } */\n+/* { dg-require-effective-target vect_float } */\n+\n+#include \"tsvc.h\"\n+\n+real_t s4114(struct args_t * func_args)\n+{\n+//    indirect addressing\n+//    mix indirect addressing with variable lower and upper bounds\n+//    gather is required\n+\n+    struct{int * __restrict__ a;int b;} * x = func_args->arg_info;\n+    int * __restrict__ ip = x->a;\n+    int n1 = x->b;\n+\n+    initialise_arrays(__func__);\n+\n+    int k;\n+    for (int nl = 0; nl < iterations; nl++) {\n+        for (int i = n1-1; i < LEN_1D; i++) {\n+            k = ip[i];\n+            a[i] = b[i] + c[LEN_1D-k+1-2] * d[i];\n+            k += 5;\n+        }\n+        dummy(a, b, c, d, e, aa, bb, cc, 0.);\n+    }\n+\n+    return calc_checksum(__func__);\n+}\n+\n+int main (int argc, char **argv)\n+{\n+  int n1 = 1;\n+  int n3 = 1;\n+  int* ip;\n+  real_t s1,s2;\n+  init(&ip, &s1, &s2);\n+\n+  run(&s4114, \"s4114\", &(struct{int*a;int b;}){ip, n1});\n+\n+  return 0;\n+}\n+\n+/* { dg-final { scan-tree-dump-times \"vectorized 1 loops\" 1 \"vect\" } } */\n\\ No newline at end of file"}, {"sha": "f85e75e4710f6e0edb9b37185a14727193010f55", "filename": "gcc/testsuite/gcc.dg/vect/tsvc/vect-tsvc-s4115.c", "status": "added", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f81970b5f386630b98a33373c23dcc9234c6a980/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Ftsvc%2Fvect-tsvc-s4115.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f81970b5f386630b98a33373c23dcc9234c6a980/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Ftsvc%2Fvect-tsvc-s4115.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Ftsvc%2Fvect-tsvc-s4115.c?ref=f81970b5f386630b98a33373c23dcc9234c6a980", "patch": "@@ -0,0 +1,44 @@\n+/*  This file is distributed under the University of Illinois Open Source\n+    License. See license.txt for details.  */\n+\n+/* { dg-additional-options \"--param vect-epilogues-nomask=0\" } */\n+/* { dg-require-effective-target vect_float } */\n+\n+#include \"tsvc.h\"\n+\n+real_t s4115(struct args_t * func_args)\n+{\n+//    indirect addressing\n+//    sparse dot product\n+//    gather is required\n+\n+    int * __restrict__ ip = func_args->arg_info;\n+\n+    initialise_arrays(__func__);\n+\n+    real_t sum;\n+    for (int nl = 0; nl < iterations; nl++) {\n+        sum = 0.;\n+        for (int i = 0; i < LEN_1D; i++) {\n+            sum += a[i] * b[ip[i]];\n+        }\n+        dummy(a, b, c, d, e, aa, bb, cc, 0.);\n+    }\n+\n+    return sum;\n+}\n+\n+int main (int argc, char **argv)\n+{\n+  int n1 = 1;\n+  int n3 = 1;\n+  int* ip;\n+  real_t s1,s2;\n+  init(&ip, &s1, &s2);\n+\n+  run(&s4115, \"s4115\", ip);\n+\n+  return 0;\n+}\n+\n+/* { dg-final { scan-tree-dump-times \"vectorized 1 loops\" 1 \"vect\" } } */"}, {"sha": "95a771ec0d1be9b9993358c82f16c472d0c5a6b3", "filename": "gcc/testsuite/gcc.dg/vect/tsvc/vect-tsvc-s4116.c", "status": "added", "additions": 49, "deletions": 0, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f81970b5f386630b98a33373c23dcc9234c6a980/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Ftsvc%2Fvect-tsvc-s4116.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f81970b5f386630b98a33373c23dcc9234c6a980/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Ftsvc%2Fvect-tsvc-s4116.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Ftsvc%2Fvect-tsvc-s4116.c?ref=f81970b5f386630b98a33373c23dcc9234c6a980", "patch": "@@ -0,0 +1,49 @@\n+/*  This file is distributed under the University of Illinois Open Source\n+    License. See license.txt for details.  */\n+\n+/* { dg-additional-options \"--param vect-epilogues-nomask=0\" } */\n+/* { dg-require-effective-target vect_float } */\n+\n+#include \"tsvc.h\"\n+\n+real_t s4116(struct args_t * func_args)\n+{\n+//    indirect addressing\n+//    more complicated sparse sdot\n+//    gather is required\n+\n+    struct{int * __restrict__ a;int b;int c;} * x = func_args->arg_info;\n+    int * __restrict__ ip = x->a;\n+    int j = x->b;\n+    int inc = x->c;\n+\n+    initialise_arrays(__func__);\n+\n+    real_t sum;\n+    int off;\n+    for (int nl = 0; nl < 100*iterations; nl++) {\n+        sum = 0.;\n+        for (int i = 0; i < LEN_2D-1; i++) {\n+            off = inc + i;\n+            sum += a[off] * aa[j-1][ip[i]];\n+        }\n+        dummy(a, b, c, d, e, aa, bb, cc, 0.);\n+    }\n+\n+    return sum;\n+}\n+\n+int main (int argc, char **argv)\n+{\n+  int n1 = 1;\n+  int n3 = 1;\n+  int* ip;\n+  real_t s1,s2;\n+  init(&ip, &s1, &s2);\n+\n+  run(&s4116, \"s4116\", &(struct{int * a; int b; int c;}){ip, LEN_2D/2, n1});\n+\n+  return 0;\n+}\n+\n+/* { dg-final { scan-tree-dump-times \"vectorized 1 loops\" 1 \"vect\" } } */"}, {"sha": "a1d757b7d09fca00c4a0db63e4e9b63cd7f16280", "filename": "gcc/testsuite/gcc.dg/vect/tsvc/vect-tsvc-s4117.c", "status": "added", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f81970b5f386630b98a33373c23dcc9234c6a980/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Ftsvc%2Fvect-tsvc-s4117.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f81970b5f386630b98a33373c23dcc9234c6a980/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Ftsvc%2Fvect-tsvc-s4117.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Ftsvc%2Fvect-tsvc-s4117.c?ref=f81970b5f386630b98a33373c23dcc9234c6a980", "patch": "@@ -0,0 +1,39 @@\n+/*  This file is distributed under the University of Illinois Open Source\n+    License. See license.txt for details.  */\n+\n+/* { dg-additional-options \"--param vect-epilogues-nomask=0\" } */\n+/* { dg-require-effective-target vect_float } */\n+\n+#include \"tsvc.h\"\n+\n+real_t s4117(struct args_t * func_args)\n+{\n+//    indirect addressing\n+//    seq function\n+\n+    initialise_arrays(__func__);\n+\n+    for (int nl = 0; nl < iterations; nl++) {\n+        for (int i = 0; i < LEN_1D; i++) {\n+            a[i] = b[i] + c[i/2] * d[i];\n+        }\n+        dummy(a, b, c, d, e, aa, bb, cc, 0.);\n+    }\n+\n+    return calc_checksum(__func__);\n+}\n+\n+int main (int argc, char **argv)\n+{\n+  int n1 = 1;\n+  int n3 = 1;\n+  int* ip;\n+  real_t s1,s2;\n+  init(&ip, &s1, &s2);\n+\n+  run(&s4117, \"s4117\", NULL);\n+\n+  return 0;\n+}\n+\n+/* { dg-final { scan-tree-dump-times \"vectorized 1 loops\" 1 \"vect\" } } */\n\\ No newline at end of file"}, {"sha": "54aa9d07c4af3daef8dcd6f861d5c3d244a7a07e", "filename": "gcc/testsuite/gcc.dg/vect/tsvc/vect-tsvc-s4121.c", "status": "added", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f81970b5f386630b98a33373c23dcc9234c6a980/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Ftsvc%2Fvect-tsvc-s4121.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f81970b5f386630b98a33373c23dcc9234c6a980/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Ftsvc%2Fvect-tsvc-s4121.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Ftsvc%2Fvect-tsvc-s4121.c?ref=f81970b5f386630b98a33373c23dcc9234c6a980", "patch": "@@ -0,0 +1,44 @@\n+/*  This file is distributed under the University of Illinois Open Source\n+    License. See license.txt for details.  */\n+\n+/* { dg-additional-options \"--param vect-epilogues-nomask=0\" } */\n+/* { dg-require-effective-target vect_float } */\n+\n+#include \"tsvc.h\"\n+\n+real_t f(real_t a, real_t b){\n+    return a*b;\n+}\n+\n+real_t s4121(struct args_t * func_args)\n+{\n+//    statement functions\n+//    elementwise multiplication\n+\n+    initialise_arrays(__func__);\n+\n+    for (int nl = 0; nl < iterations; nl++) {\n+        for (int i = 0; i < LEN_1D; i++) {\n+            a[i] += f(b[i],c[i]);\n+        }\n+        dummy(a, b, c, d, e, aa, bb, cc, 0.);\n+    }\n+\n+    return calc_checksum(__func__);\n+}\n+\n+int main (int argc, char **argv)\n+{\n+  int n1 = 1;\n+  int n3 = 1;\n+  int* ip;\n+  real_t s1,s2;\n+  init(&ip, &s1, &s2);\n+\n+  run(&s4121, \"s4121\", NULL);\n+\n+  return 0;\n+}\n+\n+\n+/* { dg-final { scan-tree-dump-times \"vectorized 1 loops\" 1 \"vect\" } } */\n\\ No newline at end of file"}, {"sha": "e6c00c5bdede6cb62514852d57c4093742012427", "filename": "gcc/testsuite/gcc.dg/vect/tsvc/vect-tsvc-s421.c", "status": "added", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f81970b5f386630b98a33373c23dcc9234c6a980/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Ftsvc%2Fvect-tsvc-s421.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f81970b5f386630b98a33373c23dcc9234c6a980/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Ftsvc%2Fvect-tsvc-s421.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Ftsvc%2Fvect-tsvc-s421.c?ref=f81970b5f386630b98a33373c23dcc9234c6a980", "patch": "@@ -0,0 +1,42 @@\n+/*  This file is distributed under the University of Illinois Open Source\n+    License. See license.txt for details.  */\n+\n+/* { dg-additional-options \"--param vect-epilogues-nomask=0\" } */\n+/* { dg-require-effective-target vect_float } */\n+\n+#include \"tsvc.h\"\n+\n+real_t s421(struct args_t * func_args)\n+{\n+//    storage classes and equivalencing\n+//    equivalence- no overlap\n+\n+    initialise_arrays(__func__);\n+\n+    xx = flat_2d_array;\n+\n+    for (int nl = 0; nl < 4*iterations; nl++) {\n+        yy = xx;\n+        for (int i = 0; i < LEN_1D - 1; i++) {\n+            xx[i] = yy[i+1] + a[i];\n+        }\n+        dummy(a, b, c, d, e, aa, bb, cc, 1.);\n+    }\n+\n+    return calc_checksum(__func__);\n+}\n+\n+int main (int argc, char **argv)\n+{\n+  int n1 = 1;\n+  int n3 = 1;\n+  int* ip;\n+  real_t s1,s2;\n+  init(&ip, &s1, &s2);\n+\n+  run(&s421, \"s421\", NULL);\n+\n+  return 0;\n+}\n+\n+/* { dg-final { scan-tree-dump-times \"vectorized 1 loops\" 1 \"vect\" } } */\n\\ No newline at end of file"}, {"sha": "4d491da53092d1c2234b0ecf242c6c7c99e24b0c", "filename": "gcc/testsuite/gcc.dg/vect/tsvc/vect-tsvc-s422.c", "status": "added", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f81970b5f386630b98a33373c23dcc9234c6a980/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Ftsvc%2Fvect-tsvc-s422.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f81970b5f386630b98a33373c23dcc9234c6a980/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Ftsvc%2Fvect-tsvc-s422.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Ftsvc%2Fvect-tsvc-s422.c?ref=f81970b5f386630b98a33373c23dcc9234c6a980", "patch": "@@ -0,0 +1,42 @@\n+/*  This file is distributed under the University of Illinois Open Source\n+    License. See license.txt for details.  */\n+\n+/* { dg-additional-options \"--param vect-epilogues-nomask=0\" } */\n+/* { dg-require-effective-target vect_float } */\n+\n+#include \"tsvc.h\"\n+\n+real_t s422(struct args_t * func_args)\n+{\n+//    storage classes and equivalencing\n+//    common and equivalence statement\n+//    anti-dependence, threshold of 4\n+\n+    initialise_arrays(__func__);\n+\n+    xx = flat_2d_array + 4;\n+\n+    for (int nl = 0; nl < 8*iterations; nl++) {\n+        for (int i = 0; i < LEN_1D; i++) {\n+            xx[i] = flat_2d_array[i + 8] + a[i];\n+        }\n+        dummy(a, b, c, d, e, aa, bb, cc, 0.);\n+    }\n+\n+    return calc_checksum(__func__);\n+}\n+\n+int main (int argc, char **argv)\n+{\n+  int n1 = 1;\n+  int n3 = 1;\n+  int* ip;\n+  real_t s1,s2;\n+  init(&ip, &s1, &s2);\n+\n+  run(&s422, \"s422\", NULL);\n+\n+  return 0;\n+}\n+\n+/* { dg-final { scan-tree-dump-times \"vectorized 1 loops\" 1 \"vect\" } } */\n\\ No newline at end of file"}, {"sha": "7605f0575c53bbe7bad1e880a758c3d827cb75d8", "filename": "gcc/testsuite/gcc.dg/vect/tsvc/vect-tsvc-s423.c", "status": "added", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f81970b5f386630b98a33373c23dcc9234c6a980/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Ftsvc%2Fvect-tsvc-s423.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f81970b5f386630b98a33373c23dcc9234c6a980/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Ftsvc%2Fvect-tsvc-s423.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Ftsvc%2Fvect-tsvc-s423.c?ref=f81970b5f386630b98a33373c23dcc9234c6a980", "patch": "@@ -0,0 +1,43 @@\n+/*  This file is distributed under the University of Illinois Open Source\n+    License. See license.txt for details.  */\n+\n+/* { dg-additional-options \"--param vect-epilogues-nomask=0\" } */\n+/* { dg-require-effective-target vect_float } */\n+\n+#include \"tsvc.h\"\n+\n+real_t s423(struct args_t * func_args)\n+{\n+//    storage classes and equivalencing\n+//    common and equivalenced variables - with anti-dependence\n+\n+    // do this again here\n+    int vl = 64;\n+    xx = flat_2d_array + vl;\n+\n+    initialise_arrays(__func__);\n+\n+    for (int nl = 0; nl < 4*iterations; nl++) {\n+        for (int i = 0; i < LEN_1D - 1; i++) {\n+            flat_2d_array[i+1] = xx[i] + a[i];\n+        }\n+        dummy(a, b, c, d, e, aa, bb, cc, 1.);\n+    }\n+\n+    return calc_checksum(__func__);\n+}\n+\n+int main (int argc, char **argv)\n+{\n+  int n1 = 1;\n+  int n3 = 1;\n+  int* ip;\n+  real_t s1,s2;\n+  init(&ip, &s1, &s2);\n+\n+  run(&s423, \"s423\", NULL);\n+\n+  return 0;\n+}\n+\n+/* { dg-final { scan-tree-dump-times \"vectorized 1 loops\" 1 \"vect\" } } */\n\\ No newline at end of file"}, {"sha": "211f2d4ab05ba99067f0f92c19275e022467f925", "filename": "gcc/testsuite/gcc.dg/vect/tsvc/vect-tsvc-s424.c", "status": "added", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f81970b5f386630b98a33373c23dcc9234c6a980/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Ftsvc%2Fvect-tsvc-s424.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f81970b5f386630b98a33373c23dcc9234c6a980/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Ftsvc%2Fvect-tsvc-s424.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Ftsvc%2Fvect-tsvc-s424.c?ref=f81970b5f386630b98a33373c23dcc9234c6a980", "patch": "@@ -0,0 +1,44 @@\n+/*  This file is distributed under the University of Illinois Open Source\n+    License. See license.txt for details.  */\n+\n+/* { dg-additional-options \"--param vect-epilogues-nomask=0\" } */\n+/* { dg-require-effective-target vect_float } */\n+\n+#include \"tsvc.h\"\n+\n+real_t s424(struct args_t * func_args)\n+{\n+//    storage classes and equivalencing\n+//    common and equivalenced variables - overlap\n+//    vectorizeable in strips of 64 or less\n+\n+    // do this again here\n+    int vl = 63;\n+    xx = flat_2d_array + vl;\n+\n+    initialise_arrays(__func__);\n+\n+    for (int nl = 0; nl < 4*iterations; nl++) {\n+        for (int i = 0; i < LEN_1D - 1; i++) {\n+            xx[i+1] = flat_2d_array[i] + a[i];\n+        }\n+        dummy(a, b, c, d, e, aa, bb, cc, 1.);\n+    }\n+\n+    return calc_checksum(__func__);\n+}\n+\n+int main (int argc, char **argv)\n+{\n+  int n1 = 1;\n+  int n3 = 1;\n+  int* ip;\n+  real_t s1,s2;\n+  init(&ip, &s1, &s2);\n+\n+  run(&s424, \"s424\", NULL);\n+\n+  return 0;\n+}\n+\n+/* { dg-final { scan-tree-dump-times \"vectorized 1 loops\" 1 \"vect\" } } */\n\\ No newline at end of file"}, {"sha": "f2b03588db1ad62207f9d35ced587d17cdf22bbd", "filename": "gcc/testsuite/gcc.dg/vect/tsvc/vect-tsvc-s431.c", "status": "added", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f81970b5f386630b98a33373c23dcc9234c6a980/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Ftsvc%2Fvect-tsvc-s431.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f81970b5f386630b98a33373c23dcc9234c6a980/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Ftsvc%2Fvect-tsvc-s431.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Ftsvc%2Fvect-tsvc-s431.c?ref=f81970b5f386630b98a33373c23dcc9234c6a980", "patch": "@@ -0,0 +1,43 @@\n+/*  This file is distributed under the University of Illinois Open Source\n+    License. See license.txt for details.  */\n+\n+/* { dg-additional-options \"--param vect-epilogues-nomask=0\" } */\n+/* { dg-require-effective-target vect_float } */\n+\n+#include \"tsvc.h\"\n+\n+real_t s431(struct args_t * func_args)\n+{\n+//    parameters\n+//    parameter statement\n+\n+    int k1=1;\n+    int k2=2;\n+    int k=2*k1-k2;\n+\n+    initialise_arrays(__func__);\n+\n+    for (int nl = 0; nl < iterations*10; nl++) {\n+        for (int i = 0; i < LEN_1D; i++) {\n+            a[i] = a[i+k] + b[i];\n+        }\n+        dummy(a, b, c, d, e, aa, bb, cc, 0.);\n+    }\n+\n+    return calc_checksum(__func__);\n+}\n+\n+int main (int argc, char **argv)\n+{\n+  int n1 = 1;\n+  int n3 = 1;\n+  int* ip;\n+  real_t s1,s2;\n+  init(&ip, &s1, &s2);\n+\n+  run(&s431, \"s431\", NULL);\n+\n+  return 0;\n+}\n+\n+/* { dg-final { scan-tree-dump-times \"vectorized 1 loops\" 1 \"vect\" } } */\n\\ No newline at end of file"}, {"sha": "deab041d32b541276db7c4ff321b6313b3069500", "filename": "gcc/testsuite/gcc.dg/vect/tsvc/vect-tsvc-s441.c", "status": "added", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f81970b5f386630b98a33373c23dcc9234c6a980/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Ftsvc%2Fvect-tsvc-s441.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f81970b5f386630b98a33373c23dcc9234c6a980/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Ftsvc%2Fvect-tsvc-s441.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Ftsvc%2Fvect-tsvc-s441.c?ref=f81970b5f386630b98a33373c23dcc9234c6a980", "patch": "@@ -0,0 +1,45 @@\n+/*  This file is distributed under the University of Illinois Open Source\n+    License. See license.txt for details.  */\n+\n+/* { dg-additional-options \"--param vect-epilogues-nomask=0\" } */\n+/* { dg-require-effective-target vect_float } */\n+\n+#include \"tsvc.h\"\n+\n+real_t s441(struct args_t * func_args)\n+{\n+//    non-logical if's\n+//    arithmetic if\n+\n+    initialise_arrays(__func__);\n+\n+    for (int nl = 0; nl < iterations; nl++) {\n+        for (int i = 0; i < LEN_1D; i++) {\n+            if (d[i] < (real_t)0.) {\n+                a[i] += b[i] * c[i];\n+            } else if (d[i] == (real_t)0.) {\n+                a[i] += b[i] * b[i];\n+            } else {\n+                a[i] += c[i] * c[i];\n+            }\n+        }\n+        dummy(a, b, c, d, e, aa, bb, cc, 0.);\n+    }\n+\n+    return calc_checksum(__func__);\n+}\n+\n+int main (int argc, char **argv)\n+{\n+  int n1 = 1;\n+  int n3 = 1;\n+  int* ip;\n+  real_t s1,s2;\n+  init(&ip, &s1, &s2);\n+\n+  run(&s441, \"s441\", NULL);\n+\n+  return 0;\n+}\n+\n+/* { dg-final { scan-tree-dump \"vectorized 1 loops\" \"vect\" { xfail *-*-* } } } */"}, {"sha": "22fad600a5b0d547b85820573e9dcf3e7724b01e", "filename": "gcc/testsuite/gcc.dg/vect/tsvc/vect-tsvc-s442.c", "status": "added", "additions": 57, "deletions": 0, "changes": 57, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f81970b5f386630b98a33373c23dcc9234c6a980/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Ftsvc%2Fvect-tsvc-s442.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f81970b5f386630b98a33373c23dcc9234c6a980/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Ftsvc%2Fvect-tsvc-s442.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Ftsvc%2Fvect-tsvc-s442.c?ref=f81970b5f386630b98a33373c23dcc9234c6a980", "patch": "@@ -0,0 +1,57 @@\n+/*  This file is distributed under the University of Illinois Open Source\n+    License. See license.txt for details.  */\n+\n+/* { dg-additional-options \"--param vect-epilogues-nomask=0\" } */\n+/* { dg-require-effective-target vect_float } */\n+\n+#include \"tsvc.h\"\n+\n+real_t s442(struct args_t * func_args)\n+{\n+//    non-logical if's\n+//    computed goto\n+\n+    initialise_arrays(__func__);\n+\n+    for (int nl = 0; nl < iterations/2; nl++) {\n+        for (int i = 0; i < LEN_1D; i++) {\n+            switch (indx[i]) {\n+                case 1:  goto L15;\n+                case 2:  goto L20;\n+                case 3:  goto L30;\n+                case 4:  goto L40;\n+            }\n+L15:\n+            a[i] += b[i] * b[i];\n+            goto L50;\n+L20:\n+            a[i] += c[i] * c[i];\n+            goto L50;\n+L30:\n+            a[i] += d[i] * d[i];\n+            goto L50;\n+L40:\n+            a[i] += e[i] * e[i];\n+L50:\n+            ;\n+        }\n+        dummy(a, b, c, d, e, aa, bb, cc, 0.);\n+    }\n+\n+    return calc_checksum(__func__);\n+}\n+\n+int main (int argc, char **argv)\n+{\n+  int n1 = 1;\n+  int n3 = 1;\n+  int* ip;\n+  real_t s1,s2;\n+  init(&ip, &s1, &s2);\n+\n+  run(&s442, \"s442\", NULL);\n+\n+  return 0;\n+}\n+\n+/* { dg-final { scan-tree-dump \"vectorized 1 loops\" \"vect\" { xfail *-*-* } } } */"}, {"sha": "2134cc5cecbbc508fb8ac3f4404d318b9ef00050", "filename": "gcc/testsuite/gcc.dg/vect/tsvc/vect-tsvc-s443.c", "status": "added", "additions": 50, "deletions": 0, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f81970b5f386630b98a33373c23dcc9234c6a980/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Ftsvc%2Fvect-tsvc-s443.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f81970b5f386630b98a33373c23dcc9234c6a980/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Ftsvc%2Fvect-tsvc-s443.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Ftsvc%2Fvect-tsvc-s443.c?ref=f81970b5f386630b98a33373c23dcc9234c6a980", "patch": "@@ -0,0 +1,50 @@\n+/*  This file is distributed under the University of Illinois Open Source\n+    License. See license.txt for details.  */\n+\n+/* { dg-additional-options \"--param vect-epilogues-nomask=0\" } */\n+/* { dg-require-effective-target vect_float } */\n+\n+#include \"tsvc.h\"\n+\n+real_t s443(struct args_t * func_args)\n+{\n+//    non-logical if's\n+//    arithmetic if\n+\n+    initialise_arrays(__func__);\n+\n+    for (int nl = 0; nl < 2*iterations; nl++) {\n+        for (int i = 0; i < LEN_1D; i++) {\n+            if (d[i] <= (real_t)0.) {\n+                goto L20;\n+            } else {\n+                goto L30;\n+            }\n+L20:\n+            a[i] += b[i] * c[i];\n+            goto L50;\n+L30:\n+            a[i] += b[i] * b[i];\n+L50:\n+            ;\n+        }\n+        dummy(a, b, c, d, e, aa, bb, cc, 0.);\n+    }\n+\n+    return calc_checksum(__func__);\n+}\n+\n+int main (int argc, char **argv)\n+{\n+  int n1 = 1;\n+  int n3 = 1;\n+  int* ip;\n+  real_t s1,s2;\n+  init(&ip, &s1, &s2);\n+\n+  run(&s443, \"s443\", NULL);\n+\n+  return 0;\n+}\n+\n+/* { dg-final { scan-tree-dump \"vectorized 1 loops\" \"vect\" { xfail *-*-* } } } */"}, {"sha": "ac0c9acc792152bf44bcc35e64dd4419904d414d", "filename": "gcc/testsuite/gcc.dg/vect/tsvc/vect-tsvc-s451.c", "status": "added", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f81970b5f386630b98a33373c23dcc9234c6a980/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Ftsvc%2Fvect-tsvc-s451.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f81970b5f386630b98a33373c23dcc9234c6a980/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Ftsvc%2Fvect-tsvc-s451.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Ftsvc%2Fvect-tsvc-s451.c?ref=f81970b5f386630b98a33373c23dcc9234c6a980", "patch": "@@ -0,0 +1,39 @@\n+/*  This file is distributed under the University of Illinois Open Source\n+    License. See license.txt for details.  */\n+\n+/* { dg-additional-options \"--param vect-epilogues-nomask=0\" } */\n+/* { dg-require-effective-target vect_float } */\n+\n+#include \"tsvc.h\"\n+\n+real_t s451(struct args_t * func_args)\n+{\n+//    intrinsic functions\n+//    intrinsics\n+\n+    initialise_arrays(__func__);\n+\n+    for (int nl = 0; nl < iterations/5; nl++) {\n+        for (int i = 0; i < LEN_1D; i++) {\n+            a[i] = sinf(b[i]) + cosf(c[i]);\n+        }\n+        dummy(a, b, c, d, e, aa, bb, cc, 0.);\n+    }\n+\n+    return calc_checksum(__func__);\n+}\n+\n+int main (int argc, char **argv)\n+{\n+  int n1 = 1;\n+  int n3 = 1;\n+  int* ip;\n+  real_t s1,s2;\n+  init(&ip, &s1, &s2);\n+\n+  run(&s451, \"s451\", NULL);\n+\n+  return 0;\n+}\n+\n+/* { dg-final { scan-tree-dump \"vectorized 1 loops\" \"vect\" { xfail *-*-* } } } */"}, {"sha": "fe97c4d40f50e1cb3aca252a6f81c3c093c8bab8", "filename": "gcc/testsuite/gcc.dg/vect/tsvc/vect-tsvc-s452.c", "status": "added", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f81970b5f386630b98a33373c23dcc9234c6a980/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Ftsvc%2Fvect-tsvc-s452.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f81970b5f386630b98a33373c23dcc9234c6a980/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Ftsvc%2Fvect-tsvc-s452.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Ftsvc%2Fvect-tsvc-s452.c?ref=f81970b5f386630b98a33373c23dcc9234c6a980", "patch": "@@ -0,0 +1,39 @@\n+/*  This file is distributed under the University of Illinois Open Source\n+    License. See license.txt for details.  */\n+\n+/* { dg-additional-options \"--param vect-epilogues-nomask=0\" } */\n+/* { dg-require-effective-target vect_float } */\n+\n+#include \"tsvc.h\"\n+\n+real_t s452(struct args_t * func_args)\n+{\n+//    intrinsic functions\n+//    seq function\n+\n+    initialise_arrays(__func__);\n+\n+    for (int nl = 0; nl < 4*iterations; nl++) {\n+        for (int i = 0; i < LEN_1D; i++) {\n+            a[i] = b[i] + c[i] * (real_t) (i+1);\n+        }\n+        dummy(a, b, c, d, e, aa, bb, cc, 0.);\n+    }\n+\n+    return calc_checksum(__func__);\n+}\n+\n+int main (int argc, char **argv)\n+{\n+  int n1 = 1;\n+  int n3 = 1;\n+  int* ip;\n+  real_t s1,s2;\n+  init(&ip, &s1, &s2);\n+\n+  run(&s452, \"s452\", NULL);\n+\n+  return 0;\n+}\n+\n+/* { dg-final { scan-tree-dump-times \"vectorized 1 loops\" 1 \"vect\" } } */\n\\ No newline at end of file"}, {"sha": "1fc1d66ea7b257d39a94abc3f2dc71d8f6e3be7d", "filename": "gcc/testsuite/gcc.dg/vect/tsvc/vect-tsvc-s453.c", "status": "added", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f81970b5f386630b98a33373c23dcc9234c6a980/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Ftsvc%2Fvect-tsvc-s453.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f81970b5f386630b98a33373c23dcc9234c6a980/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Ftsvc%2Fvect-tsvc-s453.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Ftsvc%2Fvect-tsvc-s453.c?ref=f81970b5f386630b98a33373c23dcc9234c6a980", "patch": "@@ -0,0 +1,42 @@\n+/*  This file is distributed under the University of Illinois Open Source\n+    License. See license.txt for details.  */\n+\n+/* { dg-additional-options \"--param vect-epilogues-nomask=0\" } */\n+/* { dg-require-effective-target vect_float } */\n+\n+#include \"tsvc.h\"\n+\n+real_t s453(struct args_t * func_args)\n+{\n+//    induction varibale recognition\n+\n+    real_t s;\n+\n+    initialise_arrays(__func__);\n+\n+    for (int nl = 0; nl < iterations*2; nl++) {\n+        s = 0.;\n+        for (int i = 0; i < LEN_1D; i++) {\n+            s += (real_t)2.;\n+            a[i] = s * b[i];\n+        }\n+        dummy(a, b, c, d, e, aa, bb, cc, 0.);\n+    }\n+\n+    return calc_checksum(__func__);\n+}\n+\n+int main (int argc, char **argv)\n+{\n+  int n1 = 1;\n+  int n3 = 1;\n+  int* ip;\n+  real_t s1,s2;\n+  init(&ip, &s1, &s2);\n+\n+  run(&s453, \"s453\", NULL);\n+\n+  return 0;\n+}\n+\n+/* { dg-final { scan-tree-dump \"vectorized 1 loops\" \"vect\" { xfail *-*-* } } } */"}, {"sha": "b842ddaeedcef5605f61dc4e40b33abfa0913a93", "filename": "gcc/testsuite/gcc.dg/vect/tsvc/vect-tsvc-s471.c", "status": "added", "additions": 49, "deletions": 0, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f81970b5f386630b98a33373c23dcc9234c6a980/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Ftsvc%2Fvect-tsvc-s471.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f81970b5f386630b98a33373c23dcc9234c6a980/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Ftsvc%2Fvect-tsvc-s471.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Ftsvc%2Fvect-tsvc-s471.c?ref=f81970b5f386630b98a33373c23dcc9234c6a980", "patch": "@@ -0,0 +1,49 @@\n+/*  This file is distributed under the University of Illinois Open Source\n+    License. See license.txt for details.  */\n+\n+/* { dg-additional-options \"--param vect-epilogues-nomask=0\" } */\n+/* { dg-require-effective-target vect_float } */\n+\n+#include \"tsvc.h\"\n+\n+int s471s(void)\n+{\n+// --  dummy subroutine call made in s471\n+    return 0;\n+}\n+\n+real_t s471(struct args_t * func_args){\n+\n+//    call statements\n+\n+    int m = LEN_1D;\n+\n+    initialise_arrays(__func__);\n+\n+    for (int nl = 0; nl < iterations/2; nl++) {\n+        for (int i = 0; i < m; i++) {\n+            x[i] = b[i] + d[i] * d[i];\n+            s471s();\n+            b[i] = c[i] + d[i] * e[i];\n+        }\n+        dummy(a, b, c, d, e, aa, bb, cc, 0.);\n+    }\n+\n+    return calc_checksum(__func__);\n+}\n+\n+int main (int argc, char **argv)\n+{\n+  int n1 = 1;\n+  int n3 = 1;\n+  int* ip;\n+  real_t s1,s2;\n+  init(&ip, &s1, &s2);\n+\n+  run(&s471, \"s471\", NULL);\n+\n+  return 0;\n+}\n+\n+\n+/* { dg-final { scan-tree-dump-times \"vectorized 1 loops\" 1 \"vect\" } } */\n\\ No newline at end of file"}, {"sha": "bf98e173d2e6315ffc45477642eab7f9441c4376", "filename": "gcc/testsuite/gcc.dg/vect/tsvc/vect-tsvc-s481.c", "status": "added", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f81970b5f386630b98a33373c23dcc9234c6a980/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Ftsvc%2Fvect-tsvc-s481.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f81970b5f386630b98a33373c23dcc9234c6a980/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Ftsvc%2Fvect-tsvc-s481.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Ftsvc%2Fvect-tsvc-s481.c?ref=f81970b5f386630b98a33373c23dcc9234c6a980", "patch": "@@ -0,0 +1,42 @@\n+/*  This file is distributed under the University of Illinois Open Source\n+    License. See license.txt for details.  */\n+\n+/* { dg-additional-options \"--param vect-epilogues-nomask=0\" } */\n+/* { dg-require-effective-target vect_float } */\n+\n+#include \"tsvc.h\"\n+\n+real_t s481(struct args_t * func_args)\n+{\n+//    non-local goto's\n+//    stop statement\n+\n+    initialise_arrays(__func__);\n+\n+    for (int nl = 0; nl < iterations; nl++) {\n+        for (int i = 0; i < LEN_1D; i++) {\n+            if (d[i] < (real_t)0.) {\n+                exit (0);\n+            }\n+            a[i] += b[i] * c[i];\n+        }\n+        dummy(a, b, c, d, e, aa, bb, cc, 0.);\n+    }\n+\n+    return calc_checksum(__func__);\n+}\n+\n+int main (int argc, char **argv)\n+{\n+  int n1 = 1;\n+  int n3 = 1;\n+  int* ip;\n+  real_t s1,s2;\n+  init(&ip, &s1, &s2);\n+\n+  run(&s481, \"s481\", NULL);\n+\n+  return 0;\n+}\n+\n+/* { dg-final { scan-tree-dump \"vectorized 1 loops\" \"vect\" { xfail *-*-* } } } */"}, {"sha": "c4e26806292af03d59d5b9dc13777ba36831c7fc", "filename": "gcc/testsuite/gcc.dg/vect/tsvc/vect-tsvc-s482.c", "status": "added", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f81970b5f386630b98a33373c23dcc9234c6a980/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Ftsvc%2Fvect-tsvc-s482.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f81970b5f386630b98a33373c23dcc9234c6a980/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Ftsvc%2Fvect-tsvc-s482.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Ftsvc%2Fvect-tsvc-s482.c?ref=f81970b5f386630b98a33373c23dcc9234c6a980", "patch": "@@ -0,0 +1,40 @@\n+/*  This file is distributed under the University of Illinois Open Source\n+    License. See license.txt for details.  */\n+\n+/* { dg-additional-options \"--param vect-epilogues-nomask=0\" } */\n+/* { dg-require-effective-target vect_float } */\n+\n+#include \"tsvc.h\"\n+\n+real_t s482(struct args_t * func_args)\n+{\n+//    non-local goto's\n+//    other loop exit with code before exit\n+\n+    initialise_arrays(__func__);\n+\n+    for (int nl = 0; nl < iterations; nl++) {\n+        for (int i = 0; i < LEN_1D; i++) {\n+            a[i] += b[i] * c[i];\n+            if (c[i] > b[i]) break;\n+        }\n+        dummy(a, b, c, d, e, aa, bb, cc, 0.);\n+    }\n+\n+    return calc_checksum(__func__);\n+}\n+\n+int main (int argc, char **argv)\n+{\n+  int n1 = 1;\n+  int n3 = 1;\n+  int* ip;\n+  real_t s1,s2;\n+  init(&ip, &s1, &s2);\n+\n+  run(&s482, \"s482\", NULL);\n+\n+  return 0;\n+}\n+\n+/* { dg-final { scan-tree-dump \"vectorized 1 loops\" \"vect\" { xfail *-*-* } } } */"}, {"sha": "89ac780d511ce666be8c9d77d664eefee192f9d1", "filename": "gcc/testsuite/gcc.dg/vect/tsvc/vect-tsvc-s491.c", "status": "added", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f81970b5f386630b98a33373c23dcc9234c6a980/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Ftsvc%2Fvect-tsvc-s491.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f81970b5f386630b98a33373c23dcc9234c6a980/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Ftsvc%2Fvect-tsvc-s491.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Ftsvc%2Fvect-tsvc-s491.c?ref=f81970b5f386630b98a33373c23dcc9234c6a980", "patch": "@@ -0,0 +1,42 @@\n+/*  This file is distributed under the University of Illinois Open Source\n+    License. See license.txt for details.  */\n+\n+/* { dg-additional-options \"--param vect-epilogues-nomask=0\" } */\n+/* { dg-require-effective-target vect_float } */\n+\n+#include \"tsvc.h\"\n+\n+real_t s491(struct args_t * func_args)\n+{\n+//    vector semantics\n+//    indirect addressing on lhs, store in sequence\n+//    scatter is required\n+\n+    int * __restrict__ ip = func_args->arg_info;\n+\n+    initialise_arrays(__func__);\n+\n+    for (int nl = 0; nl < iterations; nl++) {\n+        for (int i = 0; i < LEN_1D; i++) {\n+            a[ip[i]] = b[i] + c[i] * d[i];\n+        }\n+        dummy(a, b, c, d, e, aa, bb, cc, 0.);\n+    }\n+\n+    return calc_checksum(__func__);\n+}\n+\n+int main (int argc, char **argv)\n+{\n+  int n1 = 1;\n+  int n3 = 1;\n+  int* ip;\n+  real_t s1,s2;\n+  init(&ip, &s1, &s2);\n+\n+  run(&s491, \"s491\", ip);\n+\n+  return 0;\n+}\n+\n+/* { dg-final { scan-tree-dump \"vectorized 1 loops\" \"vect\" { xfail *-*-* } } } */"}, {"sha": "441b5bda2199691bee335c2a37570b9b9e1e06a1", "filename": "gcc/testsuite/gcc.dg/vect/tsvc/vect-tsvc-va.c", "status": "added", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f81970b5f386630b98a33373c23dcc9234c6a980/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Ftsvc%2Fvect-tsvc-va.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f81970b5f386630b98a33373c23dcc9234c6a980/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Ftsvc%2Fvect-tsvc-va.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Ftsvc%2Fvect-tsvc-va.c?ref=f81970b5f386630b98a33373c23dcc9234c6a980", "patch": "@@ -0,0 +1,39 @@\n+/*  This file is distributed under the University of Illinois Open Source\n+    License. See license.txt for details.  */\n+\n+/* { dg-additional-options \"--param vect-epilogues-nomask=0\" } */\n+/* { dg-require-effective-target vect_float } */\n+\n+#include \"tsvc.h\"\n+\n+real_t va(struct args_t * func_args)\n+{\n+//    control loops\n+//    vector assignment\n+\n+    initialise_arrays(__func__);\n+\n+    for (int nl = 0; nl < iterations*10; nl++) {\n+        for (int i = 0; i < LEN_1D; i++) {\n+            a[i] = b[i];\n+        }\n+        dummy(a, b, c, d, e, aa, bb, cc, 0.);\n+    }\n+\n+    return calc_checksum(__func__);\n+}\n+\n+int main (int argc, char **argv)\n+{\n+  int n1 = 1;\n+  int n3 = 1;\n+  int* ip;\n+  real_t s1,s2;\n+  init(&ip, &s1, &s2);\n+\n+  run(&va, \"va\", NULL);\n+\n+  return 0;\n+}\n+\n+/* { dg-final { scan-tree-dump-times \"vectorized 1 loops\" 1 \"vect\" } } */\n\\ No newline at end of file"}, {"sha": "9213b2787b2995f0867d1a259c74bd482fc3a140", "filename": "gcc/testsuite/gcc.dg/vect/tsvc/vect-tsvc-vag.c", "status": "added", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f81970b5f386630b98a33373c23dcc9234c6a980/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Ftsvc%2Fvect-tsvc-vag.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f81970b5f386630b98a33373c23dcc9234c6a980/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Ftsvc%2Fvect-tsvc-vag.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Ftsvc%2Fvect-tsvc-vag.c?ref=f81970b5f386630b98a33373c23dcc9234c6a980", "patch": "@@ -0,0 +1,42 @@\n+/*  This file is distributed under the University of Illinois Open Source\n+    License. See license.txt for details.  */\n+\n+/* { dg-additional-options \"--param vect-epilogues-nomask=0\" } */\n+/* { dg-require-effective-target vect_float } */\n+\n+#include \"tsvc.h\"\n+\n+real_t vag(struct args_t * func_args)\n+{\n+//    control loops\n+//    vector assignment, gather\n+//    gather is required\n+\n+    int * __restrict__ ip = func_args->arg_info;\n+\n+    initialise_arrays(__func__);\n+\n+    for (int nl = 0; nl < 2*iterations; nl++) {\n+        for (int i = 0; i < LEN_1D; i++) {\n+            a[i] = b[ip[i]];\n+        }\n+        dummy(a, b, c, d, e, aa, bb, cc, 0.);\n+    }\n+\n+    return calc_checksum(__func__);\n+}\n+\n+int main (int argc, char **argv)\n+{\n+  int n1 = 1;\n+  int n3 = 1;\n+  int* ip;\n+  real_t s1,s2;\n+  init(&ip, &s1, &s2);\n+\n+  run(&vag, \"vag\", ip);\n+\n+  return 0;\n+}\n+\n+/* { dg-final { scan-tree-dump-times \"vectorized 1 loops\" 1 \"vect\" } } */\n\\ No newline at end of file"}, {"sha": "46ec99b6a649fbbedf77eff1ef5214a920c34858", "filename": "gcc/testsuite/gcc.dg/vect/tsvc/vect-tsvc-vas.c", "status": "added", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f81970b5f386630b98a33373c23dcc9234c6a980/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Ftsvc%2Fvect-tsvc-vas.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f81970b5f386630b98a33373c23dcc9234c6a980/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Ftsvc%2Fvect-tsvc-vas.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Ftsvc%2Fvect-tsvc-vas.c?ref=f81970b5f386630b98a33373c23dcc9234c6a980", "patch": "@@ -0,0 +1,42 @@\n+/*  This file is distributed under the University of Illinois Open Source\n+    License. See license.txt for details.  */\n+\n+/* { dg-additional-options \"--param vect-epilogues-nomask=0\" } */\n+/* { dg-require-effective-target vect_float } */\n+\n+#include \"tsvc.h\"\n+\n+real_t vas(struct args_t * func_args)\n+{\n+//    control loops\n+//    vector assignment, scatter\n+//    scatter is required\n+\n+    int * __restrict__ ip = func_args->arg_info;\n+\n+    initialise_arrays(__func__);\n+\n+    for (int nl = 0; nl < 2*iterations; nl++) {\n+        for (int i = 0; i < LEN_1D; i++) {\n+            a[ip[i]] = b[i];\n+        }\n+        dummy(a, b, c, d, e, aa, bb, cc, 0.);\n+    }\n+\n+    return calc_checksum(__func__);\n+}\n+\n+int main (int argc, char **argv)\n+{\n+  int n1 = 1;\n+  int n3 = 1;\n+  int* ip;\n+  real_t s1,s2;\n+  init(&ip, &s1, &s2);\n+\n+  run(&vas, \"vas\", ip);\n+\n+  return 0;\n+}\n+\n+/* { dg-final { scan-tree-dump \"vectorized 1 loops\" \"vect\" { xfail *-*-* } } } */"}, {"sha": "801410db295d70e0eb05cdb0a3f2efd0b9601f38", "filename": "gcc/testsuite/gcc.dg/vect/tsvc/vect-tsvc-vbor.c", "status": "added", "additions": 54, "deletions": 0, "changes": 54, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f81970b5f386630b98a33373c23dcc9234c6a980/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Ftsvc%2Fvect-tsvc-vbor.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f81970b5f386630b98a33373c23dcc9234c6a980/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Ftsvc%2Fvect-tsvc-vbor.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Ftsvc%2Fvect-tsvc-vbor.c?ref=f81970b5f386630b98a33373c23dcc9234c6a980", "patch": "@@ -0,0 +1,54 @@\n+/*  This file is distributed under the University of Illinois Open Source\n+    License. See license.txt for details.  */\n+\n+/* { dg-additional-options \"--param vect-epilogues-nomask=0\" } */\n+/* { dg-require-effective-target vect_float } */\n+\n+#include \"tsvc.h\"\n+\n+real_t vbor(struct args_t * func_args)\n+{\n+//    control loops\n+//    basic operations rates, isolate arithmetic from memory traffic\n+//    all combinations of three, 59 flops for 6 loads and 1 store.\n+\n+    initialise_arrays(__func__);\n+\n+    real_t a1, b1, c1, d1, e1, f1;\n+    for (int nl = 0; nl < iterations*10; nl++) {\n+        for (int i = 0; i < LEN_2D; i++) {\n+            a1 = a[i];\n+            b1 = b[i];\n+            c1 = c[i];\n+            d1 = d[i];\n+            e1 = e[i];\n+            f1 = aa[0][i];\n+            a1 = a1 * b1 * c1 + a1 * b1 * d1 + a1 * b1 * e1 + a1 * b1 * f1 +\n+                a1 * c1 * d1 + a1 * c1 * e1 + a1 * c1 * f1 + a1 * d1 * e1\n+                + a1 * d1 * f1 + a1 * e1 * f1;\n+            b1 = b1 * c1 * d1 + b1 * c1 * e1 + b1 * c1 * f1 + b1 * d1 * e1 +\n+                b1 * d1 * f1 + b1 * e1 * f1;\n+            c1 = c1 * d1 * e1 + c1 * d1 * f1 + c1 * e1 * f1;\n+            d1 = d1 * e1 * f1;\n+            x[i] = a1 * b1 * c1 * d1;\n+        }\n+        dummy(a, b, c, d, e, aa, bb, cc, 0.);\n+    }\n+\n+    return calc_checksum(__func__);\n+}\n+\n+int main (int argc, char **argv)\n+{\n+  int n1 = 1;\n+  int n3 = 1;\n+  int* ip;\n+  real_t s1,s2;\n+  init(&ip, &s1, &s2);\n+\n+  run(&vbor, \"vbor\", NULL);\n+\n+  return 0;\n+}\n+\n+/* { dg-final { scan-tree-dump-times \"vectorized 1 loops\" 1 \"vect\" } } */\n\\ No newline at end of file"}, {"sha": "80ed9f81e506f57f4c3ff1be69e5a725ed2830e8", "filename": "gcc/testsuite/gcc.dg/vect/tsvc/vect-tsvc-vdotr.c", "status": "added", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f81970b5f386630b98a33373c23dcc9234c6a980/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Ftsvc%2Fvect-tsvc-vdotr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f81970b5f386630b98a33373c23dcc9234c6a980/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Ftsvc%2Fvect-tsvc-vdotr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Ftsvc%2Fvect-tsvc-vdotr.c?ref=f81970b5f386630b98a33373c23dcc9234c6a980", "patch": "@@ -0,0 +1,41 @@\n+/*  This file is distributed under the University of Illinois Open Source\n+    License. See license.txt for details.  */\n+\n+/* { dg-additional-options \"--param vect-epilogues-nomask=0\" } */\n+/* { dg-require-effective-target vect_float } */\n+\n+#include \"tsvc.h\"\n+\n+real_t vdotr(struct args_t * func_args)\n+{\n+//    control loops\n+//    vector dot product reduction\n+\n+    initialise_arrays(__func__);\n+\n+    real_t dot;\n+    for (int nl = 0; nl < iterations*10; nl++) {\n+        dot = 0.;\n+        for (int i = 0; i < LEN_1D; i++) {\n+            dot += a[i] * b[i];\n+        }\n+        dummy(a, b, c, d, e, aa, bb, cc, dot);\n+    }\n+\n+    return dot;\n+}\n+\n+int main (int argc, char **argv)\n+{\n+  int n1 = 1;\n+  int n3 = 1;\n+  int* ip;\n+  real_t s1,s2;\n+  init(&ip, &s1, &s2);\n+\n+  run(&vdotr, \"vdotr\", NULL);\n+\n+  return 0;\n+}\n+\n+/* { dg-final { scan-tree-dump-times \"vectorized 1 loops\" 1 \"vect\" } } */\n\\ No newline at end of file"}, {"sha": "152e6c49aed2612aac491ca3ee2902927947da68", "filename": "gcc/testsuite/gcc.dg/vect/tsvc/vect-tsvc-vif.c", "status": "added", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f81970b5f386630b98a33373c23dcc9234c6a980/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Ftsvc%2Fvect-tsvc-vif.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f81970b5f386630b98a33373c23dcc9234c6a980/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Ftsvc%2Fvect-tsvc-vif.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Ftsvc%2Fvect-tsvc-vif.c?ref=f81970b5f386630b98a33373c23dcc9234c6a980", "patch": "@@ -0,0 +1,41 @@\n+/*  This file is distributed under the University of Illinois Open Source\n+    License. See license.txt for details.  */\n+\n+/* { dg-additional-options \"--param vect-epilogues-nomask=0\" } */\n+/* { dg-require-effective-target vect_float } */\n+\n+#include \"tsvc.h\"\n+\n+real_t vif(struct args_t * func_args)\n+{\n+//    control loops\n+//    vector if\n+\n+    initialise_arrays(__func__);\n+\n+    for (int nl = 0; nl < iterations; nl++) {\n+        for (int i = 0; i < LEN_1D; i++) {\n+            if (b[i] > (real_t)0.) {\n+                a[i] = b[i];\n+            }\n+        }\n+        dummy(a, b, c, d, e, aa, bb, cc, 0.);\n+    }\n+\n+    return calc_checksum(__func__);\n+}\n+\n+int main (int argc, char **argv)\n+{\n+  int n1 = 1;\n+  int n3 = 1;\n+  int* ip;\n+  real_t s1,s2;\n+  init(&ip, &s1, &s2);\n+\n+  run(&vif, \"vif\", NULL);\n+\n+  return 0;\n+}\n+\n+/* { dg-final { scan-tree-dump \"vectorized 1 loops\" \"vect\" { xfail *-*-* } } } */"}, {"sha": "232904f887fb10d332fc189f1d7511f9e42815ae", "filename": "gcc/testsuite/gcc.dg/vect/tsvc/vect-tsvc-vpv.c", "status": "added", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f81970b5f386630b98a33373c23dcc9234c6a980/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Ftsvc%2Fvect-tsvc-vpv.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f81970b5f386630b98a33373c23dcc9234c6a980/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Ftsvc%2Fvect-tsvc-vpv.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Ftsvc%2Fvect-tsvc-vpv.c?ref=f81970b5f386630b98a33373c23dcc9234c6a980", "patch": "@@ -0,0 +1,39 @@\n+/*  This file is distributed under the University of Illinois Open Source\n+    License. See license.txt for details.  */\n+\n+/* { dg-additional-options \"--param vect-epilogues-nomask=0\" } */\n+/* { dg-require-effective-target vect_float } */\n+\n+#include \"tsvc.h\"\n+\n+real_t vpv(struct args_t * func_args)\n+{\n+//    control loops\n+//    vector plus vector\n+\n+    initialise_arrays(__func__);\n+\n+    for (int nl = 0; nl < iterations*10; nl++) {\n+        for (int i = 0; i < LEN_1D; i++) {\n+            a[i] += b[i];\n+        }\n+        dummy(a, b, c, d, e, aa, bb, cc, 0.);\n+    }\n+\n+    return calc_checksum(__func__);\n+}\n+\n+int main (int argc, char **argv)\n+{\n+  int n1 = 1;\n+  int n3 = 1;\n+  int* ip;\n+  real_t s1,s2;\n+  init(&ip, &s1, &s2);\n+\n+  run(&vpv, \"vpv\", NULL);\n+\n+  return 0;\n+}\n+\n+/* { dg-final { scan-tree-dump-times \"vectorized 1 loops\" 1 \"vect\" } } */\n\\ No newline at end of file"}, {"sha": "b4d085016f2f1c206b9a96e1d71067249a8d84ab", "filename": "gcc/testsuite/gcc.dg/vect/tsvc/vect-tsvc-vpvpv.c", "status": "added", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f81970b5f386630b98a33373c23dcc9234c6a980/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Ftsvc%2Fvect-tsvc-vpvpv.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f81970b5f386630b98a33373c23dcc9234c6a980/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Ftsvc%2Fvect-tsvc-vpvpv.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Ftsvc%2Fvect-tsvc-vpvpv.c?ref=f81970b5f386630b98a33373c23dcc9234c6a980", "patch": "@@ -0,0 +1,39 @@\n+/*  This file is distributed under the University of Illinois Open Source\n+    License. See license.txt for details.  */\n+\n+/* { dg-additional-options \"--param vect-epilogues-nomask=0\" } */\n+/* { dg-require-effective-target vect_float } */\n+\n+#include \"tsvc.h\"\n+\n+real_t vpvpv(struct args_t * func_args)\n+{\n+//    control loops\n+//    vector plus vector plus vector\n+\n+    initialise_arrays(__func__);\n+\n+    for (int nl = 0; nl < 4*iterations; nl++) {\n+        for (int i = 0; i < LEN_1D; i++) {\n+            a[i] += b[i] + c[i];\n+        }\n+        dummy(a, b, c, d, e, aa, bb, cc, 0.);\n+    }\n+\n+    return calc_checksum(__func__);\n+}\n+\n+int main (int argc, char **argv)\n+{\n+  int n1 = 1;\n+  int n3 = 1;\n+  int* ip;\n+  real_t s1,s2;\n+  init(&ip, &s1, &s2);\n+\n+  run(&vpvpv, \"vpvpv\", NULL);\n+\n+  return 0;\n+}\n+\n+/* { dg-final { scan-tree-dump-times \"vectorized 1 loops\" 1 \"vect\" } } */\n\\ No newline at end of file"}, {"sha": "f193afa5728e724ea0bb13ce1ece2457c1e50639", "filename": "gcc/testsuite/gcc.dg/vect/tsvc/vect-tsvc-vpvts.c", "status": "added", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f81970b5f386630b98a33373c23dcc9234c6a980/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Ftsvc%2Fvect-tsvc-vpvts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f81970b5f386630b98a33373c23dcc9234c6a980/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Ftsvc%2Fvect-tsvc-vpvts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Ftsvc%2Fvect-tsvc-vpvts.c?ref=f81970b5f386630b98a33373c23dcc9234c6a980", "patch": "@@ -0,0 +1,41 @@\n+/*  This file is distributed under the University of Illinois Open Source\n+    License. See license.txt for details.  */\n+\n+/* { dg-additional-options \"--param vect-epilogues-nomask=0\" } */\n+/* { dg-require-effective-target vect_float } */\n+\n+#include \"tsvc.h\"\n+\n+real_t vpvts(struct args_t * func_args)\n+{\n+//    control loops\n+//    vector plus vector times scalar\n+\n+    real_t s = *(int*)func_args->arg_info;\n+\n+    initialise_arrays(__func__);\n+\n+    for (int nl = 0; nl < iterations; nl++) {\n+        for (int i = 0; i < LEN_1D; i++) {\n+            a[i] += b[i] * s;\n+        }\n+        dummy(a, b, c, d, e, aa, bb, cc, 0.);\n+    }\n+\n+    return calc_checksum(__func__);\n+}\n+\n+int main (int argc, char **argv)\n+{\n+  int n1 = 1;\n+  int n3 = 1;\n+  int* ip;\n+  real_t s1,s2;\n+  init(&ip, &s1, &s2);\n+\n+  run(&vpvts, \"vpvts\", &s1);\n+\n+  return 0;\n+}\n+\n+/* { dg-final { scan-tree-dump-times \"vectorized 1 loops\" 1 \"vect\" } } */\n\\ No newline at end of file"}, {"sha": "b726b27e5e36e6229fda5880c0143901be7f5e23", "filename": "gcc/testsuite/gcc.dg/vect/tsvc/vect-tsvc-vpvtv.c", "status": "added", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f81970b5f386630b98a33373c23dcc9234c6a980/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Ftsvc%2Fvect-tsvc-vpvtv.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f81970b5f386630b98a33373c23dcc9234c6a980/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Ftsvc%2Fvect-tsvc-vpvtv.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Ftsvc%2Fvect-tsvc-vpvtv.c?ref=f81970b5f386630b98a33373c23dcc9234c6a980", "patch": "@@ -0,0 +1,39 @@\n+/*  This file is distributed under the University of Illinois Open Source\n+    License. See license.txt for details.  */\n+\n+/* { dg-additional-options \"--param vect-epilogues-nomask=0\" } */\n+/* { dg-require-effective-target vect_float } */\n+\n+#include \"tsvc.h\"\n+\n+real_t vpvtv(struct args_t * func_args)\n+{\n+//    control loops\n+//    vector plus vector times vector\n+\n+    initialise_arrays(__func__);\n+\n+    for (int nl = 0; nl < 4*iterations; nl++) {\n+        for (int i = 0; i < LEN_1D; i++) {\n+            a[i] += b[i] * c[i];\n+        }\n+        dummy(a, b, c, d, e, aa, bb, cc, 0.);\n+    }\n+\n+    return calc_checksum(__func__);\n+}\n+\n+int main (int argc, char **argv)\n+{\n+  int n1 = 1;\n+  int n3 = 1;\n+  int* ip;\n+  real_t s1,s2;\n+  init(&ip, &s1, &s2);\n+\n+  run(&vpvtv, \"vpvtv\", NULL);\n+\n+  return 0;\n+}\n+\n+/* { dg-final { scan-tree-dump-times \"vectorized 1 loops\" 1 \"vect\" } } */\n\\ No newline at end of file"}, {"sha": "0847eaed1e72557503a2ad34ec4ce63fd5f9678a", "filename": "gcc/testsuite/gcc.dg/vect/tsvc/vect-tsvc-vsumr.c", "status": "added", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f81970b5f386630b98a33373c23dcc9234c6a980/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Ftsvc%2Fvect-tsvc-vsumr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f81970b5f386630b98a33373c23dcc9234c6a980/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Ftsvc%2Fvect-tsvc-vsumr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Ftsvc%2Fvect-tsvc-vsumr.c?ref=f81970b5f386630b98a33373c23dcc9234c6a980", "patch": "@@ -0,0 +1,41 @@\n+/*  This file is distributed under the University of Illinois Open Source\n+    License. See license.txt for details.  */\n+\n+/* { dg-additional-options \"--param vect-epilogues-nomask=0\" } */\n+/* { dg-require-effective-target vect_float } */\n+\n+#include \"tsvc.h\"\n+\n+real_t vsumr(struct args_t * func_args)\n+{\n+//    control loops\n+//    vector sum reduction\n+\n+    initialise_arrays(__func__);\n+\n+    real_t sum;\n+    for (int nl = 0; nl < iterations*10; nl++) {\n+        sum = 0.;\n+        for (int i = 0; i < LEN_1D; i++) {\n+            sum += a[i];\n+        }\n+        dummy(a, b, c, d, e, aa, bb, cc, sum);\n+    }\n+\n+    return sum;\n+}\n+\n+int main (int argc, char **argv)\n+{\n+  int n1 = 1;\n+  int n3 = 1;\n+  int* ip;\n+  real_t s1,s2;\n+  init(&ip, &s1, &s2);\n+\n+  run(&vsumr, \"vsumr\", NULL);\n+\n+  return 0;\n+}\n+\n+/* { dg-final { scan-tree-dump-times \"vectorized 1 loops\" 1 \"vect\" } } */\n\\ No newline at end of file"}, {"sha": "d3457d483dc94336a293907f463524fe1fb28fca", "filename": "gcc/testsuite/gcc.dg/vect/tsvc/vect-tsvc-vtv.c", "status": "added", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f81970b5f386630b98a33373c23dcc9234c6a980/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Ftsvc%2Fvect-tsvc-vtv.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f81970b5f386630b98a33373c23dcc9234c6a980/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Ftsvc%2Fvect-tsvc-vtv.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Ftsvc%2Fvect-tsvc-vtv.c?ref=f81970b5f386630b98a33373c23dcc9234c6a980", "patch": "@@ -0,0 +1,39 @@\n+/*  This file is distributed under the University of Illinois Open Source\n+    License. See license.txt for details.  */\n+\n+/* { dg-additional-options \"--param vect-epilogues-nomask=0\" } */\n+/* { dg-require-effective-target vect_float } */\n+\n+#include \"tsvc.h\"\n+\n+real_t vtv(struct args_t * func_args)\n+{\n+//    control loops\n+//    vector times vector\n+\n+    initialise_arrays(__func__);\n+\n+    for (int nl = 0; nl < iterations*10; nl++) {\n+        for (int i = 0; i < LEN_1D; i++) {\n+            a[i] *= b[i];\n+        }\n+        dummy(a, b, c, d, e, aa, bb, cc, 0.);\n+    }\n+\n+    return calc_checksum(__func__);\n+}\n+\n+int main (int argc, char **argv)\n+{\n+  int n1 = 1;\n+  int n3 = 1;\n+  int* ip;\n+  real_t s1,s2;\n+  init(&ip, &s1, &s2);\n+\n+  run(&vtv, \"vtv\", NULL);\n+\n+  return 0;\n+}\n+\n+/* { dg-final { scan-tree-dump-times \"vectorized 1 loops\" 1 \"vect\" } } */\n\\ No newline at end of file"}, {"sha": "32148ec4c47fc9da835aaab78f5d05d34e9e2d78", "filename": "gcc/testsuite/gcc.dg/vect/tsvc/vect-tsvc-vtvtv.c", "status": "added", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f81970b5f386630b98a33373c23dcc9234c6a980/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Ftsvc%2Fvect-tsvc-vtvtv.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f81970b5f386630b98a33373c23dcc9234c6a980/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Ftsvc%2Fvect-tsvc-vtvtv.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Ftsvc%2Fvect-tsvc-vtvtv.c?ref=f81970b5f386630b98a33373c23dcc9234c6a980", "patch": "@@ -0,0 +1,39 @@\n+/*  This file is distributed under the University of Illinois Open Source\n+    License. See license.txt for details.  */\n+\n+/* { dg-additional-options \"--param vect-epilogues-nomask=0\" } */\n+/* { dg-require-effective-target vect_float } */\n+\n+#include \"tsvc.h\"\n+\n+real_t vtvtv(struct args_t * func_args)\n+{\n+//    control loops\n+//    vector times vector times vector\n+\n+    initialise_arrays(__func__);\n+\n+    for (int nl = 0; nl < 4*iterations; nl++) {\n+        for (int i = 0; i < LEN_1D; i++) {\n+            a[i] = a[i] * b[i] * c[i];\n+        }\n+        dummy(a, b, c, d, e, aa, bb, cc, 0.);\n+    }\n+\n+    return calc_checksum(__func__);\n+}\n+\n+int main (int argc, char **argv)\n+{\n+  int n1 = 1;\n+  int n3 = 1;\n+  int* ip;\n+  real_t s1,s2;\n+  init(&ip, &s1, &s2);\n+\n+  run(&vtvtv, \"vtvtv\", NULL);\n+\n+  return 0;\n+}\n+\n+/* { dg-final { scan-tree-dump-times \"vectorized 1 loops\" 1 \"vect\" } } */\n\\ No newline at end of file"}, {"sha": "7e333983f0dbc5d05e0c5c661a812d952a9bf82b", "filename": "gcc/testsuite/gcc.dg/vect/vect.exp", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f81970b5f386630b98a33373c23dcc9234c6a980/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f81970b5f386630b98a33373c23dcc9234c6a980/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect.exp?ref=f81970b5f386630b98a33373c23dcc9234c6a980", "patch": "@@ -94,6 +94,9 @@ foreach flags $VECT_ADDITIONAL_FLAGS {\n     et-dg-runtest dg-runtest [lsort \\\n \t[glob -nocomplain $srcdir/$subdir/vect-*.\\[cS\\]]] \\\n \t$flags $DEFAULT_VECTCFLAGS\n+    et-dg-runtest dg-runtest [lsort \\\n+\t[glob -nocomplain $srcdir/$subdir/tsvc/*.\\[cS\\]]] \\\n+\t$flags $DEFAULT_VECTCFLAGS\n     et-dg-runtest dg-runtest [lsort \\\n \t[glob -nocomplain $srcdir/$subdir/slp-*.\\[cS\\]]] \\\n \t$flags $DEFAULT_VECTCFLAGS"}]}