{"sha": "f48c7e87c5b9f7adbce961a0b081f59a5da999ab", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjQ4YzdlODdjNWI5ZjdhZGJjZTk2MWEwYjA4MWY1OWE1ZGE5OTlhYg==", "commit": {"author": {"name": "lrh2000", "email": "lrh2000@pku.edu.cn", "date": "2021-04-15T23:54:34Z"}, "committer": {"name": "lrh2000", "email": "lrh2000@pku.edu.cn", "date": "2021-04-24T07:21:31Z"}, "message": "Don't remove unreachable statements at HIR lowering", "tree": {"sha": "a51292d9a0d11909025d31a17b69771b498f7d1f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a51292d9a0d11909025d31a17b69771b498f7d1f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f48c7e87c5b9f7adbce961a0b081f59a5da999ab", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f48c7e87c5b9f7adbce961a0b081f59a5da999ab", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f48c7e87c5b9f7adbce961a0b081f59a5da999ab", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f48c7e87c5b9f7adbce961a0b081f59a5da999ab/comments", "author": {"login": "lrh2000", "id": 41988959, "node_id": "MDQ6VXNlcjQxOTg4OTU5", "avatar_url": "https://avatars.githubusercontent.com/u/41988959?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lrh2000", "html_url": "https://github.com/lrh2000", "followers_url": "https://api.github.com/users/lrh2000/followers", "following_url": "https://api.github.com/users/lrh2000/following{/other_user}", "gists_url": "https://api.github.com/users/lrh2000/gists{/gist_id}", "starred_url": "https://api.github.com/users/lrh2000/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lrh2000/subscriptions", "organizations_url": "https://api.github.com/users/lrh2000/orgs", "repos_url": "https://api.github.com/users/lrh2000/repos", "events_url": "https://api.github.com/users/lrh2000/events{/privacy}", "received_events_url": "https://api.github.com/users/lrh2000/received_events", "type": "User", "site_admin": false}, "committer": {"login": "lrh2000", "id": 41988959, "node_id": "MDQ6VXNlcjQxOTg4OTU5", "avatar_url": "https://avatars.githubusercontent.com/u/41988959?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lrh2000", "html_url": "https://github.com/lrh2000", "followers_url": "https://api.github.com/users/lrh2000/followers", "following_url": "https://api.github.com/users/lrh2000/following{/other_user}", "gists_url": "https://api.github.com/users/lrh2000/gists{/gist_id}", "starred_url": "https://api.github.com/users/lrh2000/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lrh2000/subscriptions", "organizations_url": "https://api.github.com/users/lrh2000/orgs", "repos_url": "https://api.github.com/users/lrh2000/repos", "events_url": "https://api.github.com/users/lrh2000/events{/privacy}", "received_events_url": "https://api.github.com/users/lrh2000/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "de9af784e79926d01e8c030e999becc4b8bfad0f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/de9af784e79926d01e8c030e999becc4b8bfad0f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/de9af784e79926d01e8c030e999becc4b8bfad0f"}], "stats": {"total": 66, "additions": 50, "deletions": 16}, "files": [{"sha": "61854a07cefc45574c9fff81c489f656f9bd5d6d", "filename": "gcc/rust/ast/rust-stmt.h", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f48c7e87c5b9f7adbce961a0b081f59a5da999ab/gcc%2Frust%2Fast%2Frust-stmt.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f48c7e87c5b9f7adbce961a0b081f59a5da999ab/gcc%2Frust%2Fast%2Frust-stmt.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fast%2Frust-stmt.h?ref=f48c7e87c5b9f7adbce961a0b081f59a5da999ab", "patch": "@@ -38,6 +38,8 @@ class EmptyStmt : public Stmt\n \n   EmptyStmt (Location locus) : locus (locus) {}\n \n+  Location get_locus_slow () const final override { return get_locus (); }\n+\n   Location get_locus () const { return locus; }\n \n   void accept_vis (ASTVisitor &vis) override;\n@@ -135,6 +137,8 @@ class LetStmt : public Stmt\n   LetStmt (LetStmt &&other) = default;\n   LetStmt &operator= (LetStmt &&other) = default;\n \n+  Location get_locus_slow () const final override { return get_locus (); }\n+\n   Location get_locus () const { return locus; }\n \n   void accept_vis (ASTVisitor &vis) override;"}, {"sha": "7ba5d32607a508fe10e54042ccc47104e773d7ba", "filename": "gcc/rust/hir/rust-ast-lower.cc", "status": "modified", "additions": 9, "deletions": 16, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f48c7e87c5b9f7adbce961a0b081f59a5da999ab/gcc%2Frust%2Fhir%2Frust-ast-lower.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f48c7e87c5b9f7adbce961a0b081f59a5da999ab/gcc%2Frust%2Fhir%2Frust-ast-lower.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fhir%2Frust-ast-lower.cc?ref=f48c7e87c5b9f7adbce961a0b081f59a5da999ab", "patch": "@@ -71,26 +71,16 @@ ASTLoweringBlock::visit (AST::BlockExpr &expr)\n   std::vector<std::unique_ptr<HIR::Stmt> > block_stmts;\n   bool block_did_terminate = false;\n   expr.iterate_stmts ([&] (AST::Stmt *s) mutable -> bool {\n+    if (block_did_terminate)\n+      rust_warning_at (s->get_locus_slow (), 0, \"unreachable statement\");\n+\n     bool terminated = false;\n     auto translated_stmt = ASTLoweringStmt::translate (s, &terminated);\n     block_stmts.push_back (std::unique_ptr<HIR::Stmt> (translated_stmt));\n-    block_did_terminate = terminated;\n-    return !block_did_terminate;\n-  });\n-\n-  // if there was a return expression everything after that becomes\n-  // unreachable code. This can be detected for any AST NodeIDs that have no\n-  // associated HIR Mappings\n-  expr.iterate_stmts ([&] (AST::Stmt *s) -> bool {\n-    HirId ref;\n-    if (!mappings->lookup_node_to_hir (mappings->get_current_crate (),\n-\t\t\t\t       s->get_node_id (), &ref))\n-      rust_warning_at (s->get_locus_slow (), 0, \"unreachable statement\");\n-\n+    block_did_terminate |= terminated;\n     return true;\n   });\n \n-  bool tail_reachable = !block_did_terminate;\n   if (expr.has_tail_expr () && block_did_terminate)\n     {\n       // warning unreachable tail expressions\n@@ -101,10 +91,13 @@ ASTLoweringBlock::visit (AST::BlockExpr &expr)\n   HIR::ExprWithoutBlock *tail_expr = nullptr;\n   if (expr.has_tail_expr ())\n     {\n-      tail_expr = (HIR::ExprWithoutBlock *) ASTLoweringExpr::translate (\n-\texpr.get_tail_expr ().get ());\n+      bool terminated = false;\n+      tail_expr = (HIR::ExprWithoutBlock *)\n+\tASTLoweringExpr::translate (expr.get_tail_expr ().get (), &terminated);\n+      block_did_terminate |= terminated;\n     }\n \n+  bool tail_reachable = !block_did_terminate;\n   auto crate_num = mappings->get_current_crate ();\n   Analysis::NodeMapping mapping (crate_num, expr.get_node_id (),\n \t\t\t\t mappings->get_next_hir_id (crate_num),"}, {"sha": "ba7d5f015e967cc47b089e1501f08b826ae983fa", "filename": "gcc/testsuite/rust.test/compile/deadcode2.rs", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f48c7e87c5b9f7adbce961a0b081f59a5da999ab/gcc%2Ftestsuite%2Frust.test%2Fcompile%2Fdeadcode2.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f48c7e87c5b9f7adbce961a0b081f59a5da999ab/gcc%2Ftestsuite%2Frust.test%2Fcompile%2Fdeadcode2.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust.test%2Fcompile%2Fdeadcode2.rs?ref=f48c7e87c5b9f7adbce961a0b081f59a5da999ab", "patch": "@@ -0,0 +1,10 @@\n+fn foo() -> i32 {\n+    return 1;\n+\n+    let a = -1; // { dg-warning \"unreachable statement\" }\n+    a // { dg-warning \"unreachable expression\" }\n+}\n+\n+fn main() {\n+    foo();\n+}"}, {"sha": "8283231e45bef7d9d5047dd2c70b3a5d60582618", "filename": "gcc/testsuite/rust.test/xfail_compile/deadcode_err1.rs", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f48c7e87c5b9f7adbce961a0b081f59a5da999ab/gcc%2Ftestsuite%2Frust.test%2Fxfail_compile%2Fdeadcode_err1.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f48c7e87c5b9f7adbce961a0b081f59a5da999ab/gcc%2Ftestsuite%2Frust.test%2Fxfail_compile%2Fdeadcode_err1.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust.test%2Fxfail_compile%2Fdeadcode_err1.rs?ref=f48c7e87c5b9f7adbce961a0b081f59a5da999ab", "patch": "@@ -0,0 +1,11 @@\n+fn foo() -> i32 {\n+    return 1;\n+\n+    let mut a = 1; // { dg-warning \"unreachable statement\" }\n+    a = 1.1; // { dg-warning \"unreachable statement\" }\n+    // { dg-error \"expected .<integer>. got .<float>.\" \"\" { target { *-*-* } } .-1 }\n+}\n+\n+fn main() {\n+    foo();\n+}"}, {"sha": "8c0eb4617a76b3d8451f2e1c99f157cd70e831fe", "filename": "gcc/testsuite/rust.test/xfail_compile/deadcode_err2.rs", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f48c7e87c5b9f7adbce961a0b081f59a5da999ab/gcc%2Ftestsuite%2Frust.test%2Fxfail_compile%2Fdeadcode_err2.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f48c7e87c5b9f7adbce961a0b081f59a5da999ab/gcc%2Ftestsuite%2Frust.test%2Fxfail_compile%2Fdeadcode_err2.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust.test%2Fxfail_compile%2Fdeadcode_err2.rs?ref=f48c7e87c5b9f7adbce961a0b081f59a5da999ab", "patch": "@@ -0,0 +1,16 @@\n+fn foo() -> i32 {\n+    return 1;\n+    return 1.5; // { dg-error \"expected .i32. got .<float>.\" }\n+    // { dg-warning \"unreachable statement\" \"\" { target *-*-* } .-1 } \n+}\n+\n+fn bar() -> i32 {\n+    return 1.5; // { dg-error \"expected .i32. got .<float>.\" }\n+    return 1;\n+    // { dg-warning \"unreachable statement\" \"\" { target *-*-* } .-1 } \n+}\n+\n+fn main() {\n+    foo();\n+    bar();\n+}"}]}