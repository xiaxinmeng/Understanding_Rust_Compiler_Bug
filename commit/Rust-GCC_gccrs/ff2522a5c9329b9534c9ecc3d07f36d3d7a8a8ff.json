{"sha": "ff2522a5c9329b9534c9ecc3d07f36d3d7a8a8ff", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmYyNTIyYTVjOTMyOWI5NTM0YzllY2MzZDA3ZjM2ZDNkN2E4YThmZg==", "commit": {"author": {"name": "Nicola Pero", "email": "n.pero@mi.flashnet.it", "date": "2002-09-17T14:00:15Z"}, "committer": {"name": "Nicola Pero", "email": "nicola@gcc.gnu.org", "date": "2002-09-17T14:00:15Z"}, "message": "New tests for ObjC typechecking\n\nFrom-SVN: r57251", "tree": {"sha": "fbbfa70d04777d6da9d4abeda1801de8ae576c79", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/fbbfa70d04777d6da9d4abeda1801de8ae576c79"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ff2522a5c9329b9534c9ecc3d07f36d3d7a8a8ff", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ff2522a5c9329b9534c9ecc3d07f36d3d7a8a8ff", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ff2522a5c9329b9534c9ecc3d07f36d3d7a8a8ff", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ff2522a5c9329b9534c9ecc3d07f36d3d7a8a8ff/comments", "author": null, "committer": null, "parents": [{"sha": "1074d9d4926fe3c5302527fb8a1e152d532ec13a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1074d9d4926fe3c5302527fb8a1e152d532ec13a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1074d9d4926fe3c5302527fb8a1e152d532ec13a"}], "stats": {"total": 332, "additions": 332, "deletions": 0}, "files": [{"sha": "b9ce518dcac97f3a0b71386ac3a916a4d3703ec0", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ff2522a5c9329b9534c9ecc3d07f36d3d7a8a8ff/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ff2522a5c9329b9534c9ecc3d07f36d3d7a8a8ff/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=ff2522a5c9329b9534c9ecc3d07f36d3d7a8a8ff", "patch": "@@ -1,3 +1,12 @@\n+Tue Sep 17 13:59:45 2002  Nicola Pero  <n.pero@mi.flashnet.it>\n+\n+\t* objc.dg/comp-types-1.m: New test.\n+\t* objc.dg/comp-types-2.m: New test.\n+\t* objc.dg/comp-types-3.m: New test.\n+\t* objc.dg/comp-types-4.m: New test.\n+\t* objc.dg/comp-types-5.m: New test.\n+\t* objc.dg/comp-types-6.m: New test.\t\n+\n 2002-09-17  John David Anglin  <dave@hiauly1.hia.nrc.ca>\n \n \t* gcc.c-torture/execute/strct-stdarg-1.x: Remove file."}, {"sha": "74943860b2dced38fa4c1b90e9ae6174cc17816a", "filename": "gcc/testsuite/objc.dg/comp-types-1.m", "status": "added", "additions": 86, "deletions": 0, "changes": 86, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ff2522a5c9329b9534c9ecc3d07f36d3d7a8a8ff/gcc%2Ftestsuite%2Fobjc.dg%2Fcomp-types-1.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ff2522a5c9329b9534c9ecc3d07f36d3d7a8a8ff/gcc%2Ftestsuite%2Fobjc.dg%2Fcomp-types-1.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc.dg%2Fcomp-types-1.m?ref=ff2522a5c9329b9534c9ecc3d07f36d3d7a8a8ff", "patch": "@@ -0,0 +1,86 @@\n+/* Test various ObjC types assignments and comparisons.  */\n+/* Author: Nicola Pero <nicola@brainstorm.co.uk>.  */\n+/* { dg-do compile } */\n+#include <objc/objc.h>\n+\n+@protocol MyProtocol\n+- (void) foo;\n+@end\n+\n+@interface MyClass\n+@end\n+\n+@interface MyOtherClass <MyProtocol>\n+- (void) foo;\n+@end\n+\n+int main()\n+{\n+  id obj = nil;\n+  id<MyProtocol> obj_p = nil;\n+  MyClass *obj_c = nil;\n+  MyOtherClass *obj_cp = nil;\n+  Class obj_C = Nil;\n+\n+  /* Assigning to an 'id' variable should never\n+     generate a warning.  */\n+  obj = obj_p;  /* Ok  */\n+  obj = obj_c;  /* Ok  */\n+  obj = obj_cp; /* Ok  */\n+  obj = obj_C;  /* Ok  */\n+  \n+  /* Assigning to a 'MyClass *' variable should always generate a\n+     warning, unless done from an 'id'.  */\n+  obj_c = obj;    /* Ok */\n+  obj_c = obj_p;  /* { dg-warning \"incompatible pointer type\" } */\n+  obj_c = obj_cp; /* { dg-warning \"incompatible pointer type\" } */\n+  obj_c = obj_C;  /* { dg-warning \"incompatible pointer type\" } */\n+\n+  /* Assigning to an 'id<MyProtocol>' variable should generate a\n+     warning if done from a 'MyClass *' (which doesn't implement\n+     MyProtocol), but not from an 'id' or from a 'MyOtherClass *'\n+     (which implements MyProtocol).  */\n+  obj_p = obj;    /* Ok */\n+  obj_p = obj_c;  /* { dg-warning \"does not implement\" } */ /*FIXME: Duplicated*/\n+  obj_p = obj_cp; /* Ok  */\n+  obj_p = obj_C;  /* { dg-warning \"incompatible pointer type\" } */\n+\n+  /* Assigning to a 'MyOtherClass *' variable should always generate\n+     a warning, unless done from an 'id'  */\n+  obj_cp = obj;    /* Ok */\n+  obj_cp = obj_c;  /* { dg-warning \"incompatible pointer type\" } */\n+  obj_cp = obj_p;  /* { dg-warning \"incompatible pointer type\" } */\n+  obj_cp = obj_C;  /* { dg-warning \"incompatible pointer type\" } */\n+\n+  /* Any comparison involving an 'id' must be without warnings.  */\n+  if (obj == obj_p) ;  /* Ok  */ /*Bogus warning here in 2.95.4*/\n+  if (obj_p == obj) ;  /* Ok  */\n+  if (obj == obj_c) ;  /* Ok  */\n+  if (obj_c == obj) ;  /* Ok  */\n+  if (obj == obj_cp) ; /* Ok  */\n+  if (obj_cp == obj) ; /* Ok  */\n+  if (obj == obj_C) ;  /* Ok  */\n+  if (obj_C == obj) ;  /* Ok  */\n+\n+  /* Any comparison between 'MyClass *' and anything which is not an 'id'\n+     must generate a warning.  */\n+  if (obj_c == obj_p) ; /* { dg-warning \"does not implement\" } */\n+  if (obj_p == obj_c) ; /* { dg-warning \"does not implement\" } */\n+  if (obj_c == obj_cp) ; /* { dg-warning \"lacks a cast\" } */\n+  if (obj_cp == obj_c) ; /* { dg-warning \"lacks a cast\" } */\n+  if (obj_c == obj_C) ;  /* { dg-warning \"lacks a cast\" } */\n+  if (obj_C == obj_c) ;  /* { dg-warning \"lacks a cast\" } */\n+\n+  /* Any comparison between 'MyOtherClass *' (which implements\n+     MyProtocol) and an 'id' implementing MyProtocol are Ok.  */\n+  if (obj_cp == obj_p) ; /* Ok */\n+  if (obj_p == obj_cp) ; /* Ok */\n+\n+\n+  if (obj_p == obj_C) ; /* { dg-warning \"lacks a cast\" } */\n+  if (obj_C == obj_p) ; /* { dg-warning \"lacks a cast\" } */\n+  if (obj_cp == obj_C) ; /* { dg-warning \"lacks a cast\" } */\n+  if (obj_C == obj_cp) ; /* { dg-warning \"lacks a cast\" } */\n+\n+  return 0;\n+}"}, {"sha": "6e88df999b7ac6819be0f478cb569b266aa5977e", "filename": "gcc/testsuite/objc.dg/comp-types-2.m", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ff2522a5c9329b9534c9ecc3d07f36d3d7a8a8ff/gcc%2Ftestsuite%2Fobjc.dg%2Fcomp-types-2.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ff2522a5c9329b9534c9ecc3d07f36d3d7a8a8ff/gcc%2Ftestsuite%2Fobjc.dg%2Fcomp-types-2.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc.dg%2Fcomp-types-2.m?ref=ff2522a5c9329b9534c9ecc3d07f36d3d7a8a8ff", "patch": "@@ -0,0 +1,37 @@\n+/* Test simple ObjC types casts.  */\n+/* Author: Nicola Pero <nicola@brainstorm.co.uk>.  */\n+/* { dg-do compile } */\n+#include <objc/objc.h>\n+\n+@protocol MyProtocol\n+- (void) foo;\n+@end\n+\n+@interface MyClass\n+@end\n+\n+int main()\n+{\n+  id obj = nil;\n+  id<MyProtocol> obj_p = nil;\n+  MyClass *obj_c = nil;\n+  Class obj_C = Nil;\n+\n+  /* All these casts should generate no warnings.  */\n+\n+  obj = (id)obj_p;\n+  obj = (id)obj_c;\n+  obj = (id)obj_C;\n+  obj_c = (MyClass *)obj;\n+  obj_c = (MyClass *)obj_p;\n+  obj_c = (MyClass *)obj_C;\n+  obj_p = (id<MyProtocol>)obj;\n+  obj_p = (id<MyProtocol>)obj_c;\n+  obj_p = (id<MyProtocol>)obj_C;\n+  obj_C = (Class)obj;\n+  obj_C = (Class)obj_p;\n+  obj_C = (Class)obj_c;\n+  \n+\n+  return 0;\n+}"}, {"sha": "51f418ef529c347d4292a6eef89fd2f4e6aa2c9f", "filename": "gcc/testsuite/objc.dg/comp-types-3.m", "status": "added", "additions": 63, "deletions": 0, "changes": 63, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ff2522a5c9329b9534c9ecc3d07f36d3d7a8a8ff/gcc%2Ftestsuite%2Fobjc.dg%2Fcomp-types-3.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ff2522a5c9329b9534c9ecc3d07f36d3d7a8a8ff/gcc%2Ftestsuite%2Fobjc.dg%2Fcomp-types-3.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc.dg%2Fcomp-types-3.m?ref=ff2522a5c9329b9534c9ecc3d07f36d3d7a8a8ff", "patch": "@@ -0,0 +1,63 @@\n+/* Test assignments and comparisons between protocols (obscure case).  */\n+/* Author: Nicola Pero <nicola@brainstorm.co.uk>.  */\n+/* { dg-do compile } */\n+#include <objc/objc.h>\n+\n+@protocol MyProtocolA\n+- (void) methodA;\n+@end\n+\n+@protocol MyProtocolB\n+- (void) methodB;\n+@end\n+\n+@protocol MyProtocolAB <MyProtocolA, MyProtocolB>\n+@end\n+\n+@protocol MyProtocolAC <MyProtocolA>\n+- (void) methodC;\n+@end\n+\n+int main()\n+{\n+  id<MyProtocolA> obj_a = nil;\n+  id<MyProtocolB> obj_b = nil;\n+  id<MyProtocolAB> obj_ab = nil;\n+  id<MyProtocolAC> obj_ac = nil;\n+\n+  obj_a = obj_b;  /* { dg-warning \"does not conform\" } */\n+  obj_a = obj_ab; /* Ok */\n+  obj_a = obj_ac; /* Ok */\n+  \n+  obj_b = obj_a;  /* { dg-warning \"does not conform\" } */\n+  obj_b = obj_ab; /* Ok */\n+  obj_b = obj_ac; /* { dg-warning \"does not conform\" } */\n+  \n+  obj_ab = obj_a;  /* { dg-warning \"does not conform\" } */\n+  obj_ab = obj_b;  /* { dg-warning \"does not conform\" } */\n+  obj_ab = obj_ac; /* { dg-warning \"does not conform\" } */\n+  \n+  obj_ac = obj_a;  /* { dg-warning \"does not conform\" } */\n+  obj_ac = obj_b;  /* { dg-warning \"does not conform\" } */\n+  obj_ac = obj_ab; /* { dg-warning \"does not conform\" } */\n+\n+  if (obj_a == obj_b) ; /* { dg-warning \"lacks a cast\" } */\n+  if (obj_b == obj_a) ; /* { dg-warning \"lacks a cast\" } */\n+\n+  if (obj_a == obj_ab) ; /* Ok */\n+  if (obj_ab == obj_a) ; /* Ok */ /* Spurious 2.95.4 warning here */\n+\n+  if (obj_a == obj_ac) ; /* Ok */ \n+  if (obj_ac == obj_a) ; /* Ok */ /* Spurious 2.95.4 warning here */\n+\n+  if (obj_b == obj_ab) ; /* Ok */ \n+  if (obj_ab == obj_b) ; /* Ok */ /* Spurious 2.95.4 warning here */\n+\n+  if (obj_b == obj_ac) ; /* { dg-warning \"lacks a cast\" } */ \n+  if (obj_ac == obj_b) ; /* { dg-warning \"lacks a cast\" } */ \n+\n+  if (obj_ab == obj_ac) ; /* { dg-warning \"lacks a cast\" } */ \n+  if (obj_ac == obj_ab) ; /* { dg-warning \"lacks a cast\" } */ \n+\n+  return 0;\n+}"}, {"sha": "e07780485ee3d89b1324fefabe27e74fc7af816f", "filename": "gcc/testsuite/objc.dg/comp-types-4.m", "status": "added", "additions": 68, "deletions": 0, "changes": 68, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ff2522a5c9329b9534c9ecc3d07f36d3d7a8a8ff/gcc%2Ftestsuite%2Fobjc.dg%2Fcomp-types-4.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ff2522a5c9329b9534c9ecc3d07f36d3d7a8a8ff/gcc%2Ftestsuite%2Fobjc.dg%2Fcomp-types-4.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc.dg%2Fcomp-types-4.m?ref=ff2522a5c9329b9534c9ecc3d07f36d3d7a8a8ff", "patch": "@@ -0,0 +1,68 @@\n+/* Test warnings for assignments and comparisons between ObjC and C types.  */\n+/* Author: Nicola Pero <nicola@brainstorm.co.uk>.  */\n+/* { dg-do compile } */\n+#include <objc/objc.h>\n+\n+@protocol MyProtocol\n+- (void) method;\n+@end\n+\n+@interface MyClass\n+@end\n+\n+int main()\n+{\n+  id obj = nil;\n+  id <MyProtocol> obj_p = nil;\n+  MyClass *obj_c = nil;\n+  Class obj_C = Nil;\n+  \n+  int i = 0;\n+  int *j = NULL;\n+\n+  /* These should all generate warnings.  */\n+  \n+  obj = i; /* { dg-warning \"pointer from integer without a cast\" } */\n+  obj = j; /* { dg-warning \"incompatible pointer type\" } */\n+\n+  obj_p = i; /* { dg-warning \"pointer from integer without a cast\" } */\n+  obj_p = j; /* { dg-warning \"incompatible pointer type\" } */\n+  \n+  obj_c = i; /* { dg-warning \"pointer from integer without a cast\" } */\n+  obj_c = j; /* { dg-warning \"incompatible pointer type\" } */\n+\n+  obj_C = i; /* { dg-warning \"pointer from integer without a cast\" } */\n+  obj_C = j; /* { dg-warning \"incompatible pointer type\" } */\n+  \n+  i = obj;   /* { dg-warning \"integer from pointer without a cast\" } */\n+  i = obj_p; /* { dg-warning \"integer from pointer without a cast\" } */\n+  i = obj_c; /* { dg-warning \"integer from pointer without a cast\" } */\n+  i = obj_C; /* { dg-warning \"integer from pointer without a cast\" } */\n+  \n+  j = obj;   /* { dg-warning \"incompatible pointer type\" } */\n+  j = obj_p; /* { dg-warning \"incompatible pointer type\" } */\n+  j = obj_c; /* { dg-warning \"incompatible pointer type\" } */\n+  j = obj_C; /* { dg-warning \"incompatible pointer type\" } */\n+  \n+  if (obj == i) ; /* { dg-warning \"comparison between pointer and integer\" } */\n+  if (i == obj) ; /* { dg-warning \"comparison between pointer and integer\" } */\n+  if (obj == j) ; /* { dg-warning \"lacks a cast\" } */\n+  if (j == obj) ; /* { dg-warning \"lacks a cast\" } */\n+\n+  if (obj_c == i) ; /*{ dg-warning \"comparison between pointer and integer\" }*/\n+  if (i == obj_c) ; /*{ dg-warning \"comparison between pointer and integer\" }*/\n+  if (obj_c == j) ; /* { dg-warning \"lacks a cast\" } */\n+  if (j == obj_c) ; /* { dg-warning \"lacks a cast\" } */\n+\n+  if (obj_p == i) ; /*{ dg-warning \"comparison between pointer and integer\" }*/\n+  if (i == obj_p) ; /*{ dg-warning \"comparison between pointer and integer\" }*/\n+  if (obj_p == j) ; /* { dg-warning \"lacks a cast\" } */\n+  if (j == obj_p) ; /* { dg-warning \"lacks a cast\" } */\n+\n+  if (obj_C == i) ; /*{ dg-warning \"comparison between pointer and integer\" }*/\n+  if (i == obj_C) ; /*{ dg-warning \"comparison between pointer and integer\" }*/\n+  if (obj_C == j) ; /* { dg-warning \"lacks a cast\" } */\n+  if (j == obj_C) ; /* { dg-warning \"lacks a cast\" } */\n+\n+  return 0;\n+}"}, {"sha": "f4d3dfc94e90503300c4be0d57eb2d6600063657", "filename": "gcc/testsuite/objc.dg/comp-types-5.m", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ff2522a5c9329b9534c9ecc3d07f36d3d7a8a8ff/gcc%2Ftestsuite%2Fobjc.dg%2Fcomp-types-5.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ff2522a5c9329b9534c9ecc3d07f36d3d7a8a8ff/gcc%2Ftestsuite%2Fobjc.dg%2Fcomp-types-5.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc.dg%2Fcomp-types-5.m?ref=ff2522a5c9329b9534c9ecc3d07f36d3d7a8a8ff", "patch": "@@ -0,0 +1,32 @@\n+/* Test assignments and comparisons involving `one-off' protocols.  */\n+/* Author: Nicola Pero <nicola@brainstorm.co.uk>.  */\n+/* { dg-do compile } */\n+#include <objc/objc.h>\n+\n+@protocol MyProtocol\n+- (void) method;\n+@end\n+\n+@interface MyClass\n+@end\n+\n+int main()\n+{\n+  id obj = nil;\n+  id <MyProtocol> obj_p = nil;\n+  MyClass<MyProtocol> *obj_cp = nil;\n+\n+  obj_cp = obj; /* Ok */\n+  obj = obj_cp; /* Ok */\n+\n+  obj_cp = obj_p; /* { dg-warning \"incompatible pointer type\" } */\n+  obj_p = obj_cp; /* Ok */ /* Spurious 2.95.4 warning here.  */\n+  \n+  if (obj_cp == obj) ; /* Ok */\n+  if (obj == obj_cp) ; /* Ok */\n+\n+  if (obj_cp == obj_p) ; /* Ok */\n+  if (obj_p == obj_cp) ; /* Ok */\n+\n+  return 0;\n+}"}, {"sha": "9403b532fd3cf145207d5200f51d4e5e3830b71c", "filename": "gcc/testsuite/objc.dg/comp-types-6.m", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ff2522a5c9329b9534c9ecc3d07f36d3d7a8a8ff/gcc%2Ftestsuite%2Fobjc.dg%2Fcomp-types-6.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ff2522a5c9329b9534c9ecc3d07f36d3d7a8a8ff/gcc%2Ftestsuite%2Fobjc.dg%2Fcomp-types-6.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc.dg%2Fcomp-types-6.m?ref=ff2522a5c9329b9534c9ecc3d07f36d3d7a8a8ff", "patch": "@@ -0,0 +1,37 @@\n+/* Test assignments and comparisons involving category protocols.  */\n+/* Author: Nicola Pero <nicola@brainstorm.co.uk>.  */\n+/* { dg-do compile } */\n+#include <objc/objc.h>\n+\n+@protocol MyProtocol\n+- (void) method;\n+@end\n+\n+@interface MyClass\n+@end\n+\n+@interface MyClass (Addition) <MyProtocol>\n+- (void) method;\n+@end\n+\n+@interface MyOtherClass : MyClass\n+@end\n+\n+int main()\n+{\n+  id <MyProtocol> obj_p = nil;\n+  MyClass *obj_cp = nil;\n+  MyOtherClass *obj_cp2 = nil;\n+\n+  obj_cp = obj_p;  /* { dg-warning \"incompatible pointer type\" } */\n+  obj_cp2 = obj_p; /* { dg-warning \"incompatible pointer type\" } */\n+  obj_p = obj_cp;  /* Ok */\n+  obj_p = obj_cp2; /* Ok */\n+\n+  if (obj_cp == obj_p) ; /* Ok */\n+  if (obj_cp2 == obj_p) ; /* Ok */\n+  if (obj_p == obj_cp) ; /* Ok */\n+  if (obj_p == obj_cp2) ; /* Ok */\n+\n+  return 0;\n+}"}]}